// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3059 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2273 0 0
// PrepareWesternBase ;
  41: CALL 2502 0 0
// Action ;
  45: CALL 5323 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
// uc_side := 4 ;
1155: LD_ADDR_OWVAR 20
1159: PUSH
1160: LD_INT 4
1162: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1163: LD_ADDR_EXP 46
1167: PUSH
1168: LD_STRING Powell
1170: PPUSH
1171: LD_INT 0
1173: PPUSH
1174: LD_STRING 
1176: PPUSH
1177: CALL 37751 0 3
1181: ST_TO_ADDR
// uc_side := 1 ;
1182: LD_ADDR_OWVAR 20
1186: PUSH
1187: LD_INT 1
1189: ST_TO_ADDR
// uc_nation := 1 ;
1190: LD_ADDR_OWVAR 21
1194: PUSH
1195: LD_INT 1
1197: ST_TO_ADDR
// if debug then
1198: LD_EXP 1
1202: IFFALSE 1332
// begin for i = 1 to 4 do
1204: LD_ADDR_VAR 0 2
1208: PUSH
1209: DOUBLE
1210: LD_INT 1
1212: DEC
1213: ST_TO_ADDR
1214: LD_INT 4
1216: PUSH
1217: FOR_TO
1218: IFFALSE 1269
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1220: LD_INT 0
1222: PPUSH
1223: LD_INT 1
1225: PPUSH
1226: LD_INT 2
1228: PPUSH
1229: CALL_OW 12
1233: PPUSH
1234: LD_INT 3
1236: PPUSH
1237: CALL_OW 380
// un := CreateHuman ;
1241: LD_ADDR_VAR 0 3
1245: PUSH
1246: CALL_OW 44
1250: ST_TO_ADDR
// others := others ^ un ;
1251: LD_ADDR_VAR 0 5
1255: PUSH
1256: LD_VAR 0 5
1260: PUSH
1261: LD_VAR 0 3
1265: ADD
1266: ST_TO_ADDR
// end ;
1267: GO 1217
1269: POP
1270: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1271: LD_ADDR_VAR 0 6
1275: PUSH
1276: LD_INT 21
1278: PUSH
1279: LD_INT 1
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: LD_INT 51
1287: PUSH
1288: LD_INT 90
1290: PUSH
1291: LD_INT 504
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 21
1304: PUSH
1305: LD_INT 1
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: LD_INT 51
1313: PUSH
1314: LD_INT 80
1316: PUSH
1317: LD_INT 750
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1332: LD_ADDR_EXP 37
1336: PUSH
1337: LD_STRING JMM
1339: PPUSH
1340: LD_EXP 1
1344: NOT
1345: PPUSH
1346: LD_EXP 3
1350: PPUSH
1351: CALL 37751 0 3
1355: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1356: LD_ADDR_EXP 38
1360: PUSH
1361: LD_STRING Bobby
1363: PPUSH
1364: LD_EXP 1
1368: NOT
1369: PPUSH
1370: LD_EXP 3
1374: PPUSH
1375: CALL 37751 0 3
1379: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1380: LD_ADDR_EXP 39
1384: PUSH
1385: LD_STRING Cyrus
1387: PPUSH
1388: LD_EXP 1
1392: NOT
1393: PPUSH
1394: LD_EXP 3
1398: PPUSH
1399: CALL 37751 0 3
1403: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1404: LD_ADDR_EXP 40
1408: PUSH
1409: LD_STRING Lisa
1411: PPUSH
1412: LD_EXP 1
1416: NOT
1417: PPUSH
1418: LD_EXP 3
1422: PPUSH
1423: CALL 37751 0 3
1427: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1428: LD_ADDR_EXP 41
1432: PUSH
1433: LD_STRING Khatam
1435: PPUSH
1436: LD_EXP 1
1440: NOT
1441: PPUSH
1442: LD_EXP 3
1446: PPUSH
1447: CALL 37751 0 3
1451: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1452: LD_ADDR_EXP 42
1456: PUSH
1457: LD_STRING Brian
1459: PPUSH
1460: LD_EXP 1
1464: NOT
1465: PPUSH
1466: LD_EXP 3
1470: PPUSH
1471: CALL 37751 0 3
1475: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1476: LD_ADDR_EXP 43
1480: PUSH
1481: LD_STRING Jerry
1483: PPUSH
1484: LD_EXP 1
1488: NOT
1489: PPUSH
1490: LD_EXP 3
1494: PPUSH
1495: CALL 37751 0 3
1499: ST_TO_ADDR
// if Bobby then
1500: LD_EXP 38
1504: IFFALSE 1535
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1506: LD_ADDR_VAR 0 4
1510: PUSH
1511: LD_VAR 0 4
1515: PPUSH
1516: LD_VAR 0 4
1520: PUSH
1521: LD_INT 1
1523: PLUS
1524: PPUSH
1525: LD_EXP 38
1529: PPUSH
1530: CALL_OW 2
1534: ST_TO_ADDR
// if Cyrus then
1535: LD_EXP 39
1539: IFFALSE 1570
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_VAR 0 4
1550: PPUSH
1551: LD_VAR 0 4
1555: PUSH
1556: LD_INT 1
1558: PLUS
1559: PPUSH
1560: LD_EXP 39
1564: PPUSH
1565: CALL_OW 2
1569: ST_TO_ADDR
// if Lisa then
1570: LD_EXP 40
1574: IFFALSE 1605
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1576: LD_ADDR_VAR 0 4
1580: PUSH
1581: LD_VAR 0 4
1585: PPUSH
1586: LD_VAR 0 4
1590: PUSH
1591: LD_INT 1
1593: PLUS
1594: PPUSH
1595: LD_EXP 40
1599: PPUSH
1600: CALL_OW 2
1604: ST_TO_ADDR
// if Khatam then
1605: LD_EXP 41
1609: IFFALSE 1640
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1611: LD_ADDR_VAR 0 4
1615: PUSH
1616: LD_VAR 0 4
1620: PPUSH
1621: LD_VAR 0 4
1625: PUSH
1626: LD_INT 1
1628: PLUS
1629: PPUSH
1630: LD_EXP 41
1634: PPUSH
1635: CALL_OW 2
1639: ST_TO_ADDR
// if Brian then
1640: LD_EXP 42
1644: IFFALSE 1675
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1646: LD_ADDR_VAR 0 4
1650: PUSH
1651: LD_VAR 0 4
1655: PPUSH
1656: LD_VAR 0 4
1660: PUSH
1661: LD_INT 1
1663: PLUS
1664: PPUSH
1665: LD_EXP 42
1669: PPUSH
1670: CALL_OW 2
1674: ST_TO_ADDR
// if Jerry then
1675: LD_EXP 43
1679: IFFALSE 1710
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1681: LD_ADDR_VAR 0 4
1685: PUSH
1686: LD_VAR 0 4
1690: PPUSH
1691: LD_VAR 0 4
1695: PUSH
1696: LD_INT 1
1698: PLUS
1699: PPUSH
1700: LD_EXP 43
1704: PPUSH
1705: CALL_OW 2
1709: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1710: LD_STRING 02_other_survivors
1712: PPUSH
1713: CALL_OW 28
1717: IFFALSE 1732
// others := CreateCharacterSet ( 02_other_survivors ) ;
1719: LD_ADDR_VAR 0 5
1723: PUSH
1724: LD_STRING 02_other_survivors
1726: PPUSH
1727: CALL_OW 31
1731: ST_TO_ADDR
// if others then
1732: LD_VAR 0 5
1736: IFFALSE 1761
// begin tmp := tmp ^ others ;
1738: LD_ADDR_VAR 0 4
1742: PUSH
1743: LD_VAR 0 4
1747: PUSH
1748: LD_VAR 0 5
1752: ADD
1753: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1754: LD_STRING 02_other_survivors
1756: PPUSH
1757: CALL_OW 40
// end ; jmm_units := tmp ;
1761: LD_ADDR_EXP 4
1765: PUSH
1766: LD_VAR 0 4
1770: ST_TO_ADDR
// if not vehicles then
1771: LD_VAR 0 6
1775: NOT
1776: IFFALSE 1794
// vehicles := LoadVariable ( 02_tanks_1 , 0 ) ;
1778: LD_ADDR_VAR 0 6
1782: PUSH
1783: LD_STRING 02_tanks_1
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: CALL_OW 30
1793: ST_TO_ADDR
// if vehicles then
1794: LD_VAR 0 6
1798: IFFALSE 1992
// begin got_mech := false ;
1800: LD_ADDR_VAR 0 7
1804: PUSH
1805: LD_INT 0
1807: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
1808: LD_VAR 0 4
1812: PPUSH
1813: LD_INT 25
1815: PUSH
1816: LD_INT 3
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PPUSH
1823: CALL_OW 72
1827: IFFALSE 1837
// got_mech := true ;
1829: LD_ADDR_VAR 0 7
1833: PUSH
1834: LD_INT 1
1836: ST_TO_ADDR
// for i = 1 to vehicles do
1837: LD_ADDR_VAR 0 2
1841: PUSH
1842: DOUBLE
1843: LD_INT 1
1845: DEC
1846: ST_TO_ADDR
1847: LD_VAR 0 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1990
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
1855: LD_ADDR_VAR 0 3
1859: PUSH
1860: LD_INT 1
1862: PPUSH
1863: LD_INT 3
1865: PPUSH
1866: LD_VAR 0 6
1870: PUSH
1871: LD_VAR 0 2
1875: ARRAY
1876: PUSH
1877: LD_INT 1
1879: ARRAY
1880: PPUSH
1881: LD_VAR 0 6
1885: PUSH
1886: LD_VAR 0 2
1890: ARRAY
1891: PUSH
1892: LD_INT 2
1894: ARRAY
1895: PPUSH
1896: LD_VAR 0 6
1900: PUSH
1901: LD_VAR 0 2
1905: ARRAY
1906: PUSH
1907: LD_INT 3
1909: ARRAY
1910: PPUSH
1911: LD_VAR 0 6
1915: PUSH
1916: LD_VAR 0 2
1920: ARRAY
1921: PUSH
1922: LD_INT 4
1924: ARRAY
1925: PPUSH
1926: LD_INT 40
1928: PPUSH
1929: CALL 497 0 7
1933: ST_TO_ADDR
// if not got_mech then
1934: LD_VAR 0 7
1938: NOT
1939: IFFALSE 1965
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
1941: LD_VAR 0 3
1945: PPUSH
1946: LD_VAR 0 6
1950: PUSH
1951: LD_VAR 0 2
1955: ARRAY
1956: PUSH
1957: LD_INT 6
1959: ARRAY
1960: PPUSH
1961: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
1965: LD_ADDR_VAR 0 4
1969: PUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: LD_VAR 0 3
1982: PPUSH
1983: CALL_OW 2
1987: ST_TO_ADDR
// end ;
1988: GO 1852
1990: POP
1991: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
1992: LD_EXP 37
1996: PPUSH
1997: LD_INT 194
1999: PPUSH
2000: LD_INT 119
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL_OW 48
// if tmp then
2010: LD_VAR 0 4
2014: IFFALSE 2202
// begin for i in tmp do
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: LD_VAR 0 4
2025: PUSH
2026: FOR_IN
2027: IFFALSE 2200
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2029: LD_VAR 0 2
2033: PPUSH
2034: CALL_OW 257
2038: PUSH
2039: LD_INT 1
2041: NONEQUAL
2042: PUSH
2043: LD_VAR 0 2
2047: PUSH
2048: LD_EXP 41
2052: NONEQUAL
2053: AND
2054: IFFALSE 2068
// SetClass ( i , 1 ) ;
2056: LD_VAR 0 2
2060: PPUSH
2061: LD_INT 1
2063: PPUSH
2064: CALL_OW 336
// if i = Khatam then
2068: LD_VAR 0 2
2072: PUSH
2073: LD_EXP 41
2077: EQUAL
2078: IFFALSE 2092
// SetClass ( i , 4 ) ;
2080: LD_VAR 0 2
2084: PPUSH
2085: LD_INT 4
2087: PPUSH
2088: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2092: LD_ADDR_VAR 0 8
2096: PUSH
2097: LD_INT 22
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 21
2109: PUSH
2110: LD_INT 2
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 58
2119: PUSH
2120: EMPTY
2121: LIST
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: PPUSH
2128: CALL_OW 69
2132: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2133: LD_VAR 0 2
2137: PPUSH
2138: CALL_OW 247
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: PUSH
2147: LD_VAR 0 8
2151: AND
2152: IFFALSE 2174
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2154: LD_VAR 0 2
2158: PPUSH
2159: LD_VAR 0 8
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: CALL_OW 52
2172: GO 2189
// PlaceUnitArea ( i , startArea , false ) ;
2174: LD_VAR 0 2
2178: PPUSH
2179: LD_INT 1
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 49
// ComHold ( i ) ;
2189: LD_VAR 0 2
2193: PPUSH
2194: CALL_OW 140
// end ;
2198: GO 2026
2200: POP
2201: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2202: LD_ADDR_EXP 7
2206: PUSH
2207: LD_STRING 02_mikhailStatus_1
2209: PPUSH
2210: LD_INT 0
2212: PPUSH
2213: CALL_OW 30
2217: ST_TO_ADDR
// if not bierezov_exist and not debug then
2218: LD_EXP 7
2222: NOT
2223: PUSH
2224: LD_EXP 1
2228: NOT
2229: AND
2230: IFFALSE 2234
// exit ;
2232: GO 2268
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2234: LD_ADDR_EXP 45
2238: PUSH
2239: LD_STRING Mikhail
2241: PPUSH
2242: LD_INT 0
2244: PPUSH
2245: LD_STRING 
2247: PPUSH
2248: CALL 37751 0 3
2252: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2253: LD_EXP 45
2257: PPUSH
2258: LD_INT 1
2260: PPUSH
2261: LD_INT 0
2263: PPUSH
2264: CALL_OW 49
// end ;
2268: LD_VAR 0 1
2272: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2273: LD_INT 0
2275: PPUSH
2276: PPUSH
2277: PPUSH
2278: PPUSH
// uc_side := 4 ;
2279: LD_ADDR_OWVAR 20
2283: PUSH
2284: LD_INT 4
2286: ST_TO_ADDR
// uc_nation := 1 ;
2287: LD_ADDR_OWVAR 21
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2295: LD_ADDR_EXP 44
2299: PUSH
2300: LD_STRING Cornell
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: LD_STRING 
2308: PPUSH
2309: CALL 37751 0 3
2313: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2314: LD_ADDR_EXP 6
2318: PUSH
2319: LD_INT 9
2321: PUSH
2322: LD_EXP 4
2326: MINUS
2327: ST_TO_ADDR
// tmp := [ ] ;
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: EMPTY
2334: ST_TO_ADDR
// if cornel_units < 4 then
2335: LD_EXP 6
2339: PUSH
2340: LD_INT 4
2342: LESS
2343: IFFALSE 2353
// cornel_units := 4 ;
2345: LD_ADDR_EXP 6
2349: PUSH
2350: LD_INT 4
2352: ST_TO_ADDR
// for i = 1 to cornel_units do
2353: LD_ADDR_VAR 0 4
2357: PUSH
2358: DOUBLE
2359: LD_INT 1
2361: DEC
2362: ST_TO_ADDR
2363: LD_EXP 6
2367: PUSH
2368: FOR_TO
2369: IFFALSE 2467
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2371: LD_INT 0
2373: PPUSH
2374: LD_INT 1
2376: PUSH
2377: LD_INT 1
2379: PUSH
2380: LD_INT 1
2382: PUSH
2383: LD_INT 2
2385: PUSH
2386: LD_INT 4
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: PUSH
2396: LD_VAR 0 4
2400: PUSH
2401: LD_INT 5
2403: MOD
2404: PUSH
2405: LD_INT 1
2407: PLUS
2408: ARRAY
2409: PPUSH
2410: LD_INT 2
2412: PPUSH
2413: CALL_OW 380
// un := CreateHuman ;
2417: LD_ADDR_VAR 0 3
2421: PUSH
2422: CALL_OW 44
2426: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_VAR 0 2
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_VAR 0 3
2444: PPUSH
2445: CALL_OW 2
2449: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2450: LD_VAR 0 3
2454: PPUSH
2455: LD_INT 2
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: CALL_OW 49
// end ;
2465: GO 2368
2467: POP
2468: POP
// cornel_units := tmp ;
2469: LD_ADDR_EXP 6
2473: PUSH
2474: LD_VAR 0 2
2478: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2479: LD_EXP 44
2483: PPUSH
2484: LD_INT 191
2486: PPUSH
2487: LD_INT 106
2489: PPUSH
2490: LD_INT 0
2492: PPUSH
2493: CALL_OW 48
// end ;
2497: LD_VAR 0 1
2501: RET
// export function PrepareWesternBase ; var i ; begin
2502: LD_INT 0
2504: PPUSH
2505: PPUSH
// uc_side := 8 ;
2506: LD_ADDR_OWVAR 20
2510: PUSH
2511: LD_INT 8
2513: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2514: LD_ADDR_EXP 47
2518: PUSH
2519: LD_STRING Lynch
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: LD_STRING 
2527: PPUSH
2528: CALL 37751 0 3
2532: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2533: LD_ADDR_EXP 48
2537: PUSH
2538: LD_STRING Walker
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: LD_STRING 
2546: PPUSH
2547: CALL 37751 0 3
2551: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2552: LD_ADDR_EXP 49
2556: PUSH
2557: LD_STRING Turner
2559: PPUSH
2560: LD_INT 0
2562: PPUSH
2563: LD_STRING 
2565: PPUSH
2566: CALL 37751 0 3
2570: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2571: LD_ADDR_EXP 50
2575: PUSH
2576: LD_STRING Jillian
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: LD_STRING 
2584: PPUSH
2585: CALL 37751 0 3
2589: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: LD_EXP 47
2599: PUSH
2600: LD_EXP 48
2604: PUSH
2605: LD_EXP 49
2609: PUSH
2610: LD_EXP 50
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: PUSH
2621: FOR_IN
2622: IFFALSE 2650
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
2624: LD_VAR 0 2
2628: PPUSH
2629: LD_INT 3
2631: PPUSH
2632: LD_INT 0
2634: PPUSH
2635: CALL_OW 49
// ComHold ( i ) ;
2639: LD_VAR 0 2
2643: PPUSH
2644: CALL_OW 140
// end ;
2648: GO 2621
2650: POP
2651: POP
// end ;
2652: LD_VAR 0 1
2656: RET
// export function SelectGroup ; var units , selected , i ; begin
2657: LD_INT 0
2659: PPUSH
2660: PPUSH
2661: PPUSH
2662: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
2663: LD_ADDR_VAR 0 2
2667: PUSH
2668: LD_EXP 37
2672: PUSH
2673: LD_INT -3
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PUSH
2680: LD_EXP 4
2684: ADD
2685: PUSH
2686: LD_INT -2
2688: PUSH
2689: LD_INT -4
2691: PUSH
2692: LD_EXP 44
2696: PUSH
2697: LD_EXP 45
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: ADD
2708: PUSH
2709: LD_INT -3
2711: PUSH
2712: EMPTY
2713: LIST
2714: ADD
2715: PUSH
2716: LD_EXP 6
2720: ADD
2721: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
2722: LD_ADDR_VAR 0 3
2726: PUSH
2727: LD_EXP 37
2731: PUSH
2732: LD_STRING Select four characters to go with you
2734: PPUSH
2735: LD_INT 4
2737: PPUSH
2738: LD_INT 4
2740: PPUSH
2741: LD_VAR 0 2
2745: PPUSH
2746: EMPTY
2747: PPUSH
2748: CALL_OW 42
2752: ADD
2753: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
2754: LD_ADDR_EXP 6
2758: PUSH
2759: LD_EXP 4
2763: PUSH
2764: LD_EXP 6
2768: UNION
2769: PUSH
2770: LD_VAR 0 3
2774: DIFF
2775: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_EXP 6
2785: PUSH
2786: LD_EXP 45
2790: ADD
2791: PUSH
2792: FOR_IN
2793: IFFALSE 2824
// if GetSide ( i ) = 1 then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 255
2804: PUSH
2805: LD_INT 1
2807: EQUAL
2808: IFFALSE 2822
// SetSide ( i , 4 ) ;
2810: LD_VAR 0 4
2814: PPUSH
2815: LD_INT 4
2817: PPUSH
2818: CALL_OW 235
2822: GO 2792
2824: POP
2825: POP
// for i in selected do
2826: LD_ADDR_VAR 0 4
2830: PUSH
2831: LD_VAR 0 3
2835: PUSH
2836: FOR_IN
2837: IFFALSE 2868
// if GetSide ( i ) = 4 then
2839: LD_VAR 0 4
2843: PPUSH
2844: CALL_OW 255
2848: PUSH
2849: LD_INT 4
2851: EQUAL
2852: IFFALSE 2866
// SetSide ( i , 1 ) ;
2854: LD_VAR 0 4
2858: PPUSH
2859: LD_INT 1
2861: PPUSH
2862: CALL_OW 235
2866: GO 2836
2868: POP
2869: POP
// jmm_units := jmm_units diff cornel_units ;
2870: LD_ADDR_EXP 4
2874: PUSH
2875: LD_EXP 4
2879: PUSH
2880: LD_EXP 6
2884: DIFF
2885: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
2886: LD_EXP 38
2890: PPUSH
2891: CALL_OW 255
2895: PUSH
2896: LD_INT 4
2898: EQUAL
2899: IFFALSE 2914
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
2901: LD_EXP 3
2905: PUSH
2906: LD_STRING Bobby
2908: STR
2909: PPUSH
2910: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
2914: LD_EXP 39
2918: PPUSH
2919: CALL_OW 255
2923: PUSH
2924: LD_INT 4
2926: EQUAL
2927: IFFALSE 2942
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
2929: LD_EXP 3
2933: PUSH
2934: LD_STRING Cyrus
2936: STR
2937: PPUSH
2938: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
2942: LD_EXP 40
2946: PPUSH
2947: CALL_OW 255
2951: PUSH
2952: LD_INT 4
2954: EQUAL
2955: IFFALSE 2970
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
2957: LD_EXP 3
2961: PUSH
2962: LD_STRING Lisa
2964: STR
2965: PPUSH
2966: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
2970: LD_EXP 41
2974: PPUSH
2975: CALL_OW 255
2979: PUSH
2980: LD_INT 4
2982: EQUAL
2983: IFFALSE 2998
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
2985: LD_EXP 3
2989: PUSH
2990: LD_STRING Khatam
2992: STR
2993: PPUSH
2994: CALL_OW 40
// if GetSide ( Brian ) = 4 then
2998: LD_EXP 42
3002: PPUSH
3003: CALL_OW 255
3007: PUSH
3008: LD_INT 4
3010: EQUAL
3011: IFFALSE 3026
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3013: LD_EXP 3
3017: PUSH
3018: LD_STRING Brian
3020: STR
3021: PPUSH
3022: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3026: LD_EXP 43
3030: PPUSH
3031: CALL_OW 255
3035: PUSH
3036: LD_INT 4
3038: EQUAL
3039: IFFALSE 3054
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3041: LD_EXP 3
3045: PUSH
3046: LD_STRING Jerry
3048: STR
3049: PPUSH
3050: CALL_OW 40
// end ; end_of_file
3054: LD_VAR 0 1
3058: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3059: LD_INT 0
3061: PPUSH
3062: PPUSH
3063: PPUSH
3064: PPUSH
3065: PPUSH
3066: PPUSH
3067: PPUSH
3068: PPUSH
3069: PPUSH
3070: PPUSH
3071: PPUSH
3072: PPUSH
3073: PPUSH
// ru_alert := false ;
3074: LD_ADDR_EXP 60
3078: PUSH
3079: LD_INT 0
3081: ST_TO_ADDR
// ru_produce_list := [ ] ;
3082: LD_ADDR_EXP 57
3086: PUSH
3087: EMPTY
3088: ST_TO_ADDR
// if Difficulty > 1 then
3089: LD_OWVAR 67
3093: PUSH
3094: LD_INT 1
3096: GREATER
3097: IFFALSE 3185
// begin uc_side := 3 ;
3099: LD_ADDR_OWVAR 20
3103: PUSH
3104: LD_INT 3
3106: ST_TO_ADDR
// uc_nation := 3 ;
3107: LD_ADDR_OWVAR 21
3111: PUSH
3112: LD_INT 3
3114: ST_TO_ADDR
// bc_type := b_breastwork ;
3115: LD_ADDR_OWVAR 42
3119: PUSH
3120: LD_INT 31
3122: ST_TO_ADDR
// bc_level := Difficulty ;
3123: LD_ADDR_OWVAR 43
3127: PUSH
3128: LD_OWVAR 67
3132: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3133: LD_INT 22
3135: PPUSH
3136: LD_INT 14
3138: PPUSH
3139: LD_INT 0
3141: PPUSH
3142: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3146: LD_INT 48
3148: PPUSH
3149: LD_INT 46
3151: PPUSH
3152: LD_INT 0
3154: PPUSH
3155: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3159: LD_INT 86
3161: PPUSH
3162: LD_INT 65
3164: PPUSH
3165: LD_INT 5
3167: PPUSH
3168: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3172: LD_INT 165
3174: PPUSH
3175: LD_INT 73
3177: PPUSH
3178: LD_INT 5
3180: PPUSH
3181: CALL_OW 47
// end ; if Difficulty >= 3 then
3185: LD_OWVAR 67
3189: PUSH
3190: LD_INT 3
3192: GREATEREQUAL
3193: IFFALSE 3208
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3195: LD_INT 51
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: LD_INT 2
3203: PPUSH
3204: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3208: LD_ADDR_VAR 0 7
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: LD_INT 3
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 2
3225: PUSH
3226: LD_INT 30
3228: PUSH
3229: LD_INT 31
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: LD_INT 30
3238: PUSH
3239: LD_INT 32
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: LIST
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PPUSH
3255: CALL_OW 69
3259: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3260: LD_ADDR_VAR 0 8
3264: PUSH
3265: LD_INT 22
3267: PUSH
3268: LD_INT 3
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 30
3277: PUSH
3278: LD_INT 4
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: PPUSH
3289: CALL_OW 69
3293: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3294: LD_ADDR_VAR 0 10
3298: PUSH
3299: LD_INT 22
3301: PUSH
3302: LD_INT 3
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: LD_INT 30
3311: PUSH
3312: LD_INT 3
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PPUSH
3323: CALL_OW 69
3327: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3328: LD_ADDR_VAR 0 9
3332: PUSH
3333: LD_INT 22
3335: PUSH
3336: LD_INT 3
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 30
3345: PUSH
3346: LD_INT 6
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PPUSH
3357: CALL_OW 69
3361: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3362: LD_ADDR_VAR 0 2
3366: PUSH
3367: LD_INT 22
3369: PUSH
3370: LD_INT 3
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 30
3379: PUSH
3380: LD_INT 1
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PPUSH
3391: CALL_OW 69
3395: PUSH
3396: FOR_IN
3397: IFFALSE 3441
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3399: LD_VAR 0 2
3403: PPUSH
3404: CALL_OW 274
3408: PPUSH
3409: LD_INT 1
3411: PPUSH
3412: LD_INT 1000
3414: PPUSH
3415: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3419: LD_VAR 0 2
3423: PPUSH
3424: CALL_OW 274
3428: PPUSH
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 300
3434: PPUSH
3435: CALL_OW 277
// end ;
3439: GO 3396
3441: POP
3442: POP
// uc_side := 3 ;
3443: LD_ADDR_OWVAR 20
3447: PUSH
3448: LD_INT 3
3450: ST_TO_ADDR
// uc_nation := 3 ;
3451: LD_ADDR_OWVAR 21
3455: PUSH
3456: LD_INT 3
3458: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3459: LD_ADDR_VAR 0 11
3463: PUSH
3464: LD_INT 2
3466: PUSH
3467: LD_INT 3
3469: PUSH
3470: LD_INT 4
3472: PUSH
3473: LD_INT 4
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: PUSH
3482: LD_OWVAR 67
3486: ARRAY
3487: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3488: LD_ADDR_EXP 52
3492: PUSH
3493: LD_STRING Pokryshkin
3495: PPUSH
3496: LD_INT 0
3498: PPUSH
3499: LD_STRING 
3501: PPUSH
3502: CALL 37751 0 3
3506: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3507: LD_EXP 52
3511: PPUSH
3512: LD_INT 63
3514: PPUSH
3515: LD_INT 21
3517: PPUSH
3518: LD_INT 0
3520: PPUSH
3521: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3525: LD_EXP 52
3529: PPUSH
3530: CALL_OW 140
// InitHc ;
3534: CALL_OW 19
// for i in fac do
3538: LD_ADDR_VAR 0 2
3542: PUSH
3543: LD_VAR 0 10
3547: PUSH
3548: FOR_IN
3549: IFFALSE 3602
// begin for j = 1 to 6 do
3551: LD_ADDR_VAR 0 3
3555: PUSH
3556: DOUBLE
3557: LD_INT 1
3559: DEC
3560: ST_TO_ADDR
3561: LD_INT 6
3563: PUSH
3564: FOR_TO
3565: IFFALSE 3598
// begin PrepareHuman ( false , 3 , skill ) ;
3567: LD_INT 0
3569: PPUSH
3570: LD_INT 3
3572: PPUSH
3573: LD_VAR 0 11
3577: PPUSH
3578: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3582: CALL_OW 44
3586: PPUSH
3587: LD_VAR 0 2
3591: PPUSH
3592: CALL_OW 52
// end ;
3596: GO 3564
3598: POP
3599: POP
// end ;
3600: GO 3548
3602: POP
3603: POP
// for i in lab do
3604: LD_ADDR_VAR 0 2
3608: PUSH
3609: LD_VAR 0 9
3613: PUSH
3614: FOR_IN
3615: IFFALSE 3648
// begin PrepareHuman ( false , 4 , skill ) ;
3617: LD_INT 0
3619: PPUSH
3620: LD_INT 4
3622: PPUSH
3623: LD_VAR 0 11
3627: PPUSH
3628: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3632: CALL_OW 44
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 52
// end ;
3646: GO 3614
3648: POP
3649: POP
// for i in tw do
3650: LD_ADDR_VAR 0 2
3654: PUSH
3655: LD_VAR 0 7
3659: PUSH
3660: FOR_IN
3661: IFFALSE 3710
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
3663: LD_VAR 0 2
3667: PPUSH
3668: LD_INT 42
3670: PUSH
3671: LD_INT 43
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 1
3680: PPUSH
3681: LD_INT 2
3683: PPUSH
3684: CALL_OW 12
3688: ARRAY
3689: PPUSH
3690: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
3694: LD_VAR 0 11
3698: PPUSH
3699: LD_VAR 0 2
3703: PPUSH
3704: CALL 775 0 2
// end ;
3708: GO 3660
3710: POP
3711: POP
// for i in bar do
3712: LD_ADDR_VAR 0 2
3716: PUSH
3717: LD_VAR 0 8
3721: PUSH
3722: FOR_IN
3723: IFFALSE 3756
// begin PrepareHuman ( false , 1 , skill ) ;
3725: LD_INT 0
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_VAR 0 11
3735: PPUSH
3736: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3740: CALL_OW 44
3744: PPUSH
3745: LD_VAR 0 2
3749: PPUSH
3750: CALL_OW 52
// end ;
3754: GO 3722
3756: POP
3757: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
3758: LD_ADDR_VAR 0 13
3762: PUSH
3763: LD_INT 100
3765: PUSH
3766: LD_INT 9
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PUSH
3773: LD_INT 135
3775: PUSH
3776: LD_INT 60
3778: PUSH
3779: EMPTY
3780: LIST
3781: LIST
3782: PUSH
3783: LD_INT 41
3785: PUSH
3786: LD_INT 6
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: PUSH
3793: LD_INT 22
3795: PUSH
3796: LD_INT 9
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PUSH
3803: LD_INT 84
3805: PUSH
3806: LD_INT 14
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: ST_TO_ADDR
// vehicles := [ ] ;
3820: LD_ADDR_VAR 0 12
3824: PUSH
3825: EMPTY
3826: ST_TO_ADDR
// for i in spot_xy do
3827: LD_ADDR_VAR 0 2
3831: PUSH
3832: LD_VAR 0 13
3836: PUSH
3837: FOR_IN
3838: IFFALSE 3996
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
3840: LD_ADDR_VAR 0 6
3844: PUSH
3845: LD_INT 3
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 22
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: LD_INT 42
3862: PUSH
3863: LD_INT 43
3865: PUSH
3866: LD_INT 44
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 1
3876: PPUSH
3877: LD_INT 3
3879: PPUSH
3880: CALL_OW 12
3884: ARRAY
3885: PPUSH
3886: LD_INT 100
3888: PPUSH
3889: CALL 497 0 7
3893: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
3894: LD_ADDR_VAR 0 12
3898: PUSH
3899: LD_VAR 0 12
3903: PPUSH
3904: LD_VAR 0 12
3908: PUSH
3909: LD_INT 1
3911: PLUS
3912: PPUSH
3913: LD_VAR 0 6
3917: PPUSH
3918: CALL_OW 2
3922: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3923: LD_VAR 0 6
3927: PPUSH
3928: LD_INT 3
3930: PPUSH
3931: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
3935: LD_VAR 0 6
3939: PPUSH
3940: LD_VAR 0 2
3944: PUSH
3945: LD_INT 1
3947: ARRAY
3948: PPUSH
3949: LD_VAR 0 2
3953: PUSH
3954: LD_INT 2
3956: ARRAY
3957: PPUSH
3958: LD_INT 0
3960: PPUSH
3961: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
3965: LD_INT 0
3967: PPUSH
3968: LD_INT 3
3970: PPUSH
3971: LD_VAR 0 11
3975: PPUSH
3976: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3980: CALL_OW 44
3984: PPUSH
3985: LD_VAR 0 6
3989: PPUSH
3990: CALL_OW 52
// end ;
3994: GO 3837
3996: POP
3997: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
3998: LD_ADDR_VAR 0 2
4002: PUSH
4003: DOUBLE
4004: LD_INT 1
4006: DEC
4007: ST_TO_ADDR
4008: LD_INT 5
4010: PUSH
4011: LD_INT 7
4013: PUSH
4014: LD_INT 8
4016: PUSH
4017: LD_INT 9
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: PUSH
4026: LD_OWVAR 67
4030: ARRAY
4031: PUSH
4032: FOR_TO
4033: IFFALSE 4093
// begin PrepareHuman ( false , 1 , skill ) ;
4035: LD_INT 0
4037: PPUSH
4038: LD_INT 1
4040: PPUSH
4041: LD_VAR 0 11
4045: PPUSH
4046: CALL_OW 380
// un := CreateHuman ;
4050: LD_ADDR_VAR 0 5
4054: PUSH
4055: CALL_OW 44
4059: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4060: LD_VAR 0 5
4064: PPUSH
4065: LD_INT 11
4067: PPUSH
4068: LD_INT 0
4070: PPUSH
4071: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4075: LD_ADDR_EXP 55
4079: PUSH
4080: LD_EXP 55
4084: PUSH
4085: LD_VAR 0 5
4089: ADD
4090: ST_TO_ADDR
// end ;
4091: GO 4032
4093: POP
4094: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4095: LD_ADDR_VAR 0 2
4099: PUSH
4100: DOUBLE
4101: LD_INT 1
4103: DEC
4104: ST_TO_ADDR
4105: LD_INT 2
4107: PUSH
4108: LD_INT 3
4110: PUSH
4111: LD_INT 4
4113: PUSH
4114: LD_INT 5
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: LD_OWVAR 67
4127: ARRAY
4128: PUSH
4129: FOR_TO
4130: IFFALSE 4190
// begin PrepareHuman ( false , 1 , skill ) ;
4132: LD_INT 0
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: LD_VAR 0 11
4142: PPUSH
4143: CALL_OW 380
// un := CreateHuman ;
4147: LD_ADDR_VAR 0 5
4151: PUSH
4152: CALL_OW 44
4156: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4157: LD_VAR 0 5
4161: PPUSH
4162: LD_INT 12
4164: PPUSH
4165: LD_INT 0
4167: PPUSH
4168: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4172: LD_ADDR_EXP 53
4176: PUSH
4177: LD_EXP 53
4181: PUSH
4182: LD_VAR 0 5
4186: ADD
4187: ST_TO_ADDR
// end ;
4188: GO 4129
4190: POP
4191: POP
// for i = 1 to 2 do
4192: LD_ADDR_VAR 0 2
4196: PUSH
4197: DOUBLE
4198: LD_INT 1
4200: DEC
4201: ST_TO_ADDR
4202: LD_INT 2
4204: PUSH
4205: FOR_TO
4206: IFFALSE 4272
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4208: LD_INT 1
4210: PPUSH
4211: LD_INT 1
4213: PPUSH
4214: LD_VAR 0 11
4218: PPUSH
4219: CALL_OW 380
// un := CreateHuman ;
4223: LD_ADDR_VAR 0 5
4227: PUSH
4228: CALL_OW 44
4232: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4233: LD_VAR 0 5
4237: PPUSH
4238: LD_INT 39
4240: PPUSH
4241: LD_INT 12
4243: PPUSH
4244: LD_INT 3
4246: PPUSH
4247: LD_INT 0
4249: PPUSH
4250: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4254: LD_ADDR_EXP 54
4258: PUSH
4259: LD_EXP 54
4263: PUSH
4264: LD_VAR 0 5
4268: ADD
4269: ST_TO_ADDR
// end ;
4270: GO 4205
4272: POP
4273: POP
// for i = 1 to 3 do
4274: LD_ADDR_VAR 0 2
4278: PUSH
4279: DOUBLE
4280: LD_INT 1
4282: DEC
4283: ST_TO_ADDR
4284: LD_INT 3
4286: PUSH
4287: FOR_TO
4288: IFFALSE 4354
// begin PrepareHuman ( false , 1 , skill ) ;
4290: LD_INT 0
4292: PPUSH
4293: LD_INT 1
4295: PPUSH
4296: LD_VAR 0 11
4300: PPUSH
4301: CALL_OW 380
// un := CreateHuman ;
4305: LD_ADDR_VAR 0 5
4309: PUSH
4310: CALL_OW 44
4314: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4315: LD_VAR 0 5
4319: PPUSH
4320: LD_INT 180
4322: PPUSH
4323: LD_INT 11
4325: PPUSH
4326: LD_INT 4
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4336: LD_ADDR_EXP 58
4340: PUSH
4341: LD_EXP 58
4345: PUSH
4346: LD_VAR 0 5
4350: ADD
4351: ST_TO_ADDR
// end ;
4352: GO 4287
4354: POP
4355: POP
// ru_vehicles := vehicles ;
4356: LD_ADDR_EXP 56
4360: PUSH
4361: LD_VAR 0 12
4365: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4366: LD_ADDR_EXP 59
4370: PUSH
4371: LD_INT 131
4373: PUSH
4374: LD_INT 121
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_INT 113
4383: PUSH
4384: LD_INT 90
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: LD_INT 93
4393: PUSH
4394: LD_INT 62
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 106
4408: PUSH
4409: LD_INT 54
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 120
4418: PUSH
4419: LD_INT 80
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 143
4428: PUSH
4429: LD_INT 120
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 154
4443: PUSH
4444: LD_INT 116
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 140
4453: PUSH
4454: LD_INT 93
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: LD_INT 130
4463: PUSH
4464: LD_INT 58
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: LD_INT 105
4478: PUSH
4479: LD_INT 106
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 134
4488: PUSH
4489: LD_INT 98
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 159
4498: PUSH
4499: LD_INT 113
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: LIST
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: ST_TO_ADDR
// if Difficulty = 1 then
4517: LD_OWVAR 67
4521: PUSH
4522: LD_INT 1
4524: EQUAL
4525: IFFALSE 4529
// exit ;
4527: GO 4584
// for i = 1 to Difficulty - 1 do
4529: LD_ADDR_VAR 0 2
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_OWVAR 67
4543: PUSH
4544: LD_INT 1
4546: MINUS
4547: PUSH
4548: FOR_TO
4549: IFFALSE 4582
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
4551: LD_ADDR_EXP 57
4555: PUSH
4556: LD_EXP 57
4560: PUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: LD_INT 1
4569: PUSH
4570: LD_INT 43
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: ADD
4579: ST_TO_ADDR
4580: GO 4548
4582: POP
4583: POP
// end ;
4584: LD_VAR 0 1
4588: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
4589: LD_INT 22
4591: PUSH
4592: LD_INT 3
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: PUSH
4599: LD_INT 21
4601: PUSH
4602: LD_INT 2
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PPUSH
4613: CALL_OW 69
4617: IFFALSE 4711
4619: GO 4621
4621: DISABLE
4622: LD_INT 0
4624: PPUSH
4625: PPUSH
// begin enable ;
4626: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4627: LD_ADDR_VAR 0 2
4631: PUSH
4632: LD_INT 22
4634: PUSH
4635: LD_INT 3
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 21
4644: PUSH
4645: LD_INT 2
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PPUSH
4656: CALL_OW 69
4660: ST_TO_ADDR
// if filter then
4661: LD_VAR 0 2
4665: IFFALSE 4711
// for i in filter do
4667: LD_ADDR_VAR 0 1
4671: PUSH
4672: LD_VAR 0 2
4676: PUSH
4677: FOR_IN
4678: IFFALSE 4709
// if GetFuel ( i ) < 20 then
4680: LD_VAR 0 1
4684: PPUSH
4685: CALL_OW 261
4689: PUSH
4690: LD_INT 20
4692: LESS
4693: IFFALSE 4707
// SetFuel ( i , 20 ) ;
4695: LD_VAR 0 1
4699: PPUSH
4700: LD_INT 20
4702: PPUSH
4703: CALL_OW 240
4707: GO 4677
4709: POP
4710: POP
// end ;
4711: PPOPN 2
4713: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
4714: LD_EXP 57
4718: IFFALSE 4937
4720: GO 4722
4722: DISABLE
4723: LD_INT 0
4725: PPUSH
4726: PPUSH
4727: PPUSH
// begin enable ;
4728: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4729: LD_ADDR_VAR 0 2
4733: PUSH
4734: LD_INT 22
4736: PUSH
4737: LD_INT 3
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 30
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PPUSH
4758: CALL_OW 69
4762: ST_TO_ADDR
// can_produce := [ ] ;
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: EMPTY
4769: ST_TO_ADDR
// if not fac then
4770: LD_VAR 0 2
4774: NOT
4775: IFFALSE 4780
// begin disable ;
4777: DISABLE
// exit ;
4778: GO 4937
// end ; for i in fac do
4780: LD_ADDR_VAR 0 1
4784: PUSH
4785: LD_VAR 0 2
4789: PUSH
4790: FOR_IN
4791: IFFALSE 4829
// if UnitsInside ( i ) then
4793: LD_VAR 0 1
4797: PPUSH
4798: CALL_OW 313
4802: IFFALSE 4827
// can_produce := Insert ( can_produce , 1 , i ) ;
4804: LD_ADDR_VAR 0 3
4808: PUSH
4809: LD_VAR 0 3
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: LD_VAR 0 1
4821: PPUSH
4822: CALL_OW 2
4826: ST_TO_ADDR
4827: GO 4790
4829: POP
4830: POP
// if not can_produce then
4831: LD_VAR 0 3
4835: NOT
4836: IFFALSE 4840
// exit ;
4838: GO 4937
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
4840: LD_VAR 0 3
4844: PUSH
4845: LD_INT 1
4847: PPUSH
4848: LD_VAR 0 3
4852: PPUSH
4853: CALL_OW 12
4857: ARRAY
4858: PPUSH
4859: LD_EXP 57
4863: PUSH
4864: LD_INT 1
4866: ARRAY
4867: PPUSH
4868: LD_EXP 57
4872: PUSH
4873: LD_INT 2
4875: ARRAY
4876: PPUSH
4877: LD_EXP 57
4881: PUSH
4882: LD_INT 3
4884: ARRAY
4885: PPUSH
4886: LD_EXP 57
4890: PUSH
4891: LD_INT 4
4893: ARRAY
4894: PPUSH
4895: CALL_OW 125
// for i = 1 to 4 do
4899: LD_ADDR_VAR 0 1
4903: PUSH
4904: DOUBLE
4905: LD_INT 1
4907: DEC
4908: ST_TO_ADDR
4909: LD_INT 4
4911: PUSH
4912: FOR_TO
4913: IFFALSE 4935
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
4915: LD_ADDR_EXP 57
4919: PUSH
4920: LD_EXP 57
4924: PPUSH
4925: LD_INT 1
4927: PPUSH
4928: CALL_OW 3
4932: ST_TO_ADDR
4933: GO 4912
4935: POP
4936: POP
// end ;
4937: PPOPN 3
4939: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
4940: LD_INT 0
4942: PPUSH
4943: PPUSH
4944: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4945: LD_ADDR_VAR 0 2
4949: PUSH
4950: DOUBLE
4951: LD_INT 1
4953: DEC
4954: ST_TO_ADDR
4955: LD_INT 2
4957: PUSH
4958: LD_INT 3
4960: PUSH
4961: LD_INT 4
4963: PUSH
4964: LD_INT 4
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: LD_OWVAR 67
4977: ARRAY
4978: PUSH
4979: FOR_TO
4980: IFFALSE 5129
// begin PrepareHuman ( false , 3 , 3 ) ;
4982: LD_INT 0
4984: PPUSH
4985: LD_INT 3
4987: PPUSH
4988: LD_INT 3
4990: PPUSH
4991: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
4995: LD_ADDR_VAR 0 3
4999: PUSH
5000: LD_INT 3
5002: PPUSH
5003: LD_INT 3
5005: PPUSH
5006: LD_INT 22
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: LD_INT 1
5014: PPUSH
5015: LD_INT 43
5017: PUSH
5018: LD_INT 42
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: PUSH
5025: LD_INT 1
5027: PPUSH
5028: LD_INT 2
5030: PPUSH
5031: CALL_OW 12
5035: ARRAY
5036: PPUSH
5037: LD_INT 70
5039: PPUSH
5040: CALL 497 0 7
5044: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5045: LD_VAR 0 3
5049: PPUSH
5050: LD_INT 4
5052: PPUSH
5053: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5057: LD_VAR 0 3
5061: PPUSH
5062: LD_INT 229
5064: PPUSH
5065: LD_INT 44
5067: PPUSH
5068: LD_INT 0
5070: PPUSH
5071: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5075: CALL_OW 44
5079: PPUSH
5080: LD_VAR 0 3
5084: PPUSH
5085: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5089: LD_ADDR_EXP 56
5093: PUSH
5094: LD_EXP 56
5098: PUSH
5099: LD_VAR 0 3
5103: ADD
5104: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5105: LD_VAR 0 3
5109: PPUSH
5110: LD_INT 191
5112: PPUSH
5113: LD_INT 32
5115: PPUSH
5116: CALL_OW 111
// Wait ( 0 0$02 ) ;
5120: LD_INT 70
5122: PPUSH
5123: CALL_OW 67
// end ;
5127: GO 4979
5129: POP
5130: POP
// end ;
5131: LD_VAR 0 1
5135: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5136: LD_EXP 31
5140: PUSH
5141: LD_EXP 56
5145: AND
5146: IFFALSE 5320
5148: GO 5150
5150: DISABLE
5151: LD_INT 0
5153: PPUSH
5154: PPUSH
5155: PPUSH
// begin wait ( 0 0$50 ) ;
5156: LD_INT 1750
5158: PPUSH
5159: CALL_OW 67
// tmp := ru_vehicles ;
5163: LD_ADDR_VAR 0 3
5167: PUSH
5168: LD_EXP 56
5172: ST_TO_ADDR
// if not tmp then
5173: LD_VAR 0 3
5177: NOT
5178: IFFALSE 5182
// exit ;
5180: GO 5320
// repeat wait ( 0 0$1 ) ;
5182: LD_INT 35
5184: PPUSH
5185: CALL_OW 67
// for i in tmp do
5189: LD_ADDR_VAR 0 1
5193: PUSH
5194: LD_VAR 0 3
5198: PUSH
5199: FOR_IN
5200: IFFALSE 5311
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5202: LD_ADDR_VAR 0 2
5206: PUSH
5207: LD_INT 22
5209: PUSH
5210: LD_INT 1
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PPUSH
5217: LD_VAR 0 1
5221: PPUSH
5222: CALL_OW 74
5226: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5227: LD_VAR 0 1
5231: PPUSH
5232: LD_VAR 0 2
5236: PPUSH
5237: CALL_OW 296
5241: PUSH
5242: LD_INT 10
5244: GREATER
5245: IFFALSE 5264
// ComAgressiveMove ( i , 69 , 101 ) else
5247: LD_VAR 0 1
5251: PPUSH
5252: LD_INT 69
5254: PPUSH
5255: LD_INT 101
5257: PPUSH
5258: CALL_OW 114
5262: GO 5278
// ComAttackUnit ( i , enemy ) ;
5264: LD_VAR 0 1
5268: PPUSH
5269: LD_VAR 0 2
5273: PPUSH
5274: CALL_OW 115
// if GetLives ( i ) < 250 then
5278: LD_VAR 0 1
5282: PPUSH
5283: CALL_OW 256
5287: PUSH
5288: LD_INT 250
5290: LESS
5291: IFFALSE 5309
// tmp := tmp diff i ;
5293: LD_ADDR_VAR 0 3
5297: PUSH
5298: LD_VAR 0 3
5302: PUSH
5303: LD_VAR 0 1
5307: DIFF
5308: ST_TO_ADDR
// end ;
5309: GO 5199
5311: POP
5312: POP
// until not tmp ;
5313: LD_VAR 0 3
5317: NOT
5318: IFFALSE 5182
// end ; end_of_file
5320: PPOPN 3
5322: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5323: LD_INT 0
5325: PPUSH
5326: PPUSH
5327: PPUSH
5328: PPUSH
5329: PPUSH
5330: PPUSH
5331: PPUSH
// InGameOn ;
5332: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5336: LD_EXP 37
5340: PPUSH
5341: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5345: LD_EXP 37
5349: PPUSH
5350: LD_EXP 44
5354: PPUSH
5355: CALL_OW 119
// if Bierezov then
5359: LD_EXP 45
5363: IFFALSE 5379
// ComTurnUnit ( Bierezov , Cornel ) ;
5365: LD_EXP 45
5369: PPUSH
5370: LD_EXP 44
5374: PPUSH
5375: CALL_OW 119
// for i in jmm_units do
5379: LD_ADDR_VAR 0 2
5383: PUSH
5384: LD_EXP 4
5388: PUSH
5389: FOR_IN
5390: IFFALSE 5408
// ComTurnUnit ( i , Cornel ) ;
5392: LD_VAR 0 2
5396: PPUSH
5397: LD_EXP 44
5401: PPUSH
5402: CALL_OW 119
5406: GO 5389
5408: POP
5409: POP
// units := cornel_units union Cornel ;
5410: LD_ADDR_VAR 0 3
5414: PUSH
5415: LD_EXP 6
5419: PUSH
5420: LD_EXP 44
5424: UNION
5425: ST_TO_ADDR
// repeat wait ( 1 ) ;
5426: LD_INT 1
5428: PPUSH
5429: CALL_OW 67
// for i in units do
5433: LD_ADDR_VAR 0 2
5437: PUSH
5438: LD_VAR 0 3
5442: PUSH
5443: FOR_IN
5444: IFFALSE 5477
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5446: LD_VAR 0 2
5450: PPUSH
5451: LD_EXP 37
5455: PPUSH
5456: CALL_OW 250
5460: PPUSH
5461: LD_EXP 37
5465: PPUSH
5466: CALL_OW 251
5470: PPUSH
5471: CALL_OW 111
5475: GO 5443
5477: POP
5478: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5479: LD_VAR 0 3
5483: PPUSH
5484: LD_INT 92
5486: PUSH
5487: LD_EXP 37
5491: PPUSH
5492: CALL_OW 250
5496: PUSH
5497: LD_EXP 37
5501: PPUSH
5502: CALL_OW 251
5506: PUSH
5507: LD_INT 10
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: PPUSH
5516: CALL_OW 72
5520: PUSH
5521: LD_VAR 0 3
5525: EQUAL
5526: IFFALSE 5426
// for i in units do
5528: LD_ADDR_VAR 0 2
5532: PUSH
5533: LD_VAR 0 3
5537: PUSH
5538: FOR_IN
5539: IFFALSE 5557
// ComTurnUnit ( i , JMM ) ;
5541: LD_VAR 0 2
5545: PPUSH
5546: LD_EXP 37
5550: PPUSH
5551: CALL_OW 119
5555: GO 5538
5557: POP
5558: POP
// ComTurnUnit ( Cornel , JMM ) ;
5559: LD_EXP 44
5563: PPUSH
5564: LD_EXP 37
5568: PPUSH
5569: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
5573: LD_EXP 37
5577: PPUSH
5578: LD_STRING D1-JMM-1
5580: PPUSH
5581: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
5585: LD_EXP 44
5589: PPUSH
5590: LD_STRING D1-Corn-1
5592: PPUSH
5593: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
5597: LD_EXP 37
5601: PPUSH
5602: LD_EXP 44
5606: PPUSH
5607: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
5611: LD_EXP 44
5615: PPUSH
5616: LD_EXP 37
5620: PPUSH
5621: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
5625: LD_INT 35
5627: PPUSH
5628: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
5632: LD_EXP 37
5636: PPUSH
5637: LD_EXP 44
5641: PPUSH
5642: CALL_OW 296
5646: PUSH
5647: LD_INT 6
5649: LESS
5650: IFFALSE 5625
// ChangeSideFog ( 4 , 1 ) ;
5652: LD_INT 4
5654: PPUSH
5655: LD_INT 1
5657: PPUSH
5658: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
5662: LD_EXP 37
5666: PPUSH
5667: LD_EXP 44
5671: PPUSH
5672: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5676: LD_EXP 44
5680: PPUSH
5681: LD_EXP 37
5685: PPUSH
5686: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
5690: LD_EXP 37
5694: PPUSH
5695: LD_STRING D1-JMM-2
5697: PPUSH
5698: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
5702: LD_EXP 37
5706: PPUSH
5707: LD_STRING D1-JMM-2a
5709: PPUSH
5710: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
5714: LD_EXP 44
5718: PPUSH
5719: LD_STRING D1-Corn-2
5721: PPUSH
5722: CALL_OW 88
// if bierezov_exist or debug then
5726: LD_EXP 7
5730: PUSH
5731: LD_EXP 1
5735: OR
5736: IFFALSE 5977
// begin ComTurnUnit ( Cornel , Bierezov ) ;
5738: LD_EXP 44
5742: PPUSH
5743: LD_EXP 45
5747: PPUSH
5748: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
5752: LD_INT 10
5754: PPUSH
5755: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
5759: LD_EXP 44
5763: PPUSH
5764: LD_STRING D1a-Corn-1
5766: PPUSH
5767: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
5771: LD_EXP 37
5775: PPUSH
5776: LD_EXP 45
5780: PPUSH
5781: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
5785: LD_EXP 45
5789: PPUSH
5790: LD_EXP 37
5794: PPUSH
5795: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
5799: LD_EXP 37
5803: PPUSH
5804: LD_STRING D1a-JMM-1
5806: PPUSH
5807: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
5811: LD_EXP 37
5815: PPUSH
5816: LD_EXP 44
5820: PPUSH
5821: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5825: LD_EXP 44
5829: PPUSH
5830: LD_EXP 37
5834: PPUSH
5835: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
5839: LD_EXP 44
5843: PPUSH
5844: LD_STRING D1a-Corn-2
5846: PPUSH
5847: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
5851: LD_EXP 37
5855: PPUSH
5856: LD_STRING D1a-JMM-2
5858: PPUSH
5859: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
5863: LD_EXP 44
5867: PPUSH
5868: LD_STRING D1a-Corn-3
5870: PPUSH
5871: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
5875: LD_EXP 37
5879: PPUSH
5880: LD_STRING D1a-JMM-3
5882: PPUSH
5883: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
5887: LD_EXP 44
5891: PPUSH
5892: LD_STRING D1a-Corn-4
5894: PPUSH
5895: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
5899: LD_EXP 37
5903: PPUSH
5904: LD_STRING D1a-JMM-4
5906: PPUSH
5907: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
5911: LD_EXP 44
5915: PPUSH
5916: LD_STRING D1a-Corn-5
5918: PPUSH
5919: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
5923: LD_EXP 45
5927: PPUSH
5928: LD_EXP 44
5932: PPUSH
5933: CALL_OW 250
5937: PPUSH
5938: LD_EXP 44
5942: PPUSH
5943: CALL_OW 251
5947: PUSH
5948: LD_INT 2
5950: MINUS
5951: PPUSH
5952: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
5956: LD_EXP 45
5960: PPUSH
5961: LD_EXP 44
5965: PPUSH
5966: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
5970: LD_INT 10
5972: PPUSH
5973: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
5977: LD_EXP 37
5981: PPUSH
5982: LD_STRING D1b-JMM-1
5984: PPUSH
5985: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
5989: LD_EXP 44
5993: PPUSH
5994: LD_STRING D1b-Corn-1
5996: PPUSH
5997: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6001: LD_EXP 37
6005: PPUSH
6006: LD_STRING D1b-JMM-2
6008: PPUSH
6009: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6013: LD_EXP 44
6017: PPUSH
6018: LD_STRING D1b-Corn-2
6020: PPUSH
6021: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6025: LD_EXP 37
6029: PPUSH
6030: LD_STRING D1b-JMM-3
6032: PPUSH
6033: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6037: LD_INT 10
6039: PPUSH
6040: CALL_OW 67
// SayRadio ( Powell , D1b-Pow-3 ) ;
6044: LD_EXP 46
6048: PPUSH
6049: LD_STRING D1b-Pow-3
6051: PPUSH
6052: CALL_OW 94
// Say ( JMM , D1b-JMM-4 ) ;
6056: LD_EXP 37
6060: PPUSH
6061: LD_STRING D1b-JMM-4
6063: PPUSH
6064: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6068: LD_EXP 44
6072: PPUSH
6073: LD_STRING D1b-Corn-4
6075: PPUSH
6076: CALL_OW 88
// if Khatam then
6080: LD_EXP 41
6084: IFFALSE 6100
// Say ( Khatam , D1b-Khat-4 ) else
6086: LD_EXP 41
6090: PPUSH
6091: LD_STRING D1b-Khat-4
6093: PPUSH
6094: CALL_OW 88
6098: GO 6136
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6100: LD_EXP 6
6104: PPUSH
6105: LD_INT 26
6107: PUSH
6108: LD_INT 1
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PPUSH
6115: CALL_OW 72
6119: PUSH
6120: LD_EXP 44
6124: PUSH
6125: EMPTY
6126: LIST
6127: DIFF
6128: PPUSH
6129: LD_STRING D1b-Sol1-4
6131: PPUSH
6132: CALL 585 0 2
// if Cyrus then
6136: LD_EXP 39
6140: IFFALSE 6154
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6142: LD_EXP 39
6146: PPUSH
6147: LD_STRING D1b-Cyrus-4
6149: PPUSH
6150: CALL_OW 88
// if Lisa then
6154: LD_EXP 40
6158: IFFALSE 6216
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6160: LD_EXP 40
6164: PPUSH
6165: LD_STRING D1b-Lisa-4
6167: PPUSH
6168: CALL_OW 88
// if Cyrus then
6172: LD_EXP 39
6176: IFFALSE 6216
// begin if not IsInUnit ( Cyrus ) then
6178: LD_EXP 39
6182: PPUSH
6183: CALL_OW 310
6187: NOT
6188: IFFALSE 6204
// ComTurnUnit ( Cyrus , Lisa ) ;
6190: LD_EXP 39
6194: PPUSH
6195: LD_EXP 40
6199: PPUSH
6200: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6204: LD_EXP 39
6208: PPUSH
6209: LD_STRING D1b-Cyrus-5
6211: PPUSH
6212: CALL_OW 88
// end ; end ; SelectGroup ;
6216: CALL 2657 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6220: LD_EXP 37
6224: PPUSH
6225: LD_STRING D1d-JMM-1
6227: PPUSH
6228: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6232: LD_EXP 44
6236: PPUSH
6237: LD_STRING D1d-Corn-1
6239: PPUSH
6240: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6244: LD_ADDR_VAR 0 2
6248: PUSH
6249: LD_EXP 4
6253: PUSH
6254: LD_EXP 6
6258: ADD
6259: PUSH
6260: LD_EXP 37
6264: ADD
6265: PUSH
6266: FOR_IN
6267: IFFALSE 6280
// ComHold ( i ) ;
6269: LD_VAR 0 2
6273: PPUSH
6274: CALL_OW 140
6278: GO 6266
6280: POP
6281: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6282: LD_ADDR_VAR 0 4
6286: PUSH
6287: LD_INT 22
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 21
6299: PUSH
6300: LD_INT 2
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PPUSH
6311: CALL_OW 69
6315: ST_TO_ADDR
// if vehicles then
6316: LD_VAR 0 4
6320: IFFALSE 6658
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6322: LD_EXP 6
6326: PPUSH
6327: LD_INT 55
6329: PUSH
6330: EMPTY
6331: LIST
6332: PPUSH
6333: CALL_OW 72
6337: IFFALSE 6376
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6339: LD_ADDR_VAR 0 2
6343: PUSH
6344: LD_EXP 6
6348: PPUSH
6349: LD_INT 55
6351: PUSH
6352: EMPTY
6353: LIST
6354: PPUSH
6355: CALL_OW 72
6359: PUSH
6360: FOR_IN
6361: IFFALSE 6374
// ComExitVehicle ( i ) ;
6363: LD_VAR 0 2
6367: PPUSH
6368: CALL_OW 121
6372: GO 6360
6374: POP
6375: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6376: LD_ADDR_VAR 0 5
6380: PUSH
6381: LD_VAR 0 4
6385: PPUSH
6386: LD_INT 34
6388: PUSH
6389: LD_INT 51
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 72
6400: ST_TO_ADDR
// if cargos then
6401: LD_VAR 0 5
6405: IFFALSE 6588
// begin vehicles := cargos ;
6407: LD_ADDR_VAR 0 4
6411: PUSH
6412: LD_VAR 0 5
6416: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6417: LD_ADDR_VAR 0 6
6421: PUSH
6422: LD_STRING 02_resources_4
6424: PPUSH
6425: LD_INT 0
6427: PPUSH
6428: CALL_OW 30
6432: ST_TO_ADDR
// if debug and not resources then
6433: LD_EXP 1
6437: PUSH
6438: LD_VAR 0 6
6442: NOT
6443: AND
6444: IFFALSE 6454
// resources := 160 ;
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: LD_INT 160
6453: ST_TO_ADDR
// if resources mod 10 then
6454: LD_VAR 0 6
6458: PUSH
6459: LD_INT 10
6461: MOD
6462: IFFALSE 6484
// resources := resources - resources mod 10 ;
6464: LD_ADDR_VAR 0 6
6468: PUSH
6469: LD_VAR 0 6
6473: PUSH
6474: LD_VAR 0 6
6478: PUSH
6479: LD_INT 10
6481: MOD
6482: MINUS
6483: ST_TO_ADDR
// if resources then
6484: LD_VAR 0 6
6488: IFFALSE 6588
// for i in cargos do
6490: LD_ADDR_VAR 0 2
6494: PUSH
6495: LD_VAR 0 5
6499: PUSH
6500: FOR_IN
6501: IFFALSE 6586
// begin if resources < 100 then
6503: LD_VAR 0 6
6507: PUSH
6508: LD_INT 100
6510: LESS
6511: IFFALSE 6533
// begin cargo := resources ;
6513: LD_ADDR_VAR 0 7
6517: PUSH
6518: LD_VAR 0 6
6522: ST_TO_ADDR
// resources := 0 ;
6523: LD_ADDR_VAR 0 6
6527: PUSH
6528: LD_INT 0
6530: ST_TO_ADDR
// end else
6531: GO 6555
// begin cargo := 100 ;
6533: LD_ADDR_VAR 0 7
6537: PUSH
6538: LD_INT 100
6540: ST_TO_ADDR
// resources := resources - 100 ;
6541: LD_ADDR_VAR 0 6
6545: PUSH
6546: LD_VAR 0 6
6550: PUSH
6551: LD_INT 100
6553: MINUS
6554: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
6555: LD_VAR 0 2
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: LD_VAR 0 7
6567: PPUSH
6568: CALL_OW 290
// if resources = 0 then
6572: LD_VAR 0 6
6576: PUSH
6577: LD_INT 0
6579: EQUAL
6580: IFFALSE 6584
// break ;
6582: GO 6586
// end ;
6584: GO 6500
6586: POP
6587: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
6588: LD_VAR 0 4
6592: PUSH
6593: LD_INT 1
6595: ARRAY
6596: PPUSH
6597: CALL_OW 311
6601: PPUSH
6602: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
6606: LD_VAR 0 4
6610: PUSH
6611: LD_INT 1
6613: ARRAY
6614: PPUSH
6615: LD_INT 4
6617: PPUSH
6618: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
6622: LD_EXP 44
6626: PPUSH
6627: LD_VAR 0 4
6631: PUSH
6632: LD_INT 1
6634: ARRAY
6635: PPUSH
6636: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
6640: LD_INT 35
6642: PPUSH
6643: CALL_OW 67
// until IsInUnit ( Cornel ) ;
6647: LD_EXP 44
6651: PPUSH
6652: CALL_OW 310
6656: IFFALSE 6640
// end ; InGameOff ;
6658: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6662: LD_STRING M1
6664: PPUSH
6665: CALL_OW 337
// SaveForQuickRestart ;
6669: CALL_OW 22
// cornel_active := true ;
6673: LD_ADDR_EXP 8
6677: PUSH
6678: LD_INT 1
6680: ST_TO_ADDR
// end ;
6681: LD_VAR 0 1
6685: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
6686: LD_EXP 37
6690: PPUSH
6691: LD_EXP 47
6695: PPUSH
6696: CALL_OW 296
6700: PUSH
6701: LD_INT 10
6703: LESS
6704: IFFALSE 8087
6706: GO 6708
6708: DISABLE
6709: LD_INT 0
6711: PPUSH
6712: PPUSH
6713: PPUSH
6714: PPUSH
6715: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
6716: LD_ADDR_VAR 0 2
6720: PUSH
6721: LD_INT 89
6723: PUSH
6724: LD_INT 34
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: LD_INT 138
6733: PUSH
6734: LD_INT 63
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 196
6743: PUSH
6744: LD_INT 84
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 135
6753: PUSH
6754: LD_INT 52
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 103
6763: PUSH
6764: LD_INT 39
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 58
6773: PUSH
6774: LD_INT 30
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 38
6783: PUSH
6784: LD_INT 51
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: ST_TO_ADDR
// Video ( true ) ;
6800: LD_INT 1
6802: PPUSH
6803: CALL 74404 0 1
// if jmm_units then
6807: LD_EXP 4
6811: IFFALSE 6887
// for i in jmm_units do
6813: LD_ADDR_VAR 0 1
6817: PUSH
6818: LD_EXP 4
6822: PUSH
6823: FOR_IN
6824: IFFALSE 6885
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
6826: LD_VAR 0 1
6830: PPUSH
6831: LD_EXP 37
6835: PPUSH
6836: CALL_OW 296
6840: PUSH
6841: LD_INT 10
6843: LESS
6844: PUSH
6845: LD_VAR 0 1
6849: PPUSH
6850: CALL_OW 310
6854: NOT
6855: AND
6856: IFFALSE 6874
// ComTurnUnit ( i , JMM ) else
6858: LD_VAR 0 1
6862: PPUSH
6863: LD_EXP 37
6867: PPUSH
6868: CALL_OW 119
6872: GO 6883
// ComHold ( i ) ;
6874: LD_VAR 0 1
6878: PPUSH
6879: CALL_OW 140
// end ;
6883: GO 6823
6885: POP
6886: POP
// if IsInUnit ( JMM ) then
6887: LD_EXP 37
6891: PPUSH
6892: CALL_OW 310
6896: IFFALSE 6921
// begin ComExitVehicle ( JMM ) ;
6898: LD_EXP 37
6902: PPUSH
6903: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
6907: LD_EXP 37
6911: PPUSH
6912: LD_EXP 47
6916: PPUSH
6917: CALL_OW 172
// end ; Wait ( 10 ) ;
6921: LD_INT 10
6923: PPUSH
6924: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
6928: LD_EXP 37
6932: PPUSH
6933: LD_EXP 47
6937: PPUSH
6938: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
6942: LD_INT 35
6944: PPUSH
6945: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
6949: LD_EXP 37
6953: PPUSH
6954: LD_EXP 47
6958: PPUSH
6959: CALL_OW 296
6963: PUSH
6964: LD_INT 6
6966: LESS
6967: IFFALSE 6942
// ComTurnUnit ( JMM , Lynch ) ;
6969: LD_EXP 37
6973: PPUSH
6974: LD_EXP 47
6978: PPUSH
6979: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
6983: LD_ADDR_VAR 0 1
6987: PUSH
6988: LD_EXP 47
6992: PUSH
6993: LD_EXP 48
6997: PUSH
6998: LD_EXP 49
7002: PUSH
7003: LD_EXP 50
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: PUSH
7014: FOR_IN
7015: IFFALSE 7033
// ComTurnUnit ( i , JMM ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: LD_EXP 37
7026: PPUSH
7027: CALL_OW 119
7031: GO 7014
7033: POP
7034: POP
// Wait ( 0 0$0.3 ) ;
7035: LD_INT 10
7037: PPUSH
7038: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7042: LD_EXP 37
7046: PPUSH
7047: LD_STRING D2-JMM-1
7049: PPUSH
7050: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7054: LD_EXP 47
7058: PPUSH
7059: LD_STRING D2-Sol1-1
7061: PPUSH
7062: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7066: LD_EXP 37
7070: PPUSH
7071: LD_STRING D2-JMM-2
7073: PPUSH
7074: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7078: LD_EXP 47
7082: PPUSH
7083: LD_STRING D2-Sol1-2
7085: PPUSH
7086: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7090: LD_EXP 37
7094: PPUSH
7095: LD_STRING D2-JMM-3
7097: PPUSH
7098: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7102: LD_EXP 47
7106: PPUSH
7107: LD_STRING D2-Sol1-3
7109: PPUSH
7110: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7114: LD_ADDR_VAR 0 1
7118: PUSH
7119: LD_INT 22
7121: PUSH
7122: LD_INT 8
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PPUSH
7129: CALL_OW 69
7133: PUSH
7134: FOR_IN
7135: IFFALSE 7151
// SetSide ( i , 1 ) ;
7137: LD_VAR 0 1
7141: PPUSH
7142: LD_INT 1
7144: PPUSH
7145: CALL_OW 235
7149: GO 7134
7151: POP
7152: POP
// Say ( JMM , D2-JMM-4 ) ;
7153: LD_EXP 37
7157: PPUSH
7158: LD_STRING D2-JMM-4
7160: PPUSH
7161: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7165: LD_INT 1
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 332
// for i = 1 to points do
7175: LD_ADDR_VAR 0 1
7179: PUSH
7180: DOUBLE
7181: LD_INT 1
7183: DEC
7184: ST_TO_ADDR
7185: LD_VAR 0 2
7189: PUSH
7190: FOR_TO
7191: IFFALSE 7366
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7193: LD_VAR 0 2
7197: PUSH
7198: LD_VAR 0 1
7202: ARRAY
7203: PUSH
7204: LD_INT 1
7206: ARRAY
7207: PPUSH
7208: LD_VAR 0 2
7212: PUSH
7213: LD_VAR 0 1
7217: ARRAY
7218: PUSH
7219: LD_INT 2
7221: ARRAY
7222: PPUSH
7223: CALL_OW 84
// if i = 1 then
7227: LD_VAR 0 1
7231: PUSH
7232: LD_INT 1
7234: EQUAL
7235: IFFALSE 7249
// Say ( Lynch , D2-Sol1-4 ) ;
7237: LD_EXP 47
7241: PPUSH
7242: LD_STRING D2-Sol1-4
7244: PPUSH
7245: CALL_OW 88
// if i = 2 then
7249: LD_VAR 0 1
7253: PUSH
7254: LD_INT 2
7256: EQUAL
7257: IFFALSE 7271
// Say ( JMM , D2-JMM-5 ) ;
7259: LD_EXP 37
7263: PPUSH
7264: LD_STRING D2-JMM-5
7266: PPUSH
7267: CALL_OW 88
// if i = 4 then
7271: LD_VAR 0 1
7275: PUSH
7276: LD_INT 4
7278: EQUAL
7279: IFFALSE 7303
// begin RevealFogArea ( 1 , troopsArea ) ;
7281: LD_INT 1
7283: PPUSH
7284: LD_INT 6
7286: PPUSH
7287: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7291: LD_EXP 47
7295: PPUSH
7296: LD_STRING D2-Sol1-5
7298: PPUSH
7299: CALL_OW 88
// end ; if i = 5 then
7303: LD_VAR 0 1
7307: PUSH
7308: LD_INT 5
7310: EQUAL
7311: IFFALSE 7325
// Say ( JMM , D2-JMM-6 ) ;
7313: LD_EXP 37
7317: PPUSH
7318: LD_STRING D2-JMM-6
7320: PPUSH
7321: CALL_OW 88
// if i = 7 then
7325: LD_VAR 0 1
7329: PUSH
7330: LD_INT 7
7332: EQUAL
7333: IFFALSE 7357
// begin RevealFogArea ( 1 , forestArea ) ;
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 7
7340: PPUSH
7341: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7345: LD_EXP 47
7349: PPUSH
7350: LD_STRING D2-Sol1-6
7352: PPUSH
7353: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7357: LD_INT 46
7359: PPUSH
7360: CALL_OW 67
// end ;
7364: GO 7190
7366: POP
7367: POP
// CenterNowOnUnits ( JMM ) ;
7368: LD_EXP 37
7372: PPUSH
7373: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7377: LD_EXP 37
7381: PPUSH
7382: LD_STRING D2-JMM-7
7384: PPUSH
7385: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7389: LD_EXP 47
7393: PPUSH
7394: LD_STRING D2-Sol1-7
7396: PPUSH
7397: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7401: LD_EXP 37
7405: PPUSH
7406: LD_STRING D2-JMM-8
7408: PPUSH
7409: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7413: LD_ADDR_VAR 0 4
7417: PUSH
7418: LD_INT 22
7420: PUSH
7421: LD_INT 1
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 30
7430: PUSH
7431: LD_INT 31
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PPUSH
7442: CALL_OW 69
7446: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7447: LD_EXP 47
7451: PPUSH
7452: LD_VAR 0 4
7456: PUSH
7457: LD_INT 1
7459: ARRAY
7460: PPUSH
7461: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7465: LD_INT 65
7467: PPUSH
7468: LD_INT 101
7470: PPUSH
7471: CALL_OW 428
7475: IFFALSE 7498
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7477: LD_INT 65
7479: PPUSH
7480: LD_INT 101
7482: PPUSH
7483: CALL_OW 428
7487: PPUSH
7488: LD_INT 75
7490: PPUSH
7491: LD_INT 100
7493: PPUSH
7494: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7498: LD_INT 66
7500: PPUSH
7501: LD_INT 103
7503: PPUSH
7504: CALL_OW 428
7508: IFFALSE 7531
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7510: LD_INT 66
7512: PPUSH
7513: LD_INT 103
7515: PPUSH
7516: CALL_OW 428
7520: PPUSH
7521: LD_INT 75
7523: PPUSH
7524: LD_INT 100
7526: PPUSH
7527: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7531: LD_ADDR_VAR 0 5
7535: PUSH
7536: LD_INT 22
7538: PUSH
7539: LD_INT 1
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 21
7548: PUSH
7549: LD_INT 2
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 91
7558: PUSH
7559: LD_EXP 37
7563: PUSH
7564: LD_INT 7
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: LIST
7576: PPUSH
7577: CALL_OW 69
7581: ST_TO_ADDR
// if tmp then
7582: LD_VAR 0 5
7586: IFFALSE 7603
// ComMoveXY ( tmp , 75 , 100 ) ;
7588: LD_VAR 0 5
7592: PPUSH
7593: LD_INT 75
7595: PPUSH
7596: LD_INT 100
7598: PPUSH
7599: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
7603: LD_ADDR_VAR 0 3
7607: PUSH
7608: LD_EXP 4
7612: PPUSH
7613: LD_INT 25
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 72
7627: PPUSH
7628: LD_EXP 37
7632: PPUSH
7633: CALL_OW 74
7637: ST_TO_ADDR
// if sol then
7638: LD_VAR 0 3
7642: IFFALSE 7702
// if GetDistUnits ( JMM , sol ) < 10 then
7644: LD_EXP 37
7648: PPUSH
7649: LD_VAR 0 3
7653: PPUSH
7654: CALL_OW 296
7658: PUSH
7659: LD_INT 10
7661: LESS
7662: IFFALSE 7702
// begin if IsInUnit ( sol ) then
7664: LD_VAR 0 3
7668: PPUSH
7669: CALL_OW 310
7673: IFFALSE 7684
// ComExitVehicle ( sol ) ;
7675: LD_VAR 0 3
7679: PPUSH
7680: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
7684: LD_VAR 0 3
7688: PPUSH
7689: LD_VAR 0 4
7693: PUSH
7694: LD_INT 2
7696: ARRAY
7697: PPUSH
7698: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
7702: LD_INT 10
7704: PPUSH
7705: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
7709: LD_EXP 37
7713: PPUSH
7714: LD_INT 65
7716: PPUSH
7717: LD_INT 101
7719: PPUSH
7720: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
7724: LD_EXP 37
7728: PPUSH
7729: LD_INT 63
7731: PPUSH
7732: LD_INT 100
7734: PPUSH
7735: CALL_OW 178
// tmp := 0 0$0 ;
7739: LD_ADDR_VAR 0 5
7743: PUSH
7744: LD_INT 0
7746: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7747: LD_INT 35
7749: PPUSH
7750: CALL_OW 67
// tmp := tmp + 0 0$1 ;
7754: LD_ADDR_VAR 0 5
7758: PUSH
7759: LD_VAR 0 5
7763: PUSH
7764: LD_INT 35
7766: PLUS
7767: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
7768: LD_EXP 37
7772: PPUSH
7773: LD_INT 65
7775: PPUSH
7776: LD_INT 101
7778: PPUSH
7779: CALL_OW 307
7783: PUSH
7784: LD_VAR 0 5
7788: PUSH
7789: LD_INT 175
7791: GREATER
7792: OR
7793: IFFALSE 7747
// Say ( JMM , D2a-JMM-1 ) ;
7795: LD_EXP 37
7799: PPUSH
7800: LD_STRING D2a-JMM-1
7802: PPUSH
7803: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
7807: LD_EXP 48
7811: PPUSH
7812: LD_INT 66
7814: PPUSH
7815: LD_INT 103
7817: PPUSH
7818: CALL_OW 111
// tmp := 0 0$0 ;
7822: LD_ADDR_VAR 0 5
7826: PUSH
7827: LD_INT 0
7829: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7830: LD_INT 35
7832: PPUSH
7833: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
7837: LD_EXP 48
7841: PPUSH
7842: LD_INT 66
7844: PPUSH
7845: LD_INT 103
7847: PPUSH
7848: CALL_OW 307
7852: PUSH
7853: LD_VAR 0 5
7857: PUSH
7858: LD_INT 175
7860: GREATER
7861: OR
7862: IFFALSE 7830
// ComTurnUnit ( Walker , JMM ) ;
7864: LD_EXP 48
7868: PPUSH
7869: LD_EXP 37
7873: PPUSH
7874: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
7878: LD_EXP 48
7882: PPUSH
7883: LD_STRING D2a-Sci1-1
7885: PPUSH
7886: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
7890: LD_EXP 37
7894: PPUSH
7895: LD_EXP 48
7899: PPUSH
7900: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
7904: LD_EXP 37
7908: PPUSH
7909: LD_STRING D2a-JMM-2
7911: PPUSH
7912: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
7916: LD_EXP 48
7920: PPUSH
7921: LD_STRING D2a-Sci1-2
7923: PPUSH
7924: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
7928: LD_EXP 37
7932: PPUSH
7933: LD_STRING D2a-JMM-3
7935: PPUSH
7936: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
7940: LD_EXP 48
7944: PPUSH
7945: LD_STRING D2a-Sci1-3
7947: PPUSH
7948: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
7952: LD_ADDR_EXP 4
7956: PUSH
7957: LD_EXP 4
7961: PUSH
7962: LD_EXP 47
7966: PUSH
7967: LD_EXP 48
7971: PUSH
7972: LD_EXP 49
7976: PUSH
7977: LD_EXP 50
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: ADD
7988: ST_TO_ADDR
// for i in jmm_units do
7989: LD_ADDR_VAR 0 1
7993: PUSH
7994: LD_EXP 4
7998: PUSH
7999: FOR_IN
8000: IFFALSE 8025
// if not IsInUnit ( i ) then
8002: LD_VAR 0 1
8006: PPUSH
8007: CALL_OW 310
8011: NOT
8012: IFFALSE 8023
// ComFree ( i ) ;
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 139
8023: GO 7999
8025: POP
8026: POP
// Video ( false ) ;
8027: LD_INT 0
8029: PPUSH
8030: CALL 74404 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8034: LD_STRING MSolar1
8036: PPUSH
8037: CALL_OW 337
// jmm_on_west := true ;
8041: LD_ADDR_EXP 5
8045: PUSH
8046: LD_INT 1
8048: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8049: LD_INT 1050
8051: PPUSH
8052: CALL_OW 67
// frank_can_return := true ;
8056: LD_ADDR_EXP 12
8060: PUSH
8061: LD_INT 1
8063: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8064: LD_INT 6300
8066: PPUSH
8067: LD_INT 8400
8069: PPUSH
8070: CALL_OW 12
8074: PPUSH
8075: CALL_OW 67
// send_spec_patrol := true ;
8079: LD_ADDR_EXP 30
8083: PUSH
8084: LD_INT 1
8086: ST_TO_ADDR
// end ;
8087: PPOPN 5
8089: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8090: LD_INT 22
8092: PUSH
8093: LD_INT 1
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: LD_INT 34
8102: PUSH
8103: LD_INT 51
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PUSH
8110: LD_INT 92
8112: PUSH
8113: LD_INT 63
8115: PUSH
8116: LD_INT 100
8118: PUSH
8119: LD_INT 5
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: PPUSH
8136: CALL_OW 69
8140: PUSH
8141: LD_EXP 5
8145: NOT
8146: AND
8147: IFFALSE 8260
8149: GO 8151
8151: DISABLE
8152: LD_INT 0
8154: PPUSH
8155: PPUSH
// begin enable ;
8156: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8157: LD_ADDR_VAR 0 2
8161: PUSH
8162: LD_INT 22
8164: PUSH
8165: LD_INT 1
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: PUSH
8172: LD_INT 34
8174: PUSH
8175: LD_INT 51
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: LD_INT 92
8184: PUSH
8185: LD_INT 63
8187: PUSH
8188: LD_INT 100
8190: PUSH
8191: LD_INT 5
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: LIST
8204: PUSH
8205: EMPTY
8206: LIST
8207: PPUSH
8208: CALL_OW 69
8212: ST_TO_ADDR
// if not filter then
8213: LD_VAR 0 2
8217: NOT
8218: IFFALSE 8222
// exit ;
8220: GO 8260
// for i in filter do
8222: LD_ADDR_VAR 0 1
8226: PUSH
8227: LD_VAR 0 2
8231: PUSH
8232: FOR_IN
8233: IFFALSE 8258
// begin SetFuel ( i , 0 ) ;
8235: LD_VAR 0 1
8239: PPUSH
8240: LD_INT 0
8242: PPUSH
8243: CALL_OW 240
// ComStop ( i ) ;
8247: LD_VAR 0 1
8251: PPUSH
8252: CALL_OW 141
// end ;
8256: GO 8232
8258: POP
8259: POP
// end ;
8260: PPOPN 2
8262: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8263: LD_EXP 30
8267: IFFALSE 9393
8269: GO 8271
8271: DISABLE
8272: LD_INT 0
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
// begin if not ru_spec_patrol then
8281: LD_EXP 54
8285: NOT
8286: IFFALSE 8290
// exit ;
8288: GO 9393
// dead1 := false ;
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_INT 0
8297: ST_TO_ADDR
// dead2 := false ;
8298: LD_ADDR_VAR 0 2
8302: PUSH
8303: LD_INT 0
8305: ST_TO_ADDR
// inarea1 := false ;
8306: LD_ADDR_VAR 0 3
8310: PUSH
8311: LD_INT 0
8313: ST_TO_ADDR
// inarea2 := false ;
8314: LD_ADDR_VAR 0 4
8318: PUSH
8319: LD_INT 0
8321: ST_TO_ADDR
// tmp := [ ] ;
8322: LD_ADDR_VAR 0 6
8326: PUSH
8327: EMPTY
8328: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8329: LD_EXP 54
8333: PPUSH
8334: LD_INT 75
8336: PPUSH
8337: LD_INT 101
8339: PPUSH
8340: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8344: LD_INT 35
8346: PPUSH
8347: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8351: LD_INT 1
8353: PPUSH
8354: LD_EXP 54
8358: PUSH
8359: LD_INT 1
8361: ARRAY
8362: PPUSH
8363: CALL_OW 292
8367: PUSH
8368: LD_EXP 54
8372: PPUSH
8373: LD_INT 92
8375: PUSH
8376: LD_INT 75
8378: PUSH
8379: LD_INT 101
8381: PUSH
8382: LD_INT 4
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: PPUSH
8391: CALL_OW 72
8395: OR
8396: IFFALSE 8344
// ComStop ( ru_spec_patrol ) ;
8398: LD_EXP 54
8402: PPUSH
8403: CALL_OW 141
// Wait ( 0 0$02 ) ;
8407: LD_INT 70
8409: PPUSH
8410: CALL_OW 67
// DialogueOn ;
8414: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8418: LD_EXP 54
8422: PUSH
8423: LD_INT 1
8425: ARRAY
8426: PPUSH
8427: LD_STRING D8-Rus1-1
8429: PPUSH
8430: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8434: LD_EXP 37
8438: PPUSH
8439: LD_STRING D8-JMM-1
8441: PPUSH
8442: CALL_OW 88
// DialogueOff ;
8446: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8450: LD_EXP 54
8454: PPUSH
8455: LD_INT 13
8457: PPUSH
8458: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8462: LD_INT 35
8464: PPUSH
8465: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8469: LD_VAR 0 1
8473: NOT
8474: PUSH
8475: LD_EXP 54
8479: PUSH
8480: LD_INT 1
8482: ARRAY
8483: PPUSH
8484: CALL_OW 301
8488: AND
8489: IFFALSE 8499
// dead1 := true ;
8491: LD_ADDR_VAR 0 1
8495: PUSH
8496: LD_INT 1
8498: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8499: LD_VAR 0 2
8503: NOT
8504: PUSH
8505: LD_EXP 54
8509: PUSH
8510: LD_INT 2
8512: ARRAY
8513: PPUSH
8514: CALL_OW 301
8518: AND
8519: IFFALSE 8529
// dead2 := true ;
8521: LD_ADDR_VAR 0 2
8525: PUSH
8526: LD_INT 1
8528: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8529: LD_VAR 0 3
8533: NOT
8534: PUSH
8535: LD_EXP 54
8539: PUSH
8540: LD_INT 1
8542: ARRAY
8543: PPUSH
8544: LD_INT 14
8546: PPUSH
8547: CALL_OW 308
8551: AND
8552: IFFALSE 8562
// inarea1 := true ;
8554: LD_ADDR_VAR 0 3
8558: PUSH
8559: LD_INT 1
8561: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
8562: LD_VAR 0 4
8566: NOT
8567: PUSH
8568: LD_EXP 54
8572: PUSH
8573: LD_INT 2
8575: ARRAY
8576: PPUSH
8577: LD_INT 14
8579: PPUSH
8580: CALL_OW 308
8584: AND
8585: IFFALSE 8595
// inarea2 := true ;
8587: LD_ADDR_VAR 0 4
8591: PUSH
8592: LD_INT 1
8594: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
8595: LD_VAR 0 1
8599: PUSH
8600: LD_VAR 0 2
8604: AND
8605: PUSH
8606: LD_VAR 0 1
8610: PUSH
8611: LD_VAR 0 4
8615: AND
8616: OR
8617: PUSH
8618: LD_VAR 0 2
8622: PUSH
8623: LD_VAR 0 3
8627: AND
8628: OR
8629: PUSH
8630: LD_VAR 0 3
8634: PUSH
8635: LD_VAR 0 4
8639: AND
8640: OR
8641: IFFALSE 8462
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
8643: LD_VAR 0 3
8647: PUSH
8648: LD_VAR 0 4
8652: AND
8653: PUSH
8654: LD_VAR 0 1
8658: PUSH
8659: LD_VAR 0 4
8663: AND
8664: OR
8665: PUSH
8666: LD_VAR 0 2
8670: PUSH
8671: LD_VAR 0 3
8675: AND
8676: OR
8677: IFFALSE 9373
// begin prepare_siege := true ;
8679: LD_ADDR_EXP 31
8683: PUSH
8684: LD_INT 1
8686: ST_TO_ADDR
// DialogueOn ;
8687: CALL_OW 6
// if ( inarea1 and inarea2 ) then
8691: LD_VAR 0 3
8695: PUSH
8696: LD_VAR 0 4
8700: AND
8701: IFFALSE 8717
// Say ( JMM , D8b-JMM-1a ) else
8703: LD_EXP 37
8707: PPUSH
8708: LD_STRING D8b-JMM-1a
8710: PPUSH
8711: CALL_OW 88
8715: GO 8729
// Say ( JMM , D8b-JMM-1 ) ;
8717: LD_EXP 37
8721: PPUSH
8722: LD_STRING D8b-JMM-1
8724: PPUSH
8725: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
8729: LD_EXP 4
8733: PPUSH
8734: LD_INT 26
8736: PUSH
8737: LD_INT 1
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PPUSH
8744: CALL_OW 72
8748: PUSH
8749: LD_EXP 38
8753: PUSH
8754: LD_EXP 39
8758: PUSH
8759: LD_EXP 48
8763: PUSH
8764: LD_EXP 51
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: DIFF
8775: PPUSH
8776: LD_STRING D8b-Sol1-1
8778: PPUSH
8779: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
8783: LD_EXP 39
8787: PUSH
8788: LD_EXP 39
8792: PUSH
8793: LD_EXP 4
8797: IN
8798: AND
8799: IFFALSE 8815
// Say ( Cyrus , D8b-Cyrus-1 ) else
8801: LD_EXP 39
8805: PPUSH
8806: LD_STRING D8b-Cyrus-1
8808: PPUSH
8809: CALL_OW 88
8813: GO 8827
// Say ( JMM , D8b-JMM-1a ) ;
8815: LD_EXP 37
8819: PPUSH
8820: LD_STRING D8b-JMM-1a
8822: PPUSH
8823: CALL_OW 88
// if Lisa and Lisa in jmm_units then
8827: LD_EXP 40
8831: PUSH
8832: LD_EXP 40
8836: PUSH
8837: LD_EXP 4
8841: IN
8842: AND
8843: IFFALSE 8857
// Say ( Lisa , D8b-Lisa-2 ) ;
8845: LD_EXP 40
8849: PPUSH
8850: LD_STRING D8b-Lisa-2
8852: PPUSH
8853: CALL_OW 88
// if Bobby and Bobby in jmm_units then
8857: LD_EXP 38
8861: PUSH
8862: LD_EXP 38
8866: PUSH
8867: LD_EXP 4
8871: IN
8872: AND
8873: IFFALSE 8889
// Say ( Bobby , D8b-Bobby-1 ) else
8875: LD_EXP 38
8879: PPUSH
8880: LD_STRING D8b-Bobby-1
8882: PPUSH
8883: CALL_OW 88
8887: GO 8949
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
8889: LD_ADDR_VAR 0 5
8893: PUSH
8894: LD_EXP 4
8898: PPUSH
8899: LD_INT 26
8901: PUSH
8902: LD_INT 1
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PPUSH
8909: CALL_OW 72
8913: PUSH
8914: LD_EXP 38
8918: PUSH
8919: LD_EXP 39
8923: PUSH
8924: LD_EXP 48
8928: PUSH
8929: LD_EXP 51
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: DIFF
8940: PPUSH
8941: LD_STRING D8b-Sol2-1
8943: PPUSH
8944: CALL 585 0 2
8948: ST_TO_ADDR
// DialogueOff ;
8949: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
8953: LD_EXP 39
8957: PUSH
8958: LD_EXP 39
8962: PUSH
8963: LD_EXP 4
8967: IN
8968: AND
8969: IFFALSE 8994
// tmp := Insert ( tmp , 1 , Cyrus ) ;
8971: LD_ADDR_VAR 0 6
8975: PUSH
8976: LD_VAR 0 6
8980: PPUSH
8981: LD_INT 1
8983: PPUSH
8984: LD_EXP 39
8988: PPUSH
8989: CALL_OW 2
8993: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
8994: LD_EXP 38
8998: PUSH
8999: LD_EXP 38
9003: PUSH
9004: LD_EXP 4
9008: IN
9009: AND
9010: IFFALSE 9035
// tmp := Insert ( tmp , 1 , Bobby ) ;
9012: LD_ADDR_VAR 0 6
9016: PUSH
9017: LD_VAR 0 6
9021: PPUSH
9022: LD_INT 1
9024: PPUSH
9025: LD_EXP 38
9029: PPUSH
9030: CALL_OW 2
9034: ST_TO_ADDR
// if sol then
9035: LD_VAR 0 5
9039: IFFALSE 9064
// tmp := Insert ( tmp , 1 , sol ) ;
9041: LD_ADDR_VAR 0 6
9045: PUSH
9046: LD_VAR 0 6
9050: PPUSH
9051: LD_INT 1
9053: PPUSH
9054: LD_VAR 0 5
9058: PPUSH
9059: CALL_OW 2
9063: ST_TO_ADDR
// if tmp then
9064: LD_VAR 0 6
9068: IFFALSE 9332
// begin SetSide ( tmp , 8 ) ;
9070: LD_VAR 0 6
9074: PPUSH
9075: LD_INT 8
9077: PPUSH
9078: CALL_OW 235
// for i in tmp do
9082: LD_ADDR_VAR 0 7
9086: PUSH
9087: LD_VAR 0 6
9091: PUSH
9092: FOR_IN
9093: IFFALSE 9184
// begin if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_building then
9095: LD_VAR 0 7
9099: PPUSH
9100: CALL_OW 310
9104: PUSH
9105: LD_VAR 0 7
9109: PPUSH
9110: CALL_OW 310
9114: PPUSH
9115: CALL_OW 266
9119: PUSH
9120: LD_INT 3
9122: EQUAL
9123: AND
9124: IFFALSE 9135
// ComExitBuilding ( i ) ;
9126: LD_VAR 0 7
9130: PPUSH
9131: CALL_OW 122
// if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_vehicle then
9135: LD_VAR 0 7
9139: PPUSH
9140: CALL_OW 310
9144: PUSH
9145: LD_VAR 0 7
9149: PPUSH
9150: CALL_OW 310
9154: PPUSH
9155: CALL_OW 266
9159: PUSH
9160: LD_INT 2
9162: EQUAL
9163: AND
9164: IFFALSE 9175
// ComExitVehicle ( i ) ;
9166: LD_VAR 0 7
9170: PPUSH
9171: CALL_OW 121
// wait ( 0 0$1 ) ;
9175: LD_INT 35
9177: PPUSH
9178: CALL_OW 67
// end ;
9182: GO 9092
9184: POP
9185: POP
// ComFree ( tmp ) ;
9186: LD_VAR 0 6
9190: PPUSH
9191: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9195: LD_VAR 0 6
9199: PPUSH
9200: LD_INT 15
9202: PPUSH
9203: CALL_OW 173
// AddComHold ( tmp ) ;
9207: LD_VAR 0 6
9211: PPUSH
9212: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9216: LD_INT 35
9218: PPUSH
9219: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9223: LD_VAR 0 6
9227: PUSH
9228: LD_INT 1
9230: ARRAY
9231: PPUSH
9232: CALL_OW 314
9236: NOT
9237: IFFALSE 9251
// ComMoveToArea ( tmp , cyrusEscape ) ;
9239: LD_VAR 0 6
9243: PPUSH
9244: LD_INT 15
9246: PPUSH
9247: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9251: LD_VAR 0 6
9255: PUSH
9256: LD_INT 1
9258: ARRAY
9259: PPUSH
9260: LD_INT 15
9262: PPUSH
9263: CALL_OW 308
9267: IFFALSE 9322
// begin RemoveUnit ( tmp [ 1 ] ) ;
9269: LD_VAR 0 6
9273: PUSH
9274: LD_INT 1
9276: ARRAY
9277: PPUSH
9278: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9282: LD_ADDR_EXP 4
9286: PUSH
9287: LD_EXP 4
9291: PUSH
9292: LD_VAR 0 6
9296: PUSH
9297: LD_INT 1
9299: ARRAY
9300: DIFF
9301: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9302: LD_ADDR_VAR 0 6
9306: PUSH
9307: LD_VAR 0 6
9311: PUSH
9312: LD_VAR 0 6
9316: PUSH
9317: LD_INT 1
9319: ARRAY
9320: DIFF
9321: ST_TO_ADDR
// end ; until tmp = 0 ;
9322: LD_VAR 0 6
9326: PUSH
9327: LD_INT 0
9329: EQUAL
9330: IFFALSE 9216
// end ; wait ( 0 0$30 ) ;
9332: LD_INT 1050
9334: PPUSH
9335: CALL_OW 67
// if ru_spec_patrol then
9339: LD_EXP 54
9343: IFFALSE 9371
// for i in ru_spec_patrol do
9345: LD_ADDR_VAR 0 7
9349: PUSH
9350: LD_EXP 54
9354: PUSH
9355: FOR_IN
9356: IFFALSE 9369
// RemoveUnit ( i ) ;
9358: LD_VAR 0 7
9362: PPUSH
9363: CALL_OW 64
9367: GO 9355
9369: POP
9370: POP
// end else
9371: GO 9393
// begin prepare_siege := false ;
9373: LD_ADDR_EXP 31
9377: PUSH
9378: LD_INT 0
9380: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9381: LD_EXP 37
9385: PPUSH
9386: LD_STRING D8a-JMM-1
9388: PPUSH
9389: CALL_OW 88
// end ; end ;
9393: PPOPN 7
9395: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9396: LD_EXP 12
9400: IFFALSE 10620
9402: GO 9404
9404: DISABLE
9405: LD_INT 0
9407: PPUSH
9408: PPUSH
9409: PPUSH
// begin uc_side := 8 ;
9410: LD_ADDR_OWVAR 20
9414: PUSH
9415: LD_INT 8
9417: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9418: LD_ADDR_VAR 0 3
9422: PUSH
9423: LD_INT 59
9425: PUSH
9426: LD_INT 71
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 122
9435: PUSH
9436: LD_INT 117
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9447: LD_ADDR_EXP 51
9451: PUSH
9452: LD_STRING Frank
9454: PPUSH
9455: LD_INT 0
9457: PPUSH
9458: LD_STRING 
9460: PPUSH
9461: CALL 37751 0 3
9465: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9466: LD_ADDR_VAR 0 1
9470: PUSH
9471: LD_INT 1
9473: PPUSH
9474: LD_INT 2
9476: PPUSH
9477: CALL_OW 12
9481: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9482: LD_EXP 51
9486: PPUSH
9487: LD_VAR 0 3
9491: PUSH
9492: LD_VAR 0 1
9496: ARRAY
9497: PUSH
9498: LD_INT 1
9500: ARRAY
9501: PPUSH
9502: LD_VAR 0 3
9506: PUSH
9507: LD_VAR 0 1
9511: ARRAY
9512: PUSH
9513: LD_INT 2
9515: ARRAY
9516: PPUSH
9517: LD_INT 0
9519: PPUSH
9520: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9524: LD_EXP 51
9528: PPUSH
9529: LD_INT 1
9531: PPUSH
9532: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9536: LD_INT 35
9538: PPUSH
9539: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9543: LD_EXP 51
9547: PPUSH
9548: LD_EXP 37
9552: PPUSH
9553: CALL_OW 296
9557: PUSH
9558: LD_INT 8
9560: LESS
9561: PUSH
9562: LD_EXP 51
9566: PPUSH
9567: CALL_OW 256
9571: PUSH
9572: LD_INT 250
9574: GREATER
9575: AND
9576: IFFALSE 9536
// Video ( true ) ;
9578: LD_INT 1
9580: PPUSH
9581: CALL 74404 0 1
// CenterOnUnits ( JMM ) ;
9585: LD_EXP 37
9589: PPUSH
9590: CALL_OW 85
// if IsInUnit ( JMM ) then
9594: LD_EXP 37
9598: PPUSH
9599: CALL_OW 310
9603: IFFALSE 9614
// ComFree ( JMM ) ;
9605: LD_EXP 37
9609: PPUSH
9610: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
9614: LD_EXP 37
9618: PPUSH
9619: LD_EXP 51
9623: PPUSH
9624: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
9628: LD_EXP 51
9632: PPUSH
9633: LD_EXP 37
9637: PPUSH
9638: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
9642: LD_EXP 37
9646: PPUSH
9647: LD_STRING D6-JMM-1
9649: PPUSH
9650: CALL_OW 88
// p := 0 ;
9654: LD_ADDR_VAR 0 2
9658: PUSH
9659: LD_INT 0
9661: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9662: LD_INT 35
9664: PPUSH
9665: CALL_OW 67
// p := p + 1 ;
9669: LD_ADDR_VAR 0 2
9673: PUSH
9674: LD_VAR 0 2
9678: PUSH
9679: LD_INT 1
9681: PLUS
9682: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
9683: LD_EXP 37
9687: PPUSH
9688: LD_EXP 51
9692: PPUSH
9693: CALL_OW 296
9697: PUSH
9698: LD_INT 8
9700: LESS
9701: PUSH
9702: LD_VAR 0 2
9706: PUSH
9707: LD_INT 7
9709: GREATER
9710: OR
9711: IFFALSE 9662
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 then
9713: LD_EXP 40
9717: PUSH
9718: LD_EXP 40
9722: PPUSH
9723: LD_EXP 51
9727: PPUSH
9728: CALL_OW 296
9732: PUSH
9733: LD_INT 20
9735: LESS
9736: AND
9737: IFFALSE 9762
// begin ComFree ( Lisa ) ;
9739: LD_EXP 40
9743: PPUSH
9744: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
9748: LD_EXP 40
9752: PPUSH
9753: LD_EXP 51
9757: PPUSH
9758: CALL_OW 172
// end ; if Lynch then
9762: LD_EXP 47
9766: IFFALSE 9791
// begin ComFree ( Lynch ) ;
9768: LD_EXP 47
9772: PPUSH
9773: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
9777: LD_EXP 47
9781: PPUSH
9782: LD_EXP 51
9786: PPUSH
9787: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
9791: LD_EXP 37
9795: PPUSH
9796: LD_EXP 51
9800: PPUSH
9801: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
9805: LD_EXP 51
9809: PPUSH
9810: LD_EXP 37
9814: PPUSH
9815: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
9819: LD_EXP 51
9823: PPUSH
9824: LD_STRING D6-Frank-1
9826: PPUSH
9827: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
9831: LD_INT 69
9833: PPUSH
9834: LD_INT 20
9836: PPUSH
9837: LD_INT 1
9839: PPUSH
9840: LD_INT 20
9842: NEG
9843: PPUSH
9844: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
9848: LD_INT 69
9850: PPUSH
9851: LD_INT 20
9853: PPUSH
9854: LD_INT 1
9856: PPUSH
9857: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
9861: LD_INT 190
9863: PPUSH
9864: LD_INT 31
9866: PPUSH
9867: LD_INT 1
9869: PPUSH
9870: LD_INT 20
9872: NEG
9873: PPUSH
9874: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
9878: LD_INT 190
9880: PPUSH
9881: LD_INT 31
9883: PPUSH
9884: LD_INT 1
9886: PPUSH
9887: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
9891: LD_INT 69
9893: PPUSH
9894: LD_INT 20
9896: PPUSH
9897: CALL_OW 84
// Wait ( 0 0$02 ) ;
9901: LD_INT 70
9903: PPUSH
9904: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
9908: LD_EXP 37
9912: PPUSH
9913: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) then
9917: LD_EXP 40
9921: PUSH
9922: LD_EXP 40
9926: PPUSH
9927: LD_EXP 51
9931: PPUSH
9932: CALL_OW 296
9936: PUSH
9937: LD_INT 20
9939: LESS
9940: AND
9941: PUSH
9942: LD_EXP 40
9946: PPUSH
9947: CALL_OW 302
9951: AND
9952: IFFALSE 10074
// begin ComFree ( Lisa ) ;
9954: LD_EXP 40
9958: PPUSH
9959: CALL_OW 139
// p := 0 ;
9963: LD_ADDR_VAR 0 2
9967: PUSH
9968: LD_INT 0
9970: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9971: LD_INT 35
9973: PPUSH
9974: CALL_OW 67
// p := p + 1 ;
9978: LD_ADDR_VAR 0 2
9982: PUSH
9983: LD_VAR 0 2
9987: PUSH
9988: LD_INT 1
9990: PLUS
9991: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
9992: LD_EXP 40
9996: PPUSH
9997: LD_EXP 51
10001: PPUSH
10002: CALL_OW 296
10006: PUSH
10007: LD_INT 7
10009: LESS
10010: PUSH
10011: LD_VAR 0 2
10015: PUSH
10016: LD_INT 7
10018: GREATER
10019: OR
10020: IFFALSE 9971
// Say ( Lisa , D6-Lisa-1 ) ;
10022: LD_EXP 40
10026: PPUSH
10027: LD_STRING D6-Lisa-1
10029: PPUSH
10030: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10034: LD_EXP 40
10038: PPUSH
10039: LD_EXP 51
10043: PPUSH
10044: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10048: LD_EXP 51
10052: PPUSH
10053: LD_EXP 40
10057: PPUSH
10058: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10062: LD_EXP 51
10066: PPUSH
10067: LD_STRING D6-Frank-2
10069: PPUSH
10070: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10074: LD_EXP 47
10078: PUSH
10079: LD_EXP 47
10083: PPUSH
10084: LD_EXP 51
10088: PPUSH
10089: CALL_OW 296
10093: PUSH
10094: LD_INT 20
10096: LESS
10097: AND
10098: PUSH
10099: LD_EXP 47
10103: PPUSH
10104: CALL_OW 302
10108: AND
10109: IFFALSE 10290
// begin ComTurnUnit ( Lynch , JMM ) ;
10111: LD_EXP 47
10115: PPUSH
10116: LD_EXP 37
10120: PPUSH
10121: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10125: LD_EXP 51
10129: PPUSH
10130: LD_EXP 37
10134: PPUSH
10135: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10139: LD_EXP 47
10143: PPUSH
10144: LD_STRING D6-Sol1-2
10146: PPUSH
10147: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10151: LD_EXP 37
10155: PPUSH
10156: LD_STRING D6-JMM-2
10158: PPUSH
10159: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10163: LD_EXP 51
10167: PPUSH
10168: LD_STRING D6-Frank-3
10170: PPUSH
10171: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10175: LD_EXP 37
10179: PPUSH
10180: LD_STRING D6-JMM-3
10182: PPUSH
10183: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10187: LD_EXP 51
10191: PPUSH
10192: LD_STRING D6-Frank-4
10194: PPUSH
10195: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10199: LD_EXP 51
10203: PPUSH
10204: LD_STRING D6-Frank-4a
10206: PPUSH
10207: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10211: LD_EXP 37
10215: PPUSH
10216: LD_STRING D6-JMM-4
10218: PPUSH
10219: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10223: LD_EXP 51
10227: PPUSH
10228: LD_STRING D6-Frank-5
10230: PPUSH
10231: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10235: LD_EXP 40
10239: PUSH
10240: LD_EXP 40
10244: PPUSH
10245: CALL_OW 302
10249: AND
10250: IFFALSE 10264
// Say ( Lisa , D6-Lisa-5 ) ;
10252: LD_EXP 40
10256: PPUSH
10257: LD_STRING D6-Lisa-5
10259: PPUSH
10260: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10264: LD_EXP 51
10268: PPUSH
10269: LD_STRING D6-Frank-6
10271: PPUSH
10272: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10276: LD_EXP 37
10280: PPUSH
10281: LD_STRING D6-JMM-6
10283: PPUSH
10284: CALL_OW 88
// end else
10288: GO 10405
// begin ComTurnUnit ( Frank , JMM ) ;
10290: LD_EXP 51
10294: PPUSH
10295: LD_EXP 37
10299: PPUSH
10300: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10304: LD_EXP 51
10308: PPUSH
10309: LD_STRING D6-Frank-4
10311: PPUSH
10312: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10316: LD_EXP 51
10320: PPUSH
10321: LD_STRING D6-Frank-4a
10323: PPUSH
10324: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10328: LD_EXP 37
10332: PPUSH
10333: LD_STRING D6-JMM-4
10335: PPUSH
10336: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10340: LD_EXP 51
10344: PPUSH
10345: LD_STRING D6-Frank-5
10347: PPUSH
10348: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10352: LD_EXP 40
10356: PUSH
10357: LD_EXP 40
10361: PPUSH
10362: CALL_OW 302
10366: AND
10367: IFFALSE 10381
// Say ( Lisa , D6-Lisa-5 ) ;
10369: LD_EXP 40
10373: PPUSH
10374: LD_STRING D6-Lisa-5
10376: PPUSH
10377: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10381: LD_EXP 51
10385: PPUSH
10386: LD_STRING D6-Frank-6
10388: PPUSH
10389: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10393: LD_EXP 37
10397: PPUSH
10398: LD_STRING D6-JMM-6
10400: PPUSH
10401: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10405: LD_STRING Q1
10407: PPUSH
10408: CALL_OW 97
10412: PUSH
10413: LD_INT 1
10415: DOUBLE
10416: EQUAL
10417: IFTRUE 10421
10419: GO 10432
10421: POP
// frank_send_to_scout := true ; 2 :
10422: LD_ADDR_EXP 15
10426: PUSH
10427: LD_INT 1
10429: ST_TO_ADDR
10430: GO 10452
10432: LD_INT 2
10434: DOUBLE
10435: EQUAL
10436: IFTRUE 10440
10438: GO 10451
10440: POP
// frank_send_to_scout := false ; end ;
10441: LD_ADDR_EXP 15
10445: PUSH
10446: LD_INT 0
10448: ST_TO_ADDR
10449: GO 10452
10451: POP
// Video ( false ) ;
10452: LD_INT 0
10454: PPUSH
10455: CALL 74404 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10459: LD_EXP 37
10463: PUSH
10464: LD_EXP 40
10468: PUSH
10469: LD_EXP 47
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: LIST
10478: PPUSH
10479: CALL_OW 139
// if frank_send_to_scout then
10483: LD_EXP 15
10487: IFFALSE 10541
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10489: LD_EXP 51
10493: PPUSH
10494: LD_INT 15
10496: PPUSH
10497: CALL_OW 113
// wait ( 0 0$01 ) ;
10501: LD_INT 35
10503: PPUSH
10504: CALL_OW 67
// until not See ( 1 , Frank ) ;
10508: LD_INT 1
10510: PPUSH
10511: LD_EXP 51
10515: PPUSH
10516: CALL_OW 292
10520: NOT
10521: IFFALSE 10489
// wait ( 0 0$02 ) ;
10523: LD_INT 70
10525: PPUSH
10526: CALL_OW 67
// RemoveUnit ( Frank ) ;
10530: LD_EXP 51
10534: PPUSH
10535: CALL_OW 64
// end else
10539: GO 10553
// SetSide ( Frank , 1 ) ;
10541: LD_EXP 51
10545: PPUSH
10546: LD_INT 1
10548: PPUSH
10549: CALL_OW 235
// send_attack_on_cornel_base := true ;
10553: LD_ADDR_EXP 26
10557: PUSH
10558: LD_INT 1
10560: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10561: LD_INT 35
10563: PPUSH
10564: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
10568: LD_ADDR_EXP 29
10572: PUSH
10573: LD_EXP 29
10577: PPUSH
10578: LD_STRING -
10580: PPUSH
10581: CALL 1077 0 2
10585: ST_TO_ADDR
// if debug then
10586: LD_EXP 1
10590: IFFALSE 10602
// debug_strings := time_to_prepare ;
10592: LD_ADDR_OWVAR 48
10596: PUSH
10597: LD_EXP 29
10601: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
10602: LD_EXP 29
10606: PUSH
10607: LD_INT 0
10609: EQUAL
10610: IFFALSE 10561
// cornel_prepared := true ;
10612: LD_ADDR_EXP 11
10616: PUSH
10617: LD_INT 1
10619: ST_TO_ADDR
// end ;
10620: PPOPN 3
10622: END
// every 0 0$01 trigger cornel_prepared do
10623: LD_EXP 11
10627: IFFALSE 10935
10629: GO 10631
10631: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
10632: LD_EXP 44
10636: PPUSH
10637: LD_STRING D3-Corn-1
10639: PPUSH
10640: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
10644: LD_STRING MOutWait
10646: PPUSH
10647: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
10651: LD_INT 35
10653: PPUSH
10654: CALL_OW 67
// until cornel_counter = 0 ;
10658: LD_EXP 10
10662: PUSH
10663: LD_INT 0
10665: EQUAL
10666: IFFALSE 10651
// SayRadio ( Cornel , D3a-Corn-1 ) ;
10668: LD_EXP 44
10672: PPUSH
10673: LD_STRING D3a-Corn-1
10675: PPUSH
10676: CALL_OW 94
// if IsOk ( Cornel ) then
10680: LD_EXP 44
10684: PPUSH
10685: CALL_OW 302
10689: IFFALSE 10703
// Say ( JMM , D3a-JMM-1 ) ;
10691: LD_EXP 37
10695: PPUSH
10696: LD_STRING D3a-JMM-1
10698: PPUSH
10699: CALL_OW 88
// end_mission_allowed := true ;
10703: LD_ADDR_EXP 21
10707: PUSH
10708: LD_INT 1
10710: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
10711: LD_STRING M2
10713: PPUSH
10714: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
10718: LD_INT 9
10720: PPUSH
10721: LD_INT 1
10723: PPUSH
10724: CALL_OW 424
// Wait ( 0 0$05 ) ;
10728: LD_INT 175
10730: PPUSH
10731: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
10735: LD_EXP 44
10739: PPUSH
10740: LD_STRING D3a-Corn-2
10742: PPUSH
10743: CALL_OW 94
// cornel_attack := true ;
10747: LD_ADDR_EXP 9
10751: PUSH
10752: LD_INT 1
10754: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
10755: LD_INT 105
10757: PPUSH
10758: CALL_OW 67
// AddMoreTanks ( ) ;
10762: CALL 4940 0 0
// if frank_send_to_scout then
10766: LD_EXP 15
10770: IFFALSE 10935
// begin InitHc ;
10772: CALL_OW 19
// InitUc ;
10776: CALL_OW 18
// uc_side := 8 ;
10780: LD_ADDR_OWVAR 20
10784: PUSH
10785: LD_INT 8
10787: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
10788: LD_ADDR_EXP 51
10792: PUSH
10793: LD_STRING Frank
10795: PPUSH
10796: LD_INT 0
10798: PPUSH
10799: LD_STRING 
10801: PPUSH
10802: CALL 37751 0 3
10806: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
10807: LD_EXP 51
10811: PPUSH
10812: LD_INT 6
10814: PPUSH
10815: LD_INT 9
10817: PPUSH
10818: LD_INT 0
10820: PPUSH
10821: CALL_OW 48
// ComCrawl ( Frank ) ;
10825: LD_EXP 51
10829: PPUSH
10830: CALL_OW 137
// repeat wait ( 10 ) ;
10834: LD_INT 10
10836: PPUSH
10837: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
10841: LD_EXP 37
10845: PPUSH
10846: LD_EXP 51
10850: PPUSH
10851: CALL_OW 296
10855: PUSH
10856: LD_INT 9
10858: LESS
10859: PUSH
10860: LD_INT 9
10862: PPUSH
10863: LD_INT 22
10865: PUSH
10866: LD_INT 1
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PPUSH
10873: CALL_OW 70
10877: OR
10878: IFFALSE 10834
// if IsDead ( Frank ) then
10880: LD_EXP 51
10884: PPUSH
10885: CALL_OW 301
10889: IFFALSE 10893
// exit ;
10891: GO 10935
// CenterOnUnits ( Frank ) ;
10893: LD_EXP 51
10897: PPUSH
10898: CALL_OW 85
// SetSide ( Frank , 1 ) ;
10902: LD_EXP 51
10906: PPUSH
10907: LD_INT 1
10909: PPUSH
10910: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
10914: LD_EXP 51
10918: PPUSH
10919: LD_STRING D6a-Frank-1
10921: PPUSH
10922: CALL_OW 88
// ComWalk ( Frank ) ;
10926: LD_EXP 51
10930: PPUSH
10931: CALL_OW 138
// end ; end ;
10935: END
// every 0 0$01 trigger solar_builded do
10936: LD_EXP 14
10940: IFFALSE 11044
10942: GO 10944
10944: DISABLE
// begin Wait ( 0 0$02 ) ;
10945: LD_INT 70
10947: PPUSH
10948: CALL_OW 67
// DialogueOn ;
10952: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
10956: LD_EXP 37
10960: PPUSH
10961: LD_STRING D2b-JMM-1
10963: PPUSH
10964: CALL_OW 88
// if Walker and IsOk ( Walker ) then
10968: LD_EXP 48
10972: PUSH
10973: LD_EXP 48
10977: PPUSH
10978: CALL_OW 302
10982: AND
10983: IFFALSE 11033
// begin Say ( Walker , D2b-Sci1-1 ) ;
10985: LD_EXP 48
10989: PPUSH
10990: LD_STRING D2b-Sci1-1
10992: PPUSH
10993: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
10997: LD_EXP 37
11001: PPUSH
11002: LD_STRING D2b-JMM-2
11004: PPUSH
11005: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11009: LD_EXP 48
11013: PPUSH
11014: LD_STRING D2b-Sci1-2
11016: PPUSH
11017: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11021: LD_EXP 37
11025: PPUSH
11026: LD_STRING D2b-JMM-3
11028: PPUSH
11029: CALL_OW 88
// end ; DialogueOff ;
11033: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11037: LD_STRING MOutSol
11039: PPUSH
11040: CALL_OW 337
// end ;
11044: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11045: LD_EXP 14
11049: PUSH
11050: LD_EXP 37
11054: PPUSH
11055: CALL_OW 302
11059: AND
11060: PUSH
11061: LD_EXP 37
11065: PPUSH
11066: CALL 911 0 1
11070: AND
11071: PUSH
11072: LD_EXP 16
11076: NOT
11077: AND
11078: IFFALSE 11149
11080: GO 11082
11082: DISABLE
11083: LD_INT 0
11085: PPUSH
// begin jmm_in_veh := true ;
11086: LD_ADDR_EXP 16
11090: PUSH
11091: LD_INT 1
11093: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11094: LD_ADDR_VAR 0 1
11098: PUSH
11099: LD_INT 0
11101: PPUSH
11102: LD_INT 1
11104: PPUSH
11105: CALL_OW 12
11109: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11110: LD_INT 70
11112: PPUSH
11113: CALL_OW 67
// if i then
11117: LD_VAR 0 1
11121: IFFALSE 11137
// Say ( JMM , D2c-JMM-1 ) else
11123: LD_EXP 37
11127: PPUSH
11128: LD_STRING D2c-JMM-1
11130: PPUSH
11131: CALL_OW 88
11135: GO 11149
// Say ( JMM , D2c-JMM-1a ) ;
11137: LD_EXP 37
11141: PPUSH
11142: LD_STRING D2c-JMM-1a
11144: PPUSH
11145: CALL_OW 88
// end ;
11149: PPOPN 1
11151: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11152: LD_EXP 14
11156: PUSH
11157: LD_EXP 38
11161: PPUSH
11162: CALL_OW 302
11166: AND
11167: PUSH
11168: LD_EXP 38
11172: PPUSH
11173: CALL 911 0 1
11177: AND
11178: PUSH
11179: LD_EXP 17
11183: NOT
11184: AND
11185: IFFALSE 11217
11187: GO 11189
11189: DISABLE
// begin bobby_in_veh := true ;
11190: LD_ADDR_EXP 17
11194: PUSH
11195: LD_INT 1
11197: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11198: LD_INT 70
11200: PPUSH
11201: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11205: LD_EXP 38
11209: PPUSH
11210: LD_STRING D2c-Bobby-1
11212: PPUSH
11213: CALL_OW 88
11217: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11218: LD_EXP 14
11222: PUSH
11223: LD_EXP 40
11227: PPUSH
11228: CALL_OW 302
11232: AND
11233: PUSH
11234: LD_EXP 40
11238: PPUSH
11239: CALL 911 0 1
11243: AND
11244: PUSH
11245: LD_EXP 19
11249: NOT
11250: AND
11251: IFFALSE 11283
11253: GO 11255
11255: DISABLE
// begin lisa_in_veh := true ;
11256: LD_ADDR_EXP 19
11260: PUSH
11261: LD_INT 1
11263: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11264: LD_INT 70
11266: PPUSH
11267: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11271: LD_EXP 40
11275: PPUSH
11276: LD_STRING D2c-Lisa-1
11278: PPUSH
11279: CALL_OW 88
11283: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11284: LD_EXP 14
11288: PUSH
11289: LD_EXP 39
11293: PPUSH
11294: CALL_OW 302
11298: AND
11299: PUSH
11300: LD_EXP 39
11304: PPUSH
11305: CALL 911 0 1
11309: AND
11310: PUSH
11311: LD_EXP 18
11315: NOT
11316: AND
11317: IFFALSE 11388
11319: GO 11321
11321: DISABLE
11322: LD_INT 0
11324: PPUSH
// begin cyrus_in_veh := true ;
11325: LD_ADDR_EXP 18
11329: PUSH
11330: LD_INT 1
11332: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11333: LD_ADDR_VAR 0 1
11337: PUSH
11338: LD_INT 0
11340: PPUSH
11341: LD_INT 1
11343: PPUSH
11344: CALL_OW 12
11348: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11349: LD_INT 70
11351: PPUSH
11352: CALL_OW 67
// if i then
11356: LD_VAR 0 1
11360: IFFALSE 11376
// Say ( Cyrus , D2c-Cyrus-1 ) else
11362: LD_EXP 39
11366: PPUSH
11367: LD_STRING D2c-Cyrus-1
11369: PPUSH
11370: CALL_OW 88
11374: GO 11388
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11376: LD_EXP 39
11380: PPUSH
11381: LD_STRING D2c-Cyrus-1a
11383: PPUSH
11384: CALL_OW 88
// end ;
11388: PPOPN 1
11390: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11391: LD_EXP 44
11395: PPUSH
11396: LD_INT 16
11398: PPUSH
11399: CALL_OW 308
11403: IFFALSE 11684
11405: GO 11407
11407: DISABLE
11408: LD_INT 0
11410: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11411: LD_INT 3
11413: PPUSH
11414: LD_EXP 44
11418: PPUSH
11419: CALL_OW 471
// send_attack_on_cornel := true ;
11423: LD_ADDR_EXP 32
11427: PUSH
11428: LD_INT 1
11430: ST_TO_ADDR
// if ru_vehicles then
11431: LD_EXP 56
11435: IFFALSE 11469
// for i in ru_vehicles do
11437: LD_ADDR_VAR 0 1
11441: PUSH
11442: LD_EXP 56
11446: PUSH
11447: FOR_IN
11448: IFFALSE 11467
// ComAgressiveMove ( i , 215 , 69 ) ;
11450: LD_VAR 0 1
11454: PPUSH
11455: LD_INT 215
11457: PPUSH
11458: LD_INT 69
11460: PPUSH
11461: CALL_OW 114
11465: GO 11447
11467: POP
11468: POP
// if ru_patrol then
11469: LD_EXP 53
11473: IFFALSE 11507
// for i in ru_patrol do
11475: LD_ADDR_VAR 0 1
11479: PUSH
11480: LD_EXP 53
11484: PUSH
11485: FOR_IN
11486: IFFALSE 11505
// ComAgressiveMove ( i , 215 , 69 ) ;
11488: LD_VAR 0 1
11492: PPUSH
11493: LD_INT 215
11495: PPUSH
11496: LD_INT 69
11498: PPUSH
11499: CALL_OW 114
11503: GO 11485
11505: POP
11506: POP
// if frank_send_to_scout then
11507: LD_EXP 15
11511: IFFALSE 11525
// begin SayRadio ( Frank , D3b-Frank-1 ) ;
11513: LD_EXP 51
11517: PPUSH
11518: LD_STRING D3b-Frank-1
11520: PPUSH
11521: CALL_OW 94
// end ; Wait ( 0 0$03 ) ;
11525: LD_INT 105
11527: PPUSH
11528: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11532: LD_EXP 44
11536: PPUSH
11537: LD_STRING D4-Corn-1
11539: PPUSH
11540: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11544: LD_INT 35
11546: PPUSH
11547: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11551: LD_INT 22
11553: PUSH
11554: LD_INT 4
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 21
11563: PUSH
11564: LD_INT 1
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 3
11573: PUSH
11574: LD_INT 24
11576: PUSH
11577: LD_INT 1000
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: LIST
11592: PPUSH
11593: CALL_OW 69
11597: PUSH
11598: LD_INT 6
11600: LESS
11601: IFFALSE 11544
// if Cornel then
11603: LD_EXP 44
11607: IFFALSE 11647
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
11609: LD_EXP 44
11613: PPUSH
11614: LD_STRING D5-Corn-1
11616: PPUSH
11617: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
11621: LD_EXP 44
11625: PPUSH
11626: LD_EXP 2
11630: PUSH
11631: LD_STRING Cornel
11633: STR
11634: PPUSH
11635: CALL_OW 38
// cornel_saved := true ;
11639: LD_ADDR_EXP 27
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
11647: LD_INT 4
11649: PPUSH
11650: LD_INT 8
11652: PPUSH
11653: CALL_OW 343
// Wait ( 0 0$01 ) ;
11657: LD_INT 35
11659: PPUSH
11660: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
11664: LD_INT 3
11666: PPUSH
11667: LD_EXP 44
11671: PPUSH
11672: CALL_OW 472
// send_attack_on_cornel := false ;
11676: LD_ADDR_EXP 32
11680: PUSH
11681: LD_INT 0
11683: ST_TO_ADDR
// end ;
11684: PPOPN 1
11686: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
11687: LD_INT 9
11689: PPUSH
11690: LD_INT 22
11692: PUSH
11693: LD_INT 1
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PPUSH
11700: CALL_OW 70
11704: PUSH
11705: LD_EXP 33
11709: OR
11710: IFFALSE 11931
11712: GO 11714
11714: DISABLE
11715: LD_INT 0
11717: PPUSH
11718: PPUSH
// begin enable ;
11719: ENABLE
// if not jmm_on_west then
11720: LD_EXP 5
11724: NOT
11725: IFFALSE 11736
// begin YouLost ( 4 ) ;
11727: LD_STRING 4
11729: PPUSH
11730: CALL_OW 104
// exit ;
11734: GO 11931
// end ; if not game_end then
11736: LD_EXP 33
11740: NOT
11741: IFFALSE 11751
// game_end := true ;
11743: LD_ADDR_EXP 33
11747: PUSH
11748: LD_INT 1
11750: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11751: LD_ADDR_VAR 0 2
11755: PUSH
11756: LD_INT 9
11758: PPUSH
11759: LD_INT 22
11761: PUSH
11762: LD_INT 1
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PPUSH
11769: CALL_OW 70
11773: ST_TO_ADDR
// if not filter then
11774: LD_VAR 0 2
11778: NOT
11779: IFFALSE 11783
// exit ;
11781: GO 11931
// for i in filter do
11783: LD_ADDR_VAR 0 1
11787: PUSH
11788: LD_VAR 0 2
11792: PUSH
11793: FOR_IN
11794: IFFALSE 11929
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
11796: LD_VAR 0 1
11800: PPUSH
11801: CALL_OW 302
11805: PUSH
11806: LD_VAR 0 1
11810: PPUSH
11811: CALL_OW 247
11815: PUSH
11816: LD_INT 2
11818: EQUAL
11819: AND
11820: IFFALSE 11892
// begin if i = JMM and save_group < 4 then
11822: LD_VAR 0 1
11826: PUSH
11827: LD_EXP 37
11831: EQUAL
11832: PUSH
11833: LD_EXP 23
11837: PUSH
11838: LD_INT 4
11840: LESS
11841: AND
11842: IFFALSE 11846
// continue ;
11844: GO 11793
// if GetNation ( i ) = nation_american then
11846: LD_VAR 0 1
11850: PPUSH
11851: CALL_OW 248
11855: PUSH
11856: LD_INT 1
11858: EQUAL
11859: IFFALSE 11869
// veh_on_meta := true ;
11861: LD_ADDR_EXP 28
11865: PUSH
11866: LD_INT 1
11868: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
11869: LD_VAR 0 1
11873: PPUSH
11874: CALL_OW 311
11878: PPUSH
11879: CALL 11934 0 1
// RemoveUnit ( i ) ;
11883: LD_VAR 0 1
11887: PPUSH
11888: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
11892: LD_VAR 0 1
11896: PPUSH
11897: CALL_OW 302
11901: PUSH
11902: LD_VAR 0 1
11906: PPUSH
11907: CALL_OW 247
11911: PUSH
11912: LD_INT 1
11914: EQUAL
11915: AND
11916: IFFALSE 11927
// Save ( i ) ;
11918: LD_VAR 0 1
11922: PPUSH
11923: CALL 11934 0 1
// end ;
11927: GO 11793
11929: POP
11930: POP
// end ;
11931: PPOPN 2
11933: END
// export function Save ( i ) ; begin
11934: LD_INT 0
11936: PPUSH
// if i = JMM and save_group >= 4 then
11937: LD_VAR 0 1
11941: PUSH
11942: LD_EXP 37
11946: EQUAL
11947: PUSH
11948: LD_EXP 23
11952: PUSH
11953: LD_INT 4
11955: GREATEREQUAL
11956: AND
11957: IFFALSE 12093
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
11959: LD_EXP 24
11963: PUSH
11964: LD_INT 22
11966: PUSH
11967: LD_INT 1
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: LD_INT 21
11976: PUSH
11977: LD_INT 1
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PPUSH
11988: CALL_OW 69
11992: PUSH
11993: LD_INT 1
11995: GREATER
11996: AND
11997: IFFALSE 12054
// begin show_query := false ;
11999: LD_ADDR_EXP 24
12003: PUSH
12004: LD_INT 0
12006: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12007: LD_STRING Q2
12009: PPUSH
12010: CALL_OW 97
12014: PUSH
12015: LD_INT 1
12017: DOUBLE
12018: EQUAL
12019: IFTRUE 12023
12021: GO 12034
12023: POP
// wait_for_them := true ; 2 :
12024: LD_ADDR_EXP 25
12028: PUSH
12029: LD_INT 1
12031: ST_TO_ADDR
12032: GO 12054
12034: LD_INT 2
12036: DOUBLE
12037: EQUAL
12038: IFTRUE 12042
12040: GO 12053
12042: POP
// wait_for_them := false ; end ;
12043: LD_ADDR_EXP 25
12047: PUSH
12048: LD_INT 0
12050: ST_TO_ADDR
12051: GO 12054
12053: POP
// end ; save_counter := save_counter + 1 ;
12054: LD_ADDR_EXP 36
12058: PUSH
12059: LD_EXP 36
12063: PUSH
12064: LD_INT 1
12066: PLUS
12067: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12068: LD_ADDR_EXP 23
12072: PUSH
12073: LD_EXP 23
12077: PUSH
12078: LD_EXP 37
12082: ADD
12083: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12084: LD_EXP 37
12088: PPUSH
12089: CALL_OW 64
// end ; if i = Lisa then
12093: LD_VAR 0 1
12097: PUSH
12098: LD_EXP 40
12102: EQUAL
12103: IFFALSE 12144
// begin save_counter := save_counter + 1 ;
12105: LD_ADDR_EXP 36
12109: PUSH
12110: LD_EXP 36
12114: PUSH
12115: LD_INT 1
12117: PLUS
12118: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12119: LD_ADDR_EXP 23
12123: PUSH
12124: LD_EXP 23
12128: PUSH
12129: LD_EXP 40
12133: ADD
12134: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12135: LD_EXP 40
12139: PPUSH
12140: CALL_OW 64
// end ; if i = Bobby then
12144: LD_VAR 0 1
12148: PUSH
12149: LD_EXP 38
12153: EQUAL
12154: IFFALSE 12195
// begin save_counter := save_counter + 1 ;
12156: LD_ADDR_EXP 36
12160: PUSH
12161: LD_EXP 36
12165: PUSH
12166: LD_INT 1
12168: PLUS
12169: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12170: LD_ADDR_EXP 23
12174: PUSH
12175: LD_EXP 23
12179: PUSH
12180: LD_EXP 38
12184: ADD
12185: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12186: LD_EXP 38
12190: PPUSH
12191: CALL_OW 64
// end ; if i = Cyrus then
12195: LD_VAR 0 1
12199: PUSH
12200: LD_EXP 39
12204: EQUAL
12205: IFFALSE 12246
// begin save_counter := save_counter + 1 ;
12207: LD_ADDR_EXP 36
12211: PUSH
12212: LD_EXP 36
12216: PUSH
12217: LD_INT 1
12219: PLUS
12220: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12221: LD_ADDR_EXP 23
12225: PUSH
12226: LD_EXP 23
12230: PUSH
12231: LD_EXP 39
12235: ADD
12236: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12237: LD_EXP 39
12241: PPUSH
12242: CALL_OW 64
// end ; if i = Khatam then
12246: LD_VAR 0 1
12250: PUSH
12251: LD_EXP 41
12255: EQUAL
12256: IFFALSE 12297
// begin save_counter := save_counter + 1 ;
12258: LD_ADDR_EXP 36
12262: PUSH
12263: LD_EXP 36
12267: PUSH
12268: LD_INT 1
12270: PLUS
12271: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12272: LD_ADDR_EXP 23
12276: PUSH
12277: LD_EXP 23
12281: PUSH
12282: LD_EXP 41
12286: ADD
12287: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12288: LD_EXP 41
12292: PPUSH
12293: CALL_OW 64
// end ; if i = Frank then
12297: LD_VAR 0 1
12301: PUSH
12302: LD_EXP 51
12306: EQUAL
12307: IFFALSE 12348
// begin save_counter := save_counter + 1 ;
12309: LD_ADDR_EXP 36
12313: PUSH
12314: LD_EXP 36
12318: PUSH
12319: LD_INT 1
12321: PLUS
12322: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12323: LD_ADDR_EXP 23
12327: PUSH
12328: LD_EXP 23
12332: PUSH
12333: LD_EXP 51
12337: ADD
12338: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12339: LD_EXP 51
12343: PPUSH
12344: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12348: LD_VAR 0 1
12352: PUSH
12353: LD_EXP 37
12357: NONEQUAL
12358: PUSH
12359: LD_VAR 0 1
12363: PPUSH
12364: CALL_OW 302
12368: AND
12369: PUSH
12370: LD_VAR 0 1
12374: PPUSH
12375: CALL_OW 247
12379: PUSH
12380: LD_INT 1
12382: EQUAL
12383: AND
12384: PUSH
12385: LD_VAR 0 1
12389: PUSH
12390: LD_EXP 23
12394: IN
12395: NOT
12396: AND
12397: IFFALSE 12438
// begin save_counter := save_counter + 1 ;
12399: LD_ADDR_EXP 36
12403: PUSH
12404: LD_EXP 36
12408: PUSH
12409: LD_INT 1
12411: PLUS
12412: ST_TO_ADDR
// save_others := save_others ^ i ;
12413: LD_ADDR_EXP 22
12417: PUSH
12418: LD_EXP 22
12422: PUSH
12423: LD_VAR 0 1
12427: ADD
12428: ST_TO_ADDR
// RemoveUnit ( i ) ;
12429: LD_VAR 0 1
12433: PPUSH
12434: CALL_OW 64
// end ; end ;
12438: LD_VAR 0 2
12442: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12443: LD_EXP 24
12447: NOT
12448: PUSH
12449: LD_EXP 25
12453: NOT
12454: AND
12455: PUSH
12456: LD_INT 22
12458: PUSH
12459: LD_INT 1
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 21
12468: PUSH
12469: LD_INT 1
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 69
12484: PUSH
12485: LD_INT 0
12487: EQUAL
12488: OR
12489: IFFALSE 12498
12491: GO 12493
12493: DISABLE
// EndMission ;
12494: CALL 12499 0 0
12498: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12499: LD_INT 0
12501: PPUSH
12502: PPUSH
12503: PPUSH
12504: PPUSH
12505: PPUSH
// wait ( 0 0$01 ) ;
12506: LD_INT 35
12508: PPUSH
12509: CALL_OW 67
// if tick <= 12 12$00 then
12513: LD_OWVAR 1
12517: PUSH
12518: LD_INT 25200
12520: LESSEQUAL
12521: IFFALSE 12530
// SetAchievement ( ACH_ASPEED_3 ) ;
12523: LD_STRING ACH_ASPEED_3
12525: PPUSH
12526: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12530: LD_EXP 23
12534: PUSH
12535: LD_EXP 22
12539: ADD
12540: PPUSH
12541: LD_INT 25
12543: PUSH
12544: LD_INT 4
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 72
12555: PUSH
12556: LD_INT 0
12558: EQUAL
12559: IFFALSE 12575
// begin wait ( 3 ) ;
12561: LD_INT 3
12563: PPUSH
12564: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
12568: LD_STRING ACH_NOSCI
12570: PPUSH
12571: CALL_OW 543
// end ; m1 := solar_builded ;
12575: LD_ADDR_VAR 0 3
12579: PUSH
12580: LD_EXP 14
12584: ST_TO_ADDR
// m2 := veh_on_meta ;
12585: LD_ADDR_VAR 0 4
12589: PUSH
12590: LD_EXP 28
12594: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
12595: LD_ADDR_VAR 0 5
12599: PUSH
12600: LD_EXP 34
12604: PUSH
12605: LD_INT 0
12607: EQUAL
12608: ST_TO_ADDR
// if solar_builded then
12609: LD_EXP 14
12613: IFFALSE 12627
// AddMedal ( Solar1 , 1 ) else
12615: LD_STRING Solar1
12617: PPUSH
12618: LD_INT 1
12620: PPUSH
12621: CALL_OW 101
12625: GO 12638
// AddMedal ( Solar1 , - 1 ) ;
12627: LD_STRING Solar1
12629: PPUSH
12630: LD_INT 1
12632: NEG
12633: PPUSH
12634: CALL_OW 101
// if veh_on_meta then
12638: LD_EXP 28
12642: IFFALSE 12656
// AddMedal ( Solar2 , 1 ) else
12644: LD_STRING Solar2
12646: PPUSH
12647: LD_INT 1
12649: PPUSH
12650: CALL_OW 101
12654: GO 12686
// if solar_builded then
12656: LD_EXP 14
12660: IFFALSE 12675
// AddMedal ( Solar2 , - 1 ) else
12662: LD_STRING Solar2
12664: PPUSH
12665: LD_INT 1
12667: NEG
12668: PPUSH
12669: CALL_OW 101
12673: GO 12686
// AddMedal ( Solar2 , - 2 ) ;
12675: LD_STRING Solar2
12677: PPUSH
12678: LD_INT 2
12680: NEG
12681: PPUSH
12682: CALL_OW 101
// if lose_counter = 0 then
12686: LD_EXP 34
12690: PUSH
12691: LD_INT 0
12693: EQUAL
12694: IFFALSE 12708
// AddMedal ( No , 1 ) else
12696: LD_STRING No
12698: PPUSH
12699: LD_INT 1
12701: PPUSH
12702: CALL_OW 101
12706: GO 12752
// if lose_counter > 0 and lose_counter < 4 then
12708: LD_EXP 34
12712: PUSH
12713: LD_INT 0
12715: GREATER
12716: PUSH
12717: LD_EXP 34
12721: PUSH
12722: LD_INT 4
12724: LESS
12725: AND
12726: IFFALSE 12741
// AddMedal ( No , - 1 ) else
12728: LD_STRING No
12730: PPUSH
12731: LD_INT 1
12733: NEG
12734: PPUSH
12735: CALL_OW 101
12739: GO 12752
// AddMedal ( UpTo4 , - 1 ) ;
12741: LD_STRING UpTo4
12743: PPUSH
12744: LD_INT 1
12746: NEG
12747: PPUSH
12748: CALL_OW 101
// GiveMedals ( MAIN ) ;
12752: LD_STRING MAIN
12754: PPUSH
12755: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
12759: LD_OWVAR 67
12763: PUSH
12764: LD_INT 3
12766: GREATEREQUAL
12767: PUSH
12768: LD_VAR 0 3
12772: AND
12773: PUSH
12774: LD_VAR 0 4
12778: AND
12779: PUSH
12780: LD_VAR 0 5
12784: AND
12785: IFFALSE 12797
// SetAchievementEX ( ACH_AMER , 3 ) ;
12787: LD_STRING ACH_AMER
12789: PPUSH
12790: LD_INT 3
12792: PPUSH
12793: CALL_OW 564
// if IsDead ( Pokryshkin ) then
12797: LD_EXP 52
12801: PPUSH
12802: CALL_OW 301
12806: IFFALSE 12862
// begin stop_talking := true ;
12808: LD_ADDR_OWVAR 56
12812: PUSH
12813: LD_INT 1
12815: ST_TO_ADDR
// for i in save_group union save_others do
12816: LD_ADDR_VAR 0 2
12820: PUSH
12821: LD_EXP 23
12825: PUSH
12826: LD_EXP 22
12830: UNION
12831: PUSH
12832: FOR_IN
12833: IFFALSE 12852
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
12835: LD_VAR 0 2
12839: PPUSH
12840: LD_INT 1
12842: PPUSH
12843: LD_INT 1500
12845: PPUSH
12846: CALL_OW 591
12850: GO 12832
12852: POP
12853: POP
// stop_talking := false ;
12854: LD_ADDR_OWVAR 56
12858: PUSH
12859: LD_INT 0
12861: ST_TO_ADDR
// end ; RewardPeople ( save_group ^ save_others ) ;
12862: LD_EXP 23
12866: PUSH
12867: LD_EXP 22
12871: ADD
12872: PPUSH
12873: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
12877: LD_EXP 37
12881: PPUSH
12882: LD_EXP 2
12886: PUSH
12887: LD_STRING JMM
12889: STR
12890: PPUSH
12891: CALL_OW 38
// if Bobby in save_group then
12895: LD_EXP 38
12899: PUSH
12900: LD_EXP 23
12904: IN
12905: IFFALSE 12925
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
12907: LD_EXP 38
12911: PPUSH
12912: LD_EXP 2
12916: PUSH
12917: LD_STRING Bobby
12919: STR
12920: PPUSH
12921: CALL_OW 38
// if Cyrus in save_group then
12925: LD_EXP 39
12929: PUSH
12930: LD_EXP 23
12934: IN
12935: IFFALSE 12955
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
12937: LD_EXP 39
12941: PPUSH
12942: LD_EXP 2
12946: PUSH
12947: LD_STRING Cyrus
12949: STR
12950: PPUSH
12951: CALL_OW 38
// if Lisa in save_group then
12955: LD_EXP 40
12959: PUSH
12960: LD_EXP 23
12964: IN
12965: IFFALSE 12985
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
12967: LD_EXP 40
12971: PPUSH
12972: LD_EXP 2
12976: PUSH
12977: LD_STRING Lisa
12979: STR
12980: PPUSH
12981: CALL_OW 38
// if Frank in save_group then
12985: LD_EXP 51
12989: PUSH
12990: LD_EXP 23
12994: IN
12995: IFFALSE 13015
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
12997: LD_EXP 51
13001: PPUSH
13002: LD_EXP 2
13006: PUSH
13007: LD_STRING Frank
13009: STR
13010: PPUSH
13011: CALL_OW 38
// if Khatam in save_group then
13015: LD_EXP 41
13019: PUSH
13020: LD_EXP 23
13024: IN
13025: IFFALSE 13045
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13027: LD_EXP 41
13031: PPUSH
13032: LD_EXP 2
13036: PUSH
13037: LD_STRING Khatam
13039: STR
13040: PPUSH
13041: CALL_OW 38
// if save_others then
13045: LD_EXP 22
13049: IFFALSE 13063
// SaveCharacters ( save_others , 03_others ) ;
13051: LD_EXP 22
13055: PPUSH
13056: LD_STRING 03_others
13058: PPUSH
13059: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13063: LD_EXP 45
13067: PUSH
13068: LD_EXP 45
13072: PPUSH
13073: CALL_OW 302
13077: AND
13078: PUSH
13079: LD_EXP 27
13083: AND
13084: IFFALSE 13096
// begin ResetFog ;
13086: CALL_OW 335
// DisplayEndingScene ;
13090: CALL 13118 0 0
// end else
13094: GO 13109
// DeleteCharacters ( mission_prefix & Cornel ) ;
13096: LD_EXP 2
13100: PUSH
13101: LD_STRING Cornel
13103: STR
13104: PPUSH
13105: CALL_OW 40
// YouWin ;
13109: CALL_OW 103
// end ;
13113: LD_VAR 0 1
13117: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13118: LD_INT 0
13120: PPUSH
13121: PPUSH
13122: PPUSH
13123: PPUSH
13124: PPUSH
13125: PPUSH
// InGameOn ;
13126: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13130: LD_INT 208
13132: PPUSH
13133: LD_INT 62
13135: PPUSH
13136: LD_INT 1
13138: PPUSH
13139: LD_INT 10
13141: NEG
13142: PPUSH
13143: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13147: LD_INT 208
13149: PPUSH
13150: LD_INT 62
13152: PPUSH
13153: LD_INT 1
13155: PPUSH
13156: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13160: LD_ADDR_VAR 0 3
13164: PUSH
13165: LD_INT 22
13167: PUSH
13168: LD_INT 3
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 2
13177: PUSH
13178: LD_INT 21
13180: PUSH
13181: LD_INT 2
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 21
13190: PUSH
13191: LD_INT 1
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: LIST
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: PPUSH
13207: CALL_OW 69
13211: ST_TO_ADDR
// if filter then
13212: LD_VAR 0 3
13216: IFFALSE 13244
// for i in filter do
13218: LD_ADDR_VAR 0 2
13222: PUSH
13223: LD_VAR 0 3
13227: PUSH
13228: FOR_IN
13229: IFFALSE 13242
// RemoveUnit ( i ) ;
13231: LD_VAR 0 2
13235: PPUSH
13236: CALL_OW 64
13240: GO 13228
13242: POP
13243: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13244: LD_ADDR_VAR 0 3
13248: PUSH
13249: LD_INT 22
13251: PUSH
13252: LD_INT 4
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 21
13261: PUSH
13262: LD_INT 1
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PPUSH
13273: CALL_OW 69
13277: ST_TO_ADDR
// if filter then
13278: LD_VAR 0 3
13282: IFFALSE 13313
// for i in filter do
13284: LD_ADDR_VAR 0 2
13288: PUSH
13289: LD_VAR 0 3
13293: PUSH
13294: FOR_IN
13295: IFFALSE 13311
// SetLives ( i , 0 ) ;
13297: LD_VAR 0 2
13301: PPUSH
13302: LD_INT 0
13304: PPUSH
13305: CALL_OW 234
13309: GO 13294
13311: POP
13312: POP
// uc_side := 4 ;
13313: LD_ADDR_OWVAR 20
13317: PUSH
13318: LD_INT 4
13320: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13321: LD_ADDR_VAR 0 4
13325: PUSH
13326: LD_STRING Cornell
13328: PPUSH
13329: LD_INT 0
13331: PPUSH
13332: LD_STRING 
13334: PPUSH
13335: CALL 37751 0 3
13339: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13340: LD_VAR 0 4
13344: PPUSH
13345: LD_INT 208
13347: PPUSH
13348: LD_INT 62
13350: PPUSH
13351: LD_INT 0
13353: PPUSH
13354: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13358: LD_VAR 0 4
13362: PPUSH
13363: LD_INT 100
13365: PPUSH
13366: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13370: LD_INT 3
13372: PPUSH
13373: LD_VAR 0 4
13377: PPUSH
13378: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13382: LD_INT 4
13384: PPUSH
13385: LD_INT 3
13387: PPUSH
13388: LD_INT 1
13390: PPUSH
13391: LD_INT 1
13393: PPUSH
13394: CALL_OW 80
// uc_side := 3 ;
13398: LD_ADDR_OWVAR 20
13402: PUSH
13403: LD_INT 3
13405: ST_TO_ADDR
// uc_nation := 3 ;
13406: LD_ADDR_OWVAR 21
13410: PUSH
13411: LD_INT 3
13413: ST_TO_ADDR
// InitHc ;
13414: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13418: LD_ADDR_VAR 0 5
13422: PUSH
13423: LD_STRING Mikhail
13425: PPUSH
13426: LD_INT 0
13428: PPUSH
13429: LD_STRING 
13431: PPUSH
13432: CALL 37751 0 3
13436: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13437: LD_INT 1
13439: PPUSH
13440: LD_INT 1
13442: PPUSH
13443: LD_INT 0
13445: PPUSH
13446: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13450: LD_ADDR_VAR 0 6
13454: PUSH
13455: LD_VAR 0 6
13459: PUSH
13460: CALL_OW 44
13464: ADD
13465: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13466: LD_ADDR_VAR 0 6
13470: PUSH
13471: LD_VAR 0 6
13475: PUSH
13476: CALL_OW 44
13480: ADD
13481: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13482: LD_INT 2
13484: PPUSH
13485: LD_INT 4
13487: PPUSH
13488: LD_INT 0
13490: PPUSH
13491: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13495: LD_ADDR_VAR 0 6
13499: PUSH
13500: LD_VAR 0 6
13504: PUSH
13505: CALL_OW 44
13509: ADD
13510: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13511: LD_VAR 0 5
13515: PPUSH
13516: LD_INT 17
13518: PPUSH
13519: LD_INT 0
13521: PPUSH
13522: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13526: LD_VAR 0 5
13530: PPUSH
13531: LD_INT 210
13533: PPUSH
13534: LD_INT 63
13536: PPUSH
13537: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
13541: LD_VAR 0 5
13545: PPUSH
13546: LD_INT 208
13548: PPUSH
13549: LD_INT 62
13551: PPUSH
13552: CALL_OW 178
// for i in fake_russians do
13556: LD_ADDR_VAR 0 2
13560: PUSH
13561: LD_VAR 0 6
13565: PUSH
13566: FOR_IN
13567: IFFALSE 13645
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
13569: LD_VAR 0 2
13573: PPUSH
13574: LD_INT 17
13576: PPUSH
13577: LD_INT 0
13579: PPUSH
13580: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
13584: LD_VAR 0 2
13588: PPUSH
13589: LD_INT 215
13591: PPUSH
13592: LD_INT 67
13594: PPUSH
13595: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
13599: LD_VAR 0 2
13603: PPUSH
13604: LD_INT 208
13606: PPUSH
13607: LD_INT 62
13609: PPUSH
13610: CALL_OW 178
// if GetClass ( i ) = 4 then
13614: LD_VAR 0 2
13618: PPUSH
13619: CALL_OW 257
13623: PUSH
13624: LD_INT 4
13626: EQUAL
13627: IFFALSE 13643
// ComHeal ( i , fake_cornel ) ;
13629: LD_VAR 0 2
13633: PPUSH
13634: LD_VAR 0 4
13638: PPUSH
13639: CALL_OW 128
// end ;
13643: GO 13566
13645: POP
13646: POP
// Wait ( 0 0$01 ) ;
13647: LD_INT 35
13649: PPUSH
13650: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
13654: LD_INT 208
13656: PPUSH
13657: LD_INT 62
13659: PPUSH
13660: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13664: LD_INT 208
13666: PPUSH
13667: LD_INT 62
13669: PPUSH
13670: LD_INT 1
13672: PPUSH
13673: LD_INT 10
13675: NEG
13676: PPUSH
13677: CALL_OW 330
// Wait ( 0 0$15 ) ;
13681: LD_INT 525
13683: PPUSH
13684: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
13688: LD_INT 208
13690: PPUSH
13691: LD_INT 62
13693: PPUSH
13694: LD_INT 1
13696: PPUSH
13697: CALL_OW 331
// ResetFog ;
13701: CALL_OW 335
// InGameOff ;
13705: CALL_OW 9
// end ;
13709: LD_VAR 0 1
13713: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
13714: LD_INT 10
13716: PPUSH
13717: LD_INT 22
13719: PUSH
13720: LD_INT 1
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PPUSH
13727: CALL_OW 70
13731: PUSH
13732: LD_EXP 44
13736: PPUSH
13737: CALL_OW 302
13741: AND
13742: PUSH
13743: LD_INT 22
13745: PUSH
13746: LD_INT 1
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PPUSH
13753: CALL_OW 69
13757: PPUSH
13758: LD_EXP 44
13762: PPUSH
13763: CALL_OW 74
13767: PPUSH
13768: LD_EXP 44
13772: PPUSH
13773: CALL_OW 296
13777: PUSH
13778: LD_INT 30
13780: LESS
13781: OR
13782: IFFALSE 13833
13784: GO 13786
13786: DISABLE
// begin enable ;
13787: ENABLE
// powell_warn := powell_warn + 1 ;
13788: LD_ADDR_EXP 35
13792: PUSH
13793: LD_EXP 35
13797: PUSH
13798: LD_INT 1
13800: PLUS
13801: ST_TO_ADDR
// if powell_warn = 3 then
13802: LD_EXP 35
13806: PUSH
13807: LD_INT 3
13809: EQUAL
13810: IFFALSE 13821
// begin YouLost ( 5 ) ;
13812: LD_STRING 5
13814: PPUSH
13815: CALL_OW 104
// exit ;
13819: GO 13833
// end ; SayRadio ( Powell , DWarn-Pow-1 ) ;
13821: LD_EXP 46
13825: PPUSH
13826: LD_STRING DWarn-Pow-1
13828: PPUSH
13829: CALL_OW 94
// end ; end_of_file
13833: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
13834: LD_EXP 8
13838: IFFALSE 15675
13840: GO 13842
13842: DISABLE
13843: LD_INT 0
13845: PPUSH
13846: PPUSH
13847: PPUSH
13848: PPUSH
13849: PPUSH
13850: PPUSH
13851: PPUSH
13852: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
13853: LD_EXP 44
13857: PUSH
13858: LD_EXP 45
13862: ADD
13863: PUSH
13864: LD_EXP 6
13868: ADD
13869: PPUSH
13870: LD_INT 250
13872: PPUSH
13873: LD_INT 120
13875: PPUSH
13876: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
13880: LD_ADDR_VAR 0 2
13884: PUSH
13885: LD_EXP 6
13889: PPUSH
13890: LD_INT 25
13892: PUSH
13893: LD_INT 2
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PPUSH
13900: CALL_OW 72
13904: PUSH
13905: LD_EXP 45
13909: DIFF
13910: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
13911: LD_ADDR_VAR 0 3
13915: PUSH
13916: LD_EXP 6
13920: PPUSH
13921: LD_INT 21
13923: PUSH
13924: LD_INT 1
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PPUSH
13931: CALL_OW 72
13935: PUSH
13936: LD_VAR 0 2
13940: DIFF
13941: ST_TO_ADDR
// if not has_eng then
13942: LD_VAR 0 2
13946: NOT
13947: IFFALSE 14030
// begin uc_side := 4 ;
13949: LD_ADDR_OWVAR 20
13953: PUSH
13954: LD_INT 4
13956: ST_TO_ADDR
// uc_nation := 1 ;
13957: LD_ADDR_OWVAR 21
13961: PUSH
13962: LD_INT 1
13964: ST_TO_ADDR
// bc_type := b_depot ;
13965: LD_ADDR_OWVAR 42
13969: PUSH
13970: LD_INT 0
13972: ST_TO_ADDR
// bc_level := 2 ;
13973: LD_ADDR_OWVAR 43
13977: PUSH
13978: LD_INT 2
13980: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
13981: LD_ADDR_VAR 0 4
13985: PUSH
13986: LD_INT 264
13988: PPUSH
13989: LD_INT 120
13991: PPUSH
13992: LD_INT 4
13994: PPUSH
13995: CALL_OW 47
13999: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14000: LD_INT 264
14002: PPUSH
14003: LD_INT 120
14005: PPUSH
14006: LD_INT 4
14008: PPUSH
14009: LD_INT 10
14011: NEG
14012: PPUSH
14013: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14017: LD_INT 264
14019: PPUSH
14020: LD_INT 120
14022: PPUSH
14023: LD_INT 4
14025: PPUSH
14026: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14030: LD_INT 35
14032: PPUSH
14033: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14037: LD_EXP 44
14041: PPUSH
14042: LD_INT 10
14044: PPUSH
14045: CALL_OW 308
14049: PUSH
14050: LD_EXP 44
14054: PPUSH
14055: CALL_OW 310
14059: PPUSH
14060: LD_INT 10
14062: PPUSH
14063: CALL_OW 308
14067: OR
14068: IFFALSE 14030
// if has_eng and not dep then
14070: LD_VAR 0 2
14074: PUSH
14075: LD_VAR 0 4
14079: NOT
14080: AND
14081: IFFALSE 14231
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14083: LD_VAR 0 2
14087: PPUSH
14088: LD_INT 0
14090: PPUSH
14091: LD_INT 264
14093: PPUSH
14094: LD_INT 120
14096: PPUSH
14097: LD_INT 4
14099: PPUSH
14100: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14104: LD_INT 35
14106: PPUSH
14107: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14111: LD_INT 22
14113: PUSH
14114: LD_INT 4
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 30
14123: PUSH
14124: LD_INT 0
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PPUSH
14135: CALL_OW 69
14139: IFFALSE 14104
// ComMoveXY ( filter , 264 , 120 ) ;
14141: LD_VAR 0 3
14145: PPUSH
14146: LD_INT 264
14148: PPUSH
14149: LD_INT 120
14151: PPUSH
14152: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14156: LD_INT 35
14158: PPUSH
14159: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14163: LD_INT 22
14165: PUSH
14166: LD_INT 4
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PUSH
14173: LD_INT 30
14175: PUSH
14176: LD_INT 0
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PUSH
14183: LD_INT 3
14185: PUSH
14186: LD_INT 57
14188: PUSH
14189: EMPTY
14190: LIST
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: LIST
14200: PPUSH
14201: CALL_OW 69
14205: IFFALSE 14156
// ComMoveXY ( filter , 247 , 113 ) ;
14207: LD_VAR 0 3
14211: PPUSH
14212: LD_INT 247
14214: PPUSH
14215: LD_INT 113
14217: PPUSH
14218: CALL_OW 111
// Wait ( 0 0$2 ) ;
14222: LD_INT 70
14224: PPUSH
14225: CALL_OW 67
// end else
14229: GO 14243
// begin SetSide ( dep , 4 ) ;
14231: LD_VAR 0 4
14235: PPUSH
14236: LD_INT 4
14238: PPUSH
14239: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14243: LD_ADDR_VAR 0 4
14247: PUSH
14248: LD_INT 22
14250: PUSH
14251: LD_INT 4
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 30
14260: PUSH
14261: LD_INT 0
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PPUSH
14272: CALL_OW 69
14276: PUSH
14277: LD_INT 1
14279: ARRAY
14280: ST_TO_ADDR
// if not has_eng then
14281: LD_VAR 0 2
14285: NOT
14286: IFFALSE 14373
// for i = 1 to 2 do
14288: LD_ADDR_VAR 0 1
14292: PUSH
14293: DOUBLE
14294: LD_INT 1
14296: DEC
14297: ST_TO_ADDR
14298: LD_INT 2
14300: PUSH
14301: FOR_TO
14302: IFFALSE 14371
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14304: LD_VAR 0 3
14308: PUSH
14309: LD_INT 1
14311: ARRAY
14312: PPUSH
14313: LD_VAR 0 4
14317: PPUSH
14318: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14322: LD_VAR 0 3
14326: PUSH
14327: LD_INT 1
14329: ARRAY
14330: PPUSH
14331: LD_INT 2
14333: PPUSH
14334: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14338: LD_VAR 0 3
14342: PUSH
14343: LD_INT 1
14345: ARRAY
14346: PPUSH
14347: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14351: LD_ADDR_VAR 0 3
14355: PUSH
14356: LD_VAR 0 3
14360: PPUSH
14361: LD_INT 1
14363: PPUSH
14364: CALL_OW 3
14368: ST_TO_ADDR
// end ;
14369: GO 14301
14371: POP
14372: POP
// if IsInUnit ( Cornel ) then
14373: LD_EXP 44
14377: PPUSH
14378: CALL_OW 310
14382: IFFALSE 14460
// begin cargo := IsInUnit ( Cornel ) ;
14384: LD_ADDR_VAR 0 7
14388: PUSH
14389: LD_EXP 44
14393: PPUSH
14394: CALL_OW 310
14398: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14399: LD_VAR 0 7
14403: PPUSH
14404: LD_INT 1
14406: PPUSH
14407: CALL_OW 289
14411: IFFALSE 14422
// ComUnload ( cargo ) ;
14413: LD_VAR 0 7
14417: PPUSH
14418: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14422: LD_EXP 44
14426: PPUSH
14427: LD_INT 235
14429: PPUSH
14430: LD_INT 122
14432: PPUSH
14433: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14437: LD_EXP 44
14441: PPUSH
14442: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14446: LD_EXP 44
14450: PPUSH
14451: LD_VAR 0 4
14455: PPUSH
14456: CALL_OW 180
// end ; if Bierezov then
14460: LD_EXP 45
14464: IFFALSE 14512
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14466: LD_EXP 45
14470: PPUSH
14471: LD_INT 260
14473: PPUSH
14474: LD_INT 120
14476: PPUSH
14477: CALL_OW 111
// if dep then
14481: LD_VAR 0 4
14485: IFFALSE 14503
// AddComEnterUnit ( Bierezov , dep ) else
14487: LD_EXP 45
14491: PPUSH
14492: LD_VAR 0 4
14496: PPUSH
14497: CALL_OW 180
14501: GO 14512
// AddComHold ( Bierezov ) ;
14503: LD_EXP 45
14507: PPUSH
14508: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14512: LD_INT 525
14514: PPUSH
14515: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14519: LD_ADDR_VAR 0 2
14523: PUSH
14524: LD_INT 22
14526: PUSH
14527: LD_INT 4
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: LD_INT 25
14536: PUSH
14537: LD_INT 2
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PPUSH
14548: CALL_OW 69
14552: PUSH
14553: LD_EXP 45
14557: DIFF
14558: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14559: LD_INT 35
14561: PPUSH
14562: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
14566: LD_ADDR_VAR 0 6
14570: PUSH
14571: LD_INT 10
14573: PPUSH
14574: CALL_OW 435
14578: ST_TO_ADDR
// if crates then
14579: LD_VAR 0 6
14583: IFFALSE 14612
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
14585: LD_VAR 0 2
14589: PPUSH
14590: LD_VAR 0 6
14594: PUSH
14595: LD_INT 1
14597: ARRAY
14598: PPUSH
14599: LD_VAR 0 6
14603: PUSH
14604: LD_INT 2
14606: ARRAY
14607: PPUSH
14608: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
14612: LD_VAR 0 4
14616: PPUSH
14617: CALL_OW 274
14621: PPUSH
14622: LD_INT 1
14624: PPUSH
14625: CALL_OW 275
14629: PUSH
14630: LD_INT 40
14632: GREATEREQUAL
14633: IFFALSE 14559
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
14635: LD_ADDR_VAR 0 5
14639: PUSH
14640: LD_INT 4
14642: PUSH
14643: LD_INT 256
14645: PUSH
14646: LD_INT 111
14648: PUSH
14649: LD_INT 2
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 31
14660: PUSH
14661: LD_INT 243
14663: PUSH
14664: LD_INT 112
14666: PUSH
14667: LD_INT 2
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: PUSH
14676: LD_INT 31
14678: PUSH
14679: LD_INT 254
14681: PUSH
14682: LD_INT 114
14684: PUSH
14685: LD_INT 2
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: ST_TO_ADDR
// for i in blist do
14699: LD_ADDR_VAR 0 1
14703: PUSH
14704: LD_VAR 0 5
14708: PUSH
14709: FOR_IN
14710: IFFALSE 14759
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
14712: LD_VAR 0 2
14716: PPUSH
14717: LD_VAR 0 1
14721: PUSH
14722: LD_INT 1
14724: ARRAY
14725: PPUSH
14726: LD_VAR 0 1
14730: PUSH
14731: LD_INT 2
14733: ARRAY
14734: PPUSH
14735: LD_VAR 0 1
14739: PUSH
14740: LD_INT 3
14742: ARRAY
14743: PPUSH
14744: LD_VAR 0 1
14748: PUSH
14749: LD_INT 4
14751: ARRAY
14752: PPUSH
14753: CALL_OW 205
14757: GO 14709
14759: POP
14760: POP
// repeat wait ( 0 0$01 ) ;
14761: LD_INT 35
14763: PPUSH
14764: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
14768: LD_INT 22
14770: PUSH
14771: LD_INT 4
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 30
14780: PUSH
14781: LD_INT 4
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: LD_INT 3
14790: PUSH
14791: LD_INT 57
14793: PUSH
14794: EMPTY
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: PPUSH
14806: CALL_OW 69
14810: IFFALSE 14761
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14812: LD_VAR 0 3
14816: PPUSH
14817: LD_INT 22
14819: PUSH
14820: LD_INT 4
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: LD_INT 30
14829: PUSH
14830: LD_INT 4
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PPUSH
14841: CALL_OW 69
14845: PUSH
14846: LD_INT 1
14848: ARRAY
14849: PPUSH
14850: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
14854: LD_VAR 0 3
14858: PPUSH
14859: LD_INT 1
14861: PPUSH
14862: CALL_OW 183
// if has_eng > 1 then
14866: LD_VAR 0 2
14870: PUSH
14871: LD_INT 1
14873: GREATER
14874: IFFALSE 15016
// for i = has_eng downto 2 do
14876: LD_ADDR_VAR 0 1
14880: PUSH
14881: DOUBLE
14882: LD_VAR 0 2
14886: INC
14887: ST_TO_ADDR
14888: LD_INT 2
14890: PUSH
14891: FOR_DOWNTO
14892: IFFALSE 15014
// begin if IsInUnit ( has_eng [ i ] ) then
14894: LD_VAR 0 2
14898: PUSH
14899: LD_VAR 0 1
14903: ARRAY
14904: PPUSH
14905: CALL_OW 310
14909: IFFALSE 14926
// ComExitBuilding ( has_eng [ i ] ) ;
14911: LD_VAR 0 2
14915: PUSH
14916: LD_VAR 0 1
14920: ARRAY
14921: PPUSH
14922: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14926: LD_VAR 0 2
14930: PUSH
14931: LD_VAR 0 1
14935: ARRAY
14936: PPUSH
14937: LD_INT 22
14939: PUSH
14940: LD_INT 4
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 30
14949: PUSH
14950: LD_INT 4
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PPUSH
14961: CALL_OW 69
14965: PUSH
14966: LD_INT 1
14968: ARRAY
14969: PPUSH
14970: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
14974: LD_VAR 0 2
14978: PUSH
14979: LD_VAR 0 1
14983: ARRAY
14984: PPUSH
14985: LD_INT 1
14987: PPUSH
14988: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
14992: LD_ADDR_VAR 0 2
14996: PUSH
14997: LD_VAR 0 2
15001: PPUSH
15002: LD_VAR 0 1
15006: PPUSH
15007: CALL_OW 3
15011: ST_TO_ADDR
// end ;
15012: GO 14891
15014: POP
15015: POP
// repeat wait ( 0 0$01 ) ;
15016: LD_INT 35
15018: PPUSH
15019: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15023: LD_INT 22
15025: PUSH
15026: LD_INT 4
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: PUSH
15033: LD_INT 30
15035: PUSH
15036: LD_INT 31
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 3
15045: PUSH
15046: LD_INT 57
15048: PUSH
15049: EMPTY
15050: LIST
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: LIST
15060: PPUSH
15061: CALL_OW 69
15065: PUSH
15066: LD_INT 1
15068: GREATER
15069: IFFALSE 15016
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15071: LD_ADDR_VAR 0 8
15075: PUSH
15076: LD_EXP 6
15080: PPUSH
15081: LD_INT 25
15083: PUSH
15084: LD_INT 1
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PPUSH
15091: CALL_OW 72
15095: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15096: LD_ADDR_VAR 0 1
15100: PUSH
15101: DOUBLE
15102: LD_INT 1
15104: DEC
15105: ST_TO_ADDR
15106: LD_INT 22
15108: PUSH
15109: LD_INT 4
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: PUSH
15116: LD_INT 30
15118: PUSH
15119: LD_INT 31
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 3
15128: PUSH
15129: LD_INT 57
15131: PUSH
15132: EMPTY
15133: LIST
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: LIST
15143: PPUSH
15144: CALL_OW 69
15148: PUSH
15149: FOR_TO
15150: IFFALSE 15234
// begin if not sol [ i ] then
15152: LD_VAR 0 8
15156: PUSH
15157: LD_VAR 0 1
15161: ARRAY
15162: NOT
15163: IFFALSE 15167
// break ;
15165: GO 15234
// ComExitBuilding ( sol [ i ] ) ;
15167: LD_VAR 0 8
15171: PUSH
15172: LD_VAR 0 1
15176: ARRAY
15177: PPUSH
15178: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15182: LD_VAR 0 8
15186: PUSH
15187: LD_VAR 0 1
15191: ARRAY
15192: PPUSH
15193: LD_INT 22
15195: PUSH
15196: LD_INT 4
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: LD_INT 30
15205: PUSH
15206: LD_INT 31
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PPUSH
15217: CALL_OW 69
15221: PUSH
15222: LD_VAR 0 1
15226: ARRAY
15227: PPUSH
15228: CALL_OW 180
// end ;
15232: GO 15149
15234: POP
15235: POP
// if sol > 3 then
15236: LD_VAR 0 8
15240: PUSH
15241: LD_INT 3
15243: GREATER
15244: IFFALSE 15361
// begin ComExitBuilding ( sol [ 3 ] ) ;
15246: LD_VAR 0 8
15250: PUSH
15251: LD_INT 3
15253: ARRAY
15254: PPUSH
15255: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15259: LD_VAR 0 8
15263: PUSH
15264: LD_INT 3
15266: ARRAY
15267: PPUSH
15268: LD_INT 246
15270: PPUSH
15271: LD_INT 94
15273: PPUSH
15274: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15278: LD_VAR 0 8
15282: PUSH
15283: LD_INT 3
15285: ARRAY
15286: PPUSH
15287: LD_INT 175
15289: PPUSH
15290: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15294: LD_VAR 0 8
15298: PUSH
15299: LD_INT 3
15301: ARRAY
15302: PPUSH
15303: LD_INT 224
15305: PPUSH
15306: LD_INT 90
15308: PPUSH
15309: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15313: LD_VAR 0 8
15317: PUSH
15318: LD_INT 3
15320: ARRAY
15321: PPUSH
15322: LD_INT 245
15324: PPUSH
15325: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15329: LD_VAR 0 8
15333: PUSH
15334: LD_INT 3
15336: ARRAY
15337: PPUSH
15338: LD_INT 223
15340: PPUSH
15341: LD_INT 110
15343: PPUSH
15344: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15348: LD_VAR 0 8
15352: PUSH
15353: LD_INT 3
15355: ARRAY
15356: PPUSH
15357: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15361: LD_VAR 0 2
15365: PPUSH
15366: LD_VAR 0 4
15370: PPUSH
15371: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15375: LD_INT 22
15377: PUSH
15378: LD_INT 4
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 30
15387: PUSH
15388: LD_INT 4
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PPUSH
15399: CALL_OW 69
15403: PUSH
15404: LD_INT 1
15406: ARRAY
15407: PPUSH
15408: CALL_OW 313
15412: PUSH
15413: LD_INT 6
15415: LESS
15416: IFFALSE 15480
// begin if IsInUnit ( Cornel ) then
15418: LD_EXP 44
15422: PPUSH
15423: CALL_OW 310
15427: IFFALSE 15438
// ComExitBuilding ( Cornel ) ;
15429: LD_EXP 44
15433: PPUSH
15434: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15438: LD_EXP 44
15442: PPUSH
15443: LD_INT 22
15445: PUSH
15446: LD_INT 4
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 30
15455: PUSH
15456: LD_INT 4
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PPUSH
15467: CALL_OW 69
15471: PUSH
15472: LD_INT 1
15474: ARRAY
15475: PPUSH
15476: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15480: LD_INT 35
15482: PPUSH
15483: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15487: LD_ADDR_VAR 0 3
15491: PUSH
15492: LD_INT 22
15494: PUSH
15495: LD_INT 4
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: LD_INT 21
15504: PUSH
15505: LD_INT 3
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 3
15514: PUSH
15515: LD_INT 24
15517: PUSH
15518: LD_INT 1000
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: LIST
15533: PPUSH
15534: CALL_OW 69
15538: ST_TO_ADDR
// if filter and has_eng then
15539: LD_VAR 0 3
15543: PUSH
15544: LD_VAR 0 2
15548: AND
15549: IFFALSE 15615
// begin for i in has_eng do
15551: LD_ADDR_VAR 0 1
15555: PUSH
15556: LD_VAR 0 2
15560: PUSH
15561: FOR_IN
15562: IFFALSE 15611
// begin if IsInUnit ( i ) then
15564: LD_VAR 0 1
15568: PPUSH
15569: CALL_OW 310
15573: IFFALSE 15584
// ComExitBuilding ( i ) ;
15575: LD_VAR 0 1
15579: PPUSH
15580: CALL_OW 122
// Wait ( 3 ) ;
15584: LD_INT 3
15586: PPUSH
15587: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
15591: LD_VAR 0 1
15595: PPUSH
15596: LD_VAR 0 3
15600: PUSH
15601: LD_INT 1
15603: ARRAY
15604: PPUSH
15605: CALL_OW 130
// end ;
15609: GO 15561
15611: POP
15612: POP
// end else
15613: GO 15669
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
15615: LD_VAR 0 2
15619: PUSH
15620: LD_VAR 0 2
15624: PPUSH
15625: LD_INT 56
15627: PUSH
15628: EMPTY
15629: LIST
15630: PPUSH
15631: CALL_OW 72
15635: AND
15636: IFFALSE 15669
// for i in has_eng do
15638: LD_ADDR_VAR 0 1
15642: PUSH
15643: LD_VAR 0 2
15647: PUSH
15648: FOR_IN
15649: IFFALSE 15667
// ComEnterUnit ( i , dep ) ;
15651: LD_VAR 0 1
15655: PPUSH
15656: LD_VAR 0 4
15660: PPUSH
15661: CALL_OW 120
15665: GO 15648
15667: POP
15668: POP
// until cornel_prepared ;
15669: LD_EXP 11
15673: IFFALSE 15480
// end ;
15675: PPOPN 8
15677: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
15678: LD_EXP 11
15682: IFFALSE 16081
15684: GO 15686
15686: DISABLE
15687: LD_INT 0
15689: PPUSH
15690: PPUSH
15691: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
15692: LD_ADDR_VAR 0 2
15696: PUSH
15697: LD_INT 22
15699: PUSH
15700: LD_INT 4
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 30
15709: PUSH
15710: LD_INT 4
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PPUSH
15721: CALL_OW 69
15725: PUSH
15726: LD_INT 1
15728: ARRAY
15729: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
15730: LD_EXP 6
15734: PPUSH
15735: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
15739: LD_EXP 45
15743: PUSH
15744: LD_EXP 45
15748: PPUSH
15749: CALL_OW 310
15753: AND
15754: IFFALSE 15765
// ComExitBuilding ( Bierezov ) ;
15756: LD_EXP 45
15760: PPUSH
15761: CALL_OW 122
// Wait ( 0 0$03 ) ;
15765: LD_INT 105
15767: PPUSH
15768: CALL_OW 67
// for i in cornel_units do
15772: LD_ADDR_VAR 0 1
15776: PUSH
15777: LD_EXP 6
15781: PUSH
15782: FOR_IN
15783: IFFALSE 15859
// begin if GetClass ( i ) in [ 2 , 3 ] then
15785: LD_VAR 0 1
15789: PPUSH
15790: CALL_OW 257
15794: PUSH
15795: LD_INT 2
15797: PUSH
15798: LD_INT 3
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: IN
15805: IFFALSE 15842
// begin ComEnterUnit ( i , arm ) ;
15807: LD_VAR 0 1
15811: PPUSH
15812: LD_VAR 0 2
15816: PPUSH
15817: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
15821: LD_VAR 0 1
15825: PPUSH
15826: LD_INT 1
15828: PPUSH
15829: CALL_OW 183
// AddComExitBuilding ( i ) ;
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
15842: LD_VAR 0 1
15846: PPUSH
15847: LD_INT 257
15849: PPUSH
15850: LD_INT 121
15852: PPUSH
15853: CALL_OW 171
// end ;
15857: GO 15782
15859: POP
15860: POP
// Wait ( 1 1$00 ) ;
15861: LD_INT 2100
15863: PPUSH
15864: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
15868: LD_ADDR_VAR 0 3
15872: PUSH
15873: LD_EXP 44
15877: PUSH
15878: LD_EXP 45
15882: ADD
15883: PUSH
15884: LD_EXP 6
15888: ADD
15889: PUSH
15890: LD_EXP 6
15894: PPUSH
15895: LD_INT 21
15897: PUSH
15898: LD_INT 2
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PPUSH
15905: CALL_OW 72
15909: DIFF
15910: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
15911: LD_VAR 0 3
15915: PPUSH
15916: LD_INT 248
15918: PPUSH
15919: LD_INT 85
15921: PPUSH
15922: CALL_OW 111
// AddComHold ( filter ) ;
15926: LD_VAR 0 3
15930: PPUSH
15931: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
15935: LD_INT 35
15937: PPUSH
15938: CALL_OW 67
// until cornel_attack ;
15942: LD_EXP 9
15946: IFFALSE 15935
// ComAgressiveMove ( filter , 209 , 63 ) ;
15948: LD_VAR 0 3
15952: PPUSH
15953: LD_INT 209
15955: PPUSH
15956: LD_INT 63
15958: PPUSH
15959: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
15963: LD_EXP 44
15967: PPUSH
15968: LD_INT 208
15970: PPUSH
15971: LD_INT 62
15973: PPUSH
15974: CALL_OW 114
// AddComHold ( Cornel ) ;
15978: LD_EXP 44
15982: PPUSH
15983: CALL_OW 200
// if Bierezov then
15987: LD_EXP 45
15991: IFFALSE 16081
// begin filter := filter diff Bierezov ;
15993: LD_ADDR_VAR 0 3
15997: PUSH
15998: LD_VAR 0 3
16002: PUSH
16003: LD_EXP 45
16007: DIFF
16008: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16009: LD_EXP 45
16013: PPUSH
16014: LD_INT 6
16016: PPUSH
16017: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16021: LD_EXP 45
16025: PPUSH
16026: LD_INT 235
16028: PPUSH
16029: LD_INT 60
16031: PPUSH
16032: CALL_OW 111
// AddComHold ( Bierezov ) ;
16036: LD_EXP 45
16040: PPUSH
16041: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16045: LD_EXP 45
16049: PPUSH
16050: LD_INT 350
16052: PPUSH
16053: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16057: LD_EXP 45
16061: PPUSH
16062: LD_INT 198
16064: PPUSH
16065: LD_INT 28
16067: PPUSH
16068: CALL_OW 171
// AddComHold ( Bierezov ) ;
16072: LD_EXP 45
16076: PPUSH
16077: CALL_OW 200
// end ; end ; end_of_file
16081: PPOPN 3
16083: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16084: LD_EXP 53
16088: PUSH
16089: LD_EXP 31
16093: NOT
16094: AND
16095: PUSH
16096: LD_EXP 32
16100: NOT
16101: AND
16102: IFFALSE 16552
16104: GO 16106
16106: DISABLE
16107: LD_INT 0
16109: PPUSH
16110: PPUSH
16111: PPUSH
16112: PPUSH
// begin enable ;
16113: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16114: LD_ADDR_VAR 0 4
16118: PUSH
16119: LD_INT 81
16121: PUSH
16122: LD_INT 3
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PPUSH
16129: CALL_OW 69
16133: ST_TO_ADDR
// for i = 1 to ru_patrol do
16134: LD_ADDR_VAR 0 2
16138: PUSH
16139: DOUBLE
16140: LD_INT 1
16142: DEC
16143: ST_TO_ADDR
16144: LD_EXP 53
16148: PUSH
16149: FOR_TO
16150: IFFALSE 16550
// begin un := ru_patrol [ i ] ;
16152: LD_ADDR_VAR 0 1
16156: PUSH
16157: LD_EXP 53
16161: PUSH
16162: LD_VAR 0 2
16166: ARRAY
16167: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16168: LD_VAR 0 1
16172: PPUSH
16173: LD_INT 13
16175: PPUSH
16176: CALL_OW 308
16180: IFFALSE 16285
// begin if not ru_alert then
16182: LD_EXP 60
16186: NOT
16187: IFFALSE 16197
// ru_alert := true ;
16189: LD_ADDR_EXP 60
16193: PUSH
16194: LD_INT 1
16196: ST_TO_ADDR
// if not See ( 1 , un ) then
16197: LD_INT 1
16199: PPUSH
16200: LD_VAR 0 1
16204: PPUSH
16205: CALL_OW 292
16209: NOT
16210: IFFALSE 16224
// SetLives ( un , 1000 ) ;
16212: LD_VAR 0 1
16216: PPUSH
16217: LD_INT 1000
16219: PPUSH
16220: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16224: LD_ADDR_EXP 53
16228: PUSH
16229: LD_EXP 53
16233: PUSH
16234: LD_VAR 0 1
16238: DIFF
16239: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16240: LD_VAR 0 1
16244: PPUSH
16245: LD_INT 22
16247: PUSH
16248: LD_INT 3
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: LD_INT 30
16257: PUSH
16258: LD_INT 4
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PPUSH
16269: CALL_OW 69
16273: PPUSH
16274: CALL 1007 0 1
16278: PPUSH
16279: CALL_OW 120
// continue ;
16283: GO 16149
// end ; if IsOk ( un ) and not HasTask ( un ) then
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 302
16294: PUSH
16295: LD_VAR 0 1
16299: PPUSH
16300: CALL_OW 314
16304: NOT
16305: AND
16306: IFFALSE 16399
// begin for j = 1 to ru_firepoints_south [ i ] do
16308: LD_ADDR_VAR 0 3
16312: PUSH
16313: DOUBLE
16314: LD_INT 1
16316: DEC
16317: ST_TO_ADDR
16318: LD_EXP 59
16322: PUSH
16323: LD_VAR 0 2
16327: ARRAY
16328: PUSH
16329: FOR_TO
16330: IFFALSE 16397
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16332: LD_VAR 0 1
16336: PPUSH
16337: LD_EXP 59
16341: PUSH
16342: LD_VAR 0 2
16346: ARRAY
16347: PUSH
16348: LD_VAR 0 3
16352: ARRAY
16353: PUSH
16354: LD_INT 1
16356: ARRAY
16357: PPUSH
16358: LD_EXP 59
16362: PUSH
16363: LD_VAR 0 2
16367: ARRAY
16368: PUSH
16369: LD_VAR 0 3
16373: ARRAY
16374: PUSH
16375: LD_INT 2
16377: ARRAY
16378: PPUSH
16379: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16383: LD_VAR 0 1
16387: PPUSH
16388: LD_INT 70
16390: PPUSH
16391: CALL_OW 202
// end ;
16395: GO 16329
16397: POP
16398: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16399: LD_VAR 0 1
16403: PPUSH
16404: CALL_OW 256
16408: PUSH
16409: LD_INT 700
16411: LESS
16412: PUSH
16413: LD_VAR 0 1
16417: PPUSH
16418: LD_INT 13
16420: PPUSH
16421: CALL_OW 308
16425: NOT
16426: AND
16427: IFFALSE 16479
// begin ComMoveToArea ( un , retreatArea ) ;
16429: LD_VAR 0 1
16433: PPUSH
16434: LD_INT 13
16436: PPUSH
16437: CALL_OW 113
// if not ru_alert_xy then
16441: LD_EXP 61
16445: NOT
16446: IFFALSE 16477
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16448: LD_ADDR_EXP 61
16452: PUSH
16453: LD_VAR 0 1
16457: PPUSH
16458: CALL_OW 250
16462: PUSH
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL_OW 251
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: ST_TO_ADDR
// end else
16477: GO 16548
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16479: LD_VAR 0 1
16483: PPUSH
16484: LD_VAR 0 4
16488: PPUSH
16489: LD_VAR 0 1
16493: PPUSH
16494: CALL_OW 74
16498: PPUSH
16499: CALL_OW 296
16503: PUSH
16504: LD_INT 9
16506: LESS
16507: PUSH
16508: LD_VAR 0 1
16512: PPUSH
16513: CALL_OW 256
16517: PUSH
16518: LD_INT 500
16520: GREATER
16521: AND
16522: IFFALSE 16548
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
16524: LD_VAR 0 1
16528: PPUSH
16529: LD_VAR 0 4
16533: PPUSH
16534: LD_VAR 0 1
16538: PPUSH
16539: CALL_OW 74
16543: PPUSH
16544: CALL_OW 115
// end ;
16548: GO 16149
16550: POP
16551: POP
// end ;
16552: PPOPN 4
16554: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
16555: LD_EXP 60
16559: PUSH
16560: LD_EXP 61
16564: AND
16565: PUSH
16566: LD_EXP 31
16570: NOT
16571: AND
16572: PUSH
16573: LD_EXP 32
16577: NOT
16578: AND
16579: IFFALSE 16789
16581: GO 16583
16583: DISABLE
16584: LD_INT 0
16586: PPUSH
16587: PPUSH
// begin enable ;
16588: ENABLE
// if not ru_vehicles then
16589: LD_EXP 56
16593: NOT
16594: IFFALSE 16598
// exit ;
16596: GO 16789
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16598: LD_ADDR_VAR 0 2
16602: PUSH
16603: LD_INT 81
16605: PUSH
16606: LD_INT 3
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PPUSH
16613: CALL_OW 69
16617: ST_TO_ADDR
// if ru_vehicles then
16618: LD_EXP 56
16622: IFFALSE 16789
// begin for i in ru_vehicles do
16624: LD_ADDR_VAR 0 1
16628: PUSH
16629: LD_EXP 56
16633: PUSH
16634: FOR_IN
16635: IFFALSE 16787
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL_OW 302
16646: PUSH
16647: LD_VAR 0 1
16651: PPUSH
16652: LD_VAR 0 2
16656: PPUSH
16657: LD_VAR 0 1
16661: PPUSH
16662: CALL_OW 74
16666: PPUSH
16667: CALL_OW 296
16671: PUSH
16672: LD_INT 9
16674: LESS
16675: AND
16676: IFFALSE 16702
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
16678: LD_VAR 0 1
16682: PPUSH
16683: LD_VAR 0 2
16687: PPUSH
16688: LD_VAR 0 1
16692: PPUSH
16693: CALL_OW 74
16697: PPUSH
16698: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
16702: LD_VAR 0 1
16706: PPUSH
16707: CALL_OW 314
16711: NOT
16712: PUSH
16713: LD_VAR 0 1
16717: PPUSH
16718: CALL_OW 302
16722: AND
16723: PUSH
16724: LD_VAR 0 1
16728: PPUSH
16729: LD_EXP 61
16733: PUSH
16734: LD_INT 1
16736: ARRAY
16737: PPUSH
16738: LD_EXP 61
16742: PUSH
16743: LD_INT 2
16745: ARRAY
16746: PPUSH
16747: CALL_OW 297
16751: PUSH
16752: LD_INT 10
16754: GREATER
16755: AND
16756: IFFALSE 16785
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
16758: LD_VAR 0 1
16762: PPUSH
16763: LD_EXP 61
16767: PUSH
16768: LD_INT 1
16770: ARRAY
16771: PPUSH
16772: LD_EXP 61
16776: PUSH
16777: LD_INT 2
16779: ARRAY
16780: PPUSH
16781: CALL_OW 114
// end ;
16785: GO 16634
16787: POP
16788: POP
// end ; end ;
16789: PPOPN 2
16791: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
16792: LD_EXP 61
16796: PUSH
16797: LD_EXP 60
16801: AND
16802: PUSH
16803: LD_INT 3
16805: PPUSH
16806: CALL_OW 463
16810: NOT
16811: AND
16812: PUSH
16813: LD_EXP 31
16817: NOT
16818: AND
16819: PUSH
16820: LD_EXP 32
16824: NOT
16825: AND
16826: IFFALSE 16921
16828: GO 16830
16830: DISABLE
16831: LD_INT 0
16833: PPUSH
// begin enable ;
16834: ENABLE
// ru_alert_xy := false ;
16835: LD_ADDR_EXP 61
16839: PUSH
16840: LD_INT 0
16842: ST_TO_ADDR
// ru_alert := false ;
16843: LD_ADDR_EXP 60
16847: PUSH
16848: LD_INT 0
16850: ST_TO_ADDR
// if ru_vehicles then
16851: LD_EXP 56
16855: IFFALSE 16921
// for i in ru_vehicles do
16857: LD_ADDR_VAR 0 1
16861: PUSH
16862: LD_EXP 56
16866: PUSH
16867: FOR_IN
16868: IFFALSE 16919
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
16870: LD_VAR 0 1
16874: PPUSH
16875: CALL_OW 302
16879: PUSH
16880: LD_VAR 0 1
16884: PPUSH
16885: LD_INT 89
16887: PPUSH
16888: LD_INT 36
16890: PPUSH
16891: CALL_OW 297
16895: PUSH
16896: LD_INT 10
16898: GREATER
16899: AND
16900: IFFALSE 16917
// ComMoveXY ( i , 89 , 36 ) ;
16902: LD_VAR 0 1
16906: PPUSH
16907: LD_INT 89
16909: PPUSH
16910: LD_INT 36
16912: PPUSH
16913: CALL_OW 111
16917: GO 16867
16919: POP
16920: POP
// end ;
16921: PPOPN 1
16923: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
16924: LD_EXP 55
16928: PUSH
16929: LD_EXP 31
16933: NOT
16934: AND
16935: PUSH
16936: LD_EXP 32
16940: NOT
16941: AND
16942: IFFALSE 17226
16944: GO 16946
16946: DISABLE
16947: LD_INT 0
16949: PPUSH
16950: PPUSH
16951: PPUSH
// begin enable ;
16952: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16953: LD_ADDR_VAR 0 3
16957: PUSH
16958: LD_INT 81
16960: PUSH
16961: LD_INT 3
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PPUSH
16968: CALL_OW 69
16972: ST_TO_ADDR
// for i = 1 to ru_forest do
16973: LD_ADDR_VAR 0 1
16977: PUSH
16978: DOUBLE
16979: LD_INT 1
16981: DEC
16982: ST_TO_ADDR
16983: LD_EXP 55
16987: PUSH
16988: FOR_TO
16989: IFFALSE 17224
// begin un := ru_forest [ i ] ;
16991: LD_ADDR_VAR 0 2
16995: PUSH
16996: LD_EXP 55
17000: PUSH
17001: LD_VAR 0 1
17005: ARRAY
17006: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17007: LD_VAR 0 2
17011: PPUSH
17012: LD_INT 13
17014: PPUSH
17015: CALL_OW 308
17019: IFFALSE 17109
// begin if not See ( 1 , un ) then
17021: LD_INT 1
17023: PPUSH
17024: LD_VAR 0 2
17028: PPUSH
17029: CALL_OW 292
17033: NOT
17034: IFFALSE 17048
// SetLives ( un , 1000 ) ;
17036: LD_VAR 0 2
17040: PPUSH
17041: LD_INT 1000
17043: PPUSH
17044: CALL_OW 234
// ru_forest := ru_forest diff un ;
17048: LD_ADDR_EXP 55
17052: PUSH
17053: LD_EXP 55
17057: PUSH
17058: LD_VAR 0 2
17062: DIFF
17063: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17064: LD_VAR 0 2
17068: PPUSH
17069: LD_INT 22
17071: PUSH
17072: LD_INT 3
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 30
17081: PUSH
17082: LD_INT 4
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PPUSH
17093: CALL_OW 69
17097: PPUSH
17098: CALL 1007 0 1
17102: PPUSH
17103: CALL_OW 120
// continue ;
17107: GO 16988
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17109: LD_VAR 0 2
17113: PPUSH
17114: CALL_OW 256
17118: PUSH
17119: LD_INT 700
17121: LESS
17122: PUSH
17123: LD_VAR 0 2
17127: PPUSH
17128: LD_INT 13
17130: PPUSH
17131: CALL_OW 308
17135: NOT
17136: AND
17137: IFFALSE 17153
// ComMoveToArea ( un , retreatArea ) else
17139: LD_VAR 0 2
17143: PPUSH
17144: LD_INT 13
17146: PPUSH
17147: CALL_OW 113
17151: GO 17222
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17153: LD_VAR 0 2
17157: PPUSH
17158: LD_VAR 0 3
17162: PPUSH
17163: LD_VAR 0 2
17167: PPUSH
17168: CALL_OW 74
17172: PPUSH
17173: CALL_OW 296
17177: PUSH
17178: LD_INT 9
17180: LESS
17181: PUSH
17182: LD_VAR 0 2
17186: PPUSH
17187: CALL_OW 256
17191: PUSH
17192: LD_INT 500
17194: GREATER
17195: AND
17196: IFFALSE 17222
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17198: LD_VAR 0 2
17202: PPUSH
17203: LD_VAR 0 3
17207: PPUSH
17208: LD_VAR 0 2
17212: PPUSH
17213: CALL_OW 74
17217: PPUSH
17218: CALL_OW 115
// end ;
17222: GO 16988
17224: POP
17225: POP
// end ;
17226: PPOPN 3
17228: END
// every 0 0$10 trigger not send_attack_on_cornel do var i , filter ;
17229: LD_EXP 32
17233: NOT
17234: IFFALSE 17355
17236: GO 17238
17238: DISABLE
17239: LD_INT 0
17241: PPUSH
17242: PPUSH
// begin enable ;
17243: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
17244: LD_ADDR_VAR 0 2
17248: PUSH
17249: LD_INT 22
17251: PUSH
17252: LD_INT 3
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 21
17261: PUSH
17262: LD_INT 3
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PPUSH
17273: CALL_OW 69
17277: ST_TO_ADDR
// if filter then
17278: LD_VAR 0 2
17282: IFFALSE 17355
// for i in filter do
17284: LD_ADDR_VAR 0 1
17288: PUSH
17289: LD_VAR 0 2
17293: PUSH
17294: FOR_IN
17295: IFFALSE 17353
// if GetLives ( i ) < 990 then
17297: LD_VAR 0 1
17301: PPUSH
17302: CALL_OW 256
17306: PUSH
17307: LD_INT 990
17309: LESS
17310: IFFALSE 17351
// begin ru_alert := true ;
17312: LD_ADDR_EXP 60
17316: PUSH
17317: LD_INT 1
17319: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17320: LD_ADDR_EXP 61
17324: PUSH
17325: LD_VAR 0 1
17329: PPUSH
17330: CALL_OW 250
17334: PUSH
17335: LD_VAR 0 1
17339: PPUSH
17340: CALL_OW 251
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: ST_TO_ADDR
// break ;
17349: GO 17353
// end ;
17351: GO 17294
17353: POP
17354: POP
// end ;
17355: PPOPN 2
17357: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17358: LD_EXP 31
17362: IFFALSE 17511
17364: GO 17366
17366: DISABLE
17367: LD_INT 0
17369: PPUSH
17370: PPUSH
17371: PPUSH
17372: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17373: LD_ADDR_VAR 0 4
17377: PUSH
17378: LD_EXP 56
17382: PUSH
17383: LD_EXP 55
17387: ADD
17388: PUSH
17389: LD_EXP 53
17393: ADD
17394: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17395: LD_ADDR_VAR 0 3
17399: PUSH
17400: LD_INT 3
17402: PPUSH
17403: LD_INT 81
17405: PUSH
17406: LD_INT 3
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PPUSH
17413: CALL_OW 70
17417: ST_TO_ADDR
// if filter and enemy then
17418: LD_VAR 0 4
17422: PUSH
17423: LD_VAR 0 3
17427: AND
17428: IFFALSE 17511
// repeat wait ( 0 0$01 ) ;
17430: LD_INT 35
17432: PPUSH
17433: CALL_OW 67
// for i in filter do
17437: LD_ADDR_VAR 0 1
17441: PUSH
17442: LD_VAR 0 4
17446: PUSH
17447: FOR_IN
17448: IFFALSE 17476
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17450: LD_VAR 0 1
17454: PPUSH
17455: LD_VAR 0 3
17459: PPUSH
17460: LD_VAR 0 1
17464: PPUSH
17465: CALL_OW 74
17469: PPUSH
17470: CALL_OW 115
// end ;
17474: GO 17447
17476: POP
17477: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
17478: LD_INT 3
17480: PPUSH
17481: LD_INT 81
17483: PUSH
17484: LD_INT 3
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PPUSH
17491: CALL_OW 70
17495: PUSH
17496: LD_INT 0
17498: EQUAL
17499: PUSH
17500: LD_VAR 0 4
17504: PUSH
17505: LD_INT 0
17507: EQUAL
17508: OR
17509: IFFALSE 17430
// end ;
17511: PPOPN 4
17513: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
17514: LD_EXP 26
17518: PUSH
17519: LD_INT 22
17521: PUSH
17522: LD_INT 4
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 30
17531: PUSH
17532: LD_INT 4
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 3
17541: PUSH
17542: LD_INT 57
17544: PUSH
17545: EMPTY
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: LIST
17556: PPUSH
17557: CALL_OW 69
17561: AND
17562: IFFALSE 17611
17564: GO 17566
17566: DISABLE
17567: LD_INT 0
17569: PPUSH
// begin if not ru_cornel_attack then
17570: LD_EXP 58
17574: NOT
17575: IFFALSE 17579
// exit ;
17577: GO 17611
// for i in ru_cornel_attack do
17579: LD_ADDR_VAR 0 1
17583: PUSH
17584: LD_EXP 58
17588: PUSH
17589: FOR_IN
17590: IFFALSE 17609
// ComAgressiveMove ( i , 258 , 119 ) ;
17592: LD_VAR 0 1
17596: PPUSH
17597: LD_INT 258
17599: PPUSH
17600: LD_INT 119
17602: PPUSH
17603: CALL_OW 114
17607: GO 17589
17609: POP
17610: POP
// end ; end_of_file
17611: PPOPN 1
17613: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
17614: LD_EXP 5
17618: PUSH
17619: LD_EXP 9
17623: NOT
17624: AND
17625: PUSH
17626: LD_EXP 20
17630: AND
17631: IFFALSE 17743
17633: GO 17635
17635: DISABLE
17636: LD_INT 0
17638: PPUSH
// begin enable ;
17639: ENABLE
// crates_counter := crates_counter - 50 ;
17640: LD_ADDR_EXP 20
17644: PUSH
17645: LD_EXP 20
17649: PUSH
17650: LD_INT 50
17652: MINUS
17653: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
17654: LD_INT 8
17656: PPUSH
17657: LD_INT 2
17659: PPUSH
17660: LD_INT 5
17662: PPUSH
17663: CALL_OW 12
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
17675: LD_INT 1785
17677: PPUSH
17678: LD_INT 2345
17680: PPUSH
17681: CALL_OW 12
17685: PPUSH
17686: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
17690: LD_ADDR_VAR 0 1
17694: PUSH
17695: LD_INT 1
17697: PPUSH
17698: LD_OWVAR 67
17702: PUSH
17703: LD_INT 2
17705: PLUS
17706: PPUSH
17707: CALL_OW 12
17711: ST_TO_ADDR
// if r < 3 then
17712: LD_VAR 0 1
17716: PUSH
17717: LD_INT 3
17719: LESS
17720: IFFALSE 17743
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
17722: LD_INT 4
17724: PPUSH
17725: LD_INT 1
17727: PPUSH
17728: LD_INT 5
17730: PPUSH
17731: CALL_OW 12
17735: PPUSH
17736: LD_INT 1
17738: PPUSH
17739: CALL_OW 55
// end ;
17743: PPOPN 1
17745: END
// every 0 0$01 trigger cornel_active do
17746: LD_EXP 8
17750: IFFALSE 17839
17752: GO 17754
17754: DISABLE
// begin Wait ( 0 0$03 ) ;
17755: LD_INT 105
17757: PPUSH
17758: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17762: LD_INT 2
17764: PPUSH
17765: LD_INT 5
17767: PPUSH
17768: CALL_OW 12
17772: PPUSH
17773: LD_INT 10
17775: PPUSH
17776: LD_INT 1
17778: PPUSH
17779: CALL_OW 55
// Wait ( 0 0$13 ) ;
17783: LD_INT 455
17785: PPUSH
17786: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17790: LD_INT 2
17792: PPUSH
17793: LD_INT 5
17795: PPUSH
17796: CALL_OW 12
17800: PPUSH
17801: LD_INT 10
17803: PPUSH
17804: LD_INT 1
17806: PPUSH
17807: CALL_OW 55
// Wait ( 0 0$16 ) ;
17811: LD_INT 560
17813: PPUSH
17814: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17818: LD_INT 2
17820: PPUSH
17821: LD_INT 5
17823: PPUSH
17824: CALL_OW 12
17828: PPUSH
17829: LD_INT 10
17831: PPUSH
17832: LD_INT 1
17834: PPUSH
17835: CALL_OW 55
// end ; end_of_file
17839: END
// every 0 0$01 trigger cornel_prepared do
17840: LD_EXP 11
17844: IFFALSE 17903
17846: GO 17848
17848: DISABLE
// begin enable ;
17849: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
17850: LD_ADDR_OWVAR 47
17854: PUSH
17855: LD_STRING #Am03-1
17857: PUSH
17858: LD_EXP 10
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
17867: LD_ADDR_EXP 10
17871: PUSH
17872: LD_EXP 10
17876: PPUSH
17877: LD_STRING -
17879: PPUSH
17880: CALL 1077 0 2
17884: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
17885: LD_EXP 10
17889: PUSH
17890: LD_INT 0
17892: EQUAL
17893: IFFALSE 17903
// begin Display_Strings := [ ] ;
17895: LD_ADDR_OWVAR 47
17899: PUSH
17900: EMPTY
17901: ST_TO_ADDR
// disable ;
17902: DISABLE
// end ; end ;
17903: END
// every 0 0$01 trigger debug and debug_strings do
17904: LD_EXP 1
17908: PUSH
17909: LD_OWVAR 48
17913: AND
17914: IFFALSE 17930
17916: GO 17918
17918: DISABLE
// begin enable ;
17919: ENABLE
// Display_Strings := debug_strings ;
17920: LD_ADDR_OWVAR 47
17924: PUSH
17925: LD_OWVAR 48
17929: ST_TO_ADDR
// end ; end_of_file
17930: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
17931: LD_VAR 0 1
17935: PPUSH
17936: LD_VAR 0 2
17940: PPUSH
17941: CALL 33233 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
17945: LD_VAR 0 1
17949: PPUSH
17950: CALL_OW 255
17954: PUSH
17955: LD_INT 1
17957: EQUAL
17958: PUSH
17959: LD_EXP 14
17963: NOT
17964: AND
17965: IFFALSE 17975
// solar_builded := true ;
17967: LD_ADDR_EXP 14
17971: PUSH
17972: LD_INT 1
17974: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
17975: LD_VAR 0 1
17979: PPUSH
17980: CALL_OW 255
17984: PUSH
17985: LD_INT 1
17987: EQUAL
17988: PUSH
17989: LD_EXP 29
17993: AND
17994: IFFALSE 18031
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
17996: LD_ADDR_EXP 29
18000: PUSH
18001: LD_EXP 29
18005: PUSH
18006: LD_INT 1750
18008: PUSH
18009: LD_INT 1400
18011: PUSH
18012: LD_INT 1225
18014: PUSH
18015: LD_INT 1050
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: PUSH
18024: LD_OWVAR 67
18028: ARRAY
18029: PLUS
18030: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18031: LD_VAR 0 1
18035: PPUSH
18036: CALL_OW 255
18040: PUSH
18041: LD_INT 3
18043: EQUAL
18044: IFFALSE 18062
// ru_vehicles := ru_vehicles ^ veh ;
18046: LD_ADDR_EXP 56
18050: PUSH
18051: LD_EXP 56
18055: PUSH
18056: LD_VAR 0 1
18060: ADD
18061: ST_TO_ADDR
// end ;
18062: PPOPN 2
18064: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18065: LD_VAR 0 1
18069: PPUSH
18070: CALL 33111 0 1
// if un in ru_patrol then
18074: LD_VAR 0 1
18078: PUSH
18079: LD_EXP 53
18083: IN
18084: IFFALSE 18102
// ru_patrol := ru_patrol diff un ;
18086: LD_ADDR_EXP 53
18090: PUSH
18091: LD_EXP 53
18095: PUSH
18096: LD_VAR 0 1
18100: DIFF
18101: ST_TO_ADDR
// if un in ru_forest then
18102: LD_VAR 0 1
18106: PUSH
18107: LD_EXP 55
18111: IN
18112: IFFALSE 18130
// ru_forest := ru_forest diff un ;
18114: LD_ADDR_EXP 55
18118: PUSH
18119: LD_EXP 55
18123: PUSH
18124: LD_VAR 0 1
18128: DIFF
18129: ST_TO_ADDR
// if un in ru_vehicles then
18130: LD_VAR 0 1
18134: PUSH
18135: LD_EXP 56
18139: IN
18140: IFFALSE 18246
// begin ru_vehicles := ru_vehicles diff un ;
18142: LD_ADDR_EXP 56
18146: PUSH
18147: LD_EXP 56
18151: PUSH
18152: LD_VAR 0 1
18156: DIFF
18157: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18158: LD_ADDR_EXP 57
18162: PUSH
18163: LD_EXP 57
18167: PUSH
18168: LD_VAR 0 1
18172: PPUSH
18173: CALL_OW 265
18177: PUSH
18178: LD_VAR 0 1
18182: PPUSH
18183: CALL_OW 262
18187: PUSH
18188: LD_VAR 0 1
18192: PPUSH
18193: CALL_OW 263
18197: PUSH
18198: LD_VAR 0 1
18202: PPUSH
18203: CALL_OW 264
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: ADD
18214: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18215: LD_ADDR_EXP 13
18219: PUSH
18220: LD_EXP 13
18224: PUSH
18225: LD_INT 1
18227: PLUS
18228: ST_TO_ADDR
// if ach_counter = 10 then
18229: LD_EXP 13
18233: PUSH
18234: LD_INT 10
18236: EQUAL
18237: IFFALSE 18246
// SetAchievement ( ACH_FAUST ) ;
18239: LD_STRING ACH_FAUST
18241: PPUSH
18242: CALL_OW 543
// end ; if un = Pokryshkin then
18246: LD_VAR 0 1
18250: PUSH
18251: LD_EXP 52
18255: EQUAL
18256: IFFALSE 18265
// SetAchievement ( ACH_POKR ) ;
18258: LD_STRING ACH_POKR
18260: PPUSH
18261: CALL_OW 543
// if un = JMM then
18265: LD_VAR 0 1
18269: PUSH
18270: LD_EXP 37
18274: EQUAL
18275: IFFALSE 18284
// YouLost ( 0 ) ;
18277: LD_STRING 0
18279: PPUSH
18280: CALL_OW 104
// if un = us_dep_west then
18284: LD_VAR 0 1
18288: PUSH
18289: LD_INT 1
18291: EQUAL
18292: IFFALSE 18301
// YouLost ( 2 ) ;
18294: LD_STRING 2
18296: PPUSH
18297: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18301: LD_VAR 0 1
18305: PPUSH
18306: CALL_OW 255
18310: PUSH
18311: LD_INT 8
18313: EQUAL
18314: PUSH
18315: LD_EXP 5
18319: NOT
18320: AND
18321: IFFALSE 18330
// YouLost ( 4 ) ;
18323: LD_STRING 4
18325: PPUSH
18326: CALL_OW 104
// if un in jmm_units then
18330: LD_VAR 0 1
18334: PUSH
18335: LD_EXP 4
18339: IN
18340: IFFALSE 18356
// lose_counter := lose_counter + 1 ;
18342: LD_ADDR_EXP 34
18346: PUSH
18347: LD_EXP 34
18351: PUSH
18352: LD_INT 1
18354: PLUS
18355: ST_TO_ADDR
// end ;
18356: PPOPN 1
18358: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18359: LD_INT 0
18361: PPUSH
18362: PPUSH
// begin if GetSide ( driver ) = 3 then
18363: LD_VAR 0 1
18367: PPUSH
18368: CALL_OW 255
18372: PUSH
18373: LD_INT 3
18375: EQUAL
18376: IFFALSE 18454
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18378: LD_ADDR_VAR 0 6
18382: PUSH
18383: LD_INT 22
18385: PUSH
18386: LD_INT 3
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 30
18395: PUSH
18396: LD_INT 3
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PPUSH
18407: CALL_OW 69
18411: PPUSH
18412: CALL 1007 0 1
18416: ST_TO_ADDR
// if place then
18417: LD_VAR 0 6
18421: IFFALSE 18439
// ComEnterUnit ( driver , place ) else
18423: LD_VAR 0 1
18427: PPUSH
18428: LD_VAR 0 6
18432: PPUSH
18433: CALL_OW 120
18437: GO 18454
// ComMoveXY ( driver , 70 , 22 ) ;
18439: LD_VAR 0 1
18443: PPUSH
18444: LD_INT 70
18446: PPUSH
18447: LD_INT 22
18449: PPUSH
18450: CALL_OW 111
// end ; end ;
18454: PPOPN 6
18456: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
18457: LD_VAR 0 1
18461: PUSH
18462: LD_INT 1
18464: EQUAL
18465: PUSH
18466: LD_VAR 0 2
18470: PUSH
18471: LD_INT 4
18473: EQUAL
18474: PUSH
18475: LD_VAR 0 2
18479: PUSH
18480: LD_INT 8
18482: EQUAL
18483: PUSH
18484: LD_EXP 5
18488: NOT
18489: AND
18490: OR
18491: AND
18492: IFFALSE 18501
// YouLost ( 5 ) ;
18494: LD_STRING 5
18496: PPUSH
18497: CALL_OW 104
// end ;
18501: PPOPN 2
18503: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
18504: LD_EXP 36
18508: PUSH
18509: LD_INT 22
18511: PUSH
18512: LD_INT 1
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 21
18521: PUSH
18522: LD_INT 1
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PPUSH
18533: CALL_OW 69
18537: PUSH
18538: LD_INT 22
18540: PUSH
18541: LD_INT 8
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 21
18550: PUSH
18551: LD_INT 1
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PPUSH
18562: CALL_OW 69
18566: ADD
18567: PLUS
18568: PUSH
18569: LD_INT 5
18571: LESS
18572: IFFALSE 18584
18574: GO 18576
18576: DISABLE
// YouLost ( 1 ) ;
18577: LD_STRING 1
18579: PPUSH
18580: CALL_OW 104
18584: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
18585: LD_INT 1
18587: PPUSH
18588: CALL_OW 255
18592: PUSH
18593: LD_INT 3
18595: EQUAL
18596: IFFALSE 18608
18598: GO 18600
18600: DISABLE
// YouLost ( 3 ) ; end_of_file
18601: LD_STRING 3
18603: PPUSH
18604: CALL_OW 104
18608: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18609: LD_INT 0
18611: PPUSH
// ar_miner := 81 ;
18612: LD_ADDR_EXP 69
18616: PUSH
18617: LD_INT 81
18619: ST_TO_ADDR
// ar_crane := 88 ;
18620: LD_ADDR_EXP 68
18624: PUSH
18625: LD_INT 88
18627: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18628: LD_ADDR_EXP 63
18632: PUSH
18633: LD_INT 89
18635: ST_TO_ADDR
// us_hack := 99 ;
18636: LD_ADDR_EXP 64
18640: PUSH
18641: LD_INT 99
18643: ST_TO_ADDR
// us_artillery := 97 ;
18644: LD_ADDR_EXP 65
18648: PUSH
18649: LD_INT 97
18651: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18652: LD_ADDR_EXP 66
18656: PUSH
18657: LD_INT 91
18659: ST_TO_ADDR
// ar_mortar := 92 ;
18660: LD_ADDR_EXP 67
18664: PUSH
18665: LD_INT 92
18667: ST_TO_ADDR
// ru_radar := 98 ;
18668: LD_ADDR_EXP 62
18672: PUSH
18673: LD_INT 98
18675: ST_TO_ADDR
// tech_Artillery := 80 ;
18676: LD_ADDR_EXP 70
18680: PUSH
18681: LD_INT 80
18683: ST_TO_ADDR
// tech_RadMat := 81 ;
18684: LD_ADDR_EXP 71
18688: PUSH
18689: LD_INT 81
18691: ST_TO_ADDR
// tech_BasicTools := 82 ;
18692: LD_ADDR_EXP 72
18696: PUSH
18697: LD_INT 82
18699: ST_TO_ADDR
// tech_Cargo := 83 ;
18700: LD_ADDR_EXP 73
18704: PUSH
18705: LD_INT 83
18707: ST_TO_ADDR
// tech_Track := 84 ;
18708: LD_ADDR_EXP 74
18712: PUSH
18713: LD_INT 84
18715: ST_TO_ADDR
// tech_Crane := 85 ;
18716: LD_ADDR_EXP 75
18720: PUSH
18721: LD_INT 85
18723: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18724: LD_ADDR_EXP 76
18728: PUSH
18729: LD_INT 86
18731: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18732: LD_ADDR_EXP 77
18736: PUSH
18737: LD_INT 87
18739: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18740: LD_ADDR_EXP 78
18744: PUSH
18745: LD_INT 88
18747: ST_TO_ADDR
// class_mastodont := 31 ;
18748: LD_ADDR_EXP 79
18752: PUSH
18753: LD_INT 31
18755: ST_TO_ADDR
// class_horse := 21 ;
18756: LD_ADDR_EXP 80
18760: PUSH
18761: LD_INT 21
18763: ST_TO_ADDR
// end ;
18764: LD_VAR 0 1
18768: RET
// every 1 do
18769: GO 18771
18771: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18772: CALL 18609 0 0
18776: END
// every 0 0$1 do
18777: GO 18779
18779: DISABLE
// begin enable ;
18780: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18781: LD_STRING updateTimer(
18783: PUSH
18784: LD_OWVAR 1
18788: STR
18789: PUSH
18790: LD_STRING );
18792: STR
18793: PPUSH
18794: CALL_OW 559
// end ;
18798: END
// export function SOS_MapStart ( ) ; begin
18799: LD_INT 0
18801: PPUSH
// if streamModeActive then
18802: LD_EXP 81
18806: IFFALSE 18815
// DefineStreamItems ( true ) ;
18808: LD_INT 1
18810: PPUSH
18811: CALL 20465 0 1
// UpdateFactoryWaypoints ( ) ;
18815: CALL 34049 0 0
// end ;
18819: LD_VAR 0 1
18823: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18824: LD_INT 0
18826: PPUSH
// if p2 = 100 then
18827: LD_VAR 0 2
18831: PUSH
18832: LD_INT 100
18834: EQUAL
18835: IFFALSE 19838
// begin if not StreamModeActive then
18837: LD_EXP 81
18841: NOT
18842: IFFALSE 18852
// StreamModeActive := true ;
18844: LD_ADDR_EXP 81
18848: PUSH
18849: LD_INT 1
18851: ST_TO_ADDR
// if p3 = 0 then
18852: LD_VAR 0 3
18856: PUSH
18857: LD_INT 0
18859: EQUAL
18860: IFFALSE 18866
// InitStreamMode ;
18862: CALL 20001 0 0
// if p3 = 1 then
18866: LD_VAR 0 3
18870: PUSH
18871: LD_INT 1
18873: EQUAL
18874: IFFALSE 18884
// sRocket := true ;
18876: LD_ADDR_EXP 86
18880: PUSH
18881: LD_INT 1
18883: ST_TO_ADDR
// if p3 = 2 then
18884: LD_VAR 0 3
18888: PUSH
18889: LD_INT 2
18891: EQUAL
18892: IFFALSE 18902
// sSpeed := true ;
18894: LD_ADDR_EXP 85
18898: PUSH
18899: LD_INT 1
18901: ST_TO_ADDR
// if p3 = 3 then
18902: LD_VAR 0 3
18906: PUSH
18907: LD_INT 3
18909: EQUAL
18910: IFFALSE 18920
// sEngine := true ;
18912: LD_ADDR_EXP 87
18916: PUSH
18917: LD_INT 1
18919: ST_TO_ADDR
// if p3 = 4 then
18920: LD_VAR 0 3
18924: PUSH
18925: LD_INT 4
18927: EQUAL
18928: IFFALSE 18938
// sSpec := true ;
18930: LD_ADDR_EXP 84
18934: PUSH
18935: LD_INT 1
18937: ST_TO_ADDR
// if p3 = 5 then
18938: LD_VAR 0 3
18942: PUSH
18943: LD_INT 5
18945: EQUAL
18946: IFFALSE 18956
// sLevel := true ;
18948: LD_ADDR_EXP 88
18952: PUSH
18953: LD_INT 1
18955: ST_TO_ADDR
// if p3 = 6 then
18956: LD_VAR 0 3
18960: PUSH
18961: LD_INT 6
18963: EQUAL
18964: IFFALSE 18974
// sArmoury := true ;
18966: LD_ADDR_EXP 89
18970: PUSH
18971: LD_INT 1
18973: ST_TO_ADDR
// if p3 = 7 then
18974: LD_VAR 0 3
18978: PUSH
18979: LD_INT 7
18981: EQUAL
18982: IFFALSE 18992
// sRadar := true ;
18984: LD_ADDR_EXP 90
18988: PUSH
18989: LD_INT 1
18991: ST_TO_ADDR
// if p3 = 8 then
18992: LD_VAR 0 3
18996: PUSH
18997: LD_INT 8
18999: EQUAL
19000: IFFALSE 19010
// sBunker := true ;
19002: LD_ADDR_EXP 91
19006: PUSH
19007: LD_INT 1
19009: ST_TO_ADDR
// if p3 = 9 then
19010: LD_VAR 0 3
19014: PUSH
19015: LD_INT 9
19017: EQUAL
19018: IFFALSE 19028
// sHack := true ;
19020: LD_ADDR_EXP 92
19024: PUSH
19025: LD_INT 1
19027: ST_TO_ADDR
// if p3 = 10 then
19028: LD_VAR 0 3
19032: PUSH
19033: LD_INT 10
19035: EQUAL
19036: IFFALSE 19046
// sFire := true ;
19038: LD_ADDR_EXP 93
19042: PUSH
19043: LD_INT 1
19045: ST_TO_ADDR
// if p3 = 11 then
19046: LD_VAR 0 3
19050: PUSH
19051: LD_INT 11
19053: EQUAL
19054: IFFALSE 19064
// sRefresh := true ;
19056: LD_ADDR_EXP 94
19060: PUSH
19061: LD_INT 1
19063: ST_TO_ADDR
// if p3 = 12 then
19064: LD_VAR 0 3
19068: PUSH
19069: LD_INT 12
19071: EQUAL
19072: IFFALSE 19082
// sExp := true ;
19074: LD_ADDR_EXP 95
19078: PUSH
19079: LD_INT 1
19081: ST_TO_ADDR
// if p3 = 13 then
19082: LD_VAR 0 3
19086: PUSH
19087: LD_INT 13
19089: EQUAL
19090: IFFALSE 19100
// sDepot := true ;
19092: LD_ADDR_EXP 96
19096: PUSH
19097: LD_INT 1
19099: ST_TO_ADDR
// if p3 = 14 then
19100: LD_VAR 0 3
19104: PUSH
19105: LD_INT 14
19107: EQUAL
19108: IFFALSE 19118
// sFlag := true ;
19110: LD_ADDR_EXP 97
19114: PUSH
19115: LD_INT 1
19117: ST_TO_ADDR
// if p3 = 15 then
19118: LD_VAR 0 3
19122: PUSH
19123: LD_INT 15
19125: EQUAL
19126: IFFALSE 19136
// sKamikadze := true ;
19128: LD_ADDR_EXP 105
19132: PUSH
19133: LD_INT 1
19135: ST_TO_ADDR
// if p3 = 16 then
19136: LD_VAR 0 3
19140: PUSH
19141: LD_INT 16
19143: EQUAL
19144: IFFALSE 19154
// sTroll := true ;
19146: LD_ADDR_EXP 106
19150: PUSH
19151: LD_INT 1
19153: ST_TO_ADDR
// if p3 = 17 then
19154: LD_VAR 0 3
19158: PUSH
19159: LD_INT 17
19161: EQUAL
19162: IFFALSE 19172
// sSlow := true ;
19164: LD_ADDR_EXP 107
19168: PUSH
19169: LD_INT 1
19171: ST_TO_ADDR
// if p3 = 18 then
19172: LD_VAR 0 3
19176: PUSH
19177: LD_INT 18
19179: EQUAL
19180: IFFALSE 19190
// sLack := true ;
19182: LD_ADDR_EXP 108
19186: PUSH
19187: LD_INT 1
19189: ST_TO_ADDR
// if p3 = 19 then
19190: LD_VAR 0 3
19194: PUSH
19195: LD_INT 19
19197: EQUAL
19198: IFFALSE 19208
// sTank := true ;
19200: LD_ADDR_EXP 110
19204: PUSH
19205: LD_INT 1
19207: ST_TO_ADDR
// if p3 = 20 then
19208: LD_VAR 0 3
19212: PUSH
19213: LD_INT 20
19215: EQUAL
19216: IFFALSE 19226
// sRemote := true ;
19218: LD_ADDR_EXP 111
19222: PUSH
19223: LD_INT 1
19225: ST_TO_ADDR
// if p3 = 21 then
19226: LD_VAR 0 3
19230: PUSH
19231: LD_INT 21
19233: EQUAL
19234: IFFALSE 19244
// sPowell := true ;
19236: LD_ADDR_EXP 112
19240: PUSH
19241: LD_INT 1
19243: ST_TO_ADDR
// if p3 = 22 then
19244: LD_VAR 0 3
19248: PUSH
19249: LD_INT 22
19251: EQUAL
19252: IFFALSE 19262
// sTeleport := true ;
19254: LD_ADDR_EXP 115
19258: PUSH
19259: LD_INT 1
19261: ST_TO_ADDR
// if p3 = 23 then
19262: LD_VAR 0 3
19266: PUSH
19267: LD_INT 23
19269: EQUAL
19270: IFFALSE 19280
// sOilTower := true ;
19272: LD_ADDR_EXP 117
19276: PUSH
19277: LD_INT 1
19279: ST_TO_ADDR
// if p3 = 24 then
19280: LD_VAR 0 3
19284: PUSH
19285: LD_INT 24
19287: EQUAL
19288: IFFALSE 19298
// sShovel := true ;
19290: LD_ADDR_EXP 118
19294: PUSH
19295: LD_INT 1
19297: ST_TO_ADDR
// if p3 = 25 then
19298: LD_VAR 0 3
19302: PUSH
19303: LD_INT 25
19305: EQUAL
19306: IFFALSE 19316
// sSheik := true ;
19308: LD_ADDR_EXP 119
19312: PUSH
19313: LD_INT 1
19315: ST_TO_ADDR
// if p3 = 26 then
19316: LD_VAR 0 3
19320: PUSH
19321: LD_INT 26
19323: EQUAL
19324: IFFALSE 19334
// sEarthquake := true ;
19326: LD_ADDR_EXP 121
19330: PUSH
19331: LD_INT 1
19333: ST_TO_ADDR
// if p3 = 27 then
19334: LD_VAR 0 3
19338: PUSH
19339: LD_INT 27
19341: EQUAL
19342: IFFALSE 19352
// sAI := true ;
19344: LD_ADDR_EXP 122
19348: PUSH
19349: LD_INT 1
19351: ST_TO_ADDR
// if p3 = 28 then
19352: LD_VAR 0 3
19356: PUSH
19357: LD_INT 28
19359: EQUAL
19360: IFFALSE 19370
// sCargo := true ;
19362: LD_ADDR_EXP 125
19366: PUSH
19367: LD_INT 1
19369: ST_TO_ADDR
// if p3 = 29 then
19370: LD_VAR 0 3
19374: PUSH
19375: LD_INT 29
19377: EQUAL
19378: IFFALSE 19388
// sDLaser := true ;
19380: LD_ADDR_EXP 126
19384: PUSH
19385: LD_INT 1
19387: ST_TO_ADDR
// if p3 = 30 then
19388: LD_VAR 0 3
19392: PUSH
19393: LD_INT 30
19395: EQUAL
19396: IFFALSE 19406
// sExchange := true ;
19398: LD_ADDR_EXP 127
19402: PUSH
19403: LD_INT 1
19405: ST_TO_ADDR
// if p3 = 31 then
19406: LD_VAR 0 3
19410: PUSH
19411: LD_INT 31
19413: EQUAL
19414: IFFALSE 19424
// sFac := true ;
19416: LD_ADDR_EXP 128
19420: PUSH
19421: LD_INT 1
19423: ST_TO_ADDR
// if p3 = 32 then
19424: LD_VAR 0 3
19428: PUSH
19429: LD_INT 32
19431: EQUAL
19432: IFFALSE 19442
// sPower := true ;
19434: LD_ADDR_EXP 129
19438: PUSH
19439: LD_INT 1
19441: ST_TO_ADDR
// if p3 = 33 then
19442: LD_VAR 0 3
19446: PUSH
19447: LD_INT 33
19449: EQUAL
19450: IFFALSE 19460
// sRandom := true ;
19452: LD_ADDR_EXP 130
19456: PUSH
19457: LD_INT 1
19459: ST_TO_ADDR
// if p3 = 34 then
19460: LD_VAR 0 3
19464: PUSH
19465: LD_INT 34
19467: EQUAL
19468: IFFALSE 19478
// sShield := true ;
19470: LD_ADDR_EXP 131
19474: PUSH
19475: LD_INT 1
19477: ST_TO_ADDR
// if p3 = 35 then
19478: LD_VAR 0 3
19482: PUSH
19483: LD_INT 35
19485: EQUAL
19486: IFFALSE 19496
// sTime := true ;
19488: LD_ADDR_EXP 132
19492: PUSH
19493: LD_INT 1
19495: ST_TO_ADDR
// if p3 = 36 then
19496: LD_VAR 0 3
19500: PUSH
19501: LD_INT 36
19503: EQUAL
19504: IFFALSE 19514
// sTools := true ;
19506: LD_ADDR_EXP 133
19510: PUSH
19511: LD_INT 1
19513: ST_TO_ADDR
// if p3 = 101 then
19514: LD_VAR 0 3
19518: PUSH
19519: LD_INT 101
19521: EQUAL
19522: IFFALSE 19532
// sSold := true ;
19524: LD_ADDR_EXP 98
19528: PUSH
19529: LD_INT 1
19531: ST_TO_ADDR
// if p3 = 102 then
19532: LD_VAR 0 3
19536: PUSH
19537: LD_INT 102
19539: EQUAL
19540: IFFALSE 19550
// sDiff := true ;
19542: LD_ADDR_EXP 99
19546: PUSH
19547: LD_INT 1
19549: ST_TO_ADDR
// if p3 = 103 then
19550: LD_VAR 0 3
19554: PUSH
19555: LD_INT 103
19557: EQUAL
19558: IFFALSE 19568
// sFog := true ;
19560: LD_ADDR_EXP 102
19564: PUSH
19565: LD_INT 1
19567: ST_TO_ADDR
// if p3 = 104 then
19568: LD_VAR 0 3
19572: PUSH
19573: LD_INT 104
19575: EQUAL
19576: IFFALSE 19586
// sReset := true ;
19578: LD_ADDR_EXP 103
19582: PUSH
19583: LD_INT 1
19585: ST_TO_ADDR
// if p3 = 105 then
19586: LD_VAR 0 3
19590: PUSH
19591: LD_INT 105
19593: EQUAL
19594: IFFALSE 19604
// sSun := true ;
19596: LD_ADDR_EXP 104
19600: PUSH
19601: LD_INT 1
19603: ST_TO_ADDR
// if p3 = 106 then
19604: LD_VAR 0 3
19608: PUSH
19609: LD_INT 106
19611: EQUAL
19612: IFFALSE 19622
// sTiger := true ;
19614: LD_ADDR_EXP 100
19618: PUSH
19619: LD_INT 1
19621: ST_TO_ADDR
// if p3 = 107 then
19622: LD_VAR 0 3
19626: PUSH
19627: LD_INT 107
19629: EQUAL
19630: IFFALSE 19640
// sBomb := true ;
19632: LD_ADDR_EXP 101
19636: PUSH
19637: LD_INT 1
19639: ST_TO_ADDR
// if p3 = 108 then
19640: LD_VAR 0 3
19644: PUSH
19645: LD_INT 108
19647: EQUAL
19648: IFFALSE 19658
// sWound := true ;
19650: LD_ADDR_EXP 109
19654: PUSH
19655: LD_INT 1
19657: ST_TO_ADDR
// if p3 = 109 then
19658: LD_VAR 0 3
19662: PUSH
19663: LD_INT 109
19665: EQUAL
19666: IFFALSE 19676
// sBetray := true ;
19668: LD_ADDR_EXP 113
19672: PUSH
19673: LD_INT 1
19675: ST_TO_ADDR
// if p3 = 110 then
19676: LD_VAR 0 3
19680: PUSH
19681: LD_INT 110
19683: EQUAL
19684: IFFALSE 19694
// sContamin := true ;
19686: LD_ADDR_EXP 114
19690: PUSH
19691: LD_INT 1
19693: ST_TO_ADDR
// if p3 = 111 then
19694: LD_VAR 0 3
19698: PUSH
19699: LD_INT 111
19701: EQUAL
19702: IFFALSE 19712
// sOil := true ;
19704: LD_ADDR_EXP 116
19708: PUSH
19709: LD_INT 1
19711: ST_TO_ADDR
// if p3 = 112 then
19712: LD_VAR 0 3
19716: PUSH
19717: LD_INT 112
19719: EQUAL
19720: IFFALSE 19730
// sStu := true ;
19722: LD_ADDR_EXP 120
19726: PUSH
19727: LD_INT 1
19729: ST_TO_ADDR
// if p3 = 113 then
19730: LD_VAR 0 3
19734: PUSH
19735: LD_INT 113
19737: EQUAL
19738: IFFALSE 19748
// sBazooka := true ;
19740: LD_ADDR_EXP 123
19744: PUSH
19745: LD_INT 1
19747: ST_TO_ADDR
// if p3 = 114 then
19748: LD_VAR 0 3
19752: PUSH
19753: LD_INT 114
19755: EQUAL
19756: IFFALSE 19766
// sMortar := true ;
19758: LD_ADDR_EXP 124
19762: PUSH
19763: LD_INT 1
19765: ST_TO_ADDR
// if p3 = 115 then
19766: LD_VAR 0 3
19770: PUSH
19771: LD_INT 115
19773: EQUAL
19774: IFFALSE 19784
// sRanger := true ;
19776: LD_ADDR_EXP 134
19780: PUSH
19781: LD_INT 1
19783: ST_TO_ADDR
// if p3 = 116 then
19784: LD_VAR 0 3
19788: PUSH
19789: LD_INT 116
19791: EQUAL
19792: IFFALSE 19802
// sComputer := true ;
19794: LD_ADDR_EXP 135
19798: PUSH
19799: LD_INT 1
19801: ST_TO_ADDR
// if p3 = 117 then
19802: LD_VAR 0 3
19806: PUSH
19807: LD_INT 117
19809: EQUAL
19810: IFFALSE 19820
// s30 := true ;
19812: LD_ADDR_EXP 136
19816: PUSH
19817: LD_INT 1
19819: ST_TO_ADDR
// if p3 = 118 then
19820: LD_VAR 0 3
19824: PUSH
19825: LD_INT 118
19827: EQUAL
19828: IFFALSE 19838
// s60 := true ;
19830: LD_ADDR_EXP 137
19834: PUSH
19835: LD_INT 1
19837: ST_TO_ADDR
// end ; if p2 = 101 then
19838: LD_VAR 0 2
19842: PUSH
19843: LD_INT 101
19845: EQUAL
19846: IFFALSE 19974
// begin case p3 of 1 :
19848: LD_VAR 0 3
19852: PUSH
19853: LD_INT 1
19855: DOUBLE
19856: EQUAL
19857: IFTRUE 19861
19859: GO 19868
19861: POP
// hHackUnlimitedResources ; 2 :
19862: CALL 32072 0 0
19866: GO 19974
19868: LD_INT 2
19870: DOUBLE
19871: EQUAL
19872: IFTRUE 19876
19874: GO 19883
19876: POP
// hHackSetLevel10 ; 3 :
19877: CALL 32205 0 0
19881: GO 19974
19883: LD_INT 3
19885: DOUBLE
19886: EQUAL
19887: IFTRUE 19891
19889: GO 19898
19891: POP
// hHackSetLevel10YourUnits ; 4 :
19892: CALL 32290 0 0
19896: GO 19974
19898: LD_INT 4
19900: DOUBLE
19901: EQUAL
19902: IFTRUE 19906
19904: GO 19913
19906: POP
// hHackInvincible ; 5 :
19907: CALL 32738 0 0
19911: GO 19974
19913: LD_INT 5
19915: DOUBLE
19916: EQUAL
19917: IFTRUE 19921
19919: GO 19928
19921: POP
// hHackInvisible ; 6 :
19922: CALL 32849 0 0
19926: GO 19974
19928: LD_INT 6
19930: DOUBLE
19931: EQUAL
19932: IFTRUE 19936
19934: GO 19943
19936: POP
// hHackChangeYourSide ; 7 :
19937: CALL 32906 0 0
19941: GO 19974
19943: LD_INT 7
19945: DOUBLE
19946: EQUAL
19947: IFTRUE 19951
19949: GO 19958
19951: POP
// hHackChangeUnitSide ; 8 :
19952: CALL 32948 0 0
19956: GO 19974
19958: LD_INT 8
19960: DOUBLE
19961: EQUAL
19962: IFTRUE 19966
19964: GO 19973
19966: POP
// hHackFog ; end ;
19967: CALL 33049 0 0
19971: GO 19974
19973: POP
// end ; end ;
19974: LD_VAR 0 7
19978: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19979: GO 19981
19981: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19982: LD_STRING initStreamRollete();
19984: PPUSH
19985: CALL_OW 559
// InitStreamMode ;
19989: CALL 20001 0 0
// DefineStreamItems ( false ) ;
19993: LD_INT 0
19995: PPUSH
19996: CALL 20465 0 1
// end ;
20000: END
// function InitStreamMode ; begin
20001: LD_INT 0
20003: PPUSH
// streamModeActive := false ;
20004: LD_ADDR_EXP 81
20008: PUSH
20009: LD_INT 0
20011: ST_TO_ADDR
// normalCounter := 36 ;
20012: LD_ADDR_EXP 82
20016: PUSH
20017: LD_INT 36
20019: ST_TO_ADDR
// hardcoreCounter := 18 ;
20020: LD_ADDR_EXP 83
20024: PUSH
20025: LD_INT 18
20027: ST_TO_ADDR
// sRocket := false ;
20028: LD_ADDR_EXP 86
20032: PUSH
20033: LD_INT 0
20035: ST_TO_ADDR
// sSpeed := false ;
20036: LD_ADDR_EXP 85
20040: PUSH
20041: LD_INT 0
20043: ST_TO_ADDR
// sEngine := false ;
20044: LD_ADDR_EXP 87
20048: PUSH
20049: LD_INT 0
20051: ST_TO_ADDR
// sSpec := false ;
20052: LD_ADDR_EXP 84
20056: PUSH
20057: LD_INT 0
20059: ST_TO_ADDR
// sLevel := false ;
20060: LD_ADDR_EXP 88
20064: PUSH
20065: LD_INT 0
20067: ST_TO_ADDR
// sArmoury := false ;
20068: LD_ADDR_EXP 89
20072: PUSH
20073: LD_INT 0
20075: ST_TO_ADDR
// sRadar := false ;
20076: LD_ADDR_EXP 90
20080: PUSH
20081: LD_INT 0
20083: ST_TO_ADDR
// sBunker := false ;
20084: LD_ADDR_EXP 91
20088: PUSH
20089: LD_INT 0
20091: ST_TO_ADDR
// sHack := false ;
20092: LD_ADDR_EXP 92
20096: PUSH
20097: LD_INT 0
20099: ST_TO_ADDR
// sFire := false ;
20100: LD_ADDR_EXP 93
20104: PUSH
20105: LD_INT 0
20107: ST_TO_ADDR
// sRefresh := false ;
20108: LD_ADDR_EXP 94
20112: PUSH
20113: LD_INT 0
20115: ST_TO_ADDR
// sExp := false ;
20116: LD_ADDR_EXP 95
20120: PUSH
20121: LD_INT 0
20123: ST_TO_ADDR
// sDepot := false ;
20124: LD_ADDR_EXP 96
20128: PUSH
20129: LD_INT 0
20131: ST_TO_ADDR
// sFlag := false ;
20132: LD_ADDR_EXP 97
20136: PUSH
20137: LD_INT 0
20139: ST_TO_ADDR
// sKamikadze := false ;
20140: LD_ADDR_EXP 105
20144: PUSH
20145: LD_INT 0
20147: ST_TO_ADDR
// sTroll := false ;
20148: LD_ADDR_EXP 106
20152: PUSH
20153: LD_INT 0
20155: ST_TO_ADDR
// sSlow := false ;
20156: LD_ADDR_EXP 107
20160: PUSH
20161: LD_INT 0
20163: ST_TO_ADDR
// sLack := false ;
20164: LD_ADDR_EXP 108
20168: PUSH
20169: LD_INT 0
20171: ST_TO_ADDR
// sTank := false ;
20172: LD_ADDR_EXP 110
20176: PUSH
20177: LD_INT 0
20179: ST_TO_ADDR
// sRemote := false ;
20180: LD_ADDR_EXP 111
20184: PUSH
20185: LD_INT 0
20187: ST_TO_ADDR
// sPowell := false ;
20188: LD_ADDR_EXP 112
20192: PUSH
20193: LD_INT 0
20195: ST_TO_ADDR
// sTeleport := false ;
20196: LD_ADDR_EXP 115
20200: PUSH
20201: LD_INT 0
20203: ST_TO_ADDR
// sOilTower := false ;
20204: LD_ADDR_EXP 117
20208: PUSH
20209: LD_INT 0
20211: ST_TO_ADDR
// sShovel := false ;
20212: LD_ADDR_EXP 118
20216: PUSH
20217: LD_INT 0
20219: ST_TO_ADDR
// sSheik := false ;
20220: LD_ADDR_EXP 119
20224: PUSH
20225: LD_INT 0
20227: ST_TO_ADDR
// sEarthquake := false ;
20228: LD_ADDR_EXP 121
20232: PUSH
20233: LD_INT 0
20235: ST_TO_ADDR
// sAI := false ;
20236: LD_ADDR_EXP 122
20240: PUSH
20241: LD_INT 0
20243: ST_TO_ADDR
// sCargo := false ;
20244: LD_ADDR_EXP 125
20248: PUSH
20249: LD_INT 0
20251: ST_TO_ADDR
// sDLaser := false ;
20252: LD_ADDR_EXP 126
20256: PUSH
20257: LD_INT 0
20259: ST_TO_ADDR
// sExchange := false ;
20260: LD_ADDR_EXP 127
20264: PUSH
20265: LD_INT 0
20267: ST_TO_ADDR
// sFac := false ;
20268: LD_ADDR_EXP 128
20272: PUSH
20273: LD_INT 0
20275: ST_TO_ADDR
// sPower := false ;
20276: LD_ADDR_EXP 129
20280: PUSH
20281: LD_INT 0
20283: ST_TO_ADDR
// sRandom := false ;
20284: LD_ADDR_EXP 130
20288: PUSH
20289: LD_INT 0
20291: ST_TO_ADDR
// sShield := false ;
20292: LD_ADDR_EXP 131
20296: PUSH
20297: LD_INT 0
20299: ST_TO_ADDR
// sTime := false ;
20300: LD_ADDR_EXP 132
20304: PUSH
20305: LD_INT 0
20307: ST_TO_ADDR
// sTools := false ;
20308: LD_ADDR_EXP 133
20312: PUSH
20313: LD_INT 0
20315: ST_TO_ADDR
// sSold := false ;
20316: LD_ADDR_EXP 98
20320: PUSH
20321: LD_INT 0
20323: ST_TO_ADDR
// sDiff := false ;
20324: LD_ADDR_EXP 99
20328: PUSH
20329: LD_INT 0
20331: ST_TO_ADDR
// sFog := false ;
20332: LD_ADDR_EXP 102
20336: PUSH
20337: LD_INT 0
20339: ST_TO_ADDR
// sReset := false ;
20340: LD_ADDR_EXP 103
20344: PUSH
20345: LD_INT 0
20347: ST_TO_ADDR
// sSun := false ;
20348: LD_ADDR_EXP 104
20352: PUSH
20353: LD_INT 0
20355: ST_TO_ADDR
// sTiger := false ;
20356: LD_ADDR_EXP 100
20360: PUSH
20361: LD_INT 0
20363: ST_TO_ADDR
// sBomb := false ;
20364: LD_ADDR_EXP 101
20368: PUSH
20369: LD_INT 0
20371: ST_TO_ADDR
// sWound := false ;
20372: LD_ADDR_EXP 109
20376: PUSH
20377: LD_INT 0
20379: ST_TO_ADDR
// sBetray := false ;
20380: LD_ADDR_EXP 113
20384: PUSH
20385: LD_INT 0
20387: ST_TO_ADDR
// sContamin := false ;
20388: LD_ADDR_EXP 114
20392: PUSH
20393: LD_INT 0
20395: ST_TO_ADDR
// sOil := false ;
20396: LD_ADDR_EXP 116
20400: PUSH
20401: LD_INT 0
20403: ST_TO_ADDR
// sStu := false ;
20404: LD_ADDR_EXP 120
20408: PUSH
20409: LD_INT 0
20411: ST_TO_ADDR
// sBazooka := false ;
20412: LD_ADDR_EXP 123
20416: PUSH
20417: LD_INT 0
20419: ST_TO_ADDR
// sMortar := false ;
20420: LD_ADDR_EXP 124
20424: PUSH
20425: LD_INT 0
20427: ST_TO_ADDR
// sRanger := false ;
20428: LD_ADDR_EXP 134
20432: PUSH
20433: LD_INT 0
20435: ST_TO_ADDR
// sComputer := false ;
20436: LD_ADDR_EXP 135
20440: PUSH
20441: LD_INT 0
20443: ST_TO_ADDR
// s30 := false ;
20444: LD_ADDR_EXP 136
20448: PUSH
20449: LD_INT 0
20451: ST_TO_ADDR
// s60 := false ;
20452: LD_ADDR_EXP 137
20456: PUSH
20457: LD_INT 0
20459: ST_TO_ADDR
// end ;
20460: LD_VAR 0 1
20464: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20465: LD_INT 0
20467: PPUSH
20468: PPUSH
20469: PPUSH
20470: PPUSH
20471: PPUSH
20472: PPUSH
20473: PPUSH
// result := [ ] ;
20474: LD_ADDR_VAR 0 2
20478: PUSH
20479: EMPTY
20480: ST_TO_ADDR
// if campaign_id = 1 then
20481: LD_OWVAR 69
20485: PUSH
20486: LD_INT 1
20488: EQUAL
20489: IFFALSE 23655
// begin case mission_number of 1 :
20491: LD_OWVAR 70
20495: PUSH
20496: LD_INT 1
20498: DOUBLE
20499: EQUAL
20500: IFTRUE 20504
20502: GO 20580
20504: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20505: LD_ADDR_VAR 0 2
20509: PUSH
20510: LD_INT 2
20512: PUSH
20513: LD_INT 4
20515: PUSH
20516: LD_INT 11
20518: PUSH
20519: LD_INT 12
20521: PUSH
20522: LD_INT 15
20524: PUSH
20525: LD_INT 16
20527: PUSH
20528: LD_INT 22
20530: PUSH
20531: LD_INT 23
20533: PUSH
20534: LD_INT 26
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 101
20550: PUSH
20551: LD_INT 102
20553: PUSH
20554: LD_INT 106
20556: PUSH
20557: LD_INT 116
20559: PUSH
20560: LD_INT 117
20562: PUSH
20563: LD_INT 118
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: ST_TO_ADDR
20578: GO 23653
20580: LD_INT 2
20582: DOUBLE
20583: EQUAL
20584: IFTRUE 20588
20586: GO 20672
20588: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20589: LD_ADDR_VAR 0 2
20593: PUSH
20594: LD_INT 2
20596: PUSH
20597: LD_INT 4
20599: PUSH
20600: LD_INT 11
20602: PUSH
20603: LD_INT 12
20605: PUSH
20606: LD_INT 15
20608: PUSH
20609: LD_INT 16
20611: PUSH
20612: LD_INT 22
20614: PUSH
20615: LD_INT 23
20617: PUSH
20618: LD_INT 26
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 101
20634: PUSH
20635: LD_INT 102
20637: PUSH
20638: LD_INT 105
20640: PUSH
20641: LD_INT 106
20643: PUSH
20644: LD_INT 108
20646: PUSH
20647: LD_INT 116
20649: PUSH
20650: LD_INT 117
20652: PUSH
20653: LD_INT 118
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: ST_TO_ADDR
20670: GO 23653
20672: LD_INT 3
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20768
20680: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20681: LD_ADDR_VAR 0 2
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: LD_INT 4
20691: PUSH
20692: LD_INT 5
20694: PUSH
20695: LD_INT 11
20697: PUSH
20698: LD_INT 12
20700: PUSH
20701: LD_INT 15
20703: PUSH
20704: LD_INT 16
20706: PUSH
20707: LD_INT 22
20709: PUSH
20710: LD_INT 26
20712: PUSH
20713: LD_INT 36
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 101
20730: PUSH
20731: LD_INT 102
20733: PUSH
20734: LD_INT 105
20736: PUSH
20737: LD_INT 106
20739: PUSH
20740: LD_INT 108
20742: PUSH
20743: LD_INT 116
20745: PUSH
20746: LD_INT 117
20748: PUSH
20749: LD_INT 118
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: ST_TO_ADDR
20766: GO 23653
20768: LD_INT 4
20770: DOUBLE
20771: EQUAL
20772: IFTRUE 20776
20774: GO 20872
20776: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20777: LD_ADDR_VAR 0 2
20781: PUSH
20782: LD_INT 2
20784: PUSH
20785: LD_INT 4
20787: PUSH
20788: LD_INT 5
20790: PUSH
20791: LD_INT 8
20793: PUSH
20794: LD_INT 11
20796: PUSH
20797: LD_INT 12
20799: PUSH
20800: LD_INT 15
20802: PUSH
20803: LD_INT 16
20805: PUSH
20806: LD_INT 22
20808: PUSH
20809: LD_INT 23
20811: PUSH
20812: LD_INT 26
20814: PUSH
20815: LD_INT 36
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 101
20834: PUSH
20835: LD_INT 102
20837: PUSH
20838: LD_INT 105
20840: PUSH
20841: LD_INT 106
20843: PUSH
20844: LD_INT 108
20846: PUSH
20847: LD_INT 116
20849: PUSH
20850: LD_INT 117
20852: PUSH
20853: LD_INT 118
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: ST_TO_ADDR
20870: GO 23653
20872: LD_INT 5
20874: DOUBLE
20875: EQUAL
20876: IFTRUE 20880
20878: GO 20992
20880: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20881: LD_ADDR_VAR 0 2
20885: PUSH
20886: LD_INT 2
20888: PUSH
20889: LD_INT 4
20891: PUSH
20892: LD_INT 5
20894: PUSH
20895: LD_INT 6
20897: PUSH
20898: LD_INT 8
20900: PUSH
20901: LD_INT 11
20903: PUSH
20904: LD_INT 12
20906: PUSH
20907: LD_INT 15
20909: PUSH
20910: LD_INT 16
20912: PUSH
20913: LD_INT 22
20915: PUSH
20916: LD_INT 23
20918: PUSH
20919: LD_INT 25
20921: PUSH
20922: LD_INT 26
20924: PUSH
20925: LD_INT 36
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 101
20946: PUSH
20947: LD_INT 102
20949: PUSH
20950: LD_INT 105
20952: PUSH
20953: LD_INT 106
20955: PUSH
20956: LD_INT 108
20958: PUSH
20959: LD_INT 109
20961: PUSH
20962: LD_INT 112
20964: PUSH
20965: LD_INT 116
20967: PUSH
20968: LD_INT 117
20970: PUSH
20971: LD_INT 118
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: ST_TO_ADDR
20990: GO 23653
20992: LD_INT 6
20994: DOUBLE
20995: EQUAL
20996: IFTRUE 21000
20998: GO 21132
21000: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21001: LD_ADDR_VAR 0 2
21005: PUSH
21006: LD_INT 2
21008: PUSH
21009: LD_INT 4
21011: PUSH
21012: LD_INT 5
21014: PUSH
21015: LD_INT 6
21017: PUSH
21018: LD_INT 8
21020: PUSH
21021: LD_INT 11
21023: PUSH
21024: LD_INT 12
21026: PUSH
21027: LD_INT 15
21029: PUSH
21030: LD_INT 16
21032: PUSH
21033: LD_INT 20
21035: PUSH
21036: LD_INT 21
21038: PUSH
21039: LD_INT 22
21041: PUSH
21042: LD_INT 23
21044: PUSH
21045: LD_INT 25
21047: PUSH
21048: LD_INT 26
21050: PUSH
21051: LD_INT 30
21053: PUSH
21054: LD_INT 31
21056: PUSH
21057: LD_INT 32
21059: PUSH
21060: LD_INT 36
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 101
21086: PUSH
21087: LD_INT 102
21089: PUSH
21090: LD_INT 105
21092: PUSH
21093: LD_INT 106
21095: PUSH
21096: LD_INT 108
21098: PUSH
21099: LD_INT 109
21101: PUSH
21102: LD_INT 112
21104: PUSH
21105: LD_INT 116
21107: PUSH
21108: LD_INT 117
21110: PUSH
21111: LD_INT 118
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: ST_TO_ADDR
21130: GO 23653
21132: LD_INT 7
21134: DOUBLE
21135: EQUAL
21136: IFTRUE 21140
21138: GO 21252
21140: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21141: LD_ADDR_VAR 0 2
21145: PUSH
21146: LD_INT 2
21148: PUSH
21149: LD_INT 4
21151: PUSH
21152: LD_INT 5
21154: PUSH
21155: LD_INT 7
21157: PUSH
21158: LD_INT 11
21160: PUSH
21161: LD_INT 12
21163: PUSH
21164: LD_INT 15
21166: PUSH
21167: LD_INT 16
21169: PUSH
21170: LD_INT 20
21172: PUSH
21173: LD_INT 21
21175: PUSH
21176: LD_INT 22
21178: PUSH
21179: LD_INT 23
21181: PUSH
21182: LD_INT 25
21184: PUSH
21185: LD_INT 26
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 101
21206: PUSH
21207: LD_INT 102
21209: PUSH
21210: LD_INT 103
21212: PUSH
21213: LD_INT 105
21215: PUSH
21216: LD_INT 106
21218: PUSH
21219: LD_INT 108
21221: PUSH
21222: LD_INT 112
21224: PUSH
21225: LD_INT 116
21227: PUSH
21228: LD_INT 117
21230: PUSH
21231: LD_INT 118
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: ST_TO_ADDR
21250: GO 23653
21252: LD_INT 8
21254: DOUBLE
21255: EQUAL
21256: IFTRUE 21260
21258: GO 21400
21260: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21261: LD_ADDR_VAR 0 2
21265: PUSH
21266: LD_INT 2
21268: PUSH
21269: LD_INT 4
21271: PUSH
21272: LD_INT 5
21274: PUSH
21275: LD_INT 6
21277: PUSH
21278: LD_INT 7
21280: PUSH
21281: LD_INT 8
21283: PUSH
21284: LD_INT 11
21286: PUSH
21287: LD_INT 12
21289: PUSH
21290: LD_INT 15
21292: PUSH
21293: LD_INT 16
21295: PUSH
21296: LD_INT 20
21298: PUSH
21299: LD_INT 21
21301: PUSH
21302: LD_INT 22
21304: PUSH
21305: LD_INT 23
21307: PUSH
21308: LD_INT 25
21310: PUSH
21311: LD_INT 26
21313: PUSH
21314: LD_INT 30
21316: PUSH
21317: LD_INT 31
21319: PUSH
21320: LD_INT 32
21322: PUSH
21323: LD_INT 36
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 101
21350: PUSH
21351: LD_INT 102
21353: PUSH
21354: LD_INT 103
21356: PUSH
21357: LD_INT 105
21359: PUSH
21360: LD_INT 106
21362: PUSH
21363: LD_INT 108
21365: PUSH
21366: LD_INT 109
21368: PUSH
21369: LD_INT 112
21371: PUSH
21372: LD_INT 116
21374: PUSH
21375: LD_INT 117
21377: PUSH
21378: LD_INT 118
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: ST_TO_ADDR
21398: GO 23653
21400: LD_INT 9
21402: DOUBLE
21403: EQUAL
21404: IFTRUE 21408
21406: GO 21556
21408: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21409: LD_ADDR_VAR 0 2
21413: PUSH
21414: LD_INT 2
21416: PUSH
21417: LD_INT 4
21419: PUSH
21420: LD_INT 5
21422: PUSH
21423: LD_INT 6
21425: PUSH
21426: LD_INT 7
21428: PUSH
21429: LD_INT 8
21431: PUSH
21432: LD_INT 11
21434: PUSH
21435: LD_INT 12
21437: PUSH
21438: LD_INT 15
21440: PUSH
21441: LD_INT 16
21443: PUSH
21444: LD_INT 20
21446: PUSH
21447: LD_INT 21
21449: PUSH
21450: LD_INT 22
21452: PUSH
21453: LD_INT 23
21455: PUSH
21456: LD_INT 25
21458: PUSH
21459: LD_INT 26
21461: PUSH
21462: LD_INT 28
21464: PUSH
21465: LD_INT 30
21467: PUSH
21468: LD_INT 31
21470: PUSH
21471: LD_INT 32
21473: PUSH
21474: LD_INT 36
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 101
21502: PUSH
21503: LD_INT 102
21505: PUSH
21506: LD_INT 103
21508: PUSH
21509: LD_INT 105
21511: PUSH
21512: LD_INT 106
21514: PUSH
21515: LD_INT 108
21517: PUSH
21518: LD_INT 109
21520: PUSH
21521: LD_INT 112
21523: PUSH
21524: LD_INT 114
21526: PUSH
21527: LD_INT 116
21529: PUSH
21530: LD_INT 117
21532: PUSH
21533: LD_INT 118
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: ST_TO_ADDR
21554: GO 23653
21556: LD_INT 10
21558: DOUBLE
21559: EQUAL
21560: IFTRUE 21564
21562: GO 21760
21564: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21565: LD_ADDR_VAR 0 2
21569: PUSH
21570: LD_INT 2
21572: PUSH
21573: LD_INT 4
21575: PUSH
21576: LD_INT 5
21578: PUSH
21579: LD_INT 6
21581: PUSH
21582: LD_INT 7
21584: PUSH
21585: LD_INT 8
21587: PUSH
21588: LD_INT 9
21590: PUSH
21591: LD_INT 10
21593: PUSH
21594: LD_INT 11
21596: PUSH
21597: LD_INT 12
21599: PUSH
21600: LD_INT 13
21602: PUSH
21603: LD_INT 14
21605: PUSH
21606: LD_INT 15
21608: PUSH
21609: LD_INT 16
21611: PUSH
21612: LD_INT 17
21614: PUSH
21615: LD_INT 18
21617: PUSH
21618: LD_INT 19
21620: PUSH
21621: LD_INT 20
21623: PUSH
21624: LD_INT 21
21626: PUSH
21627: LD_INT 22
21629: PUSH
21630: LD_INT 23
21632: PUSH
21633: LD_INT 24
21635: PUSH
21636: LD_INT 25
21638: PUSH
21639: LD_INT 26
21641: PUSH
21642: LD_INT 28
21644: PUSH
21645: LD_INT 30
21647: PUSH
21648: LD_INT 31
21650: PUSH
21651: LD_INT 32
21653: PUSH
21654: LD_INT 36
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 101
21690: PUSH
21691: LD_INT 102
21693: PUSH
21694: LD_INT 103
21696: PUSH
21697: LD_INT 104
21699: PUSH
21700: LD_INT 105
21702: PUSH
21703: LD_INT 106
21705: PUSH
21706: LD_INT 107
21708: PUSH
21709: LD_INT 108
21711: PUSH
21712: LD_INT 109
21714: PUSH
21715: LD_INT 110
21717: PUSH
21718: LD_INT 111
21720: PUSH
21721: LD_INT 112
21723: PUSH
21724: LD_INT 114
21726: PUSH
21727: LD_INT 116
21729: PUSH
21730: LD_INT 117
21732: PUSH
21733: LD_INT 118
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: ST_TO_ADDR
21758: GO 23653
21760: LD_INT 11
21762: DOUBLE
21763: EQUAL
21764: IFTRUE 21768
21766: GO 21972
21768: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21769: LD_ADDR_VAR 0 2
21773: PUSH
21774: LD_INT 2
21776: PUSH
21777: LD_INT 3
21779: PUSH
21780: LD_INT 4
21782: PUSH
21783: LD_INT 5
21785: PUSH
21786: LD_INT 6
21788: PUSH
21789: LD_INT 7
21791: PUSH
21792: LD_INT 8
21794: PUSH
21795: LD_INT 9
21797: PUSH
21798: LD_INT 10
21800: PUSH
21801: LD_INT 11
21803: PUSH
21804: LD_INT 12
21806: PUSH
21807: LD_INT 13
21809: PUSH
21810: LD_INT 14
21812: PUSH
21813: LD_INT 15
21815: PUSH
21816: LD_INT 16
21818: PUSH
21819: LD_INT 17
21821: PUSH
21822: LD_INT 18
21824: PUSH
21825: LD_INT 19
21827: PUSH
21828: LD_INT 20
21830: PUSH
21831: LD_INT 21
21833: PUSH
21834: LD_INT 22
21836: PUSH
21837: LD_INT 23
21839: PUSH
21840: LD_INT 24
21842: PUSH
21843: LD_INT 25
21845: PUSH
21846: LD_INT 26
21848: PUSH
21849: LD_INT 28
21851: PUSH
21852: LD_INT 30
21854: PUSH
21855: LD_INT 31
21857: PUSH
21858: LD_INT 32
21860: PUSH
21861: LD_INT 34
21863: PUSH
21864: LD_INT 36
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 101
21902: PUSH
21903: LD_INT 102
21905: PUSH
21906: LD_INT 103
21908: PUSH
21909: LD_INT 104
21911: PUSH
21912: LD_INT 105
21914: PUSH
21915: LD_INT 106
21917: PUSH
21918: LD_INT 107
21920: PUSH
21921: LD_INT 108
21923: PUSH
21924: LD_INT 109
21926: PUSH
21927: LD_INT 110
21929: PUSH
21930: LD_INT 111
21932: PUSH
21933: LD_INT 112
21935: PUSH
21936: LD_INT 114
21938: PUSH
21939: LD_INT 116
21941: PUSH
21942: LD_INT 117
21944: PUSH
21945: LD_INT 118
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: ST_TO_ADDR
21970: GO 23653
21972: LD_INT 12
21974: DOUBLE
21975: EQUAL
21976: IFTRUE 21980
21978: GO 22200
21980: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21981: LD_ADDR_VAR 0 2
21985: PUSH
21986: LD_INT 1
21988: PUSH
21989: LD_INT 2
21991: PUSH
21992: LD_INT 3
21994: PUSH
21995: LD_INT 4
21997: PUSH
21998: LD_INT 5
22000: PUSH
22001: LD_INT 6
22003: PUSH
22004: LD_INT 7
22006: PUSH
22007: LD_INT 8
22009: PUSH
22010: LD_INT 9
22012: PUSH
22013: LD_INT 10
22015: PUSH
22016: LD_INT 11
22018: PUSH
22019: LD_INT 12
22021: PUSH
22022: LD_INT 13
22024: PUSH
22025: LD_INT 14
22027: PUSH
22028: LD_INT 15
22030: PUSH
22031: LD_INT 16
22033: PUSH
22034: LD_INT 17
22036: PUSH
22037: LD_INT 18
22039: PUSH
22040: LD_INT 19
22042: PUSH
22043: LD_INT 20
22045: PUSH
22046: LD_INT 21
22048: PUSH
22049: LD_INT 22
22051: PUSH
22052: LD_INT 23
22054: PUSH
22055: LD_INT 24
22057: PUSH
22058: LD_INT 25
22060: PUSH
22061: LD_INT 26
22063: PUSH
22064: LD_INT 27
22066: PUSH
22067: LD_INT 28
22069: PUSH
22070: LD_INT 30
22072: PUSH
22073: LD_INT 31
22075: PUSH
22076: LD_INT 32
22078: PUSH
22079: LD_INT 33
22081: PUSH
22082: LD_INT 34
22084: PUSH
22085: LD_INT 36
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 101
22126: PUSH
22127: LD_INT 102
22129: PUSH
22130: LD_INT 103
22132: PUSH
22133: LD_INT 104
22135: PUSH
22136: LD_INT 105
22138: PUSH
22139: LD_INT 106
22141: PUSH
22142: LD_INT 107
22144: PUSH
22145: LD_INT 108
22147: PUSH
22148: LD_INT 109
22150: PUSH
22151: LD_INT 110
22153: PUSH
22154: LD_INT 111
22156: PUSH
22157: LD_INT 112
22159: PUSH
22160: LD_INT 113
22162: PUSH
22163: LD_INT 114
22165: PUSH
22166: LD_INT 116
22168: PUSH
22169: LD_INT 117
22171: PUSH
22172: LD_INT 118
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: ST_TO_ADDR
22198: GO 23653
22200: LD_INT 13
22202: DOUBLE
22203: EQUAL
22204: IFTRUE 22208
22206: GO 22416
22208: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22209: LD_ADDR_VAR 0 2
22213: PUSH
22214: LD_INT 1
22216: PUSH
22217: LD_INT 2
22219: PUSH
22220: LD_INT 3
22222: PUSH
22223: LD_INT 4
22225: PUSH
22226: LD_INT 5
22228: PUSH
22229: LD_INT 8
22231: PUSH
22232: LD_INT 9
22234: PUSH
22235: LD_INT 10
22237: PUSH
22238: LD_INT 11
22240: PUSH
22241: LD_INT 12
22243: PUSH
22244: LD_INT 14
22246: PUSH
22247: LD_INT 15
22249: PUSH
22250: LD_INT 16
22252: PUSH
22253: LD_INT 17
22255: PUSH
22256: LD_INT 18
22258: PUSH
22259: LD_INT 19
22261: PUSH
22262: LD_INT 20
22264: PUSH
22265: LD_INT 21
22267: PUSH
22268: LD_INT 22
22270: PUSH
22271: LD_INT 23
22273: PUSH
22274: LD_INT 24
22276: PUSH
22277: LD_INT 25
22279: PUSH
22280: LD_INT 26
22282: PUSH
22283: LD_INT 27
22285: PUSH
22286: LD_INT 28
22288: PUSH
22289: LD_INT 30
22291: PUSH
22292: LD_INT 31
22294: PUSH
22295: LD_INT 32
22297: PUSH
22298: LD_INT 33
22300: PUSH
22301: LD_INT 34
22303: PUSH
22304: LD_INT 36
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 101
22342: PUSH
22343: LD_INT 102
22345: PUSH
22346: LD_INT 103
22348: PUSH
22349: LD_INT 104
22351: PUSH
22352: LD_INT 105
22354: PUSH
22355: LD_INT 106
22357: PUSH
22358: LD_INT 107
22360: PUSH
22361: LD_INT 108
22363: PUSH
22364: LD_INT 109
22366: PUSH
22367: LD_INT 110
22369: PUSH
22370: LD_INT 111
22372: PUSH
22373: LD_INT 112
22375: PUSH
22376: LD_INT 113
22378: PUSH
22379: LD_INT 114
22381: PUSH
22382: LD_INT 116
22384: PUSH
22385: LD_INT 117
22387: PUSH
22388: LD_INT 118
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: ST_TO_ADDR
22414: GO 23653
22416: LD_INT 14
22418: DOUBLE
22419: EQUAL
22420: IFTRUE 22424
22422: GO 22648
22424: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22425: LD_ADDR_VAR 0 2
22429: PUSH
22430: LD_INT 1
22432: PUSH
22433: LD_INT 2
22435: PUSH
22436: LD_INT 3
22438: PUSH
22439: LD_INT 4
22441: PUSH
22442: LD_INT 5
22444: PUSH
22445: LD_INT 6
22447: PUSH
22448: LD_INT 7
22450: PUSH
22451: LD_INT 8
22453: PUSH
22454: LD_INT 9
22456: PUSH
22457: LD_INT 10
22459: PUSH
22460: LD_INT 11
22462: PUSH
22463: LD_INT 12
22465: PUSH
22466: LD_INT 13
22468: PUSH
22469: LD_INT 14
22471: PUSH
22472: LD_INT 15
22474: PUSH
22475: LD_INT 16
22477: PUSH
22478: LD_INT 17
22480: PUSH
22481: LD_INT 18
22483: PUSH
22484: LD_INT 19
22486: PUSH
22487: LD_INT 20
22489: PUSH
22490: LD_INT 21
22492: PUSH
22493: LD_INT 22
22495: PUSH
22496: LD_INT 23
22498: PUSH
22499: LD_INT 24
22501: PUSH
22502: LD_INT 25
22504: PUSH
22505: LD_INT 26
22507: PUSH
22508: LD_INT 27
22510: PUSH
22511: LD_INT 28
22513: PUSH
22514: LD_INT 29
22516: PUSH
22517: LD_INT 30
22519: PUSH
22520: LD_INT 31
22522: PUSH
22523: LD_INT 32
22525: PUSH
22526: LD_INT 33
22528: PUSH
22529: LD_INT 34
22531: PUSH
22532: LD_INT 36
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 101
22574: PUSH
22575: LD_INT 102
22577: PUSH
22578: LD_INT 103
22580: PUSH
22581: LD_INT 104
22583: PUSH
22584: LD_INT 105
22586: PUSH
22587: LD_INT 106
22589: PUSH
22590: LD_INT 107
22592: PUSH
22593: LD_INT 108
22595: PUSH
22596: LD_INT 109
22598: PUSH
22599: LD_INT 110
22601: PUSH
22602: LD_INT 111
22604: PUSH
22605: LD_INT 112
22607: PUSH
22608: LD_INT 113
22610: PUSH
22611: LD_INT 114
22613: PUSH
22614: LD_INT 116
22616: PUSH
22617: LD_INT 117
22619: PUSH
22620: LD_INT 118
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: ST_TO_ADDR
22646: GO 23653
22648: LD_INT 15
22650: DOUBLE
22651: EQUAL
22652: IFTRUE 22656
22654: GO 22880
22656: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22657: LD_ADDR_VAR 0 2
22661: PUSH
22662: LD_INT 1
22664: PUSH
22665: LD_INT 2
22667: PUSH
22668: LD_INT 3
22670: PUSH
22671: LD_INT 4
22673: PUSH
22674: LD_INT 5
22676: PUSH
22677: LD_INT 6
22679: PUSH
22680: LD_INT 7
22682: PUSH
22683: LD_INT 8
22685: PUSH
22686: LD_INT 9
22688: PUSH
22689: LD_INT 10
22691: PUSH
22692: LD_INT 11
22694: PUSH
22695: LD_INT 12
22697: PUSH
22698: LD_INT 13
22700: PUSH
22701: LD_INT 14
22703: PUSH
22704: LD_INT 15
22706: PUSH
22707: LD_INT 16
22709: PUSH
22710: LD_INT 17
22712: PUSH
22713: LD_INT 18
22715: PUSH
22716: LD_INT 19
22718: PUSH
22719: LD_INT 20
22721: PUSH
22722: LD_INT 21
22724: PUSH
22725: LD_INT 22
22727: PUSH
22728: LD_INT 23
22730: PUSH
22731: LD_INT 24
22733: PUSH
22734: LD_INT 25
22736: PUSH
22737: LD_INT 26
22739: PUSH
22740: LD_INT 27
22742: PUSH
22743: LD_INT 28
22745: PUSH
22746: LD_INT 29
22748: PUSH
22749: LD_INT 30
22751: PUSH
22752: LD_INT 31
22754: PUSH
22755: LD_INT 32
22757: PUSH
22758: LD_INT 33
22760: PUSH
22761: LD_INT 34
22763: PUSH
22764: LD_INT 36
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 101
22806: PUSH
22807: LD_INT 102
22809: PUSH
22810: LD_INT 103
22812: PUSH
22813: LD_INT 104
22815: PUSH
22816: LD_INT 105
22818: PUSH
22819: LD_INT 106
22821: PUSH
22822: LD_INT 107
22824: PUSH
22825: LD_INT 108
22827: PUSH
22828: LD_INT 109
22830: PUSH
22831: LD_INT 110
22833: PUSH
22834: LD_INT 111
22836: PUSH
22837: LD_INT 112
22839: PUSH
22840: LD_INT 113
22842: PUSH
22843: LD_INT 114
22845: PUSH
22846: LD_INT 116
22848: PUSH
22849: LD_INT 117
22851: PUSH
22852: LD_INT 118
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: ST_TO_ADDR
22878: GO 23653
22880: LD_INT 16
22882: DOUBLE
22883: EQUAL
22884: IFTRUE 22888
22886: GO 23024
22888: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22889: LD_ADDR_VAR 0 2
22893: PUSH
22894: LD_INT 2
22896: PUSH
22897: LD_INT 4
22899: PUSH
22900: LD_INT 5
22902: PUSH
22903: LD_INT 7
22905: PUSH
22906: LD_INT 11
22908: PUSH
22909: LD_INT 12
22911: PUSH
22912: LD_INT 15
22914: PUSH
22915: LD_INT 16
22917: PUSH
22918: LD_INT 20
22920: PUSH
22921: LD_INT 21
22923: PUSH
22924: LD_INT 22
22926: PUSH
22927: LD_INT 23
22929: PUSH
22930: LD_INT 25
22932: PUSH
22933: LD_INT 26
22935: PUSH
22936: LD_INT 30
22938: PUSH
22939: LD_INT 31
22941: PUSH
22942: LD_INT 32
22944: PUSH
22945: LD_INT 33
22947: PUSH
22948: LD_INT 34
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 101
22974: PUSH
22975: LD_INT 102
22977: PUSH
22978: LD_INT 103
22980: PUSH
22981: LD_INT 106
22983: PUSH
22984: LD_INT 108
22986: PUSH
22987: LD_INT 112
22989: PUSH
22990: LD_INT 113
22992: PUSH
22993: LD_INT 114
22995: PUSH
22996: LD_INT 116
22998: PUSH
22999: LD_INT 117
23001: PUSH
23002: LD_INT 118
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: ST_TO_ADDR
23022: GO 23653
23024: LD_INT 17
23026: DOUBLE
23027: EQUAL
23028: IFTRUE 23032
23030: GO 23256
23032: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23033: LD_ADDR_VAR 0 2
23037: PUSH
23038: LD_INT 1
23040: PUSH
23041: LD_INT 2
23043: PUSH
23044: LD_INT 3
23046: PUSH
23047: LD_INT 4
23049: PUSH
23050: LD_INT 5
23052: PUSH
23053: LD_INT 6
23055: PUSH
23056: LD_INT 7
23058: PUSH
23059: LD_INT 8
23061: PUSH
23062: LD_INT 9
23064: PUSH
23065: LD_INT 10
23067: PUSH
23068: LD_INT 11
23070: PUSH
23071: LD_INT 12
23073: PUSH
23074: LD_INT 13
23076: PUSH
23077: LD_INT 14
23079: PUSH
23080: LD_INT 15
23082: PUSH
23083: LD_INT 16
23085: PUSH
23086: LD_INT 17
23088: PUSH
23089: LD_INT 18
23091: PUSH
23092: LD_INT 19
23094: PUSH
23095: LD_INT 20
23097: PUSH
23098: LD_INT 21
23100: PUSH
23101: LD_INT 22
23103: PUSH
23104: LD_INT 23
23106: PUSH
23107: LD_INT 24
23109: PUSH
23110: LD_INT 25
23112: PUSH
23113: LD_INT 26
23115: PUSH
23116: LD_INT 27
23118: PUSH
23119: LD_INT 28
23121: PUSH
23122: LD_INT 29
23124: PUSH
23125: LD_INT 30
23127: PUSH
23128: LD_INT 31
23130: PUSH
23131: LD_INT 32
23133: PUSH
23134: LD_INT 33
23136: PUSH
23137: LD_INT 34
23139: PUSH
23140: LD_INT 36
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 101
23182: PUSH
23183: LD_INT 102
23185: PUSH
23186: LD_INT 103
23188: PUSH
23189: LD_INT 104
23191: PUSH
23192: LD_INT 105
23194: PUSH
23195: LD_INT 106
23197: PUSH
23198: LD_INT 107
23200: PUSH
23201: LD_INT 108
23203: PUSH
23204: LD_INT 109
23206: PUSH
23207: LD_INT 110
23209: PUSH
23210: LD_INT 111
23212: PUSH
23213: LD_INT 112
23215: PUSH
23216: LD_INT 113
23218: PUSH
23219: LD_INT 114
23221: PUSH
23222: LD_INT 116
23224: PUSH
23225: LD_INT 117
23227: PUSH
23228: LD_INT 118
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: ST_TO_ADDR
23254: GO 23653
23256: LD_INT 18
23258: DOUBLE
23259: EQUAL
23260: IFTRUE 23264
23262: GO 23412
23264: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23265: LD_ADDR_VAR 0 2
23269: PUSH
23270: LD_INT 2
23272: PUSH
23273: LD_INT 4
23275: PUSH
23276: LD_INT 5
23278: PUSH
23279: LD_INT 7
23281: PUSH
23282: LD_INT 11
23284: PUSH
23285: LD_INT 12
23287: PUSH
23288: LD_INT 15
23290: PUSH
23291: LD_INT 16
23293: PUSH
23294: LD_INT 20
23296: PUSH
23297: LD_INT 21
23299: PUSH
23300: LD_INT 22
23302: PUSH
23303: LD_INT 23
23305: PUSH
23306: LD_INT 25
23308: PUSH
23309: LD_INT 26
23311: PUSH
23312: LD_INT 30
23314: PUSH
23315: LD_INT 31
23317: PUSH
23318: LD_INT 32
23320: PUSH
23321: LD_INT 33
23323: PUSH
23324: LD_INT 34
23326: PUSH
23327: LD_INT 35
23329: PUSH
23330: LD_INT 36
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 101
23358: PUSH
23359: LD_INT 102
23361: PUSH
23362: LD_INT 103
23364: PUSH
23365: LD_INT 106
23367: PUSH
23368: LD_INT 108
23370: PUSH
23371: LD_INT 112
23373: PUSH
23374: LD_INT 113
23376: PUSH
23377: LD_INT 114
23379: PUSH
23380: LD_INT 115
23382: PUSH
23383: LD_INT 116
23385: PUSH
23386: LD_INT 117
23388: PUSH
23389: LD_INT 118
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: ST_TO_ADDR
23410: GO 23653
23412: LD_INT 19
23414: DOUBLE
23415: EQUAL
23416: IFTRUE 23420
23418: GO 23652
23420: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23421: LD_ADDR_VAR 0 2
23425: PUSH
23426: LD_INT 1
23428: PUSH
23429: LD_INT 2
23431: PUSH
23432: LD_INT 3
23434: PUSH
23435: LD_INT 4
23437: PUSH
23438: LD_INT 5
23440: PUSH
23441: LD_INT 6
23443: PUSH
23444: LD_INT 7
23446: PUSH
23447: LD_INT 8
23449: PUSH
23450: LD_INT 9
23452: PUSH
23453: LD_INT 10
23455: PUSH
23456: LD_INT 11
23458: PUSH
23459: LD_INT 12
23461: PUSH
23462: LD_INT 13
23464: PUSH
23465: LD_INT 14
23467: PUSH
23468: LD_INT 15
23470: PUSH
23471: LD_INT 16
23473: PUSH
23474: LD_INT 17
23476: PUSH
23477: LD_INT 18
23479: PUSH
23480: LD_INT 19
23482: PUSH
23483: LD_INT 20
23485: PUSH
23486: LD_INT 21
23488: PUSH
23489: LD_INT 22
23491: PUSH
23492: LD_INT 23
23494: PUSH
23495: LD_INT 24
23497: PUSH
23498: LD_INT 25
23500: PUSH
23501: LD_INT 26
23503: PUSH
23504: LD_INT 27
23506: PUSH
23507: LD_INT 28
23509: PUSH
23510: LD_INT 29
23512: PUSH
23513: LD_INT 30
23515: PUSH
23516: LD_INT 31
23518: PUSH
23519: LD_INT 32
23521: PUSH
23522: LD_INT 33
23524: PUSH
23525: LD_INT 34
23527: PUSH
23528: LD_INT 35
23530: PUSH
23531: LD_INT 36
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 101
23574: PUSH
23575: LD_INT 102
23577: PUSH
23578: LD_INT 103
23580: PUSH
23581: LD_INT 104
23583: PUSH
23584: LD_INT 105
23586: PUSH
23587: LD_INT 106
23589: PUSH
23590: LD_INT 107
23592: PUSH
23593: LD_INT 108
23595: PUSH
23596: LD_INT 109
23598: PUSH
23599: LD_INT 110
23601: PUSH
23602: LD_INT 111
23604: PUSH
23605: LD_INT 112
23607: PUSH
23608: LD_INT 113
23610: PUSH
23611: LD_INT 114
23613: PUSH
23614: LD_INT 115
23616: PUSH
23617: LD_INT 116
23619: PUSH
23620: LD_INT 117
23622: PUSH
23623: LD_INT 118
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: ST_TO_ADDR
23650: GO 23653
23652: POP
// end else
23653: GO 23884
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23655: LD_ADDR_VAR 0 2
23659: PUSH
23660: LD_INT 1
23662: PUSH
23663: LD_INT 2
23665: PUSH
23666: LD_INT 3
23668: PUSH
23669: LD_INT 4
23671: PUSH
23672: LD_INT 5
23674: PUSH
23675: LD_INT 6
23677: PUSH
23678: LD_INT 7
23680: PUSH
23681: LD_INT 8
23683: PUSH
23684: LD_INT 9
23686: PUSH
23687: LD_INT 10
23689: PUSH
23690: LD_INT 11
23692: PUSH
23693: LD_INT 12
23695: PUSH
23696: LD_INT 13
23698: PUSH
23699: LD_INT 14
23701: PUSH
23702: LD_INT 15
23704: PUSH
23705: LD_INT 16
23707: PUSH
23708: LD_INT 17
23710: PUSH
23711: LD_INT 18
23713: PUSH
23714: LD_INT 19
23716: PUSH
23717: LD_INT 20
23719: PUSH
23720: LD_INT 21
23722: PUSH
23723: LD_INT 22
23725: PUSH
23726: LD_INT 23
23728: PUSH
23729: LD_INT 24
23731: PUSH
23732: LD_INT 25
23734: PUSH
23735: LD_INT 26
23737: PUSH
23738: LD_INT 27
23740: PUSH
23741: LD_INT 28
23743: PUSH
23744: LD_INT 29
23746: PUSH
23747: LD_INT 30
23749: PUSH
23750: LD_INT 31
23752: PUSH
23753: LD_INT 32
23755: PUSH
23756: LD_INT 33
23758: PUSH
23759: LD_INT 34
23761: PUSH
23762: LD_INT 35
23764: PUSH
23765: LD_INT 36
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 101
23808: PUSH
23809: LD_INT 102
23811: PUSH
23812: LD_INT 103
23814: PUSH
23815: LD_INT 104
23817: PUSH
23818: LD_INT 105
23820: PUSH
23821: LD_INT 106
23823: PUSH
23824: LD_INT 107
23826: PUSH
23827: LD_INT 108
23829: PUSH
23830: LD_INT 109
23832: PUSH
23833: LD_INT 110
23835: PUSH
23836: LD_INT 111
23838: PUSH
23839: LD_INT 112
23841: PUSH
23842: LD_INT 113
23844: PUSH
23845: LD_INT 114
23847: PUSH
23848: LD_INT 115
23850: PUSH
23851: LD_INT 116
23853: PUSH
23854: LD_INT 117
23856: PUSH
23857: LD_INT 118
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: ST_TO_ADDR
// if result then
23884: LD_VAR 0 2
23888: IFFALSE 24674
// begin normal :=  ;
23890: LD_ADDR_VAR 0 5
23894: PUSH
23895: LD_STRING 
23897: ST_TO_ADDR
// hardcore :=  ;
23898: LD_ADDR_VAR 0 6
23902: PUSH
23903: LD_STRING 
23905: ST_TO_ADDR
// active :=  ;
23906: LD_ADDR_VAR 0 7
23910: PUSH
23911: LD_STRING 
23913: ST_TO_ADDR
// for i = 1 to normalCounter do
23914: LD_ADDR_VAR 0 8
23918: PUSH
23919: DOUBLE
23920: LD_INT 1
23922: DEC
23923: ST_TO_ADDR
23924: LD_EXP 82
23928: PUSH
23929: FOR_TO
23930: IFFALSE 24031
// begin tmp := 0 ;
23932: LD_ADDR_VAR 0 3
23936: PUSH
23937: LD_STRING 0
23939: ST_TO_ADDR
// if result [ 1 ] then
23940: LD_VAR 0 2
23944: PUSH
23945: LD_INT 1
23947: ARRAY
23948: IFFALSE 24013
// if result [ 1 ] [ 1 ] = i then
23950: LD_VAR 0 2
23954: PUSH
23955: LD_INT 1
23957: ARRAY
23958: PUSH
23959: LD_INT 1
23961: ARRAY
23962: PUSH
23963: LD_VAR 0 8
23967: EQUAL
23968: IFFALSE 24013
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23970: LD_ADDR_VAR 0 2
23974: PUSH
23975: LD_VAR 0 2
23979: PPUSH
23980: LD_INT 1
23982: PPUSH
23983: LD_VAR 0 2
23987: PUSH
23988: LD_INT 1
23990: ARRAY
23991: PPUSH
23992: LD_INT 1
23994: PPUSH
23995: CALL_OW 3
23999: PPUSH
24000: CALL_OW 1
24004: ST_TO_ADDR
// tmp := 1 ;
24005: LD_ADDR_VAR 0 3
24009: PUSH
24010: LD_STRING 1
24012: ST_TO_ADDR
// end ; normal := normal & tmp ;
24013: LD_ADDR_VAR 0 5
24017: PUSH
24018: LD_VAR 0 5
24022: PUSH
24023: LD_VAR 0 3
24027: STR
24028: ST_TO_ADDR
// end ;
24029: GO 23929
24031: POP
24032: POP
// for i = 1 to hardcoreCounter do
24033: LD_ADDR_VAR 0 8
24037: PUSH
24038: DOUBLE
24039: LD_INT 1
24041: DEC
24042: ST_TO_ADDR
24043: LD_EXP 83
24047: PUSH
24048: FOR_TO
24049: IFFALSE 24154
// begin tmp := 0 ;
24051: LD_ADDR_VAR 0 3
24055: PUSH
24056: LD_STRING 0
24058: ST_TO_ADDR
// if result [ 2 ] then
24059: LD_VAR 0 2
24063: PUSH
24064: LD_INT 2
24066: ARRAY
24067: IFFALSE 24136
// if result [ 2 ] [ 1 ] = 100 + i then
24069: LD_VAR 0 2
24073: PUSH
24074: LD_INT 2
24076: ARRAY
24077: PUSH
24078: LD_INT 1
24080: ARRAY
24081: PUSH
24082: LD_INT 100
24084: PUSH
24085: LD_VAR 0 8
24089: PLUS
24090: EQUAL
24091: IFFALSE 24136
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24093: LD_ADDR_VAR 0 2
24097: PUSH
24098: LD_VAR 0 2
24102: PPUSH
24103: LD_INT 2
24105: PPUSH
24106: LD_VAR 0 2
24110: PUSH
24111: LD_INT 2
24113: ARRAY
24114: PPUSH
24115: LD_INT 1
24117: PPUSH
24118: CALL_OW 3
24122: PPUSH
24123: CALL_OW 1
24127: ST_TO_ADDR
// tmp := 1 ;
24128: LD_ADDR_VAR 0 3
24132: PUSH
24133: LD_STRING 1
24135: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24136: LD_ADDR_VAR 0 6
24140: PUSH
24141: LD_VAR 0 6
24145: PUSH
24146: LD_VAR 0 3
24150: STR
24151: ST_TO_ADDR
// end ;
24152: GO 24048
24154: POP
24155: POP
// if isGameLoad then
24156: LD_VAR 0 1
24160: IFFALSE 24635
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24162: LD_ADDR_VAR 0 4
24166: PUSH
24167: LD_EXP 86
24171: PUSH
24172: LD_EXP 85
24176: PUSH
24177: LD_EXP 87
24181: PUSH
24182: LD_EXP 84
24186: PUSH
24187: LD_EXP 88
24191: PUSH
24192: LD_EXP 89
24196: PUSH
24197: LD_EXP 90
24201: PUSH
24202: LD_EXP 91
24206: PUSH
24207: LD_EXP 92
24211: PUSH
24212: LD_EXP 93
24216: PUSH
24217: LD_EXP 94
24221: PUSH
24222: LD_EXP 95
24226: PUSH
24227: LD_EXP 96
24231: PUSH
24232: LD_EXP 97
24236: PUSH
24237: LD_EXP 105
24241: PUSH
24242: LD_EXP 106
24246: PUSH
24247: LD_EXP 107
24251: PUSH
24252: LD_EXP 108
24256: PUSH
24257: LD_EXP 110
24261: PUSH
24262: LD_EXP 111
24266: PUSH
24267: LD_EXP 112
24271: PUSH
24272: LD_EXP 115
24276: PUSH
24277: LD_EXP 117
24281: PUSH
24282: LD_EXP 118
24286: PUSH
24287: LD_EXP 119
24291: PUSH
24292: LD_EXP 121
24296: PUSH
24297: LD_EXP 122
24301: PUSH
24302: LD_EXP 125
24306: PUSH
24307: LD_EXP 126
24311: PUSH
24312: LD_EXP 127
24316: PUSH
24317: LD_EXP 128
24321: PUSH
24322: LD_EXP 129
24326: PUSH
24327: LD_EXP 130
24331: PUSH
24332: LD_EXP 131
24336: PUSH
24337: LD_EXP 132
24341: PUSH
24342: LD_EXP 133
24346: PUSH
24347: LD_EXP 98
24351: PUSH
24352: LD_EXP 99
24356: PUSH
24357: LD_EXP 102
24361: PUSH
24362: LD_EXP 103
24366: PUSH
24367: LD_EXP 104
24371: PUSH
24372: LD_EXP 100
24376: PUSH
24377: LD_EXP 101
24381: PUSH
24382: LD_EXP 109
24386: PUSH
24387: LD_EXP 113
24391: PUSH
24392: LD_EXP 114
24396: PUSH
24397: LD_EXP 116
24401: PUSH
24402: LD_EXP 120
24406: PUSH
24407: LD_EXP 123
24411: PUSH
24412: LD_EXP 124
24416: PUSH
24417: LD_EXP 134
24421: PUSH
24422: LD_EXP 135
24426: PUSH
24427: LD_EXP 136
24431: PUSH
24432: LD_EXP 137
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: ST_TO_ADDR
// tmp :=  ;
24493: LD_ADDR_VAR 0 3
24497: PUSH
24498: LD_STRING 
24500: ST_TO_ADDR
// for i = 1 to normalCounter do
24501: LD_ADDR_VAR 0 8
24505: PUSH
24506: DOUBLE
24507: LD_INT 1
24509: DEC
24510: ST_TO_ADDR
24511: LD_EXP 82
24515: PUSH
24516: FOR_TO
24517: IFFALSE 24553
// begin if flags [ i ] then
24519: LD_VAR 0 4
24523: PUSH
24524: LD_VAR 0 8
24528: ARRAY
24529: IFFALSE 24551
// tmp := tmp & i & ; ;
24531: LD_ADDR_VAR 0 3
24535: PUSH
24536: LD_VAR 0 3
24540: PUSH
24541: LD_VAR 0 8
24545: STR
24546: PUSH
24547: LD_STRING ;
24549: STR
24550: ST_TO_ADDR
// end ;
24551: GO 24516
24553: POP
24554: POP
// for i = 1 to hardcoreCounter do
24555: LD_ADDR_VAR 0 8
24559: PUSH
24560: DOUBLE
24561: LD_INT 1
24563: DEC
24564: ST_TO_ADDR
24565: LD_EXP 83
24569: PUSH
24570: FOR_TO
24571: IFFALSE 24617
// begin if flags [ normalCounter + i ] then
24573: LD_VAR 0 4
24577: PUSH
24578: LD_EXP 82
24582: PUSH
24583: LD_VAR 0 8
24587: PLUS
24588: ARRAY
24589: IFFALSE 24615
// tmp := tmp & ( 100 + i ) & ; ;
24591: LD_ADDR_VAR 0 3
24595: PUSH
24596: LD_VAR 0 3
24600: PUSH
24601: LD_INT 100
24603: PUSH
24604: LD_VAR 0 8
24608: PLUS
24609: STR
24610: PUSH
24611: LD_STRING ;
24613: STR
24614: ST_TO_ADDR
// end ;
24615: GO 24570
24617: POP
24618: POP
// if tmp then
24619: LD_VAR 0 3
24623: IFFALSE 24635
// active := tmp ;
24625: LD_ADDR_VAR 0 7
24629: PUSH
24630: LD_VAR 0 3
24634: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24635: LD_STRING getStreamItemsFromMission("
24637: PUSH
24638: LD_VAR 0 5
24642: STR
24643: PUSH
24644: LD_STRING ","
24646: STR
24647: PUSH
24648: LD_VAR 0 6
24652: STR
24653: PUSH
24654: LD_STRING ","
24656: STR
24657: PUSH
24658: LD_VAR 0 7
24662: STR
24663: PUSH
24664: LD_STRING ")
24666: STR
24667: PPUSH
24668: CALL_OW 559
// end else
24672: GO 24681
// ToLua ( getStreamItemsFromMission("","","") ) ;
24674: LD_STRING getStreamItemsFromMission("","","")
24676: PPUSH
24677: CALL_OW 559
// end ;
24681: LD_VAR 0 2
24685: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24686: LD_EXP 81
24690: PUSH
24691: LD_EXP 86
24695: AND
24696: IFFALSE 24820
24698: GO 24700
24700: DISABLE
24701: LD_INT 0
24703: PPUSH
24704: PPUSH
// begin enable ;
24705: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24706: LD_ADDR_VAR 0 2
24710: PUSH
24711: LD_INT 22
24713: PUSH
24714: LD_OWVAR 2
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 2
24725: PUSH
24726: LD_INT 34
24728: PUSH
24729: LD_INT 7
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 34
24738: PUSH
24739: LD_INT 45
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 34
24748: PUSH
24749: LD_INT 28
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 34
24758: PUSH
24759: LD_INT 47
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PPUSH
24777: CALL_OW 69
24781: ST_TO_ADDR
// if not tmp then
24782: LD_VAR 0 2
24786: NOT
24787: IFFALSE 24791
// exit ;
24789: GO 24820
// for i in tmp do
24791: LD_ADDR_VAR 0 1
24795: PUSH
24796: LD_VAR 0 2
24800: PUSH
24801: FOR_IN
24802: IFFALSE 24818
// begin SetLives ( i , 0 ) ;
24804: LD_VAR 0 1
24808: PPUSH
24809: LD_INT 0
24811: PPUSH
24812: CALL_OW 234
// end ;
24816: GO 24801
24818: POP
24819: POP
// end ;
24820: PPOPN 2
24822: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24823: LD_EXP 81
24827: PUSH
24828: LD_EXP 87
24832: AND
24833: IFFALSE 24917
24835: GO 24837
24837: DISABLE
24838: LD_INT 0
24840: PPUSH
24841: PPUSH
// begin enable ;
24842: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24843: LD_ADDR_VAR 0 2
24847: PUSH
24848: LD_INT 22
24850: PUSH
24851: LD_OWVAR 2
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 32
24862: PUSH
24863: LD_INT 3
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PPUSH
24874: CALL_OW 69
24878: ST_TO_ADDR
// if not tmp then
24879: LD_VAR 0 2
24883: NOT
24884: IFFALSE 24888
// exit ;
24886: GO 24917
// for i in tmp do
24888: LD_ADDR_VAR 0 1
24892: PUSH
24893: LD_VAR 0 2
24897: PUSH
24898: FOR_IN
24899: IFFALSE 24915
// begin SetLives ( i , 0 ) ;
24901: LD_VAR 0 1
24905: PPUSH
24906: LD_INT 0
24908: PPUSH
24909: CALL_OW 234
// end ;
24913: GO 24898
24915: POP
24916: POP
// end ;
24917: PPOPN 2
24919: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24920: LD_EXP 81
24924: PUSH
24925: LD_EXP 84
24929: AND
24930: IFFALSE 25023
24932: GO 24934
24934: DISABLE
24935: LD_INT 0
24937: PPUSH
// begin enable ;
24938: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24939: LD_ADDR_VAR 0 1
24943: PUSH
24944: LD_INT 22
24946: PUSH
24947: LD_OWVAR 2
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 2
24958: PUSH
24959: LD_INT 25
24961: PUSH
24962: LD_INT 5
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 25
24971: PUSH
24972: LD_INT 9
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 25
24981: PUSH
24982: LD_INT 8
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PPUSH
24999: CALL_OW 69
25003: PUSH
25004: FOR_IN
25005: IFFALSE 25021
// begin SetClass ( i , 1 ) ;
25007: LD_VAR 0 1
25011: PPUSH
25012: LD_INT 1
25014: PPUSH
25015: CALL_OW 336
// end ;
25019: GO 25004
25021: POP
25022: POP
// end ;
25023: PPOPN 1
25025: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25026: LD_EXP 81
25030: PUSH
25031: LD_EXP 85
25035: AND
25036: PUSH
25037: LD_OWVAR 65
25041: PUSH
25042: LD_INT 7
25044: LESS
25045: AND
25046: IFFALSE 25060
25048: GO 25050
25050: DISABLE
// begin enable ;
25051: ENABLE
// game_speed := 7 ;
25052: LD_ADDR_OWVAR 65
25056: PUSH
25057: LD_INT 7
25059: ST_TO_ADDR
// end ;
25060: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25061: LD_EXP 81
25065: PUSH
25066: LD_EXP 88
25070: AND
25071: IFFALSE 25273
25073: GO 25075
25075: DISABLE
25076: LD_INT 0
25078: PPUSH
25079: PPUSH
25080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25081: LD_ADDR_VAR 0 3
25085: PUSH
25086: LD_INT 81
25088: PUSH
25089: LD_OWVAR 2
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 21
25100: PUSH
25101: LD_INT 1
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PPUSH
25112: CALL_OW 69
25116: ST_TO_ADDR
// if not tmp then
25117: LD_VAR 0 3
25121: NOT
25122: IFFALSE 25126
// exit ;
25124: GO 25273
// if tmp > 5 then
25126: LD_VAR 0 3
25130: PUSH
25131: LD_INT 5
25133: GREATER
25134: IFFALSE 25146
// k := 5 else
25136: LD_ADDR_VAR 0 2
25140: PUSH
25141: LD_INT 5
25143: ST_TO_ADDR
25144: GO 25156
// k := tmp ;
25146: LD_ADDR_VAR 0 2
25150: PUSH
25151: LD_VAR 0 3
25155: ST_TO_ADDR
// for i := 1 to k do
25156: LD_ADDR_VAR 0 1
25160: PUSH
25161: DOUBLE
25162: LD_INT 1
25164: DEC
25165: ST_TO_ADDR
25166: LD_VAR 0 2
25170: PUSH
25171: FOR_TO
25172: IFFALSE 25271
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25174: LD_VAR 0 3
25178: PUSH
25179: LD_VAR 0 1
25183: ARRAY
25184: PPUSH
25185: LD_VAR 0 1
25189: PUSH
25190: LD_INT 4
25192: MOD
25193: PUSH
25194: LD_INT 1
25196: PLUS
25197: PPUSH
25198: CALL_OW 259
25202: PUSH
25203: LD_INT 10
25205: LESS
25206: IFFALSE 25269
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25208: LD_VAR 0 3
25212: PUSH
25213: LD_VAR 0 1
25217: ARRAY
25218: PPUSH
25219: LD_VAR 0 1
25223: PUSH
25224: LD_INT 4
25226: MOD
25227: PUSH
25228: LD_INT 1
25230: PLUS
25231: PPUSH
25232: LD_VAR 0 3
25236: PUSH
25237: LD_VAR 0 1
25241: ARRAY
25242: PPUSH
25243: LD_VAR 0 1
25247: PUSH
25248: LD_INT 4
25250: MOD
25251: PUSH
25252: LD_INT 1
25254: PLUS
25255: PPUSH
25256: CALL_OW 259
25260: PUSH
25261: LD_INT 1
25263: PLUS
25264: PPUSH
25265: CALL_OW 237
25269: GO 25171
25271: POP
25272: POP
// end ;
25273: PPOPN 3
25275: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25276: LD_EXP 81
25280: PUSH
25281: LD_EXP 89
25285: AND
25286: IFFALSE 25306
25288: GO 25290
25290: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25291: LD_INT 4
25293: PPUSH
25294: LD_OWVAR 2
25298: PPUSH
25299: LD_INT 0
25301: PPUSH
25302: CALL_OW 324
25306: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25307: LD_EXP 81
25311: PUSH
25312: LD_EXP 118
25316: AND
25317: IFFALSE 25337
25319: GO 25321
25321: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25322: LD_INT 19
25324: PPUSH
25325: LD_OWVAR 2
25329: PPUSH
25330: LD_INT 0
25332: PPUSH
25333: CALL_OW 324
25337: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25338: LD_EXP 81
25342: PUSH
25343: LD_EXP 90
25347: AND
25348: IFFALSE 25450
25350: GO 25352
25352: DISABLE
25353: LD_INT 0
25355: PPUSH
25356: PPUSH
// begin enable ;
25357: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25358: LD_ADDR_VAR 0 2
25362: PUSH
25363: LD_INT 22
25365: PUSH
25366: LD_OWVAR 2
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 2
25377: PUSH
25378: LD_INT 34
25380: PUSH
25381: LD_INT 11
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 34
25390: PUSH
25391: LD_INT 30
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: LIST
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PPUSH
25407: CALL_OW 69
25411: ST_TO_ADDR
// if not tmp then
25412: LD_VAR 0 2
25416: NOT
25417: IFFALSE 25421
// exit ;
25419: GO 25450
// for i in tmp do
25421: LD_ADDR_VAR 0 1
25425: PUSH
25426: LD_VAR 0 2
25430: PUSH
25431: FOR_IN
25432: IFFALSE 25448
// begin SetLives ( i , 0 ) ;
25434: LD_VAR 0 1
25438: PPUSH
25439: LD_INT 0
25441: PPUSH
25442: CALL_OW 234
// end ;
25446: GO 25431
25448: POP
25449: POP
// end ;
25450: PPOPN 2
25452: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25453: LD_EXP 81
25457: PUSH
25458: LD_EXP 91
25462: AND
25463: IFFALSE 25483
25465: GO 25467
25467: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25468: LD_INT 32
25470: PPUSH
25471: LD_OWVAR 2
25475: PPUSH
25476: LD_INT 0
25478: PPUSH
25479: CALL_OW 324
25483: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25484: LD_EXP 81
25488: PUSH
25489: LD_EXP 92
25493: AND
25494: IFFALSE 25675
25496: GO 25498
25498: DISABLE
25499: LD_INT 0
25501: PPUSH
25502: PPUSH
25503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25504: LD_ADDR_VAR 0 2
25508: PUSH
25509: LD_INT 22
25511: PUSH
25512: LD_OWVAR 2
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 33
25523: PUSH
25524: LD_INT 3
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PPUSH
25535: CALL_OW 69
25539: ST_TO_ADDR
// if not tmp then
25540: LD_VAR 0 2
25544: NOT
25545: IFFALSE 25549
// exit ;
25547: GO 25675
// side := 0 ;
25549: LD_ADDR_VAR 0 3
25553: PUSH
25554: LD_INT 0
25556: ST_TO_ADDR
// for i := 1 to 8 do
25557: LD_ADDR_VAR 0 1
25561: PUSH
25562: DOUBLE
25563: LD_INT 1
25565: DEC
25566: ST_TO_ADDR
25567: LD_INT 8
25569: PUSH
25570: FOR_TO
25571: IFFALSE 25619
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25573: LD_OWVAR 2
25577: PUSH
25578: LD_VAR 0 1
25582: NONEQUAL
25583: PUSH
25584: LD_OWVAR 2
25588: PPUSH
25589: LD_VAR 0 1
25593: PPUSH
25594: CALL_OW 81
25598: PUSH
25599: LD_INT 2
25601: EQUAL
25602: AND
25603: IFFALSE 25617
// begin side := i ;
25605: LD_ADDR_VAR 0 3
25609: PUSH
25610: LD_VAR 0 1
25614: ST_TO_ADDR
// break ;
25615: GO 25619
// end ;
25617: GO 25570
25619: POP
25620: POP
// if not side then
25621: LD_VAR 0 3
25625: NOT
25626: IFFALSE 25630
// exit ;
25628: GO 25675
// for i := 1 to tmp do
25630: LD_ADDR_VAR 0 1
25634: PUSH
25635: DOUBLE
25636: LD_INT 1
25638: DEC
25639: ST_TO_ADDR
25640: LD_VAR 0 2
25644: PUSH
25645: FOR_TO
25646: IFFALSE 25673
// if Prob ( 60 ) then
25648: LD_INT 60
25650: PPUSH
25651: CALL_OW 13
25655: IFFALSE 25671
// SetSide ( i , side ) ;
25657: LD_VAR 0 1
25661: PPUSH
25662: LD_VAR 0 3
25666: PPUSH
25667: CALL_OW 235
25671: GO 25645
25673: POP
25674: POP
// end ;
25675: PPOPN 3
25677: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25678: LD_EXP 81
25682: PUSH
25683: LD_EXP 94
25687: AND
25688: IFFALSE 25807
25690: GO 25692
25692: DISABLE
25693: LD_INT 0
25695: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25696: LD_ADDR_VAR 0 1
25700: PUSH
25701: LD_INT 22
25703: PUSH
25704: LD_OWVAR 2
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 21
25715: PUSH
25716: LD_INT 1
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 3
25725: PUSH
25726: LD_INT 23
25728: PUSH
25729: LD_INT 0
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: LIST
25744: PPUSH
25745: CALL_OW 69
25749: PUSH
25750: FOR_IN
25751: IFFALSE 25805
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25753: LD_VAR 0 1
25757: PPUSH
25758: CALL_OW 257
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: LD_INT 2
25768: PUSH
25769: LD_INT 3
25771: PUSH
25772: LD_INT 4
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: IN
25781: IFFALSE 25803
// SetClass ( un , rand ( 1 , 4 ) ) ;
25783: LD_VAR 0 1
25787: PPUSH
25788: LD_INT 1
25790: PPUSH
25791: LD_INT 4
25793: PPUSH
25794: CALL_OW 12
25798: PPUSH
25799: CALL_OW 336
25803: GO 25750
25805: POP
25806: POP
// end ;
25807: PPOPN 1
25809: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25810: LD_EXP 81
25814: PUSH
25815: LD_EXP 93
25819: AND
25820: IFFALSE 25899
25822: GO 25824
25824: DISABLE
25825: LD_INT 0
25827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25828: LD_ADDR_VAR 0 1
25832: PUSH
25833: LD_INT 22
25835: PUSH
25836: LD_OWVAR 2
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 21
25847: PUSH
25848: LD_INT 3
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PPUSH
25859: CALL_OW 69
25863: ST_TO_ADDR
// if not tmp then
25864: LD_VAR 0 1
25868: NOT
25869: IFFALSE 25873
// exit ;
25871: GO 25899
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25873: LD_VAR 0 1
25877: PUSH
25878: LD_INT 1
25880: PPUSH
25881: LD_VAR 0 1
25885: PPUSH
25886: CALL_OW 12
25890: ARRAY
25891: PPUSH
25892: LD_INT 100
25894: PPUSH
25895: CALL_OW 234
// end ;
25899: PPOPN 1
25901: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25902: LD_EXP 81
25906: PUSH
25907: LD_EXP 95
25911: AND
25912: IFFALSE 26010
25914: GO 25916
25916: DISABLE
25917: LD_INT 0
25919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25920: LD_ADDR_VAR 0 1
25924: PUSH
25925: LD_INT 22
25927: PUSH
25928: LD_OWVAR 2
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 21
25939: PUSH
25940: LD_INT 1
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PPUSH
25951: CALL_OW 69
25955: ST_TO_ADDR
// if not tmp then
25956: LD_VAR 0 1
25960: NOT
25961: IFFALSE 25965
// exit ;
25963: GO 26010
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25965: LD_VAR 0 1
25969: PUSH
25970: LD_INT 1
25972: PPUSH
25973: LD_VAR 0 1
25977: PPUSH
25978: CALL_OW 12
25982: ARRAY
25983: PPUSH
25984: LD_INT 1
25986: PPUSH
25987: LD_INT 4
25989: PPUSH
25990: CALL_OW 12
25994: PPUSH
25995: LD_INT 3000
25997: PPUSH
25998: LD_INT 9000
26000: PPUSH
26001: CALL_OW 12
26005: PPUSH
26006: CALL_OW 492
// end ;
26010: PPOPN 1
26012: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26013: LD_EXP 81
26017: PUSH
26018: LD_EXP 96
26022: AND
26023: IFFALSE 26043
26025: GO 26027
26027: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26028: LD_INT 1
26030: PPUSH
26031: LD_OWVAR 2
26035: PPUSH
26036: LD_INT 0
26038: PPUSH
26039: CALL_OW 324
26043: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26044: LD_EXP 81
26048: PUSH
26049: LD_EXP 97
26053: AND
26054: IFFALSE 26137
26056: GO 26058
26058: DISABLE
26059: LD_INT 0
26061: PPUSH
26062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26063: LD_ADDR_VAR 0 2
26067: PUSH
26068: LD_INT 22
26070: PUSH
26071: LD_OWVAR 2
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 21
26082: PUSH
26083: LD_INT 3
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PPUSH
26094: CALL_OW 69
26098: ST_TO_ADDR
// if not tmp then
26099: LD_VAR 0 2
26103: NOT
26104: IFFALSE 26108
// exit ;
26106: GO 26137
// for i in tmp do
26108: LD_ADDR_VAR 0 1
26112: PUSH
26113: LD_VAR 0 2
26117: PUSH
26118: FOR_IN
26119: IFFALSE 26135
// SetBLevel ( i , 10 ) ;
26121: LD_VAR 0 1
26125: PPUSH
26126: LD_INT 10
26128: PPUSH
26129: CALL_OW 241
26133: GO 26118
26135: POP
26136: POP
// end ;
26137: PPOPN 2
26139: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26140: LD_EXP 81
26144: PUSH
26145: LD_EXP 98
26149: AND
26150: IFFALSE 26261
26152: GO 26154
26154: DISABLE
26155: LD_INT 0
26157: PPUSH
26158: PPUSH
26159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26160: LD_ADDR_VAR 0 3
26164: PUSH
26165: LD_INT 22
26167: PUSH
26168: LD_OWVAR 2
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 25
26179: PUSH
26180: LD_INT 1
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PPUSH
26191: CALL_OW 69
26195: ST_TO_ADDR
// if not tmp then
26196: LD_VAR 0 3
26200: NOT
26201: IFFALSE 26205
// exit ;
26203: GO 26261
// un := tmp [ rand ( 1 , tmp ) ] ;
26205: LD_ADDR_VAR 0 2
26209: PUSH
26210: LD_VAR 0 3
26214: PUSH
26215: LD_INT 1
26217: PPUSH
26218: LD_VAR 0 3
26222: PPUSH
26223: CALL_OW 12
26227: ARRAY
26228: ST_TO_ADDR
// if Crawls ( un ) then
26229: LD_VAR 0 2
26233: PPUSH
26234: CALL_OW 318
26238: IFFALSE 26249
// ComWalk ( un ) ;
26240: LD_VAR 0 2
26244: PPUSH
26245: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26249: LD_VAR 0 2
26253: PPUSH
26254: LD_INT 5
26256: PPUSH
26257: CALL_OW 336
// end ;
26261: PPOPN 3
26263: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26264: LD_EXP 81
26268: PUSH
26269: LD_EXP 99
26273: AND
26274: PUSH
26275: LD_OWVAR 67
26279: PUSH
26280: LD_INT 4
26282: LESS
26283: AND
26284: IFFALSE 26303
26286: GO 26288
26288: DISABLE
// begin Difficulty := Difficulty + 1 ;
26289: LD_ADDR_OWVAR 67
26293: PUSH
26294: LD_OWVAR 67
26298: PUSH
26299: LD_INT 1
26301: PLUS
26302: ST_TO_ADDR
// end ;
26303: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26304: LD_EXP 81
26308: PUSH
26309: LD_EXP 100
26313: AND
26314: IFFALSE 26417
26316: GO 26318
26318: DISABLE
26319: LD_INT 0
26321: PPUSH
// begin for i := 1 to 5 do
26322: LD_ADDR_VAR 0 1
26326: PUSH
26327: DOUBLE
26328: LD_INT 1
26330: DEC
26331: ST_TO_ADDR
26332: LD_INT 5
26334: PUSH
26335: FOR_TO
26336: IFFALSE 26415
// begin uc_nation := nation_nature ;
26338: LD_ADDR_OWVAR 21
26342: PUSH
26343: LD_INT 0
26345: ST_TO_ADDR
// uc_side := 0 ;
26346: LD_ADDR_OWVAR 20
26350: PUSH
26351: LD_INT 0
26353: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26354: LD_ADDR_OWVAR 29
26358: PUSH
26359: LD_INT 12
26361: PUSH
26362: LD_INT 12
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: ST_TO_ADDR
// hc_agressivity := 20 ;
26369: LD_ADDR_OWVAR 35
26373: PUSH
26374: LD_INT 20
26376: ST_TO_ADDR
// hc_class := class_tiger ;
26377: LD_ADDR_OWVAR 28
26381: PUSH
26382: LD_INT 14
26384: ST_TO_ADDR
// hc_gallery :=  ;
26385: LD_ADDR_OWVAR 33
26389: PUSH
26390: LD_STRING 
26392: ST_TO_ADDR
// hc_name :=  ;
26393: LD_ADDR_OWVAR 26
26397: PUSH
26398: LD_STRING 
26400: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26401: CALL_OW 44
26405: PPUSH
26406: LD_INT 0
26408: PPUSH
26409: CALL_OW 51
// end ;
26413: GO 26335
26415: POP
26416: POP
// end ;
26417: PPOPN 1
26419: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26420: LD_EXP 81
26424: PUSH
26425: LD_EXP 101
26429: AND
26430: IFFALSE 26439
26432: GO 26434
26434: DISABLE
// StreamSibBomb ;
26435: CALL 26440 0 0
26439: END
// export function StreamSibBomb ; var i , x , y ; begin
26440: LD_INT 0
26442: PPUSH
26443: PPUSH
26444: PPUSH
26445: PPUSH
// result := false ;
26446: LD_ADDR_VAR 0 1
26450: PUSH
26451: LD_INT 0
26453: ST_TO_ADDR
// for i := 1 to 16 do
26454: LD_ADDR_VAR 0 2
26458: PUSH
26459: DOUBLE
26460: LD_INT 1
26462: DEC
26463: ST_TO_ADDR
26464: LD_INT 16
26466: PUSH
26467: FOR_TO
26468: IFFALSE 26667
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26470: LD_ADDR_VAR 0 3
26474: PUSH
26475: LD_INT 10
26477: PUSH
26478: LD_INT 20
26480: PUSH
26481: LD_INT 30
26483: PUSH
26484: LD_INT 40
26486: PUSH
26487: LD_INT 50
26489: PUSH
26490: LD_INT 60
26492: PUSH
26493: LD_INT 70
26495: PUSH
26496: LD_INT 80
26498: PUSH
26499: LD_INT 90
26501: PUSH
26502: LD_INT 100
26504: PUSH
26505: LD_INT 110
26507: PUSH
26508: LD_INT 120
26510: PUSH
26511: LD_INT 130
26513: PUSH
26514: LD_INT 140
26516: PUSH
26517: LD_INT 150
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 1
26539: PPUSH
26540: LD_INT 15
26542: PPUSH
26543: CALL_OW 12
26547: ARRAY
26548: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26549: LD_ADDR_VAR 0 4
26553: PUSH
26554: LD_INT 10
26556: PUSH
26557: LD_INT 20
26559: PUSH
26560: LD_INT 30
26562: PUSH
26563: LD_INT 40
26565: PUSH
26566: LD_INT 50
26568: PUSH
26569: LD_INT 60
26571: PUSH
26572: LD_INT 70
26574: PUSH
26575: LD_INT 80
26577: PUSH
26578: LD_INT 90
26580: PUSH
26581: LD_INT 100
26583: PUSH
26584: LD_INT 110
26586: PUSH
26587: LD_INT 120
26589: PUSH
26590: LD_INT 130
26592: PUSH
26593: LD_INT 140
26595: PUSH
26596: LD_INT 150
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 1
26618: PPUSH
26619: LD_INT 15
26621: PPUSH
26622: CALL_OW 12
26626: ARRAY
26627: ST_TO_ADDR
// if ValidHex ( x , y ) then
26628: LD_VAR 0 3
26632: PPUSH
26633: LD_VAR 0 4
26637: PPUSH
26638: CALL_OW 488
26642: IFFALSE 26665
// begin result := [ x , y ] ;
26644: LD_ADDR_VAR 0 1
26648: PUSH
26649: LD_VAR 0 3
26653: PUSH
26654: LD_VAR 0 4
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: ST_TO_ADDR
// break ;
26663: GO 26667
// end ; end ;
26665: GO 26467
26667: POP
26668: POP
// if result then
26669: LD_VAR 0 1
26673: IFFALSE 26733
// begin ToLua ( playSibBomb() ) ;
26675: LD_STRING playSibBomb()
26677: PPUSH
26678: CALL_OW 559
// wait ( 0 0$14 ) ;
26682: LD_INT 490
26684: PPUSH
26685: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26689: LD_VAR 0 1
26693: PUSH
26694: LD_INT 1
26696: ARRAY
26697: PPUSH
26698: LD_VAR 0 1
26702: PUSH
26703: LD_INT 2
26705: ARRAY
26706: PPUSH
26707: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26711: LD_VAR 0 1
26715: PUSH
26716: LD_INT 1
26718: ARRAY
26719: PPUSH
26720: LD_VAR 0 1
26724: PUSH
26725: LD_INT 2
26727: ARRAY
26728: PPUSH
26729: CALL_OW 429
// end ; end ;
26733: LD_VAR 0 1
26737: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26738: LD_EXP 81
26742: PUSH
26743: LD_EXP 103
26747: AND
26748: IFFALSE 26760
26750: GO 26752
26752: DISABLE
// YouLost (  ) ;
26753: LD_STRING 
26755: PPUSH
26756: CALL_OW 104
26760: END
// every 0 0$1 trigger StreamModeActive and sFog do
26761: LD_EXP 81
26765: PUSH
26766: LD_EXP 102
26770: AND
26771: IFFALSE 26785
26773: GO 26775
26775: DISABLE
// FogOff ( your_side ) ;
26776: LD_OWVAR 2
26780: PPUSH
26781: CALL_OW 344
26785: END
// every 0 0$1 trigger StreamModeActive and sSun do
26786: LD_EXP 81
26790: PUSH
26791: LD_EXP 104
26795: AND
26796: IFFALSE 26824
26798: GO 26800
26800: DISABLE
// begin solar_recharge_percent := 0 ;
26801: LD_ADDR_OWVAR 79
26805: PUSH
26806: LD_INT 0
26808: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26809: LD_INT 10500
26811: PPUSH
26812: CALL_OW 67
// solar_recharge_percent := 100 ;
26816: LD_ADDR_OWVAR 79
26820: PUSH
26821: LD_INT 100
26823: ST_TO_ADDR
// end ;
26824: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26825: LD_EXP 81
26829: PUSH
26830: LD_EXP 105
26834: AND
26835: IFFALSE 27074
26837: GO 26839
26839: DISABLE
26840: LD_INT 0
26842: PPUSH
26843: PPUSH
26844: PPUSH
// begin tmp := [ ] ;
26845: LD_ADDR_VAR 0 3
26849: PUSH
26850: EMPTY
26851: ST_TO_ADDR
// for i := 1 to 6 do
26852: LD_ADDR_VAR 0 1
26856: PUSH
26857: DOUBLE
26858: LD_INT 1
26860: DEC
26861: ST_TO_ADDR
26862: LD_INT 6
26864: PUSH
26865: FOR_TO
26866: IFFALSE 26971
// begin uc_nation := nation_nature ;
26868: LD_ADDR_OWVAR 21
26872: PUSH
26873: LD_INT 0
26875: ST_TO_ADDR
// uc_side := 0 ;
26876: LD_ADDR_OWVAR 20
26880: PUSH
26881: LD_INT 0
26883: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26884: LD_ADDR_OWVAR 29
26888: PUSH
26889: LD_INT 12
26891: PUSH
26892: LD_INT 12
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: ST_TO_ADDR
// hc_agressivity := 20 ;
26899: LD_ADDR_OWVAR 35
26903: PUSH
26904: LD_INT 20
26906: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26907: LD_ADDR_OWVAR 28
26911: PUSH
26912: LD_INT 17
26914: ST_TO_ADDR
// hc_gallery :=  ;
26915: LD_ADDR_OWVAR 33
26919: PUSH
26920: LD_STRING 
26922: ST_TO_ADDR
// hc_name :=  ;
26923: LD_ADDR_OWVAR 26
26927: PUSH
26928: LD_STRING 
26930: ST_TO_ADDR
// un := CreateHuman ;
26931: LD_ADDR_VAR 0 2
26935: PUSH
26936: CALL_OW 44
26940: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26941: LD_VAR 0 2
26945: PPUSH
26946: LD_INT 1
26948: PPUSH
26949: CALL_OW 51
// tmp := tmp ^ un ;
26953: LD_ADDR_VAR 0 3
26957: PUSH
26958: LD_VAR 0 3
26962: PUSH
26963: LD_VAR 0 2
26967: ADD
26968: ST_TO_ADDR
// end ;
26969: GO 26865
26971: POP
26972: POP
// repeat wait ( 0 0$1 ) ;
26973: LD_INT 35
26975: PPUSH
26976: CALL_OW 67
// for un in tmp do
26980: LD_ADDR_VAR 0 2
26984: PUSH
26985: LD_VAR 0 3
26989: PUSH
26990: FOR_IN
26991: IFFALSE 27065
// begin if IsDead ( un ) then
26993: LD_VAR 0 2
26997: PPUSH
26998: CALL_OW 301
27002: IFFALSE 27022
// begin tmp := tmp diff un ;
27004: LD_ADDR_VAR 0 3
27008: PUSH
27009: LD_VAR 0 3
27013: PUSH
27014: LD_VAR 0 2
27018: DIFF
27019: ST_TO_ADDR
// continue ;
27020: GO 26990
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27022: LD_VAR 0 2
27026: PPUSH
27027: LD_INT 3
27029: PUSH
27030: LD_INT 22
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PPUSH
27044: CALL_OW 69
27048: PPUSH
27049: LD_VAR 0 2
27053: PPUSH
27054: CALL_OW 74
27058: PPUSH
27059: CALL_OW 115
// end ;
27063: GO 26990
27065: POP
27066: POP
// until not tmp ;
27067: LD_VAR 0 3
27071: NOT
27072: IFFALSE 26973
// end ;
27074: PPOPN 3
27076: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27077: LD_EXP 81
27081: PUSH
27082: LD_EXP 106
27086: AND
27087: IFFALSE 27141
27089: GO 27091
27091: DISABLE
// begin ToLua ( displayTroll(); ) ;
27092: LD_STRING displayTroll();
27094: PPUSH
27095: CALL_OW 559
// wait ( 3 3$00 ) ;
27099: LD_INT 6300
27101: PPUSH
27102: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27106: LD_STRING hideTroll();
27108: PPUSH
27109: CALL_OW 559
// wait ( 1 1$00 ) ;
27113: LD_INT 2100
27115: PPUSH
27116: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27120: LD_STRING displayTroll();
27122: PPUSH
27123: CALL_OW 559
// wait ( 1 1$00 ) ;
27127: LD_INT 2100
27129: PPUSH
27130: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27134: LD_STRING hideTroll();
27136: PPUSH
27137: CALL_OW 559
// end ;
27141: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27142: LD_EXP 81
27146: PUSH
27147: LD_EXP 107
27151: AND
27152: IFFALSE 27215
27154: GO 27156
27156: DISABLE
27157: LD_INT 0
27159: PPUSH
// begin p := 0 ;
27160: LD_ADDR_VAR 0 1
27164: PUSH
27165: LD_INT 0
27167: ST_TO_ADDR
// repeat game_speed := 1 ;
27168: LD_ADDR_OWVAR 65
27172: PUSH
27173: LD_INT 1
27175: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27176: LD_INT 35
27178: PPUSH
27179: CALL_OW 67
// p := p + 1 ;
27183: LD_ADDR_VAR 0 1
27187: PUSH
27188: LD_VAR 0 1
27192: PUSH
27193: LD_INT 1
27195: PLUS
27196: ST_TO_ADDR
// until p >= 60 ;
27197: LD_VAR 0 1
27201: PUSH
27202: LD_INT 60
27204: GREATEREQUAL
27205: IFFALSE 27168
// game_speed := 4 ;
27207: LD_ADDR_OWVAR 65
27211: PUSH
27212: LD_INT 4
27214: ST_TO_ADDR
// end ;
27215: PPOPN 1
27217: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27218: LD_EXP 81
27222: PUSH
27223: LD_EXP 108
27227: AND
27228: IFFALSE 27374
27230: GO 27232
27232: DISABLE
27233: LD_INT 0
27235: PPUSH
27236: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27237: LD_ADDR_VAR 0 1
27241: PUSH
27242: LD_INT 22
27244: PUSH
27245: LD_OWVAR 2
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 2
27256: PUSH
27257: LD_INT 30
27259: PUSH
27260: LD_INT 0
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 30
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: LIST
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PPUSH
27286: CALL_OW 69
27290: ST_TO_ADDR
// if not depot then
27291: LD_VAR 0 1
27295: NOT
27296: IFFALSE 27300
// exit ;
27298: GO 27374
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27300: LD_ADDR_VAR 0 2
27304: PUSH
27305: LD_VAR 0 1
27309: PUSH
27310: LD_INT 1
27312: PPUSH
27313: LD_VAR 0 1
27317: PPUSH
27318: CALL_OW 12
27322: ARRAY
27323: PPUSH
27324: CALL_OW 274
27328: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27329: LD_VAR 0 2
27333: PPUSH
27334: LD_INT 1
27336: PPUSH
27337: LD_INT 0
27339: PPUSH
27340: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27344: LD_VAR 0 2
27348: PPUSH
27349: LD_INT 2
27351: PPUSH
27352: LD_INT 0
27354: PPUSH
27355: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27359: LD_VAR 0 2
27363: PPUSH
27364: LD_INT 3
27366: PPUSH
27367: LD_INT 0
27369: PPUSH
27370: CALL_OW 277
// end ;
27374: PPOPN 2
27376: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27377: LD_EXP 81
27381: PUSH
27382: LD_EXP 109
27386: AND
27387: IFFALSE 27484
27389: GO 27391
27391: DISABLE
27392: LD_INT 0
27394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27395: LD_ADDR_VAR 0 1
27399: PUSH
27400: LD_INT 22
27402: PUSH
27403: LD_OWVAR 2
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 21
27414: PUSH
27415: LD_INT 1
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 3
27424: PUSH
27425: LD_INT 23
27427: PUSH
27428: LD_INT 0
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: LIST
27443: PPUSH
27444: CALL_OW 69
27448: ST_TO_ADDR
// if not tmp then
27449: LD_VAR 0 1
27453: NOT
27454: IFFALSE 27458
// exit ;
27456: GO 27484
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27458: LD_VAR 0 1
27462: PUSH
27463: LD_INT 1
27465: PPUSH
27466: LD_VAR 0 1
27470: PPUSH
27471: CALL_OW 12
27475: ARRAY
27476: PPUSH
27477: LD_INT 200
27479: PPUSH
27480: CALL_OW 234
// end ;
27484: PPOPN 1
27486: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27487: LD_EXP 81
27491: PUSH
27492: LD_EXP 110
27496: AND
27497: IFFALSE 27576
27499: GO 27501
27501: DISABLE
27502: LD_INT 0
27504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27505: LD_ADDR_VAR 0 1
27509: PUSH
27510: LD_INT 22
27512: PUSH
27513: LD_OWVAR 2
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 21
27524: PUSH
27525: LD_INT 2
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PPUSH
27536: CALL_OW 69
27540: ST_TO_ADDR
// if not tmp then
27541: LD_VAR 0 1
27545: NOT
27546: IFFALSE 27550
// exit ;
27548: GO 27576
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27550: LD_VAR 0 1
27554: PUSH
27555: LD_INT 1
27557: PPUSH
27558: LD_VAR 0 1
27562: PPUSH
27563: CALL_OW 12
27567: ARRAY
27568: PPUSH
27569: LD_INT 60
27571: PPUSH
27572: CALL_OW 234
// end ;
27576: PPOPN 1
27578: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27579: LD_EXP 81
27583: PUSH
27584: LD_EXP 111
27588: AND
27589: IFFALSE 27688
27591: GO 27593
27593: DISABLE
27594: LD_INT 0
27596: PPUSH
27597: PPUSH
// begin enable ;
27598: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27599: LD_ADDR_VAR 0 1
27603: PUSH
27604: LD_INT 22
27606: PUSH
27607: LD_OWVAR 2
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 61
27618: PUSH
27619: EMPTY
27620: LIST
27621: PUSH
27622: LD_INT 33
27624: PUSH
27625: LD_INT 2
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: LIST
27636: PPUSH
27637: CALL_OW 69
27641: ST_TO_ADDR
// if not tmp then
27642: LD_VAR 0 1
27646: NOT
27647: IFFALSE 27651
// exit ;
27649: GO 27688
// for i in tmp do
27651: LD_ADDR_VAR 0 2
27655: PUSH
27656: LD_VAR 0 1
27660: PUSH
27661: FOR_IN
27662: IFFALSE 27686
// if IsControledBy ( i ) then
27664: LD_VAR 0 2
27668: PPUSH
27669: CALL_OW 312
27673: IFFALSE 27684
// ComUnlink ( i ) ;
27675: LD_VAR 0 2
27679: PPUSH
27680: CALL_OW 136
27684: GO 27661
27686: POP
27687: POP
// end ;
27688: PPOPN 2
27690: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27691: LD_EXP 81
27695: PUSH
27696: LD_EXP 112
27700: AND
27701: IFFALSE 27841
27703: GO 27705
27705: DISABLE
27706: LD_INT 0
27708: PPUSH
27709: PPUSH
// begin ToLua ( displayPowell(); ) ;
27710: LD_STRING displayPowell();
27712: PPUSH
27713: CALL_OW 559
// uc_side := 0 ;
27717: LD_ADDR_OWVAR 20
27721: PUSH
27722: LD_INT 0
27724: ST_TO_ADDR
// uc_nation := 2 ;
27725: LD_ADDR_OWVAR 21
27729: PUSH
27730: LD_INT 2
27732: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27733: LD_ADDR_OWVAR 37
27737: PUSH
27738: LD_INT 14
27740: ST_TO_ADDR
// vc_engine := engine_siberite ;
27741: LD_ADDR_OWVAR 39
27745: PUSH
27746: LD_INT 3
27748: ST_TO_ADDR
// vc_control := control_apeman ;
27749: LD_ADDR_OWVAR 38
27753: PUSH
27754: LD_INT 5
27756: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27757: LD_ADDR_OWVAR 40
27761: PUSH
27762: LD_INT 29
27764: ST_TO_ADDR
// un := CreateVehicle ;
27765: LD_ADDR_VAR 0 2
27769: PUSH
27770: CALL_OW 45
27774: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27775: LD_VAR 0 2
27779: PPUSH
27780: LD_INT 1
27782: PPUSH
27783: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27787: LD_INT 35
27789: PPUSH
27790: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27794: LD_VAR 0 2
27798: PPUSH
27799: LD_INT 22
27801: PUSH
27802: LD_OWVAR 2
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PPUSH
27811: CALL_OW 69
27815: PPUSH
27816: LD_VAR 0 2
27820: PPUSH
27821: CALL_OW 74
27825: PPUSH
27826: CALL_OW 115
// until IsDead ( un ) ;
27830: LD_VAR 0 2
27834: PPUSH
27835: CALL_OW 301
27839: IFFALSE 27787
// end ;
27841: PPOPN 2
27843: END
// every 0 0$1 trigger StreamModeActive and sStu do
27844: LD_EXP 81
27848: PUSH
27849: LD_EXP 120
27853: AND
27854: IFFALSE 27870
27856: GO 27858
27858: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27859: LD_STRING displayStucuk();
27861: PPUSH
27862: CALL_OW 559
// ResetFog ;
27866: CALL_OW 335
// end ;
27870: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27871: LD_EXP 81
27875: PUSH
27876: LD_EXP 113
27880: AND
27881: IFFALSE 28022
27883: GO 27885
27885: DISABLE
27886: LD_INT 0
27888: PPUSH
27889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27890: LD_ADDR_VAR 0 2
27894: PUSH
27895: LD_INT 22
27897: PUSH
27898: LD_OWVAR 2
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 21
27909: PUSH
27910: LD_INT 1
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PPUSH
27921: CALL_OW 69
27925: ST_TO_ADDR
// if not tmp then
27926: LD_VAR 0 2
27930: NOT
27931: IFFALSE 27935
// exit ;
27933: GO 28022
// un := tmp [ rand ( 1 , tmp ) ] ;
27935: LD_ADDR_VAR 0 1
27939: PUSH
27940: LD_VAR 0 2
27944: PUSH
27945: LD_INT 1
27947: PPUSH
27948: LD_VAR 0 2
27952: PPUSH
27953: CALL_OW 12
27957: ARRAY
27958: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27959: LD_VAR 0 1
27963: PPUSH
27964: LD_INT 0
27966: PPUSH
27967: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27971: LD_VAR 0 1
27975: PPUSH
27976: LD_OWVAR 3
27980: PUSH
27981: LD_VAR 0 1
27985: DIFF
27986: PPUSH
27987: LD_VAR 0 1
27991: PPUSH
27992: CALL_OW 74
27996: PPUSH
27997: CALL_OW 115
// wait ( 0 0$20 ) ;
28001: LD_INT 700
28003: PPUSH
28004: CALL_OW 67
// SetSide ( un , your_side ) ;
28008: LD_VAR 0 1
28012: PPUSH
28013: LD_OWVAR 2
28017: PPUSH
28018: CALL_OW 235
// end ;
28022: PPOPN 2
28024: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28025: LD_EXP 81
28029: PUSH
28030: LD_EXP 114
28034: AND
28035: IFFALSE 28141
28037: GO 28039
28039: DISABLE
28040: LD_INT 0
28042: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28043: LD_ADDR_VAR 0 1
28047: PUSH
28048: LD_INT 22
28050: PUSH
28051: LD_OWVAR 2
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 2
28062: PUSH
28063: LD_INT 30
28065: PUSH
28066: LD_INT 0
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 30
28075: PUSH
28076: LD_INT 1
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: LIST
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PPUSH
28092: CALL_OW 69
28096: ST_TO_ADDR
// if not depot then
28097: LD_VAR 0 1
28101: NOT
28102: IFFALSE 28106
// exit ;
28104: GO 28141
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28106: LD_VAR 0 1
28110: PUSH
28111: LD_INT 1
28113: ARRAY
28114: PPUSH
28115: CALL_OW 250
28119: PPUSH
28120: LD_VAR 0 1
28124: PUSH
28125: LD_INT 1
28127: ARRAY
28128: PPUSH
28129: CALL_OW 251
28133: PPUSH
28134: LD_INT 70
28136: PPUSH
28137: CALL_OW 495
// end ;
28141: PPOPN 1
28143: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28144: LD_EXP 81
28148: PUSH
28149: LD_EXP 115
28153: AND
28154: IFFALSE 28365
28156: GO 28158
28158: DISABLE
28159: LD_INT 0
28161: PPUSH
28162: PPUSH
28163: PPUSH
28164: PPUSH
28165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28166: LD_ADDR_VAR 0 5
28170: PUSH
28171: LD_INT 22
28173: PUSH
28174: LD_OWVAR 2
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 21
28185: PUSH
28186: LD_INT 1
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PPUSH
28197: CALL_OW 69
28201: ST_TO_ADDR
// if not tmp then
28202: LD_VAR 0 5
28206: NOT
28207: IFFALSE 28211
// exit ;
28209: GO 28365
// for i in tmp do
28211: LD_ADDR_VAR 0 1
28215: PUSH
28216: LD_VAR 0 5
28220: PUSH
28221: FOR_IN
28222: IFFALSE 28363
// begin d := rand ( 0 , 5 ) ;
28224: LD_ADDR_VAR 0 4
28228: PUSH
28229: LD_INT 0
28231: PPUSH
28232: LD_INT 5
28234: PPUSH
28235: CALL_OW 12
28239: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28240: LD_ADDR_VAR 0 2
28244: PUSH
28245: LD_VAR 0 1
28249: PPUSH
28250: CALL_OW 250
28254: PPUSH
28255: LD_VAR 0 4
28259: PPUSH
28260: LD_INT 3
28262: PPUSH
28263: LD_INT 12
28265: PPUSH
28266: CALL_OW 12
28270: PPUSH
28271: CALL_OW 272
28275: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28276: LD_ADDR_VAR 0 3
28280: PUSH
28281: LD_VAR 0 1
28285: PPUSH
28286: CALL_OW 251
28290: PPUSH
28291: LD_VAR 0 4
28295: PPUSH
28296: LD_INT 3
28298: PPUSH
28299: LD_INT 12
28301: PPUSH
28302: CALL_OW 12
28306: PPUSH
28307: CALL_OW 273
28311: ST_TO_ADDR
// if ValidHex ( x , y ) then
28312: LD_VAR 0 2
28316: PPUSH
28317: LD_VAR 0 3
28321: PPUSH
28322: CALL_OW 488
28326: IFFALSE 28361
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28328: LD_VAR 0 1
28332: PPUSH
28333: LD_VAR 0 2
28337: PPUSH
28338: LD_VAR 0 3
28342: PPUSH
28343: LD_INT 3
28345: PPUSH
28346: LD_INT 6
28348: PPUSH
28349: CALL_OW 12
28353: PPUSH
28354: LD_INT 1
28356: PPUSH
28357: CALL_OW 483
// end ;
28361: GO 28221
28363: POP
28364: POP
// end ;
28365: PPOPN 5
28367: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28368: LD_EXP 81
28372: PUSH
28373: LD_EXP 116
28377: AND
28378: IFFALSE 28472
28380: GO 28382
28382: DISABLE
28383: LD_INT 0
28385: PPUSH
28386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28387: LD_ADDR_VAR 0 2
28391: PUSH
28392: LD_INT 22
28394: PUSH
28395: LD_OWVAR 2
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 32
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 21
28416: PUSH
28417: LD_INT 2
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: LIST
28428: PPUSH
28429: CALL_OW 69
28433: ST_TO_ADDR
// if not tmp then
28434: LD_VAR 0 2
28438: NOT
28439: IFFALSE 28443
// exit ;
28441: GO 28472
// for i in tmp do
28443: LD_ADDR_VAR 0 1
28447: PUSH
28448: LD_VAR 0 2
28452: PUSH
28453: FOR_IN
28454: IFFALSE 28470
// SetFuel ( i , 0 ) ;
28456: LD_VAR 0 1
28460: PPUSH
28461: LD_INT 0
28463: PPUSH
28464: CALL_OW 240
28468: GO 28453
28470: POP
28471: POP
// end ;
28472: PPOPN 2
28474: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28475: LD_EXP 81
28479: PUSH
28480: LD_EXP 117
28484: AND
28485: IFFALSE 28551
28487: GO 28489
28489: DISABLE
28490: LD_INT 0
28492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28493: LD_ADDR_VAR 0 1
28497: PUSH
28498: LD_INT 22
28500: PUSH
28501: LD_OWVAR 2
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 30
28512: PUSH
28513: LD_INT 29
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PPUSH
28524: CALL_OW 69
28528: ST_TO_ADDR
// if not tmp then
28529: LD_VAR 0 1
28533: NOT
28534: IFFALSE 28538
// exit ;
28536: GO 28551
// DestroyUnit ( tmp [ 1 ] ) ;
28538: LD_VAR 0 1
28542: PUSH
28543: LD_INT 1
28545: ARRAY
28546: PPUSH
28547: CALL_OW 65
// end ;
28551: PPOPN 1
28553: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28554: LD_EXP 81
28558: PUSH
28559: LD_EXP 119
28563: AND
28564: IFFALSE 28693
28566: GO 28568
28568: DISABLE
28569: LD_INT 0
28571: PPUSH
// begin uc_side := 0 ;
28572: LD_ADDR_OWVAR 20
28576: PUSH
28577: LD_INT 0
28579: ST_TO_ADDR
// uc_nation := nation_arabian ;
28580: LD_ADDR_OWVAR 21
28584: PUSH
28585: LD_INT 2
28587: ST_TO_ADDR
// hc_gallery :=  ;
28588: LD_ADDR_OWVAR 33
28592: PUSH
28593: LD_STRING 
28595: ST_TO_ADDR
// hc_name :=  ;
28596: LD_ADDR_OWVAR 26
28600: PUSH
28601: LD_STRING 
28603: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28604: LD_INT 1
28606: PPUSH
28607: LD_INT 11
28609: PPUSH
28610: LD_INT 10
28612: PPUSH
28613: CALL_OW 380
// un := CreateHuman ;
28617: LD_ADDR_VAR 0 1
28621: PUSH
28622: CALL_OW 44
28626: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28627: LD_VAR 0 1
28631: PPUSH
28632: LD_INT 1
28634: PPUSH
28635: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28639: LD_INT 35
28641: PPUSH
28642: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28646: LD_VAR 0 1
28650: PPUSH
28651: LD_INT 22
28653: PUSH
28654: LD_OWVAR 2
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PPUSH
28663: CALL_OW 69
28667: PPUSH
28668: LD_VAR 0 1
28672: PPUSH
28673: CALL_OW 74
28677: PPUSH
28678: CALL_OW 115
// until IsDead ( un ) ;
28682: LD_VAR 0 1
28686: PPUSH
28687: CALL_OW 301
28691: IFFALSE 28639
// end ;
28693: PPOPN 1
28695: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28696: LD_EXP 81
28700: PUSH
28701: LD_EXP 121
28705: AND
28706: IFFALSE 28718
28708: GO 28710
28710: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28711: LD_STRING earthquake(getX(game), 0, 32)
28713: PPUSH
28714: CALL_OW 559
28718: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28719: LD_EXP 81
28723: PUSH
28724: LD_EXP 122
28728: AND
28729: IFFALSE 28820
28731: GO 28733
28733: DISABLE
28734: LD_INT 0
28736: PPUSH
// begin enable ;
28737: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28738: LD_ADDR_VAR 0 1
28742: PUSH
28743: LD_INT 22
28745: PUSH
28746: LD_OWVAR 2
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 21
28757: PUSH
28758: LD_INT 2
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 33
28767: PUSH
28768: LD_INT 3
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: LIST
28779: PPUSH
28780: CALL_OW 69
28784: ST_TO_ADDR
// if not tmp then
28785: LD_VAR 0 1
28789: NOT
28790: IFFALSE 28794
// exit ;
28792: GO 28820
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28794: LD_VAR 0 1
28798: PUSH
28799: LD_INT 1
28801: PPUSH
28802: LD_VAR 0 1
28806: PPUSH
28807: CALL_OW 12
28811: ARRAY
28812: PPUSH
28813: LD_INT 1
28815: PPUSH
28816: CALL_OW 234
// end ;
28820: PPOPN 1
28822: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28823: LD_EXP 81
28827: PUSH
28828: LD_EXP 123
28832: AND
28833: IFFALSE 28974
28835: GO 28837
28837: DISABLE
28838: LD_INT 0
28840: PPUSH
28841: PPUSH
28842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28843: LD_ADDR_VAR 0 3
28847: PUSH
28848: LD_INT 22
28850: PUSH
28851: LD_OWVAR 2
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 25
28862: PUSH
28863: LD_INT 1
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PPUSH
28874: CALL_OW 69
28878: ST_TO_ADDR
// if not tmp then
28879: LD_VAR 0 3
28883: NOT
28884: IFFALSE 28888
// exit ;
28886: GO 28974
// un := tmp [ rand ( 1 , tmp ) ] ;
28888: LD_ADDR_VAR 0 2
28892: PUSH
28893: LD_VAR 0 3
28897: PUSH
28898: LD_INT 1
28900: PPUSH
28901: LD_VAR 0 3
28905: PPUSH
28906: CALL_OW 12
28910: ARRAY
28911: ST_TO_ADDR
// if Crawls ( un ) then
28912: LD_VAR 0 2
28916: PPUSH
28917: CALL_OW 318
28921: IFFALSE 28932
// ComWalk ( un ) ;
28923: LD_VAR 0 2
28927: PPUSH
28928: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28932: LD_VAR 0 2
28936: PPUSH
28937: LD_INT 9
28939: PPUSH
28940: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28944: LD_INT 28
28946: PPUSH
28947: LD_OWVAR 2
28951: PPUSH
28952: LD_INT 2
28954: PPUSH
28955: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28959: LD_INT 29
28961: PPUSH
28962: LD_OWVAR 2
28966: PPUSH
28967: LD_INT 2
28969: PPUSH
28970: CALL_OW 322
// end ;
28974: PPOPN 3
28976: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28977: LD_EXP 81
28981: PUSH
28982: LD_EXP 124
28986: AND
28987: IFFALSE 29098
28989: GO 28991
28991: DISABLE
28992: LD_INT 0
28994: PPUSH
28995: PPUSH
28996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28997: LD_ADDR_VAR 0 3
29001: PUSH
29002: LD_INT 22
29004: PUSH
29005: LD_OWVAR 2
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 25
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PPUSH
29028: CALL_OW 69
29032: ST_TO_ADDR
// if not tmp then
29033: LD_VAR 0 3
29037: NOT
29038: IFFALSE 29042
// exit ;
29040: GO 29098
// un := tmp [ rand ( 1 , tmp ) ] ;
29042: LD_ADDR_VAR 0 2
29046: PUSH
29047: LD_VAR 0 3
29051: PUSH
29052: LD_INT 1
29054: PPUSH
29055: LD_VAR 0 3
29059: PPUSH
29060: CALL_OW 12
29064: ARRAY
29065: ST_TO_ADDR
// if Crawls ( un ) then
29066: LD_VAR 0 2
29070: PPUSH
29071: CALL_OW 318
29075: IFFALSE 29086
// ComWalk ( un ) ;
29077: LD_VAR 0 2
29081: PPUSH
29082: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29086: LD_VAR 0 2
29090: PPUSH
29091: LD_INT 8
29093: PPUSH
29094: CALL_OW 336
// end ;
29098: PPOPN 3
29100: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29101: LD_EXP 81
29105: PUSH
29106: LD_EXP 125
29110: AND
29111: IFFALSE 29255
29113: GO 29115
29115: DISABLE
29116: LD_INT 0
29118: PPUSH
29119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29120: LD_ADDR_VAR 0 2
29124: PUSH
29125: LD_INT 22
29127: PUSH
29128: LD_OWVAR 2
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 21
29139: PUSH
29140: LD_INT 2
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 2
29149: PUSH
29150: LD_INT 34
29152: PUSH
29153: LD_INT 12
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 34
29162: PUSH
29163: LD_INT 51
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 34
29172: PUSH
29173: LD_INT 32
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: LIST
29190: PPUSH
29191: CALL_OW 69
29195: ST_TO_ADDR
// if not tmp then
29196: LD_VAR 0 2
29200: NOT
29201: IFFALSE 29205
// exit ;
29203: GO 29255
// for i in tmp do
29205: LD_ADDR_VAR 0 1
29209: PUSH
29210: LD_VAR 0 2
29214: PUSH
29215: FOR_IN
29216: IFFALSE 29253
// if GetCargo ( i , mat_artifact ) = 0 then
29218: LD_VAR 0 1
29222: PPUSH
29223: LD_INT 4
29225: PPUSH
29226: CALL_OW 289
29230: PUSH
29231: LD_INT 0
29233: EQUAL
29234: IFFALSE 29251
// SetCargo ( i , mat_siberit , 100 ) ;
29236: LD_VAR 0 1
29240: PPUSH
29241: LD_INT 3
29243: PPUSH
29244: LD_INT 100
29246: PPUSH
29247: CALL_OW 290
29251: GO 29215
29253: POP
29254: POP
// end ;
29255: PPOPN 2
29257: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29258: LD_EXP 81
29262: PUSH
29263: LD_EXP 126
29267: AND
29268: IFFALSE 29451
29270: GO 29272
29272: DISABLE
29273: LD_INT 0
29275: PPUSH
29276: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29277: LD_ADDR_VAR 0 2
29281: PUSH
29282: LD_INT 22
29284: PUSH
29285: LD_OWVAR 2
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PPUSH
29294: CALL_OW 69
29298: ST_TO_ADDR
// if not tmp then
29299: LD_VAR 0 2
29303: NOT
29304: IFFALSE 29308
// exit ;
29306: GO 29451
// for i := 1 to 2 do
29308: LD_ADDR_VAR 0 1
29312: PUSH
29313: DOUBLE
29314: LD_INT 1
29316: DEC
29317: ST_TO_ADDR
29318: LD_INT 2
29320: PUSH
29321: FOR_TO
29322: IFFALSE 29449
// begin uc_side := your_side ;
29324: LD_ADDR_OWVAR 20
29328: PUSH
29329: LD_OWVAR 2
29333: ST_TO_ADDR
// uc_nation := nation_american ;
29334: LD_ADDR_OWVAR 21
29338: PUSH
29339: LD_INT 1
29341: ST_TO_ADDR
// vc_chassis := us_morphling ;
29342: LD_ADDR_OWVAR 37
29346: PUSH
29347: LD_INT 5
29349: ST_TO_ADDR
// vc_engine := engine_siberite ;
29350: LD_ADDR_OWVAR 39
29354: PUSH
29355: LD_INT 3
29357: ST_TO_ADDR
// vc_control := control_computer ;
29358: LD_ADDR_OWVAR 38
29362: PUSH
29363: LD_INT 3
29365: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29366: LD_ADDR_OWVAR 40
29370: PUSH
29371: LD_INT 10
29373: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29374: LD_VAR 0 2
29378: PUSH
29379: LD_INT 1
29381: ARRAY
29382: PPUSH
29383: CALL_OW 310
29387: NOT
29388: IFFALSE 29435
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29390: CALL_OW 45
29394: PPUSH
29395: LD_VAR 0 2
29399: PUSH
29400: LD_INT 1
29402: ARRAY
29403: PPUSH
29404: CALL_OW 250
29408: PPUSH
29409: LD_VAR 0 2
29413: PUSH
29414: LD_INT 1
29416: ARRAY
29417: PPUSH
29418: CALL_OW 251
29422: PPUSH
29423: LD_INT 12
29425: PPUSH
29426: LD_INT 1
29428: PPUSH
29429: CALL_OW 50
29433: GO 29447
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29435: CALL_OW 45
29439: PPUSH
29440: LD_INT 1
29442: PPUSH
29443: CALL_OW 51
// end ;
29447: GO 29321
29449: POP
29450: POP
// end ;
29451: PPOPN 2
29453: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29454: LD_EXP 81
29458: PUSH
29459: LD_EXP 127
29463: AND
29464: IFFALSE 29686
29466: GO 29468
29468: DISABLE
29469: LD_INT 0
29471: PPUSH
29472: PPUSH
29473: PPUSH
29474: PPUSH
29475: PPUSH
29476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29477: LD_ADDR_VAR 0 6
29481: PUSH
29482: LD_INT 22
29484: PUSH
29485: LD_OWVAR 2
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 21
29496: PUSH
29497: LD_INT 1
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 3
29506: PUSH
29507: LD_INT 23
29509: PUSH
29510: LD_INT 0
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: LIST
29525: PPUSH
29526: CALL_OW 69
29530: ST_TO_ADDR
// if not tmp then
29531: LD_VAR 0 6
29535: NOT
29536: IFFALSE 29540
// exit ;
29538: GO 29686
// s1 := rand ( 1 , 4 ) ;
29540: LD_ADDR_VAR 0 2
29544: PUSH
29545: LD_INT 1
29547: PPUSH
29548: LD_INT 4
29550: PPUSH
29551: CALL_OW 12
29555: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29556: LD_ADDR_VAR 0 4
29560: PUSH
29561: LD_VAR 0 6
29565: PUSH
29566: LD_INT 1
29568: ARRAY
29569: PPUSH
29570: LD_VAR 0 2
29574: PPUSH
29575: CALL_OW 259
29579: ST_TO_ADDR
// if s1 = 1 then
29580: LD_VAR 0 2
29584: PUSH
29585: LD_INT 1
29587: EQUAL
29588: IFFALSE 29608
// s2 := rand ( 2 , 4 ) else
29590: LD_ADDR_VAR 0 3
29594: PUSH
29595: LD_INT 2
29597: PPUSH
29598: LD_INT 4
29600: PPUSH
29601: CALL_OW 12
29605: ST_TO_ADDR
29606: GO 29616
// s2 := 1 ;
29608: LD_ADDR_VAR 0 3
29612: PUSH
29613: LD_INT 1
29615: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29616: LD_ADDR_VAR 0 5
29620: PUSH
29621: LD_VAR 0 6
29625: PUSH
29626: LD_INT 1
29628: ARRAY
29629: PPUSH
29630: LD_VAR 0 3
29634: PPUSH
29635: CALL_OW 259
29639: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29640: LD_VAR 0 6
29644: PUSH
29645: LD_INT 1
29647: ARRAY
29648: PPUSH
29649: LD_VAR 0 2
29653: PPUSH
29654: LD_VAR 0 5
29658: PPUSH
29659: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29663: LD_VAR 0 6
29667: PUSH
29668: LD_INT 1
29670: ARRAY
29671: PPUSH
29672: LD_VAR 0 3
29676: PPUSH
29677: LD_VAR 0 4
29681: PPUSH
29682: CALL_OW 237
// end ;
29686: PPOPN 6
29688: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29689: LD_EXP 81
29693: PUSH
29694: LD_EXP 128
29698: AND
29699: IFFALSE 29778
29701: GO 29703
29703: DISABLE
29704: LD_INT 0
29706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29707: LD_ADDR_VAR 0 1
29711: PUSH
29712: LD_INT 22
29714: PUSH
29715: LD_OWVAR 2
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 30
29726: PUSH
29727: LD_INT 3
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PPUSH
29738: CALL_OW 69
29742: ST_TO_ADDR
// if not tmp then
29743: LD_VAR 0 1
29747: NOT
29748: IFFALSE 29752
// exit ;
29750: GO 29778
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29752: LD_VAR 0 1
29756: PUSH
29757: LD_INT 1
29759: PPUSH
29760: LD_VAR 0 1
29764: PPUSH
29765: CALL_OW 12
29769: ARRAY
29770: PPUSH
29771: LD_INT 1
29773: PPUSH
29774: CALL_OW 234
// end ;
29778: PPOPN 1
29780: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29781: LD_EXP 81
29785: PUSH
29786: LD_EXP 129
29790: AND
29791: IFFALSE 29903
29793: GO 29795
29795: DISABLE
29796: LD_INT 0
29798: PPUSH
29799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29800: LD_ADDR_VAR 0 2
29804: PUSH
29805: LD_INT 22
29807: PUSH
29808: LD_OWVAR 2
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: LD_INT 30
29822: PUSH
29823: LD_INT 27
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 30
29832: PUSH
29833: LD_INT 26
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 30
29842: PUSH
29843: LD_INT 28
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PPUSH
29860: CALL_OW 69
29864: ST_TO_ADDR
// if not tmp then
29865: LD_VAR 0 2
29869: NOT
29870: IFFALSE 29874
// exit ;
29872: GO 29903
// for i in tmp do
29874: LD_ADDR_VAR 0 1
29878: PUSH
29879: LD_VAR 0 2
29883: PUSH
29884: FOR_IN
29885: IFFALSE 29901
// SetLives ( i , 1 ) ;
29887: LD_VAR 0 1
29891: PPUSH
29892: LD_INT 1
29894: PPUSH
29895: CALL_OW 234
29899: GO 29884
29901: POP
29902: POP
// end ;
29903: PPOPN 2
29905: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29906: LD_EXP 81
29910: PUSH
29911: LD_EXP 130
29915: AND
29916: IFFALSE 30203
29918: GO 29920
29920: DISABLE
29921: LD_INT 0
29923: PPUSH
29924: PPUSH
29925: PPUSH
// begin i := rand ( 1 , 7 ) ;
29926: LD_ADDR_VAR 0 1
29930: PUSH
29931: LD_INT 1
29933: PPUSH
29934: LD_INT 7
29936: PPUSH
29937: CALL_OW 12
29941: ST_TO_ADDR
// case i of 1 :
29942: LD_VAR 0 1
29946: PUSH
29947: LD_INT 1
29949: DOUBLE
29950: EQUAL
29951: IFTRUE 29955
29953: GO 29965
29955: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29956: LD_STRING earthquake(getX(game), 0, 32)
29958: PPUSH
29959: CALL_OW 559
29963: GO 30203
29965: LD_INT 2
29967: DOUBLE
29968: EQUAL
29969: IFTRUE 29973
29971: GO 29987
29973: POP
// begin ToLua ( displayStucuk(); ) ;
29974: LD_STRING displayStucuk();
29976: PPUSH
29977: CALL_OW 559
// ResetFog ;
29981: CALL_OW 335
// end ; 3 :
29985: GO 30203
29987: LD_INT 3
29989: DOUBLE
29990: EQUAL
29991: IFTRUE 29995
29993: GO 30099
29995: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29996: LD_ADDR_VAR 0 2
30000: PUSH
30001: LD_INT 22
30003: PUSH
30004: LD_OWVAR 2
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 25
30015: PUSH
30016: LD_INT 1
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PPUSH
30027: CALL_OW 69
30031: ST_TO_ADDR
// if not tmp then
30032: LD_VAR 0 2
30036: NOT
30037: IFFALSE 30041
// exit ;
30039: GO 30203
// un := tmp [ rand ( 1 , tmp ) ] ;
30041: LD_ADDR_VAR 0 3
30045: PUSH
30046: LD_VAR 0 2
30050: PUSH
30051: LD_INT 1
30053: PPUSH
30054: LD_VAR 0 2
30058: PPUSH
30059: CALL_OW 12
30063: ARRAY
30064: ST_TO_ADDR
// if Crawls ( un ) then
30065: LD_VAR 0 3
30069: PPUSH
30070: CALL_OW 318
30074: IFFALSE 30085
// ComWalk ( un ) ;
30076: LD_VAR 0 3
30080: PPUSH
30081: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30085: LD_VAR 0 3
30089: PPUSH
30090: LD_INT 8
30092: PPUSH
30093: CALL_OW 336
// end ; 4 :
30097: GO 30203
30099: LD_INT 4
30101: DOUBLE
30102: EQUAL
30103: IFTRUE 30107
30105: GO 30181
30107: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30108: LD_ADDR_VAR 0 2
30112: PUSH
30113: LD_INT 22
30115: PUSH
30116: LD_OWVAR 2
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 30
30127: PUSH
30128: LD_INT 29
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PPUSH
30139: CALL_OW 69
30143: ST_TO_ADDR
// if not tmp then
30144: LD_VAR 0 2
30148: NOT
30149: IFFALSE 30153
// exit ;
30151: GO 30203
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30153: LD_VAR 0 2
30157: PUSH
30158: LD_INT 1
30160: ARRAY
30161: PPUSH
30162: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30166: LD_VAR 0 2
30170: PUSH
30171: LD_INT 1
30173: ARRAY
30174: PPUSH
30175: CALL_OW 65
// end ; 5 .. 7 :
30179: GO 30203
30181: LD_INT 5
30183: DOUBLE
30184: GREATEREQUAL
30185: IFFALSE 30193
30187: LD_INT 7
30189: DOUBLE
30190: LESSEQUAL
30191: IFTRUE 30195
30193: GO 30202
30195: POP
// StreamSibBomb ; end ;
30196: CALL 26440 0 0
30200: GO 30203
30202: POP
// end ;
30203: PPOPN 3
30205: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30206: LD_EXP 81
30210: PUSH
30211: LD_EXP 131
30215: AND
30216: IFFALSE 30372
30218: GO 30220
30220: DISABLE
30221: LD_INT 0
30223: PPUSH
30224: PPUSH
30225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30226: LD_ADDR_VAR 0 2
30230: PUSH
30231: LD_INT 81
30233: PUSH
30234: LD_OWVAR 2
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 2
30245: PUSH
30246: LD_INT 21
30248: PUSH
30249: LD_INT 1
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 21
30258: PUSH
30259: LD_INT 2
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: LIST
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PPUSH
30275: CALL_OW 69
30279: ST_TO_ADDR
// if not tmp then
30280: LD_VAR 0 2
30284: NOT
30285: IFFALSE 30289
// exit ;
30287: GO 30372
// p := 0 ;
30289: LD_ADDR_VAR 0 3
30293: PUSH
30294: LD_INT 0
30296: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30297: LD_INT 35
30299: PPUSH
30300: CALL_OW 67
// p := p + 1 ;
30304: LD_ADDR_VAR 0 3
30308: PUSH
30309: LD_VAR 0 3
30313: PUSH
30314: LD_INT 1
30316: PLUS
30317: ST_TO_ADDR
// for i in tmp do
30318: LD_ADDR_VAR 0 1
30322: PUSH
30323: LD_VAR 0 2
30327: PUSH
30328: FOR_IN
30329: IFFALSE 30360
// if GetLives ( i ) < 1000 then
30331: LD_VAR 0 1
30335: PPUSH
30336: CALL_OW 256
30340: PUSH
30341: LD_INT 1000
30343: LESS
30344: IFFALSE 30358
// SetLives ( i , 1000 ) ;
30346: LD_VAR 0 1
30350: PPUSH
30351: LD_INT 1000
30353: PPUSH
30354: CALL_OW 234
30358: GO 30328
30360: POP
30361: POP
// until p > 20 ;
30362: LD_VAR 0 3
30366: PUSH
30367: LD_INT 20
30369: GREATER
30370: IFFALSE 30297
// end ;
30372: PPOPN 3
30374: END
// every 0 0$1 trigger StreamModeActive and sTime do
30375: LD_EXP 81
30379: PUSH
30380: LD_EXP 132
30384: AND
30385: IFFALSE 30420
30387: GO 30389
30389: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30390: LD_INT 28
30392: PPUSH
30393: LD_OWVAR 2
30397: PPUSH
30398: LD_INT 2
30400: PPUSH
30401: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30405: LD_INT 30
30407: PPUSH
30408: LD_OWVAR 2
30412: PPUSH
30413: LD_INT 2
30415: PPUSH
30416: CALL_OW 322
// end ;
30420: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30421: LD_EXP 81
30425: PUSH
30426: LD_EXP 133
30430: AND
30431: IFFALSE 30552
30433: GO 30435
30435: DISABLE
30436: LD_INT 0
30438: PPUSH
30439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30440: LD_ADDR_VAR 0 2
30444: PUSH
30445: LD_INT 22
30447: PUSH
30448: LD_OWVAR 2
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 21
30459: PUSH
30460: LD_INT 1
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 3
30469: PUSH
30470: LD_INT 23
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: LIST
30488: PPUSH
30489: CALL_OW 69
30493: ST_TO_ADDR
// if not tmp then
30494: LD_VAR 0 2
30498: NOT
30499: IFFALSE 30503
// exit ;
30501: GO 30552
// for i in tmp do
30503: LD_ADDR_VAR 0 1
30507: PUSH
30508: LD_VAR 0 2
30512: PUSH
30513: FOR_IN
30514: IFFALSE 30550
// begin if Crawls ( i ) then
30516: LD_VAR 0 1
30520: PPUSH
30521: CALL_OW 318
30525: IFFALSE 30536
// ComWalk ( i ) ;
30527: LD_VAR 0 1
30531: PPUSH
30532: CALL_OW 138
// SetClass ( i , 2 ) ;
30536: LD_VAR 0 1
30540: PPUSH
30541: LD_INT 2
30543: PPUSH
30544: CALL_OW 336
// end ;
30548: GO 30513
30550: POP
30551: POP
// end ;
30552: PPOPN 2
30554: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30555: LD_EXP 81
30559: PUSH
30560: LD_EXP 134
30564: AND
30565: IFFALSE 30853
30567: GO 30569
30569: DISABLE
30570: LD_INT 0
30572: PPUSH
30573: PPUSH
30574: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30575: LD_OWVAR 2
30579: PPUSH
30580: LD_INT 9
30582: PPUSH
30583: LD_INT 1
30585: PPUSH
30586: LD_INT 1
30588: PPUSH
30589: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30593: LD_INT 9
30595: PPUSH
30596: LD_OWVAR 2
30600: PPUSH
30601: CALL_OW 343
// uc_side := 9 ;
30605: LD_ADDR_OWVAR 20
30609: PUSH
30610: LD_INT 9
30612: ST_TO_ADDR
// uc_nation := 2 ;
30613: LD_ADDR_OWVAR 21
30617: PUSH
30618: LD_INT 2
30620: ST_TO_ADDR
// hc_name := Dark Warrior ;
30621: LD_ADDR_OWVAR 26
30625: PUSH
30626: LD_STRING Dark Warrior
30628: ST_TO_ADDR
// hc_gallery :=  ;
30629: LD_ADDR_OWVAR 33
30633: PUSH
30634: LD_STRING 
30636: ST_TO_ADDR
// hc_noskilllimit := true ;
30637: LD_ADDR_OWVAR 76
30641: PUSH
30642: LD_INT 1
30644: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30645: LD_ADDR_OWVAR 31
30649: PUSH
30650: LD_INT 30
30652: PUSH
30653: LD_INT 30
30655: PUSH
30656: LD_INT 30
30658: PUSH
30659: LD_INT 30
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: ST_TO_ADDR
// un := CreateHuman ;
30668: LD_ADDR_VAR 0 3
30672: PUSH
30673: CALL_OW 44
30677: ST_TO_ADDR
// hc_noskilllimit := false ;
30678: LD_ADDR_OWVAR 76
30682: PUSH
30683: LD_INT 0
30685: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30686: LD_VAR 0 3
30690: PPUSH
30691: LD_INT 1
30693: PPUSH
30694: CALL_OW 51
// ToLua ( playRanger() ) ;
30698: LD_STRING playRanger()
30700: PPUSH
30701: CALL_OW 559
// p := 0 ;
30705: LD_ADDR_VAR 0 2
30709: PUSH
30710: LD_INT 0
30712: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30713: LD_INT 35
30715: PPUSH
30716: CALL_OW 67
// p := p + 1 ;
30720: LD_ADDR_VAR 0 2
30724: PUSH
30725: LD_VAR 0 2
30729: PUSH
30730: LD_INT 1
30732: PLUS
30733: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30734: LD_VAR 0 3
30738: PPUSH
30739: CALL_OW 256
30743: PUSH
30744: LD_INT 1000
30746: LESS
30747: IFFALSE 30761
// SetLives ( un , 1000 ) ;
30749: LD_VAR 0 3
30753: PPUSH
30754: LD_INT 1000
30756: PPUSH
30757: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30761: LD_VAR 0 3
30765: PPUSH
30766: LD_INT 81
30768: PUSH
30769: LD_OWVAR 2
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 91
30780: PUSH
30781: LD_VAR 0 3
30785: PUSH
30786: LD_INT 30
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: LIST
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PPUSH
30798: CALL_OW 69
30802: PPUSH
30803: LD_VAR 0 3
30807: PPUSH
30808: CALL_OW 74
30812: PPUSH
30813: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30817: LD_VAR 0 2
30821: PUSH
30822: LD_INT 80
30824: GREATER
30825: PUSH
30826: LD_VAR 0 3
30830: PPUSH
30831: CALL_OW 301
30835: OR
30836: IFFALSE 30713
// if un then
30838: LD_VAR 0 3
30842: IFFALSE 30853
// RemoveUnit ( un ) ;
30844: LD_VAR 0 3
30848: PPUSH
30849: CALL_OW 64
// end ;
30853: PPOPN 3
30855: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30856: LD_EXP 135
30860: IFFALSE 30976
30862: GO 30864
30864: DISABLE
30865: LD_INT 0
30867: PPUSH
30868: PPUSH
30869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30870: LD_ADDR_VAR 0 2
30874: PUSH
30875: LD_INT 81
30877: PUSH
30878: LD_OWVAR 2
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 21
30889: PUSH
30890: LD_INT 1
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PPUSH
30901: CALL_OW 69
30905: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30906: LD_STRING playComputer()
30908: PPUSH
30909: CALL_OW 559
// if not tmp then
30913: LD_VAR 0 2
30917: NOT
30918: IFFALSE 30922
// exit ;
30920: GO 30976
// for i in tmp do
30922: LD_ADDR_VAR 0 1
30926: PUSH
30927: LD_VAR 0 2
30931: PUSH
30932: FOR_IN
30933: IFFALSE 30974
// for j := 1 to 4 do
30935: LD_ADDR_VAR 0 3
30939: PUSH
30940: DOUBLE
30941: LD_INT 1
30943: DEC
30944: ST_TO_ADDR
30945: LD_INT 4
30947: PUSH
30948: FOR_TO
30949: IFFALSE 30970
// SetSkill ( i , j , 10 ) ;
30951: LD_VAR 0 1
30955: PPUSH
30956: LD_VAR 0 3
30960: PPUSH
30961: LD_INT 10
30963: PPUSH
30964: CALL_OW 237
30968: GO 30948
30970: POP
30971: POP
30972: GO 30932
30974: POP
30975: POP
// end ;
30976: PPOPN 3
30978: END
// every 0 0$1 trigger s30 do var i , tmp ;
30979: LD_EXP 136
30983: IFFALSE 31052
30985: GO 30987
30987: DISABLE
30988: LD_INT 0
30990: PPUSH
30991: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30992: LD_ADDR_VAR 0 2
30996: PUSH
30997: LD_INT 22
30999: PUSH
31000: LD_OWVAR 2
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PPUSH
31009: CALL_OW 69
31013: ST_TO_ADDR
// if not tmp then
31014: LD_VAR 0 2
31018: NOT
31019: IFFALSE 31023
// exit ;
31021: GO 31052
// for i in tmp do
31023: LD_ADDR_VAR 0 1
31027: PUSH
31028: LD_VAR 0 2
31032: PUSH
31033: FOR_IN
31034: IFFALSE 31050
// SetLives ( i , 300 ) ;
31036: LD_VAR 0 1
31040: PPUSH
31041: LD_INT 300
31043: PPUSH
31044: CALL_OW 234
31048: GO 31033
31050: POP
31051: POP
// end ;
31052: PPOPN 2
31054: END
// every 0 0$1 trigger s60 do var i , tmp ;
31055: LD_EXP 137
31059: IFFALSE 31128
31061: GO 31063
31063: DISABLE
31064: LD_INT 0
31066: PPUSH
31067: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31068: LD_ADDR_VAR 0 2
31072: PUSH
31073: LD_INT 22
31075: PUSH
31076: LD_OWVAR 2
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PPUSH
31085: CALL_OW 69
31089: ST_TO_ADDR
// if not tmp then
31090: LD_VAR 0 2
31094: NOT
31095: IFFALSE 31099
// exit ;
31097: GO 31128
// for i in tmp do
31099: LD_ADDR_VAR 0 1
31103: PUSH
31104: LD_VAR 0 2
31108: PUSH
31109: FOR_IN
31110: IFFALSE 31126
// SetLives ( i , 600 ) ;
31112: LD_VAR 0 1
31116: PPUSH
31117: LD_INT 600
31119: PPUSH
31120: CALL_OW 234
31124: GO 31109
31126: POP
31127: POP
// end ;
31128: PPOPN 2
31130: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31131: LD_INT 0
31133: PPUSH
// case cmd of 301 :
31134: LD_VAR 0 1
31138: PUSH
31139: LD_INT 301
31141: DOUBLE
31142: EQUAL
31143: IFTRUE 31147
31145: GO 31179
31147: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31148: LD_VAR 0 6
31152: PPUSH
31153: LD_VAR 0 7
31157: PPUSH
31158: LD_VAR 0 8
31162: PPUSH
31163: LD_VAR 0 4
31167: PPUSH
31168: LD_VAR 0 5
31172: PPUSH
31173: CALL 32380 0 5
31177: GO 31300
31179: LD_INT 302
31181: DOUBLE
31182: EQUAL
31183: IFTRUE 31187
31185: GO 31224
31187: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31188: LD_VAR 0 6
31192: PPUSH
31193: LD_VAR 0 7
31197: PPUSH
31198: LD_VAR 0 8
31202: PPUSH
31203: LD_VAR 0 9
31207: PPUSH
31208: LD_VAR 0 4
31212: PPUSH
31213: LD_VAR 0 5
31217: PPUSH
31218: CALL 32471 0 6
31222: GO 31300
31224: LD_INT 303
31226: DOUBLE
31227: EQUAL
31228: IFTRUE 31232
31230: GO 31269
31232: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31233: LD_VAR 0 6
31237: PPUSH
31238: LD_VAR 0 7
31242: PPUSH
31243: LD_VAR 0 8
31247: PPUSH
31248: LD_VAR 0 9
31252: PPUSH
31253: LD_VAR 0 4
31257: PPUSH
31258: LD_VAR 0 5
31262: PPUSH
31263: CALL 31305 0 6
31267: GO 31300
31269: LD_INT 304
31271: DOUBLE
31272: EQUAL
31273: IFTRUE 31277
31275: GO 31299
31277: POP
// hHackTeleport ( unit , x , y ) ; end ;
31278: LD_VAR 0 2
31282: PPUSH
31283: LD_VAR 0 4
31287: PPUSH
31288: LD_VAR 0 5
31292: PPUSH
31293: CALL 33064 0 3
31297: GO 31300
31299: POP
// end ;
31300: LD_VAR 0 12
31304: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31305: LD_INT 0
31307: PPUSH
31308: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31309: LD_VAR 0 1
31313: PUSH
31314: LD_INT 1
31316: LESS
31317: PUSH
31318: LD_VAR 0 1
31322: PUSH
31323: LD_INT 3
31325: GREATER
31326: OR
31327: PUSH
31328: LD_VAR 0 5
31332: PPUSH
31333: LD_VAR 0 6
31337: PPUSH
31338: CALL_OW 428
31342: OR
31343: IFFALSE 31347
// exit ;
31345: GO 32067
// uc_side := your_side ;
31347: LD_ADDR_OWVAR 20
31351: PUSH
31352: LD_OWVAR 2
31356: ST_TO_ADDR
// uc_nation := nation ;
31357: LD_ADDR_OWVAR 21
31361: PUSH
31362: LD_VAR 0 1
31366: ST_TO_ADDR
// bc_level = 1 ;
31367: LD_ADDR_OWVAR 43
31371: PUSH
31372: LD_INT 1
31374: ST_TO_ADDR
// case btype of 1 :
31375: LD_VAR 0 2
31379: PUSH
31380: LD_INT 1
31382: DOUBLE
31383: EQUAL
31384: IFTRUE 31388
31386: GO 31399
31388: POP
// bc_type := b_depot ; 2 :
31389: LD_ADDR_OWVAR 42
31393: PUSH
31394: LD_INT 0
31396: ST_TO_ADDR
31397: GO 32011
31399: LD_INT 2
31401: DOUBLE
31402: EQUAL
31403: IFTRUE 31407
31405: GO 31418
31407: POP
// bc_type := b_warehouse ; 3 :
31408: LD_ADDR_OWVAR 42
31412: PUSH
31413: LD_INT 1
31415: ST_TO_ADDR
31416: GO 32011
31418: LD_INT 3
31420: DOUBLE
31421: EQUAL
31422: IFTRUE 31426
31424: GO 31437
31426: POP
// bc_type := b_lab ; 4 .. 9 :
31427: LD_ADDR_OWVAR 42
31431: PUSH
31432: LD_INT 6
31434: ST_TO_ADDR
31435: GO 32011
31437: LD_INT 4
31439: DOUBLE
31440: GREATEREQUAL
31441: IFFALSE 31449
31443: LD_INT 9
31445: DOUBLE
31446: LESSEQUAL
31447: IFTRUE 31451
31449: GO 31503
31451: POP
// begin bc_type := b_lab_half ;
31452: LD_ADDR_OWVAR 42
31456: PUSH
31457: LD_INT 7
31459: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31460: LD_ADDR_OWVAR 44
31464: PUSH
31465: LD_INT 10
31467: PUSH
31468: LD_INT 11
31470: PUSH
31471: LD_INT 12
31473: PUSH
31474: LD_INT 15
31476: PUSH
31477: LD_INT 14
31479: PUSH
31480: LD_INT 13
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: PUSH
31491: LD_VAR 0 2
31495: PUSH
31496: LD_INT 3
31498: MINUS
31499: ARRAY
31500: ST_TO_ADDR
// end ; 10 .. 13 :
31501: GO 32011
31503: LD_INT 10
31505: DOUBLE
31506: GREATEREQUAL
31507: IFFALSE 31515
31509: LD_INT 13
31511: DOUBLE
31512: LESSEQUAL
31513: IFTRUE 31517
31515: GO 31594
31517: POP
// begin bc_type := b_lab_full ;
31518: LD_ADDR_OWVAR 42
31522: PUSH
31523: LD_INT 8
31525: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31526: LD_ADDR_OWVAR 44
31530: PUSH
31531: LD_INT 10
31533: PUSH
31534: LD_INT 12
31536: PUSH
31537: LD_INT 14
31539: PUSH
31540: LD_INT 13
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: PUSH
31549: LD_VAR 0 2
31553: PUSH
31554: LD_INT 9
31556: MINUS
31557: ARRAY
31558: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31559: LD_ADDR_OWVAR 45
31563: PUSH
31564: LD_INT 11
31566: PUSH
31567: LD_INT 15
31569: PUSH
31570: LD_INT 12
31572: PUSH
31573: LD_INT 15
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: PUSH
31582: LD_VAR 0 2
31586: PUSH
31587: LD_INT 9
31589: MINUS
31590: ARRAY
31591: ST_TO_ADDR
// end ; 14 :
31592: GO 32011
31594: LD_INT 14
31596: DOUBLE
31597: EQUAL
31598: IFTRUE 31602
31600: GO 31613
31602: POP
// bc_type := b_workshop ; 15 :
31603: LD_ADDR_OWVAR 42
31607: PUSH
31608: LD_INT 2
31610: ST_TO_ADDR
31611: GO 32011
31613: LD_INT 15
31615: DOUBLE
31616: EQUAL
31617: IFTRUE 31621
31619: GO 31632
31621: POP
// bc_type := b_factory ; 16 :
31622: LD_ADDR_OWVAR 42
31626: PUSH
31627: LD_INT 3
31629: ST_TO_ADDR
31630: GO 32011
31632: LD_INT 16
31634: DOUBLE
31635: EQUAL
31636: IFTRUE 31640
31638: GO 31651
31640: POP
// bc_type := b_ext_gun ; 17 :
31641: LD_ADDR_OWVAR 42
31645: PUSH
31646: LD_INT 17
31648: ST_TO_ADDR
31649: GO 32011
31651: LD_INT 17
31653: DOUBLE
31654: EQUAL
31655: IFTRUE 31659
31657: GO 31687
31659: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31660: LD_ADDR_OWVAR 42
31664: PUSH
31665: LD_INT 19
31667: PUSH
31668: LD_INT 23
31670: PUSH
31671: LD_INT 19
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: LIST
31678: PUSH
31679: LD_VAR 0 1
31683: ARRAY
31684: ST_TO_ADDR
31685: GO 32011
31687: LD_INT 18
31689: DOUBLE
31690: EQUAL
31691: IFTRUE 31695
31693: GO 31706
31695: POP
// bc_type := b_ext_radar ; 19 :
31696: LD_ADDR_OWVAR 42
31700: PUSH
31701: LD_INT 20
31703: ST_TO_ADDR
31704: GO 32011
31706: LD_INT 19
31708: DOUBLE
31709: EQUAL
31710: IFTRUE 31714
31712: GO 31725
31714: POP
// bc_type := b_ext_radio ; 20 :
31715: LD_ADDR_OWVAR 42
31719: PUSH
31720: LD_INT 22
31722: ST_TO_ADDR
31723: GO 32011
31725: LD_INT 20
31727: DOUBLE
31728: EQUAL
31729: IFTRUE 31733
31731: GO 31744
31733: POP
// bc_type := b_ext_siberium ; 21 :
31734: LD_ADDR_OWVAR 42
31738: PUSH
31739: LD_INT 21
31741: ST_TO_ADDR
31742: GO 32011
31744: LD_INT 21
31746: DOUBLE
31747: EQUAL
31748: IFTRUE 31752
31750: GO 31763
31752: POP
// bc_type := b_ext_computer ; 22 :
31753: LD_ADDR_OWVAR 42
31757: PUSH
31758: LD_INT 24
31760: ST_TO_ADDR
31761: GO 32011
31763: LD_INT 22
31765: DOUBLE
31766: EQUAL
31767: IFTRUE 31771
31769: GO 31782
31771: POP
// bc_type := b_ext_track ; 23 :
31772: LD_ADDR_OWVAR 42
31776: PUSH
31777: LD_INT 16
31779: ST_TO_ADDR
31780: GO 32011
31782: LD_INT 23
31784: DOUBLE
31785: EQUAL
31786: IFTRUE 31790
31788: GO 31801
31790: POP
// bc_type := b_ext_laser ; 24 :
31791: LD_ADDR_OWVAR 42
31795: PUSH
31796: LD_INT 25
31798: ST_TO_ADDR
31799: GO 32011
31801: LD_INT 24
31803: DOUBLE
31804: EQUAL
31805: IFTRUE 31809
31807: GO 31820
31809: POP
// bc_type := b_control_tower ; 25 :
31810: LD_ADDR_OWVAR 42
31814: PUSH
31815: LD_INT 36
31817: ST_TO_ADDR
31818: GO 32011
31820: LD_INT 25
31822: DOUBLE
31823: EQUAL
31824: IFTRUE 31828
31826: GO 31839
31828: POP
// bc_type := b_breastwork ; 26 :
31829: LD_ADDR_OWVAR 42
31833: PUSH
31834: LD_INT 31
31836: ST_TO_ADDR
31837: GO 32011
31839: LD_INT 26
31841: DOUBLE
31842: EQUAL
31843: IFTRUE 31847
31845: GO 31858
31847: POP
// bc_type := b_bunker ; 27 :
31848: LD_ADDR_OWVAR 42
31852: PUSH
31853: LD_INT 32
31855: ST_TO_ADDR
31856: GO 32011
31858: LD_INT 27
31860: DOUBLE
31861: EQUAL
31862: IFTRUE 31866
31864: GO 31877
31866: POP
// bc_type := b_turret ; 28 :
31867: LD_ADDR_OWVAR 42
31871: PUSH
31872: LD_INT 33
31874: ST_TO_ADDR
31875: GO 32011
31877: LD_INT 28
31879: DOUBLE
31880: EQUAL
31881: IFTRUE 31885
31883: GO 31896
31885: POP
// bc_type := b_armoury ; 29 :
31886: LD_ADDR_OWVAR 42
31890: PUSH
31891: LD_INT 4
31893: ST_TO_ADDR
31894: GO 32011
31896: LD_INT 29
31898: DOUBLE
31899: EQUAL
31900: IFTRUE 31904
31902: GO 31915
31904: POP
// bc_type := b_barracks ; 30 :
31905: LD_ADDR_OWVAR 42
31909: PUSH
31910: LD_INT 5
31912: ST_TO_ADDR
31913: GO 32011
31915: LD_INT 30
31917: DOUBLE
31918: EQUAL
31919: IFTRUE 31923
31921: GO 31934
31923: POP
// bc_type := b_solar_power ; 31 :
31924: LD_ADDR_OWVAR 42
31928: PUSH
31929: LD_INT 27
31931: ST_TO_ADDR
31932: GO 32011
31934: LD_INT 31
31936: DOUBLE
31937: EQUAL
31938: IFTRUE 31942
31940: GO 31953
31942: POP
// bc_type := b_oil_power ; 32 :
31943: LD_ADDR_OWVAR 42
31947: PUSH
31948: LD_INT 26
31950: ST_TO_ADDR
31951: GO 32011
31953: LD_INT 32
31955: DOUBLE
31956: EQUAL
31957: IFTRUE 31961
31959: GO 31972
31961: POP
// bc_type := b_siberite_power ; 33 :
31962: LD_ADDR_OWVAR 42
31966: PUSH
31967: LD_INT 28
31969: ST_TO_ADDR
31970: GO 32011
31972: LD_INT 33
31974: DOUBLE
31975: EQUAL
31976: IFTRUE 31980
31978: GO 31991
31980: POP
// bc_type := b_oil_mine ; 34 :
31981: LD_ADDR_OWVAR 42
31985: PUSH
31986: LD_INT 29
31988: ST_TO_ADDR
31989: GO 32011
31991: LD_INT 34
31993: DOUBLE
31994: EQUAL
31995: IFTRUE 31999
31997: GO 32010
31999: POP
// bc_type := b_siberite_mine ; end ;
32000: LD_ADDR_OWVAR 42
32004: PUSH
32005: LD_INT 30
32007: ST_TO_ADDR
32008: GO 32011
32010: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32011: LD_ADDR_VAR 0 8
32015: PUSH
32016: LD_VAR 0 5
32020: PPUSH
32021: LD_VAR 0 6
32025: PPUSH
32026: LD_VAR 0 3
32030: PPUSH
32031: CALL_OW 47
32035: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32036: LD_OWVAR 42
32040: PUSH
32041: LD_INT 32
32043: PUSH
32044: LD_INT 33
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: IN
32051: IFFALSE 32067
// PlaceWeaponTurret ( b , weapon ) ;
32053: LD_VAR 0 8
32057: PPUSH
32058: LD_VAR 0 4
32062: PPUSH
32063: CALL_OW 431
// end ;
32067: LD_VAR 0 7
32071: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32072: LD_INT 0
32074: PPUSH
32075: PPUSH
32076: PPUSH
32077: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32078: LD_ADDR_VAR 0 4
32082: PUSH
32083: LD_INT 22
32085: PUSH
32086: LD_OWVAR 2
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 2
32097: PUSH
32098: LD_INT 30
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 30
32110: PUSH
32111: LD_INT 1
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: LIST
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PPUSH
32127: CALL_OW 69
32131: ST_TO_ADDR
// if not tmp then
32132: LD_VAR 0 4
32136: NOT
32137: IFFALSE 32141
// exit ;
32139: GO 32200
// for i in tmp do
32141: LD_ADDR_VAR 0 2
32145: PUSH
32146: LD_VAR 0 4
32150: PUSH
32151: FOR_IN
32152: IFFALSE 32198
// for j = 1 to 3 do
32154: LD_ADDR_VAR 0 3
32158: PUSH
32159: DOUBLE
32160: LD_INT 1
32162: DEC
32163: ST_TO_ADDR
32164: LD_INT 3
32166: PUSH
32167: FOR_TO
32168: IFFALSE 32194
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32170: LD_VAR 0 2
32174: PPUSH
32175: CALL_OW 274
32179: PPUSH
32180: LD_VAR 0 3
32184: PPUSH
32185: LD_INT 99999
32187: PPUSH
32188: CALL_OW 277
32192: GO 32167
32194: POP
32195: POP
32196: GO 32151
32198: POP
32199: POP
// end ;
32200: LD_VAR 0 1
32204: RET
// export function hHackSetLevel10 ; var i , j ; begin
32205: LD_INT 0
32207: PPUSH
32208: PPUSH
32209: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32210: LD_ADDR_VAR 0 2
32214: PUSH
32215: LD_INT 21
32217: PUSH
32218: LD_INT 1
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PPUSH
32225: CALL_OW 69
32229: PUSH
32230: FOR_IN
32231: IFFALSE 32283
// if IsSelected ( i ) then
32233: LD_VAR 0 2
32237: PPUSH
32238: CALL_OW 306
32242: IFFALSE 32281
// begin for j := 1 to 4 do
32244: LD_ADDR_VAR 0 3
32248: PUSH
32249: DOUBLE
32250: LD_INT 1
32252: DEC
32253: ST_TO_ADDR
32254: LD_INT 4
32256: PUSH
32257: FOR_TO
32258: IFFALSE 32279
// SetSkill ( i , j , 10 ) ;
32260: LD_VAR 0 2
32264: PPUSH
32265: LD_VAR 0 3
32269: PPUSH
32270: LD_INT 10
32272: PPUSH
32273: CALL_OW 237
32277: GO 32257
32279: POP
32280: POP
// end ;
32281: GO 32230
32283: POP
32284: POP
// end ;
32285: LD_VAR 0 1
32289: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32290: LD_INT 0
32292: PPUSH
32293: PPUSH
32294: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32295: LD_ADDR_VAR 0 2
32299: PUSH
32300: LD_INT 22
32302: PUSH
32303: LD_OWVAR 2
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 21
32314: PUSH
32315: LD_INT 1
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PPUSH
32326: CALL_OW 69
32330: PUSH
32331: FOR_IN
32332: IFFALSE 32373
// begin for j := 1 to 4 do
32334: LD_ADDR_VAR 0 3
32338: PUSH
32339: DOUBLE
32340: LD_INT 1
32342: DEC
32343: ST_TO_ADDR
32344: LD_INT 4
32346: PUSH
32347: FOR_TO
32348: IFFALSE 32369
// SetSkill ( i , j , 10 ) ;
32350: LD_VAR 0 2
32354: PPUSH
32355: LD_VAR 0 3
32359: PPUSH
32360: LD_INT 10
32362: PPUSH
32363: CALL_OW 237
32367: GO 32347
32369: POP
32370: POP
// end ;
32371: GO 32331
32373: POP
32374: POP
// end ;
32375: LD_VAR 0 1
32379: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32380: LD_INT 0
32382: PPUSH
// uc_side := your_side ;
32383: LD_ADDR_OWVAR 20
32387: PUSH
32388: LD_OWVAR 2
32392: ST_TO_ADDR
// uc_nation := nation ;
32393: LD_ADDR_OWVAR 21
32397: PUSH
32398: LD_VAR 0 1
32402: ST_TO_ADDR
// InitHc ;
32403: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32407: LD_INT 0
32409: PPUSH
32410: LD_VAR 0 2
32414: PPUSH
32415: LD_VAR 0 3
32419: PPUSH
32420: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32424: LD_VAR 0 4
32428: PPUSH
32429: LD_VAR 0 5
32433: PPUSH
32434: CALL_OW 428
32438: PUSH
32439: LD_INT 0
32441: EQUAL
32442: IFFALSE 32466
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32444: CALL_OW 44
32448: PPUSH
32449: LD_VAR 0 4
32453: PPUSH
32454: LD_VAR 0 5
32458: PPUSH
32459: LD_INT 1
32461: PPUSH
32462: CALL_OW 48
// end ;
32466: LD_VAR 0 6
32470: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32471: LD_INT 0
32473: PPUSH
32474: PPUSH
// uc_side := your_side ;
32475: LD_ADDR_OWVAR 20
32479: PUSH
32480: LD_OWVAR 2
32484: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32485: LD_VAR 0 1
32489: PUSH
32490: LD_INT 1
32492: PUSH
32493: LD_INT 2
32495: PUSH
32496: LD_INT 3
32498: PUSH
32499: LD_INT 4
32501: PUSH
32502: LD_INT 5
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: IN
32512: IFFALSE 32524
// uc_nation := nation_american else
32514: LD_ADDR_OWVAR 21
32518: PUSH
32519: LD_INT 1
32521: ST_TO_ADDR
32522: GO 32567
// if chassis in [ 11 , 12 , 13 , 14 ] then
32524: LD_VAR 0 1
32528: PUSH
32529: LD_INT 11
32531: PUSH
32532: LD_INT 12
32534: PUSH
32535: LD_INT 13
32537: PUSH
32538: LD_INT 14
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: IN
32547: IFFALSE 32559
// uc_nation := nation_arabian else
32549: LD_ADDR_OWVAR 21
32553: PUSH
32554: LD_INT 2
32556: ST_TO_ADDR
32557: GO 32567
// uc_nation := nation_russian ;
32559: LD_ADDR_OWVAR 21
32563: PUSH
32564: LD_INT 3
32566: ST_TO_ADDR
// vc_chassis := chassis ;
32567: LD_ADDR_OWVAR 37
32571: PUSH
32572: LD_VAR 0 1
32576: ST_TO_ADDR
// vc_engine := engine ;
32577: LD_ADDR_OWVAR 39
32581: PUSH
32582: LD_VAR 0 2
32586: ST_TO_ADDR
// vc_control := control ;
32587: LD_ADDR_OWVAR 38
32591: PUSH
32592: LD_VAR 0 3
32596: ST_TO_ADDR
// vc_weapon := weapon ;
32597: LD_ADDR_OWVAR 40
32601: PUSH
32602: LD_VAR 0 4
32606: ST_TO_ADDR
// un := CreateVehicle ;
32607: LD_ADDR_VAR 0 8
32611: PUSH
32612: CALL_OW 45
32616: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32617: LD_VAR 0 8
32621: PPUSH
32622: LD_INT 0
32624: PPUSH
32625: LD_INT 5
32627: PPUSH
32628: CALL_OW 12
32632: PPUSH
32633: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32637: LD_VAR 0 8
32641: PPUSH
32642: LD_VAR 0 5
32646: PPUSH
32647: LD_VAR 0 6
32651: PPUSH
32652: LD_INT 1
32654: PPUSH
32655: CALL_OW 48
// end ;
32659: LD_VAR 0 7
32663: RET
// export hInvincible ; every 1 do
32664: GO 32666
32666: DISABLE
// hInvincible := [ ] ;
32667: LD_ADDR_EXP 138
32671: PUSH
32672: EMPTY
32673: ST_TO_ADDR
32674: END
// every 10 do var i ;
32675: GO 32677
32677: DISABLE
32678: LD_INT 0
32680: PPUSH
// begin enable ;
32681: ENABLE
// if not hInvincible then
32682: LD_EXP 138
32686: NOT
32687: IFFALSE 32691
// exit ;
32689: GO 32735
// for i in hInvincible do
32691: LD_ADDR_VAR 0 1
32695: PUSH
32696: LD_EXP 138
32700: PUSH
32701: FOR_IN
32702: IFFALSE 32733
// if GetLives ( i ) < 1000 then
32704: LD_VAR 0 1
32708: PPUSH
32709: CALL_OW 256
32713: PUSH
32714: LD_INT 1000
32716: LESS
32717: IFFALSE 32731
// SetLives ( i , 1000 ) ;
32719: LD_VAR 0 1
32723: PPUSH
32724: LD_INT 1000
32726: PPUSH
32727: CALL_OW 234
32731: GO 32701
32733: POP
32734: POP
// end ;
32735: PPOPN 1
32737: END
// export function hHackInvincible ; var i ; begin
32738: LD_INT 0
32740: PPUSH
32741: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32742: LD_ADDR_VAR 0 2
32746: PUSH
32747: LD_INT 2
32749: PUSH
32750: LD_INT 21
32752: PUSH
32753: LD_INT 1
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 21
32762: PUSH
32763: LD_INT 2
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: LIST
32774: PPUSH
32775: CALL_OW 69
32779: PUSH
32780: FOR_IN
32781: IFFALSE 32842
// if IsSelected ( i ) then
32783: LD_VAR 0 2
32787: PPUSH
32788: CALL_OW 306
32792: IFFALSE 32840
// begin if i in hInvincible then
32794: LD_VAR 0 2
32798: PUSH
32799: LD_EXP 138
32803: IN
32804: IFFALSE 32824
// hInvincible := hInvincible diff i else
32806: LD_ADDR_EXP 138
32810: PUSH
32811: LD_EXP 138
32815: PUSH
32816: LD_VAR 0 2
32820: DIFF
32821: ST_TO_ADDR
32822: GO 32840
// hInvincible := hInvincible union i ;
32824: LD_ADDR_EXP 138
32828: PUSH
32829: LD_EXP 138
32833: PUSH
32834: LD_VAR 0 2
32838: UNION
32839: ST_TO_ADDR
// end ;
32840: GO 32780
32842: POP
32843: POP
// end ;
32844: LD_VAR 0 1
32848: RET
// export function hHackInvisible ; var i , j ; begin
32849: LD_INT 0
32851: PPUSH
32852: PPUSH
32853: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32854: LD_ADDR_VAR 0 2
32858: PUSH
32859: LD_INT 21
32861: PUSH
32862: LD_INT 1
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PPUSH
32869: CALL_OW 69
32873: PUSH
32874: FOR_IN
32875: IFFALSE 32899
// if IsSelected ( i ) then
32877: LD_VAR 0 2
32881: PPUSH
32882: CALL_OW 306
32886: IFFALSE 32897
// ComForceInvisible ( i ) ;
32888: LD_VAR 0 2
32892: PPUSH
32893: CALL_OW 496
32897: GO 32874
32899: POP
32900: POP
// end ;
32901: LD_VAR 0 1
32905: RET
// export function hHackChangeYourSide ; begin
32906: LD_INT 0
32908: PPUSH
// if your_side = 8 then
32909: LD_OWVAR 2
32913: PUSH
32914: LD_INT 8
32916: EQUAL
32917: IFFALSE 32929
// your_side := 0 else
32919: LD_ADDR_OWVAR 2
32923: PUSH
32924: LD_INT 0
32926: ST_TO_ADDR
32927: GO 32943
// your_side := your_side + 1 ;
32929: LD_ADDR_OWVAR 2
32933: PUSH
32934: LD_OWVAR 2
32938: PUSH
32939: LD_INT 1
32941: PLUS
32942: ST_TO_ADDR
// end ;
32943: LD_VAR 0 1
32947: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32948: LD_INT 0
32950: PPUSH
32951: PPUSH
32952: PPUSH
// for i in all_units do
32953: LD_ADDR_VAR 0 2
32957: PUSH
32958: LD_OWVAR 3
32962: PUSH
32963: FOR_IN
32964: IFFALSE 33042
// if IsSelected ( i ) then
32966: LD_VAR 0 2
32970: PPUSH
32971: CALL_OW 306
32975: IFFALSE 33040
// begin j := GetSide ( i ) ;
32977: LD_ADDR_VAR 0 3
32981: PUSH
32982: LD_VAR 0 2
32986: PPUSH
32987: CALL_OW 255
32991: ST_TO_ADDR
// if j = 8 then
32992: LD_VAR 0 3
32996: PUSH
32997: LD_INT 8
32999: EQUAL
33000: IFFALSE 33012
// j := 0 else
33002: LD_ADDR_VAR 0 3
33006: PUSH
33007: LD_INT 0
33009: ST_TO_ADDR
33010: GO 33026
// j := j + 1 ;
33012: LD_ADDR_VAR 0 3
33016: PUSH
33017: LD_VAR 0 3
33021: PUSH
33022: LD_INT 1
33024: PLUS
33025: ST_TO_ADDR
// SetSide ( i , j ) ;
33026: LD_VAR 0 2
33030: PPUSH
33031: LD_VAR 0 3
33035: PPUSH
33036: CALL_OW 235
// end ;
33040: GO 32963
33042: POP
33043: POP
// end ;
33044: LD_VAR 0 1
33048: RET
// export function hHackFog ; begin
33049: LD_INT 0
33051: PPUSH
// FogOff ( true ) ;
33052: LD_INT 1
33054: PPUSH
33055: CALL_OW 344
// end ;
33059: LD_VAR 0 1
33063: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33064: LD_INT 0
33066: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33067: LD_VAR 0 1
33071: PPUSH
33072: LD_VAR 0 2
33076: PPUSH
33077: LD_VAR 0 3
33081: PPUSH
33082: LD_INT 1
33084: PPUSH
33085: LD_INT 1
33087: PPUSH
33088: CALL_OW 483
// CenterOnXY ( x , y ) ;
33092: LD_VAR 0 2
33096: PPUSH
33097: LD_VAR 0 3
33101: PPUSH
33102: CALL_OW 84
// end ; end_of_file
33106: LD_VAR 0 4
33110: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33111: LD_INT 0
33113: PPUSH
33114: PPUSH
33115: PPUSH
33116: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33117: LD_VAR 0 1
33121: PPUSH
33122: CALL_OW 264
33126: PUSH
33127: LD_EXP 66
33131: EQUAL
33132: IFFALSE 33204
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33134: LD_INT 68
33136: PPUSH
33137: LD_VAR 0 1
33141: PPUSH
33142: CALL_OW 255
33146: PPUSH
33147: CALL_OW 321
33151: PUSH
33152: LD_INT 2
33154: EQUAL
33155: IFFALSE 33167
// eff := 70 else
33157: LD_ADDR_VAR 0 4
33161: PUSH
33162: LD_INT 70
33164: ST_TO_ADDR
33165: GO 33175
// eff := 30 ;
33167: LD_ADDR_VAR 0 4
33171: PUSH
33172: LD_INT 30
33174: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33175: LD_VAR 0 1
33179: PPUSH
33180: CALL_OW 250
33184: PPUSH
33185: LD_VAR 0 1
33189: PPUSH
33190: CALL_OW 251
33194: PPUSH
33195: LD_VAR 0 4
33199: PPUSH
33200: CALL_OW 495
// end ; end ;
33204: LD_VAR 0 2
33208: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33209: LD_INT 0
33211: PPUSH
// end ;
33212: LD_VAR 0 4
33216: RET
// export function SOS_Command ( cmd ) ; begin
33217: LD_INT 0
33219: PPUSH
// end ;
33220: LD_VAR 0 2
33224: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33225: LD_INT 0
33227: PPUSH
// end ;
33228: LD_VAR 0 6
33232: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33233: LD_INT 0
33235: PPUSH
33236: PPUSH
// if not vehicle or not factory then
33237: LD_VAR 0 1
33241: NOT
33242: PUSH
33243: LD_VAR 0 2
33247: NOT
33248: OR
33249: IFFALSE 33253
// exit ;
33251: GO 33484
// if factoryWaypoints >= factory then
33253: LD_EXP 139
33257: PUSH
33258: LD_VAR 0 2
33262: GREATEREQUAL
33263: IFFALSE 33484
// if factoryWaypoints [ factory ] then
33265: LD_EXP 139
33269: PUSH
33270: LD_VAR 0 2
33274: ARRAY
33275: IFFALSE 33484
// begin if GetControl ( vehicle ) = control_manual then
33277: LD_VAR 0 1
33281: PPUSH
33282: CALL_OW 263
33286: PUSH
33287: LD_INT 1
33289: EQUAL
33290: IFFALSE 33371
// begin driver := IsDrivenBy ( vehicle ) ;
33292: LD_ADDR_VAR 0 4
33296: PUSH
33297: LD_VAR 0 1
33301: PPUSH
33302: CALL_OW 311
33306: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33307: LD_VAR 0 4
33311: PPUSH
33312: LD_EXP 139
33316: PUSH
33317: LD_VAR 0 2
33321: ARRAY
33322: PUSH
33323: LD_INT 3
33325: ARRAY
33326: PPUSH
33327: LD_EXP 139
33331: PUSH
33332: LD_VAR 0 2
33336: ARRAY
33337: PUSH
33338: LD_INT 4
33340: ARRAY
33341: PPUSH
33342: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33346: LD_VAR 0 4
33350: PPUSH
33351: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33355: LD_VAR 0 4
33359: PPUSH
33360: LD_VAR 0 2
33364: PPUSH
33365: CALL_OW 180
// end else
33369: GO 33484
// if GetControl ( vehicle ) = control_remote then
33371: LD_VAR 0 1
33375: PPUSH
33376: CALL_OW 263
33380: PUSH
33381: LD_INT 2
33383: EQUAL
33384: IFFALSE 33445
// begin wait ( 0 0$2 ) ;
33386: LD_INT 70
33388: PPUSH
33389: CALL_OW 67
// if Connect ( vehicle ) then
33393: LD_VAR 0 1
33397: PPUSH
33398: CALL 45708 0 1
33402: IFFALSE 33443
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33404: LD_VAR 0 1
33408: PPUSH
33409: LD_EXP 139
33413: PUSH
33414: LD_VAR 0 2
33418: ARRAY
33419: PUSH
33420: LD_INT 3
33422: ARRAY
33423: PPUSH
33424: LD_EXP 139
33428: PUSH
33429: LD_VAR 0 2
33433: ARRAY
33434: PUSH
33435: LD_INT 4
33437: ARRAY
33438: PPUSH
33439: CALL_OW 171
// end else
33443: GO 33484
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33445: LD_VAR 0 1
33449: PPUSH
33450: LD_EXP 139
33454: PUSH
33455: LD_VAR 0 2
33459: ARRAY
33460: PUSH
33461: LD_INT 3
33463: ARRAY
33464: PPUSH
33465: LD_EXP 139
33469: PUSH
33470: LD_VAR 0 2
33474: ARRAY
33475: PUSH
33476: LD_INT 4
33478: ARRAY
33479: PPUSH
33480: CALL_OW 171
// end ; end ;
33484: LD_VAR 0 3
33488: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33489: LD_INT 0
33491: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33492: LD_VAR 0 1
33496: PUSH
33497: LD_INT 250
33499: EQUAL
33500: PUSH
33501: LD_VAR 0 2
33505: PPUSH
33506: CALL_OW 264
33510: PUSH
33511: LD_EXP 69
33515: EQUAL
33516: AND
33517: IFFALSE 33538
// MinerPlaceMine ( unit , x , y ) ;
33519: LD_VAR 0 2
33523: PPUSH
33524: LD_VAR 0 4
33528: PPUSH
33529: LD_VAR 0 5
33533: PPUSH
33534: CALL 36266 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33538: LD_VAR 0 1
33542: PUSH
33543: LD_INT 251
33545: EQUAL
33546: PUSH
33547: LD_VAR 0 2
33551: PPUSH
33552: CALL_OW 264
33556: PUSH
33557: LD_EXP 69
33561: EQUAL
33562: AND
33563: IFFALSE 33584
// MinerDetonateMine ( unit , x , y ) ;
33565: LD_VAR 0 2
33569: PPUSH
33570: LD_VAR 0 4
33574: PPUSH
33575: LD_VAR 0 5
33579: PPUSH
33580: CALL 36543 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33584: LD_VAR 0 1
33588: PUSH
33589: LD_INT 252
33591: EQUAL
33592: PUSH
33593: LD_VAR 0 2
33597: PPUSH
33598: CALL_OW 264
33602: PUSH
33603: LD_EXP 69
33607: EQUAL
33608: AND
33609: IFFALSE 33630
// MinerCreateMinefield ( unit , x , y ) ;
33611: LD_VAR 0 2
33615: PPUSH
33616: LD_VAR 0 4
33620: PPUSH
33621: LD_VAR 0 5
33625: PPUSH
33626: CALL 36960 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33630: LD_VAR 0 1
33634: PUSH
33635: LD_INT 253
33637: EQUAL
33638: PUSH
33639: LD_VAR 0 2
33643: PPUSH
33644: CALL_OW 257
33648: PUSH
33649: LD_INT 5
33651: EQUAL
33652: AND
33653: IFFALSE 33674
// ComBinocular ( unit , x , y ) ;
33655: LD_VAR 0 2
33659: PPUSH
33660: LD_VAR 0 4
33664: PPUSH
33665: LD_VAR 0 5
33669: PPUSH
33670: CALL 37331 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33674: LD_VAR 0 1
33678: PUSH
33679: LD_INT 254
33681: EQUAL
33682: PUSH
33683: LD_VAR 0 2
33687: PPUSH
33688: CALL_OW 264
33692: PUSH
33693: LD_EXP 64
33697: EQUAL
33698: AND
33699: PUSH
33700: LD_VAR 0 3
33704: PPUSH
33705: CALL_OW 263
33709: PUSH
33710: LD_INT 3
33712: EQUAL
33713: AND
33714: IFFALSE 33730
// HackDestroyVehicle ( unit , selectedUnit ) ;
33716: LD_VAR 0 2
33720: PPUSH
33721: LD_VAR 0 3
33725: PPUSH
33726: CALL 35626 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33730: LD_VAR 0 1
33734: PUSH
33735: LD_INT 255
33737: EQUAL
33738: PUSH
33739: LD_VAR 0 2
33743: PPUSH
33744: CALL_OW 264
33748: PUSH
33749: LD_INT 14
33751: PUSH
33752: LD_INT 53
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: IN
33759: AND
33760: PUSH
33761: LD_VAR 0 4
33765: PPUSH
33766: LD_VAR 0 5
33770: PPUSH
33771: CALL_OW 488
33775: AND
33776: IFFALSE 33800
// CutTreeXYR ( unit , x , y , 12 ) ;
33778: LD_VAR 0 2
33782: PPUSH
33783: LD_VAR 0 4
33787: PPUSH
33788: LD_VAR 0 5
33792: PPUSH
33793: LD_INT 12
33795: PPUSH
33796: CALL 34192 0 4
// if cmd = 256 then
33800: LD_VAR 0 1
33804: PUSH
33805: LD_INT 256
33807: EQUAL
33808: IFFALSE 33829
// SetFactoryWaypoint ( unit , x , y ) ;
33810: LD_VAR 0 2
33814: PPUSH
33815: LD_VAR 0 4
33819: PPUSH
33820: LD_VAR 0 5
33824: PPUSH
33825: CALL 33834 0 3
// end ;
33829: LD_VAR 0 6
33833: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33834: LD_INT 0
33836: PPUSH
33837: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33838: LD_VAR 0 1
33842: NOT
33843: PUSH
33844: LD_VAR 0 2
33848: PPUSH
33849: LD_VAR 0 3
33853: PPUSH
33854: CALL_OW 488
33858: NOT
33859: OR
33860: PUSH
33861: LD_VAR 0 1
33865: PPUSH
33866: CALL_OW 266
33870: PUSH
33871: LD_INT 3
33873: NONEQUAL
33874: PUSH
33875: LD_VAR 0 1
33879: PPUSH
33880: CALL_OW 247
33884: PUSH
33885: LD_INT 1
33887: EQUAL
33888: NOT
33889: AND
33890: OR
33891: IFFALSE 33895
// exit ;
33893: GO 34044
// if GetType ( factory ) = unit_human then
33895: LD_VAR 0 1
33899: PPUSH
33900: CALL_OW 247
33904: PUSH
33905: LD_INT 1
33907: EQUAL
33908: IFFALSE 33925
// factory := IsInUnit ( factory ) ;
33910: LD_ADDR_VAR 0 1
33914: PUSH
33915: LD_VAR 0 1
33919: PPUSH
33920: CALL_OW 310
33924: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33925: LD_VAR 0 1
33929: PPUSH
33930: CALL_OW 266
33934: PUSH
33935: LD_INT 3
33937: NONEQUAL
33938: IFFALSE 33942
// exit ;
33940: GO 34044
// if HexInfo ( x , y ) = factory then
33942: LD_VAR 0 2
33946: PPUSH
33947: LD_VAR 0 3
33951: PPUSH
33952: CALL_OW 428
33956: PUSH
33957: LD_VAR 0 1
33961: EQUAL
33962: IFFALSE 33989
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33964: LD_ADDR_EXP 139
33968: PUSH
33969: LD_EXP 139
33973: PPUSH
33974: LD_VAR 0 1
33978: PPUSH
33979: LD_INT 0
33981: PPUSH
33982: CALL_OW 1
33986: ST_TO_ADDR
33987: GO 34040
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33989: LD_ADDR_EXP 139
33993: PUSH
33994: LD_EXP 139
33998: PPUSH
33999: LD_VAR 0 1
34003: PPUSH
34004: LD_VAR 0 1
34008: PPUSH
34009: CALL_OW 255
34013: PUSH
34014: LD_VAR 0 1
34018: PUSH
34019: LD_VAR 0 2
34023: PUSH
34024: LD_VAR 0 3
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: PPUSH
34035: CALL_OW 1
34039: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34040: CALL 34049 0 0
// end ;
34044: LD_VAR 0 4
34048: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
34049: LD_INT 0
34051: PPUSH
34052: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34053: LD_STRING resetFactoryWaypoint();
34055: PPUSH
34056: CALL_OW 559
// if factoryWaypoints then
34060: LD_EXP 139
34064: IFFALSE 34187
// begin for i := 1 to factoryWaypoints do
34066: LD_ADDR_VAR 0 2
34070: PUSH
34071: DOUBLE
34072: LD_INT 1
34074: DEC
34075: ST_TO_ADDR
34076: LD_EXP 139
34080: PUSH
34081: FOR_TO
34082: IFFALSE 34185
// if factoryWaypoints [ i ] then
34084: LD_EXP 139
34088: PUSH
34089: LD_VAR 0 2
34093: ARRAY
34094: IFFALSE 34183
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
34096: LD_STRING setFactoryWaypointXY(
34098: PUSH
34099: LD_EXP 139
34103: PUSH
34104: LD_VAR 0 2
34108: ARRAY
34109: PUSH
34110: LD_INT 1
34112: ARRAY
34113: STR
34114: PUSH
34115: LD_STRING ,
34117: STR
34118: PUSH
34119: LD_EXP 139
34123: PUSH
34124: LD_VAR 0 2
34128: ARRAY
34129: PUSH
34130: LD_INT 2
34132: ARRAY
34133: STR
34134: PUSH
34135: LD_STRING ,
34137: STR
34138: PUSH
34139: LD_EXP 139
34143: PUSH
34144: LD_VAR 0 2
34148: ARRAY
34149: PUSH
34150: LD_INT 3
34152: ARRAY
34153: STR
34154: PUSH
34155: LD_STRING ,
34157: STR
34158: PUSH
34159: LD_EXP 139
34163: PUSH
34164: LD_VAR 0 2
34168: ARRAY
34169: PUSH
34170: LD_INT 4
34172: ARRAY
34173: STR
34174: PUSH
34175: LD_STRING )
34177: STR
34178: PPUSH
34179: CALL_OW 559
34183: GO 34081
34185: POP
34186: POP
// end ; end ;
34187: LD_VAR 0 1
34191: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34192: LD_INT 0
34194: PPUSH
34195: PPUSH
34196: PPUSH
34197: PPUSH
34198: PPUSH
34199: PPUSH
34200: PPUSH
34201: PPUSH
34202: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34203: LD_VAR 0 1
34207: NOT
34208: PUSH
34209: LD_VAR 0 2
34213: PPUSH
34214: LD_VAR 0 3
34218: PPUSH
34219: CALL_OW 488
34223: NOT
34224: OR
34225: PUSH
34226: LD_VAR 0 4
34230: NOT
34231: OR
34232: IFFALSE 34236
// exit ;
34234: GO 34576
// list := [ ] ;
34236: LD_ADDR_VAR 0 13
34240: PUSH
34241: EMPTY
34242: ST_TO_ADDR
// if x - r < 0 then
34243: LD_VAR 0 2
34247: PUSH
34248: LD_VAR 0 4
34252: MINUS
34253: PUSH
34254: LD_INT 0
34256: LESS
34257: IFFALSE 34269
// min_x := 0 else
34259: LD_ADDR_VAR 0 7
34263: PUSH
34264: LD_INT 0
34266: ST_TO_ADDR
34267: GO 34285
// min_x := x - r ;
34269: LD_ADDR_VAR 0 7
34273: PUSH
34274: LD_VAR 0 2
34278: PUSH
34279: LD_VAR 0 4
34283: MINUS
34284: ST_TO_ADDR
// if y - r < 0 then
34285: LD_VAR 0 3
34289: PUSH
34290: LD_VAR 0 4
34294: MINUS
34295: PUSH
34296: LD_INT 0
34298: LESS
34299: IFFALSE 34311
// min_y := 0 else
34301: LD_ADDR_VAR 0 8
34305: PUSH
34306: LD_INT 0
34308: ST_TO_ADDR
34309: GO 34327
// min_y := y - r ;
34311: LD_ADDR_VAR 0 8
34315: PUSH
34316: LD_VAR 0 3
34320: PUSH
34321: LD_VAR 0 4
34325: MINUS
34326: ST_TO_ADDR
// max_x := x + r ;
34327: LD_ADDR_VAR 0 9
34331: PUSH
34332: LD_VAR 0 2
34336: PUSH
34337: LD_VAR 0 4
34341: PLUS
34342: ST_TO_ADDR
// max_y := y + r ;
34343: LD_ADDR_VAR 0 10
34347: PUSH
34348: LD_VAR 0 3
34352: PUSH
34353: LD_VAR 0 4
34357: PLUS
34358: ST_TO_ADDR
// for _x = min_x to max_x do
34359: LD_ADDR_VAR 0 11
34363: PUSH
34364: DOUBLE
34365: LD_VAR 0 7
34369: DEC
34370: ST_TO_ADDR
34371: LD_VAR 0 9
34375: PUSH
34376: FOR_TO
34377: IFFALSE 34494
// for _y = min_y to max_y do
34379: LD_ADDR_VAR 0 12
34383: PUSH
34384: DOUBLE
34385: LD_VAR 0 8
34389: DEC
34390: ST_TO_ADDR
34391: LD_VAR 0 10
34395: PUSH
34396: FOR_TO
34397: IFFALSE 34490
// begin if not ValidHex ( _x , _y ) then
34399: LD_VAR 0 11
34403: PPUSH
34404: LD_VAR 0 12
34408: PPUSH
34409: CALL_OW 488
34413: NOT
34414: IFFALSE 34418
// continue ;
34416: GO 34396
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34418: LD_VAR 0 11
34422: PPUSH
34423: LD_VAR 0 12
34427: PPUSH
34428: CALL_OW 351
34432: PUSH
34433: LD_VAR 0 11
34437: PPUSH
34438: LD_VAR 0 12
34442: PPUSH
34443: CALL_OW 554
34447: AND
34448: IFFALSE 34488
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34450: LD_ADDR_VAR 0 13
34454: PUSH
34455: LD_VAR 0 13
34459: PPUSH
34460: LD_VAR 0 13
34464: PUSH
34465: LD_INT 1
34467: PLUS
34468: PPUSH
34469: LD_VAR 0 11
34473: PUSH
34474: LD_VAR 0 12
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PPUSH
34483: CALL_OW 2
34487: ST_TO_ADDR
// end ;
34488: GO 34396
34490: POP
34491: POP
34492: GO 34376
34494: POP
34495: POP
// if not list then
34496: LD_VAR 0 13
34500: NOT
34501: IFFALSE 34505
// exit ;
34503: GO 34576
// for i in list do
34505: LD_ADDR_VAR 0 6
34509: PUSH
34510: LD_VAR 0 13
34514: PUSH
34515: FOR_IN
34516: IFFALSE 34574
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34518: LD_VAR 0 1
34522: PPUSH
34523: LD_STRING M
34525: PUSH
34526: LD_VAR 0 6
34530: PUSH
34531: LD_INT 1
34533: ARRAY
34534: PUSH
34535: LD_VAR 0 6
34539: PUSH
34540: LD_INT 2
34542: ARRAY
34543: PUSH
34544: LD_INT 0
34546: PUSH
34547: LD_INT 0
34549: PUSH
34550: LD_INT 0
34552: PUSH
34553: LD_INT 0
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: PUSH
34565: EMPTY
34566: LIST
34567: PPUSH
34568: CALL_OW 447
34572: GO 34515
34574: POP
34575: POP
// end ;
34576: LD_VAR 0 5
34580: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34581: LD_EXP 140
34585: NOT
34586: IFFALSE 34636
34588: GO 34590
34590: DISABLE
// begin initHack := true ;
34591: LD_ADDR_EXP 140
34595: PUSH
34596: LD_INT 1
34598: ST_TO_ADDR
// hackTanks := [ ] ;
34599: LD_ADDR_EXP 141
34603: PUSH
34604: EMPTY
34605: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34606: LD_ADDR_EXP 142
34610: PUSH
34611: EMPTY
34612: ST_TO_ADDR
// hackLimit := 3 ;
34613: LD_ADDR_EXP 143
34617: PUSH
34618: LD_INT 3
34620: ST_TO_ADDR
// hackDist := 12 ;
34621: LD_ADDR_EXP 144
34625: PUSH
34626: LD_INT 12
34628: ST_TO_ADDR
// hackCounter := [ ] ;
34629: LD_ADDR_EXP 145
34633: PUSH
34634: EMPTY
34635: ST_TO_ADDR
// end ;
34636: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34637: LD_EXP 140
34641: PUSH
34642: LD_INT 34
34644: PUSH
34645: LD_EXP 64
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PPUSH
34654: CALL_OW 69
34658: AND
34659: IFFALSE 34914
34661: GO 34663
34663: DISABLE
34664: LD_INT 0
34666: PPUSH
34667: PPUSH
// begin enable ;
34668: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34669: LD_ADDR_VAR 0 1
34673: PUSH
34674: LD_INT 34
34676: PUSH
34677: LD_EXP 64
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PPUSH
34686: CALL_OW 69
34690: PUSH
34691: FOR_IN
34692: IFFALSE 34912
// begin if not i in hackTanks then
34694: LD_VAR 0 1
34698: PUSH
34699: LD_EXP 141
34703: IN
34704: NOT
34705: IFFALSE 34788
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34707: LD_ADDR_EXP 141
34711: PUSH
34712: LD_EXP 141
34716: PPUSH
34717: LD_EXP 141
34721: PUSH
34722: LD_INT 1
34724: PLUS
34725: PPUSH
34726: LD_VAR 0 1
34730: PPUSH
34731: CALL_OW 1
34735: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34736: LD_ADDR_EXP 142
34740: PUSH
34741: LD_EXP 142
34745: PPUSH
34746: LD_EXP 142
34750: PUSH
34751: LD_INT 1
34753: PLUS
34754: PPUSH
34755: EMPTY
34756: PPUSH
34757: CALL_OW 1
34761: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34762: LD_ADDR_EXP 145
34766: PUSH
34767: LD_EXP 145
34771: PPUSH
34772: LD_EXP 145
34776: PUSH
34777: LD_INT 1
34779: PLUS
34780: PPUSH
34781: EMPTY
34782: PPUSH
34783: CALL_OW 1
34787: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34788: LD_VAR 0 1
34792: PPUSH
34793: CALL_OW 302
34797: NOT
34798: IFFALSE 34811
// begin HackUnlinkAll ( i ) ;
34800: LD_VAR 0 1
34804: PPUSH
34805: CALL 34917 0 1
// continue ;
34809: GO 34691
// end ; HackCheckCapturedStatus ( i ) ;
34811: LD_VAR 0 1
34815: PPUSH
34816: CALL 35360 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34820: LD_ADDR_VAR 0 2
34824: PUSH
34825: LD_INT 81
34827: PUSH
34828: LD_VAR 0 1
34832: PPUSH
34833: CALL_OW 255
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 33
34844: PUSH
34845: LD_INT 3
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 91
34854: PUSH
34855: LD_VAR 0 1
34859: PUSH
34860: LD_EXP 144
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 50
34872: PUSH
34873: EMPTY
34874: LIST
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: PPUSH
34882: CALL_OW 69
34886: ST_TO_ADDR
// if not tmp then
34887: LD_VAR 0 2
34891: NOT
34892: IFFALSE 34896
// continue ;
34894: GO 34691
// HackLink ( i , tmp ) ;
34896: LD_VAR 0 1
34900: PPUSH
34901: LD_VAR 0 2
34905: PPUSH
34906: CALL 35053 0 2
// end ;
34910: GO 34691
34912: POP
34913: POP
// end ;
34914: PPOPN 2
34916: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34917: LD_INT 0
34919: PPUSH
34920: PPUSH
34921: PPUSH
// if not hack in hackTanks then
34922: LD_VAR 0 1
34926: PUSH
34927: LD_EXP 141
34931: IN
34932: NOT
34933: IFFALSE 34937
// exit ;
34935: GO 35048
// index := GetElementIndex ( hackTanks , hack ) ;
34937: LD_ADDR_VAR 0 4
34941: PUSH
34942: LD_EXP 141
34946: PPUSH
34947: LD_VAR 0 1
34951: PPUSH
34952: CALL 42522 0 2
34956: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34957: LD_EXP 142
34961: PUSH
34962: LD_VAR 0 4
34966: ARRAY
34967: IFFALSE 35048
// begin for i in hackTanksCaptured [ index ] do
34969: LD_ADDR_VAR 0 3
34973: PUSH
34974: LD_EXP 142
34978: PUSH
34979: LD_VAR 0 4
34983: ARRAY
34984: PUSH
34985: FOR_IN
34986: IFFALSE 35012
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34988: LD_VAR 0 3
34992: PUSH
34993: LD_INT 1
34995: ARRAY
34996: PPUSH
34997: LD_VAR 0 3
35001: PUSH
35002: LD_INT 2
35004: ARRAY
35005: PPUSH
35006: CALL_OW 235
35010: GO 34985
35012: POP
35013: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35014: LD_ADDR_EXP 142
35018: PUSH
35019: LD_EXP 142
35023: PPUSH
35024: LD_VAR 0 4
35028: PPUSH
35029: EMPTY
35030: PPUSH
35031: CALL_OW 1
35035: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35036: LD_VAR 0 1
35040: PPUSH
35041: LD_INT 0
35043: PPUSH
35044: CALL_OW 505
// end ; end ;
35048: LD_VAR 0 2
35052: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35053: LD_INT 0
35055: PPUSH
35056: PPUSH
35057: PPUSH
// if not hack in hackTanks or not vehicles then
35058: LD_VAR 0 1
35062: PUSH
35063: LD_EXP 141
35067: IN
35068: NOT
35069: PUSH
35070: LD_VAR 0 2
35074: NOT
35075: OR
35076: IFFALSE 35080
// exit ;
35078: GO 35355
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35080: LD_ADDR_VAR 0 2
35084: PUSH
35085: LD_VAR 0 1
35089: PPUSH
35090: LD_VAR 0 2
35094: PPUSH
35095: LD_INT 1
35097: PPUSH
35098: LD_INT 1
35100: PPUSH
35101: CALL 43172 0 4
35105: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35106: LD_ADDR_VAR 0 5
35110: PUSH
35111: LD_EXP 141
35115: PPUSH
35116: LD_VAR 0 1
35120: PPUSH
35121: CALL 42522 0 2
35125: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35126: LD_EXP 142
35130: PUSH
35131: LD_VAR 0 5
35135: ARRAY
35136: PUSH
35137: LD_EXP 143
35141: LESS
35142: IFFALSE 35331
// begin for i := 1 to vehicles do
35144: LD_ADDR_VAR 0 4
35148: PUSH
35149: DOUBLE
35150: LD_INT 1
35152: DEC
35153: ST_TO_ADDR
35154: LD_VAR 0 2
35158: PUSH
35159: FOR_TO
35160: IFFALSE 35329
// begin if hackTanksCaptured [ index ] = hackLimit then
35162: LD_EXP 142
35166: PUSH
35167: LD_VAR 0 5
35171: ARRAY
35172: PUSH
35173: LD_EXP 143
35177: EQUAL
35178: IFFALSE 35182
// break ;
35180: GO 35329
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35182: LD_ADDR_EXP 145
35186: PUSH
35187: LD_EXP 145
35191: PPUSH
35192: LD_VAR 0 5
35196: PPUSH
35197: LD_EXP 145
35201: PUSH
35202: LD_VAR 0 5
35206: ARRAY
35207: PUSH
35208: LD_INT 1
35210: PLUS
35211: PPUSH
35212: CALL_OW 1
35216: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35217: LD_ADDR_EXP 142
35221: PUSH
35222: LD_EXP 142
35226: PPUSH
35227: LD_VAR 0 5
35231: PUSH
35232: LD_EXP 142
35236: PUSH
35237: LD_VAR 0 5
35241: ARRAY
35242: PUSH
35243: LD_INT 1
35245: PLUS
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PPUSH
35251: LD_VAR 0 2
35255: PUSH
35256: LD_VAR 0 4
35260: ARRAY
35261: PUSH
35262: LD_VAR 0 2
35266: PUSH
35267: LD_VAR 0 4
35271: ARRAY
35272: PPUSH
35273: CALL_OW 255
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PPUSH
35282: CALL 42737 0 3
35286: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35287: LD_VAR 0 2
35291: PUSH
35292: LD_VAR 0 4
35296: ARRAY
35297: PPUSH
35298: LD_VAR 0 1
35302: PPUSH
35303: CALL_OW 255
35307: PPUSH
35308: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35312: LD_VAR 0 2
35316: PUSH
35317: LD_VAR 0 4
35321: ARRAY
35322: PPUSH
35323: CALL_OW 141
// end ;
35327: GO 35159
35329: POP
35330: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35331: LD_VAR 0 1
35335: PPUSH
35336: LD_EXP 142
35340: PUSH
35341: LD_VAR 0 5
35345: ARRAY
35346: PUSH
35347: LD_INT 0
35349: PLUS
35350: PPUSH
35351: CALL_OW 505
// end ;
35355: LD_VAR 0 3
35359: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35360: LD_INT 0
35362: PPUSH
35363: PPUSH
35364: PPUSH
35365: PPUSH
// if not hack in hackTanks then
35366: LD_VAR 0 1
35370: PUSH
35371: LD_EXP 141
35375: IN
35376: NOT
35377: IFFALSE 35381
// exit ;
35379: GO 35621
// index := GetElementIndex ( hackTanks , hack ) ;
35381: LD_ADDR_VAR 0 4
35385: PUSH
35386: LD_EXP 141
35390: PPUSH
35391: LD_VAR 0 1
35395: PPUSH
35396: CALL 42522 0 2
35400: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35401: LD_ADDR_VAR 0 3
35405: PUSH
35406: DOUBLE
35407: LD_EXP 142
35411: PUSH
35412: LD_VAR 0 4
35416: ARRAY
35417: INC
35418: ST_TO_ADDR
35419: LD_INT 1
35421: PUSH
35422: FOR_DOWNTO
35423: IFFALSE 35595
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35425: LD_ADDR_VAR 0 5
35429: PUSH
35430: LD_EXP 142
35434: PUSH
35435: LD_VAR 0 4
35439: ARRAY
35440: PUSH
35441: LD_VAR 0 3
35445: ARRAY
35446: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35447: LD_VAR 0 5
35451: PUSH
35452: LD_INT 1
35454: ARRAY
35455: PPUSH
35456: CALL_OW 302
35460: NOT
35461: PUSH
35462: LD_VAR 0 5
35466: PUSH
35467: LD_INT 1
35469: ARRAY
35470: PPUSH
35471: CALL_OW 255
35475: PUSH
35476: LD_VAR 0 1
35480: PPUSH
35481: CALL_OW 255
35485: NONEQUAL
35486: OR
35487: IFFALSE 35593
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35489: LD_VAR 0 5
35493: PUSH
35494: LD_INT 1
35496: ARRAY
35497: PPUSH
35498: CALL_OW 305
35502: PUSH
35503: LD_VAR 0 5
35507: PUSH
35508: LD_INT 1
35510: ARRAY
35511: PPUSH
35512: CALL_OW 255
35516: PUSH
35517: LD_VAR 0 1
35521: PPUSH
35522: CALL_OW 255
35526: EQUAL
35527: AND
35528: IFFALSE 35552
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35530: LD_VAR 0 5
35534: PUSH
35535: LD_INT 1
35537: ARRAY
35538: PPUSH
35539: LD_VAR 0 5
35543: PUSH
35544: LD_INT 2
35546: ARRAY
35547: PPUSH
35548: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35552: LD_ADDR_EXP 142
35556: PUSH
35557: LD_EXP 142
35561: PPUSH
35562: LD_VAR 0 4
35566: PPUSH
35567: LD_EXP 142
35571: PUSH
35572: LD_VAR 0 4
35576: ARRAY
35577: PPUSH
35578: LD_VAR 0 3
35582: PPUSH
35583: CALL_OW 3
35587: PPUSH
35588: CALL_OW 1
35592: ST_TO_ADDR
// end ; end ;
35593: GO 35422
35595: POP
35596: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35597: LD_VAR 0 1
35601: PPUSH
35602: LD_EXP 142
35606: PUSH
35607: LD_VAR 0 4
35611: ARRAY
35612: PUSH
35613: LD_INT 0
35615: PLUS
35616: PPUSH
35617: CALL_OW 505
// end ;
35621: LD_VAR 0 2
35625: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35626: LD_INT 0
35628: PPUSH
35629: PPUSH
35630: PPUSH
35631: PPUSH
// if not hack in hackTanks then
35632: LD_VAR 0 1
35636: PUSH
35637: LD_EXP 141
35641: IN
35642: NOT
35643: IFFALSE 35647
// exit ;
35645: GO 35732
// index := GetElementIndex ( hackTanks , hack ) ;
35647: LD_ADDR_VAR 0 5
35651: PUSH
35652: LD_EXP 141
35656: PPUSH
35657: LD_VAR 0 1
35661: PPUSH
35662: CALL 42522 0 2
35666: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35667: LD_ADDR_VAR 0 4
35671: PUSH
35672: DOUBLE
35673: LD_INT 1
35675: DEC
35676: ST_TO_ADDR
35677: LD_EXP 142
35681: PUSH
35682: LD_VAR 0 5
35686: ARRAY
35687: PUSH
35688: FOR_TO
35689: IFFALSE 35730
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35691: LD_EXP 142
35695: PUSH
35696: LD_VAR 0 5
35700: ARRAY
35701: PUSH
35702: LD_VAR 0 4
35706: ARRAY
35707: PUSH
35708: LD_INT 1
35710: ARRAY
35711: PUSH
35712: LD_VAR 0 2
35716: EQUAL
35717: IFFALSE 35728
// KillUnit ( vehicle ) ;
35719: LD_VAR 0 2
35723: PPUSH
35724: CALL_OW 66
35728: GO 35688
35730: POP
35731: POP
// end ;
35732: LD_VAR 0 3
35736: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35737: LD_EXP 146
35741: NOT
35742: IFFALSE 35777
35744: GO 35746
35746: DISABLE
// begin initMiner := true ;
35747: LD_ADDR_EXP 146
35751: PUSH
35752: LD_INT 1
35754: ST_TO_ADDR
// minersList := [ ] ;
35755: LD_ADDR_EXP 147
35759: PUSH
35760: EMPTY
35761: ST_TO_ADDR
// minerMinesList := [ ] ;
35762: LD_ADDR_EXP 148
35766: PUSH
35767: EMPTY
35768: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35769: LD_ADDR_EXP 149
35773: PUSH
35774: LD_INT 5
35776: ST_TO_ADDR
// end ;
35777: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35778: LD_EXP 146
35782: PUSH
35783: LD_INT 34
35785: PUSH
35786: LD_EXP 69
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PPUSH
35795: CALL_OW 69
35799: AND
35800: IFFALSE 36263
35802: GO 35804
35804: DISABLE
35805: LD_INT 0
35807: PPUSH
35808: PPUSH
35809: PPUSH
35810: PPUSH
// begin enable ;
35811: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35812: LD_ADDR_VAR 0 1
35816: PUSH
35817: LD_INT 34
35819: PUSH
35820: LD_EXP 69
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PPUSH
35829: CALL_OW 69
35833: PUSH
35834: FOR_IN
35835: IFFALSE 35907
// begin if not i in minersList then
35837: LD_VAR 0 1
35841: PUSH
35842: LD_EXP 147
35846: IN
35847: NOT
35848: IFFALSE 35905
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35850: LD_ADDR_EXP 147
35854: PUSH
35855: LD_EXP 147
35859: PPUSH
35860: LD_EXP 147
35864: PUSH
35865: LD_INT 1
35867: PLUS
35868: PPUSH
35869: LD_VAR 0 1
35873: PPUSH
35874: CALL_OW 1
35878: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35879: LD_ADDR_EXP 148
35883: PUSH
35884: LD_EXP 148
35888: PPUSH
35889: LD_EXP 148
35893: PUSH
35894: LD_INT 1
35896: PLUS
35897: PPUSH
35898: EMPTY
35899: PPUSH
35900: CALL_OW 1
35904: ST_TO_ADDR
// end end ;
35905: GO 35834
35907: POP
35908: POP
// for i := minerMinesList downto 1 do
35909: LD_ADDR_VAR 0 1
35913: PUSH
35914: DOUBLE
35915: LD_EXP 148
35919: INC
35920: ST_TO_ADDR
35921: LD_INT 1
35923: PUSH
35924: FOR_DOWNTO
35925: IFFALSE 36261
// begin if IsLive ( minersList [ i ] ) then
35927: LD_EXP 147
35931: PUSH
35932: LD_VAR 0 1
35936: ARRAY
35937: PPUSH
35938: CALL_OW 300
35942: IFFALSE 35970
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35944: LD_EXP 147
35948: PUSH
35949: LD_VAR 0 1
35953: ARRAY
35954: PPUSH
35955: LD_EXP 148
35959: PUSH
35960: LD_VAR 0 1
35964: ARRAY
35965: PPUSH
35966: CALL_OW 505
// if not minerMinesList [ i ] then
35970: LD_EXP 148
35974: PUSH
35975: LD_VAR 0 1
35979: ARRAY
35980: NOT
35981: IFFALSE 35985
// continue ;
35983: GO 35924
// for j := minerMinesList [ i ] downto 1 do
35985: LD_ADDR_VAR 0 2
35989: PUSH
35990: DOUBLE
35991: LD_EXP 148
35995: PUSH
35996: LD_VAR 0 1
36000: ARRAY
36001: INC
36002: ST_TO_ADDR
36003: LD_INT 1
36005: PUSH
36006: FOR_DOWNTO
36007: IFFALSE 36257
// begin side := GetSide ( minersList [ i ] ) ;
36009: LD_ADDR_VAR 0 3
36013: PUSH
36014: LD_EXP 147
36018: PUSH
36019: LD_VAR 0 1
36023: ARRAY
36024: PPUSH
36025: CALL_OW 255
36029: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36030: LD_ADDR_VAR 0 4
36034: PUSH
36035: LD_EXP 148
36039: PUSH
36040: LD_VAR 0 1
36044: ARRAY
36045: PUSH
36046: LD_VAR 0 2
36050: ARRAY
36051: PUSH
36052: LD_INT 1
36054: ARRAY
36055: PPUSH
36056: LD_EXP 148
36060: PUSH
36061: LD_VAR 0 1
36065: ARRAY
36066: PUSH
36067: LD_VAR 0 2
36071: ARRAY
36072: PUSH
36073: LD_INT 2
36075: ARRAY
36076: PPUSH
36077: CALL_OW 428
36081: ST_TO_ADDR
// if not tmp then
36082: LD_VAR 0 4
36086: NOT
36087: IFFALSE 36091
// continue ;
36089: GO 36006
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36091: LD_VAR 0 4
36095: PUSH
36096: LD_INT 81
36098: PUSH
36099: LD_VAR 0 3
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PPUSH
36108: CALL_OW 69
36112: IN
36113: PUSH
36114: LD_EXP 148
36118: PUSH
36119: LD_VAR 0 1
36123: ARRAY
36124: PUSH
36125: LD_VAR 0 2
36129: ARRAY
36130: PUSH
36131: LD_INT 1
36133: ARRAY
36134: PPUSH
36135: LD_EXP 148
36139: PUSH
36140: LD_VAR 0 1
36144: ARRAY
36145: PUSH
36146: LD_VAR 0 2
36150: ARRAY
36151: PUSH
36152: LD_INT 2
36154: ARRAY
36155: PPUSH
36156: CALL_OW 458
36160: AND
36161: IFFALSE 36255
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36163: LD_EXP 148
36167: PUSH
36168: LD_VAR 0 1
36172: ARRAY
36173: PUSH
36174: LD_VAR 0 2
36178: ARRAY
36179: PUSH
36180: LD_INT 1
36182: ARRAY
36183: PPUSH
36184: LD_EXP 148
36188: PUSH
36189: LD_VAR 0 1
36193: ARRAY
36194: PUSH
36195: LD_VAR 0 2
36199: ARRAY
36200: PUSH
36201: LD_INT 2
36203: ARRAY
36204: PPUSH
36205: LD_VAR 0 3
36209: PPUSH
36210: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36214: LD_ADDR_EXP 148
36218: PUSH
36219: LD_EXP 148
36223: PPUSH
36224: LD_VAR 0 1
36228: PPUSH
36229: LD_EXP 148
36233: PUSH
36234: LD_VAR 0 1
36238: ARRAY
36239: PPUSH
36240: LD_VAR 0 2
36244: PPUSH
36245: CALL_OW 3
36249: PPUSH
36250: CALL_OW 1
36254: ST_TO_ADDR
// end ; end ;
36255: GO 36006
36257: POP
36258: POP
// end ;
36259: GO 35924
36261: POP
36262: POP
// end ;
36263: PPOPN 4
36265: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36266: LD_INT 0
36268: PPUSH
36269: PPUSH
// result := false ;
36270: LD_ADDR_VAR 0 4
36274: PUSH
36275: LD_INT 0
36277: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36278: LD_VAR 0 1
36282: PPUSH
36283: CALL_OW 264
36287: PUSH
36288: LD_EXP 69
36292: EQUAL
36293: NOT
36294: IFFALSE 36298
// exit ;
36296: GO 36538
// index := GetElementIndex ( minersList , unit ) ;
36298: LD_ADDR_VAR 0 5
36302: PUSH
36303: LD_EXP 147
36307: PPUSH
36308: LD_VAR 0 1
36312: PPUSH
36313: CALL 42522 0 2
36317: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36318: LD_EXP 148
36322: PUSH
36323: LD_VAR 0 5
36327: ARRAY
36328: PUSH
36329: LD_EXP 149
36333: GREATEREQUAL
36334: IFFALSE 36338
// exit ;
36336: GO 36538
// ComMoveXY ( unit , x , y ) ;
36338: LD_VAR 0 1
36342: PPUSH
36343: LD_VAR 0 2
36347: PPUSH
36348: LD_VAR 0 3
36352: PPUSH
36353: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36357: LD_INT 35
36359: PPUSH
36360: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36364: LD_VAR 0 1
36368: PPUSH
36369: LD_VAR 0 2
36373: PPUSH
36374: LD_VAR 0 3
36378: PPUSH
36379: CALL 73241 0 3
36383: NOT
36384: PUSH
36385: LD_VAR 0 1
36389: PPUSH
36390: CALL_OW 314
36394: AND
36395: IFFALSE 36399
// exit ;
36397: GO 36538
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36399: LD_VAR 0 2
36403: PPUSH
36404: LD_VAR 0 3
36408: PPUSH
36409: CALL_OW 428
36413: PUSH
36414: LD_VAR 0 1
36418: EQUAL
36419: PUSH
36420: LD_VAR 0 1
36424: PPUSH
36425: CALL_OW 314
36429: NOT
36430: AND
36431: IFFALSE 36357
// PlaySoundXY ( x , y , PlantMine ) ;
36433: LD_VAR 0 2
36437: PPUSH
36438: LD_VAR 0 3
36442: PPUSH
36443: LD_STRING PlantMine
36445: PPUSH
36446: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36450: LD_VAR 0 2
36454: PPUSH
36455: LD_VAR 0 3
36459: PPUSH
36460: LD_VAR 0 1
36464: PPUSH
36465: CALL_OW 255
36469: PPUSH
36470: LD_INT 0
36472: PPUSH
36473: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36477: LD_ADDR_EXP 148
36481: PUSH
36482: LD_EXP 148
36486: PPUSH
36487: LD_VAR 0 5
36491: PUSH
36492: LD_EXP 148
36496: PUSH
36497: LD_VAR 0 5
36501: ARRAY
36502: PUSH
36503: LD_INT 1
36505: PLUS
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PPUSH
36511: LD_VAR 0 2
36515: PUSH
36516: LD_VAR 0 3
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PPUSH
36525: CALL 42737 0 3
36529: ST_TO_ADDR
// result := true ;
36530: LD_ADDR_VAR 0 4
36534: PUSH
36535: LD_INT 1
36537: ST_TO_ADDR
// end ;
36538: LD_VAR 0 4
36542: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36543: LD_INT 0
36545: PPUSH
36546: PPUSH
36547: PPUSH
// if not unit in minersList then
36548: LD_VAR 0 1
36552: PUSH
36553: LD_EXP 147
36557: IN
36558: NOT
36559: IFFALSE 36563
// exit ;
36561: GO 36955
// index := GetElementIndex ( minersList , unit ) ;
36563: LD_ADDR_VAR 0 6
36567: PUSH
36568: LD_EXP 147
36572: PPUSH
36573: LD_VAR 0 1
36577: PPUSH
36578: CALL 42522 0 2
36582: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36583: LD_ADDR_VAR 0 5
36587: PUSH
36588: DOUBLE
36589: LD_EXP 148
36593: PUSH
36594: LD_VAR 0 6
36598: ARRAY
36599: INC
36600: ST_TO_ADDR
36601: LD_INT 1
36603: PUSH
36604: FOR_DOWNTO
36605: IFFALSE 36766
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36607: LD_EXP 148
36611: PUSH
36612: LD_VAR 0 6
36616: ARRAY
36617: PUSH
36618: LD_VAR 0 5
36622: ARRAY
36623: PUSH
36624: LD_INT 1
36626: ARRAY
36627: PUSH
36628: LD_VAR 0 2
36632: EQUAL
36633: PUSH
36634: LD_EXP 148
36638: PUSH
36639: LD_VAR 0 6
36643: ARRAY
36644: PUSH
36645: LD_VAR 0 5
36649: ARRAY
36650: PUSH
36651: LD_INT 2
36653: ARRAY
36654: PUSH
36655: LD_VAR 0 3
36659: EQUAL
36660: AND
36661: IFFALSE 36764
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36663: LD_EXP 148
36667: PUSH
36668: LD_VAR 0 6
36672: ARRAY
36673: PUSH
36674: LD_VAR 0 5
36678: ARRAY
36679: PUSH
36680: LD_INT 1
36682: ARRAY
36683: PPUSH
36684: LD_EXP 148
36688: PUSH
36689: LD_VAR 0 6
36693: ARRAY
36694: PUSH
36695: LD_VAR 0 5
36699: ARRAY
36700: PUSH
36701: LD_INT 2
36703: ARRAY
36704: PPUSH
36705: LD_VAR 0 1
36709: PPUSH
36710: CALL_OW 255
36714: PPUSH
36715: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36719: LD_ADDR_EXP 148
36723: PUSH
36724: LD_EXP 148
36728: PPUSH
36729: LD_VAR 0 6
36733: PPUSH
36734: LD_EXP 148
36738: PUSH
36739: LD_VAR 0 6
36743: ARRAY
36744: PPUSH
36745: LD_VAR 0 5
36749: PPUSH
36750: CALL_OW 3
36754: PPUSH
36755: CALL_OW 1
36759: ST_TO_ADDR
// exit ;
36760: POP
36761: POP
36762: GO 36955
// end ; end ;
36764: GO 36604
36766: POP
36767: POP
// for i := minerMinesList [ index ] downto 1 do
36768: LD_ADDR_VAR 0 5
36772: PUSH
36773: DOUBLE
36774: LD_EXP 148
36778: PUSH
36779: LD_VAR 0 6
36783: ARRAY
36784: INC
36785: ST_TO_ADDR
36786: LD_INT 1
36788: PUSH
36789: FOR_DOWNTO
36790: IFFALSE 36953
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36792: LD_EXP 148
36796: PUSH
36797: LD_VAR 0 6
36801: ARRAY
36802: PUSH
36803: LD_VAR 0 5
36807: ARRAY
36808: PUSH
36809: LD_INT 1
36811: ARRAY
36812: PPUSH
36813: LD_EXP 148
36817: PUSH
36818: LD_VAR 0 6
36822: ARRAY
36823: PUSH
36824: LD_VAR 0 5
36828: ARRAY
36829: PUSH
36830: LD_INT 2
36832: ARRAY
36833: PPUSH
36834: LD_VAR 0 2
36838: PPUSH
36839: LD_VAR 0 3
36843: PPUSH
36844: CALL_OW 298
36848: PUSH
36849: LD_INT 6
36851: LESS
36852: IFFALSE 36951
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36854: LD_EXP 148
36858: PUSH
36859: LD_VAR 0 6
36863: ARRAY
36864: PUSH
36865: LD_VAR 0 5
36869: ARRAY
36870: PUSH
36871: LD_INT 1
36873: ARRAY
36874: PPUSH
36875: LD_EXP 148
36879: PUSH
36880: LD_VAR 0 6
36884: ARRAY
36885: PUSH
36886: LD_VAR 0 5
36890: ARRAY
36891: PUSH
36892: LD_INT 2
36894: ARRAY
36895: PPUSH
36896: LD_VAR 0 1
36900: PPUSH
36901: CALL_OW 255
36905: PPUSH
36906: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36910: LD_ADDR_EXP 148
36914: PUSH
36915: LD_EXP 148
36919: PPUSH
36920: LD_VAR 0 6
36924: PPUSH
36925: LD_EXP 148
36929: PUSH
36930: LD_VAR 0 6
36934: ARRAY
36935: PPUSH
36936: LD_VAR 0 5
36940: PPUSH
36941: CALL_OW 3
36945: PPUSH
36946: CALL_OW 1
36950: ST_TO_ADDR
// end ; end ;
36951: GO 36789
36953: POP
36954: POP
// end ;
36955: LD_VAR 0 4
36959: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36960: LD_INT 0
36962: PPUSH
36963: PPUSH
36964: PPUSH
36965: PPUSH
36966: PPUSH
36967: PPUSH
36968: PPUSH
36969: PPUSH
36970: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36971: LD_VAR 0 1
36975: PPUSH
36976: CALL_OW 264
36980: PUSH
36981: LD_EXP 69
36985: EQUAL
36986: NOT
36987: PUSH
36988: LD_VAR 0 1
36992: PUSH
36993: LD_EXP 147
36997: IN
36998: NOT
36999: OR
37000: IFFALSE 37004
// exit ;
37002: GO 37326
// index := GetElementIndex ( minersList , unit ) ;
37004: LD_ADDR_VAR 0 6
37008: PUSH
37009: LD_EXP 147
37013: PPUSH
37014: LD_VAR 0 1
37018: PPUSH
37019: CALL 42522 0 2
37023: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37024: LD_ADDR_VAR 0 8
37028: PUSH
37029: LD_EXP 149
37033: PUSH
37034: LD_EXP 148
37038: PUSH
37039: LD_VAR 0 6
37043: ARRAY
37044: MINUS
37045: ST_TO_ADDR
// if not minesFreeAmount then
37046: LD_VAR 0 8
37050: NOT
37051: IFFALSE 37055
// exit ;
37053: GO 37326
// tmp := [ ] ;
37055: LD_ADDR_VAR 0 7
37059: PUSH
37060: EMPTY
37061: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37062: LD_ADDR_VAR 0 5
37066: PUSH
37067: DOUBLE
37068: LD_INT 1
37070: DEC
37071: ST_TO_ADDR
37072: LD_VAR 0 8
37076: PUSH
37077: FOR_TO
37078: IFFALSE 37273
// begin _d := rand ( 0 , 5 ) ;
37080: LD_ADDR_VAR 0 11
37084: PUSH
37085: LD_INT 0
37087: PPUSH
37088: LD_INT 5
37090: PPUSH
37091: CALL_OW 12
37095: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37096: LD_ADDR_VAR 0 12
37100: PUSH
37101: LD_INT 2
37103: PPUSH
37104: LD_INT 6
37106: PPUSH
37107: CALL_OW 12
37111: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37112: LD_ADDR_VAR 0 9
37116: PUSH
37117: LD_VAR 0 2
37121: PPUSH
37122: LD_VAR 0 11
37126: PPUSH
37127: LD_VAR 0 12
37131: PPUSH
37132: CALL_OW 272
37136: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37137: LD_ADDR_VAR 0 10
37141: PUSH
37142: LD_VAR 0 3
37146: PPUSH
37147: LD_VAR 0 11
37151: PPUSH
37152: LD_VAR 0 12
37156: PPUSH
37157: CALL_OW 273
37161: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37162: LD_VAR 0 9
37166: PPUSH
37167: LD_VAR 0 10
37171: PPUSH
37172: CALL_OW 488
37176: PUSH
37177: LD_VAR 0 9
37181: PUSH
37182: LD_VAR 0 10
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_VAR 0 7
37195: IN
37196: NOT
37197: AND
37198: PUSH
37199: LD_VAR 0 9
37203: PPUSH
37204: LD_VAR 0 10
37208: PPUSH
37209: CALL_OW 458
37213: NOT
37214: AND
37215: IFFALSE 37257
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37217: LD_ADDR_VAR 0 7
37221: PUSH
37222: LD_VAR 0 7
37226: PPUSH
37227: LD_VAR 0 7
37231: PUSH
37232: LD_INT 1
37234: PLUS
37235: PPUSH
37236: LD_VAR 0 9
37240: PUSH
37241: LD_VAR 0 10
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PPUSH
37250: CALL_OW 1
37254: ST_TO_ADDR
37255: GO 37271
// i := i - 1 ;
37257: LD_ADDR_VAR 0 5
37261: PUSH
37262: LD_VAR 0 5
37266: PUSH
37267: LD_INT 1
37269: MINUS
37270: ST_TO_ADDR
// end ;
37271: GO 37077
37273: POP
37274: POP
// for i in tmp do
37275: LD_ADDR_VAR 0 5
37279: PUSH
37280: LD_VAR 0 7
37284: PUSH
37285: FOR_IN
37286: IFFALSE 37324
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37288: LD_VAR 0 1
37292: PPUSH
37293: LD_VAR 0 5
37297: PUSH
37298: LD_INT 1
37300: ARRAY
37301: PPUSH
37302: LD_VAR 0 5
37306: PUSH
37307: LD_INT 2
37309: ARRAY
37310: PPUSH
37311: CALL 36266 0 3
37315: NOT
37316: IFFALSE 37322
// exit ;
37318: POP
37319: POP
37320: GO 37326
37322: GO 37285
37324: POP
37325: POP
// end ;
37326: LD_VAR 0 4
37330: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37331: LD_INT 0
37333: PPUSH
37334: PPUSH
37335: PPUSH
37336: PPUSH
37337: PPUSH
37338: PPUSH
37339: PPUSH
// if not GetClass ( unit ) = class_sniper then
37340: LD_VAR 0 1
37344: PPUSH
37345: CALL_OW 257
37349: PUSH
37350: LD_INT 5
37352: EQUAL
37353: NOT
37354: IFFALSE 37358
// exit ;
37356: GO 37746
// dist := 8 ;
37358: LD_ADDR_VAR 0 5
37362: PUSH
37363: LD_INT 8
37365: ST_TO_ADDR
// viewRange := 12 ;
37366: LD_ADDR_VAR 0 7
37370: PUSH
37371: LD_INT 12
37373: ST_TO_ADDR
// side := GetSide ( unit ) ;
37374: LD_ADDR_VAR 0 6
37378: PUSH
37379: LD_VAR 0 1
37383: PPUSH
37384: CALL_OW 255
37388: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37389: LD_INT 61
37391: PPUSH
37392: LD_VAR 0 6
37396: PPUSH
37397: CALL_OW 321
37401: PUSH
37402: LD_INT 2
37404: EQUAL
37405: IFFALSE 37415
// viewRange := 16 ;
37407: LD_ADDR_VAR 0 7
37411: PUSH
37412: LD_INT 16
37414: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37415: LD_VAR 0 1
37419: PPUSH
37420: LD_VAR 0 2
37424: PPUSH
37425: LD_VAR 0 3
37429: PPUSH
37430: CALL_OW 297
37434: PUSH
37435: LD_VAR 0 5
37439: GREATER
37440: IFFALSE 37519
// begin ComMoveXY ( unit , x , y ) ;
37442: LD_VAR 0 1
37446: PPUSH
37447: LD_VAR 0 2
37451: PPUSH
37452: LD_VAR 0 3
37456: PPUSH
37457: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37461: LD_INT 35
37463: PPUSH
37464: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37468: LD_VAR 0 1
37472: PPUSH
37473: LD_VAR 0 2
37477: PPUSH
37478: LD_VAR 0 3
37482: PPUSH
37483: CALL 73241 0 3
37487: NOT
37488: IFFALSE 37492
// exit ;
37490: GO 37746
// until GetDistUnitXY ( unit , x , y ) < dist ;
37492: LD_VAR 0 1
37496: PPUSH
37497: LD_VAR 0 2
37501: PPUSH
37502: LD_VAR 0 3
37506: PPUSH
37507: CALL_OW 297
37511: PUSH
37512: LD_VAR 0 5
37516: LESS
37517: IFFALSE 37461
// end ; ComTurnXY ( unit , x , y ) ;
37519: LD_VAR 0 1
37523: PPUSH
37524: LD_VAR 0 2
37528: PPUSH
37529: LD_VAR 0 3
37533: PPUSH
37534: CALL_OW 118
// wait ( 5 ) ;
37538: LD_INT 5
37540: PPUSH
37541: CALL_OW 67
// _d := GetDir ( unit ) ;
37545: LD_ADDR_VAR 0 10
37549: PUSH
37550: LD_VAR 0 1
37554: PPUSH
37555: CALL_OW 254
37559: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37560: LD_ADDR_VAR 0 8
37564: PUSH
37565: LD_VAR 0 1
37569: PPUSH
37570: CALL_OW 250
37574: PPUSH
37575: LD_VAR 0 10
37579: PPUSH
37580: LD_VAR 0 5
37584: PPUSH
37585: CALL_OW 272
37589: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37590: LD_ADDR_VAR 0 9
37594: PUSH
37595: LD_VAR 0 1
37599: PPUSH
37600: CALL_OW 251
37604: PPUSH
37605: LD_VAR 0 10
37609: PPUSH
37610: LD_VAR 0 5
37614: PPUSH
37615: CALL_OW 273
37619: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37620: LD_VAR 0 8
37624: PPUSH
37625: LD_VAR 0 9
37629: PPUSH
37630: CALL_OW 488
37634: NOT
37635: IFFALSE 37639
// exit ;
37637: GO 37746
// ComAnimCustom ( unit , 1 ) ;
37639: LD_VAR 0 1
37643: PPUSH
37644: LD_INT 1
37646: PPUSH
37647: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37651: LD_VAR 0 8
37655: PPUSH
37656: LD_VAR 0 9
37660: PPUSH
37661: LD_VAR 0 6
37665: PPUSH
37666: LD_VAR 0 7
37670: PPUSH
37671: CALL_OW 330
// repeat wait ( 1 ) ;
37675: LD_INT 1
37677: PPUSH
37678: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37682: LD_VAR 0 1
37686: PPUSH
37687: CALL_OW 316
37691: PUSH
37692: LD_VAR 0 1
37696: PPUSH
37697: CALL_OW 314
37701: OR
37702: PUSH
37703: LD_VAR 0 1
37707: PPUSH
37708: CALL_OW 302
37712: NOT
37713: OR
37714: PUSH
37715: LD_VAR 0 1
37719: PPUSH
37720: CALL_OW 301
37724: OR
37725: IFFALSE 37675
// RemoveSeeing ( _x , _y , side ) ;
37727: LD_VAR 0 8
37731: PPUSH
37732: LD_VAR 0 9
37736: PPUSH
37737: LD_VAR 0 6
37741: PPUSH
37742: CALL_OW 331
// end ; end_of_file
37746: LD_VAR 0 4
37750: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37751: LD_INT 0
37753: PPUSH
37754: PPUSH
// if exist_mode then
37755: LD_VAR 0 2
37759: IFFALSE 37784
// unit := CreateCharacter ( prefix & ident ) else
37761: LD_ADDR_VAR 0 5
37765: PUSH
37766: LD_VAR 0 3
37770: PUSH
37771: LD_VAR 0 1
37775: STR
37776: PPUSH
37777: CALL_OW 34
37781: ST_TO_ADDR
37782: GO 37799
// unit := NewCharacter ( ident ) ;
37784: LD_ADDR_VAR 0 5
37788: PUSH
37789: LD_VAR 0 1
37793: PPUSH
37794: CALL_OW 25
37798: ST_TO_ADDR
// result := unit ;
37799: LD_ADDR_VAR 0 4
37803: PUSH
37804: LD_VAR 0 5
37808: ST_TO_ADDR
// end ;
37809: LD_VAR 0 4
37813: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37814: LD_INT 0
37816: PPUSH
37817: PPUSH
// if not side or not nation then
37818: LD_VAR 0 1
37822: NOT
37823: PUSH
37824: LD_VAR 0 2
37828: NOT
37829: OR
37830: IFFALSE 37834
// exit ;
37832: GO 38602
// case nation of nation_american :
37834: LD_VAR 0 2
37838: PUSH
37839: LD_INT 1
37841: DOUBLE
37842: EQUAL
37843: IFTRUE 37847
37845: GO 38061
37847: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37848: LD_ADDR_VAR 0 4
37852: PUSH
37853: LD_INT 35
37855: PUSH
37856: LD_INT 45
37858: PUSH
37859: LD_INT 46
37861: PUSH
37862: LD_INT 47
37864: PUSH
37865: LD_INT 82
37867: PUSH
37868: LD_INT 83
37870: PUSH
37871: LD_INT 84
37873: PUSH
37874: LD_INT 85
37876: PUSH
37877: LD_INT 86
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: LD_INT 2
37885: PUSH
37886: LD_INT 6
37888: PUSH
37889: LD_INT 15
37891: PUSH
37892: LD_INT 16
37894: PUSH
37895: LD_INT 7
37897: PUSH
37898: LD_INT 12
37900: PUSH
37901: LD_INT 13
37903: PUSH
37904: LD_INT 10
37906: PUSH
37907: LD_INT 14
37909: PUSH
37910: LD_INT 20
37912: PUSH
37913: LD_INT 21
37915: PUSH
37916: LD_INT 22
37918: PUSH
37919: LD_INT 25
37921: PUSH
37922: LD_INT 32
37924: PUSH
37925: LD_INT 27
37927: PUSH
37928: LD_INT 36
37930: PUSH
37931: LD_INT 69
37933: PUSH
37934: LD_INT 39
37936: PUSH
37937: LD_INT 34
37939: PUSH
37940: LD_INT 40
37942: PUSH
37943: LD_INT 48
37945: PUSH
37946: LD_INT 49
37948: PUSH
37949: LD_INT 50
37951: PUSH
37952: LD_INT 51
37954: PUSH
37955: LD_INT 52
37957: PUSH
37958: LD_INT 53
37960: PUSH
37961: LD_INT 54
37963: PUSH
37964: LD_INT 55
37966: PUSH
37967: LD_INT 56
37969: PUSH
37970: LD_INT 57
37972: PUSH
37973: LD_INT 58
37975: PUSH
37976: LD_INT 59
37978: PUSH
37979: LD_INT 60
37981: PUSH
37982: LD_INT 61
37984: PUSH
37985: LD_INT 62
37987: PUSH
37988: LD_INT 80
37990: PUSH
37991: LD_INT 82
37993: PUSH
37994: LD_INT 83
37996: PUSH
37997: LD_INT 84
37999: PUSH
38000: LD_INT 85
38002: PUSH
38003: LD_INT 86
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: ST_TO_ADDR
38059: GO 38526
38061: LD_INT 2
38063: DOUBLE
38064: EQUAL
38065: IFTRUE 38069
38067: GO 38295
38069: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38070: LD_ADDR_VAR 0 4
38074: PUSH
38075: LD_INT 35
38077: PUSH
38078: LD_INT 45
38080: PUSH
38081: LD_INT 46
38083: PUSH
38084: LD_INT 47
38086: PUSH
38087: LD_INT 82
38089: PUSH
38090: LD_INT 83
38092: PUSH
38093: LD_INT 84
38095: PUSH
38096: LD_INT 85
38098: PUSH
38099: LD_INT 87
38101: PUSH
38102: LD_INT 70
38104: PUSH
38105: LD_INT 1
38107: PUSH
38108: LD_INT 11
38110: PUSH
38111: LD_INT 3
38113: PUSH
38114: LD_INT 4
38116: PUSH
38117: LD_INT 5
38119: PUSH
38120: LD_INT 6
38122: PUSH
38123: LD_INT 15
38125: PUSH
38126: LD_INT 18
38128: PUSH
38129: LD_INT 7
38131: PUSH
38132: LD_INT 17
38134: PUSH
38135: LD_INT 8
38137: PUSH
38138: LD_INT 20
38140: PUSH
38141: LD_INT 21
38143: PUSH
38144: LD_INT 22
38146: PUSH
38147: LD_INT 72
38149: PUSH
38150: LD_INT 26
38152: PUSH
38153: LD_INT 69
38155: PUSH
38156: LD_INT 39
38158: PUSH
38159: LD_INT 40
38161: PUSH
38162: LD_INT 41
38164: PUSH
38165: LD_INT 42
38167: PUSH
38168: LD_INT 43
38170: PUSH
38171: LD_INT 48
38173: PUSH
38174: LD_INT 49
38176: PUSH
38177: LD_INT 50
38179: PUSH
38180: LD_INT 51
38182: PUSH
38183: LD_INT 52
38185: PUSH
38186: LD_INT 53
38188: PUSH
38189: LD_INT 54
38191: PUSH
38192: LD_INT 55
38194: PUSH
38195: LD_INT 56
38197: PUSH
38198: LD_INT 60
38200: PUSH
38201: LD_INT 61
38203: PUSH
38204: LD_INT 62
38206: PUSH
38207: LD_INT 66
38209: PUSH
38210: LD_INT 67
38212: PUSH
38213: LD_INT 68
38215: PUSH
38216: LD_INT 81
38218: PUSH
38219: LD_INT 82
38221: PUSH
38222: LD_INT 83
38224: PUSH
38225: LD_INT 84
38227: PUSH
38228: LD_INT 85
38230: PUSH
38231: LD_INT 87
38233: PUSH
38234: LD_INT 88
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: ST_TO_ADDR
38293: GO 38526
38295: LD_INT 3
38297: DOUBLE
38298: EQUAL
38299: IFTRUE 38303
38301: GO 38525
38303: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38304: LD_ADDR_VAR 0 4
38308: PUSH
38309: LD_INT 46
38311: PUSH
38312: LD_INT 47
38314: PUSH
38315: LD_INT 1
38317: PUSH
38318: LD_INT 2
38320: PUSH
38321: LD_INT 82
38323: PUSH
38324: LD_INT 83
38326: PUSH
38327: LD_INT 84
38329: PUSH
38330: LD_INT 85
38332: PUSH
38333: LD_INT 86
38335: PUSH
38336: LD_INT 11
38338: PUSH
38339: LD_INT 9
38341: PUSH
38342: LD_INT 20
38344: PUSH
38345: LD_INT 19
38347: PUSH
38348: LD_INT 21
38350: PUSH
38351: LD_INT 24
38353: PUSH
38354: LD_INT 22
38356: PUSH
38357: LD_INT 25
38359: PUSH
38360: LD_INT 28
38362: PUSH
38363: LD_INT 29
38365: PUSH
38366: LD_INT 30
38368: PUSH
38369: LD_INT 31
38371: PUSH
38372: LD_INT 37
38374: PUSH
38375: LD_INT 38
38377: PUSH
38378: LD_INT 32
38380: PUSH
38381: LD_INT 27
38383: PUSH
38384: LD_INT 33
38386: PUSH
38387: LD_INT 69
38389: PUSH
38390: LD_INT 39
38392: PUSH
38393: LD_INT 34
38395: PUSH
38396: LD_INT 40
38398: PUSH
38399: LD_INT 71
38401: PUSH
38402: LD_INT 23
38404: PUSH
38405: LD_INT 44
38407: PUSH
38408: LD_INT 48
38410: PUSH
38411: LD_INT 49
38413: PUSH
38414: LD_INT 50
38416: PUSH
38417: LD_INT 51
38419: PUSH
38420: LD_INT 52
38422: PUSH
38423: LD_INT 53
38425: PUSH
38426: LD_INT 54
38428: PUSH
38429: LD_INT 55
38431: PUSH
38432: LD_INT 56
38434: PUSH
38435: LD_INT 57
38437: PUSH
38438: LD_INT 58
38440: PUSH
38441: LD_INT 59
38443: PUSH
38444: LD_INT 63
38446: PUSH
38447: LD_INT 64
38449: PUSH
38450: LD_INT 65
38452: PUSH
38453: LD_INT 82
38455: PUSH
38456: LD_INT 83
38458: PUSH
38459: LD_INT 84
38461: PUSH
38462: LD_INT 85
38464: PUSH
38465: LD_INT 86
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: ST_TO_ADDR
38523: GO 38526
38525: POP
// if state > - 1 and state < 3 then
38526: LD_VAR 0 3
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: GREATER
38535: PUSH
38536: LD_VAR 0 3
38540: PUSH
38541: LD_INT 3
38543: LESS
38544: AND
38545: IFFALSE 38602
// for i in result do
38547: LD_ADDR_VAR 0 5
38551: PUSH
38552: LD_VAR 0 4
38556: PUSH
38557: FOR_IN
38558: IFFALSE 38600
// if GetTech ( i , side ) <> state then
38560: LD_VAR 0 5
38564: PPUSH
38565: LD_VAR 0 1
38569: PPUSH
38570: CALL_OW 321
38574: PUSH
38575: LD_VAR 0 3
38579: NONEQUAL
38580: IFFALSE 38598
// result := result diff i ;
38582: LD_ADDR_VAR 0 4
38586: PUSH
38587: LD_VAR 0 4
38591: PUSH
38592: LD_VAR 0 5
38596: DIFF
38597: ST_TO_ADDR
38598: GO 38557
38600: POP
38601: POP
// end ;
38602: LD_VAR 0 4
38606: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38607: LD_INT 0
38609: PPUSH
38610: PPUSH
38611: PPUSH
// result := true ;
38612: LD_ADDR_VAR 0 3
38616: PUSH
38617: LD_INT 1
38619: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38620: LD_ADDR_VAR 0 5
38624: PUSH
38625: LD_VAR 0 2
38629: PPUSH
38630: CALL_OW 480
38634: ST_TO_ADDR
// if not tmp then
38635: LD_VAR 0 5
38639: NOT
38640: IFFALSE 38644
// exit ;
38642: GO 38693
// for i in tmp do
38644: LD_ADDR_VAR 0 4
38648: PUSH
38649: LD_VAR 0 5
38653: PUSH
38654: FOR_IN
38655: IFFALSE 38691
// if GetTech ( i , side ) <> state_researched then
38657: LD_VAR 0 4
38661: PPUSH
38662: LD_VAR 0 1
38666: PPUSH
38667: CALL_OW 321
38671: PUSH
38672: LD_INT 2
38674: NONEQUAL
38675: IFFALSE 38689
// begin result := false ;
38677: LD_ADDR_VAR 0 3
38681: PUSH
38682: LD_INT 0
38684: ST_TO_ADDR
// exit ;
38685: POP
38686: POP
38687: GO 38693
// end ;
38689: GO 38654
38691: POP
38692: POP
// end ;
38693: LD_VAR 0 3
38697: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38698: LD_INT 0
38700: PPUSH
38701: PPUSH
38702: PPUSH
38703: PPUSH
38704: PPUSH
38705: PPUSH
38706: PPUSH
38707: PPUSH
38708: PPUSH
38709: PPUSH
38710: PPUSH
38711: PPUSH
38712: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38713: LD_VAR 0 1
38717: NOT
38718: PUSH
38719: LD_VAR 0 1
38723: PPUSH
38724: CALL_OW 257
38728: PUSH
38729: LD_INT 9
38731: NONEQUAL
38732: OR
38733: IFFALSE 38737
// exit ;
38735: GO 39310
// side := GetSide ( unit ) ;
38737: LD_ADDR_VAR 0 9
38741: PUSH
38742: LD_VAR 0 1
38746: PPUSH
38747: CALL_OW 255
38751: ST_TO_ADDR
// tech_space := tech_spacanom ;
38752: LD_ADDR_VAR 0 12
38756: PUSH
38757: LD_INT 29
38759: ST_TO_ADDR
// tech_time := tech_taurad ;
38760: LD_ADDR_VAR 0 13
38764: PUSH
38765: LD_INT 28
38767: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38768: LD_ADDR_VAR 0 11
38772: PUSH
38773: LD_VAR 0 1
38777: PPUSH
38778: CALL_OW 310
38782: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38783: LD_VAR 0 11
38787: PPUSH
38788: CALL_OW 247
38792: PUSH
38793: LD_INT 2
38795: EQUAL
38796: IFFALSE 38800
// exit ;
38798: GO 39310
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38800: LD_ADDR_VAR 0 8
38804: PUSH
38805: LD_INT 81
38807: PUSH
38808: LD_VAR 0 9
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 3
38819: PUSH
38820: LD_INT 21
38822: PUSH
38823: LD_INT 3
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PPUSH
38838: CALL_OW 69
38842: ST_TO_ADDR
// if not tmp then
38843: LD_VAR 0 8
38847: NOT
38848: IFFALSE 38852
// exit ;
38850: GO 39310
// if in_unit then
38852: LD_VAR 0 11
38856: IFFALSE 38880
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38858: LD_ADDR_VAR 0 10
38862: PUSH
38863: LD_VAR 0 8
38867: PPUSH
38868: LD_VAR 0 11
38872: PPUSH
38873: CALL_OW 74
38877: ST_TO_ADDR
38878: GO 38900
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38880: LD_ADDR_VAR 0 10
38884: PUSH
38885: LD_VAR 0 8
38889: PPUSH
38890: LD_VAR 0 1
38894: PPUSH
38895: CALL_OW 74
38899: ST_TO_ADDR
// if not enemy then
38900: LD_VAR 0 10
38904: NOT
38905: IFFALSE 38909
// exit ;
38907: GO 39310
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38909: LD_VAR 0 11
38913: PUSH
38914: LD_VAR 0 11
38918: PPUSH
38919: LD_VAR 0 10
38923: PPUSH
38924: CALL_OW 296
38928: PUSH
38929: LD_INT 13
38931: GREATER
38932: AND
38933: PUSH
38934: LD_VAR 0 1
38938: PPUSH
38939: LD_VAR 0 10
38943: PPUSH
38944: CALL_OW 296
38948: PUSH
38949: LD_INT 12
38951: GREATER
38952: OR
38953: IFFALSE 38957
// exit ;
38955: GO 39310
// missile := [ 1 ] ;
38957: LD_ADDR_VAR 0 14
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: EMPTY
38966: LIST
38967: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38968: LD_VAR 0 9
38972: PPUSH
38973: LD_VAR 0 12
38977: PPUSH
38978: CALL_OW 325
38982: IFFALSE 39011
// missile := Replace ( missile , missile + 1 , 2 ) ;
38984: LD_ADDR_VAR 0 14
38988: PUSH
38989: LD_VAR 0 14
38993: PPUSH
38994: LD_VAR 0 14
38998: PUSH
38999: LD_INT 1
39001: PLUS
39002: PPUSH
39003: LD_INT 2
39005: PPUSH
39006: CALL_OW 1
39010: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39011: LD_VAR 0 9
39015: PPUSH
39016: LD_VAR 0 13
39020: PPUSH
39021: CALL_OW 325
39025: PUSH
39026: LD_VAR 0 10
39030: PPUSH
39031: CALL_OW 255
39035: PPUSH
39036: LD_VAR 0 13
39040: PPUSH
39041: CALL_OW 325
39045: NOT
39046: AND
39047: IFFALSE 39076
// missile := Replace ( missile , missile + 1 , 3 ) ;
39049: LD_ADDR_VAR 0 14
39053: PUSH
39054: LD_VAR 0 14
39058: PPUSH
39059: LD_VAR 0 14
39063: PUSH
39064: LD_INT 1
39066: PLUS
39067: PPUSH
39068: LD_INT 3
39070: PPUSH
39071: CALL_OW 1
39075: ST_TO_ADDR
// if missile < 2 then
39076: LD_VAR 0 14
39080: PUSH
39081: LD_INT 2
39083: LESS
39084: IFFALSE 39088
// exit ;
39086: GO 39310
// x := GetX ( enemy ) ;
39088: LD_ADDR_VAR 0 4
39092: PUSH
39093: LD_VAR 0 10
39097: PPUSH
39098: CALL_OW 250
39102: ST_TO_ADDR
// y := GetY ( enemy ) ;
39103: LD_ADDR_VAR 0 5
39107: PUSH
39108: LD_VAR 0 10
39112: PPUSH
39113: CALL_OW 251
39117: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39118: LD_ADDR_VAR 0 6
39122: PUSH
39123: LD_VAR 0 4
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PPUSH
39132: LD_INT 1
39134: PPUSH
39135: CALL_OW 12
39139: PLUS
39140: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39141: LD_ADDR_VAR 0 7
39145: PUSH
39146: LD_VAR 0 5
39150: PUSH
39151: LD_INT 1
39153: NEG
39154: PPUSH
39155: LD_INT 1
39157: PPUSH
39158: CALL_OW 12
39162: PLUS
39163: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39164: LD_VAR 0 6
39168: PPUSH
39169: LD_VAR 0 7
39173: PPUSH
39174: CALL_OW 488
39178: NOT
39179: IFFALSE 39201
// begin _x := x ;
39181: LD_ADDR_VAR 0 6
39185: PUSH
39186: LD_VAR 0 4
39190: ST_TO_ADDR
// _y := y ;
39191: LD_ADDR_VAR 0 7
39195: PUSH
39196: LD_VAR 0 5
39200: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39201: LD_ADDR_VAR 0 3
39205: PUSH
39206: LD_INT 1
39208: PPUSH
39209: LD_VAR 0 14
39213: PPUSH
39214: CALL_OW 12
39218: ST_TO_ADDR
// case i of 1 :
39219: LD_VAR 0 3
39223: PUSH
39224: LD_INT 1
39226: DOUBLE
39227: EQUAL
39228: IFTRUE 39232
39230: GO 39249
39232: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39233: LD_VAR 0 1
39237: PPUSH
39238: LD_VAR 0 10
39242: PPUSH
39243: CALL_OW 115
39247: GO 39310
39249: LD_INT 2
39251: DOUBLE
39252: EQUAL
39253: IFTRUE 39257
39255: GO 39279
39257: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39258: LD_VAR 0 1
39262: PPUSH
39263: LD_VAR 0 6
39267: PPUSH
39268: LD_VAR 0 7
39272: PPUSH
39273: CALL_OW 153
39277: GO 39310
39279: LD_INT 3
39281: DOUBLE
39282: EQUAL
39283: IFTRUE 39287
39285: GO 39309
39287: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39288: LD_VAR 0 1
39292: PPUSH
39293: LD_VAR 0 6
39297: PPUSH
39298: LD_VAR 0 7
39302: PPUSH
39303: CALL_OW 154
39307: GO 39310
39309: POP
// end ;
39310: LD_VAR 0 2
39314: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39315: LD_INT 0
39317: PPUSH
39318: PPUSH
39319: PPUSH
39320: PPUSH
39321: PPUSH
39322: PPUSH
// if not unit or not building then
39323: LD_VAR 0 1
39327: NOT
39328: PUSH
39329: LD_VAR 0 2
39333: NOT
39334: OR
39335: IFFALSE 39339
// exit ;
39337: GO 39497
// x := GetX ( building ) ;
39339: LD_ADDR_VAR 0 5
39343: PUSH
39344: LD_VAR 0 2
39348: PPUSH
39349: CALL_OW 250
39353: ST_TO_ADDR
// y := GetY ( building ) ;
39354: LD_ADDR_VAR 0 6
39358: PUSH
39359: LD_VAR 0 2
39363: PPUSH
39364: CALL_OW 251
39368: ST_TO_ADDR
// for i = 0 to 5 do
39369: LD_ADDR_VAR 0 4
39373: PUSH
39374: DOUBLE
39375: LD_INT 0
39377: DEC
39378: ST_TO_ADDR
39379: LD_INT 5
39381: PUSH
39382: FOR_TO
39383: IFFALSE 39495
// begin _x := ShiftX ( x , i , 3 ) ;
39385: LD_ADDR_VAR 0 7
39389: PUSH
39390: LD_VAR 0 5
39394: PPUSH
39395: LD_VAR 0 4
39399: PPUSH
39400: LD_INT 3
39402: PPUSH
39403: CALL_OW 272
39407: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39408: LD_ADDR_VAR 0 8
39412: PUSH
39413: LD_VAR 0 6
39417: PPUSH
39418: LD_VAR 0 4
39422: PPUSH
39423: LD_INT 3
39425: PPUSH
39426: CALL_OW 273
39430: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39431: LD_VAR 0 7
39435: PPUSH
39436: LD_VAR 0 8
39440: PPUSH
39441: CALL_OW 488
39445: NOT
39446: IFFALSE 39450
// continue ;
39448: GO 39382
// if HexInfo ( _x , _y ) = 0 then
39450: LD_VAR 0 7
39454: PPUSH
39455: LD_VAR 0 8
39459: PPUSH
39460: CALL_OW 428
39464: PUSH
39465: LD_INT 0
39467: EQUAL
39468: IFFALSE 39493
// begin ComMoveXY ( unit , _x , _y ) ;
39470: LD_VAR 0 1
39474: PPUSH
39475: LD_VAR 0 7
39479: PPUSH
39480: LD_VAR 0 8
39484: PPUSH
39485: CALL_OW 111
// exit ;
39489: POP
39490: POP
39491: GO 39497
// end ; end ;
39493: GO 39382
39495: POP
39496: POP
// end ;
39497: LD_VAR 0 3
39501: RET
// export function ScanBase ( side , base_area ) ; begin
39502: LD_INT 0
39504: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39505: LD_ADDR_VAR 0 3
39509: PUSH
39510: LD_VAR 0 2
39514: PPUSH
39515: LD_INT 81
39517: PUSH
39518: LD_VAR 0 1
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PPUSH
39527: CALL_OW 70
39531: ST_TO_ADDR
// end ;
39532: LD_VAR 0 3
39536: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39537: LD_INT 0
39539: PPUSH
39540: PPUSH
39541: PPUSH
39542: PPUSH
// result := false ;
39543: LD_ADDR_VAR 0 2
39547: PUSH
39548: LD_INT 0
39550: ST_TO_ADDR
// side := GetSide ( unit ) ;
39551: LD_ADDR_VAR 0 3
39555: PUSH
39556: LD_VAR 0 1
39560: PPUSH
39561: CALL_OW 255
39565: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39566: LD_ADDR_VAR 0 4
39570: PUSH
39571: LD_VAR 0 1
39575: PPUSH
39576: CALL_OW 248
39580: ST_TO_ADDR
// case nat of 1 :
39581: LD_VAR 0 4
39585: PUSH
39586: LD_INT 1
39588: DOUBLE
39589: EQUAL
39590: IFTRUE 39594
39592: GO 39605
39594: POP
// tech := tech_lassight ; 2 :
39595: LD_ADDR_VAR 0 5
39599: PUSH
39600: LD_INT 12
39602: ST_TO_ADDR
39603: GO 39644
39605: LD_INT 2
39607: DOUBLE
39608: EQUAL
39609: IFTRUE 39613
39611: GO 39624
39613: POP
// tech := tech_mortar ; 3 :
39614: LD_ADDR_VAR 0 5
39618: PUSH
39619: LD_INT 41
39621: ST_TO_ADDR
39622: GO 39644
39624: LD_INT 3
39626: DOUBLE
39627: EQUAL
39628: IFTRUE 39632
39630: GO 39643
39632: POP
// tech := tech_bazooka ; end ;
39633: LD_ADDR_VAR 0 5
39637: PUSH
39638: LD_INT 44
39640: ST_TO_ADDR
39641: GO 39644
39643: POP
// if Researched ( side , tech ) then
39644: LD_VAR 0 3
39648: PPUSH
39649: LD_VAR 0 5
39653: PPUSH
39654: CALL_OW 325
39658: IFFALSE 39685
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39660: LD_ADDR_VAR 0 2
39664: PUSH
39665: LD_INT 5
39667: PUSH
39668: LD_INT 8
39670: PUSH
39671: LD_INT 9
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: LIST
39678: PUSH
39679: LD_VAR 0 4
39683: ARRAY
39684: ST_TO_ADDR
// end ;
39685: LD_VAR 0 2
39689: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39690: LD_INT 0
39692: PPUSH
39693: PPUSH
39694: PPUSH
// if not mines then
39695: LD_VAR 0 2
39699: NOT
39700: IFFALSE 39704
// exit ;
39702: GO 39848
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39704: LD_ADDR_VAR 0 5
39708: PUSH
39709: LD_INT 81
39711: PUSH
39712: LD_VAR 0 1
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 3
39723: PUSH
39724: LD_INT 21
39726: PUSH
39727: LD_INT 3
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PPUSH
39742: CALL_OW 69
39746: ST_TO_ADDR
// for i in mines do
39747: LD_ADDR_VAR 0 4
39751: PUSH
39752: LD_VAR 0 2
39756: PUSH
39757: FOR_IN
39758: IFFALSE 39846
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39760: LD_VAR 0 4
39764: PUSH
39765: LD_INT 1
39767: ARRAY
39768: PPUSH
39769: LD_VAR 0 4
39773: PUSH
39774: LD_INT 2
39776: ARRAY
39777: PPUSH
39778: CALL_OW 458
39782: NOT
39783: IFFALSE 39787
// continue ;
39785: GO 39757
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39787: LD_VAR 0 4
39791: PUSH
39792: LD_INT 1
39794: ARRAY
39795: PPUSH
39796: LD_VAR 0 4
39800: PUSH
39801: LD_INT 2
39803: ARRAY
39804: PPUSH
39805: CALL_OW 428
39809: PUSH
39810: LD_VAR 0 5
39814: IN
39815: IFFALSE 39844
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39817: LD_VAR 0 4
39821: PUSH
39822: LD_INT 1
39824: ARRAY
39825: PPUSH
39826: LD_VAR 0 4
39830: PUSH
39831: LD_INT 2
39833: ARRAY
39834: PPUSH
39835: LD_VAR 0 1
39839: PPUSH
39840: CALL_OW 456
// end ;
39844: GO 39757
39846: POP
39847: POP
// end ;
39848: LD_VAR 0 3
39852: RET
// export function Count ( array ) ; var i ; begin
39853: LD_INT 0
39855: PPUSH
39856: PPUSH
// result := 0 ;
39857: LD_ADDR_VAR 0 2
39861: PUSH
39862: LD_INT 0
39864: ST_TO_ADDR
// for i in array do
39865: LD_ADDR_VAR 0 3
39869: PUSH
39870: LD_VAR 0 1
39874: PUSH
39875: FOR_IN
39876: IFFALSE 39900
// if i then
39878: LD_VAR 0 3
39882: IFFALSE 39898
// result := result + 1 ;
39884: LD_ADDR_VAR 0 2
39888: PUSH
39889: LD_VAR 0 2
39893: PUSH
39894: LD_INT 1
39896: PLUS
39897: ST_TO_ADDR
39898: GO 39875
39900: POP
39901: POP
// end ;
39902: LD_VAR 0 2
39906: RET
// export function IsEmpty ( building ) ; begin
39907: LD_INT 0
39909: PPUSH
// if not building then
39910: LD_VAR 0 1
39914: NOT
39915: IFFALSE 39919
// exit ;
39917: GO 39962
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39919: LD_ADDR_VAR 0 2
39923: PUSH
39924: LD_VAR 0 1
39928: PUSH
39929: LD_INT 22
39931: PUSH
39932: LD_VAR 0 1
39936: PPUSH
39937: CALL_OW 255
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 58
39948: PUSH
39949: EMPTY
39950: LIST
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PPUSH
39956: CALL_OW 69
39960: IN
39961: ST_TO_ADDR
// end ;
39962: LD_VAR 0 2
39966: RET
// export function IsNotFull ( building ) ; begin
39967: LD_INT 0
39969: PPUSH
// if not building then
39970: LD_VAR 0 1
39974: NOT
39975: IFFALSE 39979
// exit ;
39977: GO 39998
// result := UnitsInside ( building ) < 6 ;
39979: LD_ADDR_VAR 0 2
39983: PUSH
39984: LD_VAR 0 1
39988: PPUSH
39989: CALL_OW 313
39993: PUSH
39994: LD_INT 6
39996: LESS
39997: ST_TO_ADDR
// end ;
39998: LD_VAR 0 2
40002: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40003: LD_INT 0
40005: PPUSH
40006: PPUSH
40007: PPUSH
40008: PPUSH
// tmp := [ ] ;
40009: LD_ADDR_VAR 0 3
40013: PUSH
40014: EMPTY
40015: ST_TO_ADDR
// list := [ ] ;
40016: LD_ADDR_VAR 0 5
40020: PUSH
40021: EMPTY
40022: ST_TO_ADDR
// for i = 16 to 25 do
40023: LD_ADDR_VAR 0 4
40027: PUSH
40028: DOUBLE
40029: LD_INT 16
40031: DEC
40032: ST_TO_ADDR
40033: LD_INT 25
40035: PUSH
40036: FOR_TO
40037: IFFALSE 40110
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40039: LD_ADDR_VAR 0 3
40043: PUSH
40044: LD_VAR 0 3
40048: PUSH
40049: LD_INT 22
40051: PUSH
40052: LD_VAR 0 1
40056: PPUSH
40057: CALL_OW 255
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 91
40068: PUSH
40069: LD_VAR 0 1
40073: PUSH
40074: LD_INT 6
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 30
40084: PUSH
40085: LD_VAR 0 4
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: LIST
40098: PUSH
40099: EMPTY
40100: LIST
40101: PPUSH
40102: CALL_OW 69
40106: ADD
40107: ST_TO_ADDR
40108: GO 40036
40110: POP
40111: POP
// for i = 1 to tmp do
40112: LD_ADDR_VAR 0 4
40116: PUSH
40117: DOUBLE
40118: LD_INT 1
40120: DEC
40121: ST_TO_ADDR
40122: LD_VAR 0 3
40126: PUSH
40127: FOR_TO
40128: IFFALSE 40216
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40130: LD_ADDR_VAR 0 5
40134: PUSH
40135: LD_VAR 0 5
40139: PUSH
40140: LD_VAR 0 3
40144: PUSH
40145: LD_VAR 0 4
40149: ARRAY
40150: PPUSH
40151: CALL_OW 266
40155: PUSH
40156: LD_VAR 0 3
40160: PUSH
40161: LD_VAR 0 4
40165: ARRAY
40166: PPUSH
40167: CALL_OW 250
40171: PUSH
40172: LD_VAR 0 3
40176: PUSH
40177: LD_VAR 0 4
40181: ARRAY
40182: PPUSH
40183: CALL_OW 251
40187: PUSH
40188: LD_VAR 0 3
40192: PUSH
40193: LD_VAR 0 4
40197: ARRAY
40198: PPUSH
40199: CALL_OW 254
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: PUSH
40210: EMPTY
40211: LIST
40212: ADD
40213: ST_TO_ADDR
40214: GO 40127
40216: POP
40217: POP
// result := list ;
40218: LD_ADDR_VAR 0 2
40222: PUSH
40223: LD_VAR 0 5
40227: ST_TO_ADDR
// end ;
40228: LD_VAR 0 2
40232: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40233: LD_INT 0
40235: PPUSH
40236: PPUSH
40237: PPUSH
40238: PPUSH
40239: PPUSH
40240: PPUSH
40241: PPUSH
// if not factory then
40242: LD_VAR 0 1
40246: NOT
40247: IFFALSE 40251
// exit ;
40249: GO 40844
// if control = control_apeman then
40251: LD_VAR 0 4
40255: PUSH
40256: LD_INT 5
40258: EQUAL
40259: IFFALSE 40368
// begin tmp := UnitsInside ( factory ) ;
40261: LD_ADDR_VAR 0 8
40265: PUSH
40266: LD_VAR 0 1
40270: PPUSH
40271: CALL_OW 313
40275: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40276: LD_VAR 0 8
40280: PPUSH
40281: LD_INT 25
40283: PUSH
40284: LD_INT 12
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PPUSH
40291: CALL_OW 72
40295: NOT
40296: IFFALSE 40306
// control := control_manual ;
40298: LD_ADDR_VAR 0 4
40302: PUSH
40303: LD_INT 1
40305: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40306: LD_ADDR_VAR 0 8
40310: PUSH
40311: LD_VAR 0 1
40315: PPUSH
40316: CALL 40003 0 1
40320: ST_TO_ADDR
// if tmp then
40321: LD_VAR 0 8
40325: IFFALSE 40368
// begin for i in tmp do
40327: LD_ADDR_VAR 0 7
40331: PUSH
40332: LD_VAR 0 8
40336: PUSH
40337: FOR_IN
40338: IFFALSE 40366
// if i [ 1 ] = b_ext_radio then
40340: LD_VAR 0 7
40344: PUSH
40345: LD_INT 1
40347: ARRAY
40348: PUSH
40349: LD_INT 22
40351: EQUAL
40352: IFFALSE 40364
// begin control := control_remote ;
40354: LD_ADDR_VAR 0 4
40358: PUSH
40359: LD_INT 2
40361: ST_TO_ADDR
// break ;
40362: GO 40366
// end ;
40364: GO 40337
40366: POP
40367: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40368: LD_VAR 0 1
40372: PPUSH
40373: LD_VAR 0 2
40377: PPUSH
40378: LD_VAR 0 3
40382: PPUSH
40383: LD_VAR 0 4
40387: PPUSH
40388: LD_VAR 0 5
40392: PPUSH
40393: CALL_OW 448
40397: IFFALSE 40432
// begin result := [ chassis , engine , control , weapon ] ;
40399: LD_ADDR_VAR 0 6
40403: PUSH
40404: LD_VAR 0 2
40408: PUSH
40409: LD_VAR 0 3
40413: PUSH
40414: LD_VAR 0 4
40418: PUSH
40419: LD_VAR 0 5
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: ST_TO_ADDR
// exit ;
40430: GO 40844
// end ; _chassis := AvailableChassisList ( factory ) ;
40432: LD_ADDR_VAR 0 9
40436: PUSH
40437: LD_VAR 0 1
40441: PPUSH
40442: CALL_OW 475
40446: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40447: LD_ADDR_VAR 0 11
40451: PUSH
40452: LD_VAR 0 1
40456: PPUSH
40457: CALL_OW 476
40461: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40462: LD_ADDR_VAR 0 12
40466: PUSH
40467: LD_VAR 0 1
40471: PPUSH
40472: CALL_OW 477
40476: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40477: LD_ADDR_VAR 0 10
40481: PUSH
40482: LD_VAR 0 1
40486: PPUSH
40487: CALL_OW 478
40491: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40492: LD_VAR 0 9
40496: NOT
40497: PUSH
40498: LD_VAR 0 11
40502: NOT
40503: OR
40504: PUSH
40505: LD_VAR 0 12
40509: NOT
40510: OR
40511: PUSH
40512: LD_VAR 0 10
40516: NOT
40517: OR
40518: IFFALSE 40553
// begin result := [ chassis , engine , control , weapon ] ;
40520: LD_ADDR_VAR 0 6
40524: PUSH
40525: LD_VAR 0 2
40529: PUSH
40530: LD_VAR 0 3
40534: PUSH
40535: LD_VAR 0 4
40539: PUSH
40540: LD_VAR 0 5
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: ST_TO_ADDR
// exit ;
40551: GO 40844
// end ; if not chassis in _chassis then
40553: LD_VAR 0 2
40557: PUSH
40558: LD_VAR 0 9
40562: IN
40563: NOT
40564: IFFALSE 40590
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40566: LD_ADDR_VAR 0 2
40570: PUSH
40571: LD_VAR 0 9
40575: PUSH
40576: LD_INT 1
40578: PPUSH
40579: LD_VAR 0 9
40583: PPUSH
40584: CALL_OW 12
40588: ARRAY
40589: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40590: LD_VAR 0 2
40594: PPUSH
40595: LD_VAR 0 3
40599: PPUSH
40600: CALL 40849 0 2
40604: NOT
40605: IFFALSE 40664
// repeat engine := _engine [ 1 ] ;
40607: LD_ADDR_VAR 0 3
40611: PUSH
40612: LD_VAR 0 11
40616: PUSH
40617: LD_INT 1
40619: ARRAY
40620: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40621: LD_ADDR_VAR 0 11
40625: PUSH
40626: LD_VAR 0 11
40630: PPUSH
40631: LD_INT 1
40633: PPUSH
40634: CALL_OW 3
40638: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40639: LD_VAR 0 2
40643: PPUSH
40644: LD_VAR 0 3
40648: PPUSH
40649: CALL 40849 0 2
40653: PUSH
40654: LD_VAR 0 11
40658: PUSH
40659: EMPTY
40660: EQUAL
40661: OR
40662: IFFALSE 40607
// if not control in _control then
40664: LD_VAR 0 4
40668: PUSH
40669: LD_VAR 0 12
40673: IN
40674: NOT
40675: IFFALSE 40701
// control := _control [ rand ( 1 , _control ) ] ;
40677: LD_ADDR_VAR 0 4
40681: PUSH
40682: LD_VAR 0 12
40686: PUSH
40687: LD_INT 1
40689: PPUSH
40690: LD_VAR 0 12
40694: PPUSH
40695: CALL_OW 12
40699: ARRAY
40700: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40701: LD_VAR 0 2
40705: PPUSH
40706: LD_VAR 0 5
40710: PPUSH
40711: CALL 41069 0 2
40715: NOT
40716: IFFALSE 40775
// repeat weapon := _weapon [ 1 ] ;
40718: LD_ADDR_VAR 0 5
40722: PUSH
40723: LD_VAR 0 10
40727: PUSH
40728: LD_INT 1
40730: ARRAY
40731: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40732: LD_ADDR_VAR 0 10
40736: PUSH
40737: LD_VAR 0 10
40741: PPUSH
40742: LD_INT 1
40744: PPUSH
40745: CALL_OW 3
40749: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40750: LD_VAR 0 2
40754: PPUSH
40755: LD_VAR 0 5
40759: PPUSH
40760: CALL 41069 0 2
40764: PUSH
40765: LD_VAR 0 10
40769: PUSH
40770: EMPTY
40771: EQUAL
40772: OR
40773: IFFALSE 40718
// result := [ ] ;
40775: LD_ADDR_VAR 0 6
40779: PUSH
40780: EMPTY
40781: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40782: LD_VAR 0 1
40786: PPUSH
40787: LD_VAR 0 2
40791: PPUSH
40792: LD_VAR 0 3
40796: PPUSH
40797: LD_VAR 0 4
40801: PPUSH
40802: LD_VAR 0 5
40806: PPUSH
40807: CALL_OW 448
40811: IFFALSE 40844
// result := [ chassis , engine , control , weapon ] ;
40813: LD_ADDR_VAR 0 6
40817: PUSH
40818: LD_VAR 0 2
40822: PUSH
40823: LD_VAR 0 3
40827: PUSH
40828: LD_VAR 0 4
40832: PUSH
40833: LD_VAR 0 5
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: ST_TO_ADDR
// end ;
40844: LD_VAR 0 6
40848: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40849: LD_INT 0
40851: PPUSH
// if not chassis or not engine then
40852: LD_VAR 0 1
40856: NOT
40857: PUSH
40858: LD_VAR 0 2
40862: NOT
40863: OR
40864: IFFALSE 40868
// exit ;
40866: GO 41064
// case engine of engine_solar :
40868: LD_VAR 0 2
40872: PUSH
40873: LD_INT 2
40875: DOUBLE
40876: EQUAL
40877: IFTRUE 40881
40879: GO 40919
40881: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40882: LD_ADDR_VAR 0 3
40886: PUSH
40887: LD_INT 11
40889: PUSH
40890: LD_INT 12
40892: PUSH
40893: LD_INT 13
40895: PUSH
40896: LD_INT 14
40898: PUSH
40899: LD_INT 1
40901: PUSH
40902: LD_INT 2
40904: PUSH
40905: LD_INT 3
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: ST_TO_ADDR
40917: GO 41048
40919: LD_INT 1
40921: DOUBLE
40922: EQUAL
40923: IFTRUE 40927
40925: GO 40989
40927: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40928: LD_ADDR_VAR 0 3
40932: PUSH
40933: LD_INT 11
40935: PUSH
40936: LD_INT 12
40938: PUSH
40939: LD_INT 13
40941: PUSH
40942: LD_INT 14
40944: PUSH
40945: LD_INT 1
40947: PUSH
40948: LD_INT 2
40950: PUSH
40951: LD_INT 3
40953: PUSH
40954: LD_INT 4
40956: PUSH
40957: LD_INT 5
40959: PUSH
40960: LD_INT 21
40962: PUSH
40963: LD_INT 23
40965: PUSH
40966: LD_INT 22
40968: PUSH
40969: LD_INT 24
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: ST_TO_ADDR
40987: GO 41048
40989: LD_INT 3
40991: DOUBLE
40992: EQUAL
40993: IFTRUE 40997
40995: GO 41047
40997: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40998: LD_ADDR_VAR 0 3
41002: PUSH
41003: LD_INT 13
41005: PUSH
41006: LD_INT 14
41008: PUSH
41009: LD_INT 2
41011: PUSH
41012: LD_INT 3
41014: PUSH
41015: LD_INT 4
41017: PUSH
41018: LD_INT 5
41020: PUSH
41021: LD_INT 21
41023: PUSH
41024: LD_INT 22
41026: PUSH
41027: LD_INT 23
41029: PUSH
41030: LD_INT 24
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: ST_TO_ADDR
41045: GO 41048
41047: POP
// result := ( chassis in result ) ;
41048: LD_ADDR_VAR 0 3
41052: PUSH
41053: LD_VAR 0 1
41057: PUSH
41058: LD_VAR 0 3
41062: IN
41063: ST_TO_ADDR
// end ;
41064: LD_VAR 0 3
41068: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41069: LD_INT 0
41071: PPUSH
// if not chassis or not weapon then
41072: LD_VAR 0 1
41076: NOT
41077: PUSH
41078: LD_VAR 0 2
41082: NOT
41083: OR
41084: IFFALSE 41088
// exit ;
41086: GO 42150
// case weapon of us_machine_gun :
41088: LD_VAR 0 2
41092: PUSH
41093: LD_INT 2
41095: DOUBLE
41096: EQUAL
41097: IFTRUE 41101
41099: GO 41131
41101: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41102: LD_ADDR_VAR 0 3
41106: PUSH
41107: LD_INT 1
41109: PUSH
41110: LD_INT 2
41112: PUSH
41113: LD_INT 3
41115: PUSH
41116: LD_INT 4
41118: PUSH
41119: LD_INT 5
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: ST_TO_ADDR
41129: GO 42134
41131: LD_INT 3
41133: DOUBLE
41134: EQUAL
41135: IFTRUE 41139
41137: GO 41169
41139: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41140: LD_ADDR_VAR 0 3
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: LD_INT 2
41150: PUSH
41151: LD_INT 3
41153: PUSH
41154: LD_INT 4
41156: PUSH
41157: LD_INT 5
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: ST_TO_ADDR
41167: GO 42134
41169: LD_INT 11
41171: DOUBLE
41172: EQUAL
41173: IFTRUE 41177
41175: GO 41207
41177: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41178: LD_ADDR_VAR 0 3
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: LD_INT 3
41191: PUSH
41192: LD_INT 4
41194: PUSH
41195: LD_INT 5
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: ST_TO_ADDR
41205: GO 42134
41207: LD_INT 4
41209: DOUBLE
41210: EQUAL
41211: IFTRUE 41215
41213: GO 41241
41215: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41216: LD_ADDR_VAR 0 3
41220: PUSH
41221: LD_INT 2
41223: PUSH
41224: LD_INT 3
41226: PUSH
41227: LD_INT 4
41229: PUSH
41230: LD_INT 5
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: ST_TO_ADDR
41239: GO 42134
41241: LD_INT 5
41243: DOUBLE
41244: EQUAL
41245: IFTRUE 41249
41247: GO 41275
41249: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41250: LD_ADDR_VAR 0 3
41254: PUSH
41255: LD_INT 2
41257: PUSH
41258: LD_INT 3
41260: PUSH
41261: LD_INT 4
41263: PUSH
41264: LD_INT 5
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: ST_TO_ADDR
41273: GO 42134
41275: LD_INT 9
41277: DOUBLE
41278: EQUAL
41279: IFTRUE 41283
41281: GO 41309
41283: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41284: LD_ADDR_VAR 0 3
41288: PUSH
41289: LD_INT 2
41291: PUSH
41292: LD_INT 3
41294: PUSH
41295: LD_INT 4
41297: PUSH
41298: LD_INT 5
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: ST_TO_ADDR
41307: GO 42134
41309: LD_INT 7
41311: DOUBLE
41312: EQUAL
41313: IFTRUE 41317
41315: GO 41343
41317: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41318: LD_ADDR_VAR 0 3
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: LD_INT 3
41328: PUSH
41329: LD_INT 4
41331: PUSH
41332: LD_INT 5
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: ST_TO_ADDR
41341: GO 42134
41343: LD_INT 12
41345: DOUBLE
41346: EQUAL
41347: IFTRUE 41351
41349: GO 41377
41351: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41352: LD_ADDR_VAR 0 3
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: LD_INT 3
41362: PUSH
41363: LD_INT 4
41365: PUSH
41366: LD_INT 5
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: ST_TO_ADDR
41375: GO 42134
41377: LD_INT 13
41379: DOUBLE
41380: EQUAL
41381: IFTRUE 41385
41383: GO 41411
41385: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41386: LD_ADDR_VAR 0 3
41390: PUSH
41391: LD_INT 2
41393: PUSH
41394: LD_INT 3
41396: PUSH
41397: LD_INT 4
41399: PUSH
41400: LD_INT 5
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: ST_TO_ADDR
41409: GO 42134
41411: LD_INT 14
41413: DOUBLE
41414: EQUAL
41415: IFTRUE 41419
41417: GO 41437
41419: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41420: LD_ADDR_VAR 0 3
41424: PUSH
41425: LD_INT 4
41427: PUSH
41428: LD_INT 5
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: ST_TO_ADDR
41435: GO 42134
41437: LD_INT 6
41439: DOUBLE
41440: EQUAL
41441: IFTRUE 41445
41443: GO 41463
41445: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41446: LD_ADDR_VAR 0 3
41450: PUSH
41451: LD_INT 4
41453: PUSH
41454: LD_INT 5
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: ST_TO_ADDR
41461: GO 42134
41463: LD_INT 10
41465: DOUBLE
41466: EQUAL
41467: IFTRUE 41471
41469: GO 41489
41471: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41472: LD_ADDR_VAR 0 3
41476: PUSH
41477: LD_INT 4
41479: PUSH
41480: LD_INT 5
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: ST_TO_ADDR
41487: GO 42134
41489: LD_INT 22
41491: DOUBLE
41492: EQUAL
41493: IFTRUE 41497
41495: GO 41523
41497: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41498: LD_ADDR_VAR 0 3
41502: PUSH
41503: LD_INT 11
41505: PUSH
41506: LD_INT 12
41508: PUSH
41509: LD_INT 13
41511: PUSH
41512: LD_INT 14
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: ST_TO_ADDR
41521: GO 42134
41523: LD_INT 23
41525: DOUBLE
41526: EQUAL
41527: IFTRUE 41531
41529: GO 41557
41531: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41532: LD_ADDR_VAR 0 3
41536: PUSH
41537: LD_INT 11
41539: PUSH
41540: LD_INT 12
41542: PUSH
41543: LD_INT 13
41545: PUSH
41546: LD_INT 14
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: ST_TO_ADDR
41555: GO 42134
41557: LD_INT 24
41559: DOUBLE
41560: EQUAL
41561: IFTRUE 41565
41563: GO 41591
41565: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41566: LD_ADDR_VAR 0 3
41570: PUSH
41571: LD_INT 11
41573: PUSH
41574: LD_INT 12
41576: PUSH
41577: LD_INT 13
41579: PUSH
41580: LD_INT 14
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: ST_TO_ADDR
41589: GO 42134
41591: LD_INT 30
41593: DOUBLE
41594: EQUAL
41595: IFTRUE 41599
41597: GO 41625
41599: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41600: LD_ADDR_VAR 0 3
41604: PUSH
41605: LD_INT 11
41607: PUSH
41608: LD_INT 12
41610: PUSH
41611: LD_INT 13
41613: PUSH
41614: LD_INT 14
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: ST_TO_ADDR
41623: GO 42134
41625: LD_INT 25
41627: DOUBLE
41628: EQUAL
41629: IFTRUE 41633
41631: GO 41651
41633: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41634: LD_ADDR_VAR 0 3
41638: PUSH
41639: LD_INT 13
41641: PUSH
41642: LD_INT 14
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: ST_TO_ADDR
41649: GO 42134
41651: LD_INT 27
41653: DOUBLE
41654: EQUAL
41655: IFTRUE 41659
41657: GO 41677
41659: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41660: LD_ADDR_VAR 0 3
41664: PUSH
41665: LD_INT 13
41667: PUSH
41668: LD_INT 14
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: ST_TO_ADDR
41675: GO 42134
41677: LD_EXP 67
41681: DOUBLE
41682: EQUAL
41683: IFTRUE 41687
41685: GO 41713
41687: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41688: LD_ADDR_VAR 0 3
41692: PUSH
41693: LD_INT 11
41695: PUSH
41696: LD_INT 12
41698: PUSH
41699: LD_INT 13
41701: PUSH
41702: LD_INT 14
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: ST_TO_ADDR
41711: GO 42134
41713: LD_INT 28
41715: DOUBLE
41716: EQUAL
41717: IFTRUE 41721
41719: GO 41739
41721: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41722: LD_ADDR_VAR 0 3
41726: PUSH
41727: LD_INT 13
41729: PUSH
41730: LD_INT 14
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: ST_TO_ADDR
41737: GO 42134
41739: LD_INT 29
41741: DOUBLE
41742: EQUAL
41743: IFTRUE 41747
41745: GO 41765
41747: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41748: LD_ADDR_VAR 0 3
41752: PUSH
41753: LD_INT 13
41755: PUSH
41756: LD_INT 14
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: ST_TO_ADDR
41763: GO 42134
41765: LD_INT 31
41767: DOUBLE
41768: EQUAL
41769: IFTRUE 41773
41771: GO 41791
41773: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41774: LD_ADDR_VAR 0 3
41778: PUSH
41779: LD_INT 13
41781: PUSH
41782: LD_INT 14
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: ST_TO_ADDR
41789: GO 42134
41791: LD_INT 26
41793: DOUBLE
41794: EQUAL
41795: IFTRUE 41799
41797: GO 41817
41799: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41800: LD_ADDR_VAR 0 3
41804: PUSH
41805: LD_INT 13
41807: PUSH
41808: LD_INT 14
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: ST_TO_ADDR
41815: GO 42134
41817: LD_INT 42
41819: DOUBLE
41820: EQUAL
41821: IFTRUE 41825
41823: GO 41851
41825: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41826: LD_ADDR_VAR 0 3
41830: PUSH
41831: LD_INT 21
41833: PUSH
41834: LD_INT 22
41836: PUSH
41837: LD_INT 23
41839: PUSH
41840: LD_INT 24
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: ST_TO_ADDR
41849: GO 42134
41851: LD_INT 43
41853: DOUBLE
41854: EQUAL
41855: IFTRUE 41859
41857: GO 41885
41859: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41860: LD_ADDR_VAR 0 3
41864: PUSH
41865: LD_INT 21
41867: PUSH
41868: LD_INT 22
41870: PUSH
41871: LD_INT 23
41873: PUSH
41874: LD_INT 24
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: ST_TO_ADDR
41883: GO 42134
41885: LD_INT 44
41887: DOUBLE
41888: EQUAL
41889: IFTRUE 41893
41891: GO 41919
41893: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41894: LD_ADDR_VAR 0 3
41898: PUSH
41899: LD_INT 21
41901: PUSH
41902: LD_INT 22
41904: PUSH
41905: LD_INT 23
41907: PUSH
41908: LD_INT 24
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: ST_TO_ADDR
41917: GO 42134
41919: LD_INT 45
41921: DOUBLE
41922: EQUAL
41923: IFTRUE 41927
41925: GO 41953
41927: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41928: LD_ADDR_VAR 0 3
41932: PUSH
41933: LD_INT 21
41935: PUSH
41936: LD_INT 22
41938: PUSH
41939: LD_INT 23
41941: PUSH
41942: LD_INT 24
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: ST_TO_ADDR
41951: GO 42134
41953: LD_INT 49
41955: DOUBLE
41956: EQUAL
41957: IFTRUE 41961
41959: GO 41987
41961: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41962: LD_ADDR_VAR 0 3
41966: PUSH
41967: LD_INT 21
41969: PUSH
41970: LD_INT 22
41972: PUSH
41973: LD_INT 23
41975: PUSH
41976: LD_INT 24
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: ST_TO_ADDR
41985: GO 42134
41987: LD_INT 51
41989: DOUBLE
41990: EQUAL
41991: IFTRUE 41995
41993: GO 42021
41995: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41996: LD_ADDR_VAR 0 3
42000: PUSH
42001: LD_INT 21
42003: PUSH
42004: LD_INT 22
42006: PUSH
42007: LD_INT 23
42009: PUSH
42010: LD_INT 24
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: ST_TO_ADDR
42019: GO 42134
42021: LD_INT 52
42023: DOUBLE
42024: EQUAL
42025: IFTRUE 42029
42027: GO 42055
42029: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42030: LD_ADDR_VAR 0 3
42034: PUSH
42035: LD_INT 21
42037: PUSH
42038: LD_INT 22
42040: PUSH
42041: LD_INT 23
42043: PUSH
42044: LD_INT 24
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: ST_TO_ADDR
42053: GO 42134
42055: LD_INT 53
42057: DOUBLE
42058: EQUAL
42059: IFTRUE 42063
42061: GO 42081
42063: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42064: LD_ADDR_VAR 0 3
42068: PUSH
42069: LD_INT 23
42071: PUSH
42072: LD_INT 24
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: ST_TO_ADDR
42079: GO 42134
42081: LD_INT 46
42083: DOUBLE
42084: EQUAL
42085: IFTRUE 42089
42087: GO 42107
42089: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42090: LD_ADDR_VAR 0 3
42094: PUSH
42095: LD_INT 23
42097: PUSH
42098: LD_INT 24
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: ST_TO_ADDR
42105: GO 42134
42107: LD_INT 47
42109: DOUBLE
42110: EQUAL
42111: IFTRUE 42115
42113: GO 42133
42115: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42116: LD_ADDR_VAR 0 3
42120: PUSH
42121: LD_INT 23
42123: PUSH
42124: LD_INT 24
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: ST_TO_ADDR
42131: GO 42134
42133: POP
// result := ( chassis in result ) ;
42134: LD_ADDR_VAR 0 3
42138: PUSH
42139: LD_VAR 0 1
42143: PUSH
42144: LD_VAR 0 3
42148: IN
42149: ST_TO_ADDR
// end ;
42150: LD_VAR 0 3
42154: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42155: LD_INT 0
42157: PPUSH
42158: PPUSH
42159: PPUSH
42160: PPUSH
42161: PPUSH
42162: PPUSH
42163: PPUSH
// result := array ;
42164: LD_ADDR_VAR 0 5
42168: PUSH
42169: LD_VAR 0 1
42173: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42174: LD_VAR 0 1
42178: NOT
42179: PUSH
42180: LD_VAR 0 2
42184: NOT
42185: OR
42186: PUSH
42187: LD_VAR 0 3
42191: NOT
42192: OR
42193: PUSH
42194: LD_VAR 0 2
42198: PUSH
42199: LD_VAR 0 1
42203: GREATER
42204: OR
42205: PUSH
42206: LD_VAR 0 3
42210: PUSH
42211: LD_VAR 0 1
42215: GREATER
42216: OR
42217: IFFALSE 42221
// exit ;
42219: GO 42517
// if direction then
42221: LD_VAR 0 4
42225: IFFALSE 42289
// begin d := 1 ;
42227: LD_ADDR_VAR 0 9
42231: PUSH
42232: LD_INT 1
42234: ST_TO_ADDR
// if i_from > i_to then
42235: LD_VAR 0 2
42239: PUSH
42240: LD_VAR 0 3
42244: GREATER
42245: IFFALSE 42271
// length := ( array - i_from ) + i_to else
42247: LD_ADDR_VAR 0 11
42251: PUSH
42252: LD_VAR 0 1
42256: PUSH
42257: LD_VAR 0 2
42261: MINUS
42262: PUSH
42263: LD_VAR 0 3
42267: PLUS
42268: ST_TO_ADDR
42269: GO 42287
// length := i_to - i_from ;
42271: LD_ADDR_VAR 0 11
42275: PUSH
42276: LD_VAR 0 3
42280: PUSH
42281: LD_VAR 0 2
42285: MINUS
42286: ST_TO_ADDR
// end else
42287: GO 42350
// begin d := - 1 ;
42289: LD_ADDR_VAR 0 9
42293: PUSH
42294: LD_INT 1
42296: NEG
42297: ST_TO_ADDR
// if i_from > i_to then
42298: LD_VAR 0 2
42302: PUSH
42303: LD_VAR 0 3
42307: GREATER
42308: IFFALSE 42328
// length := i_from - i_to else
42310: LD_ADDR_VAR 0 11
42314: PUSH
42315: LD_VAR 0 2
42319: PUSH
42320: LD_VAR 0 3
42324: MINUS
42325: ST_TO_ADDR
42326: GO 42350
// length := ( array - i_to ) + i_from ;
42328: LD_ADDR_VAR 0 11
42332: PUSH
42333: LD_VAR 0 1
42337: PUSH
42338: LD_VAR 0 3
42342: MINUS
42343: PUSH
42344: LD_VAR 0 2
42348: PLUS
42349: ST_TO_ADDR
// end ; if not length then
42350: LD_VAR 0 11
42354: NOT
42355: IFFALSE 42359
// exit ;
42357: GO 42517
// tmp := array ;
42359: LD_ADDR_VAR 0 10
42363: PUSH
42364: LD_VAR 0 1
42368: ST_TO_ADDR
// for i = 1 to length do
42369: LD_ADDR_VAR 0 6
42373: PUSH
42374: DOUBLE
42375: LD_INT 1
42377: DEC
42378: ST_TO_ADDR
42379: LD_VAR 0 11
42383: PUSH
42384: FOR_TO
42385: IFFALSE 42505
// begin for j = 1 to array do
42387: LD_ADDR_VAR 0 7
42391: PUSH
42392: DOUBLE
42393: LD_INT 1
42395: DEC
42396: ST_TO_ADDR
42397: LD_VAR 0 1
42401: PUSH
42402: FOR_TO
42403: IFFALSE 42491
// begin k := j + d ;
42405: LD_ADDR_VAR 0 8
42409: PUSH
42410: LD_VAR 0 7
42414: PUSH
42415: LD_VAR 0 9
42419: PLUS
42420: ST_TO_ADDR
// if k > array then
42421: LD_VAR 0 8
42425: PUSH
42426: LD_VAR 0 1
42430: GREATER
42431: IFFALSE 42441
// k := 1 ;
42433: LD_ADDR_VAR 0 8
42437: PUSH
42438: LD_INT 1
42440: ST_TO_ADDR
// if not k then
42441: LD_VAR 0 8
42445: NOT
42446: IFFALSE 42458
// k := array ;
42448: LD_ADDR_VAR 0 8
42452: PUSH
42453: LD_VAR 0 1
42457: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42458: LD_ADDR_VAR 0 10
42462: PUSH
42463: LD_VAR 0 10
42467: PPUSH
42468: LD_VAR 0 8
42472: PPUSH
42473: LD_VAR 0 1
42477: PUSH
42478: LD_VAR 0 7
42482: ARRAY
42483: PPUSH
42484: CALL_OW 1
42488: ST_TO_ADDR
// end ;
42489: GO 42402
42491: POP
42492: POP
// array := tmp ;
42493: LD_ADDR_VAR 0 1
42497: PUSH
42498: LD_VAR 0 10
42502: ST_TO_ADDR
// end ;
42503: GO 42384
42505: POP
42506: POP
// result := array ;
42507: LD_ADDR_VAR 0 5
42511: PUSH
42512: LD_VAR 0 1
42516: ST_TO_ADDR
// end ;
42517: LD_VAR 0 5
42521: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42522: LD_INT 0
42524: PPUSH
42525: PPUSH
// result := 0 ;
42526: LD_ADDR_VAR 0 3
42530: PUSH
42531: LD_INT 0
42533: ST_TO_ADDR
// if not array or not value in array then
42534: LD_VAR 0 1
42538: NOT
42539: PUSH
42540: LD_VAR 0 2
42544: PUSH
42545: LD_VAR 0 1
42549: IN
42550: NOT
42551: OR
42552: IFFALSE 42556
// exit ;
42554: GO 42610
// for i = 1 to array do
42556: LD_ADDR_VAR 0 4
42560: PUSH
42561: DOUBLE
42562: LD_INT 1
42564: DEC
42565: ST_TO_ADDR
42566: LD_VAR 0 1
42570: PUSH
42571: FOR_TO
42572: IFFALSE 42608
// if value = array [ i ] then
42574: LD_VAR 0 2
42578: PUSH
42579: LD_VAR 0 1
42583: PUSH
42584: LD_VAR 0 4
42588: ARRAY
42589: EQUAL
42590: IFFALSE 42606
// begin result := i ;
42592: LD_ADDR_VAR 0 3
42596: PUSH
42597: LD_VAR 0 4
42601: ST_TO_ADDR
// exit ;
42602: POP
42603: POP
42604: GO 42610
// end ;
42606: GO 42571
42608: POP
42609: POP
// end ;
42610: LD_VAR 0 3
42614: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42615: LD_INT 0
42617: PPUSH
// vc_chassis := chassis ;
42618: LD_ADDR_OWVAR 37
42622: PUSH
42623: LD_VAR 0 1
42627: ST_TO_ADDR
// vc_engine := engine ;
42628: LD_ADDR_OWVAR 39
42632: PUSH
42633: LD_VAR 0 2
42637: ST_TO_ADDR
// vc_control := control ;
42638: LD_ADDR_OWVAR 38
42642: PUSH
42643: LD_VAR 0 3
42647: ST_TO_ADDR
// vc_weapon := weapon ;
42648: LD_ADDR_OWVAR 40
42652: PUSH
42653: LD_VAR 0 4
42657: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42658: LD_ADDR_OWVAR 41
42662: PUSH
42663: LD_VAR 0 5
42667: ST_TO_ADDR
// end ;
42668: LD_VAR 0 6
42672: RET
// export function WantPlant ( unit ) ; var task ; begin
42673: LD_INT 0
42675: PPUSH
42676: PPUSH
// result := false ;
42677: LD_ADDR_VAR 0 2
42681: PUSH
42682: LD_INT 0
42684: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42685: LD_ADDR_VAR 0 3
42689: PUSH
42690: LD_VAR 0 1
42694: PPUSH
42695: CALL_OW 437
42699: ST_TO_ADDR
// if task then
42700: LD_VAR 0 3
42704: IFFALSE 42732
// if task [ 1 ] [ 1 ] = p then
42706: LD_VAR 0 3
42710: PUSH
42711: LD_INT 1
42713: ARRAY
42714: PUSH
42715: LD_INT 1
42717: ARRAY
42718: PUSH
42719: LD_STRING p
42721: EQUAL
42722: IFFALSE 42732
// result := true ;
42724: LD_ADDR_VAR 0 2
42728: PUSH
42729: LD_INT 1
42731: ST_TO_ADDR
// end ;
42732: LD_VAR 0 2
42736: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42737: LD_INT 0
42739: PPUSH
42740: PPUSH
42741: PPUSH
42742: PPUSH
// if pos < 1 then
42743: LD_VAR 0 2
42747: PUSH
42748: LD_INT 1
42750: LESS
42751: IFFALSE 42755
// exit ;
42753: GO 43058
// if pos = 1 then
42755: LD_VAR 0 2
42759: PUSH
42760: LD_INT 1
42762: EQUAL
42763: IFFALSE 42796
// result := Replace ( arr , pos [ 1 ] , value ) else
42765: LD_ADDR_VAR 0 4
42769: PUSH
42770: LD_VAR 0 1
42774: PPUSH
42775: LD_VAR 0 2
42779: PUSH
42780: LD_INT 1
42782: ARRAY
42783: PPUSH
42784: LD_VAR 0 3
42788: PPUSH
42789: CALL_OW 1
42793: ST_TO_ADDR
42794: GO 43058
// begin tmp := arr ;
42796: LD_ADDR_VAR 0 6
42800: PUSH
42801: LD_VAR 0 1
42805: ST_TO_ADDR
// s_arr := [ tmp ] ;
42806: LD_ADDR_VAR 0 7
42810: PUSH
42811: LD_VAR 0 6
42815: PUSH
42816: EMPTY
42817: LIST
42818: ST_TO_ADDR
// for i = 1 to pos - 1 do
42819: LD_ADDR_VAR 0 5
42823: PUSH
42824: DOUBLE
42825: LD_INT 1
42827: DEC
42828: ST_TO_ADDR
42829: LD_VAR 0 2
42833: PUSH
42834: LD_INT 1
42836: MINUS
42837: PUSH
42838: FOR_TO
42839: IFFALSE 42884
// begin tmp := tmp [ pos [ i ] ] ;
42841: LD_ADDR_VAR 0 6
42845: PUSH
42846: LD_VAR 0 6
42850: PUSH
42851: LD_VAR 0 2
42855: PUSH
42856: LD_VAR 0 5
42860: ARRAY
42861: ARRAY
42862: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42863: LD_ADDR_VAR 0 7
42867: PUSH
42868: LD_VAR 0 7
42872: PUSH
42873: LD_VAR 0 6
42877: PUSH
42878: EMPTY
42879: LIST
42880: ADD
42881: ST_TO_ADDR
// end ;
42882: GO 42838
42884: POP
42885: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42886: LD_ADDR_VAR 0 6
42890: PUSH
42891: LD_VAR 0 6
42895: PPUSH
42896: LD_VAR 0 2
42900: PUSH
42901: LD_VAR 0 2
42905: ARRAY
42906: PPUSH
42907: LD_VAR 0 3
42911: PPUSH
42912: CALL_OW 1
42916: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42917: LD_ADDR_VAR 0 7
42921: PUSH
42922: LD_VAR 0 7
42926: PPUSH
42927: LD_VAR 0 7
42931: PPUSH
42932: LD_VAR 0 6
42936: PPUSH
42937: CALL_OW 1
42941: ST_TO_ADDR
// for i = s_arr downto 2 do
42942: LD_ADDR_VAR 0 5
42946: PUSH
42947: DOUBLE
42948: LD_VAR 0 7
42952: INC
42953: ST_TO_ADDR
42954: LD_INT 2
42956: PUSH
42957: FOR_DOWNTO
42958: IFFALSE 43042
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42960: LD_ADDR_VAR 0 6
42964: PUSH
42965: LD_VAR 0 7
42969: PUSH
42970: LD_VAR 0 5
42974: PUSH
42975: LD_INT 1
42977: MINUS
42978: ARRAY
42979: PPUSH
42980: LD_VAR 0 2
42984: PUSH
42985: LD_VAR 0 5
42989: PUSH
42990: LD_INT 1
42992: MINUS
42993: ARRAY
42994: PPUSH
42995: LD_VAR 0 7
42999: PUSH
43000: LD_VAR 0 5
43004: ARRAY
43005: PPUSH
43006: CALL_OW 1
43010: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43011: LD_ADDR_VAR 0 7
43015: PUSH
43016: LD_VAR 0 7
43020: PPUSH
43021: LD_VAR 0 5
43025: PUSH
43026: LD_INT 1
43028: MINUS
43029: PPUSH
43030: LD_VAR 0 6
43034: PPUSH
43035: CALL_OW 1
43039: ST_TO_ADDR
// end ;
43040: GO 42957
43042: POP
43043: POP
// result := s_arr [ 1 ] ;
43044: LD_ADDR_VAR 0 4
43048: PUSH
43049: LD_VAR 0 7
43053: PUSH
43054: LD_INT 1
43056: ARRAY
43057: ST_TO_ADDR
// end ; end ;
43058: LD_VAR 0 4
43062: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43063: LD_INT 0
43065: PPUSH
43066: PPUSH
// if not list then
43067: LD_VAR 0 1
43071: NOT
43072: IFFALSE 43076
// exit ;
43074: GO 43167
// i := list [ pos1 ] ;
43076: LD_ADDR_VAR 0 5
43080: PUSH
43081: LD_VAR 0 1
43085: PUSH
43086: LD_VAR 0 2
43090: ARRAY
43091: ST_TO_ADDR
// if not i then
43092: LD_VAR 0 5
43096: NOT
43097: IFFALSE 43101
// exit ;
43099: GO 43167
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43101: LD_ADDR_VAR 0 1
43105: PUSH
43106: LD_VAR 0 1
43110: PPUSH
43111: LD_VAR 0 2
43115: PPUSH
43116: LD_VAR 0 1
43120: PUSH
43121: LD_VAR 0 3
43125: ARRAY
43126: PPUSH
43127: CALL_OW 1
43131: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43132: LD_ADDR_VAR 0 1
43136: PUSH
43137: LD_VAR 0 1
43141: PPUSH
43142: LD_VAR 0 3
43146: PPUSH
43147: LD_VAR 0 5
43151: PPUSH
43152: CALL_OW 1
43156: ST_TO_ADDR
// result := list ;
43157: LD_ADDR_VAR 0 4
43161: PUSH
43162: LD_VAR 0 1
43166: ST_TO_ADDR
// end ;
43167: LD_VAR 0 4
43171: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43172: LD_INT 0
43174: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43175: LD_ADDR_VAR 0 5
43179: PUSH
43180: LD_VAR 0 1
43184: PPUSH
43185: CALL_OW 250
43189: PPUSH
43190: LD_VAR 0 1
43194: PPUSH
43195: CALL_OW 251
43199: PPUSH
43200: LD_VAR 0 2
43204: PPUSH
43205: LD_VAR 0 3
43209: PPUSH
43210: LD_VAR 0 4
43214: PPUSH
43215: CALL 43225 0 5
43219: ST_TO_ADDR
// end ;
43220: LD_VAR 0 5
43224: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43225: LD_INT 0
43227: PPUSH
43228: PPUSH
43229: PPUSH
43230: PPUSH
// if not list then
43231: LD_VAR 0 3
43235: NOT
43236: IFFALSE 43240
// exit ;
43238: GO 43628
// result := [ ] ;
43240: LD_ADDR_VAR 0 6
43244: PUSH
43245: EMPTY
43246: ST_TO_ADDR
// for i in list do
43247: LD_ADDR_VAR 0 7
43251: PUSH
43252: LD_VAR 0 3
43256: PUSH
43257: FOR_IN
43258: IFFALSE 43460
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43260: LD_ADDR_VAR 0 9
43264: PUSH
43265: LD_VAR 0 7
43269: PPUSH
43270: LD_VAR 0 1
43274: PPUSH
43275: LD_VAR 0 2
43279: PPUSH
43280: CALL_OW 297
43284: ST_TO_ADDR
// if not result then
43285: LD_VAR 0 6
43289: NOT
43290: IFFALSE 43316
// result := [ [ i , tmp ] ] else
43292: LD_ADDR_VAR 0 6
43296: PUSH
43297: LD_VAR 0 7
43301: PUSH
43302: LD_VAR 0 9
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: EMPTY
43312: LIST
43313: ST_TO_ADDR
43314: GO 43458
// begin if result [ result ] [ 2 ] < tmp then
43316: LD_VAR 0 6
43320: PUSH
43321: LD_VAR 0 6
43325: ARRAY
43326: PUSH
43327: LD_INT 2
43329: ARRAY
43330: PUSH
43331: LD_VAR 0 9
43335: LESS
43336: IFFALSE 43378
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43338: LD_ADDR_VAR 0 6
43342: PUSH
43343: LD_VAR 0 6
43347: PPUSH
43348: LD_VAR 0 6
43352: PUSH
43353: LD_INT 1
43355: PLUS
43356: PPUSH
43357: LD_VAR 0 7
43361: PUSH
43362: LD_VAR 0 9
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PPUSH
43371: CALL_OW 2
43375: ST_TO_ADDR
43376: GO 43458
// for j = 1 to result do
43378: LD_ADDR_VAR 0 8
43382: PUSH
43383: DOUBLE
43384: LD_INT 1
43386: DEC
43387: ST_TO_ADDR
43388: LD_VAR 0 6
43392: PUSH
43393: FOR_TO
43394: IFFALSE 43456
// begin if tmp < result [ j ] [ 2 ] then
43396: LD_VAR 0 9
43400: PUSH
43401: LD_VAR 0 6
43405: PUSH
43406: LD_VAR 0 8
43410: ARRAY
43411: PUSH
43412: LD_INT 2
43414: ARRAY
43415: LESS
43416: IFFALSE 43454
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43418: LD_ADDR_VAR 0 6
43422: PUSH
43423: LD_VAR 0 6
43427: PPUSH
43428: LD_VAR 0 8
43432: PPUSH
43433: LD_VAR 0 7
43437: PUSH
43438: LD_VAR 0 9
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PPUSH
43447: CALL_OW 2
43451: ST_TO_ADDR
// break ;
43452: GO 43456
// end ; end ;
43454: GO 43393
43456: POP
43457: POP
// end ; end ;
43458: GO 43257
43460: POP
43461: POP
// if result and not asc then
43462: LD_VAR 0 6
43466: PUSH
43467: LD_VAR 0 4
43471: NOT
43472: AND
43473: IFFALSE 43548
// begin tmp := result ;
43475: LD_ADDR_VAR 0 9
43479: PUSH
43480: LD_VAR 0 6
43484: ST_TO_ADDR
// for i = tmp downto 1 do
43485: LD_ADDR_VAR 0 7
43489: PUSH
43490: DOUBLE
43491: LD_VAR 0 9
43495: INC
43496: ST_TO_ADDR
43497: LD_INT 1
43499: PUSH
43500: FOR_DOWNTO
43501: IFFALSE 43546
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43503: LD_ADDR_VAR 0 6
43507: PUSH
43508: LD_VAR 0 6
43512: PPUSH
43513: LD_VAR 0 9
43517: PUSH
43518: LD_VAR 0 7
43522: MINUS
43523: PUSH
43524: LD_INT 1
43526: PLUS
43527: PPUSH
43528: LD_VAR 0 9
43532: PUSH
43533: LD_VAR 0 7
43537: ARRAY
43538: PPUSH
43539: CALL_OW 1
43543: ST_TO_ADDR
43544: GO 43500
43546: POP
43547: POP
// end ; tmp := [ ] ;
43548: LD_ADDR_VAR 0 9
43552: PUSH
43553: EMPTY
43554: ST_TO_ADDR
// if mode then
43555: LD_VAR 0 5
43559: IFFALSE 43628
// begin for i = 1 to result do
43561: LD_ADDR_VAR 0 7
43565: PUSH
43566: DOUBLE
43567: LD_INT 1
43569: DEC
43570: ST_TO_ADDR
43571: LD_VAR 0 6
43575: PUSH
43576: FOR_TO
43577: IFFALSE 43616
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43579: LD_ADDR_VAR 0 9
43583: PUSH
43584: LD_VAR 0 9
43588: PPUSH
43589: LD_VAR 0 7
43593: PPUSH
43594: LD_VAR 0 6
43598: PUSH
43599: LD_VAR 0 7
43603: ARRAY
43604: PUSH
43605: LD_INT 1
43607: ARRAY
43608: PPUSH
43609: CALL_OW 1
43613: ST_TO_ADDR
43614: GO 43576
43616: POP
43617: POP
// result := tmp ;
43618: LD_ADDR_VAR 0 6
43622: PUSH
43623: LD_VAR 0 9
43627: ST_TO_ADDR
// end ; end ;
43628: LD_VAR 0 6
43632: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43633: LD_INT 0
43635: PPUSH
43636: PPUSH
43637: PPUSH
43638: PPUSH
43639: PPUSH
43640: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43641: LD_ADDR_VAR 0 5
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: EMPTY
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: ST_TO_ADDR
// if not x or not y then
43663: LD_VAR 0 2
43667: NOT
43668: PUSH
43669: LD_VAR 0 3
43673: NOT
43674: OR
43675: IFFALSE 43679
// exit ;
43677: GO 45331
// if not range then
43679: LD_VAR 0 4
43683: NOT
43684: IFFALSE 43694
// range := 10 ;
43686: LD_ADDR_VAR 0 4
43690: PUSH
43691: LD_INT 10
43693: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43694: LD_ADDR_VAR 0 8
43698: PUSH
43699: LD_INT 81
43701: PUSH
43702: LD_VAR 0 1
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 92
43713: PUSH
43714: LD_VAR 0 2
43718: PUSH
43719: LD_VAR 0 3
43723: PUSH
43724: LD_VAR 0 4
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 3
43737: PUSH
43738: LD_INT 21
43740: PUSH
43741: LD_INT 3
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: LIST
43756: PPUSH
43757: CALL_OW 69
43761: ST_TO_ADDR
// if not tmp then
43762: LD_VAR 0 8
43766: NOT
43767: IFFALSE 43771
// exit ;
43769: GO 45331
// for i in tmp do
43771: LD_ADDR_VAR 0 6
43775: PUSH
43776: LD_VAR 0 8
43780: PUSH
43781: FOR_IN
43782: IFFALSE 45306
// begin points := [ 0 , 0 , 0 ] ;
43784: LD_ADDR_VAR 0 9
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: LD_INT 0
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: LIST
43802: ST_TO_ADDR
// bpoints := 1 ;
43803: LD_ADDR_VAR 0 10
43807: PUSH
43808: LD_INT 1
43810: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43811: LD_VAR 0 6
43815: PPUSH
43816: CALL_OW 247
43820: PUSH
43821: LD_INT 1
43823: DOUBLE
43824: EQUAL
43825: IFTRUE 43829
43827: GO 44407
43829: POP
// begin if GetClass ( i ) = 1 then
43830: LD_VAR 0 6
43834: PPUSH
43835: CALL_OW 257
43839: PUSH
43840: LD_INT 1
43842: EQUAL
43843: IFFALSE 43864
// points := [ 10 , 5 , 3 ] ;
43845: LD_ADDR_VAR 0 9
43849: PUSH
43850: LD_INT 10
43852: PUSH
43853: LD_INT 5
43855: PUSH
43856: LD_INT 3
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: LIST
43863: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43864: LD_VAR 0 6
43868: PPUSH
43869: CALL_OW 257
43873: PUSH
43874: LD_INT 2
43876: PUSH
43877: LD_INT 3
43879: PUSH
43880: LD_INT 4
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: LIST
43887: IN
43888: IFFALSE 43909
// points := [ 3 , 2 , 1 ] ;
43890: LD_ADDR_VAR 0 9
43894: PUSH
43895: LD_INT 3
43897: PUSH
43898: LD_INT 2
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: LIST
43908: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43909: LD_VAR 0 6
43913: PPUSH
43914: CALL_OW 257
43918: PUSH
43919: LD_INT 5
43921: EQUAL
43922: IFFALSE 43943
// points := [ 130 , 5 , 2 ] ;
43924: LD_ADDR_VAR 0 9
43928: PUSH
43929: LD_INT 130
43931: PUSH
43932: LD_INT 5
43934: PUSH
43935: LD_INT 2
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: LIST
43942: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43943: LD_VAR 0 6
43947: PPUSH
43948: CALL_OW 257
43952: PUSH
43953: LD_INT 8
43955: EQUAL
43956: IFFALSE 43977
// points := [ 35 , 35 , 30 ] ;
43958: LD_ADDR_VAR 0 9
43962: PUSH
43963: LD_INT 35
43965: PUSH
43966: LD_INT 35
43968: PUSH
43969: LD_INT 30
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: LIST
43976: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43977: LD_VAR 0 6
43981: PPUSH
43982: CALL_OW 257
43986: PUSH
43987: LD_INT 9
43989: EQUAL
43990: IFFALSE 44011
// points := [ 20 , 55 , 40 ] ;
43992: LD_ADDR_VAR 0 9
43996: PUSH
43997: LD_INT 20
43999: PUSH
44000: LD_INT 55
44002: PUSH
44003: LD_INT 40
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: LIST
44010: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44011: LD_VAR 0 6
44015: PPUSH
44016: CALL_OW 257
44020: PUSH
44021: LD_INT 12
44023: PUSH
44024: LD_INT 16
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: IN
44031: IFFALSE 44052
// points := [ 5 , 3 , 2 ] ;
44033: LD_ADDR_VAR 0 9
44037: PUSH
44038: LD_INT 5
44040: PUSH
44041: LD_INT 3
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: LIST
44051: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44052: LD_VAR 0 6
44056: PPUSH
44057: CALL_OW 257
44061: PUSH
44062: LD_INT 17
44064: EQUAL
44065: IFFALSE 44086
// points := [ 100 , 50 , 75 ] ;
44067: LD_ADDR_VAR 0 9
44071: PUSH
44072: LD_INT 100
44074: PUSH
44075: LD_INT 50
44077: PUSH
44078: LD_INT 75
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: LIST
44085: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44086: LD_VAR 0 6
44090: PPUSH
44091: CALL_OW 257
44095: PUSH
44096: LD_INT 15
44098: EQUAL
44099: IFFALSE 44120
// points := [ 10 , 5 , 3 ] ;
44101: LD_ADDR_VAR 0 9
44105: PUSH
44106: LD_INT 10
44108: PUSH
44109: LD_INT 5
44111: PUSH
44112: LD_INT 3
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: LIST
44119: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44120: LD_VAR 0 6
44124: PPUSH
44125: CALL_OW 257
44129: PUSH
44130: LD_INT 14
44132: EQUAL
44133: IFFALSE 44154
// points := [ 10 , 0 , 0 ] ;
44135: LD_ADDR_VAR 0 9
44139: PUSH
44140: LD_INT 10
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: LIST
44153: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44154: LD_VAR 0 6
44158: PPUSH
44159: CALL_OW 257
44163: PUSH
44164: LD_INT 11
44166: EQUAL
44167: IFFALSE 44188
// points := [ 30 , 10 , 5 ] ;
44169: LD_ADDR_VAR 0 9
44173: PUSH
44174: LD_INT 30
44176: PUSH
44177: LD_INT 10
44179: PUSH
44180: LD_INT 5
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: LIST
44187: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44188: LD_VAR 0 1
44192: PPUSH
44193: LD_INT 5
44195: PPUSH
44196: CALL_OW 321
44200: PUSH
44201: LD_INT 2
44203: EQUAL
44204: IFFALSE 44221
// bpoints := bpoints * 1.8 ;
44206: LD_ADDR_VAR 0 10
44210: PUSH
44211: LD_VAR 0 10
44215: PUSH
44216: LD_REAL  1.80000000000000E+0000
44219: MUL
44220: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44221: LD_VAR 0 6
44225: PPUSH
44226: CALL_OW 257
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: LD_INT 3
44239: PUSH
44240: LD_INT 4
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: IN
44249: PUSH
44250: LD_VAR 0 1
44254: PPUSH
44255: LD_INT 51
44257: PPUSH
44258: CALL_OW 321
44262: PUSH
44263: LD_INT 2
44265: EQUAL
44266: AND
44267: IFFALSE 44284
// bpoints := bpoints * 1.2 ;
44269: LD_ADDR_VAR 0 10
44273: PUSH
44274: LD_VAR 0 10
44278: PUSH
44279: LD_REAL  1.20000000000000E+0000
44282: MUL
44283: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44284: LD_VAR 0 6
44288: PPUSH
44289: CALL_OW 257
44293: PUSH
44294: LD_INT 5
44296: PUSH
44297: LD_INT 7
44299: PUSH
44300: LD_INT 9
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: LIST
44307: IN
44308: PUSH
44309: LD_VAR 0 1
44313: PPUSH
44314: LD_INT 52
44316: PPUSH
44317: CALL_OW 321
44321: PUSH
44322: LD_INT 2
44324: EQUAL
44325: AND
44326: IFFALSE 44343
// bpoints := bpoints * 1.5 ;
44328: LD_ADDR_VAR 0 10
44332: PUSH
44333: LD_VAR 0 10
44337: PUSH
44338: LD_REAL  1.50000000000000E+0000
44341: MUL
44342: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44343: LD_VAR 0 1
44347: PPUSH
44348: LD_INT 66
44350: PPUSH
44351: CALL_OW 321
44355: PUSH
44356: LD_INT 2
44358: EQUAL
44359: IFFALSE 44376
// bpoints := bpoints * 1.1 ;
44361: LD_ADDR_VAR 0 10
44365: PUSH
44366: LD_VAR 0 10
44370: PUSH
44371: LD_REAL  1.10000000000000E+0000
44374: MUL
44375: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44376: LD_ADDR_VAR 0 10
44380: PUSH
44381: LD_VAR 0 10
44385: PUSH
44386: LD_VAR 0 6
44390: PPUSH
44391: LD_INT 1
44393: PPUSH
44394: CALL_OW 259
44398: PUSH
44399: LD_REAL  1.15000000000000E+0000
44402: MUL
44403: MUL
44404: ST_TO_ADDR
// end ; unit_vehicle :
44405: GO 45235
44407: LD_INT 2
44409: DOUBLE
44410: EQUAL
44411: IFTRUE 44415
44413: GO 45223
44415: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44416: LD_VAR 0 6
44420: PPUSH
44421: CALL_OW 264
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: LD_INT 42
44431: PUSH
44432: LD_INT 24
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: LIST
44439: IN
44440: IFFALSE 44461
// points := [ 25 , 5 , 3 ] ;
44442: LD_ADDR_VAR 0 9
44446: PUSH
44447: LD_INT 25
44449: PUSH
44450: LD_INT 5
44452: PUSH
44453: LD_INT 3
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: LIST
44460: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44461: LD_VAR 0 6
44465: PPUSH
44466: CALL_OW 264
44470: PUSH
44471: LD_INT 4
44473: PUSH
44474: LD_INT 43
44476: PUSH
44477: LD_INT 25
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: LIST
44484: IN
44485: IFFALSE 44506
// points := [ 40 , 15 , 5 ] ;
44487: LD_ADDR_VAR 0 9
44491: PUSH
44492: LD_INT 40
44494: PUSH
44495: LD_INT 15
44497: PUSH
44498: LD_INT 5
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: LIST
44505: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44506: LD_VAR 0 6
44510: PPUSH
44511: CALL_OW 264
44515: PUSH
44516: LD_INT 3
44518: PUSH
44519: LD_INT 23
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: IN
44526: IFFALSE 44547
// points := [ 7 , 25 , 8 ] ;
44528: LD_ADDR_VAR 0 9
44532: PUSH
44533: LD_INT 7
44535: PUSH
44536: LD_INT 25
44538: PUSH
44539: LD_INT 8
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: LIST
44546: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44547: LD_VAR 0 6
44551: PPUSH
44552: CALL_OW 264
44556: PUSH
44557: LD_INT 5
44559: PUSH
44560: LD_INT 27
44562: PUSH
44563: LD_INT 44
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: LIST
44570: IN
44571: IFFALSE 44592
// points := [ 14 , 50 , 16 ] ;
44573: LD_ADDR_VAR 0 9
44577: PUSH
44578: LD_INT 14
44580: PUSH
44581: LD_INT 50
44583: PUSH
44584: LD_INT 16
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: LIST
44591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44592: LD_VAR 0 6
44596: PPUSH
44597: CALL_OW 264
44601: PUSH
44602: LD_INT 6
44604: PUSH
44605: LD_INT 46
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: IN
44612: IFFALSE 44633
// points := [ 32 , 120 , 70 ] ;
44614: LD_ADDR_VAR 0 9
44618: PUSH
44619: LD_INT 32
44621: PUSH
44622: LD_INT 120
44624: PUSH
44625: LD_INT 70
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: LIST
44632: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44633: LD_VAR 0 6
44637: PPUSH
44638: CALL_OW 264
44642: PUSH
44643: LD_INT 7
44645: PUSH
44646: LD_INT 28
44648: PUSH
44649: LD_INT 45
44651: PUSH
44652: LD_EXP 67
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: IN
44663: IFFALSE 44684
// points := [ 35 , 20 , 45 ] ;
44665: LD_ADDR_VAR 0 9
44669: PUSH
44670: LD_INT 35
44672: PUSH
44673: LD_INT 20
44675: PUSH
44676: LD_INT 45
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: LIST
44683: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44684: LD_VAR 0 6
44688: PPUSH
44689: CALL_OW 264
44693: PUSH
44694: LD_INT 47
44696: PUSH
44697: EMPTY
44698: LIST
44699: IN
44700: IFFALSE 44721
// points := [ 67 , 45 , 75 ] ;
44702: LD_ADDR_VAR 0 9
44706: PUSH
44707: LD_INT 67
44709: PUSH
44710: LD_INT 45
44712: PUSH
44713: LD_INT 75
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: LIST
44720: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44721: LD_VAR 0 6
44725: PPUSH
44726: CALL_OW 264
44730: PUSH
44731: LD_INT 26
44733: PUSH
44734: EMPTY
44735: LIST
44736: IN
44737: IFFALSE 44758
// points := [ 120 , 30 , 80 ] ;
44739: LD_ADDR_VAR 0 9
44743: PUSH
44744: LD_INT 120
44746: PUSH
44747: LD_INT 30
44749: PUSH
44750: LD_INT 80
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: LIST
44757: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44758: LD_VAR 0 6
44762: PPUSH
44763: CALL_OW 264
44767: PUSH
44768: LD_INT 22
44770: PUSH
44771: EMPTY
44772: LIST
44773: IN
44774: IFFALSE 44795
// points := [ 40 , 1 , 1 ] ;
44776: LD_ADDR_VAR 0 9
44780: PUSH
44781: LD_INT 40
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: LIST
44794: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44795: LD_VAR 0 6
44799: PPUSH
44800: CALL_OW 264
44804: PUSH
44805: LD_INT 29
44807: PUSH
44808: EMPTY
44809: LIST
44810: IN
44811: IFFALSE 44832
// points := [ 70 , 200 , 400 ] ;
44813: LD_ADDR_VAR 0 9
44817: PUSH
44818: LD_INT 70
44820: PUSH
44821: LD_INT 200
44823: PUSH
44824: LD_INT 400
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: LIST
44831: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44832: LD_VAR 0 6
44836: PPUSH
44837: CALL_OW 264
44841: PUSH
44842: LD_INT 14
44844: PUSH
44845: LD_INT 53
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: IN
44852: IFFALSE 44873
// points := [ 40 , 10 , 20 ] ;
44854: LD_ADDR_VAR 0 9
44858: PUSH
44859: LD_INT 40
44861: PUSH
44862: LD_INT 10
44864: PUSH
44865: LD_INT 20
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: LIST
44872: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44873: LD_VAR 0 6
44877: PPUSH
44878: CALL_OW 264
44882: PUSH
44883: LD_INT 9
44885: PUSH
44886: EMPTY
44887: LIST
44888: IN
44889: IFFALSE 44910
// points := [ 5 , 70 , 20 ] ;
44891: LD_ADDR_VAR 0 9
44895: PUSH
44896: LD_INT 5
44898: PUSH
44899: LD_INT 70
44901: PUSH
44902: LD_INT 20
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: LIST
44909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44910: LD_VAR 0 6
44914: PPUSH
44915: CALL_OW 264
44919: PUSH
44920: LD_INT 10
44922: PUSH
44923: EMPTY
44924: LIST
44925: IN
44926: IFFALSE 44947
// points := [ 35 , 110 , 70 ] ;
44928: LD_ADDR_VAR 0 9
44932: PUSH
44933: LD_INT 35
44935: PUSH
44936: LD_INT 110
44938: PUSH
44939: LD_INT 70
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: LIST
44946: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44947: LD_VAR 0 6
44951: PPUSH
44952: CALL_OW 265
44956: PUSH
44957: LD_INT 25
44959: EQUAL
44960: IFFALSE 44981
// points := [ 80 , 65 , 100 ] ;
44962: LD_ADDR_VAR 0 9
44966: PUSH
44967: LD_INT 80
44969: PUSH
44970: LD_INT 65
44972: PUSH
44973: LD_INT 100
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: LIST
44980: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44981: LD_VAR 0 6
44985: PPUSH
44986: CALL_OW 263
44990: PUSH
44991: LD_INT 1
44993: EQUAL
44994: IFFALSE 45029
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44996: LD_ADDR_VAR 0 10
45000: PUSH
45001: LD_VAR 0 10
45005: PUSH
45006: LD_VAR 0 6
45010: PPUSH
45011: CALL_OW 311
45015: PPUSH
45016: LD_INT 3
45018: PPUSH
45019: CALL_OW 259
45023: PUSH
45024: LD_INT 4
45026: MUL
45027: MUL
45028: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45029: LD_VAR 0 6
45033: PPUSH
45034: CALL_OW 263
45038: PUSH
45039: LD_INT 2
45041: EQUAL
45042: IFFALSE 45093
// begin j := IsControledBy ( i ) ;
45044: LD_ADDR_VAR 0 7
45048: PUSH
45049: LD_VAR 0 6
45053: PPUSH
45054: CALL_OW 312
45058: ST_TO_ADDR
// if j then
45059: LD_VAR 0 7
45063: IFFALSE 45093
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45065: LD_ADDR_VAR 0 10
45069: PUSH
45070: LD_VAR 0 10
45074: PUSH
45075: LD_VAR 0 7
45079: PPUSH
45080: LD_INT 3
45082: PPUSH
45083: CALL_OW 259
45087: PUSH
45088: LD_INT 3
45090: MUL
45091: MUL
45092: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45093: LD_VAR 0 6
45097: PPUSH
45098: CALL_OW 264
45102: PUSH
45103: LD_INT 5
45105: PUSH
45106: LD_INT 6
45108: PUSH
45109: LD_INT 46
45111: PUSH
45112: LD_INT 44
45114: PUSH
45115: LD_INT 47
45117: PUSH
45118: LD_INT 45
45120: PUSH
45121: LD_INT 28
45123: PUSH
45124: LD_INT 7
45126: PUSH
45127: LD_INT 27
45129: PUSH
45130: LD_INT 29
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: IN
45145: PUSH
45146: LD_VAR 0 1
45150: PPUSH
45151: LD_INT 52
45153: PPUSH
45154: CALL_OW 321
45158: PUSH
45159: LD_INT 2
45161: EQUAL
45162: AND
45163: IFFALSE 45180
// bpoints := bpoints * 1.2 ;
45165: LD_ADDR_VAR 0 10
45169: PUSH
45170: LD_VAR 0 10
45174: PUSH
45175: LD_REAL  1.20000000000000E+0000
45178: MUL
45179: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45180: LD_VAR 0 6
45184: PPUSH
45185: CALL_OW 264
45189: PUSH
45190: LD_INT 6
45192: PUSH
45193: LD_INT 46
45195: PUSH
45196: LD_INT 47
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: LIST
45203: IN
45204: IFFALSE 45221
// bpoints := bpoints * 1.2 ;
45206: LD_ADDR_VAR 0 10
45210: PUSH
45211: LD_VAR 0 10
45215: PUSH
45216: LD_REAL  1.20000000000000E+0000
45219: MUL
45220: ST_TO_ADDR
// end ; unit_building :
45221: GO 45235
45223: LD_INT 3
45225: DOUBLE
45226: EQUAL
45227: IFTRUE 45231
45229: GO 45234
45231: POP
// ; end ;
45232: GO 45235
45234: POP
// for j = 1 to 3 do
45235: LD_ADDR_VAR 0 7
45239: PUSH
45240: DOUBLE
45241: LD_INT 1
45243: DEC
45244: ST_TO_ADDR
45245: LD_INT 3
45247: PUSH
45248: FOR_TO
45249: IFFALSE 45302
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45251: LD_ADDR_VAR 0 5
45255: PUSH
45256: LD_VAR 0 5
45260: PPUSH
45261: LD_VAR 0 7
45265: PPUSH
45266: LD_VAR 0 5
45270: PUSH
45271: LD_VAR 0 7
45275: ARRAY
45276: PUSH
45277: LD_VAR 0 9
45281: PUSH
45282: LD_VAR 0 7
45286: ARRAY
45287: PUSH
45288: LD_VAR 0 10
45292: MUL
45293: PLUS
45294: PPUSH
45295: CALL_OW 1
45299: ST_TO_ADDR
45300: GO 45248
45302: POP
45303: POP
// end ;
45304: GO 43781
45306: POP
45307: POP
// result := Replace ( result , 4 , tmp ) ;
45308: LD_ADDR_VAR 0 5
45312: PUSH
45313: LD_VAR 0 5
45317: PPUSH
45318: LD_INT 4
45320: PPUSH
45321: LD_VAR 0 8
45325: PPUSH
45326: CALL_OW 1
45330: ST_TO_ADDR
// end ;
45331: LD_VAR 0 5
45335: RET
// export function DangerAtRange ( unit , range ) ; begin
45336: LD_INT 0
45338: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45339: LD_ADDR_VAR 0 3
45343: PUSH
45344: LD_VAR 0 1
45348: PPUSH
45349: CALL_OW 255
45353: PPUSH
45354: LD_VAR 0 1
45358: PPUSH
45359: CALL_OW 250
45363: PPUSH
45364: LD_VAR 0 1
45368: PPUSH
45369: CALL_OW 251
45373: PPUSH
45374: LD_VAR 0 2
45378: PPUSH
45379: CALL 43633 0 4
45383: ST_TO_ADDR
// end ;
45384: LD_VAR 0 3
45388: RET
// export function DangerInArea ( side , area ) ; begin
45389: LD_INT 0
45391: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45392: LD_ADDR_VAR 0 3
45396: PUSH
45397: LD_VAR 0 2
45401: PPUSH
45402: LD_INT 81
45404: PUSH
45405: LD_VAR 0 1
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PPUSH
45414: CALL_OW 70
45418: ST_TO_ADDR
// end ;
45419: LD_VAR 0 3
45423: RET
// export function IsExtension ( b ) ; begin
45424: LD_INT 0
45426: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45427: LD_ADDR_VAR 0 2
45431: PUSH
45432: LD_VAR 0 1
45436: PUSH
45437: LD_INT 23
45439: PUSH
45440: LD_INT 20
45442: PUSH
45443: LD_INT 22
45445: PUSH
45446: LD_INT 17
45448: PUSH
45449: LD_INT 24
45451: PUSH
45452: LD_INT 21
45454: PUSH
45455: LD_INT 19
45457: PUSH
45458: LD_INT 16
45460: PUSH
45461: LD_INT 25
45463: PUSH
45464: LD_INT 18
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: IN
45479: ST_TO_ADDR
// end ;
45480: LD_VAR 0 2
45484: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45485: LD_INT 0
45487: PPUSH
45488: PPUSH
45489: PPUSH
// result := [ ] ;
45490: LD_ADDR_VAR 0 4
45494: PUSH
45495: EMPTY
45496: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45497: LD_ADDR_VAR 0 5
45501: PUSH
45502: LD_VAR 0 2
45506: PPUSH
45507: LD_INT 21
45509: PUSH
45510: LD_INT 3
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PPUSH
45517: CALL_OW 70
45521: ST_TO_ADDR
// if not tmp then
45522: LD_VAR 0 5
45526: NOT
45527: IFFALSE 45531
// exit ;
45529: GO 45595
// if checkLink then
45531: LD_VAR 0 3
45535: IFFALSE 45585
// begin for i in tmp do
45537: LD_ADDR_VAR 0 6
45541: PUSH
45542: LD_VAR 0 5
45546: PUSH
45547: FOR_IN
45548: IFFALSE 45583
// if GetBase ( i ) <> base then
45550: LD_VAR 0 6
45554: PPUSH
45555: CALL_OW 274
45559: PUSH
45560: LD_VAR 0 1
45564: NONEQUAL
45565: IFFALSE 45581
// ComLinkToBase ( base , i ) ;
45567: LD_VAR 0 1
45571: PPUSH
45572: LD_VAR 0 6
45576: PPUSH
45577: CALL_OW 169
45581: GO 45547
45583: POP
45584: POP
// end ; result := tmp ;
45585: LD_ADDR_VAR 0 4
45589: PUSH
45590: LD_VAR 0 5
45594: ST_TO_ADDR
// end ;
45595: LD_VAR 0 4
45599: RET
// export function ComComplete ( units , b ) ; var i ; begin
45600: LD_INT 0
45602: PPUSH
45603: PPUSH
// if not units then
45604: LD_VAR 0 1
45608: NOT
45609: IFFALSE 45613
// exit ;
45611: GO 45703
// for i in units do
45613: LD_ADDR_VAR 0 4
45617: PUSH
45618: LD_VAR 0 1
45622: PUSH
45623: FOR_IN
45624: IFFALSE 45701
// if BuildingStatus ( b ) = bs_build then
45626: LD_VAR 0 2
45630: PPUSH
45631: CALL_OW 461
45635: PUSH
45636: LD_INT 1
45638: EQUAL
45639: IFFALSE 45699
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45641: LD_VAR 0 4
45645: PPUSH
45646: LD_STRING h
45648: PUSH
45649: LD_VAR 0 2
45653: PPUSH
45654: CALL_OW 250
45658: PUSH
45659: LD_VAR 0 2
45663: PPUSH
45664: CALL_OW 251
45668: PUSH
45669: LD_VAR 0 2
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: PUSH
45692: EMPTY
45693: LIST
45694: PPUSH
45695: CALL_OW 446
45699: GO 45623
45701: POP
45702: POP
// end ;
45703: LD_VAR 0 3
45707: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45708: LD_INT 0
45710: PPUSH
45711: PPUSH
45712: PPUSH
45713: PPUSH
45714: PPUSH
45715: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45716: LD_VAR 0 1
45720: NOT
45721: PUSH
45722: LD_VAR 0 1
45726: PPUSH
45727: CALL_OW 263
45731: PUSH
45732: LD_INT 2
45734: NONEQUAL
45735: OR
45736: IFFALSE 45740
// exit ;
45738: GO 46056
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45740: LD_ADDR_VAR 0 6
45744: PUSH
45745: LD_INT 22
45747: PUSH
45748: LD_VAR 0 1
45752: PPUSH
45753: CALL_OW 255
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 2
45764: PUSH
45765: LD_INT 30
45767: PUSH
45768: LD_INT 36
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 34
45777: PUSH
45778: LD_INT 31
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: LIST
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PPUSH
45794: CALL_OW 69
45798: ST_TO_ADDR
// if not tmp then
45799: LD_VAR 0 6
45803: NOT
45804: IFFALSE 45808
// exit ;
45806: GO 46056
// result := [ ] ;
45808: LD_ADDR_VAR 0 2
45812: PUSH
45813: EMPTY
45814: ST_TO_ADDR
// for i in tmp do
45815: LD_ADDR_VAR 0 3
45819: PUSH
45820: LD_VAR 0 6
45824: PUSH
45825: FOR_IN
45826: IFFALSE 45897
// begin t := UnitsInside ( i ) ;
45828: LD_ADDR_VAR 0 4
45832: PUSH
45833: LD_VAR 0 3
45837: PPUSH
45838: CALL_OW 313
45842: ST_TO_ADDR
// if t then
45843: LD_VAR 0 4
45847: IFFALSE 45895
// for j in t do
45849: LD_ADDR_VAR 0 7
45853: PUSH
45854: LD_VAR 0 4
45858: PUSH
45859: FOR_IN
45860: IFFALSE 45893
// result := Replace ( result , result + 1 , j ) ;
45862: LD_ADDR_VAR 0 2
45866: PUSH
45867: LD_VAR 0 2
45871: PPUSH
45872: LD_VAR 0 2
45876: PUSH
45877: LD_INT 1
45879: PLUS
45880: PPUSH
45881: LD_VAR 0 7
45885: PPUSH
45886: CALL_OW 1
45890: ST_TO_ADDR
45891: GO 45859
45893: POP
45894: POP
// end ;
45895: GO 45825
45897: POP
45898: POP
// if not result then
45899: LD_VAR 0 2
45903: NOT
45904: IFFALSE 45908
// exit ;
45906: GO 46056
// mech := result [ 1 ] ;
45908: LD_ADDR_VAR 0 5
45912: PUSH
45913: LD_VAR 0 2
45917: PUSH
45918: LD_INT 1
45920: ARRAY
45921: ST_TO_ADDR
// if result > 1 then
45922: LD_VAR 0 2
45926: PUSH
45927: LD_INT 1
45929: GREATER
45930: IFFALSE 46042
// begin for i = 2 to result do
45932: LD_ADDR_VAR 0 3
45936: PUSH
45937: DOUBLE
45938: LD_INT 2
45940: DEC
45941: ST_TO_ADDR
45942: LD_VAR 0 2
45946: PUSH
45947: FOR_TO
45948: IFFALSE 46040
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45950: LD_ADDR_VAR 0 4
45954: PUSH
45955: LD_VAR 0 2
45959: PUSH
45960: LD_VAR 0 3
45964: ARRAY
45965: PPUSH
45966: LD_INT 3
45968: PPUSH
45969: CALL_OW 259
45973: PUSH
45974: LD_VAR 0 2
45978: PUSH
45979: LD_VAR 0 3
45983: ARRAY
45984: PPUSH
45985: CALL_OW 432
45989: MINUS
45990: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45991: LD_VAR 0 4
45995: PUSH
45996: LD_VAR 0 5
46000: PPUSH
46001: LD_INT 3
46003: PPUSH
46004: CALL_OW 259
46008: PUSH
46009: LD_VAR 0 5
46013: PPUSH
46014: CALL_OW 432
46018: MINUS
46019: GREATEREQUAL
46020: IFFALSE 46038
// mech := result [ i ] ;
46022: LD_ADDR_VAR 0 5
46026: PUSH
46027: LD_VAR 0 2
46031: PUSH
46032: LD_VAR 0 3
46036: ARRAY
46037: ST_TO_ADDR
// end ;
46038: GO 45947
46040: POP
46041: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46042: LD_VAR 0 1
46046: PPUSH
46047: LD_VAR 0 5
46051: PPUSH
46052: CALL_OW 135
// end ;
46056: LD_VAR 0 2
46060: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46061: LD_INT 0
46063: PPUSH
46064: PPUSH
46065: PPUSH
46066: PPUSH
46067: PPUSH
46068: PPUSH
46069: PPUSH
46070: PPUSH
46071: PPUSH
46072: PPUSH
46073: PPUSH
46074: PPUSH
46075: PPUSH
// result := [ ] ;
46076: LD_ADDR_VAR 0 7
46080: PUSH
46081: EMPTY
46082: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46083: LD_VAR 0 1
46087: PPUSH
46088: CALL_OW 266
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: IN
46103: NOT
46104: IFFALSE 46108
// exit ;
46106: GO 47742
// if name then
46108: LD_VAR 0 3
46112: IFFALSE 46128
// SetBName ( base_dep , name ) ;
46114: LD_VAR 0 1
46118: PPUSH
46119: LD_VAR 0 3
46123: PPUSH
46124: CALL_OW 500
// base := GetBase ( base_dep ) ;
46128: LD_ADDR_VAR 0 15
46132: PUSH
46133: LD_VAR 0 1
46137: PPUSH
46138: CALL_OW 274
46142: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46143: LD_ADDR_VAR 0 16
46147: PUSH
46148: LD_VAR 0 1
46152: PPUSH
46153: CALL_OW 255
46157: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46158: LD_ADDR_VAR 0 17
46162: PUSH
46163: LD_VAR 0 1
46167: PPUSH
46168: CALL_OW 248
46172: ST_TO_ADDR
// if sources then
46173: LD_VAR 0 5
46177: IFFALSE 46224
// for i = 1 to 3 do
46179: LD_ADDR_VAR 0 8
46183: PUSH
46184: DOUBLE
46185: LD_INT 1
46187: DEC
46188: ST_TO_ADDR
46189: LD_INT 3
46191: PUSH
46192: FOR_TO
46193: IFFALSE 46222
// AddResourceType ( base , i , sources [ i ] ) ;
46195: LD_VAR 0 15
46199: PPUSH
46200: LD_VAR 0 8
46204: PPUSH
46205: LD_VAR 0 5
46209: PUSH
46210: LD_VAR 0 8
46214: ARRAY
46215: PPUSH
46216: CALL_OW 276
46220: GO 46192
46222: POP
46223: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46224: LD_ADDR_VAR 0 18
46228: PUSH
46229: LD_VAR 0 15
46233: PPUSH
46234: LD_VAR 0 2
46238: PPUSH
46239: LD_INT 1
46241: PPUSH
46242: CALL 45485 0 3
46246: ST_TO_ADDR
// InitHc ;
46247: CALL_OW 19
// InitUc ;
46251: CALL_OW 18
// uc_side := side ;
46255: LD_ADDR_OWVAR 20
46259: PUSH
46260: LD_VAR 0 16
46264: ST_TO_ADDR
// uc_nation := nation ;
46265: LD_ADDR_OWVAR 21
46269: PUSH
46270: LD_VAR 0 17
46274: ST_TO_ADDR
// if buildings then
46275: LD_VAR 0 18
46279: IFFALSE 47601
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46281: LD_ADDR_VAR 0 19
46285: PUSH
46286: LD_VAR 0 18
46290: PPUSH
46291: LD_INT 2
46293: PUSH
46294: LD_INT 30
46296: PUSH
46297: LD_INT 29
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 30
46306: PUSH
46307: LD_INT 30
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: LIST
46318: PPUSH
46319: CALL_OW 72
46323: ST_TO_ADDR
// if tmp then
46324: LD_VAR 0 19
46328: IFFALSE 46376
// for i in tmp do
46330: LD_ADDR_VAR 0 8
46334: PUSH
46335: LD_VAR 0 19
46339: PUSH
46340: FOR_IN
46341: IFFALSE 46374
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46343: LD_VAR 0 8
46347: PPUSH
46348: CALL_OW 250
46352: PPUSH
46353: LD_VAR 0 8
46357: PPUSH
46358: CALL_OW 251
46362: PPUSH
46363: LD_VAR 0 16
46367: PPUSH
46368: CALL_OW 441
46372: GO 46340
46374: POP
46375: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46376: LD_VAR 0 18
46380: PPUSH
46381: LD_INT 2
46383: PUSH
46384: LD_INT 30
46386: PUSH
46387: LD_INT 32
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 30
46396: PUSH
46397: LD_INT 33
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: LIST
46408: PPUSH
46409: CALL_OW 72
46413: IFFALSE 46501
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46415: LD_ADDR_VAR 0 8
46419: PUSH
46420: LD_VAR 0 18
46424: PPUSH
46425: LD_INT 2
46427: PUSH
46428: LD_INT 30
46430: PUSH
46431: LD_INT 32
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 30
46440: PUSH
46441: LD_INT 33
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: LIST
46452: PPUSH
46453: CALL_OW 72
46457: PUSH
46458: FOR_IN
46459: IFFALSE 46499
// begin if not GetBWeapon ( i ) then
46461: LD_VAR 0 8
46465: PPUSH
46466: CALL_OW 269
46470: NOT
46471: IFFALSE 46497
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46473: LD_VAR 0 8
46477: PPUSH
46478: LD_VAR 0 8
46482: PPUSH
46483: LD_VAR 0 2
46487: PPUSH
46488: CALL 47747 0 2
46492: PPUSH
46493: CALL_OW 431
// end ;
46497: GO 46458
46499: POP
46500: POP
// end ; for i = 1 to personel do
46501: LD_ADDR_VAR 0 8
46505: PUSH
46506: DOUBLE
46507: LD_INT 1
46509: DEC
46510: ST_TO_ADDR
46511: LD_VAR 0 6
46515: PUSH
46516: FOR_TO
46517: IFFALSE 47581
// begin if i > 4 then
46519: LD_VAR 0 8
46523: PUSH
46524: LD_INT 4
46526: GREATER
46527: IFFALSE 46531
// break ;
46529: GO 47581
// case i of 1 :
46531: LD_VAR 0 8
46535: PUSH
46536: LD_INT 1
46538: DOUBLE
46539: EQUAL
46540: IFTRUE 46544
46542: GO 46624
46544: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46545: LD_ADDR_VAR 0 12
46549: PUSH
46550: LD_VAR 0 18
46554: PPUSH
46555: LD_INT 22
46557: PUSH
46558: LD_VAR 0 16
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 58
46569: PUSH
46570: EMPTY
46571: LIST
46572: PUSH
46573: LD_INT 2
46575: PUSH
46576: LD_INT 30
46578: PUSH
46579: LD_INT 32
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 30
46588: PUSH
46589: LD_INT 4
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 30
46598: PUSH
46599: LD_INT 5
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: LIST
46616: PPUSH
46617: CALL_OW 72
46621: ST_TO_ADDR
46622: GO 46846
46624: LD_INT 2
46626: DOUBLE
46627: EQUAL
46628: IFTRUE 46632
46630: GO 46694
46632: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46633: LD_ADDR_VAR 0 12
46637: PUSH
46638: LD_VAR 0 18
46642: PPUSH
46643: LD_INT 22
46645: PUSH
46646: LD_VAR 0 16
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 2
46657: PUSH
46658: LD_INT 30
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 30
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: LIST
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PPUSH
46687: CALL_OW 72
46691: ST_TO_ADDR
46692: GO 46846
46694: LD_INT 3
46696: DOUBLE
46697: EQUAL
46698: IFTRUE 46702
46700: GO 46764
46702: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46703: LD_ADDR_VAR 0 12
46707: PUSH
46708: LD_VAR 0 18
46712: PPUSH
46713: LD_INT 22
46715: PUSH
46716: LD_VAR 0 16
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 2
46727: PUSH
46728: LD_INT 30
46730: PUSH
46731: LD_INT 2
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 30
46740: PUSH
46741: LD_INT 3
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: LIST
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PPUSH
46757: CALL_OW 72
46761: ST_TO_ADDR
46762: GO 46846
46764: LD_INT 4
46766: DOUBLE
46767: EQUAL
46768: IFTRUE 46772
46770: GO 46845
46772: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46773: LD_ADDR_VAR 0 12
46777: PUSH
46778: LD_VAR 0 18
46782: PPUSH
46783: LD_INT 22
46785: PUSH
46786: LD_VAR 0 16
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: LD_INT 30
46800: PUSH
46801: LD_INT 6
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 30
46810: PUSH
46811: LD_INT 7
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 30
46820: PUSH
46821: LD_INT 8
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PPUSH
46838: CALL_OW 72
46842: ST_TO_ADDR
46843: GO 46846
46845: POP
// if i = 1 then
46846: LD_VAR 0 8
46850: PUSH
46851: LD_INT 1
46853: EQUAL
46854: IFFALSE 46965
// begin tmp := [ ] ;
46856: LD_ADDR_VAR 0 19
46860: PUSH
46861: EMPTY
46862: ST_TO_ADDR
// for j in f do
46863: LD_ADDR_VAR 0 9
46867: PUSH
46868: LD_VAR 0 12
46872: PUSH
46873: FOR_IN
46874: IFFALSE 46947
// if GetBType ( j ) = b_bunker then
46876: LD_VAR 0 9
46880: PPUSH
46881: CALL_OW 266
46885: PUSH
46886: LD_INT 32
46888: EQUAL
46889: IFFALSE 46916
// tmp := Insert ( tmp , 1 , j ) else
46891: LD_ADDR_VAR 0 19
46895: PUSH
46896: LD_VAR 0 19
46900: PPUSH
46901: LD_INT 1
46903: PPUSH
46904: LD_VAR 0 9
46908: PPUSH
46909: CALL_OW 2
46913: ST_TO_ADDR
46914: GO 46945
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46916: LD_ADDR_VAR 0 19
46920: PUSH
46921: LD_VAR 0 19
46925: PPUSH
46926: LD_VAR 0 19
46930: PUSH
46931: LD_INT 1
46933: PLUS
46934: PPUSH
46935: LD_VAR 0 9
46939: PPUSH
46940: CALL_OW 2
46944: ST_TO_ADDR
46945: GO 46873
46947: POP
46948: POP
// if tmp then
46949: LD_VAR 0 19
46953: IFFALSE 46965
// f := tmp ;
46955: LD_ADDR_VAR 0 12
46959: PUSH
46960: LD_VAR 0 19
46964: ST_TO_ADDR
// end ; x := personel [ i ] ;
46965: LD_ADDR_VAR 0 13
46969: PUSH
46970: LD_VAR 0 6
46974: PUSH
46975: LD_VAR 0 8
46979: ARRAY
46980: ST_TO_ADDR
// if x = - 1 then
46981: LD_VAR 0 13
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: EQUAL
46990: IFFALSE 47199
// begin for j in f do
46992: LD_ADDR_VAR 0 9
46996: PUSH
46997: LD_VAR 0 12
47001: PUSH
47002: FOR_IN
47003: IFFALSE 47195
// repeat InitHc ;
47005: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47009: LD_VAR 0 9
47013: PPUSH
47014: CALL_OW 266
47018: PUSH
47019: LD_INT 5
47021: EQUAL
47022: IFFALSE 47092
// begin if UnitsInside ( j ) < 3 then
47024: LD_VAR 0 9
47028: PPUSH
47029: CALL_OW 313
47033: PUSH
47034: LD_INT 3
47036: LESS
47037: IFFALSE 47073
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47039: LD_INT 0
47041: PPUSH
47042: LD_INT 5
47044: PUSH
47045: LD_INT 8
47047: PUSH
47048: LD_INT 9
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: LIST
47055: PUSH
47056: LD_VAR 0 17
47060: ARRAY
47061: PPUSH
47062: LD_VAR 0 4
47066: PPUSH
47067: CALL_OW 380
47071: GO 47090
// PrepareHuman ( false , i , skill ) ;
47073: LD_INT 0
47075: PPUSH
47076: LD_VAR 0 8
47080: PPUSH
47081: LD_VAR 0 4
47085: PPUSH
47086: CALL_OW 380
// end else
47090: GO 47109
// PrepareHuman ( false , i , skill ) ;
47092: LD_INT 0
47094: PPUSH
47095: LD_VAR 0 8
47099: PPUSH
47100: LD_VAR 0 4
47104: PPUSH
47105: CALL_OW 380
// un := CreateHuman ;
47109: LD_ADDR_VAR 0 14
47113: PUSH
47114: CALL_OW 44
47118: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47119: LD_ADDR_VAR 0 7
47123: PUSH
47124: LD_VAR 0 7
47128: PPUSH
47129: LD_INT 1
47131: PPUSH
47132: LD_VAR 0 14
47136: PPUSH
47137: CALL_OW 2
47141: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47142: LD_VAR 0 14
47146: PPUSH
47147: LD_VAR 0 9
47151: PPUSH
47152: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47156: LD_VAR 0 9
47160: PPUSH
47161: CALL_OW 313
47165: PUSH
47166: LD_INT 6
47168: EQUAL
47169: PUSH
47170: LD_VAR 0 9
47174: PPUSH
47175: CALL_OW 266
47179: PUSH
47180: LD_INT 32
47182: PUSH
47183: LD_INT 31
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: IN
47190: OR
47191: IFFALSE 47005
47193: GO 47002
47195: POP
47196: POP
// end else
47197: GO 47579
// for j = 1 to x do
47199: LD_ADDR_VAR 0 9
47203: PUSH
47204: DOUBLE
47205: LD_INT 1
47207: DEC
47208: ST_TO_ADDR
47209: LD_VAR 0 13
47213: PUSH
47214: FOR_TO
47215: IFFALSE 47577
// begin InitHc ;
47217: CALL_OW 19
// if not f then
47221: LD_VAR 0 12
47225: NOT
47226: IFFALSE 47315
// begin PrepareHuman ( false , i , skill ) ;
47228: LD_INT 0
47230: PPUSH
47231: LD_VAR 0 8
47235: PPUSH
47236: LD_VAR 0 4
47240: PPUSH
47241: CALL_OW 380
// un := CreateHuman ;
47245: LD_ADDR_VAR 0 14
47249: PUSH
47250: CALL_OW 44
47254: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47255: LD_ADDR_VAR 0 7
47259: PUSH
47260: LD_VAR 0 7
47264: PPUSH
47265: LD_INT 1
47267: PPUSH
47268: LD_VAR 0 14
47272: PPUSH
47273: CALL_OW 2
47277: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47278: LD_VAR 0 14
47282: PPUSH
47283: LD_VAR 0 1
47287: PPUSH
47288: CALL_OW 250
47292: PPUSH
47293: LD_VAR 0 1
47297: PPUSH
47298: CALL_OW 251
47302: PPUSH
47303: LD_INT 10
47305: PPUSH
47306: LD_INT 0
47308: PPUSH
47309: CALL_OW 50
// continue ;
47313: GO 47214
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47315: LD_VAR 0 12
47319: PUSH
47320: LD_INT 1
47322: ARRAY
47323: PPUSH
47324: CALL_OW 313
47328: PUSH
47329: LD_VAR 0 12
47333: PUSH
47334: LD_INT 1
47336: ARRAY
47337: PPUSH
47338: CALL_OW 266
47342: PUSH
47343: LD_INT 32
47345: PUSH
47346: LD_INT 31
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: IN
47353: AND
47354: PUSH
47355: LD_VAR 0 12
47359: PUSH
47360: LD_INT 1
47362: ARRAY
47363: PPUSH
47364: CALL_OW 313
47368: PUSH
47369: LD_INT 6
47371: EQUAL
47372: OR
47373: IFFALSE 47393
// f := Delete ( f , 1 ) ;
47375: LD_ADDR_VAR 0 12
47379: PUSH
47380: LD_VAR 0 12
47384: PPUSH
47385: LD_INT 1
47387: PPUSH
47388: CALL_OW 3
47392: ST_TO_ADDR
// if not f then
47393: LD_VAR 0 12
47397: NOT
47398: IFFALSE 47416
// begin x := x + 2 ;
47400: LD_ADDR_VAR 0 13
47404: PUSH
47405: LD_VAR 0 13
47409: PUSH
47410: LD_INT 2
47412: PLUS
47413: ST_TO_ADDR
// continue ;
47414: GO 47214
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47416: LD_VAR 0 12
47420: PUSH
47421: LD_INT 1
47423: ARRAY
47424: PPUSH
47425: CALL_OW 266
47429: PUSH
47430: LD_INT 5
47432: EQUAL
47433: IFFALSE 47507
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47435: LD_VAR 0 12
47439: PUSH
47440: LD_INT 1
47442: ARRAY
47443: PPUSH
47444: CALL_OW 313
47448: PUSH
47449: LD_INT 3
47451: LESS
47452: IFFALSE 47488
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47454: LD_INT 0
47456: PPUSH
47457: LD_INT 5
47459: PUSH
47460: LD_INT 8
47462: PUSH
47463: LD_INT 9
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: LIST
47470: PUSH
47471: LD_VAR 0 17
47475: ARRAY
47476: PPUSH
47477: LD_VAR 0 4
47481: PPUSH
47482: CALL_OW 380
47486: GO 47505
// PrepareHuman ( false , i , skill ) ;
47488: LD_INT 0
47490: PPUSH
47491: LD_VAR 0 8
47495: PPUSH
47496: LD_VAR 0 4
47500: PPUSH
47501: CALL_OW 380
// end else
47505: GO 47524
// PrepareHuman ( false , i , skill ) ;
47507: LD_INT 0
47509: PPUSH
47510: LD_VAR 0 8
47514: PPUSH
47515: LD_VAR 0 4
47519: PPUSH
47520: CALL_OW 380
// un := CreateHuman ;
47524: LD_ADDR_VAR 0 14
47528: PUSH
47529: CALL_OW 44
47533: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47534: LD_ADDR_VAR 0 7
47538: PUSH
47539: LD_VAR 0 7
47543: PPUSH
47544: LD_INT 1
47546: PPUSH
47547: LD_VAR 0 14
47551: PPUSH
47552: CALL_OW 2
47556: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47557: LD_VAR 0 14
47561: PPUSH
47562: LD_VAR 0 12
47566: PUSH
47567: LD_INT 1
47569: ARRAY
47570: PPUSH
47571: CALL_OW 52
// end ;
47575: GO 47214
47577: POP
47578: POP
// end ;
47579: GO 46516
47581: POP
47582: POP
// result := result ^ buildings ;
47583: LD_ADDR_VAR 0 7
47587: PUSH
47588: LD_VAR 0 7
47592: PUSH
47593: LD_VAR 0 18
47597: ADD
47598: ST_TO_ADDR
// end else
47599: GO 47742
// begin for i = 1 to personel do
47601: LD_ADDR_VAR 0 8
47605: PUSH
47606: DOUBLE
47607: LD_INT 1
47609: DEC
47610: ST_TO_ADDR
47611: LD_VAR 0 6
47615: PUSH
47616: FOR_TO
47617: IFFALSE 47740
// begin if i > 4 then
47619: LD_VAR 0 8
47623: PUSH
47624: LD_INT 4
47626: GREATER
47627: IFFALSE 47631
// break ;
47629: GO 47740
// x := personel [ i ] ;
47631: LD_ADDR_VAR 0 13
47635: PUSH
47636: LD_VAR 0 6
47640: PUSH
47641: LD_VAR 0 8
47645: ARRAY
47646: ST_TO_ADDR
// if x = - 1 then
47647: LD_VAR 0 13
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: EQUAL
47656: IFFALSE 47660
// continue ;
47658: GO 47616
// PrepareHuman ( false , i , skill ) ;
47660: LD_INT 0
47662: PPUSH
47663: LD_VAR 0 8
47667: PPUSH
47668: LD_VAR 0 4
47672: PPUSH
47673: CALL_OW 380
// un := CreateHuman ;
47677: LD_ADDR_VAR 0 14
47681: PUSH
47682: CALL_OW 44
47686: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47687: LD_VAR 0 14
47691: PPUSH
47692: LD_VAR 0 1
47696: PPUSH
47697: CALL_OW 250
47701: PPUSH
47702: LD_VAR 0 1
47706: PPUSH
47707: CALL_OW 251
47711: PPUSH
47712: LD_INT 10
47714: PPUSH
47715: LD_INT 0
47717: PPUSH
47718: CALL_OW 50
// result := result ^ un ;
47722: LD_ADDR_VAR 0 7
47726: PUSH
47727: LD_VAR 0 7
47731: PUSH
47732: LD_VAR 0 14
47736: ADD
47737: ST_TO_ADDR
// end ;
47738: GO 47616
47740: POP
47741: POP
// end ; end ;
47742: LD_VAR 0 7
47746: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47747: LD_INT 0
47749: PPUSH
47750: PPUSH
47751: PPUSH
47752: PPUSH
47753: PPUSH
47754: PPUSH
47755: PPUSH
47756: PPUSH
47757: PPUSH
47758: PPUSH
47759: PPUSH
47760: PPUSH
47761: PPUSH
47762: PPUSH
47763: PPUSH
47764: PPUSH
// result := false ;
47765: LD_ADDR_VAR 0 3
47769: PUSH
47770: LD_INT 0
47772: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47773: LD_VAR 0 1
47777: NOT
47778: PUSH
47779: LD_VAR 0 1
47783: PPUSH
47784: CALL_OW 266
47788: PUSH
47789: LD_INT 32
47791: PUSH
47792: LD_INT 33
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: IN
47799: NOT
47800: OR
47801: IFFALSE 47805
// exit ;
47803: GO 48914
// nat := GetNation ( tower ) ;
47805: LD_ADDR_VAR 0 12
47809: PUSH
47810: LD_VAR 0 1
47814: PPUSH
47815: CALL_OW 248
47819: ST_TO_ADDR
// side := GetSide ( tower ) ;
47820: LD_ADDR_VAR 0 16
47824: PUSH
47825: LD_VAR 0 1
47829: PPUSH
47830: CALL_OW 255
47834: ST_TO_ADDR
// x := GetX ( tower ) ;
47835: LD_ADDR_VAR 0 10
47839: PUSH
47840: LD_VAR 0 1
47844: PPUSH
47845: CALL_OW 250
47849: ST_TO_ADDR
// y := GetY ( tower ) ;
47850: LD_ADDR_VAR 0 11
47854: PUSH
47855: LD_VAR 0 1
47859: PPUSH
47860: CALL_OW 251
47864: ST_TO_ADDR
// if not x or not y then
47865: LD_VAR 0 10
47869: NOT
47870: PUSH
47871: LD_VAR 0 11
47875: NOT
47876: OR
47877: IFFALSE 47881
// exit ;
47879: GO 48914
// weapon := 0 ;
47881: LD_ADDR_VAR 0 18
47885: PUSH
47886: LD_INT 0
47888: ST_TO_ADDR
// fac_list := [ ] ;
47889: LD_ADDR_VAR 0 17
47893: PUSH
47894: EMPTY
47895: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47896: LD_ADDR_VAR 0 6
47900: PUSH
47901: LD_VAR 0 1
47905: PPUSH
47906: CALL_OW 274
47910: PPUSH
47911: LD_VAR 0 2
47915: PPUSH
47916: LD_INT 0
47918: PPUSH
47919: CALL 45485 0 3
47923: PPUSH
47924: LD_INT 30
47926: PUSH
47927: LD_INT 3
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PPUSH
47934: CALL_OW 72
47938: ST_TO_ADDR
// if not factories then
47939: LD_VAR 0 6
47943: NOT
47944: IFFALSE 47948
// exit ;
47946: GO 48914
// for i in factories do
47948: LD_ADDR_VAR 0 8
47952: PUSH
47953: LD_VAR 0 6
47957: PUSH
47958: FOR_IN
47959: IFFALSE 47984
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47961: LD_ADDR_VAR 0 17
47965: PUSH
47966: LD_VAR 0 17
47970: PUSH
47971: LD_VAR 0 8
47975: PPUSH
47976: CALL_OW 478
47980: UNION
47981: ST_TO_ADDR
47982: GO 47958
47984: POP
47985: POP
// if not fac_list then
47986: LD_VAR 0 17
47990: NOT
47991: IFFALSE 47995
// exit ;
47993: GO 48914
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47995: LD_ADDR_VAR 0 5
47999: PUSH
48000: LD_INT 4
48002: PUSH
48003: LD_INT 5
48005: PUSH
48006: LD_INT 9
48008: PUSH
48009: LD_INT 10
48011: PUSH
48012: LD_INT 6
48014: PUSH
48015: LD_INT 7
48017: PUSH
48018: LD_INT 11
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 27
48032: PUSH
48033: LD_INT 28
48035: PUSH
48036: LD_INT 26
48038: PUSH
48039: LD_INT 30
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 43
48050: PUSH
48051: LD_INT 44
48053: PUSH
48054: LD_INT 46
48056: PUSH
48057: LD_INT 45
48059: PUSH
48060: LD_INT 47
48062: PUSH
48063: LD_INT 49
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: LIST
48078: PUSH
48079: LD_VAR 0 12
48083: ARRAY
48084: ST_TO_ADDR
// list := list isect fac_list ;
48085: LD_ADDR_VAR 0 5
48089: PUSH
48090: LD_VAR 0 5
48094: PUSH
48095: LD_VAR 0 17
48099: ISECT
48100: ST_TO_ADDR
// if not list then
48101: LD_VAR 0 5
48105: NOT
48106: IFFALSE 48110
// exit ;
48108: GO 48914
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48110: LD_VAR 0 12
48114: PUSH
48115: LD_INT 3
48117: EQUAL
48118: PUSH
48119: LD_INT 49
48121: PUSH
48122: LD_VAR 0 5
48126: IN
48127: AND
48128: PUSH
48129: LD_INT 31
48131: PPUSH
48132: LD_VAR 0 16
48136: PPUSH
48137: CALL_OW 321
48141: PUSH
48142: LD_INT 2
48144: EQUAL
48145: AND
48146: IFFALSE 48206
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48148: LD_INT 22
48150: PUSH
48151: LD_VAR 0 16
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 35
48162: PUSH
48163: LD_INT 49
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 91
48172: PUSH
48173: LD_VAR 0 1
48177: PUSH
48178: LD_INT 10
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: LIST
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: LIST
48190: PPUSH
48191: CALL_OW 69
48195: NOT
48196: IFFALSE 48206
// weapon := ru_time_lapser ;
48198: LD_ADDR_VAR 0 18
48202: PUSH
48203: LD_INT 49
48205: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48206: LD_VAR 0 12
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: LD_INT 2
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: IN
48221: PUSH
48222: LD_INT 11
48224: PUSH
48225: LD_VAR 0 5
48229: IN
48230: PUSH
48231: LD_INT 30
48233: PUSH
48234: LD_VAR 0 5
48238: IN
48239: OR
48240: AND
48241: PUSH
48242: LD_INT 6
48244: PPUSH
48245: LD_VAR 0 16
48249: PPUSH
48250: CALL_OW 321
48254: PUSH
48255: LD_INT 2
48257: EQUAL
48258: AND
48259: IFFALSE 48424
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48261: LD_INT 22
48263: PUSH
48264: LD_VAR 0 16
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 2
48275: PUSH
48276: LD_INT 35
48278: PUSH
48279: LD_INT 11
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 35
48288: PUSH
48289: LD_INT 30
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 91
48303: PUSH
48304: LD_VAR 0 1
48308: PUSH
48309: LD_INT 18
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: LIST
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: PPUSH
48322: CALL_OW 69
48326: NOT
48327: PUSH
48328: LD_INT 22
48330: PUSH
48331: LD_VAR 0 16
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: LD_INT 30
48345: PUSH
48346: LD_INT 32
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 30
48355: PUSH
48356: LD_INT 33
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 91
48370: PUSH
48371: LD_VAR 0 1
48375: PUSH
48376: LD_INT 12
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: LIST
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: LIST
48388: PUSH
48389: EMPTY
48390: LIST
48391: PPUSH
48392: CALL_OW 69
48396: PUSH
48397: LD_INT 2
48399: GREATER
48400: AND
48401: IFFALSE 48424
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48403: LD_ADDR_VAR 0 18
48407: PUSH
48408: LD_INT 11
48410: PUSH
48411: LD_INT 30
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_VAR 0 12
48422: ARRAY
48423: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48424: LD_VAR 0 18
48428: NOT
48429: PUSH
48430: LD_INT 40
48432: PPUSH
48433: LD_VAR 0 16
48437: PPUSH
48438: CALL_OW 321
48442: PUSH
48443: LD_INT 2
48445: EQUAL
48446: AND
48447: PUSH
48448: LD_INT 7
48450: PUSH
48451: LD_VAR 0 5
48455: IN
48456: PUSH
48457: LD_INT 28
48459: PUSH
48460: LD_VAR 0 5
48464: IN
48465: OR
48466: PUSH
48467: LD_INT 45
48469: PUSH
48470: LD_VAR 0 5
48474: IN
48475: OR
48476: AND
48477: IFFALSE 48731
// begin hex := GetHexInfo ( x , y ) ;
48479: LD_ADDR_VAR 0 4
48483: PUSH
48484: LD_VAR 0 10
48488: PPUSH
48489: LD_VAR 0 11
48493: PPUSH
48494: CALL_OW 546
48498: ST_TO_ADDR
// if hex [ 1 ] then
48499: LD_VAR 0 4
48503: PUSH
48504: LD_INT 1
48506: ARRAY
48507: IFFALSE 48511
// exit ;
48509: GO 48914
// height := hex [ 2 ] ;
48511: LD_ADDR_VAR 0 15
48515: PUSH
48516: LD_VAR 0 4
48520: PUSH
48521: LD_INT 2
48523: ARRAY
48524: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48525: LD_ADDR_VAR 0 14
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: LD_INT 3
48538: PUSH
48539: LD_INT 5
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: ST_TO_ADDR
// for i in tmp do
48548: LD_ADDR_VAR 0 8
48552: PUSH
48553: LD_VAR 0 14
48557: PUSH
48558: FOR_IN
48559: IFFALSE 48729
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48561: LD_ADDR_VAR 0 9
48565: PUSH
48566: LD_VAR 0 10
48570: PPUSH
48571: LD_VAR 0 8
48575: PPUSH
48576: LD_INT 5
48578: PPUSH
48579: CALL_OW 272
48583: PUSH
48584: LD_VAR 0 11
48588: PPUSH
48589: LD_VAR 0 8
48593: PPUSH
48594: LD_INT 5
48596: PPUSH
48597: CALL_OW 273
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48606: LD_VAR 0 9
48610: PUSH
48611: LD_INT 1
48613: ARRAY
48614: PPUSH
48615: LD_VAR 0 9
48619: PUSH
48620: LD_INT 2
48622: ARRAY
48623: PPUSH
48624: CALL_OW 488
48628: IFFALSE 48727
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48630: LD_ADDR_VAR 0 4
48634: PUSH
48635: LD_VAR 0 9
48639: PUSH
48640: LD_INT 1
48642: ARRAY
48643: PPUSH
48644: LD_VAR 0 9
48648: PUSH
48649: LD_INT 2
48651: ARRAY
48652: PPUSH
48653: CALL_OW 546
48657: ST_TO_ADDR
// if hex [ 1 ] then
48658: LD_VAR 0 4
48662: PUSH
48663: LD_INT 1
48665: ARRAY
48666: IFFALSE 48670
// continue ;
48668: GO 48558
// h := hex [ 2 ] ;
48670: LD_ADDR_VAR 0 13
48674: PUSH
48675: LD_VAR 0 4
48679: PUSH
48680: LD_INT 2
48682: ARRAY
48683: ST_TO_ADDR
// if h + 7 < height then
48684: LD_VAR 0 13
48688: PUSH
48689: LD_INT 7
48691: PLUS
48692: PUSH
48693: LD_VAR 0 15
48697: LESS
48698: IFFALSE 48727
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48700: LD_ADDR_VAR 0 18
48704: PUSH
48705: LD_INT 7
48707: PUSH
48708: LD_INT 28
48710: PUSH
48711: LD_INT 45
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: LIST
48718: PUSH
48719: LD_VAR 0 12
48723: ARRAY
48724: ST_TO_ADDR
// break ;
48725: GO 48729
// end ; end ; end ;
48727: GO 48558
48729: POP
48730: POP
// end ; if not weapon then
48731: LD_VAR 0 18
48735: NOT
48736: IFFALSE 48796
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48738: LD_ADDR_VAR 0 5
48742: PUSH
48743: LD_VAR 0 5
48747: PUSH
48748: LD_INT 11
48750: PUSH
48751: LD_INT 30
48753: PUSH
48754: LD_INT 49
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: LIST
48761: DIFF
48762: ST_TO_ADDR
// if not list then
48763: LD_VAR 0 5
48767: NOT
48768: IFFALSE 48772
// exit ;
48770: GO 48914
// weapon := list [ rand ( 1 , list ) ] ;
48772: LD_ADDR_VAR 0 18
48776: PUSH
48777: LD_VAR 0 5
48781: PUSH
48782: LD_INT 1
48784: PPUSH
48785: LD_VAR 0 5
48789: PPUSH
48790: CALL_OW 12
48794: ARRAY
48795: ST_TO_ADDR
// end ; if weapon then
48796: LD_VAR 0 18
48800: IFFALSE 48914
// begin tmp := CostOfWeapon ( weapon ) ;
48802: LD_ADDR_VAR 0 14
48806: PUSH
48807: LD_VAR 0 18
48811: PPUSH
48812: CALL_OW 451
48816: ST_TO_ADDR
// j := GetBase ( tower ) ;
48817: LD_ADDR_VAR 0 9
48821: PUSH
48822: LD_VAR 0 1
48826: PPUSH
48827: CALL_OW 274
48831: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48832: LD_VAR 0 9
48836: PPUSH
48837: LD_INT 1
48839: PPUSH
48840: CALL_OW 275
48844: PUSH
48845: LD_VAR 0 14
48849: PUSH
48850: LD_INT 1
48852: ARRAY
48853: GREATEREQUAL
48854: PUSH
48855: LD_VAR 0 9
48859: PPUSH
48860: LD_INT 2
48862: PPUSH
48863: CALL_OW 275
48867: PUSH
48868: LD_VAR 0 14
48872: PUSH
48873: LD_INT 2
48875: ARRAY
48876: GREATEREQUAL
48877: AND
48878: PUSH
48879: LD_VAR 0 9
48883: PPUSH
48884: LD_INT 3
48886: PPUSH
48887: CALL_OW 275
48891: PUSH
48892: LD_VAR 0 14
48896: PUSH
48897: LD_INT 3
48899: ARRAY
48900: GREATEREQUAL
48901: AND
48902: IFFALSE 48914
// result := weapon ;
48904: LD_ADDR_VAR 0 3
48908: PUSH
48909: LD_VAR 0 18
48913: ST_TO_ADDR
// end ; end ;
48914: LD_VAR 0 3
48918: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48919: LD_INT 0
48921: PPUSH
48922: PPUSH
// result := true ;
48923: LD_ADDR_VAR 0 3
48927: PUSH
48928: LD_INT 1
48930: ST_TO_ADDR
// if array1 = array2 then
48931: LD_VAR 0 1
48935: PUSH
48936: LD_VAR 0 2
48940: EQUAL
48941: IFFALSE 49001
// begin for i = 1 to array1 do
48943: LD_ADDR_VAR 0 4
48947: PUSH
48948: DOUBLE
48949: LD_INT 1
48951: DEC
48952: ST_TO_ADDR
48953: LD_VAR 0 1
48957: PUSH
48958: FOR_TO
48959: IFFALSE 48997
// if array1 [ i ] <> array2 [ i ] then
48961: LD_VAR 0 1
48965: PUSH
48966: LD_VAR 0 4
48970: ARRAY
48971: PUSH
48972: LD_VAR 0 2
48976: PUSH
48977: LD_VAR 0 4
48981: ARRAY
48982: NONEQUAL
48983: IFFALSE 48995
// begin result := false ;
48985: LD_ADDR_VAR 0 3
48989: PUSH
48990: LD_INT 0
48992: ST_TO_ADDR
// break ;
48993: GO 48997
// end ;
48995: GO 48958
48997: POP
48998: POP
// end else
48999: GO 49009
// result := false ;
49001: LD_ADDR_VAR 0 3
49005: PUSH
49006: LD_INT 0
49008: ST_TO_ADDR
// end ;
49009: LD_VAR 0 3
49013: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49014: LD_INT 0
49016: PPUSH
49017: PPUSH
// if not array1 or not array2 then
49018: LD_VAR 0 1
49022: NOT
49023: PUSH
49024: LD_VAR 0 2
49028: NOT
49029: OR
49030: IFFALSE 49034
// exit ;
49032: GO 49098
// result := true ;
49034: LD_ADDR_VAR 0 3
49038: PUSH
49039: LD_INT 1
49041: ST_TO_ADDR
// for i = 1 to array1 do
49042: LD_ADDR_VAR 0 4
49046: PUSH
49047: DOUBLE
49048: LD_INT 1
49050: DEC
49051: ST_TO_ADDR
49052: LD_VAR 0 1
49056: PUSH
49057: FOR_TO
49058: IFFALSE 49096
// if array1 [ i ] <> array2 [ i ] then
49060: LD_VAR 0 1
49064: PUSH
49065: LD_VAR 0 4
49069: ARRAY
49070: PUSH
49071: LD_VAR 0 2
49075: PUSH
49076: LD_VAR 0 4
49080: ARRAY
49081: NONEQUAL
49082: IFFALSE 49094
// begin result := false ;
49084: LD_ADDR_VAR 0 3
49088: PUSH
49089: LD_INT 0
49091: ST_TO_ADDR
// break ;
49092: GO 49096
// end ;
49094: GO 49057
49096: POP
49097: POP
// end ;
49098: LD_VAR 0 3
49102: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49103: LD_INT 0
49105: PPUSH
49106: PPUSH
49107: PPUSH
// pom := GetBase ( fac ) ;
49108: LD_ADDR_VAR 0 5
49112: PUSH
49113: LD_VAR 0 1
49117: PPUSH
49118: CALL_OW 274
49122: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49123: LD_ADDR_VAR 0 4
49127: PUSH
49128: LD_VAR 0 2
49132: PUSH
49133: LD_INT 1
49135: ARRAY
49136: PPUSH
49137: LD_VAR 0 2
49141: PUSH
49142: LD_INT 2
49144: ARRAY
49145: PPUSH
49146: LD_VAR 0 2
49150: PUSH
49151: LD_INT 3
49153: ARRAY
49154: PPUSH
49155: LD_VAR 0 2
49159: PUSH
49160: LD_INT 4
49162: ARRAY
49163: PPUSH
49164: CALL_OW 449
49168: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49169: LD_ADDR_VAR 0 3
49173: PUSH
49174: LD_VAR 0 5
49178: PPUSH
49179: LD_INT 1
49181: PPUSH
49182: CALL_OW 275
49186: PUSH
49187: LD_VAR 0 4
49191: PUSH
49192: LD_INT 1
49194: ARRAY
49195: GREATEREQUAL
49196: PUSH
49197: LD_VAR 0 5
49201: PPUSH
49202: LD_INT 2
49204: PPUSH
49205: CALL_OW 275
49209: PUSH
49210: LD_VAR 0 4
49214: PUSH
49215: LD_INT 2
49217: ARRAY
49218: GREATEREQUAL
49219: AND
49220: PUSH
49221: LD_VAR 0 5
49225: PPUSH
49226: LD_INT 3
49228: PPUSH
49229: CALL_OW 275
49233: PUSH
49234: LD_VAR 0 4
49238: PUSH
49239: LD_INT 3
49241: ARRAY
49242: GREATEREQUAL
49243: AND
49244: ST_TO_ADDR
// end ;
49245: LD_VAR 0 3
49249: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49250: LD_INT 0
49252: PPUSH
49253: PPUSH
49254: PPUSH
49255: PPUSH
// pom := GetBase ( building ) ;
49256: LD_ADDR_VAR 0 3
49260: PUSH
49261: LD_VAR 0 1
49265: PPUSH
49266: CALL_OW 274
49270: ST_TO_ADDR
// if not pom then
49271: LD_VAR 0 3
49275: NOT
49276: IFFALSE 49280
// exit ;
49278: GO 49450
// btype := GetBType ( building ) ;
49280: LD_ADDR_VAR 0 5
49284: PUSH
49285: LD_VAR 0 1
49289: PPUSH
49290: CALL_OW 266
49294: ST_TO_ADDR
// if btype = b_armoury then
49295: LD_VAR 0 5
49299: PUSH
49300: LD_INT 4
49302: EQUAL
49303: IFFALSE 49313
// btype := b_barracks ;
49305: LD_ADDR_VAR 0 5
49309: PUSH
49310: LD_INT 5
49312: ST_TO_ADDR
// if btype = b_depot then
49313: LD_VAR 0 5
49317: PUSH
49318: LD_INT 0
49320: EQUAL
49321: IFFALSE 49331
// btype := b_warehouse ;
49323: LD_ADDR_VAR 0 5
49327: PUSH
49328: LD_INT 1
49330: ST_TO_ADDR
// if btype = b_workshop then
49331: LD_VAR 0 5
49335: PUSH
49336: LD_INT 2
49338: EQUAL
49339: IFFALSE 49349
// btype := b_factory ;
49341: LD_ADDR_VAR 0 5
49345: PUSH
49346: LD_INT 3
49348: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49349: LD_ADDR_VAR 0 4
49353: PUSH
49354: LD_VAR 0 5
49358: PPUSH
49359: LD_VAR 0 1
49363: PPUSH
49364: CALL_OW 248
49368: PPUSH
49369: CALL_OW 450
49373: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49374: LD_ADDR_VAR 0 2
49378: PUSH
49379: LD_VAR 0 3
49383: PPUSH
49384: LD_INT 1
49386: PPUSH
49387: CALL_OW 275
49391: PUSH
49392: LD_VAR 0 4
49396: PUSH
49397: LD_INT 1
49399: ARRAY
49400: GREATEREQUAL
49401: PUSH
49402: LD_VAR 0 3
49406: PPUSH
49407: LD_INT 2
49409: PPUSH
49410: CALL_OW 275
49414: PUSH
49415: LD_VAR 0 4
49419: PUSH
49420: LD_INT 2
49422: ARRAY
49423: GREATEREQUAL
49424: AND
49425: PUSH
49426: LD_VAR 0 3
49430: PPUSH
49431: LD_INT 3
49433: PPUSH
49434: CALL_OW 275
49438: PUSH
49439: LD_VAR 0 4
49443: PUSH
49444: LD_INT 3
49446: ARRAY
49447: GREATEREQUAL
49448: AND
49449: ST_TO_ADDR
// end ;
49450: LD_VAR 0 2
49454: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49455: LD_INT 0
49457: PPUSH
49458: PPUSH
49459: PPUSH
// pom := GetBase ( building ) ;
49460: LD_ADDR_VAR 0 4
49464: PUSH
49465: LD_VAR 0 1
49469: PPUSH
49470: CALL_OW 274
49474: ST_TO_ADDR
// if not pom then
49475: LD_VAR 0 4
49479: NOT
49480: IFFALSE 49484
// exit ;
49482: GO 49585
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49484: LD_ADDR_VAR 0 5
49488: PUSH
49489: LD_VAR 0 2
49493: PPUSH
49494: LD_VAR 0 1
49498: PPUSH
49499: CALL_OW 248
49503: PPUSH
49504: CALL_OW 450
49508: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49509: LD_ADDR_VAR 0 3
49513: PUSH
49514: LD_VAR 0 4
49518: PPUSH
49519: LD_INT 1
49521: PPUSH
49522: CALL_OW 275
49526: PUSH
49527: LD_VAR 0 5
49531: PUSH
49532: LD_INT 1
49534: ARRAY
49535: GREATEREQUAL
49536: PUSH
49537: LD_VAR 0 4
49541: PPUSH
49542: LD_INT 2
49544: PPUSH
49545: CALL_OW 275
49549: PUSH
49550: LD_VAR 0 5
49554: PUSH
49555: LD_INT 2
49557: ARRAY
49558: GREATEREQUAL
49559: AND
49560: PUSH
49561: LD_VAR 0 4
49565: PPUSH
49566: LD_INT 3
49568: PPUSH
49569: CALL_OW 275
49573: PUSH
49574: LD_VAR 0 5
49578: PUSH
49579: LD_INT 3
49581: ARRAY
49582: GREATEREQUAL
49583: AND
49584: ST_TO_ADDR
// end ;
49585: LD_VAR 0 3
49589: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49590: LD_INT 0
49592: PPUSH
49593: PPUSH
49594: PPUSH
49595: PPUSH
49596: PPUSH
49597: PPUSH
49598: PPUSH
49599: PPUSH
49600: PPUSH
49601: PPUSH
49602: PPUSH
// result := false ;
49603: LD_ADDR_VAR 0 8
49607: PUSH
49608: LD_INT 0
49610: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49611: LD_VAR 0 5
49615: NOT
49616: PUSH
49617: LD_VAR 0 1
49621: NOT
49622: OR
49623: PUSH
49624: LD_VAR 0 2
49628: NOT
49629: OR
49630: PUSH
49631: LD_VAR 0 3
49635: NOT
49636: OR
49637: IFFALSE 49641
// exit ;
49639: GO 50455
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49641: LD_ADDR_VAR 0 14
49645: PUSH
49646: LD_VAR 0 1
49650: PPUSH
49651: LD_VAR 0 2
49655: PPUSH
49656: LD_VAR 0 3
49660: PPUSH
49661: LD_VAR 0 4
49665: PPUSH
49666: LD_VAR 0 5
49670: PUSH
49671: LD_INT 1
49673: ARRAY
49674: PPUSH
49675: CALL_OW 248
49679: PPUSH
49680: LD_INT 0
49682: PPUSH
49683: CALL 51692 0 6
49687: ST_TO_ADDR
// if not hexes then
49688: LD_VAR 0 14
49692: NOT
49693: IFFALSE 49697
// exit ;
49695: GO 50455
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49697: LD_ADDR_VAR 0 17
49701: PUSH
49702: LD_VAR 0 5
49706: PPUSH
49707: LD_INT 22
49709: PUSH
49710: LD_VAR 0 13
49714: PPUSH
49715: CALL_OW 255
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 2
49726: PUSH
49727: LD_INT 30
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 30
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: LIST
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PPUSH
49756: CALL_OW 72
49760: ST_TO_ADDR
// for i = 1 to hexes do
49761: LD_ADDR_VAR 0 9
49765: PUSH
49766: DOUBLE
49767: LD_INT 1
49769: DEC
49770: ST_TO_ADDR
49771: LD_VAR 0 14
49775: PUSH
49776: FOR_TO
49777: IFFALSE 50453
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49779: LD_ADDR_VAR 0 13
49783: PUSH
49784: LD_VAR 0 14
49788: PUSH
49789: LD_VAR 0 9
49793: ARRAY
49794: PUSH
49795: LD_INT 1
49797: ARRAY
49798: PPUSH
49799: LD_VAR 0 14
49803: PUSH
49804: LD_VAR 0 9
49808: ARRAY
49809: PUSH
49810: LD_INT 2
49812: ARRAY
49813: PPUSH
49814: CALL_OW 428
49818: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49819: LD_VAR 0 14
49823: PUSH
49824: LD_VAR 0 9
49828: ARRAY
49829: PUSH
49830: LD_INT 1
49832: ARRAY
49833: PPUSH
49834: LD_VAR 0 14
49838: PUSH
49839: LD_VAR 0 9
49843: ARRAY
49844: PUSH
49845: LD_INT 2
49847: ARRAY
49848: PPUSH
49849: CALL_OW 351
49853: PUSH
49854: LD_VAR 0 14
49858: PUSH
49859: LD_VAR 0 9
49863: ARRAY
49864: PUSH
49865: LD_INT 1
49867: ARRAY
49868: PPUSH
49869: LD_VAR 0 14
49873: PUSH
49874: LD_VAR 0 9
49878: ARRAY
49879: PUSH
49880: LD_INT 2
49882: ARRAY
49883: PPUSH
49884: CALL_OW 488
49888: NOT
49889: OR
49890: PUSH
49891: LD_VAR 0 13
49895: PPUSH
49896: CALL_OW 247
49900: PUSH
49901: LD_INT 3
49903: EQUAL
49904: OR
49905: IFFALSE 49911
// exit ;
49907: POP
49908: POP
49909: GO 50455
// if not tmp then
49911: LD_VAR 0 13
49915: NOT
49916: IFFALSE 49920
// continue ;
49918: GO 49776
// result := true ;
49920: LD_ADDR_VAR 0 8
49924: PUSH
49925: LD_INT 1
49927: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49928: LD_VAR 0 6
49932: PUSH
49933: LD_VAR 0 13
49937: PPUSH
49938: CALL_OW 247
49942: PUSH
49943: LD_INT 2
49945: EQUAL
49946: AND
49947: PUSH
49948: LD_VAR 0 13
49952: PPUSH
49953: CALL_OW 263
49957: PUSH
49958: LD_INT 1
49960: EQUAL
49961: AND
49962: IFFALSE 50126
// begin if IsDrivenBy ( tmp ) then
49964: LD_VAR 0 13
49968: PPUSH
49969: CALL_OW 311
49973: IFFALSE 49977
// continue ;
49975: GO 49776
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49977: LD_VAR 0 6
49981: PPUSH
49982: LD_INT 3
49984: PUSH
49985: LD_INT 60
49987: PUSH
49988: EMPTY
49989: LIST
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 3
49997: PUSH
49998: LD_INT 55
50000: PUSH
50001: EMPTY
50002: LIST
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PPUSH
50012: CALL_OW 72
50016: IFFALSE 50124
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50018: LD_ADDR_VAR 0 18
50022: PUSH
50023: LD_VAR 0 6
50027: PPUSH
50028: LD_INT 3
50030: PUSH
50031: LD_INT 60
50033: PUSH
50034: EMPTY
50035: LIST
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 3
50043: PUSH
50044: LD_INT 55
50046: PUSH
50047: EMPTY
50048: LIST
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PPUSH
50058: CALL_OW 72
50062: PUSH
50063: LD_INT 1
50065: ARRAY
50066: ST_TO_ADDR
// if IsInUnit ( driver ) then
50067: LD_VAR 0 18
50071: PPUSH
50072: CALL_OW 310
50076: IFFALSE 50087
// ComExit ( driver ) ;
50078: LD_VAR 0 18
50082: PPUSH
50083: CALL 74820 0 1
// AddComEnterUnit ( driver , tmp ) ;
50087: LD_VAR 0 18
50091: PPUSH
50092: LD_VAR 0 13
50096: PPUSH
50097: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50101: LD_VAR 0 18
50105: PPUSH
50106: LD_VAR 0 7
50110: PPUSH
50111: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50115: LD_VAR 0 18
50119: PPUSH
50120: CALL_OW 181
// end ; continue ;
50124: GO 49776
// end ; if not cleaners or not tmp in cleaners then
50126: LD_VAR 0 6
50130: NOT
50131: PUSH
50132: LD_VAR 0 13
50136: PUSH
50137: LD_VAR 0 6
50141: IN
50142: NOT
50143: OR
50144: IFFALSE 50451
// begin if dep then
50146: LD_VAR 0 17
50150: IFFALSE 50286
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50152: LD_ADDR_VAR 0 16
50156: PUSH
50157: LD_VAR 0 17
50161: PUSH
50162: LD_INT 1
50164: ARRAY
50165: PPUSH
50166: CALL_OW 250
50170: PPUSH
50171: LD_VAR 0 17
50175: PUSH
50176: LD_INT 1
50178: ARRAY
50179: PPUSH
50180: CALL_OW 254
50184: PPUSH
50185: LD_INT 5
50187: PPUSH
50188: CALL_OW 272
50192: PUSH
50193: LD_VAR 0 17
50197: PUSH
50198: LD_INT 1
50200: ARRAY
50201: PPUSH
50202: CALL_OW 251
50206: PPUSH
50207: LD_VAR 0 17
50211: PUSH
50212: LD_INT 1
50214: ARRAY
50215: PPUSH
50216: CALL_OW 254
50220: PPUSH
50221: LD_INT 5
50223: PPUSH
50224: CALL_OW 273
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50233: LD_VAR 0 16
50237: PUSH
50238: LD_INT 1
50240: ARRAY
50241: PPUSH
50242: LD_VAR 0 16
50246: PUSH
50247: LD_INT 2
50249: ARRAY
50250: PPUSH
50251: CALL_OW 488
50255: IFFALSE 50286
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50257: LD_VAR 0 13
50261: PPUSH
50262: LD_VAR 0 16
50266: PUSH
50267: LD_INT 1
50269: ARRAY
50270: PPUSH
50271: LD_VAR 0 16
50275: PUSH
50276: LD_INT 2
50278: ARRAY
50279: PPUSH
50280: CALL_OW 111
// continue ;
50284: GO 49776
// end ; end ; r := GetDir ( tmp ) ;
50286: LD_ADDR_VAR 0 15
50290: PUSH
50291: LD_VAR 0 13
50295: PPUSH
50296: CALL_OW 254
50300: ST_TO_ADDR
// if r = 5 then
50301: LD_VAR 0 15
50305: PUSH
50306: LD_INT 5
50308: EQUAL
50309: IFFALSE 50319
// r := 0 ;
50311: LD_ADDR_VAR 0 15
50315: PUSH
50316: LD_INT 0
50318: ST_TO_ADDR
// for j = r to 5 do
50319: LD_ADDR_VAR 0 10
50323: PUSH
50324: DOUBLE
50325: LD_VAR 0 15
50329: DEC
50330: ST_TO_ADDR
50331: LD_INT 5
50333: PUSH
50334: FOR_TO
50335: IFFALSE 50449
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50337: LD_ADDR_VAR 0 11
50341: PUSH
50342: LD_VAR 0 13
50346: PPUSH
50347: CALL_OW 250
50351: PPUSH
50352: LD_VAR 0 10
50356: PPUSH
50357: LD_INT 2
50359: PPUSH
50360: CALL_OW 272
50364: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50365: LD_ADDR_VAR 0 12
50369: PUSH
50370: LD_VAR 0 13
50374: PPUSH
50375: CALL_OW 251
50379: PPUSH
50380: LD_VAR 0 10
50384: PPUSH
50385: LD_INT 2
50387: PPUSH
50388: CALL_OW 273
50392: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50393: LD_VAR 0 11
50397: PPUSH
50398: LD_VAR 0 12
50402: PPUSH
50403: CALL_OW 488
50407: PUSH
50408: LD_VAR 0 11
50412: PPUSH
50413: LD_VAR 0 12
50417: PPUSH
50418: CALL_OW 428
50422: NOT
50423: AND
50424: IFFALSE 50447
// begin ComMoveXY ( tmp , _x , _y ) ;
50426: LD_VAR 0 13
50430: PPUSH
50431: LD_VAR 0 11
50435: PPUSH
50436: LD_VAR 0 12
50440: PPUSH
50441: CALL_OW 111
// break ;
50445: GO 50449
// end ; end ;
50447: GO 50334
50449: POP
50450: POP
// end ; end ;
50451: GO 49776
50453: POP
50454: POP
// end ;
50455: LD_VAR 0 8
50459: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50460: LD_INT 0
50462: PPUSH
// result := true ;
50463: LD_ADDR_VAR 0 3
50467: PUSH
50468: LD_INT 1
50470: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50471: LD_VAR 0 2
50475: PUSH
50476: LD_INT 24
50478: DOUBLE
50479: EQUAL
50480: IFTRUE 50490
50482: LD_INT 33
50484: DOUBLE
50485: EQUAL
50486: IFTRUE 50490
50488: GO 50515
50490: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50491: LD_ADDR_VAR 0 3
50495: PUSH
50496: LD_INT 32
50498: PPUSH
50499: LD_VAR 0 1
50503: PPUSH
50504: CALL_OW 321
50508: PUSH
50509: LD_INT 2
50511: EQUAL
50512: ST_TO_ADDR
50513: GO 50835
50515: LD_INT 20
50517: DOUBLE
50518: EQUAL
50519: IFTRUE 50523
50521: GO 50548
50523: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50524: LD_ADDR_VAR 0 3
50528: PUSH
50529: LD_INT 6
50531: PPUSH
50532: LD_VAR 0 1
50536: PPUSH
50537: CALL_OW 321
50541: PUSH
50542: LD_INT 2
50544: EQUAL
50545: ST_TO_ADDR
50546: GO 50835
50548: LD_INT 22
50550: DOUBLE
50551: EQUAL
50552: IFTRUE 50562
50554: LD_INT 36
50556: DOUBLE
50557: EQUAL
50558: IFTRUE 50562
50560: GO 50587
50562: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50563: LD_ADDR_VAR 0 3
50567: PUSH
50568: LD_INT 15
50570: PPUSH
50571: LD_VAR 0 1
50575: PPUSH
50576: CALL_OW 321
50580: PUSH
50581: LD_INT 2
50583: EQUAL
50584: ST_TO_ADDR
50585: GO 50835
50587: LD_INT 30
50589: DOUBLE
50590: EQUAL
50591: IFTRUE 50595
50593: GO 50620
50595: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50596: LD_ADDR_VAR 0 3
50600: PUSH
50601: LD_INT 20
50603: PPUSH
50604: LD_VAR 0 1
50608: PPUSH
50609: CALL_OW 321
50613: PUSH
50614: LD_INT 2
50616: EQUAL
50617: ST_TO_ADDR
50618: GO 50835
50620: LD_INT 28
50622: DOUBLE
50623: EQUAL
50624: IFTRUE 50634
50626: LD_INT 21
50628: DOUBLE
50629: EQUAL
50630: IFTRUE 50634
50632: GO 50659
50634: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50635: LD_ADDR_VAR 0 3
50639: PUSH
50640: LD_INT 21
50642: PPUSH
50643: LD_VAR 0 1
50647: PPUSH
50648: CALL_OW 321
50652: PUSH
50653: LD_INT 2
50655: EQUAL
50656: ST_TO_ADDR
50657: GO 50835
50659: LD_INT 16
50661: DOUBLE
50662: EQUAL
50663: IFTRUE 50667
50665: GO 50694
50667: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50668: LD_ADDR_VAR 0 3
50672: PUSH
50673: LD_EXP 74
50677: PPUSH
50678: LD_VAR 0 1
50682: PPUSH
50683: CALL_OW 321
50687: PUSH
50688: LD_INT 2
50690: EQUAL
50691: ST_TO_ADDR
50692: GO 50835
50694: LD_INT 19
50696: DOUBLE
50697: EQUAL
50698: IFTRUE 50708
50700: LD_INT 23
50702: DOUBLE
50703: EQUAL
50704: IFTRUE 50708
50706: GO 50735
50708: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50709: LD_ADDR_VAR 0 3
50713: PUSH
50714: LD_EXP 73
50718: PPUSH
50719: LD_VAR 0 1
50723: PPUSH
50724: CALL_OW 321
50728: PUSH
50729: LD_INT 2
50731: EQUAL
50732: ST_TO_ADDR
50733: GO 50835
50735: LD_INT 17
50737: DOUBLE
50738: EQUAL
50739: IFTRUE 50743
50741: GO 50768
50743: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50744: LD_ADDR_VAR 0 3
50748: PUSH
50749: LD_INT 39
50751: PPUSH
50752: LD_VAR 0 1
50756: PPUSH
50757: CALL_OW 321
50761: PUSH
50762: LD_INT 2
50764: EQUAL
50765: ST_TO_ADDR
50766: GO 50835
50768: LD_INT 18
50770: DOUBLE
50771: EQUAL
50772: IFTRUE 50776
50774: GO 50801
50776: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50777: LD_ADDR_VAR 0 3
50781: PUSH
50782: LD_INT 40
50784: PPUSH
50785: LD_VAR 0 1
50789: PPUSH
50790: CALL_OW 321
50794: PUSH
50795: LD_INT 2
50797: EQUAL
50798: ST_TO_ADDR
50799: GO 50835
50801: LD_INT 27
50803: DOUBLE
50804: EQUAL
50805: IFTRUE 50809
50807: GO 50834
50809: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50810: LD_ADDR_VAR 0 3
50814: PUSH
50815: LD_INT 35
50817: PPUSH
50818: LD_VAR 0 1
50822: PPUSH
50823: CALL_OW 321
50827: PUSH
50828: LD_INT 2
50830: EQUAL
50831: ST_TO_ADDR
50832: GO 50835
50834: POP
// end ;
50835: LD_VAR 0 3
50839: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50840: LD_INT 0
50842: PPUSH
50843: PPUSH
50844: PPUSH
50845: PPUSH
50846: PPUSH
50847: PPUSH
50848: PPUSH
50849: PPUSH
50850: PPUSH
50851: PPUSH
50852: PPUSH
// result := false ;
50853: LD_ADDR_VAR 0 6
50857: PUSH
50858: LD_INT 0
50860: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50861: LD_VAR 0 1
50865: NOT
50866: PUSH
50867: LD_VAR 0 1
50871: PPUSH
50872: CALL_OW 266
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: IN
50887: NOT
50888: OR
50889: PUSH
50890: LD_VAR 0 2
50894: NOT
50895: OR
50896: PUSH
50897: LD_VAR 0 5
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: LD_INT 1
50907: PUSH
50908: LD_INT 2
50910: PUSH
50911: LD_INT 3
50913: PUSH
50914: LD_INT 4
50916: PUSH
50917: LD_INT 5
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: IN
50928: NOT
50929: OR
50930: PUSH
50931: LD_VAR 0 3
50935: PPUSH
50936: LD_VAR 0 4
50940: PPUSH
50941: CALL_OW 488
50945: NOT
50946: OR
50947: IFFALSE 50951
// exit ;
50949: GO 51687
// side := GetSide ( depot ) ;
50951: LD_ADDR_VAR 0 9
50955: PUSH
50956: LD_VAR 0 1
50960: PPUSH
50961: CALL_OW 255
50965: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50966: LD_VAR 0 9
50970: PPUSH
50971: LD_VAR 0 2
50975: PPUSH
50976: CALL 50460 0 2
50980: NOT
50981: IFFALSE 50985
// exit ;
50983: GO 51687
// pom := GetBase ( depot ) ;
50985: LD_ADDR_VAR 0 10
50989: PUSH
50990: LD_VAR 0 1
50994: PPUSH
50995: CALL_OW 274
50999: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51000: LD_ADDR_VAR 0 11
51004: PUSH
51005: LD_VAR 0 2
51009: PPUSH
51010: LD_VAR 0 1
51014: PPUSH
51015: CALL_OW 248
51019: PPUSH
51020: CALL_OW 450
51024: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51025: LD_VAR 0 10
51029: PPUSH
51030: LD_INT 1
51032: PPUSH
51033: CALL_OW 275
51037: PUSH
51038: LD_VAR 0 11
51042: PUSH
51043: LD_INT 1
51045: ARRAY
51046: GREATEREQUAL
51047: PUSH
51048: LD_VAR 0 10
51052: PPUSH
51053: LD_INT 2
51055: PPUSH
51056: CALL_OW 275
51060: PUSH
51061: LD_VAR 0 11
51065: PUSH
51066: LD_INT 2
51068: ARRAY
51069: GREATEREQUAL
51070: AND
51071: PUSH
51072: LD_VAR 0 10
51076: PPUSH
51077: LD_INT 3
51079: PPUSH
51080: CALL_OW 275
51084: PUSH
51085: LD_VAR 0 11
51089: PUSH
51090: LD_INT 3
51092: ARRAY
51093: GREATEREQUAL
51094: AND
51095: NOT
51096: IFFALSE 51100
// exit ;
51098: GO 51687
// if GetBType ( depot ) = b_depot then
51100: LD_VAR 0 1
51104: PPUSH
51105: CALL_OW 266
51109: PUSH
51110: LD_INT 0
51112: EQUAL
51113: IFFALSE 51125
// dist := 28 else
51115: LD_ADDR_VAR 0 14
51119: PUSH
51120: LD_INT 28
51122: ST_TO_ADDR
51123: GO 51133
// dist := 36 ;
51125: LD_ADDR_VAR 0 14
51129: PUSH
51130: LD_INT 36
51132: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51133: LD_VAR 0 1
51137: PPUSH
51138: LD_VAR 0 3
51142: PPUSH
51143: LD_VAR 0 4
51147: PPUSH
51148: CALL_OW 297
51152: PUSH
51153: LD_VAR 0 14
51157: GREATER
51158: IFFALSE 51162
// exit ;
51160: GO 51687
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51162: LD_ADDR_VAR 0 12
51166: PUSH
51167: LD_VAR 0 2
51171: PPUSH
51172: LD_VAR 0 3
51176: PPUSH
51177: LD_VAR 0 4
51181: PPUSH
51182: LD_VAR 0 5
51186: PPUSH
51187: LD_VAR 0 1
51191: PPUSH
51192: CALL_OW 248
51196: PPUSH
51197: LD_INT 0
51199: PPUSH
51200: CALL 51692 0 6
51204: ST_TO_ADDR
// if not hexes then
51205: LD_VAR 0 12
51209: NOT
51210: IFFALSE 51214
// exit ;
51212: GO 51687
// hex := GetHexInfo ( x , y ) ;
51214: LD_ADDR_VAR 0 15
51218: PUSH
51219: LD_VAR 0 3
51223: PPUSH
51224: LD_VAR 0 4
51228: PPUSH
51229: CALL_OW 546
51233: ST_TO_ADDR
// if hex [ 1 ] then
51234: LD_VAR 0 15
51238: PUSH
51239: LD_INT 1
51241: ARRAY
51242: IFFALSE 51246
// exit ;
51244: GO 51687
// height := hex [ 2 ] ;
51246: LD_ADDR_VAR 0 13
51250: PUSH
51251: LD_VAR 0 15
51255: PUSH
51256: LD_INT 2
51258: ARRAY
51259: ST_TO_ADDR
// for i = 1 to hexes do
51260: LD_ADDR_VAR 0 7
51264: PUSH
51265: DOUBLE
51266: LD_INT 1
51268: DEC
51269: ST_TO_ADDR
51270: LD_VAR 0 12
51274: PUSH
51275: FOR_TO
51276: IFFALSE 51606
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51278: LD_VAR 0 12
51282: PUSH
51283: LD_VAR 0 7
51287: ARRAY
51288: PUSH
51289: LD_INT 1
51291: ARRAY
51292: PPUSH
51293: LD_VAR 0 12
51297: PUSH
51298: LD_VAR 0 7
51302: ARRAY
51303: PUSH
51304: LD_INT 2
51306: ARRAY
51307: PPUSH
51308: CALL_OW 488
51312: NOT
51313: PUSH
51314: LD_VAR 0 12
51318: PUSH
51319: LD_VAR 0 7
51323: ARRAY
51324: PUSH
51325: LD_INT 1
51327: ARRAY
51328: PPUSH
51329: LD_VAR 0 12
51333: PUSH
51334: LD_VAR 0 7
51338: ARRAY
51339: PUSH
51340: LD_INT 2
51342: ARRAY
51343: PPUSH
51344: CALL_OW 428
51348: PUSH
51349: LD_INT 0
51351: GREATER
51352: OR
51353: PUSH
51354: LD_VAR 0 12
51358: PUSH
51359: LD_VAR 0 7
51363: ARRAY
51364: PUSH
51365: LD_INT 1
51367: ARRAY
51368: PPUSH
51369: LD_VAR 0 12
51373: PUSH
51374: LD_VAR 0 7
51378: ARRAY
51379: PUSH
51380: LD_INT 2
51382: ARRAY
51383: PPUSH
51384: CALL_OW 351
51388: OR
51389: IFFALSE 51395
// exit ;
51391: POP
51392: POP
51393: GO 51687
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51395: LD_ADDR_VAR 0 8
51399: PUSH
51400: LD_VAR 0 12
51404: PUSH
51405: LD_VAR 0 7
51409: ARRAY
51410: PUSH
51411: LD_INT 1
51413: ARRAY
51414: PPUSH
51415: LD_VAR 0 12
51419: PUSH
51420: LD_VAR 0 7
51424: ARRAY
51425: PUSH
51426: LD_INT 2
51428: ARRAY
51429: PPUSH
51430: CALL_OW 546
51434: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51435: LD_VAR 0 8
51439: PUSH
51440: LD_INT 1
51442: ARRAY
51443: PUSH
51444: LD_VAR 0 8
51448: PUSH
51449: LD_INT 2
51451: ARRAY
51452: PUSH
51453: LD_VAR 0 13
51457: PUSH
51458: LD_INT 2
51460: PLUS
51461: GREATER
51462: OR
51463: PUSH
51464: LD_VAR 0 8
51468: PUSH
51469: LD_INT 2
51471: ARRAY
51472: PUSH
51473: LD_VAR 0 13
51477: PUSH
51478: LD_INT 2
51480: MINUS
51481: LESS
51482: OR
51483: PUSH
51484: LD_VAR 0 8
51488: PUSH
51489: LD_INT 3
51491: ARRAY
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 8
51498: PUSH
51499: LD_INT 9
51501: PUSH
51502: LD_INT 10
51504: PUSH
51505: LD_INT 11
51507: PUSH
51508: LD_INT 12
51510: PUSH
51511: LD_INT 13
51513: PUSH
51514: LD_INT 16
51516: PUSH
51517: LD_INT 17
51519: PUSH
51520: LD_INT 18
51522: PUSH
51523: LD_INT 19
51525: PUSH
51526: LD_INT 20
51528: PUSH
51529: LD_INT 21
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: IN
51547: NOT
51548: OR
51549: PUSH
51550: LD_VAR 0 8
51554: PUSH
51555: LD_INT 5
51557: ARRAY
51558: NOT
51559: OR
51560: PUSH
51561: LD_VAR 0 8
51565: PUSH
51566: LD_INT 6
51568: ARRAY
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: LD_INT 2
51575: PUSH
51576: LD_INT 7
51578: PUSH
51579: LD_INT 9
51581: PUSH
51582: LD_INT 10
51584: PUSH
51585: LD_INT 11
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: IN
51596: NOT
51597: OR
51598: IFFALSE 51604
// exit ;
51600: POP
51601: POP
51602: GO 51687
// end ;
51604: GO 51275
51606: POP
51607: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51608: LD_VAR 0 9
51612: PPUSH
51613: LD_VAR 0 3
51617: PPUSH
51618: LD_VAR 0 4
51622: PPUSH
51623: LD_INT 20
51625: PPUSH
51626: CALL 43633 0 4
51630: PUSH
51631: LD_INT 4
51633: ARRAY
51634: IFFALSE 51638
// exit ;
51636: GO 51687
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51638: LD_VAR 0 2
51642: PUSH
51643: LD_INT 29
51645: PUSH
51646: LD_INT 30
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: IN
51653: PUSH
51654: LD_VAR 0 3
51658: PPUSH
51659: LD_VAR 0 4
51663: PPUSH
51664: LD_VAR 0 9
51668: PPUSH
51669: CALL_OW 440
51673: NOT
51674: AND
51675: IFFALSE 51679
// exit ;
51677: GO 51687
// result := true ;
51679: LD_ADDR_VAR 0 6
51683: PUSH
51684: LD_INT 1
51686: ST_TO_ADDR
// end ;
51687: LD_VAR 0 6
51691: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51692: LD_INT 0
51694: PPUSH
51695: PPUSH
51696: PPUSH
51697: PPUSH
51698: PPUSH
51699: PPUSH
51700: PPUSH
51701: PPUSH
51702: PPUSH
51703: PPUSH
51704: PPUSH
51705: PPUSH
51706: PPUSH
51707: PPUSH
51708: PPUSH
51709: PPUSH
51710: PPUSH
51711: PPUSH
51712: PPUSH
51713: PPUSH
51714: PPUSH
51715: PPUSH
51716: PPUSH
51717: PPUSH
51718: PPUSH
51719: PPUSH
51720: PPUSH
51721: PPUSH
51722: PPUSH
51723: PPUSH
51724: PPUSH
51725: PPUSH
51726: PPUSH
51727: PPUSH
51728: PPUSH
51729: PPUSH
51730: PPUSH
51731: PPUSH
51732: PPUSH
51733: PPUSH
51734: PPUSH
51735: PPUSH
51736: PPUSH
51737: PPUSH
51738: PPUSH
51739: PPUSH
51740: PPUSH
51741: PPUSH
51742: PPUSH
51743: PPUSH
51744: PPUSH
51745: PPUSH
51746: PPUSH
51747: PPUSH
51748: PPUSH
51749: PPUSH
51750: PPUSH
51751: PPUSH
// result = [ ] ;
51752: LD_ADDR_VAR 0 7
51756: PUSH
51757: EMPTY
51758: ST_TO_ADDR
// temp_list = [ ] ;
51759: LD_ADDR_VAR 0 9
51763: PUSH
51764: EMPTY
51765: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51766: LD_VAR 0 4
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: LD_INT 2
51779: PUSH
51780: LD_INT 3
51782: PUSH
51783: LD_INT 4
51785: PUSH
51786: LD_INT 5
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: IN
51797: NOT
51798: PUSH
51799: LD_VAR 0 1
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: IN
51814: PUSH
51815: LD_VAR 0 5
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: LD_INT 2
51825: PUSH
51826: LD_INT 3
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: LIST
51833: IN
51834: NOT
51835: AND
51836: OR
51837: IFFALSE 51841
// exit ;
51839: GO 70232
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51841: LD_VAR 0 1
51845: PUSH
51846: LD_INT 6
51848: PUSH
51849: LD_INT 7
51851: PUSH
51852: LD_INT 8
51854: PUSH
51855: LD_INT 13
51857: PUSH
51858: LD_INT 12
51860: PUSH
51861: LD_INT 15
51863: PUSH
51864: LD_INT 11
51866: PUSH
51867: LD_INT 14
51869: PUSH
51870: LD_INT 10
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: IN
51884: IFFALSE 51894
// btype = b_lab ;
51886: LD_ADDR_VAR 0 1
51890: PUSH
51891: LD_INT 6
51893: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51894: LD_VAR 0 6
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: LD_INT 2
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: LIST
51912: IN
51913: NOT
51914: PUSH
51915: LD_VAR 0 1
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: LD_INT 3
51931: PUSH
51932: LD_INT 6
51934: PUSH
51935: LD_INT 36
51937: PUSH
51938: LD_INT 4
51940: PUSH
51941: LD_INT 5
51943: PUSH
51944: LD_INT 31
51946: PUSH
51947: LD_INT 32
51949: PUSH
51950: LD_INT 33
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: IN
51966: NOT
51967: PUSH
51968: LD_VAR 0 6
51972: PUSH
51973: LD_INT 1
51975: EQUAL
51976: AND
51977: OR
51978: PUSH
51979: LD_VAR 0 1
51983: PUSH
51984: LD_INT 2
51986: PUSH
51987: LD_INT 3
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: IN
51994: NOT
51995: PUSH
51996: LD_VAR 0 6
52000: PUSH
52001: LD_INT 2
52003: EQUAL
52004: AND
52005: OR
52006: IFFALSE 52016
// mode = 0 ;
52008: LD_ADDR_VAR 0 6
52012: PUSH
52013: LD_INT 0
52015: ST_TO_ADDR
// case mode of 0 :
52016: LD_VAR 0 6
52020: PUSH
52021: LD_INT 0
52023: DOUBLE
52024: EQUAL
52025: IFTRUE 52029
52027: GO 63482
52029: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52030: LD_ADDR_VAR 0 11
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: LD_INT 2
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: LD_INT 2
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 2
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: LD_INT 3
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: LD_INT 3
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52223: LD_ADDR_VAR 0 12
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 2
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 2
52346: NEG
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: NEG
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 2
52369: NEG
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 3
52380: NEG
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 3
52391: NEG
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52419: LD_ADDR_VAR 0 13
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: LD_INT 1
52492: NEG
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 2
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 2
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: LD_INT 2
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: LD_INT 2
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 2
52554: NEG
52555: PUSH
52556: LD_INT 2
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: LD_INT 3
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 3
52578: NEG
52579: PUSH
52580: LD_INT 2
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 3
52590: NEG
52591: PUSH
52592: LD_INT 3
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52618: LD_ADDR_VAR 0 14
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 1
52699: NEG
52700: PUSH
52701: LD_INT 2
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: LD_INT 2
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: LD_INT 2
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: NEG
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: LD_INT 3
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 3
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52814: LD_ADDR_VAR 0 15
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 1
52883: NEG
52884: PUSH
52885: LD_INT 1
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 2
52937: NEG
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 2
52948: NEG
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 2
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 3
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 3
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53007: LD_ADDR_VAR 0 16
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: LD_INT 1
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 2
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 2
53110: PUSH
53111: LD_INT 2
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 2
53130: NEG
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 2
53142: NEG
53143: PUSH
53144: LD_INT 2
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 3
53154: PUSH
53155: LD_INT 2
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 3
53164: PUSH
53165: LD_INT 3
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: LD_INT 3
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53200: LD_ADDR_VAR 0 17
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: LD_INT 2
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: LD_INT 2
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 2
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 2
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 2
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 2
53376: NEG
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 2
53387: NEG
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 2
53399: NEG
53400: PUSH
53401: LD_INT 2
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53430: LD_ADDR_VAR 0 18
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 1
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: LD_INT 2
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: LD_INT 2
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 2
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 2
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: LD_INT 2
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: LD_INT 2
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 2
53606: NEG
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 2
53617: NEG
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 2
53629: NEG
53630: PUSH
53631: LD_INT 2
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53660: LD_ADDR_VAR 0 19
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: LD_INT 1
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: NEG
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: LD_INT 2
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: LD_INT 2
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 2
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: LD_INT 2
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: LD_INT 2
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: LD_INT 2
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: NEG
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 2
53836: NEG
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 2
53847: NEG
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 2
53859: NEG
53860: PUSH
53861: LD_INT 2
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53890: LD_ADDR_VAR 0 20
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 1
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: LD_INT 2
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: LD_INT 2
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 2
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: LD_INT 2
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: LD_INT 2
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 2
54066: NEG
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 2
54077: NEG
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 2
54089: NEG
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54120: LD_ADDR_VAR 0 21
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: LD_INT 2
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 2
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: PUSH
54256: LD_INT 2
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: LD_INT 2
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 2
54296: NEG
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 2
54307: NEG
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 2
54319: NEG
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54350: LD_ADDR_VAR 0 22
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: LD_INT 2
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: LD_INT 2
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: LD_INT 1
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: LD_INT 2
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: LD_INT 2
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: LD_INT 1
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 2
54526: NEG
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 2
54537: NEG
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 2
54549: NEG
54550: PUSH
54551: LD_INT 2
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54580: LD_ADDR_VAR 0 23
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: LD_INT 2
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: LD_INT 2
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 2
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 2
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 2
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: LD_INT 2
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 2
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 2
54756: NEG
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 2
54779: NEG
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: NEG
54792: PUSH
54793: LD_INT 3
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: LD_INT 3
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: LD_INT 2
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54860: LD_ADDR_VAR 0 24
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 1
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: LD_INT 2
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: LD_INT 2
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 2
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: NEG
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 2
55047: NEG
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 2
55059: NEG
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: LD_INT 2
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 3
55093: PUSH
55094: LD_INT 1
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 3
55103: PUSH
55104: LD_INT 2
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55136: LD_ADDR_VAR 0 25
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 1
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: LD_INT 2
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 2
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 2
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: PUSH
55262: LD_INT 1
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 2
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: LD_INT 2
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: LD_INT 2
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 2
55323: NEG
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 2
55335: NEG
55336: PUSH
55337: LD_INT 2
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 3
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 3
55357: PUSH
55358: LD_INT 2
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: LD_INT 3
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: LD_INT 3
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55410: LD_ADDR_VAR 0 26
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: LD_INT 1
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: LD_INT 2
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 2
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 2
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 2
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: LD_INT 2
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 2
55586: NEG
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 2
55609: NEG
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 2
55621: PUSH
55622: LD_INT 3
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: LD_INT 3
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 2
55652: NEG
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55686: LD_ADDR_VAR 0 27
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: LD_INT 2
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 2
55821: PUSH
55822: LD_INT 2
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: LD_INT 2
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: LD_INT 1
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 2
55862: NEG
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 2
55873: NEG
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: NEG
55886: PUSH
55887: LD_INT 2
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 2
55908: NEG
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 3
55919: NEG
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 3
55931: NEG
55932: PUSH
55933: LD_INT 2
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55966: LD_ADDR_VAR 0 28
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: LD_INT 1
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 1
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: NEG
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: NEG
56048: PUSH
56049: LD_INT 2
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 2
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 2
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 2
56101: PUSH
56102: LD_INT 2
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: LD_INT 2
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 2
56142: NEG
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 2
56153: NEG
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 2
56165: NEG
56166: PUSH
56167: LD_INT 2
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 2
56177: NEG
56178: PUSH
56179: LD_INT 3
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: LD_INT 3
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 3
56201: NEG
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 3
56213: NEG
56214: PUSH
56215: LD_INT 2
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56248: LD_ADDR_VAR 0 29
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: LD_INT 1
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: LD_INT 1
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: LD_INT 1
56321: NEG
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: LD_INT 2
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 2
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 2
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: LD_INT 2
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: LD_INT 2
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 2
56414: NEG
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: LD_INT 2
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 2
56438: NEG
56439: PUSH
56440: LD_INT 3
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 3
56461: PUSH
56462: LD_INT 1
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 3
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: LD_INT 2
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 3
56492: NEG
56493: PUSH
56494: LD_INT 2
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56527: LD_ADDR_VAR 0 30
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 1
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 2
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 2
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 2
56662: PUSH
56663: LD_INT 2
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: LD_INT 2
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 2
56693: NEG
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 2
56704: NEG
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 1
56716: NEG
56717: PUSH
56718: LD_INT 3
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: LD_INT 2
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 3
56739: PUSH
56740: LD_INT 2
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 2
56749: PUSH
56750: LD_INT 3
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 2
56759: NEG
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 3
56770: NEG
56771: PUSH
56772: LD_INT 1
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56805: LD_ADDR_VAR 0 31
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: LD_INT 0
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: LD_INT 1
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 1
56874: NEG
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: LD_INT 2
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 2
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 2
56929: PUSH
56930: LD_INT 2
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: LD_INT 2
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 2
56970: NEG
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 2
56982: NEG
56983: PUSH
56984: LD_INT 2
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: LD_INT 3
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 2
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 3
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: PUSH
57028: LD_INT 3
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: LD_INT 2
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 3
57048: NEG
57049: PUSH
57050: LD_INT 2
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57083: LD_ADDR_VAR 0 32
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: LD_INT 1
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: LD_INT 2
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: LD_INT 2
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 2
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: LD_INT 2
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: LD_INT 2
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 2
57249: NEG
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 2
57260: NEG
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: LD_INT 3
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: LD_INT 2
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 3
57295: PUSH
57296: LD_INT 2
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 2
57305: PUSH
57306: LD_INT 3
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 2
57315: NEG
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 3
57326: NEG
57327: PUSH
57328: LD_INT 1
57330: NEG
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57361: LD_ADDR_VAR 0 33
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: LD_INT 2
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: LD_INT 1
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 2
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: LD_INT 2
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 2
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 2
57516: NEG
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 2
57527: NEG
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 2
57551: NEG
57552: PUSH
57553: LD_INT 3
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 2
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 3
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 3
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 3
57605: NEG
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57640: LD_ADDR_VAR 0 34
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: LD_INT 2
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 2
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 2
57807: NEG
57808: PUSH
57809: LD_INT 1
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 2
57819: NEG
57820: PUSH
57821: LD_INT 2
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: LD_INT 3
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 1
57843: PUSH
57844: LD_INT 2
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 3
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 2
57864: PUSH
57865: LD_INT 3
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 2
57874: NEG
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 3
57885: NEG
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57920: LD_ADDR_VAR 0 35
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 0
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 1
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: LD_INT 1
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: LD_INT 1
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 2
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 2
58011: NEG
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58032: LD_ADDR_VAR 0 36
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58144: LD_ADDR_VAR 0 37
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: NEG
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: LD_INT 1
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58256: LD_ADDR_VAR 0 38
58260: PUSH
58261: LD_INT 0
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: LD_INT 1
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 2
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 2
58347: NEG
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58368: LD_ADDR_VAR 0 39
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 0
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: LD_INT 2
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: LD_INT 2
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58480: LD_ADDR_VAR 0 40
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: LD_INT 1
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: LD_INT 1
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 1
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58592: LD_ADDR_VAR 0 41
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 0
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: LD_INT 1
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: LD_INT 2
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: LD_INT 1
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 2
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 2
58706: PUSH
58707: LD_INT 1
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 2
58716: PUSH
58717: LD_INT 2
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: LD_INT 2
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 2
58758: NEG
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 2
58770: NEG
58771: PUSH
58772: LD_INT 2
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 2
58782: NEG
58783: PUSH
58784: LD_INT 3
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: LD_INT 1
58797: NEG
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 3
58805: PUSH
58806: LD_INT 0
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 3
58815: PUSH
58816: LD_INT 1
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 3
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 3
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 2
58845: PUSH
58846: LD_INT 3
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 2
58855: NEG
58856: PUSH
58857: LD_INT 1
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 3
58866: NEG
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 3
58877: NEG
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 3
58889: NEG
58890: PUSH
58891: LD_INT 2
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 3
58901: NEG
58902: PUSH
58903: LD_INT 3
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58942: LD_ADDR_VAR 0 42
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: LD_INT 2
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: LD_INT 2
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 1
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 2
59057: PUSH
59058: LD_INT 1
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 2
59067: PUSH
59068: LD_INT 2
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: LD_INT 2
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 0
59087: PUSH
59088: LD_INT 2
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: LD_INT 1
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 2
59108: NEG
59109: PUSH
59110: LD_INT 1
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 2
59120: NEG
59121: PUSH
59122: LD_INT 2
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 2
59132: NEG
59133: PUSH
59134: LD_INT 3
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: LD_INT 3
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 0
59156: PUSH
59157: LD_INT 3
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: PUSH
59168: LD_INT 2
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 3
59178: PUSH
59179: LD_INT 2
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 3
59188: PUSH
59189: LD_INT 3
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 2
59198: PUSH
59199: LD_INT 3
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 1
59208: PUSH
59209: LD_INT 3
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 0
59218: PUSH
59219: LD_INT 3
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: LD_INT 2
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 3
59239: NEG
59240: PUSH
59241: LD_INT 2
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 3
59251: NEG
59252: PUSH
59253: LD_INT 3
59255: NEG
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59292: LD_ADDR_VAR 0 43
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 1
59330: PUSH
59331: LD_INT 1
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: LD_INT 1
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: NEG
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 1
59361: NEG
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: LD_INT 2
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: LD_INT 2
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 2
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 2
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: LD_INT 2
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: LD_INT 2
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 2
59458: NEG
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 2
59469: NEG
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: LD_INT 3
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: LD_INT 3
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: LD_INT 2
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 2
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 3
59526: PUSH
59527: LD_INT 0
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 3
59536: PUSH
59537: LD_INT 1
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: LD_INT 3
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: LD_INT 3
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: LD_INT 2
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 2
59577: NEG
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 3
59588: NEG
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 3
59599: NEG
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59640: LD_ADDR_VAR 0 44
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: LD_INT 1
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 1
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 1
59721: NEG
59722: PUSH
59723: LD_INT 2
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 2
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 2
59764: PUSH
59765: LD_INT 2
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: LD_INT 2
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 1
59784: NEG
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 2
59795: NEG
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 2
59806: NEG
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 2
59818: NEG
59819: PUSH
59820: LD_INT 2
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 2
59830: NEG
59831: PUSH
59832: LD_INT 3
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 2
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 3
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 3
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 3
59873: PUSH
59874: LD_INT 2
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 3
59883: PUSH
59884: LD_INT 3
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 2
59893: PUSH
59894: LD_INT 3
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 2
59903: NEG
59904: PUSH
59905: LD_INT 1
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 3
59914: NEG
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 3
59925: NEG
59926: PUSH
59927: LD_INT 1
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 3
59937: NEG
59938: PUSH
59939: LD_INT 2
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 3
59949: NEG
59950: PUSH
59951: LD_INT 3
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59990: LD_ADDR_VAR 0 45
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: LD_INT 1
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 1
60059: NEG
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 1
60071: NEG
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: LD_INT 2
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 1
60094: PUSH
60095: LD_INT 1
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 2
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 2
60115: PUSH
60116: LD_INT 2
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: LD_INT 2
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: LD_INT 2
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 2
60168: NEG
60169: PUSH
60170: LD_INT 2
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 2
60180: NEG
60181: PUSH
60182: LD_INT 3
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: LD_INT 3
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 0
60204: PUSH
60205: LD_INT 3
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: LD_INT 2
60218: NEG
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 3
60226: PUSH
60227: LD_INT 2
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 3
60236: PUSH
60237: LD_INT 3
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 2
60246: PUSH
60247: LD_INT 3
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: LD_INT 3
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: LD_INT 3
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: LD_INT 2
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 3
60287: NEG
60288: PUSH
60289: LD_INT 2
60291: NEG
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 3
60299: NEG
60300: PUSH
60301: LD_INT 3
60303: NEG
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60340: LD_ADDR_VAR 0 46
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: LD_INT 1
60360: NEG
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: LD_INT 1
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: LD_INT 1
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 1
60398: NEG
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: NEG
60410: PUSH
60411: LD_INT 1
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: LD_INT 2
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: LD_INT 2
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 1
60444: PUSH
60445: LD_INT 1
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 2
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: LD_INT 1
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 1
60475: PUSH
60476: LD_INT 2
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: LD_INT 2
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 1
60495: NEG
60496: PUSH
60497: LD_INT 1
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 2
60506: NEG
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 2
60517: NEG
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 1
60529: NEG
60530: PUSH
60531: LD_INT 3
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: LD_INT 3
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: LD_INT 2
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 2
60563: PUSH
60564: LD_INT 1
60566: NEG
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 3
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 3
60584: PUSH
60585: LD_INT 1
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: LD_INT 3
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: LD_INT 3
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: NEG
60615: PUSH
60616: LD_INT 2
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 2
60625: NEG
60626: PUSH
60627: LD_INT 1
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 3
60636: NEG
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 3
60647: NEG
60648: PUSH
60649: LD_INT 1
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60688: LD_ADDR_VAR 0 47
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: LD_INT 1
60708: NEG
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 1
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 1
60726: PUSH
60727: LD_INT 1
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 1
60746: NEG
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 1
60757: NEG
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: LD_INT 2
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: LD_INT 2
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 1
60792: PUSH
60793: LD_INT 1
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 2
60803: NEG
60804: PUSH
60805: LD_INT 1
60807: NEG
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 2
60815: NEG
60816: PUSH
60817: LD_INT 2
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60839: LD_ADDR_VAR 0 48
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: LD_INT 1
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 1
60908: NEG
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: NEG
60921: PUSH
60922: LD_INT 2
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: LD_INT 2
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 1
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 2
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 2
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60986: LD_ADDR_VAR 0 49
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 1
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 1
61044: NEG
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 1
61055: NEG
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: LD_INT 1
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 2
61078: PUSH
61079: LD_INT 0
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 2
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 2
61098: PUSH
61099: LD_INT 2
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 1
61108: PUSH
61109: LD_INT 2
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61130: LD_ADDR_VAR 0 50
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 0
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: LD_INT 0
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 1
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: LD_INT 0
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: LD_INT 1
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 2
61211: PUSH
61212: LD_INT 1
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 2
61221: PUSH
61222: LD_INT 2
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 1
61231: PUSH
61232: LD_INT 2
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 0
61241: PUSH
61242: LD_INT 2
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 1
61251: NEG
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61274: LD_ADDR_VAR 0 51
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: LD_INT 1
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 1
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 1
61312: PUSH
61313: LD_INT 1
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 0
61322: PUSH
61323: LD_INT 1
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: LD_INT 2
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 0
61365: PUSH
61366: LD_INT 2
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 1
61375: NEG
61376: PUSH
61377: LD_INT 1
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 2
61386: NEG
61387: PUSH
61388: LD_INT 0
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 2
61397: NEG
61398: PUSH
61399: LD_INT 1
61401: NEG
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61421: LD_ADDR_VAR 0 52
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 1
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 1
61479: NEG
61480: PUSH
61481: LD_INT 0
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 1
61490: NEG
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: NEG
61503: PUSH
61504: LD_INT 2
61506: NEG
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 1
61514: NEG
61515: PUSH
61516: LD_INT 1
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 2
61525: NEG
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 2
61536: NEG
61537: PUSH
61538: LD_INT 1
61540: NEG
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 2
61548: NEG
61549: PUSH
61550: LD_INT 2
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61572: LD_ADDR_VAR 0 53
61576: PUSH
61577: LD_INT 0
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: LD_INT 1
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 1
61600: PUSH
61601: LD_INT 0
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 1
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: LD_INT 1
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 1
61630: NEG
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: NEG
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 1
61653: NEG
61654: PUSH
61655: LD_INT 2
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: LD_INT 2
61668: NEG
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 1
61676: PUSH
61677: LD_INT 1
61679: NEG
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 2
61687: PUSH
61688: LD_INT 0
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 2
61697: PUSH
61698: LD_INT 1
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 2
61707: PUSH
61708: LD_INT 2
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 1
61717: PUSH
61718: LD_INT 2
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: LD_INT 2
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 1
61737: NEG
61738: PUSH
61739: LD_INT 1
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 2
61748: NEG
61749: PUSH
61750: LD_INT 0
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 2
61759: NEG
61760: PUSH
61761: LD_INT 1
61763: NEG
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 2
61771: NEG
61772: PUSH
61773: LD_INT 2
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61802: LD_ADDR_VAR 0 54
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: LD_INT 0
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: LD_INT 1
61822: NEG
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 1
61830: PUSH
61831: LD_INT 0
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: LD_INT 1
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 1
61860: NEG
61861: PUSH
61862: LD_INT 0
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: NEG
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 1
61883: NEG
61884: PUSH
61885: LD_INT 2
61887: NEG
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 0
61895: PUSH
61896: LD_INT 2
61898: NEG
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 1
61906: PUSH
61907: LD_INT 1
61909: NEG
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 2
61917: PUSH
61918: LD_INT 0
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 2
61927: PUSH
61928: LD_INT 1
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 2
61937: PUSH
61938: LD_INT 2
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 1
61947: PUSH
61948: LD_INT 2
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 0
61957: PUSH
61958: LD_INT 2
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: NEG
61968: PUSH
61969: LD_INT 1
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 2
61978: NEG
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 2
61989: NEG
61990: PUSH
61991: LD_INT 1
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 2
62001: NEG
62002: PUSH
62003: LD_INT 2
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62032: LD_ADDR_VAR 0 55
62036: PUSH
62037: LD_INT 0
62039: PUSH
62040: LD_INT 0
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 0
62049: PUSH
62050: LD_INT 1
62052: NEG
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 1
62060: PUSH
62061: LD_INT 0
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: LD_INT 1
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: LD_INT 1
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: LD_INT 0
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 1
62101: NEG
62102: PUSH
62103: LD_INT 1
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 1
62113: NEG
62114: PUSH
62115: LD_INT 2
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: LD_INT 2
62128: NEG
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 1
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 2
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 2
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 2
62167: PUSH
62168: LD_INT 2
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: PUSH
62178: LD_INT 2
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: LD_INT 2
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 1
62197: NEG
62198: PUSH
62199: LD_INT 1
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 2
62208: NEG
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 2
62219: NEG
62220: PUSH
62221: LD_INT 1
62223: NEG
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 2
62231: NEG
62232: PUSH
62233: LD_INT 2
62235: NEG
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62262: LD_ADDR_VAR 0 56
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 0
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 1
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 1
62300: PUSH
62301: LD_INT 1
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 0
62310: PUSH
62311: LD_INT 1
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 1
62320: NEG
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: LD_INT 1
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: LD_INT 2
62347: NEG
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 0
62355: PUSH
62356: LD_INT 2
62358: NEG
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 1
62366: PUSH
62367: LD_INT 1
62369: NEG
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 2
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 2
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 2
62397: PUSH
62398: LD_INT 2
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 1
62407: PUSH
62408: LD_INT 2
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 0
62417: PUSH
62418: LD_INT 2
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 1
62427: NEG
62428: PUSH
62429: LD_INT 1
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 2
62438: NEG
62439: PUSH
62440: LD_INT 0
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 2
62449: NEG
62450: PUSH
62451: LD_INT 1
62453: NEG
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 2
62461: NEG
62462: PUSH
62463: LD_INT 2
62465: NEG
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62492: LD_ADDR_VAR 0 57
62496: PUSH
62497: LD_INT 0
62499: PUSH
62500: LD_INT 0
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 0
62509: PUSH
62510: LD_INT 1
62512: NEG
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 1
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: LD_INT 1
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 0
62540: PUSH
62541: LD_INT 1
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 1
62550: NEG
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: NEG
62562: PUSH
62563: LD_INT 1
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: NEG
62574: PUSH
62575: LD_INT 2
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 0
62585: PUSH
62586: LD_INT 2
62588: NEG
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: LD_INT 1
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 2
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 2
62617: PUSH
62618: LD_INT 1
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 2
62627: PUSH
62628: LD_INT 2
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: LD_INT 2
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 0
62647: PUSH
62648: LD_INT 2
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 1
62657: NEG
62658: PUSH
62659: LD_INT 1
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 2
62668: NEG
62669: PUSH
62670: LD_INT 0
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 2
62679: NEG
62680: PUSH
62681: LD_INT 1
62683: NEG
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 2
62691: NEG
62692: PUSH
62693: LD_INT 2
62695: NEG
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62722: LD_ADDR_VAR 0 58
62726: PUSH
62727: LD_INT 0
62729: PUSH
62730: LD_INT 0
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 0
62739: PUSH
62740: LD_INT 1
62742: NEG
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 1
62750: PUSH
62751: LD_INT 0
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 1
62760: PUSH
62761: LD_INT 1
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: LD_INT 1
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 1
62780: NEG
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 1
62791: NEG
62792: PUSH
62793: LD_INT 1
62795: NEG
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 1
62803: NEG
62804: PUSH
62805: LD_INT 2
62807: NEG
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 0
62815: PUSH
62816: LD_INT 2
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 1
62826: PUSH
62827: LD_INT 1
62829: NEG
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 2
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 2
62847: PUSH
62848: LD_INT 1
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 2
62857: PUSH
62858: LD_INT 2
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 1
62867: PUSH
62868: LD_INT 2
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 0
62877: PUSH
62878: LD_INT 2
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 1
62887: NEG
62888: PUSH
62889: LD_INT 1
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 2
62898: NEG
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 2
62909: NEG
62910: PUSH
62911: LD_INT 1
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 2
62921: NEG
62922: PUSH
62923: LD_INT 2
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62952: LD_ADDR_VAR 0 59
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 0
62969: PUSH
62970: LD_INT 1
62972: NEG
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 1
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 1
62990: PUSH
62991: LD_INT 1
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 0
63000: PUSH
63001: LD_INT 1
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 1
63010: NEG
63011: PUSH
63012: LD_INT 0
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 1
63021: NEG
63022: PUSH
63023: LD_INT 1
63025: NEG
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63040: LD_ADDR_VAR 0 60
63044: PUSH
63045: LD_INT 0
63047: PUSH
63048: LD_INT 0
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 0
63057: PUSH
63058: LD_INT 1
63060: NEG
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 1
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: LD_INT 1
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 0
63088: PUSH
63089: LD_INT 1
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 1
63098: NEG
63099: PUSH
63100: LD_INT 0
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 1
63109: NEG
63110: PUSH
63111: LD_INT 1
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63128: LD_ADDR_VAR 0 61
63132: PUSH
63133: LD_INT 0
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 0
63145: PUSH
63146: LD_INT 1
63148: NEG
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 1
63156: PUSH
63157: LD_INT 0
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: LD_INT 1
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 0
63176: PUSH
63177: LD_INT 1
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 1
63186: NEG
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 1
63197: NEG
63198: PUSH
63199: LD_INT 1
63201: NEG
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63216: LD_ADDR_VAR 0 62
63220: PUSH
63221: LD_INT 0
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: LD_INT 1
63236: NEG
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 1
63254: PUSH
63255: LD_INT 1
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: LD_INT 1
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 1
63274: NEG
63275: PUSH
63276: LD_INT 0
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: LD_INT 1
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63304: LD_ADDR_VAR 0 63
63308: PUSH
63309: LD_INT 0
63311: PUSH
63312: LD_INT 0
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: LD_INT 1
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 1
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 1
63342: PUSH
63343: LD_INT 1
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 0
63352: PUSH
63353: LD_INT 1
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 1
63362: NEG
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 1
63373: NEG
63374: PUSH
63375: LD_INT 1
63377: NEG
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63392: LD_ADDR_VAR 0 64
63396: PUSH
63397: LD_INT 0
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: LD_INT 1
63412: NEG
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 1
63430: PUSH
63431: LD_INT 1
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 1
63450: NEG
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 1
63461: NEG
63462: PUSH
63463: LD_INT 1
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: ST_TO_ADDR
// end ; 1 :
63480: GO 69377
63482: LD_INT 1
63484: DOUBLE
63485: EQUAL
63486: IFTRUE 63490
63488: GO 66113
63490: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63491: LD_ADDR_VAR 0 11
63495: PUSH
63496: LD_INT 1
63498: NEG
63499: PUSH
63500: LD_INT 3
63502: NEG
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: LD_INT 3
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 1
63521: PUSH
63522: LD_INT 2
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: LIST
63534: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63535: LD_ADDR_VAR 0 12
63539: PUSH
63540: LD_INT 2
63542: PUSH
63543: LD_INT 1
63545: NEG
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 3
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 3
63563: PUSH
63564: LD_INT 1
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: LIST
63575: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63576: LD_ADDR_VAR 0 13
63580: PUSH
63581: LD_INT 3
63583: PUSH
63584: LD_INT 2
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 3
63593: PUSH
63594: LD_INT 3
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 2
63603: PUSH
63604: LD_INT 3
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: LIST
63615: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63616: LD_ADDR_VAR 0 14
63620: PUSH
63621: LD_INT 1
63623: PUSH
63624: LD_INT 3
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: LD_INT 3
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 1
63643: NEG
63644: PUSH
63645: LD_INT 2
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: LIST
63656: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63657: LD_ADDR_VAR 0 15
63661: PUSH
63662: LD_INT 2
63664: NEG
63665: PUSH
63666: LD_INT 1
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 3
63675: NEG
63676: PUSH
63677: LD_INT 0
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 3
63686: NEG
63687: PUSH
63688: LD_INT 1
63690: NEG
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: LIST
63700: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63701: LD_ADDR_VAR 0 16
63705: PUSH
63706: LD_INT 2
63708: NEG
63709: PUSH
63710: LD_INT 3
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 3
63720: NEG
63721: PUSH
63722: LD_INT 2
63724: NEG
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 3
63732: NEG
63733: PUSH
63734: LD_INT 3
63736: NEG
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: LIST
63746: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63747: LD_ADDR_VAR 0 17
63751: PUSH
63752: LD_INT 1
63754: NEG
63755: PUSH
63756: LD_INT 3
63758: NEG
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: LD_INT 3
63769: NEG
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: LD_INT 2
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: LIST
63790: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63791: LD_ADDR_VAR 0 18
63795: PUSH
63796: LD_INT 2
63798: PUSH
63799: LD_INT 1
63801: NEG
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 3
63809: PUSH
63810: LD_INT 0
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 3
63819: PUSH
63820: LD_INT 1
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: LIST
63831: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63832: LD_ADDR_VAR 0 19
63836: PUSH
63837: LD_INT 3
63839: PUSH
63840: LD_INT 2
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 3
63849: PUSH
63850: LD_INT 3
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 2
63859: PUSH
63860: LD_INT 3
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: LIST
63871: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63872: LD_ADDR_VAR 0 20
63876: PUSH
63877: LD_INT 1
63879: PUSH
63880: LD_INT 3
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: LD_INT 3
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 1
63899: NEG
63900: PUSH
63901: LD_INT 2
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: LIST
63912: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63913: LD_ADDR_VAR 0 21
63917: PUSH
63918: LD_INT 2
63920: NEG
63921: PUSH
63922: LD_INT 1
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 3
63931: NEG
63932: PUSH
63933: LD_INT 0
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 3
63942: NEG
63943: PUSH
63944: LD_INT 1
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: LIST
63956: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63957: LD_ADDR_VAR 0 22
63961: PUSH
63962: LD_INT 2
63964: NEG
63965: PUSH
63966: LD_INT 3
63968: NEG
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 3
63976: NEG
63977: PUSH
63978: LD_INT 2
63980: NEG
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 3
63988: NEG
63989: PUSH
63990: LD_INT 3
63992: NEG
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: LIST
64002: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64003: LD_ADDR_VAR 0 23
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: LD_INT 3
64013: NEG
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 1
64021: NEG
64022: PUSH
64023: LD_INT 4
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 1
64033: PUSH
64034: LD_INT 3
64036: NEG
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: LIST
64046: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64047: LD_ADDR_VAR 0 24
64051: PUSH
64052: LD_INT 3
64054: PUSH
64055: LD_INT 0
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 3
64064: PUSH
64065: LD_INT 1
64067: NEG
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 4
64075: PUSH
64076: LD_INT 1
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: LIST
64087: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64088: LD_ADDR_VAR 0 25
64092: PUSH
64093: LD_INT 3
64095: PUSH
64096: LD_INT 3
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 4
64105: PUSH
64106: LD_INT 3
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 3
64115: PUSH
64116: LD_INT 4
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: LIST
64127: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64128: LD_ADDR_VAR 0 26
64132: PUSH
64133: LD_INT 0
64135: PUSH
64136: LD_INT 3
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: LD_INT 4
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 1
64155: NEG
64156: PUSH
64157: LD_INT 3
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: LIST
64168: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64169: LD_ADDR_VAR 0 27
64173: PUSH
64174: LD_INT 3
64176: NEG
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 3
64187: NEG
64188: PUSH
64189: LD_INT 1
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 4
64198: NEG
64199: PUSH
64200: LD_INT 1
64202: NEG
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: LIST
64212: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64213: LD_ADDR_VAR 0 28
64217: PUSH
64218: LD_INT 3
64220: NEG
64221: PUSH
64222: LD_INT 3
64224: NEG
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 3
64232: NEG
64233: PUSH
64234: LD_INT 4
64236: NEG
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 4
64244: NEG
64245: PUSH
64246: LD_INT 3
64248: NEG
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: LIST
64258: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64259: LD_ADDR_VAR 0 29
64263: PUSH
64264: LD_INT 1
64266: NEG
64267: PUSH
64268: LD_INT 3
64270: NEG
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 0
64278: PUSH
64279: LD_INT 3
64281: NEG
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 1
64289: PUSH
64290: LD_INT 2
64292: NEG
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 1
64300: NEG
64301: PUSH
64302: LD_INT 4
64304: NEG
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 0
64312: PUSH
64313: LD_INT 4
64315: NEG
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 1
64323: PUSH
64324: LD_INT 3
64326: NEG
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 1
64334: NEG
64335: PUSH
64336: LD_INT 5
64338: NEG
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: LD_INT 5
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 1
64357: PUSH
64358: LD_INT 4
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 1
64368: NEG
64369: PUSH
64370: LD_INT 6
64372: NEG
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 0
64380: PUSH
64381: LD_INT 6
64383: NEG
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 1
64391: PUSH
64392: LD_INT 5
64394: NEG
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64414: LD_ADDR_VAR 0 30
64418: PUSH
64419: LD_INT 2
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 3
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 3
64442: PUSH
64443: LD_INT 1
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 3
64452: PUSH
64453: LD_INT 1
64455: NEG
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 4
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 4
64473: PUSH
64474: LD_INT 1
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 4
64483: PUSH
64484: LD_INT 1
64486: NEG
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 5
64494: PUSH
64495: LD_INT 0
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 5
64504: PUSH
64505: LD_INT 1
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 5
64514: PUSH
64515: LD_INT 1
64517: NEG
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 6
64525: PUSH
64526: LD_INT 0
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 6
64535: PUSH
64536: LD_INT 1
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64557: LD_ADDR_VAR 0 31
64561: PUSH
64562: LD_INT 3
64564: PUSH
64565: LD_INT 2
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 3
64574: PUSH
64575: LD_INT 3
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 2
64584: PUSH
64585: LD_INT 3
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 4
64594: PUSH
64595: LD_INT 3
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 4
64604: PUSH
64605: LD_INT 4
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 3
64614: PUSH
64615: LD_INT 4
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 5
64624: PUSH
64625: LD_INT 4
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 5
64634: PUSH
64635: LD_INT 5
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 4
64644: PUSH
64645: LD_INT 5
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 6
64654: PUSH
64655: LD_INT 5
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 6
64664: PUSH
64665: LD_INT 6
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 5
64674: PUSH
64675: LD_INT 6
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64696: LD_ADDR_VAR 0 32
64700: PUSH
64701: LD_INT 1
64703: PUSH
64704: LD_INT 3
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 0
64713: PUSH
64714: LD_INT 3
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 1
64723: NEG
64724: PUSH
64725: LD_INT 2
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 1
64734: PUSH
64735: LD_INT 4
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: LD_INT 4
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 1
64754: NEG
64755: PUSH
64756: LD_INT 3
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 1
64765: PUSH
64766: LD_INT 5
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 0
64775: PUSH
64776: LD_INT 5
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 1
64785: NEG
64786: PUSH
64787: LD_INT 4
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 1
64796: PUSH
64797: LD_INT 6
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 0
64806: PUSH
64807: LD_INT 6
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 1
64816: NEG
64817: PUSH
64818: LD_INT 5
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64839: LD_ADDR_VAR 0 33
64843: PUSH
64844: LD_INT 2
64846: NEG
64847: PUSH
64848: LD_INT 1
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 3
64857: NEG
64858: PUSH
64859: LD_INT 0
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 3
64868: NEG
64869: PUSH
64870: LD_INT 1
64872: NEG
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 3
64880: NEG
64881: PUSH
64882: LD_INT 1
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 4
64891: NEG
64892: PUSH
64893: LD_INT 0
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 4
64902: NEG
64903: PUSH
64904: LD_INT 1
64906: NEG
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 4
64914: NEG
64915: PUSH
64916: LD_INT 1
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 5
64925: NEG
64926: PUSH
64927: LD_INT 0
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 5
64936: NEG
64937: PUSH
64938: LD_INT 1
64940: NEG
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 5
64948: NEG
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 6
64959: NEG
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 6
64970: NEG
64971: PUSH
64972: LD_INT 1
64974: NEG
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64994: LD_ADDR_VAR 0 34
64998: PUSH
64999: LD_INT 2
65001: NEG
65002: PUSH
65003: LD_INT 3
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 3
65013: NEG
65014: PUSH
65015: LD_INT 2
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 3
65025: NEG
65026: PUSH
65027: LD_INT 3
65029: NEG
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 3
65037: NEG
65038: PUSH
65039: LD_INT 4
65041: NEG
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 4
65049: NEG
65050: PUSH
65051: LD_INT 3
65053: NEG
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 4
65061: NEG
65062: PUSH
65063: LD_INT 4
65065: NEG
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 4
65073: NEG
65074: PUSH
65075: LD_INT 5
65077: NEG
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 5
65085: NEG
65086: PUSH
65087: LD_INT 4
65089: NEG
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 5
65097: NEG
65098: PUSH
65099: LD_INT 5
65101: NEG
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 5
65109: NEG
65110: PUSH
65111: LD_INT 6
65113: NEG
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 6
65121: NEG
65122: PUSH
65123: LD_INT 5
65125: NEG
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 6
65133: NEG
65134: PUSH
65135: LD_INT 6
65137: NEG
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65157: LD_ADDR_VAR 0 41
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: LD_INT 2
65167: NEG
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 1
65175: NEG
65176: PUSH
65177: LD_INT 3
65179: NEG
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 1
65187: PUSH
65188: LD_INT 2
65190: NEG
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: LIST
65200: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65201: LD_ADDR_VAR 0 42
65205: PUSH
65206: LD_INT 2
65208: PUSH
65209: LD_INT 0
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 2
65218: PUSH
65219: LD_INT 1
65221: NEG
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 3
65229: PUSH
65230: LD_INT 1
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: LIST
65241: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65242: LD_ADDR_VAR 0 43
65246: PUSH
65247: LD_INT 2
65249: PUSH
65250: LD_INT 2
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 3
65259: PUSH
65260: LD_INT 2
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 2
65269: PUSH
65270: LD_INT 3
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: LIST
65281: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65282: LD_ADDR_VAR 0 44
65286: PUSH
65287: LD_INT 0
65289: PUSH
65290: LD_INT 2
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 1
65299: PUSH
65300: LD_INT 3
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 1
65309: NEG
65310: PUSH
65311: LD_INT 2
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: LIST
65322: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65323: LD_ADDR_VAR 0 45
65327: PUSH
65328: LD_INT 2
65330: NEG
65331: PUSH
65332: LD_INT 0
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 2
65341: NEG
65342: PUSH
65343: LD_INT 1
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 3
65352: NEG
65353: PUSH
65354: LD_INT 1
65356: NEG
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: LIST
65366: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65367: LD_ADDR_VAR 0 46
65371: PUSH
65372: LD_INT 2
65374: NEG
65375: PUSH
65376: LD_INT 2
65378: NEG
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 2
65386: NEG
65387: PUSH
65388: LD_INT 3
65390: NEG
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 3
65398: NEG
65399: PUSH
65400: LD_INT 2
65402: NEG
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: LIST
65412: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65413: LD_ADDR_VAR 0 47
65417: PUSH
65418: LD_INT 2
65420: NEG
65421: PUSH
65422: LD_INT 3
65424: NEG
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 1
65432: NEG
65433: PUSH
65434: LD_INT 3
65436: NEG
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65446: LD_ADDR_VAR 0 48
65450: PUSH
65451: LD_INT 1
65453: PUSH
65454: LD_INT 2
65456: NEG
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 2
65464: PUSH
65465: LD_INT 1
65467: NEG
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65477: LD_ADDR_VAR 0 49
65481: PUSH
65482: LD_INT 3
65484: PUSH
65485: LD_INT 1
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 3
65494: PUSH
65495: LD_INT 2
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65506: LD_ADDR_VAR 0 50
65510: PUSH
65511: LD_INT 2
65513: PUSH
65514: LD_INT 3
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 1
65523: PUSH
65524: LD_INT 3
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65535: LD_ADDR_VAR 0 51
65539: PUSH
65540: LD_INT 1
65542: NEG
65543: PUSH
65544: LD_INT 2
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 2
65553: NEG
65554: PUSH
65555: LD_INT 1
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65566: LD_ADDR_VAR 0 52
65570: PUSH
65571: LD_INT 3
65573: NEG
65574: PUSH
65575: LD_INT 1
65577: NEG
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 3
65585: NEG
65586: PUSH
65587: LD_INT 2
65589: NEG
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65599: LD_ADDR_VAR 0 53
65603: PUSH
65604: LD_INT 1
65606: NEG
65607: PUSH
65608: LD_INT 3
65610: NEG
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 0
65618: PUSH
65619: LD_INT 3
65621: NEG
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 1
65629: PUSH
65630: LD_INT 2
65632: NEG
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: LIST
65642: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65643: LD_ADDR_VAR 0 54
65647: PUSH
65648: LD_INT 2
65650: PUSH
65651: LD_INT 1
65653: NEG
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 3
65661: PUSH
65662: LD_INT 0
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 3
65671: PUSH
65672: LD_INT 1
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: LIST
65683: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65684: LD_ADDR_VAR 0 55
65688: PUSH
65689: LD_INT 3
65691: PUSH
65692: LD_INT 2
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 3
65701: PUSH
65702: LD_INT 3
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 2
65711: PUSH
65712: LD_INT 3
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: LIST
65723: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65724: LD_ADDR_VAR 0 56
65728: PUSH
65729: LD_INT 1
65731: PUSH
65732: LD_INT 3
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 0
65741: PUSH
65742: LD_INT 3
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 1
65751: NEG
65752: PUSH
65753: LD_INT 2
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: LIST
65764: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65765: LD_ADDR_VAR 0 57
65769: PUSH
65770: LD_INT 2
65772: NEG
65773: PUSH
65774: LD_INT 1
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 3
65783: NEG
65784: PUSH
65785: LD_INT 0
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 3
65794: NEG
65795: PUSH
65796: LD_INT 1
65798: NEG
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: LIST
65808: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65809: LD_ADDR_VAR 0 58
65813: PUSH
65814: LD_INT 2
65816: NEG
65817: PUSH
65818: LD_INT 3
65820: NEG
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 3
65828: NEG
65829: PUSH
65830: LD_INT 2
65832: NEG
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 3
65840: NEG
65841: PUSH
65842: LD_INT 3
65844: NEG
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: LIST
65854: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65855: LD_ADDR_VAR 0 59
65859: PUSH
65860: LD_INT 1
65862: NEG
65863: PUSH
65864: LD_INT 2
65866: NEG
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 0
65874: PUSH
65875: LD_INT 2
65877: NEG
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 1
65885: PUSH
65886: LD_INT 1
65888: NEG
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: LIST
65898: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65899: LD_ADDR_VAR 0 60
65903: PUSH
65904: LD_INT 1
65906: PUSH
65907: LD_INT 1
65909: NEG
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 2
65917: PUSH
65918: LD_INT 0
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 2
65927: PUSH
65928: LD_INT 1
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: LIST
65939: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65940: LD_ADDR_VAR 0 61
65944: PUSH
65945: LD_INT 2
65947: PUSH
65948: LD_INT 1
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 2
65957: PUSH
65958: LD_INT 2
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 1
65967: PUSH
65968: LD_INT 2
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: LIST
65979: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65980: LD_ADDR_VAR 0 62
65984: PUSH
65985: LD_INT 1
65987: PUSH
65988: LD_INT 2
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 0
65997: PUSH
65998: LD_INT 2
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 1
66007: NEG
66008: PUSH
66009: LD_INT 1
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: LIST
66020: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66021: LD_ADDR_VAR 0 63
66025: PUSH
66026: LD_INT 1
66028: NEG
66029: PUSH
66030: LD_INT 1
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 2
66039: NEG
66040: PUSH
66041: LD_INT 0
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 2
66050: NEG
66051: PUSH
66052: LD_INT 1
66054: NEG
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: LIST
66064: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66065: LD_ADDR_VAR 0 64
66069: PUSH
66070: LD_INT 1
66072: NEG
66073: PUSH
66074: LD_INT 2
66076: NEG
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 2
66084: NEG
66085: PUSH
66086: LD_INT 1
66088: NEG
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 2
66096: NEG
66097: PUSH
66098: LD_INT 2
66100: NEG
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: LIST
66110: ST_TO_ADDR
// end ; 2 :
66111: GO 69377
66113: LD_INT 2
66115: DOUBLE
66116: EQUAL
66117: IFTRUE 66121
66119: GO 69376
66121: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66122: LD_ADDR_VAR 0 29
66126: PUSH
66127: LD_INT 4
66129: PUSH
66130: LD_INT 0
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 4
66139: PUSH
66140: LD_INT 1
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 5
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 5
66160: PUSH
66161: LD_INT 1
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 4
66170: PUSH
66171: LD_INT 1
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 3
66180: PUSH
66181: LD_INT 0
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 3
66190: PUSH
66191: LD_INT 1
66193: NEG
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 3
66201: PUSH
66202: LD_INT 2
66204: NEG
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 5
66212: PUSH
66213: LD_INT 2
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 3
66222: PUSH
66223: LD_INT 3
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 3
66232: PUSH
66233: LD_INT 2
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 4
66242: PUSH
66243: LD_INT 3
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 4
66252: PUSH
66253: LD_INT 4
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 3
66262: PUSH
66263: LD_INT 4
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 2
66272: PUSH
66273: LD_INT 3
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 2
66282: PUSH
66283: LD_INT 2
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 4
66292: PUSH
66293: LD_INT 2
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 2
66302: PUSH
66303: LD_INT 4
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 0
66312: PUSH
66313: LD_INT 4
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 0
66322: PUSH
66323: LD_INT 3
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 1
66332: PUSH
66333: LD_INT 4
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 1
66342: PUSH
66343: LD_INT 5
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 0
66352: PUSH
66353: LD_INT 5
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 1
66362: NEG
66363: PUSH
66364: LD_INT 4
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: LD_INT 1
66373: NEG
66374: PUSH
66375: LD_INT 3
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 2
66384: PUSH
66385: LD_INT 5
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 2
66394: NEG
66395: PUSH
66396: LD_INT 3
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 3
66405: NEG
66406: PUSH
66407: LD_INT 0
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 3
66416: NEG
66417: PUSH
66418: LD_INT 1
66420: NEG
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 2
66428: NEG
66429: PUSH
66430: LD_INT 0
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 2
66439: NEG
66440: PUSH
66441: LD_INT 1
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 3
66450: NEG
66451: PUSH
66452: LD_INT 1
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 4
66461: NEG
66462: PUSH
66463: LD_INT 0
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 4
66472: NEG
66473: PUSH
66474: LD_INT 1
66476: NEG
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 4
66484: NEG
66485: PUSH
66486: LD_INT 2
66488: NEG
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 2
66496: NEG
66497: PUSH
66498: LD_INT 2
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 4
66507: NEG
66508: PUSH
66509: LD_INT 4
66511: NEG
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 4
66519: NEG
66520: PUSH
66521: LD_INT 5
66523: NEG
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 3
66531: NEG
66532: PUSH
66533: LD_INT 4
66535: NEG
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 3
66543: NEG
66544: PUSH
66545: LD_INT 3
66547: NEG
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 4
66555: NEG
66556: PUSH
66557: LD_INT 3
66559: NEG
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 5
66567: NEG
66568: PUSH
66569: LD_INT 4
66571: NEG
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 5
66579: NEG
66580: PUSH
66581: LD_INT 5
66583: NEG
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 3
66591: NEG
66592: PUSH
66593: LD_INT 5
66595: NEG
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 5
66603: NEG
66604: PUSH
66605: LD_INT 3
66607: NEG
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66660: LD_ADDR_VAR 0 30
66664: PUSH
66665: LD_INT 4
66667: PUSH
66668: LD_INT 4
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 4
66677: PUSH
66678: LD_INT 3
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 5
66687: PUSH
66688: LD_INT 4
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 5
66697: PUSH
66698: LD_INT 5
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 4
66707: PUSH
66708: LD_INT 5
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 3
66717: PUSH
66718: LD_INT 4
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 3
66727: PUSH
66728: LD_INT 3
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 5
66737: PUSH
66738: LD_INT 3
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 3
66747: PUSH
66748: LD_INT 5
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 0
66757: PUSH
66758: LD_INT 3
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 0
66767: PUSH
66768: LD_INT 2
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 1
66777: PUSH
66778: LD_INT 3
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 1
66787: PUSH
66788: LD_INT 4
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 0
66797: PUSH
66798: LD_INT 4
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 1
66807: NEG
66808: PUSH
66809: LD_INT 3
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 1
66818: NEG
66819: PUSH
66820: LD_INT 2
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 2
66829: PUSH
66830: LD_INT 4
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 2
66839: NEG
66840: PUSH
66841: LD_INT 2
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 4
66850: NEG
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 4
66861: NEG
66862: PUSH
66863: LD_INT 1
66865: NEG
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 3
66873: NEG
66874: PUSH
66875: LD_INT 0
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 3
66884: NEG
66885: PUSH
66886: LD_INT 1
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 4
66895: NEG
66896: PUSH
66897: LD_INT 1
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 5
66906: NEG
66907: PUSH
66908: LD_INT 0
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 5
66917: NEG
66918: PUSH
66919: LD_INT 1
66921: NEG
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 5
66929: NEG
66930: PUSH
66931: LD_INT 2
66933: NEG
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 3
66941: NEG
66942: PUSH
66943: LD_INT 2
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 3
66952: NEG
66953: PUSH
66954: LD_INT 3
66956: NEG
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 3
66964: NEG
66965: PUSH
66966: LD_INT 4
66968: NEG
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 2
66976: NEG
66977: PUSH
66978: LD_INT 3
66980: NEG
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 2
66988: NEG
66989: PUSH
66990: LD_INT 2
66992: NEG
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 3
67000: NEG
67001: PUSH
67002: LD_INT 2
67004: NEG
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 4
67012: NEG
67013: PUSH
67014: LD_INT 3
67016: NEG
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 4
67024: NEG
67025: PUSH
67026: LD_INT 4
67028: NEG
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: LD_INT 2
67036: NEG
67037: PUSH
67038: LD_INT 4
67040: NEG
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 4
67048: NEG
67049: PUSH
67050: LD_INT 2
67052: NEG
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 0
67060: PUSH
67061: LD_INT 4
67063: NEG
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 0
67071: PUSH
67072: LD_INT 5
67074: NEG
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 1
67082: PUSH
67083: LD_INT 4
67085: NEG
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 1
67093: PUSH
67094: LD_INT 3
67096: NEG
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 0
67104: PUSH
67105: LD_INT 3
67107: NEG
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 1
67115: NEG
67116: PUSH
67117: LD_INT 4
67119: NEG
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 1
67127: NEG
67128: PUSH
67129: LD_INT 5
67131: NEG
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 2
67139: PUSH
67140: LD_INT 3
67142: NEG
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 2
67150: NEG
67151: PUSH
67152: LD_INT 5
67154: NEG
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67207: LD_ADDR_VAR 0 31
67211: PUSH
67212: LD_INT 0
67214: PUSH
67215: LD_INT 4
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 0
67224: PUSH
67225: LD_INT 3
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 1
67234: PUSH
67235: LD_INT 4
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 1
67244: PUSH
67245: LD_INT 5
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 0
67254: PUSH
67255: LD_INT 5
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 1
67264: NEG
67265: PUSH
67266: LD_INT 4
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 1
67275: NEG
67276: PUSH
67277: LD_INT 3
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 2
67286: PUSH
67287: LD_INT 5
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 2
67296: NEG
67297: PUSH
67298: LD_INT 3
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 3
67307: NEG
67308: PUSH
67309: LD_INT 0
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 3
67318: NEG
67319: PUSH
67320: LD_INT 1
67322: NEG
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 2
67330: NEG
67331: PUSH
67332: LD_INT 0
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 2
67341: NEG
67342: PUSH
67343: LD_INT 1
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 3
67352: NEG
67353: PUSH
67354: LD_INT 1
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 4
67363: NEG
67364: PUSH
67365: LD_INT 0
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 4
67374: NEG
67375: PUSH
67376: LD_INT 1
67378: NEG
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 4
67386: NEG
67387: PUSH
67388: LD_INT 2
67390: NEG
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 2
67398: NEG
67399: PUSH
67400: LD_INT 2
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 4
67409: NEG
67410: PUSH
67411: LD_INT 4
67413: NEG
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 4
67421: NEG
67422: PUSH
67423: LD_INT 5
67425: NEG
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 3
67433: NEG
67434: PUSH
67435: LD_INT 4
67437: NEG
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 3
67445: NEG
67446: PUSH
67447: LD_INT 3
67449: NEG
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 4
67457: NEG
67458: PUSH
67459: LD_INT 3
67461: NEG
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 5
67469: NEG
67470: PUSH
67471: LD_INT 4
67473: NEG
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 5
67481: NEG
67482: PUSH
67483: LD_INT 5
67485: NEG
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 3
67493: NEG
67494: PUSH
67495: LD_INT 5
67497: NEG
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 5
67505: NEG
67506: PUSH
67507: LD_INT 3
67509: NEG
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 0
67517: PUSH
67518: LD_INT 3
67520: NEG
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 0
67528: PUSH
67529: LD_INT 4
67531: NEG
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 1
67539: PUSH
67540: LD_INT 3
67542: NEG
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 1
67550: PUSH
67551: LD_INT 2
67553: NEG
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 0
67561: PUSH
67562: LD_INT 2
67564: NEG
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 1
67572: NEG
67573: PUSH
67574: LD_INT 3
67576: NEG
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 1
67584: NEG
67585: PUSH
67586: LD_INT 4
67588: NEG
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 2
67596: PUSH
67597: LD_INT 2
67599: NEG
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 2
67607: NEG
67608: PUSH
67609: LD_INT 4
67611: NEG
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 4
67619: PUSH
67620: LD_INT 0
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 4
67629: PUSH
67630: LD_INT 1
67632: NEG
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 5
67640: PUSH
67641: LD_INT 0
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 5
67650: PUSH
67651: LD_INT 1
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 4
67660: PUSH
67661: LD_INT 1
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 3
67670: PUSH
67671: LD_INT 0
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 3
67680: PUSH
67681: LD_INT 1
67683: NEG
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 3
67691: PUSH
67692: LD_INT 2
67694: NEG
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 5
67702: PUSH
67703: LD_INT 2
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67757: LD_ADDR_VAR 0 32
67761: PUSH
67762: LD_INT 4
67764: NEG
67765: PUSH
67766: LD_INT 0
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 4
67775: NEG
67776: PUSH
67777: LD_INT 1
67779: NEG
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 3
67787: NEG
67788: PUSH
67789: LD_INT 0
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 3
67798: NEG
67799: PUSH
67800: LD_INT 1
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 4
67809: NEG
67810: PUSH
67811: LD_INT 1
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 5
67820: NEG
67821: PUSH
67822: LD_INT 0
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 5
67831: NEG
67832: PUSH
67833: LD_INT 1
67835: NEG
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 5
67843: NEG
67844: PUSH
67845: LD_INT 2
67847: NEG
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: LD_INT 3
67855: NEG
67856: PUSH
67857: LD_INT 2
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 3
67866: NEG
67867: PUSH
67868: LD_INT 3
67870: NEG
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 3
67878: NEG
67879: PUSH
67880: LD_INT 4
67882: NEG
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 2
67890: NEG
67891: PUSH
67892: LD_INT 3
67894: NEG
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 2
67902: NEG
67903: PUSH
67904: LD_INT 2
67906: NEG
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 3
67914: NEG
67915: PUSH
67916: LD_INT 2
67918: NEG
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 4
67926: NEG
67927: PUSH
67928: LD_INT 3
67930: NEG
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 4
67938: NEG
67939: PUSH
67940: LD_INT 4
67942: NEG
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 2
67950: NEG
67951: PUSH
67952: LD_INT 4
67954: NEG
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 4
67962: NEG
67963: PUSH
67964: LD_INT 2
67966: NEG
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: LD_INT 0
67974: PUSH
67975: LD_INT 4
67977: NEG
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 0
67985: PUSH
67986: LD_INT 5
67988: NEG
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: LD_INT 1
67996: PUSH
67997: LD_INT 4
67999: NEG
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 1
68007: PUSH
68008: LD_INT 3
68010: NEG
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 0
68018: PUSH
68019: LD_INT 3
68021: NEG
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 1
68029: NEG
68030: PUSH
68031: LD_INT 4
68033: NEG
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 1
68041: NEG
68042: PUSH
68043: LD_INT 5
68045: NEG
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 2
68053: PUSH
68054: LD_INT 3
68056: NEG
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 2
68064: NEG
68065: PUSH
68066: LD_INT 5
68068: NEG
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: LD_INT 3
68076: PUSH
68077: LD_INT 0
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 3
68086: PUSH
68087: LD_INT 1
68089: NEG
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 4
68097: PUSH
68098: LD_INT 0
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 4
68107: PUSH
68108: LD_INT 1
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 3
68117: PUSH
68118: LD_INT 1
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 2
68127: PUSH
68128: LD_INT 0
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 2
68137: PUSH
68138: LD_INT 1
68140: NEG
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 2
68148: PUSH
68149: LD_INT 2
68151: NEG
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 4
68159: PUSH
68160: LD_INT 2
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 4
68169: PUSH
68170: LD_INT 4
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 4
68179: PUSH
68180: LD_INT 3
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 5
68189: PUSH
68190: LD_INT 4
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 5
68199: PUSH
68200: LD_INT 5
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 4
68209: PUSH
68210: LD_INT 5
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 3
68219: PUSH
68220: LD_INT 4
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 3
68229: PUSH
68230: LD_INT 3
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: LD_INT 5
68239: PUSH
68240: LD_INT 3
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 3
68249: PUSH
68250: LD_INT 5
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68304: LD_ADDR_VAR 0 33
68308: PUSH
68309: LD_INT 4
68311: NEG
68312: PUSH
68313: LD_INT 4
68315: NEG
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 4
68323: NEG
68324: PUSH
68325: LD_INT 5
68327: NEG
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 3
68335: NEG
68336: PUSH
68337: LD_INT 4
68339: NEG
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 3
68347: NEG
68348: PUSH
68349: LD_INT 3
68351: NEG
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 4
68359: NEG
68360: PUSH
68361: LD_INT 3
68363: NEG
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: PUSH
68369: LD_INT 5
68371: NEG
68372: PUSH
68373: LD_INT 4
68375: NEG
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 5
68383: NEG
68384: PUSH
68385: LD_INT 5
68387: NEG
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 3
68395: NEG
68396: PUSH
68397: LD_INT 5
68399: NEG
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 5
68407: NEG
68408: PUSH
68409: LD_INT 3
68411: NEG
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: LD_INT 0
68419: PUSH
68420: LD_INT 3
68422: NEG
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_INT 0
68430: PUSH
68431: LD_INT 4
68433: NEG
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 1
68441: PUSH
68442: LD_INT 3
68444: NEG
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 1
68452: PUSH
68453: LD_INT 2
68455: NEG
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 0
68463: PUSH
68464: LD_INT 2
68466: NEG
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 1
68474: NEG
68475: PUSH
68476: LD_INT 3
68478: NEG
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 1
68486: NEG
68487: PUSH
68488: LD_INT 4
68490: NEG
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PUSH
68496: LD_INT 2
68498: PUSH
68499: LD_INT 2
68501: NEG
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 2
68509: NEG
68510: PUSH
68511: LD_INT 4
68513: NEG
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 4
68521: PUSH
68522: LD_INT 0
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 4
68531: PUSH
68532: LD_INT 1
68534: NEG
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 5
68542: PUSH
68543: LD_INT 0
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 5
68552: PUSH
68553: LD_INT 1
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 4
68562: PUSH
68563: LD_INT 1
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 3
68572: PUSH
68573: LD_INT 0
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 3
68582: PUSH
68583: LD_INT 1
68585: NEG
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 3
68593: PUSH
68594: LD_INT 2
68596: NEG
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 5
68604: PUSH
68605: LD_INT 2
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 3
68614: PUSH
68615: LD_INT 3
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: LD_INT 3
68624: PUSH
68625: LD_INT 2
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 4
68634: PUSH
68635: LD_INT 3
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 4
68644: PUSH
68645: LD_INT 4
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 3
68654: PUSH
68655: LD_INT 4
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: LD_INT 2
68664: PUSH
68665: LD_INT 3
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 2
68674: PUSH
68675: LD_INT 2
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 4
68684: PUSH
68685: LD_INT 2
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 2
68694: PUSH
68695: LD_INT 4
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 0
68704: PUSH
68705: LD_INT 4
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 0
68714: PUSH
68715: LD_INT 3
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 1
68724: PUSH
68725: LD_INT 4
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 1
68734: PUSH
68735: LD_INT 5
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 0
68744: PUSH
68745: LD_INT 5
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 1
68754: NEG
68755: PUSH
68756: LD_INT 4
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 1
68765: NEG
68766: PUSH
68767: LD_INT 3
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 2
68776: PUSH
68777: LD_INT 5
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 2
68786: NEG
68787: PUSH
68788: LD_INT 3
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68842: LD_ADDR_VAR 0 34
68846: PUSH
68847: LD_INT 0
68849: PUSH
68850: LD_INT 4
68852: NEG
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 0
68860: PUSH
68861: LD_INT 5
68863: NEG
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 1
68871: PUSH
68872: LD_INT 4
68874: NEG
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 1
68882: PUSH
68883: LD_INT 3
68885: NEG
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 0
68893: PUSH
68894: LD_INT 3
68896: NEG
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 1
68904: NEG
68905: PUSH
68906: LD_INT 4
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 1
68916: NEG
68917: PUSH
68918: LD_INT 5
68920: NEG
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 2
68928: PUSH
68929: LD_INT 3
68931: NEG
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 2
68939: NEG
68940: PUSH
68941: LD_INT 5
68943: NEG
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 3
68951: PUSH
68952: LD_INT 0
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 3
68961: PUSH
68962: LD_INT 1
68964: NEG
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 4
68972: PUSH
68973: LD_INT 0
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 4
68982: PUSH
68983: LD_INT 1
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 3
68992: PUSH
68993: LD_INT 1
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PUSH
69000: LD_INT 2
69002: PUSH
69003: LD_INT 0
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 2
69012: PUSH
69013: LD_INT 1
69015: NEG
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: LD_INT 2
69023: PUSH
69024: LD_INT 2
69026: NEG
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 4
69034: PUSH
69035: LD_INT 2
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 4
69044: PUSH
69045: LD_INT 4
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 4
69054: PUSH
69055: LD_INT 3
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 5
69064: PUSH
69065: LD_INT 4
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 5
69074: PUSH
69075: LD_INT 5
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 4
69084: PUSH
69085: LD_INT 5
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 3
69094: PUSH
69095: LD_INT 4
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 3
69104: PUSH
69105: LD_INT 3
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 5
69114: PUSH
69115: LD_INT 3
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 3
69124: PUSH
69125: LD_INT 5
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 0
69134: PUSH
69135: LD_INT 3
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 0
69144: PUSH
69145: LD_INT 2
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: LD_INT 1
69154: PUSH
69155: LD_INT 3
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 1
69164: PUSH
69165: LD_INT 4
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 0
69174: PUSH
69175: LD_INT 4
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 1
69184: NEG
69185: PUSH
69186: LD_INT 3
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 1
69195: NEG
69196: PUSH
69197: LD_INT 2
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 2
69206: PUSH
69207: LD_INT 4
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 2
69216: NEG
69217: PUSH
69218: LD_INT 2
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 4
69227: NEG
69228: PUSH
69229: LD_INT 0
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 4
69238: NEG
69239: PUSH
69240: LD_INT 1
69242: NEG
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 3
69250: NEG
69251: PUSH
69252: LD_INT 0
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: LD_INT 3
69261: NEG
69262: PUSH
69263: LD_INT 1
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 4
69272: NEG
69273: PUSH
69274: LD_INT 1
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 5
69283: NEG
69284: PUSH
69285: LD_INT 0
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 5
69294: NEG
69295: PUSH
69296: LD_INT 1
69298: NEG
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 5
69306: NEG
69307: PUSH
69308: LD_INT 2
69310: NEG
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 3
69318: NEG
69319: PUSH
69320: LD_INT 2
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: ST_TO_ADDR
// end ; end ;
69374: GO 69377
69376: POP
// case btype of b_depot , b_warehouse :
69377: LD_VAR 0 1
69381: PUSH
69382: LD_INT 0
69384: DOUBLE
69385: EQUAL
69386: IFTRUE 69396
69388: LD_INT 1
69390: DOUBLE
69391: EQUAL
69392: IFTRUE 69396
69394: GO 69597
69396: POP
// case nation of nation_american :
69397: LD_VAR 0 5
69401: PUSH
69402: LD_INT 1
69404: DOUBLE
69405: EQUAL
69406: IFTRUE 69410
69408: GO 69466
69410: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69411: LD_ADDR_VAR 0 9
69415: PUSH
69416: LD_VAR 0 11
69420: PUSH
69421: LD_VAR 0 12
69425: PUSH
69426: LD_VAR 0 13
69430: PUSH
69431: LD_VAR 0 14
69435: PUSH
69436: LD_VAR 0 15
69440: PUSH
69441: LD_VAR 0 16
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: PUSH
69454: LD_VAR 0 4
69458: PUSH
69459: LD_INT 1
69461: PLUS
69462: ARRAY
69463: ST_TO_ADDR
69464: GO 69595
69466: LD_INT 2
69468: DOUBLE
69469: EQUAL
69470: IFTRUE 69474
69472: GO 69530
69474: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69475: LD_ADDR_VAR 0 9
69479: PUSH
69480: LD_VAR 0 17
69484: PUSH
69485: LD_VAR 0 18
69489: PUSH
69490: LD_VAR 0 19
69494: PUSH
69495: LD_VAR 0 20
69499: PUSH
69500: LD_VAR 0 21
69504: PUSH
69505: LD_VAR 0 22
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: PUSH
69518: LD_VAR 0 4
69522: PUSH
69523: LD_INT 1
69525: PLUS
69526: ARRAY
69527: ST_TO_ADDR
69528: GO 69595
69530: LD_INT 3
69532: DOUBLE
69533: EQUAL
69534: IFTRUE 69538
69536: GO 69594
69538: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69539: LD_ADDR_VAR 0 9
69543: PUSH
69544: LD_VAR 0 23
69548: PUSH
69549: LD_VAR 0 24
69553: PUSH
69554: LD_VAR 0 25
69558: PUSH
69559: LD_VAR 0 26
69563: PUSH
69564: LD_VAR 0 27
69568: PUSH
69569: LD_VAR 0 28
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: PUSH
69582: LD_VAR 0 4
69586: PUSH
69587: LD_INT 1
69589: PLUS
69590: ARRAY
69591: ST_TO_ADDR
69592: GO 69595
69594: POP
69595: GO 70150
69597: LD_INT 2
69599: DOUBLE
69600: EQUAL
69601: IFTRUE 69611
69603: LD_INT 3
69605: DOUBLE
69606: EQUAL
69607: IFTRUE 69611
69609: GO 69667
69611: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69612: LD_ADDR_VAR 0 9
69616: PUSH
69617: LD_VAR 0 29
69621: PUSH
69622: LD_VAR 0 30
69626: PUSH
69627: LD_VAR 0 31
69631: PUSH
69632: LD_VAR 0 32
69636: PUSH
69637: LD_VAR 0 33
69641: PUSH
69642: LD_VAR 0 34
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: PUSH
69655: LD_VAR 0 4
69659: PUSH
69660: LD_INT 1
69662: PLUS
69663: ARRAY
69664: ST_TO_ADDR
69665: GO 70150
69667: LD_INT 16
69669: DOUBLE
69670: EQUAL
69671: IFTRUE 69729
69673: LD_INT 17
69675: DOUBLE
69676: EQUAL
69677: IFTRUE 69729
69679: LD_INT 18
69681: DOUBLE
69682: EQUAL
69683: IFTRUE 69729
69685: LD_INT 19
69687: DOUBLE
69688: EQUAL
69689: IFTRUE 69729
69691: LD_INT 22
69693: DOUBLE
69694: EQUAL
69695: IFTRUE 69729
69697: LD_INT 20
69699: DOUBLE
69700: EQUAL
69701: IFTRUE 69729
69703: LD_INT 21
69705: DOUBLE
69706: EQUAL
69707: IFTRUE 69729
69709: LD_INT 23
69711: DOUBLE
69712: EQUAL
69713: IFTRUE 69729
69715: LD_INT 24
69717: DOUBLE
69718: EQUAL
69719: IFTRUE 69729
69721: LD_INT 25
69723: DOUBLE
69724: EQUAL
69725: IFTRUE 69729
69727: GO 69785
69729: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69730: LD_ADDR_VAR 0 9
69734: PUSH
69735: LD_VAR 0 35
69739: PUSH
69740: LD_VAR 0 36
69744: PUSH
69745: LD_VAR 0 37
69749: PUSH
69750: LD_VAR 0 38
69754: PUSH
69755: LD_VAR 0 39
69759: PUSH
69760: LD_VAR 0 40
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: PUSH
69773: LD_VAR 0 4
69777: PUSH
69778: LD_INT 1
69780: PLUS
69781: ARRAY
69782: ST_TO_ADDR
69783: GO 70150
69785: LD_INT 6
69787: DOUBLE
69788: EQUAL
69789: IFTRUE 69841
69791: LD_INT 7
69793: DOUBLE
69794: EQUAL
69795: IFTRUE 69841
69797: LD_INT 8
69799: DOUBLE
69800: EQUAL
69801: IFTRUE 69841
69803: LD_INT 13
69805: DOUBLE
69806: EQUAL
69807: IFTRUE 69841
69809: LD_INT 12
69811: DOUBLE
69812: EQUAL
69813: IFTRUE 69841
69815: LD_INT 15
69817: DOUBLE
69818: EQUAL
69819: IFTRUE 69841
69821: LD_INT 11
69823: DOUBLE
69824: EQUAL
69825: IFTRUE 69841
69827: LD_INT 14
69829: DOUBLE
69830: EQUAL
69831: IFTRUE 69841
69833: LD_INT 10
69835: DOUBLE
69836: EQUAL
69837: IFTRUE 69841
69839: GO 69897
69841: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69842: LD_ADDR_VAR 0 9
69846: PUSH
69847: LD_VAR 0 41
69851: PUSH
69852: LD_VAR 0 42
69856: PUSH
69857: LD_VAR 0 43
69861: PUSH
69862: LD_VAR 0 44
69866: PUSH
69867: LD_VAR 0 45
69871: PUSH
69872: LD_VAR 0 46
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: PUSH
69885: LD_VAR 0 4
69889: PUSH
69890: LD_INT 1
69892: PLUS
69893: ARRAY
69894: ST_TO_ADDR
69895: GO 70150
69897: LD_INT 36
69899: DOUBLE
69900: EQUAL
69901: IFTRUE 69905
69903: GO 69961
69905: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69906: LD_ADDR_VAR 0 9
69910: PUSH
69911: LD_VAR 0 47
69915: PUSH
69916: LD_VAR 0 48
69920: PUSH
69921: LD_VAR 0 49
69925: PUSH
69926: LD_VAR 0 50
69930: PUSH
69931: LD_VAR 0 51
69935: PUSH
69936: LD_VAR 0 52
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: PUSH
69949: LD_VAR 0 4
69953: PUSH
69954: LD_INT 1
69956: PLUS
69957: ARRAY
69958: ST_TO_ADDR
69959: GO 70150
69961: LD_INT 4
69963: DOUBLE
69964: EQUAL
69965: IFTRUE 69987
69967: LD_INT 5
69969: DOUBLE
69970: EQUAL
69971: IFTRUE 69987
69973: LD_INT 34
69975: DOUBLE
69976: EQUAL
69977: IFTRUE 69987
69979: LD_INT 37
69981: DOUBLE
69982: EQUAL
69983: IFTRUE 69987
69985: GO 70043
69987: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69988: LD_ADDR_VAR 0 9
69992: PUSH
69993: LD_VAR 0 53
69997: PUSH
69998: LD_VAR 0 54
70002: PUSH
70003: LD_VAR 0 55
70007: PUSH
70008: LD_VAR 0 56
70012: PUSH
70013: LD_VAR 0 57
70017: PUSH
70018: LD_VAR 0 58
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: PUSH
70031: LD_VAR 0 4
70035: PUSH
70036: LD_INT 1
70038: PLUS
70039: ARRAY
70040: ST_TO_ADDR
70041: GO 70150
70043: LD_INT 31
70045: DOUBLE
70046: EQUAL
70047: IFTRUE 70093
70049: LD_INT 32
70051: DOUBLE
70052: EQUAL
70053: IFTRUE 70093
70055: LD_INT 33
70057: DOUBLE
70058: EQUAL
70059: IFTRUE 70093
70061: LD_INT 27
70063: DOUBLE
70064: EQUAL
70065: IFTRUE 70093
70067: LD_INT 26
70069: DOUBLE
70070: EQUAL
70071: IFTRUE 70093
70073: LD_INT 28
70075: DOUBLE
70076: EQUAL
70077: IFTRUE 70093
70079: LD_INT 29
70081: DOUBLE
70082: EQUAL
70083: IFTRUE 70093
70085: LD_INT 30
70087: DOUBLE
70088: EQUAL
70089: IFTRUE 70093
70091: GO 70149
70093: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70094: LD_ADDR_VAR 0 9
70098: PUSH
70099: LD_VAR 0 59
70103: PUSH
70104: LD_VAR 0 60
70108: PUSH
70109: LD_VAR 0 61
70113: PUSH
70114: LD_VAR 0 62
70118: PUSH
70119: LD_VAR 0 63
70123: PUSH
70124: LD_VAR 0 64
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: PUSH
70137: LD_VAR 0 4
70141: PUSH
70142: LD_INT 1
70144: PLUS
70145: ARRAY
70146: ST_TO_ADDR
70147: GO 70150
70149: POP
// temp_list2 = [ ] ;
70150: LD_ADDR_VAR 0 10
70154: PUSH
70155: EMPTY
70156: ST_TO_ADDR
// for i in temp_list do
70157: LD_ADDR_VAR 0 8
70161: PUSH
70162: LD_VAR 0 9
70166: PUSH
70167: FOR_IN
70168: IFFALSE 70220
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70170: LD_ADDR_VAR 0 10
70174: PUSH
70175: LD_VAR 0 10
70179: PUSH
70180: LD_VAR 0 8
70184: PUSH
70185: LD_INT 1
70187: ARRAY
70188: PUSH
70189: LD_VAR 0 2
70193: PLUS
70194: PUSH
70195: LD_VAR 0 8
70199: PUSH
70200: LD_INT 2
70202: ARRAY
70203: PUSH
70204: LD_VAR 0 3
70208: PLUS
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: EMPTY
70215: LIST
70216: ADD
70217: ST_TO_ADDR
70218: GO 70167
70220: POP
70221: POP
// result = temp_list2 ;
70222: LD_ADDR_VAR 0 7
70226: PUSH
70227: LD_VAR 0 10
70231: ST_TO_ADDR
// end ;
70232: LD_VAR 0 7
70236: RET
// export function EnemyInRange ( unit , dist ) ; begin
70237: LD_INT 0
70239: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70240: LD_ADDR_VAR 0 3
70244: PUSH
70245: LD_VAR 0 1
70249: PPUSH
70250: CALL_OW 255
70254: PPUSH
70255: LD_VAR 0 1
70259: PPUSH
70260: CALL_OW 250
70264: PPUSH
70265: LD_VAR 0 1
70269: PPUSH
70270: CALL_OW 251
70274: PPUSH
70275: LD_VAR 0 2
70279: PPUSH
70280: CALL 43633 0 4
70284: PUSH
70285: LD_INT 4
70287: ARRAY
70288: ST_TO_ADDR
// end ;
70289: LD_VAR 0 3
70293: RET
// export function PlayerSeeMe ( unit ) ; begin
70294: LD_INT 0
70296: PPUSH
// result := See ( your_side , unit ) ;
70297: LD_ADDR_VAR 0 2
70301: PUSH
70302: LD_OWVAR 2
70306: PPUSH
70307: LD_VAR 0 1
70311: PPUSH
70312: CALL_OW 292
70316: ST_TO_ADDR
// end ;
70317: LD_VAR 0 2
70321: RET
// export function ReverseDir ( unit ) ; begin
70322: LD_INT 0
70324: PPUSH
// if not unit then
70325: LD_VAR 0 1
70329: NOT
70330: IFFALSE 70334
// exit ;
70332: GO 70357
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70334: LD_ADDR_VAR 0 2
70338: PUSH
70339: LD_VAR 0 1
70343: PPUSH
70344: CALL_OW 254
70348: PUSH
70349: LD_INT 3
70351: PLUS
70352: PUSH
70353: LD_INT 6
70355: MOD
70356: ST_TO_ADDR
// end ;
70357: LD_VAR 0 2
70361: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70362: LD_INT 0
70364: PPUSH
70365: PPUSH
70366: PPUSH
70367: PPUSH
70368: PPUSH
// if not hexes then
70369: LD_VAR 0 2
70373: NOT
70374: IFFALSE 70378
// exit ;
70376: GO 70526
// dist := 9999 ;
70378: LD_ADDR_VAR 0 5
70382: PUSH
70383: LD_INT 9999
70385: ST_TO_ADDR
// for i = 1 to hexes do
70386: LD_ADDR_VAR 0 4
70390: PUSH
70391: DOUBLE
70392: LD_INT 1
70394: DEC
70395: ST_TO_ADDR
70396: LD_VAR 0 2
70400: PUSH
70401: FOR_TO
70402: IFFALSE 70514
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70404: LD_VAR 0 1
70408: PPUSH
70409: LD_VAR 0 2
70413: PUSH
70414: LD_VAR 0 4
70418: ARRAY
70419: PUSH
70420: LD_INT 1
70422: ARRAY
70423: PPUSH
70424: LD_VAR 0 2
70428: PUSH
70429: LD_VAR 0 4
70433: ARRAY
70434: PUSH
70435: LD_INT 2
70437: ARRAY
70438: PPUSH
70439: CALL_OW 297
70443: PUSH
70444: LD_VAR 0 5
70448: LESS
70449: IFFALSE 70512
// begin hex := hexes [ i ] ;
70451: LD_ADDR_VAR 0 7
70455: PUSH
70456: LD_VAR 0 2
70460: PUSH
70461: LD_VAR 0 4
70465: ARRAY
70466: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70467: LD_ADDR_VAR 0 5
70471: PUSH
70472: LD_VAR 0 1
70476: PPUSH
70477: LD_VAR 0 2
70481: PUSH
70482: LD_VAR 0 4
70486: ARRAY
70487: PUSH
70488: LD_INT 1
70490: ARRAY
70491: PPUSH
70492: LD_VAR 0 2
70496: PUSH
70497: LD_VAR 0 4
70501: ARRAY
70502: PUSH
70503: LD_INT 2
70505: ARRAY
70506: PPUSH
70507: CALL_OW 297
70511: ST_TO_ADDR
// end ; end ;
70512: GO 70401
70514: POP
70515: POP
// result := hex ;
70516: LD_ADDR_VAR 0 3
70520: PUSH
70521: LD_VAR 0 7
70525: ST_TO_ADDR
// end ;
70526: LD_VAR 0 3
70530: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70531: LD_INT 0
70533: PPUSH
70534: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70535: LD_VAR 0 1
70539: NOT
70540: PUSH
70541: LD_VAR 0 1
70545: PUSH
70546: LD_INT 21
70548: PUSH
70549: LD_INT 2
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: PUSH
70556: LD_INT 23
70558: PUSH
70559: LD_INT 2
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PPUSH
70570: CALL_OW 69
70574: IN
70575: NOT
70576: OR
70577: IFFALSE 70581
// exit ;
70579: GO 70628
// for i = 1 to 3 do
70581: LD_ADDR_VAR 0 3
70585: PUSH
70586: DOUBLE
70587: LD_INT 1
70589: DEC
70590: ST_TO_ADDR
70591: LD_INT 3
70593: PUSH
70594: FOR_TO
70595: IFFALSE 70626
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70597: LD_VAR 0 1
70601: PPUSH
70602: CALL_OW 250
70606: PPUSH
70607: LD_VAR 0 1
70611: PPUSH
70612: CALL_OW 251
70616: PPUSH
70617: LD_INT 1
70619: PPUSH
70620: CALL_OW 453
70624: GO 70594
70626: POP
70627: POP
// end ;
70628: LD_VAR 0 2
70632: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70633: LD_INT 0
70635: PPUSH
70636: PPUSH
70637: PPUSH
70638: PPUSH
70639: PPUSH
70640: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70641: LD_VAR 0 1
70645: NOT
70646: PUSH
70647: LD_VAR 0 2
70651: NOT
70652: OR
70653: PUSH
70654: LD_VAR 0 1
70658: PPUSH
70659: CALL_OW 314
70663: OR
70664: IFFALSE 70668
// exit ;
70666: GO 71109
// x := GetX ( enemy_unit ) ;
70668: LD_ADDR_VAR 0 7
70672: PUSH
70673: LD_VAR 0 2
70677: PPUSH
70678: CALL_OW 250
70682: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70683: LD_ADDR_VAR 0 8
70687: PUSH
70688: LD_VAR 0 2
70692: PPUSH
70693: CALL_OW 251
70697: ST_TO_ADDR
// if not x or not y then
70698: LD_VAR 0 7
70702: NOT
70703: PUSH
70704: LD_VAR 0 8
70708: NOT
70709: OR
70710: IFFALSE 70714
// exit ;
70712: GO 71109
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70714: LD_ADDR_VAR 0 6
70718: PUSH
70719: LD_VAR 0 7
70723: PPUSH
70724: LD_INT 0
70726: PPUSH
70727: LD_INT 4
70729: PPUSH
70730: CALL_OW 272
70734: PUSH
70735: LD_VAR 0 8
70739: PPUSH
70740: LD_INT 0
70742: PPUSH
70743: LD_INT 4
70745: PPUSH
70746: CALL_OW 273
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: LD_VAR 0 7
70759: PPUSH
70760: LD_INT 1
70762: PPUSH
70763: LD_INT 4
70765: PPUSH
70766: CALL_OW 272
70770: PUSH
70771: LD_VAR 0 8
70775: PPUSH
70776: LD_INT 1
70778: PPUSH
70779: LD_INT 4
70781: PPUSH
70782: CALL_OW 273
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_VAR 0 7
70795: PPUSH
70796: LD_INT 2
70798: PPUSH
70799: LD_INT 4
70801: PPUSH
70802: CALL_OW 272
70806: PUSH
70807: LD_VAR 0 8
70811: PPUSH
70812: LD_INT 2
70814: PPUSH
70815: LD_INT 4
70817: PPUSH
70818: CALL_OW 273
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_VAR 0 7
70831: PPUSH
70832: LD_INT 3
70834: PPUSH
70835: LD_INT 4
70837: PPUSH
70838: CALL_OW 272
70842: PUSH
70843: LD_VAR 0 8
70847: PPUSH
70848: LD_INT 3
70850: PPUSH
70851: LD_INT 4
70853: PPUSH
70854: CALL_OW 273
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_VAR 0 7
70867: PPUSH
70868: LD_INT 4
70870: PPUSH
70871: LD_INT 4
70873: PPUSH
70874: CALL_OW 272
70878: PUSH
70879: LD_VAR 0 8
70883: PPUSH
70884: LD_INT 4
70886: PPUSH
70887: LD_INT 4
70889: PPUSH
70890: CALL_OW 273
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_VAR 0 7
70903: PPUSH
70904: LD_INT 5
70906: PPUSH
70907: LD_INT 4
70909: PPUSH
70910: CALL_OW 272
70914: PUSH
70915: LD_VAR 0 8
70919: PPUSH
70920: LD_INT 5
70922: PPUSH
70923: LD_INT 4
70925: PPUSH
70926: CALL_OW 273
70930: PUSH
70931: EMPTY
70932: LIST
70933: LIST
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: ST_TO_ADDR
// for i = tmp downto 1 do
70943: LD_ADDR_VAR 0 4
70947: PUSH
70948: DOUBLE
70949: LD_VAR 0 6
70953: INC
70954: ST_TO_ADDR
70955: LD_INT 1
70957: PUSH
70958: FOR_DOWNTO
70959: IFFALSE 71060
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70961: LD_VAR 0 6
70965: PUSH
70966: LD_VAR 0 4
70970: ARRAY
70971: PUSH
70972: LD_INT 1
70974: ARRAY
70975: PPUSH
70976: LD_VAR 0 6
70980: PUSH
70981: LD_VAR 0 4
70985: ARRAY
70986: PUSH
70987: LD_INT 2
70989: ARRAY
70990: PPUSH
70991: CALL_OW 488
70995: NOT
70996: PUSH
70997: LD_VAR 0 6
71001: PUSH
71002: LD_VAR 0 4
71006: ARRAY
71007: PUSH
71008: LD_INT 1
71010: ARRAY
71011: PPUSH
71012: LD_VAR 0 6
71016: PUSH
71017: LD_VAR 0 4
71021: ARRAY
71022: PUSH
71023: LD_INT 2
71025: ARRAY
71026: PPUSH
71027: CALL_OW 428
71031: PUSH
71032: LD_INT 0
71034: NONEQUAL
71035: OR
71036: IFFALSE 71058
// tmp := Delete ( tmp , i ) ;
71038: LD_ADDR_VAR 0 6
71042: PUSH
71043: LD_VAR 0 6
71047: PPUSH
71048: LD_VAR 0 4
71052: PPUSH
71053: CALL_OW 3
71057: ST_TO_ADDR
71058: GO 70958
71060: POP
71061: POP
// j := GetClosestHex ( unit , tmp ) ;
71062: LD_ADDR_VAR 0 5
71066: PUSH
71067: LD_VAR 0 1
71071: PPUSH
71072: LD_VAR 0 6
71076: PPUSH
71077: CALL 70362 0 2
71081: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71082: LD_VAR 0 1
71086: PPUSH
71087: LD_VAR 0 5
71091: PUSH
71092: LD_INT 1
71094: ARRAY
71095: PPUSH
71096: LD_VAR 0 5
71100: PUSH
71101: LD_INT 2
71103: ARRAY
71104: PPUSH
71105: CALL_OW 111
// end ;
71109: LD_VAR 0 3
71113: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71114: LD_INT 0
71116: PPUSH
71117: PPUSH
71118: PPUSH
// uc_side = 0 ;
71119: LD_ADDR_OWVAR 20
71123: PUSH
71124: LD_INT 0
71126: ST_TO_ADDR
// uc_nation = 0 ;
71127: LD_ADDR_OWVAR 21
71131: PUSH
71132: LD_INT 0
71134: ST_TO_ADDR
// InitHc_All ( ) ;
71135: CALL_OW 584
// InitVc ;
71139: CALL_OW 20
// if mastodonts then
71143: LD_VAR 0 6
71147: IFFALSE 71214
// for i = 1 to mastodonts do
71149: LD_ADDR_VAR 0 11
71153: PUSH
71154: DOUBLE
71155: LD_INT 1
71157: DEC
71158: ST_TO_ADDR
71159: LD_VAR 0 6
71163: PUSH
71164: FOR_TO
71165: IFFALSE 71212
// begin vc_chassis := 31 ;
71167: LD_ADDR_OWVAR 37
71171: PUSH
71172: LD_INT 31
71174: ST_TO_ADDR
// vc_control := control_rider ;
71175: LD_ADDR_OWVAR 38
71179: PUSH
71180: LD_INT 4
71182: ST_TO_ADDR
// animal := CreateVehicle ;
71183: LD_ADDR_VAR 0 12
71187: PUSH
71188: CALL_OW 45
71192: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71193: LD_VAR 0 12
71197: PPUSH
71198: LD_VAR 0 8
71202: PPUSH
71203: LD_INT 0
71205: PPUSH
71206: CALL 73349 0 3
// end ;
71210: GO 71164
71212: POP
71213: POP
// if horses then
71214: LD_VAR 0 5
71218: IFFALSE 71285
// for i = 1 to horses do
71220: LD_ADDR_VAR 0 11
71224: PUSH
71225: DOUBLE
71226: LD_INT 1
71228: DEC
71229: ST_TO_ADDR
71230: LD_VAR 0 5
71234: PUSH
71235: FOR_TO
71236: IFFALSE 71283
// begin hc_class := 21 ;
71238: LD_ADDR_OWVAR 28
71242: PUSH
71243: LD_INT 21
71245: ST_TO_ADDR
// hc_gallery :=  ;
71246: LD_ADDR_OWVAR 33
71250: PUSH
71251: LD_STRING 
71253: ST_TO_ADDR
// animal := CreateHuman ;
71254: LD_ADDR_VAR 0 12
71258: PUSH
71259: CALL_OW 44
71263: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71264: LD_VAR 0 12
71268: PPUSH
71269: LD_VAR 0 8
71273: PPUSH
71274: LD_INT 0
71276: PPUSH
71277: CALL 73349 0 3
// end ;
71281: GO 71235
71283: POP
71284: POP
// if birds then
71285: LD_VAR 0 1
71289: IFFALSE 71356
// for i = 1 to birds do
71291: LD_ADDR_VAR 0 11
71295: PUSH
71296: DOUBLE
71297: LD_INT 1
71299: DEC
71300: ST_TO_ADDR
71301: LD_VAR 0 1
71305: PUSH
71306: FOR_TO
71307: IFFALSE 71354
// begin hc_class = 18 ;
71309: LD_ADDR_OWVAR 28
71313: PUSH
71314: LD_INT 18
71316: ST_TO_ADDR
// hc_gallery =  ;
71317: LD_ADDR_OWVAR 33
71321: PUSH
71322: LD_STRING 
71324: ST_TO_ADDR
// animal := CreateHuman ;
71325: LD_ADDR_VAR 0 12
71329: PUSH
71330: CALL_OW 44
71334: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71335: LD_VAR 0 12
71339: PPUSH
71340: LD_VAR 0 8
71344: PPUSH
71345: LD_INT 0
71347: PPUSH
71348: CALL 73349 0 3
// end ;
71352: GO 71306
71354: POP
71355: POP
// if tigers then
71356: LD_VAR 0 2
71360: IFFALSE 71444
// for i = 1 to tigers do
71362: LD_ADDR_VAR 0 11
71366: PUSH
71367: DOUBLE
71368: LD_INT 1
71370: DEC
71371: ST_TO_ADDR
71372: LD_VAR 0 2
71376: PUSH
71377: FOR_TO
71378: IFFALSE 71442
// begin hc_class = class_tiger ;
71380: LD_ADDR_OWVAR 28
71384: PUSH
71385: LD_INT 14
71387: ST_TO_ADDR
// hc_gallery =  ;
71388: LD_ADDR_OWVAR 33
71392: PUSH
71393: LD_STRING 
71395: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71396: LD_ADDR_OWVAR 35
71400: PUSH
71401: LD_INT 7
71403: NEG
71404: PPUSH
71405: LD_INT 7
71407: PPUSH
71408: CALL_OW 12
71412: ST_TO_ADDR
// animal := CreateHuman ;
71413: LD_ADDR_VAR 0 12
71417: PUSH
71418: CALL_OW 44
71422: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71423: LD_VAR 0 12
71427: PPUSH
71428: LD_VAR 0 8
71432: PPUSH
71433: LD_INT 0
71435: PPUSH
71436: CALL 73349 0 3
// end ;
71440: GO 71377
71442: POP
71443: POP
// if apemans then
71444: LD_VAR 0 3
71448: IFFALSE 71571
// for i = 1 to apemans do
71450: LD_ADDR_VAR 0 11
71454: PUSH
71455: DOUBLE
71456: LD_INT 1
71458: DEC
71459: ST_TO_ADDR
71460: LD_VAR 0 3
71464: PUSH
71465: FOR_TO
71466: IFFALSE 71569
// begin hc_class = class_apeman ;
71468: LD_ADDR_OWVAR 28
71472: PUSH
71473: LD_INT 12
71475: ST_TO_ADDR
// hc_gallery =  ;
71476: LD_ADDR_OWVAR 33
71480: PUSH
71481: LD_STRING 
71483: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71484: LD_ADDR_OWVAR 35
71488: PUSH
71489: LD_INT 2
71491: NEG
71492: PPUSH
71493: LD_INT 2
71495: PPUSH
71496: CALL_OW 12
71500: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71501: LD_ADDR_OWVAR 31
71505: PUSH
71506: LD_INT 1
71508: PPUSH
71509: LD_INT 3
71511: PPUSH
71512: CALL_OW 12
71516: PUSH
71517: LD_INT 1
71519: PPUSH
71520: LD_INT 3
71522: PPUSH
71523: CALL_OW 12
71527: PUSH
71528: LD_INT 0
71530: PUSH
71531: LD_INT 0
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: ST_TO_ADDR
// animal := CreateHuman ;
71540: LD_ADDR_VAR 0 12
71544: PUSH
71545: CALL_OW 44
71549: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71550: LD_VAR 0 12
71554: PPUSH
71555: LD_VAR 0 8
71559: PPUSH
71560: LD_INT 0
71562: PPUSH
71563: CALL 73349 0 3
// end ;
71567: GO 71465
71569: POP
71570: POP
// if enchidnas then
71571: LD_VAR 0 4
71575: IFFALSE 71642
// for i = 1 to enchidnas do
71577: LD_ADDR_VAR 0 11
71581: PUSH
71582: DOUBLE
71583: LD_INT 1
71585: DEC
71586: ST_TO_ADDR
71587: LD_VAR 0 4
71591: PUSH
71592: FOR_TO
71593: IFFALSE 71640
// begin hc_class = 13 ;
71595: LD_ADDR_OWVAR 28
71599: PUSH
71600: LD_INT 13
71602: ST_TO_ADDR
// hc_gallery =  ;
71603: LD_ADDR_OWVAR 33
71607: PUSH
71608: LD_STRING 
71610: ST_TO_ADDR
// animal := CreateHuman ;
71611: LD_ADDR_VAR 0 12
71615: PUSH
71616: CALL_OW 44
71620: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71621: LD_VAR 0 12
71625: PPUSH
71626: LD_VAR 0 8
71630: PPUSH
71631: LD_INT 0
71633: PPUSH
71634: CALL 73349 0 3
// end ;
71638: GO 71592
71640: POP
71641: POP
// if fishes then
71642: LD_VAR 0 7
71646: IFFALSE 71713
// for i = 1 to fishes do
71648: LD_ADDR_VAR 0 11
71652: PUSH
71653: DOUBLE
71654: LD_INT 1
71656: DEC
71657: ST_TO_ADDR
71658: LD_VAR 0 7
71662: PUSH
71663: FOR_TO
71664: IFFALSE 71711
// begin hc_class = 20 ;
71666: LD_ADDR_OWVAR 28
71670: PUSH
71671: LD_INT 20
71673: ST_TO_ADDR
// hc_gallery =  ;
71674: LD_ADDR_OWVAR 33
71678: PUSH
71679: LD_STRING 
71681: ST_TO_ADDR
// animal := CreateHuman ;
71682: LD_ADDR_VAR 0 12
71686: PUSH
71687: CALL_OW 44
71691: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71692: LD_VAR 0 12
71696: PPUSH
71697: LD_VAR 0 9
71701: PPUSH
71702: LD_INT 0
71704: PPUSH
71705: CALL 73349 0 3
// end ;
71709: GO 71663
71711: POP
71712: POP
// end ;
71713: LD_VAR 0 10
71717: RET
// export function WantHeal ( sci , unit ) ; begin
71718: LD_INT 0
71720: PPUSH
// if GetTaskList ( sci ) > 0 then
71721: LD_VAR 0 1
71725: PPUSH
71726: CALL_OW 437
71730: PUSH
71731: LD_INT 0
71733: GREATER
71734: IFFALSE 71804
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71736: LD_VAR 0 1
71740: PPUSH
71741: CALL_OW 437
71745: PUSH
71746: LD_INT 1
71748: ARRAY
71749: PUSH
71750: LD_INT 1
71752: ARRAY
71753: PUSH
71754: LD_STRING l
71756: EQUAL
71757: PUSH
71758: LD_VAR 0 1
71762: PPUSH
71763: CALL_OW 437
71767: PUSH
71768: LD_INT 1
71770: ARRAY
71771: PUSH
71772: LD_INT 4
71774: ARRAY
71775: PUSH
71776: LD_VAR 0 2
71780: EQUAL
71781: AND
71782: IFFALSE 71794
// result := true else
71784: LD_ADDR_VAR 0 3
71788: PUSH
71789: LD_INT 1
71791: ST_TO_ADDR
71792: GO 71802
// result := false ;
71794: LD_ADDR_VAR 0 3
71798: PUSH
71799: LD_INT 0
71801: ST_TO_ADDR
// end else
71802: GO 71812
// result := false ;
71804: LD_ADDR_VAR 0 3
71808: PUSH
71809: LD_INT 0
71811: ST_TO_ADDR
// end ;
71812: LD_VAR 0 3
71816: RET
// export function HealTarget ( sci ) ; begin
71817: LD_INT 0
71819: PPUSH
// if not sci then
71820: LD_VAR 0 1
71824: NOT
71825: IFFALSE 71829
// exit ;
71827: GO 71894
// result := 0 ;
71829: LD_ADDR_VAR 0 2
71833: PUSH
71834: LD_INT 0
71836: ST_TO_ADDR
// if GetTaskList ( sci ) then
71837: LD_VAR 0 1
71841: PPUSH
71842: CALL_OW 437
71846: IFFALSE 71894
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71848: LD_VAR 0 1
71852: PPUSH
71853: CALL_OW 437
71857: PUSH
71858: LD_INT 1
71860: ARRAY
71861: PUSH
71862: LD_INT 1
71864: ARRAY
71865: PUSH
71866: LD_STRING l
71868: EQUAL
71869: IFFALSE 71894
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71871: LD_ADDR_VAR 0 2
71875: PUSH
71876: LD_VAR 0 1
71880: PPUSH
71881: CALL_OW 437
71885: PUSH
71886: LD_INT 1
71888: ARRAY
71889: PUSH
71890: LD_INT 4
71892: ARRAY
71893: ST_TO_ADDR
// end ;
71894: LD_VAR 0 2
71898: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71899: LD_INT 0
71901: PPUSH
71902: PPUSH
71903: PPUSH
71904: PPUSH
// if not base_units then
71905: LD_VAR 0 1
71909: NOT
71910: IFFALSE 71914
// exit ;
71912: GO 72001
// result := false ;
71914: LD_ADDR_VAR 0 2
71918: PUSH
71919: LD_INT 0
71921: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71922: LD_ADDR_VAR 0 5
71926: PUSH
71927: LD_VAR 0 1
71931: PPUSH
71932: LD_INT 21
71934: PUSH
71935: LD_INT 3
71937: PUSH
71938: EMPTY
71939: LIST
71940: LIST
71941: PPUSH
71942: CALL_OW 72
71946: ST_TO_ADDR
// if not tmp then
71947: LD_VAR 0 5
71951: NOT
71952: IFFALSE 71956
// exit ;
71954: GO 72001
// for i in tmp do
71956: LD_ADDR_VAR 0 3
71960: PUSH
71961: LD_VAR 0 5
71965: PUSH
71966: FOR_IN
71967: IFFALSE 71999
// begin result := EnemyInRange ( i , 22 ) ;
71969: LD_ADDR_VAR 0 2
71973: PUSH
71974: LD_VAR 0 3
71978: PPUSH
71979: LD_INT 22
71981: PPUSH
71982: CALL 70237 0 2
71986: ST_TO_ADDR
// if result then
71987: LD_VAR 0 2
71991: IFFALSE 71997
// exit ;
71993: POP
71994: POP
71995: GO 72001
// end ;
71997: GO 71966
71999: POP
72000: POP
// end ;
72001: LD_VAR 0 2
72005: RET
// export function FilterByTag ( units , tag ) ; begin
72006: LD_INT 0
72008: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72009: LD_ADDR_VAR 0 3
72013: PUSH
72014: LD_VAR 0 1
72018: PPUSH
72019: LD_INT 120
72021: PUSH
72022: LD_VAR 0 2
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: PPUSH
72031: CALL_OW 72
72035: ST_TO_ADDR
// end ;
72036: LD_VAR 0 3
72040: RET
// export function IsDriver ( un ) ; begin
72041: LD_INT 0
72043: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72044: LD_ADDR_VAR 0 2
72048: PUSH
72049: LD_VAR 0 1
72053: PUSH
72054: LD_INT 55
72056: PUSH
72057: EMPTY
72058: LIST
72059: PPUSH
72060: CALL_OW 69
72064: IN
72065: ST_TO_ADDR
// end ;
72066: LD_VAR 0 2
72070: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72071: LD_INT 0
72073: PPUSH
72074: PPUSH
// list := [ ] ;
72075: LD_ADDR_VAR 0 5
72079: PUSH
72080: EMPTY
72081: ST_TO_ADDR
// case d of 0 :
72082: LD_VAR 0 3
72086: PUSH
72087: LD_INT 0
72089: DOUBLE
72090: EQUAL
72091: IFTRUE 72095
72093: GO 72228
72095: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72096: LD_ADDR_VAR 0 5
72100: PUSH
72101: LD_VAR 0 1
72105: PUSH
72106: LD_INT 4
72108: MINUS
72109: PUSH
72110: LD_VAR 0 2
72114: PUSH
72115: LD_INT 4
72117: MINUS
72118: PUSH
72119: LD_INT 2
72121: PUSH
72122: EMPTY
72123: LIST
72124: LIST
72125: LIST
72126: PUSH
72127: LD_VAR 0 1
72131: PUSH
72132: LD_INT 3
72134: MINUS
72135: PUSH
72136: LD_VAR 0 2
72140: PUSH
72141: LD_INT 1
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: LIST
72148: PUSH
72149: LD_VAR 0 1
72153: PUSH
72154: LD_INT 4
72156: PLUS
72157: PUSH
72158: LD_VAR 0 2
72162: PUSH
72163: LD_INT 4
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: LIST
72170: PUSH
72171: LD_VAR 0 1
72175: PUSH
72176: LD_INT 3
72178: PLUS
72179: PUSH
72180: LD_VAR 0 2
72184: PUSH
72185: LD_INT 3
72187: PLUS
72188: PUSH
72189: LD_INT 5
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: LIST
72196: PUSH
72197: LD_VAR 0 1
72201: PUSH
72202: LD_VAR 0 2
72206: PUSH
72207: LD_INT 4
72209: PLUS
72210: PUSH
72211: LD_INT 0
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: LIST
72218: PUSH
72219: EMPTY
72220: LIST
72221: LIST
72222: LIST
72223: LIST
72224: LIST
72225: ST_TO_ADDR
// end ; 1 :
72226: GO 72926
72228: LD_INT 1
72230: DOUBLE
72231: EQUAL
72232: IFTRUE 72236
72234: GO 72369
72236: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72237: LD_ADDR_VAR 0 5
72241: PUSH
72242: LD_VAR 0 1
72246: PUSH
72247: LD_VAR 0 2
72251: PUSH
72252: LD_INT 4
72254: MINUS
72255: PUSH
72256: LD_INT 3
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: LIST
72263: PUSH
72264: LD_VAR 0 1
72268: PUSH
72269: LD_INT 3
72271: MINUS
72272: PUSH
72273: LD_VAR 0 2
72277: PUSH
72278: LD_INT 3
72280: MINUS
72281: PUSH
72282: LD_INT 2
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: LIST
72289: PUSH
72290: LD_VAR 0 1
72294: PUSH
72295: LD_INT 4
72297: MINUS
72298: PUSH
72299: LD_VAR 0 2
72303: PUSH
72304: LD_INT 1
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: LIST
72311: PUSH
72312: LD_VAR 0 1
72316: PUSH
72317: LD_VAR 0 2
72321: PUSH
72322: LD_INT 3
72324: PLUS
72325: PUSH
72326: LD_INT 0
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: LIST
72333: PUSH
72334: LD_VAR 0 1
72338: PUSH
72339: LD_INT 4
72341: PLUS
72342: PUSH
72343: LD_VAR 0 2
72347: PUSH
72348: LD_INT 4
72350: PLUS
72351: PUSH
72352: LD_INT 5
72354: PUSH
72355: EMPTY
72356: LIST
72357: LIST
72358: LIST
72359: PUSH
72360: EMPTY
72361: LIST
72362: LIST
72363: LIST
72364: LIST
72365: LIST
72366: ST_TO_ADDR
// end ; 2 :
72367: GO 72926
72369: LD_INT 2
72371: DOUBLE
72372: EQUAL
72373: IFTRUE 72377
72375: GO 72506
72377: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72378: LD_ADDR_VAR 0 5
72382: PUSH
72383: LD_VAR 0 1
72387: PUSH
72388: LD_VAR 0 2
72392: PUSH
72393: LD_INT 3
72395: MINUS
72396: PUSH
72397: LD_INT 3
72399: PUSH
72400: EMPTY
72401: LIST
72402: LIST
72403: LIST
72404: PUSH
72405: LD_VAR 0 1
72409: PUSH
72410: LD_INT 4
72412: PLUS
72413: PUSH
72414: LD_VAR 0 2
72418: PUSH
72419: LD_INT 4
72421: PUSH
72422: EMPTY
72423: LIST
72424: LIST
72425: LIST
72426: PUSH
72427: LD_VAR 0 1
72431: PUSH
72432: LD_VAR 0 2
72436: PUSH
72437: LD_INT 4
72439: PLUS
72440: PUSH
72441: LD_INT 0
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: LIST
72448: PUSH
72449: LD_VAR 0 1
72453: PUSH
72454: LD_INT 3
72456: MINUS
72457: PUSH
72458: LD_VAR 0 2
72462: PUSH
72463: LD_INT 1
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: LIST
72470: PUSH
72471: LD_VAR 0 1
72475: PUSH
72476: LD_INT 4
72478: MINUS
72479: PUSH
72480: LD_VAR 0 2
72484: PUSH
72485: LD_INT 4
72487: MINUS
72488: PUSH
72489: LD_INT 2
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: LIST
72496: PUSH
72497: EMPTY
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: ST_TO_ADDR
// end ; 3 :
72504: GO 72926
72506: LD_INT 3
72508: DOUBLE
72509: EQUAL
72510: IFTRUE 72514
72512: GO 72647
72514: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72515: LD_ADDR_VAR 0 5
72519: PUSH
72520: LD_VAR 0 1
72524: PUSH
72525: LD_INT 3
72527: PLUS
72528: PUSH
72529: LD_VAR 0 2
72533: PUSH
72534: LD_INT 4
72536: PUSH
72537: EMPTY
72538: LIST
72539: LIST
72540: LIST
72541: PUSH
72542: LD_VAR 0 1
72546: PUSH
72547: LD_INT 4
72549: PLUS
72550: PUSH
72551: LD_VAR 0 2
72555: PUSH
72556: LD_INT 4
72558: PLUS
72559: PUSH
72560: LD_INT 5
72562: PUSH
72563: EMPTY
72564: LIST
72565: LIST
72566: LIST
72567: PUSH
72568: LD_VAR 0 1
72572: PUSH
72573: LD_INT 4
72575: MINUS
72576: PUSH
72577: LD_VAR 0 2
72581: PUSH
72582: LD_INT 1
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: LIST
72589: PUSH
72590: LD_VAR 0 1
72594: PUSH
72595: LD_VAR 0 2
72599: PUSH
72600: LD_INT 4
72602: MINUS
72603: PUSH
72604: LD_INT 3
72606: PUSH
72607: EMPTY
72608: LIST
72609: LIST
72610: LIST
72611: PUSH
72612: LD_VAR 0 1
72616: PUSH
72617: LD_INT 3
72619: MINUS
72620: PUSH
72621: LD_VAR 0 2
72625: PUSH
72626: LD_INT 3
72628: MINUS
72629: PUSH
72630: LD_INT 2
72632: PUSH
72633: EMPTY
72634: LIST
72635: LIST
72636: LIST
72637: PUSH
72638: EMPTY
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: ST_TO_ADDR
// end ; 4 :
72645: GO 72926
72647: LD_INT 4
72649: DOUBLE
72650: EQUAL
72651: IFTRUE 72655
72653: GO 72788
72655: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72656: LD_ADDR_VAR 0 5
72660: PUSH
72661: LD_VAR 0 1
72665: PUSH
72666: LD_VAR 0 2
72670: PUSH
72671: LD_INT 4
72673: PLUS
72674: PUSH
72675: LD_INT 0
72677: PUSH
72678: EMPTY
72679: LIST
72680: LIST
72681: LIST
72682: PUSH
72683: LD_VAR 0 1
72687: PUSH
72688: LD_INT 3
72690: PLUS
72691: PUSH
72692: LD_VAR 0 2
72696: PUSH
72697: LD_INT 3
72699: PLUS
72700: PUSH
72701: LD_INT 5
72703: PUSH
72704: EMPTY
72705: LIST
72706: LIST
72707: LIST
72708: PUSH
72709: LD_VAR 0 1
72713: PUSH
72714: LD_INT 4
72716: PLUS
72717: PUSH
72718: LD_VAR 0 2
72722: PUSH
72723: LD_INT 4
72725: PUSH
72726: EMPTY
72727: LIST
72728: LIST
72729: LIST
72730: PUSH
72731: LD_VAR 0 1
72735: PUSH
72736: LD_VAR 0 2
72740: PUSH
72741: LD_INT 3
72743: MINUS
72744: PUSH
72745: LD_INT 3
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: LIST
72752: PUSH
72753: LD_VAR 0 1
72757: PUSH
72758: LD_INT 4
72760: MINUS
72761: PUSH
72762: LD_VAR 0 2
72766: PUSH
72767: LD_INT 4
72769: MINUS
72770: PUSH
72771: LD_INT 2
72773: PUSH
72774: EMPTY
72775: LIST
72776: LIST
72777: LIST
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: ST_TO_ADDR
// end ; 5 :
72786: GO 72926
72788: LD_INT 5
72790: DOUBLE
72791: EQUAL
72792: IFTRUE 72796
72794: GO 72925
72796: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72797: LD_ADDR_VAR 0 5
72801: PUSH
72802: LD_VAR 0 1
72806: PUSH
72807: LD_INT 4
72809: MINUS
72810: PUSH
72811: LD_VAR 0 2
72815: PUSH
72816: LD_INT 1
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: LIST
72823: PUSH
72824: LD_VAR 0 1
72828: PUSH
72829: LD_VAR 0 2
72833: PUSH
72834: LD_INT 4
72836: MINUS
72837: PUSH
72838: LD_INT 3
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: LIST
72845: PUSH
72846: LD_VAR 0 1
72850: PUSH
72851: LD_INT 4
72853: PLUS
72854: PUSH
72855: LD_VAR 0 2
72859: PUSH
72860: LD_INT 4
72862: PLUS
72863: PUSH
72864: LD_INT 5
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: LIST
72871: PUSH
72872: LD_VAR 0 1
72876: PUSH
72877: LD_INT 3
72879: PLUS
72880: PUSH
72881: LD_VAR 0 2
72885: PUSH
72886: LD_INT 4
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: LIST
72893: PUSH
72894: LD_VAR 0 1
72898: PUSH
72899: LD_VAR 0 2
72903: PUSH
72904: LD_INT 3
72906: PLUS
72907: PUSH
72908: LD_INT 0
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: LIST
72915: PUSH
72916: EMPTY
72917: LIST
72918: LIST
72919: LIST
72920: LIST
72921: LIST
72922: ST_TO_ADDR
// end ; end ;
72923: GO 72926
72925: POP
// result := list ;
72926: LD_ADDR_VAR 0 4
72930: PUSH
72931: LD_VAR 0 5
72935: ST_TO_ADDR
// end ;
72936: LD_VAR 0 4
72940: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72941: LD_INT 0
72943: PPUSH
72944: PPUSH
72945: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72946: LD_VAR 0 1
72950: NOT
72951: PUSH
72952: LD_VAR 0 2
72956: PUSH
72957: LD_INT 1
72959: PUSH
72960: LD_INT 2
72962: PUSH
72963: LD_INT 3
72965: PUSH
72966: LD_INT 4
72968: PUSH
72969: EMPTY
72970: LIST
72971: LIST
72972: LIST
72973: LIST
72974: IN
72975: NOT
72976: OR
72977: IFFALSE 72981
// exit ;
72979: GO 73073
// tmp := [ ] ;
72981: LD_ADDR_VAR 0 5
72985: PUSH
72986: EMPTY
72987: ST_TO_ADDR
// for i in units do
72988: LD_ADDR_VAR 0 4
72992: PUSH
72993: LD_VAR 0 1
72997: PUSH
72998: FOR_IN
72999: IFFALSE 73042
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73001: LD_ADDR_VAR 0 5
73005: PUSH
73006: LD_VAR 0 5
73010: PPUSH
73011: LD_VAR 0 5
73015: PUSH
73016: LD_INT 1
73018: PLUS
73019: PPUSH
73020: LD_VAR 0 4
73024: PPUSH
73025: LD_VAR 0 2
73029: PPUSH
73030: CALL_OW 259
73034: PPUSH
73035: CALL_OW 2
73039: ST_TO_ADDR
73040: GO 72998
73042: POP
73043: POP
// if not tmp then
73044: LD_VAR 0 5
73048: NOT
73049: IFFALSE 73053
// exit ;
73051: GO 73073
// result := SortListByListDesc ( units , tmp ) ;
73053: LD_ADDR_VAR 0 3
73057: PUSH
73058: LD_VAR 0 1
73062: PPUSH
73063: LD_VAR 0 5
73067: PPUSH
73068: CALL_OW 77
73072: ST_TO_ADDR
// end ;
73073: LD_VAR 0 3
73077: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73078: LD_INT 0
73080: PPUSH
73081: PPUSH
73082: PPUSH
// result := false ;
73083: LD_ADDR_VAR 0 3
73087: PUSH
73088: LD_INT 0
73090: ST_TO_ADDR
// x := GetX ( building ) ;
73091: LD_ADDR_VAR 0 4
73095: PUSH
73096: LD_VAR 0 2
73100: PPUSH
73101: CALL_OW 250
73105: ST_TO_ADDR
// y := GetY ( building ) ;
73106: LD_ADDR_VAR 0 5
73110: PUSH
73111: LD_VAR 0 2
73115: PPUSH
73116: CALL_OW 251
73120: ST_TO_ADDR
// if not building or not x or not y then
73121: LD_VAR 0 2
73125: NOT
73126: PUSH
73127: LD_VAR 0 4
73131: NOT
73132: OR
73133: PUSH
73134: LD_VAR 0 5
73138: NOT
73139: OR
73140: IFFALSE 73144
// exit ;
73142: GO 73236
// if GetTaskList ( unit ) then
73144: LD_VAR 0 1
73148: PPUSH
73149: CALL_OW 437
73153: IFFALSE 73236
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73155: LD_STRING e
73157: PUSH
73158: LD_VAR 0 1
73162: PPUSH
73163: CALL_OW 437
73167: PUSH
73168: LD_INT 1
73170: ARRAY
73171: PUSH
73172: LD_INT 1
73174: ARRAY
73175: EQUAL
73176: PUSH
73177: LD_VAR 0 4
73181: PUSH
73182: LD_VAR 0 1
73186: PPUSH
73187: CALL_OW 437
73191: PUSH
73192: LD_INT 1
73194: ARRAY
73195: PUSH
73196: LD_INT 2
73198: ARRAY
73199: EQUAL
73200: AND
73201: PUSH
73202: LD_VAR 0 5
73206: PUSH
73207: LD_VAR 0 1
73211: PPUSH
73212: CALL_OW 437
73216: PUSH
73217: LD_INT 1
73219: ARRAY
73220: PUSH
73221: LD_INT 3
73223: ARRAY
73224: EQUAL
73225: AND
73226: IFFALSE 73236
// result := true end ;
73228: LD_ADDR_VAR 0 3
73232: PUSH
73233: LD_INT 1
73235: ST_TO_ADDR
// end ;
73236: LD_VAR 0 3
73240: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73241: LD_INT 0
73243: PPUSH
// result := false ;
73244: LD_ADDR_VAR 0 4
73248: PUSH
73249: LD_INT 0
73251: ST_TO_ADDR
// if GetTaskList ( unit ) then
73252: LD_VAR 0 1
73256: PPUSH
73257: CALL_OW 437
73261: IFFALSE 73344
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73263: LD_STRING M
73265: PUSH
73266: LD_VAR 0 1
73270: PPUSH
73271: CALL_OW 437
73275: PUSH
73276: LD_INT 1
73278: ARRAY
73279: PUSH
73280: LD_INT 1
73282: ARRAY
73283: EQUAL
73284: PUSH
73285: LD_VAR 0 2
73289: PUSH
73290: LD_VAR 0 1
73294: PPUSH
73295: CALL_OW 437
73299: PUSH
73300: LD_INT 1
73302: ARRAY
73303: PUSH
73304: LD_INT 2
73306: ARRAY
73307: EQUAL
73308: AND
73309: PUSH
73310: LD_VAR 0 3
73314: PUSH
73315: LD_VAR 0 1
73319: PPUSH
73320: CALL_OW 437
73324: PUSH
73325: LD_INT 1
73327: ARRAY
73328: PUSH
73329: LD_INT 3
73331: ARRAY
73332: EQUAL
73333: AND
73334: IFFALSE 73344
// result := true ;
73336: LD_ADDR_VAR 0 4
73340: PUSH
73341: LD_INT 1
73343: ST_TO_ADDR
// end ; end ;
73344: LD_VAR 0 4
73348: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73349: LD_INT 0
73351: PPUSH
73352: PPUSH
73353: PPUSH
73354: PPUSH
// if not unit or not area then
73355: LD_VAR 0 1
73359: NOT
73360: PUSH
73361: LD_VAR 0 2
73365: NOT
73366: OR
73367: IFFALSE 73371
// exit ;
73369: GO 73535
// tmp := AreaToList ( area , i ) ;
73371: LD_ADDR_VAR 0 6
73375: PUSH
73376: LD_VAR 0 2
73380: PPUSH
73381: LD_VAR 0 5
73385: PPUSH
73386: CALL_OW 517
73390: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73391: LD_ADDR_VAR 0 5
73395: PUSH
73396: DOUBLE
73397: LD_INT 1
73399: DEC
73400: ST_TO_ADDR
73401: LD_VAR 0 6
73405: PUSH
73406: LD_INT 1
73408: ARRAY
73409: PUSH
73410: FOR_TO
73411: IFFALSE 73533
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73413: LD_ADDR_VAR 0 7
73417: PUSH
73418: LD_VAR 0 6
73422: PUSH
73423: LD_INT 1
73425: ARRAY
73426: PUSH
73427: LD_VAR 0 5
73431: ARRAY
73432: PUSH
73433: LD_VAR 0 6
73437: PUSH
73438: LD_INT 2
73440: ARRAY
73441: PUSH
73442: LD_VAR 0 5
73446: ARRAY
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73452: LD_VAR 0 7
73456: PUSH
73457: LD_INT 1
73459: ARRAY
73460: PPUSH
73461: LD_VAR 0 7
73465: PUSH
73466: LD_INT 2
73468: ARRAY
73469: PPUSH
73470: CALL_OW 428
73474: PUSH
73475: LD_INT 0
73477: EQUAL
73478: IFFALSE 73531
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73480: LD_VAR 0 1
73484: PPUSH
73485: LD_VAR 0 7
73489: PUSH
73490: LD_INT 1
73492: ARRAY
73493: PPUSH
73494: LD_VAR 0 7
73498: PUSH
73499: LD_INT 2
73501: ARRAY
73502: PPUSH
73503: LD_VAR 0 3
73507: PPUSH
73508: CALL_OW 48
// result := IsPlaced ( unit ) ;
73512: LD_ADDR_VAR 0 4
73516: PUSH
73517: LD_VAR 0 1
73521: PPUSH
73522: CALL_OW 305
73526: ST_TO_ADDR
// exit ;
73527: POP
73528: POP
73529: GO 73535
// end ; end ;
73531: GO 73410
73533: POP
73534: POP
// end ;
73535: LD_VAR 0 4
73539: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73540: LD_INT 0
73542: PPUSH
73543: PPUSH
73544: PPUSH
// if not side or side > 8 then
73545: LD_VAR 0 1
73549: NOT
73550: PUSH
73551: LD_VAR 0 1
73555: PUSH
73556: LD_INT 8
73558: GREATER
73559: OR
73560: IFFALSE 73564
// exit ;
73562: GO 73751
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73564: LD_ADDR_VAR 0 4
73568: PUSH
73569: LD_INT 22
73571: PUSH
73572: LD_VAR 0 1
73576: PUSH
73577: EMPTY
73578: LIST
73579: LIST
73580: PUSH
73581: LD_INT 21
73583: PUSH
73584: LD_INT 3
73586: PUSH
73587: EMPTY
73588: LIST
73589: LIST
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: PPUSH
73595: CALL_OW 69
73599: ST_TO_ADDR
// if not tmp then
73600: LD_VAR 0 4
73604: NOT
73605: IFFALSE 73609
// exit ;
73607: GO 73751
// enable_addtolog := true ;
73609: LD_ADDR_OWVAR 81
73613: PUSH
73614: LD_INT 1
73616: ST_TO_ADDR
// AddToLog ( [ ) ;
73617: LD_STRING [
73619: PPUSH
73620: CALL_OW 561
// for i in tmp do
73624: LD_ADDR_VAR 0 3
73628: PUSH
73629: LD_VAR 0 4
73633: PUSH
73634: FOR_IN
73635: IFFALSE 73742
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73637: LD_STRING [
73639: PUSH
73640: LD_VAR 0 3
73644: PPUSH
73645: CALL_OW 266
73649: STR
73650: PUSH
73651: LD_STRING , 
73653: STR
73654: PUSH
73655: LD_VAR 0 3
73659: PPUSH
73660: CALL_OW 250
73664: STR
73665: PUSH
73666: LD_STRING , 
73668: STR
73669: PUSH
73670: LD_VAR 0 3
73674: PPUSH
73675: CALL_OW 251
73679: STR
73680: PUSH
73681: LD_STRING , 
73683: STR
73684: PUSH
73685: LD_VAR 0 3
73689: PPUSH
73690: CALL_OW 254
73694: STR
73695: PUSH
73696: LD_STRING , 
73698: STR
73699: PUSH
73700: LD_VAR 0 3
73704: PPUSH
73705: LD_INT 1
73707: PPUSH
73708: CALL_OW 268
73712: STR
73713: PUSH
73714: LD_STRING , 
73716: STR
73717: PUSH
73718: LD_VAR 0 3
73722: PPUSH
73723: LD_INT 2
73725: PPUSH
73726: CALL_OW 268
73730: STR
73731: PUSH
73732: LD_STRING ],
73734: STR
73735: PPUSH
73736: CALL_OW 561
// end ;
73740: GO 73634
73742: POP
73743: POP
// AddToLog ( ]; ) ;
73744: LD_STRING ];
73746: PPUSH
73747: CALL_OW 561
// end ;
73751: LD_VAR 0 2
73755: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73756: LD_INT 0
73758: PPUSH
73759: PPUSH
73760: PPUSH
73761: PPUSH
73762: PPUSH
// if not area or not rate or not max then
73763: LD_VAR 0 1
73767: NOT
73768: PUSH
73769: LD_VAR 0 2
73773: NOT
73774: OR
73775: PUSH
73776: LD_VAR 0 4
73780: NOT
73781: OR
73782: IFFALSE 73786
// exit ;
73784: GO 73975
// while 1 do
73786: LD_INT 1
73788: IFFALSE 73975
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73790: LD_ADDR_VAR 0 9
73794: PUSH
73795: LD_VAR 0 1
73799: PPUSH
73800: LD_INT 1
73802: PPUSH
73803: CALL_OW 287
73807: PUSH
73808: LD_INT 10
73810: MUL
73811: ST_TO_ADDR
// r := rate / 10 ;
73812: LD_ADDR_VAR 0 7
73816: PUSH
73817: LD_VAR 0 2
73821: PUSH
73822: LD_INT 10
73824: DIVREAL
73825: ST_TO_ADDR
// time := 1 1$00 ;
73826: LD_ADDR_VAR 0 8
73830: PUSH
73831: LD_INT 2100
73833: ST_TO_ADDR
// if amount < min then
73834: LD_VAR 0 9
73838: PUSH
73839: LD_VAR 0 3
73843: LESS
73844: IFFALSE 73862
// r := r * 2 else
73846: LD_ADDR_VAR 0 7
73850: PUSH
73851: LD_VAR 0 7
73855: PUSH
73856: LD_INT 2
73858: MUL
73859: ST_TO_ADDR
73860: GO 73888
// if amount > max then
73862: LD_VAR 0 9
73866: PUSH
73867: LD_VAR 0 4
73871: GREATER
73872: IFFALSE 73888
// r := r / 2 ;
73874: LD_ADDR_VAR 0 7
73878: PUSH
73879: LD_VAR 0 7
73883: PUSH
73884: LD_INT 2
73886: DIVREAL
73887: ST_TO_ADDR
// time := time / r ;
73888: LD_ADDR_VAR 0 8
73892: PUSH
73893: LD_VAR 0 8
73897: PUSH
73898: LD_VAR 0 7
73902: DIVREAL
73903: ST_TO_ADDR
// if time < 0 then
73904: LD_VAR 0 8
73908: PUSH
73909: LD_INT 0
73911: LESS
73912: IFFALSE 73929
// time := time * - 1 ;
73914: LD_ADDR_VAR 0 8
73918: PUSH
73919: LD_VAR 0 8
73923: PUSH
73924: LD_INT 1
73926: NEG
73927: MUL
73928: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73929: LD_VAR 0 8
73933: PUSH
73934: LD_INT 35
73936: PPUSH
73937: LD_INT 875
73939: PPUSH
73940: CALL_OW 12
73944: PLUS
73945: PPUSH
73946: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73950: LD_INT 1
73952: PPUSH
73953: LD_INT 5
73955: PPUSH
73956: CALL_OW 12
73960: PPUSH
73961: LD_VAR 0 1
73965: PPUSH
73966: LD_INT 1
73968: PPUSH
73969: CALL_OW 55
// end ;
73973: GO 73786
// end ;
73975: LD_VAR 0 5
73979: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73980: LD_INT 0
73982: PPUSH
73983: PPUSH
73984: PPUSH
73985: PPUSH
73986: PPUSH
73987: PPUSH
73988: PPUSH
73989: PPUSH
// if not turrets or not factories then
73990: LD_VAR 0 1
73994: NOT
73995: PUSH
73996: LD_VAR 0 2
74000: NOT
74001: OR
74002: IFFALSE 74006
// exit ;
74004: GO 74313
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74006: LD_ADDR_VAR 0 10
74010: PUSH
74011: LD_INT 5
74013: PUSH
74014: LD_INT 6
74016: PUSH
74017: EMPTY
74018: LIST
74019: LIST
74020: PUSH
74021: LD_INT 2
74023: PUSH
74024: LD_INT 4
74026: PUSH
74027: EMPTY
74028: LIST
74029: LIST
74030: PUSH
74031: LD_INT 3
74033: PUSH
74034: LD_INT 5
74036: PUSH
74037: EMPTY
74038: LIST
74039: LIST
74040: PUSH
74041: EMPTY
74042: LIST
74043: LIST
74044: LIST
74045: PUSH
74046: LD_INT 24
74048: PUSH
74049: LD_INT 25
74051: PUSH
74052: EMPTY
74053: LIST
74054: LIST
74055: PUSH
74056: LD_INT 23
74058: PUSH
74059: LD_INT 27
74061: PUSH
74062: EMPTY
74063: LIST
74064: LIST
74065: PUSH
74066: EMPTY
74067: LIST
74068: LIST
74069: PUSH
74070: LD_INT 42
74072: PUSH
74073: LD_INT 43
74075: PUSH
74076: EMPTY
74077: LIST
74078: LIST
74079: PUSH
74080: LD_INT 44
74082: PUSH
74083: LD_INT 46
74085: PUSH
74086: EMPTY
74087: LIST
74088: LIST
74089: PUSH
74090: LD_INT 45
74092: PUSH
74093: LD_INT 47
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: PUSH
74100: EMPTY
74101: LIST
74102: LIST
74103: LIST
74104: PUSH
74105: EMPTY
74106: LIST
74107: LIST
74108: LIST
74109: ST_TO_ADDR
// result := [ ] ;
74110: LD_ADDR_VAR 0 3
74114: PUSH
74115: EMPTY
74116: ST_TO_ADDR
// for i in turrets do
74117: LD_ADDR_VAR 0 4
74121: PUSH
74122: LD_VAR 0 1
74126: PUSH
74127: FOR_IN
74128: IFFALSE 74311
// begin nat := GetNation ( i ) ;
74130: LD_ADDR_VAR 0 7
74134: PUSH
74135: LD_VAR 0 4
74139: PPUSH
74140: CALL_OW 248
74144: ST_TO_ADDR
// weapon := 0 ;
74145: LD_ADDR_VAR 0 8
74149: PUSH
74150: LD_INT 0
74152: ST_TO_ADDR
// if not nat then
74153: LD_VAR 0 7
74157: NOT
74158: IFFALSE 74162
// continue ;
74160: GO 74127
// for j in list [ nat ] do
74162: LD_ADDR_VAR 0 5
74166: PUSH
74167: LD_VAR 0 10
74171: PUSH
74172: LD_VAR 0 7
74176: ARRAY
74177: PUSH
74178: FOR_IN
74179: IFFALSE 74220
// if GetBWeapon ( i ) = j [ 1 ] then
74181: LD_VAR 0 4
74185: PPUSH
74186: CALL_OW 269
74190: PUSH
74191: LD_VAR 0 5
74195: PUSH
74196: LD_INT 1
74198: ARRAY
74199: EQUAL
74200: IFFALSE 74218
// begin weapon := j [ 2 ] ;
74202: LD_ADDR_VAR 0 8
74206: PUSH
74207: LD_VAR 0 5
74211: PUSH
74212: LD_INT 2
74214: ARRAY
74215: ST_TO_ADDR
// break ;
74216: GO 74220
// end ;
74218: GO 74178
74220: POP
74221: POP
// if not weapon then
74222: LD_VAR 0 8
74226: NOT
74227: IFFALSE 74231
// continue ;
74229: GO 74127
// for k in factories do
74231: LD_ADDR_VAR 0 6
74235: PUSH
74236: LD_VAR 0 2
74240: PUSH
74241: FOR_IN
74242: IFFALSE 74307
// begin weapons := AvailableWeaponList ( k ) ;
74244: LD_ADDR_VAR 0 9
74248: PUSH
74249: LD_VAR 0 6
74253: PPUSH
74254: CALL_OW 478
74258: ST_TO_ADDR
// if not weapons then
74259: LD_VAR 0 9
74263: NOT
74264: IFFALSE 74268
// continue ;
74266: GO 74241
// if weapon in weapons then
74268: LD_VAR 0 8
74272: PUSH
74273: LD_VAR 0 9
74277: IN
74278: IFFALSE 74305
// begin result := [ i , weapon ] ;
74280: LD_ADDR_VAR 0 3
74284: PUSH
74285: LD_VAR 0 4
74289: PUSH
74290: LD_VAR 0 8
74294: PUSH
74295: EMPTY
74296: LIST
74297: LIST
74298: ST_TO_ADDR
// exit ;
74299: POP
74300: POP
74301: POP
74302: POP
74303: GO 74313
// end ; end ;
74305: GO 74241
74307: POP
74308: POP
// end ;
74309: GO 74127
74311: POP
74312: POP
// end ;
74313: LD_VAR 0 3
74317: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74318: LD_INT 0
74320: PPUSH
// if not side or side > 8 then
74321: LD_VAR 0 3
74325: NOT
74326: PUSH
74327: LD_VAR 0 3
74331: PUSH
74332: LD_INT 8
74334: GREATER
74335: OR
74336: IFFALSE 74340
// exit ;
74338: GO 74399
// if not range then
74340: LD_VAR 0 4
74344: NOT
74345: IFFALSE 74356
// range := - 12 ;
74347: LD_ADDR_VAR 0 4
74351: PUSH
74352: LD_INT 12
74354: NEG
74355: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74356: LD_VAR 0 1
74360: PPUSH
74361: LD_VAR 0 2
74365: PPUSH
74366: LD_VAR 0 3
74370: PPUSH
74371: LD_VAR 0 4
74375: PPUSH
74376: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74380: LD_VAR 0 1
74384: PPUSH
74385: LD_VAR 0 2
74389: PPUSH
74390: LD_VAR 0 3
74394: PPUSH
74395: CALL_OW 331
// end ;
74399: LD_VAR 0 5
74403: RET
// export function Video ( mode ) ; begin
74404: LD_INT 0
74406: PPUSH
// ingame_video = mode ;
74407: LD_ADDR_OWVAR 52
74411: PUSH
74412: LD_VAR 0 1
74416: ST_TO_ADDR
// interface_hidden = mode ;
74417: LD_ADDR_OWVAR 54
74421: PUSH
74422: LD_VAR 0 1
74426: ST_TO_ADDR
// end ;
74427: LD_VAR 0 2
74431: RET
// export function Join ( array , element ) ; begin
74432: LD_INT 0
74434: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74435: LD_ADDR_VAR 0 3
74439: PUSH
74440: LD_VAR 0 1
74444: PPUSH
74445: LD_VAR 0 1
74449: PUSH
74450: LD_INT 1
74452: PLUS
74453: PPUSH
74454: LD_VAR 0 2
74458: PPUSH
74459: CALL_OW 1
74463: ST_TO_ADDR
// end ;
74464: LD_VAR 0 3
74468: RET
// export function JoinUnion ( array , element ) ; begin
74469: LD_INT 0
74471: PPUSH
// result := array union element ;
74472: LD_ADDR_VAR 0 3
74476: PUSH
74477: LD_VAR 0 1
74481: PUSH
74482: LD_VAR 0 2
74486: UNION
74487: ST_TO_ADDR
// end ;
74488: LD_VAR 0 3
74492: RET
// export function GetBehemoths ( side ) ; begin
74493: LD_INT 0
74495: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74496: LD_ADDR_VAR 0 2
74500: PUSH
74501: LD_INT 22
74503: PUSH
74504: LD_VAR 0 1
74508: PUSH
74509: EMPTY
74510: LIST
74511: LIST
74512: PUSH
74513: LD_INT 31
74515: PUSH
74516: LD_INT 25
74518: PUSH
74519: EMPTY
74520: LIST
74521: LIST
74522: PUSH
74523: EMPTY
74524: LIST
74525: LIST
74526: PPUSH
74527: CALL_OW 69
74531: ST_TO_ADDR
// end ;
74532: LD_VAR 0 2
74536: RET
// export function Shuffle ( array ) ; var i , index ; begin
74537: LD_INT 0
74539: PPUSH
74540: PPUSH
74541: PPUSH
// result := [ ] ;
74542: LD_ADDR_VAR 0 2
74546: PUSH
74547: EMPTY
74548: ST_TO_ADDR
// if not array then
74549: LD_VAR 0 1
74553: NOT
74554: IFFALSE 74558
// exit ;
74556: GO 74657
// Randomize ;
74558: CALL_OW 10
// for i = array downto 1 do
74562: LD_ADDR_VAR 0 3
74566: PUSH
74567: DOUBLE
74568: LD_VAR 0 1
74572: INC
74573: ST_TO_ADDR
74574: LD_INT 1
74576: PUSH
74577: FOR_DOWNTO
74578: IFFALSE 74655
// begin index := rand ( 1 , array ) ;
74580: LD_ADDR_VAR 0 4
74584: PUSH
74585: LD_INT 1
74587: PPUSH
74588: LD_VAR 0 1
74592: PPUSH
74593: CALL_OW 12
74597: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74598: LD_ADDR_VAR 0 2
74602: PUSH
74603: LD_VAR 0 2
74607: PPUSH
74608: LD_VAR 0 2
74612: PUSH
74613: LD_INT 1
74615: PLUS
74616: PPUSH
74617: LD_VAR 0 1
74621: PUSH
74622: LD_VAR 0 4
74626: ARRAY
74627: PPUSH
74628: CALL_OW 2
74632: ST_TO_ADDR
// array := Delete ( array , index ) ;
74633: LD_ADDR_VAR 0 1
74637: PUSH
74638: LD_VAR 0 1
74642: PPUSH
74643: LD_VAR 0 4
74647: PPUSH
74648: CALL_OW 3
74652: ST_TO_ADDR
// end ;
74653: GO 74577
74655: POP
74656: POP
// end ;
74657: LD_VAR 0 2
74661: RET
// export function GetBaseMaterials ( base ) ; begin
74662: LD_INT 0
74664: PPUSH
// result := [ 0 , 0 , 0 ] ;
74665: LD_ADDR_VAR 0 2
74669: PUSH
74670: LD_INT 0
74672: PUSH
74673: LD_INT 0
74675: PUSH
74676: LD_INT 0
74678: PUSH
74679: EMPTY
74680: LIST
74681: LIST
74682: LIST
74683: ST_TO_ADDR
// if not base then
74684: LD_VAR 0 1
74688: NOT
74689: IFFALSE 74693
// exit ;
74691: GO 74742
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74693: LD_ADDR_VAR 0 2
74697: PUSH
74698: LD_VAR 0 1
74702: PPUSH
74703: LD_INT 1
74705: PPUSH
74706: CALL_OW 275
74710: PUSH
74711: LD_VAR 0 1
74715: PPUSH
74716: LD_INT 2
74718: PPUSH
74719: CALL_OW 275
74723: PUSH
74724: LD_VAR 0 1
74728: PPUSH
74729: LD_INT 3
74731: PPUSH
74732: CALL_OW 275
74736: PUSH
74737: EMPTY
74738: LIST
74739: LIST
74740: LIST
74741: ST_TO_ADDR
// end ;
74742: LD_VAR 0 2
74746: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74747: LD_INT 0
74749: PPUSH
74750: PPUSH
// result := array ;
74751: LD_ADDR_VAR 0 3
74755: PUSH
74756: LD_VAR 0 1
74760: ST_TO_ADDR
// if size > 0 then
74761: LD_VAR 0 2
74765: PUSH
74766: LD_INT 0
74768: GREATER
74769: IFFALSE 74815
// for i := array downto size do
74771: LD_ADDR_VAR 0 4
74775: PUSH
74776: DOUBLE
74777: LD_VAR 0 1
74781: INC
74782: ST_TO_ADDR
74783: LD_VAR 0 2
74787: PUSH
74788: FOR_DOWNTO
74789: IFFALSE 74813
// result := Delete ( result , result ) ;
74791: LD_ADDR_VAR 0 3
74795: PUSH
74796: LD_VAR 0 3
74800: PPUSH
74801: LD_VAR 0 3
74805: PPUSH
74806: CALL_OW 3
74810: ST_TO_ADDR
74811: GO 74788
74813: POP
74814: POP
// end ;
74815: LD_VAR 0 3
74819: RET
// export function ComExit ( unit ) ; var tmp ; begin
74820: LD_INT 0
74822: PPUSH
74823: PPUSH
// if not IsInUnit ( unit ) then
74824: LD_VAR 0 1
74828: PPUSH
74829: CALL_OW 310
74833: NOT
74834: IFFALSE 74838
// exit ;
74836: GO 74898
// tmp := IsInUnit ( unit ) ;
74838: LD_ADDR_VAR 0 3
74842: PUSH
74843: LD_VAR 0 1
74847: PPUSH
74848: CALL_OW 310
74852: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74853: LD_VAR 0 3
74857: PPUSH
74858: CALL_OW 247
74862: PUSH
74863: LD_INT 2
74865: EQUAL
74866: IFFALSE 74879
// ComExitVehicle ( unit ) else
74868: LD_VAR 0 1
74872: PPUSH
74873: CALL_OW 121
74877: GO 74888
// ComExitBuilding ( unit ) ;
74879: LD_VAR 0 1
74883: PPUSH
74884: CALL_OW 122
// result := tmp ;
74888: LD_ADDR_VAR 0 2
74892: PUSH
74893: LD_VAR 0 3
74897: ST_TO_ADDR
// end ;
74898: LD_VAR 0 2
74902: RET
// export function ComExitAll ( units ) ; var i ; begin
74903: LD_INT 0
74905: PPUSH
74906: PPUSH
// if not units then
74907: LD_VAR 0 1
74911: NOT
74912: IFFALSE 74916
// exit ;
74914: GO 74942
// for i in units do
74916: LD_ADDR_VAR 0 3
74920: PUSH
74921: LD_VAR 0 1
74925: PUSH
74926: FOR_IN
74927: IFFALSE 74940
// ComExit ( i ) ;
74929: LD_VAR 0 3
74933: PPUSH
74934: CALL 74820 0 1
74938: GO 74926
74940: POP
74941: POP
// end ;
74942: LD_VAR 0 2
74946: RET
// export function ResetHc ; begin
74947: LD_INT 0
74949: PPUSH
// InitHc ;
74950: CALL_OW 19
// hc_importance := 0 ;
74954: LD_ADDR_OWVAR 32
74958: PUSH
74959: LD_INT 0
74961: ST_TO_ADDR
// end ;
74962: LD_VAR 0 1
74966: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74967: LD_INT 0
74969: PPUSH
74970: PPUSH
74971: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74972: LD_ADDR_VAR 0 6
74976: PUSH
74977: LD_VAR 0 1
74981: PUSH
74982: LD_VAR 0 3
74986: PLUS
74987: PUSH
74988: LD_INT 2
74990: DIV
74991: ST_TO_ADDR
// if _x < 0 then
74992: LD_VAR 0 6
74996: PUSH
74997: LD_INT 0
74999: LESS
75000: IFFALSE 75017
// _x := _x * - 1 ;
75002: LD_ADDR_VAR 0 6
75006: PUSH
75007: LD_VAR 0 6
75011: PUSH
75012: LD_INT 1
75014: NEG
75015: MUL
75016: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75017: LD_ADDR_VAR 0 7
75021: PUSH
75022: LD_VAR 0 2
75026: PUSH
75027: LD_VAR 0 4
75031: PLUS
75032: PUSH
75033: LD_INT 2
75035: DIV
75036: ST_TO_ADDR
// if _y < 0 then
75037: LD_VAR 0 7
75041: PUSH
75042: LD_INT 0
75044: LESS
75045: IFFALSE 75062
// _y := _y * - 1 ;
75047: LD_ADDR_VAR 0 7
75051: PUSH
75052: LD_VAR 0 7
75056: PUSH
75057: LD_INT 1
75059: NEG
75060: MUL
75061: ST_TO_ADDR
// result := [ _x , _y ] ;
75062: LD_ADDR_VAR 0 5
75066: PUSH
75067: LD_VAR 0 6
75071: PUSH
75072: LD_VAR 0 7
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: ST_TO_ADDR
// end ;
75081: LD_VAR 0 5
75085: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75086: LD_INT 0
75088: PPUSH
75089: PPUSH
75090: PPUSH
75091: PPUSH
// task := GetTaskList ( unit ) ;
75092: LD_ADDR_VAR 0 7
75096: PUSH
75097: LD_VAR 0 1
75101: PPUSH
75102: CALL_OW 437
75106: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75107: LD_VAR 0 7
75111: NOT
75112: PUSH
75113: LD_VAR 0 1
75117: PPUSH
75118: LD_VAR 0 2
75122: PPUSH
75123: CALL_OW 308
75127: NOT
75128: AND
75129: IFFALSE 75133
// exit ;
75131: GO 75251
// if IsInArea ( unit , area ) then
75133: LD_VAR 0 1
75137: PPUSH
75138: LD_VAR 0 2
75142: PPUSH
75143: CALL_OW 308
75147: IFFALSE 75165
// begin ComMoveToArea ( unit , goAway ) ;
75149: LD_VAR 0 1
75153: PPUSH
75154: LD_VAR 0 3
75158: PPUSH
75159: CALL_OW 113
// exit ;
75163: GO 75251
// end ; if task [ 1 ] [ 1 ] <> M then
75165: LD_VAR 0 7
75169: PUSH
75170: LD_INT 1
75172: ARRAY
75173: PUSH
75174: LD_INT 1
75176: ARRAY
75177: PUSH
75178: LD_STRING M
75180: NONEQUAL
75181: IFFALSE 75185
// exit ;
75183: GO 75251
// x := task [ 1 ] [ 2 ] ;
75185: LD_ADDR_VAR 0 5
75189: PUSH
75190: LD_VAR 0 7
75194: PUSH
75195: LD_INT 1
75197: ARRAY
75198: PUSH
75199: LD_INT 2
75201: ARRAY
75202: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75203: LD_ADDR_VAR 0 6
75207: PUSH
75208: LD_VAR 0 7
75212: PUSH
75213: LD_INT 1
75215: ARRAY
75216: PUSH
75217: LD_INT 3
75219: ARRAY
75220: ST_TO_ADDR
// if InArea ( x , y , area ) then
75221: LD_VAR 0 5
75225: PPUSH
75226: LD_VAR 0 6
75230: PPUSH
75231: LD_VAR 0 2
75235: PPUSH
75236: CALL_OW 309
75240: IFFALSE 75251
// ComStop ( unit ) ;
75242: LD_VAR 0 1
75246: PPUSH
75247: CALL_OW 141
// end ;
75251: LD_VAR 0 4
75255: RET
// export function Abs ( value ) ; begin
75256: LD_INT 0
75258: PPUSH
// result := value ;
75259: LD_ADDR_VAR 0 2
75263: PUSH
75264: LD_VAR 0 1
75268: ST_TO_ADDR
// if value < 0 then
75269: LD_VAR 0 1
75273: PUSH
75274: LD_INT 0
75276: LESS
75277: IFFALSE 75294
// result := value * - 1 ;
75279: LD_ADDR_VAR 0 2
75283: PUSH
75284: LD_VAR 0 1
75288: PUSH
75289: LD_INT 1
75291: NEG
75292: MUL
75293: ST_TO_ADDR
// end ;
75294: LD_VAR 0 2
75298: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75299: LD_INT 0
75301: PPUSH
75302: PPUSH
75303: PPUSH
75304: PPUSH
75305: PPUSH
75306: PPUSH
75307: PPUSH
75308: PPUSH
// if not unit or not building then
75309: LD_VAR 0 1
75313: NOT
75314: PUSH
75315: LD_VAR 0 2
75319: NOT
75320: OR
75321: IFFALSE 75325
// exit ;
75323: GO 75551
// x := GetX ( building ) ;
75325: LD_ADDR_VAR 0 4
75329: PUSH
75330: LD_VAR 0 2
75334: PPUSH
75335: CALL_OW 250
75339: ST_TO_ADDR
// y := GetY ( building ) ;
75340: LD_ADDR_VAR 0 6
75344: PUSH
75345: LD_VAR 0 2
75349: PPUSH
75350: CALL_OW 251
75354: ST_TO_ADDR
// d := GetDir ( building ) ;
75355: LD_ADDR_VAR 0 8
75359: PUSH
75360: LD_VAR 0 2
75364: PPUSH
75365: CALL_OW 254
75369: ST_TO_ADDR
// r := 4 ;
75370: LD_ADDR_VAR 0 9
75374: PUSH
75375: LD_INT 4
75377: ST_TO_ADDR
// for i := 1 to 5 do
75378: LD_ADDR_VAR 0 10
75382: PUSH
75383: DOUBLE
75384: LD_INT 1
75386: DEC
75387: ST_TO_ADDR
75388: LD_INT 5
75390: PUSH
75391: FOR_TO
75392: IFFALSE 75549
// begin _x := ShiftX ( x , d , r + i ) ;
75394: LD_ADDR_VAR 0 5
75398: PUSH
75399: LD_VAR 0 4
75403: PPUSH
75404: LD_VAR 0 8
75408: PPUSH
75409: LD_VAR 0 9
75413: PUSH
75414: LD_VAR 0 10
75418: PLUS
75419: PPUSH
75420: CALL_OW 272
75424: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75425: LD_ADDR_VAR 0 7
75429: PUSH
75430: LD_VAR 0 6
75434: PPUSH
75435: LD_VAR 0 8
75439: PPUSH
75440: LD_VAR 0 9
75444: PUSH
75445: LD_VAR 0 10
75449: PLUS
75450: PPUSH
75451: CALL_OW 273
75455: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75456: LD_VAR 0 5
75460: PPUSH
75461: LD_VAR 0 7
75465: PPUSH
75466: CALL_OW 488
75470: PUSH
75471: LD_VAR 0 5
75475: PPUSH
75476: LD_VAR 0 7
75480: PPUSH
75481: CALL_OW 428
75485: PPUSH
75486: CALL_OW 247
75490: PUSH
75491: LD_INT 3
75493: PUSH
75494: LD_INT 2
75496: PUSH
75497: EMPTY
75498: LIST
75499: LIST
75500: IN
75501: NOT
75502: AND
75503: IFFALSE 75547
// begin ComMoveXY ( unit , _x , _y ) ;
75505: LD_VAR 0 1
75509: PPUSH
75510: LD_VAR 0 5
75514: PPUSH
75515: LD_VAR 0 7
75519: PPUSH
75520: CALL_OW 111
// result := [ _x , _y ] ;
75524: LD_ADDR_VAR 0 3
75528: PUSH
75529: LD_VAR 0 5
75533: PUSH
75534: LD_VAR 0 7
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: ST_TO_ADDR
// exit ;
75543: POP
75544: POP
75545: GO 75551
// end ; end ;
75547: GO 75391
75549: POP
75550: POP
// end ;
75551: LD_VAR 0 3
75555: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75556: LD_INT 0
75558: PPUSH
75559: PPUSH
75560: PPUSH
// result := 0 ;
75561: LD_ADDR_VAR 0 3
75565: PUSH
75566: LD_INT 0
75568: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75569: LD_VAR 0 1
75573: PUSH
75574: LD_INT 0
75576: LESS
75577: PUSH
75578: LD_VAR 0 1
75582: PUSH
75583: LD_INT 8
75585: GREATER
75586: OR
75587: PUSH
75588: LD_VAR 0 2
75592: PUSH
75593: LD_INT 0
75595: LESS
75596: OR
75597: PUSH
75598: LD_VAR 0 2
75602: PUSH
75603: LD_INT 8
75605: GREATER
75606: OR
75607: IFFALSE 75611
// exit ;
75609: GO 75686
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75611: LD_ADDR_VAR 0 4
75615: PUSH
75616: LD_INT 22
75618: PUSH
75619: LD_VAR 0 2
75623: PUSH
75624: EMPTY
75625: LIST
75626: LIST
75627: PPUSH
75628: CALL_OW 69
75632: PUSH
75633: FOR_IN
75634: IFFALSE 75684
// begin un := UnitShoot ( i ) ;
75636: LD_ADDR_VAR 0 5
75640: PUSH
75641: LD_VAR 0 4
75645: PPUSH
75646: CALL_OW 504
75650: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75651: LD_VAR 0 5
75655: PPUSH
75656: CALL_OW 255
75660: PUSH
75661: LD_VAR 0 1
75665: EQUAL
75666: IFFALSE 75682
// begin result := un ;
75668: LD_ADDR_VAR 0 3
75672: PUSH
75673: LD_VAR 0 5
75677: ST_TO_ADDR
// exit ;
75678: POP
75679: POP
75680: GO 75686
// end ; end ;
75682: GO 75633
75684: POP
75685: POP
// end ;
75686: LD_VAR 0 3
75690: RET
// export function GetCargoBay ( units ) ; begin
75691: LD_INT 0
75693: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75694: LD_ADDR_VAR 0 2
75698: PUSH
75699: LD_VAR 0 1
75703: PPUSH
75704: LD_INT 2
75706: PUSH
75707: LD_INT 34
75709: PUSH
75710: LD_INT 12
75712: PUSH
75713: EMPTY
75714: LIST
75715: LIST
75716: PUSH
75717: LD_INT 34
75719: PUSH
75720: LD_INT 51
75722: PUSH
75723: EMPTY
75724: LIST
75725: LIST
75726: PUSH
75727: LD_INT 34
75729: PUSH
75730: LD_INT 32
75732: PUSH
75733: EMPTY
75734: LIST
75735: LIST
75736: PUSH
75737: LD_INT 34
75739: PUSH
75740: LD_EXP 63
75744: PUSH
75745: EMPTY
75746: LIST
75747: LIST
75748: PUSH
75749: EMPTY
75750: LIST
75751: LIST
75752: LIST
75753: LIST
75754: LIST
75755: PPUSH
75756: CALL_OW 72
75760: ST_TO_ADDR
// end ;
75761: LD_VAR 0 2
75765: RET
// export function Negate ( value ) ; begin
75766: LD_INT 0
75768: PPUSH
// result := not value ;
75769: LD_ADDR_VAR 0 2
75773: PUSH
75774: LD_VAR 0 1
75778: NOT
75779: ST_TO_ADDR
// end ;
75780: LD_VAR 0 2
75784: RET
// export function Inc ( value ) ; begin
75785: LD_INT 0
75787: PPUSH
// result := value + 1 ;
75788: LD_ADDR_VAR 0 2
75792: PUSH
75793: LD_VAR 0 1
75797: PUSH
75798: LD_INT 1
75800: PLUS
75801: ST_TO_ADDR
// end ;
75802: LD_VAR 0 2
75806: RET
// export function Dec ( value ) ; begin
75807: LD_INT 0
75809: PPUSH
// result := value - 1 ;
75810: LD_ADDR_VAR 0 2
75814: PUSH
75815: LD_VAR 0 1
75819: PUSH
75820: LD_INT 1
75822: MINUS
75823: ST_TO_ADDR
// end ;
75824: LD_VAR 0 2
75828: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75829: LD_INT 0
75831: PPUSH
75832: PPUSH
75833: PPUSH
75834: PPUSH
75835: PPUSH
75836: PPUSH
75837: PPUSH
75838: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75839: LD_VAR 0 1
75843: PPUSH
75844: LD_VAR 0 2
75848: PPUSH
75849: CALL_OW 488
75853: NOT
75854: PUSH
75855: LD_VAR 0 3
75859: PPUSH
75860: LD_VAR 0 4
75864: PPUSH
75865: CALL_OW 488
75869: NOT
75870: OR
75871: IFFALSE 75884
// begin result := - 1 ;
75873: LD_ADDR_VAR 0 5
75877: PUSH
75878: LD_INT 1
75880: NEG
75881: ST_TO_ADDR
// exit ;
75882: GO 76119
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75884: LD_ADDR_VAR 0 12
75888: PUSH
75889: LD_VAR 0 1
75893: PPUSH
75894: LD_VAR 0 2
75898: PPUSH
75899: LD_VAR 0 3
75903: PPUSH
75904: LD_VAR 0 4
75908: PPUSH
75909: CALL 74967 0 4
75913: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75914: LD_ADDR_VAR 0 11
75918: PUSH
75919: LD_VAR 0 1
75923: PPUSH
75924: LD_VAR 0 2
75928: PPUSH
75929: LD_VAR 0 12
75933: PUSH
75934: LD_INT 1
75936: ARRAY
75937: PPUSH
75938: LD_VAR 0 12
75942: PUSH
75943: LD_INT 2
75945: ARRAY
75946: PPUSH
75947: CALL_OW 298
75951: ST_TO_ADDR
// distance := 9999 ;
75952: LD_ADDR_VAR 0 10
75956: PUSH
75957: LD_INT 9999
75959: ST_TO_ADDR
// for i := 0 to 5 do
75960: LD_ADDR_VAR 0 6
75964: PUSH
75965: DOUBLE
75966: LD_INT 0
75968: DEC
75969: ST_TO_ADDR
75970: LD_INT 5
75972: PUSH
75973: FOR_TO
75974: IFFALSE 76117
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75976: LD_ADDR_VAR 0 7
75980: PUSH
75981: LD_VAR 0 1
75985: PPUSH
75986: LD_VAR 0 6
75990: PPUSH
75991: LD_VAR 0 11
75995: PPUSH
75996: CALL_OW 272
76000: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76001: LD_ADDR_VAR 0 8
76005: PUSH
76006: LD_VAR 0 2
76010: PPUSH
76011: LD_VAR 0 6
76015: PPUSH
76016: LD_VAR 0 11
76020: PPUSH
76021: CALL_OW 273
76025: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76026: LD_VAR 0 7
76030: PPUSH
76031: LD_VAR 0 8
76035: PPUSH
76036: CALL_OW 488
76040: NOT
76041: IFFALSE 76045
// continue ;
76043: GO 75973
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76045: LD_ADDR_VAR 0 9
76049: PUSH
76050: LD_VAR 0 12
76054: PUSH
76055: LD_INT 1
76057: ARRAY
76058: PPUSH
76059: LD_VAR 0 12
76063: PUSH
76064: LD_INT 2
76066: ARRAY
76067: PPUSH
76068: LD_VAR 0 7
76072: PPUSH
76073: LD_VAR 0 8
76077: PPUSH
76078: CALL_OW 298
76082: ST_TO_ADDR
// if tmp < distance then
76083: LD_VAR 0 9
76087: PUSH
76088: LD_VAR 0 10
76092: LESS
76093: IFFALSE 76115
// begin result := i ;
76095: LD_ADDR_VAR 0 5
76099: PUSH
76100: LD_VAR 0 6
76104: ST_TO_ADDR
// distance := tmp ;
76105: LD_ADDR_VAR 0 10
76109: PUSH
76110: LD_VAR 0 9
76114: ST_TO_ADDR
// end ; end ;
76115: GO 75973
76117: POP
76118: POP
// end ;
76119: LD_VAR 0 5
76123: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76124: LD_INT 0
76126: PPUSH
76127: PPUSH
// if not driver or not IsInUnit ( driver ) then
76128: LD_VAR 0 1
76132: NOT
76133: PUSH
76134: LD_VAR 0 1
76138: PPUSH
76139: CALL_OW 310
76143: NOT
76144: OR
76145: IFFALSE 76149
// exit ;
76147: GO 76239
// vehicle := IsInUnit ( driver ) ;
76149: LD_ADDR_VAR 0 3
76153: PUSH
76154: LD_VAR 0 1
76158: PPUSH
76159: CALL_OW 310
76163: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76164: LD_VAR 0 1
76168: PPUSH
76169: LD_STRING \
76171: PUSH
76172: LD_INT 0
76174: PUSH
76175: LD_INT 0
76177: PUSH
76178: LD_INT 0
76180: PUSH
76181: LD_INT 0
76183: PUSH
76184: LD_INT 0
76186: PUSH
76187: LD_INT 0
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: LIST
76194: LIST
76195: LIST
76196: LIST
76197: LIST
76198: PUSH
76199: LD_STRING E
76201: PUSH
76202: LD_INT 0
76204: PUSH
76205: LD_INT 0
76207: PUSH
76208: LD_VAR 0 3
76212: PUSH
76213: LD_INT 0
76215: PUSH
76216: LD_INT 0
76218: PUSH
76219: LD_INT 0
76221: PUSH
76222: EMPTY
76223: LIST
76224: LIST
76225: LIST
76226: LIST
76227: LIST
76228: LIST
76229: LIST
76230: PUSH
76231: EMPTY
76232: LIST
76233: LIST
76234: PPUSH
76235: CALL_OW 446
// end ;
76239: LD_VAR 0 2
76243: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76244: LD_INT 0
76246: PPUSH
76247: PPUSH
// if not driver or not IsInUnit ( driver ) then
76248: LD_VAR 0 1
76252: NOT
76253: PUSH
76254: LD_VAR 0 1
76258: PPUSH
76259: CALL_OW 310
76263: NOT
76264: OR
76265: IFFALSE 76269
// exit ;
76267: GO 76359
// vehicle := IsInUnit ( driver ) ;
76269: LD_ADDR_VAR 0 3
76273: PUSH
76274: LD_VAR 0 1
76278: PPUSH
76279: CALL_OW 310
76283: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76284: LD_VAR 0 1
76288: PPUSH
76289: LD_STRING \
76291: PUSH
76292: LD_INT 0
76294: PUSH
76295: LD_INT 0
76297: PUSH
76298: LD_INT 0
76300: PUSH
76301: LD_INT 0
76303: PUSH
76304: LD_INT 0
76306: PUSH
76307: LD_INT 0
76309: PUSH
76310: EMPTY
76311: LIST
76312: LIST
76313: LIST
76314: LIST
76315: LIST
76316: LIST
76317: LIST
76318: PUSH
76319: LD_STRING E
76321: PUSH
76322: LD_INT 0
76324: PUSH
76325: LD_INT 0
76327: PUSH
76328: LD_VAR 0 3
76332: PUSH
76333: LD_INT 0
76335: PUSH
76336: LD_INT 0
76338: PUSH
76339: LD_INT 0
76341: PUSH
76342: EMPTY
76343: LIST
76344: LIST
76345: LIST
76346: LIST
76347: LIST
76348: LIST
76349: LIST
76350: PUSH
76351: EMPTY
76352: LIST
76353: LIST
76354: PPUSH
76355: CALL_OW 447
// end ;
76359: LD_VAR 0 2
76363: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76364: LD_INT 0
76366: PPUSH
76367: PPUSH
76368: PPUSH
// tmp := [ ] ;
76369: LD_ADDR_VAR 0 5
76373: PUSH
76374: EMPTY
76375: ST_TO_ADDR
// for i in units do
76376: LD_ADDR_VAR 0 4
76380: PUSH
76381: LD_VAR 0 1
76385: PUSH
76386: FOR_IN
76387: IFFALSE 76425
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76389: LD_ADDR_VAR 0 5
76393: PUSH
76394: LD_VAR 0 5
76398: PPUSH
76399: LD_VAR 0 5
76403: PUSH
76404: LD_INT 1
76406: PLUS
76407: PPUSH
76408: LD_VAR 0 4
76412: PPUSH
76413: CALL_OW 256
76417: PPUSH
76418: CALL_OW 2
76422: ST_TO_ADDR
76423: GO 76386
76425: POP
76426: POP
// if not tmp then
76427: LD_VAR 0 5
76431: NOT
76432: IFFALSE 76436
// exit ;
76434: GO 76484
// if asc then
76436: LD_VAR 0 2
76440: IFFALSE 76464
// result := SortListByListAsc ( units , tmp ) else
76442: LD_ADDR_VAR 0 3
76446: PUSH
76447: LD_VAR 0 1
76451: PPUSH
76452: LD_VAR 0 5
76456: PPUSH
76457: CALL_OW 76
76461: ST_TO_ADDR
76462: GO 76484
// result := SortListByListDesc ( units , tmp ) ;
76464: LD_ADDR_VAR 0 3
76468: PUSH
76469: LD_VAR 0 1
76473: PPUSH
76474: LD_VAR 0 5
76478: PPUSH
76479: CALL_OW 77
76483: ST_TO_ADDR
// end ;
76484: LD_VAR 0 3
76488: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76489: LD_INT 0
76491: PPUSH
76492: PPUSH
// task := GetTaskList ( mech ) ;
76493: LD_ADDR_VAR 0 4
76497: PUSH
76498: LD_VAR 0 1
76502: PPUSH
76503: CALL_OW 437
76507: ST_TO_ADDR
// if not task then
76508: LD_VAR 0 4
76512: NOT
76513: IFFALSE 76517
// exit ;
76515: GO 76559
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76517: LD_ADDR_VAR 0 3
76521: PUSH
76522: LD_VAR 0 4
76526: PUSH
76527: LD_INT 1
76529: ARRAY
76530: PUSH
76531: LD_INT 1
76533: ARRAY
76534: PUSH
76535: LD_STRING r
76537: EQUAL
76538: PUSH
76539: LD_VAR 0 4
76543: PUSH
76544: LD_INT 1
76546: ARRAY
76547: PUSH
76548: LD_INT 4
76550: ARRAY
76551: PUSH
76552: LD_VAR 0 2
76556: EQUAL
76557: AND
76558: ST_TO_ADDR
// end ;
76559: LD_VAR 0 3
76563: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76564: LD_INT 0
76566: PPUSH
// SetDir ( unit , d ) ;
76567: LD_VAR 0 1
76571: PPUSH
76572: LD_VAR 0 4
76576: PPUSH
76577: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76581: LD_VAR 0 1
76585: PPUSH
76586: LD_VAR 0 2
76590: PPUSH
76591: LD_VAR 0 3
76595: PPUSH
76596: LD_VAR 0 5
76600: PPUSH
76601: CALL_OW 48
// end ;
76605: LD_VAR 0 6
76609: RET
// export function ToNaturalNumber ( number ) ; begin
76610: LD_INT 0
76612: PPUSH
// result := number div 1 ;
76613: LD_ADDR_VAR 0 2
76617: PUSH
76618: LD_VAR 0 1
76622: PUSH
76623: LD_INT 1
76625: DIV
76626: ST_TO_ADDR
// if number < 0 then
76627: LD_VAR 0 1
76631: PUSH
76632: LD_INT 0
76634: LESS
76635: IFFALSE 76645
// result := 0 ;
76637: LD_ADDR_VAR 0 2
76641: PUSH
76642: LD_INT 0
76644: ST_TO_ADDR
// end ;
76645: LD_VAR 0 2
76649: RET
// export function SortByClass ( units , class ) ; var un ; begin
76650: LD_INT 0
76652: PPUSH
76653: PPUSH
// if not units or not class then
76654: LD_VAR 0 1
76658: NOT
76659: PUSH
76660: LD_VAR 0 2
76664: NOT
76665: OR
76666: IFFALSE 76670
// exit ;
76668: GO 76765
// result := [ ] ;
76670: LD_ADDR_VAR 0 3
76674: PUSH
76675: EMPTY
76676: ST_TO_ADDR
// for un in units do
76677: LD_ADDR_VAR 0 4
76681: PUSH
76682: LD_VAR 0 1
76686: PUSH
76687: FOR_IN
76688: IFFALSE 76763
// if GetClass ( un ) = class then
76690: LD_VAR 0 4
76694: PPUSH
76695: CALL_OW 257
76699: PUSH
76700: LD_VAR 0 2
76704: EQUAL
76705: IFFALSE 76732
// result := Insert ( result , 1 , un ) else
76707: LD_ADDR_VAR 0 3
76711: PUSH
76712: LD_VAR 0 3
76716: PPUSH
76717: LD_INT 1
76719: PPUSH
76720: LD_VAR 0 4
76724: PPUSH
76725: CALL_OW 2
76729: ST_TO_ADDR
76730: GO 76761
// result := Replace ( result , result + 1 , un ) ;
76732: LD_ADDR_VAR 0 3
76736: PUSH
76737: LD_VAR 0 3
76741: PPUSH
76742: LD_VAR 0 3
76746: PUSH
76747: LD_INT 1
76749: PLUS
76750: PPUSH
76751: LD_VAR 0 4
76755: PPUSH
76756: CALL_OW 1
76760: ST_TO_ADDR
76761: GO 76687
76763: POP
76764: POP
// end ;
76765: LD_VAR 0 3
76769: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76770: LD_INT 0
76772: PPUSH
76773: PPUSH
76774: PPUSH
76775: PPUSH
76776: PPUSH
76777: PPUSH
76778: PPUSH
// result := [ ] ;
76779: LD_ADDR_VAR 0 4
76783: PUSH
76784: EMPTY
76785: ST_TO_ADDR
// if x - r < 0 then
76786: LD_VAR 0 1
76790: PUSH
76791: LD_VAR 0 3
76795: MINUS
76796: PUSH
76797: LD_INT 0
76799: LESS
76800: IFFALSE 76812
// min_x := 0 else
76802: LD_ADDR_VAR 0 8
76806: PUSH
76807: LD_INT 0
76809: ST_TO_ADDR
76810: GO 76828
// min_x := x - r ;
76812: LD_ADDR_VAR 0 8
76816: PUSH
76817: LD_VAR 0 1
76821: PUSH
76822: LD_VAR 0 3
76826: MINUS
76827: ST_TO_ADDR
// if y - r < 0 then
76828: LD_VAR 0 2
76832: PUSH
76833: LD_VAR 0 3
76837: MINUS
76838: PUSH
76839: LD_INT 0
76841: LESS
76842: IFFALSE 76854
// min_y := 0 else
76844: LD_ADDR_VAR 0 7
76848: PUSH
76849: LD_INT 0
76851: ST_TO_ADDR
76852: GO 76870
// min_y := y - r ;
76854: LD_ADDR_VAR 0 7
76858: PUSH
76859: LD_VAR 0 2
76863: PUSH
76864: LD_VAR 0 3
76868: MINUS
76869: ST_TO_ADDR
// max_x := x + r ;
76870: LD_ADDR_VAR 0 9
76874: PUSH
76875: LD_VAR 0 1
76879: PUSH
76880: LD_VAR 0 3
76884: PLUS
76885: ST_TO_ADDR
// max_y := y + r ;
76886: LD_ADDR_VAR 0 10
76890: PUSH
76891: LD_VAR 0 2
76895: PUSH
76896: LD_VAR 0 3
76900: PLUS
76901: ST_TO_ADDR
// for _x = min_x to max_x do
76902: LD_ADDR_VAR 0 5
76906: PUSH
76907: DOUBLE
76908: LD_VAR 0 8
76912: DEC
76913: ST_TO_ADDR
76914: LD_VAR 0 9
76918: PUSH
76919: FOR_TO
76920: IFFALSE 77021
// for _y = min_y to max_y do
76922: LD_ADDR_VAR 0 6
76926: PUSH
76927: DOUBLE
76928: LD_VAR 0 7
76932: DEC
76933: ST_TO_ADDR
76934: LD_VAR 0 10
76938: PUSH
76939: FOR_TO
76940: IFFALSE 77017
// begin if not ValidHex ( _x , _y ) then
76942: LD_VAR 0 5
76946: PPUSH
76947: LD_VAR 0 6
76951: PPUSH
76952: CALL_OW 488
76956: NOT
76957: IFFALSE 76961
// continue ;
76959: GO 76939
// if GetResourceTypeXY ( _x , _y ) then
76961: LD_VAR 0 5
76965: PPUSH
76966: LD_VAR 0 6
76970: PPUSH
76971: CALL_OW 283
76975: IFFALSE 77015
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76977: LD_ADDR_VAR 0 4
76981: PUSH
76982: LD_VAR 0 4
76986: PPUSH
76987: LD_VAR 0 4
76991: PUSH
76992: LD_INT 1
76994: PLUS
76995: PPUSH
76996: LD_VAR 0 5
77000: PUSH
77001: LD_VAR 0 6
77005: PUSH
77006: EMPTY
77007: LIST
77008: LIST
77009: PPUSH
77010: CALL_OW 1
77014: ST_TO_ADDR
// end ;
77015: GO 76939
77017: POP
77018: POP
77019: GO 76919
77021: POP
77022: POP
// end ;
77023: LD_VAR 0 4
77027: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77028: LD_INT 0
77030: PPUSH
77031: PPUSH
77032: PPUSH
77033: PPUSH
77034: PPUSH
77035: PPUSH
77036: PPUSH
77037: PPUSH
// if not units then
77038: LD_VAR 0 1
77042: NOT
77043: IFFALSE 77047
// exit ;
77045: GO 77472
// result := UnitFilter ( units , [ f_ok ] ) ;
77047: LD_ADDR_VAR 0 3
77051: PUSH
77052: LD_VAR 0 1
77056: PPUSH
77057: LD_INT 50
77059: PUSH
77060: EMPTY
77061: LIST
77062: PPUSH
77063: CALL_OW 72
77067: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77068: LD_ADDR_VAR 0 8
77072: PUSH
77073: LD_VAR 0 1
77077: PUSH
77078: LD_INT 1
77080: ARRAY
77081: PPUSH
77082: CALL_OW 255
77086: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
77087: LD_ADDR_VAR 0 10
77091: PUSH
77092: LD_INT 29
77094: PUSH
77095: LD_EXP 66
77099: PUSH
77100: EMPTY
77101: LIST
77102: LIST
77103: ST_TO_ADDR
// if not result then
77104: LD_VAR 0 3
77108: NOT
77109: IFFALSE 77113
// exit ;
77111: GO 77472
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77113: LD_ADDR_VAR 0 5
77117: PUSH
77118: LD_INT 81
77120: PUSH
77121: LD_VAR 0 8
77125: PUSH
77126: EMPTY
77127: LIST
77128: LIST
77129: PPUSH
77130: CALL_OW 69
77134: ST_TO_ADDR
// for i in result do
77135: LD_ADDR_VAR 0 4
77139: PUSH
77140: LD_VAR 0 3
77144: PUSH
77145: FOR_IN
77146: IFFALSE 77470
// begin tag := GetTag ( i ) + 1 ;
77148: LD_ADDR_VAR 0 9
77152: PUSH
77153: LD_VAR 0 4
77157: PPUSH
77158: CALL_OW 110
77162: PUSH
77163: LD_INT 1
77165: PLUS
77166: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77167: LD_ADDR_VAR 0 7
77171: PUSH
77172: LD_VAR 0 4
77176: PPUSH
77177: CALL_OW 250
77181: PPUSH
77182: LD_VAR 0 4
77186: PPUSH
77187: CALL_OW 251
77191: PPUSH
77192: LD_INT 6
77194: PPUSH
77195: CALL 76770 0 3
77199: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77200: LD_VAR 0 7
77204: PUSH
77205: LD_VAR 0 4
77209: PPUSH
77210: CALL_OW 264
77214: PUSH
77215: LD_VAR 0 10
77219: IN
77220: NOT
77221: AND
77222: IFFALSE 77261
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77224: LD_VAR 0 4
77228: PPUSH
77229: LD_VAR 0 7
77233: PUSH
77234: LD_INT 1
77236: ARRAY
77237: PUSH
77238: LD_INT 1
77240: ARRAY
77241: PPUSH
77242: LD_VAR 0 7
77246: PUSH
77247: LD_INT 1
77249: ARRAY
77250: PUSH
77251: LD_INT 2
77253: ARRAY
77254: PPUSH
77255: CALL_OW 116
77259: GO 77468
// if path > tag then
77261: LD_VAR 0 2
77265: PUSH
77266: LD_VAR 0 9
77270: GREATER
77271: IFFALSE 77438
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
77273: LD_ADDR_VAR 0 6
77277: PUSH
77278: LD_VAR 0 5
77282: PPUSH
77283: LD_INT 91
77285: PUSH
77286: LD_VAR 0 4
77290: PUSH
77291: LD_INT 12
77293: PUSH
77294: EMPTY
77295: LIST
77296: LIST
77297: LIST
77298: PPUSH
77299: CALL_OW 72
77303: ST_TO_ADDR
// if nearEnemy then
77304: LD_VAR 0 6
77308: IFFALSE 77336
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77310: LD_VAR 0 4
77314: PPUSH
77315: LD_VAR 0 6
77319: PPUSH
77320: LD_VAR 0 4
77324: PPUSH
77325: CALL_OW 74
77329: PPUSH
77330: CALL_OW 115
77334: GO 77436
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77336: LD_VAR 0 4
77340: PPUSH
77341: LD_VAR 0 2
77345: PUSH
77346: LD_VAR 0 9
77350: ARRAY
77351: PUSH
77352: LD_INT 1
77354: ARRAY
77355: PPUSH
77356: LD_VAR 0 2
77360: PUSH
77361: LD_VAR 0 9
77365: ARRAY
77366: PUSH
77367: LD_INT 2
77369: ARRAY
77370: PPUSH
77371: CALL_OW 297
77375: PUSH
77376: LD_INT 6
77378: GREATER
77379: IFFALSE 77422
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77381: LD_VAR 0 4
77385: PPUSH
77386: LD_VAR 0 2
77390: PUSH
77391: LD_VAR 0 9
77395: ARRAY
77396: PUSH
77397: LD_INT 1
77399: ARRAY
77400: PPUSH
77401: LD_VAR 0 2
77405: PUSH
77406: LD_VAR 0 9
77410: ARRAY
77411: PUSH
77412: LD_INT 2
77414: ARRAY
77415: PPUSH
77416: CALL_OW 114
77420: GO 77436
// SetTag ( i , tag ) ;
77422: LD_VAR 0 4
77426: PPUSH
77427: LD_VAR 0 9
77431: PPUSH
77432: CALL_OW 109
// end else
77436: GO 77468
// if enemy then
77438: LD_VAR 0 5
77442: IFFALSE 77468
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77444: LD_VAR 0 4
77448: PPUSH
77449: LD_VAR 0 5
77453: PPUSH
77454: LD_VAR 0 4
77458: PPUSH
77459: CALL_OW 74
77463: PPUSH
77464: CALL_OW 115
// end ;
77468: GO 77145
77470: POP
77471: POP
// end ;
77472: LD_VAR 0 3
77476: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77477: LD_INT 0
77479: PPUSH
77480: PPUSH
77481: PPUSH
// if not unit or IsInUnit ( unit ) then
77482: LD_VAR 0 1
77486: NOT
77487: PUSH
77488: LD_VAR 0 1
77492: PPUSH
77493: CALL_OW 310
77497: OR
77498: IFFALSE 77502
// exit ;
77500: GO 77593
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77502: LD_ADDR_VAR 0 4
77506: PUSH
77507: LD_VAR 0 1
77511: PPUSH
77512: CALL_OW 250
77516: PPUSH
77517: LD_VAR 0 2
77521: PPUSH
77522: LD_INT 1
77524: PPUSH
77525: CALL_OW 272
77529: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77530: LD_ADDR_VAR 0 5
77534: PUSH
77535: LD_VAR 0 1
77539: PPUSH
77540: CALL_OW 251
77544: PPUSH
77545: LD_VAR 0 2
77549: PPUSH
77550: LD_INT 1
77552: PPUSH
77553: CALL_OW 273
77557: ST_TO_ADDR
// if ValidHex ( x , y ) then
77558: LD_VAR 0 4
77562: PPUSH
77563: LD_VAR 0 5
77567: PPUSH
77568: CALL_OW 488
77572: IFFALSE 77593
// ComTurnXY ( unit , x , y ) ;
77574: LD_VAR 0 1
77578: PPUSH
77579: LD_VAR 0 4
77583: PPUSH
77584: LD_VAR 0 5
77588: PPUSH
77589: CALL_OW 118
// end ;
77593: LD_VAR 0 3
77597: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77598: LD_INT 0
77600: PPUSH
77601: PPUSH
// result := false ;
77602: LD_ADDR_VAR 0 3
77606: PUSH
77607: LD_INT 0
77609: ST_TO_ADDR
// if not units then
77610: LD_VAR 0 2
77614: NOT
77615: IFFALSE 77619
// exit ;
77617: GO 77664
// for i in units do
77619: LD_ADDR_VAR 0 4
77623: PUSH
77624: LD_VAR 0 2
77628: PUSH
77629: FOR_IN
77630: IFFALSE 77662
// if See ( side , i ) then
77632: LD_VAR 0 1
77636: PPUSH
77637: LD_VAR 0 4
77641: PPUSH
77642: CALL_OW 292
77646: IFFALSE 77660
// begin result := true ;
77648: LD_ADDR_VAR 0 3
77652: PUSH
77653: LD_INT 1
77655: ST_TO_ADDR
// exit ;
77656: POP
77657: POP
77658: GO 77664
// end ;
77660: GO 77629
77662: POP
77663: POP
// end ;
77664: LD_VAR 0 3
77668: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77669: LD_INT 0
77671: PPUSH
77672: PPUSH
77673: PPUSH
77674: PPUSH
// if not unit or not points then
77675: LD_VAR 0 1
77679: NOT
77680: PUSH
77681: LD_VAR 0 2
77685: NOT
77686: OR
77687: IFFALSE 77691
// exit ;
77689: GO 77781
// dist := 99999 ;
77691: LD_ADDR_VAR 0 5
77695: PUSH
77696: LD_INT 99999
77698: ST_TO_ADDR
// for i in points do
77699: LD_ADDR_VAR 0 4
77703: PUSH
77704: LD_VAR 0 2
77708: PUSH
77709: FOR_IN
77710: IFFALSE 77779
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77712: LD_ADDR_VAR 0 6
77716: PUSH
77717: LD_VAR 0 1
77721: PPUSH
77722: LD_VAR 0 4
77726: PUSH
77727: LD_INT 1
77729: ARRAY
77730: PPUSH
77731: LD_VAR 0 4
77735: PUSH
77736: LD_INT 2
77738: ARRAY
77739: PPUSH
77740: CALL_OW 297
77744: ST_TO_ADDR
// if tmpDist < dist then
77745: LD_VAR 0 6
77749: PUSH
77750: LD_VAR 0 5
77754: LESS
77755: IFFALSE 77777
// begin result := i ;
77757: LD_ADDR_VAR 0 3
77761: PUSH
77762: LD_VAR 0 4
77766: ST_TO_ADDR
// dist := tmpDist ;
77767: LD_ADDR_VAR 0 5
77771: PUSH
77772: LD_VAR 0 6
77776: ST_TO_ADDR
// end ; end ;
77777: GO 77709
77779: POP
77780: POP
// end ; end_of_file
77781: LD_VAR 0 3
77785: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77786: LD_VAR 0 1
77790: PUSH
77791: LD_INT 200
77793: DOUBLE
77794: GREATEREQUAL
77795: IFFALSE 77803
77797: LD_INT 299
77799: DOUBLE
77800: LESSEQUAL
77801: IFTRUE 77805
77803: GO 77837
77805: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77806: LD_VAR 0 1
77810: PPUSH
77811: LD_VAR 0 2
77815: PPUSH
77816: LD_VAR 0 3
77820: PPUSH
77821: LD_VAR 0 4
77825: PPUSH
77826: LD_VAR 0 5
77830: PPUSH
77831: CALL 33489 0 5
77835: GO 77914
77837: LD_INT 300
77839: DOUBLE
77840: GREATEREQUAL
77841: IFFALSE 77849
77843: LD_INT 399
77845: DOUBLE
77846: LESSEQUAL
77847: IFTRUE 77851
77849: GO 77913
77851: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77852: LD_VAR 0 1
77856: PPUSH
77857: LD_VAR 0 2
77861: PPUSH
77862: LD_VAR 0 3
77866: PPUSH
77867: LD_VAR 0 4
77871: PPUSH
77872: LD_VAR 0 5
77876: PPUSH
77877: LD_VAR 0 6
77881: PPUSH
77882: LD_VAR 0 7
77886: PPUSH
77887: LD_VAR 0 8
77891: PPUSH
77892: LD_VAR 0 9
77896: PPUSH
77897: LD_VAR 0 10
77901: PPUSH
77902: LD_VAR 0 11
77906: PPUSH
77907: CALL 31131 0 11
77911: GO 77914
77913: POP
// end ;
77914: PPOPN 11
77916: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77917: LD_VAR 0 1
77921: PPUSH
77922: LD_VAR 0 2
77926: PPUSH
77927: LD_VAR 0 3
77931: PPUSH
77932: LD_VAR 0 4
77936: PPUSH
77937: LD_VAR 0 5
77941: PPUSH
77942: CALL 33225 0 5
// end ; end_of_file
77946: PPOPN 5
77948: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77949: LD_VAR 0 1
77953: PPUSH
77954: LD_VAR 0 2
77958: PPUSH
77959: LD_VAR 0 3
77963: PPUSH
77964: LD_VAR 0 4
77968: PPUSH
77969: LD_VAR 0 5
77973: PPUSH
77974: LD_VAR 0 6
77978: PPUSH
77979: CALL 18824 0 6
// end ;
77983: PPOPN 6
77985: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77986: CALL 18799 0 0
// end ;
77990: PPOPN 1
77992: END
