// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3468 0 0
// PrepareAmerican ;
  33: CALL 1153 0 0
// PrepareCornell ;
  37: CALL 2682 0 0
// PrepareWesternBase ;
  41: CALL 2911 0 0
// Action ;
  45: CALL 5883 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 500 , 450 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 500
 233: PUSH
 234: LD_INT 450
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// Difficulty := 4 ;
 492: LD_ADDR_OWVAR 67
 496: PUSH
 497: LD_INT 4
 499: ST_TO_ADDR
// end ; end_of_file
 500: LD_VAR 0 1
 504: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 505: LD_INT 0
 507: PPUSH
// uc_side := side ;
 508: LD_ADDR_OWVAR 20
 512: PUSH
 513: LD_VAR 0 1
 517: ST_TO_ADDR
// uc_nation := nation ;
 518: LD_ADDR_OWVAR 21
 522: PUSH
 523: LD_VAR 0 2
 527: ST_TO_ADDR
// vc_chassis := chassis ;
 528: LD_ADDR_OWVAR 37
 532: PUSH
 533: LD_VAR 0 3
 537: ST_TO_ADDR
// vc_engine := engine ;
 538: LD_ADDR_OWVAR 39
 542: PUSH
 543: LD_VAR 0 4
 547: ST_TO_ADDR
// vc_control := control ;
 548: LD_ADDR_OWVAR 38
 552: PUSH
 553: LD_VAR 0 5
 557: ST_TO_ADDR
// vc_weapon := weapon ;
 558: LD_ADDR_OWVAR 40
 562: PUSH
 563: LD_VAR 0 6
 567: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 568: LD_ADDR_OWVAR 41
 572: PUSH
 573: LD_VAR 0 7
 577: ST_TO_ADDR
// result := CreateVehicle ;
 578: LD_ADDR_VAR 0 8
 582: PUSH
 583: CALL_OW 45
 587: ST_TO_ADDR
// end ;
 588: LD_VAR 0 8
 592: RET
// export function SayX ( units , ident ) ; var i ; begin
 593: LD_INT 0
 595: PPUSH
 596: PPUSH
// result := false ;
 597: LD_ADDR_VAR 0 3
 601: PUSH
 602: LD_INT 0
 604: ST_TO_ADDR
// if not units then
 605: LD_VAR 0 1
 609: NOT
 610: IFFALSE 614
// exit ;
 612: GO 668
// for i in units do
 614: LD_ADDR_VAR 0 4
 618: PUSH
 619: LD_VAR 0 1
 623: PUSH
 624: FOR_IN
 625: IFFALSE 666
// if IsOk ( i ) then
 627: LD_VAR 0 4
 631: PPUSH
 632: CALL_OW 302
 636: IFFALSE 664
// begin Say ( i , ident ) ;
 638: LD_VAR 0 4
 642: PPUSH
 643: LD_VAR 0 2
 647: PPUSH
 648: CALL_OW 88
// result := i ;
 652: LD_ADDR_VAR 0 3
 656: PUSH
 657: LD_VAR 0 4
 661: ST_TO_ADDR
// break ;
 662: GO 666
// end ;
 664: GO 624
 666: POP
 667: POP
// end ;
 668: LD_VAR 0 3
 672: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 673: LD_INT 0
 675: PPUSH
 676: PPUSH
 677: PPUSH
 678: PPUSH
// for i = 1 to count do
 679: LD_ADDR_VAR 0 8
 683: PUSH
 684: DOUBLE
 685: LD_INT 1
 687: DEC
 688: ST_TO_ADDR
 689: LD_VAR 0 6
 693: PUSH
 694: FOR_TO
 695: IFFALSE 776
// begin uc_side = side ;
 697: LD_ADDR_OWVAR 20
 701: PUSH
 702: LD_VAR 0 1
 706: ST_TO_ADDR
// uc_nation = nation ;
 707: LD_ADDR_OWVAR 21
 711: PUSH
 712: LD_VAR 0 2
 716: ST_TO_ADDR
// hc_gallery =  ;
 717: LD_ADDR_OWVAR 33
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// hc_name =  ;
 725: LD_ADDR_OWVAR 26
 729: PUSH
 730: LD_STRING 
 732: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 733: LD_INT 0
 735: PPUSH
 736: LD_VAR 0 5
 740: PPUSH
 741: LD_VAR 0 4
 745: PPUSH
 746: CALL_OW 380
// un = CreateHuman ;
 750: LD_ADDR_VAR 0 10
 754: PUSH
 755: CALL_OW 44
 759: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 760: LD_VAR 0 10
 764: PPUSH
 765: LD_VAR 0 3
 769: PPUSH
 770: CALL_OW 52
// end ;
 774: GO 694
 776: POP
 777: POP
// end ;
 778: LD_VAR 0 7
 782: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 783: LD_INT 0
 785: PPUSH
 786: PPUSH
 787: PPUSH
// uc_side := GetSide ( b ) ;
 788: LD_ADDR_OWVAR 20
 792: PUSH
 793: LD_VAR 0 2
 797: PPUSH
 798: CALL_OW 255
 802: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 803: LD_ADDR_OWVAR 21
 807: PUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 248
 817: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 818: LD_INT 0
 820: PPUSH
 821: LD_INT 1
 823: PPUSH
 824: LD_VAR 0 1
 828: PPUSH
 829: CALL_OW 380
// un = CreateHuman ;
 833: LD_ADDR_VAR 0 4
 837: PUSH
 838: CALL_OW 44
 842: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 843: LD_ADDR_VAR 0 5
 847: PUSH
 848: LD_VAR 0 2
 852: PPUSH
 853: CALL_OW 254
 857: PUSH
 858: LD_INT 3
 860: MINUS
 861: ST_TO_ADDR
// if dir < 0 then
 862: LD_VAR 0 5
 866: PUSH
 867: LD_INT 0
 869: LESS
 870: IFFALSE 886
// dir := 6 + dir ;
 872: LD_ADDR_VAR 0 5
 876: PUSH
 877: LD_INT 6
 879: PUSH
 880: LD_VAR 0 5
 884: PLUS
 885: ST_TO_ADDR
// SetDir ( un , dir ) ;
 886: LD_VAR 0 4
 890: PPUSH
 891: LD_VAR 0 5
 895: PPUSH
 896: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 900: LD_VAR 0 4
 904: PPUSH
 905: LD_VAR 0 2
 909: PPUSH
 910: CALL_OW 52
// end ;
 914: LD_VAR 0 3
 918: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 919: LD_INT 0
 921: PPUSH
 922: PPUSH
 923: PPUSH
// result := false ;
 924: LD_ADDR_VAR 0 2
 928: PUSH
 929: LD_INT 0
 931: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 932: LD_ADDR_VAR 0 3
 936: PUSH
 937: LD_INT 22
 939: PUSH
 940: LD_INT 1
 942: PUSH
 943: EMPTY
 944: LIST
 945: LIST
 946: PUSH
 947: LD_INT 34
 949: PUSH
 950: LD_INT 2
 952: PUSH
 953: EMPTY
 954: LIST
 955: LIST
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PPUSH
 961: CALL_OW 69
 965: ST_TO_ADDR
// for i in filter do
 966: LD_ADDR_VAR 0 4
 970: PUSH
 971: LD_VAR 0 3
 975: PUSH
 976: FOR_IN
 977: IFFALSE 1008
// if IsDrivenBy ( i ) = unit then
 979: LD_VAR 0 4
 983: PPUSH
 984: CALL_OW 311
 988: PUSH
 989: LD_VAR 0 1
 993: EQUAL
 994: IFFALSE 1006
// begin result := true ;
 996: LD_ADDR_VAR 0 2
1000: PUSH
1001: LD_INT 1
1003: ST_TO_ADDR
// break ;
1004: GO 1008
// end ;
1006: GO 976
1008: POP
1009: POP
// end ;
1010: LD_VAR 0 2
1014: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1015: LD_INT 0
1017: PPUSH
1018: PPUSH
// result := false ;
1019: LD_ADDR_VAR 0 2
1023: PUSH
1024: LD_INT 0
1026: ST_TO_ADDR
// if not blist then
1027: LD_VAR 0 1
1031: NOT
1032: IFFALSE 1036
// exit ;
1034: GO 1080
// for i in blist do
1036: LD_ADDR_VAR 0 3
1040: PUSH
1041: LD_VAR 0 1
1045: PUSH
1046: FOR_IN
1047: IFFALSE 1078
// if UnitsInside ( i ) < 6 then
1049: LD_VAR 0 3
1053: PPUSH
1054: CALL_OW 313
1058: PUSH
1059: LD_INT 6
1061: LESS
1062: IFFALSE 1076
// begin result := i ;
1064: LD_ADDR_VAR 0 2
1068: PUSH
1069: LD_VAR 0 3
1073: ST_TO_ADDR
// break ;
1074: GO 1078
// end ;
1076: GO 1046
1078: POP
1079: POP
// end ;
1080: LD_VAR 0 2
1084: RET
// export function CountTime ( timer , mode ) ; begin
1085: LD_INT 0
1087: PPUSH
// if not timer then
1088: LD_VAR 0 1
1092: NOT
1093: IFFALSE 1097
// exit ;
1095: GO 1148
// if mode in [ asc , up , + ] then
1097: LD_VAR 0 2
1101: PUSH
1102: LD_STRING asc
1104: PUSH
1105: LD_STRING up
1107: PUSH
1108: LD_STRING +
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: IN
1116: IFFALSE 1134
// result := timer + 0 0$01 else
1118: LD_ADDR_VAR 0 3
1122: PUSH
1123: LD_VAR 0 1
1127: PUSH
1128: LD_INT 35
1130: PLUS
1131: ST_TO_ADDR
1132: GO 1148
// result := timer - 0 0$01 ;
1134: LD_ADDR_VAR 0 3
1138: PUSH
1139: LD_VAR 0 1
1143: PUSH
1144: LD_INT 35
1146: MINUS
1147: ST_TO_ADDR
// end ; end_of_file
1148: LD_VAR 0 3
1152: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty , vcount , tmpv ; begin
1153: LD_INT 0
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
1159: PPUSH
1160: PPUSH
1161: PPUSH
1162: PPUSH
1163: PPUSH
1164: PPUSH
// uc_side := 4 ;
1165: LD_ADDR_OWVAR 20
1169: PUSH
1170: LD_INT 4
1172: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1173: LD_ADDR_EXP 46
1177: PUSH
1178: LD_STRING Powell
1180: PPUSH
1181: LD_INT 0
1183: PPUSH
1184: LD_STRING 
1186: PPUSH
1187: CALL 42196 0 3
1191: ST_TO_ADDR
// uc_side := 1 ;
1192: LD_ADDR_OWVAR 20
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// uc_nation := 1 ;
1200: LD_ADDR_OWVAR 21
1204: PUSH
1205: LD_INT 1
1207: ST_TO_ADDR
// if debug then
1208: LD_EXP 1
1212: IFFALSE 1558
// begin for i = 1 to 4 do
1214: LD_ADDR_VAR 0 2
1218: PUSH
1219: DOUBLE
1220: LD_INT 1
1222: DEC
1223: ST_TO_ADDR
1224: LD_INT 4
1226: PUSH
1227: FOR_TO
1228: IFFALSE 1279
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1230: LD_INT 0
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_INT 2
1238: PPUSH
1239: CALL_OW 12
1243: PPUSH
1244: LD_INT 3
1246: PPUSH
1247: CALL_OW 380
// un := CreateHuman ;
1251: LD_ADDR_VAR 0 3
1255: PUSH
1256: CALL_OW 44
1260: ST_TO_ADDR
// others := others ^ un ;
1261: LD_ADDR_VAR 0 5
1265: PUSH
1266: LD_VAR 0 5
1270: PUSH
1271: LD_VAR 0 3
1275: ADD
1276: ST_TO_ADDR
// end ;
1277: GO 1227
1279: POP
1280: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1281: LD_ADDR_VAR 0 6
1285: PUSH
1286: LD_INT 21
1288: PUSH
1289: LD_INT 1
1291: PUSH
1292: LD_INT 1
1294: PUSH
1295: LD_INT 42
1297: PUSH
1298: LD_INT 0
1300: PUSH
1301: LD_INT 750
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: PUSH
1312: LD_INT 21
1314: PUSH
1315: LD_INT 1
1317: PUSH
1318: LD_INT 1
1320: PUSH
1321: LD_INT 42
1323: PUSH
1324: LD_INT 0
1326: PUSH
1327: LD_INT 750
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: LIST
1337: PUSH
1338: LD_INT 21
1340: PUSH
1341: LD_INT 1
1343: PUSH
1344: LD_INT 1
1346: PUSH
1347: LD_INT 42
1349: PUSH
1350: LD_INT 0
1352: PUSH
1353: LD_INT 750
1355: PUSH
1356: EMPTY
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: PUSH
1364: LD_INT 21
1366: PUSH
1367: LD_INT 1
1369: PUSH
1370: LD_INT 1
1372: PUSH
1373: LD_INT 42
1375: PUSH
1376: LD_INT 0
1378: PUSH
1379: LD_INT 750
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 21
1392: PUSH
1393: LD_INT 1
1395: PUSH
1396: LD_INT 1
1398: PUSH
1399: LD_INT 44
1401: PUSH
1402: LD_INT 0
1404: PUSH
1405: LD_INT 750
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: PUSH
1416: LD_INT 21
1418: PUSH
1419: LD_INT 1
1421: PUSH
1422: LD_INT 1
1424: PUSH
1425: LD_INT 43
1427: PUSH
1428: LD_INT 0
1430: PUSH
1431: LD_INT 750
1433: PUSH
1434: EMPTY
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: PUSH
1442: LD_INT 21
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 1
1450: PUSH
1451: LD_INT 43
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 750
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: LIST
1467: PUSH
1468: LD_INT 21
1470: PUSH
1471: LD_INT 1
1473: PUSH
1474: LD_INT 1
1476: PUSH
1477: LD_INT 43
1479: PUSH
1480: LD_INT 0
1482: PUSH
1483: LD_INT 750
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 21
1496: PUSH
1497: LD_INT 1
1499: PUSH
1500: LD_INT 1
1502: PUSH
1503: LD_INT 51
1505: PUSH
1506: LD_INT 90
1508: PUSH
1509: LD_INT 504
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_INT 21
1522: PUSH
1523: LD_INT 1
1525: PUSH
1526: LD_INT 1
1528: PUSH
1529: LD_INT 51
1531: PUSH
1532: LD_INT 80
1534: PUSH
1535: LD_INT 750
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1558: LD_ADDR_EXP 37
1562: PUSH
1563: LD_STRING JMM
1565: PPUSH
1566: LD_EXP 1
1570: NOT
1571: PPUSH
1572: LD_EXP 3
1576: PPUSH
1577: CALL 42196 0 3
1581: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1582: LD_ADDR_EXP 38
1586: PUSH
1587: LD_STRING Bobby
1589: PPUSH
1590: LD_EXP 1
1594: NOT
1595: PPUSH
1596: LD_EXP 3
1600: PPUSH
1601: CALL 42196 0 3
1605: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1606: LD_ADDR_EXP 39
1610: PUSH
1611: LD_STRING Cyrus
1613: PPUSH
1614: LD_EXP 1
1618: NOT
1619: PPUSH
1620: LD_EXP 3
1624: PPUSH
1625: CALL 42196 0 3
1629: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1630: LD_ADDR_EXP 40
1634: PUSH
1635: LD_STRING Lisa
1637: PPUSH
1638: LD_EXP 1
1642: NOT
1643: PPUSH
1644: LD_EXP 3
1648: PPUSH
1649: CALL 42196 0 3
1653: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1654: LD_ADDR_EXP 41
1658: PUSH
1659: LD_STRING Khatam
1661: PPUSH
1662: LD_EXP 1
1666: NOT
1667: PPUSH
1668: LD_EXP 3
1672: PPUSH
1673: CALL 42196 0 3
1677: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1678: LD_ADDR_EXP 42
1682: PUSH
1683: LD_STRING Brian
1685: PPUSH
1686: LD_EXP 1
1690: NOT
1691: PPUSH
1692: LD_EXP 3
1696: PPUSH
1697: CALL 42196 0 3
1701: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1702: LD_ADDR_EXP 43
1706: PUSH
1707: LD_STRING Jerry
1709: PPUSH
1710: LD_EXP 1
1714: NOT
1715: PPUSH
1716: LD_EXP 3
1720: PPUSH
1721: CALL 42196 0 3
1725: ST_TO_ADDR
// if Bobby then
1726: LD_EXP 38
1730: IFFALSE 1761
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1732: LD_ADDR_VAR 0 4
1736: PUSH
1737: LD_VAR 0 4
1741: PPUSH
1742: LD_VAR 0 4
1746: PUSH
1747: LD_INT 1
1749: PLUS
1750: PPUSH
1751: LD_EXP 38
1755: PPUSH
1756: CALL_OW 2
1760: ST_TO_ADDR
// if Cyrus then
1761: LD_EXP 39
1765: IFFALSE 1796
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1767: LD_ADDR_VAR 0 4
1771: PUSH
1772: LD_VAR 0 4
1776: PPUSH
1777: LD_VAR 0 4
1781: PUSH
1782: LD_INT 1
1784: PLUS
1785: PPUSH
1786: LD_EXP 39
1790: PPUSH
1791: CALL_OW 2
1795: ST_TO_ADDR
// if Lisa then
1796: LD_EXP 40
1800: IFFALSE 1831
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: LD_VAR 0 4
1811: PPUSH
1812: LD_VAR 0 4
1816: PUSH
1817: LD_INT 1
1819: PLUS
1820: PPUSH
1821: LD_EXP 40
1825: PPUSH
1826: CALL_OW 2
1830: ST_TO_ADDR
// if Khatam then
1831: LD_EXP 41
1835: IFFALSE 1866
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1837: LD_ADDR_VAR 0 4
1841: PUSH
1842: LD_VAR 0 4
1846: PPUSH
1847: LD_VAR 0 4
1851: PUSH
1852: LD_INT 1
1854: PLUS
1855: PPUSH
1856: LD_EXP 41
1860: PPUSH
1861: CALL_OW 2
1865: ST_TO_ADDR
// if Brian then
1866: LD_EXP 42
1870: IFFALSE 1901
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1872: LD_ADDR_VAR 0 4
1876: PUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: LD_VAR 0 4
1886: PUSH
1887: LD_INT 1
1889: PLUS
1890: PPUSH
1891: LD_EXP 42
1895: PPUSH
1896: CALL_OW 2
1900: ST_TO_ADDR
// if Jerry then
1901: LD_EXP 43
1905: IFFALSE 1936
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1907: LD_ADDR_VAR 0 4
1911: PUSH
1912: LD_VAR 0 4
1916: PPUSH
1917: LD_VAR 0 4
1921: PUSH
1922: LD_INT 1
1924: PLUS
1925: PPUSH
1926: LD_EXP 43
1930: PPUSH
1931: CALL_OW 2
1935: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1936: LD_STRING 02_other_survivors
1938: PPUSH
1939: CALL_OW 28
1943: IFFALSE 1958
// others := CreateCharacterSet ( 02_other_survivors ) ;
1945: LD_ADDR_VAR 0 5
1949: PUSH
1950: LD_STRING 02_other_survivors
1952: PPUSH
1953: CALL_OW 31
1957: ST_TO_ADDR
// if others then
1958: LD_VAR 0 5
1962: IFFALSE 1987
// begin tmp := tmp ^ others ;
1964: LD_ADDR_VAR 0 4
1968: PUSH
1969: LD_VAR 0 4
1973: PUSH
1974: LD_VAR 0 5
1978: ADD
1979: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1980: LD_STRING 02_other_survivors
1982: PPUSH
1983: CALL_OW 40
// end ; jmm_units := tmp diff 0 ;
1987: LD_ADDR_EXP 4
1991: PUSH
1992: LD_VAR 0 4
1996: PUSH
1997: LD_INT 0
1999: DIFF
2000: ST_TO_ADDR
// if not vehicles then
2001: LD_VAR 0 6
2005: NOT
2006: IFFALSE 2023
// vehicles := LoadVariable ( 02_tanks_1 , [ ] ) ;
2008: LD_ADDR_VAR 0 6
2012: PUSH
2013: LD_STRING 02_tanks_1
2015: PPUSH
2016: EMPTY
2017: PPUSH
2018: CALL_OW 30
2022: ST_TO_ADDR
// if vehicles then
2023: LD_VAR 0 6
2027: IFFALSE 2395
// begin got_mech := false ;
2029: LD_ADDR_VAR 0 7
2033: PUSH
2034: LD_INT 0
2036: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
2037: LD_VAR 0 4
2041: PPUSH
2042: LD_INT 25
2044: PUSH
2045: LD_INT 3
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: PPUSH
2052: CALL_OW 72
2056: IFFALSE 2066
// got_mech := true ;
2058: LD_ADDR_VAR 0 7
2062: PUSH
2063: LD_INT 1
2065: ST_TO_ADDR
// vcount := Count ( vehicles ) ;
2066: LD_ADDR_VAR 0 9
2070: PUSH
2071: LD_VAR 0 6
2075: PPUSH
2076: CALL 44420 0 1
2080: ST_TO_ADDR
// if vcount > 1 then
2081: LD_VAR 0 9
2085: PUSH
2086: LD_INT 1
2088: GREATER
2089: IFFALSE 2192
// begin for i := 2 to vcount do
2091: LD_ADDR_VAR 0 2
2095: PUSH
2096: DOUBLE
2097: LD_INT 2
2099: DEC
2100: ST_TO_ADDR
2101: LD_VAR 0 9
2105: PUSH
2106: FOR_TO
2107: IFFALSE 2190
// if vehicles [ i ] [ 4 ] = ru_cargo_bay then
2109: LD_VAR 0 6
2113: PUSH
2114: LD_VAR 0 2
2118: ARRAY
2119: PUSH
2120: LD_INT 4
2122: ARRAY
2123: PUSH
2124: LD_INT 51
2126: EQUAL
2127: IFFALSE 2188
// begin tmpv := vehicles [ i ] ;
2129: LD_ADDR_VAR 0 10
2133: PUSH
2134: LD_VAR 0 6
2138: PUSH
2139: LD_VAR 0 2
2143: ARRAY
2144: ST_TO_ADDR
// vehicles := Delete ( vehicles , i ) ;
2145: LD_ADDR_VAR 0 6
2149: PUSH
2150: LD_VAR 0 6
2154: PPUSH
2155: LD_VAR 0 2
2159: PPUSH
2160: CALL_OW 3
2164: ST_TO_ADDR
// vehicles := Insert ( vehicles , 1 , tmpv ) ;
2165: LD_ADDR_VAR 0 6
2169: PUSH
2170: LD_VAR 0 6
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: LD_VAR 0 10
2182: PPUSH
2183: CALL_OW 2
2187: ST_TO_ADDR
// end ;
2188: GO 2106
2190: POP
2191: POP
// end ; if vcount > 6 then
2192: LD_VAR 0 9
2196: PUSH
2197: LD_INT 6
2199: GREATER
2200: IFFALSE 2210
// vcount := 6 ;
2202: LD_ADDR_VAR 0 9
2206: PUSH
2207: LD_INT 6
2209: ST_TO_ADDR
// if jmm_units + 1 < vcount then
2210: LD_EXP 4
2214: PUSH
2215: LD_INT 1
2217: PLUS
2218: PUSH
2219: LD_VAR 0 9
2223: LESS
2224: IFFALSE 2240
// vcount := jmm_units + 1 ;
2226: LD_ADDR_VAR 0 9
2230: PUSH
2231: LD_EXP 4
2235: PUSH
2236: LD_INT 1
2238: PLUS
2239: ST_TO_ADDR
// for i := 1 to vcount do
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: DOUBLE
2246: LD_INT 1
2248: DEC
2249: ST_TO_ADDR
2250: LD_VAR 0 9
2254: PUSH
2255: FOR_TO
2256: IFFALSE 2393
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
2258: LD_ADDR_VAR 0 3
2262: PUSH
2263: LD_INT 1
2265: PPUSH
2266: LD_INT 3
2268: PPUSH
2269: LD_VAR 0 6
2273: PUSH
2274: LD_VAR 0 2
2278: ARRAY
2279: PUSH
2280: LD_INT 1
2282: ARRAY
2283: PPUSH
2284: LD_VAR 0 6
2288: PUSH
2289: LD_VAR 0 2
2293: ARRAY
2294: PUSH
2295: LD_INT 2
2297: ARRAY
2298: PPUSH
2299: LD_VAR 0 6
2303: PUSH
2304: LD_VAR 0 2
2308: ARRAY
2309: PUSH
2310: LD_INT 3
2312: ARRAY
2313: PPUSH
2314: LD_VAR 0 6
2318: PUSH
2319: LD_VAR 0 2
2323: ARRAY
2324: PUSH
2325: LD_INT 4
2327: ARRAY
2328: PPUSH
2329: LD_INT 40
2331: PPUSH
2332: CALL 505 0 7
2336: ST_TO_ADDR
// if not got_mech then
2337: LD_VAR 0 7
2341: NOT
2342: IFFALSE 2368
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
2344: LD_VAR 0 3
2348: PPUSH
2349: LD_VAR 0 6
2353: PUSH
2354: LD_VAR 0 2
2358: ARRAY
2359: PUSH
2360: LD_INT 6
2362: ARRAY
2363: PPUSH
2364: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
2368: LD_ADDR_VAR 0 4
2372: PUSH
2373: LD_VAR 0 4
2377: PPUSH
2378: LD_INT 1
2380: PPUSH
2381: LD_VAR 0 3
2385: PPUSH
2386: CALL_OW 2
2390: ST_TO_ADDR
// end ;
2391: GO 2255
2393: POP
2394: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
2395: LD_EXP 37
2399: PPUSH
2400: LD_INT 194
2402: PPUSH
2403: LD_INT 119
2405: PPUSH
2406: LD_INT 0
2408: PPUSH
2409: CALL_OW 48
// if tmp then
2413: LD_VAR 0 4
2417: IFFALSE 2609
// begin for i in tmp do
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: LD_VAR 0 4
2428: PUSH
2429: FOR_IN
2430: IFFALSE 2607
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2432: LD_VAR 0 2
2436: PPUSH
2437: CALL_OW 257
2441: PUSH
2442: LD_INT 1
2444: NONEQUAL
2445: IFFALSE 2459
2447: PUSH
2448: LD_VAR 0 2
2452: PUSH
2453: LD_EXP 41
2457: NONEQUAL
2458: AND
2459: IFFALSE 2473
// SetClass ( i , 1 ) ;
2461: LD_VAR 0 2
2465: PPUSH
2466: LD_INT 1
2468: PPUSH
2469: CALL_OW 336
// if i = Khatam then
2473: LD_VAR 0 2
2477: PUSH
2478: LD_EXP 41
2482: EQUAL
2483: IFFALSE 2497
// SetClass ( i , 4 ) ;
2485: LD_VAR 0 2
2489: PPUSH
2490: LD_INT 4
2492: PPUSH
2493: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2497: LD_ADDR_VAR 0 8
2501: PUSH
2502: LD_INT 22
2504: PUSH
2505: LD_INT 1
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 21
2514: PUSH
2515: LD_INT 2
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: PUSH
2522: LD_INT 58
2524: PUSH
2525: EMPTY
2526: LIST
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: LIST
2532: PPUSH
2533: CALL_OW 69
2537: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2538: LD_VAR 0 2
2542: PPUSH
2543: CALL_OW 247
2547: PUSH
2548: LD_INT 1
2550: EQUAL
2551: IFFALSE 2559
2553: PUSH
2554: LD_VAR 0 8
2558: AND
2559: IFFALSE 2581
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2561: LD_VAR 0 2
2565: PPUSH
2566: LD_VAR 0 8
2570: PUSH
2571: LD_INT 1
2573: ARRAY
2574: PPUSH
2575: CALL_OW 52
2579: GO 2596
// PlaceUnitArea ( i , startArea , false ) ;
2581: LD_VAR 0 2
2585: PPUSH
2586: LD_INT 1
2588: PPUSH
2589: LD_INT 0
2591: PPUSH
2592: CALL_OW 49
// ComHold ( i ) ;
2596: LD_VAR 0 2
2600: PPUSH
2601: CALL_OW 140
// end ;
2605: GO 2429
2607: POP
2608: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2609: LD_ADDR_EXP 7
2613: PUSH
2614: LD_STRING 02_mikhailStatus_1
2616: PPUSH
2617: LD_INT 0
2619: PPUSH
2620: CALL_OW 30
2624: ST_TO_ADDR
// if not bierezov_exist and not debug then
2625: LD_EXP 7
2629: NOT
2630: IFFALSE 2639
2632: PUSH
2633: LD_EXP 1
2637: NOT
2638: AND
2639: IFFALSE 2643
// exit ;
2641: GO 2677
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2643: LD_ADDR_EXP 45
2647: PUSH
2648: LD_STRING Mikhail
2650: PPUSH
2651: LD_INT 0
2653: PPUSH
2654: LD_STRING 
2656: PPUSH
2657: CALL 42196 0 3
2661: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2662: LD_EXP 45
2666: PPUSH
2667: LD_INT 1
2669: PPUSH
2670: LD_INT 0
2672: PPUSH
2673: CALL_OW 49
// end ;
2677: LD_VAR 0 1
2681: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2682: LD_INT 0
2684: PPUSH
2685: PPUSH
2686: PPUSH
2687: PPUSH
// uc_side := 4 ;
2688: LD_ADDR_OWVAR 20
2692: PUSH
2693: LD_INT 4
2695: ST_TO_ADDR
// uc_nation := 1 ;
2696: LD_ADDR_OWVAR 21
2700: PUSH
2701: LD_INT 1
2703: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2704: LD_ADDR_EXP 44
2708: PUSH
2709: LD_STRING Cornell
2711: PPUSH
2712: LD_INT 0
2714: PPUSH
2715: LD_STRING 
2717: PPUSH
2718: CALL 42196 0 3
2722: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2723: LD_ADDR_EXP 6
2727: PUSH
2728: LD_INT 9
2730: PUSH
2731: LD_EXP 4
2735: MINUS
2736: ST_TO_ADDR
// tmp := [ ] ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: EMPTY
2743: ST_TO_ADDR
// if cornel_units < 4 then
2744: LD_EXP 6
2748: PUSH
2749: LD_INT 4
2751: LESS
2752: IFFALSE 2762
// cornel_units := 4 ;
2754: LD_ADDR_EXP 6
2758: PUSH
2759: LD_INT 4
2761: ST_TO_ADDR
// for i = 1 to cornel_units do
2762: LD_ADDR_VAR 0 4
2766: PUSH
2767: DOUBLE
2768: LD_INT 1
2770: DEC
2771: ST_TO_ADDR
2772: LD_EXP 6
2776: PUSH
2777: FOR_TO
2778: IFFALSE 2876
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2780: LD_INT 0
2782: PPUSH
2783: LD_INT 1
2785: PUSH
2786: LD_INT 1
2788: PUSH
2789: LD_INT 1
2791: PUSH
2792: LD_INT 2
2794: PUSH
2795: LD_INT 4
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: LIST
2802: LIST
2803: LIST
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 5
2812: MOD
2813: PUSH
2814: LD_INT 1
2816: PLUS
2817: ARRAY
2818: PPUSH
2819: LD_INT 2
2821: PPUSH
2822: CALL_OW 380
// un := CreateHuman ;
2826: LD_ADDR_VAR 0 3
2830: PUSH
2831: CALL_OW 44
2835: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2836: LD_ADDR_VAR 0 2
2840: PUSH
2841: LD_VAR 0 2
2845: PPUSH
2846: LD_INT 1
2848: PPUSH
2849: LD_VAR 0 3
2853: PPUSH
2854: CALL_OW 2
2858: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2859: LD_VAR 0 3
2863: PPUSH
2864: LD_INT 2
2866: PPUSH
2867: LD_INT 0
2869: PPUSH
2870: CALL_OW 49
// end ;
2874: GO 2777
2876: POP
2877: POP
// cornel_units := tmp ;
2878: LD_ADDR_EXP 6
2882: PUSH
2883: LD_VAR 0 2
2887: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2888: LD_EXP 44
2892: PPUSH
2893: LD_INT 191
2895: PPUSH
2896: LD_INT 106
2898: PPUSH
2899: LD_INT 0
2901: PPUSH
2902: CALL_OW 48
// end ;
2906: LD_VAR 0 1
2910: RET
// export function PrepareWesternBase ; var i ; begin
2911: LD_INT 0
2913: PPUSH
2914: PPUSH
// uc_side := 8 ;
2915: LD_ADDR_OWVAR 20
2919: PUSH
2920: LD_INT 8
2922: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2923: LD_ADDR_EXP 47
2927: PUSH
2928: LD_STRING Lynch
2930: PPUSH
2931: LD_INT 0
2933: PPUSH
2934: LD_STRING 
2936: PPUSH
2937: CALL 42196 0 3
2941: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2942: LD_ADDR_EXP 48
2946: PUSH
2947: LD_STRING Walker
2949: PPUSH
2950: LD_INT 0
2952: PPUSH
2953: LD_STRING 
2955: PPUSH
2956: CALL 42196 0 3
2960: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2961: LD_ADDR_EXP 49
2965: PUSH
2966: LD_STRING Turner
2968: PPUSH
2969: LD_INT 0
2971: PPUSH
2972: LD_STRING 
2974: PPUSH
2975: CALL 42196 0 3
2979: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2980: LD_ADDR_EXP 50
2984: PUSH
2985: LD_STRING Jillian
2987: PPUSH
2988: LD_INT 0
2990: PPUSH
2991: LD_STRING 
2993: PPUSH
2994: CALL 42196 0 3
2998: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2999: LD_ADDR_VAR 0 2
3003: PUSH
3004: LD_EXP 47
3008: PUSH
3009: LD_EXP 48
3013: PUSH
3014: LD_EXP 49
3018: PUSH
3019: LD_EXP 50
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: LIST
3028: LIST
3029: PUSH
3030: FOR_IN
3031: IFFALSE 3059
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
3033: LD_VAR 0 2
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
// ComHold ( i ) ;
3048: LD_VAR 0 2
3052: PPUSH
3053: CALL_OW 140
// end ;
3057: GO 3030
3059: POP
3060: POP
// end ;
3061: LD_VAR 0 1
3065: RET
// export function SelectGroup ; var units , selected , i ; begin
3066: LD_INT 0
3068: PPUSH
3069: PPUSH
3070: PPUSH
3071: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
3072: LD_ADDR_VAR 0 2
3076: PUSH
3077: LD_EXP 37
3081: PUSH
3082: LD_INT -3
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_EXP 4
3093: ADD
3094: PUSH
3095: LD_INT -2
3097: PUSH
3098: LD_INT -4
3100: PUSH
3101: LD_EXP 44
3105: PUSH
3106: LD_EXP 45
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: ADD
3117: PUSH
3118: LD_INT -3
3120: PUSH
3121: EMPTY
3122: LIST
3123: ADD
3124: PUSH
3125: LD_EXP 6
3129: ADD
3130: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
3131: LD_ADDR_VAR 0 3
3135: PUSH
3136: LD_EXP 37
3140: PUSH
3141: LD_STRING Select four characters to go with you
3143: PPUSH
3144: LD_INT 4
3146: PPUSH
3147: LD_INT 4
3149: PPUSH
3150: LD_VAR 0 2
3154: PPUSH
3155: EMPTY
3156: PPUSH
3157: CALL_OW 42
3161: ADD
3162: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
3163: LD_ADDR_EXP 6
3167: PUSH
3168: LD_EXP 4
3172: PUSH
3173: LD_EXP 6
3177: UNION
3178: PUSH
3179: LD_VAR 0 3
3183: DIFF
3184: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
3185: LD_ADDR_VAR 0 4
3189: PUSH
3190: LD_EXP 6
3194: PUSH
3195: LD_EXP 45
3199: ADD
3200: PUSH
3201: FOR_IN
3202: IFFALSE 3233
// if GetSide ( i ) = 1 then
3204: LD_VAR 0 4
3208: PPUSH
3209: CALL_OW 255
3213: PUSH
3214: LD_INT 1
3216: EQUAL
3217: IFFALSE 3231
// SetSide ( i , 4 ) ;
3219: LD_VAR 0 4
3223: PPUSH
3224: LD_INT 4
3226: PPUSH
3227: CALL_OW 235
3231: GO 3201
3233: POP
3234: POP
// for i in selected do
3235: LD_ADDR_VAR 0 4
3239: PUSH
3240: LD_VAR 0 3
3244: PUSH
3245: FOR_IN
3246: IFFALSE 3277
// if GetSide ( i ) = 4 then
3248: LD_VAR 0 4
3252: PPUSH
3253: CALL_OW 255
3257: PUSH
3258: LD_INT 4
3260: EQUAL
3261: IFFALSE 3275
// SetSide ( i , 1 ) ;
3263: LD_VAR 0 4
3267: PPUSH
3268: LD_INT 1
3270: PPUSH
3271: CALL_OW 235
3275: GO 3245
3277: POP
3278: POP
// jmm_units := jmm_units diff cornel_units ;
3279: LD_ADDR_EXP 4
3283: PUSH
3284: LD_EXP 4
3288: PUSH
3289: LD_EXP 6
3293: DIFF
3294: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
3295: LD_EXP 38
3299: PPUSH
3300: CALL_OW 255
3304: PUSH
3305: LD_INT 4
3307: EQUAL
3308: IFFALSE 3323
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
3310: LD_EXP 3
3314: PUSH
3315: LD_STRING Bobby
3317: STR
3318: PPUSH
3319: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
3323: LD_EXP 39
3327: PPUSH
3328: CALL_OW 255
3332: PUSH
3333: LD_INT 4
3335: EQUAL
3336: IFFALSE 3351
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
3338: LD_EXP 3
3342: PUSH
3343: LD_STRING Cyrus
3345: STR
3346: PPUSH
3347: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
3351: LD_EXP 40
3355: PPUSH
3356: CALL_OW 255
3360: PUSH
3361: LD_INT 4
3363: EQUAL
3364: IFFALSE 3379
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
3366: LD_EXP 3
3370: PUSH
3371: LD_STRING Lisa
3373: STR
3374: PPUSH
3375: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
3379: LD_EXP 41
3383: PPUSH
3384: CALL_OW 255
3388: PUSH
3389: LD_INT 4
3391: EQUAL
3392: IFFALSE 3407
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
3394: LD_EXP 3
3398: PUSH
3399: LD_STRING Khatam
3401: STR
3402: PPUSH
3403: CALL_OW 40
// if GetSide ( Brian ) = 4 then
3407: LD_EXP 42
3411: PPUSH
3412: CALL_OW 255
3416: PUSH
3417: LD_INT 4
3419: EQUAL
3420: IFFALSE 3435
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3422: LD_EXP 3
3426: PUSH
3427: LD_STRING Brian
3429: STR
3430: PPUSH
3431: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3435: LD_EXP 43
3439: PPUSH
3440: CALL_OW 255
3444: PUSH
3445: LD_INT 4
3447: EQUAL
3448: IFFALSE 3463
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3450: LD_EXP 3
3454: PUSH
3455: LD_STRING Jerry
3457: STR
3458: PPUSH
3459: CALL_OW 40
// end ; end_of_file
3463: LD_VAR 0 1
3467: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3468: LD_INT 0
3470: PPUSH
3471: PPUSH
3472: PPUSH
3473: PPUSH
3474: PPUSH
3475: PPUSH
3476: PPUSH
3477: PPUSH
3478: PPUSH
3479: PPUSH
3480: PPUSH
3481: PPUSH
3482: PPUSH
// ru_alert := false ;
3483: LD_ADDR_EXP 60
3487: PUSH
3488: LD_INT 0
3490: ST_TO_ADDR
// ru_produce_list := [ ] ;
3491: LD_ADDR_EXP 57
3495: PUSH
3496: EMPTY
3497: ST_TO_ADDR
// if Difficulty > 1 then
3498: LD_OWVAR 67
3502: PUSH
3503: LD_INT 1
3505: GREATER
3506: IFFALSE 3630
// begin uc_side := 3 ;
3508: LD_ADDR_OWVAR 20
3512: PUSH
3513: LD_INT 3
3515: ST_TO_ADDR
// uc_nation := 3 ;
3516: LD_ADDR_OWVAR 21
3520: PUSH
3521: LD_INT 3
3523: ST_TO_ADDR
// bc_type := b_breastwork ;
3524: LD_ADDR_OWVAR 42
3528: PUSH
3529: LD_INT 31
3531: ST_TO_ADDR
// bc_level := Difficulty ;
3532: LD_ADDR_OWVAR 43
3536: PUSH
3537: LD_OWVAR 67
3541: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3542: LD_INT 22
3544: PPUSH
3545: LD_INT 14
3547: PPUSH
3548: LD_INT 0
3550: PPUSH
3551: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3555: LD_INT 48
3557: PPUSH
3558: LD_INT 46
3560: PPUSH
3561: LD_INT 0
3563: PPUSH
3564: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3568: LD_INT 86
3570: PPUSH
3571: LD_INT 65
3573: PPUSH
3574: LD_INT 5
3576: PPUSH
3577: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3581: LD_INT 165
3583: PPUSH
3584: LD_INT 73
3586: PPUSH
3587: LD_INT 5
3589: PPUSH
3590: CALL_OW 47
// if Difficulty > 2 then
3594: LD_OWVAR 67
3598: PUSH
3599: LD_INT 2
3601: GREATER
3602: IFFALSE 3630
// begin CreateAndPlaceBuildingXYD ( 152 , 114 , 4 ) ;
3604: LD_INT 152
3606: PPUSH
3607: LD_INT 114
3609: PPUSH
3610: LD_INT 4
3612: PPUSH
3613: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 157 , 97 , 4 ) ;
3617: LD_INT 157
3619: PPUSH
3620: LD_INT 97
3622: PPUSH
3623: LD_INT 4
3625: PPUSH
3626: CALL_OW 47
// end ; end ; if Difficulty >= 3 then
3630: LD_OWVAR 67
3634: PUSH
3635: LD_INT 3
3637: GREATEREQUAL
3638: IFFALSE 3653
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3640: LD_INT 51
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: LD_INT 2
3648: PPUSH
3649: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3653: LD_ADDR_VAR 0 7
3657: PUSH
3658: LD_INT 22
3660: PUSH
3661: LD_INT 3
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: PUSH
3668: LD_INT 2
3670: PUSH
3671: LD_INT 30
3673: PUSH
3674: LD_INT 31
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: PUSH
3681: LD_INT 30
3683: PUSH
3684: LD_INT 32
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: LIST
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: PPUSH
3700: CALL_OW 69
3704: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3705: LD_ADDR_VAR 0 8
3709: PUSH
3710: LD_INT 22
3712: PUSH
3713: LD_INT 3
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PUSH
3720: LD_INT 30
3722: PUSH
3723: LD_INT 4
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: PPUSH
3734: CALL_OW 69
3738: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3739: LD_ADDR_VAR 0 10
3743: PUSH
3744: LD_INT 22
3746: PUSH
3747: LD_INT 3
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: PUSH
3754: LD_INT 30
3756: PUSH
3757: LD_INT 3
3759: PUSH
3760: EMPTY
3761: LIST
3762: LIST
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 69
3772: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3773: LD_ADDR_VAR 0 9
3777: PUSH
3778: LD_INT 22
3780: PUSH
3781: LD_INT 3
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 30
3790: PUSH
3791: LD_INT 6
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PPUSH
3802: CALL_OW 69
3806: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3807: LD_ADDR_VAR 0 2
3811: PUSH
3812: LD_INT 22
3814: PUSH
3815: LD_INT 3
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PUSH
3822: LD_INT 30
3824: PUSH
3825: LD_INT 1
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PPUSH
3836: CALL_OW 69
3840: PUSH
3841: FOR_IN
3842: IFFALSE 3886
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3844: LD_VAR 0 2
3848: PPUSH
3849: CALL_OW 274
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: LD_INT 1000
3859: PPUSH
3860: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3864: LD_VAR 0 2
3868: PPUSH
3869: CALL_OW 274
3873: PPUSH
3874: LD_INT 2
3876: PPUSH
3877: LD_INT 300
3879: PPUSH
3880: CALL_OW 277
// end ;
3884: GO 3841
3886: POP
3887: POP
// uc_side := 3 ;
3888: LD_ADDR_OWVAR 20
3892: PUSH
3893: LD_INT 3
3895: ST_TO_ADDR
// uc_nation := 3 ;
3896: LD_ADDR_OWVAR 21
3900: PUSH
3901: LD_INT 3
3903: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3904: LD_ADDR_VAR 0 11
3908: PUSH
3909: LD_INT 2
3911: PUSH
3912: LD_INT 3
3914: PUSH
3915: LD_INT 4
3917: PUSH
3918: LD_INT 4
3920: PUSH
3921: EMPTY
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: PUSH
3927: LD_OWVAR 67
3931: ARRAY
3932: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3933: LD_ADDR_EXP 52
3937: PUSH
3938: LD_STRING Pokryshkin
3940: PPUSH
3941: LD_INT 0
3943: PPUSH
3944: LD_STRING 
3946: PPUSH
3947: CALL 42196 0 3
3951: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3952: LD_EXP 52
3956: PPUSH
3957: LD_INT 63
3959: PPUSH
3960: LD_INT 21
3962: PPUSH
3963: LD_INT 0
3965: PPUSH
3966: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3970: LD_EXP 52
3974: PPUSH
3975: CALL_OW 140
// InitHc ;
3979: CALL_OW 19
// for i in fac do
3983: LD_ADDR_VAR 0 2
3987: PUSH
3988: LD_VAR 0 10
3992: PUSH
3993: FOR_IN
3994: IFFALSE 4047
// begin for j = 1 to 6 do
3996: LD_ADDR_VAR 0 3
4000: PUSH
4001: DOUBLE
4002: LD_INT 1
4004: DEC
4005: ST_TO_ADDR
4006: LD_INT 6
4008: PUSH
4009: FOR_TO
4010: IFFALSE 4043
// begin PrepareHuman ( false , 3 , skill ) ;
4012: LD_INT 0
4014: PPUSH
4015: LD_INT 3
4017: PPUSH
4018: LD_VAR 0 11
4022: PPUSH
4023: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4027: CALL_OW 44
4031: PPUSH
4032: LD_VAR 0 2
4036: PPUSH
4037: CALL_OW 52
// end ;
4041: GO 4009
4043: POP
4044: POP
// end ;
4045: GO 3993
4047: POP
4048: POP
// for i in lab do
4049: LD_ADDR_VAR 0 2
4053: PUSH
4054: LD_VAR 0 9
4058: PUSH
4059: FOR_IN
4060: IFFALSE 4093
// begin PrepareHuman ( false , 4 , skill ) ;
4062: LD_INT 0
4064: PPUSH
4065: LD_INT 4
4067: PPUSH
4068: LD_VAR 0 11
4072: PPUSH
4073: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4077: CALL_OW 44
4081: PPUSH
4082: LD_VAR 0 2
4086: PPUSH
4087: CALL_OW 52
// end ;
4091: GO 4059
4093: POP
4094: POP
// for i in tw do
4095: LD_ADDR_VAR 0 2
4099: PUSH
4100: LD_VAR 0 7
4104: PUSH
4105: FOR_IN
4106: IFFALSE 4155
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
4108: LD_VAR 0 2
4112: PPUSH
4113: LD_INT 42
4115: PUSH
4116: LD_INT 43
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: PUSH
4123: LD_INT 1
4125: PPUSH
4126: LD_INT 2
4128: PPUSH
4129: CALL_OW 12
4133: ARRAY
4134: PPUSH
4135: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
4139: LD_VAR 0 11
4143: PPUSH
4144: LD_VAR 0 2
4148: PPUSH
4149: CALL 783 0 2
// end ;
4153: GO 4105
4155: POP
4156: POP
// for i in bar do
4157: LD_ADDR_VAR 0 2
4161: PUSH
4162: LD_VAR 0 8
4166: PUSH
4167: FOR_IN
4168: IFFALSE 4201
// begin PrepareHuman ( false , 1 , skill ) ;
4170: LD_INT 0
4172: PPUSH
4173: LD_INT 1
4175: PPUSH
4176: LD_VAR 0 11
4180: PPUSH
4181: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4185: CALL_OW 44
4189: PPUSH
4190: LD_VAR 0 2
4194: PPUSH
4195: CALL_OW 52
// end ;
4199: GO 4167
4201: POP
4202: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
4203: LD_ADDR_VAR 0 13
4207: PUSH
4208: LD_INT 100
4210: PUSH
4211: LD_INT 9
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: PUSH
4218: LD_INT 135
4220: PUSH
4221: LD_INT 60
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: PUSH
4228: LD_INT 41
4230: PUSH
4231: LD_INT 6
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: PUSH
4238: LD_INT 22
4240: PUSH
4241: LD_INT 9
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PUSH
4248: LD_INT 84
4250: PUSH
4251: LD_INT 14
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: ST_TO_ADDR
// vehicles := [ ] ;
4265: LD_ADDR_VAR 0 12
4269: PUSH
4270: EMPTY
4271: ST_TO_ADDR
// for i in spot_xy do
4272: LD_ADDR_VAR 0 2
4276: PUSH
4277: LD_VAR 0 13
4281: PUSH
4282: FOR_IN
4283: IFFALSE 4441
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
4285: LD_ADDR_VAR 0 6
4289: PUSH
4290: LD_INT 3
4292: PPUSH
4293: LD_INT 3
4295: PPUSH
4296: LD_INT 22
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_INT 1
4304: PPUSH
4305: LD_INT 42
4307: PUSH
4308: LD_INT 43
4310: PUSH
4311: LD_INT 44
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: PUSH
4319: LD_INT 1
4321: PPUSH
4322: LD_INT 3
4324: PPUSH
4325: CALL_OW 12
4329: ARRAY
4330: PPUSH
4331: LD_INT 100
4333: PPUSH
4334: CALL 505 0 7
4338: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
4339: LD_ADDR_VAR 0 12
4343: PUSH
4344: LD_VAR 0 12
4348: PPUSH
4349: LD_VAR 0 12
4353: PUSH
4354: LD_INT 1
4356: PLUS
4357: PPUSH
4358: LD_VAR 0 6
4362: PPUSH
4363: CALL_OW 2
4367: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4368: LD_VAR 0 6
4372: PPUSH
4373: LD_INT 3
4375: PPUSH
4376: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
4380: LD_VAR 0 6
4384: PPUSH
4385: LD_VAR 0 2
4389: PUSH
4390: LD_INT 1
4392: ARRAY
4393: PPUSH
4394: LD_VAR 0 2
4398: PUSH
4399: LD_INT 2
4401: ARRAY
4402: PPUSH
4403: LD_INT 0
4405: PPUSH
4406: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
4410: LD_INT 0
4412: PPUSH
4413: LD_INT 3
4415: PPUSH
4416: LD_VAR 0 11
4420: PPUSH
4421: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4425: CALL_OW 44
4429: PPUSH
4430: LD_VAR 0 6
4434: PPUSH
4435: CALL_OW 52
// end ;
4439: GO 4282
4441: POP
4442: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
4443: LD_ADDR_VAR 0 2
4447: PUSH
4448: DOUBLE
4449: LD_INT 1
4451: DEC
4452: ST_TO_ADDR
4453: LD_INT 5
4455: PUSH
4456: LD_INT 7
4458: PUSH
4459: LD_INT 8
4461: PUSH
4462: LD_INT 9
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: PUSH
4471: LD_OWVAR 67
4475: ARRAY
4476: PUSH
4477: FOR_TO
4478: IFFALSE 4538
// begin PrepareHuman ( false , 1 , skill ) ;
4480: LD_INT 0
4482: PPUSH
4483: LD_INT 1
4485: PPUSH
4486: LD_VAR 0 11
4490: PPUSH
4491: CALL_OW 380
// un := CreateHuman ;
4495: LD_ADDR_VAR 0 5
4499: PUSH
4500: CALL_OW 44
4504: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4505: LD_VAR 0 5
4509: PPUSH
4510: LD_INT 11
4512: PPUSH
4513: LD_INT 0
4515: PPUSH
4516: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4520: LD_ADDR_EXP 55
4524: PUSH
4525: LD_EXP 55
4529: PUSH
4530: LD_VAR 0 5
4534: ADD
4535: ST_TO_ADDR
// end ;
4536: GO 4477
4538: POP
4539: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4540: LD_ADDR_VAR 0 2
4544: PUSH
4545: DOUBLE
4546: LD_INT 1
4548: DEC
4549: ST_TO_ADDR
4550: LD_INT 2
4552: PUSH
4553: LD_INT 3
4555: PUSH
4556: LD_INT 4
4558: PUSH
4559: LD_INT 5
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: PUSH
4568: LD_OWVAR 67
4572: ARRAY
4573: PUSH
4574: FOR_TO
4575: IFFALSE 4635
// begin PrepareHuman ( false , 1 , skill ) ;
4577: LD_INT 0
4579: PPUSH
4580: LD_INT 1
4582: PPUSH
4583: LD_VAR 0 11
4587: PPUSH
4588: CALL_OW 380
// un := CreateHuman ;
4592: LD_ADDR_VAR 0 5
4596: PUSH
4597: CALL_OW 44
4601: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4602: LD_VAR 0 5
4606: PPUSH
4607: LD_INT 12
4609: PPUSH
4610: LD_INT 0
4612: PPUSH
4613: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4617: LD_ADDR_EXP 53
4621: PUSH
4622: LD_EXP 53
4626: PUSH
4627: LD_VAR 0 5
4631: ADD
4632: ST_TO_ADDR
// end ;
4633: GO 4574
4635: POP
4636: POP
// for i = 1 to 2 do
4637: LD_ADDR_VAR 0 2
4641: PUSH
4642: DOUBLE
4643: LD_INT 1
4645: DEC
4646: ST_TO_ADDR
4647: LD_INT 2
4649: PUSH
4650: FOR_TO
4651: IFFALSE 4744
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4653: LD_INT 1
4655: PPUSH
4656: LD_INT 1
4658: PPUSH
4659: LD_VAR 0 11
4663: PPUSH
4664: CALL_OW 380
// hc_attr := [ 8 + Difficulty , 8 + Difficulty ] ;
4668: LD_ADDR_OWVAR 29
4672: PUSH
4673: LD_INT 8
4675: PUSH
4676: LD_OWVAR 67
4680: PLUS
4681: PUSH
4682: LD_INT 8
4684: PUSH
4685: LD_OWVAR 67
4689: PLUS
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: ST_TO_ADDR
// un := CreateHuman ;
4695: LD_ADDR_VAR 0 5
4699: PUSH
4700: CALL_OW 44
4704: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4705: LD_VAR 0 5
4709: PPUSH
4710: LD_INT 39
4712: PPUSH
4713: LD_INT 12
4715: PPUSH
4716: LD_INT 3
4718: PPUSH
4719: LD_INT 0
4721: PPUSH
4722: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4726: LD_ADDR_EXP 54
4730: PUSH
4731: LD_EXP 54
4735: PUSH
4736: LD_VAR 0 5
4740: ADD
4741: ST_TO_ADDR
// end ;
4742: GO 4650
4744: POP
4745: POP
// InitHc ;
4746: CALL_OW 19
// for i = 1 to 3 do
4750: LD_ADDR_VAR 0 2
4754: PUSH
4755: DOUBLE
4756: LD_INT 1
4758: DEC
4759: ST_TO_ADDR
4760: LD_INT 3
4762: PUSH
4763: FOR_TO
4764: IFFALSE 4830
// begin PrepareHuman ( false , 1 , skill ) ;
4766: LD_INT 0
4768: PPUSH
4769: LD_INT 1
4771: PPUSH
4772: LD_VAR 0 11
4776: PPUSH
4777: CALL_OW 380
// un := CreateHuman ;
4781: LD_ADDR_VAR 0 5
4785: PUSH
4786: CALL_OW 44
4790: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4791: LD_VAR 0 5
4795: PPUSH
4796: LD_INT 180
4798: PPUSH
4799: LD_INT 11
4801: PPUSH
4802: LD_INT 4
4804: PPUSH
4805: LD_INT 0
4807: PPUSH
4808: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4812: LD_ADDR_EXP 58
4816: PUSH
4817: LD_EXP 58
4821: PUSH
4822: LD_VAR 0 5
4826: ADD
4827: ST_TO_ADDR
// end ;
4828: GO 4763
4830: POP
4831: POP
// ru_vehicles := vehicles ;
4832: LD_ADDR_EXP 56
4836: PUSH
4837: LD_VAR 0 12
4841: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4842: LD_ADDR_EXP 59
4846: PUSH
4847: LD_INT 131
4849: PUSH
4850: LD_INT 121
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: LD_INT 113
4859: PUSH
4860: LD_INT 90
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PUSH
4867: LD_INT 93
4869: PUSH
4870: LD_INT 62
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 106
4884: PUSH
4885: LD_INT 54
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: LD_INT 120
4894: PUSH
4895: LD_INT 80
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PUSH
4902: LD_INT 143
4904: PUSH
4905: LD_INT 120
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: LIST
4916: PUSH
4917: LD_INT 154
4919: PUSH
4920: LD_INT 116
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: LD_INT 140
4929: PUSH
4930: LD_INT 93
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: LD_INT 130
4939: PUSH
4940: LD_INT 58
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: LIST
4951: PUSH
4952: LD_INT 105
4954: PUSH
4955: LD_INT 106
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: PUSH
4962: LD_INT 134
4964: PUSH
4965: LD_INT 98
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PUSH
4972: LD_INT 159
4974: PUSH
4975: LD_INT 113
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: LIST
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: ST_TO_ADDR
// if Difficulty = 1 then
4993: LD_OWVAR 67
4997: PUSH
4998: LD_INT 1
5000: EQUAL
5001: IFFALSE 5005
// exit ;
5003: GO 5142
// if Difficulty > 2 then
5005: LD_OWVAR 67
5009: PUSH
5010: LD_INT 2
5012: GREATER
5013: IFFALSE 5087
// begin for i := 1 to Difficulty - 1 do
5015: LD_ADDR_VAR 0 2
5019: PUSH
5020: DOUBLE
5021: LD_INT 1
5023: DEC
5024: ST_TO_ADDR
5025: LD_OWVAR 67
5029: PUSH
5030: LD_INT 1
5032: MINUS
5033: PUSH
5034: FOR_TO
5035: IFFALSE 5085
// begin PrepareSoldier ( false , skill ) ;
5037: LD_INT 0
5039: PPUSH
5040: LD_VAR 0 11
5044: PPUSH
5045: CALL_OW 381
// un := CreateHuman ;
5049: LD_ADDR_VAR 0 5
5053: PUSH
5054: CALL_OW 44
5058: ST_TO_ADDR
// PlaceUnitArea ( un , forestHillArea , false ) ;
5059: LD_VAR 0 5
5063: PPUSH
5064: LD_INT 19
5066: PPUSH
5067: LD_INT 0
5069: PPUSH
5070: CALL_OW 49
// ComHold ( un ) ;
5074: LD_VAR 0 5
5078: PPUSH
5079: CALL_OW 140
// end ;
5083: GO 5034
5085: POP
5086: POP
// end ; for i := 1 to Difficulty - 1 do
5087: LD_ADDR_VAR 0 2
5091: PUSH
5092: DOUBLE
5093: LD_INT 1
5095: DEC
5096: ST_TO_ADDR
5097: LD_OWVAR 67
5101: PUSH
5102: LD_INT 1
5104: MINUS
5105: PUSH
5106: FOR_TO
5107: IFFALSE 5140
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
5109: LD_ADDR_EXP 57
5113: PUSH
5114: LD_EXP 57
5118: PUSH
5119: LD_INT 22
5121: PUSH
5122: LD_INT 1
5124: PUSH
5125: LD_INT 1
5127: PUSH
5128: LD_INT 43
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: ADD
5137: ST_TO_ADDR
5138: GO 5106
5140: POP
5141: POP
// end ;
5142: LD_VAR 0 1
5146: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
5147: LD_INT 22
5149: PUSH
5150: LD_INT 3
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: PUSH
5157: LD_INT 21
5159: PUSH
5160: LD_INT 2
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PPUSH
5171: CALL_OW 69
5175: IFFALSE 5269
5177: GO 5179
5179: DISABLE
5180: LD_INT 0
5182: PPUSH
5183: PPUSH
// begin enable ;
5184: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
5185: LD_ADDR_VAR 0 2
5189: PUSH
5190: LD_INT 22
5192: PUSH
5193: LD_INT 3
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: PUSH
5200: LD_INT 21
5202: PUSH
5203: LD_INT 2
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 69
5218: ST_TO_ADDR
// if filter then
5219: LD_VAR 0 2
5223: IFFALSE 5269
// for i in filter do
5225: LD_ADDR_VAR 0 1
5229: PUSH
5230: LD_VAR 0 2
5234: PUSH
5235: FOR_IN
5236: IFFALSE 5267
// if GetFuel ( i ) < 20 then
5238: LD_VAR 0 1
5242: PPUSH
5243: CALL_OW 261
5247: PUSH
5248: LD_INT 20
5250: LESS
5251: IFFALSE 5265
// SetFuel ( i , 20 ) ;
5253: LD_VAR 0 1
5257: PPUSH
5258: LD_INT 20
5260: PPUSH
5261: CALL_OW 240
5265: GO 5235
5267: POP
5268: POP
// end ;
5269: PPOPN 2
5271: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
5272: LD_EXP 57
5276: IFFALSE 5495
5278: GO 5280
5280: DISABLE
5281: LD_INT 0
5283: PPUSH
5284: PPUSH
5285: PPUSH
// begin enable ;
5286: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
5287: LD_ADDR_VAR 0 2
5291: PUSH
5292: LD_INT 22
5294: PUSH
5295: LD_INT 3
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: PUSH
5302: LD_INT 30
5304: PUSH
5305: LD_INT 3
5307: PUSH
5308: EMPTY
5309: LIST
5310: LIST
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PPUSH
5316: CALL_OW 69
5320: ST_TO_ADDR
// can_produce := [ ] ;
5321: LD_ADDR_VAR 0 3
5325: PUSH
5326: EMPTY
5327: ST_TO_ADDR
// if not fac then
5328: LD_VAR 0 2
5332: NOT
5333: IFFALSE 5338
// begin disable ;
5335: DISABLE
// exit ;
5336: GO 5495
// end ; for i in fac do
5338: LD_ADDR_VAR 0 1
5342: PUSH
5343: LD_VAR 0 2
5347: PUSH
5348: FOR_IN
5349: IFFALSE 5387
// if UnitsInside ( i ) then
5351: LD_VAR 0 1
5355: PPUSH
5356: CALL_OW 313
5360: IFFALSE 5385
// can_produce := Insert ( can_produce , 1 , i ) ;
5362: LD_ADDR_VAR 0 3
5366: PUSH
5367: LD_VAR 0 3
5371: PPUSH
5372: LD_INT 1
5374: PPUSH
5375: LD_VAR 0 1
5379: PPUSH
5380: CALL_OW 2
5384: ST_TO_ADDR
5385: GO 5348
5387: POP
5388: POP
// if not can_produce then
5389: LD_VAR 0 3
5393: NOT
5394: IFFALSE 5398
// exit ;
5396: GO 5495
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
5398: LD_VAR 0 3
5402: PUSH
5403: LD_INT 1
5405: PPUSH
5406: LD_VAR 0 3
5410: PPUSH
5411: CALL_OW 12
5415: ARRAY
5416: PPUSH
5417: LD_EXP 57
5421: PUSH
5422: LD_INT 1
5424: ARRAY
5425: PPUSH
5426: LD_EXP 57
5430: PUSH
5431: LD_INT 2
5433: ARRAY
5434: PPUSH
5435: LD_EXP 57
5439: PUSH
5440: LD_INT 3
5442: ARRAY
5443: PPUSH
5444: LD_EXP 57
5448: PUSH
5449: LD_INT 4
5451: ARRAY
5452: PPUSH
5453: CALL_OW 125
// for i = 1 to 4 do
5457: LD_ADDR_VAR 0 1
5461: PUSH
5462: DOUBLE
5463: LD_INT 1
5465: DEC
5466: ST_TO_ADDR
5467: LD_INT 4
5469: PUSH
5470: FOR_TO
5471: IFFALSE 5493
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
5473: LD_ADDR_EXP 57
5477: PUSH
5478: LD_EXP 57
5482: PPUSH
5483: LD_INT 1
5485: PPUSH
5486: CALL_OW 3
5490: ST_TO_ADDR
5491: GO 5470
5493: POP
5494: POP
// end ;
5495: PPOPN 3
5497: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
5498: LD_INT 0
5500: PPUSH
5501: PPUSH
5502: PPUSH
// for i = 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
5503: LD_ADDR_VAR 0 2
5507: PUSH
5508: DOUBLE
5509: LD_INT 1
5511: DEC
5512: ST_TO_ADDR
5513: LD_INT 2
5515: PUSH
5516: LD_INT 3
5518: PUSH
5519: LD_INT 3
5521: PUSH
5522: LD_INT 3
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: PUSH
5531: LD_OWVAR 67
5535: ARRAY
5536: PUSH
5537: FOR_TO
5538: IFFALSE 5687
// begin PrepareHuman ( false , 3 , 3 ) ;
5540: LD_INT 0
5542: PPUSH
5543: LD_INT 3
5545: PPUSH
5546: LD_INT 3
5548: PPUSH
5549: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
5553: LD_ADDR_VAR 0 3
5557: PUSH
5558: LD_INT 3
5560: PPUSH
5561: LD_INT 3
5563: PPUSH
5564: LD_INT 22
5566: PPUSH
5567: LD_INT 1
5569: PPUSH
5570: LD_INT 1
5572: PPUSH
5573: LD_INT 43
5575: PUSH
5576: LD_INT 42
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: PUSH
5583: LD_INT 1
5585: PPUSH
5586: LD_INT 2
5588: PPUSH
5589: CALL_OW 12
5593: ARRAY
5594: PPUSH
5595: LD_INT 70
5597: PPUSH
5598: CALL 505 0 7
5602: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5603: LD_VAR 0 3
5607: PPUSH
5608: LD_INT 4
5610: PPUSH
5611: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5615: LD_VAR 0 3
5619: PPUSH
5620: LD_INT 229
5622: PPUSH
5623: LD_INT 44
5625: PPUSH
5626: LD_INT 0
5628: PPUSH
5629: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5633: CALL_OW 44
5637: PPUSH
5638: LD_VAR 0 3
5642: PPUSH
5643: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5647: LD_ADDR_EXP 56
5651: PUSH
5652: LD_EXP 56
5656: PUSH
5657: LD_VAR 0 3
5661: ADD
5662: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5663: LD_VAR 0 3
5667: PPUSH
5668: LD_INT 191
5670: PPUSH
5671: LD_INT 32
5673: PPUSH
5674: CALL_OW 111
// Wait ( 0 0$02 ) ;
5678: LD_INT 70
5680: PPUSH
5681: CALL_OW 67
// end ;
5685: GO 5537
5687: POP
5688: POP
// end ;
5689: LD_VAR 0 1
5693: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5694: LD_EXP 31
5698: IFFALSE 5706
5700: PUSH
5701: LD_EXP 56
5705: AND
5706: IFFALSE 5880
5708: GO 5710
5710: DISABLE
5711: LD_INT 0
5713: PPUSH
5714: PPUSH
5715: PPUSH
// begin wait ( 0 0$50 ) ;
5716: LD_INT 1750
5718: PPUSH
5719: CALL_OW 67
// tmp := ru_vehicles ;
5723: LD_ADDR_VAR 0 3
5727: PUSH
5728: LD_EXP 56
5732: ST_TO_ADDR
// if not tmp then
5733: LD_VAR 0 3
5737: NOT
5738: IFFALSE 5742
// exit ;
5740: GO 5880
// repeat wait ( 0 0$1 ) ;
5742: LD_INT 35
5744: PPUSH
5745: CALL_OW 67
// for i in tmp do
5749: LD_ADDR_VAR 0 1
5753: PUSH
5754: LD_VAR 0 3
5758: PUSH
5759: FOR_IN
5760: IFFALSE 5871
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5762: LD_ADDR_VAR 0 2
5766: PUSH
5767: LD_INT 22
5769: PUSH
5770: LD_INT 1
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PPUSH
5777: LD_VAR 0 1
5781: PPUSH
5782: CALL_OW 74
5786: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5787: LD_VAR 0 1
5791: PPUSH
5792: LD_VAR 0 2
5796: PPUSH
5797: CALL_OW 296
5801: PUSH
5802: LD_INT 10
5804: GREATER
5805: IFFALSE 5824
// ComAgressiveMove ( i , 69 , 101 ) else
5807: LD_VAR 0 1
5811: PPUSH
5812: LD_INT 69
5814: PPUSH
5815: LD_INT 101
5817: PPUSH
5818: CALL_OW 114
5822: GO 5838
// ComAttackUnit ( i , enemy ) ;
5824: LD_VAR 0 1
5828: PPUSH
5829: LD_VAR 0 2
5833: PPUSH
5834: CALL_OW 115
// if GetLives ( i ) < 250 then
5838: LD_VAR 0 1
5842: PPUSH
5843: CALL_OW 256
5847: PUSH
5848: LD_INT 250
5850: LESS
5851: IFFALSE 5869
// tmp := tmp diff i ;
5853: LD_ADDR_VAR 0 3
5857: PUSH
5858: LD_VAR 0 3
5862: PUSH
5863: LD_VAR 0 1
5867: DIFF
5868: ST_TO_ADDR
// end ;
5869: GO 5759
5871: POP
5872: POP
// until not tmp ;
5873: LD_VAR 0 3
5877: NOT
5878: IFFALSE 5742
// end ; end_of_file
5880: PPOPN 3
5882: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5883: LD_INT 0
5885: PPUSH
5886: PPUSH
5887: PPUSH
5888: PPUSH
5889: PPUSH
5890: PPUSH
5891: PPUSH
// InGameOn ;
5892: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5896: LD_EXP 37
5900: PPUSH
5901: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5905: LD_EXP 37
5909: PPUSH
5910: LD_EXP 44
5914: PPUSH
5915: CALL_OW 119
// if Bierezov then
5919: LD_EXP 45
5923: IFFALSE 5939
// ComTurnUnit ( Bierezov , Cornel ) ;
5925: LD_EXP 45
5929: PPUSH
5930: LD_EXP 44
5934: PPUSH
5935: CALL_OW 119
// for i in jmm_units do
5939: LD_ADDR_VAR 0 2
5943: PUSH
5944: LD_EXP 4
5948: PUSH
5949: FOR_IN
5950: IFFALSE 5968
// ComTurnUnit ( i , Cornel ) ;
5952: LD_VAR 0 2
5956: PPUSH
5957: LD_EXP 44
5961: PPUSH
5962: CALL_OW 119
5966: GO 5949
5968: POP
5969: POP
// units := cornel_units union Cornel ;
5970: LD_ADDR_VAR 0 3
5974: PUSH
5975: LD_EXP 6
5979: PUSH
5980: LD_EXP 44
5984: UNION
5985: ST_TO_ADDR
// repeat wait ( 1 ) ;
5986: LD_INT 1
5988: PPUSH
5989: CALL_OW 67
// for i in units do
5993: LD_ADDR_VAR 0 2
5997: PUSH
5998: LD_VAR 0 3
6002: PUSH
6003: FOR_IN
6004: IFFALSE 6037
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_EXP 37
6015: PPUSH
6016: CALL_OW 250
6020: PPUSH
6021: LD_EXP 37
6025: PPUSH
6026: CALL_OW 251
6030: PPUSH
6031: CALL_OW 111
6035: GO 6003
6037: POP
6038: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
6039: LD_VAR 0 3
6043: PPUSH
6044: LD_INT 92
6046: PUSH
6047: LD_EXP 37
6051: PPUSH
6052: CALL_OW 250
6056: PUSH
6057: LD_EXP 37
6061: PPUSH
6062: CALL_OW 251
6066: PUSH
6067: LD_INT 10
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: PPUSH
6076: CALL_OW 72
6080: PUSH
6081: LD_VAR 0 3
6085: EQUAL
6086: IFFALSE 5986
// for i in units do
6088: LD_ADDR_VAR 0 2
6092: PUSH
6093: LD_VAR 0 3
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6117
// ComTurnUnit ( i , JMM ) ;
6101: LD_VAR 0 2
6105: PPUSH
6106: LD_EXP 37
6110: PPUSH
6111: CALL_OW 119
6115: GO 6098
6117: POP
6118: POP
// ComTurnUnit ( Cornel , JMM ) ;
6119: LD_EXP 44
6123: PPUSH
6124: LD_EXP 37
6128: PPUSH
6129: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
6133: LD_EXP 37
6137: PPUSH
6138: LD_STRING D1-JMM-1
6140: PPUSH
6141: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
6145: LD_EXP 44
6149: PPUSH
6150: LD_STRING D1-Corn-1
6152: PPUSH
6153: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
6157: LD_EXP 37
6161: PPUSH
6162: LD_EXP 44
6166: PPUSH
6167: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
6171: LD_EXP 44
6175: PPUSH
6176: LD_EXP 37
6180: PPUSH
6181: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
6185: LD_INT 35
6187: PPUSH
6188: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
6192: LD_EXP 37
6196: PPUSH
6197: LD_EXP 44
6201: PPUSH
6202: CALL_OW 296
6206: PUSH
6207: LD_INT 6
6209: LESS
6210: IFFALSE 6185
// ChangeSideFog ( 4 , 1 ) ;
6212: LD_INT 4
6214: PPUSH
6215: LD_INT 1
6217: PPUSH
6218: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
6222: LD_EXP 37
6226: PPUSH
6227: LD_EXP 44
6231: PPUSH
6232: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6236: LD_EXP 44
6240: PPUSH
6241: LD_EXP 37
6245: PPUSH
6246: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
6250: LD_EXP 37
6254: PPUSH
6255: LD_STRING D1-JMM-2
6257: PPUSH
6258: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
6262: LD_EXP 37
6266: PPUSH
6267: LD_STRING D1-JMM-2a
6269: PPUSH
6270: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
6274: LD_EXP 44
6278: PPUSH
6279: LD_STRING D1-Corn-2
6281: PPUSH
6282: CALL_OW 88
// if bierezov_exist or debug then
6286: LD_EXP 7
6290: IFTRUE 6298
6292: PUSH
6293: LD_EXP 1
6297: OR
6298: IFFALSE 6539
// begin ComTurnUnit ( Cornel , Bierezov ) ;
6300: LD_EXP 44
6304: PPUSH
6305: LD_EXP 45
6309: PPUSH
6310: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
6314: LD_INT 10
6316: PPUSH
6317: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
6321: LD_EXP 44
6325: PPUSH
6326: LD_STRING D1a-Corn-1
6328: PPUSH
6329: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
6333: LD_EXP 37
6337: PPUSH
6338: LD_EXP 45
6342: PPUSH
6343: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
6347: LD_EXP 45
6351: PPUSH
6352: LD_EXP 37
6356: PPUSH
6357: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
6361: LD_EXP 37
6365: PPUSH
6366: LD_STRING D1a-JMM-1
6368: PPUSH
6369: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
6373: LD_EXP 37
6377: PPUSH
6378: LD_EXP 44
6382: PPUSH
6383: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6387: LD_EXP 44
6391: PPUSH
6392: LD_EXP 37
6396: PPUSH
6397: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
6401: LD_EXP 44
6405: PPUSH
6406: LD_STRING D1a-Corn-2
6408: PPUSH
6409: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
6413: LD_EXP 37
6417: PPUSH
6418: LD_STRING D1a-JMM-2
6420: PPUSH
6421: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
6425: LD_EXP 44
6429: PPUSH
6430: LD_STRING D1a-Corn-3
6432: PPUSH
6433: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
6437: LD_EXP 37
6441: PPUSH
6442: LD_STRING D1a-JMM-3
6444: PPUSH
6445: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
6449: LD_EXP 44
6453: PPUSH
6454: LD_STRING D1a-Corn-4
6456: PPUSH
6457: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
6461: LD_EXP 37
6465: PPUSH
6466: LD_STRING D1a-JMM-4
6468: PPUSH
6469: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
6473: LD_EXP 44
6477: PPUSH
6478: LD_STRING D1a-Corn-5
6480: PPUSH
6481: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
6485: LD_EXP 45
6489: PPUSH
6490: LD_EXP 44
6494: PPUSH
6495: CALL_OW 250
6499: PPUSH
6500: LD_EXP 44
6504: PPUSH
6505: CALL_OW 251
6509: PUSH
6510: LD_INT 2
6512: MINUS
6513: PPUSH
6514: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
6518: LD_EXP 45
6522: PPUSH
6523: LD_EXP 44
6527: PPUSH
6528: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
6532: LD_INT 10
6534: PPUSH
6535: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
6539: LD_EXP 37
6543: PPUSH
6544: LD_STRING D1b-JMM-1
6546: PPUSH
6547: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
6551: LD_EXP 44
6555: PPUSH
6556: LD_STRING D1b-Corn-1
6558: PPUSH
6559: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6563: LD_EXP 37
6567: PPUSH
6568: LD_STRING D1b-JMM-2
6570: PPUSH
6571: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6575: LD_EXP 44
6579: PPUSH
6580: LD_STRING D1b-Corn-2
6582: PPUSH
6583: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6587: LD_EXP 37
6591: PPUSH
6592: LD_STRING D1b-JMM-3
6594: PPUSH
6595: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6599: LD_INT 10
6601: PPUSH
6602: CALL_OW 67
// SayRadioNoFace ( Powell , D1b-Pow-3 ) ;
6606: LD_EXP 46
6610: PPUSH
6611: LD_STRING D1b-Pow-3
6613: PPUSH
6614: CALL_OW 586
// Say ( JMM , D1b-JMM-4 ) ;
6618: LD_EXP 37
6622: PPUSH
6623: LD_STRING D1b-JMM-4
6625: PPUSH
6626: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6630: LD_EXP 44
6634: PPUSH
6635: LD_STRING D1b-Corn-4
6637: PPUSH
6638: CALL_OW 88
// if Khatam then
6642: LD_EXP 41
6646: IFFALSE 6662
// Say ( Khatam , D1b-Khat-4 ) else
6648: LD_EXP 41
6652: PPUSH
6653: LD_STRING D1b-Khat-4
6655: PPUSH
6656: CALL_OW 88
6660: GO 6698
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6662: LD_EXP 6
6666: PPUSH
6667: LD_INT 26
6669: PUSH
6670: LD_INT 1
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 72
6681: PUSH
6682: LD_EXP 44
6686: PUSH
6687: EMPTY
6688: LIST
6689: DIFF
6690: PPUSH
6691: LD_STRING D1b-Sol1-4
6693: PPUSH
6694: CALL 593 0 2
// if Cyrus then
6698: LD_EXP 39
6702: IFFALSE 6716
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6704: LD_EXP 39
6708: PPUSH
6709: LD_STRING D1b-Cyrus-4
6711: PPUSH
6712: CALL_OW 88
// if Lisa then
6716: LD_EXP 40
6720: IFFALSE 6778
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6722: LD_EXP 40
6726: PPUSH
6727: LD_STRING D1b-Lisa-4
6729: PPUSH
6730: CALL_OW 88
// if Cyrus then
6734: LD_EXP 39
6738: IFFALSE 6778
// begin if not IsInUnit ( Cyrus ) then
6740: LD_EXP 39
6744: PPUSH
6745: CALL_OW 310
6749: NOT
6750: IFFALSE 6766
// ComTurnUnit ( Cyrus , Lisa ) ;
6752: LD_EXP 39
6756: PPUSH
6757: LD_EXP 40
6761: PPUSH
6762: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6766: LD_EXP 39
6770: PPUSH
6771: LD_STRING D1b-Cyrus-5
6773: PPUSH
6774: CALL_OW 88
// end ; end ; SelectGroup ;
6778: CALL 3066 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6782: LD_EXP 37
6786: PPUSH
6787: LD_STRING D1d-JMM-1
6789: PPUSH
6790: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6794: LD_EXP 44
6798: PPUSH
6799: LD_STRING D1d-Corn-1
6801: PPUSH
6802: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6806: LD_ADDR_VAR 0 2
6810: PUSH
6811: LD_EXP 4
6815: PUSH
6816: LD_EXP 6
6820: ADD
6821: PUSH
6822: LD_EXP 37
6826: ADD
6827: PUSH
6828: FOR_IN
6829: IFFALSE 6842
// ComHold ( i ) ;
6831: LD_VAR 0 2
6835: PPUSH
6836: CALL_OW 140
6840: GO 6828
6842: POP
6843: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6844: LD_ADDR_VAR 0 4
6848: PUSH
6849: LD_INT 22
6851: PUSH
6852: LD_INT 1
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 21
6861: PUSH
6862: LD_INT 2
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PPUSH
6873: CALL_OW 69
6877: ST_TO_ADDR
// if vehicles then
6878: LD_VAR 0 4
6882: IFFALSE 7222
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6884: LD_EXP 6
6888: PPUSH
6889: LD_INT 55
6891: PUSH
6892: EMPTY
6893: LIST
6894: PPUSH
6895: CALL_OW 72
6899: IFFALSE 6938
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6901: LD_ADDR_VAR 0 2
6905: PUSH
6906: LD_EXP 6
6910: PPUSH
6911: LD_INT 55
6913: PUSH
6914: EMPTY
6915: LIST
6916: PPUSH
6917: CALL_OW 72
6921: PUSH
6922: FOR_IN
6923: IFFALSE 6936
// ComExitVehicle ( i ) ;
6925: LD_VAR 0 2
6929: PPUSH
6930: CALL_OW 121
6934: GO 6922
6936: POP
6937: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6938: LD_ADDR_VAR 0 5
6942: PUSH
6943: LD_VAR 0 4
6947: PPUSH
6948: LD_INT 34
6950: PUSH
6951: LD_INT 51
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PPUSH
6958: CALL_OW 72
6962: ST_TO_ADDR
// if cargos then
6963: LD_VAR 0 5
6967: IFFALSE 7152
// begin vehicles := cargos ;
6969: LD_ADDR_VAR 0 4
6973: PUSH
6974: LD_VAR 0 5
6978: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6979: LD_ADDR_VAR 0 6
6983: PUSH
6984: LD_STRING 02_resources_4
6986: PPUSH
6987: LD_INT 0
6989: PPUSH
6990: CALL_OW 30
6994: ST_TO_ADDR
// if debug and not resources then
6995: LD_EXP 1
6999: IFFALSE 7008
7001: PUSH
7002: LD_VAR 0 6
7006: NOT
7007: AND
7008: IFFALSE 7018
// resources := 160 ;
7010: LD_ADDR_VAR 0 6
7014: PUSH
7015: LD_INT 160
7017: ST_TO_ADDR
// if resources mod 10 then
7018: LD_VAR 0 6
7022: PUSH
7023: LD_INT 10
7025: MOD
7026: IFFALSE 7048
// resources := resources - resources mod 10 ;
7028: LD_ADDR_VAR 0 6
7032: PUSH
7033: LD_VAR 0 6
7037: PUSH
7038: LD_VAR 0 6
7042: PUSH
7043: LD_INT 10
7045: MOD
7046: MINUS
7047: ST_TO_ADDR
// if resources then
7048: LD_VAR 0 6
7052: IFFALSE 7152
// for i in cargos do
7054: LD_ADDR_VAR 0 2
7058: PUSH
7059: LD_VAR 0 5
7063: PUSH
7064: FOR_IN
7065: IFFALSE 7150
// begin if resources < 100 then
7067: LD_VAR 0 6
7071: PUSH
7072: LD_INT 100
7074: LESS
7075: IFFALSE 7097
// begin cargo := resources ;
7077: LD_ADDR_VAR 0 7
7081: PUSH
7082: LD_VAR 0 6
7086: ST_TO_ADDR
// resources := 0 ;
7087: LD_ADDR_VAR 0 6
7091: PUSH
7092: LD_INT 0
7094: ST_TO_ADDR
// end else
7095: GO 7119
// begin cargo := 100 ;
7097: LD_ADDR_VAR 0 7
7101: PUSH
7102: LD_INT 100
7104: ST_TO_ADDR
// resources := resources - 100 ;
7105: LD_ADDR_VAR 0 6
7109: PUSH
7110: LD_VAR 0 6
7114: PUSH
7115: LD_INT 100
7117: MINUS
7118: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
7119: LD_VAR 0 2
7123: PPUSH
7124: LD_INT 1
7126: PPUSH
7127: LD_VAR 0 7
7131: PPUSH
7132: CALL_OW 290
// if resources = 0 then
7136: LD_VAR 0 6
7140: PUSH
7141: LD_INT 0
7143: EQUAL
7144: IFFALSE 7148
// break ;
7146: GO 7150
// end ;
7148: GO 7064
7150: POP
7151: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
7152: LD_VAR 0 4
7156: PUSH
7157: LD_INT 1
7159: ARRAY
7160: PPUSH
7161: CALL_OW 311
7165: PPUSH
7166: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
7170: LD_VAR 0 4
7174: PUSH
7175: LD_INT 1
7177: ARRAY
7178: PPUSH
7179: LD_INT 4
7181: PPUSH
7182: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
7186: LD_EXP 44
7190: PPUSH
7191: LD_VAR 0 4
7195: PUSH
7196: LD_INT 1
7198: ARRAY
7199: PPUSH
7200: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
7204: LD_INT 35
7206: PPUSH
7207: CALL_OW 67
// until IsInUnit ( Cornel ) ;
7211: LD_EXP 44
7215: PPUSH
7216: CALL_OW 310
7220: IFFALSE 7204
// end ; InGameOff ;
7222: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
7226: LD_STRING M1
7228: PPUSH
7229: CALL_OW 337
// SaveForQuickRestart ;
7233: CALL_OW 22
// cornel_active := true ;
7237: LD_ADDR_EXP 8
7241: PUSH
7242: LD_INT 1
7244: ST_TO_ADDR
// end ;
7245: LD_VAR 0 1
7249: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
7250: LD_EXP 37
7254: PPUSH
7255: LD_EXP 47
7259: PPUSH
7260: CALL_OW 296
7264: PUSH
7265: LD_INT 10
7267: LESS
7268: IFFALSE 8657
7270: GO 7272
7272: DISABLE
7273: LD_INT 0
7275: PPUSH
7276: PPUSH
7277: PPUSH
7278: PPUSH
7279: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
7280: LD_ADDR_VAR 0 2
7284: PUSH
7285: LD_INT 89
7287: PUSH
7288: LD_INT 34
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: LD_INT 138
7297: PUSH
7298: LD_INT 63
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: PUSH
7305: LD_INT 196
7307: PUSH
7308: LD_INT 84
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: PUSH
7315: LD_INT 135
7317: PUSH
7318: LD_INT 52
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PUSH
7325: LD_INT 103
7327: PUSH
7328: LD_INT 39
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PUSH
7335: LD_INT 58
7337: PUSH
7338: LD_INT 30
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: LD_INT 38
7347: PUSH
7348: LD_INT 51
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: ST_TO_ADDR
// Video ( true ) ;
7364: LD_INT 1
7366: PPUSH
7367: CALL 80368 0 1
// if jmm_units then
7371: LD_EXP 4
7375: IFFALSE 7453
// for i in jmm_units do
7377: LD_ADDR_VAR 0 1
7381: PUSH
7382: LD_EXP 4
7386: PUSH
7387: FOR_IN
7388: IFFALSE 7451
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
7390: LD_VAR 0 1
7394: PPUSH
7395: LD_EXP 37
7399: PPUSH
7400: CALL_OW 296
7404: PUSH
7405: LD_INT 10
7407: LESS
7408: IFFALSE 7422
7410: PUSH
7411: LD_VAR 0 1
7415: PPUSH
7416: CALL_OW 310
7420: NOT
7421: AND
7422: IFFALSE 7440
// ComTurnUnit ( i , JMM ) else
7424: LD_VAR 0 1
7428: PPUSH
7429: LD_EXP 37
7433: PPUSH
7434: CALL_OW 119
7438: GO 7449
// ComHold ( i ) ;
7440: LD_VAR 0 1
7444: PPUSH
7445: CALL_OW 140
// end ;
7449: GO 7387
7451: POP
7452: POP
// if IsInUnit ( JMM ) then
7453: LD_EXP 37
7457: PPUSH
7458: CALL_OW 310
7462: IFFALSE 7487
// begin ComExitVehicle ( JMM ) ;
7464: LD_EXP 37
7468: PPUSH
7469: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
7473: LD_EXP 37
7477: PPUSH
7478: LD_EXP 47
7482: PPUSH
7483: CALL_OW 172
// end ; Wait ( 10 ) ;
7487: LD_INT 10
7489: PPUSH
7490: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
7494: LD_EXP 37
7498: PPUSH
7499: LD_EXP 47
7503: PPUSH
7504: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
7508: LD_INT 35
7510: PPUSH
7511: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
7515: LD_EXP 37
7519: PPUSH
7520: LD_EXP 47
7524: PPUSH
7525: CALL_OW 296
7529: PUSH
7530: LD_INT 6
7532: LESS
7533: IFFALSE 7508
// ComTurnUnit ( JMM , Lynch ) ;
7535: LD_EXP 37
7539: PPUSH
7540: LD_EXP 47
7544: PPUSH
7545: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
7549: LD_ADDR_VAR 0 1
7553: PUSH
7554: LD_EXP 47
7558: PUSH
7559: LD_EXP 48
7563: PUSH
7564: LD_EXP 49
7568: PUSH
7569: LD_EXP 50
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: PUSH
7580: FOR_IN
7581: IFFALSE 7599
// ComTurnUnit ( i , JMM ) ;
7583: LD_VAR 0 1
7587: PPUSH
7588: LD_EXP 37
7592: PPUSH
7593: CALL_OW 119
7597: GO 7580
7599: POP
7600: POP
// Wait ( 0 0$0.3 ) ;
7601: LD_INT 10
7603: PPUSH
7604: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7608: LD_EXP 37
7612: PPUSH
7613: LD_STRING D2-JMM-1
7615: PPUSH
7616: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7620: LD_EXP 47
7624: PPUSH
7625: LD_STRING D2-Sol1-1
7627: PPUSH
7628: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7632: LD_EXP 37
7636: PPUSH
7637: LD_STRING D2-JMM-2
7639: PPUSH
7640: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7644: LD_EXP 47
7648: PPUSH
7649: LD_STRING D2-Sol1-2
7651: PPUSH
7652: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7656: LD_EXP 37
7660: PPUSH
7661: LD_STRING D2-JMM-3
7663: PPUSH
7664: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7668: LD_EXP 47
7672: PPUSH
7673: LD_STRING D2-Sol1-3
7675: PPUSH
7676: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7680: LD_ADDR_VAR 0 1
7684: PUSH
7685: LD_INT 22
7687: PUSH
7688: LD_INT 8
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PPUSH
7695: CALL_OW 69
7699: PUSH
7700: FOR_IN
7701: IFFALSE 7717
// SetSide ( i , 1 ) ;
7703: LD_VAR 0 1
7707: PPUSH
7708: LD_INT 1
7710: PPUSH
7711: CALL_OW 235
7715: GO 7700
7717: POP
7718: POP
// Say ( JMM , D2-JMM-4 ) ;
7719: LD_EXP 37
7723: PPUSH
7724: LD_STRING D2-JMM-4
7726: PPUSH
7727: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7731: LD_INT 1
7733: PPUSH
7734: LD_INT 5
7736: PPUSH
7737: CALL_OW 332
// for i = 1 to points do
7741: LD_ADDR_VAR 0 1
7745: PUSH
7746: DOUBLE
7747: LD_INT 1
7749: DEC
7750: ST_TO_ADDR
7751: LD_VAR 0 2
7755: PUSH
7756: FOR_TO
7757: IFFALSE 7932
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7759: LD_VAR 0 2
7763: PUSH
7764: LD_VAR 0 1
7768: ARRAY
7769: PUSH
7770: LD_INT 1
7772: ARRAY
7773: PPUSH
7774: LD_VAR 0 2
7778: PUSH
7779: LD_VAR 0 1
7783: ARRAY
7784: PUSH
7785: LD_INT 2
7787: ARRAY
7788: PPUSH
7789: CALL_OW 84
// if i = 1 then
7793: LD_VAR 0 1
7797: PUSH
7798: LD_INT 1
7800: EQUAL
7801: IFFALSE 7815
// Say ( Lynch , D2-Sol1-4 ) ;
7803: LD_EXP 47
7807: PPUSH
7808: LD_STRING D2-Sol1-4
7810: PPUSH
7811: CALL_OW 88
// if i = 2 then
7815: LD_VAR 0 1
7819: PUSH
7820: LD_INT 2
7822: EQUAL
7823: IFFALSE 7837
// Say ( JMM , D2-JMM-5 ) ;
7825: LD_EXP 37
7829: PPUSH
7830: LD_STRING D2-JMM-5
7832: PPUSH
7833: CALL_OW 88
// if i = 4 then
7837: LD_VAR 0 1
7841: PUSH
7842: LD_INT 4
7844: EQUAL
7845: IFFALSE 7869
// begin RevealFogArea ( 1 , troopsArea ) ;
7847: LD_INT 1
7849: PPUSH
7850: LD_INT 6
7852: PPUSH
7853: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7857: LD_EXP 47
7861: PPUSH
7862: LD_STRING D2-Sol1-5
7864: PPUSH
7865: CALL_OW 88
// end ; if i = 5 then
7869: LD_VAR 0 1
7873: PUSH
7874: LD_INT 5
7876: EQUAL
7877: IFFALSE 7891
// Say ( JMM , D2-JMM-6 ) ;
7879: LD_EXP 37
7883: PPUSH
7884: LD_STRING D2-JMM-6
7886: PPUSH
7887: CALL_OW 88
// if i = 7 then
7891: LD_VAR 0 1
7895: PUSH
7896: LD_INT 7
7898: EQUAL
7899: IFFALSE 7923
// begin RevealFogArea ( 1 , forestArea ) ;
7901: LD_INT 1
7903: PPUSH
7904: LD_INT 7
7906: PPUSH
7907: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7911: LD_EXP 47
7915: PPUSH
7916: LD_STRING D2-Sol1-6
7918: PPUSH
7919: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7923: LD_INT 46
7925: PPUSH
7926: CALL_OW 67
// end ;
7930: GO 7756
7932: POP
7933: POP
// CenterNowOnUnits ( JMM ) ;
7934: LD_EXP 37
7938: PPUSH
7939: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7943: LD_EXP 37
7947: PPUSH
7948: LD_STRING D2-JMM-7
7950: PPUSH
7951: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7955: LD_EXP 47
7959: PPUSH
7960: LD_STRING D2-Sol1-7
7962: PPUSH
7963: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7967: LD_EXP 37
7971: PPUSH
7972: LD_STRING D2-JMM-8
7974: PPUSH
7975: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7979: LD_ADDR_VAR 0 4
7983: PUSH
7984: LD_INT 22
7986: PUSH
7987: LD_INT 1
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PUSH
7994: LD_INT 30
7996: PUSH
7997: LD_INT 31
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PPUSH
8008: CALL_OW 69
8012: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
8013: LD_EXP 47
8017: PPUSH
8018: LD_VAR 0 4
8022: PUSH
8023: LD_INT 1
8025: ARRAY
8026: PPUSH
8027: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
8031: LD_INT 65
8033: PPUSH
8034: LD_INT 101
8036: PPUSH
8037: CALL_OW 428
8041: IFFALSE 8064
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
8043: LD_INT 65
8045: PPUSH
8046: LD_INT 101
8048: PPUSH
8049: CALL_OW 428
8053: PPUSH
8054: LD_INT 75
8056: PPUSH
8057: LD_INT 100
8059: PPUSH
8060: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
8064: LD_INT 66
8066: PPUSH
8067: LD_INT 103
8069: PPUSH
8070: CALL_OW 428
8074: IFFALSE 8097
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
8076: LD_INT 66
8078: PPUSH
8079: LD_INT 103
8081: PPUSH
8082: CALL_OW 428
8086: PPUSH
8087: LD_INT 75
8089: PPUSH
8090: LD_INT 100
8092: PPUSH
8093: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
8097: LD_ADDR_VAR 0 5
8101: PUSH
8102: LD_INT 22
8104: PUSH
8105: LD_INT 1
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: LD_INT 21
8114: PUSH
8115: LD_INT 2
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PUSH
8122: LD_INT 91
8124: PUSH
8125: LD_EXP 37
8129: PUSH
8130: LD_INT 7
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: LIST
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: LIST
8142: PPUSH
8143: CALL_OW 69
8147: ST_TO_ADDR
// if tmp then
8148: LD_VAR 0 5
8152: IFFALSE 8169
// ComMoveXY ( tmp , 75 , 100 ) ;
8154: LD_VAR 0 5
8158: PPUSH
8159: LD_INT 75
8161: PPUSH
8162: LD_INT 100
8164: PPUSH
8165: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
8169: LD_ADDR_VAR 0 3
8173: PUSH
8174: LD_EXP 4
8178: PPUSH
8179: LD_INT 25
8181: PUSH
8182: LD_INT 1
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PPUSH
8189: CALL_OW 72
8193: PPUSH
8194: LD_EXP 37
8198: PPUSH
8199: CALL_OW 74
8203: ST_TO_ADDR
// if sol then
8204: LD_VAR 0 3
8208: IFFALSE 8268
// if GetDistUnits ( JMM , sol ) < 10 then
8210: LD_EXP 37
8214: PPUSH
8215: LD_VAR 0 3
8219: PPUSH
8220: CALL_OW 296
8224: PUSH
8225: LD_INT 10
8227: LESS
8228: IFFALSE 8268
// begin if IsInUnit ( sol ) then
8230: LD_VAR 0 3
8234: PPUSH
8235: CALL_OW 310
8239: IFFALSE 8250
// ComExitVehicle ( sol ) ;
8241: LD_VAR 0 3
8245: PPUSH
8246: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
8250: LD_VAR 0 3
8254: PPUSH
8255: LD_VAR 0 4
8259: PUSH
8260: LD_INT 2
8262: ARRAY
8263: PPUSH
8264: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
8268: LD_INT 10
8270: PPUSH
8271: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
8275: LD_EXP 37
8279: PPUSH
8280: LD_INT 65
8282: PPUSH
8283: LD_INT 101
8285: PPUSH
8286: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
8290: LD_EXP 37
8294: PPUSH
8295: LD_INT 63
8297: PPUSH
8298: LD_INT 100
8300: PPUSH
8301: CALL_OW 178
// tmp := 0 0$0 ;
8305: LD_ADDR_VAR 0 5
8309: PUSH
8310: LD_INT 0
8312: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8313: LD_INT 35
8315: PPUSH
8316: CALL_OW 67
// tmp := tmp + 0 0$1 ;
8320: LD_ADDR_VAR 0 5
8324: PUSH
8325: LD_VAR 0 5
8329: PUSH
8330: LD_INT 35
8332: PLUS
8333: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
8334: LD_EXP 37
8338: PPUSH
8339: LD_INT 65
8341: PPUSH
8342: LD_INT 101
8344: PPUSH
8345: CALL_OW 307
8349: IFTRUE 8361
8351: PUSH
8352: LD_VAR 0 5
8356: PUSH
8357: LD_INT 175
8359: GREATER
8360: OR
8361: IFFALSE 8313
// Say ( JMM , D2a-JMM-1 ) ;
8363: LD_EXP 37
8367: PPUSH
8368: LD_STRING D2a-JMM-1
8370: PPUSH
8371: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
8375: LD_EXP 48
8379: PPUSH
8380: LD_INT 66
8382: PPUSH
8383: LD_INT 103
8385: PPUSH
8386: CALL_OW 111
// tmp := 0 0$0 ;
8390: LD_ADDR_VAR 0 5
8394: PUSH
8395: LD_INT 0
8397: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8398: LD_INT 35
8400: PPUSH
8401: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
8405: LD_EXP 48
8409: PPUSH
8410: LD_INT 66
8412: PPUSH
8413: LD_INT 103
8415: PPUSH
8416: CALL_OW 307
8420: IFTRUE 8432
8422: PUSH
8423: LD_VAR 0 5
8427: PUSH
8428: LD_INT 175
8430: GREATER
8431: OR
8432: IFFALSE 8398
// ComTurnUnit ( Walker , JMM ) ;
8434: LD_EXP 48
8438: PPUSH
8439: LD_EXP 37
8443: PPUSH
8444: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
8448: LD_EXP 48
8452: PPUSH
8453: LD_STRING D2a-Sci1-1
8455: PPUSH
8456: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
8460: LD_EXP 37
8464: PPUSH
8465: LD_EXP 48
8469: PPUSH
8470: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
8474: LD_EXP 37
8478: PPUSH
8479: LD_STRING D2a-JMM-2
8481: PPUSH
8482: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
8486: LD_EXP 48
8490: PPUSH
8491: LD_STRING D2a-Sci1-2
8493: PPUSH
8494: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
8498: LD_EXP 37
8502: PPUSH
8503: LD_STRING D2a-JMM-3
8505: PPUSH
8506: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
8510: LD_EXP 48
8514: PPUSH
8515: LD_STRING D2a-Sci1-3
8517: PPUSH
8518: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
8522: LD_ADDR_EXP 4
8526: PUSH
8527: LD_EXP 4
8531: PUSH
8532: LD_EXP 47
8536: PUSH
8537: LD_EXP 48
8541: PUSH
8542: LD_EXP 49
8546: PUSH
8547: LD_EXP 50
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: ADD
8558: ST_TO_ADDR
// for i in jmm_units do
8559: LD_ADDR_VAR 0 1
8563: PUSH
8564: LD_EXP 4
8568: PUSH
8569: FOR_IN
8570: IFFALSE 8595
// if not IsInUnit ( i ) then
8572: LD_VAR 0 1
8576: PPUSH
8577: CALL_OW 310
8581: NOT
8582: IFFALSE 8593
// ComFree ( i ) ;
8584: LD_VAR 0 1
8588: PPUSH
8589: CALL_OW 139
8593: GO 8569
8595: POP
8596: POP
// Video ( false ) ;
8597: LD_INT 0
8599: PPUSH
8600: CALL 80368 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8604: LD_STRING MSolar1
8606: PPUSH
8607: CALL_OW 337
// jmm_on_west := true ;
8611: LD_ADDR_EXP 5
8615: PUSH
8616: LD_INT 1
8618: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8619: LD_INT 1050
8621: PPUSH
8622: CALL_OW 67
// frank_can_return := true ;
8626: LD_ADDR_EXP 12
8630: PUSH
8631: LD_INT 1
8633: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8634: LD_INT 6300
8636: PPUSH
8637: LD_INT 8400
8639: PPUSH
8640: CALL_OW 12
8644: PPUSH
8645: CALL_OW 67
// send_spec_patrol := true ;
8649: LD_ADDR_EXP 30
8653: PUSH
8654: LD_INT 1
8656: ST_TO_ADDR
// end ;
8657: PPOPN 5
8659: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8660: LD_INT 22
8662: PUSH
8663: LD_INT 1
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: PUSH
8670: LD_INT 34
8672: PUSH
8673: LD_INT 51
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PUSH
8680: LD_INT 92
8682: PUSH
8683: LD_INT 63
8685: PUSH
8686: LD_INT 100
8688: PUSH
8689: LD_INT 5
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: PPUSH
8706: CALL_OW 69
8710: IFFALSE 8719
8712: PUSH
8713: LD_EXP 5
8717: NOT
8718: AND
8719: IFFALSE 8832
8721: GO 8723
8723: DISABLE
8724: LD_INT 0
8726: PPUSH
8727: PPUSH
// begin enable ;
8728: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8729: LD_ADDR_VAR 0 2
8733: PUSH
8734: LD_INT 22
8736: PUSH
8737: LD_INT 1
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: LD_INT 34
8746: PUSH
8747: LD_INT 51
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: LD_INT 92
8756: PUSH
8757: LD_INT 63
8759: PUSH
8760: LD_INT 100
8762: PUSH
8763: LD_INT 5
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: LIST
8776: PUSH
8777: EMPTY
8778: LIST
8779: PPUSH
8780: CALL_OW 69
8784: ST_TO_ADDR
// if not filter then
8785: LD_VAR 0 2
8789: NOT
8790: IFFALSE 8794
// exit ;
8792: GO 8832
// for i in filter do
8794: LD_ADDR_VAR 0 1
8798: PUSH
8799: LD_VAR 0 2
8803: PUSH
8804: FOR_IN
8805: IFFALSE 8830
// begin SetFuel ( i , 0 ) ;
8807: LD_VAR 0 1
8811: PPUSH
8812: LD_INT 0
8814: PPUSH
8815: CALL_OW 240
// ComStop ( i ) ;
8819: LD_VAR 0 1
8823: PPUSH
8824: CALL_OW 141
// end ;
8828: GO 8804
8830: POP
8831: POP
// end ;
8832: PPOPN 2
8834: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8835: LD_EXP 30
8839: IFFALSE 9940
8841: GO 8843
8843: DISABLE
8844: LD_INT 0
8846: PPUSH
8847: PPUSH
8848: PPUSH
8849: PPUSH
8850: PPUSH
8851: PPUSH
8852: PPUSH
// begin if not ru_spec_patrol then
8853: LD_EXP 54
8857: NOT
8858: IFFALSE 8862
// exit ;
8860: GO 9940
// dead1 := false ;
8862: LD_ADDR_VAR 0 1
8866: PUSH
8867: LD_INT 0
8869: ST_TO_ADDR
// dead2 := false ;
8870: LD_ADDR_VAR 0 2
8874: PUSH
8875: LD_INT 0
8877: ST_TO_ADDR
// inarea1 := false ;
8878: LD_ADDR_VAR 0 3
8882: PUSH
8883: LD_INT 0
8885: ST_TO_ADDR
// inarea2 := false ;
8886: LD_ADDR_VAR 0 4
8890: PUSH
8891: LD_INT 0
8893: ST_TO_ADDR
// tmp := [ ] ;
8894: LD_ADDR_VAR 0 6
8898: PUSH
8899: EMPTY
8900: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8901: LD_EXP 54
8905: PPUSH
8906: LD_INT 75
8908: PPUSH
8909: LD_INT 101
8911: PPUSH
8912: CALL_OW 114
// repeat wait ( 0 0$02 ) ;
8916: LD_INT 70
8918: PPUSH
8919: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8923: LD_INT 1
8925: PPUSH
8926: LD_EXP 54
8930: PUSH
8931: LD_INT 1
8933: ARRAY
8934: PPUSH
8935: CALL_OW 292
8939: IFTRUE 8970
8941: PUSH
8942: LD_EXP 54
8946: PPUSH
8947: LD_INT 92
8949: PUSH
8950: LD_INT 75
8952: PUSH
8953: LD_INT 101
8955: PUSH
8956: LD_INT 4
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: PPUSH
8965: CALL_OW 72
8969: OR
8970: IFFALSE 8916
// ComStop ( ru_spec_patrol ) ;
8972: LD_EXP 54
8976: PPUSH
8977: CALL_OW 141
// wait ( 0 0$3 ) ;
8981: LD_INT 105
8983: PPUSH
8984: CALL_OW 67
// DialogueOn ;
8988: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8992: LD_EXP 54
8996: PUSH
8997: LD_INT 1
8999: ARRAY
9000: PPUSH
9001: LD_STRING D8-Rus1-1
9003: PPUSH
9004: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
9008: LD_EXP 37
9012: PPUSH
9013: LD_STRING D8-JMM-1
9015: PPUSH
9016: CALL_OW 88
// DialogueOff ;
9020: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
9024: LD_EXP 54
9028: PPUSH
9029: LD_INT 13
9031: PPUSH
9032: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
9036: LD_INT 35
9038: PPUSH
9039: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
9043: LD_VAR 0 1
9047: NOT
9048: IFFALSE 9065
9050: PUSH
9051: LD_EXP 54
9055: PUSH
9056: LD_INT 1
9058: ARRAY
9059: PPUSH
9060: CALL_OW 301
9064: AND
9065: IFFALSE 9075
// dead1 := true ;
9067: LD_ADDR_VAR 0 1
9071: PUSH
9072: LD_INT 1
9074: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
9075: LD_VAR 0 2
9079: NOT
9080: IFFALSE 9097
9082: PUSH
9083: LD_EXP 54
9087: PUSH
9088: LD_INT 2
9090: ARRAY
9091: PPUSH
9092: CALL_OW 301
9096: AND
9097: IFFALSE 9107
// dead2 := true ;
9099: LD_ADDR_VAR 0 2
9103: PUSH
9104: LD_INT 1
9106: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
9107: LD_VAR 0 3
9111: NOT
9112: IFFALSE 9132
9114: PUSH
9115: LD_EXP 54
9119: PUSH
9120: LD_INT 1
9122: ARRAY
9123: PPUSH
9124: LD_INT 14
9126: PPUSH
9127: CALL_OW 308
9131: AND
9132: IFFALSE 9142
// inarea1 := true ;
9134: LD_ADDR_VAR 0 3
9138: PUSH
9139: LD_INT 1
9141: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
9142: LD_VAR 0 4
9146: NOT
9147: IFFALSE 9167
9149: PUSH
9150: LD_EXP 54
9154: PUSH
9155: LD_INT 2
9157: ARRAY
9158: PPUSH
9159: LD_INT 14
9161: PPUSH
9162: CALL_OW 308
9166: AND
9167: IFFALSE 9177
// inarea2 := true ;
9169: LD_ADDR_VAR 0 4
9173: PUSH
9174: LD_INT 1
9176: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
9177: LD_VAR 0 1
9181: IFFALSE 9189
9183: PUSH
9184: LD_VAR 0 2
9188: AND
9189: IFTRUE 9205
9191: PUSH
9192: LD_VAR 0 1
9196: IFFALSE 9204
9198: PUSH
9199: LD_VAR 0 4
9203: AND
9204: OR
9205: IFTRUE 9221
9207: PUSH
9208: LD_VAR 0 2
9212: IFFALSE 9220
9214: PUSH
9215: LD_VAR 0 3
9219: AND
9220: OR
9221: IFTRUE 9237
9223: PUSH
9224: LD_VAR 0 3
9228: IFFALSE 9236
9230: PUSH
9231: LD_VAR 0 4
9235: AND
9236: OR
9237: IFFALSE 9036
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
9239: LD_VAR 0 3
9243: IFFALSE 9251
9245: PUSH
9246: LD_VAR 0 4
9250: AND
9251: IFTRUE 9267
9253: PUSH
9254: LD_VAR 0 1
9258: IFFALSE 9266
9260: PUSH
9261: LD_VAR 0 4
9265: AND
9266: OR
9267: IFTRUE 9283
9269: PUSH
9270: LD_VAR 0 2
9274: IFFALSE 9282
9276: PUSH
9277: LD_VAR 0 3
9281: AND
9282: OR
9283: IFFALSE 9920
// begin prepare_siege := true ;
9285: LD_ADDR_EXP 31
9289: PUSH
9290: LD_INT 1
9292: ST_TO_ADDR
// DialogueOn ;
9293: CALL_OW 6
// if ( inarea1 and inarea2 ) then
9297: LD_VAR 0 3
9301: IFFALSE 9309
9303: PUSH
9304: LD_VAR 0 4
9308: AND
9309: IFFALSE 9325
// Say ( JMM , D8b-JMM-1a ) else
9311: LD_EXP 37
9315: PPUSH
9316: LD_STRING D8b-JMM-1a
9318: PPUSH
9319: CALL_OW 88
9323: GO 9337
// Say ( JMM , D8b-JMM-1 ) ;
9325: LD_EXP 37
9329: PPUSH
9330: LD_STRING D8b-JMM-1
9332: PPUSH
9333: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
9337: LD_EXP 4
9341: PPUSH
9342: LD_INT 26
9344: PUSH
9345: LD_INT 1
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PPUSH
9352: CALL_OW 72
9356: PUSH
9357: LD_EXP 38
9361: PUSH
9362: LD_EXP 39
9366: PUSH
9367: LD_EXP 48
9371: PUSH
9372: LD_EXP 51
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: DIFF
9383: PPUSH
9384: LD_STRING D8b-Sol1-1
9386: PPUSH
9387: CALL 593 0 2
// if Cyrus and Cyrus in jmm_units then
9391: LD_EXP 39
9395: IFFALSE 9409
9397: PUSH
9398: LD_EXP 39
9402: PUSH
9403: LD_EXP 4
9407: IN
9408: AND
9409: IFFALSE 9425
// Say ( Cyrus , D8b-Cyrus-1 ) else
9411: LD_EXP 39
9415: PPUSH
9416: LD_STRING D8b-Cyrus-1
9418: PPUSH
9419: CALL_OW 88
9423: GO 9437
// Say ( JMM , D8b-JMM-1a ) ;
9425: LD_EXP 37
9429: PPUSH
9430: LD_STRING D8b-JMM-1a
9432: PPUSH
9433: CALL_OW 88
// if Lisa and Lisa in jmm_units then
9437: LD_EXP 40
9441: IFFALSE 9455
9443: PUSH
9444: LD_EXP 40
9448: PUSH
9449: LD_EXP 4
9453: IN
9454: AND
9455: IFFALSE 9469
// Say ( Lisa , D8b-Lisa-2 ) ;
9457: LD_EXP 40
9461: PPUSH
9462: LD_STRING D8b-Lisa-2
9464: PPUSH
9465: CALL_OW 88
// if Bobby and Bobby in jmm_units then
9469: LD_EXP 38
9473: IFFALSE 9487
9475: PUSH
9476: LD_EXP 38
9480: PUSH
9481: LD_EXP 4
9485: IN
9486: AND
9487: IFFALSE 9503
// Say ( Bobby , D8b-Bobby-1 ) else
9489: LD_EXP 38
9493: PPUSH
9494: LD_STRING D8b-Bobby-1
9496: PPUSH
9497: CALL_OW 88
9501: GO 9563
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
9503: LD_ADDR_VAR 0 5
9507: PUSH
9508: LD_EXP 4
9512: PPUSH
9513: LD_INT 26
9515: PUSH
9516: LD_INT 1
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PPUSH
9523: CALL_OW 72
9527: PUSH
9528: LD_EXP 38
9532: PUSH
9533: LD_EXP 39
9537: PUSH
9538: LD_EXP 48
9542: PUSH
9543: LD_EXP 51
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: DIFF
9554: PPUSH
9555: LD_STRING D8b-Sol2-1
9557: PPUSH
9558: CALL 593 0 2
9562: ST_TO_ADDR
// DialogueOff ;
9563: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
9567: LD_EXP 39
9571: IFFALSE 9585
9573: PUSH
9574: LD_EXP 39
9578: PUSH
9579: LD_EXP 4
9583: IN
9584: AND
9585: IFFALSE 9610
// tmp := Insert ( tmp , 1 , Cyrus ) ;
9587: LD_ADDR_VAR 0 6
9591: PUSH
9592: LD_VAR 0 6
9596: PPUSH
9597: LD_INT 1
9599: PPUSH
9600: LD_EXP 39
9604: PPUSH
9605: CALL_OW 2
9609: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
9610: LD_EXP 38
9614: IFFALSE 9628
9616: PUSH
9617: LD_EXP 38
9621: PUSH
9622: LD_EXP 4
9626: IN
9627: AND
9628: IFFALSE 9653
// tmp := Insert ( tmp , 1 , Bobby ) ;
9630: LD_ADDR_VAR 0 6
9634: PUSH
9635: LD_VAR 0 6
9639: PPUSH
9640: LD_INT 1
9642: PPUSH
9643: LD_EXP 38
9647: PPUSH
9648: CALL_OW 2
9652: ST_TO_ADDR
// if sol then
9653: LD_VAR 0 5
9657: IFFALSE 9682
// tmp := Insert ( tmp , 1 , sol ) ;
9659: LD_ADDR_VAR 0 6
9663: PUSH
9664: LD_VAR 0 6
9668: PPUSH
9669: LD_INT 1
9671: PPUSH
9672: LD_VAR 0 5
9676: PPUSH
9677: CALL_OW 2
9681: ST_TO_ADDR
// if tmp then
9682: LD_VAR 0 6
9686: IFFALSE 9879
// begin SetSide ( tmp , 8 ) ;
9688: LD_VAR 0 6
9692: PPUSH
9693: LD_INT 8
9695: PPUSH
9696: CALL_OW 235
// for i in tmp do
9700: LD_ADDR_VAR 0 7
9704: PUSH
9705: LD_VAR 0 6
9709: PUSH
9710: FOR_IN
9711: IFFALSE 9724
// ComExit ( i ) ;
9713: LD_VAR 0 7
9717: PPUSH
9718: CALL 80794 0 1
9722: GO 9710
9724: POP
9725: POP
// wait ( 0 0$0.3 ) ;
9726: LD_INT 10
9728: PPUSH
9729: CALL_OW 67
// ComFree ( tmp ) ;
9733: LD_VAR 0 6
9737: PPUSH
9738: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9742: LD_VAR 0 6
9746: PPUSH
9747: LD_INT 15
9749: PPUSH
9750: CALL_OW 173
// AddComHold ( tmp ) ;
9754: LD_VAR 0 6
9758: PPUSH
9759: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9763: LD_INT 35
9765: PPUSH
9766: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9770: LD_VAR 0 6
9774: PUSH
9775: LD_INT 1
9777: ARRAY
9778: PPUSH
9779: CALL_OW 314
9783: NOT
9784: IFFALSE 9798
// ComMoveToArea ( tmp , cyrusEscape ) ;
9786: LD_VAR 0 6
9790: PPUSH
9791: LD_INT 15
9793: PPUSH
9794: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9798: LD_VAR 0 6
9802: PUSH
9803: LD_INT 1
9805: ARRAY
9806: PPUSH
9807: LD_INT 15
9809: PPUSH
9810: CALL_OW 308
9814: IFFALSE 9869
// begin RemoveUnit ( tmp [ 1 ] ) ;
9816: LD_VAR 0 6
9820: PUSH
9821: LD_INT 1
9823: ARRAY
9824: PPUSH
9825: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9829: LD_ADDR_EXP 4
9833: PUSH
9834: LD_EXP 4
9838: PUSH
9839: LD_VAR 0 6
9843: PUSH
9844: LD_INT 1
9846: ARRAY
9847: DIFF
9848: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9849: LD_ADDR_VAR 0 6
9853: PUSH
9854: LD_VAR 0 6
9858: PUSH
9859: LD_VAR 0 6
9863: PUSH
9864: LD_INT 1
9866: ARRAY
9867: DIFF
9868: ST_TO_ADDR
// end ; until tmp = 0 ;
9869: LD_VAR 0 6
9873: PUSH
9874: LD_INT 0
9876: EQUAL
9877: IFFALSE 9763
// end ; wait ( 0 0$30 ) ;
9879: LD_INT 1050
9881: PPUSH
9882: CALL_OW 67
// if ru_spec_patrol then
9886: LD_EXP 54
9890: IFFALSE 9918
// for i in ru_spec_patrol do
9892: LD_ADDR_VAR 0 7
9896: PUSH
9897: LD_EXP 54
9901: PUSH
9902: FOR_IN
9903: IFFALSE 9916
// RemoveUnit ( i ) ;
9905: LD_VAR 0 7
9909: PPUSH
9910: CALL_OW 64
9914: GO 9902
9916: POP
9917: POP
// end else
9918: GO 9940
// begin prepare_siege := false ;
9920: LD_ADDR_EXP 31
9924: PUSH
9925: LD_INT 0
9927: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9928: LD_EXP 37
9932: PPUSH
9933: LD_STRING D8a-JMM-1
9935: PPUSH
9936: CALL_OW 88
// end ; end ;
9940: PPOPN 7
9942: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9943: LD_EXP 12
9947: IFFALSE 11243
9949: GO 9951
9951: DISABLE
9952: LD_INT 0
9954: PPUSH
9955: PPUSH
9956: PPUSH
// begin uc_side := 8 ;
9957: LD_ADDR_OWVAR 20
9961: PUSH
9962: LD_INT 8
9964: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9965: LD_ADDR_VAR 0 3
9969: PUSH
9970: LD_INT 59
9972: PUSH
9973: LD_INT 71
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 122
9982: PUSH
9983: LD_INT 117
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9994: LD_ADDR_EXP 51
9998: PUSH
9999: LD_STRING Frank
10001: PPUSH
10002: LD_INT 0
10004: PPUSH
10005: LD_STRING 
10007: PPUSH
10008: CALL 42196 0 3
10012: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
10013: LD_ADDR_VAR 0 1
10017: PUSH
10018: LD_INT 1
10020: PPUSH
10021: LD_INT 2
10023: PPUSH
10024: CALL_OW 12
10028: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
10029: LD_EXP 51
10033: PPUSH
10034: LD_VAR 0 3
10038: PUSH
10039: LD_VAR 0 1
10043: ARRAY
10044: PUSH
10045: LD_INT 1
10047: ARRAY
10048: PPUSH
10049: LD_VAR 0 3
10053: PUSH
10054: LD_VAR 0 1
10058: ARRAY
10059: PUSH
10060: LD_INT 2
10062: ARRAY
10063: PPUSH
10064: LD_INT 0
10066: PPUSH
10067: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
10071: LD_EXP 51
10075: PPUSH
10076: LD_INT 1
10078: PPUSH
10079: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
10083: LD_INT 35
10085: PPUSH
10086: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
10090: LD_EXP 51
10094: PPUSH
10095: LD_EXP 37
10099: PPUSH
10100: CALL_OW 296
10104: PUSH
10105: LD_INT 8
10107: LESS
10108: IFFALSE 10125
10110: PUSH
10111: LD_EXP 51
10115: PPUSH
10116: CALL_OW 256
10120: PUSH
10121: LD_INT 250
10123: GREATER
10124: AND
10125: IFFALSE 10083
// Video ( true ) ;
10127: LD_INT 1
10129: PPUSH
10130: CALL 80368 0 1
// CenterOnUnits ( JMM ) ;
10134: LD_EXP 37
10138: PPUSH
10139: CALL_OW 85
// if IsInUnit ( JMM ) then
10143: LD_EXP 37
10147: PPUSH
10148: CALL_OW 310
10152: IFFALSE 10163
// ComFree ( JMM ) ;
10154: LD_EXP 37
10158: PPUSH
10159: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
10163: LD_EXP 37
10167: PPUSH
10168: LD_EXP 51
10172: PPUSH
10173: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
10177: LD_EXP 51
10181: PPUSH
10182: LD_EXP 37
10186: PPUSH
10187: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
10191: LD_EXP 37
10195: PPUSH
10196: LD_STRING D6-JMM-1
10198: PPUSH
10199: CALL_OW 88
// p := 0 ;
10203: LD_ADDR_VAR 0 2
10207: PUSH
10208: LD_INT 0
10210: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10211: LD_INT 35
10213: PPUSH
10214: CALL_OW 67
// p := p + 1 ;
10218: LD_ADDR_VAR 0 2
10222: PUSH
10223: LD_VAR 0 2
10227: PUSH
10228: LD_INT 1
10230: PLUS
10231: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
10232: LD_EXP 37
10236: PPUSH
10237: LD_EXP 51
10241: PPUSH
10242: CALL_OW 296
10246: PUSH
10247: LD_INT 8
10249: LESS
10250: IFTRUE 10262
10252: PUSH
10253: LD_VAR 0 2
10257: PUSH
10258: LD_INT 7
10260: GREATER
10261: OR
10262: IFFALSE 10211
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
10264: LD_EXP 40
10268: IFFALSE 10290
10270: PUSH
10271: LD_EXP 40
10275: PPUSH
10276: LD_EXP 51
10280: PPUSH
10281: CALL_OW 296
10285: PUSH
10286: LD_INT 20
10288: LESS
10289: AND
10290: IFFALSE 10304
10292: PUSH
10293: LD_EXP 40
10297: PUSH
10298: LD_EXP 4
10302: IN
10303: AND
10304: IFFALSE 10329
// begin ComFree ( Lisa ) ;
10306: LD_EXP 40
10310: PPUSH
10311: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
10315: LD_EXP 40
10319: PPUSH
10320: LD_EXP 51
10324: PPUSH
10325: CALL_OW 172
// end ; if Lynch then
10329: LD_EXP 47
10333: IFFALSE 10358
// begin ComFree ( Lynch ) ;
10335: LD_EXP 47
10339: PPUSH
10340: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
10344: LD_EXP 47
10348: PPUSH
10349: LD_EXP 51
10353: PPUSH
10354: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
10358: LD_EXP 37
10362: PPUSH
10363: LD_EXP 51
10367: PPUSH
10368: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10372: LD_EXP 51
10376: PPUSH
10377: LD_EXP 37
10381: PPUSH
10382: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
10386: LD_EXP 51
10390: PPUSH
10391: LD_STRING D6-Frank-1
10393: PPUSH
10394: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
10398: LD_INT 69
10400: PPUSH
10401: LD_INT 20
10403: PPUSH
10404: LD_INT 1
10406: PPUSH
10407: LD_INT 20
10409: NEG
10410: PPUSH
10411: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
10415: LD_INT 69
10417: PPUSH
10418: LD_INT 20
10420: PPUSH
10421: LD_INT 1
10423: PPUSH
10424: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
10428: LD_INT 190
10430: PPUSH
10431: LD_INT 31
10433: PPUSH
10434: LD_INT 1
10436: PPUSH
10437: LD_INT 20
10439: NEG
10440: PPUSH
10441: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
10445: LD_INT 190
10447: PPUSH
10448: LD_INT 31
10450: PPUSH
10451: LD_INT 1
10453: PPUSH
10454: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
10458: LD_INT 69
10460: PPUSH
10461: LD_INT 20
10463: PPUSH
10464: CALL_OW 84
// Wait ( 0 0$02 ) ;
10468: LD_INT 70
10470: PPUSH
10471: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
10475: LD_EXP 37
10479: PPUSH
10480: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
10484: LD_EXP 40
10488: IFFALSE 10510
10490: PUSH
10491: LD_EXP 40
10495: PPUSH
10496: LD_EXP 51
10500: PPUSH
10501: CALL_OW 296
10505: PUSH
10506: LD_INT 20
10508: LESS
10509: AND
10510: IFFALSE 10523
10512: PUSH
10513: LD_EXP 40
10517: PPUSH
10518: CALL_OW 302
10522: AND
10523: IFFALSE 10537
10525: PUSH
10526: LD_EXP 40
10530: PUSH
10531: LD_EXP 4
10535: IN
10536: AND
10537: IFFALSE 10661
// begin ComFree ( Lisa ) ;
10539: LD_EXP 40
10543: PPUSH
10544: CALL_OW 139
// p := 0 ;
10548: LD_ADDR_VAR 0 2
10552: PUSH
10553: LD_INT 0
10555: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10556: LD_INT 35
10558: PPUSH
10559: CALL_OW 67
// p := p + 1 ;
10563: LD_ADDR_VAR 0 2
10567: PUSH
10568: LD_VAR 0 2
10572: PUSH
10573: LD_INT 1
10575: PLUS
10576: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10577: LD_EXP 40
10581: PPUSH
10582: LD_EXP 51
10586: PPUSH
10587: CALL_OW 296
10591: PUSH
10592: LD_INT 7
10594: LESS
10595: IFTRUE 10607
10597: PUSH
10598: LD_VAR 0 2
10602: PUSH
10603: LD_INT 7
10605: GREATER
10606: OR
10607: IFFALSE 10556
// Say ( Lisa , D6-Lisa-1 ) ;
10609: LD_EXP 40
10613: PPUSH
10614: LD_STRING D6-Lisa-1
10616: PPUSH
10617: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10621: LD_EXP 40
10625: PPUSH
10626: LD_EXP 51
10630: PPUSH
10631: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10635: LD_EXP 51
10639: PPUSH
10640: LD_EXP 40
10644: PPUSH
10645: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10649: LD_EXP 51
10653: PPUSH
10654: LD_STRING D6-Frank-2
10656: PPUSH
10657: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10661: LD_EXP 47
10665: IFFALSE 10687
10667: PUSH
10668: LD_EXP 47
10672: PPUSH
10673: LD_EXP 51
10677: PPUSH
10678: CALL_OW 296
10682: PUSH
10683: LD_INT 20
10685: LESS
10686: AND
10687: IFFALSE 10700
10689: PUSH
10690: LD_EXP 47
10694: PPUSH
10695: CALL_OW 302
10699: AND
10700: IFFALSE 10897
// begin ComTurnUnit ( Lynch , JMM ) ;
10702: LD_EXP 47
10706: PPUSH
10707: LD_EXP 37
10711: PPUSH
10712: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10716: LD_EXP 51
10720: PPUSH
10721: LD_EXP 37
10725: PPUSH
10726: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10730: LD_EXP 47
10734: PPUSH
10735: LD_STRING D6-Sol1-2
10737: PPUSH
10738: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10742: LD_EXP 37
10746: PPUSH
10747: LD_STRING D6-JMM-2
10749: PPUSH
10750: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10754: LD_EXP 51
10758: PPUSH
10759: LD_STRING D6-Frank-3
10761: PPUSH
10762: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10766: LD_EXP 37
10770: PPUSH
10771: LD_STRING D6-JMM-3
10773: PPUSH
10774: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10778: LD_EXP 51
10782: PPUSH
10783: LD_STRING D6-Frank-4
10785: PPUSH
10786: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10790: LD_EXP 51
10794: PPUSH
10795: LD_STRING D6-Frank-4a
10797: PPUSH
10798: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10802: LD_EXP 37
10806: PPUSH
10807: LD_STRING D6-JMM-4
10809: PPUSH
10810: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10814: LD_EXP 51
10818: PPUSH
10819: LD_STRING D6-Frank-5
10821: PPUSH
10822: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10826: LD_EXP 40
10830: IFFALSE 10843
10832: PUSH
10833: LD_EXP 40
10837: PPUSH
10838: CALL_OW 302
10842: AND
10843: IFFALSE 10857
10845: PUSH
10846: LD_EXP 40
10850: PUSH
10851: LD_EXP 4
10855: IN
10856: AND
10857: IFFALSE 10871
// Say ( Lisa , D6-Lisa-5 ) ;
10859: LD_EXP 40
10863: PPUSH
10864: LD_STRING D6-Lisa-5
10866: PPUSH
10867: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10871: LD_EXP 51
10875: PPUSH
10876: LD_STRING D6-Frank-6
10878: PPUSH
10879: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10883: LD_EXP 37
10887: PPUSH
10888: LD_STRING D6-JMM-6
10890: PPUSH
10891: CALL_OW 88
// end else
10895: GO 11028
// begin ComTurnUnit ( Frank , JMM ) ;
10897: LD_EXP 51
10901: PPUSH
10902: LD_EXP 37
10906: PPUSH
10907: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10911: LD_EXP 51
10915: PPUSH
10916: LD_STRING D6-Frank-4
10918: PPUSH
10919: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10923: LD_EXP 51
10927: PPUSH
10928: LD_STRING D6-Frank-4a
10930: PPUSH
10931: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10935: LD_EXP 37
10939: PPUSH
10940: LD_STRING D6-JMM-4
10942: PPUSH
10943: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10947: LD_EXP 51
10951: PPUSH
10952: LD_STRING D6-Frank-5
10954: PPUSH
10955: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10959: LD_EXP 40
10963: IFFALSE 10976
10965: PUSH
10966: LD_EXP 40
10970: PPUSH
10971: CALL_OW 302
10975: AND
10976: IFFALSE 10990
10978: PUSH
10979: LD_EXP 40
10983: PUSH
10984: LD_EXP 4
10988: IN
10989: AND
10990: IFFALSE 11004
// Say ( Lisa , D6-Lisa-5 ) ;
10992: LD_EXP 40
10996: PPUSH
10997: LD_STRING D6-Lisa-5
10999: PPUSH
11000: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
11004: LD_EXP 51
11008: PPUSH
11009: LD_STRING D6-Frank-6
11011: PPUSH
11012: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
11016: LD_EXP 37
11020: PPUSH
11021: LD_STRING D6-JMM-6
11023: PPUSH
11024: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
11028: LD_STRING Q1
11030: PPUSH
11031: CALL_OW 97
11035: PUSH
11036: LD_INT 1
11038: DOUBLE
11039: EQUAL
11040: IFTRUE 11044
11042: GO 11055
11044: POP
// frank_send_to_scout := true ; 2 :
11045: LD_ADDR_EXP 15
11049: PUSH
11050: LD_INT 1
11052: ST_TO_ADDR
11053: GO 11075
11055: LD_INT 2
11057: DOUBLE
11058: EQUAL
11059: IFTRUE 11063
11061: GO 11074
11063: POP
// frank_send_to_scout := false ; end ;
11064: LD_ADDR_EXP 15
11068: PUSH
11069: LD_INT 0
11071: ST_TO_ADDR
11072: GO 11075
11074: POP
// Video ( false ) ;
11075: LD_INT 0
11077: PPUSH
11078: CALL 80368 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
11082: LD_EXP 37
11086: PUSH
11087: LD_EXP 40
11091: PUSH
11092: LD_EXP 47
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: LIST
11101: PPUSH
11102: CALL_OW 139
// if frank_send_to_scout then
11106: LD_EXP 15
11110: IFFALSE 11164
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
11112: LD_EXP 51
11116: PPUSH
11117: LD_INT 15
11119: PPUSH
11120: CALL_OW 113
// wait ( 0 0$01 ) ;
11124: LD_INT 35
11126: PPUSH
11127: CALL_OW 67
// until not See ( 1 , Frank ) ;
11131: LD_INT 1
11133: PPUSH
11134: LD_EXP 51
11138: PPUSH
11139: CALL_OW 292
11143: NOT
11144: IFFALSE 11112
// wait ( 0 0$02 ) ;
11146: LD_INT 70
11148: PPUSH
11149: CALL_OW 67
// RemoveUnit ( Frank ) ;
11153: LD_EXP 51
11157: PPUSH
11158: CALL_OW 64
// end else
11162: GO 11176
// SetSide ( Frank , 1 ) ;
11164: LD_EXP 51
11168: PPUSH
11169: LD_INT 1
11171: PPUSH
11172: CALL_OW 235
// send_attack_on_cornel_base := true ;
11176: LD_ADDR_EXP 26
11180: PUSH
11181: LD_INT 1
11183: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11184: LD_INT 35
11186: PPUSH
11187: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
11191: LD_ADDR_EXP 29
11195: PUSH
11196: LD_EXP 29
11200: PPUSH
11201: LD_STRING -
11203: PPUSH
11204: CALL 1085 0 2
11208: ST_TO_ADDR
// if debug then
11209: LD_EXP 1
11213: IFFALSE 11225
// debug_strings := time_to_prepare ;
11215: LD_ADDR_OWVAR 48
11219: PUSH
11220: LD_EXP 29
11224: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
11225: LD_EXP 29
11229: PUSH
11230: LD_INT 0
11232: EQUAL
11233: IFFALSE 11184
// cornel_prepared := true ;
11235: LD_ADDR_EXP 11
11239: PUSH
11240: LD_INT 1
11242: ST_TO_ADDR
// end ;
11243: PPOPN 3
11245: END
// every 0 0$01 trigger cornel_prepared do
11246: LD_EXP 11
11250: IFFALSE 11560
11252: GO 11254
11254: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
11255: LD_EXP 44
11259: PPUSH
11260: LD_STRING D3-Corn-1
11262: PPUSH
11263: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
11267: LD_STRING MOutWait
11269: PPUSH
11270: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
11274: LD_INT 35
11276: PPUSH
11277: CALL_OW 67
// until cornel_counter = 0 ;
11281: LD_EXP 10
11285: PUSH
11286: LD_INT 0
11288: EQUAL
11289: IFFALSE 11274
// SayRadio ( Cornel , D3a-Corn-1 ) ;
11291: LD_EXP 44
11295: PPUSH
11296: LD_STRING D3a-Corn-1
11298: PPUSH
11299: CALL_OW 94
// if IsOk ( Cornel ) then
11303: LD_EXP 44
11307: PPUSH
11308: CALL_OW 302
11312: IFFALSE 11326
// Say ( JMM , D3a-JMM-1 ) ;
11314: LD_EXP 37
11318: PPUSH
11319: LD_STRING D3a-JMM-1
11321: PPUSH
11322: CALL_OW 88
// end_mission_allowed := true ;
11326: LD_ADDR_EXP 21
11330: PUSH
11331: LD_INT 1
11333: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
11334: LD_STRING M2
11336: PPUSH
11337: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
11341: LD_INT 9
11343: PPUSH
11344: LD_INT 1
11346: PPUSH
11347: CALL_OW 424
// Wait ( 0 0$05 ) ;
11351: LD_INT 175
11353: PPUSH
11354: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
11358: LD_EXP 44
11362: PPUSH
11363: LD_STRING D3a-Corn-2
11365: PPUSH
11366: CALL_OW 94
// cornel_attack := true ;
11370: LD_ADDR_EXP 9
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
11378: LD_INT 105
11380: PPUSH
11381: CALL_OW 67
// AddMoreTanks ( ) ;
11385: CALL 5498 0 0
// if frank_send_to_scout then
11389: LD_EXP 15
11393: IFFALSE 11560
// begin InitHc ;
11395: CALL_OW 19
// InitUc ;
11399: CALL_OW 18
// uc_side := 8 ;
11403: LD_ADDR_OWVAR 20
11407: PUSH
11408: LD_INT 8
11410: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
11411: LD_ADDR_EXP 51
11415: PUSH
11416: LD_STRING Frank
11418: PPUSH
11419: LD_INT 0
11421: PPUSH
11422: LD_STRING 
11424: PPUSH
11425: CALL 42196 0 3
11429: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
11430: LD_EXP 51
11434: PPUSH
11435: LD_INT 6
11437: PPUSH
11438: LD_INT 9
11440: PPUSH
11441: LD_INT 0
11443: PPUSH
11444: CALL_OW 48
// ComCrawl ( Frank ) ;
11448: LD_EXP 51
11452: PPUSH
11453: CALL_OW 137
// repeat wait ( 10 ) ;
11457: LD_INT 10
11459: PPUSH
11460: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11464: LD_EXP 37
11468: PPUSH
11469: LD_EXP 51
11473: PPUSH
11474: CALL_OW 296
11478: PUSH
11479: LD_INT 9
11481: LESS
11482: IFTRUE 11503
11484: PUSH
11485: LD_INT 9
11487: PPUSH
11488: LD_INT 22
11490: PUSH
11491: LD_INT 1
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PPUSH
11498: CALL_OW 70
11502: OR
11503: IFFALSE 11457
// if IsDead ( Frank ) then
11505: LD_EXP 51
11509: PPUSH
11510: CALL_OW 301
11514: IFFALSE 11518
// exit ;
11516: GO 11560
// CenterOnUnits ( Frank ) ;
11518: LD_EXP 51
11522: PPUSH
11523: CALL_OW 85
// SetSide ( Frank , 1 ) ;
11527: LD_EXP 51
11531: PPUSH
11532: LD_INT 1
11534: PPUSH
11535: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
11539: LD_EXP 51
11543: PPUSH
11544: LD_STRING D6a-Frank-1
11546: PPUSH
11547: CALL_OW 88
// ComWalk ( Frank ) ;
11551: LD_EXP 51
11555: PPUSH
11556: CALL_OW 138
// end ; end ;
11560: END
// every 0 0$01 trigger solar_builded do
11561: LD_EXP 14
11565: IFFALSE 11671
11567: GO 11569
11569: DISABLE
// begin Wait ( 0 0$02 ) ;
11570: LD_INT 70
11572: PPUSH
11573: CALL_OW 67
// DialogueOn ;
11577: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11581: LD_EXP 37
11585: PPUSH
11586: LD_STRING D2b-JMM-1
11588: PPUSH
11589: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11593: LD_EXP 48
11597: IFFALSE 11610
11599: PUSH
11600: LD_EXP 48
11604: PPUSH
11605: CALL_OW 302
11609: AND
11610: IFFALSE 11660
// begin Say ( Walker , D2b-Sci1-1 ) ;
11612: LD_EXP 48
11616: PPUSH
11617: LD_STRING D2b-Sci1-1
11619: PPUSH
11620: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11624: LD_EXP 37
11628: PPUSH
11629: LD_STRING D2b-JMM-2
11631: PPUSH
11632: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11636: LD_EXP 48
11640: PPUSH
11641: LD_STRING D2b-Sci1-2
11643: PPUSH
11644: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11648: LD_EXP 37
11652: PPUSH
11653: LD_STRING D2b-JMM-3
11655: PPUSH
11656: CALL_OW 88
// end ; DialogueOff ;
11660: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11664: LD_STRING MOutSol
11666: PPUSH
11667: CALL_OW 337
// end ;
11671: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11672: LD_EXP 14
11676: IFFALSE 11689
11678: PUSH
11679: LD_EXP 37
11683: PPUSH
11684: CALL_OW 302
11688: AND
11689: IFFALSE 11702
11691: PUSH
11692: LD_EXP 37
11696: PPUSH
11697: CALL 919 0 1
11701: AND
11702: IFFALSE 11711
11704: PUSH
11705: LD_EXP 16
11709: NOT
11710: AND
11711: IFFALSE 11782
11713: GO 11715
11715: DISABLE
11716: LD_INT 0
11718: PPUSH
// begin jmm_in_veh := true ;
11719: LD_ADDR_EXP 16
11723: PUSH
11724: LD_INT 1
11726: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11727: LD_ADDR_VAR 0 1
11731: PUSH
11732: LD_INT 0
11734: PPUSH
11735: LD_INT 1
11737: PPUSH
11738: CALL_OW 12
11742: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11743: LD_INT 70
11745: PPUSH
11746: CALL_OW 67
// if i then
11750: LD_VAR 0 1
11754: IFFALSE 11770
// Say ( JMM , D2c-JMM-1 ) else
11756: LD_EXP 37
11760: PPUSH
11761: LD_STRING D2c-JMM-1
11763: PPUSH
11764: CALL_OW 88
11768: GO 11782
// Say ( JMM , D2c-JMM-1a ) ;
11770: LD_EXP 37
11774: PPUSH
11775: LD_STRING D2c-JMM-1a
11777: PPUSH
11778: CALL_OW 88
// end ;
11782: PPOPN 1
11784: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11785: LD_EXP 14
11789: IFFALSE 11802
11791: PUSH
11792: LD_EXP 38
11796: PPUSH
11797: CALL_OW 302
11801: AND
11802: IFFALSE 11815
11804: PUSH
11805: LD_EXP 38
11809: PPUSH
11810: CALL 919 0 1
11814: AND
11815: IFFALSE 11824
11817: PUSH
11818: LD_EXP 17
11822: NOT
11823: AND
11824: IFFALSE 11856
11826: GO 11828
11828: DISABLE
// begin bobby_in_veh := true ;
11829: LD_ADDR_EXP 17
11833: PUSH
11834: LD_INT 1
11836: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11837: LD_INT 70
11839: PPUSH
11840: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11844: LD_EXP 38
11848: PPUSH
11849: LD_STRING D2c-Bobby-1
11851: PPUSH
11852: CALL_OW 88
11856: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11857: LD_EXP 14
11861: IFFALSE 11874
11863: PUSH
11864: LD_EXP 40
11868: PPUSH
11869: CALL_OW 302
11873: AND
11874: IFFALSE 11887
11876: PUSH
11877: LD_EXP 40
11881: PPUSH
11882: CALL 919 0 1
11886: AND
11887: IFFALSE 11896
11889: PUSH
11890: LD_EXP 19
11894: NOT
11895: AND
11896: IFFALSE 11928
11898: GO 11900
11900: DISABLE
// begin lisa_in_veh := true ;
11901: LD_ADDR_EXP 19
11905: PUSH
11906: LD_INT 1
11908: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11909: LD_INT 70
11911: PPUSH
11912: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11916: LD_EXP 40
11920: PPUSH
11921: LD_STRING D2c-Lisa-1
11923: PPUSH
11924: CALL_OW 88
11928: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11929: LD_EXP 14
11933: IFFALSE 11946
11935: PUSH
11936: LD_EXP 39
11940: PPUSH
11941: CALL_OW 302
11945: AND
11946: IFFALSE 11959
11948: PUSH
11949: LD_EXP 39
11953: PPUSH
11954: CALL 919 0 1
11958: AND
11959: IFFALSE 11968
11961: PUSH
11962: LD_EXP 18
11966: NOT
11967: AND
11968: IFFALSE 12039
11970: GO 11972
11972: DISABLE
11973: LD_INT 0
11975: PPUSH
// begin cyrus_in_veh := true ;
11976: LD_ADDR_EXP 18
11980: PUSH
11981: LD_INT 1
11983: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11984: LD_ADDR_VAR 0 1
11988: PUSH
11989: LD_INT 0
11991: PPUSH
11992: LD_INT 1
11994: PPUSH
11995: CALL_OW 12
11999: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
12000: LD_INT 70
12002: PPUSH
12003: CALL_OW 67
// if i then
12007: LD_VAR 0 1
12011: IFFALSE 12027
// Say ( Cyrus , D2c-Cyrus-1 ) else
12013: LD_EXP 39
12017: PPUSH
12018: LD_STRING D2c-Cyrus-1
12020: PPUSH
12021: CALL_OW 88
12025: GO 12039
// Say ( Cyrus , D2c-Cyrus-1a ) ;
12027: LD_EXP 39
12031: PPUSH
12032: LD_STRING D2c-Cyrus-1a
12034: PPUSH
12035: CALL_OW 88
// end ;
12039: PPOPN 1
12041: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
12042: LD_EXP 44
12046: PPUSH
12047: LD_INT 16
12049: PPUSH
12050: CALL_OW 308
12054: IFFALSE 12335
12056: GO 12058
12058: DISABLE
12059: LD_INT 0
12061: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
12062: LD_INT 3
12064: PPUSH
12065: LD_EXP 44
12069: PPUSH
12070: CALL_OW 471
// send_attack_on_cornel := true ;
12074: LD_ADDR_EXP 32
12078: PUSH
12079: LD_INT 1
12081: ST_TO_ADDR
// if ru_vehicles then
12082: LD_EXP 56
12086: IFFALSE 12120
// for i in ru_vehicles do
12088: LD_ADDR_VAR 0 1
12092: PUSH
12093: LD_EXP 56
12097: PUSH
12098: FOR_IN
12099: IFFALSE 12118
// ComAgressiveMove ( i , 215 , 69 ) ;
12101: LD_VAR 0 1
12105: PPUSH
12106: LD_INT 215
12108: PPUSH
12109: LD_INT 69
12111: PPUSH
12112: CALL_OW 114
12116: GO 12098
12118: POP
12119: POP
// if ru_patrol then
12120: LD_EXP 53
12124: IFFALSE 12158
// for i in ru_patrol do
12126: LD_ADDR_VAR 0 1
12130: PUSH
12131: LD_EXP 53
12135: PUSH
12136: FOR_IN
12137: IFFALSE 12156
// ComAgressiveMove ( i , 215 , 69 ) ;
12139: LD_VAR 0 1
12143: PPUSH
12144: LD_INT 215
12146: PPUSH
12147: LD_INT 69
12149: PPUSH
12150: CALL_OW 114
12154: GO 12136
12156: POP
12157: POP
// if frank_send_to_scout then
12158: LD_EXP 15
12162: IFFALSE 12176
// SayRadio ( Frank , D3b-Frank-1 ) ;
12164: LD_EXP 51
12168: PPUSH
12169: LD_STRING D3b-Frank-1
12171: PPUSH
12172: CALL_OW 94
// wait ( 0 0$03 ) ;
12176: LD_INT 105
12178: PPUSH
12179: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
12183: LD_EXP 44
12187: PPUSH
12188: LD_STRING D4-Corn-1
12190: PPUSH
12191: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
12195: LD_INT 35
12197: PPUSH
12198: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
12202: LD_INT 22
12204: PUSH
12205: LD_INT 4
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PUSH
12212: LD_INT 21
12214: PUSH
12215: LD_INT 1
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 3
12224: PUSH
12225: LD_INT 24
12227: PUSH
12228: LD_INT 1000
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: LIST
12243: PPUSH
12244: CALL_OW 69
12248: PUSH
12249: LD_INT 6
12251: LESS
12252: IFFALSE 12195
// if Cornel then
12254: LD_EXP 44
12258: IFFALSE 12298
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
12260: LD_EXP 44
12264: PPUSH
12265: LD_STRING D5-Corn-1
12267: PPUSH
12268: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
12272: LD_EXP 44
12276: PPUSH
12277: LD_EXP 2
12281: PUSH
12282: LD_STRING Cornel
12284: STR
12285: PPUSH
12286: CALL_OW 38
// cornel_saved := true ;
12290: LD_ADDR_EXP 27
12294: PUSH
12295: LD_INT 1
12297: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
12298: LD_INT 4
12300: PPUSH
12301: LD_INT 8
12303: PPUSH
12304: CALL_OW 343
// wait ( 0 0$01 ) ;
12308: LD_INT 35
12310: PPUSH
12311: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
12315: LD_INT 3
12317: PPUSH
12318: LD_EXP 44
12322: PPUSH
12323: CALL_OW 472
// send_attack_on_cornel := false ;
12327: LD_ADDR_EXP 32
12331: PUSH
12332: LD_INT 0
12334: ST_TO_ADDR
// end ;
12335: PPOPN 1
12337: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
12338: LD_INT 9
12340: PPUSH
12341: LD_INT 22
12343: PUSH
12344: LD_INT 1
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PPUSH
12351: CALL_OW 70
12355: IFTRUE 12363
12357: PUSH
12358: LD_EXP 33
12362: OR
12363: IFFALSE 12620
12365: GO 12367
12367: DISABLE
12368: LD_INT 0
12370: PPUSH
12371: PPUSH
// begin enable ;
12372: ENABLE
// if not jmm_on_west then
12373: LD_EXP 5
12377: NOT
12378: IFFALSE 12389
// begin YouLost ( 4 ) ;
12380: LD_STRING 4
12382: PPUSH
12383: CALL_OW 104
// exit ;
12387: GO 12620
// end ; if not game_end then
12389: LD_EXP 33
12393: NOT
12394: IFFALSE 12404
// game_end := true ;
12396: LD_ADDR_EXP 33
12400: PUSH
12401: LD_INT 1
12403: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
12404: LD_ADDR_VAR 0 2
12408: PUSH
12409: LD_INT 9
12411: PPUSH
12412: LD_INT 22
12414: PUSH
12415: LD_INT 1
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: PPUSH
12422: CALL_OW 70
12426: ST_TO_ADDR
// if not filter then
12427: LD_VAR 0 2
12431: NOT
12432: IFFALSE 12436
// exit ;
12434: GO 12620
// for i in filter do
12436: LD_ADDR_VAR 0 1
12440: PUSH
12441: LD_VAR 0 2
12445: PUSH
12446: FOR_IN
12447: IFFALSE 12618
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle and IsDrivenBy ( i ) and GetFuel ( i ) > 0 then
12449: LD_VAR 0 1
12453: PPUSH
12454: CALL_OW 302
12458: IFFALSE 12475
12460: PUSH
12461: LD_VAR 0 1
12465: PPUSH
12466: CALL_OW 247
12470: PUSH
12471: LD_INT 2
12473: EQUAL
12474: AND
12475: IFFALSE 12488
12477: PUSH
12478: LD_VAR 0 1
12482: PPUSH
12483: CALL_OW 311
12487: AND
12488: IFFALSE 12505
12490: PUSH
12491: LD_VAR 0 1
12495: PPUSH
12496: CALL_OW 261
12500: PUSH
12501: LD_INT 0
12503: GREATER
12504: AND
12505: IFFALSE 12579
// begin if i = JMM and save_group < 4 then
12507: LD_VAR 0 1
12511: PUSH
12512: LD_EXP 37
12516: EQUAL
12517: IFFALSE 12529
12519: PUSH
12520: LD_EXP 23
12524: PUSH
12525: LD_INT 4
12527: LESS
12528: AND
12529: IFFALSE 12533
// continue ;
12531: GO 12446
// if GetNation ( i ) = nation_american then
12533: LD_VAR 0 1
12537: PPUSH
12538: CALL_OW 248
12542: PUSH
12543: LD_INT 1
12545: EQUAL
12546: IFFALSE 12556
// veh_on_meta := true ;
12548: LD_ADDR_EXP 28
12552: PUSH
12553: LD_INT 1
12555: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
12556: LD_VAR 0 1
12560: PPUSH
12561: CALL_OW 311
12565: PPUSH
12566: CALL 12623 0 1
// RemoveUnit ( i ) ;
12570: LD_VAR 0 1
12574: PPUSH
12575: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
12579: LD_VAR 0 1
12583: PPUSH
12584: CALL_OW 302
12588: IFFALSE 12605
12590: PUSH
12591: LD_VAR 0 1
12595: PPUSH
12596: CALL_OW 247
12600: PUSH
12601: LD_INT 1
12603: EQUAL
12604: AND
12605: IFFALSE 12616
// Save ( i ) ;
12607: LD_VAR 0 1
12611: PPUSH
12612: CALL 12623 0 1
// end ;
12616: GO 12446
12618: POP
12619: POP
// end ;
12620: PPOPN 2
12622: END
// export function Save ( i ) ; begin
12623: LD_INT 0
12625: PPUSH
// if i = JMM and save_counter >= 4 then
12626: LD_VAR 0 1
12630: PUSH
12631: LD_EXP 37
12635: EQUAL
12636: IFFALSE 12648
12638: PUSH
12639: LD_EXP 36
12643: PUSH
12644: LD_INT 4
12646: GREATEREQUAL
12647: AND
12648: IFFALSE 12786
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12650: LD_EXP 24
12654: IFFALSE 12690
12656: PUSH
12657: LD_INT 22
12659: PUSH
12660: LD_INT 1
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: LD_INT 21
12669: PUSH
12670: LD_INT 1
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PPUSH
12681: CALL_OW 69
12685: PUSH
12686: LD_INT 1
12688: GREATER
12689: AND
12690: IFFALSE 12747
// begin show_query := false ;
12692: LD_ADDR_EXP 24
12696: PUSH
12697: LD_INT 0
12699: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12700: LD_STRING Q2
12702: PPUSH
12703: CALL_OW 97
12707: PUSH
12708: LD_INT 1
12710: DOUBLE
12711: EQUAL
12712: IFTRUE 12716
12714: GO 12727
12716: POP
// wait_for_them := true ; 2 :
12717: LD_ADDR_EXP 25
12721: PUSH
12722: LD_INT 1
12724: ST_TO_ADDR
12725: GO 12747
12727: LD_INT 2
12729: DOUBLE
12730: EQUAL
12731: IFTRUE 12735
12733: GO 12746
12735: POP
// wait_for_them := false ; end ;
12736: LD_ADDR_EXP 25
12740: PUSH
12741: LD_INT 0
12743: ST_TO_ADDR
12744: GO 12747
12746: POP
// end ; save_counter := save_counter + 1 ;
12747: LD_ADDR_EXP 36
12751: PUSH
12752: LD_EXP 36
12756: PUSH
12757: LD_INT 1
12759: PLUS
12760: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12761: LD_ADDR_EXP 23
12765: PUSH
12766: LD_EXP 23
12770: PUSH
12771: LD_EXP 37
12775: ADD
12776: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12777: LD_EXP 37
12781: PPUSH
12782: CALL_OW 64
// end ; if i = Lisa then
12786: LD_VAR 0 1
12790: PUSH
12791: LD_EXP 40
12795: EQUAL
12796: IFFALSE 12837
// begin save_counter := save_counter + 1 ;
12798: LD_ADDR_EXP 36
12802: PUSH
12803: LD_EXP 36
12807: PUSH
12808: LD_INT 1
12810: PLUS
12811: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12812: LD_ADDR_EXP 23
12816: PUSH
12817: LD_EXP 23
12821: PUSH
12822: LD_EXP 40
12826: ADD
12827: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12828: LD_EXP 40
12832: PPUSH
12833: CALL_OW 64
// end ; if i = Bobby then
12837: LD_VAR 0 1
12841: PUSH
12842: LD_EXP 38
12846: EQUAL
12847: IFFALSE 12888
// begin save_counter := save_counter + 1 ;
12849: LD_ADDR_EXP 36
12853: PUSH
12854: LD_EXP 36
12858: PUSH
12859: LD_INT 1
12861: PLUS
12862: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12863: LD_ADDR_EXP 23
12867: PUSH
12868: LD_EXP 23
12872: PUSH
12873: LD_EXP 38
12877: ADD
12878: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12879: LD_EXP 38
12883: PPUSH
12884: CALL_OW 64
// end ; if i = Cyrus then
12888: LD_VAR 0 1
12892: PUSH
12893: LD_EXP 39
12897: EQUAL
12898: IFFALSE 12939
// begin save_counter := save_counter + 1 ;
12900: LD_ADDR_EXP 36
12904: PUSH
12905: LD_EXP 36
12909: PUSH
12910: LD_INT 1
12912: PLUS
12913: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12914: LD_ADDR_EXP 23
12918: PUSH
12919: LD_EXP 23
12923: PUSH
12924: LD_EXP 39
12928: ADD
12929: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12930: LD_EXP 39
12934: PPUSH
12935: CALL_OW 64
// end ; if i = Khatam then
12939: LD_VAR 0 1
12943: PUSH
12944: LD_EXP 41
12948: EQUAL
12949: IFFALSE 12990
// begin save_counter := save_counter + 1 ;
12951: LD_ADDR_EXP 36
12955: PUSH
12956: LD_EXP 36
12960: PUSH
12961: LD_INT 1
12963: PLUS
12964: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12965: LD_ADDR_EXP 23
12969: PUSH
12970: LD_EXP 23
12974: PUSH
12975: LD_EXP 41
12979: ADD
12980: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12981: LD_EXP 41
12985: PPUSH
12986: CALL_OW 64
// end ; if i = Frank then
12990: LD_VAR 0 1
12994: PUSH
12995: LD_EXP 51
12999: EQUAL
13000: IFFALSE 13041
// begin save_counter := save_counter + 1 ;
13002: LD_ADDR_EXP 36
13006: PUSH
13007: LD_EXP 36
13011: PUSH
13012: LD_INT 1
13014: PLUS
13015: ST_TO_ADDR
// save_group := save_group ^ Frank ;
13016: LD_ADDR_EXP 23
13020: PUSH
13021: LD_EXP 23
13025: PUSH
13026: LD_EXP 51
13030: ADD
13031: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13032: LD_EXP 51
13036: PPUSH
13037: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
13041: LD_VAR 0 1
13045: PUSH
13046: LD_EXP 37
13050: NONEQUAL
13051: IFFALSE 13064
13053: PUSH
13054: LD_VAR 0 1
13058: PPUSH
13059: CALL_OW 302
13063: AND
13064: IFFALSE 13081
13066: PUSH
13067: LD_VAR 0 1
13071: PPUSH
13072: CALL_OW 247
13076: PUSH
13077: LD_INT 1
13079: EQUAL
13080: AND
13081: IFFALSE 13096
13083: PUSH
13084: LD_VAR 0 1
13088: PUSH
13089: LD_EXP 23
13093: IN
13094: NOT
13095: AND
13096: IFFALSE 13137
// begin save_counter := save_counter + 1 ;
13098: LD_ADDR_EXP 36
13102: PUSH
13103: LD_EXP 36
13107: PUSH
13108: LD_INT 1
13110: PLUS
13111: ST_TO_ADDR
// save_others := save_others ^ i ;
13112: LD_ADDR_EXP 22
13116: PUSH
13117: LD_EXP 22
13121: PUSH
13122: LD_VAR 0 1
13126: ADD
13127: ST_TO_ADDR
// RemoveUnit ( i ) ;
13128: LD_VAR 0 1
13132: PPUSH
13133: CALL_OW 64
// end ; end ;
13137: LD_VAR 0 2
13141: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
13142: LD_EXP 24
13146: NOT
13147: IFFALSE 13156
13149: PUSH
13150: LD_EXP 25
13154: NOT
13155: AND
13156: IFTRUE 13192
13158: PUSH
13159: LD_INT 22
13161: PUSH
13162: LD_INT 1
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 21
13171: PUSH
13172: LD_INT 1
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PPUSH
13183: CALL_OW 69
13187: PUSH
13188: LD_INT 0
13190: EQUAL
13191: OR
13192: IFFALSE 13201
13194: GO 13196
13196: DISABLE
// EndMission ;
13197: CALL 13202 0 0
13201: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
13202: LD_INT 0
13204: PPUSH
13205: PPUSH
13206: PPUSH
13207: PPUSH
13208: PPUSH
// wait ( 0 0$01 ) ;
13209: LD_INT 35
13211: PPUSH
13212: CALL_OW 67
// if tick <= 12 12$00 then
13216: LD_OWVAR 1
13220: PUSH
13221: LD_INT 25200
13223: LESSEQUAL
13224: IFFALSE 13233
// SetAchievement ( ACH_ASPEED_3 ) ;
13226: LD_STRING ACH_ASPEED_3
13228: PPUSH
13229: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
13233: LD_EXP 23
13237: PUSH
13238: LD_EXP 22
13242: ADD
13243: PPUSH
13244: LD_INT 25
13246: PUSH
13247: LD_INT 4
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PPUSH
13254: CALL_OW 72
13258: PUSH
13259: LD_INT 0
13261: EQUAL
13262: IFFALSE 13278
// begin wait ( 3 ) ;
13264: LD_INT 3
13266: PPUSH
13267: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
13271: LD_STRING ACH_NOSCI
13273: PPUSH
13274: CALL_OW 543
// end ; m1 := solar_builded ;
13278: LD_ADDR_VAR 0 3
13282: PUSH
13283: LD_EXP 14
13287: ST_TO_ADDR
// m2 := veh_on_meta ;
13288: LD_ADDR_VAR 0 4
13292: PUSH
13293: LD_EXP 28
13297: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
13298: LD_ADDR_VAR 0 5
13302: PUSH
13303: LD_EXP 34
13307: PUSH
13308: LD_INT 0
13310: EQUAL
13311: ST_TO_ADDR
// if solar_builded then
13312: LD_EXP 14
13316: IFFALSE 13330
// AddMedal ( Solar1 , 1 ) else
13318: LD_STRING Solar1
13320: PPUSH
13321: LD_INT 1
13323: PPUSH
13324: CALL_OW 101
13328: GO 13341
// AddMedal ( Solar1 , - 1 ) ;
13330: LD_STRING Solar1
13332: PPUSH
13333: LD_INT 1
13335: NEG
13336: PPUSH
13337: CALL_OW 101
// if veh_on_meta then
13341: LD_EXP 28
13345: IFFALSE 13359
// AddMedal ( Solar2 , 1 ) else
13347: LD_STRING Solar2
13349: PPUSH
13350: LD_INT 1
13352: PPUSH
13353: CALL_OW 101
13357: GO 13389
// if solar_builded then
13359: LD_EXP 14
13363: IFFALSE 13378
// AddMedal ( Solar2 , - 1 ) else
13365: LD_STRING Solar2
13367: PPUSH
13368: LD_INT 1
13370: NEG
13371: PPUSH
13372: CALL_OW 101
13376: GO 13389
// AddMedal ( Solar2 , - 2 ) ;
13378: LD_STRING Solar2
13380: PPUSH
13381: LD_INT 2
13383: NEG
13384: PPUSH
13385: CALL_OW 101
// if lose_counter = 0 then
13389: LD_EXP 34
13393: PUSH
13394: LD_INT 0
13396: EQUAL
13397: IFFALSE 13411
// AddMedal ( No , 1 ) else
13399: LD_STRING No
13401: PPUSH
13402: LD_INT 1
13404: PPUSH
13405: CALL_OW 101
13409: GO 13457
// if lose_counter > 0 and lose_counter < 5 then
13411: LD_EXP 34
13415: PUSH
13416: LD_INT 0
13418: GREATER
13419: IFFALSE 13431
13421: PUSH
13422: LD_EXP 34
13426: PUSH
13427: LD_INT 5
13429: LESS
13430: AND
13431: IFFALSE 13446
// AddMedal ( No , - 1 ) else
13433: LD_STRING No
13435: PPUSH
13436: LD_INT 1
13438: NEG
13439: PPUSH
13440: CALL_OW 101
13444: GO 13457
// AddMedal ( UpTo4 , - 1 ) ;
13446: LD_STRING UpTo4
13448: PPUSH
13449: LD_INT 1
13451: NEG
13452: PPUSH
13453: CALL_OW 101
// GiveMedals ( MAIN ) ;
13457: LD_STRING MAIN
13459: PPUSH
13460: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
13464: LD_OWVAR 67
13468: PUSH
13469: LD_INT 3
13471: GREATEREQUAL
13472: IFFALSE 13480
13474: PUSH
13475: LD_VAR 0 3
13479: AND
13480: IFFALSE 13488
13482: PUSH
13483: LD_VAR 0 4
13487: AND
13488: IFFALSE 13496
13490: PUSH
13491: LD_VAR 0 5
13495: AND
13496: IFFALSE 13508
// SetAchievementEX ( ACH_AMER , 3 ) ;
13498: LD_STRING ACH_AMER
13500: PPUSH
13501: LD_INT 3
13503: PPUSH
13504: CALL_OW 564
// if IsDead ( Pokryshkin ) then
13508: LD_EXP 52
13512: PPUSH
13513: CALL_OW 301
13517: IFFALSE 13573
// begin stop_talking := true ;
13519: LD_ADDR_OWVAR 56
13523: PUSH
13524: LD_INT 1
13526: ST_TO_ADDR
// for i in save_group union save_others do
13527: LD_ADDR_VAR 0 2
13531: PUSH
13532: LD_EXP 23
13536: PUSH
13537: LD_EXP 22
13541: UNION
13542: PUSH
13543: FOR_IN
13544: IFFALSE 13563
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
13546: LD_VAR 0 2
13550: PPUSH
13551: LD_INT 1
13553: PPUSH
13554: LD_INT 1500
13556: PPUSH
13557: CALL_OW 591
13561: GO 13543
13563: POP
13564: POP
// stop_talking := false ;
13565: LD_ADDR_OWVAR 56
13569: PUSH
13570: LD_INT 0
13572: ST_TO_ADDR
// end ; RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_american ] ] ) ) ;
13573: LD_INT 22
13575: PUSH
13576: LD_INT 1
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: PUSH
13583: LD_INT 23
13585: PUSH
13586: LD_INT 1
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PPUSH
13597: CALL_OW 69
13601: PPUSH
13602: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
13606: LD_EXP 37
13610: PPUSH
13611: LD_EXP 2
13615: PUSH
13616: LD_STRING JMM
13618: STR
13619: PPUSH
13620: CALL_OW 38
// if Bobby in save_group then
13624: LD_EXP 38
13628: PUSH
13629: LD_EXP 23
13633: IN
13634: IFFALSE 13654
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
13636: LD_EXP 38
13640: PPUSH
13641: LD_EXP 2
13645: PUSH
13646: LD_STRING Bobby
13648: STR
13649: PPUSH
13650: CALL_OW 38
// if Cyrus in save_group then
13654: LD_EXP 39
13658: PUSH
13659: LD_EXP 23
13663: IN
13664: IFFALSE 13684
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
13666: LD_EXP 39
13670: PPUSH
13671: LD_EXP 2
13675: PUSH
13676: LD_STRING Cyrus
13678: STR
13679: PPUSH
13680: CALL_OW 38
// if Lisa in save_group then
13684: LD_EXP 40
13688: PUSH
13689: LD_EXP 23
13693: IN
13694: IFFALSE 13714
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13696: LD_EXP 40
13700: PPUSH
13701: LD_EXP 2
13705: PUSH
13706: LD_STRING Lisa
13708: STR
13709: PPUSH
13710: CALL_OW 38
// if Frank in save_group then
13714: LD_EXP 51
13718: PUSH
13719: LD_EXP 23
13723: IN
13724: IFFALSE 13751
// begin ToLua ( enableBioCharacter(BIO_FRANK) ) ;
13726: LD_STRING enableBioCharacter(BIO_FRANK)
13728: PPUSH
13729: CALL_OW 559
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13733: LD_EXP 51
13737: PPUSH
13738: LD_EXP 2
13742: PUSH
13743: LD_STRING Frank
13745: STR
13746: PPUSH
13747: CALL_OW 38
// end ; if Khatam in save_group then
13751: LD_EXP 41
13755: PUSH
13756: LD_EXP 23
13760: IN
13761: IFFALSE 13781
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13763: LD_EXP 41
13767: PPUSH
13768: LD_EXP 2
13772: PUSH
13773: LD_STRING Khatam
13775: STR
13776: PPUSH
13777: CALL_OW 38
// if save_others then
13781: LD_EXP 22
13785: IFFALSE 13799
// SaveCharacters ( save_others , 03_others ) ;
13787: LD_EXP 22
13791: PPUSH
13792: LD_STRING 03_others
13794: PPUSH
13795: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ANDY) ) ;
13799: LD_STRING enableBioCharacter(BIO_ANDY)
13801: PPUSH
13802: CALL_OW 559
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13806: LD_EXP 45
13810: IFFALSE 13823
13812: PUSH
13813: LD_EXP 45
13817: PPUSH
13818: CALL_OW 302
13822: AND
13823: IFFALSE 13831
13825: PUSH
13826: LD_EXP 27
13830: AND
13831: IFFALSE 13843
// begin ResetFog ;
13833: CALL_OW 335
// DisplayEndingScene ;
13837: CALL 13865 0 0
// end else
13841: GO 13856
// DeleteCharacters ( mission_prefix & Cornel ) ;
13843: LD_EXP 2
13847: PUSH
13848: LD_STRING Cornel
13850: STR
13851: PPUSH
13852: CALL_OW 40
// YouWin ;
13856: CALL_OW 103
// end ;
13860: LD_VAR 0 1
13864: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13865: LD_INT 0
13867: PPUSH
13868: PPUSH
13869: PPUSH
13870: PPUSH
13871: PPUSH
13872: PPUSH
// InGameOn ;
13873: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13877: LD_INT 208
13879: PPUSH
13880: LD_INT 62
13882: PPUSH
13883: LD_INT 1
13885: PPUSH
13886: LD_INT 10
13888: NEG
13889: PPUSH
13890: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13894: LD_INT 208
13896: PPUSH
13897: LD_INT 62
13899: PPUSH
13900: LD_INT 1
13902: PPUSH
13903: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13907: LD_ADDR_VAR 0 3
13911: PUSH
13912: LD_INT 22
13914: PUSH
13915: LD_INT 3
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: PUSH
13922: LD_INT 2
13924: PUSH
13925: LD_INT 21
13927: PUSH
13928: LD_INT 2
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: LD_INT 21
13937: PUSH
13938: LD_INT 1
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: LIST
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PPUSH
13954: CALL_OW 69
13958: ST_TO_ADDR
// if filter then
13959: LD_VAR 0 3
13963: IFFALSE 13991
// for i in filter do
13965: LD_ADDR_VAR 0 2
13969: PUSH
13970: LD_VAR 0 3
13974: PUSH
13975: FOR_IN
13976: IFFALSE 13989
// RemoveUnit ( i ) ;
13978: LD_VAR 0 2
13982: PPUSH
13983: CALL_OW 64
13987: GO 13975
13989: POP
13990: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13991: LD_ADDR_VAR 0 3
13995: PUSH
13996: LD_INT 22
13998: PUSH
13999: LD_INT 4
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: PUSH
14006: LD_INT 21
14008: PUSH
14009: LD_INT 1
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PPUSH
14020: CALL_OW 69
14024: ST_TO_ADDR
// if filter then
14025: LD_VAR 0 3
14029: IFFALSE 14060
// for i in filter do
14031: LD_ADDR_VAR 0 2
14035: PUSH
14036: LD_VAR 0 3
14040: PUSH
14041: FOR_IN
14042: IFFALSE 14058
// SetLives ( i , 0 ) ;
14044: LD_VAR 0 2
14048: PPUSH
14049: LD_INT 0
14051: PPUSH
14052: CALL_OW 234
14056: GO 14041
14058: POP
14059: POP
// uc_side := 4 ;
14060: LD_ADDR_OWVAR 20
14064: PUSH
14065: LD_INT 4
14067: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
14068: LD_ADDR_VAR 0 4
14072: PUSH
14073: LD_STRING Cornell
14075: PPUSH
14076: LD_INT 0
14078: PPUSH
14079: LD_STRING 
14081: PPUSH
14082: CALL 42196 0 3
14086: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
14087: LD_VAR 0 4
14091: PPUSH
14092: LD_INT 208
14094: PPUSH
14095: LD_INT 62
14097: PPUSH
14098: LD_INT 0
14100: PPUSH
14101: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
14105: LD_VAR 0 4
14109: PPUSH
14110: LD_INT 100
14112: PPUSH
14113: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
14117: LD_INT 3
14119: PPUSH
14120: LD_VAR 0 4
14124: PPUSH
14125: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
14129: LD_INT 4
14131: PPUSH
14132: LD_INT 3
14134: PPUSH
14135: LD_INT 1
14137: PPUSH
14138: LD_INT 1
14140: PPUSH
14141: CALL_OW 80
// uc_side := 3 ;
14145: LD_ADDR_OWVAR 20
14149: PUSH
14150: LD_INT 3
14152: ST_TO_ADDR
// uc_nation := 3 ;
14153: LD_ADDR_OWVAR 21
14157: PUSH
14158: LD_INT 3
14160: ST_TO_ADDR
// InitHc ;
14161: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
14165: LD_ADDR_VAR 0 5
14169: PUSH
14170: LD_STRING Mikhail
14172: PPUSH
14173: LD_INT 0
14175: PPUSH
14176: LD_STRING 
14178: PPUSH
14179: CALL 42196 0 3
14183: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
14184: LD_INT 1
14186: PPUSH
14187: LD_INT 1
14189: PPUSH
14190: LD_INT 0
14192: PPUSH
14193: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
14197: LD_ADDR_VAR 0 6
14201: PUSH
14202: LD_VAR 0 6
14206: PUSH
14207: CALL_OW 44
14211: ADD
14212: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
14213: LD_ADDR_VAR 0 6
14217: PUSH
14218: LD_VAR 0 6
14222: PUSH
14223: CALL_OW 44
14227: ADD
14228: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
14229: LD_INT 2
14231: PPUSH
14232: LD_INT 4
14234: PPUSH
14235: LD_INT 0
14237: PPUSH
14238: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
14242: LD_ADDR_VAR 0 6
14246: PUSH
14247: LD_VAR 0 6
14251: PUSH
14252: CALL_OW 44
14256: ADD
14257: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
14258: LD_VAR 0 5
14262: PPUSH
14263: LD_INT 17
14265: PPUSH
14266: LD_INT 0
14268: PPUSH
14269: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
14273: LD_VAR 0 5
14277: PPUSH
14278: LD_INT 210
14280: PPUSH
14281: LD_INT 63
14283: PPUSH
14284: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
14288: LD_VAR 0 5
14292: PPUSH
14293: LD_INT 208
14295: PPUSH
14296: LD_INT 62
14298: PPUSH
14299: CALL_OW 178
// for i in fake_russians do
14303: LD_ADDR_VAR 0 2
14307: PUSH
14308: LD_VAR 0 6
14312: PUSH
14313: FOR_IN
14314: IFFALSE 14392
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
14316: LD_VAR 0 2
14320: PPUSH
14321: LD_INT 17
14323: PPUSH
14324: LD_INT 0
14326: PPUSH
14327: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
14331: LD_VAR 0 2
14335: PPUSH
14336: LD_INT 215
14338: PPUSH
14339: LD_INT 67
14341: PPUSH
14342: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
14346: LD_VAR 0 2
14350: PPUSH
14351: LD_INT 208
14353: PPUSH
14354: LD_INT 62
14356: PPUSH
14357: CALL_OW 178
// if GetClass ( i ) = 4 then
14361: LD_VAR 0 2
14365: PPUSH
14366: CALL_OW 257
14370: PUSH
14371: LD_INT 4
14373: EQUAL
14374: IFFALSE 14390
// ComHeal ( i , fake_cornel ) ;
14376: LD_VAR 0 2
14380: PPUSH
14381: LD_VAR 0 4
14385: PPUSH
14386: CALL_OW 128
// end ;
14390: GO 14313
14392: POP
14393: POP
// Wait ( 0 0$01 ) ;
14394: LD_INT 35
14396: PPUSH
14397: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
14401: LD_INT 208
14403: PPUSH
14404: LD_INT 62
14406: PPUSH
14407: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
14411: LD_INT 208
14413: PPUSH
14414: LD_INT 62
14416: PPUSH
14417: LD_INT 1
14419: PPUSH
14420: LD_INT 10
14422: NEG
14423: PPUSH
14424: CALL_OW 330
// Wait ( 0 0$15 ) ;
14428: LD_INT 525
14430: PPUSH
14431: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
14435: LD_INT 208
14437: PPUSH
14438: LD_INT 62
14440: PPUSH
14441: LD_INT 1
14443: PPUSH
14444: CALL_OW 331
// ResetFog ;
14448: CALL_OW 335
// InGameOff ;
14452: CALL_OW 9
// end ;
14456: LD_VAR 0 1
14460: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
14461: LD_INT 10
14463: PPUSH
14464: LD_INT 22
14466: PUSH
14467: LD_INT 1
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PPUSH
14474: CALL_OW 70
14478: IFFALSE 14491
14480: PUSH
14481: LD_EXP 44
14485: PPUSH
14486: CALL_OW 302
14490: AND
14491: IFTRUE 14533
14493: PUSH
14494: LD_INT 22
14496: PUSH
14497: LD_INT 1
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PPUSH
14504: CALL_OW 69
14508: PPUSH
14509: LD_EXP 44
14513: PPUSH
14514: CALL_OW 74
14518: PPUSH
14519: LD_EXP 44
14523: PPUSH
14524: CALL_OW 296
14528: PUSH
14529: LD_INT 30
14531: LESS
14532: OR
14533: IFFALSE 14584
14535: GO 14537
14537: DISABLE
// begin powell_warn := powell_warn + 1 ;
14538: LD_ADDR_EXP 35
14542: PUSH
14543: LD_EXP 35
14547: PUSH
14548: LD_INT 1
14550: PLUS
14551: ST_TO_ADDR
// if powell_warn = 3 then
14552: LD_EXP 35
14556: PUSH
14557: LD_INT 3
14559: EQUAL
14560: IFFALSE 14571
// begin YouLost ( 5 ) ;
14562: LD_STRING 5
14564: PPUSH
14565: CALL_OW 104
// exit ;
14569: GO 14584
// end ; SayRadioNoFace ( Powell , DWarn-Pow-1 ) ;
14571: LD_EXP 46
14575: PPUSH
14576: LD_STRING DWarn-Pow-1
14578: PPUSH
14579: CALL_OW 586
// enable ;
14583: ENABLE
// end ; end_of_file
14584: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
14585: LD_EXP 8
14589: IFFALSE 16434
14591: GO 14593
14593: DISABLE
14594: LD_INT 0
14596: PPUSH
14597: PPUSH
14598: PPUSH
14599: PPUSH
14600: PPUSH
14601: PPUSH
14602: PPUSH
14603: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
14604: LD_EXP 44
14608: PUSH
14609: LD_EXP 45
14613: ADD
14614: PUSH
14615: LD_EXP 6
14619: ADD
14620: PPUSH
14621: LD_INT 250
14623: PPUSH
14624: LD_INT 120
14626: PPUSH
14627: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
14631: LD_ADDR_VAR 0 2
14635: PUSH
14636: LD_EXP 6
14640: PPUSH
14641: LD_INT 25
14643: PUSH
14644: LD_INT 2
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PPUSH
14651: CALL_OW 72
14655: PUSH
14656: LD_EXP 45
14660: DIFF
14661: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
14662: LD_ADDR_VAR 0 3
14666: PUSH
14667: LD_EXP 6
14671: PPUSH
14672: LD_INT 21
14674: PUSH
14675: LD_INT 1
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PPUSH
14682: CALL_OW 72
14686: PUSH
14687: LD_VAR 0 2
14691: DIFF
14692: ST_TO_ADDR
// if not has_eng then
14693: LD_VAR 0 2
14697: NOT
14698: IFFALSE 14781
// begin uc_side := 4 ;
14700: LD_ADDR_OWVAR 20
14704: PUSH
14705: LD_INT 4
14707: ST_TO_ADDR
// uc_nation := 1 ;
14708: LD_ADDR_OWVAR 21
14712: PUSH
14713: LD_INT 1
14715: ST_TO_ADDR
// bc_type := b_depot ;
14716: LD_ADDR_OWVAR 42
14720: PUSH
14721: LD_INT 0
14723: ST_TO_ADDR
// bc_level := 2 ;
14724: LD_ADDR_OWVAR 43
14728: PUSH
14729: LD_INT 2
14731: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14732: LD_ADDR_VAR 0 4
14736: PUSH
14737: LD_INT 264
14739: PPUSH
14740: LD_INT 120
14742: PPUSH
14743: LD_INT 4
14745: PPUSH
14746: CALL_OW 47
14750: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14751: LD_INT 264
14753: PPUSH
14754: LD_INT 120
14756: PPUSH
14757: LD_INT 4
14759: PPUSH
14760: LD_INT 10
14762: NEG
14763: PPUSH
14764: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14768: LD_INT 264
14770: PPUSH
14771: LD_INT 120
14773: PPUSH
14774: LD_INT 4
14776: PPUSH
14777: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14781: LD_INT 35
14783: PPUSH
14784: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14788: LD_EXP 44
14792: PPUSH
14793: LD_INT 10
14795: PPUSH
14796: CALL_OW 308
14800: IFTRUE 14821
14802: PUSH
14803: LD_EXP 44
14807: PPUSH
14808: CALL_OW 310
14812: PPUSH
14813: LD_INT 10
14815: PPUSH
14816: CALL_OW 308
14820: OR
14821: IFFALSE 14781
// if has_eng and not dep then
14823: LD_VAR 0 2
14827: IFFALSE 14836
14829: PUSH
14830: LD_VAR 0 4
14834: NOT
14835: AND
14836: IFFALSE 14986
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14838: LD_VAR 0 2
14842: PPUSH
14843: LD_INT 0
14845: PPUSH
14846: LD_INT 264
14848: PPUSH
14849: LD_INT 120
14851: PPUSH
14852: LD_INT 4
14854: PPUSH
14855: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14859: LD_INT 35
14861: PPUSH
14862: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14866: LD_INT 22
14868: PUSH
14869: LD_INT 4
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 30
14878: PUSH
14879: LD_INT 0
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PPUSH
14890: CALL_OW 69
14894: IFFALSE 14859
// ComMoveXY ( filter , 264 , 120 ) ;
14896: LD_VAR 0 3
14900: PPUSH
14901: LD_INT 264
14903: PPUSH
14904: LD_INT 120
14906: PPUSH
14907: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14911: LD_INT 35
14913: PPUSH
14914: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14918: LD_INT 22
14920: PUSH
14921: LD_INT 4
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: LD_INT 30
14930: PUSH
14931: LD_INT 0
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 3
14940: PUSH
14941: LD_INT 57
14943: PUSH
14944: EMPTY
14945: LIST
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: LIST
14955: PPUSH
14956: CALL_OW 69
14960: IFFALSE 14911
// ComMoveXY ( filter , 247 , 113 ) ;
14962: LD_VAR 0 3
14966: PPUSH
14967: LD_INT 247
14969: PPUSH
14970: LD_INT 113
14972: PPUSH
14973: CALL_OW 111
// Wait ( 0 0$2 ) ;
14977: LD_INT 70
14979: PPUSH
14980: CALL_OW 67
// end else
14984: GO 14998
// begin SetSide ( dep , 4 ) ;
14986: LD_VAR 0 4
14990: PPUSH
14991: LD_INT 4
14993: PPUSH
14994: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14998: LD_ADDR_VAR 0 4
15002: PUSH
15003: LD_INT 22
15005: PUSH
15006: LD_INT 4
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: LD_INT 30
15015: PUSH
15016: LD_INT 0
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PPUSH
15027: CALL_OW 69
15031: PUSH
15032: LD_INT 1
15034: ARRAY
15035: ST_TO_ADDR
// if not has_eng then
15036: LD_VAR 0 2
15040: NOT
15041: IFFALSE 15128
// for i = 1 to 2 do
15043: LD_ADDR_VAR 0 1
15047: PUSH
15048: DOUBLE
15049: LD_INT 1
15051: DEC
15052: ST_TO_ADDR
15053: LD_INT 2
15055: PUSH
15056: FOR_TO
15057: IFFALSE 15126
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
15059: LD_VAR 0 3
15063: PUSH
15064: LD_INT 1
15066: ARRAY
15067: PPUSH
15068: LD_VAR 0 4
15072: PPUSH
15073: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
15077: LD_VAR 0 3
15081: PUSH
15082: LD_INT 1
15084: ARRAY
15085: PPUSH
15086: LD_INT 2
15088: PPUSH
15089: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
15093: LD_VAR 0 3
15097: PUSH
15098: LD_INT 1
15100: ARRAY
15101: PPUSH
15102: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
15106: LD_ADDR_VAR 0 3
15110: PUSH
15111: LD_VAR 0 3
15115: PPUSH
15116: LD_INT 1
15118: PPUSH
15119: CALL_OW 3
15123: ST_TO_ADDR
// end ;
15124: GO 15056
15126: POP
15127: POP
// if IsInUnit ( Cornel ) then
15128: LD_EXP 44
15132: PPUSH
15133: CALL_OW 310
15137: IFFALSE 15215
// begin cargo := IsInUnit ( Cornel ) ;
15139: LD_ADDR_VAR 0 7
15143: PUSH
15144: LD_EXP 44
15148: PPUSH
15149: CALL_OW 310
15153: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
15154: LD_VAR 0 7
15158: PPUSH
15159: LD_INT 1
15161: PPUSH
15162: CALL_OW 289
15166: IFFALSE 15177
// ComUnload ( cargo ) ;
15168: LD_VAR 0 7
15172: PPUSH
15173: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
15177: LD_EXP 44
15181: PPUSH
15182: LD_INT 235
15184: PPUSH
15185: LD_INT 122
15187: PPUSH
15188: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
15192: LD_EXP 44
15196: PPUSH
15197: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
15201: LD_EXP 44
15205: PPUSH
15206: LD_VAR 0 4
15210: PPUSH
15211: CALL_OW 180
// end ; if Bierezov then
15215: LD_EXP 45
15219: IFFALSE 15267
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
15221: LD_EXP 45
15225: PPUSH
15226: LD_INT 260
15228: PPUSH
15229: LD_INT 120
15231: PPUSH
15232: CALL_OW 111
// if dep then
15236: LD_VAR 0 4
15240: IFFALSE 15258
// AddComEnterUnit ( Bierezov , dep ) else
15242: LD_EXP 45
15246: PPUSH
15247: LD_VAR 0 4
15251: PPUSH
15252: CALL_OW 180
15256: GO 15267
// AddComHold ( Bierezov ) ;
15258: LD_EXP 45
15262: PPUSH
15263: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
15267: LD_INT 525
15269: PPUSH
15270: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
15274: LD_ADDR_VAR 0 2
15278: PUSH
15279: LD_INT 22
15281: PUSH
15282: LD_INT 4
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PUSH
15289: LD_INT 25
15291: PUSH
15292: LD_INT 2
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PPUSH
15303: CALL_OW 69
15307: PUSH
15308: LD_EXP 45
15312: DIFF
15313: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15314: LD_INT 35
15316: PPUSH
15317: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
15321: LD_ADDR_VAR 0 6
15325: PUSH
15326: LD_INT 10
15328: PPUSH
15329: CALL_OW 435
15333: ST_TO_ADDR
// if crates then
15334: LD_VAR 0 6
15338: IFFALSE 15367
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
15340: LD_VAR 0 2
15344: PPUSH
15345: LD_VAR 0 6
15349: PUSH
15350: LD_INT 1
15352: ARRAY
15353: PPUSH
15354: LD_VAR 0 6
15358: PUSH
15359: LD_INT 2
15361: ARRAY
15362: PPUSH
15363: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
15367: LD_VAR 0 4
15371: PPUSH
15372: CALL_OW 274
15376: PPUSH
15377: LD_INT 1
15379: PPUSH
15380: CALL_OW 275
15384: PUSH
15385: LD_INT 40
15387: GREATEREQUAL
15388: IFFALSE 15314
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
15390: LD_ADDR_VAR 0 5
15394: PUSH
15395: LD_INT 4
15397: PUSH
15398: LD_INT 256
15400: PUSH
15401: LD_INT 111
15403: PUSH
15404: LD_INT 2
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: PUSH
15413: LD_INT 31
15415: PUSH
15416: LD_INT 243
15418: PUSH
15419: LD_INT 112
15421: PUSH
15422: LD_INT 2
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: PUSH
15431: LD_INT 31
15433: PUSH
15434: LD_INT 254
15436: PUSH
15437: LD_INT 114
15439: PUSH
15440: LD_INT 2
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: LIST
15453: ST_TO_ADDR
// for i in blist do
15454: LD_ADDR_VAR 0 1
15458: PUSH
15459: LD_VAR 0 5
15463: PUSH
15464: FOR_IN
15465: IFFALSE 15514
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
15467: LD_VAR 0 2
15471: PPUSH
15472: LD_VAR 0 1
15476: PUSH
15477: LD_INT 1
15479: ARRAY
15480: PPUSH
15481: LD_VAR 0 1
15485: PUSH
15486: LD_INT 2
15488: ARRAY
15489: PPUSH
15490: LD_VAR 0 1
15494: PUSH
15495: LD_INT 3
15497: ARRAY
15498: PPUSH
15499: LD_VAR 0 1
15503: PUSH
15504: LD_INT 4
15506: ARRAY
15507: PPUSH
15508: CALL_OW 205
15512: GO 15464
15514: POP
15515: POP
// repeat wait ( 0 0$01 ) ;
15516: LD_INT 35
15518: PPUSH
15519: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
15523: LD_INT 22
15525: PUSH
15526: LD_INT 4
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: PUSH
15533: LD_INT 30
15535: PUSH
15536: LD_INT 4
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PUSH
15543: LD_INT 3
15545: PUSH
15546: LD_INT 57
15548: PUSH
15549: EMPTY
15550: LIST
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: LIST
15560: PPUSH
15561: CALL_OW 69
15565: IFFALSE 15516
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15567: LD_VAR 0 3
15571: PPUSH
15572: LD_INT 22
15574: PUSH
15575: LD_INT 4
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: LD_INT 30
15584: PUSH
15585: LD_INT 4
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PPUSH
15596: CALL_OW 69
15600: PUSH
15601: LD_INT 1
15603: ARRAY
15604: PPUSH
15605: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
15609: LD_VAR 0 3
15613: PPUSH
15614: LD_INT 1
15616: PPUSH
15617: CALL_OW 183
// if has_eng > 1 then
15621: LD_VAR 0 2
15625: PUSH
15626: LD_INT 1
15628: GREATER
15629: IFFALSE 15771
// for i = has_eng downto 2 do
15631: LD_ADDR_VAR 0 1
15635: PUSH
15636: DOUBLE
15637: LD_VAR 0 2
15641: INC
15642: ST_TO_ADDR
15643: LD_INT 2
15645: PUSH
15646: FOR_DOWNTO
15647: IFFALSE 15769
// begin if IsInUnit ( has_eng [ i ] ) then
15649: LD_VAR 0 2
15653: PUSH
15654: LD_VAR 0 1
15658: ARRAY
15659: PPUSH
15660: CALL_OW 310
15664: IFFALSE 15681
// ComExitBuilding ( has_eng [ i ] ) ;
15666: LD_VAR 0 2
15670: PUSH
15671: LD_VAR 0 1
15675: ARRAY
15676: PPUSH
15677: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15681: LD_VAR 0 2
15685: PUSH
15686: LD_VAR 0 1
15690: ARRAY
15691: PPUSH
15692: LD_INT 22
15694: PUSH
15695: LD_INT 4
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: LD_INT 30
15704: PUSH
15705: LD_INT 4
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PPUSH
15716: CALL_OW 69
15720: PUSH
15721: LD_INT 1
15723: ARRAY
15724: PPUSH
15725: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15729: LD_VAR 0 2
15733: PUSH
15734: LD_VAR 0 1
15738: ARRAY
15739: PPUSH
15740: LD_INT 1
15742: PPUSH
15743: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15747: LD_ADDR_VAR 0 2
15751: PUSH
15752: LD_VAR 0 2
15756: PPUSH
15757: LD_VAR 0 1
15761: PPUSH
15762: CALL_OW 3
15766: ST_TO_ADDR
// end ;
15767: GO 15646
15769: POP
15770: POP
// repeat wait ( 0 0$01 ) ;
15771: LD_INT 35
15773: PPUSH
15774: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15778: LD_INT 22
15780: PUSH
15781: LD_INT 4
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 30
15790: PUSH
15791: LD_INT 31
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PUSH
15798: LD_INT 3
15800: PUSH
15801: LD_INT 57
15803: PUSH
15804: EMPTY
15805: LIST
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: LIST
15815: PPUSH
15816: CALL_OW 69
15820: PUSH
15821: LD_INT 1
15823: GREATER
15824: IFFALSE 15771
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15826: LD_ADDR_VAR 0 8
15830: PUSH
15831: LD_EXP 6
15835: PPUSH
15836: LD_INT 25
15838: PUSH
15839: LD_INT 1
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PPUSH
15846: CALL_OW 72
15850: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15851: LD_ADDR_VAR 0 1
15855: PUSH
15856: DOUBLE
15857: LD_INT 1
15859: DEC
15860: ST_TO_ADDR
15861: LD_INT 22
15863: PUSH
15864: LD_INT 4
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_INT 30
15873: PUSH
15874: LD_INT 31
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 3
15883: PUSH
15884: LD_INT 57
15886: PUSH
15887: EMPTY
15888: LIST
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: LIST
15898: PPUSH
15899: CALL_OW 69
15903: PUSH
15904: FOR_TO
15905: IFFALSE 15989
// begin if not sol [ i ] then
15907: LD_VAR 0 8
15911: PUSH
15912: LD_VAR 0 1
15916: ARRAY
15917: NOT
15918: IFFALSE 15922
// break ;
15920: GO 15989
// ComExitBuilding ( sol [ i ] ) ;
15922: LD_VAR 0 8
15926: PUSH
15927: LD_VAR 0 1
15931: ARRAY
15932: PPUSH
15933: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15937: LD_VAR 0 8
15941: PUSH
15942: LD_VAR 0 1
15946: ARRAY
15947: PPUSH
15948: LD_INT 22
15950: PUSH
15951: LD_INT 4
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: LD_INT 30
15960: PUSH
15961: LD_INT 31
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PPUSH
15972: CALL_OW 69
15976: PUSH
15977: LD_VAR 0 1
15981: ARRAY
15982: PPUSH
15983: CALL_OW 180
// end ;
15987: GO 15904
15989: POP
15990: POP
// if sol > 3 then
15991: LD_VAR 0 8
15995: PUSH
15996: LD_INT 3
15998: GREATER
15999: IFFALSE 16116
// begin ComExitBuilding ( sol [ 3 ] ) ;
16001: LD_VAR 0 8
16005: PUSH
16006: LD_INT 3
16008: ARRAY
16009: PPUSH
16010: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
16014: LD_VAR 0 8
16018: PUSH
16019: LD_INT 3
16021: ARRAY
16022: PPUSH
16023: LD_INT 246
16025: PPUSH
16026: LD_INT 94
16028: PPUSH
16029: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
16033: LD_VAR 0 8
16037: PUSH
16038: LD_INT 3
16040: ARRAY
16041: PPUSH
16042: LD_INT 175
16044: PPUSH
16045: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
16049: LD_VAR 0 8
16053: PUSH
16054: LD_INT 3
16056: ARRAY
16057: PPUSH
16058: LD_INT 224
16060: PPUSH
16061: LD_INT 90
16063: PPUSH
16064: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
16068: LD_VAR 0 8
16072: PUSH
16073: LD_INT 3
16075: ARRAY
16076: PPUSH
16077: LD_INT 245
16079: PPUSH
16080: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
16084: LD_VAR 0 8
16088: PUSH
16089: LD_INT 3
16091: ARRAY
16092: PPUSH
16093: LD_INT 223
16095: PPUSH
16096: LD_INT 110
16098: PPUSH
16099: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
16103: LD_VAR 0 8
16107: PUSH
16108: LD_INT 3
16110: ARRAY
16111: PPUSH
16112: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
16116: LD_VAR 0 2
16120: PPUSH
16121: LD_VAR 0 4
16125: PPUSH
16126: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
16130: LD_INT 22
16132: PUSH
16133: LD_INT 4
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 30
16142: PUSH
16143: LD_INT 4
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PPUSH
16154: CALL_OW 69
16158: PUSH
16159: LD_INT 1
16161: ARRAY
16162: PPUSH
16163: CALL_OW 313
16167: PUSH
16168: LD_INT 6
16170: LESS
16171: IFFALSE 16235
// begin if IsInUnit ( Cornel ) then
16173: LD_EXP 44
16177: PPUSH
16178: CALL_OW 310
16182: IFFALSE 16193
// ComExitBuilding ( Cornel ) ;
16184: LD_EXP 44
16188: PPUSH
16189: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
16193: LD_EXP 44
16197: PPUSH
16198: LD_INT 22
16200: PUSH
16201: LD_INT 4
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 30
16210: PUSH
16211: LD_INT 4
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PPUSH
16222: CALL_OW 69
16226: PUSH
16227: LD_INT 1
16229: ARRAY
16230: PPUSH
16231: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
16235: LD_INT 35
16237: PPUSH
16238: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16242: LD_ADDR_VAR 0 3
16246: PUSH
16247: LD_INT 22
16249: PUSH
16250: LD_INT 4
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 21
16259: PUSH
16260: LD_INT 3
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 3
16269: PUSH
16270: LD_INT 24
16272: PUSH
16273: LD_INT 1000
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: LIST
16288: PPUSH
16289: CALL_OW 69
16293: ST_TO_ADDR
// if filter and has_eng then
16294: LD_VAR 0 3
16298: IFFALSE 16306
16300: PUSH
16301: LD_VAR 0 2
16305: AND
16306: IFFALSE 16372
// begin for i in has_eng do
16308: LD_ADDR_VAR 0 1
16312: PUSH
16313: LD_VAR 0 2
16317: PUSH
16318: FOR_IN
16319: IFFALSE 16368
// begin if IsInUnit ( i ) then
16321: LD_VAR 0 1
16325: PPUSH
16326: CALL_OW 310
16330: IFFALSE 16341
// ComExitBuilding ( i ) ;
16332: LD_VAR 0 1
16336: PPUSH
16337: CALL_OW 122
// Wait ( 3 ) ;
16341: LD_INT 3
16343: PPUSH
16344: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
16348: LD_VAR 0 1
16352: PPUSH
16353: LD_VAR 0 3
16357: PUSH
16358: LD_INT 1
16360: ARRAY
16361: PPUSH
16362: CALL_OW 130
// end ;
16366: GO 16318
16368: POP
16369: POP
// end else
16370: GO 16428
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
16372: LD_VAR 0 2
16376: IFFALSE 16395
16378: PUSH
16379: LD_VAR 0 2
16383: PPUSH
16384: LD_INT 56
16386: PUSH
16387: EMPTY
16388: LIST
16389: PPUSH
16390: CALL_OW 72
16394: AND
16395: IFFALSE 16428
// for i in has_eng do
16397: LD_ADDR_VAR 0 1
16401: PUSH
16402: LD_VAR 0 2
16406: PUSH
16407: FOR_IN
16408: IFFALSE 16426
// ComEnterUnit ( i , dep ) ;
16410: LD_VAR 0 1
16414: PPUSH
16415: LD_VAR 0 4
16419: PPUSH
16420: CALL_OW 120
16424: GO 16407
16426: POP
16427: POP
// until cornel_prepared ;
16428: LD_EXP 11
16432: IFFALSE 16235
// end ;
16434: PPOPN 8
16436: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
16437: LD_EXP 11
16441: IFFALSE 16978
16443: GO 16445
16445: DISABLE
16446: LD_INT 0
16448: PPUSH
16449: PPUSH
16450: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
16451: LD_ADDR_VAR 0 2
16455: PUSH
16456: LD_INT 22
16458: PUSH
16459: LD_INT 4
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 30
16468: PUSH
16469: LD_INT 4
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PPUSH
16480: CALL_OW 69
16484: PUSH
16485: LD_INT 1
16487: ARRAY
16488: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
16489: LD_EXP 6
16493: PPUSH
16494: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
16498: LD_EXP 45
16502: IFFALSE 16515
16504: PUSH
16505: LD_EXP 45
16509: PPUSH
16510: CALL_OW 310
16514: AND
16515: IFFALSE 16526
// ComExitBuilding ( Bierezov ) ;
16517: LD_EXP 45
16521: PPUSH
16522: CALL_OW 122
// Wait ( 0 0$03 ) ;
16526: LD_INT 105
16528: PPUSH
16529: CALL_OW 67
// for i in cornel_units do
16533: LD_ADDR_VAR 0 1
16537: PUSH
16538: LD_EXP 6
16542: PUSH
16543: FOR_IN
16544: IFFALSE 16620
// begin if GetClass ( i ) in [ 2 , 3 ] then
16546: LD_VAR 0 1
16550: PPUSH
16551: CALL_OW 257
16555: PUSH
16556: LD_INT 2
16558: PUSH
16559: LD_INT 3
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: IN
16566: IFFALSE 16603
// begin ComEnterUnit ( i , arm ) ;
16568: LD_VAR 0 1
16572: PPUSH
16573: LD_VAR 0 2
16577: PPUSH
16578: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
16582: LD_VAR 0 1
16586: PPUSH
16587: LD_INT 1
16589: PPUSH
16590: CALL_OW 183
// AddComExitBuilding ( i ) ;
16594: LD_VAR 0 1
16598: PPUSH
16599: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
16603: LD_VAR 0 1
16607: PPUSH
16608: LD_INT 257
16610: PPUSH
16611: LD_INT 121
16613: PPUSH
16614: CALL_OW 171
// end ;
16618: GO 16543
16620: POP
16621: POP
// Wait ( 1 1$00 ) ;
16622: LD_INT 2100
16624: PPUSH
16625: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
16629: LD_ADDR_VAR 0 3
16633: PUSH
16634: LD_EXP 44
16638: PUSH
16639: LD_EXP 45
16643: ADD
16644: PUSH
16645: LD_EXP 6
16649: ADD
16650: PUSH
16651: LD_EXP 6
16655: PPUSH
16656: LD_INT 21
16658: PUSH
16659: LD_INT 2
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PPUSH
16666: CALL_OW 72
16670: DIFF
16671: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
16672: LD_VAR 0 3
16676: PPUSH
16677: LD_INT 248
16679: PPUSH
16680: LD_INT 85
16682: PPUSH
16683: CALL_OW 111
// AddComHold ( filter ) ;
16687: LD_VAR 0 3
16691: PPUSH
16692: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
16696: LD_INT 35
16698: PPUSH
16699: CALL_OW 67
// until cornel_attack ;
16703: LD_EXP 9
16707: IFFALSE 16696
// ComAgressiveMove ( filter , 209 , 63 ) ;
16709: LD_VAR 0 3
16713: PPUSH
16714: LD_INT 209
16716: PPUSH
16717: LD_INT 63
16719: PPUSH
16720: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16724: LD_EXP 44
16728: PPUSH
16729: LD_INT 208
16731: PPUSH
16732: LD_INT 62
16734: PPUSH
16735: CALL_OW 114
// AddComHold ( Cornel ) ;
16739: LD_EXP 44
16743: PPUSH
16744: CALL_OW 200
// if Bierezov then
16748: LD_EXP 45
16752: IFFALSE 16842
// begin filter := filter diff Bierezov ;
16754: LD_ADDR_VAR 0 3
16758: PUSH
16759: LD_VAR 0 3
16763: PUSH
16764: LD_EXP 45
16768: DIFF
16769: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16770: LD_EXP 45
16774: PPUSH
16775: LD_INT 6
16777: PPUSH
16778: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16782: LD_EXP 45
16786: PPUSH
16787: LD_INT 235
16789: PPUSH
16790: LD_INT 60
16792: PPUSH
16793: CALL_OW 111
// AddComHold ( Bierezov ) ;
16797: LD_EXP 45
16801: PPUSH
16802: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16806: LD_EXP 45
16810: PPUSH
16811: LD_INT 350
16813: PPUSH
16814: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16818: LD_EXP 45
16822: PPUSH
16823: LD_INT 198
16825: PPUSH
16826: LD_INT 28
16828: PPUSH
16829: CALL_OW 171
// AddComHold ( Bierezov ) ;
16833: LD_EXP 45
16837: PPUSH
16838: CALL_OW 200
// end ; filter := filter diff Cornel ;
16842: LD_ADDR_VAR 0 3
16846: PUSH
16847: LD_VAR 0 3
16851: PUSH
16852: LD_EXP 44
16856: DIFF
16857: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
16858: LD_INT 70
16860: PPUSH
16861: CALL_OW 67
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16865: LD_EXP 44
16869: PPUSH
16870: LD_INT 208
16872: PPUSH
16873: LD_INT 62
16875: PPUSH
16876: CALL_OW 114
// until not IsInArea ( Cornel , cornelKappaArea ) ;
16880: LD_EXP 44
16884: PPUSH
16885: LD_INT 16
16887: PPUSH
16888: CALL_OW 308
16892: NOT
16893: IFFALSE 16858
// wait ( 0 0$2 ) ;
16895: LD_INT 70
16897: PPUSH
16898: CALL_OW 67
// ComMoveXY ( filter [ 1 ] , 195 , 57 ) ;
16902: LD_VAR 0 3
16906: PUSH
16907: LD_INT 1
16909: ARRAY
16910: PPUSH
16911: LD_INT 195
16913: PPUSH
16914: LD_INT 57
16916: PPUSH
16917: CALL_OW 111
// ComMoveXY ( filter [ 2 ] , 217 , 53 ) ;
16921: LD_VAR 0 3
16925: PUSH
16926: LD_INT 2
16928: ARRAY
16929: PPUSH
16930: LD_INT 217
16932: PPUSH
16933: LD_INT 53
16935: PPUSH
16936: CALL_OW 111
// ComMoveXY ( filter [ 3 ] , 199 , 48 ) ;
16940: LD_VAR 0 3
16944: PUSH
16945: LD_INT 3
16947: ARRAY
16948: PPUSH
16949: LD_INT 199
16951: PPUSH
16952: LD_INT 48
16954: PPUSH
16955: CALL_OW 111
// ComMoveXY ( filter [ 4 ] , 179 , 48 ) ;
16959: LD_VAR 0 3
16963: PUSH
16964: LD_INT 4
16966: ARRAY
16967: PPUSH
16968: LD_INT 179
16970: PPUSH
16971: LD_INT 48
16973: PPUSH
16974: CALL_OW 111
// end ; end_of_file
16978: PPOPN 3
16980: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16981: LD_EXP 53
16985: IFFALSE 16994
16987: PUSH
16988: LD_EXP 31
16992: NOT
16993: AND
16994: IFFALSE 17003
16996: PUSH
16997: LD_EXP 32
17001: NOT
17002: AND
17003: IFFALSE 17459
17005: GO 17007
17007: DISABLE
17008: LD_INT 0
17010: PPUSH
17011: PPUSH
17012: PPUSH
17013: PPUSH
// begin enable ;
17014: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17015: LD_ADDR_VAR 0 4
17019: PUSH
17020: LD_INT 81
17022: PUSH
17023: LD_INT 3
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PPUSH
17030: CALL_OW 69
17034: ST_TO_ADDR
// for i = 1 to ru_patrol do
17035: LD_ADDR_VAR 0 2
17039: PUSH
17040: DOUBLE
17041: LD_INT 1
17043: DEC
17044: ST_TO_ADDR
17045: LD_EXP 53
17049: PUSH
17050: FOR_TO
17051: IFFALSE 17457
// begin un := ru_patrol [ i ] ;
17053: LD_ADDR_VAR 0 1
17057: PUSH
17058: LD_EXP 53
17062: PUSH
17063: LD_VAR 0 2
17067: ARRAY
17068: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17069: LD_VAR 0 1
17073: PPUSH
17074: LD_INT 13
17076: PPUSH
17077: CALL_OW 308
17081: IFFALSE 17186
// begin if not ru_alert then
17083: LD_EXP 60
17087: NOT
17088: IFFALSE 17098
// ru_alert := true ;
17090: LD_ADDR_EXP 60
17094: PUSH
17095: LD_INT 1
17097: ST_TO_ADDR
// if not See ( 1 , un ) then
17098: LD_INT 1
17100: PPUSH
17101: LD_VAR 0 1
17105: PPUSH
17106: CALL_OW 292
17110: NOT
17111: IFFALSE 17125
// SetLives ( un , 1000 ) ;
17113: LD_VAR 0 1
17117: PPUSH
17118: LD_INT 1000
17120: PPUSH
17121: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
17125: LD_ADDR_EXP 53
17129: PUSH
17130: LD_EXP 53
17134: PUSH
17135: LD_VAR 0 1
17139: DIFF
17140: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17141: LD_VAR 0 1
17145: PPUSH
17146: LD_INT 22
17148: PUSH
17149: LD_INT 3
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: LD_INT 30
17158: PUSH
17159: LD_INT 4
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: PPUSH
17170: CALL_OW 69
17174: PPUSH
17175: CALL 1015 0 1
17179: PPUSH
17180: CALL_OW 120
// continue ;
17184: GO 17050
// end ; if IsOk ( un ) and not HasTask ( un ) then
17186: LD_VAR 0 1
17190: PPUSH
17191: CALL_OW 302
17195: IFFALSE 17209
17197: PUSH
17198: LD_VAR 0 1
17202: PPUSH
17203: CALL_OW 314
17207: NOT
17208: AND
17209: IFFALSE 17302
// begin for j = 1 to ru_firepoints_south [ i ] do
17211: LD_ADDR_VAR 0 3
17215: PUSH
17216: DOUBLE
17217: LD_INT 1
17219: DEC
17220: ST_TO_ADDR
17221: LD_EXP 59
17225: PUSH
17226: LD_VAR 0 2
17230: ARRAY
17231: PUSH
17232: FOR_TO
17233: IFFALSE 17300
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
17235: LD_VAR 0 1
17239: PPUSH
17240: LD_EXP 59
17244: PUSH
17245: LD_VAR 0 2
17249: ARRAY
17250: PUSH
17251: LD_VAR 0 3
17255: ARRAY
17256: PUSH
17257: LD_INT 1
17259: ARRAY
17260: PPUSH
17261: LD_EXP 59
17265: PUSH
17266: LD_VAR 0 2
17270: ARRAY
17271: PUSH
17272: LD_VAR 0 3
17276: ARRAY
17277: PUSH
17278: LD_INT 2
17280: ARRAY
17281: PPUSH
17282: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
17286: LD_VAR 0 1
17290: PPUSH
17291: LD_INT 70
17293: PPUSH
17294: CALL_OW 202
// end ;
17298: GO 17232
17300: POP
17301: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17302: LD_VAR 0 1
17306: PPUSH
17307: CALL_OW 256
17311: PUSH
17312: LD_INT 700
17314: LESS
17315: IFFALSE 17332
17317: PUSH
17318: LD_VAR 0 1
17322: PPUSH
17323: LD_INT 13
17325: PPUSH
17326: CALL_OW 308
17330: NOT
17331: AND
17332: IFFALSE 17384
// begin ComMoveToArea ( un , retreatArea ) ;
17334: LD_VAR 0 1
17338: PPUSH
17339: LD_INT 13
17341: PPUSH
17342: CALL_OW 113
// if not ru_alert_xy then
17346: LD_EXP 61
17350: NOT
17351: IFFALSE 17382
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
17353: LD_ADDR_EXP 61
17357: PUSH
17358: LD_VAR 0 1
17362: PPUSH
17363: CALL_OW 250
17367: PUSH
17368: LD_VAR 0 1
17372: PPUSH
17373: CALL_OW 251
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: ST_TO_ADDR
// end else
17382: GO 17455
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17384: LD_VAR 0 1
17388: PPUSH
17389: LD_VAR 0 4
17393: PPUSH
17394: LD_VAR 0 1
17398: PPUSH
17399: CALL_OW 74
17403: PPUSH
17404: CALL_OW 296
17408: PUSH
17409: LD_INT 9
17411: LESS
17412: IFFALSE 17429
17414: PUSH
17415: LD_VAR 0 1
17419: PPUSH
17420: CALL_OW 256
17424: PUSH
17425: LD_INT 500
17427: GREATER
17428: AND
17429: IFFALSE 17455
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17431: LD_VAR 0 1
17435: PPUSH
17436: LD_VAR 0 4
17440: PPUSH
17441: LD_VAR 0 1
17445: PPUSH
17446: CALL_OW 74
17450: PPUSH
17451: CALL_OW 115
// end ;
17455: GO 17050
17457: POP
17458: POP
// end ;
17459: PPOPN 4
17461: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
17462: LD_EXP 60
17466: IFFALSE 17474
17468: PUSH
17469: LD_EXP 61
17473: AND
17474: IFFALSE 17483
17476: PUSH
17477: LD_EXP 31
17481: NOT
17482: AND
17483: IFFALSE 17492
17485: PUSH
17486: LD_EXP 32
17490: NOT
17491: AND
17492: IFFALSE 17708
17494: GO 17496
17496: DISABLE
17497: LD_INT 0
17499: PPUSH
17500: PPUSH
// begin enable ;
17501: ENABLE
// if not ru_vehicles then
17502: LD_EXP 56
17506: NOT
17507: IFFALSE 17511
// exit ;
17509: GO 17708
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17511: LD_ADDR_VAR 0 2
17515: PUSH
17516: LD_INT 81
17518: PUSH
17519: LD_INT 3
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PPUSH
17526: CALL_OW 69
17530: ST_TO_ADDR
// if ru_vehicles then
17531: LD_EXP 56
17535: IFFALSE 17708
// begin for i in ru_vehicles do
17537: LD_ADDR_VAR 0 1
17541: PUSH
17542: LD_EXP 56
17546: PUSH
17547: FOR_IN
17548: IFFALSE 17706
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
17550: LD_VAR 0 1
17554: PPUSH
17555: CALL_OW 302
17559: IFFALSE 17591
17561: PUSH
17562: LD_VAR 0 1
17566: PPUSH
17567: LD_VAR 0 2
17571: PPUSH
17572: LD_VAR 0 1
17576: PPUSH
17577: CALL_OW 74
17581: PPUSH
17582: CALL_OW 296
17586: PUSH
17587: LD_INT 9
17589: LESS
17590: AND
17591: IFFALSE 17617
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17593: LD_VAR 0 1
17597: PPUSH
17598: LD_VAR 0 2
17602: PPUSH
17603: LD_VAR 0 1
17607: PPUSH
17608: CALL_OW 74
17612: PPUSH
17613: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
17617: LD_VAR 0 1
17621: PPUSH
17622: CALL_OW 314
17626: NOT
17627: IFFALSE 17640
17629: PUSH
17630: LD_VAR 0 1
17634: PPUSH
17635: CALL_OW 302
17639: AND
17640: IFFALSE 17675
17642: PUSH
17643: LD_VAR 0 1
17647: PPUSH
17648: LD_EXP 61
17652: PUSH
17653: LD_INT 1
17655: ARRAY
17656: PPUSH
17657: LD_EXP 61
17661: PUSH
17662: LD_INT 2
17664: ARRAY
17665: PPUSH
17666: CALL_OW 297
17670: PUSH
17671: LD_INT 10
17673: GREATER
17674: AND
17675: IFFALSE 17704
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
17677: LD_VAR 0 1
17681: PPUSH
17682: LD_EXP 61
17686: PUSH
17687: LD_INT 1
17689: ARRAY
17690: PPUSH
17691: LD_EXP 61
17695: PUSH
17696: LD_INT 2
17698: ARRAY
17699: PPUSH
17700: CALL_OW 114
// end ;
17704: GO 17547
17706: POP
17707: POP
// end ; end ;
17708: PPOPN 2
17710: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
17711: LD_EXP 61
17715: IFFALSE 17723
17717: PUSH
17718: LD_EXP 60
17722: AND
17723: IFFALSE 17735
17725: PUSH
17726: LD_INT 3
17728: PPUSH
17729: CALL_OW 463
17733: NOT
17734: AND
17735: IFFALSE 17744
17737: PUSH
17738: LD_EXP 31
17742: NOT
17743: AND
17744: IFFALSE 17753
17746: PUSH
17747: LD_EXP 32
17751: NOT
17752: AND
17753: IFFALSE 17850
17755: GO 17757
17757: DISABLE
17758: LD_INT 0
17760: PPUSH
// begin enable ;
17761: ENABLE
// ru_alert_xy := false ;
17762: LD_ADDR_EXP 61
17766: PUSH
17767: LD_INT 0
17769: ST_TO_ADDR
// ru_alert := false ;
17770: LD_ADDR_EXP 60
17774: PUSH
17775: LD_INT 0
17777: ST_TO_ADDR
// if ru_vehicles then
17778: LD_EXP 56
17782: IFFALSE 17850
// for i in ru_vehicles do
17784: LD_ADDR_VAR 0 1
17788: PUSH
17789: LD_EXP 56
17793: PUSH
17794: FOR_IN
17795: IFFALSE 17848
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
17797: LD_VAR 0 1
17801: PPUSH
17802: CALL_OW 302
17806: IFFALSE 17829
17808: PUSH
17809: LD_VAR 0 1
17813: PPUSH
17814: LD_INT 89
17816: PPUSH
17817: LD_INT 36
17819: PPUSH
17820: CALL_OW 297
17824: PUSH
17825: LD_INT 10
17827: GREATER
17828: AND
17829: IFFALSE 17846
// ComMoveXY ( i , 89 , 36 ) ;
17831: LD_VAR 0 1
17835: PPUSH
17836: LD_INT 89
17838: PPUSH
17839: LD_INT 36
17841: PPUSH
17842: CALL_OW 111
17846: GO 17794
17848: POP
17849: POP
// end ;
17850: PPOPN 1
17852: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
17853: LD_EXP 55
17857: IFFALSE 17866
17859: PUSH
17860: LD_EXP 31
17864: NOT
17865: AND
17866: IFFALSE 17875
17868: PUSH
17869: LD_EXP 32
17873: NOT
17874: AND
17875: IFFALSE 18163
17877: GO 17879
17879: DISABLE
17880: LD_INT 0
17882: PPUSH
17883: PPUSH
17884: PPUSH
// begin enable ;
17885: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17886: LD_ADDR_VAR 0 3
17890: PUSH
17891: LD_INT 81
17893: PUSH
17894: LD_INT 3
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PPUSH
17901: CALL_OW 69
17905: ST_TO_ADDR
// for i = 1 to ru_forest do
17906: LD_ADDR_VAR 0 1
17910: PUSH
17911: DOUBLE
17912: LD_INT 1
17914: DEC
17915: ST_TO_ADDR
17916: LD_EXP 55
17920: PUSH
17921: FOR_TO
17922: IFFALSE 18161
// begin un := ru_forest [ i ] ;
17924: LD_ADDR_VAR 0 2
17928: PUSH
17929: LD_EXP 55
17933: PUSH
17934: LD_VAR 0 1
17938: ARRAY
17939: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17940: LD_VAR 0 2
17944: PPUSH
17945: LD_INT 13
17947: PPUSH
17948: CALL_OW 308
17952: IFFALSE 18042
// begin if not See ( 1 , un ) then
17954: LD_INT 1
17956: PPUSH
17957: LD_VAR 0 2
17961: PPUSH
17962: CALL_OW 292
17966: NOT
17967: IFFALSE 17981
// SetLives ( un , 1000 ) ;
17969: LD_VAR 0 2
17973: PPUSH
17974: LD_INT 1000
17976: PPUSH
17977: CALL_OW 234
// ru_forest := ru_forest diff un ;
17981: LD_ADDR_EXP 55
17985: PUSH
17986: LD_EXP 55
17990: PUSH
17991: LD_VAR 0 2
17995: DIFF
17996: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17997: LD_VAR 0 2
18001: PPUSH
18002: LD_INT 22
18004: PUSH
18005: LD_INT 3
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 30
18014: PUSH
18015: LD_INT 4
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PPUSH
18026: CALL_OW 69
18030: PPUSH
18031: CALL 1015 0 1
18035: PPUSH
18036: CALL_OW 120
// continue ;
18040: GO 17921
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
18042: LD_VAR 0 2
18046: PPUSH
18047: CALL_OW 256
18051: PUSH
18052: LD_INT 700
18054: LESS
18055: IFFALSE 18072
18057: PUSH
18058: LD_VAR 0 2
18062: PPUSH
18063: LD_INT 13
18065: PPUSH
18066: CALL_OW 308
18070: NOT
18071: AND
18072: IFFALSE 18088
// ComMoveToArea ( un , retreatArea ) else
18074: LD_VAR 0 2
18078: PPUSH
18079: LD_INT 13
18081: PPUSH
18082: CALL_OW 113
18086: GO 18159
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
18088: LD_VAR 0 2
18092: PPUSH
18093: LD_VAR 0 3
18097: PPUSH
18098: LD_VAR 0 2
18102: PPUSH
18103: CALL_OW 74
18107: PPUSH
18108: CALL_OW 296
18112: PUSH
18113: LD_INT 9
18115: LESS
18116: IFFALSE 18133
18118: PUSH
18119: LD_VAR 0 2
18123: PPUSH
18124: CALL_OW 256
18128: PUSH
18129: LD_INT 500
18131: GREATER
18132: AND
18133: IFFALSE 18159
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
18135: LD_VAR 0 2
18139: PPUSH
18140: LD_VAR 0 3
18144: PPUSH
18145: LD_VAR 0 2
18149: PPUSH
18150: CALL_OW 74
18154: PPUSH
18155: CALL_OW 115
// end ;
18159: GO 17921
18161: POP
18162: POP
// end ;
18163: PPOPN 3
18165: END
// every 0 0$10 trigger not send_attack_on_cornel or IsDead ( Cornel ) do var i , filter ;
18166: LD_EXP 32
18170: NOT
18171: IFTRUE 18184
18173: PUSH
18174: LD_EXP 44
18178: PPUSH
18179: CALL_OW 301
18183: OR
18184: IFFALSE 18345
18186: GO 18188
18188: DISABLE
18189: LD_INT 0
18191: PPUSH
18192: PPUSH
// begin enable ;
18193: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_inarea , ignoreBuildingsArea ] ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 990 ] ] ] ) ;
18194: LD_ADDR_VAR 0 2
18198: PUSH
18199: LD_INT 22
18201: PUSH
18202: LD_INT 3
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 3
18211: PUSH
18212: LD_INT 95
18214: PUSH
18215: LD_INT 18
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 21
18228: PUSH
18229: LD_INT 3
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 3
18238: PUSH
18239: LD_INT 24
18241: PUSH
18242: LD_INT 990
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: PPUSH
18259: CALL_OW 69
18263: ST_TO_ADDR
// if filter then
18264: LD_VAR 0 2
18268: IFFALSE 18345
// for i in filter do
18270: LD_ADDR_VAR 0 1
18274: PUSH
18275: LD_VAR 0 2
18279: PUSH
18280: FOR_IN
18281: IFFALSE 18343
// if GetY ( i ) > 70 then
18283: LD_VAR 0 1
18287: PPUSH
18288: CALL_OW 251
18292: PUSH
18293: LD_INT 70
18295: GREATER
18296: IFFALSE 18302
// continue else
18298: GO 18280
18300: GO 18341
// begin ru_alert := true ;
18302: LD_ADDR_EXP 60
18306: PUSH
18307: LD_INT 1
18309: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
18310: LD_ADDR_EXP 61
18314: PUSH
18315: LD_VAR 0 1
18319: PPUSH
18320: CALL_OW 250
18324: PUSH
18325: LD_VAR 0 1
18329: PPUSH
18330: CALL_OW 251
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: ST_TO_ADDR
// break ;
18339: GO 18343
// end ;
18341: GO 18280
18343: POP
18344: POP
// end ;
18345: PPOPN 2
18347: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
18348: LD_EXP 31
18352: IFFALSE 18505
18354: GO 18356
18356: DISABLE
18357: LD_INT 0
18359: PPUSH
18360: PPUSH
18361: PPUSH
18362: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
18363: LD_ADDR_VAR 0 4
18367: PUSH
18368: LD_EXP 56
18372: PUSH
18373: LD_EXP 55
18377: ADD
18378: PUSH
18379: LD_EXP 53
18383: ADD
18384: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
18385: LD_ADDR_VAR 0 3
18389: PUSH
18390: LD_INT 3
18392: PPUSH
18393: LD_INT 81
18395: PUSH
18396: LD_INT 3
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PPUSH
18403: CALL_OW 70
18407: ST_TO_ADDR
// if filter and enemy then
18408: LD_VAR 0 4
18412: IFFALSE 18420
18414: PUSH
18415: LD_VAR 0 3
18419: AND
18420: IFFALSE 18505
// repeat wait ( 0 0$01 ) ;
18422: LD_INT 35
18424: PPUSH
18425: CALL_OW 67
// for i in filter do
18429: LD_ADDR_VAR 0 1
18433: PUSH
18434: LD_VAR 0 4
18438: PUSH
18439: FOR_IN
18440: IFFALSE 18468
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
18442: LD_VAR 0 1
18446: PPUSH
18447: LD_VAR 0 3
18451: PPUSH
18452: LD_VAR 0 1
18456: PPUSH
18457: CALL_OW 74
18461: PPUSH
18462: CALL_OW 115
// end ;
18466: GO 18439
18468: POP
18469: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
18470: LD_INT 3
18472: PPUSH
18473: LD_INT 81
18475: PUSH
18476: LD_INT 3
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PPUSH
18483: CALL_OW 70
18487: PUSH
18488: LD_INT 0
18490: EQUAL
18491: IFTRUE 18503
18493: PUSH
18494: LD_VAR 0 4
18498: PUSH
18499: LD_INT 0
18501: EQUAL
18502: OR
18503: IFFALSE 18422
// end ;
18505: PPOPN 4
18507: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
18508: LD_EXP 26
18512: IFFALSE 18558
18514: PUSH
18515: LD_INT 22
18517: PUSH
18518: LD_INT 4
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 30
18527: PUSH
18528: LD_INT 4
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 3
18537: PUSH
18538: LD_INT 57
18540: PUSH
18541: EMPTY
18542: LIST
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: LIST
18552: PPUSH
18553: CALL_OW 69
18557: AND
18558: IFFALSE 18607
18560: GO 18562
18562: DISABLE
18563: LD_INT 0
18565: PPUSH
// begin if not ru_cornel_attack then
18566: LD_EXP 58
18570: NOT
18571: IFFALSE 18575
// exit ;
18573: GO 18607
// for i in ru_cornel_attack do
18575: LD_ADDR_VAR 0 1
18579: PUSH
18580: LD_EXP 58
18584: PUSH
18585: FOR_IN
18586: IFFALSE 18605
// ComAgressiveMove ( i , 258 , 119 ) ;
18588: LD_VAR 0 1
18592: PPUSH
18593: LD_INT 258
18595: PPUSH
18596: LD_INT 119
18598: PPUSH
18599: CALL_OW 114
18603: GO 18585
18605: POP
18606: POP
// end ; end_of_file
18607: PPOPN 1
18609: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r , x ;
18610: LD_EXP 5
18614: IFFALSE 18623
18616: PUSH
18617: LD_EXP 9
18621: NOT
18622: AND
18623: IFFALSE 18631
18625: PUSH
18626: LD_EXP 20
18630: AND
18631: IFFALSE 18756
18633: GO 18635
18635: DISABLE
18636: LD_INT 0
18638: PPUSH
18639: PPUSH
// begin enable ;
18640: ENABLE
// x := rand ( 2 , 5 ) ;
18641: LD_ADDR_VAR 0 2
18645: PUSH
18646: LD_INT 2
18648: PPUSH
18649: LD_INT 5
18651: PPUSH
18652: CALL_OW 12
18656: ST_TO_ADDR
// crates_counter := crates_counter - ( x * 10 ) ;
18657: LD_ADDR_EXP 20
18661: PUSH
18662: LD_EXP 20
18666: PUSH
18667: LD_VAR 0 2
18671: PUSH
18672: LD_INT 10
18674: MUL
18675: MINUS
18676: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , x , true ) ;
18677: LD_INT 8
18679: PPUSH
18680: LD_VAR 0 2
18684: PPUSH
18685: LD_INT 1
18687: PPUSH
18688: CALL_OW 55
// wait ( rand ( 0 0$41 , 0 0$57 ) ) ;
18692: LD_INT 1435
18694: PPUSH
18695: LD_INT 1995
18697: PPUSH
18698: CALL_OW 12
18702: PPUSH
18703: CALL_OW 67
// r := rand ( 1 , Difficulty ) ;
18707: LD_ADDR_VAR 0 1
18711: PUSH
18712: LD_INT 1
18714: PPUSH
18715: LD_OWVAR 67
18719: PPUSH
18720: CALL_OW 12
18724: ST_TO_ADDR
// if r < 3 then
18725: LD_VAR 0 1
18729: PUSH
18730: LD_INT 3
18732: LESS
18733: IFFALSE 18756
// CreateCratesArea ( westBaseSpot , rand ( 1 , 5 ) , true ) ;
18735: LD_INT 4
18737: PPUSH
18738: LD_INT 1
18740: PPUSH
18741: LD_INT 5
18743: PPUSH
18744: CALL_OW 12
18748: PPUSH
18749: LD_INT 1
18751: PPUSH
18752: CALL_OW 55
// end ;
18756: PPOPN 2
18758: END
// every 0 0$01 trigger cornel_active do
18759: LD_EXP 8
18763: IFFALSE 18852
18765: GO 18767
18767: DISABLE
// begin Wait ( 0 0$03 ) ;
18768: LD_INT 105
18770: PPUSH
18771: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18775: LD_INT 2
18777: PPUSH
18778: LD_INT 5
18780: PPUSH
18781: CALL_OW 12
18785: PPUSH
18786: LD_INT 10
18788: PPUSH
18789: LD_INT 1
18791: PPUSH
18792: CALL_OW 55
// Wait ( 0 0$13 ) ;
18796: LD_INT 455
18798: PPUSH
18799: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18803: LD_INT 2
18805: PPUSH
18806: LD_INT 5
18808: PPUSH
18809: CALL_OW 12
18813: PPUSH
18814: LD_INT 10
18816: PPUSH
18817: LD_INT 1
18819: PPUSH
18820: CALL_OW 55
// Wait ( 0 0$16 ) ;
18824: LD_INT 560
18826: PPUSH
18827: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18831: LD_INT 2
18833: PPUSH
18834: LD_INT 5
18836: PPUSH
18837: CALL_OW 12
18841: PPUSH
18842: LD_INT 10
18844: PPUSH
18845: LD_INT 1
18847: PPUSH
18848: CALL_OW 55
// end ; end_of_file
18852: END
// every 0 0$01 trigger cornel_prepared do
18853: LD_EXP 11
18857: IFFALSE 18916
18859: GO 18861
18861: DISABLE
// begin enable ;
18862: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
18863: LD_ADDR_OWVAR 47
18867: PUSH
18868: LD_STRING #Am03-1
18870: PUSH
18871: LD_EXP 10
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
18880: LD_ADDR_EXP 10
18884: PUSH
18885: LD_EXP 10
18889: PPUSH
18890: LD_STRING -
18892: PPUSH
18893: CALL 1085 0 2
18897: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
18898: LD_EXP 10
18902: PUSH
18903: LD_INT 0
18905: EQUAL
18906: IFFALSE 18916
// begin Display_Strings := [ ] ;
18908: LD_ADDR_OWVAR 47
18912: PUSH
18913: EMPTY
18914: ST_TO_ADDR
// disable ;
18915: DISABLE
// end ; end ;
18916: END
// every 0 0$01 trigger debug and debug_strings do
18917: LD_EXP 1
18921: IFFALSE 18929
18923: PUSH
18924: LD_OWVAR 48
18928: AND
18929: IFFALSE 18945
18931: GO 18933
18933: DISABLE
// begin enable ;
18934: ENABLE
// Display_Strings := debug_strings ;
18935: LD_ADDR_OWVAR 47
18939: PUSH
18940: LD_OWVAR 48
18944: ST_TO_ADDR
// end ; end_of_file
18945: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
18946: LD_VAR 0 1
18950: PPUSH
18951: LD_VAR 0 2
18955: PPUSH
18956: CALL 35780 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
18960: LD_VAR 0 1
18964: PPUSH
18965: CALL_OW 255
18969: PUSH
18970: LD_INT 1
18972: EQUAL
18973: IFFALSE 18982
18975: PUSH
18976: LD_EXP 14
18980: NOT
18981: AND
18982: IFFALSE 18992
// solar_builded := true ;
18984: LD_ADDR_EXP 14
18988: PUSH
18989: LD_INT 1
18991: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18992: LD_VAR 0 1
18996: PPUSH
18997: CALL_OW 255
19001: PUSH
19002: LD_INT 1
19004: EQUAL
19005: IFFALSE 19013
19007: PUSH
19008: LD_EXP 29
19012: AND
19013: IFFALSE 19050
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
19015: LD_ADDR_EXP 29
19019: PUSH
19020: LD_EXP 29
19024: PUSH
19025: LD_INT 1750
19027: PUSH
19028: LD_INT 1400
19030: PUSH
19031: LD_INT 1225
19033: PUSH
19034: LD_INT 1050
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: PUSH
19043: LD_OWVAR 67
19047: ARRAY
19048: PLUS
19049: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
19050: LD_VAR 0 1
19054: PPUSH
19055: CALL_OW 255
19059: PUSH
19060: LD_INT 3
19062: EQUAL
19063: IFFALSE 19081
// ru_vehicles := ru_vehicles ^ veh ;
19065: LD_ADDR_EXP 56
19069: PUSH
19070: LD_EXP 56
19074: PUSH
19075: LD_VAR 0 1
19079: ADD
19080: ST_TO_ADDR
// end ;
19081: PPOPN 2
19083: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
19084: LD_VAR 0 1
19088: PPUSH
19089: CALL 35722 0 1
// if un in ru_patrol then
19093: LD_VAR 0 1
19097: PUSH
19098: LD_EXP 53
19102: IN
19103: IFFALSE 19121
// ru_patrol := ru_patrol diff un ;
19105: LD_ADDR_EXP 53
19109: PUSH
19110: LD_EXP 53
19114: PUSH
19115: LD_VAR 0 1
19119: DIFF
19120: ST_TO_ADDR
// if un in ru_forest then
19121: LD_VAR 0 1
19125: PUSH
19126: LD_EXP 55
19130: IN
19131: IFFALSE 19149
// ru_forest := ru_forest diff un ;
19133: LD_ADDR_EXP 55
19137: PUSH
19138: LD_EXP 55
19142: PUSH
19143: LD_VAR 0 1
19147: DIFF
19148: ST_TO_ADDR
// if un in ru_vehicles then
19149: LD_VAR 0 1
19153: PUSH
19154: LD_EXP 56
19158: IN
19159: IFFALSE 19265
// begin ru_vehicles := ru_vehicles diff un ;
19161: LD_ADDR_EXP 56
19165: PUSH
19166: LD_EXP 56
19170: PUSH
19171: LD_VAR 0 1
19175: DIFF
19176: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
19177: LD_ADDR_EXP 57
19181: PUSH
19182: LD_EXP 57
19186: PUSH
19187: LD_VAR 0 1
19191: PPUSH
19192: CALL_OW 265
19196: PUSH
19197: LD_VAR 0 1
19201: PPUSH
19202: CALL_OW 262
19206: PUSH
19207: LD_VAR 0 1
19211: PPUSH
19212: CALL_OW 263
19216: PUSH
19217: LD_VAR 0 1
19221: PPUSH
19222: CALL_OW 264
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: ADD
19233: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
19234: LD_ADDR_EXP 13
19238: PUSH
19239: LD_EXP 13
19243: PUSH
19244: LD_INT 1
19246: PLUS
19247: ST_TO_ADDR
// if ach_counter = 10 then
19248: LD_EXP 13
19252: PUSH
19253: LD_INT 10
19255: EQUAL
19256: IFFALSE 19265
// SetAchievement ( ACH_FAUST ) ;
19258: LD_STRING ACH_FAUST
19260: PPUSH
19261: CALL_OW 543
// end ; if un = Pokryshkin then
19265: LD_VAR 0 1
19269: PUSH
19270: LD_EXP 52
19274: EQUAL
19275: IFFALSE 19284
// SetAchievement ( ACH_POKR ) ;
19277: LD_STRING ACH_POKR
19279: PPUSH
19280: CALL_OW 543
// if un = JMM then
19284: LD_VAR 0 1
19288: PUSH
19289: LD_EXP 37
19293: EQUAL
19294: IFFALSE 19303
// YouLost ( 0 ) ;
19296: LD_STRING 0
19298: PPUSH
19299: CALL_OW 104
// if un = us_dep_west then
19303: LD_VAR 0 1
19307: PUSH
19308: LD_INT 1
19310: EQUAL
19311: IFFALSE 19320
// YouLost ( 2 ) ;
19313: LD_STRING 2
19315: PPUSH
19316: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
19320: LD_VAR 0 1
19324: PPUSH
19325: CALL_OW 255
19329: PUSH
19330: LD_INT 8
19332: EQUAL
19333: IFFALSE 19342
19335: PUSH
19336: LD_EXP 5
19340: NOT
19341: AND
19342: IFFALSE 19351
// YouLost ( 4 ) ;
19344: LD_STRING 4
19346: PPUSH
19347: CALL_OW 104
// if un in jmm_units then
19351: LD_VAR 0 1
19355: PUSH
19356: LD_EXP 4
19360: IN
19361: IFFALSE 19377
// lose_counter := lose_counter + 1 ;
19363: LD_ADDR_EXP 34
19367: PUSH
19368: LD_EXP 34
19372: PUSH
19373: LD_INT 1
19375: PLUS
19376: ST_TO_ADDR
// end ;
19377: PPOPN 1
19379: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
19380: LD_INT 0
19382: PPUSH
19383: PPUSH
// begin if GetSide ( driver ) = 3 then
19384: LD_VAR 0 1
19388: PPUSH
19389: CALL_OW 255
19393: PUSH
19394: LD_INT 3
19396: EQUAL
19397: IFFALSE 19475
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
19399: LD_ADDR_VAR 0 6
19403: PUSH
19404: LD_INT 22
19406: PUSH
19407: LD_INT 3
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 30
19416: PUSH
19417: LD_INT 3
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PPUSH
19428: CALL_OW 69
19432: PPUSH
19433: CALL 1015 0 1
19437: ST_TO_ADDR
// if place then
19438: LD_VAR 0 6
19442: IFFALSE 19460
// ComEnterUnit ( driver , place ) else
19444: LD_VAR 0 1
19448: PPUSH
19449: LD_VAR 0 6
19453: PPUSH
19454: CALL_OW 120
19458: GO 19475
// ComMoveXY ( driver , 70 , 22 ) ;
19460: LD_VAR 0 1
19464: PPUSH
19465: LD_INT 70
19467: PPUSH
19468: LD_INT 22
19470: PPUSH
19471: CALL_OW 111
// end ; end ;
19475: PPOPN 6
19477: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
19478: LD_VAR 0 1
19482: PUSH
19483: LD_INT 1
19485: EQUAL
19486: IFFALSE 19519
19488: PUSH
19489: LD_VAR 0 2
19493: PUSH
19494: LD_INT 4
19496: EQUAL
19497: IFTRUE 19518
19499: PUSH
19500: LD_VAR 0 2
19504: PUSH
19505: LD_INT 8
19507: EQUAL
19508: IFFALSE 19517
19510: PUSH
19511: LD_EXP 5
19515: NOT
19516: AND
19517: OR
19518: AND
19519: IFFALSE 19528
// YouLost ( 5 ) ;
19521: LD_STRING 5
19523: PPUSH
19524: CALL_OW 104
// end ;
19528: PPOPN 2
19530: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
19531: LD_EXP 36
19535: PUSH
19536: LD_INT 22
19538: PUSH
19539: LD_INT 1
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 21
19548: PUSH
19549: LD_INT 1
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PPUSH
19560: CALL_OW 69
19564: PUSH
19565: LD_INT 22
19567: PUSH
19568: LD_INT 8
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 21
19577: PUSH
19578: LD_INT 1
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PPUSH
19589: CALL_OW 69
19593: ADD
19594: PLUS
19595: PUSH
19596: LD_INT 5
19598: LESS
19599: IFFALSE 19611
19601: GO 19603
19603: DISABLE
// YouLost ( 1 ) ;
19604: LD_STRING 1
19606: PPUSH
19607: CALL_OW 104
19611: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
19612: LD_INT 1
19614: PPUSH
19615: CALL_OW 255
19619: PUSH
19620: LD_INT 3
19622: EQUAL
19623: IFFALSE 19635
19625: GO 19627
19627: DISABLE
// YouLost ( 3 ) ; end_of_file end_of_file
19628: LD_STRING 3
19630: PPUSH
19631: CALL_OW 104
19635: END
// export globalGameSaveCounter ; every 0 0$1 do
19636: GO 19638
19638: DISABLE
// begin enable ;
19639: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19640: LD_STRING updateTimer(
19642: PUSH
19643: LD_OWVAR 1
19647: STR
19648: PUSH
19649: LD_STRING );
19651: STR
19652: PPUSH
19653: CALL_OW 559
// end ;
19657: END
// every 0 0$1 do
19658: GO 19660
19660: DISABLE
// begin globalGameSaveCounter := 0 ;
19661: LD_ADDR_EXP 62
19665: PUSH
19666: LD_INT 0
19668: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19669: LD_STRING setGameSaveCounter(0)
19671: PPUSH
19672: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19676: LD_STRING initStreamRollete();
19678: PPUSH
19679: CALL_OW 559
// InitStreamMode ;
19683: CALL 21035 0 0
// DefineStreamItems ( false ) ;
19687: LD_INT 0
19689: PPUSH
19690: CALL 21499 0 1
// end ;
19694: END
// export function SOS_MapStart ( ) ; begin
19695: LD_INT 0
19697: PPUSH
// if streamModeActive then
19698: LD_EXP 63
19702: IFFALSE 19711
// DefineStreamItems ( true ) ;
19704: LD_INT 1
19706: PPUSH
19707: CALL 21499 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
19711: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
19713: PPUSH
19714: CALL_OW 559
// UpdateLuaVariables ( ) ;
19718: CALL 19735 0 0
// UpdateFactoryWaypoints ( ) ;
19722: CALL 34621 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19726: CALL 34873 0 0
// end ;
19730: LD_VAR 0 1
19734: RET
// function UpdateLuaVariables ( ) ; begin
19735: LD_INT 0
19737: PPUSH
// if globalGameSaveCounter then
19738: LD_EXP 62
19742: IFFALSE 19776
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19744: LD_ADDR_EXP 62
19748: PUSH
19749: LD_EXP 62
19753: PPUSH
19754: CALL 81769 0 1
19758: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19759: LD_STRING setGameSaveCounter(
19761: PUSH
19762: LD_EXP 62
19766: STR
19767: PUSH
19768: LD_STRING )
19770: STR
19771: PPUSH
19772: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19776: LD_STRING setGameDifficulty(
19778: PUSH
19779: LD_OWVAR 67
19783: STR
19784: PUSH
19785: LD_STRING )
19787: STR
19788: PPUSH
19789: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19793: LD_STRING displayDifficulty(
19795: PUSH
19796: LD_OWVAR 67
19800: STR
19801: PUSH
19802: LD_STRING )
19804: STR
19805: PPUSH
19806: CALL_OW 559
// end ;
19810: LD_VAR 0 1
19814: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19815: LD_INT 0
19817: PPUSH
// if p2 = stream_mode then
19818: LD_VAR 0 2
19822: PUSH
19823: LD_INT 100
19825: EQUAL
19826: IFFALSE 20829
// begin if not StreamModeActive then
19828: LD_EXP 63
19832: NOT
19833: IFFALSE 19843
// StreamModeActive := true ;
19835: LD_ADDR_EXP 63
19839: PUSH
19840: LD_INT 1
19842: ST_TO_ADDR
// if p3 = 0 then
19843: LD_VAR 0 3
19847: PUSH
19848: LD_INT 0
19850: EQUAL
19851: IFFALSE 19857
// InitStreamMode ;
19853: CALL 21035 0 0
// if p3 = 1 then
19857: LD_VAR 0 3
19861: PUSH
19862: LD_INT 1
19864: EQUAL
19865: IFFALSE 19875
// sRocket := true ;
19867: LD_ADDR_EXP 68
19871: PUSH
19872: LD_INT 1
19874: ST_TO_ADDR
// if p3 = 2 then
19875: LD_VAR 0 3
19879: PUSH
19880: LD_INT 2
19882: EQUAL
19883: IFFALSE 19893
// sSpeed := true ;
19885: LD_ADDR_EXP 67
19889: PUSH
19890: LD_INT 1
19892: ST_TO_ADDR
// if p3 = 3 then
19893: LD_VAR 0 3
19897: PUSH
19898: LD_INT 3
19900: EQUAL
19901: IFFALSE 19911
// sEngine := true ;
19903: LD_ADDR_EXP 69
19907: PUSH
19908: LD_INT 1
19910: ST_TO_ADDR
// if p3 = 4 then
19911: LD_VAR 0 3
19915: PUSH
19916: LD_INT 4
19918: EQUAL
19919: IFFALSE 19929
// sSpec := true ;
19921: LD_ADDR_EXP 66
19925: PUSH
19926: LD_INT 1
19928: ST_TO_ADDR
// if p3 = 5 then
19929: LD_VAR 0 3
19933: PUSH
19934: LD_INT 5
19936: EQUAL
19937: IFFALSE 19947
// sLevel := true ;
19939: LD_ADDR_EXP 70
19943: PUSH
19944: LD_INT 1
19946: ST_TO_ADDR
// if p3 = 6 then
19947: LD_VAR 0 3
19951: PUSH
19952: LD_INT 6
19954: EQUAL
19955: IFFALSE 19965
// sArmoury := true ;
19957: LD_ADDR_EXP 71
19961: PUSH
19962: LD_INT 1
19964: ST_TO_ADDR
// if p3 = 7 then
19965: LD_VAR 0 3
19969: PUSH
19970: LD_INT 7
19972: EQUAL
19973: IFFALSE 19983
// sRadar := true ;
19975: LD_ADDR_EXP 72
19979: PUSH
19980: LD_INT 1
19982: ST_TO_ADDR
// if p3 = 8 then
19983: LD_VAR 0 3
19987: PUSH
19988: LD_INT 8
19990: EQUAL
19991: IFFALSE 20001
// sBunker := true ;
19993: LD_ADDR_EXP 73
19997: PUSH
19998: LD_INT 1
20000: ST_TO_ADDR
// if p3 = 9 then
20001: LD_VAR 0 3
20005: PUSH
20006: LD_INT 9
20008: EQUAL
20009: IFFALSE 20019
// sHack := true ;
20011: LD_ADDR_EXP 74
20015: PUSH
20016: LD_INT 1
20018: ST_TO_ADDR
// if p3 = 10 then
20019: LD_VAR 0 3
20023: PUSH
20024: LD_INT 10
20026: EQUAL
20027: IFFALSE 20037
// sFire := true ;
20029: LD_ADDR_EXP 75
20033: PUSH
20034: LD_INT 1
20036: ST_TO_ADDR
// if p3 = 11 then
20037: LD_VAR 0 3
20041: PUSH
20042: LD_INT 11
20044: EQUAL
20045: IFFALSE 20055
// sRefresh := true ;
20047: LD_ADDR_EXP 76
20051: PUSH
20052: LD_INT 1
20054: ST_TO_ADDR
// if p3 = 12 then
20055: LD_VAR 0 3
20059: PUSH
20060: LD_INT 12
20062: EQUAL
20063: IFFALSE 20073
// sExp := true ;
20065: LD_ADDR_EXP 77
20069: PUSH
20070: LD_INT 1
20072: ST_TO_ADDR
// if p3 = 13 then
20073: LD_VAR 0 3
20077: PUSH
20078: LD_INT 13
20080: EQUAL
20081: IFFALSE 20091
// sDepot := true ;
20083: LD_ADDR_EXP 78
20087: PUSH
20088: LD_INT 1
20090: ST_TO_ADDR
// if p3 = 14 then
20091: LD_VAR 0 3
20095: PUSH
20096: LD_INT 14
20098: EQUAL
20099: IFFALSE 20109
// sFlag := true ;
20101: LD_ADDR_EXP 79
20105: PUSH
20106: LD_INT 1
20108: ST_TO_ADDR
// if p3 = 15 then
20109: LD_VAR 0 3
20113: PUSH
20114: LD_INT 15
20116: EQUAL
20117: IFFALSE 20127
// sKamikadze := true ;
20119: LD_ADDR_EXP 87
20123: PUSH
20124: LD_INT 1
20126: ST_TO_ADDR
// if p3 = 16 then
20127: LD_VAR 0 3
20131: PUSH
20132: LD_INT 16
20134: EQUAL
20135: IFFALSE 20145
// sTroll := true ;
20137: LD_ADDR_EXP 88
20141: PUSH
20142: LD_INT 1
20144: ST_TO_ADDR
// if p3 = 17 then
20145: LD_VAR 0 3
20149: PUSH
20150: LD_INT 17
20152: EQUAL
20153: IFFALSE 20163
// sSlow := true ;
20155: LD_ADDR_EXP 89
20159: PUSH
20160: LD_INT 1
20162: ST_TO_ADDR
// if p3 = 18 then
20163: LD_VAR 0 3
20167: PUSH
20168: LD_INT 18
20170: EQUAL
20171: IFFALSE 20181
// sLack := true ;
20173: LD_ADDR_EXP 90
20177: PUSH
20178: LD_INT 1
20180: ST_TO_ADDR
// if p3 = 19 then
20181: LD_VAR 0 3
20185: PUSH
20186: LD_INT 19
20188: EQUAL
20189: IFFALSE 20199
// sTank := true ;
20191: LD_ADDR_EXP 92
20195: PUSH
20196: LD_INT 1
20198: ST_TO_ADDR
// if p3 = 20 then
20199: LD_VAR 0 3
20203: PUSH
20204: LD_INT 20
20206: EQUAL
20207: IFFALSE 20217
// sRemote := true ;
20209: LD_ADDR_EXP 93
20213: PUSH
20214: LD_INT 1
20216: ST_TO_ADDR
// if p3 = 21 then
20217: LD_VAR 0 3
20221: PUSH
20222: LD_INT 21
20224: EQUAL
20225: IFFALSE 20235
// sPowell := true ;
20227: LD_ADDR_EXP 94
20231: PUSH
20232: LD_INT 1
20234: ST_TO_ADDR
// if p3 = 22 then
20235: LD_VAR 0 3
20239: PUSH
20240: LD_INT 22
20242: EQUAL
20243: IFFALSE 20253
// sTeleport := true ;
20245: LD_ADDR_EXP 97
20249: PUSH
20250: LD_INT 1
20252: ST_TO_ADDR
// if p3 = 23 then
20253: LD_VAR 0 3
20257: PUSH
20258: LD_INT 23
20260: EQUAL
20261: IFFALSE 20271
// sOilTower := true ;
20263: LD_ADDR_EXP 99
20267: PUSH
20268: LD_INT 1
20270: ST_TO_ADDR
// if p3 = 24 then
20271: LD_VAR 0 3
20275: PUSH
20276: LD_INT 24
20278: EQUAL
20279: IFFALSE 20289
// sShovel := true ;
20281: LD_ADDR_EXP 100
20285: PUSH
20286: LD_INT 1
20288: ST_TO_ADDR
// if p3 = 25 then
20289: LD_VAR 0 3
20293: PUSH
20294: LD_INT 25
20296: EQUAL
20297: IFFALSE 20307
// sSheik := true ;
20299: LD_ADDR_EXP 101
20303: PUSH
20304: LD_INT 1
20306: ST_TO_ADDR
// if p3 = 26 then
20307: LD_VAR 0 3
20311: PUSH
20312: LD_INT 26
20314: EQUAL
20315: IFFALSE 20325
// sEarthquake := true ;
20317: LD_ADDR_EXP 103
20321: PUSH
20322: LD_INT 1
20324: ST_TO_ADDR
// if p3 = 27 then
20325: LD_VAR 0 3
20329: PUSH
20330: LD_INT 27
20332: EQUAL
20333: IFFALSE 20343
// sAI := true ;
20335: LD_ADDR_EXP 104
20339: PUSH
20340: LD_INT 1
20342: ST_TO_ADDR
// if p3 = 28 then
20343: LD_VAR 0 3
20347: PUSH
20348: LD_INT 28
20350: EQUAL
20351: IFFALSE 20361
// sCargo := true ;
20353: LD_ADDR_EXP 107
20357: PUSH
20358: LD_INT 1
20360: ST_TO_ADDR
// if p3 = 29 then
20361: LD_VAR 0 3
20365: PUSH
20366: LD_INT 29
20368: EQUAL
20369: IFFALSE 20379
// sDLaser := true ;
20371: LD_ADDR_EXP 108
20375: PUSH
20376: LD_INT 1
20378: ST_TO_ADDR
// if p3 = 30 then
20379: LD_VAR 0 3
20383: PUSH
20384: LD_INT 30
20386: EQUAL
20387: IFFALSE 20397
// sExchange := true ;
20389: LD_ADDR_EXP 109
20393: PUSH
20394: LD_INT 1
20396: ST_TO_ADDR
// if p3 = 31 then
20397: LD_VAR 0 3
20401: PUSH
20402: LD_INT 31
20404: EQUAL
20405: IFFALSE 20415
// sFac := true ;
20407: LD_ADDR_EXP 110
20411: PUSH
20412: LD_INT 1
20414: ST_TO_ADDR
// if p3 = 32 then
20415: LD_VAR 0 3
20419: PUSH
20420: LD_INT 32
20422: EQUAL
20423: IFFALSE 20433
// sPower := true ;
20425: LD_ADDR_EXP 111
20429: PUSH
20430: LD_INT 1
20432: ST_TO_ADDR
// if p3 = 33 then
20433: LD_VAR 0 3
20437: PUSH
20438: LD_INT 33
20440: EQUAL
20441: IFFALSE 20451
// sRandom := true ;
20443: LD_ADDR_EXP 112
20447: PUSH
20448: LD_INT 1
20450: ST_TO_ADDR
// if p3 = 34 then
20451: LD_VAR 0 3
20455: PUSH
20456: LD_INT 34
20458: EQUAL
20459: IFFALSE 20469
// sShield := true ;
20461: LD_ADDR_EXP 113
20465: PUSH
20466: LD_INT 1
20468: ST_TO_ADDR
// if p3 = 35 then
20469: LD_VAR 0 3
20473: PUSH
20474: LD_INT 35
20476: EQUAL
20477: IFFALSE 20487
// sTime := true ;
20479: LD_ADDR_EXP 114
20483: PUSH
20484: LD_INT 1
20486: ST_TO_ADDR
// if p3 = 36 then
20487: LD_VAR 0 3
20491: PUSH
20492: LD_INT 36
20494: EQUAL
20495: IFFALSE 20505
// sTools := true ;
20497: LD_ADDR_EXP 115
20501: PUSH
20502: LD_INT 1
20504: ST_TO_ADDR
// if p3 = 101 then
20505: LD_VAR 0 3
20509: PUSH
20510: LD_INT 101
20512: EQUAL
20513: IFFALSE 20523
// sSold := true ;
20515: LD_ADDR_EXP 80
20519: PUSH
20520: LD_INT 1
20522: ST_TO_ADDR
// if p3 = 102 then
20523: LD_VAR 0 3
20527: PUSH
20528: LD_INT 102
20530: EQUAL
20531: IFFALSE 20541
// sDiff := true ;
20533: LD_ADDR_EXP 81
20537: PUSH
20538: LD_INT 1
20540: ST_TO_ADDR
// if p3 = 103 then
20541: LD_VAR 0 3
20545: PUSH
20546: LD_INT 103
20548: EQUAL
20549: IFFALSE 20559
// sFog := true ;
20551: LD_ADDR_EXP 84
20555: PUSH
20556: LD_INT 1
20558: ST_TO_ADDR
// if p3 = 104 then
20559: LD_VAR 0 3
20563: PUSH
20564: LD_INT 104
20566: EQUAL
20567: IFFALSE 20577
// sReset := true ;
20569: LD_ADDR_EXP 85
20573: PUSH
20574: LD_INT 1
20576: ST_TO_ADDR
// if p3 = 105 then
20577: LD_VAR 0 3
20581: PUSH
20582: LD_INT 105
20584: EQUAL
20585: IFFALSE 20595
// sSun := true ;
20587: LD_ADDR_EXP 86
20591: PUSH
20592: LD_INT 1
20594: ST_TO_ADDR
// if p3 = 106 then
20595: LD_VAR 0 3
20599: PUSH
20600: LD_INT 106
20602: EQUAL
20603: IFFALSE 20613
// sTiger := true ;
20605: LD_ADDR_EXP 82
20609: PUSH
20610: LD_INT 1
20612: ST_TO_ADDR
// if p3 = 107 then
20613: LD_VAR 0 3
20617: PUSH
20618: LD_INT 107
20620: EQUAL
20621: IFFALSE 20631
// sBomb := true ;
20623: LD_ADDR_EXP 83
20627: PUSH
20628: LD_INT 1
20630: ST_TO_ADDR
// if p3 = 108 then
20631: LD_VAR 0 3
20635: PUSH
20636: LD_INT 108
20638: EQUAL
20639: IFFALSE 20649
// sWound := true ;
20641: LD_ADDR_EXP 91
20645: PUSH
20646: LD_INT 1
20648: ST_TO_ADDR
// if p3 = 109 then
20649: LD_VAR 0 3
20653: PUSH
20654: LD_INT 109
20656: EQUAL
20657: IFFALSE 20667
// sBetray := true ;
20659: LD_ADDR_EXP 95
20663: PUSH
20664: LD_INT 1
20666: ST_TO_ADDR
// if p3 = 110 then
20667: LD_VAR 0 3
20671: PUSH
20672: LD_INT 110
20674: EQUAL
20675: IFFALSE 20685
// sContamin := true ;
20677: LD_ADDR_EXP 96
20681: PUSH
20682: LD_INT 1
20684: ST_TO_ADDR
// if p3 = 111 then
20685: LD_VAR 0 3
20689: PUSH
20690: LD_INT 111
20692: EQUAL
20693: IFFALSE 20703
// sOil := true ;
20695: LD_ADDR_EXP 98
20699: PUSH
20700: LD_INT 1
20702: ST_TO_ADDR
// if p3 = 112 then
20703: LD_VAR 0 3
20707: PUSH
20708: LD_INT 112
20710: EQUAL
20711: IFFALSE 20721
// sStu := true ;
20713: LD_ADDR_EXP 102
20717: PUSH
20718: LD_INT 1
20720: ST_TO_ADDR
// if p3 = 113 then
20721: LD_VAR 0 3
20725: PUSH
20726: LD_INT 113
20728: EQUAL
20729: IFFALSE 20739
// sBazooka := true ;
20731: LD_ADDR_EXP 105
20735: PUSH
20736: LD_INT 1
20738: ST_TO_ADDR
// if p3 = 114 then
20739: LD_VAR 0 3
20743: PUSH
20744: LD_INT 114
20746: EQUAL
20747: IFFALSE 20757
// sMortar := true ;
20749: LD_ADDR_EXP 106
20753: PUSH
20754: LD_INT 1
20756: ST_TO_ADDR
// if p3 = 115 then
20757: LD_VAR 0 3
20761: PUSH
20762: LD_INT 115
20764: EQUAL
20765: IFFALSE 20775
// sRanger := true ;
20767: LD_ADDR_EXP 116
20771: PUSH
20772: LD_INT 1
20774: ST_TO_ADDR
// if p3 = 116 then
20775: LD_VAR 0 3
20779: PUSH
20780: LD_INT 116
20782: EQUAL
20783: IFFALSE 20793
// sComputer := true ;
20785: LD_ADDR_EXP 117
20789: PUSH
20790: LD_INT 1
20792: ST_TO_ADDR
// if p3 = 117 then
20793: LD_VAR 0 3
20797: PUSH
20798: LD_INT 117
20800: EQUAL
20801: IFFALSE 20811
// s30 := true ;
20803: LD_ADDR_EXP 118
20807: PUSH
20808: LD_INT 1
20810: ST_TO_ADDR
// if p3 = 118 then
20811: LD_VAR 0 3
20815: PUSH
20816: LD_INT 118
20818: EQUAL
20819: IFFALSE 20829
// s60 := true ;
20821: LD_ADDR_EXP 119
20825: PUSH
20826: LD_INT 1
20828: ST_TO_ADDR
// end ; if p2 = hack_mode then
20829: LD_VAR 0 2
20833: PUSH
20834: LD_INT 101
20836: EQUAL
20837: IFFALSE 20965
// begin case p3 of 1 :
20839: LD_VAR 0 3
20843: PUSH
20844: LD_INT 1
20846: DOUBLE
20847: EQUAL
20848: IFTRUE 20852
20850: GO 20859
20852: POP
// hHackUnlimitedResources ; 2 :
20853: CALL 33228 0 0
20857: GO 20965
20859: LD_INT 2
20861: DOUBLE
20862: EQUAL
20863: IFTRUE 20867
20865: GO 20874
20867: POP
// hHackSetLevel10 ; 3 :
20868: CALL 33361 0 0
20872: GO 20965
20874: LD_INT 3
20876: DOUBLE
20877: EQUAL
20878: IFTRUE 20882
20880: GO 20889
20882: POP
// hHackSetLevel10YourUnits ; 4 :
20883: CALL 33446 0 0
20887: GO 20965
20889: LD_INT 4
20891: DOUBLE
20892: EQUAL
20893: IFTRUE 20897
20895: GO 20904
20897: POP
// hHackInvincible ; 5 :
20898: CALL 33894 0 0
20902: GO 20965
20904: LD_INT 5
20906: DOUBLE
20907: EQUAL
20908: IFTRUE 20912
20910: GO 20919
20912: POP
// hHackInvisible ; 6 :
20913: CALL 34005 0 0
20917: GO 20965
20919: LD_INT 6
20921: DOUBLE
20922: EQUAL
20923: IFTRUE 20927
20925: GO 20934
20927: POP
// hHackChangeYourSide ; 7 :
20928: CALL 34062 0 0
20932: GO 20965
20934: LD_INT 7
20936: DOUBLE
20937: EQUAL
20938: IFTRUE 20942
20940: GO 20949
20942: POP
// hHackChangeUnitSide ; 8 :
20943: CALL 34104 0 0
20947: GO 20965
20949: LD_INT 8
20951: DOUBLE
20952: EQUAL
20953: IFTRUE 20957
20955: GO 20964
20957: POP
// hHackFog ; end ;
20958: CALL 34205 0 0
20962: GO 20965
20964: POP
// end ; if p2 = game_save_mode then
20965: LD_VAR 0 2
20969: PUSH
20970: LD_INT 102
20972: EQUAL
20973: IFFALSE 21030
// begin if p3 = 1 then
20975: LD_VAR 0 3
20979: PUSH
20980: LD_INT 1
20982: EQUAL
20983: IFFALSE 20995
// globalGameSaveCounter := p4 ;
20985: LD_ADDR_EXP 62
20989: PUSH
20990: LD_VAR 0 4
20994: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20995: LD_VAR 0 3
20999: PUSH
21000: LD_INT 2
21002: EQUAL
21003: IFFALSE 21011
21005: PUSH
21006: LD_EXP 62
21010: AND
21011: IFFALSE 21030
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21013: LD_STRING setGameSaveCounter(
21015: PUSH
21016: LD_EXP 62
21020: STR
21021: PUSH
21022: LD_STRING )
21024: STR
21025: PPUSH
21026: CALL_OW 559
// end ; end ;
21030: LD_VAR 0 7
21034: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21035: LD_INT 0
21037: PPUSH
// streamModeActive := false ;
21038: LD_ADDR_EXP 63
21042: PUSH
21043: LD_INT 0
21045: ST_TO_ADDR
// normalCounter := 36 ;
21046: LD_ADDR_EXP 64
21050: PUSH
21051: LD_INT 36
21053: ST_TO_ADDR
// hardcoreCounter := 18 ;
21054: LD_ADDR_EXP 65
21058: PUSH
21059: LD_INT 18
21061: ST_TO_ADDR
// sRocket := false ;
21062: LD_ADDR_EXP 68
21066: PUSH
21067: LD_INT 0
21069: ST_TO_ADDR
// sSpeed := false ;
21070: LD_ADDR_EXP 67
21074: PUSH
21075: LD_INT 0
21077: ST_TO_ADDR
// sEngine := false ;
21078: LD_ADDR_EXP 69
21082: PUSH
21083: LD_INT 0
21085: ST_TO_ADDR
// sSpec := false ;
21086: LD_ADDR_EXP 66
21090: PUSH
21091: LD_INT 0
21093: ST_TO_ADDR
// sLevel := false ;
21094: LD_ADDR_EXP 70
21098: PUSH
21099: LD_INT 0
21101: ST_TO_ADDR
// sArmoury := false ;
21102: LD_ADDR_EXP 71
21106: PUSH
21107: LD_INT 0
21109: ST_TO_ADDR
// sRadar := false ;
21110: LD_ADDR_EXP 72
21114: PUSH
21115: LD_INT 0
21117: ST_TO_ADDR
// sBunker := false ;
21118: LD_ADDR_EXP 73
21122: PUSH
21123: LD_INT 0
21125: ST_TO_ADDR
// sHack := false ;
21126: LD_ADDR_EXP 74
21130: PUSH
21131: LD_INT 0
21133: ST_TO_ADDR
// sFire := false ;
21134: LD_ADDR_EXP 75
21138: PUSH
21139: LD_INT 0
21141: ST_TO_ADDR
// sRefresh := false ;
21142: LD_ADDR_EXP 76
21146: PUSH
21147: LD_INT 0
21149: ST_TO_ADDR
// sExp := false ;
21150: LD_ADDR_EXP 77
21154: PUSH
21155: LD_INT 0
21157: ST_TO_ADDR
// sDepot := false ;
21158: LD_ADDR_EXP 78
21162: PUSH
21163: LD_INT 0
21165: ST_TO_ADDR
// sFlag := false ;
21166: LD_ADDR_EXP 79
21170: PUSH
21171: LD_INT 0
21173: ST_TO_ADDR
// sKamikadze := false ;
21174: LD_ADDR_EXP 87
21178: PUSH
21179: LD_INT 0
21181: ST_TO_ADDR
// sTroll := false ;
21182: LD_ADDR_EXP 88
21186: PUSH
21187: LD_INT 0
21189: ST_TO_ADDR
// sSlow := false ;
21190: LD_ADDR_EXP 89
21194: PUSH
21195: LD_INT 0
21197: ST_TO_ADDR
// sLack := false ;
21198: LD_ADDR_EXP 90
21202: PUSH
21203: LD_INT 0
21205: ST_TO_ADDR
// sTank := false ;
21206: LD_ADDR_EXP 92
21210: PUSH
21211: LD_INT 0
21213: ST_TO_ADDR
// sRemote := false ;
21214: LD_ADDR_EXP 93
21218: PUSH
21219: LD_INT 0
21221: ST_TO_ADDR
// sPowell := false ;
21222: LD_ADDR_EXP 94
21226: PUSH
21227: LD_INT 0
21229: ST_TO_ADDR
// sTeleport := false ;
21230: LD_ADDR_EXP 97
21234: PUSH
21235: LD_INT 0
21237: ST_TO_ADDR
// sOilTower := false ;
21238: LD_ADDR_EXP 99
21242: PUSH
21243: LD_INT 0
21245: ST_TO_ADDR
// sShovel := false ;
21246: LD_ADDR_EXP 100
21250: PUSH
21251: LD_INT 0
21253: ST_TO_ADDR
// sSheik := false ;
21254: LD_ADDR_EXP 101
21258: PUSH
21259: LD_INT 0
21261: ST_TO_ADDR
// sEarthquake := false ;
21262: LD_ADDR_EXP 103
21266: PUSH
21267: LD_INT 0
21269: ST_TO_ADDR
// sAI := false ;
21270: LD_ADDR_EXP 104
21274: PUSH
21275: LD_INT 0
21277: ST_TO_ADDR
// sCargo := false ;
21278: LD_ADDR_EXP 107
21282: PUSH
21283: LD_INT 0
21285: ST_TO_ADDR
// sDLaser := false ;
21286: LD_ADDR_EXP 108
21290: PUSH
21291: LD_INT 0
21293: ST_TO_ADDR
// sExchange := false ;
21294: LD_ADDR_EXP 109
21298: PUSH
21299: LD_INT 0
21301: ST_TO_ADDR
// sFac := false ;
21302: LD_ADDR_EXP 110
21306: PUSH
21307: LD_INT 0
21309: ST_TO_ADDR
// sPower := false ;
21310: LD_ADDR_EXP 111
21314: PUSH
21315: LD_INT 0
21317: ST_TO_ADDR
// sRandom := false ;
21318: LD_ADDR_EXP 112
21322: PUSH
21323: LD_INT 0
21325: ST_TO_ADDR
// sShield := false ;
21326: LD_ADDR_EXP 113
21330: PUSH
21331: LD_INT 0
21333: ST_TO_ADDR
// sTime := false ;
21334: LD_ADDR_EXP 114
21338: PUSH
21339: LD_INT 0
21341: ST_TO_ADDR
// sTools := false ;
21342: LD_ADDR_EXP 115
21346: PUSH
21347: LD_INT 0
21349: ST_TO_ADDR
// sSold := false ;
21350: LD_ADDR_EXP 80
21354: PUSH
21355: LD_INT 0
21357: ST_TO_ADDR
// sDiff := false ;
21358: LD_ADDR_EXP 81
21362: PUSH
21363: LD_INT 0
21365: ST_TO_ADDR
// sFog := false ;
21366: LD_ADDR_EXP 84
21370: PUSH
21371: LD_INT 0
21373: ST_TO_ADDR
// sReset := false ;
21374: LD_ADDR_EXP 85
21378: PUSH
21379: LD_INT 0
21381: ST_TO_ADDR
// sSun := false ;
21382: LD_ADDR_EXP 86
21386: PUSH
21387: LD_INT 0
21389: ST_TO_ADDR
// sTiger := false ;
21390: LD_ADDR_EXP 82
21394: PUSH
21395: LD_INT 0
21397: ST_TO_ADDR
// sBomb := false ;
21398: LD_ADDR_EXP 83
21402: PUSH
21403: LD_INT 0
21405: ST_TO_ADDR
// sWound := false ;
21406: LD_ADDR_EXP 91
21410: PUSH
21411: LD_INT 0
21413: ST_TO_ADDR
// sBetray := false ;
21414: LD_ADDR_EXP 95
21418: PUSH
21419: LD_INT 0
21421: ST_TO_ADDR
// sContamin := false ;
21422: LD_ADDR_EXP 96
21426: PUSH
21427: LD_INT 0
21429: ST_TO_ADDR
// sOil := false ;
21430: LD_ADDR_EXP 98
21434: PUSH
21435: LD_INT 0
21437: ST_TO_ADDR
// sStu := false ;
21438: LD_ADDR_EXP 102
21442: PUSH
21443: LD_INT 0
21445: ST_TO_ADDR
// sBazooka := false ;
21446: LD_ADDR_EXP 105
21450: PUSH
21451: LD_INT 0
21453: ST_TO_ADDR
// sMortar := false ;
21454: LD_ADDR_EXP 106
21458: PUSH
21459: LD_INT 0
21461: ST_TO_ADDR
// sRanger := false ;
21462: LD_ADDR_EXP 116
21466: PUSH
21467: LD_INT 0
21469: ST_TO_ADDR
// sComputer := false ;
21470: LD_ADDR_EXP 117
21474: PUSH
21475: LD_INT 0
21477: ST_TO_ADDR
// s30 := false ;
21478: LD_ADDR_EXP 118
21482: PUSH
21483: LD_INT 0
21485: ST_TO_ADDR
// s60 := false ;
21486: LD_ADDR_EXP 119
21490: PUSH
21491: LD_INT 0
21493: ST_TO_ADDR
// end ;
21494: LD_VAR 0 1
21498: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21499: LD_INT 0
21501: PPUSH
21502: PPUSH
21503: PPUSH
21504: PPUSH
21505: PPUSH
21506: PPUSH
21507: PPUSH
// result := [ ] ;
21508: LD_ADDR_VAR 0 2
21512: PUSH
21513: EMPTY
21514: ST_TO_ADDR
// if campaign_id = 1 then
21515: LD_OWVAR 69
21519: PUSH
21520: LD_INT 1
21522: EQUAL
21523: IFFALSE 24689
// begin case mission_number of 1 :
21525: LD_OWVAR 70
21529: PUSH
21530: LD_INT 1
21532: DOUBLE
21533: EQUAL
21534: IFTRUE 21538
21536: GO 21614
21538: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21539: LD_ADDR_VAR 0 2
21543: PUSH
21544: LD_INT 2
21546: PUSH
21547: LD_INT 4
21549: PUSH
21550: LD_INT 11
21552: PUSH
21553: LD_INT 12
21555: PUSH
21556: LD_INT 15
21558: PUSH
21559: LD_INT 16
21561: PUSH
21562: LD_INT 22
21564: PUSH
21565: LD_INT 23
21567: PUSH
21568: LD_INT 26
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 101
21584: PUSH
21585: LD_INT 102
21587: PUSH
21588: LD_INT 106
21590: PUSH
21591: LD_INT 116
21593: PUSH
21594: LD_INT 117
21596: PUSH
21597: LD_INT 118
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: ST_TO_ADDR
21612: GO 24687
21614: LD_INT 2
21616: DOUBLE
21617: EQUAL
21618: IFTRUE 21622
21620: GO 21706
21622: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21623: LD_ADDR_VAR 0 2
21627: PUSH
21628: LD_INT 2
21630: PUSH
21631: LD_INT 4
21633: PUSH
21634: LD_INT 11
21636: PUSH
21637: LD_INT 12
21639: PUSH
21640: LD_INT 15
21642: PUSH
21643: LD_INT 16
21645: PUSH
21646: LD_INT 22
21648: PUSH
21649: LD_INT 23
21651: PUSH
21652: LD_INT 26
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 101
21668: PUSH
21669: LD_INT 102
21671: PUSH
21672: LD_INT 105
21674: PUSH
21675: LD_INT 106
21677: PUSH
21678: LD_INT 108
21680: PUSH
21681: LD_INT 116
21683: PUSH
21684: LD_INT 117
21686: PUSH
21687: LD_INT 118
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: ST_TO_ADDR
21704: GO 24687
21706: LD_INT 3
21708: DOUBLE
21709: EQUAL
21710: IFTRUE 21714
21712: GO 21802
21714: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21715: LD_ADDR_VAR 0 2
21719: PUSH
21720: LD_INT 2
21722: PUSH
21723: LD_INT 4
21725: PUSH
21726: LD_INT 5
21728: PUSH
21729: LD_INT 11
21731: PUSH
21732: LD_INT 12
21734: PUSH
21735: LD_INT 15
21737: PUSH
21738: LD_INT 16
21740: PUSH
21741: LD_INT 22
21743: PUSH
21744: LD_INT 26
21746: PUSH
21747: LD_INT 36
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 101
21764: PUSH
21765: LD_INT 102
21767: PUSH
21768: LD_INT 105
21770: PUSH
21771: LD_INT 106
21773: PUSH
21774: LD_INT 108
21776: PUSH
21777: LD_INT 116
21779: PUSH
21780: LD_INT 117
21782: PUSH
21783: LD_INT 118
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: ST_TO_ADDR
21800: GO 24687
21802: LD_INT 4
21804: DOUBLE
21805: EQUAL
21806: IFTRUE 21810
21808: GO 21906
21810: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21811: LD_ADDR_VAR 0 2
21815: PUSH
21816: LD_INT 2
21818: PUSH
21819: LD_INT 4
21821: PUSH
21822: LD_INT 5
21824: PUSH
21825: LD_INT 8
21827: PUSH
21828: LD_INT 11
21830: PUSH
21831: LD_INT 12
21833: PUSH
21834: LD_INT 15
21836: PUSH
21837: LD_INT 16
21839: PUSH
21840: LD_INT 22
21842: PUSH
21843: LD_INT 23
21845: PUSH
21846: LD_INT 26
21848: PUSH
21849: LD_INT 36
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 101
21868: PUSH
21869: LD_INT 102
21871: PUSH
21872: LD_INT 105
21874: PUSH
21875: LD_INT 106
21877: PUSH
21878: LD_INT 108
21880: PUSH
21881: LD_INT 116
21883: PUSH
21884: LD_INT 117
21886: PUSH
21887: LD_INT 118
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: ST_TO_ADDR
21904: GO 24687
21906: LD_INT 5
21908: DOUBLE
21909: EQUAL
21910: IFTRUE 21914
21912: GO 22026
21914: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21915: LD_ADDR_VAR 0 2
21919: PUSH
21920: LD_INT 2
21922: PUSH
21923: LD_INT 4
21925: PUSH
21926: LD_INT 5
21928: PUSH
21929: LD_INT 6
21931: PUSH
21932: LD_INT 8
21934: PUSH
21935: LD_INT 11
21937: PUSH
21938: LD_INT 12
21940: PUSH
21941: LD_INT 15
21943: PUSH
21944: LD_INT 16
21946: PUSH
21947: LD_INT 22
21949: PUSH
21950: LD_INT 23
21952: PUSH
21953: LD_INT 25
21955: PUSH
21956: LD_INT 26
21958: PUSH
21959: LD_INT 36
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 101
21980: PUSH
21981: LD_INT 102
21983: PUSH
21984: LD_INT 105
21986: PUSH
21987: LD_INT 106
21989: PUSH
21990: LD_INT 108
21992: PUSH
21993: LD_INT 109
21995: PUSH
21996: LD_INT 112
21998: PUSH
21999: LD_INT 116
22001: PUSH
22002: LD_INT 117
22004: PUSH
22005: LD_INT 118
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: ST_TO_ADDR
22024: GO 24687
22026: LD_INT 6
22028: DOUBLE
22029: EQUAL
22030: IFTRUE 22034
22032: GO 22166
22034: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22035: LD_ADDR_VAR 0 2
22039: PUSH
22040: LD_INT 2
22042: PUSH
22043: LD_INT 4
22045: PUSH
22046: LD_INT 5
22048: PUSH
22049: LD_INT 6
22051: PUSH
22052: LD_INT 8
22054: PUSH
22055: LD_INT 11
22057: PUSH
22058: LD_INT 12
22060: PUSH
22061: LD_INT 15
22063: PUSH
22064: LD_INT 16
22066: PUSH
22067: LD_INT 20
22069: PUSH
22070: LD_INT 21
22072: PUSH
22073: LD_INT 22
22075: PUSH
22076: LD_INT 23
22078: PUSH
22079: LD_INT 25
22081: PUSH
22082: LD_INT 26
22084: PUSH
22085: LD_INT 30
22087: PUSH
22088: LD_INT 31
22090: PUSH
22091: LD_INT 32
22093: PUSH
22094: LD_INT 36
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 101
22120: PUSH
22121: LD_INT 102
22123: PUSH
22124: LD_INT 105
22126: PUSH
22127: LD_INT 106
22129: PUSH
22130: LD_INT 108
22132: PUSH
22133: LD_INT 109
22135: PUSH
22136: LD_INT 112
22138: PUSH
22139: LD_INT 116
22141: PUSH
22142: LD_INT 117
22144: PUSH
22145: LD_INT 118
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: ST_TO_ADDR
22164: GO 24687
22166: LD_INT 7
22168: DOUBLE
22169: EQUAL
22170: IFTRUE 22174
22172: GO 22286
22174: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22175: LD_ADDR_VAR 0 2
22179: PUSH
22180: LD_INT 2
22182: PUSH
22183: LD_INT 4
22185: PUSH
22186: LD_INT 5
22188: PUSH
22189: LD_INT 7
22191: PUSH
22192: LD_INT 11
22194: PUSH
22195: LD_INT 12
22197: PUSH
22198: LD_INT 15
22200: PUSH
22201: LD_INT 16
22203: PUSH
22204: LD_INT 20
22206: PUSH
22207: LD_INT 21
22209: PUSH
22210: LD_INT 22
22212: PUSH
22213: LD_INT 23
22215: PUSH
22216: LD_INT 25
22218: PUSH
22219: LD_INT 26
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 101
22240: PUSH
22241: LD_INT 102
22243: PUSH
22244: LD_INT 103
22246: PUSH
22247: LD_INT 105
22249: PUSH
22250: LD_INT 106
22252: PUSH
22253: LD_INT 108
22255: PUSH
22256: LD_INT 112
22258: PUSH
22259: LD_INT 116
22261: PUSH
22262: LD_INT 117
22264: PUSH
22265: LD_INT 118
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: ST_TO_ADDR
22284: GO 24687
22286: LD_INT 8
22288: DOUBLE
22289: EQUAL
22290: IFTRUE 22294
22292: GO 22434
22294: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22295: LD_ADDR_VAR 0 2
22299: PUSH
22300: LD_INT 2
22302: PUSH
22303: LD_INT 4
22305: PUSH
22306: LD_INT 5
22308: PUSH
22309: LD_INT 6
22311: PUSH
22312: LD_INT 7
22314: PUSH
22315: LD_INT 8
22317: PUSH
22318: LD_INT 11
22320: PUSH
22321: LD_INT 12
22323: PUSH
22324: LD_INT 15
22326: PUSH
22327: LD_INT 16
22329: PUSH
22330: LD_INT 20
22332: PUSH
22333: LD_INT 21
22335: PUSH
22336: LD_INT 22
22338: PUSH
22339: LD_INT 23
22341: PUSH
22342: LD_INT 25
22344: PUSH
22345: LD_INT 26
22347: PUSH
22348: LD_INT 30
22350: PUSH
22351: LD_INT 31
22353: PUSH
22354: LD_INT 32
22356: PUSH
22357: LD_INT 36
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 101
22384: PUSH
22385: LD_INT 102
22387: PUSH
22388: LD_INT 103
22390: PUSH
22391: LD_INT 105
22393: PUSH
22394: LD_INT 106
22396: PUSH
22397: LD_INT 108
22399: PUSH
22400: LD_INT 109
22402: PUSH
22403: LD_INT 112
22405: PUSH
22406: LD_INT 116
22408: PUSH
22409: LD_INT 117
22411: PUSH
22412: LD_INT 118
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: ST_TO_ADDR
22432: GO 24687
22434: LD_INT 9
22436: DOUBLE
22437: EQUAL
22438: IFTRUE 22442
22440: GO 22590
22442: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22443: LD_ADDR_VAR 0 2
22447: PUSH
22448: LD_INT 2
22450: PUSH
22451: LD_INT 4
22453: PUSH
22454: LD_INT 5
22456: PUSH
22457: LD_INT 6
22459: PUSH
22460: LD_INT 7
22462: PUSH
22463: LD_INT 8
22465: PUSH
22466: LD_INT 11
22468: PUSH
22469: LD_INT 12
22471: PUSH
22472: LD_INT 15
22474: PUSH
22475: LD_INT 16
22477: PUSH
22478: LD_INT 20
22480: PUSH
22481: LD_INT 21
22483: PUSH
22484: LD_INT 22
22486: PUSH
22487: LD_INT 23
22489: PUSH
22490: LD_INT 25
22492: PUSH
22493: LD_INT 26
22495: PUSH
22496: LD_INT 28
22498: PUSH
22499: LD_INT 30
22501: PUSH
22502: LD_INT 31
22504: PUSH
22505: LD_INT 32
22507: PUSH
22508: LD_INT 36
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 101
22536: PUSH
22537: LD_INT 102
22539: PUSH
22540: LD_INT 103
22542: PUSH
22543: LD_INT 105
22545: PUSH
22546: LD_INT 106
22548: PUSH
22549: LD_INT 108
22551: PUSH
22552: LD_INT 109
22554: PUSH
22555: LD_INT 112
22557: PUSH
22558: LD_INT 114
22560: PUSH
22561: LD_INT 116
22563: PUSH
22564: LD_INT 117
22566: PUSH
22567: LD_INT 118
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: ST_TO_ADDR
22588: GO 24687
22590: LD_INT 10
22592: DOUBLE
22593: EQUAL
22594: IFTRUE 22598
22596: GO 22794
22598: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22599: LD_ADDR_VAR 0 2
22603: PUSH
22604: LD_INT 2
22606: PUSH
22607: LD_INT 4
22609: PUSH
22610: LD_INT 5
22612: PUSH
22613: LD_INT 6
22615: PUSH
22616: LD_INT 7
22618: PUSH
22619: LD_INT 8
22621: PUSH
22622: LD_INT 9
22624: PUSH
22625: LD_INT 10
22627: PUSH
22628: LD_INT 11
22630: PUSH
22631: LD_INT 12
22633: PUSH
22634: LD_INT 13
22636: PUSH
22637: LD_INT 14
22639: PUSH
22640: LD_INT 15
22642: PUSH
22643: LD_INT 16
22645: PUSH
22646: LD_INT 17
22648: PUSH
22649: LD_INT 18
22651: PUSH
22652: LD_INT 19
22654: PUSH
22655: LD_INT 20
22657: PUSH
22658: LD_INT 21
22660: PUSH
22661: LD_INT 22
22663: PUSH
22664: LD_INT 23
22666: PUSH
22667: LD_INT 24
22669: PUSH
22670: LD_INT 25
22672: PUSH
22673: LD_INT 26
22675: PUSH
22676: LD_INT 28
22678: PUSH
22679: LD_INT 30
22681: PUSH
22682: LD_INT 31
22684: PUSH
22685: LD_INT 32
22687: PUSH
22688: LD_INT 36
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 101
22724: PUSH
22725: LD_INT 102
22727: PUSH
22728: LD_INT 103
22730: PUSH
22731: LD_INT 104
22733: PUSH
22734: LD_INT 105
22736: PUSH
22737: LD_INT 106
22739: PUSH
22740: LD_INT 107
22742: PUSH
22743: LD_INT 108
22745: PUSH
22746: LD_INT 109
22748: PUSH
22749: LD_INT 110
22751: PUSH
22752: LD_INT 111
22754: PUSH
22755: LD_INT 112
22757: PUSH
22758: LD_INT 114
22760: PUSH
22761: LD_INT 116
22763: PUSH
22764: LD_INT 117
22766: PUSH
22767: LD_INT 118
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: ST_TO_ADDR
22792: GO 24687
22794: LD_INT 11
22796: DOUBLE
22797: EQUAL
22798: IFTRUE 22802
22800: GO 23006
22802: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22803: LD_ADDR_VAR 0 2
22807: PUSH
22808: LD_INT 2
22810: PUSH
22811: LD_INT 3
22813: PUSH
22814: LD_INT 4
22816: PUSH
22817: LD_INT 5
22819: PUSH
22820: LD_INT 6
22822: PUSH
22823: LD_INT 7
22825: PUSH
22826: LD_INT 8
22828: PUSH
22829: LD_INT 9
22831: PUSH
22832: LD_INT 10
22834: PUSH
22835: LD_INT 11
22837: PUSH
22838: LD_INT 12
22840: PUSH
22841: LD_INT 13
22843: PUSH
22844: LD_INT 14
22846: PUSH
22847: LD_INT 15
22849: PUSH
22850: LD_INT 16
22852: PUSH
22853: LD_INT 17
22855: PUSH
22856: LD_INT 18
22858: PUSH
22859: LD_INT 19
22861: PUSH
22862: LD_INT 20
22864: PUSH
22865: LD_INT 21
22867: PUSH
22868: LD_INT 22
22870: PUSH
22871: LD_INT 23
22873: PUSH
22874: LD_INT 24
22876: PUSH
22877: LD_INT 25
22879: PUSH
22880: LD_INT 26
22882: PUSH
22883: LD_INT 28
22885: PUSH
22886: LD_INT 30
22888: PUSH
22889: LD_INT 31
22891: PUSH
22892: LD_INT 32
22894: PUSH
22895: LD_INT 34
22897: PUSH
22898: LD_INT 36
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 101
22936: PUSH
22937: LD_INT 102
22939: PUSH
22940: LD_INT 103
22942: PUSH
22943: LD_INT 104
22945: PUSH
22946: LD_INT 105
22948: PUSH
22949: LD_INT 106
22951: PUSH
22952: LD_INT 107
22954: PUSH
22955: LD_INT 108
22957: PUSH
22958: LD_INT 109
22960: PUSH
22961: LD_INT 110
22963: PUSH
22964: LD_INT 111
22966: PUSH
22967: LD_INT 112
22969: PUSH
22970: LD_INT 114
22972: PUSH
22973: LD_INT 116
22975: PUSH
22976: LD_INT 117
22978: PUSH
22979: LD_INT 118
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: ST_TO_ADDR
23004: GO 24687
23006: LD_INT 12
23008: DOUBLE
23009: EQUAL
23010: IFTRUE 23014
23012: GO 23234
23014: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23015: LD_ADDR_VAR 0 2
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: LD_INT 2
23025: PUSH
23026: LD_INT 3
23028: PUSH
23029: LD_INT 4
23031: PUSH
23032: LD_INT 5
23034: PUSH
23035: LD_INT 6
23037: PUSH
23038: LD_INT 7
23040: PUSH
23041: LD_INT 8
23043: PUSH
23044: LD_INT 9
23046: PUSH
23047: LD_INT 10
23049: PUSH
23050: LD_INT 11
23052: PUSH
23053: LD_INT 12
23055: PUSH
23056: LD_INT 13
23058: PUSH
23059: LD_INT 14
23061: PUSH
23062: LD_INT 15
23064: PUSH
23065: LD_INT 16
23067: PUSH
23068: LD_INT 17
23070: PUSH
23071: LD_INT 18
23073: PUSH
23074: LD_INT 19
23076: PUSH
23077: LD_INT 20
23079: PUSH
23080: LD_INT 21
23082: PUSH
23083: LD_INT 22
23085: PUSH
23086: LD_INT 23
23088: PUSH
23089: LD_INT 24
23091: PUSH
23092: LD_INT 25
23094: PUSH
23095: LD_INT 26
23097: PUSH
23098: LD_INT 27
23100: PUSH
23101: LD_INT 28
23103: PUSH
23104: LD_INT 30
23106: PUSH
23107: LD_INT 31
23109: PUSH
23110: LD_INT 32
23112: PUSH
23113: LD_INT 33
23115: PUSH
23116: LD_INT 34
23118: PUSH
23119: LD_INT 36
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 101
23160: PUSH
23161: LD_INT 102
23163: PUSH
23164: LD_INT 103
23166: PUSH
23167: LD_INT 104
23169: PUSH
23170: LD_INT 105
23172: PUSH
23173: LD_INT 106
23175: PUSH
23176: LD_INT 107
23178: PUSH
23179: LD_INT 108
23181: PUSH
23182: LD_INT 109
23184: PUSH
23185: LD_INT 110
23187: PUSH
23188: LD_INT 111
23190: PUSH
23191: LD_INT 112
23193: PUSH
23194: LD_INT 113
23196: PUSH
23197: LD_INT 114
23199: PUSH
23200: LD_INT 116
23202: PUSH
23203: LD_INT 117
23205: PUSH
23206: LD_INT 118
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: ST_TO_ADDR
23232: GO 24687
23234: LD_INT 13
23236: DOUBLE
23237: EQUAL
23238: IFTRUE 23242
23240: GO 23450
23242: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23243: LD_ADDR_VAR 0 2
23247: PUSH
23248: LD_INT 1
23250: PUSH
23251: LD_INT 2
23253: PUSH
23254: LD_INT 3
23256: PUSH
23257: LD_INT 4
23259: PUSH
23260: LD_INT 5
23262: PUSH
23263: LD_INT 8
23265: PUSH
23266: LD_INT 9
23268: PUSH
23269: LD_INT 10
23271: PUSH
23272: LD_INT 11
23274: PUSH
23275: LD_INT 12
23277: PUSH
23278: LD_INT 14
23280: PUSH
23281: LD_INT 15
23283: PUSH
23284: LD_INT 16
23286: PUSH
23287: LD_INT 17
23289: PUSH
23290: LD_INT 18
23292: PUSH
23293: LD_INT 19
23295: PUSH
23296: LD_INT 20
23298: PUSH
23299: LD_INT 21
23301: PUSH
23302: LD_INT 22
23304: PUSH
23305: LD_INT 23
23307: PUSH
23308: LD_INT 24
23310: PUSH
23311: LD_INT 25
23313: PUSH
23314: LD_INT 26
23316: PUSH
23317: LD_INT 27
23319: PUSH
23320: LD_INT 28
23322: PUSH
23323: LD_INT 30
23325: PUSH
23326: LD_INT 31
23328: PUSH
23329: LD_INT 32
23331: PUSH
23332: LD_INT 33
23334: PUSH
23335: LD_INT 34
23337: PUSH
23338: LD_INT 36
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 101
23376: PUSH
23377: LD_INT 102
23379: PUSH
23380: LD_INT 103
23382: PUSH
23383: LD_INT 104
23385: PUSH
23386: LD_INT 105
23388: PUSH
23389: LD_INT 106
23391: PUSH
23392: LD_INT 107
23394: PUSH
23395: LD_INT 108
23397: PUSH
23398: LD_INT 109
23400: PUSH
23401: LD_INT 110
23403: PUSH
23404: LD_INT 111
23406: PUSH
23407: LD_INT 112
23409: PUSH
23410: LD_INT 113
23412: PUSH
23413: LD_INT 114
23415: PUSH
23416: LD_INT 116
23418: PUSH
23419: LD_INT 117
23421: PUSH
23422: LD_INT 118
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: ST_TO_ADDR
23448: GO 24687
23450: LD_INT 14
23452: DOUBLE
23453: EQUAL
23454: IFTRUE 23458
23456: GO 23682
23458: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23459: LD_ADDR_VAR 0 2
23463: PUSH
23464: LD_INT 1
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: LD_INT 3
23472: PUSH
23473: LD_INT 4
23475: PUSH
23476: LD_INT 5
23478: PUSH
23479: LD_INT 6
23481: PUSH
23482: LD_INT 7
23484: PUSH
23485: LD_INT 8
23487: PUSH
23488: LD_INT 9
23490: PUSH
23491: LD_INT 10
23493: PUSH
23494: LD_INT 11
23496: PUSH
23497: LD_INT 12
23499: PUSH
23500: LD_INT 13
23502: PUSH
23503: LD_INT 14
23505: PUSH
23506: LD_INT 15
23508: PUSH
23509: LD_INT 16
23511: PUSH
23512: LD_INT 17
23514: PUSH
23515: LD_INT 18
23517: PUSH
23518: LD_INT 19
23520: PUSH
23521: LD_INT 20
23523: PUSH
23524: LD_INT 21
23526: PUSH
23527: LD_INT 22
23529: PUSH
23530: LD_INT 23
23532: PUSH
23533: LD_INT 24
23535: PUSH
23536: LD_INT 25
23538: PUSH
23539: LD_INT 26
23541: PUSH
23542: LD_INT 27
23544: PUSH
23545: LD_INT 28
23547: PUSH
23548: LD_INT 29
23550: PUSH
23551: LD_INT 30
23553: PUSH
23554: LD_INT 31
23556: PUSH
23557: LD_INT 32
23559: PUSH
23560: LD_INT 33
23562: PUSH
23563: LD_INT 34
23565: PUSH
23566: LD_INT 36
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 101
23608: PUSH
23609: LD_INT 102
23611: PUSH
23612: LD_INT 103
23614: PUSH
23615: LD_INT 104
23617: PUSH
23618: LD_INT 105
23620: PUSH
23621: LD_INT 106
23623: PUSH
23624: LD_INT 107
23626: PUSH
23627: LD_INT 108
23629: PUSH
23630: LD_INT 109
23632: PUSH
23633: LD_INT 110
23635: PUSH
23636: LD_INT 111
23638: PUSH
23639: LD_INT 112
23641: PUSH
23642: LD_INT 113
23644: PUSH
23645: LD_INT 114
23647: PUSH
23648: LD_INT 116
23650: PUSH
23651: LD_INT 117
23653: PUSH
23654: LD_INT 118
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: ST_TO_ADDR
23680: GO 24687
23682: LD_INT 15
23684: DOUBLE
23685: EQUAL
23686: IFTRUE 23690
23688: GO 23914
23690: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23691: LD_ADDR_VAR 0 2
23695: PUSH
23696: LD_INT 1
23698: PUSH
23699: LD_INT 2
23701: PUSH
23702: LD_INT 3
23704: PUSH
23705: LD_INT 4
23707: PUSH
23708: LD_INT 5
23710: PUSH
23711: LD_INT 6
23713: PUSH
23714: LD_INT 7
23716: PUSH
23717: LD_INT 8
23719: PUSH
23720: LD_INT 9
23722: PUSH
23723: LD_INT 10
23725: PUSH
23726: LD_INT 11
23728: PUSH
23729: LD_INT 12
23731: PUSH
23732: LD_INT 13
23734: PUSH
23735: LD_INT 14
23737: PUSH
23738: LD_INT 15
23740: PUSH
23741: LD_INT 16
23743: PUSH
23744: LD_INT 17
23746: PUSH
23747: LD_INT 18
23749: PUSH
23750: LD_INT 19
23752: PUSH
23753: LD_INT 20
23755: PUSH
23756: LD_INT 21
23758: PUSH
23759: LD_INT 22
23761: PUSH
23762: LD_INT 23
23764: PUSH
23765: LD_INT 24
23767: PUSH
23768: LD_INT 25
23770: PUSH
23771: LD_INT 26
23773: PUSH
23774: LD_INT 27
23776: PUSH
23777: LD_INT 28
23779: PUSH
23780: LD_INT 29
23782: PUSH
23783: LD_INT 30
23785: PUSH
23786: LD_INT 31
23788: PUSH
23789: LD_INT 32
23791: PUSH
23792: LD_INT 33
23794: PUSH
23795: LD_INT 34
23797: PUSH
23798: LD_INT 36
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 101
23840: PUSH
23841: LD_INT 102
23843: PUSH
23844: LD_INT 103
23846: PUSH
23847: LD_INT 104
23849: PUSH
23850: LD_INT 105
23852: PUSH
23853: LD_INT 106
23855: PUSH
23856: LD_INT 107
23858: PUSH
23859: LD_INT 108
23861: PUSH
23862: LD_INT 109
23864: PUSH
23865: LD_INT 110
23867: PUSH
23868: LD_INT 111
23870: PUSH
23871: LD_INT 112
23873: PUSH
23874: LD_INT 113
23876: PUSH
23877: LD_INT 114
23879: PUSH
23880: LD_INT 116
23882: PUSH
23883: LD_INT 117
23885: PUSH
23886: LD_INT 118
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: ST_TO_ADDR
23912: GO 24687
23914: LD_INT 16
23916: DOUBLE
23917: EQUAL
23918: IFTRUE 23922
23920: GO 24058
23922: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23923: LD_ADDR_VAR 0 2
23927: PUSH
23928: LD_INT 2
23930: PUSH
23931: LD_INT 4
23933: PUSH
23934: LD_INT 5
23936: PUSH
23937: LD_INT 7
23939: PUSH
23940: LD_INT 11
23942: PUSH
23943: LD_INT 12
23945: PUSH
23946: LD_INT 15
23948: PUSH
23949: LD_INT 16
23951: PUSH
23952: LD_INT 20
23954: PUSH
23955: LD_INT 21
23957: PUSH
23958: LD_INT 22
23960: PUSH
23961: LD_INT 23
23963: PUSH
23964: LD_INT 25
23966: PUSH
23967: LD_INT 26
23969: PUSH
23970: LD_INT 30
23972: PUSH
23973: LD_INT 31
23975: PUSH
23976: LD_INT 32
23978: PUSH
23979: LD_INT 33
23981: PUSH
23982: LD_INT 34
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: PUSH
24006: LD_INT 101
24008: PUSH
24009: LD_INT 102
24011: PUSH
24012: LD_INT 103
24014: PUSH
24015: LD_INT 106
24017: PUSH
24018: LD_INT 108
24020: PUSH
24021: LD_INT 112
24023: PUSH
24024: LD_INT 113
24026: PUSH
24027: LD_INT 114
24029: PUSH
24030: LD_INT 116
24032: PUSH
24033: LD_INT 117
24035: PUSH
24036: LD_INT 118
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: ST_TO_ADDR
24056: GO 24687
24058: LD_INT 17
24060: DOUBLE
24061: EQUAL
24062: IFTRUE 24066
24064: GO 24290
24066: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24067: LD_ADDR_VAR 0 2
24071: PUSH
24072: LD_INT 1
24074: PUSH
24075: LD_INT 2
24077: PUSH
24078: LD_INT 3
24080: PUSH
24081: LD_INT 4
24083: PUSH
24084: LD_INT 5
24086: PUSH
24087: LD_INT 6
24089: PUSH
24090: LD_INT 7
24092: PUSH
24093: LD_INT 8
24095: PUSH
24096: LD_INT 9
24098: PUSH
24099: LD_INT 10
24101: PUSH
24102: LD_INT 11
24104: PUSH
24105: LD_INT 12
24107: PUSH
24108: LD_INT 13
24110: PUSH
24111: LD_INT 14
24113: PUSH
24114: LD_INT 15
24116: PUSH
24117: LD_INT 16
24119: PUSH
24120: LD_INT 17
24122: PUSH
24123: LD_INT 18
24125: PUSH
24126: LD_INT 19
24128: PUSH
24129: LD_INT 20
24131: PUSH
24132: LD_INT 21
24134: PUSH
24135: LD_INT 22
24137: PUSH
24138: LD_INT 23
24140: PUSH
24141: LD_INT 24
24143: PUSH
24144: LD_INT 25
24146: PUSH
24147: LD_INT 26
24149: PUSH
24150: LD_INT 27
24152: PUSH
24153: LD_INT 28
24155: PUSH
24156: LD_INT 29
24158: PUSH
24159: LD_INT 30
24161: PUSH
24162: LD_INT 31
24164: PUSH
24165: LD_INT 32
24167: PUSH
24168: LD_INT 33
24170: PUSH
24171: LD_INT 34
24173: PUSH
24174: LD_INT 36
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 101
24216: PUSH
24217: LD_INT 102
24219: PUSH
24220: LD_INT 103
24222: PUSH
24223: LD_INT 104
24225: PUSH
24226: LD_INT 105
24228: PUSH
24229: LD_INT 106
24231: PUSH
24232: LD_INT 107
24234: PUSH
24235: LD_INT 108
24237: PUSH
24238: LD_INT 109
24240: PUSH
24241: LD_INT 110
24243: PUSH
24244: LD_INT 111
24246: PUSH
24247: LD_INT 112
24249: PUSH
24250: LD_INT 113
24252: PUSH
24253: LD_INT 114
24255: PUSH
24256: LD_INT 116
24258: PUSH
24259: LD_INT 117
24261: PUSH
24262: LD_INT 118
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: ST_TO_ADDR
24288: GO 24687
24290: LD_INT 18
24292: DOUBLE
24293: EQUAL
24294: IFTRUE 24298
24296: GO 24446
24298: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24299: LD_ADDR_VAR 0 2
24303: PUSH
24304: LD_INT 2
24306: PUSH
24307: LD_INT 4
24309: PUSH
24310: LD_INT 5
24312: PUSH
24313: LD_INT 7
24315: PUSH
24316: LD_INT 11
24318: PUSH
24319: LD_INT 12
24321: PUSH
24322: LD_INT 15
24324: PUSH
24325: LD_INT 16
24327: PUSH
24328: LD_INT 20
24330: PUSH
24331: LD_INT 21
24333: PUSH
24334: LD_INT 22
24336: PUSH
24337: LD_INT 23
24339: PUSH
24340: LD_INT 25
24342: PUSH
24343: LD_INT 26
24345: PUSH
24346: LD_INT 30
24348: PUSH
24349: LD_INT 31
24351: PUSH
24352: LD_INT 32
24354: PUSH
24355: LD_INT 33
24357: PUSH
24358: LD_INT 34
24360: PUSH
24361: LD_INT 35
24363: PUSH
24364: LD_INT 36
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: PUSH
24390: LD_INT 101
24392: PUSH
24393: LD_INT 102
24395: PUSH
24396: LD_INT 103
24398: PUSH
24399: LD_INT 106
24401: PUSH
24402: LD_INT 108
24404: PUSH
24405: LD_INT 112
24407: PUSH
24408: LD_INT 113
24410: PUSH
24411: LD_INT 114
24413: PUSH
24414: LD_INT 115
24416: PUSH
24417: LD_INT 116
24419: PUSH
24420: LD_INT 117
24422: PUSH
24423: LD_INT 118
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: ST_TO_ADDR
24444: GO 24687
24446: LD_INT 19
24448: DOUBLE
24449: EQUAL
24450: IFTRUE 24454
24452: GO 24686
24454: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24455: LD_ADDR_VAR 0 2
24459: PUSH
24460: LD_INT 1
24462: PUSH
24463: LD_INT 2
24465: PUSH
24466: LD_INT 3
24468: PUSH
24469: LD_INT 4
24471: PUSH
24472: LD_INT 5
24474: PUSH
24475: LD_INT 6
24477: PUSH
24478: LD_INT 7
24480: PUSH
24481: LD_INT 8
24483: PUSH
24484: LD_INT 9
24486: PUSH
24487: LD_INT 10
24489: PUSH
24490: LD_INT 11
24492: PUSH
24493: LD_INT 12
24495: PUSH
24496: LD_INT 13
24498: PUSH
24499: LD_INT 14
24501: PUSH
24502: LD_INT 15
24504: PUSH
24505: LD_INT 16
24507: PUSH
24508: LD_INT 17
24510: PUSH
24511: LD_INT 18
24513: PUSH
24514: LD_INT 19
24516: PUSH
24517: LD_INT 20
24519: PUSH
24520: LD_INT 21
24522: PUSH
24523: LD_INT 22
24525: PUSH
24526: LD_INT 23
24528: PUSH
24529: LD_INT 24
24531: PUSH
24532: LD_INT 25
24534: PUSH
24535: LD_INT 26
24537: PUSH
24538: LD_INT 27
24540: PUSH
24541: LD_INT 28
24543: PUSH
24544: LD_INT 29
24546: PUSH
24547: LD_INT 30
24549: PUSH
24550: LD_INT 31
24552: PUSH
24553: LD_INT 32
24555: PUSH
24556: LD_INT 33
24558: PUSH
24559: LD_INT 34
24561: PUSH
24562: LD_INT 35
24564: PUSH
24565: LD_INT 36
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 101
24608: PUSH
24609: LD_INT 102
24611: PUSH
24612: LD_INT 103
24614: PUSH
24615: LD_INT 104
24617: PUSH
24618: LD_INT 105
24620: PUSH
24621: LD_INT 106
24623: PUSH
24624: LD_INT 107
24626: PUSH
24627: LD_INT 108
24629: PUSH
24630: LD_INT 109
24632: PUSH
24633: LD_INT 110
24635: PUSH
24636: LD_INT 111
24638: PUSH
24639: LD_INT 112
24641: PUSH
24642: LD_INT 113
24644: PUSH
24645: LD_INT 114
24647: PUSH
24648: LD_INT 115
24650: PUSH
24651: LD_INT 116
24653: PUSH
24654: LD_INT 117
24656: PUSH
24657: LD_INT 118
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: ST_TO_ADDR
24684: GO 24687
24686: POP
// end else
24687: GO 24918
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24689: LD_ADDR_VAR 0 2
24693: PUSH
24694: LD_INT 1
24696: PUSH
24697: LD_INT 2
24699: PUSH
24700: LD_INT 3
24702: PUSH
24703: LD_INT 4
24705: PUSH
24706: LD_INT 5
24708: PUSH
24709: LD_INT 6
24711: PUSH
24712: LD_INT 7
24714: PUSH
24715: LD_INT 8
24717: PUSH
24718: LD_INT 9
24720: PUSH
24721: LD_INT 10
24723: PUSH
24724: LD_INT 11
24726: PUSH
24727: LD_INT 12
24729: PUSH
24730: LD_INT 13
24732: PUSH
24733: LD_INT 14
24735: PUSH
24736: LD_INT 15
24738: PUSH
24739: LD_INT 16
24741: PUSH
24742: LD_INT 17
24744: PUSH
24745: LD_INT 18
24747: PUSH
24748: LD_INT 19
24750: PUSH
24751: LD_INT 20
24753: PUSH
24754: LD_INT 21
24756: PUSH
24757: LD_INT 22
24759: PUSH
24760: LD_INT 23
24762: PUSH
24763: LD_INT 24
24765: PUSH
24766: LD_INT 25
24768: PUSH
24769: LD_INT 26
24771: PUSH
24772: LD_INT 27
24774: PUSH
24775: LD_INT 28
24777: PUSH
24778: LD_INT 29
24780: PUSH
24781: LD_INT 30
24783: PUSH
24784: LD_INT 31
24786: PUSH
24787: LD_INT 32
24789: PUSH
24790: LD_INT 33
24792: PUSH
24793: LD_INT 34
24795: PUSH
24796: LD_INT 35
24798: PUSH
24799: LD_INT 36
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 101
24842: PUSH
24843: LD_INT 102
24845: PUSH
24846: LD_INT 103
24848: PUSH
24849: LD_INT 104
24851: PUSH
24852: LD_INT 105
24854: PUSH
24855: LD_INT 106
24857: PUSH
24858: LD_INT 107
24860: PUSH
24861: LD_INT 108
24863: PUSH
24864: LD_INT 109
24866: PUSH
24867: LD_INT 110
24869: PUSH
24870: LD_INT 111
24872: PUSH
24873: LD_INT 112
24875: PUSH
24876: LD_INT 113
24878: PUSH
24879: LD_INT 114
24881: PUSH
24882: LD_INT 115
24884: PUSH
24885: LD_INT 116
24887: PUSH
24888: LD_INT 117
24890: PUSH
24891: LD_INT 118
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: ST_TO_ADDR
// if result then
24918: LD_VAR 0 2
24922: IFFALSE 25708
// begin normal :=  ;
24924: LD_ADDR_VAR 0 5
24928: PUSH
24929: LD_STRING 
24931: ST_TO_ADDR
// hardcore :=  ;
24932: LD_ADDR_VAR 0 6
24936: PUSH
24937: LD_STRING 
24939: ST_TO_ADDR
// active :=  ;
24940: LD_ADDR_VAR 0 7
24944: PUSH
24945: LD_STRING 
24947: ST_TO_ADDR
// for i = 1 to normalCounter do
24948: LD_ADDR_VAR 0 8
24952: PUSH
24953: DOUBLE
24954: LD_INT 1
24956: DEC
24957: ST_TO_ADDR
24958: LD_EXP 64
24962: PUSH
24963: FOR_TO
24964: IFFALSE 25065
// begin tmp := 0 ;
24966: LD_ADDR_VAR 0 3
24970: PUSH
24971: LD_STRING 0
24973: ST_TO_ADDR
// if result [ 1 ] then
24974: LD_VAR 0 2
24978: PUSH
24979: LD_INT 1
24981: ARRAY
24982: IFFALSE 25047
// if result [ 1 ] [ 1 ] = i then
24984: LD_VAR 0 2
24988: PUSH
24989: LD_INT 1
24991: ARRAY
24992: PUSH
24993: LD_INT 1
24995: ARRAY
24996: PUSH
24997: LD_VAR 0 8
25001: EQUAL
25002: IFFALSE 25047
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25004: LD_ADDR_VAR 0 2
25008: PUSH
25009: LD_VAR 0 2
25013: PPUSH
25014: LD_INT 1
25016: PPUSH
25017: LD_VAR 0 2
25021: PUSH
25022: LD_INT 1
25024: ARRAY
25025: PPUSH
25026: LD_INT 1
25028: PPUSH
25029: CALL_OW 3
25033: PPUSH
25034: CALL_OW 1
25038: ST_TO_ADDR
// tmp := 1 ;
25039: LD_ADDR_VAR 0 3
25043: PUSH
25044: LD_STRING 1
25046: ST_TO_ADDR
// end ; normal := normal & tmp ;
25047: LD_ADDR_VAR 0 5
25051: PUSH
25052: LD_VAR 0 5
25056: PUSH
25057: LD_VAR 0 3
25061: STR
25062: ST_TO_ADDR
// end ;
25063: GO 24963
25065: POP
25066: POP
// for i = 1 to hardcoreCounter do
25067: LD_ADDR_VAR 0 8
25071: PUSH
25072: DOUBLE
25073: LD_INT 1
25075: DEC
25076: ST_TO_ADDR
25077: LD_EXP 65
25081: PUSH
25082: FOR_TO
25083: IFFALSE 25188
// begin tmp := 0 ;
25085: LD_ADDR_VAR 0 3
25089: PUSH
25090: LD_STRING 0
25092: ST_TO_ADDR
// if result [ 2 ] then
25093: LD_VAR 0 2
25097: PUSH
25098: LD_INT 2
25100: ARRAY
25101: IFFALSE 25170
// if result [ 2 ] [ 1 ] = 100 + i then
25103: LD_VAR 0 2
25107: PUSH
25108: LD_INT 2
25110: ARRAY
25111: PUSH
25112: LD_INT 1
25114: ARRAY
25115: PUSH
25116: LD_INT 100
25118: PUSH
25119: LD_VAR 0 8
25123: PLUS
25124: EQUAL
25125: IFFALSE 25170
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25127: LD_ADDR_VAR 0 2
25131: PUSH
25132: LD_VAR 0 2
25136: PPUSH
25137: LD_INT 2
25139: PPUSH
25140: LD_VAR 0 2
25144: PUSH
25145: LD_INT 2
25147: ARRAY
25148: PPUSH
25149: LD_INT 1
25151: PPUSH
25152: CALL_OW 3
25156: PPUSH
25157: CALL_OW 1
25161: ST_TO_ADDR
// tmp := 1 ;
25162: LD_ADDR_VAR 0 3
25166: PUSH
25167: LD_STRING 1
25169: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25170: LD_ADDR_VAR 0 6
25174: PUSH
25175: LD_VAR 0 6
25179: PUSH
25180: LD_VAR 0 3
25184: STR
25185: ST_TO_ADDR
// end ;
25186: GO 25082
25188: POP
25189: POP
// if isGameLoad then
25190: LD_VAR 0 1
25194: IFFALSE 25669
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25196: LD_ADDR_VAR 0 4
25200: PUSH
25201: LD_EXP 68
25205: PUSH
25206: LD_EXP 67
25210: PUSH
25211: LD_EXP 69
25215: PUSH
25216: LD_EXP 66
25220: PUSH
25221: LD_EXP 70
25225: PUSH
25226: LD_EXP 71
25230: PUSH
25231: LD_EXP 72
25235: PUSH
25236: LD_EXP 73
25240: PUSH
25241: LD_EXP 74
25245: PUSH
25246: LD_EXP 75
25250: PUSH
25251: LD_EXP 76
25255: PUSH
25256: LD_EXP 77
25260: PUSH
25261: LD_EXP 78
25265: PUSH
25266: LD_EXP 79
25270: PUSH
25271: LD_EXP 87
25275: PUSH
25276: LD_EXP 88
25280: PUSH
25281: LD_EXP 89
25285: PUSH
25286: LD_EXP 90
25290: PUSH
25291: LD_EXP 92
25295: PUSH
25296: LD_EXP 93
25300: PUSH
25301: LD_EXP 94
25305: PUSH
25306: LD_EXP 97
25310: PUSH
25311: LD_EXP 99
25315: PUSH
25316: LD_EXP 100
25320: PUSH
25321: LD_EXP 101
25325: PUSH
25326: LD_EXP 103
25330: PUSH
25331: LD_EXP 104
25335: PUSH
25336: LD_EXP 107
25340: PUSH
25341: LD_EXP 108
25345: PUSH
25346: LD_EXP 109
25350: PUSH
25351: LD_EXP 110
25355: PUSH
25356: LD_EXP 111
25360: PUSH
25361: LD_EXP 112
25365: PUSH
25366: LD_EXP 113
25370: PUSH
25371: LD_EXP 114
25375: PUSH
25376: LD_EXP 115
25380: PUSH
25381: LD_EXP 80
25385: PUSH
25386: LD_EXP 81
25390: PUSH
25391: LD_EXP 84
25395: PUSH
25396: LD_EXP 85
25400: PUSH
25401: LD_EXP 86
25405: PUSH
25406: LD_EXP 82
25410: PUSH
25411: LD_EXP 83
25415: PUSH
25416: LD_EXP 91
25420: PUSH
25421: LD_EXP 95
25425: PUSH
25426: LD_EXP 96
25430: PUSH
25431: LD_EXP 98
25435: PUSH
25436: LD_EXP 102
25440: PUSH
25441: LD_EXP 105
25445: PUSH
25446: LD_EXP 106
25450: PUSH
25451: LD_EXP 116
25455: PUSH
25456: LD_EXP 117
25460: PUSH
25461: LD_EXP 118
25465: PUSH
25466: LD_EXP 119
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: ST_TO_ADDR
// tmp :=  ;
25527: LD_ADDR_VAR 0 3
25531: PUSH
25532: LD_STRING 
25534: ST_TO_ADDR
// for i = 1 to normalCounter do
25535: LD_ADDR_VAR 0 8
25539: PUSH
25540: DOUBLE
25541: LD_INT 1
25543: DEC
25544: ST_TO_ADDR
25545: LD_EXP 64
25549: PUSH
25550: FOR_TO
25551: IFFALSE 25587
// begin if flags [ i ] then
25553: LD_VAR 0 4
25557: PUSH
25558: LD_VAR 0 8
25562: ARRAY
25563: IFFALSE 25585
// tmp := tmp & i & ; ;
25565: LD_ADDR_VAR 0 3
25569: PUSH
25570: LD_VAR 0 3
25574: PUSH
25575: LD_VAR 0 8
25579: STR
25580: PUSH
25581: LD_STRING ;
25583: STR
25584: ST_TO_ADDR
// end ;
25585: GO 25550
25587: POP
25588: POP
// for i = 1 to hardcoreCounter do
25589: LD_ADDR_VAR 0 8
25593: PUSH
25594: DOUBLE
25595: LD_INT 1
25597: DEC
25598: ST_TO_ADDR
25599: LD_EXP 65
25603: PUSH
25604: FOR_TO
25605: IFFALSE 25651
// begin if flags [ normalCounter + i ] then
25607: LD_VAR 0 4
25611: PUSH
25612: LD_EXP 64
25616: PUSH
25617: LD_VAR 0 8
25621: PLUS
25622: ARRAY
25623: IFFALSE 25649
// tmp := tmp & ( 100 + i ) & ; ;
25625: LD_ADDR_VAR 0 3
25629: PUSH
25630: LD_VAR 0 3
25634: PUSH
25635: LD_INT 100
25637: PUSH
25638: LD_VAR 0 8
25642: PLUS
25643: STR
25644: PUSH
25645: LD_STRING ;
25647: STR
25648: ST_TO_ADDR
// end ;
25649: GO 25604
25651: POP
25652: POP
// if tmp then
25653: LD_VAR 0 3
25657: IFFALSE 25669
// active := tmp ;
25659: LD_ADDR_VAR 0 7
25663: PUSH
25664: LD_VAR 0 3
25668: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25669: LD_STRING getStreamItemsFromMission("
25671: PUSH
25672: LD_VAR 0 5
25676: STR
25677: PUSH
25678: LD_STRING ","
25680: STR
25681: PUSH
25682: LD_VAR 0 6
25686: STR
25687: PUSH
25688: LD_STRING ","
25690: STR
25691: PUSH
25692: LD_VAR 0 7
25696: STR
25697: PUSH
25698: LD_STRING ")
25700: STR
25701: PPUSH
25702: CALL_OW 559
// end else
25706: GO 25715
// ToLua ( getStreamItemsFromMission("","","") ) ;
25708: LD_STRING getStreamItemsFromMission("","","")
25710: PPUSH
25711: CALL_OW 559
// end ;
25715: LD_VAR 0 2
25719: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25720: LD_EXP 63
25724: IFFALSE 25732
25726: PUSH
25727: LD_EXP 68
25731: AND
25732: IFFALSE 25856
25734: GO 25736
25736: DISABLE
25737: LD_INT 0
25739: PPUSH
25740: PPUSH
// begin enable ;
25741: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25742: LD_ADDR_VAR 0 2
25746: PUSH
25747: LD_INT 22
25749: PUSH
25750: LD_OWVAR 2
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 2
25761: PUSH
25762: LD_INT 34
25764: PUSH
25765: LD_INT 7
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 34
25774: PUSH
25775: LD_INT 45
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 34
25784: PUSH
25785: LD_INT 28
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 34
25794: PUSH
25795: LD_INT 47
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PPUSH
25813: CALL_OW 69
25817: ST_TO_ADDR
// if not tmp then
25818: LD_VAR 0 2
25822: NOT
25823: IFFALSE 25827
// exit ;
25825: GO 25856
// for i in tmp do
25827: LD_ADDR_VAR 0 1
25831: PUSH
25832: LD_VAR 0 2
25836: PUSH
25837: FOR_IN
25838: IFFALSE 25854
// begin SetLives ( i , 0 ) ;
25840: LD_VAR 0 1
25844: PPUSH
25845: LD_INT 0
25847: PPUSH
25848: CALL_OW 234
// end ;
25852: GO 25837
25854: POP
25855: POP
// end ;
25856: PPOPN 2
25858: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25859: LD_EXP 63
25863: IFFALSE 25871
25865: PUSH
25866: LD_EXP 69
25870: AND
25871: IFFALSE 25955
25873: GO 25875
25875: DISABLE
25876: LD_INT 0
25878: PPUSH
25879: PPUSH
// begin enable ;
25880: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25881: LD_ADDR_VAR 0 2
25885: PUSH
25886: LD_INT 22
25888: PUSH
25889: LD_OWVAR 2
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 32
25900: PUSH
25901: LD_INT 3
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PPUSH
25912: CALL_OW 69
25916: ST_TO_ADDR
// if not tmp then
25917: LD_VAR 0 2
25921: NOT
25922: IFFALSE 25926
// exit ;
25924: GO 25955
// for i in tmp do
25926: LD_ADDR_VAR 0 1
25930: PUSH
25931: LD_VAR 0 2
25935: PUSH
25936: FOR_IN
25937: IFFALSE 25953
// begin SetLives ( i , 0 ) ;
25939: LD_VAR 0 1
25943: PPUSH
25944: LD_INT 0
25946: PPUSH
25947: CALL_OW 234
// end ;
25951: GO 25936
25953: POP
25954: POP
// end ;
25955: PPOPN 2
25957: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25958: LD_EXP 63
25962: IFFALSE 25970
25964: PUSH
25965: LD_EXP 66
25969: AND
25970: IFFALSE 26063
25972: GO 25974
25974: DISABLE
25975: LD_INT 0
25977: PPUSH
// begin enable ;
25978: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25979: LD_ADDR_VAR 0 1
25983: PUSH
25984: LD_INT 22
25986: PUSH
25987: LD_OWVAR 2
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 2
25998: PUSH
25999: LD_INT 25
26001: PUSH
26002: LD_INT 5
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 25
26011: PUSH
26012: LD_INT 9
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 25
26021: PUSH
26022: LD_INT 8
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PPUSH
26039: CALL_OW 69
26043: PUSH
26044: FOR_IN
26045: IFFALSE 26061
// begin SetClass ( i , 1 ) ;
26047: LD_VAR 0 1
26051: PPUSH
26052: LD_INT 1
26054: PPUSH
26055: CALL_OW 336
// end ;
26059: GO 26044
26061: POP
26062: POP
// end ;
26063: PPOPN 1
26065: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26066: LD_EXP 63
26070: IFFALSE 26078
26072: PUSH
26073: LD_EXP 67
26077: AND
26078: IFFALSE 26090
26080: PUSH
26081: LD_OWVAR 65
26085: PUSH
26086: LD_INT 7
26088: LESS
26089: AND
26090: IFFALSE 26104
26092: GO 26094
26094: DISABLE
// begin enable ;
26095: ENABLE
// game_speed := 7 ;
26096: LD_ADDR_OWVAR 65
26100: PUSH
26101: LD_INT 7
26103: ST_TO_ADDR
// end ;
26104: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26105: LD_EXP 63
26109: IFFALSE 26117
26111: PUSH
26112: LD_EXP 70
26116: AND
26117: IFFALSE 26319
26119: GO 26121
26121: DISABLE
26122: LD_INT 0
26124: PPUSH
26125: PPUSH
26126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26127: LD_ADDR_VAR 0 3
26131: PUSH
26132: LD_INT 81
26134: PUSH
26135: LD_OWVAR 2
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 21
26146: PUSH
26147: LD_INT 1
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PPUSH
26158: CALL_OW 69
26162: ST_TO_ADDR
// if not tmp then
26163: LD_VAR 0 3
26167: NOT
26168: IFFALSE 26172
// exit ;
26170: GO 26319
// if tmp > 5 then
26172: LD_VAR 0 3
26176: PUSH
26177: LD_INT 5
26179: GREATER
26180: IFFALSE 26192
// k := 5 else
26182: LD_ADDR_VAR 0 2
26186: PUSH
26187: LD_INT 5
26189: ST_TO_ADDR
26190: GO 26202
// k := tmp ;
26192: LD_ADDR_VAR 0 2
26196: PUSH
26197: LD_VAR 0 3
26201: ST_TO_ADDR
// for i := 1 to k do
26202: LD_ADDR_VAR 0 1
26206: PUSH
26207: DOUBLE
26208: LD_INT 1
26210: DEC
26211: ST_TO_ADDR
26212: LD_VAR 0 2
26216: PUSH
26217: FOR_TO
26218: IFFALSE 26317
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26220: LD_VAR 0 3
26224: PUSH
26225: LD_VAR 0 1
26229: ARRAY
26230: PPUSH
26231: LD_VAR 0 1
26235: PUSH
26236: LD_INT 4
26238: MOD
26239: PUSH
26240: LD_INT 1
26242: PLUS
26243: PPUSH
26244: CALL_OW 259
26248: PUSH
26249: LD_INT 10
26251: LESS
26252: IFFALSE 26315
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26254: LD_VAR 0 3
26258: PUSH
26259: LD_VAR 0 1
26263: ARRAY
26264: PPUSH
26265: LD_VAR 0 1
26269: PUSH
26270: LD_INT 4
26272: MOD
26273: PUSH
26274: LD_INT 1
26276: PLUS
26277: PPUSH
26278: LD_VAR 0 3
26282: PUSH
26283: LD_VAR 0 1
26287: ARRAY
26288: PPUSH
26289: LD_VAR 0 1
26293: PUSH
26294: LD_INT 4
26296: MOD
26297: PUSH
26298: LD_INT 1
26300: PLUS
26301: PPUSH
26302: CALL_OW 259
26306: PUSH
26307: LD_INT 1
26309: PLUS
26310: PPUSH
26311: CALL_OW 237
26315: GO 26217
26317: POP
26318: POP
// end ;
26319: PPOPN 3
26321: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26322: LD_EXP 63
26326: IFFALSE 26334
26328: PUSH
26329: LD_EXP 71
26333: AND
26334: IFFALSE 26354
26336: GO 26338
26338: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26339: LD_INT 4
26341: PPUSH
26342: LD_OWVAR 2
26346: PPUSH
26347: LD_INT 0
26349: PPUSH
26350: CALL_OW 324
26354: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26355: LD_EXP 63
26359: IFFALSE 26367
26361: PUSH
26362: LD_EXP 100
26366: AND
26367: IFFALSE 26387
26369: GO 26371
26371: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26372: LD_INT 19
26374: PPUSH
26375: LD_OWVAR 2
26379: PPUSH
26380: LD_INT 0
26382: PPUSH
26383: CALL_OW 324
26387: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26388: LD_EXP 63
26392: IFFALSE 26400
26394: PUSH
26395: LD_EXP 72
26399: AND
26400: IFFALSE 26502
26402: GO 26404
26404: DISABLE
26405: LD_INT 0
26407: PPUSH
26408: PPUSH
// begin enable ;
26409: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26410: LD_ADDR_VAR 0 2
26414: PUSH
26415: LD_INT 22
26417: PUSH
26418: LD_OWVAR 2
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 2
26429: PUSH
26430: LD_INT 34
26432: PUSH
26433: LD_INT 11
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 34
26442: PUSH
26443: LD_INT 30
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: LIST
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PPUSH
26459: CALL_OW 69
26463: ST_TO_ADDR
// if not tmp then
26464: LD_VAR 0 2
26468: NOT
26469: IFFALSE 26473
// exit ;
26471: GO 26502
// for i in tmp do
26473: LD_ADDR_VAR 0 1
26477: PUSH
26478: LD_VAR 0 2
26482: PUSH
26483: FOR_IN
26484: IFFALSE 26500
// begin SetLives ( i , 0 ) ;
26486: LD_VAR 0 1
26490: PPUSH
26491: LD_INT 0
26493: PPUSH
26494: CALL_OW 234
// end ;
26498: GO 26483
26500: POP
26501: POP
// end ;
26502: PPOPN 2
26504: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26505: LD_EXP 63
26509: IFFALSE 26517
26511: PUSH
26512: LD_EXP 73
26516: AND
26517: IFFALSE 26537
26519: GO 26521
26521: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26522: LD_INT 32
26524: PPUSH
26525: LD_OWVAR 2
26529: PPUSH
26530: LD_INT 0
26532: PPUSH
26533: CALL_OW 324
26537: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26538: LD_EXP 63
26542: IFFALSE 26550
26544: PUSH
26545: LD_EXP 74
26549: AND
26550: IFFALSE 26733
26552: GO 26554
26554: DISABLE
26555: LD_INT 0
26557: PPUSH
26558: PPUSH
26559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26560: LD_ADDR_VAR 0 2
26564: PUSH
26565: LD_INT 22
26567: PUSH
26568: LD_OWVAR 2
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 33
26579: PUSH
26580: LD_INT 3
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PPUSH
26591: CALL_OW 69
26595: ST_TO_ADDR
// if not tmp then
26596: LD_VAR 0 2
26600: NOT
26601: IFFALSE 26605
// exit ;
26603: GO 26733
// side := 0 ;
26605: LD_ADDR_VAR 0 3
26609: PUSH
26610: LD_INT 0
26612: ST_TO_ADDR
// for i := 1 to 8 do
26613: LD_ADDR_VAR 0 1
26617: PUSH
26618: DOUBLE
26619: LD_INT 1
26621: DEC
26622: ST_TO_ADDR
26623: LD_INT 8
26625: PUSH
26626: FOR_TO
26627: IFFALSE 26677
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26629: LD_OWVAR 2
26633: PUSH
26634: LD_VAR 0 1
26638: NONEQUAL
26639: IFFALSE 26661
26641: PUSH
26642: LD_OWVAR 2
26646: PPUSH
26647: LD_VAR 0 1
26651: PPUSH
26652: CALL_OW 81
26656: PUSH
26657: LD_INT 2
26659: EQUAL
26660: AND
26661: IFFALSE 26675
// begin side := i ;
26663: LD_ADDR_VAR 0 3
26667: PUSH
26668: LD_VAR 0 1
26672: ST_TO_ADDR
// break ;
26673: GO 26677
// end ;
26675: GO 26626
26677: POP
26678: POP
// if not side then
26679: LD_VAR 0 3
26683: NOT
26684: IFFALSE 26688
// exit ;
26686: GO 26733
// for i := 1 to tmp do
26688: LD_ADDR_VAR 0 1
26692: PUSH
26693: DOUBLE
26694: LD_INT 1
26696: DEC
26697: ST_TO_ADDR
26698: LD_VAR 0 2
26702: PUSH
26703: FOR_TO
26704: IFFALSE 26731
// if Prob ( 60 ) then
26706: LD_INT 60
26708: PPUSH
26709: CALL_OW 13
26713: IFFALSE 26729
// SetSide ( i , side ) ;
26715: LD_VAR 0 1
26719: PPUSH
26720: LD_VAR 0 3
26724: PPUSH
26725: CALL_OW 235
26729: GO 26703
26731: POP
26732: POP
// end ;
26733: PPOPN 3
26735: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26736: LD_EXP 63
26740: IFFALSE 26748
26742: PUSH
26743: LD_EXP 76
26747: AND
26748: IFFALSE 26867
26750: GO 26752
26752: DISABLE
26753: LD_INT 0
26755: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26756: LD_ADDR_VAR 0 1
26760: PUSH
26761: LD_INT 22
26763: PUSH
26764: LD_OWVAR 2
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 21
26775: PUSH
26776: LD_INT 1
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 3
26785: PUSH
26786: LD_INT 23
26788: PUSH
26789: LD_INT 0
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: LIST
26804: PPUSH
26805: CALL_OW 69
26809: PUSH
26810: FOR_IN
26811: IFFALSE 26865
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26813: LD_VAR 0 1
26817: PPUSH
26818: CALL_OW 257
26822: PUSH
26823: LD_INT 1
26825: PUSH
26826: LD_INT 2
26828: PUSH
26829: LD_INT 3
26831: PUSH
26832: LD_INT 4
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: IN
26841: IFFALSE 26863
// SetClass ( un , rand ( 1 , 4 ) ) ;
26843: LD_VAR 0 1
26847: PPUSH
26848: LD_INT 1
26850: PPUSH
26851: LD_INT 4
26853: PPUSH
26854: CALL_OW 12
26858: PPUSH
26859: CALL_OW 336
26863: GO 26810
26865: POP
26866: POP
// end ;
26867: PPOPN 1
26869: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26870: LD_EXP 63
26874: IFFALSE 26882
26876: PUSH
26877: LD_EXP 75
26881: AND
26882: IFFALSE 26961
26884: GO 26886
26886: DISABLE
26887: LD_INT 0
26889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26890: LD_ADDR_VAR 0 1
26894: PUSH
26895: LD_INT 22
26897: PUSH
26898: LD_OWVAR 2
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 21
26909: PUSH
26910: LD_INT 3
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PPUSH
26921: CALL_OW 69
26925: ST_TO_ADDR
// if not tmp then
26926: LD_VAR 0 1
26930: NOT
26931: IFFALSE 26935
// exit ;
26933: GO 26961
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26935: LD_VAR 0 1
26939: PUSH
26940: LD_INT 1
26942: PPUSH
26943: LD_VAR 0 1
26947: PPUSH
26948: CALL_OW 12
26952: ARRAY
26953: PPUSH
26954: LD_INT 100
26956: PPUSH
26957: CALL_OW 234
// end ;
26961: PPOPN 1
26963: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26964: LD_EXP 63
26968: IFFALSE 26976
26970: PUSH
26971: LD_EXP 77
26975: AND
26976: IFFALSE 27074
26978: GO 26980
26980: DISABLE
26981: LD_INT 0
26983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26984: LD_ADDR_VAR 0 1
26988: PUSH
26989: LD_INT 22
26991: PUSH
26992: LD_OWVAR 2
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 21
27003: PUSH
27004: LD_INT 1
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PPUSH
27015: CALL_OW 69
27019: ST_TO_ADDR
// if not tmp then
27020: LD_VAR 0 1
27024: NOT
27025: IFFALSE 27029
// exit ;
27027: GO 27074
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27029: LD_VAR 0 1
27033: PUSH
27034: LD_INT 1
27036: PPUSH
27037: LD_VAR 0 1
27041: PPUSH
27042: CALL_OW 12
27046: ARRAY
27047: PPUSH
27048: LD_INT 1
27050: PPUSH
27051: LD_INT 4
27053: PPUSH
27054: CALL_OW 12
27058: PPUSH
27059: LD_INT 3000
27061: PPUSH
27062: LD_INT 9000
27064: PPUSH
27065: CALL_OW 12
27069: PPUSH
27070: CALL_OW 492
// end ;
27074: PPOPN 1
27076: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27077: LD_EXP 63
27081: IFFALSE 27089
27083: PUSH
27084: LD_EXP 78
27088: AND
27089: IFFALSE 27109
27091: GO 27093
27093: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27094: LD_INT 1
27096: PPUSH
27097: LD_OWVAR 2
27101: PPUSH
27102: LD_INT 0
27104: PPUSH
27105: CALL_OW 324
27109: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27110: LD_EXP 63
27114: IFFALSE 27122
27116: PUSH
27117: LD_EXP 79
27121: AND
27122: IFFALSE 27205
27124: GO 27126
27126: DISABLE
27127: LD_INT 0
27129: PPUSH
27130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27131: LD_ADDR_VAR 0 2
27135: PUSH
27136: LD_INT 22
27138: PUSH
27139: LD_OWVAR 2
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 21
27150: PUSH
27151: LD_INT 3
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PPUSH
27162: CALL_OW 69
27166: ST_TO_ADDR
// if not tmp then
27167: LD_VAR 0 2
27171: NOT
27172: IFFALSE 27176
// exit ;
27174: GO 27205
// for i in tmp do
27176: LD_ADDR_VAR 0 1
27180: PUSH
27181: LD_VAR 0 2
27185: PUSH
27186: FOR_IN
27187: IFFALSE 27203
// SetBLevel ( i , 10 ) ;
27189: LD_VAR 0 1
27193: PPUSH
27194: LD_INT 10
27196: PPUSH
27197: CALL_OW 241
27201: GO 27186
27203: POP
27204: POP
// end ;
27205: PPOPN 2
27207: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27208: LD_EXP 63
27212: IFFALSE 27220
27214: PUSH
27215: LD_EXP 80
27219: AND
27220: IFFALSE 27331
27222: GO 27224
27224: DISABLE
27225: LD_INT 0
27227: PPUSH
27228: PPUSH
27229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27230: LD_ADDR_VAR 0 3
27234: PUSH
27235: LD_INT 22
27237: PUSH
27238: LD_OWVAR 2
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 25
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PPUSH
27261: CALL_OW 69
27265: ST_TO_ADDR
// if not tmp then
27266: LD_VAR 0 3
27270: NOT
27271: IFFALSE 27275
// exit ;
27273: GO 27331
// un := tmp [ rand ( 1 , tmp ) ] ;
27275: LD_ADDR_VAR 0 2
27279: PUSH
27280: LD_VAR 0 3
27284: PUSH
27285: LD_INT 1
27287: PPUSH
27288: LD_VAR 0 3
27292: PPUSH
27293: CALL_OW 12
27297: ARRAY
27298: ST_TO_ADDR
// if Crawls ( un ) then
27299: LD_VAR 0 2
27303: PPUSH
27304: CALL_OW 318
27308: IFFALSE 27319
// ComWalk ( un ) ;
27310: LD_VAR 0 2
27314: PPUSH
27315: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27319: LD_VAR 0 2
27323: PPUSH
27324: LD_INT 5
27326: PPUSH
27327: CALL_OW 336
// end ;
27331: PPOPN 3
27333: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27334: LD_EXP 63
27338: IFFALSE 27346
27340: PUSH
27341: LD_EXP 81
27345: AND
27346: IFFALSE 27358
27348: PUSH
27349: LD_OWVAR 67
27353: PUSH
27354: LD_INT 4
27356: LESS
27357: AND
27358: IFFALSE 27377
27360: GO 27362
27362: DISABLE
// begin Difficulty := Difficulty + 1 ;
27363: LD_ADDR_OWVAR 67
27367: PUSH
27368: LD_OWVAR 67
27372: PUSH
27373: LD_INT 1
27375: PLUS
27376: ST_TO_ADDR
// end ;
27377: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27378: LD_EXP 63
27382: IFFALSE 27390
27384: PUSH
27385: LD_EXP 82
27389: AND
27390: IFFALSE 27493
27392: GO 27394
27394: DISABLE
27395: LD_INT 0
27397: PPUSH
// begin for i := 1 to 5 do
27398: LD_ADDR_VAR 0 1
27402: PUSH
27403: DOUBLE
27404: LD_INT 1
27406: DEC
27407: ST_TO_ADDR
27408: LD_INT 5
27410: PUSH
27411: FOR_TO
27412: IFFALSE 27491
// begin uc_nation := nation_nature ;
27414: LD_ADDR_OWVAR 21
27418: PUSH
27419: LD_INT 0
27421: ST_TO_ADDR
// uc_side := 0 ;
27422: LD_ADDR_OWVAR 20
27426: PUSH
27427: LD_INT 0
27429: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27430: LD_ADDR_OWVAR 29
27434: PUSH
27435: LD_INT 12
27437: PUSH
27438: LD_INT 12
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: ST_TO_ADDR
// hc_agressivity := 20 ;
27445: LD_ADDR_OWVAR 35
27449: PUSH
27450: LD_INT 20
27452: ST_TO_ADDR
// hc_class := class_tiger ;
27453: LD_ADDR_OWVAR 28
27457: PUSH
27458: LD_INT 14
27460: ST_TO_ADDR
// hc_gallery :=  ;
27461: LD_ADDR_OWVAR 33
27465: PUSH
27466: LD_STRING 
27468: ST_TO_ADDR
// hc_name :=  ;
27469: LD_ADDR_OWVAR 26
27473: PUSH
27474: LD_STRING 
27476: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27477: CALL_OW 44
27481: PPUSH
27482: LD_INT 0
27484: PPUSH
27485: CALL_OW 51
// end ;
27489: GO 27411
27491: POP
27492: POP
// end ;
27493: PPOPN 1
27495: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27496: LD_EXP 63
27500: IFFALSE 27508
27502: PUSH
27503: LD_EXP 83
27507: AND
27508: IFFALSE 27517
27510: GO 27512
27512: DISABLE
// StreamSibBomb ;
27513: CALL 27518 0 0
27517: END
// export function StreamSibBomb ; var i , x , y ; begin
27518: LD_INT 0
27520: PPUSH
27521: PPUSH
27522: PPUSH
27523: PPUSH
// result := false ;
27524: LD_ADDR_VAR 0 1
27528: PUSH
27529: LD_INT 0
27531: ST_TO_ADDR
// for i := 1 to 16 do
27532: LD_ADDR_VAR 0 2
27536: PUSH
27537: DOUBLE
27538: LD_INT 1
27540: DEC
27541: ST_TO_ADDR
27542: LD_INT 16
27544: PUSH
27545: FOR_TO
27546: IFFALSE 27745
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27548: LD_ADDR_VAR 0 3
27552: PUSH
27553: LD_INT 10
27555: PUSH
27556: LD_INT 20
27558: PUSH
27559: LD_INT 30
27561: PUSH
27562: LD_INT 40
27564: PUSH
27565: LD_INT 50
27567: PUSH
27568: LD_INT 60
27570: PUSH
27571: LD_INT 70
27573: PUSH
27574: LD_INT 80
27576: PUSH
27577: LD_INT 90
27579: PUSH
27580: LD_INT 100
27582: PUSH
27583: LD_INT 110
27585: PUSH
27586: LD_INT 120
27588: PUSH
27589: LD_INT 130
27591: PUSH
27592: LD_INT 140
27594: PUSH
27595: LD_INT 150
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 1
27617: PPUSH
27618: LD_INT 15
27620: PPUSH
27621: CALL_OW 12
27625: ARRAY
27626: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27627: LD_ADDR_VAR 0 4
27631: PUSH
27632: LD_INT 10
27634: PUSH
27635: LD_INT 20
27637: PUSH
27638: LD_INT 30
27640: PUSH
27641: LD_INT 40
27643: PUSH
27644: LD_INT 50
27646: PUSH
27647: LD_INT 60
27649: PUSH
27650: LD_INT 70
27652: PUSH
27653: LD_INT 80
27655: PUSH
27656: LD_INT 90
27658: PUSH
27659: LD_INT 100
27661: PUSH
27662: LD_INT 110
27664: PUSH
27665: LD_INT 120
27667: PUSH
27668: LD_INT 130
27670: PUSH
27671: LD_INT 140
27673: PUSH
27674: LD_INT 150
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 1
27696: PPUSH
27697: LD_INT 15
27699: PPUSH
27700: CALL_OW 12
27704: ARRAY
27705: ST_TO_ADDR
// if ValidHex ( x , y ) then
27706: LD_VAR 0 3
27710: PPUSH
27711: LD_VAR 0 4
27715: PPUSH
27716: CALL_OW 488
27720: IFFALSE 27743
// begin result := [ x , y ] ;
27722: LD_ADDR_VAR 0 1
27726: PUSH
27727: LD_VAR 0 3
27731: PUSH
27732: LD_VAR 0 4
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: ST_TO_ADDR
// break ;
27741: GO 27745
// end ; end ;
27743: GO 27545
27745: POP
27746: POP
// if result then
27747: LD_VAR 0 1
27751: IFFALSE 27811
// begin ToLua ( playSibBomb() ) ;
27753: LD_STRING playSibBomb()
27755: PPUSH
27756: CALL_OW 559
// wait ( 0 0$14 ) ;
27760: LD_INT 490
27762: PPUSH
27763: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27767: LD_VAR 0 1
27771: PUSH
27772: LD_INT 1
27774: ARRAY
27775: PPUSH
27776: LD_VAR 0 1
27780: PUSH
27781: LD_INT 2
27783: ARRAY
27784: PPUSH
27785: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27789: LD_VAR 0 1
27793: PUSH
27794: LD_INT 1
27796: ARRAY
27797: PPUSH
27798: LD_VAR 0 1
27802: PUSH
27803: LD_INT 2
27805: ARRAY
27806: PPUSH
27807: CALL_OW 429
// end ; end ;
27811: LD_VAR 0 1
27815: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27816: LD_EXP 63
27820: IFFALSE 27828
27822: PUSH
27823: LD_EXP 85
27827: AND
27828: IFFALSE 27840
27830: GO 27832
27832: DISABLE
// YouLost (  ) ;
27833: LD_STRING 
27835: PPUSH
27836: CALL_OW 104
27840: END
// every 0 0$1 trigger StreamModeActive and sFog do
27841: LD_EXP 63
27845: IFFALSE 27853
27847: PUSH
27848: LD_EXP 84
27852: AND
27853: IFFALSE 27867
27855: GO 27857
27857: DISABLE
// FogOff ( your_side ) ;
27858: LD_OWVAR 2
27862: PPUSH
27863: CALL_OW 344
27867: END
// every 0 0$1 trigger StreamModeActive and sSun do
27868: LD_EXP 63
27872: IFFALSE 27880
27874: PUSH
27875: LD_EXP 86
27879: AND
27880: IFFALSE 27908
27882: GO 27884
27884: DISABLE
// begin solar_recharge_percent := 0 ;
27885: LD_ADDR_OWVAR 79
27889: PUSH
27890: LD_INT 0
27892: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27893: LD_INT 10500
27895: PPUSH
27896: CALL_OW 67
// solar_recharge_percent := 100 ;
27900: LD_ADDR_OWVAR 79
27904: PUSH
27905: LD_INT 100
27907: ST_TO_ADDR
// end ;
27908: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27909: LD_EXP 63
27913: IFFALSE 27921
27915: PUSH
27916: LD_EXP 87
27920: AND
27921: IFFALSE 28160
27923: GO 27925
27925: DISABLE
27926: LD_INT 0
27928: PPUSH
27929: PPUSH
27930: PPUSH
// begin tmp := [ ] ;
27931: LD_ADDR_VAR 0 3
27935: PUSH
27936: EMPTY
27937: ST_TO_ADDR
// for i := 1 to 6 do
27938: LD_ADDR_VAR 0 1
27942: PUSH
27943: DOUBLE
27944: LD_INT 1
27946: DEC
27947: ST_TO_ADDR
27948: LD_INT 6
27950: PUSH
27951: FOR_TO
27952: IFFALSE 28057
// begin uc_nation := nation_nature ;
27954: LD_ADDR_OWVAR 21
27958: PUSH
27959: LD_INT 0
27961: ST_TO_ADDR
// uc_side := 0 ;
27962: LD_ADDR_OWVAR 20
27966: PUSH
27967: LD_INT 0
27969: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27970: LD_ADDR_OWVAR 29
27974: PUSH
27975: LD_INT 12
27977: PUSH
27978: LD_INT 12
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: ST_TO_ADDR
// hc_agressivity := 20 ;
27985: LD_ADDR_OWVAR 35
27989: PUSH
27990: LD_INT 20
27992: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27993: LD_ADDR_OWVAR 28
27997: PUSH
27998: LD_INT 17
28000: ST_TO_ADDR
// hc_gallery :=  ;
28001: LD_ADDR_OWVAR 33
28005: PUSH
28006: LD_STRING 
28008: ST_TO_ADDR
// hc_name :=  ;
28009: LD_ADDR_OWVAR 26
28013: PUSH
28014: LD_STRING 
28016: ST_TO_ADDR
// un := CreateHuman ;
28017: LD_ADDR_VAR 0 2
28021: PUSH
28022: CALL_OW 44
28026: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28027: LD_VAR 0 2
28031: PPUSH
28032: LD_INT 1
28034: PPUSH
28035: CALL_OW 51
// tmp := tmp ^ un ;
28039: LD_ADDR_VAR 0 3
28043: PUSH
28044: LD_VAR 0 3
28048: PUSH
28049: LD_VAR 0 2
28053: ADD
28054: ST_TO_ADDR
// end ;
28055: GO 27951
28057: POP
28058: POP
// repeat wait ( 0 0$1 ) ;
28059: LD_INT 35
28061: PPUSH
28062: CALL_OW 67
// for un in tmp do
28066: LD_ADDR_VAR 0 2
28070: PUSH
28071: LD_VAR 0 3
28075: PUSH
28076: FOR_IN
28077: IFFALSE 28151
// begin if IsDead ( un ) then
28079: LD_VAR 0 2
28083: PPUSH
28084: CALL_OW 301
28088: IFFALSE 28108
// begin tmp := tmp diff un ;
28090: LD_ADDR_VAR 0 3
28094: PUSH
28095: LD_VAR 0 3
28099: PUSH
28100: LD_VAR 0 2
28104: DIFF
28105: ST_TO_ADDR
// continue ;
28106: GO 28076
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28108: LD_VAR 0 2
28112: PPUSH
28113: LD_INT 3
28115: PUSH
28116: LD_INT 22
28118: PUSH
28119: LD_INT 0
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PPUSH
28130: CALL_OW 69
28134: PPUSH
28135: LD_VAR 0 2
28139: PPUSH
28140: CALL_OW 74
28144: PPUSH
28145: CALL_OW 115
// end ;
28149: GO 28076
28151: POP
28152: POP
// until not tmp ;
28153: LD_VAR 0 3
28157: NOT
28158: IFFALSE 28059
// end ;
28160: PPOPN 3
28162: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28163: LD_EXP 63
28167: IFFALSE 28175
28169: PUSH
28170: LD_EXP 88
28174: AND
28175: IFFALSE 28229
28177: GO 28179
28179: DISABLE
// begin ToLua ( displayTroll(); ) ;
28180: LD_STRING displayTroll();
28182: PPUSH
28183: CALL_OW 559
// wait ( 3 3$00 ) ;
28187: LD_INT 6300
28189: PPUSH
28190: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28194: LD_STRING hideTroll();
28196: PPUSH
28197: CALL_OW 559
// wait ( 1 1$00 ) ;
28201: LD_INT 2100
28203: PPUSH
28204: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28208: LD_STRING displayTroll();
28210: PPUSH
28211: CALL_OW 559
// wait ( 1 1$00 ) ;
28215: LD_INT 2100
28217: PPUSH
28218: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28222: LD_STRING hideTroll();
28224: PPUSH
28225: CALL_OW 559
// end ;
28229: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28230: LD_EXP 63
28234: IFFALSE 28242
28236: PUSH
28237: LD_EXP 89
28241: AND
28242: IFFALSE 28305
28244: GO 28246
28246: DISABLE
28247: LD_INT 0
28249: PPUSH
// begin p := 0 ;
28250: LD_ADDR_VAR 0 1
28254: PUSH
28255: LD_INT 0
28257: ST_TO_ADDR
// repeat game_speed := 1 ;
28258: LD_ADDR_OWVAR 65
28262: PUSH
28263: LD_INT 1
28265: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28266: LD_INT 35
28268: PPUSH
28269: CALL_OW 67
// p := p + 1 ;
28273: LD_ADDR_VAR 0 1
28277: PUSH
28278: LD_VAR 0 1
28282: PUSH
28283: LD_INT 1
28285: PLUS
28286: ST_TO_ADDR
// until p >= 60 ;
28287: LD_VAR 0 1
28291: PUSH
28292: LD_INT 60
28294: GREATEREQUAL
28295: IFFALSE 28258
// game_speed := 4 ;
28297: LD_ADDR_OWVAR 65
28301: PUSH
28302: LD_INT 4
28304: ST_TO_ADDR
// end ;
28305: PPOPN 1
28307: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28308: LD_EXP 63
28312: IFFALSE 28320
28314: PUSH
28315: LD_EXP 90
28319: AND
28320: IFFALSE 28466
28322: GO 28324
28324: DISABLE
28325: LD_INT 0
28327: PPUSH
28328: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28329: LD_ADDR_VAR 0 1
28333: PUSH
28334: LD_INT 22
28336: PUSH
28337: LD_OWVAR 2
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 2
28348: PUSH
28349: LD_INT 30
28351: PUSH
28352: LD_INT 0
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 30
28361: PUSH
28362: LD_INT 1
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: LIST
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PPUSH
28378: CALL_OW 69
28382: ST_TO_ADDR
// if not depot then
28383: LD_VAR 0 1
28387: NOT
28388: IFFALSE 28392
// exit ;
28390: GO 28466
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28392: LD_ADDR_VAR 0 2
28396: PUSH
28397: LD_VAR 0 1
28401: PUSH
28402: LD_INT 1
28404: PPUSH
28405: LD_VAR 0 1
28409: PPUSH
28410: CALL_OW 12
28414: ARRAY
28415: PPUSH
28416: CALL_OW 274
28420: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28421: LD_VAR 0 2
28425: PPUSH
28426: LD_INT 1
28428: PPUSH
28429: LD_INT 0
28431: PPUSH
28432: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28436: LD_VAR 0 2
28440: PPUSH
28441: LD_INT 2
28443: PPUSH
28444: LD_INT 0
28446: PPUSH
28447: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28451: LD_VAR 0 2
28455: PPUSH
28456: LD_INT 3
28458: PPUSH
28459: LD_INT 0
28461: PPUSH
28462: CALL_OW 277
// end ;
28466: PPOPN 2
28468: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28469: LD_EXP 63
28473: IFFALSE 28481
28475: PUSH
28476: LD_EXP 91
28480: AND
28481: IFFALSE 28578
28483: GO 28485
28485: DISABLE
28486: LD_INT 0
28488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28489: LD_ADDR_VAR 0 1
28493: PUSH
28494: LD_INT 22
28496: PUSH
28497: LD_OWVAR 2
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 21
28508: PUSH
28509: LD_INT 1
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 3
28518: PUSH
28519: LD_INT 23
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: LIST
28537: PPUSH
28538: CALL_OW 69
28542: ST_TO_ADDR
// if not tmp then
28543: LD_VAR 0 1
28547: NOT
28548: IFFALSE 28552
// exit ;
28550: GO 28578
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28552: LD_VAR 0 1
28556: PUSH
28557: LD_INT 1
28559: PPUSH
28560: LD_VAR 0 1
28564: PPUSH
28565: CALL_OW 12
28569: ARRAY
28570: PPUSH
28571: LD_INT 200
28573: PPUSH
28574: CALL_OW 234
// end ;
28578: PPOPN 1
28580: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28581: LD_EXP 63
28585: IFFALSE 28593
28587: PUSH
28588: LD_EXP 92
28592: AND
28593: IFFALSE 28672
28595: GO 28597
28597: DISABLE
28598: LD_INT 0
28600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28601: LD_ADDR_VAR 0 1
28605: PUSH
28606: LD_INT 22
28608: PUSH
28609: LD_OWVAR 2
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 21
28620: PUSH
28621: LD_INT 2
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PPUSH
28632: CALL_OW 69
28636: ST_TO_ADDR
// if not tmp then
28637: LD_VAR 0 1
28641: NOT
28642: IFFALSE 28646
// exit ;
28644: GO 28672
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28646: LD_VAR 0 1
28650: PUSH
28651: LD_INT 1
28653: PPUSH
28654: LD_VAR 0 1
28658: PPUSH
28659: CALL_OW 12
28663: ARRAY
28664: PPUSH
28665: LD_INT 60
28667: PPUSH
28668: CALL_OW 234
// end ;
28672: PPOPN 1
28674: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28675: LD_EXP 63
28679: IFFALSE 28687
28681: PUSH
28682: LD_EXP 93
28686: AND
28687: IFFALSE 28786
28689: GO 28691
28691: DISABLE
28692: LD_INT 0
28694: PPUSH
28695: PPUSH
// begin enable ;
28696: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28697: LD_ADDR_VAR 0 1
28701: PUSH
28702: LD_INT 22
28704: PUSH
28705: LD_OWVAR 2
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 61
28716: PUSH
28717: EMPTY
28718: LIST
28719: PUSH
28720: LD_INT 33
28722: PUSH
28723: LD_INT 2
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: LIST
28734: PPUSH
28735: CALL_OW 69
28739: ST_TO_ADDR
// if not tmp then
28740: LD_VAR 0 1
28744: NOT
28745: IFFALSE 28749
// exit ;
28747: GO 28786
// for i in tmp do
28749: LD_ADDR_VAR 0 2
28753: PUSH
28754: LD_VAR 0 1
28758: PUSH
28759: FOR_IN
28760: IFFALSE 28784
// if IsControledBy ( i ) then
28762: LD_VAR 0 2
28766: PPUSH
28767: CALL_OW 312
28771: IFFALSE 28782
// ComUnlink ( i ) ;
28773: LD_VAR 0 2
28777: PPUSH
28778: CALL_OW 136
28782: GO 28759
28784: POP
28785: POP
// end ;
28786: PPOPN 2
28788: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28789: LD_EXP 63
28793: IFFALSE 28801
28795: PUSH
28796: LD_EXP 94
28800: AND
28801: IFFALSE 28941
28803: GO 28805
28805: DISABLE
28806: LD_INT 0
28808: PPUSH
28809: PPUSH
// begin ToLua ( displayPowell(); ) ;
28810: LD_STRING displayPowell();
28812: PPUSH
28813: CALL_OW 559
// uc_side := 0 ;
28817: LD_ADDR_OWVAR 20
28821: PUSH
28822: LD_INT 0
28824: ST_TO_ADDR
// uc_nation := 2 ;
28825: LD_ADDR_OWVAR 21
28829: PUSH
28830: LD_INT 2
28832: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28833: LD_ADDR_OWVAR 37
28837: PUSH
28838: LD_INT 14
28840: ST_TO_ADDR
// vc_engine := engine_siberite ;
28841: LD_ADDR_OWVAR 39
28845: PUSH
28846: LD_INT 3
28848: ST_TO_ADDR
// vc_control := control_apeman ;
28849: LD_ADDR_OWVAR 38
28853: PUSH
28854: LD_INT 5
28856: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28857: LD_ADDR_OWVAR 40
28861: PUSH
28862: LD_INT 29
28864: ST_TO_ADDR
// un := CreateVehicle ;
28865: LD_ADDR_VAR 0 2
28869: PUSH
28870: CALL_OW 45
28874: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28875: LD_VAR 0 2
28879: PPUSH
28880: LD_INT 1
28882: PPUSH
28883: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28887: LD_INT 35
28889: PPUSH
28890: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28894: LD_VAR 0 2
28898: PPUSH
28899: LD_INT 22
28901: PUSH
28902: LD_OWVAR 2
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PPUSH
28911: CALL_OW 69
28915: PPUSH
28916: LD_VAR 0 2
28920: PPUSH
28921: CALL_OW 74
28925: PPUSH
28926: CALL_OW 115
// until IsDead ( un ) ;
28930: LD_VAR 0 2
28934: PPUSH
28935: CALL_OW 301
28939: IFFALSE 28887
// end ;
28941: PPOPN 2
28943: END
// every 0 0$1 trigger StreamModeActive and sStu do
28944: LD_EXP 63
28948: IFFALSE 28956
28950: PUSH
28951: LD_EXP 102
28955: AND
28956: IFFALSE 28972
28958: GO 28960
28960: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28961: LD_STRING displayStucuk();
28963: PPUSH
28964: CALL_OW 559
// ResetFog ;
28968: CALL_OW 335
// end ;
28972: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28973: LD_EXP 63
28977: IFFALSE 28985
28979: PUSH
28980: LD_EXP 95
28984: AND
28985: IFFALSE 29126
28987: GO 28989
28989: DISABLE
28990: LD_INT 0
28992: PPUSH
28993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28994: LD_ADDR_VAR 0 2
28998: PUSH
28999: LD_INT 22
29001: PUSH
29002: LD_OWVAR 2
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 21
29013: PUSH
29014: LD_INT 1
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PPUSH
29025: CALL_OW 69
29029: ST_TO_ADDR
// if not tmp then
29030: LD_VAR 0 2
29034: NOT
29035: IFFALSE 29039
// exit ;
29037: GO 29126
// un := tmp [ rand ( 1 , tmp ) ] ;
29039: LD_ADDR_VAR 0 1
29043: PUSH
29044: LD_VAR 0 2
29048: PUSH
29049: LD_INT 1
29051: PPUSH
29052: LD_VAR 0 2
29056: PPUSH
29057: CALL_OW 12
29061: ARRAY
29062: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29063: LD_VAR 0 1
29067: PPUSH
29068: LD_INT 0
29070: PPUSH
29071: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29075: LD_VAR 0 1
29079: PPUSH
29080: LD_OWVAR 3
29084: PUSH
29085: LD_VAR 0 1
29089: DIFF
29090: PPUSH
29091: LD_VAR 0 1
29095: PPUSH
29096: CALL_OW 74
29100: PPUSH
29101: CALL_OW 115
// wait ( 0 0$20 ) ;
29105: LD_INT 700
29107: PPUSH
29108: CALL_OW 67
// SetSide ( un , your_side ) ;
29112: LD_VAR 0 1
29116: PPUSH
29117: LD_OWVAR 2
29121: PPUSH
29122: CALL_OW 235
// end ;
29126: PPOPN 2
29128: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29129: LD_EXP 63
29133: IFFALSE 29141
29135: PUSH
29136: LD_EXP 96
29140: AND
29141: IFFALSE 29247
29143: GO 29145
29145: DISABLE
29146: LD_INT 0
29148: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29149: LD_ADDR_VAR 0 1
29153: PUSH
29154: LD_INT 22
29156: PUSH
29157: LD_OWVAR 2
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 2
29168: PUSH
29169: LD_INT 30
29171: PUSH
29172: LD_INT 0
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 30
29181: PUSH
29182: LD_INT 1
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: LIST
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PPUSH
29198: CALL_OW 69
29202: ST_TO_ADDR
// if not depot then
29203: LD_VAR 0 1
29207: NOT
29208: IFFALSE 29212
// exit ;
29210: GO 29247
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29212: LD_VAR 0 1
29216: PUSH
29217: LD_INT 1
29219: ARRAY
29220: PPUSH
29221: CALL_OW 250
29225: PPUSH
29226: LD_VAR 0 1
29230: PUSH
29231: LD_INT 1
29233: ARRAY
29234: PPUSH
29235: CALL_OW 251
29239: PPUSH
29240: LD_INT 70
29242: PPUSH
29243: CALL_OW 495
// end ;
29247: PPOPN 1
29249: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29250: LD_EXP 63
29254: IFFALSE 29262
29256: PUSH
29257: LD_EXP 97
29261: AND
29262: IFFALSE 29473
29264: GO 29266
29266: DISABLE
29267: LD_INT 0
29269: PPUSH
29270: PPUSH
29271: PPUSH
29272: PPUSH
29273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29274: LD_ADDR_VAR 0 5
29278: PUSH
29279: LD_INT 22
29281: PUSH
29282: LD_OWVAR 2
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 21
29293: PUSH
29294: LD_INT 1
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PPUSH
29305: CALL_OW 69
29309: ST_TO_ADDR
// if not tmp then
29310: LD_VAR 0 5
29314: NOT
29315: IFFALSE 29319
// exit ;
29317: GO 29473
// for i in tmp do
29319: LD_ADDR_VAR 0 1
29323: PUSH
29324: LD_VAR 0 5
29328: PUSH
29329: FOR_IN
29330: IFFALSE 29471
// begin d := rand ( 0 , 5 ) ;
29332: LD_ADDR_VAR 0 4
29336: PUSH
29337: LD_INT 0
29339: PPUSH
29340: LD_INT 5
29342: PPUSH
29343: CALL_OW 12
29347: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29348: LD_ADDR_VAR 0 2
29352: PUSH
29353: LD_VAR 0 1
29357: PPUSH
29358: CALL_OW 250
29362: PPUSH
29363: LD_VAR 0 4
29367: PPUSH
29368: LD_INT 3
29370: PPUSH
29371: LD_INT 12
29373: PPUSH
29374: CALL_OW 12
29378: PPUSH
29379: CALL_OW 272
29383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29384: LD_ADDR_VAR 0 3
29388: PUSH
29389: LD_VAR 0 1
29393: PPUSH
29394: CALL_OW 251
29398: PPUSH
29399: LD_VAR 0 4
29403: PPUSH
29404: LD_INT 3
29406: PPUSH
29407: LD_INT 12
29409: PPUSH
29410: CALL_OW 12
29414: PPUSH
29415: CALL_OW 273
29419: ST_TO_ADDR
// if ValidHex ( x , y ) then
29420: LD_VAR 0 2
29424: PPUSH
29425: LD_VAR 0 3
29429: PPUSH
29430: CALL_OW 488
29434: IFFALSE 29469
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29436: LD_VAR 0 1
29440: PPUSH
29441: LD_VAR 0 2
29445: PPUSH
29446: LD_VAR 0 3
29450: PPUSH
29451: LD_INT 3
29453: PPUSH
29454: LD_INT 6
29456: PPUSH
29457: CALL_OW 12
29461: PPUSH
29462: LD_INT 1
29464: PPUSH
29465: CALL_OW 483
// end ;
29469: GO 29329
29471: POP
29472: POP
// end ;
29473: PPOPN 5
29475: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29476: LD_EXP 63
29480: IFFALSE 29488
29482: PUSH
29483: LD_EXP 98
29487: AND
29488: IFFALSE 29582
29490: GO 29492
29492: DISABLE
29493: LD_INT 0
29495: PPUSH
29496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29497: LD_ADDR_VAR 0 2
29501: PUSH
29502: LD_INT 22
29504: PUSH
29505: LD_OWVAR 2
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 32
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 21
29526: PUSH
29527: LD_INT 2
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: LIST
29538: PPUSH
29539: CALL_OW 69
29543: ST_TO_ADDR
// if not tmp then
29544: LD_VAR 0 2
29548: NOT
29549: IFFALSE 29553
// exit ;
29551: GO 29582
// for i in tmp do
29553: LD_ADDR_VAR 0 1
29557: PUSH
29558: LD_VAR 0 2
29562: PUSH
29563: FOR_IN
29564: IFFALSE 29580
// SetFuel ( i , 0 ) ;
29566: LD_VAR 0 1
29570: PPUSH
29571: LD_INT 0
29573: PPUSH
29574: CALL_OW 240
29578: GO 29563
29580: POP
29581: POP
// end ;
29582: PPOPN 2
29584: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29585: LD_EXP 63
29589: IFFALSE 29597
29591: PUSH
29592: LD_EXP 99
29596: AND
29597: IFFALSE 29663
29599: GO 29601
29601: DISABLE
29602: LD_INT 0
29604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29605: LD_ADDR_VAR 0 1
29609: PUSH
29610: LD_INT 22
29612: PUSH
29613: LD_OWVAR 2
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 30
29624: PUSH
29625: LD_INT 29
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PPUSH
29636: CALL_OW 69
29640: ST_TO_ADDR
// if not tmp then
29641: LD_VAR 0 1
29645: NOT
29646: IFFALSE 29650
// exit ;
29648: GO 29663
// DestroyUnit ( tmp [ 1 ] ) ;
29650: LD_VAR 0 1
29654: PUSH
29655: LD_INT 1
29657: ARRAY
29658: PPUSH
29659: CALL_OW 65
// end ;
29663: PPOPN 1
29665: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29666: LD_EXP 63
29670: IFFALSE 29678
29672: PUSH
29673: LD_EXP 101
29677: AND
29678: IFFALSE 29807
29680: GO 29682
29682: DISABLE
29683: LD_INT 0
29685: PPUSH
// begin uc_side := 0 ;
29686: LD_ADDR_OWVAR 20
29690: PUSH
29691: LD_INT 0
29693: ST_TO_ADDR
// uc_nation := nation_arabian ;
29694: LD_ADDR_OWVAR 21
29698: PUSH
29699: LD_INT 2
29701: ST_TO_ADDR
// hc_gallery :=  ;
29702: LD_ADDR_OWVAR 33
29706: PUSH
29707: LD_STRING 
29709: ST_TO_ADDR
// hc_name :=  ;
29710: LD_ADDR_OWVAR 26
29714: PUSH
29715: LD_STRING 
29717: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29718: LD_INT 1
29720: PPUSH
29721: LD_INT 11
29723: PPUSH
29724: LD_INT 10
29726: PPUSH
29727: CALL_OW 380
// un := CreateHuman ;
29731: LD_ADDR_VAR 0 1
29735: PUSH
29736: CALL_OW 44
29740: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29741: LD_VAR 0 1
29745: PPUSH
29746: LD_INT 1
29748: PPUSH
29749: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29753: LD_INT 35
29755: PPUSH
29756: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29760: LD_VAR 0 1
29764: PPUSH
29765: LD_INT 22
29767: PUSH
29768: LD_OWVAR 2
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PPUSH
29777: CALL_OW 69
29781: PPUSH
29782: LD_VAR 0 1
29786: PPUSH
29787: CALL_OW 74
29791: PPUSH
29792: CALL_OW 115
// until IsDead ( un ) ;
29796: LD_VAR 0 1
29800: PPUSH
29801: CALL_OW 301
29805: IFFALSE 29753
// end ;
29807: PPOPN 1
29809: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29810: LD_EXP 63
29814: IFFALSE 29822
29816: PUSH
29817: LD_EXP 103
29821: AND
29822: IFFALSE 29834
29824: GO 29826
29826: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29827: LD_STRING earthquake(getX(game), 0, 32)
29829: PPUSH
29830: CALL_OW 559
29834: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29835: LD_EXP 63
29839: IFFALSE 29847
29841: PUSH
29842: LD_EXP 104
29846: AND
29847: IFFALSE 29938
29849: GO 29851
29851: DISABLE
29852: LD_INT 0
29854: PPUSH
// begin enable ;
29855: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29856: LD_ADDR_VAR 0 1
29860: PUSH
29861: LD_INT 22
29863: PUSH
29864: LD_OWVAR 2
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 21
29875: PUSH
29876: LD_INT 2
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 33
29885: PUSH
29886: LD_INT 3
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: LIST
29897: PPUSH
29898: CALL_OW 69
29902: ST_TO_ADDR
// if not tmp then
29903: LD_VAR 0 1
29907: NOT
29908: IFFALSE 29912
// exit ;
29910: GO 29938
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29912: LD_VAR 0 1
29916: PUSH
29917: LD_INT 1
29919: PPUSH
29920: LD_VAR 0 1
29924: PPUSH
29925: CALL_OW 12
29929: ARRAY
29930: PPUSH
29931: LD_INT 1
29933: PPUSH
29934: CALL_OW 234
// end ;
29938: PPOPN 1
29940: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29941: LD_EXP 63
29945: IFFALSE 29953
29947: PUSH
29948: LD_EXP 105
29952: AND
29953: IFFALSE 30094
29955: GO 29957
29957: DISABLE
29958: LD_INT 0
29960: PPUSH
29961: PPUSH
29962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29963: LD_ADDR_VAR 0 3
29967: PUSH
29968: LD_INT 22
29970: PUSH
29971: LD_OWVAR 2
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 25
29982: PUSH
29983: LD_INT 1
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PPUSH
29994: CALL_OW 69
29998: ST_TO_ADDR
// if not tmp then
29999: LD_VAR 0 3
30003: NOT
30004: IFFALSE 30008
// exit ;
30006: GO 30094
// un := tmp [ rand ( 1 , tmp ) ] ;
30008: LD_ADDR_VAR 0 2
30012: PUSH
30013: LD_VAR 0 3
30017: PUSH
30018: LD_INT 1
30020: PPUSH
30021: LD_VAR 0 3
30025: PPUSH
30026: CALL_OW 12
30030: ARRAY
30031: ST_TO_ADDR
// if Crawls ( un ) then
30032: LD_VAR 0 2
30036: PPUSH
30037: CALL_OW 318
30041: IFFALSE 30052
// ComWalk ( un ) ;
30043: LD_VAR 0 2
30047: PPUSH
30048: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30052: LD_VAR 0 2
30056: PPUSH
30057: LD_INT 9
30059: PPUSH
30060: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30064: LD_INT 28
30066: PPUSH
30067: LD_OWVAR 2
30071: PPUSH
30072: LD_INT 2
30074: PPUSH
30075: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30079: LD_INT 29
30081: PPUSH
30082: LD_OWVAR 2
30086: PPUSH
30087: LD_INT 2
30089: PPUSH
30090: CALL_OW 322
// end ;
30094: PPOPN 3
30096: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30097: LD_EXP 63
30101: IFFALSE 30109
30103: PUSH
30104: LD_EXP 106
30108: AND
30109: IFFALSE 30220
30111: GO 30113
30113: DISABLE
30114: LD_INT 0
30116: PPUSH
30117: PPUSH
30118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30119: LD_ADDR_VAR 0 3
30123: PUSH
30124: LD_INT 22
30126: PUSH
30127: LD_OWVAR 2
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 25
30138: PUSH
30139: LD_INT 1
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PPUSH
30150: CALL_OW 69
30154: ST_TO_ADDR
// if not tmp then
30155: LD_VAR 0 3
30159: NOT
30160: IFFALSE 30164
// exit ;
30162: GO 30220
// un := tmp [ rand ( 1 , tmp ) ] ;
30164: LD_ADDR_VAR 0 2
30168: PUSH
30169: LD_VAR 0 3
30173: PUSH
30174: LD_INT 1
30176: PPUSH
30177: LD_VAR 0 3
30181: PPUSH
30182: CALL_OW 12
30186: ARRAY
30187: ST_TO_ADDR
// if Crawls ( un ) then
30188: LD_VAR 0 2
30192: PPUSH
30193: CALL_OW 318
30197: IFFALSE 30208
// ComWalk ( un ) ;
30199: LD_VAR 0 2
30203: PPUSH
30204: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30208: LD_VAR 0 2
30212: PPUSH
30213: LD_INT 8
30215: PPUSH
30216: CALL_OW 336
// end ;
30220: PPOPN 3
30222: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30223: LD_EXP 63
30227: IFFALSE 30235
30229: PUSH
30230: LD_EXP 107
30234: AND
30235: IFFALSE 30379
30237: GO 30239
30239: DISABLE
30240: LD_INT 0
30242: PPUSH
30243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30244: LD_ADDR_VAR 0 2
30248: PUSH
30249: LD_INT 22
30251: PUSH
30252: LD_OWVAR 2
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 21
30263: PUSH
30264: LD_INT 2
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 2
30273: PUSH
30274: LD_INT 34
30276: PUSH
30277: LD_INT 12
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 34
30286: PUSH
30287: LD_INT 51
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 34
30296: PUSH
30297: LD_INT 32
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: LIST
30314: PPUSH
30315: CALL_OW 69
30319: ST_TO_ADDR
// if not tmp then
30320: LD_VAR 0 2
30324: NOT
30325: IFFALSE 30329
// exit ;
30327: GO 30379
// for i in tmp do
30329: LD_ADDR_VAR 0 1
30333: PUSH
30334: LD_VAR 0 2
30338: PUSH
30339: FOR_IN
30340: IFFALSE 30377
// if GetCargo ( i , mat_artifact ) = 0 then
30342: LD_VAR 0 1
30346: PPUSH
30347: LD_INT 4
30349: PPUSH
30350: CALL_OW 289
30354: PUSH
30355: LD_INT 0
30357: EQUAL
30358: IFFALSE 30375
// SetCargo ( i , mat_siberit , 100 ) ;
30360: LD_VAR 0 1
30364: PPUSH
30365: LD_INT 3
30367: PPUSH
30368: LD_INT 100
30370: PPUSH
30371: CALL_OW 290
30375: GO 30339
30377: POP
30378: POP
// end ;
30379: PPOPN 2
30381: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30382: LD_EXP 63
30386: IFFALSE 30394
30388: PUSH
30389: LD_EXP 108
30393: AND
30394: IFFALSE 30577
30396: GO 30398
30398: DISABLE
30399: LD_INT 0
30401: PPUSH
30402: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30403: LD_ADDR_VAR 0 2
30407: PUSH
30408: LD_INT 22
30410: PUSH
30411: LD_OWVAR 2
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PPUSH
30420: CALL_OW 69
30424: ST_TO_ADDR
// if not tmp then
30425: LD_VAR 0 2
30429: NOT
30430: IFFALSE 30434
// exit ;
30432: GO 30577
// for i := 1 to 2 do
30434: LD_ADDR_VAR 0 1
30438: PUSH
30439: DOUBLE
30440: LD_INT 1
30442: DEC
30443: ST_TO_ADDR
30444: LD_INT 2
30446: PUSH
30447: FOR_TO
30448: IFFALSE 30575
// begin uc_side := your_side ;
30450: LD_ADDR_OWVAR 20
30454: PUSH
30455: LD_OWVAR 2
30459: ST_TO_ADDR
// uc_nation := nation_american ;
30460: LD_ADDR_OWVAR 21
30464: PUSH
30465: LD_INT 1
30467: ST_TO_ADDR
// vc_chassis := us_morphling ;
30468: LD_ADDR_OWVAR 37
30472: PUSH
30473: LD_INT 5
30475: ST_TO_ADDR
// vc_engine := engine_siberite ;
30476: LD_ADDR_OWVAR 39
30480: PUSH
30481: LD_INT 3
30483: ST_TO_ADDR
// vc_control := control_computer ;
30484: LD_ADDR_OWVAR 38
30488: PUSH
30489: LD_INT 3
30491: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30492: LD_ADDR_OWVAR 40
30496: PUSH
30497: LD_INT 10
30499: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30500: LD_VAR 0 2
30504: PUSH
30505: LD_INT 1
30507: ARRAY
30508: PPUSH
30509: CALL_OW 310
30513: NOT
30514: IFFALSE 30561
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30516: CALL_OW 45
30520: PPUSH
30521: LD_VAR 0 2
30525: PUSH
30526: LD_INT 1
30528: ARRAY
30529: PPUSH
30530: CALL_OW 250
30534: PPUSH
30535: LD_VAR 0 2
30539: PUSH
30540: LD_INT 1
30542: ARRAY
30543: PPUSH
30544: CALL_OW 251
30548: PPUSH
30549: LD_INT 12
30551: PPUSH
30552: LD_INT 1
30554: PPUSH
30555: CALL_OW 50
30559: GO 30573
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30561: CALL_OW 45
30565: PPUSH
30566: LD_INT 1
30568: PPUSH
30569: CALL_OW 51
// end ;
30573: GO 30447
30575: POP
30576: POP
// end ;
30577: PPOPN 2
30579: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30580: LD_EXP 63
30584: IFFALSE 30592
30586: PUSH
30587: LD_EXP 109
30591: AND
30592: IFFALSE 30814
30594: GO 30596
30596: DISABLE
30597: LD_INT 0
30599: PPUSH
30600: PPUSH
30601: PPUSH
30602: PPUSH
30603: PPUSH
30604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30605: LD_ADDR_VAR 0 6
30609: PUSH
30610: LD_INT 22
30612: PUSH
30613: LD_OWVAR 2
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 21
30624: PUSH
30625: LD_INT 1
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 3
30634: PUSH
30635: LD_INT 23
30637: PUSH
30638: LD_INT 0
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: LIST
30653: PPUSH
30654: CALL_OW 69
30658: ST_TO_ADDR
// if not tmp then
30659: LD_VAR 0 6
30663: NOT
30664: IFFALSE 30668
// exit ;
30666: GO 30814
// s1 := rand ( 1 , 4 ) ;
30668: LD_ADDR_VAR 0 2
30672: PUSH
30673: LD_INT 1
30675: PPUSH
30676: LD_INT 4
30678: PPUSH
30679: CALL_OW 12
30683: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30684: LD_ADDR_VAR 0 4
30688: PUSH
30689: LD_VAR 0 6
30693: PUSH
30694: LD_INT 1
30696: ARRAY
30697: PPUSH
30698: LD_VAR 0 2
30702: PPUSH
30703: CALL_OW 259
30707: ST_TO_ADDR
// if s1 = 1 then
30708: LD_VAR 0 2
30712: PUSH
30713: LD_INT 1
30715: EQUAL
30716: IFFALSE 30736
// s2 := rand ( 2 , 4 ) else
30718: LD_ADDR_VAR 0 3
30722: PUSH
30723: LD_INT 2
30725: PPUSH
30726: LD_INT 4
30728: PPUSH
30729: CALL_OW 12
30733: ST_TO_ADDR
30734: GO 30744
// s2 := 1 ;
30736: LD_ADDR_VAR 0 3
30740: PUSH
30741: LD_INT 1
30743: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30744: LD_ADDR_VAR 0 5
30748: PUSH
30749: LD_VAR 0 6
30753: PUSH
30754: LD_INT 1
30756: ARRAY
30757: PPUSH
30758: LD_VAR 0 3
30762: PPUSH
30763: CALL_OW 259
30767: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30768: LD_VAR 0 6
30772: PUSH
30773: LD_INT 1
30775: ARRAY
30776: PPUSH
30777: LD_VAR 0 2
30781: PPUSH
30782: LD_VAR 0 5
30786: PPUSH
30787: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30791: LD_VAR 0 6
30795: PUSH
30796: LD_INT 1
30798: ARRAY
30799: PPUSH
30800: LD_VAR 0 3
30804: PPUSH
30805: LD_VAR 0 4
30809: PPUSH
30810: CALL_OW 237
// end ;
30814: PPOPN 6
30816: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30817: LD_EXP 63
30821: IFFALSE 30829
30823: PUSH
30824: LD_EXP 110
30828: AND
30829: IFFALSE 30908
30831: GO 30833
30833: DISABLE
30834: LD_INT 0
30836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30837: LD_ADDR_VAR 0 1
30841: PUSH
30842: LD_INT 22
30844: PUSH
30845: LD_OWVAR 2
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 30
30856: PUSH
30857: LD_INT 3
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PPUSH
30868: CALL_OW 69
30872: ST_TO_ADDR
// if not tmp then
30873: LD_VAR 0 1
30877: NOT
30878: IFFALSE 30882
// exit ;
30880: GO 30908
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30882: LD_VAR 0 1
30886: PUSH
30887: LD_INT 1
30889: PPUSH
30890: LD_VAR 0 1
30894: PPUSH
30895: CALL_OW 12
30899: ARRAY
30900: PPUSH
30901: LD_INT 1
30903: PPUSH
30904: CALL_OW 234
// end ;
30908: PPOPN 1
30910: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30911: LD_EXP 63
30915: IFFALSE 30923
30917: PUSH
30918: LD_EXP 111
30922: AND
30923: IFFALSE 31035
30925: GO 30927
30927: DISABLE
30928: LD_INT 0
30930: PPUSH
30931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30932: LD_ADDR_VAR 0 2
30936: PUSH
30937: LD_INT 22
30939: PUSH
30940: LD_OWVAR 2
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 2
30951: PUSH
30952: LD_INT 30
30954: PUSH
30955: LD_INT 27
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 30
30964: PUSH
30965: LD_INT 26
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 30
30974: PUSH
30975: LD_INT 28
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PPUSH
30992: CALL_OW 69
30996: ST_TO_ADDR
// if not tmp then
30997: LD_VAR 0 2
31001: NOT
31002: IFFALSE 31006
// exit ;
31004: GO 31035
// for i in tmp do
31006: LD_ADDR_VAR 0 1
31010: PUSH
31011: LD_VAR 0 2
31015: PUSH
31016: FOR_IN
31017: IFFALSE 31033
// SetLives ( i , 1 ) ;
31019: LD_VAR 0 1
31023: PPUSH
31024: LD_INT 1
31026: PPUSH
31027: CALL_OW 234
31031: GO 31016
31033: POP
31034: POP
// end ;
31035: PPOPN 2
31037: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31038: LD_EXP 63
31042: IFFALSE 31050
31044: PUSH
31045: LD_EXP 112
31049: AND
31050: IFFALSE 31337
31052: GO 31054
31054: DISABLE
31055: LD_INT 0
31057: PPUSH
31058: PPUSH
31059: PPUSH
// begin i := rand ( 1 , 7 ) ;
31060: LD_ADDR_VAR 0 1
31064: PUSH
31065: LD_INT 1
31067: PPUSH
31068: LD_INT 7
31070: PPUSH
31071: CALL_OW 12
31075: ST_TO_ADDR
// case i of 1 :
31076: LD_VAR 0 1
31080: PUSH
31081: LD_INT 1
31083: DOUBLE
31084: EQUAL
31085: IFTRUE 31089
31087: GO 31099
31089: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31090: LD_STRING earthquake(getX(game), 0, 32)
31092: PPUSH
31093: CALL_OW 559
31097: GO 31337
31099: LD_INT 2
31101: DOUBLE
31102: EQUAL
31103: IFTRUE 31107
31105: GO 31121
31107: POP
// begin ToLua ( displayStucuk(); ) ;
31108: LD_STRING displayStucuk();
31110: PPUSH
31111: CALL_OW 559
// ResetFog ;
31115: CALL_OW 335
// end ; 3 :
31119: GO 31337
31121: LD_INT 3
31123: DOUBLE
31124: EQUAL
31125: IFTRUE 31129
31127: GO 31233
31129: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31130: LD_ADDR_VAR 0 2
31134: PUSH
31135: LD_INT 22
31137: PUSH
31138: LD_OWVAR 2
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 25
31149: PUSH
31150: LD_INT 1
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PPUSH
31161: CALL_OW 69
31165: ST_TO_ADDR
// if not tmp then
31166: LD_VAR 0 2
31170: NOT
31171: IFFALSE 31175
// exit ;
31173: GO 31337
// un := tmp [ rand ( 1 , tmp ) ] ;
31175: LD_ADDR_VAR 0 3
31179: PUSH
31180: LD_VAR 0 2
31184: PUSH
31185: LD_INT 1
31187: PPUSH
31188: LD_VAR 0 2
31192: PPUSH
31193: CALL_OW 12
31197: ARRAY
31198: ST_TO_ADDR
// if Crawls ( un ) then
31199: LD_VAR 0 3
31203: PPUSH
31204: CALL_OW 318
31208: IFFALSE 31219
// ComWalk ( un ) ;
31210: LD_VAR 0 3
31214: PPUSH
31215: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31219: LD_VAR 0 3
31223: PPUSH
31224: LD_INT 8
31226: PPUSH
31227: CALL_OW 336
// end ; 4 :
31231: GO 31337
31233: LD_INT 4
31235: DOUBLE
31236: EQUAL
31237: IFTRUE 31241
31239: GO 31315
31241: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31242: LD_ADDR_VAR 0 2
31246: PUSH
31247: LD_INT 22
31249: PUSH
31250: LD_OWVAR 2
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 30
31261: PUSH
31262: LD_INT 29
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PPUSH
31273: CALL_OW 69
31277: ST_TO_ADDR
// if not tmp then
31278: LD_VAR 0 2
31282: NOT
31283: IFFALSE 31287
// exit ;
31285: GO 31337
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31287: LD_VAR 0 2
31291: PUSH
31292: LD_INT 1
31294: ARRAY
31295: PPUSH
31296: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31300: LD_VAR 0 2
31304: PUSH
31305: LD_INT 1
31307: ARRAY
31308: PPUSH
31309: CALL_OW 65
// end ; 5 .. 7 :
31313: GO 31337
31315: LD_INT 5
31317: DOUBLE
31318: GREATEREQUAL
31319: IFFALSE 31327
31321: LD_INT 7
31323: DOUBLE
31324: LESSEQUAL
31325: IFTRUE 31329
31327: GO 31336
31329: POP
// StreamSibBomb ; end ;
31330: CALL 27518 0 0
31334: GO 31337
31336: POP
// end ;
31337: PPOPN 3
31339: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31340: LD_EXP 63
31344: IFFALSE 31352
31346: PUSH
31347: LD_EXP 113
31351: AND
31352: IFFALSE 31508
31354: GO 31356
31356: DISABLE
31357: LD_INT 0
31359: PPUSH
31360: PPUSH
31361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31362: LD_ADDR_VAR 0 2
31366: PUSH
31367: LD_INT 81
31369: PUSH
31370: LD_OWVAR 2
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 2
31381: PUSH
31382: LD_INT 21
31384: PUSH
31385: LD_INT 1
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 21
31394: PUSH
31395: LD_INT 2
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: LIST
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PPUSH
31411: CALL_OW 69
31415: ST_TO_ADDR
// if not tmp then
31416: LD_VAR 0 2
31420: NOT
31421: IFFALSE 31425
// exit ;
31423: GO 31508
// p := 0 ;
31425: LD_ADDR_VAR 0 3
31429: PUSH
31430: LD_INT 0
31432: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31433: LD_INT 35
31435: PPUSH
31436: CALL_OW 67
// p := p + 1 ;
31440: LD_ADDR_VAR 0 3
31444: PUSH
31445: LD_VAR 0 3
31449: PUSH
31450: LD_INT 1
31452: PLUS
31453: ST_TO_ADDR
// for i in tmp do
31454: LD_ADDR_VAR 0 1
31458: PUSH
31459: LD_VAR 0 2
31463: PUSH
31464: FOR_IN
31465: IFFALSE 31496
// if GetLives ( i ) < 1000 then
31467: LD_VAR 0 1
31471: PPUSH
31472: CALL_OW 256
31476: PUSH
31477: LD_INT 1000
31479: LESS
31480: IFFALSE 31494
// SetLives ( i , 1000 ) ;
31482: LD_VAR 0 1
31486: PPUSH
31487: LD_INT 1000
31489: PPUSH
31490: CALL_OW 234
31494: GO 31464
31496: POP
31497: POP
// until p > 20 ;
31498: LD_VAR 0 3
31502: PUSH
31503: LD_INT 20
31505: GREATER
31506: IFFALSE 31433
// end ;
31508: PPOPN 3
31510: END
// every 0 0$1 trigger StreamModeActive and sTime do
31511: LD_EXP 63
31515: IFFALSE 31523
31517: PUSH
31518: LD_EXP 114
31522: AND
31523: IFFALSE 31558
31525: GO 31527
31527: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31528: LD_INT 28
31530: PPUSH
31531: LD_OWVAR 2
31535: PPUSH
31536: LD_INT 2
31538: PPUSH
31539: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31543: LD_INT 30
31545: PPUSH
31546: LD_OWVAR 2
31550: PPUSH
31551: LD_INT 2
31553: PPUSH
31554: CALL_OW 322
// end ;
31558: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31559: LD_EXP 63
31563: IFFALSE 31571
31565: PUSH
31566: LD_EXP 115
31570: AND
31571: IFFALSE 31692
31573: GO 31575
31575: DISABLE
31576: LD_INT 0
31578: PPUSH
31579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31580: LD_ADDR_VAR 0 2
31584: PUSH
31585: LD_INT 22
31587: PUSH
31588: LD_OWVAR 2
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 21
31599: PUSH
31600: LD_INT 1
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 3
31609: PUSH
31610: LD_INT 23
31612: PUSH
31613: LD_INT 0
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: LIST
31628: PPUSH
31629: CALL_OW 69
31633: ST_TO_ADDR
// if not tmp then
31634: LD_VAR 0 2
31638: NOT
31639: IFFALSE 31643
// exit ;
31641: GO 31692
// for i in tmp do
31643: LD_ADDR_VAR 0 1
31647: PUSH
31648: LD_VAR 0 2
31652: PUSH
31653: FOR_IN
31654: IFFALSE 31690
// begin if Crawls ( i ) then
31656: LD_VAR 0 1
31660: PPUSH
31661: CALL_OW 318
31665: IFFALSE 31676
// ComWalk ( i ) ;
31667: LD_VAR 0 1
31671: PPUSH
31672: CALL_OW 138
// SetClass ( i , 2 ) ;
31676: LD_VAR 0 1
31680: PPUSH
31681: LD_INT 2
31683: PPUSH
31684: CALL_OW 336
// end ;
31688: GO 31653
31690: POP
31691: POP
// end ;
31692: PPOPN 2
31694: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31695: LD_EXP 63
31699: IFFALSE 31707
31701: PUSH
31702: LD_EXP 116
31706: AND
31707: IFFALSE 31997
31709: GO 31711
31711: DISABLE
31712: LD_INT 0
31714: PPUSH
31715: PPUSH
31716: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31717: LD_OWVAR 2
31721: PPUSH
31722: LD_INT 9
31724: PPUSH
31725: LD_INT 1
31727: PPUSH
31728: LD_INT 1
31730: PPUSH
31731: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31735: LD_INT 9
31737: PPUSH
31738: LD_OWVAR 2
31742: PPUSH
31743: CALL_OW 343
// uc_side := 9 ;
31747: LD_ADDR_OWVAR 20
31751: PUSH
31752: LD_INT 9
31754: ST_TO_ADDR
// uc_nation := 2 ;
31755: LD_ADDR_OWVAR 21
31759: PUSH
31760: LD_INT 2
31762: ST_TO_ADDR
// hc_name := Dark Warrior ;
31763: LD_ADDR_OWVAR 26
31767: PUSH
31768: LD_STRING Dark Warrior
31770: ST_TO_ADDR
// hc_gallery :=  ;
31771: LD_ADDR_OWVAR 33
31775: PUSH
31776: LD_STRING 
31778: ST_TO_ADDR
// hc_noskilllimit := true ;
31779: LD_ADDR_OWVAR 76
31783: PUSH
31784: LD_INT 1
31786: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31787: LD_ADDR_OWVAR 31
31791: PUSH
31792: LD_INT 30
31794: PUSH
31795: LD_INT 30
31797: PUSH
31798: LD_INT 30
31800: PUSH
31801: LD_INT 30
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: ST_TO_ADDR
// un := CreateHuman ;
31810: LD_ADDR_VAR 0 3
31814: PUSH
31815: CALL_OW 44
31819: ST_TO_ADDR
// hc_noskilllimit := false ;
31820: LD_ADDR_OWVAR 76
31824: PUSH
31825: LD_INT 0
31827: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31828: LD_VAR 0 3
31832: PPUSH
31833: LD_INT 1
31835: PPUSH
31836: CALL_OW 51
// ToLua ( playRanger() ) ;
31840: LD_STRING playRanger()
31842: PPUSH
31843: CALL_OW 559
// p := 0 ;
31847: LD_ADDR_VAR 0 2
31851: PUSH
31852: LD_INT 0
31854: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31855: LD_INT 35
31857: PPUSH
31858: CALL_OW 67
// p := p + 1 ;
31862: LD_ADDR_VAR 0 2
31866: PUSH
31867: LD_VAR 0 2
31871: PUSH
31872: LD_INT 1
31874: PLUS
31875: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31876: LD_VAR 0 3
31880: PPUSH
31881: CALL_OW 256
31885: PUSH
31886: LD_INT 1000
31888: LESS
31889: IFFALSE 31903
// SetLives ( un , 1000 ) ;
31891: LD_VAR 0 3
31895: PPUSH
31896: LD_INT 1000
31898: PPUSH
31899: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31903: LD_VAR 0 3
31907: PPUSH
31908: LD_INT 81
31910: PUSH
31911: LD_OWVAR 2
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 91
31922: PUSH
31923: LD_VAR 0 3
31927: PUSH
31928: LD_INT 30
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: LIST
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PPUSH
31940: CALL_OW 69
31944: PPUSH
31945: LD_VAR 0 3
31949: PPUSH
31950: CALL_OW 74
31954: PPUSH
31955: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31959: LD_VAR 0 2
31963: PUSH
31964: LD_INT 80
31966: GREATER
31967: IFTRUE 31980
31969: PUSH
31970: LD_VAR 0 3
31974: PPUSH
31975: CALL_OW 301
31979: OR
31980: IFFALSE 31855
// if un then
31982: LD_VAR 0 3
31986: IFFALSE 31997
// RemoveUnit ( un ) ;
31988: LD_VAR 0 3
31992: PPUSH
31993: CALL_OW 64
// end ;
31997: PPOPN 3
31999: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32000: LD_EXP 117
32004: IFFALSE 32120
32006: GO 32008
32008: DISABLE
32009: LD_INT 0
32011: PPUSH
32012: PPUSH
32013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32014: LD_ADDR_VAR 0 2
32018: PUSH
32019: LD_INT 81
32021: PUSH
32022: LD_OWVAR 2
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 21
32033: PUSH
32034: LD_INT 1
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PPUSH
32045: CALL_OW 69
32049: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32050: LD_STRING playComputer()
32052: PPUSH
32053: CALL_OW 559
// if not tmp then
32057: LD_VAR 0 2
32061: NOT
32062: IFFALSE 32066
// exit ;
32064: GO 32120
// for i in tmp do
32066: LD_ADDR_VAR 0 1
32070: PUSH
32071: LD_VAR 0 2
32075: PUSH
32076: FOR_IN
32077: IFFALSE 32118
// for j := 1 to 4 do
32079: LD_ADDR_VAR 0 3
32083: PUSH
32084: DOUBLE
32085: LD_INT 1
32087: DEC
32088: ST_TO_ADDR
32089: LD_INT 4
32091: PUSH
32092: FOR_TO
32093: IFFALSE 32114
// SetSkill ( i , j , 10 ) ;
32095: LD_VAR 0 1
32099: PPUSH
32100: LD_VAR 0 3
32104: PPUSH
32105: LD_INT 10
32107: PPUSH
32108: CALL_OW 237
32112: GO 32092
32114: POP
32115: POP
32116: GO 32076
32118: POP
32119: POP
// end ;
32120: PPOPN 3
32122: END
// every 0 0$1 trigger s30 do var i , tmp ;
32123: LD_EXP 118
32127: IFFALSE 32196
32129: GO 32131
32131: DISABLE
32132: LD_INT 0
32134: PPUSH
32135: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32136: LD_ADDR_VAR 0 2
32140: PUSH
32141: LD_INT 22
32143: PUSH
32144: LD_OWVAR 2
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PPUSH
32153: CALL_OW 69
32157: ST_TO_ADDR
// if not tmp then
32158: LD_VAR 0 2
32162: NOT
32163: IFFALSE 32167
// exit ;
32165: GO 32196
// for i in tmp do
32167: LD_ADDR_VAR 0 1
32171: PUSH
32172: LD_VAR 0 2
32176: PUSH
32177: FOR_IN
32178: IFFALSE 32194
// SetLives ( i , 300 ) ;
32180: LD_VAR 0 1
32184: PPUSH
32185: LD_INT 300
32187: PPUSH
32188: CALL_OW 234
32192: GO 32177
32194: POP
32195: POP
// end ;
32196: PPOPN 2
32198: END
// every 0 0$1 trigger s60 do var i , tmp ;
32199: LD_EXP 119
32203: IFFALSE 32272
32205: GO 32207
32207: DISABLE
32208: LD_INT 0
32210: PPUSH
32211: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32212: LD_ADDR_VAR 0 2
32216: PUSH
32217: LD_INT 22
32219: PUSH
32220: LD_OWVAR 2
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PPUSH
32229: CALL_OW 69
32233: ST_TO_ADDR
// if not tmp then
32234: LD_VAR 0 2
32238: NOT
32239: IFFALSE 32243
// exit ;
32241: GO 32272
// for i in tmp do
32243: LD_ADDR_VAR 0 1
32247: PUSH
32248: LD_VAR 0 2
32252: PUSH
32253: FOR_IN
32254: IFFALSE 32270
// SetLives ( i , 600 ) ;
32256: LD_VAR 0 1
32260: PPUSH
32261: LD_INT 600
32263: PPUSH
32264: CALL_OW 234
32268: GO 32253
32270: POP
32271: POP
// end ;
32272: PPOPN 2
32274: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32275: LD_INT 0
32277: PPUSH
// case cmd of 301 :
32278: LD_VAR 0 1
32282: PUSH
32283: LD_INT 301
32285: DOUBLE
32286: EQUAL
32287: IFTRUE 32291
32289: GO 32323
32291: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32292: LD_VAR 0 6
32296: PPUSH
32297: LD_VAR 0 7
32301: PPUSH
32302: LD_VAR 0 8
32306: PPUSH
32307: LD_VAR 0 4
32311: PPUSH
32312: LD_VAR 0 5
32316: PPUSH
32317: CALL 33536 0 5
32321: GO 32444
32323: LD_INT 302
32325: DOUBLE
32326: EQUAL
32327: IFTRUE 32331
32329: GO 32368
32331: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32332: LD_VAR 0 6
32336: PPUSH
32337: LD_VAR 0 7
32341: PPUSH
32342: LD_VAR 0 8
32346: PPUSH
32347: LD_VAR 0 9
32351: PPUSH
32352: LD_VAR 0 4
32356: PPUSH
32357: LD_VAR 0 5
32361: PPUSH
32362: CALL 33627 0 6
32366: GO 32444
32368: LD_INT 303
32370: DOUBLE
32371: EQUAL
32372: IFTRUE 32376
32374: GO 32413
32376: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32377: LD_VAR 0 6
32381: PPUSH
32382: LD_VAR 0 7
32386: PPUSH
32387: LD_VAR 0 8
32391: PPUSH
32392: LD_VAR 0 9
32396: PPUSH
32397: LD_VAR 0 4
32401: PPUSH
32402: LD_VAR 0 5
32406: PPUSH
32407: CALL 32449 0 6
32411: GO 32444
32413: LD_INT 304
32415: DOUBLE
32416: EQUAL
32417: IFTRUE 32421
32419: GO 32443
32421: POP
// hHackTeleport ( unit , x , y ) ; end ;
32422: LD_VAR 0 2
32426: PPUSH
32427: LD_VAR 0 4
32431: PPUSH
32432: LD_VAR 0 5
32436: PPUSH
32437: CALL 34220 0 3
32441: GO 32444
32443: POP
// end ;
32444: LD_VAR 0 12
32448: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32449: LD_INT 0
32451: PPUSH
32452: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32453: LD_VAR 0 1
32457: PUSH
32458: LD_INT 1
32460: LESS
32461: IFTRUE 32473
32463: PUSH
32464: LD_VAR 0 1
32468: PUSH
32469: LD_INT 3
32471: GREATER
32472: OR
32473: IFTRUE 32491
32475: PUSH
32476: LD_VAR 0 5
32480: PPUSH
32481: LD_VAR 0 6
32485: PPUSH
32486: CALL_OW 428
32490: OR
32491: IFFALSE 32495
// exit ;
32493: GO 33223
// uc_side := your_side ;
32495: LD_ADDR_OWVAR 20
32499: PUSH
32500: LD_OWVAR 2
32504: ST_TO_ADDR
// uc_nation := nation ;
32505: LD_ADDR_OWVAR 21
32509: PUSH
32510: LD_VAR 0 1
32514: ST_TO_ADDR
// bc_level = 1 ;
32515: LD_ADDR_OWVAR 43
32519: PUSH
32520: LD_INT 1
32522: ST_TO_ADDR
// case btype of 1 :
32523: LD_VAR 0 2
32527: PUSH
32528: LD_INT 1
32530: DOUBLE
32531: EQUAL
32532: IFTRUE 32536
32534: GO 32547
32536: POP
// bc_type := b_depot ; 2 :
32537: LD_ADDR_OWVAR 42
32541: PUSH
32542: LD_INT 0
32544: ST_TO_ADDR
32545: GO 33167
32547: LD_INT 2
32549: DOUBLE
32550: EQUAL
32551: IFTRUE 32555
32553: GO 32566
32555: POP
// bc_type := b_warehouse ; 3 :
32556: LD_ADDR_OWVAR 42
32560: PUSH
32561: LD_INT 1
32563: ST_TO_ADDR
32564: GO 33167
32566: LD_INT 3
32568: DOUBLE
32569: EQUAL
32570: IFTRUE 32574
32572: GO 32585
32574: POP
// bc_type := b_lab ; 4 .. 9 :
32575: LD_ADDR_OWVAR 42
32579: PUSH
32580: LD_INT 6
32582: ST_TO_ADDR
32583: GO 33167
32585: LD_INT 4
32587: DOUBLE
32588: GREATEREQUAL
32589: IFFALSE 32597
32591: LD_INT 9
32593: DOUBLE
32594: LESSEQUAL
32595: IFTRUE 32599
32597: GO 32659
32599: POP
// begin bc_type := b_lab_half ;
32600: LD_ADDR_OWVAR 42
32604: PUSH
32605: LD_INT 7
32607: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32608: LD_ADDR_OWVAR 44
32612: PUSH
32613: LD_INT 10
32615: PUSH
32616: LD_INT 11
32618: PUSH
32619: LD_INT 12
32621: PUSH
32622: LD_INT 15
32624: PUSH
32625: LD_INT 14
32627: PUSH
32628: LD_INT 13
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: PUSH
32639: LD_VAR 0 2
32643: PUSH
32644: LD_INT 3
32646: MINUS
32647: ARRAY
32648: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32649: LD_ADDR_OWVAR 45
32653: PUSH
32654: LD_INT 9
32656: ST_TO_ADDR
// end ; 10 .. 13 :
32657: GO 33167
32659: LD_INT 10
32661: DOUBLE
32662: GREATEREQUAL
32663: IFFALSE 32671
32665: LD_INT 13
32667: DOUBLE
32668: LESSEQUAL
32669: IFTRUE 32673
32671: GO 32750
32673: POP
// begin bc_type := b_lab_full ;
32674: LD_ADDR_OWVAR 42
32678: PUSH
32679: LD_INT 8
32681: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32682: LD_ADDR_OWVAR 44
32686: PUSH
32687: LD_INT 10
32689: PUSH
32690: LD_INT 12
32692: PUSH
32693: LD_INT 14
32695: PUSH
32696: LD_INT 13
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: PUSH
32705: LD_VAR 0 2
32709: PUSH
32710: LD_INT 9
32712: MINUS
32713: ARRAY
32714: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32715: LD_ADDR_OWVAR 45
32719: PUSH
32720: LD_INT 11
32722: PUSH
32723: LD_INT 15
32725: PUSH
32726: LD_INT 12
32728: PUSH
32729: LD_INT 15
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: PUSH
32738: LD_VAR 0 2
32742: PUSH
32743: LD_INT 9
32745: MINUS
32746: ARRAY
32747: ST_TO_ADDR
// end ; 14 :
32748: GO 33167
32750: LD_INT 14
32752: DOUBLE
32753: EQUAL
32754: IFTRUE 32758
32756: GO 32769
32758: POP
// bc_type := b_workshop ; 15 :
32759: LD_ADDR_OWVAR 42
32763: PUSH
32764: LD_INT 2
32766: ST_TO_ADDR
32767: GO 33167
32769: LD_INT 15
32771: DOUBLE
32772: EQUAL
32773: IFTRUE 32777
32775: GO 32788
32777: POP
// bc_type := b_factory ; 16 :
32778: LD_ADDR_OWVAR 42
32782: PUSH
32783: LD_INT 3
32785: ST_TO_ADDR
32786: GO 33167
32788: LD_INT 16
32790: DOUBLE
32791: EQUAL
32792: IFTRUE 32796
32794: GO 32807
32796: POP
// bc_type := b_ext_gun ; 17 :
32797: LD_ADDR_OWVAR 42
32801: PUSH
32802: LD_INT 17
32804: ST_TO_ADDR
32805: GO 33167
32807: LD_INT 17
32809: DOUBLE
32810: EQUAL
32811: IFTRUE 32815
32813: GO 32843
32815: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32816: LD_ADDR_OWVAR 42
32820: PUSH
32821: LD_INT 19
32823: PUSH
32824: LD_INT 23
32826: PUSH
32827: LD_INT 19
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: LIST
32834: PUSH
32835: LD_VAR 0 1
32839: ARRAY
32840: ST_TO_ADDR
32841: GO 33167
32843: LD_INT 18
32845: DOUBLE
32846: EQUAL
32847: IFTRUE 32851
32849: GO 32862
32851: POP
// bc_type := b_ext_radar ; 19 :
32852: LD_ADDR_OWVAR 42
32856: PUSH
32857: LD_INT 20
32859: ST_TO_ADDR
32860: GO 33167
32862: LD_INT 19
32864: DOUBLE
32865: EQUAL
32866: IFTRUE 32870
32868: GO 32881
32870: POP
// bc_type := b_ext_radio ; 20 :
32871: LD_ADDR_OWVAR 42
32875: PUSH
32876: LD_INT 22
32878: ST_TO_ADDR
32879: GO 33167
32881: LD_INT 20
32883: DOUBLE
32884: EQUAL
32885: IFTRUE 32889
32887: GO 32900
32889: POP
// bc_type := b_ext_siberium ; 21 :
32890: LD_ADDR_OWVAR 42
32894: PUSH
32895: LD_INT 21
32897: ST_TO_ADDR
32898: GO 33167
32900: LD_INT 21
32902: DOUBLE
32903: EQUAL
32904: IFTRUE 32908
32906: GO 32919
32908: POP
// bc_type := b_ext_computer ; 22 :
32909: LD_ADDR_OWVAR 42
32913: PUSH
32914: LD_INT 24
32916: ST_TO_ADDR
32917: GO 33167
32919: LD_INT 22
32921: DOUBLE
32922: EQUAL
32923: IFTRUE 32927
32925: GO 32938
32927: POP
// bc_type := b_ext_track ; 23 :
32928: LD_ADDR_OWVAR 42
32932: PUSH
32933: LD_INT 16
32935: ST_TO_ADDR
32936: GO 33167
32938: LD_INT 23
32940: DOUBLE
32941: EQUAL
32942: IFTRUE 32946
32944: GO 32957
32946: POP
// bc_type := b_ext_laser ; 24 :
32947: LD_ADDR_OWVAR 42
32951: PUSH
32952: LD_INT 25
32954: ST_TO_ADDR
32955: GO 33167
32957: LD_INT 24
32959: DOUBLE
32960: EQUAL
32961: IFTRUE 32965
32963: GO 32976
32965: POP
// bc_type := b_control_tower ; 25 :
32966: LD_ADDR_OWVAR 42
32970: PUSH
32971: LD_INT 36
32973: ST_TO_ADDR
32974: GO 33167
32976: LD_INT 25
32978: DOUBLE
32979: EQUAL
32980: IFTRUE 32984
32982: GO 32995
32984: POP
// bc_type := b_breastwork ; 26 :
32985: LD_ADDR_OWVAR 42
32989: PUSH
32990: LD_INT 31
32992: ST_TO_ADDR
32993: GO 33167
32995: LD_INT 26
32997: DOUBLE
32998: EQUAL
32999: IFTRUE 33003
33001: GO 33014
33003: POP
// bc_type := b_bunker ; 27 :
33004: LD_ADDR_OWVAR 42
33008: PUSH
33009: LD_INT 32
33011: ST_TO_ADDR
33012: GO 33167
33014: LD_INT 27
33016: DOUBLE
33017: EQUAL
33018: IFTRUE 33022
33020: GO 33033
33022: POP
// bc_type := b_turret ; 28 :
33023: LD_ADDR_OWVAR 42
33027: PUSH
33028: LD_INT 33
33030: ST_TO_ADDR
33031: GO 33167
33033: LD_INT 28
33035: DOUBLE
33036: EQUAL
33037: IFTRUE 33041
33039: GO 33052
33041: POP
// bc_type := b_armoury ; 29 :
33042: LD_ADDR_OWVAR 42
33046: PUSH
33047: LD_INT 4
33049: ST_TO_ADDR
33050: GO 33167
33052: LD_INT 29
33054: DOUBLE
33055: EQUAL
33056: IFTRUE 33060
33058: GO 33071
33060: POP
// bc_type := b_barracks ; 30 :
33061: LD_ADDR_OWVAR 42
33065: PUSH
33066: LD_INT 5
33068: ST_TO_ADDR
33069: GO 33167
33071: LD_INT 30
33073: DOUBLE
33074: EQUAL
33075: IFTRUE 33079
33077: GO 33090
33079: POP
// bc_type := b_solar_power ; 31 :
33080: LD_ADDR_OWVAR 42
33084: PUSH
33085: LD_INT 27
33087: ST_TO_ADDR
33088: GO 33167
33090: LD_INT 31
33092: DOUBLE
33093: EQUAL
33094: IFTRUE 33098
33096: GO 33109
33098: POP
// bc_type := b_oil_power ; 32 :
33099: LD_ADDR_OWVAR 42
33103: PUSH
33104: LD_INT 26
33106: ST_TO_ADDR
33107: GO 33167
33109: LD_INT 32
33111: DOUBLE
33112: EQUAL
33113: IFTRUE 33117
33115: GO 33128
33117: POP
// bc_type := b_siberite_power ; 33 :
33118: LD_ADDR_OWVAR 42
33122: PUSH
33123: LD_INT 28
33125: ST_TO_ADDR
33126: GO 33167
33128: LD_INT 33
33130: DOUBLE
33131: EQUAL
33132: IFTRUE 33136
33134: GO 33147
33136: POP
// bc_type := b_oil_mine ; 34 :
33137: LD_ADDR_OWVAR 42
33141: PUSH
33142: LD_INT 29
33144: ST_TO_ADDR
33145: GO 33167
33147: LD_INT 34
33149: DOUBLE
33150: EQUAL
33151: IFTRUE 33155
33153: GO 33166
33155: POP
// bc_type := b_siberite_mine ; end ;
33156: LD_ADDR_OWVAR 42
33160: PUSH
33161: LD_INT 30
33163: ST_TO_ADDR
33164: GO 33167
33166: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33167: LD_ADDR_VAR 0 8
33171: PUSH
33172: LD_VAR 0 5
33176: PPUSH
33177: LD_VAR 0 6
33181: PPUSH
33182: LD_VAR 0 3
33186: PPUSH
33187: CALL_OW 47
33191: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33192: LD_OWVAR 42
33196: PUSH
33197: LD_INT 32
33199: PUSH
33200: LD_INT 33
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: IN
33207: IFFALSE 33223
// PlaceWeaponTurret ( b , weapon ) ;
33209: LD_VAR 0 8
33213: PPUSH
33214: LD_VAR 0 4
33218: PPUSH
33219: CALL_OW 431
// end ;
33223: LD_VAR 0 7
33227: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33228: LD_INT 0
33230: PPUSH
33231: PPUSH
33232: PPUSH
33233: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33234: LD_ADDR_VAR 0 4
33238: PUSH
33239: LD_INT 22
33241: PUSH
33242: LD_OWVAR 2
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 2
33253: PUSH
33254: LD_INT 30
33256: PUSH
33257: LD_INT 0
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 30
33266: PUSH
33267: LD_INT 1
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: LIST
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PPUSH
33283: CALL_OW 69
33287: ST_TO_ADDR
// if not tmp then
33288: LD_VAR 0 4
33292: NOT
33293: IFFALSE 33297
// exit ;
33295: GO 33356
// for i in tmp do
33297: LD_ADDR_VAR 0 2
33301: PUSH
33302: LD_VAR 0 4
33306: PUSH
33307: FOR_IN
33308: IFFALSE 33354
// for j = 1 to 3 do
33310: LD_ADDR_VAR 0 3
33314: PUSH
33315: DOUBLE
33316: LD_INT 1
33318: DEC
33319: ST_TO_ADDR
33320: LD_INT 3
33322: PUSH
33323: FOR_TO
33324: IFFALSE 33350
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33326: LD_VAR 0 2
33330: PPUSH
33331: CALL_OW 274
33335: PPUSH
33336: LD_VAR 0 3
33340: PPUSH
33341: LD_INT 99999
33343: PPUSH
33344: CALL_OW 277
33348: GO 33323
33350: POP
33351: POP
33352: GO 33307
33354: POP
33355: POP
// end ;
33356: LD_VAR 0 1
33360: RET
// export function hHackSetLevel10 ; var i , j ; begin
33361: LD_INT 0
33363: PPUSH
33364: PPUSH
33365: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33366: LD_ADDR_VAR 0 2
33370: PUSH
33371: LD_INT 21
33373: PUSH
33374: LD_INT 1
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PPUSH
33381: CALL_OW 69
33385: PUSH
33386: FOR_IN
33387: IFFALSE 33439
// if IsSelected ( i ) then
33389: LD_VAR 0 2
33393: PPUSH
33394: CALL_OW 306
33398: IFFALSE 33437
// begin for j := 1 to 4 do
33400: LD_ADDR_VAR 0 3
33404: PUSH
33405: DOUBLE
33406: LD_INT 1
33408: DEC
33409: ST_TO_ADDR
33410: LD_INT 4
33412: PUSH
33413: FOR_TO
33414: IFFALSE 33435
// SetSkill ( i , j , 10 ) ;
33416: LD_VAR 0 2
33420: PPUSH
33421: LD_VAR 0 3
33425: PPUSH
33426: LD_INT 10
33428: PPUSH
33429: CALL_OW 237
33433: GO 33413
33435: POP
33436: POP
// end ;
33437: GO 33386
33439: POP
33440: POP
// end ;
33441: LD_VAR 0 1
33445: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33446: LD_INT 0
33448: PPUSH
33449: PPUSH
33450: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33451: LD_ADDR_VAR 0 2
33455: PUSH
33456: LD_INT 22
33458: PUSH
33459: LD_OWVAR 2
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 21
33470: PUSH
33471: LD_INT 1
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PPUSH
33482: CALL_OW 69
33486: PUSH
33487: FOR_IN
33488: IFFALSE 33529
// begin for j := 1 to 4 do
33490: LD_ADDR_VAR 0 3
33494: PUSH
33495: DOUBLE
33496: LD_INT 1
33498: DEC
33499: ST_TO_ADDR
33500: LD_INT 4
33502: PUSH
33503: FOR_TO
33504: IFFALSE 33525
// SetSkill ( i , j , 10 ) ;
33506: LD_VAR 0 2
33510: PPUSH
33511: LD_VAR 0 3
33515: PPUSH
33516: LD_INT 10
33518: PPUSH
33519: CALL_OW 237
33523: GO 33503
33525: POP
33526: POP
// end ;
33527: GO 33487
33529: POP
33530: POP
// end ;
33531: LD_VAR 0 1
33535: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33536: LD_INT 0
33538: PPUSH
// uc_side := your_side ;
33539: LD_ADDR_OWVAR 20
33543: PUSH
33544: LD_OWVAR 2
33548: ST_TO_ADDR
// uc_nation := nation ;
33549: LD_ADDR_OWVAR 21
33553: PUSH
33554: LD_VAR 0 1
33558: ST_TO_ADDR
// InitHc ;
33559: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33563: LD_INT 0
33565: PPUSH
33566: LD_VAR 0 2
33570: PPUSH
33571: LD_VAR 0 3
33575: PPUSH
33576: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33580: LD_VAR 0 4
33584: PPUSH
33585: LD_VAR 0 5
33589: PPUSH
33590: CALL_OW 428
33594: PUSH
33595: LD_INT 0
33597: EQUAL
33598: IFFALSE 33622
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33600: CALL_OW 44
33604: PPUSH
33605: LD_VAR 0 4
33609: PPUSH
33610: LD_VAR 0 5
33614: PPUSH
33615: LD_INT 1
33617: PPUSH
33618: CALL_OW 48
// end ;
33622: LD_VAR 0 6
33626: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33627: LD_INT 0
33629: PPUSH
33630: PPUSH
// uc_side := your_side ;
33631: LD_ADDR_OWVAR 20
33635: PUSH
33636: LD_OWVAR 2
33640: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33641: LD_VAR 0 1
33645: PUSH
33646: LD_INT 1
33648: PUSH
33649: LD_INT 2
33651: PUSH
33652: LD_INT 3
33654: PUSH
33655: LD_INT 4
33657: PUSH
33658: LD_INT 5
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: IN
33668: IFFALSE 33680
// uc_nation := nation_american else
33670: LD_ADDR_OWVAR 21
33674: PUSH
33675: LD_INT 1
33677: ST_TO_ADDR
33678: GO 33723
// if chassis in [ 11 , 12 , 13 , 14 ] then
33680: LD_VAR 0 1
33684: PUSH
33685: LD_INT 11
33687: PUSH
33688: LD_INT 12
33690: PUSH
33691: LD_INT 13
33693: PUSH
33694: LD_INT 14
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: IN
33703: IFFALSE 33715
// uc_nation := nation_arabian else
33705: LD_ADDR_OWVAR 21
33709: PUSH
33710: LD_INT 2
33712: ST_TO_ADDR
33713: GO 33723
// uc_nation := nation_russian ;
33715: LD_ADDR_OWVAR 21
33719: PUSH
33720: LD_INT 3
33722: ST_TO_ADDR
// vc_chassis := chassis ;
33723: LD_ADDR_OWVAR 37
33727: PUSH
33728: LD_VAR 0 1
33732: ST_TO_ADDR
// vc_engine := engine ;
33733: LD_ADDR_OWVAR 39
33737: PUSH
33738: LD_VAR 0 2
33742: ST_TO_ADDR
// vc_control := control ;
33743: LD_ADDR_OWVAR 38
33747: PUSH
33748: LD_VAR 0 3
33752: ST_TO_ADDR
// vc_weapon := weapon ;
33753: LD_ADDR_OWVAR 40
33757: PUSH
33758: LD_VAR 0 4
33762: ST_TO_ADDR
// un := CreateVehicle ;
33763: LD_ADDR_VAR 0 8
33767: PUSH
33768: CALL_OW 45
33772: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33773: LD_VAR 0 8
33777: PPUSH
33778: LD_INT 0
33780: PPUSH
33781: LD_INT 5
33783: PPUSH
33784: CALL_OW 12
33788: PPUSH
33789: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33793: LD_VAR 0 8
33797: PPUSH
33798: LD_VAR 0 5
33802: PPUSH
33803: LD_VAR 0 6
33807: PPUSH
33808: LD_INT 1
33810: PPUSH
33811: CALL_OW 48
// end ;
33815: LD_VAR 0 7
33819: RET
// export hInvincible ; every 1 do
33820: GO 33822
33822: DISABLE
// hInvincible := [ ] ;
33823: LD_ADDR_EXP 120
33827: PUSH
33828: EMPTY
33829: ST_TO_ADDR
33830: END
// every 10 do var i ;
33831: GO 33833
33833: DISABLE
33834: LD_INT 0
33836: PPUSH
// begin enable ;
33837: ENABLE
// if not hInvincible then
33838: LD_EXP 120
33842: NOT
33843: IFFALSE 33847
// exit ;
33845: GO 33891
// for i in hInvincible do
33847: LD_ADDR_VAR 0 1
33851: PUSH
33852: LD_EXP 120
33856: PUSH
33857: FOR_IN
33858: IFFALSE 33889
// if GetLives ( i ) < 1000 then
33860: LD_VAR 0 1
33864: PPUSH
33865: CALL_OW 256
33869: PUSH
33870: LD_INT 1000
33872: LESS
33873: IFFALSE 33887
// SetLives ( i , 1000 ) ;
33875: LD_VAR 0 1
33879: PPUSH
33880: LD_INT 1000
33882: PPUSH
33883: CALL_OW 234
33887: GO 33857
33889: POP
33890: POP
// end ;
33891: PPOPN 1
33893: END
// export function hHackInvincible ; var i ; begin
33894: LD_INT 0
33896: PPUSH
33897: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33898: LD_ADDR_VAR 0 2
33902: PUSH
33903: LD_INT 2
33905: PUSH
33906: LD_INT 21
33908: PUSH
33909: LD_INT 1
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 21
33918: PUSH
33919: LD_INT 2
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: LIST
33930: PPUSH
33931: CALL_OW 69
33935: PUSH
33936: FOR_IN
33937: IFFALSE 33998
// if IsSelected ( i ) then
33939: LD_VAR 0 2
33943: PPUSH
33944: CALL_OW 306
33948: IFFALSE 33996
// begin if i in hInvincible then
33950: LD_VAR 0 2
33954: PUSH
33955: LD_EXP 120
33959: IN
33960: IFFALSE 33980
// hInvincible := hInvincible diff i else
33962: LD_ADDR_EXP 120
33966: PUSH
33967: LD_EXP 120
33971: PUSH
33972: LD_VAR 0 2
33976: DIFF
33977: ST_TO_ADDR
33978: GO 33996
// hInvincible := hInvincible union i ;
33980: LD_ADDR_EXP 120
33984: PUSH
33985: LD_EXP 120
33989: PUSH
33990: LD_VAR 0 2
33994: UNION
33995: ST_TO_ADDR
// end ;
33996: GO 33936
33998: POP
33999: POP
// end ;
34000: LD_VAR 0 1
34004: RET
// export function hHackInvisible ; var i , j ; begin
34005: LD_INT 0
34007: PPUSH
34008: PPUSH
34009: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34010: LD_ADDR_VAR 0 2
34014: PUSH
34015: LD_INT 21
34017: PUSH
34018: LD_INT 1
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PPUSH
34025: CALL_OW 69
34029: PUSH
34030: FOR_IN
34031: IFFALSE 34055
// if IsSelected ( i ) then
34033: LD_VAR 0 2
34037: PPUSH
34038: CALL_OW 306
34042: IFFALSE 34053
// ComForceInvisible ( i ) ;
34044: LD_VAR 0 2
34048: PPUSH
34049: CALL_OW 496
34053: GO 34030
34055: POP
34056: POP
// end ;
34057: LD_VAR 0 1
34061: RET
// export function hHackChangeYourSide ; begin
34062: LD_INT 0
34064: PPUSH
// if your_side = 8 then
34065: LD_OWVAR 2
34069: PUSH
34070: LD_INT 8
34072: EQUAL
34073: IFFALSE 34085
// your_side := 0 else
34075: LD_ADDR_OWVAR 2
34079: PUSH
34080: LD_INT 0
34082: ST_TO_ADDR
34083: GO 34099
// your_side := your_side + 1 ;
34085: LD_ADDR_OWVAR 2
34089: PUSH
34090: LD_OWVAR 2
34094: PUSH
34095: LD_INT 1
34097: PLUS
34098: ST_TO_ADDR
// end ;
34099: LD_VAR 0 1
34103: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34104: LD_INT 0
34106: PPUSH
34107: PPUSH
34108: PPUSH
// for i in all_units do
34109: LD_ADDR_VAR 0 2
34113: PUSH
34114: LD_OWVAR 3
34118: PUSH
34119: FOR_IN
34120: IFFALSE 34198
// if IsSelected ( i ) then
34122: LD_VAR 0 2
34126: PPUSH
34127: CALL_OW 306
34131: IFFALSE 34196
// begin j := GetSide ( i ) ;
34133: LD_ADDR_VAR 0 3
34137: PUSH
34138: LD_VAR 0 2
34142: PPUSH
34143: CALL_OW 255
34147: ST_TO_ADDR
// if j = 8 then
34148: LD_VAR 0 3
34152: PUSH
34153: LD_INT 8
34155: EQUAL
34156: IFFALSE 34168
// j := 0 else
34158: LD_ADDR_VAR 0 3
34162: PUSH
34163: LD_INT 0
34165: ST_TO_ADDR
34166: GO 34182
// j := j + 1 ;
34168: LD_ADDR_VAR 0 3
34172: PUSH
34173: LD_VAR 0 3
34177: PUSH
34178: LD_INT 1
34180: PLUS
34181: ST_TO_ADDR
// SetSide ( i , j ) ;
34182: LD_VAR 0 2
34186: PPUSH
34187: LD_VAR 0 3
34191: PPUSH
34192: CALL_OW 235
// end ;
34196: GO 34119
34198: POP
34199: POP
// end ;
34200: LD_VAR 0 1
34204: RET
// export function hHackFog ; begin
34205: LD_INT 0
34207: PPUSH
// FogOff ( true ) ;
34208: LD_INT 1
34210: PPUSH
34211: CALL_OW 344
// end ;
34215: LD_VAR 0 1
34219: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34220: LD_INT 0
34222: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34223: LD_VAR 0 1
34227: PPUSH
34228: LD_VAR 0 2
34232: PPUSH
34233: LD_VAR 0 3
34237: PPUSH
34238: LD_INT 1
34240: PPUSH
34241: LD_INT 1
34243: PPUSH
34244: CALL_OW 483
// CenterOnXY ( x , y ) ;
34248: LD_VAR 0 2
34252: PPUSH
34253: LD_VAR 0 3
34257: PPUSH
34258: CALL_OW 84
// end ;
34262: LD_VAR 0 4
34266: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34267: LD_INT 0
34269: PPUSH
34270: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34271: LD_VAR 0 1
34275: NOT
34276: IFTRUE 34295
34278: PUSH
34279: LD_VAR 0 2
34283: PPUSH
34284: LD_VAR 0 3
34288: PPUSH
34289: CALL_OW 488
34293: NOT
34294: OR
34295: IFTRUE 34330
34297: PUSH
34298: LD_VAR 0 1
34302: PPUSH
34303: CALL_OW 266
34307: PUSH
34308: LD_INT 3
34310: NONEQUAL
34311: IFFALSE 34329
34313: PUSH
34314: LD_VAR 0 1
34318: PPUSH
34319: CALL_OW 247
34323: PUSH
34324: LD_INT 1
34326: EQUAL
34327: NOT
34328: AND
34329: OR
34330: IFFALSE 34334
// exit ;
34332: GO 34616
// if GetType ( factory ) = unit_human then
34334: LD_VAR 0 1
34338: PPUSH
34339: CALL_OW 247
34343: PUSH
34344: LD_INT 1
34346: EQUAL
34347: IFFALSE 34364
// factory := IsInUnit ( factory ) ;
34349: LD_ADDR_VAR 0 1
34353: PUSH
34354: LD_VAR 0 1
34358: PPUSH
34359: CALL_OW 310
34363: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34364: LD_VAR 0 1
34368: PPUSH
34369: CALL_OW 266
34373: PUSH
34374: LD_INT 3
34376: NONEQUAL
34377: IFFALSE 34381
// exit ;
34379: GO 34616
// for i := 1 to Count ( factoryWaypoints ) do
34381: LD_ADDR_VAR 0 5
34385: PUSH
34386: DOUBLE
34387: LD_INT 1
34389: DEC
34390: ST_TO_ADDR
34391: LD_EXP 121
34395: PPUSH
34396: CALL 44420 0 1
34400: PUSH
34401: FOR_TO
34402: IFFALSE 34564
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34404: LD_VAR 0 2
34408: PPUSH
34409: LD_VAR 0 3
34413: PPUSH
34414: CALL_OW 428
34418: PUSH
34419: LD_EXP 121
34423: PUSH
34424: LD_VAR 0 5
34428: ARRAY
34429: PUSH
34430: LD_INT 2
34432: ARRAY
34433: EQUAL
34434: IFFALSE 34466
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34436: LD_ADDR_EXP 121
34440: PUSH
34441: LD_EXP 121
34445: PPUSH
34446: LD_VAR 0 5
34450: PPUSH
34451: CALL_OW 3
34455: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34456: CALL 34621 0 0
// exit ;
34460: POP
34461: POP
34462: GO 34616
// end else
34464: GO 34562
// if factory = factoryWaypoints [ i ] [ 2 ] then
34466: LD_VAR 0 1
34470: PUSH
34471: LD_EXP 121
34475: PUSH
34476: LD_VAR 0 5
34480: ARRAY
34481: PUSH
34482: LD_INT 2
34484: ARRAY
34485: EQUAL
34486: IFFALSE 34562
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34488: LD_ADDR_EXP 121
34492: PUSH
34493: LD_EXP 121
34497: PPUSH
34498: LD_VAR 0 5
34502: PPUSH
34503: CALL_OW 3
34507: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34508: LD_ADDR_EXP 121
34512: PUSH
34513: LD_EXP 121
34517: PPUSH
34518: LD_VAR 0 1
34522: PPUSH
34523: CALL_OW 255
34527: PUSH
34528: LD_VAR 0 1
34532: PUSH
34533: LD_VAR 0 2
34537: PUSH
34538: LD_VAR 0 3
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: PPUSH
34549: CALL 80396 0 2
34553: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34554: CALL 34621 0 0
// exit ;
34558: POP
34559: POP
34560: GO 34616
// end ; end ;
34562: GO 34401
34564: POP
34565: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34566: LD_ADDR_EXP 121
34570: PUSH
34571: LD_EXP 121
34575: PPUSH
34576: LD_VAR 0 1
34580: PPUSH
34581: CALL_OW 255
34585: PUSH
34586: LD_VAR 0 1
34590: PUSH
34591: LD_VAR 0 2
34595: PUSH
34596: LD_VAR 0 3
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: PPUSH
34607: CALL 80396 0 2
34611: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34612: CALL 34621 0 0
// end ;
34616: LD_VAR 0 4
34620: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34621: LD_INT 0
34623: PPUSH
34624: PPUSH
34625: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34626: LD_STRING resetFactoryWaypoint();
34628: PPUSH
34629: CALL_OW 559
// if factoryWaypoints then
34633: LD_EXP 121
34637: IFFALSE 34758
// begin list := factoryWaypoints ;
34639: LD_ADDR_VAR 0 3
34643: PUSH
34644: LD_EXP 121
34648: ST_TO_ADDR
// for i := 1 to list do
34649: LD_ADDR_VAR 0 2
34653: PUSH
34654: DOUBLE
34655: LD_INT 1
34657: DEC
34658: ST_TO_ADDR
34659: LD_VAR 0 3
34663: PUSH
34664: FOR_TO
34665: IFFALSE 34756
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34667: LD_STRING setFactoryWaypointXY(
34669: PUSH
34670: LD_VAR 0 3
34674: PUSH
34675: LD_VAR 0 2
34679: ARRAY
34680: PUSH
34681: LD_INT 1
34683: ARRAY
34684: STR
34685: PUSH
34686: LD_STRING ,
34688: STR
34689: PUSH
34690: LD_VAR 0 3
34694: PUSH
34695: LD_VAR 0 2
34699: ARRAY
34700: PUSH
34701: LD_INT 2
34703: ARRAY
34704: STR
34705: PUSH
34706: LD_STRING ,
34708: STR
34709: PUSH
34710: LD_VAR 0 3
34714: PUSH
34715: LD_VAR 0 2
34719: ARRAY
34720: PUSH
34721: LD_INT 3
34723: ARRAY
34724: STR
34725: PUSH
34726: LD_STRING ,
34728: STR
34729: PUSH
34730: LD_VAR 0 3
34734: PUSH
34735: LD_VAR 0 2
34739: ARRAY
34740: PUSH
34741: LD_INT 4
34743: ARRAY
34744: STR
34745: PUSH
34746: LD_STRING )
34748: STR
34749: PPUSH
34750: CALL_OW 559
34754: GO 34664
34756: POP
34757: POP
// end ; end ;
34758: LD_VAR 0 1
34762: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34763: LD_INT 0
34765: PPUSH
// if HexInfo ( x , y ) = warehouse then
34766: LD_VAR 0 2
34770: PPUSH
34771: LD_VAR 0 3
34775: PPUSH
34776: CALL_OW 428
34780: PUSH
34781: LD_VAR 0 1
34785: EQUAL
34786: IFFALSE 34813
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34788: LD_ADDR_EXP 123
34792: PUSH
34793: LD_EXP 123
34797: PPUSH
34798: LD_VAR 0 1
34802: PPUSH
34803: LD_INT 0
34805: PPUSH
34806: CALL_OW 1
34810: ST_TO_ADDR
34811: GO 34864
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34813: LD_ADDR_EXP 123
34817: PUSH
34818: LD_EXP 123
34822: PPUSH
34823: LD_VAR 0 1
34827: PPUSH
34828: LD_VAR 0 1
34832: PPUSH
34833: CALL_OW 255
34837: PUSH
34838: LD_VAR 0 1
34842: PUSH
34843: LD_VAR 0 2
34847: PUSH
34848: LD_VAR 0 3
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: PPUSH
34859: CALL_OW 1
34863: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34864: CALL 34873 0 0
// end ;
34868: LD_VAR 0 4
34872: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34873: LD_INT 0
34875: PPUSH
34876: PPUSH
34877: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34878: LD_STRING resetWarehouseGatheringPoints();
34880: PPUSH
34881: CALL_OW 559
// if warehouseGatheringPoints then
34885: LD_EXP 123
34889: IFFALSE 35015
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34891: LD_ADDR_VAR 0 3
34895: PUSH
34896: LD_EXP 123
34900: PPUSH
34901: CALL 84330 0 1
34905: ST_TO_ADDR
// for i := 1 to list do
34906: LD_ADDR_VAR 0 2
34910: PUSH
34911: DOUBLE
34912: LD_INT 1
34914: DEC
34915: ST_TO_ADDR
34916: LD_VAR 0 3
34920: PUSH
34921: FOR_TO
34922: IFFALSE 35013
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34924: LD_STRING setWarehouseGatheringPointXY(
34926: PUSH
34927: LD_VAR 0 3
34931: PUSH
34932: LD_VAR 0 2
34936: ARRAY
34937: PUSH
34938: LD_INT 1
34940: ARRAY
34941: STR
34942: PUSH
34943: LD_STRING ,
34945: STR
34946: PUSH
34947: LD_VAR 0 3
34951: PUSH
34952: LD_VAR 0 2
34956: ARRAY
34957: PUSH
34958: LD_INT 2
34960: ARRAY
34961: STR
34962: PUSH
34963: LD_STRING ,
34965: STR
34966: PUSH
34967: LD_VAR 0 3
34971: PUSH
34972: LD_VAR 0 2
34976: ARRAY
34977: PUSH
34978: LD_INT 3
34980: ARRAY
34981: STR
34982: PUSH
34983: LD_STRING ,
34985: STR
34986: PUSH
34987: LD_VAR 0 3
34991: PUSH
34992: LD_VAR 0 2
34996: ARRAY
34997: PUSH
34998: LD_INT 4
35000: ARRAY
35001: STR
35002: PUSH
35003: LD_STRING )
35005: STR
35006: PPUSH
35007: CALL_OW 559
35011: GO 34921
35013: POP
35014: POP
// end ; end ;
35015: LD_VAR 0 1
35019: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35020: LD_EXP 123
35024: IFFALSE 35719
35026: GO 35028
35028: DISABLE
35029: LD_INT 0
35031: PPUSH
35032: PPUSH
35033: PPUSH
35034: PPUSH
35035: PPUSH
35036: PPUSH
35037: PPUSH
35038: PPUSH
35039: PPUSH
// begin enable ;
35040: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35041: LD_ADDR_VAR 0 3
35045: PUSH
35046: LD_EXP 123
35050: PPUSH
35051: CALL 84330 0 1
35055: ST_TO_ADDR
// if not list then
35056: LD_VAR 0 3
35060: NOT
35061: IFFALSE 35065
// exit ;
35063: GO 35719
// for i := 1 to list do
35065: LD_ADDR_VAR 0 1
35069: PUSH
35070: DOUBLE
35071: LD_INT 1
35073: DEC
35074: ST_TO_ADDR
35075: LD_VAR 0 3
35079: PUSH
35080: FOR_TO
35081: IFFALSE 35717
// begin depot := list [ i ] [ 2 ] ;
35083: LD_ADDR_VAR 0 8
35087: PUSH
35088: LD_VAR 0 3
35092: PUSH
35093: LD_VAR 0 1
35097: ARRAY
35098: PUSH
35099: LD_INT 2
35101: ARRAY
35102: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35103: LD_ADDR_VAR 0 5
35107: PUSH
35108: LD_VAR 0 3
35112: PUSH
35113: LD_VAR 0 1
35117: ARRAY
35118: PUSH
35119: LD_INT 1
35121: ARRAY
35122: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35123: LD_VAR 0 8
35127: PPUSH
35128: CALL_OW 301
35132: IFTRUE 35151
35134: PUSH
35135: LD_VAR 0 5
35139: PUSH
35140: LD_VAR 0 8
35144: PPUSH
35145: CALL_OW 255
35149: NONEQUAL
35150: OR
35151: IFFALSE 35180
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35153: LD_ADDR_EXP 123
35157: PUSH
35158: LD_EXP 123
35162: PPUSH
35163: LD_VAR 0 8
35167: PPUSH
35168: LD_INT 0
35170: PPUSH
35171: CALL_OW 1
35175: ST_TO_ADDR
// exit ;
35176: POP
35177: POP
35178: GO 35719
// end ; x := list [ i ] [ 3 ] ;
35180: LD_ADDR_VAR 0 6
35184: PUSH
35185: LD_VAR 0 3
35189: PUSH
35190: LD_VAR 0 1
35194: ARRAY
35195: PUSH
35196: LD_INT 3
35198: ARRAY
35199: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35200: LD_ADDR_VAR 0 7
35204: PUSH
35205: LD_VAR 0 3
35209: PUSH
35210: LD_VAR 0 1
35214: ARRAY
35215: PUSH
35216: LD_INT 4
35218: ARRAY
35219: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35220: LD_ADDR_VAR 0 9
35224: PUSH
35225: LD_VAR 0 6
35229: PPUSH
35230: LD_VAR 0 7
35234: PPUSH
35235: LD_INT 16
35237: PPUSH
35238: CALL 82904 0 3
35242: ST_TO_ADDR
// if not cratesNearbyPoint then
35243: LD_VAR 0 9
35247: NOT
35248: IFFALSE 35254
// exit ;
35250: POP
35251: POP
35252: GO 35719
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35254: LD_ADDR_VAR 0 4
35258: PUSH
35259: LD_INT 22
35261: PUSH
35262: LD_VAR 0 5
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 3
35273: PUSH
35274: LD_INT 60
35276: PUSH
35277: EMPTY
35278: LIST
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 91
35286: PUSH
35287: LD_VAR 0 8
35291: PUSH
35292: LD_INT 6
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 2
35302: PUSH
35303: LD_INT 25
35305: PUSH
35306: LD_INT 2
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 25
35315: PUSH
35316: LD_INT 16
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: LIST
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: PPUSH
35334: CALL_OW 69
35338: PUSH
35339: LD_VAR 0 8
35343: PPUSH
35344: CALL_OW 313
35348: PPUSH
35349: LD_INT 3
35351: PUSH
35352: LD_INT 60
35354: PUSH
35355: EMPTY
35356: LIST
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 2
35364: PUSH
35365: LD_INT 25
35367: PUSH
35368: LD_INT 2
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 25
35377: PUSH
35378: LD_INT 16
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: LIST
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PPUSH
35394: CALL_OW 72
35398: UNION
35399: ST_TO_ADDR
// if tmp then
35400: LD_VAR 0 4
35404: IFFALSE 35484
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35406: LD_ADDR_VAR 0 4
35410: PUSH
35411: LD_VAR 0 4
35415: PPUSH
35416: LD_INT 3
35418: PPUSH
35419: CALL 80711 0 2
35423: ST_TO_ADDR
// for j in tmp do
35424: LD_ADDR_VAR 0 2
35428: PUSH
35429: LD_VAR 0 4
35433: PUSH
35434: FOR_IN
35435: IFFALSE 35478
// begin if IsInUnit ( j ) then
35437: LD_VAR 0 2
35441: PPUSH
35442: CALL_OW 310
35446: IFFALSE 35457
// ComExit ( j ) ;
35448: LD_VAR 0 2
35452: PPUSH
35453: CALL 80794 0 1
// AddComCollect ( j , x , y ) ;
35457: LD_VAR 0 2
35461: PPUSH
35462: LD_VAR 0 6
35466: PPUSH
35467: LD_VAR 0 7
35471: PPUSH
35472: CALL_OW 177
// end ;
35476: GO 35434
35478: POP
35479: POP
// exit ;
35480: POP
35481: POP
35482: GO 35719
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35484: LD_ADDR_VAR 0 4
35488: PUSH
35489: LD_INT 22
35491: PUSH
35492: LD_VAR 0 5
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 91
35503: PUSH
35504: LD_VAR 0 8
35508: PUSH
35509: LD_INT 8
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 2
35519: PUSH
35520: LD_INT 34
35522: PUSH
35523: LD_INT 12
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 34
35532: PUSH
35533: LD_INT 51
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 34
35542: PUSH
35543: LD_INT 32
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 34
35552: PUSH
35553: LD_INT 89
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: PPUSH
35572: CALL_OW 69
35576: ST_TO_ADDR
// if tmp then
35577: LD_VAR 0 4
35581: IFFALSE 35715
// begin for j in tmp do
35583: LD_ADDR_VAR 0 2
35587: PUSH
35588: LD_VAR 0 4
35592: PUSH
35593: FOR_IN
35594: IFFALSE 35713
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35596: LD_VAR 0 2
35600: PPUSH
35601: CALL_OW 262
35605: PUSH
35606: LD_INT 3
35608: EQUAL
35609: IFTRUE 35626
35611: PUSH
35612: LD_VAR 0 2
35616: PPUSH
35617: CALL_OW 261
35621: PUSH
35622: LD_INT 20
35624: GREATER
35625: OR
35626: IFFALSE 35640
35628: PUSH
35629: LD_VAR 0 2
35633: PPUSH
35634: CALL_OW 314
35638: NOT
35639: AND
35640: IFFALSE 35670
35642: PUSH
35643: LD_VAR 0 2
35647: PPUSH
35648: CALL_OW 263
35652: PUSH
35653: LD_INT 1
35655: NONEQUAL
35656: IFTRUE 35669
35658: PUSH
35659: LD_VAR 0 2
35663: PPUSH
35664: CALL_OW 311
35668: OR
35669: AND
35670: IFFALSE 35711
// begin ComCollect ( j , x , y ) ;
35672: LD_VAR 0 2
35676: PPUSH
35677: LD_VAR 0 6
35681: PPUSH
35682: LD_VAR 0 7
35686: PPUSH
35687: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35691: LD_VAR 0 2
35695: PPUSH
35696: LD_VAR 0 8
35700: PPUSH
35701: CALL_OW 172
// exit ;
35705: POP
35706: POP
35707: POP
35708: POP
35709: GO 35719
// end ;
35711: GO 35593
35713: POP
35714: POP
// end ; end ;
35715: GO 35080
35717: POP
35718: POP
// end ; end_of_file
35719: PPOPN 9
35721: END
// export function SOS_UnitDestroyed ( un ) ; begin
35722: LD_INT 0
35724: PPUSH
// ComRadiation ( un ) ;
35725: LD_VAR 0 1
35729: PPUSH
35730: CALL 36892 0 1
// end ;
35734: LD_VAR 0 2
35738: RET
// export function SOS_UnitKamikazed ( un ) ; begin
35739: LD_INT 0
35741: PPUSH
// ComRadiation ( un ) ;
35742: LD_VAR 0 1
35746: PPUSH
35747: CALL 36892 0 1
// end ;
35751: LD_VAR 0 2
35755: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35756: LD_INT 0
35758: PPUSH
// end ;
35759: LD_VAR 0 4
35763: RET
// export function SOS_Command ( cmd ) ; begin
35764: LD_INT 0
35766: PPUSH
// end ;
35767: LD_VAR 0 2
35771: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35772: LD_INT 0
35774: PPUSH
// end ;
35775: LD_VAR 0 6
35779: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
35780: LD_INT 0
35782: PPUSH
35783: PPUSH
35784: PPUSH
35785: PPUSH
35786: PPUSH
// if not vehicle or not factory then
35787: LD_VAR 0 1
35791: NOT
35792: IFTRUE 35801
35794: PUSH
35795: LD_VAR 0 2
35799: NOT
35800: OR
35801: IFFALSE 35805
// exit ;
35803: GO 36467
// weapon := GetWeapon ( vehicle ) ;
35805: LD_ADDR_VAR 0 7
35809: PUSH
35810: LD_VAR 0 1
35814: PPUSH
35815: CALL_OW 264
35819: ST_TO_ADDR
// if weapon = ar_miner then
35820: LD_VAR 0 7
35824: PUSH
35825: LD_INT 81
35827: EQUAL
35828: IFFALSE 35885
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
35830: LD_ADDR_EXP 132
35834: PUSH
35835: LD_EXP 132
35839: PPUSH
35840: LD_EXP 132
35844: PUSH
35845: LD_INT 1
35847: PLUS
35848: PPUSH
35849: LD_VAR 0 1
35853: PPUSH
35854: CALL_OW 1
35858: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35859: LD_ADDR_EXP 133
35863: PUSH
35864: LD_EXP 133
35868: PPUSH
35869: LD_EXP 133
35873: PUSH
35874: LD_INT 1
35876: PLUS
35877: PPUSH
35878: EMPTY
35879: PPUSH
35880: CALL_OW 1
35884: ST_TO_ADDR
// end ; if not factoryWaypoints then
35885: LD_EXP 121
35889: NOT
35890: IFFALSE 35894
// exit ;
35892: GO 36467
// for i := 1 to Count ( factoryWaypoints ) do
35894: LD_ADDR_VAR 0 4
35898: PUSH
35899: DOUBLE
35900: LD_INT 1
35902: DEC
35903: ST_TO_ADDR
35904: LD_EXP 121
35908: PPUSH
35909: CALL 44420 0 1
35913: PUSH
35914: FOR_TO
35915: IFFALSE 36465
// if factoryWaypoints [ i ] [ 2 ] = factory then
35917: LD_EXP 121
35921: PUSH
35922: LD_VAR 0 4
35926: ARRAY
35927: PUSH
35928: LD_INT 2
35930: ARRAY
35931: PUSH
35932: LD_VAR 0 2
35936: EQUAL
35937: IFFALSE 36463
// begin if GetControl ( vehicle ) = control_manual then
35939: LD_VAR 0 1
35943: PPUSH
35944: CALL_OW 263
35948: PUSH
35949: LD_INT 1
35951: EQUAL
35952: IFFALSE 36316
// begin driver := IsDrivenBy ( vehicle ) ;
35954: LD_ADDR_VAR 0 5
35958: PUSH
35959: LD_VAR 0 1
35963: PPUSH
35964: CALL_OW 311
35968: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
35969: LD_VAR 0 5
35973: PUSH
35974: LD_EXP 122
35978: IN
35979: IFTRUE 35993
35981: PUSH
35982: LD_VAR 0 1
35986: PUSH
35987: LD_EXP 122
35991: IN
35992: OR
35993: IFFALSE 35999
// exit ;
35995: POP
35996: POP
35997: GO 36467
// if not HasTask ( driver ) then
35999: LD_VAR 0 5
36003: PPUSH
36004: CALL_OW 314
36008: NOT
36009: IFFALSE 36314
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
36011: LD_ADDR_EXP 122
36015: PUSH
36016: LD_EXP 122
36020: PPUSH
36021: LD_VAR 0 5
36025: PPUSH
36026: CALL 80396 0 2
36030: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
36031: LD_ADDR_EXP 122
36035: PUSH
36036: LD_EXP 122
36040: PPUSH
36041: LD_VAR 0 1
36045: PPUSH
36046: CALL 80396 0 2
36050: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36051: LD_ADDR_VAR 0 6
36055: PUSH
36056: LD_EXP 121
36060: PUSH
36061: LD_VAR 0 4
36065: ARRAY
36066: PUSH
36067: LD_INT 3
36069: ARRAY
36070: PPUSH
36071: LD_EXP 121
36075: PUSH
36076: LD_VAR 0 4
36080: ARRAY
36081: PUSH
36082: LD_INT 4
36084: ARRAY
36085: PPUSH
36086: CALL_OW 428
36090: ST_TO_ADDR
// if hex then
36091: LD_VAR 0 6
36095: IFFALSE 36113
// ComMoveUnit ( driver , hex ) else
36097: LD_VAR 0 5
36101: PPUSH
36102: LD_VAR 0 6
36106: PPUSH
36107: CALL_OW 112
36111: GO 36197
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
36113: LD_VAR 0 1
36117: PPUSH
36118: LD_EXP 121
36122: PUSH
36123: LD_VAR 0 4
36127: ARRAY
36128: PUSH
36129: LD_INT 3
36131: ARRAY
36132: PPUSH
36133: LD_EXP 121
36137: PUSH
36138: LD_VAR 0 4
36142: ARRAY
36143: PUSH
36144: LD_INT 4
36146: ARRAY
36147: PPUSH
36148: CALL_OW 297
36152: PUSH
36153: LD_INT 0
36155: GREATER
36156: IFFALSE 36197
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36158: LD_VAR 0 5
36162: PPUSH
36163: LD_EXP 121
36167: PUSH
36168: LD_VAR 0 4
36172: ARRAY
36173: PUSH
36174: LD_INT 3
36176: ARRAY
36177: PPUSH
36178: LD_EXP 121
36182: PUSH
36183: LD_VAR 0 4
36187: ARRAY
36188: PUSH
36189: LD_INT 4
36191: ARRAY
36192: PPUSH
36193: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36197: LD_VAR 0 5
36201: PPUSH
36202: CALL_OW 181
// if Multiplayer then
36206: LD_OWVAR 4
36210: IFFALSE 36259
// begin repeat wait ( 10 ) ;
36212: LD_INT 10
36214: PPUSH
36215: CALL_OW 67
// until not IsInUnit ( driver ) ;
36219: LD_VAR 0 5
36223: PPUSH
36224: CALL_OW 310
36228: NOT
36229: IFFALSE 36212
// if not HasTask ( driver ) then
36231: LD_VAR 0 5
36235: PPUSH
36236: CALL_OW 314
36240: NOT
36241: IFFALSE 36257
// ComEnterUnit ( driver , factory ) ;
36243: LD_VAR 0 5
36247: PPUSH
36248: LD_VAR 0 2
36252: PPUSH
36253: CALL_OW 120
// end else
36257: GO 36273
// AddComEnterUnit ( driver , factory ) ;
36259: LD_VAR 0 5
36263: PPUSH
36264: LD_VAR 0 2
36268: PPUSH
36269: CALL_OW 180
// wait ( 0 0$1 ) ;
36273: LD_INT 35
36275: PPUSH
36276: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
36280: LD_ADDR_EXP 122
36284: PUSH
36285: LD_EXP 122
36289: PUSH
36290: LD_VAR 0 5
36294: DIFF
36295: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
36296: LD_ADDR_EXP 122
36300: PUSH
36301: LD_EXP 122
36305: PUSH
36306: LD_VAR 0 1
36310: DIFF
36311: ST_TO_ADDR
// break ;
36312: GO 36465
// end ; end else
36314: GO 36463
// if GetControl ( vehicle ) = control_remote then
36316: LD_VAR 0 1
36320: PPUSH
36321: CALL_OW 263
36325: PUSH
36326: LD_INT 2
36328: EQUAL
36329: IFFALSE 36415
// begin wait ( 0 0$2 ) ;
36331: LD_INT 70
36333: PPUSH
36334: CALL_OW 67
// repeat wait ( 10 ) ;
36338: LD_INT 10
36340: PPUSH
36341: CALL_OW 67
// Connect ( vehicle ) ;
36345: LD_VAR 0 1
36349: PPUSH
36350: CALL 50698 0 1
// until IsControledBy ( vehicle ) ;
36354: LD_VAR 0 1
36358: PPUSH
36359: CALL_OW 312
36363: IFFALSE 36338
// wait ( 10 ) ;
36365: LD_INT 10
36367: PPUSH
36368: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36372: LD_VAR 0 1
36376: PPUSH
36377: LD_EXP 121
36381: PUSH
36382: LD_VAR 0 4
36386: ARRAY
36387: PUSH
36388: LD_INT 3
36390: ARRAY
36391: PPUSH
36392: LD_EXP 121
36396: PUSH
36397: LD_VAR 0 4
36401: ARRAY
36402: PUSH
36403: LD_INT 4
36405: ARRAY
36406: PPUSH
36407: CALL_OW 111
// break ;
36411: GO 36465
// end else
36413: GO 36463
// begin wait ( 0 0$3 ) ;
36415: LD_INT 105
36417: PPUSH
36418: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36422: LD_VAR 0 1
36426: PPUSH
36427: LD_EXP 121
36431: PUSH
36432: LD_VAR 0 4
36436: ARRAY
36437: PUSH
36438: LD_INT 3
36440: ARRAY
36441: PPUSH
36442: LD_EXP 121
36446: PUSH
36447: LD_VAR 0 4
36451: ARRAY
36452: PUSH
36453: LD_INT 4
36455: ARRAY
36456: PPUSH
36457: CALL_OW 111
// break ;
36461: GO 36465
// end ; end ;
36463: GO 35914
36465: POP
36466: POP
// end ;
36467: LD_VAR 0 3
36471: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36472: LD_INT 0
36474: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36475: LD_VAR 0 1
36479: PUSH
36480: LD_INT 250
36482: EQUAL
36483: IFFALSE 36500
36485: PUSH
36486: LD_VAR 0 2
36490: PPUSH
36491: CALL_OW 264
36495: PUSH
36496: LD_INT 81
36498: EQUAL
36499: AND
36500: IFFALSE 36521
// MinerPlaceMine ( unit , x , y ) ;
36502: LD_VAR 0 2
36506: PPUSH
36507: LD_VAR 0 4
36511: PPUSH
36512: LD_VAR 0 5
36516: PPUSH
36517: CALL 39867 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36521: LD_VAR 0 1
36525: PUSH
36526: LD_INT 251
36528: EQUAL
36529: IFFALSE 36546
36531: PUSH
36532: LD_VAR 0 2
36536: PPUSH
36537: CALL_OW 264
36541: PUSH
36542: LD_INT 81
36544: EQUAL
36545: AND
36546: IFFALSE 36567
// MinerDetonateMine ( unit , x , y ) ;
36548: LD_VAR 0 2
36552: PPUSH
36553: LD_VAR 0 4
36557: PPUSH
36558: LD_VAR 0 5
36562: PPUSH
36563: CALL 40274 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36567: LD_VAR 0 1
36571: PUSH
36572: LD_INT 252
36574: EQUAL
36575: IFFALSE 36592
36577: PUSH
36578: LD_VAR 0 2
36582: PPUSH
36583: CALL_OW 264
36587: PUSH
36588: LD_INT 81
36590: EQUAL
36591: AND
36592: IFFALSE 36613
// MinerCreateMinefield ( unit , x , y ) ;
36594: LD_VAR 0 2
36598: PPUSH
36599: LD_VAR 0 4
36603: PPUSH
36604: LD_VAR 0 5
36608: PPUSH
36609: CALL 40506 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36613: LD_VAR 0 1
36617: PUSH
36618: LD_INT 253
36620: EQUAL
36621: IFFALSE 36638
36623: PUSH
36624: LD_VAR 0 2
36628: PPUSH
36629: CALL_OW 257
36633: PUSH
36634: LD_INT 5
36636: EQUAL
36637: AND
36638: IFFALSE 36659
// ComBinocular ( unit , x , y ) ;
36640: LD_VAR 0 2
36644: PPUSH
36645: LD_VAR 0 4
36649: PPUSH
36650: LD_VAR 0 5
36654: PPUSH
36655: CALL 40881 0 3
// if selectedUnit then
36659: LD_VAR 0 3
36663: IFFALSE 36723
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36665: LD_VAR 0 1
36669: PUSH
36670: LD_INT 254
36672: EQUAL
36673: IFFALSE 36690
36675: PUSH
36676: LD_VAR 0 2
36680: PPUSH
36681: CALL_OW 264
36685: PUSH
36686: LD_INT 99
36688: EQUAL
36689: AND
36690: IFFALSE 36707
36692: PUSH
36693: LD_VAR 0 3
36697: PPUSH
36698: CALL_OW 263
36702: PUSH
36703: LD_INT 3
36705: EQUAL
36706: AND
36707: IFFALSE 36723
// HackDestroyVehicle ( unit , selectedUnit ) ;
36709: LD_VAR 0 2
36713: PPUSH
36714: LD_VAR 0 3
36718: PPUSH
36719: CALL 39057 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36723: LD_VAR 0 1
36727: PUSH
36728: LD_INT 255
36730: EQUAL
36731: IFFALSE 36755
36733: PUSH
36734: LD_VAR 0 2
36738: PPUSH
36739: CALL_OW 264
36743: PUSH
36744: LD_INT 14
36746: PUSH
36747: LD_INT 53
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: IN
36754: AND
36755: IFFALSE 36773
36757: PUSH
36758: LD_VAR 0 4
36762: PPUSH
36763: LD_VAR 0 5
36767: PPUSH
36768: CALL_OW 488
36772: AND
36773: IFFALSE 36797
// CutTreeXYR ( unit , x , y , 12 ) ;
36775: LD_VAR 0 2
36779: PPUSH
36780: LD_VAR 0 4
36784: PPUSH
36785: LD_VAR 0 5
36789: PPUSH
36790: LD_INT 12
36792: PPUSH
36793: CALL 36988 0 4
// if cmd = 256 then
36797: LD_VAR 0 1
36801: PUSH
36802: LD_INT 256
36804: EQUAL
36805: IFFALSE 36826
// SetFactoryWaypoint ( unit , x , y ) ;
36807: LD_VAR 0 2
36811: PPUSH
36812: LD_VAR 0 4
36816: PPUSH
36817: LD_VAR 0 5
36821: PPUSH
36822: CALL 34267 0 3
// if cmd = 257 then
36826: LD_VAR 0 1
36830: PUSH
36831: LD_INT 257
36833: EQUAL
36834: IFFALSE 36855
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36836: LD_VAR 0 2
36840: PPUSH
36841: LD_VAR 0 4
36845: PPUSH
36846: LD_VAR 0 5
36850: PPUSH
36851: CALL 34763 0 3
// if cmd = 258 then
36855: LD_VAR 0 1
36859: PUSH
36860: LD_INT 258
36862: EQUAL
36863: IFFALSE 36887
// BurnTreeXYR ( unit , x , y , 8 ) ;
36865: LD_VAR 0 2
36869: PPUSH
36870: LD_VAR 0 4
36874: PPUSH
36875: LD_VAR 0 5
36879: PPUSH
36880: LD_INT 8
36882: PPUSH
36883: CALL 37410 0 4
// end ;
36887: LD_VAR 0 6
36891: RET
// export function ComRadiation ( un ) ; var eff ; begin
36892: LD_INT 0
36894: PPUSH
36895: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
36896: LD_VAR 0 1
36900: PPUSH
36901: CALL_OW 264
36905: PUSH
36906: LD_INT 91
36908: NONEQUAL
36909: IFFALSE 36913
// exit ;
36911: GO 36983
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36913: LD_INT 68
36915: PPUSH
36916: LD_VAR 0 1
36920: PPUSH
36921: CALL_OW 255
36925: PPUSH
36926: CALL_OW 321
36930: PUSH
36931: LD_INT 2
36933: EQUAL
36934: IFFALSE 36946
// eff := 50 else
36936: LD_ADDR_VAR 0 3
36940: PUSH
36941: LD_INT 50
36943: ST_TO_ADDR
36944: GO 36954
// eff := 25 ;
36946: LD_ADDR_VAR 0 3
36950: PUSH
36951: LD_INT 25
36953: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36954: LD_VAR 0 1
36958: PPUSH
36959: CALL_OW 250
36963: PPUSH
36964: LD_VAR 0 1
36968: PPUSH
36969: CALL_OW 251
36973: PPUSH
36974: LD_VAR 0 3
36978: PPUSH
36979: CALL_OW 495
// end ;
36983: LD_VAR 0 2
36987: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36988: LD_INT 0
36990: PPUSH
36991: PPUSH
36992: PPUSH
36993: PPUSH
36994: PPUSH
36995: PPUSH
36996: PPUSH
36997: PPUSH
36998: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36999: LD_VAR 0 1
37003: PPUSH
37004: CALL_OW 302
37008: NOT
37009: IFTRUE 37028
37011: PUSH
37012: LD_VAR 0 2
37016: PPUSH
37017: LD_VAR 0 3
37021: PPUSH
37022: CALL_OW 488
37026: NOT
37027: OR
37028: IFTRUE 37037
37030: PUSH
37031: LD_VAR 0 4
37035: NOT
37036: OR
37037: IFFALSE 37041
// exit ;
37039: GO 37405
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
37041: LD_VAR 0 1
37045: PPUSH
37046: CALL_OW 437
37050: PPUSH
37051: CALL 44420 0 1
37055: PUSH
37056: LD_INT 10
37058: GREATER
37059: IFFALSE 37063
// exit ;
37061: GO 37405
// list := [ ] ;
37063: LD_ADDR_VAR 0 13
37067: PUSH
37068: EMPTY
37069: ST_TO_ADDR
// if x - r < 0 then
37070: LD_VAR 0 2
37074: PUSH
37075: LD_VAR 0 4
37079: MINUS
37080: PUSH
37081: LD_INT 0
37083: LESS
37084: IFFALSE 37096
// min_x := 0 else
37086: LD_ADDR_VAR 0 7
37090: PUSH
37091: LD_INT 0
37093: ST_TO_ADDR
37094: GO 37112
// min_x := x - r ;
37096: LD_ADDR_VAR 0 7
37100: PUSH
37101: LD_VAR 0 2
37105: PUSH
37106: LD_VAR 0 4
37110: MINUS
37111: ST_TO_ADDR
// if y - r < 0 then
37112: LD_VAR 0 3
37116: PUSH
37117: LD_VAR 0 4
37121: MINUS
37122: PUSH
37123: LD_INT 0
37125: LESS
37126: IFFALSE 37138
// min_y := 0 else
37128: LD_ADDR_VAR 0 8
37132: PUSH
37133: LD_INT 0
37135: ST_TO_ADDR
37136: GO 37154
// min_y := y - r ;
37138: LD_ADDR_VAR 0 8
37142: PUSH
37143: LD_VAR 0 3
37147: PUSH
37148: LD_VAR 0 4
37152: MINUS
37153: ST_TO_ADDR
// max_x := x + r ;
37154: LD_ADDR_VAR 0 9
37158: PUSH
37159: LD_VAR 0 2
37163: PUSH
37164: LD_VAR 0 4
37168: PLUS
37169: ST_TO_ADDR
// max_y := y + r ;
37170: LD_ADDR_VAR 0 10
37174: PUSH
37175: LD_VAR 0 3
37179: PUSH
37180: LD_VAR 0 4
37184: PLUS
37185: ST_TO_ADDR
// for _x = min_x to max_x do
37186: LD_ADDR_VAR 0 11
37190: PUSH
37191: DOUBLE
37192: LD_VAR 0 7
37196: DEC
37197: ST_TO_ADDR
37198: LD_VAR 0 9
37202: PUSH
37203: FOR_TO
37204: IFFALSE 37323
// for _y = min_y to max_y do
37206: LD_ADDR_VAR 0 12
37210: PUSH
37211: DOUBLE
37212: LD_VAR 0 8
37216: DEC
37217: ST_TO_ADDR
37218: LD_VAR 0 10
37222: PUSH
37223: FOR_TO
37224: IFFALSE 37319
// begin if not ValidHex ( _x , _y ) then
37226: LD_VAR 0 11
37230: PPUSH
37231: LD_VAR 0 12
37235: PPUSH
37236: CALL_OW 488
37240: NOT
37241: IFFALSE 37245
// continue ;
37243: GO 37223
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37245: LD_VAR 0 11
37249: PPUSH
37250: LD_VAR 0 12
37254: PPUSH
37255: CALL_OW 351
37259: IFFALSE 37277
37261: PUSH
37262: LD_VAR 0 11
37266: PPUSH
37267: LD_VAR 0 12
37271: PPUSH
37272: CALL_OW 554
37276: AND
37277: IFFALSE 37317
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37279: LD_ADDR_VAR 0 13
37283: PUSH
37284: LD_VAR 0 13
37288: PPUSH
37289: LD_VAR 0 13
37293: PUSH
37294: LD_INT 1
37296: PLUS
37297: PPUSH
37298: LD_VAR 0 11
37302: PUSH
37303: LD_VAR 0 12
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PPUSH
37312: CALL_OW 2
37316: ST_TO_ADDR
// end ;
37317: GO 37223
37319: POP
37320: POP
37321: GO 37203
37323: POP
37324: POP
// if not list then
37325: LD_VAR 0 13
37329: NOT
37330: IFFALSE 37334
// exit ;
37332: GO 37405
// for i in list do
37334: LD_ADDR_VAR 0 6
37338: PUSH
37339: LD_VAR 0 13
37343: PUSH
37344: FOR_IN
37345: IFFALSE 37403
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37347: LD_VAR 0 1
37351: PPUSH
37352: LD_STRING M
37354: PUSH
37355: LD_VAR 0 6
37359: PUSH
37360: LD_INT 1
37362: ARRAY
37363: PUSH
37364: LD_VAR 0 6
37368: PUSH
37369: LD_INT 2
37371: ARRAY
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: LD_INT 0
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: PUSH
37394: EMPTY
37395: LIST
37396: PPUSH
37397: CALL_OW 447
37401: GO 37344
37403: POP
37404: POP
// end ;
37405: LD_VAR 0 5
37409: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37410: LD_INT 0
37412: PPUSH
37413: PPUSH
37414: PPUSH
37415: PPUSH
37416: PPUSH
37417: PPUSH
37418: PPUSH
37419: PPUSH
37420: PPUSH
37421: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37422: LD_VAR 0 1
37426: PPUSH
37427: CALL_OW 302
37431: NOT
37432: IFTRUE 37451
37434: PUSH
37435: LD_VAR 0 2
37439: PPUSH
37440: LD_VAR 0 3
37444: PPUSH
37445: CALL_OW 488
37449: NOT
37450: OR
37451: IFTRUE 37460
37453: PUSH
37454: LD_VAR 0 4
37458: NOT
37459: OR
37460: IFFALSE 37464
// exit ;
37462: GO 38003
// if Count ( GetTaskList ( flame ) ) > 10 then
37464: LD_VAR 0 1
37468: PPUSH
37469: CALL_OW 437
37473: PPUSH
37474: CALL 44420 0 1
37478: PUSH
37479: LD_INT 10
37481: GREATER
37482: IFFALSE 37486
// exit ;
37484: GO 38003
// list := [ ] ;
37486: LD_ADDR_VAR 0 13
37490: PUSH
37491: EMPTY
37492: ST_TO_ADDR
// if x - r < 0 then
37493: LD_VAR 0 2
37497: PUSH
37498: LD_VAR 0 4
37502: MINUS
37503: PUSH
37504: LD_INT 0
37506: LESS
37507: IFFALSE 37519
// min_x := 0 else
37509: LD_ADDR_VAR 0 7
37513: PUSH
37514: LD_INT 0
37516: ST_TO_ADDR
37517: GO 37535
// min_x := x - r ;
37519: LD_ADDR_VAR 0 7
37523: PUSH
37524: LD_VAR 0 2
37528: PUSH
37529: LD_VAR 0 4
37533: MINUS
37534: ST_TO_ADDR
// if y - r < 0 then
37535: LD_VAR 0 3
37539: PUSH
37540: LD_VAR 0 4
37544: MINUS
37545: PUSH
37546: LD_INT 0
37548: LESS
37549: IFFALSE 37561
// min_y := 0 else
37551: LD_ADDR_VAR 0 8
37555: PUSH
37556: LD_INT 0
37558: ST_TO_ADDR
37559: GO 37577
// min_y := y - r ;
37561: LD_ADDR_VAR 0 8
37565: PUSH
37566: LD_VAR 0 3
37570: PUSH
37571: LD_VAR 0 4
37575: MINUS
37576: ST_TO_ADDR
// max_x := x + r ;
37577: LD_ADDR_VAR 0 9
37581: PUSH
37582: LD_VAR 0 2
37586: PUSH
37587: LD_VAR 0 4
37591: PLUS
37592: ST_TO_ADDR
// max_y := y + r ;
37593: LD_ADDR_VAR 0 10
37597: PUSH
37598: LD_VAR 0 3
37602: PUSH
37603: LD_VAR 0 4
37607: PLUS
37608: ST_TO_ADDR
// for _x = min_x to max_x do
37609: LD_ADDR_VAR 0 11
37613: PUSH
37614: DOUBLE
37615: LD_VAR 0 7
37619: DEC
37620: ST_TO_ADDR
37621: LD_VAR 0 9
37625: PUSH
37626: FOR_TO
37627: IFFALSE 37746
// for _y = min_y to max_y do
37629: LD_ADDR_VAR 0 12
37633: PUSH
37634: DOUBLE
37635: LD_VAR 0 8
37639: DEC
37640: ST_TO_ADDR
37641: LD_VAR 0 10
37645: PUSH
37646: FOR_TO
37647: IFFALSE 37742
// begin if not ValidHex ( _x , _y ) then
37649: LD_VAR 0 11
37653: PPUSH
37654: LD_VAR 0 12
37658: PPUSH
37659: CALL_OW 488
37663: NOT
37664: IFFALSE 37668
// continue ;
37666: GO 37646
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37668: LD_VAR 0 11
37672: PPUSH
37673: LD_VAR 0 12
37677: PPUSH
37678: CALL_OW 351
37682: IFFALSE 37700
37684: PUSH
37685: LD_VAR 0 11
37689: PPUSH
37690: LD_VAR 0 12
37694: PPUSH
37695: CALL_OW 554
37699: AND
37700: IFFALSE 37740
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37702: LD_ADDR_VAR 0 13
37706: PUSH
37707: LD_VAR 0 13
37711: PPUSH
37712: LD_VAR 0 13
37716: PUSH
37717: LD_INT 1
37719: PLUS
37720: PPUSH
37721: LD_VAR 0 11
37725: PUSH
37726: LD_VAR 0 12
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PPUSH
37735: CALL_OW 2
37739: ST_TO_ADDR
// end ;
37740: GO 37646
37742: POP
37743: POP
37744: GO 37626
37746: POP
37747: POP
// if not list then
37748: LD_VAR 0 13
37752: NOT
37753: IFFALSE 37757
// exit ;
37755: GO 38003
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37757: LD_ADDR_VAR 0 13
37761: PUSH
37762: LD_VAR 0 1
37766: PPUSH
37767: LD_VAR 0 13
37771: PPUSH
37772: LD_INT 1
37774: PPUSH
37775: LD_INT 1
37777: PPUSH
37778: CALL 47826 0 4
37782: ST_TO_ADDR
// ComStop ( flame ) ;
37783: LD_VAR 0 1
37787: PPUSH
37788: CALL_OW 141
// for i in list do
37792: LD_ADDR_VAR 0 6
37796: PUSH
37797: LD_VAR 0 13
37801: PUSH
37802: FOR_IN
37803: IFFALSE 37834
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37805: LD_VAR 0 1
37809: PPUSH
37810: LD_VAR 0 6
37814: PUSH
37815: LD_INT 1
37817: ARRAY
37818: PPUSH
37819: LD_VAR 0 6
37823: PUSH
37824: LD_INT 2
37826: ARRAY
37827: PPUSH
37828: CALL_OW 176
37832: GO 37802
37834: POP
37835: POP
// repeat wait ( 0 0$1 ) ;
37836: LD_INT 35
37838: PPUSH
37839: CALL_OW 67
// task := GetTaskList ( flame ) ;
37843: LD_ADDR_VAR 0 14
37847: PUSH
37848: LD_VAR 0 1
37852: PPUSH
37853: CALL_OW 437
37857: ST_TO_ADDR
// if not task then
37858: LD_VAR 0 14
37862: NOT
37863: IFFALSE 37867
// exit ;
37865: GO 38003
// if task [ 1 ] [ 1 ] <> | then
37867: LD_VAR 0 14
37871: PUSH
37872: LD_INT 1
37874: ARRAY
37875: PUSH
37876: LD_INT 1
37878: ARRAY
37879: PUSH
37880: LD_STRING |
37882: NONEQUAL
37883: IFFALSE 37887
// exit ;
37885: GO 38003
// _x := task [ 1 ] [ 2 ] ;
37887: LD_ADDR_VAR 0 11
37891: PUSH
37892: LD_VAR 0 14
37896: PUSH
37897: LD_INT 1
37899: ARRAY
37900: PUSH
37901: LD_INT 2
37903: ARRAY
37904: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37905: LD_ADDR_VAR 0 12
37909: PUSH
37910: LD_VAR 0 14
37914: PUSH
37915: LD_INT 1
37917: ARRAY
37918: PUSH
37919: LD_INT 3
37921: ARRAY
37922: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37923: LD_VAR 0 11
37927: PPUSH
37928: LD_VAR 0 12
37932: PPUSH
37933: CALL_OW 351
37937: NOT
37938: IFTRUE 37957
37940: PUSH
37941: LD_VAR 0 11
37945: PPUSH
37946: LD_VAR 0 12
37950: PPUSH
37951: CALL_OW 554
37955: NOT
37956: OR
37957: IFFALSE 37991
// begin task := Delete ( task , 1 ) ;
37959: LD_ADDR_VAR 0 14
37963: PUSH
37964: LD_VAR 0 14
37968: PPUSH
37969: LD_INT 1
37971: PPUSH
37972: CALL_OW 3
37976: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37977: LD_VAR 0 1
37981: PPUSH
37982: LD_VAR 0 14
37986: PPUSH
37987: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37991: LD_VAR 0 1
37995: PPUSH
37996: CALL_OW 314
38000: NOT
38001: IFFALSE 37836
// end ;
38003: LD_VAR 0 5
38007: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38008: LD_EXP 125
38012: NOT
38013: IFFALSE 38063
38015: GO 38017
38017: DISABLE
// begin initHack := true ;
38018: LD_ADDR_EXP 125
38022: PUSH
38023: LD_INT 1
38025: ST_TO_ADDR
// hackTanks := [ ] ;
38026: LD_ADDR_EXP 126
38030: PUSH
38031: EMPTY
38032: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38033: LD_ADDR_EXP 127
38037: PUSH
38038: EMPTY
38039: ST_TO_ADDR
// hackLimit := 3 ;
38040: LD_ADDR_EXP 128
38044: PUSH
38045: LD_INT 3
38047: ST_TO_ADDR
// hackDist := 12 ;
38048: LD_ADDR_EXP 129
38052: PUSH
38053: LD_INT 12
38055: ST_TO_ADDR
// hackCounter := [ ] ;
38056: LD_ADDR_EXP 130
38060: PUSH
38061: EMPTY
38062: ST_TO_ADDR
// end ;
38063: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38064: LD_EXP 125
38068: IFFALSE 38086
38070: PUSH
38071: LD_INT 34
38073: PUSH
38074: LD_INT 99
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PPUSH
38081: CALL_OW 69
38085: AND
38086: IFFALSE 38339
38088: GO 38090
38090: DISABLE
38091: LD_INT 0
38093: PPUSH
38094: PPUSH
// begin enable ;
38095: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38096: LD_ADDR_VAR 0 1
38100: PUSH
38101: LD_INT 34
38103: PUSH
38104: LD_INT 99
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PPUSH
38111: CALL_OW 69
38115: PUSH
38116: FOR_IN
38117: IFFALSE 38337
// begin if not i in hackTanks then
38119: LD_VAR 0 1
38123: PUSH
38124: LD_EXP 126
38128: IN
38129: NOT
38130: IFFALSE 38213
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38132: LD_ADDR_EXP 126
38136: PUSH
38137: LD_EXP 126
38141: PPUSH
38142: LD_EXP 126
38146: PUSH
38147: LD_INT 1
38149: PLUS
38150: PPUSH
38151: LD_VAR 0 1
38155: PPUSH
38156: CALL_OW 1
38160: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38161: LD_ADDR_EXP 127
38165: PUSH
38166: LD_EXP 127
38170: PPUSH
38171: LD_EXP 127
38175: PUSH
38176: LD_INT 1
38178: PLUS
38179: PPUSH
38180: EMPTY
38181: PPUSH
38182: CALL_OW 1
38186: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38187: LD_ADDR_EXP 130
38191: PUSH
38192: LD_EXP 130
38196: PPUSH
38197: LD_EXP 130
38201: PUSH
38202: LD_INT 1
38204: PLUS
38205: PPUSH
38206: EMPTY
38207: PPUSH
38208: CALL_OW 1
38212: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38213: LD_VAR 0 1
38217: PPUSH
38218: CALL_OW 302
38222: NOT
38223: IFFALSE 38236
// begin HackUnlinkAll ( i ) ;
38225: LD_VAR 0 1
38229: PPUSH
38230: CALL 38342 0 1
// continue ;
38234: GO 38116
// end ; HackCheckCapturedStatus ( i ) ;
38236: LD_VAR 0 1
38240: PPUSH
38241: CALL 38787 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38245: LD_ADDR_VAR 0 2
38249: PUSH
38250: LD_INT 81
38252: PUSH
38253: LD_VAR 0 1
38257: PPUSH
38258: CALL_OW 255
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 33
38269: PUSH
38270: LD_INT 3
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 91
38279: PUSH
38280: LD_VAR 0 1
38284: PUSH
38285: LD_EXP 129
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 50
38297: PUSH
38298: EMPTY
38299: LIST
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: PPUSH
38307: CALL_OW 69
38311: ST_TO_ADDR
// if not tmp then
38312: LD_VAR 0 2
38316: NOT
38317: IFFALSE 38321
// continue ;
38319: GO 38116
// HackLink ( i , tmp ) ;
38321: LD_VAR 0 1
38325: PPUSH
38326: LD_VAR 0 2
38330: PPUSH
38331: CALL 38478 0 2
// end ;
38335: GO 38116
38337: POP
38338: POP
// end ;
38339: PPOPN 2
38341: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38342: LD_INT 0
38344: PPUSH
38345: PPUSH
38346: PPUSH
// if not hack in hackTanks then
38347: LD_VAR 0 1
38351: PUSH
38352: LD_EXP 126
38356: IN
38357: NOT
38358: IFFALSE 38362
// exit ;
38360: GO 38473
// index := GetElementIndex ( hackTanks , hack ) ;
38362: LD_ADDR_VAR 0 4
38366: PUSH
38367: LD_EXP 126
38371: PPUSH
38372: LD_VAR 0 1
38376: PPUSH
38377: CALL 47121 0 2
38381: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38382: LD_EXP 127
38386: PUSH
38387: LD_VAR 0 4
38391: ARRAY
38392: IFFALSE 38473
// begin for i in hackTanksCaptured [ index ] do
38394: LD_ADDR_VAR 0 3
38398: PUSH
38399: LD_EXP 127
38403: PUSH
38404: LD_VAR 0 4
38408: ARRAY
38409: PUSH
38410: FOR_IN
38411: IFFALSE 38437
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38413: LD_VAR 0 3
38417: PUSH
38418: LD_INT 1
38420: ARRAY
38421: PPUSH
38422: LD_VAR 0 3
38426: PUSH
38427: LD_INT 2
38429: ARRAY
38430: PPUSH
38431: CALL_OW 235
38435: GO 38410
38437: POP
38438: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38439: LD_ADDR_EXP 127
38443: PUSH
38444: LD_EXP 127
38448: PPUSH
38449: LD_VAR 0 4
38453: PPUSH
38454: EMPTY
38455: PPUSH
38456: CALL_OW 1
38460: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38461: LD_VAR 0 1
38465: PPUSH
38466: LD_INT 0
38468: PPUSH
38469: CALL_OW 505
// end ; end ;
38473: LD_VAR 0 2
38477: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38478: LD_INT 0
38480: PPUSH
38481: PPUSH
38482: PPUSH
// if not hack in hackTanks or not vehicles then
38483: LD_VAR 0 1
38487: PUSH
38488: LD_EXP 126
38492: IN
38493: NOT
38494: IFTRUE 38503
38496: PUSH
38497: LD_VAR 0 2
38501: NOT
38502: OR
38503: IFFALSE 38507
// exit ;
38505: GO 38782
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38507: LD_ADDR_VAR 0 2
38511: PUSH
38512: LD_VAR 0 1
38516: PPUSH
38517: LD_VAR 0 2
38521: PPUSH
38522: LD_INT 1
38524: PPUSH
38525: LD_INT 1
38527: PPUSH
38528: CALL 47773 0 4
38532: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38533: LD_ADDR_VAR 0 5
38537: PUSH
38538: LD_EXP 126
38542: PPUSH
38543: LD_VAR 0 1
38547: PPUSH
38548: CALL 47121 0 2
38552: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38553: LD_EXP 127
38557: PUSH
38558: LD_VAR 0 5
38562: ARRAY
38563: PUSH
38564: LD_EXP 128
38568: LESS
38569: IFFALSE 38758
// begin for i := 1 to vehicles do
38571: LD_ADDR_VAR 0 4
38575: PUSH
38576: DOUBLE
38577: LD_INT 1
38579: DEC
38580: ST_TO_ADDR
38581: LD_VAR 0 2
38585: PUSH
38586: FOR_TO
38587: IFFALSE 38756
// begin if hackTanksCaptured [ index ] = hackLimit then
38589: LD_EXP 127
38593: PUSH
38594: LD_VAR 0 5
38598: ARRAY
38599: PUSH
38600: LD_EXP 128
38604: EQUAL
38605: IFFALSE 38609
// break ;
38607: GO 38756
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38609: LD_ADDR_EXP 130
38613: PUSH
38614: LD_EXP 130
38618: PPUSH
38619: LD_VAR 0 5
38623: PPUSH
38624: LD_EXP 130
38628: PUSH
38629: LD_VAR 0 5
38633: ARRAY
38634: PUSH
38635: LD_INT 1
38637: PLUS
38638: PPUSH
38639: CALL_OW 1
38643: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38644: LD_ADDR_EXP 127
38648: PUSH
38649: LD_EXP 127
38653: PPUSH
38654: LD_VAR 0 5
38658: PUSH
38659: LD_EXP 127
38663: PUSH
38664: LD_VAR 0 5
38668: ARRAY
38669: PUSH
38670: LD_INT 1
38672: PLUS
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PPUSH
38678: LD_VAR 0 2
38682: PUSH
38683: LD_VAR 0 4
38687: ARRAY
38688: PUSH
38689: LD_VAR 0 2
38693: PUSH
38694: LD_VAR 0 4
38698: ARRAY
38699: PPUSH
38700: CALL_OW 255
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PPUSH
38709: CALL 47338 0 3
38713: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38714: LD_VAR 0 2
38718: PUSH
38719: LD_VAR 0 4
38723: ARRAY
38724: PPUSH
38725: LD_VAR 0 1
38729: PPUSH
38730: CALL_OW 255
38734: PPUSH
38735: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38739: LD_VAR 0 2
38743: PUSH
38744: LD_VAR 0 4
38748: ARRAY
38749: PPUSH
38750: CALL_OW 141
// end ;
38754: GO 38586
38756: POP
38757: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38758: LD_VAR 0 1
38762: PPUSH
38763: LD_EXP 127
38767: PUSH
38768: LD_VAR 0 5
38772: ARRAY
38773: PUSH
38774: LD_INT 0
38776: PLUS
38777: PPUSH
38778: CALL_OW 505
// end ;
38782: LD_VAR 0 3
38786: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38787: LD_INT 0
38789: PPUSH
38790: PPUSH
38791: PPUSH
38792: PPUSH
// if not hack in hackTanks then
38793: LD_VAR 0 1
38797: PUSH
38798: LD_EXP 126
38802: IN
38803: NOT
38804: IFFALSE 38808
// exit ;
38806: GO 39052
// index := GetElementIndex ( hackTanks , hack ) ;
38808: LD_ADDR_VAR 0 4
38812: PUSH
38813: LD_EXP 126
38817: PPUSH
38818: LD_VAR 0 1
38822: PPUSH
38823: CALL 47121 0 2
38827: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38828: LD_ADDR_VAR 0 3
38832: PUSH
38833: DOUBLE
38834: LD_EXP 127
38838: PUSH
38839: LD_VAR 0 4
38843: ARRAY
38844: INC
38845: ST_TO_ADDR
38846: LD_INT 1
38848: PUSH
38849: FOR_DOWNTO
38850: IFFALSE 39026
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38852: LD_ADDR_VAR 0 5
38856: PUSH
38857: LD_EXP 127
38861: PUSH
38862: LD_VAR 0 4
38866: ARRAY
38867: PUSH
38868: LD_VAR 0 3
38872: ARRAY
38873: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38874: LD_VAR 0 5
38878: PUSH
38879: LD_INT 1
38881: ARRAY
38882: PPUSH
38883: CALL_OW 302
38887: NOT
38888: IFTRUE 38916
38890: PUSH
38891: LD_VAR 0 5
38895: PUSH
38896: LD_INT 1
38898: ARRAY
38899: PPUSH
38900: CALL_OW 255
38904: PUSH
38905: LD_VAR 0 1
38909: PPUSH
38910: CALL_OW 255
38914: NONEQUAL
38915: OR
38916: IFFALSE 39024
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38918: LD_VAR 0 5
38922: PUSH
38923: LD_INT 1
38925: ARRAY
38926: PPUSH
38927: CALL_OW 305
38931: IFFALSE 38959
38933: PUSH
38934: LD_VAR 0 5
38938: PUSH
38939: LD_INT 1
38941: ARRAY
38942: PPUSH
38943: CALL_OW 255
38947: PUSH
38948: LD_VAR 0 1
38952: PPUSH
38953: CALL_OW 255
38957: EQUAL
38958: AND
38959: IFFALSE 38983
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38961: LD_VAR 0 5
38965: PUSH
38966: LD_INT 1
38968: ARRAY
38969: PPUSH
38970: LD_VAR 0 5
38974: PUSH
38975: LD_INT 2
38977: ARRAY
38978: PPUSH
38979: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38983: LD_ADDR_EXP 127
38987: PUSH
38988: LD_EXP 127
38992: PPUSH
38993: LD_VAR 0 4
38997: PPUSH
38998: LD_EXP 127
39002: PUSH
39003: LD_VAR 0 4
39007: ARRAY
39008: PPUSH
39009: LD_VAR 0 3
39013: PPUSH
39014: CALL_OW 3
39018: PPUSH
39019: CALL_OW 1
39023: ST_TO_ADDR
// end ; end ;
39024: GO 38849
39026: POP
39027: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39028: LD_VAR 0 1
39032: PPUSH
39033: LD_EXP 127
39037: PUSH
39038: LD_VAR 0 4
39042: ARRAY
39043: PUSH
39044: LD_INT 0
39046: PLUS
39047: PPUSH
39048: CALL_OW 505
// end ;
39052: LD_VAR 0 2
39056: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39057: LD_INT 0
39059: PPUSH
39060: PPUSH
39061: PPUSH
39062: PPUSH
// if not hack in hackTanks then
39063: LD_VAR 0 1
39067: PUSH
39068: LD_EXP 126
39072: IN
39073: NOT
39074: IFFALSE 39078
// exit ;
39076: GO 39163
// index := GetElementIndex ( hackTanks , hack ) ;
39078: LD_ADDR_VAR 0 5
39082: PUSH
39083: LD_EXP 126
39087: PPUSH
39088: LD_VAR 0 1
39092: PPUSH
39093: CALL 47121 0 2
39097: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39098: LD_ADDR_VAR 0 4
39102: PUSH
39103: DOUBLE
39104: LD_INT 1
39106: DEC
39107: ST_TO_ADDR
39108: LD_EXP 127
39112: PUSH
39113: LD_VAR 0 5
39117: ARRAY
39118: PUSH
39119: FOR_TO
39120: IFFALSE 39161
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39122: LD_EXP 127
39126: PUSH
39127: LD_VAR 0 5
39131: ARRAY
39132: PUSH
39133: LD_VAR 0 4
39137: ARRAY
39138: PUSH
39139: LD_INT 1
39141: ARRAY
39142: PUSH
39143: LD_VAR 0 2
39147: EQUAL
39148: IFFALSE 39159
// KillUnit ( vehicle ) ;
39150: LD_VAR 0 2
39154: PPUSH
39155: CALL_OW 66
39159: GO 39119
39161: POP
39162: POP
// end ;
39163: LD_VAR 0 3
39167: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
39168: LD_EXP 131
39172: NOT
39173: IFFALSE 39306
39175: GO 39177
39177: DISABLE
39178: LD_INT 0
39180: PPUSH
// begin initMiner := true ;
39181: LD_ADDR_EXP 131
39185: PUSH
39186: LD_INT 1
39188: ST_TO_ADDR
// minersList := [ ] ;
39189: LD_ADDR_EXP 132
39193: PUSH
39194: EMPTY
39195: ST_TO_ADDR
// minerMinesList := [ ] ;
39196: LD_ADDR_EXP 133
39200: PUSH
39201: EMPTY
39202: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
39203: LD_ADDR_EXP 134
39207: PUSH
39208: LD_INT 10
39210: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39211: LD_ADDR_VAR 0 1
39215: PUSH
39216: LD_INT 34
39218: PUSH
39219: LD_INT 81
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PPUSH
39226: CALL_OW 69
39230: PUSH
39231: FOR_IN
39232: IFFALSE 39304
// begin if not i in minersList then
39234: LD_VAR 0 1
39238: PUSH
39239: LD_EXP 132
39243: IN
39244: NOT
39245: IFFALSE 39302
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39247: LD_ADDR_EXP 132
39251: PUSH
39252: LD_EXP 132
39256: PPUSH
39257: LD_EXP 132
39261: PUSH
39262: LD_INT 1
39264: PLUS
39265: PPUSH
39266: LD_VAR 0 1
39270: PPUSH
39271: CALL_OW 1
39275: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39276: LD_ADDR_EXP 133
39280: PUSH
39281: LD_EXP 133
39285: PPUSH
39286: LD_EXP 133
39290: PUSH
39291: LD_INT 1
39293: PLUS
39294: PPUSH
39295: EMPTY
39296: PPUSH
39297: CALL_OW 1
39301: ST_TO_ADDR
// end end ;
39302: GO 39231
39304: POP
39305: POP
// end ;
39306: PPOPN 1
39308: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
39309: LD_EXP 131
39313: IFFALSE 39344
39315: PUSH
39316: LD_EXP 133
39320: PPUSH
39321: CALL 44420 0 1
39325: IFTRUE 39343
39327: PUSH
39328: LD_INT 34
39330: PUSH
39331: LD_INT 81
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PPUSH
39338: CALL_OW 69
39342: OR
39343: AND
39344: IFFALSE 39864
39346: GO 39348
39348: DISABLE
39349: LD_INT 0
39351: PPUSH
39352: PPUSH
39353: PPUSH
39354: PPUSH
// begin enable ;
39355: ENABLE
// for i := minerMinesList downto 1 do
39356: LD_ADDR_VAR 0 1
39360: PUSH
39361: DOUBLE
39362: LD_EXP 133
39366: INC
39367: ST_TO_ADDR
39368: LD_INT 1
39370: PUSH
39371: FOR_DOWNTO
39372: IFFALSE 39862
// begin side := GetSide ( minersList [ i ] ) ;
39374: LD_ADDR_VAR 0 3
39378: PUSH
39379: LD_EXP 132
39383: PUSH
39384: LD_VAR 0 1
39388: ARRAY
39389: PPUSH
39390: CALL_OW 255
39394: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
39395: LD_EXP 132
39399: PUSH
39400: LD_VAR 0 1
39404: ARRAY
39405: PPUSH
39406: CALL_OW 300
39410: IFFALSE 39431
39412: PUSH
39413: LD_VAR 0 3
39417: PUSH
39418: LD_OWVAR 2
39422: PUSH
39423: LD_INT 9
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: IN
39430: AND
39431: IFFALSE 39464
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
39433: LD_EXP 132
39437: PUSH
39438: LD_VAR 0 1
39442: ARRAY
39443: PPUSH
39444: LD_EXP 133
39448: PUSH
39449: LD_VAR 0 1
39453: ARRAY
39454: PPUSH
39455: CALL 44420 0 1
39459: PPUSH
39460: CALL_OW 505
// if not minerMinesList [ i ] then
39464: LD_EXP 133
39468: PUSH
39469: LD_VAR 0 1
39473: ARRAY
39474: NOT
39475: IFFALSE 39479
// continue ;
39477: GO 39371
// for j := minerMinesList [ i ] downto 1 do
39479: LD_ADDR_VAR 0 2
39483: PUSH
39484: DOUBLE
39485: LD_EXP 133
39489: PUSH
39490: LD_VAR 0 1
39494: ARRAY
39495: INC
39496: ST_TO_ADDR
39497: LD_INT 1
39499: PUSH
39500: FOR_DOWNTO
39501: IFFALSE 39858
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
39503: LD_EXP 132
39507: PUSH
39508: LD_VAR 0 1
39512: ARRAY
39513: PPUSH
39514: CALL_OW 301
39518: IFTRUE 39538
39520: PUSH
39521: LD_EXP 132
39525: PUSH
39526: LD_VAR 0 1
39530: ARRAY
39531: PPUSH
39532: CALL_OW 305
39536: NOT
39537: OR
39538: IFFALSE 39629
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39540: LD_EXP 133
39544: PUSH
39545: LD_VAR 0 1
39549: ARRAY
39550: PUSH
39551: LD_VAR 0 2
39555: ARRAY
39556: PUSH
39557: LD_INT 1
39559: ARRAY
39560: PPUSH
39561: LD_EXP 133
39565: PUSH
39566: LD_VAR 0 1
39570: ARRAY
39571: PUSH
39572: LD_VAR 0 2
39576: ARRAY
39577: PUSH
39578: LD_INT 2
39580: ARRAY
39581: PPUSH
39582: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39586: LD_ADDR_EXP 133
39590: PUSH
39591: LD_EXP 133
39595: PPUSH
39596: LD_VAR 0 1
39600: PPUSH
39601: LD_EXP 133
39605: PUSH
39606: LD_VAR 0 1
39610: ARRAY
39611: PPUSH
39612: LD_VAR 0 2
39616: PPUSH
39617: CALL_OW 3
39621: PPUSH
39622: CALL_OW 1
39626: ST_TO_ADDR
// continue ;
39627: GO 39500
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39629: LD_ADDR_VAR 0 4
39633: PUSH
39634: LD_EXP 133
39638: PUSH
39639: LD_VAR 0 1
39643: ARRAY
39644: PUSH
39645: LD_VAR 0 2
39649: ARRAY
39650: PUSH
39651: LD_INT 1
39653: ARRAY
39654: PPUSH
39655: LD_EXP 133
39659: PUSH
39660: LD_VAR 0 1
39664: ARRAY
39665: PUSH
39666: LD_VAR 0 2
39670: ARRAY
39671: PUSH
39672: LD_INT 2
39674: ARRAY
39675: PPUSH
39676: CALL_OW 428
39680: ST_TO_ADDR
// if not tmp then
39681: LD_VAR 0 4
39685: NOT
39686: IFFALSE 39690
// continue ;
39688: GO 39500
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39690: LD_VAR 0 4
39694: PUSH
39695: LD_INT 81
39697: PUSH
39698: LD_VAR 0 3
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PPUSH
39707: CALL_OW 69
39711: IN
39712: IFFALSE 39762
39714: PUSH
39715: LD_EXP 133
39719: PUSH
39720: LD_VAR 0 1
39724: ARRAY
39725: PUSH
39726: LD_VAR 0 2
39730: ARRAY
39731: PUSH
39732: LD_INT 1
39734: ARRAY
39735: PPUSH
39736: LD_EXP 133
39740: PUSH
39741: LD_VAR 0 1
39745: ARRAY
39746: PUSH
39747: LD_VAR 0 2
39751: ARRAY
39752: PUSH
39753: LD_INT 2
39755: ARRAY
39756: PPUSH
39757: CALL_OW 458
39761: AND
39762: IFFALSE 39856
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39764: LD_EXP 133
39768: PUSH
39769: LD_VAR 0 1
39773: ARRAY
39774: PUSH
39775: LD_VAR 0 2
39779: ARRAY
39780: PUSH
39781: LD_INT 1
39783: ARRAY
39784: PPUSH
39785: LD_EXP 133
39789: PUSH
39790: LD_VAR 0 1
39794: ARRAY
39795: PUSH
39796: LD_VAR 0 2
39800: ARRAY
39801: PUSH
39802: LD_INT 2
39804: ARRAY
39805: PPUSH
39806: LD_VAR 0 3
39810: PPUSH
39811: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39815: LD_ADDR_EXP 133
39819: PUSH
39820: LD_EXP 133
39824: PPUSH
39825: LD_VAR 0 1
39829: PPUSH
39830: LD_EXP 133
39834: PUSH
39835: LD_VAR 0 1
39839: ARRAY
39840: PPUSH
39841: LD_VAR 0 2
39845: PPUSH
39846: CALL_OW 3
39850: PPUSH
39851: CALL_OW 1
39855: ST_TO_ADDR
// end ; end ;
39856: GO 39500
39858: POP
39859: POP
// end ;
39860: GO 39371
39862: POP
39863: POP
// end ;
39864: PPOPN 4
39866: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
39867: LD_INT 0
39869: PPUSH
39870: PPUSH
39871: PPUSH
39872: PPUSH
// result := false ;
39873: LD_ADDR_VAR 0 4
39877: PUSH
39878: LD_INT 0
39880: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39881: LD_VAR 0 1
39885: PPUSH
39886: CALL_OW 264
39890: PUSH
39891: LD_INT 81
39893: EQUAL
39894: NOT
39895: IFFALSE 39899
// exit ;
39897: GO 40269
// side := GetSide ( unit ) ;
39899: LD_ADDR_VAR 0 6
39903: PUSH
39904: LD_VAR 0 1
39908: PPUSH
39909: CALL_OW 255
39913: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
39914: LD_ADDR_VAR 0 5
39918: PUSH
39919: LD_EXP 132
39923: PPUSH
39924: LD_VAR 0 1
39928: PPUSH
39929: CALL 47121 0 2
39933: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39934: LD_EXP 133
39938: PUSH
39939: LD_VAR 0 5
39943: ARRAY
39944: PUSH
39945: LD_EXP 134
39949: GREATEREQUAL
39950: IFFALSE 39954
// exit ;
39952: GO 40269
// ComMoveXY ( unit , x , y ) ;
39954: LD_VAR 0 1
39958: PPUSH
39959: LD_VAR 0 2
39963: PPUSH
39964: LD_VAR 0 3
39968: PPUSH
39969: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39973: LD_INT 35
39975: PPUSH
39976: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39980: LD_VAR 0 1
39984: PPUSH
39985: LD_VAR 0 2
39989: PPUSH
39990: LD_VAR 0 3
39994: PPUSH
39995: CALL 79177 0 3
39999: NOT
40000: IFFALSE 40013
40002: PUSH
40003: LD_VAR 0 1
40007: PPUSH
40008: CALL_OW 314
40012: AND
40013: IFFALSE 40017
// exit ;
40015: GO 40269
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40017: LD_VAR 0 2
40021: PPUSH
40022: LD_VAR 0 3
40026: PPUSH
40027: CALL_OW 428
40031: PUSH
40032: LD_VAR 0 1
40036: EQUAL
40037: IFFALSE 40051
40039: PUSH
40040: LD_VAR 0 1
40044: PPUSH
40045: CALL_OW 314
40049: NOT
40050: AND
40051: IFFALSE 39973
// if MineAtPos ( x , y ) then
40053: LD_VAR 0 2
40057: PPUSH
40058: LD_VAR 0 3
40062: PPUSH
40063: CALL_OW 458
40067: IFFALSE 40071
// exit ;
40069: GO 40269
// if your_side = side then
40071: LD_OWVAR 2
40075: PUSH
40076: LD_VAR 0 6
40080: EQUAL
40081: IFFALSE 40100
// PlaySoundXY ( x , y , PlantMine ) ;
40083: LD_VAR 0 2
40087: PPUSH
40088: LD_VAR 0 3
40092: PPUSH
40093: LD_STRING PlantMine
40095: PPUSH
40096: CALL_OW 366
// repeat wait ( 1 ) ;
40100: LD_INT 1
40102: PPUSH
40103: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
40107: LD_VAR 0 2
40111: PPUSH
40112: LD_VAR 0 3
40116: PPUSH
40117: LD_VAR 0 6
40121: PPUSH
40122: LD_INT 0
40124: PPUSH
40125: CALL_OW 454
40129: IFFALSE 40100
// if MineAtPos ( x , y ) then
40131: LD_VAR 0 2
40135: PPUSH
40136: LD_VAR 0 3
40140: PPUSH
40141: CALL_OW 458
40145: IFFALSE 40261
// begin for i in minerMinesList [ index ] do
40147: LD_ADDR_VAR 0 7
40151: PUSH
40152: LD_EXP 133
40156: PUSH
40157: LD_VAR 0 5
40161: ARRAY
40162: PUSH
40163: FOR_IN
40164: IFFALSE 40206
// if i [ 1 ] = x and i [ 2 ] = y then
40166: LD_VAR 0 7
40170: PUSH
40171: LD_INT 1
40173: ARRAY
40174: PUSH
40175: LD_VAR 0 2
40179: EQUAL
40180: IFFALSE 40198
40182: PUSH
40183: LD_VAR 0 7
40187: PUSH
40188: LD_INT 2
40190: ARRAY
40191: PUSH
40192: LD_VAR 0 3
40196: EQUAL
40197: AND
40198: IFFALSE 40204
// exit ;
40200: POP
40201: POP
40202: GO 40269
40204: GO 40163
40206: POP
40207: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40208: LD_ADDR_EXP 133
40212: PUSH
40213: LD_EXP 133
40217: PPUSH
40218: LD_VAR 0 5
40222: PUSH
40223: LD_EXP 133
40227: PUSH
40228: LD_VAR 0 5
40232: ARRAY
40233: PUSH
40234: LD_INT 1
40236: PLUS
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PPUSH
40242: LD_VAR 0 2
40246: PUSH
40247: LD_VAR 0 3
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PPUSH
40256: CALL 47338 0 3
40260: ST_TO_ADDR
// end ; result := true ;
40261: LD_ADDR_VAR 0 4
40265: PUSH
40266: LD_INT 1
40268: ST_TO_ADDR
// end ;
40269: LD_VAR 0 4
40273: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40274: LD_INT 0
40276: PPUSH
40277: PPUSH
40278: PPUSH
// if not unit in minersList then
40279: LD_VAR 0 1
40283: PUSH
40284: LD_EXP 132
40288: IN
40289: NOT
40290: IFFALSE 40294
// exit ;
40292: GO 40501
// index := GetElementIndex ( minersList , unit ) ;
40294: LD_ADDR_VAR 0 6
40298: PUSH
40299: LD_EXP 132
40303: PPUSH
40304: LD_VAR 0 1
40308: PPUSH
40309: CALL 47121 0 2
40313: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40314: LD_ADDR_VAR 0 5
40318: PUSH
40319: DOUBLE
40320: LD_EXP 133
40324: PUSH
40325: LD_VAR 0 6
40329: ARRAY
40330: INC
40331: ST_TO_ADDR
40332: LD_INT 1
40334: PUSH
40335: FOR_DOWNTO
40336: IFFALSE 40499
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40338: LD_EXP 133
40342: PUSH
40343: LD_VAR 0 6
40347: ARRAY
40348: PUSH
40349: LD_VAR 0 5
40353: ARRAY
40354: PUSH
40355: LD_INT 1
40357: ARRAY
40358: PPUSH
40359: LD_EXP 133
40363: PUSH
40364: LD_VAR 0 6
40368: ARRAY
40369: PUSH
40370: LD_VAR 0 5
40374: ARRAY
40375: PUSH
40376: LD_INT 2
40378: ARRAY
40379: PPUSH
40380: LD_VAR 0 2
40384: PPUSH
40385: LD_VAR 0 3
40389: PPUSH
40390: CALL_OW 298
40394: PUSH
40395: LD_INT 6
40397: LESS
40398: IFFALSE 40497
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40400: LD_EXP 133
40404: PUSH
40405: LD_VAR 0 6
40409: ARRAY
40410: PUSH
40411: LD_VAR 0 5
40415: ARRAY
40416: PUSH
40417: LD_INT 1
40419: ARRAY
40420: PPUSH
40421: LD_EXP 133
40425: PUSH
40426: LD_VAR 0 6
40430: ARRAY
40431: PUSH
40432: LD_VAR 0 5
40436: ARRAY
40437: PUSH
40438: LD_INT 2
40440: ARRAY
40441: PPUSH
40442: LD_VAR 0 1
40446: PPUSH
40447: CALL_OW 255
40451: PPUSH
40452: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40456: LD_ADDR_EXP 133
40460: PUSH
40461: LD_EXP 133
40465: PPUSH
40466: LD_VAR 0 6
40470: PPUSH
40471: LD_EXP 133
40475: PUSH
40476: LD_VAR 0 6
40480: ARRAY
40481: PPUSH
40482: LD_VAR 0 5
40486: PPUSH
40487: CALL_OW 3
40491: PPUSH
40492: CALL_OW 1
40496: ST_TO_ADDR
// end ; end ;
40497: GO 40335
40499: POP
40500: POP
// end ;
40501: LD_VAR 0 4
40505: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40506: LD_INT 0
40508: PPUSH
40509: PPUSH
40510: PPUSH
40511: PPUSH
40512: PPUSH
40513: PPUSH
40514: PPUSH
40515: PPUSH
40516: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40517: LD_VAR 0 1
40521: PPUSH
40522: CALL_OW 264
40526: PUSH
40527: LD_INT 81
40529: EQUAL
40530: NOT
40531: IFTRUE 40546
40533: PUSH
40534: LD_VAR 0 1
40538: PUSH
40539: LD_EXP 132
40543: IN
40544: NOT
40545: OR
40546: IFFALSE 40550
// exit ;
40548: GO 40876
// index := GetElementIndex ( minersList , unit ) ;
40550: LD_ADDR_VAR 0 6
40554: PUSH
40555: LD_EXP 132
40559: PPUSH
40560: LD_VAR 0 1
40564: PPUSH
40565: CALL 47121 0 2
40569: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40570: LD_ADDR_VAR 0 8
40574: PUSH
40575: LD_EXP 134
40579: PUSH
40580: LD_EXP 133
40584: PUSH
40585: LD_VAR 0 6
40589: ARRAY
40590: MINUS
40591: ST_TO_ADDR
// if not minesFreeAmount then
40592: LD_VAR 0 8
40596: NOT
40597: IFFALSE 40601
// exit ;
40599: GO 40876
// tmp := [ ] ;
40601: LD_ADDR_VAR 0 7
40605: PUSH
40606: EMPTY
40607: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40608: LD_ADDR_VAR 0 5
40612: PUSH
40613: DOUBLE
40614: LD_INT 1
40616: DEC
40617: ST_TO_ADDR
40618: LD_VAR 0 8
40622: PUSH
40623: FOR_TO
40624: IFFALSE 40823
// begin _d := rand ( 0 , 5 ) ;
40626: LD_ADDR_VAR 0 11
40630: PUSH
40631: LD_INT 0
40633: PPUSH
40634: LD_INT 5
40636: PPUSH
40637: CALL_OW 12
40641: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40642: LD_ADDR_VAR 0 12
40646: PUSH
40647: LD_INT 2
40649: PPUSH
40650: LD_INT 6
40652: PPUSH
40653: CALL_OW 12
40657: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40658: LD_ADDR_VAR 0 9
40662: PUSH
40663: LD_VAR 0 2
40667: PPUSH
40668: LD_VAR 0 11
40672: PPUSH
40673: LD_VAR 0 12
40677: PPUSH
40678: CALL_OW 272
40682: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40683: LD_ADDR_VAR 0 10
40687: PUSH
40688: LD_VAR 0 3
40692: PPUSH
40693: LD_VAR 0 11
40697: PPUSH
40698: LD_VAR 0 12
40702: PPUSH
40703: CALL_OW 273
40707: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40708: LD_VAR 0 9
40712: PPUSH
40713: LD_VAR 0 10
40717: PPUSH
40718: CALL_OW 488
40722: IFFALSE 40746
40724: PUSH
40725: LD_VAR 0 9
40729: PUSH
40730: LD_VAR 0 10
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_VAR 0 7
40743: IN
40744: NOT
40745: AND
40746: IFFALSE 40765
40748: PUSH
40749: LD_VAR 0 9
40753: PPUSH
40754: LD_VAR 0 10
40758: PPUSH
40759: CALL_OW 458
40763: NOT
40764: AND
40765: IFFALSE 40807
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40767: LD_ADDR_VAR 0 7
40771: PUSH
40772: LD_VAR 0 7
40776: PPUSH
40777: LD_VAR 0 7
40781: PUSH
40782: LD_INT 1
40784: PLUS
40785: PPUSH
40786: LD_VAR 0 9
40790: PUSH
40791: LD_VAR 0 10
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PPUSH
40800: CALL_OW 1
40804: ST_TO_ADDR
40805: GO 40821
// i := i - 1 ;
40807: LD_ADDR_VAR 0 5
40811: PUSH
40812: LD_VAR 0 5
40816: PUSH
40817: LD_INT 1
40819: MINUS
40820: ST_TO_ADDR
// end ;
40821: GO 40623
40823: POP
40824: POP
// for i in tmp do
40825: LD_ADDR_VAR 0 5
40829: PUSH
40830: LD_VAR 0 7
40834: PUSH
40835: FOR_IN
40836: IFFALSE 40874
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40838: LD_VAR 0 1
40842: PPUSH
40843: LD_VAR 0 5
40847: PUSH
40848: LD_INT 1
40850: ARRAY
40851: PPUSH
40852: LD_VAR 0 5
40856: PUSH
40857: LD_INT 2
40859: ARRAY
40860: PPUSH
40861: CALL 39867 0 3
40865: NOT
40866: IFFALSE 40872
// exit ;
40868: POP
40869: POP
40870: GO 40876
40872: GO 40835
40874: POP
40875: POP
// end ;
40876: LD_VAR 0 4
40880: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
40881: LD_INT 0
40883: PPUSH
40884: PPUSH
40885: PPUSH
40886: PPUSH
40887: PPUSH
40888: PPUSH
40889: PPUSH
40890: PPUSH
40891: PPUSH
// if GetClass ( unit ) <> class_sniper then
40892: LD_VAR 0 1
40896: PPUSH
40897: CALL_OW 257
40901: PUSH
40902: LD_INT 5
40904: NONEQUAL
40905: IFFALSE 40909
// exit ;
40907: GO 41379
// dist := 8 ;
40909: LD_ADDR_VAR 0 5
40913: PUSH
40914: LD_INT 8
40916: ST_TO_ADDR
// viewRange := 12 ;
40917: LD_ADDR_VAR 0 8
40921: PUSH
40922: LD_INT 12
40924: ST_TO_ADDR
// side := GetSide ( unit ) ;
40925: LD_ADDR_VAR 0 6
40929: PUSH
40930: LD_VAR 0 1
40934: PPUSH
40935: CALL_OW 255
40939: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40940: LD_INT 61
40942: PPUSH
40943: LD_VAR 0 6
40947: PPUSH
40948: CALL_OW 321
40952: PUSH
40953: LD_INT 2
40955: EQUAL
40956: IFFALSE 40966
// viewRange := 16 ;
40958: LD_ADDR_VAR 0 8
40962: PUSH
40963: LD_INT 16
40965: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40966: LD_VAR 0 1
40970: PPUSH
40971: LD_VAR 0 2
40975: PPUSH
40976: LD_VAR 0 3
40980: PPUSH
40981: CALL_OW 297
40985: PUSH
40986: LD_VAR 0 5
40990: GREATER
40991: IFFALSE 41070
// begin ComMoveXY ( unit , x , y ) ;
40993: LD_VAR 0 1
40997: PPUSH
40998: LD_VAR 0 2
41002: PPUSH
41003: LD_VAR 0 3
41007: PPUSH
41008: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41012: LD_INT 35
41014: PPUSH
41015: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41019: LD_VAR 0 1
41023: PPUSH
41024: LD_VAR 0 2
41028: PPUSH
41029: LD_VAR 0 3
41033: PPUSH
41034: CALL 79177 0 3
41038: NOT
41039: IFFALSE 41043
// exit ;
41041: GO 41379
// until GetDistUnitXY ( unit , x , y ) < dist ;
41043: LD_VAR 0 1
41047: PPUSH
41048: LD_VAR 0 2
41052: PPUSH
41053: LD_VAR 0 3
41057: PPUSH
41058: CALL_OW 297
41062: PUSH
41063: LD_VAR 0 5
41067: LESS
41068: IFFALSE 41012
// end ; ComTurnXY ( unit , x , y ) ;
41070: LD_VAR 0 1
41074: PPUSH
41075: LD_VAR 0 2
41079: PPUSH
41080: LD_VAR 0 3
41084: PPUSH
41085: CALL_OW 118
// repeat if Multiplayer then
41089: LD_OWVAR 4
41093: IFFALSE 41104
// wait ( 35 ) else
41095: LD_INT 35
41097: PPUSH
41098: CALL_OW 67
41102: GO 41111
// wait ( 5 ) ;
41104: LD_INT 5
41106: PPUSH
41107: CALL_OW 67
// _d := GetDir ( unit ) ;
41111: LD_ADDR_VAR 0 11
41115: PUSH
41116: LD_VAR 0 1
41120: PPUSH
41121: CALL_OW 254
41125: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
41126: LD_ADDR_VAR 0 7
41130: PUSH
41131: LD_VAR 0 1
41135: PPUSH
41136: CALL_OW 250
41140: PPUSH
41141: LD_VAR 0 1
41145: PPUSH
41146: CALL_OW 251
41150: PPUSH
41151: LD_VAR 0 2
41155: PPUSH
41156: LD_VAR 0 3
41160: PPUSH
41161: CALL 81813 0 4
41165: ST_TO_ADDR
// until dir = _d ;
41166: LD_VAR 0 7
41170: PUSH
41171: LD_VAR 0 11
41175: EQUAL
41176: IFFALSE 41089
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
41178: LD_ADDR_VAR 0 9
41182: PUSH
41183: LD_VAR 0 1
41187: PPUSH
41188: CALL_OW 250
41192: PPUSH
41193: LD_VAR 0 7
41197: PPUSH
41198: LD_VAR 0 5
41202: PPUSH
41203: CALL_OW 272
41207: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41208: LD_ADDR_VAR 0 10
41212: PUSH
41213: LD_VAR 0 1
41217: PPUSH
41218: CALL_OW 251
41222: PPUSH
41223: LD_VAR 0 7
41227: PPUSH
41228: LD_VAR 0 5
41232: PPUSH
41233: CALL_OW 273
41237: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41238: LD_VAR 0 9
41242: PPUSH
41243: LD_VAR 0 10
41247: PPUSH
41248: CALL_OW 488
41252: NOT
41253: IFFALSE 41257
// exit ;
41255: GO 41379
// ComAnimCustom ( unit , 1 ) ;
41257: LD_VAR 0 1
41261: PPUSH
41262: LD_INT 1
41264: PPUSH
41265: CALL_OW 592
// p := 0 ;
41269: LD_ADDR_VAR 0 12
41273: PUSH
41274: LD_INT 0
41276: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41277: LD_VAR 0 9
41281: PPUSH
41282: LD_VAR 0 10
41286: PPUSH
41287: LD_VAR 0 6
41291: PPUSH
41292: LD_VAR 0 8
41296: PPUSH
41297: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41301: LD_INT 35
41303: PPUSH
41304: CALL_OW 67
// p := Inc ( p ) ;
41308: LD_ADDR_VAR 0 12
41312: PUSH
41313: LD_VAR 0 12
41317: PPUSH
41318: CALL 81769 0 1
41322: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41323: LD_VAR 0 12
41327: PUSH
41328: LD_INT 3
41330: EQUAL
41331: IFTRUE 41345
41333: PUSH
41334: LD_VAR 0 1
41338: PPUSH
41339: CALL_OW 302
41343: NOT
41344: OR
41345: IFTRUE 41358
41347: PUSH
41348: LD_VAR 0 1
41352: PPUSH
41353: CALL_OW 301
41357: OR
41358: IFFALSE 41301
// RemoveSeeing ( _x , _y , side ) ;
41360: LD_VAR 0 9
41364: PPUSH
41365: LD_VAR 0 10
41369: PPUSH
41370: LD_VAR 0 6
41374: PPUSH
41375: CALL_OW 331
// end ;
41379: LD_VAR 0 4
41383: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
41384: LD_INT 0
41386: PPUSH
41387: PPUSH
41388: PPUSH
41389: PPUSH
41390: PPUSH
41391: PPUSH
41392: PPUSH
41393: PPUSH
41394: PPUSH
41395: PPUSH
41396: PPUSH
// if not unit then
41397: LD_VAR 0 1
41401: NOT
41402: IFFALSE 41406
// exit ;
41404: GO 41677
// side := GetSide ( unit ) ;
41406: LD_ADDR_VAR 0 3
41410: PUSH
41411: LD_VAR 0 1
41415: PPUSH
41416: CALL_OW 255
41420: ST_TO_ADDR
// x := GetX ( unit ) ;
41421: LD_ADDR_VAR 0 5
41425: PUSH
41426: LD_VAR 0 1
41430: PPUSH
41431: CALL_OW 250
41435: ST_TO_ADDR
// y := GetY ( unit ) ;
41436: LD_ADDR_VAR 0 6
41440: PUSH
41441: LD_VAR 0 1
41445: PPUSH
41446: CALL_OW 251
41450: ST_TO_ADDR
// r := 8 ;
41451: LD_ADDR_VAR 0 4
41455: PUSH
41456: LD_INT 8
41458: ST_TO_ADDR
// if x - r < 0 then
41459: LD_VAR 0 5
41463: PUSH
41464: LD_VAR 0 4
41468: MINUS
41469: PUSH
41470: LD_INT 0
41472: LESS
41473: IFFALSE 41485
// min_x := 0 else
41475: LD_ADDR_VAR 0 7
41479: PUSH
41480: LD_INT 0
41482: ST_TO_ADDR
41483: GO 41501
// min_x := x - r ;
41485: LD_ADDR_VAR 0 7
41489: PUSH
41490: LD_VAR 0 5
41494: PUSH
41495: LD_VAR 0 4
41499: MINUS
41500: ST_TO_ADDR
// if y - r < 0 then
41501: LD_VAR 0 6
41505: PUSH
41506: LD_VAR 0 4
41510: MINUS
41511: PUSH
41512: LD_INT 0
41514: LESS
41515: IFFALSE 41527
// min_y := 0 else
41517: LD_ADDR_VAR 0 8
41521: PUSH
41522: LD_INT 0
41524: ST_TO_ADDR
41525: GO 41543
// min_y := y - r ;
41527: LD_ADDR_VAR 0 8
41531: PUSH
41532: LD_VAR 0 6
41536: PUSH
41537: LD_VAR 0 4
41541: MINUS
41542: ST_TO_ADDR
// max_x := x + r ;
41543: LD_ADDR_VAR 0 9
41547: PUSH
41548: LD_VAR 0 5
41552: PUSH
41553: LD_VAR 0 4
41557: PLUS
41558: ST_TO_ADDR
// max_y := y + r ;
41559: LD_ADDR_VAR 0 10
41563: PUSH
41564: LD_VAR 0 6
41568: PUSH
41569: LD_VAR 0 4
41573: PLUS
41574: ST_TO_ADDR
// for _x = min_x to max_x do
41575: LD_ADDR_VAR 0 11
41579: PUSH
41580: DOUBLE
41581: LD_VAR 0 7
41585: DEC
41586: ST_TO_ADDR
41587: LD_VAR 0 9
41591: PUSH
41592: FOR_TO
41593: IFFALSE 41675
// for _y = min_y to max_y do
41595: LD_ADDR_VAR 0 12
41599: PUSH
41600: DOUBLE
41601: LD_VAR 0 8
41605: DEC
41606: ST_TO_ADDR
41607: LD_VAR 0 10
41611: PUSH
41612: FOR_TO
41613: IFFALSE 41671
// begin if not ValidHex ( _x , _y ) then
41615: LD_VAR 0 11
41619: PPUSH
41620: LD_VAR 0 12
41624: PPUSH
41625: CALL_OW 488
41629: NOT
41630: IFFALSE 41634
// continue ;
41632: GO 41612
// if MineAtPos ( _x , _y ) then
41634: LD_VAR 0 11
41638: PPUSH
41639: LD_VAR 0 12
41643: PPUSH
41644: CALL_OW 458
41648: IFFALSE 41669
// ViewMineAtPos ( _x , _y , side ) ;
41650: LD_VAR 0 11
41654: PPUSH
41655: LD_VAR 0 12
41659: PPUSH
41660: LD_VAR 0 3
41664: PPUSH
41665: CALL_OW 457
// end ;
41669: GO 41612
41671: POP
41672: POP
41673: GO 41592
41675: POP
41676: POP
// end ;
41677: LD_VAR 0 2
41681: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
41682: LD_INT 0
41684: PPUSH
41685: PPUSH
41686: PPUSH
41687: PPUSH
41688: PPUSH
41689: PPUSH
41690: PPUSH
// if not units then
41691: LD_VAR 0 1
41695: NOT
41696: IFFALSE 41700
// exit ;
41698: GO 42164
// scaners := [ ] ;
41700: LD_ADDR_VAR 0 6
41704: PUSH
41705: EMPTY
41706: ST_TO_ADDR
// for i in units do
41707: LD_ADDR_VAR 0 3
41711: PUSH
41712: LD_VAR 0 1
41716: PUSH
41717: FOR_IN
41718: IFFALSE 41875
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
41720: LD_VAR 0 3
41724: PPUSH
41725: CALL_OW 264
41729: PUSH
41730: LD_INT 11
41732: NONEQUAL
41733: IFTRUE 41747
41735: PUSH
41736: LD_VAR 0 3
41740: PPUSH
41741: CALL_OW 302
41745: NOT
41746: OR
41747: IFTRUE 41764
41749: PUSH
41750: LD_VAR 0 3
41754: PPUSH
41755: CALL_OW 110
41759: PUSH
41760: LD_INT 502
41762: EQUAL
41763: OR
41764: IFFALSE 41768
// continue ;
41766: GO 41717
// ComStop ( i ) ;
41768: LD_VAR 0 3
41772: PPUSH
41773: CALL_OW 141
// x := GetX ( i ) ;
41777: LD_ADDR_VAR 0 4
41781: PUSH
41782: LD_VAR 0 3
41786: PPUSH
41787: CALL_OW 250
41791: ST_TO_ADDR
// y := GetY ( i ) ;
41792: LD_ADDR_VAR 0 5
41796: PUSH
41797: LD_VAR 0 3
41801: PPUSH
41802: CALL_OW 251
41806: ST_TO_ADDR
// if GetSide ( i ) = your_side then
41807: LD_VAR 0 3
41811: PPUSH
41812: CALL_OW 255
41816: PUSH
41817: LD_OWVAR 2
41821: EQUAL
41822: IFFALSE 41841
// PlaySoundXY ( x , y , mineDetector ) ;
41824: LD_VAR 0 4
41828: PPUSH
41829: LD_VAR 0 5
41833: PPUSH
41834: LD_STRING mineDetector
41836: PPUSH
41837: CALL_OW 366
// scaners := Join ( scaners , i ) ;
41841: LD_ADDR_VAR 0 6
41845: PUSH
41846: LD_VAR 0 6
41850: PPUSH
41851: LD_VAR 0 3
41855: PPUSH
41856: CALL 80396 0 2
41860: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
41861: LD_VAR 0 3
41865: PPUSH
41866: LD_INT 502
41868: PPUSH
41869: CALL_OW 109
// end ;
41873: GO 41717
41875: POP
41876: POP
// if not scaners then
41877: LD_VAR 0 6
41881: NOT
41882: IFFALSE 41886
// exit ;
41884: GO 42164
// wait ( 3 ) ;
41886: LD_INT 3
41888: PPUSH
41889: CALL_OW 67
// timer := 6 ;
41893: LD_ADDR_VAR 0 7
41897: PUSH
41898: LD_INT 6
41900: ST_TO_ADDR
// repeat for i in scaners do
41901: LD_ADDR_VAR 0 3
41905: PUSH
41906: LD_VAR 0 6
41910: PUSH
41911: FOR_IN
41912: IFFALSE 42062
// begin side := GetSide ( i ) ;
41914: LD_ADDR_VAR 0 8
41918: PUSH
41919: LD_VAR 0 3
41923: PPUSH
41924: CALL_OW 255
41928: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
41929: LD_VAR 0 3
41933: PPUSH
41934: CALL_OW 302
41938: NOT
41939: IFTRUE 41952
41941: PUSH
41942: LD_VAR 0 3
41946: PPUSH
41947: CALL_OW 314
41951: OR
41952: IFTRUE 41983
41954: PUSH
41955: LD_VAR 0 3
41959: PPUSH
41960: CALL_OW 263
41964: PUSH
41965: LD_INT 1
41967: EQUAL
41968: IFFALSE 41982
41970: PUSH
41971: LD_VAR 0 3
41975: PPUSH
41976: CALL_OW 311
41980: NOT
41981: AND
41982: OR
41983: IFFALSE 42027
// begin SetUnitDisplayNumber ( i , 0 ) ;
41985: LD_VAR 0 3
41989: PPUSH
41990: LD_INT 0
41992: PPUSH
41993: CALL_OW 505
// SetTag ( i , 0 ) ;
41997: LD_VAR 0 3
42001: PPUSH
42002: LD_INT 0
42004: PPUSH
42005: CALL_OW 109
// scaners := scaners diff i ;
42009: LD_ADDR_VAR 0 6
42013: PUSH
42014: LD_VAR 0 6
42018: PUSH
42019: LD_VAR 0 3
42023: DIFF
42024: ST_TO_ADDR
// continue ;
42025: GO 41911
// end ; if side in [ your_side , 9 ] then
42027: LD_VAR 0 8
42031: PUSH
42032: LD_OWVAR 2
42036: PUSH
42037: LD_INT 9
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: IN
42044: IFFALSE 42060
// SetUnitDisplayNumber ( i , timer ) ;
42046: LD_VAR 0 3
42050: PPUSH
42051: LD_VAR 0 7
42055: PPUSH
42056: CALL_OW 505
// end ;
42060: GO 41911
42062: POP
42063: POP
// if not scaners then
42064: LD_VAR 0 6
42068: NOT
42069: IFFALSE 42073
// exit ;
42071: GO 42164
// timer := Dec ( timer ) ;
42073: LD_ADDR_VAR 0 7
42077: PUSH
42078: LD_VAR 0 7
42082: PPUSH
42083: CALL 81791 0 1
42087: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42088: LD_INT 35
42090: PPUSH
42091: CALL_OW 67
// until timer = 0 ;
42095: LD_VAR 0 7
42099: PUSH
42100: LD_INT 0
42102: EQUAL
42103: IFFALSE 41901
// if not scaners then
42105: LD_VAR 0 6
42109: NOT
42110: IFFALSE 42114
// exit ;
42112: GO 42164
// for i in scaners do
42114: LD_ADDR_VAR 0 3
42118: PUSH
42119: LD_VAR 0 6
42123: PUSH
42124: FOR_IN
42125: IFFALSE 42162
// begin SetUnitDisplayNumber ( i , 0 ) ;
42127: LD_VAR 0 3
42131: PPUSH
42132: LD_INT 0
42134: PPUSH
42135: CALL_OW 505
// SetTag ( i , 0 ) ;
42139: LD_VAR 0 3
42143: PPUSH
42144: LD_INT 0
42146: PPUSH
42147: CALL_OW 109
// RevealDetectorMine ( i ) ;
42151: LD_VAR 0 3
42155: PPUSH
42156: CALL 41384 0 1
// end ;
42160: GO 42124
42162: POP
42163: POP
// end ;
42164: LD_VAR 0 2
42168: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
42169: LD_INT 0
42171: PPUSH
// if p1 = mine_detector_mode then
42172: LD_VAR 0 2
42176: PUSH
42177: LD_INT 103
42179: EQUAL
42180: IFFALSE 42191
// DetectMine ( units ) ;
42182: LD_VAR 0 1
42186: PPUSH
42187: CALL 41682 0 1
// end ; end_of_file
42191: LD_VAR 0 7
42195: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
42196: LD_INT 0
42198: PPUSH
42199: PPUSH
// if exist_mode then
42200: LD_VAR 0 2
42204: IFFALSE 42250
// begin unit := CreateCharacter ( prefix & ident ) ;
42206: LD_ADDR_VAR 0 5
42210: PUSH
42211: LD_VAR 0 3
42215: PUSH
42216: LD_VAR 0 1
42220: STR
42221: PPUSH
42222: CALL_OW 34
42226: ST_TO_ADDR
// if unit then
42227: LD_VAR 0 5
42231: IFFALSE 42248
// DeleteCharacters ( prefix & ident ) ;
42233: LD_VAR 0 3
42237: PUSH
42238: LD_VAR 0 1
42242: STR
42243: PPUSH
42244: CALL_OW 40
// end else
42248: GO 42265
// unit := NewCharacter ( ident ) ;
42250: LD_ADDR_VAR 0 5
42254: PUSH
42255: LD_VAR 0 1
42259: PPUSH
42260: CALL_OW 25
42264: ST_TO_ADDR
// result := unit ;
42265: LD_ADDR_VAR 0 4
42269: PUSH
42270: LD_VAR 0 5
42274: ST_TO_ADDR
// end ;
42275: LD_VAR 0 4
42279: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
42280: LD_INT 0
42282: PPUSH
42283: PPUSH
// if exist_mode then
42284: LD_VAR 0 2
42288: IFFALSE 42313
// unit := CreateCharacter ( prefix & ident ) else
42290: LD_ADDR_VAR 0 5
42294: PUSH
42295: LD_VAR 0 3
42299: PUSH
42300: LD_VAR 0 1
42304: STR
42305: PPUSH
42306: CALL_OW 34
42310: ST_TO_ADDR
42311: GO 42328
// unit := NewCharacter ( ident ) ;
42313: LD_ADDR_VAR 0 5
42317: PUSH
42318: LD_VAR 0 1
42322: PPUSH
42323: CALL_OW 25
42327: ST_TO_ADDR
// result := unit ;
42328: LD_ADDR_VAR 0 4
42332: PUSH
42333: LD_VAR 0 5
42337: ST_TO_ADDR
// end ;
42338: LD_VAR 0 4
42342: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
42343: LD_INT 0
42345: PPUSH
42346: PPUSH
// if not side or not nation then
42347: LD_VAR 0 1
42351: NOT
42352: IFTRUE 42361
42354: PUSH
42355: LD_VAR 0 2
42359: NOT
42360: OR
42361: IFFALSE 42365
// exit ;
42363: GO 43159
// case nation of nation_american :
42365: LD_VAR 0 2
42369: PUSH
42370: LD_INT 1
42372: DOUBLE
42373: EQUAL
42374: IFTRUE 42378
42376: GO 42600
42378: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
42379: LD_ADDR_VAR 0 4
42383: PUSH
42384: LD_INT 35
42386: PUSH
42387: LD_INT 45
42389: PUSH
42390: LD_INT 46
42392: PUSH
42393: LD_INT 47
42395: PUSH
42396: LD_INT 82
42398: PUSH
42399: LD_INT 83
42401: PUSH
42402: LD_INT 84
42404: PUSH
42405: LD_INT 85
42407: PUSH
42408: LD_INT 86
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: LD_INT 2
42416: PUSH
42417: LD_INT 6
42419: PUSH
42420: LD_INT 15
42422: PUSH
42423: LD_INT 16
42425: PUSH
42426: LD_INT 7
42428: PUSH
42429: LD_INT 12
42431: PUSH
42432: LD_INT 13
42434: PUSH
42435: LD_INT 10
42437: PUSH
42438: LD_INT 14
42440: PUSH
42441: LD_INT 20
42443: PUSH
42444: LD_INT 21
42446: PUSH
42447: LD_INT 22
42449: PUSH
42450: LD_INT 25
42452: PUSH
42453: LD_INT 32
42455: PUSH
42456: LD_INT 27
42458: PUSH
42459: LD_INT 36
42461: PUSH
42462: LD_INT 69
42464: PUSH
42465: LD_INT 39
42467: PUSH
42468: LD_INT 34
42470: PUSH
42471: LD_INT 40
42473: PUSH
42474: LD_INT 48
42476: PUSH
42477: LD_INT 49
42479: PUSH
42480: LD_INT 50
42482: PUSH
42483: LD_INT 51
42485: PUSH
42486: LD_INT 52
42488: PUSH
42489: LD_INT 53
42491: PUSH
42492: LD_INT 54
42494: PUSH
42495: LD_INT 55
42497: PUSH
42498: LD_INT 56
42500: PUSH
42501: LD_INT 57
42503: PUSH
42504: LD_INT 58
42506: PUSH
42507: LD_INT 59
42509: PUSH
42510: LD_INT 60
42512: PUSH
42513: LD_INT 61
42515: PUSH
42516: LD_INT 62
42518: PUSH
42519: LD_INT 80
42521: PUSH
42522: LD_INT 82
42524: PUSH
42525: LD_INT 83
42527: PUSH
42528: LD_INT 84
42530: PUSH
42531: LD_INT 85
42533: PUSH
42534: LD_INT 86
42536: PUSH
42537: LD_INT 90
42539: PUSH
42540: LD_INT 93
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: ST_TO_ADDR
42598: GO 43081
42600: LD_INT 2
42602: DOUBLE
42603: EQUAL
42604: IFTRUE 42608
42606: GO 42842
42608: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
42609: LD_ADDR_VAR 0 4
42613: PUSH
42614: LD_INT 35
42616: PUSH
42617: LD_INT 45
42619: PUSH
42620: LD_INT 46
42622: PUSH
42623: LD_INT 47
42625: PUSH
42626: LD_INT 82
42628: PUSH
42629: LD_INT 83
42631: PUSH
42632: LD_INT 84
42634: PUSH
42635: LD_INT 85
42637: PUSH
42638: LD_INT 87
42640: PUSH
42641: LD_INT 70
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: LD_INT 11
42649: PUSH
42650: LD_INT 3
42652: PUSH
42653: LD_INT 4
42655: PUSH
42656: LD_INT 5
42658: PUSH
42659: LD_INT 6
42661: PUSH
42662: LD_INT 15
42664: PUSH
42665: LD_INT 18
42667: PUSH
42668: LD_INT 7
42670: PUSH
42671: LD_INT 17
42673: PUSH
42674: LD_INT 8
42676: PUSH
42677: LD_INT 20
42679: PUSH
42680: LD_INT 21
42682: PUSH
42683: LD_INT 22
42685: PUSH
42686: LD_INT 72
42688: PUSH
42689: LD_INT 26
42691: PUSH
42692: LD_INT 69
42694: PUSH
42695: LD_INT 39
42697: PUSH
42698: LD_INT 40
42700: PUSH
42701: LD_INT 41
42703: PUSH
42704: LD_INT 42
42706: PUSH
42707: LD_INT 43
42709: PUSH
42710: LD_INT 48
42712: PUSH
42713: LD_INT 49
42715: PUSH
42716: LD_INT 50
42718: PUSH
42719: LD_INT 51
42721: PUSH
42722: LD_INT 52
42724: PUSH
42725: LD_INT 53
42727: PUSH
42728: LD_INT 54
42730: PUSH
42731: LD_INT 55
42733: PUSH
42734: LD_INT 56
42736: PUSH
42737: LD_INT 60
42739: PUSH
42740: LD_INT 61
42742: PUSH
42743: LD_INT 62
42745: PUSH
42746: LD_INT 66
42748: PUSH
42749: LD_INT 67
42751: PUSH
42752: LD_INT 68
42754: PUSH
42755: LD_INT 81
42757: PUSH
42758: LD_INT 82
42760: PUSH
42761: LD_INT 83
42763: PUSH
42764: LD_INT 84
42766: PUSH
42767: LD_INT 85
42769: PUSH
42770: LD_INT 87
42772: PUSH
42773: LD_INT 88
42775: PUSH
42776: LD_INT 92
42778: PUSH
42779: LD_INT 94
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: ST_TO_ADDR
42840: GO 43081
42842: LD_INT 3
42844: DOUBLE
42845: EQUAL
42846: IFTRUE 42850
42848: GO 43080
42850: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
42851: LD_ADDR_VAR 0 4
42855: PUSH
42856: LD_INT 46
42858: PUSH
42859: LD_INT 47
42861: PUSH
42862: LD_INT 1
42864: PUSH
42865: LD_INT 2
42867: PUSH
42868: LD_INT 82
42870: PUSH
42871: LD_INT 83
42873: PUSH
42874: LD_INT 84
42876: PUSH
42877: LD_INT 85
42879: PUSH
42880: LD_INT 86
42882: PUSH
42883: LD_INT 11
42885: PUSH
42886: LD_INT 9
42888: PUSH
42889: LD_INT 20
42891: PUSH
42892: LD_INT 19
42894: PUSH
42895: LD_INT 21
42897: PUSH
42898: LD_INT 24
42900: PUSH
42901: LD_INT 22
42903: PUSH
42904: LD_INT 25
42906: PUSH
42907: LD_INT 28
42909: PUSH
42910: LD_INT 29
42912: PUSH
42913: LD_INT 30
42915: PUSH
42916: LD_INT 31
42918: PUSH
42919: LD_INT 37
42921: PUSH
42922: LD_INT 38
42924: PUSH
42925: LD_INT 32
42927: PUSH
42928: LD_INT 27
42930: PUSH
42931: LD_INT 33
42933: PUSH
42934: LD_INT 69
42936: PUSH
42937: LD_INT 39
42939: PUSH
42940: LD_INT 34
42942: PUSH
42943: LD_INT 40
42945: PUSH
42946: LD_INT 71
42948: PUSH
42949: LD_INT 23
42951: PUSH
42952: LD_INT 44
42954: PUSH
42955: LD_INT 48
42957: PUSH
42958: LD_INT 49
42960: PUSH
42961: LD_INT 50
42963: PUSH
42964: LD_INT 51
42966: PUSH
42967: LD_INT 52
42969: PUSH
42970: LD_INT 53
42972: PUSH
42973: LD_INT 54
42975: PUSH
42976: LD_INT 55
42978: PUSH
42979: LD_INT 56
42981: PUSH
42982: LD_INT 57
42984: PUSH
42985: LD_INT 58
42987: PUSH
42988: LD_INT 59
42990: PUSH
42991: LD_INT 63
42993: PUSH
42994: LD_INT 64
42996: PUSH
42997: LD_INT 65
42999: PUSH
43000: LD_INT 82
43002: PUSH
43003: LD_INT 83
43005: PUSH
43006: LD_INT 84
43008: PUSH
43009: LD_INT 85
43011: PUSH
43012: LD_INT 86
43014: PUSH
43015: LD_INT 89
43017: PUSH
43018: LD_INT 91
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: ST_TO_ADDR
43078: GO 43081
43080: POP
// if state > - 1 and state < 3 then
43081: LD_VAR 0 3
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: GREATER
43090: IFFALSE 43102
43092: PUSH
43093: LD_VAR 0 3
43097: PUSH
43098: LD_INT 3
43100: LESS
43101: AND
43102: IFFALSE 43159
// for i in result do
43104: LD_ADDR_VAR 0 5
43108: PUSH
43109: LD_VAR 0 4
43113: PUSH
43114: FOR_IN
43115: IFFALSE 43157
// if GetTech ( i , side ) <> state then
43117: LD_VAR 0 5
43121: PPUSH
43122: LD_VAR 0 1
43126: PPUSH
43127: CALL_OW 321
43131: PUSH
43132: LD_VAR 0 3
43136: NONEQUAL
43137: IFFALSE 43155
// result := result diff i ;
43139: LD_ADDR_VAR 0 4
43143: PUSH
43144: LD_VAR 0 4
43148: PUSH
43149: LD_VAR 0 5
43153: DIFF
43154: ST_TO_ADDR
43155: GO 43114
43157: POP
43158: POP
// end ;
43159: LD_VAR 0 4
43163: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
43164: LD_INT 0
43166: PPUSH
43167: PPUSH
43168: PPUSH
// result := true ;
43169: LD_ADDR_VAR 0 3
43173: PUSH
43174: LD_INT 1
43176: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
43177: LD_ADDR_VAR 0 5
43181: PUSH
43182: LD_VAR 0 2
43186: PPUSH
43187: CALL_OW 480
43191: ST_TO_ADDR
// if not tmp then
43192: LD_VAR 0 5
43196: NOT
43197: IFFALSE 43201
// exit ;
43199: GO 43250
// for i in tmp do
43201: LD_ADDR_VAR 0 4
43205: PUSH
43206: LD_VAR 0 5
43210: PUSH
43211: FOR_IN
43212: IFFALSE 43248
// if GetTech ( i , side ) <> state_researched then
43214: LD_VAR 0 4
43218: PPUSH
43219: LD_VAR 0 1
43223: PPUSH
43224: CALL_OW 321
43228: PUSH
43229: LD_INT 2
43231: NONEQUAL
43232: IFFALSE 43246
// begin result := false ;
43234: LD_ADDR_VAR 0 3
43238: PUSH
43239: LD_INT 0
43241: ST_TO_ADDR
// exit ;
43242: POP
43243: POP
43244: GO 43250
// end ;
43246: GO 43211
43248: POP
43249: POP
// end ;
43250: LD_VAR 0 3
43254: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
43255: LD_INT 0
43257: PPUSH
43258: PPUSH
43259: PPUSH
43260: PPUSH
43261: PPUSH
43262: PPUSH
43263: PPUSH
43264: PPUSH
43265: PPUSH
43266: PPUSH
43267: PPUSH
43268: PPUSH
43269: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
43270: LD_VAR 0 1
43274: NOT
43275: IFTRUE 43292
43277: PUSH
43278: LD_VAR 0 1
43282: PPUSH
43283: CALL_OW 257
43287: PUSH
43288: LD_INT 9
43290: NONEQUAL
43291: OR
43292: IFFALSE 43296
// exit ;
43294: GO 43875
// side := GetSide ( unit ) ;
43296: LD_ADDR_VAR 0 9
43300: PUSH
43301: LD_VAR 0 1
43305: PPUSH
43306: CALL_OW 255
43310: ST_TO_ADDR
// tech_space := tech_spacanom ;
43311: LD_ADDR_VAR 0 12
43315: PUSH
43316: LD_INT 29
43318: ST_TO_ADDR
// tech_time := tech_taurad ;
43319: LD_ADDR_VAR 0 13
43323: PUSH
43324: LD_INT 28
43326: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
43327: LD_ADDR_VAR 0 11
43331: PUSH
43332: LD_VAR 0 1
43336: PPUSH
43337: CALL_OW 310
43341: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
43342: LD_VAR 0 11
43346: PPUSH
43347: CALL_OW 247
43351: PUSH
43352: LD_INT 2
43354: EQUAL
43355: IFFALSE 43359
// exit ;
43357: GO 43875
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43359: LD_ADDR_VAR 0 8
43363: PUSH
43364: LD_INT 81
43366: PUSH
43367: LD_VAR 0 9
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 3
43378: PUSH
43379: LD_INT 21
43381: PUSH
43382: LD_INT 3
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PPUSH
43397: CALL_OW 69
43401: ST_TO_ADDR
// if not tmp then
43402: LD_VAR 0 8
43406: NOT
43407: IFFALSE 43411
// exit ;
43409: GO 43875
// if in_unit then
43411: LD_VAR 0 11
43415: IFFALSE 43439
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43417: LD_ADDR_VAR 0 10
43421: PUSH
43422: LD_VAR 0 8
43426: PPUSH
43427: LD_VAR 0 11
43431: PPUSH
43432: CALL_OW 74
43436: ST_TO_ADDR
43437: GO 43459
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43439: LD_ADDR_VAR 0 10
43443: PUSH
43444: LD_VAR 0 8
43448: PPUSH
43449: LD_VAR 0 1
43453: PPUSH
43454: CALL_OW 74
43458: ST_TO_ADDR
// if not enemy then
43459: LD_VAR 0 10
43463: NOT
43464: IFFALSE 43468
// exit ;
43466: GO 43875
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43468: LD_VAR 0 11
43472: IFFALSE 43494
43474: PUSH
43475: LD_VAR 0 11
43479: PPUSH
43480: LD_VAR 0 10
43484: PPUSH
43485: CALL_OW 296
43489: PUSH
43490: LD_INT 13
43492: GREATER
43493: AND
43494: IFTRUE 43516
43496: PUSH
43497: LD_VAR 0 1
43501: PPUSH
43502: LD_VAR 0 10
43506: PPUSH
43507: CALL_OW 296
43511: PUSH
43512: LD_INT 12
43514: GREATER
43515: OR
43516: IFFALSE 43520
// exit ;
43518: GO 43875
// missile := [ 1 ] ;
43520: LD_ADDR_VAR 0 14
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: EMPTY
43529: LIST
43530: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43531: LD_VAR 0 9
43535: PPUSH
43536: LD_VAR 0 12
43540: PPUSH
43541: CALL_OW 325
43545: IFFALSE 43574
// missile := Replace ( missile , missile + 1 , 2 ) ;
43547: LD_ADDR_VAR 0 14
43551: PUSH
43552: LD_VAR 0 14
43556: PPUSH
43557: LD_VAR 0 14
43561: PUSH
43562: LD_INT 1
43564: PLUS
43565: PPUSH
43566: LD_INT 2
43568: PPUSH
43569: CALL_OW 1
43573: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43574: LD_VAR 0 9
43578: PPUSH
43579: LD_VAR 0 13
43583: PPUSH
43584: CALL_OW 325
43588: IFFALSE 43612
43590: PUSH
43591: LD_VAR 0 10
43595: PPUSH
43596: CALL_OW 255
43600: PPUSH
43601: LD_VAR 0 13
43605: PPUSH
43606: CALL_OW 325
43610: NOT
43611: AND
43612: IFFALSE 43641
// missile := Replace ( missile , missile + 1 , 3 ) ;
43614: LD_ADDR_VAR 0 14
43618: PUSH
43619: LD_VAR 0 14
43623: PPUSH
43624: LD_VAR 0 14
43628: PUSH
43629: LD_INT 1
43631: PLUS
43632: PPUSH
43633: LD_INT 3
43635: PPUSH
43636: CALL_OW 1
43640: ST_TO_ADDR
// if missile < 2 then
43641: LD_VAR 0 14
43645: PUSH
43646: LD_INT 2
43648: LESS
43649: IFFALSE 43653
// exit ;
43651: GO 43875
// x := GetX ( enemy ) ;
43653: LD_ADDR_VAR 0 4
43657: PUSH
43658: LD_VAR 0 10
43662: PPUSH
43663: CALL_OW 250
43667: ST_TO_ADDR
// y := GetY ( enemy ) ;
43668: LD_ADDR_VAR 0 5
43672: PUSH
43673: LD_VAR 0 10
43677: PPUSH
43678: CALL_OW 251
43682: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43683: LD_ADDR_VAR 0 6
43687: PUSH
43688: LD_VAR 0 4
43692: PUSH
43693: LD_INT 1
43695: NEG
43696: PPUSH
43697: LD_INT 1
43699: PPUSH
43700: CALL_OW 12
43704: PLUS
43705: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43706: LD_ADDR_VAR 0 7
43710: PUSH
43711: LD_VAR 0 5
43715: PUSH
43716: LD_INT 1
43718: NEG
43719: PPUSH
43720: LD_INT 1
43722: PPUSH
43723: CALL_OW 12
43727: PLUS
43728: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43729: LD_VAR 0 6
43733: PPUSH
43734: LD_VAR 0 7
43738: PPUSH
43739: CALL_OW 488
43743: NOT
43744: IFFALSE 43766
// begin _x := x ;
43746: LD_ADDR_VAR 0 6
43750: PUSH
43751: LD_VAR 0 4
43755: ST_TO_ADDR
// _y := y ;
43756: LD_ADDR_VAR 0 7
43760: PUSH
43761: LD_VAR 0 5
43765: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43766: LD_ADDR_VAR 0 3
43770: PUSH
43771: LD_INT 1
43773: PPUSH
43774: LD_VAR 0 14
43778: PPUSH
43779: CALL_OW 12
43783: ST_TO_ADDR
// case i of 1 :
43784: LD_VAR 0 3
43788: PUSH
43789: LD_INT 1
43791: DOUBLE
43792: EQUAL
43793: IFTRUE 43797
43795: GO 43814
43797: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43798: LD_VAR 0 1
43802: PPUSH
43803: LD_VAR 0 10
43807: PPUSH
43808: CALL_OW 115
43812: GO 43875
43814: LD_INT 2
43816: DOUBLE
43817: EQUAL
43818: IFTRUE 43822
43820: GO 43844
43822: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43823: LD_VAR 0 1
43827: PPUSH
43828: LD_VAR 0 6
43832: PPUSH
43833: LD_VAR 0 7
43837: PPUSH
43838: CALL_OW 153
43842: GO 43875
43844: LD_INT 3
43846: DOUBLE
43847: EQUAL
43848: IFTRUE 43852
43850: GO 43874
43852: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43853: LD_VAR 0 1
43857: PPUSH
43858: LD_VAR 0 6
43862: PPUSH
43863: LD_VAR 0 7
43867: PPUSH
43868: CALL_OW 154
43872: GO 43875
43874: POP
// end ;
43875: LD_VAR 0 2
43879: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43880: LD_INT 0
43882: PPUSH
43883: PPUSH
43884: PPUSH
43885: PPUSH
43886: PPUSH
43887: PPUSH
// if not unit or not building then
43888: LD_VAR 0 1
43892: NOT
43893: IFTRUE 43902
43895: PUSH
43896: LD_VAR 0 2
43900: NOT
43901: OR
43902: IFFALSE 43906
// exit ;
43904: GO 44064
// x := GetX ( building ) ;
43906: LD_ADDR_VAR 0 5
43910: PUSH
43911: LD_VAR 0 2
43915: PPUSH
43916: CALL_OW 250
43920: ST_TO_ADDR
// y := GetY ( building ) ;
43921: LD_ADDR_VAR 0 6
43925: PUSH
43926: LD_VAR 0 2
43930: PPUSH
43931: CALL_OW 251
43935: ST_TO_ADDR
// for i := 0 to 5 do
43936: LD_ADDR_VAR 0 4
43940: PUSH
43941: DOUBLE
43942: LD_INT 0
43944: DEC
43945: ST_TO_ADDR
43946: LD_INT 5
43948: PUSH
43949: FOR_TO
43950: IFFALSE 44062
// begin _x := ShiftX ( x , i , 3 ) ;
43952: LD_ADDR_VAR 0 7
43956: PUSH
43957: LD_VAR 0 5
43961: PPUSH
43962: LD_VAR 0 4
43966: PPUSH
43967: LD_INT 3
43969: PPUSH
43970: CALL_OW 272
43974: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43975: LD_ADDR_VAR 0 8
43979: PUSH
43980: LD_VAR 0 6
43984: PPUSH
43985: LD_VAR 0 4
43989: PPUSH
43990: LD_INT 3
43992: PPUSH
43993: CALL_OW 273
43997: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43998: LD_VAR 0 7
44002: PPUSH
44003: LD_VAR 0 8
44007: PPUSH
44008: CALL_OW 488
44012: NOT
44013: IFFALSE 44017
// continue ;
44015: GO 43949
// if HexInfo ( _x , _y ) = 0 then
44017: LD_VAR 0 7
44021: PPUSH
44022: LD_VAR 0 8
44026: PPUSH
44027: CALL_OW 428
44031: PUSH
44032: LD_INT 0
44034: EQUAL
44035: IFFALSE 44060
// begin ComMoveXY ( unit , _x , _y ) ;
44037: LD_VAR 0 1
44041: PPUSH
44042: LD_VAR 0 7
44046: PPUSH
44047: LD_VAR 0 8
44051: PPUSH
44052: CALL_OW 111
// exit ;
44056: POP
44057: POP
44058: GO 44064
// end ; end ;
44060: GO 43949
44062: POP
44063: POP
// end ;
44064: LD_VAR 0 3
44068: RET
// export function ScanBase ( side , base_area ) ; begin
44069: LD_INT 0
44071: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
44072: LD_ADDR_VAR 0 3
44076: PUSH
44077: LD_VAR 0 2
44081: PPUSH
44082: LD_INT 81
44084: PUSH
44085: LD_VAR 0 1
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PPUSH
44094: CALL_OW 70
44098: ST_TO_ADDR
// end ;
44099: LD_VAR 0 3
44103: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
44104: LD_INT 0
44106: PPUSH
44107: PPUSH
44108: PPUSH
44109: PPUSH
// result := false ;
44110: LD_ADDR_VAR 0 2
44114: PUSH
44115: LD_INT 0
44117: ST_TO_ADDR
// side := GetSide ( unit ) ;
44118: LD_ADDR_VAR 0 3
44122: PUSH
44123: LD_VAR 0 1
44127: PPUSH
44128: CALL_OW 255
44132: ST_TO_ADDR
// nat := GetNation ( unit ) ;
44133: LD_ADDR_VAR 0 4
44137: PUSH
44138: LD_VAR 0 1
44142: PPUSH
44143: CALL_OW 248
44147: ST_TO_ADDR
// case nat of 1 :
44148: LD_VAR 0 4
44152: PUSH
44153: LD_INT 1
44155: DOUBLE
44156: EQUAL
44157: IFTRUE 44161
44159: GO 44172
44161: POP
// tech := tech_lassight ; 2 :
44162: LD_ADDR_VAR 0 5
44166: PUSH
44167: LD_INT 12
44169: ST_TO_ADDR
44170: GO 44211
44172: LD_INT 2
44174: DOUBLE
44175: EQUAL
44176: IFTRUE 44180
44178: GO 44191
44180: POP
// tech := tech_mortar ; 3 :
44181: LD_ADDR_VAR 0 5
44185: PUSH
44186: LD_INT 41
44188: ST_TO_ADDR
44189: GO 44211
44191: LD_INT 3
44193: DOUBLE
44194: EQUAL
44195: IFTRUE 44199
44197: GO 44210
44199: POP
// tech := tech_bazooka ; end ;
44200: LD_ADDR_VAR 0 5
44204: PUSH
44205: LD_INT 44
44207: ST_TO_ADDR
44208: GO 44211
44210: POP
// if Researched ( side , tech ) then
44211: LD_VAR 0 3
44215: PPUSH
44216: LD_VAR 0 5
44220: PPUSH
44221: CALL_OW 325
44225: IFFALSE 44252
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
44227: LD_ADDR_VAR 0 2
44231: PUSH
44232: LD_INT 5
44234: PUSH
44235: LD_INT 8
44237: PUSH
44238: LD_INT 9
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: LIST
44245: PUSH
44246: LD_VAR 0 4
44250: ARRAY
44251: ST_TO_ADDR
// end ;
44252: LD_VAR 0 2
44256: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
44257: LD_INT 0
44259: PPUSH
44260: PPUSH
44261: PPUSH
// if not mines then
44262: LD_VAR 0 2
44266: NOT
44267: IFFALSE 44271
// exit ;
44269: GO 44415
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44271: LD_ADDR_VAR 0 5
44275: PUSH
44276: LD_INT 81
44278: PUSH
44279: LD_VAR 0 1
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 3
44290: PUSH
44291: LD_INT 21
44293: PUSH
44294: LD_INT 3
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PPUSH
44309: CALL_OW 69
44313: ST_TO_ADDR
// for i in mines do
44314: LD_ADDR_VAR 0 4
44318: PUSH
44319: LD_VAR 0 2
44323: PUSH
44324: FOR_IN
44325: IFFALSE 44413
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
44327: LD_VAR 0 4
44331: PUSH
44332: LD_INT 1
44334: ARRAY
44335: PPUSH
44336: LD_VAR 0 4
44340: PUSH
44341: LD_INT 2
44343: ARRAY
44344: PPUSH
44345: CALL_OW 458
44349: NOT
44350: IFFALSE 44354
// continue ;
44352: GO 44324
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
44354: LD_VAR 0 4
44358: PUSH
44359: LD_INT 1
44361: ARRAY
44362: PPUSH
44363: LD_VAR 0 4
44367: PUSH
44368: LD_INT 2
44370: ARRAY
44371: PPUSH
44372: CALL_OW 428
44376: PUSH
44377: LD_VAR 0 5
44381: IN
44382: IFFALSE 44411
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
44384: LD_VAR 0 4
44388: PUSH
44389: LD_INT 1
44391: ARRAY
44392: PPUSH
44393: LD_VAR 0 4
44397: PUSH
44398: LD_INT 2
44400: ARRAY
44401: PPUSH
44402: LD_VAR 0 1
44406: PPUSH
44407: CALL_OW 456
// end ;
44411: GO 44324
44413: POP
44414: POP
// end ;
44415: LD_VAR 0 3
44419: RET
// export function Count ( array ) ; begin
44420: LD_INT 0
44422: PPUSH
// result := array + 0 ;
44423: LD_ADDR_VAR 0 2
44427: PUSH
44428: LD_VAR 0 1
44432: PUSH
44433: LD_INT 0
44435: PLUS
44436: ST_TO_ADDR
// end ;
44437: LD_VAR 0 2
44441: RET
// export function IsEmpty ( building ) ; begin
44442: LD_INT 0
44444: PPUSH
// if not building then
44445: LD_VAR 0 1
44449: NOT
44450: IFFALSE 44454
// exit ;
44452: GO 44497
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44454: LD_ADDR_VAR 0 2
44458: PUSH
44459: LD_VAR 0 1
44463: PUSH
44464: LD_INT 22
44466: PUSH
44467: LD_VAR 0 1
44471: PPUSH
44472: CALL_OW 255
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 58
44483: PUSH
44484: EMPTY
44485: LIST
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PPUSH
44491: CALL_OW 69
44495: IN
44496: ST_TO_ADDR
// end ;
44497: LD_VAR 0 2
44501: RET
// export function IsNotFull ( building ) ; var places ; begin
44502: LD_INT 0
44504: PPUSH
44505: PPUSH
// if not building then
44506: LD_VAR 0 1
44510: NOT
44511: IFFALSE 44515
// exit ;
44513: GO 44543
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
44515: LD_ADDR_VAR 0 2
44519: PUSH
44520: LD_VAR 0 1
44524: PPUSH
44525: LD_INT 3
44527: PUSH
44528: LD_INT 62
44530: PUSH
44531: EMPTY
44532: LIST
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PPUSH
44538: CALL_OW 72
44542: ST_TO_ADDR
// end ;
44543: LD_VAR 0 2
44547: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44548: LD_INT 0
44550: PPUSH
44551: PPUSH
44552: PPUSH
44553: PPUSH
// tmp := [ ] ;
44554: LD_ADDR_VAR 0 3
44558: PUSH
44559: EMPTY
44560: ST_TO_ADDR
// list := [ ] ;
44561: LD_ADDR_VAR 0 5
44565: PUSH
44566: EMPTY
44567: ST_TO_ADDR
// for i = 16 to 25 do
44568: LD_ADDR_VAR 0 4
44572: PUSH
44573: DOUBLE
44574: LD_INT 16
44576: DEC
44577: ST_TO_ADDR
44578: LD_INT 25
44580: PUSH
44581: FOR_TO
44582: IFFALSE 44655
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44584: LD_ADDR_VAR 0 3
44588: PUSH
44589: LD_VAR 0 3
44593: PUSH
44594: LD_INT 22
44596: PUSH
44597: LD_VAR 0 1
44601: PPUSH
44602: CALL_OW 255
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 91
44613: PUSH
44614: LD_VAR 0 1
44618: PUSH
44619: LD_INT 6
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 30
44629: PUSH
44630: LD_VAR 0 4
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: LIST
44643: PUSH
44644: EMPTY
44645: LIST
44646: PPUSH
44647: CALL_OW 69
44651: ADD
44652: ST_TO_ADDR
44653: GO 44581
44655: POP
44656: POP
// for i = 1 to tmp do
44657: LD_ADDR_VAR 0 4
44661: PUSH
44662: DOUBLE
44663: LD_INT 1
44665: DEC
44666: ST_TO_ADDR
44667: LD_VAR 0 3
44671: PUSH
44672: FOR_TO
44673: IFFALSE 44761
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44675: LD_ADDR_VAR 0 5
44679: PUSH
44680: LD_VAR 0 5
44684: PUSH
44685: LD_VAR 0 3
44689: PUSH
44690: LD_VAR 0 4
44694: ARRAY
44695: PPUSH
44696: CALL_OW 266
44700: PUSH
44701: LD_VAR 0 3
44705: PUSH
44706: LD_VAR 0 4
44710: ARRAY
44711: PPUSH
44712: CALL_OW 250
44716: PUSH
44717: LD_VAR 0 3
44721: PUSH
44722: LD_VAR 0 4
44726: ARRAY
44727: PPUSH
44728: CALL_OW 251
44732: PUSH
44733: LD_VAR 0 3
44737: PUSH
44738: LD_VAR 0 4
44742: ARRAY
44743: PPUSH
44744: CALL_OW 254
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: PUSH
44755: EMPTY
44756: LIST
44757: ADD
44758: ST_TO_ADDR
44759: GO 44672
44761: POP
44762: POP
// result := list ;
44763: LD_ADDR_VAR 0 2
44767: PUSH
44768: LD_VAR 0 5
44772: ST_TO_ADDR
// end ;
44773: LD_VAR 0 2
44777: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44778: LD_INT 0
44780: PPUSH
44781: PPUSH
44782: PPUSH
44783: PPUSH
44784: PPUSH
44785: PPUSH
44786: PPUSH
// if not factory then
44787: LD_VAR 0 1
44791: NOT
44792: IFFALSE 44796
// exit ;
44794: GO 45399
// if control = control_apeman then
44796: LD_VAR 0 4
44800: PUSH
44801: LD_INT 5
44803: EQUAL
44804: IFFALSE 44913
// begin tmp := UnitsInside ( factory ) ;
44806: LD_ADDR_VAR 0 8
44810: PUSH
44811: LD_VAR 0 1
44815: PPUSH
44816: CALL_OW 313
44820: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44821: LD_VAR 0 8
44825: PPUSH
44826: LD_INT 25
44828: PUSH
44829: LD_INT 12
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PPUSH
44836: CALL_OW 72
44840: NOT
44841: IFFALSE 44851
// control := control_manual ;
44843: LD_ADDR_VAR 0 4
44847: PUSH
44848: LD_INT 1
44850: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44851: LD_ADDR_VAR 0 8
44855: PUSH
44856: LD_VAR 0 1
44860: PPUSH
44861: CALL 44548 0 1
44865: ST_TO_ADDR
// if tmp then
44866: LD_VAR 0 8
44870: IFFALSE 44913
// begin for i in tmp do
44872: LD_ADDR_VAR 0 7
44876: PUSH
44877: LD_VAR 0 8
44881: PUSH
44882: FOR_IN
44883: IFFALSE 44911
// if i [ 1 ] = b_ext_radio then
44885: LD_VAR 0 7
44889: PUSH
44890: LD_INT 1
44892: ARRAY
44893: PUSH
44894: LD_INT 22
44896: EQUAL
44897: IFFALSE 44909
// begin control := control_remote ;
44899: LD_ADDR_VAR 0 4
44903: PUSH
44904: LD_INT 2
44906: ST_TO_ADDR
// break ;
44907: GO 44911
// end ;
44909: GO 44882
44911: POP
44912: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44913: LD_VAR 0 1
44917: PPUSH
44918: LD_VAR 0 2
44922: PPUSH
44923: LD_VAR 0 3
44927: PPUSH
44928: LD_VAR 0 4
44932: PPUSH
44933: LD_VAR 0 5
44937: PPUSH
44938: CALL_OW 448
44942: IFFALSE 44977
// begin result := [ chassis , engine , control , weapon ] ;
44944: LD_ADDR_VAR 0 6
44948: PUSH
44949: LD_VAR 0 2
44953: PUSH
44954: LD_VAR 0 3
44958: PUSH
44959: LD_VAR 0 4
44963: PUSH
44964: LD_VAR 0 5
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: ST_TO_ADDR
// exit ;
44975: GO 45399
// end ; _chassis := AvailableChassisList ( factory ) ;
44977: LD_ADDR_VAR 0 9
44981: PUSH
44982: LD_VAR 0 1
44986: PPUSH
44987: CALL_OW 475
44991: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44992: LD_ADDR_VAR 0 11
44996: PUSH
44997: LD_VAR 0 1
45001: PPUSH
45002: CALL_OW 476
45006: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
45007: LD_ADDR_VAR 0 12
45011: PUSH
45012: LD_VAR 0 1
45016: PPUSH
45017: CALL_OW 477
45021: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
45022: LD_ADDR_VAR 0 10
45026: PUSH
45027: LD_VAR 0 1
45031: PPUSH
45032: CALL_OW 478
45036: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
45037: LD_VAR 0 9
45041: NOT
45042: IFTRUE 45051
45044: PUSH
45045: LD_VAR 0 11
45049: NOT
45050: OR
45051: IFTRUE 45060
45053: PUSH
45054: LD_VAR 0 12
45058: NOT
45059: OR
45060: IFTRUE 45069
45062: PUSH
45063: LD_VAR 0 10
45067: NOT
45068: OR
45069: IFFALSE 45104
// begin result := [ chassis , engine , control , weapon ] ;
45071: LD_ADDR_VAR 0 6
45075: PUSH
45076: LD_VAR 0 2
45080: PUSH
45081: LD_VAR 0 3
45085: PUSH
45086: LD_VAR 0 4
45090: PUSH
45091: LD_VAR 0 5
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: ST_TO_ADDR
// exit ;
45102: GO 45399
// end ; if not chassis in _chassis then
45104: LD_VAR 0 2
45108: PUSH
45109: LD_VAR 0 9
45113: IN
45114: NOT
45115: IFFALSE 45141
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
45117: LD_ADDR_VAR 0 2
45121: PUSH
45122: LD_VAR 0 9
45126: PUSH
45127: LD_INT 1
45129: PPUSH
45130: LD_VAR 0 9
45134: PPUSH
45135: CALL_OW 12
45139: ARRAY
45140: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
45141: LD_VAR 0 2
45145: PPUSH
45146: LD_VAR 0 3
45150: PPUSH
45151: CALL 45404 0 2
45155: NOT
45156: IFFALSE 45217
// repeat engine := _engine [ 1 ] ;
45158: LD_ADDR_VAR 0 3
45162: PUSH
45163: LD_VAR 0 11
45167: PUSH
45168: LD_INT 1
45170: ARRAY
45171: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
45172: LD_ADDR_VAR 0 11
45176: PUSH
45177: LD_VAR 0 11
45181: PPUSH
45182: LD_INT 1
45184: PPUSH
45185: CALL_OW 3
45189: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
45190: LD_VAR 0 2
45194: PPUSH
45195: LD_VAR 0 3
45199: PPUSH
45200: CALL 45404 0 2
45204: IFTRUE 45215
45206: PUSH
45207: LD_VAR 0 11
45211: PUSH
45212: EMPTY
45213: EQUAL
45214: OR
45215: IFFALSE 45158
// if not control in _control then
45217: LD_VAR 0 4
45221: PUSH
45222: LD_VAR 0 12
45226: IN
45227: NOT
45228: IFFALSE 45254
// control := _control [ rand ( 1 , _control ) ] ;
45230: LD_ADDR_VAR 0 4
45234: PUSH
45235: LD_VAR 0 12
45239: PUSH
45240: LD_INT 1
45242: PPUSH
45243: LD_VAR 0 12
45247: PPUSH
45248: CALL_OW 12
45252: ARRAY
45253: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
45254: LD_VAR 0 2
45258: PPUSH
45259: LD_VAR 0 5
45263: PPUSH
45264: CALL 45626 0 2
45268: NOT
45269: IFFALSE 45330
// repeat weapon := _weapon [ 1 ] ;
45271: LD_ADDR_VAR 0 5
45275: PUSH
45276: LD_VAR 0 10
45280: PUSH
45281: LD_INT 1
45283: ARRAY
45284: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
45285: LD_ADDR_VAR 0 10
45289: PUSH
45290: LD_VAR 0 10
45294: PPUSH
45295: LD_INT 1
45297: PPUSH
45298: CALL_OW 3
45302: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
45303: LD_VAR 0 2
45307: PPUSH
45308: LD_VAR 0 5
45312: PPUSH
45313: CALL 45626 0 2
45317: IFTRUE 45328
45319: PUSH
45320: LD_VAR 0 10
45324: PUSH
45325: EMPTY
45326: EQUAL
45327: OR
45328: IFFALSE 45271
// result := [ ] ;
45330: LD_ADDR_VAR 0 6
45334: PUSH
45335: EMPTY
45336: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45337: LD_VAR 0 1
45341: PPUSH
45342: LD_VAR 0 2
45346: PPUSH
45347: LD_VAR 0 3
45351: PPUSH
45352: LD_VAR 0 4
45356: PPUSH
45357: LD_VAR 0 5
45361: PPUSH
45362: CALL_OW 448
45366: IFFALSE 45399
// result := [ chassis , engine , control , weapon ] ;
45368: LD_ADDR_VAR 0 6
45372: PUSH
45373: LD_VAR 0 2
45377: PUSH
45378: LD_VAR 0 3
45382: PUSH
45383: LD_VAR 0 4
45387: PUSH
45388: LD_VAR 0 5
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: ST_TO_ADDR
// end ;
45399: LD_VAR 0 6
45403: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
45404: LD_INT 0
45406: PPUSH
// if not chassis or not engine then
45407: LD_VAR 0 1
45411: NOT
45412: IFTRUE 45421
45414: PUSH
45415: LD_VAR 0 2
45419: NOT
45420: OR
45421: IFFALSE 45425
// exit ;
45423: GO 45621
// case engine of engine_solar :
45425: LD_VAR 0 2
45429: PUSH
45430: LD_INT 2
45432: DOUBLE
45433: EQUAL
45434: IFTRUE 45438
45436: GO 45476
45438: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45439: LD_ADDR_VAR 0 3
45443: PUSH
45444: LD_INT 11
45446: PUSH
45447: LD_INT 12
45449: PUSH
45450: LD_INT 13
45452: PUSH
45453: LD_INT 14
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: LD_INT 3
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: ST_TO_ADDR
45474: GO 45605
45476: LD_INT 1
45478: DOUBLE
45479: EQUAL
45480: IFTRUE 45484
45482: GO 45546
45484: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45485: LD_ADDR_VAR 0 3
45489: PUSH
45490: LD_INT 11
45492: PUSH
45493: LD_INT 12
45495: PUSH
45496: LD_INT 13
45498: PUSH
45499: LD_INT 14
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: LD_INT 2
45507: PUSH
45508: LD_INT 3
45510: PUSH
45511: LD_INT 4
45513: PUSH
45514: LD_INT 5
45516: PUSH
45517: LD_INT 21
45519: PUSH
45520: LD_INT 23
45522: PUSH
45523: LD_INT 22
45525: PUSH
45526: LD_INT 24
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: ST_TO_ADDR
45544: GO 45605
45546: LD_INT 3
45548: DOUBLE
45549: EQUAL
45550: IFTRUE 45554
45552: GO 45604
45554: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45555: LD_ADDR_VAR 0 3
45559: PUSH
45560: LD_INT 13
45562: PUSH
45563: LD_INT 14
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: LD_INT 3
45571: PUSH
45572: LD_INT 4
45574: PUSH
45575: LD_INT 5
45577: PUSH
45578: LD_INT 21
45580: PUSH
45581: LD_INT 22
45583: PUSH
45584: LD_INT 23
45586: PUSH
45587: LD_INT 24
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: ST_TO_ADDR
45602: GO 45605
45604: POP
// result := ( chassis in result ) ;
45605: LD_ADDR_VAR 0 3
45609: PUSH
45610: LD_VAR 0 1
45614: PUSH
45615: LD_VAR 0 3
45619: IN
45620: ST_TO_ADDR
// end ;
45621: LD_VAR 0 3
45625: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45626: LD_INT 0
45628: PPUSH
// if not chassis or not weapon then
45629: LD_VAR 0 1
45633: NOT
45634: IFTRUE 45643
45636: PUSH
45637: LD_VAR 0 2
45641: NOT
45642: OR
45643: IFFALSE 45647
// exit ;
45645: GO 46741
// case weapon of us_machine_gun :
45647: LD_VAR 0 2
45651: PUSH
45652: LD_INT 2
45654: DOUBLE
45655: EQUAL
45656: IFTRUE 45660
45658: GO 45690
45660: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45661: LD_ADDR_VAR 0 3
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: LD_INT 3
45674: PUSH
45675: LD_INT 4
45677: PUSH
45678: LD_INT 5
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: ST_TO_ADDR
45688: GO 46725
45690: LD_INT 3
45692: DOUBLE
45693: EQUAL
45694: IFTRUE 45698
45696: GO 45728
45698: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45699: LD_ADDR_VAR 0 3
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: LD_INT 2
45709: PUSH
45710: LD_INT 3
45712: PUSH
45713: LD_INT 4
45715: PUSH
45716: LD_INT 5
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: ST_TO_ADDR
45726: GO 46725
45728: LD_INT 11
45730: DOUBLE
45731: EQUAL
45732: IFTRUE 45736
45734: GO 45766
45736: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45737: LD_ADDR_VAR 0 3
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: LD_INT 2
45747: PUSH
45748: LD_INT 3
45750: PUSH
45751: LD_INT 4
45753: PUSH
45754: LD_INT 5
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: ST_TO_ADDR
45764: GO 46725
45766: LD_INT 4
45768: DOUBLE
45769: EQUAL
45770: IFTRUE 45774
45772: GO 45800
45774: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45775: LD_ADDR_VAR 0 3
45779: PUSH
45780: LD_INT 2
45782: PUSH
45783: LD_INT 3
45785: PUSH
45786: LD_INT 4
45788: PUSH
45789: LD_INT 5
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: ST_TO_ADDR
45798: GO 46725
45800: LD_INT 5
45802: DOUBLE
45803: EQUAL
45804: IFTRUE 45808
45806: GO 45834
45808: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45809: LD_ADDR_VAR 0 3
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: LD_INT 3
45819: PUSH
45820: LD_INT 4
45822: PUSH
45823: LD_INT 5
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: ST_TO_ADDR
45832: GO 46725
45834: LD_INT 9
45836: DOUBLE
45837: EQUAL
45838: IFTRUE 45842
45840: GO 45868
45842: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45843: LD_ADDR_VAR 0 3
45847: PUSH
45848: LD_INT 2
45850: PUSH
45851: LD_INT 3
45853: PUSH
45854: LD_INT 4
45856: PUSH
45857: LD_INT 5
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: ST_TO_ADDR
45866: GO 46725
45868: LD_INT 7
45870: DOUBLE
45871: EQUAL
45872: IFTRUE 45876
45874: GO 45902
45876: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45877: LD_ADDR_VAR 0 3
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: LD_INT 3
45887: PUSH
45888: LD_INT 4
45890: PUSH
45891: LD_INT 5
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: ST_TO_ADDR
45900: GO 46725
45902: LD_INT 12
45904: DOUBLE
45905: EQUAL
45906: IFTRUE 45910
45908: GO 45936
45910: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45911: LD_ADDR_VAR 0 3
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: LD_INT 3
45921: PUSH
45922: LD_INT 4
45924: PUSH
45925: LD_INT 5
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: ST_TO_ADDR
45934: GO 46725
45936: LD_INT 13
45938: DOUBLE
45939: EQUAL
45940: IFTRUE 45944
45942: GO 45970
45944: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45945: LD_ADDR_VAR 0 3
45949: PUSH
45950: LD_INT 2
45952: PUSH
45953: LD_INT 3
45955: PUSH
45956: LD_INT 4
45958: PUSH
45959: LD_INT 5
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: ST_TO_ADDR
45968: GO 46725
45970: LD_INT 14
45972: DOUBLE
45973: EQUAL
45974: IFTRUE 45978
45976: GO 45996
45978: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45979: LD_ADDR_VAR 0 3
45983: PUSH
45984: LD_INT 4
45986: PUSH
45987: LD_INT 5
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: ST_TO_ADDR
45994: GO 46725
45996: LD_INT 6
45998: DOUBLE
45999: EQUAL
46000: IFTRUE 46004
46002: GO 46022
46004: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
46005: LD_ADDR_VAR 0 3
46009: PUSH
46010: LD_INT 4
46012: PUSH
46013: LD_INT 5
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: ST_TO_ADDR
46020: GO 46725
46022: LD_INT 10
46024: DOUBLE
46025: EQUAL
46026: IFTRUE 46030
46028: GO 46048
46030: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
46031: LD_ADDR_VAR 0 3
46035: PUSH
46036: LD_INT 4
46038: PUSH
46039: LD_INT 5
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: ST_TO_ADDR
46046: GO 46725
46048: LD_INT 22
46050: DOUBLE
46051: EQUAL
46052: IFTRUE 46056
46054: GO 46082
46056: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
46057: LD_ADDR_VAR 0 3
46061: PUSH
46062: LD_INT 11
46064: PUSH
46065: LD_INT 12
46067: PUSH
46068: LD_INT 13
46070: PUSH
46071: LD_INT 14
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: ST_TO_ADDR
46080: GO 46725
46082: LD_INT 23
46084: DOUBLE
46085: EQUAL
46086: IFTRUE 46090
46088: GO 46116
46090: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
46091: LD_ADDR_VAR 0 3
46095: PUSH
46096: LD_INT 11
46098: PUSH
46099: LD_INT 12
46101: PUSH
46102: LD_INT 13
46104: PUSH
46105: LD_INT 14
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: ST_TO_ADDR
46114: GO 46725
46116: LD_INT 24
46118: DOUBLE
46119: EQUAL
46120: IFTRUE 46124
46122: GO 46150
46124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
46125: LD_ADDR_VAR 0 3
46129: PUSH
46130: LD_INT 11
46132: PUSH
46133: LD_INT 12
46135: PUSH
46136: LD_INT 13
46138: PUSH
46139: LD_INT 14
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: ST_TO_ADDR
46148: GO 46725
46150: LD_INT 30
46152: DOUBLE
46153: EQUAL
46154: IFTRUE 46158
46156: GO 46184
46158: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
46159: LD_ADDR_VAR 0 3
46163: PUSH
46164: LD_INT 11
46166: PUSH
46167: LD_INT 12
46169: PUSH
46170: LD_INT 13
46172: PUSH
46173: LD_INT 14
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: ST_TO_ADDR
46182: GO 46725
46184: LD_INT 25
46186: DOUBLE
46187: EQUAL
46188: IFTRUE 46192
46190: GO 46210
46192: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
46193: LD_ADDR_VAR 0 3
46197: PUSH
46198: LD_INT 13
46200: PUSH
46201: LD_INT 14
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: ST_TO_ADDR
46208: GO 46725
46210: LD_INT 27
46212: DOUBLE
46213: EQUAL
46214: IFTRUE 46218
46216: GO 46236
46218: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
46219: LD_ADDR_VAR 0 3
46223: PUSH
46224: LD_INT 13
46226: PUSH
46227: LD_INT 14
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: ST_TO_ADDR
46234: GO 46725
46236: LD_INT 92
46238: DOUBLE
46239: EQUAL
46240: IFTRUE 46244
46242: GO 46270
46244: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
46245: LD_ADDR_VAR 0 3
46249: PUSH
46250: LD_INT 11
46252: PUSH
46253: LD_INT 12
46255: PUSH
46256: LD_INT 13
46258: PUSH
46259: LD_INT 14
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: ST_TO_ADDR
46268: GO 46725
46270: LD_INT 28
46272: DOUBLE
46273: EQUAL
46274: IFTRUE 46278
46276: GO 46296
46278: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
46279: LD_ADDR_VAR 0 3
46283: PUSH
46284: LD_INT 13
46286: PUSH
46287: LD_INT 14
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: ST_TO_ADDR
46294: GO 46725
46296: LD_INT 29
46298: DOUBLE
46299: EQUAL
46300: IFTRUE 46304
46302: GO 46322
46304: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
46305: LD_ADDR_VAR 0 3
46309: PUSH
46310: LD_INT 13
46312: PUSH
46313: LD_INT 14
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: ST_TO_ADDR
46320: GO 46725
46322: LD_INT 31
46324: DOUBLE
46325: EQUAL
46326: IFTRUE 46330
46328: GO 46348
46330: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
46331: LD_ADDR_VAR 0 3
46335: PUSH
46336: LD_INT 13
46338: PUSH
46339: LD_INT 14
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: ST_TO_ADDR
46346: GO 46725
46348: LD_INT 26
46350: DOUBLE
46351: EQUAL
46352: IFTRUE 46356
46354: GO 46374
46356: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
46357: LD_ADDR_VAR 0 3
46361: PUSH
46362: LD_INT 13
46364: PUSH
46365: LD_INT 14
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: ST_TO_ADDR
46372: GO 46725
46374: LD_INT 42
46376: DOUBLE
46377: EQUAL
46378: IFTRUE 46382
46380: GO 46408
46382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
46383: LD_ADDR_VAR 0 3
46387: PUSH
46388: LD_INT 21
46390: PUSH
46391: LD_INT 22
46393: PUSH
46394: LD_INT 23
46396: PUSH
46397: LD_INT 24
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: ST_TO_ADDR
46406: GO 46725
46408: LD_INT 43
46410: DOUBLE
46411: EQUAL
46412: IFTRUE 46416
46414: GO 46442
46416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46417: LD_ADDR_VAR 0 3
46421: PUSH
46422: LD_INT 21
46424: PUSH
46425: LD_INT 22
46427: PUSH
46428: LD_INT 23
46430: PUSH
46431: LD_INT 24
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: ST_TO_ADDR
46440: GO 46725
46442: LD_INT 44
46444: DOUBLE
46445: EQUAL
46446: IFTRUE 46450
46448: GO 46476
46450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46451: LD_ADDR_VAR 0 3
46455: PUSH
46456: LD_INT 21
46458: PUSH
46459: LD_INT 22
46461: PUSH
46462: LD_INT 23
46464: PUSH
46465: LD_INT 24
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: ST_TO_ADDR
46474: GO 46725
46476: LD_INT 45
46478: DOUBLE
46479: EQUAL
46480: IFTRUE 46484
46482: GO 46510
46484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46485: LD_ADDR_VAR 0 3
46489: PUSH
46490: LD_INT 21
46492: PUSH
46493: LD_INT 22
46495: PUSH
46496: LD_INT 23
46498: PUSH
46499: LD_INT 24
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: ST_TO_ADDR
46508: GO 46725
46510: LD_INT 49
46512: DOUBLE
46513: EQUAL
46514: IFTRUE 46518
46516: GO 46544
46518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46519: LD_ADDR_VAR 0 3
46523: PUSH
46524: LD_INT 21
46526: PUSH
46527: LD_INT 22
46529: PUSH
46530: LD_INT 23
46532: PUSH
46533: LD_INT 24
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: ST_TO_ADDR
46542: GO 46725
46544: LD_INT 51
46546: DOUBLE
46547: EQUAL
46548: IFTRUE 46552
46550: GO 46578
46552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46553: LD_ADDR_VAR 0 3
46557: PUSH
46558: LD_INT 21
46560: PUSH
46561: LD_INT 22
46563: PUSH
46564: LD_INT 23
46566: PUSH
46567: LD_INT 24
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: ST_TO_ADDR
46576: GO 46725
46578: LD_INT 52
46580: DOUBLE
46581: EQUAL
46582: IFTRUE 46586
46584: GO 46612
46586: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46587: LD_ADDR_VAR 0 3
46591: PUSH
46592: LD_INT 21
46594: PUSH
46595: LD_INT 22
46597: PUSH
46598: LD_INT 23
46600: PUSH
46601: LD_INT 24
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: ST_TO_ADDR
46610: GO 46725
46612: LD_INT 53
46614: DOUBLE
46615: EQUAL
46616: IFTRUE 46620
46618: GO 46638
46620: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46621: LD_ADDR_VAR 0 3
46625: PUSH
46626: LD_INT 23
46628: PUSH
46629: LD_INT 24
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: ST_TO_ADDR
46636: GO 46725
46638: LD_INT 46
46640: DOUBLE
46641: EQUAL
46642: IFTRUE 46646
46644: GO 46664
46646: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46647: LD_ADDR_VAR 0 3
46651: PUSH
46652: LD_INT 23
46654: PUSH
46655: LD_INT 24
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: ST_TO_ADDR
46662: GO 46725
46664: LD_INT 47
46666: DOUBLE
46667: EQUAL
46668: IFTRUE 46672
46670: GO 46690
46672: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
46673: LD_ADDR_VAR 0 3
46677: PUSH
46678: LD_INT 23
46680: PUSH
46681: LD_INT 24
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: ST_TO_ADDR
46688: GO 46725
46690: LD_INT 98
46692: DOUBLE
46693: EQUAL
46694: IFTRUE 46698
46696: GO 46724
46698: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46699: LD_ADDR_VAR 0 3
46703: PUSH
46704: LD_INT 21
46706: PUSH
46707: LD_INT 22
46709: PUSH
46710: LD_INT 23
46712: PUSH
46713: LD_INT 24
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: ST_TO_ADDR
46722: GO 46725
46724: POP
// result := ( chassis in result ) ;
46725: LD_ADDR_VAR 0 3
46729: PUSH
46730: LD_VAR 0 1
46734: PUSH
46735: LD_VAR 0 3
46739: IN
46740: ST_TO_ADDR
// end ;
46741: LD_VAR 0 3
46745: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46746: LD_INT 0
46748: PPUSH
46749: PPUSH
46750: PPUSH
46751: PPUSH
46752: PPUSH
46753: PPUSH
46754: PPUSH
// result := array ;
46755: LD_ADDR_VAR 0 5
46759: PUSH
46760: LD_VAR 0 1
46764: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46765: LD_VAR 0 1
46769: NOT
46770: IFTRUE 46779
46772: PUSH
46773: LD_VAR 0 2
46777: NOT
46778: OR
46779: IFTRUE 46788
46781: PUSH
46782: LD_VAR 0 3
46786: NOT
46787: OR
46788: IFTRUE 46802
46790: PUSH
46791: LD_VAR 0 2
46795: PUSH
46796: LD_VAR 0 1
46800: GREATER
46801: OR
46802: IFTRUE 46816
46804: PUSH
46805: LD_VAR 0 3
46809: PUSH
46810: LD_VAR 0 1
46814: GREATER
46815: OR
46816: IFFALSE 46820
// exit ;
46818: GO 47116
// if direction then
46820: LD_VAR 0 4
46824: IFFALSE 46888
// begin d := 1 ;
46826: LD_ADDR_VAR 0 9
46830: PUSH
46831: LD_INT 1
46833: ST_TO_ADDR
// if i_from > i_to then
46834: LD_VAR 0 2
46838: PUSH
46839: LD_VAR 0 3
46843: GREATER
46844: IFFALSE 46870
// length := ( array - i_from ) + i_to else
46846: LD_ADDR_VAR 0 11
46850: PUSH
46851: LD_VAR 0 1
46855: PUSH
46856: LD_VAR 0 2
46860: MINUS
46861: PUSH
46862: LD_VAR 0 3
46866: PLUS
46867: ST_TO_ADDR
46868: GO 46886
// length := i_to - i_from ;
46870: LD_ADDR_VAR 0 11
46874: PUSH
46875: LD_VAR 0 3
46879: PUSH
46880: LD_VAR 0 2
46884: MINUS
46885: ST_TO_ADDR
// end else
46886: GO 46949
// begin d := - 1 ;
46888: LD_ADDR_VAR 0 9
46892: PUSH
46893: LD_INT 1
46895: NEG
46896: ST_TO_ADDR
// if i_from > i_to then
46897: LD_VAR 0 2
46901: PUSH
46902: LD_VAR 0 3
46906: GREATER
46907: IFFALSE 46927
// length := i_from - i_to else
46909: LD_ADDR_VAR 0 11
46913: PUSH
46914: LD_VAR 0 2
46918: PUSH
46919: LD_VAR 0 3
46923: MINUS
46924: ST_TO_ADDR
46925: GO 46949
// length := ( array - i_to ) + i_from ;
46927: LD_ADDR_VAR 0 11
46931: PUSH
46932: LD_VAR 0 1
46936: PUSH
46937: LD_VAR 0 3
46941: MINUS
46942: PUSH
46943: LD_VAR 0 2
46947: PLUS
46948: ST_TO_ADDR
// end ; if not length then
46949: LD_VAR 0 11
46953: NOT
46954: IFFALSE 46958
// exit ;
46956: GO 47116
// tmp := array ;
46958: LD_ADDR_VAR 0 10
46962: PUSH
46963: LD_VAR 0 1
46967: ST_TO_ADDR
// for i = 1 to length do
46968: LD_ADDR_VAR 0 6
46972: PUSH
46973: DOUBLE
46974: LD_INT 1
46976: DEC
46977: ST_TO_ADDR
46978: LD_VAR 0 11
46982: PUSH
46983: FOR_TO
46984: IFFALSE 47104
// begin for j = 1 to array do
46986: LD_ADDR_VAR 0 7
46990: PUSH
46991: DOUBLE
46992: LD_INT 1
46994: DEC
46995: ST_TO_ADDR
46996: LD_VAR 0 1
47000: PUSH
47001: FOR_TO
47002: IFFALSE 47090
// begin k := j + d ;
47004: LD_ADDR_VAR 0 8
47008: PUSH
47009: LD_VAR 0 7
47013: PUSH
47014: LD_VAR 0 9
47018: PLUS
47019: ST_TO_ADDR
// if k > array then
47020: LD_VAR 0 8
47024: PUSH
47025: LD_VAR 0 1
47029: GREATER
47030: IFFALSE 47040
// k := 1 ;
47032: LD_ADDR_VAR 0 8
47036: PUSH
47037: LD_INT 1
47039: ST_TO_ADDR
// if not k then
47040: LD_VAR 0 8
47044: NOT
47045: IFFALSE 47057
// k := array ;
47047: LD_ADDR_VAR 0 8
47051: PUSH
47052: LD_VAR 0 1
47056: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
47057: LD_ADDR_VAR 0 10
47061: PUSH
47062: LD_VAR 0 10
47066: PPUSH
47067: LD_VAR 0 8
47071: PPUSH
47072: LD_VAR 0 1
47076: PUSH
47077: LD_VAR 0 7
47081: ARRAY
47082: PPUSH
47083: CALL_OW 1
47087: ST_TO_ADDR
// end ;
47088: GO 47001
47090: POP
47091: POP
// array := tmp ;
47092: LD_ADDR_VAR 0 1
47096: PUSH
47097: LD_VAR 0 10
47101: ST_TO_ADDR
// end ;
47102: GO 46983
47104: POP
47105: POP
// result := array ;
47106: LD_ADDR_VAR 0 5
47110: PUSH
47111: LD_VAR 0 1
47115: ST_TO_ADDR
// end ;
47116: LD_VAR 0 5
47120: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
47121: LD_INT 0
47123: PPUSH
47124: PPUSH
// result := 0 ;
47125: LD_ADDR_VAR 0 3
47129: PUSH
47130: LD_INT 0
47132: ST_TO_ADDR
// if not array or not value in array then
47133: LD_VAR 0 1
47137: NOT
47138: IFTRUE 47153
47140: PUSH
47141: LD_VAR 0 2
47145: PUSH
47146: LD_VAR 0 1
47150: IN
47151: NOT
47152: OR
47153: IFFALSE 47157
// exit ;
47155: GO 47211
// for i = 1 to array do
47157: LD_ADDR_VAR 0 4
47161: PUSH
47162: DOUBLE
47163: LD_INT 1
47165: DEC
47166: ST_TO_ADDR
47167: LD_VAR 0 1
47171: PUSH
47172: FOR_TO
47173: IFFALSE 47209
// if value = array [ i ] then
47175: LD_VAR 0 2
47179: PUSH
47180: LD_VAR 0 1
47184: PUSH
47185: LD_VAR 0 4
47189: ARRAY
47190: EQUAL
47191: IFFALSE 47207
// begin result := i ;
47193: LD_ADDR_VAR 0 3
47197: PUSH
47198: LD_VAR 0 4
47202: ST_TO_ADDR
// exit ;
47203: POP
47204: POP
47205: GO 47211
// end ;
47207: GO 47172
47209: POP
47210: POP
// end ;
47211: LD_VAR 0 3
47215: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
47216: LD_INT 0
47218: PPUSH
// vc_chassis := chassis ;
47219: LD_ADDR_OWVAR 37
47223: PUSH
47224: LD_VAR 0 1
47228: ST_TO_ADDR
// vc_engine := engine ;
47229: LD_ADDR_OWVAR 39
47233: PUSH
47234: LD_VAR 0 2
47238: ST_TO_ADDR
// vc_control := control ;
47239: LD_ADDR_OWVAR 38
47243: PUSH
47244: LD_VAR 0 3
47248: ST_TO_ADDR
// vc_weapon := weapon ;
47249: LD_ADDR_OWVAR 40
47253: PUSH
47254: LD_VAR 0 4
47258: ST_TO_ADDR
// vc_fuel_battery := fuel ;
47259: LD_ADDR_OWVAR 41
47263: PUSH
47264: LD_VAR 0 5
47268: ST_TO_ADDR
// end ;
47269: LD_VAR 0 6
47273: RET
// export function WantPlant ( unit ) ; var task ; begin
47274: LD_INT 0
47276: PPUSH
47277: PPUSH
// result := false ;
47278: LD_ADDR_VAR 0 2
47282: PUSH
47283: LD_INT 0
47285: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
47286: LD_ADDR_VAR 0 3
47290: PUSH
47291: LD_VAR 0 1
47295: PPUSH
47296: CALL_OW 437
47300: ST_TO_ADDR
// if task then
47301: LD_VAR 0 3
47305: IFFALSE 47333
// if task [ 1 ] [ 1 ] = p then
47307: LD_VAR 0 3
47311: PUSH
47312: LD_INT 1
47314: ARRAY
47315: PUSH
47316: LD_INT 1
47318: ARRAY
47319: PUSH
47320: LD_STRING p
47322: EQUAL
47323: IFFALSE 47333
// result := true ;
47325: LD_ADDR_VAR 0 2
47329: PUSH
47330: LD_INT 1
47332: ST_TO_ADDR
// end ;
47333: LD_VAR 0 2
47337: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
47338: LD_INT 0
47340: PPUSH
47341: PPUSH
47342: PPUSH
47343: PPUSH
// if pos < 1 then
47344: LD_VAR 0 2
47348: PUSH
47349: LD_INT 1
47351: LESS
47352: IFFALSE 47356
// exit ;
47354: GO 47659
// if pos = 1 then
47356: LD_VAR 0 2
47360: PUSH
47361: LD_INT 1
47363: EQUAL
47364: IFFALSE 47397
// result := Replace ( arr , pos [ 1 ] , value ) else
47366: LD_ADDR_VAR 0 4
47370: PUSH
47371: LD_VAR 0 1
47375: PPUSH
47376: LD_VAR 0 2
47380: PUSH
47381: LD_INT 1
47383: ARRAY
47384: PPUSH
47385: LD_VAR 0 3
47389: PPUSH
47390: CALL_OW 1
47394: ST_TO_ADDR
47395: GO 47659
// begin tmp := arr ;
47397: LD_ADDR_VAR 0 6
47401: PUSH
47402: LD_VAR 0 1
47406: ST_TO_ADDR
// s_arr := [ tmp ] ;
47407: LD_ADDR_VAR 0 7
47411: PUSH
47412: LD_VAR 0 6
47416: PUSH
47417: EMPTY
47418: LIST
47419: ST_TO_ADDR
// for i = 1 to pos - 1 do
47420: LD_ADDR_VAR 0 5
47424: PUSH
47425: DOUBLE
47426: LD_INT 1
47428: DEC
47429: ST_TO_ADDR
47430: LD_VAR 0 2
47434: PUSH
47435: LD_INT 1
47437: MINUS
47438: PUSH
47439: FOR_TO
47440: IFFALSE 47485
// begin tmp := tmp [ pos [ i ] ] ;
47442: LD_ADDR_VAR 0 6
47446: PUSH
47447: LD_VAR 0 6
47451: PUSH
47452: LD_VAR 0 2
47456: PUSH
47457: LD_VAR 0 5
47461: ARRAY
47462: ARRAY
47463: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47464: LD_ADDR_VAR 0 7
47468: PUSH
47469: LD_VAR 0 7
47473: PUSH
47474: LD_VAR 0 6
47478: PUSH
47479: EMPTY
47480: LIST
47481: ADD
47482: ST_TO_ADDR
// end ;
47483: GO 47439
47485: POP
47486: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47487: LD_ADDR_VAR 0 6
47491: PUSH
47492: LD_VAR 0 6
47496: PPUSH
47497: LD_VAR 0 2
47501: PUSH
47502: LD_VAR 0 2
47506: ARRAY
47507: PPUSH
47508: LD_VAR 0 3
47512: PPUSH
47513: CALL_OW 1
47517: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47518: LD_ADDR_VAR 0 7
47522: PUSH
47523: LD_VAR 0 7
47527: PPUSH
47528: LD_VAR 0 7
47532: PPUSH
47533: LD_VAR 0 6
47537: PPUSH
47538: CALL_OW 1
47542: ST_TO_ADDR
// for i = s_arr downto 2 do
47543: LD_ADDR_VAR 0 5
47547: PUSH
47548: DOUBLE
47549: LD_VAR 0 7
47553: INC
47554: ST_TO_ADDR
47555: LD_INT 2
47557: PUSH
47558: FOR_DOWNTO
47559: IFFALSE 47643
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47561: LD_ADDR_VAR 0 6
47565: PUSH
47566: LD_VAR 0 7
47570: PUSH
47571: LD_VAR 0 5
47575: PUSH
47576: LD_INT 1
47578: MINUS
47579: ARRAY
47580: PPUSH
47581: LD_VAR 0 2
47585: PUSH
47586: LD_VAR 0 5
47590: PUSH
47591: LD_INT 1
47593: MINUS
47594: ARRAY
47595: PPUSH
47596: LD_VAR 0 7
47600: PUSH
47601: LD_VAR 0 5
47605: ARRAY
47606: PPUSH
47607: CALL_OW 1
47611: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47612: LD_ADDR_VAR 0 7
47616: PUSH
47617: LD_VAR 0 7
47621: PPUSH
47622: LD_VAR 0 5
47626: PUSH
47627: LD_INT 1
47629: MINUS
47630: PPUSH
47631: LD_VAR 0 6
47635: PPUSH
47636: CALL_OW 1
47640: ST_TO_ADDR
// end ;
47641: GO 47558
47643: POP
47644: POP
// result := s_arr [ 1 ] ;
47645: LD_ADDR_VAR 0 4
47649: PUSH
47650: LD_VAR 0 7
47654: PUSH
47655: LD_INT 1
47657: ARRAY
47658: ST_TO_ADDR
// end ; end ;
47659: LD_VAR 0 4
47663: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47664: LD_INT 0
47666: PPUSH
47667: PPUSH
// if not list then
47668: LD_VAR 0 1
47672: NOT
47673: IFFALSE 47677
// exit ;
47675: GO 47768
// i := list [ pos1 ] ;
47677: LD_ADDR_VAR 0 5
47681: PUSH
47682: LD_VAR 0 1
47686: PUSH
47687: LD_VAR 0 2
47691: ARRAY
47692: ST_TO_ADDR
// if not i then
47693: LD_VAR 0 5
47697: NOT
47698: IFFALSE 47702
// exit ;
47700: GO 47768
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47702: LD_ADDR_VAR 0 1
47706: PUSH
47707: LD_VAR 0 1
47711: PPUSH
47712: LD_VAR 0 2
47716: PPUSH
47717: LD_VAR 0 1
47721: PUSH
47722: LD_VAR 0 3
47726: ARRAY
47727: PPUSH
47728: CALL_OW 1
47732: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47733: LD_ADDR_VAR 0 1
47737: PUSH
47738: LD_VAR 0 1
47742: PPUSH
47743: LD_VAR 0 3
47747: PPUSH
47748: LD_VAR 0 5
47752: PPUSH
47753: CALL_OW 1
47757: ST_TO_ADDR
// result := list ;
47758: LD_ADDR_VAR 0 4
47762: PUSH
47763: LD_VAR 0 1
47767: ST_TO_ADDR
// end ;
47768: LD_VAR 0 4
47772: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47773: LD_INT 0
47775: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47776: LD_ADDR_VAR 0 5
47780: PUSH
47781: LD_VAR 0 1
47785: PPUSH
47786: CALL_OW 250
47790: PPUSH
47791: LD_VAR 0 1
47795: PPUSH
47796: CALL_OW 251
47800: PPUSH
47801: LD_VAR 0 2
47805: PPUSH
47806: LD_VAR 0 3
47810: PPUSH
47811: LD_VAR 0 4
47815: PPUSH
47816: CALL 48198 0 5
47820: ST_TO_ADDR
// end ;
47821: LD_VAR 0 5
47825: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
47826: LD_INT 0
47828: PPUSH
47829: PPUSH
47830: PPUSH
47831: PPUSH
// if not list or not unit then
47832: LD_VAR 0 2
47836: NOT
47837: IFTRUE 47846
47839: PUSH
47840: LD_VAR 0 1
47844: NOT
47845: OR
47846: IFFALSE 47850
// exit ;
47848: GO 48193
// result := [ ] ;
47850: LD_ADDR_VAR 0 5
47854: PUSH
47855: EMPTY
47856: ST_TO_ADDR
// for i in list do
47857: LD_ADDR_VAR 0 6
47861: PUSH
47862: LD_VAR 0 2
47866: PUSH
47867: FOR_IN
47868: IFFALSE 48086
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47870: LD_ADDR_VAR 0 8
47874: PUSH
47875: LD_VAR 0 1
47879: PPUSH
47880: LD_VAR 0 6
47884: PUSH
47885: LD_INT 1
47887: ARRAY
47888: PPUSH
47889: LD_VAR 0 6
47893: PUSH
47894: LD_INT 2
47896: ARRAY
47897: PPUSH
47898: CALL_OW 297
47902: ST_TO_ADDR
// if not Count ( result ) then
47903: LD_VAR 0 5
47907: PPUSH
47908: CALL 44420 0 1
47912: NOT
47913: IFFALSE 47946
// begin result := Join ( result , [ i , tmp ] ) ;
47915: LD_ADDR_VAR 0 5
47919: PUSH
47920: LD_VAR 0 5
47924: PPUSH
47925: LD_VAR 0 6
47929: PUSH
47930: LD_VAR 0 8
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PPUSH
47939: CALL 80396 0 2
47943: ST_TO_ADDR
// continue ;
47944: GO 47867
// end ; if result [ result ] [ 2 ] <= tmp then
47946: LD_VAR 0 5
47950: PUSH
47951: LD_VAR 0 5
47955: ARRAY
47956: PUSH
47957: LD_INT 2
47959: ARRAY
47960: PUSH
47961: LD_VAR 0 8
47965: LESSEQUAL
47966: IFFALSE 47999
// result := Join ( result , [ i , tmp ] ) else
47968: LD_ADDR_VAR 0 5
47972: PUSH
47973: LD_VAR 0 5
47977: PPUSH
47978: LD_VAR 0 6
47982: PUSH
47983: LD_VAR 0 8
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PPUSH
47992: CALL 80396 0 2
47996: ST_TO_ADDR
47997: GO 48084
// begin for j := 1 to Count ( result ) do
47999: LD_ADDR_VAR 0 7
48003: PUSH
48004: DOUBLE
48005: LD_INT 1
48007: DEC
48008: ST_TO_ADDR
48009: LD_VAR 0 5
48013: PPUSH
48014: CALL 44420 0 1
48018: PUSH
48019: FOR_TO
48020: IFFALSE 48082
// begin if tmp < result [ j ] [ 2 ] then
48022: LD_VAR 0 8
48026: PUSH
48027: LD_VAR 0 5
48031: PUSH
48032: LD_VAR 0 7
48036: ARRAY
48037: PUSH
48038: LD_INT 2
48040: ARRAY
48041: LESS
48042: IFFALSE 48080
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48044: LD_ADDR_VAR 0 5
48048: PUSH
48049: LD_VAR 0 5
48053: PPUSH
48054: LD_VAR 0 7
48058: PPUSH
48059: LD_VAR 0 6
48063: PUSH
48064: LD_VAR 0 8
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PPUSH
48073: CALL_OW 2
48077: ST_TO_ADDR
// break ;
48078: GO 48082
// end ; end ;
48080: GO 48019
48082: POP
48083: POP
// end ; end ;
48084: GO 47867
48086: POP
48087: POP
// if result and not asc then
48088: LD_VAR 0 5
48092: IFFALSE 48101
48094: PUSH
48095: LD_VAR 0 3
48099: NOT
48100: AND
48101: IFFALSE 48118
// result := ReverseArray ( result ) ;
48103: LD_ADDR_VAR 0 5
48107: PUSH
48108: LD_VAR 0 5
48112: PPUSH
48113: CALL 75476 0 1
48117: ST_TO_ADDR
// tmp := [ ] ;
48118: LD_ADDR_VAR 0 8
48122: PUSH
48123: EMPTY
48124: ST_TO_ADDR
// if mode then
48125: LD_VAR 0 4
48129: IFFALSE 48193
// begin for i := 1 to result do
48131: LD_ADDR_VAR 0 6
48135: PUSH
48136: DOUBLE
48137: LD_INT 1
48139: DEC
48140: ST_TO_ADDR
48141: LD_VAR 0 5
48145: PUSH
48146: FOR_TO
48147: IFFALSE 48181
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
48149: LD_ADDR_VAR 0 8
48153: PUSH
48154: LD_VAR 0 8
48158: PPUSH
48159: LD_VAR 0 5
48163: PUSH
48164: LD_VAR 0 6
48168: ARRAY
48169: PUSH
48170: LD_INT 1
48172: ARRAY
48173: PPUSH
48174: CALL 80396 0 2
48178: ST_TO_ADDR
48179: GO 48146
48181: POP
48182: POP
// result := tmp ;
48183: LD_ADDR_VAR 0 5
48187: PUSH
48188: LD_VAR 0 8
48192: ST_TO_ADDR
// end ; end ;
48193: LD_VAR 0 5
48197: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
48198: LD_INT 0
48200: PPUSH
48201: PPUSH
48202: PPUSH
48203: PPUSH
// if not list then
48204: LD_VAR 0 3
48208: NOT
48209: IFFALSE 48213
// exit ;
48211: GO 48603
// result := [ ] ;
48213: LD_ADDR_VAR 0 6
48217: PUSH
48218: EMPTY
48219: ST_TO_ADDR
// for i in list do
48220: LD_ADDR_VAR 0 7
48224: PUSH
48225: LD_VAR 0 3
48229: PUSH
48230: FOR_IN
48231: IFFALSE 48433
// begin tmp := GetDistUnitXY ( i , x , y ) ;
48233: LD_ADDR_VAR 0 9
48237: PUSH
48238: LD_VAR 0 7
48242: PPUSH
48243: LD_VAR 0 1
48247: PPUSH
48248: LD_VAR 0 2
48252: PPUSH
48253: CALL_OW 297
48257: ST_TO_ADDR
// if not result then
48258: LD_VAR 0 6
48262: NOT
48263: IFFALSE 48289
// result := [ [ i , tmp ] ] else
48265: LD_ADDR_VAR 0 6
48269: PUSH
48270: LD_VAR 0 7
48274: PUSH
48275: LD_VAR 0 9
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: EMPTY
48285: LIST
48286: ST_TO_ADDR
48287: GO 48431
// begin if result [ result ] [ 2 ] <= tmp then
48289: LD_VAR 0 6
48293: PUSH
48294: LD_VAR 0 6
48298: ARRAY
48299: PUSH
48300: LD_INT 2
48302: ARRAY
48303: PUSH
48304: LD_VAR 0 9
48308: LESSEQUAL
48309: IFFALSE 48351
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
48311: LD_ADDR_VAR 0 6
48315: PUSH
48316: LD_VAR 0 6
48320: PPUSH
48321: LD_VAR 0 6
48325: PUSH
48326: LD_INT 1
48328: PLUS
48329: PPUSH
48330: LD_VAR 0 7
48334: PUSH
48335: LD_VAR 0 9
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PPUSH
48344: CALL_OW 2
48348: ST_TO_ADDR
48349: GO 48431
// for j := 1 to result do
48351: LD_ADDR_VAR 0 8
48355: PUSH
48356: DOUBLE
48357: LD_INT 1
48359: DEC
48360: ST_TO_ADDR
48361: LD_VAR 0 6
48365: PUSH
48366: FOR_TO
48367: IFFALSE 48429
// begin if tmp < result [ j ] [ 2 ] then
48369: LD_VAR 0 9
48373: PUSH
48374: LD_VAR 0 6
48378: PUSH
48379: LD_VAR 0 8
48383: ARRAY
48384: PUSH
48385: LD_INT 2
48387: ARRAY
48388: LESS
48389: IFFALSE 48427
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48391: LD_ADDR_VAR 0 6
48395: PUSH
48396: LD_VAR 0 6
48400: PPUSH
48401: LD_VAR 0 8
48405: PPUSH
48406: LD_VAR 0 7
48410: PUSH
48411: LD_VAR 0 9
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PPUSH
48420: CALL_OW 2
48424: ST_TO_ADDR
// break ;
48425: GO 48429
// end ; end ;
48427: GO 48366
48429: POP
48430: POP
// end ; end ;
48431: GO 48230
48433: POP
48434: POP
// if result and not asc then
48435: LD_VAR 0 6
48439: IFFALSE 48448
48441: PUSH
48442: LD_VAR 0 4
48446: NOT
48447: AND
48448: IFFALSE 48523
// begin tmp := result ;
48450: LD_ADDR_VAR 0 9
48454: PUSH
48455: LD_VAR 0 6
48459: ST_TO_ADDR
// for i = tmp downto 1 do
48460: LD_ADDR_VAR 0 7
48464: PUSH
48465: DOUBLE
48466: LD_VAR 0 9
48470: INC
48471: ST_TO_ADDR
48472: LD_INT 1
48474: PUSH
48475: FOR_DOWNTO
48476: IFFALSE 48521
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
48478: LD_ADDR_VAR 0 6
48482: PUSH
48483: LD_VAR 0 6
48487: PPUSH
48488: LD_VAR 0 9
48492: PUSH
48493: LD_VAR 0 7
48497: MINUS
48498: PUSH
48499: LD_INT 1
48501: PLUS
48502: PPUSH
48503: LD_VAR 0 9
48507: PUSH
48508: LD_VAR 0 7
48512: ARRAY
48513: PPUSH
48514: CALL_OW 1
48518: ST_TO_ADDR
48519: GO 48475
48521: POP
48522: POP
// end ; tmp := [ ] ;
48523: LD_ADDR_VAR 0 9
48527: PUSH
48528: EMPTY
48529: ST_TO_ADDR
// if mode then
48530: LD_VAR 0 5
48534: IFFALSE 48603
// begin for i = 1 to result do
48536: LD_ADDR_VAR 0 7
48540: PUSH
48541: DOUBLE
48542: LD_INT 1
48544: DEC
48545: ST_TO_ADDR
48546: LD_VAR 0 6
48550: PUSH
48551: FOR_TO
48552: IFFALSE 48591
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
48554: LD_ADDR_VAR 0 9
48558: PUSH
48559: LD_VAR 0 9
48563: PPUSH
48564: LD_VAR 0 7
48568: PPUSH
48569: LD_VAR 0 6
48573: PUSH
48574: LD_VAR 0 7
48578: ARRAY
48579: PUSH
48580: LD_INT 1
48582: ARRAY
48583: PPUSH
48584: CALL_OW 1
48588: ST_TO_ADDR
48589: GO 48551
48591: POP
48592: POP
// result := tmp ;
48593: LD_ADDR_VAR 0 6
48597: PUSH
48598: LD_VAR 0 9
48602: ST_TO_ADDR
// end ; end ;
48603: LD_VAR 0 6
48607: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48608: LD_INT 0
48610: PPUSH
48611: PPUSH
48612: PPUSH
48613: PPUSH
48614: PPUSH
48615: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48616: LD_ADDR_VAR 0 5
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: EMPTY
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: ST_TO_ADDR
// if not x or not y then
48638: LD_VAR 0 2
48642: NOT
48643: IFTRUE 48652
48645: PUSH
48646: LD_VAR 0 3
48650: NOT
48651: OR
48652: IFFALSE 48656
// exit ;
48654: GO 50312
// if not range then
48656: LD_VAR 0 4
48660: NOT
48661: IFFALSE 48671
// range := 10 ;
48663: LD_ADDR_VAR 0 4
48667: PUSH
48668: LD_INT 10
48670: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48671: LD_ADDR_VAR 0 8
48675: PUSH
48676: LD_INT 81
48678: PUSH
48679: LD_VAR 0 1
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 92
48690: PUSH
48691: LD_VAR 0 2
48695: PUSH
48696: LD_VAR 0 3
48700: PUSH
48701: LD_VAR 0 4
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 3
48714: PUSH
48715: LD_INT 21
48717: PUSH
48718: LD_INT 3
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: LIST
48733: PPUSH
48734: CALL_OW 69
48738: ST_TO_ADDR
// if not tmp then
48739: LD_VAR 0 8
48743: NOT
48744: IFFALSE 48748
// exit ;
48746: GO 50312
// for i in tmp do
48748: LD_ADDR_VAR 0 6
48752: PUSH
48753: LD_VAR 0 8
48757: PUSH
48758: FOR_IN
48759: IFFALSE 50287
// begin points := [ 0 , 0 , 0 ] ;
48761: LD_ADDR_VAR 0 9
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: LIST
48779: ST_TO_ADDR
// bpoints := 1 ;
48780: LD_ADDR_VAR 0 10
48784: PUSH
48785: LD_INT 1
48787: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48788: LD_VAR 0 6
48792: PPUSH
48793: CALL_OW 247
48797: PUSH
48798: LD_INT 1
48800: DOUBLE
48801: EQUAL
48802: IFTRUE 48806
48804: GO 49388
48806: POP
// begin if GetClass ( i ) = 1 then
48807: LD_VAR 0 6
48811: PPUSH
48812: CALL_OW 257
48816: PUSH
48817: LD_INT 1
48819: EQUAL
48820: IFFALSE 48841
// points := [ 10 , 5 , 3 ] ;
48822: LD_ADDR_VAR 0 9
48826: PUSH
48827: LD_INT 10
48829: PUSH
48830: LD_INT 5
48832: PUSH
48833: LD_INT 3
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: LIST
48840: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48841: LD_VAR 0 6
48845: PPUSH
48846: CALL_OW 257
48850: PUSH
48851: LD_INT 2
48853: PUSH
48854: LD_INT 3
48856: PUSH
48857: LD_INT 4
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: LIST
48864: IN
48865: IFFALSE 48886
// points := [ 3 , 2 , 1 ] ;
48867: LD_ADDR_VAR 0 9
48871: PUSH
48872: LD_INT 3
48874: PUSH
48875: LD_INT 2
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: LIST
48885: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48886: LD_VAR 0 6
48890: PPUSH
48891: CALL_OW 257
48895: PUSH
48896: LD_INT 5
48898: EQUAL
48899: IFFALSE 48920
// points := [ 130 , 5 , 2 ] ;
48901: LD_ADDR_VAR 0 9
48905: PUSH
48906: LD_INT 130
48908: PUSH
48909: LD_INT 5
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: LIST
48919: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48920: LD_VAR 0 6
48924: PPUSH
48925: CALL_OW 257
48929: PUSH
48930: LD_INT 8
48932: EQUAL
48933: IFFALSE 48954
// points := [ 35 , 35 , 30 ] ;
48935: LD_ADDR_VAR 0 9
48939: PUSH
48940: LD_INT 35
48942: PUSH
48943: LD_INT 35
48945: PUSH
48946: LD_INT 30
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: LIST
48953: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48954: LD_VAR 0 6
48958: PPUSH
48959: CALL_OW 257
48963: PUSH
48964: LD_INT 9
48966: EQUAL
48967: IFFALSE 48988
// points := [ 20 , 55 , 40 ] ;
48969: LD_ADDR_VAR 0 9
48973: PUSH
48974: LD_INT 20
48976: PUSH
48977: LD_INT 55
48979: PUSH
48980: LD_INT 40
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: LIST
48987: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48988: LD_VAR 0 6
48992: PPUSH
48993: CALL_OW 257
48997: PUSH
48998: LD_INT 12
49000: PUSH
49001: LD_INT 16
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: IN
49008: IFFALSE 49029
// points := [ 5 , 3 , 2 ] ;
49010: LD_ADDR_VAR 0 9
49014: PUSH
49015: LD_INT 5
49017: PUSH
49018: LD_INT 3
49020: PUSH
49021: LD_INT 2
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: LIST
49028: ST_TO_ADDR
// if GetClass ( i ) = 17 then
49029: LD_VAR 0 6
49033: PPUSH
49034: CALL_OW 257
49038: PUSH
49039: LD_INT 17
49041: EQUAL
49042: IFFALSE 49063
// points := [ 100 , 50 , 75 ] ;
49044: LD_ADDR_VAR 0 9
49048: PUSH
49049: LD_INT 100
49051: PUSH
49052: LD_INT 50
49054: PUSH
49055: LD_INT 75
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: LIST
49062: ST_TO_ADDR
// if GetClass ( i ) = 15 then
49063: LD_VAR 0 6
49067: PPUSH
49068: CALL_OW 257
49072: PUSH
49073: LD_INT 15
49075: EQUAL
49076: IFFALSE 49097
// points := [ 10 , 5 , 3 ] ;
49078: LD_ADDR_VAR 0 9
49082: PUSH
49083: LD_INT 10
49085: PUSH
49086: LD_INT 5
49088: PUSH
49089: LD_INT 3
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: LIST
49096: ST_TO_ADDR
// if GetClass ( i ) = 14 then
49097: LD_VAR 0 6
49101: PPUSH
49102: CALL_OW 257
49106: PUSH
49107: LD_INT 14
49109: EQUAL
49110: IFFALSE 49131
// points := [ 10 , 0 , 0 ] ;
49112: LD_ADDR_VAR 0 9
49116: PUSH
49117: LD_INT 10
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: LIST
49130: ST_TO_ADDR
// if GetClass ( i ) = 11 then
49131: LD_VAR 0 6
49135: PPUSH
49136: CALL_OW 257
49140: PUSH
49141: LD_INT 11
49143: EQUAL
49144: IFFALSE 49165
// points := [ 30 , 10 , 5 ] ;
49146: LD_ADDR_VAR 0 9
49150: PUSH
49151: LD_INT 30
49153: PUSH
49154: LD_INT 10
49156: PUSH
49157: LD_INT 5
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: LIST
49164: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
49165: LD_VAR 0 1
49169: PPUSH
49170: LD_INT 5
49172: PPUSH
49173: CALL_OW 321
49177: PUSH
49178: LD_INT 2
49180: EQUAL
49181: IFFALSE 49198
// bpoints := bpoints * 1.8 ;
49183: LD_ADDR_VAR 0 10
49187: PUSH
49188: LD_VAR 0 10
49192: PUSH
49193: LD_REAL  1.80000000000000E+0000
49196: MUL
49197: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
49198: LD_VAR 0 6
49202: PPUSH
49203: CALL_OW 257
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: LD_INT 3
49216: PUSH
49217: LD_INT 4
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: IN
49226: IFFALSE 49246
49228: PUSH
49229: LD_VAR 0 1
49233: PPUSH
49234: LD_INT 51
49236: PPUSH
49237: CALL_OW 321
49241: PUSH
49242: LD_INT 2
49244: EQUAL
49245: AND
49246: IFFALSE 49263
// bpoints := bpoints * 1.2 ;
49248: LD_ADDR_VAR 0 10
49252: PUSH
49253: LD_VAR 0 10
49257: PUSH
49258: LD_REAL  1.20000000000000E+0000
49261: MUL
49262: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
49263: LD_VAR 0 6
49267: PPUSH
49268: CALL_OW 257
49272: PUSH
49273: LD_INT 5
49275: PUSH
49276: LD_INT 7
49278: PUSH
49279: LD_INT 9
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: LIST
49286: IN
49287: IFFALSE 49307
49289: PUSH
49290: LD_VAR 0 1
49294: PPUSH
49295: LD_INT 52
49297: PPUSH
49298: CALL_OW 321
49302: PUSH
49303: LD_INT 2
49305: EQUAL
49306: AND
49307: IFFALSE 49324
// bpoints := bpoints * 1.5 ;
49309: LD_ADDR_VAR 0 10
49313: PUSH
49314: LD_VAR 0 10
49318: PUSH
49319: LD_REAL  1.50000000000000E+0000
49322: MUL
49323: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
49324: LD_VAR 0 1
49328: PPUSH
49329: LD_INT 66
49331: PPUSH
49332: CALL_OW 321
49336: PUSH
49337: LD_INT 2
49339: EQUAL
49340: IFFALSE 49357
// bpoints := bpoints * 1.1 ;
49342: LD_ADDR_VAR 0 10
49346: PUSH
49347: LD_VAR 0 10
49351: PUSH
49352: LD_REAL  1.10000000000000E+0000
49355: MUL
49356: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
49357: LD_ADDR_VAR 0 10
49361: PUSH
49362: LD_VAR 0 10
49366: PUSH
49367: LD_VAR 0 6
49371: PPUSH
49372: LD_INT 1
49374: PPUSH
49375: CALL_OW 259
49379: PUSH
49380: LD_REAL  1.15000000000000E+0000
49383: MUL
49384: MUL
49385: ST_TO_ADDR
// end ; unit_vehicle :
49386: GO 50216
49388: LD_INT 2
49390: DOUBLE
49391: EQUAL
49392: IFTRUE 49396
49394: GO 50204
49396: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
49397: LD_VAR 0 6
49401: PPUSH
49402: CALL_OW 264
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: LD_INT 42
49412: PUSH
49413: LD_INT 24
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: LIST
49420: IN
49421: IFFALSE 49442
// points := [ 25 , 5 , 3 ] ;
49423: LD_ADDR_VAR 0 9
49427: PUSH
49428: LD_INT 25
49430: PUSH
49431: LD_INT 5
49433: PUSH
49434: LD_INT 3
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: LIST
49441: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
49442: LD_VAR 0 6
49446: PPUSH
49447: CALL_OW 264
49451: PUSH
49452: LD_INT 4
49454: PUSH
49455: LD_INT 43
49457: PUSH
49458: LD_INT 25
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: LIST
49465: IN
49466: IFFALSE 49487
// points := [ 40 , 15 , 5 ] ;
49468: LD_ADDR_VAR 0 9
49472: PUSH
49473: LD_INT 40
49475: PUSH
49476: LD_INT 15
49478: PUSH
49479: LD_INT 5
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: LIST
49486: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
49487: LD_VAR 0 6
49491: PPUSH
49492: CALL_OW 264
49496: PUSH
49497: LD_INT 3
49499: PUSH
49500: LD_INT 23
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: IN
49507: IFFALSE 49528
// points := [ 7 , 25 , 8 ] ;
49509: LD_ADDR_VAR 0 9
49513: PUSH
49514: LD_INT 7
49516: PUSH
49517: LD_INT 25
49519: PUSH
49520: LD_INT 8
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: LIST
49527: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49528: LD_VAR 0 6
49532: PPUSH
49533: CALL_OW 264
49537: PUSH
49538: LD_INT 5
49540: PUSH
49541: LD_INT 27
49543: PUSH
49544: LD_INT 44
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: LIST
49551: IN
49552: IFFALSE 49573
// points := [ 14 , 50 , 16 ] ;
49554: LD_ADDR_VAR 0 9
49558: PUSH
49559: LD_INT 14
49561: PUSH
49562: LD_INT 50
49564: PUSH
49565: LD_INT 16
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: LIST
49572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
49573: LD_VAR 0 6
49577: PPUSH
49578: CALL_OW 264
49582: PUSH
49583: LD_INT 6
49585: PUSH
49586: LD_INT 46
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: IN
49593: IFFALSE 49614
// points := [ 32 , 120 , 70 ] ;
49595: LD_ADDR_VAR 0 9
49599: PUSH
49600: LD_INT 32
49602: PUSH
49603: LD_INT 120
49605: PUSH
49606: LD_INT 70
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: LIST
49613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49614: LD_VAR 0 6
49618: PPUSH
49619: CALL_OW 264
49623: PUSH
49624: LD_INT 7
49626: PUSH
49627: LD_INT 28
49629: PUSH
49630: LD_INT 45
49632: PUSH
49633: LD_INT 92
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: IN
49642: IFFALSE 49663
// points := [ 35 , 20 , 45 ] ;
49644: LD_ADDR_VAR 0 9
49648: PUSH
49649: LD_INT 35
49651: PUSH
49652: LD_INT 20
49654: PUSH
49655: LD_INT 45
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: LIST
49662: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49663: LD_VAR 0 6
49667: PPUSH
49668: CALL_OW 264
49672: PUSH
49673: LD_INT 47
49675: PUSH
49676: EMPTY
49677: LIST
49678: IN
49679: IFFALSE 49700
// points := [ 67 , 45 , 75 ] ;
49681: LD_ADDR_VAR 0 9
49685: PUSH
49686: LD_INT 67
49688: PUSH
49689: LD_INT 45
49691: PUSH
49692: LD_INT 75
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: LIST
49699: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49700: LD_VAR 0 6
49704: PPUSH
49705: CALL_OW 264
49709: PUSH
49710: LD_INT 26
49712: PUSH
49713: EMPTY
49714: LIST
49715: IN
49716: IFFALSE 49737
// points := [ 120 , 30 , 80 ] ;
49718: LD_ADDR_VAR 0 9
49722: PUSH
49723: LD_INT 120
49725: PUSH
49726: LD_INT 30
49728: PUSH
49729: LD_INT 80
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: LIST
49736: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49737: LD_VAR 0 6
49741: PPUSH
49742: CALL_OW 264
49746: PUSH
49747: LD_INT 22
49749: PUSH
49750: EMPTY
49751: LIST
49752: IN
49753: IFFALSE 49774
// points := [ 40 , 1 , 1 ] ;
49755: LD_ADDR_VAR 0 9
49759: PUSH
49760: LD_INT 40
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: LIST
49773: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49774: LD_VAR 0 6
49778: PPUSH
49779: CALL_OW 264
49783: PUSH
49784: LD_INT 29
49786: PUSH
49787: EMPTY
49788: LIST
49789: IN
49790: IFFALSE 49811
// points := [ 70 , 200 , 400 ] ;
49792: LD_ADDR_VAR 0 9
49796: PUSH
49797: LD_INT 70
49799: PUSH
49800: LD_INT 200
49802: PUSH
49803: LD_INT 400
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: LIST
49810: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49811: LD_VAR 0 6
49815: PPUSH
49816: CALL_OW 264
49820: PUSH
49821: LD_INT 14
49823: PUSH
49824: LD_INT 53
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: IN
49831: IFFALSE 49852
// points := [ 40 , 10 , 20 ] ;
49833: LD_ADDR_VAR 0 9
49837: PUSH
49838: LD_INT 40
49840: PUSH
49841: LD_INT 10
49843: PUSH
49844: LD_INT 20
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: LIST
49851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49852: LD_VAR 0 6
49856: PPUSH
49857: CALL_OW 264
49861: PUSH
49862: LD_INT 9
49864: PUSH
49865: EMPTY
49866: LIST
49867: IN
49868: IFFALSE 49889
// points := [ 5 , 70 , 20 ] ;
49870: LD_ADDR_VAR 0 9
49874: PUSH
49875: LD_INT 5
49877: PUSH
49878: LD_INT 70
49880: PUSH
49881: LD_INT 20
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: LIST
49888: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49889: LD_VAR 0 6
49893: PPUSH
49894: CALL_OW 264
49898: PUSH
49899: LD_INT 10
49901: PUSH
49902: EMPTY
49903: LIST
49904: IN
49905: IFFALSE 49926
// points := [ 35 , 110 , 70 ] ;
49907: LD_ADDR_VAR 0 9
49911: PUSH
49912: LD_INT 35
49914: PUSH
49915: LD_INT 110
49917: PUSH
49918: LD_INT 70
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: LIST
49925: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49926: LD_VAR 0 6
49930: PPUSH
49931: CALL_OW 265
49935: PUSH
49936: LD_INT 25
49938: EQUAL
49939: IFFALSE 49960
// points := [ 80 , 65 , 100 ] ;
49941: LD_ADDR_VAR 0 9
49945: PUSH
49946: LD_INT 80
49948: PUSH
49949: LD_INT 65
49951: PUSH
49952: LD_INT 100
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: LIST
49959: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49960: LD_VAR 0 6
49964: PPUSH
49965: CALL_OW 263
49969: PUSH
49970: LD_INT 1
49972: EQUAL
49973: IFFALSE 50008
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49975: LD_ADDR_VAR 0 10
49979: PUSH
49980: LD_VAR 0 10
49984: PUSH
49985: LD_VAR 0 6
49989: PPUSH
49990: CALL_OW 311
49994: PPUSH
49995: LD_INT 3
49997: PPUSH
49998: CALL_OW 259
50002: PUSH
50003: LD_INT 4
50005: MUL
50006: MUL
50007: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
50008: LD_VAR 0 6
50012: PPUSH
50013: CALL_OW 263
50017: PUSH
50018: LD_INT 2
50020: EQUAL
50021: IFFALSE 50072
// begin j := IsControledBy ( i ) ;
50023: LD_ADDR_VAR 0 7
50027: PUSH
50028: LD_VAR 0 6
50032: PPUSH
50033: CALL_OW 312
50037: ST_TO_ADDR
// if j then
50038: LD_VAR 0 7
50042: IFFALSE 50072
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
50044: LD_ADDR_VAR 0 10
50048: PUSH
50049: LD_VAR 0 10
50053: PUSH
50054: LD_VAR 0 7
50058: PPUSH
50059: LD_INT 3
50061: PPUSH
50062: CALL_OW 259
50066: PUSH
50067: LD_INT 3
50069: MUL
50070: MUL
50071: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
50072: LD_VAR 0 6
50076: PPUSH
50077: CALL_OW 264
50081: PUSH
50082: LD_INT 5
50084: PUSH
50085: LD_INT 6
50087: PUSH
50088: LD_INT 46
50090: PUSH
50091: LD_INT 44
50093: PUSH
50094: LD_INT 47
50096: PUSH
50097: LD_INT 45
50099: PUSH
50100: LD_INT 28
50102: PUSH
50103: LD_INT 7
50105: PUSH
50106: LD_INT 27
50108: PUSH
50109: LD_INT 29
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: IN
50124: IFFALSE 50144
50126: PUSH
50127: LD_VAR 0 1
50131: PPUSH
50132: LD_INT 52
50134: PPUSH
50135: CALL_OW 321
50139: PUSH
50140: LD_INT 2
50142: EQUAL
50143: AND
50144: IFFALSE 50161
// bpoints := bpoints * 1.2 ;
50146: LD_ADDR_VAR 0 10
50150: PUSH
50151: LD_VAR 0 10
50155: PUSH
50156: LD_REAL  1.20000000000000E+0000
50159: MUL
50160: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
50161: LD_VAR 0 6
50165: PPUSH
50166: CALL_OW 264
50170: PUSH
50171: LD_INT 6
50173: PUSH
50174: LD_INT 46
50176: PUSH
50177: LD_INT 47
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: LIST
50184: IN
50185: IFFALSE 50202
// bpoints := bpoints * 1.2 ;
50187: LD_ADDR_VAR 0 10
50191: PUSH
50192: LD_VAR 0 10
50196: PUSH
50197: LD_REAL  1.20000000000000E+0000
50200: MUL
50201: ST_TO_ADDR
// end ; unit_building :
50202: GO 50216
50204: LD_INT 3
50206: DOUBLE
50207: EQUAL
50208: IFTRUE 50212
50210: GO 50215
50212: POP
// ; end ;
50213: GO 50216
50215: POP
// for j = 1 to 3 do
50216: LD_ADDR_VAR 0 7
50220: PUSH
50221: DOUBLE
50222: LD_INT 1
50224: DEC
50225: ST_TO_ADDR
50226: LD_INT 3
50228: PUSH
50229: FOR_TO
50230: IFFALSE 50283
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
50232: LD_ADDR_VAR 0 5
50236: PUSH
50237: LD_VAR 0 5
50241: PPUSH
50242: LD_VAR 0 7
50246: PPUSH
50247: LD_VAR 0 5
50251: PUSH
50252: LD_VAR 0 7
50256: ARRAY
50257: PUSH
50258: LD_VAR 0 9
50262: PUSH
50263: LD_VAR 0 7
50267: ARRAY
50268: PUSH
50269: LD_VAR 0 10
50273: MUL
50274: PLUS
50275: PPUSH
50276: CALL_OW 1
50280: ST_TO_ADDR
50281: GO 50229
50283: POP
50284: POP
// end ;
50285: GO 48758
50287: POP
50288: POP
// result := Replace ( result , 4 , tmp ) ;
50289: LD_ADDR_VAR 0 5
50293: PUSH
50294: LD_VAR 0 5
50298: PPUSH
50299: LD_INT 4
50301: PPUSH
50302: LD_VAR 0 8
50306: PPUSH
50307: CALL_OW 1
50311: ST_TO_ADDR
// end ;
50312: LD_VAR 0 5
50316: RET
// export function DangerAtRange ( unit , range ) ; begin
50317: LD_INT 0
50319: PPUSH
// if not unit then
50320: LD_VAR 0 1
50324: NOT
50325: IFFALSE 50329
// exit ;
50327: GO 50374
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
50329: LD_ADDR_VAR 0 3
50333: PUSH
50334: LD_VAR 0 1
50338: PPUSH
50339: CALL_OW 255
50343: PPUSH
50344: LD_VAR 0 1
50348: PPUSH
50349: CALL_OW 250
50353: PPUSH
50354: LD_VAR 0 1
50358: PPUSH
50359: CALL_OW 251
50363: PPUSH
50364: LD_VAR 0 2
50368: PPUSH
50369: CALL 48608 0 4
50373: ST_TO_ADDR
// end ;
50374: LD_VAR 0 3
50378: RET
// export function DangerInArea ( side , area ) ; begin
50379: LD_INT 0
50381: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
50382: LD_ADDR_VAR 0 3
50386: PUSH
50387: LD_VAR 0 2
50391: PPUSH
50392: LD_INT 81
50394: PUSH
50395: LD_VAR 0 1
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PPUSH
50404: CALL_OW 70
50408: ST_TO_ADDR
// end ;
50409: LD_VAR 0 3
50413: RET
// export function IsExtension ( b ) ; begin
50414: LD_INT 0
50416: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
50417: LD_ADDR_VAR 0 2
50421: PUSH
50422: LD_VAR 0 1
50426: PUSH
50427: LD_INT 23
50429: PUSH
50430: LD_INT 20
50432: PUSH
50433: LD_INT 22
50435: PUSH
50436: LD_INT 17
50438: PUSH
50439: LD_INT 24
50441: PUSH
50442: LD_INT 21
50444: PUSH
50445: LD_INT 19
50447: PUSH
50448: LD_INT 16
50450: PUSH
50451: LD_INT 25
50453: PUSH
50454: LD_INT 18
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: IN
50469: ST_TO_ADDR
// end ;
50470: LD_VAR 0 2
50474: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
50475: LD_INT 0
50477: PPUSH
50478: PPUSH
50479: PPUSH
// result := [ ] ;
50480: LD_ADDR_VAR 0 4
50484: PUSH
50485: EMPTY
50486: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
50487: LD_ADDR_VAR 0 5
50491: PUSH
50492: LD_VAR 0 2
50496: PPUSH
50497: LD_INT 21
50499: PUSH
50500: LD_INT 3
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PPUSH
50507: CALL_OW 70
50511: ST_TO_ADDR
// if not tmp then
50512: LD_VAR 0 5
50516: NOT
50517: IFFALSE 50521
// exit ;
50519: GO 50585
// if checkLink then
50521: LD_VAR 0 3
50525: IFFALSE 50575
// begin for i in tmp do
50527: LD_ADDR_VAR 0 6
50531: PUSH
50532: LD_VAR 0 5
50536: PUSH
50537: FOR_IN
50538: IFFALSE 50573
// if GetBase ( i ) <> base then
50540: LD_VAR 0 6
50544: PPUSH
50545: CALL_OW 274
50549: PUSH
50550: LD_VAR 0 1
50554: NONEQUAL
50555: IFFALSE 50571
// ComLinkToBase ( base , i ) ;
50557: LD_VAR 0 1
50561: PPUSH
50562: LD_VAR 0 6
50566: PPUSH
50567: CALL_OW 169
50571: GO 50537
50573: POP
50574: POP
// end ; result := tmp ;
50575: LD_ADDR_VAR 0 4
50579: PUSH
50580: LD_VAR 0 5
50584: ST_TO_ADDR
// end ;
50585: LD_VAR 0 4
50589: RET
// export function ComComplete ( units , b ) ; var i ; begin
50590: LD_INT 0
50592: PPUSH
50593: PPUSH
// if not units then
50594: LD_VAR 0 1
50598: NOT
50599: IFFALSE 50603
// exit ;
50601: GO 50693
// for i in units do
50603: LD_ADDR_VAR 0 4
50607: PUSH
50608: LD_VAR 0 1
50612: PUSH
50613: FOR_IN
50614: IFFALSE 50691
// if BuildingStatus ( b ) = bs_build then
50616: LD_VAR 0 2
50620: PPUSH
50621: CALL_OW 461
50625: PUSH
50626: LD_INT 1
50628: EQUAL
50629: IFFALSE 50689
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50631: LD_VAR 0 4
50635: PPUSH
50636: LD_STRING h
50638: PUSH
50639: LD_VAR 0 2
50643: PPUSH
50644: CALL_OW 250
50648: PUSH
50649: LD_VAR 0 2
50653: PPUSH
50654: CALL_OW 251
50658: PUSH
50659: LD_VAR 0 2
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: PUSH
50682: EMPTY
50683: LIST
50684: PPUSH
50685: CALL_OW 446
50689: GO 50613
50691: POP
50692: POP
// end ;
50693: LD_VAR 0 3
50697: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50698: LD_INT 0
50700: PPUSH
50701: PPUSH
50702: PPUSH
50703: PPUSH
50704: PPUSH
50705: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50706: LD_VAR 0 1
50710: NOT
50711: IFTRUE 50728
50713: PUSH
50714: LD_VAR 0 1
50718: PPUSH
50719: CALL_OW 263
50723: PUSH
50724: LD_INT 2
50726: NONEQUAL
50727: OR
50728: IFFALSE 50732
// exit ;
50730: GO 51048
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50732: LD_ADDR_VAR 0 6
50736: PUSH
50737: LD_INT 22
50739: PUSH
50740: LD_VAR 0 1
50744: PPUSH
50745: CALL_OW 255
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 2
50756: PUSH
50757: LD_INT 30
50759: PUSH
50760: LD_INT 36
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 34
50769: PUSH
50770: LD_INT 31
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: LIST
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PPUSH
50786: CALL_OW 69
50790: ST_TO_ADDR
// if not tmp then
50791: LD_VAR 0 6
50795: NOT
50796: IFFALSE 50800
// exit ;
50798: GO 51048
// result := [ ] ;
50800: LD_ADDR_VAR 0 2
50804: PUSH
50805: EMPTY
50806: ST_TO_ADDR
// for i in tmp do
50807: LD_ADDR_VAR 0 3
50811: PUSH
50812: LD_VAR 0 6
50816: PUSH
50817: FOR_IN
50818: IFFALSE 50889
// begin t := UnitsInside ( i ) ;
50820: LD_ADDR_VAR 0 4
50824: PUSH
50825: LD_VAR 0 3
50829: PPUSH
50830: CALL_OW 313
50834: ST_TO_ADDR
// if t then
50835: LD_VAR 0 4
50839: IFFALSE 50887
// for j in t do
50841: LD_ADDR_VAR 0 7
50845: PUSH
50846: LD_VAR 0 4
50850: PUSH
50851: FOR_IN
50852: IFFALSE 50885
// result := Replace ( result , result + 1 , j ) ;
50854: LD_ADDR_VAR 0 2
50858: PUSH
50859: LD_VAR 0 2
50863: PPUSH
50864: LD_VAR 0 2
50868: PUSH
50869: LD_INT 1
50871: PLUS
50872: PPUSH
50873: LD_VAR 0 7
50877: PPUSH
50878: CALL_OW 1
50882: ST_TO_ADDR
50883: GO 50851
50885: POP
50886: POP
// end ;
50887: GO 50817
50889: POP
50890: POP
// if not result then
50891: LD_VAR 0 2
50895: NOT
50896: IFFALSE 50900
// exit ;
50898: GO 51048
// mech := result [ 1 ] ;
50900: LD_ADDR_VAR 0 5
50904: PUSH
50905: LD_VAR 0 2
50909: PUSH
50910: LD_INT 1
50912: ARRAY
50913: ST_TO_ADDR
// if result > 1 then
50914: LD_VAR 0 2
50918: PUSH
50919: LD_INT 1
50921: GREATER
50922: IFFALSE 51034
// begin for i = 2 to result do
50924: LD_ADDR_VAR 0 3
50928: PUSH
50929: DOUBLE
50930: LD_INT 2
50932: DEC
50933: ST_TO_ADDR
50934: LD_VAR 0 2
50938: PUSH
50939: FOR_TO
50940: IFFALSE 51032
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50942: LD_ADDR_VAR 0 4
50946: PUSH
50947: LD_VAR 0 2
50951: PUSH
50952: LD_VAR 0 3
50956: ARRAY
50957: PPUSH
50958: LD_INT 3
50960: PPUSH
50961: CALL_OW 259
50965: PUSH
50966: LD_VAR 0 2
50970: PUSH
50971: LD_VAR 0 3
50975: ARRAY
50976: PPUSH
50977: CALL_OW 432
50981: MINUS
50982: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50983: LD_VAR 0 4
50987: PUSH
50988: LD_VAR 0 5
50992: PPUSH
50993: LD_INT 3
50995: PPUSH
50996: CALL_OW 259
51000: PUSH
51001: LD_VAR 0 5
51005: PPUSH
51006: CALL_OW 432
51010: MINUS
51011: GREATEREQUAL
51012: IFFALSE 51030
// mech := result [ i ] ;
51014: LD_ADDR_VAR 0 5
51018: PUSH
51019: LD_VAR 0 2
51023: PUSH
51024: LD_VAR 0 3
51028: ARRAY
51029: ST_TO_ADDR
// end ;
51030: GO 50939
51032: POP
51033: POP
// end ; ComLinkTo ( vehicle , mech ) ;
51034: LD_VAR 0 1
51038: PPUSH
51039: LD_VAR 0 5
51043: PPUSH
51044: CALL_OW 135
// end ;
51048: LD_VAR 0 2
51052: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
51053: LD_INT 0
51055: PPUSH
51056: PPUSH
51057: PPUSH
51058: PPUSH
51059: PPUSH
51060: PPUSH
51061: PPUSH
51062: PPUSH
51063: PPUSH
51064: PPUSH
51065: PPUSH
51066: PPUSH
51067: PPUSH
// result := [ ] ;
51068: LD_ADDR_VAR 0 7
51072: PUSH
51073: EMPTY
51074: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
51075: LD_VAR 0 1
51079: PPUSH
51080: CALL_OW 266
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: IN
51095: NOT
51096: IFFALSE 51100
// exit ;
51098: GO 52740
// if name then
51100: LD_VAR 0 3
51104: IFFALSE 51120
// SetBName ( base_dep , name ) ;
51106: LD_VAR 0 1
51110: PPUSH
51111: LD_VAR 0 3
51115: PPUSH
51116: CALL_OW 500
// base := GetBase ( base_dep ) ;
51120: LD_ADDR_VAR 0 15
51124: PUSH
51125: LD_VAR 0 1
51129: PPUSH
51130: CALL_OW 274
51134: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
51135: LD_ADDR_VAR 0 16
51139: PUSH
51140: LD_VAR 0 1
51144: PPUSH
51145: CALL_OW 255
51149: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
51150: LD_ADDR_VAR 0 17
51154: PUSH
51155: LD_VAR 0 1
51159: PPUSH
51160: CALL_OW 248
51164: ST_TO_ADDR
// if sources then
51165: LD_VAR 0 5
51169: IFFALSE 51216
// for i = 1 to 3 do
51171: LD_ADDR_VAR 0 8
51175: PUSH
51176: DOUBLE
51177: LD_INT 1
51179: DEC
51180: ST_TO_ADDR
51181: LD_INT 3
51183: PUSH
51184: FOR_TO
51185: IFFALSE 51214
// AddResourceType ( base , i , sources [ i ] ) ;
51187: LD_VAR 0 15
51191: PPUSH
51192: LD_VAR 0 8
51196: PPUSH
51197: LD_VAR 0 5
51201: PUSH
51202: LD_VAR 0 8
51206: ARRAY
51207: PPUSH
51208: CALL_OW 276
51212: GO 51184
51214: POP
51215: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
51216: LD_ADDR_VAR 0 18
51220: PUSH
51221: LD_VAR 0 15
51225: PPUSH
51226: LD_VAR 0 2
51230: PPUSH
51231: LD_INT 1
51233: PPUSH
51234: CALL 50475 0 3
51238: ST_TO_ADDR
// InitHc ;
51239: CALL_OW 19
// InitUc ;
51243: CALL_OW 18
// uc_side := side ;
51247: LD_ADDR_OWVAR 20
51251: PUSH
51252: LD_VAR 0 16
51256: ST_TO_ADDR
// uc_nation := nation ;
51257: LD_ADDR_OWVAR 21
51261: PUSH
51262: LD_VAR 0 17
51266: ST_TO_ADDR
// if buildings then
51267: LD_VAR 0 18
51271: IFFALSE 52599
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
51273: LD_ADDR_VAR 0 19
51277: PUSH
51278: LD_VAR 0 18
51282: PPUSH
51283: LD_INT 2
51285: PUSH
51286: LD_INT 30
51288: PUSH
51289: LD_INT 29
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 30
51298: PUSH
51299: LD_INT 30
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: LIST
51310: PPUSH
51311: CALL_OW 72
51315: ST_TO_ADDR
// if tmp then
51316: LD_VAR 0 19
51320: IFFALSE 51368
// for i in tmp do
51322: LD_ADDR_VAR 0 8
51326: PUSH
51327: LD_VAR 0 19
51331: PUSH
51332: FOR_IN
51333: IFFALSE 51366
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
51335: LD_VAR 0 8
51339: PPUSH
51340: CALL_OW 250
51344: PPUSH
51345: LD_VAR 0 8
51349: PPUSH
51350: CALL_OW 251
51354: PPUSH
51355: LD_VAR 0 16
51359: PPUSH
51360: CALL_OW 441
51364: GO 51332
51366: POP
51367: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
51368: LD_VAR 0 18
51372: PPUSH
51373: LD_INT 2
51375: PUSH
51376: LD_INT 30
51378: PUSH
51379: LD_INT 32
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 30
51388: PUSH
51389: LD_INT 33
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: LIST
51400: PPUSH
51401: CALL_OW 72
51405: IFFALSE 51493
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
51407: LD_ADDR_VAR 0 8
51411: PUSH
51412: LD_VAR 0 18
51416: PPUSH
51417: LD_INT 2
51419: PUSH
51420: LD_INT 30
51422: PUSH
51423: LD_INT 32
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 30
51432: PUSH
51433: LD_INT 33
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: LIST
51444: PPUSH
51445: CALL_OW 72
51449: PUSH
51450: FOR_IN
51451: IFFALSE 51491
// begin if not GetBWeapon ( i ) then
51453: LD_VAR 0 8
51457: PPUSH
51458: CALL_OW 269
51462: NOT
51463: IFFALSE 51489
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
51465: LD_VAR 0 8
51469: PPUSH
51470: LD_VAR 0 8
51474: PPUSH
51475: LD_VAR 0 2
51479: PPUSH
51480: CALL 52745 0 2
51484: PPUSH
51485: CALL_OW 431
// end ;
51489: GO 51450
51491: POP
51492: POP
// end ; for i = 1 to personel do
51493: LD_ADDR_VAR 0 8
51497: PUSH
51498: DOUBLE
51499: LD_INT 1
51501: DEC
51502: ST_TO_ADDR
51503: LD_VAR 0 6
51507: PUSH
51508: FOR_TO
51509: IFFALSE 52579
// begin if i > 4 then
51511: LD_VAR 0 8
51515: PUSH
51516: LD_INT 4
51518: GREATER
51519: IFFALSE 51523
// break ;
51521: GO 52579
// case i of 1 :
51523: LD_VAR 0 8
51527: PUSH
51528: LD_INT 1
51530: DOUBLE
51531: EQUAL
51532: IFTRUE 51536
51534: GO 51616
51536: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51537: LD_ADDR_VAR 0 12
51541: PUSH
51542: LD_VAR 0 18
51546: PPUSH
51547: LD_INT 22
51549: PUSH
51550: LD_VAR 0 16
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 58
51561: PUSH
51562: EMPTY
51563: LIST
51564: PUSH
51565: LD_INT 2
51567: PUSH
51568: LD_INT 30
51570: PUSH
51571: LD_INT 32
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 30
51580: PUSH
51581: LD_INT 4
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 30
51590: PUSH
51591: LD_INT 5
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: LIST
51608: PPUSH
51609: CALL_OW 72
51613: ST_TO_ADDR
51614: GO 51838
51616: LD_INT 2
51618: DOUBLE
51619: EQUAL
51620: IFTRUE 51624
51622: GO 51686
51624: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51625: LD_ADDR_VAR 0 12
51629: PUSH
51630: LD_VAR 0 18
51634: PPUSH
51635: LD_INT 22
51637: PUSH
51638: LD_VAR 0 16
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: PUSH
51650: LD_INT 30
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 30
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: LIST
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PPUSH
51679: CALL_OW 72
51683: ST_TO_ADDR
51684: GO 51838
51686: LD_INT 3
51688: DOUBLE
51689: EQUAL
51690: IFTRUE 51694
51692: GO 51756
51694: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51695: LD_ADDR_VAR 0 12
51699: PUSH
51700: LD_VAR 0 18
51704: PPUSH
51705: LD_INT 22
51707: PUSH
51708: LD_VAR 0 16
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 2
51719: PUSH
51720: LD_INT 30
51722: PUSH
51723: LD_INT 2
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 30
51732: PUSH
51733: LD_INT 3
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: LIST
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PPUSH
51749: CALL_OW 72
51753: ST_TO_ADDR
51754: GO 51838
51756: LD_INT 4
51758: DOUBLE
51759: EQUAL
51760: IFTRUE 51764
51762: GO 51837
51764: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51765: LD_ADDR_VAR 0 12
51769: PUSH
51770: LD_VAR 0 18
51774: PPUSH
51775: LD_INT 22
51777: PUSH
51778: LD_VAR 0 16
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 2
51789: PUSH
51790: LD_INT 30
51792: PUSH
51793: LD_INT 6
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 30
51802: PUSH
51803: LD_INT 7
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 30
51812: PUSH
51813: LD_INT 8
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PPUSH
51830: CALL_OW 72
51834: ST_TO_ADDR
51835: GO 51838
51837: POP
// if i = 1 then
51838: LD_VAR 0 8
51842: PUSH
51843: LD_INT 1
51845: EQUAL
51846: IFFALSE 51957
// begin tmp := [ ] ;
51848: LD_ADDR_VAR 0 19
51852: PUSH
51853: EMPTY
51854: ST_TO_ADDR
// for j in f do
51855: LD_ADDR_VAR 0 9
51859: PUSH
51860: LD_VAR 0 12
51864: PUSH
51865: FOR_IN
51866: IFFALSE 51939
// if GetBType ( j ) = b_bunker then
51868: LD_VAR 0 9
51872: PPUSH
51873: CALL_OW 266
51877: PUSH
51878: LD_INT 32
51880: EQUAL
51881: IFFALSE 51908
// tmp := Insert ( tmp , 1 , j ) else
51883: LD_ADDR_VAR 0 19
51887: PUSH
51888: LD_VAR 0 19
51892: PPUSH
51893: LD_INT 1
51895: PPUSH
51896: LD_VAR 0 9
51900: PPUSH
51901: CALL_OW 2
51905: ST_TO_ADDR
51906: GO 51937
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51908: LD_ADDR_VAR 0 19
51912: PUSH
51913: LD_VAR 0 19
51917: PPUSH
51918: LD_VAR 0 19
51922: PUSH
51923: LD_INT 1
51925: PLUS
51926: PPUSH
51927: LD_VAR 0 9
51931: PPUSH
51932: CALL_OW 2
51936: ST_TO_ADDR
51937: GO 51865
51939: POP
51940: POP
// if tmp then
51941: LD_VAR 0 19
51945: IFFALSE 51957
// f := tmp ;
51947: LD_ADDR_VAR 0 12
51951: PUSH
51952: LD_VAR 0 19
51956: ST_TO_ADDR
// end ; x := personel [ i ] ;
51957: LD_ADDR_VAR 0 13
51961: PUSH
51962: LD_VAR 0 6
51966: PUSH
51967: LD_VAR 0 8
51971: ARRAY
51972: ST_TO_ADDR
// if x = - 1 then
51973: LD_VAR 0 13
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: EQUAL
51982: IFFALSE 52193
// begin for j in f do
51984: LD_ADDR_VAR 0 9
51988: PUSH
51989: LD_VAR 0 12
51993: PUSH
51994: FOR_IN
51995: IFFALSE 52189
// repeat InitHc ;
51997: CALL_OW 19
// if GetBType ( j ) = b_barracks then
52001: LD_VAR 0 9
52005: PPUSH
52006: CALL_OW 266
52010: PUSH
52011: LD_INT 5
52013: EQUAL
52014: IFFALSE 52084
// begin if UnitsInside ( j ) < 3 then
52016: LD_VAR 0 9
52020: PPUSH
52021: CALL_OW 313
52025: PUSH
52026: LD_INT 3
52028: LESS
52029: IFFALSE 52065
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52031: LD_INT 0
52033: PPUSH
52034: LD_INT 5
52036: PUSH
52037: LD_INT 8
52039: PUSH
52040: LD_INT 9
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: LIST
52047: PUSH
52048: LD_VAR 0 17
52052: ARRAY
52053: PPUSH
52054: LD_VAR 0 4
52058: PPUSH
52059: CALL_OW 380
52063: GO 52082
// PrepareHuman ( false , i , skill ) ;
52065: LD_INT 0
52067: PPUSH
52068: LD_VAR 0 8
52072: PPUSH
52073: LD_VAR 0 4
52077: PPUSH
52078: CALL_OW 380
// end else
52082: GO 52101
// PrepareHuman ( false , i , skill ) ;
52084: LD_INT 0
52086: PPUSH
52087: LD_VAR 0 8
52091: PPUSH
52092: LD_VAR 0 4
52096: PPUSH
52097: CALL_OW 380
// un := CreateHuman ;
52101: LD_ADDR_VAR 0 14
52105: PUSH
52106: CALL_OW 44
52110: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52111: LD_ADDR_VAR 0 7
52115: PUSH
52116: LD_VAR 0 7
52120: PPUSH
52121: LD_INT 1
52123: PPUSH
52124: LD_VAR 0 14
52128: PPUSH
52129: CALL_OW 2
52133: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
52134: LD_VAR 0 14
52138: PPUSH
52139: LD_VAR 0 9
52143: PPUSH
52144: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
52148: LD_VAR 0 9
52152: PPUSH
52153: CALL_OW 313
52157: PUSH
52158: LD_INT 6
52160: EQUAL
52161: IFTRUE 52185
52163: PUSH
52164: LD_VAR 0 9
52168: PPUSH
52169: CALL_OW 266
52173: PUSH
52174: LD_INT 32
52176: PUSH
52177: LD_INT 31
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: IN
52184: OR
52185: IFFALSE 51997
52187: GO 51994
52189: POP
52190: POP
// end else
52191: GO 52577
// for j = 1 to x do
52193: LD_ADDR_VAR 0 9
52197: PUSH
52198: DOUBLE
52199: LD_INT 1
52201: DEC
52202: ST_TO_ADDR
52203: LD_VAR 0 13
52207: PUSH
52208: FOR_TO
52209: IFFALSE 52575
// begin InitHc ;
52211: CALL_OW 19
// if not f then
52215: LD_VAR 0 12
52219: NOT
52220: IFFALSE 52309
// begin PrepareHuman ( false , i , skill ) ;
52222: LD_INT 0
52224: PPUSH
52225: LD_VAR 0 8
52229: PPUSH
52230: LD_VAR 0 4
52234: PPUSH
52235: CALL_OW 380
// un := CreateHuman ;
52239: LD_ADDR_VAR 0 14
52243: PUSH
52244: CALL_OW 44
52248: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52249: LD_ADDR_VAR 0 7
52253: PUSH
52254: LD_VAR 0 7
52258: PPUSH
52259: LD_INT 1
52261: PPUSH
52262: LD_VAR 0 14
52266: PPUSH
52267: CALL_OW 2
52271: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52272: LD_VAR 0 14
52276: PPUSH
52277: LD_VAR 0 1
52281: PPUSH
52282: CALL_OW 250
52286: PPUSH
52287: LD_VAR 0 1
52291: PPUSH
52292: CALL_OW 251
52296: PPUSH
52297: LD_INT 10
52299: PPUSH
52300: LD_INT 0
52302: PPUSH
52303: CALL_OW 50
// continue ;
52307: GO 52208
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
52309: LD_VAR 0 12
52313: PUSH
52314: LD_INT 1
52316: ARRAY
52317: PPUSH
52318: CALL_OW 313
52322: IFFALSE 52350
52324: PUSH
52325: LD_VAR 0 12
52329: PUSH
52330: LD_INT 1
52332: ARRAY
52333: PPUSH
52334: CALL_OW 266
52338: PUSH
52339: LD_INT 32
52341: PUSH
52342: LD_INT 31
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: IN
52349: AND
52350: IFTRUE 52371
52352: PUSH
52353: LD_VAR 0 12
52357: PUSH
52358: LD_INT 1
52360: ARRAY
52361: PPUSH
52362: CALL_OW 313
52366: PUSH
52367: LD_INT 6
52369: EQUAL
52370: OR
52371: IFFALSE 52391
// f := Delete ( f , 1 ) ;
52373: LD_ADDR_VAR 0 12
52377: PUSH
52378: LD_VAR 0 12
52382: PPUSH
52383: LD_INT 1
52385: PPUSH
52386: CALL_OW 3
52390: ST_TO_ADDR
// if not f then
52391: LD_VAR 0 12
52395: NOT
52396: IFFALSE 52414
// begin x := x + 2 ;
52398: LD_ADDR_VAR 0 13
52402: PUSH
52403: LD_VAR 0 13
52407: PUSH
52408: LD_INT 2
52410: PLUS
52411: ST_TO_ADDR
// continue ;
52412: GO 52208
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
52414: LD_VAR 0 12
52418: PUSH
52419: LD_INT 1
52421: ARRAY
52422: PPUSH
52423: CALL_OW 266
52427: PUSH
52428: LD_INT 5
52430: EQUAL
52431: IFFALSE 52505
// begin if UnitsInside ( f [ 1 ] ) < 3 then
52433: LD_VAR 0 12
52437: PUSH
52438: LD_INT 1
52440: ARRAY
52441: PPUSH
52442: CALL_OW 313
52446: PUSH
52447: LD_INT 3
52449: LESS
52450: IFFALSE 52486
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52452: LD_INT 0
52454: PPUSH
52455: LD_INT 5
52457: PUSH
52458: LD_INT 8
52460: PUSH
52461: LD_INT 9
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: LIST
52468: PUSH
52469: LD_VAR 0 17
52473: ARRAY
52474: PPUSH
52475: LD_VAR 0 4
52479: PPUSH
52480: CALL_OW 380
52484: GO 52503
// PrepareHuman ( false , i , skill ) ;
52486: LD_INT 0
52488: PPUSH
52489: LD_VAR 0 8
52493: PPUSH
52494: LD_VAR 0 4
52498: PPUSH
52499: CALL_OW 380
// end else
52503: GO 52522
// PrepareHuman ( false , i , skill ) ;
52505: LD_INT 0
52507: PPUSH
52508: LD_VAR 0 8
52512: PPUSH
52513: LD_VAR 0 4
52517: PPUSH
52518: CALL_OW 380
// un := CreateHuman ;
52522: LD_ADDR_VAR 0 14
52526: PUSH
52527: CALL_OW 44
52531: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52532: LD_ADDR_VAR 0 7
52536: PUSH
52537: LD_VAR 0 7
52541: PPUSH
52542: LD_INT 1
52544: PPUSH
52545: LD_VAR 0 14
52549: PPUSH
52550: CALL_OW 2
52554: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52555: LD_VAR 0 14
52559: PPUSH
52560: LD_VAR 0 12
52564: PUSH
52565: LD_INT 1
52567: ARRAY
52568: PPUSH
52569: CALL_OW 52
// end ;
52573: GO 52208
52575: POP
52576: POP
// end ;
52577: GO 51508
52579: POP
52580: POP
// result := result ^ buildings ;
52581: LD_ADDR_VAR 0 7
52585: PUSH
52586: LD_VAR 0 7
52590: PUSH
52591: LD_VAR 0 18
52595: ADD
52596: ST_TO_ADDR
// end else
52597: GO 52740
// begin for i = 1 to personel do
52599: LD_ADDR_VAR 0 8
52603: PUSH
52604: DOUBLE
52605: LD_INT 1
52607: DEC
52608: ST_TO_ADDR
52609: LD_VAR 0 6
52613: PUSH
52614: FOR_TO
52615: IFFALSE 52738
// begin if i > 4 then
52617: LD_VAR 0 8
52621: PUSH
52622: LD_INT 4
52624: GREATER
52625: IFFALSE 52629
// break ;
52627: GO 52738
// x := personel [ i ] ;
52629: LD_ADDR_VAR 0 13
52633: PUSH
52634: LD_VAR 0 6
52638: PUSH
52639: LD_VAR 0 8
52643: ARRAY
52644: ST_TO_ADDR
// if x = - 1 then
52645: LD_VAR 0 13
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: EQUAL
52654: IFFALSE 52658
// continue ;
52656: GO 52614
// PrepareHuman ( false , i , skill ) ;
52658: LD_INT 0
52660: PPUSH
52661: LD_VAR 0 8
52665: PPUSH
52666: LD_VAR 0 4
52670: PPUSH
52671: CALL_OW 380
// un := CreateHuman ;
52675: LD_ADDR_VAR 0 14
52679: PUSH
52680: CALL_OW 44
52684: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52685: LD_VAR 0 14
52689: PPUSH
52690: LD_VAR 0 1
52694: PPUSH
52695: CALL_OW 250
52699: PPUSH
52700: LD_VAR 0 1
52704: PPUSH
52705: CALL_OW 251
52709: PPUSH
52710: LD_INT 10
52712: PPUSH
52713: LD_INT 0
52715: PPUSH
52716: CALL_OW 50
// result := result ^ un ;
52720: LD_ADDR_VAR 0 7
52724: PUSH
52725: LD_VAR 0 7
52729: PUSH
52730: LD_VAR 0 14
52734: ADD
52735: ST_TO_ADDR
// end ;
52736: GO 52614
52738: POP
52739: POP
// end ; end ;
52740: LD_VAR 0 7
52744: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52745: LD_INT 0
52747: PPUSH
52748: PPUSH
52749: PPUSH
52750: PPUSH
52751: PPUSH
52752: PPUSH
52753: PPUSH
52754: PPUSH
52755: PPUSH
52756: PPUSH
52757: PPUSH
52758: PPUSH
52759: PPUSH
52760: PPUSH
52761: PPUSH
52762: PPUSH
// result := false ;
52763: LD_ADDR_VAR 0 3
52767: PUSH
52768: LD_INT 0
52770: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52771: LD_VAR 0 1
52775: NOT
52776: IFTRUE 52801
52778: PUSH
52779: LD_VAR 0 1
52783: PPUSH
52784: CALL_OW 266
52788: PUSH
52789: LD_INT 32
52791: PUSH
52792: LD_INT 33
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: IN
52799: NOT
52800: OR
52801: IFFALSE 52805
// exit ;
52803: GO 53940
// nat := GetNation ( tower ) ;
52805: LD_ADDR_VAR 0 12
52809: PUSH
52810: LD_VAR 0 1
52814: PPUSH
52815: CALL_OW 248
52819: ST_TO_ADDR
// side := GetSide ( tower ) ;
52820: LD_ADDR_VAR 0 16
52824: PUSH
52825: LD_VAR 0 1
52829: PPUSH
52830: CALL_OW 255
52834: ST_TO_ADDR
// x := GetX ( tower ) ;
52835: LD_ADDR_VAR 0 10
52839: PUSH
52840: LD_VAR 0 1
52844: PPUSH
52845: CALL_OW 250
52849: ST_TO_ADDR
// y := GetY ( tower ) ;
52850: LD_ADDR_VAR 0 11
52854: PUSH
52855: LD_VAR 0 1
52859: PPUSH
52860: CALL_OW 251
52864: ST_TO_ADDR
// if not x or not y then
52865: LD_VAR 0 10
52869: NOT
52870: IFTRUE 52879
52872: PUSH
52873: LD_VAR 0 11
52877: NOT
52878: OR
52879: IFFALSE 52883
// exit ;
52881: GO 53940
// weapon := 0 ;
52883: LD_ADDR_VAR 0 18
52887: PUSH
52888: LD_INT 0
52890: ST_TO_ADDR
// fac_list := [ ] ;
52891: LD_ADDR_VAR 0 17
52895: PUSH
52896: EMPTY
52897: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52898: LD_ADDR_VAR 0 6
52902: PUSH
52903: LD_VAR 0 1
52907: PPUSH
52908: CALL_OW 274
52912: PPUSH
52913: LD_VAR 0 2
52917: PPUSH
52918: LD_INT 0
52920: PPUSH
52921: CALL 50475 0 3
52925: PPUSH
52926: LD_INT 30
52928: PUSH
52929: LD_INT 3
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PPUSH
52936: CALL_OW 72
52940: ST_TO_ADDR
// if not factories then
52941: LD_VAR 0 6
52945: NOT
52946: IFFALSE 52950
// exit ;
52948: GO 53940
// for i in factories do
52950: LD_ADDR_VAR 0 8
52954: PUSH
52955: LD_VAR 0 6
52959: PUSH
52960: FOR_IN
52961: IFFALSE 52986
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52963: LD_ADDR_VAR 0 17
52967: PUSH
52968: LD_VAR 0 17
52972: PUSH
52973: LD_VAR 0 8
52977: PPUSH
52978: CALL_OW 478
52982: UNION
52983: ST_TO_ADDR
52984: GO 52960
52986: POP
52987: POP
// if not fac_list then
52988: LD_VAR 0 17
52992: NOT
52993: IFFALSE 52997
// exit ;
52995: GO 53940
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52997: LD_ADDR_VAR 0 5
53001: PUSH
53002: LD_INT 4
53004: PUSH
53005: LD_INT 5
53007: PUSH
53008: LD_INT 9
53010: PUSH
53011: LD_INT 10
53013: PUSH
53014: LD_INT 6
53016: PUSH
53017: LD_INT 7
53019: PUSH
53020: LD_INT 11
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 27
53034: PUSH
53035: LD_INT 28
53037: PUSH
53038: LD_INT 26
53040: PUSH
53041: LD_INT 30
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 43
53052: PUSH
53053: LD_INT 44
53055: PUSH
53056: LD_INT 46
53058: PUSH
53059: LD_INT 45
53061: PUSH
53062: LD_INT 47
53064: PUSH
53065: LD_INT 49
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: LIST
53080: PUSH
53081: LD_VAR 0 12
53085: ARRAY
53086: ST_TO_ADDR
// list := list isect fac_list ;
53087: LD_ADDR_VAR 0 5
53091: PUSH
53092: LD_VAR 0 5
53096: PUSH
53097: LD_VAR 0 17
53101: ISECT
53102: ST_TO_ADDR
// if not list then
53103: LD_VAR 0 5
53107: NOT
53108: IFFALSE 53112
// exit ;
53110: GO 53940
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
53112: LD_VAR 0 12
53116: PUSH
53117: LD_INT 3
53119: EQUAL
53120: IFFALSE 53132
53122: PUSH
53123: LD_INT 49
53125: PUSH
53126: LD_VAR 0 5
53130: IN
53131: AND
53132: IFFALSE 53152
53134: PUSH
53135: LD_INT 31
53137: PPUSH
53138: LD_VAR 0 16
53142: PPUSH
53143: CALL_OW 321
53147: PUSH
53148: LD_INT 2
53150: EQUAL
53151: AND
53152: IFFALSE 53212
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
53154: LD_INT 22
53156: PUSH
53157: LD_VAR 0 16
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 35
53168: PUSH
53169: LD_INT 49
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 91
53178: PUSH
53179: LD_VAR 0 1
53183: PUSH
53184: LD_INT 10
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: LIST
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: LIST
53196: PPUSH
53197: CALL_OW 69
53201: NOT
53202: IFFALSE 53212
// weapon := ru_time_lapser ;
53204: LD_ADDR_VAR 0 18
53208: PUSH
53209: LD_INT 49
53211: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
53212: LD_VAR 0 12
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: LD_INT 2
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: IN
53227: IFFALSE 53251
53229: PUSH
53230: LD_INT 11
53232: PUSH
53233: LD_VAR 0 5
53237: IN
53238: IFTRUE 53250
53240: PUSH
53241: LD_INT 30
53243: PUSH
53244: LD_VAR 0 5
53248: IN
53249: OR
53250: AND
53251: IFFALSE 53271
53253: PUSH
53254: LD_INT 6
53256: PPUSH
53257: LD_VAR 0 16
53261: PPUSH
53262: CALL_OW 321
53266: PUSH
53267: LD_INT 2
53269: EQUAL
53270: AND
53271: IFFALSE 53438
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
53273: LD_INT 22
53275: PUSH
53276: LD_VAR 0 16
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 2
53287: PUSH
53288: LD_INT 35
53290: PUSH
53291: LD_INT 11
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 35
53300: PUSH
53301: LD_INT 30
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 91
53315: PUSH
53316: LD_VAR 0 1
53320: PUSH
53321: LD_INT 18
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: LIST
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: LIST
53333: PPUSH
53334: CALL_OW 69
53338: NOT
53339: IFFALSE 53415
53341: PUSH
53342: LD_INT 22
53344: PUSH
53345: LD_VAR 0 16
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 2
53356: PUSH
53357: LD_INT 30
53359: PUSH
53360: LD_INT 32
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 30
53369: PUSH
53370: LD_INT 33
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 91
53384: PUSH
53385: LD_VAR 0 1
53389: PUSH
53390: LD_INT 12
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: LIST
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: LIST
53402: PUSH
53403: EMPTY
53404: LIST
53405: PPUSH
53406: CALL_OW 69
53410: PUSH
53411: LD_INT 2
53413: GREATER
53414: AND
53415: IFFALSE 53438
// weapon := [ us_radar , ar_radar ] [ nat ] ;
53417: LD_ADDR_VAR 0 18
53421: PUSH
53422: LD_INT 11
53424: PUSH
53425: LD_INT 30
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_VAR 0 12
53436: ARRAY
53437: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
53438: LD_VAR 0 18
53442: NOT
53443: IFFALSE 53463
53445: PUSH
53446: LD_INT 40
53448: PPUSH
53449: LD_VAR 0 16
53453: PPUSH
53454: CALL_OW 321
53458: PUSH
53459: LD_INT 2
53461: EQUAL
53462: AND
53463: IFFALSE 53499
53465: PUSH
53466: LD_INT 7
53468: PUSH
53469: LD_VAR 0 5
53473: IN
53474: IFTRUE 53486
53476: PUSH
53477: LD_INT 28
53479: PUSH
53480: LD_VAR 0 5
53484: IN
53485: OR
53486: IFTRUE 53498
53488: PUSH
53489: LD_INT 45
53491: PUSH
53492: LD_VAR 0 5
53496: IN
53497: OR
53498: AND
53499: IFFALSE 53753
// begin hex := GetHexInfo ( x , y ) ;
53501: LD_ADDR_VAR 0 4
53505: PUSH
53506: LD_VAR 0 10
53510: PPUSH
53511: LD_VAR 0 11
53515: PPUSH
53516: CALL_OW 546
53520: ST_TO_ADDR
// if hex [ 1 ] then
53521: LD_VAR 0 4
53525: PUSH
53526: LD_INT 1
53528: ARRAY
53529: IFFALSE 53533
// exit ;
53531: GO 53940
// height := hex [ 2 ] ;
53533: LD_ADDR_VAR 0 15
53537: PUSH
53538: LD_VAR 0 4
53542: PUSH
53543: LD_INT 2
53545: ARRAY
53546: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
53547: LD_ADDR_VAR 0 14
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: LD_INT 3
53560: PUSH
53561: LD_INT 5
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: ST_TO_ADDR
// for i in tmp do
53570: LD_ADDR_VAR 0 8
53574: PUSH
53575: LD_VAR 0 14
53579: PUSH
53580: FOR_IN
53581: IFFALSE 53751
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53583: LD_ADDR_VAR 0 9
53587: PUSH
53588: LD_VAR 0 10
53592: PPUSH
53593: LD_VAR 0 8
53597: PPUSH
53598: LD_INT 5
53600: PPUSH
53601: CALL_OW 272
53605: PUSH
53606: LD_VAR 0 11
53610: PPUSH
53611: LD_VAR 0 8
53615: PPUSH
53616: LD_INT 5
53618: PPUSH
53619: CALL_OW 273
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53628: LD_VAR 0 9
53632: PUSH
53633: LD_INT 1
53635: ARRAY
53636: PPUSH
53637: LD_VAR 0 9
53641: PUSH
53642: LD_INT 2
53644: ARRAY
53645: PPUSH
53646: CALL_OW 488
53650: IFFALSE 53749
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
53652: LD_ADDR_VAR 0 4
53656: PUSH
53657: LD_VAR 0 9
53661: PUSH
53662: LD_INT 1
53664: ARRAY
53665: PPUSH
53666: LD_VAR 0 9
53670: PUSH
53671: LD_INT 2
53673: ARRAY
53674: PPUSH
53675: CALL_OW 546
53679: ST_TO_ADDR
// if hex [ 1 ] then
53680: LD_VAR 0 4
53684: PUSH
53685: LD_INT 1
53687: ARRAY
53688: IFFALSE 53692
// continue ;
53690: GO 53580
// h := hex [ 2 ] ;
53692: LD_ADDR_VAR 0 13
53696: PUSH
53697: LD_VAR 0 4
53701: PUSH
53702: LD_INT 2
53704: ARRAY
53705: ST_TO_ADDR
// if h + 7 < height then
53706: LD_VAR 0 13
53710: PUSH
53711: LD_INT 7
53713: PLUS
53714: PUSH
53715: LD_VAR 0 15
53719: LESS
53720: IFFALSE 53749
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53722: LD_ADDR_VAR 0 18
53726: PUSH
53727: LD_INT 7
53729: PUSH
53730: LD_INT 28
53732: PUSH
53733: LD_INT 45
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: LIST
53740: PUSH
53741: LD_VAR 0 12
53745: ARRAY
53746: ST_TO_ADDR
// break ;
53747: GO 53751
// end ; end ; end ;
53749: GO 53580
53751: POP
53752: POP
// end ; if not weapon then
53753: LD_VAR 0 18
53757: NOT
53758: IFFALSE 53818
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53760: LD_ADDR_VAR 0 5
53764: PUSH
53765: LD_VAR 0 5
53769: PUSH
53770: LD_INT 11
53772: PUSH
53773: LD_INT 30
53775: PUSH
53776: LD_INT 49
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: LIST
53783: DIFF
53784: ST_TO_ADDR
// if not list then
53785: LD_VAR 0 5
53789: NOT
53790: IFFALSE 53794
// exit ;
53792: GO 53940
// weapon := list [ rand ( 1 , list ) ] ;
53794: LD_ADDR_VAR 0 18
53798: PUSH
53799: LD_VAR 0 5
53803: PUSH
53804: LD_INT 1
53806: PPUSH
53807: LD_VAR 0 5
53811: PPUSH
53812: CALL_OW 12
53816: ARRAY
53817: ST_TO_ADDR
// end ; if weapon then
53818: LD_VAR 0 18
53822: IFFALSE 53940
// begin tmp := CostOfWeapon ( weapon ) ;
53824: LD_ADDR_VAR 0 14
53828: PUSH
53829: LD_VAR 0 18
53833: PPUSH
53834: CALL_OW 451
53838: ST_TO_ADDR
// j := GetBase ( tower ) ;
53839: LD_ADDR_VAR 0 9
53843: PUSH
53844: LD_VAR 0 1
53848: PPUSH
53849: CALL_OW 274
53853: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53854: LD_VAR 0 9
53858: PPUSH
53859: LD_INT 1
53861: PPUSH
53862: CALL_OW 275
53866: PUSH
53867: LD_VAR 0 14
53871: PUSH
53872: LD_INT 1
53874: ARRAY
53875: GREATEREQUAL
53876: IFFALSE 53902
53878: PUSH
53879: LD_VAR 0 9
53883: PPUSH
53884: LD_INT 2
53886: PPUSH
53887: CALL_OW 275
53891: PUSH
53892: LD_VAR 0 14
53896: PUSH
53897: LD_INT 2
53899: ARRAY
53900: GREATEREQUAL
53901: AND
53902: IFFALSE 53928
53904: PUSH
53905: LD_VAR 0 9
53909: PPUSH
53910: LD_INT 3
53912: PPUSH
53913: CALL_OW 275
53917: PUSH
53918: LD_VAR 0 14
53922: PUSH
53923: LD_INT 3
53925: ARRAY
53926: GREATEREQUAL
53927: AND
53928: IFFALSE 53940
// result := weapon ;
53930: LD_ADDR_VAR 0 3
53934: PUSH
53935: LD_VAR 0 18
53939: ST_TO_ADDR
// end ; end ;
53940: LD_VAR 0 3
53944: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53945: LD_INT 0
53947: PPUSH
53948: PPUSH
// result := true ;
53949: LD_ADDR_VAR 0 3
53953: PUSH
53954: LD_INT 1
53956: ST_TO_ADDR
// if array1 = array2 then
53957: LD_VAR 0 1
53961: PUSH
53962: LD_VAR 0 2
53966: EQUAL
53967: IFFALSE 54027
// begin for i = 1 to array1 do
53969: LD_ADDR_VAR 0 4
53973: PUSH
53974: DOUBLE
53975: LD_INT 1
53977: DEC
53978: ST_TO_ADDR
53979: LD_VAR 0 1
53983: PUSH
53984: FOR_TO
53985: IFFALSE 54023
// if array1 [ i ] <> array2 [ i ] then
53987: LD_VAR 0 1
53991: PUSH
53992: LD_VAR 0 4
53996: ARRAY
53997: PUSH
53998: LD_VAR 0 2
54002: PUSH
54003: LD_VAR 0 4
54007: ARRAY
54008: NONEQUAL
54009: IFFALSE 54021
// begin result := false ;
54011: LD_ADDR_VAR 0 3
54015: PUSH
54016: LD_INT 0
54018: ST_TO_ADDR
// break ;
54019: GO 54023
// end ;
54021: GO 53984
54023: POP
54024: POP
// end else
54025: GO 54035
// result := false ;
54027: LD_ADDR_VAR 0 3
54031: PUSH
54032: LD_INT 0
54034: ST_TO_ADDR
// end ;
54035: LD_VAR 0 3
54039: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
54040: LD_INT 0
54042: PPUSH
54043: PPUSH
// if not array1 or not array2 then
54044: LD_VAR 0 1
54048: NOT
54049: IFTRUE 54058
54051: PUSH
54052: LD_VAR 0 2
54056: NOT
54057: OR
54058: IFFALSE 54062
// exit ;
54060: GO 54126
// result := true ;
54062: LD_ADDR_VAR 0 3
54066: PUSH
54067: LD_INT 1
54069: ST_TO_ADDR
// for i = 1 to array1 do
54070: LD_ADDR_VAR 0 4
54074: PUSH
54075: DOUBLE
54076: LD_INT 1
54078: DEC
54079: ST_TO_ADDR
54080: LD_VAR 0 1
54084: PUSH
54085: FOR_TO
54086: IFFALSE 54124
// if array1 [ i ] <> array2 [ i ] then
54088: LD_VAR 0 1
54092: PUSH
54093: LD_VAR 0 4
54097: ARRAY
54098: PUSH
54099: LD_VAR 0 2
54103: PUSH
54104: LD_VAR 0 4
54108: ARRAY
54109: NONEQUAL
54110: IFFALSE 54122
// begin result := false ;
54112: LD_ADDR_VAR 0 3
54116: PUSH
54117: LD_INT 0
54119: ST_TO_ADDR
// break ;
54120: GO 54124
// end ;
54122: GO 54085
54124: POP
54125: POP
// end ;
54126: LD_VAR 0 3
54130: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
54131: LD_INT 0
54133: PPUSH
54134: PPUSH
54135: PPUSH
// pom := GetBase ( fac ) ;
54136: LD_ADDR_VAR 0 5
54140: PUSH
54141: LD_VAR 0 1
54145: PPUSH
54146: CALL_OW 274
54150: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
54151: LD_ADDR_VAR 0 4
54155: PUSH
54156: LD_VAR 0 2
54160: PUSH
54161: LD_INT 1
54163: ARRAY
54164: PPUSH
54165: LD_VAR 0 2
54169: PUSH
54170: LD_INT 2
54172: ARRAY
54173: PPUSH
54174: LD_VAR 0 2
54178: PUSH
54179: LD_INT 3
54181: ARRAY
54182: PPUSH
54183: LD_VAR 0 2
54187: PUSH
54188: LD_INT 4
54190: ARRAY
54191: PPUSH
54192: CALL_OW 449
54196: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54197: LD_ADDR_VAR 0 3
54201: PUSH
54202: LD_VAR 0 5
54206: PPUSH
54207: LD_INT 1
54209: PPUSH
54210: CALL_OW 275
54214: PUSH
54215: LD_VAR 0 4
54219: PUSH
54220: LD_INT 1
54222: ARRAY
54223: GREATEREQUAL
54224: IFFALSE 54250
54226: PUSH
54227: LD_VAR 0 5
54231: PPUSH
54232: LD_INT 2
54234: PPUSH
54235: CALL_OW 275
54239: PUSH
54240: LD_VAR 0 4
54244: PUSH
54245: LD_INT 2
54247: ARRAY
54248: GREATEREQUAL
54249: AND
54250: IFFALSE 54276
54252: PUSH
54253: LD_VAR 0 5
54257: PPUSH
54258: LD_INT 3
54260: PPUSH
54261: CALL_OW 275
54265: PUSH
54266: LD_VAR 0 4
54270: PUSH
54271: LD_INT 3
54273: ARRAY
54274: GREATEREQUAL
54275: AND
54276: ST_TO_ADDR
// end ;
54277: LD_VAR 0 3
54281: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
54282: LD_INT 0
54284: PPUSH
54285: PPUSH
54286: PPUSH
54287: PPUSH
// pom := GetBase ( building ) ;
54288: LD_ADDR_VAR 0 3
54292: PUSH
54293: LD_VAR 0 1
54297: PPUSH
54298: CALL_OW 274
54302: ST_TO_ADDR
// if not pom then
54303: LD_VAR 0 3
54307: NOT
54308: IFFALSE 54312
// exit ;
54310: GO 54486
// btype := GetBType ( building ) ;
54312: LD_ADDR_VAR 0 5
54316: PUSH
54317: LD_VAR 0 1
54321: PPUSH
54322: CALL_OW 266
54326: ST_TO_ADDR
// if btype = b_armoury then
54327: LD_VAR 0 5
54331: PUSH
54332: LD_INT 4
54334: EQUAL
54335: IFFALSE 54345
// btype := b_barracks ;
54337: LD_ADDR_VAR 0 5
54341: PUSH
54342: LD_INT 5
54344: ST_TO_ADDR
// if btype = b_depot then
54345: LD_VAR 0 5
54349: PUSH
54350: LD_INT 0
54352: EQUAL
54353: IFFALSE 54363
// btype := b_warehouse ;
54355: LD_ADDR_VAR 0 5
54359: PUSH
54360: LD_INT 1
54362: ST_TO_ADDR
// if btype = b_workshop then
54363: LD_VAR 0 5
54367: PUSH
54368: LD_INT 2
54370: EQUAL
54371: IFFALSE 54381
// btype := b_factory ;
54373: LD_ADDR_VAR 0 5
54377: PUSH
54378: LD_INT 3
54380: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54381: LD_ADDR_VAR 0 4
54385: PUSH
54386: LD_VAR 0 5
54390: PPUSH
54391: LD_VAR 0 1
54395: PPUSH
54396: CALL_OW 248
54400: PPUSH
54401: CALL_OW 450
54405: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54406: LD_ADDR_VAR 0 2
54410: PUSH
54411: LD_VAR 0 3
54415: PPUSH
54416: LD_INT 1
54418: PPUSH
54419: CALL_OW 275
54423: PUSH
54424: LD_VAR 0 4
54428: PUSH
54429: LD_INT 1
54431: ARRAY
54432: GREATEREQUAL
54433: IFFALSE 54459
54435: PUSH
54436: LD_VAR 0 3
54440: PPUSH
54441: LD_INT 2
54443: PPUSH
54444: CALL_OW 275
54448: PUSH
54449: LD_VAR 0 4
54453: PUSH
54454: LD_INT 2
54456: ARRAY
54457: GREATEREQUAL
54458: AND
54459: IFFALSE 54485
54461: PUSH
54462: LD_VAR 0 3
54466: PPUSH
54467: LD_INT 3
54469: PPUSH
54470: CALL_OW 275
54474: PUSH
54475: LD_VAR 0 4
54479: PUSH
54480: LD_INT 3
54482: ARRAY
54483: GREATEREQUAL
54484: AND
54485: ST_TO_ADDR
// end ;
54486: LD_VAR 0 2
54490: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
54491: LD_INT 0
54493: PPUSH
54494: PPUSH
54495: PPUSH
// pom := GetBase ( building ) ;
54496: LD_ADDR_VAR 0 4
54500: PUSH
54501: LD_VAR 0 1
54505: PPUSH
54506: CALL_OW 274
54510: ST_TO_ADDR
// if not pom then
54511: LD_VAR 0 4
54515: NOT
54516: IFFALSE 54520
// exit ;
54518: GO 54625
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54520: LD_ADDR_VAR 0 5
54524: PUSH
54525: LD_VAR 0 2
54529: PPUSH
54530: LD_VAR 0 1
54534: PPUSH
54535: CALL_OW 248
54539: PPUSH
54540: CALL_OW 450
54544: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54545: LD_ADDR_VAR 0 3
54549: PUSH
54550: LD_VAR 0 4
54554: PPUSH
54555: LD_INT 1
54557: PPUSH
54558: CALL_OW 275
54562: PUSH
54563: LD_VAR 0 5
54567: PUSH
54568: LD_INT 1
54570: ARRAY
54571: GREATEREQUAL
54572: IFFALSE 54598
54574: PUSH
54575: LD_VAR 0 4
54579: PPUSH
54580: LD_INT 2
54582: PPUSH
54583: CALL_OW 275
54587: PUSH
54588: LD_VAR 0 5
54592: PUSH
54593: LD_INT 2
54595: ARRAY
54596: GREATEREQUAL
54597: AND
54598: IFFALSE 54624
54600: PUSH
54601: LD_VAR 0 4
54605: PPUSH
54606: LD_INT 3
54608: PPUSH
54609: CALL_OW 275
54613: PUSH
54614: LD_VAR 0 5
54618: PUSH
54619: LD_INT 3
54621: ARRAY
54622: GREATEREQUAL
54623: AND
54624: ST_TO_ADDR
// end ;
54625: LD_VAR 0 3
54629: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
54630: LD_INT 0
54632: PPUSH
54633: PPUSH
54634: PPUSH
54635: PPUSH
54636: PPUSH
54637: PPUSH
54638: PPUSH
54639: PPUSH
54640: PPUSH
54641: PPUSH
54642: PPUSH
// result := false ;
54643: LD_ADDR_VAR 0 8
54647: PUSH
54648: LD_INT 0
54650: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
54651: LD_VAR 0 5
54655: NOT
54656: IFTRUE 54665
54658: PUSH
54659: LD_VAR 0 1
54663: NOT
54664: OR
54665: IFTRUE 54674
54667: PUSH
54668: LD_VAR 0 2
54672: NOT
54673: OR
54674: IFTRUE 54683
54676: PUSH
54677: LD_VAR 0 3
54681: NOT
54682: OR
54683: IFFALSE 54687
// exit ;
54685: GO 55513
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
54687: LD_ADDR_VAR 0 14
54691: PUSH
54692: LD_VAR 0 1
54696: PPUSH
54697: LD_VAR 0 2
54701: PPUSH
54702: LD_VAR 0 3
54706: PPUSH
54707: LD_VAR 0 4
54711: PPUSH
54712: LD_VAR 0 5
54716: PUSH
54717: LD_INT 1
54719: ARRAY
54720: PPUSH
54721: CALL_OW 248
54725: PPUSH
54726: LD_INT 0
54728: PPUSH
54729: CALL 56794 0 6
54733: ST_TO_ADDR
// if not hexes then
54734: LD_VAR 0 14
54738: NOT
54739: IFFALSE 54743
// exit ;
54741: GO 55513
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54743: LD_ADDR_VAR 0 17
54747: PUSH
54748: LD_VAR 0 5
54752: PPUSH
54753: LD_INT 22
54755: PUSH
54756: LD_VAR 0 13
54760: PPUSH
54761: CALL_OW 255
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: LD_INT 30
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 30
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: LIST
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PPUSH
54802: CALL_OW 72
54806: ST_TO_ADDR
// for i = 1 to hexes do
54807: LD_ADDR_VAR 0 9
54811: PUSH
54812: DOUBLE
54813: LD_INT 1
54815: DEC
54816: ST_TO_ADDR
54817: LD_VAR 0 14
54821: PUSH
54822: FOR_TO
54823: IFFALSE 55511
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54825: LD_ADDR_VAR 0 13
54829: PUSH
54830: LD_VAR 0 14
54834: PUSH
54835: LD_VAR 0 9
54839: ARRAY
54840: PUSH
54841: LD_INT 1
54843: ARRAY
54844: PPUSH
54845: LD_VAR 0 14
54849: PUSH
54850: LD_VAR 0 9
54854: ARRAY
54855: PUSH
54856: LD_INT 2
54858: ARRAY
54859: PPUSH
54860: CALL_OW 428
54864: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54865: LD_VAR 0 14
54869: PUSH
54870: LD_VAR 0 9
54874: ARRAY
54875: PUSH
54876: LD_INT 1
54878: ARRAY
54879: PPUSH
54880: LD_VAR 0 14
54884: PUSH
54885: LD_VAR 0 9
54889: ARRAY
54890: PUSH
54891: LD_INT 2
54893: ARRAY
54894: PPUSH
54895: CALL_OW 351
54899: IFTRUE 54938
54901: PUSH
54902: LD_VAR 0 14
54906: PUSH
54907: LD_VAR 0 9
54911: ARRAY
54912: PUSH
54913: LD_INT 1
54915: ARRAY
54916: PPUSH
54917: LD_VAR 0 14
54921: PUSH
54922: LD_VAR 0 9
54926: ARRAY
54927: PUSH
54928: LD_INT 2
54930: ARRAY
54931: PPUSH
54932: CALL_OW 488
54936: NOT
54937: OR
54938: IFTRUE 54955
54940: PUSH
54941: LD_VAR 0 13
54945: PPUSH
54946: CALL_OW 247
54950: PUSH
54951: LD_INT 3
54953: EQUAL
54954: OR
54955: IFFALSE 54961
// exit ;
54957: POP
54958: POP
54959: GO 55513
// if not tmp then
54961: LD_VAR 0 13
54965: NOT
54966: IFFALSE 54970
// continue ;
54968: GO 54822
// result := true ;
54970: LD_ADDR_VAR 0 8
54974: PUSH
54975: LD_INT 1
54977: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54978: LD_VAR 0 6
54982: IFFALSE 54999
54984: PUSH
54985: LD_VAR 0 13
54989: PPUSH
54990: CALL_OW 247
54994: PUSH
54995: LD_INT 2
54997: EQUAL
54998: AND
54999: IFFALSE 55016
55001: PUSH
55002: LD_VAR 0 13
55006: PPUSH
55007: CALL_OW 263
55011: PUSH
55012: LD_INT 1
55014: EQUAL
55015: AND
55016: IFFALSE 55180
// begin if IsDrivenBy ( tmp ) then
55018: LD_VAR 0 13
55022: PPUSH
55023: CALL_OW 311
55027: IFFALSE 55031
// continue ;
55029: GO 54822
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
55031: LD_VAR 0 6
55035: PPUSH
55036: LD_INT 3
55038: PUSH
55039: LD_INT 60
55041: PUSH
55042: EMPTY
55043: LIST
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 3
55051: PUSH
55052: LD_INT 55
55054: PUSH
55055: EMPTY
55056: LIST
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PPUSH
55066: CALL_OW 72
55070: IFFALSE 55178
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
55072: LD_ADDR_VAR 0 18
55076: PUSH
55077: LD_VAR 0 6
55081: PPUSH
55082: LD_INT 3
55084: PUSH
55085: LD_INT 60
55087: PUSH
55088: EMPTY
55089: LIST
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 3
55097: PUSH
55098: LD_INT 55
55100: PUSH
55101: EMPTY
55102: LIST
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PPUSH
55112: CALL_OW 72
55116: PUSH
55117: LD_INT 1
55119: ARRAY
55120: ST_TO_ADDR
// if IsInUnit ( driver ) then
55121: LD_VAR 0 18
55125: PPUSH
55126: CALL_OW 310
55130: IFFALSE 55141
// ComExit ( driver ) ;
55132: LD_VAR 0 18
55136: PPUSH
55137: CALL 80794 0 1
// AddComEnterUnit ( driver , tmp ) ;
55141: LD_VAR 0 18
55145: PPUSH
55146: LD_VAR 0 13
55150: PPUSH
55151: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
55155: LD_VAR 0 18
55159: PPUSH
55160: LD_VAR 0 7
55164: PPUSH
55165: CALL_OW 173
// AddComExitVehicle ( driver ) ;
55169: LD_VAR 0 18
55173: PPUSH
55174: CALL_OW 181
// end ; continue ;
55178: GO 54822
// end ; if not cleaners or not tmp in cleaners then
55180: LD_VAR 0 6
55184: NOT
55185: IFTRUE 55200
55187: PUSH
55188: LD_VAR 0 13
55192: PUSH
55193: LD_VAR 0 6
55197: IN
55198: NOT
55199: OR
55200: IFFALSE 55509
// begin if dep then
55202: LD_VAR 0 17
55206: IFFALSE 55342
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
55208: LD_ADDR_VAR 0 16
55212: PUSH
55213: LD_VAR 0 17
55217: PUSH
55218: LD_INT 1
55220: ARRAY
55221: PPUSH
55222: CALL_OW 250
55226: PPUSH
55227: LD_VAR 0 17
55231: PUSH
55232: LD_INT 1
55234: ARRAY
55235: PPUSH
55236: CALL_OW 254
55240: PPUSH
55241: LD_INT 5
55243: PPUSH
55244: CALL_OW 272
55248: PUSH
55249: LD_VAR 0 17
55253: PUSH
55254: LD_INT 1
55256: ARRAY
55257: PPUSH
55258: CALL_OW 251
55262: PPUSH
55263: LD_VAR 0 17
55267: PUSH
55268: LD_INT 1
55270: ARRAY
55271: PPUSH
55272: CALL_OW 254
55276: PPUSH
55277: LD_INT 5
55279: PPUSH
55280: CALL_OW 273
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
55289: LD_VAR 0 16
55293: PUSH
55294: LD_INT 1
55296: ARRAY
55297: PPUSH
55298: LD_VAR 0 16
55302: PUSH
55303: LD_INT 2
55305: ARRAY
55306: PPUSH
55307: CALL_OW 488
55311: IFFALSE 55342
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
55313: LD_VAR 0 13
55317: PPUSH
55318: LD_VAR 0 16
55322: PUSH
55323: LD_INT 1
55325: ARRAY
55326: PPUSH
55327: LD_VAR 0 16
55331: PUSH
55332: LD_INT 2
55334: ARRAY
55335: PPUSH
55336: CALL_OW 111
// continue ;
55340: GO 54822
// end ; end ; r := GetDir ( tmp ) ;
55342: LD_ADDR_VAR 0 15
55346: PUSH
55347: LD_VAR 0 13
55351: PPUSH
55352: CALL_OW 254
55356: ST_TO_ADDR
// if r = 5 then
55357: LD_VAR 0 15
55361: PUSH
55362: LD_INT 5
55364: EQUAL
55365: IFFALSE 55375
// r := 0 ;
55367: LD_ADDR_VAR 0 15
55371: PUSH
55372: LD_INT 0
55374: ST_TO_ADDR
// for j = r to 5 do
55375: LD_ADDR_VAR 0 10
55379: PUSH
55380: DOUBLE
55381: LD_VAR 0 15
55385: DEC
55386: ST_TO_ADDR
55387: LD_INT 5
55389: PUSH
55390: FOR_TO
55391: IFFALSE 55507
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
55393: LD_ADDR_VAR 0 11
55397: PUSH
55398: LD_VAR 0 13
55402: PPUSH
55403: CALL_OW 250
55407: PPUSH
55408: LD_VAR 0 10
55412: PPUSH
55413: LD_INT 2
55415: PPUSH
55416: CALL_OW 272
55420: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
55421: LD_ADDR_VAR 0 12
55425: PUSH
55426: LD_VAR 0 13
55430: PPUSH
55431: CALL_OW 251
55435: PPUSH
55436: LD_VAR 0 10
55440: PPUSH
55441: LD_INT 2
55443: PPUSH
55444: CALL_OW 273
55448: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
55449: LD_VAR 0 11
55453: PPUSH
55454: LD_VAR 0 12
55458: PPUSH
55459: CALL_OW 488
55463: IFFALSE 55482
55465: PUSH
55466: LD_VAR 0 11
55470: PPUSH
55471: LD_VAR 0 12
55475: PPUSH
55476: CALL_OW 428
55480: NOT
55481: AND
55482: IFFALSE 55505
// begin ComMoveXY ( tmp , _x , _y ) ;
55484: LD_VAR 0 13
55488: PPUSH
55489: LD_VAR 0 11
55493: PPUSH
55494: LD_VAR 0 12
55498: PPUSH
55499: CALL_OW 111
// break ;
55503: GO 55507
// end ; end ;
55505: GO 55390
55507: POP
55508: POP
// end ; end ;
55509: GO 54822
55511: POP
55512: POP
// end ;
55513: LD_VAR 0 8
55517: RET
// export function BuildingTechInvented ( side , btype ) ; begin
55518: LD_INT 0
55520: PPUSH
// result := true ;
55521: LD_ADDR_VAR 0 3
55525: PUSH
55526: LD_INT 1
55528: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
55529: LD_VAR 0 2
55533: PUSH
55534: LD_INT 24
55536: DOUBLE
55537: EQUAL
55538: IFTRUE 55548
55540: LD_INT 33
55542: DOUBLE
55543: EQUAL
55544: IFTRUE 55548
55546: GO 55573
55548: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
55549: LD_ADDR_VAR 0 3
55553: PUSH
55554: LD_INT 32
55556: PPUSH
55557: LD_VAR 0 1
55561: PPUSH
55562: CALL_OW 321
55566: PUSH
55567: LD_INT 2
55569: EQUAL
55570: ST_TO_ADDR
55571: GO 55889
55573: LD_INT 20
55575: DOUBLE
55576: EQUAL
55577: IFTRUE 55581
55579: GO 55606
55581: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
55582: LD_ADDR_VAR 0 3
55586: PUSH
55587: LD_INT 6
55589: PPUSH
55590: LD_VAR 0 1
55594: PPUSH
55595: CALL_OW 321
55599: PUSH
55600: LD_INT 2
55602: EQUAL
55603: ST_TO_ADDR
55604: GO 55889
55606: LD_INT 22
55608: DOUBLE
55609: EQUAL
55610: IFTRUE 55620
55612: LD_INT 36
55614: DOUBLE
55615: EQUAL
55616: IFTRUE 55620
55618: GO 55645
55620: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
55621: LD_ADDR_VAR 0 3
55625: PUSH
55626: LD_INT 15
55628: PPUSH
55629: LD_VAR 0 1
55633: PPUSH
55634: CALL_OW 321
55638: PUSH
55639: LD_INT 2
55641: EQUAL
55642: ST_TO_ADDR
55643: GO 55889
55645: LD_INT 30
55647: DOUBLE
55648: EQUAL
55649: IFTRUE 55653
55651: GO 55678
55653: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
55654: LD_ADDR_VAR 0 3
55658: PUSH
55659: LD_INT 20
55661: PPUSH
55662: LD_VAR 0 1
55666: PPUSH
55667: CALL_OW 321
55671: PUSH
55672: LD_INT 2
55674: EQUAL
55675: ST_TO_ADDR
55676: GO 55889
55678: LD_INT 28
55680: DOUBLE
55681: EQUAL
55682: IFTRUE 55692
55684: LD_INT 21
55686: DOUBLE
55687: EQUAL
55688: IFTRUE 55692
55690: GO 55717
55692: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
55693: LD_ADDR_VAR 0 3
55697: PUSH
55698: LD_INT 21
55700: PPUSH
55701: LD_VAR 0 1
55705: PPUSH
55706: CALL_OW 321
55710: PUSH
55711: LD_INT 2
55713: EQUAL
55714: ST_TO_ADDR
55715: GO 55889
55717: LD_INT 16
55719: DOUBLE
55720: EQUAL
55721: IFTRUE 55725
55723: GO 55750
55725: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55726: LD_ADDR_VAR 0 3
55730: PUSH
55731: LD_INT 84
55733: PPUSH
55734: LD_VAR 0 1
55738: PPUSH
55739: CALL_OW 321
55743: PUSH
55744: LD_INT 2
55746: EQUAL
55747: ST_TO_ADDR
55748: GO 55889
55750: LD_INT 19
55752: DOUBLE
55753: EQUAL
55754: IFTRUE 55764
55756: LD_INT 23
55758: DOUBLE
55759: EQUAL
55760: IFTRUE 55764
55762: GO 55789
55764: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55765: LD_ADDR_VAR 0 3
55769: PUSH
55770: LD_INT 83
55772: PPUSH
55773: LD_VAR 0 1
55777: PPUSH
55778: CALL_OW 321
55782: PUSH
55783: LD_INT 2
55785: EQUAL
55786: ST_TO_ADDR
55787: GO 55889
55789: LD_INT 17
55791: DOUBLE
55792: EQUAL
55793: IFTRUE 55797
55795: GO 55822
55797: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55798: LD_ADDR_VAR 0 3
55802: PUSH
55803: LD_INT 39
55805: PPUSH
55806: LD_VAR 0 1
55810: PPUSH
55811: CALL_OW 321
55815: PUSH
55816: LD_INT 2
55818: EQUAL
55819: ST_TO_ADDR
55820: GO 55889
55822: LD_INT 18
55824: DOUBLE
55825: EQUAL
55826: IFTRUE 55830
55828: GO 55855
55830: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55831: LD_ADDR_VAR 0 3
55835: PUSH
55836: LD_INT 40
55838: PPUSH
55839: LD_VAR 0 1
55843: PPUSH
55844: CALL_OW 321
55848: PUSH
55849: LD_INT 2
55851: EQUAL
55852: ST_TO_ADDR
55853: GO 55889
55855: LD_INT 27
55857: DOUBLE
55858: EQUAL
55859: IFTRUE 55863
55861: GO 55888
55863: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55864: LD_ADDR_VAR 0 3
55868: PUSH
55869: LD_INT 35
55871: PPUSH
55872: LD_VAR 0 1
55876: PPUSH
55877: CALL_OW 321
55881: PUSH
55882: LD_INT 2
55884: EQUAL
55885: ST_TO_ADDR
55886: GO 55889
55888: POP
// end ;
55889: LD_VAR 0 3
55893: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55894: LD_INT 0
55896: PPUSH
55897: PPUSH
55898: PPUSH
55899: PPUSH
55900: PPUSH
55901: PPUSH
55902: PPUSH
55903: PPUSH
55904: PPUSH
55905: PPUSH
55906: PPUSH
// result := false ;
55907: LD_ADDR_VAR 0 6
55911: PUSH
55912: LD_INT 0
55914: ST_TO_ADDR
// if btype = b_depot then
55915: LD_VAR 0 2
55919: PUSH
55920: LD_INT 0
55922: EQUAL
55923: IFFALSE 55935
// begin result := true ;
55925: LD_ADDR_VAR 0 6
55929: PUSH
55930: LD_INT 1
55932: ST_TO_ADDR
// exit ;
55933: GO 56789
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55935: LD_VAR 0 1
55939: NOT
55940: IFTRUE 55965
55942: PUSH
55943: LD_VAR 0 1
55947: PPUSH
55948: CALL_OW 266
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: IN
55963: NOT
55964: OR
55965: IFTRUE 55974
55967: PUSH
55968: LD_VAR 0 2
55972: NOT
55973: OR
55974: IFTRUE 56010
55976: PUSH
55977: LD_VAR 0 5
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: LD_INT 2
55990: PUSH
55991: LD_INT 3
55993: PUSH
55994: LD_INT 4
55996: PUSH
55997: LD_INT 5
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: IN
56008: NOT
56009: OR
56010: IFTRUE 56029
56012: PUSH
56013: LD_VAR 0 3
56017: PPUSH
56018: LD_VAR 0 4
56022: PPUSH
56023: CALL_OW 488
56027: NOT
56028: OR
56029: IFFALSE 56033
// exit ;
56031: GO 56789
// side := GetSide ( depot ) ;
56033: LD_ADDR_VAR 0 9
56037: PUSH
56038: LD_VAR 0 1
56042: PPUSH
56043: CALL_OW 255
56047: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
56048: LD_VAR 0 9
56052: PPUSH
56053: LD_VAR 0 2
56057: PPUSH
56058: CALL 55518 0 2
56062: NOT
56063: IFFALSE 56067
// exit ;
56065: GO 56789
// pom := GetBase ( depot ) ;
56067: LD_ADDR_VAR 0 10
56071: PUSH
56072: LD_VAR 0 1
56076: PPUSH
56077: CALL_OW 274
56081: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56082: LD_ADDR_VAR 0 11
56086: PUSH
56087: LD_VAR 0 2
56091: PPUSH
56092: LD_VAR 0 1
56096: PPUSH
56097: CALL_OW 248
56101: PPUSH
56102: CALL_OW 450
56106: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
56107: LD_VAR 0 10
56111: PPUSH
56112: LD_INT 1
56114: PPUSH
56115: CALL_OW 275
56119: PUSH
56120: LD_VAR 0 11
56124: PUSH
56125: LD_INT 1
56127: ARRAY
56128: GREATEREQUAL
56129: IFFALSE 56155
56131: PUSH
56132: LD_VAR 0 10
56136: PPUSH
56137: LD_INT 2
56139: PPUSH
56140: CALL_OW 275
56144: PUSH
56145: LD_VAR 0 11
56149: PUSH
56150: LD_INT 2
56152: ARRAY
56153: GREATEREQUAL
56154: AND
56155: IFFALSE 56181
56157: PUSH
56158: LD_VAR 0 10
56162: PPUSH
56163: LD_INT 3
56165: PPUSH
56166: CALL_OW 275
56170: PUSH
56171: LD_VAR 0 11
56175: PUSH
56176: LD_INT 3
56178: ARRAY
56179: GREATEREQUAL
56180: AND
56181: NOT
56182: IFFALSE 56186
// exit ;
56184: GO 56789
// if GetBType ( depot ) = b_depot then
56186: LD_VAR 0 1
56190: PPUSH
56191: CALL_OW 266
56195: PUSH
56196: LD_INT 0
56198: EQUAL
56199: IFFALSE 56211
// dist := 28 else
56201: LD_ADDR_VAR 0 14
56205: PUSH
56206: LD_INT 28
56208: ST_TO_ADDR
56209: GO 56219
// dist := 36 ;
56211: LD_ADDR_VAR 0 14
56215: PUSH
56216: LD_INT 36
56218: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
56219: LD_VAR 0 1
56223: PPUSH
56224: LD_VAR 0 3
56228: PPUSH
56229: LD_VAR 0 4
56233: PPUSH
56234: CALL_OW 297
56238: PUSH
56239: LD_VAR 0 14
56243: GREATER
56244: IFFALSE 56248
// exit ;
56246: GO 56789
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
56248: LD_ADDR_VAR 0 12
56252: PUSH
56253: LD_VAR 0 2
56257: PPUSH
56258: LD_VAR 0 3
56262: PPUSH
56263: LD_VAR 0 4
56267: PPUSH
56268: LD_VAR 0 5
56272: PPUSH
56273: LD_VAR 0 1
56277: PPUSH
56278: CALL_OW 248
56282: PPUSH
56283: LD_INT 0
56285: PPUSH
56286: CALL 56794 0 6
56290: ST_TO_ADDR
// if not hexes then
56291: LD_VAR 0 12
56295: NOT
56296: IFFALSE 56300
// exit ;
56298: GO 56789
// hex := GetHexInfo ( x , y ) ;
56300: LD_ADDR_VAR 0 15
56304: PUSH
56305: LD_VAR 0 3
56309: PPUSH
56310: LD_VAR 0 4
56314: PPUSH
56315: CALL_OW 546
56319: ST_TO_ADDR
// if hex [ 1 ] then
56320: LD_VAR 0 15
56324: PUSH
56325: LD_INT 1
56327: ARRAY
56328: IFFALSE 56332
// exit ;
56330: GO 56789
// height := hex [ 2 ] ;
56332: LD_ADDR_VAR 0 13
56336: PUSH
56337: LD_VAR 0 15
56341: PUSH
56342: LD_INT 2
56344: ARRAY
56345: ST_TO_ADDR
// for i = 1 to hexes do
56346: LD_ADDR_VAR 0 7
56350: PUSH
56351: DOUBLE
56352: LD_INT 1
56354: DEC
56355: ST_TO_ADDR
56356: LD_VAR 0 12
56360: PUSH
56361: FOR_TO
56362: IFFALSE 56706
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56364: LD_VAR 0 12
56368: PUSH
56369: LD_VAR 0 7
56373: ARRAY
56374: PUSH
56375: LD_INT 1
56377: ARRAY
56378: PPUSH
56379: LD_VAR 0 12
56383: PUSH
56384: LD_VAR 0 7
56388: ARRAY
56389: PUSH
56390: LD_INT 2
56392: ARRAY
56393: PPUSH
56394: CALL_OW 488
56398: NOT
56399: IFTRUE 56441
56401: PUSH
56402: LD_VAR 0 12
56406: PUSH
56407: LD_VAR 0 7
56411: ARRAY
56412: PUSH
56413: LD_INT 1
56415: ARRAY
56416: PPUSH
56417: LD_VAR 0 12
56421: PUSH
56422: LD_VAR 0 7
56426: ARRAY
56427: PUSH
56428: LD_INT 2
56430: ARRAY
56431: PPUSH
56432: CALL_OW 428
56436: PUSH
56437: LD_INT 0
56439: GREATER
56440: OR
56441: IFTRUE 56479
56443: PUSH
56444: LD_VAR 0 12
56448: PUSH
56449: LD_VAR 0 7
56453: ARRAY
56454: PUSH
56455: LD_INT 1
56457: ARRAY
56458: PPUSH
56459: LD_VAR 0 12
56463: PUSH
56464: LD_VAR 0 7
56468: ARRAY
56469: PUSH
56470: LD_INT 2
56472: ARRAY
56473: PPUSH
56474: CALL_OW 351
56478: OR
56479: IFFALSE 56485
// exit ;
56481: POP
56482: POP
56483: GO 56789
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56485: LD_ADDR_VAR 0 8
56489: PUSH
56490: LD_VAR 0 12
56494: PUSH
56495: LD_VAR 0 7
56499: ARRAY
56500: PUSH
56501: LD_INT 1
56503: ARRAY
56504: PPUSH
56505: LD_VAR 0 12
56509: PUSH
56510: LD_VAR 0 7
56514: ARRAY
56515: PUSH
56516: LD_INT 2
56518: ARRAY
56519: PPUSH
56520: CALL_OW 546
56524: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
56525: LD_VAR 0 8
56529: PUSH
56530: LD_INT 1
56532: ARRAY
56533: IFTRUE 56555
56535: PUSH
56536: LD_VAR 0 8
56540: PUSH
56541: LD_INT 2
56543: ARRAY
56544: PUSH
56545: LD_VAR 0 13
56549: PUSH
56550: LD_INT 2
56552: PLUS
56553: GREATER
56554: OR
56555: IFTRUE 56577
56557: PUSH
56558: LD_VAR 0 8
56562: PUSH
56563: LD_INT 2
56565: ARRAY
56566: PUSH
56567: LD_VAR 0 13
56571: PUSH
56572: LD_INT 2
56574: MINUS
56575: LESS
56576: OR
56577: IFTRUE 56645
56579: PUSH
56580: LD_VAR 0 8
56584: PUSH
56585: LD_INT 3
56587: ARRAY
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: LD_INT 8
56594: PUSH
56595: LD_INT 9
56597: PUSH
56598: LD_INT 10
56600: PUSH
56601: LD_INT 11
56603: PUSH
56604: LD_INT 12
56606: PUSH
56607: LD_INT 13
56609: PUSH
56610: LD_INT 16
56612: PUSH
56613: LD_INT 17
56615: PUSH
56616: LD_INT 18
56618: PUSH
56619: LD_INT 19
56621: PUSH
56622: LD_INT 20
56624: PUSH
56625: LD_INT 21
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: IN
56643: NOT
56644: OR
56645: IFTRUE 56658
56647: PUSH
56648: LD_VAR 0 8
56652: PUSH
56653: LD_INT 5
56655: ARRAY
56656: NOT
56657: OR
56658: IFTRUE 56698
56660: PUSH
56661: LD_VAR 0 8
56665: PUSH
56666: LD_INT 6
56668: ARRAY
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: LD_INT 2
56675: PUSH
56676: LD_INT 7
56678: PUSH
56679: LD_INT 9
56681: PUSH
56682: LD_INT 10
56684: PUSH
56685: LD_INT 11
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: IN
56696: NOT
56697: OR
56698: IFFALSE 56704
// exit ;
56700: POP
56701: POP
56702: GO 56789
// end ;
56704: GO 56361
56706: POP
56707: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
56708: LD_VAR 0 9
56712: PPUSH
56713: LD_VAR 0 3
56717: PPUSH
56718: LD_VAR 0 4
56722: PPUSH
56723: LD_INT 20
56725: PPUSH
56726: CALL 48608 0 4
56730: PUSH
56731: LD_INT 4
56733: ARRAY
56734: IFFALSE 56738
// exit ;
56736: GO 56789
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56738: LD_VAR 0 2
56742: PUSH
56743: LD_INT 29
56745: PUSH
56746: LD_INT 30
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: IN
56753: IFFALSE 56777
56755: PUSH
56756: LD_VAR 0 3
56760: PPUSH
56761: LD_VAR 0 4
56765: PPUSH
56766: LD_VAR 0 9
56770: PPUSH
56771: CALL_OW 440
56775: NOT
56776: AND
56777: IFFALSE 56781
// exit ;
56779: GO 56789
// result := true ;
56781: LD_ADDR_VAR 0 6
56785: PUSH
56786: LD_INT 1
56788: ST_TO_ADDR
// end ;
56789: LD_VAR 0 6
56793: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56794: LD_INT 0
56796: PPUSH
56797: PPUSH
56798: PPUSH
56799: PPUSH
56800: PPUSH
56801: PPUSH
56802: PPUSH
56803: PPUSH
56804: PPUSH
56805: PPUSH
56806: PPUSH
56807: PPUSH
56808: PPUSH
56809: PPUSH
56810: PPUSH
56811: PPUSH
56812: PPUSH
56813: PPUSH
56814: PPUSH
56815: PPUSH
56816: PPUSH
56817: PPUSH
56818: PPUSH
56819: PPUSH
56820: PPUSH
56821: PPUSH
56822: PPUSH
56823: PPUSH
56824: PPUSH
56825: PPUSH
56826: PPUSH
56827: PPUSH
56828: PPUSH
56829: PPUSH
56830: PPUSH
56831: PPUSH
56832: PPUSH
56833: PPUSH
56834: PPUSH
56835: PPUSH
56836: PPUSH
56837: PPUSH
56838: PPUSH
56839: PPUSH
56840: PPUSH
56841: PPUSH
56842: PPUSH
56843: PPUSH
56844: PPUSH
56845: PPUSH
56846: PPUSH
56847: PPUSH
56848: PPUSH
56849: PPUSH
56850: PPUSH
56851: PPUSH
56852: PPUSH
56853: PPUSH
// result = [ ] ;
56854: LD_ADDR_VAR 0 7
56858: PUSH
56859: EMPTY
56860: ST_TO_ADDR
// temp_list = [ ] ;
56861: LD_ADDR_VAR 0 9
56865: PUSH
56866: EMPTY
56867: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56868: LD_VAR 0 4
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: LD_INT 2
56881: PUSH
56882: LD_INT 3
56884: PUSH
56885: LD_INT 4
56887: PUSH
56888: LD_INT 5
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: IN
56899: NOT
56900: IFTRUE 56943
56902: PUSH
56903: LD_VAR 0 1
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: IN
56918: IFFALSE 56942
56920: PUSH
56921: LD_VAR 0 5
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: LD_INT 2
56931: PUSH
56932: LD_INT 3
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: LIST
56939: IN
56940: NOT
56941: AND
56942: OR
56943: IFFALSE 56947
// exit ;
56945: GO 75346
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56947: LD_VAR 0 1
56951: PUSH
56952: LD_INT 6
56954: PUSH
56955: LD_INT 7
56957: PUSH
56958: LD_INT 8
56960: PUSH
56961: LD_INT 13
56963: PUSH
56964: LD_INT 12
56966: PUSH
56967: LD_INT 15
56969: PUSH
56970: LD_INT 11
56972: PUSH
56973: LD_INT 14
56975: PUSH
56976: LD_INT 10
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: IN
56990: IFFALSE 57000
// btype = b_lab ;
56992: LD_ADDR_VAR 0 1
56996: PUSH
56997: LD_INT 6
56999: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57000: LD_VAR 0 6
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: LD_INT 2
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: LIST
57018: IN
57019: NOT
57020: IFTRUE 57088
57022: PUSH
57023: LD_VAR 0 1
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: LD_INT 2
57036: PUSH
57037: LD_INT 3
57039: PUSH
57040: LD_INT 6
57042: PUSH
57043: LD_INT 36
57045: PUSH
57046: LD_INT 4
57048: PUSH
57049: LD_INT 5
57051: PUSH
57052: LD_INT 31
57054: PUSH
57055: LD_INT 32
57057: PUSH
57058: LD_INT 33
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: IN
57074: NOT
57075: IFFALSE 57087
57077: PUSH
57078: LD_VAR 0 6
57082: PUSH
57083: LD_INT 1
57085: EQUAL
57086: AND
57087: OR
57088: IFTRUE 57120
57090: PUSH
57091: LD_VAR 0 1
57095: PUSH
57096: LD_INT 2
57098: PUSH
57099: LD_INT 3
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: IN
57106: NOT
57107: IFFALSE 57119
57109: PUSH
57110: LD_VAR 0 6
57114: PUSH
57115: LD_INT 2
57117: EQUAL
57118: AND
57119: OR
57120: IFFALSE 57130
// mode = 0 ;
57122: LD_ADDR_VAR 0 6
57126: PUSH
57127: LD_INT 0
57129: ST_TO_ADDR
// case mode of 0 :
57130: LD_VAR 0 6
57134: PUSH
57135: LD_INT 0
57137: DOUBLE
57138: EQUAL
57139: IFTRUE 57143
57141: GO 68596
57143: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57144: LD_ADDR_VAR 0 11
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 1
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: LD_INT 2
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: LD_INT 2
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: LD_INT 2
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: LD_INT 2
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: LD_INT 1
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: LD_INT 3
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: LD_INT 3
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 1
57310: NEG
57311: PUSH
57312: LD_INT 2
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57337: LD_ADDR_VAR 0 12
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: LD_INT 1
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: LD_INT 1
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 1
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 2
57460: NEG
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 2
57471: NEG
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 2
57483: NEG
57484: PUSH
57485: LD_INT 1
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 3
57494: NEG
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 3
57505: NEG
57506: PUSH
57507: LD_INT 1
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57533: LD_ADDR_VAR 0 13
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 2
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 2
57636: PUSH
57637: LD_INT 2
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: LD_INT 2
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 2
57656: NEG
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 2
57668: NEG
57669: PUSH
57670: LD_INT 2
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 2
57680: NEG
57681: PUSH
57682: LD_INT 3
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 3
57692: NEG
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 3
57704: NEG
57705: PUSH
57706: LD_INT 3
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57732: LD_ADDR_VAR 0 14
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 0
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: NEG
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: LD_INT 2
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: LD_INT 2
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: LD_INT 2
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: LD_INT 2
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: LD_INT 3
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: LD_INT 3
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: LD_INT 2
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57928: LD_ADDR_VAR 0 15
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: NEG
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: LD_INT 1
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 2
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: LD_INT 1
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 2
58051: NEG
58052: PUSH
58053: LD_INT 0
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 2
58062: NEG
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 3
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 3
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58121: LD_ADDR_VAR 0 16
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: LD_INT 1
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: NEG
58203: PUSH
58204: LD_INT 2
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 2
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 2
58224: PUSH
58225: LD_INT 2
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: LD_INT 2
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 2
58244: NEG
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: LD_INT 2
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 3
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 3
58278: PUSH
58279: LD_INT 3
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 2
58288: PUSH
58289: LD_INT 3
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58314: LD_ADDR_VAR 0 17
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: LD_INT 2
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 2
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 2
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 0
58469: PUSH
58470: LD_INT 2
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: LD_INT 1
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 2
58490: NEG
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 2
58501: NEG
58502: PUSH
58503: LD_INT 1
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 2
58513: NEG
58514: PUSH
58515: LD_INT 2
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58544: LD_ADDR_VAR 0 18
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: LD_INT 0
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: PUSH
58583: LD_INT 1
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: LD_INT 2
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: LD_INT 2
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 2
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 2
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 2
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: LD_INT 2
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 2
58720: NEG
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 2
58731: NEG
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: NEG
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58774: LD_ADDR_VAR 0 19
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: LD_INT 1
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: LD_INT 0
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: LD_INT 1
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 1
58855: NEG
58856: PUSH
58857: LD_INT 2
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: LD_INT 2
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 2
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 2
58899: PUSH
58900: LD_INT 1
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 2
58909: PUSH
58910: LD_INT 2
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: LD_INT 2
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: LD_INT 2
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: LD_INT 1
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 2
58950: NEG
58951: PUSH
58952: LD_INT 0
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 2
58961: NEG
58962: PUSH
58963: LD_INT 1
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 2
58973: NEG
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59004: LD_ADDR_VAR 0 20
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: LD_INT 1
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 1
59062: NEG
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: LD_INT 1
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 1
59085: NEG
59086: PUSH
59087: LD_INT 2
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 1
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 2
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 2
59129: PUSH
59130: LD_INT 1
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 2
59139: PUSH
59140: LD_INT 2
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: LD_INT 2
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: LD_INT 2
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 2
59180: NEG
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 2
59191: NEG
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 2
59203: NEG
59204: PUSH
59205: LD_INT 2
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59234: LD_ADDR_VAR 0 21
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: PUSH
59263: LD_INT 0
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 1
59272: PUSH
59273: LD_INT 1
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 0
59282: PUSH
59283: LD_INT 1
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: LD_INT 1
59307: NEG
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: LD_INT 2
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: LD_INT 2
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 2
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 2
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 2
59369: PUSH
59370: LD_INT 2
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: LD_INT 2
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 0
59389: PUSH
59390: LD_INT 2
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: LD_INT 1
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 2
59410: NEG
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 2
59421: NEG
59422: PUSH
59423: LD_INT 1
59425: NEG
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 2
59433: NEG
59434: PUSH
59435: LD_INT 2
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59464: LD_ADDR_VAR 0 22
59468: PUSH
59469: LD_INT 0
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 0
59481: PUSH
59482: LD_INT 1
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 1
59502: PUSH
59503: LD_INT 1
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: LD_INT 1
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: LD_INT 1
59537: NEG
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: LD_INT 2
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: LD_INT 2
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 1
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 2
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 2
59589: PUSH
59590: LD_INT 1
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 2
59599: PUSH
59600: LD_INT 2
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: LD_INT 2
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: LD_INT 2
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 1
59629: NEG
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 2
59640: NEG
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 2
59651: NEG
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 2
59663: NEG
59664: PUSH
59665: LD_INT 2
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59694: LD_ADDR_VAR 0 23
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 0
59711: PUSH
59712: LD_INT 1
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: LD_INT 1
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 1
59752: NEG
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 1
59763: NEG
59764: PUSH
59765: LD_INT 1
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: LD_INT 2
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: LD_INT 2
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: LD_INT 1
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 2
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 2
59819: PUSH
59820: LD_INT 1
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 2
59829: PUSH
59830: LD_INT 2
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 1
59839: PUSH
59840: LD_INT 2
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: LD_INT 2
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 2
59870: NEG
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 2
59881: NEG
59882: PUSH
59883: LD_INT 1
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 2
59893: NEG
59894: PUSH
59895: LD_INT 2
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 2
59905: NEG
59906: PUSH
59907: LD_INT 3
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: NEG
59918: PUSH
59919: LD_INT 3
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 1
59929: PUSH
59930: LD_INT 2
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59974: LD_ADDR_VAR 0 24
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: LD_INT 1
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 1
60012: PUSH
60013: LD_INT 1
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: LD_INT 1
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: LD_INT 0
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 1
60043: NEG
60044: PUSH
60045: LD_INT 1
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: LD_INT 2
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: LD_INT 2
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 1
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 2
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 2
60099: PUSH
60100: LD_INT 1
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 2
60109: PUSH
60110: LD_INT 2
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 1
60119: PUSH
60120: LD_INT 2
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: LD_INT 2
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 1
60139: NEG
60140: PUSH
60141: LD_INT 1
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 2
60150: NEG
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 2
60161: NEG
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 2
60173: NEG
60174: PUSH
60175: LD_INT 2
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 1
60185: PUSH
60186: LD_INT 2
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 2
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 3
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 3
60217: PUSH
60218: LD_INT 2
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
60250: LD_ADDR_VAR 0 25
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: LD_INT 0
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: LD_INT 1
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: PUSH
60279: LD_INT 0
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: PUSH
60289: LD_INT 1
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: LD_INT 1
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 1
60308: NEG
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: LD_INT 1
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: NEG
60332: PUSH
60333: LD_INT 2
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: LD_INT 2
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: LD_INT 1
60357: NEG
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 2
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 2
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 2
60385: PUSH
60386: LD_INT 2
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 1
60395: PUSH
60396: LD_INT 2
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 0
60405: PUSH
60406: LD_INT 2
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 1
60415: NEG
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 2
60426: NEG
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 2
60437: NEG
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 2
60449: NEG
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 3
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 3
60471: PUSH
60472: LD_INT 2
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 2
60481: PUSH
60482: LD_INT 3
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: LD_INT 3
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60524: LD_ADDR_VAR 0 26
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: LD_INT 1
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: LD_INT 1
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: LD_INT 0
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 1
60605: NEG
60606: PUSH
60607: LD_INT 2
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 0
60617: PUSH
60618: LD_INT 2
60620: NEG
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 1
60628: PUSH
60629: LD_INT 1
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 2
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 2
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 2
60659: PUSH
60660: LD_INT 2
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: LD_INT 2
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 0
60679: PUSH
60680: LD_INT 2
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 1
60689: NEG
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 2
60700: NEG
60701: PUSH
60702: LD_INT 0
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 2
60711: NEG
60712: PUSH
60713: LD_INT 1
60715: NEG
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 2
60723: NEG
60724: PUSH
60725: LD_INT 2
60727: NEG
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 2
60735: PUSH
60736: LD_INT 3
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: LD_INT 3
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: NEG
60756: PUSH
60757: LD_INT 2
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 2
60766: NEG
60767: PUSH
60768: LD_INT 1
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60800: LD_ADDR_VAR 0 27
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: LD_INT 1
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: LD_INT 1
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 1
60858: NEG
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: NEG
60882: PUSH
60883: LD_INT 2
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: LD_INT 2
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 1
60904: PUSH
60905: LD_INT 1
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 2
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 2
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 2
60935: PUSH
60936: LD_INT 2
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 1
60945: PUSH
60946: LD_INT 2
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 0
60955: PUSH
60956: LD_INT 2
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: NEG
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 2
60976: NEG
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 2
60987: NEG
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 2
60999: NEG
61000: PUSH
61001: LD_INT 2
61003: NEG
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 1
61011: NEG
61012: PUSH
61013: LD_INT 2
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 2
61022: NEG
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 3
61033: NEG
61034: PUSH
61035: LD_INT 1
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 3
61045: NEG
61046: PUSH
61047: LD_INT 2
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61080: LD_ADDR_VAR 0 28
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: LD_INT 0
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: LD_INT 1
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 1
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 1
61118: PUSH
61119: LD_INT 1
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: LD_INT 1
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 1
61138: NEG
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: LD_INT 1
61153: NEG
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: LD_INT 2
61165: NEG
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: LD_INT 2
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 2
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 2
61205: PUSH
61206: LD_INT 1
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 2
61215: PUSH
61216: LD_INT 2
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 1
61225: PUSH
61226: LD_INT 2
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 0
61235: PUSH
61236: LD_INT 2
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 1
61245: NEG
61246: PUSH
61247: LD_INT 1
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 2
61256: NEG
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 2
61267: NEG
61268: PUSH
61269: LD_INT 1
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 2
61279: NEG
61280: PUSH
61281: LD_INT 2
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 2
61291: NEG
61292: PUSH
61293: LD_INT 3
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 1
61303: NEG
61304: PUSH
61305: LD_INT 3
61307: NEG
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 3
61315: NEG
61316: PUSH
61317: LD_INT 1
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 3
61327: NEG
61328: PUSH
61329: LD_INT 2
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61362: LD_ADDR_VAR 0 29
61366: PUSH
61367: LD_INT 0
61369: PUSH
61370: LD_INT 0
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: LD_INT 1
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 1
61390: PUSH
61391: LD_INT 0
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 1
61400: PUSH
61401: LD_INT 1
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: LD_INT 1
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 1
61420: NEG
61421: PUSH
61422: LD_INT 0
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 1
61431: NEG
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 1
61443: NEG
61444: PUSH
61445: LD_INT 2
61447: NEG
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: LD_INT 2
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: LD_INT 1
61469: NEG
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 2
61477: PUSH
61478: LD_INT 0
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 2
61487: PUSH
61488: LD_INT 1
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 1
61497: PUSH
61498: LD_INT 2
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: LD_INT 2
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: LD_INT 1
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 2
61528: NEG
61529: PUSH
61530: LD_INT 1
61532: NEG
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 2
61540: NEG
61541: PUSH
61542: LD_INT 2
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 2
61552: NEG
61553: PUSH
61554: LD_INT 3
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 2
61564: PUSH
61565: LD_INT 1
61567: NEG
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 3
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: LD_INT 3
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 1
61595: NEG
61596: PUSH
61597: LD_INT 2
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 3
61606: NEG
61607: PUSH
61608: LD_INT 2
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61641: LD_ADDR_VAR 0 30
61645: PUSH
61646: LD_INT 0
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 0
61658: PUSH
61659: LD_INT 1
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: PUSH
61680: LD_INT 1
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: LD_INT 1
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: NEG
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 1
61710: NEG
61711: PUSH
61712: LD_INT 1
61714: NEG
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: LD_INT 2
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 0
61734: PUSH
61735: LD_INT 2
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 1
61745: PUSH
61746: LD_INT 1
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 2
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 2
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 2
61776: PUSH
61777: LD_INT 2
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: LD_INT 2
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 1
61796: NEG
61797: PUSH
61798: LD_INT 1
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 2
61807: NEG
61808: PUSH
61809: LD_INT 0
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 2
61818: NEG
61819: PUSH
61820: LD_INT 1
61822: NEG
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: LD_INT 3
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: PUSH
61843: LD_INT 2
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 3
61853: PUSH
61854: LD_INT 2
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 2
61863: PUSH
61864: LD_INT 3
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 2
61873: NEG
61874: PUSH
61875: LD_INT 1
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 3
61884: NEG
61885: PUSH
61886: LD_INT 1
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61919: LD_ADDR_VAR 0 31
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 1
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: LD_INT 1
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 1
61977: NEG
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 1
61988: NEG
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 1
62000: NEG
62001: PUSH
62002: LD_INT 2
62004: NEG
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: LD_INT 1
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 2
62023: PUSH
62024: LD_INT 0
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 2
62033: PUSH
62034: LD_INT 1
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 2
62043: PUSH
62044: LD_INT 2
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 1
62053: PUSH
62054: LD_INT 2
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 0
62063: PUSH
62064: LD_INT 2
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 1
62073: NEG
62074: PUSH
62075: LD_INT 1
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 2
62084: NEG
62085: PUSH
62086: LD_INT 1
62088: NEG
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 2
62096: NEG
62097: PUSH
62098: LD_INT 2
62100: NEG
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 2
62108: NEG
62109: PUSH
62110: LD_INT 3
62112: NEG
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 2
62120: PUSH
62121: LD_INT 1
62123: NEG
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 3
62131: PUSH
62132: LD_INT 1
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 1
62141: PUSH
62142: LD_INT 3
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 1
62151: NEG
62152: PUSH
62153: LD_INT 2
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 3
62162: NEG
62163: PUSH
62164: LD_INT 2
62166: NEG
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62197: LD_ADDR_VAR 0 32
62201: PUSH
62202: LD_INT 0
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 1
62225: PUSH
62226: LD_INT 0
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 1
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 1
62255: NEG
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 1
62266: NEG
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 1
62278: NEG
62279: PUSH
62280: LD_INT 2
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: LD_INT 2
62293: NEG
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 2
62312: PUSH
62313: LD_INT 1
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 2
62322: PUSH
62323: LD_INT 2
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: LD_INT 2
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: LD_INT 2
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 1
62352: NEG
62353: PUSH
62354: LD_INT 1
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 2
62363: NEG
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 2
62374: NEG
62375: PUSH
62376: LD_INT 1
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 1
62386: NEG
62387: PUSH
62388: LD_INT 3
62390: NEG
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 1
62398: PUSH
62399: LD_INT 2
62401: NEG
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 3
62409: PUSH
62410: LD_INT 2
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 2
62419: PUSH
62420: LD_INT 3
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 2
62429: NEG
62430: PUSH
62431: LD_INT 1
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 3
62440: NEG
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62475: LD_ADDR_VAR 0 33
62479: PUSH
62480: LD_INT 0
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: LD_INT 1
62495: NEG
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 1
62513: PUSH
62514: LD_INT 1
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 1
62533: NEG
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: LD_INT 1
62548: NEG
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: LD_INT 2
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 1
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 2
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 2
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 1
62599: PUSH
62600: LD_INT 2
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 0
62609: PUSH
62610: LD_INT 2
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: LD_INT 1
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 2
62630: NEG
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 2
62641: NEG
62642: PUSH
62643: LD_INT 1
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 2
62653: NEG
62654: PUSH
62655: LD_INT 2
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 2
62665: NEG
62666: PUSH
62667: LD_INT 3
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 2
62677: PUSH
62678: LD_INT 1
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 3
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 1
62698: PUSH
62699: LD_INT 3
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 1
62708: NEG
62709: PUSH
62710: LD_INT 2
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 3
62719: NEG
62720: PUSH
62721: LD_INT 2
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62754: LD_ADDR_VAR 0 34
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 0
62771: PUSH
62772: LD_INT 1
62774: NEG
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 1
62782: PUSH
62783: LD_INT 0
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 1
62792: PUSH
62793: LD_INT 1
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: LD_INT 1
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 1
62812: NEG
62813: PUSH
62814: LD_INT 0
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 1
62823: NEG
62824: PUSH
62825: LD_INT 1
62827: NEG
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 1
62835: NEG
62836: PUSH
62837: LD_INT 2
62839: NEG
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 0
62847: PUSH
62848: LD_INT 2
62850: NEG
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 1
62858: PUSH
62859: LD_INT 1
62861: NEG
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 2
62869: PUSH
62870: LD_INT 1
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 2
62879: PUSH
62880: LD_INT 2
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 1
62889: PUSH
62890: LD_INT 2
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 1
62899: NEG
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 2
62910: NEG
62911: PUSH
62912: LD_INT 0
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 2
62921: NEG
62922: PUSH
62923: LD_INT 1
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 2
62933: NEG
62934: PUSH
62935: LD_INT 2
62937: NEG
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 1
62945: NEG
62946: PUSH
62947: LD_INT 3
62949: NEG
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 1
62957: PUSH
62958: LD_INT 2
62960: NEG
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 3
62968: PUSH
62969: LD_INT 2
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 2
62978: PUSH
62979: LD_INT 3
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 2
62988: NEG
62989: PUSH
62990: LD_INT 1
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 3
62999: NEG
63000: PUSH
63001: LD_INT 1
63003: NEG
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63034: LD_ADDR_VAR 0 35
63038: PUSH
63039: LD_INT 0
63041: PUSH
63042: LD_INT 0
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 0
63051: PUSH
63052: LD_INT 1
63054: NEG
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: LD_INT 0
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 1
63072: PUSH
63073: LD_INT 1
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: LD_INT 1
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 1
63092: NEG
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 1
63103: NEG
63104: PUSH
63105: LD_INT 1
63107: NEG
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 2
63115: PUSH
63116: LD_INT 1
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 2
63125: NEG
63126: PUSH
63127: LD_INT 1
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63146: LD_ADDR_VAR 0 36
63150: PUSH
63151: LD_INT 0
63153: PUSH
63154: LD_INT 0
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 0
63163: PUSH
63164: LD_INT 1
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 1
63174: PUSH
63175: LD_INT 0
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 1
63184: PUSH
63185: LD_INT 1
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 0
63194: PUSH
63195: LD_INT 1
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 1
63204: NEG
63205: PUSH
63206: LD_INT 0
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 1
63215: NEG
63216: PUSH
63217: LD_INT 1
63219: NEG
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 1
63227: NEG
63228: PUSH
63229: LD_INT 2
63231: NEG
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 1
63239: PUSH
63240: LD_INT 2
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63258: LD_ADDR_VAR 0 37
63262: PUSH
63263: LD_INT 0
63265: PUSH
63266: LD_INT 0
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 0
63275: PUSH
63276: LD_INT 1
63278: NEG
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 1
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 1
63296: PUSH
63297: LD_INT 1
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 0
63306: PUSH
63307: LD_INT 1
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 1
63316: NEG
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 1
63327: NEG
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 1
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 1
63350: NEG
63351: PUSH
63352: LD_INT 1
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63370: LD_ADDR_VAR 0 38
63374: PUSH
63375: LD_INT 0
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 1
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: PUSH
63409: LD_INT 1
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 0
63418: PUSH
63419: LD_INT 1
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 1
63428: NEG
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 1
63439: NEG
63440: PUSH
63441: LD_INT 1
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 2
63451: PUSH
63452: LD_INT 1
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 2
63461: NEG
63462: PUSH
63463: LD_INT 1
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63482: LD_ADDR_VAR 0 39
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: LD_INT 0
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: LD_INT 1
63502: NEG
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 1
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 1
63520: PUSH
63521: LD_INT 1
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: LD_INT 1
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 1
63540: NEG
63541: PUSH
63542: LD_INT 0
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 1
63551: NEG
63552: PUSH
63553: LD_INT 1
63555: NEG
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 1
63563: NEG
63564: PUSH
63565: LD_INT 2
63567: NEG
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 1
63575: PUSH
63576: LD_INT 2
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63594: LD_ADDR_VAR 0 40
63598: PUSH
63599: LD_INT 0
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: LD_INT 1
63614: NEG
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 1
63632: PUSH
63633: LD_INT 1
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: LD_INT 1
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 1
63652: NEG
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: NEG
63664: PUSH
63665: LD_INT 1
63667: NEG
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 1
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 1
63686: NEG
63687: PUSH
63688: LD_INT 1
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63706: LD_ADDR_VAR 0 41
63710: PUSH
63711: LD_INT 0
63713: PUSH
63714: LD_INT 0
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 1
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 1
63744: PUSH
63745: LD_INT 1
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 0
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 1
63764: NEG
63765: PUSH
63766: LD_INT 0
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 1
63775: NEG
63776: PUSH
63777: LD_INT 1
63779: NEG
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 1
63787: NEG
63788: PUSH
63789: LD_INT 2
63791: NEG
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 1
63799: PUSH
63800: LD_INT 1
63802: NEG
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 2
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 2
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 2
63830: PUSH
63831: LD_INT 2
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 1
63840: PUSH
63841: LD_INT 2
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 1
63850: NEG
63851: PUSH
63852: LD_INT 1
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 2
63861: NEG
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 2
63872: NEG
63873: PUSH
63874: LD_INT 1
63876: NEG
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 2
63884: NEG
63885: PUSH
63886: LD_INT 2
63888: NEG
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 2
63896: NEG
63897: PUSH
63898: LD_INT 3
63900: NEG
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 2
63908: PUSH
63909: LD_INT 1
63911: NEG
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 3
63919: PUSH
63920: LD_INT 0
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 3
63929: PUSH
63930: LD_INT 1
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 3
63939: PUSH
63940: LD_INT 2
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 3
63949: PUSH
63950: LD_INT 3
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 2
63959: PUSH
63960: LD_INT 3
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 2
63969: NEG
63970: PUSH
63971: LD_INT 1
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 3
63980: NEG
63981: PUSH
63982: LD_INT 0
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 3
63991: NEG
63992: PUSH
63993: LD_INT 1
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 3
64003: NEG
64004: PUSH
64005: LD_INT 2
64007: NEG
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 3
64015: NEG
64016: PUSH
64017: LD_INT 3
64019: NEG
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64056: LD_ADDR_VAR 0 42
64060: PUSH
64061: LD_INT 0
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 0
64073: PUSH
64074: LD_INT 1
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 1
64084: PUSH
64085: LD_INT 0
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 1
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: LD_INT 1
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 1
64114: NEG
64115: PUSH
64116: LD_INT 0
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 1
64125: NEG
64126: PUSH
64127: LD_INT 1
64129: NEG
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 1
64137: NEG
64138: PUSH
64139: LD_INT 2
64141: NEG
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 0
64149: PUSH
64150: LD_INT 2
64152: NEG
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 1
64160: PUSH
64161: LD_INT 1
64163: NEG
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 2
64171: PUSH
64172: LD_INT 1
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 2
64181: PUSH
64182: LD_INT 2
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: PUSH
64192: LD_INT 2
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 0
64201: PUSH
64202: LD_INT 2
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 1
64211: NEG
64212: PUSH
64213: LD_INT 1
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 2
64222: NEG
64223: PUSH
64224: LD_INT 1
64226: NEG
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 2
64234: NEG
64235: PUSH
64236: LD_INT 2
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 2
64246: NEG
64247: PUSH
64248: LD_INT 3
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 1
64258: NEG
64259: PUSH
64260: LD_INT 3
64262: NEG
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 0
64270: PUSH
64271: LD_INT 3
64273: NEG
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 1
64281: PUSH
64282: LD_INT 2
64284: NEG
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 3
64292: PUSH
64293: LD_INT 2
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 3
64302: PUSH
64303: LD_INT 3
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 2
64312: PUSH
64313: LD_INT 3
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 1
64322: PUSH
64323: LD_INT 3
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 0
64332: PUSH
64333: LD_INT 3
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 1
64342: NEG
64343: PUSH
64344: LD_INT 2
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 3
64353: NEG
64354: PUSH
64355: LD_INT 2
64357: NEG
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 3
64365: NEG
64366: PUSH
64367: LD_INT 3
64369: NEG
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64406: LD_ADDR_VAR 0 43
64410: PUSH
64411: LD_INT 0
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 1
64434: PUSH
64435: LD_INT 0
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 1
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 0
64454: PUSH
64455: LD_INT 1
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 1
64464: NEG
64465: PUSH
64466: LD_INT 0
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 1
64475: NEG
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 1
64487: NEG
64488: PUSH
64489: LD_INT 2
64491: NEG
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: LD_INT 2
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: LD_INT 1
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 2
64521: PUSH
64522: LD_INT 0
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 2
64531: PUSH
64532: LD_INT 1
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: LD_INT 2
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 0
64551: PUSH
64552: LD_INT 2
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 1
64561: NEG
64562: PUSH
64563: LD_INT 1
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 2
64572: NEG
64573: PUSH
64574: LD_INT 0
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 2
64583: NEG
64584: PUSH
64585: LD_INT 1
64587: NEG
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 1
64595: NEG
64596: PUSH
64597: LD_INT 3
64599: NEG
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 0
64607: PUSH
64608: LD_INT 3
64610: NEG
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 1
64618: PUSH
64619: LD_INT 2
64621: NEG
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 2
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 3
64640: PUSH
64641: LD_INT 0
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 3
64650: PUSH
64651: LD_INT 1
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 1
64660: PUSH
64661: LD_INT 3
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 0
64670: PUSH
64671: LD_INT 3
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 1
64680: NEG
64681: PUSH
64682: LD_INT 2
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 2
64691: NEG
64692: PUSH
64693: LD_INT 1
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 3
64702: NEG
64703: PUSH
64704: LD_INT 0
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 3
64713: NEG
64714: PUSH
64715: LD_INT 1
64717: NEG
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64754: LD_ADDR_VAR 0 44
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: LD_INT 0
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 0
64771: PUSH
64772: LD_INT 1
64774: NEG
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 1
64782: PUSH
64783: LD_INT 0
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 1
64792: PUSH
64793: LD_INT 1
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 0
64802: PUSH
64803: LD_INT 1
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 1
64812: NEG
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 1
64823: NEG
64824: PUSH
64825: LD_INT 1
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 1
64835: NEG
64836: PUSH
64837: LD_INT 2
64839: NEG
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 1
64847: PUSH
64848: LD_INT 1
64850: NEG
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 2
64858: PUSH
64859: LD_INT 0
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 2
64868: PUSH
64869: LD_INT 1
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 2
64878: PUSH
64879: LD_INT 2
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 1
64888: PUSH
64889: LD_INT 2
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 1
64898: NEG
64899: PUSH
64900: LD_INT 1
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 2
64909: NEG
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 2
64920: NEG
64921: PUSH
64922: LD_INT 1
64924: NEG
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 2
64932: NEG
64933: PUSH
64934: LD_INT 2
64936: NEG
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 2
64944: NEG
64945: PUSH
64946: LD_INT 3
64948: NEG
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 2
64956: PUSH
64957: LD_INT 1
64959: NEG
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 3
64967: PUSH
64968: LD_INT 0
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 3
64977: PUSH
64978: LD_INT 1
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 3
64987: PUSH
64988: LD_INT 2
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 3
64997: PUSH
64998: LD_INT 3
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 2
65007: PUSH
65008: LD_INT 3
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 2
65017: NEG
65018: PUSH
65019: LD_INT 1
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 3
65028: NEG
65029: PUSH
65030: LD_INT 0
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 3
65039: NEG
65040: PUSH
65041: LD_INT 1
65043: NEG
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 3
65051: NEG
65052: PUSH
65053: LD_INT 2
65055: NEG
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 3
65063: NEG
65064: PUSH
65065: LD_INT 3
65067: NEG
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65104: LD_ADDR_VAR 0 45
65108: PUSH
65109: LD_INT 0
65111: PUSH
65112: LD_INT 0
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 0
65121: PUSH
65122: LD_INT 1
65124: NEG
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 1
65132: PUSH
65133: LD_INT 0
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 1
65142: PUSH
65143: LD_INT 1
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 0
65152: PUSH
65153: LD_INT 1
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 1
65162: NEG
65163: PUSH
65164: LD_INT 0
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 1
65173: NEG
65174: PUSH
65175: LD_INT 1
65177: NEG
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 1
65185: NEG
65186: PUSH
65187: LD_INT 2
65189: NEG
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 0
65197: PUSH
65198: LD_INT 2
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: LD_INT 1
65211: NEG
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 2
65219: PUSH
65220: LD_INT 1
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 2
65229: PUSH
65230: LD_INT 2
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 1
65239: PUSH
65240: LD_INT 2
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 0
65249: PUSH
65250: LD_INT 2
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 1
65259: NEG
65260: PUSH
65261: LD_INT 1
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 2
65270: NEG
65271: PUSH
65272: LD_INT 1
65274: NEG
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 2
65282: NEG
65283: PUSH
65284: LD_INT 2
65286: NEG
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 2
65294: NEG
65295: PUSH
65296: LD_INT 3
65298: NEG
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 1
65306: NEG
65307: PUSH
65308: LD_INT 3
65310: NEG
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 0
65318: PUSH
65319: LD_INT 3
65321: NEG
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 1
65329: PUSH
65330: LD_INT 2
65332: NEG
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 3
65340: PUSH
65341: LD_INT 2
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 3
65350: PUSH
65351: LD_INT 3
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 2
65360: PUSH
65361: LD_INT 3
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 1
65370: PUSH
65371: LD_INT 3
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 0
65380: PUSH
65381: LD_INT 3
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 1
65390: NEG
65391: PUSH
65392: LD_INT 2
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 3
65401: NEG
65402: PUSH
65403: LD_INT 2
65405: NEG
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 3
65413: NEG
65414: PUSH
65415: LD_INT 3
65417: NEG
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65454: LD_ADDR_VAR 0 46
65458: PUSH
65459: LD_INT 0
65461: PUSH
65462: LD_INT 0
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 0
65471: PUSH
65472: LD_INT 1
65474: NEG
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 1
65482: PUSH
65483: LD_INT 0
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 1
65492: PUSH
65493: LD_INT 1
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 0
65502: PUSH
65503: LD_INT 1
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 1
65512: NEG
65513: PUSH
65514: LD_INT 0
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 1
65523: NEG
65524: PUSH
65525: LD_INT 1
65527: NEG
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 1
65535: NEG
65536: PUSH
65537: LD_INT 2
65539: NEG
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 0
65547: PUSH
65548: LD_INT 2
65550: NEG
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 1
65558: PUSH
65559: LD_INT 1
65561: NEG
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 2
65569: PUSH
65570: LD_INT 0
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 2
65579: PUSH
65580: LD_INT 1
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 1
65589: PUSH
65590: LD_INT 2
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 0
65599: PUSH
65600: LD_INT 2
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 1
65609: NEG
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 2
65620: NEG
65621: PUSH
65622: LD_INT 0
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 2
65631: NEG
65632: PUSH
65633: LD_INT 1
65635: NEG
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 1
65643: NEG
65644: PUSH
65645: LD_INT 3
65647: NEG
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 0
65655: PUSH
65656: LD_INT 3
65658: NEG
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 1
65666: PUSH
65667: LD_INT 2
65669: NEG
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 2
65677: PUSH
65678: LD_INT 1
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 3
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 3
65698: PUSH
65699: LD_INT 1
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 1
65708: PUSH
65709: LD_INT 3
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 0
65718: PUSH
65719: LD_INT 3
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 1
65728: NEG
65729: PUSH
65730: LD_INT 2
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 2
65739: NEG
65740: PUSH
65741: LD_INT 1
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 3
65750: NEG
65751: PUSH
65752: LD_INT 0
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 3
65761: NEG
65762: PUSH
65763: LD_INT 1
65765: NEG
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65802: LD_ADDR_VAR 0 47
65806: PUSH
65807: LD_INT 0
65809: PUSH
65810: LD_INT 0
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 0
65819: PUSH
65820: LD_INT 1
65822: NEG
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 1
65830: PUSH
65831: LD_INT 0
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 1
65840: PUSH
65841: LD_INT 1
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 0
65850: PUSH
65851: LD_INT 1
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 1
65860: NEG
65861: PUSH
65862: LD_INT 0
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 1
65871: NEG
65872: PUSH
65873: LD_INT 1
65875: NEG
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 1
65883: NEG
65884: PUSH
65885: LD_INT 2
65887: NEG
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 0
65895: PUSH
65896: LD_INT 2
65898: NEG
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 1
65906: PUSH
65907: LD_INT 1
65909: NEG
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 2
65917: NEG
65918: PUSH
65919: LD_INT 1
65921: NEG
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 2
65929: NEG
65930: PUSH
65931: LD_INT 2
65933: NEG
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65953: LD_ADDR_VAR 0 48
65957: PUSH
65958: LD_INT 0
65960: PUSH
65961: LD_INT 0
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 0
65970: PUSH
65971: LD_INT 1
65973: NEG
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 1
65981: PUSH
65982: LD_INT 0
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 1
65991: PUSH
65992: LD_INT 1
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 0
66001: PUSH
66002: LD_INT 1
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 1
66011: NEG
66012: PUSH
66013: LD_INT 0
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 1
66022: NEG
66023: PUSH
66024: LD_INT 1
66026: NEG
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 1
66034: NEG
66035: PUSH
66036: LD_INT 2
66038: NEG
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 0
66046: PUSH
66047: LD_INT 2
66049: NEG
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 1
66057: PUSH
66058: LD_INT 1
66060: NEG
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 2
66068: PUSH
66069: LD_INT 0
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 2
66078: PUSH
66079: LD_INT 1
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66100: LD_ADDR_VAR 0 49
66104: PUSH
66105: LD_INT 0
66107: PUSH
66108: LD_INT 0
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 0
66117: PUSH
66118: LD_INT 1
66120: NEG
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 1
66128: PUSH
66129: LD_INT 0
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 1
66138: PUSH
66139: LD_INT 1
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 0
66148: PUSH
66149: LD_INT 1
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 1
66158: NEG
66159: PUSH
66160: LD_INT 0
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 1
66169: NEG
66170: PUSH
66171: LD_INT 1
66173: NEG
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 1
66181: PUSH
66182: LD_INT 1
66184: NEG
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 2
66192: PUSH
66193: LD_INT 0
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 2
66202: PUSH
66203: LD_INT 1
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 2
66212: PUSH
66213: LD_INT 2
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 1
66222: PUSH
66223: LD_INT 2
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66244: LD_ADDR_VAR 0 50
66248: PUSH
66249: LD_INT 0
66251: PUSH
66252: LD_INT 0
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: LD_INT 1
66264: NEG
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 1
66272: PUSH
66273: LD_INT 0
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 1
66282: PUSH
66283: LD_INT 1
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: LD_INT 1
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 1
66302: NEG
66303: PUSH
66304: LD_INT 0
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 1
66313: NEG
66314: PUSH
66315: LD_INT 1
66317: NEG
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 2
66325: PUSH
66326: LD_INT 1
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 2
66335: PUSH
66336: LD_INT 2
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 1
66345: PUSH
66346: LD_INT 2
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 0
66355: PUSH
66356: LD_INT 2
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 1
66365: NEG
66366: PUSH
66367: LD_INT 1
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66388: LD_ADDR_VAR 0 51
66392: PUSH
66393: LD_INT 0
66395: PUSH
66396: LD_INT 0
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 0
66405: PUSH
66406: LD_INT 1
66408: NEG
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 1
66416: PUSH
66417: LD_INT 0
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 1
66426: PUSH
66427: LD_INT 1
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 0
66436: PUSH
66437: LD_INT 1
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 1
66446: NEG
66447: PUSH
66448: LD_INT 0
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 1
66457: NEG
66458: PUSH
66459: LD_INT 1
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 1
66469: PUSH
66470: LD_INT 2
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 0
66479: PUSH
66480: LD_INT 2
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 1
66489: NEG
66490: PUSH
66491: LD_INT 1
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 2
66500: NEG
66501: PUSH
66502: LD_INT 0
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 2
66511: NEG
66512: PUSH
66513: LD_INT 1
66515: NEG
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66535: LD_ADDR_VAR 0 52
66539: PUSH
66540: LD_INT 0
66542: PUSH
66543: LD_INT 0
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 0
66552: PUSH
66553: LD_INT 1
66555: NEG
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 1
66563: PUSH
66564: LD_INT 0
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 1
66573: PUSH
66574: LD_INT 1
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 0
66583: PUSH
66584: LD_INT 1
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 1
66593: NEG
66594: PUSH
66595: LD_INT 0
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 1
66604: NEG
66605: PUSH
66606: LD_INT 1
66608: NEG
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 1
66616: NEG
66617: PUSH
66618: LD_INT 2
66620: NEG
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 1
66628: NEG
66629: PUSH
66630: LD_INT 1
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 2
66639: NEG
66640: PUSH
66641: LD_INT 0
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 2
66650: NEG
66651: PUSH
66652: LD_INT 1
66654: NEG
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 2
66662: NEG
66663: PUSH
66664: LD_INT 2
66666: NEG
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66686: LD_ADDR_VAR 0 53
66690: PUSH
66691: LD_INT 0
66693: PUSH
66694: LD_INT 0
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 0
66703: PUSH
66704: LD_INT 1
66706: NEG
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 1
66714: PUSH
66715: LD_INT 0
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 1
66724: PUSH
66725: LD_INT 1
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 0
66734: PUSH
66735: LD_INT 1
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 1
66744: NEG
66745: PUSH
66746: LD_INT 0
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 1
66755: NEG
66756: PUSH
66757: LD_INT 1
66759: NEG
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 1
66767: NEG
66768: PUSH
66769: LD_INT 2
66771: NEG
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 0
66779: PUSH
66780: LD_INT 2
66782: NEG
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 1
66790: PUSH
66791: LD_INT 1
66793: NEG
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 2
66801: PUSH
66802: LD_INT 0
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 2
66811: PUSH
66812: LD_INT 1
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 2
66821: PUSH
66822: LD_INT 2
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 1
66831: PUSH
66832: LD_INT 2
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 0
66841: PUSH
66842: LD_INT 2
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 1
66851: NEG
66852: PUSH
66853: LD_INT 1
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 2
66862: NEG
66863: PUSH
66864: LD_INT 0
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 2
66873: NEG
66874: PUSH
66875: LD_INT 1
66877: NEG
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 2
66885: NEG
66886: PUSH
66887: LD_INT 2
66889: NEG
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66916: LD_ADDR_VAR 0 54
66920: PUSH
66921: LD_INT 0
66923: PUSH
66924: LD_INT 0
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 0
66933: PUSH
66934: LD_INT 1
66936: NEG
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 1
66944: PUSH
66945: LD_INT 0
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 1
66954: PUSH
66955: LD_INT 1
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 0
66964: PUSH
66965: LD_INT 1
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 1
66974: NEG
66975: PUSH
66976: LD_INT 0
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 1
66985: NEG
66986: PUSH
66987: LD_INT 1
66989: NEG
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 1
66997: NEG
66998: PUSH
66999: LD_INT 2
67001: NEG
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 0
67009: PUSH
67010: LD_INT 2
67012: NEG
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 1
67020: PUSH
67021: LD_INT 1
67023: NEG
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 2
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 2
67041: PUSH
67042: LD_INT 1
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 2
67051: PUSH
67052: LD_INT 2
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 1
67061: PUSH
67062: LD_INT 2
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 0
67071: PUSH
67072: LD_INT 2
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 1
67081: NEG
67082: PUSH
67083: LD_INT 1
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 2
67092: NEG
67093: PUSH
67094: LD_INT 0
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 2
67103: NEG
67104: PUSH
67105: LD_INT 1
67107: NEG
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 2
67115: NEG
67116: PUSH
67117: LD_INT 2
67119: NEG
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67146: LD_ADDR_VAR 0 55
67150: PUSH
67151: LD_INT 0
67153: PUSH
67154: LD_INT 0
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 0
67163: PUSH
67164: LD_INT 1
67166: NEG
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 1
67174: PUSH
67175: LD_INT 0
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 1
67184: PUSH
67185: LD_INT 1
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 0
67194: PUSH
67195: LD_INT 1
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 1
67204: NEG
67205: PUSH
67206: LD_INT 0
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 1
67215: NEG
67216: PUSH
67217: LD_INT 1
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 1
67227: NEG
67228: PUSH
67229: LD_INT 2
67231: NEG
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 0
67239: PUSH
67240: LD_INT 2
67242: NEG
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 1
67250: PUSH
67251: LD_INT 1
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 2
67261: PUSH
67262: LD_INT 0
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 2
67271: PUSH
67272: LD_INT 1
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 2
67281: PUSH
67282: LD_INT 2
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 1
67291: PUSH
67292: LD_INT 2
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 0
67301: PUSH
67302: LD_INT 2
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 1
67311: NEG
67312: PUSH
67313: LD_INT 1
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 2
67322: NEG
67323: PUSH
67324: LD_INT 0
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 2
67333: NEG
67334: PUSH
67335: LD_INT 1
67337: NEG
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 2
67345: NEG
67346: PUSH
67347: LD_INT 2
67349: NEG
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67376: LD_ADDR_VAR 0 56
67380: PUSH
67381: LD_INT 0
67383: PUSH
67384: LD_INT 0
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 0
67393: PUSH
67394: LD_INT 1
67396: NEG
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 1
67404: PUSH
67405: LD_INT 0
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 1
67414: PUSH
67415: LD_INT 1
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 0
67424: PUSH
67425: LD_INT 1
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 1
67434: NEG
67435: PUSH
67436: LD_INT 0
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 1
67445: NEG
67446: PUSH
67447: LD_INT 1
67449: NEG
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 1
67457: NEG
67458: PUSH
67459: LD_INT 2
67461: NEG
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 0
67469: PUSH
67470: LD_INT 2
67472: NEG
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 1
67480: PUSH
67481: LD_INT 1
67483: NEG
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 2
67491: PUSH
67492: LD_INT 0
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 2
67501: PUSH
67502: LD_INT 1
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 2
67511: PUSH
67512: LD_INT 2
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 1
67521: PUSH
67522: LD_INT 2
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 0
67531: PUSH
67532: LD_INT 2
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 1
67541: NEG
67542: PUSH
67543: LD_INT 1
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 2
67552: NEG
67553: PUSH
67554: LD_INT 0
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 2
67563: NEG
67564: PUSH
67565: LD_INT 1
67567: NEG
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 2
67575: NEG
67576: PUSH
67577: LD_INT 2
67579: NEG
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67606: LD_ADDR_VAR 0 57
67610: PUSH
67611: LD_INT 0
67613: PUSH
67614: LD_INT 0
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 0
67623: PUSH
67624: LD_INT 1
67626: NEG
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 1
67634: PUSH
67635: LD_INT 0
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 1
67644: PUSH
67645: LD_INT 1
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 0
67654: PUSH
67655: LD_INT 1
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 1
67664: NEG
67665: PUSH
67666: LD_INT 0
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 1
67675: NEG
67676: PUSH
67677: LD_INT 1
67679: NEG
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 1
67687: NEG
67688: PUSH
67689: LD_INT 2
67691: NEG
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 0
67699: PUSH
67700: LD_INT 2
67702: NEG
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 1
67710: PUSH
67711: LD_INT 1
67713: NEG
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 2
67721: PUSH
67722: LD_INT 0
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 2
67731: PUSH
67732: LD_INT 1
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 2
67741: PUSH
67742: LD_INT 2
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 1
67751: PUSH
67752: LD_INT 2
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 0
67761: PUSH
67762: LD_INT 2
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 1
67771: NEG
67772: PUSH
67773: LD_INT 1
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 2
67782: NEG
67783: PUSH
67784: LD_INT 0
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 2
67793: NEG
67794: PUSH
67795: LD_INT 1
67797: NEG
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 2
67805: NEG
67806: PUSH
67807: LD_INT 2
67809: NEG
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67836: LD_ADDR_VAR 0 58
67840: PUSH
67841: LD_INT 0
67843: PUSH
67844: LD_INT 0
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 0
67853: PUSH
67854: LD_INT 1
67856: NEG
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 1
67864: PUSH
67865: LD_INT 0
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 1
67874: PUSH
67875: LD_INT 1
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 0
67884: PUSH
67885: LD_INT 1
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 1
67894: NEG
67895: PUSH
67896: LD_INT 0
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 1
67905: NEG
67906: PUSH
67907: LD_INT 1
67909: NEG
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 1
67917: NEG
67918: PUSH
67919: LD_INT 2
67921: NEG
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 0
67929: PUSH
67930: LD_INT 2
67932: NEG
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 1
67940: PUSH
67941: LD_INT 1
67943: NEG
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 2
67951: PUSH
67952: LD_INT 0
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 2
67961: PUSH
67962: LD_INT 1
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 2
67971: PUSH
67972: LD_INT 2
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 1
67981: PUSH
67982: LD_INT 2
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 0
67991: PUSH
67992: LD_INT 2
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 1
68001: NEG
68002: PUSH
68003: LD_INT 1
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 2
68012: NEG
68013: PUSH
68014: LD_INT 0
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 2
68023: NEG
68024: PUSH
68025: LD_INT 1
68027: NEG
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 2
68035: NEG
68036: PUSH
68037: LD_INT 2
68039: NEG
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68066: LD_ADDR_VAR 0 59
68070: PUSH
68071: LD_INT 0
68073: PUSH
68074: LD_INT 0
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 0
68083: PUSH
68084: LD_INT 1
68086: NEG
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 1
68094: PUSH
68095: LD_INT 0
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 1
68104: PUSH
68105: LD_INT 1
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 0
68114: PUSH
68115: LD_INT 1
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 1
68124: NEG
68125: PUSH
68126: LD_INT 0
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 1
68135: NEG
68136: PUSH
68137: LD_INT 1
68139: NEG
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68154: LD_ADDR_VAR 0 60
68158: PUSH
68159: LD_INT 0
68161: PUSH
68162: LD_INT 0
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 0
68171: PUSH
68172: LD_INT 1
68174: NEG
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 1
68182: PUSH
68183: LD_INT 0
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 1
68192: PUSH
68193: LD_INT 1
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 0
68202: PUSH
68203: LD_INT 1
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 1
68212: NEG
68213: PUSH
68214: LD_INT 0
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 1
68223: NEG
68224: PUSH
68225: LD_INT 1
68227: NEG
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68242: LD_ADDR_VAR 0 61
68246: PUSH
68247: LD_INT 0
68249: PUSH
68250: LD_INT 0
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 0
68259: PUSH
68260: LD_INT 1
68262: NEG
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 1
68270: PUSH
68271: LD_INT 0
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 1
68280: PUSH
68281: LD_INT 1
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 0
68290: PUSH
68291: LD_INT 1
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 1
68300: NEG
68301: PUSH
68302: LD_INT 0
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 1
68311: NEG
68312: PUSH
68313: LD_INT 1
68315: NEG
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68330: LD_ADDR_VAR 0 62
68334: PUSH
68335: LD_INT 0
68337: PUSH
68338: LD_INT 0
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 0
68347: PUSH
68348: LD_INT 1
68350: NEG
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 1
68358: PUSH
68359: LD_INT 0
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 1
68368: PUSH
68369: LD_INT 1
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 0
68378: PUSH
68379: LD_INT 1
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 1
68388: NEG
68389: PUSH
68390: LD_INT 0
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 1
68399: NEG
68400: PUSH
68401: LD_INT 1
68403: NEG
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68418: LD_ADDR_VAR 0 63
68422: PUSH
68423: LD_INT 0
68425: PUSH
68426: LD_INT 0
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 0
68435: PUSH
68436: LD_INT 1
68438: NEG
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 1
68446: PUSH
68447: LD_INT 0
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 1
68456: PUSH
68457: LD_INT 1
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 0
68466: PUSH
68467: LD_INT 1
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 1
68476: NEG
68477: PUSH
68478: LD_INT 0
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 1
68487: NEG
68488: PUSH
68489: LD_INT 1
68491: NEG
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68506: LD_ADDR_VAR 0 64
68510: PUSH
68511: LD_INT 0
68513: PUSH
68514: LD_INT 0
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 0
68523: PUSH
68524: LD_INT 1
68526: NEG
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 1
68534: PUSH
68535: LD_INT 0
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: LD_INT 1
68544: PUSH
68545: LD_INT 1
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PUSH
68552: LD_INT 0
68554: PUSH
68555: LD_INT 1
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 1
68564: NEG
68565: PUSH
68566: LD_INT 0
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 1
68575: NEG
68576: PUSH
68577: LD_INT 1
68579: NEG
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: ST_TO_ADDR
// end ; 1 :
68594: GO 74491
68596: LD_INT 1
68598: DOUBLE
68599: EQUAL
68600: IFTRUE 68604
68602: GO 71227
68604: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68605: LD_ADDR_VAR 0 11
68609: PUSH
68610: LD_INT 1
68612: NEG
68613: PUSH
68614: LD_INT 3
68616: NEG
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: LD_INT 0
68624: PUSH
68625: LD_INT 3
68627: NEG
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 1
68635: PUSH
68636: LD_INT 2
68638: NEG
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: LIST
68648: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68649: LD_ADDR_VAR 0 12
68653: PUSH
68654: LD_INT 2
68656: PUSH
68657: LD_INT 1
68659: NEG
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 3
68667: PUSH
68668: LD_INT 0
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 3
68677: PUSH
68678: LD_INT 1
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: LIST
68689: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68690: LD_ADDR_VAR 0 13
68694: PUSH
68695: LD_INT 3
68697: PUSH
68698: LD_INT 2
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 3
68707: PUSH
68708: LD_INT 3
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 2
68717: PUSH
68718: LD_INT 3
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: LIST
68729: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68730: LD_ADDR_VAR 0 14
68734: PUSH
68735: LD_INT 1
68737: PUSH
68738: LD_INT 3
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: LD_INT 3
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 1
68757: NEG
68758: PUSH
68759: LD_INT 2
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: LIST
68770: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68771: LD_ADDR_VAR 0 15
68775: PUSH
68776: LD_INT 2
68778: NEG
68779: PUSH
68780: LD_INT 1
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 3
68789: NEG
68790: PUSH
68791: LD_INT 0
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 3
68800: NEG
68801: PUSH
68802: LD_INT 1
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: LIST
68814: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68815: LD_ADDR_VAR 0 16
68819: PUSH
68820: LD_INT 2
68822: NEG
68823: PUSH
68824: LD_INT 3
68826: NEG
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 3
68834: NEG
68835: PUSH
68836: LD_INT 2
68838: NEG
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 3
68846: NEG
68847: PUSH
68848: LD_INT 3
68850: NEG
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: LIST
68860: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68861: LD_ADDR_VAR 0 17
68865: PUSH
68866: LD_INT 1
68868: NEG
68869: PUSH
68870: LD_INT 3
68872: NEG
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 0
68880: PUSH
68881: LD_INT 3
68883: NEG
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 1
68891: PUSH
68892: LD_INT 2
68894: NEG
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: LIST
68904: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68905: LD_ADDR_VAR 0 18
68909: PUSH
68910: LD_INT 2
68912: PUSH
68913: LD_INT 1
68915: NEG
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 3
68923: PUSH
68924: LD_INT 0
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 3
68933: PUSH
68934: LD_INT 1
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: LIST
68945: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68946: LD_ADDR_VAR 0 19
68950: PUSH
68951: LD_INT 3
68953: PUSH
68954: LD_INT 2
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 3
68963: PUSH
68964: LD_INT 3
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 2
68973: PUSH
68974: LD_INT 3
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: LIST
68985: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68986: LD_ADDR_VAR 0 20
68990: PUSH
68991: LD_INT 1
68993: PUSH
68994: LD_INT 3
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: LD_INT 0
69003: PUSH
69004: LD_INT 3
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: PUSH
69011: LD_INT 1
69013: NEG
69014: PUSH
69015: LD_INT 2
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: LIST
69026: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69027: LD_ADDR_VAR 0 21
69031: PUSH
69032: LD_INT 2
69034: NEG
69035: PUSH
69036: LD_INT 1
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 3
69045: NEG
69046: PUSH
69047: LD_INT 0
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 3
69056: NEG
69057: PUSH
69058: LD_INT 1
69060: NEG
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: LIST
69070: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69071: LD_ADDR_VAR 0 22
69075: PUSH
69076: LD_INT 2
69078: NEG
69079: PUSH
69080: LD_INT 3
69082: NEG
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 3
69090: NEG
69091: PUSH
69092: LD_INT 2
69094: NEG
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 3
69102: NEG
69103: PUSH
69104: LD_INT 3
69106: NEG
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: LIST
69116: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
69117: LD_ADDR_VAR 0 23
69121: PUSH
69122: LD_INT 0
69124: PUSH
69125: LD_INT 3
69127: NEG
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 1
69135: NEG
69136: PUSH
69137: LD_INT 4
69139: NEG
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 1
69147: PUSH
69148: LD_INT 3
69150: NEG
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: LIST
69160: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
69161: LD_ADDR_VAR 0 24
69165: PUSH
69166: LD_INT 3
69168: PUSH
69169: LD_INT 0
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 3
69178: PUSH
69179: LD_INT 1
69181: NEG
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 4
69189: PUSH
69190: LD_INT 1
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: LIST
69201: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
69202: LD_ADDR_VAR 0 25
69206: PUSH
69207: LD_INT 3
69209: PUSH
69210: LD_INT 3
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 4
69219: PUSH
69220: LD_INT 3
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 3
69229: PUSH
69230: LD_INT 4
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: LIST
69241: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
69242: LD_ADDR_VAR 0 26
69246: PUSH
69247: LD_INT 0
69249: PUSH
69250: LD_INT 3
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 1
69259: PUSH
69260: LD_INT 4
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 1
69269: NEG
69270: PUSH
69271: LD_INT 3
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: LIST
69282: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
69283: LD_ADDR_VAR 0 27
69287: PUSH
69288: LD_INT 3
69290: NEG
69291: PUSH
69292: LD_INT 0
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 3
69301: NEG
69302: PUSH
69303: LD_INT 1
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 4
69312: NEG
69313: PUSH
69314: LD_INT 1
69316: NEG
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: LIST
69326: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
69327: LD_ADDR_VAR 0 28
69331: PUSH
69332: LD_INT 3
69334: NEG
69335: PUSH
69336: LD_INT 3
69338: NEG
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 3
69346: NEG
69347: PUSH
69348: LD_INT 4
69350: NEG
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 4
69358: NEG
69359: PUSH
69360: LD_INT 3
69362: NEG
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: LIST
69372: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69373: LD_ADDR_VAR 0 29
69377: PUSH
69378: LD_INT 1
69380: NEG
69381: PUSH
69382: LD_INT 3
69384: NEG
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 0
69392: PUSH
69393: LD_INT 3
69395: NEG
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 1
69403: PUSH
69404: LD_INT 2
69406: NEG
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: LD_INT 1
69414: NEG
69415: PUSH
69416: LD_INT 4
69418: NEG
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 0
69426: PUSH
69427: LD_INT 4
69429: NEG
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 1
69437: PUSH
69438: LD_INT 3
69440: NEG
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 1
69448: NEG
69449: PUSH
69450: LD_INT 5
69452: NEG
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 0
69460: PUSH
69461: LD_INT 5
69463: NEG
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: PUSH
69469: LD_INT 1
69471: PUSH
69472: LD_INT 4
69474: NEG
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 1
69482: NEG
69483: PUSH
69484: LD_INT 6
69486: NEG
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: PUSH
69492: LD_INT 0
69494: PUSH
69495: LD_INT 6
69497: NEG
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 1
69505: PUSH
69506: LD_INT 5
69508: NEG
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69528: LD_ADDR_VAR 0 30
69532: PUSH
69533: LD_INT 2
69535: PUSH
69536: LD_INT 1
69538: NEG
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 3
69546: PUSH
69547: LD_INT 0
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 3
69556: PUSH
69557: LD_INT 1
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 3
69566: PUSH
69567: LD_INT 1
69569: NEG
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 4
69577: PUSH
69578: LD_INT 0
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 4
69587: PUSH
69588: LD_INT 1
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 4
69597: PUSH
69598: LD_INT 1
69600: NEG
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 5
69608: PUSH
69609: LD_INT 0
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 5
69618: PUSH
69619: LD_INT 1
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 5
69628: PUSH
69629: LD_INT 1
69631: NEG
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 6
69639: PUSH
69640: LD_INT 0
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 6
69649: PUSH
69650: LD_INT 1
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
69671: LD_ADDR_VAR 0 31
69675: PUSH
69676: LD_INT 3
69678: PUSH
69679: LD_INT 2
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 3
69688: PUSH
69689: LD_INT 3
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 2
69698: PUSH
69699: LD_INT 3
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 4
69708: PUSH
69709: LD_INT 3
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 4
69718: PUSH
69719: LD_INT 4
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 3
69728: PUSH
69729: LD_INT 4
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 5
69738: PUSH
69739: LD_INT 4
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 5
69748: PUSH
69749: LD_INT 5
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 4
69758: PUSH
69759: LD_INT 5
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 6
69768: PUSH
69769: LD_INT 5
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 6
69778: PUSH
69779: LD_INT 6
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 5
69788: PUSH
69789: LD_INT 6
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69810: LD_ADDR_VAR 0 32
69814: PUSH
69815: LD_INT 1
69817: PUSH
69818: LD_INT 3
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PUSH
69825: LD_INT 0
69827: PUSH
69828: LD_INT 3
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 1
69837: NEG
69838: PUSH
69839: LD_INT 2
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 1
69848: PUSH
69849: LD_INT 4
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 0
69858: PUSH
69859: LD_INT 4
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 1
69868: NEG
69869: PUSH
69870: LD_INT 3
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PUSH
69877: LD_INT 1
69879: PUSH
69880: LD_INT 5
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 0
69889: PUSH
69890: LD_INT 5
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 1
69899: NEG
69900: PUSH
69901: LD_INT 4
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: LD_INT 1
69910: PUSH
69911: LD_INT 6
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 0
69920: PUSH
69921: LD_INT 6
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 1
69930: NEG
69931: PUSH
69932: LD_INT 5
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69953: LD_ADDR_VAR 0 33
69957: PUSH
69958: LD_INT 2
69960: NEG
69961: PUSH
69962: LD_INT 1
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 3
69971: NEG
69972: PUSH
69973: LD_INT 0
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 3
69982: NEG
69983: PUSH
69984: LD_INT 1
69986: NEG
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 3
69994: NEG
69995: PUSH
69996: LD_INT 1
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 4
70005: NEG
70006: PUSH
70007: LD_INT 0
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 4
70016: NEG
70017: PUSH
70018: LD_INT 1
70020: NEG
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 4
70028: NEG
70029: PUSH
70030: LD_INT 1
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 5
70039: NEG
70040: PUSH
70041: LD_INT 0
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 5
70050: NEG
70051: PUSH
70052: LD_INT 1
70054: NEG
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: LD_INT 5
70062: NEG
70063: PUSH
70064: LD_INT 1
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 6
70073: NEG
70074: PUSH
70075: LD_INT 0
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 6
70084: NEG
70085: PUSH
70086: LD_INT 1
70088: NEG
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
70108: LD_ADDR_VAR 0 34
70112: PUSH
70113: LD_INT 2
70115: NEG
70116: PUSH
70117: LD_INT 3
70119: NEG
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 3
70127: NEG
70128: PUSH
70129: LD_INT 2
70131: NEG
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 3
70139: NEG
70140: PUSH
70141: LD_INT 3
70143: NEG
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 3
70151: NEG
70152: PUSH
70153: LD_INT 4
70155: NEG
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 4
70163: NEG
70164: PUSH
70165: LD_INT 3
70167: NEG
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 4
70175: NEG
70176: PUSH
70177: LD_INT 4
70179: NEG
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 4
70187: NEG
70188: PUSH
70189: LD_INT 5
70191: NEG
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 5
70199: NEG
70200: PUSH
70201: LD_INT 4
70203: NEG
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 5
70211: NEG
70212: PUSH
70213: LD_INT 5
70215: NEG
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 5
70223: NEG
70224: PUSH
70225: LD_INT 6
70227: NEG
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 6
70235: NEG
70236: PUSH
70237: LD_INT 5
70239: NEG
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: LD_INT 6
70247: NEG
70248: PUSH
70249: LD_INT 6
70251: NEG
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
70271: LD_ADDR_VAR 0 41
70275: PUSH
70276: LD_INT 0
70278: PUSH
70279: LD_INT 2
70281: NEG
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: LD_INT 1
70289: NEG
70290: PUSH
70291: LD_INT 3
70293: NEG
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 1
70301: PUSH
70302: LD_INT 2
70304: NEG
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: LIST
70314: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
70315: LD_ADDR_VAR 0 42
70319: PUSH
70320: LD_INT 2
70322: PUSH
70323: LD_INT 0
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 2
70332: PUSH
70333: LD_INT 1
70335: NEG
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 3
70343: PUSH
70344: LD_INT 1
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: LIST
70355: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70356: LD_ADDR_VAR 0 43
70360: PUSH
70361: LD_INT 2
70363: PUSH
70364: LD_INT 2
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: PUSH
70371: LD_INT 3
70373: PUSH
70374: LD_INT 2
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 2
70383: PUSH
70384: LD_INT 3
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: LIST
70395: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70396: LD_ADDR_VAR 0 44
70400: PUSH
70401: LD_INT 0
70403: PUSH
70404: LD_INT 2
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 1
70413: PUSH
70414: LD_INT 3
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 1
70423: NEG
70424: PUSH
70425: LD_INT 2
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: LIST
70436: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70437: LD_ADDR_VAR 0 45
70441: PUSH
70442: LD_INT 2
70444: NEG
70445: PUSH
70446: LD_INT 0
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 2
70455: NEG
70456: PUSH
70457: LD_INT 1
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 3
70466: NEG
70467: PUSH
70468: LD_INT 1
70470: NEG
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: LIST
70480: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70481: LD_ADDR_VAR 0 46
70485: PUSH
70486: LD_INT 2
70488: NEG
70489: PUSH
70490: LD_INT 2
70492: NEG
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 2
70500: NEG
70501: PUSH
70502: LD_INT 3
70504: NEG
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 3
70512: NEG
70513: PUSH
70514: LD_INT 2
70516: NEG
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: LIST
70526: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70527: LD_ADDR_VAR 0 47
70531: PUSH
70532: LD_INT 2
70534: NEG
70535: PUSH
70536: LD_INT 3
70538: NEG
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 1
70546: NEG
70547: PUSH
70548: LD_INT 3
70550: NEG
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70560: LD_ADDR_VAR 0 48
70564: PUSH
70565: LD_INT 1
70567: PUSH
70568: LD_INT 2
70570: NEG
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: PUSH
70576: LD_INT 2
70578: PUSH
70579: LD_INT 1
70581: NEG
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70591: LD_ADDR_VAR 0 49
70595: PUSH
70596: LD_INT 3
70598: PUSH
70599: LD_INT 1
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: LD_INT 3
70608: PUSH
70609: LD_INT 2
70611: PUSH
70612: EMPTY
70613: LIST
70614: LIST
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
70620: LD_ADDR_VAR 0 50
70624: PUSH
70625: LD_INT 2
70627: PUSH
70628: LD_INT 3
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: PUSH
70635: LD_INT 1
70637: PUSH
70638: LD_INT 3
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
70649: LD_ADDR_VAR 0 51
70653: PUSH
70654: LD_INT 1
70656: NEG
70657: PUSH
70658: LD_INT 2
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: PUSH
70665: LD_INT 2
70667: NEG
70668: PUSH
70669: LD_INT 1
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70680: LD_ADDR_VAR 0 52
70684: PUSH
70685: LD_INT 3
70687: NEG
70688: PUSH
70689: LD_INT 1
70691: NEG
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PUSH
70697: LD_INT 3
70699: NEG
70700: PUSH
70701: LD_INT 2
70703: NEG
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70713: LD_ADDR_VAR 0 53
70717: PUSH
70718: LD_INT 1
70720: NEG
70721: PUSH
70722: LD_INT 3
70724: NEG
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: LD_INT 0
70732: PUSH
70733: LD_INT 3
70735: NEG
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: PUSH
70741: LD_INT 1
70743: PUSH
70744: LD_INT 2
70746: NEG
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: LIST
70756: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70757: LD_ADDR_VAR 0 54
70761: PUSH
70762: LD_INT 2
70764: PUSH
70765: LD_INT 1
70767: NEG
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 3
70775: PUSH
70776: LD_INT 0
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: PUSH
70783: LD_INT 3
70785: PUSH
70786: LD_INT 1
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: LIST
70797: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70798: LD_ADDR_VAR 0 55
70802: PUSH
70803: LD_INT 3
70805: PUSH
70806: LD_INT 2
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 3
70815: PUSH
70816: LD_INT 3
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: LD_INT 2
70825: PUSH
70826: LD_INT 3
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: LIST
70837: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70838: LD_ADDR_VAR 0 56
70842: PUSH
70843: LD_INT 1
70845: PUSH
70846: LD_INT 3
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PUSH
70853: LD_INT 0
70855: PUSH
70856: LD_INT 3
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_INT 1
70865: NEG
70866: PUSH
70867: LD_INT 2
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: LIST
70878: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70879: LD_ADDR_VAR 0 57
70883: PUSH
70884: LD_INT 2
70886: NEG
70887: PUSH
70888: LD_INT 1
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PUSH
70895: LD_INT 3
70897: NEG
70898: PUSH
70899: LD_INT 0
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 3
70908: NEG
70909: PUSH
70910: LD_INT 1
70912: NEG
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: LIST
70922: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70923: LD_ADDR_VAR 0 58
70927: PUSH
70928: LD_INT 2
70930: NEG
70931: PUSH
70932: LD_INT 3
70934: NEG
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: PUSH
70940: LD_INT 3
70942: NEG
70943: PUSH
70944: LD_INT 2
70946: NEG
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 3
70954: NEG
70955: PUSH
70956: LD_INT 3
70958: NEG
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: LIST
70968: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70969: LD_ADDR_VAR 0 59
70973: PUSH
70974: LD_INT 1
70976: NEG
70977: PUSH
70978: LD_INT 2
70980: NEG
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: PUSH
70986: LD_INT 0
70988: PUSH
70989: LD_INT 2
70991: NEG
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: PUSH
70997: LD_INT 1
70999: PUSH
71000: LD_INT 1
71002: NEG
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: LIST
71012: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71013: LD_ADDR_VAR 0 60
71017: PUSH
71018: LD_INT 1
71020: PUSH
71021: LD_INT 1
71023: NEG
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: LD_INT 2
71031: PUSH
71032: LD_INT 0
71034: PUSH
71035: EMPTY
71036: LIST
71037: LIST
71038: PUSH
71039: LD_INT 2
71041: PUSH
71042: LD_INT 1
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: LIST
71053: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71054: LD_ADDR_VAR 0 61
71058: PUSH
71059: LD_INT 2
71061: PUSH
71062: LD_INT 1
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PUSH
71069: LD_INT 2
71071: PUSH
71072: LD_INT 2
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: LD_INT 1
71081: PUSH
71082: LD_INT 2
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: LIST
71093: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71094: LD_ADDR_VAR 0 62
71098: PUSH
71099: LD_INT 1
71101: PUSH
71102: LD_INT 2
71104: PUSH
71105: EMPTY
71106: LIST
71107: LIST
71108: PUSH
71109: LD_INT 0
71111: PUSH
71112: LD_INT 2
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: PUSH
71119: LD_INT 1
71121: NEG
71122: PUSH
71123: LD_INT 1
71125: PUSH
71126: EMPTY
71127: LIST
71128: LIST
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: LIST
71134: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71135: LD_ADDR_VAR 0 63
71139: PUSH
71140: LD_INT 1
71142: NEG
71143: PUSH
71144: LD_INT 1
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 2
71153: NEG
71154: PUSH
71155: LD_INT 0
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: PUSH
71162: LD_INT 2
71164: NEG
71165: PUSH
71166: LD_INT 1
71168: NEG
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: LIST
71178: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71179: LD_ADDR_VAR 0 64
71183: PUSH
71184: LD_INT 1
71186: NEG
71187: PUSH
71188: LD_INT 2
71190: NEG
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: PUSH
71196: LD_INT 2
71198: NEG
71199: PUSH
71200: LD_INT 1
71202: NEG
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 2
71210: NEG
71211: PUSH
71212: LD_INT 2
71214: NEG
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: LIST
71224: ST_TO_ADDR
// end ; 2 :
71225: GO 74491
71227: LD_INT 2
71229: DOUBLE
71230: EQUAL
71231: IFTRUE 71235
71233: GO 74490
71235: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
71236: LD_ADDR_VAR 0 29
71240: PUSH
71241: LD_INT 4
71243: PUSH
71244: LD_INT 0
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: PUSH
71251: LD_INT 4
71253: PUSH
71254: LD_INT 1
71256: NEG
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PUSH
71262: LD_INT 5
71264: PUSH
71265: LD_INT 0
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 5
71274: PUSH
71275: LD_INT 1
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 4
71284: PUSH
71285: LD_INT 1
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PUSH
71292: LD_INT 3
71294: PUSH
71295: LD_INT 0
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: LD_INT 3
71304: PUSH
71305: LD_INT 1
71307: NEG
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 3
71315: PUSH
71316: LD_INT 2
71318: NEG
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: PUSH
71324: LD_INT 5
71326: PUSH
71327: LD_INT 2
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: PUSH
71334: LD_INT 3
71336: PUSH
71337: LD_INT 3
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: LD_INT 3
71346: PUSH
71347: LD_INT 2
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: LD_INT 4
71356: PUSH
71357: LD_INT 3
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: PUSH
71364: LD_INT 4
71366: PUSH
71367: LD_INT 4
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: PUSH
71374: LD_INT 3
71376: PUSH
71377: LD_INT 4
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PUSH
71384: LD_INT 2
71386: PUSH
71387: LD_INT 3
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: PUSH
71394: LD_INT 2
71396: PUSH
71397: LD_INT 2
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: PUSH
71404: LD_INT 4
71406: PUSH
71407: LD_INT 2
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: PUSH
71414: LD_INT 2
71416: PUSH
71417: LD_INT 4
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 0
71426: PUSH
71427: LD_INT 4
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 0
71436: PUSH
71437: LD_INT 3
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: LD_INT 1
71446: PUSH
71447: LD_INT 4
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: PUSH
71454: LD_INT 1
71456: PUSH
71457: LD_INT 5
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 0
71466: PUSH
71467: LD_INT 5
71469: PUSH
71470: EMPTY
71471: LIST
71472: LIST
71473: PUSH
71474: LD_INT 1
71476: NEG
71477: PUSH
71478: LD_INT 4
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 1
71487: NEG
71488: PUSH
71489: LD_INT 3
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: PUSH
71496: LD_INT 2
71498: PUSH
71499: LD_INT 5
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PUSH
71506: LD_INT 2
71508: NEG
71509: PUSH
71510: LD_INT 3
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 3
71519: NEG
71520: PUSH
71521: LD_INT 0
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 3
71530: NEG
71531: PUSH
71532: LD_INT 1
71534: NEG
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 2
71542: NEG
71543: PUSH
71544: LD_INT 0
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 2
71553: NEG
71554: PUSH
71555: LD_INT 1
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: LD_INT 3
71564: NEG
71565: PUSH
71566: LD_INT 1
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: PUSH
71573: LD_INT 4
71575: NEG
71576: PUSH
71577: LD_INT 0
71579: PUSH
71580: EMPTY
71581: LIST
71582: LIST
71583: PUSH
71584: LD_INT 4
71586: NEG
71587: PUSH
71588: LD_INT 1
71590: NEG
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: PUSH
71596: LD_INT 4
71598: NEG
71599: PUSH
71600: LD_INT 2
71602: NEG
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: PUSH
71608: LD_INT 2
71610: NEG
71611: PUSH
71612: LD_INT 2
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 4
71621: NEG
71622: PUSH
71623: LD_INT 4
71625: NEG
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: PUSH
71631: LD_INT 4
71633: NEG
71634: PUSH
71635: LD_INT 5
71637: NEG
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: LD_INT 3
71645: NEG
71646: PUSH
71647: LD_INT 4
71649: NEG
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: LD_INT 3
71657: NEG
71658: PUSH
71659: LD_INT 3
71661: NEG
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PUSH
71667: LD_INT 4
71669: NEG
71670: PUSH
71671: LD_INT 3
71673: NEG
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 5
71681: NEG
71682: PUSH
71683: LD_INT 4
71685: NEG
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: PUSH
71691: LD_INT 5
71693: NEG
71694: PUSH
71695: LD_INT 5
71697: NEG
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: PUSH
71703: LD_INT 3
71705: NEG
71706: PUSH
71707: LD_INT 5
71709: NEG
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: PUSH
71715: LD_INT 5
71717: NEG
71718: PUSH
71719: LD_INT 3
71721: NEG
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: LIST
71750: LIST
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: LIST
71757: LIST
71758: LIST
71759: LIST
71760: LIST
71761: LIST
71762: LIST
71763: LIST
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: LIST
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71774: LD_ADDR_VAR 0 30
71778: PUSH
71779: LD_INT 4
71781: PUSH
71782: LD_INT 4
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: PUSH
71789: LD_INT 4
71791: PUSH
71792: LD_INT 3
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: PUSH
71799: LD_INT 5
71801: PUSH
71802: LD_INT 4
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: PUSH
71809: LD_INT 5
71811: PUSH
71812: LD_INT 5
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: PUSH
71819: LD_INT 4
71821: PUSH
71822: LD_INT 5
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 3
71831: PUSH
71832: LD_INT 4
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: PUSH
71839: LD_INT 3
71841: PUSH
71842: LD_INT 3
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 5
71851: PUSH
71852: LD_INT 3
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: LD_INT 3
71861: PUSH
71862: LD_INT 5
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 0
71871: PUSH
71872: LD_INT 3
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 0
71881: PUSH
71882: LD_INT 2
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: PUSH
71889: LD_INT 1
71891: PUSH
71892: LD_INT 3
71894: PUSH
71895: EMPTY
71896: LIST
71897: LIST
71898: PUSH
71899: LD_INT 1
71901: PUSH
71902: LD_INT 4
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: LD_INT 0
71911: PUSH
71912: LD_INT 4
71914: PUSH
71915: EMPTY
71916: LIST
71917: LIST
71918: PUSH
71919: LD_INT 1
71921: NEG
71922: PUSH
71923: LD_INT 3
71925: PUSH
71926: EMPTY
71927: LIST
71928: LIST
71929: PUSH
71930: LD_INT 1
71932: NEG
71933: PUSH
71934: LD_INT 2
71936: PUSH
71937: EMPTY
71938: LIST
71939: LIST
71940: PUSH
71941: LD_INT 2
71943: PUSH
71944: LD_INT 4
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: PUSH
71951: LD_INT 2
71953: NEG
71954: PUSH
71955: LD_INT 2
71957: PUSH
71958: EMPTY
71959: LIST
71960: LIST
71961: PUSH
71962: LD_INT 4
71964: NEG
71965: PUSH
71966: LD_INT 0
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: PUSH
71973: LD_INT 4
71975: NEG
71976: PUSH
71977: LD_INT 1
71979: NEG
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: PUSH
71985: LD_INT 3
71987: NEG
71988: PUSH
71989: LD_INT 0
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: PUSH
71996: LD_INT 3
71998: NEG
71999: PUSH
72000: LD_INT 1
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PUSH
72007: LD_INT 4
72009: NEG
72010: PUSH
72011: LD_INT 1
72013: PUSH
72014: EMPTY
72015: LIST
72016: LIST
72017: PUSH
72018: LD_INT 5
72020: NEG
72021: PUSH
72022: LD_INT 0
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: PUSH
72029: LD_INT 5
72031: NEG
72032: PUSH
72033: LD_INT 1
72035: NEG
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: PUSH
72041: LD_INT 5
72043: NEG
72044: PUSH
72045: LD_INT 2
72047: NEG
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: LD_INT 3
72055: NEG
72056: PUSH
72057: LD_INT 2
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_INT 3
72066: NEG
72067: PUSH
72068: LD_INT 3
72070: NEG
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: PUSH
72076: LD_INT 3
72078: NEG
72079: PUSH
72080: LD_INT 4
72082: NEG
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: PUSH
72088: LD_INT 2
72090: NEG
72091: PUSH
72092: LD_INT 3
72094: NEG
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: PUSH
72100: LD_INT 2
72102: NEG
72103: PUSH
72104: LD_INT 2
72106: NEG
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: PUSH
72112: LD_INT 3
72114: NEG
72115: PUSH
72116: LD_INT 2
72118: NEG
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: PUSH
72124: LD_INT 4
72126: NEG
72127: PUSH
72128: LD_INT 3
72130: NEG
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: PUSH
72136: LD_INT 4
72138: NEG
72139: PUSH
72140: LD_INT 4
72142: NEG
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: PUSH
72148: LD_INT 2
72150: NEG
72151: PUSH
72152: LD_INT 4
72154: NEG
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: PUSH
72160: LD_INT 4
72162: NEG
72163: PUSH
72164: LD_INT 2
72166: NEG
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: PUSH
72172: LD_INT 0
72174: PUSH
72175: LD_INT 4
72177: NEG
72178: PUSH
72179: EMPTY
72180: LIST
72181: LIST
72182: PUSH
72183: LD_INT 0
72185: PUSH
72186: LD_INT 5
72188: NEG
72189: PUSH
72190: EMPTY
72191: LIST
72192: LIST
72193: PUSH
72194: LD_INT 1
72196: PUSH
72197: LD_INT 4
72199: NEG
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: PUSH
72205: LD_INT 1
72207: PUSH
72208: LD_INT 3
72210: NEG
72211: PUSH
72212: EMPTY
72213: LIST
72214: LIST
72215: PUSH
72216: LD_INT 0
72218: PUSH
72219: LD_INT 3
72221: NEG
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: PUSH
72227: LD_INT 1
72229: NEG
72230: PUSH
72231: LD_INT 4
72233: NEG
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: PUSH
72239: LD_INT 1
72241: NEG
72242: PUSH
72243: LD_INT 5
72245: NEG
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: PUSH
72251: LD_INT 2
72253: PUSH
72254: LD_INT 3
72256: NEG
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: PUSH
72262: LD_INT 2
72264: NEG
72265: PUSH
72266: LD_INT 5
72268: NEG
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: LIST
72285: LIST
72286: LIST
72287: LIST
72288: LIST
72289: LIST
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: LIST
72295: LIST
72296: LIST
72297: LIST
72298: LIST
72299: LIST
72300: LIST
72301: LIST
72302: LIST
72303: LIST
72304: LIST
72305: LIST
72306: LIST
72307: LIST
72308: LIST
72309: LIST
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: LIST
72315: LIST
72316: LIST
72317: LIST
72318: LIST
72319: LIST
72320: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
72321: LD_ADDR_VAR 0 31
72325: PUSH
72326: LD_INT 0
72328: PUSH
72329: LD_INT 4
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: PUSH
72336: LD_INT 0
72338: PUSH
72339: LD_INT 3
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: PUSH
72346: LD_INT 1
72348: PUSH
72349: LD_INT 4
72351: PUSH
72352: EMPTY
72353: LIST
72354: LIST
72355: PUSH
72356: LD_INT 1
72358: PUSH
72359: LD_INT 5
72361: PUSH
72362: EMPTY
72363: LIST
72364: LIST
72365: PUSH
72366: LD_INT 0
72368: PUSH
72369: LD_INT 5
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: PUSH
72376: LD_INT 1
72378: NEG
72379: PUSH
72380: LD_INT 4
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: PUSH
72387: LD_INT 1
72389: NEG
72390: PUSH
72391: LD_INT 3
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_INT 2
72400: PUSH
72401: LD_INT 5
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 2
72410: NEG
72411: PUSH
72412: LD_INT 3
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: LD_INT 3
72421: NEG
72422: PUSH
72423: LD_INT 0
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: PUSH
72430: LD_INT 3
72432: NEG
72433: PUSH
72434: LD_INT 1
72436: NEG
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 2
72444: NEG
72445: PUSH
72446: LD_INT 0
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: PUSH
72453: LD_INT 2
72455: NEG
72456: PUSH
72457: LD_INT 1
72459: PUSH
72460: EMPTY
72461: LIST
72462: LIST
72463: PUSH
72464: LD_INT 3
72466: NEG
72467: PUSH
72468: LD_INT 1
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: PUSH
72475: LD_INT 4
72477: NEG
72478: PUSH
72479: LD_INT 0
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: PUSH
72486: LD_INT 4
72488: NEG
72489: PUSH
72490: LD_INT 1
72492: NEG
72493: PUSH
72494: EMPTY
72495: LIST
72496: LIST
72497: PUSH
72498: LD_INT 4
72500: NEG
72501: PUSH
72502: LD_INT 2
72504: NEG
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: PUSH
72510: LD_INT 2
72512: NEG
72513: PUSH
72514: LD_INT 2
72516: PUSH
72517: EMPTY
72518: LIST
72519: LIST
72520: PUSH
72521: LD_INT 4
72523: NEG
72524: PUSH
72525: LD_INT 4
72527: NEG
72528: PUSH
72529: EMPTY
72530: LIST
72531: LIST
72532: PUSH
72533: LD_INT 4
72535: NEG
72536: PUSH
72537: LD_INT 5
72539: NEG
72540: PUSH
72541: EMPTY
72542: LIST
72543: LIST
72544: PUSH
72545: LD_INT 3
72547: NEG
72548: PUSH
72549: LD_INT 4
72551: NEG
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: PUSH
72557: LD_INT 3
72559: NEG
72560: PUSH
72561: LD_INT 3
72563: NEG
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: PUSH
72569: LD_INT 4
72571: NEG
72572: PUSH
72573: LD_INT 3
72575: NEG
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: PUSH
72581: LD_INT 5
72583: NEG
72584: PUSH
72585: LD_INT 4
72587: NEG
72588: PUSH
72589: EMPTY
72590: LIST
72591: LIST
72592: PUSH
72593: LD_INT 5
72595: NEG
72596: PUSH
72597: LD_INT 5
72599: NEG
72600: PUSH
72601: EMPTY
72602: LIST
72603: LIST
72604: PUSH
72605: LD_INT 3
72607: NEG
72608: PUSH
72609: LD_INT 5
72611: NEG
72612: PUSH
72613: EMPTY
72614: LIST
72615: LIST
72616: PUSH
72617: LD_INT 5
72619: NEG
72620: PUSH
72621: LD_INT 3
72623: NEG
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: PUSH
72629: LD_INT 0
72631: PUSH
72632: LD_INT 3
72634: NEG
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: PUSH
72640: LD_INT 0
72642: PUSH
72643: LD_INT 4
72645: NEG
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: PUSH
72651: LD_INT 1
72653: PUSH
72654: LD_INT 3
72656: NEG
72657: PUSH
72658: EMPTY
72659: LIST
72660: LIST
72661: PUSH
72662: LD_INT 1
72664: PUSH
72665: LD_INT 2
72667: NEG
72668: PUSH
72669: EMPTY
72670: LIST
72671: LIST
72672: PUSH
72673: LD_INT 0
72675: PUSH
72676: LD_INT 2
72678: NEG
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: PUSH
72684: LD_INT 1
72686: NEG
72687: PUSH
72688: LD_INT 3
72690: NEG
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: PUSH
72696: LD_INT 1
72698: NEG
72699: PUSH
72700: LD_INT 4
72702: NEG
72703: PUSH
72704: EMPTY
72705: LIST
72706: LIST
72707: PUSH
72708: LD_INT 2
72710: PUSH
72711: LD_INT 2
72713: NEG
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PUSH
72719: LD_INT 2
72721: NEG
72722: PUSH
72723: LD_INT 4
72725: NEG
72726: PUSH
72727: EMPTY
72728: LIST
72729: LIST
72730: PUSH
72731: LD_INT 4
72733: PUSH
72734: LD_INT 0
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: PUSH
72741: LD_INT 4
72743: PUSH
72744: LD_INT 1
72746: NEG
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: PUSH
72752: LD_INT 5
72754: PUSH
72755: LD_INT 0
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: PUSH
72762: LD_INT 5
72764: PUSH
72765: LD_INT 1
72767: PUSH
72768: EMPTY
72769: LIST
72770: LIST
72771: PUSH
72772: LD_INT 4
72774: PUSH
72775: LD_INT 1
72777: PUSH
72778: EMPTY
72779: LIST
72780: LIST
72781: PUSH
72782: LD_INT 3
72784: PUSH
72785: LD_INT 0
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: PUSH
72792: LD_INT 3
72794: PUSH
72795: LD_INT 1
72797: NEG
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: PUSH
72803: LD_INT 3
72805: PUSH
72806: LD_INT 2
72808: NEG
72809: PUSH
72810: EMPTY
72811: LIST
72812: LIST
72813: PUSH
72814: LD_INT 5
72816: PUSH
72817: LD_INT 2
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: LIST
72828: LIST
72829: LIST
72830: LIST
72831: LIST
72832: LIST
72833: LIST
72834: LIST
72835: LIST
72836: LIST
72837: LIST
72838: LIST
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: LIST
72846: LIST
72847: LIST
72848: LIST
72849: LIST
72850: LIST
72851: LIST
72852: LIST
72853: LIST
72854: LIST
72855: LIST
72856: LIST
72857: LIST
72858: LIST
72859: LIST
72860: LIST
72861: LIST
72862: LIST
72863: LIST
72864: LIST
72865: LIST
72866: LIST
72867: LIST
72868: LIST
72869: LIST
72870: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72871: LD_ADDR_VAR 0 32
72875: PUSH
72876: LD_INT 4
72878: NEG
72879: PUSH
72880: LD_INT 0
72882: PUSH
72883: EMPTY
72884: LIST
72885: LIST
72886: PUSH
72887: LD_INT 4
72889: NEG
72890: PUSH
72891: LD_INT 1
72893: NEG
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PUSH
72899: LD_INT 3
72901: NEG
72902: PUSH
72903: LD_INT 0
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: PUSH
72910: LD_INT 3
72912: NEG
72913: PUSH
72914: LD_INT 1
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: PUSH
72921: LD_INT 4
72923: NEG
72924: PUSH
72925: LD_INT 1
72927: PUSH
72928: EMPTY
72929: LIST
72930: LIST
72931: PUSH
72932: LD_INT 5
72934: NEG
72935: PUSH
72936: LD_INT 0
72938: PUSH
72939: EMPTY
72940: LIST
72941: LIST
72942: PUSH
72943: LD_INT 5
72945: NEG
72946: PUSH
72947: LD_INT 1
72949: NEG
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: LD_INT 5
72957: NEG
72958: PUSH
72959: LD_INT 2
72961: NEG
72962: PUSH
72963: EMPTY
72964: LIST
72965: LIST
72966: PUSH
72967: LD_INT 3
72969: NEG
72970: PUSH
72971: LD_INT 2
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PUSH
72978: LD_INT 3
72980: NEG
72981: PUSH
72982: LD_INT 3
72984: NEG
72985: PUSH
72986: EMPTY
72987: LIST
72988: LIST
72989: PUSH
72990: LD_INT 3
72992: NEG
72993: PUSH
72994: LD_INT 4
72996: NEG
72997: PUSH
72998: EMPTY
72999: LIST
73000: LIST
73001: PUSH
73002: LD_INT 2
73004: NEG
73005: PUSH
73006: LD_INT 3
73008: NEG
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: PUSH
73014: LD_INT 2
73016: NEG
73017: PUSH
73018: LD_INT 2
73020: NEG
73021: PUSH
73022: EMPTY
73023: LIST
73024: LIST
73025: PUSH
73026: LD_INT 3
73028: NEG
73029: PUSH
73030: LD_INT 2
73032: NEG
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: PUSH
73038: LD_INT 4
73040: NEG
73041: PUSH
73042: LD_INT 3
73044: NEG
73045: PUSH
73046: EMPTY
73047: LIST
73048: LIST
73049: PUSH
73050: LD_INT 4
73052: NEG
73053: PUSH
73054: LD_INT 4
73056: NEG
73057: PUSH
73058: EMPTY
73059: LIST
73060: LIST
73061: PUSH
73062: LD_INT 2
73064: NEG
73065: PUSH
73066: LD_INT 4
73068: NEG
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: LD_INT 4
73076: NEG
73077: PUSH
73078: LD_INT 2
73080: NEG
73081: PUSH
73082: EMPTY
73083: LIST
73084: LIST
73085: PUSH
73086: LD_INT 0
73088: PUSH
73089: LD_INT 4
73091: NEG
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: PUSH
73097: LD_INT 0
73099: PUSH
73100: LD_INT 5
73102: NEG
73103: PUSH
73104: EMPTY
73105: LIST
73106: LIST
73107: PUSH
73108: LD_INT 1
73110: PUSH
73111: LD_INT 4
73113: NEG
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: PUSH
73119: LD_INT 1
73121: PUSH
73122: LD_INT 3
73124: NEG
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: PUSH
73130: LD_INT 0
73132: PUSH
73133: LD_INT 3
73135: NEG
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: PUSH
73141: LD_INT 1
73143: NEG
73144: PUSH
73145: LD_INT 4
73147: NEG
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: PUSH
73153: LD_INT 1
73155: NEG
73156: PUSH
73157: LD_INT 5
73159: NEG
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: PUSH
73165: LD_INT 2
73167: PUSH
73168: LD_INT 3
73170: NEG
73171: PUSH
73172: EMPTY
73173: LIST
73174: LIST
73175: PUSH
73176: LD_INT 2
73178: NEG
73179: PUSH
73180: LD_INT 5
73182: NEG
73183: PUSH
73184: EMPTY
73185: LIST
73186: LIST
73187: PUSH
73188: LD_INT 3
73190: PUSH
73191: LD_INT 0
73193: PUSH
73194: EMPTY
73195: LIST
73196: LIST
73197: PUSH
73198: LD_INT 3
73200: PUSH
73201: LD_INT 1
73203: NEG
73204: PUSH
73205: EMPTY
73206: LIST
73207: LIST
73208: PUSH
73209: LD_INT 4
73211: PUSH
73212: LD_INT 0
73214: PUSH
73215: EMPTY
73216: LIST
73217: LIST
73218: PUSH
73219: LD_INT 4
73221: PUSH
73222: LD_INT 1
73224: PUSH
73225: EMPTY
73226: LIST
73227: LIST
73228: PUSH
73229: LD_INT 3
73231: PUSH
73232: LD_INT 1
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: PUSH
73239: LD_INT 2
73241: PUSH
73242: LD_INT 0
73244: PUSH
73245: EMPTY
73246: LIST
73247: LIST
73248: PUSH
73249: LD_INT 2
73251: PUSH
73252: LD_INT 1
73254: NEG
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: PUSH
73260: LD_INT 2
73262: PUSH
73263: LD_INT 2
73265: NEG
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: PUSH
73271: LD_INT 4
73273: PUSH
73274: LD_INT 2
73276: PUSH
73277: EMPTY
73278: LIST
73279: LIST
73280: PUSH
73281: LD_INT 4
73283: PUSH
73284: LD_INT 4
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: PUSH
73291: LD_INT 4
73293: PUSH
73294: LD_INT 3
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: PUSH
73301: LD_INT 5
73303: PUSH
73304: LD_INT 4
73306: PUSH
73307: EMPTY
73308: LIST
73309: LIST
73310: PUSH
73311: LD_INT 5
73313: PUSH
73314: LD_INT 5
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: PUSH
73321: LD_INT 4
73323: PUSH
73324: LD_INT 5
73326: PUSH
73327: EMPTY
73328: LIST
73329: LIST
73330: PUSH
73331: LD_INT 3
73333: PUSH
73334: LD_INT 4
73336: PUSH
73337: EMPTY
73338: LIST
73339: LIST
73340: PUSH
73341: LD_INT 3
73343: PUSH
73344: LD_INT 3
73346: PUSH
73347: EMPTY
73348: LIST
73349: LIST
73350: PUSH
73351: LD_INT 5
73353: PUSH
73354: LD_INT 3
73356: PUSH
73357: EMPTY
73358: LIST
73359: LIST
73360: PUSH
73361: LD_INT 3
73363: PUSH
73364: LD_INT 5
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: LIST
73375: LIST
73376: LIST
73377: LIST
73378: LIST
73379: LIST
73380: LIST
73381: LIST
73382: LIST
73383: LIST
73384: LIST
73385: LIST
73386: LIST
73387: LIST
73388: LIST
73389: LIST
73390: LIST
73391: LIST
73392: LIST
73393: LIST
73394: LIST
73395: LIST
73396: LIST
73397: LIST
73398: LIST
73399: LIST
73400: LIST
73401: LIST
73402: LIST
73403: LIST
73404: LIST
73405: LIST
73406: LIST
73407: LIST
73408: LIST
73409: LIST
73410: LIST
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
73418: LD_ADDR_VAR 0 33
73422: PUSH
73423: LD_INT 4
73425: NEG
73426: PUSH
73427: LD_INT 4
73429: NEG
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: PUSH
73435: LD_INT 4
73437: NEG
73438: PUSH
73439: LD_INT 5
73441: NEG
73442: PUSH
73443: EMPTY
73444: LIST
73445: LIST
73446: PUSH
73447: LD_INT 3
73449: NEG
73450: PUSH
73451: LD_INT 4
73453: NEG
73454: PUSH
73455: EMPTY
73456: LIST
73457: LIST
73458: PUSH
73459: LD_INT 3
73461: NEG
73462: PUSH
73463: LD_INT 3
73465: NEG
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: LD_INT 4
73473: NEG
73474: PUSH
73475: LD_INT 3
73477: NEG
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: PUSH
73483: LD_INT 5
73485: NEG
73486: PUSH
73487: LD_INT 4
73489: NEG
73490: PUSH
73491: EMPTY
73492: LIST
73493: LIST
73494: PUSH
73495: LD_INT 5
73497: NEG
73498: PUSH
73499: LD_INT 5
73501: NEG
73502: PUSH
73503: EMPTY
73504: LIST
73505: LIST
73506: PUSH
73507: LD_INT 3
73509: NEG
73510: PUSH
73511: LD_INT 5
73513: NEG
73514: PUSH
73515: EMPTY
73516: LIST
73517: LIST
73518: PUSH
73519: LD_INT 5
73521: NEG
73522: PUSH
73523: LD_INT 3
73525: NEG
73526: PUSH
73527: EMPTY
73528: LIST
73529: LIST
73530: PUSH
73531: LD_INT 0
73533: PUSH
73534: LD_INT 3
73536: NEG
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PUSH
73542: LD_INT 0
73544: PUSH
73545: LD_INT 4
73547: NEG
73548: PUSH
73549: EMPTY
73550: LIST
73551: LIST
73552: PUSH
73553: LD_INT 1
73555: PUSH
73556: LD_INT 3
73558: NEG
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: PUSH
73564: LD_INT 1
73566: PUSH
73567: LD_INT 2
73569: NEG
73570: PUSH
73571: EMPTY
73572: LIST
73573: LIST
73574: PUSH
73575: LD_INT 0
73577: PUSH
73578: LD_INT 2
73580: NEG
73581: PUSH
73582: EMPTY
73583: LIST
73584: LIST
73585: PUSH
73586: LD_INT 1
73588: NEG
73589: PUSH
73590: LD_INT 3
73592: NEG
73593: PUSH
73594: EMPTY
73595: LIST
73596: LIST
73597: PUSH
73598: LD_INT 1
73600: NEG
73601: PUSH
73602: LD_INT 4
73604: NEG
73605: PUSH
73606: EMPTY
73607: LIST
73608: LIST
73609: PUSH
73610: LD_INT 2
73612: PUSH
73613: LD_INT 2
73615: NEG
73616: PUSH
73617: EMPTY
73618: LIST
73619: LIST
73620: PUSH
73621: LD_INT 2
73623: NEG
73624: PUSH
73625: LD_INT 4
73627: NEG
73628: PUSH
73629: EMPTY
73630: LIST
73631: LIST
73632: PUSH
73633: LD_INT 4
73635: PUSH
73636: LD_INT 0
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: PUSH
73643: LD_INT 4
73645: PUSH
73646: LD_INT 1
73648: NEG
73649: PUSH
73650: EMPTY
73651: LIST
73652: LIST
73653: PUSH
73654: LD_INT 5
73656: PUSH
73657: LD_INT 0
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: PUSH
73664: LD_INT 5
73666: PUSH
73667: LD_INT 1
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: PUSH
73674: LD_INT 4
73676: PUSH
73677: LD_INT 1
73679: PUSH
73680: EMPTY
73681: LIST
73682: LIST
73683: PUSH
73684: LD_INT 3
73686: PUSH
73687: LD_INT 0
73689: PUSH
73690: EMPTY
73691: LIST
73692: LIST
73693: PUSH
73694: LD_INT 3
73696: PUSH
73697: LD_INT 1
73699: NEG
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: PUSH
73705: LD_INT 3
73707: PUSH
73708: LD_INT 2
73710: NEG
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PUSH
73716: LD_INT 5
73718: PUSH
73719: LD_INT 2
73721: PUSH
73722: EMPTY
73723: LIST
73724: LIST
73725: PUSH
73726: LD_INT 3
73728: PUSH
73729: LD_INT 3
73731: PUSH
73732: EMPTY
73733: LIST
73734: LIST
73735: PUSH
73736: LD_INT 3
73738: PUSH
73739: LD_INT 2
73741: PUSH
73742: EMPTY
73743: LIST
73744: LIST
73745: PUSH
73746: LD_INT 4
73748: PUSH
73749: LD_INT 3
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: PUSH
73756: LD_INT 4
73758: PUSH
73759: LD_INT 4
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: PUSH
73766: LD_INT 3
73768: PUSH
73769: LD_INT 4
73771: PUSH
73772: EMPTY
73773: LIST
73774: LIST
73775: PUSH
73776: LD_INT 2
73778: PUSH
73779: LD_INT 3
73781: PUSH
73782: EMPTY
73783: LIST
73784: LIST
73785: PUSH
73786: LD_INT 2
73788: PUSH
73789: LD_INT 2
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: LD_INT 4
73798: PUSH
73799: LD_INT 2
73801: PUSH
73802: EMPTY
73803: LIST
73804: LIST
73805: PUSH
73806: LD_INT 2
73808: PUSH
73809: LD_INT 4
73811: PUSH
73812: EMPTY
73813: LIST
73814: LIST
73815: PUSH
73816: LD_INT 0
73818: PUSH
73819: LD_INT 4
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: PUSH
73826: LD_INT 0
73828: PUSH
73829: LD_INT 3
73831: PUSH
73832: EMPTY
73833: LIST
73834: LIST
73835: PUSH
73836: LD_INT 1
73838: PUSH
73839: LD_INT 4
73841: PUSH
73842: EMPTY
73843: LIST
73844: LIST
73845: PUSH
73846: LD_INT 1
73848: PUSH
73849: LD_INT 5
73851: PUSH
73852: EMPTY
73853: LIST
73854: LIST
73855: PUSH
73856: LD_INT 0
73858: PUSH
73859: LD_INT 5
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: PUSH
73866: LD_INT 1
73868: NEG
73869: PUSH
73870: LD_INT 4
73872: PUSH
73873: EMPTY
73874: LIST
73875: LIST
73876: PUSH
73877: LD_INT 1
73879: NEG
73880: PUSH
73881: LD_INT 3
73883: PUSH
73884: EMPTY
73885: LIST
73886: LIST
73887: PUSH
73888: LD_INT 2
73890: PUSH
73891: LD_INT 5
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: PUSH
73898: LD_INT 2
73900: NEG
73901: PUSH
73902: LD_INT 3
73904: PUSH
73905: EMPTY
73906: LIST
73907: LIST
73908: PUSH
73909: EMPTY
73910: LIST
73911: LIST
73912: LIST
73913: LIST
73914: LIST
73915: LIST
73916: LIST
73917: LIST
73918: LIST
73919: LIST
73920: LIST
73921: LIST
73922: LIST
73923: LIST
73924: LIST
73925: LIST
73926: LIST
73927: LIST
73928: LIST
73929: LIST
73930: LIST
73931: LIST
73932: LIST
73933: LIST
73934: LIST
73935: LIST
73936: LIST
73937: LIST
73938: LIST
73939: LIST
73940: LIST
73941: LIST
73942: LIST
73943: LIST
73944: LIST
73945: LIST
73946: LIST
73947: LIST
73948: LIST
73949: LIST
73950: LIST
73951: LIST
73952: LIST
73953: LIST
73954: LIST
73955: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73956: LD_ADDR_VAR 0 34
73960: PUSH
73961: LD_INT 0
73963: PUSH
73964: LD_INT 4
73966: NEG
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: PUSH
73972: LD_INT 0
73974: PUSH
73975: LD_INT 5
73977: NEG
73978: PUSH
73979: EMPTY
73980: LIST
73981: LIST
73982: PUSH
73983: LD_INT 1
73985: PUSH
73986: LD_INT 4
73988: NEG
73989: PUSH
73990: EMPTY
73991: LIST
73992: LIST
73993: PUSH
73994: LD_INT 1
73996: PUSH
73997: LD_INT 3
73999: NEG
74000: PUSH
74001: EMPTY
74002: LIST
74003: LIST
74004: PUSH
74005: LD_INT 0
74007: PUSH
74008: LD_INT 3
74010: NEG
74011: PUSH
74012: EMPTY
74013: LIST
74014: LIST
74015: PUSH
74016: LD_INT 1
74018: NEG
74019: PUSH
74020: LD_INT 4
74022: NEG
74023: PUSH
74024: EMPTY
74025: LIST
74026: LIST
74027: PUSH
74028: LD_INT 1
74030: NEG
74031: PUSH
74032: LD_INT 5
74034: NEG
74035: PUSH
74036: EMPTY
74037: LIST
74038: LIST
74039: PUSH
74040: LD_INT 2
74042: PUSH
74043: LD_INT 3
74045: NEG
74046: PUSH
74047: EMPTY
74048: LIST
74049: LIST
74050: PUSH
74051: LD_INT 2
74053: NEG
74054: PUSH
74055: LD_INT 5
74057: NEG
74058: PUSH
74059: EMPTY
74060: LIST
74061: LIST
74062: PUSH
74063: LD_INT 3
74065: PUSH
74066: LD_INT 0
74068: PUSH
74069: EMPTY
74070: LIST
74071: LIST
74072: PUSH
74073: LD_INT 3
74075: PUSH
74076: LD_INT 1
74078: NEG
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: PUSH
74084: LD_INT 4
74086: PUSH
74087: LD_INT 0
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: PUSH
74094: LD_INT 4
74096: PUSH
74097: LD_INT 1
74099: PUSH
74100: EMPTY
74101: LIST
74102: LIST
74103: PUSH
74104: LD_INT 3
74106: PUSH
74107: LD_INT 1
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: PUSH
74114: LD_INT 2
74116: PUSH
74117: LD_INT 0
74119: PUSH
74120: EMPTY
74121: LIST
74122: LIST
74123: PUSH
74124: LD_INT 2
74126: PUSH
74127: LD_INT 1
74129: NEG
74130: PUSH
74131: EMPTY
74132: LIST
74133: LIST
74134: PUSH
74135: LD_INT 2
74137: PUSH
74138: LD_INT 2
74140: NEG
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: PUSH
74146: LD_INT 4
74148: PUSH
74149: LD_INT 2
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: LD_INT 4
74158: PUSH
74159: LD_INT 4
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: PUSH
74166: LD_INT 4
74168: PUSH
74169: LD_INT 3
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: PUSH
74176: LD_INT 5
74178: PUSH
74179: LD_INT 4
74181: PUSH
74182: EMPTY
74183: LIST
74184: LIST
74185: PUSH
74186: LD_INT 5
74188: PUSH
74189: LD_INT 5
74191: PUSH
74192: EMPTY
74193: LIST
74194: LIST
74195: PUSH
74196: LD_INT 4
74198: PUSH
74199: LD_INT 5
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PUSH
74206: LD_INT 3
74208: PUSH
74209: LD_INT 4
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: PUSH
74216: LD_INT 3
74218: PUSH
74219: LD_INT 3
74221: PUSH
74222: EMPTY
74223: LIST
74224: LIST
74225: PUSH
74226: LD_INT 5
74228: PUSH
74229: LD_INT 3
74231: PUSH
74232: EMPTY
74233: LIST
74234: LIST
74235: PUSH
74236: LD_INT 3
74238: PUSH
74239: LD_INT 5
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: PUSH
74246: LD_INT 0
74248: PUSH
74249: LD_INT 3
74251: PUSH
74252: EMPTY
74253: LIST
74254: LIST
74255: PUSH
74256: LD_INT 0
74258: PUSH
74259: LD_INT 2
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: PUSH
74266: LD_INT 1
74268: PUSH
74269: LD_INT 3
74271: PUSH
74272: EMPTY
74273: LIST
74274: LIST
74275: PUSH
74276: LD_INT 1
74278: PUSH
74279: LD_INT 4
74281: PUSH
74282: EMPTY
74283: LIST
74284: LIST
74285: PUSH
74286: LD_INT 0
74288: PUSH
74289: LD_INT 4
74291: PUSH
74292: EMPTY
74293: LIST
74294: LIST
74295: PUSH
74296: LD_INT 1
74298: NEG
74299: PUSH
74300: LD_INT 3
74302: PUSH
74303: EMPTY
74304: LIST
74305: LIST
74306: PUSH
74307: LD_INT 1
74309: NEG
74310: PUSH
74311: LD_INT 2
74313: PUSH
74314: EMPTY
74315: LIST
74316: LIST
74317: PUSH
74318: LD_INT 2
74320: PUSH
74321: LD_INT 4
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: PUSH
74328: LD_INT 2
74330: NEG
74331: PUSH
74332: LD_INT 2
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: PUSH
74339: LD_INT 4
74341: NEG
74342: PUSH
74343: LD_INT 0
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: PUSH
74350: LD_INT 4
74352: NEG
74353: PUSH
74354: LD_INT 1
74356: NEG
74357: PUSH
74358: EMPTY
74359: LIST
74360: LIST
74361: PUSH
74362: LD_INT 3
74364: NEG
74365: PUSH
74366: LD_INT 0
74368: PUSH
74369: EMPTY
74370: LIST
74371: LIST
74372: PUSH
74373: LD_INT 3
74375: NEG
74376: PUSH
74377: LD_INT 1
74379: PUSH
74380: EMPTY
74381: LIST
74382: LIST
74383: PUSH
74384: LD_INT 4
74386: NEG
74387: PUSH
74388: LD_INT 1
74390: PUSH
74391: EMPTY
74392: LIST
74393: LIST
74394: PUSH
74395: LD_INT 5
74397: NEG
74398: PUSH
74399: LD_INT 0
74401: PUSH
74402: EMPTY
74403: LIST
74404: LIST
74405: PUSH
74406: LD_INT 5
74408: NEG
74409: PUSH
74410: LD_INT 1
74412: NEG
74413: PUSH
74414: EMPTY
74415: LIST
74416: LIST
74417: PUSH
74418: LD_INT 5
74420: NEG
74421: PUSH
74422: LD_INT 2
74424: NEG
74425: PUSH
74426: EMPTY
74427: LIST
74428: LIST
74429: PUSH
74430: LD_INT 3
74432: NEG
74433: PUSH
74434: LD_INT 2
74436: PUSH
74437: EMPTY
74438: LIST
74439: LIST
74440: PUSH
74441: EMPTY
74442: LIST
74443: LIST
74444: LIST
74445: LIST
74446: LIST
74447: LIST
74448: LIST
74449: LIST
74450: LIST
74451: LIST
74452: LIST
74453: LIST
74454: LIST
74455: LIST
74456: LIST
74457: LIST
74458: LIST
74459: LIST
74460: LIST
74461: LIST
74462: LIST
74463: LIST
74464: LIST
74465: LIST
74466: LIST
74467: LIST
74468: LIST
74469: LIST
74470: LIST
74471: LIST
74472: LIST
74473: LIST
74474: LIST
74475: LIST
74476: LIST
74477: LIST
74478: LIST
74479: LIST
74480: LIST
74481: LIST
74482: LIST
74483: LIST
74484: LIST
74485: LIST
74486: LIST
74487: ST_TO_ADDR
// end ; end ;
74488: GO 74491
74490: POP
// case btype of b_depot , b_warehouse :
74491: LD_VAR 0 1
74495: PUSH
74496: LD_INT 0
74498: DOUBLE
74499: EQUAL
74500: IFTRUE 74510
74502: LD_INT 1
74504: DOUBLE
74505: EQUAL
74506: IFTRUE 74510
74508: GO 74711
74510: POP
// case nation of nation_american :
74511: LD_VAR 0 5
74515: PUSH
74516: LD_INT 1
74518: DOUBLE
74519: EQUAL
74520: IFTRUE 74524
74522: GO 74580
74524: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
74525: LD_ADDR_VAR 0 9
74529: PUSH
74530: LD_VAR 0 11
74534: PUSH
74535: LD_VAR 0 12
74539: PUSH
74540: LD_VAR 0 13
74544: PUSH
74545: LD_VAR 0 14
74549: PUSH
74550: LD_VAR 0 15
74554: PUSH
74555: LD_VAR 0 16
74559: PUSH
74560: EMPTY
74561: LIST
74562: LIST
74563: LIST
74564: LIST
74565: LIST
74566: LIST
74567: PUSH
74568: LD_VAR 0 4
74572: PUSH
74573: LD_INT 1
74575: PLUS
74576: ARRAY
74577: ST_TO_ADDR
74578: GO 74709
74580: LD_INT 2
74582: DOUBLE
74583: EQUAL
74584: IFTRUE 74588
74586: GO 74644
74588: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
74589: LD_ADDR_VAR 0 9
74593: PUSH
74594: LD_VAR 0 17
74598: PUSH
74599: LD_VAR 0 18
74603: PUSH
74604: LD_VAR 0 19
74608: PUSH
74609: LD_VAR 0 20
74613: PUSH
74614: LD_VAR 0 21
74618: PUSH
74619: LD_VAR 0 22
74623: PUSH
74624: EMPTY
74625: LIST
74626: LIST
74627: LIST
74628: LIST
74629: LIST
74630: LIST
74631: PUSH
74632: LD_VAR 0 4
74636: PUSH
74637: LD_INT 1
74639: PLUS
74640: ARRAY
74641: ST_TO_ADDR
74642: GO 74709
74644: LD_INT 3
74646: DOUBLE
74647: EQUAL
74648: IFTRUE 74652
74650: GO 74708
74652: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
74653: LD_ADDR_VAR 0 9
74657: PUSH
74658: LD_VAR 0 23
74662: PUSH
74663: LD_VAR 0 24
74667: PUSH
74668: LD_VAR 0 25
74672: PUSH
74673: LD_VAR 0 26
74677: PUSH
74678: LD_VAR 0 27
74682: PUSH
74683: LD_VAR 0 28
74687: PUSH
74688: EMPTY
74689: LIST
74690: LIST
74691: LIST
74692: LIST
74693: LIST
74694: LIST
74695: PUSH
74696: LD_VAR 0 4
74700: PUSH
74701: LD_INT 1
74703: PLUS
74704: ARRAY
74705: ST_TO_ADDR
74706: GO 74709
74708: POP
74709: GO 75264
74711: LD_INT 2
74713: DOUBLE
74714: EQUAL
74715: IFTRUE 74725
74717: LD_INT 3
74719: DOUBLE
74720: EQUAL
74721: IFTRUE 74725
74723: GO 74781
74725: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74726: LD_ADDR_VAR 0 9
74730: PUSH
74731: LD_VAR 0 29
74735: PUSH
74736: LD_VAR 0 30
74740: PUSH
74741: LD_VAR 0 31
74745: PUSH
74746: LD_VAR 0 32
74750: PUSH
74751: LD_VAR 0 33
74755: PUSH
74756: LD_VAR 0 34
74760: PUSH
74761: EMPTY
74762: LIST
74763: LIST
74764: LIST
74765: LIST
74766: LIST
74767: LIST
74768: PUSH
74769: LD_VAR 0 4
74773: PUSH
74774: LD_INT 1
74776: PLUS
74777: ARRAY
74778: ST_TO_ADDR
74779: GO 75264
74781: LD_INT 16
74783: DOUBLE
74784: EQUAL
74785: IFTRUE 74843
74787: LD_INT 17
74789: DOUBLE
74790: EQUAL
74791: IFTRUE 74843
74793: LD_INT 18
74795: DOUBLE
74796: EQUAL
74797: IFTRUE 74843
74799: LD_INT 19
74801: DOUBLE
74802: EQUAL
74803: IFTRUE 74843
74805: LD_INT 22
74807: DOUBLE
74808: EQUAL
74809: IFTRUE 74843
74811: LD_INT 20
74813: DOUBLE
74814: EQUAL
74815: IFTRUE 74843
74817: LD_INT 21
74819: DOUBLE
74820: EQUAL
74821: IFTRUE 74843
74823: LD_INT 23
74825: DOUBLE
74826: EQUAL
74827: IFTRUE 74843
74829: LD_INT 24
74831: DOUBLE
74832: EQUAL
74833: IFTRUE 74843
74835: LD_INT 25
74837: DOUBLE
74838: EQUAL
74839: IFTRUE 74843
74841: GO 74899
74843: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74844: LD_ADDR_VAR 0 9
74848: PUSH
74849: LD_VAR 0 35
74853: PUSH
74854: LD_VAR 0 36
74858: PUSH
74859: LD_VAR 0 37
74863: PUSH
74864: LD_VAR 0 38
74868: PUSH
74869: LD_VAR 0 39
74873: PUSH
74874: LD_VAR 0 40
74878: PUSH
74879: EMPTY
74880: LIST
74881: LIST
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: PUSH
74887: LD_VAR 0 4
74891: PUSH
74892: LD_INT 1
74894: PLUS
74895: ARRAY
74896: ST_TO_ADDR
74897: GO 75264
74899: LD_INT 6
74901: DOUBLE
74902: EQUAL
74903: IFTRUE 74955
74905: LD_INT 7
74907: DOUBLE
74908: EQUAL
74909: IFTRUE 74955
74911: LD_INT 8
74913: DOUBLE
74914: EQUAL
74915: IFTRUE 74955
74917: LD_INT 13
74919: DOUBLE
74920: EQUAL
74921: IFTRUE 74955
74923: LD_INT 12
74925: DOUBLE
74926: EQUAL
74927: IFTRUE 74955
74929: LD_INT 15
74931: DOUBLE
74932: EQUAL
74933: IFTRUE 74955
74935: LD_INT 11
74937: DOUBLE
74938: EQUAL
74939: IFTRUE 74955
74941: LD_INT 14
74943: DOUBLE
74944: EQUAL
74945: IFTRUE 74955
74947: LD_INT 10
74949: DOUBLE
74950: EQUAL
74951: IFTRUE 74955
74953: GO 75011
74955: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74956: LD_ADDR_VAR 0 9
74960: PUSH
74961: LD_VAR 0 41
74965: PUSH
74966: LD_VAR 0 42
74970: PUSH
74971: LD_VAR 0 43
74975: PUSH
74976: LD_VAR 0 44
74980: PUSH
74981: LD_VAR 0 45
74985: PUSH
74986: LD_VAR 0 46
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: LIST
74995: LIST
74996: LIST
74997: LIST
74998: PUSH
74999: LD_VAR 0 4
75003: PUSH
75004: LD_INT 1
75006: PLUS
75007: ARRAY
75008: ST_TO_ADDR
75009: GO 75264
75011: LD_INT 36
75013: DOUBLE
75014: EQUAL
75015: IFTRUE 75019
75017: GO 75075
75019: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75020: LD_ADDR_VAR 0 9
75024: PUSH
75025: LD_VAR 0 47
75029: PUSH
75030: LD_VAR 0 48
75034: PUSH
75035: LD_VAR 0 49
75039: PUSH
75040: LD_VAR 0 50
75044: PUSH
75045: LD_VAR 0 51
75049: PUSH
75050: LD_VAR 0 52
75054: PUSH
75055: EMPTY
75056: LIST
75057: LIST
75058: LIST
75059: LIST
75060: LIST
75061: LIST
75062: PUSH
75063: LD_VAR 0 4
75067: PUSH
75068: LD_INT 1
75070: PLUS
75071: ARRAY
75072: ST_TO_ADDR
75073: GO 75264
75075: LD_INT 4
75077: DOUBLE
75078: EQUAL
75079: IFTRUE 75101
75081: LD_INT 5
75083: DOUBLE
75084: EQUAL
75085: IFTRUE 75101
75087: LD_INT 34
75089: DOUBLE
75090: EQUAL
75091: IFTRUE 75101
75093: LD_INT 37
75095: DOUBLE
75096: EQUAL
75097: IFTRUE 75101
75099: GO 75157
75101: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75102: LD_ADDR_VAR 0 9
75106: PUSH
75107: LD_VAR 0 53
75111: PUSH
75112: LD_VAR 0 54
75116: PUSH
75117: LD_VAR 0 55
75121: PUSH
75122: LD_VAR 0 56
75126: PUSH
75127: LD_VAR 0 57
75131: PUSH
75132: LD_VAR 0 58
75136: PUSH
75137: EMPTY
75138: LIST
75139: LIST
75140: LIST
75141: LIST
75142: LIST
75143: LIST
75144: PUSH
75145: LD_VAR 0 4
75149: PUSH
75150: LD_INT 1
75152: PLUS
75153: ARRAY
75154: ST_TO_ADDR
75155: GO 75264
75157: LD_INT 31
75159: DOUBLE
75160: EQUAL
75161: IFTRUE 75207
75163: LD_INT 32
75165: DOUBLE
75166: EQUAL
75167: IFTRUE 75207
75169: LD_INT 33
75171: DOUBLE
75172: EQUAL
75173: IFTRUE 75207
75175: LD_INT 27
75177: DOUBLE
75178: EQUAL
75179: IFTRUE 75207
75181: LD_INT 26
75183: DOUBLE
75184: EQUAL
75185: IFTRUE 75207
75187: LD_INT 28
75189: DOUBLE
75190: EQUAL
75191: IFTRUE 75207
75193: LD_INT 29
75195: DOUBLE
75196: EQUAL
75197: IFTRUE 75207
75199: LD_INT 30
75201: DOUBLE
75202: EQUAL
75203: IFTRUE 75207
75205: GO 75263
75207: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
75208: LD_ADDR_VAR 0 9
75212: PUSH
75213: LD_VAR 0 59
75217: PUSH
75218: LD_VAR 0 60
75222: PUSH
75223: LD_VAR 0 61
75227: PUSH
75228: LD_VAR 0 62
75232: PUSH
75233: LD_VAR 0 63
75237: PUSH
75238: LD_VAR 0 64
75242: PUSH
75243: EMPTY
75244: LIST
75245: LIST
75246: LIST
75247: LIST
75248: LIST
75249: LIST
75250: PUSH
75251: LD_VAR 0 4
75255: PUSH
75256: LD_INT 1
75258: PLUS
75259: ARRAY
75260: ST_TO_ADDR
75261: GO 75264
75263: POP
// temp_list2 = [ ] ;
75264: LD_ADDR_VAR 0 10
75268: PUSH
75269: EMPTY
75270: ST_TO_ADDR
// for i in temp_list do
75271: LD_ADDR_VAR 0 8
75275: PUSH
75276: LD_VAR 0 9
75280: PUSH
75281: FOR_IN
75282: IFFALSE 75334
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
75284: LD_ADDR_VAR 0 10
75288: PUSH
75289: LD_VAR 0 10
75293: PUSH
75294: LD_VAR 0 8
75298: PUSH
75299: LD_INT 1
75301: ARRAY
75302: PUSH
75303: LD_VAR 0 2
75307: PLUS
75308: PUSH
75309: LD_VAR 0 8
75313: PUSH
75314: LD_INT 2
75316: ARRAY
75317: PUSH
75318: LD_VAR 0 3
75322: PLUS
75323: PUSH
75324: EMPTY
75325: LIST
75326: LIST
75327: PUSH
75328: EMPTY
75329: LIST
75330: ADD
75331: ST_TO_ADDR
75332: GO 75281
75334: POP
75335: POP
// result = temp_list2 ;
75336: LD_ADDR_VAR 0 7
75340: PUSH
75341: LD_VAR 0 10
75345: ST_TO_ADDR
// end ;
75346: LD_VAR 0 7
75350: RET
// export function EnemyInRange ( unit , dist ) ; begin
75351: LD_INT 0
75353: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75354: LD_ADDR_VAR 0 3
75358: PUSH
75359: LD_VAR 0 1
75363: PPUSH
75364: CALL_OW 255
75368: PPUSH
75369: LD_VAR 0 1
75373: PPUSH
75374: CALL_OW 250
75378: PPUSH
75379: LD_VAR 0 1
75383: PPUSH
75384: CALL_OW 251
75388: PPUSH
75389: LD_VAR 0 2
75393: PPUSH
75394: CALL 48608 0 4
75398: PUSH
75399: LD_INT 4
75401: ARRAY
75402: ST_TO_ADDR
// end ;
75403: LD_VAR 0 3
75407: RET
// export function PlayerSeeMe ( unit ) ; begin
75408: LD_INT 0
75410: PPUSH
// result := See ( your_side , unit ) ;
75411: LD_ADDR_VAR 0 2
75415: PUSH
75416: LD_OWVAR 2
75420: PPUSH
75421: LD_VAR 0 1
75425: PPUSH
75426: CALL_OW 292
75430: ST_TO_ADDR
// end ;
75431: LD_VAR 0 2
75435: RET
// export function ReverseDir ( unit ) ; begin
75436: LD_INT 0
75438: PPUSH
// if not unit then
75439: LD_VAR 0 1
75443: NOT
75444: IFFALSE 75448
// exit ;
75446: GO 75471
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75448: LD_ADDR_VAR 0 2
75452: PUSH
75453: LD_VAR 0 1
75457: PPUSH
75458: CALL_OW 254
75462: PUSH
75463: LD_INT 3
75465: PLUS
75466: PUSH
75467: LD_INT 6
75469: MOD
75470: ST_TO_ADDR
// end ;
75471: LD_VAR 0 2
75475: RET
// export function ReverseArray ( array ) ; var i ; begin
75476: LD_INT 0
75478: PPUSH
75479: PPUSH
// if not array then
75480: LD_VAR 0 1
75484: NOT
75485: IFFALSE 75489
// exit ;
75487: GO 75544
// result := [ ] ;
75489: LD_ADDR_VAR 0 2
75493: PUSH
75494: EMPTY
75495: ST_TO_ADDR
// for i := array downto 1 do
75496: LD_ADDR_VAR 0 3
75500: PUSH
75501: DOUBLE
75502: LD_VAR 0 1
75506: INC
75507: ST_TO_ADDR
75508: LD_INT 1
75510: PUSH
75511: FOR_DOWNTO
75512: IFFALSE 75542
// result := Join ( result , array [ i ] ) ;
75514: LD_ADDR_VAR 0 2
75518: PUSH
75519: LD_VAR 0 2
75523: PPUSH
75524: LD_VAR 0 1
75528: PUSH
75529: LD_VAR 0 3
75533: ARRAY
75534: PPUSH
75535: CALL 80396 0 2
75539: ST_TO_ADDR
75540: GO 75511
75542: POP
75543: POP
// end ;
75544: LD_VAR 0 2
75548: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
75549: LD_INT 0
75551: PPUSH
75552: PPUSH
75553: PPUSH
75554: PPUSH
75555: PPUSH
75556: PPUSH
// if not unit or not hexes then
75557: LD_VAR 0 1
75561: NOT
75562: IFTRUE 75571
75564: PUSH
75565: LD_VAR 0 2
75569: NOT
75570: OR
75571: IFFALSE 75575
// exit ;
75573: GO 75698
// dist := 9999 ;
75575: LD_ADDR_VAR 0 5
75579: PUSH
75580: LD_INT 9999
75582: ST_TO_ADDR
// for i = 1 to hexes do
75583: LD_ADDR_VAR 0 4
75587: PUSH
75588: DOUBLE
75589: LD_INT 1
75591: DEC
75592: ST_TO_ADDR
75593: LD_VAR 0 2
75597: PUSH
75598: FOR_TO
75599: IFFALSE 75686
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
75601: LD_ADDR_VAR 0 6
75605: PUSH
75606: LD_VAR 0 1
75610: PPUSH
75611: LD_VAR 0 2
75615: PUSH
75616: LD_VAR 0 4
75620: ARRAY
75621: PUSH
75622: LD_INT 1
75624: ARRAY
75625: PPUSH
75626: LD_VAR 0 2
75630: PUSH
75631: LD_VAR 0 4
75635: ARRAY
75636: PUSH
75637: LD_INT 2
75639: ARRAY
75640: PPUSH
75641: CALL_OW 297
75645: ST_TO_ADDR
// if tdist < dist then
75646: LD_VAR 0 6
75650: PUSH
75651: LD_VAR 0 5
75655: LESS
75656: IFFALSE 75684
// begin hex := hexes [ i ] ;
75658: LD_ADDR_VAR 0 8
75662: PUSH
75663: LD_VAR 0 2
75667: PUSH
75668: LD_VAR 0 4
75672: ARRAY
75673: ST_TO_ADDR
// dist := tdist ;
75674: LD_ADDR_VAR 0 5
75678: PUSH
75679: LD_VAR 0 6
75683: ST_TO_ADDR
// end ; end ;
75684: GO 75598
75686: POP
75687: POP
// result := hex ;
75688: LD_ADDR_VAR 0 3
75692: PUSH
75693: LD_VAR 0 8
75697: ST_TO_ADDR
// end ;
75698: LD_VAR 0 3
75702: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
75703: LD_INT 0
75705: PPUSH
75706: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75707: LD_VAR 0 1
75711: NOT
75712: IFTRUE 75751
75714: PUSH
75715: LD_VAR 0 1
75719: PUSH
75720: LD_INT 21
75722: PUSH
75723: LD_INT 2
75725: PUSH
75726: EMPTY
75727: LIST
75728: LIST
75729: PUSH
75730: LD_INT 23
75732: PUSH
75733: LD_INT 2
75735: PUSH
75736: EMPTY
75737: LIST
75738: LIST
75739: PUSH
75740: EMPTY
75741: LIST
75742: LIST
75743: PPUSH
75744: CALL_OW 69
75748: IN
75749: NOT
75750: OR
75751: IFFALSE 75755
// exit ;
75753: GO 75802
// for i = 1 to 3 do
75755: LD_ADDR_VAR 0 3
75759: PUSH
75760: DOUBLE
75761: LD_INT 1
75763: DEC
75764: ST_TO_ADDR
75765: LD_INT 3
75767: PUSH
75768: FOR_TO
75769: IFFALSE 75800
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75771: LD_VAR 0 1
75775: PPUSH
75776: CALL_OW 250
75780: PPUSH
75781: LD_VAR 0 1
75785: PPUSH
75786: CALL_OW 251
75790: PPUSH
75791: LD_INT 1
75793: PPUSH
75794: CALL_OW 453
75798: GO 75768
75800: POP
75801: POP
// end ;
75802: LD_VAR 0 2
75806: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75807: LD_INT 0
75809: PPUSH
75810: PPUSH
75811: PPUSH
75812: PPUSH
75813: PPUSH
75814: PPUSH
// if not unit or not enemy_unit then
75815: LD_VAR 0 1
75819: NOT
75820: IFTRUE 75829
75822: PUSH
75823: LD_VAR 0 2
75827: NOT
75828: OR
75829: IFFALSE 75833
// exit ;
75831: GO 76314
// if GetLives ( i ) < 250 then
75833: LD_VAR 0 4
75837: PPUSH
75838: CALL_OW 256
75842: PUSH
75843: LD_INT 250
75845: LESS
75846: IFFALSE 75859
// begin ComAutodestruct ( i ) ;
75848: LD_VAR 0 4
75852: PPUSH
75853: CALL 75703 0 1
// exit ;
75857: GO 76314
// end ; x := GetX ( enemy_unit ) ;
75859: LD_ADDR_VAR 0 7
75863: PUSH
75864: LD_VAR 0 2
75868: PPUSH
75869: CALL_OW 250
75873: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75874: LD_ADDR_VAR 0 8
75878: PUSH
75879: LD_VAR 0 2
75883: PPUSH
75884: CALL_OW 251
75888: ST_TO_ADDR
// if not x or not y then
75889: LD_VAR 0 7
75893: NOT
75894: IFTRUE 75903
75896: PUSH
75897: LD_VAR 0 8
75901: NOT
75902: OR
75903: IFFALSE 75907
// exit ;
75905: GO 76314
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75907: LD_ADDR_VAR 0 6
75911: PUSH
75912: LD_VAR 0 7
75916: PPUSH
75917: LD_INT 0
75919: PPUSH
75920: LD_INT 4
75922: PPUSH
75923: CALL_OW 272
75927: PUSH
75928: LD_VAR 0 8
75932: PPUSH
75933: LD_INT 0
75935: PPUSH
75936: LD_INT 4
75938: PPUSH
75939: CALL_OW 273
75943: PUSH
75944: EMPTY
75945: LIST
75946: LIST
75947: PUSH
75948: LD_VAR 0 7
75952: PPUSH
75953: LD_INT 1
75955: PPUSH
75956: LD_INT 4
75958: PPUSH
75959: CALL_OW 272
75963: PUSH
75964: LD_VAR 0 8
75968: PPUSH
75969: LD_INT 1
75971: PPUSH
75972: LD_INT 4
75974: PPUSH
75975: CALL_OW 273
75979: PUSH
75980: EMPTY
75981: LIST
75982: LIST
75983: PUSH
75984: LD_VAR 0 7
75988: PPUSH
75989: LD_INT 2
75991: PPUSH
75992: LD_INT 4
75994: PPUSH
75995: CALL_OW 272
75999: PUSH
76000: LD_VAR 0 8
76004: PPUSH
76005: LD_INT 2
76007: PPUSH
76008: LD_INT 4
76010: PPUSH
76011: CALL_OW 273
76015: PUSH
76016: EMPTY
76017: LIST
76018: LIST
76019: PUSH
76020: LD_VAR 0 7
76024: PPUSH
76025: LD_INT 3
76027: PPUSH
76028: LD_INT 4
76030: PPUSH
76031: CALL_OW 272
76035: PUSH
76036: LD_VAR 0 8
76040: PPUSH
76041: LD_INT 3
76043: PPUSH
76044: LD_INT 4
76046: PPUSH
76047: CALL_OW 273
76051: PUSH
76052: EMPTY
76053: LIST
76054: LIST
76055: PUSH
76056: LD_VAR 0 7
76060: PPUSH
76061: LD_INT 4
76063: PPUSH
76064: LD_INT 4
76066: PPUSH
76067: CALL_OW 272
76071: PUSH
76072: LD_VAR 0 8
76076: PPUSH
76077: LD_INT 4
76079: PPUSH
76080: LD_INT 4
76082: PPUSH
76083: CALL_OW 273
76087: PUSH
76088: EMPTY
76089: LIST
76090: LIST
76091: PUSH
76092: LD_VAR 0 7
76096: PPUSH
76097: LD_INT 5
76099: PPUSH
76100: LD_INT 4
76102: PPUSH
76103: CALL_OW 272
76107: PUSH
76108: LD_VAR 0 8
76112: PPUSH
76113: LD_INT 5
76115: PPUSH
76116: LD_INT 4
76118: PPUSH
76119: CALL_OW 273
76123: PUSH
76124: EMPTY
76125: LIST
76126: LIST
76127: PUSH
76128: EMPTY
76129: LIST
76130: LIST
76131: LIST
76132: LIST
76133: LIST
76134: LIST
76135: ST_TO_ADDR
// for i = tmp downto 1 do
76136: LD_ADDR_VAR 0 4
76140: PUSH
76141: DOUBLE
76142: LD_VAR 0 6
76146: INC
76147: ST_TO_ADDR
76148: LD_INT 1
76150: PUSH
76151: FOR_DOWNTO
76152: IFFALSE 76255
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
76154: LD_VAR 0 6
76158: PUSH
76159: LD_VAR 0 4
76163: ARRAY
76164: PUSH
76165: LD_INT 1
76167: ARRAY
76168: PPUSH
76169: LD_VAR 0 6
76173: PUSH
76174: LD_VAR 0 4
76178: ARRAY
76179: PUSH
76180: LD_INT 2
76182: ARRAY
76183: PPUSH
76184: CALL_OW 488
76188: NOT
76189: IFTRUE 76231
76191: PUSH
76192: LD_VAR 0 6
76196: PUSH
76197: LD_VAR 0 4
76201: ARRAY
76202: PUSH
76203: LD_INT 1
76205: ARRAY
76206: PPUSH
76207: LD_VAR 0 6
76211: PUSH
76212: LD_VAR 0 4
76216: ARRAY
76217: PUSH
76218: LD_INT 2
76220: ARRAY
76221: PPUSH
76222: CALL_OW 428
76226: PUSH
76227: LD_INT 0
76229: NONEQUAL
76230: OR
76231: IFFALSE 76253
// tmp := Delete ( tmp , i ) ;
76233: LD_ADDR_VAR 0 6
76237: PUSH
76238: LD_VAR 0 6
76242: PPUSH
76243: LD_VAR 0 4
76247: PPUSH
76248: CALL_OW 3
76252: ST_TO_ADDR
76253: GO 76151
76255: POP
76256: POP
// j := GetClosestHex ( unit , tmp ) ;
76257: LD_ADDR_VAR 0 5
76261: PUSH
76262: LD_VAR 0 1
76266: PPUSH
76267: LD_VAR 0 6
76271: PPUSH
76272: CALL 75549 0 2
76276: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
76277: LD_VAR 0 1
76281: PPUSH
76282: LD_VAR 0 5
76286: PUSH
76287: LD_INT 1
76289: ARRAY
76290: PPUSH
76291: LD_VAR 0 5
76295: PUSH
76296: LD_INT 2
76298: ARRAY
76299: PPUSH
76300: CALL_OW 111
// result := j ;
76304: LD_ADDR_VAR 0 3
76308: PUSH
76309: LD_VAR 0 5
76313: ST_TO_ADDR
// end ;
76314: LD_VAR 0 3
76318: RET
// export function PrepareApemanSoldier ( ) ; begin
76319: LD_INT 0
76321: PPUSH
// uc_nation := 0 ;
76322: LD_ADDR_OWVAR 21
76326: PUSH
76327: LD_INT 0
76329: ST_TO_ADDR
// hc_sex := sex_male ;
76330: LD_ADDR_OWVAR 27
76334: PUSH
76335: LD_INT 1
76337: ST_TO_ADDR
// hc_name :=  ;
76338: LD_ADDR_OWVAR 26
76342: PUSH
76343: LD_STRING 
76345: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
76346: LD_ADDR_OWVAR 28
76350: PUSH
76351: LD_INT 15
76353: ST_TO_ADDR
// hc_gallery :=  ;
76354: LD_ADDR_OWVAR 33
76358: PUSH
76359: LD_STRING 
76361: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76362: LD_ADDR_OWVAR 31
76366: PUSH
76367: LD_INT 0
76369: PPUSH
76370: LD_INT 3
76372: PPUSH
76373: CALL_OW 12
76377: PUSH
76378: LD_INT 0
76380: PPUSH
76381: LD_INT 3
76383: PPUSH
76384: CALL_OW 12
76388: PUSH
76389: LD_INT 0
76391: PUSH
76392: LD_INT 0
76394: PUSH
76395: EMPTY
76396: LIST
76397: LIST
76398: LIST
76399: LIST
76400: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
76401: LD_ADDR_OWVAR 29
76405: PUSH
76406: LD_INT 10
76408: PUSH
76409: LD_INT 12
76411: PUSH
76412: EMPTY
76413: LIST
76414: LIST
76415: ST_TO_ADDR
// end ;
76416: LD_VAR 0 1
76420: RET
// export function PrepareApemanEngineer ( ) ; begin
76421: LD_INT 0
76423: PPUSH
// uc_nation := 0 ;
76424: LD_ADDR_OWVAR 21
76428: PUSH
76429: LD_INT 0
76431: ST_TO_ADDR
// hc_sex := sex_male ;
76432: LD_ADDR_OWVAR 27
76436: PUSH
76437: LD_INT 1
76439: ST_TO_ADDR
// hc_name :=  ;
76440: LD_ADDR_OWVAR 26
76444: PUSH
76445: LD_STRING 
76447: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
76448: LD_ADDR_OWVAR 28
76452: PUSH
76453: LD_INT 16
76455: ST_TO_ADDR
// hc_gallery :=  ;
76456: LD_ADDR_OWVAR 33
76460: PUSH
76461: LD_STRING 
76463: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76464: LD_ADDR_OWVAR 31
76468: PUSH
76469: LD_INT 0
76471: PPUSH
76472: LD_INT 3
76474: PPUSH
76475: CALL_OW 12
76479: PUSH
76480: LD_INT 0
76482: PPUSH
76483: LD_INT 3
76485: PPUSH
76486: CALL_OW 12
76490: PUSH
76491: LD_INT 0
76493: PUSH
76494: LD_INT 0
76496: PUSH
76497: EMPTY
76498: LIST
76499: LIST
76500: LIST
76501: LIST
76502: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
76503: LD_ADDR_OWVAR 29
76507: PUSH
76508: LD_INT 10
76510: PUSH
76511: LD_INT 12
76513: PUSH
76514: EMPTY
76515: LIST
76516: LIST
76517: ST_TO_ADDR
// end ;
76518: LD_VAR 0 1
76522: RET
// export function PrepareApeman ( agressivity ) ; begin
76523: LD_INT 0
76525: PPUSH
// uc_side := 0 ;
76526: LD_ADDR_OWVAR 20
76530: PUSH
76531: LD_INT 0
76533: ST_TO_ADDR
// uc_nation := 0 ;
76534: LD_ADDR_OWVAR 21
76538: PUSH
76539: LD_INT 0
76541: ST_TO_ADDR
// hc_sex := sex_male ;
76542: LD_ADDR_OWVAR 27
76546: PUSH
76547: LD_INT 1
76549: ST_TO_ADDR
// hc_class := class_apeman ;
76550: LD_ADDR_OWVAR 28
76554: PUSH
76555: LD_INT 12
76557: ST_TO_ADDR
// hc_gallery :=  ;
76558: LD_ADDR_OWVAR 33
76562: PUSH
76563: LD_STRING 
76565: ST_TO_ADDR
// hc_name :=  ;
76566: LD_ADDR_OWVAR 26
76570: PUSH
76571: LD_STRING 
76573: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
76574: LD_ADDR_OWVAR 29
76578: PUSH
76579: LD_INT 10
76581: PUSH
76582: LD_INT 12
76584: PUSH
76585: EMPTY
76586: LIST
76587: LIST
76588: ST_TO_ADDR
// if agressivity = 0 then
76589: LD_VAR 0 1
76593: PUSH
76594: LD_INT 0
76596: EQUAL
76597: IFFALSE 76609
// hc_agressivity := 0 else
76599: LD_ADDR_OWVAR 35
76603: PUSH
76604: LD_INT 0
76606: ST_TO_ADDR
76607: GO 76630
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76609: LD_ADDR_OWVAR 35
76613: PUSH
76614: LD_VAR 0 1
76618: NEG
76619: PPUSH
76620: LD_VAR 0 1
76624: PPUSH
76625: CALL_OW 12
76629: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76630: LD_ADDR_OWVAR 31
76634: PUSH
76635: LD_INT 0
76637: PPUSH
76638: LD_INT 3
76640: PPUSH
76641: CALL_OW 12
76645: PUSH
76646: LD_INT 0
76648: PPUSH
76649: LD_INT 3
76651: PPUSH
76652: CALL_OW 12
76656: PUSH
76657: LD_INT 0
76659: PUSH
76660: LD_INT 0
76662: PUSH
76663: EMPTY
76664: LIST
76665: LIST
76666: LIST
76667: LIST
76668: ST_TO_ADDR
// end ;
76669: LD_VAR 0 2
76673: RET
// export function PrepareTiger ( agressivity ) ; begin
76674: LD_INT 0
76676: PPUSH
// uc_side := 0 ;
76677: LD_ADDR_OWVAR 20
76681: PUSH
76682: LD_INT 0
76684: ST_TO_ADDR
// uc_nation := 0 ;
76685: LD_ADDR_OWVAR 21
76689: PUSH
76690: LD_INT 0
76692: ST_TO_ADDR
// InitHc ;
76693: CALL_OW 19
// hc_class := class_tiger ;
76697: LD_ADDR_OWVAR 28
76701: PUSH
76702: LD_INT 14
76704: ST_TO_ADDR
// hc_gallery :=  ;
76705: LD_ADDR_OWVAR 33
76709: PUSH
76710: LD_STRING 
76712: ST_TO_ADDR
// hc_name :=  ;
76713: LD_ADDR_OWVAR 26
76717: PUSH
76718: LD_STRING 
76720: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76721: LD_ADDR_OWVAR 35
76725: PUSH
76726: LD_VAR 0 1
76730: NEG
76731: PPUSH
76732: LD_VAR 0 1
76736: PPUSH
76737: CALL_OW 12
76741: ST_TO_ADDR
// end ;
76742: LD_VAR 0 2
76746: RET
// export function PrepareEnchidna ( ) ; begin
76747: LD_INT 0
76749: PPUSH
// uc_side := 0 ;
76750: LD_ADDR_OWVAR 20
76754: PUSH
76755: LD_INT 0
76757: ST_TO_ADDR
// uc_nation := 0 ;
76758: LD_ADDR_OWVAR 21
76762: PUSH
76763: LD_INT 0
76765: ST_TO_ADDR
// InitHc ;
76766: CALL_OW 19
// hc_class := class_baggie ;
76770: LD_ADDR_OWVAR 28
76774: PUSH
76775: LD_INT 13
76777: ST_TO_ADDR
// hc_gallery :=  ;
76778: LD_ADDR_OWVAR 33
76782: PUSH
76783: LD_STRING 
76785: ST_TO_ADDR
// hc_name :=  ;
76786: LD_ADDR_OWVAR 26
76790: PUSH
76791: LD_STRING 
76793: ST_TO_ADDR
// end ;
76794: LD_VAR 0 1
76798: RET
// export function PrepareFrog ( ) ; begin
76799: LD_INT 0
76801: PPUSH
// uc_side := 0 ;
76802: LD_ADDR_OWVAR 20
76806: PUSH
76807: LD_INT 0
76809: ST_TO_ADDR
// uc_nation := 0 ;
76810: LD_ADDR_OWVAR 21
76814: PUSH
76815: LD_INT 0
76817: ST_TO_ADDR
// InitHc ;
76818: CALL_OW 19
// hc_class := class_frog ;
76822: LD_ADDR_OWVAR 28
76826: PUSH
76827: LD_INT 19
76829: ST_TO_ADDR
// hc_gallery :=  ;
76830: LD_ADDR_OWVAR 33
76834: PUSH
76835: LD_STRING 
76837: ST_TO_ADDR
// hc_name :=  ;
76838: LD_ADDR_OWVAR 26
76842: PUSH
76843: LD_STRING 
76845: ST_TO_ADDR
// end ;
76846: LD_VAR 0 1
76850: RET
// export function PrepareFish ( ) ; begin
76851: LD_INT 0
76853: PPUSH
// uc_side := 0 ;
76854: LD_ADDR_OWVAR 20
76858: PUSH
76859: LD_INT 0
76861: ST_TO_ADDR
// uc_nation := 0 ;
76862: LD_ADDR_OWVAR 21
76866: PUSH
76867: LD_INT 0
76869: ST_TO_ADDR
// InitHc ;
76870: CALL_OW 19
// hc_class := class_fish ;
76874: LD_ADDR_OWVAR 28
76878: PUSH
76879: LD_INT 20
76881: ST_TO_ADDR
// hc_gallery :=  ;
76882: LD_ADDR_OWVAR 33
76886: PUSH
76887: LD_STRING 
76889: ST_TO_ADDR
// hc_name :=  ;
76890: LD_ADDR_OWVAR 26
76894: PUSH
76895: LD_STRING 
76897: ST_TO_ADDR
// end ;
76898: LD_VAR 0 1
76902: RET
// export function PrepareBird ( ) ; begin
76903: LD_INT 0
76905: PPUSH
// uc_side := 0 ;
76906: LD_ADDR_OWVAR 20
76910: PUSH
76911: LD_INT 0
76913: ST_TO_ADDR
// uc_nation := 0 ;
76914: LD_ADDR_OWVAR 21
76918: PUSH
76919: LD_INT 0
76921: ST_TO_ADDR
// InitHc ;
76922: CALL_OW 19
// hc_class := class_phororhacos ;
76926: LD_ADDR_OWVAR 28
76930: PUSH
76931: LD_INT 18
76933: ST_TO_ADDR
// hc_gallery :=  ;
76934: LD_ADDR_OWVAR 33
76938: PUSH
76939: LD_STRING 
76941: ST_TO_ADDR
// hc_name :=  ;
76942: LD_ADDR_OWVAR 26
76946: PUSH
76947: LD_STRING 
76949: ST_TO_ADDR
// end ;
76950: LD_VAR 0 1
76954: RET
// export function PrepareHorse ( ) ; begin
76955: LD_INT 0
76957: PPUSH
// uc_side := 0 ;
76958: LD_ADDR_OWVAR 20
76962: PUSH
76963: LD_INT 0
76965: ST_TO_ADDR
// uc_nation := 0 ;
76966: LD_ADDR_OWVAR 21
76970: PUSH
76971: LD_INT 0
76973: ST_TO_ADDR
// InitHc ;
76974: CALL_OW 19
// hc_class := class_horse ;
76978: LD_ADDR_OWVAR 28
76982: PUSH
76983: LD_INT 21
76985: ST_TO_ADDR
// hc_gallery :=  ;
76986: LD_ADDR_OWVAR 33
76990: PUSH
76991: LD_STRING 
76993: ST_TO_ADDR
// hc_name :=  ;
76994: LD_ADDR_OWVAR 26
76998: PUSH
76999: LD_STRING 
77001: ST_TO_ADDR
// end ;
77002: LD_VAR 0 1
77006: RET
// export function PrepareMastodont ( ) ; begin
77007: LD_INT 0
77009: PPUSH
// uc_side := 0 ;
77010: LD_ADDR_OWVAR 20
77014: PUSH
77015: LD_INT 0
77017: ST_TO_ADDR
// uc_nation := 0 ;
77018: LD_ADDR_OWVAR 21
77022: PUSH
77023: LD_INT 0
77025: ST_TO_ADDR
// vc_chassis := class_mastodont ;
77026: LD_ADDR_OWVAR 37
77030: PUSH
77031: LD_INT 31
77033: ST_TO_ADDR
// vc_control := control_rider ;
77034: LD_ADDR_OWVAR 38
77038: PUSH
77039: LD_INT 4
77041: ST_TO_ADDR
// end ;
77042: LD_VAR 0 1
77046: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77047: LD_INT 0
77049: PPUSH
77050: PPUSH
77051: PPUSH
// uc_side = 0 ;
77052: LD_ADDR_OWVAR 20
77056: PUSH
77057: LD_INT 0
77059: ST_TO_ADDR
// uc_nation = 0 ;
77060: LD_ADDR_OWVAR 21
77064: PUSH
77065: LD_INT 0
77067: ST_TO_ADDR
// InitHc_All ( ) ;
77068: CALL_OW 584
// InitVc ;
77072: CALL_OW 20
// if mastodonts then
77076: LD_VAR 0 6
77080: IFFALSE 77147
// for i = 1 to mastodonts do
77082: LD_ADDR_VAR 0 11
77086: PUSH
77087: DOUBLE
77088: LD_INT 1
77090: DEC
77091: ST_TO_ADDR
77092: LD_VAR 0 6
77096: PUSH
77097: FOR_TO
77098: IFFALSE 77145
// begin vc_chassis := 31 ;
77100: LD_ADDR_OWVAR 37
77104: PUSH
77105: LD_INT 31
77107: ST_TO_ADDR
// vc_control := control_rider ;
77108: LD_ADDR_OWVAR 38
77112: PUSH
77113: LD_INT 4
77115: ST_TO_ADDR
// animal := CreateVehicle ;
77116: LD_ADDR_VAR 0 12
77120: PUSH
77121: CALL_OW 45
77125: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77126: LD_VAR 0 12
77130: PPUSH
77131: LD_VAR 0 8
77135: PPUSH
77136: LD_INT 0
77138: PPUSH
77139: CALL 79289 0 3
// end ;
77143: GO 77097
77145: POP
77146: POP
// if horses then
77147: LD_VAR 0 5
77151: IFFALSE 77218
// for i = 1 to horses do
77153: LD_ADDR_VAR 0 11
77157: PUSH
77158: DOUBLE
77159: LD_INT 1
77161: DEC
77162: ST_TO_ADDR
77163: LD_VAR 0 5
77167: PUSH
77168: FOR_TO
77169: IFFALSE 77216
// begin hc_class := 21 ;
77171: LD_ADDR_OWVAR 28
77175: PUSH
77176: LD_INT 21
77178: ST_TO_ADDR
// hc_gallery :=  ;
77179: LD_ADDR_OWVAR 33
77183: PUSH
77184: LD_STRING 
77186: ST_TO_ADDR
// animal := CreateHuman ;
77187: LD_ADDR_VAR 0 12
77191: PUSH
77192: CALL_OW 44
77196: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77197: LD_VAR 0 12
77201: PPUSH
77202: LD_VAR 0 8
77206: PPUSH
77207: LD_INT 0
77209: PPUSH
77210: CALL 79289 0 3
// end ;
77214: GO 77168
77216: POP
77217: POP
// if birds then
77218: LD_VAR 0 1
77222: IFFALSE 77289
// for i = 1 to birds do
77224: LD_ADDR_VAR 0 11
77228: PUSH
77229: DOUBLE
77230: LD_INT 1
77232: DEC
77233: ST_TO_ADDR
77234: LD_VAR 0 1
77238: PUSH
77239: FOR_TO
77240: IFFALSE 77287
// begin hc_class := 18 ;
77242: LD_ADDR_OWVAR 28
77246: PUSH
77247: LD_INT 18
77249: ST_TO_ADDR
// hc_gallery =  ;
77250: LD_ADDR_OWVAR 33
77254: PUSH
77255: LD_STRING 
77257: ST_TO_ADDR
// animal := CreateHuman ;
77258: LD_ADDR_VAR 0 12
77262: PUSH
77263: CALL_OW 44
77267: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77268: LD_VAR 0 12
77272: PPUSH
77273: LD_VAR 0 8
77277: PPUSH
77278: LD_INT 0
77280: PPUSH
77281: CALL 79289 0 3
// end ;
77285: GO 77239
77287: POP
77288: POP
// if tigers then
77289: LD_VAR 0 2
77293: IFFALSE 77377
// for i = 1 to tigers do
77295: LD_ADDR_VAR 0 11
77299: PUSH
77300: DOUBLE
77301: LD_INT 1
77303: DEC
77304: ST_TO_ADDR
77305: LD_VAR 0 2
77309: PUSH
77310: FOR_TO
77311: IFFALSE 77375
// begin hc_class = class_tiger ;
77313: LD_ADDR_OWVAR 28
77317: PUSH
77318: LD_INT 14
77320: ST_TO_ADDR
// hc_gallery =  ;
77321: LD_ADDR_OWVAR 33
77325: PUSH
77326: LD_STRING 
77328: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77329: LD_ADDR_OWVAR 35
77333: PUSH
77334: LD_INT 7
77336: NEG
77337: PPUSH
77338: LD_INT 7
77340: PPUSH
77341: CALL_OW 12
77345: ST_TO_ADDR
// animal := CreateHuman ;
77346: LD_ADDR_VAR 0 12
77350: PUSH
77351: CALL_OW 44
77355: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77356: LD_VAR 0 12
77360: PPUSH
77361: LD_VAR 0 8
77365: PPUSH
77366: LD_INT 0
77368: PPUSH
77369: CALL 79289 0 3
// end ;
77373: GO 77310
77375: POP
77376: POP
// if apemans then
77377: LD_VAR 0 3
77381: IFFALSE 77504
// for i = 1 to apemans do
77383: LD_ADDR_VAR 0 11
77387: PUSH
77388: DOUBLE
77389: LD_INT 1
77391: DEC
77392: ST_TO_ADDR
77393: LD_VAR 0 3
77397: PUSH
77398: FOR_TO
77399: IFFALSE 77502
// begin hc_class = class_apeman ;
77401: LD_ADDR_OWVAR 28
77405: PUSH
77406: LD_INT 12
77408: ST_TO_ADDR
// hc_gallery =  ;
77409: LD_ADDR_OWVAR 33
77413: PUSH
77414: LD_STRING 
77416: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
77417: LD_ADDR_OWVAR 35
77421: PUSH
77422: LD_INT 2
77424: NEG
77425: PPUSH
77426: LD_INT 2
77428: PPUSH
77429: CALL_OW 12
77433: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
77434: LD_ADDR_OWVAR 31
77438: PUSH
77439: LD_INT 1
77441: PPUSH
77442: LD_INT 3
77444: PPUSH
77445: CALL_OW 12
77449: PUSH
77450: LD_INT 1
77452: PPUSH
77453: LD_INT 3
77455: PPUSH
77456: CALL_OW 12
77460: PUSH
77461: LD_INT 0
77463: PUSH
77464: LD_INT 0
77466: PUSH
77467: EMPTY
77468: LIST
77469: LIST
77470: LIST
77471: LIST
77472: ST_TO_ADDR
// animal := CreateHuman ;
77473: LD_ADDR_VAR 0 12
77477: PUSH
77478: CALL_OW 44
77482: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77483: LD_VAR 0 12
77487: PPUSH
77488: LD_VAR 0 8
77492: PPUSH
77493: LD_INT 0
77495: PPUSH
77496: CALL 79289 0 3
// end ;
77500: GO 77398
77502: POP
77503: POP
// if enchidnas then
77504: LD_VAR 0 4
77508: IFFALSE 77575
// for i = 1 to enchidnas do
77510: LD_ADDR_VAR 0 11
77514: PUSH
77515: DOUBLE
77516: LD_INT 1
77518: DEC
77519: ST_TO_ADDR
77520: LD_VAR 0 4
77524: PUSH
77525: FOR_TO
77526: IFFALSE 77573
// begin hc_class = 13 ;
77528: LD_ADDR_OWVAR 28
77532: PUSH
77533: LD_INT 13
77535: ST_TO_ADDR
// hc_gallery =  ;
77536: LD_ADDR_OWVAR 33
77540: PUSH
77541: LD_STRING 
77543: ST_TO_ADDR
// animal := CreateHuman ;
77544: LD_ADDR_VAR 0 12
77548: PUSH
77549: CALL_OW 44
77553: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77554: LD_VAR 0 12
77558: PPUSH
77559: LD_VAR 0 8
77563: PPUSH
77564: LD_INT 0
77566: PPUSH
77567: CALL 79289 0 3
// end ;
77571: GO 77525
77573: POP
77574: POP
// if fishes then
77575: LD_VAR 0 7
77579: IFFALSE 77646
// for i = 1 to fishes do
77581: LD_ADDR_VAR 0 11
77585: PUSH
77586: DOUBLE
77587: LD_INT 1
77589: DEC
77590: ST_TO_ADDR
77591: LD_VAR 0 7
77595: PUSH
77596: FOR_TO
77597: IFFALSE 77644
// begin hc_class = 20 ;
77599: LD_ADDR_OWVAR 28
77603: PUSH
77604: LD_INT 20
77606: ST_TO_ADDR
// hc_gallery =  ;
77607: LD_ADDR_OWVAR 33
77611: PUSH
77612: LD_STRING 
77614: ST_TO_ADDR
// animal := CreateHuman ;
77615: LD_ADDR_VAR 0 12
77619: PUSH
77620: CALL_OW 44
77624: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77625: LD_VAR 0 12
77629: PPUSH
77630: LD_VAR 0 9
77634: PPUSH
77635: LD_INT 0
77637: PPUSH
77638: CALL 79289 0 3
// end ;
77642: GO 77596
77644: POP
77645: POP
// end ;
77646: LD_VAR 0 10
77650: RET
// export function WantHeal ( sci , unit ) ; begin
77651: LD_INT 0
77653: PPUSH
// if GetTaskList ( sci ) > 0 then
77654: LD_VAR 0 1
77658: PPUSH
77659: CALL_OW 437
77663: PUSH
77664: LD_INT 0
77666: GREATER
77667: IFFALSE 77739
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77669: LD_VAR 0 1
77673: PPUSH
77674: CALL_OW 437
77678: PUSH
77679: LD_INT 1
77681: ARRAY
77682: PUSH
77683: LD_INT 1
77685: ARRAY
77686: PUSH
77687: LD_STRING l
77689: EQUAL
77690: IFFALSE 77717
77692: PUSH
77693: LD_VAR 0 1
77697: PPUSH
77698: CALL_OW 437
77702: PUSH
77703: LD_INT 1
77705: ARRAY
77706: PUSH
77707: LD_INT 4
77709: ARRAY
77710: PUSH
77711: LD_VAR 0 2
77715: EQUAL
77716: AND
77717: IFFALSE 77729
// result := true else
77719: LD_ADDR_VAR 0 3
77723: PUSH
77724: LD_INT 1
77726: ST_TO_ADDR
77727: GO 77737
// result := false ;
77729: LD_ADDR_VAR 0 3
77733: PUSH
77734: LD_INT 0
77736: ST_TO_ADDR
// end else
77737: GO 77747
// result := false ;
77739: LD_ADDR_VAR 0 3
77743: PUSH
77744: LD_INT 0
77746: ST_TO_ADDR
// end ;
77747: LD_VAR 0 3
77751: RET
// export function HealTarget ( sci ) ; begin
77752: LD_INT 0
77754: PPUSH
// if not sci then
77755: LD_VAR 0 1
77759: NOT
77760: IFFALSE 77764
// exit ;
77762: GO 77829
// result := 0 ;
77764: LD_ADDR_VAR 0 2
77768: PUSH
77769: LD_INT 0
77771: ST_TO_ADDR
// if GetTaskList ( sci ) then
77772: LD_VAR 0 1
77776: PPUSH
77777: CALL_OW 437
77781: IFFALSE 77829
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77783: LD_VAR 0 1
77787: PPUSH
77788: CALL_OW 437
77792: PUSH
77793: LD_INT 1
77795: ARRAY
77796: PUSH
77797: LD_INT 1
77799: ARRAY
77800: PUSH
77801: LD_STRING l
77803: EQUAL
77804: IFFALSE 77829
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77806: LD_ADDR_VAR 0 2
77810: PUSH
77811: LD_VAR 0 1
77815: PPUSH
77816: CALL_OW 437
77820: PUSH
77821: LD_INT 1
77823: ARRAY
77824: PUSH
77825: LD_INT 4
77827: ARRAY
77828: ST_TO_ADDR
// end ;
77829: LD_VAR 0 2
77833: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77834: LD_INT 0
77836: PPUSH
77837: PPUSH
77838: PPUSH
77839: PPUSH
// if not base_units then
77840: LD_VAR 0 1
77844: NOT
77845: IFFALSE 77849
// exit ;
77847: GO 77936
// result := false ;
77849: LD_ADDR_VAR 0 2
77853: PUSH
77854: LD_INT 0
77856: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77857: LD_ADDR_VAR 0 5
77861: PUSH
77862: LD_VAR 0 1
77866: PPUSH
77867: LD_INT 21
77869: PUSH
77870: LD_INT 3
77872: PUSH
77873: EMPTY
77874: LIST
77875: LIST
77876: PPUSH
77877: CALL_OW 72
77881: ST_TO_ADDR
// if not tmp then
77882: LD_VAR 0 5
77886: NOT
77887: IFFALSE 77891
// exit ;
77889: GO 77936
// for i in tmp do
77891: LD_ADDR_VAR 0 3
77895: PUSH
77896: LD_VAR 0 5
77900: PUSH
77901: FOR_IN
77902: IFFALSE 77934
// begin result := EnemyInRange ( i , 22 ) ;
77904: LD_ADDR_VAR 0 2
77908: PUSH
77909: LD_VAR 0 3
77913: PPUSH
77914: LD_INT 22
77916: PPUSH
77917: CALL 75351 0 2
77921: ST_TO_ADDR
// if result then
77922: LD_VAR 0 2
77926: IFFALSE 77932
// exit ;
77928: POP
77929: POP
77930: GO 77936
// end ;
77932: GO 77901
77934: POP
77935: POP
// end ;
77936: LD_VAR 0 2
77940: RET
// export function FilterByTag ( units , tag ) ; begin
77941: LD_INT 0
77943: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77944: LD_ADDR_VAR 0 3
77948: PUSH
77949: LD_VAR 0 1
77953: PPUSH
77954: LD_INT 120
77956: PUSH
77957: LD_VAR 0 2
77961: PUSH
77962: EMPTY
77963: LIST
77964: LIST
77965: PPUSH
77966: CALL_OW 72
77970: ST_TO_ADDR
// end ;
77971: LD_VAR 0 3
77975: RET
// export function IsDriver ( un ) ; begin
77976: LD_INT 0
77978: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77979: LD_ADDR_VAR 0 2
77983: PUSH
77984: LD_VAR 0 1
77988: PUSH
77989: LD_INT 55
77991: PUSH
77992: EMPTY
77993: LIST
77994: PPUSH
77995: CALL_OW 69
77999: IN
78000: ST_TO_ADDR
// end ;
78001: LD_VAR 0 2
78005: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78006: LD_INT 0
78008: PPUSH
78009: PPUSH
// list := [ ] ;
78010: LD_ADDR_VAR 0 5
78014: PUSH
78015: EMPTY
78016: ST_TO_ADDR
// case d of 0 :
78017: LD_VAR 0 3
78021: PUSH
78022: LD_INT 0
78024: DOUBLE
78025: EQUAL
78026: IFTRUE 78030
78028: GO 78163
78030: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78031: LD_ADDR_VAR 0 5
78035: PUSH
78036: LD_VAR 0 1
78040: PUSH
78041: LD_INT 4
78043: MINUS
78044: PUSH
78045: LD_VAR 0 2
78049: PUSH
78050: LD_INT 4
78052: MINUS
78053: PUSH
78054: LD_INT 2
78056: PUSH
78057: EMPTY
78058: LIST
78059: LIST
78060: LIST
78061: PUSH
78062: LD_VAR 0 1
78066: PUSH
78067: LD_INT 3
78069: MINUS
78070: PUSH
78071: LD_VAR 0 2
78075: PUSH
78076: LD_INT 1
78078: PUSH
78079: EMPTY
78080: LIST
78081: LIST
78082: LIST
78083: PUSH
78084: LD_VAR 0 1
78088: PUSH
78089: LD_INT 4
78091: PLUS
78092: PUSH
78093: LD_VAR 0 2
78097: PUSH
78098: LD_INT 4
78100: PUSH
78101: EMPTY
78102: LIST
78103: LIST
78104: LIST
78105: PUSH
78106: LD_VAR 0 1
78110: PUSH
78111: LD_INT 3
78113: PLUS
78114: PUSH
78115: LD_VAR 0 2
78119: PUSH
78120: LD_INT 3
78122: PLUS
78123: PUSH
78124: LD_INT 5
78126: PUSH
78127: EMPTY
78128: LIST
78129: LIST
78130: LIST
78131: PUSH
78132: LD_VAR 0 1
78136: PUSH
78137: LD_VAR 0 2
78141: PUSH
78142: LD_INT 4
78144: PLUS
78145: PUSH
78146: LD_INT 0
78148: PUSH
78149: EMPTY
78150: LIST
78151: LIST
78152: LIST
78153: PUSH
78154: EMPTY
78155: LIST
78156: LIST
78157: LIST
78158: LIST
78159: LIST
78160: ST_TO_ADDR
// end ; 1 :
78161: GO 78861
78163: LD_INT 1
78165: DOUBLE
78166: EQUAL
78167: IFTRUE 78171
78169: GO 78304
78171: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78172: LD_ADDR_VAR 0 5
78176: PUSH
78177: LD_VAR 0 1
78181: PUSH
78182: LD_VAR 0 2
78186: PUSH
78187: LD_INT 4
78189: MINUS
78190: PUSH
78191: LD_INT 3
78193: PUSH
78194: EMPTY
78195: LIST
78196: LIST
78197: LIST
78198: PUSH
78199: LD_VAR 0 1
78203: PUSH
78204: LD_INT 3
78206: MINUS
78207: PUSH
78208: LD_VAR 0 2
78212: PUSH
78213: LD_INT 3
78215: MINUS
78216: PUSH
78217: LD_INT 2
78219: PUSH
78220: EMPTY
78221: LIST
78222: LIST
78223: LIST
78224: PUSH
78225: LD_VAR 0 1
78229: PUSH
78230: LD_INT 4
78232: MINUS
78233: PUSH
78234: LD_VAR 0 2
78238: PUSH
78239: LD_INT 1
78241: PUSH
78242: EMPTY
78243: LIST
78244: LIST
78245: LIST
78246: PUSH
78247: LD_VAR 0 1
78251: PUSH
78252: LD_VAR 0 2
78256: PUSH
78257: LD_INT 3
78259: PLUS
78260: PUSH
78261: LD_INT 0
78263: PUSH
78264: EMPTY
78265: LIST
78266: LIST
78267: LIST
78268: PUSH
78269: LD_VAR 0 1
78273: PUSH
78274: LD_INT 4
78276: PLUS
78277: PUSH
78278: LD_VAR 0 2
78282: PUSH
78283: LD_INT 4
78285: PLUS
78286: PUSH
78287: LD_INT 5
78289: PUSH
78290: EMPTY
78291: LIST
78292: LIST
78293: LIST
78294: PUSH
78295: EMPTY
78296: LIST
78297: LIST
78298: LIST
78299: LIST
78300: LIST
78301: ST_TO_ADDR
// end ; 2 :
78302: GO 78861
78304: LD_INT 2
78306: DOUBLE
78307: EQUAL
78308: IFTRUE 78312
78310: GO 78441
78312: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78313: LD_ADDR_VAR 0 5
78317: PUSH
78318: LD_VAR 0 1
78322: PUSH
78323: LD_VAR 0 2
78327: PUSH
78328: LD_INT 3
78330: MINUS
78331: PUSH
78332: LD_INT 3
78334: PUSH
78335: EMPTY
78336: LIST
78337: LIST
78338: LIST
78339: PUSH
78340: LD_VAR 0 1
78344: PUSH
78345: LD_INT 4
78347: PLUS
78348: PUSH
78349: LD_VAR 0 2
78353: PUSH
78354: LD_INT 4
78356: PUSH
78357: EMPTY
78358: LIST
78359: LIST
78360: LIST
78361: PUSH
78362: LD_VAR 0 1
78366: PUSH
78367: LD_VAR 0 2
78371: PUSH
78372: LD_INT 4
78374: PLUS
78375: PUSH
78376: LD_INT 0
78378: PUSH
78379: EMPTY
78380: LIST
78381: LIST
78382: LIST
78383: PUSH
78384: LD_VAR 0 1
78388: PUSH
78389: LD_INT 3
78391: MINUS
78392: PUSH
78393: LD_VAR 0 2
78397: PUSH
78398: LD_INT 1
78400: PUSH
78401: EMPTY
78402: LIST
78403: LIST
78404: LIST
78405: PUSH
78406: LD_VAR 0 1
78410: PUSH
78411: LD_INT 4
78413: MINUS
78414: PUSH
78415: LD_VAR 0 2
78419: PUSH
78420: LD_INT 4
78422: MINUS
78423: PUSH
78424: LD_INT 2
78426: PUSH
78427: EMPTY
78428: LIST
78429: LIST
78430: LIST
78431: PUSH
78432: EMPTY
78433: LIST
78434: LIST
78435: LIST
78436: LIST
78437: LIST
78438: ST_TO_ADDR
// end ; 3 :
78439: GO 78861
78441: LD_INT 3
78443: DOUBLE
78444: EQUAL
78445: IFTRUE 78449
78447: GO 78582
78449: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78450: LD_ADDR_VAR 0 5
78454: PUSH
78455: LD_VAR 0 1
78459: PUSH
78460: LD_INT 3
78462: PLUS
78463: PUSH
78464: LD_VAR 0 2
78468: PUSH
78469: LD_INT 4
78471: PUSH
78472: EMPTY
78473: LIST
78474: LIST
78475: LIST
78476: PUSH
78477: LD_VAR 0 1
78481: PUSH
78482: LD_INT 4
78484: PLUS
78485: PUSH
78486: LD_VAR 0 2
78490: PUSH
78491: LD_INT 4
78493: PLUS
78494: PUSH
78495: LD_INT 5
78497: PUSH
78498: EMPTY
78499: LIST
78500: LIST
78501: LIST
78502: PUSH
78503: LD_VAR 0 1
78507: PUSH
78508: LD_INT 4
78510: MINUS
78511: PUSH
78512: LD_VAR 0 2
78516: PUSH
78517: LD_INT 1
78519: PUSH
78520: EMPTY
78521: LIST
78522: LIST
78523: LIST
78524: PUSH
78525: LD_VAR 0 1
78529: PUSH
78530: LD_VAR 0 2
78534: PUSH
78535: LD_INT 4
78537: MINUS
78538: PUSH
78539: LD_INT 3
78541: PUSH
78542: EMPTY
78543: LIST
78544: LIST
78545: LIST
78546: PUSH
78547: LD_VAR 0 1
78551: PUSH
78552: LD_INT 3
78554: MINUS
78555: PUSH
78556: LD_VAR 0 2
78560: PUSH
78561: LD_INT 3
78563: MINUS
78564: PUSH
78565: LD_INT 2
78567: PUSH
78568: EMPTY
78569: LIST
78570: LIST
78571: LIST
78572: PUSH
78573: EMPTY
78574: LIST
78575: LIST
78576: LIST
78577: LIST
78578: LIST
78579: ST_TO_ADDR
// end ; 4 :
78580: GO 78861
78582: LD_INT 4
78584: DOUBLE
78585: EQUAL
78586: IFTRUE 78590
78588: GO 78723
78590: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78591: LD_ADDR_VAR 0 5
78595: PUSH
78596: LD_VAR 0 1
78600: PUSH
78601: LD_VAR 0 2
78605: PUSH
78606: LD_INT 4
78608: PLUS
78609: PUSH
78610: LD_INT 0
78612: PUSH
78613: EMPTY
78614: LIST
78615: LIST
78616: LIST
78617: PUSH
78618: LD_VAR 0 1
78622: PUSH
78623: LD_INT 3
78625: PLUS
78626: PUSH
78627: LD_VAR 0 2
78631: PUSH
78632: LD_INT 3
78634: PLUS
78635: PUSH
78636: LD_INT 5
78638: PUSH
78639: EMPTY
78640: LIST
78641: LIST
78642: LIST
78643: PUSH
78644: LD_VAR 0 1
78648: PUSH
78649: LD_INT 4
78651: PLUS
78652: PUSH
78653: LD_VAR 0 2
78657: PUSH
78658: LD_INT 4
78660: PUSH
78661: EMPTY
78662: LIST
78663: LIST
78664: LIST
78665: PUSH
78666: LD_VAR 0 1
78670: PUSH
78671: LD_VAR 0 2
78675: PUSH
78676: LD_INT 3
78678: MINUS
78679: PUSH
78680: LD_INT 3
78682: PUSH
78683: EMPTY
78684: LIST
78685: LIST
78686: LIST
78687: PUSH
78688: LD_VAR 0 1
78692: PUSH
78693: LD_INT 4
78695: MINUS
78696: PUSH
78697: LD_VAR 0 2
78701: PUSH
78702: LD_INT 4
78704: MINUS
78705: PUSH
78706: LD_INT 2
78708: PUSH
78709: EMPTY
78710: LIST
78711: LIST
78712: LIST
78713: PUSH
78714: EMPTY
78715: LIST
78716: LIST
78717: LIST
78718: LIST
78719: LIST
78720: ST_TO_ADDR
// end ; 5 :
78721: GO 78861
78723: LD_INT 5
78725: DOUBLE
78726: EQUAL
78727: IFTRUE 78731
78729: GO 78860
78731: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78732: LD_ADDR_VAR 0 5
78736: PUSH
78737: LD_VAR 0 1
78741: PUSH
78742: LD_INT 4
78744: MINUS
78745: PUSH
78746: LD_VAR 0 2
78750: PUSH
78751: LD_INT 1
78753: PUSH
78754: EMPTY
78755: LIST
78756: LIST
78757: LIST
78758: PUSH
78759: LD_VAR 0 1
78763: PUSH
78764: LD_VAR 0 2
78768: PUSH
78769: LD_INT 4
78771: MINUS
78772: PUSH
78773: LD_INT 3
78775: PUSH
78776: EMPTY
78777: LIST
78778: LIST
78779: LIST
78780: PUSH
78781: LD_VAR 0 1
78785: PUSH
78786: LD_INT 4
78788: PLUS
78789: PUSH
78790: LD_VAR 0 2
78794: PUSH
78795: LD_INT 4
78797: PLUS
78798: PUSH
78799: LD_INT 5
78801: PUSH
78802: EMPTY
78803: LIST
78804: LIST
78805: LIST
78806: PUSH
78807: LD_VAR 0 1
78811: PUSH
78812: LD_INT 3
78814: PLUS
78815: PUSH
78816: LD_VAR 0 2
78820: PUSH
78821: LD_INT 4
78823: PUSH
78824: EMPTY
78825: LIST
78826: LIST
78827: LIST
78828: PUSH
78829: LD_VAR 0 1
78833: PUSH
78834: LD_VAR 0 2
78838: PUSH
78839: LD_INT 3
78841: PLUS
78842: PUSH
78843: LD_INT 0
78845: PUSH
78846: EMPTY
78847: LIST
78848: LIST
78849: LIST
78850: PUSH
78851: EMPTY
78852: LIST
78853: LIST
78854: LIST
78855: LIST
78856: LIST
78857: ST_TO_ADDR
// end ; end ;
78858: GO 78861
78860: POP
// result := list ;
78861: LD_ADDR_VAR 0 4
78865: PUSH
78866: LD_VAR 0 5
78870: ST_TO_ADDR
// end ;
78871: LD_VAR 0 4
78875: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78876: LD_INT 0
78878: PPUSH
78879: PPUSH
78880: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78881: LD_VAR 0 1
78885: NOT
78886: IFTRUE 78914
78888: PUSH
78889: LD_VAR 0 2
78893: PUSH
78894: LD_INT 1
78896: PUSH
78897: LD_INT 2
78899: PUSH
78900: LD_INT 3
78902: PUSH
78903: LD_INT 4
78905: PUSH
78906: EMPTY
78907: LIST
78908: LIST
78909: LIST
78910: LIST
78911: IN
78912: NOT
78913: OR
78914: IFFALSE 78918
// exit ;
78916: GO 79001
// tmp := [ ] ;
78918: LD_ADDR_VAR 0 5
78922: PUSH
78923: EMPTY
78924: ST_TO_ADDR
// for i in units do
78925: LD_ADDR_VAR 0 4
78929: PUSH
78930: LD_VAR 0 1
78934: PUSH
78935: FOR_IN
78936: IFFALSE 78970
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78938: LD_ADDR_VAR 0 5
78942: PUSH
78943: LD_VAR 0 5
78947: PPUSH
78948: LD_VAR 0 4
78952: PPUSH
78953: LD_VAR 0 2
78957: PPUSH
78958: CALL_OW 259
78962: PPUSH
78963: CALL 80396 0 2
78967: ST_TO_ADDR
78968: GO 78935
78970: POP
78971: POP
// if not tmp then
78972: LD_VAR 0 5
78976: NOT
78977: IFFALSE 78981
// exit ;
78979: GO 79001
// result := SortListByListDesc ( units , tmp ) ;
78981: LD_ADDR_VAR 0 3
78985: PUSH
78986: LD_VAR 0 1
78990: PPUSH
78991: LD_VAR 0 5
78995: PPUSH
78996: CALL_OW 77
79000: ST_TO_ADDR
// end ;
79001: LD_VAR 0 3
79005: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79006: LD_INT 0
79008: PPUSH
79009: PPUSH
79010: PPUSH
// result := false ;
79011: LD_ADDR_VAR 0 3
79015: PUSH
79016: LD_INT 0
79018: ST_TO_ADDR
// if not building then
79019: LD_VAR 0 2
79023: NOT
79024: IFFALSE 79028
// exit ;
79026: GO 79172
// x := GetX ( building ) ;
79028: LD_ADDR_VAR 0 4
79032: PUSH
79033: LD_VAR 0 2
79037: PPUSH
79038: CALL_OW 250
79042: ST_TO_ADDR
// y := GetY ( building ) ;
79043: LD_ADDR_VAR 0 5
79047: PUSH
79048: LD_VAR 0 2
79052: PPUSH
79053: CALL_OW 251
79057: ST_TO_ADDR
// if not x or not y then
79058: LD_VAR 0 4
79062: NOT
79063: IFTRUE 79072
79065: PUSH
79066: LD_VAR 0 5
79070: NOT
79071: OR
79072: IFFALSE 79076
// exit ;
79074: GO 79172
// if GetTaskList ( unit ) then
79076: LD_VAR 0 1
79080: PPUSH
79081: CALL_OW 437
79085: IFFALSE 79172
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79087: LD_STRING e
79089: PUSH
79090: LD_VAR 0 1
79094: PPUSH
79095: CALL_OW 437
79099: PUSH
79100: LD_INT 1
79102: ARRAY
79103: PUSH
79104: LD_INT 1
79106: ARRAY
79107: EQUAL
79108: IFFALSE 79135
79110: PUSH
79111: LD_VAR 0 4
79115: PUSH
79116: LD_VAR 0 1
79120: PPUSH
79121: CALL_OW 437
79125: PUSH
79126: LD_INT 1
79128: ARRAY
79129: PUSH
79130: LD_INT 2
79132: ARRAY
79133: EQUAL
79134: AND
79135: IFFALSE 79162
79137: PUSH
79138: LD_VAR 0 5
79142: PUSH
79143: LD_VAR 0 1
79147: PPUSH
79148: CALL_OW 437
79152: PUSH
79153: LD_INT 1
79155: ARRAY
79156: PUSH
79157: LD_INT 3
79159: ARRAY
79160: EQUAL
79161: AND
79162: IFFALSE 79172
// result := true end ;
79164: LD_ADDR_VAR 0 3
79168: PUSH
79169: LD_INT 1
79171: ST_TO_ADDR
// end ;
79172: LD_VAR 0 3
79176: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
79177: LD_INT 0
79179: PPUSH
// result := false ;
79180: LD_ADDR_VAR 0 4
79184: PUSH
79185: LD_INT 0
79187: ST_TO_ADDR
// if GetTaskList ( unit ) then
79188: LD_VAR 0 1
79192: PPUSH
79193: CALL_OW 437
79197: IFFALSE 79284
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79199: LD_STRING M
79201: PUSH
79202: LD_VAR 0 1
79206: PPUSH
79207: CALL_OW 437
79211: PUSH
79212: LD_INT 1
79214: ARRAY
79215: PUSH
79216: LD_INT 1
79218: ARRAY
79219: EQUAL
79220: IFFALSE 79247
79222: PUSH
79223: LD_VAR 0 2
79227: PUSH
79228: LD_VAR 0 1
79232: PPUSH
79233: CALL_OW 437
79237: PUSH
79238: LD_INT 1
79240: ARRAY
79241: PUSH
79242: LD_INT 2
79244: ARRAY
79245: EQUAL
79246: AND
79247: IFFALSE 79274
79249: PUSH
79250: LD_VAR 0 3
79254: PUSH
79255: LD_VAR 0 1
79259: PPUSH
79260: CALL_OW 437
79264: PUSH
79265: LD_INT 1
79267: ARRAY
79268: PUSH
79269: LD_INT 3
79271: ARRAY
79272: EQUAL
79273: AND
79274: IFFALSE 79284
// result := true ;
79276: LD_ADDR_VAR 0 4
79280: PUSH
79281: LD_INT 1
79283: ST_TO_ADDR
// end ; end ;
79284: LD_VAR 0 4
79288: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79289: LD_INT 0
79291: PPUSH
79292: PPUSH
79293: PPUSH
79294: PPUSH
// if not unit or not area then
79295: LD_VAR 0 1
79299: NOT
79300: IFTRUE 79309
79302: PUSH
79303: LD_VAR 0 2
79307: NOT
79308: OR
79309: IFFALSE 79313
// exit ;
79311: GO 79489
// tmp := AreaToList ( area , i ) ;
79313: LD_ADDR_VAR 0 6
79317: PUSH
79318: LD_VAR 0 2
79322: PPUSH
79323: LD_VAR 0 5
79327: PPUSH
79328: CALL_OW 517
79332: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
79333: LD_ADDR_VAR 0 5
79337: PUSH
79338: DOUBLE
79339: LD_INT 1
79341: DEC
79342: ST_TO_ADDR
79343: LD_VAR 0 6
79347: PUSH
79348: LD_INT 1
79350: ARRAY
79351: PUSH
79352: FOR_TO
79353: IFFALSE 79487
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
79355: LD_ADDR_VAR 0 7
79359: PUSH
79360: LD_VAR 0 6
79364: PUSH
79365: LD_INT 1
79367: ARRAY
79368: PUSH
79369: LD_VAR 0 5
79373: ARRAY
79374: PUSH
79375: LD_VAR 0 6
79379: PUSH
79380: LD_INT 2
79382: ARRAY
79383: PUSH
79384: LD_VAR 0 5
79388: ARRAY
79389: PUSH
79390: EMPTY
79391: LIST
79392: LIST
79393: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
79394: LD_INT 92
79396: PUSH
79397: LD_VAR 0 7
79401: PUSH
79402: LD_INT 1
79404: ARRAY
79405: PUSH
79406: LD_VAR 0 7
79410: PUSH
79411: LD_INT 2
79413: ARRAY
79414: PUSH
79415: LD_INT 2
79417: PUSH
79418: EMPTY
79419: LIST
79420: LIST
79421: LIST
79422: LIST
79423: PPUSH
79424: CALL_OW 69
79428: PUSH
79429: LD_INT 0
79431: EQUAL
79432: IFFALSE 79485
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79434: LD_VAR 0 1
79438: PPUSH
79439: LD_VAR 0 7
79443: PUSH
79444: LD_INT 1
79446: ARRAY
79447: PPUSH
79448: LD_VAR 0 7
79452: PUSH
79453: LD_INT 2
79455: ARRAY
79456: PPUSH
79457: LD_VAR 0 3
79461: PPUSH
79462: CALL_OW 48
// result := IsPlaced ( unit ) ;
79466: LD_ADDR_VAR 0 4
79470: PUSH
79471: LD_VAR 0 1
79475: PPUSH
79476: CALL_OW 305
79480: ST_TO_ADDR
// exit ;
79481: POP
79482: POP
79483: GO 79489
// end ; end ;
79485: GO 79352
79487: POP
79488: POP
// end ;
79489: LD_VAR 0 4
79493: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79494: LD_INT 0
79496: PPUSH
79497: PPUSH
79498: PPUSH
// if not side or side > 8 then
79499: LD_VAR 0 1
79503: NOT
79504: IFTRUE 79516
79506: PUSH
79507: LD_VAR 0 1
79511: PUSH
79512: LD_INT 8
79514: GREATER
79515: OR
79516: IFFALSE 79520
// exit ;
79518: GO 79707
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79520: LD_ADDR_VAR 0 4
79524: PUSH
79525: LD_INT 22
79527: PUSH
79528: LD_VAR 0 1
79532: PUSH
79533: EMPTY
79534: LIST
79535: LIST
79536: PUSH
79537: LD_INT 21
79539: PUSH
79540: LD_INT 3
79542: PUSH
79543: EMPTY
79544: LIST
79545: LIST
79546: PUSH
79547: EMPTY
79548: LIST
79549: LIST
79550: PPUSH
79551: CALL_OW 69
79555: ST_TO_ADDR
// if not tmp then
79556: LD_VAR 0 4
79560: NOT
79561: IFFALSE 79565
// exit ;
79563: GO 79707
// enable_addtolog := true ;
79565: LD_ADDR_OWVAR 81
79569: PUSH
79570: LD_INT 1
79572: ST_TO_ADDR
// AddToLog ( [ ) ;
79573: LD_STRING [
79575: PPUSH
79576: CALL_OW 561
// for i in tmp do
79580: LD_ADDR_VAR 0 3
79584: PUSH
79585: LD_VAR 0 4
79589: PUSH
79590: FOR_IN
79591: IFFALSE 79698
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79593: LD_STRING [
79595: PUSH
79596: LD_VAR 0 3
79600: PPUSH
79601: CALL_OW 266
79605: STR
79606: PUSH
79607: LD_STRING , 
79609: STR
79610: PUSH
79611: LD_VAR 0 3
79615: PPUSH
79616: CALL_OW 250
79620: STR
79621: PUSH
79622: LD_STRING , 
79624: STR
79625: PUSH
79626: LD_VAR 0 3
79630: PPUSH
79631: CALL_OW 251
79635: STR
79636: PUSH
79637: LD_STRING , 
79639: STR
79640: PUSH
79641: LD_VAR 0 3
79645: PPUSH
79646: CALL_OW 254
79650: STR
79651: PUSH
79652: LD_STRING , 
79654: STR
79655: PUSH
79656: LD_VAR 0 3
79660: PPUSH
79661: LD_INT 1
79663: PPUSH
79664: CALL_OW 268
79668: STR
79669: PUSH
79670: LD_STRING , 
79672: STR
79673: PUSH
79674: LD_VAR 0 3
79678: PPUSH
79679: LD_INT 2
79681: PPUSH
79682: CALL_OW 268
79686: STR
79687: PUSH
79688: LD_STRING ],
79690: STR
79691: PPUSH
79692: CALL_OW 561
// end ;
79696: GO 79590
79698: POP
79699: POP
// AddToLog ( ]; ) ;
79700: LD_STRING ];
79702: PPUSH
79703: CALL_OW 561
// end ;
79707: LD_VAR 0 2
79711: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79712: LD_INT 0
79714: PPUSH
79715: PPUSH
79716: PPUSH
79717: PPUSH
79718: PPUSH
// if not area or not rate or not max then
79719: LD_VAR 0 1
79723: NOT
79724: IFTRUE 79733
79726: PUSH
79727: LD_VAR 0 2
79731: NOT
79732: OR
79733: IFTRUE 79742
79735: PUSH
79736: LD_VAR 0 4
79740: NOT
79741: OR
79742: IFFALSE 79746
// exit ;
79744: GO 79935
// while 1 do
79746: LD_INT 1
79748: IFFALSE 79935
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79750: LD_ADDR_VAR 0 9
79754: PUSH
79755: LD_VAR 0 1
79759: PPUSH
79760: LD_INT 1
79762: PPUSH
79763: CALL_OW 287
79767: PUSH
79768: LD_INT 10
79770: MUL
79771: ST_TO_ADDR
// r := rate / 10 ;
79772: LD_ADDR_VAR 0 7
79776: PUSH
79777: LD_VAR 0 2
79781: PUSH
79782: LD_INT 10
79784: DIVREAL
79785: ST_TO_ADDR
// time := 1 1$00 ;
79786: LD_ADDR_VAR 0 8
79790: PUSH
79791: LD_INT 2100
79793: ST_TO_ADDR
// if amount < min then
79794: LD_VAR 0 9
79798: PUSH
79799: LD_VAR 0 3
79803: LESS
79804: IFFALSE 79822
// r := r * 2 else
79806: LD_ADDR_VAR 0 7
79810: PUSH
79811: LD_VAR 0 7
79815: PUSH
79816: LD_INT 2
79818: MUL
79819: ST_TO_ADDR
79820: GO 79848
// if amount > max then
79822: LD_VAR 0 9
79826: PUSH
79827: LD_VAR 0 4
79831: GREATER
79832: IFFALSE 79848
// r := r / 2 ;
79834: LD_ADDR_VAR 0 7
79838: PUSH
79839: LD_VAR 0 7
79843: PUSH
79844: LD_INT 2
79846: DIVREAL
79847: ST_TO_ADDR
// time := time / r ;
79848: LD_ADDR_VAR 0 8
79852: PUSH
79853: LD_VAR 0 8
79857: PUSH
79858: LD_VAR 0 7
79862: DIVREAL
79863: ST_TO_ADDR
// if time < 0 then
79864: LD_VAR 0 8
79868: PUSH
79869: LD_INT 0
79871: LESS
79872: IFFALSE 79889
// time := time * - 1 ;
79874: LD_ADDR_VAR 0 8
79878: PUSH
79879: LD_VAR 0 8
79883: PUSH
79884: LD_INT 1
79886: NEG
79887: MUL
79888: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
79889: LD_VAR 0 8
79893: PUSH
79894: LD_INT 35
79896: PPUSH
79897: LD_INT 875
79899: PPUSH
79900: CALL_OW 12
79904: PLUS
79905: PPUSH
79906: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79910: LD_INT 1
79912: PPUSH
79913: LD_INT 5
79915: PPUSH
79916: CALL_OW 12
79920: PPUSH
79921: LD_VAR 0 1
79925: PPUSH
79926: LD_INT 1
79928: PPUSH
79929: CALL_OW 55
// end ;
79933: GO 79746
// end ;
79935: LD_VAR 0 5
79939: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79940: LD_INT 0
79942: PPUSH
79943: PPUSH
79944: PPUSH
79945: PPUSH
79946: PPUSH
79947: PPUSH
79948: PPUSH
79949: PPUSH
// if not turrets or not factories then
79950: LD_VAR 0 1
79954: NOT
79955: IFTRUE 79964
79957: PUSH
79958: LD_VAR 0 2
79962: NOT
79963: OR
79964: IFFALSE 79968
// exit ;
79966: GO 80275
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79968: LD_ADDR_VAR 0 10
79972: PUSH
79973: LD_INT 5
79975: PUSH
79976: LD_INT 6
79978: PUSH
79979: EMPTY
79980: LIST
79981: LIST
79982: PUSH
79983: LD_INT 2
79985: PUSH
79986: LD_INT 4
79988: PUSH
79989: EMPTY
79990: LIST
79991: LIST
79992: PUSH
79993: LD_INT 3
79995: PUSH
79996: LD_INT 5
79998: PUSH
79999: EMPTY
80000: LIST
80001: LIST
80002: PUSH
80003: EMPTY
80004: LIST
80005: LIST
80006: LIST
80007: PUSH
80008: LD_INT 24
80010: PUSH
80011: LD_INT 25
80013: PUSH
80014: EMPTY
80015: LIST
80016: LIST
80017: PUSH
80018: LD_INT 23
80020: PUSH
80021: LD_INT 27
80023: PUSH
80024: EMPTY
80025: LIST
80026: LIST
80027: PUSH
80028: EMPTY
80029: LIST
80030: LIST
80031: PUSH
80032: LD_INT 42
80034: PUSH
80035: LD_INT 43
80037: PUSH
80038: EMPTY
80039: LIST
80040: LIST
80041: PUSH
80042: LD_INT 44
80044: PUSH
80045: LD_INT 46
80047: PUSH
80048: EMPTY
80049: LIST
80050: LIST
80051: PUSH
80052: LD_INT 45
80054: PUSH
80055: LD_INT 47
80057: PUSH
80058: EMPTY
80059: LIST
80060: LIST
80061: PUSH
80062: EMPTY
80063: LIST
80064: LIST
80065: LIST
80066: PUSH
80067: EMPTY
80068: LIST
80069: LIST
80070: LIST
80071: ST_TO_ADDR
// result := [ ] ;
80072: LD_ADDR_VAR 0 3
80076: PUSH
80077: EMPTY
80078: ST_TO_ADDR
// for i in turrets do
80079: LD_ADDR_VAR 0 4
80083: PUSH
80084: LD_VAR 0 1
80088: PUSH
80089: FOR_IN
80090: IFFALSE 80273
// begin nat := GetNation ( i ) ;
80092: LD_ADDR_VAR 0 7
80096: PUSH
80097: LD_VAR 0 4
80101: PPUSH
80102: CALL_OW 248
80106: ST_TO_ADDR
// weapon := 0 ;
80107: LD_ADDR_VAR 0 8
80111: PUSH
80112: LD_INT 0
80114: ST_TO_ADDR
// if not nat then
80115: LD_VAR 0 7
80119: NOT
80120: IFFALSE 80124
// continue ;
80122: GO 80089
// for j in list [ nat ] do
80124: LD_ADDR_VAR 0 5
80128: PUSH
80129: LD_VAR 0 10
80133: PUSH
80134: LD_VAR 0 7
80138: ARRAY
80139: PUSH
80140: FOR_IN
80141: IFFALSE 80182
// if GetBWeapon ( i ) = j [ 1 ] then
80143: LD_VAR 0 4
80147: PPUSH
80148: CALL_OW 269
80152: PUSH
80153: LD_VAR 0 5
80157: PUSH
80158: LD_INT 1
80160: ARRAY
80161: EQUAL
80162: IFFALSE 80180
// begin weapon := j [ 2 ] ;
80164: LD_ADDR_VAR 0 8
80168: PUSH
80169: LD_VAR 0 5
80173: PUSH
80174: LD_INT 2
80176: ARRAY
80177: ST_TO_ADDR
// break ;
80178: GO 80182
// end ;
80180: GO 80140
80182: POP
80183: POP
// if not weapon then
80184: LD_VAR 0 8
80188: NOT
80189: IFFALSE 80193
// continue ;
80191: GO 80089
// for k in factories do
80193: LD_ADDR_VAR 0 6
80197: PUSH
80198: LD_VAR 0 2
80202: PUSH
80203: FOR_IN
80204: IFFALSE 80269
// begin weapons := AvailableWeaponList ( k ) ;
80206: LD_ADDR_VAR 0 9
80210: PUSH
80211: LD_VAR 0 6
80215: PPUSH
80216: CALL_OW 478
80220: ST_TO_ADDR
// if not weapons then
80221: LD_VAR 0 9
80225: NOT
80226: IFFALSE 80230
// continue ;
80228: GO 80203
// if weapon in weapons then
80230: LD_VAR 0 8
80234: PUSH
80235: LD_VAR 0 9
80239: IN
80240: IFFALSE 80267
// begin result := [ i , weapon ] ;
80242: LD_ADDR_VAR 0 3
80246: PUSH
80247: LD_VAR 0 4
80251: PUSH
80252: LD_VAR 0 8
80256: PUSH
80257: EMPTY
80258: LIST
80259: LIST
80260: ST_TO_ADDR
// exit ;
80261: POP
80262: POP
80263: POP
80264: POP
80265: GO 80275
// end ; end ;
80267: GO 80203
80269: POP
80270: POP
// end ;
80271: GO 80089
80273: POP
80274: POP
// end ;
80275: LD_VAR 0 3
80279: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80280: LD_INT 0
80282: PPUSH
// if not side or side > 8 then
80283: LD_VAR 0 3
80287: NOT
80288: IFTRUE 80300
80290: PUSH
80291: LD_VAR 0 3
80295: PUSH
80296: LD_INT 8
80298: GREATER
80299: OR
80300: IFFALSE 80304
// exit ;
80302: GO 80363
// if not range then
80304: LD_VAR 0 4
80308: NOT
80309: IFFALSE 80320
// range := - 12 ;
80311: LD_ADDR_VAR 0 4
80315: PUSH
80316: LD_INT 12
80318: NEG
80319: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80320: LD_VAR 0 1
80324: PPUSH
80325: LD_VAR 0 2
80329: PPUSH
80330: LD_VAR 0 3
80334: PPUSH
80335: LD_VAR 0 4
80339: PPUSH
80340: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
80344: LD_VAR 0 1
80348: PPUSH
80349: LD_VAR 0 2
80353: PPUSH
80354: LD_VAR 0 3
80358: PPUSH
80359: CALL_OW 331
// end ;
80363: LD_VAR 0 5
80367: RET
// export function Video ( mode ) ; begin
80368: LD_INT 0
80370: PPUSH
// ingame_video = mode ;
80371: LD_ADDR_OWVAR 52
80375: PUSH
80376: LD_VAR 0 1
80380: ST_TO_ADDR
// interface_hidden = mode ;
80381: LD_ADDR_OWVAR 54
80385: PUSH
80386: LD_VAR 0 1
80390: ST_TO_ADDR
// end ;
80391: LD_VAR 0 2
80395: RET
// export function Join ( array , element ) ; begin
80396: LD_INT 0
80398: PPUSH
// result := Replace ( array , array + 1 , element ) ;
80399: LD_ADDR_VAR 0 3
80403: PUSH
80404: LD_VAR 0 1
80408: PPUSH
80409: LD_VAR 0 1
80413: PUSH
80414: LD_INT 1
80416: PLUS
80417: PPUSH
80418: LD_VAR 0 2
80422: PPUSH
80423: CALL_OW 1
80427: ST_TO_ADDR
// end ;
80428: LD_VAR 0 3
80432: RET
// export function JoinUnion ( array , element ) ; begin
80433: LD_INT 0
80435: PPUSH
// result := array union element ;
80436: LD_ADDR_VAR 0 3
80440: PUSH
80441: LD_VAR 0 1
80445: PUSH
80446: LD_VAR 0 2
80450: UNION
80451: ST_TO_ADDR
// end ;
80452: LD_VAR 0 3
80456: RET
// export function GetBehemoths ( side ) ; begin
80457: LD_INT 0
80459: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
80460: LD_ADDR_VAR 0 2
80464: PUSH
80465: LD_INT 22
80467: PUSH
80468: LD_VAR 0 1
80472: PUSH
80473: EMPTY
80474: LIST
80475: LIST
80476: PUSH
80477: LD_INT 31
80479: PUSH
80480: LD_INT 25
80482: PUSH
80483: EMPTY
80484: LIST
80485: LIST
80486: PUSH
80487: EMPTY
80488: LIST
80489: LIST
80490: PPUSH
80491: CALL_OW 69
80495: ST_TO_ADDR
// end ;
80496: LD_VAR 0 2
80500: RET
// export function Shuffle ( array ) ; var i , index ; begin
80501: LD_INT 0
80503: PPUSH
80504: PPUSH
80505: PPUSH
// result := [ ] ;
80506: LD_ADDR_VAR 0 2
80510: PUSH
80511: EMPTY
80512: ST_TO_ADDR
// if not array then
80513: LD_VAR 0 1
80517: NOT
80518: IFFALSE 80522
// exit ;
80520: GO 80621
// Randomize ;
80522: CALL_OW 10
// for i = array downto 1 do
80526: LD_ADDR_VAR 0 3
80530: PUSH
80531: DOUBLE
80532: LD_VAR 0 1
80536: INC
80537: ST_TO_ADDR
80538: LD_INT 1
80540: PUSH
80541: FOR_DOWNTO
80542: IFFALSE 80619
// begin index := rand ( 1 , array ) ;
80544: LD_ADDR_VAR 0 4
80548: PUSH
80549: LD_INT 1
80551: PPUSH
80552: LD_VAR 0 1
80556: PPUSH
80557: CALL_OW 12
80561: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80562: LD_ADDR_VAR 0 2
80566: PUSH
80567: LD_VAR 0 2
80571: PPUSH
80572: LD_VAR 0 2
80576: PUSH
80577: LD_INT 1
80579: PLUS
80580: PPUSH
80581: LD_VAR 0 1
80585: PUSH
80586: LD_VAR 0 4
80590: ARRAY
80591: PPUSH
80592: CALL_OW 2
80596: ST_TO_ADDR
// array := Delete ( array , index ) ;
80597: LD_ADDR_VAR 0 1
80601: PUSH
80602: LD_VAR 0 1
80606: PPUSH
80607: LD_VAR 0 4
80611: PPUSH
80612: CALL_OW 3
80616: ST_TO_ADDR
// end ;
80617: GO 80541
80619: POP
80620: POP
// end ;
80621: LD_VAR 0 2
80625: RET
// export function GetBaseMaterials ( base ) ; begin
80626: LD_INT 0
80628: PPUSH
// result := [ 0 , 0 , 0 ] ;
80629: LD_ADDR_VAR 0 2
80633: PUSH
80634: LD_INT 0
80636: PUSH
80637: LD_INT 0
80639: PUSH
80640: LD_INT 0
80642: PUSH
80643: EMPTY
80644: LIST
80645: LIST
80646: LIST
80647: ST_TO_ADDR
// if not base then
80648: LD_VAR 0 1
80652: NOT
80653: IFFALSE 80657
// exit ;
80655: GO 80706
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80657: LD_ADDR_VAR 0 2
80661: PUSH
80662: LD_VAR 0 1
80666: PPUSH
80667: LD_INT 1
80669: PPUSH
80670: CALL_OW 275
80674: PUSH
80675: LD_VAR 0 1
80679: PPUSH
80680: LD_INT 2
80682: PPUSH
80683: CALL_OW 275
80687: PUSH
80688: LD_VAR 0 1
80692: PPUSH
80693: LD_INT 3
80695: PPUSH
80696: CALL_OW 275
80700: PUSH
80701: EMPTY
80702: LIST
80703: LIST
80704: LIST
80705: ST_TO_ADDR
// end ;
80706: LD_VAR 0 2
80710: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80711: LD_INT 0
80713: PPUSH
80714: PPUSH
// result := array ;
80715: LD_ADDR_VAR 0 3
80719: PUSH
80720: LD_VAR 0 1
80724: ST_TO_ADDR
// if size >= result then
80725: LD_VAR 0 2
80729: PUSH
80730: LD_VAR 0 3
80734: GREATEREQUAL
80735: IFFALSE 80739
// exit ;
80737: GO 80789
// if size then
80739: LD_VAR 0 2
80743: IFFALSE 80789
// for i := array downto size do
80745: LD_ADDR_VAR 0 4
80749: PUSH
80750: DOUBLE
80751: LD_VAR 0 1
80755: INC
80756: ST_TO_ADDR
80757: LD_VAR 0 2
80761: PUSH
80762: FOR_DOWNTO
80763: IFFALSE 80787
// result := Delete ( result , result ) ;
80765: LD_ADDR_VAR 0 3
80769: PUSH
80770: LD_VAR 0 3
80774: PPUSH
80775: LD_VAR 0 3
80779: PPUSH
80780: CALL_OW 3
80784: ST_TO_ADDR
80785: GO 80762
80787: POP
80788: POP
// end ;
80789: LD_VAR 0 3
80793: RET
// export function ComExit ( unit ) ; var tmp ; begin
80794: LD_INT 0
80796: PPUSH
80797: PPUSH
// if not IsInUnit ( unit ) then
80798: LD_VAR 0 1
80802: PPUSH
80803: CALL_OW 310
80807: NOT
80808: IFFALSE 80812
// exit ;
80810: GO 80872
// tmp := IsInUnit ( unit ) ;
80812: LD_ADDR_VAR 0 3
80816: PUSH
80817: LD_VAR 0 1
80821: PPUSH
80822: CALL_OW 310
80826: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80827: LD_VAR 0 3
80831: PPUSH
80832: CALL_OW 247
80836: PUSH
80837: LD_INT 2
80839: EQUAL
80840: IFFALSE 80853
// ComExitVehicle ( unit ) else
80842: LD_VAR 0 1
80846: PPUSH
80847: CALL_OW 121
80851: GO 80862
// ComExitBuilding ( unit ) ;
80853: LD_VAR 0 1
80857: PPUSH
80858: CALL_OW 122
// result := tmp ;
80862: LD_ADDR_VAR 0 2
80866: PUSH
80867: LD_VAR 0 3
80871: ST_TO_ADDR
// end ;
80872: LD_VAR 0 2
80876: RET
// export function ComExitAll ( units ) ; var i ; begin
80877: LD_INT 0
80879: PPUSH
80880: PPUSH
// if not units then
80881: LD_VAR 0 1
80885: NOT
80886: IFFALSE 80890
// exit ;
80888: GO 80916
// for i in units do
80890: LD_ADDR_VAR 0 3
80894: PUSH
80895: LD_VAR 0 1
80899: PUSH
80900: FOR_IN
80901: IFFALSE 80914
// ComExit ( i ) ;
80903: LD_VAR 0 3
80907: PPUSH
80908: CALL 80794 0 1
80912: GO 80900
80914: POP
80915: POP
// end ;
80916: LD_VAR 0 2
80920: RET
// export function ResetHc ; begin
80921: LD_INT 0
80923: PPUSH
// InitHc ;
80924: CALL_OW 19
// hc_importance := 0 ;
80928: LD_ADDR_OWVAR 32
80932: PUSH
80933: LD_INT 0
80935: ST_TO_ADDR
// end ;
80936: LD_VAR 0 1
80940: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80941: LD_INT 0
80943: PPUSH
80944: PPUSH
80945: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80946: LD_ADDR_VAR 0 6
80950: PUSH
80951: LD_VAR 0 1
80955: PUSH
80956: LD_VAR 0 3
80960: PLUS
80961: PUSH
80962: LD_INT 2
80964: DIV
80965: ST_TO_ADDR
// if _x < 0 then
80966: LD_VAR 0 6
80970: PUSH
80971: LD_INT 0
80973: LESS
80974: IFFALSE 80991
// _x := _x * - 1 ;
80976: LD_ADDR_VAR 0 6
80980: PUSH
80981: LD_VAR 0 6
80985: PUSH
80986: LD_INT 1
80988: NEG
80989: MUL
80990: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80991: LD_ADDR_VAR 0 7
80995: PUSH
80996: LD_VAR 0 2
81000: PUSH
81001: LD_VAR 0 4
81005: PLUS
81006: PUSH
81007: LD_INT 2
81009: DIV
81010: ST_TO_ADDR
// if _y < 0 then
81011: LD_VAR 0 7
81015: PUSH
81016: LD_INT 0
81018: LESS
81019: IFFALSE 81036
// _y := _y * - 1 ;
81021: LD_ADDR_VAR 0 7
81025: PUSH
81026: LD_VAR 0 7
81030: PUSH
81031: LD_INT 1
81033: NEG
81034: MUL
81035: ST_TO_ADDR
// result := [ _x , _y ] ;
81036: LD_ADDR_VAR 0 5
81040: PUSH
81041: LD_VAR 0 6
81045: PUSH
81046: LD_VAR 0 7
81050: PUSH
81051: EMPTY
81052: LIST
81053: LIST
81054: ST_TO_ADDR
// end ;
81055: LD_VAR 0 5
81059: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81060: LD_INT 0
81062: PPUSH
81063: PPUSH
81064: PPUSH
81065: PPUSH
// task := GetTaskList ( unit ) ;
81066: LD_ADDR_VAR 0 7
81070: PUSH
81071: LD_VAR 0 1
81075: PPUSH
81076: CALL_OW 437
81080: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81081: LD_VAR 0 7
81085: NOT
81086: IFFALSE 81105
81088: PUSH
81089: LD_VAR 0 1
81093: PPUSH
81094: LD_VAR 0 2
81098: PPUSH
81099: CALL_OW 308
81103: NOT
81104: AND
81105: IFFALSE 81109
// exit ;
81107: GO 81227
// if IsInArea ( unit , area ) then
81109: LD_VAR 0 1
81113: PPUSH
81114: LD_VAR 0 2
81118: PPUSH
81119: CALL_OW 308
81123: IFFALSE 81141
// begin ComMoveToArea ( unit , goAway ) ;
81125: LD_VAR 0 1
81129: PPUSH
81130: LD_VAR 0 3
81134: PPUSH
81135: CALL_OW 113
// exit ;
81139: GO 81227
// end ; if task [ 1 ] [ 1 ] <> M then
81141: LD_VAR 0 7
81145: PUSH
81146: LD_INT 1
81148: ARRAY
81149: PUSH
81150: LD_INT 1
81152: ARRAY
81153: PUSH
81154: LD_STRING M
81156: NONEQUAL
81157: IFFALSE 81161
// exit ;
81159: GO 81227
// x := task [ 1 ] [ 2 ] ;
81161: LD_ADDR_VAR 0 5
81165: PUSH
81166: LD_VAR 0 7
81170: PUSH
81171: LD_INT 1
81173: ARRAY
81174: PUSH
81175: LD_INT 2
81177: ARRAY
81178: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81179: LD_ADDR_VAR 0 6
81183: PUSH
81184: LD_VAR 0 7
81188: PUSH
81189: LD_INT 1
81191: ARRAY
81192: PUSH
81193: LD_INT 3
81195: ARRAY
81196: ST_TO_ADDR
// if InArea ( x , y , area ) then
81197: LD_VAR 0 5
81201: PPUSH
81202: LD_VAR 0 6
81206: PPUSH
81207: LD_VAR 0 2
81211: PPUSH
81212: CALL_OW 309
81216: IFFALSE 81227
// ComStop ( unit ) ;
81218: LD_VAR 0 1
81222: PPUSH
81223: CALL_OW 141
// end ;
81227: LD_VAR 0 4
81231: RET
// export function Abs ( value ) ; begin
81232: LD_INT 0
81234: PPUSH
// result := value ;
81235: LD_ADDR_VAR 0 2
81239: PUSH
81240: LD_VAR 0 1
81244: ST_TO_ADDR
// if value < 0 then
81245: LD_VAR 0 1
81249: PUSH
81250: LD_INT 0
81252: LESS
81253: IFFALSE 81270
// result := value * - 1 ;
81255: LD_ADDR_VAR 0 2
81259: PUSH
81260: LD_VAR 0 1
81264: PUSH
81265: LD_INT 1
81267: NEG
81268: MUL
81269: ST_TO_ADDR
// end ;
81270: LD_VAR 0 2
81274: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
81275: LD_INT 0
81277: PPUSH
81278: PPUSH
81279: PPUSH
81280: PPUSH
81281: PPUSH
81282: PPUSH
81283: PPUSH
81284: PPUSH
// if not unit or not building then
81285: LD_VAR 0 1
81289: NOT
81290: IFTRUE 81299
81292: PUSH
81293: LD_VAR 0 2
81297: NOT
81298: OR
81299: IFFALSE 81303
// exit ;
81301: GO 81531
// x := GetX ( building ) ;
81303: LD_ADDR_VAR 0 4
81307: PUSH
81308: LD_VAR 0 2
81312: PPUSH
81313: CALL_OW 250
81317: ST_TO_ADDR
// y := GetY ( building ) ;
81318: LD_ADDR_VAR 0 6
81322: PUSH
81323: LD_VAR 0 2
81327: PPUSH
81328: CALL_OW 251
81332: ST_TO_ADDR
// d := GetDir ( building ) ;
81333: LD_ADDR_VAR 0 8
81337: PUSH
81338: LD_VAR 0 2
81342: PPUSH
81343: CALL_OW 254
81347: ST_TO_ADDR
// r := 4 ;
81348: LD_ADDR_VAR 0 9
81352: PUSH
81353: LD_INT 4
81355: ST_TO_ADDR
// for i := 1 to 5 do
81356: LD_ADDR_VAR 0 10
81360: PUSH
81361: DOUBLE
81362: LD_INT 1
81364: DEC
81365: ST_TO_ADDR
81366: LD_INT 5
81368: PUSH
81369: FOR_TO
81370: IFFALSE 81529
// begin _x := ShiftX ( x , d , r + i ) ;
81372: LD_ADDR_VAR 0 5
81376: PUSH
81377: LD_VAR 0 4
81381: PPUSH
81382: LD_VAR 0 8
81386: PPUSH
81387: LD_VAR 0 9
81391: PUSH
81392: LD_VAR 0 10
81396: PLUS
81397: PPUSH
81398: CALL_OW 272
81402: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
81403: LD_ADDR_VAR 0 7
81407: PUSH
81408: LD_VAR 0 6
81412: PPUSH
81413: LD_VAR 0 8
81417: PPUSH
81418: LD_VAR 0 9
81422: PUSH
81423: LD_VAR 0 10
81427: PLUS
81428: PPUSH
81429: CALL_OW 273
81433: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
81434: LD_VAR 0 5
81438: PPUSH
81439: LD_VAR 0 7
81443: PPUSH
81444: CALL_OW 488
81448: IFFALSE 81483
81450: PUSH
81451: LD_VAR 0 5
81455: PPUSH
81456: LD_VAR 0 7
81460: PPUSH
81461: CALL_OW 428
81465: PPUSH
81466: CALL_OW 247
81470: PUSH
81471: LD_INT 3
81473: PUSH
81474: LD_INT 2
81476: PUSH
81477: EMPTY
81478: LIST
81479: LIST
81480: IN
81481: NOT
81482: AND
81483: IFFALSE 81527
// begin ComMoveXY ( unit , _x , _y ) ;
81485: LD_VAR 0 1
81489: PPUSH
81490: LD_VAR 0 5
81494: PPUSH
81495: LD_VAR 0 7
81499: PPUSH
81500: CALL_OW 111
// result := [ _x , _y ] ;
81504: LD_ADDR_VAR 0 3
81508: PUSH
81509: LD_VAR 0 5
81513: PUSH
81514: LD_VAR 0 7
81518: PUSH
81519: EMPTY
81520: LIST
81521: LIST
81522: ST_TO_ADDR
// exit ;
81523: POP
81524: POP
81525: GO 81531
// end ; end ;
81527: GO 81369
81529: POP
81530: POP
// end ;
81531: LD_VAR 0 3
81535: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
81536: LD_INT 0
81538: PPUSH
81539: PPUSH
81540: PPUSH
// result := 0 ;
81541: LD_ADDR_VAR 0 3
81545: PUSH
81546: LD_INT 0
81548: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
81549: LD_VAR 0 1
81553: PUSH
81554: LD_INT 0
81556: LESS
81557: IFTRUE 81569
81559: PUSH
81560: LD_VAR 0 1
81564: PUSH
81565: LD_INT 8
81567: GREATER
81568: OR
81569: IFTRUE 81581
81571: PUSH
81572: LD_VAR 0 2
81576: PUSH
81577: LD_INT 0
81579: LESS
81580: OR
81581: IFTRUE 81593
81583: PUSH
81584: LD_VAR 0 2
81588: PUSH
81589: LD_INT 8
81591: GREATER
81592: OR
81593: IFFALSE 81597
// exit ;
81595: GO 81672
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
81597: LD_ADDR_VAR 0 4
81601: PUSH
81602: LD_INT 22
81604: PUSH
81605: LD_VAR 0 2
81609: PUSH
81610: EMPTY
81611: LIST
81612: LIST
81613: PPUSH
81614: CALL_OW 69
81618: PUSH
81619: FOR_IN
81620: IFFALSE 81670
// begin un := UnitShoot ( i ) ;
81622: LD_ADDR_VAR 0 5
81626: PUSH
81627: LD_VAR 0 4
81631: PPUSH
81632: CALL_OW 504
81636: ST_TO_ADDR
// if GetSide ( un ) = side1 then
81637: LD_VAR 0 5
81641: PPUSH
81642: CALL_OW 255
81646: PUSH
81647: LD_VAR 0 1
81651: EQUAL
81652: IFFALSE 81668
// begin result := un ;
81654: LD_ADDR_VAR 0 3
81658: PUSH
81659: LD_VAR 0 5
81663: ST_TO_ADDR
// exit ;
81664: POP
81665: POP
81666: GO 81672
// end ; end ;
81668: GO 81619
81670: POP
81671: POP
// end ;
81672: LD_VAR 0 3
81676: RET
// export function GetCargoBay ( units ) ; begin
81677: LD_INT 0
81679: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
81680: LD_ADDR_VAR 0 2
81684: PUSH
81685: LD_VAR 0 1
81689: PPUSH
81690: LD_INT 2
81692: PUSH
81693: LD_INT 34
81695: PUSH
81696: LD_INT 12
81698: PUSH
81699: EMPTY
81700: LIST
81701: LIST
81702: PUSH
81703: LD_INT 34
81705: PUSH
81706: LD_INT 51
81708: PUSH
81709: EMPTY
81710: LIST
81711: LIST
81712: PUSH
81713: LD_INT 34
81715: PUSH
81716: LD_INT 32
81718: PUSH
81719: EMPTY
81720: LIST
81721: LIST
81722: PUSH
81723: LD_INT 34
81725: PUSH
81726: LD_INT 89
81728: PUSH
81729: EMPTY
81730: LIST
81731: LIST
81732: PUSH
81733: EMPTY
81734: LIST
81735: LIST
81736: LIST
81737: LIST
81738: LIST
81739: PPUSH
81740: CALL_OW 72
81744: ST_TO_ADDR
// end ;
81745: LD_VAR 0 2
81749: RET
// export function Negate ( value ) ; begin
81750: LD_INT 0
81752: PPUSH
// result := not value ;
81753: LD_ADDR_VAR 0 2
81757: PUSH
81758: LD_VAR 0 1
81762: NOT
81763: ST_TO_ADDR
// end ;
81764: LD_VAR 0 2
81768: RET
// export function Inc ( value ) ; begin
81769: LD_INT 0
81771: PPUSH
// result := value + 1 ;
81772: LD_ADDR_VAR 0 2
81776: PUSH
81777: LD_VAR 0 1
81781: PUSH
81782: LD_INT 1
81784: PLUS
81785: ST_TO_ADDR
// end ;
81786: LD_VAR 0 2
81790: RET
// export function Dec ( value ) ; begin
81791: LD_INT 0
81793: PPUSH
// result := value - 1 ;
81794: LD_ADDR_VAR 0 2
81798: PUSH
81799: LD_VAR 0 1
81803: PUSH
81804: LD_INT 1
81806: MINUS
81807: ST_TO_ADDR
// end ;
81808: LD_VAR 0 2
81812: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
81813: LD_INT 0
81815: PPUSH
81816: PPUSH
81817: PPUSH
81818: PPUSH
81819: PPUSH
81820: PPUSH
81821: PPUSH
81822: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
81823: LD_VAR 0 1
81827: PPUSH
81828: LD_VAR 0 2
81832: PPUSH
81833: CALL_OW 488
81837: NOT
81838: IFTRUE 81857
81840: PUSH
81841: LD_VAR 0 3
81845: PPUSH
81846: LD_VAR 0 4
81850: PPUSH
81851: CALL_OW 488
81855: NOT
81856: OR
81857: IFFALSE 81870
// begin result := - 1 ;
81859: LD_ADDR_VAR 0 5
81863: PUSH
81864: LD_INT 1
81866: NEG
81867: ST_TO_ADDR
// exit ;
81868: GO 82105
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
81870: LD_ADDR_VAR 0 12
81874: PUSH
81875: LD_VAR 0 1
81879: PPUSH
81880: LD_VAR 0 2
81884: PPUSH
81885: LD_VAR 0 3
81889: PPUSH
81890: LD_VAR 0 4
81894: PPUSH
81895: CALL 80941 0 4
81899: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
81900: LD_ADDR_VAR 0 11
81904: PUSH
81905: LD_VAR 0 1
81909: PPUSH
81910: LD_VAR 0 2
81914: PPUSH
81915: LD_VAR 0 12
81919: PUSH
81920: LD_INT 1
81922: ARRAY
81923: PPUSH
81924: LD_VAR 0 12
81928: PUSH
81929: LD_INT 2
81931: ARRAY
81932: PPUSH
81933: CALL_OW 298
81937: ST_TO_ADDR
// distance := 9999 ;
81938: LD_ADDR_VAR 0 10
81942: PUSH
81943: LD_INT 9999
81945: ST_TO_ADDR
// for i := 0 to 5 do
81946: LD_ADDR_VAR 0 6
81950: PUSH
81951: DOUBLE
81952: LD_INT 0
81954: DEC
81955: ST_TO_ADDR
81956: LD_INT 5
81958: PUSH
81959: FOR_TO
81960: IFFALSE 82103
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81962: LD_ADDR_VAR 0 7
81966: PUSH
81967: LD_VAR 0 1
81971: PPUSH
81972: LD_VAR 0 6
81976: PPUSH
81977: LD_VAR 0 11
81981: PPUSH
81982: CALL_OW 272
81986: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81987: LD_ADDR_VAR 0 8
81991: PUSH
81992: LD_VAR 0 2
81996: PPUSH
81997: LD_VAR 0 6
82001: PPUSH
82002: LD_VAR 0 11
82006: PPUSH
82007: CALL_OW 273
82011: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82012: LD_VAR 0 7
82016: PPUSH
82017: LD_VAR 0 8
82021: PPUSH
82022: CALL_OW 488
82026: NOT
82027: IFFALSE 82031
// continue ;
82029: GO 81959
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
82031: LD_ADDR_VAR 0 9
82035: PUSH
82036: LD_VAR 0 12
82040: PUSH
82041: LD_INT 1
82043: ARRAY
82044: PPUSH
82045: LD_VAR 0 12
82049: PUSH
82050: LD_INT 2
82052: ARRAY
82053: PPUSH
82054: LD_VAR 0 7
82058: PPUSH
82059: LD_VAR 0 8
82063: PPUSH
82064: CALL_OW 298
82068: ST_TO_ADDR
// if tmp < distance then
82069: LD_VAR 0 9
82073: PUSH
82074: LD_VAR 0 10
82078: LESS
82079: IFFALSE 82101
// begin result := i ;
82081: LD_ADDR_VAR 0 5
82085: PUSH
82086: LD_VAR 0 6
82090: ST_TO_ADDR
// distance := tmp ;
82091: LD_ADDR_VAR 0 10
82095: PUSH
82096: LD_VAR 0 9
82100: ST_TO_ADDR
// end ; end ;
82101: GO 81959
82103: POP
82104: POP
// end ;
82105: LD_VAR 0 5
82109: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82110: LD_INT 0
82112: PPUSH
82113: PPUSH
// if not driver or not IsInUnit ( driver ) then
82114: LD_VAR 0 1
82118: NOT
82119: IFTRUE 82133
82121: PUSH
82122: LD_VAR 0 1
82126: PPUSH
82127: CALL_OW 310
82131: NOT
82132: OR
82133: IFFALSE 82137
// exit ;
82135: GO 82227
// vehicle := IsInUnit ( driver ) ;
82137: LD_ADDR_VAR 0 3
82141: PUSH
82142: LD_VAR 0 1
82146: PPUSH
82147: CALL_OW 310
82151: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82152: LD_VAR 0 1
82156: PPUSH
82157: LD_STRING \
82159: PUSH
82160: LD_INT 0
82162: PUSH
82163: LD_INT 0
82165: PUSH
82166: LD_INT 0
82168: PUSH
82169: LD_INT 0
82171: PUSH
82172: LD_INT 0
82174: PUSH
82175: LD_INT 0
82177: PUSH
82178: EMPTY
82179: LIST
82180: LIST
82181: LIST
82182: LIST
82183: LIST
82184: LIST
82185: LIST
82186: PUSH
82187: LD_STRING E
82189: PUSH
82190: LD_INT 0
82192: PUSH
82193: LD_INT 0
82195: PUSH
82196: LD_VAR 0 3
82200: PUSH
82201: LD_INT 0
82203: PUSH
82204: LD_INT 0
82206: PUSH
82207: LD_INT 0
82209: PUSH
82210: EMPTY
82211: LIST
82212: LIST
82213: LIST
82214: LIST
82215: LIST
82216: LIST
82217: LIST
82218: PUSH
82219: EMPTY
82220: LIST
82221: LIST
82222: PPUSH
82223: CALL_OW 446
// end ;
82227: LD_VAR 0 2
82231: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82232: LD_INT 0
82234: PPUSH
82235: PPUSH
// if not driver or not IsInUnit ( driver ) then
82236: LD_VAR 0 1
82240: NOT
82241: IFTRUE 82255
82243: PUSH
82244: LD_VAR 0 1
82248: PPUSH
82249: CALL_OW 310
82253: NOT
82254: OR
82255: IFFALSE 82259
// exit ;
82257: GO 82349
// vehicle := IsInUnit ( driver ) ;
82259: LD_ADDR_VAR 0 3
82263: PUSH
82264: LD_VAR 0 1
82268: PPUSH
82269: CALL_OW 310
82273: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82274: LD_VAR 0 1
82278: PPUSH
82279: LD_STRING \
82281: PUSH
82282: LD_INT 0
82284: PUSH
82285: LD_INT 0
82287: PUSH
82288: LD_INT 0
82290: PUSH
82291: LD_INT 0
82293: PUSH
82294: LD_INT 0
82296: PUSH
82297: LD_INT 0
82299: PUSH
82300: EMPTY
82301: LIST
82302: LIST
82303: LIST
82304: LIST
82305: LIST
82306: LIST
82307: LIST
82308: PUSH
82309: LD_STRING E
82311: PUSH
82312: LD_INT 0
82314: PUSH
82315: LD_INT 0
82317: PUSH
82318: LD_VAR 0 3
82322: PUSH
82323: LD_INT 0
82325: PUSH
82326: LD_INT 0
82328: PUSH
82329: LD_INT 0
82331: PUSH
82332: EMPTY
82333: LIST
82334: LIST
82335: LIST
82336: LIST
82337: LIST
82338: LIST
82339: LIST
82340: PUSH
82341: EMPTY
82342: LIST
82343: LIST
82344: PPUSH
82345: CALL_OW 447
// end ;
82349: LD_VAR 0 2
82353: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
82354: LD_INT 0
82356: PPUSH
82357: PPUSH
82358: PPUSH
// tmp := [ ] ;
82359: LD_ADDR_VAR 0 5
82363: PUSH
82364: EMPTY
82365: ST_TO_ADDR
// for i in units do
82366: LD_ADDR_VAR 0 4
82370: PUSH
82371: LD_VAR 0 1
82375: PUSH
82376: FOR_IN
82377: IFFALSE 82415
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
82379: LD_ADDR_VAR 0 5
82383: PUSH
82384: LD_VAR 0 5
82388: PPUSH
82389: LD_VAR 0 5
82393: PUSH
82394: LD_INT 1
82396: PLUS
82397: PPUSH
82398: LD_VAR 0 4
82402: PPUSH
82403: CALL_OW 256
82407: PPUSH
82408: CALL_OW 2
82412: ST_TO_ADDR
82413: GO 82376
82415: POP
82416: POP
// if not tmp then
82417: LD_VAR 0 5
82421: NOT
82422: IFFALSE 82426
// exit ;
82424: GO 82474
// if asc then
82426: LD_VAR 0 2
82430: IFFALSE 82454
// result := SortListByListAsc ( units , tmp ) else
82432: LD_ADDR_VAR 0 3
82436: PUSH
82437: LD_VAR 0 1
82441: PPUSH
82442: LD_VAR 0 5
82446: PPUSH
82447: CALL_OW 76
82451: ST_TO_ADDR
82452: GO 82474
// result := SortListByListDesc ( units , tmp ) ;
82454: LD_ADDR_VAR 0 3
82458: PUSH
82459: LD_VAR 0 1
82463: PPUSH
82464: LD_VAR 0 5
82468: PPUSH
82469: CALL_OW 77
82473: ST_TO_ADDR
// end ;
82474: LD_VAR 0 3
82478: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
82479: LD_INT 0
82481: PPUSH
82482: PPUSH
// task := GetTaskList ( mech ) ;
82483: LD_ADDR_VAR 0 4
82487: PUSH
82488: LD_VAR 0 1
82492: PPUSH
82493: CALL_OW 437
82497: ST_TO_ADDR
// if not task then
82498: LD_VAR 0 4
82502: NOT
82503: IFFALSE 82507
// exit ;
82505: GO 82551
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
82507: LD_ADDR_VAR 0 3
82511: PUSH
82512: LD_VAR 0 4
82516: PUSH
82517: LD_INT 1
82519: ARRAY
82520: PUSH
82521: LD_INT 1
82523: ARRAY
82524: PUSH
82525: LD_STRING r
82527: EQUAL
82528: IFFALSE 82550
82530: PUSH
82531: LD_VAR 0 4
82535: PUSH
82536: LD_INT 1
82538: ARRAY
82539: PUSH
82540: LD_INT 4
82542: ARRAY
82543: PUSH
82544: LD_VAR 0 2
82548: EQUAL
82549: AND
82550: ST_TO_ADDR
// end ;
82551: LD_VAR 0 3
82555: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
82556: LD_INT 0
82558: PPUSH
// SetDir ( unit , d ) ;
82559: LD_VAR 0 1
82563: PPUSH
82564: LD_VAR 0 4
82568: PPUSH
82569: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
82573: LD_ADDR_VAR 0 6
82577: PUSH
82578: LD_VAR 0 1
82582: PPUSH
82583: LD_VAR 0 2
82587: PPUSH
82588: LD_VAR 0 3
82592: PPUSH
82593: LD_VAR 0 5
82597: PPUSH
82598: CALL_OW 48
82602: ST_TO_ADDR
// end ;
82603: LD_VAR 0 6
82607: RET
// export function ToNaturalNumber ( number ) ; begin
82608: LD_INT 0
82610: PPUSH
// result := number div 1 ;
82611: LD_ADDR_VAR 0 2
82615: PUSH
82616: LD_VAR 0 1
82620: PUSH
82621: LD_INT 1
82623: DIV
82624: ST_TO_ADDR
// if number < 0 then
82625: LD_VAR 0 1
82629: PUSH
82630: LD_INT 0
82632: LESS
82633: IFFALSE 82643
// result := 0 ;
82635: LD_ADDR_VAR 0 2
82639: PUSH
82640: LD_INT 0
82642: ST_TO_ADDR
// end ;
82643: LD_VAR 0 2
82647: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
82648: LD_INT 0
82650: PPUSH
82651: PPUSH
82652: PPUSH
// if not buildings then
82653: LD_VAR 0 1
82657: NOT
82658: IFFALSE 82662
// exit ;
82660: GO 82777
// tmp := [ ] ;
82662: LD_ADDR_VAR 0 5
82666: PUSH
82667: EMPTY
82668: ST_TO_ADDR
// for b in buildings do
82669: LD_ADDR_VAR 0 4
82673: PUSH
82674: LD_VAR 0 1
82678: PUSH
82679: FOR_IN
82680: IFFALSE 82718
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
82682: LD_ADDR_VAR 0 5
82686: PUSH
82687: LD_VAR 0 5
82691: PPUSH
82692: LD_VAR 0 5
82696: PUSH
82697: LD_INT 1
82699: PLUS
82700: PPUSH
82701: LD_VAR 0 4
82705: PPUSH
82706: CALL_OW 266
82710: PPUSH
82711: CALL_OW 1
82715: ST_TO_ADDR
82716: GO 82679
82718: POP
82719: POP
// if not tmp then
82720: LD_VAR 0 5
82724: NOT
82725: IFFALSE 82729
// exit ;
82727: GO 82777
// if asc then
82729: LD_VAR 0 2
82733: IFFALSE 82757
// result := SortListByListAsc ( buildings , tmp ) else
82735: LD_ADDR_VAR 0 3
82739: PUSH
82740: LD_VAR 0 1
82744: PPUSH
82745: LD_VAR 0 5
82749: PPUSH
82750: CALL_OW 76
82754: ST_TO_ADDR
82755: GO 82777
// result := SortListByListDesc ( buildings , tmp ) ;
82757: LD_ADDR_VAR 0 3
82761: PUSH
82762: LD_VAR 0 1
82766: PPUSH
82767: LD_VAR 0 5
82771: PPUSH
82772: CALL_OW 77
82776: ST_TO_ADDR
// end ;
82777: LD_VAR 0 3
82781: RET
// export function SortByClass ( units , class ) ; var un ; begin
82782: LD_INT 0
82784: PPUSH
82785: PPUSH
// if not units or not class then
82786: LD_VAR 0 1
82790: NOT
82791: IFTRUE 82800
82793: PUSH
82794: LD_VAR 0 2
82798: NOT
82799: OR
82800: IFFALSE 82804
// exit ;
82802: GO 82899
// result := [ ] ;
82804: LD_ADDR_VAR 0 3
82808: PUSH
82809: EMPTY
82810: ST_TO_ADDR
// for un in units do
82811: LD_ADDR_VAR 0 4
82815: PUSH
82816: LD_VAR 0 1
82820: PUSH
82821: FOR_IN
82822: IFFALSE 82897
// if GetClass ( un ) = class then
82824: LD_VAR 0 4
82828: PPUSH
82829: CALL_OW 257
82833: PUSH
82834: LD_VAR 0 2
82838: EQUAL
82839: IFFALSE 82866
// result := Insert ( result , 1 , un ) else
82841: LD_ADDR_VAR 0 3
82845: PUSH
82846: LD_VAR 0 3
82850: PPUSH
82851: LD_INT 1
82853: PPUSH
82854: LD_VAR 0 4
82858: PPUSH
82859: CALL_OW 2
82863: ST_TO_ADDR
82864: GO 82895
// result := Replace ( result , result + 1 , un ) ;
82866: LD_ADDR_VAR 0 3
82870: PUSH
82871: LD_VAR 0 3
82875: PPUSH
82876: LD_VAR 0 3
82880: PUSH
82881: LD_INT 1
82883: PLUS
82884: PPUSH
82885: LD_VAR 0 4
82889: PPUSH
82890: CALL_OW 1
82894: ST_TO_ADDR
82895: GO 82821
82897: POP
82898: POP
// end ;
82899: LD_VAR 0 3
82903: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
82904: LD_INT 0
82906: PPUSH
82907: PPUSH
82908: PPUSH
82909: PPUSH
82910: PPUSH
82911: PPUSH
82912: PPUSH
// result := [ ] ;
82913: LD_ADDR_VAR 0 4
82917: PUSH
82918: EMPTY
82919: ST_TO_ADDR
// if x - r < 0 then
82920: LD_VAR 0 1
82924: PUSH
82925: LD_VAR 0 3
82929: MINUS
82930: PUSH
82931: LD_INT 0
82933: LESS
82934: IFFALSE 82946
// min_x := 0 else
82936: LD_ADDR_VAR 0 8
82940: PUSH
82941: LD_INT 0
82943: ST_TO_ADDR
82944: GO 82962
// min_x := x - r ;
82946: LD_ADDR_VAR 0 8
82950: PUSH
82951: LD_VAR 0 1
82955: PUSH
82956: LD_VAR 0 3
82960: MINUS
82961: ST_TO_ADDR
// if y - r < 0 then
82962: LD_VAR 0 2
82966: PUSH
82967: LD_VAR 0 3
82971: MINUS
82972: PUSH
82973: LD_INT 0
82975: LESS
82976: IFFALSE 82988
// min_y := 0 else
82978: LD_ADDR_VAR 0 7
82982: PUSH
82983: LD_INT 0
82985: ST_TO_ADDR
82986: GO 83004
// min_y := y - r ;
82988: LD_ADDR_VAR 0 7
82992: PUSH
82993: LD_VAR 0 2
82997: PUSH
82998: LD_VAR 0 3
83002: MINUS
83003: ST_TO_ADDR
// max_x := x + r ;
83004: LD_ADDR_VAR 0 9
83008: PUSH
83009: LD_VAR 0 1
83013: PUSH
83014: LD_VAR 0 3
83018: PLUS
83019: ST_TO_ADDR
// max_y := y + r ;
83020: LD_ADDR_VAR 0 10
83024: PUSH
83025: LD_VAR 0 2
83029: PUSH
83030: LD_VAR 0 3
83034: PLUS
83035: ST_TO_ADDR
// for _x = min_x to max_x do
83036: LD_ADDR_VAR 0 5
83040: PUSH
83041: DOUBLE
83042: LD_VAR 0 8
83046: DEC
83047: ST_TO_ADDR
83048: LD_VAR 0 9
83052: PUSH
83053: FOR_TO
83054: IFFALSE 83155
// for _y = min_y to max_y do
83056: LD_ADDR_VAR 0 6
83060: PUSH
83061: DOUBLE
83062: LD_VAR 0 7
83066: DEC
83067: ST_TO_ADDR
83068: LD_VAR 0 10
83072: PUSH
83073: FOR_TO
83074: IFFALSE 83151
// begin if not ValidHex ( _x , _y ) then
83076: LD_VAR 0 5
83080: PPUSH
83081: LD_VAR 0 6
83085: PPUSH
83086: CALL_OW 488
83090: NOT
83091: IFFALSE 83095
// continue ;
83093: GO 83073
// if GetResourceTypeXY ( _x , _y ) then
83095: LD_VAR 0 5
83099: PPUSH
83100: LD_VAR 0 6
83104: PPUSH
83105: CALL_OW 283
83109: IFFALSE 83149
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
83111: LD_ADDR_VAR 0 4
83115: PUSH
83116: LD_VAR 0 4
83120: PPUSH
83121: LD_VAR 0 4
83125: PUSH
83126: LD_INT 1
83128: PLUS
83129: PPUSH
83130: LD_VAR 0 5
83134: PUSH
83135: LD_VAR 0 6
83139: PUSH
83140: EMPTY
83141: LIST
83142: LIST
83143: PPUSH
83144: CALL_OW 1
83148: ST_TO_ADDR
// end ;
83149: GO 83073
83151: POP
83152: POP
83153: GO 83053
83155: POP
83156: POP
// end ;
83157: LD_VAR 0 4
83161: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
83162: LD_INT 0
83164: PPUSH
83165: PPUSH
83166: PPUSH
83167: PPUSH
83168: PPUSH
83169: PPUSH
83170: PPUSH
83171: PPUSH
// if not units then
83172: LD_VAR 0 1
83176: NOT
83177: IFFALSE 83181
// exit ;
83179: GO 83713
// result := UnitFilter ( units , [ f_ok ] ) ;
83181: LD_ADDR_VAR 0 3
83185: PUSH
83186: LD_VAR 0 1
83190: PPUSH
83191: LD_INT 50
83193: PUSH
83194: EMPTY
83195: LIST
83196: PPUSH
83197: CALL_OW 72
83201: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
83202: LD_ADDR_VAR 0 8
83206: PUSH
83207: LD_VAR 0 1
83211: PUSH
83212: LD_INT 1
83214: ARRAY
83215: PPUSH
83216: CALL_OW 255
83220: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
83221: LD_ADDR_VAR 0 10
83225: PUSH
83226: LD_INT 29
83228: PUSH
83229: LD_INT 91
83231: PUSH
83232: LD_INT 49
83234: PUSH
83235: EMPTY
83236: LIST
83237: LIST
83238: LIST
83239: ST_TO_ADDR
// if not result then
83240: LD_VAR 0 3
83244: NOT
83245: IFFALSE 83249
// exit ;
83247: GO 83713
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
83249: LD_ADDR_VAR 0 5
83253: PUSH
83254: LD_INT 81
83256: PUSH
83257: LD_VAR 0 8
83261: PUSH
83262: EMPTY
83263: LIST
83264: LIST
83265: PPUSH
83266: CALL_OW 69
83270: ST_TO_ADDR
// for i in result do
83271: LD_ADDR_VAR 0 4
83275: PUSH
83276: LD_VAR 0 3
83280: PUSH
83281: FOR_IN
83282: IFFALSE 83711
// begin tag := GetTag ( i ) + 1 ;
83284: LD_ADDR_VAR 0 9
83288: PUSH
83289: LD_VAR 0 4
83293: PPUSH
83294: CALL_OW 110
83298: PUSH
83299: LD_INT 1
83301: PLUS
83302: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
83303: LD_ADDR_VAR 0 7
83307: PUSH
83308: LD_VAR 0 4
83312: PPUSH
83313: CALL_OW 250
83317: PPUSH
83318: LD_VAR 0 4
83322: PPUSH
83323: CALL_OW 251
83327: PPUSH
83328: LD_INT 4
83330: PPUSH
83331: CALL 82904 0 3
83335: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
83336: LD_VAR 0 4
83340: PPUSH
83341: CALL_OW 247
83345: PUSH
83346: LD_INT 2
83348: EQUAL
83349: IFFALSE 83361
83351: PUSH
83352: LD_VAR 0 7
83356: PUSH
83357: LD_INT 2
83359: GREATER
83360: AND
83361: IFFALSE 83381
83363: PUSH
83364: LD_VAR 0 4
83368: PPUSH
83369: CALL_OW 264
83373: PUSH
83374: LD_VAR 0 10
83378: IN
83379: NOT
83380: AND
83381: IFFALSE 83420
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
83383: LD_VAR 0 4
83387: PPUSH
83388: LD_VAR 0 7
83392: PUSH
83393: LD_INT 1
83395: ARRAY
83396: PUSH
83397: LD_INT 1
83399: ARRAY
83400: PPUSH
83401: LD_VAR 0 7
83405: PUSH
83406: LD_INT 1
83408: ARRAY
83409: PUSH
83410: LD_INT 2
83412: ARRAY
83413: PPUSH
83414: CALL_OW 116
83418: GO 83709
// if path > tag then
83420: LD_VAR 0 2
83424: PUSH
83425: LD_VAR 0 9
83429: GREATER
83430: IFFALSE 83638
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
83432: LD_ADDR_VAR 0 6
83436: PUSH
83437: LD_VAR 0 5
83441: PPUSH
83442: LD_INT 91
83444: PUSH
83445: LD_VAR 0 4
83449: PUSH
83450: LD_INT 8
83452: PUSH
83453: EMPTY
83454: LIST
83455: LIST
83456: LIST
83457: PPUSH
83458: CALL_OW 72
83462: ST_TO_ADDR
// if nearEnemy then
83463: LD_VAR 0 6
83467: IFFALSE 83536
// begin if GetWeapon ( i ) = ru_time_lapser then
83469: LD_VAR 0 4
83473: PPUSH
83474: CALL_OW 264
83478: PUSH
83479: LD_INT 49
83481: EQUAL
83482: IFFALSE 83510
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
83484: LD_VAR 0 4
83488: PPUSH
83489: LD_VAR 0 6
83493: PPUSH
83494: LD_VAR 0 4
83498: PPUSH
83499: CALL_OW 74
83503: PPUSH
83504: CALL_OW 112
83508: GO 83534
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
83510: LD_VAR 0 4
83514: PPUSH
83515: LD_VAR 0 6
83519: PPUSH
83520: LD_VAR 0 4
83524: PPUSH
83525: CALL_OW 74
83529: PPUSH
83530: CALL 84794 0 2
// end else
83534: GO 83636
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
83536: LD_VAR 0 4
83540: PPUSH
83541: LD_VAR 0 2
83545: PUSH
83546: LD_VAR 0 9
83550: ARRAY
83551: PUSH
83552: LD_INT 1
83554: ARRAY
83555: PPUSH
83556: LD_VAR 0 2
83560: PUSH
83561: LD_VAR 0 9
83565: ARRAY
83566: PUSH
83567: LD_INT 2
83569: ARRAY
83570: PPUSH
83571: CALL_OW 297
83575: PUSH
83576: LD_INT 6
83578: GREATER
83579: IFFALSE 83622
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
83581: LD_VAR 0 4
83585: PPUSH
83586: LD_VAR 0 2
83590: PUSH
83591: LD_VAR 0 9
83595: ARRAY
83596: PUSH
83597: LD_INT 1
83599: ARRAY
83600: PPUSH
83601: LD_VAR 0 2
83605: PUSH
83606: LD_VAR 0 9
83610: ARRAY
83611: PUSH
83612: LD_INT 2
83614: ARRAY
83615: PPUSH
83616: CALL_OW 114
83620: GO 83636
// SetTag ( i , tag ) ;
83622: LD_VAR 0 4
83626: PPUSH
83627: LD_VAR 0 9
83631: PPUSH
83632: CALL_OW 109
// end else
83636: GO 83709
// if enemy then
83638: LD_VAR 0 5
83642: IFFALSE 83709
// begin if GetWeapon ( i ) = ru_time_lapser then
83644: LD_VAR 0 4
83648: PPUSH
83649: CALL_OW 264
83653: PUSH
83654: LD_INT 49
83656: EQUAL
83657: IFFALSE 83685
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
83659: LD_VAR 0 4
83663: PPUSH
83664: LD_VAR 0 5
83668: PPUSH
83669: LD_VAR 0 4
83673: PPUSH
83674: CALL_OW 74
83678: PPUSH
83679: CALL_OW 112
83683: GO 83709
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
83685: LD_VAR 0 4
83689: PPUSH
83690: LD_VAR 0 5
83694: PPUSH
83695: LD_VAR 0 4
83699: PPUSH
83700: CALL_OW 74
83704: PPUSH
83705: CALL 84794 0 2
// end ; end ;
83709: GO 83281
83711: POP
83712: POP
// end ;
83713: LD_VAR 0 3
83717: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
83718: LD_INT 0
83720: PPUSH
83721: PPUSH
83722: PPUSH
// if not unit or IsInUnit ( unit ) then
83723: LD_VAR 0 1
83727: NOT
83728: IFTRUE 83741
83730: PUSH
83731: LD_VAR 0 1
83735: PPUSH
83736: CALL_OW 310
83740: OR
83741: IFFALSE 83745
// exit ;
83743: GO 83836
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
83745: LD_ADDR_VAR 0 4
83749: PUSH
83750: LD_VAR 0 1
83754: PPUSH
83755: CALL_OW 250
83759: PPUSH
83760: LD_VAR 0 2
83764: PPUSH
83765: LD_INT 1
83767: PPUSH
83768: CALL_OW 272
83772: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
83773: LD_ADDR_VAR 0 5
83777: PUSH
83778: LD_VAR 0 1
83782: PPUSH
83783: CALL_OW 251
83787: PPUSH
83788: LD_VAR 0 2
83792: PPUSH
83793: LD_INT 1
83795: PPUSH
83796: CALL_OW 273
83800: ST_TO_ADDR
// if ValidHex ( x , y ) then
83801: LD_VAR 0 4
83805: PPUSH
83806: LD_VAR 0 5
83810: PPUSH
83811: CALL_OW 488
83815: IFFALSE 83836
// ComTurnXY ( unit , x , y ) ;
83817: LD_VAR 0 1
83821: PPUSH
83822: LD_VAR 0 4
83826: PPUSH
83827: LD_VAR 0 5
83831: PPUSH
83832: CALL_OW 118
// end ;
83836: LD_VAR 0 3
83840: RET
// export function SeeUnits ( side , units ) ; var i ; begin
83841: LD_INT 0
83843: PPUSH
83844: PPUSH
// result := false ;
83845: LD_ADDR_VAR 0 3
83849: PUSH
83850: LD_INT 0
83852: ST_TO_ADDR
// if not units then
83853: LD_VAR 0 2
83857: NOT
83858: IFFALSE 83862
// exit ;
83860: GO 83907
// for i in units do
83862: LD_ADDR_VAR 0 4
83866: PUSH
83867: LD_VAR 0 2
83871: PUSH
83872: FOR_IN
83873: IFFALSE 83905
// if See ( side , i ) then
83875: LD_VAR 0 1
83879: PPUSH
83880: LD_VAR 0 4
83884: PPUSH
83885: CALL_OW 292
83889: IFFALSE 83903
// begin result := true ;
83891: LD_ADDR_VAR 0 3
83895: PUSH
83896: LD_INT 1
83898: ST_TO_ADDR
// exit ;
83899: POP
83900: POP
83901: GO 83907
// end ;
83903: GO 83872
83905: POP
83906: POP
// end ;
83907: LD_VAR 0 3
83911: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
83912: LD_INT 0
83914: PPUSH
83915: PPUSH
83916: PPUSH
83917: PPUSH
// if not unit or not points then
83918: LD_VAR 0 1
83922: NOT
83923: IFTRUE 83932
83925: PUSH
83926: LD_VAR 0 2
83930: NOT
83931: OR
83932: IFFALSE 83936
// exit ;
83934: GO 84026
// dist := 99999 ;
83936: LD_ADDR_VAR 0 5
83940: PUSH
83941: LD_INT 99999
83943: ST_TO_ADDR
// for i in points do
83944: LD_ADDR_VAR 0 4
83948: PUSH
83949: LD_VAR 0 2
83953: PUSH
83954: FOR_IN
83955: IFFALSE 84024
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
83957: LD_ADDR_VAR 0 6
83961: PUSH
83962: LD_VAR 0 1
83966: PPUSH
83967: LD_VAR 0 4
83971: PUSH
83972: LD_INT 1
83974: ARRAY
83975: PPUSH
83976: LD_VAR 0 4
83980: PUSH
83981: LD_INT 2
83983: ARRAY
83984: PPUSH
83985: CALL_OW 297
83989: ST_TO_ADDR
// if tmpDist < dist then
83990: LD_VAR 0 6
83994: PUSH
83995: LD_VAR 0 5
83999: LESS
84000: IFFALSE 84022
// begin result := i ;
84002: LD_ADDR_VAR 0 3
84006: PUSH
84007: LD_VAR 0 4
84011: ST_TO_ADDR
// dist := tmpDist ;
84012: LD_ADDR_VAR 0 5
84016: PUSH
84017: LD_VAR 0 6
84021: ST_TO_ADDR
// end ; end ;
84022: GO 83954
84024: POP
84025: POP
// end ;
84026: LD_VAR 0 3
84030: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
84031: LD_INT 0
84033: PPUSH
// uc_side := side ;
84034: LD_ADDR_OWVAR 20
84038: PUSH
84039: LD_VAR 0 1
84043: ST_TO_ADDR
// uc_nation := 3 ;
84044: LD_ADDR_OWVAR 21
84048: PUSH
84049: LD_INT 3
84051: ST_TO_ADDR
// vc_chassis := 25 ;
84052: LD_ADDR_OWVAR 37
84056: PUSH
84057: LD_INT 25
84059: ST_TO_ADDR
// vc_engine := engine_siberite ;
84060: LD_ADDR_OWVAR 39
84064: PUSH
84065: LD_INT 3
84067: ST_TO_ADDR
// vc_control := control_computer ;
84068: LD_ADDR_OWVAR 38
84072: PUSH
84073: LD_INT 3
84075: ST_TO_ADDR
// vc_weapon := 59 ;
84076: LD_ADDR_OWVAR 40
84080: PUSH
84081: LD_INT 59
84083: ST_TO_ADDR
// result := CreateVehicle ;
84084: LD_ADDR_VAR 0 5
84088: PUSH
84089: CALL_OW 45
84093: ST_TO_ADDR
// SetDir ( result , d ) ;
84094: LD_VAR 0 5
84098: PPUSH
84099: LD_VAR 0 4
84103: PPUSH
84104: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
84108: LD_VAR 0 5
84112: PPUSH
84113: LD_VAR 0 2
84117: PPUSH
84118: LD_VAR 0 3
84122: PPUSH
84123: LD_INT 0
84125: PPUSH
84126: CALL_OW 48
// end ;
84130: LD_VAR 0 5
84134: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
84135: LD_INT 0
84137: PPUSH
84138: PPUSH
84139: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
84140: LD_ADDR_VAR 0 2
84144: PUSH
84145: LD_INT 0
84147: PUSH
84148: LD_INT 0
84150: PUSH
84151: LD_INT 0
84153: PUSH
84154: LD_INT 0
84156: PUSH
84157: EMPTY
84158: LIST
84159: LIST
84160: LIST
84161: LIST
84162: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
84163: LD_VAR 0 1
84167: NOT
84168: IFTRUE 84201
84170: PUSH
84171: LD_VAR 0 1
84175: PPUSH
84176: CALL_OW 264
84180: PUSH
84181: LD_INT 12
84183: PUSH
84184: LD_INT 51
84186: PUSH
84187: LD_INT 32
84189: PUSH
84190: LD_INT 89
84192: PUSH
84193: EMPTY
84194: LIST
84195: LIST
84196: LIST
84197: LIST
84198: IN
84199: NOT
84200: OR
84201: IFFALSE 84205
// exit ;
84203: GO 84303
// for i := 1 to 3 do
84205: LD_ADDR_VAR 0 3
84209: PUSH
84210: DOUBLE
84211: LD_INT 1
84213: DEC
84214: ST_TO_ADDR
84215: LD_INT 3
84217: PUSH
84218: FOR_TO
84219: IFFALSE 84301
// begin tmp := GetCargo ( cargo , i ) ;
84221: LD_ADDR_VAR 0 4
84225: PUSH
84226: LD_VAR 0 1
84230: PPUSH
84231: LD_VAR 0 3
84235: PPUSH
84236: CALL_OW 289
84240: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
84241: LD_ADDR_VAR 0 2
84245: PUSH
84246: LD_VAR 0 2
84250: PPUSH
84251: LD_VAR 0 3
84255: PPUSH
84256: LD_VAR 0 4
84260: PPUSH
84261: CALL_OW 1
84265: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
84266: LD_ADDR_VAR 0 2
84270: PUSH
84271: LD_VAR 0 2
84275: PPUSH
84276: LD_INT 4
84278: PPUSH
84279: LD_VAR 0 2
84283: PUSH
84284: LD_INT 4
84286: ARRAY
84287: PUSH
84288: LD_VAR 0 4
84292: PLUS
84293: PPUSH
84294: CALL_OW 1
84298: ST_TO_ADDR
// end ;
84299: GO 84218
84301: POP
84302: POP
// end ;
84303: LD_VAR 0 2
84307: RET
// export function Length ( array ) ; begin
84308: LD_INT 0
84310: PPUSH
// result := array + 0 ;
84311: LD_ADDR_VAR 0 2
84315: PUSH
84316: LD_VAR 0 1
84320: PUSH
84321: LD_INT 0
84323: PLUS
84324: ST_TO_ADDR
// end ;
84325: LD_VAR 0 2
84329: RET
// export function PrepareArray ( array ) ; begin
84330: LD_INT 0
84332: PPUSH
// result := array diff 0 ;
84333: LD_ADDR_VAR 0 2
84337: PUSH
84338: LD_VAR 0 1
84342: PUSH
84343: LD_INT 0
84345: DIFF
84346: ST_TO_ADDR
// if not result [ 1 ] then
84347: LD_VAR 0 2
84351: PUSH
84352: LD_INT 1
84354: ARRAY
84355: NOT
84356: IFFALSE 84376
// result := Delete ( result , 1 ) ;
84358: LD_ADDR_VAR 0 2
84362: PUSH
84363: LD_VAR 0 2
84367: PPUSH
84368: LD_INT 1
84370: PPUSH
84371: CALL_OW 3
84375: ST_TO_ADDR
// end ;
84376: LD_VAR 0 2
84380: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
84381: LD_INT 0
84383: PPUSH
84384: PPUSH
84385: PPUSH
84386: PPUSH
// sibRocketRange := 25 ;
84387: LD_ADDR_VAR 0 6
84391: PUSH
84392: LD_INT 25
84394: ST_TO_ADDR
// result := false ;
84395: LD_ADDR_VAR 0 4
84399: PUSH
84400: LD_INT 0
84402: ST_TO_ADDR
// for i := 0 to 5 do
84403: LD_ADDR_VAR 0 5
84407: PUSH
84408: DOUBLE
84409: LD_INT 0
84411: DEC
84412: ST_TO_ADDR
84413: LD_INT 5
84415: PUSH
84416: FOR_TO
84417: IFFALSE 84484
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
84419: LD_VAR 0 1
84423: PPUSH
84424: LD_VAR 0 5
84428: PPUSH
84429: LD_VAR 0 6
84433: PPUSH
84434: CALL_OW 272
84438: PPUSH
84439: LD_VAR 0 2
84443: PPUSH
84444: LD_VAR 0 5
84448: PPUSH
84449: LD_VAR 0 6
84453: PPUSH
84454: CALL_OW 273
84458: PPUSH
84459: LD_VAR 0 3
84463: PPUSH
84464: CALL_OW 309
84468: IFFALSE 84482
// begin result := true ;
84470: LD_ADDR_VAR 0 4
84474: PUSH
84475: LD_INT 1
84477: ST_TO_ADDR
// exit ;
84478: POP
84479: POP
84480: GO 84486
// end ;
84482: GO 84416
84484: POP
84485: POP
// end ;
84486: LD_VAR 0 4
84490: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
84491: LD_INT 0
84493: PPUSH
84494: PPUSH
84495: PPUSH
// if btype = b_depot then
84496: LD_VAR 0 2
84500: PUSH
84501: LD_INT 0
84503: EQUAL
84504: IFFALSE 84516
// begin result := true ;
84506: LD_ADDR_VAR 0 3
84510: PUSH
84511: LD_INT 1
84513: ST_TO_ADDR
// exit ;
84514: GO 84636
// end ; pom := GetBase ( depot ) ;
84516: LD_ADDR_VAR 0 4
84520: PUSH
84521: LD_VAR 0 1
84525: PPUSH
84526: CALL_OW 274
84530: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
84531: LD_ADDR_VAR 0 5
84535: PUSH
84536: LD_VAR 0 2
84540: PPUSH
84541: LD_VAR 0 1
84545: PPUSH
84546: CALL_OW 248
84550: PPUSH
84551: CALL_OW 450
84555: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
84556: LD_ADDR_VAR 0 3
84560: PUSH
84561: LD_VAR 0 4
84565: PPUSH
84566: LD_INT 1
84568: PPUSH
84569: CALL_OW 275
84573: PUSH
84574: LD_VAR 0 5
84578: PUSH
84579: LD_INT 1
84581: ARRAY
84582: GREATEREQUAL
84583: IFFALSE 84609
84585: PUSH
84586: LD_VAR 0 4
84590: PPUSH
84591: LD_INT 2
84593: PPUSH
84594: CALL_OW 275
84598: PUSH
84599: LD_VAR 0 5
84603: PUSH
84604: LD_INT 2
84606: ARRAY
84607: GREATEREQUAL
84608: AND
84609: IFFALSE 84635
84611: PUSH
84612: LD_VAR 0 4
84616: PPUSH
84617: LD_INT 3
84619: PPUSH
84620: CALL_OW 275
84624: PUSH
84625: LD_VAR 0 5
84629: PUSH
84630: LD_INT 3
84632: ARRAY
84633: GREATEREQUAL
84634: AND
84635: ST_TO_ADDR
// end ;
84636: LD_VAR 0 3
84640: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
84641: LD_INT 0
84643: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
84644: LD_VAR 0 1
84648: PPUSH
84649: LD_VAR 0 2
84653: PPUSH
84654: LD_INT 0
84656: PPUSH
84657: LD_INT 0
84659: PPUSH
84660: LD_INT 1
84662: PPUSH
84663: LD_INT 0
84665: PPUSH
84666: CALL_OW 587
// end ;
84670: LD_VAR 0 3
84674: RET
// export function CenterOnNow ( unit ) ; begin
84675: LD_INT 0
84677: PPUSH
// result := IsInUnit ( unit ) ;
84678: LD_ADDR_VAR 0 2
84682: PUSH
84683: LD_VAR 0 1
84687: PPUSH
84688: CALL_OW 310
84692: ST_TO_ADDR
// if not result then
84693: LD_VAR 0 2
84697: NOT
84698: IFFALSE 84710
// result := unit ;
84700: LD_ADDR_VAR 0 2
84704: PUSH
84705: LD_VAR 0 1
84709: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
84710: LD_VAR 0 1
84714: PPUSH
84715: CALL_OW 87
// end ;
84719: LD_VAR 0 2
84723: RET
// export function ComMoveHex ( unit , hex ) ; begin
84724: LD_INT 0
84726: PPUSH
// if not hex then
84727: LD_VAR 0 2
84731: NOT
84732: IFFALSE 84736
// exit ;
84734: GO 84789
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
84736: LD_VAR 0 2
84740: PUSH
84741: LD_INT 1
84743: ARRAY
84744: PPUSH
84745: LD_VAR 0 2
84749: PUSH
84750: LD_INT 2
84752: ARRAY
84753: PPUSH
84754: CALL_OW 428
84758: IFFALSE 84762
// exit ;
84760: GO 84789
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
84762: LD_VAR 0 1
84766: PPUSH
84767: LD_VAR 0 2
84771: PUSH
84772: LD_INT 1
84774: ARRAY
84775: PPUSH
84776: LD_VAR 0 2
84780: PUSH
84781: LD_INT 2
84783: ARRAY
84784: PPUSH
84785: CALL_OW 111
// end ;
84789: LD_VAR 0 3
84793: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
84794: LD_INT 0
84796: PPUSH
84797: PPUSH
84798: PPUSH
// if not unit or not enemy then
84799: LD_VAR 0 1
84803: NOT
84804: IFTRUE 84813
84806: PUSH
84807: LD_VAR 0 2
84811: NOT
84812: OR
84813: IFFALSE 84817
// exit ;
84815: GO 84943
// x := GetX ( enemy ) ;
84817: LD_ADDR_VAR 0 4
84821: PUSH
84822: LD_VAR 0 2
84826: PPUSH
84827: CALL_OW 250
84831: ST_TO_ADDR
// y := GetY ( enemy ) ;
84832: LD_ADDR_VAR 0 5
84836: PUSH
84837: LD_VAR 0 2
84841: PPUSH
84842: CALL_OW 251
84846: ST_TO_ADDR
// if ValidHex ( x , y ) then
84847: LD_VAR 0 4
84851: PPUSH
84852: LD_VAR 0 5
84856: PPUSH
84857: CALL_OW 488
84861: IFFALSE 84943
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
84863: LD_VAR 0 2
84867: PPUSH
84868: CALL_OW 247
84872: PUSH
84873: LD_INT 3
84875: PUSH
84876: LD_INT 2
84878: PUSH
84879: EMPTY
84880: LIST
84881: LIST
84882: IN
84883: IFTRUE 84906
84885: PUSH
84886: LD_VAR 0 1
84890: PPUSH
84891: CALL_OW 255
84895: PPUSH
84896: LD_VAR 0 2
84900: PPUSH
84901: CALL_OW 292
84905: OR
84906: IFFALSE 84924
// ComAttackUnit ( unit , enemy ) else
84908: LD_VAR 0 1
84912: PPUSH
84913: LD_VAR 0 2
84917: PPUSH
84918: CALL_OW 115
84922: GO 84943
// ComAgressiveMove ( unit , x , y ) ;
84924: LD_VAR 0 1
84928: PPUSH
84929: LD_VAR 0 4
84933: PPUSH
84934: LD_VAR 0 5
84938: PPUSH
84939: CALL_OW 114
// end ;
84943: LD_VAR 0 3
84947: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
84948: LD_INT 0
84950: PPUSH
84951: PPUSH
84952: PPUSH
// list := AreaToList ( area , 0 ) ;
84953: LD_ADDR_VAR 0 5
84957: PUSH
84958: LD_VAR 0 1
84962: PPUSH
84963: LD_INT 0
84965: PPUSH
84966: CALL_OW 517
84970: ST_TO_ADDR
// if not list then
84971: LD_VAR 0 5
84975: NOT
84976: IFFALSE 84980
// exit ;
84978: GO 85110
// if all then
84980: LD_VAR 0 2
84984: IFFALSE 85072
// begin for i := 1 to list [ 1 ] do
84986: LD_ADDR_VAR 0 4
84990: PUSH
84991: DOUBLE
84992: LD_INT 1
84994: DEC
84995: ST_TO_ADDR
84996: LD_VAR 0 5
85000: PUSH
85001: LD_INT 1
85003: ARRAY
85004: PUSH
85005: FOR_TO
85006: IFFALSE 85068
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
85008: LD_ADDR_VAR 0 3
85012: PUSH
85013: LD_VAR 0 3
85017: PPUSH
85018: LD_VAR 0 3
85022: PUSH
85023: LD_INT 1
85025: PLUS
85026: PPUSH
85027: LD_VAR 0 5
85031: PUSH
85032: LD_INT 1
85034: ARRAY
85035: PUSH
85036: LD_VAR 0 4
85040: ARRAY
85041: PUSH
85042: LD_VAR 0 5
85046: PUSH
85047: LD_INT 2
85049: ARRAY
85050: PUSH
85051: LD_VAR 0 4
85055: ARRAY
85056: PUSH
85057: EMPTY
85058: LIST
85059: LIST
85060: PPUSH
85061: CALL_OW 1
85065: ST_TO_ADDR
85066: GO 85005
85068: POP
85069: POP
// exit ;
85070: GO 85110
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
85072: LD_ADDR_VAR 0 3
85076: PUSH
85077: LD_VAR 0 5
85081: PUSH
85082: LD_INT 1
85084: ARRAY
85085: PUSH
85086: LD_INT 1
85088: ARRAY
85089: PUSH
85090: LD_VAR 0 5
85094: PUSH
85095: LD_INT 2
85097: ARRAY
85098: PUSH
85099: LD_INT 1
85101: ARRAY
85102: PUSH
85103: EMPTY
85104: LIST
85105: LIST
85106: PUSH
85107: EMPTY
85108: LIST
85109: ST_TO_ADDR
// end ;
85110: LD_VAR 0 3
85114: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
85115: LD_INT 0
85117: PPUSH
85118: PPUSH
// list := AreaToList ( area , 0 ) ;
85119: LD_ADDR_VAR 0 4
85123: PUSH
85124: LD_VAR 0 1
85128: PPUSH
85129: LD_INT 0
85131: PPUSH
85132: CALL_OW 517
85136: ST_TO_ADDR
// if not list then
85137: LD_VAR 0 4
85141: NOT
85142: IFFALSE 85146
// exit ;
85144: GO 85187
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
85146: LD_ADDR_VAR 0 3
85150: PUSH
85151: LD_VAR 0 4
85155: PUSH
85156: LD_INT 1
85158: ARRAY
85159: PUSH
85160: LD_INT 1
85162: ARRAY
85163: PUSH
85164: LD_VAR 0 4
85168: PUSH
85169: LD_INT 2
85171: ARRAY
85172: PUSH
85173: LD_INT 1
85175: ARRAY
85176: PUSH
85177: LD_VAR 0 2
85181: PUSH
85182: EMPTY
85183: LIST
85184: LIST
85185: LIST
85186: ST_TO_ADDR
// end ;
85187: LD_VAR 0 3
85191: RET
// export function First ( array ) ; begin
85192: LD_INT 0
85194: PPUSH
// if not array then
85195: LD_VAR 0 1
85199: NOT
85200: IFFALSE 85204
// exit ;
85202: GO 85218
// result := array [ 1 ] ;
85204: LD_ADDR_VAR 0 2
85208: PUSH
85209: LD_VAR 0 1
85213: PUSH
85214: LD_INT 1
85216: ARRAY
85217: ST_TO_ADDR
// end ;
85218: LD_VAR 0 2
85222: RET
// export function Last ( array ) ; begin
85223: LD_INT 0
85225: PPUSH
// if not array then
85226: LD_VAR 0 1
85230: NOT
85231: IFFALSE 85235
// exit ;
85233: GO 85251
// result := array [ array ] ;
85235: LD_ADDR_VAR 0 2
85239: PUSH
85240: LD_VAR 0 1
85244: PUSH
85245: LD_VAR 0 1
85249: ARRAY
85250: ST_TO_ADDR
// end ;
85251: LD_VAR 0 2
85255: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
85256: LD_INT 0
85258: PPUSH
85259: PPUSH
// result := [ ] ;
85260: LD_ADDR_VAR 0 5
85264: PUSH
85265: EMPTY
85266: ST_TO_ADDR
// if not array then
85267: LD_VAR 0 1
85271: NOT
85272: IFFALSE 85276
// exit ;
85274: GO 85388
// for i := 1 to array do
85276: LD_ADDR_VAR 0 6
85280: PUSH
85281: DOUBLE
85282: LD_INT 1
85284: DEC
85285: ST_TO_ADDR
85286: LD_VAR 0 1
85290: PUSH
85291: FOR_TO
85292: IFFALSE 85386
// if array [ i ] [ index ] = value then
85294: LD_VAR 0 1
85298: PUSH
85299: LD_VAR 0 6
85303: ARRAY
85304: PUSH
85305: LD_VAR 0 2
85309: ARRAY
85310: PUSH
85311: LD_VAR 0 3
85315: EQUAL
85316: IFFALSE 85384
// begin if indexColumn then
85318: LD_VAR 0 4
85322: IFFALSE 85358
// result := Join ( result , array [ i ] [ indexColumn ] ) else
85324: LD_ADDR_VAR 0 5
85328: PUSH
85329: LD_VAR 0 5
85333: PPUSH
85334: LD_VAR 0 1
85338: PUSH
85339: LD_VAR 0 6
85343: ARRAY
85344: PUSH
85345: LD_VAR 0 4
85349: ARRAY
85350: PPUSH
85351: CALL 80396 0 2
85355: ST_TO_ADDR
85356: GO 85384
// result := Join ( result , array [ i ] ) ;
85358: LD_ADDR_VAR 0 5
85362: PUSH
85363: LD_VAR 0 5
85367: PPUSH
85368: LD_VAR 0 1
85372: PUSH
85373: LD_VAR 0 6
85377: ARRAY
85378: PPUSH
85379: CALL 80396 0 2
85383: ST_TO_ADDR
// end ;
85384: GO 85291
85386: POP
85387: POP
// end ;
85388: LD_VAR 0 5
85392: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
85393: LD_INT 0
85395: PPUSH
// if not vehicles or not parkingPoint then
85396: LD_VAR 0 1
85400: NOT
85401: IFTRUE 85410
85403: PUSH
85404: LD_VAR 0 2
85408: NOT
85409: OR
85410: IFFALSE 85414
// exit ;
85412: GO 85512
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
85414: LD_ADDR_VAR 0 1
85418: PUSH
85419: LD_VAR 0 1
85423: PPUSH
85424: LD_INT 50
85426: PUSH
85427: EMPTY
85428: LIST
85429: PUSH
85430: LD_INT 3
85432: PUSH
85433: LD_INT 92
85435: PUSH
85436: LD_VAR 0 2
85440: PUSH
85441: LD_INT 1
85443: ARRAY
85444: PUSH
85445: LD_VAR 0 2
85449: PUSH
85450: LD_INT 2
85452: ARRAY
85453: PUSH
85454: LD_INT 8
85456: PUSH
85457: EMPTY
85458: LIST
85459: LIST
85460: LIST
85461: LIST
85462: PUSH
85463: EMPTY
85464: LIST
85465: LIST
85466: PUSH
85467: EMPTY
85468: LIST
85469: LIST
85470: PPUSH
85471: CALL_OW 72
85475: ST_TO_ADDR
// if not vehicles then
85476: LD_VAR 0 1
85480: NOT
85481: IFFALSE 85485
// exit ;
85483: GO 85512
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
85485: LD_VAR 0 1
85489: PPUSH
85490: LD_VAR 0 2
85494: PUSH
85495: LD_INT 1
85497: ARRAY
85498: PPUSH
85499: LD_VAR 0 2
85503: PUSH
85504: LD_INT 2
85506: ARRAY
85507: PPUSH
85508: CALL_OW 111
// end ;
85512: LD_VAR 0 3
85516: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
85517: LD_INT 0
85519: PPUSH
85520: PPUSH
85521: PPUSH
// if not side or not area then
85522: LD_VAR 0 1
85526: NOT
85527: IFTRUE 85536
85529: PUSH
85530: LD_VAR 0 2
85534: NOT
85535: OR
85536: IFFALSE 85540
// exit ;
85538: GO 85659
// tmp := AreaToList ( area , 0 ) ;
85540: LD_ADDR_VAR 0 5
85544: PUSH
85545: LD_VAR 0 2
85549: PPUSH
85550: LD_INT 0
85552: PPUSH
85553: CALL_OW 517
85557: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
85558: LD_ADDR_VAR 0 4
85562: PUSH
85563: DOUBLE
85564: LD_INT 1
85566: DEC
85567: ST_TO_ADDR
85568: LD_VAR 0 5
85572: PUSH
85573: LD_INT 1
85575: ARRAY
85576: PUSH
85577: FOR_TO
85578: IFFALSE 85657
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
85580: LD_VAR 0 5
85584: PUSH
85585: LD_INT 1
85587: ARRAY
85588: PUSH
85589: LD_VAR 0 4
85593: ARRAY
85594: PPUSH
85595: LD_VAR 0 5
85599: PUSH
85600: LD_INT 2
85602: ARRAY
85603: PUSH
85604: LD_VAR 0 4
85608: ARRAY
85609: PPUSH
85610: CALL_OW 351
85614: IFFALSE 85655
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
85616: LD_VAR 0 5
85620: PUSH
85621: LD_INT 1
85623: ARRAY
85624: PUSH
85625: LD_VAR 0 4
85629: ARRAY
85630: PPUSH
85631: LD_VAR 0 5
85635: PUSH
85636: LD_INT 2
85638: ARRAY
85639: PUSH
85640: LD_VAR 0 4
85644: ARRAY
85645: PPUSH
85646: LD_VAR 0 1
85650: PPUSH
85651: CALL_OW 244
// end ;
85655: GO 85577
85657: POP
85658: POP
// end ;
85659: LD_VAR 0 3
85663: RET
// export function UniqueArray ( array ) ; var i ; begin
85664: LD_INT 0
85666: PPUSH
85667: PPUSH
// result := [ ] ;
85668: LD_ADDR_VAR 0 2
85672: PUSH
85673: EMPTY
85674: ST_TO_ADDR
// if not array then
85675: LD_VAR 0 1
85679: NOT
85680: IFFALSE 85684
// exit ;
85682: GO 85745
// for i := 1 to array do
85684: LD_ADDR_VAR 0 3
85688: PUSH
85689: DOUBLE
85690: LD_INT 1
85692: DEC
85693: ST_TO_ADDR
85694: LD_VAR 0 1
85698: PUSH
85699: FOR_TO
85700: IFFALSE 85743
// if not array [ i ] in result then
85702: LD_VAR 0 1
85706: PUSH
85707: LD_VAR 0 3
85711: ARRAY
85712: PUSH
85713: LD_VAR 0 2
85717: IN
85718: NOT
85719: IFFALSE 85741
// result := Join ( result , i ) ;
85721: LD_ADDR_VAR 0 2
85725: PUSH
85726: LD_VAR 0 2
85730: PPUSH
85731: LD_VAR 0 3
85735: PPUSH
85736: CALL 80396 0 2
85740: ST_TO_ADDR
85741: GO 85699
85743: POP
85744: POP
// end ; end_of_file
85745: LD_VAR 0 2
85749: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
85750: LD_VAR 0 1
85754: PUSH
85755: LD_INT 200
85757: DOUBLE
85758: GREATEREQUAL
85759: IFFALSE 85767
85761: LD_INT 299
85763: DOUBLE
85764: LESSEQUAL
85765: IFTRUE 85769
85767: GO 85801
85769: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
85770: LD_VAR 0 1
85774: PPUSH
85775: LD_VAR 0 2
85779: PPUSH
85780: LD_VAR 0 3
85784: PPUSH
85785: LD_VAR 0 4
85789: PPUSH
85790: LD_VAR 0 5
85794: PPUSH
85795: CALL 36472 0 5
85799: GO 85878
85801: LD_INT 300
85803: DOUBLE
85804: GREATEREQUAL
85805: IFFALSE 85813
85807: LD_INT 399
85809: DOUBLE
85810: LESSEQUAL
85811: IFTRUE 85815
85813: GO 85877
85815: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
85816: LD_VAR 0 1
85820: PPUSH
85821: LD_VAR 0 2
85825: PPUSH
85826: LD_VAR 0 3
85830: PPUSH
85831: LD_VAR 0 4
85835: PPUSH
85836: LD_VAR 0 5
85840: PPUSH
85841: LD_VAR 0 6
85845: PPUSH
85846: LD_VAR 0 7
85850: PPUSH
85851: LD_VAR 0 8
85855: PPUSH
85856: LD_VAR 0 9
85860: PPUSH
85861: LD_VAR 0 10
85865: PPUSH
85866: LD_VAR 0 11
85870: PPUSH
85871: CALL 32275 0 11
85875: GO 85878
85877: POP
// end ;
85878: PPOPN 11
85880: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
85881: LD_VAR 0 1
85885: PPUSH
85886: LD_VAR 0 2
85890: PPUSH
85891: LD_VAR 0 3
85895: PPUSH
85896: LD_VAR 0 4
85900: PPUSH
85901: LD_VAR 0 5
85905: PPUSH
85906: CALL 35772 0 5
// end ; end_of_file
85910: PPOPN 5
85912: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
85913: LD_VAR 0 1
85917: PPUSH
85918: LD_VAR 0 2
85922: PPUSH
85923: LD_VAR 0 3
85927: PPUSH
85928: LD_VAR 0 4
85932: PPUSH
85933: LD_VAR 0 5
85937: PPUSH
85938: LD_VAR 0 6
85942: PPUSH
85943: CALL 19815 0 6
// end ;
85947: PPOPN 6
85949: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
85950: LD_INT 0
85952: PPUSH
// begin if not units then
85953: LD_VAR 0 1
85957: NOT
85958: IFFALSE 85962
// exit ;
85960: GO 85996
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
85962: LD_VAR 0 1
85966: PPUSH
85967: LD_VAR 0 2
85971: PPUSH
85972: LD_VAR 0 3
85976: PPUSH
85977: LD_VAR 0 4
85981: PPUSH
85982: LD_VAR 0 5
85986: PPUSH
85987: LD_VAR 0 6
85991: PPUSH
85992: CALL 42169 0 6
// end ;
85996: PPOPN 7
85998: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
85999: CALL 19695 0 0
// end ;
86003: PPOPN 1
86005: END
