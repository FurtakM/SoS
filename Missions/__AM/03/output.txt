// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 378 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 466 0 0
// PrepareRussian ;
  29: CALL 3086 0 0
// PrepareAmerican ;
  33: CALL 1228 0 0
// PrepareCornell ;
  37: CALL 2315 0 0
// PrepareWesternBase ;
  41: CALL 2541 0 0
// Action ;
  45: CALL 5331 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_OWVAR 67
 220: ARRAY
 221: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 ] [ Difficulty ] ;
 222: LD_ADDR_EXP 20
 226: PUSH
 227: LD_INT 600
 229: PUSH
 230: LD_INT 500
 232: PUSH
 233: LD_INT 400
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_OWVAR 67
 245: ARRAY
 246: ST_TO_ADDR
// end_mission_allowed := false ;
 247: LD_ADDR_EXP 21
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// save_others := [ ] ;
 255: LD_ADDR_EXP 22
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// save_group := [ ] ;
 262: LD_ADDR_EXP 23
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// show_query := true ;
 269: LD_ADDR_EXP 24
 273: PUSH
 274: LD_INT 1
 276: ST_TO_ADDR
// wait_for_them := false ;
 277: LD_ADDR_EXP 25
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// veh_on_meta := false ;
 285: LD_ADDR_EXP 28
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// send_spec_patrol := false ;
 293: LD_ADDR_EXP 30
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// prepare_siege := false ;
 301: LD_ADDR_EXP 31
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// send_attack_on_cornel := false ;
 309: LD_ADDR_EXP 32
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 317: LD_ADDR_EXP 26
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// game_end := false ;
 325: LD_ADDR_EXP 33
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// lose_counter := 0 ;
 333: LD_ADDR_EXP 34
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// powell_warn := 0 ;
 341: LD_ADDR_EXP 35
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// save_counter := 0 ;
 349: LD_ADDR_EXP 36
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// cornel_saved := false ;
 357: LD_ADDR_EXP 27
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// ach_counter := 0 ;
 365: LD_ADDR_EXP 13
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// end ;
 373: LD_VAR 0 1
 377: RET
// function SetDiplomacy ; begin
 378: LD_INT 0
 380: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 381: LD_INT 1
 383: PPUSH
 384: LD_INT 4
 386: PPUSH
 387: LD_INT 1
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 397: LD_INT 1
 399: PPUSH
 400: LD_INT 8
 402: PPUSH
 403: LD_INT 1
 405: PPUSH
 406: LD_INT 1
 408: PPUSH
 409: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 413: LD_INT 3
 415: PPUSH
 416: LD_INT 6
 418: PPUSH
 419: LD_INT 1
 421: PPUSH
 422: LD_INT 1
 424: PPUSH
 425: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 429: LD_INT 4
 431: PPUSH
 432: LD_INT 6
 434: PPUSH
 435: LD_INT 0
 437: PPUSH
 438: LD_INT 1
 440: PPUSH
 441: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 445: LD_INT 3
 447: PPUSH
 448: LD_INT 8
 450: PPUSH
 451: LD_INT 0
 453: PPUSH
 454: LD_INT 1
 456: PPUSH
 457: CALL_OW 80
// end ;
 461: LD_VAR 0 1
 465: RET
// export function DebugMode ; var i ; begin
 466: LD_INT 0
 468: PPUSH
 469: PPUSH
// FogOff ( 1 ) ;
 470: LD_INT 1
 472: PPUSH
 473: CALL_OW 344
// debug_strings := [ ] ;
 477: LD_ADDR_OWVAR 48
 481: PUSH
 482: EMPTY
 483: ST_TO_ADDR
// end ; end_of_file
 484: LD_VAR 0 1
 488: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 489: LD_INT 0
 491: PPUSH
 492: PPUSH
// if exist_mode then
 493: LD_VAR 0 2
 497: IFFALSE 522
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
 499: LD_ADDR_VAR 0 4
 503: PUSH
 504: LD_EXP 3
 508: PUSH
 509: LD_VAR 0 1
 513: STR
 514: PPUSH
 515: CALL_OW 34
 519: ST_TO_ADDR
 520: GO 537
// unit := NewCharacter ( ident ) ;
 522: LD_ADDR_VAR 0 4
 526: PUSH
 527: LD_VAR 0 1
 531: PPUSH
 532: CALL_OW 25
 536: ST_TO_ADDR
// result := unit ;
 537: LD_ADDR_VAR 0 3
 541: PUSH
 542: LD_VAR 0 4
 546: ST_TO_ADDR
// end ;
 547: LD_VAR 0 3
 551: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 552: LD_INT 0
 554: PPUSH
// uc_side := side ;
 555: LD_ADDR_OWVAR 20
 559: PUSH
 560: LD_VAR 0 1
 564: ST_TO_ADDR
// uc_nation := nation ;
 565: LD_ADDR_OWVAR 21
 569: PUSH
 570: LD_VAR 0 2
 574: ST_TO_ADDR
// vc_chassis := chassis ;
 575: LD_ADDR_OWVAR 37
 579: PUSH
 580: LD_VAR 0 3
 584: ST_TO_ADDR
// vc_engine := engine ;
 585: LD_ADDR_OWVAR 39
 589: PUSH
 590: LD_VAR 0 4
 594: ST_TO_ADDR
// vc_control := control ;
 595: LD_ADDR_OWVAR 38
 599: PUSH
 600: LD_VAR 0 5
 604: ST_TO_ADDR
// vc_weapon := weapon ;
 605: LD_ADDR_OWVAR 40
 609: PUSH
 610: LD_VAR 0 6
 614: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 615: LD_ADDR_OWVAR 41
 619: PUSH
 620: LD_VAR 0 7
 624: ST_TO_ADDR
// result := CreateVehicle ;
 625: LD_ADDR_VAR 0 8
 629: PUSH
 630: CALL_OW 45
 634: ST_TO_ADDR
// end ;
 635: LD_VAR 0 8
 639: RET
// export function SayX ( units , ident ) ; var i ; begin
 640: LD_INT 0
 642: PPUSH
 643: PPUSH
// result := false ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_INT 0
 651: ST_TO_ADDR
// if not units then
 652: LD_VAR 0 1
 656: NOT
 657: IFFALSE 661
// exit ;
 659: GO 715
// for i in units do
 661: LD_ADDR_VAR 0 4
 665: PUSH
 666: LD_VAR 0 1
 670: PUSH
 671: FOR_IN
 672: IFFALSE 713
// if IsOk ( i ) then
 674: LD_VAR 0 4
 678: PPUSH
 679: CALL_OW 302
 683: IFFALSE 711
// begin Say ( i , ident ) ;
 685: LD_VAR 0 4
 689: PPUSH
 690: LD_VAR 0 2
 694: PPUSH
 695: CALL_OW 88
// result := i ;
 699: LD_ADDR_VAR 0 3
 703: PUSH
 704: LD_VAR 0 4
 708: ST_TO_ADDR
// break ;
 709: GO 713
// end ;
 711: GO 671
 713: POP
 714: POP
// end ;
 715: LD_VAR 0 3
 719: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 720: LD_INT 0
 722: PPUSH
 723: PPUSH
 724: PPUSH
 725: PPUSH
// for i = 1 to count do
 726: LD_ADDR_VAR 0 8
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 6
 740: PUSH
 741: FOR_TO
 742: IFFALSE 823
// begin uc_side = side ;
 744: LD_ADDR_OWVAR 20
 748: PUSH
 749: LD_VAR 0 1
 753: ST_TO_ADDR
// uc_nation = nation ;
 754: LD_ADDR_OWVAR 21
 758: PUSH
 759: LD_VAR 0 2
 763: ST_TO_ADDR
// hc_gallery =  ;
 764: LD_ADDR_OWVAR 33
 768: PUSH
 769: LD_STRING 
 771: ST_TO_ADDR
// hc_name =  ;
 772: LD_ADDR_OWVAR 26
 776: PUSH
 777: LD_STRING 
 779: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 780: LD_INT 0
 782: PPUSH
 783: LD_VAR 0 5
 787: PPUSH
 788: LD_VAR 0 4
 792: PPUSH
 793: CALL_OW 380
// un = CreateHuman ;
 797: LD_ADDR_VAR 0 10
 801: PUSH
 802: CALL_OW 44
 806: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 807: LD_VAR 0 10
 811: PPUSH
 812: LD_VAR 0 3
 816: PPUSH
 817: CALL_OW 52
// end ;
 821: GO 741
 823: POP
 824: POP
// end ;
 825: LD_VAR 0 7
 829: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
// uc_side := GetSide ( b ) ;
 835: LD_ADDR_OWVAR 20
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 255
 849: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 850: LD_ADDR_OWVAR 21
 854: PUSH
 855: LD_VAR 0 2
 859: PPUSH
 860: CALL_OW 248
 864: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 865: LD_INT 0
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 380
// un = CreateHuman ;
 880: LD_ADDR_VAR 0 4
 884: PUSH
 885: CALL_OW 44
 889: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 890: LD_ADDR_VAR 0 5
 894: PUSH
 895: LD_VAR 0 2
 899: PPUSH
 900: CALL_OW 254
 904: PUSH
 905: LD_INT 3
 907: MINUS
 908: ST_TO_ADDR
// if dir < 0 then
 909: LD_VAR 0 5
 913: PUSH
 914: LD_INT 0
 916: LESS
 917: IFFALSE 933
// dir := 6 + dir ;
 919: LD_ADDR_VAR 0 5
 923: PUSH
 924: LD_INT 6
 926: PUSH
 927: LD_VAR 0 5
 931: PLUS
 932: ST_TO_ADDR
// SetDir ( un , dir ) ;
 933: LD_VAR 0 4
 937: PPUSH
 938: LD_VAR 0 5
 942: PPUSH
 943: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 947: LD_VAR 0 4
 951: PPUSH
 952: LD_VAR 0 2
 956: PPUSH
 957: CALL_OW 52
// end ;
 961: LD_VAR 0 3
 965: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 966: LD_INT 0
 968: PPUSH
 969: PPUSH
 970: PPUSH
// result := false ;
 971: LD_ADDR_VAR 0 2
 975: PUSH
 976: LD_INT 0
 978: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 979: LD_ADDR_VAR 0 3
 983: PUSH
 984: LD_INT 22
 986: PUSH
 987: LD_INT 1
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 34
 996: PUSH
 997: LD_INT 2
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: PPUSH
1008: CALL_OW 69
1012: ST_TO_ADDR
// for i in filter do
1013: LD_ADDR_VAR 0 4
1017: PUSH
1018: LD_VAR 0 3
1022: PUSH
1023: FOR_IN
1024: IFFALSE 1055
// if IsDrivenBy ( i ) = unit then
1026: LD_VAR 0 4
1030: PPUSH
1031: CALL_OW 311
1035: PUSH
1036: LD_VAR 0 1
1040: EQUAL
1041: IFFALSE 1053
// begin result := true ;
1043: LD_ADDR_VAR 0 2
1047: PUSH
1048: LD_INT 1
1050: ST_TO_ADDR
// break ;
1051: GO 1055
// end ;
1053: GO 1023
1055: POP
1056: POP
// end ;
1057: LD_VAR 0 2
1061: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1062: LD_INT 0
1064: PPUSH
1065: PPUSH
// result := false ;
1066: LD_ADDR_VAR 0 2
1070: PUSH
1071: LD_INT 0
1073: ST_TO_ADDR
// if not blist then
1074: LD_VAR 0 1
1078: NOT
1079: IFFALSE 1083
// exit ;
1081: GO 1127
// for i in blist do
1083: LD_ADDR_VAR 0 3
1087: PUSH
1088: LD_VAR 0 1
1092: PUSH
1093: FOR_IN
1094: IFFALSE 1125
// if UnitsInside ( i ) < 6 then
1096: LD_VAR 0 3
1100: PPUSH
1101: CALL_OW 313
1105: PUSH
1106: LD_INT 6
1108: LESS
1109: IFFALSE 1123
// begin result := i ;
1111: LD_ADDR_VAR 0 2
1115: PUSH
1116: LD_VAR 0 3
1120: ST_TO_ADDR
// break ;
1121: GO 1125
// end ;
1123: GO 1093
1125: POP
1126: POP
// end ;
1127: LD_VAR 0 2
1131: RET
// export function Count ( timer , mode ) ; begin
1132: LD_INT 0
1134: PPUSH
// if not timer then
1135: LD_VAR 0 1
1139: NOT
1140: IFFALSE 1144
// exit ;
1142: GO 1195
// if mode in [ asc , up , + ] then
1144: LD_VAR 0 2
1148: PUSH
1149: LD_STRING asc
1151: PUSH
1152: LD_STRING up
1154: PUSH
1155: LD_STRING +
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: IN
1163: IFFALSE 1181
// result := timer + 0 0$01 else
1165: LD_ADDR_VAR 0 3
1169: PUSH
1170: LD_VAR 0 1
1174: PUSH
1175: LD_INT 35
1177: PLUS
1178: ST_TO_ADDR
1179: GO 1195
// result := timer - 0 0$01 ;
1181: LD_ADDR_VAR 0 3
1185: PUSH
1186: LD_VAR 0 1
1190: PUSH
1191: LD_INT 35
1193: MINUS
1194: ST_TO_ADDR
// end ;
1195: LD_VAR 0 3
1199: RET
// export function Video ( mode ) ; begin
1200: LD_INT 0
1202: PPUSH
// ingame_video = mode ;
1203: LD_ADDR_OWVAR 52
1207: PUSH
1208: LD_VAR 0 1
1212: ST_TO_ADDR
// interface_hidden = mode ;
1213: LD_ADDR_OWVAR 54
1217: PUSH
1218: LD_VAR 0 1
1222: ST_TO_ADDR
// end ; end_of_file
1223: LD_VAR 0 2
1227: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty ; begin
1228: LD_INT 0
1230: PPUSH
1231: PPUSH
1232: PPUSH
1233: PPUSH
1234: PPUSH
1235: PPUSH
1236: PPUSH
1237: PPUSH
// uc_side := 4 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_INT 4
1245: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
1246: LD_ADDR_EXP 46
1250: PUSH
1251: LD_STRING Powell
1253: PPUSH
1254: LD_INT 0
1256: PPUSH
1257: CALL 489 0 2
1261: ST_TO_ADDR
// uc_side := 1 ;
1262: LD_ADDR_OWVAR 20
1266: PUSH
1267: LD_INT 1
1269: ST_TO_ADDR
// uc_nation := 1 ;
1270: LD_ADDR_OWVAR 21
1274: PUSH
1275: LD_INT 1
1277: ST_TO_ADDR
// if debug then
1278: LD_EXP 1
1282: IFFALSE 1412
// begin for i = 1 to 4 do
1284: LD_ADDR_VAR 0 2
1288: PUSH
1289: DOUBLE
1290: LD_INT 1
1292: DEC
1293: ST_TO_ADDR
1294: LD_INT 4
1296: PUSH
1297: FOR_TO
1298: IFFALSE 1349
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1300: LD_INT 0
1302: PPUSH
1303: LD_INT 1
1305: PPUSH
1306: LD_INT 2
1308: PPUSH
1309: CALL_OW 12
1313: PPUSH
1314: LD_INT 3
1316: PPUSH
1317: CALL_OW 380
// un := CreateHuman ;
1321: LD_ADDR_VAR 0 3
1325: PUSH
1326: CALL_OW 44
1330: ST_TO_ADDR
// others := others ^ un ;
1331: LD_ADDR_VAR 0 5
1335: PUSH
1336: LD_VAR 0 5
1340: PUSH
1341: LD_VAR 0 3
1345: ADD
1346: ST_TO_ADDR
// end ;
1347: GO 1297
1349: POP
1350: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1351: LD_ADDR_VAR 0 6
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 51
1367: PUSH
1368: LD_INT 90
1370: PUSH
1371: LD_INT 504
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 21
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 51
1393: PUSH
1394: LD_INT 80
1396: PUSH
1397: LD_INT 750
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) ) ;
1412: LD_ADDR_EXP 37
1416: PUSH
1417: LD_STRING JMM
1419: PPUSH
1420: LD_EXP 1
1424: NOT
1425: PPUSH
1426: CALL 489 0 2
1430: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
1431: LD_ADDR_EXP 38
1435: PUSH
1436: LD_STRING Bobby
1438: PPUSH
1439: LD_EXP 1
1443: NOT
1444: PPUSH
1445: CALL 489 0 2
1449: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
1450: LD_ADDR_EXP 39
1454: PUSH
1455: LD_STRING Cyrus
1457: PPUSH
1458: LD_EXP 1
1462: NOT
1463: PPUSH
1464: CALL 489 0 2
1468: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
1469: LD_ADDR_EXP 40
1473: PUSH
1474: LD_STRING Lisa
1476: PPUSH
1477: LD_EXP 1
1481: NOT
1482: PPUSH
1483: CALL 489 0 2
1487: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) ) ;
1488: LD_ADDR_EXP 41
1492: PUSH
1493: LD_STRING Khatam
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: CALL 489 0 2
1506: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) ) ;
1507: LD_ADDR_EXP 42
1511: PUSH
1512: LD_STRING Brian
1514: PPUSH
1515: LD_EXP 1
1519: NOT
1520: PPUSH
1521: CALL 489 0 2
1525: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) ) ;
1526: LD_ADDR_EXP 43
1530: PUSH
1531: LD_STRING Jerry
1533: PPUSH
1534: LD_EXP 1
1538: NOT
1539: PPUSH
1540: CALL 489 0 2
1544: ST_TO_ADDR
// if Bobby then
1545: LD_EXP 38
1549: IFFALSE 1580
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1551: LD_ADDR_VAR 0 4
1555: PUSH
1556: LD_VAR 0 4
1560: PPUSH
1561: LD_VAR 0 4
1565: PUSH
1566: LD_INT 1
1568: PLUS
1569: PPUSH
1570: LD_EXP 38
1574: PPUSH
1575: CALL_OW 2
1579: ST_TO_ADDR
// if Cyrus then
1580: LD_EXP 39
1584: IFFALSE 1615
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1586: LD_ADDR_VAR 0 4
1590: PUSH
1591: LD_VAR 0 4
1595: PPUSH
1596: LD_VAR 0 4
1600: PUSH
1601: LD_INT 1
1603: PLUS
1604: PPUSH
1605: LD_EXP 39
1609: PPUSH
1610: CALL_OW 2
1614: ST_TO_ADDR
// if Lisa then
1615: LD_EXP 40
1619: IFFALSE 1650
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1621: LD_ADDR_VAR 0 4
1625: PUSH
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 4
1635: PUSH
1636: LD_INT 1
1638: PLUS
1639: PPUSH
1640: LD_EXP 40
1644: PPUSH
1645: CALL_OW 2
1649: ST_TO_ADDR
// if Khatam then
1650: LD_EXP 41
1654: IFFALSE 1685
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1656: LD_ADDR_VAR 0 4
1660: PUSH
1661: LD_VAR 0 4
1665: PPUSH
1666: LD_VAR 0 4
1670: PUSH
1671: LD_INT 1
1673: PLUS
1674: PPUSH
1675: LD_EXP 41
1679: PPUSH
1680: CALL_OW 2
1684: ST_TO_ADDR
// if Brian then
1685: LD_EXP 42
1689: IFFALSE 1720
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1691: LD_ADDR_VAR 0 4
1695: PUSH
1696: LD_VAR 0 4
1700: PPUSH
1701: LD_VAR 0 4
1705: PUSH
1706: LD_INT 1
1708: PLUS
1709: PPUSH
1710: LD_EXP 42
1714: PPUSH
1715: CALL_OW 2
1719: ST_TO_ADDR
// if Jerry then
1720: LD_EXP 43
1724: IFFALSE 1755
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1726: LD_ADDR_VAR 0 4
1730: PUSH
1731: LD_VAR 0 4
1735: PPUSH
1736: LD_VAR 0 4
1740: PUSH
1741: LD_INT 1
1743: PLUS
1744: PPUSH
1745: LD_EXP 43
1749: PPUSH
1750: CALL_OW 2
1754: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1755: LD_STRING 02_other_survivors
1757: PPUSH
1758: CALL_OW 28
1762: IFFALSE 1777
// others := CreateCharacterSet ( 02_other_survivors ) ;
1764: LD_ADDR_VAR 0 5
1768: PUSH
1769: LD_STRING 02_other_survivors
1771: PPUSH
1772: CALL_OW 31
1776: ST_TO_ADDR
// if others then
1777: LD_VAR 0 5
1781: IFFALSE 1806
// begin tmp := tmp ^ others ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_VAR 0 4
1792: PUSH
1793: LD_VAR 0 5
1797: ADD
1798: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1799: LD_STRING 02_other_survivors
1801: PPUSH
1802: CALL_OW 40
// end ; jmm_units := tmp ;
1806: LD_ADDR_EXP 4
1810: PUSH
1811: LD_VAR 0 4
1815: ST_TO_ADDR
// if not vehicles then
1816: LD_VAR 0 6
1820: NOT
1821: IFFALSE 1839
// vehicles := LoadVariable ( 02_tanks_1 , 0 ) ;
1823: LD_ADDR_VAR 0 6
1827: PUSH
1828: LD_STRING 02_tanks_1
1830: PPUSH
1831: LD_INT 0
1833: PPUSH
1834: CALL_OW 30
1838: ST_TO_ADDR
// if vehicles then
1839: LD_VAR 0 6
1843: IFFALSE 2037
// begin got_mech := false ;
1845: LD_ADDR_VAR 0 7
1849: PUSH
1850: LD_INT 0
1852: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
1853: LD_VAR 0 4
1857: PPUSH
1858: LD_INT 25
1860: PUSH
1861: LD_INT 3
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PPUSH
1868: CALL_OW 72
1872: IFFALSE 1882
// got_mech := true ;
1874: LD_ADDR_VAR 0 7
1878: PUSH
1879: LD_INT 1
1881: ST_TO_ADDR
// for i = 1 to vehicles do
1882: LD_ADDR_VAR 0 2
1886: PUSH
1887: DOUBLE
1888: LD_INT 1
1890: DEC
1891: ST_TO_ADDR
1892: LD_VAR 0 6
1896: PUSH
1897: FOR_TO
1898: IFFALSE 2035
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
1900: LD_ADDR_VAR 0 3
1904: PUSH
1905: LD_INT 1
1907: PPUSH
1908: LD_INT 3
1910: PPUSH
1911: LD_VAR 0 6
1915: PUSH
1916: LD_VAR 0 2
1920: ARRAY
1921: PUSH
1922: LD_INT 1
1924: ARRAY
1925: PPUSH
1926: LD_VAR 0 6
1930: PUSH
1931: LD_VAR 0 2
1935: ARRAY
1936: PUSH
1937: LD_INT 2
1939: ARRAY
1940: PPUSH
1941: LD_VAR 0 6
1945: PUSH
1946: LD_VAR 0 2
1950: ARRAY
1951: PUSH
1952: LD_INT 3
1954: ARRAY
1955: PPUSH
1956: LD_VAR 0 6
1960: PUSH
1961: LD_VAR 0 2
1965: ARRAY
1966: PUSH
1967: LD_INT 4
1969: ARRAY
1970: PPUSH
1971: LD_INT 40
1973: PPUSH
1974: CALL 552 0 7
1978: ST_TO_ADDR
// if not got_mech then
1979: LD_VAR 0 7
1983: NOT
1984: IFFALSE 2010
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
1986: LD_VAR 0 3
1990: PPUSH
1991: LD_VAR 0 6
1995: PUSH
1996: LD_VAR 0 2
2000: ARRAY
2001: PUSH
2002: LD_INT 6
2004: ARRAY
2005: PPUSH
2006: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
2010: LD_ADDR_VAR 0 4
2014: PUSH
2015: LD_VAR 0 4
2019: PPUSH
2020: LD_INT 1
2022: PPUSH
2023: LD_VAR 0 3
2027: PPUSH
2028: CALL_OW 2
2032: ST_TO_ADDR
// end ;
2033: GO 1897
2035: POP
2036: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
2037: LD_EXP 37
2041: PPUSH
2042: LD_INT 194
2044: PPUSH
2045: LD_INT 119
2047: PPUSH
2048: LD_INT 0
2050: PPUSH
2051: CALL_OW 48
// if tmp then
2055: LD_VAR 0 4
2059: IFFALSE 2247
// begin for i in tmp do
2061: LD_ADDR_VAR 0 2
2065: PUSH
2066: LD_VAR 0 4
2070: PUSH
2071: FOR_IN
2072: IFFALSE 2245
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2074: LD_VAR 0 2
2078: PPUSH
2079: CALL_OW 257
2083: PUSH
2084: LD_INT 1
2086: NONEQUAL
2087: PUSH
2088: LD_VAR 0 2
2092: PUSH
2093: LD_EXP 41
2097: NONEQUAL
2098: AND
2099: IFFALSE 2113
// SetClass ( i , 1 ) ;
2101: LD_VAR 0 2
2105: PPUSH
2106: LD_INT 1
2108: PPUSH
2109: CALL_OW 336
// if i = Khatam then
2113: LD_VAR 0 2
2117: PUSH
2118: LD_EXP 41
2122: EQUAL
2123: IFFALSE 2137
// SetClass ( i , 4 ) ;
2125: LD_VAR 0 2
2129: PPUSH
2130: LD_INT 4
2132: PPUSH
2133: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2137: LD_ADDR_VAR 0 8
2141: PUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PUSH
2152: LD_INT 21
2154: PUSH
2155: LD_INT 2
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PUSH
2162: LD_INT 58
2164: PUSH
2165: EMPTY
2166: LIST
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: PPUSH
2173: CALL_OW 69
2177: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2178: LD_VAR 0 2
2182: PPUSH
2183: CALL_OW 247
2187: PUSH
2188: LD_INT 1
2190: EQUAL
2191: PUSH
2192: LD_VAR 0 8
2196: AND
2197: IFFALSE 2219
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2199: LD_VAR 0 2
2203: PPUSH
2204: LD_VAR 0 8
2208: PUSH
2209: LD_INT 1
2211: ARRAY
2212: PPUSH
2213: CALL_OW 52
2217: GO 2234
// PlaceUnitArea ( i , startArea , false ) ;
2219: LD_VAR 0 2
2223: PPUSH
2224: LD_INT 1
2226: PPUSH
2227: LD_INT 0
2229: PPUSH
2230: CALL_OW 49
// ComHold ( i ) ;
2234: LD_VAR 0 2
2238: PPUSH
2239: CALL_OW 140
// end ;
2243: GO 2071
2245: POP
2246: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2247: LD_ADDR_EXP 7
2251: PUSH
2252: LD_STRING 02_mikhailStatus_1
2254: PPUSH
2255: LD_INT 0
2257: PPUSH
2258: CALL_OW 30
2262: ST_TO_ADDR
// if not bierezov_exist and not debug then
2263: LD_EXP 7
2267: NOT
2268: PUSH
2269: LD_EXP 1
2273: NOT
2274: AND
2275: IFFALSE 2279
// exit ;
2277: GO 2310
// Bierezov = PrepareUnit ( Mikhail , false ) ;
2279: LD_ADDR_EXP 45
2283: PUSH
2284: LD_STRING Mikhail
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: CALL 489 0 2
2294: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2295: LD_EXP 45
2299: PPUSH
2300: LD_INT 1
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: CALL_OW 49
// end ;
2310: LD_VAR 0 1
2314: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2315: LD_INT 0
2317: PPUSH
2318: PPUSH
2319: PPUSH
2320: PPUSH
// uc_side := 4 ;
2321: LD_ADDR_OWVAR 20
2325: PUSH
2326: LD_INT 4
2328: ST_TO_ADDR
// uc_nation := 1 ;
2329: LD_ADDR_OWVAR 21
2333: PUSH
2334: LD_INT 1
2336: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ) ;
2337: LD_ADDR_EXP 44
2341: PUSH
2342: LD_STRING Cornell
2344: PPUSH
2345: LD_INT 0
2347: PPUSH
2348: CALL 489 0 2
2352: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2353: LD_ADDR_EXP 6
2357: PUSH
2358: LD_INT 9
2360: PUSH
2361: LD_EXP 4
2365: MINUS
2366: ST_TO_ADDR
// tmp := [ ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: EMPTY
2373: ST_TO_ADDR
// if cornel_units < 4 then
2374: LD_EXP 6
2378: PUSH
2379: LD_INT 4
2381: LESS
2382: IFFALSE 2392
// cornel_units := 4 ;
2384: LD_ADDR_EXP 6
2388: PUSH
2389: LD_INT 4
2391: ST_TO_ADDR
// for i = 1 to cornel_units do
2392: LD_ADDR_VAR 0 4
2396: PUSH
2397: DOUBLE
2398: LD_INT 1
2400: DEC
2401: ST_TO_ADDR
2402: LD_EXP 6
2406: PUSH
2407: FOR_TO
2408: IFFALSE 2506
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2410: LD_INT 0
2412: PPUSH
2413: LD_INT 1
2415: PUSH
2416: LD_INT 1
2418: PUSH
2419: LD_INT 1
2421: PUSH
2422: LD_INT 2
2424: PUSH
2425: LD_INT 4
2427: PUSH
2428: EMPTY
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: PUSH
2435: LD_VAR 0 4
2439: PUSH
2440: LD_INT 5
2442: MOD
2443: PUSH
2444: LD_INT 1
2446: PLUS
2447: ARRAY
2448: PPUSH
2449: LD_INT 2
2451: PPUSH
2452: CALL_OW 380
// un := CreateHuman ;
2456: LD_ADDR_VAR 0 3
2460: PUSH
2461: CALL_OW 44
2465: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2466: LD_ADDR_VAR 0 2
2470: PUSH
2471: LD_VAR 0 2
2475: PPUSH
2476: LD_INT 1
2478: PPUSH
2479: LD_VAR 0 3
2483: PPUSH
2484: CALL_OW 2
2488: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2489: LD_VAR 0 3
2493: PPUSH
2494: LD_INT 2
2496: PPUSH
2497: LD_INT 0
2499: PPUSH
2500: CALL_OW 49
// end ;
2504: GO 2407
2506: POP
2507: POP
// cornel_units := tmp ;
2508: LD_ADDR_EXP 6
2512: PUSH
2513: LD_VAR 0 2
2517: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2518: LD_EXP 44
2522: PPUSH
2523: LD_INT 191
2525: PPUSH
2526: LD_INT 106
2528: PPUSH
2529: LD_INT 0
2531: PPUSH
2532: CALL_OW 48
// end ;
2536: LD_VAR 0 1
2540: RET
// export function PrepareWesternBase ; var i ; begin
2541: LD_INT 0
2543: PPUSH
2544: PPUSH
// uc_side := 8 ;
2545: LD_ADDR_OWVAR 20
2549: PUSH
2550: LD_INT 8
2552: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ) ;
2553: LD_ADDR_EXP 47
2557: PUSH
2558: LD_STRING Lynch
2560: PPUSH
2561: LD_INT 0
2563: PPUSH
2564: CALL 489 0 2
2568: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ) ;
2569: LD_ADDR_EXP 48
2573: PUSH
2574: LD_STRING Walker
2576: PPUSH
2577: LD_INT 0
2579: PPUSH
2580: CALL 489 0 2
2584: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ) ;
2585: LD_ADDR_EXP 49
2589: PUSH
2590: LD_STRING Turner
2592: PPUSH
2593: LD_INT 0
2595: PPUSH
2596: CALL 489 0 2
2600: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ) ;
2601: LD_ADDR_EXP 50
2605: PUSH
2606: LD_STRING Jillian
2608: PPUSH
2609: LD_INT 0
2611: PPUSH
2612: CALL 489 0 2
2616: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2617: LD_ADDR_VAR 0 2
2621: PUSH
2622: LD_EXP 47
2626: PUSH
2627: LD_EXP 48
2631: PUSH
2632: LD_EXP 49
2636: PUSH
2637: LD_EXP 50
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: PUSH
2648: FOR_IN
2649: IFFALSE 2677
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
2651: LD_VAR 0 2
2655: PPUSH
2656: LD_INT 3
2658: PPUSH
2659: LD_INT 0
2661: PPUSH
2662: CALL_OW 49
// ComHold ( i ) ;
2666: LD_VAR 0 2
2670: PPUSH
2671: CALL_OW 140
// end ;
2675: GO 2648
2677: POP
2678: POP
// end ;
2679: LD_VAR 0 1
2683: RET
// export function SelectGroup ; var units , selected , i ; begin
2684: LD_INT 0
2686: PPUSH
2687: PPUSH
2688: PPUSH
2689: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
2690: LD_ADDR_VAR 0 2
2694: PUSH
2695: LD_EXP 37
2699: PUSH
2700: LD_INT -3
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_EXP 4
2711: ADD
2712: PUSH
2713: LD_INT -2
2715: PUSH
2716: LD_INT -4
2718: PUSH
2719: LD_EXP 44
2723: PUSH
2724: LD_EXP 45
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: ADD
2735: PUSH
2736: LD_INT -3
2738: PUSH
2739: EMPTY
2740: LIST
2741: ADD
2742: PUSH
2743: LD_EXP 6
2747: ADD
2748: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select five characters to go with you , 4 , 4 , units , [ ] ) ;
2749: LD_ADDR_VAR 0 3
2753: PUSH
2754: LD_EXP 37
2758: PUSH
2759: LD_STRING Select five characters to go with you
2761: PPUSH
2762: LD_INT 4
2764: PPUSH
2765: LD_INT 4
2767: PPUSH
2768: LD_VAR 0 2
2772: PPUSH
2773: EMPTY
2774: PPUSH
2775: CALL_OW 42
2779: ADD
2780: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
2781: LD_ADDR_EXP 6
2785: PUSH
2786: LD_EXP 4
2790: PUSH
2791: LD_EXP 6
2795: UNION
2796: PUSH
2797: LD_VAR 0 3
2801: DIFF
2802: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
2803: LD_ADDR_VAR 0 4
2807: PUSH
2808: LD_EXP 6
2812: PUSH
2813: LD_EXP 45
2817: ADD
2818: PUSH
2819: FOR_IN
2820: IFFALSE 2851
// if GetSide ( i ) = 1 then
2822: LD_VAR 0 4
2826: PPUSH
2827: CALL_OW 255
2831: PUSH
2832: LD_INT 1
2834: EQUAL
2835: IFFALSE 2849
// SetSide ( i , 4 ) ;
2837: LD_VAR 0 4
2841: PPUSH
2842: LD_INT 4
2844: PPUSH
2845: CALL_OW 235
2849: GO 2819
2851: POP
2852: POP
// for i in selected do
2853: LD_ADDR_VAR 0 4
2857: PUSH
2858: LD_VAR 0 3
2862: PUSH
2863: FOR_IN
2864: IFFALSE 2895
// if GetSide ( i ) = 4 then
2866: LD_VAR 0 4
2870: PPUSH
2871: CALL_OW 255
2875: PUSH
2876: LD_INT 4
2878: EQUAL
2879: IFFALSE 2893
// SetSide ( i , 1 ) ;
2881: LD_VAR 0 4
2885: PPUSH
2886: LD_INT 1
2888: PPUSH
2889: CALL_OW 235
2893: GO 2863
2895: POP
2896: POP
// jmm_units := jmm_units diff cornel_units ;
2897: LD_ADDR_EXP 4
2901: PUSH
2902: LD_EXP 4
2906: PUSH
2907: LD_EXP 6
2911: DIFF
2912: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
2913: LD_EXP 38
2917: PPUSH
2918: CALL_OW 255
2922: PUSH
2923: LD_INT 4
2925: EQUAL
2926: IFFALSE 2941
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
2928: LD_EXP 3
2932: PUSH
2933: LD_STRING Bobby
2935: STR
2936: PPUSH
2937: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
2941: LD_EXP 39
2945: PPUSH
2946: CALL_OW 255
2950: PUSH
2951: LD_INT 4
2953: EQUAL
2954: IFFALSE 2969
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
2956: LD_EXP 3
2960: PUSH
2961: LD_STRING Cyrus
2963: STR
2964: PPUSH
2965: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
2969: LD_EXP 40
2973: PPUSH
2974: CALL_OW 255
2978: PUSH
2979: LD_INT 4
2981: EQUAL
2982: IFFALSE 2997
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
2984: LD_EXP 3
2988: PUSH
2989: LD_STRING Lisa
2991: STR
2992: PPUSH
2993: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
2997: LD_EXP 41
3001: PPUSH
3002: CALL_OW 255
3006: PUSH
3007: LD_INT 4
3009: EQUAL
3010: IFFALSE 3025
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
3012: LD_EXP 3
3016: PUSH
3017: LD_STRING Khatam
3019: STR
3020: PPUSH
3021: CALL_OW 40
// if GetSide ( Brian ) = 4 then
3025: LD_EXP 42
3029: PPUSH
3030: CALL_OW 255
3034: PUSH
3035: LD_INT 4
3037: EQUAL
3038: IFFALSE 3053
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3040: LD_EXP 3
3044: PUSH
3045: LD_STRING Brian
3047: STR
3048: PPUSH
3049: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3053: LD_EXP 43
3057: PPUSH
3058: CALL_OW 255
3062: PUSH
3063: LD_INT 4
3065: EQUAL
3066: IFFALSE 3081
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3068: LD_EXP 3
3072: PUSH
3073: LD_STRING Jerry
3075: STR
3076: PPUSH
3077: CALL_OW 40
// end ; end_of_file
3081: LD_VAR 0 1
3085: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3086: LD_INT 0
3088: PPUSH
3089: PPUSH
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
3094: PPUSH
3095: PPUSH
3096: PPUSH
3097: PPUSH
3098: PPUSH
3099: PPUSH
3100: PPUSH
// ru_alert := false ;
3101: LD_ADDR_EXP 60
3105: PUSH
3106: LD_INT 0
3108: ST_TO_ADDR
// ru_produce_list := [ ] ;
3109: LD_ADDR_EXP 57
3113: PUSH
3114: EMPTY
3115: ST_TO_ADDR
// if Difficulty > 1 then
3116: LD_OWVAR 67
3120: PUSH
3121: LD_INT 1
3123: GREATER
3124: IFFALSE 3212
// begin uc_side := 3 ;
3126: LD_ADDR_OWVAR 20
3130: PUSH
3131: LD_INT 3
3133: ST_TO_ADDR
// uc_nation := 3 ;
3134: LD_ADDR_OWVAR 21
3138: PUSH
3139: LD_INT 3
3141: ST_TO_ADDR
// bc_type := b_breastwork ;
3142: LD_ADDR_OWVAR 42
3146: PUSH
3147: LD_INT 31
3149: ST_TO_ADDR
// bc_level := Difficulty ;
3150: LD_ADDR_OWVAR 43
3154: PUSH
3155: LD_OWVAR 67
3159: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3160: LD_INT 22
3162: PPUSH
3163: LD_INT 14
3165: PPUSH
3166: LD_INT 0
3168: PPUSH
3169: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3173: LD_INT 48
3175: PPUSH
3176: LD_INT 46
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3186: LD_INT 86
3188: PPUSH
3189: LD_INT 65
3191: PPUSH
3192: LD_INT 5
3194: PPUSH
3195: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3199: LD_INT 165
3201: PPUSH
3202: LD_INT 73
3204: PPUSH
3205: LD_INT 5
3207: PPUSH
3208: CALL_OW 47
// end ; if Difficulty = 3 then
3212: LD_OWVAR 67
3216: PUSH
3217: LD_INT 3
3219: EQUAL
3220: IFFALSE 3235
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3222: LD_INT 51
3224: PPUSH
3225: LD_INT 3
3227: PPUSH
3228: LD_INT 2
3230: PPUSH
3231: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3235: LD_ADDR_VAR 0 7
3239: PUSH
3240: LD_INT 22
3242: PUSH
3243: LD_INT 3
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PUSH
3250: LD_INT 2
3252: PUSH
3253: LD_INT 30
3255: PUSH
3256: LD_INT 31
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: PUSH
3263: LD_INT 30
3265: PUSH
3266: LD_INT 32
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: LIST
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PPUSH
3282: CALL_OW 69
3286: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3287: LD_ADDR_VAR 0 8
3291: PUSH
3292: LD_INT 22
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: PUSH
3302: LD_INT 30
3304: PUSH
3305: LD_INT 4
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PPUSH
3316: CALL_OW 69
3320: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3321: LD_ADDR_VAR 0 10
3325: PUSH
3326: LD_INT 22
3328: PUSH
3329: LD_INT 3
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: PUSH
3336: LD_INT 30
3338: PUSH
3339: LD_INT 3
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: PPUSH
3350: CALL_OW 69
3354: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3355: LD_ADDR_VAR 0 9
3359: PUSH
3360: LD_INT 22
3362: PUSH
3363: LD_INT 3
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: PUSH
3370: LD_INT 30
3372: PUSH
3373: LD_INT 6
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PPUSH
3384: CALL_OW 69
3388: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3389: LD_ADDR_VAR 0 2
3393: PUSH
3394: LD_INT 22
3396: PUSH
3397: LD_INT 3
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_INT 30
3406: PUSH
3407: LD_INT 1
3409: PUSH
3410: EMPTY
3411: LIST
3412: LIST
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PPUSH
3418: CALL_OW 69
3422: PUSH
3423: FOR_IN
3424: IFFALSE 3468
// begin SetResourceType ( GetBase ( i ) , mat_cans , 5000 ) ;
3426: LD_VAR 0 2
3430: PPUSH
3431: CALL_OW 274
3435: PPUSH
3436: LD_INT 1
3438: PPUSH
3439: LD_INT 5000
3441: PPUSH
3442: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 3000 ) ;
3446: LD_VAR 0 2
3450: PPUSH
3451: CALL_OW 274
3455: PPUSH
3456: LD_INT 2
3458: PPUSH
3459: LD_INT 3000
3461: PPUSH
3462: CALL_OW 277
// end ;
3466: GO 3423
3468: POP
3469: POP
// uc_side := 3 ;
3470: LD_ADDR_OWVAR 20
3474: PUSH
3475: LD_INT 3
3477: ST_TO_ADDR
// uc_nation := 3 ;
3478: LD_ADDR_OWVAR 21
3482: PUSH
3483: LD_INT 3
3485: ST_TO_ADDR
// skill := [ 2 , 3 , 4 ] [ Difficulty ] ;
3486: LD_ADDR_VAR 0 11
3490: PUSH
3491: LD_INT 2
3493: PUSH
3494: LD_INT 3
3496: PUSH
3497: LD_INT 4
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: PUSH
3505: LD_OWVAR 67
3509: ARRAY
3510: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
3511: LD_ADDR_EXP 52
3515: PUSH
3516: LD_STRING Pokryshkin
3518: PPUSH
3519: LD_INT 0
3521: PPUSH
3522: CALL 489 0 2
3526: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3527: LD_EXP 52
3531: PPUSH
3532: LD_INT 63
3534: PPUSH
3535: LD_INT 21
3537: PPUSH
3538: LD_INT 0
3540: PPUSH
3541: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3545: LD_EXP 52
3549: PPUSH
3550: CALL_OW 140
// InitHc ;
3554: CALL_OW 19
// for i in fac do
3558: LD_ADDR_VAR 0 2
3562: PUSH
3563: LD_VAR 0 10
3567: PUSH
3568: FOR_IN
3569: IFFALSE 3622
// begin for j = 1 to 6 do
3571: LD_ADDR_VAR 0 3
3575: PUSH
3576: DOUBLE
3577: LD_INT 1
3579: DEC
3580: ST_TO_ADDR
3581: LD_INT 6
3583: PUSH
3584: FOR_TO
3585: IFFALSE 3618
// begin PrepareHuman ( false , 3 , skill ) ;
3587: LD_INT 0
3589: PPUSH
3590: LD_INT 3
3592: PPUSH
3593: LD_VAR 0 11
3597: PPUSH
3598: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3602: CALL_OW 44
3606: PPUSH
3607: LD_VAR 0 2
3611: PPUSH
3612: CALL_OW 52
// end ;
3616: GO 3584
3618: POP
3619: POP
// end ;
3620: GO 3568
3622: POP
3623: POP
// for i in lab do
3624: LD_ADDR_VAR 0 2
3628: PUSH
3629: LD_VAR 0 9
3633: PUSH
3634: FOR_IN
3635: IFFALSE 3668
// begin PrepareHuman ( false , 4 , skill ) ;
3637: LD_INT 0
3639: PPUSH
3640: LD_INT 4
3642: PPUSH
3643: LD_VAR 0 11
3647: PPUSH
3648: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3652: CALL_OW 44
3656: PPUSH
3657: LD_VAR 0 2
3661: PPUSH
3662: CALL_OW 52
// end ;
3666: GO 3634
3668: POP
3669: POP
// for i in tw do
3670: LD_ADDR_VAR 0 2
3674: PUSH
3675: LD_VAR 0 7
3679: PUSH
3680: FOR_IN
3681: IFFALSE 3730
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
3683: LD_VAR 0 2
3687: PPUSH
3688: LD_INT 42
3690: PUSH
3691: LD_INT 43
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 1
3700: PPUSH
3701: LD_INT 2
3703: PPUSH
3704: CALL_OW 12
3708: ARRAY
3709: PPUSH
3710: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
3714: LD_VAR 0 11
3718: PPUSH
3719: LD_VAR 0 2
3723: PPUSH
3724: CALL 830 0 2
// end ;
3728: GO 3680
3730: POP
3731: POP
// for i in bar do
3732: LD_ADDR_VAR 0 2
3736: PUSH
3737: LD_VAR 0 8
3741: PUSH
3742: FOR_IN
3743: IFFALSE 3776
// begin PrepareHuman ( false , 1 , skill ) ;
3745: LD_INT 0
3747: PPUSH
3748: LD_INT 1
3750: PPUSH
3751: LD_VAR 0 11
3755: PPUSH
3756: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3760: CALL_OW 44
3764: PPUSH
3765: LD_VAR 0 2
3769: PPUSH
3770: CALL_OW 52
// end ;
3774: GO 3742
3776: POP
3777: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
3778: LD_ADDR_VAR 0 13
3782: PUSH
3783: LD_INT 100
3785: PUSH
3786: LD_INT 9
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: PUSH
3793: LD_INT 135
3795: PUSH
3796: LD_INT 60
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PUSH
3803: LD_INT 41
3805: PUSH
3806: LD_INT 6
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: PUSH
3813: LD_INT 22
3815: PUSH
3816: LD_INT 9
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 84
3825: PUSH
3826: LD_INT 14
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: ST_TO_ADDR
// vehicles := [ ] ;
3840: LD_ADDR_VAR 0 12
3844: PUSH
3845: EMPTY
3846: ST_TO_ADDR
// for i in spot_xy do
3847: LD_ADDR_VAR 0 2
3851: PUSH
3852: LD_VAR 0 13
3856: PUSH
3857: FOR_IN
3858: IFFALSE 4016
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
3860: LD_ADDR_VAR 0 6
3864: PUSH
3865: LD_INT 3
3867: PPUSH
3868: LD_INT 3
3870: PPUSH
3871: LD_INT 22
3873: PPUSH
3874: LD_INT 1
3876: PPUSH
3877: LD_INT 1
3879: PPUSH
3880: LD_INT 42
3882: PUSH
3883: LD_INT 43
3885: PUSH
3886: LD_INT 44
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: LIST
3893: PUSH
3894: LD_INT 1
3896: PPUSH
3897: LD_INT 3
3899: PPUSH
3900: CALL_OW 12
3904: ARRAY
3905: PPUSH
3906: LD_INT 100
3908: PPUSH
3909: CALL 552 0 7
3913: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
3914: LD_ADDR_VAR 0 12
3918: PUSH
3919: LD_VAR 0 12
3923: PPUSH
3924: LD_VAR 0 12
3928: PUSH
3929: LD_INT 1
3931: PLUS
3932: PPUSH
3933: LD_VAR 0 6
3937: PPUSH
3938: CALL_OW 2
3942: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3943: LD_VAR 0 6
3947: PPUSH
3948: LD_INT 3
3950: PPUSH
3951: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
3955: LD_VAR 0 6
3959: PPUSH
3960: LD_VAR 0 2
3964: PUSH
3965: LD_INT 1
3967: ARRAY
3968: PPUSH
3969: LD_VAR 0 2
3973: PUSH
3974: LD_INT 2
3976: ARRAY
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
3985: LD_INT 0
3987: PPUSH
3988: LD_INT 3
3990: PPUSH
3991: LD_VAR 0 11
3995: PPUSH
3996: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4000: CALL_OW 44
4004: PPUSH
4005: LD_VAR 0 6
4009: PPUSH
4010: CALL_OW 52
// end ;
4014: GO 3857
4016: POP
4017: POP
// for i = 1 to [ 5 , 7 , 8 ] [ Difficulty ] do
4018: LD_ADDR_VAR 0 2
4022: PUSH
4023: DOUBLE
4024: LD_INT 1
4026: DEC
4027: ST_TO_ADDR
4028: LD_INT 5
4030: PUSH
4031: LD_INT 7
4033: PUSH
4034: LD_INT 8
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: LIST
4041: PUSH
4042: LD_OWVAR 67
4046: ARRAY
4047: PUSH
4048: FOR_TO
4049: IFFALSE 4109
// begin PrepareHuman ( false , 1 , skill ) ;
4051: LD_INT 0
4053: PPUSH
4054: LD_INT 1
4056: PPUSH
4057: LD_VAR 0 11
4061: PPUSH
4062: CALL_OW 380
// un := CreateHuman ;
4066: LD_ADDR_VAR 0 5
4070: PUSH
4071: CALL_OW 44
4075: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4076: LD_VAR 0 5
4080: PPUSH
4081: LD_INT 11
4083: PPUSH
4084: LD_INT 0
4086: PPUSH
4087: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4091: LD_ADDR_EXP 55
4095: PUSH
4096: LD_EXP 55
4100: PUSH
4101: LD_VAR 0 5
4105: ADD
4106: ST_TO_ADDR
// end ;
4107: GO 4048
4109: POP
4110: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4111: LD_ADDR_VAR 0 2
4115: PUSH
4116: DOUBLE
4117: LD_INT 1
4119: DEC
4120: ST_TO_ADDR
4121: LD_INT 2
4123: PUSH
4124: LD_INT 3
4126: PUSH
4127: LD_INT 4
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: LIST
4134: PUSH
4135: LD_OWVAR 67
4139: ARRAY
4140: PUSH
4141: FOR_TO
4142: IFFALSE 4202
// begin PrepareHuman ( false , 1 , skill ) ;
4144: LD_INT 0
4146: PPUSH
4147: LD_INT 1
4149: PPUSH
4150: LD_VAR 0 11
4154: PPUSH
4155: CALL_OW 380
// un := CreateHuman ;
4159: LD_ADDR_VAR 0 5
4163: PUSH
4164: CALL_OW 44
4168: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4169: LD_VAR 0 5
4173: PPUSH
4174: LD_INT 12
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4184: LD_ADDR_EXP 53
4188: PUSH
4189: LD_EXP 53
4193: PUSH
4194: LD_VAR 0 5
4198: ADD
4199: ST_TO_ADDR
// end ;
4200: GO 4141
4202: POP
4203: POP
// for i = 1 to 2 do
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: DOUBLE
4210: LD_INT 1
4212: DEC
4213: ST_TO_ADDR
4214: LD_INT 2
4216: PUSH
4217: FOR_TO
4218: IFFALSE 4284
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 1
4225: PPUSH
4226: LD_VAR 0 11
4230: PPUSH
4231: CALL_OW 380
// un := CreateHuman ;
4235: LD_ADDR_VAR 0 5
4239: PUSH
4240: CALL_OW 44
4244: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4245: LD_VAR 0 5
4249: PPUSH
4250: LD_INT 39
4252: PPUSH
4253: LD_INT 12
4255: PPUSH
4256: LD_INT 3
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4266: LD_ADDR_EXP 54
4270: PUSH
4271: LD_EXP 54
4275: PUSH
4276: LD_VAR 0 5
4280: ADD
4281: ST_TO_ADDR
// end ;
4282: GO 4217
4284: POP
4285: POP
// for i = 1 to 3 do
4286: LD_ADDR_VAR 0 2
4290: PUSH
4291: DOUBLE
4292: LD_INT 1
4294: DEC
4295: ST_TO_ADDR
4296: LD_INT 3
4298: PUSH
4299: FOR_TO
4300: IFFALSE 4366
// begin PrepareHuman ( false , 1 , skill ) ;
4302: LD_INT 0
4304: PPUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_VAR 0 11
4312: PPUSH
4313: CALL_OW 380
// un := CreateHuman ;
4317: LD_ADDR_VAR 0 5
4321: PUSH
4322: CALL_OW 44
4326: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4327: LD_VAR 0 5
4331: PPUSH
4332: LD_INT 180
4334: PPUSH
4335: LD_INT 11
4337: PPUSH
4338: LD_INT 4
4340: PPUSH
4341: LD_INT 0
4343: PPUSH
4344: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4348: LD_ADDR_EXP 58
4352: PUSH
4353: LD_EXP 58
4357: PUSH
4358: LD_VAR 0 5
4362: ADD
4363: ST_TO_ADDR
// end ;
4364: GO 4299
4366: POP
4367: POP
// ru_vehicles := vehicles ;
4368: LD_ADDR_EXP 56
4372: PUSH
4373: LD_VAR 0 12
4377: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4378: LD_ADDR_EXP 59
4382: PUSH
4383: LD_INT 131
4385: PUSH
4386: LD_INT 121
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: LD_INT 113
4395: PUSH
4396: LD_INT 90
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: LD_INT 93
4405: PUSH
4406: LD_INT 62
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: PUSH
4418: LD_INT 106
4420: PUSH
4421: LD_INT 54
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: PUSH
4428: LD_INT 120
4430: PUSH
4431: LD_INT 80
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: PUSH
4438: LD_INT 143
4440: PUSH
4441: LD_INT 120
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: LIST
4452: PUSH
4453: LD_INT 154
4455: PUSH
4456: LD_INT 116
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 140
4465: PUSH
4466: LD_INT 93
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 130
4475: PUSH
4476: LD_INT 58
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: PUSH
4488: LD_INT 105
4490: PUSH
4491: LD_INT 106
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: PUSH
4498: LD_INT 134
4500: PUSH
4501: LD_INT 98
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: PUSH
4508: LD_INT 159
4510: PUSH
4511: LD_INT 113
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: ST_TO_ADDR
// if Difficulty = 1 then
4529: LD_OWVAR 67
4533: PUSH
4534: LD_INT 1
4536: EQUAL
4537: IFFALSE 4541
// exit ;
4539: GO 4596
// for i = 1 to Difficulty - 1 do
4541: LD_ADDR_VAR 0 2
4545: PUSH
4546: DOUBLE
4547: LD_INT 1
4549: DEC
4550: ST_TO_ADDR
4551: LD_OWVAR 67
4555: PUSH
4556: LD_INT 1
4558: MINUS
4559: PUSH
4560: FOR_TO
4561: IFFALSE 4594
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
4563: LD_ADDR_EXP 57
4567: PUSH
4568: LD_EXP 57
4572: PUSH
4573: LD_INT 22
4575: PUSH
4576: LD_INT 1
4578: PUSH
4579: LD_INT 1
4581: PUSH
4582: LD_INT 43
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: ADD
4591: ST_TO_ADDR
4592: GO 4560
4594: POP
4595: POP
// end ;
4596: LD_VAR 0 1
4600: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
4601: LD_INT 22
4603: PUSH
4604: LD_INT 3
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: LD_INT 21
4613: PUSH
4614: LD_INT 2
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: PPUSH
4625: CALL_OW 69
4629: IFFALSE 4723
4631: GO 4633
4633: DISABLE
4634: LD_INT 0
4636: PPUSH
4637: PPUSH
// begin enable ;
4638: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4639: LD_ADDR_VAR 0 2
4643: PUSH
4644: LD_INT 22
4646: PUSH
4647: LD_INT 3
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: PUSH
4654: LD_INT 21
4656: PUSH
4657: LD_INT 2
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PPUSH
4668: CALL_OW 69
4672: ST_TO_ADDR
// if filter then
4673: LD_VAR 0 2
4677: IFFALSE 4723
// for i in filter do
4679: LD_ADDR_VAR 0 1
4683: PUSH
4684: LD_VAR 0 2
4688: PUSH
4689: FOR_IN
4690: IFFALSE 4721
// if GetFuel ( i ) < 20 then
4692: LD_VAR 0 1
4696: PPUSH
4697: CALL_OW 261
4701: PUSH
4702: LD_INT 20
4704: LESS
4705: IFFALSE 4719
// SetFuel ( i , 20 ) ;
4707: LD_VAR 0 1
4711: PPUSH
4712: LD_INT 20
4714: PPUSH
4715: CALL_OW 240
4719: GO 4689
4721: POP
4722: POP
// end ;
4723: PPOPN 2
4725: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
4726: LD_EXP 57
4730: IFFALSE 4949
4732: GO 4734
4734: DISABLE
4735: LD_INT 0
4737: PPUSH
4738: PPUSH
4739: PPUSH
// begin enable ;
4740: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4741: LD_ADDR_VAR 0 2
4745: PUSH
4746: LD_INT 22
4748: PUSH
4749: LD_INT 3
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: PUSH
4756: LD_INT 30
4758: PUSH
4759: LD_INT 3
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: PPUSH
4770: CALL_OW 69
4774: ST_TO_ADDR
// can_produce := [ ] ;
4775: LD_ADDR_VAR 0 3
4779: PUSH
4780: EMPTY
4781: ST_TO_ADDR
// if not fac then
4782: LD_VAR 0 2
4786: NOT
4787: IFFALSE 4792
// begin disable ;
4789: DISABLE
// exit ;
4790: GO 4949
// end ; for i in fac do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_VAR 0 2
4801: PUSH
4802: FOR_IN
4803: IFFALSE 4841
// if UnitsInside ( i ) then
4805: LD_VAR 0 1
4809: PPUSH
4810: CALL_OW 313
4814: IFFALSE 4839
// can_produce := Insert ( can_produce , 1 , i ) ;
4816: LD_ADDR_VAR 0 3
4820: PUSH
4821: LD_VAR 0 3
4825: PPUSH
4826: LD_INT 1
4828: PPUSH
4829: LD_VAR 0 1
4833: PPUSH
4834: CALL_OW 2
4838: ST_TO_ADDR
4839: GO 4802
4841: POP
4842: POP
// if not can_produce then
4843: LD_VAR 0 3
4847: NOT
4848: IFFALSE 4852
// exit ;
4850: GO 4949
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
4852: LD_VAR 0 3
4856: PUSH
4857: LD_INT 1
4859: PPUSH
4860: LD_VAR 0 3
4864: PPUSH
4865: CALL_OW 12
4869: ARRAY
4870: PPUSH
4871: LD_EXP 57
4875: PUSH
4876: LD_INT 1
4878: ARRAY
4879: PPUSH
4880: LD_EXP 57
4884: PUSH
4885: LD_INT 2
4887: ARRAY
4888: PPUSH
4889: LD_EXP 57
4893: PUSH
4894: LD_INT 3
4896: ARRAY
4897: PPUSH
4898: LD_EXP 57
4902: PUSH
4903: LD_INT 4
4905: ARRAY
4906: PPUSH
4907: CALL_OW 125
// for i = 1 to 4 do
4911: LD_ADDR_VAR 0 1
4915: PUSH
4916: DOUBLE
4917: LD_INT 1
4919: DEC
4920: ST_TO_ADDR
4921: LD_INT 4
4923: PUSH
4924: FOR_TO
4925: IFFALSE 4947
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
4927: LD_ADDR_EXP 57
4931: PUSH
4932: LD_EXP 57
4936: PPUSH
4937: LD_INT 1
4939: PPUSH
4940: CALL_OW 3
4944: ST_TO_ADDR
4945: GO 4924
4947: POP
4948: POP
// end ;
4949: PPOPN 3
4951: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
4952: LD_INT 0
4954: PPUSH
4955: PPUSH
4956: PPUSH
// for i = 1 to [ 3 , 5 , 6 ] [ Difficulty ] do
4957: LD_ADDR_VAR 0 2
4961: PUSH
4962: DOUBLE
4963: LD_INT 1
4965: DEC
4966: ST_TO_ADDR
4967: LD_INT 3
4969: PUSH
4970: LD_INT 5
4972: PUSH
4973: LD_INT 6
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: PUSH
4981: LD_OWVAR 67
4985: ARRAY
4986: PUSH
4987: FOR_TO
4988: IFFALSE 5137
// begin PrepareHuman ( false , 3 , 3 ) ;
4990: LD_INT 0
4992: PPUSH
4993: LD_INT 3
4995: PPUSH
4996: LD_INT 3
4998: PPUSH
4999: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
5003: LD_ADDR_VAR 0 3
5007: PUSH
5008: LD_INT 3
5010: PPUSH
5011: LD_INT 3
5013: PPUSH
5014: LD_INT 22
5016: PPUSH
5017: LD_INT 1
5019: PPUSH
5020: LD_INT 1
5022: PPUSH
5023: LD_INT 43
5025: PUSH
5026: LD_INT 42
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: PUSH
5033: LD_INT 1
5035: PPUSH
5036: LD_INT 2
5038: PPUSH
5039: CALL_OW 12
5043: ARRAY
5044: PPUSH
5045: LD_INT 70
5047: PPUSH
5048: CALL 552 0 7
5052: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5053: LD_VAR 0 3
5057: PPUSH
5058: LD_INT 4
5060: PPUSH
5061: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5065: LD_VAR 0 3
5069: PPUSH
5070: LD_INT 229
5072: PPUSH
5073: LD_INT 44
5075: PPUSH
5076: LD_INT 0
5078: PPUSH
5079: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5083: CALL_OW 44
5087: PPUSH
5088: LD_VAR 0 3
5092: PPUSH
5093: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5097: LD_ADDR_EXP 56
5101: PUSH
5102: LD_EXP 56
5106: PUSH
5107: LD_VAR 0 3
5111: ADD
5112: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5113: LD_VAR 0 3
5117: PPUSH
5118: LD_INT 191
5120: PPUSH
5121: LD_INT 32
5123: PPUSH
5124: CALL_OW 111
// Wait ( 0 0$02 ) ;
5128: LD_INT 70
5130: PPUSH
5131: CALL_OW 67
// end ;
5135: GO 4987
5137: POP
5138: POP
// end ;
5139: LD_VAR 0 1
5143: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5144: LD_EXP 31
5148: PUSH
5149: LD_EXP 56
5153: AND
5154: IFFALSE 5328
5156: GO 5158
5158: DISABLE
5159: LD_INT 0
5161: PPUSH
5162: PPUSH
5163: PPUSH
// begin wait ( 0 0$50 ) ;
5164: LD_INT 1750
5166: PPUSH
5167: CALL_OW 67
// tmp := ru_vehicles ;
5171: LD_ADDR_VAR 0 3
5175: PUSH
5176: LD_EXP 56
5180: ST_TO_ADDR
// if not tmp then
5181: LD_VAR 0 3
5185: NOT
5186: IFFALSE 5190
// exit ;
5188: GO 5328
// repeat wait ( 0 0$1 ) ;
5190: LD_INT 35
5192: PPUSH
5193: CALL_OW 67
// for i in tmp do
5197: LD_ADDR_VAR 0 1
5201: PUSH
5202: LD_VAR 0 3
5206: PUSH
5207: FOR_IN
5208: IFFALSE 5319
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5210: LD_ADDR_VAR 0 2
5214: PUSH
5215: LD_INT 22
5217: PUSH
5218: LD_INT 1
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PPUSH
5225: LD_VAR 0 1
5229: PPUSH
5230: CALL_OW 74
5234: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5235: LD_VAR 0 1
5239: PPUSH
5240: LD_VAR 0 2
5244: PPUSH
5245: CALL_OW 296
5249: PUSH
5250: LD_INT 10
5252: GREATER
5253: IFFALSE 5272
// ComAgressiveMove ( i , 69 , 101 ) else
5255: LD_VAR 0 1
5259: PPUSH
5260: LD_INT 69
5262: PPUSH
5263: LD_INT 101
5265: PPUSH
5266: CALL_OW 114
5270: GO 5286
// ComAttackUnit ( i , enemy ) ;
5272: LD_VAR 0 1
5276: PPUSH
5277: LD_VAR 0 2
5281: PPUSH
5282: CALL_OW 115
// if GetLives ( i ) < 250 then
5286: LD_VAR 0 1
5290: PPUSH
5291: CALL_OW 256
5295: PUSH
5296: LD_INT 250
5298: LESS
5299: IFFALSE 5317
// tmp := tmp diff i ;
5301: LD_ADDR_VAR 0 3
5305: PUSH
5306: LD_VAR 0 3
5310: PUSH
5311: LD_VAR 0 1
5315: DIFF
5316: ST_TO_ADDR
// end ;
5317: GO 5207
5319: POP
5320: POP
// until not tmp ;
5321: LD_VAR 0 3
5325: NOT
5326: IFFALSE 5190
// end ; end_of_file
5328: PPOPN 3
5330: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5331: LD_INT 0
5333: PPUSH
5334: PPUSH
5335: PPUSH
5336: PPUSH
5337: PPUSH
5338: PPUSH
5339: PPUSH
// InGameOn ;
5340: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5344: LD_EXP 37
5348: PPUSH
5349: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5353: LD_EXP 37
5357: PPUSH
5358: LD_EXP 44
5362: PPUSH
5363: CALL_OW 119
// if Bierezov then
5367: LD_EXP 45
5371: IFFALSE 5387
// ComTurnUnit ( Bierezov , Cornel ) ;
5373: LD_EXP 45
5377: PPUSH
5378: LD_EXP 44
5382: PPUSH
5383: CALL_OW 119
// for i in jmm_units do
5387: LD_ADDR_VAR 0 2
5391: PUSH
5392: LD_EXP 4
5396: PUSH
5397: FOR_IN
5398: IFFALSE 5416
// ComTurnUnit ( i , Cornel ) ;
5400: LD_VAR 0 2
5404: PPUSH
5405: LD_EXP 44
5409: PPUSH
5410: CALL_OW 119
5414: GO 5397
5416: POP
5417: POP
// units := cornel_units union Cornel ;
5418: LD_ADDR_VAR 0 3
5422: PUSH
5423: LD_EXP 6
5427: PUSH
5428: LD_EXP 44
5432: UNION
5433: ST_TO_ADDR
// repeat wait ( 1 ) ;
5434: LD_INT 1
5436: PPUSH
5437: CALL_OW 67
// for i in units do
5441: LD_ADDR_VAR 0 2
5445: PUSH
5446: LD_VAR 0 3
5450: PUSH
5451: FOR_IN
5452: IFFALSE 5485
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5454: LD_VAR 0 2
5458: PPUSH
5459: LD_EXP 37
5463: PPUSH
5464: CALL_OW 250
5468: PPUSH
5469: LD_EXP 37
5473: PPUSH
5474: CALL_OW 251
5478: PPUSH
5479: CALL_OW 111
5483: GO 5451
5485: POP
5486: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5487: LD_VAR 0 3
5491: PPUSH
5492: LD_INT 92
5494: PUSH
5495: LD_EXP 37
5499: PPUSH
5500: CALL_OW 250
5504: PUSH
5505: LD_EXP 37
5509: PPUSH
5510: CALL_OW 251
5514: PUSH
5515: LD_INT 10
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: PPUSH
5524: CALL_OW 72
5528: PUSH
5529: LD_VAR 0 3
5533: EQUAL
5534: IFFALSE 5434
// for i in units do
5536: LD_ADDR_VAR 0 2
5540: PUSH
5541: LD_VAR 0 3
5545: PUSH
5546: FOR_IN
5547: IFFALSE 5565
// ComTurnUnit ( i , JMM ) ;
5549: LD_VAR 0 2
5553: PPUSH
5554: LD_EXP 37
5558: PPUSH
5559: CALL_OW 119
5563: GO 5546
5565: POP
5566: POP
// ComTurnUnit ( Cornel , JMM ) ;
5567: LD_EXP 44
5571: PPUSH
5572: LD_EXP 37
5576: PPUSH
5577: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
5581: LD_EXP 37
5585: PPUSH
5586: LD_STRING D1-JMM-1
5588: PPUSH
5589: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
5593: LD_EXP 44
5597: PPUSH
5598: LD_STRING D1-Corn-1
5600: PPUSH
5601: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
5605: LD_EXP 37
5609: PPUSH
5610: LD_EXP 44
5614: PPUSH
5615: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
5619: LD_EXP 44
5623: PPUSH
5624: LD_EXP 37
5628: PPUSH
5629: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
5633: LD_INT 35
5635: PPUSH
5636: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
5640: LD_EXP 37
5644: PPUSH
5645: LD_EXP 44
5649: PPUSH
5650: CALL_OW 296
5654: PUSH
5655: LD_INT 6
5657: LESS
5658: IFFALSE 5633
// ChangeSideFog ( 4 , 1 ) ;
5660: LD_INT 4
5662: PPUSH
5663: LD_INT 1
5665: PPUSH
5666: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
5670: LD_EXP 37
5674: PPUSH
5675: LD_EXP 44
5679: PPUSH
5680: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5684: LD_EXP 44
5688: PPUSH
5689: LD_EXP 37
5693: PPUSH
5694: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
5698: LD_EXP 37
5702: PPUSH
5703: LD_STRING D1-JMM-2
5705: PPUSH
5706: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
5710: LD_EXP 37
5714: PPUSH
5715: LD_STRING D1-JMM-2a
5717: PPUSH
5718: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
5722: LD_EXP 44
5726: PPUSH
5727: LD_STRING D1-Corn-2
5729: PPUSH
5730: CALL_OW 88
// if bierezov_exist or debug then
5734: LD_EXP 7
5738: PUSH
5739: LD_EXP 1
5743: OR
5744: IFFALSE 5985
// begin ComTurnUnit ( Cornel , Bierezov ) ;
5746: LD_EXP 44
5750: PPUSH
5751: LD_EXP 45
5755: PPUSH
5756: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
5760: LD_INT 10
5762: PPUSH
5763: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
5767: LD_EXP 44
5771: PPUSH
5772: LD_STRING D1a-Corn-1
5774: PPUSH
5775: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
5779: LD_EXP 37
5783: PPUSH
5784: LD_EXP 45
5788: PPUSH
5789: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
5793: LD_EXP 45
5797: PPUSH
5798: LD_EXP 37
5802: PPUSH
5803: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
5807: LD_EXP 37
5811: PPUSH
5812: LD_STRING D1a-JMM-1
5814: PPUSH
5815: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
5819: LD_EXP 37
5823: PPUSH
5824: LD_EXP 44
5828: PPUSH
5829: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5833: LD_EXP 44
5837: PPUSH
5838: LD_EXP 37
5842: PPUSH
5843: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
5847: LD_EXP 44
5851: PPUSH
5852: LD_STRING D1a-Corn-2
5854: PPUSH
5855: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
5859: LD_EXP 37
5863: PPUSH
5864: LD_STRING D1a-JMM-2
5866: PPUSH
5867: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
5871: LD_EXP 44
5875: PPUSH
5876: LD_STRING D1a-Corn-3
5878: PPUSH
5879: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
5883: LD_EXP 37
5887: PPUSH
5888: LD_STRING D1a-JMM-3
5890: PPUSH
5891: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
5895: LD_EXP 44
5899: PPUSH
5900: LD_STRING D1a-Corn-4
5902: PPUSH
5903: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
5907: LD_EXP 37
5911: PPUSH
5912: LD_STRING D1a-JMM-4
5914: PPUSH
5915: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
5919: LD_EXP 44
5923: PPUSH
5924: LD_STRING D1a-Corn-5
5926: PPUSH
5927: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
5931: LD_EXP 45
5935: PPUSH
5936: LD_EXP 44
5940: PPUSH
5941: CALL_OW 250
5945: PPUSH
5946: LD_EXP 44
5950: PPUSH
5951: CALL_OW 251
5955: PUSH
5956: LD_INT 2
5958: MINUS
5959: PPUSH
5960: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
5964: LD_EXP 45
5968: PPUSH
5969: LD_EXP 44
5973: PPUSH
5974: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
5978: LD_INT 10
5980: PPUSH
5981: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
5985: LD_EXP 37
5989: PPUSH
5990: LD_STRING D1b-JMM-1
5992: PPUSH
5993: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
5997: LD_EXP 44
6001: PPUSH
6002: LD_STRING D1b-Corn-1
6004: PPUSH
6005: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6009: LD_EXP 37
6013: PPUSH
6014: LD_STRING D1b-JMM-2
6016: PPUSH
6017: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6021: LD_EXP 44
6025: PPUSH
6026: LD_STRING D1b-Corn-2
6028: PPUSH
6029: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6033: LD_EXP 37
6037: PPUSH
6038: LD_STRING D1b-JMM-3
6040: PPUSH
6041: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6045: LD_INT 10
6047: PPUSH
6048: CALL_OW 67
// SayRadio ( Powell , D1b-Pow-3 ) ;
6052: LD_EXP 46
6056: PPUSH
6057: LD_STRING D1b-Pow-3
6059: PPUSH
6060: CALL_OW 94
// Say ( JMM , D1b-JMM-4 ) ;
6064: LD_EXP 37
6068: PPUSH
6069: LD_STRING D1b-JMM-4
6071: PPUSH
6072: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6076: LD_EXP 44
6080: PPUSH
6081: LD_STRING D1b-Corn-4
6083: PPUSH
6084: CALL_OW 88
// if Khatam then
6088: LD_EXP 41
6092: IFFALSE 6108
// Say ( Khatam , D1b-Khat-4 ) else
6094: LD_EXP 41
6098: PPUSH
6099: LD_STRING D1b-Khat-4
6101: PPUSH
6102: CALL_OW 88
6106: GO 6144
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6108: LD_EXP 6
6112: PPUSH
6113: LD_INT 26
6115: PUSH
6116: LD_INT 1
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PPUSH
6123: CALL_OW 72
6127: PUSH
6128: LD_EXP 44
6132: PUSH
6133: EMPTY
6134: LIST
6135: DIFF
6136: PPUSH
6137: LD_STRING D1b-Sol1-4
6139: PPUSH
6140: CALL 640 0 2
// if Cyrus then
6144: LD_EXP 39
6148: IFFALSE 6162
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6150: LD_EXP 39
6154: PPUSH
6155: LD_STRING D1b-Cyrus-4
6157: PPUSH
6158: CALL_OW 88
// if Lisa then
6162: LD_EXP 40
6166: IFFALSE 6224
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6168: LD_EXP 40
6172: PPUSH
6173: LD_STRING D1b-Lisa-4
6175: PPUSH
6176: CALL_OW 88
// if Cyrus then
6180: LD_EXP 39
6184: IFFALSE 6224
// begin if not IsInUnit ( Cyrus ) then
6186: LD_EXP 39
6190: PPUSH
6191: CALL_OW 310
6195: NOT
6196: IFFALSE 6212
// ComTurnUnit ( Cyrus , Lisa ) ;
6198: LD_EXP 39
6202: PPUSH
6203: LD_EXP 40
6207: PPUSH
6208: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6212: LD_EXP 39
6216: PPUSH
6217: LD_STRING D1b-Cyrus-5
6219: PPUSH
6220: CALL_OW 88
// end ; end ; SelectGroup ;
6224: CALL 2684 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6228: LD_EXP 37
6232: PPUSH
6233: LD_STRING D1d-JMM-1
6235: PPUSH
6236: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6240: LD_EXP 44
6244: PPUSH
6245: LD_STRING D1d-Corn-1
6247: PPUSH
6248: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6252: LD_ADDR_VAR 0 2
6256: PUSH
6257: LD_EXP 4
6261: PUSH
6262: LD_EXP 6
6266: ADD
6267: PUSH
6268: LD_EXP 37
6272: ADD
6273: PUSH
6274: FOR_IN
6275: IFFALSE 6288
// ComHold ( i ) ;
6277: LD_VAR 0 2
6281: PPUSH
6282: CALL_OW 140
6286: GO 6274
6288: POP
6289: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6290: LD_ADDR_VAR 0 4
6294: PUSH
6295: LD_INT 22
6297: PUSH
6298: LD_INT 1
6300: PUSH
6301: EMPTY
6302: LIST
6303: LIST
6304: PUSH
6305: LD_INT 21
6307: PUSH
6308: LD_INT 2
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PPUSH
6319: CALL_OW 69
6323: ST_TO_ADDR
// if vehicles then
6324: LD_VAR 0 4
6328: IFFALSE 6666
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6330: LD_EXP 6
6334: PPUSH
6335: LD_INT 55
6337: PUSH
6338: EMPTY
6339: LIST
6340: PPUSH
6341: CALL_OW 72
6345: IFFALSE 6384
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6347: LD_ADDR_VAR 0 2
6351: PUSH
6352: LD_EXP 6
6356: PPUSH
6357: LD_INT 55
6359: PUSH
6360: EMPTY
6361: LIST
6362: PPUSH
6363: CALL_OW 72
6367: PUSH
6368: FOR_IN
6369: IFFALSE 6382
// ComExitVehicle ( i ) ;
6371: LD_VAR 0 2
6375: PPUSH
6376: CALL_OW 121
6380: GO 6368
6382: POP
6383: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6384: LD_ADDR_VAR 0 5
6388: PUSH
6389: LD_VAR 0 4
6393: PPUSH
6394: LD_INT 34
6396: PUSH
6397: LD_INT 51
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PPUSH
6404: CALL_OW 72
6408: ST_TO_ADDR
// if cargos then
6409: LD_VAR 0 5
6413: IFFALSE 6596
// begin vehicles := cargos ;
6415: LD_ADDR_VAR 0 4
6419: PUSH
6420: LD_VAR 0 5
6424: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6425: LD_ADDR_VAR 0 6
6429: PUSH
6430: LD_STRING 02_resources_4
6432: PPUSH
6433: LD_INT 0
6435: PPUSH
6436: CALL_OW 30
6440: ST_TO_ADDR
// if debug and not resources then
6441: LD_EXP 1
6445: PUSH
6446: LD_VAR 0 6
6450: NOT
6451: AND
6452: IFFALSE 6462
// resources := 160 ;
6454: LD_ADDR_VAR 0 6
6458: PUSH
6459: LD_INT 160
6461: ST_TO_ADDR
// if resources mod 10 then
6462: LD_VAR 0 6
6466: PUSH
6467: LD_INT 10
6469: MOD
6470: IFFALSE 6492
// resources := resources - resources mod 10 ;
6472: LD_ADDR_VAR 0 6
6476: PUSH
6477: LD_VAR 0 6
6481: PUSH
6482: LD_VAR 0 6
6486: PUSH
6487: LD_INT 10
6489: MOD
6490: MINUS
6491: ST_TO_ADDR
// if resources then
6492: LD_VAR 0 6
6496: IFFALSE 6596
// for i in cargos do
6498: LD_ADDR_VAR 0 2
6502: PUSH
6503: LD_VAR 0 5
6507: PUSH
6508: FOR_IN
6509: IFFALSE 6594
// begin if resources < 100 then
6511: LD_VAR 0 6
6515: PUSH
6516: LD_INT 100
6518: LESS
6519: IFFALSE 6541
// begin cargo := resources ;
6521: LD_ADDR_VAR 0 7
6525: PUSH
6526: LD_VAR 0 6
6530: ST_TO_ADDR
// resources := 0 ;
6531: LD_ADDR_VAR 0 6
6535: PUSH
6536: LD_INT 0
6538: ST_TO_ADDR
// end else
6539: GO 6563
// begin cargo := 100 ;
6541: LD_ADDR_VAR 0 7
6545: PUSH
6546: LD_INT 100
6548: ST_TO_ADDR
// resources := resources - 100 ;
6549: LD_ADDR_VAR 0 6
6553: PUSH
6554: LD_VAR 0 6
6558: PUSH
6559: LD_INT 100
6561: MINUS
6562: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
6563: LD_VAR 0 2
6567: PPUSH
6568: LD_INT 1
6570: PPUSH
6571: LD_VAR 0 7
6575: PPUSH
6576: CALL_OW 290
// if resources = 0 then
6580: LD_VAR 0 6
6584: PUSH
6585: LD_INT 0
6587: EQUAL
6588: IFFALSE 6592
// break ;
6590: GO 6594
// end ;
6592: GO 6508
6594: POP
6595: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
6596: LD_VAR 0 4
6600: PUSH
6601: LD_INT 1
6603: ARRAY
6604: PPUSH
6605: CALL_OW 311
6609: PPUSH
6610: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
6614: LD_VAR 0 4
6618: PUSH
6619: LD_INT 1
6621: ARRAY
6622: PPUSH
6623: LD_INT 4
6625: PPUSH
6626: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
6630: LD_EXP 44
6634: PPUSH
6635: LD_VAR 0 4
6639: PUSH
6640: LD_INT 1
6642: ARRAY
6643: PPUSH
6644: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
6648: LD_INT 35
6650: PPUSH
6651: CALL_OW 67
// until IsInUnit ( Cornel ) ;
6655: LD_EXP 44
6659: PPUSH
6660: CALL_OW 310
6664: IFFALSE 6648
// end ; InGameOff ;
6666: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6670: LD_STRING M1
6672: PPUSH
6673: CALL_OW 337
// SaveForQuickRestart ;
6677: CALL_OW 22
// cornel_active := true ;
6681: LD_ADDR_EXP 8
6685: PUSH
6686: LD_INT 1
6688: ST_TO_ADDR
// end ;
6689: LD_VAR 0 1
6693: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
6694: LD_EXP 37
6698: PPUSH
6699: LD_EXP 47
6703: PPUSH
6704: CALL_OW 296
6708: PUSH
6709: LD_INT 10
6711: LESS
6712: IFFALSE 8095
6714: GO 6716
6716: DISABLE
6717: LD_INT 0
6719: PPUSH
6720: PPUSH
6721: PPUSH
6722: PPUSH
6723: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
6724: LD_ADDR_VAR 0 2
6728: PUSH
6729: LD_INT 89
6731: PUSH
6732: LD_INT 34
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: LD_INT 138
6741: PUSH
6742: LD_INT 63
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: LD_INT 196
6751: PUSH
6752: LD_INT 84
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 135
6761: PUSH
6762: LD_INT 52
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: LD_INT 103
6771: PUSH
6772: LD_INT 39
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: PUSH
6779: LD_INT 58
6781: PUSH
6782: LD_INT 30
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 38
6791: PUSH
6792: LD_INT 51
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: ST_TO_ADDR
// Video ( true ) ;
6808: LD_INT 1
6810: PPUSH
6811: CALL 1200 0 1
// if jmm_units then
6815: LD_EXP 4
6819: IFFALSE 6895
// for i in jmm_units do
6821: LD_ADDR_VAR 0 1
6825: PUSH
6826: LD_EXP 4
6830: PUSH
6831: FOR_IN
6832: IFFALSE 6893
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
6834: LD_VAR 0 1
6838: PPUSH
6839: LD_EXP 37
6843: PPUSH
6844: CALL_OW 296
6848: PUSH
6849: LD_INT 10
6851: LESS
6852: PUSH
6853: LD_VAR 0 1
6857: PPUSH
6858: CALL_OW 310
6862: NOT
6863: AND
6864: IFFALSE 6882
// ComTurnUnit ( i , JMM ) else
6866: LD_VAR 0 1
6870: PPUSH
6871: LD_EXP 37
6875: PPUSH
6876: CALL_OW 119
6880: GO 6891
// ComHold ( i ) ;
6882: LD_VAR 0 1
6886: PPUSH
6887: CALL_OW 140
// end ;
6891: GO 6831
6893: POP
6894: POP
// if IsInUnit ( JMM ) then
6895: LD_EXP 37
6899: PPUSH
6900: CALL_OW 310
6904: IFFALSE 6929
// begin ComExitVehicle ( JMM ) ;
6906: LD_EXP 37
6910: PPUSH
6911: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
6915: LD_EXP 37
6919: PPUSH
6920: LD_EXP 47
6924: PPUSH
6925: CALL_OW 172
// end ; Wait ( 10 ) ;
6929: LD_INT 10
6931: PPUSH
6932: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
6936: LD_EXP 37
6940: PPUSH
6941: LD_EXP 47
6945: PPUSH
6946: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
6950: LD_INT 35
6952: PPUSH
6953: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
6957: LD_EXP 37
6961: PPUSH
6962: LD_EXP 47
6966: PPUSH
6967: CALL_OW 296
6971: PUSH
6972: LD_INT 6
6974: LESS
6975: IFFALSE 6950
// ComTurnUnit ( JMM , Lynch ) ;
6977: LD_EXP 37
6981: PPUSH
6982: LD_EXP 47
6986: PPUSH
6987: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
6991: LD_ADDR_VAR 0 1
6995: PUSH
6996: LD_EXP 47
7000: PUSH
7001: LD_EXP 48
7005: PUSH
7006: LD_EXP 49
7010: PUSH
7011: LD_EXP 50
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: FOR_IN
7023: IFFALSE 7041
// ComTurnUnit ( i , JMM ) ;
7025: LD_VAR 0 1
7029: PPUSH
7030: LD_EXP 37
7034: PPUSH
7035: CALL_OW 119
7039: GO 7022
7041: POP
7042: POP
// Wait ( 0 0$0.3 ) ;
7043: LD_INT 10
7045: PPUSH
7046: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7050: LD_EXP 37
7054: PPUSH
7055: LD_STRING D2-JMM-1
7057: PPUSH
7058: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7062: LD_EXP 47
7066: PPUSH
7067: LD_STRING D2-Sol1-1
7069: PPUSH
7070: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7074: LD_EXP 37
7078: PPUSH
7079: LD_STRING D2-JMM-2
7081: PPUSH
7082: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7086: LD_EXP 47
7090: PPUSH
7091: LD_STRING D2-Sol1-2
7093: PPUSH
7094: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7098: LD_EXP 37
7102: PPUSH
7103: LD_STRING D2-JMM-3
7105: PPUSH
7106: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7110: LD_EXP 47
7114: PPUSH
7115: LD_STRING D2-Sol1-3
7117: PPUSH
7118: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7122: LD_ADDR_VAR 0 1
7126: PUSH
7127: LD_INT 22
7129: PUSH
7130: LD_INT 8
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PPUSH
7137: CALL_OW 69
7141: PUSH
7142: FOR_IN
7143: IFFALSE 7159
// SetSide ( i , 1 ) ;
7145: LD_VAR 0 1
7149: PPUSH
7150: LD_INT 1
7152: PPUSH
7153: CALL_OW 235
7157: GO 7142
7159: POP
7160: POP
// Say ( JMM , D2-JMM-4 ) ;
7161: LD_EXP 37
7165: PPUSH
7166: LD_STRING D2-JMM-4
7168: PPUSH
7169: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7173: LD_INT 1
7175: PPUSH
7176: LD_INT 5
7178: PPUSH
7179: CALL_OW 332
// for i = 1 to points do
7183: LD_ADDR_VAR 0 1
7187: PUSH
7188: DOUBLE
7189: LD_INT 1
7191: DEC
7192: ST_TO_ADDR
7193: LD_VAR 0 2
7197: PUSH
7198: FOR_TO
7199: IFFALSE 7374
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7201: LD_VAR 0 2
7205: PUSH
7206: LD_VAR 0 1
7210: ARRAY
7211: PUSH
7212: LD_INT 1
7214: ARRAY
7215: PPUSH
7216: LD_VAR 0 2
7220: PUSH
7221: LD_VAR 0 1
7225: ARRAY
7226: PUSH
7227: LD_INT 2
7229: ARRAY
7230: PPUSH
7231: CALL_OW 84
// if i = 1 then
7235: LD_VAR 0 1
7239: PUSH
7240: LD_INT 1
7242: EQUAL
7243: IFFALSE 7257
// Say ( Lynch , D2-Sol1-4 ) ;
7245: LD_EXP 47
7249: PPUSH
7250: LD_STRING D2-Sol1-4
7252: PPUSH
7253: CALL_OW 88
// if i = 2 then
7257: LD_VAR 0 1
7261: PUSH
7262: LD_INT 2
7264: EQUAL
7265: IFFALSE 7279
// Say ( JMM , D2-JMM-5 ) ;
7267: LD_EXP 37
7271: PPUSH
7272: LD_STRING D2-JMM-5
7274: PPUSH
7275: CALL_OW 88
// if i = 4 then
7279: LD_VAR 0 1
7283: PUSH
7284: LD_INT 4
7286: EQUAL
7287: IFFALSE 7311
// begin RevealFogArea ( 1 , troopsArea ) ;
7289: LD_INT 1
7291: PPUSH
7292: LD_INT 6
7294: PPUSH
7295: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7299: LD_EXP 47
7303: PPUSH
7304: LD_STRING D2-Sol1-5
7306: PPUSH
7307: CALL_OW 88
// end ; if i = 5 then
7311: LD_VAR 0 1
7315: PUSH
7316: LD_INT 5
7318: EQUAL
7319: IFFALSE 7333
// Say ( JMM , D2-JMM-6 ) ;
7321: LD_EXP 37
7325: PPUSH
7326: LD_STRING D2-JMM-6
7328: PPUSH
7329: CALL_OW 88
// if i = 7 then
7333: LD_VAR 0 1
7337: PUSH
7338: LD_INT 7
7340: EQUAL
7341: IFFALSE 7365
// begin RevealFogArea ( 1 , forestArea ) ;
7343: LD_INT 1
7345: PPUSH
7346: LD_INT 7
7348: PPUSH
7349: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7353: LD_EXP 47
7357: PPUSH
7358: LD_STRING D2-Sol1-6
7360: PPUSH
7361: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7365: LD_INT 46
7367: PPUSH
7368: CALL_OW 67
// end ;
7372: GO 7198
7374: POP
7375: POP
// CenterNowOnUnits ( JMM ) ;
7376: LD_EXP 37
7380: PPUSH
7381: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7385: LD_EXP 37
7389: PPUSH
7390: LD_STRING D2-JMM-7
7392: PPUSH
7393: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7397: LD_EXP 47
7401: PPUSH
7402: LD_STRING D2-Sol1-7
7404: PPUSH
7405: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7409: LD_EXP 37
7413: PPUSH
7414: LD_STRING D2-JMM-8
7416: PPUSH
7417: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7421: LD_ADDR_VAR 0 4
7425: PUSH
7426: LD_INT 22
7428: PUSH
7429: LD_INT 1
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: LD_INT 30
7438: PUSH
7439: LD_INT 31
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 69
7454: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7455: LD_EXP 47
7459: PPUSH
7460: LD_VAR 0 4
7464: PUSH
7465: LD_INT 1
7467: ARRAY
7468: PPUSH
7469: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7473: LD_INT 65
7475: PPUSH
7476: LD_INT 101
7478: PPUSH
7479: CALL_OW 428
7483: IFFALSE 7506
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7485: LD_INT 65
7487: PPUSH
7488: LD_INT 101
7490: PPUSH
7491: CALL_OW 428
7495: PPUSH
7496: LD_INT 75
7498: PPUSH
7499: LD_INT 100
7501: PPUSH
7502: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7506: LD_INT 66
7508: PPUSH
7509: LD_INT 103
7511: PPUSH
7512: CALL_OW 428
7516: IFFALSE 7539
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7518: LD_INT 66
7520: PPUSH
7521: LD_INT 103
7523: PPUSH
7524: CALL_OW 428
7528: PPUSH
7529: LD_INT 75
7531: PPUSH
7532: LD_INT 100
7534: PPUSH
7535: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7539: LD_ADDR_VAR 0 5
7543: PUSH
7544: LD_INT 22
7546: PUSH
7547: LD_INT 1
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PUSH
7554: LD_INT 21
7556: PUSH
7557: LD_INT 2
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 91
7566: PUSH
7567: LD_EXP 37
7571: PUSH
7572: LD_INT 7
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: LIST
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: PPUSH
7585: CALL_OW 69
7589: ST_TO_ADDR
// if tmp then
7590: LD_VAR 0 5
7594: IFFALSE 7611
// ComMoveXY ( tmp , 75 , 100 ) ;
7596: LD_VAR 0 5
7600: PPUSH
7601: LD_INT 75
7603: PPUSH
7604: LD_INT 100
7606: PPUSH
7607: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
7611: LD_ADDR_VAR 0 3
7615: PUSH
7616: LD_EXP 4
7620: PPUSH
7621: LD_INT 25
7623: PUSH
7624: LD_INT 1
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PPUSH
7631: CALL_OW 72
7635: PPUSH
7636: LD_EXP 37
7640: PPUSH
7641: CALL_OW 74
7645: ST_TO_ADDR
// if sol then
7646: LD_VAR 0 3
7650: IFFALSE 7710
// if GetDistUnits ( JMM , sol ) < 10 then
7652: LD_EXP 37
7656: PPUSH
7657: LD_VAR 0 3
7661: PPUSH
7662: CALL_OW 296
7666: PUSH
7667: LD_INT 10
7669: LESS
7670: IFFALSE 7710
// begin if IsInUnit ( sol ) then
7672: LD_VAR 0 3
7676: PPUSH
7677: CALL_OW 310
7681: IFFALSE 7692
// ComExitVehicle ( sol ) ;
7683: LD_VAR 0 3
7687: PPUSH
7688: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
7692: LD_VAR 0 3
7696: PPUSH
7697: LD_VAR 0 4
7701: PUSH
7702: LD_INT 2
7704: ARRAY
7705: PPUSH
7706: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
7710: LD_INT 10
7712: PPUSH
7713: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
7717: LD_EXP 37
7721: PPUSH
7722: LD_INT 65
7724: PPUSH
7725: LD_INT 101
7727: PPUSH
7728: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
7732: LD_EXP 37
7736: PPUSH
7737: LD_INT 63
7739: PPUSH
7740: LD_INT 100
7742: PPUSH
7743: CALL_OW 178
// tmp := 0 0$0 ;
7747: LD_ADDR_VAR 0 5
7751: PUSH
7752: LD_INT 0
7754: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7755: LD_INT 35
7757: PPUSH
7758: CALL_OW 67
// tmp := tmp + 0 0$1 ;
7762: LD_ADDR_VAR 0 5
7766: PUSH
7767: LD_VAR 0 5
7771: PUSH
7772: LD_INT 35
7774: PLUS
7775: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
7776: LD_EXP 37
7780: PPUSH
7781: LD_INT 65
7783: PPUSH
7784: LD_INT 101
7786: PPUSH
7787: CALL_OW 307
7791: PUSH
7792: LD_VAR 0 5
7796: PUSH
7797: LD_INT 175
7799: GREATER
7800: OR
7801: IFFALSE 7755
// Say ( JMM , D2a-JMM-1 ) ;
7803: LD_EXP 37
7807: PPUSH
7808: LD_STRING D2a-JMM-1
7810: PPUSH
7811: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
7815: LD_EXP 48
7819: PPUSH
7820: LD_INT 66
7822: PPUSH
7823: LD_INT 103
7825: PPUSH
7826: CALL_OW 111
// tmp := 0 0$0 ;
7830: LD_ADDR_VAR 0 5
7834: PUSH
7835: LD_INT 0
7837: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7838: LD_INT 35
7840: PPUSH
7841: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
7845: LD_EXP 48
7849: PPUSH
7850: LD_INT 66
7852: PPUSH
7853: LD_INT 103
7855: PPUSH
7856: CALL_OW 307
7860: PUSH
7861: LD_VAR 0 5
7865: PUSH
7866: LD_INT 175
7868: GREATER
7869: OR
7870: IFFALSE 7838
// ComTurnUnit ( Walker , JMM ) ;
7872: LD_EXP 48
7876: PPUSH
7877: LD_EXP 37
7881: PPUSH
7882: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
7886: LD_EXP 48
7890: PPUSH
7891: LD_STRING D2a-Sci1-1
7893: PPUSH
7894: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
7898: LD_EXP 37
7902: PPUSH
7903: LD_EXP 48
7907: PPUSH
7908: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
7912: LD_EXP 37
7916: PPUSH
7917: LD_STRING D2a-JMM-2
7919: PPUSH
7920: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
7924: LD_EXP 48
7928: PPUSH
7929: LD_STRING D2a-Sci1-2
7931: PPUSH
7932: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
7936: LD_EXP 37
7940: PPUSH
7941: LD_STRING D2a-JMM-3
7943: PPUSH
7944: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
7948: LD_EXP 48
7952: PPUSH
7953: LD_STRING D2a-Sci1-3
7955: PPUSH
7956: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
7960: LD_ADDR_EXP 4
7964: PUSH
7965: LD_EXP 4
7969: PUSH
7970: LD_EXP 47
7974: PUSH
7975: LD_EXP 48
7979: PUSH
7980: LD_EXP 49
7984: PUSH
7985: LD_EXP 50
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: ADD
7996: ST_TO_ADDR
// for i in jmm_units do
7997: LD_ADDR_VAR 0 1
8001: PUSH
8002: LD_EXP 4
8006: PUSH
8007: FOR_IN
8008: IFFALSE 8033
// if not IsInUnit ( i ) then
8010: LD_VAR 0 1
8014: PPUSH
8015: CALL_OW 310
8019: NOT
8020: IFFALSE 8031
// ComFree ( i ) ;
8022: LD_VAR 0 1
8026: PPUSH
8027: CALL_OW 139
8031: GO 8007
8033: POP
8034: POP
// Video ( false ) ;
8035: LD_INT 0
8037: PPUSH
8038: CALL 1200 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8042: LD_STRING MSolar1
8044: PPUSH
8045: CALL_OW 337
// jmm_on_west := true ;
8049: LD_ADDR_EXP 5
8053: PUSH
8054: LD_INT 1
8056: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8057: LD_INT 1050
8059: PPUSH
8060: CALL_OW 67
// frank_can_return := true ;
8064: LD_ADDR_EXP 12
8068: PUSH
8069: LD_INT 1
8071: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8072: LD_INT 6300
8074: PPUSH
8075: LD_INT 8400
8077: PPUSH
8078: CALL_OW 12
8082: PPUSH
8083: CALL_OW 67
// send_spec_patrol := true ;
8087: LD_ADDR_EXP 30
8091: PUSH
8092: LD_INT 1
8094: ST_TO_ADDR
// end ;
8095: PPOPN 5
8097: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8098: LD_INT 22
8100: PUSH
8101: LD_INT 1
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PUSH
8108: LD_INT 34
8110: PUSH
8111: LD_INT 51
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: PUSH
8118: LD_INT 92
8120: PUSH
8121: LD_INT 63
8123: PUSH
8124: LD_INT 100
8126: PUSH
8127: LD_INT 5
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: PUSH
8141: EMPTY
8142: LIST
8143: PPUSH
8144: CALL_OW 69
8148: PUSH
8149: LD_EXP 5
8153: NOT
8154: AND
8155: IFFALSE 8268
8157: GO 8159
8159: DISABLE
8160: LD_INT 0
8162: PPUSH
8163: PPUSH
// begin enable ;
8164: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8165: LD_ADDR_VAR 0 2
8169: PUSH
8170: LD_INT 22
8172: PUSH
8173: LD_INT 1
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 34
8182: PUSH
8183: LD_INT 51
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 92
8192: PUSH
8193: LD_INT 63
8195: PUSH
8196: LD_INT 100
8198: PUSH
8199: LD_INT 5
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: LIST
8212: PUSH
8213: EMPTY
8214: LIST
8215: PPUSH
8216: CALL_OW 69
8220: ST_TO_ADDR
// if not filter then
8221: LD_VAR 0 2
8225: NOT
8226: IFFALSE 8230
// exit ;
8228: GO 8268
// for i in filter do
8230: LD_ADDR_VAR 0 1
8234: PUSH
8235: LD_VAR 0 2
8239: PUSH
8240: FOR_IN
8241: IFFALSE 8266
// begin SetFuel ( i , 0 ) ;
8243: LD_VAR 0 1
8247: PPUSH
8248: LD_INT 0
8250: PPUSH
8251: CALL_OW 240
// ComStop ( i ) ;
8255: LD_VAR 0 1
8259: PPUSH
8260: CALL_OW 141
// end ;
8264: GO 8240
8266: POP
8267: POP
// end ;
8268: PPOPN 2
8270: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8271: LD_EXP 30
8275: IFFALSE 9372
8277: GO 8279
8279: DISABLE
8280: LD_INT 0
8282: PPUSH
8283: PPUSH
8284: PPUSH
8285: PPUSH
8286: PPUSH
8287: PPUSH
8288: PPUSH
// begin if not ru_spec_patrol then
8289: LD_EXP 54
8293: NOT
8294: IFFALSE 8298
// exit ;
8296: GO 9372
// dead1 := false ;
8298: LD_ADDR_VAR 0 1
8302: PUSH
8303: LD_INT 0
8305: ST_TO_ADDR
// dead2 := false ;
8306: LD_ADDR_VAR 0 2
8310: PUSH
8311: LD_INT 0
8313: ST_TO_ADDR
// inarea1 := false ;
8314: LD_ADDR_VAR 0 3
8318: PUSH
8319: LD_INT 0
8321: ST_TO_ADDR
// inarea2 := false ;
8322: LD_ADDR_VAR 0 4
8326: PUSH
8327: LD_INT 0
8329: ST_TO_ADDR
// tmp := [ ] ;
8330: LD_ADDR_VAR 0 6
8334: PUSH
8335: EMPTY
8336: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8337: LD_EXP 54
8341: PPUSH
8342: LD_INT 75
8344: PPUSH
8345: LD_INT 101
8347: PPUSH
8348: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8352: LD_INT 35
8354: PPUSH
8355: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) ;
8359: LD_INT 1
8361: PPUSH
8362: LD_EXP 54
8366: PUSH
8367: LD_INT 1
8369: ARRAY
8370: PPUSH
8371: CALL_OW 292
8375: IFFALSE 8352
// ComStop ( ru_spec_patrol ) ;
8377: LD_EXP 54
8381: PPUSH
8382: CALL_OW 141
// Wait ( 0 0$02 ) ;
8386: LD_INT 70
8388: PPUSH
8389: CALL_OW 67
// DialogueOn ;
8393: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8397: LD_EXP 54
8401: PUSH
8402: LD_INT 1
8404: ARRAY
8405: PPUSH
8406: LD_STRING D8-Rus1-1
8408: PPUSH
8409: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8413: LD_EXP 37
8417: PPUSH
8418: LD_STRING D8-JMM-1
8420: PPUSH
8421: CALL_OW 88
// DialogueOff ;
8425: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8429: LD_EXP 54
8433: PPUSH
8434: LD_INT 13
8436: PPUSH
8437: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8441: LD_INT 35
8443: PPUSH
8444: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8448: LD_VAR 0 1
8452: NOT
8453: PUSH
8454: LD_EXP 54
8458: PUSH
8459: LD_INT 1
8461: ARRAY
8462: PPUSH
8463: CALL_OW 301
8467: AND
8468: IFFALSE 8478
// dead1 := true ;
8470: LD_ADDR_VAR 0 1
8474: PUSH
8475: LD_INT 1
8477: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8478: LD_VAR 0 2
8482: NOT
8483: PUSH
8484: LD_EXP 54
8488: PUSH
8489: LD_INT 2
8491: ARRAY
8492: PPUSH
8493: CALL_OW 301
8497: AND
8498: IFFALSE 8508
// dead2 := true ;
8500: LD_ADDR_VAR 0 2
8504: PUSH
8505: LD_INT 1
8507: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8508: LD_VAR 0 3
8512: NOT
8513: PUSH
8514: LD_EXP 54
8518: PUSH
8519: LD_INT 1
8521: ARRAY
8522: PPUSH
8523: LD_INT 14
8525: PPUSH
8526: CALL_OW 308
8530: AND
8531: IFFALSE 8541
// inarea1 := true ;
8533: LD_ADDR_VAR 0 3
8537: PUSH
8538: LD_INT 1
8540: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
8541: LD_VAR 0 4
8545: NOT
8546: PUSH
8547: LD_EXP 54
8551: PUSH
8552: LD_INT 2
8554: ARRAY
8555: PPUSH
8556: LD_INT 14
8558: PPUSH
8559: CALL_OW 308
8563: AND
8564: IFFALSE 8574
// inarea2 := true ;
8566: LD_ADDR_VAR 0 4
8570: PUSH
8571: LD_INT 1
8573: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
8574: LD_VAR 0 1
8578: PUSH
8579: LD_VAR 0 2
8583: AND
8584: PUSH
8585: LD_VAR 0 1
8589: PUSH
8590: LD_VAR 0 4
8594: AND
8595: OR
8596: PUSH
8597: LD_VAR 0 2
8601: PUSH
8602: LD_VAR 0 3
8606: AND
8607: OR
8608: PUSH
8609: LD_VAR 0 3
8613: PUSH
8614: LD_VAR 0 4
8618: AND
8619: OR
8620: IFFALSE 8441
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
8622: LD_VAR 0 3
8626: PUSH
8627: LD_VAR 0 4
8631: AND
8632: PUSH
8633: LD_VAR 0 1
8637: PUSH
8638: LD_VAR 0 4
8642: AND
8643: OR
8644: PUSH
8645: LD_VAR 0 2
8649: PUSH
8650: LD_VAR 0 3
8654: AND
8655: OR
8656: IFFALSE 9352
// begin prepare_siege := true ;
8658: LD_ADDR_EXP 31
8662: PUSH
8663: LD_INT 1
8665: ST_TO_ADDR
// DialogueOn ;
8666: CALL_OW 6
// if ( inarea1 and inarea2 ) then
8670: LD_VAR 0 3
8674: PUSH
8675: LD_VAR 0 4
8679: AND
8680: IFFALSE 8696
// Say ( JMM , D8b-JMM-1a ) else
8682: LD_EXP 37
8686: PPUSH
8687: LD_STRING D8b-JMM-1a
8689: PPUSH
8690: CALL_OW 88
8694: GO 8708
// Say ( JMM , D8b-JMM-1 ) ;
8696: LD_EXP 37
8700: PPUSH
8701: LD_STRING D8b-JMM-1
8703: PPUSH
8704: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
8708: LD_EXP 4
8712: PPUSH
8713: LD_INT 26
8715: PUSH
8716: LD_INT 1
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PPUSH
8723: CALL_OW 72
8727: PUSH
8728: LD_EXP 38
8732: PUSH
8733: LD_EXP 39
8737: PUSH
8738: LD_EXP 48
8742: PUSH
8743: LD_EXP 51
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: DIFF
8754: PPUSH
8755: LD_STRING D8b-Sol1-1
8757: PPUSH
8758: CALL 640 0 2
// if Cyrus and Cyrus in jmm_units then
8762: LD_EXP 39
8766: PUSH
8767: LD_EXP 39
8771: PUSH
8772: LD_EXP 4
8776: IN
8777: AND
8778: IFFALSE 8794
// Say ( Cyrus , D8b-Cyrus-1 ) else
8780: LD_EXP 39
8784: PPUSH
8785: LD_STRING D8b-Cyrus-1
8787: PPUSH
8788: CALL_OW 88
8792: GO 8806
// Say ( JMM , D8b-JMM-1a ) ;
8794: LD_EXP 37
8798: PPUSH
8799: LD_STRING D8b-JMM-1a
8801: PPUSH
8802: CALL_OW 88
// if Lisa and Lisa in jmm_units then
8806: LD_EXP 40
8810: PUSH
8811: LD_EXP 40
8815: PUSH
8816: LD_EXP 4
8820: IN
8821: AND
8822: IFFALSE 8836
// Say ( Lisa , D8b-Lisa-2 ) ;
8824: LD_EXP 40
8828: PPUSH
8829: LD_STRING D8b-Lisa-2
8831: PPUSH
8832: CALL_OW 88
// if Bobby and Bobby in jmm_units then
8836: LD_EXP 38
8840: PUSH
8841: LD_EXP 38
8845: PUSH
8846: LD_EXP 4
8850: IN
8851: AND
8852: IFFALSE 8868
// Say ( Bobby , D8b-Bobby-1 ) else
8854: LD_EXP 38
8858: PPUSH
8859: LD_STRING D8b-Bobby-1
8861: PPUSH
8862: CALL_OW 88
8866: GO 8928
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
8868: LD_ADDR_VAR 0 5
8872: PUSH
8873: LD_EXP 4
8877: PPUSH
8878: LD_INT 26
8880: PUSH
8881: LD_INT 1
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: PPUSH
8888: CALL_OW 72
8892: PUSH
8893: LD_EXP 38
8897: PUSH
8898: LD_EXP 39
8902: PUSH
8903: LD_EXP 48
8907: PUSH
8908: LD_EXP 51
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: DIFF
8919: PPUSH
8920: LD_STRING D8b-Sol2-1
8922: PPUSH
8923: CALL 640 0 2
8927: ST_TO_ADDR
// DialogueOff ;
8928: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
8932: LD_EXP 39
8936: PUSH
8937: LD_EXP 39
8941: PUSH
8942: LD_EXP 4
8946: IN
8947: AND
8948: IFFALSE 8973
// tmp := Insert ( tmp , 1 , Cyrus ) ;
8950: LD_ADDR_VAR 0 6
8954: PUSH
8955: LD_VAR 0 6
8959: PPUSH
8960: LD_INT 1
8962: PPUSH
8963: LD_EXP 39
8967: PPUSH
8968: CALL_OW 2
8972: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
8973: LD_EXP 38
8977: PUSH
8978: LD_EXP 38
8982: PUSH
8983: LD_EXP 4
8987: IN
8988: AND
8989: IFFALSE 9014
// tmp := Insert ( tmp , 1 , Bobby ) ;
8991: LD_ADDR_VAR 0 6
8995: PUSH
8996: LD_VAR 0 6
9000: PPUSH
9001: LD_INT 1
9003: PPUSH
9004: LD_EXP 38
9008: PPUSH
9009: CALL_OW 2
9013: ST_TO_ADDR
// if sol then
9014: LD_VAR 0 5
9018: IFFALSE 9043
// tmp := Insert ( tmp , 1 , sol ) ;
9020: LD_ADDR_VAR 0 6
9024: PUSH
9025: LD_VAR 0 6
9029: PPUSH
9030: LD_INT 1
9032: PPUSH
9033: LD_VAR 0 5
9037: PPUSH
9038: CALL_OW 2
9042: ST_TO_ADDR
// if tmp then
9043: LD_VAR 0 6
9047: IFFALSE 9311
// begin SetSide ( tmp , 8 ) ;
9049: LD_VAR 0 6
9053: PPUSH
9054: LD_INT 8
9056: PPUSH
9057: CALL_OW 235
// for i in tmp do
9061: LD_ADDR_VAR 0 7
9065: PUSH
9066: LD_VAR 0 6
9070: PUSH
9071: FOR_IN
9072: IFFALSE 9163
// begin if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_building then
9074: LD_VAR 0 7
9078: PPUSH
9079: CALL_OW 310
9083: PUSH
9084: LD_VAR 0 7
9088: PPUSH
9089: CALL_OW 310
9093: PPUSH
9094: CALL_OW 266
9098: PUSH
9099: LD_INT 3
9101: EQUAL
9102: AND
9103: IFFALSE 9114
// ComExitBuilding ( i ) ;
9105: LD_VAR 0 7
9109: PPUSH
9110: CALL_OW 122
// if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_vehicle then
9114: LD_VAR 0 7
9118: PPUSH
9119: CALL_OW 310
9123: PUSH
9124: LD_VAR 0 7
9128: PPUSH
9129: CALL_OW 310
9133: PPUSH
9134: CALL_OW 266
9138: PUSH
9139: LD_INT 2
9141: EQUAL
9142: AND
9143: IFFALSE 9154
// ComExitVehicle ( i ) ;
9145: LD_VAR 0 7
9149: PPUSH
9150: CALL_OW 121
// wait ( 0 0$1 ) ;
9154: LD_INT 35
9156: PPUSH
9157: CALL_OW 67
// end ;
9161: GO 9071
9163: POP
9164: POP
// ComFree ( tmp ) ;
9165: LD_VAR 0 6
9169: PPUSH
9170: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9174: LD_VAR 0 6
9178: PPUSH
9179: LD_INT 15
9181: PPUSH
9182: CALL_OW 173
// AddComHold ( tmp ) ;
9186: LD_VAR 0 6
9190: PPUSH
9191: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9195: LD_INT 35
9197: PPUSH
9198: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9202: LD_VAR 0 6
9206: PUSH
9207: LD_INT 1
9209: ARRAY
9210: PPUSH
9211: CALL_OW 314
9215: NOT
9216: IFFALSE 9230
// ComMoveToArea ( tmp , cyrusEscape ) ;
9218: LD_VAR 0 6
9222: PPUSH
9223: LD_INT 15
9225: PPUSH
9226: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9230: LD_VAR 0 6
9234: PUSH
9235: LD_INT 1
9237: ARRAY
9238: PPUSH
9239: LD_INT 15
9241: PPUSH
9242: CALL_OW 308
9246: IFFALSE 9301
// begin RemoveUnit ( tmp [ 1 ] ) ;
9248: LD_VAR 0 6
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: PPUSH
9257: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9261: LD_ADDR_EXP 4
9265: PUSH
9266: LD_EXP 4
9270: PUSH
9271: LD_VAR 0 6
9275: PUSH
9276: LD_INT 1
9278: ARRAY
9279: DIFF
9280: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9281: LD_ADDR_VAR 0 6
9285: PUSH
9286: LD_VAR 0 6
9290: PUSH
9291: LD_VAR 0 6
9295: PUSH
9296: LD_INT 1
9298: ARRAY
9299: DIFF
9300: ST_TO_ADDR
// end ; until tmp = 0 ;
9301: LD_VAR 0 6
9305: PUSH
9306: LD_INT 0
9308: EQUAL
9309: IFFALSE 9195
// end ; wait ( 0 0$30 ) ;
9311: LD_INT 1050
9313: PPUSH
9314: CALL_OW 67
// if ru_spec_patrol then
9318: LD_EXP 54
9322: IFFALSE 9350
// for i in ru_spec_patrol do
9324: LD_ADDR_VAR 0 7
9328: PUSH
9329: LD_EXP 54
9333: PUSH
9334: FOR_IN
9335: IFFALSE 9348
// RemoveUnit ( i ) ;
9337: LD_VAR 0 7
9341: PPUSH
9342: CALL_OW 64
9346: GO 9334
9348: POP
9349: POP
// end else
9350: GO 9372
// begin prepare_siege := false ;
9352: LD_ADDR_EXP 31
9356: PUSH
9357: LD_INT 0
9359: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9360: LD_EXP 37
9364: PPUSH
9365: LD_STRING D8a-JMM-1
9367: PPUSH
9368: CALL_OW 88
// end ; end ;
9372: PPOPN 7
9374: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9375: LD_EXP 12
9379: IFFALSE 10596
9381: GO 9383
9383: DISABLE
9384: LD_INT 0
9386: PPUSH
9387: PPUSH
9388: PPUSH
// begin uc_side := 8 ;
9389: LD_ADDR_OWVAR 20
9393: PUSH
9394: LD_INT 8
9396: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9397: LD_ADDR_VAR 0 3
9401: PUSH
9402: LD_INT 59
9404: PUSH
9405: LD_INT 71
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 122
9414: PUSH
9415: LD_INT 117
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ) ;
9426: LD_ADDR_EXP 51
9430: PUSH
9431: LD_STRING Frank
9433: PPUSH
9434: LD_INT 0
9436: PPUSH
9437: CALL 489 0 2
9441: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9442: LD_ADDR_VAR 0 1
9446: PUSH
9447: LD_INT 1
9449: PPUSH
9450: LD_INT 2
9452: PPUSH
9453: CALL_OW 12
9457: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9458: LD_EXP 51
9462: PPUSH
9463: LD_VAR 0 3
9467: PUSH
9468: LD_VAR 0 1
9472: ARRAY
9473: PUSH
9474: LD_INT 1
9476: ARRAY
9477: PPUSH
9478: LD_VAR 0 3
9482: PUSH
9483: LD_VAR 0 1
9487: ARRAY
9488: PUSH
9489: LD_INT 2
9491: ARRAY
9492: PPUSH
9493: LD_INT 0
9495: PPUSH
9496: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9500: LD_EXP 51
9504: PPUSH
9505: LD_INT 1
9507: PPUSH
9508: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9512: LD_INT 35
9514: PPUSH
9515: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9519: LD_EXP 51
9523: PPUSH
9524: LD_EXP 37
9528: PPUSH
9529: CALL_OW 296
9533: PUSH
9534: LD_INT 8
9536: LESS
9537: PUSH
9538: LD_EXP 51
9542: PPUSH
9543: CALL_OW 256
9547: PUSH
9548: LD_INT 250
9550: GREATER
9551: AND
9552: IFFALSE 9512
// Video ( true ) ;
9554: LD_INT 1
9556: PPUSH
9557: CALL 1200 0 1
// CenterOnUnits ( JMM ) ;
9561: LD_EXP 37
9565: PPUSH
9566: CALL_OW 85
// if IsInUnit ( JMM ) then
9570: LD_EXP 37
9574: PPUSH
9575: CALL_OW 310
9579: IFFALSE 9590
// ComFree ( JMM ) ;
9581: LD_EXP 37
9585: PPUSH
9586: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
9590: LD_EXP 37
9594: PPUSH
9595: LD_EXP 51
9599: PPUSH
9600: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
9604: LD_EXP 51
9608: PPUSH
9609: LD_EXP 37
9613: PPUSH
9614: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
9618: LD_EXP 37
9622: PPUSH
9623: LD_STRING D6-JMM-1
9625: PPUSH
9626: CALL_OW 88
// p := 0 ;
9630: LD_ADDR_VAR 0 2
9634: PUSH
9635: LD_INT 0
9637: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9638: LD_INT 35
9640: PPUSH
9641: CALL_OW 67
// p := p + 1 ;
9645: LD_ADDR_VAR 0 2
9649: PUSH
9650: LD_VAR 0 2
9654: PUSH
9655: LD_INT 1
9657: PLUS
9658: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
9659: LD_EXP 37
9663: PPUSH
9664: LD_EXP 51
9668: PPUSH
9669: CALL_OW 296
9673: PUSH
9674: LD_INT 8
9676: LESS
9677: PUSH
9678: LD_VAR 0 2
9682: PUSH
9683: LD_INT 7
9685: GREATER
9686: OR
9687: IFFALSE 9638
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 then
9689: LD_EXP 40
9693: PUSH
9694: LD_EXP 40
9698: PPUSH
9699: LD_EXP 51
9703: PPUSH
9704: CALL_OW 296
9708: PUSH
9709: LD_INT 20
9711: LESS
9712: AND
9713: IFFALSE 9738
// begin ComFree ( Lisa ) ;
9715: LD_EXP 40
9719: PPUSH
9720: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
9724: LD_EXP 40
9728: PPUSH
9729: LD_EXP 51
9733: PPUSH
9734: CALL_OW 172
// end ; if Lynch then
9738: LD_EXP 47
9742: IFFALSE 9767
// begin ComFree ( Lynch ) ;
9744: LD_EXP 47
9748: PPUSH
9749: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
9753: LD_EXP 47
9757: PPUSH
9758: LD_EXP 51
9762: PPUSH
9763: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
9767: LD_EXP 37
9771: PPUSH
9772: LD_EXP 51
9776: PPUSH
9777: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
9781: LD_EXP 51
9785: PPUSH
9786: LD_EXP 37
9790: PPUSH
9791: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
9795: LD_EXP 51
9799: PPUSH
9800: LD_STRING D6-Frank-1
9802: PPUSH
9803: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
9807: LD_INT 69
9809: PPUSH
9810: LD_INT 20
9812: PPUSH
9813: LD_INT 1
9815: PPUSH
9816: LD_INT 20
9818: NEG
9819: PPUSH
9820: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
9824: LD_INT 69
9826: PPUSH
9827: LD_INT 20
9829: PPUSH
9830: LD_INT 1
9832: PPUSH
9833: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
9837: LD_INT 190
9839: PPUSH
9840: LD_INT 31
9842: PPUSH
9843: LD_INT 1
9845: PPUSH
9846: LD_INT 20
9848: NEG
9849: PPUSH
9850: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
9854: LD_INT 190
9856: PPUSH
9857: LD_INT 31
9859: PPUSH
9860: LD_INT 1
9862: PPUSH
9863: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
9867: LD_INT 69
9869: PPUSH
9870: LD_INT 20
9872: PPUSH
9873: CALL_OW 84
// Wait ( 0 0$02 ) ;
9877: LD_INT 70
9879: PPUSH
9880: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
9884: LD_EXP 37
9888: PPUSH
9889: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) then
9893: LD_EXP 40
9897: PUSH
9898: LD_EXP 40
9902: PPUSH
9903: LD_EXP 51
9907: PPUSH
9908: CALL_OW 296
9912: PUSH
9913: LD_INT 20
9915: LESS
9916: AND
9917: PUSH
9918: LD_EXP 40
9922: PPUSH
9923: CALL_OW 302
9927: AND
9928: IFFALSE 10050
// begin ComFree ( Lisa ) ;
9930: LD_EXP 40
9934: PPUSH
9935: CALL_OW 139
// p := 0 ;
9939: LD_ADDR_VAR 0 2
9943: PUSH
9944: LD_INT 0
9946: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9947: LD_INT 35
9949: PPUSH
9950: CALL_OW 67
// p := p + 1 ;
9954: LD_ADDR_VAR 0 2
9958: PUSH
9959: LD_VAR 0 2
9963: PUSH
9964: LD_INT 1
9966: PLUS
9967: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
9968: LD_EXP 40
9972: PPUSH
9973: LD_EXP 51
9977: PPUSH
9978: CALL_OW 296
9982: PUSH
9983: LD_INT 7
9985: LESS
9986: PUSH
9987: LD_VAR 0 2
9991: PUSH
9992: LD_INT 7
9994: GREATER
9995: OR
9996: IFFALSE 9947
// Say ( Lisa , D6-Lisa-1 ) ;
9998: LD_EXP 40
10002: PPUSH
10003: LD_STRING D6-Lisa-1
10005: PPUSH
10006: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10010: LD_EXP 40
10014: PPUSH
10015: LD_EXP 51
10019: PPUSH
10020: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10024: LD_EXP 51
10028: PPUSH
10029: LD_EXP 40
10033: PPUSH
10034: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10038: LD_EXP 51
10042: PPUSH
10043: LD_STRING D6-Frank-2
10045: PPUSH
10046: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10050: LD_EXP 47
10054: PUSH
10055: LD_EXP 47
10059: PPUSH
10060: LD_EXP 51
10064: PPUSH
10065: CALL_OW 296
10069: PUSH
10070: LD_INT 20
10072: LESS
10073: AND
10074: PUSH
10075: LD_EXP 47
10079: PPUSH
10080: CALL_OW 302
10084: AND
10085: IFFALSE 10266
// begin ComTurnUnit ( Lynch , JMM ) ;
10087: LD_EXP 47
10091: PPUSH
10092: LD_EXP 37
10096: PPUSH
10097: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10101: LD_EXP 51
10105: PPUSH
10106: LD_EXP 37
10110: PPUSH
10111: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10115: LD_EXP 47
10119: PPUSH
10120: LD_STRING D6-Sol1-2
10122: PPUSH
10123: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10127: LD_EXP 37
10131: PPUSH
10132: LD_STRING D6-JMM-2
10134: PPUSH
10135: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10139: LD_EXP 51
10143: PPUSH
10144: LD_STRING D6-Frank-3
10146: PPUSH
10147: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10151: LD_EXP 37
10155: PPUSH
10156: LD_STRING D6-JMM-3
10158: PPUSH
10159: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10163: LD_EXP 51
10167: PPUSH
10168: LD_STRING D6-Frank-4
10170: PPUSH
10171: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10175: LD_EXP 51
10179: PPUSH
10180: LD_STRING D6-Frank-4a
10182: PPUSH
10183: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10187: LD_EXP 37
10191: PPUSH
10192: LD_STRING D6-JMM-4
10194: PPUSH
10195: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10199: LD_EXP 51
10203: PPUSH
10204: LD_STRING D6-Frank-5
10206: PPUSH
10207: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10211: LD_EXP 40
10215: PUSH
10216: LD_EXP 40
10220: PPUSH
10221: CALL_OW 302
10225: AND
10226: IFFALSE 10240
// Say ( Lisa , D6-Lisa-5 ) ;
10228: LD_EXP 40
10232: PPUSH
10233: LD_STRING D6-Lisa-5
10235: PPUSH
10236: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10240: LD_EXP 51
10244: PPUSH
10245: LD_STRING D6-Frank-6
10247: PPUSH
10248: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10252: LD_EXP 37
10256: PPUSH
10257: LD_STRING D6-JMM-6
10259: PPUSH
10260: CALL_OW 88
// end else
10264: GO 10381
// begin ComTurnUnit ( Frank , JMM ) ;
10266: LD_EXP 51
10270: PPUSH
10271: LD_EXP 37
10275: PPUSH
10276: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10280: LD_EXP 51
10284: PPUSH
10285: LD_STRING D6-Frank-4
10287: PPUSH
10288: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10292: LD_EXP 51
10296: PPUSH
10297: LD_STRING D6-Frank-4a
10299: PPUSH
10300: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10304: LD_EXP 37
10308: PPUSH
10309: LD_STRING D6-JMM-4
10311: PPUSH
10312: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10316: LD_EXP 51
10320: PPUSH
10321: LD_STRING D6-Frank-5
10323: PPUSH
10324: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10328: LD_EXP 40
10332: PUSH
10333: LD_EXP 40
10337: PPUSH
10338: CALL_OW 302
10342: AND
10343: IFFALSE 10357
// Say ( Lisa , D6-Lisa-5 ) ;
10345: LD_EXP 40
10349: PPUSH
10350: LD_STRING D6-Lisa-5
10352: PPUSH
10353: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10357: LD_EXP 51
10361: PPUSH
10362: LD_STRING D6-Frank-6
10364: PPUSH
10365: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10369: LD_EXP 37
10373: PPUSH
10374: LD_STRING D6-JMM-6
10376: PPUSH
10377: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10381: LD_STRING Q1
10383: PPUSH
10384: CALL_OW 97
10388: PUSH
10389: LD_INT 1
10391: DOUBLE
10392: EQUAL
10393: IFTRUE 10397
10395: GO 10408
10397: POP
// frank_send_to_scout := true ; 2 :
10398: LD_ADDR_EXP 15
10402: PUSH
10403: LD_INT 1
10405: ST_TO_ADDR
10406: GO 10428
10408: LD_INT 2
10410: DOUBLE
10411: EQUAL
10412: IFTRUE 10416
10414: GO 10427
10416: POP
// frank_send_to_scout := false ; end ;
10417: LD_ADDR_EXP 15
10421: PUSH
10422: LD_INT 0
10424: ST_TO_ADDR
10425: GO 10428
10427: POP
// Video ( false ) ;
10428: LD_INT 0
10430: PPUSH
10431: CALL 1200 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10435: LD_EXP 37
10439: PUSH
10440: LD_EXP 40
10444: PUSH
10445: LD_EXP 47
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: LIST
10454: PPUSH
10455: CALL_OW 139
// if frank_send_to_scout then
10459: LD_EXP 15
10463: IFFALSE 10517
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10465: LD_EXP 51
10469: PPUSH
10470: LD_INT 15
10472: PPUSH
10473: CALL_OW 113
// wait ( 0 0$01 ) ;
10477: LD_INT 35
10479: PPUSH
10480: CALL_OW 67
// until not See ( 1 , Frank ) ;
10484: LD_INT 1
10486: PPUSH
10487: LD_EXP 51
10491: PPUSH
10492: CALL_OW 292
10496: NOT
10497: IFFALSE 10465
// wait ( 0 0$02 ) ;
10499: LD_INT 70
10501: PPUSH
10502: CALL_OW 67
// RemoveUnit ( Frank ) ;
10506: LD_EXP 51
10510: PPUSH
10511: CALL_OW 64
// end else
10515: GO 10529
// SetSide ( Frank , 1 ) ;
10517: LD_EXP 51
10521: PPUSH
10522: LD_INT 1
10524: PPUSH
10525: CALL_OW 235
// send_attack_on_cornel_base := true ;
10529: LD_ADDR_EXP 26
10533: PUSH
10534: LD_INT 1
10536: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10537: LD_INT 35
10539: PPUSH
10540: CALL_OW 67
// time_to_prepare := Count ( time_to_prepare , - ) ;
10544: LD_ADDR_EXP 29
10548: PUSH
10549: LD_EXP 29
10553: PPUSH
10554: LD_STRING -
10556: PPUSH
10557: CALL 1132 0 2
10561: ST_TO_ADDR
// if debug then
10562: LD_EXP 1
10566: IFFALSE 10578
// debug_strings := time_to_prepare ;
10568: LD_ADDR_OWVAR 48
10572: PUSH
10573: LD_EXP 29
10577: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
10578: LD_EXP 29
10582: PUSH
10583: LD_INT 0
10585: EQUAL
10586: IFFALSE 10537
// cornel_prepared := true ;
10588: LD_ADDR_EXP 11
10592: PUSH
10593: LD_INT 1
10595: ST_TO_ADDR
// end ;
10596: PPOPN 3
10598: END
// every 0 0$01 trigger cornel_prepared do
10599: LD_EXP 11
10603: IFFALSE 10867
10605: GO 10607
10607: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
10608: LD_EXP 44
10612: PPUSH
10613: LD_STRING D3-Corn-1
10615: PPUSH
10616: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
10620: LD_STRING MOutWait
10622: PPUSH
10623: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
10627: LD_INT 35
10629: PPUSH
10630: CALL_OW 67
// until cornel_counter = 0 ;
10634: LD_EXP 10
10638: PUSH
10639: LD_INT 0
10641: EQUAL
10642: IFFALSE 10627
// SayRadio ( Cornel , D3a-Corn-1 ) ;
10644: LD_EXP 44
10648: PPUSH
10649: LD_STRING D3a-Corn-1
10651: PPUSH
10652: CALL_OW 94
// if IsOk ( Cornel ) then
10656: LD_EXP 44
10660: PPUSH
10661: CALL_OW 302
10665: IFFALSE 10679
// Say ( JMM , D3a-JMM-1 ) ;
10667: LD_EXP 37
10671: PPUSH
10672: LD_STRING D3a-JMM-1
10674: PPUSH
10675: CALL_OW 88
// end_mission_allowed := true ;
10679: LD_ADDR_EXP 21
10683: PUSH
10684: LD_INT 1
10686: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
10687: LD_STRING M2
10689: PPUSH
10690: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
10694: LD_INT 9
10696: PPUSH
10697: LD_INT 1
10699: PPUSH
10700: CALL_OW 424
// Wait ( 0 0$05 ) ;
10704: LD_INT 175
10706: PPUSH
10707: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
10711: LD_EXP 44
10715: PPUSH
10716: LD_STRING D3a-Corn-2
10718: PPUSH
10719: CALL_OW 94
// cornel_attack := true ;
10723: LD_ADDR_EXP 9
10727: PUSH
10728: LD_INT 1
10730: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
10731: LD_INT 105
10733: PPUSH
10734: CALL_OW 67
// AddMoreTanks ( ) ;
10738: CALL 4952 0 0
// if frank_send_to_scout then
10742: LD_EXP 15
10746: IFFALSE 10867
// begin InitHc ;
10748: CALL_OW 19
// InitUc ;
10752: CALL_OW 18
// uc_side := 8 ;
10756: LD_ADDR_OWVAR 20
10760: PUSH
10761: LD_INT 8
10763: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ) ;
10764: LD_ADDR_EXP 51
10768: PUSH
10769: LD_STRING Frank
10771: PPUSH
10772: LD_INT 0
10774: PPUSH
10775: CALL 489 0 2
10779: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
10780: LD_EXP 51
10784: PPUSH
10785: LD_INT 6
10787: PPUSH
10788: LD_INT 9
10790: PPUSH
10791: LD_INT 0
10793: PPUSH
10794: CALL_OW 48
// ComCrawl ( Frank ) ;
10798: LD_EXP 51
10802: PPUSH
10803: CALL_OW 137
// repeat wait ( 0 0$01 ) ;
10807: LD_INT 35
10809: PPUSH
10810: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 ;
10814: LD_EXP 37
10818: PPUSH
10819: LD_EXP 51
10823: PPUSH
10824: CALL_OW 296
10828: PUSH
10829: LD_INT 9
10831: LESS
10832: IFFALSE 10807
// SetSide ( Frank , 1 ) ;
10834: LD_EXP 51
10838: PPUSH
10839: LD_INT 1
10841: PPUSH
10842: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
10846: LD_EXP 51
10850: PPUSH
10851: LD_STRING D6a-Frank-1
10853: PPUSH
10854: CALL_OW 88
// ComWalk ( Frank ) ;
10858: LD_EXP 51
10862: PPUSH
10863: CALL_OW 138
// end ; end ;
10867: END
// every 0 0$01 trigger solar_builded do
10868: LD_EXP 14
10872: IFFALSE 10976
10874: GO 10876
10876: DISABLE
// begin Wait ( 0 0$02 ) ;
10877: LD_INT 70
10879: PPUSH
10880: CALL_OW 67
// DialogueOn ;
10884: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
10888: LD_EXP 37
10892: PPUSH
10893: LD_STRING D2b-JMM-1
10895: PPUSH
10896: CALL_OW 88
// if Walker and IsOk ( Walker ) then
10900: LD_EXP 48
10904: PUSH
10905: LD_EXP 48
10909: PPUSH
10910: CALL_OW 302
10914: AND
10915: IFFALSE 10965
// begin Say ( Walker , D2b-Sci1-1 ) ;
10917: LD_EXP 48
10921: PPUSH
10922: LD_STRING D2b-Sci1-1
10924: PPUSH
10925: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
10929: LD_EXP 37
10933: PPUSH
10934: LD_STRING D2b-JMM-2
10936: PPUSH
10937: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
10941: LD_EXP 48
10945: PPUSH
10946: LD_STRING D2b-Sci1-2
10948: PPUSH
10949: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
10953: LD_EXP 37
10957: PPUSH
10958: LD_STRING D2b-JMM-3
10960: PPUSH
10961: CALL_OW 88
// end ; DialogueOff ;
10965: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
10969: LD_STRING MOutSol
10971: PPUSH
10972: CALL_OW 337
// end ;
10976: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
10977: LD_EXP 14
10981: PUSH
10982: LD_EXP 37
10986: PPUSH
10987: CALL_OW 302
10991: AND
10992: PUSH
10993: LD_EXP 37
10997: PPUSH
10998: CALL 966 0 1
11002: AND
11003: PUSH
11004: LD_EXP 16
11008: NOT
11009: AND
11010: IFFALSE 11081
11012: GO 11014
11014: DISABLE
11015: LD_INT 0
11017: PPUSH
// begin jmm_in_veh := true ;
11018: LD_ADDR_EXP 16
11022: PUSH
11023: LD_INT 1
11025: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11026: LD_ADDR_VAR 0 1
11030: PUSH
11031: LD_INT 0
11033: PPUSH
11034: LD_INT 1
11036: PPUSH
11037: CALL_OW 12
11041: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11042: LD_INT 70
11044: PPUSH
11045: CALL_OW 67
// if i then
11049: LD_VAR 0 1
11053: IFFALSE 11069
// Say ( JMM , D2c-JMM-1 ) else
11055: LD_EXP 37
11059: PPUSH
11060: LD_STRING D2c-JMM-1
11062: PPUSH
11063: CALL_OW 88
11067: GO 11081
// Say ( JMM , D2c-JMM-1a ) ;
11069: LD_EXP 37
11073: PPUSH
11074: LD_STRING D2c-JMM-1a
11076: PPUSH
11077: CALL_OW 88
// end ;
11081: PPOPN 1
11083: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11084: LD_EXP 14
11088: PUSH
11089: LD_EXP 38
11093: PPUSH
11094: CALL_OW 302
11098: AND
11099: PUSH
11100: LD_EXP 38
11104: PPUSH
11105: CALL 966 0 1
11109: AND
11110: PUSH
11111: LD_EXP 17
11115: NOT
11116: AND
11117: IFFALSE 11149
11119: GO 11121
11121: DISABLE
// begin bobby_in_veh := true ;
11122: LD_ADDR_EXP 17
11126: PUSH
11127: LD_INT 1
11129: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11130: LD_INT 70
11132: PPUSH
11133: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11137: LD_EXP 38
11141: PPUSH
11142: LD_STRING D2c-Bobby-1
11144: PPUSH
11145: CALL_OW 88
11149: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11150: LD_EXP 14
11154: PUSH
11155: LD_EXP 40
11159: PPUSH
11160: CALL_OW 302
11164: AND
11165: PUSH
11166: LD_EXP 40
11170: PPUSH
11171: CALL 966 0 1
11175: AND
11176: PUSH
11177: LD_EXP 19
11181: NOT
11182: AND
11183: IFFALSE 11215
11185: GO 11187
11187: DISABLE
// begin lisa_in_veh := true ;
11188: LD_ADDR_EXP 19
11192: PUSH
11193: LD_INT 1
11195: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11196: LD_INT 70
11198: PPUSH
11199: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11203: LD_EXP 40
11207: PPUSH
11208: LD_STRING D2c-Lisa-1
11210: PPUSH
11211: CALL_OW 88
11215: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11216: LD_EXP 14
11220: PUSH
11221: LD_EXP 39
11225: PPUSH
11226: CALL_OW 302
11230: AND
11231: PUSH
11232: LD_EXP 39
11236: PPUSH
11237: CALL 966 0 1
11241: AND
11242: PUSH
11243: LD_EXP 18
11247: NOT
11248: AND
11249: IFFALSE 11320
11251: GO 11253
11253: DISABLE
11254: LD_INT 0
11256: PPUSH
// begin cyrus_in_veh := true ;
11257: LD_ADDR_EXP 18
11261: PUSH
11262: LD_INT 1
11264: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11265: LD_ADDR_VAR 0 1
11269: PUSH
11270: LD_INT 0
11272: PPUSH
11273: LD_INT 1
11275: PPUSH
11276: CALL_OW 12
11280: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11281: LD_INT 70
11283: PPUSH
11284: CALL_OW 67
// if i then
11288: LD_VAR 0 1
11292: IFFALSE 11308
// Say ( Cyrus , D2c-Cyrus-1 ) else
11294: LD_EXP 39
11298: PPUSH
11299: LD_STRING D2c-Cyrus-1
11301: PPUSH
11302: CALL_OW 88
11306: GO 11320
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11308: LD_EXP 39
11312: PPUSH
11313: LD_STRING D2c-Cyrus-1a
11315: PPUSH
11316: CALL_OW 88
// end ;
11320: PPOPN 1
11322: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11323: LD_EXP 44
11327: PPUSH
11328: LD_INT 16
11330: PPUSH
11331: CALL_OW 308
11335: IFFALSE 11616
11337: GO 11339
11339: DISABLE
11340: LD_INT 0
11342: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11343: LD_INT 3
11345: PPUSH
11346: LD_EXP 44
11350: PPUSH
11351: CALL_OW 471
// send_attack_on_cornel := true ;
11355: LD_ADDR_EXP 32
11359: PUSH
11360: LD_INT 1
11362: ST_TO_ADDR
// if ru_vehicles then
11363: LD_EXP 56
11367: IFFALSE 11401
// for i in ru_vehicles do
11369: LD_ADDR_VAR 0 1
11373: PUSH
11374: LD_EXP 56
11378: PUSH
11379: FOR_IN
11380: IFFALSE 11399
// ComAgressiveMove ( i , 215 , 69 ) ;
11382: LD_VAR 0 1
11386: PPUSH
11387: LD_INT 215
11389: PPUSH
11390: LD_INT 69
11392: PPUSH
11393: CALL_OW 114
11397: GO 11379
11399: POP
11400: POP
// if ru_patrol then
11401: LD_EXP 53
11405: IFFALSE 11439
// for i in ru_patrol do
11407: LD_ADDR_VAR 0 1
11411: PUSH
11412: LD_EXP 53
11416: PUSH
11417: FOR_IN
11418: IFFALSE 11437
// ComAgressiveMove ( i , 215 , 69 ) ;
11420: LD_VAR 0 1
11424: PPUSH
11425: LD_INT 215
11427: PPUSH
11428: LD_INT 69
11430: PPUSH
11431: CALL_OW 114
11435: GO 11417
11437: POP
11438: POP
// if frank_send_to_scout then
11439: LD_EXP 15
11443: IFFALSE 11457
// begin SayRadio ( Frank , D3b-Frank-1 ) ;
11445: LD_EXP 51
11449: PPUSH
11450: LD_STRING D3b-Frank-1
11452: PPUSH
11453: CALL_OW 94
// end ; Wait ( 0 0$03 ) ;
11457: LD_INT 105
11459: PPUSH
11460: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11464: LD_EXP 44
11468: PPUSH
11469: LD_STRING D4-Corn-1
11471: PPUSH
11472: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11476: LD_INT 35
11478: PPUSH
11479: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11483: LD_INT 22
11485: PUSH
11486: LD_INT 4
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 21
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: LD_INT 3
11505: PUSH
11506: LD_INT 24
11508: PUSH
11509: LD_INT 1000
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: LIST
11524: PPUSH
11525: CALL_OW 69
11529: PUSH
11530: LD_INT 6
11532: LESS
11533: IFFALSE 11476
// if Cornel then
11535: LD_EXP 44
11539: IFFALSE 11579
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
11541: LD_EXP 44
11545: PPUSH
11546: LD_STRING D5-Corn-1
11548: PPUSH
11549: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
11553: LD_EXP 44
11557: PPUSH
11558: LD_EXP 2
11562: PUSH
11563: LD_STRING Cornel
11565: STR
11566: PPUSH
11567: CALL_OW 38
// cornel_saved := true ;
11571: LD_ADDR_EXP 27
11575: PUSH
11576: LD_INT 1
11578: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
11579: LD_INT 4
11581: PPUSH
11582: LD_INT 8
11584: PPUSH
11585: CALL_OW 343
// Wait ( 0 0$01 ) ;
11589: LD_INT 35
11591: PPUSH
11592: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
11596: LD_INT 3
11598: PPUSH
11599: LD_EXP 44
11603: PPUSH
11604: CALL_OW 472
// send_attack_on_cornel := false ;
11608: LD_ADDR_EXP 32
11612: PUSH
11613: LD_INT 0
11615: ST_TO_ADDR
// end ;
11616: PPOPN 1
11618: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
11619: LD_INT 9
11621: PPUSH
11622: LD_INT 22
11624: PUSH
11625: LD_INT 1
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PPUSH
11632: CALL_OW 70
11636: PUSH
11637: LD_EXP 33
11641: OR
11642: IFFALSE 11839
11644: GO 11646
11646: DISABLE
11647: LD_INT 0
11649: PPUSH
11650: PPUSH
// begin enable ;
11651: ENABLE
// if not jmm_on_west then
11652: LD_EXP 5
11656: NOT
11657: IFFALSE 11668
// begin YouLost ( 4 ) ;
11659: LD_STRING 4
11661: PPUSH
11662: CALL_OW 104
// exit ;
11666: GO 11839
// end ; if not game_end then
11668: LD_EXP 33
11672: NOT
11673: IFFALSE 11683
// game_end := true ;
11675: LD_ADDR_EXP 33
11679: PUSH
11680: LD_INT 1
11682: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11683: LD_ADDR_VAR 0 2
11687: PUSH
11688: LD_INT 9
11690: PPUSH
11691: LD_INT 22
11693: PUSH
11694: LD_INT 1
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PPUSH
11701: CALL_OW 70
11705: ST_TO_ADDR
// if not filter then
11706: LD_VAR 0 2
11710: NOT
11711: IFFALSE 11715
// exit ;
11713: GO 11839
// for i in filter do
11715: LD_ADDR_VAR 0 1
11719: PUSH
11720: LD_VAR 0 2
11724: PUSH
11725: FOR_IN
11726: IFFALSE 11837
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle and GetNation ( i ) = nation_american then
11728: LD_VAR 0 1
11732: PPUSH
11733: CALL_OW 302
11737: PUSH
11738: LD_VAR 0 1
11742: PPUSH
11743: CALL_OW 247
11747: PUSH
11748: LD_INT 2
11750: EQUAL
11751: AND
11752: PUSH
11753: LD_VAR 0 1
11757: PPUSH
11758: CALL_OW 248
11762: PUSH
11763: LD_INT 1
11765: EQUAL
11766: AND
11767: IFFALSE 11800
// begin veh_on_meta := true ;
11769: LD_ADDR_EXP 28
11773: PUSH
11774: LD_INT 1
11776: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
11777: LD_VAR 0 1
11781: PPUSH
11782: CALL_OW 311
11786: PPUSH
11787: CALL 11842 0 1
// RemoveUnit ( i ) ;
11791: LD_VAR 0 1
11795: PPUSH
11796: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
11800: LD_VAR 0 1
11804: PPUSH
11805: CALL_OW 302
11809: PUSH
11810: LD_VAR 0 1
11814: PPUSH
11815: CALL_OW 247
11819: PUSH
11820: LD_INT 1
11822: EQUAL
11823: AND
11824: IFFALSE 11835
// Save ( i ) ;
11826: LD_VAR 0 1
11830: PPUSH
11831: CALL 11842 0 1
// end ;
11835: GO 11725
11837: POP
11838: POP
// end ;
11839: PPOPN 2
11841: END
// export function Save ( i ) ; begin
11842: LD_INT 0
11844: PPUSH
// save_counter := save_counter + 1 ;
11845: LD_ADDR_EXP 36
11849: PUSH
11850: LD_EXP 36
11854: PUSH
11855: LD_INT 1
11857: PLUS
11858: ST_TO_ADDR
// if i = JMM then
11859: LD_VAR 0 1
11863: PUSH
11864: LD_EXP 37
11868: EQUAL
11869: IFFALSE 11991
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
11871: LD_EXP 24
11875: PUSH
11876: LD_INT 22
11878: PUSH
11879: LD_INT 1
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 21
11888: PUSH
11889: LD_INT 1
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PPUSH
11900: CALL_OW 69
11904: PUSH
11905: LD_INT 1
11907: GREATER
11908: AND
11909: IFFALSE 11966
// begin show_query := false ;
11911: LD_ADDR_EXP 24
11915: PUSH
11916: LD_INT 0
11918: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
11919: LD_STRING Q2
11921: PPUSH
11922: CALL_OW 97
11926: PUSH
11927: LD_INT 1
11929: DOUBLE
11930: EQUAL
11931: IFTRUE 11935
11933: GO 11946
11935: POP
// wait_for_them := true ; 2 :
11936: LD_ADDR_EXP 25
11940: PUSH
11941: LD_INT 1
11943: ST_TO_ADDR
11944: GO 11966
11946: LD_INT 2
11948: DOUBLE
11949: EQUAL
11950: IFTRUE 11954
11952: GO 11965
11954: POP
// wait_for_them := false ; end ;
11955: LD_ADDR_EXP 25
11959: PUSH
11960: LD_INT 0
11962: ST_TO_ADDR
11963: GO 11966
11965: POP
// end ; save_group := save_group ^ JMM ;
11966: LD_ADDR_EXP 23
11970: PUSH
11971: LD_EXP 23
11975: PUSH
11976: LD_EXP 37
11980: ADD
11981: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
11982: LD_EXP 37
11986: PPUSH
11987: CALL_OW 64
// end ; if i = Lisa then
11991: LD_VAR 0 1
11995: PUSH
11996: LD_EXP 40
12000: EQUAL
12001: IFFALSE 12028
// begin save_group := save_group ^ Lisa ;
12003: LD_ADDR_EXP 23
12007: PUSH
12008: LD_EXP 23
12012: PUSH
12013: LD_EXP 40
12017: ADD
12018: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12019: LD_EXP 40
12023: PPUSH
12024: CALL_OW 64
// end ; if i = Bobby then
12028: LD_VAR 0 1
12032: PUSH
12033: LD_EXP 38
12037: EQUAL
12038: IFFALSE 12065
// begin save_group := save_group ^ Bobby ;
12040: LD_ADDR_EXP 23
12044: PUSH
12045: LD_EXP 23
12049: PUSH
12050: LD_EXP 38
12054: ADD
12055: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12056: LD_EXP 38
12060: PPUSH
12061: CALL_OW 64
// end ; if i = Cyrus then
12065: LD_VAR 0 1
12069: PUSH
12070: LD_EXP 39
12074: EQUAL
12075: IFFALSE 12102
// begin save_group := save_group ^ Cyrus ;
12077: LD_ADDR_EXP 23
12081: PUSH
12082: LD_EXP 23
12086: PUSH
12087: LD_EXP 39
12091: ADD
12092: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12093: LD_EXP 39
12097: PPUSH
12098: CALL_OW 64
// end ; if i = Khatam then
12102: LD_VAR 0 1
12106: PUSH
12107: LD_EXP 41
12111: EQUAL
12112: IFFALSE 12139
// begin save_group := save_group ^ Khatam ;
12114: LD_ADDR_EXP 23
12118: PUSH
12119: LD_EXP 23
12123: PUSH
12124: LD_EXP 41
12128: ADD
12129: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12130: LD_EXP 41
12134: PPUSH
12135: CALL_OW 64
// end ; if i = Frank then
12139: LD_VAR 0 1
12143: PUSH
12144: LD_EXP 51
12148: EQUAL
12149: IFFALSE 12176
// begin save_group := save_group ^ Frank ;
12151: LD_ADDR_EXP 23
12155: PUSH
12156: LD_EXP 23
12160: PUSH
12161: LD_EXP 51
12165: ADD
12166: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12167: LD_EXP 51
12171: PPUSH
12172: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12176: LD_VAR 0 1
12180: PPUSH
12181: CALL_OW 302
12185: PUSH
12186: LD_VAR 0 1
12190: PPUSH
12191: CALL_OW 247
12195: PUSH
12196: LD_INT 1
12198: EQUAL
12199: AND
12200: PUSH
12201: LD_VAR 0 1
12205: PUSH
12206: LD_EXP 23
12210: IN
12211: NOT
12212: AND
12213: IFFALSE 12240
// begin save_others := save_others ^ i ;
12215: LD_ADDR_EXP 22
12219: PUSH
12220: LD_EXP 22
12224: PUSH
12225: LD_VAR 0 1
12229: ADD
12230: ST_TO_ADDR
// RemoveUnit ( i ) ;
12231: LD_VAR 0 1
12235: PPUSH
12236: CALL_OW 64
// end ; end ;
12240: LD_VAR 0 2
12244: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12245: LD_EXP 24
12249: NOT
12250: PUSH
12251: LD_EXP 25
12255: NOT
12256: AND
12257: PUSH
12258: LD_INT 22
12260: PUSH
12261: LD_INT 1
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 21
12270: PUSH
12271: LD_INT 1
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PPUSH
12282: CALL_OW 69
12286: PUSH
12287: LD_INT 0
12289: EQUAL
12290: OR
12291: IFFALSE 12300
12293: GO 12295
12295: DISABLE
// EndMission ;
12296: CALL 12301 0 0
12300: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12301: LD_INT 0
12303: PPUSH
12304: PPUSH
12305: PPUSH
12306: PPUSH
12307: PPUSH
// wait ( 0 0$01 ) ;
12308: LD_INT 35
12310: PPUSH
12311: CALL_OW 67
// if tick <= 12 12$00 then
12315: LD_OWVAR 1
12319: PUSH
12320: LD_INT 25200
12322: LESSEQUAL
12323: IFFALSE 12332
// SetAchievement ( ACH_ASPEED_3 ) ;
12325: LD_STRING ACH_ASPEED_3
12327: PPUSH
12328: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12332: LD_EXP 23
12336: PUSH
12337: LD_EXP 22
12341: ADD
12342: PPUSH
12343: LD_INT 25
12345: PUSH
12346: LD_INT 4
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PPUSH
12353: CALL_OW 72
12357: PUSH
12358: LD_INT 0
12360: EQUAL
12361: IFFALSE 12377
// begin wait ( 3 ) ;
12363: LD_INT 3
12365: PPUSH
12366: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
12370: LD_STRING ACH_NOSCI
12372: PPUSH
12373: CALL_OW 543
// end ; m1 := solar_builded ;
12377: LD_ADDR_VAR 0 3
12381: PUSH
12382: LD_EXP 14
12386: ST_TO_ADDR
// m2 := veh_on_meta ;
12387: LD_ADDR_VAR 0 4
12391: PUSH
12392: LD_EXP 28
12396: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
12397: LD_ADDR_VAR 0 5
12401: PUSH
12402: LD_EXP 34
12406: PUSH
12407: LD_INT 0
12409: EQUAL
12410: ST_TO_ADDR
// if solar_builded then
12411: LD_EXP 14
12415: IFFALSE 12429
// AddMedal ( Solar1 , 1 ) else
12417: LD_STRING Solar1
12419: PPUSH
12420: LD_INT 1
12422: PPUSH
12423: CALL_OW 101
12427: GO 12440
// AddMedal ( Solar1 , - 1 ) ;
12429: LD_STRING Solar1
12431: PPUSH
12432: LD_INT 1
12434: NEG
12435: PPUSH
12436: CALL_OW 101
// if veh_on_meta then
12440: LD_EXP 28
12444: IFFALSE 12458
// AddMedal ( Solar2 , 1 ) else
12446: LD_STRING Solar2
12448: PPUSH
12449: LD_INT 1
12451: PPUSH
12452: CALL_OW 101
12456: GO 12488
// if solar_builded then
12458: LD_EXP 14
12462: IFFALSE 12477
// AddMedal ( Solar2 , - 1 ) else
12464: LD_STRING Solar2
12466: PPUSH
12467: LD_INT 1
12469: NEG
12470: PPUSH
12471: CALL_OW 101
12475: GO 12488
// AddMedal ( Solar2 , - 2 ) ;
12477: LD_STRING Solar2
12479: PPUSH
12480: LD_INT 2
12482: NEG
12483: PPUSH
12484: CALL_OW 101
// if lose_counter = 0 then
12488: LD_EXP 34
12492: PUSH
12493: LD_INT 0
12495: EQUAL
12496: IFFALSE 12510
// AddMedal ( No , 1 ) else
12498: LD_STRING No
12500: PPUSH
12501: LD_INT 1
12503: PPUSH
12504: CALL_OW 101
12508: GO 12554
// if lose_counter > 0 and lose_counter < 4 then
12510: LD_EXP 34
12514: PUSH
12515: LD_INT 0
12517: GREATER
12518: PUSH
12519: LD_EXP 34
12523: PUSH
12524: LD_INT 4
12526: LESS
12527: AND
12528: IFFALSE 12543
// AddMedal ( No , - 1 ) else
12530: LD_STRING No
12532: PPUSH
12533: LD_INT 1
12535: NEG
12536: PPUSH
12537: CALL_OW 101
12541: GO 12554
// AddMedal ( UpTo4 , - 1 ) ;
12543: LD_STRING UpTo4
12545: PPUSH
12546: LD_INT 1
12548: NEG
12549: PPUSH
12550: CALL_OW 101
// GiveMedals ( MAIN ) ;
12554: LD_STRING MAIN
12556: PPUSH
12557: CALL_OW 102
// if Difficulty = 3 and m1 and m2 and m3 then
12561: LD_OWVAR 67
12565: PUSH
12566: LD_INT 3
12568: EQUAL
12569: PUSH
12570: LD_VAR 0 3
12574: AND
12575: PUSH
12576: LD_VAR 0 4
12580: AND
12581: PUSH
12582: LD_VAR 0 5
12586: AND
12587: IFFALSE 12599
// SetAchievementEX ( ACH_AMER , 3 ) ;
12589: LD_STRING ACH_AMER
12591: PPUSH
12592: LD_INT 3
12594: PPUSH
12595: CALL_OW 564
// if IsDead ( Pokryshkin ) then
12599: LD_EXP 52
12603: PPUSH
12604: CALL_OW 301
12608: IFFALSE 12664
// begin stop_talking := true ;
12610: LD_ADDR_OWVAR 56
12614: PUSH
12615: LD_INT 1
12617: ST_TO_ADDR
// for i in save_group ^ save_others do
12618: LD_ADDR_VAR 0 2
12622: PUSH
12623: LD_EXP 23
12627: PUSH
12628: LD_EXP 22
12632: ADD
12633: PUSH
12634: FOR_IN
12635: IFFALSE 12654
// AddExperience ( i , skill_combat , 1500 ) ;
12637: LD_VAR 0 2
12641: PPUSH
12642: LD_INT 1
12644: PPUSH
12645: LD_INT 1500
12647: PPUSH
12648: CALL_OW 492
12652: GO 12634
12654: POP
12655: POP
// stop_talking := false ;
12656: LD_ADDR_OWVAR 56
12660: PUSH
12661: LD_INT 0
12663: ST_TO_ADDR
// end ; RewardPeople ( save_group ^ save_others ) ;
12664: LD_EXP 23
12668: PUSH
12669: LD_EXP 22
12673: ADD
12674: PPUSH
12675: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
12679: LD_EXP 37
12683: PPUSH
12684: LD_EXP 2
12688: PUSH
12689: LD_STRING JMM
12691: STR
12692: PPUSH
12693: CALL_OW 38
// if Bobby in save_group then
12697: LD_EXP 38
12701: PUSH
12702: LD_EXP 23
12706: IN
12707: IFFALSE 12727
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
12709: LD_EXP 38
12713: PPUSH
12714: LD_EXP 2
12718: PUSH
12719: LD_STRING Bobby
12721: STR
12722: PPUSH
12723: CALL_OW 38
// if Cyrus in save_group then
12727: LD_EXP 39
12731: PUSH
12732: LD_EXP 23
12736: IN
12737: IFFALSE 12757
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
12739: LD_EXP 39
12743: PPUSH
12744: LD_EXP 2
12748: PUSH
12749: LD_STRING Cyrus
12751: STR
12752: PPUSH
12753: CALL_OW 38
// if Lisa in save_group then
12757: LD_EXP 40
12761: PUSH
12762: LD_EXP 23
12766: IN
12767: IFFALSE 12787
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
12769: LD_EXP 40
12773: PPUSH
12774: LD_EXP 2
12778: PUSH
12779: LD_STRING Lisa
12781: STR
12782: PPUSH
12783: CALL_OW 38
// if Frank in save_group then
12787: LD_EXP 51
12791: PUSH
12792: LD_EXP 23
12796: IN
12797: IFFALSE 12817
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
12799: LD_EXP 51
12803: PPUSH
12804: LD_EXP 2
12808: PUSH
12809: LD_STRING Frank
12811: STR
12812: PPUSH
12813: CALL_OW 38
// if Khatam in save_group then
12817: LD_EXP 41
12821: PUSH
12822: LD_EXP 23
12826: IN
12827: IFFALSE 12847
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
12829: LD_EXP 41
12833: PPUSH
12834: LD_EXP 2
12838: PUSH
12839: LD_STRING Khatam
12841: STR
12842: PPUSH
12843: CALL_OW 38
// if save_others then
12847: LD_EXP 22
12851: IFFALSE 12865
// SaveCharacters ( save_others , 03_others ) ;
12853: LD_EXP 22
12857: PPUSH
12858: LD_STRING 03_others
12860: PPUSH
12861: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
12865: LD_EXP 45
12869: PUSH
12870: LD_EXP 45
12874: PPUSH
12875: CALL_OW 302
12879: AND
12880: PUSH
12881: LD_EXP 27
12885: AND
12886: IFFALSE 12898
// begin ResetFog ;
12888: CALL_OW 335
// DisplayEndingScene ;
12892: CALL 12920 0 0
// end else
12896: GO 12911
// DeleteCharacters ( mission_prefix & Cornel ) ;
12898: LD_EXP 2
12902: PUSH
12903: LD_STRING Cornel
12905: STR
12906: PPUSH
12907: CALL_OW 40
// YouWin ;
12911: CALL_OW 103
// end ;
12915: LD_VAR 0 1
12919: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
12920: LD_INT 0
12922: PPUSH
12923: PPUSH
12924: PPUSH
12925: PPUSH
12926: PPUSH
12927: PPUSH
// InGameOn ;
12928: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
12932: LD_INT 208
12934: PPUSH
12935: LD_INT 62
12937: PPUSH
12938: LD_INT 1
12940: PPUSH
12941: LD_INT 10
12943: NEG
12944: PPUSH
12945: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
12949: LD_INT 208
12951: PPUSH
12952: LD_INT 62
12954: PPUSH
12955: LD_INT 1
12957: PPUSH
12958: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
12962: LD_ADDR_VAR 0 3
12966: PUSH
12967: LD_INT 22
12969: PUSH
12970: LD_INT 3
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PUSH
12977: LD_INT 2
12979: PUSH
12980: LD_INT 21
12982: PUSH
12983: LD_INT 2
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: LD_INT 21
12992: PUSH
12993: LD_INT 1
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: LIST
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PPUSH
13009: CALL_OW 69
13013: ST_TO_ADDR
// if filter then
13014: LD_VAR 0 3
13018: IFFALSE 13046
// for i in filter do
13020: LD_ADDR_VAR 0 2
13024: PUSH
13025: LD_VAR 0 3
13029: PUSH
13030: FOR_IN
13031: IFFALSE 13044
// RemoveUnit ( i ) ;
13033: LD_VAR 0 2
13037: PPUSH
13038: CALL_OW 64
13042: GO 13030
13044: POP
13045: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13046: LD_ADDR_VAR 0 3
13050: PUSH
13051: LD_INT 22
13053: PUSH
13054: LD_INT 4
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: LD_INT 21
13063: PUSH
13064: LD_INT 1
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PPUSH
13075: CALL_OW 69
13079: ST_TO_ADDR
// if filter then
13080: LD_VAR 0 3
13084: IFFALSE 13115
// for i in filter do
13086: LD_ADDR_VAR 0 2
13090: PUSH
13091: LD_VAR 0 3
13095: PUSH
13096: FOR_IN
13097: IFFALSE 13113
// SetLives ( i , 0 ) ;
13099: LD_VAR 0 2
13103: PPUSH
13104: LD_INT 0
13106: PPUSH
13107: CALL_OW 234
13111: GO 13096
13113: POP
13114: POP
// uc_side := 4 ;
13115: LD_ADDR_OWVAR 20
13119: PUSH
13120: LD_INT 4
13122: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ) ;
13123: LD_ADDR_VAR 0 4
13127: PUSH
13128: LD_STRING Cornell
13130: PPUSH
13131: LD_INT 0
13133: PPUSH
13134: CALL 489 0 2
13138: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13139: LD_VAR 0 4
13143: PPUSH
13144: LD_INT 208
13146: PPUSH
13147: LD_INT 62
13149: PPUSH
13150: LD_INT 0
13152: PPUSH
13153: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13157: LD_VAR 0 4
13161: PPUSH
13162: LD_INT 100
13164: PPUSH
13165: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13169: LD_INT 3
13171: PPUSH
13172: LD_VAR 0 4
13176: PPUSH
13177: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13181: LD_INT 4
13183: PPUSH
13184: LD_INT 3
13186: PPUSH
13187: LD_INT 1
13189: PPUSH
13190: LD_INT 1
13192: PPUSH
13193: CALL_OW 80
// uc_side := 3 ;
13197: LD_ADDR_OWVAR 20
13201: PUSH
13202: LD_INT 3
13204: ST_TO_ADDR
// uc_nation := 3 ;
13205: LD_ADDR_OWVAR 21
13209: PUSH
13210: LD_INT 3
13212: ST_TO_ADDR
// InitHc ;
13213: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ) ;
13217: LD_ADDR_VAR 0 5
13221: PUSH
13222: LD_STRING Mikhail
13224: PPUSH
13225: LD_INT 0
13227: PPUSH
13228: CALL 489 0 2
13232: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13233: LD_INT 1
13235: PPUSH
13236: LD_INT 1
13238: PPUSH
13239: LD_INT 0
13241: PPUSH
13242: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13246: LD_ADDR_VAR 0 6
13250: PUSH
13251: LD_VAR 0 6
13255: PUSH
13256: CALL_OW 44
13260: ADD
13261: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13262: LD_ADDR_VAR 0 6
13266: PUSH
13267: LD_VAR 0 6
13271: PUSH
13272: CALL_OW 44
13276: ADD
13277: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13278: LD_INT 2
13280: PPUSH
13281: LD_INT 4
13283: PPUSH
13284: LD_INT 0
13286: PPUSH
13287: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13291: LD_ADDR_VAR 0 6
13295: PUSH
13296: LD_VAR 0 6
13300: PUSH
13301: CALL_OW 44
13305: ADD
13306: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13307: LD_VAR 0 5
13311: PPUSH
13312: LD_INT 17
13314: PPUSH
13315: LD_INT 0
13317: PPUSH
13318: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13322: LD_VAR 0 5
13326: PPUSH
13327: LD_INT 210
13329: PPUSH
13330: LD_INT 63
13332: PPUSH
13333: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
13337: LD_VAR 0 5
13341: PPUSH
13342: LD_INT 208
13344: PPUSH
13345: LD_INT 62
13347: PPUSH
13348: CALL_OW 178
// for i in fake_russians do
13352: LD_ADDR_VAR 0 2
13356: PUSH
13357: LD_VAR 0 6
13361: PUSH
13362: FOR_IN
13363: IFFALSE 13441
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
13365: LD_VAR 0 2
13369: PPUSH
13370: LD_INT 17
13372: PPUSH
13373: LD_INT 0
13375: PPUSH
13376: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
13380: LD_VAR 0 2
13384: PPUSH
13385: LD_INT 215
13387: PPUSH
13388: LD_INT 67
13390: PPUSH
13391: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
13395: LD_VAR 0 2
13399: PPUSH
13400: LD_INT 208
13402: PPUSH
13403: LD_INT 62
13405: PPUSH
13406: CALL_OW 178
// if GetClass ( i ) = 4 then
13410: LD_VAR 0 2
13414: PPUSH
13415: CALL_OW 257
13419: PUSH
13420: LD_INT 4
13422: EQUAL
13423: IFFALSE 13439
// ComHeal ( i , fake_cornel ) ;
13425: LD_VAR 0 2
13429: PPUSH
13430: LD_VAR 0 4
13434: PPUSH
13435: CALL_OW 128
// end ;
13439: GO 13362
13441: POP
13442: POP
// Wait ( 0 0$01 ) ;
13443: LD_INT 35
13445: PPUSH
13446: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
13450: LD_INT 208
13452: PPUSH
13453: LD_INT 62
13455: PPUSH
13456: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13460: LD_INT 208
13462: PPUSH
13463: LD_INT 62
13465: PPUSH
13466: LD_INT 1
13468: PPUSH
13469: LD_INT 10
13471: NEG
13472: PPUSH
13473: CALL_OW 330
// Wait ( 0 0$15 ) ;
13477: LD_INT 525
13479: PPUSH
13480: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
13484: LD_INT 208
13486: PPUSH
13487: LD_INT 62
13489: PPUSH
13490: LD_INT 1
13492: PPUSH
13493: CALL_OW 331
// ResetFog ;
13497: CALL_OW 335
// InGameOff ;
13501: CALL_OW 9
// end ;
13505: LD_VAR 0 1
13509: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
13510: LD_INT 10
13512: PPUSH
13513: LD_INT 22
13515: PUSH
13516: LD_INT 1
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: PPUSH
13523: CALL_OW 70
13527: PUSH
13528: LD_EXP 44
13532: PPUSH
13533: CALL_OW 302
13537: AND
13538: PUSH
13539: LD_INT 22
13541: PUSH
13542: LD_INT 1
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: PPUSH
13549: CALL_OW 69
13553: PPUSH
13554: LD_EXP 44
13558: PPUSH
13559: CALL_OW 74
13563: PPUSH
13564: LD_EXP 44
13568: PPUSH
13569: CALL_OW 296
13573: PUSH
13574: LD_INT 30
13576: LESS
13577: OR
13578: IFFALSE 13629
13580: GO 13582
13582: DISABLE
// begin enable ;
13583: ENABLE
// powell_warn := powell_warn + 1 ;
13584: LD_ADDR_EXP 35
13588: PUSH
13589: LD_EXP 35
13593: PUSH
13594: LD_INT 1
13596: PLUS
13597: ST_TO_ADDR
// if powell_warn = 3 then
13598: LD_EXP 35
13602: PUSH
13603: LD_INT 3
13605: EQUAL
13606: IFFALSE 13617
// begin YouLost ( 5 ) ;
13608: LD_STRING 5
13610: PPUSH
13611: CALL_OW 104
// exit ;
13615: GO 13629
// end ; SayRadio ( Powell , DWarn-Pow-1 ) ;
13617: LD_EXP 46
13621: PPUSH
13622: LD_STRING DWarn-Pow-1
13624: PPUSH
13625: CALL_OW 94
// end ; end_of_file
13629: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
13630: LD_EXP 8
13634: IFFALSE 15471
13636: GO 13638
13638: DISABLE
13639: LD_INT 0
13641: PPUSH
13642: PPUSH
13643: PPUSH
13644: PPUSH
13645: PPUSH
13646: PPUSH
13647: PPUSH
13648: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
13649: LD_EXP 44
13653: PUSH
13654: LD_EXP 45
13658: ADD
13659: PUSH
13660: LD_EXP 6
13664: ADD
13665: PPUSH
13666: LD_INT 250
13668: PPUSH
13669: LD_INT 120
13671: PPUSH
13672: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
13676: LD_ADDR_VAR 0 2
13680: PUSH
13681: LD_EXP 6
13685: PPUSH
13686: LD_INT 25
13688: PUSH
13689: LD_INT 2
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PPUSH
13696: CALL_OW 72
13700: PUSH
13701: LD_EXP 45
13705: DIFF
13706: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
13707: LD_ADDR_VAR 0 3
13711: PUSH
13712: LD_EXP 6
13716: PPUSH
13717: LD_INT 21
13719: PUSH
13720: LD_INT 1
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PPUSH
13727: CALL_OW 72
13731: PUSH
13732: LD_VAR 0 2
13736: DIFF
13737: ST_TO_ADDR
// if not has_eng then
13738: LD_VAR 0 2
13742: NOT
13743: IFFALSE 13826
// begin uc_side := 4 ;
13745: LD_ADDR_OWVAR 20
13749: PUSH
13750: LD_INT 4
13752: ST_TO_ADDR
// uc_nation := 1 ;
13753: LD_ADDR_OWVAR 21
13757: PUSH
13758: LD_INT 1
13760: ST_TO_ADDR
// bc_type := b_depot ;
13761: LD_ADDR_OWVAR 42
13765: PUSH
13766: LD_INT 0
13768: ST_TO_ADDR
// bc_level := 2 ;
13769: LD_ADDR_OWVAR 43
13773: PUSH
13774: LD_INT 2
13776: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
13777: LD_ADDR_VAR 0 4
13781: PUSH
13782: LD_INT 264
13784: PPUSH
13785: LD_INT 120
13787: PPUSH
13788: LD_INT 4
13790: PPUSH
13791: CALL_OW 47
13795: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
13796: LD_INT 264
13798: PPUSH
13799: LD_INT 120
13801: PPUSH
13802: LD_INT 4
13804: PPUSH
13805: LD_INT 10
13807: NEG
13808: PPUSH
13809: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
13813: LD_INT 264
13815: PPUSH
13816: LD_INT 120
13818: PPUSH
13819: LD_INT 4
13821: PPUSH
13822: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
13826: LD_INT 35
13828: PPUSH
13829: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
13833: LD_EXP 44
13837: PPUSH
13838: LD_INT 10
13840: PPUSH
13841: CALL_OW 308
13845: PUSH
13846: LD_EXP 44
13850: PPUSH
13851: CALL_OW 310
13855: PPUSH
13856: LD_INT 10
13858: PPUSH
13859: CALL_OW 308
13863: OR
13864: IFFALSE 13826
// if has_eng and not dep then
13866: LD_VAR 0 2
13870: PUSH
13871: LD_VAR 0 4
13875: NOT
13876: AND
13877: IFFALSE 14027
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
13879: LD_VAR 0 2
13883: PPUSH
13884: LD_INT 0
13886: PPUSH
13887: LD_INT 264
13889: PPUSH
13890: LD_INT 120
13892: PPUSH
13893: LD_INT 4
13895: PPUSH
13896: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
13900: LD_INT 35
13902: PPUSH
13903: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
13907: LD_INT 22
13909: PUSH
13910: LD_INT 4
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: LD_INT 30
13919: PUSH
13920: LD_INT 0
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PPUSH
13931: CALL_OW 69
13935: IFFALSE 13900
// ComMoveXY ( filter , 264 , 120 ) ;
13937: LD_VAR 0 3
13941: PPUSH
13942: LD_INT 264
13944: PPUSH
13945: LD_INT 120
13947: PPUSH
13948: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
13952: LD_INT 35
13954: PPUSH
13955: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
13959: LD_INT 22
13961: PUSH
13962: LD_INT 4
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: LD_INT 30
13971: PUSH
13972: LD_INT 0
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 3
13981: PUSH
13982: LD_INT 57
13984: PUSH
13985: EMPTY
13986: LIST
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: LIST
13996: PPUSH
13997: CALL_OW 69
14001: IFFALSE 13952
// ComMoveXY ( filter , 247 , 113 ) ;
14003: LD_VAR 0 3
14007: PPUSH
14008: LD_INT 247
14010: PPUSH
14011: LD_INT 113
14013: PPUSH
14014: CALL_OW 111
// Wait ( 0 0$2 ) ;
14018: LD_INT 70
14020: PPUSH
14021: CALL_OW 67
// end else
14025: GO 14039
// begin SetSide ( dep , 4 ) ;
14027: LD_VAR 0 4
14031: PPUSH
14032: LD_INT 4
14034: PPUSH
14035: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14039: LD_ADDR_VAR 0 4
14043: PUSH
14044: LD_INT 22
14046: PUSH
14047: LD_INT 4
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PUSH
14054: LD_INT 30
14056: PUSH
14057: LD_INT 0
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PPUSH
14068: CALL_OW 69
14072: PUSH
14073: LD_INT 1
14075: ARRAY
14076: ST_TO_ADDR
// if not has_eng then
14077: LD_VAR 0 2
14081: NOT
14082: IFFALSE 14169
// for i = 1 to 2 do
14084: LD_ADDR_VAR 0 1
14088: PUSH
14089: DOUBLE
14090: LD_INT 1
14092: DEC
14093: ST_TO_ADDR
14094: LD_INT 2
14096: PUSH
14097: FOR_TO
14098: IFFALSE 14167
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14100: LD_VAR 0 3
14104: PUSH
14105: LD_INT 1
14107: ARRAY
14108: PPUSH
14109: LD_VAR 0 4
14113: PPUSH
14114: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14118: LD_VAR 0 3
14122: PUSH
14123: LD_INT 1
14125: ARRAY
14126: PPUSH
14127: LD_INT 2
14129: PPUSH
14130: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14134: LD_VAR 0 3
14138: PUSH
14139: LD_INT 1
14141: ARRAY
14142: PPUSH
14143: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14147: LD_ADDR_VAR 0 3
14151: PUSH
14152: LD_VAR 0 3
14156: PPUSH
14157: LD_INT 1
14159: PPUSH
14160: CALL_OW 3
14164: ST_TO_ADDR
// end ;
14165: GO 14097
14167: POP
14168: POP
// if IsInUnit ( Cornel ) then
14169: LD_EXP 44
14173: PPUSH
14174: CALL_OW 310
14178: IFFALSE 14256
// begin cargo := IsInUnit ( Cornel ) ;
14180: LD_ADDR_VAR 0 7
14184: PUSH
14185: LD_EXP 44
14189: PPUSH
14190: CALL_OW 310
14194: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14195: LD_VAR 0 7
14199: PPUSH
14200: LD_INT 1
14202: PPUSH
14203: CALL_OW 289
14207: IFFALSE 14218
// ComUnload ( cargo ) ;
14209: LD_VAR 0 7
14213: PPUSH
14214: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14218: LD_EXP 44
14222: PPUSH
14223: LD_INT 235
14225: PPUSH
14226: LD_INT 122
14228: PPUSH
14229: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14233: LD_EXP 44
14237: PPUSH
14238: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14242: LD_EXP 44
14246: PPUSH
14247: LD_VAR 0 4
14251: PPUSH
14252: CALL_OW 180
// end ; if Bierezov then
14256: LD_EXP 45
14260: IFFALSE 14308
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14262: LD_EXP 45
14266: PPUSH
14267: LD_INT 260
14269: PPUSH
14270: LD_INT 120
14272: PPUSH
14273: CALL_OW 111
// if dep then
14277: LD_VAR 0 4
14281: IFFALSE 14299
// AddComEnterUnit ( Bierezov , dep ) else
14283: LD_EXP 45
14287: PPUSH
14288: LD_VAR 0 4
14292: PPUSH
14293: CALL_OW 180
14297: GO 14308
// AddComHold ( Bierezov ) ;
14299: LD_EXP 45
14303: PPUSH
14304: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14308: LD_INT 525
14310: PPUSH
14311: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14315: LD_ADDR_VAR 0 2
14319: PUSH
14320: LD_INT 22
14322: PUSH
14323: LD_INT 4
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: LD_INT 25
14332: PUSH
14333: LD_INT 2
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PPUSH
14344: CALL_OW 69
14348: PUSH
14349: LD_EXP 45
14353: DIFF
14354: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14355: LD_INT 35
14357: PPUSH
14358: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
14362: LD_ADDR_VAR 0 6
14366: PUSH
14367: LD_INT 10
14369: PPUSH
14370: CALL_OW 435
14374: ST_TO_ADDR
// if crates then
14375: LD_VAR 0 6
14379: IFFALSE 14408
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
14381: LD_VAR 0 2
14385: PPUSH
14386: LD_VAR 0 6
14390: PUSH
14391: LD_INT 1
14393: ARRAY
14394: PPUSH
14395: LD_VAR 0 6
14399: PUSH
14400: LD_INT 2
14402: ARRAY
14403: PPUSH
14404: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
14408: LD_VAR 0 4
14412: PPUSH
14413: CALL_OW 274
14417: PPUSH
14418: LD_INT 1
14420: PPUSH
14421: CALL_OW 275
14425: PUSH
14426: LD_INT 40
14428: GREATEREQUAL
14429: IFFALSE 14355
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
14431: LD_ADDR_VAR 0 5
14435: PUSH
14436: LD_INT 4
14438: PUSH
14439: LD_INT 256
14441: PUSH
14442: LD_INT 111
14444: PUSH
14445: LD_INT 2
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 31
14456: PUSH
14457: LD_INT 243
14459: PUSH
14460: LD_INT 112
14462: PUSH
14463: LD_INT 2
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: PUSH
14472: LD_INT 31
14474: PUSH
14475: LD_INT 254
14477: PUSH
14478: LD_INT 114
14480: PUSH
14481: LD_INT 2
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: LIST
14494: ST_TO_ADDR
// for i in blist do
14495: LD_ADDR_VAR 0 1
14499: PUSH
14500: LD_VAR 0 5
14504: PUSH
14505: FOR_IN
14506: IFFALSE 14555
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
14508: LD_VAR 0 2
14512: PPUSH
14513: LD_VAR 0 1
14517: PUSH
14518: LD_INT 1
14520: ARRAY
14521: PPUSH
14522: LD_VAR 0 1
14526: PUSH
14527: LD_INT 2
14529: ARRAY
14530: PPUSH
14531: LD_VAR 0 1
14535: PUSH
14536: LD_INT 3
14538: ARRAY
14539: PPUSH
14540: LD_VAR 0 1
14544: PUSH
14545: LD_INT 4
14547: ARRAY
14548: PPUSH
14549: CALL_OW 205
14553: GO 14505
14555: POP
14556: POP
// repeat wait ( 0 0$01 ) ;
14557: LD_INT 35
14559: PPUSH
14560: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
14564: LD_INT 22
14566: PUSH
14567: LD_INT 4
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: PUSH
14574: LD_INT 30
14576: PUSH
14577: LD_INT 4
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: PUSH
14584: LD_INT 3
14586: PUSH
14587: LD_INT 57
14589: PUSH
14590: EMPTY
14591: LIST
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: LIST
14601: PPUSH
14602: CALL_OW 69
14606: IFFALSE 14557
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14608: LD_VAR 0 3
14612: PPUSH
14613: LD_INT 22
14615: PUSH
14616: LD_INT 4
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 30
14625: PUSH
14626: LD_INT 4
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PPUSH
14637: CALL_OW 69
14641: PUSH
14642: LD_INT 1
14644: ARRAY
14645: PPUSH
14646: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
14650: LD_VAR 0 3
14654: PPUSH
14655: LD_INT 1
14657: PPUSH
14658: CALL_OW 183
// if has_eng > 1 then
14662: LD_VAR 0 2
14666: PUSH
14667: LD_INT 1
14669: GREATER
14670: IFFALSE 14812
// for i = has_eng downto 2 do
14672: LD_ADDR_VAR 0 1
14676: PUSH
14677: DOUBLE
14678: LD_VAR 0 2
14682: INC
14683: ST_TO_ADDR
14684: LD_INT 2
14686: PUSH
14687: FOR_DOWNTO
14688: IFFALSE 14810
// begin if IsInUnit ( has_eng [ i ] ) then
14690: LD_VAR 0 2
14694: PUSH
14695: LD_VAR 0 1
14699: ARRAY
14700: PPUSH
14701: CALL_OW 310
14705: IFFALSE 14722
// ComExitBuilding ( has_eng [ i ] ) ;
14707: LD_VAR 0 2
14711: PUSH
14712: LD_VAR 0 1
14716: ARRAY
14717: PPUSH
14718: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14722: LD_VAR 0 2
14726: PUSH
14727: LD_VAR 0 1
14731: ARRAY
14732: PPUSH
14733: LD_INT 22
14735: PUSH
14736: LD_INT 4
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PUSH
14743: LD_INT 30
14745: PUSH
14746: LD_INT 4
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PPUSH
14757: CALL_OW 69
14761: PUSH
14762: LD_INT 1
14764: ARRAY
14765: PPUSH
14766: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
14770: LD_VAR 0 2
14774: PUSH
14775: LD_VAR 0 1
14779: ARRAY
14780: PPUSH
14781: LD_INT 1
14783: PPUSH
14784: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
14788: LD_ADDR_VAR 0 2
14792: PUSH
14793: LD_VAR 0 2
14797: PPUSH
14798: LD_VAR 0 1
14802: PPUSH
14803: CALL_OW 3
14807: ST_TO_ADDR
// end ;
14808: GO 14687
14810: POP
14811: POP
// repeat wait ( 0 0$01 ) ;
14812: LD_INT 35
14814: PPUSH
14815: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
14819: LD_INT 22
14821: PUSH
14822: LD_INT 4
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 30
14831: PUSH
14832: LD_INT 31
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 3
14841: PUSH
14842: LD_INT 57
14844: PUSH
14845: EMPTY
14846: LIST
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: LIST
14856: PPUSH
14857: CALL_OW 69
14861: PUSH
14862: LD_INT 1
14864: GREATER
14865: IFFALSE 14812
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
14867: LD_ADDR_VAR 0 8
14871: PUSH
14872: LD_EXP 6
14876: PPUSH
14877: LD_INT 25
14879: PUSH
14880: LD_INT 1
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PPUSH
14887: CALL_OW 72
14891: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
14892: LD_ADDR_VAR 0 1
14896: PUSH
14897: DOUBLE
14898: LD_INT 1
14900: DEC
14901: ST_TO_ADDR
14902: LD_INT 22
14904: PUSH
14905: LD_INT 4
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PUSH
14912: LD_INT 30
14914: PUSH
14915: LD_INT 31
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: PUSH
14922: LD_INT 3
14924: PUSH
14925: LD_INT 57
14927: PUSH
14928: EMPTY
14929: LIST
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: LIST
14939: PPUSH
14940: CALL_OW 69
14944: PUSH
14945: FOR_TO
14946: IFFALSE 15030
// begin if not sol [ i ] then
14948: LD_VAR 0 8
14952: PUSH
14953: LD_VAR 0 1
14957: ARRAY
14958: NOT
14959: IFFALSE 14963
// break ;
14961: GO 15030
// ComExitBuilding ( sol [ i ] ) ;
14963: LD_VAR 0 8
14967: PUSH
14968: LD_VAR 0 1
14972: ARRAY
14973: PPUSH
14974: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
14978: LD_VAR 0 8
14982: PUSH
14983: LD_VAR 0 1
14987: ARRAY
14988: PPUSH
14989: LD_INT 22
14991: PUSH
14992: LD_INT 4
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 30
15001: PUSH
15002: LD_INT 31
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PPUSH
15013: CALL_OW 69
15017: PUSH
15018: LD_VAR 0 1
15022: ARRAY
15023: PPUSH
15024: CALL_OW 180
// end ;
15028: GO 14945
15030: POP
15031: POP
// if sol > 3 then
15032: LD_VAR 0 8
15036: PUSH
15037: LD_INT 3
15039: GREATER
15040: IFFALSE 15157
// begin ComExitBuilding ( sol [ 3 ] ) ;
15042: LD_VAR 0 8
15046: PUSH
15047: LD_INT 3
15049: ARRAY
15050: PPUSH
15051: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15055: LD_VAR 0 8
15059: PUSH
15060: LD_INT 3
15062: ARRAY
15063: PPUSH
15064: LD_INT 246
15066: PPUSH
15067: LD_INT 94
15069: PPUSH
15070: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15074: LD_VAR 0 8
15078: PUSH
15079: LD_INT 3
15081: ARRAY
15082: PPUSH
15083: LD_INT 175
15085: PPUSH
15086: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15090: LD_VAR 0 8
15094: PUSH
15095: LD_INT 3
15097: ARRAY
15098: PPUSH
15099: LD_INT 224
15101: PPUSH
15102: LD_INT 90
15104: PPUSH
15105: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15109: LD_VAR 0 8
15113: PUSH
15114: LD_INT 3
15116: ARRAY
15117: PPUSH
15118: LD_INT 245
15120: PPUSH
15121: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15125: LD_VAR 0 8
15129: PUSH
15130: LD_INT 3
15132: ARRAY
15133: PPUSH
15134: LD_INT 223
15136: PPUSH
15137: LD_INT 110
15139: PPUSH
15140: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15144: LD_VAR 0 8
15148: PUSH
15149: LD_INT 3
15151: ARRAY
15152: PPUSH
15153: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15157: LD_VAR 0 2
15161: PPUSH
15162: LD_VAR 0 4
15166: PPUSH
15167: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15171: LD_INT 22
15173: PUSH
15174: LD_INT 4
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PUSH
15181: LD_INT 30
15183: PUSH
15184: LD_INT 4
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PPUSH
15195: CALL_OW 69
15199: PUSH
15200: LD_INT 1
15202: ARRAY
15203: PPUSH
15204: CALL_OW 313
15208: PUSH
15209: LD_INT 6
15211: LESS
15212: IFFALSE 15276
// begin if IsInUnit ( Cornel ) then
15214: LD_EXP 44
15218: PPUSH
15219: CALL_OW 310
15223: IFFALSE 15234
// ComExitBuilding ( Cornel ) ;
15225: LD_EXP 44
15229: PPUSH
15230: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15234: LD_EXP 44
15238: PPUSH
15239: LD_INT 22
15241: PUSH
15242: LD_INT 4
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PUSH
15249: LD_INT 30
15251: PUSH
15252: LD_INT 4
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: PPUSH
15263: CALL_OW 69
15267: PUSH
15268: LD_INT 1
15270: ARRAY
15271: PPUSH
15272: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15276: LD_INT 35
15278: PPUSH
15279: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15283: LD_ADDR_VAR 0 3
15287: PUSH
15288: LD_INT 22
15290: PUSH
15291: LD_INT 4
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 21
15300: PUSH
15301: LD_INT 3
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: LD_INT 24
15313: PUSH
15314: LD_INT 1000
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: LIST
15329: PPUSH
15330: CALL_OW 69
15334: ST_TO_ADDR
// if filter and has_eng then
15335: LD_VAR 0 3
15339: PUSH
15340: LD_VAR 0 2
15344: AND
15345: IFFALSE 15411
// begin for i in has_eng do
15347: LD_ADDR_VAR 0 1
15351: PUSH
15352: LD_VAR 0 2
15356: PUSH
15357: FOR_IN
15358: IFFALSE 15407
// begin if IsInUnit ( i ) then
15360: LD_VAR 0 1
15364: PPUSH
15365: CALL_OW 310
15369: IFFALSE 15380
// ComExitBuilding ( i ) ;
15371: LD_VAR 0 1
15375: PPUSH
15376: CALL_OW 122
// Wait ( 3 ) ;
15380: LD_INT 3
15382: PPUSH
15383: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
15387: LD_VAR 0 1
15391: PPUSH
15392: LD_VAR 0 3
15396: PUSH
15397: LD_INT 1
15399: ARRAY
15400: PPUSH
15401: CALL_OW 130
// end ;
15405: GO 15357
15407: POP
15408: POP
// end else
15409: GO 15465
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
15411: LD_VAR 0 2
15415: PUSH
15416: LD_VAR 0 2
15420: PPUSH
15421: LD_INT 56
15423: PUSH
15424: EMPTY
15425: LIST
15426: PPUSH
15427: CALL_OW 72
15431: AND
15432: IFFALSE 15465
// for i in has_eng do
15434: LD_ADDR_VAR 0 1
15438: PUSH
15439: LD_VAR 0 2
15443: PUSH
15444: FOR_IN
15445: IFFALSE 15463
// ComEnterUnit ( i , dep ) ;
15447: LD_VAR 0 1
15451: PPUSH
15452: LD_VAR 0 4
15456: PPUSH
15457: CALL_OW 120
15461: GO 15444
15463: POP
15464: POP
// until cornel_prepared ;
15465: LD_EXP 11
15469: IFFALSE 15276
// end ;
15471: PPOPN 8
15473: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
15474: LD_EXP 11
15478: IFFALSE 15877
15480: GO 15482
15482: DISABLE
15483: LD_INT 0
15485: PPUSH
15486: PPUSH
15487: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
15488: LD_ADDR_VAR 0 2
15492: PUSH
15493: LD_INT 22
15495: PUSH
15496: LD_INT 4
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PUSH
15503: LD_INT 30
15505: PUSH
15506: LD_INT 4
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PPUSH
15517: CALL_OW 69
15521: PUSH
15522: LD_INT 1
15524: ARRAY
15525: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
15526: LD_EXP 6
15530: PPUSH
15531: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
15535: LD_EXP 45
15539: PUSH
15540: LD_EXP 45
15544: PPUSH
15545: CALL_OW 310
15549: AND
15550: IFFALSE 15561
// ComExitBuilding ( Bierezov ) ;
15552: LD_EXP 45
15556: PPUSH
15557: CALL_OW 122
// Wait ( 0 0$03 ) ;
15561: LD_INT 105
15563: PPUSH
15564: CALL_OW 67
// for i in cornel_units do
15568: LD_ADDR_VAR 0 1
15572: PUSH
15573: LD_EXP 6
15577: PUSH
15578: FOR_IN
15579: IFFALSE 15655
// begin if GetClass ( i ) in [ 2 , 3 ] then
15581: LD_VAR 0 1
15585: PPUSH
15586: CALL_OW 257
15590: PUSH
15591: LD_INT 2
15593: PUSH
15594: LD_INT 3
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: IN
15601: IFFALSE 15638
// begin ComEnterUnit ( i , arm ) ;
15603: LD_VAR 0 1
15607: PPUSH
15608: LD_VAR 0 2
15612: PPUSH
15613: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
15617: LD_VAR 0 1
15621: PPUSH
15622: LD_INT 1
15624: PPUSH
15625: CALL_OW 183
// AddComExitBuilding ( i ) ;
15629: LD_VAR 0 1
15633: PPUSH
15634: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
15638: LD_VAR 0 1
15642: PPUSH
15643: LD_INT 257
15645: PPUSH
15646: LD_INT 121
15648: PPUSH
15649: CALL_OW 171
// end ;
15653: GO 15578
15655: POP
15656: POP
// Wait ( 1 1$00 ) ;
15657: LD_INT 2100
15659: PPUSH
15660: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
15664: LD_ADDR_VAR 0 3
15668: PUSH
15669: LD_EXP 44
15673: PUSH
15674: LD_EXP 45
15678: ADD
15679: PUSH
15680: LD_EXP 6
15684: ADD
15685: PUSH
15686: LD_EXP 6
15690: PPUSH
15691: LD_INT 21
15693: PUSH
15694: LD_INT 2
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PPUSH
15701: CALL_OW 72
15705: DIFF
15706: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
15707: LD_VAR 0 3
15711: PPUSH
15712: LD_INT 248
15714: PPUSH
15715: LD_INT 85
15717: PPUSH
15718: CALL_OW 111
// AddComHold ( filter ) ;
15722: LD_VAR 0 3
15726: PPUSH
15727: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
15731: LD_INT 35
15733: PPUSH
15734: CALL_OW 67
// until cornel_attack ;
15738: LD_EXP 9
15742: IFFALSE 15731
// ComAgressiveMove ( filter , 209 , 63 ) ;
15744: LD_VAR 0 3
15748: PPUSH
15749: LD_INT 209
15751: PPUSH
15752: LD_INT 63
15754: PPUSH
15755: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
15759: LD_EXP 44
15763: PPUSH
15764: LD_INT 208
15766: PPUSH
15767: LD_INT 62
15769: PPUSH
15770: CALL_OW 114
// AddComHold ( Cornel ) ;
15774: LD_EXP 44
15778: PPUSH
15779: CALL_OW 200
// if Bierezov then
15783: LD_EXP 45
15787: IFFALSE 15877
// begin filter := filter diff Bierezov ;
15789: LD_ADDR_VAR 0 3
15793: PUSH
15794: LD_VAR 0 3
15798: PUSH
15799: LD_EXP 45
15803: DIFF
15804: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
15805: LD_EXP 45
15809: PPUSH
15810: LD_INT 6
15812: PPUSH
15813: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
15817: LD_EXP 45
15821: PPUSH
15822: LD_INT 235
15824: PPUSH
15825: LD_INT 60
15827: PPUSH
15828: CALL_OW 111
// AddComHold ( Bierezov ) ;
15832: LD_EXP 45
15836: PPUSH
15837: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
15841: LD_EXP 45
15845: PPUSH
15846: LD_INT 350
15848: PPUSH
15849: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
15853: LD_EXP 45
15857: PPUSH
15858: LD_INT 198
15860: PPUSH
15861: LD_INT 28
15863: PPUSH
15864: CALL_OW 171
// AddComHold ( Bierezov ) ;
15868: LD_EXP 45
15872: PPUSH
15873: CALL_OW 200
// end ; end ; end_of_file
15877: PPOPN 3
15879: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
15880: LD_EXP 53
15884: PUSH
15885: LD_EXP 31
15889: NOT
15890: AND
15891: PUSH
15892: LD_EXP 32
15896: NOT
15897: AND
15898: IFFALSE 16348
15900: GO 15902
15902: DISABLE
15903: LD_INT 0
15905: PPUSH
15906: PPUSH
15907: PPUSH
15908: PPUSH
// begin enable ;
15909: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
15910: LD_ADDR_VAR 0 4
15914: PUSH
15915: LD_INT 81
15917: PUSH
15918: LD_INT 3
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PPUSH
15925: CALL_OW 69
15929: ST_TO_ADDR
// for i = 1 to ru_patrol do
15930: LD_ADDR_VAR 0 2
15934: PUSH
15935: DOUBLE
15936: LD_INT 1
15938: DEC
15939: ST_TO_ADDR
15940: LD_EXP 53
15944: PUSH
15945: FOR_TO
15946: IFFALSE 16346
// begin un := ru_patrol [ i ] ;
15948: LD_ADDR_VAR 0 1
15952: PUSH
15953: LD_EXP 53
15957: PUSH
15958: LD_VAR 0 2
15962: ARRAY
15963: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
15964: LD_VAR 0 1
15968: PPUSH
15969: LD_INT 13
15971: PPUSH
15972: CALL_OW 308
15976: IFFALSE 16081
// begin if not ru_alert then
15978: LD_EXP 60
15982: NOT
15983: IFFALSE 15993
// ru_alert := true ;
15985: LD_ADDR_EXP 60
15989: PUSH
15990: LD_INT 1
15992: ST_TO_ADDR
// if not See ( 1 , un ) then
15993: LD_INT 1
15995: PPUSH
15996: LD_VAR 0 1
16000: PPUSH
16001: CALL_OW 292
16005: NOT
16006: IFFALSE 16020
// SetLives ( un , 1000 ) ;
16008: LD_VAR 0 1
16012: PPUSH
16013: LD_INT 1000
16015: PPUSH
16016: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16020: LD_ADDR_EXP 53
16024: PUSH
16025: LD_EXP 53
16029: PUSH
16030: LD_VAR 0 1
16034: DIFF
16035: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16036: LD_VAR 0 1
16040: PPUSH
16041: LD_INT 22
16043: PUSH
16044: LD_INT 3
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: PUSH
16051: LD_INT 30
16053: PUSH
16054: LD_INT 4
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PPUSH
16065: CALL_OW 69
16069: PPUSH
16070: CALL 1062 0 1
16074: PPUSH
16075: CALL_OW 120
// continue ;
16079: GO 15945
// end ; if IsOk ( un ) and not HasTask ( un ) then
16081: LD_VAR 0 1
16085: PPUSH
16086: CALL_OW 302
16090: PUSH
16091: LD_VAR 0 1
16095: PPUSH
16096: CALL_OW 314
16100: NOT
16101: AND
16102: IFFALSE 16195
// begin for j = 1 to ru_firepoints_south [ i ] do
16104: LD_ADDR_VAR 0 3
16108: PUSH
16109: DOUBLE
16110: LD_INT 1
16112: DEC
16113: ST_TO_ADDR
16114: LD_EXP 59
16118: PUSH
16119: LD_VAR 0 2
16123: ARRAY
16124: PUSH
16125: FOR_TO
16126: IFFALSE 16193
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16128: LD_VAR 0 1
16132: PPUSH
16133: LD_EXP 59
16137: PUSH
16138: LD_VAR 0 2
16142: ARRAY
16143: PUSH
16144: LD_VAR 0 3
16148: ARRAY
16149: PUSH
16150: LD_INT 1
16152: ARRAY
16153: PPUSH
16154: LD_EXP 59
16158: PUSH
16159: LD_VAR 0 2
16163: ARRAY
16164: PUSH
16165: LD_VAR 0 3
16169: ARRAY
16170: PUSH
16171: LD_INT 2
16173: ARRAY
16174: PPUSH
16175: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16179: LD_VAR 0 1
16183: PPUSH
16184: LD_INT 70
16186: PPUSH
16187: CALL_OW 202
// end ;
16191: GO 16125
16193: POP
16194: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16195: LD_VAR 0 1
16199: PPUSH
16200: CALL_OW 256
16204: PUSH
16205: LD_INT 700
16207: LESS
16208: PUSH
16209: LD_VAR 0 1
16213: PPUSH
16214: LD_INT 13
16216: PPUSH
16217: CALL_OW 308
16221: NOT
16222: AND
16223: IFFALSE 16275
// begin ComMoveToArea ( un , retreatArea ) ;
16225: LD_VAR 0 1
16229: PPUSH
16230: LD_INT 13
16232: PPUSH
16233: CALL_OW 113
// if not ru_alert_xy then
16237: LD_EXP 61
16241: NOT
16242: IFFALSE 16273
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16244: LD_ADDR_EXP 61
16248: PUSH
16249: LD_VAR 0 1
16253: PPUSH
16254: CALL_OW 250
16258: PUSH
16259: LD_VAR 0 1
16263: PPUSH
16264: CALL_OW 251
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: ST_TO_ADDR
// end else
16273: GO 16344
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16275: LD_VAR 0 1
16279: PPUSH
16280: LD_VAR 0 4
16284: PPUSH
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 74
16294: PPUSH
16295: CALL_OW 296
16299: PUSH
16300: LD_INT 9
16302: LESS
16303: PUSH
16304: LD_VAR 0 1
16308: PPUSH
16309: CALL_OW 256
16313: PUSH
16314: LD_INT 500
16316: GREATER
16317: AND
16318: IFFALSE 16344
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
16320: LD_VAR 0 1
16324: PPUSH
16325: LD_VAR 0 4
16329: PPUSH
16330: LD_VAR 0 1
16334: PPUSH
16335: CALL_OW 74
16339: PPUSH
16340: CALL_OW 115
// end ;
16344: GO 15945
16346: POP
16347: POP
// end ;
16348: PPOPN 4
16350: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
16351: LD_EXP 60
16355: PUSH
16356: LD_EXP 61
16360: AND
16361: PUSH
16362: LD_EXP 31
16366: NOT
16367: AND
16368: PUSH
16369: LD_EXP 32
16373: NOT
16374: AND
16375: IFFALSE 16585
16377: GO 16379
16379: DISABLE
16380: LD_INT 0
16382: PPUSH
16383: PPUSH
// begin enable ;
16384: ENABLE
// if not ru_vehicles then
16385: LD_EXP 56
16389: NOT
16390: IFFALSE 16394
// exit ;
16392: GO 16585
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16394: LD_ADDR_VAR 0 2
16398: PUSH
16399: LD_INT 81
16401: PUSH
16402: LD_INT 3
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PPUSH
16409: CALL_OW 69
16413: ST_TO_ADDR
// if ru_vehicles then
16414: LD_EXP 56
16418: IFFALSE 16585
// begin for i in ru_vehicles do
16420: LD_ADDR_VAR 0 1
16424: PUSH
16425: LD_EXP 56
16429: PUSH
16430: FOR_IN
16431: IFFALSE 16583
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
16433: LD_VAR 0 1
16437: PPUSH
16438: CALL_OW 302
16442: PUSH
16443: LD_VAR 0 1
16447: PPUSH
16448: LD_VAR 0 2
16452: PPUSH
16453: LD_VAR 0 1
16457: PPUSH
16458: CALL_OW 74
16462: PPUSH
16463: CALL_OW 296
16467: PUSH
16468: LD_INT 9
16470: LESS
16471: AND
16472: IFFALSE 16498
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
16474: LD_VAR 0 1
16478: PPUSH
16479: LD_VAR 0 2
16483: PPUSH
16484: LD_VAR 0 1
16488: PPUSH
16489: CALL_OW 74
16493: PPUSH
16494: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
16498: LD_VAR 0 1
16502: PPUSH
16503: CALL_OW 314
16507: NOT
16508: PUSH
16509: LD_VAR 0 1
16513: PPUSH
16514: CALL_OW 302
16518: AND
16519: PUSH
16520: LD_VAR 0 1
16524: PPUSH
16525: LD_EXP 61
16529: PUSH
16530: LD_INT 1
16532: ARRAY
16533: PPUSH
16534: LD_EXP 61
16538: PUSH
16539: LD_INT 2
16541: ARRAY
16542: PPUSH
16543: CALL_OW 297
16547: PUSH
16548: LD_INT 10
16550: GREATER
16551: AND
16552: IFFALSE 16581
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
16554: LD_VAR 0 1
16558: PPUSH
16559: LD_EXP 61
16563: PUSH
16564: LD_INT 1
16566: ARRAY
16567: PPUSH
16568: LD_EXP 61
16572: PUSH
16573: LD_INT 2
16575: ARRAY
16576: PPUSH
16577: CALL_OW 114
// end ;
16581: GO 16430
16583: POP
16584: POP
// end ; end ;
16585: PPOPN 2
16587: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
16588: LD_EXP 61
16592: PUSH
16593: LD_EXP 60
16597: AND
16598: PUSH
16599: LD_INT 3
16601: PPUSH
16602: CALL_OW 463
16606: NOT
16607: AND
16608: PUSH
16609: LD_EXP 31
16613: NOT
16614: AND
16615: PUSH
16616: LD_EXP 32
16620: NOT
16621: AND
16622: IFFALSE 16717
16624: GO 16626
16626: DISABLE
16627: LD_INT 0
16629: PPUSH
// begin enable ;
16630: ENABLE
// ru_alert_xy := false ;
16631: LD_ADDR_EXP 61
16635: PUSH
16636: LD_INT 0
16638: ST_TO_ADDR
// ru_alert := false ;
16639: LD_ADDR_EXP 60
16643: PUSH
16644: LD_INT 0
16646: ST_TO_ADDR
// if ru_vehicles then
16647: LD_EXP 56
16651: IFFALSE 16717
// for i in ru_vehicles do
16653: LD_ADDR_VAR 0 1
16657: PUSH
16658: LD_EXP 56
16662: PUSH
16663: FOR_IN
16664: IFFALSE 16715
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
16666: LD_VAR 0 1
16670: PPUSH
16671: CALL_OW 302
16675: PUSH
16676: LD_VAR 0 1
16680: PPUSH
16681: LD_INT 89
16683: PPUSH
16684: LD_INT 36
16686: PPUSH
16687: CALL_OW 297
16691: PUSH
16692: LD_INT 10
16694: GREATER
16695: AND
16696: IFFALSE 16713
// ComMoveXY ( i , 89 , 36 ) ;
16698: LD_VAR 0 1
16702: PPUSH
16703: LD_INT 89
16705: PPUSH
16706: LD_INT 36
16708: PPUSH
16709: CALL_OW 111
16713: GO 16663
16715: POP
16716: POP
// end ;
16717: PPOPN 1
16719: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
16720: LD_EXP 55
16724: PUSH
16725: LD_EXP 31
16729: NOT
16730: AND
16731: PUSH
16732: LD_EXP 32
16736: NOT
16737: AND
16738: IFFALSE 17022
16740: GO 16742
16742: DISABLE
16743: LD_INT 0
16745: PPUSH
16746: PPUSH
16747: PPUSH
// begin enable ;
16748: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16749: LD_ADDR_VAR 0 3
16753: PUSH
16754: LD_INT 81
16756: PUSH
16757: LD_INT 3
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PPUSH
16764: CALL_OW 69
16768: ST_TO_ADDR
// for i = 1 to ru_forest do
16769: LD_ADDR_VAR 0 1
16773: PUSH
16774: DOUBLE
16775: LD_INT 1
16777: DEC
16778: ST_TO_ADDR
16779: LD_EXP 55
16783: PUSH
16784: FOR_TO
16785: IFFALSE 17020
// begin un := ru_forest [ i ] ;
16787: LD_ADDR_VAR 0 2
16791: PUSH
16792: LD_EXP 55
16796: PUSH
16797: LD_VAR 0 1
16801: ARRAY
16802: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16803: LD_VAR 0 2
16807: PPUSH
16808: LD_INT 13
16810: PPUSH
16811: CALL_OW 308
16815: IFFALSE 16905
// begin if not See ( 1 , un ) then
16817: LD_INT 1
16819: PPUSH
16820: LD_VAR 0 2
16824: PPUSH
16825: CALL_OW 292
16829: NOT
16830: IFFALSE 16844
// SetLives ( un , 1000 ) ;
16832: LD_VAR 0 2
16836: PPUSH
16837: LD_INT 1000
16839: PPUSH
16840: CALL_OW 234
// ru_forest := ru_forest diff un ;
16844: LD_ADDR_EXP 55
16848: PUSH
16849: LD_EXP 55
16853: PUSH
16854: LD_VAR 0 2
16858: DIFF
16859: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16860: LD_VAR 0 2
16864: PPUSH
16865: LD_INT 22
16867: PUSH
16868: LD_INT 3
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 30
16877: PUSH
16878: LD_INT 4
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PPUSH
16889: CALL_OW 69
16893: PPUSH
16894: CALL 1062 0 1
16898: PPUSH
16899: CALL_OW 120
// continue ;
16903: GO 16784
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16905: LD_VAR 0 2
16909: PPUSH
16910: CALL_OW 256
16914: PUSH
16915: LD_INT 700
16917: LESS
16918: PUSH
16919: LD_VAR 0 2
16923: PPUSH
16924: LD_INT 13
16926: PPUSH
16927: CALL_OW 308
16931: NOT
16932: AND
16933: IFFALSE 16949
// ComMoveToArea ( un , retreatArea ) else
16935: LD_VAR 0 2
16939: PPUSH
16940: LD_INT 13
16942: PPUSH
16943: CALL_OW 113
16947: GO 17018
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16949: LD_VAR 0 2
16953: PPUSH
16954: LD_VAR 0 3
16958: PPUSH
16959: LD_VAR 0 2
16963: PPUSH
16964: CALL_OW 74
16968: PPUSH
16969: CALL_OW 296
16973: PUSH
16974: LD_INT 9
16976: LESS
16977: PUSH
16978: LD_VAR 0 2
16982: PPUSH
16983: CALL_OW 256
16987: PUSH
16988: LD_INT 500
16990: GREATER
16991: AND
16992: IFFALSE 17018
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
16994: LD_VAR 0 2
16998: PPUSH
16999: LD_VAR 0 3
17003: PPUSH
17004: LD_VAR 0 2
17008: PPUSH
17009: CALL_OW 74
17013: PPUSH
17014: CALL_OW 115
// end ;
17018: GO 16784
17020: POP
17021: POP
// end ;
17022: PPOPN 3
17024: END
// every 0 0$10 trigger not send_attack_on_cornel do var i , filter ;
17025: LD_EXP 32
17029: NOT
17030: IFFALSE 17151
17032: GO 17034
17034: DISABLE
17035: LD_INT 0
17037: PPUSH
17038: PPUSH
// begin enable ;
17039: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
17040: LD_ADDR_VAR 0 2
17044: PUSH
17045: LD_INT 22
17047: PUSH
17048: LD_INT 3
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 21
17057: PUSH
17058: LD_INT 3
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PPUSH
17069: CALL_OW 69
17073: ST_TO_ADDR
// if filter then
17074: LD_VAR 0 2
17078: IFFALSE 17151
// for i in filter do
17080: LD_ADDR_VAR 0 1
17084: PUSH
17085: LD_VAR 0 2
17089: PUSH
17090: FOR_IN
17091: IFFALSE 17149
// if GetLives ( i ) < 990 then
17093: LD_VAR 0 1
17097: PPUSH
17098: CALL_OW 256
17102: PUSH
17103: LD_INT 990
17105: LESS
17106: IFFALSE 17147
// begin ru_alert := true ;
17108: LD_ADDR_EXP 60
17112: PUSH
17113: LD_INT 1
17115: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17116: LD_ADDR_EXP 61
17120: PUSH
17121: LD_VAR 0 1
17125: PPUSH
17126: CALL_OW 250
17130: PUSH
17131: LD_VAR 0 1
17135: PPUSH
17136: CALL_OW 251
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: ST_TO_ADDR
// break ;
17145: GO 17149
// end ;
17147: GO 17090
17149: POP
17150: POP
// end ;
17151: PPOPN 2
17153: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17154: LD_EXP 31
17158: IFFALSE 17307
17160: GO 17162
17162: DISABLE
17163: LD_INT 0
17165: PPUSH
17166: PPUSH
17167: PPUSH
17168: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17169: LD_ADDR_VAR 0 4
17173: PUSH
17174: LD_EXP 56
17178: PUSH
17179: LD_EXP 55
17183: ADD
17184: PUSH
17185: LD_EXP 53
17189: ADD
17190: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17191: LD_ADDR_VAR 0 3
17195: PUSH
17196: LD_INT 3
17198: PPUSH
17199: LD_INT 81
17201: PUSH
17202: LD_INT 3
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PPUSH
17209: CALL_OW 70
17213: ST_TO_ADDR
// if filter and enemy then
17214: LD_VAR 0 4
17218: PUSH
17219: LD_VAR 0 3
17223: AND
17224: IFFALSE 17307
// repeat wait ( 0 0$01 ) ;
17226: LD_INT 35
17228: PPUSH
17229: CALL_OW 67
// for i in filter do
17233: LD_ADDR_VAR 0 1
17237: PUSH
17238: LD_VAR 0 4
17242: PUSH
17243: FOR_IN
17244: IFFALSE 17272
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17246: LD_VAR 0 1
17250: PPUSH
17251: LD_VAR 0 3
17255: PPUSH
17256: LD_VAR 0 1
17260: PPUSH
17261: CALL_OW 74
17265: PPUSH
17266: CALL_OW 115
// end ;
17270: GO 17243
17272: POP
17273: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
17274: LD_INT 3
17276: PPUSH
17277: LD_INT 81
17279: PUSH
17280: LD_INT 3
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PPUSH
17287: CALL_OW 70
17291: PUSH
17292: LD_INT 0
17294: EQUAL
17295: PUSH
17296: LD_VAR 0 4
17300: PUSH
17301: LD_INT 0
17303: EQUAL
17304: OR
17305: IFFALSE 17226
// end ;
17307: PPOPN 4
17309: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
17310: LD_EXP 26
17314: PUSH
17315: LD_INT 22
17317: PUSH
17318: LD_INT 4
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 30
17327: PUSH
17328: LD_INT 4
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 3
17337: PUSH
17338: LD_INT 57
17340: PUSH
17341: EMPTY
17342: LIST
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: LIST
17352: PPUSH
17353: CALL_OW 69
17357: AND
17358: IFFALSE 17407
17360: GO 17362
17362: DISABLE
17363: LD_INT 0
17365: PPUSH
// begin if not ru_cornel_attack then
17366: LD_EXP 58
17370: NOT
17371: IFFALSE 17375
// exit ;
17373: GO 17407
// for i in ru_cornel_attack do
17375: LD_ADDR_VAR 0 1
17379: PUSH
17380: LD_EXP 58
17384: PUSH
17385: FOR_IN
17386: IFFALSE 17405
// ComAgressiveMove ( i , 258 , 119 ) ;
17388: LD_VAR 0 1
17392: PPUSH
17393: LD_INT 258
17395: PPUSH
17396: LD_INT 119
17398: PPUSH
17399: CALL_OW 114
17403: GO 17385
17405: POP
17406: POP
// end ; end_of_file
17407: PPOPN 1
17409: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
17410: LD_EXP 5
17414: PUSH
17415: LD_EXP 9
17419: NOT
17420: AND
17421: PUSH
17422: LD_EXP 20
17426: AND
17427: IFFALSE 17539
17429: GO 17431
17431: DISABLE
17432: LD_INT 0
17434: PPUSH
// begin enable ;
17435: ENABLE
// crates_counter := crates_counter - 50 ;
17436: LD_ADDR_EXP 20
17440: PUSH
17441: LD_EXP 20
17445: PUSH
17446: LD_INT 50
17448: MINUS
17449: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
17450: LD_INT 8
17452: PPUSH
17453: LD_INT 2
17455: PPUSH
17456: LD_INT 5
17458: PPUSH
17459: CALL_OW 12
17463: PPUSH
17464: LD_INT 1
17466: PPUSH
17467: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
17471: LD_INT 1785
17473: PPUSH
17474: LD_INT 2345
17476: PPUSH
17477: CALL_OW 12
17481: PPUSH
17482: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
17486: LD_ADDR_VAR 0 1
17490: PUSH
17491: LD_INT 1
17493: PPUSH
17494: LD_OWVAR 67
17498: PUSH
17499: LD_INT 2
17501: PLUS
17502: PPUSH
17503: CALL_OW 12
17507: ST_TO_ADDR
// if r < 3 then
17508: LD_VAR 0 1
17512: PUSH
17513: LD_INT 3
17515: LESS
17516: IFFALSE 17539
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
17518: LD_INT 4
17520: PPUSH
17521: LD_INT 1
17523: PPUSH
17524: LD_INT 5
17526: PPUSH
17527: CALL_OW 12
17531: PPUSH
17532: LD_INT 1
17534: PPUSH
17535: CALL_OW 55
// end ;
17539: PPOPN 1
17541: END
// every 0 0$01 trigger cornel_active do
17542: LD_EXP 8
17546: IFFALSE 17635
17548: GO 17550
17550: DISABLE
// begin Wait ( 0 0$03 ) ;
17551: LD_INT 105
17553: PPUSH
17554: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17558: LD_INT 2
17560: PPUSH
17561: LD_INT 5
17563: PPUSH
17564: CALL_OW 12
17568: PPUSH
17569: LD_INT 10
17571: PPUSH
17572: LD_INT 1
17574: PPUSH
17575: CALL_OW 55
// Wait ( 0 0$13 ) ;
17579: LD_INT 455
17581: PPUSH
17582: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17586: LD_INT 2
17588: PPUSH
17589: LD_INT 5
17591: PPUSH
17592: CALL_OW 12
17596: PPUSH
17597: LD_INT 10
17599: PPUSH
17600: LD_INT 1
17602: PPUSH
17603: CALL_OW 55
// Wait ( 0 0$16 ) ;
17607: LD_INT 560
17609: PPUSH
17610: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17614: LD_INT 2
17616: PPUSH
17617: LD_INT 5
17619: PPUSH
17620: CALL_OW 12
17624: PPUSH
17625: LD_INT 10
17627: PPUSH
17628: LD_INT 1
17630: PPUSH
17631: CALL_OW 55
// end ; end_of_file
17635: END
// every 0 0$01 trigger cornel_prepared do
17636: LD_EXP 11
17640: IFFALSE 17699
17642: GO 17644
17644: DISABLE
// begin enable ;
17645: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
17646: LD_ADDR_OWVAR 47
17650: PUSH
17651: LD_STRING #Am03-1
17653: PUSH
17654: LD_EXP 10
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: ST_TO_ADDR
// cornel_counter := Count ( cornel_counter , - ) ;
17663: LD_ADDR_EXP 10
17667: PUSH
17668: LD_EXP 10
17672: PPUSH
17673: LD_STRING -
17675: PPUSH
17676: CALL 1132 0 2
17680: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
17681: LD_EXP 10
17685: PUSH
17686: LD_INT 0
17688: EQUAL
17689: IFFALSE 17699
// begin Display_Strings := [ ] ;
17691: LD_ADDR_OWVAR 47
17695: PUSH
17696: EMPTY
17697: ST_TO_ADDR
// disable ;
17698: DISABLE
// end ; end ;
17699: END
// every 0 0$01 trigger debug and debug_strings do
17700: LD_EXP 1
17704: PUSH
17705: LD_OWVAR 48
17709: AND
17710: IFFALSE 17726
17712: GO 17714
17714: DISABLE
// begin enable ;
17715: ENABLE
// Display_Strings := debug_strings ;
17716: LD_ADDR_OWVAR 47
17720: PUSH
17721: LD_OWVAR 48
17725: ST_TO_ADDR
// end ; end_of_file
17726: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 1 and not solar_builded then
17727: LD_VAR 0 1
17731: PPUSH
17732: CALL_OW 255
17736: PUSH
17737: LD_INT 1
17739: EQUAL
17740: PUSH
17741: LD_EXP 14
17745: NOT
17746: AND
17747: IFFALSE 17757
// solar_builded := true ;
17749: LD_ADDR_EXP 14
17753: PUSH
17754: LD_INT 1
17756: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
17757: LD_VAR 0 1
17761: PPUSH
17762: CALL_OW 255
17766: PUSH
17767: LD_INT 1
17769: EQUAL
17770: PUSH
17771: LD_EXP 29
17775: AND
17776: IFFALSE 17809
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ;
17778: LD_ADDR_EXP 29
17782: PUSH
17783: LD_EXP 29
17787: PUSH
17788: LD_INT 1750
17790: PUSH
17791: LD_INT 1400
17793: PUSH
17794: LD_INT 1225
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: LIST
17801: PUSH
17802: LD_OWVAR 67
17806: ARRAY
17807: PLUS
17808: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
17809: LD_VAR 0 1
17813: PPUSH
17814: CALL_OW 255
17818: PUSH
17819: LD_INT 3
17821: EQUAL
17822: IFFALSE 17840
// ru_vehicles := ru_vehicles ^ veh ;
17824: LD_ADDR_EXP 56
17828: PUSH
17829: LD_EXP 56
17833: PUSH
17834: LD_VAR 0 1
17838: ADD
17839: ST_TO_ADDR
// end ;
17840: PPOPN 2
17842: END
// on UnitDestroyed ( un ) do begin if un in ru_patrol then
17843: LD_VAR 0 1
17847: PUSH
17848: LD_EXP 53
17852: IN
17853: IFFALSE 17871
// ru_patrol := ru_patrol diff un ;
17855: LD_ADDR_EXP 53
17859: PUSH
17860: LD_EXP 53
17864: PUSH
17865: LD_VAR 0 1
17869: DIFF
17870: ST_TO_ADDR
// if un in ru_forest then
17871: LD_VAR 0 1
17875: PUSH
17876: LD_EXP 55
17880: IN
17881: IFFALSE 17899
// ru_forest := ru_forest diff un ;
17883: LD_ADDR_EXP 55
17887: PUSH
17888: LD_EXP 55
17892: PUSH
17893: LD_VAR 0 1
17897: DIFF
17898: ST_TO_ADDR
// if un in ru_vehicles then
17899: LD_VAR 0 1
17903: PUSH
17904: LD_EXP 56
17908: IN
17909: IFFALSE 18015
// begin ru_vehicles := ru_vehicles diff un ;
17911: LD_ADDR_EXP 56
17915: PUSH
17916: LD_EXP 56
17920: PUSH
17921: LD_VAR 0 1
17925: DIFF
17926: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
17927: LD_ADDR_EXP 57
17931: PUSH
17932: LD_EXP 57
17936: PUSH
17937: LD_VAR 0 1
17941: PPUSH
17942: CALL_OW 265
17946: PUSH
17947: LD_VAR 0 1
17951: PPUSH
17952: CALL_OW 262
17956: PUSH
17957: LD_VAR 0 1
17961: PPUSH
17962: CALL_OW 263
17966: PUSH
17967: LD_VAR 0 1
17971: PPUSH
17972: CALL_OW 264
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: ADD
17983: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
17984: LD_ADDR_EXP 13
17988: PUSH
17989: LD_EXP 13
17993: PUSH
17994: LD_INT 1
17996: PLUS
17997: ST_TO_ADDR
// if ach_counter = 10 then
17998: LD_EXP 13
18002: PUSH
18003: LD_INT 10
18005: EQUAL
18006: IFFALSE 18015
// SetAchievement ( ACH_FAUST ) ;
18008: LD_STRING ACH_FAUST
18010: PPUSH
18011: CALL_OW 543
// end ; if un = Pokryshkin then
18015: LD_VAR 0 1
18019: PUSH
18020: LD_EXP 52
18024: EQUAL
18025: IFFALSE 18034
// SetAchievement ( ACH_POKR ) ;
18027: LD_STRING ACH_POKR
18029: PPUSH
18030: CALL_OW 543
// if un = JMM then
18034: LD_VAR 0 1
18038: PUSH
18039: LD_EXP 37
18043: EQUAL
18044: IFFALSE 18053
// YouLost ( 0 ) ;
18046: LD_STRING 0
18048: PPUSH
18049: CALL_OW 104
// if un = us_dep_west then
18053: LD_VAR 0 1
18057: PUSH
18058: LD_INT 1
18060: EQUAL
18061: IFFALSE 18070
// YouLost ( 2 ) ;
18063: LD_STRING 2
18065: PPUSH
18066: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18070: LD_VAR 0 1
18074: PPUSH
18075: CALL_OW 255
18079: PUSH
18080: LD_INT 8
18082: EQUAL
18083: PUSH
18084: LD_EXP 5
18088: NOT
18089: AND
18090: IFFALSE 18099
// YouLost ( 4 ) ;
18092: LD_STRING 4
18094: PPUSH
18095: CALL_OW 104
// if un in jmm_units then
18099: LD_VAR 0 1
18103: PUSH
18104: LD_EXP 4
18108: IN
18109: IFFALSE 18125
// lose_counter := lose_counter + 1 ;
18111: LD_ADDR_EXP 34
18115: PUSH
18116: LD_EXP 34
18120: PUSH
18121: LD_INT 1
18123: PLUS
18124: ST_TO_ADDR
// end ;
18125: PPOPN 1
18127: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18128: LD_INT 0
18130: PPUSH
18131: PPUSH
// begin if GetSide ( driver ) = 3 then
18132: LD_VAR 0 1
18136: PPUSH
18137: CALL_OW 255
18141: PUSH
18142: LD_INT 3
18144: EQUAL
18145: IFFALSE 18223
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18147: LD_ADDR_VAR 0 6
18151: PUSH
18152: LD_INT 22
18154: PUSH
18155: LD_INT 3
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 30
18164: PUSH
18165: LD_INT 3
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PPUSH
18176: CALL_OW 69
18180: PPUSH
18181: CALL 1062 0 1
18185: ST_TO_ADDR
// if place then
18186: LD_VAR 0 6
18190: IFFALSE 18208
// ComEnterUnit ( driver , place ) else
18192: LD_VAR 0 1
18196: PPUSH
18197: LD_VAR 0 6
18201: PPUSH
18202: CALL_OW 120
18206: GO 18223
// ComMoveXY ( driver , 70 , 22 ) ;
18208: LD_VAR 0 1
18212: PPUSH
18213: LD_INT 70
18215: PPUSH
18216: LD_INT 22
18218: PPUSH
18219: CALL_OW 111
// end ; end ;
18223: PPOPN 6
18225: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
18226: LD_VAR 0 1
18230: PUSH
18231: LD_INT 1
18233: EQUAL
18234: PUSH
18235: LD_VAR 0 2
18239: PUSH
18240: LD_INT 4
18242: EQUAL
18243: PUSH
18244: LD_VAR 0 2
18248: PUSH
18249: LD_INT 8
18251: EQUAL
18252: PUSH
18253: LD_EXP 5
18257: NOT
18258: AND
18259: OR
18260: AND
18261: IFFALSE 18270
// YouLost ( 5 ) ;
18263: LD_STRING 5
18265: PPUSH
18266: CALL_OW 104
// end ;
18270: PPOPN 2
18272: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
18273: LD_EXP 36
18277: PUSH
18278: LD_INT 22
18280: PUSH
18281: LD_INT 1
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 21
18290: PUSH
18291: LD_INT 1
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PPUSH
18302: CALL_OW 69
18306: PUSH
18307: LD_INT 22
18309: PUSH
18310: LD_INT 8
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 21
18319: PUSH
18320: LD_INT 1
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PPUSH
18331: CALL_OW 69
18335: ADD
18336: PLUS
18337: PUSH
18338: LD_INT 5
18340: LESS
18341: IFFALSE 18353
18343: GO 18345
18345: DISABLE
// YouLost ( 1 ) ;
18346: LD_STRING 1
18348: PPUSH
18349: CALL_OW 104
18353: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
18354: LD_INT 1
18356: PPUSH
18357: CALL_OW 255
18361: PUSH
18362: LD_INT 3
18364: EQUAL
18365: IFFALSE 18377
18367: GO 18369
18369: DISABLE
// YouLost ( 3 ) ; end_of_file
18370: LD_STRING 3
18372: PPUSH
18373: CALL_OW 104
18377: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
18378: GO 18380
18380: DISABLE
// begin ru_radar := 98 ;
18381: LD_ADDR_EXP 62
18385: PUSH
18386: LD_INT 98
18388: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18389: LD_ADDR_EXP 63
18393: PUSH
18394: LD_INT 89
18396: ST_TO_ADDR
// us_hack := 99 ;
18397: LD_ADDR_EXP 64
18401: PUSH
18402: LD_INT 99
18404: ST_TO_ADDR
// us_artillery := 97 ;
18405: LD_ADDR_EXP 65
18409: PUSH
18410: LD_INT 97
18412: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18413: LD_ADDR_EXP 66
18417: PUSH
18418: LD_INT 91
18420: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
18421: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
18422: LD_INT 0
18424: PPUSH
18425: PPUSH
18426: PPUSH
18427: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18428: LD_VAR 0 1
18432: PPUSH
18433: CALL_OW 264
18437: PUSH
18438: LD_EXP 66
18442: EQUAL
18443: IFFALSE 18515
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18445: LD_INT 68
18447: PPUSH
18448: LD_VAR 0 1
18452: PPUSH
18453: CALL_OW 255
18457: PPUSH
18458: CALL_OW 321
18462: PUSH
18463: LD_INT 2
18465: EQUAL
18466: IFFALSE 18478
// eff := 70 else
18468: LD_ADDR_VAR 0 6
18472: PUSH
18473: LD_INT 70
18475: ST_TO_ADDR
18476: GO 18486
// eff := 30 ;
18478: LD_ADDR_VAR 0 6
18482: PUSH
18483: LD_INT 30
18485: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18486: LD_VAR 0 1
18490: PPUSH
18491: CALL_OW 250
18495: PPUSH
18496: LD_VAR 0 1
18500: PPUSH
18501: CALL_OW 251
18505: PPUSH
18506: LD_VAR 0 6
18510: PPUSH
18511: CALL_OW 495
// end ; end ;
18515: LD_VAR 0 4
18519: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
18520: LD_INT 0
18522: PPUSH
18523: PPUSH
18524: PPUSH
18525: PPUSH
18526: PPUSH
18527: PPUSH
// if cmd = 124 then
18528: LD_VAR 0 1
18532: PUSH
18533: LD_INT 124
18535: EQUAL
18536: IFFALSE 18742
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
18538: LD_ADDR_VAR 0 5
18542: PUSH
18543: LD_INT 2
18545: PUSH
18546: LD_INT 34
18548: PUSH
18549: LD_INT 53
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 34
18558: PUSH
18559: LD_INT 14
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: LIST
18570: PPUSH
18571: CALL_OW 69
18575: ST_TO_ADDR
// if not tmp then
18576: LD_VAR 0 5
18580: NOT
18581: IFFALSE 18585
// exit ;
18583: GO 18742
// for i in tmp do
18585: LD_ADDR_VAR 0 3
18589: PUSH
18590: LD_VAR 0 5
18594: PUSH
18595: FOR_IN
18596: IFFALSE 18740
// begin taskList := GetTaskList ( i ) ;
18598: LD_ADDR_VAR 0 6
18602: PUSH
18603: LD_VAR 0 3
18607: PPUSH
18608: CALL_OW 437
18612: ST_TO_ADDR
// if not taskList then
18613: LD_VAR 0 6
18617: NOT
18618: IFFALSE 18622
// continue ;
18620: GO 18595
// for j = 1 to taskList do
18622: LD_ADDR_VAR 0 4
18626: PUSH
18627: DOUBLE
18628: LD_INT 1
18630: DEC
18631: ST_TO_ADDR
18632: LD_VAR 0 6
18636: PUSH
18637: FOR_TO
18638: IFFALSE 18736
// if taskList [ j ] [ 1 ] = | then
18640: LD_VAR 0 6
18644: PUSH
18645: LD_VAR 0 4
18649: ARRAY
18650: PUSH
18651: LD_INT 1
18653: ARRAY
18654: PUSH
18655: LD_STRING |
18657: EQUAL
18658: IFFALSE 18734
// begin _taskList := Delete ( taskList , 1 ) ;
18660: LD_ADDR_VAR 0 7
18664: PUSH
18665: LD_VAR 0 6
18669: PPUSH
18670: LD_INT 1
18672: PPUSH
18673: CALL_OW 3
18677: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
18678: LD_VAR 0 3
18682: PPUSH
18683: LD_VAR 0 7
18687: PPUSH
18688: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
18692: LD_VAR 0 3
18696: PPUSH
18697: LD_VAR 0 6
18701: PUSH
18702: LD_VAR 0 4
18706: ARRAY
18707: PUSH
18708: LD_INT 2
18710: ARRAY
18711: PPUSH
18712: LD_VAR 0 6
18716: PUSH
18717: LD_VAR 0 4
18721: ARRAY
18722: PUSH
18723: LD_INT 3
18725: ARRAY
18726: PPUSH
18727: LD_INT 8
18729: PPUSH
18730: CALL 18747 0 4
// end ;
18734: GO 18637
18736: POP
18737: POP
// end ;
18738: GO 18595
18740: POP
18741: POP
// end ; end ;
18742: LD_VAR 0 2
18746: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18747: LD_INT 0
18749: PPUSH
18750: PPUSH
18751: PPUSH
18752: PPUSH
18753: PPUSH
18754: PPUSH
18755: PPUSH
18756: PPUSH
18757: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18758: LD_VAR 0 1
18762: NOT
18763: PUSH
18764: LD_VAR 0 2
18768: PPUSH
18769: LD_VAR 0 3
18773: PPUSH
18774: CALL_OW 488
18778: NOT
18779: OR
18780: PUSH
18781: LD_VAR 0 4
18785: NOT
18786: OR
18787: IFFALSE 18791
// exit ;
18789: GO 19131
// list := [ ] ;
18791: LD_ADDR_VAR 0 13
18795: PUSH
18796: EMPTY
18797: ST_TO_ADDR
// if x - r < 0 then
18798: LD_VAR 0 2
18802: PUSH
18803: LD_VAR 0 4
18807: MINUS
18808: PUSH
18809: LD_INT 0
18811: LESS
18812: IFFALSE 18824
// min_x := 0 else
18814: LD_ADDR_VAR 0 7
18818: PUSH
18819: LD_INT 0
18821: ST_TO_ADDR
18822: GO 18840
// min_x := x - r ;
18824: LD_ADDR_VAR 0 7
18828: PUSH
18829: LD_VAR 0 2
18833: PUSH
18834: LD_VAR 0 4
18838: MINUS
18839: ST_TO_ADDR
// if y - r < 0 then
18840: LD_VAR 0 3
18844: PUSH
18845: LD_VAR 0 4
18849: MINUS
18850: PUSH
18851: LD_INT 0
18853: LESS
18854: IFFALSE 18866
// min_y := 0 else
18856: LD_ADDR_VAR 0 8
18860: PUSH
18861: LD_INT 0
18863: ST_TO_ADDR
18864: GO 18882
// min_y := y - r ;
18866: LD_ADDR_VAR 0 8
18870: PUSH
18871: LD_VAR 0 3
18875: PUSH
18876: LD_VAR 0 4
18880: MINUS
18881: ST_TO_ADDR
// max_x := x + r ;
18882: LD_ADDR_VAR 0 9
18886: PUSH
18887: LD_VAR 0 2
18891: PUSH
18892: LD_VAR 0 4
18896: PLUS
18897: ST_TO_ADDR
// max_y := y + r ;
18898: LD_ADDR_VAR 0 10
18902: PUSH
18903: LD_VAR 0 3
18907: PUSH
18908: LD_VAR 0 4
18912: PLUS
18913: ST_TO_ADDR
// for _x = min_x to max_x do
18914: LD_ADDR_VAR 0 11
18918: PUSH
18919: DOUBLE
18920: LD_VAR 0 7
18924: DEC
18925: ST_TO_ADDR
18926: LD_VAR 0 9
18930: PUSH
18931: FOR_TO
18932: IFFALSE 19049
// for _y = min_y to max_y do
18934: LD_ADDR_VAR 0 12
18938: PUSH
18939: DOUBLE
18940: LD_VAR 0 8
18944: DEC
18945: ST_TO_ADDR
18946: LD_VAR 0 10
18950: PUSH
18951: FOR_TO
18952: IFFALSE 19045
// begin if not ValidHex ( _x , _y ) then
18954: LD_VAR 0 11
18958: PPUSH
18959: LD_VAR 0 12
18963: PPUSH
18964: CALL_OW 488
18968: NOT
18969: IFFALSE 18973
// continue ;
18971: GO 18951
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18973: LD_VAR 0 11
18977: PPUSH
18978: LD_VAR 0 12
18982: PPUSH
18983: CALL_OW 351
18987: PUSH
18988: LD_VAR 0 11
18992: PPUSH
18993: LD_VAR 0 12
18997: PPUSH
18998: CALL_OW 554
19002: AND
19003: IFFALSE 19043
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19005: LD_ADDR_VAR 0 13
19009: PUSH
19010: LD_VAR 0 13
19014: PPUSH
19015: LD_VAR 0 13
19019: PUSH
19020: LD_INT 1
19022: PLUS
19023: PPUSH
19024: LD_VAR 0 11
19028: PUSH
19029: LD_VAR 0 12
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 2
19042: ST_TO_ADDR
// end ;
19043: GO 18951
19045: POP
19046: POP
19047: GO 18931
19049: POP
19050: POP
// if not list then
19051: LD_VAR 0 13
19055: NOT
19056: IFFALSE 19060
// exit ;
19058: GO 19131
// for i in list do
19060: LD_ADDR_VAR 0 6
19064: PUSH
19065: LD_VAR 0 13
19069: PUSH
19070: FOR_IN
19071: IFFALSE 19129
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19073: LD_VAR 0 1
19077: PPUSH
19078: LD_STRING M
19080: PUSH
19081: LD_VAR 0 6
19085: PUSH
19086: LD_INT 1
19088: ARRAY
19089: PUSH
19090: LD_VAR 0 6
19094: PUSH
19095: LD_INT 2
19097: ARRAY
19098: PUSH
19099: LD_INT 0
19101: PUSH
19102: LD_INT 0
19104: PUSH
19105: LD_INT 0
19107: PUSH
19108: LD_INT 0
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: PUSH
19120: EMPTY
19121: LIST
19122: PPUSH
19123: CALL_OW 447
19127: GO 19070
19129: POP
19130: POP
// end ;
19131: LD_VAR 0 5
19135: RET
