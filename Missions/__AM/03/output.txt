// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3059 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2273 0 0
// PrepareWesternBase ;
  41: CALL 2502 0 0
// Action ;
  45: CALL 5323 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
// uc_side := 4 ;
1155: LD_ADDR_OWVAR 20
1159: PUSH
1160: LD_INT 4
1162: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1163: LD_ADDR_EXP 46
1167: PUSH
1168: LD_STRING Powell
1170: PPUSH
1171: LD_INT 0
1173: PPUSH
1174: LD_STRING 
1176: PPUSH
1177: CALL 38632 0 3
1181: ST_TO_ADDR
// uc_side := 1 ;
1182: LD_ADDR_OWVAR 20
1186: PUSH
1187: LD_INT 1
1189: ST_TO_ADDR
// uc_nation := 1 ;
1190: LD_ADDR_OWVAR 21
1194: PUSH
1195: LD_INT 1
1197: ST_TO_ADDR
// if debug then
1198: LD_EXP 1
1202: IFFALSE 1332
// begin for i = 1 to 4 do
1204: LD_ADDR_VAR 0 2
1208: PUSH
1209: DOUBLE
1210: LD_INT 1
1212: DEC
1213: ST_TO_ADDR
1214: LD_INT 4
1216: PUSH
1217: FOR_TO
1218: IFFALSE 1269
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1220: LD_INT 0
1222: PPUSH
1223: LD_INT 1
1225: PPUSH
1226: LD_INT 2
1228: PPUSH
1229: CALL_OW 12
1233: PPUSH
1234: LD_INT 3
1236: PPUSH
1237: CALL_OW 380
// un := CreateHuman ;
1241: LD_ADDR_VAR 0 3
1245: PUSH
1246: CALL_OW 44
1250: ST_TO_ADDR
// others := others ^ un ;
1251: LD_ADDR_VAR 0 5
1255: PUSH
1256: LD_VAR 0 5
1260: PUSH
1261: LD_VAR 0 3
1265: ADD
1266: ST_TO_ADDR
// end ;
1267: GO 1217
1269: POP
1270: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1271: LD_ADDR_VAR 0 6
1275: PUSH
1276: LD_INT 21
1278: PUSH
1279: LD_INT 1
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: LD_INT 51
1287: PUSH
1288: LD_INT 90
1290: PUSH
1291: LD_INT 504
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 21
1304: PUSH
1305: LD_INT 1
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: LD_INT 51
1313: PUSH
1314: LD_INT 80
1316: PUSH
1317: LD_INT 750
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1332: LD_ADDR_EXP 37
1336: PUSH
1337: LD_STRING JMM
1339: PPUSH
1340: LD_EXP 1
1344: NOT
1345: PPUSH
1346: LD_EXP 3
1350: PPUSH
1351: CALL 38632 0 3
1355: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1356: LD_ADDR_EXP 38
1360: PUSH
1361: LD_STRING Bobby
1363: PPUSH
1364: LD_EXP 1
1368: NOT
1369: PPUSH
1370: LD_EXP 3
1374: PPUSH
1375: CALL 38632 0 3
1379: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1380: LD_ADDR_EXP 39
1384: PUSH
1385: LD_STRING Cyrus
1387: PPUSH
1388: LD_EXP 1
1392: NOT
1393: PPUSH
1394: LD_EXP 3
1398: PPUSH
1399: CALL 38632 0 3
1403: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1404: LD_ADDR_EXP 40
1408: PUSH
1409: LD_STRING Lisa
1411: PPUSH
1412: LD_EXP 1
1416: NOT
1417: PPUSH
1418: LD_EXP 3
1422: PPUSH
1423: CALL 38632 0 3
1427: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1428: LD_ADDR_EXP 41
1432: PUSH
1433: LD_STRING Khatam
1435: PPUSH
1436: LD_EXP 1
1440: NOT
1441: PPUSH
1442: LD_EXP 3
1446: PPUSH
1447: CALL 38632 0 3
1451: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1452: LD_ADDR_EXP 42
1456: PUSH
1457: LD_STRING Brian
1459: PPUSH
1460: LD_EXP 1
1464: NOT
1465: PPUSH
1466: LD_EXP 3
1470: PPUSH
1471: CALL 38632 0 3
1475: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1476: LD_ADDR_EXP 43
1480: PUSH
1481: LD_STRING Jerry
1483: PPUSH
1484: LD_EXP 1
1488: NOT
1489: PPUSH
1490: LD_EXP 3
1494: PPUSH
1495: CALL 38632 0 3
1499: ST_TO_ADDR
// if Bobby then
1500: LD_EXP 38
1504: IFFALSE 1535
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1506: LD_ADDR_VAR 0 4
1510: PUSH
1511: LD_VAR 0 4
1515: PPUSH
1516: LD_VAR 0 4
1520: PUSH
1521: LD_INT 1
1523: PLUS
1524: PPUSH
1525: LD_EXP 38
1529: PPUSH
1530: CALL_OW 2
1534: ST_TO_ADDR
// if Cyrus then
1535: LD_EXP 39
1539: IFFALSE 1570
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_VAR 0 4
1550: PPUSH
1551: LD_VAR 0 4
1555: PUSH
1556: LD_INT 1
1558: PLUS
1559: PPUSH
1560: LD_EXP 39
1564: PPUSH
1565: CALL_OW 2
1569: ST_TO_ADDR
// if Lisa then
1570: LD_EXP 40
1574: IFFALSE 1605
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1576: LD_ADDR_VAR 0 4
1580: PUSH
1581: LD_VAR 0 4
1585: PPUSH
1586: LD_VAR 0 4
1590: PUSH
1591: LD_INT 1
1593: PLUS
1594: PPUSH
1595: LD_EXP 40
1599: PPUSH
1600: CALL_OW 2
1604: ST_TO_ADDR
// if Khatam then
1605: LD_EXP 41
1609: IFFALSE 1640
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1611: LD_ADDR_VAR 0 4
1615: PUSH
1616: LD_VAR 0 4
1620: PPUSH
1621: LD_VAR 0 4
1625: PUSH
1626: LD_INT 1
1628: PLUS
1629: PPUSH
1630: LD_EXP 41
1634: PPUSH
1635: CALL_OW 2
1639: ST_TO_ADDR
// if Brian then
1640: LD_EXP 42
1644: IFFALSE 1675
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1646: LD_ADDR_VAR 0 4
1650: PUSH
1651: LD_VAR 0 4
1655: PPUSH
1656: LD_VAR 0 4
1660: PUSH
1661: LD_INT 1
1663: PLUS
1664: PPUSH
1665: LD_EXP 42
1669: PPUSH
1670: CALL_OW 2
1674: ST_TO_ADDR
// if Jerry then
1675: LD_EXP 43
1679: IFFALSE 1710
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1681: LD_ADDR_VAR 0 4
1685: PUSH
1686: LD_VAR 0 4
1690: PPUSH
1691: LD_VAR 0 4
1695: PUSH
1696: LD_INT 1
1698: PLUS
1699: PPUSH
1700: LD_EXP 43
1704: PPUSH
1705: CALL_OW 2
1709: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1710: LD_STRING 02_other_survivors
1712: PPUSH
1713: CALL_OW 28
1717: IFFALSE 1732
// others := CreateCharacterSet ( 02_other_survivors ) ;
1719: LD_ADDR_VAR 0 5
1723: PUSH
1724: LD_STRING 02_other_survivors
1726: PPUSH
1727: CALL_OW 31
1731: ST_TO_ADDR
// if others then
1732: LD_VAR 0 5
1736: IFFALSE 1761
// begin tmp := tmp ^ others ;
1738: LD_ADDR_VAR 0 4
1742: PUSH
1743: LD_VAR 0 4
1747: PUSH
1748: LD_VAR 0 5
1752: ADD
1753: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1754: LD_STRING 02_other_survivors
1756: PPUSH
1757: CALL_OW 40
// end ; jmm_units := tmp ;
1761: LD_ADDR_EXP 4
1765: PUSH
1766: LD_VAR 0 4
1770: ST_TO_ADDR
// if not vehicles then
1771: LD_VAR 0 6
1775: NOT
1776: IFFALSE 1794
// vehicles := LoadVariable ( 02_tanks_1 , 0 ) ;
1778: LD_ADDR_VAR 0 6
1782: PUSH
1783: LD_STRING 02_tanks_1
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: CALL_OW 30
1793: ST_TO_ADDR
// if vehicles then
1794: LD_VAR 0 6
1798: IFFALSE 1992
// begin got_mech := false ;
1800: LD_ADDR_VAR 0 7
1804: PUSH
1805: LD_INT 0
1807: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
1808: LD_VAR 0 4
1812: PPUSH
1813: LD_INT 25
1815: PUSH
1816: LD_INT 3
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PPUSH
1823: CALL_OW 72
1827: IFFALSE 1837
// got_mech := true ;
1829: LD_ADDR_VAR 0 7
1833: PUSH
1834: LD_INT 1
1836: ST_TO_ADDR
// for i = 1 to vehicles do
1837: LD_ADDR_VAR 0 2
1841: PUSH
1842: DOUBLE
1843: LD_INT 1
1845: DEC
1846: ST_TO_ADDR
1847: LD_VAR 0 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1990
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
1855: LD_ADDR_VAR 0 3
1859: PUSH
1860: LD_INT 1
1862: PPUSH
1863: LD_INT 3
1865: PPUSH
1866: LD_VAR 0 6
1870: PUSH
1871: LD_VAR 0 2
1875: ARRAY
1876: PUSH
1877: LD_INT 1
1879: ARRAY
1880: PPUSH
1881: LD_VAR 0 6
1885: PUSH
1886: LD_VAR 0 2
1890: ARRAY
1891: PUSH
1892: LD_INT 2
1894: ARRAY
1895: PPUSH
1896: LD_VAR 0 6
1900: PUSH
1901: LD_VAR 0 2
1905: ARRAY
1906: PUSH
1907: LD_INT 3
1909: ARRAY
1910: PPUSH
1911: LD_VAR 0 6
1915: PUSH
1916: LD_VAR 0 2
1920: ARRAY
1921: PUSH
1922: LD_INT 4
1924: ARRAY
1925: PPUSH
1926: LD_INT 40
1928: PPUSH
1929: CALL 497 0 7
1933: ST_TO_ADDR
// if not got_mech then
1934: LD_VAR 0 7
1938: NOT
1939: IFFALSE 1965
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
1941: LD_VAR 0 3
1945: PPUSH
1946: LD_VAR 0 6
1950: PUSH
1951: LD_VAR 0 2
1955: ARRAY
1956: PUSH
1957: LD_INT 6
1959: ARRAY
1960: PPUSH
1961: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
1965: LD_ADDR_VAR 0 4
1969: PUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: LD_VAR 0 3
1982: PPUSH
1983: CALL_OW 2
1987: ST_TO_ADDR
// end ;
1988: GO 1852
1990: POP
1991: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
1992: LD_EXP 37
1996: PPUSH
1997: LD_INT 194
1999: PPUSH
2000: LD_INT 119
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL_OW 48
// if tmp then
2010: LD_VAR 0 4
2014: IFFALSE 2202
// begin for i in tmp do
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: LD_VAR 0 4
2025: PUSH
2026: FOR_IN
2027: IFFALSE 2200
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2029: LD_VAR 0 2
2033: PPUSH
2034: CALL_OW 257
2038: PUSH
2039: LD_INT 1
2041: NONEQUAL
2042: PUSH
2043: LD_VAR 0 2
2047: PUSH
2048: LD_EXP 41
2052: NONEQUAL
2053: AND
2054: IFFALSE 2068
// SetClass ( i , 1 ) ;
2056: LD_VAR 0 2
2060: PPUSH
2061: LD_INT 1
2063: PPUSH
2064: CALL_OW 336
// if i = Khatam then
2068: LD_VAR 0 2
2072: PUSH
2073: LD_EXP 41
2077: EQUAL
2078: IFFALSE 2092
// SetClass ( i , 4 ) ;
2080: LD_VAR 0 2
2084: PPUSH
2085: LD_INT 4
2087: PPUSH
2088: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2092: LD_ADDR_VAR 0 8
2096: PUSH
2097: LD_INT 22
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 21
2109: PUSH
2110: LD_INT 2
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 58
2119: PUSH
2120: EMPTY
2121: LIST
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: PPUSH
2128: CALL_OW 69
2132: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2133: LD_VAR 0 2
2137: PPUSH
2138: CALL_OW 247
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: PUSH
2147: LD_VAR 0 8
2151: AND
2152: IFFALSE 2174
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2154: LD_VAR 0 2
2158: PPUSH
2159: LD_VAR 0 8
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: CALL_OW 52
2172: GO 2189
// PlaceUnitArea ( i , startArea , false ) ;
2174: LD_VAR 0 2
2178: PPUSH
2179: LD_INT 1
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 49
// ComHold ( i ) ;
2189: LD_VAR 0 2
2193: PPUSH
2194: CALL_OW 140
// end ;
2198: GO 2026
2200: POP
2201: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2202: LD_ADDR_EXP 7
2206: PUSH
2207: LD_STRING 02_mikhailStatus_1
2209: PPUSH
2210: LD_INT 0
2212: PPUSH
2213: CALL_OW 30
2217: ST_TO_ADDR
// if not bierezov_exist and not debug then
2218: LD_EXP 7
2222: NOT
2223: PUSH
2224: LD_EXP 1
2228: NOT
2229: AND
2230: IFFALSE 2234
// exit ;
2232: GO 2268
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2234: LD_ADDR_EXP 45
2238: PUSH
2239: LD_STRING Mikhail
2241: PPUSH
2242: LD_INT 0
2244: PPUSH
2245: LD_STRING 
2247: PPUSH
2248: CALL 38632 0 3
2252: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2253: LD_EXP 45
2257: PPUSH
2258: LD_INT 1
2260: PPUSH
2261: LD_INT 0
2263: PPUSH
2264: CALL_OW 49
// end ;
2268: LD_VAR 0 1
2272: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2273: LD_INT 0
2275: PPUSH
2276: PPUSH
2277: PPUSH
2278: PPUSH
// uc_side := 4 ;
2279: LD_ADDR_OWVAR 20
2283: PUSH
2284: LD_INT 4
2286: ST_TO_ADDR
// uc_nation := 1 ;
2287: LD_ADDR_OWVAR 21
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2295: LD_ADDR_EXP 44
2299: PUSH
2300: LD_STRING Cornell
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: LD_STRING 
2308: PPUSH
2309: CALL 38632 0 3
2313: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2314: LD_ADDR_EXP 6
2318: PUSH
2319: LD_INT 9
2321: PUSH
2322: LD_EXP 4
2326: MINUS
2327: ST_TO_ADDR
// tmp := [ ] ;
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: EMPTY
2334: ST_TO_ADDR
// if cornel_units < 4 then
2335: LD_EXP 6
2339: PUSH
2340: LD_INT 4
2342: LESS
2343: IFFALSE 2353
// cornel_units := 4 ;
2345: LD_ADDR_EXP 6
2349: PUSH
2350: LD_INT 4
2352: ST_TO_ADDR
// for i = 1 to cornel_units do
2353: LD_ADDR_VAR 0 4
2357: PUSH
2358: DOUBLE
2359: LD_INT 1
2361: DEC
2362: ST_TO_ADDR
2363: LD_EXP 6
2367: PUSH
2368: FOR_TO
2369: IFFALSE 2467
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2371: LD_INT 0
2373: PPUSH
2374: LD_INT 1
2376: PUSH
2377: LD_INT 1
2379: PUSH
2380: LD_INT 1
2382: PUSH
2383: LD_INT 2
2385: PUSH
2386: LD_INT 4
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: PUSH
2396: LD_VAR 0 4
2400: PUSH
2401: LD_INT 5
2403: MOD
2404: PUSH
2405: LD_INT 1
2407: PLUS
2408: ARRAY
2409: PPUSH
2410: LD_INT 2
2412: PPUSH
2413: CALL_OW 380
// un := CreateHuman ;
2417: LD_ADDR_VAR 0 3
2421: PUSH
2422: CALL_OW 44
2426: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_VAR 0 2
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_VAR 0 3
2444: PPUSH
2445: CALL_OW 2
2449: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2450: LD_VAR 0 3
2454: PPUSH
2455: LD_INT 2
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: CALL_OW 49
// end ;
2465: GO 2368
2467: POP
2468: POP
// cornel_units := tmp ;
2469: LD_ADDR_EXP 6
2473: PUSH
2474: LD_VAR 0 2
2478: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2479: LD_EXP 44
2483: PPUSH
2484: LD_INT 191
2486: PPUSH
2487: LD_INT 106
2489: PPUSH
2490: LD_INT 0
2492: PPUSH
2493: CALL_OW 48
// end ;
2497: LD_VAR 0 1
2501: RET
// export function PrepareWesternBase ; var i ; begin
2502: LD_INT 0
2504: PPUSH
2505: PPUSH
// uc_side := 8 ;
2506: LD_ADDR_OWVAR 20
2510: PUSH
2511: LD_INT 8
2513: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2514: LD_ADDR_EXP 47
2518: PUSH
2519: LD_STRING Lynch
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: LD_STRING 
2527: PPUSH
2528: CALL 38632 0 3
2532: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2533: LD_ADDR_EXP 48
2537: PUSH
2538: LD_STRING Walker
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: LD_STRING 
2546: PPUSH
2547: CALL 38632 0 3
2551: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2552: LD_ADDR_EXP 49
2556: PUSH
2557: LD_STRING Turner
2559: PPUSH
2560: LD_INT 0
2562: PPUSH
2563: LD_STRING 
2565: PPUSH
2566: CALL 38632 0 3
2570: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2571: LD_ADDR_EXP 50
2575: PUSH
2576: LD_STRING Jillian
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: LD_STRING 
2584: PPUSH
2585: CALL 38632 0 3
2589: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: LD_EXP 47
2599: PUSH
2600: LD_EXP 48
2604: PUSH
2605: LD_EXP 49
2609: PUSH
2610: LD_EXP 50
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: PUSH
2621: FOR_IN
2622: IFFALSE 2650
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
2624: LD_VAR 0 2
2628: PPUSH
2629: LD_INT 3
2631: PPUSH
2632: LD_INT 0
2634: PPUSH
2635: CALL_OW 49
// ComHold ( i ) ;
2639: LD_VAR 0 2
2643: PPUSH
2644: CALL_OW 140
// end ;
2648: GO 2621
2650: POP
2651: POP
// end ;
2652: LD_VAR 0 1
2656: RET
// export function SelectGroup ; var units , selected , i ; begin
2657: LD_INT 0
2659: PPUSH
2660: PPUSH
2661: PPUSH
2662: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
2663: LD_ADDR_VAR 0 2
2667: PUSH
2668: LD_EXP 37
2672: PUSH
2673: LD_INT -3
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PUSH
2680: LD_EXP 4
2684: ADD
2685: PUSH
2686: LD_INT -2
2688: PUSH
2689: LD_INT -4
2691: PUSH
2692: LD_EXP 44
2696: PUSH
2697: LD_EXP 45
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: ADD
2708: PUSH
2709: LD_INT -3
2711: PUSH
2712: EMPTY
2713: LIST
2714: ADD
2715: PUSH
2716: LD_EXP 6
2720: ADD
2721: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
2722: LD_ADDR_VAR 0 3
2726: PUSH
2727: LD_EXP 37
2731: PUSH
2732: LD_STRING Select four characters to go with you
2734: PPUSH
2735: LD_INT 4
2737: PPUSH
2738: LD_INT 4
2740: PPUSH
2741: LD_VAR 0 2
2745: PPUSH
2746: EMPTY
2747: PPUSH
2748: CALL_OW 42
2752: ADD
2753: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
2754: LD_ADDR_EXP 6
2758: PUSH
2759: LD_EXP 4
2763: PUSH
2764: LD_EXP 6
2768: UNION
2769: PUSH
2770: LD_VAR 0 3
2774: DIFF
2775: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_EXP 6
2785: PUSH
2786: LD_EXP 45
2790: ADD
2791: PUSH
2792: FOR_IN
2793: IFFALSE 2824
// if GetSide ( i ) = 1 then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 255
2804: PUSH
2805: LD_INT 1
2807: EQUAL
2808: IFFALSE 2822
// SetSide ( i , 4 ) ;
2810: LD_VAR 0 4
2814: PPUSH
2815: LD_INT 4
2817: PPUSH
2818: CALL_OW 235
2822: GO 2792
2824: POP
2825: POP
// for i in selected do
2826: LD_ADDR_VAR 0 4
2830: PUSH
2831: LD_VAR 0 3
2835: PUSH
2836: FOR_IN
2837: IFFALSE 2868
// if GetSide ( i ) = 4 then
2839: LD_VAR 0 4
2843: PPUSH
2844: CALL_OW 255
2848: PUSH
2849: LD_INT 4
2851: EQUAL
2852: IFFALSE 2866
// SetSide ( i , 1 ) ;
2854: LD_VAR 0 4
2858: PPUSH
2859: LD_INT 1
2861: PPUSH
2862: CALL_OW 235
2866: GO 2836
2868: POP
2869: POP
// jmm_units := jmm_units diff cornel_units ;
2870: LD_ADDR_EXP 4
2874: PUSH
2875: LD_EXP 4
2879: PUSH
2880: LD_EXP 6
2884: DIFF
2885: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
2886: LD_EXP 38
2890: PPUSH
2891: CALL_OW 255
2895: PUSH
2896: LD_INT 4
2898: EQUAL
2899: IFFALSE 2914
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
2901: LD_EXP 3
2905: PUSH
2906: LD_STRING Bobby
2908: STR
2909: PPUSH
2910: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
2914: LD_EXP 39
2918: PPUSH
2919: CALL_OW 255
2923: PUSH
2924: LD_INT 4
2926: EQUAL
2927: IFFALSE 2942
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
2929: LD_EXP 3
2933: PUSH
2934: LD_STRING Cyrus
2936: STR
2937: PPUSH
2938: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
2942: LD_EXP 40
2946: PPUSH
2947: CALL_OW 255
2951: PUSH
2952: LD_INT 4
2954: EQUAL
2955: IFFALSE 2970
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
2957: LD_EXP 3
2961: PUSH
2962: LD_STRING Lisa
2964: STR
2965: PPUSH
2966: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
2970: LD_EXP 41
2974: PPUSH
2975: CALL_OW 255
2979: PUSH
2980: LD_INT 4
2982: EQUAL
2983: IFFALSE 2998
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
2985: LD_EXP 3
2989: PUSH
2990: LD_STRING Khatam
2992: STR
2993: PPUSH
2994: CALL_OW 40
// if GetSide ( Brian ) = 4 then
2998: LD_EXP 42
3002: PPUSH
3003: CALL_OW 255
3007: PUSH
3008: LD_INT 4
3010: EQUAL
3011: IFFALSE 3026
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3013: LD_EXP 3
3017: PUSH
3018: LD_STRING Brian
3020: STR
3021: PPUSH
3022: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3026: LD_EXP 43
3030: PPUSH
3031: CALL_OW 255
3035: PUSH
3036: LD_INT 4
3038: EQUAL
3039: IFFALSE 3054
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3041: LD_EXP 3
3045: PUSH
3046: LD_STRING Jerry
3048: STR
3049: PPUSH
3050: CALL_OW 40
// end ; end_of_file
3054: LD_VAR 0 1
3058: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3059: LD_INT 0
3061: PPUSH
3062: PPUSH
3063: PPUSH
3064: PPUSH
3065: PPUSH
3066: PPUSH
3067: PPUSH
3068: PPUSH
3069: PPUSH
3070: PPUSH
3071: PPUSH
3072: PPUSH
3073: PPUSH
// ru_alert := false ;
3074: LD_ADDR_EXP 60
3078: PUSH
3079: LD_INT 0
3081: ST_TO_ADDR
// ru_produce_list := [ ] ;
3082: LD_ADDR_EXP 57
3086: PUSH
3087: EMPTY
3088: ST_TO_ADDR
// if Difficulty > 1 then
3089: LD_OWVAR 67
3093: PUSH
3094: LD_INT 1
3096: GREATER
3097: IFFALSE 3185
// begin uc_side := 3 ;
3099: LD_ADDR_OWVAR 20
3103: PUSH
3104: LD_INT 3
3106: ST_TO_ADDR
// uc_nation := 3 ;
3107: LD_ADDR_OWVAR 21
3111: PUSH
3112: LD_INT 3
3114: ST_TO_ADDR
// bc_type := b_breastwork ;
3115: LD_ADDR_OWVAR 42
3119: PUSH
3120: LD_INT 31
3122: ST_TO_ADDR
// bc_level := Difficulty ;
3123: LD_ADDR_OWVAR 43
3127: PUSH
3128: LD_OWVAR 67
3132: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3133: LD_INT 22
3135: PPUSH
3136: LD_INT 14
3138: PPUSH
3139: LD_INT 0
3141: PPUSH
3142: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3146: LD_INT 48
3148: PPUSH
3149: LD_INT 46
3151: PPUSH
3152: LD_INT 0
3154: PPUSH
3155: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3159: LD_INT 86
3161: PPUSH
3162: LD_INT 65
3164: PPUSH
3165: LD_INT 5
3167: PPUSH
3168: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3172: LD_INT 165
3174: PPUSH
3175: LD_INT 73
3177: PPUSH
3178: LD_INT 5
3180: PPUSH
3181: CALL_OW 47
// end ; if Difficulty >= 3 then
3185: LD_OWVAR 67
3189: PUSH
3190: LD_INT 3
3192: GREATEREQUAL
3193: IFFALSE 3208
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3195: LD_INT 51
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: LD_INT 2
3203: PPUSH
3204: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3208: LD_ADDR_VAR 0 7
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: LD_INT 3
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 2
3225: PUSH
3226: LD_INT 30
3228: PUSH
3229: LD_INT 31
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: LD_INT 30
3238: PUSH
3239: LD_INT 32
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: LIST
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PPUSH
3255: CALL_OW 69
3259: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3260: LD_ADDR_VAR 0 8
3264: PUSH
3265: LD_INT 22
3267: PUSH
3268: LD_INT 3
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 30
3277: PUSH
3278: LD_INT 4
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: PPUSH
3289: CALL_OW 69
3293: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3294: LD_ADDR_VAR 0 10
3298: PUSH
3299: LD_INT 22
3301: PUSH
3302: LD_INT 3
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: LD_INT 30
3311: PUSH
3312: LD_INT 3
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PPUSH
3323: CALL_OW 69
3327: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3328: LD_ADDR_VAR 0 9
3332: PUSH
3333: LD_INT 22
3335: PUSH
3336: LD_INT 3
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 30
3345: PUSH
3346: LD_INT 6
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PPUSH
3357: CALL_OW 69
3361: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3362: LD_ADDR_VAR 0 2
3366: PUSH
3367: LD_INT 22
3369: PUSH
3370: LD_INT 3
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 30
3379: PUSH
3380: LD_INT 1
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PPUSH
3391: CALL_OW 69
3395: PUSH
3396: FOR_IN
3397: IFFALSE 3441
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3399: LD_VAR 0 2
3403: PPUSH
3404: CALL_OW 274
3408: PPUSH
3409: LD_INT 1
3411: PPUSH
3412: LD_INT 1000
3414: PPUSH
3415: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3419: LD_VAR 0 2
3423: PPUSH
3424: CALL_OW 274
3428: PPUSH
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 300
3434: PPUSH
3435: CALL_OW 277
// end ;
3439: GO 3396
3441: POP
3442: POP
// uc_side := 3 ;
3443: LD_ADDR_OWVAR 20
3447: PUSH
3448: LD_INT 3
3450: ST_TO_ADDR
// uc_nation := 3 ;
3451: LD_ADDR_OWVAR 21
3455: PUSH
3456: LD_INT 3
3458: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3459: LD_ADDR_VAR 0 11
3463: PUSH
3464: LD_INT 2
3466: PUSH
3467: LD_INT 3
3469: PUSH
3470: LD_INT 4
3472: PUSH
3473: LD_INT 4
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: PUSH
3482: LD_OWVAR 67
3486: ARRAY
3487: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3488: LD_ADDR_EXP 52
3492: PUSH
3493: LD_STRING Pokryshkin
3495: PPUSH
3496: LD_INT 0
3498: PPUSH
3499: LD_STRING 
3501: PPUSH
3502: CALL 38632 0 3
3506: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3507: LD_EXP 52
3511: PPUSH
3512: LD_INT 63
3514: PPUSH
3515: LD_INT 21
3517: PPUSH
3518: LD_INT 0
3520: PPUSH
3521: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3525: LD_EXP 52
3529: PPUSH
3530: CALL_OW 140
// InitHc ;
3534: CALL_OW 19
// for i in fac do
3538: LD_ADDR_VAR 0 2
3542: PUSH
3543: LD_VAR 0 10
3547: PUSH
3548: FOR_IN
3549: IFFALSE 3602
// begin for j = 1 to 6 do
3551: LD_ADDR_VAR 0 3
3555: PUSH
3556: DOUBLE
3557: LD_INT 1
3559: DEC
3560: ST_TO_ADDR
3561: LD_INT 6
3563: PUSH
3564: FOR_TO
3565: IFFALSE 3598
// begin PrepareHuman ( false , 3 , skill ) ;
3567: LD_INT 0
3569: PPUSH
3570: LD_INT 3
3572: PPUSH
3573: LD_VAR 0 11
3577: PPUSH
3578: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3582: CALL_OW 44
3586: PPUSH
3587: LD_VAR 0 2
3591: PPUSH
3592: CALL_OW 52
// end ;
3596: GO 3564
3598: POP
3599: POP
// end ;
3600: GO 3548
3602: POP
3603: POP
// for i in lab do
3604: LD_ADDR_VAR 0 2
3608: PUSH
3609: LD_VAR 0 9
3613: PUSH
3614: FOR_IN
3615: IFFALSE 3648
// begin PrepareHuman ( false , 4 , skill ) ;
3617: LD_INT 0
3619: PPUSH
3620: LD_INT 4
3622: PPUSH
3623: LD_VAR 0 11
3627: PPUSH
3628: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3632: CALL_OW 44
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 52
// end ;
3646: GO 3614
3648: POP
3649: POP
// for i in tw do
3650: LD_ADDR_VAR 0 2
3654: PUSH
3655: LD_VAR 0 7
3659: PUSH
3660: FOR_IN
3661: IFFALSE 3710
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
3663: LD_VAR 0 2
3667: PPUSH
3668: LD_INT 42
3670: PUSH
3671: LD_INT 43
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 1
3680: PPUSH
3681: LD_INT 2
3683: PPUSH
3684: CALL_OW 12
3688: ARRAY
3689: PPUSH
3690: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
3694: LD_VAR 0 11
3698: PPUSH
3699: LD_VAR 0 2
3703: PPUSH
3704: CALL 775 0 2
// end ;
3708: GO 3660
3710: POP
3711: POP
// for i in bar do
3712: LD_ADDR_VAR 0 2
3716: PUSH
3717: LD_VAR 0 8
3721: PUSH
3722: FOR_IN
3723: IFFALSE 3756
// begin PrepareHuman ( false , 1 , skill ) ;
3725: LD_INT 0
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_VAR 0 11
3735: PPUSH
3736: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3740: CALL_OW 44
3744: PPUSH
3745: LD_VAR 0 2
3749: PPUSH
3750: CALL_OW 52
// end ;
3754: GO 3722
3756: POP
3757: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
3758: LD_ADDR_VAR 0 13
3762: PUSH
3763: LD_INT 100
3765: PUSH
3766: LD_INT 9
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PUSH
3773: LD_INT 135
3775: PUSH
3776: LD_INT 60
3778: PUSH
3779: EMPTY
3780: LIST
3781: LIST
3782: PUSH
3783: LD_INT 41
3785: PUSH
3786: LD_INT 6
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: PUSH
3793: LD_INT 22
3795: PUSH
3796: LD_INT 9
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PUSH
3803: LD_INT 84
3805: PUSH
3806: LD_INT 14
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: ST_TO_ADDR
// vehicles := [ ] ;
3820: LD_ADDR_VAR 0 12
3824: PUSH
3825: EMPTY
3826: ST_TO_ADDR
// for i in spot_xy do
3827: LD_ADDR_VAR 0 2
3831: PUSH
3832: LD_VAR 0 13
3836: PUSH
3837: FOR_IN
3838: IFFALSE 3996
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
3840: LD_ADDR_VAR 0 6
3844: PUSH
3845: LD_INT 3
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 22
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: LD_INT 42
3862: PUSH
3863: LD_INT 43
3865: PUSH
3866: LD_INT 44
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 1
3876: PPUSH
3877: LD_INT 3
3879: PPUSH
3880: CALL_OW 12
3884: ARRAY
3885: PPUSH
3886: LD_INT 100
3888: PPUSH
3889: CALL 497 0 7
3893: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
3894: LD_ADDR_VAR 0 12
3898: PUSH
3899: LD_VAR 0 12
3903: PPUSH
3904: LD_VAR 0 12
3908: PUSH
3909: LD_INT 1
3911: PLUS
3912: PPUSH
3913: LD_VAR 0 6
3917: PPUSH
3918: CALL_OW 2
3922: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3923: LD_VAR 0 6
3927: PPUSH
3928: LD_INT 3
3930: PPUSH
3931: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
3935: LD_VAR 0 6
3939: PPUSH
3940: LD_VAR 0 2
3944: PUSH
3945: LD_INT 1
3947: ARRAY
3948: PPUSH
3949: LD_VAR 0 2
3953: PUSH
3954: LD_INT 2
3956: ARRAY
3957: PPUSH
3958: LD_INT 0
3960: PPUSH
3961: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
3965: LD_INT 0
3967: PPUSH
3968: LD_INT 3
3970: PPUSH
3971: LD_VAR 0 11
3975: PPUSH
3976: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3980: CALL_OW 44
3984: PPUSH
3985: LD_VAR 0 6
3989: PPUSH
3990: CALL_OW 52
// end ;
3994: GO 3837
3996: POP
3997: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
3998: LD_ADDR_VAR 0 2
4002: PUSH
4003: DOUBLE
4004: LD_INT 1
4006: DEC
4007: ST_TO_ADDR
4008: LD_INT 5
4010: PUSH
4011: LD_INT 7
4013: PUSH
4014: LD_INT 8
4016: PUSH
4017: LD_INT 9
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: PUSH
4026: LD_OWVAR 67
4030: ARRAY
4031: PUSH
4032: FOR_TO
4033: IFFALSE 4093
// begin PrepareHuman ( false , 1 , skill ) ;
4035: LD_INT 0
4037: PPUSH
4038: LD_INT 1
4040: PPUSH
4041: LD_VAR 0 11
4045: PPUSH
4046: CALL_OW 380
// un := CreateHuman ;
4050: LD_ADDR_VAR 0 5
4054: PUSH
4055: CALL_OW 44
4059: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4060: LD_VAR 0 5
4064: PPUSH
4065: LD_INT 11
4067: PPUSH
4068: LD_INT 0
4070: PPUSH
4071: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4075: LD_ADDR_EXP 55
4079: PUSH
4080: LD_EXP 55
4084: PUSH
4085: LD_VAR 0 5
4089: ADD
4090: ST_TO_ADDR
// end ;
4091: GO 4032
4093: POP
4094: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4095: LD_ADDR_VAR 0 2
4099: PUSH
4100: DOUBLE
4101: LD_INT 1
4103: DEC
4104: ST_TO_ADDR
4105: LD_INT 2
4107: PUSH
4108: LD_INT 3
4110: PUSH
4111: LD_INT 4
4113: PUSH
4114: LD_INT 5
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: LD_OWVAR 67
4127: ARRAY
4128: PUSH
4129: FOR_TO
4130: IFFALSE 4190
// begin PrepareHuman ( false , 1 , skill ) ;
4132: LD_INT 0
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: LD_VAR 0 11
4142: PPUSH
4143: CALL_OW 380
// un := CreateHuman ;
4147: LD_ADDR_VAR 0 5
4151: PUSH
4152: CALL_OW 44
4156: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4157: LD_VAR 0 5
4161: PPUSH
4162: LD_INT 12
4164: PPUSH
4165: LD_INT 0
4167: PPUSH
4168: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4172: LD_ADDR_EXP 53
4176: PUSH
4177: LD_EXP 53
4181: PUSH
4182: LD_VAR 0 5
4186: ADD
4187: ST_TO_ADDR
// end ;
4188: GO 4129
4190: POP
4191: POP
// for i = 1 to 2 do
4192: LD_ADDR_VAR 0 2
4196: PUSH
4197: DOUBLE
4198: LD_INT 1
4200: DEC
4201: ST_TO_ADDR
4202: LD_INT 2
4204: PUSH
4205: FOR_TO
4206: IFFALSE 4272
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4208: LD_INT 1
4210: PPUSH
4211: LD_INT 1
4213: PPUSH
4214: LD_VAR 0 11
4218: PPUSH
4219: CALL_OW 380
// un := CreateHuman ;
4223: LD_ADDR_VAR 0 5
4227: PUSH
4228: CALL_OW 44
4232: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4233: LD_VAR 0 5
4237: PPUSH
4238: LD_INT 39
4240: PPUSH
4241: LD_INT 12
4243: PPUSH
4244: LD_INT 3
4246: PPUSH
4247: LD_INT 0
4249: PPUSH
4250: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4254: LD_ADDR_EXP 54
4258: PUSH
4259: LD_EXP 54
4263: PUSH
4264: LD_VAR 0 5
4268: ADD
4269: ST_TO_ADDR
// end ;
4270: GO 4205
4272: POP
4273: POP
// for i = 1 to 3 do
4274: LD_ADDR_VAR 0 2
4278: PUSH
4279: DOUBLE
4280: LD_INT 1
4282: DEC
4283: ST_TO_ADDR
4284: LD_INT 3
4286: PUSH
4287: FOR_TO
4288: IFFALSE 4354
// begin PrepareHuman ( false , 1 , skill ) ;
4290: LD_INT 0
4292: PPUSH
4293: LD_INT 1
4295: PPUSH
4296: LD_VAR 0 11
4300: PPUSH
4301: CALL_OW 380
// un := CreateHuman ;
4305: LD_ADDR_VAR 0 5
4309: PUSH
4310: CALL_OW 44
4314: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4315: LD_VAR 0 5
4319: PPUSH
4320: LD_INT 180
4322: PPUSH
4323: LD_INT 11
4325: PPUSH
4326: LD_INT 4
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4336: LD_ADDR_EXP 58
4340: PUSH
4341: LD_EXP 58
4345: PUSH
4346: LD_VAR 0 5
4350: ADD
4351: ST_TO_ADDR
// end ;
4352: GO 4287
4354: POP
4355: POP
// ru_vehicles := vehicles ;
4356: LD_ADDR_EXP 56
4360: PUSH
4361: LD_VAR 0 12
4365: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4366: LD_ADDR_EXP 59
4370: PUSH
4371: LD_INT 131
4373: PUSH
4374: LD_INT 121
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_INT 113
4383: PUSH
4384: LD_INT 90
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: LD_INT 93
4393: PUSH
4394: LD_INT 62
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 106
4408: PUSH
4409: LD_INT 54
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 120
4418: PUSH
4419: LD_INT 80
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 143
4428: PUSH
4429: LD_INT 120
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 154
4443: PUSH
4444: LD_INT 116
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 140
4453: PUSH
4454: LD_INT 93
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: LD_INT 130
4463: PUSH
4464: LD_INT 58
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: LD_INT 105
4478: PUSH
4479: LD_INT 106
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 134
4488: PUSH
4489: LD_INT 98
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 159
4498: PUSH
4499: LD_INT 113
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: LIST
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: ST_TO_ADDR
// if Difficulty = 1 then
4517: LD_OWVAR 67
4521: PUSH
4522: LD_INT 1
4524: EQUAL
4525: IFFALSE 4529
// exit ;
4527: GO 4584
// for i = 1 to Difficulty - 1 do
4529: LD_ADDR_VAR 0 2
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_OWVAR 67
4543: PUSH
4544: LD_INT 1
4546: MINUS
4547: PUSH
4548: FOR_TO
4549: IFFALSE 4582
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
4551: LD_ADDR_EXP 57
4555: PUSH
4556: LD_EXP 57
4560: PUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: LD_INT 1
4569: PUSH
4570: LD_INT 43
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: ADD
4579: ST_TO_ADDR
4580: GO 4548
4582: POP
4583: POP
// end ;
4584: LD_VAR 0 1
4588: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
4589: LD_INT 22
4591: PUSH
4592: LD_INT 3
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: PUSH
4599: LD_INT 21
4601: PUSH
4602: LD_INT 2
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PPUSH
4613: CALL_OW 69
4617: IFFALSE 4711
4619: GO 4621
4621: DISABLE
4622: LD_INT 0
4624: PPUSH
4625: PPUSH
// begin enable ;
4626: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4627: LD_ADDR_VAR 0 2
4631: PUSH
4632: LD_INT 22
4634: PUSH
4635: LD_INT 3
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 21
4644: PUSH
4645: LD_INT 2
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PPUSH
4656: CALL_OW 69
4660: ST_TO_ADDR
// if filter then
4661: LD_VAR 0 2
4665: IFFALSE 4711
// for i in filter do
4667: LD_ADDR_VAR 0 1
4671: PUSH
4672: LD_VAR 0 2
4676: PUSH
4677: FOR_IN
4678: IFFALSE 4709
// if GetFuel ( i ) < 20 then
4680: LD_VAR 0 1
4684: PPUSH
4685: CALL_OW 261
4689: PUSH
4690: LD_INT 20
4692: LESS
4693: IFFALSE 4707
// SetFuel ( i , 20 ) ;
4695: LD_VAR 0 1
4699: PPUSH
4700: LD_INT 20
4702: PPUSH
4703: CALL_OW 240
4707: GO 4677
4709: POP
4710: POP
// end ;
4711: PPOPN 2
4713: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
4714: LD_EXP 57
4718: IFFALSE 4937
4720: GO 4722
4722: DISABLE
4723: LD_INT 0
4725: PPUSH
4726: PPUSH
4727: PPUSH
// begin enable ;
4728: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4729: LD_ADDR_VAR 0 2
4733: PUSH
4734: LD_INT 22
4736: PUSH
4737: LD_INT 3
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 30
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PPUSH
4758: CALL_OW 69
4762: ST_TO_ADDR
// can_produce := [ ] ;
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: EMPTY
4769: ST_TO_ADDR
// if not fac then
4770: LD_VAR 0 2
4774: NOT
4775: IFFALSE 4780
// begin disable ;
4777: DISABLE
// exit ;
4778: GO 4937
// end ; for i in fac do
4780: LD_ADDR_VAR 0 1
4784: PUSH
4785: LD_VAR 0 2
4789: PUSH
4790: FOR_IN
4791: IFFALSE 4829
// if UnitsInside ( i ) then
4793: LD_VAR 0 1
4797: PPUSH
4798: CALL_OW 313
4802: IFFALSE 4827
// can_produce := Insert ( can_produce , 1 , i ) ;
4804: LD_ADDR_VAR 0 3
4808: PUSH
4809: LD_VAR 0 3
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: LD_VAR 0 1
4821: PPUSH
4822: CALL_OW 2
4826: ST_TO_ADDR
4827: GO 4790
4829: POP
4830: POP
// if not can_produce then
4831: LD_VAR 0 3
4835: NOT
4836: IFFALSE 4840
// exit ;
4838: GO 4937
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
4840: LD_VAR 0 3
4844: PUSH
4845: LD_INT 1
4847: PPUSH
4848: LD_VAR 0 3
4852: PPUSH
4853: CALL_OW 12
4857: ARRAY
4858: PPUSH
4859: LD_EXP 57
4863: PUSH
4864: LD_INT 1
4866: ARRAY
4867: PPUSH
4868: LD_EXP 57
4872: PUSH
4873: LD_INT 2
4875: ARRAY
4876: PPUSH
4877: LD_EXP 57
4881: PUSH
4882: LD_INT 3
4884: ARRAY
4885: PPUSH
4886: LD_EXP 57
4890: PUSH
4891: LD_INT 4
4893: ARRAY
4894: PPUSH
4895: CALL_OW 125
// for i = 1 to 4 do
4899: LD_ADDR_VAR 0 1
4903: PUSH
4904: DOUBLE
4905: LD_INT 1
4907: DEC
4908: ST_TO_ADDR
4909: LD_INT 4
4911: PUSH
4912: FOR_TO
4913: IFFALSE 4935
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
4915: LD_ADDR_EXP 57
4919: PUSH
4920: LD_EXP 57
4924: PPUSH
4925: LD_INT 1
4927: PPUSH
4928: CALL_OW 3
4932: ST_TO_ADDR
4933: GO 4912
4935: POP
4936: POP
// end ;
4937: PPOPN 3
4939: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
4940: LD_INT 0
4942: PPUSH
4943: PPUSH
4944: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4945: LD_ADDR_VAR 0 2
4949: PUSH
4950: DOUBLE
4951: LD_INT 1
4953: DEC
4954: ST_TO_ADDR
4955: LD_INT 2
4957: PUSH
4958: LD_INT 3
4960: PUSH
4961: LD_INT 4
4963: PUSH
4964: LD_INT 4
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: LD_OWVAR 67
4977: ARRAY
4978: PUSH
4979: FOR_TO
4980: IFFALSE 5129
// begin PrepareHuman ( false , 3 , 3 ) ;
4982: LD_INT 0
4984: PPUSH
4985: LD_INT 3
4987: PPUSH
4988: LD_INT 3
4990: PPUSH
4991: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
4995: LD_ADDR_VAR 0 3
4999: PUSH
5000: LD_INT 3
5002: PPUSH
5003: LD_INT 3
5005: PPUSH
5006: LD_INT 22
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: LD_INT 1
5014: PPUSH
5015: LD_INT 43
5017: PUSH
5018: LD_INT 42
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: PUSH
5025: LD_INT 1
5027: PPUSH
5028: LD_INT 2
5030: PPUSH
5031: CALL_OW 12
5035: ARRAY
5036: PPUSH
5037: LD_INT 70
5039: PPUSH
5040: CALL 497 0 7
5044: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5045: LD_VAR 0 3
5049: PPUSH
5050: LD_INT 4
5052: PPUSH
5053: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5057: LD_VAR 0 3
5061: PPUSH
5062: LD_INT 229
5064: PPUSH
5065: LD_INT 44
5067: PPUSH
5068: LD_INT 0
5070: PPUSH
5071: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5075: CALL_OW 44
5079: PPUSH
5080: LD_VAR 0 3
5084: PPUSH
5085: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5089: LD_ADDR_EXP 56
5093: PUSH
5094: LD_EXP 56
5098: PUSH
5099: LD_VAR 0 3
5103: ADD
5104: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5105: LD_VAR 0 3
5109: PPUSH
5110: LD_INT 191
5112: PPUSH
5113: LD_INT 32
5115: PPUSH
5116: CALL_OW 111
// Wait ( 0 0$02 ) ;
5120: LD_INT 70
5122: PPUSH
5123: CALL_OW 67
// end ;
5127: GO 4979
5129: POP
5130: POP
// end ;
5131: LD_VAR 0 1
5135: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5136: LD_EXP 31
5140: PUSH
5141: LD_EXP 56
5145: AND
5146: IFFALSE 5320
5148: GO 5150
5150: DISABLE
5151: LD_INT 0
5153: PPUSH
5154: PPUSH
5155: PPUSH
// begin wait ( 0 0$50 ) ;
5156: LD_INT 1750
5158: PPUSH
5159: CALL_OW 67
// tmp := ru_vehicles ;
5163: LD_ADDR_VAR 0 3
5167: PUSH
5168: LD_EXP 56
5172: ST_TO_ADDR
// if not tmp then
5173: LD_VAR 0 3
5177: NOT
5178: IFFALSE 5182
// exit ;
5180: GO 5320
// repeat wait ( 0 0$1 ) ;
5182: LD_INT 35
5184: PPUSH
5185: CALL_OW 67
// for i in tmp do
5189: LD_ADDR_VAR 0 1
5193: PUSH
5194: LD_VAR 0 3
5198: PUSH
5199: FOR_IN
5200: IFFALSE 5311
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5202: LD_ADDR_VAR 0 2
5206: PUSH
5207: LD_INT 22
5209: PUSH
5210: LD_INT 1
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PPUSH
5217: LD_VAR 0 1
5221: PPUSH
5222: CALL_OW 74
5226: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5227: LD_VAR 0 1
5231: PPUSH
5232: LD_VAR 0 2
5236: PPUSH
5237: CALL_OW 296
5241: PUSH
5242: LD_INT 10
5244: GREATER
5245: IFFALSE 5264
// ComAgressiveMove ( i , 69 , 101 ) else
5247: LD_VAR 0 1
5251: PPUSH
5252: LD_INT 69
5254: PPUSH
5255: LD_INT 101
5257: PPUSH
5258: CALL_OW 114
5262: GO 5278
// ComAttackUnit ( i , enemy ) ;
5264: LD_VAR 0 1
5268: PPUSH
5269: LD_VAR 0 2
5273: PPUSH
5274: CALL_OW 115
// if GetLives ( i ) < 250 then
5278: LD_VAR 0 1
5282: PPUSH
5283: CALL_OW 256
5287: PUSH
5288: LD_INT 250
5290: LESS
5291: IFFALSE 5309
// tmp := tmp diff i ;
5293: LD_ADDR_VAR 0 3
5297: PUSH
5298: LD_VAR 0 3
5302: PUSH
5303: LD_VAR 0 1
5307: DIFF
5308: ST_TO_ADDR
// end ;
5309: GO 5199
5311: POP
5312: POP
// until not tmp ;
5313: LD_VAR 0 3
5317: NOT
5318: IFFALSE 5182
// end ; end_of_file
5320: PPOPN 3
5322: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5323: LD_INT 0
5325: PPUSH
5326: PPUSH
5327: PPUSH
5328: PPUSH
5329: PPUSH
5330: PPUSH
5331: PPUSH
// InGameOn ;
5332: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5336: LD_EXP 37
5340: PPUSH
5341: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5345: LD_EXP 37
5349: PPUSH
5350: LD_EXP 44
5354: PPUSH
5355: CALL_OW 119
// if Bierezov then
5359: LD_EXP 45
5363: IFFALSE 5379
// ComTurnUnit ( Bierezov , Cornel ) ;
5365: LD_EXP 45
5369: PPUSH
5370: LD_EXP 44
5374: PPUSH
5375: CALL_OW 119
// for i in jmm_units do
5379: LD_ADDR_VAR 0 2
5383: PUSH
5384: LD_EXP 4
5388: PUSH
5389: FOR_IN
5390: IFFALSE 5408
// ComTurnUnit ( i , Cornel ) ;
5392: LD_VAR 0 2
5396: PPUSH
5397: LD_EXP 44
5401: PPUSH
5402: CALL_OW 119
5406: GO 5389
5408: POP
5409: POP
// units := cornel_units union Cornel ;
5410: LD_ADDR_VAR 0 3
5414: PUSH
5415: LD_EXP 6
5419: PUSH
5420: LD_EXP 44
5424: UNION
5425: ST_TO_ADDR
// repeat wait ( 1 ) ;
5426: LD_INT 1
5428: PPUSH
5429: CALL_OW 67
// for i in units do
5433: LD_ADDR_VAR 0 2
5437: PUSH
5438: LD_VAR 0 3
5442: PUSH
5443: FOR_IN
5444: IFFALSE 5477
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5446: LD_VAR 0 2
5450: PPUSH
5451: LD_EXP 37
5455: PPUSH
5456: CALL_OW 250
5460: PPUSH
5461: LD_EXP 37
5465: PPUSH
5466: CALL_OW 251
5470: PPUSH
5471: CALL_OW 111
5475: GO 5443
5477: POP
5478: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5479: LD_VAR 0 3
5483: PPUSH
5484: LD_INT 92
5486: PUSH
5487: LD_EXP 37
5491: PPUSH
5492: CALL_OW 250
5496: PUSH
5497: LD_EXP 37
5501: PPUSH
5502: CALL_OW 251
5506: PUSH
5507: LD_INT 10
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: PPUSH
5516: CALL_OW 72
5520: PUSH
5521: LD_VAR 0 3
5525: EQUAL
5526: IFFALSE 5426
// for i in units do
5528: LD_ADDR_VAR 0 2
5532: PUSH
5533: LD_VAR 0 3
5537: PUSH
5538: FOR_IN
5539: IFFALSE 5557
// ComTurnUnit ( i , JMM ) ;
5541: LD_VAR 0 2
5545: PPUSH
5546: LD_EXP 37
5550: PPUSH
5551: CALL_OW 119
5555: GO 5538
5557: POP
5558: POP
// ComTurnUnit ( Cornel , JMM ) ;
5559: LD_EXP 44
5563: PPUSH
5564: LD_EXP 37
5568: PPUSH
5569: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
5573: LD_EXP 37
5577: PPUSH
5578: LD_STRING D1-JMM-1
5580: PPUSH
5581: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
5585: LD_EXP 44
5589: PPUSH
5590: LD_STRING D1-Corn-1
5592: PPUSH
5593: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
5597: LD_EXP 37
5601: PPUSH
5602: LD_EXP 44
5606: PPUSH
5607: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
5611: LD_EXP 44
5615: PPUSH
5616: LD_EXP 37
5620: PPUSH
5621: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
5625: LD_INT 35
5627: PPUSH
5628: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
5632: LD_EXP 37
5636: PPUSH
5637: LD_EXP 44
5641: PPUSH
5642: CALL_OW 296
5646: PUSH
5647: LD_INT 6
5649: LESS
5650: IFFALSE 5625
// ChangeSideFog ( 4 , 1 ) ;
5652: LD_INT 4
5654: PPUSH
5655: LD_INT 1
5657: PPUSH
5658: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
5662: LD_EXP 37
5666: PPUSH
5667: LD_EXP 44
5671: PPUSH
5672: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5676: LD_EXP 44
5680: PPUSH
5681: LD_EXP 37
5685: PPUSH
5686: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
5690: LD_EXP 37
5694: PPUSH
5695: LD_STRING D1-JMM-2
5697: PPUSH
5698: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
5702: LD_EXP 37
5706: PPUSH
5707: LD_STRING D1-JMM-2a
5709: PPUSH
5710: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
5714: LD_EXP 44
5718: PPUSH
5719: LD_STRING D1-Corn-2
5721: PPUSH
5722: CALL_OW 88
// if bierezov_exist or debug then
5726: LD_EXP 7
5730: PUSH
5731: LD_EXP 1
5735: OR
5736: IFFALSE 5977
// begin ComTurnUnit ( Cornel , Bierezov ) ;
5738: LD_EXP 44
5742: PPUSH
5743: LD_EXP 45
5747: PPUSH
5748: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
5752: LD_INT 10
5754: PPUSH
5755: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
5759: LD_EXP 44
5763: PPUSH
5764: LD_STRING D1a-Corn-1
5766: PPUSH
5767: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
5771: LD_EXP 37
5775: PPUSH
5776: LD_EXP 45
5780: PPUSH
5781: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
5785: LD_EXP 45
5789: PPUSH
5790: LD_EXP 37
5794: PPUSH
5795: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
5799: LD_EXP 37
5803: PPUSH
5804: LD_STRING D1a-JMM-1
5806: PPUSH
5807: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
5811: LD_EXP 37
5815: PPUSH
5816: LD_EXP 44
5820: PPUSH
5821: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5825: LD_EXP 44
5829: PPUSH
5830: LD_EXP 37
5834: PPUSH
5835: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
5839: LD_EXP 44
5843: PPUSH
5844: LD_STRING D1a-Corn-2
5846: PPUSH
5847: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
5851: LD_EXP 37
5855: PPUSH
5856: LD_STRING D1a-JMM-2
5858: PPUSH
5859: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
5863: LD_EXP 44
5867: PPUSH
5868: LD_STRING D1a-Corn-3
5870: PPUSH
5871: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
5875: LD_EXP 37
5879: PPUSH
5880: LD_STRING D1a-JMM-3
5882: PPUSH
5883: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
5887: LD_EXP 44
5891: PPUSH
5892: LD_STRING D1a-Corn-4
5894: PPUSH
5895: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
5899: LD_EXP 37
5903: PPUSH
5904: LD_STRING D1a-JMM-4
5906: PPUSH
5907: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
5911: LD_EXP 44
5915: PPUSH
5916: LD_STRING D1a-Corn-5
5918: PPUSH
5919: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
5923: LD_EXP 45
5927: PPUSH
5928: LD_EXP 44
5932: PPUSH
5933: CALL_OW 250
5937: PPUSH
5938: LD_EXP 44
5942: PPUSH
5943: CALL_OW 251
5947: PUSH
5948: LD_INT 2
5950: MINUS
5951: PPUSH
5952: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
5956: LD_EXP 45
5960: PPUSH
5961: LD_EXP 44
5965: PPUSH
5966: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
5970: LD_INT 10
5972: PPUSH
5973: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
5977: LD_EXP 37
5981: PPUSH
5982: LD_STRING D1b-JMM-1
5984: PPUSH
5985: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
5989: LD_EXP 44
5993: PPUSH
5994: LD_STRING D1b-Corn-1
5996: PPUSH
5997: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6001: LD_EXP 37
6005: PPUSH
6006: LD_STRING D1b-JMM-2
6008: PPUSH
6009: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6013: LD_EXP 44
6017: PPUSH
6018: LD_STRING D1b-Corn-2
6020: PPUSH
6021: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6025: LD_EXP 37
6029: PPUSH
6030: LD_STRING D1b-JMM-3
6032: PPUSH
6033: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6037: LD_INT 10
6039: PPUSH
6040: CALL_OW 67
// SayRadio ( Powell , D1b-Pow-3 ) ;
6044: LD_EXP 46
6048: PPUSH
6049: LD_STRING D1b-Pow-3
6051: PPUSH
6052: CALL_OW 94
// Say ( JMM , D1b-JMM-4 ) ;
6056: LD_EXP 37
6060: PPUSH
6061: LD_STRING D1b-JMM-4
6063: PPUSH
6064: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6068: LD_EXP 44
6072: PPUSH
6073: LD_STRING D1b-Corn-4
6075: PPUSH
6076: CALL_OW 88
// if Khatam then
6080: LD_EXP 41
6084: IFFALSE 6100
// Say ( Khatam , D1b-Khat-4 ) else
6086: LD_EXP 41
6090: PPUSH
6091: LD_STRING D1b-Khat-4
6093: PPUSH
6094: CALL_OW 88
6098: GO 6136
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6100: LD_EXP 6
6104: PPUSH
6105: LD_INT 26
6107: PUSH
6108: LD_INT 1
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PPUSH
6115: CALL_OW 72
6119: PUSH
6120: LD_EXP 44
6124: PUSH
6125: EMPTY
6126: LIST
6127: DIFF
6128: PPUSH
6129: LD_STRING D1b-Sol1-4
6131: PPUSH
6132: CALL 585 0 2
// if Cyrus then
6136: LD_EXP 39
6140: IFFALSE 6154
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6142: LD_EXP 39
6146: PPUSH
6147: LD_STRING D1b-Cyrus-4
6149: PPUSH
6150: CALL_OW 88
// if Lisa then
6154: LD_EXP 40
6158: IFFALSE 6216
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6160: LD_EXP 40
6164: PPUSH
6165: LD_STRING D1b-Lisa-4
6167: PPUSH
6168: CALL_OW 88
// if Cyrus then
6172: LD_EXP 39
6176: IFFALSE 6216
// begin if not IsInUnit ( Cyrus ) then
6178: LD_EXP 39
6182: PPUSH
6183: CALL_OW 310
6187: NOT
6188: IFFALSE 6204
// ComTurnUnit ( Cyrus , Lisa ) ;
6190: LD_EXP 39
6194: PPUSH
6195: LD_EXP 40
6199: PPUSH
6200: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6204: LD_EXP 39
6208: PPUSH
6209: LD_STRING D1b-Cyrus-5
6211: PPUSH
6212: CALL_OW 88
// end ; end ; SelectGroup ;
6216: CALL 2657 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6220: LD_EXP 37
6224: PPUSH
6225: LD_STRING D1d-JMM-1
6227: PPUSH
6228: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6232: LD_EXP 44
6236: PPUSH
6237: LD_STRING D1d-Corn-1
6239: PPUSH
6240: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6244: LD_ADDR_VAR 0 2
6248: PUSH
6249: LD_EXP 4
6253: PUSH
6254: LD_EXP 6
6258: ADD
6259: PUSH
6260: LD_EXP 37
6264: ADD
6265: PUSH
6266: FOR_IN
6267: IFFALSE 6280
// ComHold ( i ) ;
6269: LD_VAR 0 2
6273: PPUSH
6274: CALL_OW 140
6278: GO 6266
6280: POP
6281: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6282: LD_ADDR_VAR 0 4
6286: PUSH
6287: LD_INT 22
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 21
6299: PUSH
6300: LD_INT 2
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PPUSH
6311: CALL_OW 69
6315: ST_TO_ADDR
// if vehicles then
6316: LD_VAR 0 4
6320: IFFALSE 6658
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6322: LD_EXP 6
6326: PPUSH
6327: LD_INT 55
6329: PUSH
6330: EMPTY
6331: LIST
6332: PPUSH
6333: CALL_OW 72
6337: IFFALSE 6376
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6339: LD_ADDR_VAR 0 2
6343: PUSH
6344: LD_EXP 6
6348: PPUSH
6349: LD_INT 55
6351: PUSH
6352: EMPTY
6353: LIST
6354: PPUSH
6355: CALL_OW 72
6359: PUSH
6360: FOR_IN
6361: IFFALSE 6374
// ComExitVehicle ( i ) ;
6363: LD_VAR 0 2
6367: PPUSH
6368: CALL_OW 121
6372: GO 6360
6374: POP
6375: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6376: LD_ADDR_VAR 0 5
6380: PUSH
6381: LD_VAR 0 4
6385: PPUSH
6386: LD_INT 34
6388: PUSH
6389: LD_INT 51
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 72
6400: ST_TO_ADDR
// if cargos then
6401: LD_VAR 0 5
6405: IFFALSE 6588
// begin vehicles := cargos ;
6407: LD_ADDR_VAR 0 4
6411: PUSH
6412: LD_VAR 0 5
6416: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6417: LD_ADDR_VAR 0 6
6421: PUSH
6422: LD_STRING 02_resources_4
6424: PPUSH
6425: LD_INT 0
6427: PPUSH
6428: CALL_OW 30
6432: ST_TO_ADDR
// if debug and not resources then
6433: LD_EXP 1
6437: PUSH
6438: LD_VAR 0 6
6442: NOT
6443: AND
6444: IFFALSE 6454
// resources := 160 ;
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: LD_INT 160
6453: ST_TO_ADDR
// if resources mod 10 then
6454: LD_VAR 0 6
6458: PUSH
6459: LD_INT 10
6461: MOD
6462: IFFALSE 6484
// resources := resources - resources mod 10 ;
6464: LD_ADDR_VAR 0 6
6468: PUSH
6469: LD_VAR 0 6
6473: PUSH
6474: LD_VAR 0 6
6478: PUSH
6479: LD_INT 10
6481: MOD
6482: MINUS
6483: ST_TO_ADDR
// if resources then
6484: LD_VAR 0 6
6488: IFFALSE 6588
// for i in cargos do
6490: LD_ADDR_VAR 0 2
6494: PUSH
6495: LD_VAR 0 5
6499: PUSH
6500: FOR_IN
6501: IFFALSE 6586
// begin if resources < 100 then
6503: LD_VAR 0 6
6507: PUSH
6508: LD_INT 100
6510: LESS
6511: IFFALSE 6533
// begin cargo := resources ;
6513: LD_ADDR_VAR 0 7
6517: PUSH
6518: LD_VAR 0 6
6522: ST_TO_ADDR
// resources := 0 ;
6523: LD_ADDR_VAR 0 6
6527: PUSH
6528: LD_INT 0
6530: ST_TO_ADDR
// end else
6531: GO 6555
// begin cargo := 100 ;
6533: LD_ADDR_VAR 0 7
6537: PUSH
6538: LD_INT 100
6540: ST_TO_ADDR
// resources := resources - 100 ;
6541: LD_ADDR_VAR 0 6
6545: PUSH
6546: LD_VAR 0 6
6550: PUSH
6551: LD_INT 100
6553: MINUS
6554: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
6555: LD_VAR 0 2
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: LD_VAR 0 7
6567: PPUSH
6568: CALL_OW 290
// if resources = 0 then
6572: LD_VAR 0 6
6576: PUSH
6577: LD_INT 0
6579: EQUAL
6580: IFFALSE 6584
// break ;
6582: GO 6586
// end ;
6584: GO 6500
6586: POP
6587: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
6588: LD_VAR 0 4
6592: PUSH
6593: LD_INT 1
6595: ARRAY
6596: PPUSH
6597: CALL_OW 311
6601: PPUSH
6602: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
6606: LD_VAR 0 4
6610: PUSH
6611: LD_INT 1
6613: ARRAY
6614: PPUSH
6615: LD_INT 4
6617: PPUSH
6618: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
6622: LD_EXP 44
6626: PPUSH
6627: LD_VAR 0 4
6631: PUSH
6632: LD_INT 1
6634: ARRAY
6635: PPUSH
6636: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
6640: LD_INT 35
6642: PPUSH
6643: CALL_OW 67
// until IsInUnit ( Cornel ) ;
6647: LD_EXP 44
6651: PPUSH
6652: CALL_OW 310
6656: IFFALSE 6640
// end ; InGameOff ;
6658: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6662: LD_STRING M1
6664: PPUSH
6665: CALL_OW 337
// SaveForQuickRestart ;
6669: CALL_OW 22
// cornel_active := true ;
6673: LD_ADDR_EXP 8
6677: PUSH
6678: LD_INT 1
6680: ST_TO_ADDR
// end ;
6681: LD_VAR 0 1
6685: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
6686: LD_EXP 37
6690: PPUSH
6691: LD_EXP 47
6695: PPUSH
6696: CALL_OW 296
6700: PUSH
6701: LD_INT 10
6703: LESS
6704: IFFALSE 8087
6706: GO 6708
6708: DISABLE
6709: LD_INT 0
6711: PPUSH
6712: PPUSH
6713: PPUSH
6714: PPUSH
6715: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
6716: LD_ADDR_VAR 0 2
6720: PUSH
6721: LD_INT 89
6723: PUSH
6724: LD_INT 34
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: LD_INT 138
6733: PUSH
6734: LD_INT 63
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 196
6743: PUSH
6744: LD_INT 84
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 135
6753: PUSH
6754: LD_INT 52
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 103
6763: PUSH
6764: LD_INT 39
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 58
6773: PUSH
6774: LD_INT 30
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 38
6783: PUSH
6784: LD_INT 51
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: ST_TO_ADDR
// Video ( true ) ;
6800: LD_INT 1
6802: PPUSH
6803: CALL 75980 0 1
// if jmm_units then
6807: LD_EXP 4
6811: IFFALSE 6887
// for i in jmm_units do
6813: LD_ADDR_VAR 0 1
6817: PUSH
6818: LD_EXP 4
6822: PUSH
6823: FOR_IN
6824: IFFALSE 6885
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
6826: LD_VAR 0 1
6830: PPUSH
6831: LD_EXP 37
6835: PPUSH
6836: CALL_OW 296
6840: PUSH
6841: LD_INT 10
6843: LESS
6844: PUSH
6845: LD_VAR 0 1
6849: PPUSH
6850: CALL_OW 310
6854: NOT
6855: AND
6856: IFFALSE 6874
// ComTurnUnit ( i , JMM ) else
6858: LD_VAR 0 1
6862: PPUSH
6863: LD_EXP 37
6867: PPUSH
6868: CALL_OW 119
6872: GO 6883
// ComHold ( i ) ;
6874: LD_VAR 0 1
6878: PPUSH
6879: CALL_OW 140
// end ;
6883: GO 6823
6885: POP
6886: POP
// if IsInUnit ( JMM ) then
6887: LD_EXP 37
6891: PPUSH
6892: CALL_OW 310
6896: IFFALSE 6921
// begin ComExitVehicle ( JMM ) ;
6898: LD_EXP 37
6902: PPUSH
6903: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
6907: LD_EXP 37
6911: PPUSH
6912: LD_EXP 47
6916: PPUSH
6917: CALL_OW 172
// end ; Wait ( 10 ) ;
6921: LD_INT 10
6923: PPUSH
6924: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
6928: LD_EXP 37
6932: PPUSH
6933: LD_EXP 47
6937: PPUSH
6938: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
6942: LD_INT 35
6944: PPUSH
6945: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
6949: LD_EXP 37
6953: PPUSH
6954: LD_EXP 47
6958: PPUSH
6959: CALL_OW 296
6963: PUSH
6964: LD_INT 6
6966: LESS
6967: IFFALSE 6942
// ComTurnUnit ( JMM , Lynch ) ;
6969: LD_EXP 37
6973: PPUSH
6974: LD_EXP 47
6978: PPUSH
6979: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
6983: LD_ADDR_VAR 0 1
6987: PUSH
6988: LD_EXP 47
6992: PUSH
6993: LD_EXP 48
6997: PUSH
6998: LD_EXP 49
7002: PUSH
7003: LD_EXP 50
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: PUSH
7014: FOR_IN
7015: IFFALSE 7033
// ComTurnUnit ( i , JMM ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: LD_EXP 37
7026: PPUSH
7027: CALL_OW 119
7031: GO 7014
7033: POP
7034: POP
// Wait ( 0 0$0.3 ) ;
7035: LD_INT 10
7037: PPUSH
7038: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7042: LD_EXP 37
7046: PPUSH
7047: LD_STRING D2-JMM-1
7049: PPUSH
7050: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7054: LD_EXP 47
7058: PPUSH
7059: LD_STRING D2-Sol1-1
7061: PPUSH
7062: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7066: LD_EXP 37
7070: PPUSH
7071: LD_STRING D2-JMM-2
7073: PPUSH
7074: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7078: LD_EXP 47
7082: PPUSH
7083: LD_STRING D2-Sol1-2
7085: PPUSH
7086: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7090: LD_EXP 37
7094: PPUSH
7095: LD_STRING D2-JMM-3
7097: PPUSH
7098: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7102: LD_EXP 47
7106: PPUSH
7107: LD_STRING D2-Sol1-3
7109: PPUSH
7110: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7114: LD_ADDR_VAR 0 1
7118: PUSH
7119: LD_INT 22
7121: PUSH
7122: LD_INT 8
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PPUSH
7129: CALL_OW 69
7133: PUSH
7134: FOR_IN
7135: IFFALSE 7151
// SetSide ( i , 1 ) ;
7137: LD_VAR 0 1
7141: PPUSH
7142: LD_INT 1
7144: PPUSH
7145: CALL_OW 235
7149: GO 7134
7151: POP
7152: POP
// Say ( JMM , D2-JMM-4 ) ;
7153: LD_EXP 37
7157: PPUSH
7158: LD_STRING D2-JMM-4
7160: PPUSH
7161: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7165: LD_INT 1
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 332
// for i = 1 to points do
7175: LD_ADDR_VAR 0 1
7179: PUSH
7180: DOUBLE
7181: LD_INT 1
7183: DEC
7184: ST_TO_ADDR
7185: LD_VAR 0 2
7189: PUSH
7190: FOR_TO
7191: IFFALSE 7366
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7193: LD_VAR 0 2
7197: PUSH
7198: LD_VAR 0 1
7202: ARRAY
7203: PUSH
7204: LD_INT 1
7206: ARRAY
7207: PPUSH
7208: LD_VAR 0 2
7212: PUSH
7213: LD_VAR 0 1
7217: ARRAY
7218: PUSH
7219: LD_INT 2
7221: ARRAY
7222: PPUSH
7223: CALL_OW 84
// if i = 1 then
7227: LD_VAR 0 1
7231: PUSH
7232: LD_INT 1
7234: EQUAL
7235: IFFALSE 7249
// Say ( Lynch , D2-Sol1-4 ) ;
7237: LD_EXP 47
7241: PPUSH
7242: LD_STRING D2-Sol1-4
7244: PPUSH
7245: CALL_OW 88
// if i = 2 then
7249: LD_VAR 0 1
7253: PUSH
7254: LD_INT 2
7256: EQUAL
7257: IFFALSE 7271
// Say ( JMM , D2-JMM-5 ) ;
7259: LD_EXP 37
7263: PPUSH
7264: LD_STRING D2-JMM-5
7266: PPUSH
7267: CALL_OW 88
// if i = 4 then
7271: LD_VAR 0 1
7275: PUSH
7276: LD_INT 4
7278: EQUAL
7279: IFFALSE 7303
// begin RevealFogArea ( 1 , troopsArea ) ;
7281: LD_INT 1
7283: PPUSH
7284: LD_INT 6
7286: PPUSH
7287: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7291: LD_EXP 47
7295: PPUSH
7296: LD_STRING D2-Sol1-5
7298: PPUSH
7299: CALL_OW 88
// end ; if i = 5 then
7303: LD_VAR 0 1
7307: PUSH
7308: LD_INT 5
7310: EQUAL
7311: IFFALSE 7325
// Say ( JMM , D2-JMM-6 ) ;
7313: LD_EXP 37
7317: PPUSH
7318: LD_STRING D2-JMM-6
7320: PPUSH
7321: CALL_OW 88
// if i = 7 then
7325: LD_VAR 0 1
7329: PUSH
7330: LD_INT 7
7332: EQUAL
7333: IFFALSE 7357
// begin RevealFogArea ( 1 , forestArea ) ;
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 7
7340: PPUSH
7341: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7345: LD_EXP 47
7349: PPUSH
7350: LD_STRING D2-Sol1-6
7352: PPUSH
7353: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7357: LD_INT 46
7359: PPUSH
7360: CALL_OW 67
// end ;
7364: GO 7190
7366: POP
7367: POP
// CenterNowOnUnits ( JMM ) ;
7368: LD_EXP 37
7372: PPUSH
7373: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7377: LD_EXP 37
7381: PPUSH
7382: LD_STRING D2-JMM-7
7384: PPUSH
7385: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7389: LD_EXP 47
7393: PPUSH
7394: LD_STRING D2-Sol1-7
7396: PPUSH
7397: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7401: LD_EXP 37
7405: PPUSH
7406: LD_STRING D2-JMM-8
7408: PPUSH
7409: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7413: LD_ADDR_VAR 0 4
7417: PUSH
7418: LD_INT 22
7420: PUSH
7421: LD_INT 1
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 30
7430: PUSH
7431: LD_INT 31
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PPUSH
7442: CALL_OW 69
7446: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7447: LD_EXP 47
7451: PPUSH
7452: LD_VAR 0 4
7456: PUSH
7457: LD_INT 1
7459: ARRAY
7460: PPUSH
7461: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7465: LD_INT 65
7467: PPUSH
7468: LD_INT 101
7470: PPUSH
7471: CALL_OW 428
7475: IFFALSE 7498
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7477: LD_INT 65
7479: PPUSH
7480: LD_INT 101
7482: PPUSH
7483: CALL_OW 428
7487: PPUSH
7488: LD_INT 75
7490: PPUSH
7491: LD_INT 100
7493: PPUSH
7494: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7498: LD_INT 66
7500: PPUSH
7501: LD_INT 103
7503: PPUSH
7504: CALL_OW 428
7508: IFFALSE 7531
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7510: LD_INT 66
7512: PPUSH
7513: LD_INT 103
7515: PPUSH
7516: CALL_OW 428
7520: PPUSH
7521: LD_INT 75
7523: PPUSH
7524: LD_INT 100
7526: PPUSH
7527: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7531: LD_ADDR_VAR 0 5
7535: PUSH
7536: LD_INT 22
7538: PUSH
7539: LD_INT 1
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 21
7548: PUSH
7549: LD_INT 2
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 91
7558: PUSH
7559: LD_EXP 37
7563: PUSH
7564: LD_INT 7
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: LIST
7576: PPUSH
7577: CALL_OW 69
7581: ST_TO_ADDR
// if tmp then
7582: LD_VAR 0 5
7586: IFFALSE 7603
// ComMoveXY ( tmp , 75 , 100 ) ;
7588: LD_VAR 0 5
7592: PPUSH
7593: LD_INT 75
7595: PPUSH
7596: LD_INT 100
7598: PPUSH
7599: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
7603: LD_ADDR_VAR 0 3
7607: PUSH
7608: LD_EXP 4
7612: PPUSH
7613: LD_INT 25
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 72
7627: PPUSH
7628: LD_EXP 37
7632: PPUSH
7633: CALL_OW 74
7637: ST_TO_ADDR
// if sol then
7638: LD_VAR 0 3
7642: IFFALSE 7702
// if GetDistUnits ( JMM , sol ) < 10 then
7644: LD_EXP 37
7648: PPUSH
7649: LD_VAR 0 3
7653: PPUSH
7654: CALL_OW 296
7658: PUSH
7659: LD_INT 10
7661: LESS
7662: IFFALSE 7702
// begin if IsInUnit ( sol ) then
7664: LD_VAR 0 3
7668: PPUSH
7669: CALL_OW 310
7673: IFFALSE 7684
// ComExitVehicle ( sol ) ;
7675: LD_VAR 0 3
7679: PPUSH
7680: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
7684: LD_VAR 0 3
7688: PPUSH
7689: LD_VAR 0 4
7693: PUSH
7694: LD_INT 2
7696: ARRAY
7697: PPUSH
7698: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
7702: LD_INT 10
7704: PPUSH
7705: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
7709: LD_EXP 37
7713: PPUSH
7714: LD_INT 65
7716: PPUSH
7717: LD_INT 101
7719: PPUSH
7720: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
7724: LD_EXP 37
7728: PPUSH
7729: LD_INT 63
7731: PPUSH
7732: LD_INT 100
7734: PPUSH
7735: CALL_OW 178
// tmp := 0 0$0 ;
7739: LD_ADDR_VAR 0 5
7743: PUSH
7744: LD_INT 0
7746: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7747: LD_INT 35
7749: PPUSH
7750: CALL_OW 67
// tmp := tmp + 0 0$1 ;
7754: LD_ADDR_VAR 0 5
7758: PUSH
7759: LD_VAR 0 5
7763: PUSH
7764: LD_INT 35
7766: PLUS
7767: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
7768: LD_EXP 37
7772: PPUSH
7773: LD_INT 65
7775: PPUSH
7776: LD_INT 101
7778: PPUSH
7779: CALL_OW 307
7783: PUSH
7784: LD_VAR 0 5
7788: PUSH
7789: LD_INT 175
7791: GREATER
7792: OR
7793: IFFALSE 7747
// Say ( JMM , D2a-JMM-1 ) ;
7795: LD_EXP 37
7799: PPUSH
7800: LD_STRING D2a-JMM-1
7802: PPUSH
7803: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
7807: LD_EXP 48
7811: PPUSH
7812: LD_INT 66
7814: PPUSH
7815: LD_INT 103
7817: PPUSH
7818: CALL_OW 111
// tmp := 0 0$0 ;
7822: LD_ADDR_VAR 0 5
7826: PUSH
7827: LD_INT 0
7829: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7830: LD_INT 35
7832: PPUSH
7833: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
7837: LD_EXP 48
7841: PPUSH
7842: LD_INT 66
7844: PPUSH
7845: LD_INT 103
7847: PPUSH
7848: CALL_OW 307
7852: PUSH
7853: LD_VAR 0 5
7857: PUSH
7858: LD_INT 175
7860: GREATER
7861: OR
7862: IFFALSE 7830
// ComTurnUnit ( Walker , JMM ) ;
7864: LD_EXP 48
7868: PPUSH
7869: LD_EXP 37
7873: PPUSH
7874: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
7878: LD_EXP 48
7882: PPUSH
7883: LD_STRING D2a-Sci1-1
7885: PPUSH
7886: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
7890: LD_EXP 37
7894: PPUSH
7895: LD_EXP 48
7899: PPUSH
7900: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
7904: LD_EXP 37
7908: PPUSH
7909: LD_STRING D2a-JMM-2
7911: PPUSH
7912: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
7916: LD_EXP 48
7920: PPUSH
7921: LD_STRING D2a-Sci1-2
7923: PPUSH
7924: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
7928: LD_EXP 37
7932: PPUSH
7933: LD_STRING D2a-JMM-3
7935: PPUSH
7936: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
7940: LD_EXP 48
7944: PPUSH
7945: LD_STRING D2a-Sci1-3
7947: PPUSH
7948: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
7952: LD_ADDR_EXP 4
7956: PUSH
7957: LD_EXP 4
7961: PUSH
7962: LD_EXP 47
7966: PUSH
7967: LD_EXP 48
7971: PUSH
7972: LD_EXP 49
7976: PUSH
7977: LD_EXP 50
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: ADD
7988: ST_TO_ADDR
// for i in jmm_units do
7989: LD_ADDR_VAR 0 1
7993: PUSH
7994: LD_EXP 4
7998: PUSH
7999: FOR_IN
8000: IFFALSE 8025
// if not IsInUnit ( i ) then
8002: LD_VAR 0 1
8006: PPUSH
8007: CALL_OW 310
8011: NOT
8012: IFFALSE 8023
// ComFree ( i ) ;
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 139
8023: GO 7999
8025: POP
8026: POP
// Video ( false ) ;
8027: LD_INT 0
8029: PPUSH
8030: CALL 75980 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8034: LD_STRING MSolar1
8036: PPUSH
8037: CALL_OW 337
// jmm_on_west := true ;
8041: LD_ADDR_EXP 5
8045: PUSH
8046: LD_INT 1
8048: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8049: LD_INT 1050
8051: PPUSH
8052: CALL_OW 67
// frank_can_return := true ;
8056: LD_ADDR_EXP 12
8060: PUSH
8061: LD_INT 1
8063: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8064: LD_INT 6300
8066: PPUSH
8067: LD_INT 8400
8069: PPUSH
8070: CALL_OW 12
8074: PPUSH
8075: CALL_OW 67
// send_spec_patrol := true ;
8079: LD_ADDR_EXP 30
8083: PUSH
8084: LD_INT 1
8086: ST_TO_ADDR
// end ;
8087: PPOPN 5
8089: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8090: LD_INT 22
8092: PUSH
8093: LD_INT 1
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: LD_INT 34
8102: PUSH
8103: LD_INT 51
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PUSH
8110: LD_INT 92
8112: PUSH
8113: LD_INT 63
8115: PUSH
8116: LD_INT 100
8118: PUSH
8119: LD_INT 5
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: PPUSH
8136: CALL_OW 69
8140: PUSH
8141: LD_EXP 5
8145: NOT
8146: AND
8147: IFFALSE 8260
8149: GO 8151
8151: DISABLE
8152: LD_INT 0
8154: PPUSH
8155: PPUSH
// begin enable ;
8156: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8157: LD_ADDR_VAR 0 2
8161: PUSH
8162: LD_INT 22
8164: PUSH
8165: LD_INT 1
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: PUSH
8172: LD_INT 34
8174: PUSH
8175: LD_INT 51
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: LD_INT 92
8184: PUSH
8185: LD_INT 63
8187: PUSH
8188: LD_INT 100
8190: PUSH
8191: LD_INT 5
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: LIST
8204: PUSH
8205: EMPTY
8206: LIST
8207: PPUSH
8208: CALL_OW 69
8212: ST_TO_ADDR
// if not filter then
8213: LD_VAR 0 2
8217: NOT
8218: IFFALSE 8222
// exit ;
8220: GO 8260
// for i in filter do
8222: LD_ADDR_VAR 0 1
8226: PUSH
8227: LD_VAR 0 2
8231: PUSH
8232: FOR_IN
8233: IFFALSE 8258
// begin SetFuel ( i , 0 ) ;
8235: LD_VAR 0 1
8239: PPUSH
8240: LD_INT 0
8242: PPUSH
8243: CALL_OW 240
// ComStop ( i ) ;
8247: LD_VAR 0 1
8251: PPUSH
8252: CALL_OW 141
// end ;
8256: GO 8232
8258: POP
8259: POP
// end ;
8260: PPOPN 2
8262: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8263: LD_EXP 30
8267: IFFALSE 9393
8269: GO 8271
8271: DISABLE
8272: LD_INT 0
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
// begin if not ru_spec_patrol then
8281: LD_EXP 54
8285: NOT
8286: IFFALSE 8290
// exit ;
8288: GO 9393
// dead1 := false ;
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_INT 0
8297: ST_TO_ADDR
// dead2 := false ;
8298: LD_ADDR_VAR 0 2
8302: PUSH
8303: LD_INT 0
8305: ST_TO_ADDR
// inarea1 := false ;
8306: LD_ADDR_VAR 0 3
8310: PUSH
8311: LD_INT 0
8313: ST_TO_ADDR
// inarea2 := false ;
8314: LD_ADDR_VAR 0 4
8318: PUSH
8319: LD_INT 0
8321: ST_TO_ADDR
// tmp := [ ] ;
8322: LD_ADDR_VAR 0 6
8326: PUSH
8327: EMPTY
8328: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8329: LD_EXP 54
8333: PPUSH
8334: LD_INT 75
8336: PPUSH
8337: LD_INT 101
8339: PPUSH
8340: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8344: LD_INT 35
8346: PPUSH
8347: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8351: LD_INT 1
8353: PPUSH
8354: LD_EXP 54
8358: PUSH
8359: LD_INT 1
8361: ARRAY
8362: PPUSH
8363: CALL_OW 292
8367: PUSH
8368: LD_EXP 54
8372: PPUSH
8373: LD_INT 92
8375: PUSH
8376: LD_INT 75
8378: PUSH
8379: LD_INT 101
8381: PUSH
8382: LD_INT 4
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: PPUSH
8391: CALL_OW 72
8395: OR
8396: IFFALSE 8344
// ComStop ( ru_spec_patrol ) ;
8398: LD_EXP 54
8402: PPUSH
8403: CALL_OW 141
// Wait ( 0 0$02 ) ;
8407: LD_INT 70
8409: PPUSH
8410: CALL_OW 67
// DialogueOn ;
8414: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8418: LD_EXP 54
8422: PUSH
8423: LD_INT 1
8425: ARRAY
8426: PPUSH
8427: LD_STRING D8-Rus1-1
8429: PPUSH
8430: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8434: LD_EXP 37
8438: PPUSH
8439: LD_STRING D8-JMM-1
8441: PPUSH
8442: CALL_OW 88
// DialogueOff ;
8446: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8450: LD_EXP 54
8454: PPUSH
8455: LD_INT 13
8457: PPUSH
8458: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8462: LD_INT 35
8464: PPUSH
8465: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8469: LD_VAR 0 1
8473: NOT
8474: PUSH
8475: LD_EXP 54
8479: PUSH
8480: LD_INT 1
8482: ARRAY
8483: PPUSH
8484: CALL_OW 301
8488: AND
8489: IFFALSE 8499
// dead1 := true ;
8491: LD_ADDR_VAR 0 1
8495: PUSH
8496: LD_INT 1
8498: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8499: LD_VAR 0 2
8503: NOT
8504: PUSH
8505: LD_EXP 54
8509: PUSH
8510: LD_INT 2
8512: ARRAY
8513: PPUSH
8514: CALL_OW 301
8518: AND
8519: IFFALSE 8529
// dead2 := true ;
8521: LD_ADDR_VAR 0 2
8525: PUSH
8526: LD_INT 1
8528: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8529: LD_VAR 0 3
8533: NOT
8534: PUSH
8535: LD_EXP 54
8539: PUSH
8540: LD_INT 1
8542: ARRAY
8543: PPUSH
8544: LD_INT 14
8546: PPUSH
8547: CALL_OW 308
8551: AND
8552: IFFALSE 8562
// inarea1 := true ;
8554: LD_ADDR_VAR 0 3
8558: PUSH
8559: LD_INT 1
8561: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
8562: LD_VAR 0 4
8566: NOT
8567: PUSH
8568: LD_EXP 54
8572: PUSH
8573: LD_INT 2
8575: ARRAY
8576: PPUSH
8577: LD_INT 14
8579: PPUSH
8580: CALL_OW 308
8584: AND
8585: IFFALSE 8595
// inarea2 := true ;
8587: LD_ADDR_VAR 0 4
8591: PUSH
8592: LD_INT 1
8594: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
8595: LD_VAR 0 1
8599: PUSH
8600: LD_VAR 0 2
8604: AND
8605: PUSH
8606: LD_VAR 0 1
8610: PUSH
8611: LD_VAR 0 4
8615: AND
8616: OR
8617: PUSH
8618: LD_VAR 0 2
8622: PUSH
8623: LD_VAR 0 3
8627: AND
8628: OR
8629: PUSH
8630: LD_VAR 0 3
8634: PUSH
8635: LD_VAR 0 4
8639: AND
8640: OR
8641: IFFALSE 8462
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
8643: LD_VAR 0 3
8647: PUSH
8648: LD_VAR 0 4
8652: AND
8653: PUSH
8654: LD_VAR 0 1
8658: PUSH
8659: LD_VAR 0 4
8663: AND
8664: OR
8665: PUSH
8666: LD_VAR 0 2
8670: PUSH
8671: LD_VAR 0 3
8675: AND
8676: OR
8677: IFFALSE 9373
// begin prepare_siege := true ;
8679: LD_ADDR_EXP 31
8683: PUSH
8684: LD_INT 1
8686: ST_TO_ADDR
// DialogueOn ;
8687: CALL_OW 6
// if ( inarea1 and inarea2 ) then
8691: LD_VAR 0 3
8695: PUSH
8696: LD_VAR 0 4
8700: AND
8701: IFFALSE 8717
// Say ( JMM , D8b-JMM-1a ) else
8703: LD_EXP 37
8707: PPUSH
8708: LD_STRING D8b-JMM-1a
8710: PPUSH
8711: CALL_OW 88
8715: GO 8729
// Say ( JMM , D8b-JMM-1 ) ;
8717: LD_EXP 37
8721: PPUSH
8722: LD_STRING D8b-JMM-1
8724: PPUSH
8725: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
8729: LD_EXP 4
8733: PPUSH
8734: LD_INT 26
8736: PUSH
8737: LD_INT 1
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PPUSH
8744: CALL_OW 72
8748: PUSH
8749: LD_EXP 38
8753: PUSH
8754: LD_EXP 39
8758: PUSH
8759: LD_EXP 48
8763: PUSH
8764: LD_EXP 51
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: DIFF
8775: PPUSH
8776: LD_STRING D8b-Sol1-1
8778: PPUSH
8779: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
8783: LD_EXP 39
8787: PUSH
8788: LD_EXP 39
8792: PUSH
8793: LD_EXP 4
8797: IN
8798: AND
8799: IFFALSE 8815
// Say ( Cyrus , D8b-Cyrus-1 ) else
8801: LD_EXP 39
8805: PPUSH
8806: LD_STRING D8b-Cyrus-1
8808: PPUSH
8809: CALL_OW 88
8813: GO 8827
// Say ( JMM , D8b-JMM-1a ) ;
8815: LD_EXP 37
8819: PPUSH
8820: LD_STRING D8b-JMM-1a
8822: PPUSH
8823: CALL_OW 88
// if Lisa and Lisa in jmm_units then
8827: LD_EXP 40
8831: PUSH
8832: LD_EXP 40
8836: PUSH
8837: LD_EXP 4
8841: IN
8842: AND
8843: IFFALSE 8857
// Say ( Lisa , D8b-Lisa-2 ) ;
8845: LD_EXP 40
8849: PPUSH
8850: LD_STRING D8b-Lisa-2
8852: PPUSH
8853: CALL_OW 88
// if Bobby and Bobby in jmm_units then
8857: LD_EXP 38
8861: PUSH
8862: LD_EXP 38
8866: PUSH
8867: LD_EXP 4
8871: IN
8872: AND
8873: IFFALSE 8889
// Say ( Bobby , D8b-Bobby-1 ) else
8875: LD_EXP 38
8879: PPUSH
8880: LD_STRING D8b-Bobby-1
8882: PPUSH
8883: CALL_OW 88
8887: GO 8949
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
8889: LD_ADDR_VAR 0 5
8893: PUSH
8894: LD_EXP 4
8898: PPUSH
8899: LD_INT 26
8901: PUSH
8902: LD_INT 1
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PPUSH
8909: CALL_OW 72
8913: PUSH
8914: LD_EXP 38
8918: PUSH
8919: LD_EXP 39
8923: PUSH
8924: LD_EXP 48
8928: PUSH
8929: LD_EXP 51
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: DIFF
8940: PPUSH
8941: LD_STRING D8b-Sol2-1
8943: PPUSH
8944: CALL 585 0 2
8948: ST_TO_ADDR
// DialogueOff ;
8949: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
8953: LD_EXP 39
8957: PUSH
8958: LD_EXP 39
8962: PUSH
8963: LD_EXP 4
8967: IN
8968: AND
8969: IFFALSE 8994
// tmp := Insert ( tmp , 1 , Cyrus ) ;
8971: LD_ADDR_VAR 0 6
8975: PUSH
8976: LD_VAR 0 6
8980: PPUSH
8981: LD_INT 1
8983: PPUSH
8984: LD_EXP 39
8988: PPUSH
8989: CALL_OW 2
8993: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
8994: LD_EXP 38
8998: PUSH
8999: LD_EXP 38
9003: PUSH
9004: LD_EXP 4
9008: IN
9009: AND
9010: IFFALSE 9035
// tmp := Insert ( tmp , 1 , Bobby ) ;
9012: LD_ADDR_VAR 0 6
9016: PUSH
9017: LD_VAR 0 6
9021: PPUSH
9022: LD_INT 1
9024: PPUSH
9025: LD_EXP 38
9029: PPUSH
9030: CALL_OW 2
9034: ST_TO_ADDR
// if sol then
9035: LD_VAR 0 5
9039: IFFALSE 9064
// tmp := Insert ( tmp , 1 , sol ) ;
9041: LD_ADDR_VAR 0 6
9045: PUSH
9046: LD_VAR 0 6
9050: PPUSH
9051: LD_INT 1
9053: PPUSH
9054: LD_VAR 0 5
9058: PPUSH
9059: CALL_OW 2
9063: ST_TO_ADDR
// if tmp then
9064: LD_VAR 0 6
9068: IFFALSE 9332
// begin SetSide ( tmp , 8 ) ;
9070: LD_VAR 0 6
9074: PPUSH
9075: LD_INT 8
9077: PPUSH
9078: CALL_OW 235
// for i in tmp do
9082: LD_ADDR_VAR 0 7
9086: PUSH
9087: LD_VAR 0 6
9091: PUSH
9092: FOR_IN
9093: IFFALSE 9184
// begin if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_building then
9095: LD_VAR 0 7
9099: PPUSH
9100: CALL_OW 310
9104: PUSH
9105: LD_VAR 0 7
9109: PPUSH
9110: CALL_OW 310
9114: PPUSH
9115: CALL_OW 266
9119: PUSH
9120: LD_INT 3
9122: EQUAL
9123: AND
9124: IFFALSE 9135
// ComExitBuilding ( i ) ;
9126: LD_VAR 0 7
9130: PPUSH
9131: CALL_OW 122
// if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_vehicle then
9135: LD_VAR 0 7
9139: PPUSH
9140: CALL_OW 310
9144: PUSH
9145: LD_VAR 0 7
9149: PPUSH
9150: CALL_OW 310
9154: PPUSH
9155: CALL_OW 266
9159: PUSH
9160: LD_INT 2
9162: EQUAL
9163: AND
9164: IFFALSE 9175
// ComExitVehicle ( i ) ;
9166: LD_VAR 0 7
9170: PPUSH
9171: CALL_OW 121
// wait ( 0 0$1 ) ;
9175: LD_INT 35
9177: PPUSH
9178: CALL_OW 67
// end ;
9182: GO 9092
9184: POP
9185: POP
// ComFree ( tmp ) ;
9186: LD_VAR 0 6
9190: PPUSH
9191: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9195: LD_VAR 0 6
9199: PPUSH
9200: LD_INT 15
9202: PPUSH
9203: CALL_OW 173
// AddComHold ( tmp ) ;
9207: LD_VAR 0 6
9211: PPUSH
9212: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9216: LD_INT 35
9218: PPUSH
9219: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9223: LD_VAR 0 6
9227: PUSH
9228: LD_INT 1
9230: ARRAY
9231: PPUSH
9232: CALL_OW 314
9236: NOT
9237: IFFALSE 9251
// ComMoveToArea ( tmp , cyrusEscape ) ;
9239: LD_VAR 0 6
9243: PPUSH
9244: LD_INT 15
9246: PPUSH
9247: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9251: LD_VAR 0 6
9255: PUSH
9256: LD_INT 1
9258: ARRAY
9259: PPUSH
9260: LD_INT 15
9262: PPUSH
9263: CALL_OW 308
9267: IFFALSE 9322
// begin RemoveUnit ( tmp [ 1 ] ) ;
9269: LD_VAR 0 6
9273: PUSH
9274: LD_INT 1
9276: ARRAY
9277: PPUSH
9278: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9282: LD_ADDR_EXP 4
9286: PUSH
9287: LD_EXP 4
9291: PUSH
9292: LD_VAR 0 6
9296: PUSH
9297: LD_INT 1
9299: ARRAY
9300: DIFF
9301: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9302: LD_ADDR_VAR 0 6
9306: PUSH
9307: LD_VAR 0 6
9311: PUSH
9312: LD_VAR 0 6
9316: PUSH
9317: LD_INT 1
9319: ARRAY
9320: DIFF
9321: ST_TO_ADDR
// end ; until tmp = 0 ;
9322: LD_VAR 0 6
9326: PUSH
9327: LD_INT 0
9329: EQUAL
9330: IFFALSE 9216
// end ; wait ( 0 0$30 ) ;
9332: LD_INT 1050
9334: PPUSH
9335: CALL_OW 67
// if ru_spec_patrol then
9339: LD_EXP 54
9343: IFFALSE 9371
// for i in ru_spec_patrol do
9345: LD_ADDR_VAR 0 7
9349: PUSH
9350: LD_EXP 54
9354: PUSH
9355: FOR_IN
9356: IFFALSE 9369
// RemoveUnit ( i ) ;
9358: LD_VAR 0 7
9362: PPUSH
9363: CALL_OW 64
9367: GO 9355
9369: POP
9370: POP
// end else
9371: GO 9393
// begin prepare_siege := false ;
9373: LD_ADDR_EXP 31
9377: PUSH
9378: LD_INT 0
9380: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9381: LD_EXP 37
9385: PPUSH
9386: LD_STRING D8a-JMM-1
9388: PPUSH
9389: CALL_OW 88
// end ; end ;
9393: PPOPN 7
9395: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9396: LD_EXP 12
9400: IFFALSE 10668
9402: GO 9404
9404: DISABLE
9405: LD_INT 0
9407: PPUSH
9408: PPUSH
9409: PPUSH
// begin uc_side := 8 ;
9410: LD_ADDR_OWVAR 20
9414: PUSH
9415: LD_INT 8
9417: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9418: LD_ADDR_VAR 0 3
9422: PUSH
9423: LD_INT 59
9425: PUSH
9426: LD_INT 71
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 122
9435: PUSH
9436: LD_INT 117
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9447: LD_ADDR_EXP 51
9451: PUSH
9452: LD_STRING Frank
9454: PPUSH
9455: LD_INT 0
9457: PPUSH
9458: LD_STRING 
9460: PPUSH
9461: CALL 38632 0 3
9465: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9466: LD_ADDR_VAR 0 1
9470: PUSH
9471: LD_INT 1
9473: PPUSH
9474: LD_INT 2
9476: PPUSH
9477: CALL_OW 12
9481: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9482: LD_EXP 51
9486: PPUSH
9487: LD_VAR 0 3
9491: PUSH
9492: LD_VAR 0 1
9496: ARRAY
9497: PUSH
9498: LD_INT 1
9500: ARRAY
9501: PPUSH
9502: LD_VAR 0 3
9506: PUSH
9507: LD_VAR 0 1
9511: ARRAY
9512: PUSH
9513: LD_INT 2
9515: ARRAY
9516: PPUSH
9517: LD_INT 0
9519: PPUSH
9520: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9524: LD_EXP 51
9528: PPUSH
9529: LD_INT 1
9531: PPUSH
9532: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9536: LD_INT 35
9538: PPUSH
9539: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9543: LD_EXP 51
9547: PPUSH
9548: LD_EXP 37
9552: PPUSH
9553: CALL_OW 296
9557: PUSH
9558: LD_INT 8
9560: LESS
9561: PUSH
9562: LD_EXP 51
9566: PPUSH
9567: CALL_OW 256
9571: PUSH
9572: LD_INT 250
9574: GREATER
9575: AND
9576: IFFALSE 9536
// Video ( true ) ;
9578: LD_INT 1
9580: PPUSH
9581: CALL 75980 0 1
// CenterOnUnits ( JMM ) ;
9585: LD_EXP 37
9589: PPUSH
9590: CALL_OW 85
// if IsInUnit ( JMM ) then
9594: LD_EXP 37
9598: PPUSH
9599: CALL_OW 310
9603: IFFALSE 9614
// ComFree ( JMM ) ;
9605: LD_EXP 37
9609: PPUSH
9610: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
9614: LD_EXP 37
9618: PPUSH
9619: LD_EXP 51
9623: PPUSH
9624: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
9628: LD_EXP 51
9632: PPUSH
9633: LD_EXP 37
9637: PPUSH
9638: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
9642: LD_EXP 37
9646: PPUSH
9647: LD_STRING D6-JMM-1
9649: PPUSH
9650: CALL_OW 88
// p := 0 ;
9654: LD_ADDR_VAR 0 2
9658: PUSH
9659: LD_INT 0
9661: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9662: LD_INT 35
9664: PPUSH
9665: CALL_OW 67
// p := p + 1 ;
9669: LD_ADDR_VAR 0 2
9673: PUSH
9674: LD_VAR 0 2
9678: PUSH
9679: LD_INT 1
9681: PLUS
9682: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
9683: LD_EXP 37
9687: PPUSH
9688: LD_EXP 51
9692: PPUSH
9693: CALL_OW 296
9697: PUSH
9698: LD_INT 8
9700: LESS
9701: PUSH
9702: LD_VAR 0 2
9706: PUSH
9707: LD_INT 7
9709: GREATER
9710: OR
9711: IFFALSE 9662
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
9713: LD_EXP 40
9717: PUSH
9718: LD_EXP 40
9722: PPUSH
9723: LD_EXP 51
9727: PPUSH
9728: CALL_OW 296
9732: PUSH
9733: LD_INT 20
9735: LESS
9736: AND
9737: PUSH
9738: LD_EXP 40
9742: PUSH
9743: LD_EXP 4
9747: IN
9748: AND
9749: IFFALSE 9774
// begin ComFree ( Lisa ) ;
9751: LD_EXP 40
9755: PPUSH
9756: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
9760: LD_EXP 40
9764: PPUSH
9765: LD_EXP 51
9769: PPUSH
9770: CALL_OW 172
// end ; if Lynch then
9774: LD_EXP 47
9778: IFFALSE 9803
// begin ComFree ( Lynch ) ;
9780: LD_EXP 47
9784: PPUSH
9785: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
9789: LD_EXP 47
9793: PPUSH
9794: LD_EXP 51
9798: PPUSH
9799: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
9803: LD_EXP 37
9807: PPUSH
9808: LD_EXP 51
9812: PPUSH
9813: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
9817: LD_EXP 51
9821: PPUSH
9822: LD_EXP 37
9826: PPUSH
9827: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
9831: LD_EXP 51
9835: PPUSH
9836: LD_STRING D6-Frank-1
9838: PPUSH
9839: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
9843: LD_INT 69
9845: PPUSH
9846: LD_INT 20
9848: PPUSH
9849: LD_INT 1
9851: PPUSH
9852: LD_INT 20
9854: NEG
9855: PPUSH
9856: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
9860: LD_INT 69
9862: PPUSH
9863: LD_INT 20
9865: PPUSH
9866: LD_INT 1
9868: PPUSH
9869: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
9873: LD_INT 190
9875: PPUSH
9876: LD_INT 31
9878: PPUSH
9879: LD_INT 1
9881: PPUSH
9882: LD_INT 20
9884: NEG
9885: PPUSH
9886: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
9890: LD_INT 190
9892: PPUSH
9893: LD_INT 31
9895: PPUSH
9896: LD_INT 1
9898: PPUSH
9899: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
9903: LD_INT 69
9905: PPUSH
9906: LD_INT 20
9908: PPUSH
9909: CALL_OW 84
// Wait ( 0 0$02 ) ;
9913: LD_INT 70
9915: PPUSH
9916: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
9920: LD_EXP 37
9924: PPUSH
9925: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
9929: LD_EXP 40
9933: PUSH
9934: LD_EXP 40
9938: PPUSH
9939: LD_EXP 51
9943: PPUSH
9944: CALL_OW 296
9948: PUSH
9949: LD_INT 20
9951: LESS
9952: AND
9953: PUSH
9954: LD_EXP 40
9958: PPUSH
9959: CALL_OW 302
9963: AND
9964: PUSH
9965: LD_EXP 40
9969: PUSH
9970: LD_EXP 4
9974: IN
9975: AND
9976: IFFALSE 10098
// begin ComFree ( Lisa ) ;
9978: LD_EXP 40
9982: PPUSH
9983: CALL_OW 139
// p := 0 ;
9987: LD_ADDR_VAR 0 2
9991: PUSH
9992: LD_INT 0
9994: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9995: LD_INT 35
9997: PPUSH
9998: CALL_OW 67
// p := p + 1 ;
10002: LD_ADDR_VAR 0 2
10006: PUSH
10007: LD_VAR 0 2
10011: PUSH
10012: LD_INT 1
10014: PLUS
10015: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10016: LD_EXP 40
10020: PPUSH
10021: LD_EXP 51
10025: PPUSH
10026: CALL_OW 296
10030: PUSH
10031: LD_INT 7
10033: LESS
10034: PUSH
10035: LD_VAR 0 2
10039: PUSH
10040: LD_INT 7
10042: GREATER
10043: OR
10044: IFFALSE 9995
// Say ( Lisa , D6-Lisa-1 ) ;
10046: LD_EXP 40
10050: PPUSH
10051: LD_STRING D6-Lisa-1
10053: PPUSH
10054: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10058: LD_EXP 40
10062: PPUSH
10063: LD_EXP 51
10067: PPUSH
10068: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10072: LD_EXP 51
10076: PPUSH
10077: LD_EXP 40
10081: PPUSH
10082: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10086: LD_EXP 51
10090: PPUSH
10091: LD_STRING D6-Frank-2
10093: PPUSH
10094: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10098: LD_EXP 47
10102: PUSH
10103: LD_EXP 47
10107: PPUSH
10108: LD_EXP 51
10112: PPUSH
10113: CALL_OW 296
10117: PUSH
10118: LD_INT 20
10120: LESS
10121: AND
10122: PUSH
10123: LD_EXP 47
10127: PPUSH
10128: CALL_OW 302
10132: AND
10133: IFFALSE 10326
// begin ComTurnUnit ( Lynch , JMM ) ;
10135: LD_EXP 47
10139: PPUSH
10140: LD_EXP 37
10144: PPUSH
10145: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10149: LD_EXP 51
10153: PPUSH
10154: LD_EXP 37
10158: PPUSH
10159: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10163: LD_EXP 47
10167: PPUSH
10168: LD_STRING D6-Sol1-2
10170: PPUSH
10171: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10175: LD_EXP 37
10179: PPUSH
10180: LD_STRING D6-JMM-2
10182: PPUSH
10183: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10187: LD_EXP 51
10191: PPUSH
10192: LD_STRING D6-Frank-3
10194: PPUSH
10195: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10199: LD_EXP 37
10203: PPUSH
10204: LD_STRING D6-JMM-3
10206: PPUSH
10207: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10211: LD_EXP 51
10215: PPUSH
10216: LD_STRING D6-Frank-4
10218: PPUSH
10219: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10223: LD_EXP 51
10227: PPUSH
10228: LD_STRING D6-Frank-4a
10230: PPUSH
10231: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10235: LD_EXP 37
10239: PPUSH
10240: LD_STRING D6-JMM-4
10242: PPUSH
10243: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10247: LD_EXP 51
10251: PPUSH
10252: LD_STRING D6-Frank-5
10254: PPUSH
10255: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10259: LD_EXP 40
10263: PUSH
10264: LD_EXP 40
10268: PPUSH
10269: CALL_OW 302
10273: AND
10274: PUSH
10275: LD_EXP 40
10279: PUSH
10280: LD_EXP 4
10284: IN
10285: AND
10286: IFFALSE 10300
// Say ( Lisa , D6-Lisa-5 ) ;
10288: LD_EXP 40
10292: PPUSH
10293: LD_STRING D6-Lisa-5
10295: PPUSH
10296: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10300: LD_EXP 51
10304: PPUSH
10305: LD_STRING D6-Frank-6
10307: PPUSH
10308: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10312: LD_EXP 37
10316: PPUSH
10317: LD_STRING D6-JMM-6
10319: PPUSH
10320: CALL_OW 88
// end else
10324: GO 10453
// begin ComTurnUnit ( Frank , JMM ) ;
10326: LD_EXP 51
10330: PPUSH
10331: LD_EXP 37
10335: PPUSH
10336: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10340: LD_EXP 51
10344: PPUSH
10345: LD_STRING D6-Frank-4
10347: PPUSH
10348: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10352: LD_EXP 51
10356: PPUSH
10357: LD_STRING D6-Frank-4a
10359: PPUSH
10360: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10364: LD_EXP 37
10368: PPUSH
10369: LD_STRING D6-JMM-4
10371: PPUSH
10372: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10376: LD_EXP 51
10380: PPUSH
10381: LD_STRING D6-Frank-5
10383: PPUSH
10384: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10388: LD_EXP 40
10392: PUSH
10393: LD_EXP 40
10397: PPUSH
10398: CALL_OW 302
10402: AND
10403: PUSH
10404: LD_EXP 40
10408: PUSH
10409: LD_EXP 4
10413: IN
10414: AND
10415: IFFALSE 10429
// Say ( Lisa , D6-Lisa-5 ) ;
10417: LD_EXP 40
10421: PPUSH
10422: LD_STRING D6-Lisa-5
10424: PPUSH
10425: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10429: LD_EXP 51
10433: PPUSH
10434: LD_STRING D6-Frank-6
10436: PPUSH
10437: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10441: LD_EXP 37
10445: PPUSH
10446: LD_STRING D6-JMM-6
10448: PPUSH
10449: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10453: LD_STRING Q1
10455: PPUSH
10456: CALL_OW 97
10460: PUSH
10461: LD_INT 1
10463: DOUBLE
10464: EQUAL
10465: IFTRUE 10469
10467: GO 10480
10469: POP
// frank_send_to_scout := true ; 2 :
10470: LD_ADDR_EXP 15
10474: PUSH
10475: LD_INT 1
10477: ST_TO_ADDR
10478: GO 10500
10480: LD_INT 2
10482: DOUBLE
10483: EQUAL
10484: IFTRUE 10488
10486: GO 10499
10488: POP
// frank_send_to_scout := false ; end ;
10489: LD_ADDR_EXP 15
10493: PUSH
10494: LD_INT 0
10496: ST_TO_ADDR
10497: GO 10500
10499: POP
// Video ( false ) ;
10500: LD_INT 0
10502: PPUSH
10503: CALL 75980 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10507: LD_EXP 37
10511: PUSH
10512: LD_EXP 40
10516: PUSH
10517: LD_EXP 47
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: LIST
10526: PPUSH
10527: CALL_OW 139
// if frank_send_to_scout then
10531: LD_EXP 15
10535: IFFALSE 10589
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10537: LD_EXP 51
10541: PPUSH
10542: LD_INT 15
10544: PPUSH
10545: CALL_OW 113
// wait ( 0 0$01 ) ;
10549: LD_INT 35
10551: PPUSH
10552: CALL_OW 67
// until not See ( 1 , Frank ) ;
10556: LD_INT 1
10558: PPUSH
10559: LD_EXP 51
10563: PPUSH
10564: CALL_OW 292
10568: NOT
10569: IFFALSE 10537
// wait ( 0 0$02 ) ;
10571: LD_INT 70
10573: PPUSH
10574: CALL_OW 67
// RemoveUnit ( Frank ) ;
10578: LD_EXP 51
10582: PPUSH
10583: CALL_OW 64
// end else
10587: GO 10601
// SetSide ( Frank , 1 ) ;
10589: LD_EXP 51
10593: PPUSH
10594: LD_INT 1
10596: PPUSH
10597: CALL_OW 235
// send_attack_on_cornel_base := true ;
10601: LD_ADDR_EXP 26
10605: PUSH
10606: LD_INT 1
10608: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10609: LD_INT 35
10611: PPUSH
10612: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
10616: LD_ADDR_EXP 29
10620: PUSH
10621: LD_EXP 29
10625: PPUSH
10626: LD_STRING -
10628: PPUSH
10629: CALL 1077 0 2
10633: ST_TO_ADDR
// if debug then
10634: LD_EXP 1
10638: IFFALSE 10650
// debug_strings := time_to_prepare ;
10640: LD_ADDR_OWVAR 48
10644: PUSH
10645: LD_EXP 29
10649: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
10650: LD_EXP 29
10654: PUSH
10655: LD_INT 0
10657: EQUAL
10658: IFFALSE 10609
// cornel_prepared := true ;
10660: LD_ADDR_EXP 11
10664: PUSH
10665: LD_INT 1
10667: ST_TO_ADDR
// end ;
10668: PPOPN 3
10670: END
// every 0 0$01 trigger cornel_prepared do
10671: LD_EXP 11
10675: IFFALSE 10983
10677: GO 10679
10679: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
10680: LD_EXP 44
10684: PPUSH
10685: LD_STRING D3-Corn-1
10687: PPUSH
10688: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
10692: LD_STRING MOutWait
10694: PPUSH
10695: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
10699: LD_INT 35
10701: PPUSH
10702: CALL_OW 67
// until cornel_counter = 0 ;
10706: LD_EXP 10
10710: PUSH
10711: LD_INT 0
10713: EQUAL
10714: IFFALSE 10699
// SayRadio ( Cornel , D3a-Corn-1 ) ;
10716: LD_EXP 44
10720: PPUSH
10721: LD_STRING D3a-Corn-1
10723: PPUSH
10724: CALL_OW 94
// if IsOk ( Cornel ) then
10728: LD_EXP 44
10732: PPUSH
10733: CALL_OW 302
10737: IFFALSE 10751
// Say ( JMM , D3a-JMM-1 ) ;
10739: LD_EXP 37
10743: PPUSH
10744: LD_STRING D3a-JMM-1
10746: PPUSH
10747: CALL_OW 88
// end_mission_allowed := true ;
10751: LD_ADDR_EXP 21
10755: PUSH
10756: LD_INT 1
10758: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
10759: LD_STRING M2
10761: PPUSH
10762: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
10766: LD_INT 9
10768: PPUSH
10769: LD_INT 1
10771: PPUSH
10772: CALL_OW 424
// Wait ( 0 0$05 ) ;
10776: LD_INT 175
10778: PPUSH
10779: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
10783: LD_EXP 44
10787: PPUSH
10788: LD_STRING D3a-Corn-2
10790: PPUSH
10791: CALL_OW 94
// cornel_attack := true ;
10795: LD_ADDR_EXP 9
10799: PUSH
10800: LD_INT 1
10802: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
10803: LD_INT 105
10805: PPUSH
10806: CALL_OW 67
// AddMoreTanks ( ) ;
10810: CALL 4940 0 0
// if frank_send_to_scout then
10814: LD_EXP 15
10818: IFFALSE 10983
// begin InitHc ;
10820: CALL_OW 19
// InitUc ;
10824: CALL_OW 18
// uc_side := 8 ;
10828: LD_ADDR_OWVAR 20
10832: PUSH
10833: LD_INT 8
10835: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
10836: LD_ADDR_EXP 51
10840: PUSH
10841: LD_STRING Frank
10843: PPUSH
10844: LD_INT 0
10846: PPUSH
10847: LD_STRING 
10849: PPUSH
10850: CALL 38632 0 3
10854: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
10855: LD_EXP 51
10859: PPUSH
10860: LD_INT 6
10862: PPUSH
10863: LD_INT 9
10865: PPUSH
10866: LD_INT 0
10868: PPUSH
10869: CALL_OW 48
// ComCrawl ( Frank ) ;
10873: LD_EXP 51
10877: PPUSH
10878: CALL_OW 137
// repeat wait ( 10 ) ;
10882: LD_INT 10
10884: PPUSH
10885: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
10889: LD_EXP 37
10893: PPUSH
10894: LD_EXP 51
10898: PPUSH
10899: CALL_OW 296
10903: PUSH
10904: LD_INT 9
10906: LESS
10907: PUSH
10908: LD_INT 9
10910: PPUSH
10911: LD_INT 22
10913: PUSH
10914: LD_INT 1
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PPUSH
10921: CALL_OW 70
10925: OR
10926: IFFALSE 10882
// if IsDead ( Frank ) then
10928: LD_EXP 51
10932: PPUSH
10933: CALL_OW 301
10937: IFFALSE 10941
// exit ;
10939: GO 10983
// CenterOnUnits ( Frank ) ;
10941: LD_EXP 51
10945: PPUSH
10946: CALL_OW 85
// SetSide ( Frank , 1 ) ;
10950: LD_EXP 51
10954: PPUSH
10955: LD_INT 1
10957: PPUSH
10958: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
10962: LD_EXP 51
10966: PPUSH
10967: LD_STRING D6a-Frank-1
10969: PPUSH
10970: CALL_OW 88
// ComWalk ( Frank ) ;
10974: LD_EXP 51
10978: PPUSH
10979: CALL_OW 138
// end ; end ;
10983: END
// every 0 0$01 trigger solar_builded do
10984: LD_EXP 14
10988: IFFALSE 11092
10990: GO 10992
10992: DISABLE
// begin Wait ( 0 0$02 ) ;
10993: LD_INT 70
10995: PPUSH
10996: CALL_OW 67
// DialogueOn ;
11000: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11004: LD_EXP 37
11008: PPUSH
11009: LD_STRING D2b-JMM-1
11011: PPUSH
11012: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11016: LD_EXP 48
11020: PUSH
11021: LD_EXP 48
11025: PPUSH
11026: CALL_OW 302
11030: AND
11031: IFFALSE 11081
// begin Say ( Walker , D2b-Sci1-1 ) ;
11033: LD_EXP 48
11037: PPUSH
11038: LD_STRING D2b-Sci1-1
11040: PPUSH
11041: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11045: LD_EXP 37
11049: PPUSH
11050: LD_STRING D2b-JMM-2
11052: PPUSH
11053: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11057: LD_EXP 48
11061: PPUSH
11062: LD_STRING D2b-Sci1-2
11064: PPUSH
11065: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11069: LD_EXP 37
11073: PPUSH
11074: LD_STRING D2b-JMM-3
11076: PPUSH
11077: CALL_OW 88
// end ; DialogueOff ;
11081: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11085: LD_STRING MOutSol
11087: PPUSH
11088: CALL_OW 337
// end ;
11092: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11093: LD_EXP 14
11097: PUSH
11098: LD_EXP 37
11102: PPUSH
11103: CALL_OW 302
11107: AND
11108: PUSH
11109: LD_EXP 37
11113: PPUSH
11114: CALL 911 0 1
11118: AND
11119: PUSH
11120: LD_EXP 16
11124: NOT
11125: AND
11126: IFFALSE 11197
11128: GO 11130
11130: DISABLE
11131: LD_INT 0
11133: PPUSH
// begin jmm_in_veh := true ;
11134: LD_ADDR_EXP 16
11138: PUSH
11139: LD_INT 1
11141: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11142: LD_ADDR_VAR 0 1
11146: PUSH
11147: LD_INT 0
11149: PPUSH
11150: LD_INT 1
11152: PPUSH
11153: CALL_OW 12
11157: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11158: LD_INT 70
11160: PPUSH
11161: CALL_OW 67
// if i then
11165: LD_VAR 0 1
11169: IFFALSE 11185
// Say ( JMM , D2c-JMM-1 ) else
11171: LD_EXP 37
11175: PPUSH
11176: LD_STRING D2c-JMM-1
11178: PPUSH
11179: CALL_OW 88
11183: GO 11197
// Say ( JMM , D2c-JMM-1a ) ;
11185: LD_EXP 37
11189: PPUSH
11190: LD_STRING D2c-JMM-1a
11192: PPUSH
11193: CALL_OW 88
// end ;
11197: PPOPN 1
11199: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11200: LD_EXP 14
11204: PUSH
11205: LD_EXP 38
11209: PPUSH
11210: CALL_OW 302
11214: AND
11215: PUSH
11216: LD_EXP 38
11220: PPUSH
11221: CALL 911 0 1
11225: AND
11226: PUSH
11227: LD_EXP 17
11231: NOT
11232: AND
11233: IFFALSE 11265
11235: GO 11237
11237: DISABLE
// begin bobby_in_veh := true ;
11238: LD_ADDR_EXP 17
11242: PUSH
11243: LD_INT 1
11245: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11246: LD_INT 70
11248: PPUSH
11249: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11253: LD_EXP 38
11257: PPUSH
11258: LD_STRING D2c-Bobby-1
11260: PPUSH
11261: CALL_OW 88
11265: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11266: LD_EXP 14
11270: PUSH
11271: LD_EXP 40
11275: PPUSH
11276: CALL_OW 302
11280: AND
11281: PUSH
11282: LD_EXP 40
11286: PPUSH
11287: CALL 911 0 1
11291: AND
11292: PUSH
11293: LD_EXP 19
11297: NOT
11298: AND
11299: IFFALSE 11331
11301: GO 11303
11303: DISABLE
// begin lisa_in_veh := true ;
11304: LD_ADDR_EXP 19
11308: PUSH
11309: LD_INT 1
11311: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11312: LD_INT 70
11314: PPUSH
11315: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11319: LD_EXP 40
11323: PPUSH
11324: LD_STRING D2c-Lisa-1
11326: PPUSH
11327: CALL_OW 88
11331: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11332: LD_EXP 14
11336: PUSH
11337: LD_EXP 39
11341: PPUSH
11342: CALL_OW 302
11346: AND
11347: PUSH
11348: LD_EXP 39
11352: PPUSH
11353: CALL 911 0 1
11357: AND
11358: PUSH
11359: LD_EXP 18
11363: NOT
11364: AND
11365: IFFALSE 11436
11367: GO 11369
11369: DISABLE
11370: LD_INT 0
11372: PPUSH
// begin cyrus_in_veh := true ;
11373: LD_ADDR_EXP 18
11377: PUSH
11378: LD_INT 1
11380: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11381: LD_ADDR_VAR 0 1
11385: PUSH
11386: LD_INT 0
11388: PPUSH
11389: LD_INT 1
11391: PPUSH
11392: CALL_OW 12
11396: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11397: LD_INT 70
11399: PPUSH
11400: CALL_OW 67
// if i then
11404: LD_VAR 0 1
11408: IFFALSE 11424
// Say ( Cyrus , D2c-Cyrus-1 ) else
11410: LD_EXP 39
11414: PPUSH
11415: LD_STRING D2c-Cyrus-1
11417: PPUSH
11418: CALL_OW 88
11422: GO 11436
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11424: LD_EXP 39
11428: PPUSH
11429: LD_STRING D2c-Cyrus-1a
11431: PPUSH
11432: CALL_OW 88
// end ;
11436: PPOPN 1
11438: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11439: LD_EXP 44
11443: PPUSH
11444: LD_INT 16
11446: PPUSH
11447: CALL_OW 308
11451: IFFALSE 11732
11453: GO 11455
11455: DISABLE
11456: LD_INT 0
11458: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11459: LD_INT 3
11461: PPUSH
11462: LD_EXP 44
11466: PPUSH
11467: CALL_OW 471
// send_attack_on_cornel := true ;
11471: LD_ADDR_EXP 32
11475: PUSH
11476: LD_INT 1
11478: ST_TO_ADDR
// if ru_vehicles then
11479: LD_EXP 56
11483: IFFALSE 11517
// for i in ru_vehicles do
11485: LD_ADDR_VAR 0 1
11489: PUSH
11490: LD_EXP 56
11494: PUSH
11495: FOR_IN
11496: IFFALSE 11515
// ComAgressiveMove ( i , 215 , 69 ) ;
11498: LD_VAR 0 1
11502: PPUSH
11503: LD_INT 215
11505: PPUSH
11506: LD_INT 69
11508: PPUSH
11509: CALL_OW 114
11513: GO 11495
11515: POP
11516: POP
// if ru_patrol then
11517: LD_EXP 53
11521: IFFALSE 11555
// for i in ru_patrol do
11523: LD_ADDR_VAR 0 1
11527: PUSH
11528: LD_EXP 53
11532: PUSH
11533: FOR_IN
11534: IFFALSE 11553
// ComAgressiveMove ( i , 215 , 69 ) ;
11536: LD_VAR 0 1
11540: PPUSH
11541: LD_INT 215
11543: PPUSH
11544: LD_INT 69
11546: PPUSH
11547: CALL_OW 114
11551: GO 11533
11553: POP
11554: POP
// if frank_send_to_scout then
11555: LD_EXP 15
11559: IFFALSE 11573
// SayRadio ( Frank , D3b-Frank-1 ) ;
11561: LD_EXP 51
11565: PPUSH
11566: LD_STRING D3b-Frank-1
11568: PPUSH
11569: CALL_OW 94
// wait ( 0 0$03 ) ;
11573: LD_INT 105
11575: PPUSH
11576: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11580: LD_EXP 44
11584: PPUSH
11585: LD_STRING D4-Corn-1
11587: PPUSH
11588: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11592: LD_INT 35
11594: PPUSH
11595: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11599: LD_INT 22
11601: PUSH
11602: LD_INT 4
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: LD_INT 21
11611: PUSH
11612: LD_INT 1
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 3
11621: PUSH
11622: LD_INT 24
11624: PUSH
11625: LD_INT 1000
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: PPUSH
11641: CALL_OW 69
11645: PUSH
11646: LD_INT 6
11648: LESS
11649: IFFALSE 11592
// if Cornel then
11651: LD_EXP 44
11655: IFFALSE 11695
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
11657: LD_EXP 44
11661: PPUSH
11662: LD_STRING D5-Corn-1
11664: PPUSH
11665: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
11669: LD_EXP 44
11673: PPUSH
11674: LD_EXP 2
11678: PUSH
11679: LD_STRING Cornel
11681: STR
11682: PPUSH
11683: CALL_OW 38
// cornel_saved := true ;
11687: LD_ADDR_EXP 27
11691: PUSH
11692: LD_INT 1
11694: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
11695: LD_INT 4
11697: PPUSH
11698: LD_INT 8
11700: PPUSH
11701: CALL_OW 343
// wait ( 0 0$01 ) ;
11705: LD_INT 35
11707: PPUSH
11708: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
11712: LD_INT 3
11714: PPUSH
11715: LD_EXP 44
11719: PPUSH
11720: CALL_OW 472
// send_attack_on_cornel := false ;
11724: LD_ADDR_EXP 32
11728: PUSH
11729: LD_INT 0
11731: ST_TO_ADDR
// end ;
11732: PPOPN 1
11734: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
11735: LD_INT 9
11737: PPUSH
11738: LD_INT 22
11740: PUSH
11741: LD_INT 1
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: PPUSH
11748: CALL_OW 70
11752: PUSH
11753: LD_EXP 33
11757: OR
11758: IFFALSE 11979
11760: GO 11762
11762: DISABLE
11763: LD_INT 0
11765: PPUSH
11766: PPUSH
// begin enable ;
11767: ENABLE
// if not jmm_on_west then
11768: LD_EXP 5
11772: NOT
11773: IFFALSE 11784
// begin YouLost ( 4 ) ;
11775: LD_STRING 4
11777: PPUSH
11778: CALL_OW 104
// exit ;
11782: GO 11979
// end ; if not game_end then
11784: LD_EXP 33
11788: NOT
11789: IFFALSE 11799
// game_end := true ;
11791: LD_ADDR_EXP 33
11795: PUSH
11796: LD_INT 1
11798: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11799: LD_ADDR_VAR 0 2
11803: PUSH
11804: LD_INT 9
11806: PPUSH
11807: LD_INT 22
11809: PUSH
11810: LD_INT 1
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PPUSH
11817: CALL_OW 70
11821: ST_TO_ADDR
// if not filter then
11822: LD_VAR 0 2
11826: NOT
11827: IFFALSE 11831
// exit ;
11829: GO 11979
// for i in filter do
11831: LD_ADDR_VAR 0 1
11835: PUSH
11836: LD_VAR 0 2
11840: PUSH
11841: FOR_IN
11842: IFFALSE 11977
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
11844: LD_VAR 0 1
11848: PPUSH
11849: CALL_OW 302
11853: PUSH
11854: LD_VAR 0 1
11858: PPUSH
11859: CALL_OW 247
11863: PUSH
11864: LD_INT 2
11866: EQUAL
11867: AND
11868: IFFALSE 11940
// begin if i = JMM and save_group < 4 then
11870: LD_VAR 0 1
11874: PUSH
11875: LD_EXP 37
11879: EQUAL
11880: PUSH
11881: LD_EXP 23
11885: PUSH
11886: LD_INT 4
11888: LESS
11889: AND
11890: IFFALSE 11894
// continue ;
11892: GO 11841
// if GetNation ( i ) = nation_american then
11894: LD_VAR 0 1
11898: PPUSH
11899: CALL_OW 248
11903: PUSH
11904: LD_INT 1
11906: EQUAL
11907: IFFALSE 11917
// veh_on_meta := true ;
11909: LD_ADDR_EXP 28
11913: PUSH
11914: LD_INT 1
11916: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
11917: LD_VAR 0 1
11921: PPUSH
11922: CALL_OW 311
11926: PPUSH
11927: CALL 11982 0 1
// RemoveUnit ( i ) ;
11931: LD_VAR 0 1
11935: PPUSH
11936: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
11940: LD_VAR 0 1
11944: PPUSH
11945: CALL_OW 302
11949: PUSH
11950: LD_VAR 0 1
11954: PPUSH
11955: CALL_OW 247
11959: PUSH
11960: LD_INT 1
11962: EQUAL
11963: AND
11964: IFFALSE 11975
// Save ( i ) ;
11966: LD_VAR 0 1
11970: PPUSH
11971: CALL 11982 0 1
// end ;
11975: GO 11841
11977: POP
11978: POP
// end ;
11979: PPOPN 2
11981: END
// export function Save ( i ) ; begin
11982: LD_INT 0
11984: PPUSH
// if i = JMM and save_group >= 4 then
11985: LD_VAR 0 1
11989: PUSH
11990: LD_EXP 37
11994: EQUAL
11995: PUSH
11996: LD_EXP 23
12000: PUSH
12001: LD_INT 4
12003: GREATEREQUAL
12004: AND
12005: IFFALSE 12141
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12007: LD_EXP 24
12011: PUSH
12012: LD_INT 22
12014: PUSH
12015: LD_INT 1
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: PUSH
12022: LD_INT 21
12024: PUSH
12025: LD_INT 1
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PPUSH
12036: CALL_OW 69
12040: PUSH
12041: LD_INT 1
12043: GREATER
12044: AND
12045: IFFALSE 12102
// begin show_query := false ;
12047: LD_ADDR_EXP 24
12051: PUSH
12052: LD_INT 0
12054: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12055: LD_STRING Q2
12057: PPUSH
12058: CALL_OW 97
12062: PUSH
12063: LD_INT 1
12065: DOUBLE
12066: EQUAL
12067: IFTRUE 12071
12069: GO 12082
12071: POP
// wait_for_them := true ; 2 :
12072: LD_ADDR_EXP 25
12076: PUSH
12077: LD_INT 1
12079: ST_TO_ADDR
12080: GO 12102
12082: LD_INT 2
12084: DOUBLE
12085: EQUAL
12086: IFTRUE 12090
12088: GO 12101
12090: POP
// wait_for_them := false ; end ;
12091: LD_ADDR_EXP 25
12095: PUSH
12096: LD_INT 0
12098: ST_TO_ADDR
12099: GO 12102
12101: POP
// end ; save_counter := save_counter + 1 ;
12102: LD_ADDR_EXP 36
12106: PUSH
12107: LD_EXP 36
12111: PUSH
12112: LD_INT 1
12114: PLUS
12115: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12116: LD_ADDR_EXP 23
12120: PUSH
12121: LD_EXP 23
12125: PUSH
12126: LD_EXP 37
12130: ADD
12131: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12132: LD_EXP 37
12136: PPUSH
12137: CALL_OW 64
// end ; if i = Lisa then
12141: LD_VAR 0 1
12145: PUSH
12146: LD_EXP 40
12150: EQUAL
12151: IFFALSE 12192
// begin save_counter := save_counter + 1 ;
12153: LD_ADDR_EXP 36
12157: PUSH
12158: LD_EXP 36
12162: PUSH
12163: LD_INT 1
12165: PLUS
12166: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12167: LD_ADDR_EXP 23
12171: PUSH
12172: LD_EXP 23
12176: PUSH
12177: LD_EXP 40
12181: ADD
12182: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12183: LD_EXP 40
12187: PPUSH
12188: CALL_OW 64
// end ; if i = Bobby then
12192: LD_VAR 0 1
12196: PUSH
12197: LD_EXP 38
12201: EQUAL
12202: IFFALSE 12243
// begin save_counter := save_counter + 1 ;
12204: LD_ADDR_EXP 36
12208: PUSH
12209: LD_EXP 36
12213: PUSH
12214: LD_INT 1
12216: PLUS
12217: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12218: LD_ADDR_EXP 23
12222: PUSH
12223: LD_EXP 23
12227: PUSH
12228: LD_EXP 38
12232: ADD
12233: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12234: LD_EXP 38
12238: PPUSH
12239: CALL_OW 64
// end ; if i = Cyrus then
12243: LD_VAR 0 1
12247: PUSH
12248: LD_EXP 39
12252: EQUAL
12253: IFFALSE 12294
// begin save_counter := save_counter + 1 ;
12255: LD_ADDR_EXP 36
12259: PUSH
12260: LD_EXP 36
12264: PUSH
12265: LD_INT 1
12267: PLUS
12268: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12269: LD_ADDR_EXP 23
12273: PUSH
12274: LD_EXP 23
12278: PUSH
12279: LD_EXP 39
12283: ADD
12284: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12285: LD_EXP 39
12289: PPUSH
12290: CALL_OW 64
// end ; if i = Khatam then
12294: LD_VAR 0 1
12298: PUSH
12299: LD_EXP 41
12303: EQUAL
12304: IFFALSE 12345
// begin save_counter := save_counter + 1 ;
12306: LD_ADDR_EXP 36
12310: PUSH
12311: LD_EXP 36
12315: PUSH
12316: LD_INT 1
12318: PLUS
12319: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12320: LD_ADDR_EXP 23
12324: PUSH
12325: LD_EXP 23
12329: PUSH
12330: LD_EXP 41
12334: ADD
12335: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12336: LD_EXP 41
12340: PPUSH
12341: CALL_OW 64
// end ; if i = Frank then
12345: LD_VAR 0 1
12349: PUSH
12350: LD_EXP 51
12354: EQUAL
12355: IFFALSE 12396
// begin save_counter := save_counter + 1 ;
12357: LD_ADDR_EXP 36
12361: PUSH
12362: LD_EXP 36
12366: PUSH
12367: LD_INT 1
12369: PLUS
12370: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12371: LD_ADDR_EXP 23
12375: PUSH
12376: LD_EXP 23
12380: PUSH
12381: LD_EXP 51
12385: ADD
12386: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12387: LD_EXP 51
12391: PPUSH
12392: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12396: LD_VAR 0 1
12400: PUSH
12401: LD_EXP 37
12405: NONEQUAL
12406: PUSH
12407: LD_VAR 0 1
12411: PPUSH
12412: CALL_OW 302
12416: AND
12417: PUSH
12418: LD_VAR 0 1
12422: PPUSH
12423: CALL_OW 247
12427: PUSH
12428: LD_INT 1
12430: EQUAL
12431: AND
12432: PUSH
12433: LD_VAR 0 1
12437: PUSH
12438: LD_EXP 23
12442: IN
12443: NOT
12444: AND
12445: IFFALSE 12486
// begin save_counter := save_counter + 1 ;
12447: LD_ADDR_EXP 36
12451: PUSH
12452: LD_EXP 36
12456: PUSH
12457: LD_INT 1
12459: PLUS
12460: ST_TO_ADDR
// save_others := save_others ^ i ;
12461: LD_ADDR_EXP 22
12465: PUSH
12466: LD_EXP 22
12470: PUSH
12471: LD_VAR 0 1
12475: ADD
12476: ST_TO_ADDR
// RemoveUnit ( i ) ;
12477: LD_VAR 0 1
12481: PPUSH
12482: CALL_OW 64
// end ; end ;
12486: LD_VAR 0 2
12490: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12491: LD_EXP 24
12495: NOT
12496: PUSH
12497: LD_EXP 25
12501: NOT
12502: AND
12503: PUSH
12504: LD_INT 22
12506: PUSH
12507: LD_INT 1
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 21
12516: PUSH
12517: LD_INT 1
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PPUSH
12528: CALL_OW 69
12532: PUSH
12533: LD_INT 0
12535: EQUAL
12536: OR
12537: IFFALSE 12546
12539: GO 12541
12541: DISABLE
// EndMission ;
12542: CALL 12547 0 0
12546: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12547: LD_INT 0
12549: PPUSH
12550: PPUSH
12551: PPUSH
12552: PPUSH
12553: PPUSH
// wait ( 0 0$01 ) ;
12554: LD_INT 35
12556: PPUSH
12557: CALL_OW 67
// if tick <= 12 12$00 then
12561: LD_OWVAR 1
12565: PUSH
12566: LD_INT 25200
12568: LESSEQUAL
12569: IFFALSE 12578
// SetAchievement ( ACH_ASPEED_3 ) ;
12571: LD_STRING ACH_ASPEED_3
12573: PPUSH
12574: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12578: LD_EXP 23
12582: PUSH
12583: LD_EXP 22
12587: ADD
12588: PPUSH
12589: LD_INT 25
12591: PUSH
12592: LD_INT 4
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PPUSH
12599: CALL_OW 72
12603: PUSH
12604: LD_INT 0
12606: EQUAL
12607: IFFALSE 12623
// begin wait ( 3 ) ;
12609: LD_INT 3
12611: PPUSH
12612: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
12616: LD_STRING ACH_NOSCI
12618: PPUSH
12619: CALL_OW 543
// end ; m1 := solar_builded ;
12623: LD_ADDR_VAR 0 3
12627: PUSH
12628: LD_EXP 14
12632: ST_TO_ADDR
// m2 := veh_on_meta ;
12633: LD_ADDR_VAR 0 4
12637: PUSH
12638: LD_EXP 28
12642: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
12643: LD_ADDR_VAR 0 5
12647: PUSH
12648: LD_EXP 34
12652: PUSH
12653: LD_INT 0
12655: EQUAL
12656: ST_TO_ADDR
// if solar_builded then
12657: LD_EXP 14
12661: IFFALSE 12675
// AddMedal ( Solar1 , 1 ) else
12663: LD_STRING Solar1
12665: PPUSH
12666: LD_INT 1
12668: PPUSH
12669: CALL_OW 101
12673: GO 12686
// AddMedal ( Solar1 , - 1 ) ;
12675: LD_STRING Solar1
12677: PPUSH
12678: LD_INT 1
12680: NEG
12681: PPUSH
12682: CALL_OW 101
// if veh_on_meta then
12686: LD_EXP 28
12690: IFFALSE 12704
// AddMedal ( Solar2 , 1 ) else
12692: LD_STRING Solar2
12694: PPUSH
12695: LD_INT 1
12697: PPUSH
12698: CALL_OW 101
12702: GO 12734
// if solar_builded then
12704: LD_EXP 14
12708: IFFALSE 12723
// AddMedal ( Solar2 , - 1 ) else
12710: LD_STRING Solar2
12712: PPUSH
12713: LD_INT 1
12715: NEG
12716: PPUSH
12717: CALL_OW 101
12721: GO 12734
// AddMedal ( Solar2 , - 2 ) ;
12723: LD_STRING Solar2
12725: PPUSH
12726: LD_INT 2
12728: NEG
12729: PPUSH
12730: CALL_OW 101
// if lose_counter = 0 then
12734: LD_EXP 34
12738: PUSH
12739: LD_INT 0
12741: EQUAL
12742: IFFALSE 12756
// AddMedal ( No , 1 ) else
12744: LD_STRING No
12746: PPUSH
12747: LD_INT 1
12749: PPUSH
12750: CALL_OW 101
12754: GO 12800
// if lose_counter > 0 and lose_counter < 4 then
12756: LD_EXP 34
12760: PUSH
12761: LD_INT 0
12763: GREATER
12764: PUSH
12765: LD_EXP 34
12769: PUSH
12770: LD_INT 4
12772: LESS
12773: AND
12774: IFFALSE 12789
// AddMedal ( No , - 1 ) else
12776: LD_STRING No
12778: PPUSH
12779: LD_INT 1
12781: NEG
12782: PPUSH
12783: CALL_OW 101
12787: GO 12800
// AddMedal ( UpTo4 , - 1 ) ;
12789: LD_STRING UpTo4
12791: PPUSH
12792: LD_INT 1
12794: NEG
12795: PPUSH
12796: CALL_OW 101
// GiveMedals ( MAIN ) ;
12800: LD_STRING MAIN
12802: PPUSH
12803: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
12807: LD_OWVAR 67
12811: PUSH
12812: LD_INT 3
12814: GREATEREQUAL
12815: PUSH
12816: LD_VAR 0 3
12820: AND
12821: PUSH
12822: LD_VAR 0 4
12826: AND
12827: PUSH
12828: LD_VAR 0 5
12832: AND
12833: IFFALSE 12845
// SetAchievementEX ( ACH_AMER , 3 ) ;
12835: LD_STRING ACH_AMER
12837: PPUSH
12838: LD_INT 3
12840: PPUSH
12841: CALL_OW 564
// if IsDead ( Pokryshkin ) then
12845: LD_EXP 52
12849: PPUSH
12850: CALL_OW 301
12854: IFFALSE 12910
// begin stop_talking := true ;
12856: LD_ADDR_OWVAR 56
12860: PUSH
12861: LD_INT 1
12863: ST_TO_ADDR
// for i in save_group union save_others do
12864: LD_ADDR_VAR 0 2
12868: PUSH
12869: LD_EXP 23
12873: PUSH
12874: LD_EXP 22
12878: UNION
12879: PUSH
12880: FOR_IN
12881: IFFALSE 12900
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
12883: LD_VAR 0 2
12887: PPUSH
12888: LD_INT 1
12890: PPUSH
12891: LD_INT 1500
12893: PPUSH
12894: CALL_OW 591
12898: GO 12880
12900: POP
12901: POP
// stop_talking := false ;
12902: LD_ADDR_OWVAR 56
12906: PUSH
12907: LD_INT 0
12909: ST_TO_ADDR
// end ; RewardPeople ( save_group ^ save_others ) ;
12910: LD_EXP 23
12914: PUSH
12915: LD_EXP 22
12919: ADD
12920: PPUSH
12921: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
12925: LD_EXP 37
12929: PPUSH
12930: LD_EXP 2
12934: PUSH
12935: LD_STRING JMM
12937: STR
12938: PPUSH
12939: CALL_OW 38
// if Bobby in save_group then
12943: LD_EXP 38
12947: PUSH
12948: LD_EXP 23
12952: IN
12953: IFFALSE 12973
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
12955: LD_EXP 38
12959: PPUSH
12960: LD_EXP 2
12964: PUSH
12965: LD_STRING Bobby
12967: STR
12968: PPUSH
12969: CALL_OW 38
// if Cyrus in save_group then
12973: LD_EXP 39
12977: PUSH
12978: LD_EXP 23
12982: IN
12983: IFFALSE 13003
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
12985: LD_EXP 39
12989: PPUSH
12990: LD_EXP 2
12994: PUSH
12995: LD_STRING Cyrus
12997: STR
12998: PPUSH
12999: CALL_OW 38
// if Lisa in save_group then
13003: LD_EXP 40
13007: PUSH
13008: LD_EXP 23
13012: IN
13013: IFFALSE 13033
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13015: LD_EXP 40
13019: PPUSH
13020: LD_EXP 2
13024: PUSH
13025: LD_STRING Lisa
13027: STR
13028: PPUSH
13029: CALL_OW 38
// if Frank in save_group then
13033: LD_EXP 51
13037: PUSH
13038: LD_EXP 23
13042: IN
13043: IFFALSE 13063
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13045: LD_EXP 51
13049: PPUSH
13050: LD_EXP 2
13054: PUSH
13055: LD_STRING Frank
13057: STR
13058: PPUSH
13059: CALL_OW 38
// if Khatam in save_group then
13063: LD_EXP 41
13067: PUSH
13068: LD_EXP 23
13072: IN
13073: IFFALSE 13093
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13075: LD_EXP 41
13079: PPUSH
13080: LD_EXP 2
13084: PUSH
13085: LD_STRING Khatam
13087: STR
13088: PPUSH
13089: CALL_OW 38
// if save_others then
13093: LD_EXP 22
13097: IFFALSE 13111
// SaveCharacters ( save_others , 03_others ) ;
13099: LD_EXP 22
13103: PPUSH
13104: LD_STRING 03_others
13106: PPUSH
13107: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13111: LD_EXP 45
13115: PUSH
13116: LD_EXP 45
13120: PPUSH
13121: CALL_OW 302
13125: AND
13126: PUSH
13127: LD_EXP 27
13131: AND
13132: IFFALSE 13144
// begin ResetFog ;
13134: CALL_OW 335
// DisplayEndingScene ;
13138: CALL 13166 0 0
// end else
13142: GO 13157
// DeleteCharacters ( mission_prefix & Cornel ) ;
13144: LD_EXP 2
13148: PUSH
13149: LD_STRING Cornel
13151: STR
13152: PPUSH
13153: CALL_OW 40
// YouWin ;
13157: CALL_OW 103
// end ;
13161: LD_VAR 0 1
13165: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13166: LD_INT 0
13168: PPUSH
13169: PPUSH
13170: PPUSH
13171: PPUSH
13172: PPUSH
13173: PPUSH
// InGameOn ;
13174: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13178: LD_INT 208
13180: PPUSH
13181: LD_INT 62
13183: PPUSH
13184: LD_INT 1
13186: PPUSH
13187: LD_INT 10
13189: NEG
13190: PPUSH
13191: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13195: LD_INT 208
13197: PPUSH
13198: LD_INT 62
13200: PPUSH
13201: LD_INT 1
13203: PPUSH
13204: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13208: LD_ADDR_VAR 0 3
13212: PUSH
13213: LD_INT 22
13215: PUSH
13216: LD_INT 3
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 2
13225: PUSH
13226: LD_INT 21
13228: PUSH
13229: LD_INT 2
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: LD_INT 21
13238: PUSH
13239: LD_INT 1
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: LIST
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PPUSH
13255: CALL_OW 69
13259: ST_TO_ADDR
// if filter then
13260: LD_VAR 0 3
13264: IFFALSE 13292
// for i in filter do
13266: LD_ADDR_VAR 0 2
13270: PUSH
13271: LD_VAR 0 3
13275: PUSH
13276: FOR_IN
13277: IFFALSE 13290
// RemoveUnit ( i ) ;
13279: LD_VAR 0 2
13283: PPUSH
13284: CALL_OW 64
13288: GO 13276
13290: POP
13291: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13292: LD_ADDR_VAR 0 3
13296: PUSH
13297: LD_INT 22
13299: PUSH
13300: LD_INT 4
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 21
13309: PUSH
13310: LD_INT 1
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PPUSH
13321: CALL_OW 69
13325: ST_TO_ADDR
// if filter then
13326: LD_VAR 0 3
13330: IFFALSE 13361
// for i in filter do
13332: LD_ADDR_VAR 0 2
13336: PUSH
13337: LD_VAR 0 3
13341: PUSH
13342: FOR_IN
13343: IFFALSE 13359
// SetLives ( i , 0 ) ;
13345: LD_VAR 0 2
13349: PPUSH
13350: LD_INT 0
13352: PPUSH
13353: CALL_OW 234
13357: GO 13342
13359: POP
13360: POP
// uc_side := 4 ;
13361: LD_ADDR_OWVAR 20
13365: PUSH
13366: LD_INT 4
13368: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13369: LD_ADDR_VAR 0 4
13373: PUSH
13374: LD_STRING Cornell
13376: PPUSH
13377: LD_INT 0
13379: PPUSH
13380: LD_STRING 
13382: PPUSH
13383: CALL 38632 0 3
13387: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13388: LD_VAR 0 4
13392: PPUSH
13393: LD_INT 208
13395: PPUSH
13396: LD_INT 62
13398: PPUSH
13399: LD_INT 0
13401: PPUSH
13402: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13406: LD_VAR 0 4
13410: PPUSH
13411: LD_INT 100
13413: PPUSH
13414: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13418: LD_INT 3
13420: PPUSH
13421: LD_VAR 0 4
13425: PPUSH
13426: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13430: LD_INT 4
13432: PPUSH
13433: LD_INT 3
13435: PPUSH
13436: LD_INT 1
13438: PPUSH
13439: LD_INT 1
13441: PPUSH
13442: CALL_OW 80
// uc_side := 3 ;
13446: LD_ADDR_OWVAR 20
13450: PUSH
13451: LD_INT 3
13453: ST_TO_ADDR
// uc_nation := 3 ;
13454: LD_ADDR_OWVAR 21
13458: PUSH
13459: LD_INT 3
13461: ST_TO_ADDR
// InitHc ;
13462: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13466: LD_ADDR_VAR 0 5
13470: PUSH
13471: LD_STRING Mikhail
13473: PPUSH
13474: LD_INT 0
13476: PPUSH
13477: LD_STRING 
13479: PPUSH
13480: CALL 38632 0 3
13484: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13485: LD_INT 1
13487: PPUSH
13488: LD_INT 1
13490: PPUSH
13491: LD_INT 0
13493: PPUSH
13494: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13498: LD_ADDR_VAR 0 6
13502: PUSH
13503: LD_VAR 0 6
13507: PUSH
13508: CALL_OW 44
13512: ADD
13513: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13514: LD_ADDR_VAR 0 6
13518: PUSH
13519: LD_VAR 0 6
13523: PUSH
13524: CALL_OW 44
13528: ADD
13529: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13530: LD_INT 2
13532: PPUSH
13533: LD_INT 4
13535: PPUSH
13536: LD_INT 0
13538: PPUSH
13539: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13543: LD_ADDR_VAR 0 6
13547: PUSH
13548: LD_VAR 0 6
13552: PUSH
13553: CALL_OW 44
13557: ADD
13558: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13559: LD_VAR 0 5
13563: PPUSH
13564: LD_INT 17
13566: PPUSH
13567: LD_INT 0
13569: PPUSH
13570: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13574: LD_VAR 0 5
13578: PPUSH
13579: LD_INT 210
13581: PPUSH
13582: LD_INT 63
13584: PPUSH
13585: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
13589: LD_VAR 0 5
13593: PPUSH
13594: LD_INT 208
13596: PPUSH
13597: LD_INT 62
13599: PPUSH
13600: CALL_OW 178
// for i in fake_russians do
13604: LD_ADDR_VAR 0 2
13608: PUSH
13609: LD_VAR 0 6
13613: PUSH
13614: FOR_IN
13615: IFFALSE 13693
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
13617: LD_VAR 0 2
13621: PPUSH
13622: LD_INT 17
13624: PPUSH
13625: LD_INT 0
13627: PPUSH
13628: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
13632: LD_VAR 0 2
13636: PPUSH
13637: LD_INT 215
13639: PPUSH
13640: LD_INT 67
13642: PPUSH
13643: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
13647: LD_VAR 0 2
13651: PPUSH
13652: LD_INT 208
13654: PPUSH
13655: LD_INT 62
13657: PPUSH
13658: CALL_OW 178
// if GetClass ( i ) = 4 then
13662: LD_VAR 0 2
13666: PPUSH
13667: CALL_OW 257
13671: PUSH
13672: LD_INT 4
13674: EQUAL
13675: IFFALSE 13691
// ComHeal ( i , fake_cornel ) ;
13677: LD_VAR 0 2
13681: PPUSH
13682: LD_VAR 0 4
13686: PPUSH
13687: CALL_OW 128
// end ;
13691: GO 13614
13693: POP
13694: POP
// Wait ( 0 0$01 ) ;
13695: LD_INT 35
13697: PPUSH
13698: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
13702: LD_INT 208
13704: PPUSH
13705: LD_INT 62
13707: PPUSH
13708: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13712: LD_INT 208
13714: PPUSH
13715: LD_INT 62
13717: PPUSH
13718: LD_INT 1
13720: PPUSH
13721: LD_INT 10
13723: NEG
13724: PPUSH
13725: CALL_OW 330
// Wait ( 0 0$15 ) ;
13729: LD_INT 525
13731: PPUSH
13732: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
13736: LD_INT 208
13738: PPUSH
13739: LD_INT 62
13741: PPUSH
13742: LD_INT 1
13744: PPUSH
13745: CALL_OW 331
// ResetFog ;
13749: CALL_OW 335
// InGameOff ;
13753: CALL_OW 9
// end ;
13757: LD_VAR 0 1
13761: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
13762: LD_INT 10
13764: PPUSH
13765: LD_INT 22
13767: PUSH
13768: LD_INT 1
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PPUSH
13775: CALL_OW 70
13779: PUSH
13780: LD_EXP 44
13784: PPUSH
13785: CALL_OW 302
13789: AND
13790: PUSH
13791: LD_INT 22
13793: PUSH
13794: LD_INT 1
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PPUSH
13801: CALL_OW 69
13805: PPUSH
13806: LD_EXP 44
13810: PPUSH
13811: CALL_OW 74
13815: PPUSH
13816: LD_EXP 44
13820: PPUSH
13821: CALL_OW 296
13825: PUSH
13826: LD_INT 30
13828: LESS
13829: OR
13830: IFFALSE 13881
13832: GO 13834
13834: DISABLE
// begin enable ;
13835: ENABLE
// powell_warn := powell_warn + 1 ;
13836: LD_ADDR_EXP 35
13840: PUSH
13841: LD_EXP 35
13845: PUSH
13846: LD_INT 1
13848: PLUS
13849: ST_TO_ADDR
// if powell_warn = 3 then
13850: LD_EXP 35
13854: PUSH
13855: LD_INT 3
13857: EQUAL
13858: IFFALSE 13869
// begin YouLost ( 5 ) ;
13860: LD_STRING 5
13862: PPUSH
13863: CALL_OW 104
// exit ;
13867: GO 13881
// end ; SayRadio ( Powell , DWarn-Pow-1 ) ;
13869: LD_EXP 46
13873: PPUSH
13874: LD_STRING DWarn-Pow-1
13876: PPUSH
13877: CALL_OW 94
// end ; end_of_file
13881: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
13882: LD_EXP 8
13886: IFFALSE 15723
13888: GO 13890
13890: DISABLE
13891: LD_INT 0
13893: PPUSH
13894: PPUSH
13895: PPUSH
13896: PPUSH
13897: PPUSH
13898: PPUSH
13899: PPUSH
13900: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
13901: LD_EXP 44
13905: PUSH
13906: LD_EXP 45
13910: ADD
13911: PUSH
13912: LD_EXP 6
13916: ADD
13917: PPUSH
13918: LD_INT 250
13920: PPUSH
13921: LD_INT 120
13923: PPUSH
13924: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
13928: LD_ADDR_VAR 0 2
13932: PUSH
13933: LD_EXP 6
13937: PPUSH
13938: LD_INT 25
13940: PUSH
13941: LD_INT 2
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PPUSH
13948: CALL_OW 72
13952: PUSH
13953: LD_EXP 45
13957: DIFF
13958: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
13959: LD_ADDR_VAR 0 3
13963: PUSH
13964: LD_EXP 6
13968: PPUSH
13969: LD_INT 21
13971: PUSH
13972: LD_INT 1
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PPUSH
13979: CALL_OW 72
13983: PUSH
13984: LD_VAR 0 2
13988: DIFF
13989: ST_TO_ADDR
// if not has_eng then
13990: LD_VAR 0 2
13994: NOT
13995: IFFALSE 14078
// begin uc_side := 4 ;
13997: LD_ADDR_OWVAR 20
14001: PUSH
14002: LD_INT 4
14004: ST_TO_ADDR
// uc_nation := 1 ;
14005: LD_ADDR_OWVAR 21
14009: PUSH
14010: LD_INT 1
14012: ST_TO_ADDR
// bc_type := b_depot ;
14013: LD_ADDR_OWVAR 42
14017: PUSH
14018: LD_INT 0
14020: ST_TO_ADDR
// bc_level := 2 ;
14021: LD_ADDR_OWVAR 43
14025: PUSH
14026: LD_INT 2
14028: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14029: LD_ADDR_VAR 0 4
14033: PUSH
14034: LD_INT 264
14036: PPUSH
14037: LD_INT 120
14039: PPUSH
14040: LD_INT 4
14042: PPUSH
14043: CALL_OW 47
14047: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14048: LD_INT 264
14050: PPUSH
14051: LD_INT 120
14053: PPUSH
14054: LD_INT 4
14056: PPUSH
14057: LD_INT 10
14059: NEG
14060: PPUSH
14061: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14065: LD_INT 264
14067: PPUSH
14068: LD_INT 120
14070: PPUSH
14071: LD_INT 4
14073: PPUSH
14074: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14078: LD_INT 35
14080: PPUSH
14081: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14085: LD_EXP 44
14089: PPUSH
14090: LD_INT 10
14092: PPUSH
14093: CALL_OW 308
14097: PUSH
14098: LD_EXP 44
14102: PPUSH
14103: CALL_OW 310
14107: PPUSH
14108: LD_INT 10
14110: PPUSH
14111: CALL_OW 308
14115: OR
14116: IFFALSE 14078
// if has_eng and not dep then
14118: LD_VAR 0 2
14122: PUSH
14123: LD_VAR 0 4
14127: NOT
14128: AND
14129: IFFALSE 14279
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14131: LD_VAR 0 2
14135: PPUSH
14136: LD_INT 0
14138: PPUSH
14139: LD_INT 264
14141: PPUSH
14142: LD_INT 120
14144: PPUSH
14145: LD_INT 4
14147: PPUSH
14148: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14152: LD_INT 35
14154: PPUSH
14155: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14159: LD_INT 22
14161: PUSH
14162: LD_INT 4
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 30
14171: PUSH
14172: LD_INT 0
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PPUSH
14183: CALL_OW 69
14187: IFFALSE 14152
// ComMoveXY ( filter , 264 , 120 ) ;
14189: LD_VAR 0 3
14193: PPUSH
14194: LD_INT 264
14196: PPUSH
14197: LD_INT 120
14199: PPUSH
14200: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14204: LD_INT 35
14206: PPUSH
14207: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14211: LD_INT 22
14213: PUSH
14214: LD_INT 4
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 30
14223: PUSH
14224: LD_INT 0
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 3
14233: PUSH
14234: LD_INT 57
14236: PUSH
14237: EMPTY
14238: LIST
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: LIST
14248: PPUSH
14249: CALL_OW 69
14253: IFFALSE 14204
// ComMoveXY ( filter , 247 , 113 ) ;
14255: LD_VAR 0 3
14259: PPUSH
14260: LD_INT 247
14262: PPUSH
14263: LD_INT 113
14265: PPUSH
14266: CALL_OW 111
// Wait ( 0 0$2 ) ;
14270: LD_INT 70
14272: PPUSH
14273: CALL_OW 67
// end else
14277: GO 14291
// begin SetSide ( dep , 4 ) ;
14279: LD_VAR 0 4
14283: PPUSH
14284: LD_INT 4
14286: PPUSH
14287: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14291: LD_ADDR_VAR 0 4
14295: PUSH
14296: LD_INT 22
14298: PUSH
14299: LD_INT 4
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: LD_INT 30
14308: PUSH
14309: LD_INT 0
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PPUSH
14320: CALL_OW 69
14324: PUSH
14325: LD_INT 1
14327: ARRAY
14328: ST_TO_ADDR
// if not has_eng then
14329: LD_VAR 0 2
14333: NOT
14334: IFFALSE 14421
// for i = 1 to 2 do
14336: LD_ADDR_VAR 0 1
14340: PUSH
14341: DOUBLE
14342: LD_INT 1
14344: DEC
14345: ST_TO_ADDR
14346: LD_INT 2
14348: PUSH
14349: FOR_TO
14350: IFFALSE 14419
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14352: LD_VAR 0 3
14356: PUSH
14357: LD_INT 1
14359: ARRAY
14360: PPUSH
14361: LD_VAR 0 4
14365: PPUSH
14366: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14370: LD_VAR 0 3
14374: PUSH
14375: LD_INT 1
14377: ARRAY
14378: PPUSH
14379: LD_INT 2
14381: PPUSH
14382: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14386: LD_VAR 0 3
14390: PUSH
14391: LD_INT 1
14393: ARRAY
14394: PPUSH
14395: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14399: LD_ADDR_VAR 0 3
14403: PUSH
14404: LD_VAR 0 3
14408: PPUSH
14409: LD_INT 1
14411: PPUSH
14412: CALL_OW 3
14416: ST_TO_ADDR
// end ;
14417: GO 14349
14419: POP
14420: POP
// if IsInUnit ( Cornel ) then
14421: LD_EXP 44
14425: PPUSH
14426: CALL_OW 310
14430: IFFALSE 14508
// begin cargo := IsInUnit ( Cornel ) ;
14432: LD_ADDR_VAR 0 7
14436: PUSH
14437: LD_EXP 44
14441: PPUSH
14442: CALL_OW 310
14446: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14447: LD_VAR 0 7
14451: PPUSH
14452: LD_INT 1
14454: PPUSH
14455: CALL_OW 289
14459: IFFALSE 14470
// ComUnload ( cargo ) ;
14461: LD_VAR 0 7
14465: PPUSH
14466: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14470: LD_EXP 44
14474: PPUSH
14475: LD_INT 235
14477: PPUSH
14478: LD_INT 122
14480: PPUSH
14481: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14485: LD_EXP 44
14489: PPUSH
14490: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14494: LD_EXP 44
14498: PPUSH
14499: LD_VAR 0 4
14503: PPUSH
14504: CALL_OW 180
// end ; if Bierezov then
14508: LD_EXP 45
14512: IFFALSE 14560
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14514: LD_EXP 45
14518: PPUSH
14519: LD_INT 260
14521: PPUSH
14522: LD_INT 120
14524: PPUSH
14525: CALL_OW 111
// if dep then
14529: LD_VAR 0 4
14533: IFFALSE 14551
// AddComEnterUnit ( Bierezov , dep ) else
14535: LD_EXP 45
14539: PPUSH
14540: LD_VAR 0 4
14544: PPUSH
14545: CALL_OW 180
14549: GO 14560
// AddComHold ( Bierezov ) ;
14551: LD_EXP 45
14555: PPUSH
14556: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14560: LD_INT 525
14562: PPUSH
14563: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14567: LD_ADDR_VAR 0 2
14571: PUSH
14572: LD_INT 22
14574: PUSH
14575: LD_INT 4
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PUSH
14582: LD_INT 25
14584: PUSH
14585: LD_INT 2
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PPUSH
14596: CALL_OW 69
14600: PUSH
14601: LD_EXP 45
14605: DIFF
14606: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14607: LD_INT 35
14609: PPUSH
14610: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
14614: LD_ADDR_VAR 0 6
14618: PUSH
14619: LD_INT 10
14621: PPUSH
14622: CALL_OW 435
14626: ST_TO_ADDR
// if crates then
14627: LD_VAR 0 6
14631: IFFALSE 14660
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
14633: LD_VAR 0 2
14637: PPUSH
14638: LD_VAR 0 6
14642: PUSH
14643: LD_INT 1
14645: ARRAY
14646: PPUSH
14647: LD_VAR 0 6
14651: PUSH
14652: LD_INT 2
14654: ARRAY
14655: PPUSH
14656: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
14660: LD_VAR 0 4
14664: PPUSH
14665: CALL_OW 274
14669: PPUSH
14670: LD_INT 1
14672: PPUSH
14673: CALL_OW 275
14677: PUSH
14678: LD_INT 40
14680: GREATEREQUAL
14681: IFFALSE 14607
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
14683: LD_ADDR_VAR 0 5
14687: PUSH
14688: LD_INT 4
14690: PUSH
14691: LD_INT 256
14693: PUSH
14694: LD_INT 111
14696: PUSH
14697: LD_INT 2
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 31
14708: PUSH
14709: LD_INT 243
14711: PUSH
14712: LD_INT 112
14714: PUSH
14715: LD_INT 2
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: PUSH
14724: LD_INT 31
14726: PUSH
14727: LD_INT 254
14729: PUSH
14730: LD_INT 114
14732: PUSH
14733: LD_INT 2
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: LIST
14746: ST_TO_ADDR
// for i in blist do
14747: LD_ADDR_VAR 0 1
14751: PUSH
14752: LD_VAR 0 5
14756: PUSH
14757: FOR_IN
14758: IFFALSE 14807
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
14760: LD_VAR 0 2
14764: PPUSH
14765: LD_VAR 0 1
14769: PUSH
14770: LD_INT 1
14772: ARRAY
14773: PPUSH
14774: LD_VAR 0 1
14778: PUSH
14779: LD_INT 2
14781: ARRAY
14782: PPUSH
14783: LD_VAR 0 1
14787: PUSH
14788: LD_INT 3
14790: ARRAY
14791: PPUSH
14792: LD_VAR 0 1
14796: PUSH
14797: LD_INT 4
14799: ARRAY
14800: PPUSH
14801: CALL_OW 205
14805: GO 14757
14807: POP
14808: POP
// repeat wait ( 0 0$01 ) ;
14809: LD_INT 35
14811: PPUSH
14812: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
14816: LD_INT 22
14818: PUSH
14819: LD_INT 4
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: LD_INT 30
14828: PUSH
14829: LD_INT 4
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: LD_INT 3
14838: PUSH
14839: LD_INT 57
14841: PUSH
14842: EMPTY
14843: LIST
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: LIST
14853: PPUSH
14854: CALL_OW 69
14858: IFFALSE 14809
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14860: LD_VAR 0 3
14864: PPUSH
14865: LD_INT 22
14867: PUSH
14868: LD_INT 4
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: LD_INT 30
14877: PUSH
14878: LD_INT 4
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PPUSH
14889: CALL_OW 69
14893: PUSH
14894: LD_INT 1
14896: ARRAY
14897: PPUSH
14898: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
14902: LD_VAR 0 3
14906: PPUSH
14907: LD_INT 1
14909: PPUSH
14910: CALL_OW 183
// if has_eng > 1 then
14914: LD_VAR 0 2
14918: PUSH
14919: LD_INT 1
14921: GREATER
14922: IFFALSE 15064
// for i = has_eng downto 2 do
14924: LD_ADDR_VAR 0 1
14928: PUSH
14929: DOUBLE
14930: LD_VAR 0 2
14934: INC
14935: ST_TO_ADDR
14936: LD_INT 2
14938: PUSH
14939: FOR_DOWNTO
14940: IFFALSE 15062
// begin if IsInUnit ( has_eng [ i ] ) then
14942: LD_VAR 0 2
14946: PUSH
14947: LD_VAR 0 1
14951: ARRAY
14952: PPUSH
14953: CALL_OW 310
14957: IFFALSE 14974
// ComExitBuilding ( has_eng [ i ] ) ;
14959: LD_VAR 0 2
14963: PUSH
14964: LD_VAR 0 1
14968: ARRAY
14969: PPUSH
14970: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14974: LD_VAR 0 2
14978: PUSH
14979: LD_VAR 0 1
14983: ARRAY
14984: PPUSH
14985: LD_INT 22
14987: PUSH
14988: LD_INT 4
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 30
14997: PUSH
14998: LD_INT 4
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PPUSH
15009: CALL_OW 69
15013: PUSH
15014: LD_INT 1
15016: ARRAY
15017: PPUSH
15018: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15022: LD_VAR 0 2
15026: PUSH
15027: LD_VAR 0 1
15031: ARRAY
15032: PPUSH
15033: LD_INT 1
15035: PPUSH
15036: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15040: LD_ADDR_VAR 0 2
15044: PUSH
15045: LD_VAR 0 2
15049: PPUSH
15050: LD_VAR 0 1
15054: PPUSH
15055: CALL_OW 3
15059: ST_TO_ADDR
// end ;
15060: GO 14939
15062: POP
15063: POP
// repeat wait ( 0 0$01 ) ;
15064: LD_INT 35
15066: PPUSH
15067: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15071: LD_INT 22
15073: PUSH
15074: LD_INT 4
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 30
15083: PUSH
15084: LD_INT 31
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 3
15093: PUSH
15094: LD_INT 57
15096: PUSH
15097: EMPTY
15098: LIST
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: LIST
15108: PPUSH
15109: CALL_OW 69
15113: PUSH
15114: LD_INT 1
15116: GREATER
15117: IFFALSE 15064
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15119: LD_ADDR_VAR 0 8
15123: PUSH
15124: LD_EXP 6
15128: PPUSH
15129: LD_INT 25
15131: PUSH
15132: LD_INT 1
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PPUSH
15139: CALL_OW 72
15143: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15144: LD_ADDR_VAR 0 1
15148: PUSH
15149: DOUBLE
15150: LD_INT 1
15152: DEC
15153: ST_TO_ADDR
15154: LD_INT 22
15156: PUSH
15157: LD_INT 4
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 30
15166: PUSH
15167: LD_INT 31
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 3
15176: PUSH
15177: LD_INT 57
15179: PUSH
15180: EMPTY
15181: LIST
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: PPUSH
15192: CALL_OW 69
15196: PUSH
15197: FOR_TO
15198: IFFALSE 15282
// begin if not sol [ i ] then
15200: LD_VAR 0 8
15204: PUSH
15205: LD_VAR 0 1
15209: ARRAY
15210: NOT
15211: IFFALSE 15215
// break ;
15213: GO 15282
// ComExitBuilding ( sol [ i ] ) ;
15215: LD_VAR 0 8
15219: PUSH
15220: LD_VAR 0 1
15224: ARRAY
15225: PPUSH
15226: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15230: LD_VAR 0 8
15234: PUSH
15235: LD_VAR 0 1
15239: ARRAY
15240: PPUSH
15241: LD_INT 22
15243: PUSH
15244: LD_INT 4
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PUSH
15251: LD_INT 30
15253: PUSH
15254: LD_INT 31
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PPUSH
15265: CALL_OW 69
15269: PUSH
15270: LD_VAR 0 1
15274: ARRAY
15275: PPUSH
15276: CALL_OW 180
// end ;
15280: GO 15197
15282: POP
15283: POP
// if sol > 3 then
15284: LD_VAR 0 8
15288: PUSH
15289: LD_INT 3
15291: GREATER
15292: IFFALSE 15409
// begin ComExitBuilding ( sol [ 3 ] ) ;
15294: LD_VAR 0 8
15298: PUSH
15299: LD_INT 3
15301: ARRAY
15302: PPUSH
15303: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15307: LD_VAR 0 8
15311: PUSH
15312: LD_INT 3
15314: ARRAY
15315: PPUSH
15316: LD_INT 246
15318: PPUSH
15319: LD_INT 94
15321: PPUSH
15322: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15326: LD_VAR 0 8
15330: PUSH
15331: LD_INT 3
15333: ARRAY
15334: PPUSH
15335: LD_INT 175
15337: PPUSH
15338: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15342: LD_VAR 0 8
15346: PUSH
15347: LD_INT 3
15349: ARRAY
15350: PPUSH
15351: LD_INT 224
15353: PPUSH
15354: LD_INT 90
15356: PPUSH
15357: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15361: LD_VAR 0 8
15365: PUSH
15366: LD_INT 3
15368: ARRAY
15369: PPUSH
15370: LD_INT 245
15372: PPUSH
15373: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15377: LD_VAR 0 8
15381: PUSH
15382: LD_INT 3
15384: ARRAY
15385: PPUSH
15386: LD_INT 223
15388: PPUSH
15389: LD_INT 110
15391: PPUSH
15392: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15396: LD_VAR 0 8
15400: PUSH
15401: LD_INT 3
15403: ARRAY
15404: PPUSH
15405: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15409: LD_VAR 0 2
15413: PPUSH
15414: LD_VAR 0 4
15418: PPUSH
15419: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15423: LD_INT 22
15425: PUSH
15426: LD_INT 4
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 30
15435: PUSH
15436: LD_INT 4
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PPUSH
15447: CALL_OW 69
15451: PUSH
15452: LD_INT 1
15454: ARRAY
15455: PPUSH
15456: CALL_OW 313
15460: PUSH
15461: LD_INT 6
15463: LESS
15464: IFFALSE 15528
// begin if IsInUnit ( Cornel ) then
15466: LD_EXP 44
15470: PPUSH
15471: CALL_OW 310
15475: IFFALSE 15486
// ComExitBuilding ( Cornel ) ;
15477: LD_EXP 44
15481: PPUSH
15482: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15486: LD_EXP 44
15490: PPUSH
15491: LD_INT 22
15493: PUSH
15494: LD_INT 4
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 30
15503: PUSH
15504: LD_INT 4
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PPUSH
15515: CALL_OW 69
15519: PUSH
15520: LD_INT 1
15522: ARRAY
15523: PPUSH
15524: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15528: LD_INT 35
15530: PPUSH
15531: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15535: LD_ADDR_VAR 0 3
15539: PUSH
15540: LD_INT 22
15542: PUSH
15543: LD_INT 4
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PUSH
15550: LD_INT 21
15552: PUSH
15553: LD_INT 3
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PUSH
15560: LD_INT 3
15562: PUSH
15563: LD_INT 24
15565: PUSH
15566: LD_INT 1000
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: LIST
15581: PPUSH
15582: CALL_OW 69
15586: ST_TO_ADDR
// if filter and has_eng then
15587: LD_VAR 0 3
15591: PUSH
15592: LD_VAR 0 2
15596: AND
15597: IFFALSE 15663
// begin for i in has_eng do
15599: LD_ADDR_VAR 0 1
15603: PUSH
15604: LD_VAR 0 2
15608: PUSH
15609: FOR_IN
15610: IFFALSE 15659
// begin if IsInUnit ( i ) then
15612: LD_VAR 0 1
15616: PPUSH
15617: CALL_OW 310
15621: IFFALSE 15632
// ComExitBuilding ( i ) ;
15623: LD_VAR 0 1
15627: PPUSH
15628: CALL_OW 122
// Wait ( 3 ) ;
15632: LD_INT 3
15634: PPUSH
15635: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
15639: LD_VAR 0 1
15643: PPUSH
15644: LD_VAR 0 3
15648: PUSH
15649: LD_INT 1
15651: ARRAY
15652: PPUSH
15653: CALL_OW 130
// end ;
15657: GO 15609
15659: POP
15660: POP
// end else
15661: GO 15717
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
15663: LD_VAR 0 2
15667: PUSH
15668: LD_VAR 0 2
15672: PPUSH
15673: LD_INT 56
15675: PUSH
15676: EMPTY
15677: LIST
15678: PPUSH
15679: CALL_OW 72
15683: AND
15684: IFFALSE 15717
// for i in has_eng do
15686: LD_ADDR_VAR 0 1
15690: PUSH
15691: LD_VAR 0 2
15695: PUSH
15696: FOR_IN
15697: IFFALSE 15715
// ComEnterUnit ( i , dep ) ;
15699: LD_VAR 0 1
15703: PPUSH
15704: LD_VAR 0 4
15708: PPUSH
15709: CALL_OW 120
15713: GO 15696
15715: POP
15716: POP
// until cornel_prepared ;
15717: LD_EXP 11
15721: IFFALSE 15528
// end ;
15723: PPOPN 8
15725: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
15726: LD_EXP 11
15730: IFFALSE 16166
15732: GO 15734
15734: DISABLE
15735: LD_INT 0
15737: PPUSH
15738: PPUSH
15739: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
15740: LD_ADDR_VAR 0 2
15744: PUSH
15745: LD_INT 22
15747: PUSH
15748: LD_INT 4
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: LD_INT 30
15757: PUSH
15758: LD_INT 4
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PPUSH
15769: CALL_OW 69
15773: PUSH
15774: LD_INT 1
15776: ARRAY
15777: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
15778: LD_EXP 6
15782: PPUSH
15783: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
15787: LD_EXP 45
15791: PUSH
15792: LD_EXP 45
15796: PPUSH
15797: CALL_OW 310
15801: AND
15802: IFFALSE 15813
// ComExitBuilding ( Bierezov ) ;
15804: LD_EXP 45
15808: PPUSH
15809: CALL_OW 122
// Wait ( 0 0$03 ) ;
15813: LD_INT 105
15815: PPUSH
15816: CALL_OW 67
// for i in cornel_units do
15820: LD_ADDR_VAR 0 1
15824: PUSH
15825: LD_EXP 6
15829: PUSH
15830: FOR_IN
15831: IFFALSE 15907
// begin if GetClass ( i ) in [ 2 , 3 ] then
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 257
15842: PUSH
15843: LD_INT 2
15845: PUSH
15846: LD_INT 3
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: IN
15853: IFFALSE 15890
// begin ComEnterUnit ( i , arm ) ;
15855: LD_VAR 0 1
15859: PPUSH
15860: LD_VAR 0 2
15864: PPUSH
15865: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
15869: LD_VAR 0 1
15873: PPUSH
15874: LD_INT 1
15876: PPUSH
15877: CALL_OW 183
// AddComExitBuilding ( i ) ;
15881: LD_VAR 0 1
15885: PPUSH
15886: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
15890: LD_VAR 0 1
15894: PPUSH
15895: LD_INT 257
15897: PPUSH
15898: LD_INT 121
15900: PPUSH
15901: CALL_OW 171
// end ;
15905: GO 15830
15907: POP
15908: POP
// Wait ( 1 1$00 ) ;
15909: LD_INT 2100
15911: PPUSH
15912: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
15916: LD_ADDR_VAR 0 3
15920: PUSH
15921: LD_EXP 44
15925: PUSH
15926: LD_EXP 45
15930: ADD
15931: PUSH
15932: LD_EXP 6
15936: ADD
15937: PUSH
15938: LD_EXP 6
15942: PPUSH
15943: LD_INT 21
15945: PUSH
15946: LD_INT 2
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PPUSH
15953: CALL_OW 72
15957: DIFF
15958: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
15959: LD_VAR 0 3
15963: PPUSH
15964: LD_INT 248
15966: PPUSH
15967: LD_INT 85
15969: PPUSH
15970: CALL_OW 111
// AddComHold ( filter ) ;
15974: LD_VAR 0 3
15978: PPUSH
15979: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
15983: LD_INT 35
15985: PPUSH
15986: CALL_OW 67
// until cornel_attack ;
15990: LD_EXP 9
15994: IFFALSE 15983
// ComAgressiveMove ( filter , 209 , 63 ) ;
15996: LD_VAR 0 3
16000: PPUSH
16001: LD_INT 209
16003: PPUSH
16004: LD_INT 63
16006: PPUSH
16007: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16011: LD_EXP 44
16015: PPUSH
16016: LD_INT 208
16018: PPUSH
16019: LD_INT 62
16021: PPUSH
16022: CALL_OW 114
// AddComHold ( Cornel ) ;
16026: LD_EXP 44
16030: PPUSH
16031: CALL_OW 200
// if Bierezov then
16035: LD_EXP 45
16039: IFFALSE 16129
// begin filter := filter diff Bierezov ;
16041: LD_ADDR_VAR 0 3
16045: PUSH
16046: LD_VAR 0 3
16050: PUSH
16051: LD_EXP 45
16055: DIFF
16056: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16057: LD_EXP 45
16061: PPUSH
16062: LD_INT 6
16064: PPUSH
16065: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16069: LD_EXP 45
16073: PPUSH
16074: LD_INT 235
16076: PPUSH
16077: LD_INT 60
16079: PPUSH
16080: CALL_OW 111
// AddComHold ( Bierezov ) ;
16084: LD_EXP 45
16088: PPUSH
16089: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16093: LD_EXP 45
16097: PPUSH
16098: LD_INT 350
16100: PPUSH
16101: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16105: LD_EXP 45
16109: PPUSH
16110: LD_INT 198
16112: PPUSH
16113: LD_INT 28
16115: PPUSH
16116: CALL_OW 171
// AddComHold ( Bierezov ) ;
16120: LD_EXP 45
16124: PPUSH
16125: CALL_OW 200
// end ; repeat wait ( 0 0$2 ) ;
16129: LD_INT 70
16131: PPUSH
16132: CALL_OW 67
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16136: LD_EXP 44
16140: PPUSH
16141: LD_INT 208
16143: PPUSH
16144: LD_INT 62
16146: PPUSH
16147: CALL_OW 114
// until not IsInArea ( Cornel , cornelKappaArea ) ;
16151: LD_EXP 44
16155: PPUSH
16156: LD_INT 16
16158: PPUSH
16159: CALL_OW 308
16163: NOT
16164: IFFALSE 16129
// end ; end_of_file
16166: PPOPN 3
16168: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16169: LD_EXP 53
16173: PUSH
16174: LD_EXP 31
16178: NOT
16179: AND
16180: PUSH
16181: LD_EXP 32
16185: NOT
16186: AND
16187: IFFALSE 16637
16189: GO 16191
16191: DISABLE
16192: LD_INT 0
16194: PPUSH
16195: PPUSH
16196: PPUSH
16197: PPUSH
// begin enable ;
16198: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16199: LD_ADDR_VAR 0 4
16203: PUSH
16204: LD_INT 81
16206: PUSH
16207: LD_INT 3
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PPUSH
16214: CALL_OW 69
16218: ST_TO_ADDR
// for i = 1 to ru_patrol do
16219: LD_ADDR_VAR 0 2
16223: PUSH
16224: DOUBLE
16225: LD_INT 1
16227: DEC
16228: ST_TO_ADDR
16229: LD_EXP 53
16233: PUSH
16234: FOR_TO
16235: IFFALSE 16635
// begin un := ru_patrol [ i ] ;
16237: LD_ADDR_VAR 0 1
16241: PUSH
16242: LD_EXP 53
16246: PUSH
16247: LD_VAR 0 2
16251: ARRAY
16252: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16253: LD_VAR 0 1
16257: PPUSH
16258: LD_INT 13
16260: PPUSH
16261: CALL_OW 308
16265: IFFALSE 16370
// begin if not ru_alert then
16267: LD_EXP 60
16271: NOT
16272: IFFALSE 16282
// ru_alert := true ;
16274: LD_ADDR_EXP 60
16278: PUSH
16279: LD_INT 1
16281: ST_TO_ADDR
// if not See ( 1 , un ) then
16282: LD_INT 1
16284: PPUSH
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 292
16294: NOT
16295: IFFALSE 16309
// SetLives ( un , 1000 ) ;
16297: LD_VAR 0 1
16301: PPUSH
16302: LD_INT 1000
16304: PPUSH
16305: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16309: LD_ADDR_EXP 53
16313: PUSH
16314: LD_EXP 53
16318: PUSH
16319: LD_VAR 0 1
16323: DIFF
16324: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16325: LD_VAR 0 1
16329: PPUSH
16330: LD_INT 22
16332: PUSH
16333: LD_INT 3
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: LD_INT 30
16342: PUSH
16343: LD_INT 4
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PPUSH
16354: CALL_OW 69
16358: PPUSH
16359: CALL 1007 0 1
16363: PPUSH
16364: CALL_OW 120
// continue ;
16368: GO 16234
// end ; if IsOk ( un ) and not HasTask ( un ) then
16370: LD_VAR 0 1
16374: PPUSH
16375: CALL_OW 302
16379: PUSH
16380: LD_VAR 0 1
16384: PPUSH
16385: CALL_OW 314
16389: NOT
16390: AND
16391: IFFALSE 16484
// begin for j = 1 to ru_firepoints_south [ i ] do
16393: LD_ADDR_VAR 0 3
16397: PUSH
16398: DOUBLE
16399: LD_INT 1
16401: DEC
16402: ST_TO_ADDR
16403: LD_EXP 59
16407: PUSH
16408: LD_VAR 0 2
16412: ARRAY
16413: PUSH
16414: FOR_TO
16415: IFFALSE 16482
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16417: LD_VAR 0 1
16421: PPUSH
16422: LD_EXP 59
16426: PUSH
16427: LD_VAR 0 2
16431: ARRAY
16432: PUSH
16433: LD_VAR 0 3
16437: ARRAY
16438: PUSH
16439: LD_INT 1
16441: ARRAY
16442: PPUSH
16443: LD_EXP 59
16447: PUSH
16448: LD_VAR 0 2
16452: ARRAY
16453: PUSH
16454: LD_VAR 0 3
16458: ARRAY
16459: PUSH
16460: LD_INT 2
16462: ARRAY
16463: PPUSH
16464: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16468: LD_VAR 0 1
16472: PPUSH
16473: LD_INT 70
16475: PPUSH
16476: CALL_OW 202
// end ;
16480: GO 16414
16482: POP
16483: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16484: LD_VAR 0 1
16488: PPUSH
16489: CALL_OW 256
16493: PUSH
16494: LD_INT 700
16496: LESS
16497: PUSH
16498: LD_VAR 0 1
16502: PPUSH
16503: LD_INT 13
16505: PPUSH
16506: CALL_OW 308
16510: NOT
16511: AND
16512: IFFALSE 16564
// begin ComMoveToArea ( un , retreatArea ) ;
16514: LD_VAR 0 1
16518: PPUSH
16519: LD_INT 13
16521: PPUSH
16522: CALL_OW 113
// if not ru_alert_xy then
16526: LD_EXP 61
16530: NOT
16531: IFFALSE 16562
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16533: LD_ADDR_EXP 61
16537: PUSH
16538: LD_VAR 0 1
16542: PPUSH
16543: CALL_OW 250
16547: PUSH
16548: LD_VAR 0 1
16552: PPUSH
16553: CALL_OW 251
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: ST_TO_ADDR
// end else
16562: GO 16633
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16564: LD_VAR 0 1
16568: PPUSH
16569: LD_VAR 0 4
16573: PPUSH
16574: LD_VAR 0 1
16578: PPUSH
16579: CALL_OW 74
16583: PPUSH
16584: CALL_OW 296
16588: PUSH
16589: LD_INT 9
16591: LESS
16592: PUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 256
16602: PUSH
16603: LD_INT 500
16605: GREATER
16606: AND
16607: IFFALSE 16633
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
16609: LD_VAR 0 1
16613: PPUSH
16614: LD_VAR 0 4
16618: PPUSH
16619: LD_VAR 0 1
16623: PPUSH
16624: CALL_OW 74
16628: PPUSH
16629: CALL_OW 115
// end ;
16633: GO 16234
16635: POP
16636: POP
// end ;
16637: PPOPN 4
16639: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
16640: LD_EXP 60
16644: PUSH
16645: LD_EXP 61
16649: AND
16650: PUSH
16651: LD_EXP 31
16655: NOT
16656: AND
16657: PUSH
16658: LD_EXP 32
16662: NOT
16663: AND
16664: IFFALSE 16874
16666: GO 16668
16668: DISABLE
16669: LD_INT 0
16671: PPUSH
16672: PPUSH
// begin enable ;
16673: ENABLE
// if not ru_vehicles then
16674: LD_EXP 56
16678: NOT
16679: IFFALSE 16683
// exit ;
16681: GO 16874
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16683: LD_ADDR_VAR 0 2
16687: PUSH
16688: LD_INT 81
16690: PUSH
16691: LD_INT 3
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PPUSH
16698: CALL_OW 69
16702: ST_TO_ADDR
// if ru_vehicles then
16703: LD_EXP 56
16707: IFFALSE 16874
// begin for i in ru_vehicles do
16709: LD_ADDR_VAR 0 1
16713: PUSH
16714: LD_EXP 56
16718: PUSH
16719: FOR_IN
16720: IFFALSE 16872
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
16722: LD_VAR 0 1
16726: PPUSH
16727: CALL_OW 302
16731: PUSH
16732: LD_VAR 0 1
16736: PPUSH
16737: LD_VAR 0 2
16741: PPUSH
16742: LD_VAR 0 1
16746: PPUSH
16747: CALL_OW 74
16751: PPUSH
16752: CALL_OW 296
16756: PUSH
16757: LD_INT 9
16759: LESS
16760: AND
16761: IFFALSE 16787
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
16763: LD_VAR 0 1
16767: PPUSH
16768: LD_VAR 0 2
16772: PPUSH
16773: LD_VAR 0 1
16777: PPUSH
16778: CALL_OW 74
16782: PPUSH
16783: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
16787: LD_VAR 0 1
16791: PPUSH
16792: CALL_OW 314
16796: NOT
16797: PUSH
16798: LD_VAR 0 1
16802: PPUSH
16803: CALL_OW 302
16807: AND
16808: PUSH
16809: LD_VAR 0 1
16813: PPUSH
16814: LD_EXP 61
16818: PUSH
16819: LD_INT 1
16821: ARRAY
16822: PPUSH
16823: LD_EXP 61
16827: PUSH
16828: LD_INT 2
16830: ARRAY
16831: PPUSH
16832: CALL_OW 297
16836: PUSH
16837: LD_INT 10
16839: GREATER
16840: AND
16841: IFFALSE 16870
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
16843: LD_VAR 0 1
16847: PPUSH
16848: LD_EXP 61
16852: PUSH
16853: LD_INT 1
16855: ARRAY
16856: PPUSH
16857: LD_EXP 61
16861: PUSH
16862: LD_INT 2
16864: ARRAY
16865: PPUSH
16866: CALL_OW 114
// end ;
16870: GO 16719
16872: POP
16873: POP
// end ; end ;
16874: PPOPN 2
16876: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
16877: LD_EXP 61
16881: PUSH
16882: LD_EXP 60
16886: AND
16887: PUSH
16888: LD_INT 3
16890: PPUSH
16891: CALL_OW 463
16895: NOT
16896: AND
16897: PUSH
16898: LD_EXP 31
16902: NOT
16903: AND
16904: PUSH
16905: LD_EXP 32
16909: NOT
16910: AND
16911: IFFALSE 17006
16913: GO 16915
16915: DISABLE
16916: LD_INT 0
16918: PPUSH
// begin enable ;
16919: ENABLE
// ru_alert_xy := false ;
16920: LD_ADDR_EXP 61
16924: PUSH
16925: LD_INT 0
16927: ST_TO_ADDR
// ru_alert := false ;
16928: LD_ADDR_EXP 60
16932: PUSH
16933: LD_INT 0
16935: ST_TO_ADDR
// if ru_vehicles then
16936: LD_EXP 56
16940: IFFALSE 17006
// for i in ru_vehicles do
16942: LD_ADDR_VAR 0 1
16946: PUSH
16947: LD_EXP 56
16951: PUSH
16952: FOR_IN
16953: IFFALSE 17004
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
16955: LD_VAR 0 1
16959: PPUSH
16960: CALL_OW 302
16964: PUSH
16965: LD_VAR 0 1
16969: PPUSH
16970: LD_INT 89
16972: PPUSH
16973: LD_INT 36
16975: PPUSH
16976: CALL_OW 297
16980: PUSH
16981: LD_INT 10
16983: GREATER
16984: AND
16985: IFFALSE 17002
// ComMoveXY ( i , 89 , 36 ) ;
16987: LD_VAR 0 1
16991: PPUSH
16992: LD_INT 89
16994: PPUSH
16995: LD_INT 36
16997: PPUSH
16998: CALL_OW 111
17002: GO 16952
17004: POP
17005: POP
// end ;
17006: PPOPN 1
17008: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
17009: LD_EXP 55
17013: PUSH
17014: LD_EXP 31
17018: NOT
17019: AND
17020: PUSH
17021: LD_EXP 32
17025: NOT
17026: AND
17027: IFFALSE 17311
17029: GO 17031
17031: DISABLE
17032: LD_INT 0
17034: PPUSH
17035: PPUSH
17036: PPUSH
// begin enable ;
17037: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17038: LD_ADDR_VAR 0 3
17042: PUSH
17043: LD_INT 81
17045: PUSH
17046: LD_INT 3
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PPUSH
17053: CALL_OW 69
17057: ST_TO_ADDR
// for i = 1 to ru_forest do
17058: LD_ADDR_VAR 0 1
17062: PUSH
17063: DOUBLE
17064: LD_INT 1
17066: DEC
17067: ST_TO_ADDR
17068: LD_EXP 55
17072: PUSH
17073: FOR_TO
17074: IFFALSE 17309
// begin un := ru_forest [ i ] ;
17076: LD_ADDR_VAR 0 2
17080: PUSH
17081: LD_EXP 55
17085: PUSH
17086: LD_VAR 0 1
17090: ARRAY
17091: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17092: LD_VAR 0 2
17096: PPUSH
17097: LD_INT 13
17099: PPUSH
17100: CALL_OW 308
17104: IFFALSE 17194
// begin if not See ( 1 , un ) then
17106: LD_INT 1
17108: PPUSH
17109: LD_VAR 0 2
17113: PPUSH
17114: CALL_OW 292
17118: NOT
17119: IFFALSE 17133
// SetLives ( un , 1000 ) ;
17121: LD_VAR 0 2
17125: PPUSH
17126: LD_INT 1000
17128: PPUSH
17129: CALL_OW 234
// ru_forest := ru_forest diff un ;
17133: LD_ADDR_EXP 55
17137: PUSH
17138: LD_EXP 55
17142: PUSH
17143: LD_VAR 0 2
17147: DIFF
17148: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17149: LD_VAR 0 2
17153: PPUSH
17154: LD_INT 22
17156: PUSH
17157: LD_INT 3
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 30
17166: PUSH
17167: LD_INT 4
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PPUSH
17178: CALL_OW 69
17182: PPUSH
17183: CALL 1007 0 1
17187: PPUSH
17188: CALL_OW 120
// continue ;
17192: GO 17073
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17194: LD_VAR 0 2
17198: PPUSH
17199: CALL_OW 256
17203: PUSH
17204: LD_INT 700
17206: LESS
17207: PUSH
17208: LD_VAR 0 2
17212: PPUSH
17213: LD_INT 13
17215: PPUSH
17216: CALL_OW 308
17220: NOT
17221: AND
17222: IFFALSE 17238
// ComMoveToArea ( un , retreatArea ) else
17224: LD_VAR 0 2
17228: PPUSH
17229: LD_INT 13
17231: PPUSH
17232: CALL_OW 113
17236: GO 17307
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17238: LD_VAR 0 2
17242: PPUSH
17243: LD_VAR 0 3
17247: PPUSH
17248: LD_VAR 0 2
17252: PPUSH
17253: CALL_OW 74
17257: PPUSH
17258: CALL_OW 296
17262: PUSH
17263: LD_INT 9
17265: LESS
17266: PUSH
17267: LD_VAR 0 2
17271: PPUSH
17272: CALL_OW 256
17276: PUSH
17277: LD_INT 500
17279: GREATER
17280: AND
17281: IFFALSE 17307
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17283: LD_VAR 0 2
17287: PPUSH
17288: LD_VAR 0 3
17292: PPUSH
17293: LD_VAR 0 2
17297: PPUSH
17298: CALL_OW 74
17302: PPUSH
17303: CALL_OW 115
// end ;
17307: GO 17073
17309: POP
17310: POP
// end ;
17311: PPOPN 3
17313: END
// every 0 0$10 trigger not send_attack_on_cornel do var i , filter ;
17314: LD_EXP 32
17318: NOT
17319: IFFALSE 17440
17321: GO 17323
17323: DISABLE
17324: LD_INT 0
17326: PPUSH
17327: PPUSH
// begin enable ;
17328: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
17329: LD_ADDR_VAR 0 2
17333: PUSH
17334: LD_INT 22
17336: PUSH
17337: LD_INT 3
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 21
17346: PUSH
17347: LD_INT 3
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PPUSH
17358: CALL_OW 69
17362: ST_TO_ADDR
// if filter then
17363: LD_VAR 0 2
17367: IFFALSE 17440
// for i in filter do
17369: LD_ADDR_VAR 0 1
17373: PUSH
17374: LD_VAR 0 2
17378: PUSH
17379: FOR_IN
17380: IFFALSE 17438
// if GetLives ( i ) < 990 then
17382: LD_VAR 0 1
17386: PPUSH
17387: CALL_OW 256
17391: PUSH
17392: LD_INT 990
17394: LESS
17395: IFFALSE 17436
// begin ru_alert := true ;
17397: LD_ADDR_EXP 60
17401: PUSH
17402: LD_INT 1
17404: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17405: LD_ADDR_EXP 61
17409: PUSH
17410: LD_VAR 0 1
17414: PPUSH
17415: CALL_OW 250
17419: PUSH
17420: LD_VAR 0 1
17424: PPUSH
17425: CALL_OW 251
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: ST_TO_ADDR
// break ;
17434: GO 17438
// end ;
17436: GO 17379
17438: POP
17439: POP
// end ;
17440: PPOPN 2
17442: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17443: LD_EXP 31
17447: IFFALSE 17596
17449: GO 17451
17451: DISABLE
17452: LD_INT 0
17454: PPUSH
17455: PPUSH
17456: PPUSH
17457: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17458: LD_ADDR_VAR 0 4
17462: PUSH
17463: LD_EXP 56
17467: PUSH
17468: LD_EXP 55
17472: ADD
17473: PUSH
17474: LD_EXP 53
17478: ADD
17479: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17480: LD_ADDR_VAR 0 3
17484: PUSH
17485: LD_INT 3
17487: PPUSH
17488: LD_INT 81
17490: PUSH
17491: LD_INT 3
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PPUSH
17498: CALL_OW 70
17502: ST_TO_ADDR
// if filter and enemy then
17503: LD_VAR 0 4
17507: PUSH
17508: LD_VAR 0 3
17512: AND
17513: IFFALSE 17596
// repeat wait ( 0 0$01 ) ;
17515: LD_INT 35
17517: PPUSH
17518: CALL_OW 67
// for i in filter do
17522: LD_ADDR_VAR 0 1
17526: PUSH
17527: LD_VAR 0 4
17531: PUSH
17532: FOR_IN
17533: IFFALSE 17561
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17535: LD_VAR 0 1
17539: PPUSH
17540: LD_VAR 0 3
17544: PPUSH
17545: LD_VAR 0 1
17549: PPUSH
17550: CALL_OW 74
17554: PPUSH
17555: CALL_OW 115
// end ;
17559: GO 17532
17561: POP
17562: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
17563: LD_INT 3
17565: PPUSH
17566: LD_INT 81
17568: PUSH
17569: LD_INT 3
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PPUSH
17576: CALL_OW 70
17580: PUSH
17581: LD_INT 0
17583: EQUAL
17584: PUSH
17585: LD_VAR 0 4
17589: PUSH
17590: LD_INT 0
17592: EQUAL
17593: OR
17594: IFFALSE 17515
// end ;
17596: PPOPN 4
17598: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
17599: LD_EXP 26
17603: PUSH
17604: LD_INT 22
17606: PUSH
17607: LD_INT 4
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 30
17616: PUSH
17617: LD_INT 4
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 3
17626: PUSH
17627: LD_INT 57
17629: PUSH
17630: EMPTY
17631: LIST
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: LIST
17641: PPUSH
17642: CALL_OW 69
17646: AND
17647: IFFALSE 17696
17649: GO 17651
17651: DISABLE
17652: LD_INT 0
17654: PPUSH
// begin if not ru_cornel_attack then
17655: LD_EXP 58
17659: NOT
17660: IFFALSE 17664
// exit ;
17662: GO 17696
// for i in ru_cornel_attack do
17664: LD_ADDR_VAR 0 1
17668: PUSH
17669: LD_EXP 58
17673: PUSH
17674: FOR_IN
17675: IFFALSE 17694
// ComAgressiveMove ( i , 258 , 119 ) ;
17677: LD_VAR 0 1
17681: PPUSH
17682: LD_INT 258
17684: PPUSH
17685: LD_INT 119
17687: PPUSH
17688: CALL_OW 114
17692: GO 17674
17694: POP
17695: POP
// end ; end_of_file
17696: PPOPN 1
17698: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
17699: LD_EXP 5
17703: PUSH
17704: LD_EXP 9
17708: NOT
17709: AND
17710: PUSH
17711: LD_EXP 20
17715: AND
17716: IFFALSE 17828
17718: GO 17720
17720: DISABLE
17721: LD_INT 0
17723: PPUSH
// begin enable ;
17724: ENABLE
// crates_counter := crates_counter - 50 ;
17725: LD_ADDR_EXP 20
17729: PUSH
17730: LD_EXP 20
17734: PUSH
17735: LD_INT 50
17737: MINUS
17738: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
17739: LD_INT 8
17741: PPUSH
17742: LD_INT 2
17744: PPUSH
17745: LD_INT 5
17747: PPUSH
17748: CALL_OW 12
17752: PPUSH
17753: LD_INT 1
17755: PPUSH
17756: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
17760: LD_INT 1785
17762: PPUSH
17763: LD_INT 2345
17765: PPUSH
17766: CALL_OW 12
17770: PPUSH
17771: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
17775: LD_ADDR_VAR 0 1
17779: PUSH
17780: LD_INT 1
17782: PPUSH
17783: LD_OWVAR 67
17787: PUSH
17788: LD_INT 2
17790: PLUS
17791: PPUSH
17792: CALL_OW 12
17796: ST_TO_ADDR
// if r < 3 then
17797: LD_VAR 0 1
17801: PUSH
17802: LD_INT 3
17804: LESS
17805: IFFALSE 17828
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
17807: LD_INT 4
17809: PPUSH
17810: LD_INT 1
17812: PPUSH
17813: LD_INT 5
17815: PPUSH
17816: CALL_OW 12
17820: PPUSH
17821: LD_INT 1
17823: PPUSH
17824: CALL_OW 55
// end ;
17828: PPOPN 1
17830: END
// every 0 0$01 trigger cornel_active do
17831: LD_EXP 8
17835: IFFALSE 17924
17837: GO 17839
17839: DISABLE
// begin Wait ( 0 0$03 ) ;
17840: LD_INT 105
17842: PPUSH
17843: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17847: LD_INT 2
17849: PPUSH
17850: LD_INT 5
17852: PPUSH
17853: CALL_OW 12
17857: PPUSH
17858: LD_INT 10
17860: PPUSH
17861: LD_INT 1
17863: PPUSH
17864: CALL_OW 55
// Wait ( 0 0$13 ) ;
17868: LD_INT 455
17870: PPUSH
17871: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17875: LD_INT 2
17877: PPUSH
17878: LD_INT 5
17880: PPUSH
17881: CALL_OW 12
17885: PPUSH
17886: LD_INT 10
17888: PPUSH
17889: LD_INT 1
17891: PPUSH
17892: CALL_OW 55
// Wait ( 0 0$16 ) ;
17896: LD_INT 560
17898: PPUSH
17899: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17903: LD_INT 2
17905: PPUSH
17906: LD_INT 5
17908: PPUSH
17909: CALL_OW 12
17913: PPUSH
17914: LD_INT 10
17916: PPUSH
17917: LD_INT 1
17919: PPUSH
17920: CALL_OW 55
// end ; end_of_file
17924: END
// every 0 0$01 trigger cornel_prepared do
17925: LD_EXP 11
17929: IFFALSE 17988
17931: GO 17933
17933: DISABLE
// begin enable ;
17934: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
17935: LD_ADDR_OWVAR 47
17939: PUSH
17940: LD_STRING #Am03-1
17942: PUSH
17943: LD_EXP 10
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
17952: LD_ADDR_EXP 10
17956: PUSH
17957: LD_EXP 10
17961: PPUSH
17962: LD_STRING -
17964: PPUSH
17965: CALL 1077 0 2
17969: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
17970: LD_EXP 10
17974: PUSH
17975: LD_INT 0
17977: EQUAL
17978: IFFALSE 17988
// begin Display_Strings := [ ] ;
17980: LD_ADDR_OWVAR 47
17984: PUSH
17985: EMPTY
17986: ST_TO_ADDR
// disable ;
17987: DISABLE
// end ; end ;
17988: END
// every 0 0$01 trigger debug and debug_strings do
17989: LD_EXP 1
17993: PUSH
17994: LD_OWVAR 48
17998: AND
17999: IFFALSE 18015
18001: GO 18003
18003: DISABLE
// begin enable ;
18004: ENABLE
// Display_Strings := debug_strings ;
18005: LD_ADDR_OWVAR 47
18009: PUSH
18010: LD_OWVAR 48
18014: ST_TO_ADDR
// end ; end_of_file
18015: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
18016: LD_VAR 0 1
18020: PPUSH
18021: LD_VAR 0 2
18025: PPUSH
18026: CALL 34463 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
18030: LD_VAR 0 1
18034: PPUSH
18035: CALL_OW 255
18039: PUSH
18040: LD_INT 1
18042: EQUAL
18043: PUSH
18044: LD_EXP 14
18048: NOT
18049: AND
18050: IFFALSE 18060
// solar_builded := true ;
18052: LD_ADDR_EXP 14
18056: PUSH
18057: LD_INT 1
18059: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18060: LD_VAR 0 1
18064: PPUSH
18065: CALL_OW 255
18069: PUSH
18070: LD_INT 1
18072: EQUAL
18073: PUSH
18074: LD_EXP 29
18078: AND
18079: IFFALSE 18116
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
18081: LD_ADDR_EXP 29
18085: PUSH
18086: LD_EXP 29
18090: PUSH
18091: LD_INT 1750
18093: PUSH
18094: LD_INT 1400
18096: PUSH
18097: LD_INT 1225
18099: PUSH
18100: LD_INT 1050
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: PUSH
18109: LD_OWVAR 67
18113: ARRAY
18114: PLUS
18115: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18116: LD_VAR 0 1
18120: PPUSH
18121: CALL_OW 255
18125: PUSH
18126: LD_INT 3
18128: EQUAL
18129: IFFALSE 18147
// ru_vehicles := ru_vehicles ^ veh ;
18131: LD_ADDR_EXP 56
18135: PUSH
18136: LD_EXP 56
18140: PUSH
18141: LD_VAR 0 1
18145: ADD
18146: ST_TO_ADDR
// end ;
18147: PPOPN 2
18149: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18150: LD_VAR 0 1
18154: PPUSH
18155: CALL 34343 0 1
// if un in ru_patrol then
18159: LD_VAR 0 1
18163: PUSH
18164: LD_EXP 53
18168: IN
18169: IFFALSE 18187
// ru_patrol := ru_patrol diff un ;
18171: LD_ADDR_EXP 53
18175: PUSH
18176: LD_EXP 53
18180: PUSH
18181: LD_VAR 0 1
18185: DIFF
18186: ST_TO_ADDR
// if un in ru_forest then
18187: LD_VAR 0 1
18191: PUSH
18192: LD_EXP 55
18196: IN
18197: IFFALSE 18215
// ru_forest := ru_forest diff un ;
18199: LD_ADDR_EXP 55
18203: PUSH
18204: LD_EXP 55
18208: PUSH
18209: LD_VAR 0 1
18213: DIFF
18214: ST_TO_ADDR
// if un in ru_vehicles then
18215: LD_VAR 0 1
18219: PUSH
18220: LD_EXP 56
18224: IN
18225: IFFALSE 18331
// begin ru_vehicles := ru_vehicles diff un ;
18227: LD_ADDR_EXP 56
18231: PUSH
18232: LD_EXP 56
18236: PUSH
18237: LD_VAR 0 1
18241: DIFF
18242: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18243: LD_ADDR_EXP 57
18247: PUSH
18248: LD_EXP 57
18252: PUSH
18253: LD_VAR 0 1
18257: PPUSH
18258: CALL_OW 265
18262: PUSH
18263: LD_VAR 0 1
18267: PPUSH
18268: CALL_OW 262
18272: PUSH
18273: LD_VAR 0 1
18277: PPUSH
18278: CALL_OW 263
18282: PUSH
18283: LD_VAR 0 1
18287: PPUSH
18288: CALL_OW 264
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: ADD
18299: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18300: LD_ADDR_EXP 13
18304: PUSH
18305: LD_EXP 13
18309: PUSH
18310: LD_INT 1
18312: PLUS
18313: ST_TO_ADDR
// if ach_counter = 10 then
18314: LD_EXP 13
18318: PUSH
18319: LD_INT 10
18321: EQUAL
18322: IFFALSE 18331
// SetAchievement ( ACH_FAUST ) ;
18324: LD_STRING ACH_FAUST
18326: PPUSH
18327: CALL_OW 543
// end ; if un = Pokryshkin then
18331: LD_VAR 0 1
18335: PUSH
18336: LD_EXP 52
18340: EQUAL
18341: IFFALSE 18350
// SetAchievement ( ACH_POKR ) ;
18343: LD_STRING ACH_POKR
18345: PPUSH
18346: CALL_OW 543
// if un = JMM then
18350: LD_VAR 0 1
18354: PUSH
18355: LD_EXP 37
18359: EQUAL
18360: IFFALSE 18369
// YouLost ( 0 ) ;
18362: LD_STRING 0
18364: PPUSH
18365: CALL_OW 104
// if un = us_dep_west then
18369: LD_VAR 0 1
18373: PUSH
18374: LD_INT 1
18376: EQUAL
18377: IFFALSE 18386
// YouLost ( 2 ) ;
18379: LD_STRING 2
18381: PPUSH
18382: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18386: LD_VAR 0 1
18390: PPUSH
18391: CALL_OW 255
18395: PUSH
18396: LD_INT 8
18398: EQUAL
18399: PUSH
18400: LD_EXP 5
18404: NOT
18405: AND
18406: IFFALSE 18415
// YouLost ( 4 ) ;
18408: LD_STRING 4
18410: PPUSH
18411: CALL_OW 104
// if un in jmm_units then
18415: LD_VAR 0 1
18419: PUSH
18420: LD_EXP 4
18424: IN
18425: IFFALSE 18441
// lose_counter := lose_counter + 1 ;
18427: LD_ADDR_EXP 34
18431: PUSH
18432: LD_EXP 34
18436: PUSH
18437: LD_INT 1
18439: PLUS
18440: ST_TO_ADDR
// end ;
18441: PPOPN 1
18443: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18444: LD_INT 0
18446: PPUSH
18447: PPUSH
// begin if GetSide ( driver ) = 3 then
18448: LD_VAR 0 1
18452: PPUSH
18453: CALL_OW 255
18457: PUSH
18458: LD_INT 3
18460: EQUAL
18461: IFFALSE 18539
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18463: LD_ADDR_VAR 0 6
18467: PUSH
18468: LD_INT 22
18470: PUSH
18471: LD_INT 3
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 30
18480: PUSH
18481: LD_INT 3
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PPUSH
18492: CALL_OW 69
18496: PPUSH
18497: CALL 1007 0 1
18501: ST_TO_ADDR
// if place then
18502: LD_VAR 0 6
18506: IFFALSE 18524
// ComEnterUnit ( driver , place ) else
18508: LD_VAR 0 1
18512: PPUSH
18513: LD_VAR 0 6
18517: PPUSH
18518: CALL_OW 120
18522: GO 18539
// ComMoveXY ( driver , 70 , 22 ) ;
18524: LD_VAR 0 1
18528: PPUSH
18529: LD_INT 70
18531: PPUSH
18532: LD_INT 22
18534: PPUSH
18535: CALL_OW 111
// end ; end ;
18539: PPOPN 6
18541: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
18542: LD_VAR 0 1
18546: PUSH
18547: LD_INT 1
18549: EQUAL
18550: PUSH
18551: LD_VAR 0 2
18555: PUSH
18556: LD_INT 4
18558: EQUAL
18559: PUSH
18560: LD_VAR 0 2
18564: PUSH
18565: LD_INT 8
18567: EQUAL
18568: PUSH
18569: LD_EXP 5
18573: NOT
18574: AND
18575: OR
18576: AND
18577: IFFALSE 18586
// YouLost ( 5 ) ;
18579: LD_STRING 5
18581: PPUSH
18582: CALL_OW 104
// end ;
18586: PPOPN 2
18588: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
18589: LD_EXP 36
18593: PUSH
18594: LD_INT 22
18596: PUSH
18597: LD_INT 1
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 21
18606: PUSH
18607: LD_INT 1
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PPUSH
18618: CALL_OW 69
18622: PUSH
18623: LD_INT 22
18625: PUSH
18626: LD_INT 8
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 21
18635: PUSH
18636: LD_INT 1
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PPUSH
18647: CALL_OW 69
18651: ADD
18652: PLUS
18653: PUSH
18654: LD_INT 5
18656: LESS
18657: IFFALSE 18669
18659: GO 18661
18661: DISABLE
// YouLost ( 1 ) ;
18662: LD_STRING 1
18664: PPUSH
18665: CALL_OW 104
18669: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
18670: LD_INT 1
18672: PPUSH
18673: CALL_OW 255
18677: PUSH
18678: LD_INT 3
18680: EQUAL
18681: IFFALSE 18693
18683: GO 18685
18685: DISABLE
// YouLost ( 3 ) ; end_of_file end_of_file
18686: LD_STRING 3
18688: PPUSH
18689: CALL_OW 104
18693: END
// every 0 0$1 do
18694: GO 18696
18696: DISABLE
// begin enable ;
18697: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18698: LD_STRING updateTimer(
18700: PUSH
18701: LD_OWVAR 1
18705: STR
18706: PUSH
18707: LD_STRING );
18709: STR
18710: PPUSH
18711: CALL_OW 559
// end ;
18715: END
// export function SOS_MapStart ( ) ; begin
18716: LD_INT 0
18718: PPUSH
// if streamModeActive then
18719: LD_EXP 62
18723: IFFALSE 18732
// DefineStreamItems ( true ) ;
18725: LD_INT 1
18727: PPUSH
18728: CALL 20386 0 1
// UpdateFactoryWaypoints ( ) ;
18732: CALL 33247 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18736: CALL 33504 0 0
// end ;
18740: LD_VAR 0 1
18744: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18745: LD_INT 0
18747: PPUSH
// if p2 = 100 then
18748: LD_VAR 0 2
18752: PUSH
18753: LD_INT 100
18755: EQUAL
18756: IFFALSE 19759
// begin if not StreamModeActive then
18758: LD_EXP 62
18762: NOT
18763: IFFALSE 18773
// StreamModeActive := true ;
18765: LD_ADDR_EXP 62
18769: PUSH
18770: LD_INT 1
18772: ST_TO_ADDR
// if p3 = 0 then
18773: LD_VAR 0 3
18777: PUSH
18778: LD_INT 0
18780: EQUAL
18781: IFFALSE 18787
// InitStreamMode ;
18783: CALL 19922 0 0
// if p3 = 1 then
18787: LD_VAR 0 3
18791: PUSH
18792: LD_INT 1
18794: EQUAL
18795: IFFALSE 18805
// sRocket := true ;
18797: LD_ADDR_EXP 67
18801: PUSH
18802: LD_INT 1
18804: ST_TO_ADDR
// if p3 = 2 then
18805: LD_VAR 0 3
18809: PUSH
18810: LD_INT 2
18812: EQUAL
18813: IFFALSE 18823
// sSpeed := true ;
18815: LD_ADDR_EXP 66
18819: PUSH
18820: LD_INT 1
18822: ST_TO_ADDR
// if p3 = 3 then
18823: LD_VAR 0 3
18827: PUSH
18828: LD_INT 3
18830: EQUAL
18831: IFFALSE 18841
// sEngine := true ;
18833: LD_ADDR_EXP 68
18837: PUSH
18838: LD_INT 1
18840: ST_TO_ADDR
// if p3 = 4 then
18841: LD_VAR 0 3
18845: PUSH
18846: LD_INT 4
18848: EQUAL
18849: IFFALSE 18859
// sSpec := true ;
18851: LD_ADDR_EXP 65
18855: PUSH
18856: LD_INT 1
18858: ST_TO_ADDR
// if p3 = 5 then
18859: LD_VAR 0 3
18863: PUSH
18864: LD_INT 5
18866: EQUAL
18867: IFFALSE 18877
// sLevel := true ;
18869: LD_ADDR_EXP 69
18873: PUSH
18874: LD_INT 1
18876: ST_TO_ADDR
// if p3 = 6 then
18877: LD_VAR 0 3
18881: PUSH
18882: LD_INT 6
18884: EQUAL
18885: IFFALSE 18895
// sArmoury := true ;
18887: LD_ADDR_EXP 70
18891: PUSH
18892: LD_INT 1
18894: ST_TO_ADDR
// if p3 = 7 then
18895: LD_VAR 0 3
18899: PUSH
18900: LD_INT 7
18902: EQUAL
18903: IFFALSE 18913
// sRadar := true ;
18905: LD_ADDR_EXP 71
18909: PUSH
18910: LD_INT 1
18912: ST_TO_ADDR
// if p3 = 8 then
18913: LD_VAR 0 3
18917: PUSH
18918: LD_INT 8
18920: EQUAL
18921: IFFALSE 18931
// sBunker := true ;
18923: LD_ADDR_EXP 72
18927: PUSH
18928: LD_INT 1
18930: ST_TO_ADDR
// if p3 = 9 then
18931: LD_VAR 0 3
18935: PUSH
18936: LD_INT 9
18938: EQUAL
18939: IFFALSE 18949
// sHack := true ;
18941: LD_ADDR_EXP 73
18945: PUSH
18946: LD_INT 1
18948: ST_TO_ADDR
// if p3 = 10 then
18949: LD_VAR 0 3
18953: PUSH
18954: LD_INT 10
18956: EQUAL
18957: IFFALSE 18967
// sFire := true ;
18959: LD_ADDR_EXP 74
18963: PUSH
18964: LD_INT 1
18966: ST_TO_ADDR
// if p3 = 11 then
18967: LD_VAR 0 3
18971: PUSH
18972: LD_INT 11
18974: EQUAL
18975: IFFALSE 18985
// sRefresh := true ;
18977: LD_ADDR_EXP 75
18981: PUSH
18982: LD_INT 1
18984: ST_TO_ADDR
// if p3 = 12 then
18985: LD_VAR 0 3
18989: PUSH
18990: LD_INT 12
18992: EQUAL
18993: IFFALSE 19003
// sExp := true ;
18995: LD_ADDR_EXP 76
18999: PUSH
19000: LD_INT 1
19002: ST_TO_ADDR
// if p3 = 13 then
19003: LD_VAR 0 3
19007: PUSH
19008: LD_INT 13
19010: EQUAL
19011: IFFALSE 19021
// sDepot := true ;
19013: LD_ADDR_EXP 77
19017: PUSH
19018: LD_INT 1
19020: ST_TO_ADDR
// if p3 = 14 then
19021: LD_VAR 0 3
19025: PUSH
19026: LD_INT 14
19028: EQUAL
19029: IFFALSE 19039
// sFlag := true ;
19031: LD_ADDR_EXP 78
19035: PUSH
19036: LD_INT 1
19038: ST_TO_ADDR
// if p3 = 15 then
19039: LD_VAR 0 3
19043: PUSH
19044: LD_INT 15
19046: EQUAL
19047: IFFALSE 19057
// sKamikadze := true ;
19049: LD_ADDR_EXP 86
19053: PUSH
19054: LD_INT 1
19056: ST_TO_ADDR
// if p3 = 16 then
19057: LD_VAR 0 3
19061: PUSH
19062: LD_INT 16
19064: EQUAL
19065: IFFALSE 19075
// sTroll := true ;
19067: LD_ADDR_EXP 87
19071: PUSH
19072: LD_INT 1
19074: ST_TO_ADDR
// if p3 = 17 then
19075: LD_VAR 0 3
19079: PUSH
19080: LD_INT 17
19082: EQUAL
19083: IFFALSE 19093
// sSlow := true ;
19085: LD_ADDR_EXP 88
19089: PUSH
19090: LD_INT 1
19092: ST_TO_ADDR
// if p3 = 18 then
19093: LD_VAR 0 3
19097: PUSH
19098: LD_INT 18
19100: EQUAL
19101: IFFALSE 19111
// sLack := true ;
19103: LD_ADDR_EXP 89
19107: PUSH
19108: LD_INT 1
19110: ST_TO_ADDR
// if p3 = 19 then
19111: LD_VAR 0 3
19115: PUSH
19116: LD_INT 19
19118: EQUAL
19119: IFFALSE 19129
// sTank := true ;
19121: LD_ADDR_EXP 91
19125: PUSH
19126: LD_INT 1
19128: ST_TO_ADDR
// if p3 = 20 then
19129: LD_VAR 0 3
19133: PUSH
19134: LD_INT 20
19136: EQUAL
19137: IFFALSE 19147
// sRemote := true ;
19139: LD_ADDR_EXP 92
19143: PUSH
19144: LD_INT 1
19146: ST_TO_ADDR
// if p3 = 21 then
19147: LD_VAR 0 3
19151: PUSH
19152: LD_INT 21
19154: EQUAL
19155: IFFALSE 19165
// sPowell := true ;
19157: LD_ADDR_EXP 93
19161: PUSH
19162: LD_INT 1
19164: ST_TO_ADDR
// if p3 = 22 then
19165: LD_VAR 0 3
19169: PUSH
19170: LD_INT 22
19172: EQUAL
19173: IFFALSE 19183
// sTeleport := true ;
19175: LD_ADDR_EXP 96
19179: PUSH
19180: LD_INT 1
19182: ST_TO_ADDR
// if p3 = 23 then
19183: LD_VAR 0 3
19187: PUSH
19188: LD_INT 23
19190: EQUAL
19191: IFFALSE 19201
// sOilTower := true ;
19193: LD_ADDR_EXP 98
19197: PUSH
19198: LD_INT 1
19200: ST_TO_ADDR
// if p3 = 24 then
19201: LD_VAR 0 3
19205: PUSH
19206: LD_INT 24
19208: EQUAL
19209: IFFALSE 19219
// sShovel := true ;
19211: LD_ADDR_EXP 99
19215: PUSH
19216: LD_INT 1
19218: ST_TO_ADDR
// if p3 = 25 then
19219: LD_VAR 0 3
19223: PUSH
19224: LD_INT 25
19226: EQUAL
19227: IFFALSE 19237
// sSheik := true ;
19229: LD_ADDR_EXP 100
19233: PUSH
19234: LD_INT 1
19236: ST_TO_ADDR
// if p3 = 26 then
19237: LD_VAR 0 3
19241: PUSH
19242: LD_INT 26
19244: EQUAL
19245: IFFALSE 19255
// sEarthquake := true ;
19247: LD_ADDR_EXP 102
19251: PUSH
19252: LD_INT 1
19254: ST_TO_ADDR
// if p3 = 27 then
19255: LD_VAR 0 3
19259: PUSH
19260: LD_INT 27
19262: EQUAL
19263: IFFALSE 19273
// sAI := true ;
19265: LD_ADDR_EXP 103
19269: PUSH
19270: LD_INT 1
19272: ST_TO_ADDR
// if p3 = 28 then
19273: LD_VAR 0 3
19277: PUSH
19278: LD_INT 28
19280: EQUAL
19281: IFFALSE 19291
// sCargo := true ;
19283: LD_ADDR_EXP 106
19287: PUSH
19288: LD_INT 1
19290: ST_TO_ADDR
// if p3 = 29 then
19291: LD_VAR 0 3
19295: PUSH
19296: LD_INT 29
19298: EQUAL
19299: IFFALSE 19309
// sDLaser := true ;
19301: LD_ADDR_EXP 107
19305: PUSH
19306: LD_INT 1
19308: ST_TO_ADDR
// if p3 = 30 then
19309: LD_VAR 0 3
19313: PUSH
19314: LD_INT 30
19316: EQUAL
19317: IFFALSE 19327
// sExchange := true ;
19319: LD_ADDR_EXP 108
19323: PUSH
19324: LD_INT 1
19326: ST_TO_ADDR
// if p3 = 31 then
19327: LD_VAR 0 3
19331: PUSH
19332: LD_INT 31
19334: EQUAL
19335: IFFALSE 19345
// sFac := true ;
19337: LD_ADDR_EXP 109
19341: PUSH
19342: LD_INT 1
19344: ST_TO_ADDR
// if p3 = 32 then
19345: LD_VAR 0 3
19349: PUSH
19350: LD_INT 32
19352: EQUAL
19353: IFFALSE 19363
// sPower := true ;
19355: LD_ADDR_EXP 110
19359: PUSH
19360: LD_INT 1
19362: ST_TO_ADDR
// if p3 = 33 then
19363: LD_VAR 0 3
19367: PUSH
19368: LD_INT 33
19370: EQUAL
19371: IFFALSE 19381
// sRandom := true ;
19373: LD_ADDR_EXP 111
19377: PUSH
19378: LD_INT 1
19380: ST_TO_ADDR
// if p3 = 34 then
19381: LD_VAR 0 3
19385: PUSH
19386: LD_INT 34
19388: EQUAL
19389: IFFALSE 19399
// sShield := true ;
19391: LD_ADDR_EXP 112
19395: PUSH
19396: LD_INT 1
19398: ST_TO_ADDR
// if p3 = 35 then
19399: LD_VAR 0 3
19403: PUSH
19404: LD_INT 35
19406: EQUAL
19407: IFFALSE 19417
// sTime := true ;
19409: LD_ADDR_EXP 113
19413: PUSH
19414: LD_INT 1
19416: ST_TO_ADDR
// if p3 = 36 then
19417: LD_VAR 0 3
19421: PUSH
19422: LD_INT 36
19424: EQUAL
19425: IFFALSE 19435
// sTools := true ;
19427: LD_ADDR_EXP 114
19431: PUSH
19432: LD_INT 1
19434: ST_TO_ADDR
// if p3 = 101 then
19435: LD_VAR 0 3
19439: PUSH
19440: LD_INT 101
19442: EQUAL
19443: IFFALSE 19453
// sSold := true ;
19445: LD_ADDR_EXP 79
19449: PUSH
19450: LD_INT 1
19452: ST_TO_ADDR
// if p3 = 102 then
19453: LD_VAR 0 3
19457: PUSH
19458: LD_INT 102
19460: EQUAL
19461: IFFALSE 19471
// sDiff := true ;
19463: LD_ADDR_EXP 80
19467: PUSH
19468: LD_INT 1
19470: ST_TO_ADDR
// if p3 = 103 then
19471: LD_VAR 0 3
19475: PUSH
19476: LD_INT 103
19478: EQUAL
19479: IFFALSE 19489
// sFog := true ;
19481: LD_ADDR_EXP 83
19485: PUSH
19486: LD_INT 1
19488: ST_TO_ADDR
// if p3 = 104 then
19489: LD_VAR 0 3
19493: PUSH
19494: LD_INT 104
19496: EQUAL
19497: IFFALSE 19507
// sReset := true ;
19499: LD_ADDR_EXP 84
19503: PUSH
19504: LD_INT 1
19506: ST_TO_ADDR
// if p3 = 105 then
19507: LD_VAR 0 3
19511: PUSH
19512: LD_INT 105
19514: EQUAL
19515: IFFALSE 19525
// sSun := true ;
19517: LD_ADDR_EXP 85
19521: PUSH
19522: LD_INT 1
19524: ST_TO_ADDR
// if p3 = 106 then
19525: LD_VAR 0 3
19529: PUSH
19530: LD_INT 106
19532: EQUAL
19533: IFFALSE 19543
// sTiger := true ;
19535: LD_ADDR_EXP 81
19539: PUSH
19540: LD_INT 1
19542: ST_TO_ADDR
// if p3 = 107 then
19543: LD_VAR 0 3
19547: PUSH
19548: LD_INT 107
19550: EQUAL
19551: IFFALSE 19561
// sBomb := true ;
19553: LD_ADDR_EXP 82
19557: PUSH
19558: LD_INT 1
19560: ST_TO_ADDR
// if p3 = 108 then
19561: LD_VAR 0 3
19565: PUSH
19566: LD_INT 108
19568: EQUAL
19569: IFFALSE 19579
// sWound := true ;
19571: LD_ADDR_EXP 90
19575: PUSH
19576: LD_INT 1
19578: ST_TO_ADDR
// if p3 = 109 then
19579: LD_VAR 0 3
19583: PUSH
19584: LD_INT 109
19586: EQUAL
19587: IFFALSE 19597
// sBetray := true ;
19589: LD_ADDR_EXP 94
19593: PUSH
19594: LD_INT 1
19596: ST_TO_ADDR
// if p3 = 110 then
19597: LD_VAR 0 3
19601: PUSH
19602: LD_INT 110
19604: EQUAL
19605: IFFALSE 19615
// sContamin := true ;
19607: LD_ADDR_EXP 95
19611: PUSH
19612: LD_INT 1
19614: ST_TO_ADDR
// if p3 = 111 then
19615: LD_VAR 0 3
19619: PUSH
19620: LD_INT 111
19622: EQUAL
19623: IFFALSE 19633
// sOil := true ;
19625: LD_ADDR_EXP 97
19629: PUSH
19630: LD_INT 1
19632: ST_TO_ADDR
// if p3 = 112 then
19633: LD_VAR 0 3
19637: PUSH
19638: LD_INT 112
19640: EQUAL
19641: IFFALSE 19651
// sStu := true ;
19643: LD_ADDR_EXP 101
19647: PUSH
19648: LD_INT 1
19650: ST_TO_ADDR
// if p3 = 113 then
19651: LD_VAR 0 3
19655: PUSH
19656: LD_INT 113
19658: EQUAL
19659: IFFALSE 19669
// sBazooka := true ;
19661: LD_ADDR_EXP 104
19665: PUSH
19666: LD_INT 1
19668: ST_TO_ADDR
// if p3 = 114 then
19669: LD_VAR 0 3
19673: PUSH
19674: LD_INT 114
19676: EQUAL
19677: IFFALSE 19687
// sMortar := true ;
19679: LD_ADDR_EXP 105
19683: PUSH
19684: LD_INT 1
19686: ST_TO_ADDR
// if p3 = 115 then
19687: LD_VAR 0 3
19691: PUSH
19692: LD_INT 115
19694: EQUAL
19695: IFFALSE 19705
// sRanger := true ;
19697: LD_ADDR_EXP 115
19701: PUSH
19702: LD_INT 1
19704: ST_TO_ADDR
// if p3 = 116 then
19705: LD_VAR 0 3
19709: PUSH
19710: LD_INT 116
19712: EQUAL
19713: IFFALSE 19723
// sComputer := true ;
19715: LD_ADDR_EXP 116
19719: PUSH
19720: LD_INT 1
19722: ST_TO_ADDR
// if p3 = 117 then
19723: LD_VAR 0 3
19727: PUSH
19728: LD_INT 117
19730: EQUAL
19731: IFFALSE 19741
// s30 := true ;
19733: LD_ADDR_EXP 117
19737: PUSH
19738: LD_INT 1
19740: ST_TO_ADDR
// if p3 = 118 then
19741: LD_VAR 0 3
19745: PUSH
19746: LD_INT 118
19748: EQUAL
19749: IFFALSE 19759
// s60 := true ;
19751: LD_ADDR_EXP 118
19755: PUSH
19756: LD_INT 1
19758: ST_TO_ADDR
// end ; if p2 = 101 then
19759: LD_VAR 0 2
19763: PUSH
19764: LD_INT 101
19766: EQUAL
19767: IFFALSE 19895
// begin case p3 of 1 :
19769: LD_VAR 0 3
19773: PUSH
19774: LD_INT 1
19776: DOUBLE
19777: EQUAL
19778: IFTRUE 19782
19780: GO 19789
19782: POP
// hHackUnlimitedResources ; 2 :
19783: CALL 31993 0 0
19787: GO 19895
19789: LD_INT 2
19791: DOUBLE
19792: EQUAL
19793: IFTRUE 19797
19795: GO 19804
19797: POP
// hHackSetLevel10 ; 3 :
19798: CALL 32126 0 0
19802: GO 19895
19804: LD_INT 3
19806: DOUBLE
19807: EQUAL
19808: IFTRUE 19812
19810: GO 19819
19812: POP
// hHackSetLevel10YourUnits ; 4 :
19813: CALL 32211 0 0
19817: GO 19895
19819: LD_INT 4
19821: DOUBLE
19822: EQUAL
19823: IFTRUE 19827
19825: GO 19834
19827: POP
// hHackInvincible ; 5 :
19828: CALL 32659 0 0
19832: GO 19895
19834: LD_INT 5
19836: DOUBLE
19837: EQUAL
19838: IFTRUE 19842
19840: GO 19849
19842: POP
// hHackInvisible ; 6 :
19843: CALL 32770 0 0
19847: GO 19895
19849: LD_INT 6
19851: DOUBLE
19852: EQUAL
19853: IFTRUE 19857
19855: GO 19864
19857: POP
// hHackChangeYourSide ; 7 :
19858: CALL 32827 0 0
19862: GO 19895
19864: LD_INT 7
19866: DOUBLE
19867: EQUAL
19868: IFTRUE 19872
19870: GO 19879
19872: POP
// hHackChangeUnitSide ; 8 :
19873: CALL 32869 0 0
19877: GO 19895
19879: LD_INT 8
19881: DOUBLE
19882: EQUAL
19883: IFTRUE 19887
19885: GO 19894
19887: POP
// hHackFog ; end ;
19888: CALL 32970 0 0
19892: GO 19895
19894: POP
// end ; end ;
19895: LD_VAR 0 7
19899: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19900: GO 19902
19902: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19903: LD_STRING initStreamRollete();
19905: PPUSH
19906: CALL_OW 559
// InitStreamMode ;
19910: CALL 19922 0 0
// DefineStreamItems ( false ) ;
19914: LD_INT 0
19916: PPUSH
19917: CALL 20386 0 1
// end ;
19921: END
// function InitStreamMode ; begin
19922: LD_INT 0
19924: PPUSH
// streamModeActive := false ;
19925: LD_ADDR_EXP 62
19929: PUSH
19930: LD_INT 0
19932: ST_TO_ADDR
// normalCounter := 36 ;
19933: LD_ADDR_EXP 63
19937: PUSH
19938: LD_INT 36
19940: ST_TO_ADDR
// hardcoreCounter := 18 ;
19941: LD_ADDR_EXP 64
19945: PUSH
19946: LD_INT 18
19948: ST_TO_ADDR
// sRocket := false ;
19949: LD_ADDR_EXP 67
19953: PUSH
19954: LD_INT 0
19956: ST_TO_ADDR
// sSpeed := false ;
19957: LD_ADDR_EXP 66
19961: PUSH
19962: LD_INT 0
19964: ST_TO_ADDR
// sEngine := false ;
19965: LD_ADDR_EXP 68
19969: PUSH
19970: LD_INT 0
19972: ST_TO_ADDR
// sSpec := false ;
19973: LD_ADDR_EXP 65
19977: PUSH
19978: LD_INT 0
19980: ST_TO_ADDR
// sLevel := false ;
19981: LD_ADDR_EXP 69
19985: PUSH
19986: LD_INT 0
19988: ST_TO_ADDR
// sArmoury := false ;
19989: LD_ADDR_EXP 70
19993: PUSH
19994: LD_INT 0
19996: ST_TO_ADDR
// sRadar := false ;
19997: LD_ADDR_EXP 71
20001: PUSH
20002: LD_INT 0
20004: ST_TO_ADDR
// sBunker := false ;
20005: LD_ADDR_EXP 72
20009: PUSH
20010: LD_INT 0
20012: ST_TO_ADDR
// sHack := false ;
20013: LD_ADDR_EXP 73
20017: PUSH
20018: LD_INT 0
20020: ST_TO_ADDR
// sFire := false ;
20021: LD_ADDR_EXP 74
20025: PUSH
20026: LD_INT 0
20028: ST_TO_ADDR
// sRefresh := false ;
20029: LD_ADDR_EXP 75
20033: PUSH
20034: LD_INT 0
20036: ST_TO_ADDR
// sExp := false ;
20037: LD_ADDR_EXP 76
20041: PUSH
20042: LD_INT 0
20044: ST_TO_ADDR
// sDepot := false ;
20045: LD_ADDR_EXP 77
20049: PUSH
20050: LD_INT 0
20052: ST_TO_ADDR
// sFlag := false ;
20053: LD_ADDR_EXP 78
20057: PUSH
20058: LD_INT 0
20060: ST_TO_ADDR
// sKamikadze := false ;
20061: LD_ADDR_EXP 86
20065: PUSH
20066: LD_INT 0
20068: ST_TO_ADDR
// sTroll := false ;
20069: LD_ADDR_EXP 87
20073: PUSH
20074: LD_INT 0
20076: ST_TO_ADDR
// sSlow := false ;
20077: LD_ADDR_EXP 88
20081: PUSH
20082: LD_INT 0
20084: ST_TO_ADDR
// sLack := false ;
20085: LD_ADDR_EXP 89
20089: PUSH
20090: LD_INT 0
20092: ST_TO_ADDR
// sTank := false ;
20093: LD_ADDR_EXP 91
20097: PUSH
20098: LD_INT 0
20100: ST_TO_ADDR
// sRemote := false ;
20101: LD_ADDR_EXP 92
20105: PUSH
20106: LD_INT 0
20108: ST_TO_ADDR
// sPowell := false ;
20109: LD_ADDR_EXP 93
20113: PUSH
20114: LD_INT 0
20116: ST_TO_ADDR
// sTeleport := false ;
20117: LD_ADDR_EXP 96
20121: PUSH
20122: LD_INT 0
20124: ST_TO_ADDR
// sOilTower := false ;
20125: LD_ADDR_EXP 98
20129: PUSH
20130: LD_INT 0
20132: ST_TO_ADDR
// sShovel := false ;
20133: LD_ADDR_EXP 99
20137: PUSH
20138: LD_INT 0
20140: ST_TO_ADDR
// sSheik := false ;
20141: LD_ADDR_EXP 100
20145: PUSH
20146: LD_INT 0
20148: ST_TO_ADDR
// sEarthquake := false ;
20149: LD_ADDR_EXP 102
20153: PUSH
20154: LD_INT 0
20156: ST_TO_ADDR
// sAI := false ;
20157: LD_ADDR_EXP 103
20161: PUSH
20162: LD_INT 0
20164: ST_TO_ADDR
// sCargo := false ;
20165: LD_ADDR_EXP 106
20169: PUSH
20170: LD_INT 0
20172: ST_TO_ADDR
// sDLaser := false ;
20173: LD_ADDR_EXP 107
20177: PUSH
20178: LD_INT 0
20180: ST_TO_ADDR
// sExchange := false ;
20181: LD_ADDR_EXP 108
20185: PUSH
20186: LD_INT 0
20188: ST_TO_ADDR
// sFac := false ;
20189: LD_ADDR_EXP 109
20193: PUSH
20194: LD_INT 0
20196: ST_TO_ADDR
// sPower := false ;
20197: LD_ADDR_EXP 110
20201: PUSH
20202: LD_INT 0
20204: ST_TO_ADDR
// sRandom := false ;
20205: LD_ADDR_EXP 111
20209: PUSH
20210: LD_INT 0
20212: ST_TO_ADDR
// sShield := false ;
20213: LD_ADDR_EXP 112
20217: PUSH
20218: LD_INT 0
20220: ST_TO_ADDR
// sTime := false ;
20221: LD_ADDR_EXP 113
20225: PUSH
20226: LD_INT 0
20228: ST_TO_ADDR
// sTools := false ;
20229: LD_ADDR_EXP 114
20233: PUSH
20234: LD_INT 0
20236: ST_TO_ADDR
// sSold := false ;
20237: LD_ADDR_EXP 79
20241: PUSH
20242: LD_INT 0
20244: ST_TO_ADDR
// sDiff := false ;
20245: LD_ADDR_EXP 80
20249: PUSH
20250: LD_INT 0
20252: ST_TO_ADDR
// sFog := false ;
20253: LD_ADDR_EXP 83
20257: PUSH
20258: LD_INT 0
20260: ST_TO_ADDR
// sReset := false ;
20261: LD_ADDR_EXP 84
20265: PUSH
20266: LD_INT 0
20268: ST_TO_ADDR
// sSun := false ;
20269: LD_ADDR_EXP 85
20273: PUSH
20274: LD_INT 0
20276: ST_TO_ADDR
// sTiger := false ;
20277: LD_ADDR_EXP 81
20281: PUSH
20282: LD_INT 0
20284: ST_TO_ADDR
// sBomb := false ;
20285: LD_ADDR_EXP 82
20289: PUSH
20290: LD_INT 0
20292: ST_TO_ADDR
// sWound := false ;
20293: LD_ADDR_EXP 90
20297: PUSH
20298: LD_INT 0
20300: ST_TO_ADDR
// sBetray := false ;
20301: LD_ADDR_EXP 94
20305: PUSH
20306: LD_INT 0
20308: ST_TO_ADDR
// sContamin := false ;
20309: LD_ADDR_EXP 95
20313: PUSH
20314: LD_INT 0
20316: ST_TO_ADDR
// sOil := false ;
20317: LD_ADDR_EXP 97
20321: PUSH
20322: LD_INT 0
20324: ST_TO_ADDR
// sStu := false ;
20325: LD_ADDR_EXP 101
20329: PUSH
20330: LD_INT 0
20332: ST_TO_ADDR
// sBazooka := false ;
20333: LD_ADDR_EXP 104
20337: PUSH
20338: LD_INT 0
20340: ST_TO_ADDR
// sMortar := false ;
20341: LD_ADDR_EXP 105
20345: PUSH
20346: LD_INT 0
20348: ST_TO_ADDR
// sRanger := false ;
20349: LD_ADDR_EXP 115
20353: PUSH
20354: LD_INT 0
20356: ST_TO_ADDR
// sComputer := false ;
20357: LD_ADDR_EXP 116
20361: PUSH
20362: LD_INT 0
20364: ST_TO_ADDR
// s30 := false ;
20365: LD_ADDR_EXP 117
20369: PUSH
20370: LD_INT 0
20372: ST_TO_ADDR
// s60 := false ;
20373: LD_ADDR_EXP 118
20377: PUSH
20378: LD_INT 0
20380: ST_TO_ADDR
// end ;
20381: LD_VAR 0 1
20385: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20386: LD_INT 0
20388: PPUSH
20389: PPUSH
20390: PPUSH
20391: PPUSH
20392: PPUSH
20393: PPUSH
20394: PPUSH
// result := [ ] ;
20395: LD_ADDR_VAR 0 2
20399: PUSH
20400: EMPTY
20401: ST_TO_ADDR
// if campaign_id = 1 then
20402: LD_OWVAR 69
20406: PUSH
20407: LD_INT 1
20409: EQUAL
20410: IFFALSE 23576
// begin case mission_number of 1 :
20412: LD_OWVAR 70
20416: PUSH
20417: LD_INT 1
20419: DOUBLE
20420: EQUAL
20421: IFTRUE 20425
20423: GO 20501
20425: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20426: LD_ADDR_VAR 0 2
20430: PUSH
20431: LD_INT 2
20433: PUSH
20434: LD_INT 4
20436: PUSH
20437: LD_INT 11
20439: PUSH
20440: LD_INT 12
20442: PUSH
20443: LD_INT 15
20445: PUSH
20446: LD_INT 16
20448: PUSH
20449: LD_INT 22
20451: PUSH
20452: LD_INT 23
20454: PUSH
20455: LD_INT 26
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 101
20471: PUSH
20472: LD_INT 102
20474: PUSH
20475: LD_INT 106
20477: PUSH
20478: LD_INT 116
20480: PUSH
20481: LD_INT 117
20483: PUSH
20484: LD_INT 118
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: ST_TO_ADDR
20499: GO 23574
20501: LD_INT 2
20503: DOUBLE
20504: EQUAL
20505: IFTRUE 20509
20507: GO 20593
20509: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20510: LD_ADDR_VAR 0 2
20514: PUSH
20515: LD_INT 2
20517: PUSH
20518: LD_INT 4
20520: PUSH
20521: LD_INT 11
20523: PUSH
20524: LD_INT 12
20526: PUSH
20527: LD_INT 15
20529: PUSH
20530: LD_INT 16
20532: PUSH
20533: LD_INT 22
20535: PUSH
20536: LD_INT 23
20538: PUSH
20539: LD_INT 26
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 101
20555: PUSH
20556: LD_INT 102
20558: PUSH
20559: LD_INT 105
20561: PUSH
20562: LD_INT 106
20564: PUSH
20565: LD_INT 108
20567: PUSH
20568: LD_INT 116
20570: PUSH
20571: LD_INT 117
20573: PUSH
20574: LD_INT 118
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: ST_TO_ADDR
20591: GO 23574
20593: LD_INT 3
20595: DOUBLE
20596: EQUAL
20597: IFTRUE 20601
20599: GO 20689
20601: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20602: LD_ADDR_VAR 0 2
20606: PUSH
20607: LD_INT 2
20609: PUSH
20610: LD_INT 4
20612: PUSH
20613: LD_INT 5
20615: PUSH
20616: LD_INT 11
20618: PUSH
20619: LD_INT 12
20621: PUSH
20622: LD_INT 15
20624: PUSH
20625: LD_INT 16
20627: PUSH
20628: LD_INT 22
20630: PUSH
20631: LD_INT 26
20633: PUSH
20634: LD_INT 36
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 101
20651: PUSH
20652: LD_INT 102
20654: PUSH
20655: LD_INT 105
20657: PUSH
20658: LD_INT 106
20660: PUSH
20661: LD_INT 108
20663: PUSH
20664: LD_INT 116
20666: PUSH
20667: LD_INT 117
20669: PUSH
20670: LD_INT 118
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: ST_TO_ADDR
20687: GO 23574
20689: LD_INT 4
20691: DOUBLE
20692: EQUAL
20693: IFTRUE 20697
20695: GO 20793
20697: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20698: LD_ADDR_VAR 0 2
20702: PUSH
20703: LD_INT 2
20705: PUSH
20706: LD_INT 4
20708: PUSH
20709: LD_INT 5
20711: PUSH
20712: LD_INT 8
20714: PUSH
20715: LD_INT 11
20717: PUSH
20718: LD_INT 12
20720: PUSH
20721: LD_INT 15
20723: PUSH
20724: LD_INT 16
20726: PUSH
20727: LD_INT 22
20729: PUSH
20730: LD_INT 23
20732: PUSH
20733: LD_INT 26
20735: PUSH
20736: LD_INT 36
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 101
20755: PUSH
20756: LD_INT 102
20758: PUSH
20759: LD_INT 105
20761: PUSH
20762: LD_INT 106
20764: PUSH
20765: LD_INT 108
20767: PUSH
20768: LD_INT 116
20770: PUSH
20771: LD_INT 117
20773: PUSH
20774: LD_INT 118
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: ST_TO_ADDR
20791: GO 23574
20793: LD_INT 5
20795: DOUBLE
20796: EQUAL
20797: IFTRUE 20801
20799: GO 20913
20801: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20802: LD_ADDR_VAR 0 2
20806: PUSH
20807: LD_INT 2
20809: PUSH
20810: LD_INT 4
20812: PUSH
20813: LD_INT 5
20815: PUSH
20816: LD_INT 6
20818: PUSH
20819: LD_INT 8
20821: PUSH
20822: LD_INT 11
20824: PUSH
20825: LD_INT 12
20827: PUSH
20828: LD_INT 15
20830: PUSH
20831: LD_INT 16
20833: PUSH
20834: LD_INT 22
20836: PUSH
20837: LD_INT 23
20839: PUSH
20840: LD_INT 25
20842: PUSH
20843: LD_INT 26
20845: PUSH
20846: LD_INT 36
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 101
20867: PUSH
20868: LD_INT 102
20870: PUSH
20871: LD_INT 105
20873: PUSH
20874: LD_INT 106
20876: PUSH
20877: LD_INT 108
20879: PUSH
20880: LD_INT 109
20882: PUSH
20883: LD_INT 112
20885: PUSH
20886: LD_INT 116
20888: PUSH
20889: LD_INT 117
20891: PUSH
20892: LD_INT 118
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: ST_TO_ADDR
20911: GO 23574
20913: LD_INT 6
20915: DOUBLE
20916: EQUAL
20917: IFTRUE 20921
20919: GO 21053
20921: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20922: LD_ADDR_VAR 0 2
20926: PUSH
20927: LD_INT 2
20929: PUSH
20930: LD_INT 4
20932: PUSH
20933: LD_INT 5
20935: PUSH
20936: LD_INT 6
20938: PUSH
20939: LD_INT 8
20941: PUSH
20942: LD_INT 11
20944: PUSH
20945: LD_INT 12
20947: PUSH
20948: LD_INT 15
20950: PUSH
20951: LD_INT 16
20953: PUSH
20954: LD_INT 20
20956: PUSH
20957: LD_INT 21
20959: PUSH
20960: LD_INT 22
20962: PUSH
20963: LD_INT 23
20965: PUSH
20966: LD_INT 25
20968: PUSH
20969: LD_INT 26
20971: PUSH
20972: LD_INT 30
20974: PUSH
20975: LD_INT 31
20977: PUSH
20978: LD_INT 32
20980: PUSH
20981: LD_INT 36
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 101
21007: PUSH
21008: LD_INT 102
21010: PUSH
21011: LD_INT 105
21013: PUSH
21014: LD_INT 106
21016: PUSH
21017: LD_INT 108
21019: PUSH
21020: LD_INT 109
21022: PUSH
21023: LD_INT 112
21025: PUSH
21026: LD_INT 116
21028: PUSH
21029: LD_INT 117
21031: PUSH
21032: LD_INT 118
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: ST_TO_ADDR
21051: GO 23574
21053: LD_INT 7
21055: DOUBLE
21056: EQUAL
21057: IFTRUE 21061
21059: GO 21173
21061: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21062: LD_ADDR_VAR 0 2
21066: PUSH
21067: LD_INT 2
21069: PUSH
21070: LD_INT 4
21072: PUSH
21073: LD_INT 5
21075: PUSH
21076: LD_INT 7
21078: PUSH
21079: LD_INT 11
21081: PUSH
21082: LD_INT 12
21084: PUSH
21085: LD_INT 15
21087: PUSH
21088: LD_INT 16
21090: PUSH
21091: LD_INT 20
21093: PUSH
21094: LD_INT 21
21096: PUSH
21097: LD_INT 22
21099: PUSH
21100: LD_INT 23
21102: PUSH
21103: LD_INT 25
21105: PUSH
21106: LD_INT 26
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 101
21127: PUSH
21128: LD_INT 102
21130: PUSH
21131: LD_INT 103
21133: PUSH
21134: LD_INT 105
21136: PUSH
21137: LD_INT 106
21139: PUSH
21140: LD_INT 108
21142: PUSH
21143: LD_INT 112
21145: PUSH
21146: LD_INT 116
21148: PUSH
21149: LD_INT 117
21151: PUSH
21152: LD_INT 118
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: ST_TO_ADDR
21171: GO 23574
21173: LD_INT 8
21175: DOUBLE
21176: EQUAL
21177: IFTRUE 21181
21179: GO 21321
21181: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21182: LD_ADDR_VAR 0 2
21186: PUSH
21187: LD_INT 2
21189: PUSH
21190: LD_INT 4
21192: PUSH
21193: LD_INT 5
21195: PUSH
21196: LD_INT 6
21198: PUSH
21199: LD_INT 7
21201: PUSH
21202: LD_INT 8
21204: PUSH
21205: LD_INT 11
21207: PUSH
21208: LD_INT 12
21210: PUSH
21211: LD_INT 15
21213: PUSH
21214: LD_INT 16
21216: PUSH
21217: LD_INT 20
21219: PUSH
21220: LD_INT 21
21222: PUSH
21223: LD_INT 22
21225: PUSH
21226: LD_INT 23
21228: PUSH
21229: LD_INT 25
21231: PUSH
21232: LD_INT 26
21234: PUSH
21235: LD_INT 30
21237: PUSH
21238: LD_INT 31
21240: PUSH
21241: LD_INT 32
21243: PUSH
21244: LD_INT 36
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 101
21271: PUSH
21272: LD_INT 102
21274: PUSH
21275: LD_INT 103
21277: PUSH
21278: LD_INT 105
21280: PUSH
21281: LD_INT 106
21283: PUSH
21284: LD_INT 108
21286: PUSH
21287: LD_INT 109
21289: PUSH
21290: LD_INT 112
21292: PUSH
21293: LD_INT 116
21295: PUSH
21296: LD_INT 117
21298: PUSH
21299: LD_INT 118
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: ST_TO_ADDR
21319: GO 23574
21321: LD_INT 9
21323: DOUBLE
21324: EQUAL
21325: IFTRUE 21329
21327: GO 21477
21329: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21330: LD_ADDR_VAR 0 2
21334: PUSH
21335: LD_INT 2
21337: PUSH
21338: LD_INT 4
21340: PUSH
21341: LD_INT 5
21343: PUSH
21344: LD_INT 6
21346: PUSH
21347: LD_INT 7
21349: PUSH
21350: LD_INT 8
21352: PUSH
21353: LD_INT 11
21355: PUSH
21356: LD_INT 12
21358: PUSH
21359: LD_INT 15
21361: PUSH
21362: LD_INT 16
21364: PUSH
21365: LD_INT 20
21367: PUSH
21368: LD_INT 21
21370: PUSH
21371: LD_INT 22
21373: PUSH
21374: LD_INT 23
21376: PUSH
21377: LD_INT 25
21379: PUSH
21380: LD_INT 26
21382: PUSH
21383: LD_INT 28
21385: PUSH
21386: LD_INT 30
21388: PUSH
21389: LD_INT 31
21391: PUSH
21392: LD_INT 32
21394: PUSH
21395: LD_INT 36
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 101
21423: PUSH
21424: LD_INT 102
21426: PUSH
21427: LD_INT 103
21429: PUSH
21430: LD_INT 105
21432: PUSH
21433: LD_INT 106
21435: PUSH
21436: LD_INT 108
21438: PUSH
21439: LD_INT 109
21441: PUSH
21442: LD_INT 112
21444: PUSH
21445: LD_INT 114
21447: PUSH
21448: LD_INT 116
21450: PUSH
21451: LD_INT 117
21453: PUSH
21454: LD_INT 118
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: ST_TO_ADDR
21475: GO 23574
21477: LD_INT 10
21479: DOUBLE
21480: EQUAL
21481: IFTRUE 21485
21483: GO 21681
21485: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21486: LD_ADDR_VAR 0 2
21490: PUSH
21491: LD_INT 2
21493: PUSH
21494: LD_INT 4
21496: PUSH
21497: LD_INT 5
21499: PUSH
21500: LD_INT 6
21502: PUSH
21503: LD_INT 7
21505: PUSH
21506: LD_INT 8
21508: PUSH
21509: LD_INT 9
21511: PUSH
21512: LD_INT 10
21514: PUSH
21515: LD_INT 11
21517: PUSH
21518: LD_INT 12
21520: PUSH
21521: LD_INT 13
21523: PUSH
21524: LD_INT 14
21526: PUSH
21527: LD_INT 15
21529: PUSH
21530: LD_INT 16
21532: PUSH
21533: LD_INT 17
21535: PUSH
21536: LD_INT 18
21538: PUSH
21539: LD_INT 19
21541: PUSH
21542: LD_INT 20
21544: PUSH
21545: LD_INT 21
21547: PUSH
21548: LD_INT 22
21550: PUSH
21551: LD_INT 23
21553: PUSH
21554: LD_INT 24
21556: PUSH
21557: LD_INT 25
21559: PUSH
21560: LD_INT 26
21562: PUSH
21563: LD_INT 28
21565: PUSH
21566: LD_INT 30
21568: PUSH
21569: LD_INT 31
21571: PUSH
21572: LD_INT 32
21574: PUSH
21575: LD_INT 36
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 101
21611: PUSH
21612: LD_INT 102
21614: PUSH
21615: LD_INT 103
21617: PUSH
21618: LD_INT 104
21620: PUSH
21621: LD_INT 105
21623: PUSH
21624: LD_INT 106
21626: PUSH
21627: LD_INT 107
21629: PUSH
21630: LD_INT 108
21632: PUSH
21633: LD_INT 109
21635: PUSH
21636: LD_INT 110
21638: PUSH
21639: LD_INT 111
21641: PUSH
21642: LD_INT 112
21644: PUSH
21645: LD_INT 114
21647: PUSH
21648: LD_INT 116
21650: PUSH
21651: LD_INT 117
21653: PUSH
21654: LD_INT 118
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: ST_TO_ADDR
21679: GO 23574
21681: LD_INT 11
21683: DOUBLE
21684: EQUAL
21685: IFTRUE 21689
21687: GO 21893
21689: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21690: LD_ADDR_VAR 0 2
21694: PUSH
21695: LD_INT 2
21697: PUSH
21698: LD_INT 3
21700: PUSH
21701: LD_INT 4
21703: PUSH
21704: LD_INT 5
21706: PUSH
21707: LD_INT 6
21709: PUSH
21710: LD_INT 7
21712: PUSH
21713: LD_INT 8
21715: PUSH
21716: LD_INT 9
21718: PUSH
21719: LD_INT 10
21721: PUSH
21722: LD_INT 11
21724: PUSH
21725: LD_INT 12
21727: PUSH
21728: LD_INT 13
21730: PUSH
21731: LD_INT 14
21733: PUSH
21734: LD_INT 15
21736: PUSH
21737: LD_INT 16
21739: PUSH
21740: LD_INT 17
21742: PUSH
21743: LD_INT 18
21745: PUSH
21746: LD_INT 19
21748: PUSH
21749: LD_INT 20
21751: PUSH
21752: LD_INT 21
21754: PUSH
21755: LD_INT 22
21757: PUSH
21758: LD_INT 23
21760: PUSH
21761: LD_INT 24
21763: PUSH
21764: LD_INT 25
21766: PUSH
21767: LD_INT 26
21769: PUSH
21770: LD_INT 28
21772: PUSH
21773: LD_INT 30
21775: PUSH
21776: LD_INT 31
21778: PUSH
21779: LD_INT 32
21781: PUSH
21782: LD_INT 34
21784: PUSH
21785: LD_INT 36
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 101
21823: PUSH
21824: LD_INT 102
21826: PUSH
21827: LD_INT 103
21829: PUSH
21830: LD_INT 104
21832: PUSH
21833: LD_INT 105
21835: PUSH
21836: LD_INT 106
21838: PUSH
21839: LD_INT 107
21841: PUSH
21842: LD_INT 108
21844: PUSH
21845: LD_INT 109
21847: PUSH
21848: LD_INT 110
21850: PUSH
21851: LD_INT 111
21853: PUSH
21854: LD_INT 112
21856: PUSH
21857: LD_INT 114
21859: PUSH
21860: LD_INT 116
21862: PUSH
21863: LD_INT 117
21865: PUSH
21866: LD_INT 118
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: ST_TO_ADDR
21891: GO 23574
21893: LD_INT 12
21895: DOUBLE
21896: EQUAL
21897: IFTRUE 21901
21899: GO 22121
21901: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21902: LD_ADDR_VAR 0 2
21906: PUSH
21907: LD_INT 1
21909: PUSH
21910: LD_INT 2
21912: PUSH
21913: LD_INT 3
21915: PUSH
21916: LD_INT 4
21918: PUSH
21919: LD_INT 5
21921: PUSH
21922: LD_INT 6
21924: PUSH
21925: LD_INT 7
21927: PUSH
21928: LD_INT 8
21930: PUSH
21931: LD_INT 9
21933: PUSH
21934: LD_INT 10
21936: PUSH
21937: LD_INT 11
21939: PUSH
21940: LD_INT 12
21942: PUSH
21943: LD_INT 13
21945: PUSH
21946: LD_INT 14
21948: PUSH
21949: LD_INT 15
21951: PUSH
21952: LD_INT 16
21954: PUSH
21955: LD_INT 17
21957: PUSH
21958: LD_INT 18
21960: PUSH
21961: LD_INT 19
21963: PUSH
21964: LD_INT 20
21966: PUSH
21967: LD_INT 21
21969: PUSH
21970: LD_INT 22
21972: PUSH
21973: LD_INT 23
21975: PUSH
21976: LD_INT 24
21978: PUSH
21979: LD_INT 25
21981: PUSH
21982: LD_INT 26
21984: PUSH
21985: LD_INT 27
21987: PUSH
21988: LD_INT 28
21990: PUSH
21991: LD_INT 30
21993: PUSH
21994: LD_INT 31
21996: PUSH
21997: LD_INT 32
21999: PUSH
22000: LD_INT 33
22002: PUSH
22003: LD_INT 34
22005: PUSH
22006: LD_INT 36
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 101
22047: PUSH
22048: LD_INT 102
22050: PUSH
22051: LD_INT 103
22053: PUSH
22054: LD_INT 104
22056: PUSH
22057: LD_INT 105
22059: PUSH
22060: LD_INT 106
22062: PUSH
22063: LD_INT 107
22065: PUSH
22066: LD_INT 108
22068: PUSH
22069: LD_INT 109
22071: PUSH
22072: LD_INT 110
22074: PUSH
22075: LD_INT 111
22077: PUSH
22078: LD_INT 112
22080: PUSH
22081: LD_INT 113
22083: PUSH
22084: LD_INT 114
22086: PUSH
22087: LD_INT 116
22089: PUSH
22090: LD_INT 117
22092: PUSH
22093: LD_INT 118
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: ST_TO_ADDR
22119: GO 23574
22121: LD_INT 13
22123: DOUBLE
22124: EQUAL
22125: IFTRUE 22129
22127: GO 22337
22129: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22130: LD_ADDR_VAR 0 2
22134: PUSH
22135: LD_INT 1
22137: PUSH
22138: LD_INT 2
22140: PUSH
22141: LD_INT 3
22143: PUSH
22144: LD_INT 4
22146: PUSH
22147: LD_INT 5
22149: PUSH
22150: LD_INT 8
22152: PUSH
22153: LD_INT 9
22155: PUSH
22156: LD_INT 10
22158: PUSH
22159: LD_INT 11
22161: PUSH
22162: LD_INT 12
22164: PUSH
22165: LD_INT 14
22167: PUSH
22168: LD_INT 15
22170: PUSH
22171: LD_INT 16
22173: PUSH
22174: LD_INT 17
22176: PUSH
22177: LD_INT 18
22179: PUSH
22180: LD_INT 19
22182: PUSH
22183: LD_INT 20
22185: PUSH
22186: LD_INT 21
22188: PUSH
22189: LD_INT 22
22191: PUSH
22192: LD_INT 23
22194: PUSH
22195: LD_INT 24
22197: PUSH
22198: LD_INT 25
22200: PUSH
22201: LD_INT 26
22203: PUSH
22204: LD_INT 27
22206: PUSH
22207: LD_INT 28
22209: PUSH
22210: LD_INT 30
22212: PUSH
22213: LD_INT 31
22215: PUSH
22216: LD_INT 32
22218: PUSH
22219: LD_INT 33
22221: PUSH
22222: LD_INT 34
22224: PUSH
22225: LD_INT 36
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 101
22263: PUSH
22264: LD_INT 102
22266: PUSH
22267: LD_INT 103
22269: PUSH
22270: LD_INT 104
22272: PUSH
22273: LD_INT 105
22275: PUSH
22276: LD_INT 106
22278: PUSH
22279: LD_INT 107
22281: PUSH
22282: LD_INT 108
22284: PUSH
22285: LD_INT 109
22287: PUSH
22288: LD_INT 110
22290: PUSH
22291: LD_INT 111
22293: PUSH
22294: LD_INT 112
22296: PUSH
22297: LD_INT 113
22299: PUSH
22300: LD_INT 114
22302: PUSH
22303: LD_INT 116
22305: PUSH
22306: LD_INT 117
22308: PUSH
22309: LD_INT 118
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: ST_TO_ADDR
22335: GO 23574
22337: LD_INT 14
22339: DOUBLE
22340: EQUAL
22341: IFTRUE 22345
22343: GO 22569
22345: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22346: LD_ADDR_VAR 0 2
22350: PUSH
22351: LD_INT 1
22353: PUSH
22354: LD_INT 2
22356: PUSH
22357: LD_INT 3
22359: PUSH
22360: LD_INT 4
22362: PUSH
22363: LD_INT 5
22365: PUSH
22366: LD_INT 6
22368: PUSH
22369: LD_INT 7
22371: PUSH
22372: LD_INT 8
22374: PUSH
22375: LD_INT 9
22377: PUSH
22378: LD_INT 10
22380: PUSH
22381: LD_INT 11
22383: PUSH
22384: LD_INT 12
22386: PUSH
22387: LD_INT 13
22389: PUSH
22390: LD_INT 14
22392: PUSH
22393: LD_INT 15
22395: PUSH
22396: LD_INT 16
22398: PUSH
22399: LD_INT 17
22401: PUSH
22402: LD_INT 18
22404: PUSH
22405: LD_INT 19
22407: PUSH
22408: LD_INT 20
22410: PUSH
22411: LD_INT 21
22413: PUSH
22414: LD_INT 22
22416: PUSH
22417: LD_INT 23
22419: PUSH
22420: LD_INT 24
22422: PUSH
22423: LD_INT 25
22425: PUSH
22426: LD_INT 26
22428: PUSH
22429: LD_INT 27
22431: PUSH
22432: LD_INT 28
22434: PUSH
22435: LD_INT 29
22437: PUSH
22438: LD_INT 30
22440: PUSH
22441: LD_INT 31
22443: PUSH
22444: LD_INT 32
22446: PUSH
22447: LD_INT 33
22449: PUSH
22450: LD_INT 34
22452: PUSH
22453: LD_INT 36
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 101
22495: PUSH
22496: LD_INT 102
22498: PUSH
22499: LD_INT 103
22501: PUSH
22502: LD_INT 104
22504: PUSH
22505: LD_INT 105
22507: PUSH
22508: LD_INT 106
22510: PUSH
22511: LD_INT 107
22513: PUSH
22514: LD_INT 108
22516: PUSH
22517: LD_INT 109
22519: PUSH
22520: LD_INT 110
22522: PUSH
22523: LD_INT 111
22525: PUSH
22526: LD_INT 112
22528: PUSH
22529: LD_INT 113
22531: PUSH
22532: LD_INT 114
22534: PUSH
22535: LD_INT 116
22537: PUSH
22538: LD_INT 117
22540: PUSH
22541: LD_INT 118
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: ST_TO_ADDR
22567: GO 23574
22569: LD_INT 15
22571: DOUBLE
22572: EQUAL
22573: IFTRUE 22577
22575: GO 22801
22577: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22578: LD_ADDR_VAR 0 2
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: LD_INT 2
22588: PUSH
22589: LD_INT 3
22591: PUSH
22592: LD_INT 4
22594: PUSH
22595: LD_INT 5
22597: PUSH
22598: LD_INT 6
22600: PUSH
22601: LD_INT 7
22603: PUSH
22604: LD_INT 8
22606: PUSH
22607: LD_INT 9
22609: PUSH
22610: LD_INT 10
22612: PUSH
22613: LD_INT 11
22615: PUSH
22616: LD_INT 12
22618: PUSH
22619: LD_INT 13
22621: PUSH
22622: LD_INT 14
22624: PUSH
22625: LD_INT 15
22627: PUSH
22628: LD_INT 16
22630: PUSH
22631: LD_INT 17
22633: PUSH
22634: LD_INT 18
22636: PUSH
22637: LD_INT 19
22639: PUSH
22640: LD_INT 20
22642: PUSH
22643: LD_INT 21
22645: PUSH
22646: LD_INT 22
22648: PUSH
22649: LD_INT 23
22651: PUSH
22652: LD_INT 24
22654: PUSH
22655: LD_INT 25
22657: PUSH
22658: LD_INT 26
22660: PUSH
22661: LD_INT 27
22663: PUSH
22664: LD_INT 28
22666: PUSH
22667: LD_INT 29
22669: PUSH
22670: LD_INT 30
22672: PUSH
22673: LD_INT 31
22675: PUSH
22676: LD_INT 32
22678: PUSH
22679: LD_INT 33
22681: PUSH
22682: LD_INT 34
22684: PUSH
22685: LD_INT 36
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 101
22727: PUSH
22728: LD_INT 102
22730: PUSH
22731: LD_INT 103
22733: PUSH
22734: LD_INT 104
22736: PUSH
22737: LD_INT 105
22739: PUSH
22740: LD_INT 106
22742: PUSH
22743: LD_INT 107
22745: PUSH
22746: LD_INT 108
22748: PUSH
22749: LD_INT 109
22751: PUSH
22752: LD_INT 110
22754: PUSH
22755: LD_INT 111
22757: PUSH
22758: LD_INT 112
22760: PUSH
22761: LD_INT 113
22763: PUSH
22764: LD_INT 114
22766: PUSH
22767: LD_INT 116
22769: PUSH
22770: LD_INT 117
22772: PUSH
22773: LD_INT 118
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: ST_TO_ADDR
22799: GO 23574
22801: LD_INT 16
22803: DOUBLE
22804: EQUAL
22805: IFTRUE 22809
22807: GO 22945
22809: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22810: LD_ADDR_VAR 0 2
22814: PUSH
22815: LD_INT 2
22817: PUSH
22818: LD_INT 4
22820: PUSH
22821: LD_INT 5
22823: PUSH
22824: LD_INT 7
22826: PUSH
22827: LD_INT 11
22829: PUSH
22830: LD_INT 12
22832: PUSH
22833: LD_INT 15
22835: PUSH
22836: LD_INT 16
22838: PUSH
22839: LD_INT 20
22841: PUSH
22842: LD_INT 21
22844: PUSH
22845: LD_INT 22
22847: PUSH
22848: LD_INT 23
22850: PUSH
22851: LD_INT 25
22853: PUSH
22854: LD_INT 26
22856: PUSH
22857: LD_INT 30
22859: PUSH
22860: LD_INT 31
22862: PUSH
22863: LD_INT 32
22865: PUSH
22866: LD_INT 33
22868: PUSH
22869: LD_INT 34
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 101
22895: PUSH
22896: LD_INT 102
22898: PUSH
22899: LD_INT 103
22901: PUSH
22902: LD_INT 106
22904: PUSH
22905: LD_INT 108
22907: PUSH
22908: LD_INT 112
22910: PUSH
22911: LD_INT 113
22913: PUSH
22914: LD_INT 114
22916: PUSH
22917: LD_INT 116
22919: PUSH
22920: LD_INT 117
22922: PUSH
22923: LD_INT 118
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: ST_TO_ADDR
22943: GO 23574
22945: LD_INT 17
22947: DOUBLE
22948: EQUAL
22949: IFTRUE 22953
22951: GO 23177
22953: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22954: LD_ADDR_VAR 0 2
22958: PUSH
22959: LD_INT 1
22961: PUSH
22962: LD_INT 2
22964: PUSH
22965: LD_INT 3
22967: PUSH
22968: LD_INT 4
22970: PUSH
22971: LD_INT 5
22973: PUSH
22974: LD_INT 6
22976: PUSH
22977: LD_INT 7
22979: PUSH
22980: LD_INT 8
22982: PUSH
22983: LD_INT 9
22985: PUSH
22986: LD_INT 10
22988: PUSH
22989: LD_INT 11
22991: PUSH
22992: LD_INT 12
22994: PUSH
22995: LD_INT 13
22997: PUSH
22998: LD_INT 14
23000: PUSH
23001: LD_INT 15
23003: PUSH
23004: LD_INT 16
23006: PUSH
23007: LD_INT 17
23009: PUSH
23010: LD_INT 18
23012: PUSH
23013: LD_INT 19
23015: PUSH
23016: LD_INT 20
23018: PUSH
23019: LD_INT 21
23021: PUSH
23022: LD_INT 22
23024: PUSH
23025: LD_INT 23
23027: PUSH
23028: LD_INT 24
23030: PUSH
23031: LD_INT 25
23033: PUSH
23034: LD_INT 26
23036: PUSH
23037: LD_INT 27
23039: PUSH
23040: LD_INT 28
23042: PUSH
23043: LD_INT 29
23045: PUSH
23046: LD_INT 30
23048: PUSH
23049: LD_INT 31
23051: PUSH
23052: LD_INT 32
23054: PUSH
23055: LD_INT 33
23057: PUSH
23058: LD_INT 34
23060: PUSH
23061: LD_INT 36
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 101
23103: PUSH
23104: LD_INT 102
23106: PUSH
23107: LD_INT 103
23109: PUSH
23110: LD_INT 104
23112: PUSH
23113: LD_INT 105
23115: PUSH
23116: LD_INT 106
23118: PUSH
23119: LD_INT 107
23121: PUSH
23122: LD_INT 108
23124: PUSH
23125: LD_INT 109
23127: PUSH
23128: LD_INT 110
23130: PUSH
23131: LD_INT 111
23133: PUSH
23134: LD_INT 112
23136: PUSH
23137: LD_INT 113
23139: PUSH
23140: LD_INT 114
23142: PUSH
23143: LD_INT 116
23145: PUSH
23146: LD_INT 117
23148: PUSH
23149: LD_INT 118
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: ST_TO_ADDR
23175: GO 23574
23177: LD_INT 18
23179: DOUBLE
23180: EQUAL
23181: IFTRUE 23185
23183: GO 23333
23185: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23186: LD_ADDR_VAR 0 2
23190: PUSH
23191: LD_INT 2
23193: PUSH
23194: LD_INT 4
23196: PUSH
23197: LD_INT 5
23199: PUSH
23200: LD_INT 7
23202: PUSH
23203: LD_INT 11
23205: PUSH
23206: LD_INT 12
23208: PUSH
23209: LD_INT 15
23211: PUSH
23212: LD_INT 16
23214: PUSH
23215: LD_INT 20
23217: PUSH
23218: LD_INT 21
23220: PUSH
23221: LD_INT 22
23223: PUSH
23224: LD_INT 23
23226: PUSH
23227: LD_INT 25
23229: PUSH
23230: LD_INT 26
23232: PUSH
23233: LD_INT 30
23235: PUSH
23236: LD_INT 31
23238: PUSH
23239: LD_INT 32
23241: PUSH
23242: LD_INT 33
23244: PUSH
23245: LD_INT 34
23247: PUSH
23248: LD_INT 35
23250: PUSH
23251: LD_INT 36
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 101
23279: PUSH
23280: LD_INT 102
23282: PUSH
23283: LD_INT 103
23285: PUSH
23286: LD_INT 106
23288: PUSH
23289: LD_INT 108
23291: PUSH
23292: LD_INT 112
23294: PUSH
23295: LD_INT 113
23297: PUSH
23298: LD_INT 114
23300: PUSH
23301: LD_INT 115
23303: PUSH
23304: LD_INT 116
23306: PUSH
23307: LD_INT 117
23309: PUSH
23310: LD_INT 118
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: ST_TO_ADDR
23331: GO 23574
23333: LD_INT 19
23335: DOUBLE
23336: EQUAL
23337: IFTRUE 23341
23339: GO 23573
23341: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23342: LD_ADDR_VAR 0 2
23346: PUSH
23347: LD_INT 1
23349: PUSH
23350: LD_INT 2
23352: PUSH
23353: LD_INT 3
23355: PUSH
23356: LD_INT 4
23358: PUSH
23359: LD_INT 5
23361: PUSH
23362: LD_INT 6
23364: PUSH
23365: LD_INT 7
23367: PUSH
23368: LD_INT 8
23370: PUSH
23371: LD_INT 9
23373: PUSH
23374: LD_INT 10
23376: PUSH
23377: LD_INT 11
23379: PUSH
23380: LD_INT 12
23382: PUSH
23383: LD_INT 13
23385: PUSH
23386: LD_INT 14
23388: PUSH
23389: LD_INT 15
23391: PUSH
23392: LD_INT 16
23394: PUSH
23395: LD_INT 17
23397: PUSH
23398: LD_INT 18
23400: PUSH
23401: LD_INT 19
23403: PUSH
23404: LD_INT 20
23406: PUSH
23407: LD_INT 21
23409: PUSH
23410: LD_INT 22
23412: PUSH
23413: LD_INT 23
23415: PUSH
23416: LD_INT 24
23418: PUSH
23419: LD_INT 25
23421: PUSH
23422: LD_INT 26
23424: PUSH
23425: LD_INT 27
23427: PUSH
23428: LD_INT 28
23430: PUSH
23431: LD_INT 29
23433: PUSH
23434: LD_INT 30
23436: PUSH
23437: LD_INT 31
23439: PUSH
23440: LD_INT 32
23442: PUSH
23443: LD_INT 33
23445: PUSH
23446: LD_INT 34
23448: PUSH
23449: LD_INT 35
23451: PUSH
23452: LD_INT 36
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 101
23495: PUSH
23496: LD_INT 102
23498: PUSH
23499: LD_INT 103
23501: PUSH
23502: LD_INT 104
23504: PUSH
23505: LD_INT 105
23507: PUSH
23508: LD_INT 106
23510: PUSH
23511: LD_INT 107
23513: PUSH
23514: LD_INT 108
23516: PUSH
23517: LD_INT 109
23519: PUSH
23520: LD_INT 110
23522: PUSH
23523: LD_INT 111
23525: PUSH
23526: LD_INT 112
23528: PUSH
23529: LD_INT 113
23531: PUSH
23532: LD_INT 114
23534: PUSH
23535: LD_INT 115
23537: PUSH
23538: LD_INT 116
23540: PUSH
23541: LD_INT 117
23543: PUSH
23544: LD_INT 118
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: ST_TO_ADDR
23571: GO 23574
23573: POP
// end else
23574: GO 23805
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23576: LD_ADDR_VAR 0 2
23580: PUSH
23581: LD_INT 1
23583: PUSH
23584: LD_INT 2
23586: PUSH
23587: LD_INT 3
23589: PUSH
23590: LD_INT 4
23592: PUSH
23593: LD_INT 5
23595: PUSH
23596: LD_INT 6
23598: PUSH
23599: LD_INT 7
23601: PUSH
23602: LD_INT 8
23604: PUSH
23605: LD_INT 9
23607: PUSH
23608: LD_INT 10
23610: PUSH
23611: LD_INT 11
23613: PUSH
23614: LD_INT 12
23616: PUSH
23617: LD_INT 13
23619: PUSH
23620: LD_INT 14
23622: PUSH
23623: LD_INT 15
23625: PUSH
23626: LD_INT 16
23628: PUSH
23629: LD_INT 17
23631: PUSH
23632: LD_INT 18
23634: PUSH
23635: LD_INT 19
23637: PUSH
23638: LD_INT 20
23640: PUSH
23641: LD_INT 21
23643: PUSH
23644: LD_INT 22
23646: PUSH
23647: LD_INT 23
23649: PUSH
23650: LD_INT 24
23652: PUSH
23653: LD_INT 25
23655: PUSH
23656: LD_INT 26
23658: PUSH
23659: LD_INT 27
23661: PUSH
23662: LD_INT 28
23664: PUSH
23665: LD_INT 29
23667: PUSH
23668: LD_INT 30
23670: PUSH
23671: LD_INT 31
23673: PUSH
23674: LD_INT 32
23676: PUSH
23677: LD_INT 33
23679: PUSH
23680: LD_INT 34
23682: PUSH
23683: LD_INT 35
23685: PUSH
23686: LD_INT 36
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 101
23729: PUSH
23730: LD_INT 102
23732: PUSH
23733: LD_INT 103
23735: PUSH
23736: LD_INT 104
23738: PUSH
23739: LD_INT 105
23741: PUSH
23742: LD_INT 106
23744: PUSH
23745: LD_INT 107
23747: PUSH
23748: LD_INT 108
23750: PUSH
23751: LD_INT 109
23753: PUSH
23754: LD_INT 110
23756: PUSH
23757: LD_INT 111
23759: PUSH
23760: LD_INT 112
23762: PUSH
23763: LD_INT 113
23765: PUSH
23766: LD_INT 114
23768: PUSH
23769: LD_INT 115
23771: PUSH
23772: LD_INT 116
23774: PUSH
23775: LD_INT 117
23777: PUSH
23778: LD_INT 118
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: ST_TO_ADDR
// if result then
23805: LD_VAR 0 2
23809: IFFALSE 24595
// begin normal :=  ;
23811: LD_ADDR_VAR 0 5
23815: PUSH
23816: LD_STRING 
23818: ST_TO_ADDR
// hardcore :=  ;
23819: LD_ADDR_VAR 0 6
23823: PUSH
23824: LD_STRING 
23826: ST_TO_ADDR
// active :=  ;
23827: LD_ADDR_VAR 0 7
23831: PUSH
23832: LD_STRING 
23834: ST_TO_ADDR
// for i = 1 to normalCounter do
23835: LD_ADDR_VAR 0 8
23839: PUSH
23840: DOUBLE
23841: LD_INT 1
23843: DEC
23844: ST_TO_ADDR
23845: LD_EXP 63
23849: PUSH
23850: FOR_TO
23851: IFFALSE 23952
// begin tmp := 0 ;
23853: LD_ADDR_VAR 0 3
23857: PUSH
23858: LD_STRING 0
23860: ST_TO_ADDR
// if result [ 1 ] then
23861: LD_VAR 0 2
23865: PUSH
23866: LD_INT 1
23868: ARRAY
23869: IFFALSE 23934
// if result [ 1 ] [ 1 ] = i then
23871: LD_VAR 0 2
23875: PUSH
23876: LD_INT 1
23878: ARRAY
23879: PUSH
23880: LD_INT 1
23882: ARRAY
23883: PUSH
23884: LD_VAR 0 8
23888: EQUAL
23889: IFFALSE 23934
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23891: LD_ADDR_VAR 0 2
23895: PUSH
23896: LD_VAR 0 2
23900: PPUSH
23901: LD_INT 1
23903: PPUSH
23904: LD_VAR 0 2
23908: PUSH
23909: LD_INT 1
23911: ARRAY
23912: PPUSH
23913: LD_INT 1
23915: PPUSH
23916: CALL_OW 3
23920: PPUSH
23921: CALL_OW 1
23925: ST_TO_ADDR
// tmp := 1 ;
23926: LD_ADDR_VAR 0 3
23930: PUSH
23931: LD_STRING 1
23933: ST_TO_ADDR
// end ; normal := normal & tmp ;
23934: LD_ADDR_VAR 0 5
23938: PUSH
23939: LD_VAR 0 5
23943: PUSH
23944: LD_VAR 0 3
23948: STR
23949: ST_TO_ADDR
// end ;
23950: GO 23850
23952: POP
23953: POP
// for i = 1 to hardcoreCounter do
23954: LD_ADDR_VAR 0 8
23958: PUSH
23959: DOUBLE
23960: LD_INT 1
23962: DEC
23963: ST_TO_ADDR
23964: LD_EXP 64
23968: PUSH
23969: FOR_TO
23970: IFFALSE 24075
// begin tmp := 0 ;
23972: LD_ADDR_VAR 0 3
23976: PUSH
23977: LD_STRING 0
23979: ST_TO_ADDR
// if result [ 2 ] then
23980: LD_VAR 0 2
23984: PUSH
23985: LD_INT 2
23987: ARRAY
23988: IFFALSE 24057
// if result [ 2 ] [ 1 ] = 100 + i then
23990: LD_VAR 0 2
23994: PUSH
23995: LD_INT 2
23997: ARRAY
23998: PUSH
23999: LD_INT 1
24001: ARRAY
24002: PUSH
24003: LD_INT 100
24005: PUSH
24006: LD_VAR 0 8
24010: PLUS
24011: EQUAL
24012: IFFALSE 24057
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24014: LD_ADDR_VAR 0 2
24018: PUSH
24019: LD_VAR 0 2
24023: PPUSH
24024: LD_INT 2
24026: PPUSH
24027: LD_VAR 0 2
24031: PUSH
24032: LD_INT 2
24034: ARRAY
24035: PPUSH
24036: LD_INT 1
24038: PPUSH
24039: CALL_OW 3
24043: PPUSH
24044: CALL_OW 1
24048: ST_TO_ADDR
// tmp := 1 ;
24049: LD_ADDR_VAR 0 3
24053: PUSH
24054: LD_STRING 1
24056: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24057: LD_ADDR_VAR 0 6
24061: PUSH
24062: LD_VAR 0 6
24066: PUSH
24067: LD_VAR 0 3
24071: STR
24072: ST_TO_ADDR
// end ;
24073: GO 23969
24075: POP
24076: POP
// if isGameLoad then
24077: LD_VAR 0 1
24081: IFFALSE 24556
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24083: LD_ADDR_VAR 0 4
24087: PUSH
24088: LD_EXP 67
24092: PUSH
24093: LD_EXP 66
24097: PUSH
24098: LD_EXP 68
24102: PUSH
24103: LD_EXP 65
24107: PUSH
24108: LD_EXP 69
24112: PUSH
24113: LD_EXP 70
24117: PUSH
24118: LD_EXP 71
24122: PUSH
24123: LD_EXP 72
24127: PUSH
24128: LD_EXP 73
24132: PUSH
24133: LD_EXP 74
24137: PUSH
24138: LD_EXP 75
24142: PUSH
24143: LD_EXP 76
24147: PUSH
24148: LD_EXP 77
24152: PUSH
24153: LD_EXP 78
24157: PUSH
24158: LD_EXP 86
24162: PUSH
24163: LD_EXP 87
24167: PUSH
24168: LD_EXP 88
24172: PUSH
24173: LD_EXP 89
24177: PUSH
24178: LD_EXP 91
24182: PUSH
24183: LD_EXP 92
24187: PUSH
24188: LD_EXP 93
24192: PUSH
24193: LD_EXP 96
24197: PUSH
24198: LD_EXP 98
24202: PUSH
24203: LD_EXP 99
24207: PUSH
24208: LD_EXP 100
24212: PUSH
24213: LD_EXP 102
24217: PUSH
24218: LD_EXP 103
24222: PUSH
24223: LD_EXP 106
24227: PUSH
24228: LD_EXP 107
24232: PUSH
24233: LD_EXP 108
24237: PUSH
24238: LD_EXP 109
24242: PUSH
24243: LD_EXP 110
24247: PUSH
24248: LD_EXP 111
24252: PUSH
24253: LD_EXP 112
24257: PUSH
24258: LD_EXP 113
24262: PUSH
24263: LD_EXP 114
24267: PUSH
24268: LD_EXP 79
24272: PUSH
24273: LD_EXP 80
24277: PUSH
24278: LD_EXP 83
24282: PUSH
24283: LD_EXP 84
24287: PUSH
24288: LD_EXP 85
24292: PUSH
24293: LD_EXP 81
24297: PUSH
24298: LD_EXP 82
24302: PUSH
24303: LD_EXP 90
24307: PUSH
24308: LD_EXP 94
24312: PUSH
24313: LD_EXP 95
24317: PUSH
24318: LD_EXP 97
24322: PUSH
24323: LD_EXP 101
24327: PUSH
24328: LD_EXP 104
24332: PUSH
24333: LD_EXP 105
24337: PUSH
24338: LD_EXP 115
24342: PUSH
24343: LD_EXP 116
24347: PUSH
24348: LD_EXP 117
24352: PUSH
24353: LD_EXP 118
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: ST_TO_ADDR
// tmp :=  ;
24414: LD_ADDR_VAR 0 3
24418: PUSH
24419: LD_STRING 
24421: ST_TO_ADDR
// for i = 1 to normalCounter do
24422: LD_ADDR_VAR 0 8
24426: PUSH
24427: DOUBLE
24428: LD_INT 1
24430: DEC
24431: ST_TO_ADDR
24432: LD_EXP 63
24436: PUSH
24437: FOR_TO
24438: IFFALSE 24474
// begin if flags [ i ] then
24440: LD_VAR 0 4
24444: PUSH
24445: LD_VAR 0 8
24449: ARRAY
24450: IFFALSE 24472
// tmp := tmp & i & ; ;
24452: LD_ADDR_VAR 0 3
24456: PUSH
24457: LD_VAR 0 3
24461: PUSH
24462: LD_VAR 0 8
24466: STR
24467: PUSH
24468: LD_STRING ;
24470: STR
24471: ST_TO_ADDR
// end ;
24472: GO 24437
24474: POP
24475: POP
// for i = 1 to hardcoreCounter do
24476: LD_ADDR_VAR 0 8
24480: PUSH
24481: DOUBLE
24482: LD_INT 1
24484: DEC
24485: ST_TO_ADDR
24486: LD_EXP 64
24490: PUSH
24491: FOR_TO
24492: IFFALSE 24538
// begin if flags [ normalCounter + i ] then
24494: LD_VAR 0 4
24498: PUSH
24499: LD_EXP 63
24503: PUSH
24504: LD_VAR 0 8
24508: PLUS
24509: ARRAY
24510: IFFALSE 24536
// tmp := tmp & ( 100 + i ) & ; ;
24512: LD_ADDR_VAR 0 3
24516: PUSH
24517: LD_VAR 0 3
24521: PUSH
24522: LD_INT 100
24524: PUSH
24525: LD_VAR 0 8
24529: PLUS
24530: STR
24531: PUSH
24532: LD_STRING ;
24534: STR
24535: ST_TO_ADDR
// end ;
24536: GO 24491
24538: POP
24539: POP
// if tmp then
24540: LD_VAR 0 3
24544: IFFALSE 24556
// active := tmp ;
24546: LD_ADDR_VAR 0 7
24550: PUSH
24551: LD_VAR 0 3
24555: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24556: LD_STRING getStreamItemsFromMission("
24558: PUSH
24559: LD_VAR 0 5
24563: STR
24564: PUSH
24565: LD_STRING ","
24567: STR
24568: PUSH
24569: LD_VAR 0 6
24573: STR
24574: PUSH
24575: LD_STRING ","
24577: STR
24578: PUSH
24579: LD_VAR 0 7
24583: STR
24584: PUSH
24585: LD_STRING ")
24587: STR
24588: PPUSH
24589: CALL_OW 559
// end else
24593: GO 24602
// ToLua ( getStreamItemsFromMission("","","") ) ;
24595: LD_STRING getStreamItemsFromMission("","","")
24597: PPUSH
24598: CALL_OW 559
// end ;
24602: LD_VAR 0 2
24606: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24607: LD_EXP 62
24611: PUSH
24612: LD_EXP 67
24616: AND
24617: IFFALSE 24741
24619: GO 24621
24621: DISABLE
24622: LD_INT 0
24624: PPUSH
24625: PPUSH
// begin enable ;
24626: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24627: LD_ADDR_VAR 0 2
24631: PUSH
24632: LD_INT 22
24634: PUSH
24635: LD_OWVAR 2
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 2
24646: PUSH
24647: LD_INT 34
24649: PUSH
24650: LD_INT 7
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 34
24659: PUSH
24660: LD_INT 45
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 34
24669: PUSH
24670: LD_INT 28
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 34
24679: PUSH
24680: LD_INT 47
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PPUSH
24698: CALL_OW 69
24702: ST_TO_ADDR
// if not tmp then
24703: LD_VAR 0 2
24707: NOT
24708: IFFALSE 24712
// exit ;
24710: GO 24741
// for i in tmp do
24712: LD_ADDR_VAR 0 1
24716: PUSH
24717: LD_VAR 0 2
24721: PUSH
24722: FOR_IN
24723: IFFALSE 24739
// begin SetLives ( i , 0 ) ;
24725: LD_VAR 0 1
24729: PPUSH
24730: LD_INT 0
24732: PPUSH
24733: CALL_OW 234
// end ;
24737: GO 24722
24739: POP
24740: POP
// end ;
24741: PPOPN 2
24743: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24744: LD_EXP 62
24748: PUSH
24749: LD_EXP 68
24753: AND
24754: IFFALSE 24838
24756: GO 24758
24758: DISABLE
24759: LD_INT 0
24761: PPUSH
24762: PPUSH
// begin enable ;
24763: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24764: LD_ADDR_VAR 0 2
24768: PUSH
24769: LD_INT 22
24771: PUSH
24772: LD_OWVAR 2
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 32
24783: PUSH
24784: LD_INT 3
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PPUSH
24795: CALL_OW 69
24799: ST_TO_ADDR
// if not tmp then
24800: LD_VAR 0 2
24804: NOT
24805: IFFALSE 24809
// exit ;
24807: GO 24838
// for i in tmp do
24809: LD_ADDR_VAR 0 1
24813: PUSH
24814: LD_VAR 0 2
24818: PUSH
24819: FOR_IN
24820: IFFALSE 24836
// begin SetLives ( i , 0 ) ;
24822: LD_VAR 0 1
24826: PPUSH
24827: LD_INT 0
24829: PPUSH
24830: CALL_OW 234
// end ;
24834: GO 24819
24836: POP
24837: POP
// end ;
24838: PPOPN 2
24840: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24841: LD_EXP 62
24845: PUSH
24846: LD_EXP 65
24850: AND
24851: IFFALSE 24944
24853: GO 24855
24855: DISABLE
24856: LD_INT 0
24858: PPUSH
// begin enable ;
24859: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24860: LD_ADDR_VAR 0 1
24864: PUSH
24865: LD_INT 22
24867: PUSH
24868: LD_OWVAR 2
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 2
24879: PUSH
24880: LD_INT 25
24882: PUSH
24883: LD_INT 5
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 25
24892: PUSH
24893: LD_INT 9
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 25
24902: PUSH
24903: LD_INT 8
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PPUSH
24920: CALL_OW 69
24924: PUSH
24925: FOR_IN
24926: IFFALSE 24942
// begin SetClass ( i , 1 ) ;
24928: LD_VAR 0 1
24932: PPUSH
24933: LD_INT 1
24935: PPUSH
24936: CALL_OW 336
// end ;
24940: GO 24925
24942: POP
24943: POP
// end ;
24944: PPOPN 1
24946: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24947: LD_EXP 62
24951: PUSH
24952: LD_EXP 66
24956: AND
24957: PUSH
24958: LD_OWVAR 65
24962: PUSH
24963: LD_INT 7
24965: LESS
24966: AND
24967: IFFALSE 24981
24969: GO 24971
24971: DISABLE
// begin enable ;
24972: ENABLE
// game_speed := 7 ;
24973: LD_ADDR_OWVAR 65
24977: PUSH
24978: LD_INT 7
24980: ST_TO_ADDR
// end ;
24981: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24982: LD_EXP 62
24986: PUSH
24987: LD_EXP 69
24991: AND
24992: IFFALSE 25194
24994: GO 24996
24996: DISABLE
24997: LD_INT 0
24999: PPUSH
25000: PPUSH
25001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25002: LD_ADDR_VAR 0 3
25006: PUSH
25007: LD_INT 81
25009: PUSH
25010: LD_OWVAR 2
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 21
25021: PUSH
25022: LD_INT 1
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PPUSH
25033: CALL_OW 69
25037: ST_TO_ADDR
// if not tmp then
25038: LD_VAR 0 3
25042: NOT
25043: IFFALSE 25047
// exit ;
25045: GO 25194
// if tmp > 5 then
25047: LD_VAR 0 3
25051: PUSH
25052: LD_INT 5
25054: GREATER
25055: IFFALSE 25067
// k := 5 else
25057: LD_ADDR_VAR 0 2
25061: PUSH
25062: LD_INT 5
25064: ST_TO_ADDR
25065: GO 25077
// k := tmp ;
25067: LD_ADDR_VAR 0 2
25071: PUSH
25072: LD_VAR 0 3
25076: ST_TO_ADDR
// for i := 1 to k do
25077: LD_ADDR_VAR 0 1
25081: PUSH
25082: DOUBLE
25083: LD_INT 1
25085: DEC
25086: ST_TO_ADDR
25087: LD_VAR 0 2
25091: PUSH
25092: FOR_TO
25093: IFFALSE 25192
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25095: LD_VAR 0 3
25099: PUSH
25100: LD_VAR 0 1
25104: ARRAY
25105: PPUSH
25106: LD_VAR 0 1
25110: PUSH
25111: LD_INT 4
25113: MOD
25114: PUSH
25115: LD_INT 1
25117: PLUS
25118: PPUSH
25119: CALL_OW 259
25123: PUSH
25124: LD_INT 10
25126: LESS
25127: IFFALSE 25190
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25129: LD_VAR 0 3
25133: PUSH
25134: LD_VAR 0 1
25138: ARRAY
25139: PPUSH
25140: LD_VAR 0 1
25144: PUSH
25145: LD_INT 4
25147: MOD
25148: PUSH
25149: LD_INT 1
25151: PLUS
25152: PPUSH
25153: LD_VAR 0 3
25157: PUSH
25158: LD_VAR 0 1
25162: ARRAY
25163: PPUSH
25164: LD_VAR 0 1
25168: PUSH
25169: LD_INT 4
25171: MOD
25172: PUSH
25173: LD_INT 1
25175: PLUS
25176: PPUSH
25177: CALL_OW 259
25181: PUSH
25182: LD_INT 1
25184: PLUS
25185: PPUSH
25186: CALL_OW 237
25190: GO 25092
25192: POP
25193: POP
// end ;
25194: PPOPN 3
25196: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25197: LD_EXP 62
25201: PUSH
25202: LD_EXP 70
25206: AND
25207: IFFALSE 25227
25209: GO 25211
25211: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25212: LD_INT 4
25214: PPUSH
25215: LD_OWVAR 2
25219: PPUSH
25220: LD_INT 0
25222: PPUSH
25223: CALL_OW 324
25227: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25228: LD_EXP 62
25232: PUSH
25233: LD_EXP 99
25237: AND
25238: IFFALSE 25258
25240: GO 25242
25242: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25243: LD_INT 19
25245: PPUSH
25246: LD_OWVAR 2
25250: PPUSH
25251: LD_INT 0
25253: PPUSH
25254: CALL_OW 324
25258: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25259: LD_EXP 62
25263: PUSH
25264: LD_EXP 71
25268: AND
25269: IFFALSE 25371
25271: GO 25273
25273: DISABLE
25274: LD_INT 0
25276: PPUSH
25277: PPUSH
// begin enable ;
25278: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25279: LD_ADDR_VAR 0 2
25283: PUSH
25284: LD_INT 22
25286: PUSH
25287: LD_OWVAR 2
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 2
25298: PUSH
25299: LD_INT 34
25301: PUSH
25302: LD_INT 11
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 34
25311: PUSH
25312: LD_INT 30
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: LIST
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PPUSH
25328: CALL_OW 69
25332: ST_TO_ADDR
// if not tmp then
25333: LD_VAR 0 2
25337: NOT
25338: IFFALSE 25342
// exit ;
25340: GO 25371
// for i in tmp do
25342: LD_ADDR_VAR 0 1
25346: PUSH
25347: LD_VAR 0 2
25351: PUSH
25352: FOR_IN
25353: IFFALSE 25369
// begin SetLives ( i , 0 ) ;
25355: LD_VAR 0 1
25359: PPUSH
25360: LD_INT 0
25362: PPUSH
25363: CALL_OW 234
// end ;
25367: GO 25352
25369: POP
25370: POP
// end ;
25371: PPOPN 2
25373: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25374: LD_EXP 62
25378: PUSH
25379: LD_EXP 72
25383: AND
25384: IFFALSE 25404
25386: GO 25388
25388: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25389: LD_INT 32
25391: PPUSH
25392: LD_OWVAR 2
25396: PPUSH
25397: LD_INT 0
25399: PPUSH
25400: CALL_OW 324
25404: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25405: LD_EXP 62
25409: PUSH
25410: LD_EXP 73
25414: AND
25415: IFFALSE 25596
25417: GO 25419
25419: DISABLE
25420: LD_INT 0
25422: PPUSH
25423: PPUSH
25424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25425: LD_ADDR_VAR 0 2
25429: PUSH
25430: LD_INT 22
25432: PUSH
25433: LD_OWVAR 2
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 33
25444: PUSH
25445: LD_INT 3
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PPUSH
25456: CALL_OW 69
25460: ST_TO_ADDR
// if not tmp then
25461: LD_VAR 0 2
25465: NOT
25466: IFFALSE 25470
// exit ;
25468: GO 25596
// side := 0 ;
25470: LD_ADDR_VAR 0 3
25474: PUSH
25475: LD_INT 0
25477: ST_TO_ADDR
// for i := 1 to 8 do
25478: LD_ADDR_VAR 0 1
25482: PUSH
25483: DOUBLE
25484: LD_INT 1
25486: DEC
25487: ST_TO_ADDR
25488: LD_INT 8
25490: PUSH
25491: FOR_TO
25492: IFFALSE 25540
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25494: LD_OWVAR 2
25498: PUSH
25499: LD_VAR 0 1
25503: NONEQUAL
25504: PUSH
25505: LD_OWVAR 2
25509: PPUSH
25510: LD_VAR 0 1
25514: PPUSH
25515: CALL_OW 81
25519: PUSH
25520: LD_INT 2
25522: EQUAL
25523: AND
25524: IFFALSE 25538
// begin side := i ;
25526: LD_ADDR_VAR 0 3
25530: PUSH
25531: LD_VAR 0 1
25535: ST_TO_ADDR
// break ;
25536: GO 25540
// end ;
25538: GO 25491
25540: POP
25541: POP
// if not side then
25542: LD_VAR 0 3
25546: NOT
25547: IFFALSE 25551
// exit ;
25549: GO 25596
// for i := 1 to tmp do
25551: LD_ADDR_VAR 0 1
25555: PUSH
25556: DOUBLE
25557: LD_INT 1
25559: DEC
25560: ST_TO_ADDR
25561: LD_VAR 0 2
25565: PUSH
25566: FOR_TO
25567: IFFALSE 25594
// if Prob ( 60 ) then
25569: LD_INT 60
25571: PPUSH
25572: CALL_OW 13
25576: IFFALSE 25592
// SetSide ( i , side ) ;
25578: LD_VAR 0 1
25582: PPUSH
25583: LD_VAR 0 3
25587: PPUSH
25588: CALL_OW 235
25592: GO 25566
25594: POP
25595: POP
// end ;
25596: PPOPN 3
25598: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25599: LD_EXP 62
25603: PUSH
25604: LD_EXP 75
25608: AND
25609: IFFALSE 25728
25611: GO 25613
25613: DISABLE
25614: LD_INT 0
25616: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25617: LD_ADDR_VAR 0 1
25621: PUSH
25622: LD_INT 22
25624: PUSH
25625: LD_OWVAR 2
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 21
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 3
25646: PUSH
25647: LD_INT 23
25649: PUSH
25650: LD_INT 0
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: LIST
25665: PPUSH
25666: CALL_OW 69
25670: PUSH
25671: FOR_IN
25672: IFFALSE 25726
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25674: LD_VAR 0 1
25678: PPUSH
25679: CALL_OW 257
25683: PUSH
25684: LD_INT 1
25686: PUSH
25687: LD_INT 2
25689: PUSH
25690: LD_INT 3
25692: PUSH
25693: LD_INT 4
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: IN
25702: IFFALSE 25724
// SetClass ( un , rand ( 1 , 4 ) ) ;
25704: LD_VAR 0 1
25708: PPUSH
25709: LD_INT 1
25711: PPUSH
25712: LD_INT 4
25714: PPUSH
25715: CALL_OW 12
25719: PPUSH
25720: CALL_OW 336
25724: GO 25671
25726: POP
25727: POP
// end ;
25728: PPOPN 1
25730: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25731: LD_EXP 62
25735: PUSH
25736: LD_EXP 74
25740: AND
25741: IFFALSE 25820
25743: GO 25745
25745: DISABLE
25746: LD_INT 0
25748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25749: LD_ADDR_VAR 0 1
25753: PUSH
25754: LD_INT 22
25756: PUSH
25757: LD_OWVAR 2
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 21
25768: PUSH
25769: LD_INT 3
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PPUSH
25780: CALL_OW 69
25784: ST_TO_ADDR
// if not tmp then
25785: LD_VAR 0 1
25789: NOT
25790: IFFALSE 25794
// exit ;
25792: GO 25820
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25794: LD_VAR 0 1
25798: PUSH
25799: LD_INT 1
25801: PPUSH
25802: LD_VAR 0 1
25806: PPUSH
25807: CALL_OW 12
25811: ARRAY
25812: PPUSH
25813: LD_INT 100
25815: PPUSH
25816: CALL_OW 234
// end ;
25820: PPOPN 1
25822: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25823: LD_EXP 62
25827: PUSH
25828: LD_EXP 76
25832: AND
25833: IFFALSE 25931
25835: GO 25837
25837: DISABLE
25838: LD_INT 0
25840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25841: LD_ADDR_VAR 0 1
25845: PUSH
25846: LD_INT 22
25848: PUSH
25849: LD_OWVAR 2
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 21
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PPUSH
25872: CALL_OW 69
25876: ST_TO_ADDR
// if not tmp then
25877: LD_VAR 0 1
25881: NOT
25882: IFFALSE 25886
// exit ;
25884: GO 25931
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25886: LD_VAR 0 1
25890: PUSH
25891: LD_INT 1
25893: PPUSH
25894: LD_VAR 0 1
25898: PPUSH
25899: CALL_OW 12
25903: ARRAY
25904: PPUSH
25905: LD_INT 1
25907: PPUSH
25908: LD_INT 4
25910: PPUSH
25911: CALL_OW 12
25915: PPUSH
25916: LD_INT 3000
25918: PPUSH
25919: LD_INT 9000
25921: PPUSH
25922: CALL_OW 12
25926: PPUSH
25927: CALL_OW 492
// end ;
25931: PPOPN 1
25933: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25934: LD_EXP 62
25938: PUSH
25939: LD_EXP 77
25943: AND
25944: IFFALSE 25964
25946: GO 25948
25948: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25949: LD_INT 1
25951: PPUSH
25952: LD_OWVAR 2
25956: PPUSH
25957: LD_INT 0
25959: PPUSH
25960: CALL_OW 324
25964: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25965: LD_EXP 62
25969: PUSH
25970: LD_EXP 78
25974: AND
25975: IFFALSE 26058
25977: GO 25979
25979: DISABLE
25980: LD_INT 0
25982: PPUSH
25983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25984: LD_ADDR_VAR 0 2
25988: PUSH
25989: LD_INT 22
25991: PUSH
25992: LD_OWVAR 2
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 21
26003: PUSH
26004: LD_INT 3
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PPUSH
26015: CALL_OW 69
26019: ST_TO_ADDR
// if not tmp then
26020: LD_VAR 0 2
26024: NOT
26025: IFFALSE 26029
// exit ;
26027: GO 26058
// for i in tmp do
26029: LD_ADDR_VAR 0 1
26033: PUSH
26034: LD_VAR 0 2
26038: PUSH
26039: FOR_IN
26040: IFFALSE 26056
// SetBLevel ( i , 10 ) ;
26042: LD_VAR 0 1
26046: PPUSH
26047: LD_INT 10
26049: PPUSH
26050: CALL_OW 241
26054: GO 26039
26056: POP
26057: POP
// end ;
26058: PPOPN 2
26060: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26061: LD_EXP 62
26065: PUSH
26066: LD_EXP 79
26070: AND
26071: IFFALSE 26182
26073: GO 26075
26075: DISABLE
26076: LD_INT 0
26078: PPUSH
26079: PPUSH
26080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26081: LD_ADDR_VAR 0 3
26085: PUSH
26086: LD_INT 22
26088: PUSH
26089: LD_OWVAR 2
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 25
26100: PUSH
26101: LD_INT 1
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PPUSH
26112: CALL_OW 69
26116: ST_TO_ADDR
// if not tmp then
26117: LD_VAR 0 3
26121: NOT
26122: IFFALSE 26126
// exit ;
26124: GO 26182
// un := tmp [ rand ( 1 , tmp ) ] ;
26126: LD_ADDR_VAR 0 2
26130: PUSH
26131: LD_VAR 0 3
26135: PUSH
26136: LD_INT 1
26138: PPUSH
26139: LD_VAR 0 3
26143: PPUSH
26144: CALL_OW 12
26148: ARRAY
26149: ST_TO_ADDR
// if Crawls ( un ) then
26150: LD_VAR 0 2
26154: PPUSH
26155: CALL_OW 318
26159: IFFALSE 26170
// ComWalk ( un ) ;
26161: LD_VAR 0 2
26165: PPUSH
26166: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26170: LD_VAR 0 2
26174: PPUSH
26175: LD_INT 5
26177: PPUSH
26178: CALL_OW 336
// end ;
26182: PPOPN 3
26184: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26185: LD_EXP 62
26189: PUSH
26190: LD_EXP 80
26194: AND
26195: PUSH
26196: LD_OWVAR 67
26200: PUSH
26201: LD_INT 4
26203: LESS
26204: AND
26205: IFFALSE 26224
26207: GO 26209
26209: DISABLE
// begin Difficulty := Difficulty + 1 ;
26210: LD_ADDR_OWVAR 67
26214: PUSH
26215: LD_OWVAR 67
26219: PUSH
26220: LD_INT 1
26222: PLUS
26223: ST_TO_ADDR
// end ;
26224: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26225: LD_EXP 62
26229: PUSH
26230: LD_EXP 81
26234: AND
26235: IFFALSE 26338
26237: GO 26239
26239: DISABLE
26240: LD_INT 0
26242: PPUSH
// begin for i := 1 to 5 do
26243: LD_ADDR_VAR 0 1
26247: PUSH
26248: DOUBLE
26249: LD_INT 1
26251: DEC
26252: ST_TO_ADDR
26253: LD_INT 5
26255: PUSH
26256: FOR_TO
26257: IFFALSE 26336
// begin uc_nation := nation_nature ;
26259: LD_ADDR_OWVAR 21
26263: PUSH
26264: LD_INT 0
26266: ST_TO_ADDR
// uc_side := 0 ;
26267: LD_ADDR_OWVAR 20
26271: PUSH
26272: LD_INT 0
26274: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26275: LD_ADDR_OWVAR 29
26279: PUSH
26280: LD_INT 12
26282: PUSH
26283: LD_INT 12
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: ST_TO_ADDR
// hc_agressivity := 20 ;
26290: LD_ADDR_OWVAR 35
26294: PUSH
26295: LD_INT 20
26297: ST_TO_ADDR
// hc_class := class_tiger ;
26298: LD_ADDR_OWVAR 28
26302: PUSH
26303: LD_INT 14
26305: ST_TO_ADDR
// hc_gallery :=  ;
26306: LD_ADDR_OWVAR 33
26310: PUSH
26311: LD_STRING 
26313: ST_TO_ADDR
// hc_name :=  ;
26314: LD_ADDR_OWVAR 26
26318: PUSH
26319: LD_STRING 
26321: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26322: CALL_OW 44
26326: PPUSH
26327: LD_INT 0
26329: PPUSH
26330: CALL_OW 51
// end ;
26334: GO 26256
26336: POP
26337: POP
// end ;
26338: PPOPN 1
26340: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26341: LD_EXP 62
26345: PUSH
26346: LD_EXP 82
26350: AND
26351: IFFALSE 26360
26353: GO 26355
26355: DISABLE
// StreamSibBomb ;
26356: CALL 26361 0 0
26360: END
// export function StreamSibBomb ; var i , x , y ; begin
26361: LD_INT 0
26363: PPUSH
26364: PPUSH
26365: PPUSH
26366: PPUSH
// result := false ;
26367: LD_ADDR_VAR 0 1
26371: PUSH
26372: LD_INT 0
26374: ST_TO_ADDR
// for i := 1 to 16 do
26375: LD_ADDR_VAR 0 2
26379: PUSH
26380: DOUBLE
26381: LD_INT 1
26383: DEC
26384: ST_TO_ADDR
26385: LD_INT 16
26387: PUSH
26388: FOR_TO
26389: IFFALSE 26588
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26391: LD_ADDR_VAR 0 3
26395: PUSH
26396: LD_INT 10
26398: PUSH
26399: LD_INT 20
26401: PUSH
26402: LD_INT 30
26404: PUSH
26405: LD_INT 40
26407: PUSH
26408: LD_INT 50
26410: PUSH
26411: LD_INT 60
26413: PUSH
26414: LD_INT 70
26416: PUSH
26417: LD_INT 80
26419: PUSH
26420: LD_INT 90
26422: PUSH
26423: LD_INT 100
26425: PUSH
26426: LD_INT 110
26428: PUSH
26429: LD_INT 120
26431: PUSH
26432: LD_INT 130
26434: PUSH
26435: LD_INT 140
26437: PUSH
26438: LD_INT 150
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: PPUSH
26461: LD_INT 15
26463: PPUSH
26464: CALL_OW 12
26468: ARRAY
26469: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26470: LD_ADDR_VAR 0 4
26474: PUSH
26475: LD_INT 10
26477: PUSH
26478: LD_INT 20
26480: PUSH
26481: LD_INT 30
26483: PUSH
26484: LD_INT 40
26486: PUSH
26487: LD_INT 50
26489: PUSH
26490: LD_INT 60
26492: PUSH
26493: LD_INT 70
26495: PUSH
26496: LD_INT 80
26498: PUSH
26499: LD_INT 90
26501: PUSH
26502: LD_INT 100
26504: PUSH
26505: LD_INT 110
26507: PUSH
26508: LD_INT 120
26510: PUSH
26511: LD_INT 130
26513: PUSH
26514: LD_INT 140
26516: PUSH
26517: LD_INT 150
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 1
26539: PPUSH
26540: LD_INT 15
26542: PPUSH
26543: CALL_OW 12
26547: ARRAY
26548: ST_TO_ADDR
// if ValidHex ( x , y ) then
26549: LD_VAR 0 3
26553: PPUSH
26554: LD_VAR 0 4
26558: PPUSH
26559: CALL_OW 488
26563: IFFALSE 26586
// begin result := [ x , y ] ;
26565: LD_ADDR_VAR 0 1
26569: PUSH
26570: LD_VAR 0 3
26574: PUSH
26575: LD_VAR 0 4
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: ST_TO_ADDR
// break ;
26584: GO 26588
// end ; end ;
26586: GO 26388
26588: POP
26589: POP
// if result then
26590: LD_VAR 0 1
26594: IFFALSE 26654
// begin ToLua ( playSibBomb() ) ;
26596: LD_STRING playSibBomb()
26598: PPUSH
26599: CALL_OW 559
// wait ( 0 0$14 ) ;
26603: LD_INT 490
26605: PPUSH
26606: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26610: LD_VAR 0 1
26614: PUSH
26615: LD_INT 1
26617: ARRAY
26618: PPUSH
26619: LD_VAR 0 1
26623: PUSH
26624: LD_INT 2
26626: ARRAY
26627: PPUSH
26628: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26632: LD_VAR 0 1
26636: PUSH
26637: LD_INT 1
26639: ARRAY
26640: PPUSH
26641: LD_VAR 0 1
26645: PUSH
26646: LD_INT 2
26648: ARRAY
26649: PPUSH
26650: CALL_OW 429
// end ; end ;
26654: LD_VAR 0 1
26658: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26659: LD_EXP 62
26663: PUSH
26664: LD_EXP 84
26668: AND
26669: IFFALSE 26681
26671: GO 26673
26673: DISABLE
// YouLost (  ) ;
26674: LD_STRING 
26676: PPUSH
26677: CALL_OW 104
26681: END
// every 0 0$1 trigger StreamModeActive and sFog do
26682: LD_EXP 62
26686: PUSH
26687: LD_EXP 83
26691: AND
26692: IFFALSE 26706
26694: GO 26696
26696: DISABLE
// FogOff ( your_side ) ;
26697: LD_OWVAR 2
26701: PPUSH
26702: CALL_OW 344
26706: END
// every 0 0$1 trigger StreamModeActive and sSun do
26707: LD_EXP 62
26711: PUSH
26712: LD_EXP 85
26716: AND
26717: IFFALSE 26745
26719: GO 26721
26721: DISABLE
// begin solar_recharge_percent := 0 ;
26722: LD_ADDR_OWVAR 79
26726: PUSH
26727: LD_INT 0
26729: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26730: LD_INT 10500
26732: PPUSH
26733: CALL_OW 67
// solar_recharge_percent := 100 ;
26737: LD_ADDR_OWVAR 79
26741: PUSH
26742: LD_INT 100
26744: ST_TO_ADDR
// end ;
26745: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26746: LD_EXP 62
26750: PUSH
26751: LD_EXP 86
26755: AND
26756: IFFALSE 26995
26758: GO 26760
26760: DISABLE
26761: LD_INT 0
26763: PPUSH
26764: PPUSH
26765: PPUSH
// begin tmp := [ ] ;
26766: LD_ADDR_VAR 0 3
26770: PUSH
26771: EMPTY
26772: ST_TO_ADDR
// for i := 1 to 6 do
26773: LD_ADDR_VAR 0 1
26777: PUSH
26778: DOUBLE
26779: LD_INT 1
26781: DEC
26782: ST_TO_ADDR
26783: LD_INT 6
26785: PUSH
26786: FOR_TO
26787: IFFALSE 26892
// begin uc_nation := nation_nature ;
26789: LD_ADDR_OWVAR 21
26793: PUSH
26794: LD_INT 0
26796: ST_TO_ADDR
// uc_side := 0 ;
26797: LD_ADDR_OWVAR 20
26801: PUSH
26802: LD_INT 0
26804: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26805: LD_ADDR_OWVAR 29
26809: PUSH
26810: LD_INT 12
26812: PUSH
26813: LD_INT 12
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: ST_TO_ADDR
// hc_agressivity := 20 ;
26820: LD_ADDR_OWVAR 35
26824: PUSH
26825: LD_INT 20
26827: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26828: LD_ADDR_OWVAR 28
26832: PUSH
26833: LD_INT 17
26835: ST_TO_ADDR
// hc_gallery :=  ;
26836: LD_ADDR_OWVAR 33
26840: PUSH
26841: LD_STRING 
26843: ST_TO_ADDR
// hc_name :=  ;
26844: LD_ADDR_OWVAR 26
26848: PUSH
26849: LD_STRING 
26851: ST_TO_ADDR
// un := CreateHuman ;
26852: LD_ADDR_VAR 0 2
26856: PUSH
26857: CALL_OW 44
26861: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26862: LD_VAR 0 2
26866: PPUSH
26867: LD_INT 1
26869: PPUSH
26870: CALL_OW 51
// tmp := tmp ^ un ;
26874: LD_ADDR_VAR 0 3
26878: PUSH
26879: LD_VAR 0 3
26883: PUSH
26884: LD_VAR 0 2
26888: ADD
26889: ST_TO_ADDR
// end ;
26890: GO 26786
26892: POP
26893: POP
// repeat wait ( 0 0$1 ) ;
26894: LD_INT 35
26896: PPUSH
26897: CALL_OW 67
// for un in tmp do
26901: LD_ADDR_VAR 0 2
26905: PUSH
26906: LD_VAR 0 3
26910: PUSH
26911: FOR_IN
26912: IFFALSE 26986
// begin if IsDead ( un ) then
26914: LD_VAR 0 2
26918: PPUSH
26919: CALL_OW 301
26923: IFFALSE 26943
// begin tmp := tmp diff un ;
26925: LD_ADDR_VAR 0 3
26929: PUSH
26930: LD_VAR 0 3
26934: PUSH
26935: LD_VAR 0 2
26939: DIFF
26940: ST_TO_ADDR
// continue ;
26941: GO 26911
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26943: LD_VAR 0 2
26947: PPUSH
26948: LD_INT 3
26950: PUSH
26951: LD_INT 22
26953: PUSH
26954: LD_INT 0
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PPUSH
26965: CALL_OW 69
26969: PPUSH
26970: LD_VAR 0 2
26974: PPUSH
26975: CALL_OW 74
26979: PPUSH
26980: CALL_OW 115
// end ;
26984: GO 26911
26986: POP
26987: POP
// until not tmp ;
26988: LD_VAR 0 3
26992: NOT
26993: IFFALSE 26894
// end ;
26995: PPOPN 3
26997: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26998: LD_EXP 62
27002: PUSH
27003: LD_EXP 87
27007: AND
27008: IFFALSE 27062
27010: GO 27012
27012: DISABLE
// begin ToLua ( displayTroll(); ) ;
27013: LD_STRING displayTroll();
27015: PPUSH
27016: CALL_OW 559
// wait ( 3 3$00 ) ;
27020: LD_INT 6300
27022: PPUSH
27023: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27027: LD_STRING hideTroll();
27029: PPUSH
27030: CALL_OW 559
// wait ( 1 1$00 ) ;
27034: LD_INT 2100
27036: PPUSH
27037: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27041: LD_STRING displayTroll();
27043: PPUSH
27044: CALL_OW 559
// wait ( 1 1$00 ) ;
27048: LD_INT 2100
27050: PPUSH
27051: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27055: LD_STRING hideTroll();
27057: PPUSH
27058: CALL_OW 559
// end ;
27062: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27063: LD_EXP 62
27067: PUSH
27068: LD_EXP 88
27072: AND
27073: IFFALSE 27136
27075: GO 27077
27077: DISABLE
27078: LD_INT 0
27080: PPUSH
// begin p := 0 ;
27081: LD_ADDR_VAR 0 1
27085: PUSH
27086: LD_INT 0
27088: ST_TO_ADDR
// repeat game_speed := 1 ;
27089: LD_ADDR_OWVAR 65
27093: PUSH
27094: LD_INT 1
27096: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27097: LD_INT 35
27099: PPUSH
27100: CALL_OW 67
// p := p + 1 ;
27104: LD_ADDR_VAR 0 1
27108: PUSH
27109: LD_VAR 0 1
27113: PUSH
27114: LD_INT 1
27116: PLUS
27117: ST_TO_ADDR
// until p >= 60 ;
27118: LD_VAR 0 1
27122: PUSH
27123: LD_INT 60
27125: GREATEREQUAL
27126: IFFALSE 27089
// game_speed := 4 ;
27128: LD_ADDR_OWVAR 65
27132: PUSH
27133: LD_INT 4
27135: ST_TO_ADDR
// end ;
27136: PPOPN 1
27138: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27139: LD_EXP 62
27143: PUSH
27144: LD_EXP 89
27148: AND
27149: IFFALSE 27295
27151: GO 27153
27153: DISABLE
27154: LD_INT 0
27156: PPUSH
27157: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27158: LD_ADDR_VAR 0 1
27162: PUSH
27163: LD_INT 22
27165: PUSH
27166: LD_OWVAR 2
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 2
27177: PUSH
27178: LD_INT 30
27180: PUSH
27181: LD_INT 0
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 30
27190: PUSH
27191: LD_INT 1
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: LIST
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PPUSH
27207: CALL_OW 69
27211: ST_TO_ADDR
// if not depot then
27212: LD_VAR 0 1
27216: NOT
27217: IFFALSE 27221
// exit ;
27219: GO 27295
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27221: LD_ADDR_VAR 0 2
27225: PUSH
27226: LD_VAR 0 1
27230: PUSH
27231: LD_INT 1
27233: PPUSH
27234: LD_VAR 0 1
27238: PPUSH
27239: CALL_OW 12
27243: ARRAY
27244: PPUSH
27245: CALL_OW 274
27249: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27250: LD_VAR 0 2
27254: PPUSH
27255: LD_INT 1
27257: PPUSH
27258: LD_INT 0
27260: PPUSH
27261: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27265: LD_VAR 0 2
27269: PPUSH
27270: LD_INT 2
27272: PPUSH
27273: LD_INT 0
27275: PPUSH
27276: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27280: LD_VAR 0 2
27284: PPUSH
27285: LD_INT 3
27287: PPUSH
27288: LD_INT 0
27290: PPUSH
27291: CALL_OW 277
// end ;
27295: PPOPN 2
27297: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27298: LD_EXP 62
27302: PUSH
27303: LD_EXP 90
27307: AND
27308: IFFALSE 27405
27310: GO 27312
27312: DISABLE
27313: LD_INT 0
27315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27316: LD_ADDR_VAR 0 1
27320: PUSH
27321: LD_INT 22
27323: PUSH
27324: LD_OWVAR 2
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 21
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 3
27345: PUSH
27346: LD_INT 23
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: LIST
27364: PPUSH
27365: CALL_OW 69
27369: ST_TO_ADDR
// if not tmp then
27370: LD_VAR 0 1
27374: NOT
27375: IFFALSE 27379
// exit ;
27377: GO 27405
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27379: LD_VAR 0 1
27383: PUSH
27384: LD_INT 1
27386: PPUSH
27387: LD_VAR 0 1
27391: PPUSH
27392: CALL_OW 12
27396: ARRAY
27397: PPUSH
27398: LD_INT 200
27400: PPUSH
27401: CALL_OW 234
// end ;
27405: PPOPN 1
27407: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27408: LD_EXP 62
27412: PUSH
27413: LD_EXP 91
27417: AND
27418: IFFALSE 27497
27420: GO 27422
27422: DISABLE
27423: LD_INT 0
27425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27426: LD_ADDR_VAR 0 1
27430: PUSH
27431: LD_INT 22
27433: PUSH
27434: LD_OWVAR 2
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 21
27445: PUSH
27446: LD_INT 2
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PPUSH
27457: CALL_OW 69
27461: ST_TO_ADDR
// if not tmp then
27462: LD_VAR 0 1
27466: NOT
27467: IFFALSE 27471
// exit ;
27469: GO 27497
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27471: LD_VAR 0 1
27475: PUSH
27476: LD_INT 1
27478: PPUSH
27479: LD_VAR 0 1
27483: PPUSH
27484: CALL_OW 12
27488: ARRAY
27489: PPUSH
27490: LD_INT 60
27492: PPUSH
27493: CALL_OW 234
// end ;
27497: PPOPN 1
27499: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27500: LD_EXP 62
27504: PUSH
27505: LD_EXP 92
27509: AND
27510: IFFALSE 27609
27512: GO 27514
27514: DISABLE
27515: LD_INT 0
27517: PPUSH
27518: PPUSH
// begin enable ;
27519: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27520: LD_ADDR_VAR 0 1
27524: PUSH
27525: LD_INT 22
27527: PUSH
27528: LD_OWVAR 2
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 61
27539: PUSH
27540: EMPTY
27541: LIST
27542: PUSH
27543: LD_INT 33
27545: PUSH
27546: LD_INT 2
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: LIST
27557: PPUSH
27558: CALL_OW 69
27562: ST_TO_ADDR
// if not tmp then
27563: LD_VAR 0 1
27567: NOT
27568: IFFALSE 27572
// exit ;
27570: GO 27609
// for i in tmp do
27572: LD_ADDR_VAR 0 2
27576: PUSH
27577: LD_VAR 0 1
27581: PUSH
27582: FOR_IN
27583: IFFALSE 27607
// if IsControledBy ( i ) then
27585: LD_VAR 0 2
27589: PPUSH
27590: CALL_OW 312
27594: IFFALSE 27605
// ComUnlink ( i ) ;
27596: LD_VAR 0 2
27600: PPUSH
27601: CALL_OW 136
27605: GO 27582
27607: POP
27608: POP
// end ;
27609: PPOPN 2
27611: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27612: LD_EXP 62
27616: PUSH
27617: LD_EXP 93
27621: AND
27622: IFFALSE 27762
27624: GO 27626
27626: DISABLE
27627: LD_INT 0
27629: PPUSH
27630: PPUSH
// begin ToLua ( displayPowell(); ) ;
27631: LD_STRING displayPowell();
27633: PPUSH
27634: CALL_OW 559
// uc_side := 0 ;
27638: LD_ADDR_OWVAR 20
27642: PUSH
27643: LD_INT 0
27645: ST_TO_ADDR
// uc_nation := 2 ;
27646: LD_ADDR_OWVAR 21
27650: PUSH
27651: LD_INT 2
27653: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27654: LD_ADDR_OWVAR 37
27658: PUSH
27659: LD_INT 14
27661: ST_TO_ADDR
// vc_engine := engine_siberite ;
27662: LD_ADDR_OWVAR 39
27666: PUSH
27667: LD_INT 3
27669: ST_TO_ADDR
// vc_control := control_apeman ;
27670: LD_ADDR_OWVAR 38
27674: PUSH
27675: LD_INT 5
27677: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27678: LD_ADDR_OWVAR 40
27682: PUSH
27683: LD_INT 29
27685: ST_TO_ADDR
// un := CreateVehicle ;
27686: LD_ADDR_VAR 0 2
27690: PUSH
27691: CALL_OW 45
27695: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27696: LD_VAR 0 2
27700: PPUSH
27701: LD_INT 1
27703: PPUSH
27704: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27708: LD_INT 35
27710: PPUSH
27711: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27715: LD_VAR 0 2
27719: PPUSH
27720: LD_INT 22
27722: PUSH
27723: LD_OWVAR 2
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PPUSH
27732: CALL_OW 69
27736: PPUSH
27737: LD_VAR 0 2
27741: PPUSH
27742: CALL_OW 74
27746: PPUSH
27747: CALL_OW 115
// until IsDead ( un ) ;
27751: LD_VAR 0 2
27755: PPUSH
27756: CALL_OW 301
27760: IFFALSE 27708
// end ;
27762: PPOPN 2
27764: END
// every 0 0$1 trigger StreamModeActive and sStu do
27765: LD_EXP 62
27769: PUSH
27770: LD_EXP 101
27774: AND
27775: IFFALSE 27791
27777: GO 27779
27779: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27780: LD_STRING displayStucuk();
27782: PPUSH
27783: CALL_OW 559
// ResetFog ;
27787: CALL_OW 335
// end ;
27791: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27792: LD_EXP 62
27796: PUSH
27797: LD_EXP 94
27801: AND
27802: IFFALSE 27943
27804: GO 27806
27806: DISABLE
27807: LD_INT 0
27809: PPUSH
27810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27811: LD_ADDR_VAR 0 2
27815: PUSH
27816: LD_INT 22
27818: PUSH
27819: LD_OWVAR 2
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 21
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PPUSH
27842: CALL_OW 69
27846: ST_TO_ADDR
// if not tmp then
27847: LD_VAR 0 2
27851: NOT
27852: IFFALSE 27856
// exit ;
27854: GO 27943
// un := tmp [ rand ( 1 , tmp ) ] ;
27856: LD_ADDR_VAR 0 1
27860: PUSH
27861: LD_VAR 0 2
27865: PUSH
27866: LD_INT 1
27868: PPUSH
27869: LD_VAR 0 2
27873: PPUSH
27874: CALL_OW 12
27878: ARRAY
27879: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27880: LD_VAR 0 1
27884: PPUSH
27885: LD_INT 0
27887: PPUSH
27888: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27892: LD_VAR 0 1
27896: PPUSH
27897: LD_OWVAR 3
27901: PUSH
27902: LD_VAR 0 1
27906: DIFF
27907: PPUSH
27908: LD_VAR 0 1
27912: PPUSH
27913: CALL_OW 74
27917: PPUSH
27918: CALL_OW 115
// wait ( 0 0$20 ) ;
27922: LD_INT 700
27924: PPUSH
27925: CALL_OW 67
// SetSide ( un , your_side ) ;
27929: LD_VAR 0 1
27933: PPUSH
27934: LD_OWVAR 2
27938: PPUSH
27939: CALL_OW 235
// end ;
27943: PPOPN 2
27945: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27946: LD_EXP 62
27950: PUSH
27951: LD_EXP 95
27955: AND
27956: IFFALSE 28062
27958: GO 27960
27960: DISABLE
27961: LD_INT 0
27963: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27964: LD_ADDR_VAR 0 1
27968: PUSH
27969: LD_INT 22
27971: PUSH
27972: LD_OWVAR 2
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 2
27983: PUSH
27984: LD_INT 30
27986: PUSH
27987: LD_INT 0
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 30
27996: PUSH
27997: LD_INT 1
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: LIST
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PPUSH
28013: CALL_OW 69
28017: ST_TO_ADDR
// if not depot then
28018: LD_VAR 0 1
28022: NOT
28023: IFFALSE 28027
// exit ;
28025: GO 28062
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28027: LD_VAR 0 1
28031: PUSH
28032: LD_INT 1
28034: ARRAY
28035: PPUSH
28036: CALL_OW 250
28040: PPUSH
28041: LD_VAR 0 1
28045: PUSH
28046: LD_INT 1
28048: ARRAY
28049: PPUSH
28050: CALL_OW 251
28054: PPUSH
28055: LD_INT 70
28057: PPUSH
28058: CALL_OW 495
// end ;
28062: PPOPN 1
28064: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28065: LD_EXP 62
28069: PUSH
28070: LD_EXP 96
28074: AND
28075: IFFALSE 28286
28077: GO 28079
28079: DISABLE
28080: LD_INT 0
28082: PPUSH
28083: PPUSH
28084: PPUSH
28085: PPUSH
28086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28087: LD_ADDR_VAR 0 5
28091: PUSH
28092: LD_INT 22
28094: PUSH
28095: LD_OWVAR 2
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 21
28106: PUSH
28107: LD_INT 1
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PPUSH
28118: CALL_OW 69
28122: ST_TO_ADDR
// if not tmp then
28123: LD_VAR 0 5
28127: NOT
28128: IFFALSE 28132
// exit ;
28130: GO 28286
// for i in tmp do
28132: LD_ADDR_VAR 0 1
28136: PUSH
28137: LD_VAR 0 5
28141: PUSH
28142: FOR_IN
28143: IFFALSE 28284
// begin d := rand ( 0 , 5 ) ;
28145: LD_ADDR_VAR 0 4
28149: PUSH
28150: LD_INT 0
28152: PPUSH
28153: LD_INT 5
28155: PPUSH
28156: CALL_OW 12
28160: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28161: LD_ADDR_VAR 0 2
28165: PUSH
28166: LD_VAR 0 1
28170: PPUSH
28171: CALL_OW 250
28175: PPUSH
28176: LD_VAR 0 4
28180: PPUSH
28181: LD_INT 3
28183: PPUSH
28184: LD_INT 12
28186: PPUSH
28187: CALL_OW 12
28191: PPUSH
28192: CALL_OW 272
28196: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28197: LD_ADDR_VAR 0 3
28201: PUSH
28202: LD_VAR 0 1
28206: PPUSH
28207: CALL_OW 251
28211: PPUSH
28212: LD_VAR 0 4
28216: PPUSH
28217: LD_INT 3
28219: PPUSH
28220: LD_INT 12
28222: PPUSH
28223: CALL_OW 12
28227: PPUSH
28228: CALL_OW 273
28232: ST_TO_ADDR
// if ValidHex ( x , y ) then
28233: LD_VAR 0 2
28237: PPUSH
28238: LD_VAR 0 3
28242: PPUSH
28243: CALL_OW 488
28247: IFFALSE 28282
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28249: LD_VAR 0 1
28253: PPUSH
28254: LD_VAR 0 2
28258: PPUSH
28259: LD_VAR 0 3
28263: PPUSH
28264: LD_INT 3
28266: PPUSH
28267: LD_INT 6
28269: PPUSH
28270: CALL_OW 12
28274: PPUSH
28275: LD_INT 1
28277: PPUSH
28278: CALL_OW 483
// end ;
28282: GO 28142
28284: POP
28285: POP
// end ;
28286: PPOPN 5
28288: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28289: LD_EXP 62
28293: PUSH
28294: LD_EXP 97
28298: AND
28299: IFFALSE 28393
28301: GO 28303
28303: DISABLE
28304: LD_INT 0
28306: PPUSH
28307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28308: LD_ADDR_VAR 0 2
28312: PUSH
28313: LD_INT 22
28315: PUSH
28316: LD_OWVAR 2
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 32
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 21
28337: PUSH
28338: LD_INT 2
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: LIST
28349: PPUSH
28350: CALL_OW 69
28354: ST_TO_ADDR
// if not tmp then
28355: LD_VAR 0 2
28359: NOT
28360: IFFALSE 28364
// exit ;
28362: GO 28393
// for i in tmp do
28364: LD_ADDR_VAR 0 1
28368: PUSH
28369: LD_VAR 0 2
28373: PUSH
28374: FOR_IN
28375: IFFALSE 28391
// SetFuel ( i , 0 ) ;
28377: LD_VAR 0 1
28381: PPUSH
28382: LD_INT 0
28384: PPUSH
28385: CALL_OW 240
28389: GO 28374
28391: POP
28392: POP
// end ;
28393: PPOPN 2
28395: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28396: LD_EXP 62
28400: PUSH
28401: LD_EXP 98
28405: AND
28406: IFFALSE 28472
28408: GO 28410
28410: DISABLE
28411: LD_INT 0
28413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28414: LD_ADDR_VAR 0 1
28418: PUSH
28419: LD_INT 22
28421: PUSH
28422: LD_OWVAR 2
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 30
28433: PUSH
28434: LD_INT 29
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PPUSH
28445: CALL_OW 69
28449: ST_TO_ADDR
// if not tmp then
28450: LD_VAR 0 1
28454: NOT
28455: IFFALSE 28459
// exit ;
28457: GO 28472
// DestroyUnit ( tmp [ 1 ] ) ;
28459: LD_VAR 0 1
28463: PUSH
28464: LD_INT 1
28466: ARRAY
28467: PPUSH
28468: CALL_OW 65
// end ;
28472: PPOPN 1
28474: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28475: LD_EXP 62
28479: PUSH
28480: LD_EXP 100
28484: AND
28485: IFFALSE 28614
28487: GO 28489
28489: DISABLE
28490: LD_INT 0
28492: PPUSH
// begin uc_side := 0 ;
28493: LD_ADDR_OWVAR 20
28497: PUSH
28498: LD_INT 0
28500: ST_TO_ADDR
// uc_nation := nation_arabian ;
28501: LD_ADDR_OWVAR 21
28505: PUSH
28506: LD_INT 2
28508: ST_TO_ADDR
// hc_gallery :=  ;
28509: LD_ADDR_OWVAR 33
28513: PUSH
28514: LD_STRING 
28516: ST_TO_ADDR
// hc_name :=  ;
28517: LD_ADDR_OWVAR 26
28521: PUSH
28522: LD_STRING 
28524: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28525: LD_INT 1
28527: PPUSH
28528: LD_INT 11
28530: PPUSH
28531: LD_INT 10
28533: PPUSH
28534: CALL_OW 380
// un := CreateHuman ;
28538: LD_ADDR_VAR 0 1
28542: PUSH
28543: CALL_OW 44
28547: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28548: LD_VAR 0 1
28552: PPUSH
28553: LD_INT 1
28555: PPUSH
28556: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28560: LD_INT 35
28562: PPUSH
28563: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28567: LD_VAR 0 1
28571: PPUSH
28572: LD_INT 22
28574: PUSH
28575: LD_OWVAR 2
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PPUSH
28584: CALL_OW 69
28588: PPUSH
28589: LD_VAR 0 1
28593: PPUSH
28594: CALL_OW 74
28598: PPUSH
28599: CALL_OW 115
// until IsDead ( un ) ;
28603: LD_VAR 0 1
28607: PPUSH
28608: CALL_OW 301
28612: IFFALSE 28560
// end ;
28614: PPOPN 1
28616: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28617: LD_EXP 62
28621: PUSH
28622: LD_EXP 102
28626: AND
28627: IFFALSE 28639
28629: GO 28631
28631: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28632: LD_STRING earthquake(getX(game), 0, 32)
28634: PPUSH
28635: CALL_OW 559
28639: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28640: LD_EXP 62
28644: PUSH
28645: LD_EXP 103
28649: AND
28650: IFFALSE 28741
28652: GO 28654
28654: DISABLE
28655: LD_INT 0
28657: PPUSH
// begin enable ;
28658: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28659: LD_ADDR_VAR 0 1
28663: PUSH
28664: LD_INT 22
28666: PUSH
28667: LD_OWVAR 2
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 21
28678: PUSH
28679: LD_INT 2
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 33
28688: PUSH
28689: LD_INT 3
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: LIST
28700: PPUSH
28701: CALL_OW 69
28705: ST_TO_ADDR
// if not tmp then
28706: LD_VAR 0 1
28710: NOT
28711: IFFALSE 28715
// exit ;
28713: GO 28741
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28715: LD_VAR 0 1
28719: PUSH
28720: LD_INT 1
28722: PPUSH
28723: LD_VAR 0 1
28727: PPUSH
28728: CALL_OW 12
28732: ARRAY
28733: PPUSH
28734: LD_INT 1
28736: PPUSH
28737: CALL_OW 234
// end ;
28741: PPOPN 1
28743: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28744: LD_EXP 62
28748: PUSH
28749: LD_EXP 104
28753: AND
28754: IFFALSE 28895
28756: GO 28758
28758: DISABLE
28759: LD_INT 0
28761: PPUSH
28762: PPUSH
28763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28764: LD_ADDR_VAR 0 3
28768: PUSH
28769: LD_INT 22
28771: PUSH
28772: LD_OWVAR 2
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 25
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PPUSH
28795: CALL_OW 69
28799: ST_TO_ADDR
// if not tmp then
28800: LD_VAR 0 3
28804: NOT
28805: IFFALSE 28809
// exit ;
28807: GO 28895
// un := tmp [ rand ( 1 , tmp ) ] ;
28809: LD_ADDR_VAR 0 2
28813: PUSH
28814: LD_VAR 0 3
28818: PUSH
28819: LD_INT 1
28821: PPUSH
28822: LD_VAR 0 3
28826: PPUSH
28827: CALL_OW 12
28831: ARRAY
28832: ST_TO_ADDR
// if Crawls ( un ) then
28833: LD_VAR 0 2
28837: PPUSH
28838: CALL_OW 318
28842: IFFALSE 28853
// ComWalk ( un ) ;
28844: LD_VAR 0 2
28848: PPUSH
28849: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28853: LD_VAR 0 2
28857: PPUSH
28858: LD_INT 9
28860: PPUSH
28861: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28865: LD_INT 28
28867: PPUSH
28868: LD_OWVAR 2
28872: PPUSH
28873: LD_INT 2
28875: PPUSH
28876: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28880: LD_INT 29
28882: PPUSH
28883: LD_OWVAR 2
28887: PPUSH
28888: LD_INT 2
28890: PPUSH
28891: CALL_OW 322
// end ;
28895: PPOPN 3
28897: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28898: LD_EXP 62
28902: PUSH
28903: LD_EXP 105
28907: AND
28908: IFFALSE 29019
28910: GO 28912
28912: DISABLE
28913: LD_INT 0
28915: PPUSH
28916: PPUSH
28917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28918: LD_ADDR_VAR 0 3
28922: PUSH
28923: LD_INT 22
28925: PUSH
28926: LD_OWVAR 2
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 25
28937: PUSH
28938: LD_INT 1
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PPUSH
28949: CALL_OW 69
28953: ST_TO_ADDR
// if not tmp then
28954: LD_VAR 0 3
28958: NOT
28959: IFFALSE 28963
// exit ;
28961: GO 29019
// un := tmp [ rand ( 1 , tmp ) ] ;
28963: LD_ADDR_VAR 0 2
28967: PUSH
28968: LD_VAR 0 3
28972: PUSH
28973: LD_INT 1
28975: PPUSH
28976: LD_VAR 0 3
28980: PPUSH
28981: CALL_OW 12
28985: ARRAY
28986: ST_TO_ADDR
// if Crawls ( un ) then
28987: LD_VAR 0 2
28991: PPUSH
28992: CALL_OW 318
28996: IFFALSE 29007
// ComWalk ( un ) ;
28998: LD_VAR 0 2
29002: PPUSH
29003: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29007: LD_VAR 0 2
29011: PPUSH
29012: LD_INT 8
29014: PPUSH
29015: CALL_OW 336
// end ;
29019: PPOPN 3
29021: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29022: LD_EXP 62
29026: PUSH
29027: LD_EXP 106
29031: AND
29032: IFFALSE 29176
29034: GO 29036
29036: DISABLE
29037: LD_INT 0
29039: PPUSH
29040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29041: LD_ADDR_VAR 0 2
29045: PUSH
29046: LD_INT 22
29048: PUSH
29049: LD_OWVAR 2
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 21
29060: PUSH
29061: LD_INT 2
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 2
29070: PUSH
29071: LD_INT 34
29073: PUSH
29074: LD_INT 12
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 34
29083: PUSH
29084: LD_INT 51
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 34
29093: PUSH
29094: LD_INT 32
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: LIST
29111: PPUSH
29112: CALL_OW 69
29116: ST_TO_ADDR
// if not tmp then
29117: LD_VAR 0 2
29121: NOT
29122: IFFALSE 29126
// exit ;
29124: GO 29176
// for i in tmp do
29126: LD_ADDR_VAR 0 1
29130: PUSH
29131: LD_VAR 0 2
29135: PUSH
29136: FOR_IN
29137: IFFALSE 29174
// if GetCargo ( i , mat_artifact ) = 0 then
29139: LD_VAR 0 1
29143: PPUSH
29144: LD_INT 4
29146: PPUSH
29147: CALL_OW 289
29151: PUSH
29152: LD_INT 0
29154: EQUAL
29155: IFFALSE 29172
// SetCargo ( i , mat_siberit , 100 ) ;
29157: LD_VAR 0 1
29161: PPUSH
29162: LD_INT 3
29164: PPUSH
29165: LD_INT 100
29167: PPUSH
29168: CALL_OW 290
29172: GO 29136
29174: POP
29175: POP
// end ;
29176: PPOPN 2
29178: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29179: LD_EXP 62
29183: PUSH
29184: LD_EXP 107
29188: AND
29189: IFFALSE 29372
29191: GO 29193
29193: DISABLE
29194: LD_INT 0
29196: PPUSH
29197: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29198: LD_ADDR_VAR 0 2
29202: PUSH
29203: LD_INT 22
29205: PUSH
29206: LD_OWVAR 2
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PPUSH
29215: CALL_OW 69
29219: ST_TO_ADDR
// if not tmp then
29220: LD_VAR 0 2
29224: NOT
29225: IFFALSE 29229
// exit ;
29227: GO 29372
// for i := 1 to 2 do
29229: LD_ADDR_VAR 0 1
29233: PUSH
29234: DOUBLE
29235: LD_INT 1
29237: DEC
29238: ST_TO_ADDR
29239: LD_INT 2
29241: PUSH
29242: FOR_TO
29243: IFFALSE 29370
// begin uc_side := your_side ;
29245: LD_ADDR_OWVAR 20
29249: PUSH
29250: LD_OWVAR 2
29254: ST_TO_ADDR
// uc_nation := nation_american ;
29255: LD_ADDR_OWVAR 21
29259: PUSH
29260: LD_INT 1
29262: ST_TO_ADDR
// vc_chassis := us_morphling ;
29263: LD_ADDR_OWVAR 37
29267: PUSH
29268: LD_INT 5
29270: ST_TO_ADDR
// vc_engine := engine_siberite ;
29271: LD_ADDR_OWVAR 39
29275: PUSH
29276: LD_INT 3
29278: ST_TO_ADDR
// vc_control := control_computer ;
29279: LD_ADDR_OWVAR 38
29283: PUSH
29284: LD_INT 3
29286: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29287: LD_ADDR_OWVAR 40
29291: PUSH
29292: LD_INT 10
29294: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29295: LD_VAR 0 2
29299: PUSH
29300: LD_INT 1
29302: ARRAY
29303: PPUSH
29304: CALL_OW 310
29308: NOT
29309: IFFALSE 29356
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29311: CALL_OW 45
29315: PPUSH
29316: LD_VAR 0 2
29320: PUSH
29321: LD_INT 1
29323: ARRAY
29324: PPUSH
29325: CALL_OW 250
29329: PPUSH
29330: LD_VAR 0 2
29334: PUSH
29335: LD_INT 1
29337: ARRAY
29338: PPUSH
29339: CALL_OW 251
29343: PPUSH
29344: LD_INT 12
29346: PPUSH
29347: LD_INT 1
29349: PPUSH
29350: CALL_OW 50
29354: GO 29368
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29356: CALL_OW 45
29360: PPUSH
29361: LD_INT 1
29363: PPUSH
29364: CALL_OW 51
// end ;
29368: GO 29242
29370: POP
29371: POP
// end ;
29372: PPOPN 2
29374: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29375: LD_EXP 62
29379: PUSH
29380: LD_EXP 108
29384: AND
29385: IFFALSE 29607
29387: GO 29389
29389: DISABLE
29390: LD_INT 0
29392: PPUSH
29393: PPUSH
29394: PPUSH
29395: PPUSH
29396: PPUSH
29397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29398: LD_ADDR_VAR 0 6
29402: PUSH
29403: LD_INT 22
29405: PUSH
29406: LD_OWVAR 2
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 21
29417: PUSH
29418: LD_INT 1
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 3
29427: PUSH
29428: LD_INT 23
29430: PUSH
29431: LD_INT 0
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: LIST
29446: PPUSH
29447: CALL_OW 69
29451: ST_TO_ADDR
// if not tmp then
29452: LD_VAR 0 6
29456: NOT
29457: IFFALSE 29461
// exit ;
29459: GO 29607
// s1 := rand ( 1 , 4 ) ;
29461: LD_ADDR_VAR 0 2
29465: PUSH
29466: LD_INT 1
29468: PPUSH
29469: LD_INT 4
29471: PPUSH
29472: CALL_OW 12
29476: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29477: LD_ADDR_VAR 0 4
29481: PUSH
29482: LD_VAR 0 6
29486: PUSH
29487: LD_INT 1
29489: ARRAY
29490: PPUSH
29491: LD_VAR 0 2
29495: PPUSH
29496: CALL_OW 259
29500: ST_TO_ADDR
// if s1 = 1 then
29501: LD_VAR 0 2
29505: PUSH
29506: LD_INT 1
29508: EQUAL
29509: IFFALSE 29529
// s2 := rand ( 2 , 4 ) else
29511: LD_ADDR_VAR 0 3
29515: PUSH
29516: LD_INT 2
29518: PPUSH
29519: LD_INT 4
29521: PPUSH
29522: CALL_OW 12
29526: ST_TO_ADDR
29527: GO 29537
// s2 := 1 ;
29529: LD_ADDR_VAR 0 3
29533: PUSH
29534: LD_INT 1
29536: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29537: LD_ADDR_VAR 0 5
29541: PUSH
29542: LD_VAR 0 6
29546: PUSH
29547: LD_INT 1
29549: ARRAY
29550: PPUSH
29551: LD_VAR 0 3
29555: PPUSH
29556: CALL_OW 259
29560: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29561: LD_VAR 0 6
29565: PUSH
29566: LD_INT 1
29568: ARRAY
29569: PPUSH
29570: LD_VAR 0 2
29574: PPUSH
29575: LD_VAR 0 5
29579: PPUSH
29580: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29584: LD_VAR 0 6
29588: PUSH
29589: LD_INT 1
29591: ARRAY
29592: PPUSH
29593: LD_VAR 0 3
29597: PPUSH
29598: LD_VAR 0 4
29602: PPUSH
29603: CALL_OW 237
// end ;
29607: PPOPN 6
29609: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29610: LD_EXP 62
29614: PUSH
29615: LD_EXP 109
29619: AND
29620: IFFALSE 29699
29622: GO 29624
29624: DISABLE
29625: LD_INT 0
29627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29628: LD_ADDR_VAR 0 1
29632: PUSH
29633: LD_INT 22
29635: PUSH
29636: LD_OWVAR 2
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 30
29647: PUSH
29648: LD_INT 3
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PPUSH
29659: CALL_OW 69
29663: ST_TO_ADDR
// if not tmp then
29664: LD_VAR 0 1
29668: NOT
29669: IFFALSE 29673
// exit ;
29671: GO 29699
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29673: LD_VAR 0 1
29677: PUSH
29678: LD_INT 1
29680: PPUSH
29681: LD_VAR 0 1
29685: PPUSH
29686: CALL_OW 12
29690: ARRAY
29691: PPUSH
29692: LD_INT 1
29694: PPUSH
29695: CALL_OW 234
// end ;
29699: PPOPN 1
29701: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29702: LD_EXP 62
29706: PUSH
29707: LD_EXP 110
29711: AND
29712: IFFALSE 29824
29714: GO 29716
29716: DISABLE
29717: LD_INT 0
29719: PPUSH
29720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29721: LD_ADDR_VAR 0 2
29725: PUSH
29726: LD_INT 22
29728: PUSH
29729: LD_OWVAR 2
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 2
29740: PUSH
29741: LD_INT 30
29743: PUSH
29744: LD_INT 27
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 30
29753: PUSH
29754: LD_INT 26
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 30
29763: PUSH
29764: LD_INT 28
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PPUSH
29781: CALL_OW 69
29785: ST_TO_ADDR
// if not tmp then
29786: LD_VAR 0 2
29790: NOT
29791: IFFALSE 29795
// exit ;
29793: GO 29824
// for i in tmp do
29795: LD_ADDR_VAR 0 1
29799: PUSH
29800: LD_VAR 0 2
29804: PUSH
29805: FOR_IN
29806: IFFALSE 29822
// SetLives ( i , 1 ) ;
29808: LD_VAR 0 1
29812: PPUSH
29813: LD_INT 1
29815: PPUSH
29816: CALL_OW 234
29820: GO 29805
29822: POP
29823: POP
// end ;
29824: PPOPN 2
29826: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29827: LD_EXP 62
29831: PUSH
29832: LD_EXP 111
29836: AND
29837: IFFALSE 30124
29839: GO 29841
29841: DISABLE
29842: LD_INT 0
29844: PPUSH
29845: PPUSH
29846: PPUSH
// begin i := rand ( 1 , 7 ) ;
29847: LD_ADDR_VAR 0 1
29851: PUSH
29852: LD_INT 1
29854: PPUSH
29855: LD_INT 7
29857: PPUSH
29858: CALL_OW 12
29862: ST_TO_ADDR
// case i of 1 :
29863: LD_VAR 0 1
29867: PUSH
29868: LD_INT 1
29870: DOUBLE
29871: EQUAL
29872: IFTRUE 29876
29874: GO 29886
29876: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29877: LD_STRING earthquake(getX(game), 0, 32)
29879: PPUSH
29880: CALL_OW 559
29884: GO 30124
29886: LD_INT 2
29888: DOUBLE
29889: EQUAL
29890: IFTRUE 29894
29892: GO 29908
29894: POP
// begin ToLua ( displayStucuk(); ) ;
29895: LD_STRING displayStucuk();
29897: PPUSH
29898: CALL_OW 559
// ResetFog ;
29902: CALL_OW 335
// end ; 3 :
29906: GO 30124
29908: LD_INT 3
29910: DOUBLE
29911: EQUAL
29912: IFTRUE 29916
29914: GO 30020
29916: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29917: LD_ADDR_VAR 0 2
29921: PUSH
29922: LD_INT 22
29924: PUSH
29925: LD_OWVAR 2
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 25
29936: PUSH
29937: LD_INT 1
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PPUSH
29948: CALL_OW 69
29952: ST_TO_ADDR
// if not tmp then
29953: LD_VAR 0 2
29957: NOT
29958: IFFALSE 29962
// exit ;
29960: GO 30124
// un := tmp [ rand ( 1 , tmp ) ] ;
29962: LD_ADDR_VAR 0 3
29966: PUSH
29967: LD_VAR 0 2
29971: PUSH
29972: LD_INT 1
29974: PPUSH
29975: LD_VAR 0 2
29979: PPUSH
29980: CALL_OW 12
29984: ARRAY
29985: ST_TO_ADDR
// if Crawls ( un ) then
29986: LD_VAR 0 3
29990: PPUSH
29991: CALL_OW 318
29995: IFFALSE 30006
// ComWalk ( un ) ;
29997: LD_VAR 0 3
30001: PPUSH
30002: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30006: LD_VAR 0 3
30010: PPUSH
30011: LD_INT 8
30013: PPUSH
30014: CALL_OW 336
// end ; 4 :
30018: GO 30124
30020: LD_INT 4
30022: DOUBLE
30023: EQUAL
30024: IFTRUE 30028
30026: GO 30102
30028: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30029: LD_ADDR_VAR 0 2
30033: PUSH
30034: LD_INT 22
30036: PUSH
30037: LD_OWVAR 2
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 30
30048: PUSH
30049: LD_INT 29
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PPUSH
30060: CALL_OW 69
30064: ST_TO_ADDR
// if not tmp then
30065: LD_VAR 0 2
30069: NOT
30070: IFFALSE 30074
// exit ;
30072: GO 30124
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30074: LD_VAR 0 2
30078: PUSH
30079: LD_INT 1
30081: ARRAY
30082: PPUSH
30083: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30087: LD_VAR 0 2
30091: PUSH
30092: LD_INT 1
30094: ARRAY
30095: PPUSH
30096: CALL_OW 65
// end ; 5 .. 7 :
30100: GO 30124
30102: LD_INT 5
30104: DOUBLE
30105: GREATEREQUAL
30106: IFFALSE 30114
30108: LD_INT 7
30110: DOUBLE
30111: LESSEQUAL
30112: IFTRUE 30116
30114: GO 30123
30116: POP
// StreamSibBomb ; end ;
30117: CALL 26361 0 0
30121: GO 30124
30123: POP
// end ;
30124: PPOPN 3
30126: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30127: LD_EXP 62
30131: PUSH
30132: LD_EXP 112
30136: AND
30137: IFFALSE 30293
30139: GO 30141
30141: DISABLE
30142: LD_INT 0
30144: PPUSH
30145: PPUSH
30146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30147: LD_ADDR_VAR 0 2
30151: PUSH
30152: LD_INT 81
30154: PUSH
30155: LD_OWVAR 2
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 2
30166: PUSH
30167: LD_INT 21
30169: PUSH
30170: LD_INT 1
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 21
30179: PUSH
30180: LD_INT 2
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: LIST
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PPUSH
30196: CALL_OW 69
30200: ST_TO_ADDR
// if not tmp then
30201: LD_VAR 0 2
30205: NOT
30206: IFFALSE 30210
// exit ;
30208: GO 30293
// p := 0 ;
30210: LD_ADDR_VAR 0 3
30214: PUSH
30215: LD_INT 0
30217: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30218: LD_INT 35
30220: PPUSH
30221: CALL_OW 67
// p := p + 1 ;
30225: LD_ADDR_VAR 0 3
30229: PUSH
30230: LD_VAR 0 3
30234: PUSH
30235: LD_INT 1
30237: PLUS
30238: ST_TO_ADDR
// for i in tmp do
30239: LD_ADDR_VAR 0 1
30243: PUSH
30244: LD_VAR 0 2
30248: PUSH
30249: FOR_IN
30250: IFFALSE 30281
// if GetLives ( i ) < 1000 then
30252: LD_VAR 0 1
30256: PPUSH
30257: CALL_OW 256
30261: PUSH
30262: LD_INT 1000
30264: LESS
30265: IFFALSE 30279
// SetLives ( i , 1000 ) ;
30267: LD_VAR 0 1
30271: PPUSH
30272: LD_INT 1000
30274: PPUSH
30275: CALL_OW 234
30279: GO 30249
30281: POP
30282: POP
// until p > 20 ;
30283: LD_VAR 0 3
30287: PUSH
30288: LD_INT 20
30290: GREATER
30291: IFFALSE 30218
// end ;
30293: PPOPN 3
30295: END
// every 0 0$1 trigger StreamModeActive and sTime do
30296: LD_EXP 62
30300: PUSH
30301: LD_EXP 113
30305: AND
30306: IFFALSE 30341
30308: GO 30310
30310: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30311: LD_INT 28
30313: PPUSH
30314: LD_OWVAR 2
30318: PPUSH
30319: LD_INT 2
30321: PPUSH
30322: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30326: LD_INT 30
30328: PPUSH
30329: LD_OWVAR 2
30333: PPUSH
30334: LD_INT 2
30336: PPUSH
30337: CALL_OW 322
// end ;
30341: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30342: LD_EXP 62
30346: PUSH
30347: LD_EXP 114
30351: AND
30352: IFFALSE 30473
30354: GO 30356
30356: DISABLE
30357: LD_INT 0
30359: PPUSH
30360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30361: LD_ADDR_VAR 0 2
30365: PUSH
30366: LD_INT 22
30368: PUSH
30369: LD_OWVAR 2
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 21
30380: PUSH
30381: LD_INT 1
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 3
30390: PUSH
30391: LD_INT 23
30393: PUSH
30394: LD_INT 0
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: LIST
30409: PPUSH
30410: CALL_OW 69
30414: ST_TO_ADDR
// if not tmp then
30415: LD_VAR 0 2
30419: NOT
30420: IFFALSE 30424
// exit ;
30422: GO 30473
// for i in tmp do
30424: LD_ADDR_VAR 0 1
30428: PUSH
30429: LD_VAR 0 2
30433: PUSH
30434: FOR_IN
30435: IFFALSE 30471
// begin if Crawls ( i ) then
30437: LD_VAR 0 1
30441: PPUSH
30442: CALL_OW 318
30446: IFFALSE 30457
// ComWalk ( i ) ;
30448: LD_VAR 0 1
30452: PPUSH
30453: CALL_OW 138
// SetClass ( i , 2 ) ;
30457: LD_VAR 0 1
30461: PPUSH
30462: LD_INT 2
30464: PPUSH
30465: CALL_OW 336
// end ;
30469: GO 30434
30471: POP
30472: POP
// end ;
30473: PPOPN 2
30475: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30476: LD_EXP 62
30480: PUSH
30481: LD_EXP 115
30485: AND
30486: IFFALSE 30774
30488: GO 30490
30490: DISABLE
30491: LD_INT 0
30493: PPUSH
30494: PPUSH
30495: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30496: LD_OWVAR 2
30500: PPUSH
30501: LD_INT 9
30503: PPUSH
30504: LD_INT 1
30506: PPUSH
30507: LD_INT 1
30509: PPUSH
30510: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30514: LD_INT 9
30516: PPUSH
30517: LD_OWVAR 2
30521: PPUSH
30522: CALL_OW 343
// uc_side := 9 ;
30526: LD_ADDR_OWVAR 20
30530: PUSH
30531: LD_INT 9
30533: ST_TO_ADDR
// uc_nation := 2 ;
30534: LD_ADDR_OWVAR 21
30538: PUSH
30539: LD_INT 2
30541: ST_TO_ADDR
// hc_name := Dark Warrior ;
30542: LD_ADDR_OWVAR 26
30546: PUSH
30547: LD_STRING Dark Warrior
30549: ST_TO_ADDR
// hc_gallery :=  ;
30550: LD_ADDR_OWVAR 33
30554: PUSH
30555: LD_STRING 
30557: ST_TO_ADDR
// hc_noskilllimit := true ;
30558: LD_ADDR_OWVAR 76
30562: PUSH
30563: LD_INT 1
30565: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30566: LD_ADDR_OWVAR 31
30570: PUSH
30571: LD_INT 30
30573: PUSH
30574: LD_INT 30
30576: PUSH
30577: LD_INT 30
30579: PUSH
30580: LD_INT 30
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: ST_TO_ADDR
// un := CreateHuman ;
30589: LD_ADDR_VAR 0 3
30593: PUSH
30594: CALL_OW 44
30598: ST_TO_ADDR
// hc_noskilllimit := false ;
30599: LD_ADDR_OWVAR 76
30603: PUSH
30604: LD_INT 0
30606: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30607: LD_VAR 0 3
30611: PPUSH
30612: LD_INT 1
30614: PPUSH
30615: CALL_OW 51
// ToLua ( playRanger() ) ;
30619: LD_STRING playRanger()
30621: PPUSH
30622: CALL_OW 559
// p := 0 ;
30626: LD_ADDR_VAR 0 2
30630: PUSH
30631: LD_INT 0
30633: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30634: LD_INT 35
30636: PPUSH
30637: CALL_OW 67
// p := p + 1 ;
30641: LD_ADDR_VAR 0 2
30645: PUSH
30646: LD_VAR 0 2
30650: PUSH
30651: LD_INT 1
30653: PLUS
30654: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30655: LD_VAR 0 3
30659: PPUSH
30660: CALL_OW 256
30664: PUSH
30665: LD_INT 1000
30667: LESS
30668: IFFALSE 30682
// SetLives ( un , 1000 ) ;
30670: LD_VAR 0 3
30674: PPUSH
30675: LD_INT 1000
30677: PPUSH
30678: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30682: LD_VAR 0 3
30686: PPUSH
30687: LD_INT 81
30689: PUSH
30690: LD_OWVAR 2
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 91
30701: PUSH
30702: LD_VAR 0 3
30706: PUSH
30707: LD_INT 30
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: LIST
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PPUSH
30719: CALL_OW 69
30723: PPUSH
30724: LD_VAR 0 3
30728: PPUSH
30729: CALL_OW 74
30733: PPUSH
30734: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30738: LD_VAR 0 2
30742: PUSH
30743: LD_INT 80
30745: GREATER
30746: PUSH
30747: LD_VAR 0 3
30751: PPUSH
30752: CALL_OW 301
30756: OR
30757: IFFALSE 30634
// if un then
30759: LD_VAR 0 3
30763: IFFALSE 30774
// RemoveUnit ( un ) ;
30765: LD_VAR 0 3
30769: PPUSH
30770: CALL_OW 64
// end ;
30774: PPOPN 3
30776: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30777: LD_EXP 116
30781: IFFALSE 30897
30783: GO 30785
30785: DISABLE
30786: LD_INT 0
30788: PPUSH
30789: PPUSH
30790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30791: LD_ADDR_VAR 0 2
30795: PUSH
30796: LD_INT 81
30798: PUSH
30799: LD_OWVAR 2
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 21
30810: PUSH
30811: LD_INT 1
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PPUSH
30822: CALL_OW 69
30826: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30827: LD_STRING playComputer()
30829: PPUSH
30830: CALL_OW 559
// if not tmp then
30834: LD_VAR 0 2
30838: NOT
30839: IFFALSE 30843
// exit ;
30841: GO 30897
// for i in tmp do
30843: LD_ADDR_VAR 0 1
30847: PUSH
30848: LD_VAR 0 2
30852: PUSH
30853: FOR_IN
30854: IFFALSE 30895
// for j := 1 to 4 do
30856: LD_ADDR_VAR 0 3
30860: PUSH
30861: DOUBLE
30862: LD_INT 1
30864: DEC
30865: ST_TO_ADDR
30866: LD_INT 4
30868: PUSH
30869: FOR_TO
30870: IFFALSE 30891
// SetSkill ( i , j , 10 ) ;
30872: LD_VAR 0 1
30876: PPUSH
30877: LD_VAR 0 3
30881: PPUSH
30882: LD_INT 10
30884: PPUSH
30885: CALL_OW 237
30889: GO 30869
30891: POP
30892: POP
30893: GO 30853
30895: POP
30896: POP
// end ;
30897: PPOPN 3
30899: END
// every 0 0$1 trigger s30 do var i , tmp ;
30900: LD_EXP 117
30904: IFFALSE 30973
30906: GO 30908
30908: DISABLE
30909: LD_INT 0
30911: PPUSH
30912: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30913: LD_ADDR_VAR 0 2
30917: PUSH
30918: LD_INT 22
30920: PUSH
30921: LD_OWVAR 2
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PPUSH
30930: CALL_OW 69
30934: ST_TO_ADDR
// if not tmp then
30935: LD_VAR 0 2
30939: NOT
30940: IFFALSE 30944
// exit ;
30942: GO 30973
// for i in tmp do
30944: LD_ADDR_VAR 0 1
30948: PUSH
30949: LD_VAR 0 2
30953: PUSH
30954: FOR_IN
30955: IFFALSE 30971
// SetLives ( i , 300 ) ;
30957: LD_VAR 0 1
30961: PPUSH
30962: LD_INT 300
30964: PPUSH
30965: CALL_OW 234
30969: GO 30954
30971: POP
30972: POP
// end ;
30973: PPOPN 2
30975: END
// every 0 0$1 trigger s60 do var i , tmp ;
30976: LD_EXP 118
30980: IFFALSE 31049
30982: GO 30984
30984: DISABLE
30985: LD_INT 0
30987: PPUSH
30988: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30989: LD_ADDR_VAR 0 2
30993: PUSH
30994: LD_INT 22
30996: PUSH
30997: LD_OWVAR 2
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PPUSH
31006: CALL_OW 69
31010: ST_TO_ADDR
// if not tmp then
31011: LD_VAR 0 2
31015: NOT
31016: IFFALSE 31020
// exit ;
31018: GO 31049
// for i in tmp do
31020: LD_ADDR_VAR 0 1
31024: PUSH
31025: LD_VAR 0 2
31029: PUSH
31030: FOR_IN
31031: IFFALSE 31047
// SetLives ( i , 600 ) ;
31033: LD_VAR 0 1
31037: PPUSH
31038: LD_INT 600
31040: PPUSH
31041: CALL_OW 234
31045: GO 31030
31047: POP
31048: POP
// end ;
31049: PPOPN 2
31051: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31052: LD_INT 0
31054: PPUSH
// case cmd of 301 :
31055: LD_VAR 0 1
31059: PUSH
31060: LD_INT 301
31062: DOUBLE
31063: EQUAL
31064: IFTRUE 31068
31066: GO 31100
31068: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31069: LD_VAR 0 6
31073: PPUSH
31074: LD_VAR 0 7
31078: PPUSH
31079: LD_VAR 0 8
31083: PPUSH
31084: LD_VAR 0 4
31088: PPUSH
31089: LD_VAR 0 5
31093: PPUSH
31094: CALL 32301 0 5
31098: GO 31221
31100: LD_INT 302
31102: DOUBLE
31103: EQUAL
31104: IFTRUE 31108
31106: GO 31145
31108: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31109: LD_VAR 0 6
31113: PPUSH
31114: LD_VAR 0 7
31118: PPUSH
31119: LD_VAR 0 8
31123: PPUSH
31124: LD_VAR 0 9
31128: PPUSH
31129: LD_VAR 0 4
31133: PPUSH
31134: LD_VAR 0 5
31138: PPUSH
31139: CALL 32392 0 6
31143: GO 31221
31145: LD_INT 303
31147: DOUBLE
31148: EQUAL
31149: IFTRUE 31153
31151: GO 31190
31153: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31154: LD_VAR 0 6
31158: PPUSH
31159: LD_VAR 0 7
31163: PPUSH
31164: LD_VAR 0 8
31168: PPUSH
31169: LD_VAR 0 9
31173: PPUSH
31174: LD_VAR 0 4
31178: PPUSH
31179: LD_VAR 0 5
31183: PPUSH
31184: CALL 31226 0 6
31188: GO 31221
31190: LD_INT 304
31192: DOUBLE
31193: EQUAL
31194: IFTRUE 31198
31196: GO 31220
31198: POP
// hHackTeleport ( unit , x , y ) ; end ;
31199: LD_VAR 0 2
31203: PPUSH
31204: LD_VAR 0 4
31208: PPUSH
31209: LD_VAR 0 5
31213: PPUSH
31214: CALL 32985 0 3
31218: GO 31221
31220: POP
// end ;
31221: LD_VAR 0 12
31225: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31226: LD_INT 0
31228: PPUSH
31229: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31230: LD_VAR 0 1
31234: PUSH
31235: LD_INT 1
31237: LESS
31238: PUSH
31239: LD_VAR 0 1
31243: PUSH
31244: LD_INT 3
31246: GREATER
31247: OR
31248: PUSH
31249: LD_VAR 0 5
31253: PPUSH
31254: LD_VAR 0 6
31258: PPUSH
31259: CALL_OW 428
31263: OR
31264: IFFALSE 31268
// exit ;
31266: GO 31988
// uc_side := your_side ;
31268: LD_ADDR_OWVAR 20
31272: PUSH
31273: LD_OWVAR 2
31277: ST_TO_ADDR
// uc_nation := nation ;
31278: LD_ADDR_OWVAR 21
31282: PUSH
31283: LD_VAR 0 1
31287: ST_TO_ADDR
// bc_level = 1 ;
31288: LD_ADDR_OWVAR 43
31292: PUSH
31293: LD_INT 1
31295: ST_TO_ADDR
// case btype of 1 :
31296: LD_VAR 0 2
31300: PUSH
31301: LD_INT 1
31303: DOUBLE
31304: EQUAL
31305: IFTRUE 31309
31307: GO 31320
31309: POP
// bc_type := b_depot ; 2 :
31310: LD_ADDR_OWVAR 42
31314: PUSH
31315: LD_INT 0
31317: ST_TO_ADDR
31318: GO 31932
31320: LD_INT 2
31322: DOUBLE
31323: EQUAL
31324: IFTRUE 31328
31326: GO 31339
31328: POP
// bc_type := b_warehouse ; 3 :
31329: LD_ADDR_OWVAR 42
31333: PUSH
31334: LD_INT 1
31336: ST_TO_ADDR
31337: GO 31932
31339: LD_INT 3
31341: DOUBLE
31342: EQUAL
31343: IFTRUE 31347
31345: GO 31358
31347: POP
// bc_type := b_lab ; 4 .. 9 :
31348: LD_ADDR_OWVAR 42
31352: PUSH
31353: LD_INT 6
31355: ST_TO_ADDR
31356: GO 31932
31358: LD_INT 4
31360: DOUBLE
31361: GREATEREQUAL
31362: IFFALSE 31370
31364: LD_INT 9
31366: DOUBLE
31367: LESSEQUAL
31368: IFTRUE 31372
31370: GO 31424
31372: POP
// begin bc_type := b_lab_half ;
31373: LD_ADDR_OWVAR 42
31377: PUSH
31378: LD_INT 7
31380: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31381: LD_ADDR_OWVAR 44
31385: PUSH
31386: LD_INT 10
31388: PUSH
31389: LD_INT 11
31391: PUSH
31392: LD_INT 12
31394: PUSH
31395: LD_INT 15
31397: PUSH
31398: LD_INT 14
31400: PUSH
31401: LD_INT 13
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: PUSH
31412: LD_VAR 0 2
31416: PUSH
31417: LD_INT 3
31419: MINUS
31420: ARRAY
31421: ST_TO_ADDR
// end ; 10 .. 13 :
31422: GO 31932
31424: LD_INT 10
31426: DOUBLE
31427: GREATEREQUAL
31428: IFFALSE 31436
31430: LD_INT 13
31432: DOUBLE
31433: LESSEQUAL
31434: IFTRUE 31438
31436: GO 31515
31438: POP
// begin bc_type := b_lab_full ;
31439: LD_ADDR_OWVAR 42
31443: PUSH
31444: LD_INT 8
31446: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31447: LD_ADDR_OWVAR 44
31451: PUSH
31452: LD_INT 10
31454: PUSH
31455: LD_INT 12
31457: PUSH
31458: LD_INT 14
31460: PUSH
31461: LD_INT 13
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: PUSH
31470: LD_VAR 0 2
31474: PUSH
31475: LD_INT 9
31477: MINUS
31478: ARRAY
31479: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31480: LD_ADDR_OWVAR 45
31484: PUSH
31485: LD_INT 11
31487: PUSH
31488: LD_INT 15
31490: PUSH
31491: LD_INT 12
31493: PUSH
31494: LD_INT 15
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: PUSH
31503: LD_VAR 0 2
31507: PUSH
31508: LD_INT 9
31510: MINUS
31511: ARRAY
31512: ST_TO_ADDR
// end ; 14 :
31513: GO 31932
31515: LD_INT 14
31517: DOUBLE
31518: EQUAL
31519: IFTRUE 31523
31521: GO 31534
31523: POP
// bc_type := b_workshop ; 15 :
31524: LD_ADDR_OWVAR 42
31528: PUSH
31529: LD_INT 2
31531: ST_TO_ADDR
31532: GO 31932
31534: LD_INT 15
31536: DOUBLE
31537: EQUAL
31538: IFTRUE 31542
31540: GO 31553
31542: POP
// bc_type := b_factory ; 16 :
31543: LD_ADDR_OWVAR 42
31547: PUSH
31548: LD_INT 3
31550: ST_TO_ADDR
31551: GO 31932
31553: LD_INT 16
31555: DOUBLE
31556: EQUAL
31557: IFTRUE 31561
31559: GO 31572
31561: POP
// bc_type := b_ext_gun ; 17 :
31562: LD_ADDR_OWVAR 42
31566: PUSH
31567: LD_INT 17
31569: ST_TO_ADDR
31570: GO 31932
31572: LD_INT 17
31574: DOUBLE
31575: EQUAL
31576: IFTRUE 31580
31578: GO 31608
31580: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31581: LD_ADDR_OWVAR 42
31585: PUSH
31586: LD_INT 19
31588: PUSH
31589: LD_INT 23
31591: PUSH
31592: LD_INT 19
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: LIST
31599: PUSH
31600: LD_VAR 0 1
31604: ARRAY
31605: ST_TO_ADDR
31606: GO 31932
31608: LD_INT 18
31610: DOUBLE
31611: EQUAL
31612: IFTRUE 31616
31614: GO 31627
31616: POP
// bc_type := b_ext_radar ; 19 :
31617: LD_ADDR_OWVAR 42
31621: PUSH
31622: LD_INT 20
31624: ST_TO_ADDR
31625: GO 31932
31627: LD_INT 19
31629: DOUBLE
31630: EQUAL
31631: IFTRUE 31635
31633: GO 31646
31635: POP
// bc_type := b_ext_radio ; 20 :
31636: LD_ADDR_OWVAR 42
31640: PUSH
31641: LD_INT 22
31643: ST_TO_ADDR
31644: GO 31932
31646: LD_INT 20
31648: DOUBLE
31649: EQUAL
31650: IFTRUE 31654
31652: GO 31665
31654: POP
// bc_type := b_ext_siberium ; 21 :
31655: LD_ADDR_OWVAR 42
31659: PUSH
31660: LD_INT 21
31662: ST_TO_ADDR
31663: GO 31932
31665: LD_INT 21
31667: DOUBLE
31668: EQUAL
31669: IFTRUE 31673
31671: GO 31684
31673: POP
// bc_type := b_ext_computer ; 22 :
31674: LD_ADDR_OWVAR 42
31678: PUSH
31679: LD_INT 24
31681: ST_TO_ADDR
31682: GO 31932
31684: LD_INT 22
31686: DOUBLE
31687: EQUAL
31688: IFTRUE 31692
31690: GO 31703
31692: POP
// bc_type := b_ext_track ; 23 :
31693: LD_ADDR_OWVAR 42
31697: PUSH
31698: LD_INT 16
31700: ST_TO_ADDR
31701: GO 31932
31703: LD_INT 23
31705: DOUBLE
31706: EQUAL
31707: IFTRUE 31711
31709: GO 31722
31711: POP
// bc_type := b_ext_laser ; 24 :
31712: LD_ADDR_OWVAR 42
31716: PUSH
31717: LD_INT 25
31719: ST_TO_ADDR
31720: GO 31932
31722: LD_INT 24
31724: DOUBLE
31725: EQUAL
31726: IFTRUE 31730
31728: GO 31741
31730: POP
// bc_type := b_control_tower ; 25 :
31731: LD_ADDR_OWVAR 42
31735: PUSH
31736: LD_INT 36
31738: ST_TO_ADDR
31739: GO 31932
31741: LD_INT 25
31743: DOUBLE
31744: EQUAL
31745: IFTRUE 31749
31747: GO 31760
31749: POP
// bc_type := b_breastwork ; 26 :
31750: LD_ADDR_OWVAR 42
31754: PUSH
31755: LD_INT 31
31757: ST_TO_ADDR
31758: GO 31932
31760: LD_INT 26
31762: DOUBLE
31763: EQUAL
31764: IFTRUE 31768
31766: GO 31779
31768: POP
// bc_type := b_bunker ; 27 :
31769: LD_ADDR_OWVAR 42
31773: PUSH
31774: LD_INT 32
31776: ST_TO_ADDR
31777: GO 31932
31779: LD_INT 27
31781: DOUBLE
31782: EQUAL
31783: IFTRUE 31787
31785: GO 31798
31787: POP
// bc_type := b_turret ; 28 :
31788: LD_ADDR_OWVAR 42
31792: PUSH
31793: LD_INT 33
31795: ST_TO_ADDR
31796: GO 31932
31798: LD_INT 28
31800: DOUBLE
31801: EQUAL
31802: IFTRUE 31806
31804: GO 31817
31806: POP
// bc_type := b_armoury ; 29 :
31807: LD_ADDR_OWVAR 42
31811: PUSH
31812: LD_INT 4
31814: ST_TO_ADDR
31815: GO 31932
31817: LD_INT 29
31819: DOUBLE
31820: EQUAL
31821: IFTRUE 31825
31823: GO 31836
31825: POP
// bc_type := b_barracks ; 30 :
31826: LD_ADDR_OWVAR 42
31830: PUSH
31831: LD_INT 5
31833: ST_TO_ADDR
31834: GO 31932
31836: LD_INT 30
31838: DOUBLE
31839: EQUAL
31840: IFTRUE 31844
31842: GO 31855
31844: POP
// bc_type := b_solar_power ; 31 :
31845: LD_ADDR_OWVAR 42
31849: PUSH
31850: LD_INT 27
31852: ST_TO_ADDR
31853: GO 31932
31855: LD_INT 31
31857: DOUBLE
31858: EQUAL
31859: IFTRUE 31863
31861: GO 31874
31863: POP
// bc_type := b_oil_power ; 32 :
31864: LD_ADDR_OWVAR 42
31868: PUSH
31869: LD_INT 26
31871: ST_TO_ADDR
31872: GO 31932
31874: LD_INT 32
31876: DOUBLE
31877: EQUAL
31878: IFTRUE 31882
31880: GO 31893
31882: POP
// bc_type := b_siberite_power ; 33 :
31883: LD_ADDR_OWVAR 42
31887: PUSH
31888: LD_INT 28
31890: ST_TO_ADDR
31891: GO 31932
31893: LD_INT 33
31895: DOUBLE
31896: EQUAL
31897: IFTRUE 31901
31899: GO 31912
31901: POP
// bc_type := b_oil_mine ; 34 :
31902: LD_ADDR_OWVAR 42
31906: PUSH
31907: LD_INT 29
31909: ST_TO_ADDR
31910: GO 31932
31912: LD_INT 34
31914: DOUBLE
31915: EQUAL
31916: IFTRUE 31920
31918: GO 31931
31920: POP
// bc_type := b_siberite_mine ; end ;
31921: LD_ADDR_OWVAR 42
31925: PUSH
31926: LD_INT 30
31928: ST_TO_ADDR
31929: GO 31932
31931: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31932: LD_ADDR_VAR 0 8
31936: PUSH
31937: LD_VAR 0 5
31941: PPUSH
31942: LD_VAR 0 6
31946: PPUSH
31947: LD_VAR 0 3
31951: PPUSH
31952: CALL_OW 47
31956: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31957: LD_OWVAR 42
31961: PUSH
31962: LD_INT 32
31964: PUSH
31965: LD_INT 33
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: IN
31972: IFFALSE 31988
// PlaceWeaponTurret ( b , weapon ) ;
31974: LD_VAR 0 8
31978: PPUSH
31979: LD_VAR 0 4
31983: PPUSH
31984: CALL_OW 431
// end ;
31988: LD_VAR 0 7
31992: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31993: LD_INT 0
31995: PPUSH
31996: PPUSH
31997: PPUSH
31998: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31999: LD_ADDR_VAR 0 4
32003: PUSH
32004: LD_INT 22
32006: PUSH
32007: LD_OWVAR 2
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 2
32018: PUSH
32019: LD_INT 30
32021: PUSH
32022: LD_INT 0
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 30
32031: PUSH
32032: LD_INT 1
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: LIST
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PPUSH
32048: CALL_OW 69
32052: ST_TO_ADDR
// if not tmp then
32053: LD_VAR 0 4
32057: NOT
32058: IFFALSE 32062
// exit ;
32060: GO 32121
// for i in tmp do
32062: LD_ADDR_VAR 0 2
32066: PUSH
32067: LD_VAR 0 4
32071: PUSH
32072: FOR_IN
32073: IFFALSE 32119
// for j = 1 to 3 do
32075: LD_ADDR_VAR 0 3
32079: PUSH
32080: DOUBLE
32081: LD_INT 1
32083: DEC
32084: ST_TO_ADDR
32085: LD_INT 3
32087: PUSH
32088: FOR_TO
32089: IFFALSE 32115
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32091: LD_VAR 0 2
32095: PPUSH
32096: CALL_OW 274
32100: PPUSH
32101: LD_VAR 0 3
32105: PPUSH
32106: LD_INT 99999
32108: PPUSH
32109: CALL_OW 277
32113: GO 32088
32115: POP
32116: POP
32117: GO 32072
32119: POP
32120: POP
// end ;
32121: LD_VAR 0 1
32125: RET
// export function hHackSetLevel10 ; var i , j ; begin
32126: LD_INT 0
32128: PPUSH
32129: PPUSH
32130: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32131: LD_ADDR_VAR 0 2
32135: PUSH
32136: LD_INT 21
32138: PUSH
32139: LD_INT 1
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PPUSH
32146: CALL_OW 69
32150: PUSH
32151: FOR_IN
32152: IFFALSE 32204
// if IsSelected ( i ) then
32154: LD_VAR 0 2
32158: PPUSH
32159: CALL_OW 306
32163: IFFALSE 32202
// begin for j := 1 to 4 do
32165: LD_ADDR_VAR 0 3
32169: PUSH
32170: DOUBLE
32171: LD_INT 1
32173: DEC
32174: ST_TO_ADDR
32175: LD_INT 4
32177: PUSH
32178: FOR_TO
32179: IFFALSE 32200
// SetSkill ( i , j , 10 ) ;
32181: LD_VAR 0 2
32185: PPUSH
32186: LD_VAR 0 3
32190: PPUSH
32191: LD_INT 10
32193: PPUSH
32194: CALL_OW 237
32198: GO 32178
32200: POP
32201: POP
// end ;
32202: GO 32151
32204: POP
32205: POP
// end ;
32206: LD_VAR 0 1
32210: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32211: LD_INT 0
32213: PPUSH
32214: PPUSH
32215: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32216: LD_ADDR_VAR 0 2
32220: PUSH
32221: LD_INT 22
32223: PUSH
32224: LD_OWVAR 2
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 21
32235: PUSH
32236: LD_INT 1
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PPUSH
32247: CALL_OW 69
32251: PUSH
32252: FOR_IN
32253: IFFALSE 32294
// begin for j := 1 to 4 do
32255: LD_ADDR_VAR 0 3
32259: PUSH
32260: DOUBLE
32261: LD_INT 1
32263: DEC
32264: ST_TO_ADDR
32265: LD_INT 4
32267: PUSH
32268: FOR_TO
32269: IFFALSE 32290
// SetSkill ( i , j , 10 ) ;
32271: LD_VAR 0 2
32275: PPUSH
32276: LD_VAR 0 3
32280: PPUSH
32281: LD_INT 10
32283: PPUSH
32284: CALL_OW 237
32288: GO 32268
32290: POP
32291: POP
// end ;
32292: GO 32252
32294: POP
32295: POP
// end ;
32296: LD_VAR 0 1
32300: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32301: LD_INT 0
32303: PPUSH
// uc_side := your_side ;
32304: LD_ADDR_OWVAR 20
32308: PUSH
32309: LD_OWVAR 2
32313: ST_TO_ADDR
// uc_nation := nation ;
32314: LD_ADDR_OWVAR 21
32318: PUSH
32319: LD_VAR 0 1
32323: ST_TO_ADDR
// InitHc ;
32324: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32328: LD_INT 0
32330: PPUSH
32331: LD_VAR 0 2
32335: PPUSH
32336: LD_VAR 0 3
32340: PPUSH
32341: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32345: LD_VAR 0 4
32349: PPUSH
32350: LD_VAR 0 5
32354: PPUSH
32355: CALL_OW 428
32359: PUSH
32360: LD_INT 0
32362: EQUAL
32363: IFFALSE 32387
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32365: CALL_OW 44
32369: PPUSH
32370: LD_VAR 0 4
32374: PPUSH
32375: LD_VAR 0 5
32379: PPUSH
32380: LD_INT 1
32382: PPUSH
32383: CALL_OW 48
// end ;
32387: LD_VAR 0 6
32391: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32392: LD_INT 0
32394: PPUSH
32395: PPUSH
// uc_side := your_side ;
32396: LD_ADDR_OWVAR 20
32400: PUSH
32401: LD_OWVAR 2
32405: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32406: LD_VAR 0 1
32410: PUSH
32411: LD_INT 1
32413: PUSH
32414: LD_INT 2
32416: PUSH
32417: LD_INT 3
32419: PUSH
32420: LD_INT 4
32422: PUSH
32423: LD_INT 5
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: IN
32433: IFFALSE 32445
// uc_nation := nation_american else
32435: LD_ADDR_OWVAR 21
32439: PUSH
32440: LD_INT 1
32442: ST_TO_ADDR
32443: GO 32488
// if chassis in [ 11 , 12 , 13 , 14 ] then
32445: LD_VAR 0 1
32449: PUSH
32450: LD_INT 11
32452: PUSH
32453: LD_INT 12
32455: PUSH
32456: LD_INT 13
32458: PUSH
32459: LD_INT 14
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: IN
32468: IFFALSE 32480
// uc_nation := nation_arabian else
32470: LD_ADDR_OWVAR 21
32474: PUSH
32475: LD_INT 2
32477: ST_TO_ADDR
32478: GO 32488
// uc_nation := nation_russian ;
32480: LD_ADDR_OWVAR 21
32484: PUSH
32485: LD_INT 3
32487: ST_TO_ADDR
// vc_chassis := chassis ;
32488: LD_ADDR_OWVAR 37
32492: PUSH
32493: LD_VAR 0 1
32497: ST_TO_ADDR
// vc_engine := engine ;
32498: LD_ADDR_OWVAR 39
32502: PUSH
32503: LD_VAR 0 2
32507: ST_TO_ADDR
// vc_control := control ;
32508: LD_ADDR_OWVAR 38
32512: PUSH
32513: LD_VAR 0 3
32517: ST_TO_ADDR
// vc_weapon := weapon ;
32518: LD_ADDR_OWVAR 40
32522: PUSH
32523: LD_VAR 0 4
32527: ST_TO_ADDR
// un := CreateVehicle ;
32528: LD_ADDR_VAR 0 8
32532: PUSH
32533: CALL_OW 45
32537: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32538: LD_VAR 0 8
32542: PPUSH
32543: LD_INT 0
32545: PPUSH
32546: LD_INT 5
32548: PPUSH
32549: CALL_OW 12
32553: PPUSH
32554: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32558: LD_VAR 0 8
32562: PPUSH
32563: LD_VAR 0 5
32567: PPUSH
32568: LD_VAR 0 6
32572: PPUSH
32573: LD_INT 1
32575: PPUSH
32576: CALL_OW 48
// end ;
32580: LD_VAR 0 7
32584: RET
// export hInvincible ; every 1 do
32585: GO 32587
32587: DISABLE
// hInvincible := [ ] ;
32588: LD_ADDR_EXP 119
32592: PUSH
32593: EMPTY
32594: ST_TO_ADDR
32595: END
// every 10 do var i ;
32596: GO 32598
32598: DISABLE
32599: LD_INT 0
32601: PPUSH
// begin enable ;
32602: ENABLE
// if not hInvincible then
32603: LD_EXP 119
32607: NOT
32608: IFFALSE 32612
// exit ;
32610: GO 32656
// for i in hInvincible do
32612: LD_ADDR_VAR 0 1
32616: PUSH
32617: LD_EXP 119
32621: PUSH
32622: FOR_IN
32623: IFFALSE 32654
// if GetLives ( i ) < 1000 then
32625: LD_VAR 0 1
32629: PPUSH
32630: CALL_OW 256
32634: PUSH
32635: LD_INT 1000
32637: LESS
32638: IFFALSE 32652
// SetLives ( i , 1000 ) ;
32640: LD_VAR 0 1
32644: PPUSH
32645: LD_INT 1000
32647: PPUSH
32648: CALL_OW 234
32652: GO 32622
32654: POP
32655: POP
// end ;
32656: PPOPN 1
32658: END
// export function hHackInvincible ; var i ; begin
32659: LD_INT 0
32661: PPUSH
32662: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32663: LD_ADDR_VAR 0 2
32667: PUSH
32668: LD_INT 2
32670: PUSH
32671: LD_INT 21
32673: PUSH
32674: LD_INT 1
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 21
32683: PUSH
32684: LD_INT 2
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: LIST
32695: PPUSH
32696: CALL_OW 69
32700: PUSH
32701: FOR_IN
32702: IFFALSE 32763
// if IsSelected ( i ) then
32704: LD_VAR 0 2
32708: PPUSH
32709: CALL_OW 306
32713: IFFALSE 32761
// begin if i in hInvincible then
32715: LD_VAR 0 2
32719: PUSH
32720: LD_EXP 119
32724: IN
32725: IFFALSE 32745
// hInvincible := hInvincible diff i else
32727: LD_ADDR_EXP 119
32731: PUSH
32732: LD_EXP 119
32736: PUSH
32737: LD_VAR 0 2
32741: DIFF
32742: ST_TO_ADDR
32743: GO 32761
// hInvincible := hInvincible union i ;
32745: LD_ADDR_EXP 119
32749: PUSH
32750: LD_EXP 119
32754: PUSH
32755: LD_VAR 0 2
32759: UNION
32760: ST_TO_ADDR
// end ;
32761: GO 32701
32763: POP
32764: POP
// end ;
32765: LD_VAR 0 1
32769: RET
// export function hHackInvisible ; var i , j ; begin
32770: LD_INT 0
32772: PPUSH
32773: PPUSH
32774: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32775: LD_ADDR_VAR 0 2
32779: PUSH
32780: LD_INT 21
32782: PUSH
32783: LD_INT 1
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PPUSH
32790: CALL_OW 69
32794: PUSH
32795: FOR_IN
32796: IFFALSE 32820
// if IsSelected ( i ) then
32798: LD_VAR 0 2
32802: PPUSH
32803: CALL_OW 306
32807: IFFALSE 32818
// ComForceInvisible ( i ) ;
32809: LD_VAR 0 2
32813: PPUSH
32814: CALL_OW 496
32818: GO 32795
32820: POP
32821: POP
// end ;
32822: LD_VAR 0 1
32826: RET
// export function hHackChangeYourSide ; begin
32827: LD_INT 0
32829: PPUSH
// if your_side = 8 then
32830: LD_OWVAR 2
32834: PUSH
32835: LD_INT 8
32837: EQUAL
32838: IFFALSE 32850
// your_side := 0 else
32840: LD_ADDR_OWVAR 2
32844: PUSH
32845: LD_INT 0
32847: ST_TO_ADDR
32848: GO 32864
// your_side := your_side + 1 ;
32850: LD_ADDR_OWVAR 2
32854: PUSH
32855: LD_OWVAR 2
32859: PUSH
32860: LD_INT 1
32862: PLUS
32863: ST_TO_ADDR
// end ;
32864: LD_VAR 0 1
32868: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32869: LD_INT 0
32871: PPUSH
32872: PPUSH
32873: PPUSH
// for i in all_units do
32874: LD_ADDR_VAR 0 2
32878: PUSH
32879: LD_OWVAR 3
32883: PUSH
32884: FOR_IN
32885: IFFALSE 32963
// if IsSelected ( i ) then
32887: LD_VAR 0 2
32891: PPUSH
32892: CALL_OW 306
32896: IFFALSE 32961
// begin j := GetSide ( i ) ;
32898: LD_ADDR_VAR 0 3
32902: PUSH
32903: LD_VAR 0 2
32907: PPUSH
32908: CALL_OW 255
32912: ST_TO_ADDR
// if j = 8 then
32913: LD_VAR 0 3
32917: PUSH
32918: LD_INT 8
32920: EQUAL
32921: IFFALSE 32933
// j := 0 else
32923: LD_ADDR_VAR 0 3
32927: PUSH
32928: LD_INT 0
32930: ST_TO_ADDR
32931: GO 32947
// j := j + 1 ;
32933: LD_ADDR_VAR 0 3
32937: PUSH
32938: LD_VAR 0 3
32942: PUSH
32943: LD_INT 1
32945: PLUS
32946: ST_TO_ADDR
// SetSide ( i , j ) ;
32947: LD_VAR 0 2
32951: PPUSH
32952: LD_VAR 0 3
32956: PPUSH
32957: CALL_OW 235
// end ;
32961: GO 32884
32963: POP
32964: POP
// end ;
32965: LD_VAR 0 1
32969: RET
// export function hHackFog ; begin
32970: LD_INT 0
32972: PPUSH
// FogOff ( true ) ;
32973: LD_INT 1
32975: PPUSH
32976: CALL_OW 344
// end ;
32980: LD_VAR 0 1
32984: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32985: LD_INT 0
32987: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32988: LD_VAR 0 1
32992: PPUSH
32993: LD_VAR 0 2
32997: PPUSH
32998: LD_VAR 0 3
33002: PPUSH
33003: LD_INT 1
33005: PPUSH
33006: LD_INT 1
33008: PPUSH
33009: CALL_OW 483
// CenterOnXY ( x , y ) ;
33013: LD_VAR 0 2
33017: PPUSH
33018: LD_VAR 0 3
33022: PPUSH
33023: CALL_OW 84
// end ;
33027: LD_VAR 0 4
33031: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33032: LD_INT 0
33034: PPUSH
33035: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33036: LD_VAR 0 1
33040: NOT
33041: PUSH
33042: LD_VAR 0 2
33046: PPUSH
33047: LD_VAR 0 3
33051: PPUSH
33052: CALL_OW 488
33056: NOT
33057: OR
33058: PUSH
33059: LD_VAR 0 1
33063: PPUSH
33064: CALL_OW 266
33068: PUSH
33069: LD_INT 3
33071: NONEQUAL
33072: PUSH
33073: LD_VAR 0 1
33077: PPUSH
33078: CALL_OW 247
33082: PUSH
33083: LD_INT 1
33085: EQUAL
33086: NOT
33087: AND
33088: OR
33089: IFFALSE 33093
// exit ;
33091: GO 33242
// if GetType ( factory ) = unit_human then
33093: LD_VAR 0 1
33097: PPUSH
33098: CALL_OW 247
33102: PUSH
33103: LD_INT 1
33105: EQUAL
33106: IFFALSE 33123
// factory := IsInUnit ( factory ) ;
33108: LD_ADDR_VAR 0 1
33112: PUSH
33113: LD_VAR 0 1
33117: PPUSH
33118: CALL_OW 310
33122: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33123: LD_VAR 0 1
33127: PPUSH
33128: CALL_OW 266
33132: PUSH
33133: LD_INT 3
33135: NONEQUAL
33136: IFFALSE 33140
// exit ;
33138: GO 33242
// if HexInfo ( x , y ) = factory then
33140: LD_VAR 0 2
33144: PPUSH
33145: LD_VAR 0 3
33149: PPUSH
33150: CALL_OW 428
33154: PUSH
33155: LD_VAR 0 1
33159: EQUAL
33160: IFFALSE 33187
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33162: LD_ADDR_EXP 120
33166: PUSH
33167: LD_EXP 120
33171: PPUSH
33172: LD_VAR 0 1
33176: PPUSH
33177: LD_INT 0
33179: PPUSH
33180: CALL_OW 1
33184: ST_TO_ADDR
33185: GO 33238
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33187: LD_ADDR_EXP 120
33191: PUSH
33192: LD_EXP 120
33196: PPUSH
33197: LD_VAR 0 1
33201: PPUSH
33202: LD_VAR 0 1
33206: PPUSH
33207: CALL_OW 255
33211: PUSH
33212: LD_VAR 0 1
33216: PUSH
33217: LD_VAR 0 2
33221: PUSH
33222: LD_VAR 0 3
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: PPUSH
33233: CALL_OW 1
33237: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33238: CALL 33247 0 0
// end ;
33242: LD_VAR 0 4
33246: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33247: LD_INT 0
33249: PPUSH
33250: PPUSH
33251: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33252: LD_STRING resetFactoryWaypoint();
33254: PPUSH
33255: CALL_OW 559
// if factoryWaypoints then
33259: LD_EXP 120
33263: IFFALSE 33389
// begin list := PrepareArray ( factoryWaypoints ) ;
33265: LD_ADDR_VAR 0 3
33269: PUSH
33270: LD_EXP 120
33274: PPUSH
33275: CALL 79766 0 1
33279: ST_TO_ADDR
// for i := 1 to list do
33280: LD_ADDR_VAR 0 2
33284: PUSH
33285: DOUBLE
33286: LD_INT 1
33288: DEC
33289: ST_TO_ADDR
33290: LD_VAR 0 3
33294: PUSH
33295: FOR_TO
33296: IFFALSE 33387
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33298: LD_STRING setFactoryWaypointXY(
33300: PUSH
33301: LD_VAR 0 3
33305: PUSH
33306: LD_VAR 0 2
33310: ARRAY
33311: PUSH
33312: LD_INT 1
33314: ARRAY
33315: STR
33316: PUSH
33317: LD_STRING ,
33319: STR
33320: PUSH
33321: LD_VAR 0 3
33325: PUSH
33326: LD_VAR 0 2
33330: ARRAY
33331: PUSH
33332: LD_INT 2
33334: ARRAY
33335: STR
33336: PUSH
33337: LD_STRING ,
33339: STR
33340: PUSH
33341: LD_VAR 0 3
33345: PUSH
33346: LD_VAR 0 2
33350: ARRAY
33351: PUSH
33352: LD_INT 3
33354: ARRAY
33355: STR
33356: PUSH
33357: LD_STRING ,
33359: STR
33360: PUSH
33361: LD_VAR 0 3
33365: PUSH
33366: LD_VAR 0 2
33370: ARRAY
33371: PUSH
33372: LD_INT 4
33374: ARRAY
33375: STR
33376: PUSH
33377: LD_STRING )
33379: STR
33380: PPUSH
33381: CALL_OW 559
33385: GO 33295
33387: POP
33388: POP
// end ; end ;
33389: LD_VAR 0 1
33393: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33394: LD_INT 0
33396: PPUSH
// if HexInfo ( x , y ) = warehouse then
33397: LD_VAR 0 2
33401: PPUSH
33402: LD_VAR 0 3
33406: PPUSH
33407: CALL_OW 428
33411: PUSH
33412: LD_VAR 0 1
33416: EQUAL
33417: IFFALSE 33444
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33419: LD_ADDR_EXP 121
33423: PUSH
33424: LD_EXP 121
33428: PPUSH
33429: LD_VAR 0 1
33433: PPUSH
33434: LD_INT 0
33436: PPUSH
33437: CALL_OW 1
33441: ST_TO_ADDR
33442: GO 33495
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33444: LD_ADDR_EXP 121
33448: PUSH
33449: LD_EXP 121
33453: PPUSH
33454: LD_VAR 0 1
33458: PPUSH
33459: LD_VAR 0 1
33463: PPUSH
33464: CALL_OW 255
33468: PUSH
33469: LD_VAR 0 1
33473: PUSH
33474: LD_VAR 0 2
33478: PUSH
33479: LD_VAR 0 3
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: PPUSH
33490: CALL_OW 1
33494: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33495: CALL 33504 0 0
// end ;
33499: LD_VAR 0 4
33503: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33504: LD_INT 0
33506: PPUSH
33507: PPUSH
33508: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33509: LD_STRING resetWarehouseGatheringPoints();
33511: PPUSH
33512: CALL_OW 559
// if warehouseGatheringPoints then
33516: LD_EXP 121
33520: IFFALSE 33646
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33522: LD_ADDR_VAR 0 3
33526: PUSH
33527: LD_EXP 121
33531: PPUSH
33532: CALL 79766 0 1
33536: ST_TO_ADDR
// for i := 1 to list do
33537: LD_ADDR_VAR 0 2
33541: PUSH
33542: DOUBLE
33543: LD_INT 1
33545: DEC
33546: ST_TO_ADDR
33547: LD_VAR 0 3
33551: PUSH
33552: FOR_TO
33553: IFFALSE 33644
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33555: LD_STRING setWarehouseGatheringPointXY(
33557: PUSH
33558: LD_VAR 0 3
33562: PUSH
33563: LD_VAR 0 2
33567: ARRAY
33568: PUSH
33569: LD_INT 1
33571: ARRAY
33572: STR
33573: PUSH
33574: LD_STRING ,
33576: STR
33577: PUSH
33578: LD_VAR 0 3
33582: PUSH
33583: LD_VAR 0 2
33587: ARRAY
33588: PUSH
33589: LD_INT 2
33591: ARRAY
33592: STR
33593: PUSH
33594: LD_STRING ,
33596: STR
33597: PUSH
33598: LD_VAR 0 3
33602: PUSH
33603: LD_VAR 0 2
33607: ARRAY
33608: PUSH
33609: LD_INT 3
33611: ARRAY
33612: STR
33613: PUSH
33614: LD_STRING ,
33616: STR
33617: PUSH
33618: LD_VAR 0 3
33622: PUSH
33623: LD_VAR 0 2
33627: ARRAY
33628: PUSH
33629: LD_INT 4
33631: ARRAY
33632: STR
33633: PUSH
33634: LD_STRING )
33636: STR
33637: PPUSH
33638: CALL_OW 559
33642: GO 33552
33644: POP
33645: POP
// end ; end ;
33646: LD_VAR 0 1
33650: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33651: LD_EXP 121
33655: IFFALSE 34340
33657: GO 33659
33659: DISABLE
33660: LD_INT 0
33662: PPUSH
33663: PPUSH
33664: PPUSH
33665: PPUSH
33666: PPUSH
33667: PPUSH
33668: PPUSH
33669: PPUSH
33670: PPUSH
// begin enable ;
33671: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33672: LD_ADDR_VAR 0 3
33676: PUSH
33677: LD_EXP 121
33681: PPUSH
33682: CALL 79766 0 1
33686: ST_TO_ADDR
// if not list then
33687: LD_VAR 0 3
33691: NOT
33692: IFFALSE 33696
// exit ;
33694: GO 34340
// for i := 1 to list do
33696: LD_ADDR_VAR 0 1
33700: PUSH
33701: DOUBLE
33702: LD_INT 1
33704: DEC
33705: ST_TO_ADDR
33706: LD_VAR 0 3
33710: PUSH
33711: FOR_TO
33712: IFFALSE 34338
// begin depot := list [ i ] [ 2 ] ;
33714: LD_ADDR_VAR 0 8
33718: PUSH
33719: LD_VAR 0 3
33723: PUSH
33724: LD_VAR 0 1
33728: ARRAY
33729: PUSH
33730: LD_INT 2
33732: ARRAY
33733: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33734: LD_ADDR_VAR 0 5
33738: PUSH
33739: LD_VAR 0 3
33743: PUSH
33744: LD_VAR 0 1
33748: ARRAY
33749: PUSH
33750: LD_INT 1
33752: ARRAY
33753: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33754: LD_VAR 0 8
33758: PPUSH
33759: CALL_OW 301
33763: PUSH
33764: LD_VAR 0 5
33768: PUSH
33769: LD_VAR 0 8
33773: PPUSH
33774: CALL_OW 255
33778: NONEQUAL
33779: OR
33780: IFFALSE 33809
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33782: LD_ADDR_EXP 121
33786: PUSH
33787: LD_EXP 121
33791: PPUSH
33792: LD_VAR 0 8
33796: PPUSH
33797: LD_INT 0
33799: PPUSH
33800: CALL_OW 1
33804: ST_TO_ADDR
// exit ;
33805: POP
33806: POP
33807: GO 34340
// end ; x := list [ i ] [ 3 ] ;
33809: LD_ADDR_VAR 0 6
33813: PUSH
33814: LD_VAR 0 3
33818: PUSH
33819: LD_VAR 0 1
33823: ARRAY
33824: PUSH
33825: LD_INT 3
33827: ARRAY
33828: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33829: LD_ADDR_VAR 0 7
33833: PUSH
33834: LD_VAR 0 3
33838: PUSH
33839: LD_VAR 0 1
33843: ARRAY
33844: PUSH
33845: LD_INT 4
33847: ARRAY
33848: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33849: LD_ADDR_VAR 0 9
33853: PUSH
33854: LD_VAR 0 6
33858: PPUSH
33859: LD_VAR 0 7
33863: PPUSH
33864: LD_INT 16
33866: PPUSH
33867: CALL 78354 0 3
33871: ST_TO_ADDR
// if not cratesNearbyPoint then
33872: LD_VAR 0 9
33876: NOT
33877: IFFALSE 33883
// exit ;
33879: POP
33880: POP
33881: GO 34340
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33883: LD_ADDR_VAR 0 4
33887: PUSH
33888: LD_INT 22
33890: PUSH
33891: LD_VAR 0 5
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 3
33902: PUSH
33903: LD_INT 60
33905: PUSH
33906: EMPTY
33907: LIST
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 91
33915: PUSH
33916: LD_VAR 0 8
33920: PUSH
33921: LD_INT 6
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 2
33931: PUSH
33932: LD_INT 25
33934: PUSH
33935: LD_INT 2
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 25
33944: PUSH
33945: LD_INT 16
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: LIST
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: PPUSH
33963: CALL_OW 69
33967: PUSH
33968: LD_VAR 0 8
33972: PPUSH
33973: CALL_OW 313
33977: PPUSH
33978: LD_INT 3
33980: PUSH
33981: LD_INT 60
33983: PUSH
33984: EMPTY
33985: LIST
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 2
33993: PUSH
33994: LD_INT 25
33996: PUSH
33997: LD_INT 2
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 25
34006: PUSH
34007: LD_INT 16
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: LIST
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PPUSH
34023: CALL_OW 72
34027: UNION
34028: ST_TO_ADDR
// if tmp then
34029: LD_VAR 0 4
34033: IFFALSE 34113
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34035: LD_ADDR_VAR 0 4
34039: PUSH
34040: LD_VAR 0 4
34044: PPUSH
34045: LD_INT 3
34047: PPUSH
34048: CALL 76323 0 2
34052: ST_TO_ADDR
// for j in tmp do
34053: LD_ADDR_VAR 0 2
34057: PUSH
34058: LD_VAR 0 4
34062: PUSH
34063: FOR_IN
34064: IFFALSE 34107
// begin if IsInUnit ( j ) then
34066: LD_VAR 0 2
34070: PPUSH
34071: CALL_OW 310
34075: IFFALSE 34086
// ComExit ( j ) ;
34077: LD_VAR 0 2
34081: PPUSH
34082: CALL 76406 0 1
// AddComCollect ( j , x , y ) ;
34086: LD_VAR 0 2
34090: PPUSH
34091: LD_VAR 0 6
34095: PPUSH
34096: LD_VAR 0 7
34100: PPUSH
34101: CALL_OW 177
// end ;
34105: GO 34063
34107: POP
34108: POP
// exit ;
34109: POP
34110: POP
34111: GO 34340
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34113: LD_ADDR_VAR 0 4
34117: PUSH
34118: LD_INT 22
34120: PUSH
34121: LD_VAR 0 5
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 91
34132: PUSH
34133: LD_VAR 0 8
34137: PUSH
34138: LD_INT 8
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 2
34148: PUSH
34149: LD_INT 34
34151: PUSH
34152: LD_INT 12
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 34
34161: PUSH
34162: LD_INT 51
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 34
34171: PUSH
34172: LD_INT 32
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 34
34181: PUSH
34182: LD_INT 89
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: LIST
34200: PPUSH
34201: CALL_OW 69
34205: ST_TO_ADDR
// if tmp then
34206: LD_VAR 0 4
34210: IFFALSE 34336
// begin for j in tmp do
34212: LD_ADDR_VAR 0 2
34216: PUSH
34217: LD_VAR 0 4
34221: PUSH
34222: FOR_IN
34223: IFFALSE 34334
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34225: LD_VAR 0 2
34229: PPUSH
34230: CALL_OW 262
34234: PUSH
34235: LD_INT 3
34237: EQUAL
34238: PUSH
34239: LD_VAR 0 2
34243: PPUSH
34244: CALL_OW 261
34248: PUSH
34249: LD_INT 20
34251: GREATER
34252: OR
34253: PUSH
34254: LD_VAR 0 2
34258: PPUSH
34259: CALL_OW 314
34263: NOT
34264: AND
34265: PUSH
34266: LD_VAR 0 2
34270: PPUSH
34271: CALL_OW 263
34275: PUSH
34276: LD_INT 1
34278: NONEQUAL
34279: PUSH
34280: LD_VAR 0 2
34284: PPUSH
34285: CALL_OW 311
34289: OR
34290: AND
34291: IFFALSE 34332
// begin ComCollect ( j , x , y ) ;
34293: LD_VAR 0 2
34297: PPUSH
34298: LD_VAR 0 6
34302: PPUSH
34303: LD_VAR 0 7
34307: PPUSH
34308: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34312: LD_VAR 0 2
34316: PPUSH
34317: LD_VAR 0 8
34321: PPUSH
34322: CALL_OW 172
// exit ;
34326: POP
34327: POP
34328: POP
34329: POP
34330: GO 34340
// end ;
34332: GO 34222
34334: POP
34335: POP
// end ; end ;
34336: GO 33711
34338: POP
34339: POP
// end ; end_of_file
34340: PPOPN 9
34342: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34343: LD_INT 0
34345: PPUSH
34346: PPUSH
34347: PPUSH
34348: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34349: LD_VAR 0 1
34353: PPUSH
34354: CALL_OW 264
34358: PUSH
34359: LD_INT 91
34361: EQUAL
34362: IFFALSE 34434
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34364: LD_INT 68
34366: PPUSH
34367: LD_VAR 0 1
34371: PPUSH
34372: CALL_OW 255
34376: PPUSH
34377: CALL_OW 321
34381: PUSH
34382: LD_INT 2
34384: EQUAL
34385: IFFALSE 34397
// eff := 70 else
34387: LD_ADDR_VAR 0 4
34391: PUSH
34392: LD_INT 70
34394: ST_TO_ADDR
34395: GO 34405
// eff := 30 ;
34397: LD_ADDR_VAR 0 4
34401: PUSH
34402: LD_INT 30
34404: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34405: LD_VAR 0 1
34409: PPUSH
34410: CALL_OW 250
34414: PPUSH
34415: LD_VAR 0 1
34419: PPUSH
34420: CALL_OW 251
34424: PPUSH
34425: LD_VAR 0 4
34429: PPUSH
34430: CALL_OW 495
// end ; end ;
34434: LD_VAR 0 2
34438: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34439: LD_INT 0
34441: PPUSH
// end ;
34442: LD_VAR 0 4
34446: RET
// export function SOS_Command ( cmd ) ; begin
34447: LD_INT 0
34449: PPUSH
// end ;
34450: LD_VAR 0 2
34454: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34455: LD_INT 0
34457: PPUSH
// end ;
34458: LD_VAR 0 6
34462: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34463: LD_INT 0
34465: PPUSH
34466: PPUSH
// if not vehicle or not factory then
34467: LD_VAR 0 1
34471: NOT
34472: PUSH
34473: LD_VAR 0 2
34477: NOT
34478: OR
34479: IFFALSE 34483
// exit ;
34481: GO 34714
// if factoryWaypoints >= factory then
34483: LD_EXP 120
34487: PUSH
34488: LD_VAR 0 2
34492: GREATEREQUAL
34493: IFFALSE 34714
// if factoryWaypoints [ factory ] then
34495: LD_EXP 120
34499: PUSH
34500: LD_VAR 0 2
34504: ARRAY
34505: IFFALSE 34714
// begin if GetControl ( vehicle ) = control_manual then
34507: LD_VAR 0 1
34511: PPUSH
34512: CALL_OW 263
34516: PUSH
34517: LD_INT 1
34519: EQUAL
34520: IFFALSE 34601
// begin driver := IsDrivenBy ( vehicle ) ;
34522: LD_ADDR_VAR 0 4
34526: PUSH
34527: LD_VAR 0 1
34531: PPUSH
34532: CALL_OW 311
34536: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34537: LD_VAR 0 4
34541: PPUSH
34542: LD_EXP 120
34546: PUSH
34547: LD_VAR 0 2
34551: ARRAY
34552: PUSH
34553: LD_INT 3
34555: ARRAY
34556: PPUSH
34557: LD_EXP 120
34561: PUSH
34562: LD_VAR 0 2
34566: ARRAY
34567: PUSH
34568: LD_INT 4
34570: ARRAY
34571: PPUSH
34572: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34576: LD_VAR 0 4
34580: PPUSH
34581: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34585: LD_VAR 0 4
34589: PPUSH
34590: LD_VAR 0 2
34594: PPUSH
34595: CALL_OW 180
// end else
34599: GO 34714
// if GetControl ( vehicle ) = control_remote then
34601: LD_VAR 0 1
34605: PPUSH
34606: CALL_OW 263
34610: PUSH
34611: LD_INT 2
34613: EQUAL
34614: IFFALSE 34675
// begin wait ( 0 0$2 ) ;
34616: LD_INT 70
34618: PPUSH
34619: CALL_OW 67
// if Connect ( vehicle ) then
34623: LD_VAR 0 1
34627: PPUSH
34628: CALL 46738 0 1
34632: IFFALSE 34673
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34634: LD_VAR 0 1
34638: PPUSH
34639: LD_EXP 120
34643: PUSH
34644: LD_VAR 0 2
34648: ARRAY
34649: PUSH
34650: LD_INT 3
34652: ARRAY
34653: PPUSH
34654: LD_EXP 120
34658: PUSH
34659: LD_VAR 0 2
34663: ARRAY
34664: PUSH
34665: LD_INT 4
34667: ARRAY
34668: PPUSH
34669: CALL_OW 171
// end else
34673: GO 34714
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34675: LD_VAR 0 1
34679: PPUSH
34680: LD_EXP 120
34684: PUSH
34685: LD_VAR 0 2
34689: ARRAY
34690: PUSH
34691: LD_INT 3
34693: ARRAY
34694: PPUSH
34695: LD_EXP 120
34699: PUSH
34700: LD_VAR 0 2
34704: ARRAY
34705: PUSH
34706: LD_INT 4
34708: ARRAY
34709: PPUSH
34710: CALL_OW 171
// end ; end ;
34714: LD_VAR 0 3
34718: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34719: LD_INT 0
34721: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34722: LD_VAR 0 1
34726: PUSH
34727: LD_INT 250
34729: EQUAL
34730: PUSH
34731: LD_VAR 0 2
34735: PPUSH
34736: CALL_OW 264
34740: PUSH
34741: LD_INT 81
34743: EQUAL
34744: AND
34745: IFFALSE 34766
// MinerPlaceMine ( unit , x , y ) ;
34747: LD_VAR 0 2
34751: PPUSH
34752: LD_VAR 0 4
34756: PPUSH
34757: LD_VAR 0 5
34761: PPUSH
34762: CALL 37151 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34766: LD_VAR 0 1
34770: PUSH
34771: LD_INT 251
34773: EQUAL
34774: PUSH
34775: LD_VAR 0 2
34779: PPUSH
34780: CALL_OW 264
34784: PUSH
34785: LD_INT 81
34787: EQUAL
34788: AND
34789: IFFALSE 34810
// MinerDetonateMine ( unit , x , y ) ;
34791: LD_VAR 0 2
34795: PPUSH
34796: LD_VAR 0 4
34800: PPUSH
34801: LD_VAR 0 5
34805: PPUSH
34806: CALL 37426 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34810: LD_VAR 0 1
34814: PUSH
34815: LD_INT 252
34817: EQUAL
34818: PUSH
34819: LD_VAR 0 2
34823: PPUSH
34824: CALL_OW 264
34828: PUSH
34829: LD_INT 81
34831: EQUAL
34832: AND
34833: IFFALSE 34854
// MinerCreateMinefield ( unit , x , y ) ;
34835: LD_VAR 0 2
34839: PPUSH
34840: LD_VAR 0 4
34844: PPUSH
34845: LD_VAR 0 5
34849: PPUSH
34850: CALL 37843 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34854: LD_VAR 0 1
34858: PUSH
34859: LD_INT 253
34861: EQUAL
34862: PUSH
34863: LD_VAR 0 2
34867: PPUSH
34868: CALL_OW 257
34872: PUSH
34873: LD_INT 5
34875: EQUAL
34876: AND
34877: IFFALSE 34898
// ComBinocular ( unit , x , y ) ;
34879: LD_VAR 0 2
34883: PPUSH
34884: LD_VAR 0 4
34888: PPUSH
34889: LD_VAR 0 5
34893: PPUSH
34894: CALL 38212 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34898: LD_VAR 0 1
34902: PUSH
34903: LD_INT 254
34905: EQUAL
34906: PUSH
34907: LD_VAR 0 2
34911: PPUSH
34912: CALL_OW 264
34916: PUSH
34917: LD_INT 99
34919: EQUAL
34920: AND
34921: PUSH
34922: LD_VAR 0 3
34926: PPUSH
34927: CALL_OW 263
34931: PUSH
34932: LD_INT 3
34934: EQUAL
34935: AND
34936: IFFALSE 34952
// HackDestroyVehicle ( unit , selectedUnit ) ;
34938: LD_VAR 0 2
34942: PPUSH
34943: LD_VAR 0 3
34947: PPUSH
34948: CALL 36515 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34952: LD_VAR 0 1
34956: PUSH
34957: LD_INT 255
34959: EQUAL
34960: PUSH
34961: LD_VAR 0 2
34965: PPUSH
34966: CALL_OW 264
34970: PUSH
34971: LD_INT 14
34973: PUSH
34974: LD_INT 53
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: IN
34981: AND
34982: PUSH
34983: LD_VAR 0 4
34987: PPUSH
34988: LD_VAR 0 5
34992: PPUSH
34993: CALL_OW 488
34997: AND
34998: IFFALSE 35022
// CutTreeXYR ( unit , x , y , 12 ) ;
35000: LD_VAR 0 2
35004: PPUSH
35005: LD_VAR 0 4
35009: PPUSH
35010: LD_VAR 0 5
35014: PPUSH
35015: LD_INT 12
35017: PPUSH
35018: CALL 35085 0 4
// if cmd = 256 then
35022: LD_VAR 0 1
35026: PUSH
35027: LD_INT 256
35029: EQUAL
35030: IFFALSE 35051
// SetFactoryWaypoint ( unit , x , y ) ;
35032: LD_VAR 0 2
35036: PPUSH
35037: LD_VAR 0 4
35041: PPUSH
35042: LD_VAR 0 5
35046: PPUSH
35047: CALL 33032 0 3
// if cmd = 257 then
35051: LD_VAR 0 1
35055: PUSH
35056: LD_INT 257
35058: EQUAL
35059: IFFALSE 35080
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35061: LD_VAR 0 2
35065: PPUSH
35066: LD_VAR 0 4
35070: PPUSH
35071: LD_VAR 0 5
35075: PPUSH
35076: CALL 33394 0 3
// end ;
35080: LD_VAR 0 6
35084: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35085: LD_INT 0
35087: PPUSH
35088: PPUSH
35089: PPUSH
35090: PPUSH
35091: PPUSH
35092: PPUSH
35093: PPUSH
35094: PPUSH
35095: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35096: LD_VAR 0 1
35100: NOT
35101: PUSH
35102: LD_VAR 0 2
35106: PPUSH
35107: LD_VAR 0 3
35111: PPUSH
35112: CALL_OW 488
35116: NOT
35117: OR
35118: PUSH
35119: LD_VAR 0 4
35123: NOT
35124: OR
35125: IFFALSE 35129
// exit ;
35127: GO 35469
// list := [ ] ;
35129: LD_ADDR_VAR 0 13
35133: PUSH
35134: EMPTY
35135: ST_TO_ADDR
// if x - r < 0 then
35136: LD_VAR 0 2
35140: PUSH
35141: LD_VAR 0 4
35145: MINUS
35146: PUSH
35147: LD_INT 0
35149: LESS
35150: IFFALSE 35162
// min_x := 0 else
35152: LD_ADDR_VAR 0 7
35156: PUSH
35157: LD_INT 0
35159: ST_TO_ADDR
35160: GO 35178
// min_x := x - r ;
35162: LD_ADDR_VAR 0 7
35166: PUSH
35167: LD_VAR 0 2
35171: PUSH
35172: LD_VAR 0 4
35176: MINUS
35177: ST_TO_ADDR
// if y - r < 0 then
35178: LD_VAR 0 3
35182: PUSH
35183: LD_VAR 0 4
35187: MINUS
35188: PUSH
35189: LD_INT 0
35191: LESS
35192: IFFALSE 35204
// min_y := 0 else
35194: LD_ADDR_VAR 0 8
35198: PUSH
35199: LD_INT 0
35201: ST_TO_ADDR
35202: GO 35220
// min_y := y - r ;
35204: LD_ADDR_VAR 0 8
35208: PUSH
35209: LD_VAR 0 3
35213: PUSH
35214: LD_VAR 0 4
35218: MINUS
35219: ST_TO_ADDR
// max_x := x + r ;
35220: LD_ADDR_VAR 0 9
35224: PUSH
35225: LD_VAR 0 2
35229: PUSH
35230: LD_VAR 0 4
35234: PLUS
35235: ST_TO_ADDR
// max_y := y + r ;
35236: LD_ADDR_VAR 0 10
35240: PUSH
35241: LD_VAR 0 3
35245: PUSH
35246: LD_VAR 0 4
35250: PLUS
35251: ST_TO_ADDR
// for _x = min_x to max_x do
35252: LD_ADDR_VAR 0 11
35256: PUSH
35257: DOUBLE
35258: LD_VAR 0 7
35262: DEC
35263: ST_TO_ADDR
35264: LD_VAR 0 9
35268: PUSH
35269: FOR_TO
35270: IFFALSE 35387
// for _y = min_y to max_y do
35272: LD_ADDR_VAR 0 12
35276: PUSH
35277: DOUBLE
35278: LD_VAR 0 8
35282: DEC
35283: ST_TO_ADDR
35284: LD_VAR 0 10
35288: PUSH
35289: FOR_TO
35290: IFFALSE 35383
// begin if not ValidHex ( _x , _y ) then
35292: LD_VAR 0 11
35296: PPUSH
35297: LD_VAR 0 12
35301: PPUSH
35302: CALL_OW 488
35306: NOT
35307: IFFALSE 35311
// continue ;
35309: GO 35289
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35311: LD_VAR 0 11
35315: PPUSH
35316: LD_VAR 0 12
35320: PPUSH
35321: CALL_OW 351
35325: PUSH
35326: LD_VAR 0 11
35330: PPUSH
35331: LD_VAR 0 12
35335: PPUSH
35336: CALL_OW 554
35340: AND
35341: IFFALSE 35381
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35343: LD_ADDR_VAR 0 13
35347: PUSH
35348: LD_VAR 0 13
35352: PPUSH
35353: LD_VAR 0 13
35357: PUSH
35358: LD_INT 1
35360: PLUS
35361: PPUSH
35362: LD_VAR 0 11
35366: PUSH
35367: LD_VAR 0 12
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PPUSH
35376: CALL_OW 2
35380: ST_TO_ADDR
// end ;
35381: GO 35289
35383: POP
35384: POP
35385: GO 35269
35387: POP
35388: POP
// if not list then
35389: LD_VAR 0 13
35393: NOT
35394: IFFALSE 35398
// exit ;
35396: GO 35469
// for i in list do
35398: LD_ADDR_VAR 0 6
35402: PUSH
35403: LD_VAR 0 13
35407: PUSH
35408: FOR_IN
35409: IFFALSE 35467
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35411: LD_VAR 0 1
35415: PPUSH
35416: LD_STRING M
35418: PUSH
35419: LD_VAR 0 6
35423: PUSH
35424: LD_INT 1
35426: ARRAY
35427: PUSH
35428: LD_VAR 0 6
35432: PUSH
35433: LD_INT 2
35435: ARRAY
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: LD_INT 0
35442: PUSH
35443: LD_INT 0
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: PUSH
35458: EMPTY
35459: LIST
35460: PPUSH
35461: CALL_OW 447
35465: GO 35408
35467: POP
35468: POP
// end ;
35469: LD_VAR 0 5
35473: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35474: LD_EXP 123
35478: NOT
35479: IFFALSE 35529
35481: GO 35483
35483: DISABLE
// begin initHack := true ;
35484: LD_ADDR_EXP 123
35488: PUSH
35489: LD_INT 1
35491: ST_TO_ADDR
// hackTanks := [ ] ;
35492: LD_ADDR_EXP 124
35496: PUSH
35497: EMPTY
35498: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35499: LD_ADDR_EXP 125
35503: PUSH
35504: EMPTY
35505: ST_TO_ADDR
// hackLimit := 3 ;
35506: LD_ADDR_EXP 126
35510: PUSH
35511: LD_INT 3
35513: ST_TO_ADDR
// hackDist := 12 ;
35514: LD_ADDR_EXP 127
35518: PUSH
35519: LD_INT 12
35521: ST_TO_ADDR
// hackCounter := [ ] ;
35522: LD_ADDR_EXP 128
35526: PUSH
35527: EMPTY
35528: ST_TO_ADDR
// end ;
35529: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35530: LD_EXP 123
35534: PUSH
35535: LD_INT 34
35537: PUSH
35538: LD_INT 99
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PPUSH
35545: CALL_OW 69
35549: AND
35550: IFFALSE 35803
35552: GO 35554
35554: DISABLE
35555: LD_INT 0
35557: PPUSH
35558: PPUSH
// begin enable ;
35559: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35560: LD_ADDR_VAR 0 1
35564: PUSH
35565: LD_INT 34
35567: PUSH
35568: LD_INT 99
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PPUSH
35575: CALL_OW 69
35579: PUSH
35580: FOR_IN
35581: IFFALSE 35801
// begin if not i in hackTanks then
35583: LD_VAR 0 1
35587: PUSH
35588: LD_EXP 124
35592: IN
35593: NOT
35594: IFFALSE 35677
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35596: LD_ADDR_EXP 124
35600: PUSH
35601: LD_EXP 124
35605: PPUSH
35606: LD_EXP 124
35610: PUSH
35611: LD_INT 1
35613: PLUS
35614: PPUSH
35615: LD_VAR 0 1
35619: PPUSH
35620: CALL_OW 1
35624: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35625: LD_ADDR_EXP 125
35629: PUSH
35630: LD_EXP 125
35634: PPUSH
35635: LD_EXP 125
35639: PUSH
35640: LD_INT 1
35642: PLUS
35643: PPUSH
35644: EMPTY
35645: PPUSH
35646: CALL_OW 1
35650: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35651: LD_ADDR_EXP 128
35655: PUSH
35656: LD_EXP 128
35660: PPUSH
35661: LD_EXP 128
35665: PUSH
35666: LD_INT 1
35668: PLUS
35669: PPUSH
35670: EMPTY
35671: PPUSH
35672: CALL_OW 1
35676: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35677: LD_VAR 0 1
35681: PPUSH
35682: CALL_OW 302
35686: NOT
35687: IFFALSE 35700
// begin HackUnlinkAll ( i ) ;
35689: LD_VAR 0 1
35693: PPUSH
35694: CALL 35806 0 1
// continue ;
35698: GO 35580
// end ; HackCheckCapturedStatus ( i ) ;
35700: LD_VAR 0 1
35704: PPUSH
35705: CALL 36249 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35709: LD_ADDR_VAR 0 2
35713: PUSH
35714: LD_INT 81
35716: PUSH
35717: LD_VAR 0 1
35721: PPUSH
35722: CALL_OW 255
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 33
35733: PUSH
35734: LD_INT 3
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 91
35743: PUSH
35744: LD_VAR 0 1
35748: PUSH
35749: LD_EXP 127
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 50
35761: PUSH
35762: EMPTY
35763: LIST
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: PPUSH
35771: CALL_OW 69
35775: ST_TO_ADDR
// if not tmp then
35776: LD_VAR 0 2
35780: NOT
35781: IFFALSE 35785
// continue ;
35783: GO 35580
// HackLink ( i , tmp ) ;
35785: LD_VAR 0 1
35789: PPUSH
35790: LD_VAR 0 2
35794: PPUSH
35795: CALL 35942 0 2
// end ;
35799: GO 35580
35801: POP
35802: POP
// end ;
35803: PPOPN 2
35805: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35806: LD_INT 0
35808: PPUSH
35809: PPUSH
35810: PPUSH
// if not hack in hackTanks then
35811: LD_VAR 0 1
35815: PUSH
35816: LD_EXP 124
35820: IN
35821: NOT
35822: IFFALSE 35826
// exit ;
35824: GO 35937
// index := GetElementIndex ( hackTanks , hack ) ;
35826: LD_ADDR_VAR 0 4
35830: PUSH
35831: LD_EXP 124
35835: PPUSH
35836: LD_VAR 0 1
35840: PPUSH
35841: CALL 43554 0 2
35845: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35846: LD_EXP 125
35850: PUSH
35851: LD_VAR 0 4
35855: ARRAY
35856: IFFALSE 35937
// begin for i in hackTanksCaptured [ index ] do
35858: LD_ADDR_VAR 0 3
35862: PUSH
35863: LD_EXP 125
35867: PUSH
35868: LD_VAR 0 4
35872: ARRAY
35873: PUSH
35874: FOR_IN
35875: IFFALSE 35901
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35877: LD_VAR 0 3
35881: PUSH
35882: LD_INT 1
35884: ARRAY
35885: PPUSH
35886: LD_VAR 0 3
35890: PUSH
35891: LD_INT 2
35893: ARRAY
35894: PPUSH
35895: CALL_OW 235
35899: GO 35874
35901: POP
35902: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35903: LD_ADDR_EXP 125
35907: PUSH
35908: LD_EXP 125
35912: PPUSH
35913: LD_VAR 0 4
35917: PPUSH
35918: EMPTY
35919: PPUSH
35920: CALL_OW 1
35924: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35925: LD_VAR 0 1
35929: PPUSH
35930: LD_INT 0
35932: PPUSH
35933: CALL_OW 505
// end ; end ;
35937: LD_VAR 0 2
35941: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35942: LD_INT 0
35944: PPUSH
35945: PPUSH
35946: PPUSH
// if not hack in hackTanks or not vehicles then
35947: LD_VAR 0 1
35951: PUSH
35952: LD_EXP 124
35956: IN
35957: NOT
35958: PUSH
35959: LD_VAR 0 2
35963: NOT
35964: OR
35965: IFFALSE 35969
// exit ;
35967: GO 36244
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35969: LD_ADDR_VAR 0 2
35973: PUSH
35974: LD_VAR 0 1
35978: PPUSH
35979: LD_VAR 0 2
35983: PPUSH
35984: LD_INT 1
35986: PPUSH
35987: LD_INT 1
35989: PPUSH
35990: CALL 44204 0 4
35994: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35995: LD_ADDR_VAR 0 5
35999: PUSH
36000: LD_EXP 124
36004: PPUSH
36005: LD_VAR 0 1
36009: PPUSH
36010: CALL 43554 0 2
36014: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36015: LD_EXP 125
36019: PUSH
36020: LD_VAR 0 5
36024: ARRAY
36025: PUSH
36026: LD_EXP 126
36030: LESS
36031: IFFALSE 36220
// begin for i := 1 to vehicles do
36033: LD_ADDR_VAR 0 4
36037: PUSH
36038: DOUBLE
36039: LD_INT 1
36041: DEC
36042: ST_TO_ADDR
36043: LD_VAR 0 2
36047: PUSH
36048: FOR_TO
36049: IFFALSE 36218
// begin if hackTanksCaptured [ index ] = hackLimit then
36051: LD_EXP 125
36055: PUSH
36056: LD_VAR 0 5
36060: ARRAY
36061: PUSH
36062: LD_EXP 126
36066: EQUAL
36067: IFFALSE 36071
// break ;
36069: GO 36218
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36071: LD_ADDR_EXP 128
36075: PUSH
36076: LD_EXP 128
36080: PPUSH
36081: LD_VAR 0 5
36085: PPUSH
36086: LD_EXP 128
36090: PUSH
36091: LD_VAR 0 5
36095: ARRAY
36096: PUSH
36097: LD_INT 1
36099: PLUS
36100: PPUSH
36101: CALL_OW 1
36105: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36106: LD_ADDR_EXP 125
36110: PUSH
36111: LD_EXP 125
36115: PPUSH
36116: LD_VAR 0 5
36120: PUSH
36121: LD_EXP 125
36125: PUSH
36126: LD_VAR 0 5
36130: ARRAY
36131: PUSH
36132: LD_INT 1
36134: PLUS
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PPUSH
36140: LD_VAR 0 2
36144: PUSH
36145: LD_VAR 0 4
36149: ARRAY
36150: PUSH
36151: LD_VAR 0 2
36155: PUSH
36156: LD_VAR 0 4
36160: ARRAY
36161: PPUSH
36162: CALL_OW 255
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PPUSH
36171: CALL 43769 0 3
36175: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36176: LD_VAR 0 2
36180: PUSH
36181: LD_VAR 0 4
36185: ARRAY
36186: PPUSH
36187: LD_VAR 0 1
36191: PPUSH
36192: CALL_OW 255
36196: PPUSH
36197: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36201: LD_VAR 0 2
36205: PUSH
36206: LD_VAR 0 4
36210: ARRAY
36211: PPUSH
36212: CALL_OW 141
// end ;
36216: GO 36048
36218: POP
36219: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36220: LD_VAR 0 1
36224: PPUSH
36225: LD_EXP 125
36229: PUSH
36230: LD_VAR 0 5
36234: ARRAY
36235: PUSH
36236: LD_INT 0
36238: PLUS
36239: PPUSH
36240: CALL_OW 505
// end ;
36244: LD_VAR 0 3
36248: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36249: LD_INT 0
36251: PPUSH
36252: PPUSH
36253: PPUSH
36254: PPUSH
// if not hack in hackTanks then
36255: LD_VAR 0 1
36259: PUSH
36260: LD_EXP 124
36264: IN
36265: NOT
36266: IFFALSE 36270
// exit ;
36268: GO 36510
// index := GetElementIndex ( hackTanks , hack ) ;
36270: LD_ADDR_VAR 0 4
36274: PUSH
36275: LD_EXP 124
36279: PPUSH
36280: LD_VAR 0 1
36284: PPUSH
36285: CALL 43554 0 2
36289: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36290: LD_ADDR_VAR 0 3
36294: PUSH
36295: DOUBLE
36296: LD_EXP 125
36300: PUSH
36301: LD_VAR 0 4
36305: ARRAY
36306: INC
36307: ST_TO_ADDR
36308: LD_INT 1
36310: PUSH
36311: FOR_DOWNTO
36312: IFFALSE 36484
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36314: LD_ADDR_VAR 0 5
36318: PUSH
36319: LD_EXP 125
36323: PUSH
36324: LD_VAR 0 4
36328: ARRAY
36329: PUSH
36330: LD_VAR 0 3
36334: ARRAY
36335: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36336: LD_VAR 0 5
36340: PUSH
36341: LD_INT 1
36343: ARRAY
36344: PPUSH
36345: CALL_OW 302
36349: NOT
36350: PUSH
36351: LD_VAR 0 5
36355: PUSH
36356: LD_INT 1
36358: ARRAY
36359: PPUSH
36360: CALL_OW 255
36364: PUSH
36365: LD_VAR 0 1
36369: PPUSH
36370: CALL_OW 255
36374: NONEQUAL
36375: OR
36376: IFFALSE 36482
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36378: LD_VAR 0 5
36382: PUSH
36383: LD_INT 1
36385: ARRAY
36386: PPUSH
36387: CALL_OW 305
36391: PUSH
36392: LD_VAR 0 5
36396: PUSH
36397: LD_INT 1
36399: ARRAY
36400: PPUSH
36401: CALL_OW 255
36405: PUSH
36406: LD_VAR 0 1
36410: PPUSH
36411: CALL_OW 255
36415: EQUAL
36416: AND
36417: IFFALSE 36441
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36419: LD_VAR 0 5
36423: PUSH
36424: LD_INT 1
36426: ARRAY
36427: PPUSH
36428: LD_VAR 0 5
36432: PUSH
36433: LD_INT 2
36435: ARRAY
36436: PPUSH
36437: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36441: LD_ADDR_EXP 125
36445: PUSH
36446: LD_EXP 125
36450: PPUSH
36451: LD_VAR 0 4
36455: PPUSH
36456: LD_EXP 125
36460: PUSH
36461: LD_VAR 0 4
36465: ARRAY
36466: PPUSH
36467: LD_VAR 0 3
36471: PPUSH
36472: CALL_OW 3
36476: PPUSH
36477: CALL_OW 1
36481: ST_TO_ADDR
// end ; end ;
36482: GO 36311
36484: POP
36485: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36486: LD_VAR 0 1
36490: PPUSH
36491: LD_EXP 125
36495: PUSH
36496: LD_VAR 0 4
36500: ARRAY
36501: PUSH
36502: LD_INT 0
36504: PLUS
36505: PPUSH
36506: CALL_OW 505
// end ;
36510: LD_VAR 0 2
36514: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36515: LD_INT 0
36517: PPUSH
36518: PPUSH
36519: PPUSH
36520: PPUSH
// if not hack in hackTanks then
36521: LD_VAR 0 1
36525: PUSH
36526: LD_EXP 124
36530: IN
36531: NOT
36532: IFFALSE 36536
// exit ;
36534: GO 36621
// index := GetElementIndex ( hackTanks , hack ) ;
36536: LD_ADDR_VAR 0 5
36540: PUSH
36541: LD_EXP 124
36545: PPUSH
36546: LD_VAR 0 1
36550: PPUSH
36551: CALL 43554 0 2
36555: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36556: LD_ADDR_VAR 0 4
36560: PUSH
36561: DOUBLE
36562: LD_INT 1
36564: DEC
36565: ST_TO_ADDR
36566: LD_EXP 125
36570: PUSH
36571: LD_VAR 0 5
36575: ARRAY
36576: PUSH
36577: FOR_TO
36578: IFFALSE 36619
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36580: LD_EXP 125
36584: PUSH
36585: LD_VAR 0 5
36589: ARRAY
36590: PUSH
36591: LD_VAR 0 4
36595: ARRAY
36596: PUSH
36597: LD_INT 1
36599: ARRAY
36600: PUSH
36601: LD_VAR 0 2
36605: EQUAL
36606: IFFALSE 36617
// KillUnit ( vehicle ) ;
36608: LD_VAR 0 2
36612: PPUSH
36613: CALL_OW 66
36617: GO 36577
36619: POP
36620: POP
// end ;
36621: LD_VAR 0 3
36625: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36626: LD_EXP 129
36630: NOT
36631: IFFALSE 36666
36633: GO 36635
36635: DISABLE
// begin initMiner := true ;
36636: LD_ADDR_EXP 129
36640: PUSH
36641: LD_INT 1
36643: ST_TO_ADDR
// minersList := [ ] ;
36644: LD_ADDR_EXP 130
36648: PUSH
36649: EMPTY
36650: ST_TO_ADDR
// minerMinesList := [ ] ;
36651: LD_ADDR_EXP 131
36655: PUSH
36656: EMPTY
36657: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36658: LD_ADDR_EXP 132
36662: PUSH
36663: LD_INT 5
36665: ST_TO_ADDR
// end ;
36666: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36667: LD_EXP 129
36671: PUSH
36672: LD_INT 34
36674: PUSH
36675: LD_INT 81
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PPUSH
36682: CALL_OW 69
36686: AND
36687: IFFALSE 37148
36689: GO 36691
36691: DISABLE
36692: LD_INT 0
36694: PPUSH
36695: PPUSH
36696: PPUSH
36697: PPUSH
// begin enable ;
36698: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36699: LD_ADDR_VAR 0 1
36703: PUSH
36704: LD_INT 34
36706: PUSH
36707: LD_INT 81
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PPUSH
36714: CALL_OW 69
36718: PUSH
36719: FOR_IN
36720: IFFALSE 36792
// begin if not i in minersList then
36722: LD_VAR 0 1
36726: PUSH
36727: LD_EXP 130
36731: IN
36732: NOT
36733: IFFALSE 36790
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36735: LD_ADDR_EXP 130
36739: PUSH
36740: LD_EXP 130
36744: PPUSH
36745: LD_EXP 130
36749: PUSH
36750: LD_INT 1
36752: PLUS
36753: PPUSH
36754: LD_VAR 0 1
36758: PPUSH
36759: CALL_OW 1
36763: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36764: LD_ADDR_EXP 131
36768: PUSH
36769: LD_EXP 131
36773: PPUSH
36774: LD_EXP 131
36778: PUSH
36779: LD_INT 1
36781: PLUS
36782: PPUSH
36783: EMPTY
36784: PPUSH
36785: CALL_OW 1
36789: ST_TO_ADDR
// end end ;
36790: GO 36719
36792: POP
36793: POP
// for i := minerMinesList downto 1 do
36794: LD_ADDR_VAR 0 1
36798: PUSH
36799: DOUBLE
36800: LD_EXP 131
36804: INC
36805: ST_TO_ADDR
36806: LD_INT 1
36808: PUSH
36809: FOR_DOWNTO
36810: IFFALSE 37146
// begin if IsLive ( minersList [ i ] ) then
36812: LD_EXP 130
36816: PUSH
36817: LD_VAR 0 1
36821: ARRAY
36822: PPUSH
36823: CALL_OW 300
36827: IFFALSE 36855
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36829: LD_EXP 130
36833: PUSH
36834: LD_VAR 0 1
36838: ARRAY
36839: PPUSH
36840: LD_EXP 131
36844: PUSH
36845: LD_VAR 0 1
36849: ARRAY
36850: PPUSH
36851: CALL_OW 505
// if not minerMinesList [ i ] then
36855: LD_EXP 131
36859: PUSH
36860: LD_VAR 0 1
36864: ARRAY
36865: NOT
36866: IFFALSE 36870
// continue ;
36868: GO 36809
// for j := minerMinesList [ i ] downto 1 do
36870: LD_ADDR_VAR 0 2
36874: PUSH
36875: DOUBLE
36876: LD_EXP 131
36880: PUSH
36881: LD_VAR 0 1
36885: ARRAY
36886: INC
36887: ST_TO_ADDR
36888: LD_INT 1
36890: PUSH
36891: FOR_DOWNTO
36892: IFFALSE 37142
// begin side := GetSide ( minersList [ i ] ) ;
36894: LD_ADDR_VAR 0 3
36898: PUSH
36899: LD_EXP 130
36903: PUSH
36904: LD_VAR 0 1
36908: ARRAY
36909: PPUSH
36910: CALL_OW 255
36914: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36915: LD_ADDR_VAR 0 4
36919: PUSH
36920: LD_EXP 131
36924: PUSH
36925: LD_VAR 0 1
36929: ARRAY
36930: PUSH
36931: LD_VAR 0 2
36935: ARRAY
36936: PUSH
36937: LD_INT 1
36939: ARRAY
36940: PPUSH
36941: LD_EXP 131
36945: PUSH
36946: LD_VAR 0 1
36950: ARRAY
36951: PUSH
36952: LD_VAR 0 2
36956: ARRAY
36957: PUSH
36958: LD_INT 2
36960: ARRAY
36961: PPUSH
36962: CALL_OW 428
36966: ST_TO_ADDR
// if not tmp then
36967: LD_VAR 0 4
36971: NOT
36972: IFFALSE 36976
// continue ;
36974: GO 36891
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36976: LD_VAR 0 4
36980: PUSH
36981: LD_INT 81
36983: PUSH
36984: LD_VAR 0 3
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PPUSH
36993: CALL_OW 69
36997: IN
36998: PUSH
36999: LD_EXP 131
37003: PUSH
37004: LD_VAR 0 1
37008: ARRAY
37009: PUSH
37010: LD_VAR 0 2
37014: ARRAY
37015: PUSH
37016: LD_INT 1
37018: ARRAY
37019: PPUSH
37020: LD_EXP 131
37024: PUSH
37025: LD_VAR 0 1
37029: ARRAY
37030: PUSH
37031: LD_VAR 0 2
37035: ARRAY
37036: PUSH
37037: LD_INT 2
37039: ARRAY
37040: PPUSH
37041: CALL_OW 458
37045: AND
37046: IFFALSE 37140
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37048: LD_EXP 131
37052: PUSH
37053: LD_VAR 0 1
37057: ARRAY
37058: PUSH
37059: LD_VAR 0 2
37063: ARRAY
37064: PUSH
37065: LD_INT 1
37067: ARRAY
37068: PPUSH
37069: LD_EXP 131
37073: PUSH
37074: LD_VAR 0 1
37078: ARRAY
37079: PUSH
37080: LD_VAR 0 2
37084: ARRAY
37085: PUSH
37086: LD_INT 2
37088: ARRAY
37089: PPUSH
37090: LD_VAR 0 3
37094: PPUSH
37095: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37099: LD_ADDR_EXP 131
37103: PUSH
37104: LD_EXP 131
37108: PPUSH
37109: LD_VAR 0 1
37113: PPUSH
37114: LD_EXP 131
37118: PUSH
37119: LD_VAR 0 1
37123: ARRAY
37124: PPUSH
37125: LD_VAR 0 2
37129: PPUSH
37130: CALL_OW 3
37134: PPUSH
37135: CALL_OW 1
37139: ST_TO_ADDR
// end ; end ;
37140: GO 36891
37142: POP
37143: POP
// end ;
37144: GO 36809
37146: POP
37147: POP
// end ;
37148: PPOPN 4
37150: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37151: LD_INT 0
37153: PPUSH
37154: PPUSH
// result := false ;
37155: LD_ADDR_VAR 0 4
37159: PUSH
37160: LD_INT 0
37162: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37163: LD_VAR 0 1
37167: PPUSH
37168: CALL_OW 264
37172: PUSH
37173: LD_INT 81
37175: EQUAL
37176: NOT
37177: IFFALSE 37181
// exit ;
37179: GO 37421
// index := GetElementIndex ( minersList , unit ) ;
37181: LD_ADDR_VAR 0 5
37185: PUSH
37186: LD_EXP 130
37190: PPUSH
37191: LD_VAR 0 1
37195: PPUSH
37196: CALL 43554 0 2
37200: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37201: LD_EXP 131
37205: PUSH
37206: LD_VAR 0 5
37210: ARRAY
37211: PUSH
37212: LD_EXP 132
37216: GREATEREQUAL
37217: IFFALSE 37221
// exit ;
37219: GO 37421
// ComMoveXY ( unit , x , y ) ;
37221: LD_VAR 0 1
37225: PPUSH
37226: LD_VAR 0 2
37230: PPUSH
37231: LD_VAR 0 3
37235: PPUSH
37236: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37240: LD_INT 35
37242: PPUSH
37243: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37247: LD_VAR 0 1
37251: PPUSH
37252: LD_VAR 0 2
37256: PPUSH
37257: LD_VAR 0 3
37261: PPUSH
37262: CALL 74817 0 3
37266: NOT
37267: PUSH
37268: LD_VAR 0 1
37272: PPUSH
37273: CALL_OW 314
37277: AND
37278: IFFALSE 37282
// exit ;
37280: GO 37421
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37282: LD_VAR 0 2
37286: PPUSH
37287: LD_VAR 0 3
37291: PPUSH
37292: CALL_OW 428
37296: PUSH
37297: LD_VAR 0 1
37301: EQUAL
37302: PUSH
37303: LD_VAR 0 1
37307: PPUSH
37308: CALL_OW 314
37312: NOT
37313: AND
37314: IFFALSE 37240
// PlaySoundXY ( x , y , PlantMine ) ;
37316: LD_VAR 0 2
37320: PPUSH
37321: LD_VAR 0 3
37325: PPUSH
37326: LD_STRING PlantMine
37328: PPUSH
37329: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37333: LD_VAR 0 2
37337: PPUSH
37338: LD_VAR 0 3
37342: PPUSH
37343: LD_VAR 0 1
37347: PPUSH
37348: CALL_OW 255
37352: PPUSH
37353: LD_INT 0
37355: PPUSH
37356: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37360: LD_ADDR_EXP 131
37364: PUSH
37365: LD_EXP 131
37369: PPUSH
37370: LD_VAR 0 5
37374: PUSH
37375: LD_EXP 131
37379: PUSH
37380: LD_VAR 0 5
37384: ARRAY
37385: PUSH
37386: LD_INT 1
37388: PLUS
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PPUSH
37394: LD_VAR 0 2
37398: PUSH
37399: LD_VAR 0 3
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PPUSH
37408: CALL 43769 0 3
37412: ST_TO_ADDR
// result := true ;
37413: LD_ADDR_VAR 0 4
37417: PUSH
37418: LD_INT 1
37420: ST_TO_ADDR
// end ;
37421: LD_VAR 0 4
37425: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37426: LD_INT 0
37428: PPUSH
37429: PPUSH
37430: PPUSH
// if not unit in minersList then
37431: LD_VAR 0 1
37435: PUSH
37436: LD_EXP 130
37440: IN
37441: NOT
37442: IFFALSE 37446
// exit ;
37444: GO 37838
// index := GetElementIndex ( minersList , unit ) ;
37446: LD_ADDR_VAR 0 6
37450: PUSH
37451: LD_EXP 130
37455: PPUSH
37456: LD_VAR 0 1
37460: PPUSH
37461: CALL 43554 0 2
37465: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37466: LD_ADDR_VAR 0 5
37470: PUSH
37471: DOUBLE
37472: LD_EXP 131
37476: PUSH
37477: LD_VAR 0 6
37481: ARRAY
37482: INC
37483: ST_TO_ADDR
37484: LD_INT 1
37486: PUSH
37487: FOR_DOWNTO
37488: IFFALSE 37649
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37490: LD_EXP 131
37494: PUSH
37495: LD_VAR 0 6
37499: ARRAY
37500: PUSH
37501: LD_VAR 0 5
37505: ARRAY
37506: PUSH
37507: LD_INT 1
37509: ARRAY
37510: PUSH
37511: LD_VAR 0 2
37515: EQUAL
37516: PUSH
37517: LD_EXP 131
37521: PUSH
37522: LD_VAR 0 6
37526: ARRAY
37527: PUSH
37528: LD_VAR 0 5
37532: ARRAY
37533: PUSH
37534: LD_INT 2
37536: ARRAY
37537: PUSH
37538: LD_VAR 0 3
37542: EQUAL
37543: AND
37544: IFFALSE 37647
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37546: LD_EXP 131
37550: PUSH
37551: LD_VAR 0 6
37555: ARRAY
37556: PUSH
37557: LD_VAR 0 5
37561: ARRAY
37562: PUSH
37563: LD_INT 1
37565: ARRAY
37566: PPUSH
37567: LD_EXP 131
37571: PUSH
37572: LD_VAR 0 6
37576: ARRAY
37577: PUSH
37578: LD_VAR 0 5
37582: ARRAY
37583: PUSH
37584: LD_INT 2
37586: ARRAY
37587: PPUSH
37588: LD_VAR 0 1
37592: PPUSH
37593: CALL_OW 255
37597: PPUSH
37598: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37602: LD_ADDR_EXP 131
37606: PUSH
37607: LD_EXP 131
37611: PPUSH
37612: LD_VAR 0 6
37616: PPUSH
37617: LD_EXP 131
37621: PUSH
37622: LD_VAR 0 6
37626: ARRAY
37627: PPUSH
37628: LD_VAR 0 5
37632: PPUSH
37633: CALL_OW 3
37637: PPUSH
37638: CALL_OW 1
37642: ST_TO_ADDR
// exit ;
37643: POP
37644: POP
37645: GO 37838
// end ; end ;
37647: GO 37487
37649: POP
37650: POP
// for i := minerMinesList [ index ] downto 1 do
37651: LD_ADDR_VAR 0 5
37655: PUSH
37656: DOUBLE
37657: LD_EXP 131
37661: PUSH
37662: LD_VAR 0 6
37666: ARRAY
37667: INC
37668: ST_TO_ADDR
37669: LD_INT 1
37671: PUSH
37672: FOR_DOWNTO
37673: IFFALSE 37836
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37675: LD_EXP 131
37679: PUSH
37680: LD_VAR 0 6
37684: ARRAY
37685: PUSH
37686: LD_VAR 0 5
37690: ARRAY
37691: PUSH
37692: LD_INT 1
37694: ARRAY
37695: PPUSH
37696: LD_EXP 131
37700: PUSH
37701: LD_VAR 0 6
37705: ARRAY
37706: PUSH
37707: LD_VAR 0 5
37711: ARRAY
37712: PUSH
37713: LD_INT 2
37715: ARRAY
37716: PPUSH
37717: LD_VAR 0 2
37721: PPUSH
37722: LD_VAR 0 3
37726: PPUSH
37727: CALL_OW 298
37731: PUSH
37732: LD_INT 6
37734: LESS
37735: IFFALSE 37834
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37737: LD_EXP 131
37741: PUSH
37742: LD_VAR 0 6
37746: ARRAY
37747: PUSH
37748: LD_VAR 0 5
37752: ARRAY
37753: PUSH
37754: LD_INT 1
37756: ARRAY
37757: PPUSH
37758: LD_EXP 131
37762: PUSH
37763: LD_VAR 0 6
37767: ARRAY
37768: PUSH
37769: LD_VAR 0 5
37773: ARRAY
37774: PUSH
37775: LD_INT 2
37777: ARRAY
37778: PPUSH
37779: LD_VAR 0 1
37783: PPUSH
37784: CALL_OW 255
37788: PPUSH
37789: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37793: LD_ADDR_EXP 131
37797: PUSH
37798: LD_EXP 131
37802: PPUSH
37803: LD_VAR 0 6
37807: PPUSH
37808: LD_EXP 131
37812: PUSH
37813: LD_VAR 0 6
37817: ARRAY
37818: PPUSH
37819: LD_VAR 0 5
37823: PPUSH
37824: CALL_OW 3
37828: PPUSH
37829: CALL_OW 1
37833: ST_TO_ADDR
// end ; end ;
37834: GO 37672
37836: POP
37837: POP
// end ;
37838: LD_VAR 0 4
37842: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37843: LD_INT 0
37845: PPUSH
37846: PPUSH
37847: PPUSH
37848: PPUSH
37849: PPUSH
37850: PPUSH
37851: PPUSH
37852: PPUSH
37853: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37854: LD_VAR 0 1
37858: PPUSH
37859: CALL_OW 264
37863: PUSH
37864: LD_INT 81
37866: EQUAL
37867: NOT
37868: PUSH
37869: LD_VAR 0 1
37873: PUSH
37874: LD_EXP 130
37878: IN
37879: NOT
37880: OR
37881: IFFALSE 37885
// exit ;
37883: GO 38207
// index := GetElementIndex ( minersList , unit ) ;
37885: LD_ADDR_VAR 0 6
37889: PUSH
37890: LD_EXP 130
37894: PPUSH
37895: LD_VAR 0 1
37899: PPUSH
37900: CALL 43554 0 2
37904: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37905: LD_ADDR_VAR 0 8
37909: PUSH
37910: LD_EXP 132
37914: PUSH
37915: LD_EXP 131
37919: PUSH
37920: LD_VAR 0 6
37924: ARRAY
37925: MINUS
37926: ST_TO_ADDR
// if not minesFreeAmount then
37927: LD_VAR 0 8
37931: NOT
37932: IFFALSE 37936
// exit ;
37934: GO 38207
// tmp := [ ] ;
37936: LD_ADDR_VAR 0 7
37940: PUSH
37941: EMPTY
37942: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37943: LD_ADDR_VAR 0 5
37947: PUSH
37948: DOUBLE
37949: LD_INT 1
37951: DEC
37952: ST_TO_ADDR
37953: LD_VAR 0 8
37957: PUSH
37958: FOR_TO
37959: IFFALSE 38154
// begin _d := rand ( 0 , 5 ) ;
37961: LD_ADDR_VAR 0 11
37965: PUSH
37966: LD_INT 0
37968: PPUSH
37969: LD_INT 5
37971: PPUSH
37972: CALL_OW 12
37976: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37977: LD_ADDR_VAR 0 12
37981: PUSH
37982: LD_INT 2
37984: PPUSH
37985: LD_INT 6
37987: PPUSH
37988: CALL_OW 12
37992: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37993: LD_ADDR_VAR 0 9
37997: PUSH
37998: LD_VAR 0 2
38002: PPUSH
38003: LD_VAR 0 11
38007: PPUSH
38008: LD_VAR 0 12
38012: PPUSH
38013: CALL_OW 272
38017: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38018: LD_ADDR_VAR 0 10
38022: PUSH
38023: LD_VAR 0 3
38027: PPUSH
38028: LD_VAR 0 11
38032: PPUSH
38033: LD_VAR 0 12
38037: PPUSH
38038: CALL_OW 273
38042: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38043: LD_VAR 0 9
38047: PPUSH
38048: LD_VAR 0 10
38052: PPUSH
38053: CALL_OW 488
38057: PUSH
38058: LD_VAR 0 9
38062: PUSH
38063: LD_VAR 0 10
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_VAR 0 7
38076: IN
38077: NOT
38078: AND
38079: PUSH
38080: LD_VAR 0 9
38084: PPUSH
38085: LD_VAR 0 10
38089: PPUSH
38090: CALL_OW 458
38094: NOT
38095: AND
38096: IFFALSE 38138
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38098: LD_ADDR_VAR 0 7
38102: PUSH
38103: LD_VAR 0 7
38107: PPUSH
38108: LD_VAR 0 7
38112: PUSH
38113: LD_INT 1
38115: PLUS
38116: PPUSH
38117: LD_VAR 0 9
38121: PUSH
38122: LD_VAR 0 10
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PPUSH
38131: CALL_OW 1
38135: ST_TO_ADDR
38136: GO 38152
// i := i - 1 ;
38138: LD_ADDR_VAR 0 5
38142: PUSH
38143: LD_VAR 0 5
38147: PUSH
38148: LD_INT 1
38150: MINUS
38151: ST_TO_ADDR
// end ;
38152: GO 37958
38154: POP
38155: POP
// for i in tmp do
38156: LD_ADDR_VAR 0 5
38160: PUSH
38161: LD_VAR 0 7
38165: PUSH
38166: FOR_IN
38167: IFFALSE 38205
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38169: LD_VAR 0 1
38173: PPUSH
38174: LD_VAR 0 5
38178: PUSH
38179: LD_INT 1
38181: ARRAY
38182: PPUSH
38183: LD_VAR 0 5
38187: PUSH
38188: LD_INT 2
38190: ARRAY
38191: PPUSH
38192: CALL 37151 0 3
38196: NOT
38197: IFFALSE 38203
// exit ;
38199: POP
38200: POP
38201: GO 38207
38203: GO 38166
38205: POP
38206: POP
// end ;
38207: LD_VAR 0 4
38211: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38212: LD_INT 0
38214: PPUSH
38215: PPUSH
38216: PPUSH
38217: PPUSH
38218: PPUSH
38219: PPUSH
38220: PPUSH
// if not GetClass ( unit ) = class_sniper then
38221: LD_VAR 0 1
38225: PPUSH
38226: CALL_OW 257
38230: PUSH
38231: LD_INT 5
38233: EQUAL
38234: NOT
38235: IFFALSE 38239
// exit ;
38237: GO 38627
// dist := 8 ;
38239: LD_ADDR_VAR 0 5
38243: PUSH
38244: LD_INT 8
38246: ST_TO_ADDR
// viewRange := 12 ;
38247: LD_ADDR_VAR 0 7
38251: PUSH
38252: LD_INT 12
38254: ST_TO_ADDR
// side := GetSide ( unit ) ;
38255: LD_ADDR_VAR 0 6
38259: PUSH
38260: LD_VAR 0 1
38264: PPUSH
38265: CALL_OW 255
38269: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38270: LD_INT 61
38272: PPUSH
38273: LD_VAR 0 6
38277: PPUSH
38278: CALL_OW 321
38282: PUSH
38283: LD_INT 2
38285: EQUAL
38286: IFFALSE 38296
// viewRange := 16 ;
38288: LD_ADDR_VAR 0 7
38292: PUSH
38293: LD_INT 16
38295: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38296: LD_VAR 0 1
38300: PPUSH
38301: LD_VAR 0 2
38305: PPUSH
38306: LD_VAR 0 3
38310: PPUSH
38311: CALL_OW 297
38315: PUSH
38316: LD_VAR 0 5
38320: GREATER
38321: IFFALSE 38400
// begin ComMoveXY ( unit , x , y ) ;
38323: LD_VAR 0 1
38327: PPUSH
38328: LD_VAR 0 2
38332: PPUSH
38333: LD_VAR 0 3
38337: PPUSH
38338: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38342: LD_INT 35
38344: PPUSH
38345: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38349: LD_VAR 0 1
38353: PPUSH
38354: LD_VAR 0 2
38358: PPUSH
38359: LD_VAR 0 3
38363: PPUSH
38364: CALL 74817 0 3
38368: NOT
38369: IFFALSE 38373
// exit ;
38371: GO 38627
// until GetDistUnitXY ( unit , x , y ) < dist ;
38373: LD_VAR 0 1
38377: PPUSH
38378: LD_VAR 0 2
38382: PPUSH
38383: LD_VAR 0 3
38387: PPUSH
38388: CALL_OW 297
38392: PUSH
38393: LD_VAR 0 5
38397: LESS
38398: IFFALSE 38342
// end ; ComTurnXY ( unit , x , y ) ;
38400: LD_VAR 0 1
38404: PPUSH
38405: LD_VAR 0 2
38409: PPUSH
38410: LD_VAR 0 3
38414: PPUSH
38415: CALL_OW 118
// wait ( 5 ) ;
38419: LD_INT 5
38421: PPUSH
38422: CALL_OW 67
// _d := GetDir ( unit ) ;
38426: LD_ADDR_VAR 0 10
38430: PUSH
38431: LD_VAR 0 1
38435: PPUSH
38436: CALL_OW 254
38440: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38441: LD_ADDR_VAR 0 8
38445: PUSH
38446: LD_VAR 0 1
38450: PPUSH
38451: CALL_OW 250
38455: PPUSH
38456: LD_VAR 0 10
38460: PPUSH
38461: LD_VAR 0 5
38465: PPUSH
38466: CALL_OW 272
38470: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38471: LD_ADDR_VAR 0 9
38475: PUSH
38476: LD_VAR 0 1
38480: PPUSH
38481: CALL_OW 251
38485: PPUSH
38486: LD_VAR 0 10
38490: PPUSH
38491: LD_VAR 0 5
38495: PPUSH
38496: CALL_OW 273
38500: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38501: LD_VAR 0 8
38505: PPUSH
38506: LD_VAR 0 9
38510: PPUSH
38511: CALL_OW 488
38515: NOT
38516: IFFALSE 38520
// exit ;
38518: GO 38627
// ComAnimCustom ( unit , 1 ) ;
38520: LD_VAR 0 1
38524: PPUSH
38525: LD_INT 1
38527: PPUSH
38528: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38532: LD_VAR 0 8
38536: PPUSH
38537: LD_VAR 0 9
38541: PPUSH
38542: LD_VAR 0 6
38546: PPUSH
38547: LD_VAR 0 7
38551: PPUSH
38552: CALL_OW 330
// repeat wait ( 1 ) ;
38556: LD_INT 1
38558: PPUSH
38559: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38563: LD_VAR 0 1
38567: PPUSH
38568: CALL_OW 316
38572: PUSH
38573: LD_VAR 0 1
38577: PPUSH
38578: CALL_OW 314
38582: OR
38583: PUSH
38584: LD_VAR 0 1
38588: PPUSH
38589: CALL_OW 302
38593: NOT
38594: OR
38595: PUSH
38596: LD_VAR 0 1
38600: PPUSH
38601: CALL_OW 301
38605: OR
38606: IFFALSE 38556
// RemoveSeeing ( _x , _y , side ) ;
38608: LD_VAR 0 8
38612: PPUSH
38613: LD_VAR 0 9
38617: PPUSH
38618: LD_VAR 0 6
38622: PPUSH
38623: CALL_OW 331
// end ; end_of_file
38627: LD_VAR 0 4
38631: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38632: LD_INT 0
38634: PPUSH
38635: PPUSH
// if exist_mode then
38636: LD_VAR 0 2
38640: IFFALSE 38665
// unit := CreateCharacter ( prefix & ident ) else
38642: LD_ADDR_VAR 0 5
38646: PUSH
38647: LD_VAR 0 3
38651: PUSH
38652: LD_VAR 0 1
38656: STR
38657: PPUSH
38658: CALL_OW 34
38662: ST_TO_ADDR
38663: GO 38680
// unit := NewCharacter ( ident ) ;
38665: LD_ADDR_VAR 0 5
38669: PUSH
38670: LD_VAR 0 1
38674: PPUSH
38675: CALL_OW 25
38679: ST_TO_ADDR
// result := unit ;
38680: LD_ADDR_VAR 0 4
38684: PUSH
38685: LD_VAR 0 5
38689: ST_TO_ADDR
// end ;
38690: LD_VAR 0 4
38694: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38695: LD_INT 0
38697: PPUSH
38698: PPUSH
// if not side or not nation then
38699: LD_VAR 0 1
38703: NOT
38704: PUSH
38705: LD_VAR 0 2
38709: NOT
38710: OR
38711: IFFALSE 38715
// exit ;
38713: GO 39483
// case nation of nation_american :
38715: LD_VAR 0 2
38719: PUSH
38720: LD_INT 1
38722: DOUBLE
38723: EQUAL
38724: IFTRUE 38728
38726: GO 38942
38728: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38729: LD_ADDR_VAR 0 4
38733: PUSH
38734: LD_INT 35
38736: PUSH
38737: LD_INT 45
38739: PUSH
38740: LD_INT 46
38742: PUSH
38743: LD_INT 47
38745: PUSH
38746: LD_INT 82
38748: PUSH
38749: LD_INT 83
38751: PUSH
38752: LD_INT 84
38754: PUSH
38755: LD_INT 85
38757: PUSH
38758: LD_INT 86
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: LD_INT 2
38766: PUSH
38767: LD_INT 6
38769: PUSH
38770: LD_INT 15
38772: PUSH
38773: LD_INT 16
38775: PUSH
38776: LD_INT 7
38778: PUSH
38779: LD_INT 12
38781: PUSH
38782: LD_INT 13
38784: PUSH
38785: LD_INT 10
38787: PUSH
38788: LD_INT 14
38790: PUSH
38791: LD_INT 20
38793: PUSH
38794: LD_INT 21
38796: PUSH
38797: LD_INT 22
38799: PUSH
38800: LD_INT 25
38802: PUSH
38803: LD_INT 32
38805: PUSH
38806: LD_INT 27
38808: PUSH
38809: LD_INT 36
38811: PUSH
38812: LD_INT 69
38814: PUSH
38815: LD_INT 39
38817: PUSH
38818: LD_INT 34
38820: PUSH
38821: LD_INT 40
38823: PUSH
38824: LD_INT 48
38826: PUSH
38827: LD_INT 49
38829: PUSH
38830: LD_INT 50
38832: PUSH
38833: LD_INT 51
38835: PUSH
38836: LD_INT 52
38838: PUSH
38839: LD_INT 53
38841: PUSH
38842: LD_INT 54
38844: PUSH
38845: LD_INT 55
38847: PUSH
38848: LD_INT 56
38850: PUSH
38851: LD_INT 57
38853: PUSH
38854: LD_INT 58
38856: PUSH
38857: LD_INT 59
38859: PUSH
38860: LD_INT 60
38862: PUSH
38863: LD_INT 61
38865: PUSH
38866: LD_INT 62
38868: PUSH
38869: LD_INT 80
38871: PUSH
38872: LD_INT 82
38874: PUSH
38875: LD_INT 83
38877: PUSH
38878: LD_INT 84
38880: PUSH
38881: LD_INT 85
38883: PUSH
38884: LD_INT 86
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: ST_TO_ADDR
38940: GO 39407
38942: LD_INT 2
38944: DOUBLE
38945: EQUAL
38946: IFTRUE 38950
38948: GO 39176
38950: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38951: LD_ADDR_VAR 0 4
38955: PUSH
38956: LD_INT 35
38958: PUSH
38959: LD_INT 45
38961: PUSH
38962: LD_INT 46
38964: PUSH
38965: LD_INT 47
38967: PUSH
38968: LD_INT 82
38970: PUSH
38971: LD_INT 83
38973: PUSH
38974: LD_INT 84
38976: PUSH
38977: LD_INT 85
38979: PUSH
38980: LD_INT 87
38982: PUSH
38983: LD_INT 70
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: LD_INT 11
38991: PUSH
38992: LD_INT 3
38994: PUSH
38995: LD_INT 4
38997: PUSH
38998: LD_INT 5
39000: PUSH
39001: LD_INT 6
39003: PUSH
39004: LD_INT 15
39006: PUSH
39007: LD_INT 18
39009: PUSH
39010: LD_INT 7
39012: PUSH
39013: LD_INT 17
39015: PUSH
39016: LD_INT 8
39018: PUSH
39019: LD_INT 20
39021: PUSH
39022: LD_INT 21
39024: PUSH
39025: LD_INT 22
39027: PUSH
39028: LD_INT 72
39030: PUSH
39031: LD_INT 26
39033: PUSH
39034: LD_INT 69
39036: PUSH
39037: LD_INT 39
39039: PUSH
39040: LD_INT 40
39042: PUSH
39043: LD_INT 41
39045: PUSH
39046: LD_INT 42
39048: PUSH
39049: LD_INT 43
39051: PUSH
39052: LD_INT 48
39054: PUSH
39055: LD_INT 49
39057: PUSH
39058: LD_INT 50
39060: PUSH
39061: LD_INT 51
39063: PUSH
39064: LD_INT 52
39066: PUSH
39067: LD_INT 53
39069: PUSH
39070: LD_INT 54
39072: PUSH
39073: LD_INT 55
39075: PUSH
39076: LD_INT 56
39078: PUSH
39079: LD_INT 60
39081: PUSH
39082: LD_INT 61
39084: PUSH
39085: LD_INT 62
39087: PUSH
39088: LD_INT 66
39090: PUSH
39091: LD_INT 67
39093: PUSH
39094: LD_INT 68
39096: PUSH
39097: LD_INT 81
39099: PUSH
39100: LD_INT 82
39102: PUSH
39103: LD_INT 83
39105: PUSH
39106: LD_INT 84
39108: PUSH
39109: LD_INT 85
39111: PUSH
39112: LD_INT 87
39114: PUSH
39115: LD_INT 88
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: ST_TO_ADDR
39174: GO 39407
39176: LD_INT 3
39178: DOUBLE
39179: EQUAL
39180: IFTRUE 39184
39182: GO 39406
39184: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39185: LD_ADDR_VAR 0 4
39189: PUSH
39190: LD_INT 46
39192: PUSH
39193: LD_INT 47
39195: PUSH
39196: LD_INT 1
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: LD_INT 82
39204: PUSH
39205: LD_INT 83
39207: PUSH
39208: LD_INT 84
39210: PUSH
39211: LD_INT 85
39213: PUSH
39214: LD_INT 86
39216: PUSH
39217: LD_INT 11
39219: PUSH
39220: LD_INT 9
39222: PUSH
39223: LD_INT 20
39225: PUSH
39226: LD_INT 19
39228: PUSH
39229: LD_INT 21
39231: PUSH
39232: LD_INT 24
39234: PUSH
39235: LD_INT 22
39237: PUSH
39238: LD_INT 25
39240: PUSH
39241: LD_INT 28
39243: PUSH
39244: LD_INT 29
39246: PUSH
39247: LD_INT 30
39249: PUSH
39250: LD_INT 31
39252: PUSH
39253: LD_INT 37
39255: PUSH
39256: LD_INT 38
39258: PUSH
39259: LD_INT 32
39261: PUSH
39262: LD_INT 27
39264: PUSH
39265: LD_INT 33
39267: PUSH
39268: LD_INT 69
39270: PUSH
39271: LD_INT 39
39273: PUSH
39274: LD_INT 34
39276: PUSH
39277: LD_INT 40
39279: PUSH
39280: LD_INT 71
39282: PUSH
39283: LD_INT 23
39285: PUSH
39286: LD_INT 44
39288: PUSH
39289: LD_INT 48
39291: PUSH
39292: LD_INT 49
39294: PUSH
39295: LD_INT 50
39297: PUSH
39298: LD_INT 51
39300: PUSH
39301: LD_INT 52
39303: PUSH
39304: LD_INT 53
39306: PUSH
39307: LD_INT 54
39309: PUSH
39310: LD_INT 55
39312: PUSH
39313: LD_INT 56
39315: PUSH
39316: LD_INT 57
39318: PUSH
39319: LD_INT 58
39321: PUSH
39322: LD_INT 59
39324: PUSH
39325: LD_INT 63
39327: PUSH
39328: LD_INT 64
39330: PUSH
39331: LD_INT 65
39333: PUSH
39334: LD_INT 82
39336: PUSH
39337: LD_INT 83
39339: PUSH
39340: LD_INT 84
39342: PUSH
39343: LD_INT 85
39345: PUSH
39346: LD_INT 86
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: ST_TO_ADDR
39404: GO 39407
39406: POP
// if state > - 1 and state < 3 then
39407: LD_VAR 0 3
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: GREATER
39416: PUSH
39417: LD_VAR 0 3
39421: PUSH
39422: LD_INT 3
39424: LESS
39425: AND
39426: IFFALSE 39483
// for i in result do
39428: LD_ADDR_VAR 0 5
39432: PUSH
39433: LD_VAR 0 4
39437: PUSH
39438: FOR_IN
39439: IFFALSE 39481
// if GetTech ( i , side ) <> state then
39441: LD_VAR 0 5
39445: PPUSH
39446: LD_VAR 0 1
39450: PPUSH
39451: CALL_OW 321
39455: PUSH
39456: LD_VAR 0 3
39460: NONEQUAL
39461: IFFALSE 39479
// result := result diff i ;
39463: LD_ADDR_VAR 0 4
39467: PUSH
39468: LD_VAR 0 4
39472: PUSH
39473: LD_VAR 0 5
39477: DIFF
39478: ST_TO_ADDR
39479: GO 39438
39481: POP
39482: POP
// end ;
39483: LD_VAR 0 4
39487: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39488: LD_INT 0
39490: PPUSH
39491: PPUSH
39492: PPUSH
// result := true ;
39493: LD_ADDR_VAR 0 3
39497: PUSH
39498: LD_INT 1
39500: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39501: LD_ADDR_VAR 0 5
39505: PUSH
39506: LD_VAR 0 2
39510: PPUSH
39511: CALL_OW 480
39515: ST_TO_ADDR
// if not tmp then
39516: LD_VAR 0 5
39520: NOT
39521: IFFALSE 39525
// exit ;
39523: GO 39574
// for i in tmp do
39525: LD_ADDR_VAR 0 4
39529: PUSH
39530: LD_VAR 0 5
39534: PUSH
39535: FOR_IN
39536: IFFALSE 39572
// if GetTech ( i , side ) <> state_researched then
39538: LD_VAR 0 4
39542: PPUSH
39543: LD_VAR 0 1
39547: PPUSH
39548: CALL_OW 321
39552: PUSH
39553: LD_INT 2
39555: NONEQUAL
39556: IFFALSE 39570
// begin result := false ;
39558: LD_ADDR_VAR 0 3
39562: PUSH
39563: LD_INT 0
39565: ST_TO_ADDR
// exit ;
39566: POP
39567: POP
39568: GO 39574
// end ;
39570: GO 39535
39572: POP
39573: POP
// end ;
39574: LD_VAR 0 3
39578: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39579: LD_INT 0
39581: PPUSH
39582: PPUSH
39583: PPUSH
39584: PPUSH
39585: PPUSH
39586: PPUSH
39587: PPUSH
39588: PPUSH
39589: PPUSH
39590: PPUSH
39591: PPUSH
39592: PPUSH
39593: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39594: LD_VAR 0 1
39598: NOT
39599: PUSH
39600: LD_VAR 0 1
39604: PPUSH
39605: CALL_OW 257
39609: PUSH
39610: LD_INT 9
39612: NONEQUAL
39613: OR
39614: IFFALSE 39618
// exit ;
39616: GO 40191
// side := GetSide ( unit ) ;
39618: LD_ADDR_VAR 0 9
39622: PUSH
39623: LD_VAR 0 1
39627: PPUSH
39628: CALL_OW 255
39632: ST_TO_ADDR
// tech_space := tech_spacanom ;
39633: LD_ADDR_VAR 0 12
39637: PUSH
39638: LD_INT 29
39640: ST_TO_ADDR
// tech_time := tech_taurad ;
39641: LD_ADDR_VAR 0 13
39645: PUSH
39646: LD_INT 28
39648: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39649: LD_ADDR_VAR 0 11
39653: PUSH
39654: LD_VAR 0 1
39658: PPUSH
39659: CALL_OW 310
39663: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39664: LD_VAR 0 11
39668: PPUSH
39669: CALL_OW 247
39673: PUSH
39674: LD_INT 2
39676: EQUAL
39677: IFFALSE 39681
// exit ;
39679: GO 40191
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39681: LD_ADDR_VAR 0 8
39685: PUSH
39686: LD_INT 81
39688: PUSH
39689: LD_VAR 0 9
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 3
39700: PUSH
39701: LD_INT 21
39703: PUSH
39704: LD_INT 3
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PPUSH
39719: CALL_OW 69
39723: ST_TO_ADDR
// if not tmp then
39724: LD_VAR 0 8
39728: NOT
39729: IFFALSE 39733
// exit ;
39731: GO 40191
// if in_unit then
39733: LD_VAR 0 11
39737: IFFALSE 39761
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39739: LD_ADDR_VAR 0 10
39743: PUSH
39744: LD_VAR 0 8
39748: PPUSH
39749: LD_VAR 0 11
39753: PPUSH
39754: CALL_OW 74
39758: ST_TO_ADDR
39759: GO 39781
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39761: LD_ADDR_VAR 0 10
39765: PUSH
39766: LD_VAR 0 8
39770: PPUSH
39771: LD_VAR 0 1
39775: PPUSH
39776: CALL_OW 74
39780: ST_TO_ADDR
// if not enemy then
39781: LD_VAR 0 10
39785: NOT
39786: IFFALSE 39790
// exit ;
39788: GO 40191
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39790: LD_VAR 0 11
39794: PUSH
39795: LD_VAR 0 11
39799: PPUSH
39800: LD_VAR 0 10
39804: PPUSH
39805: CALL_OW 296
39809: PUSH
39810: LD_INT 13
39812: GREATER
39813: AND
39814: PUSH
39815: LD_VAR 0 1
39819: PPUSH
39820: LD_VAR 0 10
39824: PPUSH
39825: CALL_OW 296
39829: PUSH
39830: LD_INT 12
39832: GREATER
39833: OR
39834: IFFALSE 39838
// exit ;
39836: GO 40191
// missile := [ 1 ] ;
39838: LD_ADDR_VAR 0 14
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: EMPTY
39847: LIST
39848: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39849: LD_VAR 0 9
39853: PPUSH
39854: LD_VAR 0 12
39858: PPUSH
39859: CALL_OW 325
39863: IFFALSE 39892
// missile := Replace ( missile , missile + 1 , 2 ) ;
39865: LD_ADDR_VAR 0 14
39869: PUSH
39870: LD_VAR 0 14
39874: PPUSH
39875: LD_VAR 0 14
39879: PUSH
39880: LD_INT 1
39882: PLUS
39883: PPUSH
39884: LD_INT 2
39886: PPUSH
39887: CALL_OW 1
39891: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39892: LD_VAR 0 9
39896: PPUSH
39897: LD_VAR 0 13
39901: PPUSH
39902: CALL_OW 325
39906: PUSH
39907: LD_VAR 0 10
39911: PPUSH
39912: CALL_OW 255
39916: PPUSH
39917: LD_VAR 0 13
39921: PPUSH
39922: CALL_OW 325
39926: NOT
39927: AND
39928: IFFALSE 39957
// missile := Replace ( missile , missile + 1 , 3 ) ;
39930: LD_ADDR_VAR 0 14
39934: PUSH
39935: LD_VAR 0 14
39939: PPUSH
39940: LD_VAR 0 14
39944: PUSH
39945: LD_INT 1
39947: PLUS
39948: PPUSH
39949: LD_INT 3
39951: PPUSH
39952: CALL_OW 1
39956: ST_TO_ADDR
// if missile < 2 then
39957: LD_VAR 0 14
39961: PUSH
39962: LD_INT 2
39964: LESS
39965: IFFALSE 39969
// exit ;
39967: GO 40191
// x := GetX ( enemy ) ;
39969: LD_ADDR_VAR 0 4
39973: PUSH
39974: LD_VAR 0 10
39978: PPUSH
39979: CALL_OW 250
39983: ST_TO_ADDR
// y := GetY ( enemy ) ;
39984: LD_ADDR_VAR 0 5
39988: PUSH
39989: LD_VAR 0 10
39993: PPUSH
39994: CALL_OW 251
39998: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39999: LD_ADDR_VAR 0 6
40003: PUSH
40004: LD_VAR 0 4
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PPUSH
40013: LD_INT 1
40015: PPUSH
40016: CALL_OW 12
40020: PLUS
40021: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40022: LD_ADDR_VAR 0 7
40026: PUSH
40027: LD_VAR 0 5
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PPUSH
40036: LD_INT 1
40038: PPUSH
40039: CALL_OW 12
40043: PLUS
40044: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40045: LD_VAR 0 6
40049: PPUSH
40050: LD_VAR 0 7
40054: PPUSH
40055: CALL_OW 488
40059: NOT
40060: IFFALSE 40082
// begin _x := x ;
40062: LD_ADDR_VAR 0 6
40066: PUSH
40067: LD_VAR 0 4
40071: ST_TO_ADDR
// _y := y ;
40072: LD_ADDR_VAR 0 7
40076: PUSH
40077: LD_VAR 0 5
40081: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40082: LD_ADDR_VAR 0 3
40086: PUSH
40087: LD_INT 1
40089: PPUSH
40090: LD_VAR 0 14
40094: PPUSH
40095: CALL_OW 12
40099: ST_TO_ADDR
// case i of 1 :
40100: LD_VAR 0 3
40104: PUSH
40105: LD_INT 1
40107: DOUBLE
40108: EQUAL
40109: IFTRUE 40113
40111: GO 40130
40113: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40114: LD_VAR 0 1
40118: PPUSH
40119: LD_VAR 0 10
40123: PPUSH
40124: CALL_OW 115
40128: GO 40191
40130: LD_INT 2
40132: DOUBLE
40133: EQUAL
40134: IFTRUE 40138
40136: GO 40160
40138: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40139: LD_VAR 0 1
40143: PPUSH
40144: LD_VAR 0 6
40148: PPUSH
40149: LD_VAR 0 7
40153: PPUSH
40154: CALL_OW 153
40158: GO 40191
40160: LD_INT 3
40162: DOUBLE
40163: EQUAL
40164: IFTRUE 40168
40166: GO 40190
40168: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40169: LD_VAR 0 1
40173: PPUSH
40174: LD_VAR 0 6
40178: PPUSH
40179: LD_VAR 0 7
40183: PPUSH
40184: CALL_OW 154
40188: GO 40191
40190: POP
// end ;
40191: LD_VAR 0 2
40195: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40196: LD_INT 0
40198: PPUSH
40199: PPUSH
40200: PPUSH
40201: PPUSH
40202: PPUSH
40203: PPUSH
// if not unit or not building then
40204: LD_VAR 0 1
40208: NOT
40209: PUSH
40210: LD_VAR 0 2
40214: NOT
40215: OR
40216: IFFALSE 40220
// exit ;
40218: GO 40378
// x := GetX ( building ) ;
40220: LD_ADDR_VAR 0 5
40224: PUSH
40225: LD_VAR 0 2
40229: PPUSH
40230: CALL_OW 250
40234: ST_TO_ADDR
// y := GetY ( building ) ;
40235: LD_ADDR_VAR 0 6
40239: PUSH
40240: LD_VAR 0 2
40244: PPUSH
40245: CALL_OW 251
40249: ST_TO_ADDR
// for i = 0 to 5 do
40250: LD_ADDR_VAR 0 4
40254: PUSH
40255: DOUBLE
40256: LD_INT 0
40258: DEC
40259: ST_TO_ADDR
40260: LD_INT 5
40262: PUSH
40263: FOR_TO
40264: IFFALSE 40376
// begin _x := ShiftX ( x , i , 3 ) ;
40266: LD_ADDR_VAR 0 7
40270: PUSH
40271: LD_VAR 0 5
40275: PPUSH
40276: LD_VAR 0 4
40280: PPUSH
40281: LD_INT 3
40283: PPUSH
40284: CALL_OW 272
40288: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40289: LD_ADDR_VAR 0 8
40293: PUSH
40294: LD_VAR 0 6
40298: PPUSH
40299: LD_VAR 0 4
40303: PPUSH
40304: LD_INT 3
40306: PPUSH
40307: CALL_OW 273
40311: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40312: LD_VAR 0 7
40316: PPUSH
40317: LD_VAR 0 8
40321: PPUSH
40322: CALL_OW 488
40326: NOT
40327: IFFALSE 40331
// continue ;
40329: GO 40263
// if HexInfo ( _x , _y ) = 0 then
40331: LD_VAR 0 7
40335: PPUSH
40336: LD_VAR 0 8
40340: PPUSH
40341: CALL_OW 428
40345: PUSH
40346: LD_INT 0
40348: EQUAL
40349: IFFALSE 40374
// begin ComMoveXY ( unit , _x , _y ) ;
40351: LD_VAR 0 1
40355: PPUSH
40356: LD_VAR 0 7
40360: PPUSH
40361: LD_VAR 0 8
40365: PPUSH
40366: CALL_OW 111
// exit ;
40370: POP
40371: POP
40372: GO 40378
// end ; end ;
40374: GO 40263
40376: POP
40377: POP
// end ;
40378: LD_VAR 0 3
40382: RET
// export function ScanBase ( side , base_area ) ; begin
40383: LD_INT 0
40385: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40386: LD_ADDR_VAR 0 3
40390: PUSH
40391: LD_VAR 0 2
40395: PPUSH
40396: LD_INT 81
40398: PUSH
40399: LD_VAR 0 1
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PPUSH
40408: CALL_OW 70
40412: ST_TO_ADDR
// end ;
40413: LD_VAR 0 3
40417: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40418: LD_INT 0
40420: PPUSH
40421: PPUSH
40422: PPUSH
40423: PPUSH
// result := false ;
40424: LD_ADDR_VAR 0 2
40428: PUSH
40429: LD_INT 0
40431: ST_TO_ADDR
// side := GetSide ( unit ) ;
40432: LD_ADDR_VAR 0 3
40436: PUSH
40437: LD_VAR 0 1
40441: PPUSH
40442: CALL_OW 255
40446: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40447: LD_ADDR_VAR 0 4
40451: PUSH
40452: LD_VAR 0 1
40456: PPUSH
40457: CALL_OW 248
40461: ST_TO_ADDR
// case nat of 1 :
40462: LD_VAR 0 4
40466: PUSH
40467: LD_INT 1
40469: DOUBLE
40470: EQUAL
40471: IFTRUE 40475
40473: GO 40486
40475: POP
// tech := tech_lassight ; 2 :
40476: LD_ADDR_VAR 0 5
40480: PUSH
40481: LD_INT 12
40483: ST_TO_ADDR
40484: GO 40525
40486: LD_INT 2
40488: DOUBLE
40489: EQUAL
40490: IFTRUE 40494
40492: GO 40505
40494: POP
// tech := tech_mortar ; 3 :
40495: LD_ADDR_VAR 0 5
40499: PUSH
40500: LD_INT 41
40502: ST_TO_ADDR
40503: GO 40525
40505: LD_INT 3
40507: DOUBLE
40508: EQUAL
40509: IFTRUE 40513
40511: GO 40524
40513: POP
// tech := tech_bazooka ; end ;
40514: LD_ADDR_VAR 0 5
40518: PUSH
40519: LD_INT 44
40521: ST_TO_ADDR
40522: GO 40525
40524: POP
// if Researched ( side , tech ) then
40525: LD_VAR 0 3
40529: PPUSH
40530: LD_VAR 0 5
40534: PPUSH
40535: CALL_OW 325
40539: IFFALSE 40566
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40541: LD_ADDR_VAR 0 2
40545: PUSH
40546: LD_INT 5
40548: PUSH
40549: LD_INT 8
40551: PUSH
40552: LD_INT 9
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: LIST
40559: PUSH
40560: LD_VAR 0 4
40564: ARRAY
40565: ST_TO_ADDR
// end ;
40566: LD_VAR 0 2
40570: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40571: LD_INT 0
40573: PPUSH
40574: PPUSH
40575: PPUSH
// if not mines then
40576: LD_VAR 0 2
40580: NOT
40581: IFFALSE 40585
// exit ;
40583: GO 40729
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40585: LD_ADDR_VAR 0 5
40589: PUSH
40590: LD_INT 81
40592: PUSH
40593: LD_VAR 0 1
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 3
40604: PUSH
40605: LD_INT 21
40607: PUSH
40608: LD_INT 3
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PPUSH
40623: CALL_OW 69
40627: ST_TO_ADDR
// for i in mines do
40628: LD_ADDR_VAR 0 4
40632: PUSH
40633: LD_VAR 0 2
40637: PUSH
40638: FOR_IN
40639: IFFALSE 40727
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40641: LD_VAR 0 4
40645: PUSH
40646: LD_INT 1
40648: ARRAY
40649: PPUSH
40650: LD_VAR 0 4
40654: PUSH
40655: LD_INT 2
40657: ARRAY
40658: PPUSH
40659: CALL_OW 458
40663: NOT
40664: IFFALSE 40668
// continue ;
40666: GO 40638
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40668: LD_VAR 0 4
40672: PUSH
40673: LD_INT 1
40675: ARRAY
40676: PPUSH
40677: LD_VAR 0 4
40681: PUSH
40682: LD_INT 2
40684: ARRAY
40685: PPUSH
40686: CALL_OW 428
40690: PUSH
40691: LD_VAR 0 5
40695: IN
40696: IFFALSE 40725
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40698: LD_VAR 0 4
40702: PUSH
40703: LD_INT 1
40705: ARRAY
40706: PPUSH
40707: LD_VAR 0 4
40711: PUSH
40712: LD_INT 2
40714: ARRAY
40715: PPUSH
40716: LD_VAR 0 1
40720: PPUSH
40721: CALL_OW 456
// end ;
40725: GO 40638
40727: POP
40728: POP
// end ;
40729: LD_VAR 0 3
40733: RET
// export function Count ( array ) ; var i ; begin
40734: LD_INT 0
40736: PPUSH
40737: PPUSH
// result := 0 ;
40738: LD_ADDR_VAR 0 2
40742: PUSH
40743: LD_INT 0
40745: ST_TO_ADDR
// for i in array do
40746: LD_ADDR_VAR 0 3
40750: PUSH
40751: LD_VAR 0 1
40755: PUSH
40756: FOR_IN
40757: IFFALSE 40781
// if i then
40759: LD_VAR 0 3
40763: IFFALSE 40779
// result := result + 1 ;
40765: LD_ADDR_VAR 0 2
40769: PUSH
40770: LD_VAR 0 2
40774: PUSH
40775: LD_INT 1
40777: PLUS
40778: ST_TO_ADDR
40779: GO 40756
40781: POP
40782: POP
// end ;
40783: LD_VAR 0 2
40787: RET
// export function IsEmpty ( building ) ; begin
40788: LD_INT 0
40790: PPUSH
// if not building then
40791: LD_VAR 0 1
40795: NOT
40796: IFFALSE 40800
// exit ;
40798: GO 40843
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40800: LD_ADDR_VAR 0 2
40804: PUSH
40805: LD_VAR 0 1
40809: PUSH
40810: LD_INT 22
40812: PUSH
40813: LD_VAR 0 1
40817: PPUSH
40818: CALL_OW 255
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 58
40829: PUSH
40830: EMPTY
40831: LIST
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PPUSH
40837: CALL_OW 69
40841: IN
40842: ST_TO_ADDR
// end ;
40843: LD_VAR 0 2
40847: RET
// export function IsNotFull ( building ) ; var places ; begin
40848: LD_INT 0
40850: PPUSH
40851: PPUSH
// if not building then
40852: LD_VAR 0 1
40856: NOT
40857: IFFALSE 40861
// exit ;
40859: GO 41032
// result := false ;
40861: LD_ADDR_VAR 0 2
40865: PUSH
40866: LD_INT 0
40868: ST_TO_ADDR
// places := 0 ;
40869: LD_ADDR_VAR 0 3
40873: PUSH
40874: LD_INT 0
40876: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
40877: LD_VAR 0 1
40881: PPUSH
40882: CALL_OW 266
40886: PUSH
40887: LD_INT 0
40889: DOUBLE
40890: EQUAL
40891: IFTRUE 40949
40893: LD_INT 1
40895: DOUBLE
40896: EQUAL
40897: IFTRUE 40949
40899: LD_INT 6
40901: DOUBLE
40902: EQUAL
40903: IFTRUE 40949
40905: LD_INT 7
40907: DOUBLE
40908: EQUAL
40909: IFTRUE 40949
40911: LD_INT 8
40913: DOUBLE
40914: EQUAL
40915: IFTRUE 40949
40917: LD_INT 4
40919: DOUBLE
40920: EQUAL
40921: IFTRUE 40949
40923: LD_INT 5
40925: DOUBLE
40926: EQUAL
40927: IFTRUE 40949
40929: LD_INT 2
40931: DOUBLE
40932: EQUAL
40933: IFTRUE 40949
40935: LD_INT 3
40937: DOUBLE
40938: EQUAL
40939: IFTRUE 40949
40941: LD_INT 35
40943: DOUBLE
40944: EQUAL
40945: IFTRUE 40949
40947: GO 40960
40949: POP
// places := 6 ; b_bunker , b_breastwork :
40950: LD_ADDR_VAR 0 3
40954: PUSH
40955: LD_INT 6
40957: ST_TO_ADDR
40958: GO 41005
40960: LD_INT 32
40962: DOUBLE
40963: EQUAL
40964: IFTRUE 40974
40966: LD_INT 31
40968: DOUBLE
40969: EQUAL
40970: IFTRUE 40974
40972: GO 40985
40974: POP
// places := 1 ; b_control_tower :
40975: LD_ADDR_VAR 0 3
40979: PUSH
40980: LD_INT 1
40982: ST_TO_ADDR
40983: GO 41005
40985: LD_INT 36
40987: DOUBLE
40988: EQUAL
40989: IFTRUE 40993
40991: GO 41004
40993: POP
// places := 3 ; end ;
40994: LD_ADDR_VAR 0 3
40998: PUSH
40999: LD_INT 3
41001: ST_TO_ADDR
41002: GO 41005
41004: POP
// if places then
41005: LD_VAR 0 3
41009: IFFALSE 41032
// result := UnitsInside ( building ) < places ;
41011: LD_ADDR_VAR 0 2
41015: PUSH
41016: LD_VAR 0 1
41020: PPUSH
41021: CALL_OW 313
41025: PUSH
41026: LD_VAR 0 3
41030: LESS
41031: ST_TO_ADDR
// end ;
41032: LD_VAR 0 2
41036: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41037: LD_INT 0
41039: PPUSH
41040: PPUSH
41041: PPUSH
41042: PPUSH
// tmp := [ ] ;
41043: LD_ADDR_VAR 0 3
41047: PUSH
41048: EMPTY
41049: ST_TO_ADDR
// list := [ ] ;
41050: LD_ADDR_VAR 0 5
41054: PUSH
41055: EMPTY
41056: ST_TO_ADDR
// for i = 16 to 25 do
41057: LD_ADDR_VAR 0 4
41061: PUSH
41062: DOUBLE
41063: LD_INT 16
41065: DEC
41066: ST_TO_ADDR
41067: LD_INT 25
41069: PUSH
41070: FOR_TO
41071: IFFALSE 41144
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41073: LD_ADDR_VAR 0 3
41077: PUSH
41078: LD_VAR 0 3
41082: PUSH
41083: LD_INT 22
41085: PUSH
41086: LD_VAR 0 1
41090: PPUSH
41091: CALL_OW 255
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 91
41102: PUSH
41103: LD_VAR 0 1
41107: PUSH
41108: LD_INT 6
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 30
41118: PUSH
41119: LD_VAR 0 4
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: LIST
41132: PUSH
41133: EMPTY
41134: LIST
41135: PPUSH
41136: CALL_OW 69
41140: ADD
41141: ST_TO_ADDR
41142: GO 41070
41144: POP
41145: POP
// for i = 1 to tmp do
41146: LD_ADDR_VAR 0 4
41150: PUSH
41151: DOUBLE
41152: LD_INT 1
41154: DEC
41155: ST_TO_ADDR
41156: LD_VAR 0 3
41160: PUSH
41161: FOR_TO
41162: IFFALSE 41250
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41164: LD_ADDR_VAR 0 5
41168: PUSH
41169: LD_VAR 0 5
41173: PUSH
41174: LD_VAR 0 3
41178: PUSH
41179: LD_VAR 0 4
41183: ARRAY
41184: PPUSH
41185: CALL_OW 266
41189: PUSH
41190: LD_VAR 0 3
41194: PUSH
41195: LD_VAR 0 4
41199: ARRAY
41200: PPUSH
41201: CALL_OW 250
41205: PUSH
41206: LD_VAR 0 3
41210: PUSH
41211: LD_VAR 0 4
41215: ARRAY
41216: PPUSH
41217: CALL_OW 251
41221: PUSH
41222: LD_VAR 0 3
41226: PUSH
41227: LD_VAR 0 4
41231: ARRAY
41232: PPUSH
41233: CALL_OW 254
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: PUSH
41244: EMPTY
41245: LIST
41246: ADD
41247: ST_TO_ADDR
41248: GO 41161
41250: POP
41251: POP
// result := list ;
41252: LD_ADDR_VAR 0 2
41256: PUSH
41257: LD_VAR 0 5
41261: ST_TO_ADDR
// end ;
41262: LD_VAR 0 2
41266: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41267: LD_INT 0
41269: PPUSH
41270: PPUSH
41271: PPUSH
41272: PPUSH
41273: PPUSH
41274: PPUSH
41275: PPUSH
// if not factory then
41276: LD_VAR 0 1
41280: NOT
41281: IFFALSE 41285
// exit ;
41283: GO 41878
// if control = control_apeman then
41285: LD_VAR 0 4
41289: PUSH
41290: LD_INT 5
41292: EQUAL
41293: IFFALSE 41402
// begin tmp := UnitsInside ( factory ) ;
41295: LD_ADDR_VAR 0 8
41299: PUSH
41300: LD_VAR 0 1
41304: PPUSH
41305: CALL_OW 313
41309: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41310: LD_VAR 0 8
41314: PPUSH
41315: LD_INT 25
41317: PUSH
41318: LD_INT 12
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PPUSH
41325: CALL_OW 72
41329: NOT
41330: IFFALSE 41340
// control := control_manual ;
41332: LD_ADDR_VAR 0 4
41336: PUSH
41337: LD_INT 1
41339: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41340: LD_ADDR_VAR 0 8
41344: PUSH
41345: LD_VAR 0 1
41349: PPUSH
41350: CALL 41037 0 1
41354: ST_TO_ADDR
// if tmp then
41355: LD_VAR 0 8
41359: IFFALSE 41402
// begin for i in tmp do
41361: LD_ADDR_VAR 0 7
41365: PUSH
41366: LD_VAR 0 8
41370: PUSH
41371: FOR_IN
41372: IFFALSE 41400
// if i [ 1 ] = b_ext_radio then
41374: LD_VAR 0 7
41378: PUSH
41379: LD_INT 1
41381: ARRAY
41382: PUSH
41383: LD_INT 22
41385: EQUAL
41386: IFFALSE 41398
// begin control := control_remote ;
41388: LD_ADDR_VAR 0 4
41392: PUSH
41393: LD_INT 2
41395: ST_TO_ADDR
// break ;
41396: GO 41400
// end ;
41398: GO 41371
41400: POP
41401: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41402: LD_VAR 0 1
41406: PPUSH
41407: LD_VAR 0 2
41411: PPUSH
41412: LD_VAR 0 3
41416: PPUSH
41417: LD_VAR 0 4
41421: PPUSH
41422: LD_VAR 0 5
41426: PPUSH
41427: CALL_OW 448
41431: IFFALSE 41466
// begin result := [ chassis , engine , control , weapon ] ;
41433: LD_ADDR_VAR 0 6
41437: PUSH
41438: LD_VAR 0 2
41442: PUSH
41443: LD_VAR 0 3
41447: PUSH
41448: LD_VAR 0 4
41452: PUSH
41453: LD_VAR 0 5
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: ST_TO_ADDR
// exit ;
41464: GO 41878
// end ; _chassis := AvailableChassisList ( factory ) ;
41466: LD_ADDR_VAR 0 9
41470: PUSH
41471: LD_VAR 0 1
41475: PPUSH
41476: CALL_OW 475
41480: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41481: LD_ADDR_VAR 0 11
41485: PUSH
41486: LD_VAR 0 1
41490: PPUSH
41491: CALL_OW 476
41495: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41496: LD_ADDR_VAR 0 12
41500: PUSH
41501: LD_VAR 0 1
41505: PPUSH
41506: CALL_OW 477
41510: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41511: LD_ADDR_VAR 0 10
41515: PUSH
41516: LD_VAR 0 1
41520: PPUSH
41521: CALL_OW 478
41525: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41526: LD_VAR 0 9
41530: NOT
41531: PUSH
41532: LD_VAR 0 11
41536: NOT
41537: OR
41538: PUSH
41539: LD_VAR 0 12
41543: NOT
41544: OR
41545: PUSH
41546: LD_VAR 0 10
41550: NOT
41551: OR
41552: IFFALSE 41587
// begin result := [ chassis , engine , control , weapon ] ;
41554: LD_ADDR_VAR 0 6
41558: PUSH
41559: LD_VAR 0 2
41563: PUSH
41564: LD_VAR 0 3
41568: PUSH
41569: LD_VAR 0 4
41573: PUSH
41574: LD_VAR 0 5
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: ST_TO_ADDR
// exit ;
41585: GO 41878
// end ; if not chassis in _chassis then
41587: LD_VAR 0 2
41591: PUSH
41592: LD_VAR 0 9
41596: IN
41597: NOT
41598: IFFALSE 41624
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41600: LD_ADDR_VAR 0 2
41604: PUSH
41605: LD_VAR 0 9
41609: PUSH
41610: LD_INT 1
41612: PPUSH
41613: LD_VAR 0 9
41617: PPUSH
41618: CALL_OW 12
41622: ARRAY
41623: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41624: LD_VAR 0 2
41628: PPUSH
41629: LD_VAR 0 3
41633: PPUSH
41634: CALL 41883 0 2
41638: NOT
41639: IFFALSE 41698
// repeat engine := _engine [ 1 ] ;
41641: LD_ADDR_VAR 0 3
41645: PUSH
41646: LD_VAR 0 11
41650: PUSH
41651: LD_INT 1
41653: ARRAY
41654: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41655: LD_ADDR_VAR 0 11
41659: PUSH
41660: LD_VAR 0 11
41664: PPUSH
41665: LD_INT 1
41667: PPUSH
41668: CALL_OW 3
41672: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41673: LD_VAR 0 2
41677: PPUSH
41678: LD_VAR 0 3
41682: PPUSH
41683: CALL 41883 0 2
41687: PUSH
41688: LD_VAR 0 11
41692: PUSH
41693: EMPTY
41694: EQUAL
41695: OR
41696: IFFALSE 41641
// if not control in _control then
41698: LD_VAR 0 4
41702: PUSH
41703: LD_VAR 0 12
41707: IN
41708: NOT
41709: IFFALSE 41735
// control := _control [ rand ( 1 , _control ) ] ;
41711: LD_ADDR_VAR 0 4
41715: PUSH
41716: LD_VAR 0 12
41720: PUSH
41721: LD_INT 1
41723: PPUSH
41724: LD_VAR 0 12
41728: PPUSH
41729: CALL_OW 12
41733: ARRAY
41734: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41735: LD_VAR 0 2
41739: PPUSH
41740: LD_VAR 0 5
41744: PPUSH
41745: CALL 42103 0 2
41749: NOT
41750: IFFALSE 41809
// repeat weapon := _weapon [ 1 ] ;
41752: LD_ADDR_VAR 0 5
41756: PUSH
41757: LD_VAR 0 10
41761: PUSH
41762: LD_INT 1
41764: ARRAY
41765: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41766: LD_ADDR_VAR 0 10
41770: PUSH
41771: LD_VAR 0 10
41775: PPUSH
41776: LD_INT 1
41778: PPUSH
41779: CALL_OW 3
41783: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41784: LD_VAR 0 2
41788: PPUSH
41789: LD_VAR 0 5
41793: PPUSH
41794: CALL 42103 0 2
41798: PUSH
41799: LD_VAR 0 10
41803: PUSH
41804: EMPTY
41805: EQUAL
41806: OR
41807: IFFALSE 41752
// result := [ ] ;
41809: LD_ADDR_VAR 0 6
41813: PUSH
41814: EMPTY
41815: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41816: LD_VAR 0 1
41820: PPUSH
41821: LD_VAR 0 2
41825: PPUSH
41826: LD_VAR 0 3
41830: PPUSH
41831: LD_VAR 0 4
41835: PPUSH
41836: LD_VAR 0 5
41840: PPUSH
41841: CALL_OW 448
41845: IFFALSE 41878
// result := [ chassis , engine , control , weapon ] ;
41847: LD_ADDR_VAR 0 6
41851: PUSH
41852: LD_VAR 0 2
41856: PUSH
41857: LD_VAR 0 3
41861: PUSH
41862: LD_VAR 0 4
41866: PUSH
41867: LD_VAR 0 5
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: ST_TO_ADDR
// end ;
41878: LD_VAR 0 6
41882: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41883: LD_INT 0
41885: PPUSH
// if not chassis or not engine then
41886: LD_VAR 0 1
41890: NOT
41891: PUSH
41892: LD_VAR 0 2
41896: NOT
41897: OR
41898: IFFALSE 41902
// exit ;
41900: GO 42098
// case engine of engine_solar :
41902: LD_VAR 0 2
41906: PUSH
41907: LD_INT 2
41909: DOUBLE
41910: EQUAL
41911: IFTRUE 41915
41913: GO 41953
41915: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41916: LD_ADDR_VAR 0 3
41920: PUSH
41921: LD_INT 11
41923: PUSH
41924: LD_INT 12
41926: PUSH
41927: LD_INT 13
41929: PUSH
41930: LD_INT 14
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: LD_INT 3
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: ST_TO_ADDR
41951: GO 42082
41953: LD_INT 1
41955: DOUBLE
41956: EQUAL
41957: IFTRUE 41961
41959: GO 42023
41961: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41962: LD_ADDR_VAR 0 3
41966: PUSH
41967: LD_INT 11
41969: PUSH
41970: LD_INT 12
41972: PUSH
41973: LD_INT 13
41975: PUSH
41976: LD_INT 14
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: LD_INT 2
41984: PUSH
41985: LD_INT 3
41987: PUSH
41988: LD_INT 4
41990: PUSH
41991: LD_INT 5
41993: PUSH
41994: LD_INT 21
41996: PUSH
41997: LD_INT 23
41999: PUSH
42000: LD_INT 22
42002: PUSH
42003: LD_INT 24
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: ST_TO_ADDR
42021: GO 42082
42023: LD_INT 3
42025: DOUBLE
42026: EQUAL
42027: IFTRUE 42031
42029: GO 42081
42031: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42032: LD_ADDR_VAR 0 3
42036: PUSH
42037: LD_INT 13
42039: PUSH
42040: LD_INT 14
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: LD_INT 3
42048: PUSH
42049: LD_INT 4
42051: PUSH
42052: LD_INT 5
42054: PUSH
42055: LD_INT 21
42057: PUSH
42058: LD_INT 22
42060: PUSH
42061: LD_INT 23
42063: PUSH
42064: LD_INT 24
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: ST_TO_ADDR
42079: GO 42082
42081: POP
// result := ( chassis in result ) ;
42082: LD_ADDR_VAR 0 3
42086: PUSH
42087: LD_VAR 0 1
42091: PUSH
42092: LD_VAR 0 3
42096: IN
42097: ST_TO_ADDR
// end ;
42098: LD_VAR 0 3
42102: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42103: LD_INT 0
42105: PPUSH
// if not chassis or not weapon then
42106: LD_VAR 0 1
42110: NOT
42111: PUSH
42112: LD_VAR 0 2
42116: NOT
42117: OR
42118: IFFALSE 42122
// exit ;
42120: GO 43182
// case weapon of us_machine_gun :
42122: LD_VAR 0 2
42126: PUSH
42127: LD_INT 2
42129: DOUBLE
42130: EQUAL
42131: IFTRUE 42135
42133: GO 42165
42135: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42136: LD_ADDR_VAR 0 3
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: LD_INT 2
42146: PUSH
42147: LD_INT 3
42149: PUSH
42150: LD_INT 4
42152: PUSH
42153: LD_INT 5
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: ST_TO_ADDR
42163: GO 43166
42165: LD_INT 3
42167: DOUBLE
42168: EQUAL
42169: IFTRUE 42173
42171: GO 42203
42173: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42174: LD_ADDR_VAR 0 3
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: LD_INT 3
42187: PUSH
42188: LD_INT 4
42190: PUSH
42191: LD_INT 5
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: ST_TO_ADDR
42201: GO 43166
42203: LD_INT 11
42205: DOUBLE
42206: EQUAL
42207: IFTRUE 42211
42209: GO 42241
42211: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42212: LD_ADDR_VAR 0 3
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: LD_INT 2
42222: PUSH
42223: LD_INT 3
42225: PUSH
42226: LD_INT 4
42228: PUSH
42229: LD_INT 5
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: ST_TO_ADDR
42239: GO 43166
42241: LD_INT 4
42243: DOUBLE
42244: EQUAL
42245: IFTRUE 42249
42247: GO 42275
42249: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42250: LD_ADDR_VAR 0 3
42254: PUSH
42255: LD_INT 2
42257: PUSH
42258: LD_INT 3
42260: PUSH
42261: LD_INT 4
42263: PUSH
42264: LD_INT 5
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: ST_TO_ADDR
42273: GO 43166
42275: LD_INT 5
42277: DOUBLE
42278: EQUAL
42279: IFTRUE 42283
42281: GO 42309
42283: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42284: LD_ADDR_VAR 0 3
42288: PUSH
42289: LD_INT 2
42291: PUSH
42292: LD_INT 3
42294: PUSH
42295: LD_INT 4
42297: PUSH
42298: LD_INT 5
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: ST_TO_ADDR
42307: GO 43166
42309: LD_INT 9
42311: DOUBLE
42312: EQUAL
42313: IFTRUE 42317
42315: GO 42343
42317: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42318: LD_ADDR_VAR 0 3
42322: PUSH
42323: LD_INT 2
42325: PUSH
42326: LD_INT 3
42328: PUSH
42329: LD_INT 4
42331: PUSH
42332: LD_INT 5
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: ST_TO_ADDR
42341: GO 43166
42343: LD_INT 7
42345: DOUBLE
42346: EQUAL
42347: IFTRUE 42351
42349: GO 42377
42351: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42352: LD_ADDR_VAR 0 3
42356: PUSH
42357: LD_INT 2
42359: PUSH
42360: LD_INT 3
42362: PUSH
42363: LD_INT 4
42365: PUSH
42366: LD_INT 5
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: ST_TO_ADDR
42375: GO 43166
42377: LD_INT 12
42379: DOUBLE
42380: EQUAL
42381: IFTRUE 42385
42383: GO 42411
42385: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42386: LD_ADDR_VAR 0 3
42390: PUSH
42391: LD_INT 2
42393: PUSH
42394: LD_INT 3
42396: PUSH
42397: LD_INT 4
42399: PUSH
42400: LD_INT 5
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: ST_TO_ADDR
42409: GO 43166
42411: LD_INT 13
42413: DOUBLE
42414: EQUAL
42415: IFTRUE 42419
42417: GO 42445
42419: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42420: LD_ADDR_VAR 0 3
42424: PUSH
42425: LD_INT 2
42427: PUSH
42428: LD_INT 3
42430: PUSH
42431: LD_INT 4
42433: PUSH
42434: LD_INT 5
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: ST_TO_ADDR
42443: GO 43166
42445: LD_INT 14
42447: DOUBLE
42448: EQUAL
42449: IFTRUE 42453
42451: GO 42471
42453: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42454: LD_ADDR_VAR 0 3
42458: PUSH
42459: LD_INT 4
42461: PUSH
42462: LD_INT 5
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: ST_TO_ADDR
42469: GO 43166
42471: LD_INT 6
42473: DOUBLE
42474: EQUAL
42475: IFTRUE 42479
42477: GO 42497
42479: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42480: LD_ADDR_VAR 0 3
42484: PUSH
42485: LD_INT 4
42487: PUSH
42488: LD_INT 5
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: ST_TO_ADDR
42495: GO 43166
42497: LD_INT 10
42499: DOUBLE
42500: EQUAL
42501: IFTRUE 42505
42503: GO 42523
42505: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42506: LD_ADDR_VAR 0 3
42510: PUSH
42511: LD_INT 4
42513: PUSH
42514: LD_INT 5
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: ST_TO_ADDR
42521: GO 43166
42523: LD_INT 22
42525: DOUBLE
42526: EQUAL
42527: IFTRUE 42531
42529: GO 42557
42531: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42532: LD_ADDR_VAR 0 3
42536: PUSH
42537: LD_INT 11
42539: PUSH
42540: LD_INT 12
42542: PUSH
42543: LD_INT 13
42545: PUSH
42546: LD_INT 14
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: ST_TO_ADDR
42555: GO 43166
42557: LD_INT 23
42559: DOUBLE
42560: EQUAL
42561: IFTRUE 42565
42563: GO 42591
42565: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42566: LD_ADDR_VAR 0 3
42570: PUSH
42571: LD_INT 11
42573: PUSH
42574: LD_INT 12
42576: PUSH
42577: LD_INT 13
42579: PUSH
42580: LD_INT 14
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: ST_TO_ADDR
42589: GO 43166
42591: LD_INT 24
42593: DOUBLE
42594: EQUAL
42595: IFTRUE 42599
42597: GO 42625
42599: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42600: LD_ADDR_VAR 0 3
42604: PUSH
42605: LD_INT 11
42607: PUSH
42608: LD_INT 12
42610: PUSH
42611: LD_INT 13
42613: PUSH
42614: LD_INT 14
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: ST_TO_ADDR
42623: GO 43166
42625: LD_INT 30
42627: DOUBLE
42628: EQUAL
42629: IFTRUE 42633
42631: GO 42659
42633: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42634: LD_ADDR_VAR 0 3
42638: PUSH
42639: LD_INT 11
42641: PUSH
42642: LD_INT 12
42644: PUSH
42645: LD_INT 13
42647: PUSH
42648: LD_INT 14
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: ST_TO_ADDR
42657: GO 43166
42659: LD_INT 25
42661: DOUBLE
42662: EQUAL
42663: IFTRUE 42667
42665: GO 42685
42667: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42668: LD_ADDR_VAR 0 3
42672: PUSH
42673: LD_INT 13
42675: PUSH
42676: LD_INT 14
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: ST_TO_ADDR
42683: GO 43166
42685: LD_INT 27
42687: DOUBLE
42688: EQUAL
42689: IFTRUE 42693
42691: GO 42711
42693: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42694: LD_ADDR_VAR 0 3
42698: PUSH
42699: LD_INT 13
42701: PUSH
42702: LD_INT 14
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: ST_TO_ADDR
42709: GO 43166
42711: LD_INT 92
42713: DOUBLE
42714: EQUAL
42715: IFTRUE 42719
42717: GO 42745
42719: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42720: LD_ADDR_VAR 0 3
42724: PUSH
42725: LD_INT 11
42727: PUSH
42728: LD_INT 12
42730: PUSH
42731: LD_INT 13
42733: PUSH
42734: LD_INT 14
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: ST_TO_ADDR
42743: GO 43166
42745: LD_INT 28
42747: DOUBLE
42748: EQUAL
42749: IFTRUE 42753
42751: GO 42771
42753: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42754: LD_ADDR_VAR 0 3
42758: PUSH
42759: LD_INT 13
42761: PUSH
42762: LD_INT 14
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: ST_TO_ADDR
42769: GO 43166
42771: LD_INT 29
42773: DOUBLE
42774: EQUAL
42775: IFTRUE 42779
42777: GO 42797
42779: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42780: LD_ADDR_VAR 0 3
42784: PUSH
42785: LD_INT 13
42787: PUSH
42788: LD_INT 14
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: ST_TO_ADDR
42795: GO 43166
42797: LD_INT 31
42799: DOUBLE
42800: EQUAL
42801: IFTRUE 42805
42803: GO 42823
42805: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42806: LD_ADDR_VAR 0 3
42810: PUSH
42811: LD_INT 13
42813: PUSH
42814: LD_INT 14
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: ST_TO_ADDR
42821: GO 43166
42823: LD_INT 26
42825: DOUBLE
42826: EQUAL
42827: IFTRUE 42831
42829: GO 42849
42831: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42832: LD_ADDR_VAR 0 3
42836: PUSH
42837: LD_INT 13
42839: PUSH
42840: LD_INT 14
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: ST_TO_ADDR
42847: GO 43166
42849: LD_INT 42
42851: DOUBLE
42852: EQUAL
42853: IFTRUE 42857
42855: GO 42883
42857: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42858: LD_ADDR_VAR 0 3
42862: PUSH
42863: LD_INT 21
42865: PUSH
42866: LD_INT 22
42868: PUSH
42869: LD_INT 23
42871: PUSH
42872: LD_INT 24
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: ST_TO_ADDR
42881: GO 43166
42883: LD_INT 43
42885: DOUBLE
42886: EQUAL
42887: IFTRUE 42891
42889: GO 42917
42891: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42892: LD_ADDR_VAR 0 3
42896: PUSH
42897: LD_INT 21
42899: PUSH
42900: LD_INT 22
42902: PUSH
42903: LD_INT 23
42905: PUSH
42906: LD_INT 24
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: ST_TO_ADDR
42915: GO 43166
42917: LD_INT 44
42919: DOUBLE
42920: EQUAL
42921: IFTRUE 42925
42923: GO 42951
42925: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42926: LD_ADDR_VAR 0 3
42930: PUSH
42931: LD_INT 21
42933: PUSH
42934: LD_INT 22
42936: PUSH
42937: LD_INT 23
42939: PUSH
42940: LD_INT 24
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: ST_TO_ADDR
42949: GO 43166
42951: LD_INT 45
42953: DOUBLE
42954: EQUAL
42955: IFTRUE 42959
42957: GO 42985
42959: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42960: LD_ADDR_VAR 0 3
42964: PUSH
42965: LD_INT 21
42967: PUSH
42968: LD_INT 22
42970: PUSH
42971: LD_INT 23
42973: PUSH
42974: LD_INT 24
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: ST_TO_ADDR
42983: GO 43166
42985: LD_INT 49
42987: DOUBLE
42988: EQUAL
42989: IFTRUE 42993
42991: GO 43019
42993: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42994: LD_ADDR_VAR 0 3
42998: PUSH
42999: LD_INT 21
43001: PUSH
43002: LD_INT 22
43004: PUSH
43005: LD_INT 23
43007: PUSH
43008: LD_INT 24
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: ST_TO_ADDR
43017: GO 43166
43019: LD_INT 51
43021: DOUBLE
43022: EQUAL
43023: IFTRUE 43027
43025: GO 43053
43027: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43028: LD_ADDR_VAR 0 3
43032: PUSH
43033: LD_INT 21
43035: PUSH
43036: LD_INT 22
43038: PUSH
43039: LD_INT 23
43041: PUSH
43042: LD_INT 24
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: ST_TO_ADDR
43051: GO 43166
43053: LD_INT 52
43055: DOUBLE
43056: EQUAL
43057: IFTRUE 43061
43059: GO 43087
43061: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43062: LD_ADDR_VAR 0 3
43066: PUSH
43067: LD_INT 21
43069: PUSH
43070: LD_INT 22
43072: PUSH
43073: LD_INT 23
43075: PUSH
43076: LD_INT 24
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: ST_TO_ADDR
43085: GO 43166
43087: LD_INT 53
43089: DOUBLE
43090: EQUAL
43091: IFTRUE 43095
43093: GO 43113
43095: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43096: LD_ADDR_VAR 0 3
43100: PUSH
43101: LD_INT 23
43103: PUSH
43104: LD_INT 24
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: ST_TO_ADDR
43111: GO 43166
43113: LD_INT 46
43115: DOUBLE
43116: EQUAL
43117: IFTRUE 43121
43119: GO 43139
43121: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43122: LD_ADDR_VAR 0 3
43126: PUSH
43127: LD_INT 23
43129: PUSH
43130: LD_INT 24
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: ST_TO_ADDR
43137: GO 43166
43139: LD_INT 47
43141: DOUBLE
43142: EQUAL
43143: IFTRUE 43147
43145: GO 43165
43147: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43148: LD_ADDR_VAR 0 3
43152: PUSH
43153: LD_INT 23
43155: PUSH
43156: LD_INT 24
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: ST_TO_ADDR
43163: GO 43166
43165: POP
// result := ( chassis in result ) ;
43166: LD_ADDR_VAR 0 3
43170: PUSH
43171: LD_VAR 0 1
43175: PUSH
43176: LD_VAR 0 3
43180: IN
43181: ST_TO_ADDR
// end ;
43182: LD_VAR 0 3
43186: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43187: LD_INT 0
43189: PPUSH
43190: PPUSH
43191: PPUSH
43192: PPUSH
43193: PPUSH
43194: PPUSH
43195: PPUSH
// result := array ;
43196: LD_ADDR_VAR 0 5
43200: PUSH
43201: LD_VAR 0 1
43205: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43206: LD_VAR 0 1
43210: NOT
43211: PUSH
43212: LD_VAR 0 2
43216: NOT
43217: OR
43218: PUSH
43219: LD_VAR 0 3
43223: NOT
43224: OR
43225: PUSH
43226: LD_VAR 0 2
43230: PUSH
43231: LD_VAR 0 1
43235: GREATER
43236: OR
43237: PUSH
43238: LD_VAR 0 3
43242: PUSH
43243: LD_VAR 0 1
43247: GREATER
43248: OR
43249: IFFALSE 43253
// exit ;
43251: GO 43549
// if direction then
43253: LD_VAR 0 4
43257: IFFALSE 43321
// begin d := 1 ;
43259: LD_ADDR_VAR 0 9
43263: PUSH
43264: LD_INT 1
43266: ST_TO_ADDR
// if i_from > i_to then
43267: LD_VAR 0 2
43271: PUSH
43272: LD_VAR 0 3
43276: GREATER
43277: IFFALSE 43303
// length := ( array - i_from ) + i_to else
43279: LD_ADDR_VAR 0 11
43283: PUSH
43284: LD_VAR 0 1
43288: PUSH
43289: LD_VAR 0 2
43293: MINUS
43294: PUSH
43295: LD_VAR 0 3
43299: PLUS
43300: ST_TO_ADDR
43301: GO 43319
// length := i_to - i_from ;
43303: LD_ADDR_VAR 0 11
43307: PUSH
43308: LD_VAR 0 3
43312: PUSH
43313: LD_VAR 0 2
43317: MINUS
43318: ST_TO_ADDR
// end else
43319: GO 43382
// begin d := - 1 ;
43321: LD_ADDR_VAR 0 9
43325: PUSH
43326: LD_INT 1
43328: NEG
43329: ST_TO_ADDR
// if i_from > i_to then
43330: LD_VAR 0 2
43334: PUSH
43335: LD_VAR 0 3
43339: GREATER
43340: IFFALSE 43360
// length := i_from - i_to else
43342: LD_ADDR_VAR 0 11
43346: PUSH
43347: LD_VAR 0 2
43351: PUSH
43352: LD_VAR 0 3
43356: MINUS
43357: ST_TO_ADDR
43358: GO 43382
// length := ( array - i_to ) + i_from ;
43360: LD_ADDR_VAR 0 11
43364: PUSH
43365: LD_VAR 0 1
43369: PUSH
43370: LD_VAR 0 3
43374: MINUS
43375: PUSH
43376: LD_VAR 0 2
43380: PLUS
43381: ST_TO_ADDR
// end ; if not length then
43382: LD_VAR 0 11
43386: NOT
43387: IFFALSE 43391
// exit ;
43389: GO 43549
// tmp := array ;
43391: LD_ADDR_VAR 0 10
43395: PUSH
43396: LD_VAR 0 1
43400: ST_TO_ADDR
// for i = 1 to length do
43401: LD_ADDR_VAR 0 6
43405: PUSH
43406: DOUBLE
43407: LD_INT 1
43409: DEC
43410: ST_TO_ADDR
43411: LD_VAR 0 11
43415: PUSH
43416: FOR_TO
43417: IFFALSE 43537
// begin for j = 1 to array do
43419: LD_ADDR_VAR 0 7
43423: PUSH
43424: DOUBLE
43425: LD_INT 1
43427: DEC
43428: ST_TO_ADDR
43429: LD_VAR 0 1
43433: PUSH
43434: FOR_TO
43435: IFFALSE 43523
// begin k := j + d ;
43437: LD_ADDR_VAR 0 8
43441: PUSH
43442: LD_VAR 0 7
43446: PUSH
43447: LD_VAR 0 9
43451: PLUS
43452: ST_TO_ADDR
// if k > array then
43453: LD_VAR 0 8
43457: PUSH
43458: LD_VAR 0 1
43462: GREATER
43463: IFFALSE 43473
// k := 1 ;
43465: LD_ADDR_VAR 0 8
43469: PUSH
43470: LD_INT 1
43472: ST_TO_ADDR
// if not k then
43473: LD_VAR 0 8
43477: NOT
43478: IFFALSE 43490
// k := array ;
43480: LD_ADDR_VAR 0 8
43484: PUSH
43485: LD_VAR 0 1
43489: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43490: LD_ADDR_VAR 0 10
43494: PUSH
43495: LD_VAR 0 10
43499: PPUSH
43500: LD_VAR 0 8
43504: PPUSH
43505: LD_VAR 0 1
43509: PUSH
43510: LD_VAR 0 7
43514: ARRAY
43515: PPUSH
43516: CALL_OW 1
43520: ST_TO_ADDR
// end ;
43521: GO 43434
43523: POP
43524: POP
// array := tmp ;
43525: LD_ADDR_VAR 0 1
43529: PUSH
43530: LD_VAR 0 10
43534: ST_TO_ADDR
// end ;
43535: GO 43416
43537: POP
43538: POP
// result := array ;
43539: LD_ADDR_VAR 0 5
43543: PUSH
43544: LD_VAR 0 1
43548: ST_TO_ADDR
// end ;
43549: LD_VAR 0 5
43553: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43554: LD_INT 0
43556: PPUSH
43557: PPUSH
// result := 0 ;
43558: LD_ADDR_VAR 0 3
43562: PUSH
43563: LD_INT 0
43565: ST_TO_ADDR
// if not array or not value in array then
43566: LD_VAR 0 1
43570: NOT
43571: PUSH
43572: LD_VAR 0 2
43576: PUSH
43577: LD_VAR 0 1
43581: IN
43582: NOT
43583: OR
43584: IFFALSE 43588
// exit ;
43586: GO 43642
// for i = 1 to array do
43588: LD_ADDR_VAR 0 4
43592: PUSH
43593: DOUBLE
43594: LD_INT 1
43596: DEC
43597: ST_TO_ADDR
43598: LD_VAR 0 1
43602: PUSH
43603: FOR_TO
43604: IFFALSE 43640
// if value = array [ i ] then
43606: LD_VAR 0 2
43610: PUSH
43611: LD_VAR 0 1
43615: PUSH
43616: LD_VAR 0 4
43620: ARRAY
43621: EQUAL
43622: IFFALSE 43638
// begin result := i ;
43624: LD_ADDR_VAR 0 3
43628: PUSH
43629: LD_VAR 0 4
43633: ST_TO_ADDR
// exit ;
43634: POP
43635: POP
43636: GO 43642
// end ;
43638: GO 43603
43640: POP
43641: POP
// end ;
43642: LD_VAR 0 3
43646: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43647: LD_INT 0
43649: PPUSH
// vc_chassis := chassis ;
43650: LD_ADDR_OWVAR 37
43654: PUSH
43655: LD_VAR 0 1
43659: ST_TO_ADDR
// vc_engine := engine ;
43660: LD_ADDR_OWVAR 39
43664: PUSH
43665: LD_VAR 0 2
43669: ST_TO_ADDR
// vc_control := control ;
43670: LD_ADDR_OWVAR 38
43674: PUSH
43675: LD_VAR 0 3
43679: ST_TO_ADDR
// vc_weapon := weapon ;
43680: LD_ADDR_OWVAR 40
43684: PUSH
43685: LD_VAR 0 4
43689: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43690: LD_ADDR_OWVAR 41
43694: PUSH
43695: LD_VAR 0 5
43699: ST_TO_ADDR
// end ;
43700: LD_VAR 0 6
43704: RET
// export function WantPlant ( unit ) ; var task ; begin
43705: LD_INT 0
43707: PPUSH
43708: PPUSH
// result := false ;
43709: LD_ADDR_VAR 0 2
43713: PUSH
43714: LD_INT 0
43716: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43717: LD_ADDR_VAR 0 3
43721: PUSH
43722: LD_VAR 0 1
43726: PPUSH
43727: CALL_OW 437
43731: ST_TO_ADDR
// if task then
43732: LD_VAR 0 3
43736: IFFALSE 43764
// if task [ 1 ] [ 1 ] = p then
43738: LD_VAR 0 3
43742: PUSH
43743: LD_INT 1
43745: ARRAY
43746: PUSH
43747: LD_INT 1
43749: ARRAY
43750: PUSH
43751: LD_STRING p
43753: EQUAL
43754: IFFALSE 43764
// result := true ;
43756: LD_ADDR_VAR 0 2
43760: PUSH
43761: LD_INT 1
43763: ST_TO_ADDR
// end ;
43764: LD_VAR 0 2
43768: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43769: LD_INT 0
43771: PPUSH
43772: PPUSH
43773: PPUSH
43774: PPUSH
// if pos < 1 then
43775: LD_VAR 0 2
43779: PUSH
43780: LD_INT 1
43782: LESS
43783: IFFALSE 43787
// exit ;
43785: GO 44090
// if pos = 1 then
43787: LD_VAR 0 2
43791: PUSH
43792: LD_INT 1
43794: EQUAL
43795: IFFALSE 43828
// result := Replace ( arr , pos [ 1 ] , value ) else
43797: LD_ADDR_VAR 0 4
43801: PUSH
43802: LD_VAR 0 1
43806: PPUSH
43807: LD_VAR 0 2
43811: PUSH
43812: LD_INT 1
43814: ARRAY
43815: PPUSH
43816: LD_VAR 0 3
43820: PPUSH
43821: CALL_OW 1
43825: ST_TO_ADDR
43826: GO 44090
// begin tmp := arr ;
43828: LD_ADDR_VAR 0 6
43832: PUSH
43833: LD_VAR 0 1
43837: ST_TO_ADDR
// s_arr := [ tmp ] ;
43838: LD_ADDR_VAR 0 7
43842: PUSH
43843: LD_VAR 0 6
43847: PUSH
43848: EMPTY
43849: LIST
43850: ST_TO_ADDR
// for i = 1 to pos - 1 do
43851: LD_ADDR_VAR 0 5
43855: PUSH
43856: DOUBLE
43857: LD_INT 1
43859: DEC
43860: ST_TO_ADDR
43861: LD_VAR 0 2
43865: PUSH
43866: LD_INT 1
43868: MINUS
43869: PUSH
43870: FOR_TO
43871: IFFALSE 43916
// begin tmp := tmp [ pos [ i ] ] ;
43873: LD_ADDR_VAR 0 6
43877: PUSH
43878: LD_VAR 0 6
43882: PUSH
43883: LD_VAR 0 2
43887: PUSH
43888: LD_VAR 0 5
43892: ARRAY
43893: ARRAY
43894: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43895: LD_ADDR_VAR 0 7
43899: PUSH
43900: LD_VAR 0 7
43904: PUSH
43905: LD_VAR 0 6
43909: PUSH
43910: EMPTY
43911: LIST
43912: ADD
43913: ST_TO_ADDR
// end ;
43914: GO 43870
43916: POP
43917: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43918: LD_ADDR_VAR 0 6
43922: PUSH
43923: LD_VAR 0 6
43927: PPUSH
43928: LD_VAR 0 2
43932: PUSH
43933: LD_VAR 0 2
43937: ARRAY
43938: PPUSH
43939: LD_VAR 0 3
43943: PPUSH
43944: CALL_OW 1
43948: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43949: LD_ADDR_VAR 0 7
43953: PUSH
43954: LD_VAR 0 7
43958: PPUSH
43959: LD_VAR 0 7
43963: PPUSH
43964: LD_VAR 0 6
43968: PPUSH
43969: CALL_OW 1
43973: ST_TO_ADDR
// for i = s_arr downto 2 do
43974: LD_ADDR_VAR 0 5
43978: PUSH
43979: DOUBLE
43980: LD_VAR 0 7
43984: INC
43985: ST_TO_ADDR
43986: LD_INT 2
43988: PUSH
43989: FOR_DOWNTO
43990: IFFALSE 44074
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43992: LD_ADDR_VAR 0 6
43996: PUSH
43997: LD_VAR 0 7
44001: PUSH
44002: LD_VAR 0 5
44006: PUSH
44007: LD_INT 1
44009: MINUS
44010: ARRAY
44011: PPUSH
44012: LD_VAR 0 2
44016: PUSH
44017: LD_VAR 0 5
44021: PUSH
44022: LD_INT 1
44024: MINUS
44025: ARRAY
44026: PPUSH
44027: LD_VAR 0 7
44031: PUSH
44032: LD_VAR 0 5
44036: ARRAY
44037: PPUSH
44038: CALL_OW 1
44042: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44043: LD_ADDR_VAR 0 7
44047: PUSH
44048: LD_VAR 0 7
44052: PPUSH
44053: LD_VAR 0 5
44057: PUSH
44058: LD_INT 1
44060: MINUS
44061: PPUSH
44062: LD_VAR 0 6
44066: PPUSH
44067: CALL_OW 1
44071: ST_TO_ADDR
// end ;
44072: GO 43989
44074: POP
44075: POP
// result := s_arr [ 1 ] ;
44076: LD_ADDR_VAR 0 4
44080: PUSH
44081: LD_VAR 0 7
44085: PUSH
44086: LD_INT 1
44088: ARRAY
44089: ST_TO_ADDR
// end ; end ;
44090: LD_VAR 0 4
44094: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44095: LD_INT 0
44097: PPUSH
44098: PPUSH
// if not list then
44099: LD_VAR 0 1
44103: NOT
44104: IFFALSE 44108
// exit ;
44106: GO 44199
// i := list [ pos1 ] ;
44108: LD_ADDR_VAR 0 5
44112: PUSH
44113: LD_VAR 0 1
44117: PUSH
44118: LD_VAR 0 2
44122: ARRAY
44123: ST_TO_ADDR
// if not i then
44124: LD_VAR 0 5
44128: NOT
44129: IFFALSE 44133
// exit ;
44131: GO 44199
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44133: LD_ADDR_VAR 0 1
44137: PUSH
44138: LD_VAR 0 1
44142: PPUSH
44143: LD_VAR 0 2
44147: PPUSH
44148: LD_VAR 0 1
44152: PUSH
44153: LD_VAR 0 3
44157: ARRAY
44158: PPUSH
44159: CALL_OW 1
44163: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44164: LD_ADDR_VAR 0 1
44168: PUSH
44169: LD_VAR 0 1
44173: PPUSH
44174: LD_VAR 0 3
44178: PPUSH
44179: LD_VAR 0 5
44183: PPUSH
44184: CALL_OW 1
44188: ST_TO_ADDR
// result := list ;
44189: LD_ADDR_VAR 0 4
44193: PUSH
44194: LD_VAR 0 1
44198: ST_TO_ADDR
// end ;
44199: LD_VAR 0 4
44203: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44204: LD_INT 0
44206: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44207: LD_ADDR_VAR 0 5
44211: PUSH
44212: LD_VAR 0 1
44216: PPUSH
44217: CALL_OW 250
44221: PPUSH
44222: LD_VAR 0 1
44226: PPUSH
44227: CALL_OW 251
44231: PPUSH
44232: LD_VAR 0 2
44236: PPUSH
44237: LD_VAR 0 3
44241: PPUSH
44242: LD_VAR 0 4
44246: PPUSH
44247: CALL 44257 0 5
44251: ST_TO_ADDR
// end ;
44252: LD_VAR 0 5
44256: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44257: LD_INT 0
44259: PPUSH
44260: PPUSH
44261: PPUSH
44262: PPUSH
// if not list then
44263: LD_VAR 0 3
44267: NOT
44268: IFFALSE 44272
// exit ;
44270: GO 44660
// result := [ ] ;
44272: LD_ADDR_VAR 0 6
44276: PUSH
44277: EMPTY
44278: ST_TO_ADDR
// for i in list do
44279: LD_ADDR_VAR 0 7
44283: PUSH
44284: LD_VAR 0 3
44288: PUSH
44289: FOR_IN
44290: IFFALSE 44492
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44292: LD_ADDR_VAR 0 9
44296: PUSH
44297: LD_VAR 0 7
44301: PPUSH
44302: LD_VAR 0 1
44306: PPUSH
44307: LD_VAR 0 2
44311: PPUSH
44312: CALL_OW 297
44316: ST_TO_ADDR
// if not result then
44317: LD_VAR 0 6
44321: NOT
44322: IFFALSE 44348
// result := [ [ i , tmp ] ] else
44324: LD_ADDR_VAR 0 6
44328: PUSH
44329: LD_VAR 0 7
44333: PUSH
44334: LD_VAR 0 9
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: EMPTY
44344: LIST
44345: ST_TO_ADDR
44346: GO 44490
// begin if result [ result ] [ 2 ] < tmp then
44348: LD_VAR 0 6
44352: PUSH
44353: LD_VAR 0 6
44357: ARRAY
44358: PUSH
44359: LD_INT 2
44361: ARRAY
44362: PUSH
44363: LD_VAR 0 9
44367: LESS
44368: IFFALSE 44410
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44370: LD_ADDR_VAR 0 6
44374: PUSH
44375: LD_VAR 0 6
44379: PPUSH
44380: LD_VAR 0 6
44384: PUSH
44385: LD_INT 1
44387: PLUS
44388: PPUSH
44389: LD_VAR 0 7
44393: PUSH
44394: LD_VAR 0 9
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PPUSH
44403: CALL_OW 2
44407: ST_TO_ADDR
44408: GO 44490
// for j = 1 to result do
44410: LD_ADDR_VAR 0 8
44414: PUSH
44415: DOUBLE
44416: LD_INT 1
44418: DEC
44419: ST_TO_ADDR
44420: LD_VAR 0 6
44424: PUSH
44425: FOR_TO
44426: IFFALSE 44488
// begin if tmp < result [ j ] [ 2 ] then
44428: LD_VAR 0 9
44432: PUSH
44433: LD_VAR 0 6
44437: PUSH
44438: LD_VAR 0 8
44442: ARRAY
44443: PUSH
44444: LD_INT 2
44446: ARRAY
44447: LESS
44448: IFFALSE 44486
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44450: LD_ADDR_VAR 0 6
44454: PUSH
44455: LD_VAR 0 6
44459: PPUSH
44460: LD_VAR 0 8
44464: PPUSH
44465: LD_VAR 0 7
44469: PUSH
44470: LD_VAR 0 9
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PPUSH
44479: CALL_OW 2
44483: ST_TO_ADDR
// break ;
44484: GO 44488
// end ; end ;
44486: GO 44425
44488: POP
44489: POP
// end ; end ;
44490: GO 44289
44492: POP
44493: POP
// if result and not asc then
44494: LD_VAR 0 6
44498: PUSH
44499: LD_VAR 0 4
44503: NOT
44504: AND
44505: IFFALSE 44580
// begin tmp := result ;
44507: LD_ADDR_VAR 0 9
44511: PUSH
44512: LD_VAR 0 6
44516: ST_TO_ADDR
// for i = tmp downto 1 do
44517: LD_ADDR_VAR 0 7
44521: PUSH
44522: DOUBLE
44523: LD_VAR 0 9
44527: INC
44528: ST_TO_ADDR
44529: LD_INT 1
44531: PUSH
44532: FOR_DOWNTO
44533: IFFALSE 44578
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44535: LD_ADDR_VAR 0 6
44539: PUSH
44540: LD_VAR 0 6
44544: PPUSH
44545: LD_VAR 0 9
44549: PUSH
44550: LD_VAR 0 7
44554: MINUS
44555: PUSH
44556: LD_INT 1
44558: PLUS
44559: PPUSH
44560: LD_VAR 0 9
44564: PUSH
44565: LD_VAR 0 7
44569: ARRAY
44570: PPUSH
44571: CALL_OW 1
44575: ST_TO_ADDR
44576: GO 44532
44578: POP
44579: POP
// end ; tmp := [ ] ;
44580: LD_ADDR_VAR 0 9
44584: PUSH
44585: EMPTY
44586: ST_TO_ADDR
// if mode then
44587: LD_VAR 0 5
44591: IFFALSE 44660
// begin for i = 1 to result do
44593: LD_ADDR_VAR 0 7
44597: PUSH
44598: DOUBLE
44599: LD_INT 1
44601: DEC
44602: ST_TO_ADDR
44603: LD_VAR 0 6
44607: PUSH
44608: FOR_TO
44609: IFFALSE 44648
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44611: LD_ADDR_VAR 0 9
44615: PUSH
44616: LD_VAR 0 9
44620: PPUSH
44621: LD_VAR 0 7
44625: PPUSH
44626: LD_VAR 0 6
44630: PUSH
44631: LD_VAR 0 7
44635: ARRAY
44636: PUSH
44637: LD_INT 1
44639: ARRAY
44640: PPUSH
44641: CALL_OW 1
44645: ST_TO_ADDR
44646: GO 44608
44648: POP
44649: POP
// result := tmp ;
44650: LD_ADDR_VAR 0 6
44654: PUSH
44655: LD_VAR 0 9
44659: ST_TO_ADDR
// end ; end ;
44660: LD_VAR 0 6
44664: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44665: LD_INT 0
44667: PPUSH
44668: PPUSH
44669: PPUSH
44670: PPUSH
44671: PPUSH
44672: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44673: LD_ADDR_VAR 0 5
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: EMPTY
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: ST_TO_ADDR
// if not x or not y then
44695: LD_VAR 0 2
44699: NOT
44700: PUSH
44701: LD_VAR 0 3
44705: NOT
44706: OR
44707: IFFALSE 44711
// exit ;
44709: GO 46361
// if not range then
44711: LD_VAR 0 4
44715: NOT
44716: IFFALSE 44726
// range := 10 ;
44718: LD_ADDR_VAR 0 4
44722: PUSH
44723: LD_INT 10
44725: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44726: LD_ADDR_VAR 0 8
44730: PUSH
44731: LD_INT 81
44733: PUSH
44734: LD_VAR 0 1
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 92
44745: PUSH
44746: LD_VAR 0 2
44750: PUSH
44751: LD_VAR 0 3
44755: PUSH
44756: LD_VAR 0 4
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 3
44769: PUSH
44770: LD_INT 21
44772: PUSH
44773: LD_INT 3
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: LIST
44788: PPUSH
44789: CALL_OW 69
44793: ST_TO_ADDR
// if not tmp then
44794: LD_VAR 0 8
44798: NOT
44799: IFFALSE 44803
// exit ;
44801: GO 46361
// for i in tmp do
44803: LD_ADDR_VAR 0 6
44807: PUSH
44808: LD_VAR 0 8
44812: PUSH
44813: FOR_IN
44814: IFFALSE 46336
// begin points := [ 0 , 0 , 0 ] ;
44816: LD_ADDR_VAR 0 9
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: LIST
44834: ST_TO_ADDR
// bpoints := 1 ;
44835: LD_ADDR_VAR 0 10
44839: PUSH
44840: LD_INT 1
44842: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44843: LD_VAR 0 6
44847: PPUSH
44848: CALL_OW 247
44852: PUSH
44853: LD_INT 1
44855: DOUBLE
44856: EQUAL
44857: IFTRUE 44861
44859: GO 45439
44861: POP
// begin if GetClass ( i ) = 1 then
44862: LD_VAR 0 6
44866: PPUSH
44867: CALL_OW 257
44871: PUSH
44872: LD_INT 1
44874: EQUAL
44875: IFFALSE 44896
// points := [ 10 , 5 , 3 ] ;
44877: LD_ADDR_VAR 0 9
44881: PUSH
44882: LD_INT 10
44884: PUSH
44885: LD_INT 5
44887: PUSH
44888: LD_INT 3
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: LIST
44895: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44896: LD_VAR 0 6
44900: PPUSH
44901: CALL_OW 257
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: LD_INT 3
44911: PUSH
44912: LD_INT 4
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: LIST
44919: IN
44920: IFFALSE 44941
// points := [ 3 , 2 , 1 ] ;
44922: LD_ADDR_VAR 0 9
44926: PUSH
44927: LD_INT 3
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: LIST
44940: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44941: LD_VAR 0 6
44945: PPUSH
44946: CALL_OW 257
44950: PUSH
44951: LD_INT 5
44953: EQUAL
44954: IFFALSE 44975
// points := [ 130 , 5 , 2 ] ;
44956: LD_ADDR_VAR 0 9
44960: PUSH
44961: LD_INT 130
44963: PUSH
44964: LD_INT 5
44966: PUSH
44967: LD_INT 2
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: LIST
44974: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44975: LD_VAR 0 6
44979: PPUSH
44980: CALL_OW 257
44984: PUSH
44985: LD_INT 8
44987: EQUAL
44988: IFFALSE 45009
// points := [ 35 , 35 , 30 ] ;
44990: LD_ADDR_VAR 0 9
44994: PUSH
44995: LD_INT 35
44997: PUSH
44998: LD_INT 35
45000: PUSH
45001: LD_INT 30
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: LIST
45008: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45009: LD_VAR 0 6
45013: PPUSH
45014: CALL_OW 257
45018: PUSH
45019: LD_INT 9
45021: EQUAL
45022: IFFALSE 45043
// points := [ 20 , 55 , 40 ] ;
45024: LD_ADDR_VAR 0 9
45028: PUSH
45029: LD_INT 20
45031: PUSH
45032: LD_INT 55
45034: PUSH
45035: LD_INT 40
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: LIST
45042: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45043: LD_VAR 0 6
45047: PPUSH
45048: CALL_OW 257
45052: PUSH
45053: LD_INT 12
45055: PUSH
45056: LD_INT 16
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: IN
45063: IFFALSE 45084
// points := [ 5 , 3 , 2 ] ;
45065: LD_ADDR_VAR 0 9
45069: PUSH
45070: LD_INT 5
45072: PUSH
45073: LD_INT 3
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: LIST
45083: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45084: LD_VAR 0 6
45088: PPUSH
45089: CALL_OW 257
45093: PUSH
45094: LD_INT 17
45096: EQUAL
45097: IFFALSE 45118
// points := [ 100 , 50 , 75 ] ;
45099: LD_ADDR_VAR 0 9
45103: PUSH
45104: LD_INT 100
45106: PUSH
45107: LD_INT 50
45109: PUSH
45110: LD_INT 75
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: LIST
45117: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45118: LD_VAR 0 6
45122: PPUSH
45123: CALL_OW 257
45127: PUSH
45128: LD_INT 15
45130: EQUAL
45131: IFFALSE 45152
// points := [ 10 , 5 , 3 ] ;
45133: LD_ADDR_VAR 0 9
45137: PUSH
45138: LD_INT 10
45140: PUSH
45141: LD_INT 5
45143: PUSH
45144: LD_INT 3
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: LIST
45151: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45152: LD_VAR 0 6
45156: PPUSH
45157: CALL_OW 257
45161: PUSH
45162: LD_INT 14
45164: EQUAL
45165: IFFALSE 45186
// points := [ 10 , 0 , 0 ] ;
45167: LD_ADDR_VAR 0 9
45171: PUSH
45172: LD_INT 10
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: LIST
45185: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45186: LD_VAR 0 6
45190: PPUSH
45191: CALL_OW 257
45195: PUSH
45196: LD_INT 11
45198: EQUAL
45199: IFFALSE 45220
// points := [ 30 , 10 , 5 ] ;
45201: LD_ADDR_VAR 0 9
45205: PUSH
45206: LD_INT 30
45208: PUSH
45209: LD_INT 10
45211: PUSH
45212: LD_INT 5
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: LIST
45219: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45220: LD_VAR 0 1
45224: PPUSH
45225: LD_INT 5
45227: PPUSH
45228: CALL_OW 321
45232: PUSH
45233: LD_INT 2
45235: EQUAL
45236: IFFALSE 45253
// bpoints := bpoints * 1.8 ;
45238: LD_ADDR_VAR 0 10
45242: PUSH
45243: LD_VAR 0 10
45247: PUSH
45248: LD_REAL  1.80000000000000E+0000
45251: MUL
45252: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45253: LD_VAR 0 6
45257: PPUSH
45258: CALL_OW 257
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: LD_INT 3
45271: PUSH
45272: LD_INT 4
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: IN
45281: PUSH
45282: LD_VAR 0 1
45286: PPUSH
45287: LD_INT 51
45289: PPUSH
45290: CALL_OW 321
45294: PUSH
45295: LD_INT 2
45297: EQUAL
45298: AND
45299: IFFALSE 45316
// bpoints := bpoints * 1.2 ;
45301: LD_ADDR_VAR 0 10
45305: PUSH
45306: LD_VAR 0 10
45310: PUSH
45311: LD_REAL  1.20000000000000E+0000
45314: MUL
45315: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45316: LD_VAR 0 6
45320: PPUSH
45321: CALL_OW 257
45325: PUSH
45326: LD_INT 5
45328: PUSH
45329: LD_INT 7
45331: PUSH
45332: LD_INT 9
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: LIST
45339: IN
45340: PUSH
45341: LD_VAR 0 1
45345: PPUSH
45346: LD_INT 52
45348: PPUSH
45349: CALL_OW 321
45353: PUSH
45354: LD_INT 2
45356: EQUAL
45357: AND
45358: IFFALSE 45375
// bpoints := bpoints * 1.5 ;
45360: LD_ADDR_VAR 0 10
45364: PUSH
45365: LD_VAR 0 10
45369: PUSH
45370: LD_REAL  1.50000000000000E+0000
45373: MUL
45374: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45375: LD_VAR 0 1
45379: PPUSH
45380: LD_INT 66
45382: PPUSH
45383: CALL_OW 321
45387: PUSH
45388: LD_INT 2
45390: EQUAL
45391: IFFALSE 45408
// bpoints := bpoints * 1.1 ;
45393: LD_ADDR_VAR 0 10
45397: PUSH
45398: LD_VAR 0 10
45402: PUSH
45403: LD_REAL  1.10000000000000E+0000
45406: MUL
45407: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45408: LD_ADDR_VAR 0 10
45412: PUSH
45413: LD_VAR 0 10
45417: PUSH
45418: LD_VAR 0 6
45422: PPUSH
45423: LD_INT 1
45425: PPUSH
45426: CALL_OW 259
45430: PUSH
45431: LD_REAL  1.15000000000000E+0000
45434: MUL
45435: MUL
45436: ST_TO_ADDR
// end ; unit_vehicle :
45437: GO 46265
45439: LD_INT 2
45441: DOUBLE
45442: EQUAL
45443: IFTRUE 45447
45445: GO 46253
45447: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45448: LD_VAR 0 6
45452: PPUSH
45453: CALL_OW 264
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: LD_INT 42
45463: PUSH
45464: LD_INT 24
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: LIST
45471: IN
45472: IFFALSE 45493
// points := [ 25 , 5 , 3 ] ;
45474: LD_ADDR_VAR 0 9
45478: PUSH
45479: LD_INT 25
45481: PUSH
45482: LD_INT 5
45484: PUSH
45485: LD_INT 3
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: LIST
45492: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45493: LD_VAR 0 6
45497: PPUSH
45498: CALL_OW 264
45502: PUSH
45503: LD_INT 4
45505: PUSH
45506: LD_INT 43
45508: PUSH
45509: LD_INT 25
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: LIST
45516: IN
45517: IFFALSE 45538
// points := [ 40 , 15 , 5 ] ;
45519: LD_ADDR_VAR 0 9
45523: PUSH
45524: LD_INT 40
45526: PUSH
45527: LD_INT 15
45529: PUSH
45530: LD_INT 5
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: LIST
45537: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45538: LD_VAR 0 6
45542: PPUSH
45543: CALL_OW 264
45547: PUSH
45548: LD_INT 3
45550: PUSH
45551: LD_INT 23
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: IN
45558: IFFALSE 45579
// points := [ 7 , 25 , 8 ] ;
45560: LD_ADDR_VAR 0 9
45564: PUSH
45565: LD_INT 7
45567: PUSH
45568: LD_INT 25
45570: PUSH
45571: LD_INT 8
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: LIST
45578: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45579: LD_VAR 0 6
45583: PPUSH
45584: CALL_OW 264
45588: PUSH
45589: LD_INT 5
45591: PUSH
45592: LD_INT 27
45594: PUSH
45595: LD_INT 44
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: LIST
45602: IN
45603: IFFALSE 45624
// points := [ 14 , 50 , 16 ] ;
45605: LD_ADDR_VAR 0 9
45609: PUSH
45610: LD_INT 14
45612: PUSH
45613: LD_INT 50
45615: PUSH
45616: LD_INT 16
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: LIST
45623: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45624: LD_VAR 0 6
45628: PPUSH
45629: CALL_OW 264
45633: PUSH
45634: LD_INT 6
45636: PUSH
45637: LD_INT 46
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: IN
45644: IFFALSE 45665
// points := [ 32 , 120 , 70 ] ;
45646: LD_ADDR_VAR 0 9
45650: PUSH
45651: LD_INT 32
45653: PUSH
45654: LD_INT 120
45656: PUSH
45657: LD_INT 70
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: LIST
45664: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45665: LD_VAR 0 6
45669: PPUSH
45670: CALL_OW 264
45674: PUSH
45675: LD_INT 7
45677: PUSH
45678: LD_INT 28
45680: PUSH
45681: LD_INT 45
45683: PUSH
45684: LD_INT 92
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: IN
45693: IFFALSE 45714
// points := [ 35 , 20 , 45 ] ;
45695: LD_ADDR_VAR 0 9
45699: PUSH
45700: LD_INT 35
45702: PUSH
45703: LD_INT 20
45705: PUSH
45706: LD_INT 45
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: LIST
45713: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45714: LD_VAR 0 6
45718: PPUSH
45719: CALL_OW 264
45723: PUSH
45724: LD_INT 47
45726: PUSH
45727: EMPTY
45728: LIST
45729: IN
45730: IFFALSE 45751
// points := [ 67 , 45 , 75 ] ;
45732: LD_ADDR_VAR 0 9
45736: PUSH
45737: LD_INT 67
45739: PUSH
45740: LD_INT 45
45742: PUSH
45743: LD_INT 75
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45751: LD_VAR 0 6
45755: PPUSH
45756: CALL_OW 264
45760: PUSH
45761: LD_INT 26
45763: PUSH
45764: EMPTY
45765: LIST
45766: IN
45767: IFFALSE 45788
// points := [ 120 , 30 , 80 ] ;
45769: LD_ADDR_VAR 0 9
45773: PUSH
45774: LD_INT 120
45776: PUSH
45777: LD_INT 30
45779: PUSH
45780: LD_INT 80
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: LIST
45787: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45788: LD_VAR 0 6
45792: PPUSH
45793: CALL_OW 264
45797: PUSH
45798: LD_INT 22
45800: PUSH
45801: EMPTY
45802: LIST
45803: IN
45804: IFFALSE 45825
// points := [ 40 , 1 , 1 ] ;
45806: LD_ADDR_VAR 0 9
45810: PUSH
45811: LD_INT 40
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: LIST
45824: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45825: LD_VAR 0 6
45829: PPUSH
45830: CALL_OW 264
45834: PUSH
45835: LD_INT 29
45837: PUSH
45838: EMPTY
45839: LIST
45840: IN
45841: IFFALSE 45862
// points := [ 70 , 200 , 400 ] ;
45843: LD_ADDR_VAR 0 9
45847: PUSH
45848: LD_INT 70
45850: PUSH
45851: LD_INT 200
45853: PUSH
45854: LD_INT 400
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: LIST
45861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45862: LD_VAR 0 6
45866: PPUSH
45867: CALL_OW 264
45871: PUSH
45872: LD_INT 14
45874: PUSH
45875: LD_INT 53
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: IN
45882: IFFALSE 45903
// points := [ 40 , 10 , 20 ] ;
45884: LD_ADDR_VAR 0 9
45888: PUSH
45889: LD_INT 40
45891: PUSH
45892: LD_INT 10
45894: PUSH
45895: LD_INT 20
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: LIST
45902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45903: LD_VAR 0 6
45907: PPUSH
45908: CALL_OW 264
45912: PUSH
45913: LD_INT 9
45915: PUSH
45916: EMPTY
45917: LIST
45918: IN
45919: IFFALSE 45940
// points := [ 5 , 70 , 20 ] ;
45921: LD_ADDR_VAR 0 9
45925: PUSH
45926: LD_INT 5
45928: PUSH
45929: LD_INT 70
45931: PUSH
45932: LD_INT 20
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: LIST
45939: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45940: LD_VAR 0 6
45944: PPUSH
45945: CALL_OW 264
45949: PUSH
45950: LD_INT 10
45952: PUSH
45953: EMPTY
45954: LIST
45955: IN
45956: IFFALSE 45977
// points := [ 35 , 110 , 70 ] ;
45958: LD_ADDR_VAR 0 9
45962: PUSH
45963: LD_INT 35
45965: PUSH
45966: LD_INT 110
45968: PUSH
45969: LD_INT 70
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45977: LD_VAR 0 6
45981: PPUSH
45982: CALL_OW 265
45986: PUSH
45987: LD_INT 25
45989: EQUAL
45990: IFFALSE 46011
// points := [ 80 , 65 , 100 ] ;
45992: LD_ADDR_VAR 0 9
45996: PUSH
45997: LD_INT 80
45999: PUSH
46000: LD_INT 65
46002: PUSH
46003: LD_INT 100
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: LIST
46010: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46011: LD_VAR 0 6
46015: PPUSH
46016: CALL_OW 263
46020: PUSH
46021: LD_INT 1
46023: EQUAL
46024: IFFALSE 46059
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46026: LD_ADDR_VAR 0 10
46030: PUSH
46031: LD_VAR 0 10
46035: PUSH
46036: LD_VAR 0 6
46040: PPUSH
46041: CALL_OW 311
46045: PPUSH
46046: LD_INT 3
46048: PPUSH
46049: CALL_OW 259
46053: PUSH
46054: LD_INT 4
46056: MUL
46057: MUL
46058: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46059: LD_VAR 0 6
46063: PPUSH
46064: CALL_OW 263
46068: PUSH
46069: LD_INT 2
46071: EQUAL
46072: IFFALSE 46123
// begin j := IsControledBy ( i ) ;
46074: LD_ADDR_VAR 0 7
46078: PUSH
46079: LD_VAR 0 6
46083: PPUSH
46084: CALL_OW 312
46088: ST_TO_ADDR
// if j then
46089: LD_VAR 0 7
46093: IFFALSE 46123
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46095: LD_ADDR_VAR 0 10
46099: PUSH
46100: LD_VAR 0 10
46104: PUSH
46105: LD_VAR 0 7
46109: PPUSH
46110: LD_INT 3
46112: PPUSH
46113: CALL_OW 259
46117: PUSH
46118: LD_INT 3
46120: MUL
46121: MUL
46122: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46123: LD_VAR 0 6
46127: PPUSH
46128: CALL_OW 264
46132: PUSH
46133: LD_INT 5
46135: PUSH
46136: LD_INT 6
46138: PUSH
46139: LD_INT 46
46141: PUSH
46142: LD_INT 44
46144: PUSH
46145: LD_INT 47
46147: PUSH
46148: LD_INT 45
46150: PUSH
46151: LD_INT 28
46153: PUSH
46154: LD_INT 7
46156: PUSH
46157: LD_INT 27
46159: PUSH
46160: LD_INT 29
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: IN
46175: PUSH
46176: LD_VAR 0 1
46180: PPUSH
46181: LD_INT 52
46183: PPUSH
46184: CALL_OW 321
46188: PUSH
46189: LD_INT 2
46191: EQUAL
46192: AND
46193: IFFALSE 46210
// bpoints := bpoints * 1.2 ;
46195: LD_ADDR_VAR 0 10
46199: PUSH
46200: LD_VAR 0 10
46204: PUSH
46205: LD_REAL  1.20000000000000E+0000
46208: MUL
46209: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46210: LD_VAR 0 6
46214: PPUSH
46215: CALL_OW 264
46219: PUSH
46220: LD_INT 6
46222: PUSH
46223: LD_INT 46
46225: PUSH
46226: LD_INT 47
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: LIST
46233: IN
46234: IFFALSE 46251
// bpoints := bpoints * 1.2 ;
46236: LD_ADDR_VAR 0 10
46240: PUSH
46241: LD_VAR 0 10
46245: PUSH
46246: LD_REAL  1.20000000000000E+0000
46249: MUL
46250: ST_TO_ADDR
// end ; unit_building :
46251: GO 46265
46253: LD_INT 3
46255: DOUBLE
46256: EQUAL
46257: IFTRUE 46261
46259: GO 46264
46261: POP
// ; end ;
46262: GO 46265
46264: POP
// for j = 1 to 3 do
46265: LD_ADDR_VAR 0 7
46269: PUSH
46270: DOUBLE
46271: LD_INT 1
46273: DEC
46274: ST_TO_ADDR
46275: LD_INT 3
46277: PUSH
46278: FOR_TO
46279: IFFALSE 46332
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46281: LD_ADDR_VAR 0 5
46285: PUSH
46286: LD_VAR 0 5
46290: PPUSH
46291: LD_VAR 0 7
46295: PPUSH
46296: LD_VAR 0 5
46300: PUSH
46301: LD_VAR 0 7
46305: ARRAY
46306: PUSH
46307: LD_VAR 0 9
46311: PUSH
46312: LD_VAR 0 7
46316: ARRAY
46317: PUSH
46318: LD_VAR 0 10
46322: MUL
46323: PLUS
46324: PPUSH
46325: CALL_OW 1
46329: ST_TO_ADDR
46330: GO 46278
46332: POP
46333: POP
// end ;
46334: GO 44813
46336: POP
46337: POP
// result := Replace ( result , 4 , tmp ) ;
46338: LD_ADDR_VAR 0 5
46342: PUSH
46343: LD_VAR 0 5
46347: PPUSH
46348: LD_INT 4
46350: PPUSH
46351: LD_VAR 0 8
46355: PPUSH
46356: CALL_OW 1
46360: ST_TO_ADDR
// end ;
46361: LD_VAR 0 5
46365: RET
// export function DangerAtRange ( unit , range ) ; begin
46366: LD_INT 0
46368: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46369: LD_ADDR_VAR 0 3
46373: PUSH
46374: LD_VAR 0 1
46378: PPUSH
46379: CALL_OW 255
46383: PPUSH
46384: LD_VAR 0 1
46388: PPUSH
46389: CALL_OW 250
46393: PPUSH
46394: LD_VAR 0 1
46398: PPUSH
46399: CALL_OW 251
46403: PPUSH
46404: LD_VAR 0 2
46408: PPUSH
46409: CALL 44665 0 4
46413: ST_TO_ADDR
// end ;
46414: LD_VAR 0 3
46418: RET
// export function DangerInArea ( side , area ) ; begin
46419: LD_INT 0
46421: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46422: LD_ADDR_VAR 0 3
46426: PUSH
46427: LD_VAR 0 2
46431: PPUSH
46432: LD_INT 81
46434: PUSH
46435: LD_VAR 0 1
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PPUSH
46444: CALL_OW 70
46448: ST_TO_ADDR
// end ;
46449: LD_VAR 0 3
46453: RET
// export function IsExtension ( b ) ; begin
46454: LD_INT 0
46456: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46457: LD_ADDR_VAR 0 2
46461: PUSH
46462: LD_VAR 0 1
46466: PUSH
46467: LD_INT 23
46469: PUSH
46470: LD_INT 20
46472: PUSH
46473: LD_INT 22
46475: PUSH
46476: LD_INT 17
46478: PUSH
46479: LD_INT 24
46481: PUSH
46482: LD_INT 21
46484: PUSH
46485: LD_INT 19
46487: PUSH
46488: LD_INT 16
46490: PUSH
46491: LD_INT 25
46493: PUSH
46494: LD_INT 18
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: IN
46509: ST_TO_ADDR
// end ;
46510: LD_VAR 0 2
46514: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46515: LD_INT 0
46517: PPUSH
46518: PPUSH
46519: PPUSH
// result := [ ] ;
46520: LD_ADDR_VAR 0 4
46524: PUSH
46525: EMPTY
46526: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46527: LD_ADDR_VAR 0 5
46531: PUSH
46532: LD_VAR 0 2
46536: PPUSH
46537: LD_INT 21
46539: PUSH
46540: LD_INT 3
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PPUSH
46547: CALL_OW 70
46551: ST_TO_ADDR
// if not tmp then
46552: LD_VAR 0 5
46556: NOT
46557: IFFALSE 46561
// exit ;
46559: GO 46625
// if checkLink then
46561: LD_VAR 0 3
46565: IFFALSE 46615
// begin for i in tmp do
46567: LD_ADDR_VAR 0 6
46571: PUSH
46572: LD_VAR 0 5
46576: PUSH
46577: FOR_IN
46578: IFFALSE 46613
// if GetBase ( i ) <> base then
46580: LD_VAR 0 6
46584: PPUSH
46585: CALL_OW 274
46589: PUSH
46590: LD_VAR 0 1
46594: NONEQUAL
46595: IFFALSE 46611
// ComLinkToBase ( base , i ) ;
46597: LD_VAR 0 1
46601: PPUSH
46602: LD_VAR 0 6
46606: PPUSH
46607: CALL_OW 169
46611: GO 46577
46613: POP
46614: POP
// end ; result := tmp ;
46615: LD_ADDR_VAR 0 4
46619: PUSH
46620: LD_VAR 0 5
46624: ST_TO_ADDR
// end ;
46625: LD_VAR 0 4
46629: RET
// export function ComComplete ( units , b ) ; var i ; begin
46630: LD_INT 0
46632: PPUSH
46633: PPUSH
// if not units then
46634: LD_VAR 0 1
46638: NOT
46639: IFFALSE 46643
// exit ;
46641: GO 46733
// for i in units do
46643: LD_ADDR_VAR 0 4
46647: PUSH
46648: LD_VAR 0 1
46652: PUSH
46653: FOR_IN
46654: IFFALSE 46731
// if BuildingStatus ( b ) = bs_build then
46656: LD_VAR 0 2
46660: PPUSH
46661: CALL_OW 461
46665: PUSH
46666: LD_INT 1
46668: EQUAL
46669: IFFALSE 46729
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46671: LD_VAR 0 4
46675: PPUSH
46676: LD_STRING h
46678: PUSH
46679: LD_VAR 0 2
46683: PPUSH
46684: CALL_OW 250
46688: PUSH
46689: LD_VAR 0 2
46693: PPUSH
46694: CALL_OW 251
46698: PUSH
46699: LD_VAR 0 2
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: PUSH
46722: EMPTY
46723: LIST
46724: PPUSH
46725: CALL_OW 446
46729: GO 46653
46731: POP
46732: POP
// end ;
46733: LD_VAR 0 3
46737: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46738: LD_INT 0
46740: PPUSH
46741: PPUSH
46742: PPUSH
46743: PPUSH
46744: PPUSH
46745: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46746: LD_VAR 0 1
46750: NOT
46751: PUSH
46752: LD_VAR 0 1
46756: PPUSH
46757: CALL_OW 263
46761: PUSH
46762: LD_INT 2
46764: NONEQUAL
46765: OR
46766: IFFALSE 46770
// exit ;
46768: GO 47086
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46770: LD_ADDR_VAR 0 6
46774: PUSH
46775: LD_INT 22
46777: PUSH
46778: LD_VAR 0 1
46782: PPUSH
46783: CALL_OW 255
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 2
46794: PUSH
46795: LD_INT 30
46797: PUSH
46798: LD_INT 36
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 34
46807: PUSH
46808: LD_INT 31
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: LIST
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PPUSH
46824: CALL_OW 69
46828: ST_TO_ADDR
// if not tmp then
46829: LD_VAR 0 6
46833: NOT
46834: IFFALSE 46838
// exit ;
46836: GO 47086
// result := [ ] ;
46838: LD_ADDR_VAR 0 2
46842: PUSH
46843: EMPTY
46844: ST_TO_ADDR
// for i in tmp do
46845: LD_ADDR_VAR 0 3
46849: PUSH
46850: LD_VAR 0 6
46854: PUSH
46855: FOR_IN
46856: IFFALSE 46927
// begin t := UnitsInside ( i ) ;
46858: LD_ADDR_VAR 0 4
46862: PUSH
46863: LD_VAR 0 3
46867: PPUSH
46868: CALL_OW 313
46872: ST_TO_ADDR
// if t then
46873: LD_VAR 0 4
46877: IFFALSE 46925
// for j in t do
46879: LD_ADDR_VAR 0 7
46883: PUSH
46884: LD_VAR 0 4
46888: PUSH
46889: FOR_IN
46890: IFFALSE 46923
// result := Replace ( result , result + 1 , j ) ;
46892: LD_ADDR_VAR 0 2
46896: PUSH
46897: LD_VAR 0 2
46901: PPUSH
46902: LD_VAR 0 2
46906: PUSH
46907: LD_INT 1
46909: PLUS
46910: PPUSH
46911: LD_VAR 0 7
46915: PPUSH
46916: CALL_OW 1
46920: ST_TO_ADDR
46921: GO 46889
46923: POP
46924: POP
// end ;
46925: GO 46855
46927: POP
46928: POP
// if not result then
46929: LD_VAR 0 2
46933: NOT
46934: IFFALSE 46938
// exit ;
46936: GO 47086
// mech := result [ 1 ] ;
46938: LD_ADDR_VAR 0 5
46942: PUSH
46943: LD_VAR 0 2
46947: PUSH
46948: LD_INT 1
46950: ARRAY
46951: ST_TO_ADDR
// if result > 1 then
46952: LD_VAR 0 2
46956: PUSH
46957: LD_INT 1
46959: GREATER
46960: IFFALSE 47072
// begin for i = 2 to result do
46962: LD_ADDR_VAR 0 3
46966: PUSH
46967: DOUBLE
46968: LD_INT 2
46970: DEC
46971: ST_TO_ADDR
46972: LD_VAR 0 2
46976: PUSH
46977: FOR_TO
46978: IFFALSE 47070
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46980: LD_ADDR_VAR 0 4
46984: PUSH
46985: LD_VAR 0 2
46989: PUSH
46990: LD_VAR 0 3
46994: ARRAY
46995: PPUSH
46996: LD_INT 3
46998: PPUSH
46999: CALL_OW 259
47003: PUSH
47004: LD_VAR 0 2
47008: PUSH
47009: LD_VAR 0 3
47013: ARRAY
47014: PPUSH
47015: CALL_OW 432
47019: MINUS
47020: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47021: LD_VAR 0 4
47025: PUSH
47026: LD_VAR 0 5
47030: PPUSH
47031: LD_INT 3
47033: PPUSH
47034: CALL_OW 259
47038: PUSH
47039: LD_VAR 0 5
47043: PPUSH
47044: CALL_OW 432
47048: MINUS
47049: GREATEREQUAL
47050: IFFALSE 47068
// mech := result [ i ] ;
47052: LD_ADDR_VAR 0 5
47056: PUSH
47057: LD_VAR 0 2
47061: PUSH
47062: LD_VAR 0 3
47066: ARRAY
47067: ST_TO_ADDR
// end ;
47068: GO 46977
47070: POP
47071: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47072: LD_VAR 0 1
47076: PPUSH
47077: LD_VAR 0 5
47081: PPUSH
47082: CALL_OW 135
// end ;
47086: LD_VAR 0 2
47090: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47091: LD_INT 0
47093: PPUSH
47094: PPUSH
47095: PPUSH
47096: PPUSH
47097: PPUSH
47098: PPUSH
47099: PPUSH
47100: PPUSH
47101: PPUSH
47102: PPUSH
47103: PPUSH
47104: PPUSH
47105: PPUSH
// result := [ ] ;
47106: LD_ADDR_VAR 0 7
47110: PUSH
47111: EMPTY
47112: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47113: LD_VAR 0 1
47117: PPUSH
47118: CALL_OW 266
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: IN
47133: NOT
47134: IFFALSE 47138
// exit ;
47136: GO 48772
// if name then
47138: LD_VAR 0 3
47142: IFFALSE 47158
// SetBName ( base_dep , name ) ;
47144: LD_VAR 0 1
47148: PPUSH
47149: LD_VAR 0 3
47153: PPUSH
47154: CALL_OW 500
// base := GetBase ( base_dep ) ;
47158: LD_ADDR_VAR 0 15
47162: PUSH
47163: LD_VAR 0 1
47167: PPUSH
47168: CALL_OW 274
47172: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47173: LD_ADDR_VAR 0 16
47177: PUSH
47178: LD_VAR 0 1
47182: PPUSH
47183: CALL_OW 255
47187: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47188: LD_ADDR_VAR 0 17
47192: PUSH
47193: LD_VAR 0 1
47197: PPUSH
47198: CALL_OW 248
47202: ST_TO_ADDR
// if sources then
47203: LD_VAR 0 5
47207: IFFALSE 47254
// for i = 1 to 3 do
47209: LD_ADDR_VAR 0 8
47213: PUSH
47214: DOUBLE
47215: LD_INT 1
47217: DEC
47218: ST_TO_ADDR
47219: LD_INT 3
47221: PUSH
47222: FOR_TO
47223: IFFALSE 47252
// AddResourceType ( base , i , sources [ i ] ) ;
47225: LD_VAR 0 15
47229: PPUSH
47230: LD_VAR 0 8
47234: PPUSH
47235: LD_VAR 0 5
47239: PUSH
47240: LD_VAR 0 8
47244: ARRAY
47245: PPUSH
47246: CALL_OW 276
47250: GO 47222
47252: POP
47253: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47254: LD_ADDR_VAR 0 18
47258: PUSH
47259: LD_VAR 0 15
47263: PPUSH
47264: LD_VAR 0 2
47268: PPUSH
47269: LD_INT 1
47271: PPUSH
47272: CALL 46515 0 3
47276: ST_TO_ADDR
// InitHc ;
47277: CALL_OW 19
// InitUc ;
47281: CALL_OW 18
// uc_side := side ;
47285: LD_ADDR_OWVAR 20
47289: PUSH
47290: LD_VAR 0 16
47294: ST_TO_ADDR
// uc_nation := nation ;
47295: LD_ADDR_OWVAR 21
47299: PUSH
47300: LD_VAR 0 17
47304: ST_TO_ADDR
// if buildings then
47305: LD_VAR 0 18
47309: IFFALSE 48631
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47311: LD_ADDR_VAR 0 19
47315: PUSH
47316: LD_VAR 0 18
47320: PPUSH
47321: LD_INT 2
47323: PUSH
47324: LD_INT 30
47326: PUSH
47327: LD_INT 29
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 30
47336: PUSH
47337: LD_INT 30
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: LIST
47348: PPUSH
47349: CALL_OW 72
47353: ST_TO_ADDR
// if tmp then
47354: LD_VAR 0 19
47358: IFFALSE 47406
// for i in tmp do
47360: LD_ADDR_VAR 0 8
47364: PUSH
47365: LD_VAR 0 19
47369: PUSH
47370: FOR_IN
47371: IFFALSE 47404
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47373: LD_VAR 0 8
47377: PPUSH
47378: CALL_OW 250
47382: PPUSH
47383: LD_VAR 0 8
47387: PPUSH
47388: CALL_OW 251
47392: PPUSH
47393: LD_VAR 0 16
47397: PPUSH
47398: CALL_OW 441
47402: GO 47370
47404: POP
47405: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47406: LD_VAR 0 18
47410: PPUSH
47411: LD_INT 2
47413: PUSH
47414: LD_INT 30
47416: PUSH
47417: LD_INT 32
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 30
47426: PUSH
47427: LD_INT 33
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: LIST
47438: PPUSH
47439: CALL_OW 72
47443: IFFALSE 47531
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47445: LD_ADDR_VAR 0 8
47449: PUSH
47450: LD_VAR 0 18
47454: PPUSH
47455: LD_INT 2
47457: PUSH
47458: LD_INT 30
47460: PUSH
47461: LD_INT 32
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 30
47470: PUSH
47471: LD_INT 33
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: LIST
47482: PPUSH
47483: CALL_OW 72
47487: PUSH
47488: FOR_IN
47489: IFFALSE 47529
// begin if not GetBWeapon ( i ) then
47491: LD_VAR 0 8
47495: PPUSH
47496: CALL_OW 269
47500: NOT
47501: IFFALSE 47527
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47503: LD_VAR 0 8
47507: PPUSH
47508: LD_VAR 0 8
47512: PPUSH
47513: LD_VAR 0 2
47517: PPUSH
47518: CALL 48777 0 2
47522: PPUSH
47523: CALL_OW 431
// end ;
47527: GO 47488
47529: POP
47530: POP
// end ; for i = 1 to personel do
47531: LD_ADDR_VAR 0 8
47535: PUSH
47536: DOUBLE
47537: LD_INT 1
47539: DEC
47540: ST_TO_ADDR
47541: LD_VAR 0 6
47545: PUSH
47546: FOR_TO
47547: IFFALSE 48611
// begin if i > 4 then
47549: LD_VAR 0 8
47553: PUSH
47554: LD_INT 4
47556: GREATER
47557: IFFALSE 47561
// break ;
47559: GO 48611
// case i of 1 :
47561: LD_VAR 0 8
47565: PUSH
47566: LD_INT 1
47568: DOUBLE
47569: EQUAL
47570: IFTRUE 47574
47572: GO 47654
47574: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47575: LD_ADDR_VAR 0 12
47579: PUSH
47580: LD_VAR 0 18
47584: PPUSH
47585: LD_INT 22
47587: PUSH
47588: LD_VAR 0 16
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 58
47599: PUSH
47600: EMPTY
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: LD_INT 30
47608: PUSH
47609: LD_INT 32
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 30
47618: PUSH
47619: LD_INT 4
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 30
47628: PUSH
47629: LD_INT 5
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: LIST
47646: PPUSH
47647: CALL_OW 72
47651: ST_TO_ADDR
47652: GO 47876
47654: LD_INT 2
47656: DOUBLE
47657: EQUAL
47658: IFTRUE 47662
47660: GO 47724
47662: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47663: LD_ADDR_VAR 0 12
47667: PUSH
47668: LD_VAR 0 18
47672: PPUSH
47673: LD_INT 22
47675: PUSH
47676: LD_VAR 0 16
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: LD_INT 30
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 30
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: LIST
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PPUSH
47717: CALL_OW 72
47721: ST_TO_ADDR
47722: GO 47876
47724: LD_INT 3
47726: DOUBLE
47727: EQUAL
47728: IFTRUE 47732
47730: GO 47794
47732: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47733: LD_ADDR_VAR 0 12
47737: PUSH
47738: LD_VAR 0 18
47742: PPUSH
47743: LD_INT 22
47745: PUSH
47746: LD_VAR 0 16
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: LD_INT 30
47760: PUSH
47761: LD_INT 2
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 30
47770: PUSH
47771: LD_INT 3
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: LIST
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PPUSH
47787: CALL_OW 72
47791: ST_TO_ADDR
47792: GO 47876
47794: LD_INT 4
47796: DOUBLE
47797: EQUAL
47798: IFTRUE 47802
47800: GO 47875
47802: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47803: LD_ADDR_VAR 0 12
47807: PUSH
47808: LD_VAR 0 18
47812: PPUSH
47813: LD_INT 22
47815: PUSH
47816: LD_VAR 0 16
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 2
47827: PUSH
47828: LD_INT 30
47830: PUSH
47831: LD_INT 6
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 30
47840: PUSH
47841: LD_INT 7
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 30
47850: PUSH
47851: LD_INT 8
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PPUSH
47868: CALL_OW 72
47872: ST_TO_ADDR
47873: GO 47876
47875: POP
// if i = 1 then
47876: LD_VAR 0 8
47880: PUSH
47881: LD_INT 1
47883: EQUAL
47884: IFFALSE 47995
// begin tmp := [ ] ;
47886: LD_ADDR_VAR 0 19
47890: PUSH
47891: EMPTY
47892: ST_TO_ADDR
// for j in f do
47893: LD_ADDR_VAR 0 9
47897: PUSH
47898: LD_VAR 0 12
47902: PUSH
47903: FOR_IN
47904: IFFALSE 47977
// if GetBType ( j ) = b_bunker then
47906: LD_VAR 0 9
47910: PPUSH
47911: CALL_OW 266
47915: PUSH
47916: LD_INT 32
47918: EQUAL
47919: IFFALSE 47946
// tmp := Insert ( tmp , 1 , j ) else
47921: LD_ADDR_VAR 0 19
47925: PUSH
47926: LD_VAR 0 19
47930: PPUSH
47931: LD_INT 1
47933: PPUSH
47934: LD_VAR 0 9
47938: PPUSH
47939: CALL_OW 2
47943: ST_TO_ADDR
47944: GO 47975
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47946: LD_ADDR_VAR 0 19
47950: PUSH
47951: LD_VAR 0 19
47955: PPUSH
47956: LD_VAR 0 19
47960: PUSH
47961: LD_INT 1
47963: PLUS
47964: PPUSH
47965: LD_VAR 0 9
47969: PPUSH
47970: CALL_OW 2
47974: ST_TO_ADDR
47975: GO 47903
47977: POP
47978: POP
// if tmp then
47979: LD_VAR 0 19
47983: IFFALSE 47995
// f := tmp ;
47985: LD_ADDR_VAR 0 12
47989: PUSH
47990: LD_VAR 0 19
47994: ST_TO_ADDR
// end ; x := personel [ i ] ;
47995: LD_ADDR_VAR 0 13
47999: PUSH
48000: LD_VAR 0 6
48004: PUSH
48005: LD_VAR 0 8
48009: ARRAY
48010: ST_TO_ADDR
// if x = - 1 then
48011: LD_VAR 0 13
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: EQUAL
48020: IFFALSE 48229
// begin for j in f do
48022: LD_ADDR_VAR 0 9
48026: PUSH
48027: LD_VAR 0 12
48031: PUSH
48032: FOR_IN
48033: IFFALSE 48225
// repeat InitHc ;
48035: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48039: LD_VAR 0 9
48043: PPUSH
48044: CALL_OW 266
48048: PUSH
48049: LD_INT 5
48051: EQUAL
48052: IFFALSE 48122
// begin if UnitsInside ( j ) < 3 then
48054: LD_VAR 0 9
48058: PPUSH
48059: CALL_OW 313
48063: PUSH
48064: LD_INT 3
48066: LESS
48067: IFFALSE 48103
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48069: LD_INT 0
48071: PPUSH
48072: LD_INT 5
48074: PUSH
48075: LD_INT 8
48077: PUSH
48078: LD_INT 9
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: LIST
48085: PUSH
48086: LD_VAR 0 17
48090: ARRAY
48091: PPUSH
48092: LD_VAR 0 4
48096: PPUSH
48097: CALL_OW 380
48101: GO 48120
// PrepareHuman ( false , i , skill ) ;
48103: LD_INT 0
48105: PPUSH
48106: LD_VAR 0 8
48110: PPUSH
48111: LD_VAR 0 4
48115: PPUSH
48116: CALL_OW 380
// end else
48120: GO 48139
// PrepareHuman ( false , i , skill ) ;
48122: LD_INT 0
48124: PPUSH
48125: LD_VAR 0 8
48129: PPUSH
48130: LD_VAR 0 4
48134: PPUSH
48135: CALL_OW 380
// un := CreateHuman ;
48139: LD_ADDR_VAR 0 14
48143: PUSH
48144: CALL_OW 44
48148: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48149: LD_ADDR_VAR 0 7
48153: PUSH
48154: LD_VAR 0 7
48158: PPUSH
48159: LD_INT 1
48161: PPUSH
48162: LD_VAR 0 14
48166: PPUSH
48167: CALL_OW 2
48171: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48172: LD_VAR 0 14
48176: PPUSH
48177: LD_VAR 0 9
48181: PPUSH
48182: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48186: LD_VAR 0 9
48190: PPUSH
48191: CALL_OW 313
48195: PUSH
48196: LD_INT 6
48198: EQUAL
48199: PUSH
48200: LD_VAR 0 9
48204: PPUSH
48205: CALL_OW 266
48209: PUSH
48210: LD_INT 32
48212: PUSH
48213: LD_INT 31
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: IN
48220: OR
48221: IFFALSE 48035
48223: GO 48032
48225: POP
48226: POP
// end else
48227: GO 48609
// for j = 1 to x do
48229: LD_ADDR_VAR 0 9
48233: PUSH
48234: DOUBLE
48235: LD_INT 1
48237: DEC
48238: ST_TO_ADDR
48239: LD_VAR 0 13
48243: PUSH
48244: FOR_TO
48245: IFFALSE 48607
// begin InitHc ;
48247: CALL_OW 19
// if not f then
48251: LD_VAR 0 12
48255: NOT
48256: IFFALSE 48345
// begin PrepareHuman ( false , i , skill ) ;
48258: LD_INT 0
48260: PPUSH
48261: LD_VAR 0 8
48265: PPUSH
48266: LD_VAR 0 4
48270: PPUSH
48271: CALL_OW 380
// un := CreateHuman ;
48275: LD_ADDR_VAR 0 14
48279: PUSH
48280: CALL_OW 44
48284: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48285: LD_ADDR_VAR 0 7
48289: PUSH
48290: LD_VAR 0 7
48294: PPUSH
48295: LD_INT 1
48297: PPUSH
48298: LD_VAR 0 14
48302: PPUSH
48303: CALL_OW 2
48307: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48308: LD_VAR 0 14
48312: PPUSH
48313: LD_VAR 0 1
48317: PPUSH
48318: CALL_OW 250
48322: PPUSH
48323: LD_VAR 0 1
48327: PPUSH
48328: CALL_OW 251
48332: PPUSH
48333: LD_INT 10
48335: PPUSH
48336: LD_INT 0
48338: PPUSH
48339: CALL_OW 50
// continue ;
48343: GO 48244
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48345: LD_VAR 0 12
48349: PUSH
48350: LD_INT 1
48352: ARRAY
48353: PPUSH
48354: CALL_OW 313
48358: PUSH
48359: LD_VAR 0 12
48363: PUSH
48364: LD_INT 1
48366: ARRAY
48367: PPUSH
48368: CALL_OW 266
48372: PUSH
48373: LD_INT 32
48375: PUSH
48376: LD_INT 31
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: IN
48383: AND
48384: PUSH
48385: LD_VAR 0 12
48389: PUSH
48390: LD_INT 1
48392: ARRAY
48393: PPUSH
48394: CALL_OW 313
48398: PUSH
48399: LD_INT 6
48401: EQUAL
48402: OR
48403: IFFALSE 48423
// f := Delete ( f , 1 ) ;
48405: LD_ADDR_VAR 0 12
48409: PUSH
48410: LD_VAR 0 12
48414: PPUSH
48415: LD_INT 1
48417: PPUSH
48418: CALL_OW 3
48422: ST_TO_ADDR
// if not f then
48423: LD_VAR 0 12
48427: NOT
48428: IFFALSE 48446
// begin x := x + 2 ;
48430: LD_ADDR_VAR 0 13
48434: PUSH
48435: LD_VAR 0 13
48439: PUSH
48440: LD_INT 2
48442: PLUS
48443: ST_TO_ADDR
// continue ;
48444: GO 48244
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48446: LD_VAR 0 12
48450: PUSH
48451: LD_INT 1
48453: ARRAY
48454: PPUSH
48455: CALL_OW 266
48459: PUSH
48460: LD_INT 5
48462: EQUAL
48463: IFFALSE 48537
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48465: LD_VAR 0 12
48469: PUSH
48470: LD_INT 1
48472: ARRAY
48473: PPUSH
48474: CALL_OW 313
48478: PUSH
48479: LD_INT 3
48481: LESS
48482: IFFALSE 48518
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48484: LD_INT 0
48486: PPUSH
48487: LD_INT 5
48489: PUSH
48490: LD_INT 8
48492: PUSH
48493: LD_INT 9
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: LIST
48500: PUSH
48501: LD_VAR 0 17
48505: ARRAY
48506: PPUSH
48507: LD_VAR 0 4
48511: PPUSH
48512: CALL_OW 380
48516: GO 48535
// PrepareHuman ( false , i , skill ) ;
48518: LD_INT 0
48520: PPUSH
48521: LD_VAR 0 8
48525: PPUSH
48526: LD_VAR 0 4
48530: PPUSH
48531: CALL_OW 380
// end else
48535: GO 48554
// PrepareHuman ( false , i , skill ) ;
48537: LD_INT 0
48539: PPUSH
48540: LD_VAR 0 8
48544: PPUSH
48545: LD_VAR 0 4
48549: PPUSH
48550: CALL_OW 380
// un := CreateHuman ;
48554: LD_ADDR_VAR 0 14
48558: PUSH
48559: CALL_OW 44
48563: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48564: LD_ADDR_VAR 0 7
48568: PUSH
48569: LD_VAR 0 7
48573: PPUSH
48574: LD_INT 1
48576: PPUSH
48577: LD_VAR 0 14
48581: PPUSH
48582: CALL_OW 2
48586: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48587: LD_VAR 0 14
48591: PPUSH
48592: LD_VAR 0 12
48596: PUSH
48597: LD_INT 1
48599: ARRAY
48600: PPUSH
48601: CALL_OW 52
// end ;
48605: GO 48244
48607: POP
48608: POP
// end ;
48609: GO 47546
48611: POP
48612: POP
// result := result ^ buildings ;
48613: LD_ADDR_VAR 0 7
48617: PUSH
48618: LD_VAR 0 7
48622: PUSH
48623: LD_VAR 0 18
48627: ADD
48628: ST_TO_ADDR
// end else
48629: GO 48772
// begin for i = 1 to personel do
48631: LD_ADDR_VAR 0 8
48635: PUSH
48636: DOUBLE
48637: LD_INT 1
48639: DEC
48640: ST_TO_ADDR
48641: LD_VAR 0 6
48645: PUSH
48646: FOR_TO
48647: IFFALSE 48770
// begin if i > 4 then
48649: LD_VAR 0 8
48653: PUSH
48654: LD_INT 4
48656: GREATER
48657: IFFALSE 48661
// break ;
48659: GO 48770
// x := personel [ i ] ;
48661: LD_ADDR_VAR 0 13
48665: PUSH
48666: LD_VAR 0 6
48670: PUSH
48671: LD_VAR 0 8
48675: ARRAY
48676: ST_TO_ADDR
// if x = - 1 then
48677: LD_VAR 0 13
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: EQUAL
48686: IFFALSE 48690
// continue ;
48688: GO 48646
// PrepareHuman ( false , i , skill ) ;
48690: LD_INT 0
48692: PPUSH
48693: LD_VAR 0 8
48697: PPUSH
48698: LD_VAR 0 4
48702: PPUSH
48703: CALL_OW 380
// un := CreateHuman ;
48707: LD_ADDR_VAR 0 14
48711: PUSH
48712: CALL_OW 44
48716: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48717: LD_VAR 0 14
48721: PPUSH
48722: LD_VAR 0 1
48726: PPUSH
48727: CALL_OW 250
48731: PPUSH
48732: LD_VAR 0 1
48736: PPUSH
48737: CALL_OW 251
48741: PPUSH
48742: LD_INT 10
48744: PPUSH
48745: LD_INT 0
48747: PPUSH
48748: CALL_OW 50
// result := result ^ un ;
48752: LD_ADDR_VAR 0 7
48756: PUSH
48757: LD_VAR 0 7
48761: PUSH
48762: LD_VAR 0 14
48766: ADD
48767: ST_TO_ADDR
// end ;
48768: GO 48646
48770: POP
48771: POP
// end ; end ;
48772: LD_VAR 0 7
48776: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48777: LD_INT 0
48779: PPUSH
48780: PPUSH
48781: PPUSH
48782: PPUSH
48783: PPUSH
48784: PPUSH
48785: PPUSH
48786: PPUSH
48787: PPUSH
48788: PPUSH
48789: PPUSH
48790: PPUSH
48791: PPUSH
48792: PPUSH
48793: PPUSH
48794: PPUSH
// result := false ;
48795: LD_ADDR_VAR 0 3
48799: PUSH
48800: LD_INT 0
48802: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48803: LD_VAR 0 1
48807: NOT
48808: PUSH
48809: LD_VAR 0 1
48813: PPUSH
48814: CALL_OW 266
48818: PUSH
48819: LD_INT 32
48821: PUSH
48822: LD_INT 33
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: IN
48829: NOT
48830: OR
48831: IFFALSE 48835
// exit ;
48833: GO 49944
// nat := GetNation ( tower ) ;
48835: LD_ADDR_VAR 0 12
48839: PUSH
48840: LD_VAR 0 1
48844: PPUSH
48845: CALL_OW 248
48849: ST_TO_ADDR
// side := GetSide ( tower ) ;
48850: LD_ADDR_VAR 0 16
48854: PUSH
48855: LD_VAR 0 1
48859: PPUSH
48860: CALL_OW 255
48864: ST_TO_ADDR
// x := GetX ( tower ) ;
48865: LD_ADDR_VAR 0 10
48869: PUSH
48870: LD_VAR 0 1
48874: PPUSH
48875: CALL_OW 250
48879: ST_TO_ADDR
// y := GetY ( tower ) ;
48880: LD_ADDR_VAR 0 11
48884: PUSH
48885: LD_VAR 0 1
48889: PPUSH
48890: CALL_OW 251
48894: ST_TO_ADDR
// if not x or not y then
48895: LD_VAR 0 10
48899: NOT
48900: PUSH
48901: LD_VAR 0 11
48905: NOT
48906: OR
48907: IFFALSE 48911
// exit ;
48909: GO 49944
// weapon := 0 ;
48911: LD_ADDR_VAR 0 18
48915: PUSH
48916: LD_INT 0
48918: ST_TO_ADDR
// fac_list := [ ] ;
48919: LD_ADDR_VAR 0 17
48923: PUSH
48924: EMPTY
48925: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48926: LD_ADDR_VAR 0 6
48930: PUSH
48931: LD_VAR 0 1
48935: PPUSH
48936: CALL_OW 274
48940: PPUSH
48941: LD_VAR 0 2
48945: PPUSH
48946: LD_INT 0
48948: PPUSH
48949: CALL 46515 0 3
48953: PPUSH
48954: LD_INT 30
48956: PUSH
48957: LD_INT 3
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PPUSH
48964: CALL_OW 72
48968: ST_TO_ADDR
// if not factories then
48969: LD_VAR 0 6
48973: NOT
48974: IFFALSE 48978
// exit ;
48976: GO 49944
// for i in factories do
48978: LD_ADDR_VAR 0 8
48982: PUSH
48983: LD_VAR 0 6
48987: PUSH
48988: FOR_IN
48989: IFFALSE 49014
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48991: LD_ADDR_VAR 0 17
48995: PUSH
48996: LD_VAR 0 17
49000: PUSH
49001: LD_VAR 0 8
49005: PPUSH
49006: CALL_OW 478
49010: UNION
49011: ST_TO_ADDR
49012: GO 48988
49014: POP
49015: POP
// if not fac_list then
49016: LD_VAR 0 17
49020: NOT
49021: IFFALSE 49025
// exit ;
49023: GO 49944
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49025: LD_ADDR_VAR 0 5
49029: PUSH
49030: LD_INT 4
49032: PUSH
49033: LD_INT 5
49035: PUSH
49036: LD_INT 9
49038: PUSH
49039: LD_INT 10
49041: PUSH
49042: LD_INT 6
49044: PUSH
49045: LD_INT 7
49047: PUSH
49048: LD_INT 11
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 27
49062: PUSH
49063: LD_INT 28
49065: PUSH
49066: LD_INT 26
49068: PUSH
49069: LD_INT 30
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 43
49080: PUSH
49081: LD_INT 44
49083: PUSH
49084: LD_INT 46
49086: PUSH
49087: LD_INT 45
49089: PUSH
49090: LD_INT 47
49092: PUSH
49093: LD_INT 49
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: LIST
49108: PUSH
49109: LD_VAR 0 12
49113: ARRAY
49114: ST_TO_ADDR
// list := list isect fac_list ;
49115: LD_ADDR_VAR 0 5
49119: PUSH
49120: LD_VAR 0 5
49124: PUSH
49125: LD_VAR 0 17
49129: ISECT
49130: ST_TO_ADDR
// if not list then
49131: LD_VAR 0 5
49135: NOT
49136: IFFALSE 49140
// exit ;
49138: GO 49944
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49140: LD_VAR 0 12
49144: PUSH
49145: LD_INT 3
49147: EQUAL
49148: PUSH
49149: LD_INT 49
49151: PUSH
49152: LD_VAR 0 5
49156: IN
49157: AND
49158: PUSH
49159: LD_INT 31
49161: PPUSH
49162: LD_VAR 0 16
49166: PPUSH
49167: CALL_OW 321
49171: PUSH
49172: LD_INT 2
49174: EQUAL
49175: AND
49176: IFFALSE 49236
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49178: LD_INT 22
49180: PUSH
49181: LD_VAR 0 16
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 35
49192: PUSH
49193: LD_INT 49
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 91
49202: PUSH
49203: LD_VAR 0 1
49207: PUSH
49208: LD_INT 10
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: LIST
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: LIST
49220: PPUSH
49221: CALL_OW 69
49225: NOT
49226: IFFALSE 49236
// weapon := ru_time_lapser ;
49228: LD_ADDR_VAR 0 18
49232: PUSH
49233: LD_INT 49
49235: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49236: LD_VAR 0 12
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: IN
49251: PUSH
49252: LD_INT 11
49254: PUSH
49255: LD_VAR 0 5
49259: IN
49260: PUSH
49261: LD_INT 30
49263: PUSH
49264: LD_VAR 0 5
49268: IN
49269: OR
49270: AND
49271: PUSH
49272: LD_INT 6
49274: PPUSH
49275: LD_VAR 0 16
49279: PPUSH
49280: CALL_OW 321
49284: PUSH
49285: LD_INT 2
49287: EQUAL
49288: AND
49289: IFFALSE 49454
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49291: LD_INT 22
49293: PUSH
49294: LD_VAR 0 16
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: PUSH
49306: LD_INT 35
49308: PUSH
49309: LD_INT 11
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 35
49318: PUSH
49319: LD_INT 30
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 91
49333: PUSH
49334: LD_VAR 0 1
49338: PUSH
49339: LD_INT 18
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: LIST
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: LIST
49351: PPUSH
49352: CALL_OW 69
49356: NOT
49357: PUSH
49358: LD_INT 22
49360: PUSH
49361: LD_VAR 0 16
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: LD_INT 30
49375: PUSH
49376: LD_INT 32
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 30
49385: PUSH
49386: LD_INT 33
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 91
49400: PUSH
49401: LD_VAR 0 1
49405: PUSH
49406: LD_INT 12
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: LIST
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: LIST
49418: PUSH
49419: EMPTY
49420: LIST
49421: PPUSH
49422: CALL_OW 69
49426: PUSH
49427: LD_INT 2
49429: GREATER
49430: AND
49431: IFFALSE 49454
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49433: LD_ADDR_VAR 0 18
49437: PUSH
49438: LD_INT 11
49440: PUSH
49441: LD_INT 30
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_VAR 0 12
49452: ARRAY
49453: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49454: LD_VAR 0 18
49458: NOT
49459: PUSH
49460: LD_INT 40
49462: PPUSH
49463: LD_VAR 0 16
49467: PPUSH
49468: CALL_OW 321
49472: PUSH
49473: LD_INT 2
49475: EQUAL
49476: AND
49477: PUSH
49478: LD_INT 7
49480: PUSH
49481: LD_VAR 0 5
49485: IN
49486: PUSH
49487: LD_INT 28
49489: PUSH
49490: LD_VAR 0 5
49494: IN
49495: OR
49496: PUSH
49497: LD_INT 45
49499: PUSH
49500: LD_VAR 0 5
49504: IN
49505: OR
49506: AND
49507: IFFALSE 49761
// begin hex := GetHexInfo ( x , y ) ;
49509: LD_ADDR_VAR 0 4
49513: PUSH
49514: LD_VAR 0 10
49518: PPUSH
49519: LD_VAR 0 11
49523: PPUSH
49524: CALL_OW 546
49528: ST_TO_ADDR
// if hex [ 1 ] then
49529: LD_VAR 0 4
49533: PUSH
49534: LD_INT 1
49536: ARRAY
49537: IFFALSE 49541
// exit ;
49539: GO 49944
// height := hex [ 2 ] ;
49541: LD_ADDR_VAR 0 15
49545: PUSH
49546: LD_VAR 0 4
49550: PUSH
49551: LD_INT 2
49553: ARRAY
49554: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49555: LD_ADDR_VAR 0 14
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 2
49565: PUSH
49566: LD_INT 3
49568: PUSH
49569: LD_INT 5
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: ST_TO_ADDR
// for i in tmp do
49578: LD_ADDR_VAR 0 8
49582: PUSH
49583: LD_VAR 0 14
49587: PUSH
49588: FOR_IN
49589: IFFALSE 49759
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49591: LD_ADDR_VAR 0 9
49595: PUSH
49596: LD_VAR 0 10
49600: PPUSH
49601: LD_VAR 0 8
49605: PPUSH
49606: LD_INT 5
49608: PPUSH
49609: CALL_OW 272
49613: PUSH
49614: LD_VAR 0 11
49618: PPUSH
49619: LD_VAR 0 8
49623: PPUSH
49624: LD_INT 5
49626: PPUSH
49627: CALL_OW 273
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49636: LD_VAR 0 9
49640: PUSH
49641: LD_INT 1
49643: ARRAY
49644: PPUSH
49645: LD_VAR 0 9
49649: PUSH
49650: LD_INT 2
49652: ARRAY
49653: PPUSH
49654: CALL_OW 488
49658: IFFALSE 49757
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49660: LD_ADDR_VAR 0 4
49664: PUSH
49665: LD_VAR 0 9
49669: PUSH
49670: LD_INT 1
49672: ARRAY
49673: PPUSH
49674: LD_VAR 0 9
49678: PUSH
49679: LD_INT 2
49681: ARRAY
49682: PPUSH
49683: CALL_OW 546
49687: ST_TO_ADDR
// if hex [ 1 ] then
49688: LD_VAR 0 4
49692: PUSH
49693: LD_INT 1
49695: ARRAY
49696: IFFALSE 49700
// continue ;
49698: GO 49588
// h := hex [ 2 ] ;
49700: LD_ADDR_VAR 0 13
49704: PUSH
49705: LD_VAR 0 4
49709: PUSH
49710: LD_INT 2
49712: ARRAY
49713: ST_TO_ADDR
// if h + 7 < height then
49714: LD_VAR 0 13
49718: PUSH
49719: LD_INT 7
49721: PLUS
49722: PUSH
49723: LD_VAR 0 15
49727: LESS
49728: IFFALSE 49757
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49730: LD_ADDR_VAR 0 18
49734: PUSH
49735: LD_INT 7
49737: PUSH
49738: LD_INT 28
49740: PUSH
49741: LD_INT 45
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: LIST
49748: PUSH
49749: LD_VAR 0 12
49753: ARRAY
49754: ST_TO_ADDR
// break ;
49755: GO 49759
// end ; end ; end ;
49757: GO 49588
49759: POP
49760: POP
// end ; if not weapon then
49761: LD_VAR 0 18
49765: NOT
49766: IFFALSE 49826
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49768: LD_ADDR_VAR 0 5
49772: PUSH
49773: LD_VAR 0 5
49777: PUSH
49778: LD_INT 11
49780: PUSH
49781: LD_INT 30
49783: PUSH
49784: LD_INT 49
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: LIST
49791: DIFF
49792: ST_TO_ADDR
// if not list then
49793: LD_VAR 0 5
49797: NOT
49798: IFFALSE 49802
// exit ;
49800: GO 49944
// weapon := list [ rand ( 1 , list ) ] ;
49802: LD_ADDR_VAR 0 18
49806: PUSH
49807: LD_VAR 0 5
49811: PUSH
49812: LD_INT 1
49814: PPUSH
49815: LD_VAR 0 5
49819: PPUSH
49820: CALL_OW 12
49824: ARRAY
49825: ST_TO_ADDR
// end ; if weapon then
49826: LD_VAR 0 18
49830: IFFALSE 49944
// begin tmp := CostOfWeapon ( weapon ) ;
49832: LD_ADDR_VAR 0 14
49836: PUSH
49837: LD_VAR 0 18
49841: PPUSH
49842: CALL_OW 451
49846: ST_TO_ADDR
// j := GetBase ( tower ) ;
49847: LD_ADDR_VAR 0 9
49851: PUSH
49852: LD_VAR 0 1
49856: PPUSH
49857: CALL_OW 274
49861: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49862: LD_VAR 0 9
49866: PPUSH
49867: LD_INT 1
49869: PPUSH
49870: CALL_OW 275
49874: PUSH
49875: LD_VAR 0 14
49879: PUSH
49880: LD_INT 1
49882: ARRAY
49883: GREATEREQUAL
49884: PUSH
49885: LD_VAR 0 9
49889: PPUSH
49890: LD_INT 2
49892: PPUSH
49893: CALL_OW 275
49897: PUSH
49898: LD_VAR 0 14
49902: PUSH
49903: LD_INT 2
49905: ARRAY
49906: GREATEREQUAL
49907: AND
49908: PUSH
49909: LD_VAR 0 9
49913: PPUSH
49914: LD_INT 3
49916: PPUSH
49917: CALL_OW 275
49921: PUSH
49922: LD_VAR 0 14
49926: PUSH
49927: LD_INT 3
49929: ARRAY
49930: GREATEREQUAL
49931: AND
49932: IFFALSE 49944
// result := weapon ;
49934: LD_ADDR_VAR 0 3
49938: PUSH
49939: LD_VAR 0 18
49943: ST_TO_ADDR
// end ; end ;
49944: LD_VAR 0 3
49948: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49949: LD_INT 0
49951: PPUSH
49952: PPUSH
// result := true ;
49953: LD_ADDR_VAR 0 3
49957: PUSH
49958: LD_INT 1
49960: ST_TO_ADDR
// if array1 = array2 then
49961: LD_VAR 0 1
49965: PUSH
49966: LD_VAR 0 2
49970: EQUAL
49971: IFFALSE 50031
// begin for i = 1 to array1 do
49973: LD_ADDR_VAR 0 4
49977: PUSH
49978: DOUBLE
49979: LD_INT 1
49981: DEC
49982: ST_TO_ADDR
49983: LD_VAR 0 1
49987: PUSH
49988: FOR_TO
49989: IFFALSE 50027
// if array1 [ i ] <> array2 [ i ] then
49991: LD_VAR 0 1
49995: PUSH
49996: LD_VAR 0 4
50000: ARRAY
50001: PUSH
50002: LD_VAR 0 2
50006: PUSH
50007: LD_VAR 0 4
50011: ARRAY
50012: NONEQUAL
50013: IFFALSE 50025
// begin result := false ;
50015: LD_ADDR_VAR 0 3
50019: PUSH
50020: LD_INT 0
50022: ST_TO_ADDR
// break ;
50023: GO 50027
// end ;
50025: GO 49988
50027: POP
50028: POP
// end else
50029: GO 50039
// result := false ;
50031: LD_ADDR_VAR 0 3
50035: PUSH
50036: LD_INT 0
50038: ST_TO_ADDR
// end ;
50039: LD_VAR 0 3
50043: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50044: LD_INT 0
50046: PPUSH
50047: PPUSH
// if not array1 or not array2 then
50048: LD_VAR 0 1
50052: NOT
50053: PUSH
50054: LD_VAR 0 2
50058: NOT
50059: OR
50060: IFFALSE 50064
// exit ;
50062: GO 50128
// result := true ;
50064: LD_ADDR_VAR 0 3
50068: PUSH
50069: LD_INT 1
50071: ST_TO_ADDR
// for i = 1 to array1 do
50072: LD_ADDR_VAR 0 4
50076: PUSH
50077: DOUBLE
50078: LD_INT 1
50080: DEC
50081: ST_TO_ADDR
50082: LD_VAR 0 1
50086: PUSH
50087: FOR_TO
50088: IFFALSE 50126
// if array1 [ i ] <> array2 [ i ] then
50090: LD_VAR 0 1
50094: PUSH
50095: LD_VAR 0 4
50099: ARRAY
50100: PUSH
50101: LD_VAR 0 2
50105: PUSH
50106: LD_VAR 0 4
50110: ARRAY
50111: NONEQUAL
50112: IFFALSE 50124
// begin result := false ;
50114: LD_ADDR_VAR 0 3
50118: PUSH
50119: LD_INT 0
50121: ST_TO_ADDR
// break ;
50122: GO 50126
// end ;
50124: GO 50087
50126: POP
50127: POP
// end ;
50128: LD_VAR 0 3
50132: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50133: LD_INT 0
50135: PPUSH
50136: PPUSH
50137: PPUSH
// pom := GetBase ( fac ) ;
50138: LD_ADDR_VAR 0 5
50142: PUSH
50143: LD_VAR 0 1
50147: PPUSH
50148: CALL_OW 274
50152: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50153: LD_ADDR_VAR 0 4
50157: PUSH
50158: LD_VAR 0 2
50162: PUSH
50163: LD_INT 1
50165: ARRAY
50166: PPUSH
50167: LD_VAR 0 2
50171: PUSH
50172: LD_INT 2
50174: ARRAY
50175: PPUSH
50176: LD_VAR 0 2
50180: PUSH
50181: LD_INT 3
50183: ARRAY
50184: PPUSH
50185: LD_VAR 0 2
50189: PUSH
50190: LD_INT 4
50192: ARRAY
50193: PPUSH
50194: CALL_OW 449
50198: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50199: LD_ADDR_VAR 0 3
50203: PUSH
50204: LD_VAR 0 5
50208: PPUSH
50209: LD_INT 1
50211: PPUSH
50212: CALL_OW 275
50216: PUSH
50217: LD_VAR 0 4
50221: PUSH
50222: LD_INT 1
50224: ARRAY
50225: GREATEREQUAL
50226: PUSH
50227: LD_VAR 0 5
50231: PPUSH
50232: LD_INT 2
50234: PPUSH
50235: CALL_OW 275
50239: PUSH
50240: LD_VAR 0 4
50244: PUSH
50245: LD_INT 2
50247: ARRAY
50248: GREATEREQUAL
50249: AND
50250: PUSH
50251: LD_VAR 0 5
50255: PPUSH
50256: LD_INT 3
50258: PPUSH
50259: CALL_OW 275
50263: PUSH
50264: LD_VAR 0 4
50268: PUSH
50269: LD_INT 3
50271: ARRAY
50272: GREATEREQUAL
50273: AND
50274: ST_TO_ADDR
// end ;
50275: LD_VAR 0 3
50279: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50280: LD_INT 0
50282: PPUSH
50283: PPUSH
50284: PPUSH
50285: PPUSH
// pom := GetBase ( building ) ;
50286: LD_ADDR_VAR 0 3
50290: PUSH
50291: LD_VAR 0 1
50295: PPUSH
50296: CALL_OW 274
50300: ST_TO_ADDR
// if not pom then
50301: LD_VAR 0 3
50305: NOT
50306: IFFALSE 50310
// exit ;
50308: GO 50480
// btype := GetBType ( building ) ;
50310: LD_ADDR_VAR 0 5
50314: PUSH
50315: LD_VAR 0 1
50319: PPUSH
50320: CALL_OW 266
50324: ST_TO_ADDR
// if btype = b_armoury then
50325: LD_VAR 0 5
50329: PUSH
50330: LD_INT 4
50332: EQUAL
50333: IFFALSE 50343
// btype := b_barracks ;
50335: LD_ADDR_VAR 0 5
50339: PUSH
50340: LD_INT 5
50342: ST_TO_ADDR
// if btype = b_depot then
50343: LD_VAR 0 5
50347: PUSH
50348: LD_INT 0
50350: EQUAL
50351: IFFALSE 50361
// btype := b_warehouse ;
50353: LD_ADDR_VAR 0 5
50357: PUSH
50358: LD_INT 1
50360: ST_TO_ADDR
// if btype = b_workshop then
50361: LD_VAR 0 5
50365: PUSH
50366: LD_INT 2
50368: EQUAL
50369: IFFALSE 50379
// btype := b_factory ;
50371: LD_ADDR_VAR 0 5
50375: PUSH
50376: LD_INT 3
50378: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50379: LD_ADDR_VAR 0 4
50383: PUSH
50384: LD_VAR 0 5
50388: PPUSH
50389: LD_VAR 0 1
50393: PPUSH
50394: CALL_OW 248
50398: PPUSH
50399: CALL_OW 450
50403: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50404: LD_ADDR_VAR 0 2
50408: PUSH
50409: LD_VAR 0 3
50413: PPUSH
50414: LD_INT 1
50416: PPUSH
50417: CALL_OW 275
50421: PUSH
50422: LD_VAR 0 4
50426: PUSH
50427: LD_INT 1
50429: ARRAY
50430: GREATEREQUAL
50431: PUSH
50432: LD_VAR 0 3
50436: PPUSH
50437: LD_INT 2
50439: PPUSH
50440: CALL_OW 275
50444: PUSH
50445: LD_VAR 0 4
50449: PUSH
50450: LD_INT 2
50452: ARRAY
50453: GREATEREQUAL
50454: AND
50455: PUSH
50456: LD_VAR 0 3
50460: PPUSH
50461: LD_INT 3
50463: PPUSH
50464: CALL_OW 275
50468: PUSH
50469: LD_VAR 0 4
50473: PUSH
50474: LD_INT 3
50476: ARRAY
50477: GREATEREQUAL
50478: AND
50479: ST_TO_ADDR
// end ;
50480: LD_VAR 0 2
50484: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50485: LD_INT 0
50487: PPUSH
50488: PPUSH
50489: PPUSH
// pom := GetBase ( building ) ;
50490: LD_ADDR_VAR 0 4
50494: PUSH
50495: LD_VAR 0 1
50499: PPUSH
50500: CALL_OW 274
50504: ST_TO_ADDR
// if not pom then
50505: LD_VAR 0 4
50509: NOT
50510: IFFALSE 50514
// exit ;
50512: GO 50615
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50514: LD_ADDR_VAR 0 5
50518: PUSH
50519: LD_VAR 0 2
50523: PPUSH
50524: LD_VAR 0 1
50528: PPUSH
50529: CALL_OW 248
50533: PPUSH
50534: CALL_OW 450
50538: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50539: LD_ADDR_VAR 0 3
50543: PUSH
50544: LD_VAR 0 4
50548: PPUSH
50549: LD_INT 1
50551: PPUSH
50552: CALL_OW 275
50556: PUSH
50557: LD_VAR 0 5
50561: PUSH
50562: LD_INT 1
50564: ARRAY
50565: GREATEREQUAL
50566: PUSH
50567: LD_VAR 0 4
50571: PPUSH
50572: LD_INT 2
50574: PPUSH
50575: CALL_OW 275
50579: PUSH
50580: LD_VAR 0 5
50584: PUSH
50585: LD_INT 2
50587: ARRAY
50588: GREATEREQUAL
50589: AND
50590: PUSH
50591: LD_VAR 0 4
50595: PPUSH
50596: LD_INT 3
50598: PPUSH
50599: CALL_OW 275
50603: PUSH
50604: LD_VAR 0 5
50608: PUSH
50609: LD_INT 3
50611: ARRAY
50612: GREATEREQUAL
50613: AND
50614: ST_TO_ADDR
// end ;
50615: LD_VAR 0 3
50619: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50620: LD_INT 0
50622: PPUSH
50623: PPUSH
50624: PPUSH
50625: PPUSH
50626: PPUSH
50627: PPUSH
50628: PPUSH
50629: PPUSH
50630: PPUSH
50631: PPUSH
50632: PPUSH
// result := false ;
50633: LD_ADDR_VAR 0 8
50637: PUSH
50638: LD_INT 0
50640: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50641: LD_VAR 0 5
50645: NOT
50646: PUSH
50647: LD_VAR 0 1
50651: NOT
50652: OR
50653: PUSH
50654: LD_VAR 0 2
50658: NOT
50659: OR
50660: PUSH
50661: LD_VAR 0 3
50665: NOT
50666: OR
50667: IFFALSE 50671
// exit ;
50669: GO 51485
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50671: LD_ADDR_VAR 0 14
50675: PUSH
50676: LD_VAR 0 1
50680: PPUSH
50681: LD_VAR 0 2
50685: PPUSH
50686: LD_VAR 0 3
50690: PPUSH
50691: LD_VAR 0 4
50695: PPUSH
50696: LD_VAR 0 5
50700: PUSH
50701: LD_INT 1
50703: ARRAY
50704: PPUSH
50705: CALL_OW 248
50709: PPUSH
50710: LD_INT 0
50712: PPUSH
50713: CALL 52718 0 6
50717: ST_TO_ADDR
// if not hexes then
50718: LD_VAR 0 14
50722: NOT
50723: IFFALSE 50727
// exit ;
50725: GO 51485
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50727: LD_ADDR_VAR 0 17
50731: PUSH
50732: LD_VAR 0 5
50736: PPUSH
50737: LD_INT 22
50739: PUSH
50740: LD_VAR 0 13
50744: PPUSH
50745: CALL_OW 255
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 2
50756: PUSH
50757: LD_INT 30
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 30
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: LIST
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PPUSH
50786: CALL_OW 72
50790: ST_TO_ADDR
// for i = 1 to hexes do
50791: LD_ADDR_VAR 0 9
50795: PUSH
50796: DOUBLE
50797: LD_INT 1
50799: DEC
50800: ST_TO_ADDR
50801: LD_VAR 0 14
50805: PUSH
50806: FOR_TO
50807: IFFALSE 51483
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50809: LD_ADDR_VAR 0 13
50813: PUSH
50814: LD_VAR 0 14
50818: PUSH
50819: LD_VAR 0 9
50823: ARRAY
50824: PUSH
50825: LD_INT 1
50827: ARRAY
50828: PPUSH
50829: LD_VAR 0 14
50833: PUSH
50834: LD_VAR 0 9
50838: ARRAY
50839: PUSH
50840: LD_INT 2
50842: ARRAY
50843: PPUSH
50844: CALL_OW 428
50848: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50849: LD_VAR 0 14
50853: PUSH
50854: LD_VAR 0 9
50858: ARRAY
50859: PUSH
50860: LD_INT 1
50862: ARRAY
50863: PPUSH
50864: LD_VAR 0 14
50868: PUSH
50869: LD_VAR 0 9
50873: ARRAY
50874: PUSH
50875: LD_INT 2
50877: ARRAY
50878: PPUSH
50879: CALL_OW 351
50883: PUSH
50884: LD_VAR 0 14
50888: PUSH
50889: LD_VAR 0 9
50893: ARRAY
50894: PUSH
50895: LD_INT 1
50897: ARRAY
50898: PPUSH
50899: LD_VAR 0 14
50903: PUSH
50904: LD_VAR 0 9
50908: ARRAY
50909: PUSH
50910: LD_INT 2
50912: ARRAY
50913: PPUSH
50914: CALL_OW 488
50918: NOT
50919: OR
50920: PUSH
50921: LD_VAR 0 13
50925: PPUSH
50926: CALL_OW 247
50930: PUSH
50931: LD_INT 3
50933: EQUAL
50934: OR
50935: IFFALSE 50941
// exit ;
50937: POP
50938: POP
50939: GO 51485
// if not tmp then
50941: LD_VAR 0 13
50945: NOT
50946: IFFALSE 50950
// continue ;
50948: GO 50806
// result := true ;
50950: LD_ADDR_VAR 0 8
50954: PUSH
50955: LD_INT 1
50957: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50958: LD_VAR 0 6
50962: PUSH
50963: LD_VAR 0 13
50967: PPUSH
50968: CALL_OW 247
50972: PUSH
50973: LD_INT 2
50975: EQUAL
50976: AND
50977: PUSH
50978: LD_VAR 0 13
50982: PPUSH
50983: CALL_OW 263
50987: PUSH
50988: LD_INT 1
50990: EQUAL
50991: AND
50992: IFFALSE 51156
// begin if IsDrivenBy ( tmp ) then
50994: LD_VAR 0 13
50998: PPUSH
50999: CALL_OW 311
51003: IFFALSE 51007
// continue ;
51005: GO 50806
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51007: LD_VAR 0 6
51011: PPUSH
51012: LD_INT 3
51014: PUSH
51015: LD_INT 60
51017: PUSH
51018: EMPTY
51019: LIST
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 3
51027: PUSH
51028: LD_INT 55
51030: PUSH
51031: EMPTY
51032: LIST
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PPUSH
51042: CALL_OW 72
51046: IFFALSE 51154
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51048: LD_ADDR_VAR 0 18
51052: PUSH
51053: LD_VAR 0 6
51057: PPUSH
51058: LD_INT 3
51060: PUSH
51061: LD_INT 60
51063: PUSH
51064: EMPTY
51065: LIST
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 3
51073: PUSH
51074: LD_INT 55
51076: PUSH
51077: EMPTY
51078: LIST
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PPUSH
51088: CALL_OW 72
51092: PUSH
51093: LD_INT 1
51095: ARRAY
51096: ST_TO_ADDR
// if IsInUnit ( driver ) then
51097: LD_VAR 0 18
51101: PPUSH
51102: CALL_OW 310
51106: IFFALSE 51117
// ComExit ( driver ) ;
51108: LD_VAR 0 18
51112: PPUSH
51113: CALL 76406 0 1
// AddComEnterUnit ( driver , tmp ) ;
51117: LD_VAR 0 18
51121: PPUSH
51122: LD_VAR 0 13
51126: PPUSH
51127: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51131: LD_VAR 0 18
51135: PPUSH
51136: LD_VAR 0 7
51140: PPUSH
51141: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51145: LD_VAR 0 18
51149: PPUSH
51150: CALL_OW 181
// end ; continue ;
51154: GO 50806
// end ; if not cleaners or not tmp in cleaners then
51156: LD_VAR 0 6
51160: NOT
51161: PUSH
51162: LD_VAR 0 13
51166: PUSH
51167: LD_VAR 0 6
51171: IN
51172: NOT
51173: OR
51174: IFFALSE 51481
// begin if dep then
51176: LD_VAR 0 17
51180: IFFALSE 51316
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51182: LD_ADDR_VAR 0 16
51186: PUSH
51187: LD_VAR 0 17
51191: PUSH
51192: LD_INT 1
51194: ARRAY
51195: PPUSH
51196: CALL_OW 250
51200: PPUSH
51201: LD_VAR 0 17
51205: PUSH
51206: LD_INT 1
51208: ARRAY
51209: PPUSH
51210: CALL_OW 254
51214: PPUSH
51215: LD_INT 5
51217: PPUSH
51218: CALL_OW 272
51222: PUSH
51223: LD_VAR 0 17
51227: PUSH
51228: LD_INT 1
51230: ARRAY
51231: PPUSH
51232: CALL_OW 251
51236: PPUSH
51237: LD_VAR 0 17
51241: PUSH
51242: LD_INT 1
51244: ARRAY
51245: PPUSH
51246: CALL_OW 254
51250: PPUSH
51251: LD_INT 5
51253: PPUSH
51254: CALL_OW 273
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51263: LD_VAR 0 16
51267: PUSH
51268: LD_INT 1
51270: ARRAY
51271: PPUSH
51272: LD_VAR 0 16
51276: PUSH
51277: LD_INT 2
51279: ARRAY
51280: PPUSH
51281: CALL_OW 488
51285: IFFALSE 51316
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51287: LD_VAR 0 13
51291: PPUSH
51292: LD_VAR 0 16
51296: PUSH
51297: LD_INT 1
51299: ARRAY
51300: PPUSH
51301: LD_VAR 0 16
51305: PUSH
51306: LD_INT 2
51308: ARRAY
51309: PPUSH
51310: CALL_OW 111
// continue ;
51314: GO 50806
// end ; end ; r := GetDir ( tmp ) ;
51316: LD_ADDR_VAR 0 15
51320: PUSH
51321: LD_VAR 0 13
51325: PPUSH
51326: CALL_OW 254
51330: ST_TO_ADDR
// if r = 5 then
51331: LD_VAR 0 15
51335: PUSH
51336: LD_INT 5
51338: EQUAL
51339: IFFALSE 51349
// r := 0 ;
51341: LD_ADDR_VAR 0 15
51345: PUSH
51346: LD_INT 0
51348: ST_TO_ADDR
// for j = r to 5 do
51349: LD_ADDR_VAR 0 10
51353: PUSH
51354: DOUBLE
51355: LD_VAR 0 15
51359: DEC
51360: ST_TO_ADDR
51361: LD_INT 5
51363: PUSH
51364: FOR_TO
51365: IFFALSE 51479
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51367: LD_ADDR_VAR 0 11
51371: PUSH
51372: LD_VAR 0 13
51376: PPUSH
51377: CALL_OW 250
51381: PPUSH
51382: LD_VAR 0 10
51386: PPUSH
51387: LD_INT 2
51389: PPUSH
51390: CALL_OW 272
51394: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51395: LD_ADDR_VAR 0 12
51399: PUSH
51400: LD_VAR 0 13
51404: PPUSH
51405: CALL_OW 251
51409: PPUSH
51410: LD_VAR 0 10
51414: PPUSH
51415: LD_INT 2
51417: PPUSH
51418: CALL_OW 273
51422: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51423: LD_VAR 0 11
51427: PPUSH
51428: LD_VAR 0 12
51432: PPUSH
51433: CALL_OW 488
51437: PUSH
51438: LD_VAR 0 11
51442: PPUSH
51443: LD_VAR 0 12
51447: PPUSH
51448: CALL_OW 428
51452: NOT
51453: AND
51454: IFFALSE 51477
// begin ComMoveXY ( tmp , _x , _y ) ;
51456: LD_VAR 0 13
51460: PPUSH
51461: LD_VAR 0 11
51465: PPUSH
51466: LD_VAR 0 12
51470: PPUSH
51471: CALL_OW 111
// break ;
51475: GO 51479
// end ; end ;
51477: GO 51364
51479: POP
51480: POP
// end ; end ;
51481: GO 50806
51483: POP
51484: POP
// end ;
51485: LD_VAR 0 8
51489: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51490: LD_INT 0
51492: PPUSH
// result := true ;
51493: LD_ADDR_VAR 0 3
51497: PUSH
51498: LD_INT 1
51500: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51501: LD_VAR 0 2
51505: PUSH
51506: LD_INT 24
51508: DOUBLE
51509: EQUAL
51510: IFTRUE 51520
51512: LD_INT 33
51514: DOUBLE
51515: EQUAL
51516: IFTRUE 51520
51518: GO 51545
51520: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51521: LD_ADDR_VAR 0 3
51525: PUSH
51526: LD_INT 32
51528: PPUSH
51529: LD_VAR 0 1
51533: PPUSH
51534: CALL_OW 321
51538: PUSH
51539: LD_INT 2
51541: EQUAL
51542: ST_TO_ADDR
51543: GO 51861
51545: LD_INT 20
51547: DOUBLE
51548: EQUAL
51549: IFTRUE 51553
51551: GO 51578
51553: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51554: LD_ADDR_VAR 0 3
51558: PUSH
51559: LD_INT 6
51561: PPUSH
51562: LD_VAR 0 1
51566: PPUSH
51567: CALL_OW 321
51571: PUSH
51572: LD_INT 2
51574: EQUAL
51575: ST_TO_ADDR
51576: GO 51861
51578: LD_INT 22
51580: DOUBLE
51581: EQUAL
51582: IFTRUE 51592
51584: LD_INT 36
51586: DOUBLE
51587: EQUAL
51588: IFTRUE 51592
51590: GO 51617
51592: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51593: LD_ADDR_VAR 0 3
51597: PUSH
51598: LD_INT 15
51600: PPUSH
51601: LD_VAR 0 1
51605: PPUSH
51606: CALL_OW 321
51610: PUSH
51611: LD_INT 2
51613: EQUAL
51614: ST_TO_ADDR
51615: GO 51861
51617: LD_INT 30
51619: DOUBLE
51620: EQUAL
51621: IFTRUE 51625
51623: GO 51650
51625: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51626: LD_ADDR_VAR 0 3
51630: PUSH
51631: LD_INT 20
51633: PPUSH
51634: LD_VAR 0 1
51638: PPUSH
51639: CALL_OW 321
51643: PUSH
51644: LD_INT 2
51646: EQUAL
51647: ST_TO_ADDR
51648: GO 51861
51650: LD_INT 28
51652: DOUBLE
51653: EQUAL
51654: IFTRUE 51664
51656: LD_INT 21
51658: DOUBLE
51659: EQUAL
51660: IFTRUE 51664
51662: GO 51689
51664: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51665: LD_ADDR_VAR 0 3
51669: PUSH
51670: LD_INT 21
51672: PPUSH
51673: LD_VAR 0 1
51677: PPUSH
51678: CALL_OW 321
51682: PUSH
51683: LD_INT 2
51685: EQUAL
51686: ST_TO_ADDR
51687: GO 51861
51689: LD_INT 16
51691: DOUBLE
51692: EQUAL
51693: IFTRUE 51697
51695: GO 51722
51697: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51698: LD_ADDR_VAR 0 3
51702: PUSH
51703: LD_INT 84
51705: PPUSH
51706: LD_VAR 0 1
51710: PPUSH
51711: CALL_OW 321
51715: PUSH
51716: LD_INT 2
51718: EQUAL
51719: ST_TO_ADDR
51720: GO 51861
51722: LD_INT 19
51724: DOUBLE
51725: EQUAL
51726: IFTRUE 51736
51728: LD_INT 23
51730: DOUBLE
51731: EQUAL
51732: IFTRUE 51736
51734: GO 51761
51736: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51737: LD_ADDR_VAR 0 3
51741: PUSH
51742: LD_INT 83
51744: PPUSH
51745: LD_VAR 0 1
51749: PPUSH
51750: CALL_OW 321
51754: PUSH
51755: LD_INT 2
51757: EQUAL
51758: ST_TO_ADDR
51759: GO 51861
51761: LD_INT 17
51763: DOUBLE
51764: EQUAL
51765: IFTRUE 51769
51767: GO 51794
51769: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51770: LD_ADDR_VAR 0 3
51774: PUSH
51775: LD_INT 39
51777: PPUSH
51778: LD_VAR 0 1
51782: PPUSH
51783: CALL_OW 321
51787: PUSH
51788: LD_INT 2
51790: EQUAL
51791: ST_TO_ADDR
51792: GO 51861
51794: LD_INT 18
51796: DOUBLE
51797: EQUAL
51798: IFTRUE 51802
51800: GO 51827
51802: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51803: LD_ADDR_VAR 0 3
51807: PUSH
51808: LD_INT 40
51810: PPUSH
51811: LD_VAR 0 1
51815: PPUSH
51816: CALL_OW 321
51820: PUSH
51821: LD_INT 2
51823: EQUAL
51824: ST_TO_ADDR
51825: GO 51861
51827: LD_INT 27
51829: DOUBLE
51830: EQUAL
51831: IFTRUE 51835
51833: GO 51860
51835: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51836: LD_ADDR_VAR 0 3
51840: PUSH
51841: LD_INT 35
51843: PPUSH
51844: LD_VAR 0 1
51848: PPUSH
51849: CALL_OW 321
51853: PUSH
51854: LD_INT 2
51856: EQUAL
51857: ST_TO_ADDR
51858: GO 51861
51860: POP
// end ;
51861: LD_VAR 0 3
51865: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51866: LD_INT 0
51868: PPUSH
51869: PPUSH
51870: PPUSH
51871: PPUSH
51872: PPUSH
51873: PPUSH
51874: PPUSH
51875: PPUSH
51876: PPUSH
51877: PPUSH
51878: PPUSH
// result := false ;
51879: LD_ADDR_VAR 0 6
51883: PUSH
51884: LD_INT 0
51886: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51887: LD_VAR 0 1
51891: NOT
51892: PUSH
51893: LD_VAR 0 1
51897: PPUSH
51898: CALL_OW 266
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: IN
51913: NOT
51914: OR
51915: PUSH
51916: LD_VAR 0 2
51920: NOT
51921: OR
51922: PUSH
51923: LD_VAR 0 5
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: LD_INT 2
51936: PUSH
51937: LD_INT 3
51939: PUSH
51940: LD_INT 4
51942: PUSH
51943: LD_INT 5
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: IN
51954: NOT
51955: OR
51956: PUSH
51957: LD_VAR 0 3
51961: PPUSH
51962: LD_VAR 0 4
51966: PPUSH
51967: CALL_OW 488
51971: NOT
51972: OR
51973: IFFALSE 51977
// exit ;
51975: GO 52713
// side := GetSide ( depot ) ;
51977: LD_ADDR_VAR 0 9
51981: PUSH
51982: LD_VAR 0 1
51986: PPUSH
51987: CALL_OW 255
51991: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51992: LD_VAR 0 9
51996: PPUSH
51997: LD_VAR 0 2
52001: PPUSH
52002: CALL 51490 0 2
52006: NOT
52007: IFFALSE 52011
// exit ;
52009: GO 52713
// pom := GetBase ( depot ) ;
52011: LD_ADDR_VAR 0 10
52015: PUSH
52016: LD_VAR 0 1
52020: PPUSH
52021: CALL_OW 274
52025: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52026: LD_ADDR_VAR 0 11
52030: PUSH
52031: LD_VAR 0 2
52035: PPUSH
52036: LD_VAR 0 1
52040: PPUSH
52041: CALL_OW 248
52045: PPUSH
52046: CALL_OW 450
52050: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52051: LD_VAR 0 10
52055: PPUSH
52056: LD_INT 1
52058: PPUSH
52059: CALL_OW 275
52063: PUSH
52064: LD_VAR 0 11
52068: PUSH
52069: LD_INT 1
52071: ARRAY
52072: GREATEREQUAL
52073: PUSH
52074: LD_VAR 0 10
52078: PPUSH
52079: LD_INT 2
52081: PPUSH
52082: CALL_OW 275
52086: PUSH
52087: LD_VAR 0 11
52091: PUSH
52092: LD_INT 2
52094: ARRAY
52095: GREATEREQUAL
52096: AND
52097: PUSH
52098: LD_VAR 0 10
52102: PPUSH
52103: LD_INT 3
52105: PPUSH
52106: CALL_OW 275
52110: PUSH
52111: LD_VAR 0 11
52115: PUSH
52116: LD_INT 3
52118: ARRAY
52119: GREATEREQUAL
52120: AND
52121: NOT
52122: IFFALSE 52126
// exit ;
52124: GO 52713
// if GetBType ( depot ) = b_depot then
52126: LD_VAR 0 1
52130: PPUSH
52131: CALL_OW 266
52135: PUSH
52136: LD_INT 0
52138: EQUAL
52139: IFFALSE 52151
// dist := 28 else
52141: LD_ADDR_VAR 0 14
52145: PUSH
52146: LD_INT 28
52148: ST_TO_ADDR
52149: GO 52159
// dist := 36 ;
52151: LD_ADDR_VAR 0 14
52155: PUSH
52156: LD_INT 36
52158: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52159: LD_VAR 0 1
52163: PPUSH
52164: LD_VAR 0 3
52168: PPUSH
52169: LD_VAR 0 4
52173: PPUSH
52174: CALL_OW 297
52178: PUSH
52179: LD_VAR 0 14
52183: GREATER
52184: IFFALSE 52188
// exit ;
52186: GO 52713
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52188: LD_ADDR_VAR 0 12
52192: PUSH
52193: LD_VAR 0 2
52197: PPUSH
52198: LD_VAR 0 3
52202: PPUSH
52203: LD_VAR 0 4
52207: PPUSH
52208: LD_VAR 0 5
52212: PPUSH
52213: LD_VAR 0 1
52217: PPUSH
52218: CALL_OW 248
52222: PPUSH
52223: LD_INT 0
52225: PPUSH
52226: CALL 52718 0 6
52230: ST_TO_ADDR
// if not hexes then
52231: LD_VAR 0 12
52235: NOT
52236: IFFALSE 52240
// exit ;
52238: GO 52713
// hex := GetHexInfo ( x , y ) ;
52240: LD_ADDR_VAR 0 15
52244: PUSH
52245: LD_VAR 0 3
52249: PPUSH
52250: LD_VAR 0 4
52254: PPUSH
52255: CALL_OW 546
52259: ST_TO_ADDR
// if hex [ 1 ] then
52260: LD_VAR 0 15
52264: PUSH
52265: LD_INT 1
52267: ARRAY
52268: IFFALSE 52272
// exit ;
52270: GO 52713
// height := hex [ 2 ] ;
52272: LD_ADDR_VAR 0 13
52276: PUSH
52277: LD_VAR 0 15
52281: PUSH
52282: LD_INT 2
52284: ARRAY
52285: ST_TO_ADDR
// for i = 1 to hexes do
52286: LD_ADDR_VAR 0 7
52290: PUSH
52291: DOUBLE
52292: LD_INT 1
52294: DEC
52295: ST_TO_ADDR
52296: LD_VAR 0 12
52300: PUSH
52301: FOR_TO
52302: IFFALSE 52632
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52304: LD_VAR 0 12
52308: PUSH
52309: LD_VAR 0 7
52313: ARRAY
52314: PUSH
52315: LD_INT 1
52317: ARRAY
52318: PPUSH
52319: LD_VAR 0 12
52323: PUSH
52324: LD_VAR 0 7
52328: ARRAY
52329: PUSH
52330: LD_INT 2
52332: ARRAY
52333: PPUSH
52334: CALL_OW 488
52338: NOT
52339: PUSH
52340: LD_VAR 0 12
52344: PUSH
52345: LD_VAR 0 7
52349: ARRAY
52350: PUSH
52351: LD_INT 1
52353: ARRAY
52354: PPUSH
52355: LD_VAR 0 12
52359: PUSH
52360: LD_VAR 0 7
52364: ARRAY
52365: PUSH
52366: LD_INT 2
52368: ARRAY
52369: PPUSH
52370: CALL_OW 428
52374: PUSH
52375: LD_INT 0
52377: GREATER
52378: OR
52379: PUSH
52380: LD_VAR 0 12
52384: PUSH
52385: LD_VAR 0 7
52389: ARRAY
52390: PUSH
52391: LD_INT 1
52393: ARRAY
52394: PPUSH
52395: LD_VAR 0 12
52399: PUSH
52400: LD_VAR 0 7
52404: ARRAY
52405: PUSH
52406: LD_INT 2
52408: ARRAY
52409: PPUSH
52410: CALL_OW 351
52414: OR
52415: IFFALSE 52421
// exit ;
52417: POP
52418: POP
52419: GO 52713
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52421: LD_ADDR_VAR 0 8
52425: PUSH
52426: LD_VAR 0 12
52430: PUSH
52431: LD_VAR 0 7
52435: ARRAY
52436: PUSH
52437: LD_INT 1
52439: ARRAY
52440: PPUSH
52441: LD_VAR 0 12
52445: PUSH
52446: LD_VAR 0 7
52450: ARRAY
52451: PUSH
52452: LD_INT 2
52454: ARRAY
52455: PPUSH
52456: CALL_OW 546
52460: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52461: LD_VAR 0 8
52465: PUSH
52466: LD_INT 1
52468: ARRAY
52469: PUSH
52470: LD_VAR 0 8
52474: PUSH
52475: LD_INT 2
52477: ARRAY
52478: PUSH
52479: LD_VAR 0 13
52483: PUSH
52484: LD_INT 2
52486: PLUS
52487: GREATER
52488: OR
52489: PUSH
52490: LD_VAR 0 8
52494: PUSH
52495: LD_INT 2
52497: ARRAY
52498: PUSH
52499: LD_VAR 0 13
52503: PUSH
52504: LD_INT 2
52506: MINUS
52507: LESS
52508: OR
52509: PUSH
52510: LD_VAR 0 8
52514: PUSH
52515: LD_INT 3
52517: ARRAY
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: LD_INT 8
52524: PUSH
52525: LD_INT 9
52527: PUSH
52528: LD_INT 10
52530: PUSH
52531: LD_INT 11
52533: PUSH
52534: LD_INT 12
52536: PUSH
52537: LD_INT 13
52539: PUSH
52540: LD_INT 16
52542: PUSH
52543: LD_INT 17
52545: PUSH
52546: LD_INT 18
52548: PUSH
52549: LD_INT 19
52551: PUSH
52552: LD_INT 20
52554: PUSH
52555: LD_INT 21
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: IN
52573: NOT
52574: OR
52575: PUSH
52576: LD_VAR 0 8
52580: PUSH
52581: LD_INT 5
52583: ARRAY
52584: NOT
52585: OR
52586: PUSH
52587: LD_VAR 0 8
52591: PUSH
52592: LD_INT 6
52594: ARRAY
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: LD_INT 7
52604: PUSH
52605: LD_INT 9
52607: PUSH
52608: LD_INT 10
52610: PUSH
52611: LD_INT 11
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: IN
52622: NOT
52623: OR
52624: IFFALSE 52630
// exit ;
52626: POP
52627: POP
52628: GO 52713
// end ;
52630: GO 52301
52632: POP
52633: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52634: LD_VAR 0 9
52638: PPUSH
52639: LD_VAR 0 3
52643: PPUSH
52644: LD_VAR 0 4
52648: PPUSH
52649: LD_INT 20
52651: PPUSH
52652: CALL 44665 0 4
52656: PUSH
52657: LD_INT 4
52659: ARRAY
52660: IFFALSE 52664
// exit ;
52662: GO 52713
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52664: LD_VAR 0 2
52668: PUSH
52669: LD_INT 29
52671: PUSH
52672: LD_INT 30
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: IN
52679: PUSH
52680: LD_VAR 0 3
52684: PPUSH
52685: LD_VAR 0 4
52689: PPUSH
52690: LD_VAR 0 9
52694: PPUSH
52695: CALL_OW 440
52699: NOT
52700: AND
52701: IFFALSE 52705
// exit ;
52703: GO 52713
// result := true ;
52705: LD_ADDR_VAR 0 6
52709: PUSH
52710: LD_INT 1
52712: ST_TO_ADDR
// end ;
52713: LD_VAR 0 6
52717: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52718: LD_INT 0
52720: PPUSH
52721: PPUSH
52722: PPUSH
52723: PPUSH
52724: PPUSH
52725: PPUSH
52726: PPUSH
52727: PPUSH
52728: PPUSH
52729: PPUSH
52730: PPUSH
52731: PPUSH
52732: PPUSH
52733: PPUSH
52734: PPUSH
52735: PPUSH
52736: PPUSH
52737: PPUSH
52738: PPUSH
52739: PPUSH
52740: PPUSH
52741: PPUSH
52742: PPUSH
52743: PPUSH
52744: PPUSH
52745: PPUSH
52746: PPUSH
52747: PPUSH
52748: PPUSH
52749: PPUSH
52750: PPUSH
52751: PPUSH
52752: PPUSH
52753: PPUSH
52754: PPUSH
52755: PPUSH
52756: PPUSH
52757: PPUSH
52758: PPUSH
52759: PPUSH
52760: PPUSH
52761: PPUSH
52762: PPUSH
52763: PPUSH
52764: PPUSH
52765: PPUSH
52766: PPUSH
52767: PPUSH
52768: PPUSH
52769: PPUSH
52770: PPUSH
52771: PPUSH
52772: PPUSH
52773: PPUSH
52774: PPUSH
52775: PPUSH
52776: PPUSH
52777: PPUSH
// result = [ ] ;
52778: LD_ADDR_VAR 0 7
52782: PUSH
52783: EMPTY
52784: ST_TO_ADDR
// temp_list = [ ] ;
52785: LD_ADDR_VAR 0 9
52789: PUSH
52790: EMPTY
52791: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52792: LD_VAR 0 4
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: LD_INT 2
52805: PUSH
52806: LD_INT 3
52808: PUSH
52809: LD_INT 4
52811: PUSH
52812: LD_INT 5
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: IN
52823: NOT
52824: PUSH
52825: LD_VAR 0 1
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: IN
52840: PUSH
52841: LD_VAR 0 5
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: LD_INT 2
52851: PUSH
52852: LD_INT 3
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: LIST
52859: IN
52860: NOT
52861: AND
52862: OR
52863: IFFALSE 52867
// exit ;
52865: GO 71258
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52867: LD_VAR 0 1
52871: PUSH
52872: LD_INT 6
52874: PUSH
52875: LD_INT 7
52877: PUSH
52878: LD_INT 8
52880: PUSH
52881: LD_INT 13
52883: PUSH
52884: LD_INT 12
52886: PUSH
52887: LD_INT 15
52889: PUSH
52890: LD_INT 11
52892: PUSH
52893: LD_INT 14
52895: PUSH
52896: LD_INT 10
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: IN
52910: IFFALSE 52920
// btype = b_lab ;
52912: LD_ADDR_VAR 0 1
52916: PUSH
52917: LD_INT 6
52919: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52920: LD_VAR 0 6
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 2
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: LIST
52938: IN
52939: NOT
52940: PUSH
52941: LD_VAR 0 1
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: LD_INT 2
52954: PUSH
52955: LD_INT 3
52957: PUSH
52958: LD_INT 6
52960: PUSH
52961: LD_INT 36
52963: PUSH
52964: LD_INT 4
52966: PUSH
52967: LD_INT 5
52969: PUSH
52970: LD_INT 31
52972: PUSH
52973: LD_INT 32
52975: PUSH
52976: LD_INT 33
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: IN
52992: NOT
52993: PUSH
52994: LD_VAR 0 6
52998: PUSH
52999: LD_INT 1
53001: EQUAL
53002: AND
53003: OR
53004: PUSH
53005: LD_VAR 0 1
53009: PUSH
53010: LD_INT 2
53012: PUSH
53013: LD_INT 3
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: IN
53020: NOT
53021: PUSH
53022: LD_VAR 0 6
53026: PUSH
53027: LD_INT 2
53029: EQUAL
53030: AND
53031: OR
53032: IFFALSE 53042
// mode = 0 ;
53034: LD_ADDR_VAR 0 6
53038: PUSH
53039: LD_INT 0
53041: ST_TO_ADDR
// case mode of 0 :
53042: LD_VAR 0 6
53046: PUSH
53047: LD_INT 0
53049: DOUBLE
53050: EQUAL
53051: IFTRUE 53055
53053: GO 64508
53055: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53056: LD_ADDR_VAR 0 11
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: LD_INT 1
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: LD_INT 2
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: LD_INT 3
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: LD_INT 3
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: NEG
53223: PUSH
53224: LD_INT 2
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53249: LD_ADDR_VAR 0 12
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 2
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 2
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 2
53395: NEG
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 3
53406: NEG
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 3
53417: NEG
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53445: LD_ADDR_VAR 0 13
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: LD_INT 2
53530: NEG
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 2
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 2
53548: PUSH
53549: LD_INT 2
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: LD_INT 2
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 2
53568: NEG
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 2
53580: NEG
53581: PUSH
53582: LD_INT 2
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 2
53592: NEG
53593: PUSH
53594: LD_INT 3
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 3
53604: NEG
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 3
53616: NEG
53617: PUSH
53618: LD_INT 3
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53644: LD_ADDR_VAR 0 14
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: LD_INT 2
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: LD_INT 2
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: LD_INT 2
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: LD_INT 2
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: LD_INT 3
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: LD_INT 3
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53840: LD_ADDR_VAR 0 15
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 2
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 2
53963: NEG
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 2
53974: NEG
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 3
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 3
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54033: LD_ADDR_VAR 0 16
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 1
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: NEG
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: LD_INT 2
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 2
54136: PUSH
54137: LD_INT 2
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 2
54156: NEG
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 2
54168: NEG
54169: PUSH
54170: LD_INT 2
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 3
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 3
54190: PUSH
54191: LD_INT 3
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 2
54200: PUSH
54201: LD_INT 3
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54226: LD_ADDR_VAR 0 17
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 1
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: LD_INT 2
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: LD_INT 2
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 2
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: LD_INT 1
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: LD_INT 2
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: LD_INT 2
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: LD_INT 2
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 2
54402: NEG
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 2
54413: NEG
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 2
54425: NEG
54426: PUSH
54427: LD_INT 2
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54456: LD_ADDR_VAR 0 18
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: LD_INT 2
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 2
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 1
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 2
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 2
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 2
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: LD_INT 2
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 2
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 2
54632: NEG
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 2
54643: NEG
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: LD_INT 2
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54686: LD_ADDR_VAR 0 19
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 2
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: LD_INT 2
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 2
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: LD_INT 2
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 2
54862: NEG
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 2
54885: NEG
54886: PUSH
54887: LD_INT 2
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54916: LD_ADDR_VAR 0 20
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: LD_INT 2
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: LD_INT 2
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: LD_INT 2
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 2
55092: NEG
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55146: LD_ADDR_VAR 0 21
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 0
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: LD_INT 1
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: NEG
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: LD_INT 2
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 2
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 2
55271: PUSH
55272: LD_INT 1
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: LD_INT 2
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: LD_INT 2
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: LD_INT 2
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 2
55322: NEG
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 2
55333: NEG
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 2
55345: NEG
55346: PUSH
55347: LD_INT 2
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55376: LD_ADDR_VAR 0 22
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: LD_INT 2
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: LD_INT 2
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: LD_INT 1
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 2
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 2
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: LD_INT 2
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 2
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 2
55552: NEG
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: NEG
55576: PUSH
55577: LD_INT 2
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55606: LD_ADDR_VAR 0 23
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 1
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: LD_INT 1
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: LD_INT 2
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: LD_INT 2
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: LD_INT 2
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 2
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: NEG
55806: PUSH
55807: LD_INT 2
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 2
55817: NEG
55818: PUSH
55819: LD_INT 3
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: LD_INT 3
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 2
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55886: LD_ADDR_VAR 0 24
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: LD_INT 2
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 2
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 2
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 2
56021: PUSH
56022: LD_INT 2
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: LD_INT 2
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: LD_INT 2
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 2
56085: NEG
56086: PUSH
56087: LD_INT 2
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 2
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 3
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 3
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56162: LD_ADDR_VAR 0 25
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: LD_INT 1
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: LD_INT 2
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: LD_INT 2
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 2
56297: PUSH
56298: LD_INT 2
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: LD_INT 2
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 2
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 2
56338: NEG
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 2
56349: NEG
56350: PUSH
56351: LD_INT 1
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 2
56361: NEG
56362: PUSH
56363: LD_INT 2
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 3
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 3
56383: PUSH
56384: LD_INT 2
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: LD_INT 3
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: LD_INT 3
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56436: LD_ADDR_VAR 0 26
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: LD_INT 1
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 1
56494: NEG
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: LD_INT 2
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: LD_INT 2
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 2
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 2
56571: PUSH
56572: LD_INT 2
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: LD_INT 2
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: LD_INT 1
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 2
56635: NEG
56636: PUSH
56637: LD_INT 2
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 2
56647: PUSH
56648: LD_INT 3
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: LD_INT 3
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 2
56678: NEG
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56712: LD_ADDR_VAR 0 27
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: NEG
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: LD_INT 2
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: LD_INT 2
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: LD_INT 1
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 2
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 2
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 2
56847: PUSH
56848: LD_INT 2
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 1
56857: PUSH
56858: LD_INT 2
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: LD_INT 2
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: LD_INT 1
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 2
56899: NEG
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: LD_INT 2
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: LD_INT 2
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 2
56934: NEG
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 3
56945: NEG
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 3
56957: NEG
56958: PUSH
56959: LD_INT 2
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56992: LD_ADDR_VAR 0 28
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: NEG
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: LD_INT 2
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: LD_INT 2
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: LD_INT 1
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: LD_INT 2
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: LD_INT 2
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 2
57168: NEG
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 2
57179: NEG
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 2
57191: NEG
57192: PUSH
57193: LD_INT 2
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: LD_INT 3
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: LD_INT 3
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 3
57227: NEG
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 3
57239: NEG
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57274: LD_ADDR_VAR 0 29
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 0
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: LD_INT 1
57347: NEG
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: LD_INT 2
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: LD_INT 2
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 2
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 2
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: LD_INT 2
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: LD_INT 2
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 1
57429: NEG
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: NEG
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 2
57452: NEG
57453: PUSH
57454: LD_INT 2
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 2
57464: NEG
57465: PUSH
57466: LD_INT 3
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 2
57476: PUSH
57477: LD_INT 1
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 3
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: LD_INT 3
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: LD_INT 2
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 3
57518: NEG
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57553: LD_ADDR_VAR 0 30
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: PUSH
57592: LD_INT 1
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: LD_INT 1
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 1
57634: NEG
57635: PUSH
57636: LD_INT 2
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: LD_INT 2
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 2
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 2
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 2
57688: PUSH
57689: LD_INT 2
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: LD_INT 2
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 2
57719: NEG
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: LD_INT 3
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: PUSH
57755: LD_INT 2
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 3
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: LD_INT 3
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 2
57785: NEG
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 3
57796: NEG
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57831: LD_ADDR_VAR 0 31
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: LD_INT 1
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: LD_INT 1
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: LD_INT 2
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 2
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 2
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 2
57955: PUSH
57956: LD_INT 2
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: PUSH
57966: LD_INT 2
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: LD_INT 2
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 2
57996: NEG
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: LD_INT 2
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 2
58020: NEG
58021: PUSH
58022: LD_INT 3
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 2
58032: PUSH
58033: LD_INT 1
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 3
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: LD_INT 3
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: LD_INT 2
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 3
58074: NEG
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58109: LD_ADDR_VAR 0 32
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: LD_INT 1
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: NEG
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 2
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: LD_INT 1
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 2
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 2
58234: PUSH
58235: LD_INT 2
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: LD_INT 2
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: LD_INT 2
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: NEG
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 2
58286: NEG
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: LD_INT 3
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: PUSH
58311: LD_INT 2
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 3
58321: PUSH
58322: LD_INT 2
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 2
58331: PUSH
58332: LD_INT 3
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 3
58352: NEG
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58387: LD_ADDR_VAR 0 33
58391: PUSH
58392: LD_INT 0
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: LD_INT 1
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 1
58456: NEG
58457: PUSH
58458: LD_INT 1
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: NEG
58469: PUSH
58470: LD_INT 2
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: PUSH
58512: LD_INT 2
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: LD_INT 2
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 1
58531: NEG
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 2
58542: NEG
58543: PUSH
58544: LD_INT 0
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 2
58553: NEG
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 2
58565: NEG
58566: PUSH
58567: LD_INT 2
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 2
58577: NEG
58578: PUSH
58579: LD_INT 3
58581: NEG
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 2
58589: PUSH
58590: LD_INT 1
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 3
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: LD_INT 3
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: LD_INT 2
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 3
58631: NEG
58632: PUSH
58633: LD_INT 2
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58666: LD_ADDR_VAR 0 34
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: LD_INT 2
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 2
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 2
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: LD_INT 1
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: LD_INT 0
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 2
58833: NEG
58834: PUSH
58835: LD_INT 1
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 2
58845: NEG
58846: PUSH
58847: LD_INT 2
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: LD_INT 3
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: LD_INT 2
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 3
58880: PUSH
58881: LD_INT 2
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 2
58890: PUSH
58891: LD_INT 3
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 2
58900: NEG
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 3
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58946: LD_ADDR_VAR 0 35
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: LD_INT 1
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: LD_INT 1
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: LD_INT 1
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 2
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 2
59037: NEG
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59058: LD_ADDR_VAR 0 36
59062: PUSH
59063: LD_INT 0
59065: PUSH
59066: LD_INT 0
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 0
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 1
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 1
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 0
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 1
59127: NEG
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: LD_INT 2
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: PUSH
59152: LD_INT 2
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59170: LD_ADDR_VAR 0 37
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: LD_INT 0
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 0
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 1
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 1
59208: PUSH
59209: LD_INT 1
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 0
59218: PUSH
59219: LD_INT 1
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 1
59239: NEG
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59282: LD_ADDR_VAR 0 38
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: LD_INT 1
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: LD_INT 1
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 2
59363: PUSH
59364: LD_INT 1
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 2
59373: NEG
59374: PUSH
59375: LD_INT 1
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59394: LD_ADDR_VAR 0 39
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: NEG
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: LD_INT 2
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: LD_INT 2
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59506: LD_ADDR_VAR 0 40
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: LD_INT 0
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: PUSH
59535: LD_INT 0
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: LD_INT 1
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: NEG
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: LD_INT 1
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: LD_INT 1
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59618: LD_ADDR_VAR 0 41
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: LD_INT 1
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 1
59656: PUSH
59657: LD_INT 1
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: LD_INT 2
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: LD_INT 1
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 2
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 2
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 2
59742: PUSH
59743: LD_INT 2
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: LD_INT 2
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 1
59762: NEG
59763: PUSH
59764: LD_INT 1
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 2
59773: NEG
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 2
59784: NEG
59785: PUSH
59786: LD_INT 1
59788: NEG
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 2
59796: NEG
59797: PUSH
59798: LD_INT 2
59800: NEG
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 2
59808: NEG
59809: PUSH
59810: LD_INT 3
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 2
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 3
59831: PUSH
59832: LD_INT 0
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 3
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 3
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 3
59861: PUSH
59862: LD_INT 3
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 2
59871: PUSH
59872: LD_INT 3
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 2
59881: NEG
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 3
59892: NEG
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 3
59903: NEG
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 3
59915: NEG
59916: PUSH
59917: LD_INT 2
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 3
59927: NEG
59928: PUSH
59929: LD_INT 3
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59968: LD_ADDR_VAR 0 42
59972: PUSH
59973: LD_INT 0
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: LD_INT 1
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 1
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 1
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: NEG
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 1
60037: NEG
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 1
60049: NEG
60050: PUSH
60051: LD_INT 2
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: LD_INT 2
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 1
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 2
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 2
60093: PUSH
60094: LD_INT 2
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 1
60103: PUSH
60104: LD_INT 2
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: LD_INT 2
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: NEG
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: NEG
60135: PUSH
60136: LD_INT 1
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 2
60146: NEG
60147: PUSH
60148: LD_INT 2
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 2
60158: NEG
60159: PUSH
60160: LD_INT 3
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: LD_INT 3
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: LD_INT 3
60185: NEG
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 1
60193: PUSH
60194: LD_INT 2
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 3
60204: PUSH
60205: LD_INT 2
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 3
60214: PUSH
60215: LD_INT 3
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 2
60224: PUSH
60225: LD_INT 3
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: LD_INT 3
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: LD_INT 3
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: LD_INT 2
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 3
60265: NEG
60266: PUSH
60267: LD_INT 2
60269: NEG
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 3
60277: NEG
60278: PUSH
60279: LD_INT 3
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60318: LD_ADDR_VAR 0 43
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: LD_INT 1
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: PUSH
60347: LD_INT 0
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 1
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 0
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 1
60376: NEG
60377: PUSH
60378: LD_INT 0
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 1
60387: NEG
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: PUSH
60401: LD_INT 2
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: LD_INT 2
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 2
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 2
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 1
60453: PUSH
60454: LD_INT 2
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 0
60463: PUSH
60464: LD_INT 2
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 1
60473: NEG
60474: PUSH
60475: LD_INT 1
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 2
60484: NEG
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 2
60495: NEG
60496: PUSH
60497: LD_INT 1
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 1
60507: NEG
60508: PUSH
60509: LD_INT 3
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 0
60519: PUSH
60520: LD_INT 3
60522: NEG
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 1
60530: PUSH
60531: LD_INT 2
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 2
60541: PUSH
60542: LD_INT 1
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 3
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 3
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: PUSH
60573: LD_INT 3
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: LD_INT 3
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: LD_INT 2
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 2
60603: NEG
60604: PUSH
60605: LD_INT 1
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 3
60614: NEG
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 3
60625: NEG
60626: PUSH
60627: LD_INT 1
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60666: LD_ADDR_VAR 0 44
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: LD_INT 1
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 1
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: NEG
60748: PUSH
60749: LD_INT 2
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: LD_INT 1
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 2
60770: PUSH
60771: LD_INT 0
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 2
60780: PUSH
60781: LD_INT 1
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 2
60790: PUSH
60791: LD_INT 2
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 1
60800: PUSH
60801: LD_INT 2
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 2
60821: NEG
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 2
60832: NEG
60833: PUSH
60834: LD_INT 1
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 2
60844: NEG
60845: PUSH
60846: LD_INT 2
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: LD_INT 3
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 2
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 3
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 3
60889: PUSH
60890: LD_INT 1
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 3
60899: PUSH
60900: LD_INT 2
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 3
60909: PUSH
60910: LD_INT 3
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 2
60919: PUSH
60920: LD_INT 3
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 2
60929: NEG
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 3
60940: NEG
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 3
60951: NEG
60952: PUSH
60953: LD_INT 1
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 3
60963: NEG
60964: PUSH
60965: LD_INT 2
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 3
60975: NEG
60976: PUSH
60977: LD_INT 3
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61016: LD_ADDR_VAR 0 45
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 0
61033: PUSH
61034: LD_INT 1
61036: NEG
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 1
61085: NEG
61086: PUSH
61087: LD_INT 1
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: LD_INT 2
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: LD_INT 2
61112: NEG
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 1
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 2
61131: PUSH
61132: LD_INT 1
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 2
61141: PUSH
61142: LD_INT 2
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 1
61151: PUSH
61152: LD_INT 2
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 0
61161: PUSH
61162: LD_INT 2
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: NEG
61172: PUSH
61173: LD_INT 1
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 2
61182: NEG
61183: PUSH
61184: LD_INT 1
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 2
61194: NEG
61195: PUSH
61196: LD_INT 2
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 2
61206: NEG
61207: PUSH
61208: LD_INT 3
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 1
61218: NEG
61219: PUSH
61220: LD_INT 3
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: LD_INT 3
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 1
61241: PUSH
61242: LD_INT 2
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 3
61252: PUSH
61253: LD_INT 2
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 3
61262: PUSH
61263: LD_INT 3
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 2
61272: PUSH
61273: LD_INT 3
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 1
61282: PUSH
61283: LD_INT 3
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: LD_INT 3
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 1
61302: NEG
61303: PUSH
61304: LD_INT 2
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 3
61313: NEG
61314: PUSH
61315: LD_INT 2
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 3
61325: NEG
61326: PUSH
61327: LD_INT 3
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61366: LD_ADDR_VAR 0 46
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: LD_INT 1
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 1
61394: PUSH
61395: LD_INT 0
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 1
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 0
61414: PUSH
61415: LD_INT 1
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 1
61424: NEG
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: LD_INT 1
61439: NEG
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 1
61447: NEG
61448: PUSH
61449: LD_INT 2
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 0
61459: PUSH
61460: LD_INT 2
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 1
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 2
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 2
61491: PUSH
61492: LD_INT 1
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 1
61501: PUSH
61502: LD_INT 2
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: LD_INT 2
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 2
61532: NEG
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 2
61543: NEG
61544: PUSH
61545: LD_INT 1
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 1
61555: NEG
61556: PUSH
61557: LD_INT 3
61559: NEG
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: LD_INT 3
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 2
61589: PUSH
61590: LD_INT 1
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 3
61600: PUSH
61601: LD_INT 0
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 3
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: PUSH
61621: LD_INT 3
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: LD_INT 3
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 1
61640: NEG
61641: PUSH
61642: LD_INT 2
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 2
61651: NEG
61652: PUSH
61653: LD_INT 1
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 3
61662: NEG
61663: PUSH
61664: LD_INT 0
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 3
61673: NEG
61674: PUSH
61675: LD_INT 1
61677: NEG
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61714: LD_ADDR_VAR 0 47
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: LD_INT 0
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 0
61731: PUSH
61732: LD_INT 1
61734: NEG
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 1
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 1
61752: PUSH
61753: LD_INT 1
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: LD_INT 1
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 1
61783: NEG
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 1
61795: NEG
61796: PUSH
61797: LD_INT 2
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: LD_INT 2
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 2
61829: NEG
61830: PUSH
61831: LD_INT 1
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 2
61841: NEG
61842: PUSH
61843: LD_INT 2
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61865: LD_ADDR_VAR 0 48
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: LD_INT 0
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: LD_INT 1
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 1
61903: PUSH
61904: LD_INT 1
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 0
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 1
61923: NEG
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: NEG
61947: PUSH
61948: LD_INT 2
61950: NEG
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 0
61958: PUSH
61959: LD_INT 2
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: LD_INT 1
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 2
61980: PUSH
61981: LD_INT 0
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 2
61990: PUSH
61991: LD_INT 1
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62012: LD_ADDR_VAR 0 49
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: LD_INT 0
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 0
62029: PUSH
62030: LD_INT 1
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: LD_INT 0
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: LD_INT 1
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: LD_INT 1
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 1
62070: NEG
62071: PUSH
62072: LD_INT 0
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 1
62081: NEG
62082: PUSH
62083: LD_INT 1
62085: NEG
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 1
62093: PUSH
62094: LD_INT 1
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 2
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 2
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 2
62124: PUSH
62125: LD_INT 2
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 1
62134: PUSH
62135: LD_INT 2
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62156: LD_ADDR_VAR 0 50
62160: PUSH
62161: LD_INT 0
62163: PUSH
62164: LD_INT 0
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: LD_INT 1
62176: NEG
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 1
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 1
62194: PUSH
62195: LD_INT 1
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 0
62204: PUSH
62205: LD_INT 1
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 1
62214: NEG
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: LD_INT 1
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 2
62237: PUSH
62238: LD_INT 1
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 2
62247: PUSH
62248: LD_INT 2
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: LD_INT 2
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: LD_INT 2
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 1
62277: NEG
62278: PUSH
62279: LD_INT 1
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62300: LD_ADDR_VAR 0 51
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: LD_INT 0
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 0
62317: PUSH
62318: LD_INT 1
62320: NEG
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 1
62328: PUSH
62329: LD_INT 0
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 1
62338: PUSH
62339: LD_INT 1
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 0
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 1
62358: NEG
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 1
62369: NEG
62370: PUSH
62371: LD_INT 1
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: LD_INT 2
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: LD_INT 2
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 1
62401: NEG
62402: PUSH
62403: LD_INT 1
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 2
62412: NEG
62413: PUSH
62414: LD_INT 0
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 2
62423: NEG
62424: PUSH
62425: LD_INT 1
62427: NEG
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62447: LD_ADDR_VAR 0 52
62451: PUSH
62452: LD_INT 0
62454: PUSH
62455: LD_INT 0
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 0
62464: PUSH
62465: LD_INT 1
62467: NEG
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 1
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 1
62485: PUSH
62486: LD_INT 1
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: LD_INT 1
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: LD_INT 0
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 1
62516: NEG
62517: PUSH
62518: LD_INT 1
62520: NEG
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: NEG
62529: PUSH
62530: LD_INT 2
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: LD_INT 1
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 2
62551: NEG
62552: PUSH
62553: LD_INT 0
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 2
62562: NEG
62563: PUSH
62564: LD_INT 1
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 2
62574: NEG
62575: PUSH
62576: LD_INT 2
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62598: LD_ADDR_VAR 0 53
62602: PUSH
62603: LD_INT 0
62605: PUSH
62606: LD_INT 0
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 0
62615: PUSH
62616: LD_INT 1
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 1
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 1
62636: PUSH
62637: LD_INT 1
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 0
62646: PUSH
62647: LD_INT 1
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 1
62656: NEG
62657: PUSH
62658: LD_INT 0
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: LD_INT 1
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 1
62679: NEG
62680: PUSH
62681: LD_INT 2
62683: NEG
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 0
62691: PUSH
62692: LD_INT 2
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 1
62702: PUSH
62703: LD_INT 1
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 2
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 2
62723: PUSH
62724: LD_INT 1
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 2
62733: PUSH
62734: LD_INT 2
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 1
62743: PUSH
62744: LD_INT 2
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 0
62753: PUSH
62754: LD_INT 2
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 1
62763: NEG
62764: PUSH
62765: LD_INT 1
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 2
62774: NEG
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 2
62785: NEG
62786: PUSH
62787: LD_INT 1
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 2
62797: NEG
62798: PUSH
62799: LD_INT 2
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62828: LD_ADDR_VAR 0 54
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: LD_INT 0
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 0
62845: PUSH
62846: LD_INT 1
62848: NEG
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: PUSH
62857: LD_INT 0
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 1
62866: PUSH
62867: LD_INT 1
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 0
62876: PUSH
62877: LD_INT 1
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 1
62886: NEG
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 1
62897: NEG
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 1
62909: NEG
62910: PUSH
62911: LD_INT 2
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: LD_INT 2
62924: NEG
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 1
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 2
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 2
62953: PUSH
62954: LD_INT 1
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 2
62963: PUSH
62964: LD_INT 2
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 1
62973: PUSH
62974: LD_INT 2
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: LD_INT 2
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 2
63004: NEG
63005: PUSH
63006: LD_INT 0
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 2
63015: NEG
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 2
63027: NEG
63028: PUSH
63029: LD_INT 2
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63058: LD_ADDR_VAR 0 55
63062: PUSH
63063: LD_INT 0
63065: PUSH
63066: LD_INT 0
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: LD_INT 1
63078: NEG
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 1
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 1
63096: PUSH
63097: LD_INT 1
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 0
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 1
63116: NEG
63117: PUSH
63118: LD_INT 0
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 1
63127: NEG
63128: PUSH
63129: LD_INT 1
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 1
63139: NEG
63140: PUSH
63141: LD_INT 2
63143: NEG
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 0
63151: PUSH
63152: LD_INT 2
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 1
63162: PUSH
63163: LD_INT 1
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 2
63173: PUSH
63174: LD_INT 0
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: LD_INT 1
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 2
63193: PUSH
63194: LD_INT 2
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: LD_INT 2
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: LD_INT 2
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: LD_INT 1
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 2
63234: NEG
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 2
63245: NEG
63246: PUSH
63247: LD_INT 1
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 2
63257: NEG
63258: PUSH
63259: LD_INT 2
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63288: LD_ADDR_VAR 0 56
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: LD_INT 1
63308: NEG
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 1
63316: PUSH
63317: LD_INT 0
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: LD_INT 1
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 0
63336: PUSH
63337: LD_INT 1
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 1
63346: NEG
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 1
63357: NEG
63358: PUSH
63359: LD_INT 1
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 1
63369: NEG
63370: PUSH
63371: LD_INT 2
63373: NEG
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: LD_INT 2
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 1
63392: PUSH
63393: LD_INT 1
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 2
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 2
63413: PUSH
63414: LD_INT 1
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 2
63423: PUSH
63424: LD_INT 2
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 1
63433: PUSH
63434: LD_INT 2
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: LD_INT 2
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: LD_INT 1
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 2
63464: NEG
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 2
63475: NEG
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 2
63487: NEG
63488: PUSH
63489: LD_INT 2
63491: NEG
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63518: LD_ADDR_VAR 0 57
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 0
63535: PUSH
63536: LD_INT 1
63538: NEG
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 1
63546: PUSH
63547: LD_INT 0
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 1
63556: PUSH
63557: LD_INT 1
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 1
63576: NEG
63577: PUSH
63578: LD_INT 0
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 1
63587: NEG
63588: PUSH
63589: LD_INT 1
63591: NEG
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 1
63599: NEG
63600: PUSH
63601: LD_INT 2
63603: NEG
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: LD_INT 2
63614: NEG
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: LD_INT 1
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 2
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 2
63643: PUSH
63644: LD_INT 1
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 2
63653: PUSH
63654: LD_INT 2
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: LD_INT 2
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: LD_INT 2
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: LD_INT 1
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 2
63694: NEG
63695: PUSH
63696: LD_INT 0
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 2
63705: NEG
63706: PUSH
63707: LD_INT 1
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 2
63717: NEG
63718: PUSH
63719: LD_INT 2
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63748: LD_ADDR_VAR 0 58
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: LD_INT 1
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 1
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 1
63786: PUSH
63787: LD_INT 1
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: LD_INT 1
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 1
63806: NEG
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 1
63817: NEG
63818: PUSH
63819: LD_INT 1
63821: NEG
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 1
63829: NEG
63830: PUSH
63831: LD_INT 2
63833: NEG
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 0
63841: PUSH
63842: LD_INT 2
63844: NEG
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 1
63852: PUSH
63853: LD_INT 1
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 2
63863: PUSH
63864: LD_INT 0
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 2
63873: PUSH
63874: LD_INT 1
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 2
63883: PUSH
63884: LD_INT 2
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 1
63893: PUSH
63894: LD_INT 2
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 0
63903: PUSH
63904: LD_INT 2
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 1
63913: NEG
63914: PUSH
63915: LD_INT 1
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 2
63924: NEG
63925: PUSH
63926: LD_INT 0
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 2
63935: NEG
63936: PUSH
63937: LD_INT 1
63939: NEG
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 2
63947: NEG
63948: PUSH
63949: LD_INT 2
63951: NEG
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63978: LD_ADDR_VAR 0 59
63982: PUSH
63983: LD_INT 0
63985: PUSH
63986: LD_INT 0
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 0
63995: PUSH
63996: LD_INT 1
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 1
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 1
64016: PUSH
64017: LD_INT 1
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 0
64026: PUSH
64027: LD_INT 1
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 1
64036: NEG
64037: PUSH
64038: LD_INT 0
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 1
64047: NEG
64048: PUSH
64049: LD_INT 1
64051: NEG
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64066: LD_ADDR_VAR 0 60
64070: PUSH
64071: LD_INT 0
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 0
64083: PUSH
64084: LD_INT 1
64086: NEG
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 1
64094: PUSH
64095: LD_INT 0
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 1
64104: PUSH
64105: LD_INT 1
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 0
64114: PUSH
64115: LD_INT 1
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 1
64124: NEG
64125: PUSH
64126: LD_INT 0
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 1
64135: NEG
64136: PUSH
64137: LD_INT 1
64139: NEG
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64154: LD_ADDR_VAR 0 61
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: LD_INT 0
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 0
64171: PUSH
64172: LD_INT 1
64174: NEG
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 1
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 1
64192: PUSH
64193: LD_INT 1
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 0
64202: PUSH
64203: LD_INT 1
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 1
64212: NEG
64213: PUSH
64214: LD_INT 0
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 1
64223: NEG
64224: PUSH
64225: LD_INT 1
64227: NEG
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64242: LD_ADDR_VAR 0 62
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: LD_INT 1
64262: NEG
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: PUSH
64271: LD_INT 0
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 1
64280: PUSH
64281: LD_INT 1
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 0
64290: PUSH
64291: LD_INT 1
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 1
64300: NEG
64301: PUSH
64302: LD_INT 0
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 1
64311: NEG
64312: PUSH
64313: LD_INT 1
64315: NEG
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64330: LD_ADDR_VAR 0 63
64334: PUSH
64335: LD_INT 0
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 0
64347: PUSH
64348: LD_INT 1
64350: NEG
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 1
64358: PUSH
64359: LD_INT 0
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 1
64368: PUSH
64369: LD_INT 1
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 0
64378: PUSH
64379: LD_INT 1
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 1
64388: NEG
64389: PUSH
64390: LD_INT 0
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 1
64399: NEG
64400: PUSH
64401: LD_INT 1
64403: NEG
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64418: LD_ADDR_VAR 0 64
64422: PUSH
64423: LD_INT 0
64425: PUSH
64426: LD_INT 0
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: LD_INT 1
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 1
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 1
64456: PUSH
64457: LD_INT 1
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: LD_INT 1
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 1
64476: NEG
64477: PUSH
64478: LD_INT 0
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 1
64487: NEG
64488: PUSH
64489: LD_INT 1
64491: NEG
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: ST_TO_ADDR
// end ; 1 :
64506: GO 70403
64508: LD_INT 1
64510: DOUBLE
64511: EQUAL
64512: IFTRUE 64516
64514: GO 67139
64516: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64517: LD_ADDR_VAR 0 11
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: LD_INT 3
64528: NEG
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 0
64536: PUSH
64537: LD_INT 3
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: LD_INT 2
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: LIST
64560: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64561: LD_ADDR_VAR 0 12
64565: PUSH
64566: LD_INT 2
64568: PUSH
64569: LD_INT 1
64571: NEG
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 3
64579: PUSH
64580: LD_INT 0
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 3
64589: PUSH
64590: LD_INT 1
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: LIST
64601: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64602: LD_ADDR_VAR 0 13
64606: PUSH
64607: LD_INT 3
64609: PUSH
64610: LD_INT 2
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 3
64619: PUSH
64620: LD_INT 3
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 2
64629: PUSH
64630: LD_INT 3
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: LIST
64641: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64642: LD_ADDR_VAR 0 14
64646: PUSH
64647: LD_INT 1
64649: PUSH
64650: LD_INT 3
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: LD_INT 3
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 1
64669: NEG
64670: PUSH
64671: LD_INT 2
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: LIST
64682: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64683: LD_ADDR_VAR 0 15
64687: PUSH
64688: LD_INT 2
64690: NEG
64691: PUSH
64692: LD_INT 1
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 3
64701: NEG
64702: PUSH
64703: LD_INT 0
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 3
64712: NEG
64713: PUSH
64714: LD_INT 1
64716: NEG
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: LIST
64726: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64727: LD_ADDR_VAR 0 16
64731: PUSH
64732: LD_INT 2
64734: NEG
64735: PUSH
64736: LD_INT 3
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 3
64746: NEG
64747: PUSH
64748: LD_INT 2
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 3
64758: NEG
64759: PUSH
64760: LD_INT 3
64762: NEG
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: LIST
64772: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64773: LD_ADDR_VAR 0 17
64777: PUSH
64778: LD_INT 1
64780: NEG
64781: PUSH
64782: LD_INT 3
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: LD_INT 3
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 1
64803: PUSH
64804: LD_INT 2
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: LIST
64816: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64817: LD_ADDR_VAR 0 18
64821: PUSH
64822: LD_INT 2
64824: PUSH
64825: LD_INT 1
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 3
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 3
64845: PUSH
64846: LD_INT 1
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: LIST
64857: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64858: LD_ADDR_VAR 0 19
64862: PUSH
64863: LD_INT 3
64865: PUSH
64866: LD_INT 2
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 3
64875: PUSH
64876: LD_INT 3
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 2
64885: PUSH
64886: LD_INT 3
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: LIST
64897: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64898: LD_ADDR_VAR 0 20
64902: PUSH
64903: LD_INT 1
64905: PUSH
64906: LD_INT 3
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 0
64915: PUSH
64916: LD_INT 3
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 1
64925: NEG
64926: PUSH
64927: LD_INT 2
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: LIST
64938: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64939: LD_ADDR_VAR 0 21
64943: PUSH
64944: LD_INT 2
64946: NEG
64947: PUSH
64948: LD_INT 1
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 3
64957: NEG
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 3
64968: NEG
64969: PUSH
64970: LD_INT 1
64972: NEG
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: LIST
64982: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64983: LD_ADDR_VAR 0 22
64987: PUSH
64988: LD_INT 2
64990: NEG
64991: PUSH
64992: LD_INT 3
64994: NEG
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 3
65002: NEG
65003: PUSH
65004: LD_INT 2
65006: NEG
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 3
65014: NEG
65015: PUSH
65016: LD_INT 3
65018: NEG
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: LIST
65028: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65029: LD_ADDR_VAR 0 23
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: LD_INT 3
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: LD_INT 4
65051: NEG
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 1
65059: PUSH
65060: LD_INT 3
65062: NEG
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: LIST
65072: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65073: LD_ADDR_VAR 0 24
65077: PUSH
65078: LD_INT 3
65080: PUSH
65081: LD_INT 0
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 3
65090: PUSH
65091: LD_INT 1
65093: NEG
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 4
65101: PUSH
65102: LD_INT 1
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: LIST
65113: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65114: LD_ADDR_VAR 0 25
65118: PUSH
65119: LD_INT 3
65121: PUSH
65122: LD_INT 3
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 4
65131: PUSH
65132: LD_INT 3
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 3
65141: PUSH
65142: LD_INT 4
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: LIST
65153: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65154: LD_ADDR_VAR 0 26
65158: PUSH
65159: LD_INT 0
65161: PUSH
65162: LD_INT 3
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 1
65171: PUSH
65172: LD_INT 4
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 1
65181: NEG
65182: PUSH
65183: LD_INT 3
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: LIST
65194: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65195: LD_ADDR_VAR 0 27
65199: PUSH
65200: LD_INT 3
65202: NEG
65203: PUSH
65204: LD_INT 0
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 3
65213: NEG
65214: PUSH
65215: LD_INT 1
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 4
65224: NEG
65225: PUSH
65226: LD_INT 1
65228: NEG
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: LIST
65238: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65239: LD_ADDR_VAR 0 28
65243: PUSH
65244: LD_INT 3
65246: NEG
65247: PUSH
65248: LD_INT 3
65250: NEG
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 3
65258: NEG
65259: PUSH
65260: LD_INT 4
65262: NEG
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 4
65270: NEG
65271: PUSH
65272: LD_INT 3
65274: NEG
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: LIST
65284: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65285: LD_ADDR_VAR 0 29
65289: PUSH
65290: LD_INT 1
65292: NEG
65293: PUSH
65294: LD_INT 3
65296: NEG
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 0
65304: PUSH
65305: LD_INT 3
65307: NEG
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 1
65315: PUSH
65316: LD_INT 2
65318: NEG
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 1
65326: NEG
65327: PUSH
65328: LD_INT 4
65330: NEG
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 0
65338: PUSH
65339: LD_INT 4
65341: NEG
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 1
65349: PUSH
65350: LD_INT 3
65352: NEG
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 1
65360: NEG
65361: PUSH
65362: LD_INT 5
65364: NEG
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 0
65372: PUSH
65373: LD_INT 5
65375: NEG
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 1
65383: PUSH
65384: LD_INT 4
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 1
65394: NEG
65395: PUSH
65396: LD_INT 6
65398: NEG
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 0
65406: PUSH
65407: LD_INT 6
65409: NEG
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 1
65417: PUSH
65418: LD_INT 5
65420: NEG
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65440: LD_ADDR_VAR 0 30
65444: PUSH
65445: LD_INT 2
65447: PUSH
65448: LD_INT 1
65450: NEG
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 3
65458: PUSH
65459: LD_INT 0
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 3
65468: PUSH
65469: LD_INT 1
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 3
65478: PUSH
65479: LD_INT 1
65481: NEG
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 4
65489: PUSH
65490: LD_INT 0
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 4
65499: PUSH
65500: LD_INT 1
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 4
65509: PUSH
65510: LD_INT 1
65512: NEG
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 5
65520: PUSH
65521: LD_INT 0
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 5
65530: PUSH
65531: LD_INT 1
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 5
65540: PUSH
65541: LD_INT 1
65543: NEG
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 6
65551: PUSH
65552: LD_INT 0
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 6
65561: PUSH
65562: LD_INT 1
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65583: LD_ADDR_VAR 0 31
65587: PUSH
65588: LD_INT 3
65590: PUSH
65591: LD_INT 2
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 3
65600: PUSH
65601: LD_INT 3
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 2
65610: PUSH
65611: LD_INT 3
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 4
65620: PUSH
65621: LD_INT 3
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 4
65630: PUSH
65631: LD_INT 4
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 3
65640: PUSH
65641: LD_INT 4
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 5
65650: PUSH
65651: LD_INT 4
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 5
65660: PUSH
65661: LD_INT 5
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 4
65670: PUSH
65671: LD_INT 5
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 6
65680: PUSH
65681: LD_INT 5
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 6
65690: PUSH
65691: LD_INT 6
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 5
65700: PUSH
65701: LD_INT 6
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65722: LD_ADDR_VAR 0 32
65726: PUSH
65727: LD_INT 1
65729: PUSH
65730: LD_INT 3
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 0
65739: PUSH
65740: LD_INT 3
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 1
65749: NEG
65750: PUSH
65751: LD_INT 2
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 1
65760: PUSH
65761: LD_INT 4
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 0
65770: PUSH
65771: LD_INT 4
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 1
65780: NEG
65781: PUSH
65782: LD_INT 3
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 1
65791: PUSH
65792: LD_INT 5
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 0
65801: PUSH
65802: LD_INT 5
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 1
65811: NEG
65812: PUSH
65813: LD_INT 4
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 1
65822: PUSH
65823: LD_INT 6
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: LD_INT 6
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 1
65842: NEG
65843: PUSH
65844: LD_INT 5
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65865: LD_ADDR_VAR 0 33
65869: PUSH
65870: LD_INT 2
65872: NEG
65873: PUSH
65874: LD_INT 1
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 3
65883: NEG
65884: PUSH
65885: LD_INT 0
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 3
65894: NEG
65895: PUSH
65896: LD_INT 1
65898: NEG
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 3
65906: NEG
65907: PUSH
65908: LD_INT 1
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 4
65917: NEG
65918: PUSH
65919: LD_INT 0
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 4
65928: NEG
65929: PUSH
65930: LD_INT 1
65932: NEG
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 4
65940: NEG
65941: PUSH
65942: LD_INT 1
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 5
65951: NEG
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 5
65962: NEG
65963: PUSH
65964: LD_INT 1
65966: NEG
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 5
65974: NEG
65975: PUSH
65976: LD_INT 1
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 6
65985: NEG
65986: PUSH
65987: LD_INT 0
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 6
65996: NEG
65997: PUSH
65998: LD_INT 1
66000: NEG
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66020: LD_ADDR_VAR 0 34
66024: PUSH
66025: LD_INT 2
66027: NEG
66028: PUSH
66029: LD_INT 3
66031: NEG
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 3
66039: NEG
66040: PUSH
66041: LD_INT 2
66043: NEG
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 3
66051: NEG
66052: PUSH
66053: LD_INT 3
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 3
66063: NEG
66064: PUSH
66065: LD_INT 4
66067: NEG
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 4
66075: NEG
66076: PUSH
66077: LD_INT 3
66079: NEG
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 4
66087: NEG
66088: PUSH
66089: LD_INT 4
66091: NEG
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 4
66099: NEG
66100: PUSH
66101: LD_INT 5
66103: NEG
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 5
66111: NEG
66112: PUSH
66113: LD_INT 4
66115: NEG
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 5
66123: NEG
66124: PUSH
66125: LD_INT 5
66127: NEG
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 5
66135: NEG
66136: PUSH
66137: LD_INT 6
66139: NEG
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 6
66147: NEG
66148: PUSH
66149: LD_INT 5
66151: NEG
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 6
66159: NEG
66160: PUSH
66161: LD_INT 6
66163: NEG
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66183: LD_ADDR_VAR 0 41
66187: PUSH
66188: LD_INT 0
66190: PUSH
66191: LD_INT 2
66193: NEG
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 1
66201: NEG
66202: PUSH
66203: LD_INT 3
66205: NEG
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 1
66213: PUSH
66214: LD_INT 2
66216: NEG
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: LIST
66226: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66227: LD_ADDR_VAR 0 42
66231: PUSH
66232: LD_INT 2
66234: PUSH
66235: LD_INT 0
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 2
66244: PUSH
66245: LD_INT 1
66247: NEG
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 3
66255: PUSH
66256: LD_INT 1
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: LIST
66267: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66268: LD_ADDR_VAR 0 43
66272: PUSH
66273: LD_INT 2
66275: PUSH
66276: LD_INT 2
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 3
66285: PUSH
66286: LD_INT 2
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 2
66295: PUSH
66296: LD_INT 3
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: LIST
66307: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66308: LD_ADDR_VAR 0 44
66312: PUSH
66313: LD_INT 0
66315: PUSH
66316: LD_INT 2
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 1
66325: PUSH
66326: LD_INT 3
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 1
66335: NEG
66336: PUSH
66337: LD_INT 2
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: LIST
66348: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66349: LD_ADDR_VAR 0 45
66353: PUSH
66354: LD_INT 2
66356: NEG
66357: PUSH
66358: LD_INT 0
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 2
66367: NEG
66368: PUSH
66369: LD_INT 1
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 3
66378: NEG
66379: PUSH
66380: LD_INT 1
66382: NEG
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: LIST
66392: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66393: LD_ADDR_VAR 0 46
66397: PUSH
66398: LD_INT 2
66400: NEG
66401: PUSH
66402: LD_INT 2
66404: NEG
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 2
66412: NEG
66413: PUSH
66414: LD_INT 3
66416: NEG
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 3
66424: NEG
66425: PUSH
66426: LD_INT 2
66428: NEG
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: LIST
66438: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66439: LD_ADDR_VAR 0 47
66443: PUSH
66444: LD_INT 2
66446: NEG
66447: PUSH
66448: LD_INT 3
66450: NEG
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 1
66458: NEG
66459: PUSH
66460: LD_INT 3
66462: NEG
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66472: LD_ADDR_VAR 0 48
66476: PUSH
66477: LD_INT 1
66479: PUSH
66480: LD_INT 2
66482: NEG
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 2
66490: PUSH
66491: LD_INT 1
66493: NEG
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66503: LD_ADDR_VAR 0 49
66507: PUSH
66508: LD_INT 3
66510: PUSH
66511: LD_INT 1
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 3
66520: PUSH
66521: LD_INT 2
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66532: LD_ADDR_VAR 0 50
66536: PUSH
66537: LD_INT 2
66539: PUSH
66540: LD_INT 3
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 1
66549: PUSH
66550: LD_INT 3
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66561: LD_ADDR_VAR 0 51
66565: PUSH
66566: LD_INT 1
66568: NEG
66569: PUSH
66570: LD_INT 2
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 2
66579: NEG
66580: PUSH
66581: LD_INT 1
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66592: LD_ADDR_VAR 0 52
66596: PUSH
66597: LD_INT 3
66599: NEG
66600: PUSH
66601: LD_INT 1
66603: NEG
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 3
66611: NEG
66612: PUSH
66613: LD_INT 2
66615: NEG
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66625: LD_ADDR_VAR 0 53
66629: PUSH
66630: LD_INT 1
66632: NEG
66633: PUSH
66634: LD_INT 3
66636: NEG
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 0
66644: PUSH
66645: LD_INT 3
66647: NEG
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 1
66655: PUSH
66656: LD_INT 2
66658: NEG
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: LIST
66668: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66669: LD_ADDR_VAR 0 54
66673: PUSH
66674: LD_INT 2
66676: PUSH
66677: LD_INT 1
66679: NEG
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 3
66687: PUSH
66688: LD_INT 0
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 3
66697: PUSH
66698: LD_INT 1
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: LIST
66709: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66710: LD_ADDR_VAR 0 55
66714: PUSH
66715: LD_INT 3
66717: PUSH
66718: LD_INT 2
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 3
66727: PUSH
66728: LD_INT 3
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 2
66737: PUSH
66738: LD_INT 3
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: LIST
66749: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66750: LD_ADDR_VAR 0 56
66754: PUSH
66755: LD_INT 1
66757: PUSH
66758: LD_INT 3
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 0
66767: PUSH
66768: LD_INT 3
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 1
66777: NEG
66778: PUSH
66779: LD_INT 2
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: LIST
66790: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66791: LD_ADDR_VAR 0 57
66795: PUSH
66796: LD_INT 2
66798: NEG
66799: PUSH
66800: LD_INT 1
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 3
66809: NEG
66810: PUSH
66811: LD_INT 0
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 3
66820: NEG
66821: PUSH
66822: LD_INT 1
66824: NEG
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: LIST
66834: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66835: LD_ADDR_VAR 0 58
66839: PUSH
66840: LD_INT 2
66842: NEG
66843: PUSH
66844: LD_INT 3
66846: NEG
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 3
66854: NEG
66855: PUSH
66856: LD_INT 2
66858: NEG
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 3
66866: NEG
66867: PUSH
66868: LD_INT 3
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: LIST
66880: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66881: LD_ADDR_VAR 0 59
66885: PUSH
66886: LD_INT 1
66888: NEG
66889: PUSH
66890: LD_INT 2
66892: NEG
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 0
66900: PUSH
66901: LD_INT 2
66903: NEG
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 1
66911: PUSH
66912: LD_INT 1
66914: NEG
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: LIST
66924: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66925: LD_ADDR_VAR 0 60
66929: PUSH
66930: LD_INT 1
66932: PUSH
66933: LD_INT 1
66935: NEG
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 2
66943: PUSH
66944: LD_INT 0
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 2
66953: PUSH
66954: LD_INT 1
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: LIST
66965: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66966: LD_ADDR_VAR 0 61
66970: PUSH
66971: LD_INT 2
66973: PUSH
66974: LD_INT 1
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 2
66983: PUSH
66984: LD_INT 2
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 1
66993: PUSH
66994: LD_INT 2
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: LIST
67005: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67006: LD_ADDR_VAR 0 62
67010: PUSH
67011: LD_INT 1
67013: PUSH
67014: LD_INT 2
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 0
67023: PUSH
67024: LD_INT 2
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 1
67033: NEG
67034: PUSH
67035: LD_INT 1
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: LIST
67046: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67047: LD_ADDR_VAR 0 63
67051: PUSH
67052: LD_INT 1
67054: NEG
67055: PUSH
67056: LD_INT 1
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 2
67065: NEG
67066: PUSH
67067: LD_INT 0
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 2
67076: NEG
67077: PUSH
67078: LD_INT 1
67080: NEG
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: LIST
67090: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67091: LD_ADDR_VAR 0 64
67095: PUSH
67096: LD_INT 1
67098: NEG
67099: PUSH
67100: LD_INT 2
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 2
67110: NEG
67111: PUSH
67112: LD_INT 1
67114: NEG
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 2
67122: NEG
67123: PUSH
67124: LD_INT 2
67126: NEG
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: LIST
67136: ST_TO_ADDR
// end ; 2 :
67137: GO 70403
67139: LD_INT 2
67141: DOUBLE
67142: EQUAL
67143: IFTRUE 67147
67145: GO 70402
67147: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67148: LD_ADDR_VAR 0 29
67152: PUSH
67153: LD_INT 4
67155: PUSH
67156: LD_INT 0
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 4
67165: PUSH
67166: LD_INT 1
67168: NEG
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 5
67176: PUSH
67177: LD_INT 0
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 5
67186: PUSH
67187: LD_INT 1
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 4
67196: PUSH
67197: LD_INT 1
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 3
67206: PUSH
67207: LD_INT 0
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 3
67216: PUSH
67217: LD_INT 1
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 3
67227: PUSH
67228: LD_INT 2
67230: NEG
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 5
67238: PUSH
67239: LD_INT 2
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 3
67248: PUSH
67249: LD_INT 3
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 3
67258: PUSH
67259: LD_INT 2
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 4
67268: PUSH
67269: LD_INT 3
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 4
67278: PUSH
67279: LD_INT 4
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 3
67288: PUSH
67289: LD_INT 4
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 2
67298: PUSH
67299: LD_INT 3
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 2
67308: PUSH
67309: LD_INT 2
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 4
67318: PUSH
67319: LD_INT 2
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 2
67328: PUSH
67329: LD_INT 4
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 0
67338: PUSH
67339: LD_INT 4
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 0
67348: PUSH
67349: LD_INT 3
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 1
67358: PUSH
67359: LD_INT 4
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 1
67368: PUSH
67369: LD_INT 5
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 0
67378: PUSH
67379: LD_INT 5
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 1
67388: NEG
67389: PUSH
67390: LD_INT 4
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 1
67399: NEG
67400: PUSH
67401: LD_INT 3
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 2
67410: PUSH
67411: LD_INT 5
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 2
67420: NEG
67421: PUSH
67422: LD_INT 3
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 3
67431: NEG
67432: PUSH
67433: LD_INT 0
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 3
67442: NEG
67443: PUSH
67444: LD_INT 1
67446: NEG
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 2
67454: NEG
67455: PUSH
67456: LD_INT 0
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 2
67465: NEG
67466: PUSH
67467: LD_INT 1
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 3
67476: NEG
67477: PUSH
67478: LD_INT 1
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 4
67487: NEG
67488: PUSH
67489: LD_INT 0
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 4
67498: NEG
67499: PUSH
67500: LD_INT 1
67502: NEG
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 4
67510: NEG
67511: PUSH
67512: LD_INT 2
67514: NEG
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 2
67522: NEG
67523: PUSH
67524: LD_INT 2
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 4
67533: NEG
67534: PUSH
67535: LD_INT 4
67537: NEG
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 4
67545: NEG
67546: PUSH
67547: LD_INT 5
67549: NEG
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 3
67557: NEG
67558: PUSH
67559: LD_INT 4
67561: NEG
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 3
67569: NEG
67570: PUSH
67571: LD_INT 3
67573: NEG
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 4
67581: NEG
67582: PUSH
67583: LD_INT 3
67585: NEG
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 5
67593: NEG
67594: PUSH
67595: LD_INT 4
67597: NEG
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 5
67605: NEG
67606: PUSH
67607: LD_INT 5
67609: NEG
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 3
67617: NEG
67618: PUSH
67619: LD_INT 5
67621: NEG
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 5
67629: NEG
67630: PUSH
67631: LD_INT 3
67633: NEG
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67686: LD_ADDR_VAR 0 30
67690: PUSH
67691: LD_INT 4
67693: PUSH
67694: LD_INT 4
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 4
67703: PUSH
67704: LD_INT 3
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 5
67713: PUSH
67714: LD_INT 4
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 5
67723: PUSH
67724: LD_INT 5
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 4
67733: PUSH
67734: LD_INT 5
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 3
67743: PUSH
67744: LD_INT 4
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 3
67753: PUSH
67754: LD_INT 3
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 5
67763: PUSH
67764: LD_INT 3
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 3
67773: PUSH
67774: LD_INT 5
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 0
67783: PUSH
67784: LD_INT 3
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 0
67793: PUSH
67794: LD_INT 2
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 1
67803: PUSH
67804: LD_INT 3
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 1
67813: PUSH
67814: LD_INT 4
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 0
67823: PUSH
67824: LD_INT 4
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 1
67833: NEG
67834: PUSH
67835: LD_INT 3
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 1
67844: NEG
67845: PUSH
67846: LD_INT 2
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: LD_INT 2
67855: PUSH
67856: LD_INT 4
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 2
67865: NEG
67866: PUSH
67867: LD_INT 2
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 4
67876: NEG
67877: PUSH
67878: LD_INT 0
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 4
67887: NEG
67888: PUSH
67889: LD_INT 1
67891: NEG
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 3
67899: NEG
67900: PUSH
67901: LD_INT 0
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 3
67910: NEG
67911: PUSH
67912: LD_INT 1
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 4
67921: NEG
67922: PUSH
67923: LD_INT 1
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 5
67932: NEG
67933: PUSH
67934: LD_INT 0
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 5
67943: NEG
67944: PUSH
67945: LD_INT 1
67947: NEG
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 5
67955: NEG
67956: PUSH
67957: LD_INT 2
67959: NEG
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 3
67967: NEG
67968: PUSH
67969: LD_INT 2
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 3
67978: NEG
67979: PUSH
67980: LD_INT 3
67982: NEG
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 3
67990: NEG
67991: PUSH
67992: LD_INT 4
67994: NEG
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 2
68002: NEG
68003: PUSH
68004: LD_INT 3
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 2
68014: NEG
68015: PUSH
68016: LD_INT 2
68018: NEG
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 3
68026: NEG
68027: PUSH
68028: LD_INT 2
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 4
68038: NEG
68039: PUSH
68040: LD_INT 3
68042: NEG
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 4
68050: NEG
68051: PUSH
68052: LD_INT 4
68054: NEG
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 2
68062: NEG
68063: PUSH
68064: LD_INT 4
68066: NEG
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 4
68074: NEG
68075: PUSH
68076: LD_INT 2
68078: NEG
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 0
68086: PUSH
68087: LD_INT 4
68089: NEG
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 0
68097: PUSH
68098: LD_INT 5
68100: NEG
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 1
68108: PUSH
68109: LD_INT 4
68111: NEG
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 1
68119: PUSH
68120: LD_INT 3
68122: NEG
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 0
68130: PUSH
68131: LD_INT 3
68133: NEG
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 1
68141: NEG
68142: PUSH
68143: LD_INT 4
68145: NEG
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 1
68153: NEG
68154: PUSH
68155: LD_INT 5
68157: NEG
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 2
68165: PUSH
68166: LD_INT 3
68168: NEG
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 2
68176: NEG
68177: PUSH
68178: LD_INT 5
68180: NEG
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: LIST
68207: LIST
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68233: LD_ADDR_VAR 0 31
68237: PUSH
68238: LD_INT 0
68240: PUSH
68241: LD_INT 4
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 0
68250: PUSH
68251: LD_INT 3
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 1
68260: PUSH
68261: LD_INT 4
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 1
68270: PUSH
68271: LD_INT 5
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 0
68280: PUSH
68281: LD_INT 5
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 1
68290: NEG
68291: PUSH
68292: LD_INT 4
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 1
68301: NEG
68302: PUSH
68303: LD_INT 3
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: PUSH
68310: LD_INT 2
68312: PUSH
68313: LD_INT 5
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 2
68322: NEG
68323: PUSH
68324: LD_INT 3
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 3
68333: NEG
68334: PUSH
68335: LD_INT 0
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 3
68344: NEG
68345: PUSH
68346: LD_INT 1
68348: NEG
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 2
68356: NEG
68357: PUSH
68358: LD_INT 0
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 2
68367: NEG
68368: PUSH
68369: LD_INT 1
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 3
68378: NEG
68379: PUSH
68380: LD_INT 1
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 4
68389: NEG
68390: PUSH
68391: LD_INT 0
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 4
68400: NEG
68401: PUSH
68402: LD_INT 1
68404: NEG
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 4
68412: NEG
68413: PUSH
68414: LD_INT 2
68416: NEG
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 2
68424: NEG
68425: PUSH
68426: LD_INT 2
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 4
68435: NEG
68436: PUSH
68437: LD_INT 4
68439: NEG
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 4
68447: NEG
68448: PUSH
68449: LD_INT 5
68451: NEG
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 3
68459: NEG
68460: PUSH
68461: LD_INT 4
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 3
68471: NEG
68472: PUSH
68473: LD_INT 3
68475: NEG
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 4
68483: NEG
68484: PUSH
68485: LD_INT 3
68487: NEG
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: LD_INT 5
68495: NEG
68496: PUSH
68497: LD_INT 4
68499: NEG
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 5
68507: NEG
68508: PUSH
68509: LD_INT 5
68511: NEG
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 3
68519: NEG
68520: PUSH
68521: LD_INT 5
68523: NEG
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 5
68531: NEG
68532: PUSH
68533: LD_INT 3
68535: NEG
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_INT 0
68543: PUSH
68544: LD_INT 3
68546: NEG
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PUSH
68552: LD_INT 0
68554: PUSH
68555: LD_INT 4
68557: NEG
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 1
68565: PUSH
68566: LD_INT 3
68568: NEG
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 1
68576: PUSH
68577: LD_INT 2
68579: NEG
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 0
68587: PUSH
68588: LD_INT 2
68590: NEG
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 1
68598: NEG
68599: PUSH
68600: LD_INT 3
68602: NEG
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 1
68610: NEG
68611: PUSH
68612: LD_INT 4
68614: NEG
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 2
68622: PUSH
68623: LD_INT 2
68625: NEG
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 2
68633: NEG
68634: PUSH
68635: LD_INT 4
68637: NEG
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 4
68645: PUSH
68646: LD_INT 0
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 4
68655: PUSH
68656: LD_INT 1
68658: NEG
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 5
68666: PUSH
68667: LD_INT 0
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 5
68676: PUSH
68677: LD_INT 1
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 4
68686: PUSH
68687: LD_INT 1
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 3
68696: PUSH
68697: LD_INT 0
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 3
68706: PUSH
68707: LD_INT 1
68709: NEG
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 3
68717: PUSH
68718: LD_INT 2
68720: NEG
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: PUSH
68726: LD_INT 5
68728: PUSH
68729: LD_INT 2
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68783: LD_ADDR_VAR 0 32
68787: PUSH
68788: LD_INT 4
68790: NEG
68791: PUSH
68792: LD_INT 0
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 4
68801: NEG
68802: PUSH
68803: LD_INT 1
68805: NEG
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 3
68813: NEG
68814: PUSH
68815: LD_INT 0
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 3
68824: NEG
68825: PUSH
68826: LD_INT 1
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: LD_INT 4
68835: NEG
68836: PUSH
68837: LD_INT 1
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 5
68846: NEG
68847: PUSH
68848: LD_INT 0
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 5
68857: NEG
68858: PUSH
68859: LD_INT 1
68861: NEG
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 5
68869: NEG
68870: PUSH
68871: LD_INT 2
68873: NEG
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 3
68881: NEG
68882: PUSH
68883: LD_INT 2
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 3
68892: NEG
68893: PUSH
68894: LD_INT 3
68896: NEG
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 3
68904: NEG
68905: PUSH
68906: LD_INT 4
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 2
68916: NEG
68917: PUSH
68918: LD_INT 3
68920: NEG
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 2
68928: NEG
68929: PUSH
68930: LD_INT 2
68932: NEG
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 3
68940: NEG
68941: PUSH
68942: LD_INT 2
68944: NEG
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 4
68952: NEG
68953: PUSH
68954: LD_INT 3
68956: NEG
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 4
68964: NEG
68965: PUSH
68966: LD_INT 4
68968: NEG
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 2
68976: NEG
68977: PUSH
68978: LD_INT 4
68980: NEG
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 4
68988: NEG
68989: PUSH
68990: LD_INT 2
68992: NEG
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 0
69000: PUSH
69001: LD_INT 4
69003: NEG
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: LD_INT 0
69011: PUSH
69012: LD_INT 5
69014: NEG
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 1
69022: PUSH
69023: LD_INT 4
69025: NEG
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: LD_INT 1
69033: PUSH
69034: LD_INT 3
69036: NEG
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 0
69044: PUSH
69045: LD_INT 3
69047: NEG
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: LD_INT 1
69055: NEG
69056: PUSH
69057: LD_INT 4
69059: NEG
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 1
69067: NEG
69068: PUSH
69069: LD_INT 5
69071: NEG
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 2
69079: PUSH
69080: LD_INT 3
69082: NEG
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 2
69090: NEG
69091: PUSH
69092: LD_INT 5
69094: NEG
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 3
69102: PUSH
69103: LD_INT 0
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 3
69112: PUSH
69113: LD_INT 1
69115: NEG
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 4
69123: PUSH
69124: LD_INT 0
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 4
69133: PUSH
69134: LD_INT 1
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 3
69143: PUSH
69144: LD_INT 1
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 2
69153: PUSH
69154: LD_INT 0
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: LD_INT 2
69163: PUSH
69164: LD_INT 1
69166: NEG
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 2
69174: PUSH
69175: LD_INT 2
69177: NEG
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 4
69185: PUSH
69186: LD_INT 2
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 4
69195: PUSH
69196: LD_INT 4
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 4
69205: PUSH
69206: LD_INT 3
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 5
69215: PUSH
69216: LD_INT 4
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 5
69225: PUSH
69226: LD_INT 5
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 4
69235: PUSH
69236: LD_INT 5
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 3
69245: PUSH
69246: LD_INT 4
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 3
69255: PUSH
69256: LD_INT 3
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 5
69265: PUSH
69266: LD_INT 3
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 3
69275: PUSH
69276: LD_INT 5
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69330: LD_ADDR_VAR 0 33
69334: PUSH
69335: LD_INT 4
69337: NEG
69338: PUSH
69339: LD_INT 4
69341: NEG
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 4
69349: NEG
69350: PUSH
69351: LD_INT 5
69353: NEG
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 3
69361: NEG
69362: PUSH
69363: LD_INT 4
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 3
69373: NEG
69374: PUSH
69375: LD_INT 3
69377: NEG
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 4
69385: NEG
69386: PUSH
69387: LD_INT 3
69389: NEG
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 5
69397: NEG
69398: PUSH
69399: LD_INT 4
69401: NEG
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 5
69409: NEG
69410: PUSH
69411: LD_INT 5
69413: NEG
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 3
69421: NEG
69422: PUSH
69423: LD_INT 5
69425: NEG
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 5
69433: NEG
69434: PUSH
69435: LD_INT 3
69437: NEG
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 0
69445: PUSH
69446: LD_INT 3
69448: NEG
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: LD_INT 0
69456: PUSH
69457: LD_INT 4
69459: NEG
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 1
69467: PUSH
69468: LD_INT 3
69470: NEG
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 1
69478: PUSH
69479: LD_INT 2
69481: NEG
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 0
69489: PUSH
69490: LD_INT 2
69492: NEG
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 1
69500: NEG
69501: PUSH
69502: LD_INT 3
69504: NEG
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 1
69512: NEG
69513: PUSH
69514: LD_INT 4
69516: NEG
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 2
69524: PUSH
69525: LD_INT 2
69527: NEG
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 2
69535: NEG
69536: PUSH
69537: LD_INT 4
69539: NEG
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 4
69547: PUSH
69548: LD_INT 0
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 4
69557: PUSH
69558: LD_INT 1
69560: NEG
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 5
69568: PUSH
69569: LD_INT 0
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 5
69578: PUSH
69579: LD_INT 1
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 4
69588: PUSH
69589: LD_INT 1
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 3
69598: PUSH
69599: LD_INT 0
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 3
69608: PUSH
69609: LD_INT 1
69611: NEG
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 3
69619: PUSH
69620: LD_INT 2
69622: NEG
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 5
69630: PUSH
69631: LD_INT 2
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 3
69640: PUSH
69641: LD_INT 3
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 3
69650: PUSH
69651: LD_INT 2
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 4
69660: PUSH
69661: LD_INT 3
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 4
69670: PUSH
69671: LD_INT 4
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 3
69680: PUSH
69681: LD_INT 4
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 2
69690: PUSH
69691: LD_INT 3
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 2
69700: PUSH
69701: LD_INT 2
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 4
69710: PUSH
69711: LD_INT 2
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 2
69720: PUSH
69721: LD_INT 4
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 0
69730: PUSH
69731: LD_INT 4
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 0
69740: PUSH
69741: LD_INT 3
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_INT 1
69750: PUSH
69751: LD_INT 4
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 1
69760: PUSH
69761: LD_INT 5
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 0
69770: PUSH
69771: LD_INT 5
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 1
69780: NEG
69781: PUSH
69782: LD_INT 4
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 1
69791: NEG
69792: PUSH
69793: LD_INT 3
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 2
69802: PUSH
69803: LD_INT 5
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 2
69812: NEG
69813: PUSH
69814: LD_INT 3
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69868: LD_ADDR_VAR 0 34
69872: PUSH
69873: LD_INT 0
69875: PUSH
69876: LD_INT 4
69878: NEG
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 0
69886: PUSH
69887: LD_INT 5
69889: NEG
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 1
69897: PUSH
69898: LD_INT 4
69900: NEG
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 1
69908: PUSH
69909: LD_INT 3
69911: NEG
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 0
69919: PUSH
69920: LD_INT 3
69922: NEG
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 1
69930: NEG
69931: PUSH
69932: LD_INT 4
69934: NEG
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 1
69942: NEG
69943: PUSH
69944: LD_INT 5
69946: NEG
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 2
69954: PUSH
69955: LD_INT 3
69957: NEG
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 2
69965: NEG
69966: PUSH
69967: LD_INT 5
69969: NEG
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 3
69977: PUSH
69978: LD_INT 0
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 3
69987: PUSH
69988: LD_INT 1
69990: NEG
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 4
69998: PUSH
69999: LD_INT 0
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 4
70008: PUSH
70009: LD_INT 1
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 3
70018: PUSH
70019: LD_INT 1
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 2
70028: PUSH
70029: LD_INT 0
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: LD_INT 2
70038: PUSH
70039: LD_INT 1
70041: NEG
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 2
70049: PUSH
70050: LD_INT 2
70052: NEG
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 4
70060: PUSH
70061: LD_INT 2
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 4
70070: PUSH
70071: LD_INT 4
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 4
70080: PUSH
70081: LD_INT 3
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 5
70090: PUSH
70091: LD_INT 4
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 5
70100: PUSH
70101: LD_INT 5
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 4
70110: PUSH
70111: LD_INT 5
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 3
70120: PUSH
70121: LD_INT 4
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: PUSH
70128: LD_INT 3
70130: PUSH
70131: LD_INT 3
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: PUSH
70138: LD_INT 5
70140: PUSH
70141: LD_INT 3
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 3
70150: PUSH
70151: LD_INT 5
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: LD_INT 0
70160: PUSH
70161: LD_INT 3
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 0
70170: PUSH
70171: LD_INT 2
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: LD_INT 1
70180: PUSH
70181: LD_INT 3
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: PUSH
70188: LD_INT 1
70190: PUSH
70191: LD_INT 4
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 0
70200: PUSH
70201: LD_INT 4
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 1
70210: NEG
70211: PUSH
70212: LD_INT 3
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 1
70221: NEG
70222: PUSH
70223: LD_INT 2
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: PUSH
70230: LD_INT 2
70232: PUSH
70233: LD_INT 4
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PUSH
70240: LD_INT 2
70242: NEG
70243: PUSH
70244: LD_INT 2
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 4
70253: NEG
70254: PUSH
70255: LD_INT 0
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 4
70264: NEG
70265: PUSH
70266: LD_INT 1
70268: NEG
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 3
70276: NEG
70277: PUSH
70278: LD_INT 0
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: LD_INT 3
70287: NEG
70288: PUSH
70289: LD_INT 1
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 4
70298: NEG
70299: PUSH
70300: LD_INT 1
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: PUSH
70307: LD_INT 5
70309: NEG
70310: PUSH
70311: LD_INT 0
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 5
70320: NEG
70321: PUSH
70322: LD_INT 1
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 5
70332: NEG
70333: PUSH
70334: LD_INT 2
70336: NEG
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 3
70344: NEG
70345: PUSH
70346: LD_INT 2
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: LIST
70365: LIST
70366: LIST
70367: LIST
70368: LIST
70369: LIST
70370: LIST
70371: LIST
70372: LIST
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: ST_TO_ADDR
// end ; end ;
70400: GO 70403
70402: POP
// case btype of b_depot , b_warehouse :
70403: LD_VAR 0 1
70407: PUSH
70408: LD_INT 0
70410: DOUBLE
70411: EQUAL
70412: IFTRUE 70422
70414: LD_INT 1
70416: DOUBLE
70417: EQUAL
70418: IFTRUE 70422
70420: GO 70623
70422: POP
// case nation of nation_american :
70423: LD_VAR 0 5
70427: PUSH
70428: LD_INT 1
70430: DOUBLE
70431: EQUAL
70432: IFTRUE 70436
70434: GO 70492
70436: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70437: LD_ADDR_VAR 0 9
70441: PUSH
70442: LD_VAR 0 11
70446: PUSH
70447: LD_VAR 0 12
70451: PUSH
70452: LD_VAR 0 13
70456: PUSH
70457: LD_VAR 0 14
70461: PUSH
70462: LD_VAR 0 15
70466: PUSH
70467: LD_VAR 0 16
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: PUSH
70480: LD_VAR 0 4
70484: PUSH
70485: LD_INT 1
70487: PLUS
70488: ARRAY
70489: ST_TO_ADDR
70490: GO 70621
70492: LD_INT 2
70494: DOUBLE
70495: EQUAL
70496: IFTRUE 70500
70498: GO 70556
70500: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70501: LD_ADDR_VAR 0 9
70505: PUSH
70506: LD_VAR 0 17
70510: PUSH
70511: LD_VAR 0 18
70515: PUSH
70516: LD_VAR 0 19
70520: PUSH
70521: LD_VAR 0 20
70525: PUSH
70526: LD_VAR 0 21
70530: PUSH
70531: LD_VAR 0 22
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: PUSH
70544: LD_VAR 0 4
70548: PUSH
70549: LD_INT 1
70551: PLUS
70552: ARRAY
70553: ST_TO_ADDR
70554: GO 70621
70556: LD_INT 3
70558: DOUBLE
70559: EQUAL
70560: IFTRUE 70564
70562: GO 70620
70564: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70565: LD_ADDR_VAR 0 9
70569: PUSH
70570: LD_VAR 0 23
70574: PUSH
70575: LD_VAR 0 24
70579: PUSH
70580: LD_VAR 0 25
70584: PUSH
70585: LD_VAR 0 26
70589: PUSH
70590: LD_VAR 0 27
70594: PUSH
70595: LD_VAR 0 28
70599: PUSH
70600: EMPTY
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: PUSH
70608: LD_VAR 0 4
70612: PUSH
70613: LD_INT 1
70615: PLUS
70616: ARRAY
70617: ST_TO_ADDR
70618: GO 70621
70620: POP
70621: GO 71176
70623: LD_INT 2
70625: DOUBLE
70626: EQUAL
70627: IFTRUE 70637
70629: LD_INT 3
70631: DOUBLE
70632: EQUAL
70633: IFTRUE 70637
70635: GO 70693
70637: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70638: LD_ADDR_VAR 0 9
70642: PUSH
70643: LD_VAR 0 29
70647: PUSH
70648: LD_VAR 0 30
70652: PUSH
70653: LD_VAR 0 31
70657: PUSH
70658: LD_VAR 0 32
70662: PUSH
70663: LD_VAR 0 33
70667: PUSH
70668: LD_VAR 0 34
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: PUSH
70681: LD_VAR 0 4
70685: PUSH
70686: LD_INT 1
70688: PLUS
70689: ARRAY
70690: ST_TO_ADDR
70691: GO 71176
70693: LD_INT 16
70695: DOUBLE
70696: EQUAL
70697: IFTRUE 70755
70699: LD_INT 17
70701: DOUBLE
70702: EQUAL
70703: IFTRUE 70755
70705: LD_INT 18
70707: DOUBLE
70708: EQUAL
70709: IFTRUE 70755
70711: LD_INT 19
70713: DOUBLE
70714: EQUAL
70715: IFTRUE 70755
70717: LD_INT 22
70719: DOUBLE
70720: EQUAL
70721: IFTRUE 70755
70723: LD_INT 20
70725: DOUBLE
70726: EQUAL
70727: IFTRUE 70755
70729: LD_INT 21
70731: DOUBLE
70732: EQUAL
70733: IFTRUE 70755
70735: LD_INT 23
70737: DOUBLE
70738: EQUAL
70739: IFTRUE 70755
70741: LD_INT 24
70743: DOUBLE
70744: EQUAL
70745: IFTRUE 70755
70747: LD_INT 25
70749: DOUBLE
70750: EQUAL
70751: IFTRUE 70755
70753: GO 70811
70755: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70756: LD_ADDR_VAR 0 9
70760: PUSH
70761: LD_VAR 0 35
70765: PUSH
70766: LD_VAR 0 36
70770: PUSH
70771: LD_VAR 0 37
70775: PUSH
70776: LD_VAR 0 38
70780: PUSH
70781: LD_VAR 0 39
70785: PUSH
70786: LD_VAR 0 40
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: LIST
70798: PUSH
70799: LD_VAR 0 4
70803: PUSH
70804: LD_INT 1
70806: PLUS
70807: ARRAY
70808: ST_TO_ADDR
70809: GO 71176
70811: LD_INT 6
70813: DOUBLE
70814: EQUAL
70815: IFTRUE 70867
70817: LD_INT 7
70819: DOUBLE
70820: EQUAL
70821: IFTRUE 70867
70823: LD_INT 8
70825: DOUBLE
70826: EQUAL
70827: IFTRUE 70867
70829: LD_INT 13
70831: DOUBLE
70832: EQUAL
70833: IFTRUE 70867
70835: LD_INT 12
70837: DOUBLE
70838: EQUAL
70839: IFTRUE 70867
70841: LD_INT 15
70843: DOUBLE
70844: EQUAL
70845: IFTRUE 70867
70847: LD_INT 11
70849: DOUBLE
70850: EQUAL
70851: IFTRUE 70867
70853: LD_INT 14
70855: DOUBLE
70856: EQUAL
70857: IFTRUE 70867
70859: LD_INT 10
70861: DOUBLE
70862: EQUAL
70863: IFTRUE 70867
70865: GO 70923
70867: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70868: LD_ADDR_VAR 0 9
70872: PUSH
70873: LD_VAR 0 41
70877: PUSH
70878: LD_VAR 0 42
70882: PUSH
70883: LD_VAR 0 43
70887: PUSH
70888: LD_VAR 0 44
70892: PUSH
70893: LD_VAR 0 45
70897: PUSH
70898: LD_VAR 0 46
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: LIST
70910: PUSH
70911: LD_VAR 0 4
70915: PUSH
70916: LD_INT 1
70918: PLUS
70919: ARRAY
70920: ST_TO_ADDR
70921: GO 71176
70923: LD_INT 36
70925: DOUBLE
70926: EQUAL
70927: IFTRUE 70931
70929: GO 70987
70931: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70932: LD_ADDR_VAR 0 9
70936: PUSH
70937: LD_VAR 0 47
70941: PUSH
70942: LD_VAR 0 48
70946: PUSH
70947: LD_VAR 0 49
70951: PUSH
70952: LD_VAR 0 50
70956: PUSH
70957: LD_VAR 0 51
70961: PUSH
70962: LD_VAR 0 52
70966: PUSH
70967: EMPTY
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: PUSH
70975: LD_VAR 0 4
70979: PUSH
70980: LD_INT 1
70982: PLUS
70983: ARRAY
70984: ST_TO_ADDR
70985: GO 71176
70987: LD_INT 4
70989: DOUBLE
70990: EQUAL
70991: IFTRUE 71013
70993: LD_INT 5
70995: DOUBLE
70996: EQUAL
70997: IFTRUE 71013
70999: LD_INT 34
71001: DOUBLE
71002: EQUAL
71003: IFTRUE 71013
71005: LD_INT 37
71007: DOUBLE
71008: EQUAL
71009: IFTRUE 71013
71011: GO 71069
71013: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71014: LD_ADDR_VAR 0 9
71018: PUSH
71019: LD_VAR 0 53
71023: PUSH
71024: LD_VAR 0 54
71028: PUSH
71029: LD_VAR 0 55
71033: PUSH
71034: LD_VAR 0 56
71038: PUSH
71039: LD_VAR 0 57
71043: PUSH
71044: LD_VAR 0 58
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: PUSH
71057: LD_VAR 0 4
71061: PUSH
71062: LD_INT 1
71064: PLUS
71065: ARRAY
71066: ST_TO_ADDR
71067: GO 71176
71069: LD_INT 31
71071: DOUBLE
71072: EQUAL
71073: IFTRUE 71119
71075: LD_INT 32
71077: DOUBLE
71078: EQUAL
71079: IFTRUE 71119
71081: LD_INT 33
71083: DOUBLE
71084: EQUAL
71085: IFTRUE 71119
71087: LD_INT 27
71089: DOUBLE
71090: EQUAL
71091: IFTRUE 71119
71093: LD_INT 26
71095: DOUBLE
71096: EQUAL
71097: IFTRUE 71119
71099: LD_INT 28
71101: DOUBLE
71102: EQUAL
71103: IFTRUE 71119
71105: LD_INT 29
71107: DOUBLE
71108: EQUAL
71109: IFTRUE 71119
71111: LD_INT 30
71113: DOUBLE
71114: EQUAL
71115: IFTRUE 71119
71117: GO 71175
71119: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71120: LD_ADDR_VAR 0 9
71124: PUSH
71125: LD_VAR 0 59
71129: PUSH
71130: LD_VAR 0 60
71134: PUSH
71135: LD_VAR 0 61
71139: PUSH
71140: LD_VAR 0 62
71144: PUSH
71145: LD_VAR 0 63
71149: PUSH
71150: LD_VAR 0 64
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: PUSH
71163: LD_VAR 0 4
71167: PUSH
71168: LD_INT 1
71170: PLUS
71171: ARRAY
71172: ST_TO_ADDR
71173: GO 71176
71175: POP
// temp_list2 = [ ] ;
71176: LD_ADDR_VAR 0 10
71180: PUSH
71181: EMPTY
71182: ST_TO_ADDR
// for i in temp_list do
71183: LD_ADDR_VAR 0 8
71187: PUSH
71188: LD_VAR 0 9
71192: PUSH
71193: FOR_IN
71194: IFFALSE 71246
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71196: LD_ADDR_VAR 0 10
71200: PUSH
71201: LD_VAR 0 10
71205: PUSH
71206: LD_VAR 0 8
71210: PUSH
71211: LD_INT 1
71213: ARRAY
71214: PUSH
71215: LD_VAR 0 2
71219: PLUS
71220: PUSH
71221: LD_VAR 0 8
71225: PUSH
71226: LD_INT 2
71228: ARRAY
71229: PUSH
71230: LD_VAR 0 3
71234: PLUS
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PUSH
71240: EMPTY
71241: LIST
71242: ADD
71243: ST_TO_ADDR
71244: GO 71193
71246: POP
71247: POP
// result = temp_list2 ;
71248: LD_ADDR_VAR 0 7
71252: PUSH
71253: LD_VAR 0 10
71257: ST_TO_ADDR
// end ;
71258: LD_VAR 0 7
71262: RET
// export function EnemyInRange ( unit , dist ) ; begin
71263: LD_INT 0
71265: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71266: LD_ADDR_VAR 0 3
71270: PUSH
71271: LD_VAR 0 1
71275: PPUSH
71276: CALL_OW 255
71280: PPUSH
71281: LD_VAR 0 1
71285: PPUSH
71286: CALL_OW 250
71290: PPUSH
71291: LD_VAR 0 1
71295: PPUSH
71296: CALL_OW 251
71300: PPUSH
71301: LD_VAR 0 2
71305: PPUSH
71306: CALL 44665 0 4
71310: PUSH
71311: LD_INT 4
71313: ARRAY
71314: ST_TO_ADDR
// end ;
71315: LD_VAR 0 3
71319: RET
// export function PlayerSeeMe ( unit ) ; begin
71320: LD_INT 0
71322: PPUSH
// result := See ( your_side , unit ) ;
71323: LD_ADDR_VAR 0 2
71327: PUSH
71328: LD_OWVAR 2
71332: PPUSH
71333: LD_VAR 0 1
71337: PPUSH
71338: CALL_OW 292
71342: ST_TO_ADDR
// end ;
71343: LD_VAR 0 2
71347: RET
// export function ReverseDir ( unit ) ; begin
71348: LD_INT 0
71350: PPUSH
// if not unit then
71351: LD_VAR 0 1
71355: NOT
71356: IFFALSE 71360
// exit ;
71358: GO 71383
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71360: LD_ADDR_VAR 0 2
71364: PUSH
71365: LD_VAR 0 1
71369: PPUSH
71370: CALL_OW 254
71374: PUSH
71375: LD_INT 3
71377: PLUS
71378: PUSH
71379: LD_INT 6
71381: MOD
71382: ST_TO_ADDR
// end ;
71383: LD_VAR 0 2
71387: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71388: LD_INT 0
71390: PPUSH
71391: PPUSH
71392: PPUSH
71393: PPUSH
71394: PPUSH
71395: PPUSH
// if not unit or not hexes then
71396: LD_VAR 0 1
71400: NOT
71401: PUSH
71402: LD_VAR 0 2
71406: NOT
71407: OR
71408: IFFALSE 71412
// exit ;
71410: GO 71535
// dist := 9999 ;
71412: LD_ADDR_VAR 0 5
71416: PUSH
71417: LD_INT 9999
71419: ST_TO_ADDR
// for i = 1 to hexes do
71420: LD_ADDR_VAR 0 4
71424: PUSH
71425: DOUBLE
71426: LD_INT 1
71428: DEC
71429: ST_TO_ADDR
71430: LD_VAR 0 2
71434: PUSH
71435: FOR_TO
71436: IFFALSE 71523
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71438: LD_ADDR_VAR 0 6
71442: PUSH
71443: LD_VAR 0 1
71447: PPUSH
71448: LD_VAR 0 2
71452: PUSH
71453: LD_VAR 0 4
71457: ARRAY
71458: PUSH
71459: LD_INT 1
71461: ARRAY
71462: PPUSH
71463: LD_VAR 0 2
71467: PUSH
71468: LD_VAR 0 4
71472: ARRAY
71473: PUSH
71474: LD_INT 2
71476: ARRAY
71477: PPUSH
71478: CALL_OW 297
71482: ST_TO_ADDR
// if tdist < dist then
71483: LD_VAR 0 6
71487: PUSH
71488: LD_VAR 0 5
71492: LESS
71493: IFFALSE 71521
// begin hex := hexes [ i ] ;
71495: LD_ADDR_VAR 0 8
71499: PUSH
71500: LD_VAR 0 2
71504: PUSH
71505: LD_VAR 0 4
71509: ARRAY
71510: ST_TO_ADDR
// dist := tdist ;
71511: LD_ADDR_VAR 0 5
71515: PUSH
71516: LD_VAR 0 6
71520: ST_TO_ADDR
// end ; end ;
71521: GO 71435
71523: POP
71524: POP
// result := hex ;
71525: LD_ADDR_VAR 0 3
71529: PUSH
71530: LD_VAR 0 8
71534: ST_TO_ADDR
// end ;
71535: LD_VAR 0 3
71539: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71540: LD_INT 0
71542: PPUSH
71543: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71544: LD_VAR 0 1
71548: NOT
71549: PUSH
71550: LD_VAR 0 1
71554: PUSH
71555: LD_INT 21
71557: PUSH
71558: LD_INT 2
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 23
71567: PUSH
71568: LD_INT 2
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: PPUSH
71579: CALL_OW 69
71583: IN
71584: NOT
71585: OR
71586: IFFALSE 71590
// exit ;
71588: GO 71637
// for i = 1 to 3 do
71590: LD_ADDR_VAR 0 3
71594: PUSH
71595: DOUBLE
71596: LD_INT 1
71598: DEC
71599: ST_TO_ADDR
71600: LD_INT 3
71602: PUSH
71603: FOR_TO
71604: IFFALSE 71635
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71606: LD_VAR 0 1
71610: PPUSH
71611: CALL_OW 250
71615: PPUSH
71616: LD_VAR 0 1
71620: PPUSH
71621: CALL_OW 251
71625: PPUSH
71626: LD_INT 1
71628: PPUSH
71629: CALL_OW 453
71633: GO 71603
71635: POP
71636: POP
// end ;
71637: LD_VAR 0 2
71641: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71642: LD_INT 0
71644: PPUSH
71645: PPUSH
71646: PPUSH
71647: PPUSH
71648: PPUSH
71649: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71650: LD_VAR 0 1
71654: NOT
71655: PUSH
71656: LD_VAR 0 2
71660: NOT
71661: OR
71662: PUSH
71663: LD_VAR 0 1
71667: PPUSH
71668: CALL_OW 314
71672: OR
71673: IFFALSE 71677
// exit ;
71675: GO 72118
// x := GetX ( enemy_unit ) ;
71677: LD_ADDR_VAR 0 7
71681: PUSH
71682: LD_VAR 0 2
71686: PPUSH
71687: CALL_OW 250
71691: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71692: LD_ADDR_VAR 0 8
71696: PUSH
71697: LD_VAR 0 2
71701: PPUSH
71702: CALL_OW 251
71706: ST_TO_ADDR
// if not x or not y then
71707: LD_VAR 0 7
71711: NOT
71712: PUSH
71713: LD_VAR 0 8
71717: NOT
71718: OR
71719: IFFALSE 71723
// exit ;
71721: GO 72118
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71723: LD_ADDR_VAR 0 6
71727: PUSH
71728: LD_VAR 0 7
71732: PPUSH
71733: LD_INT 0
71735: PPUSH
71736: LD_INT 4
71738: PPUSH
71739: CALL_OW 272
71743: PUSH
71744: LD_VAR 0 8
71748: PPUSH
71749: LD_INT 0
71751: PPUSH
71752: LD_INT 4
71754: PPUSH
71755: CALL_OW 273
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: PUSH
71764: LD_VAR 0 7
71768: PPUSH
71769: LD_INT 1
71771: PPUSH
71772: LD_INT 4
71774: PPUSH
71775: CALL_OW 272
71779: PUSH
71780: LD_VAR 0 8
71784: PPUSH
71785: LD_INT 1
71787: PPUSH
71788: LD_INT 4
71790: PPUSH
71791: CALL_OW 273
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PUSH
71800: LD_VAR 0 7
71804: PPUSH
71805: LD_INT 2
71807: PPUSH
71808: LD_INT 4
71810: PPUSH
71811: CALL_OW 272
71815: PUSH
71816: LD_VAR 0 8
71820: PPUSH
71821: LD_INT 2
71823: PPUSH
71824: LD_INT 4
71826: PPUSH
71827: CALL_OW 273
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: PUSH
71836: LD_VAR 0 7
71840: PPUSH
71841: LD_INT 3
71843: PPUSH
71844: LD_INT 4
71846: PPUSH
71847: CALL_OW 272
71851: PUSH
71852: LD_VAR 0 8
71856: PPUSH
71857: LD_INT 3
71859: PPUSH
71860: LD_INT 4
71862: PPUSH
71863: CALL_OW 273
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: PUSH
71872: LD_VAR 0 7
71876: PPUSH
71877: LD_INT 4
71879: PPUSH
71880: LD_INT 4
71882: PPUSH
71883: CALL_OW 272
71887: PUSH
71888: LD_VAR 0 8
71892: PPUSH
71893: LD_INT 4
71895: PPUSH
71896: LD_INT 4
71898: PPUSH
71899: CALL_OW 273
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: LD_VAR 0 7
71912: PPUSH
71913: LD_INT 5
71915: PPUSH
71916: LD_INT 4
71918: PPUSH
71919: CALL_OW 272
71923: PUSH
71924: LD_VAR 0 8
71928: PPUSH
71929: LD_INT 5
71931: PPUSH
71932: LD_INT 4
71934: PPUSH
71935: CALL_OW 273
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: ST_TO_ADDR
// for i = tmp downto 1 do
71952: LD_ADDR_VAR 0 4
71956: PUSH
71957: DOUBLE
71958: LD_VAR 0 6
71962: INC
71963: ST_TO_ADDR
71964: LD_INT 1
71966: PUSH
71967: FOR_DOWNTO
71968: IFFALSE 72069
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71970: LD_VAR 0 6
71974: PUSH
71975: LD_VAR 0 4
71979: ARRAY
71980: PUSH
71981: LD_INT 1
71983: ARRAY
71984: PPUSH
71985: LD_VAR 0 6
71989: PUSH
71990: LD_VAR 0 4
71994: ARRAY
71995: PUSH
71996: LD_INT 2
71998: ARRAY
71999: PPUSH
72000: CALL_OW 488
72004: NOT
72005: PUSH
72006: LD_VAR 0 6
72010: PUSH
72011: LD_VAR 0 4
72015: ARRAY
72016: PUSH
72017: LD_INT 1
72019: ARRAY
72020: PPUSH
72021: LD_VAR 0 6
72025: PUSH
72026: LD_VAR 0 4
72030: ARRAY
72031: PUSH
72032: LD_INT 2
72034: ARRAY
72035: PPUSH
72036: CALL_OW 428
72040: PUSH
72041: LD_INT 0
72043: NONEQUAL
72044: OR
72045: IFFALSE 72067
// tmp := Delete ( tmp , i ) ;
72047: LD_ADDR_VAR 0 6
72051: PUSH
72052: LD_VAR 0 6
72056: PPUSH
72057: LD_VAR 0 4
72061: PPUSH
72062: CALL_OW 3
72066: ST_TO_ADDR
72067: GO 71967
72069: POP
72070: POP
// j := GetClosestHex ( unit , tmp ) ;
72071: LD_ADDR_VAR 0 5
72075: PUSH
72076: LD_VAR 0 1
72080: PPUSH
72081: LD_VAR 0 6
72085: PPUSH
72086: CALL 71388 0 2
72090: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72091: LD_VAR 0 1
72095: PPUSH
72096: LD_VAR 0 5
72100: PUSH
72101: LD_INT 1
72103: ARRAY
72104: PPUSH
72105: LD_VAR 0 5
72109: PUSH
72110: LD_INT 2
72112: ARRAY
72113: PPUSH
72114: CALL_OW 111
// end ;
72118: LD_VAR 0 3
72122: RET
// export function PrepareApemanSoldier ( ) ; begin
72123: LD_INT 0
72125: PPUSH
// uc_nation := 0 ;
72126: LD_ADDR_OWVAR 21
72130: PUSH
72131: LD_INT 0
72133: ST_TO_ADDR
// hc_sex := sex_male ;
72134: LD_ADDR_OWVAR 27
72138: PUSH
72139: LD_INT 1
72141: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72142: LD_ADDR_OWVAR 28
72146: PUSH
72147: LD_INT 15
72149: ST_TO_ADDR
// hc_gallery :=  ;
72150: LD_ADDR_OWVAR 33
72154: PUSH
72155: LD_STRING 
72157: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72158: LD_ADDR_OWVAR 31
72162: PUSH
72163: LD_INT 0
72165: PPUSH
72166: LD_INT 3
72168: PPUSH
72169: CALL_OW 12
72173: PUSH
72174: LD_INT 0
72176: PPUSH
72177: LD_INT 3
72179: PPUSH
72180: CALL_OW 12
72184: PUSH
72185: LD_INT 0
72187: PUSH
72188: LD_INT 0
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: ST_TO_ADDR
// end ;
72197: LD_VAR 0 1
72201: RET
// export function PrepareApemanEngineer ( ) ; begin
72202: LD_INT 0
72204: PPUSH
// uc_nation := 0 ;
72205: LD_ADDR_OWVAR 21
72209: PUSH
72210: LD_INT 0
72212: ST_TO_ADDR
// hc_sex := sex_male ;
72213: LD_ADDR_OWVAR 27
72217: PUSH
72218: LD_INT 1
72220: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72221: LD_ADDR_OWVAR 28
72225: PUSH
72226: LD_INT 16
72228: ST_TO_ADDR
// hc_gallery :=  ;
72229: LD_ADDR_OWVAR 33
72233: PUSH
72234: LD_STRING 
72236: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72237: LD_ADDR_OWVAR 31
72241: PUSH
72242: LD_INT 0
72244: PPUSH
72245: LD_INT 3
72247: PPUSH
72248: CALL_OW 12
72252: PUSH
72253: LD_INT 0
72255: PPUSH
72256: LD_INT 3
72258: PPUSH
72259: CALL_OW 12
72263: PUSH
72264: LD_INT 0
72266: PUSH
72267: LD_INT 0
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: ST_TO_ADDR
// end ;
72276: LD_VAR 0 1
72280: RET
// export function PrepareApeman ( agressivity ) ; begin
72281: LD_INT 0
72283: PPUSH
// uc_side := 0 ;
72284: LD_ADDR_OWVAR 20
72288: PUSH
72289: LD_INT 0
72291: ST_TO_ADDR
// uc_nation := 0 ;
72292: LD_ADDR_OWVAR 21
72296: PUSH
72297: LD_INT 0
72299: ST_TO_ADDR
// hc_sex := sex_male ;
72300: LD_ADDR_OWVAR 27
72304: PUSH
72305: LD_INT 1
72307: ST_TO_ADDR
// hc_class := class_apeman ;
72308: LD_ADDR_OWVAR 28
72312: PUSH
72313: LD_INT 12
72315: ST_TO_ADDR
// hc_gallery :=  ;
72316: LD_ADDR_OWVAR 33
72320: PUSH
72321: LD_STRING 
72323: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72324: LD_ADDR_OWVAR 35
72328: PUSH
72329: LD_VAR 0 1
72333: NEG
72334: PPUSH
72335: LD_VAR 0 1
72339: PPUSH
72340: CALL_OW 12
72344: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72345: LD_ADDR_OWVAR 31
72349: PUSH
72350: LD_INT 0
72352: PPUSH
72353: LD_INT 3
72355: PPUSH
72356: CALL_OW 12
72360: PUSH
72361: LD_INT 0
72363: PPUSH
72364: LD_INT 3
72366: PPUSH
72367: CALL_OW 12
72371: PUSH
72372: LD_INT 0
72374: PUSH
72375: LD_INT 0
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: LIST
72382: LIST
72383: ST_TO_ADDR
// end ;
72384: LD_VAR 0 2
72388: RET
// export function PrepareTiger ( agressivity ) ; begin
72389: LD_INT 0
72391: PPUSH
// uc_side := 0 ;
72392: LD_ADDR_OWVAR 20
72396: PUSH
72397: LD_INT 0
72399: ST_TO_ADDR
// uc_nation := 0 ;
72400: LD_ADDR_OWVAR 21
72404: PUSH
72405: LD_INT 0
72407: ST_TO_ADDR
// hc_class := class_tiger ;
72408: LD_ADDR_OWVAR 28
72412: PUSH
72413: LD_INT 14
72415: ST_TO_ADDR
// hc_gallery :=  ;
72416: LD_ADDR_OWVAR 33
72420: PUSH
72421: LD_STRING 
72423: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72424: LD_ADDR_OWVAR 35
72428: PUSH
72429: LD_VAR 0 1
72433: NEG
72434: PPUSH
72435: LD_VAR 0 1
72439: PPUSH
72440: CALL_OW 12
72444: ST_TO_ADDR
// end ;
72445: LD_VAR 0 2
72449: RET
// export function PrepareEnchidna ( ) ; begin
72450: LD_INT 0
72452: PPUSH
// uc_side := 0 ;
72453: LD_ADDR_OWVAR 20
72457: PUSH
72458: LD_INT 0
72460: ST_TO_ADDR
// uc_nation := 0 ;
72461: LD_ADDR_OWVAR 21
72465: PUSH
72466: LD_INT 0
72468: ST_TO_ADDR
// hc_class := class_baggie ;
72469: LD_ADDR_OWVAR 28
72473: PUSH
72474: LD_INT 13
72476: ST_TO_ADDR
// hc_gallery :=  ;
72477: LD_ADDR_OWVAR 33
72481: PUSH
72482: LD_STRING 
72484: ST_TO_ADDR
// end ;
72485: LD_VAR 0 1
72489: RET
// export function PrepareFrog ( ) ; begin
72490: LD_INT 0
72492: PPUSH
// uc_side := 0 ;
72493: LD_ADDR_OWVAR 20
72497: PUSH
72498: LD_INT 0
72500: ST_TO_ADDR
// uc_nation := 0 ;
72501: LD_ADDR_OWVAR 21
72505: PUSH
72506: LD_INT 0
72508: ST_TO_ADDR
// hc_class := class_frog ;
72509: LD_ADDR_OWVAR 28
72513: PUSH
72514: LD_INT 19
72516: ST_TO_ADDR
// hc_gallery :=  ;
72517: LD_ADDR_OWVAR 33
72521: PUSH
72522: LD_STRING 
72524: ST_TO_ADDR
// end ;
72525: LD_VAR 0 1
72529: RET
// export function PrepareFish ( ) ; begin
72530: LD_INT 0
72532: PPUSH
// uc_side := 0 ;
72533: LD_ADDR_OWVAR 20
72537: PUSH
72538: LD_INT 0
72540: ST_TO_ADDR
// uc_nation := 0 ;
72541: LD_ADDR_OWVAR 21
72545: PUSH
72546: LD_INT 0
72548: ST_TO_ADDR
// hc_class := class_fish ;
72549: LD_ADDR_OWVAR 28
72553: PUSH
72554: LD_INT 20
72556: ST_TO_ADDR
// hc_gallery :=  ;
72557: LD_ADDR_OWVAR 33
72561: PUSH
72562: LD_STRING 
72564: ST_TO_ADDR
// end ;
72565: LD_VAR 0 1
72569: RET
// export function PrepareBird ( ) ; begin
72570: LD_INT 0
72572: PPUSH
// uc_side := 0 ;
72573: LD_ADDR_OWVAR 20
72577: PUSH
72578: LD_INT 0
72580: ST_TO_ADDR
// uc_nation := 0 ;
72581: LD_ADDR_OWVAR 21
72585: PUSH
72586: LD_INT 0
72588: ST_TO_ADDR
// hc_class := class_phororhacos ;
72589: LD_ADDR_OWVAR 28
72593: PUSH
72594: LD_INT 18
72596: ST_TO_ADDR
// hc_gallery :=  ;
72597: LD_ADDR_OWVAR 33
72601: PUSH
72602: LD_STRING 
72604: ST_TO_ADDR
// end ;
72605: LD_VAR 0 1
72609: RET
// export function PrepareHorse ( ) ; begin
72610: LD_INT 0
72612: PPUSH
// uc_side := 0 ;
72613: LD_ADDR_OWVAR 20
72617: PUSH
72618: LD_INT 0
72620: ST_TO_ADDR
// uc_nation := 0 ;
72621: LD_ADDR_OWVAR 21
72625: PUSH
72626: LD_INT 0
72628: ST_TO_ADDR
// hc_class := class_horse ;
72629: LD_ADDR_OWVAR 28
72633: PUSH
72634: LD_INT 21
72636: ST_TO_ADDR
// hc_gallery :=  ;
72637: LD_ADDR_OWVAR 33
72641: PUSH
72642: LD_STRING 
72644: ST_TO_ADDR
// end ;
72645: LD_VAR 0 1
72649: RET
// export function PrepareMastodont ( ) ; begin
72650: LD_INT 0
72652: PPUSH
// uc_side := 0 ;
72653: LD_ADDR_OWVAR 20
72657: PUSH
72658: LD_INT 0
72660: ST_TO_ADDR
// uc_nation := 0 ;
72661: LD_ADDR_OWVAR 21
72665: PUSH
72666: LD_INT 0
72668: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72669: LD_ADDR_OWVAR 37
72673: PUSH
72674: LD_INT 31
72676: ST_TO_ADDR
// vc_control := control_rider ;
72677: LD_ADDR_OWVAR 38
72681: PUSH
72682: LD_INT 4
72684: ST_TO_ADDR
// end ;
72685: LD_VAR 0 1
72689: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72690: LD_INT 0
72692: PPUSH
72693: PPUSH
72694: PPUSH
// uc_side = 0 ;
72695: LD_ADDR_OWVAR 20
72699: PUSH
72700: LD_INT 0
72702: ST_TO_ADDR
// uc_nation = 0 ;
72703: LD_ADDR_OWVAR 21
72707: PUSH
72708: LD_INT 0
72710: ST_TO_ADDR
// InitHc_All ( ) ;
72711: CALL_OW 584
// InitVc ;
72715: CALL_OW 20
// if mastodonts then
72719: LD_VAR 0 6
72723: IFFALSE 72790
// for i = 1 to mastodonts do
72725: LD_ADDR_VAR 0 11
72729: PUSH
72730: DOUBLE
72731: LD_INT 1
72733: DEC
72734: ST_TO_ADDR
72735: LD_VAR 0 6
72739: PUSH
72740: FOR_TO
72741: IFFALSE 72788
// begin vc_chassis := 31 ;
72743: LD_ADDR_OWVAR 37
72747: PUSH
72748: LD_INT 31
72750: ST_TO_ADDR
// vc_control := control_rider ;
72751: LD_ADDR_OWVAR 38
72755: PUSH
72756: LD_INT 4
72758: ST_TO_ADDR
// animal := CreateVehicle ;
72759: LD_ADDR_VAR 0 12
72763: PUSH
72764: CALL_OW 45
72768: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72769: LD_VAR 0 12
72773: PPUSH
72774: LD_VAR 0 8
72778: PPUSH
72779: LD_INT 0
72781: PPUSH
72782: CALL 74925 0 3
// end ;
72786: GO 72740
72788: POP
72789: POP
// if horses then
72790: LD_VAR 0 5
72794: IFFALSE 72861
// for i = 1 to horses do
72796: LD_ADDR_VAR 0 11
72800: PUSH
72801: DOUBLE
72802: LD_INT 1
72804: DEC
72805: ST_TO_ADDR
72806: LD_VAR 0 5
72810: PUSH
72811: FOR_TO
72812: IFFALSE 72859
// begin hc_class := 21 ;
72814: LD_ADDR_OWVAR 28
72818: PUSH
72819: LD_INT 21
72821: ST_TO_ADDR
// hc_gallery :=  ;
72822: LD_ADDR_OWVAR 33
72826: PUSH
72827: LD_STRING 
72829: ST_TO_ADDR
// animal := CreateHuman ;
72830: LD_ADDR_VAR 0 12
72834: PUSH
72835: CALL_OW 44
72839: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72840: LD_VAR 0 12
72844: PPUSH
72845: LD_VAR 0 8
72849: PPUSH
72850: LD_INT 0
72852: PPUSH
72853: CALL 74925 0 3
// end ;
72857: GO 72811
72859: POP
72860: POP
// if birds then
72861: LD_VAR 0 1
72865: IFFALSE 72932
// for i = 1 to birds do
72867: LD_ADDR_VAR 0 11
72871: PUSH
72872: DOUBLE
72873: LD_INT 1
72875: DEC
72876: ST_TO_ADDR
72877: LD_VAR 0 1
72881: PUSH
72882: FOR_TO
72883: IFFALSE 72930
// begin hc_class = 18 ;
72885: LD_ADDR_OWVAR 28
72889: PUSH
72890: LD_INT 18
72892: ST_TO_ADDR
// hc_gallery =  ;
72893: LD_ADDR_OWVAR 33
72897: PUSH
72898: LD_STRING 
72900: ST_TO_ADDR
// animal := CreateHuman ;
72901: LD_ADDR_VAR 0 12
72905: PUSH
72906: CALL_OW 44
72910: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72911: LD_VAR 0 12
72915: PPUSH
72916: LD_VAR 0 8
72920: PPUSH
72921: LD_INT 0
72923: PPUSH
72924: CALL 74925 0 3
// end ;
72928: GO 72882
72930: POP
72931: POP
// if tigers then
72932: LD_VAR 0 2
72936: IFFALSE 73020
// for i = 1 to tigers do
72938: LD_ADDR_VAR 0 11
72942: PUSH
72943: DOUBLE
72944: LD_INT 1
72946: DEC
72947: ST_TO_ADDR
72948: LD_VAR 0 2
72952: PUSH
72953: FOR_TO
72954: IFFALSE 73018
// begin hc_class = class_tiger ;
72956: LD_ADDR_OWVAR 28
72960: PUSH
72961: LD_INT 14
72963: ST_TO_ADDR
// hc_gallery =  ;
72964: LD_ADDR_OWVAR 33
72968: PUSH
72969: LD_STRING 
72971: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72972: LD_ADDR_OWVAR 35
72976: PUSH
72977: LD_INT 7
72979: NEG
72980: PPUSH
72981: LD_INT 7
72983: PPUSH
72984: CALL_OW 12
72988: ST_TO_ADDR
// animal := CreateHuman ;
72989: LD_ADDR_VAR 0 12
72993: PUSH
72994: CALL_OW 44
72998: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72999: LD_VAR 0 12
73003: PPUSH
73004: LD_VAR 0 8
73008: PPUSH
73009: LD_INT 0
73011: PPUSH
73012: CALL 74925 0 3
// end ;
73016: GO 72953
73018: POP
73019: POP
// if apemans then
73020: LD_VAR 0 3
73024: IFFALSE 73147
// for i = 1 to apemans do
73026: LD_ADDR_VAR 0 11
73030: PUSH
73031: DOUBLE
73032: LD_INT 1
73034: DEC
73035: ST_TO_ADDR
73036: LD_VAR 0 3
73040: PUSH
73041: FOR_TO
73042: IFFALSE 73145
// begin hc_class = class_apeman ;
73044: LD_ADDR_OWVAR 28
73048: PUSH
73049: LD_INT 12
73051: ST_TO_ADDR
// hc_gallery =  ;
73052: LD_ADDR_OWVAR 33
73056: PUSH
73057: LD_STRING 
73059: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73060: LD_ADDR_OWVAR 35
73064: PUSH
73065: LD_INT 2
73067: NEG
73068: PPUSH
73069: LD_INT 2
73071: PPUSH
73072: CALL_OW 12
73076: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73077: LD_ADDR_OWVAR 31
73081: PUSH
73082: LD_INT 1
73084: PPUSH
73085: LD_INT 3
73087: PPUSH
73088: CALL_OW 12
73092: PUSH
73093: LD_INT 1
73095: PPUSH
73096: LD_INT 3
73098: PPUSH
73099: CALL_OW 12
73103: PUSH
73104: LD_INT 0
73106: PUSH
73107: LD_INT 0
73109: PUSH
73110: EMPTY
73111: LIST
73112: LIST
73113: LIST
73114: LIST
73115: ST_TO_ADDR
// animal := CreateHuman ;
73116: LD_ADDR_VAR 0 12
73120: PUSH
73121: CALL_OW 44
73125: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73126: LD_VAR 0 12
73130: PPUSH
73131: LD_VAR 0 8
73135: PPUSH
73136: LD_INT 0
73138: PPUSH
73139: CALL 74925 0 3
// end ;
73143: GO 73041
73145: POP
73146: POP
// if enchidnas then
73147: LD_VAR 0 4
73151: IFFALSE 73218
// for i = 1 to enchidnas do
73153: LD_ADDR_VAR 0 11
73157: PUSH
73158: DOUBLE
73159: LD_INT 1
73161: DEC
73162: ST_TO_ADDR
73163: LD_VAR 0 4
73167: PUSH
73168: FOR_TO
73169: IFFALSE 73216
// begin hc_class = 13 ;
73171: LD_ADDR_OWVAR 28
73175: PUSH
73176: LD_INT 13
73178: ST_TO_ADDR
// hc_gallery =  ;
73179: LD_ADDR_OWVAR 33
73183: PUSH
73184: LD_STRING 
73186: ST_TO_ADDR
// animal := CreateHuman ;
73187: LD_ADDR_VAR 0 12
73191: PUSH
73192: CALL_OW 44
73196: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73197: LD_VAR 0 12
73201: PPUSH
73202: LD_VAR 0 8
73206: PPUSH
73207: LD_INT 0
73209: PPUSH
73210: CALL 74925 0 3
// end ;
73214: GO 73168
73216: POP
73217: POP
// if fishes then
73218: LD_VAR 0 7
73222: IFFALSE 73289
// for i = 1 to fishes do
73224: LD_ADDR_VAR 0 11
73228: PUSH
73229: DOUBLE
73230: LD_INT 1
73232: DEC
73233: ST_TO_ADDR
73234: LD_VAR 0 7
73238: PUSH
73239: FOR_TO
73240: IFFALSE 73287
// begin hc_class = 20 ;
73242: LD_ADDR_OWVAR 28
73246: PUSH
73247: LD_INT 20
73249: ST_TO_ADDR
// hc_gallery =  ;
73250: LD_ADDR_OWVAR 33
73254: PUSH
73255: LD_STRING 
73257: ST_TO_ADDR
// animal := CreateHuman ;
73258: LD_ADDR_VAR 0 12
73262: PUSH
73263: CALL_OW 44
73267: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73268: LD_VAR 0 12
73272: PPUSH
73273: LD_VAR 0 9
73277: PPUSH
73278: LD_INT 0
73280: PPUSH
73281: CALL 74925 0 3
// end ;
73285: GO 73239
73287: POP
73288: POP
// end ;
73289: LD_VAR 0 10
73293: RET
// export function WantHeal ( sci , unit ) ; begin
73294: LD_INT 0
73296: PPUSH
// if GetTaskList ( sci ) > 0 then
73297: LD_VAR 0 1
73301: PPUSH
73302: CALL_OW 437
73306: PUSH
73307: LD_INT 0
73309: GREATER
73310: IFFALSE 73380
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73312: LD_VAR 0 1
73316: PPUSH
73317: CALL_OW 437
73321: PUSH
73322: LD_INT 1
73324: ARRAY
73325: PUSH
73326: LD_INT 1
73328: ARRAY
73329: PUSH
73330: LD_STRING l
73332: EQUAL
73333: PUSH
73334: LD_VAR 0 1
73338: PPUSH
73339: CALL_OW 437
73343: PUSH
73344: LD_INT 1
73346: ARRAY
73347: PUSH
73348: LD_INT 4
73350: ARRAY
73351: PUSH
73352: LD_VAR 0 2
73356: EQUAL
73357: AND
73358: IFFALSE 73370
// result := true else
73360: LD_ADDR_VAR 0 3
73364: PUSH
73365: LD_INT 1
73367: ST_TO_ADDR
73368: GO 73378
// result := false ;
73370: LD_ADDR_VAR 0 3
73374: PUSH
73375: LD_INT 0
73377: ST_TO_ADDR
// end else
73378: GO 73388
// result := false ;
73380: LD_ADDR_VAR 0 3
73384: PUSH
73385: LD_INT 0
73387: ST_TO_ADDR
// end ;
73388: LD_VAR 0 3
73392: RET
// export function HealTarget ( sci ) ; begin
73393: LD_INT 0
73395: PPUSH
// if not sci then
73396: LD_VAR 0 1
73400: NOT
73401: IFFALSE 73405
// exit ;
73403: GO 73470
// result := 0 ;
73405: LD_ADDR_VAR 0 2
73409: PUSH
73410: LD_INT 0
73412: ST_TO_ADDR
// if GetTaskList ( sci ) then
73413: LD_VAR 0 1
73417: PPUSH
73418: CALL_OW 437
73422: IFFALSE 73470
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73424: LD_VAR 0 1
73428: PPUSH
73429: CALL_OW 437
73433: PUSH
73434: LD_INT 1
73436: ARRAY
73437: PUSH
73438: LD_INT 1
73440: ARRAY
73441: PUSH
73442: LD_STRING l
73444: EQUAL
73445: IFFALSE 73470
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73447: LD_ADDR_VAR 0 2
73451: PUSH
73452: LD_VAR 0 1
73456: PPUSH
73457: CALL_OW 437
73461: PUSH
73462: LD_INT 1
73464: ARRAY
73465: PUSH
73466: LD_INT 4
73468: ARRAY
73469: ST_TO_ADDR
// end ;
73470: LD_VAR 0 2
73474: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73475: LD_INT 0
73477: PPUSH
73478: PPUSH
73479: PPUSH
73480: PPUSH
// if not base_units then
73481: LD_VAR 0 1
73485: NOT
73486: IFFALSE 73490
// exit ;
73488: GO 73577
// result := false ;
73490: LD_ADDR_VAR 0 2
73494: PUSH
73495: LD_INT 0
73497: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73498: LD_ADDR_VAR 0 5
73502: PUSH
73503: LD_VAR 0 1
73507: PPUSH
73508: LD_INT 21
73510: PUSH
73511: LD_INT 3
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: PPUSH
73518: CALL_OW 72
73522: ST_TO_ADDR
// if not tmp then
73523: LD_VAR 0 5
73527: NOT
73528: IFFALSE 73532
// exit ;
73530: GO 73577
// for i in tmp do
73532: LD_ADDR_VAR 0 3
73536: PUSH
73537: LD_VAR 0 5
73541: PUSH
73542: FOR_IN
73543: IFFALSE 73575
// begin result := EnemyInRange ( i , 22 ) ;
73545: LD_ADDR_VAR 0 2
73549: PUSH
73550: LD_VAR 0 3
73554: PPUSH
73555: LD_INT 22
73557: PPUSH
73558: CALL 71263 0 2
73562: ST_TO_ADDR
// if result then
73563: LD_VAR 0 2
73567: IFFALSE 73573
// exit ;
73569: POP
73570: POP
73571: GO 73577
// end ;
73573: GO 73542
73575: POP
73576: POP
// end ;
73577: LD_VAR 0 2
73581: RET
// export function FilterByTag ( units , tag ) ; begin
73582: LD_INT 0
73584: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73585: LD_ADDR_VAR 0 3
73589: PUSH
73590: LD_VAR 0 1
73594: PPUSH
73595: LD_INT 120
73597: PUSH
73598: LD_VAR 0 2
73602: PUSH
73603: EMPTY
73604: LIST
73605: LIST
73606: PPUSH
73607: CALL_OW 72
73611: ST_TO_ADDR
// end ;
73612: LD_VAR 0 3
73616: RET
// export function IsDriver ( un ) ; begin
73617: LD_INT 0
73619: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73620: LD_ADDR_VAR 0 2
73624: PUSH
73625: LD_VAR 0 1
73629: PUSH
73630: LD_INT 55
73632: PUSH
73633: EMPTY
73634: LIST
73635: PPUSH
73636: CALL_OW 69
73640: IN
73641: ST_TO_ADDR
// end ;
73642: LD_VAR 0 2
73646: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73647: LD_INT 0
73649: PPUSH
73650: PPUSH
// list := [ ] ;
73651: LD_ADDR_VAR 0 5
73655: PUSH
73656: EMPTY
73657: ST_TO_ADDR
// case d of 0 :
73658: LD_VAR 0 3
73662: PUSH
73663: LD_INT 0
73665: DOUBLE
73666: EQUAL
73667: IFTRUE 73671
73669: GO 73804
73671: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73672: LD_ADDR_VAR 0 5
73676: PUSH
73677: LD_VAR 0 1
73681: PUSH
73682: LD_INT 4
73684: MINUS
73685: PUSH
73686: LD_VAR 0 2
73690: PUSH
73691: LD_INT 4
73693: MINUS
73694: PUSH
73695: LD_INT 2
73697: PUSH
73698: EMPTY
73699: LIST
73700: LIST
73701: LIST
73702: PUSH
73703: LD_VAR 0 1
73707: PUSH
73708: LD_INT 3
73710: MINUS
73711: PUSH
73712: LD_VAR 0 2
73716: PUSH
73717: LD_INT 1
73719: PUSH
73720: EMPTY
73721: LIST
73722: LIST
73723: LIST
73724: PUSH
73725: LD_VAR 0 1
73729: PUSH
73730: LD_INT 4
73732: PLUS
73733: PUSH
73734: LD_VAR 0 2
73738: PUSH
73739: LD_INT 4
73741: PUSH
73742: EMPTY
73743: LIST
73744: LIST
73745: LIST
73746: PUSH
73747: LD_VAR 0 1
73751: PUSH
73752: LD_INT 3
73754: PLUS
73755: PUSH
73756: LD_VAR 0 2
73760: PUSH
73761: LD_INT 3
73763: PLUS
73764: PUSH
73765: LD_INT 5
73767: PUSH
73768: EMPTY
73769: LIST
73770: LIST
73771: LIST
73772: PUSH
73773: LD_VAR 0 1
73777: PUSH
73778: LD_VAR 0 2
73782: PUSH
73783: LD_INT 4
73785: PLUS
73786: PUSH
73787: LD_INT 0
73789: PUSH
73790: EMPTY
73791: LIST
73792: LIST
73793: LIST
73794: PUSH
73795: EMPTY
73796: LIST
73797: LIST
73798: LIST
73799: LIST
73800: LIST
73801: ST_TO_ADDR
// end ; 1 :
73802: GO 74502
73804: LD_INT 1
73806: DOUBLE
73807: EQUAL
73808: IFTRUE 73812
73810: GO 73945
73812: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73813: LD_ADDR_VAR 0 5
73817: PUSH
73818: LD_VAR 0 1
73822: PUSH
73823: LD_VAR 0 2
73827: PUSH
73828: LD_INT 4
73830: MINUS
73831: PUSH
73832: LD_INT 3
73834: PUSH
73835: EMPTY
73836: LIST
73837: LIST
73838: LIST
73839: PUSH
73840: LD_VAR 0 1
73844: PUSH
73845: LD_INT 3
73847: MINUS
73848: PUSH
73849: LD_VAR 0 2
73853: PUSH
73854: LD_INT 3
73856: MINUS
73857: PUSH
73858: LD_INT 2
73860: PUSH
73861: EMPTY
73862: LIST
73863: LIST
73864: LIST
73865: PUSH
73866: LD_VAR 0 1
73870: PUSH
73871: LD_INT 4
73873: MINUS
73874: PUSH
73875: LD_VAR 0 2
73879: PUSH
73880: LD_INT 1
73882: PUSH
73883: EMPTY
73884: LIST
73885: LIST
73886: LIST
73887: PUSH
73888: LD_VAR 0 1
73892: PUSH
73893: LD_VAR 0 2
73897: PUSH
73898: LD_INT 3
73900: PLUS
73901: PUSH
73902: LD_INT 0
73904: PUSH
73905: EMPTY
73906: LIST
73907: LIST
73908: LIST
73909: PUSH
73910: LD_VAR 0 1
73914: PUSH
73915: LD_INT 4
73917: PLUS
73918: PUSH
73919: LD_VAR 0 2
73923: PUSH
73924: LD_INT 4
73926: PLUS
73927: PUSH
73928: LD_INT 5
73930: PUSH
73931: EMPTY
73932: LIST
73933: LIST
73934: LIST
73935: PUSH
73936: EMPTY
73937: LIST
73938: LIST
73939: LIST
73940: LIST
73941: LIST
73942: ST_TO_ADDR
// end ; 2 :
73943: GO 74502
73945: LD_INT 2
73947: DOUBLE
73948: EQUAL
73949: IFTRUE 73953
73951: GO 74082
73953: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73954: LD_ADDR_VAR 0 5
73958: PUSH
73959: LD_VAR 0 1
73963: PUSH
73964: LD_VAR 0 2
73968: PUSH
73969: LD_INT 3
73971: MINUS
73972: PUSH
73973: LD_INT 3
73975: PUSH
73976: EMPTY
73977: LIST
73978: LIST
73979: LIST
73980: PUSH
73981: LD_VAR 0 1
73985: PUSH
73986: LD_INT 4
73988: PLUS
73989: PUSH
73990: LD_VAR 0 2
73994: PUSH
73995: LD_INT 4
73997: PUSH
73998: EMPTY
73999: LIST
74000: LIST
74001: LIST
74002: PUSH
74003: LD_VAR 0 1
74007: PUSH
74008: LD_VAR 0 2
74012: PUSH
74013: LD_INT 4
74015: PLUS
74016: PUSH
74017: LD_INT 0
74019: PUSH
74020: EMPTY
74021: LIST
74022: LIST
74023: LIST
74024: PUSH
74025: LD_VAR 0 1
74029: PUSH
74030: LD_INT 3
74032: MINUS
74033: PUSH
74034: LD_VAR 0 2
74038: PUSH
74039: LD_INT 1
74041: PUSH
74042: EMPTY
74043: LIST
74044: LIST
74045: LIST
74046: PUSH
74047: LD_VAR 0 1
74051: PUSH
74052: LD_INT 4
74054: MINUS
74055: PUSH
74056: LD_VAR 0 2
74060: PUSH
74061: LD_INT 4
74063: MINUS
74064: PUSH
74065: LD_INT 2
74067: PUSH
74068: EMPTY
74069: LIST
74070: LIST
74071: LIST
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: LIST
74077: LIST
74078: LIST
74079: ST_TO_ADDR
// end ; 3 :
74080: GO 74502
74082: LD_INT 3
74084: DOUBLE
74085: EQUAL
74086: IFTRUE 74090
74088: GO 74223
74090: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74091: LD_ADDR_VAR 0 5
74095: PUSH
74096: LD_VAR 0 1
74100: PUSH
74101: LD_INT 3
74103: PLUS
74104: PUSH
74105: LD_VAR 0 2
74109: PUSH
74110: LD_INT 4
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: LIST
74117: PUSH
74118: LD_VAR 0 1
74122: PUSH
74123: LD_INT 4
74125: PLUS
74126: PUSH
74127: LD_VAR 0 2
74131: PUSH
74132: LD_INT 4
74134: PLUS
74135: PUSH
74136: LD_INT 5
74138: PUSH
74139: EMPTY
74140: LIST
74141: LIST
74142: LIST
74143: PUSH
74144: LD_VAR 0 1
74148: PUSH
74149: LD_INT 4
74151: MINUS
74152: PUSH
74153: LD_VAR 0 2
74157: PUSH
74158: LD_INT 1
74160: PUSH
74161: EMPTY
74162: LIST
74163: LIST
74164: LIST
74165: PUSH
74166: LD_VAR 0 1
74170: PUSH
74171: LD_VAR 0 2
74175: PUSH
74176: LD_INT 4
74178: MINUS
74179: PUSH
74180: LD_INT 3
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: LIST
74187: PUSH
74188: LD_VAR 0 1
74192: PUSH
74193: LD_INT 3
74195: MINUS
74196: PUSH
74197: LD_VAR 0 2
74201: PUSH
74202: LD_INT 3
74204: MINUS
74205: PUSH
74206: LD_INT 2
74208: PUSH
74209: EMPTY
74210: LIST
74211: LIST
74212: LIST
74213: PUSH
74214: EMPTY
74215: LIST
74216: LIST
74217: LIST
74218: LIST
74219: LIST
74220: ST_TO_ADDR
// end ; 4 :
74221: GO 74502
74223: LD_INT 4
74225: DOUBLE
74226: EQUAL
74227: IFTRUE 74231
74229: GO 74364
74231: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74232: LD_ADDR_VAR 0 5
74236: PUSH
74237: LD_VAR 0 1
74241: PUSH
74242: LD_VAR 0 2
74246: PUSH
74247: LD_INT 4
74249: PLUS
74250: PUSH
74251: LD_INT 0
74253: PUSH
74254: EMPTY
74255: LIST
74256: LIST
74257: LIST
74258: PUSH
74259: LD_VAR 0 1
74263: PUSH
74264: LD_INT 3
74266: PLUS
74267: PUSH
74268: LD_VAR 0 2
74272: PUSH
74273: LD_INT 3
74275: PLUS
74276: PUSH
74277: LD_INT 5
74279: PUSH
74280: EMPTY
74281: LIST
74282: LIST
74283: LIST
74284: PUSH
74285: LD_VAR 0 1
74289: PUSH
74290: LD_INT 4
74292: PLUS
74293: PUSH
74294: LD_VAR 0 2
74298: PUSH
74299: LD_INT 4
74301: PUSH
74302: EMPTY
74303: LIST
74304: LIST
74305: LIST
74306: PUSH
74307: LD_VAR 0 1
74311: PUSH
74312: LD_VAR 0 2
74316: PUSH
74317: LD_INT 3
74319: MINUS
74320: PUSH
74321: LD_INT 3
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: LIST
74328: PUSH
74329: LD_VAR 0 1
74333: PUSH
74334: LD_INT 4
74336: MINUS
74337: PUSH
74338: LD_VAR 0 2
74342: PUSH
74343: LD_INT 4
74345: MINUS
74346: PUSH
74347: LD_INT 2
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: LIST
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: LIST
74359: LIST
74360: LIST
74361: ST_TO_ADDR
// end ; 5 :
74362: GO 74502
74364: LD_INT 5
74366: DOUBLE
74367: EQUAL
74368: IFTRUE 74372
74370: GO 74501
74372: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74373: LD_ADDR_VAR 0 5
74377: PUSH
74378: LD_VAR 0 1
74382: PUSH
74383: LD_INT 4
74385: MINUS
74386: PUSH
74387: LD_VAR 0 2
74391: PUSH
74392: LD_INT 1
74394: PUSH
74395: EMPTY
74396: LIST
74397: LIST
74398: LIST
74399: PUSH
74400: LD_VAR 0 1
74404: PUSH
74405: LD_VAR 0 2
74409: PUSH
74410: LD_INT 4
74412: MINUS
74413: PUSH
74414: LD_INT 3
74416: PUSH
74417: EMPTY
74418: LIST
74419: LIST
74420: LIST
74421: PUSH
74422: LD_VAR 0 1
74426: PUSH
74427: LD_INT 4
74429: PLUS
74430: PUSH
74431: LD_VAR 0 2
74435: PUSH
74436: LD_INT 4
74438: PLUS
74439: PUSH
74440: LD_INT 5
74442: PUSH
74443: EMPTY
74444: LIST
74445: LIST
74446: LIST
74447: PUSH
74448: LD_VAR 0 1
74452: PUSH
74453: LD_INT 3
74455: PLUS
74456: PUSH
74457: LD_VAR 0 2
74461: PUSH
74462: LD_INT 4
74464: PUSH
74465: EMPTY
74466: LIST
74467: LIST
74468: LIST
74469: PUSH
74470: LD_VAR 0 1
74474: PUSH
74475: LD_VAR 0 2
74479: PUSH
74480: LD_INT 3
74482: PLUS
74483: PUSH
74484: LD_INT 0
74486: PUSH
74487: EMPTY
74488: LIST
74489: LIST
74490: LIST
74491: PUSH
74492: EMPTY
74493: LIST
74494: LIST
74495: LIST
74496: LIST
74497: LIST
74498: ST_TO_ADDR
// end ; end ;
74499: GO 74502
74501: POP
// result := list ;
74502: LD_ADDR_VAR 0 4
74506: PUSH
74507: LD_VAR 0 5
74511: ST_TO_ADDR
// end ;
74512: LD_VAR 0 4
74516: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74517: LD_INT 0
74519: PPUSH
74520: PPUSH
74521: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74522: LD_VAR 0 1
74526: NOT
74527: PUSH
74528: LD_VAR 0 2
74532: PUSH
74533: LD_INT 1
74535: PUSH
74536: LD_INT 2
74538: PUSH
74539: LD_INT 3
74541: PUSH
74542: LD_INT 4
74544: PUSH
74545: EMPTY
74546: LIST
74547: LIST
74548: LIST
74549: LIST
74550: IN
74551: NOT
74552: OR
74553: IFFALSE 74557
// exit ;
74555: GO 74649
// tmp := [ ] ;
74557: LD_ADDR_VAR 0 5
74561: PUSH
74562: EMPTY
74563: ST_TO_ADDR
// for i in units do
74564: LD_ADDR_VAR 0 4
74568: PUSH
74569: LD_VAR 0 1
74573: PUSH
74574: FOR_IN
74575: IFFALSE 74618
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74577: LD_ADDR_VAR 0 5
74581: PUSH
74582: LD_VAR 0 5
74586: PPUSH
74587: LD_VAR 0 5
74591: PUSH
74592: LD_INT 1
74594: PLUS
74595: PPUSH
74596: LD_VAR 0 4
74600: PPUSH
74601: LD_VAR 0 2
74605: PPUSH
74606: CALL_OW 259
74610: PPUSH
74611: CALL_OW 2
74615: ST_TO_ADDR
74616: GO 74574
74618: POP
74619: POP
// if not tmp then
74620: LD_VAR 0 5
74624: NOT
74625: IFFALSE 74629
// exit ;
74627: GO 74649
// result := SortListByListDesc ( units , tmp ) ;
74629: LD_ADDR_VAR 0 3
74633: PUSH
74634: LD_VAR 0 1
74638: PPUSH
74639: LD_VAR 0 5
74643: PPUSH
74644: CALL_OW 77
74648: ST_TO_ADDR
// end ;
74649: LD_VAR 0 3
74653: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74654: LD_INT 0
74656: PPUSH
74657: PPUSH
74658: PPUSH
// result := false ;
74659: LD_ADDR_VAR 0 3
74663: PUSH
74664: LD_INT 0
74666: ST_TO_ADDR
// x := GetX ( building ) ;
74667: LD_ADDR_VAR 0 4
74671: PUSH
74672: LD_VAR 0 2
74676: PPUSH
74677: CALL_OW 250
74681: ST_TO_ADDR
// y := GetY ( building ) ;
74682: LD_ADDR_VAR 0 5
74686: PUSH
74687: LD_VAR 0 2
74691: PPUSH
74692: CALL_OW 251
74696: ST_TO_ADDR
// if not building or not x or not y then
74697: LD_VAR 0 2
74701: NOT
74702: PUSH
74703: LD_VAR 0 4
74707: NOT
74708: OR
74709: PUSH
74710: LD_VAR 0 5
74714: NOT
74715: OR
74716: IFFALSE 74720
// exit ;
74718: GO 74812
// if GetTaskList ( unit ) then
74720: LD_VAR 0 1
74724: PPUSH
74725: CALL_OW 437
74729: IFFALSE 74812
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74731: LD_STRING e
74733: PUSH
74734: LD_VAR 0 1
74738: PPUSH
74739: CALL_OW 437
74743: PUSH
74744: LD_INT 1
74746: ARRAY
74747: PUSH
74748: LD_INT 1
74750: ARRAY
74751: EQUAL
74752: PUSH
74753: LD_VAR 0 4
74757: PUSH
74758: LD_VAR 0 1
74762: PPUSH
74763: CALL_OW 437
74767: PUSH
74768: LD_INT 1
74770: ARRAY
74771: PUSH
74772: LD_INT 2
74774: ARRAY
74775: EQUAL
74776: AND
74777: PUSH
74778: LD_VAR 0 5
74782: PUSH
74783: LD_VAR 0 1
74787: PPUSH
74788: CALL_OW 437
74792: PUSH
74793: LD_INT 1
74795: ARRAY
74796: PUSH
74797: LD_INT 3
74799: ARRAY
74800: EQUAL
74801: AND
74802: IFFALSE 74812
// result := true end ;
74804: LD_ADDR_VAR 0 3
74808: PUSH
74809: LD_INT 1
74811: ST_TO_ADDR
// end ;
74812: LD_VAR 0 3
74816: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74817: LD_INT 0
74819: PPUSH
// result := false ;
74820: LD_ADDR_VAR 0 4
74824: PUSH
74825: LD_INT 0
74827: ST_TO_ADDR
// if GetTaskList ( unit ) then
74828: LD_VAR 0 1
74832: PPUSH
74833: CALL_OW 437
74837: IFFALSE 74920
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74839: LD_STRING M
74841: PUSH
74842: LD_VAR 0 1
74846: PPUSH
74847: CALL_OW 437
74851: PUSH
74852: LD_INT 1
74854: ARRAY
74855: PUSH
74856: LD_INT 1
74858: ARRAY
74859: EQUAL
74860: PUSH
74861: LD_VAR 0 2
74865: PUSH
74866: LD_VAR 0 1
74870: PPUSH
74871: CALL_OW 437
74875: PUSH
74876: LD_INT 1
74878: ARRAY
74879: PUSH
74880: LD_INT 2
74882: ARRAY
74883: EQUAL
74884: AND
74885: PUSH
74886: LD_VAR 0 3
74890: PUSH
74891: LD_VAR 0 1
74895: PPUSH
74896: CALL_OW 437
74900: PUSH
74901: LD_INT 1
74903: ARRAY
74904: PUSH
74905: LD_INT 3
74907: ARRAY
74908: EQUAL
74909: AND
74910: IFFALSE 74920
// result := true ;
74912: LD_ADDR_VAR 0 4
74916: PUSH
74917: LD_INT 1
74919: ST_TO_ADDR
// end ; end ;
74920: LD_VAR 0 4
74924: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74925: LD_INT 0
74927: PPUSH
74928: PPUSH
74929: PPUSH
74930: PPUSH
// if not unit or not area then
74931: LD_VAR 0 1
74935: NOT
74936: PUSH
74937: LD_VAR 0 2
74941: NOT
74942: OR
74943: IFFALSE 74947
// exit ;
74945: GO 75111
// tmp := AreaToList ( area , i ) ;
74947: LD_ADDR_VAR 0 6
74951: PUSH
74952: LD_VAR 0 2
74956: PPUSH
74957: LD_VAR 0 5
74961: PPUSH
74962: CALL_OW 517
74966: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74967: LD_ADDR_VAR 0 5
74971: PUSH
74972: DOUBLE
74973: LD_INT 1
74975: DEC
74976: ST_TO_ADDR
74977: LD_VAR 0 6
74981: PUSH
74982: LD_INT 1
74984: ARRAY
74985: PUSH
74986: FOR_TO
74987: IFFALSE 75109
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74989: LD_ADDR_VAR 0 7
74993: PUSH
74994: LD_VAR 0 6
74998: PUSH
74999: LD_INT 1
75001: ARRAY
75002: PUSH
75003: LD_VAR 0 5
75007: ARRAY
75008: PUSH
75009: LD_VAR 0 6
75013: PUSH
75014: LD_INT 2
75016: ARRAY
75017: PUSH
75018: LD_VAR 0 5
75022: ARRAY
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75028: LD_VAR 0 7
75032: PUSH
75033: LD_INT 1
75035: ARRAY
75036: PPUSH
75037: LD_VAR 0 7
75041: PUSH
75042: LD_INT 2
75044: ARRAY
75045: PPUSH
75046: CALL_OW 428
75050: PUSH
75051: LD_INT 0
75053: EQUAL
75054: IFFALSE 75107
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75056: LD_VAR 0 1
75060: PPUSH
75061: LD_VAR 0 7
75065: PUSH
75066: LD_INT 1
75068: ARRAY
75069: PPUSH
75070: LD_VAR 0 7
75074: PUSH
75075: LD_INT 2
75077: ARRAY
75078: PPUSH
75079: LD_VAR 0 3
75083: PPUSH
75084: CALL_OW 48
// result := IsPlaced ( unit ) ;
75088: LD_ADDR_VAR 0 4
75092: PUSH
75093: LD_VAR 0 1
75097: PPUSH
75098: CALL_OW 305
75102: ST_TO_ADDR
// exit ;
75103: POP
75104: POP
75105: GO 75111
// end ; end ;
75107: GO 74986
75109: POP
75110: POP
// end ;
75111: LD_VAR 0 4
75115: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75116: LD_INT 0
75118: PPUSH
75119: PPUSH
75120: PPUSH
// if not side or side > 8 then
75121: LD_VAR 0 1
75125: NOT
75126: PUSH
75127: LD_VAR 0 1
75131: PUSH
75132: LD_INT 8
75134: GREATER
75135: OR
75136: IFFALSE 75140
// exit ;
75138: GO 75327
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75140: LD_ADDR_VAR 0 4
75144: PUSH
75145: LD_INT 22
75147: PUSH
75148: LD_VAR 0 1
75152: PUSH
75153: EMPTY
75154: LIST
75155: LIST
75156: PUSH
75157: LD_INT 21
75159: PUSH
75160: LD_INT 3
75162: PUSH
75163: EMPTY
75164: LIST
75165: LIST
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: PPUSH
75171: CALL_OW 69
75175: ST_TO_ADDR
// if not tmp then
75176: LD_VAR 0 4
75180: NOT
75181: IFFALSE 75185
// exit ;
75183: GO 75327
// enable_addtolog := true ;
75185: LD_ADDR_OWVAR 81
75189: PUSH
75190: LD_INT 1
75192: ST_TO_ADDR
// AddToLog ( [ ) ;
75193: LD_STRING [
75195: PPUSH
75196: CALL_OW 561
// for i in tmp do
75200: LD_ADDR_VAR 0 3
75204: PUSH
75205: LD_VAR 0 4
75209: PUSH
75210: FOR_IN
75211: IFFALSE 75318
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75213: LD_STRING [
75215: PUSH
75216: LD_VAR 0 3
75220: PPUSH
75221: CALL_OW 266
75225: STR
75226: PUSH
75227: LD_STRING , 
75229: STR
75230: PUSH
75231: LD_VAR 0 3
75235: PPUSH
75236: CALL_OW 250
75240: STR
75241: PUSH
75242: LD_STRING , 
75244: STR
75245: PUSH
75246: LD_VAR 0 3
75250: PPUSH
75251: CALL_OW 251
75255: STR
75256: PUSH
75257: LD_STRING , 
75259: STR
75260: PUSH
75261: LD_VAR 0 3
75265: PPUSH
75266: CALL_OW 254
75270: STR
75271: PUSH
75272: LD_STRING , 
75274: STR
75275: PUSH
75276: LD_VAR 0 3
75280: PPUSH
75281: LD_INT 1
75283: PPUSH
75284: CALL_OW 268
75288: STR
75289: PUSH
75290: LD_STRING , 
75292: STR
75293: PUSH
75294: LD_VAR 0 3
75298: PPUSH
75299: LD_INT 2
75301: PPUSH
75302: CALL_OW 268
75306: STR
75307: PUSH
75308: LD_STRING ],
75310: STR
75311: PPUSH
75312: CALL_OW 561
// end ;
75316: GO 75210
75318: POP
75319: POP
// AddToLog ( ]; ) ;
75320: LD_STRING ];
75322: PPUSH
75323: CALL_OW 561
// end ;
75327: LD_VAR 0 2
75331: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75332: LD_INT 0
75334: PPUSH
75335: PPUSH
75336: PPUSH
75337: PPUSH
75338: PPUSH
// if not area or not rate or not max then
75339: LD_VAR 0 1
75343: NOT
75344: PUSH
75345: LD_VAR 0 2
75349: NOT
75350: OR
75351: PUSH
75352: LD_VAR 0 4
75356: NOT
75357: OR
75358: IFFALSE 75362
// exit ;
75360: GO 75551
// while 1 do
75362: LD_INT 1
75364: IFFALSE 75551
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75366: LD_ADDR_VAR 0 9
75370: PUSH
75371: LD_VAR 0 1
75375: PPUSH
75376: LD_INT 1
75378: PPUSH
75379: CALL_OW 287
75383: PUSH
75384: LD_INT 10
75386: MUL
75387: ST_TO_ADDR
// r := rate / 10 ;
75388: LD_ADDR_VAR 0 7
75392: PUSH
75393: LD_VAR 0 2
75397: PUSH
75398: LD_INT 10
75400: DIVREAL
75401: ST_TO_ADDR
// time := 1 1$00 ;
75402: LD_ADDR_VAR 0 8
75406: PUSH
75407: LD_INT 2100
75409: ST_TO_ADDR
// if amount < min then
75410: LD_VAR 0 9
75414: PUSH
75415: LD_VAR 0 3
75419: LESS
75420: IFFALSE 75438
// r := r * 2 else
75422: LD_ADDR_VAR 0 7
75426: PUSH
75427: LD_VAR 0 7
75431: PUSH
75432: LD_INT 2
75434: MUL
75435: ST_TO_ADDR
75436: GO 75464
// if amount > max then
75438: LD_VAR 0 9
75442: PUSH
75443: LD_VAR 0 4
75447: GREATER
75448: IFFALSE 75464
// r := r / 2 ;
75450: LD_ADDR_VAR 0 7
75454: PUSH
75455: LD_VAR 0 7
75459: PUSH
75460: LD_INT 2
75462: DIVREAL
75463: ST_TO_ADDR
// time := time / r ;
75464: LD_ADDR_VAR 0 8
75468: PUSH
75469: LD_VAR 0 8
75473: PUSH
75474: LD_VAR 0 7
75478: DIVREAL
75479: ST_TO_ADDR
// if time < 0 then
75480: LD_VAR 0 8
75484: PUSH
75485: LD_INT 0
75487: LESS
75488: IFFALSE 75505
// time := time * - 1 ;
75490: LD_ADDR_VAR 0 8
75494: PUSH
75495: LD_VAR 0 8
75499: PUSH
75500: LD_INT 1
75502: NEG
75503: MUL
75504: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75505: LD_VAR 0 8
75509: PUSH
75510: LD_INT 35
75512: PPUSH
75513: LD_INT 875
75515: PPUSH
75516: CALL_OW 12
75520: PLUS
75521: PPUSH
75522: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75526: LD_INT 1
75528: PPUSH
75529: LD_INT 5
75531: PPUSH
75532: CALL_OW 12
75536: PPUSH
75537: LD_VAR 0 1
75541: PPUSH
75542: LD_INT 1
75544: PPUSH
75545: CALL_OW 55
// end ;
75549: GO 75362
// end ;
75551: LD_VAR 0 5
75555: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75556: LD_INT 0
75558: PPUSH
75559: PPUSH
75560: PPUSH
75561: PPUSH
75562: PPUSH
75563: PPUSH
75564: PPUSH
75565: PPUSH
// if not turrets or not factories then
75566: LD_VAR 0 1
75570: NOT
75571: PUSH
75572: LD_VAR 0 2
75576: NOT
75577: OR
75578: IFFALSE 75582
// exit ;
75580: GO 75889
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75582: LD_ADDR_VAR 0 10
75586: PUSH
75587: LD_INT 5
75589: PUSH
75590: LD_INT 6
75592: PUSH
75593: EMPTY
75594: LIST
75595: LIST
75596: PUSH
75597: LD_INT 2
75599: PUSH
75600: LD_INT 4
75602: PUSH
75603: EMPTY
75604: LIST
75605: LIST
75606: PUSH
75607: LD_INT 3
75609: PUSH
75610: LD_INT 5
75612: PUSH
75613: EMPTY
75614: LIST
75615: LIST
75616: PUSH
75617: EMPTY
75618: LIST
75619: LIST
75620: LIST
75621: PUSH
75622: LD_INT 24
75624: PUSH
75625: LD_INT 25
75627: PUSH
75628: EMPTY
75629: LIST
75630: LIST
75631: PUSH
75632: LD_INT 23
75634: PUSH
75635: LD_INT 27
75637: PUSH
75638: EMPTY
75639: LIST
75640: LIST
75641: PUSH
75642: EMPTY
75643: LIST
75644: LIST
75645: PUSH
75646: LD_INT 42
75648: PUSH
75649: LD_INT 43
75651: PUSH
75652: EMPTY
75653: LIST
75654: LIST
75655: PUSH
75656: LD_INT 44
75658: PUSH
75659: LD_INT 46
75661: PUSH
75662: EMPTY
75663: LIST
75664: LIST
75665: PUSH
75666: LD_INT 45
75668: PUSH
75669: LD_INT 47
75671: PUSH
75672: EMPTY
75673: LIST
75674: LIST
75675: PUSH
75676: EMPTY
75677: LIST
75678: LIST
75679: LIST
75680: PUSH
75681: EMPTY
75682: LIST
75683: LIST
75684: LIST
75685: ST_TO_ADDR
// result := [ ] ;
75686: LD_ADDR_VAR 0 3
75690: PUSH
75691: EMPTY
75692: ST_TO_ADDR
// for i in turrets do
75693: LD_ADDR_VAR 0 4
75697: PUSH
75698: LD_VAR 0 1
75702: PUSH
75703: FOR_IN
75704: IFFALSE 75887
// begin nat := GetNation ( i ) ;
75706: LD_ADDR_VAR 0 7
75710: PUSH
75711: LD_VAR 0 4
75715: PPUSH
75716: CALL_OW 248
75720: ST_TO_ADDR
// weapon := 0 ;
75721: LD_ADDR_VAR 0 8
75725: PUSH
75726: LD_INT 0
75728: ST_TO_ADDR
// if not nat then
75729: LD_VAR 0 7
75733: NOT
75734: IFFALSE 75738
// continue ;
75736: GO 75703
// for j in list [ nat ] do
75738: LD_ADDR_VAR 0 5
75742: PUSH
75743: LD_VAR 0 10
75747: PUSH
75748: LD_VAR 0 7
75752: ARRAY
75753: PUSH
75754: FOR_IN
75755: IFFALSE 75796
// if GetBWeapon ( i ) = j [ 1 ] then
75757: LD_VAR 0 4
75761: PPUSH
75762: CALL_OW 269
75766: PUSH
75767: LD_VAR 0 5
75771: PUSH
75772: LD_INT 1
75774: ARRAY
75775: EQUAL
75776: IFFALSE 75794
// begin weapon := j [ 2 ] ;
75778: LD_ADDR_VAR 0 8
75782: PUSH
75783: LD_VAR 0 5
75787: PUSH
75788: LD_INT 2
75790: ARRAY
75791: ST_TO_ADDR
// break ;
75792: GO 75796
// end ;
75794: GO 75754
75796: POP
75797: POP
// if not weapon then
75798: LD_VAR 0 8
75802: NOT
75803: IFFALSE 75807
// continue ;
75805: GO 75703
// for k in factories do
75807: LD_ADDR_VAR 0 6
75811: PUSH
75812: LD_VAR 0 2
75816: PUSH
75817: FOR_IN
75818: IFFALSE 75883
// begin weapons := AvailableWeaponList ( k ) ;
75820: LD_ADDR_VAR 0 9
75824: PUSH
75825: LD_VAR 0 6
75829: PPUSH
75830: CALL_OW 478
75834: ST_TO_ADDR
// if not weapons then
75835: LD_VAR 0 9
75839: NOT
75840: IFFALSE 75844
// continue ;
75842: GO 75817
// if weapon in weapons then
75844: LD_VAR 0 8
75848: PUSH
75849: LD_VAR 0 9
75853: IN
75854: IFFALSE 75881
// begin result := [ i , weapon ] ;
75856: LD_ADDR_VAR 0 3
75860: PUSH
75861: LD_VAR 0 4
75865: PUSH
75866: LD_VAR 0 8
75870: PUSH
75871: EMPTY
75872: LIST
75873: LIST
75874: ST_TO_ADDR
// exit ;
75875: POP
75876: POP
75877: POP
75878: POP
75879: GO 75889
// end ; end ;
75881: GO 75817
75883: POP
75884: POP
// end ;
75885: GO 75703
75887: POP
75888: POP
// end ;
75889: LD_VAR 0 3
75893: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75894: LD_INT 0
75896: PPUSH
// if not side or side > 8 then
75897: LD_VAR 0 3
75901: NOT
75902: PUSH
75903: LD_VAR 0 3
75907: PUSH
75908: LD_INT 8
75910: GREATER
75911: OR
75912: IFFALSE 75916
// exit ;
75914: GO 75975
// if not range then
75916: LD_VAR 0 4
75920: NOT
75921: IFFALSE 75932
// range := - 12 ;
75923: LD_ADDR_VAR 0 4
75927: PUSH
75928: LD_INT 12
75930: NEG
75931: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75932: LD_VAR 0 1
75936: PPUSH
75937: LD_VAR 0 2
75941: PPUSH
75942: LD_VAR 0 3
75946: PPUSH
75947: LD_VAR 0 4
75951: PPUSH
75952: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75956: LD_VAR 0 1
75960: PPUSH
75961: LD_VAR 0 2
75965: PPUSH
75966: LD_VAR 0 3
75970: PPUSH
75971: CALL_OW 331
// end ;
75975: LD_VAR 0 5
75979: RET
// export function Video ( mode ) ; begin
75980: LD_INT 0
75982: PPUSH
// ingame_video = mode ;
75983: LD_ADDR_OWVAR 52
75987: PUSH
75988: LD_VAR 0 1
75992: ST_TO_ADDR
// interface_hidden = mode ;
75993: LD_ADDR_OWVAR 54
75997: PUSH
75998: LD_VAR 0 1
76002: ST_TO_ADDR
// end ;
76003: LD_VAR 0 2
76007: RET
// export function Join ( array , element ) ; begin
76008: LD_INT 0
76010: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76011: LD_ADDR_VAR 0 3
76015: PUSH
76016: LD_VAR 0 1
76020: PPUSH
76021: LD_VAR 0 1
76025: PUSH
76026: LD_INT 1
76028: PLUS
76029: PPUSH
76030: LD_VAR 0 2
76034: PPUSH
76035: CALL_OW 1
76039: ST_TO_ADDR
// end ;
76040: LD_VAR 0 3
76044: RET
// export function JoinUnion ( array , element ) ; begin
76045: LD_INT 0
76047: PPUSH
// result := array union element ;
76048: LD_ADDR_VAR 0 3
76052: PUSH
76053: LD_VAR 0 1
76057: PUSH
76058: LD_VAR 0 2
76062: UNION
76063: ST_TO_ADDR
// end ;
76064: LD_VAR 0 3
76068: RET
// export function GetBehemoths ( side ) ; begin
76069: LD_INT 0
76071: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76072: LD_ADDR_VAR 0 2
76076: PUSH
76077: LD_INT 22
76079: PUSH
76080: LD_VAR 0 1
76084: PUSH
76085: EMPTY
76086: LIST
76087: LIST
76088: PUSH
76089: LD_INT 31
76091: PUSH
76092: LD_INT 25
76094: PUSH
76095: EMPTY
76096: LIST
76097: LIST
76098: PUSH
76099: EMPTY
76100: LIST
76101: LIST
76102: PPUSH
76103: CALL_OW 69
76107: ST_TO_ADDR
// end ;
76108: LD_VAR 0 2
76112: RET
// export function Shuffle ( array ) ; var i , index ; begin
76113: LD_INT 0
76115: PPUSH
76116: PPUSH
76117: PPUSH
// result := [ ] ;
76118: LD_ADDR_VAR 0 2
76122: PUSH
76123: EMPTY
76124: ST_TO_ADDR
// if not array then
76125: LD_VAR 0 1
76129: NOT
76130: IFFALSE 76134
// exit ;
76132: GO 76233
// Randomize ;
76134: CALL_OW 10
// for i = array downto 1 do
76138: LD_ADDR_VAR 0 3
76142: PUSH
76143: DOUBLE
76144: LD_VAR 0 1
76148: INC
76149: ST_TO_ADDR
76150: LD_INT 1
76152: PUSH
76153: FOR_DOWNTO
76154: IFFALSE 76231
// begin index := rand ( 1 , array ) ;
76156: LD_ADDR_VAR 0 4
76160: PUSH
76161: LD_INT 1
76163: PPUSH
76164: LD_VAR 0 1
76168: PPUSH
76169: CALL_OW 12
76173: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76174: LD_ADDR_VAR 0 2
76178: PUSH
76179: LD_VAR 0 2
76183: PPUSH
76184: LD_VAR 0 2
76188: PUSH
76189: LD_INT 1
76191: PLUS
76192: PPUSH
76193: LD_VAR 0 1
76197: PUSH
76198: LD_VAR 0 4
76202: ARRAY
76203: PPUSH
76204: CALL_OW 2
76208: ST_TO_ADDR
// array := Delete ( array , index ) ;
76209: LD_ADDR_VAR 0 1
76213: PUSH
76214: LD_VAR 0 1
76218: PPUSH
76219: LD_VAR 0 4
76223: PPUSH
76224: CALL_OW 3
76228: ST_TO_ADDR
// end ;
76229: GO 76153
76231: POP
76232: POP
// end ;
76233: LD_VAR 0 2
76237: RET
// export function GetBaseMaterials ( base ) ; begin
76238: LD_INT 0
76240: PPUSH
// result := [ 0 , 0 , 0 ] ;
76241: LD_ADDR_VAR 0 2
76245: PUSH
76246: LD_INT 0
76248: PUSH
76249: LD_INT 0
76251: PUSH
76252: LD_INT 0
76254: PUSH
76255: EMPTY
76256: LIST
76257: LIST
76258: LIST
76259: ST_TO_ADDR
// if not base then
76260: LD_VAR 0 1
76264: NOT
76265: IFFALSE 76269
// exit ;
76267: GO 76318
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76269: LD_ADDR_VAR 0 2
76273: PUSH
76274: LD_VAR 0 1
76278: PPUSH
76279: LD_INT 1
76281: PPUSH
76282: CALL_OW 275
76286: PUSH
76287: LD_VAR 0 1
76291: PPUSH
76292: LD_INT 2
76294: PPUSH
76295: CALL_OW 275
76299: PUSH
76300: LD_VAR 0 1
76304: PPUSH
76305: LD_INT 3
76307: PPUSH
76308: CALL_OW 275
76312: PUSH
76313: EMPTY
76314: LIST
76315: LIST
76316: LIST
76317: ST_TO_ADDR
// end ;
76318: LD_VAR 0 2
76322: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76323: LD_INT 0
76325: PPUSH
76326: PPUSH
// result := array ;
76327: LD_ADDR_VAR 0 3
76331: PUSH
76332: LD_VAR 0 1
76336: ST_TO_ADDR
// if size >= result then
76337: LD_VAR 0 2
76341: PUSH
76342: LD_VAR 0 3
76346: GREATEREQUAL
76347: IFFALSE 76351
// exit ;
76349: GO 76401
// if size then
76351: LD_VAR 0 2
76355: IFFALSE 76401
// for i := array downto size do
76357: LD_ADDR_VAR 0 4
76361: PUSH
76362: DOUBLE
76363: LD_VAR 0 1
76367: INC
76368: ST_TO_ADDR
76369: LD_VAR 0 2
76373: PUSH
76374: FOR_DOWNTO
76375: IFFALSE 76399
// result := Delete ( result , result ) ;
76377: LD_ADDR_VAR 0 3
76381: PUSH
76382: LD_VAR 0 3
76386: PPUSH
76387: LD_VAR 0 3
76391: PPUSH
76392: CALL_OW 3
76396: ST_TO_ADDR
76397: GO 76374
76399: POP
76400: POP
// end ;
76401: LD_VAR 0 3
76405: RET
// export function ComExit ( unit ) ; var tmp ; begin
76406: LD_INT 0
76408: PPUSH
76409: PPUSH
// if not IsInUnit ( unit ) then
76410: LD_VAR 0 1
76414: PPUSH
76415: CALL_OW 310
76419: NOT
76420: IFFALSE 76424
// exit ;
76422: GO 76484
// tmp := IsInUnit ( unit ) ;
76424: LD_ADDR_VAR 0 3
76428: PUSH
76429: LD_VAR 0 1
76433: PPUSH
76434: CALL_OW 310
76438: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76439: LD_VAR 0 3
76443: PPUSH
76444: CALL_OW 247
76448: PUSH
76449: LD_INT 2
76451: EQUAL
76452: IFFALSE 76465
// ComExitVehicle ( unit ) else
76454: LD_VAR 0 1
76458: PPUSH
76459: CALL_OW 121
76463: GO 76474
// ComExitBuilding ( unit ) ;
76465: LD_VAR 0 1
76469: PPUSH
76470: CALL_OW 122
// result := tmp ;
76474: LD_ADDR_VAR 0 2
76478: PUSH
76479: LD_VAR 0 3
76483: ST_TO_ADDR
// end ;
76484: LD_VAR 0 2
76488: RET
// export function ComExitAll ( units ) ; var i ; begin
76489: LD_INT 0
76491: PPUSH
76492: PPUSH
// if not units then
76493: LD_VAR 0 1
76497: NOT
76498: IFFALSE 76502
// exit ;
76500: GO 76528
// for i in units do
76502: LD_ADDR_VAR 0 3
76506: PUSH
76507: LD_VAR 0 1
76511: PUSH
76512: FOR_IN
76513: IFFALSE 76526
// ComExit ( i ) ;
76515: LD_VAR 0 3
76519: PPUSH
76520: CALL 76406 0 1
76524: GO 76512
76526: POP
76527: POP
// end ;
76528: LD_VAR 0 2
76532: RET
// export function ResetHc ; begin
76533: LD_INT 0
76535: PPUSH
// InitHc ;
76536: CALL_OW 19
// hc_importance := 0 ;
76540: LD_ADDR_OWVAR 32
76544: PUSH
76545: LD_INT 0
76547: ST_TO_ADDR
// end ;
76548: LD_VAR 0 1
76552: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76553: LD_INT 0
76555: PPUSH
76556: PPUSH
76557: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76558: LD_ADDR_VAR 0 6
76562: PUSH
76563: LD_VAR 0 1
76567: PUSH
76568: LD_VAR 0 3
76572: PLUS
76573: PUSH
76574: LD_INT 2
76576: DIV
76577: ST_TO_ADDR
// if _x < 0 then
76578: LD_VAR 0 6
76582: PUSH
76583: LD_INT 0
76585: LESS
76586: IFFALSE 76603
// _x := _x * - 1 ;
76588: LD_ADDR_VAR 0 6
76592: PUSH
76593: LD_VAR 0 6
76597: PUSH
76598: LD_INT 1
76600: NEG
76601: MUL
76602: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76603: LD_ADDR_VAR 0 7
76607: PUSH
76608: LD_VAR 0 2
76612: PUSH
76613: LD_VAR 0 4
76617: PLUS
76618: PUSH
76619: LD_INT 2
76621: DIV
76622: ST_TO_ADDR
// if _y < 0 then
76623: LD_VAR 0 7
76627: PUSH
76628: LD_INT 0
76630: LESS
76631: IFFALSE 76648
// _y := _y * - 1 ;
76633: LD_ADDR_VAR 0 7
76637: PUSH
76638: LD_VAR 0 7
76642: PUSH
76643: LD_INT 1
76645: NEG
76646: MUL
76647: ST_TO_ADDR
// result := [ _x , _y ] ;
76648: LD_ADDR_VAR 0 5
76652: PUSH
76653: LD_VAR 0 6
76657: PUSH
76658: LD_VAR 0 7
76662: PUSH
76663: EMPTY
76664: LIST
76665: LIST
76666: ST_TO_ADDR
// end ;
76667: LD_VAR 0 5
76671: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76672: LD_INT 0
76674: PPUSH
76675: PPUSH
76676: PPUSH
76677: PPUSH
// task := GetTaskList ( unit ) ;
76678: LD_ADDR_VAR 0 7
76682: PUSH
76683: LD_VAR 0 1
76687: PPUSH
76688: CALL_OW 437
76692: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76693: LD_VAR 0 7
76697: NOT
76698: PUSH
76699: LD_VAR 0 1
76703: PPUSH
76704: LD_VAR 0 2
76708: PPUSH
76709: CALL_OW 308
76713: NOT
76714: AND
76715: IFFALSE 76719
// exit ;
76717: GO 76837
// if IsInArea ( unit , area ) then
76719: LD_VAR 0 1
76723: PPUSH
76724: LD_VAR 0 2
76728: PPUSH
76729: CALL_OW 308
76733: IFFALSE 76751
// begin ComMoveToArea ( unit , goAway ) ;
76735: LD_VAR 0 1
76739: PPUSH
76740: LD_VAR 0 3
76744: PPUSH
76745: CALL_OW 113
// exit ;
76749: GO 76837
// end ; if task [ 1 ] [ 1 ] <> M then
76751: LD_VAR 0 7
76755: PUSH
76756: LD_INT 1
76758: ARRAY
76759: PUSH
76760: LD_INT 1
76762: ARRAY
76763: PUSH
76764: LD_STRING M
76766: NONEQUAL
76767: IFFALSE 76771
// exit ;
76769: GO 76837
// x := task [ 1 ] [ 2 ] ;
76771: LD_ADDR_VAR 0 5
76775: PUSH
76776: LD_VAR 0 7
76780: PUSH
76781: LD_INT 1
76783: ARRAY
76784: PUSH
76785: LD_INT 2
76787: ARRAY
76788: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76789: LD_ADDR_VAR 0 6
76793: PUSH
76794: LD_VAR 0 7
76798: PUSH
76799: LD_INT 1
76801: ARRAY
76802: PUSH
76803: LD_INT 3
76805: ARRAY
76806: ST_TO_ADDR
// if InArea ( x , y , area ) then
76807: LD_VAR 0 5
76811: PPUSH
76812: LD_VAR 0 6
76816: PPUSH
76817: LD_VAR 0 2
76821: PPUSH
76822: CALL_OW 309
76826: IFFALSE 76837
// ComStop ( unit ) ;
76828: LD_VAR 0 1
76832: PPUSH
76833: CALL_OW 141
// end ;
76837: LD_VAR 0 4
76841: RET
// export function Abs ( value ) ; begin
76842: LD_INT 0
76844: PPUSH
// result := value ;
76845: LD_ADDR_VAR 0 2
76849: PUSH
76850: LD_VAR 0 1
76854: ST_TO_ADDR
// if value < 0 then
76855: LD_VAR 0 1
76859: PUSH
76860: LD_INT 0
76862: LESS
76863: IFFALSE 76880
// result := value * - 1 ;
76865: LD_ADDR_VAR 0 2
76869: PUSH
76870: LD_VAR 0 1
76874: PUSH
76875: LD_INT 1
76877: NEG
76878: MUL
76879: ST_TO_ADDR
// end ;
76880: LD_VAR 0 2
76884: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76885: LD_INT 0
76887: PPUSH
76888: PPUSH
76889: PPUSH
76890: PPUSH
76891: PPUSH
76892: PPUSH
76893: PPUSH
76894: PPUSH
// if not unit or not building then
76895: LD_VAR 0 1
76899: NOT
76900: PUSH
76901: LD_VAR 0 2
76905: NOT
76906: OR
76907: IFFALSE 76911
// exit ;
76909: GO 77137
// x := GetX ( building ) ;
76911: LD_ADDR_VAR 0 4
76915: PUSH
76916: LD_VAR 0 2
76920: PPUSH
76921: CALL_OW 250
76925: ST_TO_ADDR
// y := GetY ( building ) ;
76926: LD_ADDR_VAR 0 6
76930: PUSH
76931: LD_VAR 0 2
76935: PPUSH
76936: CALL_OW 251
76940: ST_TO_ADDR
// d := GetDir ( building ) ;
76941: LD_ADDR_VAR 0 8
76945: PUSH
76946: LD_VAR 0 2
76950: PPUSH
76951: CALL_OW 254
76955: ST_TO_ADDR
// r := 4 ;
76956: LD_ADDR_VAR 0 9
76960: PUSH
76961: LD_INT 4
76963: ST_TO_ADDR
// for i := 1 to 5 do
76964: LD_ADDR_VAR 0 10
76968: PUSH
76969: DOUBLE
76970: LD_INT 1
76972: DEC
76973: ST_TO_ADDR
76974: LD_INT 5
76976: PUSH
76977: FOR_TO
76978: IFFALSE 77135
// begin _x := ShiftX ( x , d , r + i ) ;
76980: LD_ADDR_VAR 0 5
76984: PUSH
76985: LD_VAR 0 4
76989: PPUSH
76990: LD_VAR 0 8
76994: PPUSH
76995: LD_VAR 0 9
76999: PUSH
77000: LD_VAR 0 10
77004: PLUS
77005: PPUSH
77006: CALL_OW 272
77010: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77011: LD_ADDR_VAR 0 7
77015: PUSH
77016: LD_VAR 0 6
77020: PPUSH
77021: LD_VAR 0 8
77025: PPUSH
77026: LD_VAR 0 9
77030: PUSH
77031: LD_VAR 0 10
77035: PLUS
77036: PPUSH
77037: CALL_OW 273
77041: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77042: LD_VAR 0 5
77046: PPUSH
77047: LD_VAR 0 7
77051: PPUSH
77052: CALL_OW 488
77056: PUSH
77057: LD_VAR 0 5
77061: PPUSH
77062: LD_VAR 0 7
77066: PPUSH
77067: CALL_OW 428
77071: PPUSH
77072: CALL_OW 247
77076: PUSH
77077: LD_INT 3
77079: PUSH
77080: LD_INT 2
77082: PUSH
77083: EMPTY
77084: LIST
77085: LIST
77086: IN
77087: NOT
77088: AND
77089: IFFALSE 77133
// begin ComMoveXY ( unit , _x , _y ) ;
77091: LD_VAR 0 1
77095: PPUSH
77096: LD_VAR 0 5
77100: PPUSH
77101: LD_VAR 0 7
77105: PPUSH
77106: CALL_OW 111
// result := [ _x , _y ] ;
77110: LD_ADDR_VAR 0 3
77114: PUSH
77115: LD_VAR 0 5
77119: PUSH
77120: LD_VAR 0 7
77124: PUSH
77125: EMPTY
77126: LIST
77127: LIST
77128: ST_TO_ADDR
// exit ;
77129: POP
77130: POP
77131: GO 77137
// end ; end ;
77133: GO 76977
77135: POP
77136: POP
// end ;
77137: LD_VAR 0 3
77141: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77142: LD_INT 0
77144: PPUSH
77145: PPUSH
77146: PPUSH
// result := 0 ;
77147: LD_ADDR_VAR 0 3
77151: PUSH
77152: LD_INT 0
77154: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77155: LD_VAR 0 1
77159: PUSH
77160: LD_INT 0
77162: LESS
77163: PUSH
77164: LD_VAR 0 1
77168: PUSH
77169: LD_INT 8
77171: GREATER
77172: OR
77173: PUSH
77174: LD_VAR 0 2
77178: PUSH
77179: LD_INT 0
77181: LESS
77182: OR
77183: PUSH
77184: LD_VAR 0 2
77188: PUSH
77189: LD_INT 8
77191: GREATER
77192: OR
77193: IFFALSE 77197
// exit ;
77195: GO 77272
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77197: LD_ADDR_VAR 0 4
77201: PUSH
77202: LD_INT 22
77204: PUSH
77205: LD_VAR 0 2
77209: PUSH
77210: EMPTY
77211: LIST
77212: LIST
77213: PPUSH
77214: CALL_OW 69
77218: PUSH
77219: FOR_IN
77220: IFFALSE 77270
// begin un := UnitShoot ( i ) ;
77222: LD_ADDR_VAR 0 5
77226: PUSH
77227: LD_VAR 0 4
77231: PPUSH
77232: CALL_OW 504
77236: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77237: LD_VAR 0 5
77241: PPUSH
77242: CALL_OW 255
77246: PUSH
77247: LD_VAR 0 1
77251: EQUAL
77252: IFFALSE 77268
// begin result := un ;
77254: LD_ADDR_VAR 0 3
77258: PUSH
77259: LD_VAR 0 5
77263: ST_TO_ADDR
// exit ;
77264: POP
77265: POP
77266: GO 77272
// end ; end ;
77268: GO 77219
77270: POP
77271: POP
// end ;
77272: LD_VAR 0 3
77276: RET
// export function GetCargoBay ( units ) ; begin
77277: LD_INT 0
77279: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77280: LD_ADDR_VAR 0 2
77284: PUSH
77285: LD_VAR 0 1
77289: PPUSH
77290: LD_INT 2
77292: PUSH
77293: LD_INT 34
77295: PUSH
77296: LD_INT 12
77298: PUSH
77299: EMPTY
77300: LIST
77301: LIST
77302: PUSH
77303: LD_INT 34
77305: PUSH
77306: LD_INT 51
77308: PUSH
77309: EMPTY
77310: LIST
77311: LIST
77312: PUSH
77313: LD_INT 34
77315: PUSH
77316: LD_INT 32
77318: PUSH
77319: EMPTY
77320: LIST
77321: LIST
77322: PUSH
77323: LD_INT 34
77325: PUSH
77326: LD_INT 89
77328: PUSH
77329: EMPTY
77330: LIST
77331: LIST
77332: PUSH
77333: EMPTY
77334: LIST
77335: LIST
77336: LIST
77337: LIST
77338: LIST
77339: PPUSH
77340: CALL_OW 72
77344: ST_TO_ADDR
// end ;
77345: LD_VAR 0 2
77349: RET
// export function Negate ( value ) ; begin
77350: LD_INT 0
77352: PPUSH
// result := not value ;
77353: LD_ADDR_VAR 0 2
77357: PUSH
77358: LD_VAR 0 1
77362: NOT
77363: ST_TO_ADDR
// end ;
77364: LD_VAR 0 2
77368: RET
// export function Inc ( value ) ; begin
77369: LD_INT 0
77371: PPUSH
// result := value + 1 ;
77372: LD_ADDR_VAR 0 2
77376: PUSH
77377: LD_VAR 0 1
77381: PUSH
77382: LD_INT 1
77384: PLUS
77385: ST_TO_ADDR
// end ;
77386: LD_VAR 0 2
77390: RET
// export function Dec ( value ) ; begin
77391: LD_INT 0
77393: PPUSH
// result := value - 1 ;
77394: LD_ADDR_VAR 0 2
77398: PUSH
77399: LD_VAR 0 1
77403: PUSH
77404: LD_INT 1
77406: MINUS
77407: ST_TO_ADDR
// end ;
77408: LD_VAR 0 2
77412: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77413: LD_INT 0
77415: PPUSH
77416: PPUSH
77417: PPUSH
77418: PPUSH
77419: PPUSH
77420: PPUSH
77421: PPUSH
77422: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77423: LD_VAR 0 1
77427: PPUSH
77428: LD_VAR 0 2
77432: PPUSH
77433: CALL_OW 488
77437: NOT
77438: PUSH
77439: LD_VAR 0 3
77443: PPUSH
77444: LD_VAR 0 4
77448: PPUSH
77449: CALL_OW 488
77453: NOT
77454: OR
77455: IFFALSE 77468
// begin result := - 1 ;
77457: LD_ADDR_VAR 0 5
77461: PUSH
77462: LD_INT 1
77464: NEG
77465: ST_TO_ADDR
// exit ;
77466: GO 77703
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77468: LD_ADDR_VAR 0 12
77472: PUSH
77473: LD_VAR 0 1
77477: PPUSH
77478: LD_VAR 0 2
77482: PPUSH
77483: LD_VAR 0 3
77487: PPUSH
77488: LD_VAR 0 4
77492: PPUSH
77493: CALL 76553 0 4
77497: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77498: LD_ADDR_VAR 0 11
77502: PUSH
77503: LD_VAR 0 1
77507: PPUSH
77508: LD_VAR 0 2
77512: PPUSH
77513: LD_VAR 0 12
77517: PUSH
77518: LD_INT 1
77520: ARRAY
77521: PPUSH
77522: LD_VAR 0 12
77526: PUSH
77527: LD_INT 2
77529: ARRAY
77530: PPUSH
77531: CALL_OW 298
77535: ST_TO_ADDR
// distance := 9999 ;
77536: LD_ADDR_VAR 0 10
77540: PUSH
77541: LD_INT 9999
77543: ST_TO_ADDR
// for i := 0 to 5 do
77544: LD_ADDR_VAR 0 6
77548: PUSH
77549: DOUBLE
77550: LD_INT 0
77552: DEC
77553: ST_TO_ADDR
77554: LD_INT 5
77556: PUSH
77557: FOR_TO
77558: IFFALSE 77701
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77560: LD_ADDR_VAR 0 7
77564: PUSH
77565: LD_VAR 0 1
77569: PPUSH
77570: LD_VAR 0 6
77574: PPUSH
77575: LD_VAR 0 11
77579: PPUSH
77580: CALL_OW 272
77584: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77585: LD_ADDR_VAR 0 8
77589: PUSH
77590: LD_VAR 0 2
77594: PPUSH
77595: LD_VAR 0 6
77599: PPUSH
77600: LD_VAR 0 11
77604: PPUSH
77605: CALL_OW 273
77609: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77610: LD_VAR 0 7
77614: PPUSH
77615: LD_VAR 0 8
77619: PPUSH
77620: CALL_OW 488
77624: NOT
77625: IFFALSE 77629
// continue ;
77627: GO 77557
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77629: LD_ADDR_VAR 0 9
77633: PUSH
77634: LD_VAR 0 12
77638: PUSH
77639: LD_INT 1
77641: ARRAY
77642: PPUSH
77643: LD_VAR 0 12
77647: PUSH
77648: LD_INT 2
77650: ARRAY
77651: PPUSH
77652: LD_VAR 0 7
77656: PPUSH
77657: LD_VAR 0 8
77661: PPUSH
77662: CALL_OW 298
77666: ST_TO_ADDR
// if tmp < distance then
77667: LD_VAR 0 9
77671: PUSH
77672: LD_VAR 0 10
77676: LESS
77677: IFFALSE 77699
// begin result := i ;
77679: LD_ADDR_VAR 0 5
77683: PUSH
77684: LD_VAR 0 6
77688: ST_TO_ADDR
// distance := tmp ;
77689: LD_ADDR_VAR 0 10
77693: PUSH
77694: LD_VAR 0 9
77698: ST_TO_ADDR
// end ; end ;
77699: GO 77557
77701: POP
77702: POP
// end ;
77703: LD_VAR 0 5
77707: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77708: LD_INT 0
77710: PPUSH
77711: PPUSH
// if not driver or not IsInUnit ( driver ) then
77712: LD_VAR 0 1
77716: NOT
77717: PUSH
77718: LD_VAR 0 1
77722: PPUSH
77723: CALL_OW 310
77727: NOT
77728: OR
77729: IFFALSE 77733
// exit ;
77731: GO 77823
// vehicle := IsInUnit ( driver ) ;
77733: LD_ADDR_VAR 0 3
77737: PUSH
77738: LD_VAR 0 1
77742: PPUSH
77743: CALL_OW 310
77747: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77748: LD_VAR 0 1
77752: PPUSH
77753: LD_STRING \
77755: PUSH
77756: LD_INT 0
77758: PUSH
77759: LD_INT 0
77761: PUSH
77762: LD_INT 0
77764: PUSH
77765: LD_INT 0
77767: PUSH
77768: LD_INT 0
77770: PUSH
77771: LD_INT 0
77773: PUSH
77774: EMPTY
77775: LIST
77776: LIST
77777: LIST
77778: LIST
77779: LIST
77780: LIST
77781: LIST
77782: PUSH
77783: LD_STRING E
77785: PUSH
77786: LD_INT 0
77788: PUSH
77789: LD_INT 0
77791: PUSH
77792: LD_VAR 0 3
77796: PUSH
77797: LD_INT 0
77799: PUSH
77800: LD_INT 0
77802: PUSH
77803: LD_INT 0
77805: PUSH
77806: EMPTY
77807: LIST
77808: LIST
77809: LIST
77810: LIST
77811: LIST
77812: LIST
77813: LIST
77814: PUSH
77815: EMPTY
77816: LIST
77817: LIST
77818: PPUSH
77819: CALL_OW 446
// end ;
77823: LD_VAR 0 2
77827: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77828: LD_INT 0
77830: PPUSH
77831: PPUSH
// if not driver or not IsInUnit ( driver ) then
77832: LD_VAR 0 1
77836: NOT
77837: PUSH
77838: LD_VAR 0 1
77842: PPUSH
77843: CALL_OW 310
77847: NOT
77848: OR
77849: IFFALSE 77853
// exit ;
77851: GO 77943
// vehicle := IsInUnit ( driver ) ;
77853: LD_ADDR_VAR 0 3
77857: PUSH
77858: LD_VAR 0 1
77862: PPUSH
77863: CALL_OW 310
77867: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77868: LD_VAR 0 1
77872: PPUSH
77873: LD_STRING \
77875: PUSH
77876: LD_INT 0
77878: PUSH
77879: LD_INT 0
77881: PUSH
77882: LD_INT 0
77884: PUSH
77885: LD_INT 0
77887: PUSH
77888: LD_INT 0
77890: PUSH
77891: LD_INT 0
77893: PUSH
77894: EMPTY
77895: LIST
77896: LIST
77897: LIST
77898: LIST
77899: LIST
77900: LIST
77901: LIST
77902: PUSH
77903: LD_STRING E
77905: PUSH
77906: LD_INT 0
77908: PUSH
77909: LD_INT 0
77911: PUSH
77912: LD_VAR 0 3
77916: PUSH
77917: LD_INT 0
77919: PUSH
77920: LD_INT 0
77922: PUSH
77923: LD_INT 0
77925: PUSH
77926: EMPTY
77927: LIST
77928: LIST
77929: LIST
77930: LIST
77931: LIST
77932: LIST
77933: LIST
77934: PUSH
77935: EMPTY
77936: LIST
77937: LIST
77938: PPUSH
77939: CALL_OW 447
// end ;
77943: LD_VAR 0 2
77947: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77948: LD_INT 0
77950: PPUSH
77951: PPUSH
77952: PPUSH
// tmp := [ ] ;
77953: LD_ADDR_VAR 0 5
77957: PUSH
77958: EMPTY
77959: ST_TO_ADDR
// for i in units do
77960: LD_ADDR_VAR 0 4
77964: PUSH
77965: LD_VAR 0 1
77969: PUSH
77970: FOR_IN
77971: IFFALSE 78009
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77973: LD_ADDR_VAR 0 5
77977: PUSH
77978: LD_VAR 0 5
77982: PPUSH
77983: LD_VAR 0 5
77987: PUSH
77988: LD_INT 1
77990: PLUS
77991: PPUSH
77992: LD_VAR 0 4
77996: PPUSH
77997: CALL_OW 256
78001: PPUSH
78002: CALL_OW 2
78006: ST_TO_ADDR
78007: GO 77970
78009: POP
78010: POP
// if not tmp then
78011: LD_VAR 0 5
78015: NOT
78016: IFFALSE 78020
// exit ;
78018: GO 78068
// if asc then
78020: LD_VAR 0 2
78024: IFFALSE 78048
// result := SortListByListAsc ( units , tmp ) else
78026: LD_ADDR_VAR 0 3
78030: PUSH
78031: LD_VAR 0 1
78035: PPUSH
78036: LD_VAR 0 5
78040: PPUSH
78041: CALL_OW 76
78045: ST_TO_ADDR
78046: GO 78068
// result := SortListByListDesc ( units , tmp ) ;
78048: LD_ADDR_VAR 0 3
78052: PUSH
78053: LD_VAR 0 1
78057: PPUSH
78058: LD_VAR 0 5
78062: PPUSH
78063: CALL_OW 77
78067: ST_TO_ADDR
// end ;
78068: LD_VAR 0 3
78072: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78073: LD_INT 0
78075: PPUSH
78076: PPUSH
// task := GetTaskList ( mech ) ;
78077: LD_ADDR_VAR 0 4
78081: PUSH
78082: LD_VAR 0 1
78086: PPUSH
78087: CALL_OW 437
78091: ST_TO_ADDR
// if not task then
78092: LD_VAR 0 4
78096: NOT
78097: IFFALSE 78101
// exit ;
78099: GO 78143
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78101: LD_ADDR_VAR 0 3
78105: PUSH
78106: LD_VAR 0 4
78110: PUSH
78111: LD_INT 1
78113: ARRAY
78114: PUSH
78115: LD_INT 1
78117: ARRAY
78118: PUSH
78119: LD_STRING r
78121: EQUAL
78122: PUSH
78123: LD_VAR 0 4
78127: PUSH
78128: LD_INT 1
78130: ARRAY
78131: PUSH
78132: LD_INT 4
78134: ARRAY
78135: PUSH
78136: LD_VAR 0 2
78140: EQUAL
78141: AND
78142: ST_TO_ADDR
// end ;
78143: LD_VAR 0 3
78147: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78148: LD_INT 0
78150: PPUSH
// SetDir ( unit , d ) ;
78151: LD_VAR 0 1
78155: PPUSH
78156: LD_VAR 0 4
78160: PPUSH
78161: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78165: LD_VAR 0 1
78169: PPUSH
78170: LD_VAR 0 2
78174: PPUSH
78175: LD_VAR 0 3
78179: PPUSH
78180: LD_VAR 0 5
78184: PPUSH
78185: CALL_OW 48
// end ;
78189: LD_VAR 0 6
78193: RET
// export function ToNaturalNumber ( number ) ; begin
78194: LD_INT 0
78196: PPUSH
// result := number div 1 ;
78197: LD_ADDR_VAR 0 2
78201: PUSH
78202: LD_VAR 0 1
78206: PUSH
78207: LD_INT 1
78209: DIV
78210: ST_TO_ADDR
// if number < 0 then
78211: LD_VAR 0 1
78215: PUSH
78216: LD_INT 0
78218: LESS
78219: IFFALSE 78229
// result := 0 ;
78221: LD_ADDR_VAR 0 2
78225: PUSH
78226: LD_INT 0
78228: ST_TO_ADDR
// end ;
78229: LD_VAR 0 2
78233: RET
// export function SortByClass ( units , class ) ; var un ; begin
78234: LD_INT 0
78236: PPUSH
78237: PPUSH
// if not units or not class then
78238: LD_VAR 0 1
78242: NOT
78243: PUSH
78244: LD_VAR 0 2
78248: NOT
78249: OR
78250: IFFALSE 78254
// exit ;
78252: GO 78349
// result := [ ] ;
78254: LD_ADDR_VAR 0 3
78258: PUSH
78259: EMPTY
78260: ST_TO_ADDR
// for un in units do
78261: LD_ADDR_VAR 0 4
78265: PUSH
78266: LD_VAR 0 1
78270: PUSH
78271: FOR_IN
78272: IFFALSE 78347
// if GetClass ( un ) = class then
78274: LD_VAR 0 4
78278: PPUSH
78279: CALL_OW 257
78283: PUSH
78284: LD_VAR 0 2
78288: EQUAL
78289: IFFALSE 78316
// result := Insert ( result , 1 , un ) else
78291: LD_ADDR_VAR 0 3
78295: PUSH
78296: LD_VAR 0 3
78300: PPUSH
78301: LD_INT 1
78303: PPUSH
78304: LD_VAR 0 4
78308: PPUSH
78309: CALL_OW 2
78313: ST_TO_ADDR
78314: GO 78345
// result := Replace ( result , result + 1 , un ) ;
78316: LD_ADDR_VAR 0 3
78320: PUSH
78321: LD_VAR 0 3
78325: PPUSH
78326: LD_VAR 0 3
78330: PUSH
78331: LD_INT 1
78333: PLUS
78334: PPUSH
78335: LD_VAR 0 4
78339: PPUSH
78340: CALL_OW 1
78344: ST_TO_ADDR
78345: GO 78271
78347: POP
78348: POP
// end ;
78349: LD_VAR 0 3
78353: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78354: LD_INT 0
78356: PPUSH
78357: PPUSH
78358: PPUSH
78359: PPUSH
78360: PPUSH
78361: PPUSH
78362: PPUSH
// result := [ ] ;
78363: LD_ADDR_VAR 0 4
78367: PUSH
78368: EMPTY
78369: ST_TO_ADDR
// if x - r < 0 then
78370: LD_VAR 0 1
78374: PUSH
78375: LD_VAR 0 3
78379: MINUS
78380: PUSH
78381: LD_INT 0
78383: LESS
78384: IFFALSE 78396
// min_x := 0 else
78386: LD_ADDR_VAR 0 8
78390: PUSH
78391: LD_INT 0
78393: ST_TO_ADDR
78394: GO 78412
// min_x := x - r ;
78396: LD_ADDR_VAR 0 8
78400: PUSH
78401: LD_VAR 0 1
78405: PUSH
78406: LD_VAR 0 3
78410: MINUS
78411: ST_TO_ADDR
// if y - r < 0 then
78412: LD_VAR 0 2
78416: PUSH
78417: LD_VAR 0 3
78421: MINUS
78422: PUSH
78423: LD_INT 0
78425: LESS
78426: IFFALSE 78438
// min_y := 0 else
78428: LD_ADDR_VAR 0 7
78432: PUSH
78433: LD_INT 0
78435: ST_TO_ADDR
78436: GO 78454
// min_y := y - r ;
78438: LD_ADDR_VAR 0 7
78442: PUSH
78443: LD_VAR 0 2
78447: PUSH
78448: LD_VAR 0 3
78452: MINUS
78453: ST_TO_ADDR
// max_x := x + r ;
78454: LD_ADDR_VAR 0 9
78458: PUSH
78459: LD_VAR 0 1
78463: PUSH
78464: LD_VAR 0 3
78468: PLUS
78469: ST_TO_ADDR
// max_y := y + r ;
78470: LD_ADDR_VAR 0 10
78474: PUSH
78475: LD_VAR 0 2
78479: PUSH
78480: LD_VAR 0 3
78484: PLUS
78485: ST_TO_ADDR
// for _x = min_x to max_x do
78486: LD_ADDR_VAR 0 5
78490: PUSH
78491: DOUBLE
78492: LD_VAR 0 8
78496: DEC
78497: ST_TO_ADDR
78498: LD_VAR 0 9
78502: PUSH
78503: FOR_TO
78504: IFFALSE 78605
// for _y = min_y to max_y do
78506: LD_ADDR_VAR 0 6
78510: PUSH
78511: DOUBLE
78512: LD_VAR 0 7
78516: DEC
78517: ST_TO_ADDR
78518: LD_VAR 0 10
78522: PUSH
78523: FOR_TO
78524: IFFALSE 78601
// begin if not ValidHex ( _x , _y ) then
78526: LD_VAR 0 5
78530: PPUSH
78531: LD_VAR 0 6
78535: PPUSH
78536: CALL_OW 488
78540: NOT
78541: IFFALSE 78545
// continue ;
78543: GO 78523
// if GetResourceTypeXY ( _x , _y ) then
78545: LD_VAR 0 5
78549: PPUSH
78550: LD_VAR 0 6
78554: PPUSH
78555: CALL_OW 283
78559: IFFALSE 78599
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78561: LD_ADDR_VAR 0 4
78565: PUSH
78566: LD_VAR 0 4
78570: PPUSH
78571: LD_VAR 0 4
78575: PUSH
78576: LD_INT 1
78578: PLUS
78579: PPUSH
78580: LD_VAR 0 5
78584: PUSH
78585: LD_VAR 0 6
78589: PUSH
78590: EMPTY
78591: LIST
78592: LIST
78593: PPUSH
78594: CALL_OW 1
78598: ST_TO_ADDR
// end ;
78599: GO 78523
78601: POP
78602: POP
78603: GO 78503
78605: POP
78606: POP
// end ;
78607: LD_VAR 0 4
78611: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78612: LD_INT 0
78614: PPUSH
78615: PPUSH
78616: PPUSH
78617: PPUSH
78618: PPUSH
78619: PPUSH
78620: PPUSH
78621: PPUSH
// if not units then
78622: LD_VAR 0 1
78626: NOT
78627: IFFALSE 78631
// exit ;
78629: GO 79155
// result := UnitFilter ( units , [ f_ok ] ) ;
78631: LD_ADDR_VAR 0 3
78635: PUSH
78636: LD_VAR 0 1
78640: PPUSH
78641: LD_INT 50
78643: PUSH
78644: EMPTY
78645: LIST
78646: PPUSH
78647: CALL_OW 72
78651: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78652: LD_ADDR_VAR 0 8
78656: PUSH
78657: LD_VAR 0 1
78661: PUSH
78662: LD_INT 1
78664: ARRAY
78665: PPUSH
78666: CALL_OW 255
78670: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78671: LD_ADDR_VAR 0 10
78675: PUSH
78676: LD_INT 29
78678: PUSH
78679: LD_INT 91
78681: PUSH
78682: LD_INT 49
78684: PUSH
78685: EMPTY
78686: LIST
78687: LIST
78688: LIST
78689: ST_TO_ADDR
// if not result then
78690: LD_VAR 0 3
78694: NOT
78695: IFFALSE 78699
// exit ;
78697: GO 79155
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78699: LD_ADDR_VAR 0 5
78703: PUSH
78704: LD_INT 81
78706: PUSH
78707: LD_VAR 0 8
78711: PUSH
78712: EMPTY
78713: LIST
78714: LIST
78715: PPUSH
78716: CALL_OW 69
78720: ST_TO_ADDR
// for i in result do
78721: LD_ADDR_VAR 0 4
78725: PUSH
78726: LD_VAR 0 3
78730: PUSH
78731: FOR_IN
78732: IFFALSE 79153
// begin tag := GetTag ( i ) + 1 ;
78734: LD_ADDR_VAR 0 9
78738: PUSH
78739: LD_VAR 0 4
78743: PPUSH
78744: CALL_OW 110
78748: PUSH
78749: LD_INT 1
78751: PLUS
78752: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78753: LD_ADDR_VAR 0 7
78757: PUSH
78758: LD_VAR 0 4
78762: PPUSH
78763: CALL_OW 250
78767: PPUSH
78768: LD_VAR 0 4
78772: PPUSH
78773: CALL_OW 251
78777: PPUSH
78778: LD_INT 6
78780: PPUSH
78781: CALL 78354 0 3
78785: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78786: LD_VAR 0 4
78790: PPUSH
78791: CALL_OW 247
78795: PUSH
78796: LD_INT 2
78798: EQUAL
78799: PUSH
78800: LD_VAR 0 7
78804: AND
78805: PUSH
78806: LD_VAR 0 4
78810: PPUSH
78811: CALL_OW 264
78815: PUSH
78816: LD_VAR 0 10
78820: IN
78821: NOT
78822: AND
78823: IFFALSE 78862
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78825: LD_VAR 0 4
78829: PPUSH
78830: LD_VAR 0 7
78834: PUSH
78835: LD_INT 1
78837: ARRAY
78838: PUSH
78839: LD_INT 1
78841: ARRAY
78842: PPUSH
78843: LD_VAR 0 7
78847: PUSH
78848: LD_INT 1
78850: ARRAY
78851: PUSH
78852: LD_INT 2
78854: ARRAY
78855: PPUSH
78856: CALL_OW 116
78860: GO 79151
// if path > tag then
78862: LD_VAR 0 2
78866: PUSH
78867: LD_VAR 0 9
78871: GREATER
78872: IFFALSE 79080
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
78874: LD_ADDR_VAR 0 6
78878: PUSH
78879: LD_VAR 0 5
78883: PPUSH
78884: LD_INT 91
78886: PUSH
78887: LD_VAR 0 4
78891: PUSH
78892: LD_INT 8
78894: PUSH
78895: EMPTY
78896: LIST
78897: LIST
78898: LIST
78899: PPUSH
78900: CALL_OW 72
78904: ST_TO_ADDR
// if nearEnemy then
78905: LD_VAR 0 6
78909: IFFALSE 78978
// begin if GetWeapon ( i ) = ru_time_lapser then
78911: LD_VAR 0 4
78915: PPUSH
78916: CALL_OW 264
78920: PUSH
78921: LD_INT 49
78923: EQUAL
78924: IFFALSE 78952
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78926: LD_VAR 0 4
78930: PPUSH
78931: LD_VAR 0 6
78935: PPUSH
78936: LD_VAR 0 4
78940: PPUSH
78941: CALL_OW 74
78945: PPUSH
78946: CALL_OW 112
78950: GO 78976
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78952: LD_VAR 0 4
78956: PPUSH
78957: LD_VAR 0 6
78961: PPUSH
78962: LD_VAR 0 4
78966: PPUSH
78967: CALL_OW 74
78971: PPUSH
78972: CALL_OW 115
// end else
78976: GO 79078
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78978: LD_VAR 0 4
78982: PPUSH
78983: LD_VAR 0 2
78987: PUSH
78988: LD_VAR 0 9
78992: ARRAY
78993: PUSH
78994: LD_INT 1
78996: ARRAY
78997: PPUSH
78998: LD_VAR 0 2
79002: PUSH
79003: LD_VAR 0 9
79007: ARRAY
79008: PUSH
79009: LD_INT 2
79011: ARRAY
79012: PPUSH
79013: CALL_OW 297
79017: PUSH
79018: LD_INT 6
79020: GREATER
79021: IFFALSE 79064
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79023: LD_VAR 0 4
79027: PPUSH
79028: LD_VAR 0 2
79032: PUSH
79033: LD_VAR 0 9
79037: ARRAY
79038: PUSH
79039: LD_INT 1
79041: ARRAY
79042: PPUSH
79043: LD_VAR 0 2
79047: PUSH
79048: LD_VAR 0 9
79052: ARRAY
79053: PUSH
79054: LD_INT 2
79056: ARRAY
79057: PPUSH
79058: CALL_OW 114
79062: GO 79078
// SetTag ( i , tag ) ;
79064: LD_VAR 0 4
79068: PPUSH
79069: LD_VAR 0 9
79073: PPUSH
79074: CALL_OW 109
// end else
79078: GO 79151
// if enemy then
79080: LD_VAR 0 5
79084: IFFALSE 79151
// begin if GetWeapon ( i ) = ru_time_lapser then
79086: LD_VAR 0 4
79090: PPUSH
79091: CALL_OW 264
79095: PUSH
79096: LD_INT 49
79098: EQUAL
79099: IFFALSE 79127
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79101: LD_VAR 0 4
79105: PPUSH
79106: LD_VAR 0 5
79110: PPUSH
79111: LD_VAR 0 4
79115: PPUSH
79116: CALL_OW 74
79120: PPUSH
79121: CALL_OW 112
79125: GO 79151
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79127: LD_VAR 0 4
79131: PPUSH
79132: LD_VAR 0 5
79136: PPUSH
79137: LD_VAR 0 4
79141: PPUSH
79142: CALL_OW 74
79146: PPUSH
79147: CALL_OW 115
// end ; end ;
79151: GO 78731
79153: POP
79154: POP
// end ;
79155: LD_VAR 0 3
79159: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79160: LD_INT 0
79162: PPUSH
79163: PPUSH
79164: PPUSH
// if not unit or IsInUnit ( unit ) then
79165: LD_VAR 0 1
79169: NOT
79170: PUSH
79171: LD_VAR 0 1
79175: PPUSH
79176: CALL_OW 310
79180: OR
79181: IFFALSE 79185
// exit ;
79183: GO 79276
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79185: LD_ADDR_VAR 0 4
79189: PUSH
79190: LD_VAR 0 1
79194: PPUSH
79195: CALL_OW 250
79199: PPUSH
79200: LD_VAR 0 2
79204: PPUSH
79205: LD_INT 1
79207: PPUSH
79208: CALL_OW 272
79212: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79213: LD_ADDR_VAR 0 5
79217: PUSH
79218: LD_VAR 0 1
79222: PPUSH
79223: CALL_OW 251
79227: PPUSH
79228: LD_VAR 0 2
79232: PPUSH
79233: LD_INT 1
79235: PPUSH
79236: CALL_OW 273
79240: ST_TO_ADDR
// if ValidHex ( x , y ) then
79241: LD_VAR 0 4
79245: PPUSH
79246: LD_VAR 0 5
79250: PPUSH
79251: CALL_OW 488
79255: IFFALSE 79276
// ComTurnXY ( unit , x , y ) ;
79257: LD_VAR 0 1
79261: PPUSH
79262: LD_VAR 0 4
79266: PPUSH
79267: LD_VAR 0 5
79271: PPUSH
79272: CALL_OW 118
// end ;
79276: LD_VAR 0 3
79280: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79281: LD_INT 0
79283: PPUSH
79284: PPUSH
// result := false ;
79285: LD_ADDR_VAR 0 3
79289: PUSH
79290: LD_INT 0
79292: ST_TO_ADDR
// if not units then
79293: LD_VAR 0 2
79297: NOT
79298: IFFALSE 79302
// exit ;
79300: GO 79347
// for i in units do
79302: LD_ADDR_VAR 0 4
79306: PUSH
79307: LD_VAR 0 2
79311: PUSH
79312: FOR_IN
79313: IFFALSE 79345
// if See ( side , i ) then
79315: LD_VAR 0 1
79319: PPUSH
79320: LD_VAR 0 4
79324: PPUSH
79325: CALL_OW 292
79329: IFFALSE 79343
// begin result := true ;
79331: LD_ADDR_VAR 0 3
79335: PUSH
79336: LD_INT 1
79338: ST_TO_ADDR
// exit ;
79339: POP
79340: POP
79341: GO 79347
// end ;
79343: GO 79312
79345: POP
79346: POP
// end ;
79347: LD_VAR 0 3
79351: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79352: LD_INT 0
79354: PPUSH
79355: PPUSH
79356: PPUSH
79357: PPUSH
// if not unit or not points then
79358: LD_VAR 0 1
79362: NOT
79363: PUSH
79364: LD_VAR 0 2
79368: NOT
79369: OR
79370: IFFALSE 79374
// exit ;
79372: GO 79464
// dist := 99999 ;
79374: LD_ADDR_VAR 0 5
79378: PUSH
79379: LD_INT 99999
79381: ST_TO_ADDR
// for i in points do
79382: LD_ADDR_VAR 0 4
79386: PUSH
79387: LD_VAR 0 2
79391: PUSH
79392: FOR_IN
79393: IFFALSE 79462
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79395: LD_ADDR_VAR 0 6
79399: PUSH
79400: LD_VAR 0 1
79404: PPUSH
79405: LD_VAR 0 4
79409: PUSH
79410: LD_INT 1
79412: ARRAY
79413: PPUSH
79414: LD_VAR 0 4
79418: PUSH
79419: LD_INT 2
79421: ARRAY
79422: PPUSH
79423: CALL_OW 297
79427: ST_TO_ADDR
// if tmpDist < dist then
79428: LD_VAR 0 6
79432: PUSH
79433: LD_VAR 0 5
79437: LESS
79438: IFFALSE 79460
// begin result := i ;
79440: LD_ADDR_VAR 0 3
79444: PUSH
79445: LD_VAR 0 4
79449: ST_TO_ADDR
// dist := tmpDist ;
79450: LD_ADDR_VAR 0 5
79454: PUSH
79455: LD_VAR 0 6
79459: ST_TO_ADDR
// end ; end ;
79460: GO 79392
79462: POP
79463: POP
// end ;
79464: LD_VAR 0 3
79468: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79469: LD_INT 0
79471: PPUSH
// uc_side := side ;
79472: LD_ADDR_OWVAR 20
79476: PUSH
79477: LD_VAR 0 1
79481: ST_TO_ADDR
// uc_nation := 3 ;
79482: LD_ADDR_OWVAR 21
79486: PUSH
79487: LD_INT 3
79489: ST_TO_ADDR
// vc_chassis := 25 ;
79490: LD_ADDR_OWVAR 37
79494: PUSH
79495: LD_INT 25
79497: ST_TO_ADDR
// vc_engine := engine_siberite ;
79498: LD_ADDR_OWVAR 39
79502: PUSH
79503: LD_INT 3
79505: ST_TO_ADDR
// vc_control := control_computer ;
79506: LD_ADDR_OWVAR 38
79510: PUSH
79511: LD_INT 3
79513: ST_TO_ADDR
// vc_weapon := 59 ;
79514: LD_ADDR_OWVAR 40
79518: PUSH
79519: LD_INT 59
79521: ST_TO_ADDR
// result := CreateVehicle ;
79522: LD_ADDR_VAR 0 5
79526: PUSH
79527: CALL_OW 45
79531: ST_TO_ADDR
// SetDir ( result , d ) ;
79532: LD_VAR 0 5
79536: PPUSH
79537: LD_VAR 0 4
79541: PPUSH
79542: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79546: LD_VAR 0 5
79550: PPUSH
79551: LD_VAR 0 2
79555: PPUSH
79556: LD_VAR 0 3
79560: PPUSH
79561: LD_INT 0
79563: PPUSH
79564: CALL_OW 48
// end ;
79568: LD_VAR 0 5
79572: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79573: LD_INT 0
79575: PPUSH
79576: PPUSH
79577: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79578: LD_ADDR_VAR 0 2
79582: PUSH
79583: LD_INT 0
79585: PUSH
79586: LD_INT 0
79588: PUSH
79589: LD_INT 0
79591: PUSH
79592: LD_INT 0
79594: PUSH
79595: EMPTY
79596: LIST
79597: LIST
79598: LIST
79599: LIST
79600: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79601: LD_VAR 0 1
79605: NOT
79606: PUSH
79607: LD_VAR 0 1
79611: PPUSH
79612: CALL_OW 264
79616: PUSH
79617: LD_INT 12
79619: PUSH
79620: LD_INT 51
79622: PUSH
79623: LD_INT 32
79625: PUSH
79626: LD_INT 89
79628: PUSH
79629: EMPTY
79630: LIST
79631: LIST
79632: LIST
79633: LIST
79634: IN
79635: NOT
79636: OR
79637: IFFALSE 79641
// exit ;
79639: GO 79739
// for i := 1 to 3 do
79641: LD_ADDR_VAR 0 3
79645: PUSH
79646: DOUBLE
79647: LD_INT 1
79649: DEC
79650: ST_TO_ADDR
79651: LD_INT 3
79653: PUSH
79654: FOR_TO
79655: IFFALSE 79737
// begin tmp := GetCargo ( cargo , i ) ;
79657: LD_ADDR_VAR 0 4
79661: PUSH
79662: LD_VAR 0 1
79666: PPUSH
79667: LD_VAR 0 3
79671: PPUSH
79672: CALL_OW 289
79676: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79677: LD_ADDR_VAR 0 2
79681: PUSH
79682: LD_VAR 0 2
79686: PPUSH
79687: LD_VAR 0 3
79691: PPUSH
79692: LD_VAR 0 4
79696: PPUSH
79697: CALL_OW 1
79701: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79702: LD_ADDR_VAR 0 2
79706: PUSH
79707: LD_VAR 0 2
79711: PPUSH
79712: LD_INT 4
79714: PPUSH
79715: LD_VAR 0 2
79719: PUSH
79720: LD_INT 4
79722: ARRAY
79723: PUSH
79724: LD_VAR 0 4
79728: PLUS
79729: PPUSH
79730: CALL_OW 1
79734: ST_TO_ADDR
// end ;
79735: GO 79654
79737: POP
79738: POP
// end ;
79739: LD_VAR 0 2
79743: RET
// export function Length ( array ) ; begin
79744: LD_INT 0
79746: PPUSH
// result := array + 0 ;
79747: LD_ADDR_VAR 0 2
79751: PUSH
79752: LD_VAR 0 1
79756: PUSH
79757: LD_INT 0
79759: PLUS
79760: ST_TO_ADDR
// end ;
79761: LD_VAR 0 2
79765: RET
// export function PrepareArray ( array ) ; begin
79766: LD_INT 0
79768: PPUSH
// result := array diff 0 ;
79769: LD_ADDR_VAR 0 2
79773: PUSH
79774: LD_VAR 0 1
79778: PUSH
79779: LD_INT 0
79781: DIFF
79782: ST_TO_ADDR
// if not result [ 1 ] then
79783: LD_VAR 0 2
79787: PUSH
79788: LD_INT 1
79790: ARRAY
79791: NOT
79792: IFFALSE 79812
// result := Delete ( result , 1 ) ;
79794: LD_ADDR_VAR 0 2
79798: PUSH
79799: LD_VAR 0 2
79803: PPUSH
79804: LD_INT 1
79806: PPUSH
79807: CALL_OW 3
79811: ST_TO_ADDR
// end ; end_of_file
79812: LD_VAR 0 2
79816: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79817: LD_VAR 0 1
79821: PUSH
79822: LD_INT 200
79824: DOUBLE
79825: GREATEREQUAL
79826: IFFALSE 79834
79828: LD_INT 299
79830: DOUBLE
79831: LESSEQUAL
79832: IFTRUE 79836
79834: GO 79868
79836: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79837: LD_VAR 0 1
79841: PPUSH
79842: LD_VAR 0 2
79846: PPUSH
79847: LD_VAR 0 3
79851: PPUSH
79852: LD_VAR 0 4
79856: PPUSH
79857: LD_VAR 0 5
79861: PPUSH
79862: CALL 34719 0 5
79866: GO 79945
79868: LD_INT 300
79870: DOUBLE
79871: GREATEREQUAL
79872: IFFALSE 79880
79874: LD_INT 399
79876: DOUBLE
79877: LESSEQUAL
79878: IFTRUE 79882
79880: GO 79944
79882: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79883: LD_VAR 0 1
79887: PPUSH
79888: LD_VAR 0 2
79892: PPUSH
79893: LD_VAR 0 3
79897: PPUSH
79898: LD_VAR 0 4
79902: PPUSH
79903: LD_VAR 0 5
79907: PPUSH
79908: LD_VAR 0 6
79912: PPUSH
79913: LD_VAR 0 7
79917: PPUSH
79918: LD_VAR 0 8
79922: PPUSH
79923: LD_VAR 0 9
79927: PPUSH
79928: LD_VAR 0 10
79932: PPUSH
79933: LD_VAR 0 11
79937: PPUSH
79938: CALL 31052 0 11
79942: GO 79945
79944: POP
// end ;
79945: PPOPN 11
79947: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79948: LD_VAR 0 1
79952: PPUSH
79953: LD_VAR 0 2
79957: PPUSH
79958: LD_VAR 0 3
79962: PPUSH
79963: LD_VAR 0 4
79967: PPUSH
79968: LD_VAR 0 5
79972: PPUSH
79973: CALL 34455 0 5
// end ; end_of_file
79977: PPOPN 5
79979: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79980: LD_VAR 0 1
79984: PPUSH
79985: LD_VAR 0 2
79989: PPUSH
79990: LD_VAR 0 3
79994: PPUSH
79995: LD_VAR 0 4
79999: PPUSH
80000: LD_VAR 0 5
80004: PPUSH
80005: LD_VAR 0 6
80009: PPUSH
80010: CALL 18745 0 6
// end ;
80014: PPOPN 6
80016: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80017: LD_INT 0
80019: PPUSH
// begin if not units then
80020: LD_VAR 0 1
80024: NOT
80025: IFFALSE 80029
// exit ;
80027: GO 80029
// end ;
80029: PPOPN 7
80031: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80032: CALL 18716 0 0
// end ;
80036: PPOPN 1
80038: END
