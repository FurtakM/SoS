// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3059 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2273 0 0
// PrepareWesternBase ;
  41: CALL 2502 0 0
// Action ;
  45: CALL 5323 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
// uc_side := 4 ;
1155: LD_ADDR_OWVAR 20
1159: PUSH
1160: LD_INT 4
1162: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1163: LD_ADDR_EXP 46
1167: PUSH
1168: LD_STRING Powell
1170: PPUSH
1171: LD_INT 0
1173: PPUSH
1174: LD_STRING 
1176: PPUSH
1177: CALL 36566 0 3
1181: ST_TO_ADDR
// uc_side := 1 ;
1182: LD_ADDR_OWVAR 20
1186: PUSH
1187: LD_INT 1
1189: ST_TO_ADDR
// uc_nation := 1 ;
1190: LD_ADDR_OWVAR 21
1194: PUSH
1195: LD_INT 1
1197: ST_TO_ADDR
// if debug then
1198: LD_EXP 1
1202: IFFALSE 1332
// begin for i = 1 to 4 do
1204: LD_ADDR_VAR 0 2
1208: PUSH
1209: DOUBLE
1210: LD_INT 1
1212: DEC
1213: ST_TO_ADDR
1214: LD_INT 4
1216: PUSH
1217: FOR_TO
1218: IFFALSE 1269
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1220: LD_INT 0
1222: PPUSH
1223: LD_INT 1
1225: PPUSH
1226: LD_INT 2
1228: PPUSH
1229: CALL_OW 12
1233: PPUSH
1234: LD_INT 3
1236: PPUSH
1237: CALL_OW 380
// un := CreateHuman ;
1241: LD_ADDR_VAR 0 3
1245: PUSH
1246: CALL_OW 44
1250: ST_TO_ADDR
// others := others ^ un ;
1251: LD_ADDR_VAR 0 5
1255: PUSH
1256: LD_VAR 0 5
1260: PUSH
1261: LD_VAR 0 3
1265: ADD
1266: ST_TO_ADDR
// end ;
1267: GO 1217
1269: POP
1270: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1271: LD_ADDR_VAR 0 6
1275: PUSH
1276: LD_INT 21
1278: PUSH
1279: LD_INT 1
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: LD_INT 51
1287: PUSH
1288: LD_INT 90
1290: PUSH
1291: LD_INT 504
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 21
1304: PUSH
1305: LD_INT 1
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: LD_INT 51
1313: PUSH
1314: LD_INT 80
1316: PUSH
1317: LD_INT 750
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1332: LD_ADDR_EXP 37
1336: PUSH
1337: LD_STRING JMM
1339: PPUSH
1340: LD_EXP 1
1344: NOT
1345: PPUSH
1346: LD_EXP 3
1350: PPUSH
1351: CALL 36566 0 3
1355: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1356: LD_ADDR_EXP 38
1360: PUSH
1361: LD_STRING Bobby
1363: PPUSH
1364: LD_EXP 1
1368: NOT
1369: PPUSH
1370: LD_EXP 3
1374: PPUSH
1375: CALL 36566 0 3
1379: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1380: LD_ADDR_EXP 39
1384: PUSH
1385: LD_STRING Cyrus
1387: PPUSH
1388: LD_EXP 1
1392: NOT
1393: PPUSH
1394: LD_EXP 3
1398: PPUSH
1399: CALL 36566 0 3
1403: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1404: LD_ADDR_EXP 40
1408: PUSH
1409: LD_STRING Lisa
1411: PPUSH
1412: LD_EXP 1
1416: NOT
1417: PPUSH
1418: LD_EXP 3
1422: PPUSH
1423: CALL 36566 0 3
1427: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1428: LD_ADDR_EXP 41
1432: PUSH
1433: LD_STRING Khatam
1435: PPUSH
1436: LD_EXP 1
1440: NOT
1441: PPUSH
1442: LD_EXP 3
1446: PPUSH
1447: CALL 36566 0 3
1451: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1452: LD_ADDR_EXP 42
1456: PUSH
1457: LD_STRING Brian
1459: PPUSH
1460: LD_EXP 1
1464: NOT
1465: PPUSH
1466: LD_EXP 3
1470: PPUSH
1471: CALL 36566 0 3
1475: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1476: LD_ADDR_EXP 43
1480: PUSH
1481: LD_STRING Jerry
1483: PPUSH
1484: LD_EXP 1
1488: NOT
1489: PPUSH
1490: LD_EXP 3
1494: PPUSH
1495: CALL 36566 0 3
1499: ST_TO_ADDR
// if Bobby then
1500: LD_EXP 38
1504: IFFALSE 1535
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1506: LD_ADDR_VAR 0 4
1510: PUSH
1511: LD_VAR 0 4
1515: PPUSH
1516: LD_VAR 0 4
1520: PUSH
1521: LD_INT 1
1523: PLUS
1524: PPUSH
1525: LD_EXP 38
1529: PPUSH
1530: CALL_OW 2
1534: ST_TO_ADDR
// if Cyrus then
1535: LD_EXP 39
1539: IFFALSE 1570
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_VAR 0 4
1550: PPUSH
1551: LD_VAR 0 4
1555: PUSH
1556: LD_INT 1
1558: PLUS
1559: PPUSH
1560: LD_EXP 39
1564: PPUSH
1565: CALL_OW 2
1569: ST_TO_ADDR
// if Lisa then
1570: LD_EXP 40
1574: IFFALSE 1605
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1576: LD_ADDR_VAR 0 4
1580: PUSH
1581: LD_VAR 0 4
1585: PPUSH
1586: LD_VAR 0 4
1590: PUSH
1591: LD_INT 1
1593: PLUS
1594: PPUSH
1595: LD_EXP 40
1599: PPUSH
1600: CALL_OW 2
1604: ST_TO_ADDR
// if Khatam then
1605: LD_EXP 41
1609: IFFALSE 1640
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1611: LD_ADDR_VAR 0 4
1615: PUSH
1616: LD_VAR 0 4
1620: PPUSH
1621: LD_VAR 0 4
1625: PUSH
1626: LD_INT 1
1628: PLUS
1629: PPUSH
1630: LD_EXP 41
1634: PPUSH
1635: CALL_OW 2
1639: ST_TO_ADDR
// if Brian then
1640: LD_EXP 42
1644: IFFALSE 1675
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1646: LD_ADDR_VAR 0 4
1650: PUSH
1651: LD_VAR 0 4
1655: PPUSH
1656: LD_VAR 0 4
1660: PUSH
1661: LD_INT 1
1663: PLUS
1664: PPUSH
1665: LD_EXP 42
1669: PPUSH
1670: CALL_OW 2
1674: ST_TO_ADDR
// if Jerry then
1675: LD_EXP 43
1679: IFFALSE 1710
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1681: LD_ADDR_VAR 0 4
1685: PUSH
1686: LD_VAR 0 4
1690: PPUSH
1691: LD_VAR 0 4
1695: PUSH
1696: LD_INT 1
1698: PLUS
1699: PPUSH
1700: LD_EXP 43
1704: PPUSH
1705: CALL_OW 2
1709: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1710: LD_STRING 02_other_survivors
1712: PPUSH
1713: CALL_OW 28
1717: IFFALSE 1732
// others := CreateCharacterSet ( 02_other_survivors ) ;
1719: LD_ADDR_VAR 0 5
1723: PUSH
1724: LD_STRING 02_other_survivors
1726: PPUSH
1727: CALL_OW 31
1731: ST_TO_ADDR
// if others then
1732: LD_VAR 0 5
1736: IFFALSE 1761
// begin tmp := tmp ^ others ;
1738: LD_ADDR_VAR 0 4
1742: PUSH
1743: LD_VAR 0 4
1747: PUSH
1748: LD_VAR 0 5
1752: ADD
1753: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1754: LD_STRING 02_other_survivors
1756: PPUSH
1757: CALL_OW 40
// end ; jmm_units := tmp ;
1761: LD_ADDR_EXP 4
1765: PUSH
1766: LD_VAR 0 4
1770: ST_TO_ADDR
// if not vehicles then
1771: LD_VAR 0 6
1775: NOT
1776: IFFALSE 1794
// vehicles := LoadVariable ( 02_tanks_1 , 0 ) ;
1778: LD_ADDR_VAR 0 6
1782: PUSH
1783: LD_STRING 02_tanks_1
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: CALL_OW 30
1793: ST_TO_ADDR
// if vehicles then
1794: LD_VAR 0 6
1798: IFFALSE 1992
// begin got_mech := false ;
1800: LD_ADDR_VAR 0 7
1804: PUSH
1805: LD_INT 0
1807: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
1808: LD_VAR 0 4
1812: PPUSH
1813: LD_INT 25
1815: PUSH
1816: LD_INT 3
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PPUSH
1823: CALL_OW 72
1827: IFFALSE 1837
// got_mech := true ;
1829: LD_ADDR_VAR 0 7
1833: PUSH
1834: LD_INT 1
1836: ST_TO_ADDR
// for i = 1 to vehicles do
1837: LD_ADDR_VAR 0 2
1841: PUSH
1842: DOUBLE
1843: LD_INT 1
1845: DEC
1846: ST_TO_ADDR
1847: LD_VAR 0 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1990
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
1855: LD_ADDR_VAR 0 3
1859: PUSH
1860: LD_INT 1
1862: PPUSH
1863: LD_INT 3
1865: PPUSH
1866: LD_VAR 0 6
1870: PUSH
1871: LD_VAR 0 2
1875: ARRAY
1876: PUSH
1877: LD_INT 1
1879: ARRAY
1880: PPUSH
1881: LD_VAR 0 6
1885: PUSH
1886: LD_VAR 0 2
1890: ARRAY
1891: PUSH
1892: LD_INT 2
1894: ARRAY
1895: PPUSH
1896: LD_VAR 0 6
1900: PUSH
1901: LD_VAR 0 2
1905: ARRAY
1906: PUSH
1907: LD_INT 3
1909: ARRAY
1910: PPUSH
1911: LD_VAR 0 6
1915: PUSH
1916: LD_VAR 0 2
1920: ARRAY
1921: PUSH
1922: LD_INT 4
1924: ARRAY
1925: PPUSH
1926: LD_INT 40
1928: PPUSH
1929: CALL 497 0 7
1933: ST_TO_ADDR
// if not got_mech then
1934: LD_VAR 0 7
1938: NOT
1939: IFFALSE 1965
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
1941: LD_VAR 0 3
1945: PPUSH
1946: LD_VAR 0 6
1950: PUSH
1951: LD_VAR 0 2
1955: ARRAY
1956: PUSH
1957: LD_INT 6
1959: ARRAY
1960: PPUSH
1961: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
1965: LD_ADDR_VAR 0 4
1969: PUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: LD_VAR 0 3
1982: PPUSH
1983: CALL_OW 2
1987: ST_TO_ADDR
// end ;
1988: GO 1852
1990: POP
1991: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
1992: LD_EXP 37
1996: PPUSH
1997: LD_INT 194
1999: PPUSH
2000: LD_INT 119
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL_OW 48
// if tmp then
2010: LD_VAR 0 4
2014: IFFALSE 2202
// begin for i in tmp do
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: LD_VAR 0 4
2025: PUSH
2026: FOR_IN
2027: IFFALSE 2200
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2029: LD_VAR 0 2
2033: PPUSH
2034: CALL_OW 257
2038: PUSH
2039: LD_INT 1
2041: NONEQUAL
2042: PUSH
2043: LD_VAR 0 2
2047: PUSH
2048: LD_EXP 41
2052: NONEQUAL
2053: AND
2054: IFFALSE 2068
// SetClass ( i , 1 ) ;
2056: LD_VAR 0 2
2060: PPUSH
2061: LD_INT 1
2063: PPUSH
2064: CALL_OW 336
// if i = Khatam then
2068: LD_VAR 0 2
2072: PUSH
2073: LD_EXP 41
2077: EQUAL
2078: IFFALSE 2092
// SetClass ( i , 4 ) ;
2080: LD_VAR 0 2
2084: PPUSH
2085: LD_INT 4
2087: PPUSH
2088: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2092: LD_ADDR_VAR 0 8
2096: PUSH
2097: LD_INT 22
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 21
2109: PUSH
2110: LD_INT 2
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 58
2119: PUSH
2120: EMPTY
2121: LIST
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: PPUSH
2128: CALL_OW 69
2132: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2133: LD_VAR 0 2
2137: PPUSH
2138: CALL_OW 247
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: PUSH
2147: LD_VAR 0 8
2151: AND
2152: IFFALSE 2174
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2154: LD_VAR 0 2
2158: PPUSH
2159: LD_VAR 0 8
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: CALL_OW 52
2172: GO 2189
// PlaceUnitArea ( i , startArea , false ) ;
2174: LD_VAR 0 2
2178: PPUSH
2179: LD_INT 1
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 49
// ComHold ( i ) ;
2189: LD_VAR 0 2
2193: PPUSH
2194: CALL_OW 140
// end ;
2198: GO 2026
2200: POP
2201: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2202: LD_ADDR_EXP 7
2206: PUSH
2207: LD_STRING 02_mikhailStatus_1
2209: PPUSH
2210: LD_INT 0
2212: PPUSH
2213: CALL_OW 30
2217: ST_TO_ADDR
// if not bierezov_exist and not debug then
2218: LD_EXP 7
2222: NOT
2223: PUSH
2224: LD_EXP 1
2228: NOT
2229: AND
2230: IFFALSE 2234
// exit ;
2232: GO 2268
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2234: LD_ADDR_EXP 45
2238: PUSH
2239: LD_STRING Mikhail
2241: PPUSH
2242: LD_INT 0
2244: PPUSH
2245: LD_STRING 
2247: PPUSH
2248: CALL 36566 0 3
2252: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2253: LD_EXP 45
2257: PPUSH
2258: LD_INT 1
2260: PPUSH
2261: LD_INT 0
2263: PPUSH
2264: CALL_OW 49
// end ;
2268: LD_VAR 0 1
2272: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2273: LD_INT 0
2275: PPUSH
2276: PPUSH
2277: PPUSH
2278: PPUSH
// uc_side := 4 ;
2279: LD_ADDR_OWVAR 20
2283: PUSH
2284: LD_INT 4
2286: ST_TO_ADDR
// uc_nation := 1 ;
2287: LD_ADDR_OWVAR 21
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2295: LD_ADDR_EXP 44
2299: PUSH
2300: LD_STRING Cornell
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: LD_STRING 
2308: PPUSH
2309: CALL 36566 0 3
2313: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2314: LD_ADDR_EXP 6
2318: PUSH
2319: LD_INT 9
2321: PUSH
2322: LD_EXP 4
2326: MINUS
2327: ST_TO_ADDR
// tmp := [ ] ;
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: EMPTY
2334: ST_TO_ADDR
// if cornel_units < 4 then
2335: LD_EXP 6
2339: PUSH
2340: LD_INT 4
2342: LESS
2343: IFFALSE 2353
// cornel_units := 4 ;
2345: LD_ADDR_EXP 6
2349: PUSH
2350: LD_INT 4
2352: ST_TO_ADDR
// for i = 1 to cornel_units do
2353: LD_ADDR_VAR 0 4
2357: PUSH
2358: DOUBLE
2359: LD_INT 1
2361: DEC
2362: ST_TO_ADDR
2363: LD_EXP 6
2367: PUSH
2368: FOR_TO
2369: IFFALSE 2467
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2371: LD_INT 0
2373: PPUSH
2374: LD_INT 1
2376: PUSH
2377: LD_INT 1
2379: PUSH
2380: LD_INT 1
2382: PUSH
2383: LD_INT 2
2385: PUSH
2386: LD_INT 4
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: PUSH
2396: LD_VAR 0 4
2400: PUSH
2401: LD_INT 5
2403: MOD
2404: PUSH
2405: LD_INT 1
2407: PLUS
2408: ARRAY
2409: PPUSH
2410: LD_INT 2
2412: PPUSH
2413: CALL_OW 380
// un := CreateHuman ;
2417: LD_ADDR_VAR 0 3
2421: PUSH
2422: CALL_OW 44
2426: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_VAR 0 2
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_VAR 0 3
2444: PPUSH
2445: CALL_OW 2
2449: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2450: LD_VAR 0 3
2454: PPUSH
2455: LD_INT 2
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: CALL_OW 49
// end ;
2465: GO 2368
2467: POP
2468: POP
// cornel_units := tmp ;
2469: LD_ADDR_EXP 6
2473: PUSH
2474: LD_VAR 0 2
2478: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2479: LD_EXP 44
2483: PPUSH
2484: LD_INT 191
2486: PPUSH
2487: LD_INT 106
2489: PPUSH
2490: LD_INT 0
2492: PPUSH
2493: CALL_OW 48
// end ;
2497: LD_VAR 0 1
2501: RET
// export function PrepareWesternBase ; var i ; begin
2502: LD_INT 0
2504: PPUSH
2505: PPUSH
// uc_side := 8 ;
2506: LD_ADDR_OWVAR 20
2510: PUSH
2511: LD_INT 8
2513: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2514: LD_ADDR_EXP 47
2518: PUSH
2519: LD_STRING Lynch
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: LD_STRING 
2527: PPUSH
2528: CALL 36566 0 3
2532: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2533: LD_ADDR_EXP 48
2537: PUSH
2538: LD_STRING Walker
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: LD_STRING 
2546: PPUSH
2547: CALL 36566 0 3
2551: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2552: LD_ADDR_EXP 49
2556: PUSH
2557: LD_STRING Turner
2559: PPUSH
2560: LD_INT 0
2562: PPUSH
2563: LD_STRING 
2565: PPUSH
2566: CALL 36566 0 3
2570: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2571: LD_ADDR_EXP 50
2575: PUSH
2576: LD_STRING Jillian
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: LD_STRING 
2584: PPUSH
2585: CALL 36566 0 3
2589: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: LD_EXP 47
2599: PUSH
2600: LD_EXP 48
2604: PUSH
2605: LD_EXP 49
2609: PUSH
2610: LD_EXP 50
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: PUSH
2621: FOR_IN
2622: IFFALSE 2650
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
2624: LD_VAR 0 2
2628: PPUSH
2629: LD_INT 3
2631: PPUSH
2632: LD_INT 0
2634: PPUSH
2635: CALL_OW 49
// ComHold ( i ) ;
2639: LD_VAR 0 2
2643: PPUSH
2644: CALL_OW 140
// end ;
2648: GO 2621
2650: POP
2651: POP
// end ;
2652: LD_VAR 0 1
2656: RET
// export function SelectGroup ; var units , selected , i ; begin
2657: LD_INT 0
2659: PPUSH
2660: PPUSH
2661: PPUSH
2662: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
2663: LD_ADDR_VAR 0 2
2667: PUSH
2668: LD_EXP 37
2672: PUSH
2673: LD_INT -3
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PUSH
2680: LD_EXP 4
2684: ADD
2685: PUSH
2686: LD_INT -2
2688: PUSH
2689: LD_INT -4
2691: PUSH
2692: LD_EXP 44
2696: PUSH
2697: LD_EXP 45
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: ADD
2708: PUSH
2709: LD_INT -3
2711: PUSH
2712: EMPTY
2713: LIST
2714: ADD
2715: PUSH
2716: LD_EXP 6
2720: ADD
2721: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
2722: LD_ADDR_VAR 0 3
2726: PUSH
2727: LD_EXP 37
2731: PUSH
2732: LD_STRING Select four characters to go with you
2734: PPUSH
2735: LD_INT 4
2737: PPUSH
2738: LD_INT 4
2740: PPUSH
2741: LD_VAR 0 2
2745: PPUSH
2746: EMPTY
2747: PPUSH
2748: CALL_OW 42
2752: ADD
2753: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
2754: LD_ADDR_EXP 6
2758: PUSH
2759: LD_EXP 4
2763: PUSH
2764: LD_EXP 6
2768: UNION
2769: PUSH
2770: LD_VAR 0 3
2774: DIFF
2775: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_EXP 6
2785: PUSH
2786: LD_EXP 45
2790: ADD
2791: PUSH
2792: FOR_IN
2793: IFFALSE 2824
// if GetSide ( i ) = 1 then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 255
2804: PUSH
2805: LD_INT 1
2807: EQUAL
2808: IFFALSE 2822
// SetSide ( i , 4 ) ;
2810: LD_VAR 0 4
2814: PPUSH
2815: LD_INT 4
2817: PPUSH
2818: CALL_OW 235
2822: GO 2792
2824: POP
2825: POP
// for i in selected do
2826: LD_ADDR_VAR 0 4
2830: PUSH
2831: LD_VAR 0 3
2835: PUSH
2836: FOR_IN
2837: IFFALSE 2868
// if GetSide ( i ) = 4 then
2839: LD_VAR 0 4
2843: PPUSH
2844: CALL_OW 255
2848: PUSH
2849: LD_INT 4
2851: EQUAL
2852: IFFALSE 2866
// SetSide ( i , 1 ) ;
2854: LD_VAR 0 4
2858: PPUSH
2859: LD_INT 1
2861: PPUSH
2862: CALL_OW 235
2866: GO 2836
2868: POP
2869: POP
// jmm_units := jmm_units diff cornel_units ;
2870: LD_ADDR_EXP 4
2874: PUSH
2875: LD_EXP 4
2879: PUSH
2880: LD_EXP 6
2884: DIFF
2885: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
2886: LD_EXP 38
2890: PPUSH
2891: CALL_OW 255
2895: PUSH
2896: LD_INT 4
2898: EQUAL
2899: IFFALSE 2914
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
2901: LD_EXP 3
2905: PUSH
2906: LD_STRING Bobby
2908: STR
2909: PPUSH
2910: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
2914: LD_EXP 39
2918: PPUSH
2919: CALL_OW 255
2923: PUSH
2924: LD_INT 4
2926: EQUAL
2927: IFFALSE 2942
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
2929: LD_EXP 3
2933: PUSH
2934: LD_STRING Cyrus
2936: STR
2937: PPUSH
2938: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
2942: LD_EXP 40
2946: PPUSH
2947: CALL_OW 255
2951: PUSH
2952: LD_INT 4
2954: EQUAL
2955: IFFALSE 2970
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
2957: LD_EXP 3
2961: PUSH
2962: LD_STRING Lisa
2964: STR
2965: PPUSH
2966: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
2970: LD_EXP 41
2974: PPUSH
2975: CALL_OW 255
2979: PUSH
2980: LD_INT 4
2982: EQUAL
2983: IFFALSE 2998
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
2985: LD_EXP 3
2989: PUSH
2990: LD_STRING Khatam
2992: STR
2993: PPUSH
2994: CALL_OW 40
// if GetSide ( Brian ) = 4 then
2998: LD_EXP 42
3002: PPUSH
3003: CALL_OW 255
3007: PUSH
3008: LD_INT 4
3010: EQUAL
3011: IFFALSE 3026
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3013: LD_EXP 3
3017: PUSH
3018: LD_STRING Brian
3020: STR
3021: PPUSH
3022: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3026: LD_EXP 43
3030: PPUSH
3031: CALL_OW 255
3035: PUSH
3036: LD_INT 4
3038: EQUAL
3039: IFFALSE 3054
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3041: LD_EXP 3
3045: PUSH
3046: LD_STRING Jerry
3048: STR
3049: PPUSH
3050: CALL_OW 40
// end ; end_of_file
3054: LD_VAR 0 1
3058: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3059: LD_INT 0
3061: PPUSH
3062: PPUSH
3063: PPUSH
3064: PPUSH
3065: PPUSH
3066: PPUSH
3067: PPUSH
3068: PPUSH
3069: PPUSH
3070: PPUSH
3071: PPUSH
3072: PPUSH
3073: PPUSH
// ru_alert := false ;
3074: LD_ADDR_EXP 60
3078: PUSH
3079: LD_INT 0
3081: ST_TO_ADDR
// ru_produce_list := [ ] ;
3082: LD_ADDR_EXP 57
3086: PUSH
3087: EMPTY
3088: ST_TO_ADDR
// if Difficulty > 1 then
3089: LD_OWVAR 67
3093: PUSH
3094: LD_INT 1
3096: GREATER
3097: IFFALSE 3185
// begin uc_side := 3 ;
3099: LD_ADDR_OWVAR 20
3103: PUSH
3104: LD_INT 3
3106: ST_TO_ADDR
// uc_nation := 3 ;
3107: LD_ADDR_OWVAR 21
3111: PUSH
3112: LD_INT 3
3114: ST_TO_ADDR
// bc_type := b_breastwork ;
3115: LD_ADDR_OWVAR 42
3119: PUSH
3120: LD_INT 31
3122: ST_TO_ADDR
// bc_level := Difficulty ;
3123: LD_ADDR_OWVAR 43
3127: PUSH
3128: LD_OWVAR 67
3132: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3133: LD_INT 22
3135: PPUSH
3136: LD_INT 14
3138: PPUSH
3139: LD_INT 0
3141: PPUSH
3142: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3146: LD_INT 48
3148: PPUSH
3149: LD_INT 46
3151: PPUSH
3152: LD_INT 0
3154: PPUSH
3155: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3159: LD_INT 86
3161: PPUSH
3162: LD_INT 65
3164: PPUSH
3165: LD_INT 5
3167: PPUSH
3168: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3172: LD_INT 165
3174: PPUSH
3175: LD_INT 73
3177: PPUSH
3178: LD_INT 5
3180: PPUSH
3181: CALL_OW 47
// end ; if Difficulty >= 3 then
3185: LD_OWVAR 67
3189: PUSH
3190: LD_INT 3
3192: GREATEREQUAL
3193: IFFALSE 3208
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3195: LD_INT 51
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: LD_INT 2
3203: PPUSH
3204: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3208: LD_ADDR_VAR 0 7
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: LD_INT 3
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 2
3225: PUSH
3226: LD_INT 30
3228: PUSH
3229: LD_INT 31
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: LD_INT 30
3238: PUSH
3239: LD_INT 32
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: LIST
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PPUSH
3255: CALL_OW 69
3259: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3260: LD_ADDR_VAR 0 8
3264: PUSH
3265: LD_INT 22
3267: PUSH
3268: LD_INT 3
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 30
3277: PUSH
3278: LD_INT 4
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: PPUSH
3289: CALL_OW 69
3293: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3294: LD_ADDR_VAR 0 10
3298: PUSH
3299: LD_INT 22
3301: PUSH
3302: LD_INT 3
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: LD_INT 30
3311: PUSH
3312: LD_INT 3
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PPUSH
3323: CALL_OW 69
3327: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3328: LD_ADDR_VAR 0 9
3332: PUSH
3333: LD_INT 22
3335: PUSH
3336: LD_INT 3
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 30
3345: PUSH
3346: LD_INT 6
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PPUSH
3357: CALL_OW 69
3361: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3362: LD_ADDR_VAR 0 2
3366: PUSH
3367: LD_INT 22
3369: PUSH
3370: LD_INT 3
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 30
3379: PUSH
3380: LD_INT 1
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PPUSH
3391: CALL_OW 69
3395: PUSH
3396: FOR_IN
3397: IFFALSE 3441
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3399: LD_VAR 0 2
3403: PPUSH
3404: CALL_OW 274
3408: PPUSH
3409: LD_INT 1
3411: PPUSH
3412: LD_INT 1000
3414: PPUSH
3415: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3419: LD_VAR 0 2
3423: PPUSH
3424: CALL_OW 274
3428: PPUSH
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 300
3434: PPUSH
3435: CALL_OW 277
// end ;
3439: GO 3396
3441: POP
3442: POP
// uc_side := 3 ;
3443: LD_ADDR_OWVAR 20
3447: PUSH
3448: LD_INT 3
3450: ST_TO_ADDR
// uc_nation := 3 ;
3451: LD_ADDR_OWVAR 21
3455: PUSH
3456: LD_INT 3
3458: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3459: LD_ADDR_VAR 0 11
3463: PUSH
3464: LD_INT 2
3466: PUSH
3467: LD_INT 3
3469: PUSH
3470: LD_INT 4
3472: PUSH
3473: LD_INT 4
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: PUSH
3482: LD_OWVAR 67
3486: ARRAY
3487: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3488: LD_ADDR_EXP 52
3492: PUSH
3493: LD_STRING Pokryshkin
3495: PPUSH
3496: LD_INT 0
3498: PPUSH
3499: LD_STRING 
3501: PPUSH
3502: CALL 36566 0 3
3506: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3507: LD_EXP 52
3511: PPUSH
3512: LD_INT 63
3514: PPUSH
3515: LD_INT 21
3517: PPUSH
3518: LD_INT 0
3520: PPUSH
3521: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3525: LD_EXP 52
3529: PPUSH
3530: CALL_OW 140
// InitHc ;
3534: CALL_OW 19
// for i in fac do
3538: LD_ADDR_VAR 0 2
3542: PUSH
3543: LD_VAR 0 10
3547: PUSH
3548: FOR_IN
3549: IFFALSE 3602
// begin for j = 1 to 6 do
3551: LD_ADDR_VAR 0 3
3555: PUSH
3556: DOUBLE
3557: LD_INT 1
3559: DEC
3560: ST_TO_ADDR
3561: LD_INT 6
3563: PUSH
3564: FOR_TO
3565: IFFALSE 3598
// begin PrepareHuman ( false , 3 , skill ) ;
3567: LD_INT 0
3569: PPUSH
3570: LD_INT 3
3572: PPUSH
3573: LD_VAR 0 11
3577: PPUSH
3578: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3582: CALL_OW 44
3586: PPUSH
3587: LD_VAR 0 2
3591: PPUSH
3592: CALL_OW 52
// end ;
3596: GO 3564
3598: POP
3599: POP
// end ;
3600: GO 3548
3602: POP
3603: POP
// for i in lab do
3604: LD_ADDR_VAR 0 2
3608: PUSH
3609: LD_VAR 0 9
3613: PUSH
3614: FOR_IN
3615: IFFALSE 3648
// begin PrepareHuman ( false , 4 , skill ) ;
3617: LD_INT 0
3619: PPUSH
3620: LD_INT 4
3622: PPUSH
3623: LD_VAR 0 11
3627: PPUSH
3628: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3632: CALL_OW 44
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 52
// end ;
3646: GO 3614
3648: POP
3649: POP
// for i in tw do
3650: LD_ADDR_VAR 0 2
3654: PUSH
3655: LD_VAR 0 7
3659: PUSH
3660: FOR_IN
3661: IFFALSE 3710
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
3663: LD_VAR 0 2
3667: PPUSH
3668: LD_INT 42
3670: PUSH
3671: LD_INT 43
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 1
3680: PPUSH
3681: LD_INT 2
3683: PPUSH
3684: CALL_OW 12
3688: ARRAY
3689: PPUSH
3690: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
3694: LD_VAR 0 11
3698: PPUSH
3699: LD_VAR 0 2
3703: PPUSH
3704: CALL 775 0 2
// end ;
3708: GO 3660
3710: POP
3711: POP
// for i in bar do
3712: LD_ADDR_VAR 0 2
3716: PUSH
3717: LD_VAR 0 8
3721: PUSH
3722: FOR_IN
3723: IFFALSE 3756
// begin PrepareHuman ( false , 1 , skill ) ;
3725: LD_INT 0
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_VAR 0 11
3735: PPUSH
3736: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3740: CALL_OW 44
3744: PPUSH
3745: LD_VAR 0 2
3749: PPUSH
3750: CALL_OW 52
// end ;
3754: GO 3722
3756: POP
3757: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
3758: LD_ADDR_VAR 0 13
3762: PUSH
3763: LD_INT 100
3765: PUSH
3766: LD_INT 9
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PUSH
3773: LD_INT 135
3775: PUSH
3776: LD_INT 60
3778: PUSH
3779: EMPTY
3780: LIST
3781: LIST
3782: PUSH
3783: LD_INT 41
3785: PUSH
3786: LD_INT 6
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: PUSH
3793: LD_INT 22
3795: PUSH
3796: LD_INT 9
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PUSH
3803: LD_INT 84
3805: PUSH
3806: LD_INT 14
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: ST_TO_ADDR
// vehicles := [ ] ;
3820: LD_ADDR_VAR 0 12
3824: PUSH
3825: EMPTY
3826: ST_TO_ADDR
// for i in spot_xy do
3827: LD_ADDR_VAR 0 2
3831: PUSH
3832: LD_VAR 0 13
3836: PUSH
3837: FOR_IN
3838: IFFALSE 3996
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
3840: LD_ADDR_VAR 0 6
3844: PUSH
3845: LD_INT 3
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 22
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: LD_INT 42
3862: PUSH
3863: LD_INT 43
3865: PUSH
3866: LD_INT 44
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 1
3876: PPUSH
3877: LD_INT 3
3879: PPUSH
3880: CALL_OW 12
3884: ARRAY
3885: PPUSH
3886: LD_INT 100
3888: PPUSH
3889: CALL 497 0 7
3893: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
3894: LD_ADDR_VAR 0 12
3898: PUSH
3899: LD_VAR 0 12
3903: PPUSH
3904: LD_VAR 0 12
3908: PUSH
3909: LD_INT 1
3911: PLUS
3912: PPUSH
3913: LD_VAR 0 6
3917: PPUSH
3918: CALL_OW 2
3922: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3923: LD_VAR 0 6
3927: PPUSH
3928: LD_INT 3
3930: PPUSH
3931: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
3935: LD_VAR 0 6
3939: PPUSH
3940: LD_VAR 0 2
3944: PUSH
3945: LD_INT 1
3947: ARRAY
3948: PPUSH
3949: LD_VAR 0 2
3953: PUSH
3954: LD_INT 2
3956: ARRAY
3957: PPUSH
3958: LD_INT 0
3960: PPUSH
3961: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
3965: LD_INT 0
3967: PPUSH
3968: LD_INT 3
3970: PPUSH
3971: LD_VAR 0 11
3975: PPUSH
3976: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3980: CALL_OW 44
3984: PPUSH
3985: LD_VAR 0 6
3989: PPUSH
3990: CALL_OW 52
// end ;
3994: GO 3837
3996: POP
3997: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
3998: LD_ADDR_VAR 0 2
4002: PUSH
4003: DOUBLE
4004: LD_INT 1
4006: DEC
4007: ST_TO_ADDR
4008: LD_INT 5
4010: PUSH
4011: LD_INT 7
4013: PUSH
4014: LD_INT 8
4016: PUSH
4017: LD_INT 9
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: PUSH
4026: LD_OWVAR 67
4030: ARRAY
4031: PUSH
4032: FOR_TO
4033: IFFALSE 4093
// begin PrepareHuman ( false , 1 , skill ) ;
4035: LD_INT 0
4037: PPUSH
4038: LD_INT 1
4040: PPUSH
4041: LD_VAR 0 11
4045: PPUSH
4046: CALL_OW 380
// un := CreateHuman ;
4050: LD_ADDR_VAR 0 5
4054: PUSH
4055: CALL_OW 44
4059: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4060: LD_VAR 0 5
4064: PPUSH
4065: LD_INT 11
4067: PPUSH
4068: LD_INT 0
4070: PPUSH
4071: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4075: LD_ADDR_EXP 55
4079: PUSH
4080: LD_EXP 55
4084: PUSH
4085: LD_VAR 0 5
4089: ADD
4090: ST_TO_ADDR
// end ;
4091: GO 4032
4093: POP
4094: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4095: LD_ADDR_VAR 0 2
4099: PUSH
4100: DOUBLE
4101: LD_INT 1
4103: DEC
4104: ST_TO_ADDR
4105: LD_INT 2
4107: PUSH
4108: LD_INT 3
4110: PUSH
4111: LD_INT 4
4113: PUSH
4114: LD_INT 5
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: LD_OWVAR 67
4127: ARRAY
4128: PUSH
4129: FOR_TO
4130: IFFALSE 4190
// begin PrepareHuman ( false , 1 , skill ) ;
4132: LD_INT 0
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: LD_VAR 0 11
4142: PPUSH
4143: CALL_OW 380
// un := CreateHuman ;
4147: LD_ADDR_VAR 0 5
4151: PUSH
4152: CALL_OW 44
4156: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4157: LD_VAR 0 5
4161: PPUSH
4162: LD_INT 12
4164: PPUSH
4165: LD_INT 0
4167: PPUSH
4168: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4172: LD_ADDR_EXP 53
4176: PUSH
4177: LD_EXP 53
4181: PUSH
4182: LD_VAR 0 5
4186: ADD
4187: ST_TO_ADDR
// end ;
4188: GO 4129
4190: POP
4191: POP
// for i = 1 to 2 do
4192: LD_ADDR_VAR 0 2
4196: PUSH
4197: DOUBLE
4198: LD_INT 1
4200: DEC
4201: ST_TO_ADDR
4202: LD_INT 2
4204: PUSH
4205: FOR_TO
4206: IFFALSE 4272
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4208: LD_INT 1
4210: PPUSH
4211: LD_INT 1
4213: PPUSH
4214: LD_VAR 0 11
4218: PPUSH
4219: CALL_OW 380
// un := CreateHuman ;
4223: LD_ADDR_VAR 0 5
4227: PUSH
4228: CALL_OW 44
4232: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4233: LD_VAR 0 5
4237: PPUSH
4238: LD_INT 39
4240: PPUSH
4241: LD_INT 12
4243: PPUSH
4244: LD_INT 3
4246: PPUSH
4247: LD_INT 0
4249: PPUSH
4250: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4254: LD_ADDR_EXP 54
4258: PUSH
4259: LD_EXP 54
4263: PUSH
4264: LD_VAR 0 5
4268: ADD
4269: ST_TO_ADDR
// end ;
4270: GO 4205
4272: POP
4273: POP
// for i = 1 to 3 do
4274: LD_ADDR_VAR 0 2
4278: PUSH
4279: DOUBLE
4280: LD_INT 1
4282: DEC
4283: ST_TO_ADDR
4284: LD_INT 3
4286: PUSH
4287: FOR_TO
4288: IFFALSE 4354
// begin PrepareHuman ( false , 1 , skill ) ;
4290: LD_INT 0
4292: PPUSH
4293: LD_INT 1
4295: PPUSH
4296: LD_VAR 0 11
4300: PPUSH
4301: CALL_OW 380
// un := CreateHuman ;
4305: LD_ADDR_VAR 0 5
4309: PUSH
4310: CALL_OW 44
4314: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4315: LD_VAR 0 5
4319: PPUSH
4320: LD_INT 180
4322: PPUSH
4323: LD_INT 11
4325: PPUSH
4326: LD_INT 4
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4336: LD_ADDR_EXP 58
4340: PUSH
4341: LD_EXP 58
4345: PUSH
4346: LD_VAR 0 5
4350: ADD
4351: ST_TO_ADDR
// end ;
4352: GO 4287
4354: POP
4355: POP
// ru_vehicles := vehicles ;
4356: LD_ADDR_EXP 56
4360: PUSH
4361: LD_VAR 0 12
4365: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4366: LD_ADDR_EXP 59
4370: PUSH
4371: LD_INT 131
4373: PUSH
4374: LD_INT 121
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_INT 113
4383: PUSH
4384: LD_INT 90
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: LD_INT 93
4393: PUSH
4394: LD_INT 62
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 106
4408: PUSH
4409: LD_INT 54
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 120
4418: PUSH
4419: LD_INT 80
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 143
4428: PUSH
4429: LD_INT 120
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 154
4443: PUSH
4444: LD_INT 116
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 140
4453: PUSH
4454: LD_INT 93
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: LD_INT 130
4463: PUSH
4464: LD_INT 58
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: LD_INT 105
4478: PUSH
4479: LD_INT 106
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 134
4488: PUSH
4489: LD_INT 98
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 159
4498: PUSH
4499: LD_INT 113
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: LIST
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: ST_TO_ADDR
// if Difficulty = 1 then
4517: LD_OWVAR 67
4521: PUSH
4522: LD_INT 1
4524: EQUAL
4525: IFFALSE 4529
// exit ;
4527: GO 4584
// for i = 1 to Difficulty - 1 do
4529: LD_ADDR_VAR 0 2
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_OWVAR 67
4543: PUSH
4544: LD_INT 1
4546: MINUS
4547: PUSH
4548: FOR_TO
4549: IFFALSE 4582
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
4551: LD_ADDR_EXP 57
4555: PUSH
4556: LD_EXP 57
4560: PUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: LD_INT 1
4569: PUSH
4570: LD_INT 43
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: ADD
4579: ST_TO_ADDR
4580: GO 4548
4582: POP
4583: POP
// end ;
4584: LD_VAR 0 1
4588: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
4589: LD_INT 22
4591: PUSH
4592: LD_INT 3
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: PUSH
4599: LD_INT 21
4601: PUSH
4602: LD_INT 2
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PPUSH
4613: CALL_OW 69
4617: IFFALSE 4711
4619: GO 4621
4621: DISABLE
4622: LD_INT 0
4624: PPUSH
4625: PPUSH
// begin enable ;
4626: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4627: LD_ADDR_VAR 0 2
4631: PUSH
4632: LD_INT 22
4634: PUSH
4635: LD_INT 3
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 21
4644: PUSH
4645: LD_INT 2
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PPUSH
4656: CALL_OW 69
4660: ST_TO_ADDR
// if filter then
4661: LD_VAR 0 2
4665: IFFALSE 4711
// for i in filter do
4667: LD_ADDR_VAR 0 1
4671: PUSH
4672: LD_VAR 0 2
4676: PUSH
4677: FOR_IN
4678: IFFALSE 4709
// if GetFuel ( i ) < 20 then
4680: LD_VAR 0 1
4684: PPUSH
4685: CALL_OW 261
4689: PUSH
4690: LD_INT 20
4692: LESS
4693: IFFALSE 4707
// SetFuel ( i , 20 ) ;
4695: LD_VAR 0 1
4699: PPUSH
4700: LD_INT 20
4702: PPUSH
4703: CALL_OW 240
4707: GO 4677
4709: POP
4710: POP
// end ;
4711: PPOPN 2
4713: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
4714: LD_EXP 57
4718: IFFALSE 4937
4720: GO 4722
4722: DISABLE
4723: LD_INT 0
4725: PPUSH
4726: PPUSH
4727: PPUSH
// begin enable ;
4728: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4729: LD_ADDR_VAR 0 2
4733: PUSH
4734: LD_INT 22
4736: PUSH
4737: LD_INT 3
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 30
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PPUSH
4758: CALL_OW 69
4762: ST_TO_ADDR
// can_produce := [ ] ;
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: EMPTY
4769: ST_TO_ADDR
// if not fac then
4770: LD_VAR 0 2
4774: NOT
4775: IFFALSE 4780
// begin disable ;
4777: DISABLE
// exit ;
4778: GO 4937
// end ; for i in fac do
4780: LD_ADDR_VAR 0 1
4784: PUSH
4785: LD_VAR 0 2
4789: PUSH
4790: FOR_IN
4791: IFFALSE 4829
// if UnitsInside ( i ) then
4793: LD_VAR 0 1
4797: PPUSH
4798: CALL_OW 313
4802: IFFALSE 4827
// can_produce := Insert ( can_produce , 1 , i ) ;
4804: LD_ADDR_VAR 0 3
4808: PUSH
4809: LD_VAR 0 3
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: LD_VAR 0 1
4821: PPUSH
4822: CALL_OW 2
4826: ST_TO_ADDR
4827: GO 4790
4829: POP
4830: POP
// if not can_produce then
4831: LD_VAR 0 3
4835: NOT
4836: IFFALSE 4840
// exit ;
4838: GO 4937
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
4840: LD_VAR 0 3
4844: PUSH
4845: LD_INT 1
4847: PPUSH
4848: LD_VAR 0 3
4852: PPUSH
4853: CALL_OW 12
4857: ARRAY
4858: PPUSH
4859: LD_EXP 57
4863: PUSH
4864: LD_INT 1
4866: ARRAY
4867: PPUSH
4868: LD_EXP 57
4872: PUSH
4873: LD_INT 2
4875: ARRAY
4876: PPUSH
4877: LD_EXP 57
4881: PUSH
4882: LD_INT 3
4884: ARRAY
4885: PPUSH
4886: LD_EXP 57
4890: PUSH
4891: LD_INT 4
4893: ARRAY
4894: PPUSH
4895: CALL_OW 125
// for i = 1 to 4 do
4899: LD_ADDR_VAR 0 1
4903: PUSH
4904: DOUBLE
4905: LD_INT 1
4907: DEC
4908: ST_TO_ADDR
4909: LD_INT 4
4911: PUSH
4912: FOR_TO
4913: IFFALSE 4935
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
4915: LD_ADDR_EXP 57
4919: PUSH
4920: LD_EXP 57
4924: PPUSH
4925: LD_INT 1
4927: PPUSH
4928: CALL_OW 3
4932: ST_TO_ADDR
4933: GO 4912
4935: POP
4936: POP
// end ;
4937: PPOPN 3
4939: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
4940: LD_INT 0
4942: PPUSH
4943: PPUSH
4944: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4945: LD_ADDR_VAR 0 2
4949: PUSH
4950: DOUBLE
4951: LD_INT 1
4953: DEC
4954: ST_TO_ADDR
4955: LD_INT 2
4957: PUSH
4958: LD_INT 3
4960: PUSH
4961: LD_INT 4
4963: PUSH
4964: LD_INT 4
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: LD_OWVAR 67
4977: ARRAY
4978: PUSH
4979: FOR_TO
4980: IFFALSE 5129
// begin PrepareHuman ( false , 3 , 3 ) ;
4982: LD_INT 0
4984: PPUSH
4985: LD_INT 3
4987: PPUSH
4988: LD_INT 3
4990: PPUSH
4991: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
4995: LD_ADDR_VAR 0 3
4999: PUSH
5000: LD_INT 3
5002: PPUSH
5003: LD_INT 3
5005: PPUSH
5006: LD_INT 22
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: LD_INT 1
5014: PPUSH
5015: LD_INT 43
5017: PUSH
5018: LD_INT 42
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: PUSH
5025: LD_INT 1
5027: PPUSH
5028: LD_INT 2
5030: PPUSH
5031: CALL_OW 12
5035: ARRAY
5036: PPUSH
5037: LD_INT 70
5039: PPUSH
5040: CALL 497 0 7
5044: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5045: LD_VAR 0 3
5049: PPUSH
5050: LD_INT 4
5052: PPUSH
5053: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5057: LD_VAR 0 3
5061: PPUSH
5062: LD_INT 229
5064: PPUSH
5065: LD_INT 44
5067: PPUSH
5068: LD_INT 0
5070: PPUSH
5071: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5075: CALL_OW 44
5079: PPUSH
5080: LD_VAR 0 3
5084: PPUSH
5085: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5089: LD_ADDR_EXP 56
5093: PUSH
5094: LD_EXP 56
5098: PUSH
5099: LD_VAR 0 3
5103: ADD
5104: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5105: LD_VAR 0 3
5109: PPUSH
5110: LD_INT 191
5112: PPUSH
5113: LD_INT 32
5115: PPUSH
5116: CALL_OW 111
// Wait ( 0 0$02 ) ;
5120: LD_INT 70
5122: PPUSH
5123: CALL_OW 67
// end ;
5127: GO 4979
5129: POP
5130: POP
// end ;
5131: LD_VAR 0 1
5135: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5136: LD_EXP 31
5140: PUSH
5141: LD_EXP 56
5145: AND
5146: IFFALSE 5320
5148: GO 5150
5150: DISABLE
5151: LD_INT 0
5153: PPUSH
5154: PPUSH
5155: PPUSH
// begin wait ( 0 0$50 ) ;
5156: LD_INT 1750
5158: PPUSH
5159: CALL_OW 67
// tmp := ru_vehicles ;
5163: LD_ADDR_VAR 0 3
5167: PUSH
5168: LD_EXP 56
5172: ST_TO_ADDR
// if not tmp then
5173: LD_VAR 0 3
5177: NOT
5178: IFFALSE 5182
// exit ;
5180: GO 5320
// repeat wait ( 0 0$1 ) ;
5182: LD_INT 35
5184: PPUSH
5185: CALL_OW 67
// for i in tmp do
5189: LD_ADDR_VAR 0 1
5193: PUSH
5194: LD_VAR 0 3
5198: PUSH
5199: FOR_IN
5200: IFFALSE 5311
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5202: LD_ADDR_VAR 0 2
5206: PUSH
5207: LD_INT 22
5209: PUSH
5210: LD_INT 1
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PPUSH
5217: LD_VAR 0 1
5221: PPUSH
5222: CALL_OW 74
5226: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5227: LD_VAR 0 1
5231: PPUSH
5232: LD_VAR 0 2
5236: PPUSH
5237: CALL_OW 296
5241: PUSH
5242: LD_INT 10
5244: GREATER
5245: IFFALSE 5264
// ComAgressiveMove ( i , 69 , 101 ) else
5247: LD_VAR 0 1
5251: PPUSH
5252: LD_INT 69
5254: PPUSH
5255: LD_INT 101
5257: PPUSH
5258: CALL_OW 114
5262: GO 5278
// ComAttackUnit ( i , enemy ) ;
5264: LD_VAR 0 1
5268: PPUSH
5269: LD_VAR 0 2
5273: PPUSH
5274: CALL_OW 115
// if GetLives ( i ) < 250 then
5278: LD_VAR 0 1
5282: PPUSH
5283: CALL_OW 256
5287: PUSH
5288: LD_INT 250
5290: LESS
5291: IFFALSE 5309
// tmp := tmp diff i ;
5293: LD_ADDR_VAR 0 3
5297: PUSH
5298: LD_VAR 0 3
5302: PUSH
5303: LD_VAR 0 1
5307: DIFF
5308: ST_TO_ADDR
// end ;
5309: GO 5199
5311: POP
5312: POP
// until not tmp ;
5313: LD_VAR 0 3
5317: NOT
5318: IFFALSE 5182
// end ; end_of_file
5320: PPOPN 3
5322: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5323: LD_INT 0
5325: PPUSH
5326: PPUSH
5327: PPUSH
5328: PPUSH
5329: PPUSH
5330: PPUSH
5331: PPUSH
// InGameOn ;
5332: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5336: LD_EXP 37
5340: PPUSH
5341: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5345: LD_EXP 37
5349: PPUSH
5350: LD_EXP 44
5354: PPUSH
5355: CALL_OW 119
// if Bierezov then
5359: LD_EXP 45
5363: IFFALSE 5379
// ComTurnUnit ( Bierezov , Cornel ) ;
5365: LD_EXP 45
5369: PPUSH
5370: LD_EXP 44
5374: PPUSH
5375: CALL_OW 119
// for i in jmm_units do
5379: LD_ADDR_VAR 0 2
5383: PUSH
5384: LD_EXP 4
5388: PUSH
5389: FOR_IN
5390: IFFALSE 5408
// ComTurnUnit ( i , Cornel ) ;
5392: LD_VAR 0 2
5396: PPUSH
5397: LD_EXP 44
5401: PPUSH
5402: CALL_OW 119
5406: GO 5389
5408: POP
5409: POP
// units := cornel_units union Cornel ;
5410: LD_ADDR_VAR 0 3
5414: PUSH
5415: LD_EXP 6
5419: PUSH
5420: LD_EXP 44
5424: UNION
5425: ST_TO_ADDR
// repeat wait ( 1 ) ;
5426: LD_INT 1
5428: PPUSH
5429: CALL_OW 67
// for i in units do
5433: LD_ADDR_VAR 0 2
5437: PUSH
5438: LD_VAR 0 3
5442: PUSH
5443: FOR_IN
5444: IFFALSE 5477
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5446: LD_VAR 0 2
5450: PPUSH
5451: LD_EXP 37
5455: PPUSH
5456: CALL_OW 250
5460: PPUSH
5461: LD_EXP 37
5465: PPUSH
5466: CALL_OW 251
5470: PPUSH
5471: CALL_OW 111
5475: GO 5443
5477: POP
5478: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5479: LD_VAR 0 3
5483: PPUSH
5484: LD_INT 92
5486: PUSH
5487: LD_EXP 37
5491: PPUSH
5492: CALL_OW 250
5496: PUSH
5497: LD_EXP 37
5501: PPUSH
5502: CALL_OW 251
5506: PUSH
5507: LD_INT 10
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: PPUSH
5516: CALL_OW 72
5520: PUSH
5521: LD_VAR 0 3
5525: EQUAL
5526: IFFALSE 5426
// for i in units do
5528: LD_ADDR_VAR 0 2
5532: PUSH
5533: LD_VAR 0 3
5537: PUSH
5538: FOR_IN
5539: IFFALSE 5557
// ComTurnUnit ( i , JMM ) ;
5541: LD_VAR 0 2
5545: PPUSH
5546: LD_EXP 37
5550: PPUSH
5551: CALL_OW 119
5555: GO 5538
5557: POP
5558: POP
// ComTurnUnit ( Cornel , JMM ) ;
5559: LD_EXP 44
5563: PPUSH
5564: LD_EXP 37
5568: PPUSH
5569: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
5573: LD_EXP 37
5577: PPUSH
5578: LD_STRING D1-JMM-1
5580: PPUSH
5581: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
5585: LD_EXP 44
5589: PPUSH
5590: LD_STRING D1-Corn-1
5592: PPUSH
5593: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
5597: LD_EXP 37
5601: PPUSH
5602: LD_EXP 44
5606: PPUSH
5607: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
5611: LD_EXP 44
5615: PPUSH
5616: LD_EXP 37
5620: PPUSH
5621: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
5625: LD_INT 35
5627: PPUSH
5628: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
5632: LD_EXP 37
5636: PPUSH
5637: LD_EXP 44
5641: PPUSH
5642: CALL_OW 296
5646: PUSH
5647: LD_INT 6
5649: LESS
5650: IFFALSE 5625
// ChangeSideFog ( 4 , 1 ) ;
5652: LD_INT 4
5654: PPUSH
5655: LD_INT 1
5657: PPUSH
5658: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
5662: LD_EXP 37
5666: PPUSH
5667: LD_EXP 44
5671: PPUSH
5672: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5676: LD_EXP 44
5680: PPUSH
5681: LD_EXP 37
5685: PPUSH
5686: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
5690: LD_EXP 37
5694: PPUSH
5695: LD_STRING D1-JMM-2
5697: PPUSH
5698: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
5702: LD_EXP 37
5706: PPUSH
5707: LD_STRING D1-JMM-2a
5709: PPUSH
5710: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
5714: LD_EXP 44
5718: PPUSH
5719: LD_STRING D1-Corn-2
5721: PPUSH
5722: CALL_OW 88
// if bierezov_exist or debug then
5726: LD_EXP 7
5730: PUSH
5731: LD_EXP 1
5735: OR
5736: IFFALSE 5977
// begin ComTurnUnit ( Cornel , Bierezov ) ;
5738: LD_EXP 44
5742: PPUSH
5743: LD_EXP 45
5747: PPUSH
5748: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
5752: LD_INT 10
5754: PPUSH
5755: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
5759: LD_EXP 44
5763: PPUSH
5764: LD_STRING D1a-Corn-1
5766: PPUSH
5767: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
5771: LD_EXP 37
5775: PPUSH
5776: LD_EXP 45
5780: PPUSH
5781: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
5785: LD_EXP 45
5789: PPUSH
5790: LD_EXP 37
5794: PPUSH
5795: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
5799: LD_EXP 37
5803: PPUSH
5804: LD_STRING D1a-JMM-1
5806: PPUSH
5807: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
5811: LD_EXP 37
5815: PPUSH
5816: LD_EXP 44
5820: PPUSH
5821: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5825: LD_EXP 44
5829: PPUSH
5830: LD_EXP 37
5834: PPUSH
5835: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
5839: LD_EXP 44
5843: PPUSH
5844: LD_STRING D1a-Corn-2
5846: PPUSH
5847: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
5851: LD_EXP 37
5855: PPUSH
5856: LD_STRING D1a-JMM-2
5858: PPUSH
5859: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
5863: LD_EXP 44
5867: PPUSH
5868: LD_STRING D1a-Corn-3
5870: PPUSH
5871: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
5875: LD_EXP 37
5879: PPUSH
5880: LD_STRING D1a-JMM-3
5882: PPUSH
5883: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
5887: LD_EXP 44
5891: PPUSH
5892: LD_STRING D1a-Corn-4
5894: PPUSH
5895: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
5899: LD_EXP 37
5903: PPUSH
5904: LD_STRING D1a-JMM-4
5906: PPUSH
5907: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
5911: LD_EXP 44
5915: PPUSH
5916: LD_STRING D1a-Corn-5
5918: PPUSH
5919: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
5923: LD_EXP 45
5927: PPUSH
5928: LD_EXP 44
5932: PPUSH
5933: CALL_OW 250
5937: PPUSH
5938: LD_EXP 44
5942: PPUSH
5943: CALL_OW 251
5947: PUSH
5948: LD_INT 2
5950: MINUS
5951: PPUSH
5952: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
5956: LD_EXP 45
5960: PPUSH
5961: LD_EXP 44
5965: PPUSH
5966: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
5970: LD_INT 10
5972: PPUSH
5973: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
5977: LD_EXP 37
5981: PPUSH
5982: LD_STRING D1b-JMM-1
5984: PPUSH
5985: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
5989: LD_EXP 44
5993: PPUSH
5994: LD_STRING D1b-Corn-1
5996: PPUSH
5997: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6001: LD_EXP 37
6005: PPUSH
6006: LD_STRING D1b-JMM-2
6008: PPUSH
6009: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6013: LD_EXP 44
6017: PPUSH
6018: LD_STRING D1b-Corn-2
6020: PPUSH
6021: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6025: LD_EXP 37
6029: PPUSH
6030: LD_STRING D1b-JMM-3
6032: PPUSH
6033: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6037: LD_INT 10
6039: PPUSH
6040: CALL_OW 67
// SayRadio ( Powell , D1b-Pow-3 ) ;
6044: LD_EXP 46
6048: PPUSH
6049: LD_STRING D1b-Pow-3
6051: PPUSH
6052: CALL_OW 94
// Say ( JMM , D1b-JMM-4 ) ;
6056: LD_EXP 37
6060: PPUSH
6061: LD_STRING D1b-JMM-4
6063: PPUSH
6064: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6068: LD_EXP 44
6072: PPUSH
6073: LD_STRING D1b-Corn-4
6075: PPUSH
6076: CALL_OW 88
// if Khatam then
6080: LD_EXP 41
6084: IFFALSE 6100
// Say ( Khatam , D1b-Khat-4 ) else
6086: LD_EXP 41
6090: PPUSH
6091: LD_STRING D1b-Khat-4
6093: PPUSH
6094: CALL_OW 88
6098: GO 6136
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6100: LD_EXP 6
6104: PPUSH
6105: LD_INT 26
6107: PUSH
6108: LD_INT 1
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PPUSH
6115: CALL_OW 72
6119: PUSH
6120: LD_EXP 44
6124: PUSH
6125: EMPTY
6126: LIST
6127: DIFF
6128: PPUSH
6129: LD_STRING D1b-Sol1-4
6131: PPUSH
6132: CALL 585 0 2
// if Cyrus then
6136: LD_EXP 39
6140: IFFALSE 6154
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6142: LD_EXP 39
6146: PPUSH
6147: LD_STRING D1b-Cyrus-4
6149: PPUSH
6150: CALL_OW 88
// if Lisa then
6154: LD_EXP 40
6158: IFFALSE 6216
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6160: LD_EXP 40
6164: PPUSH
6165: LD_STRING D1b-Lisa-4
6167: PPUSH
6168: CALL_OW 88
// if Cyrus then
6172: LD_EXP 39
6176: IFFALSE 6216
// begin if not IsInUnit ( Cyrus ) then
6178: LD_EXP 39
6182: PPUSH
6183: CALL_OW 310
6187: NOT
6188: IFFALSE 6204
// ComTurnUnit ( Cyrus , Lisa ) ;
6190: LD_EXP 39
6194: PPUSH
6195: LD_EXP 40
6199: PPUSH
6200: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6204: LD_EXP 39
6208: PPUSH
6209: LD_STRING D1b-Cyrus-5
6211: PPUSH
6212: CALL_OW 88
// end ; end ; SelectGroup ;
6216: CALL 2657 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6220: LD_EXP 37
6224: PPUSH
6225: LD_STRING D1d-JMM-1
6227: PPUSH
6228: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6232: LD_EXP 44
6236: PPUSH
6237: LD_STRING D1d-Corn-1
6239: PPUSH
6240: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6244: LD_ADDR_VAR 0 2
6248: PUSH
6249: LD_EXP 4
6253: PUSH
6254: LD_EXP 6
6258: ADD
6259: PUSH
6260: LD_EXP 37
6264: ADD
6265: PUSH
6266: FOR_IN
6267: IFFALSE 6280
// ComHold ( i ) ;
6269: LD_VAR 0 2
6273: PPUSH
6274: CALL_OW 140
6278: GO 6266
6280: POP
6281: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6282: LD_ADDR_VAR 0 4
6286: PUSH
6287: LD_INT 22
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 21
6299: PUSH
6300: LD_INT 2
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PPUSH
6311: CALL_OW 69
6315: ST_TO_ADDR
// if vehicles then
6316: LD_VAR 0 4
6320: IFFALSE 6658
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6322: LD_EXP 6
6326: PPUSH
6327: LD_INT 55
6329: PUSH
6330: EMPTY
6331: LIST
6332: PPUSH
6333: CALL_OW 72
6337: IFFALSE 6376
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6339: LD_ADDR_VAR 0 2
6343: PUSH
6344: LD_EXP 6
6348: PPUSH
6349: LD_INT 55
6351: PUSH
6352: EMPTY
6353: LIST
6354: PPUSH
6355: CALL_OW 72
6359: PUSH
6360: FOR_IN
6361: IFFALSE 6374
// ComExitVehicle ( i ) ;
6363: LD_VAR 0 2
6367: PPUSH
6368: CALL_OW 121
6372: GO 6360
6374: POP
6375: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6376: LD_ADDR_VAR 0 5
6380: PUSH
6381: LD_VAR 0 4
6385: PPUSH
6386: LD_INT 34
6388: PUSH
6389: LD_INT 51
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 72
6400: ST_TO_ADDR
// if cargos then
6401: LD_VAR 0 5
6405: IFFALSE 6588
// begin vehicles := cargos ;
6407: LD_ADDR_VAR 0 4
6411: PUSH
6412: LD_VAR 0 5
6416: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6417: LD_ADDR_VAR 0 6
6421: PUSH
6422: LD_STRING 02_resources_4
6424: PPUSH
6425: LD_INT 0
6427: PPUSH
6428: CALL_OW 30
6432: ST_TO_ADDR
// if debug and not resources then
6433: LD_EXP 1
6437: PUSH
6438: LD_VAR 0 6
6442: NOT
6443: AND
6444: IFFALSE 6454
// resources := 160 ;
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: LD_INT 160
6453: ST_TO_ADDR
// if resources mod 10 then
6454: LD_VAR 0 6
6458: PUSH
6459: LD_INT 10
6461: MOD
6462: IFFALSE 6484
// resources := resources - resources mod 10 ;
6464: LD_ADDR_VAR 0 6
6468: PUSH
6469: LD_VAR 0 6
6473: PUSH
6474: LD_VAR 0 6
6478: PUSH
6479: LD_INT 10
6481: MOD
6482: MINUS
6483: ST_TO_ADDR
// if resources then
6484: LD_VAR 0 6
6488: IFFALSE 6588
// for i in cargos do
6490: LD_ADDR_VAR 0 2
6494: PUSH
6495: LD_VAR 0 5
6499: PUSH
6500: FOR_IN
6501: IFFALSE 6586
// begin if resources < 100 then
6503: LD_VAR 0 6
6507: PUSH
6508: LD_INT 100
6510: LESS
6511: IFFALSE 6533
// begin cargo := resources ;
6513: LD_ADDR_VAR 0 7
6517: PUSH
6518: LD_VAR 0 6
6522: ST_TO_ADDR
// resources := 0 ;
6523: LD_ADDR_VAR 0 6
6527: PUSH
6528: LD_INT 0
6530: ST_TO_ADDR
// end else
6531: GO 6555
// begin cargo := 100 ;
6533: LD_ADDR_VAR 0 7
6537: PUSH
6538: LD_INT 100
6540: ST_TO_ADDR
// resources := resources - 100 ;
6541: LD_ADDR_VAR 0 6
6545: PUSH
6546: LD_VAR 0 6
6550: PUSH
6551: LD_INT 100
6553: MINUS
6554: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
6555: LD_VAR 0 2
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: LD_VAR 0 7
6567: PPUSH
6568: CALL_OW 290
// if resources = 0 then
6572: LD_VAR 0 6
6576: PUSH
6577: LD_INT 0
6579: EQUAL
6580: IFFALSE 6584
// break ;
6582: GO 6586
// end ;
6584: GO 6500
6586: POP
6587: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
6588: LD_VAR 0 4
6592: PUSH
6593: LD_INT 1
6595: ARRAY
6596: PPUSH
6597: CALL_OW 311
6601: PPUSH
6602: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
6606: LD_VAR 0 4
6610: PUSH
6611: LD_INT 1
6613: ARRAY
6614: PPUSH
6615: LD_INT 4
6617: PPUSH
6618: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
6622: LD_EXP 44
6626: PPUSH
6627: LD_VAR 0 4
6631: PUSH
6632: LD_INT 1
6634: ARRAY
6635: PPUSH
6636: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
6640: LD_INT 35
6642: PPUSH
6643: CALL_OW 67
// until IsInUnit ( Cornel ) ;
6647: LD_EXP 44
6651: PPUSH
6652: CALL_OW 310
6656: IFFALSE 6640
// end ; InGameOff ;
6658: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6662: LD_STRING M1
6664: PPUSH
6665: CALL_OW 337
// SaveForQuickRestart ;
6669: CALL_OW 22
// cornel_active := true ;
6673: LD_ADDR_EXP 8
6677: PUSH
6678: LD_INT 1
6680: ST_TO_ADDR
// end ;
6681: LD_VAR 0 1
6685: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
6686: LD_EXP 37
6690: PPUSH
6691: LD_EXP 47
6695: PPUSH
6696: CALL_OW 296
6700: PUSH
6701: LD_INT 10
6703: LESS
6704: IFFALSE 8087
6706: GO 6708
6708: DISABLE
6709: LD_INT 0
6711: PPUSH
6712: PPUSH
6713: PPUSH
6714: PPUSH
6715: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
6716: LD_ADDR_VAR 0 2
6720: PUSH
6721: LD_INT 89
6723: PUSH
6724: LD_INT 34
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: LD_INT 138
6733: PUSH
6734: LD_INT 63
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 196
6743: PUSH
6744: LD_INT 84
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 135
6753: PUSH
6754: LD_INT 52
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 103
6763: PUSH
6764: LD_INT 39
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 58
6773: PUSH
6774: LD_INT 30
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 38
6783: PUSH
6784: LD_INT 51
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: ST_TO_ADDR
// Video ( true ) ;
6800: LD_INT 1
6802: PPUSH
6803: CALL 73275 0 1
// if jmm_units then
6807: LD_EXP 4
6811: IFFALSE 6887
// for i in jmm_units do
6813: LD_ADDR_VAR 0 1
6817: PUSH
6818: LD_EXP 4
6822: PUSH
6823: FOR_IN
6824: IFFALSE 6885
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
6826: LD_VAR 0 1
6830: PPUSH
6831: LD_EXP 37
6835: PPUSH
6836: CALL_OW 296
6840: PUSH
6841: LD_INT 10
6843: LESS
6844: PUSH
6845: LD_VAR 0 1
6849: PPUSH
6850: CALL_OW 310
6854: NOT
6855: AND
6856: IFFALSE 6874
// ComTurnUnit ( i , JMM ) else
6858: LD_VAR 0 1
6862: PPUSH
6863: LD_EXP 37
6867: PPUSH
6868: CALL_OW 119
6872: GO 6883
// ComHold ( i ) ;
6874: LD_VAR 0 1
6878: PPUSH
6879: CALL_OW 140
// end ;
6883: GO 6823
6885: POP
6886: POP
// if IsInUnit ( JMM ) then
6887: LD_EXP 37
6891: PPUSH
6892: CALL_OW 310
6896: IFFALSE 6921
// begin ComExitVehicle ( JMM ) ;
6898: LD_EXP 37
6902: PPUSH
6903: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
6907: LD_EXP 37
6911: PPUSH
6912: LD_EXP 47
6916: PPUSH
6917: CALL_OW 172
// end ; Wait ( 10 ) ;
6921: LD_INT 10
6923: PPUSH
6924: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
6928: LD_EXP 37
6932: PPUSH
6933: LD_EXP 47
6937: PPUSH
6938: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
6942: LD_INT 35
6944: PPUSH
6945: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
6949: LD_EXP 37
6953: PPUSH
6954: LD_EXP 47
6958: PPUSH
6959: CALL_OW 296
6963: PUSH
6964: LD_INT 6
6966: LESS
6967: IFFALSE 6942
// ComTurnUnit ( JMM , Lynch ) ;
6969: LD_EXP 37
6973: PPUSH
6974: LD_EXP 47
6978: PPUSH
6979: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
6983: LD_ADDR_VAR 0 1
6987: PUSH
6988: LD_EXP 47
6992: PUSH
6993: LD_EXP 48
6997: PUSH
6998: LD_EXP 49
7002: PUSH
7003: LD_EXP 50
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: PUSH
7014: FOR_IN
7015: IFFALSE 7033
// ComTurnUnit ( i , JMM ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: LD_EXP 37
7026: PPUSH
7027: CALL_OW 119
7031: GO 7014
7033: POP
7034: POP
// Wait ( 0 0$0.3 ) ;
7035: LD_INT 10
7037: PPUSH
7038: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7042: LD_EXP 37
7046: PPUSH
7047: LD_STRING D2-JMM-1
7049: PPUSH
7050: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7054: LD_EXP 47
7058: PPUSH
7059: LD_STRING D2-Sol1-1
7061: PPUSH
7062: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7066: LD_EXP 37
7070: PPUSH
7071: LD_STRING D2-JMM-2
7073: PPUSH
7074: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7078: LD_EXP 47
7082: PPUSH
7083: LD_STRING D2-Sol1-2
7085: PPUSH
7086: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7090: LD_EXP 37
7094: PPUSH
7095: LD_STRING D2-JMM-3
7097: PPUSH
7098: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7102: LD_EXP 47
7106: PPUSH
7107: LD_STRING D2-Sol1-3
7109: PPUSH
7110: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7114: LD_ADDR_VAR 0 1
7118: PUSH
7119: LD_INT 22
7121: PUSH
7122: LD_INT 8
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PPUSH
7129: CALL_OW 69
7133: PUSH
7134: FOR_IN
7135: IFFALSE 7151
// SetSide ( i , 1 ) ;
7137: LD_VAR 0 1
7141: PPUSH
7142: LD_INT 1
7144: PPUSH
7145: CALL_OW 235
7149: GO 7134
7151: POP
7152: POP
// Say ( JMM , D2-JMM-4 ) ;
7153: LD_EXP 37
7157: PPUSH
7158: LD_STRING D2-JMM-4
7160: PPUSH
7161: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7165: LD_INT 1
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 332
// for i = 1 to points do
7175: LD_ADDR_VAR 0 1
7179: PUSH
7180: DOUBLE
7181: LD_INT 1
7183: DEC
7184: ST_TO_ADDR
7185: LD_VAR 0 2
7189: PUSH
7190: FOR_TO
7191: IFFALSE 7366
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7193: LD_VAR 0 2
7197: PUSH
7198: LD_VAR 0 1
7202: ARRAY
7203: PUSH
7204: LD_INT 1
7206: ARRAY
7207: PPUSH
7208: LD_VAR 0 2
7212: PUSH
7213: LD_VAR 0 1
7217: ARRAY
7218: PUSH
7219: LD_INT 2
7221: ARRAY
7222: PPUSH
7223: CALL_OW 84
// if i = 1 then
7227: LD_VAR 0 1
7231: PUSH
7232: LD_INT 1
7234: EQUAL
7235: IFFALSE 7249
// Say ( Lynch , D2-Sol1-4 ) ;
7237: LD_EXP 47
7241: PPUSH
7242: LD_STRING D2-Sol1-4
7244: PPUSH
7245: CALL_OW 88
// if i = 2 then
7249: LD_VAR 0 1
7253: PUSH
7254: LD_INT 2
7256: EQUAL
7257: IFFALSE 7271
// Say ( JMM , D2-JMM-5 ) ;
7259: LD_EXP 37
7263: PPUSH
7264: LD_STRING D2-JMM-5
7266: PPUSH
7267: CALL_OW 88
// if i = 4 then
7271: LD_VAR 0 1
7275: PUSH
7276: LD_INT 4
7278: EQUAL
7279: IFFALSE 7303
// begin RevealFogArea ( 1 , troopsArea ) ;
7281: LD_INT 1
7283: PPUSH
7284: LD_INT 6
7286: PPUSH
7287: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7291: LD_EXP 47
7295: PPUSH
7296: LD_STRING D2-Sol1-5
7298: PPUSH
7299: CALL_OW 88
// end ; if i = 5 then
7303: LD_VAR 0 1
7307: PUSH
7308: LD_INT 5
7310: EQUAL
7311: IFFALSE 7325
// Say ( JMM , D2-JMM-6 ) ;
7313: LD_EXP 37
7317: PPUSH
7318: LD_STRING D2-JMM-6
7320: PPUSH
7321: CALL_OW 88
// if i = 7 then
7325: LD_VAR 0 1
7329: PUSH
7330: LD_INT 7
7332: EQUAL
7333: IFFALSE 7357
// begin RevealFogArea ( 1 , forestArea ) ;
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 7
7340: PPUSH
7341: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7345: LD_EXP 47
7349: PPUSH
7350: LD_STRING D2-Sol1-6
7352: PPUSH
7353: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7357: LD_INT 46
7359: PPUSH
7360: CALL_OW 67
// end ;
7364: GO 7190
7366: POP
7367: POP
// CenterNowOnUnits ( JMM ) ;
7368: LD_EXP 37
7372: PPUSH
7373: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7377: LD_EXP 37
7381: PPUSH
7382: LD_STRING D2-JMM-7
7384: PPUSH
7385: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7389: LD_EXP 47
7393: PPUSH
7394: LD_STRING D2-Sol1-7
7396: PPUSH
7397: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7401: LD_EXP 37
7405: PPUSH
7406: LD_STRING D2-JMM-8
7408: PPUSH
7409: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7413: LD_ADDR_VAR 0 4
7417: PUSH
7418: LD_INT 22
7420: PUSH
7421: LD_INT 1
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 30
7430: PUSH
7431: LD_INT 31
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PPUSH
7442: CALL_OW 69
7446: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7447: LD_EXP 47
7451: PPUSH
7452: LD_VAR 0 4
7456: PUSH
7457: LD_INT 1
7459: ARRAY
7460: PPUSH
7461: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7465: LD_INT 65
7467: PPUSH
7468: LD_INT 101
7470: PPUSH
7471: CALL_OW 428
7475: IFFALSE 7498
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7477: LD_INT 65
7479: PPUSH
7480: LD_INT 101
7482: PPUSH
7483: CALL_OW 428
7487: PPUSH
7488: LD_INT 75
7490: PPUSH
7491: LD_INT 100
7493: PPUSH
7494: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7498: LD_INT 66
7500: PPUSH
7501: LD_INT 103
7503: PPUSH
7504: CALL_OW 428
7508: IFFALSE 7531
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7510: LD_INT 66
7512: PPUSH
7513: LD_INT 103
7515: PPUSH
7516: CALL_OW 428
7520: PPUSH
7521: LD_INT 75
7523: PPUSH
7524: LD_INT 100
7526: PPUSH
7527: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7531: LD_ADDR_VAR 0 5
7535: PUSH
7536: LD_INT 22
7538: PUSH
7539: LD_INT 1
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 21
7548: PUSH
7549: LD_INT 2
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 91
7558: PUSH
7559: LD_EXP 37
7563: PUSH
7564: LD_INT 7
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: LIST
7576: PPUSH
7577: CALL_OW 69
7581: ST_TO_ADDR
// if tmp then
7582: LD_VAR 0 5
7586: IFFALSE 7603
// ComMoveXY ( tmp , 75 , 100 ) ;
7588: LD_VAR 0 5
7592: PPUSH
7593: LD_INT 75
7595: PPUSH
7596: LD_INT 100
7598: PPUSH
7599: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
7603: LD_ADDR_VAR 0 3
7607: PUSH
7608: LD_EXP 4
7612: PPUSH
7613: LD_INT 25
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 72
7627: PPUSH
7628: LD_EXP 37
7632: PPUSH
7633: CALL_OW 74
7637: ST_TO_ADDR
// if sol then
7638: LD_VAR 0 3
7642: IFFALSE 7702
// if GetDistUnits ( JMM , sol ) < 10 then
7644: LD_EXP 37
7648: PPUSH
7649: LD_VAR 0 3
7653: PPUSH
7654: CALL_OW 296
7658: PUSH
7659: LD_INT 10
7661: LESS
7662: IFFALSE 7702
// begin if IsInUnit ( sol ) then
7664: LD_VAR 0 3
7668: PPUSH
7669: CALL_OW 310
7673: IFFALSE 7684
// ComExitVehicle ( sol ) ;
7675: LD_VAR 0 3
7679: PPUSH
7680: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
7684: LD_VAR 0 3
7688: PPUSH
7689: LD_VAR 0 4
7693: PUSH
7694: LD_INT 2
7696: ARRAY
7697: PPUSH
7698: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
7702: LD_INT 10
7704: PPUSH
7705: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
7709: LD_EXP 37
7713: PPUSH
7714: LD_INT 65
7716: PPUSH
7717: LD_INT 101
7719: PPUSH
7720: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
7724: LD_EXP 37
7728: PPUSH
7729: LD_INT 63
7731: PPUSH
7732: LD_INT 100
7734: PPUSH
7735: CALL_OW 178
// tmp := 0 0$0 ;
7739: LD_ADDR_VAR 0 5
7743: PUSH
7744: LD_INT 0
7746: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7747: LD_INT 35
7749: PPUSH
7750: CALL_OW 67
// tmp := tmp + 0 0$1 ;
7754: LD_ADDR_VAR 0 5
7758: PUSH
7759: LD_VAR 0 5
7763: PUSH
7764: LD_INT 35
7766: PLUS
7767: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
7768: LD_EXP 37
7772: PPUSH
7773: LD_INT 65
7775: PPUSH
7776: LD_INT 101
7778: PPUSH
7779: CALL_OW 307
7783: PUSH
7784: LD_VAR 0 5
7788: PUSH
7789: LD_INT 175
7791: GREATER
7792: OR
7793: IFFALSE 7747
// Say ( JMM , D2a-JMM-1 ) ;
7795: LD_EXP 37
7799: PPUSH
7800: LD_STRING D2a-JMM-1
7802: PPUSH
7803: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
7807: LD_EXP 48
7811: PPUSH
7812: LD_INT 66
7814: PPUSH
7815: LD_INT 103
7817: PPUSH
7818: CALL_OW 111
// tmp := 0 0$0 ;
7822: LD_ADDR_VAR 0 5
7826: PUSH
7827: LD_INT 0
7829: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7830: LD_INT 35
7832: PPUSH
7833: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
7837: LD_EXP 48
7841: PPUSH
7842: LD_INT 66
7844: PPUSH
7845: LD_INT 103
7847: PPUSH
7848: CALL_OW 307
7852: PUSH
7853: LD_VAR 0 5
7857: PUSH
7858: LD_INT 175
7860: GREATER
7861: OR
7862: IFFALSE 7830
// ComTurnUnit ( Walker , JMM ) ;
7864: LD_EXP 48
7868: PPUSH
7869: LD_EXP 37
7873: PPUSH
7874: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
7878: LD_EXP 48
7882: PPUSH
7883: LD_STRING D2a-Sci1-1
7885: PPUSH
7886: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
7890: LD_EXP 37
7894: PPUSH
7895: LD_EXP 48
7899: PPUSH
7900: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
7904: LD_EXP 37
7908: PPUSH
7909: LD_STRING D2a-JMM-2
7911: PPUSH
7912: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
7916: LD_EXP 48
7920: PPUSH
7921: LD_STRING D2a-Sci1-2
7923: PPUSH
7924: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
7928: LD_EXP 37
7932: PPUSH
7933: LD_STRING D2a-JMM-3
7935: PPUSH
7936: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
7940: LD_EXP 48
7944: PPUSH
7945: LD_STRING D2a-Sci1-3
7947: PPUSH
7948: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
7952: LD_ADDR_EXP 4
7956: PUSH
7957: LD_EXP 4
7961: PUSH
7962: LD_EXP 47
7966: PUSH
7967: LD_EXP 48
7971: PUSH
7972: LD_EXP 49
7976: PUSH
7977: LD_EXP 50
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: ADD
7988: ST_TO_ADDR
// for i in jmm_units do
7989: LD_ADDR_VAR 0 1
7993: PUSH
7994: LD_EXP 4
7998: PUSH
7999: FOR_IN
8000: IFFALSE 8025
// if not IsInUnit ( i ) then
8002: LD_VAR 0 1
8006: PPUSH
8007: CALL_OW 310
8011: NOT
8012: IFFALSE 8023
// ComFree ( i ) ;
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 139
8023: GO 7999
8025: POP
8026: POP
// Video ( false ) ;
8027: LD_INT 0
8029: PPUSH
8030: CALL 73275 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8034: LD_STRING MSolar1
8036: PPUSH
8037: CALL_OW 337
// jmm_on_west := true ;
8041: LD_ADDR_EXP 5
8045: PUSH
8046: LD_INT 1
8048: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8049: LD_INT 1050
8051: PPUSH
8052: CALL_OW 67
// frank_can_return := true ;
8056: LD_ADDR_EXP 12
8060: PUSH
8061: LD_INT 1
8063: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8064: LD_INT 6300
8066: PPUSH
8067: LD_INT 8400
8069: PPUSH
8070: CALL_OW 12
8074: PPUSH
8075: CALL_OW 67
// send_spec_patrol := true ;
8079: LD_ADDR_EXP 30
8083: PUSH
8084: LD_INT 1
8086: ST_TO_ADDR
// end ;
8087: PPOPN 5
8089: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8090: LD_INT 22
8092: PUSH
8093: LD_INT 1
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: LD_INT 34
8102: PUSH
8103: LD_INT 51
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PUSH
8110: LD_INT 92
8112: PUSH
8113: LD_INT 63
8115: PUSH
8116: LD_INT 100
8118: PUSH
8119: LD_INT 5
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: PPUSH
8136: CALL_OW 69
8140: PUSH
8141: LD_EXP 5
8145: NOT
8146: AND
8147: IFFALSE 8260
8149: GO 8151
8151: DISABLE
8152: LD_INT 0
8154: PPUSH
8155: PPUSH
// begin enable ;
8156: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8157: LD_ADDR_VAR 0 2
8161: PUSH
8162: LD_INT 22
8164: PUSH
8165: LD_INT 1
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: PUSH
8172: LD_INT 34
8174: PUSH
8175: LD_INT 51
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: LD_INT 92
8184: PUSH
8185: LD_INT 63
8187: PUSH
8188: LD_INT 100
8190: PUSH
8191: LD_INT 5
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: LIST
8204: PUSH
8205: EMPTY
8206: LIST
8207: PPUSH
8208: CALL_OW 69
8212: ST_TO_ADDR
// if not filter then
8213: LD_VAR 0 2
8217: NOT
8218: IFFALSE 8222
// exit ;
8220: GO 8260
// for i in filter do
8222: LD_ADDR_VAR 0 1
8226: PUSH
8227: LD_VAR 0 2
8231: PUSH
8232: FOR_IN
8233: IFFALSE 8258
// begin SetFuel ( i , 0 ) ;
8235: LD_VAR 0 1
8239: PPUSH
8240: LD_INT 0
8242: PPUSH
8243: CALL_OW 240
// ComStop ( i ) ;
8247: LD_VAR 0 1
8251: PPUSH
8252: CALL_OW 141
// end ;
8256: GO 8232
8258: POP
8259: POP
// end ;
8260: PPOPN 2
8262: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8263: LD_EXP 30
8267: IFFALSE 9393
8269: GO 8271
8271: DISABLE
8272: LD_INT 0
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
// begin if not ru_spec_patrol then
8281: LD_EXP 54
8285: NOT
8286: IFFALSE 8290
// exit ;
8288: GO 9393
// dead1 := false ;
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_INT 0
8297: ST_TO_ADDR
// dead2 := false ;
8298: LD_ADDR_VAR 0 2
8302: PUSH
8303: LD_INT 0
8305: ST_TO_ADDR
// inarea1 := false ;
8306: LD_ADDR_VAR 0 3
8310: PUSH
8311: LD_INT 0
8313: ST_TO_ADDR
// inarea2 := false ;
8314: LD_ADDR_VAR 0 4
8318: PUSH
8319: LD_INT 0
8321: ST_TO_ADDR
// tmp := [ ] ;
8322: LD_ADDR_VAR 0 6
8326: PUSH
8327: EMPTY
8328: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8329: LD_EXP 54
8333: PPUSH
8334: LD_INT 75
8336: PPUSH
8337: LD_INT 101
8339: PPUSH
8340: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8344: LD_INT 35
8346: PPUSH
8347: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8351: LD_INT 1
8353: PPUSH
8354: LD_EXP 54
8358: PUSH
8359: LD_INT 1
8361: ARRAY
8362: PPUSH
8363: CALL_OW 292
8367: PUSH
8368: LD_EXP 54
8372: PPUSH
8373: LD_INT 92
8375: PUSH
8376: LD_INT 75
8378: PUSH
8379: LD_INT 101
8381: PUSH
8382: LD_INT 4
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: PPUSH
8391: CALL_OW 72
8395: OR
8396: IFFALSE 8344
// ComStop ( ru_spec_patrol ) ;
8398: LD_EXP 54
8402: PPUSH
8403: CALL_OW 141
// Wait ( 0 0$02 ) ;
8407: LD_INT 70
8409: PPUSH
8410: CALL_OW 67
// DialogueOn ;
8414: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8418: LD_EXP 54
8422: PUSH
8423: LD_INT 1
8425: ARRAY
8426: PPUSH
8427: LD_STRING D8-Rus1-1
8429: PPUSH
8430: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8434: LD_EXP 37
8438: PPUSH
8439: LD_STRING D8-JMM-1
8441: PPUSH
8442: CALL_OW 88
// DialogueOff ;
8446: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8450: LD_EXP 54
8454: PPUSH
8455: LD_INT 13
8457: PPUSH
8458: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8462: LD_INT 35
8464: PPUSH
8465: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8469: LD_VAR 0 1
8473: NOT
8474: PUSH
8475: LD_EXP 54
8479: PUSH
8480: LD_INT 1
8482: ARRAY
8483: PPUSH
8484: CALL_OW 301
8488: AND
8489: IFFALSE 8499
// dead1 := true ;
8491: LD_ADDR_VAR 0 1
8495: PUSH
8496: LD_INT 1
8498: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8499: LD_VAR 0 2
8503: NOT
8504: PUSH
8505: LD_EXP 54
8509: PUSH
8510: LD_INT 2
8512: ARRAY
8513: PPUSH
8514: CALL_OW 301
8518: AND
8519: IFFALSE 8529
// dead2 := true ;
8521: LD_ADDR_VAR 0 2
8525: PUSH
8526: LD_INT 1
8528: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8529: LD_VAR 0 3
8533: NOT
8534: PUSH
8535: LD_EXP 54
8539: PUSH
8540: LD_INT 1
8542: ARRAY
8543: PPUSH
8544: LD_INT 14
8546: PPUSH
8547: CALL_OW 308
8551: AND
8552: IFFALSE 8562
// inarea1 := true ;
8554: LD_ADDR_VAR 0 3
8558: PUSH
8559: LD_INT 1
8561: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
8562: LD_VAR 0 4
8566: NOT
8567: PUSH
8568: LD_EXP 54
8572: PUSH
8573: LD_INT 2
8575: ARRAY
8576: PPUSH
8577: LD_INT 14
8579: PPUSH
8580: CALL_OW 308
8584: AND
8585: IFFALSE 8595
// inarea2 := true ;
8587: LD_ADDR_VAR 0 4
8591: PUSH
8592: LD_INT 1
8594: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
8595: LD_VAR 0 1
8599: PUSH
8600: LD_VAR 0 2
8604: AND
8605: PUSH
8606: LD_VAR 0 1
8610: PUSH
8611: LD_VAR 0 4
8615: AND
8616: OR
8617: PUSH
8618: LD_VAR 0 2
8622: PUSH
8623: LD_VAR 0 3
8627: AND
8628: OR
8629: PUSH
8630: LD_VAR 0 3
8634: PUSH
8635: LD_VAR 0 4
8639: AND
8640: OR
8641: IFFALSE 8462
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
8643: LD_VAR 0 3
8647: PUSH
8648: LD_VAR 0 4
8652: AND
8653: PUSH
8654: LD_VAR 0 1
8658: PUSH
8659: LD_VAR 0 4
8663: AND
8664: OR
8665: PUSH
8666: LD_VAR 0 2
8670: PUSH
8671: LD_VAR 0 3
8675: AND
8676: OR
8677: IFFALSE 9373
// begin prepare_siege := true ;
8679: LD_ADDR_EXP 31
8683: PUSH
8684: LD_INT 1
8686: ST_TO_ADDR
// DialogueOn ;
8687: CALL_OW 6
// if ( inarea1 and inarea2 ) then
8691: LD_VAR 0 3
8695: PUSH
8696: LD_VAR 0 4
8700: AND
8701: IFFALSE 8717
// Say ( JMM , D8b-JMM-1a ) else
8703: LD_EXP 37
8707: PPUSH
8708: LD_STRING D8b-JMM-1a
8710: PPUSH
8711: CALL_OW 88
8715: GO 8729
// Say ( JMM , D8b-JMM-1 ) ;
8717: LD_EXP 37
8721: PPUSH
8722: LD_STRING D8b-JMM-1
8724: PPUSH
8725: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
8729: LD_EXP 4
8733: PPUSH
8734: LD_INT 26
8736: PUSH
8737: LD_INT 1
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PPUSH
8744: CALL_OW 72
8748: PUSH
8749: LD_EXP 38
8753: PUSH
8754: LD_EXP 39
8758: PUSH
8759: LD_EXP 48
8763: PUSH
8764: LD_EXP 51
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: DIFF
8775: PPUSH
8776: LD_STRING D8b-Sol1-1
8778: PPUSH
8779: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
8783: LD_EXP 39
8787: PUSH
8788: LD_EXP 39
8792: PUSH
8793: LD_EXP 4
8797: IN
8798: AND
8799: IFFALSE 8815
// Say ( Cyrus , D8b-Cyrus-1 ) else
8801: LD_EXP 39
8805: PPUSH
8806: LD_STRING D8b-Cyrus-1
8808: PPUSH
8809: CALL_OW 88
8813: GO 8827
// Say ( JMM , D8b-JMM-1a ) ;
8815: LD_EXP 37
8819: PPUSH
8820: LD_STRING D8b-JMM-1a
8822: PPUSH
8823: CALL_OW 88
// if Lisa and Lisa in jmm_units then
8827: LD_EXP 40
8831: PUSH
8832: LD_EXP 40
8836: PUSH
8837: LD_EXP 4
8841: IN
8842: AND
8843: IFFALSE 8857
// Say ( Lisa , D8b-Lisa-2 ) ;
8845: LD_EXP 40
8849: PPUSH
8850: LD_STRING D8b-Lisa-2
8852: PPUSH
8853: CALL_OW 88
// if Bobby and Bobby in jmm_units then
8857: LD_EXP 38
8861: PUSH
8862: LD_EXP 38
8866: PUSH
8867: LD_EXP 4
8871: IN
8872: AND
8873: IFFALSE 8889
// Say ( Bobby , D8b-Bobby-1 ) else
8875: LD_EXP 38
8879: PPUSH
8880: LD_STRING D8b-Bobby-1
8882: PPUSH
8883: CALL_OW 88
8887: GO 8949
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
8889: LD_ADDR_VAR 0 5
8893: PUSH
8894: LD_EXP 4
8898: PPUSH
8899: LD_INT 26
8901: PUSH
8902: LD_INT 1
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PPUSH
8909: CALL_OW 72
8913: PUSH
8914: LD_EXP 38
8918: PUSH
8919: LD_EXP 39
8923: PUSH
8924: LD_EXP 48
8928: PUSH
8929: LD_EXP 51
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: DIFF
8940: PPUSH
8941: LD_STRING D8b-Sol2-1
8943: PPUSH
8944: CALL 585 0 2
8948: ST_TO_ADDR
// DialogueOff ;
8949: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
8953: LD_EXP 39
8957: PUSH
8958: LD_EXP 39
8962: PUSH
8963: LD_EXP 4
8967: IN
8968: AND
8969: IFFALSE 8994
// tmp := Insert ( tmp , 1 , Cyrus ) ;
8971: LD_ADDR_VAR 0 6
8975: PUSH
8976: LD_VAR 0 6
8980: PPUSH
8981: LD_INT 1
8983: PPUSH
8984: LD_EXP 39
8988: PPUSH
8989: CALL_OW 2
8993: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
8994: LD_EXP 38
8998: PUSH
8999: LD_EXP 38
9003: PUSH
9004: LD_EXP 4
9008: IN
9009: AND
9010: IFFALSE 9035
// tmp := Insert ( tmp , 1 , Bobby ) ;
9012: LD_ADDR_VAR 0 6
9016: PUSH
9017: LD_VAR 0 6
9021: PPUSH
9022: LD_INT 1
9024: PPUSH
9025: LD_EXP 38
9029: PPUSH
9030: CALL_OW 2
9034: ST_TO_ADDR
// if sol then
9035: LD_VAR 0 5
9039: IFFALSE 9064
// tmp := Insert ( tmp , 1 , sol ) ;
9041: LD_ADDR_VAR 0 6
9045: PUSH
9046: LD_VAR 0 6
9050: PPUSH
9051: LD_INT 1
9053: PPUSH
9054: LD_VAR 0 5
9058: PPUSH
9059: CALL_OW 2
9063: ST_TO_ADDR
// if tmp then
9064: LD_VAR 0 6
9068: IFFALSE 9332
// begin SetSide ( tmp , 8 ) ;
9070: LD_VAR 0 6
9074: PPUSH
9075: LD_INT 8
9077: PPUSH
9078: CALL_OW 235
// for i in tmp do
9082: LD_ADDR_VAR 0 7
9086: PUSH
9087: LD_VAR 0 6
9091: PUSH
9092: FOR_IN
9093: IFFALSE 9184
// begin if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_building then
9095: LD_VAR 0 7
9099: PPUSH
9100: CALL_OW 310
9104: PUSH
9105: LD_VAR 0 7
9109: PPUSH
9110: CALL_OW 310
9114: PPUSH
9115: CALL_OW 266
9119: PUSH
9120: LD_INT 3
9122: EQUAL
9123: AND
9124: IFFALSE 9135
// ComExitBuilding ( i ) ;
9126: LD_VAR 0 7
9130: PPUSH
9131: CALL_OW 122
// if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_vehicle then
9135: LD_VAR 0 7
9139: PPUSH
9140: CALL_OW 310
9144: PUSH
9145: LD_VAR 0 7
9149: PPUSH
9150: CALL_OW 310
9154: PPUSH
9155: CALL_OW 266
9159: PUSH
9160: LD_INT 2
9162: EQUAL
9163: AND
9164: IFFALSE 9175
// ComExitVehicle ( i ) ;
9166: LD_VAR 0 7
9170: PPUSH
9171: CALL_OW 121
// wait ( 0 0$1 ) ;
9175: LD_INT 35
9177: PPUSH
9178: CALL_OW 67
// end ;
9182: GO 9092
9184: POP
9185: POP
// ComFree ( tmp ) ;
9186: LD_VAR 0 6
9190: PPUSH
9191: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9195: LD_VAR 0 6
9199: PPUSH
9200: LD_INT 15
9202: PPUSH
9203: CALL_OW 173
// AddComHold ( tmp ) ;
9207: LD_VAR 0 6
9211: PPUSH
9212: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9216: LD_INT 35
9218: PPUSH
9219: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9223: LD_VAR 0 6
9227: PUSH
9228: LD_INT 1
9230: ARRAY
9231: PPUSH
9232: CALL_OW 314
9236: NOT
9237: IFFALSE 9251
// ComMoveToArea ( tmp , cyrusEscape ) ;
9239: LD_VAR 0 6
9243: PPUSH
9244: LD_INT 15
9246: PPUSH
9247: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9251: LD_VAR 0 6
9255: PUSH
9256: LD_INT 1
9258: ARRAY
9259: PPUSH
9260: LD_INT 15
9262: PPUSH
9263: CALL_OW 308
9267: IFFALSE 9322
// begin RemoveUnit ( tmp [ 1 ] ) ;
9269: LD_VAR 0 6
9273: PUSH
9274: LD_INT 1
9276: ARRAY
9277: PPUSH
9278: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9282: LD_ADDR_EXP 4
9286: PUSH
9287: LD_EXP 4
9291: PUSH
9292: LD_VAR 0 6
9296: PUSH
9297: LD_INT 1
9299: ARRAY
9300: DIFF
9301: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9302: LD_ADDR_VAR 0 6
9306: PUSH
9307: LD_VAR 0 6
9311: PUSH
9312: LD_VAR 0 6
9316: PUSH
9317: LD_INT 1
9319: ARRAY
9320: DIFF
9321: ST_TO_ADDR
// end ; until tmp = 0 ;
9322: LD_VAR 0 6
9326: PUSH
9327: LD_INT 0
9329: EQUAL
9330: IFFALSE 9216
// end ; wait ( 0 0$30 ) ;
9332: LD_INT 1050
9334: PPUSH
9335: CALL_OW 67
// if ru_spec_patrol then
9339: LD_EXP 54
9343: IFFALSE 9371
// for i in ru_spec_patrol do
9345: LD_ADDR_VAR 0 7
9349: PUSH
9350: LD_EXP 54
9354: PUSH
9355: FOR_IN
9356: IFFALSE 9369
// RemoveUnit ( i ) ;
9358: LD_VAR 0 7
9362: PPUSH
9363: CALL_OW 64
9367: GO 9355
9369: POP
9370: POP
// end else
9371: GO 9393
// begin prepare_siege := false ;
9373: LD_ADDR_EXP 31
9377: PUSH
9378: LD_INT 0
9380: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9381: LD_EXP 37
9385: PPUSH
9386: LD_STRING D8a-JMM-1
9388: PPUSH
9389: CALL_OW 88
// end ; end ;
9393: PPOPN 7
9395: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9396: LD_EXP 12
9400: IFFALSE 10620
9402: GO 9404
9404: DISABLE
9405: LD_INT 0
9407: PPUSH
9408: PPUSH
9409: PPUSH
// begin uc_side := 8 ;
9410: LD_ADDR_OWVAR 20
9414: PUSH
9415: LD_INT 8
9417: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9418: LD_ADDR_VAR 0 3
9422: PUSH
9423: LD_INT 59
9425: PUSH
9426: LD_INT 71
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 122
9435: PUSH
9436: LD_INT 117
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9447: LD_ADDR_EXP 51
9451: PUSH
9452: LD_STRING Frank
9454: PPUSH
9455: LD_INT 0
9457: PPUSH
9458: LD_STRING 
9460: PPUSH
9461: CALL 36566 0 3
9465: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9466: LD_ADDR_VAR 0 1
9470: PUSH
9471: LD_INT 1
9473: PPUSH
9474: LD_INT 2
9476: PPUSH
9477: CALL_OW 12
9481: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9482: LD_EXP 51
9486: PPUSH
9487: LD_VAR 0 3
9491: PUSH
9492: LD_VAR 0 1
9496: ARRAY
9497: PUSH
9498: LD_INT 1
9500: ARRAY
9501: PPUSH
9502: LD_VAR 0 3
9506: PUSH
9507: LD_VAR 0 1
9511: ARRAY
9512: PUSH
9513: LD_INT 2
9515: ARRAY
9516: PPUSH
9517: LD_INT 0
9519: PPUSH
9520: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9524: LD_EXP 51
9528: PPUSH
9529: LD_INT 1
9531: PPUSH
9532: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9536: LD_INT 35
9538: PPUSH
9539: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9543: LD_EXP 51
9547: PPUSH
9548: LD_EXP 37
9552: PPUSH
9553: CALL_OW 296
9557: PUSH
9558: LD_INT 8
9560: LESS
9561: PUSH
9562: LD_EXP 51
9566: PPUSH
9567: CALL_OW 256
9571: PUSH
9572: LD_INT 250
9574: GREATER
9575: AND
9576: IFFALSE 9536
// Video ( true ) ;
9578: LD_INT 1
9580: PPUSH
9581: CALL 73275 0 1
// CenterOnUnits ( JMM ) ;
9585: LD_EXP 37
9589: PPUSH
9590: CALL_OW 85
// if IsInUnit ( JMM ) then
9594: LD_EXP 37
9598: PPUSH
9599: CALL_OW 310
9603: IFFALSE 9614
// ComFree ( JMM ) ;
9605: LD_EXP 37
9609: PPUSH
9610: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
9614: LD_EXP 37
9618: PPUSH
9619: LD_EXP 51
9623: PPUSH
9624: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
9628: LD_EXP 51
9632: PPUSH
9633: LD_EXP 37
9637: PPUSH
9638: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
9642: LD_EXP 37
9646: PPUSH
9647: LD_STRING D6-JMM-1
9649: PPUSH
9650: CALL_OW 88
// p := 0 ;
9654: LD_ADDR_VAR 0 2
9658: PUSH
9659: LD_INT 0
9661: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9662: LD_INT 35
9664: PPUSH
9665: CALL_OW 67
// p := p + 1 ;
9669: LD_ADDR_VAR 0 2
9673: PUSH
9674: LD_VAR 0 2
9678: PUSH
9679: LD_INT 1
9681: PLUS
9682: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
9683: LD_EXP 37
9687: PPUSH
9688: LD_EXP 51
9692: PPUSH
9693: CALL_OW 296
9697: PUSH
9698: LD_INT 8
9700: LESS
9701: PUSH
9702: LD_VAR 0 2
9706: PUSH
9707: LD_INT 7
9709: GREATER
9710: OR
9711: IFFALSE 9662
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 then
9713: LD_EXP 40
9717: PUSH
9718: LD_EXP 40
9722: PPUSH
9723: LD_EXP 51
9727: PPUSH
9728: CALL_OW 296
9732: PUSH
9733: LD_INT 20
9735: LESS
9736: AND
9737: IFFALSE 9762
// begin ComFree ( Lisa ) ;
9739: LD_EXP 40
9743: PPUSH
9744: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
9748: LD_EXP 40
9752: PPUSH
9753: LD_EXP 51
9757: PPUSH
9758: CALL_OW 172
// end ; if Lynch then
9762: LD_EXP 47
9766: IFFALSE 9791
// begin ComFree ( Lynch ) ;
9768: LD_EXP 47
9772: PPUSH
9773: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
9777: LD_EXP 47
9781: PPUSH
9782: LD_EXP 51
9786: PPUSH
9787: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
9791: LD_EXP 37
9795: PPUSH
9796: LD_EXP 51
9800: PPUSH
9801: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
9805: LD_EXP 51
9809: PPUSH
9810: LD_EXP 37
9814: PPUSH
9815: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
9819: LD_EXP 51
9823: PPUSH
9824: LD_STRING D6-Frank-1
9826: PPUSH
9827: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
9831: LD_INT 69
9833: PPUSH
9834: LD_INT 20
9836: PPUSH
9837: LD_INT 1
9839: PPUSH
9840: LD_INT 20
9842: NEG
9843: PPUSH
9844: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
9848: LD_INT 69
9850: PPUSH
9851: LD_INT 20
9853: PPUSH
9854: LD_INT 1
9856: PPUSH
9857: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
9861: LD_INT 190
9863: PPUSH
9864: LD_INT 31
9866: PPUSH
9867: LD_INT 1
9869: PPUSH
9870: LD_INT 20
9872: NEG
9873: PPUSH
9874: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
9878: LD_INT 190
9880: PPUSH
9881: LD_INT 31
9883: PPUSH
9884: LD_INT 1
9886: PPUSH
9887: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
9891: LD_INT 69
9893: PPUSH
9894: LD_INT 20
9896: PPUSH
9897: CALL_OW 84
// Wait ( 0 0$02 ) ;
9901: LD_INT 70
9903: PPUSH
9904: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
9908: LD_EXP 37
9912: PPUSH
9913: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) then
9917: LD_EXP 40
9921: PUSH
9922: LD_EXP 40
9926: PPUSH
9927: LD_EXP 51
9931: PPUSH
9932: CALL_OW 296
9936: PUSH
9937: LD_INT 20
9939: LESS
9940: AND
9941: PUSH
9942: LD_EXP 40
9946: PPUSH
9947: CALL_OW 302
9951: AND
9952: IFFALSE 10074
// begin ComFree ( Lisa ) ;
9954: LD_EXP 40
9958: PPUSH
9959: CALL_OW 139
// p := 0 ;
9963: LD_ADDR_VAR 0 2
9967: PUSH
9968: LD_INT 0
9970: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9971: LD_INT 35
9973: PPUSH
9974: CALL_OW 67
// p := p + 1 ;
9978: LD_ADDR_VAR 0 2
9982: PUSH
9983: LD_VAR 0 2
9987: PUSH
9988: LD_INT 1
9990: PLUS
9991: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
9992: LD_EXP 40
9996: PPUSH
9997: LD_EXP 51
10001: PPUSH
10002: CALL_OW 296
10006: PUSH
10007: LD_INT 7
10009: LESS
10010: PUSH
10011: LD_VAR 0 2
10015: PUSH
10016: LD_INT 7
10018: GREATER
10019: OR
10020: IFFALSE 9971
// Say ( Lisa , D6-Lisa-1 ) ;
10022: LD_EXP 40
10026: PPUSH
10027: LD_STRING D6-Lisa-1
10029: PPUSH
10030: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10034: LD_EXP 40
10038: PPUSH
10039: LD_EXP 51
10043: PPUSH
10044: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10048: LD_EXP 51
10052: PPUSH
10053: LD_EXP 40
10057: PPUSH
10058: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10062: LD_EXP 51
10066: PPUSH
10067: LD_STRING D6-Frank-2
10069: PPUSH
10070: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10074: LD_EXP 47
10078: PUSH
10079: LD_EXP 47
10083: PPUSH
10084: LD_EXP 51
10088: PPUSH
10089: CALL_OW 296
10093: PUSH
10094: LD_INT 20
10096: LESS
10097: AND
10098: PUSH
10099: LD_EXP 47
10103: PPUSH
10104: CALL_OW 302
10108: AND
10109: IFFALSE 10290
// begin ComTurnUnit ( Lynch , JMM ) ;
10111: LD_EXP 47
10115: PPUSH
10116: LD_EXP 37
10120: PPUSH
10121: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10125: LD_EXP 51
10129: PPUSH
10130: LD_EXP 37
10134: PPUSH
10135: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10139: LD_EXP 47
10143: PPUSH
10144: LD_STRING D6-Sol1-2
10146: PPUSH
10147: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10151: LD_EXP 37
10155: PPUSH
10156: LD_STRING D6-JMM-2
10158: PPUSH
10159: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10163: LD_EXP 51
10167: PPUSH
10168: LD_STRING D6-Frank-3
10170: PPUSH
10171: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10175: LD_EXP 37
10179: PPUSH
10180: LD_STRING D6-JMM-3
10182: PPUSH
10183: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10187: LD_EXP 51
10191: PPUSH
10192: LD_STRING D6-Frank-4
10194: PPUSH
10195: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10199: LD_EXP 51
10203: PPUSH
10204: LD_STRING D6-Frank-4a
10206: PPUSH
10207: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10211: LD_EXP 37
10215: PPUSH
10216: LD_STRING D6-JMM-4
10218: PPUSH
10219: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10223: LD_EXP 51
10227: PPUSH
10228: LD_STRING D6-Frank-5
10230: PPUSH
10231: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10235: LD_EXP 40
10239: PUSH
10240: LD_EXP 40
10244: PPUSH
10245: CALL_OW 302
10249: AND
10250: IFFALSE 10264
// Say ( Lisa , D6-Lisa-5 ) ;
10252: LD_EXP 40
10256: PPUSH
10257: LD_STRING D6-Lisa-5
10259: PPUSH
10260: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10264: LD_EXP 51
10268: PPUSH
10269: LD_STRING D6-Frank-6
10271: PPUSH
10272: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10276: LD_EXP 37
10280: PPUSH
10281: LD_STRING D6-JMM-6
10283: PPUSH
10284: CALL_OW 88
// end else
10288: GO 10405
// begin ComTurnUnit ( Frank , JMM ) ;
10290: LD_EXP 51
10294: PPUSH
10295: LD_EXP 37
10299: PPUSH
10300: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10304: LD_EXP 51
10308: PPUSH
10309: LD_STRING D6-Frank-4
10311: PPUSH
10312: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10316: LD_EXP 51
10320: PPUSH
10321: LD_STRING D6-Frank-4a
10323: PPUSH
10324: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10328: LD_EXP 37
10332: PPUSH
10333: LD_STRING D6-JMM-4
10335: PPUSH
10336: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10340: LD_EXP 51
10344: PPUSH
10345: LD_STRING D6-Frank-5
10347: PPUSH
10348: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10352: LD_EXP 40
10356: PUSH
10357: LD_EXP 40
10361: PPUSH
10362: CALL_OW 302
10366: AND
10367: IFFALSE 10381
// Say ( Lisa , D6-Lisa-5 ) ;
10369: LD_EXP 40
10373: PPUSH
10374: LD_STRING D6-Lisa-5
10376: PPUSH
10377: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10381: LD_EXP 51
10385: PPUSH
10386: LD_STRING D6-Frank-6
10388: PPUSH
10389: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10393: LD_EXP 37
10397: PPUSH
10398: LD_STRING D6-JMM-6
10400: PPUSH
10401: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10405: LD_STRING Q1
10407: PPUSH
10408: CALL_OW 97
10412: PUSH
10413: LD_INT 1
10415: DOUBLE
10416: EQUAL
10417: IFTRUE 10421
10419: GO 10432
10421: POP
// frank_send_to_scout := true ; 2 :
10422: LD_ADDR_EXP 15
10426: PUSH
10427: LD_INT 1
10429: ST_TO_ADDR
10430: GO 10452
10432: LD_INT 2
10434: DOUBLE
10435: EQUAL
10436: IFTRUE 10440
10438: GO 10451
10440: POP
// frank_send_to_scout := false ; end ;
10441: LD_ADDR_EXP 15
10445: PUSH
10446: LD_INT 0
10448: ST_TO_ADDR
10449: GO 10452
10451: POP
// Video ( false ) ;
10452: LD_INT 0
10454: PPUSH
10455: CALL 73275 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10459: LD_EXP 37
10463: PUSH
10464: LD_EXP 40
10468: PUSH
10469: LD_EXP 47
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: LIST
10478: PPUSH
10479: CALL_OW 139
// if frank_send_to_scout then
10483: LD_EXP 15
10487: IFFALSE 10541
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10489: LD_EXP 51
10493: PPUSH
10494: LD_INT 15
10496: PPUSH
10497: CALL_OW 113
// wait ( 0 0$01 ) ;
10501: LD_INT 35
10503: PPUSH
10504: CALL_OW 67
// until not See ( 1 , Frank ) ;
10508: LD_INT 1
10510: PPUSH
10511: LD_EXP 51
10515: PPUSH
10516: CALL_OW 292
10520: NOT
10521: IFFALSE 10489
// wait ( 0 0$02 ) ;
10523: LD_INT 70
10525: PPUSH
10526: CALL_OW 67
// RemoveUnit ( Frank ) ;
10530: LD_EXP 51
10534: PPUSH
10535: CALL_OW 64
// end else
10539: GO 10553
// SetSide ( Frank , 1 ) ;
10541: LD_EXP 51
10545: PPUSH
10546: LD_INT 1
10548: PPUSH
10549: CALL_OW 235
// send_attack_on_cornel_base := true ;
10553: LD_ADDR_EXP 26
10557: PUSH
10558: LD_INT 1
10560: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10561: LD_INT 35
10563: PPUSH
10564: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
10568: LD_ADDR_EXP 29
10572: PUSH
10573: LD_EXP 29
10577: PPUSH
10578: LD_STRING -
10580: PPUSH
10581: CALL 1077 0 2
10585: ST_TO_ADDR
// if debug then
10586: LD_EXP 1
10590: IFFALSE 10602
// debug_strings := time_to_prepare ;
10592: LD_ADDR_OWVAR 48
10596: PUSH
10597: LD_EXP 29
10601: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
10602: LD_EXP 29
10606: PUSH
10607: LD_INT 0
10609: EQUAL
10610: IFFALSE 10561
// cornel_prepared := true ;
10612: LD_ADDR_EXP 11
10616: PUSH
10617: LD_INT 1
10619: ST_TO_ADDR
// end ;
10620: PPOPN 3
10622: END
// every 0 0$01 trigger cornel_prepared do
10623: LD_EXP 11
10627: IFFALSE 10935
10629: GO 10631
10631: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
10632: LD_EXP 44
10636: PPUSH
10637: LD_STRING D3-Corn-1
10639: PPUSH
10640: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
10644: LD_STRING MOutWait
10646: PPUSH
10647: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
10651: LD_INT 35
10653: PPUSH
10654: CALL_OW 67
// until cornel_counter = 0 ;
10658: LD_EXP 10
10662: PUSH
10663: LD_INT 0
10665: EQUAL
10666: IFFALSE 10651
// SayRadio ( Cornel , D3a-Corn-1 ) ;
10668: LD_EXP 44
10672: PPUSH
10673: LD_STRING D3a-Corn-1
10675: PPUSH
10676: CALL_OW 94
// if IsOk ( Cornel ) then
10680: LD_EXP 44
10684: PPUSH
10685: CALL_OW 302
10689: IFFALSE 10703
// Say ( JMM , D3a-JMM-1 ) ;
10691: LD_EXP 37
10695: PPUSH
10696: LD_STRING D3a-JMM-1
10698: PPUSH
10699: CALL_OW 88
// end_mission_allowed := true ;
10703: LD_ADDR_EXP 21
10707: PUSH
10708: LD_INT 1
10710: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
10711: LD_STRING M2
10713: PPUSH
10714: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
10718: LD_INT 9
10720: PPUSH
10721: LD_INT 1
10723: PPUSH
10724: CALL_OW 424
// Wait ( 0 0$05 ) ;
10728: LD_INT 175
10730: PPUSH
10731: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
10735: LD_EXP 44
10739: PPUSH
10740: LD_STRING D3a-Corn-2
10742: PPUSH
10743: CALL_OW 94
// cornel_attack := true ;
10747: LD_ADDR_EXP 9
10751: PUSH
10752: LD_INT 1
10754: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
10755: LD_INT 105
10757: PPUSH
10758: CALL_OW 67
// AddMoreTanks ( ) ;
10762: CALL 4940 0 0
// if frank_send_to_scout then
10766: LD_EXP 15
10770: IFFALSE 10935
// begin InitHc ;
10772: CALL_OW 19
// InitUc ;
10776: CALL_OW 18
// uc_side := 8 ;
10780: LD_ADDR_OWVAR 20
10784: PUSH
10785: LD_INT 8
10787: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
10788: LD_ADDR_EXP 51
10792: PUSH
10793: LD_STRING Frank
10795: PPUSH
10796: LD_INT 0
10798: PPUSH
10799: LD_STRING 
10801: PPUSH
10802: CALL 36566 0 3
10806: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
10807: LD_EXP 51
10811: PPUSH
10812: LD_INT 6
10814: PPUSH
10815: LD_INT 9
10817: PPUSH
10818: LD_INT 0
10820: PPUSH
10821: CALL_OW 48
// ComCrawl ( Frank ) ;
10825: LD_EXP 51
10829: PPUSH
10830: CALL_OW 137
// repeat wait ( 10 ) ;
10834: LD_INT 10
10836: PPUSH
10837: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
10841: LD_EXP 37
10845: PPUSH
10846: LD_EXP 51
10850: PPUSH
10851: CALL_OW 296
10855: PUSH
10856: LD_INT 9
10858: LESS
10859: PUSH
10860: LD_INT 9
10862: PPUSH
10863: LD_INT 22
10865: PUSH
10866: LD_INT 1
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PPUSH
10873: CALL_OW 70
10877: OR
10878: IFFALSE 10834
// if IsDead ( Frank ) then
10880: LD_EXP 51
10884: PPUSH
10885: CALL_OW 301
10889: IFFALSE 10893
// exit ;
10891: GO 10935
// CenterOnUnits ( Frank ) ;
10893: LD_EXP 51
10897: PPUSH
10898: CALL_OW 85
// SetSide ( Frank , 1 ) ;
10902: LD_EXP 51
10906: PPUSH
10907: LD_INT 1
10909: PPUSH
10910: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
10914: LD_EXP 51
10918: PPUSH
10919: LD_STRING D6a-Frank-1
10921: PPUSH
10922: CALL_OW 88
// ComWalk ( Frank ) ;
10926: LD_EXP 51
10930: PPUSH
10931: CALL_OW 138
// end ; end ;
10935: END
// every 0 0$01 trigger solar_builded do
10936: LD_EXP 14
10940: IFFALSE 11044
10942: GO 10944
10944: DISABLE
// begin Wait ( 0 0$02 ) ;
10945: LD_INT 70
10947: PPUSH
10948: CALL_OW 67
// DialogueOn ;
10952: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
10956: LD_EXP 37
10960: PPUSH
10961: LD_STRING D2b-JMM-1
10963: PPUSH
10964: CALL_OW 88
// if Walker and IsOk ( Walker ) then
10968: LD_EXP 48
10972: PUSH
10973: LD_EXP 48
10977: PPUSH
10978: CALL_OW 302
10982: AND
10983: IFFALSE 11033
// begin Say ( Walker , D2b-Sci1-1 ) ;
10985: LD_EXP 48
10989: PPUSH
10990: LD_STRING D2b-Sci1-1
10992: PPUSH
10993: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
10997: LD_EXP 37
11001: PPUSH
11002: LD_STRING D2b-JMM-2
11004: PPUSH
11005: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11009: LD_EXP 48
11013: PPUSH
11014: LD_STRING D2b-Sci1-2
11016: PPUSH
11017: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11021: LD_EXP 37
11025: PPUSH
11026: LD_STRING D2b-JMM-3
11028: PPUSH
11029: CALL_OW 88
// end ; DialogueOff ;
11033: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11037: LD_STRING MOutSol
11039: PPUSH
11040: CALL_OW 337
// end ;
11044: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11045: LD_EXP 14
11049: PUSH
11050: LD_EXP 37
11054: PPUSH
11055: CALL_OW 302
11059: AND
11060: PUSH
11061: LD_EXP 37
11065: PPUSH
11066: CALL 911 0 1
11070: AND
11071: PUSH
11072: LD_EXP 16
11076: NOT
11077: AND
11078: IFFALSE 11149
11080: GO 11082
11082: DISABLE
11083: LD_INT 0
11085: PPUSH
// begin jmm_in_veh := true ;
11086: LD_ADDR_EXP 16
11090: PUSH
11091: LD_INT 1
11093: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11094: LD_ADDR_VAR 0 1
11098: PUSH
11099: LD_INT 0
11101: PPUSH
11102: LD_INT 1
11104: PPUSH
11105: CALL_OW 12
11109: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11110: LD_INT 70
11112: PPUSH
11113: CALL_OW 67
// if i then
11117: LD_VAR 0 1
11121: IFFALSE 11137
// Say ( JMM , D2c-JMM-1 ) else
11123: LD_EXP 37
11127: PPUSH
11128: LD_STRING D2c-JMM-1
11130: PPUSH
11131: CALL_OW 88
11135: GO 11149
// Say ( JMM , D2c-JMM-1a ) ;
11137: LD_EXP 37
11141: PPUSH
11142: LD_STRING D2c-JMM-1a
11144: PPUSH
11145: CALL_OW 88
// end ;
11149: PPOPN 1
11151: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11152: LD_EXP 14
11156: PUSH
11157: LD_EXP 38
11161: PPUSH
11162: CALL_OW 302
11166: AND
11167: PUSH
11168: LD_EXP 38
11172: PPUSH
11173: CALL 911 0 1
11177: AND
11178: PUSH
11179: LD_EXP 17
11183: NOT
11184: AND
11185: IFFALSE 11217
11187: GO 11189
11189: DISABLE
// begin bobby_in_veh := true ;
11190: LD_ADDR_EXP 17
11194: PUSH
11195: LD_INT 1
11197: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11198: LD_INT 70
11200: PPUSH
11201: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11205: LD_EXP 38
11209: PPUSH
11210: LD_STRING D2c-Bobby-1
11212: PPUSH
11213: CALL_OW 88
11217: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11218: LD_EXP 14
11222: PUSH
11223: LD_EXP 40
11227: PPUSH
11228: CALL_OW 302
11232: AND
11233: PUSH
11234: LD_EXP 40
11238: PPUSH
11239: CALL 911 0 1
11243: AND
11244: PUSH
11245: LD_EXP 19
11249: NOT
11250: AND
11251: IFFALSE 11283
11253: GO 11255
11255: DISABLE
// begin lisa_in_veh := true ;
11256: LD_ADDR_EXP 19
11260: PUSH
11261: LD_INT 1
11263: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11264: LD_INT 70
11266: PPUSH
11267: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11271: LD_EXP 40
11275: PPUSH
11276: LD_STRING D2c-Lisa-1
11278: PPUSH
11279: CALL_OW 88
11283: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11284: LD_EXP 14
11288: PUSH
11289: LD_EXP 39
11293: PPUSH
11294: CALL_OW 302
11298: AND
11299: PUSH
11300: LD_EXP 39
11304: PPUSH
11305: CALL 911 0 1
11309: AND
11310: PUSH
11311: LD_EXP 18
11315: NOT
11316: AND
11317: IFFALSE 11388
11319: GO 11321
11321: DISABLE
11322: LD_INT 0
11324: PPUSH
// begin cyrus_in_veh := true ;
11325: LD_ADDR_EXP 18
11329: PUSH
11330: LD_INT 1
11332: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11333: LD_ADDR_VAR 0 1
11337: PUSH
11338: LD_INT 0
11340: PPUSH
11341: LD_INT 1
11343: PPUSH
11344: CALL_OW 12
11348: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11349: LD_INT 70
11351: PPUSH
11352: CALL_OW 67
// if i then
11356: LD_VAR 0 1
11360: IFFALSE 11376
// Say ( Cyrus , D2c-Cyrus-1 ) else
11362: LD_EXP 39
11366: PPUSH
11367: LD_STRING D2c-Cyrus-1
11369: PPUSH
11370: CALL_OW 88
11374: GO 11388
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11376: LD_EXP 39
11380: PPUSH
11381: LD_STRING D2c-Cyrus-1a
11383: PPUSH
11384: CALL_OW 88
// end ;
11388: PPOPN 1
11390: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11391: LD_EXP 44
11395: PPUSH
11396: LD_INT 16
11398: PPUSH
11399: CALL_OW 308
11403: IFFALSE 11684
11405: GO 11407
11407: DISABLE
11408: LD_INT 0
11410: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11411: LD_INT 3
11413: PPUSH
11414: LD_EXP 44
11418: PPUSH
11419: CALL_OW 471
// send_attack_on_cornel := true ;
11423: LD_ADDR_EXP 32
11427: PUSH
11428: LD_INT 1
11430: ST_TO_ADDR
// if ru_vehicles then
11431: LD_EXP 56
11435: IFFALSE 11469
// for i in ru_vehicles do
11437: LD_ADDR_VAR 0 1
11441: PUSH
11442: LD_EXP 56
11446: PUSH
11447: FOR_IN
11448: IFFALSE 11467
// ComAgressiveMove ( i , 215 , 69 ) ;
11450: LD_VAR 0 1
11454: PPUSH
11455: LD_INT 215
11457: PPUSH
11458: LD_INT 69
11460: PPUSH
11461: CALL_OW 114
11465: GO 11447
11467: POP
11468: POP
// if ru_patrol then
11469: LD_EXP 53
11473: IFFALSE 11507
// for i in ru_patrol do
11475: LD_ADDR_VAR 0 1
11479: PUSH
11480: LD_EXP 53
11484: PUSH
11485: FOR_IN
11486: IFFALSE 11505
// ComAgressiveMove ( i , 215 , 69 ) ;
11488: LD_VAR 0 1
11492: PPUSH
11493: LD_INT 215
11495: PPUSH
11496: LD_INT 69
11498: PPUSH
11499: CALL_OW 114
11503: GO 11485
11505: POP
11506: POP
// if frank_send_to_scout then
11507: LD_EXP 15
11511: IFFALSE 11525
// begin SayRadio ( Frank , D3b-Frank-1 ) ;
11513: LD_EXP 51
11517: PPUSH
11518: LD_STRING D3b-Frank-1
11520: PPUSH
11521: CALL_OW 94
// end ; Wait ( 0 0$03 ) ;
11525: LD_INT 105
11527: PPUSH
11528: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11532: LD_EXP 44
11536: PPUSH
11537: LD_STRING D4-Corn-1
11539: PPUSH
11540: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11544: LD_INT 35
11546: PPUSH
11547: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11551: LD_INT 22
11553: PUSH
11554: LD_INT 4
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 21
11563: PUSH
11564: LD_INT 1
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 3
11573: PUSH
11574: LD_INT 24
11576: PUSH
11577: LD_INT 1000
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: LIST
11592: PPUSH
11593: CALL_OW 69
11597: PUSH
11598: LD_INT 6
11600: LESS
11601: IFFALSE 11544
// if Cornel then
11603: LD_EXP 44
11607: IFFALSE 11647
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
11609: LD_EXP 44
11613: PPUSH
11614: LD_STRING D5-Corn-1
11616: PPUSH
11617: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
11621: LD_EXP 44
11625: PPUSH
11626: LD_EXP 2
11630: PUSH
11631: LD_STRING Cornel
11633: STR
11634: PPUSH
11635: CALL_OW 38
// cornel_saved := true ;
11639: LD_ADDR_EXP 27
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
11647: LD_INT 4
11649: PPUSH
11650: LD_INT 8
11652: PPUSH
11653: CALL_OW 343
// Wait ( 0 0$01 ) ;
11657: LD_INT 35
11659: PPUSH
11660: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
11664: LD_INT 3
11666: PPUSH
11667: LD_EXP 44
11671: PPUSH
11672: CALL_OW 472
// send_attack_on_cornel := false ;
11676: LD_ADDR_EXP 32
11680: PUSH
11681: LD_INT 0
11683: ST_TO_ADDR
// end ;
11684: PPOPN 1
11686: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
11687: LD_INT 9
11689: PPUSH
11690: LD_INT 22
11692: PUSH
11693: LD_INT 1
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PPUSH
11700: CALL_OW 70
11704: PUSH
11705: LD_EXP 33
11709: OR
11710: IFFALSE 11931
11712: GO 11714
11714: DISABLE
11715: LD_INT 0
11717: PPUSH
11718: PPUSH
// begin enable ;
11719: ENABLE
// if not jmm_on_west then
11720: LD_EXP 5
11724: NOT
11725: IFFALSE 11736
// begin YouLost ( 4 ) ;
11727: LD_STRING 4
11729: PPUSH
11730: CALL_OW 104
// exit ;
11734: GO 11931
// end ; if not game_end then
11736: LD_EXP 33
11740: NOT
11741: IFFALSE 11751
// game_end := true ;
11743: LD_ADDR_EXP 33
11747: PUSH
11748: LD_INT 1
11750: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11751: LD_ADDR_VAR 0 2
11755: PUSH
11756: LD_INT 9
11758: PPUSH
11759: LD_INT 22
11761: PUSH
11762: LD_INT 1
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PPUSH
11769: CALL_OW 70
11773: ST_TO_ADDR
// if not filter then
11774: LD_VAR 0 2
11778: NOT
11779: IFFALSE 11783
// exit ;
11781: GO 11931
// for i in filter do
11783: LD_ADDR_VAR 0 1
11787: PUSH
11788: LD_VAR 0 2
11792: PUSH
11793: FOR_IN
11794: IFFALSE 11929
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
11796: LD_VAR 0 1
11800: PPUSH
11801: CALL_OW 302
11805: PUSH
11806: LD_VAR 0 1
11810: PPUSH
11811: CALL_OW 247
11815: PUSH
11816: LD_INT 2
11818: EQUAL
11819: AND
11820: IFFALSE 11892
// begin if i = JMM and save_group < 4 then
11822: LD_VAR 0 1
11826: PUSH
11827: LD_EXP 37
11831: EQUAL
11832: PUSH
11833: LD_EXP 23
11837: PUSH
11838: LD_INT 4
11840: LESS
11841: AND
11842: IFFALSE 11846
// continue ;
11844: GO 11793
// if GetNation ( i ) = nation_american then
11846: LD_VAR 0 1
11850: PPUSH
11851: CALL_OW 248
11855: PUSH
11856: LD_INT 1
11858: EQUAL
11859: IFFALSE 11869
// veh_on_meta := true ;
11861: LD_ADDR_EXP 28
11865: PUSH
11866: LD_INT 1
11868: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
11869: LD_VAR 0 1
11873: PPUSH
11874: CALL_OW 311
11878: PPUSH
11879: CALL 11934 0 1
// RemoveUnit ( i ) ;
11883: LD_VAR 0 1
11887: PPUSH
11888: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
11892: LD_VAR 0 1
11896: PPUSH
11897: CALL_OW 302
11901: PUSH
11902: LD_VAR 0 1
11906: PPUSH
11907: CALL_OW 247
11911: PUSH
11912: LD_INT 1
11914: EQUAL
11915: AND
11916: IFFALSE 11927
// Save ( i ) ;
11918: LD_VAR 0 1
11922: PPUSH
11923: CALL 11934 0 1
// end ;
11927: GO 11793
11929: POP
11930: POP
// end ;
11931: PPOPN 2
11933: END
// export function Save ( i ) ; begin
11934: LD_INT 0
11936: PPUSH
// if i = JMM and save_group >= 4 then
11937: LD_VAR 0 1
11941: PUSH
11942: LD_EXP 37
11946: EQUAL
11947: PUSH
11948: LD_EXP 23
11952: PUSH
11953: LD_INT 4
11955: GREATEREQUAL
11956: AND
11957: IFFALSE 12093
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
11959: LD_EXP 24
11963: PUSH
11964: LD_INT 22
11966: PUSH
11967: LD_INT 1
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: LD_INT 21
11976: PUSH
11977: LD_INT 1
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PPUSH
11988: CALL_OW 69
11992: PUSH
11993: LD_INT 1
11995: GREATER
11996: AND
11997: IFFALSE 12054
// begin show_query := false ;
11999: LD_ADDR_EXP 24
12003: PUSH
12004: LD_INT 0
12006: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12007: LD_STRING Q2
12009: PPUSH
12010: CALL_OW 97
12014: PUSH
12015: LD_INT 1
12017: DOUBLE
12018: EQUAL
12019: IFTRUE 12023
12021: GO 12034
12023: POP
// wait_for_them := true ; 2 :
12024: LD_ADDR_EXP 25
12028: PUSH
12029: LD_INT 1
12031: ST_TO_ADDR
12032: GO 12054
12034: LD_INT 2
12036: DOUBLE
12037: EQUAL
12038: IFTRUE 12042
12040: GO 12053
12042: POP
// wait_for_them := false ; end ;
12043: LD_ADDR_EXP 25
12047: PUSH
12048: LD_INT 0
12050: ST_TO_ADDR
12051: GO 12054
12053: POP
// end ; save_counter := save_counter + 1 ;
12054: LD_ADDR_EXP 36
12058: PUSH
12059: LD_EXP 36
12063: PUSH
12064: LD_INT 1
12066: PLUS
12067: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12068: LD_ADDR_EXP 23
12072: PUSH
12073: LD_EXP 23
12077: PUSH
12078: LD_EXP 37
12082: ADD
12083: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12084: LD_EXP 37
12088: PPUSH
12089: CALL_OW 64
// end ; if i = Lisa then
12093: LD_VAR 0 1
12097: PUSH
12098: LD_EXP 40
12102: EQUAL
12103: IFFALSE 12144
// begin save_counter := save_counter + 1 ;
12105: LD_ADDR_EXP 36
12109: PUSH
12110: LD_EXP 36
12114: PUSH
12115: LD_INT 1
12117: PLUS
12118: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12119: LD_ADDR_EXP 23
12123: PUSH
12124: LD_EXP 23
12128: PUSH
12129: LD_EXP 40
12133: ADD
12134: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12135: LD_EXP 40
12139: PPUSH
12140: CALL_OW 64
// end ; if i = Bobby then
12144: LD_VAR 0 1
12148: PUSH
12149: LD_EXP 38
12153: EQUAL
12154: IFFALSE 12195
// begin save_counter := save_counter + 1 ;
12156: LD_ADDR_EXP 36
12160: PUSH
12161: LD_EXP 36
12165: PUSH
12166: LD_INT 1
12168: PLUS
12169: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12170: LD_ADDR_EXP 23
12174: PUSH
12175: LD_EXP 23
12179: PUSH
12180: LD_EXP 38
12184: ADD
12185: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12186: LD_EXP 38
12190: PPUSH
12191: CALL_OW 64
// end ; if i = Cyrus then
12195: LD_VAR 0 1
12199: PUSH
12200: LD_EXP 39
12204: EQUAL
12205: IFFALSE 12246
// begin save_counter := save_counter + 1 ;
12207: LD_ADDR_EXP 36
12211: PUSH
12212: LD_EXP 36
12216: PUSH
12217: LD_INT 1
12219: PLUS
12220: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12221: LD_ADDR_EXP 23
12225: PUSH
12226: LD_EXP 23
12230: PUSH
12231: LD_EXP 39
12235: ADD
12236: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12237: LD_EXP 39
12241: PPUSH
12242: CALL_OW 64
// end ; if i = Khatam then
12246: LD_VAR 0 1
12250: PUSH
12251: LD_EXP 41
12255: EQUAL
12256: IFFALSE 12297
// begin save_counter := save_counter + 1 ;
12258: LD_ADDR_EXP 36
12262: PUSH
12263: LD_EXP 36
12267: PUSH
12268: LD_INT 1
12270: PLUS
12271: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12272: LD_ADDR_EXP 23
12276: PUSH
12277: LD_EXP 23
12281: PUSH
12282: LD_EXP 41
12286: ADD
12287: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12288: LD_EXP 41
12292: PPUSH
12293: CALL_OW 64
// end ; if i = Frank then
12297: LD_VAR 0 1
12301: PUSH
12302: LD_EXP 51
12306: EQUAL
12307: IFFALSE 12348
// begin save_counter := save_counter + 1 ;
12309: LD_ADDR_EXP 36
12313: PUSH
12314: LD_EXP 36
12318: PUSH
12319: LD_INT 1
12321: PLUS
12322: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12323: LD_ADDR_EXP 23
12327: PUSH
12328: LD_EXP 23
12332: PUSH
12333: LD_EXP 51
12337: ADD
12338: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12339: LD_EXP 51
12343: PPUSH
12344: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12348: LD_VAR 0 1
12352: PUSH
12353: LD_EXP 37
12357: NONEQUAL
12358: PUSH
12359: LD_VAR 0 1
12363: PPUSH
12364: CALL_OW 302
12368: AND
12369: PUSH
12370: LD_VAR 0 1
12374: PPUSH
12375: CALL_OW 247
12379: PUSH
12380: LD_INT 1
12382: EQUAL
12383: AND
12384: PUSH
12385: LD_VAR 0 1
12389: PUSH
12390: LD_EXP 23
12394: IN
12395: NOT
12396: AND
12397: IFFALSE 12438
// begin save_counter := save_counter + 1 ;
12399: LD_ADDR_EXP 36
12403: PUSH
12404: LD_EXP 36
12408: PUSH
12409: LD_INT 1
12411: PLUS
12412: ST_TO_ADDR
// save_others := save_others ^ i ;
12413: LD_ADDR_EXP 22
12417: PUSH
12418: LD_EXP 22
12422: PUSH
12423: LD_VAR 0 1
12427: ADD
12428: ST_TO_ADDR
// RemoveUnit ( i ) ;
12429: LD_VAR 0 1
12433: PPUSH
12434: CALL_OW 64
// end ; end ;
12438: LD_VAR 0 2
12442: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12443: LD_EXP 24
12447: NOT
12448: PUSH
12449: LD_EXP 25
12453: NOT
12454: AND
12455: PUSH
12456: LD_INT 22
12458: PUSH
12459: LD_INT 1
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 21
12468: PUSH
12469: LD_INT 1
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 69
12484: PUSH
12485: LD_INT 0
12487: EQUAL
12488: OR
12489: IFFALSE 12498
12491: GO 12493
12493: DISABLE
// EndMission ;
12494: CALL 12499 0 0
12498: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12499: LD_INT 0
12501: PPUSH
12502: PPUSH
12503: PPUSH
12504: PPUSH
12505: PPUSH
// wait ( 0 0$01 ) ;
12506: LD_INT 35
12508: PPUSH
12509: CALL_OW 67
// if tick <= 12 12$00 then
12513: LD_OWVAR 1
12517: PUSH
12518: LD_INT 25200
12520: LESSEQUAL
12521: IFFALSE 12530
// SetAchievement ( ACH_ASPEED_3 ) ;
12523: LD_STRING ACH_ASPEED_3
12525: PPUSH
12526: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12530: LD_EXP 23
12534: PUSH
12535: LD_EXP 22
12539: ADD
12540: PPUSH
12541: LD_INT 25
12543: PUSH
12544: LD_INT 4
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 72
12555: PUSH
12556: LD_INT 0
12558: EQUAL
12559: IFFALSE 12575
// begin wait ( 3 ) ;
12561: LD_INT 3
12563: PPUSH
12564: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
12568: LD_STRING ACH_NOSCI
12570: PPUSH
12571: CALL_OW 543
// end ; m1 := solar_builded ;
12575: LD_ADDR_VAR 0 3
12579: PUSH
12580: LD_EXP 14
12584: ST_TO_ADDR
// m2 := veh_on_meta ;
12585: LD_ADDR_VAR 0 4
12589: PUSH
12590: LD_EXP 28
12594: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
12595: LD_ADDR_VAR 0 5
12599: PUSH
12600: LD_EXP 34
12604: PUSH
12605: LD_INT 0
12607: EQUAL
12608: ST_TO_ADDR
// if solar_builded then
12609: LD_EXP 14
12613: IFFALSE 12627
// AddMedal ( Solar1 , 1 ) else
12615: LD_STRING Solar1
12617: PPUSH
12618: LD_INT 1
12620: PPUSH
12621: CALL_OW 101
12625: GO 12638
// AddMedal ( Solar1 , - 1 ) ;
12627: LD_STRING Solar1
12629: PPUSH
12630: LD_INT 1
12632: NEG
12633: PPUSH
12634: CALL_OW 101
// if veh_on_meta then
12638: LD_EXP 28
12642: IFFALSE 12656
// AddMedal ( Solar2 , 1 ) else
12644: LD_STRING Solar2
12646: PPUSH
12647: LD_INT 1
12649: PPUSH
12650: CALL_OW 101
12654: GO 12686
// if solar_builded then
12656: LD_EXP 14
12660: IFFALSE 12675
// AddMedal ( Solar2 , - 1 ) else
12662: LD_STRING Solar2
12664: PPUSH
12665: LD_INT 1
12667: NEG
12668: PPUSH
12669: CALL_OW 101
12673: GO 12686
// AddMedal ( Solar2 , - 2 ) ;
12675: LD_STRING Solar2
12677: PPUSH
12678: LD_INT 2
12680: NEG
12681: PPUSH
12682: CALL_OW 101
// if lose_counter = 0 then
12686: LD_EXP 34
12690: PUSH
12691: LD_INT 0
12693: EQUAL
12694: IFFALSE 12708
// AddMedal ( No , 1 ) else
12696: LD_STRING No
12698: PPUSH
12699: LD_INT 1
12701: PPUSH
12702: CALL_OW 101
12706: GO 12752
// if lose_counter > 0 and lose_counter < 4 then
12708: LD_EXP 34
12712: PUSH
12713: LD_INT 0
12715: GREATER
12716: PUSH
12717: LD_EXP 34
12721: PUSH
12722: LD_INT 4
12724: LESS
12725: AND
12726: IFFALSE 12741
// AddMedal ( No , - 1 ) else
12728: LD_STRING No
12730: PPUSH
12731: LD_INT 1
12733: NEG
12734: PPUSH
12735: CALL_OW 101
12739: GO 12752
// AddMedal ( UpTo4 , - 1 ) ;
12741: LD_STRING UpTo4
12743: PPUSH
12744: LD_INT 1
12746: NEG
12747: PPUSH
12748: CALL_OW 101
// GiveMedals ( MAIN ) ;
12752: LD_STRING MAIN
12754: PPUSH
12755: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
12759: LD_OWVAR 67
12763: PUSH
12764: LD_INT 3
12766: GREATEREQUAL
12767: PUSH
12768: LD_VAR 0 3
12772: AND
12773: PUSH
12774: LD_VAR 0 4
12778: AND
12779: PUSH
12780: LD_VAR 0 5
12784: AND
12785: IFFALSE 12797
// SetAchievementEX ( ACH_AMER , 3 ) ;
12787: LD_STRING ACH_AMER
12789: PPUSH
12790: LD_INT 3
12792: PPUSH
12793: CALL_OW 564
// if IsDead ( Pokryshkin ) then
12797: LD_EXP 52
12801: PPUSH
12802: CALL_OW 301
12806: IFFALSE 12862
// begin stop_talking := true ;
12808: LD_ADDR_OWVAR 56
12812: PUSH
12813: LD_INT 1
12815: ST_TO_ADDR
// for i in save_group union save_others do
12816: LD_ADDR_VAR 0 2
12820: PUSH
12821: LD_EXP 23
12825: PUSH
12826: LD_EXP 22
12830: UNION
12831: PUSH
12832: FOR_IN
12833: IFFALSE 12852
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
12835: LD_VAR 0 2
12839: PPUSH
12840: LD_INT 1
12842: PPUSH
12843: LD_INT 1500
12845: PPUSH
12846: CALL_OW 591
12850: GO 12832
12852: POP
12853: POP
// stop_talking := false ;
12854: LD_ADDR_OWVAR 56
12858: PUSH
12859: LD_INT 0
12861: ST_TO_ADDR
// end ; RewardPeople ( save_group ^ save_others ) ;
12862: LD_EXP 23
12866: PUSH
12867: LD_EXP 22
12871: ADD
12872: PPUSH
12873: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
12877: LD_EXP 37
12881: PPUSH
12882: LD_EXP 2
12886: PUSH
12887: LD_STRING JMM
12889: STR
12890: PPUSH
12891: CALL_OW 38
// if Bobby in save_group then
12895: LD_EXP 38
12899: PUSH
12900: LD_EXP 23
12904: IN
12905: IFFALSE 12925
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
12907: LD_EXP 38
12911: PPUSH
12912: LD_EXP 2
12916: PUSH
12917: LD_STRING Bobby
12919: STR
12920: PPUSH
12921: CALL_OW 38
// if Cyrus in save_group then
12925: LD_EXP 39
12929: PUSH
12930: LD_EXP 23
12934: IN
12935: IFFALSE 12955
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
12937: LD_EXP 39
12941: PPUSH
12942: LD_EXP 2
12946: PUSH
12947: LD_STRING Cyrus
12949: STR
12950: PPUSH
12951: CALL_OW 38
// if Lisa in save_group then
12955: LD_EXP 40
12959: PUSH
12960: LD_EXP 23
12964: IN
12965: IFFALSE 12985
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
12967: LD_EXP 40
12971: PPUSH
12972: LD_EXP 2
12976: PUSH
12977: LD_STRING Lisa
12979: STR
12980: PPUSH
12981: CALL_OW 38
// if Frank in save_group then
12985: LD_EXP 51
12989: PUSH
12990: LD_EXP 23
12994: IN
12995: IFFALSE 13015
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
12997: LD_EXP 51
13001: PPUSH
13002: LD_EXP 2
13006: PUSH
13007: LD_STRING Frank
13009: STR
13010: PPUSH
13011: CALL_OW 38
// if Khatam in save_group then
13015: LD_EXP 41
13019: PUSH
13020: LD_EXP 23
13024: IN
13025: IFFALSE 13045
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13027: LD_EXP 41
13031: PPUSH
13032: LD_EXP 2
13036: PUSH
13037: LD_STRING Khatam
13039: STR
13040: PPUSH
13041: CALL_OW 38
// if save_others then
13045: LD_EXP 22
13049: IFFALSE 13063
// SaveCharacters ( save_others , 03_others ) ;
13051: LD_EXP 22
13055: PPUSH
13056: LD_STRING 03_others
13058: PPUSH
13059: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13063: LD_EXP 45
13067: PUSH
13068: LD_EXP 45
13072: PPUSH
13073: CALL_OW 302
13077: AND
13078: PUSH
13079: LD_EXP 27
13083: AND
13084: IFFALSE 13096
// begin ResetFog ;
13086: CALL_OW 335
// DisplayEndingScene ;
13090: CALL 13118 0 0
// end else
13094: GO 13109
// DeleteCharacters ( mission_prefix & Cornel ) ;
13096: LD_EXP 2
13100: PUSH
13101: LD_STRING Cornel
13103: STR
13104: PPUSH
13105: CALL_OW 40
// YouWin ;
13109: CALL_OW 103
// end ;
13113: LD_VAR 0 1
13117: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13118: LD_INT 0
13120: PPUSH
13121: PPUSH
13122: PPUSH
13123: PPUSH
13124: PPUSH
13125: PPUSH
// InGameOn ;
13126: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13130: LD_INT 208
13132: PPUSH
13133: LD_INT 62
13135: PPUSH
13136: LD_INT 1
13138: PPUSH
13139: LD_INT 10
13141: NEG
13142: PPUSH
13143: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13147: LD_INT 208
13149: PPUSH
13150: LD_INT 62
13152: PPUSH
13153: LD_INT 1
13155: PPUSH
13156: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13160: LD_ADDR_VAR 0 3
13164: PUSH
13165: LD_INT 22
13167: PUSH
13168: LD_INT 3
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 2
13177: PUSH
13178: LD_INT 21
13180: PUSH
13181: LD_INT 2
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 21
13190: PUSH
13191: LD_INT 1
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: LIST
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: PPUSH
13207: CALL_OW 69
13211: ST_TO_ADDR
// if filter then
13212: LD_VAR 0 3
13216: IFFALSE 13244
// for i in filter do
13218: LD_ADDR_VAR 0 2
13222: PUSH
13223: LD_VAR 0 3
13227: PUSH
13228: FOR_IN
13229: IFFALSE 13242
// RemoveUnit ( i ) ;
13231: LD_VAR 0 2
13235: PPUSH
13236: CALL_OW 64
13240: GO 13228
13242: POP
13243: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13244: LD_ADDR_VAR 0 3
13248: PUSH
13249: LD_INT 22
13251: PUSH
13252: LD_INT 4
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 21
13261: PUSH
13262: LD_INT 1
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PPUSH
13273: CALL_OW 69
13277: ST_TO_ADDR
// if filter then
13278: LD_VAR 0 3
13282: IFFALSE 13313
// for i in filter do
13284: LD_ADDR_VAR 0 2
13288: PUSH
13289: LD_VAR 0 3
13293: PUSH
13294: FOR_IN
13295: IFFALSE 13311
// SetLives ( i , 0 ) ;
13297: LD_VAR 0 2
13301: PPUSH
13302: LD_INT 0
13304: PPUSH
13305: CALL_OW 234
13309: GO 13294
13311: POP
13312: POP
// uc_side := 4 ;
13313: LD_ADDR_OWVAR 20
13317: PUSH
13318: LD_INT 4
13320: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13321: LD_ADDR_VAR 0 4
13325: PUSH
13326: LD_STRING Cornell
13328: PPUSH
13329: LD_INT 0
13331: PPUSH
13332: LD_STRING 
13334: PPUSH
13335: CALL 36566 0 3
13339: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13340: LD_VAR 0 4
13344: PPUSH
13345: LD_INT 208
13347: PPUSH
13348: LD_INT 62
13350: PPUSH
13351: LD_INT 0
13353: PPUSH
13354: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13358: LD_VAR 0 4
13362: PPUSH
13363: LD_INT 100
13365: PPUSH
13366: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13370: LD_INT 3
13372: PPUSH
13373: LD_VAR 0 4
13377: PPUSH
13378: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13382: LD_INT 4
13384: PPUSH
13385: LD_INT 3
13387: PPUSH
13388: LD_INT 1
13390: PPUSH
13391: LD_INT 1
13393: PPUSH
13394: CALL_OW 80
// uc_side := 3 ;
13398: LD_ADDR_OWVAR 20
13402: PUSH
13403: LD_INT 3
13405: ST_TO_ADDR
// uc_nation := 3 ;
13406: LD_ADDR_OWVAR 21
13410: PUSH
13411: LD_INT 3
13413: ST_TO_ADDR
// InitHc ;
13414: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13418: LD_ADDR_VAR 0 5
13422: PUSH
13423: LD_STRING Mikhail
13425: PPUSH
13426: LD_INT 0
13428: PPUSH
13429: LD_STRING 
13431: PPUSH
13432: CALL 36566 0 3
13436: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13437: LD_INT 1
13439: PPUSH
13440: LD_INT 1
13442: PPUSH
13443: LD_INT 0
13445: PPUSH
13446: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13450: LD_ADDR_VAR 0 6
13454: PUSH
13455: LD_VAR 0 6
13459: PUSH
13460: CALL_OW 44
13464: ADD
13465: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13466: LD_ADDR_VAR 0 6
13470: PUSH
13471: LD_VAR 0 6
13475: PUSH
13476: CALL_OW 44
13480: ADD
13481: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13482: LD_INT 2
13484: PPUSH
13485: LD_INT 4
13487: PPUSH
13488: LD_INT 0
13490: PPUSH
13491: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13495: LD_ADDR_VAR 0 6
13499: PUSH
13500: LD_VAR 0 6
13504: PUSH
13505: CALL_OW 44
13509: ADD
13510: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13511: LD_VAR 0 5
13515: PPUSH
13516: LD_INT 17
13518: PPUSH
13519: LD_INT 0
13521: PPUSH
13522: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13526: LD_VAR 0 5
13530: PPUSH
13531: LD_INT 210
13533: PPUSH
13534: LD_INT 63
13536: PPUSH
13537: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
13541: LD_VAR 0 5
13545: PPUSH
13546: LD_INT 208
13548: PPUSH
13549: LD_INT 62
13551: PPUSH
13552: CALL_OW 178
// for i in fake_russians do
13556: LD_ADDR_VAR 0 2
13560: PUSH
13561: LD_VAR 0 6
13565: PUSH
13566: FOR_IN
13567: IFFALSE 13645
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
13569: LD_VAR 0 2
13573: PPUSH
13574: LD_INT 17
13576: PPUSH
13577: LD_INT 0
13579: PPUSH
13580: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
13584: LD_VAR 0 2
13588: PPUSH
13589: LD_INT 215
13591: PPUSH
13592: LD_INT 67
13594: PPUSH
13595: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
13599: LD_VAR 0 2
13603: PPUSH
13604: LD_INT 208
13606: PPUSH
13607: LD_INT 62
13609: PPUSH
13610: CALL_OW 178
// if GetClass ( i ) = 4 then
13614: LD_VAR 0 2
13618: PPUSH
13619: CALL_OW 257
13623: PUSH
13624: LD_INT 4
13626: EQUAL
13627: IFFALSE 13643
// ComHeal ( i , fake_cornel ) ;
13629: LD_VAR 0 2
13633: PPUSH
13634: LD_VAR 0 4
13638: PPUSH
13639: CALL_OW 128
// end ;
13643: GO 13566
13645: POP
13646: POP
// Wait ( 0 0$01 ) ;
13647: LD_INT 35
13649: PPUSH
13650: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
13654: LD_INT 208
13656: PPUSH
13657: LD_INT 62
13659: PPUSH
13660: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13664: LD_INT 208
13666: PPUSH
13667: LD_INT 62
13669: PPUSH
13670: LD_INT 1
13672: PPUSH
13673: LD_INT 10
13675: NEG
13676: PPUSH
13677: CALL_OW 330
// Wait ( 0 0$15 ) ;
13681: LD_INT 525
13683: PPUSH
13684: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
13688: LD_INT 208
13690: PPUSH
13691: LD_INT 62
13693: PPUSH
13694: LD_INT 1
13696: PPUSH
13697: CALL_OW 331
// ResetFog ;
13701: CALL_OW 335
// InGameOff ;
13705: CALL_OW 9
// end ;
13709: LD_VAR 0 1
13713: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
13714: LD_INT 10
13716: PPUSH
13717: LD_INT 22
13719: PUSH
13720: LD_INT 1
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PPUSH
13727: CALL_OW 70
13731: PUSH
13732: LD_EXP 44
13736: PPUSH
13737: CALL_OW 302
13741: AND
13742: PUSH
13743: LD_INT 22
13745: PUSH
13746: LD_INT 1
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PPUSH
13753: CALL_OW 69
13757: PPUSH
13758: LD_EXP 44
13762: PPUSH
13763: CALL_OW 74
13767: PPUSH
13768: LD_EXP 44
13772: PPUSH
13773: CALL_OW 296
13777: PUSH
13778: LD_INT 30
13780: LESS
13781: OR
13782: IFFALSE 13833
13784: GO 13786
13786: DISABLE
// begin enable ;
13787: ENABLE
// powell_warn := powell_warn + 1 ;
13788: LD_ADDR_EXP 35
13792: PUSH
13793: LD_EXP 35
13797: PUSH
13798: LD_INT 1
13800: PLUS
13801: ST_TO_ADDR
// if powell_warn = 3 then
13802: LD_EXP 35
13806: PUSH
13807: LD_INT 3
13809: EQUAL
13810: IFFALSE 13821
// begin YouLost ( 5 ) ;
13812: LD_STRING 5
13814: PPUSH
13815: CALL_OW 104
// exit ;
13819: GO 13833
// end ; SayRadio ( Powell , DWarn-Pow-1 ) ;
13821: LD_EXP 46
13825: PPUSH
13826: LD_STRING DWarn-Pow-1
13828: PPUSH
13829: CALL_OW 94
// end ; end_of_file
13833: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
13834: LD_EXP 8
13838: IFFALSE 15675
13840: GO 13842
13842: DISABLE
13843: LD_INT 0
13845: PPUSH
13846: PPUSH
13847: PPUSH
13848: PPUSH
13849: PPUSH
13850: PPUSH
13851: PPUSH
13852: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
13853: LD_EXP 44
13857: PUSH
13858: LD_EXP 45
13862: ADD
13863: PUSH
13864: LD_EXP 6
13868: ADD
13869: PPUSH
13870: LD_INT 250
13872: PPUSH
13873: LD_INT 120
13875: PPUSH
13876: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
13880: LD_ADDR_VAR 0 2
13884: PUSH
13885: LD_EXP 6
13889: PPUSH
13890: LD_INT 25
13892: PUSH
13893: LD_INT 2
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PPUSH
13900: CALL_OW 72
13904: PUSH
13905: LD_EXP 45
13909: DIFF
13910: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
13911: LD_ADDR_VAR 0 3
13915: PUSH
13916: LD_EXP 6
13920: PPUSH
13921: LD_INT 21
13923: PUSH
13924: LD_INT 1
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PPUSH
13931: CALL_OW 72
13935: PUSH
13936: LD_VAR 0 2
13940: DIFF
13941: ST_TO_ADDR
// if not has_eng then
13942: LD_VAR 0 2
13946: NOT
13947: IFFALSE 14030
// begin uc_side := 4 ;
13949: LD_ADDR_OWVAR 20
13953: PUSH
13954: LD_INT 4
13956: ST_TO_ADDR
// uc_nation := 1 ;
13957: LD_ADDR_OWVAR 21
13961: PUSH
13962: LD_INT 1
13964: ST_TO_ADDR
// bc_type := b_depot ;
13965: LD_ADDR_OWVAR 42
13969: PUSH
13970: LD_INT 0
13972: ST_TO_ADDR
// bc_level := 2 ;
13973: LD_ADDR_OWVAR 43
13977: PUSH
13978: LD_INT 2
13980: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
13981: LD_ADDR_VAR 0 4
13985: PUSH
13986: LD_INT 264
13988: PPUSH
13989: LD_INT 120
13991: PPUSH
13992: LD_INT 4
13994: PPUSH
13995: CALL_OW 47
13999: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14000: LD_INT 264
14002: PPUSH
14003: LD_INT 120
14005: PPUSH
14006: LD_INT 4
14008: PPUSH
14009: LD_INT 10
14011: NEG
14012: PPUSH
14013: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14017: LD_INT 264
14019: PPUSH
14020: LD_INT 120
14022: PPUSH
14023: LD_INT 4
14025: PPUSH
14026: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14030: LD_INT 35
14032: PPUSH
14033: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14037: LD_EXP 44
14041: PPUSH
14042: LD_INT 10
14044: PPUSH
14045: CALL_OW 308
14049: PUSH
14050: LD_EXP 44
14054: PPUSH
14055: CALL_OW 310
14059: PPUSH
14060: LD_INT 10
14062: PPUSH
14063: CALL_OW 308
14067: OR
14068: IFFALSE 14030
// if has_eng and not dep then
14070: LD_VAR 0 2
14074: PUSH
14075: LD_VAR 0 4
14079: NOT
14080: AND
14081: IFFALSE 14231
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14083: LD_VAR 0 2
14087: PPUSH
14088: LD_INT 0
14090: PPUSH
14091: LD_INT 264
14093: PPUSH
14094: LD_INT 120
14096: PPUSH
14097: LD_INT 4
14099: PPUSH
14100: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14104: LD_INT 35
14106: PPUSH
14107: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14111: LD_INT 22
14113: PUSH
14114: LD_INT 4
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 30
14123: PUSH
14124: LD_INT 0
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PPUSH
14135: CALL_OW 69
14139: IFFALSE 14104
// ComMoveXY ( filter , 264 , 120 ) ;
14141: LD_VAR 0 3
14145: PPUSH
14146: LD_INT 264
14148: PPUSH
14149: LD_INT 120
14151: PPUSH
14152: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14156: LD_INT 35
14158: PPUSH
14159: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14163: LD_INT 22
14165: PUSH
14166: LD_INT 4
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PUSH
14173: LD_INT 30
14175: PUSH
14176: LD_INT 0
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PUSH
14183: LD_INT 3
14185: PUSH
14186: LD_INT 57
14188: PUSH
14189: EMPTY
14190: LIST
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: LIST
14200: PPUSH
14201: CALL_OW 69
14205: IFFALSE 14156
// ComMoveXY ( filter , 247 , 113 ) ;
14207: LD_VAR 0 3
14211: PPUSH
14212: LD_INT 247
14214: PPUSH
14215: LD_INT 113
14217: PPUSH
14218: CALL_OW 111
// Wait ( 0 0$2 ) ;
14222: LD_INT 70
14224: PPUSH
14225: CALL_OW 67
// end else
14229: GO 14243
// begin SetSide ( dep , 4 ) ;
14231: LD_VAR 0 4
14235: PPUSH
14236: LD_INT 4
14238: PPUSH
14239: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14243: LD_ADDR_VAR 0 4
14247: PUSH
14248: LD_INT 22
14250: PUSH
14251: LD_INT 4
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 30
14260: PUSH
14261: LD_INT 0
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PPUSH
14272: CALL_OW 69
14276: PUSH
14277: LD_INT 1
14279: ARRAY
14280: ST_TO_ADDR
// if not has_eng then
14281: LD_VAR 0 2
14285: NOT
14286: IFFALSE 14373
// for i = 1 to 2 do
14288: LD_ADDR_VAR 0 1
14292: PUSH
14293: DOUBLE
14294: LD_INT 1
14296: DEC
14297: ST_TO_ADDR
14298: LD_INT 2
14300: PUSH
14301: FOR_TO
14302: IFFALSE 14371
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14304: LD_VAR 0 3
14308: PUSH
14309: LD_INT 1
14311: ARRAY
14312: PPUSH
14313: LD_VAR 0 4
14317: PPUSH
14318: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14322: LD_VAR 0 3
14326: PUSH
14327: LD_INT 1
14329: ARRAY
14330: PPUSH
14331: LD_INT 2
14333: PPUSH
14334: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14338: LD_VAR 0 3
14342: PUSH
14343: LD_INT 1
14345: ARRAY
14346: PPUSH
14347: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14351: LD_ADDR_VAR 0 3
14355: PUSH
14356: LD_VAR 0 3
14360: PPUSH
14361: LD_INT 1
14363: PPUSH
14364: CALL_OW 3
14368: ST_TO_ADDR
// end ;
14369: GO 14301
14371: POP
14372: POP
// if IsInUnit ( Cornel ) then
14373: LD_EXP 44
14377: PPUSH
14378: CALL_OW 310
14382: IFFALSE 14460
// begin cargo := IsInUnit ( Cornel ) ;
14384: LD_ADDR_VAR 0 7
14388: PUSH
14389: LD_EXP 44
14393: PPUSH
14394: CALL_OW 310
14398: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14399: LD_VAR 0 7
14403: PPUSH
14404: LD_INT 1
14406: PPUSH
14407: CALL_OW 289
14411: IFFALSE 14422
// ComUnload ( cargo ) ;
14413: LD_VAR 0 7
14417: PPUSH
14418: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14422: LD_EXP 44
14426: PPUSH
14427: LD_INT 235
14429: PPUSH
14430: LD_INT 122
14432: PPUSH
14433: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14437: LD_EXP 44
14441: PPUSH
14442: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14446: LD_EXP 44
14450: PPUSH
14451: LD_VAR 0 4
14455: PPUSH
14456: CALL_OW 180
// end ; if Bierezov then
14460: LD_EXP 45
14464: IFFALSE 14512
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14466: LD_EXP 45
14470: PPUSH
14471: LD_INT 260
14473: PPUSH
14474: LD_INT 120
14476: PPUSH
14477: CALL_OW 111
// if dep then
14481: LD_VAR 0 4
14485: IFFALSE 14503
// AddComEnterUnit ( Bierezov , dep ) else
14487: LD_EXP 45
14491: PPUSH
14492: LD_VAR 0 4
14496: PPUSH
14497: CALL_OW 180
14501: GO 14512
// AddComHold ( Bierezov ) ;
14503: LD_EXP 45
14507: PPUSH
14508: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14512: LD_INT 525
14514: PPUSH
14515: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14519: LD_ADDR_VAR 0 2
14523: PUSH
14524: LD_INT 22
14526: PUSH
14527: LD_INT 4
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: LD_INT 25
14536: PUSH
14537: LD_INT 2
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PPUSH
14548: CALL_OW 69
14552: PUSH
14553: LD_EXP 45
14557: DIFF
14558: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14559: LD_INT 35
14561: PPUSH
14562: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
14566: LD_ADDR_VAR 0 6
14570: PUSH
14571: LD_INT 10
14573: PPUSH
14574: CALL_OW 435
14578: ST_TO_ADDR
// if crates then
14579: LD_VAR 0 6
14583: IFFALSE 14612
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
14585: LD_VAR 0 2
14589: PPUSH
14590: LD_VAR 0 6
14594: PUSH
14595: LD_INT 1
14597: ARRAY
14598: PPUSH
14599: LD_VAR 0 6
14603: PUSH
14604: LD_INT 2
14606: ARRAY
14607: PPUSH
14608: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
14612: LD_VAR 0 4
14616: PPUSH
14617: CALL_OW 274
14621: PPUSH
14622: LD_INT 1
14624: PPUSH
14625: CALL_OW 275
14629: PUSH
14630: LD_INT 40
14632: GREATEREQUAL
14633: IFFALSE 14559
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
14635: LD_ADDR_VAR 0 5
14639: PUSH
14640: LD_INT 4
14642: PUSH
14643: LD_INT 256
14645: PUSH
14646: LD_INT 111
14648: PUSH
14649: LD_INT 2
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 31
14660: PUSH
14661: LD_INT 243
14663: PUSH
14664: LD_INT 112
14666: PUSH
14667: LD_INT 2
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: PUSH
14676: LD_INT 31
14678: PUSH
14679: LD_INT 254
14681: PUSH
14682: LD_INT 114
14684: PUSH
14685: LD_INT 2
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: ST_TO_ADDR
// for i in blist do
14699: LD_ADDR_VAR 0 1
14703: PUSH
14704: LD_VAR 0 5
14708: PUSH
14709: FOR_IN
14710: IFFALSE 14759
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
14712: LD_VAR 0 2
14716: PPUSH
14717: LD_VAR 0 1
14721: PUSH
14722: LD_INT 1
14724: ARRAY
14725: PPUSH
14726: LD_VAR 0 1
14730: PUSH
14731: LD_INT 2
14733: ARRAY
14734: PPUSH
14735: LD_VAR 0 1
14739: PUSH
14740: LD_INT 3
14742: ARRAY
14743: PPUSH
14744: LD_VAR 0 1
14748: PUSH
14749: LD_INT 4
14751: ARRAY
14752: PPUSH
14753: CALL_OW 205
14757: GO 14709
14759: POP
14760: POP
// repeat wait ( 0 0$01 ) ;
14761: LD_INT 35
14763: PPUSH
14764: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
14768: LD_INT 22
14770: PUSH
14771: LD_INT 4
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 30
14780: PUSH
14781: LD_INT 4
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: LD_INT 3
14790: PUSH
14791: LD_INT 57
14793: PUSH
14794: EMPTY
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: PPUSH
14806: CALL_OW 69
14810: IFFALSE 14761
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14812: LD_VAR 0 3
14816: PPUSH
14817: LD_INT 22
14819: PUSH
14820: LD_INT 4
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: LD_INT 30
14829: PUSH
14830: LD_INT 4
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PPUSH
14841: CALL_OW 69
14845: PUSH
14846: LD_INT 1
14848: ARRAY
14849: PPUSH
14850: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
14854: LD_VAR 0 3
14858: PPUSH
14859: LD_INT 1
14861: PPUSH
14862: CALL_OW 183
// if has_eng > 1 then
14866: LD_VAR 0 2
14870: PUSH
14871: LD_INT 1
14873: GREATER
14874: IFFALSE 15016
// for i = has_eng downto 2 do
14876: LD_ADDR_VAR 0 1
14880: PUSH
14881: DOUBLE
14882: LD_VAR 0 2
14886: INC
14887: ST_TO_ADDR
14888: LD_INT 2
14890: PUSH
14891: FOR_DOWNTO
14892: IFFALSE 15014
// begin if IsInUnit ( has_eng [ i ] ) then
14894: LD_VAR 0 2
14898: PUSH
14899: LD_VAR 0 1
14903: ARRAY
14904: PPUSH
14905: CALL_OW 310
14909: IFFALSE 14926
// ComExitBuilding ( has_eng [ i ] ) ;
14911: LD_VAR 0 2
14915: PUSH
14916: LD_VAR 0 1
14920: ARRAY
14921: PPUSH
14922: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14926: LD_VAR 0 2
14930: PUSH
14931: LD_VAR 0 1
14935: ARRAY
14936: PPUSH
14937: LD_INT 22
14939: PUSH
14940: LD_INT 4
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 30
14949: PUSH
14950: LD_INT 4
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PPUSH
14961: CALL_OW 69
14965: PUSH
14966: LD_INT 1
14968: ARRAY
14969: PPUSH
14970: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
14974: LD_VAR 0 2
14978: PUSH
14979: LD_VAR 0 1
14983: ARRAY
14984: PPUSH
14985: LD_INT 1
14987: PPUSH
14988: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
14992: LD_ADDR_VAR 0 2
14996: PUSH
14997: LD_VAR 0 2
15001: PPUSH
15002: LD_VAR 0 1
15006: PPUSH
15007: CALL_OW 3
15011: ST_TO_ADDR
// end ;
15012: GO 14891
15014: POP
15015: POP
// repeat wait ( 0 0$01 ) ;
15016: LD_INT 35
15018: PPUSH
15019: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15023: LD_INT 22
15025: PUSH
15026: LD_INT 4
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: PUSH
15033: LD_INT 30
15035: PUSH
15036: LD_INT 31
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 3
15045: PUSH
15046: LD_INT 57
15048: PUSH
15049: EMPTY
15050: LIST
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: LIST
15060: PPUSH
15061: CALL_OW 69
15065: PUSH
15066: LD_INT 1
15068: GREATER
15069: IFFALSE 15016
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15071: LD_ADDR_VAR 0 8
15075: PUSH
15076: LD_EXP 6
15080: PPUSH
15081: LD_INT 25
15083: PUSH
15084: LD_INT 1
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PPUSH
15091: CALL_OW 72
15095: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15096: LD_ADDR_VAR 0 1
15100: PUSH
15101: DOUBLE
15102: LD_INT 1
15104: DEC
15105: ST_TO_ADDR
15106: LD_INT 22
15108: PUSH
15109: LD_INT 4
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: PUSH
15116: LD_INT 30
15118: PUSH
15119: LD_INT 31
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 3
15128: PUSH
15129: LD_INT 57
15131: PUSH
15132: EMPTY
15133: LIST
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: LIST
15143: PPUSH
15144: CALL_OW 69
15148: PUSH
15149: FOR_TO
15150: IFFALSE 15234
// begin if not sol [ i ] then
15152: LD_VAR 0 8
15156: PUSH
15157: LD_VAR 0 1
15161: ARRAY
15162: NOT
15163: IFFALSE 15167
// break ;
15165: GO 15234
// ComExitBuilding ( sol [ i ] ) ;
15167: LD_VAR 0 8
15171: PUSH
15172: LD_VAR 0 1
15176: ARRAY
15177: PPUSH
15178: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15182: LD_VAR 0 8
15186: PUSH
15187: LD_VAR 0 1
15191: ARRAY
15192: PPUSH
15193: LD_INT 22
15195: PUSH
15196: LD_INT 4
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: LD_INT 30
15205: PUSH
15206: LD_INT 31
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PPUSH
15217: CALL_OW 69
15221: PUSH
15222: LD_VAR 0 1
15226: ARRAY
15227: PPUSH
15228: CALL_OW 180
// end ;
15232: GO 15149
15234: POP
15235: POP
// if sol > 3 then
15236: LD_VAR 0 8
15240: PUSH
15241: LD_INT 3
15243: GREATER
15244: IFFALSE 15361
// begin ComExitBuilding ( sol [ 3 ] ) ;
15246: LD_VAR 0 8
15250: PUSH
15251: LD_INT 3
15253: ARRAY
15254: PPUSH
15255: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15259: LD_VAR 0 8
15263: PUSH
15264: LD_INT 3
15266: ARRAY
15267: PPUSH
15268: LD_INT 246
15270: PPUSH
15271: LD_INT 94
15273: PPUSH
15274: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15278: LD_VAR 0 8
15282: PUSH
15283: LD_INT 3
15285: ARRAY
15286: PPUSH
15287: LD_INT 175
15289: PPUSH
15290: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15294: LD_VAR 0 8
15298: PUSH
15299: LD_INT 3
15301: ARRAY
15302: PPUSH
15303: LD_INT 224
15305: PPUSH
15306: LD_INT 90
15308: PPUSH
15309: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15313: LD_VAR 0 8
15317: PUSH
15318: LD_INT 3
15320: ARRAY
15321: PPUSH
15322: LD_INT 245
15324: PPUSH
15325: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15329: LD_VAR 0 8
15333: PUSH
15334: LD_INT 3
15336: ARRAY
15337: PPUSH
15338: LD_INT 223
15340: PPUSH
15341: LD_INT 110
15343: PPUSH
15344: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15348: LD_VAR 0 8
15352: PUSH
15353: LD_INT 3
15355: ARRAY
15356: PPUSH
15357: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15361: LD_VAR 0 2
15365: PPUSH
15366: LD_VAR 0 4
15370: PPUSH
15371: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15375: LD_INT 22
15377: PUSH
15378: LD_INT 4
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 30
15387: PUSH
15388: LD_INT 4
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PPUSH
15399: CALL_OW 69
15403: PUSH
15404: LD_INT 1
15406: ARRAY
15407: PPUSH
15408: CALL_OW 313
15412: PUSH
15413: LD_INT 6
15415: LESS
15416: IFFALSE 15480
// begin if IsInUnit ( Cornel ) then
15418: LD_EXP 44
15422: PPUSH
15423: CALL_OW 310
15427: IFFALSE 15438
// ComExitBuilding ( Cornel ) ;
15429: LD_EXP 44
15433: PPUSH
15434: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15438: LD_EXP 44
15442: PPUSH
15443: LD_INT 22
15445: PUSH
15446: LD_INT 4
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 30
15455: PUSH
15456: LD_INT 4
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PPUSH
15467: CALL_OW 69
15471: PUSH
15472: LD_INT 1
15474: ARRAY
15475: PPUSH
15476: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15480: LD_INT 35
15482: PPUSH
15483: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15487: LD_ADDR_VAR 0 3
15491: PUSH
15492: LD_INT 22
15494: PUSH
15495: LD_INT 4
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: LD_INT 21
15504: PUSH
15505: LD_INT 3
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 3
15514: PUSH
15515: LD_INT 24
15517: PUSH
15518: LD_INT 1000
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: LIST
15533: PPUSH
15534: CALL_OW 69
15538: ST_TO_ADDR
// if filter and has_eng then
15539: LD_VAR 0 3
15543: PUSH
15544: LD_VAR 0 2
15548: AND
15549: IFFALSE 15615
// begin for i in has_eng do
15551: LD_ADDR_VAR 0 1
15555: PUSH
15556: LD_VAR 0 2
15560: PUSH
15561: FOR_IN
15562: IFFALSE 15611
// begin if IsInUnit ( i ) then
15564: LD_VAR 0 1
15568: PPUSH
15569: CALL_OW 310
15573: IFFALSE 15584
// ComExitBuilding ( i ) ;
15575: LD_VAR 0 1
15579: PPUSH
15580: CALL_OW 122
// Wait ( 3 ) ;
15584: LD_INT 3
15586: PPUSH
15587: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
15591: LD_VAR 0 1
15595: PPUSH
15596: LD_VAR 0 3
15600: PUSH
15601: LD_INT 1
15603: ARRAY
15604: PPUSH
15605: CALL_OW 130
// end ;
15609: GO 15561
15611: POP
15612: POP
// end else
15613: GO 15669
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
15615: LD_VAR 0 2
15619: PUSH
15620: LD_VAR 0 2
15624: PPUSH
15625: LD_INT 56
15627: PUSH
15628: EMPTY
15629: LIST
15630: PPUSH
15631: CALL_OW 72
15635: AND
15636: IFFALSE 15669
// for i in has_eng do
15638: LD_ADDR_VAR 0 1
15642: PUSH
15643: LD_VAR 0 2
15647: PUSH
15648: FOR_IN
15649: IFFALSE 15667
// ComEnterUnit ( i , dep ) ;
15651: LD_VAR 0 1
15655: PPUSH
15656: LD_VAR 0 4
15660: PPUSH
15661: CALL_OW 120
15665: GO 15648
15667: POP
15668: POP
// until cornel_prepared ;
15669: LD_EXP 11
15673: IFFALSE 15480
// end ;
15675: PPOPN 8
15677: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
15678: LD_EXP 11
15682: IFFALSE 16081
15684: GO 15686
15686: DISABLE
15687: LD_INT 0
15689: PPUSH
15690: PPUSH
15691: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
15692: LD_ADDR_VAR 0 2
15696: PUSH
15697: LD_INT 22
15699: PUSH
15700: LD_INT 4
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 30
15709: PUSH
15710: LD_INT 4
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PPUSH
15721: CALL_OW 69
15725: PUSH
15726: LD_INT 1
15728: ARRAY
15729: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
15730: LD_EXP 6
15734: PPUSH
15735: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
15739: LD_EXP 45
15743: PUSH
15744: LD_EXP 45
15748: PPUSH
15749: CALL_OW 310
15753: AND
15754: IFFALSE 15765
// ComExitBuilding ( Bierezov ) ;
15756: LD_EXP 45
15760: PPUSH
15761: CALL_OW 122
// Wait ( 0 0$03 ) ;
15765: LD_INT 105
15767: PPUSH
15768: CALL_OW 67
// for i in cornel_units do
15772: LD_ADDR_VAR 0 1
15776: PUSH
15777: LD_EXP 6
15781: PUSH
15782: FOR_IN
15783: IFFALSE 15859
// begin if GetClass ( i ) in [ 2 , 3 ] then
15785: LD_VAR 0 1
15789: PPUSH
15790: CALL_OW 257
15794: PUSH
15795: LD_INT 2
15797: PUSH
15798: LD_INT 3
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: IN
15805: IFFALSE 15842
// begin ComEnterUnit ( i , arm ) ;
15807: LD_VAR 0 1
15811: PPUSH
15812: LD_VAR 0 2
15816: PPUSH
15817: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
15821: LD_VAR 0 1
15825: PPUSH
15826: LD_INT 1
15828: PPUSH
15829: CALL_OW 183
// AddComExitBuilding ( i ) ;
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
15842: LD_VAR 0 1
15846: PPUSH
15847: LD_INT 257
15849: PPUSH
15850: LD_INT 121
15852: PPUSH
15853: CALL_OW 171
// end ;
15857: GO 15782
15859: POP
15860: POP
// Wait ( 1 1$00 ) ;
15861: LD_INT 2100
15863: PPUSH
15864: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
15868: LD_ADDR_VAR 0 3
15872: PUSH
15873: LD_EXP 44
15877: PUSH
15878: LD_EXP 45
15882: ADD
15883: PUSH
15884: LD_EXP 6
15888: ADD
15889: PUSH
15890: LD_EXP 6
15894: PPUSH
15895: LD_INT 21
15897: PUSH
15898: LD_INT 2
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PPUSH
15905: CALL_OW 72
15909: DIFF
15910: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
15911: LD_VAR 0 3
15915: PPUSH
15916: LD_INT 248
15918: PPUSH
15919: LD_INT 85
15921: PPUSH
15922: CALL_OW 111
// AddComHold ( filter ) ;
15926: LD_VAR 0 3
15930: PPUSH
15931: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
15935: LD_INT 35
15937: PPUSH
15938: CALL_OW 67
// until cornel_attack ;
15942: LD_EXP 9
15946: IFFALSE 15935
// ComAgressiveMove ( filter , 209 , 63 ) ;
15948: LD_VAR 0 3
15952: PPUSH
15953: LD_INT 209
15955: PPUSH
15956: LD_INT 63
15958: PPUSH
15959: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
15963: LD_EXP 44
15967: PPUSH
15968: LD_INT 208
15970: PPUSH
15971: LD_INT 62
15973: PPUSH
15974: CALL_OW 114
// AddComHold ( Cornel ) ;
15978: LD_EXP 44
15982: PPUSH
15983: CALL_OW 200
// if Bierezov then
15987: LD_EXP 45
15991: IFFALSE 16081
// begin filter := filter diff Bierezov ;
15993: LD_ADDR_VAR 0 3
15997: PUSH
15998: LD_VAR 0 3
16002: PUSH
16003: LD_EXP 45
16007: DIFF
16008: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16009: LD_EXP 45
16013: PPUSH
16014: LD_INT 6
16016: PPUSH
16017: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16021: LD_EXP 45
16025: PPUSH
16026: LD_INT 235
16028: PPUSH
16029: LD_INT 60
16031: PPUSH
16032: CALL_OW 111
// AddComHold ( Bierezov ) ;
16036: LD_EXP 45
16040: PPUSH
16041: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16045: LD_EXP 45
16049: PPUSH
16050: LD_INT 350
16052: PPUSH
16053: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16057: LD_EXP 45
16061: PPUSH
16062: LD_INT 198
16064: PPUSH
16065: LD_INT 28
16067: PPUSH
16068: CALL_OW 171
// AddComHold ( Bierezov ) ;
16072: LD_EXP 45
16076: PPUSH
16077: CALL_OW 200
// end ; end ; end_of_file
16081: PPOPN 3
16083: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16084: LD_EXP 53
16088: PUSH
16089: LD_EXP 31
16093: NOT
16094: AND
16095: PUSH
16096: LD_EXP 32
16100: NOT
16101: AND
16102: IFFALSE 16552
16104: GO 16106
16106: DISABLE
16107: LD_INT 0
16109: PPUSH
16110: PPUSH
16111: PPUSH
16112: PPUSH
// begin enable ;
16113: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16114: LD_ADDR_VAR 0 4
16118: PUSH
16119: LD_INT 81
16121: PUSH
16122: LD_INT 3
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PPUSH
16129: CALL_OW 69
16133: ST_TO_ADDR
// for i = 1 to ru_patrol do
16134: LD_ADDR_VAR 0 2
16138: PUSH
16139: DOUBLE
16140: LD_INT 1
16142: DEC
16143: ST_TO_ADDR
16144: LD_EXP 53
16148: PUSH
16149: FOR_TO
16150: IFFALSE 16550
// begin un := ru_patrol [ i ] ;
16152: LD_ADDR_VAR 0 1
16156: PUSH
16157: LD_EXP 53
16161: PUSH
16162: LD_VAR 0 2
16166: ARRAY
16167: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16168: LD_VAR 0 1
16172: PPUSH
16173: LD_INT 13
16175: PPUSH
16176: CALL_OW 308
16180: IFFALSE 16285
// begin if not ru_alert then
16182: LD_EXP 60
16186: NOT
16187: IFFALSE 16197
// ru_alert := true ;
16189: LD_ADDR_EXP 60
16193: PUSH
16194: LD_INT 1
16196: ST_TO_ADDR
// if not See ( 1 , un ) then
16197: LD_INT 1
16199: PPUSH
16200: LD_VAR 0 1
16204: PPUSH
16205: CALL_OW 292
16209: NOT
16210: IFFALSE 16224
// SetLives ( un , 1000 ) ;
16212: LD_VAR 0 1
16216: PPUSH
16217: LD_INT 1000
16219: PPUSH
16220: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16224: LD_ADDR_EXP 53
16228: PUSH
16229: LD_EXP 53
16233: PUSH
16234: LD_VAR 0 1
16238: DIFF
16239: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16240: LD_VAR 0 1
16244: PPUSH
16245: LD_INT 22
16247: PUSH
16248: LD_INT 3
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: LD_INT 30
16257: PUSH
16258: LD_INT 4
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PPUSH
16269: CALL_OW 69
16273: PPUSH
16274: CALL 1007 0 1
16278: PPUSH
16279: CALL_OW 120
// continue ;
16283: GO 16149
// end ; if IsOk ( un ) and not HasTask ( un ) then
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 302
16294: PUSH
16295: LD_VAR 0 1
16299: PPUSH
16300: CALL_OW 314
16304: NOT
16305: AND
16306: IFFALSE 16399
// begin for j = 1 to ru_firepoints_south [ i ] do
16308: LD_ADDR_VAR 0 3
16312: PUSH
16313: DOUBLE
16314: LD_INT 1
16316: DEC
16317: ST_TO_ADDR
16318: LD_EXP 59
16322: PUSH
16323: LD_VAR 0 2
16327: ARRAY
16328: PUSH
16329: FOR_TO
16330: IFFALSE 16397
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16332: LD_VAR 0 1
16336: PPUSH
16337: LD_EXP 59
16341: PUSH
16342: LD_VAR 0 2
16346: ARRAY
16347: PUSH
16348: LD_VAR 0 3
16352: ARRAY
16353: PUSH
16354: LD_INT 1
16356: ARRAY
16357: PPUSH
16358: LD_EXP 59
16362: PUSH
16363: LD_VAR 0 2
16367: ARRAY
16368: PUSH
16369: LD_VAR 0 3
16373: ARRAY
16374: PUSH
16375: LD_INT 2
16377: ARRAY
16378: PPUSH
16379: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16383: LD_VAR 0 1
16387: PPUSH
16388: LD_INT 70
16390: PPUSH
16391: CALL_OW 202
// end ;
16395: GO 16329
16397: POP
16398: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16399: LD_VAR 0 1
16403: PPUSH
16404: CALL_OW 256
16408: PUSH
16409: LD_INT 700
16411: LESS
16412: PUSH
16413: LD_VAR 0 1
16417: PPUSH
16418: LD_INT 13
16420: PPUSH
16421: CALL_OW 308
16425: NOT
16426: AND
16427: IFFALSE 16479
// begin ComMoveToArea ( un , retreatArea ) ;
16429: LD_VAR 0 1
16433: PPUSH
16434: LD_INT 13
16436: PPUSH
16437: CALL_OW 113
// if not ru_alert_xy then
16441: LD_EXP 61
16445: NOT
16446: IFFALSE 16477
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16448: LD_ADDR_EXP 61
16452: PUSH
16453: LD_VAR 0 1
16457: PPUSH
16458: CALL_OW 250
16462: PUSH
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL_OW 251
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: ST_TO_ADDR
// end else
16477: GO 16548
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16479: LD_VAR 0 1
16483: PPUSH
16484: LD_VAR 0 4
16488: PPUSH
16489: LD_VAR 0 1
16493: PPUSH
16494: CALL_OW 74
16498: PPUSH
16499: CALL_OW 296
16503: PUSH
16504: LD_INT 9
16506: LESS
16507: PUSH
16508: LD_VAR 0 1
16512: PPUSH
16513: CALL_OW 256
16517: PUSH
16518: LD_INT 500
16520: GREATER
16521: AND
16522: IFFALSE 16548
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
16524: LD_VAR 0 1
16528: PPUSH
16529: LD_VAR 0 4
16533: PPUSH
16534: LD_VAR 0 1
16538: PPUSH
16539: CALL_OW 74
16543: PPUSH
16544: CALL_OW 115
// end ;
16548: GO 16149
16550: POP
16551: POP
// end ;
16552: PPOPN 4
16554: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
16555: LD_EXP 60
16559: PUSH
16560: LD_EXP 61
16564: AND
16565: PUSH
16566: LD_EXP 31
16570: NOT
16571: AND
16572: PUSH
16573: LD_EXP 32
16577: NOT
16578: AND
16579: IFFALSE 16789
16581: GO 16583
16583: DISABLE
16584: LD_INT 0
16586: PPUSH
16587: PPUSH
// begin enable ;
16588: ENABLE
// if not ru_vehicles then
16589: LD_EXP 56
16593: NOT
16594: IFFALSE 16598
// exit ;
16596: GO 16789
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16598: LD_ADDR_VAR 0 2
16602: PUSH
16603: LD_INT 81
16605: PUSH
16606: LD_INT 3
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PPUSH
16613: CALL_OW 69
16617: ST_TO_ADDR
// if ru_vehicles then
16618: LD_EXP 56
16622: IFFALSE 16789
// begin for i in ru_vehicles do
16624: LD_ADDR_VAR 0 1
16628: PUSH
16629: LD_EXP 56
16633: PUSH
16634: FOR_IN
16635: IFFALSE 16787
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL_OW 302
16646: PUSH
16647: LD_VAR 0 1
16651: PPUSH
16652: LD_VAR 0 2
16656: PPUSH
16657: LD_VAR 0 1
16661: PPUSH
16662: CALL_OW 74
16666: PPUSH
16667: CALL_OW 296
16671: PUSH
16672: LD_INT 9
16674: LESS
16675: AND
16676: IFFALSE 16702
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
16678: LD_VAR 0 1
16682: PPUSH
16683: LD_VAR 0 2
16687: PPUSH
16688: LD_VAR 0 1
16692: PPUSH
16693: CALL_OW 74
16697: PPUSH
16698: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
16702: LD_VAR 0 1
16706: PPUSH
16707: CALL_OW 314
16711: NOT
16712: PUSH
16713: LD_VAR 0 1
16717: PPUSH
16718: CALL_OW 302
16722: AND
16723: PUSH
16724: LD_VAR 0 1
16728: PPUSH
16729: LD_EXP 61
16733: PUSH
16734: LD_INT 1
16736: ARRAY
16737: PPUSH
16738: LD_EXP 61
16742: PUSH
16743: LD_INT 2
16745: ARRAY
16746: PPUSH
16747: CALL_OW 297
16751: PUSH
16752: LD_INT 10
16754: GREATER
16755: AND
16756: IFFALSE 16785
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
16758: LD_VAR 0 1
16762: PPUSH
16763: LD_EXP 61
16767: PUSH
16768: LD_INT 1
16770: ARRAY
16771: PPUSH
16772: LD_EXP 61
16776: PUSH
16777: LD_INT 2
16779: ARRAY
16780: PPUSH
16781: CALL_OW 114
// end ;
16785: GO 16634
16787: POP
16788: POP
// end ; end ;
16789: PPOPN 2
16791: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
16792: LD_EXP 61
16796: PUSH
16797: LD_EXP 60
16801: AND
16802: PUSH
16803: LD_INT 3
16805: PPUSH
16806: CALL_OW 463
16810: NOT
16811: AND
16812: PUSH
16813: LD_EXP 31
16817: NOT
16818: AND
16819: PUSH
16820: LD_EXP 32
16824: NOT
16825: AND
16826: IFFALSE 16921
16828: GO 16830
16830: DISABLE
16831: LD_INT 0
16833: PPUSH
// begin enable ;
16834: ENABLE
// ru_alert_xy := false ;
16835: LD_ADDR_EXP 61
16839: PUSH
16840: LD_INT 0
16842: ST_TO_ADDR
// ru_alert := false ;
16843: LD_ADDR_EXP 60
16847: PUSH
16848: LD_INT 0
16850: ST_TO_ADDR
// if ru_vehicles then
16851: LD_EXP 56
16855: IFFALSE 16921
// for i in ru_vehicles do
16857: LD_ADDR_VAR 0 1
16861: PUSH
16862: LD_EXP 56
16866: PUSH
16867: FOR_IN
16868: IFFALSE 16919
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
16870: LD_VAR 0 1
16874: PPUSH
16875: CALL_OW 302
16879: PUSH
16880: LD_VAR 0 1
16884: PPUSH
16885: LD_INT 89
16887: PPUSH
16888: LD_INT 36
16890: PPUSH
16891: CALL_OW 297
16895: PUSH
16896: LD_INT 10
16898: GREATER
16899: AND
16900: IFFALSE 16917
// ComMoveXY ( i , 89 , 36 ) ;
16902: LD_VAR 0 1
16906: PPUSH
16907: LD_INT 89
16909: PPUSH
16910: LD_INT 36
16912: PPUSH
16913: CALL_OW 111
16917: GO 16867
16919: POP
16920: POP
// end ;
16921: PPOPN 1
16923: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
16924: LD_EXP 55
16928: PUSH
16929: LD_EXP 31
16933: NOT
16934: AND
16935: PUSH
16936: LD_EXP 32
16940: NOT
16941: AND
16942: IFFALSE 17226
16944: GO 16946
16946: DISABLE
16947: LD_INT 0
16949: PPUSH
16950: PPUSH
16951: PPUSH
// begin enable ;
16952: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16953: LD_ADDR_VAR 0 3
16957: PUSH
16958: LD_INT 81
16960: PUSH
16961: LD_INT 3
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PPUSH
16968: CALL_OW 69
16972: ST_TO_ADDR
// for i = 1 to ru_forest do
16973: LD_ADDR_VAR 0 1
16977: PUSH
16978: DOUBLE
16979: LD_INT 1
16981: DEC
16982: ST_TO_ADDR
16983: LD_EXP 55
16987: PUSH
16988: FOR_TO
16989: IFFALSE 17224
// begin un := ru_forest [ i ] ;
16991: LD_ADDR_VAR 0 2
16995: PUSH
16996: LD_EXP 55
17000: PUSH
17001: LD_VAR 0 1
17005: ARRAY
17006: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17007: LD_VAR 0 2
17011: PPUSH
17012: LD_INT 13
17014: PPUSH
17015: CALL_OW 308
17019: IFFALSE 17109
// begin if not See ( 1 , un ) then
17021: LD_INT 1
17023: PPUSH
17024: LD_VAR 0 2
17028: PPUSH
17029: CALL_OW 292
17033: NOT
17034: IFFALSE 17048
// SetLives ( un , 1000 ) ;
17036: LD_VAR 0 2
17040: PPUSH
17041: LD_INT 1000
17043: PPUSH
17044: CALL_OW 234
// ru_forest := ru_forest diff un ;
17048: LD_ADDR_EXP 55
17052: PUSH
17053: LD_EXP 55
17057: PUSH
17058: LD_VAR 0 2
17062: DIFF
17063: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17064: LD_VAR 0 2
17068: PPUSH
17069: LD_INT 22
17071: PUSH
17072: LD_INT 3
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 30
17081: PUSH
17082: LD_INT 4
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PPUSH
17093: CALL_OW 69
17097: PPUSH
17098: CALL 1007 0 1
17102: PPUSH
17103: CALL_OW 120
// continue ;
17107: GO 16988
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17109: LD_VAR 0 2
17113: PPUSH
17114: CALL_OW 256
17118: PUSH
17119: LD_INT 700
17121: LESS
17122: PUSH
17123: LD_VAR 0 2
17127: PPUSH
17128: LD_INT 13
17130: PPUSH
17131: CALL_OW 308
17135: NOT
17136: AND
17137: IFFALSE 17153
// ComMoveToArea ( un , retreatArea ) else
17139: LD_VAR 0 2
17143: PPUSH
17144: LD_INT 13
17146: PPUSH
17147: CALL_OW 113
17151: GO 17222
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17153: LD_VAR 0 2
17157: PPUSH
17158: LD_VAR 0 3
17162: PPUSH
17163: LD_VAR 0 2
17167: PPUSH
17168: CALL_OW 74
17172: PPUSH
17173: CALL_OW 296
17177: PUSH
17178: LD_INT 9
17180: LESS
17181: PUSH
17182: LD_VAR 0 2
17186: PPUSH
17187: CALL_OW 256
17191: PUSH
17192: LD_INT 500
17194: GREATER
17195: AND
17196: IFFALSE 17222
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17198: LD_VAR 0 2
17202: PPUSH
17203: LD_VAR 0 3
17207: PPUSH
17208: LD_VAR 0 2
17212: PPUSH
17213: CALL_OW 74
17217: PPUSH
17218: CALL_OW 115
// end ;
17222: GO 16988
17224: POP
17225: POP
// end ;
17226: PPOPN 3
17228: END
// every 0 0$10 trigger not send_attack_on_cornel do var i , filter ;
17229: LD_EXP 32
17233: NOT
17234: IFFALSE 17355
17236: GO 17238
17238: DISABLE
17239: LD_INT 0
17241: PPUSH
17242: PPUSH
// begin enable ;
17243: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
17244: LD_ADDR_VAR 0 2
17248: PUSH
17249: LD_INT 22
17251: PUSH
17252: LD_INT 3
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 21
17261: PUSH
17262: LD_INT 3
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PPUSH
17273: CALL_OW 69
17277: ST_TO_ADDR
// if filter then
17278: LD_VAR 0 2
17282: IFFALSE 17355
// for i in filter do
17284: LD_ADDR_VAR 0 1
17288: PUSH
17289: LD_VAR 0 2
17293: PUSH
17294: FOR_IN
17295: IFFALSE 17353
// if GetLives ( i ) < 990 then
17297: LD_VAR 0 1
17301: PPUSH
17302: CALL_OW 256
17306: PUSH
17307: LD_INT 990
17309: LESS
17310: IFFALSE 17351
// begin ru_alert := true ;
17312: LD_ADDR_EXP 60
17316: PUSH
17317: LD_INT 1
17319: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17320: LD_ADDR_EXP 61
17324: PUSH
17325: LD_VAR 0 1
17329: PPUSH
17330: CALL_OW 250
17334: PUSH
17335: LD_VAR 0 1
17339: PPUSH
17340: CALL_OW 251
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: ST_TO_ADDR
// break ;
17349: GO 17353
// end ;
17351: GO 17294
17353: POP
17354: POP
// end ;
17355: PPOPN 2
17357: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17358: LD_EXP 31
17362: IFFALSE 17511
17364: GO 17366
17366: DISABLE
17367: LD_INT 0
17369: PPUSH
17370: PPUSH
17371: PPUSH
17372: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17373: LD_ADDR_VAR 0 4
17377: PUSH
17378: LD_EXP 56
17382: PUSH
17383: LD_EXP 55
17387: ADD
17388: PUSH
17389: LD_EXP 53
17393: ADD
17394: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17395: LD_ADDR_VAR 0 3
17399: PUSH
17400: LD_INT 3
17402: PPUSH
17403: LD_INT 81
17405: PUSH
17406: LD_INT 3
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PPUSH
17413: CALL_OW 70
17417: ST_TO_ADDR
// if filter and enemy then
17418: LD_VAR 0 4
17422: PUSH
17423: LD_VAR 0 3
17427: AND
17428: IFFALSE 17511
// repeat wait ( 0 0$01 ) ;
17430: LD_INT 35
17432: PPUSH
17433: CALL_OW 67
// for i in filter do
17437: LD_ADDR_VAR 0 1
17441: PUSH
17442: LD_VAR 0 4
17446: PUSH
17447: FOR_IN
17448: IFFALSE 17476
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17450: LD_VAR 0 1
17454: PPUSH
17455: LD_VAR 0 3
17459: PPUSH
17460: LD_VAR 0 1
17464: PPUSH
17465: CALL_OW 74
17469: PPUSH
17470: CALL_OW 115
// end ;
17474: GO 17447
17476: POP
17477: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
17478: LD_INT 3
17480: PPUSH
17481: LD_INT 81
17483: PUSH
17484: LD_INT 3
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PPUSH
17491: CALL_OW 70
17495: PUSH
17496: LD_INT 0
17498: EQUAL
17499: PUSH
17500: LD_VAR 0 4
17504: PUSH
17505: LD_INT 0
17507: EQUAL
17508: OR
17509: IFFALSE 17430
// end ;
17511: PPOPN 4
17513: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
17514: LD_EXP 26
17518: PUSH
17519: LD_INT 22
17521: PUSH
17522: LD_INT 4
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 30
17531: PUSH
17532: LD_INT 4
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 3
17541: PUSH
17542: LD_INT 57
17544: PUSH
17545: EMPTY
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: LIST
17556: PPUSH
17557: CALL_OW 69
17561: AND
17562: IFFALSE 17611
17564: GO 17566
17566: DISABLE
17567: LD_INT 0
17569: PPUSH
// begin if not ru_cornel_attack then
17570: LD_EXP 58
17574: NOT
17575: IFFALSE 17579
// exit ;
17577: GO 17611
// for i in ru_cornel_attack do
17579: LD_ADDR_VAR 0 1
17583: PUSH
17584: LD_EXP 58
17588: PUSH
17589: FOR_IN
17590: IFFALSE 17609
// ComAgressiveMove ( i , 258 , 119 ) ;
17592: LD_VAR 0 1
17596: PPUSH
17597: LD_INT 258
17599: PPUSH
17600: LD_INT 119
17602: PPUSH
17603: CALL_OW 114
17607: GO 17589
17609: POP
17610: POP
// end ; end_of_file
17611: PPOPN 1
17613: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
17614: LD_EXP 5
17618: PUSH
17619: LD_EXP 9
17623: NOT
17624: AND
17625: PUSH
17626: LD_EXP 20
17630: AND
17631: IFFALSE 17743
17633: GO 17635
17635: DISABLE
17636: LD_INT 0
17638: PPUSH
// begin enable ;
17639: ENABLE
// crates_counter := crates_counter - 50 ;
17640: LD_ADDR_EXP 20
17644: PUSH
17645: LD_EXP 20
17649: PUSH
17650: LD_INT 50
17652: MINUS
17653: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
17654: LD_INT 8
17656: PPUSH
17657: LD_INT 2
17659: PPUSH
17660: LD_INT 5
17662: PPUSH
17663: CALL_OW 12
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
17675: LD_INT 1785
17677: PPUSH
17678: LD_INT 2345
17680: PPUSH
17681: CALL_OW 12
17685: PPUSH
17686: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
17690: LD_ADDR_VAR 0 1
17694: PUSH
17695: LD_INT 1
17697: PPUSH
17698: LD_OWVAR 67
17702: PUSH
17703: LD_INT 2
17705: PLUS
17706: PPUSH
17707: CALL_OW 12
17711: ST_TO_ADDR
// if r < 3 then
17712: LD_VAR 0 1
17716: PUSH
17717: LD_INT 3
17719: LESS
17720: IFFALSE 17743
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
17722: LD_INT 4
17724: PPUSH
17725: LD_INT 1
17727: PPUSH
17728: LD_INT 5
17730: PPUSH
17731: CALL_OW 12
17735: PPUSH
17736: LD_INT 1
17738: PPUSH
17739: CALL_OW 55
// end ;
17743: PPOPN 1
17745: END
// every 0 0$01 trigger cornel_active do
17746: LD_EXP 8
17750: IFFALSE 17839
17752: GO 17754
17754: DISABLE
// begin Wait ( 0 0$03 ) ;
17755: LD_INT 105
17757: PPUSH
17758: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17762: LD_INT 2
17764: PPUSH
17765: LD_INT 5
17767: PPUSH
17768: CALL_OW 12
17772: PPUSH
17773: LD_INT 10
17775: PPUSH
17776: LD_INT 1
17778: PPUSH
17779: CALL_OW 55
// Wait ( 0 0$13 ) ;
17783: LD_INT 455
17785: PPUSH
17786: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17790: LD_INT 2
17792: PPUSH
17793: LD_INT 5
17795: PPUSH
17796: CALL_OW 12
17800: PPUSH
17801: LD_INT 10
17803: PPUSH
17804: LD_INT 1
17806: PPUSH
17807: CALL_OW 55
// Wait ( 0 0$16 ) ;
17811: LD_INT 560
17813: PPUSH
17814: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17818: LD_INT 2
17820: PPUSH
17821: LD_INT 5
17823: PPUSH
17824: CALL_OW 12
17828: PPUSH
17829: LD_INT 10
17831: PPUSH
17832: LD_INT 1
17834: PPUSH
17835: CALL_OW 55
// end ; end_of_file
17839: END
// every 0 0$01 trigger cornel_prepared do
17840: LD_EXP 11
17844: IFFALSE 17903
17846: GO 17848
17848: DISABLE
// begin enable ;
17849: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
17850: LD_ADDR_OWVAR 47
17854: PUSH
17855: LD_STRING #Am03-1
17857: PUSH
17858: LD_EXP 10
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
17867: LD_ADDR_EXP 10
17871: PUSH
17872: LD_EXP 10
17876: PPUSH
17877: LD_STRING -
17879: PPUSH
17880: CALL 1077 0 2
17884: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
17885: LD_EXP 10
17889: PUSH
17890: LD_INT 0
17892: EQUAL
17893: IFFALSE 17903
// begin Display_Strings := [ ] ;
17895: LD_ADDR_OWVAR 47
17899: PUSH
17900: EMPTY
17901: ST_TO_ADDR
// disable ;
17902: DISABLE
// end ; end ;
17903: END
// every 0 0$01 trigger debug and debug_strings do
17904: LD_EXP 1
17908: PUSH
17909: LD_OWVAR 48
17913: AND
17914: IFFALSE 17930
17916: GO 17918
17918: DISABLE
// begin enable ;
17919: ENABLE
// Display_Strings := debug_strings ;
17920: LD_ADDR_OWVAR 47
17924: PUSH
17925: LD_OWVAR 48
17929: ST_TO_ADDR
// end ; end_of_file
17930: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 1 and not solar_builded then
17931: LD_VAR 0 1
17935: PPUSH
17936: CALL_OW 255
17940: PUSH
17941: LD_INT 1
17943: EQUAL
17944: PUSH
17945: LD_EXP 14
17949: NOT
17950: AND
17951: IFFALSE 17961
// solar_builded := true ;
17953: LD_ADDR_EXP 14
17957: PUSH
17958: LD_INT 1
17960: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
17961: LD_VAR 0 1
17965: PPUSH
17966: CALL_OW 255
17970: PUSH
17971: LD_INT 1
17973: EQUAL
17974: PUSH
17975: LD_EXP 29
17979: AND
17980: IFFALSE 18017
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
17982: LD_ADDR_EXP 29
17986: PUSH
17987: LD_EXP 29
17991: PUSH
17992: LD_INT 1750
17994: PUSH
17995: LD_INT 1400
17997: PUSH
17998: LD_INT 1225
18000: PUSH
18001: LD_INT 1050
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: PUSH
18010: LD_OWVAR 67
18014: ARRAY
18015: PLUS
18016: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18017: LD_VAR 0 1
18021: PPUSH
18022: CALL_OW 255
18026: PUSH
18027: LD_INT 3
18029: EQUAL
18030: IFFALSE 18048
// ru_vehicles := ru_vehicles ^ veh ;
18032: LD_ADDR_EXP 56
18036: PUSH
18037: LD_EXP 56
18041: PUSH
18042: LD_VAR 0 1
18046: ADD
18047: ST_TO_ADDR
// end ;
18048: PPOPN 2
18050: END
// on UnitDestroyed ( un ) do begin if un in ru_patrol then
18051: LD_VAR 0 1
18055: PUSH
18056: LD_EXP 53
18060: IN
18061: IFFALSE 18079
// ru_patrol := ru_patrol diff un ;
18063: LD_ADDR_EXP 53
18067: PUSH
18068: LD_EXP 53
18072: PUSH
18073: LD_VAR 0 1
18077: DIFF
18078: ST_TO_ADDR
// if un in ru_forest then
18079: LD_VAR 0 1
18083: PUSH
18084: LD_EXP 55
18088: IN
18089: IFFALSE 18107
// ru_forest := ru_forest diff un ;
18091: LD_ADDR_EXP 55
18095: PUSH
18096: LD_EXP 55
18100: PUSH
18101: LD_VAR 0 1
18105: DIFF
18106: ST_TO_ADDR
// if un in ru_vehicles then
18107: LD_VAR 0 1
18111: PUSH
18112: LD_EXP 56
18116: IN
18117: IFFALSE 18223
// begin ru_vehicles := ru_vehicles diff un ;
18119: LD_ADDR_EXP 56
18123: PUSH
18124: LD_EXP 56
18128: PUSH
18129: LD_VAR 0 1
18133: DIFF
18134: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18135: LD_ADDR_EXP 57
18139: PUSH
18140: LD_EXP 57
18144: PUSH
18145: LD_VAR 0 1
18149: PPUSH
18150: CALL_OW 265
18154: PUSH
18155: LD_VAR 0 1
18159: PPUSH
18160: CALL_OW 262
18164: PUSH
18165: LD_VAR 0 1
18169: PPUSH
18170: CALL_OW 263
18174: PUSH
18175: LD_VAR 0 1
18179: PPUSH
18180: CALL_OW 264
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: ADD
18191: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18192: LD_ADDR_EXP 13
18196: PUSH
18197: LD_EXP 13
18201: PUSH
18202: LD_INT 1
18204: PLUS
18205: ST_TO_ADDR
// if ach_counter = 10 then
18206: LD_EXP 13
18210: PUSH
18211: LD_INT 10
18213: EQUAL
18214: IFFALSE 18223
// SetAchievement ( ACH_FAUST ) ;
18216: LD_STRING ACH_FAUST
18218: PPUSH
18219: CALL_OW 543
// end ; if un = Pokryshkin then
18223: LD_VAR 0 1
18227: PUSH
18228: LD_EXP 52
18232: EQUAL
18233: IFFALSE 18242
// SetAchievement ( ACH_POKR ) ;
18235: LD_STRING ACH_POKR
18237: PPUSH
18238: CALL_OW 543
// if un = JMM then
18242: LD_VAR 0 1
18246: PUSH
18247: LD_EXP 37
18251: EQUAL
18252: IFFALSE 18261
// YouLost ( 0 ) ;
18254: LD_STRING 0
18256: PPUSH
18257: CALL_OW 104
// if un = us_dep_west then
18261: LD_VAR 0 1
18265: PUSH
18266: LD_INT 1
18268: EQUAL
18269: IFFALSE 18278
// YouLost ( 2 ) ;
18271: LD_STRING 2
18273: PPUSH
18274: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18278: LD_VAR 0 1
18282: PPUSH
18283: CALL_OW 255
18287: PUSH
18288: LD_INT 8
18290: EQUAL
18291: PUSH
18292: LD_EXP 5
18296: NOT
18297: AND
18298: IFFALSE 18307
// YouLost ( 4 ) ;
18300: LD_STRING 4
18302: PPUSH
18303: CALL_OW 104
// if un in jmm_units then
18307: LD_VAR 0 1
18311: PUSH
18312: LD_EXP 4
18316: IN
18317: IFFALSE 18333
// lose_counter := lose_counter + 1 ;
18319: LD_ADDR_EXP 34
18323: PUSH
18324: LD_EXP 34
18328: PUSH
18329: LD_INT 1
18331: PLUS
18332: ST_TO_ADDR
// end ;
18333: PPOPN 1
18335: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18336: LD_INT 0
18338: PPUSH
18339: PPUSH
// begin if GetSide ( driver ) = 3 then
18340: LD_VAR 0 1
18344: PPUSH
18345: CALL_OW 255
18349: PUSH
18350: LD_INT 3
18352: EQUAL
18353: IFFALSE 18431
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18355: LD_ADDR_VAR 0 6
18359: PUSH
18360: LD_INT 22
18362: PUSH
18363: LD_INT 3
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 30
18372: PUSH
18373: LD_INT 3
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PPUSH
18384: CALL_OW 69
18388: PPUSH
18389: CALL 1007 0 1
18393: ST_TO_ADDR
// if place then
18394: LD_VAR 0 6
18398: IFFALSE 18416
// ComEnterUnit ( driver , place ) else
18400: LD_VAR 0 1
18404: PPUSH
18405: LD_VAR 0 6
18409: PPUSH
18410: CALL_OW 120
18414: GO 18431
// ComMoveXY ( driver , 70 , 22 ) ;
18416: LD_VAR 0 1
18420: PPUSH
18421: LD_INT 70
18423: PPUSH
18424: LD_INT 22
18426: PPUSH
18427: CALL_OW 111
// end ; end ;
18431: PPOPN 6
18433: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
18434: LD_VAR 0 1
18438: PUSH
18439: LD_INT 1
18441: EQUAL
18442: PUSH
18443: LD_VAR 0 2
18447: PUSH
18448: LD_INT 4
18450: EQUAL
18451: PUSH
18452: LD_VAR 0 2
18456: PUSH
18457: LD_INT 8
18459: EQUAL
18460: PUSH
18461: LD_EXP 5
18465: NOT
18466: AND
18467: OR
18468: AND
18469: IFFALSE 18478
// YouLost ( 5 ) ;
18471: LD_STRING 5
18473: PPUSH
18474: CALL_OW 104
// end ;
18478: PPOPN 2
18480: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
18481: LD_EXP 36
18485: PUSH
18486: LD_INT 22
18488: PUSH
18489: LD_INT 1
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 21
18498: PUSH
18499: LD_INT 1
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PPUSH
18510: CALL_OW 69
18514: PUSH
18515: LD_INT 22
18517: PUSH
18518: LD_INT 8
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 21
18527: PUSH
18528: LD_INT 1
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PPUSH
18539: CALL_OW 69
18543: ADD
18544: PLUS
18545: PUSH
18546: LD_INT 5
18548: LESS
18549: IFFALSE 18561
18551: GO 18553
18553: DISABLE
// YouLost ( 1 ) ;
18554: LD_STRING 1
18556: PPUSH
18557: CALL_OW 104
18561: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
18562: LD_INT 1
18564: PPUSH
18565: CALL_OW 255
18569: PUSH
18570: LD_INT 3
18572: EQUAL
18573: IFFALSE 18585
18575: GO 18577
18577: DISABLE
// YouLost ( 3 ) ; end_of_file
18578: LD_STRING 3
18580: PPUSH
18581: CALL_OW 104
18585: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18586: LD_INT 0
18588: PPUSH
// ar_miner := 81 ;
18589: LD_ADDR_EXP 69
18593: PUSH
18594: LD_INT 81
18596: ST_TO_ADDR
// ar_crane := 88 ;
18597: LD_ADDR_EXP 68
18601: PUSH
18602: LD_INT 88
18604: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18605: LD_ADDR_EXP 63
18609: PUSH
18610: LD_INT 89
18612: ST_TO_ADDR
// us_hack := 99 ;
18613: LD_ADDR_EXP 64
18617: PUSH
18618: LD_INT 99
18620: ST_TO_ADDR
// us_artillery := 97 ;
18621: LD_ADDR_EXP 65
18625: PUSH
18626: LD_INT 97
18628: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18629: LD_ADDR_EXP 66
18633: PUSH
18634: LD_INT 91
18636: ST_TO_ADDR
// ar_mortar := 92 ;
18637: LD_ADDR_EXP 67
18641: PUSH
18642: LD_INT 92
18644: ST_TO_ADDR
// ru_radar := 98 ;
18645: LD_ADDR_EXP 62
18649: PUSH
18650: LD_INT 98
18652: ST_TO_ADDR
// tech_Artillery := 80 ;
18653: LD_ADDR_EXP 70
18657: PUSH
18658: LD_INT 80
18660: ST_TO_ADDR
// tech_RadMat := 81 ;
18661: LD_ADDR_EXP 71
18665: PUSH
18666: LD_INT 81
18668: ST_TO_ADDR
// tech_BasicTools := 82 ;
18669: LD_ADDR_EXP 72
18673: PUSH
18674: LD_INT 82
18676: ST_TO_ADDR
// tech_Cargo := 83 ;
18677: LD_ADDR_EXP 73
18681: PUSH
18682: LD_INT 83
18684: ST_TO_ADDR
// tech_Track := 84 ;
18685: LD_ADDR_EXP 74
18689: PUSH
18690: LD_INT 84
18692: ST_TO_ADDR
// tech_Crane := 85 ;
18693: LD_ADDR_EXP 75
18697: PUSH
18698: LD_INT 85
18700: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18701: LD_ADDR_EXP 76
18705: PUSH
18706: LD_INT 86
18708: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18709: LD_ADDR_EXP 77
18713: PUSH
18714: LD_INT 87
18716: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18717: LD_ADDR_EXP 78
18721: PUSH
18722: LD_INT 88
18724: ST_TO_ADDR
// class_mastodont := 31 ;
18725: LD_ADDR_EXP 79
18729: PUSH
18730: LD_INT 31
18732: ST_TO_ADDR
// class_horse := 21 ;
18733: LD_ADDR_EXP 80
18737: PUSH
18738: LD_INT 21
18740: ST_TO_ADDR
// end ;
18741: LD_VAR 0 1
18745: RET
// every 1 do
18746: GO 18748
18748: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18749: CALL 18586 0 0
18753: END
// every 0 0$1 do
18754: GO 18756
18756: DISABLE
// begin enable ;
18757: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18758: LD_STRING updateTimer(
18760: PUSH
18761: LD_OWVAR 1
18765: STR
18766: PUSH
18767: LD_STRING );
18769: STR
18770: PPUSH
18771: CALL_OW 559
// end ;
18775: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18776: LD_INT 0
18778: PPUSH
// if p2 = 100 then
18779: LD_VAR 0 2
18783: PUSH
18784: LD_INT 100
18786: EQUAL
18787: IFFALSE 19790
// begin if not StreamModeActive then
18789: LD_EXP 81
18793: NOT
18794: IFFALSE 18804
// StreamModeActive := true ;
18796: LD_ADDR_EXP 81
18800: PUSH
18801: LD_INT 1
18803: ST_TO_ADDR
// if p3 = 0 then
18804: LD_VAR 0 3
18808: PUSH
18809: LD_INT 0
18811: EQUAL
18812: IFFALSE 18818
// InitStreamMode ;
18814: CALL 19950 0 0
// if p3 = 1 then
18818: LD_VAR 0 3
18822: PUSH
18823: LD_INT 1
18825: EQUAL
18826: IFFALSE 18836
// sRocket := true ;
18828: LD_ADDR_EXP 86
18832: PUSH
18833: LD_INT 1
18835: ST_TO_ADDR
// if p3 = 2 then
18836: LD_VAR 0 3
18840: PUSH
18841: LD_INT 2
18843: EQUAL
18844: IFFALSE 18854
// sSpeed := true ;
18846: LD_ADDR_EXP 85
18850: PUSH
18851: LD_INT 1
18853: ST_TO_ADDR
// if p3 = 3 then
18854: LD_VAR 0 3
18858: PUSH
18859: LD_INT 3
18861: EQUAL
18862: IFFALSE 18872
// sEngine := true ;
18864: LD_ADDR_EXP 87
18868: PUSH
18869: LD_INT 1
18871: ST_TO_ADDR
// if p3 = 4 then
18872: LD_VAR 0 3
18876: PUSH
18877: LD_INT 4
18879: EQUAL
18880: IFFALSE 18890
// sSpec := true ;
18882: LD_ADDR_EXP 84
18886: PUSH
18887: LD_INT 1
18889: ST_TO_ADDR
// if p3 = 5 then
18890: LD_VAR 0 3
18894: PUSH
18895: LD_INT 5
18897: EQUAL
18898: IFFALSE 18908
// sLevel := true ;
18900: LD_ADDR_EXP 88
18904: PUSH
18905: LD_INT 1
18907: ST_TO_ADDR
// if p3 = 6 then
18908: LD_VAR 0 3
18912: PUSH
18913: LD_INT 6
18915: EQUAL
18916: IFFALSE 18926
// sArmoury := true ;
18918: LD_ADDR_EXP 89
18922: PUSH
18923: LD_INT 1
18925: ST_TO_ADDR
// if p3 = 7 then
18926: LD_VAR 0 3
18930: PUSH
18931: LD_INT 7
18933: EQUAL
18934: IFFALSE 18944
// sRadar := true ;
18936: LD_ADDR_EXP 90
18940: PUSH
18941: LD_INT 1
18943: ST_TO_ADDR
// if p3 = 8 then
18944: LD_VAR 0 3
18948: PUSH
18949: LD_INT 8
18951: EQUAL
18952: IFFALSE 18962
// sBunker := true ;
18954: LD_ADDR_EXP 91
18958: PUSH
18959: LD_INT 1
18961: ST_TO_ADDR
// if p3 = 9 then
18962: LD_VAR 0 3
18966: PUSH
18967: LD_INT 9
18969: EQUAL
18970: IFFALSE 18980
// sHack := true ;
18972: LD_ADDR_EXP 92
18976: PUSH
18977: LD_INT 1
18979: ST_TO_ADDR
// if p3 = 10 then
18980: LD_VAR 0 3
18984: PUSH
18985: LD_INT 10
18987: EQUAL
18988: IFFALSE 18998
// sFire := true ;
18990: LD_ADDR_EXP 93
18994: PUSH
18995: LD_INT 1
18997: ST_TO_ADDR
// if p3 = 11 then
18998: LD_VAR 0 3
19002: PUSH
19003: LD_INT 11
19005: EQUAL
19006: IFFALSE 19016
// sRefresh := true ;
19008: LD_ADDR_EXP 94
19012: PUSH
19013: LD_INT 1
19015: ST_TO_ADDR
// if p3 = 12 then
19016: LD_VAR 0 3
19020: PUSH
19021: LD_INT 12
19023: EQUAL
19024: IFFALSE 19034
// sExp := true ;
19026: LD_ADDR_EXP 95
19030: PUSH
19031: LD_INT 1
19033: ST_TO_ADDR
// if p3 = 13 then
19034: LD_VAR 0 3
19038: PUSH
19039: LD_INT 13
19041: EQUAL
19042: IFFALSE 19052
// sDepot := true ;
19044: LD_ADDR_EXP 96
19048: PUSH
19049: LD_INT 1
19051: ST_TO_ADDR
// if p3 = 14 then
19052: LD_VAR 0 3
19056: PUSH
19057: LD_INT 14
19059: EQUAL
19060: IFFALSE 19070
// sFlag := true ;
19062: LD_ADDR_EXP 97
19066: PUSH
19067: LD_INT 1
19069: ST_TO_ADDR
// if p3 = 15 then
19070: LD_VAR 0 3
19074: PUSH
19075: LD_INT 15
19077: EQUAL
19078: IFFALSE 19088
// sKamikadze := true ;
19080: LD_ADDR_EXP 105
19084: PUSH
19085: LD_INT 1
19087: ST_TO_ADDR
// if p3 = 16 then
19088: LD_VAR 0 3
19092: PUSH
19093: LD_INT 16
19095: EQUAL
19096: IFFALSE 19106
// sTroll := true ;
19098: LD_ADDR_EXP 106
19102: PUSH
19103: LD_INT 1
19105: ST_TO_ADDR
// if p3 = 17 then
19106: LD_VAR 0 3
19110: PUSH
19111: LD_INT 17
19113: EQUAL
19114: IFFALSE 19124
// sSlow := true ;
19116: LD_ADDR_EXP 107
19120: PUSH
19121: LD_INT 1
19123: ST_TO_ADDR
// if p3 = 18 then
19124: LD_VAR 0 3
19128: PUSH
19129: LD_INT 18
19131: EQUAL
19132: IFFALSE 19142
// sLack := true ;
19134: LD_ADDR_EXP 108
19138: PUSH
19139: LD_INT 1
19141: ST_TO_ADDR
// if p3 = 19 then
19142: LD_VAR 0 3
19146: PUSH
19147: LD_INT 19
19149: EQUAL
19150: IFFALSE 19160
// sTank := true ;
19152: LD_ADDR_EXP 110
19156: PUSH
19157: LD_INT 1
19159: ST_TO_ADDR
// if p3 = 20 then
19160: LD_VAR 0 3
19164: PUSH
19165: LD_INT 20
19167: EQUAL
19168: IFFALSE 19178
// sRemote := true ;
19170: LD_ADDR_EXP 111
19174: PUSH
19175: LD_INT 1
19177: ST_TO_ADDR
// if p3 = 21 then
19178: LD_VAR 0 3
19182: PUSH
19183: LD_INT 21
19185: EQUAL
19186: IFFALSE 19196
// sPowell := true ;
19188: LD_ADDR_EXP 112
19192: PUSH
19193: LD_INT 1
19195: ST_TO_ADDR
// if p3 = 22 then
19196: LD_VAR 0 3
19200: PUSH
19201: LD_INT 22
19203: EQUAL
19204: IFFALSE 19214
// sTeleport := true ;
19206: LD_ADDR_EXP 115
19210: PUSH
19211: LD_INT 1
19213: ST_TO_ADDR
// if p3 = 23 then
19214: LD_VAR 0 3
19218: PUSH
19219: LD_INT 23
19221: EQUAL
19222: IFFALSE 19232
// sOilTower := true ;
19224: LD_ADDR_EXP 117
19228: PUSH
19229: LD_INT 1
19231: ST_TO_ADDR
// if p3 = 24 then
19232: LD_VAR 0 3
19236: PUSH
19237: LD_INT 24
19239: EQUAL
19240: IFFALSE 19250
// sShovel := true ;
19242: LD_ADDR_EXP 118
19246: PUSH
19247: LD_INT 1
19249: ST_TO_ADDR
// if p3 = 25 then
19250: LD_VAR 0 3
19254: PUSH
19255: LD_INT 25
19257: EQUAL
19258: IFFALSE 19268
// sSheik := true ;
19260: LD_ADDR_EXP 119
19264: PUSH
19265: LD_INT 1
19267: ST_TO_ADDR
// if p3 = 26 then
19268: LD_VAR 0 3
19272: PUSH
19273: LD_INT 26
19275: EQUAL
19276: IFFALSE 19286
// sEarthquake := true ;
19278: LD_ADDR_EXP 121
19282: PUSH
19283: LD_INT 1
19285: ST_TO_ADDR
// if p3 = 27 then
19286: LD_VAR 0 3
19290: PUSH
19291: LD_INT 27
19293: EQUAL
19294: IFFALSE 19304
// sAI := true ;
19296: LD_ADDR_EXP 122
19300: PUSH
19301: LD_INT 1
19303: ST_TO_ADDR
// if p3 = 28 then
19304: LD_VAR 0 3
19308: PUSH
19309: LD_INT 28
19311: EQUAL
19312: IFFALSE 19322
// sCargo := true ;
19314: LD_ADDR_EXP 125
19318: PUSH
19319: LD_INT 1
19321: ST_TO_ADDR
// if p3 = 29 then
19322: LD_VAR 0 3
19326: PUSH
19327: LD_INT 29
19329: EQUAL
19330: IFFALSE 19340
// sDLaser := true ;
19332: LD_ADDR_EXP 126
19336: PUSH
19337: LD_INT 1
19339: ST_TO_ADDR
// if p3 = 30 then
19340: LD_VAR 0 3
19344: PUSH
19345: LD_INT 30
19347: EQUAL
19348: IFFALSE 19358
// sExchange := true ;
19350: LD_ADDR_EXP 127
19354: PUSH
19355: LD_INT 1
19357: ST_TO_ADDR
// if p3 = 31 then
19358: LD_VAR 0 3
19362: PUSH
19363: LD_INT 31
19365: EQUAL
19366: IFFALSE 19376
// sFac := true ;
19368: LD_ADDR_EXP 128
19372: PUSH
19373: LD_INT 1
19375: ST_TO_ADDR
// if p3 = 32 then
19376: LD_VAR 0 3
19380: PUSH
19381: LD_INT 32
19383: EQUAL
19384: IFFALSE 19394
// sPower := true ;
19386: LD_ADDR_EXP 129
19390: PUSH
19391: LD_INT 1
19393: ST_TO_ADDR
// if p3 = 33 then
19394: LD_VAR 0 3
19398: PUSH
19399: LD_INT 33
19401: EQUAL
19402: IFFALSE 19412
// sRandom := true ;
19404: LD_ADDR_EXP 130
19408: PUSH
19409: LD_INT 1
19411: ST_TO_ADDR
// if p3 = 34 then
19412: LD_VAR 0 3
19416: PUSH
19417: LD_INT 34
19419: EQUAL
19420: IFFALSE 19430
// sShield := true ;
19422: LD_ADDR_EXP 131
19426: PUSH
19427: LD_INT 1
19429: ST_TO_ADDR
// if p3 = 35 then
19430: LD_VAR 0 3
19434: PUSH
19435: LD_INT 35
19437: EQUAL
19438: IFFALSE 19448
// sTime := true ;
19440: LD_ADDR_EXP 132
19444: PUSH
19445: LD_INT 1
19447: ST_TO_ADDR
// if p3 = 36 then
19448: LD_VAR 0 3
19452: PUSH
19453: LD_INT 36
19455: EQUAL
19456: IFFALSE 19466
// sTools := true ;
19458: LD_ADDR_EXP 133
19462: PUSH
19463: LD_INT 1
19465: ST_TO_ADDR
// if p3 = 101 then
19466: LD_VAR 0 3
19470: PUSH
19471: LD_INT 101
19473: EQUAL
19474: IFFALSE 19484
// sSold := true ;
19476: LD_ADDR_EXP 98
19480: PUSH
19481: LD_INT 1
19483: ST_TO_ADDR
// if p3 = 102 then
19484: LD_VAR 0 3
19488: PUSH
19489: LD_INT 102
19491: EQUAL
19492: IFFALSE 19502
// sDiff := true ;
19494: LD_ADDR_EXP 99
19498: PUSH
19499: LD_INT 1
19501: ST_TO_ADDR
// if p3 = 103 then
19502: LD_VAR 0 3
19506: PUSH
19507: LD_INT 103
19509: EQUAL
19510: IFFALSE 19520
// sFog := true ;
19512: LD_ADDR_EXP 102
19516: PUSH
19517: LD_INT 1
19519: ST_TO_ADDR
// if p3 = 104 then
19520: LD_VAR 0 3
19524: PUSH
19525: LD_INT 104
19527: EQUAL
19528: IFFALSE 19538
// sReset := true ;
19530: LD_ADDR_EXP 103
19534: PUSH
19535: LD_INT 1
19537: ST_TO_ADDR
// if p3 = 105 then
19538: LD_VAR 0 3
19542: PUSH
19543: LD_INT 105
19545: EQUAL
19546: IFFALSE 19556
// sSun := true ;
19548: LD_ADDR_EXP 104
19552: PUSH
19553: LD_INT 1
19555: ST_TO_ADDR
// if p3 = 106 then
19556: LD_VAR 0 3
19560: PUSH
19561: LD_INT 106
19563: EQUAL
19564: IFFALSE 19574
// sTiger := true ;
19566: LD_ADDR_EXP 100
19570: PUSH
19571: LD_INT 1
19573: ST_TO_ADDR
// if p3 = 107 then
19574: LD_VAR 0 3
19578: PUSH
19579: LD_INT 107
19581: EQUAL
19582: IFFALSE 19592
// sBomb := true ;
19584: LD_ADDR_EXP 101
19588: PUSH
19589: LD_INT 1
19591: ST_TO_ADDR
// if p3 = 108 then
19592: LD_VAR 0 3
19596: PUSH
19597: LD_INT 108
19599: EQUAL
19600: IFFALSE 19610
// sWound := true ;
19602: LD_ADDR_EXP 109
19606: PUSH
19607: LD_INT 1
19609: ST_TO_ADDR
// if p3 = 109 then
19610: LD_VAR 0 3
19614: PUSH
19615: LD_INT 109
19617: EQUAL
19618: IFFALSE 19628
// sBetray := true ;
19620: LD_ADDR_EXP 113
19624: PUSH
19625: LD_INT 1
19627: ST_TO_ADDR
// if p3 = 110 then
19628: LD_VAR 0 3
19632: PUSH
19633: LD_INT 110
19635: EQUAL
19636: IFFALSE 19646
// sContamin := true ;
19638: LD_ADDR_EXP 114
19642: PUSH
19643: LD_INT 1
19645: ST_TO_ADDR
// if p3 = 111 then
19646: LD_VAR 0 3
19650: PUSH
19651: LD_INT 111
19653: EQUAL
19654: IFFALSE 19664
// sOil := true ;
19656: LD_ADDR_EXP 116
19660: PUSH
19661: LD_INT 1
19663: ST_TO_ADDR
// if p3 = 112 then
19664: LD_VAR 0 3
19668: PUSH
19669: LD_INT 112
19671: EQUAL
19672: IFFALSE 19682
// sStu := true ;
19674: LD_ADDR_EXP 120
19678: PUSH
19679: LD_INT 1
19681: ST_TO_ADDR
// if p3 = 113 then
19682: LD_VAR 0 3
19686: PUSH
19687: LD_INT 113
19689: EQUAL
19690: IFFALSE 19700
// sBazooka := true ;
19692: LD_ADDR_EXP 123
19696: PUSH
19697: LD_INT 1
19699: ST_TO_ADDR
// if p3 = 114 then
19700: LD_VAR 0 3
19704: PUSH
19705: LD_INT 114
19707: EQUAL
19708: IFFALSE 19718
// sMortar := true ;
19710: LD_ADDR_EXP 124
19714: PUSH
19715: LD_INT 1
19717: ST_TO_ADDR
// if p3 = 115 then
19718: LD_VAR 0 3
19722: PUSH
19723: LD_INT 115
19725: EQUAL
19726: IFFALSE 19736
// sRanger := true ;
19728: LD_ADDR_EXP 134
19732: PUSH
19733: LD_INT 1
19735: ST_TO_ADDR
// if p3 = 116 then
19736: LD_VAR 0 3
19740: PUSH
19741: LD_INT 116
19743: EQUAL
19744: IFFALSE 19754
// sComputer := true ;
19746: LD_ADDR_EXP 135
19750: PUSH
19751: LD_INT 1
19753: ST_TO_ADDR
// if p3 = 117 then
19754: LD_VAR 0 3
19758: PUSH
19759: LD_INT 117
19761: EQUAL
19762: IFFALSE 19772
// s30 := true ;
19764: LD_ADDR_EXP 136
19768: PUSH
19769: LD_INT 1
19771: ST_TO_ADDR
// if p3 = 118 then
19772: LD_VAR 0 3
19776: PUSH
19777: LD_INT 118
19779: EQUAL
19780: IFFALSE 19790
// s60 := true ;
19782: LD_ADDR_EXP 137
19786: PUSH
19787: LD_INT 1
19789: ST_TO_ADDR
// end ; if p2 = 101 then
19790: LD_VAR 0 2
19794: PUSH
19795: LD_INT 101
19797: EQUAL
19798: IFFALSE 19926
// begin case p3 of 1 :
19800: LD_VAR 0 3
19804: PUSH
19805: LD_INT 1
19807: DOUBLE
19808: EQUAL
19809: IFTRUE 19813
19811: GO 19820
19813: POP
// hHackUnlimitedResources ; 2 :
19814: CALL 31522 0 0
19818: GO 19926
19820: LD_INT 2
19822: DOUBLE
19823: EQUAL
19824: IFTRUE 19828
19826: GO 19835
19828: POP
// hHackSetLevel10 ; 3 :
19829: CALL 31655 0 0
19833: GO 19926
19835: LD_INT 3
19837: DOUBLE
19838: EQUAL
19839: IFTRUE 19843
19841: GO 19850
19843: POP
// hHackSetLevel10YourUnits ; 4 :
19844: CALL 31740 0 0
19848: GO 19926
19850: LD_INT 4
19852: DOUBLE
19853: EQUAL
19854: IFTRUE 19858
19856: GO 19865
19858: POP
// hHackInvincible ; 5 :
19859: CALL 32188 0 0
19863: GO 19926
19865: LD_INT 5
19867: DOUBLE
19868: EQUAL
19869: IFTRUE 19873
19871: GO 19880
19873: POP
// hHackInvisible ; 6 :
19874: CALL 32299 0 0
19878: GO 19926
19880: LD_INT 6
19882: DOUBLE
19883: EQUAL
19884: IFTRUE 19888
19886: GO 19895
19888: POP
// hHackChangeYourSide ; 7 :
19889: CALL 32356 0 0
19893: GO 19926
19895: LD_INT 7
19897: DOUBLE
19898: EQUAL
19899: IFTRUE 19903
19901: GO 19910
19903: POP
// hHackChangeUnitSide ; 8 :
19904: CALL 32398 0 0
19908: GO 19926
19910: LD_INT 8
19912: DOUBLE
19913: EQUAL
19914: IFTRUE 19918
19916: GO 19925
19918: POP
// hHackFog ; end ;
19919: CALL 32499 0 0
19923: GO 19926
19925: POP
// end ; end ;
19926: LD_VAR 0 7
19930: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19931: GO 19933
19933: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19934: LD_STRING initStreamRollete();
19936: PPUSH
19937: CALL_OW 559
// InitStreamMode ;
19941: CALL 19950 0 0
// DefineStreamItems ( ) ;
19945: CALL 20414 0 0
// end ;
19949: END
// function InitStreamMode ; begin
19950: LD_INT 0
19952: PPUSH
// streamModeActive := false ;
19953: LD_ADDR_EXP 81
19957: PUSH
19958: LD_INT 0
19960: ST_TO_ADDR
// normalCounter := 36 ;
19961: LD_ADDR_EXP 82
19965: PUSH
19966: LD_INT 36
19968: ST_TO_ADDR
// hardcoreCounter := 16 ;
19969: LD_ADDR_EXP 83
19973: PUSH
19974: LD_INT 16
19976: ST_TO_ADDR
// sRocket := false ;
19977: LD_ADDR_EXP 86
19981: PUSH
19982: LD_INT 0
19984: ST_TO_ADDR
// sSpeed := false ;
19985: LD_ADDR_EXP 85
19989: PUSH
19990: LD_INT 0
19992: ST_TO_ADDR
// sEngine := false ;
19993: LD_ADDR_EXP 87
19997: PUSH
19998: LD_INT 0
20000: ST_TO_ADDR
// sSpec := false ;
20001: LD_ADDR_EXP 84
20005: PUSH
20006: LD_INT 0
20008: ST_TO_ADDR
// sLevel := false ;
20009: LD_ADDR_EXP 88
20013: PUSH
20014: LD_INT 0
20016: ST_TO_ADDR
// sArmoury := false ;
20017: LD_ADDR_EXP 89
20021: PUSH
20022: LD_INT 0
20024: ST_TO_ADDR
// sRadar := false ;
20025: LD_ADDR_EXP 90
20029: PUSH
20030: LD_INT 0
20032: ST_TO_ADDR
// sBunker := false ;
20033: LD_ADDR_EXP 91
20037: PUSH
20038: LD_INT 0
20040: ST_TO_ADDR
// sHack := false ;
20041: LD_ADDR_EXP 92
20045: PUSH
20046: LD_INT 0
20048: ST_TO_ADDR
// sFire := false ;
20049: LD_ADDR_EXP 93
20053: PUSH
20054: LD_INT 0
20056: ST_TO_ADDR
// sRefresh := false ;
20057: LD_ADDR_EXP 94
20061: PUSH
20062: LD_INT 0
20064: ST_TO_ADDR
// sExp := false ;
20065: LD_ADDR_EXP 95
20069: PUSH
20070: LD_INT 0
20072: ST_TO_ADDR
// sDepot := false ;
20073: LD_ADDR_EXP 96
20077: PUSH
20078: LD_INT 0
20080: ST_TO_ADDR
// sFlag := false ;
20081: LD_ADDR_EXP 97
20085: PUSH
20086: LD_INT 0
20088: ST_TO_ADDR
// sKamikadze := false ;
20089: LD_ADDR_EXP 105
20093: PUSH
20094: LD_INT 0
20096: ST_TO_ADDR
// sTroll := false ;
20097: LD_ADDR_EXP 106
20101: PUSH
20102: LD_INT 0
20104: ST_TO_ADDR
// sSlow := false ;
20105: LD_ADDR_EXP 107
20109: PUSH
20110: LD_INT 0
20112: ST_TO_ADDR
// sLack := false ;
20113: LD_ADDR_EXP 108
20117: PUSH
20118: LD_INT 0
20120: ST_TO_ADDR
// sTank := false ;
20121: LD_ADDR_EXP 110
20125: PUSH
20126: LD_INT 0
20128: ST_TO_ADDR
// sRemote := false ;
20129: LD_ADDR_EXP 111
20133: PUSH
20134: LD_INT 0
20136: ST_TO_ADDR
// sPowell := false ;
20137: LD_ADDR_EXP 112
20141: PUSH
20142: LD_INT 0
20144: ST_TO_ADDR
// sTeleport := false ;
20145: LD_ADDR_EXP 115
20149: PUSH
20150: LD_INT 0
20152: ST_TO_ADDR
// sOilTower := false ;
20153: LD_ADDR_EXP 117
20157: PUSH
20158: LD_INT 0
20160: ST_TO_ADDR
// sShovel := false ;
20161: LD_ADDR_EXP 118
20165: PUSH
20166: LD_INT 0
20168: ST_TO_ADDR
// sSheik := false ;
20169: LD_ADDR_EXP 119
20173: PUSH
20174: LD_INT 0
20176: ST_TO_ADDR
// sEarthquake := false ;
20177: LD_ADDR_EXP 121
20181: PUSH
20182: LD_INT 0
20184: ST_TO_ADDR
// sAI := false ;
20185: LD_ADDR_EXP 122
20189: PUSH
20190: LD_INT 0
20192: ST_TO_ADDR
// sCargo := false ;
20193: LD_ADDR_EXP 125
20197: PUSH
20198: LD_INT 0
20200: ST_TO_ADDR
// sDLaser := false ;
20201: LD_ADDR_EXP 126
20205: PUSH
20206: LD_INT 0
20208: ST_TO_ADDR
// sExchange := false ;
20209: LD_ADDR_EXP 127
20213: PUSH
20214: LD_INT 0
20216: ST_TO_ADDR
// sFac := false ;
20217: LD_ADDR_EXP 128
20221: PUSH
20222: LD_INT 0
20224: ST_TO_ADDR
// sPower := false ;
20225: LD_ADDR_EXP 129
20229: PUSH
20230: LD_INT 0
20232: ST_TO_ADDR
// sRandom := false ;
20233: LD_ADDR_EXP 130
20237: PUSH
20238: LD_INT 0
20240: ST_TO_ADDR
// sShield := false ;
20241: LD_ADDR_EXP 131
20245: PUSH
20246: LD_INT 0
20248: ST_TO_ADDR
// sTime := false ;
20249: LD_ADDR_EXP 132
20253: PUSH
20254: LD_INT 0
20256: ST_TO_ADDR
// sTools := false ;
20257: LD_ADDR_EXP 133
20261: PUSH
20262: LD_INT 0
20264: ST_TO_ADDR
// sSold := false ;
20265: LD_ADDR_EXP 98
20269: PUSH
20270: LD_INT 0
20272: ST_TO_ADDR
// sDiff := false ;
20273: LD_ADDR_EXP 99
20277: PUSH
20278: LD_INT 0
20280: ST_TO_ADDR
// sFog := false ;
20281: LD_ADDR_EXP 102
20285: PUSH
20286: LD_INT 0
20288: ST_TO_ADDR
// sReset := false ;
20289: LD_ADDR_EXP 103
20293: PUSH
20294: LD_INT 0
20296: ST_TO_ADDR
// sSun := false ;
20297: LD_ADDR_EXP 104
20301: PUSH
20302: LD_INT 0
20304: ST_TO_ADDR
// sTiger := false ;
20305: LD_ADDR_EXP 100
20309: PUSH
20310: LD_INT 0
20312: ST_TO_ADDR
// sBomb := false ;
20313: LD_ADDR_EXP 101
20317: PUSH
20318: LD_INT 0
20320: ST_TO_ADDR
// sWound := false ;
20321: LD_ADDR_EXP 109
20325: PUSH
20326: LD_INT 0
20328: ST_TO_ADDR
// sBetray := false ;
20329: LD_ADDR_EXP 113
20333: PUSH
20334: LD_INT 0
20336: ST_TO_ADDR
// sContamin := false ;
20337: LD_ADDR_EXP 114
20341: PUSH
20342: LD_INT 0
20344: ST_TO_ADDR
// sOil := false ;
20345: LD_ADDR_EXP 116
20349: PUSH
20350: LD_INT 0
20352: ST_TO_ADDR
// sStu := false ;
20353: LD_ADDR_EXP 120
20357: PUSH
20358: LD_INT 0
20360: ST_TO_ADDR
// sBazooka := false ;
20361: LD_ADDR_EXP 123
20365: PUSH
20366: LD_INT 0
20368: ST_TO_ADDR
// sMortar := false ;
20369: LD_ADDR_EXP 124
20373: PUSH
20374: LD_INT 0
20376: ST_TO_ADDR
// sRanger := false ;
20377: LD_ADDR_EXP 134
20381: PUSH
20382: LD_INT 0
20384: ST_TO_ADDR
// sComputer := false ;
20385: LD_ADDR_EXP 135
20389: PUSH
20390: LD_INT 0
20392: ST_TO_ADDR
// s30 := false ;
20393: LD_ADDR_EXP 136
20397: PUSH
20398: LD_INT 0
20400: ST_TO_ADDR
// s60 := false ;
20401: LD_ADDR_EXP 137
20405: PUSH
20406: LD_INT 0
20408: ST_TO_ADDR
// end ;
20409: LD_VAR 0 1
20413: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20414: LD_INT 0
20416: PPUSH
20417: PPUSH
20418: PPUSH
20419: PPUSH
20420: PPUSH
// result := [ ] ;
20421: LD_ADDR_VAR 0 1
20425: PUSH
20426: EMPTY
20427: ST_TO_ADDR
// if campaign_id = 1 then
20428: LD_OWVAR 69
20432: PUSH
20433: LD_INT 1
20435: EQUAL
20436: IFFALSE 23602
// begin case mission_number of 1 :
20438: LD_OWVAR 70
20442: PUSH
20443: LD_INT 1
20445: DOUBLE
20446: EQUAL
20447: IFTRUE 20451
20449: GO 20527
20451: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20452: LD_ADDR_VAR 0 1
20456: PUSH
20457: LD_INT 2
20459: PUSH
20460: LD_INT 4
20462: PUSH
20463: LD_INT 11
20465: PUSH
20466: LD_INT 12
20468: PUSH
20469: LD_INT 15
20471: PUSH
20472: LD_INT 16
20474: PUSH
20475: LD_INT 22
20477: PUSH
20478: LD_INT 23
20480: PUSH
20481: LD_INT 26
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 101
20497: PUSH
20498: LD_INT 102
20500: PUSH
20501: LD_INT 106
20503: PUSH
20504: LD_INT 116
20506: PUSH
20507: LD_INT 117
20509: PUSH
20510: LD_INT 118
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: ST_TO_ADDR
20525: GO 23600
20527: LD_INT 2
20529: DOUBLE
20530: EQUAL
20531: IFTRUE 20535
20533: GO 20619
20535: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20536: LD_ADDR_VAR 0 1
20540: PUSH
20541: LD_INT 2
20543: PUSH
20544: LD_INT 4
20546: PUSH
20547: LD_INT 11
20549: PUSH
20550: LD_INT 12
20552: PUSH
20553: LD_INT 15
20555: PUSH
20556: LD_INT 16
20558: PUSH
20559: LD_INT 22
20561: PUSH
20562: LD_INT 23
20564: PUSH
20565: LD_INT 26
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 101
20581: PUSH
20582: LD_INT 102
20584: PUSH
20585: LD_INT 105
20587: PUSH
20588: LD_INT 106
20590: PUSH
20591: LD_INT 108
20593: PUSH
20594: LD_INT 116
20596: PUSH
20597: LD_INT 117
20599: PUSH
20600: LD_INT 118
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: ST_TO_ADDR
20617: GO 23600
20619: LD_INT 3
20621: DOUBLE
20622: EQUAL
20623: IFTRUE 20627
20625: GO 20715
20627: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20628: LD_ADDR_VAR 0 1
20632: PUSH
20633: LD_INT 2
20635: PUSH
20636: LD_INT 4
20638: PUSH
20639: LD_INT 5
20641: PUSH
20642: LD_INT 11
20644: PUSH
20645: LD_INT 12
20647: PUSH
20648: LD_INT 15
20650: PUSH
20651: LD_INT 16
20653: PUSH
20654: LD_INT 22
20656: PUSH
20657: LD_INT 26
20659: PUSH
20660: LD_INT 36
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 101
20677: PUSH
20678: LD_INT 102
20680: PUSH
20681: LD_INT 105
20683: PUSH
20684: LD_INT 106
20686: PUSH
20687: LD_INT 108
20689: PUSH
20690: LD_INT 116
20692: PUSH
20693: LD_INT 117
20695: PUSH
20696: LD_INT 118
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: ST_TO_ADDR
20713: GO 23600
20715: LD_INT 4
20717: DOUBLE
20718: EQUAL
20719: IFTRUE 20723
20721: GO 20819
20723: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20724: LD_ADDR_VAR 0 1
20728: PUSH
20729: LD_INT 2
20731: PUSH
20732: LD_INT 4
20734: PUSH
20735: LD_INT 5
20737: PUSH
20738: LD_INT 8
20740: PUSH
20741: LD_INT 11
20743: PUSH
20744: LD_INT 12
20746: PUSH
20747: LD_INT 15
20749: PUSH
20750: LD_INT 16
20752: PUSH
20753: LD_INT 22
20755: PUSH
20756: LD_INT 23
20758: PUSH
20759: LD_INT 26
20761: PUSH
20762: LD_INT 36
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 101
20781: PUSH
20782: LD_INT 102
20784: PUSH
20785: LD_INT 105
20787: PUSH
20788: LD_INT 106
20790: PUSH
20791: LD_INT 108
20793: PUSH
20794: LD_INT 116
20796: PUSH
20797: LD_INT 117
20799: PUSH
20800: LD_INT 118
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: ST_TO_ADDR
20817: GO 23600
20819: LD_INT 5
20821: DOUBLE
20822: EQUAL
20823: IFTRUE 20827
20825: GO 20939
20827: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20828: LD_ADDR_VAR 0 1
20832: PUSH
20833: LD_INT 2
20835: PUSH
20836: LD_INT 4
20838: PUSH
20839: LD_INT 5
20841: PUSH
20842: LD_INT 6
20844: PUSH
20845: LD_INT 8
20847: PUSH
20848: LD_INT 11
20850: PUSH
20851: LD_INT 12
20853: PUSH
20854: LD_INT 15
20856: PUSH
20857: LD_INT 16
20859: PUSH
20860: LD_INT 22
20862: PUSH
20863: LD_INT 23
20865: PUSH
20866: LD_INT 25
20868: PUSH
20869: LD_INT 26
20871: PUSH
20872: LD_INT 36
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 101
20893: PUSH
20894: LD_INT 102
20896: PUSH
20897: LD_INT 105
20899: PUSH
20900: LD_INT 106
20902: PUSH
20903: LD_INT 108
20905: PUSH
20906: LD_INT 109
20908: PUSH
20909: LD_INT 112
20911: PUSH
20912: LD_INT 116
20914: PUSH
20915: LD_INT 117
20917: PUSH
20918: LD_INT 118
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: ST_TO_ADDR
20937: GO 23600
20939: LD_INT 6
20941: DOUBLE
20942: EQUAL
20943: IFTRUE 20947
20945: GO 21079
20947: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20948: LD_ADDR_VAR 0 1
20952: PUSH
20953: LD_INT 2
20955: PUSH
20956: LD_INT 4
20958: PUSH
20959: LD_INT 5
20961: PUSH
20962: LD_INT 6
20964: PUSH
20965: LD_INT 8
20967: PUSH
20968: LD_INT 11
20970: PUSH
20971: LD_INT 12
20973: PUSH
20974: LD_INT 15
20976: PUSH
20977: LD_INT 16
20979: PUSH
20980: LD_INT 20
20982: PUSH
20983: LD_INT 21
20985: PUSH
20986: LD_INT 22
20988: PUSH
20989: LD_INT 23
20991: PUSH
20992: LD_INT 25
20994: PUSH
20995: LD_INT 26
20997: PUSH
20998: LD_INT 30
21000: PUSH
21001: LD_INT 31
21003: PUSH
21004: LD_INT 32
21006: PUSH
21007: LD_INT 36
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 101
21033: PUSH
21034: LD_INT 102
21036: PUSH
21037: LD_INT 105
21039: PUSH
21040: LD_INT 106
21042: PUSH
21043: LD_INT 108
21045: PUSH
21046: LD_INT 109
21048: PUSH
21049: LD_INT 112
21051: PUSH
21052: LD_INT 116
21054: PUSH
21055: LD_INT 117
21057: PUSH
21058: LD_INT 118
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: ST_TO_ADDR
21077: GO 23600
21079: LD_INT 7
21081: DOUBLE
21082: EQUAL
21083: IFTRUE 21087
21085: GO 21199
21087: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21088: LD_ADDR_VAR 0 1
21092: PUSH
21093: LD_INT 2
21095: PUSH
21096: LD_INT 4
21098: PUSH
21099: LD_INT 5
21101: PUSH
21102: LD_INT 7
21104: PUSH
21105: LD_INT 11
21107: PUSH
21108: LD_INT 12
21110: PUSH
21111: LD_INT 15
21113: PUSH
21114: LD_INT 16
21116: PUSH
21117: LD_INT 20
21119: PUSH
21120: LD_INT 21
21122: PUSH
21123: LD_INT 22
21125: PUSH
21126: LD_INT 23
21128: PUSH
21129: LD_INT 25
21131: PUSH
21132: LD_INT 26
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 101
21153: PUSH
21154: LD_INT 102
21156: PUSH
21157: LD_INT 103
21159: PUSH
21160: LD_INT 105
21162: PUSH
21163: LD_INT 106
21165: PUSH
21166: LD_INT 108
21168: PUSH
21169: LD_INT 112
21171: PUSH
21172: LD_INT 116
21174: PUSH
21175: LD_INT 117
21177: PUSH
21178: LD_INT 118
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: ST_TO_ADDR
21197: GO 23600
21199: LD_INT 8
21201: DOUBLE
21202: EQUAL
21203: IFTRUE 21207
21205: GO 21347
21207: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21208: LD_ADDR_VAR 0 1
21212: PUSH
21213: LD_INT 2
21215: PUSH
21216: LD_INT 4
21218: PUSH
21219: LD_INT 5
21221: PUSH
21222: LD_INT 6
21224: PUSH
21225: LD_INT 7
21227: PUSH
21228: LD_INT 8
21230: PUSH
21231: LD_INT 11
21233: PUSH
21234: LD_INT 12
21236: PUSH
21237: LD_INT 15
21239: PUSH
21240: LD_INT 16
21242: PUSH
21243: LD_INT 20
21245: PUSH
21246: LD_INT 21
21248: PUSH
21249: LD_INT 22
21251: PUSH
21252: LD_INT 23
21254: PUSH
21255: LD_INT 25
21257: PUSH
21258: LD_INT 26
21260: PUSH
21261: LD_INT 30
21263: PUSH
21264: LD_INT 31
21266: PUSH
21267: LD_INT 32
21269: PUSH
21270: LD_INT 36
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 101
21297: PUSH
21298: LD_INT 102
21300: PUSH
21301: LD_INT 103
21303: PUSH
21304: LD_INT 105
21306: PUSH
21307: LD_INT 106
21309: PUSH
21310: LD_INT 108
21312: PUSH
21313: LD_INT 109
21315: PUSH
21316: LD_INT 112
21318: PUSH
21319: LD_INT 116
21321: PUSH
21322: LD_INT 117
21324: PUSH
21325: LD_INT 118
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: ST_TO_ADDR
21345: GO 23600
21347: LD_INT 9
21349: DOUBLE
21350: EQUAL
21351: IFTRUE 21355
21353: GO 21503
21355: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21356: LD_ADDR_VAR 0 1
21360: PUSH
21361: LD_INT 2
21363: PUSH
21364: LD_INT 4
21366: PUSH
21367: LD_INT 5
21369: PUSH
21370: LD_INT 6
21372: PUSH
21373: LD_INT 7
21375: PUSH
21376: LD_INT 8
21378: PUSH
21379: LD_INT 11
21381: PUSH
21382: LD_INT 12
21384: PUSH
21385: LD_INT 15
21387: PUSH
21388: LD_INT 16
21390: PUSH
21391: LD_INT 20
21393: PUSH
21394: LD_INT 21
21396: PUSH
21397: LD_INT 22
21399: PUSH
21400: LD_INT 23
21402: PUSH
21403: LD_INT 25
21405: PUSH
21406: LD_INT 26
21408: PUSH
21409: LD_INT 28
21411: PUSH
21412: LD_INT 30
21414: PUSH
21415: LD_INT 31
21417: PUSH
21418: LD_INT 32
21420: PUSH
21421: LD_INT 36
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 101
21449: PUSH
21450: LD_INT 102
21452: PUSH
21453: LD_INT 103
21455: PUSH
21456: LD_INT 105
21458: PUSH
21459: LD_INT 106
21461: PUSH
21462: LD_INT 108
21464: PUSH
21465: LD_INT 109
21467: PUSH
21468: LD_INT 112
21470: PUSH
21471: LD_INT 114
21473: PUSH
21474: LD_INT 116
21476: PUSH
21477: LD_INT 117
21479: PUSH
21480: LD_INT 118
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: ST_TO_ADDR
21501: GO 23600
21503: LD_INT 10
21505: DOUBLE
21506: EQUAL
21507: IFTRUE 21511
21509: GO 21707
21511: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21512: LD_ADDR_VAR 0 1
21516: PUSH
21517: LD_INT 2
21519: PUSH
21520: LD_INT 4
21522: PUSH
21523: LD_INT 5
21525: PUSH
21526: LD_INT 6
21528: PUSH
21529: LD_INT 7
21531: PUSH
21532: LD_INT 8
21534: PUSH
21535: LD_INT 9
21537: PUSH
21538: LD_INT 10
21540: PUSH
21541: LD_INT 11
21543: PUSH
21544: LD_INT 12
21546: PUSH
21547: LD_INT 13
21549: PUSH
21550: LD_INT 14
21552: PUSH
21553: LD_INT 15
21555: PUSH
21556: LD_INT 16
21558: PUSH
21559: LD_INT 17
21561: PUSH
21562: LD_INT 18
21564: PUSH
21565: LD_INT 19
21567: PUSH
21568: LD_INT 20
21570: PUSH
21571: LD_INT 21
21573: PUSH
21574: LD_INT 22
21576: PUSH
21577: LD_INT 23
21579: PUSH
21580: LD_INT 24
21582: PUSH
21583: LD_INT 25
21585: PUSH
21586: LD_INT 26
21588: PUSH
21589: LD_INT 28
21591: PUSH
21592: LD_INT 30
21594: PUSH
21595: LD_INT 31
21597: PUSH
21598: LD_INT 32
21600: PUSH
21601: LD_INT 36
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 101
21637: PUSH
21638: LD_INT 102
21640: PUSH
21641: LD_INT 103
21643: PUSH
21644: LD_INT 104
21646: PUSH
21647: LD_INT 105
21649: PUSH
21650: LD_INT 106
21652: PUSH
21653: LD_INT 107
21655: PUSH
21656: LD_INT 108
21658: PUSH
21659: LD_INT 109
21661: PUSH
21662: LD_INT 110
21664: PUSH
21665: LD_INT 111
21667: PUSH
21668: LD_INT 112
21670: PUSH
21671: LD_INT 114
21673: PUSH
21674: LD_INT 116
21676: PUSH
21677: LD_INT 117
21679: PUSH
21680: LD_INT 118
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: ST_TO_ADDR
21705: GO 23600
21707: LD_INT 11
21709: DOUBLE
21710: EQUAL
21711: IFTRUE 21715
21713: GO 21919
21715: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21716: LD_ADDR_VAR 0 1
21720: PUSH
21721: LD_INT 2
21723: PUSH
21724: LD_INT 3
21726: PUSH
21727: LD_INT 4
21729: PUSH
21730: LD_INT 5
21732: PUSH
21733: LD_INT 6
21735: PUSH
21736: LD_INT 7
21738: PUSH
21739: LD_INT 8
21741: PUSH
21742: LD_INT 9
21744: PUSH
21745: LD_INT 10
21747: PUSH
21748: LD_INT 11
21750: PUSH
21751: LD_INT 12
21753: PUSH
21754: LD_INT 13
21756: PUSH
21757: LD_INT 14
21759: PUSH
21760: LD_INT 15
21762: PUSH
21763: LD_INT 16
21765: PUSH
21766: LD_INT 17
21768: PUSH
21769: LD_INT 18
21771: PUSH
21772: LD_INT 19
21774: PUSH
21775: LD_INT 20
21777: PUSH
21778: LD_INT 21
21780: PUSH
21781: LD_INT 22
21783: PUSH
21784: LD_INT 23
21786: PUSH
21787: LD_INT 24
21789: PUSH
21790: LD_INT 25
21792: PUSH
21793: LD_INT 26
21795: PUSH
21796: LD_INT 28
21798: PUSH
21799: LD_INT 30
21801: PUSH
21802: LD_INT 31
21804: PUSH
21805: LD_INT 32
21807: PUSH
21808: LD_INT 34
21810: PUSH
21811: LD_INT 36
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 101
21849: PUSH
21850: LD_INT 102
21852: PUSH
21853: LD_INT 103
21855: PUSH
21856: LD_INT 104
21858: PUSH
21859: LD_INT 105
21861: PUSH
21862: LD_INT 106
21864: PUSH
21865: LD_INT 107
21867: PUSH
21868: LD_INT 108
21870: PUSH
21871: LD_INT 109
21873: PUSH
21874: LD_INT 110
21876: PUSH
21877: LD_INT 111
21879: PUSH
21880: LD_INT 112
21882: PUSH
21883: LD_INT 114
21885: PUSH
21886: LD_INT 116
21888: PUSH
21889: LD_INT 117
21891: PUSH
21892: LD_INT 118
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: ST_TO_ADDR
21917: GO 23600
21919: LD_INT 12
21921: DOUBLE
21922: EQUAL
21923: IFTRUE 21927
21925: GO 22147
21927: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21928: LD_ADDR_VAR 0 1
21932: PUSH
21933: LD_INT 1
21935: PUSH
21936: LD_INT 2
21938: PUSH
21939: LD_INT 3
21941: PUSH
21942: LD_INT 4
21944: PUSH
21945: LD_INT 5
21947: PUSH
21948: LD_INT 6
21950: PUSH
21951: LD_INT 7
21953: PUSH
21954: LD_INT 8
21956: PUSH
21957: LD_INT 9
21959: PUSH
21960: LD_INT 10
21962: PUSH
21963: LD_INT 11
21965: PUSH
21966: LD_INT 12
21968: PUSH
21969: LD_INT 13
21971: PUSH
21972: LD_INT 14
21974: PUSH
21975: LD_INT 15
21977: PUSH
21978: LD_INT 16
21980: PUSH
21981: LD_INT 17
21983: PUSH
21984: LD_INT 18
21986: PUSH
21987: LD_INT 19
21989: PUSH
21990: LD_INT 20
21992: PUSH
21993: LD_INT 21
21995: PUSH
21996: LD_INT 22
21998: PUSH
21999: LD_INT 23
22001: PUSH
22002: LD_INT 24
22004: PUSH
22005: LD_INT 25
22007: PUSH
22008: LD_INT 26
22010: PUSH
22011: LD_INT 27
22013: PUSH
22014: LD_INT 28
22016: PUSH
22017: LD_INT 30
22019: PUSH
22020: LD_INT 31
22022: PUSH
22023: LD_INT 32
22025: PUSH
22026: LD_INT 33
22028: PUSH
22029: LD_INT 34
22031: PUSH
22032: LD_INT 36
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 101
22073: PUSH
22074: LD_INT 102
22076: PUSH
22077: LD_INT 103
22079: PUSH
22080: LD_INT 104
22082: PUSH
22083: LD_INT 105
22085: PUSH
22086: LD_INT 106
22088: PUSH
22089: LD_INT 107
22091: PUSH
22092: LD_INT 108
22094: PUSH
22095: LD_INT 109
22097: PUSH
22098: LD_INT 110
22100: PUSH
22101: LD_INT 111
22103: PUSH
22104: LD_INT 112
22106: PUSH
22107: LD_INT 113
22109: PUSH
22110: LD_INT 114
22112: PUSH
22113: LD_INT 116
22115: PUSH
22116: LD_INT 117
22118: PUSH
22119: LD_INT 118
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: ST_TO_ADDR
22145: GO 23600
22147: LD_INT 13
22149: DOUBLE
22150: EQUAL
22151: IFTRUE 22155
22153: GO 22363
22155: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22156: LD_ADDR_VAR 0 1
22160: PUSH
22161: LD_INT 1
22163: PUSH
22164: LD_INT 2
22166: PUSH
22167: LD_INT 3
22169: PUSH
22170: LD_INT 4
22172: PUSH
22173: LD_INT 5
22175: PUSH
22176: LD_INT 8
22178: PUSH
22179: LD_INT 9
22181: PUSH
22182: LD_INT 10
22184: PUSH
22185: LD_INT 11
22187: PUSH
22188: LD_INT 12
22190: PUSH
22191: LD_INT 14
22193: PUSH
22194: LD_INT 15
22196: PUSH
22197: LD_INT 16
22199: PUSH
22200: LD_INT 17
22202: PUSH
22203: LD_INT 18
22205: PUSH
22206: LD_INT 19
22208: PUSH
22209: LD_INT 20
22211: PUSH
22212: LD_INT 21
22214: PUSH
22215: LD_INT 22
22217: PUSH
22218: LD_INT 23
22220: PUSH
22221: LD_INT 24
22223: PUSH
22224: LD_INT 25
22226: PUSH
22227: LD_INT 26
22229: PUSH
22230: LD_INT 27
22232: PUSH
22233: LD_INT 28
22235: PUSH
22236: LD_INT 30
22238: PUSH
22239: LD_INT 31
22241: PUSH
22242: LD_INT 32
22244: PUSH
22245: LD_INT 33
22247: PUSH
22248: LD_INT 34
22250: PUSH
22251: LD_INT 36
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 101
22289: PUSH
22290: LD_INT 102
22292: PUSH
22293: LD_INT 103
22295: PUSH
22296: LD_INT 104
22298: PUSH
22299: LD_INT 105
22301: PUSH
22302: LD_INT 106
22304: PUSH
22305: LD_INT 107
22307: PUSH
22308: LD_INT 108
22310: PUSH
22311: LD_INT 109
22313: PUSH
22314: LD_INT 110
22316: PUSH
22317: LD_INT 111
22319: PUSH
22320: LD_INT 112
22322: PUSH
22323: LD_INT 113
22325: PUSH
22326: LD_INT 114
22328: PUSH
22329: LD_INT 116
22331: PUSH
22332: LD_INT 117
22334: PUSH
22335: LD_INT 118
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: ST_TO_ADDR
22361: GO 23600
22363: LD_INT 14
22365: DOUBLE
22366: EQUAL
22367: IFTRUE 22371
22369: GO 22595
22371: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22372: LD_ADDR_VAR 0 1
22376: PUSH
22377: LD_INT 1
22379: PUSH
22380: LD_INT 2
22382: PUSH
22383: LD_INT 3
22385: PUSH
22386: LD_INT 4
22388: PUSH
22389: LD_INT 5
22391: PUSH
22392: LD_INT 6
22394: PUSH
22395: LD_INT 7
22397: PUSH
22398: LD_INT 8
22400: PUSH
22401: LD_INT 9
22403: PUSH
22404: LD_INT 10
22406: PUSH
22407: LD_INT 11
22409: PUSH
22410: LD_INT 12
22412: PUSH
22413: LD_INT 13
22415: PUSH
22416: LD_INT 14
22418: PUSH
22419: LD_INT 15
22421: PUSH
22422: LD_INT 16
22424: PUSH
22425: LD_INT 17
22427: PUSH
22428: LD_INT 18
22430: PUSH
22431: LD_INT 19
22433: PUSH
22434: LD_INT 20
22436: PUSH
22437: LD_INT 21
22439: PUSH
22440: LD_INT 22
22442: PUSH
22443: LD_INT 23
22445: PUSH
22446: LD_INT 24
22448: PUSH
22449: LD_INT 25
22451: PUSH
22452: LD_INT 26
22454: PUSH
22455: LD_INT 27
22457: PUSH
22458: LD_INT 28
22460: PUSH
22461: LD_INT 29
22463: PUSH
22464: LD_INT 30
22466: PUSH
22467: LD_INT 31
22469: PUSH
22470: LD_INT 32
22472: PUSH
22473: LD_INT 33
22475: PUSH
22476: LD_INT 34
22478: PUSH
22479: LD_INT 36
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 101
22521: PUSH
22522: LD_INT 102
22524: PUSH
22525: LD_INT 103
22527: PUSH
22528: LD_INT 104
22530: PUSH
22531: LD_INT 105
22533: PUSH
22534: LD_INT 106
22536: PUSH
22537: LD_INT 107
22539: PUSH
22540: LD_INT 108
22542: PUSH
22543: LD_INT 109
22545: PUSH
22546: LD_INT 110
22548: PUSH
22549: LD_INT 111
22551: PUSH
22552: LD_INT 112
22554: PUSH
22555: LD_INT 113
22557: PUSH
22558: LD_INT 114
22560: PUSH
22561: LD_INT 116
22563: PUSH
22564: LD_INT 117
22566: PUSH
22567: LD_INT 118
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: ST_TO_ADDR
22593: GO 23600
22595: LD_INT 15
22597: DOUBLE
22598: EQUAL
22599: IFTRUE 22603
22601: GO 22827
22603: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22604: LD_ADDR_VAR 0 1
22608: PUSH
22609: LD_INT 1
22611: PUSH
22612: LD_INT 2
22614: PUSH
22615: LD_INT 3
22617: PUSH
22618: LD_INT 4
22620: PUSH
22621: LD_INT 5
22623: PUSH
22624: LD_INT 6
22626: PUSH
22627: LD_INT 7
22629: PUSH
22630: LD_INT 8
22632: PUSH
22633: LD_INT 9
22635: PUSH
22636: LD_INT 10
22638: PUSH
22639: LD_INT 11
22641: PUSH
22642: LD_INT 12
22644: PUSH
22645: LD_INT 13
22647: PUSH
22648: LD_INT 14
22650: PUSH
22651: LD_INT 15
22653: PUSH
22654: LD_INT 16
22656: PUSH
22657: LD_INT 17
22659: PUSH
22660: LD_INT 18
22662: PUSH
22663: LD_INT 19
22665: PUSH
22666: LD_INT 20
22668: PUSH
22669: LD_INT 21
22671: PUSH
22672: LD_INT 22
22674: PUSH
22675: LD_INT 23
22677: PUSH
22678: LD_INT 24
22680: PUSH
22681: LD_INT 25
22683: PUSH
22684: LD_INT 26
22686: PUSH
22687: LD_INT 27
22689: PUSH
22690: LD_INT 28
22692: PUSH
22693: LD_INT 29
22695: PUSH
22696: LD_INT 30
22698: PUSH
22699: LD_INT 31
22701: PUSH
22702: LD_INT 32
22704: PUSH
22705: LD_INT 33
22707: PUSH
22708: LD_INT 34
22710: PUSH
22711: LD_INT 36
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 101
22753: PUSH
22754: LD_INT 102
22756: PUSH
22757: LD_INT 103
22759: PUSH
22760: LD_INT 104
22762: PUSH
22763: LD_INT 105
22765: PUSH
22766: LD_INT 106
22768: PUSH
22769: LD_INT 107
22771: PUSH
22772: LD_INT 108
22774: PUSH
22775: LD_INT 109
22777: PUSH
22778: LD_INT 110
22780: PUSH
22781: LD_INT 111
22783: PUSH
22784: LD_INT 112
22786: PUSH
22787: LD_INT 113
22789: PUSH
22790: LD_INT 114
22792: PUSH
22793: LD_INT 116
22795: PUSH
22796: LD_INT 117
22798: PUSH
22799: LD_INT 118
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: ST_TO_ADDR
22825: GO 23600
22827: LD_INT 16
22829: DOUBLE
22830: EQUAL
22831: IFTRUE 22835
22833: GO 22971
22835: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22836: LD_ADDR_VAR 0 1
22840: PUSH
22841: LD_INT 2
22843: PUSH
22844: LD_INT 4
22846: PUSH
22847: LD_INT 5
22849: PUSH
22850: LD_INT 7
22852: PUSH
22853: LD_INT 11
22855: PUSH
22856: LD_INT 12
22858: PUSH
22859: LD_INT 15
22861: PUSH
22862: LD_INT 16
22864: PUSH
22865: LD_INT 20
22867: PUSH
22868: LD_INT 21
22870: PUSH
22871: LD_INT 22
22873: PUSH
22874: LD_INT 23
22876: PUSH
22877: LD_INT 25
22879: PUSH
22880: LD_INT 26
22882: PUSH
22883: LD_INT 30
22885: PUSH
22886: LD_INT 31
22888: PUSH
22889: LD_INT 32
22891: PUSH
22892: LD_INT 33
22894: PUSH
22895: LD_INT 34
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 101
22921: PUSH
22922: LD_INT 102
22924: PUSH
22925: LD_INT 103
22927: PUSH
22928: LD_INT 106
22930: PUSH
22931: LD_INT 108
22933: PUSH
22934: LD_INT 112
22936: PUSH
22937: LD_INT 113
22939: PUSH
22940: LD_INT 114
22942: PUSH
22943: LD_INT 116
22945: PUSH
22946: LD_INT 117
22948: PUSH
22949: LD_INT 118
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: ST_TO_ADDR
22969: GO 23600
22971: LD_INT 17
22973: DOUBLE
22974: EQUAL
22975: IFTRUE 22979
22977: GO 23203
22979: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22980: LD_ADDR_VAR 0 1
22984: PUSH
22985: LD_INT 1
22987: PUSH
22988: LD_INT 2
22990: PUSH
22991: LD_INT 3
22993: PUSH
22994: LD_INT 4
22996: PUSH
22997: LD_INT 5
22999: PUSH
23000: LD_INT 6
23002: PUSH
23003: LD_INT 7
23005: PUSH
23006: LD_INT 8
23008: PUSH
23009: LD_INT 9
23011: PUSH
23012: LD_INT 10
23014: PUSH
23015: LD_INT 11
23017: PUSH
23018: LD_INT 12
23020: PUSH
23021: LD_INT 13
23023: PUSH
23024: LD_INT 14
23026: PUSH
23027: LD_INT 15
23029: PUSH
23030: LD_INT 16
23032: PUSH
23033: LD_INT 17
23035: PUSH
23036: LD_INT 18
23038: PUSH
23039: LD_INT 19
23041: PUSH
23042: LD_INT 20
23044: PUSH
23045: LD_INT 21
23047: PUSH
23048: LD_INT 22
23050: PUSH
23051: LD_INT 23
23053: PUSH
23054: LD_INT 24
23056: PUSH
23057: LD_INT 25
23059: PUSH
23060: LD_INT 26
23062: PUSH
23063: LD_INT 27
23065: PUSH
23066: LD_INT 28
23068: PUSH
23069: LD_INT 29
23071: PUSH
23072: LD_INT 30
23074: PUSH
23075: LD_INT 31
23077: PUSH
23078: LD_INT 32
23080: PUSH
23081: LD_INT 33
23083: PUSH
23084: LD_INT 34
23086: PUSH
23087: LD_INT 36
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 101
23129: PUSH
23130: LD_INT 102
23132: PUSH
23133: LD_INT 103
23135: PUSH
23136: LD_INT 104
23138: PUSH
23139: LD_INT 105
23141: PUSH
23142: LD_INT 106
23144: PUSH
23145: LD_INT 107
23147: PUSH
23148: LD_INT 108
23150: PUSH
23151: LD_INT 109
23153: PUSH
23154: LD_INT 110
23156: PUSH
23157: LD_INT 111
23159: PUSH
23160: LD_INT 112
23162: PUSH
23163: LD_INT 113
23165: PUSH
23166: LD_INT 114
23168: PUSH
23169: LD_INT 116
23171: PUSH
23172: LD_INT 117
23174: PUSH
23175: LD_INT 118
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: ST_TO_ADDR
23201: GO 23600
23203: LD_INT 18
23205: DOUBLE
23206: EQUAL
23207: IFTRUE 23211
23209: GO 23359
23211: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23212: LD_ADDR_VAR 0 1
23216: PUSH
23217: LD_INT 2
23219: PUSH
23220: LD_INT 4
23222: PUSH
23223: LD_INT 5
23225: PUSH
23226: LD_INT 7
23228: PUSH
23229: LD_INT 11
23231: PUSH
23232: LD_INT 12
23234: PUSH
23235: LD_INT 15
23237: PUSH
23238: LD_INT 16
23240: PUSH
23241: LD_INT 20
23243: PUSH
23244: LD_INT 21
23246: PUSH
23247: LD_INT 22
23249: PUSH
23250: LD_INT 23
23252: PUSH
23253: LD_INT 25
23255: PUSH
23256: LD_INT 26
23258: PUSH
23259: LD_INT 30
23261: PUSH
23262: LD_INT 31
23264: PUSH
23265: LD_INT 32
23267: PUSH
23268: LD_INT 33
23270: PUSH
23271: LD_INT 34
23273: PUSH
23274: LD_INT 35
23276: PUSH
23277: LD_INT 36
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 101
23305: PUSH
23306: LD_INT 102
23308: PUSH
23309: LD_INT 103
23311: PUSH
23312: LD_INT 106
23314: PUSH
23315: LD_INT 108
23317: PUSH
23318: LD_INT 112
23320: PUSH
23321: LD_INT 113
23323: PUSH
23324: LD_INT 114
23326: PUSH
23327: LD_INT 115
23329: PUSH
23330: LD_INT 116
23332: PUSH
23333: LD_INT 117
23335: PUSH
23336: LD_INT 118
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: ST_TO_ADDR
23357: GO 23600
23359: LD_INT 19
23361: DOUBLE
23362: EQUAL
23363: IFTRUE 23367
23365: GO 23599
23367: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23368: LD_ADDR_VAR 0 1
23372: PUSH
23373: LD_INT 1
23375: PUSH
23376: LD_INT 2
23378: PUSH
23379: LD_INT 3
23381: PUSH
23382: LD_INT 4
23384: PUSH
23385: LD_INT 5
23387: PUSH
23388: LD_INT 6
23390: PUSH
23391: LD_INT 7
23393: PUSH
23394: LD_INT 8
23396: PUSH
23397: LD_INT 9
23399: PUSH
23400: LD_INT 10
23402: PUSH
23403: LD_INT 11
23405: PUSH
23406: LD_INT 12
23408: PUSH
23409: LD_INT 13
23411: PUSH
23412: LD_INT 14
23414: PUSH
23415: LD_INT 15
23417: PUSH
23418: LD_INT 16
23420: PUSH
23421: LD_INT 17
23423: PUSH
23424: LD_INT 18
23426: PUSH
23427: LD_INT 19
23429: PUSH
23430: LD_INT 20
23432: PUSH
23433: LD_INT 21
23435: PUSH
23436: LD_INT 22
23438: PUSH
23439: LD_INT 23
23441: PUSH
23442: LD_INT 24
23444: PUSH
23445: LD_INT 25
23447: PUSH
23448: LD_INT 26
23450: PUSH
23451: LD_INT 27
23453: PUSH
23454: LD_INT 28
23456: PUSH
23457: LD_INT 29
23459: PUSH
23460: LD_INT 30
23462: PUSH
23463: LD_INT 31
23465: PUSH
23466: LD_INT 32
23468: PUSH
23469: LD_INT 33
23471: PUSH
23472: LD_INT 34
23474: PUSH
23475: LD_INT 35
23477: PUSH
23478: LD_INT 36
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 101
23521: PUSH
23522: LD_INT 102
23524: PUSH
23525: LD_INT 103
23527: PUSH
23528: LD_INT 104
23530: PUSH
23531: LD_INT 105
23533: PUSH
23534: LD_INT 106
23536: PUSH
23537: LD_INT 107
23539: PUSH
23540: LD_INT 108
23542: PUSH
23543: LD_INT 109
23545: PUSH
23546: LD_INT 110
23548: PUSH
23549: LD_INT 111
23551: PUSH
23552: LD_INT 112
23554: PUSH
23555: LD_INT 113
23557: PUSH
23558: LD_INT 114
23560: PUSH
23561: LD_INT 115
23563: PUSH
23564: LD_INT 116
23566: PUSH
23567: LD_INT 117
23569: PUSH
23570: LD_INT 118
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: ST_TO_ADDR
23597: GO 23600
23599: POP
// end else
23600: GO 23831
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23602: LD_ADDR_VAR 0 1
23606: PUSH
23607: LD_INT 1
23609: PUSH
23610: LD_INT 2
23612: PUSH
23613: LD_INT 3
23615: PUSH
23616: LD_INT 4
23618: PUSH
23619: LD_INT 5
23621: PUSH
23622: LD_INT 6
23624: PUSH
23625: LD_INT 7
23627: PUSH
23628: LD_INT 8
23630: PUSH
23631: LD_INT 9
23633: PUSH
23634: LD_INT 10
23636: PUSH
23637: LD_INT 11
23639: PUSH
23640: LD_INT 12
23642: PUSH
23643: LD_INT 13
23645: PUSH
23646: LD_INT 14
23648: PUSH
23649: LD_INT 15
23651: PUSH
23652: LD_INT 16
23654: PUSH
23655: LD_INT 17
23657: PUSH
23658: LD_INT 18
23660: PUSH
23661: LD_INT 19
23663: PUSH
23664: LD_INT 20
23666: PUSH
23667: LD_INT 21
23669: PUSH
23670: LD_INT 22
23672: PUSH
23673: LD_INT 23
23675: PUSH
23676: LD_INT 24
23678: PUSH
23679: LD_INT 25
23681: PUSH
23682: LD_INT 26
23684: PUSH
23685: LD_INT 27
23687: PUSH
23688: LD_INT 28
23690: PUSH
23691: LD_INT 29
23693: PUSH
23694: LD_INT 30
23696: PUSH
23697: LD_INT 31
23699: PUSH
23700: LD_INT 32
23702: PUSH
23703: LD_INT 33
23705: PUSH
23706: LD_INT 34
23708: PUSH
23709: LD_INT 35
23711: PUSH
23712: LD_INT 36
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 101
23755: PUSH
23756: LD_INT 102
23758: PUSH
23759: LD_INT 103
23761: PUSH
23762: LD_INT 104
23764: PUSH
23765: LD_INT 105
23767: PUSH
23768: LD_INT 106
23770: PUSH
23771: LD_INT 107
23773: PUSH
23774: LD_INT 108
23776: PUSH
23777: LD_INT 109
23779: PUSH
23780: LD_INT 110
23782: PUSH
23783: LD_INT 111
23785: PUSH
23786: LD_INT 112
23788: PUSH
23789: LD_INT 113
23791: PUSH
23792: LD_INT 114
23794: PUSH
23795: LD_INT 115
23797: PUSH
23798: LD_INT 116
23800: PUSH
23801: LD_INT 117
23803: PUSH
23804: LD_INT 118
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: ST_TO_ADDR
// if result then
23831: LD_VAR 0 1
23835: IFFALSE 24124
// begin normal :=  ;
23837: LD_ADDR_VAR 0 3
23841: PUSH
23842: LD_STRING 
23844: ST_TO_ADDR
// hardcore :=  ;
23845: LD_ADDR_VAR 0 4
23849: PUSH
23850: LD_STRING 
23852: ST_TO_ADDR
// for i = 1 to normalCounter do
23853: LD_ADDR_VAR 0 5
23857: PUSH
23858: DOUBLE
23859: LD_INT 1
23861: DEC
23862: ST_TO_ADDR
23863: LD_EXP 82
23867: PUSH
23868: FOR_TO
23869: IFFALSE 23970
// begin tmp := 0 ;
23871: LD_ADDR_VAR 0 2
23875: PUSH
23876: LD_STRING 0
23878: ST_TO_ADDR
// if result [ 1 ] then
23879: LD_VAR 0 1
23883: PUSH
23884: LD_INT 1
23886: ARRAY
23887: IFFALSE 23952
// if result [ 1 ] [ 1 ] = i then
23889: LD_VAR 0 1
23893: PUSH
23894: LD_INT 1
23896: ARRAY
23897: PUSH
23898: LD_INT 1
23900: ARRAY
23901: PUSH
23902: LD_VAR 0 5
23906: EQUAL
23907: IFFALSE 23952
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23909: LD_ADDR_VAR 0 1
23913: PUSH
23914: LD_VAR 0 1
23918: PPUSH
23919: LD_INT 1
23921: PPUSH
23922: LD_VAR 0 1
23926: PUSH
23927: LD_INT 1
23929: ARRAY
23930: PPUSH
23931: LD_INT 1
23933: PPUSH
23934: CALL_OW 3
23938: PPUSH
23939: CALL_OW 1
23943: ST_TO_ADDR
// tmp := 1 ;
23944: LD_ADDR_VAR 0 2
23948: PUSH
23949: LD_STRING 1
23951: ST_TO_ADDR
// end ; normal := normal & tmp ;
23952: LD_ADDR_VAR 0 3
23956: PUSH
23957: LD_VAR 0 3
23961: PUSH
23962: LD_VAR 0 2
23966: STR
23967: ST_TO_ADDR
// end ;
23968: GO 23868
23970: POP
23971: POP
// for i = 1 to hardcoreCounter do
23972: LD_ADDR_VAR 0 5
23976: PUSH
23977: DOUBLE
23978: LD_INT 1
23980: DEC
23981: ST_TO_ADDR
23982: LD_EXP 83
23986: PUSH
23987: FOR_TO
23988: IFFALSE 24093
// begin tmp := 0 ;
23990: LD_ADDR_VAR 0 2
23994: PUSH
23995: LD_STRING 0
23997: ST_TO_ADDR
// if result [ 2 ] then
23998: LD_VAR 0 1
24002: PUSH
24003: LD_INT 2
24005: ARRAY
24006: IFFALSE 24075
// if result [ 2 ] [ 1 ] = 100 + i then
24008: LD_VAR 0 1
24012: PUSH
24013: LD_INT 2
24015: ARRAY
24016: PUSH
24017: LD_INT 1
24019: ARRAY
24020: PUSH
24021: LD_INT 100
24023: PUSH
24024: LD_VAR 0 5
24028: PLUS
24029: EQUAL
24030: IFFALSE 24075
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24032: LD_ADDR_VAR 0 1
24036: PUSH
24037: LD_VAR 0 1
24041: PPUSH
24042: LD_INT 2
24044: PPUSH
24045: LD_VAR 0 1
24049: PUSH
24050: LD_INT 2
24052: ARRAY
24053: PPUSH
24054: LD_INT 1
24056: PPUSH
24057: CALL_OW 3
24061: PPUSH
24062: CALL_OW 1
24066: ST_TO_ADDR
// tmp := 1 ;
24067: LD_ADDR_VAR 0 2
24071: PUSH
24072: LD_STRING 1
24074: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24075: LD_ADDR_VAR 0 4
24079: PUSH
24080: LD_VAR 0 4
24084: PUSH
24085: LD_VAR 0 2
24089: STR
24090: ST_TO_ADDR
// end ;
24091: GO 23987
24093: POP
24094: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24095: LD_STRING getStreamItemsFromMission("
24097: PUSH
24098: LD_VAR 0 3
24102: STR
24103: PUSH
24104: LD_STRING ","
24106: STR
24107: PUSH
24108: LD_VAR 0 4
24112: STR
24113: PUSH
24114: LD_STRING ")
24116: STR
24117: PPUSH
24118: CALL_OW 559
// end else
24122: GO 24131
// ToLua ( getStreamItemsFromMission("","") ) ;
24124: LD_STRING getStreamItemsFromMission("","")
24126: PPUSH
24127: CALL_OW 559
// end ;
24131: LD_VAR 0 1
24135: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24136: LD_EXP 81
24140: PUSH
24141: LD_EXP 86
24145: AND
24146: IFFALSE 24270
24148: GO 24150
24150: DISABLE
24151: LD_INT 0
24153: PPUSH
24154: PPUSH
// begin enable ;
24155: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24156: LD_ADDR_VAR 0 2
24160: PUSH
24161: LD_INT 22
24163: PUSH
24164: LD_OWVAR 2
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 2
24175: PUSH
24176: LD_INT 34
24178: PUSH
24179: LD_INT 7
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 34
24188: PUSH
24189: LD_INT 45
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 34
24198: PUSH
24199: LD_INT 28
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 34
24208: PUSH
24209: LD_INT 47
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PPUSH
24227: CALL_OW 69
24231: ST_TO_ADDR
// if not tmp then
24232: LD_VAR 0 2
24236: NOT
24237: IFFALSE 24241
// exit ;
24239: GO 24270
// for i in tmp do
24241: LD_ADDR_VAR 0 1
24245: PUSH
24246: LD_VAR 0 2
24250: PUSH
24251: FOR_IN
24252: IFFALSE 24268
// begin SetLives ( i , 0 ) ;
24254: LD_VAR 0 1
24258: PPUSH
24259: LD_INT 0
24261: PPUSH
24262: CALL_OW 234
// end ;
24266: GO 24251
24268: POP
24269: POP
// end ;
24270: PPOPN 2
24272: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24273: LD_EXP 81
24277: PUSH
24278: LD_EXP 87
24282: AND
24283: IFFALSE 24367
24285: GO 24287
24287: DISABLE
24288: LD_INT 0
24290: PPUSH
24291: PPUSH
// begin enable ;
24292: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24293: LD_ADDR_VAR 0 2
24297: PUSH
24298: LD_INT 22
24300: PUSH
24301: LD_OWVAR 2
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 32
24312: PUSH
24313: LD_INT 3
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PPUSH
24324: CALL_OW 69
24328: ST_TO_ADDR
// if not tmp then
24329: LD_VAR 0 2
24333: NOT
24334: IFFALSE 24338
// exit ;
24336: GO 24367
// for i in tmp do
24338: LD_ADDR_VAR 0 1
24342: PUSH
24343: LD_VAR 0 2
24347: PUSH
24348: FOR_IN
24349: IFFALSE 24365
// begin SetLives ( i , 0 ) ;
24351: LD_VAR 0 1
24355: PPUSH
24356: LD_INT 0
24358: PPUSH
24359: CALL_OW 234
// end ;
24363: GO 24348
24365: POP
24366: POP
// end ;
24367: PPOPN 2
24369: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24370: LD_EXP 81
24374: PUSH
24375: LD_EXP 84
24379: AND
24380: IFFALSE 24473
24382: GO 24384
24384: DISABLE
24385: LD_INT 0
24387: PPUSH
// begin enable ;
24388: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24389: LD_ADDR_VAR 0 1
24393: PUSH
24394: LD_INT 22
24396: PUSH
24397: LD_OWVAR 2
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 2
24408: PUSH
24409: LD_INT 25
24411: PUSH
24412: LD_INT 5
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 25
24421: PUSH
24422: LD_INT 9
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 25
24431: PUSH
24432: LD_INT 8
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PPUSH
24449: CALL_OW 69
24453: PUSH
24454: FOR_IN
24455: IFFALSE 24471
// begin SetClass ( i , 1 ) ;
24457: LD_VAR 0 1
24461: PPUSH
24462: LD_INT 1
24464: PPUSH
24465: CALL_OW 336
// end ;
24469: GO 24454
24471: POP
24472: POP
// end ;
24473: PPOPN 1
24475: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24476: LD_EXP 81
24480: PUSH
24481: LD_EXP 85
24485: AND
24486: PUSH
24487: LD_OWVAR 65
24491: PUSH
24492: LD_INT 7
24494: LESS
24495: AND
24496: IFFALSE 24510
24498: GO 24500
24500: DISABLE
// begin enable ;
24501: ENABLE
// game_speed := 7 ;
24502: LD_ADDR_OWVAR 65
24506: PUSH
24507: LD_INT 7
24509: ST_TO_ADDR
// end ;
24510: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24511: LD_EXP 81
24515: PUSH
24516: LD_EXP 88
24520: AND
24521: IFFALSE 24723
24523: GO 24525
24525: DISABLE
24526: LD_INT 0
24528: PPUSH
24529: PPUSH
24530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24531: LD_ADDR_VAR 0 3
24535: PUSH
24536: LD_INT 81
24538: PUSH
24539: LD_OWVAR 2
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 21
24550: PUSH
24551: LD_INT 1
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PPUSH
24562: CALL_OW 69
24566: ST_TO_ADDR
// if not tmp then
24567: LD_VAR 0 3
24571: NOT
24572: IFFALSE 24576
// exit ;
24574: GO 24723
// if tmp > 5 then
24576: LD_VAR 0 3
24580: PUSH
24581: LD_INT 5
24583: GREATER
24584: IFFALSE 24596
// k := 5 else
24586: LD_ADDR_VAR 0 2
24590: PUSH
24591: LD_INT 5
24593: ST_TO_ADDR
24594: GO 24606
// k := tmp ;
24596: LD_ADDR_VAR 0 2
24600: PUSH
24601: LD_VAR 0 3
24605: ST_TO_ADDR
// for i := 1 to k do
24606: LD_ADDR_VAR 0 1
24610: PUSH
24611: DOUBLE
24612: LD_INT 1
24614: DEC
24615: ST_TO_ADDR
24616: LD_VAR 0 2
24620: PUSH
24621: FOR_TO
24622: IFFALSE 24721
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24624: LD_VAR 0 3
24628: PUSH
24629: LD_VAR 0 1
24633: ARRAY
24634: PPUSH
24635: LD_VAR 0 1
24639: PUSH
24640: LD_INT 4
24642: MOD
24643: PUSH
24644: LD_INT 1
24646: PLUS
24647: PPUSH
24648: CALL_OW 259
24652: PUSH
24653: LD_INT 10
24655: LESS
24656: IFFALSE 24719
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24658: LD_VAR 0 3
24662: PUSH
24663: LD_VAR 0 1
24667: ARRAY
24668: PPUSH
24669: LD_VAR 0 1
24673: PUSH
24674: LD_INT 4
24676: MOD
24677: PUSH
24678: LD_INT 1
24680: PLUS
24681: PPUSH
24682: LD_VAR 0 3
24686: PUSH
24687: LD_VAR 0 1
24691: ARRAY
24692: PPUSH
24693: LD_VAR 0 1
24697: PUSH
24698: LD_INT 4
24700: MOD
24701: PUSH
24702: LD_INT 1
24704: PLUS
24705: PPUSH
24706: CALL_OW 259
24710: PUSH
24711: LD_INT 1
24713: PLUS
24714: PPUSH
24715: CALL_OW 237
24719: GO 24621
24721: POP
24722: POP
// end ;
24723: PPOPN 3
24725: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24726: LD_EXP 81
24730: PUSH
24731: LD_EXP 89
24735: AND
24736: IFFALSE 24756
24738: GO 24740
24740: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24741: LD_INT 4
24743: PPUSH
24744: LD_OWVAR 2
24748: PPUSH
24749: LD_INT 0
24751: PPUSH
24752: CALL_OW 324
24756: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24757: LD_EXP 81
24761: PUSH
24762: LD_EXP 118
24766: AND
24767: IFFALSE 24787
24769: GO 24771
24771: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24772: LD_INT 19
24774: PPUSH
24775: LD_OWVAR 2
24779: PPUSH
24780: LD_INT 0
24782: PPUSH
24783: CALL_OW 324
24787: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24788: LD_EXP 81
24792: PUSH
24793: LD_EXP 90
24797: AND
24798: IFFALSE 24900
24800: GO 24802
24802: DISABLE
24803: LD_INT 0
24805: PPUSH
24806: PPUSH
// begin enable ;
24807: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24808: LD_ADDR_VAR 0 2
24812: PUSH
24813: LD_INT 22
24815: PUSH
24816: LD_OWVAR 2
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 2
24827: PUSH
24828: LD_INT 34
24830: PUSH
24831: LD_INT 11
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 34
24840: PUSH
24841: LD_INT 30
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: LIST
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PPUSH
24857: CALL_OW 69
24861: ST_TO_ADDR
// if not tmp then
24862: LD_VAR 0 2
24866: NOT
24867: IFFALSE 24871
// exit ;
24869: GO 24900
// for i in tmp do
24871: LD_ADDR_VAR 0 1
24875: PUSH
24876: LD_VAR 0 2
24880: PUSH
24881: FOR_IN
24882: IFFALSE 24898
// begin SetLives ( i , 0 ) ;
24884: LD_VAR 0 1
24888: PPUSH
24889: LD_INT 0
24891: PPUSH
24892: CALL_OW 234
// end ;
24896: GO 24881
24898: POP
24899: POP
// end ;
24900: PPOPN 2
24902: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24903: LD_EXP 81
24907: PUSH
24908: LD_EXP 91
24912: AND
24913: IFFALSE 24933
24915: GO 24917
24917: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24918: LD_INT 32
24920: PPUSH
24921: LD_OWVAR 2
24925: PPUSH
24926: LD_INT 0
24928: PPUSH
24929: CALL_OW 324
24933: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24934: LD_EXP 81
24938: PUSH
24939: LD_EXP 92
24943: AND
24944: IFFALSE 25125
24946: GO 24948
24948: DISABLE
24949: LD_INT 0
24951: PPUSH
24952: PPUSH
24953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24954: LD_ADDR_VAR 0 2
24958: PUSH
24959: LD_INT 22
24961: PUSH
24962: LD_OWVAR 2
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 33
24973: PUSH
24974: LD_INT 3
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PPUSH
24985: CALL_OW 69
24989: ST_TO_ADDR
// if not tmp then
24990: LD_VAR 0 2
24994: NOT
24995: IFFALSE 24999
// exit ;
24997: GO 25125
// side := 0 ;
24999: LD_ADDR_VAR 0 3
25003: PUSH
25004: LD_INT 0
25006: ST_TO_ADDR
// for i := 1 to 8 do
25007: LD_ADDR_VAR 0 1
25011: PUSH
25012: DOUBLE
25013: LD_INT 1
25015: DEC
25016: ST_TO_ADDR
25017: LD_INT 8
25019: PUSH
25020: FOR_TO
25021: IFFALSE 25069
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25023: LD_OWVAR 2
25027: PUSH
25028: LD_VAR 0 1
25032: NONEQUAL
25033: PUSH
25034: LD_OWVAR 2
25038: PPUSH
25039: LD_VAR 0 1
25043: PPUSH
25044: CALL_OW 81
25048: PUSH
25049: LD_INT 2
25051: EQUAL
25052: AND
25053: IFFALSE 25067
// begin side := i ;
25055: LD_ADDR_VAR 0 3
25059: PUSH
25060: LD_VAR 0 1
25064: ST_TO_ADDR
// break ;
25065: GO 25069
// end ;
25067: GO 25020
25069: POP
25070: POP
// if not side then
25071: LD_VAR 0 3
25075: NOT
25076: IFFALSE 25080
// exit ;
25078: GO 25125
// for i := 1 to tmp do
25080: LD_ADDR_VAR 0 1
25084: PUSH
25085: DOUBLE
25086: LD_INT 1
25088: DEC
25089: ST_TO_ADDR
25090: LD_VAR 0 2
25094: PUSH
25095: FOR_TO
25096: IFFALSE 25123
// if Prob ( 60 ) then
25098: LD_INT 60
25100: PPUSH
25101: CALL_OW 13
25105: IFFALSE 25121
// SetSide ( i , side ) ;
25107: LD_VAR 0 1
25111: PPUSH
25112: LD_VAR 0 3
25116: PPUSH
25117: CALL_OW 235
25121: GO 25095
25123: POP
25124: POP
// end ;
25125: PPOPN 3
25127: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25128: LD_EXP 81
25132: PUSH
25133: LD_EXP 94
25137: AND
25138: IFFALSE 25257
25140: GO 25142
25142: DISABLE
25143: LD_INT 0
25145: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25146: LD_ADDR_VAR 0 1
25150: PUSH
25151: LD_INT 22
25153: PUSH
25154: LD_OWVAR 2
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 21
25165: PUSH
25166: LD_INT 1
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 3
25175: PUSH
25176: LD_INT 23
25178: PUSH
25179: LD_INT 0
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: LIST
25194: PPUSH
25195: CALL_OW 69
25199: PUSH
25200: FOR_IN
25201: IFFALSE 25255
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25203: LD_VAR 0 1
25207: PPUSH
25208: CALL_OW 257
25212: PUSH
25213: LD_INT 1
25215: PUSH
25216: LD_INT 2
25218: PUSH
25219: LD_INT 3
25221: PUSH
25222: LD_INT 4
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: IN
25231: IFFALSE 25253
// SetClass ( un , rand ( 1 , 4 ) ) ;
25233: LD_VAR 0 1
25237: PPUSH
25238: LD_INT 1
25240: PPUSH
25241: LD_INT 4
25243: PPUSH
25244: CALL_OW 12
25248: PPUSH
25249: CALL_OW 336
25253: GO 25200
25255: POP
25256: POP
// end ;
25257: PPOPN 1
25259: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25260: LD_EXP 81
25264: PUSH
25265: LD_EXP 93
25269: AND
25270: IFFALSE 25349
25272: GO 25274
25274: DISABLE
25275: LD_INT 0
25277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25278: LD_ADDR_VAR 0 1
25282: PUSH
25283: LD_INT 22
25285: PUSH
25286: LD_OWVAR 2
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 21
25297: PUSH
25298: LD_INT 3
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PPUSH
25309: CALL_OW 69
25313: ST_TO_ADDR
// if not tmp then
25314: LD_VAR 0 1
25318: NOT
25319: IFFALSE 25323
// exit ;
25321: GO 25349
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25323: LD_VAR 0 1
25327: PUSH
25328: LD_INT 1
25330: PPUSH
25331: LD_VAR 0 1
25335: PPUSH
25336: CALL_OW 12
25340: ARRAY
25341: PPUSH
25342: LD_INT 100
25344: PPUSH
25345: CALL_OW 234
// end ;
25349: PPOPN 1
25351: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25352: LD_EXP 81
25356: PUSH
25357: LD_EXP 95
25361: AND
25362: IFFALSE 25460
25364: GO 25366
25366: DISABLE
25367: LD_INT 0
25369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25370: LD_ADDR_VAR 0 1
25374: PUSH
25375: LD_INT 22
25377: PUSH
25378: LD_OWVAR 2
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 21
25389: PUSH
25390: LD_INT 1
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PPUSH
25401: CALL_OW 69
25405: ST_TO_ADDR
// if not tmp then
25406: LD_VAR 0 1
25410: NOT
25411: IFFALSE 25415
// exit ;
25413: GO 25460
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25415: LD_VAR 0 1
25419: PUSH
25420: LD_INT 1
25422: PPUSH
25423: LD_VAR 0 1
25427: PPUSH
25428: CALL_OW 12
25432: ARRAY
25433: PPUSH
25434: LD_INT 1
25436: PPUSH
25437: LD_INT 4
25439: PPUSH
25440: CALL_OW 12
25444: PPUSH
25445: LD_INT 3000
25447: PPUSH
25448: LD_INT 9000
25450: PPUSH
25451: CALL_OW 12
25455: PPUSH
25456: CALL_OW 492
// end ;
25460: PPOPN 1
25462: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25463: LD_EXP 81
25467: PUSH
25468: LD_EXP 96
25472: AND
25473: IFFALSE 25493
25475: GO 25477
25477: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25478: LD_INT 1
25480: PPUSH
25481: LD_OWVAR 2
25485: PPUSH
25486: LD_INT 0
25488: PPUSH
25489: CALL_OW 324
25493: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25494: LD_EXP 81
25498: PUSH
25499: LD_EXP 97
25503: AND
25504: IFFALSE 25587
25506: GO 25508
25508: DISABLE
25509: LD_INT 0
25511: PPUSH
25512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25513: LD_ADDR_VAR 0 2
25517: PUSH
25518: LD_INT 22
25520: PUSH
25521: LD_OWVAR 2
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 21
25532: PUSH
25533: LD_INT 3
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PPUSH
25544: CALL_OW 69
25548: ST_TO_ADDR
// if not tmp then
25549: LD_VAR 0 2
25553: NOT
25554: IFFALSE 25558
// exit ;
25556: GO 25587
// for i in tmp do
25558: LD_ADDR_VAR 0 1
25562: PUSH
25563: LD_VAR 0 2
25567: PUSH
25568: FOR_IN
25569: IFFALSE 25585
// SetBLevel ( i , 10 ) ;
25571: LD_VAR 0 1
25575: PPUSH
25576: LD_INT 10
25578: PPUSH
25579: CALL_OW 241
25583: GO 25568
25585: POP
25586: POP
// end ;
25587: PPOPN 2
25589: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25590: LD_EXP 81
25594: PUSH
25595: LD_EXP 98
25599: AND
25600: IFFALSE 25711
25602: GO 25604
25604: DISABLE
25605: LD_INT 0
25607: PPUSH
25608: PPUSH
25609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25610: LD_ADDR_VAR 0 3
25614: PUSH
25615: LD_INT 22
25617: PUSH
25618: LD_OWVAR 2
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 25
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PPUSH
25641: CALL_OW 69
25645: ST_TO_ADDR
// if not tmp then
25646: LD_VAR 0 3
25650: NOT
25651: IFFALSE 25655
// exit ;
25653: GO 25711
// un := tmp [ rand ( 1 , tmp ) ] ;
25655: LD_ADDR_VAR 0 2
25659: PUSH
25660: LD_VAR 0 3
25664: PUSH
25665: LD_INT 1
25667: PPUSH
25668: LD_VAR 0 3
25672: PPUSH
25673: CALL_OW 12
25677: ARRAY
25678: ST_TO_ADDR
// if Crawls ( un ) then
25679: LD_VAR 0 2
25683: PPUSH
25684: CALL_OW 318
25688: IFFALSE 25699
// ComWalk ( un ) ;
25690: LD_VAR 0 2
25694: PPUSH
25695: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25699: LD_VAR 0 2
25703: PPUSH
25704: LD_INT 5
25706: PPUSH
25707: CALL_OW 336
// end ;
25711: PPOPN 3
25713: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25714: LD_EXP 81
25718: PUSH
25719: LD_EXP 99
25723: AND
25724: PUSH
25725: LD_OWVAR 67
25729: PUSH
25730: LD_INT 4
25732: LESS
25733: AND
25734: IFFALSE 25753
25736: GO 25738
25738: DISABLE
// begin Difficulty := Difficulty + 1 ;
25739: LD_ADDR_OWVAR 67
25743: PUSH
25744: LD_OWVAR 67
25748: PUSH
25749: LD_INT 1
25751: PLUS
25752: ST_TO_ADDR
// end ;
25753: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25754: LD_EXP 81
25758: PUSH
25759: LD_EXP 100
25763: AND
25764: IFFALSE 25867
25766: GO 25768
25768: DISABLE
25769: LD_INT 0
25771: PPUSH
// begin for i := 1 to 5 do
25772: LD_ADDR_VAR 0 1
25776: PUSH
25777: DOUBLE
25778: LD_INT 1
25780: DEC
25781: ST_TO_ADDR
25782: LD_INT 5
25784: PUSH
25785: FOR_TO
25786: IFFALSE 25865
// begin uc_nation := nation_nature ;
25788: LD_ADDR_OWVAR 21
25792: PUSH
25793: LD_INT 0
25795: ST_TO_ADDR
// uc_side := 0 ;
25796: LD_ADDR_OWVAR 20
25800: PUSH
25801: LD_INT 0
25803: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25804: LD_ADDR_OWVAR 29
25808: PUSH
25809: LD_INT 12
25811: PUSH
25812: LD_INT 12
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: ST_TO_ADDR
// hc_agressivity := 20 ;
25819: LD_ADDR_OWVAR 35
25823: PUSH
25824: LD_INT 20
25826: ST_TO_ADDR
// hc_class := class_tiger ;
25827: LD_ADDR_OWVAR 28
25831: PUSH
25832: LD_INT 14
25834: ST_TO_ADDR
// hc_gallery :=  ;
25835: LD_ADDR_OWVAR 33
25839: PUSH
25840: LD_STRING 
25842: ST_TO_ADDR
// hc_name :=  ;
25843: LD_ADDR_OWVAR 26
25847: PUSH
25848: LD_STRING 
25850: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25851: CALL_OW 44
25855: PPUSH
25856: LD_INT 0
25858: PPUSH
25859: CALL_OW 51
// end ;
25863: GO 25785
25865: POP
25866: POP
// end ;
25867: PPOPN 1
25869: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25870: LD_EXP 81
25874: PUSH
25875: LD_EXP 101
25879: AND
25880: IFFALSE 25889
25882: GO 25884
25884: DISABLE
// StreamSibBomb ;
25885: CALL 25890 0 0
25889: END
// export function StreamSibBomb ; var i , x , y ; begin
25890: LD_INT 0
25892: PPUSH
25893: PPUSH
25894: PPUSH
25895: PPUSH
// result := false ;
25896: LD_ADDR_VAR 0 1
25900: PUSH
25901: LD_INT 0
25903: ST_TO_ADDR
// for i := 1 to 16 do
25904: LD_ADDR_VAR 0 2
25908: PUSH
25909: DOUBLE
25910: LD_INT 1
25912: DEC
25913: ST_TO_ADDR
25914: LD_INT 16
25916: PUSH
25917: FOR_TO
25918: IFFALSE 26117
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25920: LD_ADDR_VAR 0 3
25924: PUSH
25925: LD_INT 10
25927: PUSH
25928: LD_INT 20
25930: PUSH
25931: LD_INT 30
25933: PUSH
25934: LD_INT 40
25936: PUSH
25937: LD_INT 50
25939: PUSH
25940: LD_INT 60
25942: PUSH
25943: LD_INT 70
25945: PUSH
25946: LD_INT 80
25948: PUSH
25949: LD_INT 90
25951: PUSH
25952: LD_INT 100
25954: PUSH
25955: LD_INT 110
25957: PUSH
25958: LD_INT 120
25960: PUSH
25961: LD_INT 130
25963: PUSH
25964: LD_INT 140
25966: PUSH
25967: LD_INT 150
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 1
25989: PPUSH
25990: LD_INT 15
25992: PPUSH
25993: CALL_OW 12
25997: ARRAY
25998: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25999: LD_ADDR_VAR 0 4
26003: PUSH
26004: LD_INT 10
26006: PUSH
26007: LD_INT 20
26009: PUSH
26010: LD_INT 30
26012: PUSH
26013: LD_INT 40
26015: PUSH
26016: LD_INT 50
26018: PUSH
26019: LD_INT 60
26021: PUSH
26022: LD_INT 70
26024: PUSH
26025: LD_INT 80
26027: PUSH
26028: LD_INT 90
26030: PUSH
26031: LD_INT 100
26033: PUSH
26034: LD_INT 110
26036: PUSH
26037: LD_INT 120
26039: PUSH
26040: LD_INT 130
26042: PUSH
26043: LD_INT 140
26045: PUSH
26046: LD_INT 150
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 1
26068: PPUSH
26069: LD_INT 15
26071: PPUSH
26072: CALL_OW 12
26076: ARRAY
26077: ST_TO_ADDR
// if ValidHex ( x , y ) then
26078: LD_VAR 0 3
26082: PPUSH
26083: LD_VAR 0 4
26087: PPUSH
26088: CALL_OW 488
26092: IFFALSE 26115
// begin result := [ x , y ] ;
26094: LD_ADDR_VAR 0 1
26098: PUSH
26099: LD_VAR 0 3
26103: PUSH
26104: LD_VAR 0 4
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: ST_TO_ADDR
// break ;
26113: GO 26117
// end ; end ;
26115: GO 25917
26117: POP
26118: POP
// if result then
26119: LD_VAR 0 1
26123: IFFALSE 26183
// begin ToLua ( playSibBomb() ) ;
26125: LD_STRING playSibBomb()
26127: PPUSH
26128: CALL_OW 559
// wait ( 0 0$14 ) ;
26132: LD_INT 490
26134: PPUSH
26135: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26139: LD_VAR 0 1
26143: PUSH
26144: LD_INT 1
26146: ARRAY
26147: PPUSH
26148: LD_VAR 0 1
26152: PUSH
26153: LD_INT 2
26155: ARRAY
26156: PPUSH
26157: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26161: LD_VAR 0 1
26165: PUSH
26166: LD_INT 1
26168: ARRAY
26169: PPUSH
26170: LD_VAR 0 1
26174: PUSH
26175: LD_INT 2
26177: ARRAY
26178: PPUSH
26179: CALL_OW 429
// end ; end ;
26183: LD_VAR 0 1
26187: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26188: LD_EXP 81
26192: PUSH
26193: LD_EXP 103
26197: AND
26198: IFFALSE 26210
26200: GO 26202
26202: DISABLE
// YouLost (  ) ;
26203: LD_STRING 
26205: PPUSH
26206: CALL_OW 104
26210: END
// every 0 0$1 trigger StreamModeActive and sFog do
26211: LD_EXP 81
26215: PUSH
26216: LD_EXP 102
26220: AND
26221: IFFALSE 26235
26223: GO 26225
26225: DISABLE
// FogOff ( your_side ) ;
26226: LD_OWVAR 2
26230: PPUSH
26231: CALL_OW 344
26235: END
// every 0 0$1 trigger StreamModeActive and sSun do
26236: LD_EXP 81
26240: PUSH
26241: LD_EXP 104
26245: AND
26246: IFFALSE 26274
26248: GO 26250
26250: DISABLE
// begin solar_recharge_percent := 0 ;
26251: LD_ADDR_OWVAR 79
26255: PUSH
26256: LD_INT 0
26258: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26259: LD_INT 10500
26261: PPUSH
26262: CALL_OW 67
// solar_recharge_percent := 100 ;
26266: LD_ADDR_OWVAR 79
26270: PUSH
26271: LD_INT 100
26273: ST_TO_ADDR
// end ;
26274: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26275: LD_EXP 81
26279: PUSH
26280: LD_EXP 105
26284: AND
26285: IFFALSE 26524
26287: GO 26289
26289: DISABLE
26290: LD_INT 0
26292: PPUSH
26293: PPUSH
26294: PPUSH
// begin tmp := [ ] ;
26295: LD_ADDR_VAR 0 3
26299: PUSH
26300: EMPTY
26301: ST_TO_ADDR
// for i := 1 to 6 do
26302: LD_ADDR_VAR 0 1
26306: PUSH
26307: DOUBLE
26308: LD_INT 1
26310: DEC
26311: ST_TO_ADDR
26312: LD_INT 6
26314: PUSH
26315: FOR_TO
26316: IFFALSE 26421
// begin uc_nation := nation_nature ;
26318: LD_ADDR_OWVAR 21
26322: PUSH
26323: LD_INT 0
26325: ST_TO_ADDR
// uc_side := 0 ;
26326: LD_ADDR_OWVAR 20
26330: PUSH
26331: LD_INT 0
26333: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26334: LD_ADDR_OWVAR 29
26338: PUSH
26339: LD_INT 12
26341: PUSH
26342: LD_INT 12
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: ST_TO_ADDR
// hc_agressivity := 20 ;
26349: LD_ADDR_OWVAR 35
26353: PUSH
26354: LD_INT 20
26356: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26357: LD_ADDR_OWVAR 28
26361: PUSH
26362: LD_INT 17
26364: ST_TO_ADDR
// hc_gallery :=  ;
26365: LD_ADDR_OWVAR 33
26369: PUSH
26370: LD_STRING 
26372: ST_TO_ADDR
// hc_name :=  ;
26373: LD_ADDR_OWVAR 26
26377: PUSH
26378: LD_STRING 
26380: ST_TO_ADDR
// un := CreateHuman ;
26381: LD_ADDR_VAR 0 2
26385: PUSH
26386: CALL_OW 44
26390: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26391: LD_VAR 0 2
26395: PPUSH
26396: LD_INT 1
26398: PPUSH
26399: CALL_OW 51
// tmp := tmp ^ un ;
26403: LD_ADDR_VAR 0 3
26407: PUSH
26408: LD_VAR 0 3
26412: PUSH
26413: LD_VAR 0 2
26417: ADD
26418: ST_TO_ADDR
// end ;
26419: GO 26315
26421: POP
26422: POP
// repeat wait ( 0 0$1 ) ;
26423: LD_INT 35
26425: PPUSH
26426: CALL_OW 67
// for un in tmp do
26430: LD_ADDR_VAR 0 2
26434: PUSH
26435: LD_VAR 0 3
26439: PUSH
26440: FOR_IN
26441: IFFALSE 26515
// begin if IsDead ( un ) then
26443: LD_VAR 0 2
26447: PPUSH
26448: CALL_OW 301
26452: IFFALSE 26472
// begin tmp := tmp diff un ;
26454: LD_ADDR_VAR 0 3
26458: PUSH
26459: LD_VAR 0 3
26463: PUSH
26464: LD_VAR 0 2
26468: DIFF
26469: ST_TO_ADDR
// continue ;
26470: GO 26440
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26472: LD_VAR 0 2
26476: PPUSH
26477: LD_INT 3
26479: PUSH
26480: LD_INT 22
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PPUSH
26494: CALL_OW 69
26498: PPUSH
26499: LD_VAR 0 2
26503: PPUSH
26504: CALL_OW 74
26508: PPUSH
26509: CALL_OW 115
// end ;
26513: GO 26440
26515: POP
26516: POP
// until not tmp ;
26517: LD_VAR 0 3
26521: NOT
26522: IFFALSE 26423
// end ;
26524: PPOPN 3
26526: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26527: LD_EXP 81
26531: PUSH
26532: LD_EXP 106
26536: AND
26537: IFFALSE 26591
26539: GO 26541
26541: DISABLE
// begin ToLua ( displayTroll(); ) ;
26542: LD_STRING displayTroll();
26544: PPUSH
26545: CALL_OW 559
// wait ( 3 3$00 ) ;
26549: LD_INT 6300
26551: PPUSH
26552: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26556: LD_STRING hideTroll();
26558: PPUSH
26559: CALL_OW 559
// wait ( 1 1$00 ) ;
26563: LD_INT 2100
26565: PPUSH
26566: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26570: LD_STRING displayTroll();
26572: PPUSH
26573: CALL_OW 559
// wait ( 1 1$00 ) ;
26577: LD_INT 2100
26579: PPUSH
26580: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26584: LD_STRING hideTroll();
26586: PPUSH
26587: CALL_OW 559
// end ;
26591: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26592: LD_EXP 81
26596: PUSH
26597: LD_EXP 107
26601: AND
26602: IFFALSE 26665
26604: GO 26606
26606: DISABLE
26607: LD_INT 0
26609: PPUSH
// begin p := 0 ;
26610: LD_ADDR_VAR 0 1
26614: PUSH
26615: LD_INT 0
26617: ST_TO_ADDR
// repeat game_speed := 1 ;
26618: LD_ADDR_OWVAR 65
26622: PUSH
26623: LD_INT 1
26625: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26626: LD_INT 35
26628: PPUSH
26629: CALL_OW 67
// p := p + 1 ;
26633: LD_ADDR_VAR 0 1
26637: PUSH
26638: LD_VAR 0 1
26642: PUSH
26643: LD_INT 1
26645: PLUS
26646: ST_TO_ADDR
// until p >= 60 ;
26647: LD_VAR 0 1
26651: PUSH
26652: LD_INT 60
26654: GREATEREQUAL
26655: IFFALSE 26618
// game_speed := 4 ;
26657: LD_ADDR_OWVAR 65
26661: PUSH
26662: LD_INT 4
26664: ST_TO_ADDR
// end ;
26665: PPOPN 1
26667: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26668: LD_EXP 81
26672: PUSH
26673: LD_EXP 108
26677: AND
26678: IFFALSE 26824
26680: GO 26682
26682: DISABLE
26683: LD_INT 0
26685: PPUSH
26686: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26687: LD_ADDR_VAR 0 1
26691: PUSH
26692: LD_INT 22
26694: PUSH
26695: LD_OWVAR 2
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 2
26706: PUSH
26707: LD_INT 30
26709: PUSH
26710: LD_INT 0
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 30
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: LIST
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PPUSH
26736: CALL_OW 69
26740: ST_TO_ADDR
// if not depot then
26741: LD_VAR 0 1
26745: NOT
26746: IFFALSE 26750
// exit ;
26748: GO 26824
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26750: LD_ADDR_VAR 0 2
26754: PUSH
26755: LD_VAR 0 1
26759: PUSH
26760: LD_INT 1
26762: PPUSH
26763: LD_VAR 0 1
26767: PPUSH
26768: CALL_OW 12
26772: ARRAY
26773: PPUSH
26774: CALL_OW 274
26778: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26779: LD_VAR 0 2
26783: PPUSH
26784: LD_INT 1
26786: PPUSH
26787: LD_INT 0
26789: PPUSH
26790: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26794: LD_VAR 0 2
26798: PPUSH
26799: LD_INT 2
26801: PPUSH
26802: LD_INT 0
26804: PPUSH
26805: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26809: LD_VAR 0 2
26813: PPUSH
26814: LD_INT 3
26816: PPUSH
26817: LD_INT 0
26819: PPUSH
26820: CALL_OW 277
// end ;
26824: PPOPN 2
26826: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26827: LD_EXP 81
26831: PUSH
26832: LD_EXP 109
26836: AND
26837: IFFALSE 26934
26839: GO 26841
26841: DISABLE
26842: LD_INT 0
26844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26845: LD_ADDR_VAR 0 1
26849: PUSH
26850: LD_INT 22
26852: PUSH
26853: LD_OWVAR 2
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 21
26864: PUSH
26865: LD_INT 1
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 3
26874: PUSH
26875: LD_INT 23
26877: PUSH
26878: LD_INT 0
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: LIST
26893: PPUSH
26894: CALL_OW 69
26898: ST_TO_ADDR
// if not tmp then
26899: LD_VAR 0 1
26903: NOT
26904: IFFALSE 26908
// exit ;
26906: GO 26934
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26908: LD_VAR 0 1
26912: PUSH
26913: LD_INT 1
26915: PPUSH
26916: LD_VAR 0 1
26920: PPUSH
26921: CALL_OW 12
26925: ARRAY
26926: PPUSH
26927: LD_INT 200
26929: PPUSH
26930: CALL_OW 234
// end ;
26934: PPOPN 1
26936: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26937: LD_EXP 81
26941: PUSH
26942: LD_EXP 110
26946: AND
26947: IFFALSE 27026
26949: GO 26951
26951: DISABLE
26952: LD_INT 0
26954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26955: LD_ADDR_VAR 0 1
26959: PUSH
26960: LD_INT 22
26962: PUSH
26963: LD_OWVAR 2
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 21
26974: PUSH
26975: LD_INT 2
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PPUSH
26986: CALL_OW 69
26990: ST_TO_ADDR
// if not tmp then
26991: LD_VAR 0 1
26995: NOT
26996: IFFALSE 27000
// exit ;
26998: GO 27026
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27000: LD_VAR 0 1
27004: PUSH
27005: LD_INT 1
27007: PPUSH
27008: LD_VAR 0 1
27012: PPUSH
27013: CALL_OW 12
27017: ARRAY
27018: PPUSH
27019: LD_INT 60
27021: PPUSH
27022: CALL_OW 234
// end ;
27026: PPOPN 1
27028: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27029: LD_EXP 81
27033: PUSH
27034: LD_EXP 111
27038: AND
27039: IFFALSE 27138
27041: GO 27043
27043: DISABLE
27044: LD_INT 0
27046: PPUSH
27047: PPUSH
// begin enable ;
27048: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27049: LD_ADDR_VAR 0 1
27053: PUSH
27054: LD_INT 22
27056: PUSH
27057: LD_OWVAR 2
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 61
27068: PUSH
27069: EMPTY
27070: LIST
27071: PUSH
27072: LD_INT 33
27074: PUSH
27075: LD_INT 2
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: LIST
27086: PPUSH
27087: CALL_OW 69
27091: ST_TO_ADDR
// if not tmp then
27092: LD_VAR 0 1
27096: NOT
27097: IFFALSE 27101
// exit ;
27099: GO 27138
// for i in tmp do
27101: LD_ADDR_VAR 0 2
27105: PUSH
27106: LD_VAR 0 1
27110: PUSH
27111: FOR_IN
27112: IFFALSE 27136
// if IsControledBy ( i ) then
27114: LD_VAR 0 2
27118: PPUSH
27119: CALL_OW 312
27123: IFFALSE 27134
// ComUnlink ( i ) ;
27125: LD_VAR 0 2
27129: PPUSH
27130: CALL_OW 136
27134: GO 27111
27136: POP
27137: POP
// end ;
27138: PPOPN 2
27140: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27141: LD_EXP 81
27145: PUSH
27146: LD_EXP 112
27150: AND
27151: IFFALSE 27291
27153: GO 27155
27155: DISABLE
27156: LD_INT 0
27158: PPUSH
27159: PPUSH
// begin ToLua ( displayPowell(); ) ;
27160: LD_STRING displayPowell();
27162: PPUSH
27163: CALL_OW 559
// uc_side := 0 ;
27167: LD_ADDR_OWVAR 20
27171: PUSH
27172: LD_INT 0
27174: ST_TO_ADDR
// uc_nation := 2 ;
27175: LD_ADDR_OWVAR 21
27179: PUSH
27180: LD_INT 2
27182: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27183: LD_ADDR_OWVAR 37
27187: PUSH
27188: LD_INT 14
27190: ST_TO_ADDR
// vc_engine := engine_siberite ;
27191: LD_ADDR_OWVAR 39
27195: PUSH
27196: LD_INT 3
27198: ST_TO_ADDR
// vc_control := control_apeman ;
27199: LD_ADDR_OWVAR 38
27203: PUSH
27204: LD_INT 5
27206: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27207: LD_ADDR_OWVAR 40
27211: PUSH
27212: LD_INT 29
27214: ST_TO_ADDR
// un := CreateVehicle ;
27215: LD_ADDR_VAR 0 2
27219: PUSH
27220: CALL_OW 45
27224: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27225: LD_VAR 0 2
27229: PPUSH
27230: LD_INT 1
27232: PPUSH
27233: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27237: LD_INT 35
27239: PPUSH
27240: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27244: LD_VAR 0 2
27248: PPUSH
27249: LD_INT 22
27251: PUSH
27252: LD_OWVAR 2
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PPUSH
27261: CALL_OW 69
27265: PPUSH
27266: LD_VAR 0 2
27270: PPUSH
27271: CALL_OW 74
27275: PPUSH
27276: CALL_OW 115
// until IsDead ( un ) ;
27280: LD_VAR 0 2
27284: PPUSH
27285: CALL_OW 301
27289: IFFALSE 27237
// end ;
27291: PPOPN 2
27293: END
// every 0 0$1 trigger StreamModeActive and sStu do
27294: LD_EXP 81
27298: PUSH
27299: LD_EXP 120
27303: AND
27304: IFFALSE 27320
27306: GO 27308
27308: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27309: LD_STRING displayStucuk();
27311: PPUSH
27312: CALL_OW 559
// ResetFog ;
27316: CALL_OW 335
// end ;
27320: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27321: LD_EXP 81
27325: PUSH
27326: LD_EXP 113
27330: AND
27331: IFFALSE 27472
27333: GO 27335
27335: DISABLE
27336: LD_INT 0
27338: PPUSH
27339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27340: LD_ADDR_VAR 0 2
27344: PUSH
27345: LD_INT 22
27347: PUSH
27348: LD_OWVAR 2
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 21
27359: PUSH
27360: LD_INT 1
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PPUSH
27371: CALL_OW 69
27375: ST_TO_ADDR
// if not tmp then
27376: LD_VAR 0 2
27380: NOT
27381: IFFALSE 27385
// exit ;
27383: GO 27472
// un := tmp [ rand ( 1 , tmp ) ] ;
27385: LD_ADDR_VAR 0 1
27389: PUSH
27390: LD_VAR 0 2
27394: PUSH
27395: LD_INT 1
27397: PPUSH
27398: LD_VAR 0 2
27402: PPUSH
27403: CALL_OW 12
27407: ARRAY
27408: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27409: LD_VAR 0 1
27413: PPUSH
27414: LD_INT 0
27416: PPUSH
27417: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27421: LD_VAR 0 1
27425: PPUSH
27426: LD_OWVAR 3
27430: PUSH
27431: LD_VAR 0 1
27435: DIFF
27436: PPUSH
27437: LD_VAR 0 1
27441: PPUSH
27442: CALL_OW 74
27446: PPUSH
27447: CALL_OW 115
// wait ( 0 0$20 ) ;
27451: LD_INT 700
27453: PPUSH
27454: CALL_OW 67
// SetSide ( un , your_side ) ;
27458: LD_VAR 0 1
27462: PPUSH
27463: LD_OWVAR 2
27467: PPUSH
27468: CALL_OW 235
// end ;
27472: PPOPN 2
27474: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27475: LD_EXP 81
27479: PUSH
27480: LD_EXP 114
27484: AND
27485: IFFALSE 27591
27487: GO 27489
27489: DISABLE
27490: LD_INT 0
27492: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27493: LD_ADDR_VAR 0 1
27497: PUSH
27498: LD_INT 22
27500: PUSH
27501: LD_OWVAR 2
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 2
27512: PUSH
27513: LD_INT 30
27515: PUSH
27516: LD_INT 0
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 30
27525: PUSH
27526: LD_INT 1
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: LIST
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PPUSH
27542: CALL_OW 69
27546: ST_TO_ADDR
// if not depot then
27547: LD_VAR 0 1
27551: NOT
27552: IFFALSE 27556
// exit ;
27554: GO 27591
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27556: LD_VAR 0 1
27560: PUSH
27561: LD_INT 1
27563: ARRAY
27564: PPUSH
27565: CALL_OW 250
27569: PPUSH
27570: LD_VAR 0 1
27574: PUSH
27575: LD_INT 1
27577: ARRAY
27578: PPUSH
27579: CALL_OW 251
27583: PPUSH
27584: LD_INT 70
27586: PPUSH
27587: CALL_OW 495
// end ;
27591: PPOPN 1
27593: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27594: LD_EXP 81
27598: PUSH
27599: LD_EXP 115
27603: AND
27604: IFFALSE 27815
27606: GO 27608
27608: DISABLE
27609: LD_INT 0
27611: PPUSH
27612: PPUSH
27613: PPUSH
27614: PPUSH
27615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27616: LD_ADDR_VAR 0 5
27620: PUSH
27621: LD_INT 22
27623: PUSH
27624: LD_OWVAR 2
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 21
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PPUSH
27647: CALL_OW 69
27651: ST_TO_ADDR
// if not tmp then
27652: LD_VAR 0 5
27656: NOT
27657: IFFALSE 27661
// exit ;
27659: GO 27815
// for i in tmp do
27661: LD_ADDR_VAR 0 1
27665: PUSH
27666: LD_VAR 0 5
27670: PUSH
27671: FOR_IN
27672: IFFALSE 27813
// begin d := rand ( 0 , 5 ) ;
27674: LD_ADDR_VAR 0 4
27678: PUSH
27679: LD_INT 0
27681: PPUSH
27682: LD_INT 5
27684: PPUSH
27685: CALL_OW 12
27689: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27690: LD_ADDR_VAR 0 2
27694: PUSH
27695: LD_VAR 0 1
27699: PPUSH
27700: CALL_OW 250
27704: PPUSH
27705: LD_VAR 0 4
27709: PPUSH
27710: LD_INT 3
27712: PPUSH
27713: LD_INT 12
27715: PPUSH
27716: CALL_OW 12
27720: PPUSH
27721: CALL_OW 272
27725: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27726: LD_ADDR_VAR 0 3
27730: PUSH
27731: LD_VAR 0 1
27735: PPUSH
27736: CALL_OW 251
27740: PPUSH
27741: LD_VAR 0 4
27745: PPUSH
27746: LD_INT 3
27748: PPUSH
27749: LD_INT 12
27751: PPUSH
27752: CALL_OW 12
27756: PPUSH
27757: CALL_OW 273
27761: ST_TO_ADDR
// if ValidHex ( x , y ) then
27762: LD_VAR 0 2
27766: PPUSH
27767: LD_VAR 0 3
27771: PPUSH
27772: CALL_OW 488
27776: IFFALSE 27811
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27778: LD_VAR 0 1
27782: PPUSH
27783: LD_VAR 0 2
27787: PPUSH
27788: LD_VAR 0 3
27792: PPUSH
27793: LD_INT 3
27795: PPUSH
27796: LD_INT 6
27798: PPUSH
27799: CALL_OW 12
27803: PPUSH
27804: LD_INT 1
27806: PPUSH
27807: CALL_OW 483
// end ;
27811: GO 27671
27813: POP
27814: POP
// end ;
27815: PPOPN 5
27817: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27818: LD_EXP 81
27822: PUSH
27823: LD_EXP 116
27827: AND
27828: IFFALSE 27922
27830: GO 27832
27832: DISABLE
27833: LD_INT 0
27835: PPUSH
27836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27837: LD_ADDR_VAR 0 2
27841: PUSH
27842: LD_INT 22
27844: PUSH
27845: LD_OWVAR 2
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 32
27856: PUSH
27857: LD_INT 1
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 21
27866: PUSH
27867: LD_INT 2
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: LIST
27878: PPUSH
27879: CALL_OW 69
27883: ST_TO_ADDR
// if not tmp then
27884: LD_VAR 0 2
27888: NOT
27889: IFFALSE 27893
// exit ;
27891: GO 27922
// for i in tmp do
27893: LD_ADDR_VAR 0 1
27897: PUSH
27898: LD_VAR 0 2
27902: PUSH
27903: FOR_IN
27904: IFFALSE 27920
// SetFuel ( i , 0 ) ;
27906: LD_VAR 0 1
27910: PPUSH
27911: LD_INT 0
27913: PPUSH
27914: CALL_OW 240
27918: GO 27903
27920: POP
27921: POP
// end ;
27922: PPOPN 2
27924: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27925: LD_EXP 81
27929: PUSH
27930: LD_EXP 117
27934: AND
27935: IFFALSE 28001
27937: GO 27939
27939: DISABLE
27940: LD_INT 0
27942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27943: LD_ADDR_VAR 0 1
27947: PUSH
27948: LD_INT 22
27950: PUSH
27951: LD_OWVAR 2
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 30
27962: PUSH
27963: LD_INT 29
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PPUSH
27974: CALL_OW 69
27978: ST_TO_ADDR
// if not tmp then
27979: LD_VAR 0 1
27983: NOT
27984: IFFALSE 27988
// exit ;
27986: GO 28001
// DestroyUnit ( tmp [ 1 ] ) ;
27988: LD_VAR 0 1
27992: PUSH
27993: LD_INT 1
27995: ARRAY
27996: PPUSH
27997: CALL_OW 65
// end ;
28001: PPOPN 1
28003: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28004: LD_EXP 81
28008: PUSH
28009: LD_EXP 119
28013: AND
28014: IFFALSE 28143
28016: GO 28018
28018: DISABLE
28019: LD_INT 0
28021: PPUSH
// begin uc_side := 0 ;
28022: LD_ADDR_OWVAR 20
28026: PUSH
28027: LD_INT 0
28029: ST_TO_ADDR
// uc_nation := nation_arabian ;
28030: LD_ADDR_OWVAR 21
28034: PUSH
28035: LD_INT 2
28037: ST_TO_ADDR
// hc_gallery :=  ;
28038: LD_ADDR_OWVAR 33
28042: PUSH
28043: LD_STRING 
28045: ST_TO_ADDR
// hc_name :=  ;
28046: LD_ADDR_OWVAR 26
28050: PUSH
28051: LD_STRING 
28053: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28054: LD_INT 1
28056: PPUSH
28057: LD_INT 11
28059: PPUSH
28060: LD_INT 10
28062: PPUSH
28063: CALL_OW 380
// un := CreateHuman ;
28067: LD_ADDR_VAR 0 1
28071: PUSH
28072: CALL_OW 44
28076: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28077: LD_VAR 0 1
28081: PPUSH
28082: LD_INT 1
28084: PPUSH
28085: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28089: LD_INT 35
28091: PPUSH
28092: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28096: LD_VAR 0 1
28100: PPUSH
28101: LD_INT 22
28103: PUSH
28104: LD_OWVAR 2
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PPUSH
28113: CALL_OW 69
28117: PPUSH
28118: LD_VAR 0 1
28122: PPUSH
28123: CALL_OW 74
28127: PPUSH
28128: CALL_OW 115
// until IsDead ( un ) ;
28132: LD_VAR 0 1
28136: PPUSH
28137: CALL_OW 301
28141: IFFALSE 28089
// end ;
28143: PPOPN 1
28145: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28146: LD_EXP 81
28150: PUSH
28151: LD_EXP 121
28155: AND
28156: IFFALSE 28168
28158: GO 28160
28160: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28161: LD_STRING earthquake(getX(game), 0, 32)
28163: PPUSH
28164: CALL_OW 559
28168: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28169: LD_EXP 81
28173: PUSH
28174: LD_EXP 122
28178: AND
28179: IFFALSE 28270
28181: GO 28183
28183: DISABLE
28184: LD_INT 0
28186: PPUSH
// begin enable ;
28187: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28188: LD_ADDR_VAR 0 1
28192: PUSH
28193: LD_INT 22
28195: PUSH
28196: LD_OWVAR 2
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 21
28207: PUSH
28208: LD_INT 2
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 33
28217: PUSH
28218: LD_INT 3
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: LIST
28229: PPUSH
28230: CALL_OW 69
28234: ST_TO_ADDR
// if not tmp then
28235: LD_VAR 0 1
28239: NOT
28240: IFFALSE 28244
// exit ;
28242: GO 28270
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28244: LD_VAR 0 1
28248: PUSH
28249: LD_INT 1
28251: PPUSH
28252: LD_VAR 0 1
28256: PPUSH
28257: CALL_OW 12
28261: ARRAY
28262: PPUSH
28263: LD_INT 1
28265: PPUSH
28266: CALL_OW 234
// end ;
28270: PPOPN 1
28272: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28273: LD_EXP 81
28277: PUSH
28278: LD_EXP 123
28282: AND
28283: IFFALSE 28424
28285: GO 28287
28287: DISABLE
28288: LD_INT 0
28290: PPUSH
28291: PPUSH
28292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28293: LD_ADDR_VAR 0 3
28297: PUSH
28298: LD_INT 22
28300: PUSH
28301: LD_OWVAR 2
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 25
28312: PUSH
28313: LD_INT 1
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PPUSH
28324: CALL_OW 69
28328: ST_TO_ADDR
// if not tmp then
28329: LD_VAR 0 3
28333: NOT
28334: IFFALSE 28338
// exit ;
28336: GO 28424
// un := tmp [ rand ( 1 , tmp ) ] ;
28338: LD_ADDR_VAR 0 2
28342: PUSH
28343: LD_VAR 0 3
28347: PUSH
28348: LD_INT 1
28350: PPUSH
28351: LD_VAR 0 3
28355: PPUSH
28356: CALL_OW 12
28360: ARRAY
28361: ST_TO_ADDR
// if Crawls ( un ) then
28362: LD_VAR 0 2
28366: PPUSH
28367: CALL_OW 318
28371: IFFALSE 28382
// ComWalk ( un ) ;
28373: LD_VAR 0 2
28377: PPUSH
28378: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28382: LD_VAR 0 2
28386: PPUSH
28387: LD_INT 9
28389: PPUSH
28390: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28394: LD_INT 28
28396: PPUSH
28397: LD_OWVAR 2
28401: PPUSH
28402: LD_INT 2
28404: PPUSH
28405: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28409: LD_INT 29
28411: PPUSH
28412: LD_OWVAR 2
28416: PPUSH
28417: LD_INT 2
28419: PPUSH
28420: CALL_OW 322
// end ;
28424: PPOPN 3
28426: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28427: LD_EXP 81
28431: PUSH
28432: LD_EXP 124
28436: AND
28437: IFFALSE 28548
28439: GO 28441
28441: DISABLE
28442: LD_INT 0
28444: PPUSH
28445: PPUSH
28446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28447: LD_ADDR_VAR 0 3
28451: PUSH
28452: LD_INT 22
28454: PUSH
28455: LD_OWVAR 2
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 25
28466: PUSH
28467: LD_INT 1
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PPUSH
28478: CALL_OW 69
28482: ST_TO_ADDR
// if not tmp then
28483: LD_VAR 0 3
28487: NOT
28488: IFFALSE 28492
// exit ;
28490: GO 28548
// un := tmp [ rand ( 1 , tmp ) ] ;
28492: LD_ADDR_VAR 0 2
28496: PUSH
28497: LD_VAR 0 3
28501: PUSH
28502: LD_INT 1
28504: PPUSH
28505: LD_VAR 0 3
28509: PPUSH
28510: CALL_OW 12
28514: ARRAY
28515: ST_TO_ADDR
// if Crawls ( un ) then
28516: LD_VAR 0 2
28520: PPUSH
28521: CALL_OW 318
28525: IFFALSE 28536
// ComWalk ( un ) ;
28527: LD_VAR 0 2
28531: PPUSH
28532: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28536: LD_VAR 0 2
28540: PPUSH
28541: LD_INT 8
28543: PPUSH
28544: CALL_OW 336
// end ;
28548: PPOPN 3
28550: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28551: LD_EXP 81
28555: PUSH
28556: LD_EXP 125
28560: AND
28561: IFFALSE 28705
28563: GO 28565
28565: DISABLE
28566: LD_INT 0
28568: PPUSH
28569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28570: LD_ADDR_VAR 0 2
28574: PUSH
28575: LD_INT 22
28577: PUSH
28578: LD_OWVAR 2
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 21
28589: PUSH
28590: LD_INT 2
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 2
28599: PUSH
28600: LD_INT 34
28602: PUSH
28603: LD_INT 12
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: LD_INT 34
28612: PUSH
28613: LD_INT 51
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 34
28622: PUSH
28623: LD_INT 32
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: LIST
28640: PPUSH
28641: CALL_OW 69
28645: ST_TO_ADDR
// if not tmp then
28646: LD_VAR 0 2
28650: NOT
28651: IFFALSE 28655
// exit ;
28653: GO 28705
// for i in tmp do
28655: LD_ADDR_VAR 0 1
28659: PUSH
28660: LD_VAR 0 2
28664: PUSH
28665: FOR_IN
28666: IFFALSE 28703
// if GetCargo ( i , mat_artifact ) = 0 then
28668: LD_VAR 0 1
28672: PPUSH
28673: LD_INT 4
28675: PPUSH
28676: CALL_OW 289
28680: PUSH
28681: LD_INT 0
28683: EQUAL
28684: IFFALSE 28701
// SetCargo ( i , mat_siberit , 100 ) ;
28686: LD_VAR 0 1
28690: PPUSH
28691: LD_INT 3
28693: PPUSH
28694: LD_INT 100
28696: PPUSH
28697: CALL_OW 290
28701: GO 28665
28703: POP
28704: POP
// end ;
28705: PPOPN 2
28707: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28708: LD_EXP 81
28712: PUSH
28713: LD_EXP 126
28717: AND
28718: IFFALSE 28901
28720: GO 28722
28722: DISABLE
28723: LD_INT 0
28725: PPUSH
28726: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28727: LD_ADDR_VAR 0 2
28731: PUSH
28732: LD_INT 22
28734: PUSH
28735: LD_OWVAR 2
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PPUSH
28744: CALL_OW 69
28748: ST_TO_ADDR
// if not tmp then
28749: LD_VAR 0 2
28753: NOT
28754: IFFALSE 28758
// exit ;
28756: GO 28901
// for i := 1 to 2 do
28758: LD_ADDR_VAR 0 1
28762: PUSH
28763: DOUBLE
28764: LD_INT 1
28766: DEC
28767: ST_TO_ADDR
28768: LD_INT 2
28770: PUSH
28771: FOR_TO
28772: IFFALSE 28899
// begin uc_side := your_side ;
28774: LD_ADDR_OWVAR 20
28778: PUSH
28779: LD_OWVAR 2
28783: ST_TO_ADDR
// uc_nation := nation_american ;
28784: LD_ADDR_OWVAR 21
28788: PUSH
28789: LD_INT 1
28791: ST_TO_ADDR
// vc_chassis := us_morphling ;
28792: LD_ADDR_OWVAR 37
28796: PUSH
28797: LD_INT 5
28799: ST_TO_ADDR
// vc_engine := engine_siberite ;
28800: LD_ADDR_OWVAR 39
28804: PUSH
28805: LD_INT 3
28807: ST_TO_ADDR
// vc_control := control_computer ;
28808: LD_ADDR_OWVAR 38
28812: PUSH
28813: LD_INT 3
28815: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28816: LD_ADDR_OWVAR 40
28820: PUSH
28821: LD_INT 10
28823: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28824: LD_VAR 0 2
28828: PUSH
28829: LD_INT 1
28831: ARRAY
28832: PPUSH
28833: CALL_OW 310
28837: NOT
28838: IFFALSE 28885
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28840: CALL_OW 45
28844: PPUSH
28845: LD_VAR 0 2
28849: PUSH
28850: LD_INT 1
28852: ARRAY
28853: PPUSH
28854: CALL_OW 250
28858: PPUSH
28859: LD_VAR 0 2
28863: PUSH
28864: LD_INT 1
28866: ARRAY
28867: PPUSH
28868: CALL_OW 251
28872: PPUSH
28873: LD_INT 12
28875: PPUSH
28876: LD_INT 1
28878: PPUSH
28879: CALL_OW 50
28883: GO 28897
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28885: CALL_OW 45
28889: PPUSH
28890: LD_INT 1
28892: PPUSH
28893: CALL_OW 51
// end ;
28897: GO 28771
28899: POP
28900: POP
// end ;
28901: PPOPN 2
28903: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28904: LD_EXP 81
28908: PUSH
28909: LD_EXP 127
28913: AND
28914: IFFALSE 29136
28916: GO 28918
28918: DISABLE
28919: LD_INT 0
28921: PPUSH
28922: PPUSH
28923: PPUSH
28924: PPUSH
28925: PPUSH
28926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28927: LD_ADDR_VAR 0 6
28931: PUSH
28932: LD_INT 22
28934: PUSH
28935: LD_OWVAR 2
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 21
28946: PUSH
28947: LD_INT 1
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 3
28956: PUSH
28957: LD_INT 23
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: LIST
28975: PPUSH
28976: CALL_OW 69
28980: ST_TO_ADDR
// if not tmp then
28981: LD_VAR 0 6
28985: NOT
28986: IFFALSE 28990
// exit ;
28988: GO 29136
// s1 := rand ( 1 , 4 ) ;
28990: LD_ADDR_VAR 0 2
28994: PUSH
28995: LD_INT 1
28997: PPUSH
28998: LD_INT 4
29000: PPUSH
29001: CALL_OW 12
29005: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29006: LD_ADDR_VAR 0 4
29010: PUSH
29011: LD_VAR 0 6
29015: PUSH
29016: LD_INT 1
29018: ARRAY
29019: PPUSH
29020: LD_VAR 0 2
29024: PPUSH
29025: CALL_OW 259
29029: ST_TO_ADDR
// if s1 = 1 then
29030: LD_VAR 0 2
29034: PUSH
29035: LD_INT 1
29037: EQUAL
29038: IFFALSE 29058
// s2 := rand ( 2 , 4 ) else
29040: LD_ADDR_VAR 0 3
29044: PUSH
29045: LD_INT 2
29047: PPUSH
29048: LD_INT 4
29050: PPUSH
29051: CALL_OW 12
29055: ST_TO_ADDR
29056: GO 29066
// s2 := 1 ;
29058: LD_ADDR_VAR 0 3
29062: PUSH
29063: LD_INT 1
29065: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29066: LD_ADDR_VAR 0 5
29070: PUSH
29071: LD_VAR 0 6
29075: PUSH
29076: LD_INT 1
29078: ARRAY
29079: PPUSH
29080: LD_VAR 0 3
29084: PPUSH
29085: CALL_OW 259
29089: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29090: LD_VAR 0 6
29094: PUSH
29095: LD_INT 1
29097: ARRAY
29098: PPUSH
29099: LD_VAR 0 2
29103: PPUSH
29104: LD_VAR 0 5
29108: PPUSH
29109: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29113: LD_VAR 0 6
29117: PUSH
29118: LD_INT 1
29120: ARRAY
29121: PPUSH
29122: LD_VAR 0 3
29126: PPUSH
29127: LD_VAR 0 4
29131: PPUSH
29132: CALL_OW 237
// end ;
29136: PPOPN 6
29138: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29139: LD_EXP 81
29143: PUSH
29144: LD_EXP 128
29148: AND
29149: IFFALSE 29228
29151: GO 29153
29153: DISABLE
29154: LD_INT 0
29156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29157: LD_ADDR_VAR 0 1
29161: PUSH
29162: LD_INT 22
29164: PUSH
29165: LD_OWVAR 2
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 30
29176: PUSH
29177: LD_INT 3
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PPUSH
29188: CALL_OW 69
29192: ST_TO_ADDR
// if not tmp then
29193: LD_VAR 0 1
29197: NOT
29198: IFFALSE 29202
// exit ;
29200: GO 29228
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29202: LD_VAR 0 1
29206: PUSH
29207: LD_INT 1
29209: PPUSH
29210: LD_VAR 0 1
29214: PPUSH
29215: CALL_OW 12
29219: ARRAY
29220: PPUSH
29221: LD_INT 1
29223: PPUSH
29224: CALL_OW 234
// end ;
29228: PPOPN 1
29230: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29231: LD_EXP 81
29235: PUSH
29236: LD_EXP 129
29240: AND
29241: IFFALSE 29353
29243: GO 29245
29245: DISABLE
29246: LD_INT 0
29248: PPUSH
29249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29250: LD_ADDR_VAR 0 2
29254: PUSH
29255: LD_INT 22
29257: PUSH
29258: LD_OWVAR 2
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 2
29269: PUSH
29270: LD_INT 30
29272: PUSH
29273: LD_INT 27
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 30
29282: PUSH
29283: LD_INT 26
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 30
29292: PUSH
29293: LD_INT 28
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PPUSH
29310: CALL_OW 69
29314: ST_TO_ADDR
// if not tmp then
29315: LD_VAR 0 2
29319: NOT
29320: IFFALSE 29324
// exit ;
29322: GO 29353
// for i in tmp do
29324: LD_ADDR_VAR 0 1
29328: PUSH
29329: LD_VAR 0 2
29333: PUSH
29334: FOR_IN
29335: IFFALSE 29351
// SetLives ( i , 1 ) ;
29337: LD_VAR 0 1
29341: PPUSH
29342: LD_INT 1
29344: PPUSH
29345: CALL_OW 234
29349: GO 29334
29351: POP
29352: POP
// end ;
29353: PPOPN 2
29355: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29356: LD_EXP 81
29360: PUSH
29361: LD_EXP 130
29365: AND
29366: IFFALSE 29653
29368: GO 29370
29370: DISABLE
29371: LD_INT 0
29373: PPUSH
29374: PPUSH
29375: PPUSH
// begin i := rand ( 1 , 7 ) ;
29376: LD_ADDR_VAR 0 1
29380: PUSH
29381: LD_INT 1
29383: PPUSH
29384: LD_INT 7
29386: PPUSH
29387: CALL_OW 12
29391: ST_TO_ADDR
// case i of 1 :
29392: LD_VAR 0 1
29396: PUSH
29397: LD_INT 1
29399: DOUBLE
29400: EQUAL
29401: IFTRUE 29405
29403: GO 29415
29405: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29406: LD_STRING earthquake(getX(game), 0, 32)
29408: PPUSH
29409: CALL_OW 559
29413: GO 29653
29415: LD_INT 2
29417: DOUBLE
29418: EQUAL
29419: IFTRUE 29423
29421: GO 29437
29423: POP
// begin ToLua ( displayStucuk(); ) ;
29424: LD_STRING displayStucuk();
29426: PPUSH
29427: CALL_OW 559
// ResetFog ;
29431: CALL_OW 335
// end ; 3 :
29435: GO 29653
29437: LD_INT 3
29439: DOUBLE
29440: EQUAL
29441: IFTRUE 29445
29443: GO 29549
29445: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29446: LD_ADDR_VAR 0 2
29450: PUSH
29451: LD_INT 22
29453: PUSH
29454: LD_OWVAR 2
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 25
29465: PUSH
29466: LD_INT 1
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PPUSH
29477: CALL_OW 69
29481: ST_TO_ADDR
// if not tmp then
29482: LD_VAR 0 2
29486: NOT
29487: IFFALSE 29491
// exit ;
29489: GO 29653
// un := tmp [ rand ( 1 , tmp ) ] ;
29491: LD_ADDR_VAR 0 3
29495: PUSH
29496: LD_VAR 0 2
29500: PUSH
29501: LD_INT 1
29503: PPUSH
29504: LD_VAR 0 2
29508: PPUSH
29509: CALL_OW 12
29513: ARRAY
29514: ST_TO_ADDR
// if Crawls ( un ) then
29515: LD_VAR 0 3
29519: PPUSH
29520: CALL_OW 318
29524: IFFALSE 29535
// ComWalk ( un ) ;
29526: LD_VAR 0 3
29530: PPUSH
29531: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29535: LD_VAR 0 3
29539: PPUSH
29540: LD_INT 8
29542: PPUSH
29543: CALL_OW 336
// end ; 4 :
29547: GO 29653
29549: LD_INT 4
29551: DOUBLE
29552: EQUAL
29553: IFTRUE 29557
29555: GO 29631
29557: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29558: LD_ADDR_VAR 0 2
29562: PUSH
29563: LD_INT 22
29565: PUSH
29566: LD_OWVAR 2
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 30
29577: PUSH
29578: LD_INT 29
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PPUSH
29589: CALL_OW 69
29593: ST_TO_ADDR
// if not tmp then
29594: LD_VAR 0 2
29598: NOT
29599: IFFALSE 29603
// exit ;
29601: GO 29653
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29603: LD_VAR 0 2
29607: PUSH
29608: LD_INT 1
29610: ARRAY
29611: PPUSH
29612: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29616: LD_VAR 0 2
29620: PUSH
29621: LD_INT 1
29623: ARRAY
29624: PPUSH
29625: CALL_OW 65
// end ; 5 .. 7 :
29629: GO 29653
29631: LD_INT 5
29633: DOUBLE
29634: GREATEREQUAL
29635: IFFALSE 29643
29637: LD_INT 7
29639: DOUBLE
29640: LESSEQUAL
29641: IFTRUE 29645
29643: GO 29652
29645: POP
// StreamSibBomb ; end ;
29646: CALL 25890 0 0
29650: GO 29653
29652: POP
// end ;
29653: PPOPN 3
29655: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29656: LD_EXP 81
29660: PUSH
29661: LD_EXP 131
29665: AND
29666: IFFALSE 29822
29668: GO 29670
29670: DISABLE
29671: LD_INT 0
29673: PPUSH
29674: PPUSH
29675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29676: LD_ADDR_VAR 0 2
29680: PUSH
29681: LD_INT 81
29683: PUSH
29684: LD_OWVAR 2
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 2
29695: PUSH
29696: LD_INT 21
29698: PUSH
29699: LD_INT 1
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 21
29708: PUSH
29709: LD_INT 2
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: LIST
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PPUSH
29725: CALL_OW 69
29729: ST_TO_ADDR
// if not tmp then
29730: LD_VAR 0 2
29734: NOT
29735: IFFALSE 29739
// exit ;
29737: GO 29822
// p := 0 ;
29739: LD_ADDR_VAR 0 3
29743: PUSH
29744: LD_INT 0
29746: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29747: LD_INT 35
29749: PPUSH
29750: CALL_OW 67
// p := p + 1 ;
29754: LD_ADDR_VAR 0 3
29758: PUSH
29759: LD_VAR 0 3
29763: PUSH
29764: LD_INT 1
29766: PLUS
29767: ST_TO_ADDR
// for i in tmp do
29768: LD_ADDR_VAR 0 1
29772: PUSH
29773: LD_VAR 0 2
29777: PUSH
29778: FOR_IN
29779: IFFALSE 29810
// if GetLives ( i ) < 1000 then
29781: LD_VAR 0 1
29785: PPUSH
29786: CALL_OW 256
29790: PUSH
29791: LD_INT 1000
29793: LESS
29794: IFFALSE 29808
// SetLives ( i , 1000 ) ;
29796: LD_VAR 0 1
29800: PPUSH
29801: LD_INT 1000
29803: PPUSH
29804: CALL_OW 234
29808: GO 29778
29810: POP
29811: POP
// until p > 20 ;
29812: LD_VAR 0 3
29816: PUSH
29817: LD_INT 20
29819: GREATER
29820: IFFALSE 29747
// end ;
29822: PPOPN 3
29824: END
// every 0 0$1 trigger StreamModeActive and sTime do
29825: LD_EXP 81
29829: PUSH
29830: LD_EXP 132
29834: AND
29835: IFFALSE 29870
29837: GO 29839
29839: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29840: LD_INT 28
29842: PPUSH
29843: LD_OWVAR 2
29847: PPUSH
29848: LD_INT 2
29850: PPUSH
29851: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29855: LD_INT 30
29857: PPUSH
29858: LD_OWVAR 2
29862: PPUSH
29863: LD_INT 2
29865: PPUSH
29866: CALL_OW 322
// end ;
29870: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29871: LD_EXP 81
29875: PUSH
29876: LD_EXP 133
29880: AND
29881: IFFALSE 30002
29883: GO 29885
29885: DISABLE
29886: LD_INT 0
29888: PPUSH
29889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29890: LD_ADDR_VAR 0 2
29894: PUSH
29895: LD_INT 22
29897: PUSH
29898: LD_OWVAR 2
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 21
29909: PUSH
29910: LD_INT 1
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 3
29919: PUSH
29920: LD_INT 23
29922: PUSH
29923: LD_INT 0
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: LIST
29938: PPUSH
29939: CALL_OW 69
29943: ST_TO_ADDR
// if not tmp then
29944: LD_VAR 0 2
29948: NOT
29949: IFFALSE 29953
// exit ;
29951: GO 30002
// for i in tmp do
29953: LD_ADDR_VAR 0 1
29957: PUSH
29958: LD_VAR 0 2
29962: PUSH
29963: FOR_IN
29964: IFFALSE 30000
// begin if Crawls ( i ) then
29966: LD_VAR 0 1
29970: PPUSH
29971: CALL_OW 318
29975: IFFALSE 29986
// ComWalk ( i ) ;
29977: LD_VAR 0 1
29981: PPUSH
29982: CALL_OW 138
// SetClass ( i , 2 ) ;
29986: LD_VAR 0 1
29990: PPUSH
29991: LD_INT 2
29993: PPUSH
29994: CALL_OW 336
// end ;
29998: GO 29963
30000: POP
30001: POP
// end ;
30002: PPOPN 2
30004: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30005: LD_EXP 81
30009: PUSH
30010: LD_EXP 134
30014: AND
30015: IFFALSE 30303
30017: GO 30019
30019: DISABLE
30020: LD_INT 0
30022: PPUSH
30023: PPUSH
30024: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30025: LD_OWVAR 2
30029: PPUSH
30030: LD_INT 9
30032: PPUSH
30033: LD_INT 1
30035: PPUSH
30036: LD_INT 1
30038: PPUSH
30039: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30043: LD_INT 9
30045: PPUSH
30046: LD_OWVAR 2
30050: PPUSH
30051: CALL_OW 343
// uc_side := 9 ;
30055: LD_ADDR_OWVAR 20
30059: PUSH
30060: LD_INT 9
30062: ST_TO_ADDR
// uc_nation := 2 ;
30063: LD_ADDR_OWVAR 21
30067: PUSH
30068: LD_INT 2
30070: ST_TO_ADDR
// hc_name := Dark Warrior ;
30071: LD_ADDR_OWVAR 26
30075: PUSH
30076: LD_STRING Dark Warrior
30078: ST_TO_ADDR
// hc_gallery :=  ;
30079: LD_ADDR_OWVAR 33
30083: PUSH
30084: LD_STRING 
30086: ST_TO_ADDR
// hc_noskilllimit := true ;
30087: LD_ADDR_OWVAR 76
30091: PUSH
30092: LD_INT 1
30094: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30095: LD_ADDR_OWVAR 31
30099: PUSH
30100: LD_INT 30
30102: PUSH
30103: LD_INT 30
30105: PUSH
30106: LD_INT 30
30108: PUSH
30109: LD_INT 30
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: ST_TO_ADDR
// un := CreateHuman ;
30118: LD_ADDR_VAR 0 3
30122: PUSH
30123: CALL_OW 44
30127: ST_TO_ADDR
// hc_noskilllimit := false ;
30128: LD_ADDR_OWVAR 76
30132: PUSH
30133: LD_INT 0
30135: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30136: LD_VAR 0 3
30140: PPUSH
30141: LD_INT 1
30143: PPUSH
30144: CALL_OW 51
// ToLua ( playRanger() ) ;
30148: LD_STRING playRanger()
30150: PPUSH
30151: CALL_OW 559
// p := 0 ;
30155: LD_ADDR_VAR 0 2
30159: PUSH
30160: LD_INT 0
30162: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30163: LD_INT 35
30165: PPUSH
30166: CALL_OW 67
// p := p + 1 ;
30170: LD_ADDR_VAR 0 2
30174: PUSH
30175: LD_VAR 0 2
30179: PUSH
30180: LD_INT 1
30182: PLUS
30183: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30184: LD_VAR 0 3
30188: PPUSH
30189: CALL_OW 256
30193: PUSH
30194: LD_INT 1000
30196: LESS
30197: IFFALSE 30211
// SetLives ( un , 1000 ) ;
30199: LD_VAR 0 3
30203: PPUSH
30204: LD_INT 1000
30206: PPUSH
30207: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30211: LD_VAR 0 3
30215: PPUSH
30216: LD_INT 81
30218: PUSH
30219: LD_OWVAR 2
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 91
30230: PUSH
30231: LD_VAR 0 3
30235: PUSH
30236: LD_INT 30
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: LIST
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PPUSH
30248: CALL_OW 69
30252: PPUSH
30253: LD_VAR 0 3
30257: PPUSH
30258: CALL_OW 74
30262: PPUSH
30263: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30267: LD_VAR 0 2
30271: PUSH
30272: LD_INT 80
30274: GREATER
30275: PUSH
30276: LD_VAR 0 3
30280: PPUSH
30281: CALL_OW 301
30285: OR
30286: IFFALSE 30163
// if un then
30288: LD_VAR 0 3
30292: IFFALSE 30303
// RemoveUnit ( un ) ;
30294: LD_VAR 0 3
30298: PPUSH
30299: CALL_OW 64
// end ;
30303: PPOPN 3
30305: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30306: LD_EXP 135
30310: IFFALSE 30426
30312: GO 30314
30314: DISABLE
30315: LD_INT 0
30317: PPUSH
30318: PPUSH
30319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30320: LD_ADDR_VAR 0 2
30324: PUSH
30325: LD_INT 81
30327: PUSH
30328: LD_OWVAR 2
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 21
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PPUSH
30351: CALL_OW 69
30355: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30356: LD_STRING playComputer()
30358: PPUSH
30359: CALL_OW 559
// if not tmp then
30363: LD_VAR 0 2
30367: NOT
30368: IFFALSE 30372
// exit ;
30370: GO 30426
// for i in tmp do
30372: LD_ADDR_VAR 0 1
30376: PUSH
30377: LD_VAR 0 2
30381: PUSH
30382: FOR_IN
30383: IFFALSE 30424
// for j := 1 to 4 do
30385: LD_ADDR_VAR 0 3
30389: PUSH
30390: DOUBLE
30391: LD_INT 1
30393: DEC
30394: ST_TO_ADDR
30395: LD_INT 4
30397: PUSH
30398: FOR_TO
30399: IFFALSE 30420
// SetSkill ( i , j , 10 ) ;
30401: LD_VAR 0 1
30405: PPUSH
30406: LD_VAR 0 3
30410: PPUSH
30411: LD_INT 10
30413: PPUSH
30414: CALL_OW 237
30418: GO 30398
30420: POP
30421: POP
30422: GO 30382
30424: POP
30425: POP
// end ;
30426: PPOPN 3
30428: END
// every 0 0$1 trigger s30 do var i , tmp ;
30429: LD_EXP 136
30433: IFFALSE 30502
30435: GO 30437
30437: DISABLE
30438: LD_INT 0
30440: PPUSH
30441: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30442: LD_ADDR_VAR 0 2
30446: PUSH
30447: LD_INT 22
30449: PUSH
30450: LD_OWVAR 2
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PPUSH
30459: CALL_OW 69
30463: ST_TO_ADDR
// if not tmp then
30464: LD_VAR 0 2
30468: NOT
30469: IFFALSE 30473
// exit ;
30471: GO 30502
// for i in tmp do
30473: LD_ADDR_VAR 0 1
30477: PUSH
30478: LD_VAR 0 2
30482: PUSH
30483: FOR_IN
30484: IFFALSE 30500
// SetLives ( i , 300 ) ;
30486: LD_VAR 0 1
30490: PPUSH
30491: LD_INT 300
30493: PPUSH
30494: CALL_OW 234
30498: GO 30483
30500: POP
30501: POP
// end ;
30502: PPOPN 2
30504: END
// every 0 0$1 trigger s60 do var i , tmp ;
30505: LD_EXP 137
30509: IFFALSE 30578
30511: GO 30513
30513: DISABLE
30514: LD_INT 0
30516: PPUSH
30517: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30518: LD_ADDR_VAR 0 2
30522: PUSH
30523: LD_INT 22
30525: PUSH
30526: LD_OWVAR 2
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PPUSH
30535: CALL_OW 69
30539: ST_TO_ADDR
// if not tmp then
30540: LD_VAR 0 2
30544: NOT
30545: IFFALSE 30549
// exit ;
30547: GO 30578
// for i in tmp do
30549: LD_ADDR_VAR 0 1
30553: PUSH
30554: LD_VAR 0 2
30558: PUSH
30559: FOR_IN
30560: IFFALSE 30576
// SetLives ( i , 600 ) ;
30562: LD_VAR 0 1
30566: PPUSH
30567: LD_INT 600
30569: PPUSH
30570: CALL_OW 234
30574: GO 30559
30576: POP
30577: POP
// end ;
30578: PPOPN 2
30580: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30581: LD_INT 0
30583: PPUSH
// case cmd of 301 :
30584: LD_VAR 0 1
30588: PUSH
30589: LD_INT 301
30591: DOUBLE
30592: EQUAL
30593: IFTRUE 30597
30595: GO 30629
30597: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30598: LD_VAR 0 6
30602: PPUSH
30603: LD_VAR 0 7
30607: PPUSH
30608: LD_VAR 0 8
30612: PPUSH
30613: LD_VAR 0 4
30617: PPUSH
30618: LD_VAR 0 5
30622: PPUSH
30623: CALL 31830 0 5
30627: GO 30750
30629: LD_INT 302
30631: DOUBLE
30632: EQUAL
30633: IFTRUE 30637
30635: GO 30674
30637: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30638: LD_VAR 0 6
30642: PPUSH
30643: LD_VAR 0 7
30647: PPUSH
30648: LD_VAR 0 8
30652: PPUSH
30653: LD_VAR 0 9
30657: PPUSH
30658: LD_VAR 0 4
30662: PPUSH
30663: LD_VAR 0 5
30667: PPUSH
30668: CALL 31921 0 6
30672: GO 30750
30674: LD_INT 303
30676: DOUBLE
30677: EQUAL
30678: IFTRUE 30682
30680: GO 30719
30682: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30683: LD_VAR 0 6
30687: PPUSH
30688: LD_VAR 0 7
30692: PPUSH
30693: LD_VAR 0 8
30697: PPUSH
30698: LD_VAR 0 9
30702: PPUSH
30703: LD_VAR 0 4
30707: PPUSH
30708: LD_VAR 0 5
30712: PPUSH
30713: CALL 30755 0 6
30717: GO 30750
30719: LD_INT 304
30721: DOUBLE
30722: EQUAL
30723: IFTRUE 30727
30725: GO 30749
30727: POP
// hHackTeleport ( unit , x , y ) ; end ;
30728: LD_VAR 0 2
30732: PPUSH
30733: LD_VAR 0 4
30737: PPUSH
30738: LD_VAR 0 5
30742: PPUSH
30743: CALL 32514 0 3
30747: GO 30750
30749: POP
// end ;
30750: LD_VAR 0 12
30754: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30755: LD_INT 0
30757: PPUSH
30758: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30759: LD_VAR 0 1
30763: PUSH
30764: LD_INT 1
30766: LESS
30767: PUSH
30768: LD_VAR 0 1
30772: PUSH
30773: LD_INT 3
30775: GREATER
30776: OR
30777: PUSH
30778: LD_VAR 0 5
30782: PPUSH
30783: LD_VAR 0 6
30787: PPUSH
30788: CALL_OW 428
30792: OR
30793: IFFALSE 30797
// exit ;
30795: GO 31517
// uc_side := your_side ;
30797: LD_ADDR_OWVAR 20
30801: PUSH
30802: LD_OWVAR 2
30806: ST_TO_ADDR
// uc_nation := nation ;
30807: LD_ADDR_OWVAR 21
30811: PUSH
30812: LD_VAR 0 1
30816: ST_TO_ADDR
// bc_level = 1 ;
30817: LD_ADDR_OWVAR 43
30821: PUSH
30822: LD_INT 1
30824: ST_TO_ADDR
// case btype of 1 :
30825: LD_VAR 0 2
30829: PUSH
30830: LD_INT 1
30832: DOUBLE
30833: EQUAL
30834: IFTRUE 30838
30836: GO 30849
30838: POP
// bc_type := b_depot ; 2 :
30839: LD_ADDR_OWVAR 42
30843: PUSH
30844: LD_INT 0
30846: ST_TO_ADDR
30847: GO 31461
30849: LD_INT 2
30851: DOUBLE
30852: EQUAL
30853: IFTRUE 30857
30855: GO 30868
30857: POP
// bc_type := b_warehouse ; 3 :
30858: LD_ADDR_OWVAR 42
30862: PUSH
30863: LD_INT 1
30865: ST_TO_ADDR
30866: GO 31461
30868: LD_INT 3
30870: DOUBLE
30871: EQUAL
30872: IFTRUE 30876
30874: GO 30887
30876: POP
// bc_type := b_lab ; 4 .. 9 :
30877: LD_ADDR_OWVAR 42
30881: PUSH
30882: LD_INT 6
30884: ST_TO_ADDR
30885: GO 31461
30887: LD_INT 4
30889: DOUBLE
30890: GREATEREQUAL
30891: IFFALSE 30899
30893: LD_INT 9
30895: DOUBLE
30896: LESSEQUAL
30897: IFTRUE 30901
30899: GO 30953
30901: POP
// begin bc_type := b_lab_half ;
30902: LD_ADDR_OWVAR 42
30906: PUSH
30907: LD_INT 7
30909: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30910: LD_ADDR_OWVAR 44
30914: PUSH
30915: LD_INT 10
30917: PUSH
30918: LD_INT 11
30920: PUSH
30921: LD_INT 12
30923: PUSH
30924: LD_INT 15
30926: PUSH
30927: LD_INT 14
30929: PUSH
30930: LD_INT 13
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: PUSH
30941: LD_VAR 0 2
30945: PUSH
30946: LD_INT 3
30948: MINUS
30949: ARRAY
30950: ST_TO_ADDR
// end ; 10 .. 13 :
30951: GO 31461
30953: LD_INT 10
30955: DOUBLE
30956: GREATEREQUAL
30957: IFFALSE 30965
30959: LD_INT 13
30961: DOUBLE
30962: LESSEQUAL
30963: IFTRUE 30967
30965: GO 31044
30967: POP
// begin bc_type := b_lab_full ;
30968: LD_ADDR_OWVAR 42
30972: PUSH
30973: LD_INT 8
30975: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30976: LD_ADDR_OWVAR 44
30980: PUSH
30981: LD_INT 10
30983: PUSH
30984: LD_INT 12
30986: PUSH
30987: LD_INT 14
30989: PUSH
30990: LD_INT 13
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: PUSH
30999: LD_VAR 0 2
31003: PUSH
31004: LD_INT 9
31006: MINUS
31007: ARRAY
31008: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31009: LD_ADDR_OWVAR 45
31013: PUSH
31014: LD_INT 11
31016: PUSH
31017: LD_INT 15
31019: PUSH
31020: LD_INT 12
31022: PUSH
31023: LD_INT 15
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: PUSH
31032: LD_VAR 0 2
31036: PUSH
31037: LD_INT 9
31039: MINUS
31040: ARRAY
31041: ST_TO_ADDR
// end ; 14 :
31042: GO 31461
31044: LD_INT 14
31046: DOUBLE
31047: EQUAL
31048: IFTRUE 31052
31050: GO 31063
31052: POP
// bc_type := b_workshop ; 15 :
31053: LD_ADDR_OWVAR 42
31057: PUSH
31058: LD_INT 2
31060: ST_TO_ADDR
31061: GO 31461
31063: LD_INT 15
31065: DOUBLE
31066: EQUAL
31067: IFTRUE 31071
31069: GO 31082
31071: POP
// bc_type := b_factory ; 16 :
31072: LD_ADDR_OWVAR 42
31076: PUSH
31077: LD_INT 3
31079: ST_TO_ADDR
31080: GO 31461
31082: LD_INT 16
31084: DOUBLE
31085: EQUAL
31086: IFTRUE 31090
31088: GO 31101
31090: POP
// bc_type := b_ext_gun ; 17 :
31091: LD_ADDR_OWVAR 42
31095: PUSH
31096: LD_INT 17
31098: ST_TO_ADDR
31099: GO 31461
31101: LD_INT 17
31103: DOUBLE
31104: EQUAL
31105: IFTRUE 31109
31107: GO 31137
31109: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31110: LD_ADDR_OWVAR 42
31114: PUSH
31115: LD_INT 19
31117: PUSH
31118: LD_INT 23
31120: PUSH
31121: LD_INT 19
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: LIST
31128: PUSH
31129: LD_VAR 0 1
31133: ARRAY
31134: ST_TO_ADDR
31135: GO 31461
31137: LD_INT 18
31139: DOUBLE
31140: EQUAL
31141: IFTRUE 31145
31143: GO 31156
31145: POP
// bc_type := b_ext_radar ; 19 :
31146: LD_ADDR_OWVAR 42
31150: PUSH
31151: LD_INT 20
31153: ST_TO_ADDR
31154: GO 31461
31156: LD_INT 19
31158: DOUBLE
31159: EQUAL
31160: IFTRUE 31164
31162: GO 31175
31164: POP
// bc_type := b_ext_radio ; 20 :
31165: LD_ADDR_OWVAR 42
31169: PUSH
31170: LD_INT 22
31172: ST_TO_ADDR
31173: GO 31461
31175: LD_INT 20
31177: DOUBLE
31178: EQUAL
31179: IFTRUE 31183
31181: GO 31194
31183: POP
// bc_type := b_ext_siberium ; 21 :
31184: LD_ADDR_OWVAR 42
31188: PUSH
31189: LD_INT 21
31191: ST_TO_ADDR
31192: GO 31461
31194: LD_INT 21
31196: DOUBLE
31197: EQUAL
31198: IFTRUE 31202
31200: GO 31213
31202: POP
// bc_type := b_ext_computer ; 22 :
31203: LD_ADDR_OWVAR 42
31207: PUSH
31208: LD_INT 24
31210: ST_TO_ADDR
31211: GO 31461
31213: LD_INT 22
31215: DOUBLE
31216: EQUAL
31217: IFTRUE 31221
31219: GO 31232
31221: POP
// bc_type := b_ext_track ; 23 :
31222: LD_ADDR_OWVAR 42
31226: PUSH
31227: LD_INT 16
31229: ST_TO_ADDR
31230: GO 31461
31232: LD_INT 23
31234: DOUBLE
31235: EQUAL
31236: IFTRUE 31240
31238: GO 31251
31240: POP
// bc_type := b_ext_laser ; 24 :
31241: LD_ADDR_OWVAR 42
31245: PUSH
31246: LD_INT 25
31248: ST_TO_ADDR
31249: GO 31461
31251: LD_INT 24
31253: DOUBLE
31254: EQUAL
31255: IFTRUE 31259
31257: GO 31270
31259: POP
// bc_type := b_control_tower ; 25 :
31260: LD_ADDR_OWVAR 42
31264: PUSH
31265: LD_INT 36
31267: ST_TO_ADDR
31268: GO 31461
31270: LD_INT 25
31272: DOUBLE
31273: EQUAL
31274: IFTRUE 31278
31276: GO 31289
31278: POP
// bc_type := b_breastwork ; 26 :
31279: LD_ADDR_OWVAR 42
31283: PUSH
31284: LD_INT 31
31286: ST_TO_ADDR
31287: GO 31461
31289: LD_INT 26
31291: DOUBLE
31292: EQUAL
31293: IFTRUE 31297
31295: GO 31308
31297: POP
// bc_type := b_bunker ; 27 :
31298: LD_ADDR_OWVAR 42
31302: PUSH
31303: LD_INT 32
31305: ST_TO_ADDR
31306: GO 31461
31308: LD_INT 27
31310: DOUBLE
31311: EQUAL
31312: IFTRUE 31316
31314: GO 31327
31316: POP
// bc_type := b_turret ; 28 :
31317: LD_ADDR_OWVAR 42
31321: PUSH
31322: LD_INT 33
31324: ST_TO_ADDR
31325: GO 31461
31327: LD_INT 28
31329: DOUBLE
31330: EQUAL
31331: IFTRUE 31335
31333: GO 31346
31335: POP
// bc_type := b_armoury ; 29 :
31336: LD_ADDR_OWVAR 42
31340: PUSH
31341: LD_INT 4
31343: ST_TO_ADDR
31344: GO 31461
31346: LD_INT 29
31348: DOUBLE
31349: EQUAL
31350: IFTRUE 31354
31352: GO 31365
31354: POP
// bc_type := b_barracks ; 30 :
31355: LD_ADDR_OWVAR 42
31359: PUSH
31360: LD_INT 5
31362: ST_TO_ADDR
31363: GO 31461
31365: LD_INT 30
31367: DOUBLE
31368: EQUAL
31369: IFTRUE 31373
31371: GO 31384
31373: POP
// bc_type := b_solar_power ; 31 :
31374: LD_ADDR_OWVAR 42
31378: PUSH
31379: LD_INT 27
31381: ST_TO_ADDR
31382: GO 31461
31384: LD_INT 31
31386: DOUBLE
31387: EQUAL
31388: IFTRUE 31392
31390: GO 31403
31392: POP
// bc_type := b_oil_power ; 32 :
31393: LD_ADDR_OWVAR 42
31397: PUSH
31398: LD_INT 26
31400: ST_TO_ADDR
31401: GO 31461
31403: LD_INT 32
31405: DOUBLE
31406: EQUAL
31407: IFTRUE 31411
31409: GO 31422
31411: POP
// bc_type := b_siberite_power ; 33 :
31412: LD_ADDR_OWVAR 42
31416: PUSH
31417: LD_INT 28
31419: ST_TO_ADDR
31420: GO 31461
31422: LD_INT 33
31424: DOUBLE
31425: EQUAL
31426: IFTRUE 31430
31428: GO 31441
31430: POP
// bc_type := b_oil_mine ; 34 :
31431: LD_ADDR_OWVAR 42
31435: PUSH
31436: LD_INT 29
31438: ST_TO_ADDR
31439: GO 31461
31441: LD_INT 34
31443: DOUBLE
31444: EQUAL
31445: IFTRUE 31449
31447: GO 31460
31449: POP
// bc_type := b_siberite_mine ; end ;
31450: LD_ADDR_OWVAR 42
31454: PUSH
31455: LD_INT 30
31457: ST_TO_ADDR
31458: GO 31461
31460: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31461: LD_ADDR_VAR 0 8
31465: PUSH
31466: LD_VAR 0 5
31470: PPUSH
31471: LD_VAR 0 6
31475: PPUSH
31476: LD_VAR 0 3
31480: PPUSH
31481: CALL_OW 47
31485: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31486: LD_OWVAR 42
31490: PUSH
31491: LD_INT 32
31493: PUSH
31494: LD_INT 33
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: IN
31501: IFFALSE 31517
// PlaceWeaponTurret ( b , weapon ) ;
31503: LD_VAR 0 8
31507: PPUSH
31508: LD_VAR 0 4
31512: PPUSH
31513: CALL_OW 431
// end ;
31517: LD_VAR 0 7
31521: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31522: LD_INT 0
31524: PPUSH
31525: PPUSH
31526: PPUSH
31527: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31528: LD_ADDR_VAR 0 4
31532: PUSH
31533: LD_INT 22
31535: PUSH
31536: LD_OWVAR 2
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 2
31547: PUSH
31548: LD_INT 30
31550: PUSH
31551: LD_INT 0
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 30
31560: PUSH
31561: LD_INT 1
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: LIST
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PPUSH
31577: CALL_OW 69
31581: ST_TO_ADDR
// if not tmp then
31582: LD_VAR 0 4
31586: NOT
31587: IFFALSE 31591
// exit ;
31589: GO 31650
// for i in tmp do
31591: LD_ADDR_VAR 0 2
31595: PUSH
31596: LD_VAR 0 4
31600: PUSH
31601: FOR_IN
31602: IFFALSE 31648
// for j = 1 to 3 do
31604: LD_ADDR_VAR 0 3
31608: PUSH
31609: DOUBLE
31610: LD_INT 1
31612: DEC
31613: ST_TO_ADDR
31614: LD_INT 3
31616: PUSH
31617: FOR_TO
31618: IFFALSE 31644
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31620: LD_VAR 0 2
31624: PPUSH
31625: CALL_OW 274
31629: PPUSH
31630: LD_VAR 0 3
31634: PPUSH
31635: LD_INT 99999
31637: PPUSH
31638: CALL_OW 277
31642: GO 31617
31644: POP
31645: POP
31646: GO 31601
31648: POP
31649: POP
// end ;
31650: LD_VAR 0 1
31654: RET
// export function hHackSetLevel10 ; var i , j ; begin
31655: LD_INT 0
31657: PPUSH
31658: PPUSH
31659: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31660: LD_ADDR_VAR 0 2
31664: PUSH
31665: LD_INT 21
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PPUSH
31675: CALL_OW 69
31679: PUSH
31680: FOR_IN
31681: IFFALSE 31733
// if IsSelected ( i ) then
31683: LD_VAR 0 2
31687: PPUSH
31688: CALL_OW 306
31692: IFFALSE 31731
// begin for j := 1 to 4 do
31694: LD_ADDR_VAR 0 3
31698: PUSH
31699: DOUBLE
31700: LD_INT 1
31702: DEC
31703: ST_TO_ADDR
31704: LD_INT 4
31706: PUSH
31707: FOR_TO
31708: IFFALSE 31729
// SetSkill ( i , j , 10 ) ;
31710: LD_VAR 0 2
31714: PPUSH
31715: LD_VAR 0 3
31719: PPUSH
31720: LD_INT 10
31722: PPUSH
31723: CALL_OW 237
31727: GO 31707
31729: POP
31730: POP
// end ;
31731: GO 31680
31733: POP
31734: POP
// end ;
31735: LD_VAR 0 1
31739: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31740: LD_INT 0
31742: PPUSH
31743: PPUSH
31744: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31745: LD_ADDR_VAR 0 2
31749: PUSH
31750: LD_INT 22
31752: PUSH
31753: LD_OWVAR 2
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 21
31764: PUSH
31765: LD_INT 1
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PPUSH
31776: CALL_OW 69
31780: PUSH
31781: FOR_IN
31782: IFFALSE 31823
// begin for j := 1 to 4 do
31784: LD_ADDR_VAR 0 3
31788: PUSH
31789: DOUBLE
31790: LD_INT 1
31792: DEC
31793: ST_TO_ADDR
31794: LD_INT 4
31796: PUSH
31797: FOR_TO
31798: IFFALSE 31819
// SetSkill ( i , j , 10 ) ;
31800: LD_VAR 0 2
31804: PPUSH
31805: LD_VAR 0 3
31809: PPUSH
31810: LD_INT 10
31812: PPUSH
31813: CALL_OW 237
31817: GO 31797
31819: POP
31820: POP
// end ;
31821: GO 31781
31823: POP
31824: POP
// end ;
31825: LD_VAR 0 1
31829: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31830: LD_INT 0
31832: PPUSH
// uc_side := your_side ;
31833: LD_ADDR_OWVAR 20
31837: PUSH
31838: LD_OWVAR 2
31842: ST_TO_ADDR
// uc_nation := nation ;
31843: LD_ADDR_OWVAR 21
31847: PUSH
31848: LD_VAR 0 1
31852: ST_TO_ADDR
// InitHc ;
31853: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31857: LD_INT 0
31859: PPUSH
31860: LD_VAR 0 2
31864: PPUSH
31865: LD_VAR 0 3
31869: PPUSH
31870: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31874: LD_VAR 0 4
31878: PPUSH
31879: LD_VAR 0 5
31883: PPUSH
31884: CALL_OW 428
31888: PUSH
31889: LD_INT 0
31891: EQUAL
31892: IFFALSE 31916
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31894: CALL_OW 44
31898: PPUSH
31899: LD_VAR 0 4
31903: PPUSH
31904: LD_VAR 0 5
31908: PPUSH
31909: LD_INT 1
31911: PPUSH
31912: CALL_OW 48
// end ;
31916: LD_VAR 0 6
31920: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31921: LD_INT 0
31923: PPUSH
31924: PPUSH
// uc_side := your_side ;
31925: LD_ADDR_OWVAR 20
31929: PUSH
31930: LD_OWVAR 2
31934: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31935: LD_VAR 0 1
31939: PUSH
31940: LD_INT 1
31942: PUSH
31943: LD_INT 2
31945: PUSH
31946: LD_INT 3
31948: PUSH
31949: LD_INT 4
31951: PUSH
31952: LD_INT 5
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: IN
31962: IFFALSE 31974
// uc_nation := nation_american else
31964: LD_ADDR_OWVAR 21
31968: PUSH
31969: LD_INT 1
31971: ST_TO_ADDR
31972: GO 32017
// if chassis in [ 11 , 12 , 13 , 14 ] then
31974: LD_VAR 0 1
31978: PUSH
31979: LD_INT 11
31981: PUSH
31982: LD_INT 12
31984: PUSH
31985: LD_INT 13
31987: PUSH
31988: LD_INT 14
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: IN
31997: IFFALSE 32009
// uc_nation := nation_arabian else
31999: LD_ADDR_OWVAR 21
32003: PUSH
32004: LD_INT 2
32006: ST_TO_ADDR
32007: GO 32017
// uc_nation := nation_russian ;
32009: LD_ADDR_OWVAR 21
32013: PUSH
32014: LD_INT 3
32016: ST_TO_ADDR
// vc_chassis := chassis ;
32017: LD_ADDR_OWVAR 37
32021: PUSH
32022: LD_VAR 0 1
32026: ST_TO_ADDR
// vc_engine := engine ;
32027: LD_ADDR_OWVAR 39
32031: PUSH
32032: LD_VAR 0 2
32036: ST_TO_ADDR
// vc_control := control ;
32037: LD_ADDR_OWVAR 38
32041: PUSH
32042: LD_VAR 0 3
32046: ST_TO_ADDR
// vc_weapon := weapon ;
32047: LD_ADDR_OWVAR 40
32051: PUSH
32052: LD_VAR 0 4
32056: ST_TO_ADDR
// un := CreateVehicle ;
32057: LD_ADDR_VAR 0 8
32061: PUSH
32062: CALL_OW 45
32066: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32067: LD_VAR 0 8
32071: PPUSH
32072: LD_INT 0
32074: PPUSH
32075: LD_INT 5
32077: PPUSH
32078: CALL_OW 12
32082: PPUSH
32083: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32087: LD_VAR 0 8
32091: PPUSH
32092: LD_VAR 0 5
32096: PPUSH
32097: LD_VAR 0 6
32101: PPUSH
32102: LD_INT 1
32104: PPUSH
32105: CALL_OW 48
// end ;
32109: LD_VAR 0 7
32113: RET
// export hInvincible ; every 1 do
32114: GO 32116
32116: DISABLE
// hInvincible := [ ] ;
32117: LD_ADDR_EXP 138
32121: PUSH
32122: EMPTY
32123: ST_TO_ADDR
32124: END
// every 10 do var i ;
32125: GO 32127
32127: DISABLE
32128: LD_INT 0
32130: PPUSH
// begin enable ;
32131: ENABLE
// if not hInvincible then
32132: LD_EXP 138
32136: NOT
32137: IFFALSE 32141
// exit ;
32139: GO 32185
// for i in hInvincible do
32141: LD_ADDR_VAR 0 1
32145: PUSH
32146: LD_EXP 138
32150: PUSH
32151: FOR_IN
32152: IFFALSE 32183
// if GetLives ( i ) < 1000 then
32154: LD_VAR 0 1
32158: PPUSH
32159: CALL_OW 256
32163: PUSH
32164: LD_INT 1000
32166: LESS
32167: IFFALSE 32181
// SetLives ( i , 1000 ) ;
32169: LD_VAR 0 1
32173: PPUSH
32174: LD_INT 1000
32176: PPUSH
32177: CALL_OW 234
32181: GO 32151
32183: POP
32184: POP
// end ;
32185: PPOPN 1
32187: END
// export function hHackInvincible ; var i ; begin
32188: LD_INT 0
32190: PPUSH
32191: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32192: LD_ADDR_VAR 0 2
32196: PUSH
32197: LD_INT 2
32199: PUSH
32200: LD_INT 21
32202: PUSH
32203: LD_INT 1
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 21
32212: PUSH
32213: LD_INT 2
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: LIST
32224: PPUSH
32225: CALL_OW 69
32229: PUSH
32230: FOR_IN
32231: IFFALSE 32292
// if IsSelected ( i ) then
32233: LD_VAR 0 2
32237: PPUSH
32238: CALL_OW 306
32242: IFFALSE 32290
// begin if i in hInvincible then
32244: LD_VAR 0 2
32248: PUSH
32249: LD_EXP 138
32253: IN
32254: IFFALSE 32274
// hInvincible := hInvincible diff i else
32256: LD_ADDR_EXP 138
32260: PUSH
32261: LD_EXP 138
32265: PUSH
32266: LD_VAR 0 2
32270: DIFF
32271: ST_TO_ADDR
32272: GO 32290
// hInvincible := hInvincible union i ;
32274: LD_ADDR_EXP 138
32278: PUSH
32279: LD_EXP 138
32283: PUSH
32284: LD_VAR 0 2
32288: UNION
32289: ST_TO_ADDR
// end ;
32290: GO 32230
32292: POP
32293: POP
// end ;
32294: LD_VAR 0 1
32298: RET
// export function hHackInvisible ; var i , j ; begin
32299: LD_INT 0
32301: PPUSH
32302: PPUSH
32303: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32304: LD_ADDR_VAR 0 2
32308: PUSH
32309: LD_INT 21
32311: PUSH
32312: LD_INT 1
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PPUSH
32319: CALL_OW 69
32323: PUSH
32324: FOR_IN
32325: IFFALSE 32349
// if IsSelected ( i ) then
32327: LD_VAR 0 2
32331: PPUSH
32332: CALL_OW 306
32336: IFFALSE 32347
// ComForceInvisible ( i ) ;
32338: LD_VAR 0 2
32342: PPUSH
32343: CALL_OW 496
32347: GO 32324
32349: POP
32350: POP
// end ;
32351: LD_VAR 0 1
32355: RET
// export function hHackChangeYourSide ; begin
32356: LD_INT 0
32358: PPUSH
// if your_side = 8 then
32359: LD_OWVAR 2
32363: PUSH
32364: LD_INT 8
32366: EQUAL
32367: IFFALSE 32379
// your_side := 0 else
32369: LD_ADDR_OWVAR 2
32373: PUSH
32374: LD_INT 0
32376: ST_TO_ADDR
32377: GO 32393
// your_side := your_side + 1 ;
32379: LD_ADDR_OWVAR 2
32383: PUSH
32384: LD_OWVAR 2
32388: PUSH
32389: LD_INT 1
32391: PLUS
32392: ST_TO_ADDR
// end ;
32393: LD_VAR 0 1
32397: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32398: LD_INT 0
32400: PPUSH
32401: PPUSH
32402: PPUSH
// for i in all_units do
32403: LD_ADDR_VAR 0 2
32407: PUSH
32408: LD_OWVAR 3
32412: PUSH
32413: FOR_IN
32414: IFFALSE 32492
// if IsSelected ( i ) then
32416: LD_VAR 0 2
32420: PPUSH
32421: CALL_OW 306
32425: IFFALSE 32490
// begin j := GetSide ( i ) ;
32427: LD_ADDR_VAR 0 3
32431: PUSH
32432: LD_VAR 0 2
32436: PPUSH
32437: CALL_OW 255
32441: ST_TO_ADDR
// if j = 8 then
32442: LD_VAR 0 3
32446: PUSH
32447: LD_INT 8
32449: EQUAL
32450: IFFALSE 32462
// j := 0 else
32452: LD_ADDR_VAR 0 3
32456: PUSH
32457: LD_INT 0
32459: ST_TO_ADDR
32460: GO 32476
// j := j + 1 ;
32462: LD_ADDR_VAR 0 3
32466: PUSH
32467: LD_VAR 0 3
32471: PUSH
32472: LD_INT 1
32474: PLUS
32475: ST_TO_ADDR
// SetSide ( i , j ) ;
32476: LD_VAR 0 2
32480: PPUSH
32481: LD_VAR 0 3
32485: PPUSH
32486: CALL_OW 235
// end ;
32490: GO 32413
32492: POP
32493: POP
// end ;
32494: LD_VAR 0 1
32498: RET
// export function hHackFog ; begin
32499: LD_INT 0
32501: PPUSH
// FogOff ( true ) ;
32502: LD_INT 1
32504: PPUSH
32505: CALL_OW 344
// end ;
32509: LD_VAR 0 1
32513: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32514: LD_INT 0
32516: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32517: LD_VAR 0 1
32521: PPUSH
32522: LD_VAR 0 2
32526: PPUSH
32527: LD_VAR 0 3
32531: PPUSH
32532: LD_INT 1
32534: PPUSH
32535: LD_INT 1
32537: PPUSH
32538: CALL_OW 483
// CenterOnXY ( x , y ) ;
32542: LD_VAR 0 2
32546: PPUSH
32547: LD_VAR 0 3
32551: PPUSH
32552: CALL_OW 84
// end ; end_of_file
32556: LD_VAR 0 4
32560: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32561: LD_INT 0
32563: PPUSH
32564: PPUSH
32565: PPUSH
32566: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32567: LD_VAR 0 1
32571: PPUSH
32572: CALL_OW 264
32576: PUSH
32577: LD_EXP 66
32581: EQUAL
32582: IFFALSE 32654
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32584: LD_INT 68
32586: PPUSH
32587: LD_VAR 0 1
32591: PPUSH
32592: CALL_OW 255
32596: PPUSH
32597: CALL_OW 321
32601: PUSH
32602: LD_INT 2
32604: EQUAL
32605: IFFALSE 32617
// eff := 70 else
32607: LD_ADDR_VAR 0 4
32611: PUSH
32612: LD_INT 70
32614: ST_TO_ADDR
32615: GO 32625
// eff := 30 ;
32617: LD_ADDR_VAR 0 4
32621: PUSH
32622: LD_INT 30
32624: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32625: LD_VAR 0 1
32629: PPUSH
32630: CALL_OW 250
32634: PPUSH
32635: LD_VAR 0 1
32639: PPUSH
32640: CALL_OW 251
32644: PPUSH
32645: LD_VAR 0 4
32649: PPUSH
32650: CALL_OW 495
// end ; end ;
32654: LD_VAR 0 2
32658: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32659: LD_INT 0
32661: PPUSH
// end ;
32662: LD_VAR 0 4
32666: RET
// export function SOS_Command ( cmd ) ; begin
32667: LD_INT 0
32669: PPUSH
// end ;
32670: LD_VAR 0 2
32674: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32675: LD_INT 0
32677: PPUSH
// end ;
32678: LD_VAR 0 6
32682: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32683: LD_INT 0
32685: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32686: LD_VAR 0 1
32690: PUSH
32691: LD_INT 250
32693: EQUAL
32694: PUSH
32695: LD_VAR 0 2
32699: PPUSH
32700: CALL_OW 264
32704: PUSH
32705: LD_EXP 69
32709: EQUAL
32710: AND
32711: IFFALSE 32732
// MinerPlaceMine ( unit , x , y ) ;
32713: LD_VAR 0 2
32717: PPUSH
32718: LD_VAR 0 4
32722: PPUSH
32723: LD_VAR 0 5
32727: PPUSH
32728: CALL 35081 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32732: LD_VAR 0 1
32736: PUSH
32737: LD_INT 251
32739: EQUAL
32740: PUSH
32741: LD_VAR 0 2
32745: PPUSH
32746: CALL_OW 264
32750: PUSH
32751: LD_EXP 69
32755: EQUAL
32756: AND
32757: IFFALSE 32778
// MinerDetonateMine ( unit , x , y ) ;
32759: LD_VAR 0 2
32763: PPUSH
32764: LD_VAR 0 4
32768: PPUSH
32769: LD_VAR 0 5
32773: PPUSH
32774: CALL 35358 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32778: LD_VAR 0 1
32782: PUSH
32783: LD_INT 252
32785: EQUAL
32786: PUSH
32787: LD_VAR 0 2
32791: PPUSH
32792: CALL_OW 264
32796: PUSH
32797: LD_EXP 69
32801: EQUAL
32802: AND
32803: IFFALSE 32824
// MinerCreateMinefield ( unit , x , y ) ;
32805: LD_VAR 0 2
32809: PPUSH
32810: LD_VAR 0 4
32814: PPUSH
32815: LD_VAR 0 5
32819: PPUSH
32820: CALL 35775 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32824: LD_VAR 0 1
32828: PUSH
32829: LD_INT 253
32831: EQUAL
32832: PUSH
32833: LD_VAR 0 2
32837: PPUSH
32838: CALL_OW 257
32842: PUSH
32843: LD_INT 5
32845: EQUAL
32846: AND
32847: IFFALSE 32868
// ComBinocular ( unit , x , y ) ;
32849: LD_VAR 0 2
32853: PPUSH
32854: LD_VAR 0 4
32858: PPUSH
32859: LD_VAR 0 5
32863: PPUSH
32864: CALL 36146 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32868: LD_VAR 0 1
32872: PUSH
32873: LD_INT 254
32875: EQUAL
32876: PUSH
32877: LD_VAR 0 2
32881: PPUSH
32882: CALL_OW 264
32886: PUSH
32887: LD_EXP 64
32891: EQUAL
32892: AND
32893: PUSH
32894: LD_VAR 0 3
32898: PPUSH
32899: CALL_OW 263
32903: PUSH
32904: LD_INT 3
32906: EQUAL
32907: AND
32908: IFFALSE 32924
// HackDestroyVehicle ( unit , selectedUnit ) ;
32910: LD_VAR 0 2
32914: PPUSH
32915: LD_VAR 0 3
32919: PPUSH
32920: CALL 34441 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32924: LD_VAR 0 1
32928: PUSH
32929: LD_INT 255
32931: EQUAL
32932: PUSH
32933: LD_VAR 0 2
32937: PPUSH
32938: CALL_OW 264
32942: PUSH
32943: LD_INT 14
32945: PUSH
32946: LD_INT 53
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: IN
32953: AND
32954: PUSH
32955: LD_VAR 0 4
32959: PPUSH
32960: LD_VAR 0 5
32964: PPUSH
32965: CALL_OW 488
32969: AND
32970: IFFALSE 32994
// CutTreeXYR ( unit , x , y , 12 ) ;
32972: LD_VAR 0 2
32976: PPUSH
32977: LD_VAR 0 4
32981: PPUSH
32982: LD_VAR 0 5
32986: PPUSH
32987: LD_INT 12
32989: PPUSH
32990: CALL 33007 0 4
// end ;
32994: LD_VAR 0 6
32998: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
32999: LD_INT 0
33001: PPUSH
// end ;
33002: LD_VAR 0 4
33006: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33007: LD_INT 0
33009: PPUSH
33010: PPUSH
33011: PPUSH
33012: PPUSH
33013: PPUSH
33014: PPUSH
33015: PPUSH
33016: PPUSH
33017: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33018: LD_VAR 0 1
33022: NOT
33023: PUSH
33024: LD_VAR 0 2
33028: PPUSH
33029: LD_VAR 0 3
33033: PPUSH
33034: CALL_OW 488
33038: NOT
33039: OR
33040: PUSH
33041: LD_VAR 0 4
33045: NOT
33046: OR
33047: IFFALSE 33051
// exit ;
33049: GO 33391
// list := [ ] ;
33051: LD_ADDR_VAR 0 13
33055: PUSH
33056: EMPTY
33057: ST_TO_ADDR
// if x - r < 0 then
33058: LD_VAR 0 2
33062: PUSH
33063: LD_VAR 0 4
33067: MINUS
33068: PUSH
33069: LD_INT 0
33071: LESS
33072: IFFALSE 33084
// min_x := 0 else
33074: LD_ADDR_VAR 0 7
33078: PUSH
33079: LD_INT 0
33081: ST_TO_ADDR
33082: GO 33100
// min_x := x - r ;
33084: LD_ADDR_VAR 0 7
33088: PUSH
33089: LD_VAR 0 2
33093: PUSH
33094: LD_VAR 0 4
33098: MINUS
33099: ST_TO_ADDR
// if y - r < 0 then
33100: LD_VAR 0 3
33104: PUSH
33105: LD_VAR 0 4
33109: MINUS
33110: PUSH
33111: LD_INT 0
33113: LESS
33114: IFFALSE 33126
// min_y := 0 else
33116: LD_ADDR_VAR 0 8
33120: PUSH
33121: LD_INT 0
33123: ST_TO_ADDR
33124: GO 33142
// min_y := y - r ;
33126: LD_ADDR_VAR 0 8
33130: PUSH
33131: LD_VAR 0 3
33135: PUSH
33136: LD_VAR 0 4
33140: MINUS
33141: ST_TO_ADDR
// max_x := x + r ;
33142: LD_ADDR_VAR 0 9
33146: PUSH
33147: LD_VAR 0 2
33151: PUSH
33152: LD_VAR 0 4
33156: PLUS
33157: ST_TO_ADDR
// max_y := y + r ;
33158: LD_ADDR_VAR 0 10
33162: PUSH
33163: LD_VAR 0 3
33167: PUSH
33168: LD_VAR 0 4
33172: PLUS
33173: ST_TO_ADDR
// for _x = min_x to max_x do
33174: LD_ADDR_VAR 0 11
33178: PUSH
33179: DOUBLE
33180: LD_VAR 0 7
33184: DEC
33185: ST_TO_ADDR
33186: LD_VAR 0 9
33190: PUSH
33191: FOR_TO
33192: IFFALSE 33309
// for _y = min_y to max_y do
33194: LD_ADDR_VAR 0 12
33198: PUSH
33199: DOUBLE
33200: LD_VAR 0 8
33204: DEC
33205: ST_TO_ADDR
33206: LD_VAR 0 10
33210: PUSH
33211: FOR_TO
33212: IFFALSE 33305
// begin if not ValidHex ( _x , _y ) then
33214: LD_VAR 0 11
33218: PPUSH
33219: LD_VAR 0 12
33223: PPUSH
33224: CALL_OW 488
33228: NOT
33229: IFFALSE 33233
// continue ;
33231: GO 33211
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33233: LD_VAR 0 11
33237: PPUSH
33238: LD_VAR 0 12
33242: PPUSH
33243: CALL_OW 351
33247: PUSH
33248: LD_VAR 0 11
33252: PPUSH
33253: LD_VAR 0 12
33257: PPUSH
33258: CALL_OW 554
33262: AND
33263: IFFALSE 33303
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33265: LD_ADDR_VAR 0 13
33269: PUSH
33270: LD_VAR 0 13
33274: PPUSH
33275: LD_VAR 0 13
33279: PUSH
33280: LD_INT 1
33282: PLUS
33283: PPUSH
33284: LD_VAR 0 11
33288: PUSH
33289: LD_VAR 0 12
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PPUSH
33298: CALL_OW 2
33302: ST_TO_ADDR
// end ;
33303: GO 33211
33305: POP
33306: POP
33307: GO 33191
33309: POP
33310: POP
// if not list then
33311: LD_VAR 0 13
33315: NOT
33316: IFFALSE 33320
// exit ;
33318: GO 33391
// for i in list do
33320: LD_ADDR_VAR 0 6
33324: PUSH
33325: LD_VAR 0 13
33329: PUSH
33330: FOR_IN
33331: IFFALSE 33389
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33333: LD_VAR 0 1
33337: PPUSH
33338: LD_STRING M
33340: PUSH
33341: LD_VAR 0 6
33345: PUSH
33346: LD_INT 1
33348: ARRAY
33349: PUSH
33350: LD_VAR 0 6
33354: PUSH
33355: LD_INT 2
33357: ARRAY
33358: PUSH
33359: LD_INT 0
33361: PUSH
33362: LD_INT 0
33364: PUSH
33365: LD_INT 0
33367: PUSH
33368: LD_INT 0
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: PUSH
33380: EMPTY
33381: LIST
33382: PPUSH
33383: CALL_OW 447
33387: GO 33330
33389: POP
33390: POP
// end ;
33391: LD_VAR 0 5
33395: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33396: LD_EXP 141
33400: NOT
33401: IFFALSE 33451
33403: GO 33405
33405: DISABLE
// begin initHack := true ;
33406: LD_ADDR_EXP 141
33410: PUSH
33411: LD_INT 1
33413: ST_TO_ADDR
// hackTanks := [ ] ;
33414: LD_ADDR_EXP 142
33418: PUSH
33419: EMPTY
33420: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33421: LD_ADDR_EXP 143
33425: PUSH
33426: EMPTY
33427: ST_TO_ADDR
// hackLimit := 3 ;
33428: LD_ADDR_EXP 144
33432: PUSH
33433: LD_INT 3
33435: ST_TO_ADDR
// hackDist := 12 ;
33436: LD_ADDR_EXP 145
33440: PUSH
33441: LD_INT 12
33443: ST_TO_ADDR
// hackCounter := [ ] ;
33444: LD_ADDR_EXP 146
33448: PUSH
33449: EMPTY
33450: ST_TO_ADDR
// end ;
33451: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33452: LD_EXP 141
33456: PUSH
33457: LD_INT 34
33459: PUSH
33460: LD_EXP 64
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PPUSH
33469: CALL_OW 69
33473: AND
33474: IFFALSE 33729
33476: GO 33478
33478: DISABLE
33479: LD_INT 0
33481: PPUSH
33482: PPUSH
// begin enable ;
33483: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33484: LD_ADDR_VAR 0 1
33488: PUSH
33489: LD_INT 34
33491: PUSH
33492: LD_EXP 64
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PPUSH
33501: CALL_OW 69
33505: PUSH
33506: FOR_IN
33507: IFFALSE 33727
// begin if not i in hackTanks then
33509: LD_VAR 0 1
33513: PUSH
33514: LD_EXP 142
33518: IN
33519: NOT
33520: IFFALSE 33603
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33522: LD_ADDR_EXP 142
33526: PUSH
33527: LD_EXP 142
33531: PPUSH
33532: LD_EXP 142
33536: PUSH
33537: LD_INT 1
33539: PLUS
33540: PPUSH
33541: LD_VAR 0 1
33545: PPUSH
33546: CALL_OW 1
33550: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33551: LD_ADDR_EXP 143
33555: PUSH
33556: LD_EXP 143
33560: PPUSH
33561: LD_EXP 143
33565: PUSH
33566: LD_INT 1
33568: PLUS
33569: PPUSH
33570: EMPTY
33571: PPUSH
33572: CALL_OW 1
33576: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33577: LD_ADDR_EXP 146
33581: PUSH
33582: LD_EXP 146
33586: PPUSH
33587: LD_EXP 146
33591: PUSH
33592: LD_INT 1
33594: PLUS
33595: PPUSH
33596: EMPTY
33597: PPUSH
33598: CALL_OW 1
33602: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33603: LD_VAR 0 1
33607: PPUSH
33608: CALL_OW 302
33612: NOT
33613: IFFALSE 33626
// begin HackUnlinkAll ( i ) ;
33615: LD_VAR 0 1
33619: PPUSH
33620: CALL 33732 0 1
// continue ;
33624: GO 33506
// end ; HackCheckCapturedStatus ( i ) ;
33626: LD_VAR 0 1
33630: PPUSH
33631: CALL 34175 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33635: LD_ADDR_VAR 0 2
33639: PUSH
33640: LD_INT 81
33642: PUSH
33643: LD_VAR 0 1
33647: PPUSH
33648: CALL_OW 255
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 33
33659: PUSH
33660: LD_INT 3
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 91
33669: PUSH
33670: LD_VAR 0 1
33674: PUSH
33675: LD_EXP 145
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 50
33687: PUSH
33688: EMPTY
33689: LIST
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: PPUSH
33697: CALL_OW 69
33701: ST_TO_ADDR
// if not tmp then
33702: LD_VAR 0 2
33706: NOT
33707: IFFALSE 33711
// continue ;
33709: GO 33506
// HackLink ( i , tmp ) ;
33711: LD_VAR 0 1
33715: PPUSH
33716: LD_VAR 0 2
33720: PPUSH
33721: CALL 33868 0 2
// end ;
33725: GO 33506
33727: POP
33728: POP
// end ;
33729: PPOPN 2
33731: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33732: LD_INT 0
33734: PPUSH
33735: PPUSH
33736: PPUSH
// if not hack in hackTanks then
33737: LD_VAR 0 1
33741: PUSH
33742: LD_EXP 142
33746: IN
33747: NOT
33748: IFFALSE 33752
// exit ;
33750: GO 33863
// index := GetElementIndex ( hackTanks , hack ) ;
33752: LD_ADDR_VAR 0 4
33756: PUSH
33757: LD_EXP 142
33761: PPUSH
33762: LD_VAR 0 1
33766: PPUSH
33767: CALL 41337 0 2
33771: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33772: LD_EXP 143
33776: PUSH
33777: LD_VAR 0 4
33781: ARRAY
33782: IFFALSE 33863
// begin for i in hackTanksCaptured [ index ] do
33784: LD_ADDR_VAR 0 3
33788: PUSH
33789: LD_EXP 143
33793: PUSH
33794: LD_VAR 0 4
33798: ARRAY
33799: PUSH
33800: FOR_IN
33801: IFFALSE 33827
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33803: LD_VAR 0 3
33807: PUSH
33808: LD_INT 1
33810: ARRAY
33811: PPUSH
33812: LD_VAR 0 3
33816: PUSH
33817: LD_INT 2
33819: ARRAY
33820: PPUSH
33821: CALL_OW 235
33825: GO 33800
33827: POP
33828: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33829: LD_ADDR_EXP 143
33833: PUSH
33834: LD_EXP 143
33838: PPUSH
33839: LD_VAR 0 4
33843: PPUSH
33844: EMPTY
33845: PPUSH
33846: CALL_OW 1
33850: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33851: LD_VAR 0 1
33855: PPUSH
33856: LD_INT 0
33858: PPUSH
33859: CALL_OW 505
// end ; end ;
33863: LD_VAR 0 2
33867: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33868: LD_INT 0
33870: PPUSH
33871: PPUSH
33872: PPUSH
// if not hack in hackTanks or not vehicles then
33873: LD_VAR 0 1
33877: PUSH
33878: LD_EXP 142
33882: IN
33883: NOT
33884: PUSH
33885: LD_VAR 0 2
33889: NOT
33890: OR
33891: IFFALSE 33895
// exit ;
33893: GO 34170
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33895: LD_ADDR_VAR 0 2
33899: PUSH
33900: LD_VAR 0 1
33904: PPUSH
33905: LD_VAR 0 2
33909: PPUSH
33910: LD_INT 1
33912: PPUSH
33913: LD_INT 1
33915: PPUSH
33916: CALL 41987 0 4
33920: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33921: LD_ADDR_VAR 0 5
33925: PUSH
33926: LD_EXP 142
33930: PPUSH
33931: LD_VAR 0 1
33935: PPUSH
33936: CALL 41337 0 2
33940: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33941: LD_EXP 143
33945: PUSH
33946: LD_VAR 0 5
33950: ARRAY
33951: PUSH
33952: LD_EXP 144
33956: LESS
33957: IFFALSE 34146
// begin for i := 1 to vehicles do
33959: LD_ADDR_VAR 0 4
33963: PUSH
33964: DOUBLE
33965: LD_INT 1
33967: DEC
33968: ST_TO_ADDR
33969: LD_VAR 0 2
33973: PUSH
33974: FOR_TO
33975: IFFALSE 34144
// begin if hackTanksCaptured [ index ] = hackLimit then
33977: LD_EXP 143
33981: PUSH
33982: LD_VAR 0 5
33986: ARRAY
33987: PUSH
33988: LD_EXP 144
33992: EQUAL
33993: IFFALSE 33997
// break ;
33995: GO 34144
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33997: LD_ADDR_EXP 146
34001: PUSH
34002: LD_EXP 146
34006: PPUSH
34007: LD_VAR 0 5
34011: PPUSH
34012: LD_EXP 146
34016: PUSH
34017: LD_VAR 0 5
34021: ARRAY
34022: PUSH
34023: LD_INT 1
34025: PLUS
34026: PPUSH
34027: CALL_OW 1
34031: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34032: LD_ADDR_EXP 143
34036: PUSH
34037: LD_EXP 143
34041: PPUSH
34042: LD_VAR 0 5
34046: PUSH
34047: LD_EXP 143
34051: PUSH
34052: LD_VAR 0 5
34056: ARRAY
34057: PUSH
34058: LD_INT 1
34060: PLUS
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PPUSH
34066: LD_VAR 0 2
34070: PUSH
34071: LD_VAR 0 4
34075: ARRAY
34076: PUSH
34077: LD_VAR 0 2
34081: PUSH
34082: LD_VAR 0 4
34086: ARRAY
34087: PPUSH
34088: CALL_OW 255
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PPUSH
34097: CALL 41552 0 3
34101: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34102: LD_VAR 0 2
34106: PUSH
34107: LD_VAR 0 4
34111: ARRAY
34112: PPUSH
34113: LD_VAR 0 1
34117: PPUSH
34118: CALL_OW 255
34122: PPUSH
34123: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34127: LD_VAR 0 2
34131: PUSH
34132: LD_VAR 0 4
34136: ARRAY
34137: PPUSH
34138: CALL_OW 141
// end ;
34142: GO 33974
34144: POP
34145: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34146: LD_VAR 0 1
34150: PPUSH
34151: LD_EXP 143
34155: PUSH
34156: LD_VAR 0 5
34160: ARRAY
34161: PUSH
34162: LD_INT 0
34164: PLUS
34165: PPUSH
34166: CALL_OW 505
// end ;
34170: LD_VAR 0 3
34174: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34175: LD_INT 0
34177: PPUSH
34178: PPUSH
34179: PPUSH
34180: PPUSH
// if not hack in hackTanks then
34181: LD_VAR 0 1
34185: PUSH
34186: LD_EXP 142
34190: IN
34191: NOT
34192: IFFALSE 34196
// exit ;
34194: GO 34436
// index := GetElementIndex ( hackTanks , hack ) ;
34196: LD_ADDR_VAR 0 4
34200: PUSH
34201: LD_EXP 142
34205: PPUSH
34206: LD_VAR 0 1
34210: PPUSH
34211: CALL 41337 0 2
34215: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34216: LD_ADDR_VAR 0 3
34220: PUSH
34221: DOUBLE
34222: LD_EXP 143
34226: PUSH
34227: LD_VAR 0 4
34231: ARRAY
34232: INC
34233: ST_TO_ADDR
34234: LD_INT 1
34236: PUSH
34237: FOR_DOWNTO
34238: IFFALSE 34410
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34240: LD_ADDR_VAR 0 5
34244: PUSH
34245: LD_EXP 143
34249: PUSH
34250: LD_VAR 0 4
34254: ARRAY
34255: PUSH
34256: LD_VAR 0 3
34260: ARRAY
34261: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34262: LD_VAR 0 5
34266: PUSH
34267: LD_INT 1
34269: ARRAY
34270: PPUSH
34271: CALL_OW 302
34275: NOT
34276: PUSH
34277: LD_VAR 0 5
34281: PUSH
34282: LD_INT 1
34284: ARRAY
34285: PPUSH
34286: CALL_OW 255
34290: PUSH
34291: LD_VAR 0 1
34295: PPUSH
34296: CALL_OW 255
34300: NONEQUAL
34301: OR
34302: IFFALSE 34408
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34304: LD_VAR 0 5
34308: PUSH
34309: LD_INT 1
34311: ARRAY
34312: PPUSH
34313: CALL_OW 305
34317: PUSH
34318: LD_VAR 0 5
34322: PUSH
34323: LD_INT 1
34325: ARRAY
34326: PPUSH
34327: CALL_OW 255
34331: PUSH
34332: LD_VAR 0 1
34336: PPUSH
34337: CALL_OW 255
34341: EQUAL
34342: AND
34343: IFFALSE 34367
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34345: LD_VAR 0 5
34349: PUSH
34350: LD_INT 1
34352: ARRAY
34353: PPUSH
34354: LD_VAR 0 5
34358: PUSH
34359: LD_INT 2
34361: ARRAY
34362: PPUSH
34363: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34367: LD_ADDR_EXP 143
34371: PUSH
34372: LD_EXP 143
34376: PPUSH
34377: LD_VAR 0 4
34381: PPUSH
34382: LD_EXP 143
34386: PUSH
34387: LD_VAR 0 4
34391: ARRAY
34392: PPUSH
34393: LD_VAR 0 3
34397: PPUSH
34398: CALL_OW 3
34402: PPUSH
34403: CALL_OW 1
34407: ST_TO_ADDR
// end ; end ;
34408: GO 34237
34410: POP
34411: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34412: LD_VAR 0 1
34416: PPUSH
34417: LD_EXP 143
34421: PUSH
34422: LD_VAR 0 4
34426: ARRAY
34427: PUSH
34428: LD_INT 0
34430: PLUS
34431: PPUSH
34432: CALL_OW 505
// end ;
34436: LD_VAR 0 2
34440: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34441: LD_INT 0
34443: PPUSH
34444: PPUSH
34445: PPUSH
34446: PPUSH
// if not hack in hackTanks then
34447: LD_VAR 0 1
34451: PUSH
34452: LD_EXP 142
34456: IN
34457: NOT
34458: IFFALSE 34462
// exit ;
34460: GO 34547
// index := GetElementIndex ( hackTanks , hack ) ;
34462: LD_ADDR_VAR 0 5
34466: PUSH
34467: LD_EXP 142
34471: PPUSH
34472: LD_VAR 0 1
34476: PPUSH
34477: CALL 41337 0 2
34481: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34482: LD_ADDR_VAR 0 4
34486: PUSH
34487: DOUBLE
34488: LD_INT 1
34490: DEC
34491: ST_TO_ADDR
34492: LD_EXP 143
34496: PUSH
34497: LD_VAR 0 5
34501: ARRAY
34502: PUSH
34503: FOR_TO
34504: IFFALSE 34545
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34506: LD_EXP 143
34510: PUSH
34511: LD_VAR 0 5
34515: ARRAY
34516: PUSH
34517: LD_VAR 0 4
34521: ARRAY
34522: PUSH
34523: LD_INT 1
34525: ARRAY
34526: PUSH
34527: LD_VAR 0 2
34531: EQUAL
34532: IFFALSE 34543
// KillUnit ( vehicle ) ;
34534: LD_VAR 0 2
34538: PPUSH
34539: CALL_OW 66
34543: GO 34503
34545: POP
34546: POP
// end ;
34547: LD_VAR 0 3
34551: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34552: LD_EXP 147
34556: NOT
34557: IFFALSE 34592
34559: GO 34561
34561: DISABLE
// begin initMiner := true ;
34562: LD_ADDR_EXP 147
34566: PUSH
34567: LD_INT 1
34569: ST_TO_ADDR
// minersList := [ ] ;
34570: LD_ADDR_EXP 148
34574: PUSH
34575: EMPTY
34576: ST_TO_ADDR
// minerMinesList := [ ] ;
34577: LD_ADDR_EXP 149
34581: PUSH
34582: EMPTY
34583: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34584: LD_ADDR_EXP 150
34588: PUSH
34589: LD_INT 5
34591: ST_TO_ADDR
// end ;
34592: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34593: LD_EXP 147
34597: PUSH
34598: LD_INT 34
34600: PUSH
34601: LD_EXP 69
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PPUSH
34610: CALL_OW 69
34614: AND
34615: IFFALSE 35078
34617: GO 34619
34619: DISABLE
34620: LD_INT 0
34622: PPUSH
34623: PPUSH
34624: PPUSH
34625: PPUSH
// begin enable ;
34626: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34627: LD_ADDR_VAR 0 1
34631: PUSH
34632: LD_INT 34
34634: PUSH
34635: LD_EXP 69
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PPUSH
34644: CALL_OW 69
34648: PUSH
34649: FOR_IN
34650: IFFALSE 34722
// begin if not i in minersList then
34652: LD_VAR 0 1
34656: PUSH
34657: LD_EXP 148
34661: IN
34662: NOT
34663: IFFALSE 34720
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34665: LD_ADDR_EXP 148
34669: PUSH
34670: LD_EXP 148
34674: PPUSH
34675: LD_EXP 148
34679: PUSH
34680: LD_INT 1
34682: PLUS
34683: PPUSH
34684: LD_VAR 0 1
34688: PPUSH
34689: CALL_OW 1
34693: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34694: LD_ADDR_EXP 149
34698: PUSH
34699: LD_EXP 149
34703: PPUSH
34704: LD_EXP 149
34708: PUSH
34709: LD_INT 1
34711: PLUS
34712: PPUSH
34713: EMPTY
34714: PPUSH
34715: CALL_OW 1
34719: ST_TO_ADDR
// end end ;
34720: GO 34649
34722: POP
34723: POP
// for i := minerMinesList downto 1 do
34724: LD_ADDR_VAR 0 1
34728: PUSH
34729: DOUBLE
34730: LD_EXP 149
34734: INC
34735: ST_TO_ADDR
34736: LD_INT 1
34738: PUSH
34739: FOR_DOWNTO
34740: IFFALSE 35076
// begin if IsLive ( minersList [ i ] ) then
34742: LD_EXP 148
34746: PUSH
34747: LD_VAR 0 1
34751: ARRAY
34752: PPUSH
34753: CALL_OW 300
34757: IFFALSE 34785
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34759: LD_EXP 148
34763: PUSH
34764: LD_VAR 0 1
34768: ARRAY
34769: PPUSH
34770: LD_EXP 149
34774: PUSH
34775: LD_VAR 0 1
34779: ARRAY
34780: PPUSH
34781: CALL_OW 505
// if not minerMinesList [ i ] then
34785: LD_EXP 149
34789: PUSH
34790: LD_VAR 0 1
34794: ARRAY
34795: NOT
34796: IFFALSE 34800
// continue ;
34798: GO 34739
// for j := minerMinesList [ i ] downto 1 do
34800: LD_ADDR_VAR 0 2
34804: PUSH
34805: DOUBLE
34806: LD_EXP 149
34810: PUSH
34811: LD_VAR 0 1
34815: ARRAY
34816: INC
34817: ST_TO_ADDR
34818: LD_INT 1
34820: PUSH
34821: FOR_DOWNTO
34822: IFFALSE 35072
// begin side := GetSide ( minersList [ i ] ) ;
34824: LD_ADDR_VAR 0 3
34828: PUSH
34829: LD_EXP 148
34833: PUSH
34834: LD_VAR 0 1
34838: ARRAY
34839: PPUSH
34840: CALL_OW 255
34844: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34845: LD_ADDR_VAR 0 4
34849: PUSH
34850: LD_EXP 149
34854: PUSH
34855: LD_VAR 0 1
34859: ARRAY
34860: PUSH
34861: LD_VAR 0 2
34865: ARRAY
34866: PUSH
34867: LD_INT 1
34869: ARRAY
34870: PPUSH
34871: LD_EXP 149
34875: PUSH
34876: LD_VAR 0 1
34880: ARRAY
34881: PUSH
34882: LD_VAR 0 2
34886: ARRAY
34887: PUSH
34888: LD_INT 2
34890: ARRAY
34891: PPUSH
34892: CALL_OW 428
34896: ST_TO_ADDR
// if not tmp then
34897: LD_VAR 0 4
34901: NOT
34902: IFFALSE 34906
// continue ;
34904: GO 34821
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34906: LD_VAR 0 4
34910: PUSH
34911: LD_INT 81
34913: PUSH
34914: LD_VAR 0 3
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PPUSH
34923: CALL_OW 69
34927: IN
34928: PUSH
34929: LD_EXP 149
34933: PUSH
34934: LD_VAR 0 1
34938: ARRAY
34939: PUSH
34940: LD_VAR 0 2
34944: ARRAY
34945: PUSH
34946: LD_INT 1
34948: ARRAY
34949: PPUSH
34950: LD_EXP 149
34954: PUSH
34955: LD_VAR 0 1
34959: ARRAY
34960: PUSH
34961: LD_VAR 0 2
34965: ARRAY
34966: PUSH
34967: LD_INT 2
34969: ARRAY
34970: PPUSH
34971: CALL_OW 458
34975: AND
34976: IFFALSE 35070
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34978: LD_EXP 149
34982: PUSH
34983: LD_VAR 0 1
34987: ARRAY
34988: PUSH
34989: LD_VAR 0 2
34993: ARRAY
34994: PUSH
34995: LD_INT 1
34997: ARRAY
34998: PPUSH
34999: LD_EXP 149
35003: PUSH
35004: LD_VAR 0 1
35008: ARRAY
35009: PUSH
35010: LD_VAR 0 2
35014: ARRAY
35015: PUSH
35016: LD_INT 2
35018: ARRAY
35019: PPUSH
35020: LD_VAR 0 3
35024: PPUSH
35025: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35029: LD_ADDR_EXP 149
35033: PUSH
35034: LD_EXP 149
35038: PPUSH
35039: LD_VAR 0 1
35043: PPUSH
35044: LD_EXP 149
35048: PUSH
35049: LD_VAR 0 1
35053: ARRAY
35054: PPUSH
35055: LD_VAR 0 2
35059: PPUSH
35060: CALL_OW 3
35064: PPUSH
35065: CALL_OW 1
35069: ST_TO_ADDR
// end ; end ;
35070: GO 34821
35072: POP
35073: POP
// end ;
35074: GO 34739
35076: POP
35077: POP
// end ;
35078: PPOPN 4
35080: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35081: LD_INT 0
35083: PPUSH
35084: PPUSH
// result := false ;
35085: LD_ADDR_VAR 0 4
35089: PUSH
35090: LD_INT 0
35092: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35093: LD_VAR 0 1
35097: PPUSH
35098: CALL_OW 264
35102: PUSH
35103: LD_EXP 69
35107: EQUAL
35108: NOT
35109: IFFALSE 35113
// exit ;
35111: GO 35353
// index := GetElementIndex ( minersList , unit ) ;
35113: LD_ADDR_VAR 0 5
35117: PUSH
35118: LD_EXP 148
35122: PPUSH
35123: LD_VAR 0 1
35127: PPUSH
35128: CALL 41337 0 2
35132: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35133: LD_EXP 149
35137: PUSH
35138: LD_VAR 0 5
35142: ARRAY
35143: PUSH
35144: LD_EXP 150
35148: GREATEREQUAL
35149: IFFALSE 35153
// exit ;
35151: GO 35353
// ComMoveXY ( unit , x , y ) ;
35153: LD_VAR 0 1
35157: PPUSH
35158: LD_VAR 0 2
35162: PPUSH
35163: LD_VAR 0 3
35167: PPUSH
35168: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35172: LD_INT 35
35174: PPUSH
35175: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35179: LD_VAR 0 1
35183: PPUSH
35184: LD_VAR 0 2
35188: PPUSH
35189: LD_VAR 0 3
35193: PPUSH
35194: CALL 72109 0 3
35198: NOT
35199: PUSH
35200: LD_VAR 0 1
35204: PPUSH
35205: CALL_OW 314
35209: AND
35210: IFFALSE 35214
// exit ;
35212: GO 35353
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35214: LD_VAR 0 2
35218: PPUSH
35219: LD_VAR 0 3
35223: PPUSH
35224: CALL_OW 428
35228: PUSH
35229: LD_VAR 0 1
35233: EQUAL
35234: PUSH
35235: LD_VAR 0 1
35239: PPUSH
35240: CALL_OW 314
35244: NOT
35245: AND
35246: IFFALSE 35172
// PlaySoundXY ( x , y , PlantMine ) ;
35248: LD_VAR 0 2
35252: PPUSH
35253: LD_VAR 0 3
35257: PPUSH
35258: LD_STRING PlantMine
35260: PPUSH
35261: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35265: LD_VAR 0 2
35269: PPUSH
35270: LD_VAR 0 3
35274: PPUSH
35275: LD_VAR 0 1
35279: PPUSH
35280: CALL_OW 255
35284: PPUSH
35285: LD_INT 0
35287: PPUSH
35288: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35292: LD_ADDR_EXP 149
35296: PUSH
35297: LD_EXP 149
35301: PPUSH
35302: LD_VAR 0 5
35306: PUSH
35307: LD_EXP 149
35311: PUSH
35312: LD_VAR 0 5
35316: ARRAY
35317: PUSH
35318: LD_INT 1
35320: PLUS
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PPUSH
35326: LD_VAR 0 2
35330: PUSH
35331: LD_VAR 0 3
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PPUSH
35340: CALL 41552 0 3
35344: ST_TO_ADDR
// result := true ;
35345: LD_ADDR_VAR 0 4
35349: PUSH
35350: LD_INT 1
35352: ST_TO_ADDR
// end ;
35353: LD_VAR 0 4
35357: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35358: LD_INT 0
35360: PPUSH
35361: PPUSH
35362: PPUSH
// if not unit in minersList then
35363: LD_VAR 0 1
35367: PUSH
35368: LD_EXP 148
35372: IN
35373: NOT
35374: IFFALSE 35378
// exit ;
35376: GO 35770
// index := GetElementIndex ( minersList , unit ) ;
35378: LD_ADDR_VAR 0 6
35382: PUSH
35383: LD_EXP 148
35387: PPUSH
35388: LD_VAR 0 1
35392: PPUSH
35393: CALL 41337 0 2
35397: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35398: LD_ADDR_VAR 0 5
35402: PUSH
35403: DOUBLE
35404: LD_EXP 149
35408: PUSH
35409: LD_VAR 0 6
35413: ARRAY
35414: INC
35415: ST_TO_ADDR
35416: LD_INT 1
35418: PUSH
35419: FOR_DOWNTO
35420: IFFALSE 35581
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35422: LD_EXP 149
35426: PUSH
35427: LD_VAR 0 6
35431: ARRAY
35432: PUSH
35433: LD_VAR 0 5
35437: ARRAY
35438: PUSH
35439: LD_INT 1
35441: ARRAY
35442: PUSH
35443: LD_VAR 0 2
35447: EQUAL
35448: PUSH
35449: LD_EXP 149
35453: PUSH
35454: LD_VAR 0 6
35458: ARRAY
35459: PUSH
35460: LD_VAR 0 5
35464: ARRAY
35465: PUSH
35466: LD_INT 2
35468: ARRAY
35469: PUSH
35470: LD_VAR 0 3
35474: EQUAL
35475: AND
35476: IFFALSE 35579
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35478: LD_EXP 149
35482: PUSH
35483: LD_VAR 0 6
35487: ARRAY
35488: PUSH
35489: LD_VAR 0 5
35493: ARRAY
35494: PUSH
35495: LD_INT 1
35497: ARRAY
35498: PPUSH
35499: LD_EXP 149
35503: PUSH
35504: LD_VAR 0 6
35508: ARRAY
35509: PUSH
35510: LD_VAR 0 5
35514: ARRAY
35515: PUSH
35516: LD_INT 2
35518: ARRAY
35519: PPUSH
35520: LD_VAR 0 1
35524: PPUSH
35525: CALL_OW 255
35529: PPUSH
35530: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35534: LD_ADDR_EXP 149
35538: PUSH
35539: LD_EXP 149
35543: PPUSH
35544: LD_VAR 0 6
35548: PPUSH
35549: LD_EXP 149
35553: PUSH
35554: LD_VAR 0 6
35558: ARRAY
35559: PPUSH
35560: LD_VAR 0 5
35564: PPUSH
35565: CALL_OW 3
35569: PPUSH
35570: CALL_OW 1
35574: ST_TO_ADDR
// exit ;
35575: POP
35576: POP
35577: GO 35770
// end ; end ;
35579: GO 35419
35581: POP
35582: POP
// for i := minerMinesList [ index ] downto 1 do
35583: LD_ADDR_VAR 0 5
35587: PUSH
35588: DOUBLE
35589: LD_EXP 149
35593: PUSH
35594: LD_VAR 0 6
35598: ARRAY
35599: INC
35600: ST_TO_ADDR
35601: LD_INT 1
35603: PUSH
35604: FOR_DOWNTO
35605: IFFALSE 35768
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35607: LD_EXP 149
35611: PUSH
35612: LD_VAR 0 6
35616: ARRAY
35617: PUSH
35618: LD_VAR 0 5
35622: ARRAY
35623: PUSH
35624: LD_INT 1
35626: ARRAY
35627: PPUSH
35628: LD_EXP 149
35632: PUSH
35633: LD_VAR 0 6
35637: ARRAY
35638: PUSH
35639: LD_VAR 0 5
35643: ARRAY
35644: PUSH
35645: LD_INT 2
35647: ARRAY
35648: PPUSH
35649: LD_VAR 0 2
35653: PPUSH
35654: LD_VAR 0 3
35658: PPUSH
35659: CALL_OW 298
35663: PUSH
35664: LD_INT 6
35666: LESS
35667: IFFALSE 35766
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35669: LD_EXP 149
35673: PUSH
35674: LD_VAR 0 6
35678: ARRAY
35679: PUSH
35680: LD_VAR 0 5
35684: ARRAY
35685: PUSH
35686: LD_INT 1
35688: ARRAY
35689: PPUSH
35690: LD_EXP 149
35694: PUSH
35695: LD_VAR 0 6
35699: ARRAY
35700: PUSH
35701: LD_VAR 0 5
35705: ARRAY
35706: PUSH
35707: LD_INT 2
35709: ARRAY
35710: PPUSH
35711: LD_VAR 0 1
35715: PPUSH
35716: CALL_OW 255
35720: PPUSH
35721: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35725: LD_ADDR_EXP 149
35729: PUSH
35730: LD_EXP 149
35734: PPUSH
35735: LD_VAR 0 6
35739: PPUSH
35740: LD_EXP 149
35744: PUSH
35745: LD_VAR 0 6
35749: ARRAY
35750: PPUSH
35751: LD_VAR 0 5
35755: PPUSH
35756: CALL_OW 3
35760: PPUSH
35761: CALL_OW 1
35765: ST_TO_ADDR
// end ; end ;
35766: GO 35604
35768: POP
35769: POP
// end ;
35770: LD_VAR 0 4
35774: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35775: LD_INT 0
35777: PPUSH
35778: PPUSH
35779: PPUSH
35780: PPUSH
35781: PPUSH
35782: PPUSH
35783: PPUSH
35784: PPUSH
35785: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35786: LD_VAR 0 1
35790: PPUSH
35791: CALL_OW 264
35795: PUSH
35796: LD_EXP 69
35800: EQUAL
35801: NOT
35802: PUSH
35803: LD_VAR 0 1
35807: PUSH
35808: LD_EXP 148
35812: IN
35813: NOT
35814: OR
35815: IFFALSE 35819
// exit ;
35817: GO 36141
// index := GetElementIndex ( minersList , unit ) ;
35819: LD_ADDR_VAR 0 6
35823: PUSH
35824: LD_EXP 148
35828: PPUSH
35829: LD_VAR 0 1
35833: PPUSH
35834: CALL 41337 0 2
35838: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35839: LD_ADDR_VAR 0 8
35843: PUSH
35844: LD_EXP 150
35848: PUSH
35849: LD_EXP 149
35853: PUSH
35854: LD_VAR 0 6
35858: ARRAY
35859: MINUS
35860: ST_TO_ADDR
// if not minesFreeAmount then
35861: LD_VAR 0 8
35865: NOT
35866: IFFALSE 35870
// exit ;
35868: GO 36141
// tmp := [ ] ;
35870: LD_ADDR_VAR 0 7
35874: PUSH
35875: EMPTY
35876: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35877: LD_ADDR_VAR 0 5
35881: PUSH
35882: DOUBLE
35883: LD_INT 1
35885: DEC
35886: ST_TO_ADDR
35887: LD_VAR 0 8
35891: PUSH
35892: FOR_TO
35893: IFFALSE 36088
// begin _d := rand ( 0 , 5 ) ;
35895: LD_ADDR_VAR 0 11
35899: PUSH
35900: LD_INT 0
35902: PPUSH
35903: LD_INT 5
35905: PPUSH
35906: CALL_OW 12
35910: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35911: LD_ADDR_VAR 0 12
35915: PUSH
35916: LD_INT 2
35918: PPUSH
35919: LD_INT 6
35921: PPUSH
35922: CALL_OW 12
35926: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35927: LD_ADDR_VAR 0 9
35931: PUSH
35932: LD_VAR 0 2
35936: PPUSH
35937: LD_VAR 0 11
35941: PPUSH
35942: LD_VAR 0 12
35946: PPUSH
35947: CALL_OW 272
35951: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35952: LD_ADDR_VAR 0 10
35956: PUSH
35957: LD_VAR 0 3
35961: PPUSH
35962: LD_VAR 0 11
35966: PPUSH
35967: LD_VAR 0 12
35971: PPUSH
35972: CALL_OW 273
35976: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35977: LD_VAR 0 9
35981: PPUSH
35982: LD_VAR 0 10
35986: PPUSH
35987: CALL_OW 488
35991: PUSH
35992: LD_VAR 0 9
35996: PUSH
35997: LD_VAR 0 10
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_VAR 0 7
36010: IN
36011: NOT
36012: AND
36013: PUSH
36014: LD_VAR 0 9
36018: PPUSH
36019: LD_VAR 0 10
36023: PPUSH
36024: CALL_OW 458
36028: NOT
36029: AND
36030: IFFALSE 36072
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36032: LD_ADDR_VAR 0 7
36036: PUSH
36037: LD_VAR 0 7
36041: PPUSH
36042: LD_VAR 0 7
36046: PUSH
36047: LD_INT 1
36049: PLUS
36050: PPUSH
36051: LD_VAR 0 9
36055: PUSH
36056: LD_VAR 0 10
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PPUSH
36065: CALL_OW 1
36069: ST_TO_ADDR
36070: GO 36086
// i := i - 1 ;
36072: LD_ADDR_VAR 0 5
36076: PUSH
36077: LD_VAR 0 5
36081: PUSH
36082: LD_INT 1
36084: MINUS
36085: ST_TO_ADDR
// end ;
36086: GO 35892
36088: POP
36089: POP
// for i in tmp do
36090: LD_ADDR_VAR 0 5
36094: PUSH
36095: LD_VAR 0 7
36099: PUSH
36100: FOR_IN
36101: IFFALSE 36139
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36103: LD_VAR 0 1
36107: PPUSH
36108: LD_VAR 0 5
36112: PUSH
36113: LD_INT 1
36115: ARRAY
36116: PPUSH
36117: LD_VAR 0 5
36121: PUSH
36122: LD_INT 2
36124: ARRAY
36125: PPUSH
36126: CALL 35081 0 3
36130: NOT
36131: IFFALSE 36137
// exit ;
36133: POP
36134: POP
36135: GO 36141
36137: GO 36100
36139: POP
36140: POP
// end ;
36141: LD_VAR 0 4
36145: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36146: LD_INT 0
36148: PPUSH
36149: PPUSH
36150: PPUSH
36151: PPUSH
36152: PPUSH
36153: PPUSH
36154: PPUSH
// if not GetClass ( unit ) = class_sniper then
36155: LD_VAR 0 1
36159: PPUSH
36160: CALL_OW 257
36164: PUSH
36165: LD_INT 5
36167: EQUAL
36168: NOT
36169: IFFALSE 36173
// exit ;
36171: GO 36561
// dist := 8 ;
36173: LD_ADDR_VAR 0 5
36177: PUSH
36178: LD_INT 8
36180: ST_TO_ADDR
// viewRange := 12 ;
36181: LD_ADDR_VAR 0 7
36185: PUSH
36186: LD_INT 12
36188: ST_TO_ADDR
// side := GetSide ( unit ) ;
36189: LD_ADDR_VAR 0 6
36193: PUSH
36194: LD_VAR 0 1
36198: PPUSH
36199: CALL_OW 255
36203: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36204: LD_INT 61
36206: PPUSH
36207: LD_VAR 0 6
36211: PPUSH
36212: CALL_OW 321
36216: PUSH
36217: LD_INT 2
36219: EQUAL
36220: IFFALSE 36230
// viewRange := 16 ;
36222: LD_ADDR_VAR 0 7
36226: PUSH
36227: LD_INT 16
36229: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36230: LD_VAR 0 1
36234: PPUSH
36235: LD_VAR 0 2
36239: PPUSH
36240: LD_VAR 0 3
36244: PPUSH
36245: CALL_OW 297
36249: PUSH
36250: LD_VAR 0 5
36254: GREATER
36255: IFFALSE 36334
// begin ComMoveXY ( unit , x , y ) ;
36257: LD_VAR 0 1
36261: PPUSH
36262: LD_VAR 0 2
36266: PPUSH
36267: LD_VAR 0 3
36271: PPUSH
36272: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36276: LD_INT 35
36278: PPUSH
36279: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36283: LD_VAR 0 1
36287: PPUSH
36288: LD_VAR 0 2
36292: PPUSH
36293: LD_VAR 0 3
36297: PPUSH
36298: CALL 72109 0 3
36302: NOT
36303: IFFALSE 36307
// exit ;
36305: GO 36561
// until GetDistUnitXY ( unit , x , y ) < dist ;
36307: LD_VAR 0 1
36311: PPUSH
36312: LD_VAR 0 2
36316: PPUSH
36317: LD_VAR 0 3
36321: PPUSH
36322: CALL_OW 297
36326: PUSH
36327: LD_VAR 0 5
36331: LESS
36332: IFFALSE 36276
// end ; ComTurnXY ( unit , x , y ) ;
36334: LD_VAR 0 1
36338: PPUSH
36339: LD_VAR 0 2
36343: PPUSH
36344: LD_VAR 0 3
36348: PPUSH
36349: CALL_OW 118
// wait ( 5 ) ;
36353: LD_INT 5
36355: PPUSH
36356: CALL_OW 67
// _d := GetDir ( unit ) ;
36360: LD_ADDR_VAR 0 10
36364: PUSH
36365: LD_VAR 0 1
36369: PPUSH
36370: CALL_OW 254
36374: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36375: LD_ADDR_VAR 0 8
36379: PUSH
36380: LD_VAR 0 1
36384: PPUSH
36385: CALL_OW 250
36389: PPUSH
36390: LD_VAR 0 10
36394: PPUSH
36395: LD_VAR 0 5
36399: PPUSH
36400: CALL_OW 272
36404: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36405: LD_ADDR_VAR 0 9
36409: PUSH
36410: LD_VAR 0 1
36414: PPUSH
36415: CALL_OW 251
36419: PPUSH
36420: LD_VAR 0 10
36424: PPUSH
36425: LD_VAR 0 5
36429: PPUSH
36430: CALL_OW 273
36434: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36435: LD_VAR 0 8
36439: PPUSH
36440: LD_VAR 0 9
36444: PPUSH
36445: CALL_OW 488
36449: NOT
36450: IFFALSE 36454
// exit ;
36452: GO 36561
// ComAnimCustom ( unit , 1 ) ;
36454: LD_VAR 0 1
36458: PPUSH
36459: LD_INT 1
36461: PPUSH
36462: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36466: LD_VAR 0 8
36470: PPUSH
36471: LD_VAR 0 9
36475: PPUSH
36476: LD_VAR 0 6
36480: PPUSH
36481: LD_VAR 0 7
36485: PPUSH
36486: CALL_OW 330
// repeat wait ( 1 ) ;
36490: LD_INT 1
36492: PPUSH
36493: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36497: LD_VAR 0 1
36501: PPUSH
36502: CALL_OW 316
36506: PUSH
36507: LD_VAR 0 1
36511: PPUSH
36512: CALL_OW 314
36516: OR
36517: PUSH
36518: LD_VAR 0 1
36522: PPUSH
36523: CALL_OW 302
36527: NOT
36528: OR
36529: PUSH
36530: LD_VAR 0 1
36534: PPUSH
36535: CALL_OW 301
36539: OR
36540: IFFALSE 36490
// RemoveSeeing ( _x , _y , side ) ;
36542: LD_VAR 0 8
36546: PPUSH
36547: LD_VAR 0 9
36551: PPUSH
36552: LD_VAR 0 6
36556: PPUSH
36557: CALL_OW 331
// end ; end_of_file
36561: LD_VAR 0 4
36565: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36566: LD_INT 0
36568: PPUSH
36569: PPUSH
// if exist_mode then
36570: LD_VAR 0 2
36574: IFFALSE 36599
// unit := CreateCharacter ( prefix & ident ) else
36576: LD_ADDR_VAR 0 5
36580: PUSH
36581: LD_VAR 0 3
36585: PUSH
36586: LD_VAR 0 1
36590: STR
36591: PPUSH
36592: CALL_OW 34
36596: ST_TO_ADDR
36597: GO 36614
// unit := NewCharacter ( ident ) ;
36599: LD_ADDR_VAR 0 5
36603: PUSH
36604: LD_VAR 0 1
36608: PPUSH
36609: CALL_OW 25
36613: ST_TO_ADDR
// result := unit ;
36614: LD_ADDR_VAR 0 4
36618: PUSH
36619: LD_VAR 0 5
36623: ST_TO_ADDR
// end ;
36624: LD_VAR 0 4
36628: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36629: LD_INT 0
36631: PPUSH
36632: PPUSH
// if not side or not nation then
36633: LD_VAR 0 1
36637: NOT
36638: PUSH
36639: LD_VAR 0 2
36643: NOT
36644: OR
36645: IFFALSE 36649
// exit ;
36647: GO 37417
// case nation of nation_american :
36649: LD_VAR 0 2
36653: PUSH
36654: LD_INT 1
36656: DOUBLE
36657: EQUAL
36658: IFTRUE 36662
36660: GO 36876
36662: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36663: LD_ADDR_VAR 0 4
36667: PUSH
36668: LD_INT 35
36670: PUSH
36671: LD_INT 45
36673: PUSH
36674: LD_INT 46
36676: PUSH
36677: LD_INT 47
36679: PUSH
36680: LD_INT 82
36682: PUSH
36683: LD_INT 83
36685: PUSH
36686: LD_INT 84
36688: PUSH
36689: LD_INT 85
36691: PUSH
36692: LD_INT 86
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: LD_INT 2
36700: PUSH
36701: LD_INT 6
36703: PUSH
36704: LD_INT 15
36706: PUSH
36707: LD_INT 16
36709: PUSH
36710: LD_INT 7
36712: PUSH
36713: LD_INT 12
36715: PUSH
36716: LD_INT 13
36718: PUSH
36719: LD_INT 10
36721: PUSH
36722: LD_INT 14
36724: PUSH
36725: LD_INT 20
36727: PUSH
36728: LD_INT 21
36730: PUSH
36731: LD_INT 22
36733: PUSH
36734: LD_INT 25
36736: PUSH
36737: LD_INT 32
36739: PUSH
36740: LD_INT 27
36742: PUSH
36743: LD_INT 36
36745: PUSH
36746: LD_INT 69
36748: PUSH
36749: LD_INT 39
36751: PUSH
36752: LD_INT 34
36754: PUSH
36755: LD_INT 40
36757: PUSH
36758: LD_INT 48
36760: PUSH
36761: LD_INT 49
36763: PUSH
36764: LD_INT 50
36766: PUSH
36767: LD_INT 51
36769: PUSH
36770: LD_INT 52
36772: PUSH
36773: LD_INT 53
36775: PUSH
36776: LD_INT 54
36778: PUSH
36779: LD_INT 55
36781: PUSH
36782: LD_INT 56
36784: PUSH
36785: LD_INT 57
36787: PUSH
36788: LD_INT 58
36790: PUSH
36791: LD_INT 59
36793: PUSH
36794: LD_INT 60
36796: PUSH
36797: LD_INT 61
36799: PUSH
36800: LD_INT 62
36802: PUSH
36803: LD_INT 80
36805: PUSH
36806: LD_INT 82
36808: PUSH
36809: LD_INT 83
36811: PUSH
36812: LD_INT 84
36814: PUSH
36815: LD_INT 85
36817: PUSH
36818: LD_INT 86
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: ST_TO_ADDR
36874: GO 37341
36876: LD_INT 2
36878: DOUBLE
36879: EQUAL
36880: IFTRUE 36884
36882: GO 37110
36884: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36885: LD_ADDR_VAR 0 4
36889: PUSH
36890: LD_INT 35
36892: PUSH
36893: LD_INT 45
36895: PUSH
36896: LD_INT 46
36898: PUSH
36899: LD_INT 47
36901: PUSH
36902: LD_INT 82
36904: PUSH
36905: LD_INT 83
36907: PUSH
36908: LD_INT 84
36910: PUSH
36911: LD_INT 85
36913: PUSH
36914: LD_INT 87
36916: PUSH
36917: LD_INT 70
36919: PUSH
36920: LD_INT 1
36922: PUSH
36923: LD_INT 11
36925: PUSH
36926: LD_INT 3
36928: PUSH
36929: LD_INT 4
36931: PUSH
36932: LD_INT 5
36934: PUSH
36935: LD_INT 6
36937: PUSH
36938: LD_INT 15
36940: PUSH
36941: LD_INT 18
36943: PUSH
36944: LD_INT 7
36946: PUSH
36947: LD_INT 17
36949: PUSH
36950: LD_INT 8
36952: PUSH
36953: LD_INT 20
36955: PUSH
36956: LD_INT 21
36958: PUSH
36959: LD_INT 22
36961: PUSH
36962: LD_INT 72
36964: PUSH
36965: LD_INT 26
36967: PUSH
36968: LD_INT 69
36970: PUSH
36971: LD_INT 39
36973: PUSH
36974: LD_INT 40
36976: PUSH
36977: LD_INT 41
36979: PUSH
36980: LD_INT 42
36982: PUSH
36983: LD_INT 43
36985: PUSH
36986: LD_INT 48
36988: PUSH
36989: LD_INT 49
36991: PUSH
36992: LD_INT 50
36994: PUSH
36995: LD_INT 51
36997: PUSH
36998: LD_INT 52
37000: PUSH
37001: LD_INT 53
37003: PUSH
37004: LD_INT 54
37006: PUSH
37007: LD_INT 55
37009: PUSH
37010: LD_INT 56
37012: PUSH
37013: LD_INT 60
37015: PUSH
37016: LD_INT 61
37018: PUSH
37019: LD_INT 62
37021: PUSH
37022: LD_INT 66
37024: PUSH
37025: LD_INT 67
37027: PUSH
37028: LD_INT 68
37030: PUSH
37031: LD_INT 81
37033: PUSH
37034: LD_INT 82
37036: PUSH
37037: LD_INT 83
37039: PUSH
37040: LD_INT 84
37042: PUSH
37043: LD_INT 85
37045: PUSH
37046: LD_INT 87
37048: PUSH
37049: LD_INT 88
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: ST_TO_ADDR
37108: GO 37341
37110: LD_INT 3
37112: DOUBLE
37113: EQUAL
37114: IFTRUE 37118
37116: GO 37340
37118: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37119: LD_ADDR_VAR 0 4
37123: PUSH
37124: LD_INT 46
37126: PUSH
37127: LD_INT 47
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: LD_INT 2
37135: PUSH
37136: LD_INT 82
37138: PUSH
37139: LD_INT 83
37141: PUSH
37142: LD_INT 84
37144: PUSH
37145: LD_INT 85
37147: PUSH
37148: LD_INT 86
37150: PUSH
37151: LD_INT 11
37153: PUSH
37154: LD_INT 9
37156: PUSH
37157: LD_INT 20
37159: PUSH
37160: LD_INT 19
37162: PUSH
37163: LD_INT 21
37165: PUSH
37166: LD_INT 24
37168: PUSH
37169: LD_INT 22
37171: PUSH
37172: LD_INT 25
37174: PUSH
37175: LD_INT 28
37177: PUSH
37178: LD_INT 29
37180: PUSH
37181: LD_INT 30
37183: PUSH
37184: LD_INT 31
37186: PUSH
37187: LD_INT 37
37189: PUSH
37190: LD_INT 38
37192: PUSH
37193: LD_INT 32
37195: PUSH
37196: LD_INT 27
37198: PUSH
37199: LD_INT 33
37201: PUSH
37202: LD_INT 69
37204: PUSH
37205: LD_INT 39
37207: PUSH
37208: LD_INT 34
37210: PUSH
37211: LD_INT 40
37213: PUSH
37214: LD_INT 71
37216: PUSH
37217: LD_INT 23
37219: PUSH
37220: LD_INT 44
37222: PUSH
37223: LD_INT 48
37225: PUSH
37226: LD_INT 49
37228: PUSH
37229: LD_INT 50
37231: PUSH
37232: LD_INT 51
37234: PUSH
37235: LD_INT 52
37237: PUSH
37238: LD_INT 53
37240: PUSH
37241: LD_INT 54
37243: PUSH
37244: LD_INT 55
37246: PUSH
37247: LD_INT 56
37249: PUSH
37250: LD_INT 57
37252: PUSH
37253: LD_INT 58
37255: PUSH
37256: LD_INT 59
37258: PUSH
37259: LD_INT 63
37261: PUSH
37262: LD_INT 64
37264: PUSH
37265: LD_INT 65
37267: PUSH
37268: LD_INT 82
37270: PUSH
37271: LD_INT 83
37273: PUSH
37274: LD_INT 84
37276: PUSH
37277: LD_INT 85
37279: PUSH
37280: LD_INT 86
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: ST_TO_ADDR
37338: GO 37341
37340: POP
// if state > - 1 and state < 3 then
37341: LD_VAR 0 3
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: GREATER
37350: PUSH
37351: LD_VAR 0 3
37355: PUSH
37356: LD_INT 3
37358: LESS
37359: AND
37360: IFFALSE 37417
// for i in result do
37362: LD_ADDR_VAR 0 5
37366: PUSH
37367: LD_VAR 0 4
37371: PUSH
37372: FOR_IN
37373: IFFALSE 37415
// if GetTech ( i , side ) <> state then
37375: LD_VAR 0 5
37379: PPUSH
37380: LD_VAR 0 1
37384: PPUSH
37385: CALL_OW 321
37389: PUSH
37390: LD_VAR 0 3
37394: NONEQUAL
37395: IFFALSE 37413
// result := result diff i ;
37397: LD_ADDR_VAR 0 4
37401: PUSH
37402: LD_VAR 0 4
37406: PUSH
37407: LD_VAR 0 5
37411: DIFF
37412: ST_TO_ADDR
37413: GO 37372
37415: POP
37416: POP
// end ;
37417: LD_VAR 0 4
37421: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37422: LD_INT 0
37424: PPUSH
37425: PPUSH
37426: PPUSH
// result := true ;
37427: LD_ADDR_VAR 0 3
37431: PUSH
37432: LD_INT 1
37434: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37435: LD_ADDR_VAR 0 5
37439: PUSH
37440: LD_VAR 0 2
37444: PPUSH
37445: CALL_OW 480
37449: ST_TO_ADDR
// if not tmp then
37450: LD_VAR 0 5
37454: NOT
37455: IFFALSE 37459
// exit ;
37457: GO 37508
// for i in tmp do
37459: LD_ADDR_VAR 0 4
37463: PUSH
37464: LD_VAR 0 5
37468: PUSH
37469: FOR_IN
37470: IFFALSE 37506
// if GetTech ( i , side ) <> state_researched then
37472: LD_VAR 0 4
37476: PPUSH
37477: LD_VAR 0 1
37481: PPUSH
37482: CALL_OW 321
37486: PUSH
37487: LD_INT 2
37489: NONEQUAL
37490: IFFALSE 37504
// begin result := false ;
37492: LD_ADDR_VAR 0 3
37496: PUSH
37497: LD_INT 0
37499: ST_TO_ADDR
// exit ;
37500: POP
37501: POP
37502: GO 37508
// end ;
37504: GO 37469
37506: POP
37507: POP
// end ;
37508: LD_VAR 0 3
37512: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37513: LD_INT 0
37515: PPUSH
37516: PPUSH
37517: PPUSH
37518: PPUSH
37519: PPUSH
37520: PPUSH
37521: PPUSH
37522: PPUSH
37523: PPUSH
37524: PPUSH
37525: PPUSH
37526: PPUSH
37527: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37528: LD_VAR 0 1
37532: NOT
37533: PUSH
37534: LD_VAR 0 1
37538: PPUSH
37539: CALL_OW 257
37543: PUSH
37544: LD_INT 9
37546: NONEQUAL
37547: OR
37548: IFFALSE 37552
// exit ;
37550: GO 38125
// side := GetSide ( unit ) ;
37552: LD_ADDR_VAR 0 9
37556: PUSH
37557: LD_VAR 0 1
37561: PPUSH
37562: CALL_OW 255
37566: ST_TO_ADDR
// tech_space := tech_spacanom ;
37567: LD_ADDR_VAR 0 12
37571: PUSH
37572: LD_INT 29
37574: ST_TO_ADDR
// tech_time := tech_taurad ;
37575: LD_ADDR_VAR 0 13
37579: PUSH
37580: LD_INT 28
37582: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37583: LD_ADDR_VAR 0 11
37587: PUSH
37588: LD_VAR 0 1
37592: PPUSH
37593: CALL_OW 310
37597: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37598: LD_VAR 0 11
37602: PPUSH
37603: CALL_OW 247
37607: PUSH
37608: LD_INT 2
37610: EQUAL
37611: IFFALSE 37615
// exit ;
37613: GO 38125
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37615: LD_ADDR_VAR 0 8
37619: PUSH
37620: LD_INT 81
37622: PUSH
37623: LD_VAR 0 9
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 3
37634: PUSH
37635: LD_INT 21
37637: PUSH
37638: LD_INT 3
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PPUSH
37653: CALL_OW 69
37657: ST_TO_ADDR
// if not tmp then
37658: LD_VAR 0 8
37662: NOT
37663: IFFALSE 37667
// exit ;
37665: GO 38125
// if in_unit then
37667: LD_VAR 0 11
37671: IFFALSE 37695
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37673: LD_ADDR_VAR 0 10
37677: PUSH
37678: LD_VAR 0 8
37682: PPUSH
37683: LD_VAR 0 11
37687: PPUSH
37688: CALL_OW 74
37692: ST_TO_ADDR
37693: GO 37715
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37695: LD_ADDR_VAR 0 10
37699: PUSH
37700: LD_VAR 0 8
37704: PPUSH
37705: LD_VAR 0 1
37709: PPUSH
37710: CALL_OW 74
37714: ST_TO_ADDR
// if not enemy then
37715: LD_VAR 0 10
37719: NOT
37720: IFFALSE 37724
// exit ;
37722: GO 38125
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37724: LD_VAR 0 11
37728: PUSH
37729: LD_VAR 0 11
37733: PPUSH
37734: LD_VAR 0 10
37738: PPUSH
37739: CALL_OW 296
37743: PUSH
37744: LD_INT 13
37746: GREATER
37747: AND
37748: PUSH
37749: LD_VAR 0 1
37753: PPUSH
37754: LD_VAR 0 10
37758: PPUSH
37759: CALL_OW 296
37763: PUSH
37764: LD_INT 12
37766: GREATER
37767: OR
37768: IFFALSE 37772
// exit ;
37770: GO 38125
// missile := [ 1 ] ;
37772: LD_ADDR_VAR 0 14
37776: PUSH
37777: LD_INT 1
37779: PUSH
37780: EMPTY
37781: LIST
37782: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37783: LD_VAR 0 9
37787: PPUSH
37788: LD_VAR 0 12
37792: PPUSH
37793: CALL_OW 325
37797: IFFALSE 37826
// missile := Insert ( missile , missile + 1 , 2 ) ;
37799: LD_ADDR_VAR 0 14
37803: PUSH
37804: LD_VAR 0 14
37808: PPUSH
37809: LD_VAR 0 14
37813: PUSH
37814: LD_INT 1
37816: PLUS
37817: PPUSH
37818: LD_INT 2
37820: PPUSH
37821: CALL_OW 2
37825: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37826: LD_VAR 0 9
37830: PPUSH
37831: LD_VAR 0 13
37835: PPUSH
37836: CALL_OW 325
37840: PUSH
37841: LD_VAR 0 10
37845: PPUSH
37846: CALL_OW 255
37850: PPUSH
37851: LD_VAR 0 13
37855: PPUSH
37856: CALL_OW 325
37860: NOT
37861: AND
37862: IFFALSE 37891
// missile := Insert ( missile , missile + 1 , 3 ) ;
37864: LD_ADDR_VAR 0 14
37868: PUSH
37869: LD_VAR 0 14
37873: PPUSH
37874: LD_VAR 0 14
37878: PUSH
37879: LD_INT 1
37881: PLUS
37882: PPUSH
37883: LD_INT 3
37885: PPUSH
37886: CALL_OW 2
37890: ST_TO_ADDR
// if missile < 2 then
37891: LD_VAR 0 14
37895: PUSH
37896: LD_INT 2
37898: LESS
37899: IFFALSE 37903
// exit ;
37901: GO 38125
// x := GetX ( enemy ) ;
37903: LD_ADDR_VAR 0 4
37907: PUSH
37908: LD_VAR 0 10
37912: PPUSH
37913: CALL_OW 250
37917: ST_TO_ADDR
// y := GetY ( enemy ) ;
37918: LD_ADDR_VAR 0 5
37922: PUSH
37923: LD_VAR 0 10
37927: PPUSH
37928: CALL_OW 251
37932: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37933: LD_ADDR_VAR 0 6
37937: PUSH
37938: LD_VAR 0 4
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PPUSH
37947: LD_INT 1
37949: PPUSH
37950: CALL_OW 12
37954: PLUS
37955: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37956: LD_ADDR_VAR 0 7
37960: PUSH
37961: LD_VAR 0 5
37965: PUSH
37966: LD_INT 1
37968: NEG
37969: PPUSH
37970: LD_INT 1
37972: PPUSH
37973: CALL_OW 12
37977: PLUS
37978: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37979: LD_VAR 0 6
37983: PPUSH
37984: LD_VAR 0 7
37988: PPUSH
37989: CALL_OW 488
37993: NOT
37994: IFFALSE 38016
// begin _x := x ;
37996: LD_ADDR_VAR 0 6
38000: PUSH
38001: LD_VAR 0 4
38005: ST_TO_ADDR
// _y := y ;
38006: LD_ADDR_VAR 0 7
38010: PUSH
38011: LD_VAR 0 5
38015: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38016: LD_ADDR_VAR 0 3
38020: PUSH
38021: LD_INT 1
38023: PPUSH
38024: LD_VAR 0 14
38028: PPUSH
38029: CALL_OW 12
38033: ST_TO_ADDR
// case i of 1 :
38034: LD_VAR 0 3
38038: PUSH
38039: LD_INT 1
38041: DOUBLE
38042: EQUAL
38043: IFTRUE 38047
38045: GO 38064
38047: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38048: LD_VAR 0 1
38052: PPUSH
38053: LD_VAR 0 10
38057: PPUSH
38058: CALL_OW 115
38062: GO 38125
38064: LD_INT 2
38066: DOUBLE
38067: EQUAL
38068: IFTRUE 38072
38070: GO 38094
38072: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38073: LD_VAR 0 1
38077: PPUSH
38078: LD_VAR 0 6
38082: PPUSH
38083: LD_VAR 0 7
38087: PPUSH
38088: CALL_OW 153
38092: GO 38125
38094: LD_INT 3
38096: DOUBLE
38097: EQUAL
38098: IFTRUE 38102
38100: GO 38124
38102: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38103: LD_VAR 0 1
38107: PPUSH
38108: LD_VAR 0 6
38112: PPUSH
38113: LD_VAR 0 7
38117: PPUSH
38118: CALL_OW 154
38122: GO 38125
38124: POP
// end ;
38125: LD_VAR 0 2
38129: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38130: LD_INT 0
38132: PPUSH
38133: PPUSH
38134: PPUSH
38135: PPUSH
38136: PPUSH
38137: PPUSH
// if not unit or not building then
38138: LD_VAR 0 1
38142: NOT
38143: PUSH
38144: LD_VAR 0 2
38148: NOT
38149: OR
38150: IFFALSE 38154
// exit ;
38152: GO 38312
// x := GetX ( building ) ;
38154: LD_ADDR_VAR 0 5
38158: PUSH
38159: LD_VAR 0 2
38163: PPUSH
38164: CALL_OW 250
38168: ST_TO_ADDR
// y := GetY ( building ) ;
38169: LD_ADDR_VAR 0 6
38173: PUSH
38174: LD_VAR 0 2
38178: PPUSH
38179: CALL_OW 251
38183: ST_TO_ADDR
// for i = 0 to 5 do
38184: LD_ADDR_VAR 0 4
38188: PUSH
38189: DOUBLE
38190: LD_INT 0
38192: DEC
38193: ST_TO_ADDR
38194: LD_INT 5
38196: PUSH
38197: FOR_TO
38198: IFFALSE 38310
// begin _x := ShiftX ( x , i , 3 ) ;
38200: LD_ADDR_VAR 0 7
38204: PUSH
38205: LD_VAR 0 5
38209: PPUSH
38210: LD_VAR 0 4
38214: PPUSH
38215: LD_INT 3
38217: PPUSH
38218: CALL_OW 272
38222: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38223: LD_ADDR_VAR 0 8
38227: PUSH
38228: LD_VAR 0 6
38232: PPUSH
38233: LD_VAR 0 4
38237: PPUSH
38238: LD_INT 3
38240: PPUSH
38241: CALL_OW 273
38245: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38246: LD_VAR 0 7
38250: PPUSH
38251: LD_VAR 0 8
38255: PPUSH
38256: CALL_OW 488
38260: NOT
38261: IFFALSE 38265
// continue ;
38263: GO 38197
// if HexInfo ( _x , _y ) = 0 then
38265: LD_VAR 0 7
38269: PPUSH
38270: LD_VAR 0 8
38274: PPUSH
38275: CALL_OW 428
38279: PUSH
38280: LD_INT 0
38282: EQUAL
38283: IFFALSE 38308
// begin ComMoveXY ( unit , _x , _y ) ;
38285: LD_VAR 0 1
38289: PPUSH
38290: LD_VAR 0 7
38294: PPUSH
38295: LD_VAR 0 8
38299: PPUSH
38300: CALL_OW 111
// exit ;
38304: POP
38305: POP
38306: GO 38312
// end ; end ;
38308: GO 38197
38310: POP
38311: POP
// end ;
38312: LD_VAR 0 3
38316: RET
// export function ScanBase ( side , base_area ) ; begin
38317: LD_INT 0
38319: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38320: LD_ADDR_VAR 0 3
38324: PUSH
38325: LD_VAR 0 2
38329: PPUSH
38330: LD_INT 81
38332: PUSH
38333: LD_VAR 0 1
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PPUSH
38342: CALL_OW 70
38346: ST_TO_ADDR
// end ;
38347: LD_VAR 0 3
38351: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38352: LD_INT 0
38354: PPUSH
38355: PPUSH
38356: PPUSH
38357: PPUSH
// result := false ;
38358: LD_ADDR_VAR 0 2
38362: PUSH
38363: LD_INT 0
38365: ST_TO_ADDR
// side := GetSide ( unit ) ;
38366: LD_ADDR_VAR 0 3
38370: PUSH
38371: LD_VAR 0 1
38375: PPUSH
38376: CALL_OW 255
38380: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38381: LD_ADDR_VAR 0 4
38385: PUSH
38386: LD_VAR 0 1
38390: PPUSH
38391: CALL_OW 248
38395: ST_TO_ADDR
// case nat of 1 :
38396: LD_VAR 0 4
38400: PUSH
38401: LD_INT 1
38403: DOUBLE
38404: EQUAL
38405: IFTRUE 38409
38407: GO 38420
38409: POP
// tech := tech_lassight ; 2 :
38410: LD_ADDR_VAR 0 5
38414: PUSH
38415: LD_INT 12
38417: ST_TO_ADDR
38418: GO 38459
38420: LD_INT 2
38422: DOUBLE
38423: EQUAL
38424: IFTRUE 38428
38426: GO 38439
38428: POP
// tech := tech_mortar ; 3 :
38429: LD_ADDR_VAR 0 5
38433: PUSH
38434: LD_INT 41
38436: ST_TO_ADDR
38437: GO 38459
38439: LD_INT 3
38441: DOUBLE
38442: EQUAL
38443: IFTRUE 38447
38445: GO 38458
38447: POP
// tech := tech_bazooka ; end ;
38448: LD_ADDR_VAR 0 5
38452: PUSH
38453: LD_INT 44
38455: ST_TO_ADDR
38456: GO 38459
38458: POP
// if Researched ( side , tech ) then
38459: LD_VAR 0 3
38463: PPUSH
38464: LD_VAR 0 5
38468: PPUSH
38469: CALL_OW 325
38473: IFFALSE 38500
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38475: LD_ADDR_VAR 0 2
38479: PUSH
38480: LD_INT 5
38482: PUSH
38483: LD_INT 8
38485: PUSH
38486: LD_INT 9
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: LIST
38493: PUSH
38494: LD_VAR 0 4
38498: ARRAY
38499: ST_TO_ADDR
// end ;
38500: LD_VAR 0 2
38504: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38505: LD_INT 0
38507: PPUSH
38508: PPUSH
38509: PPUSH
// if not mines then
38510: LD_VAR 0 2
38514: NOT
38515: IFFALSE 38519
// exit ;
38517: GO 38663
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38519: LD_ADDR_VAR 0 5
38523: PUSH
38524: LD_INT 81
38526: PUSH
38527: LD_VAR 0 1
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 3
38538: PUSH
38539: LD_INT 21
38541: PUSH
38542: LD_INT 3
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PPUSH
38557: CALL_OW 69
38561: ST_TO_ADDR
// for i in mines do
38562: LD_ADDR_VAR 0 4
38566: PUSH
38567: LD_VAR 0 2
38571: PUSH
38572: FOR_IN
38573: IFFALSE 38661
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38575: LD_VAR 0 4
38579: PUSH
38580: LD_INT 1
38582: ARRAY
38583: PPUSH
38584: LD_VAR 0 4
38588: PUSH
38589: LD_INT 2
38591: ARRAY
38592: PPUSH
38593: CALL_OW 458
38597: NOT
38598: IFFALSE 38602
// continue ;
38600: GO 38572
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38602: LD_VAR 0 4
38606: PUSH
38607: LD_INT 1
38609: ARRAY
38610: PPUSH
38611: LD_VAR 0 4
38615: PUSH
38616: LD_INT 2
38618: ARRAY
38619: PPUSH
38620: CALL_OW 428
38624: PUSH
38625: LD_VAR 0 5
38629: IN
38630: IFFALSE 38659
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38632: LD_VAR 0 4
38636: PUSH
38637: LD_INT 1
38639: ARRAY
38640: PPUSH
38641: LD_VAR 0 4
38645: PUSH
38646: LD_INT 2
38648: ARRAY
38649: PPUSH
38650: LD_VAR 0 1
38654: PPUSH
38655: CALL_OW 456
// end ;
38659: GO 38572
38661: POP
38662: POP
// end ;
38663: LD_VAR 0 3
38667: RET
// export function Count ( array ) ; var i ; begin
38668: LD_INT 0
38670: PPUSH
38671: PPUSH
// result := 0 ;
38672: LD_ADDR_VAR 0 2
38676: PUSH
38677: LD_INT 0
38679: ST_TO_ADDR
// for i in array do
38680: LD_ADDR_VAR 0 3
38684: PUSH
38685: LD_VAR 0 1
38689: PUSH
38690: FOR_IN
38691: IFFALSE 38715
// if i then
38693: LD_VAR 0 3
38697: IFFALSE 38713
// result := result + 1 ;
38699: LD_ADDR_VAR 0 2
38703: PUSH
38704: LD_VAR 0 2
38708: PUSH
38709: LD_INT 1
38711: PLUS
38712: ST_TO_ADDR
38713: GO 38690
38715: POP
38716: POP
// end ;
38717: LD_VAR 0 2
38721: RET
// export function IsEmpty ( building ) ; begin
38722: LD_INT 0
38724: PPUSH
// if not building then
38725: LD_VAR 0 1
38729: NOT
38730: IFFALSE 38734
// exit ;
38732: GO 38777
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38734: LD_ADDR_VAR 0 2
38738: PUSH
38739: LD_VAR 0 1
38743: PUSH
38744: LD_INT 22
38746: PUSH
38747: LD_VAR 0 1
38751: PPUSH
38752: CALL_OW 255
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 58
38763: PUSH
38764: EMPTY
38765: LIST
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PPUSH
38771: CALL_OW 69
38775: IN
38776: ST_TO_ADDR
// end ;
38777: LD_VAR 0 2
38781: RET
// export function IsNotFull ( building ) ; begin
38782: LD_INT 0
38784: PPUSH
// if not building then
38785: LD_VAR 0 1
38789: NOT
38790: IFFALSE 38794
// exit ;
38792: GO 38813
// result := UnitsInside ( building ) < 6 ;
38794: LD_ADDR_VAR 0 2
38798: PUSH
38799: LD_VAR 0 1
38803: PPUSH
38804: CALL_OW 313
38808: PUSH
38809: LD_INT 6
38811: LESS
38812: ST_TO_ADDR
// end ;
38813: LD_VAR 0 2
38817: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38818: LD_INT 0
38820: PPUSH
38821: PPUSH
38822: PPUSH
38823: PPUSH
// tmp := [ ] ;
38824: LD_ADDR_VAR 0 3
38828: PUSH
38829: EMPTY
38830: ST_TO_ADDR
// list := [ ] ;
38831: LD_ADDR_VAR 0 5
38835: PUSH
38836: EMPTY
38837: ST_TO_ADDR
// for i = 16 to 25 do
38838: LD_ADDR_VAR 0 4
38842: PUSH
38843: DOUBLE
38844: LD_INT 16
38846: DEC
38847: ST_TO_ADDR
38848: LD_INT 25
38850: PUSH
38851: FOR_TO
38852: IFFALSE 38925
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38854: LD_ADDR_VAR 0 3
38858: PUSH
38859: LD_VAR 0 3
38863: PUSH
38864: LD_INT 22
38866: PUSH
38867: LD_VAR 0 1
38871: PPUSH
38872: CALL_OW 255
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 91
38883: PUSH
38884: LD_VAR 0 1
38888: PUSH
38889: LD_INT 6
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 30
38899: PUSH
38900: LD_VAR 0 4
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: LIST
38913: PUSH
38914: EMPTY
38915: LIST
38916: PPUSH
38917: CALL_OW 69
38921: ADD
38922: ST_TO_ADDR
38923: GO 38851
38925: POP
38926: POP
// for i = 1 to tmp do
38927: LD_ADDR_VAR 0 4
38931: PUSH
38932: DOUBLE
38933: LD_INT 1
38935: DEC
38936: ST_TO_ADDR
38937: LD_VAR 0 3
38941: PUSH
38942: FOR_TO
38943: IFFALSE 39031
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38945: LD_ADDR_VAR 0 5
38949: PUSH
38950: LD_VAR 0 5
38954: PUSH
38955: LD_VAR 0 3
38959: PUSH
38960: LD_VAR 0 4
38964: ARRAY
38965: PPUSH
38966: CALL_OW 266
38970: PUSH
38971: LD_VAR 0 3
38975: PUSH
38976: LD_VAR 0 4
38980: ARRAY
38981: PPUSH
38982: CALL_OW 250
38986: PUSH
38987: LD_VAR 0 3
38991: PUSH
38992: LD_VAR 0 4
38996: ARRAY
38997: PPUSH
38998: CALL_OW 251
39002: PUSH
39003: LD_VAR 0 3
39007: PUSH
39008: LD_VAR 0 4
39012: ARRAY
39013: PPUSH
39014: CALL_OW 254
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: PUSH
39025: EMPTY
39026: LIST
39027: ADD
39028: ST_TO_ADDR
39029: GO 38942
39031: POP
39032: POP
// result := list ;
39033: LD_ADDR_VAR 0 2
39037: PUSH
39038: LD_VAR 0 5
39042: ST_TO_ADDR
// end ;
39043: LD_VAR 0 2
39047: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39048: LD_INT 0
39050: PPUSH
39051: PPUSH
39052: PPUSH
39053: PPUSH
39054: PPUSH
39055: PPUSH
39056: PPUSH
// if not factory then
39057: LD_VAR 0 1
39061: NOT
39062: IFFALSE 39066
// exit ;
39064: GO 39659
// if control = control_apeman then
39066: LD_VAR 0 4
39070: PUSH
39071: LD_INT 5
39073: EQUAL
39074: IFFALSE 39183
// begin tmp := UnitsInside ( factory ) ;
39076: LD_ADDR_VAR 0 8
39080: PUSH
39081: LD_VAR 0 1
39085: PPUSH
39086: CALL_OW 313
39090: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39091: LD_VAR 0 8
39095: PPUSH
39096: LD_INT 25
39098: PUSH
39099: LD_INT 12
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PPUSH
39106: CALL_OW 72
39110: NOT
39111: IFFALSE 39121
// control := control_manual ;
39113: LD_ADDR_VAR 0 4
39117: PUSH
39118: LD_INT 1
39120: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39121: LD_ADDR_VAR 0 8
39125: PUSH
39126: LD_VAR 0 1
39130: PPUSH
39131: CALL 38818 0 1
39135: ST_TO_ADDR
// if tmp then
39136: LD_VAR 0 8
39140: IFFALSE 39183
// begin for i in tmp do
39142: LD_ADDR_VAR 0 7
39146: PUSH
39147: LD_VAR 0 8
39151: PUSH
39152: FOR_IN
39153: IFFALSE 39181
// if i [ 1 ] = b_ext_radio then
39155: LD_VAR 0 7
39159: PUSH
39160: LD_INT 1
39162: ARRAY
39163: PUSH
39164: LD_INT 22
39166: EQUAL
39167: IFFALSE 39179
// begin control := control_remote ;
39169: LD_ADDR_VAR 0 4
39173: PUSH
39174: LD_INT 2
39176: ST_TO_ADDR
// break ;
39177: GO 39181
// end ;
39179: GO 39152
39181: POP
39182: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39183: LD_VAR 0 1
39187: PPUSH
39188: LD_VAR 0 2
39192: PPUSH
39193: LD_VAR 0 3
39197: PPUSH
39198: LD_VAR 0 4
39202: PPUSH
39203: LD_VAR 0 5
39207: PPUSH
39208: CALL_OW 448
39212: IFFALSE 39247
// begin result := [ chassis , engine , control , weapon ] ;
39214: LD_ADDR_VAR 0 6
39218: PUSH
39219: LD_VAR 0 2
39223: PUSH
39224: LD_VAR 0 3
39228: PUSH
39229: LD_VAR 0 4
39233: PUSH
39234: LD_VAR 0 5
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: ST_TO_ADDR
// exit ;
39245: GO 39659
// end ; _chassis := AvailableChassisList ( factory ) ;
39247: LD_ADDR_VAR 0 9
39251: PUSH
39252: LD_VAR 0 1
39256: PPUSH
39257: CALL_OW 475
39261: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39262: LD_ADDR_VAR 0 11
39266: PUSH
39267: LD_VAR 0 1
39271: PPUSH
39272: CALL_OW 476
39276: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39277: LD_ADDR_VAR 0 12
39281: PUSH
39282: LD_VAR 0 1
39286: PPUSH
39287: CALL_OW 477
39291: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39292: LD_ADDR_VAR 0 10
39296: PUSH
39297: LD_VAR 0 1
39301: PPUSH
39302: CALL_OW 478
39306: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39307: LD_VAR 0 9
39311: NOT
39312: PUSH
39313: LD_VAR 0 11
39317: NOT
39318: OR
39319: PUSH
39320: LD_VAR 0 12
39324: NOT
39325: OR
39326: PUSH
39327: LD_VAR 0 10
39331: NOT
39332: OR
39333: IFFALSE 39368
// begin result := [ chassis , engine , control , weapon ] ;
39335: LD_ADDR_VAR 0 6
39339: PUSH
39340: LD_VAR 0 2
39344: PUSH
39345: LD_VAR 0 3
39349: PUSH
39350: LD_VAR 0 4
39354: PUSH
39355: LD_VAR 0 5
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: ST_TO_ADDR
// exit ;
39366: GO 39659
// end ; if not chassis in _chassis then
39368: LD_VAR 0 2
39372: PUSH
39373: LD_VAR 0 9
39377: IN
39378: NOT
39379: IFFALSE 39405
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39381: LD_ADDR_VAR 0 2
39385: PUSH
39386: LD_VAR 0 9
39390: PUSH
39391: LD_INT 1
39393: PPUSH
39394: LD_VAR 0 9
39398: PPUSH
39399: CALL_OW 12
39403: ARRAY
39404: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39405: LD_VAR 0 2
39409: PPUSH
39410: LD_VAR 0 3
39414: PPUSH
39415: CALL 39664 0 2
39419: NOT
39420: IFFALSE 39479
// repeat engine := _engine [ 1 ] ;
39422: LD_ADDR_VAR 0 3
39426: PUSH
39427: LD_VAR 0 11
39431: PUSH
39432: LD_INT 1
39434: ARRAY
39435: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39436: LD_ADDR_VAR 0 11
39440: PUSH
39441: LD_VAR 0 11
39445: PPUSH
39446: LD_INT 1
39448: PPUSH
39449: CALL_OW 3
39453: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39454: LD_VAR 0 2
39458: PPUSH
39459: LD_VAR 0 3
39463: PPUSH
39464: CALL 39664 0 2
39468: PUSH
39469: LD_VAR 0 11
39473: PUSH
39474: EMPTY
39475: EQUAL
39476: OR
39477: IFFALSE 39422
// if not control in _control then
39479: LD_VAR 0 4
39483: PUSH
39484: LD_VAR 0 12
39488: IN
39489: NOT
39490: IFFALSE 39516
// control := _control [ rand ( 1 , _control ) ] ;
39492: LD_ADDR_VAR 0 4
39496: PUSH
39497: LD_VAR 0 12
39501: PUSH
39502: LD_INT 1
39504: PPUSH
39505: LD_VAR 0 12
39509: PPUSH
39510: CALL_OW 12
39514: ARRAY
39515: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39516: LD_VAR 0 2
39520: PPUSH
39521: LD_VAR 0 5
39525: PPUSH
39526: CALL 39884 0 2
39530: NOT
39531: IFFALSE 39590
// repeat weapon := _weapon [ 1 ] ;
39533: LD_ADDR_VAR 0 5
39537: PUSH
39538: LD_VAR 0 10
39542: PUSH
39543: LD_INT 1
39545: ARRAY
39546: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39547: LD_ADDR_VAR 0 10
39551: PUSH
39552: LD_VAR 0 10
39556: PPUSH
39557: LD_INT 1
39559: PPUSH
39560: CALL_OW 3
39564: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39565: LD_VAR 0 2
39569: PPUSH
39570: LD_VAR 0 5
39574: PPUSH
39575: CALL 39884 0 2
39579: PUSH
39580: LD_VAR 0 10
39584: PUSH
39585: EMPTY
39586: EQUAL
39587: OR
39588: IFFALSE 39533
// result := [ ] ;
39590: LD_ADDR_VAR 0 6
39594: PUSH
39595: EMPTY
39596: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39597: LD_VAR 0 1
39601: PPUSH
39602: LD_VAR 0 2
39606: PPUSH
39607: LD_VAR 0 3
39611: PPUSH
39612: LD_VAR 0 4
39616: PPUSH
39617: LD_VAR 0 5
39621: PPUSH
39622: CALL_OW 448
39626: IFFALSE 39659
// result := [ chassis , engine , control , weapon ] ;
39628: LD_ADDR_VAR 0 6
39632: PUSH
39633: LD_VAR 0 2
39637: PUSH
39638: LD_VAR 0 3
39642: PUSH
39643: LD_VAR 0 4
39647: PUSH
39648: LD_VAR 0 5
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: ST_TO_ADDR
// end ;
39659: LD_VAR 0 6
39663: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39664: LD_INT 0
39666: PPUSH
// if not chassis or not engine then
39667: LD_VAR 0 1
39671: NOT
39672: PUSH
39673: LD_VAR 0 2
39677: NOT
39678: OR
39679: IFFALSE 39683
// exit ;
39681: GO 39879
// case engine of engine_solar :
39683: LD_VAR 0 2
39687: PUSH
39688: LD_INT 2
39690: DOUBLE
39691: EQUAL
39692: IFTRUE 39696
39694: GO 39734
39696: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39697: LD_ADDR_VAR 0 3
39701: PUSH
39702: LD_INT 11
39704: PUSH
39705: LD_INT 12
39707: PUSH
39708: LD_INT 13
39710: PUSH
39711: LD_INT 14
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: LD_INT 2
39719: PUSH
39720: LD_INT 3
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: ST_TO_ADDR
39732: GO 39863
39734: LD_INT 1
39736: DOUBLE
39737: EQUAL
39738: IFTRUE 39742
39740: GO 39804
39742: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39743: LD_ADDR_VAR 0 3
39747: PUSH
39748: LD_INT 11
39750: PUSH
39751: LD_INT 12
39753: PUSH
39754: LD_INT 13
39756: PUSH
39757: LD_INT 14
39759: PUSH
39760: LD_INT 1
39762: PUSH
39763: LD_INT 2
39765: PUSH
39766: LD_INT 3
39768: PUSH
39769: LD_INT 4
39771: PUSH
39772: LD_INT 5
39774: PUSH
39775: LD_INT 21
39777: PUSH
39778: LD_INT 23
39780: PUSH
39781: LD_INT 22
39783: PUSH
39784: LD_INT 24
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: ST_TO_ADDR
39802: GO 39863
39804: LD_INT 3
39806: DOUBLE
39807: EQUAL
39808: IFTRUE 39812
39810: GO 39862
39812: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39813: LD_ADDR_VAR 0 3
39817: PUSH
39818: LD_INT 13
39820: PUSH
39821: LD_INT 14
39823: PUSH
39824: LD_INT 2
39826: PUSH
39827: LD_INT 3
39829: PUSH
39830: LD_INT 4
39832: PUSH
39833: LD_INT 5
39835: PUSH
39836: LD_INT 21
39838: PUSH
39839: LD_INT 22
39841: PUSH
39842: LD_INT 23
39844: PUSH
39845: LD_INT 24
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: ST_TO_ADDR
39860: GO 39863
39862: POP
// result := ( chassis in result ) ;
39863: LD_ADDR_VAR 0 3
39867: PUSH
39868: LD_VAR 0 1
39872: PUSH
39873: LD_VAR 0 3
39877: IN
39878: ST_TO_ADDR
// end ;
39879: LD_VAR 0 3
39883: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39884: LD_INT 0
39886: PPUSH
// if not chassis or not weapon then
39887: LD_VAR 0 1
39891: NOT
39892: PUSH
39893: LD_VAR 0 2
39897: NOT
39898: OR
39899: IFFALSE 39903
// exit ;
39901: GO 40965
// case weapon of us_machine_gun :
39903: LD_VAR 0 2
39907: PUSH
39908: LD_INT 2
39910: DOUBLE
39911: EQUAL
39912: IFTRUE 39916
39914: GO 39946
39916: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39917: LD_ADDR_VAR 0 3
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: LD_INT 2
39927: PUSH
39928: LD_INT 3
39930: PUSH
39931: LD_INT 4
39933: PUSH
39934: LD_INT 5
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: ST_TO_ADDR
39944: GO 40949
39946: LD_INT 3
39948: DOUBLE
39949: EQUAL
39950: IFTRUE 39954
39952: GO 39984
39954: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39955: LD_ADDR_VAR 0 3
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: LD_INT 2
39965: PUSH
39966: LD_INT 3
39968: PUSH
39969: LD_INT 4
39971: PUSH
39972: LD_INT 5
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: ST_TO_ADDR
39982: GO 40949
39984: LD_INT 11
39986: DOUBLE
39987: EQUAL
39988: IFTRUE 39992
39990: GO 40022
39992: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39993: LD_ADDR_VAR 0 3
39997: PUSH
39998: LD_INT 1
40000: PUSH
40001: LD_INT 2
40003: PUSH
40004: LD_INT 3
40006: PUSH
40007: LD_INT 4
40009: PUSH
40010: LD_INT 5
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: ST_TO_ADDR
40020: GO 40949
40022: LD_INT 4
40024: DOUBLE
40025: EQUAL
40026: IFTRUE 40030
40028: GO 40056
40030: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40031: LD_ADDR_VAR 0 3
40035: PUSH
40036: LD_INT 2
40038: PUSH
40039: LD_INT 3
40041: PUSH
40042: LD_INT 4
40044: PUSH
40045: LD_INT 5
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: ST_TO_ADDR
40054: GO 40949
40056: LD_INT 5
40058: DOUBLE
40059: EQUAL
40060: IFTRUE 40064
40062: GO 40090
40064: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40065: LD_ADDR_VAR 0 3
40069: PUSH
40070: LD_INT 2
40072: PUSH
40073: LD_INT 3
40075: PUSH
40076: LD_INT 4
40078: PUSH
40079: LD_INT 5
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: ST_TO_ADDR
40088: GO 40949
40090: LD_INT 9
40092: DOUBLE
40093: EQUAL
40094: IFTRUE 40098
40096: GO 40124
40098: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40099: LD_ADDR_VAR 0 3
40103: PUSH
40104: LD_INT 2
40106: PUSH
40107: LD_INT 3
40109: PUSH
40110: LD_INT 4
40112: PUSH
40113: LD_INT 5
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: ST_TO_ADDR
40122: GO 40949
40124: LD_INT 7
40126: DOUBLE
40127: EQUAL
40128: IFTRUE 40132
40130: GO 40158
40132: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40133: LD_ADDR_VAR 0 3
40137: PUSH
40138: LD_INT 2
40140: PUSH
40141: LD_INT 3
40143: PUSH
40144: LD_INT 4
40146: PUSH
40147: LD_INT 5
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: ST_TO_ADDR
40156: GO 40949
40158: LD_INT 12
40160: DOUBLE
40161: EQUAL
40162: IFTRUE 40166
40164: GO 40192
40166: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40167: LD_ADDR_VAR 0 3
40171: PUSH
40172: LD_INT 2
40174: PUSH
40175: LD_INT 3
40177: PUSH
40178: LD_INT 4
40180: PUSH
40181: LD_INT 5
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: ST_TO_ADDR
40190: GO 40949
40192: LD_INT 13
40194: DOUBLE
40195: EQUAL
40196: IFTRUE 40200
40198: GO 40226
40200: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40201: LD_ADDR_VAR 0 3
40205: PUSH
40206: LD_INT 2
40208: PUSH
40209: LD_INT 3
40211: PUSH
40212: LD_INT 4
40214: PUSH
40215: LD_INT 5
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: ST_TO_ADDR
40224: GO 40949
40226: LD_INT 14
40228: DOUBLE
40229: EQUAL
40230: IFTRUE 40234
40232: GO 40252
40234: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40235: LD_ADDR_VAR 0 3
40239: PUSH
40240: LD_INT 4
40242: PUSH
40243: LD_INT 5
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: ST_TO_ADDR
40250: GO 40949
40252: LD_INT 6
40254: DOUBLE
40255: EQUAL
40256: IFTRUE 40260
40258: GO 40278
40260: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40261: LD_ADDR_VAR 0 3
40265: PUSH
40266: LD_INT 4
40268: PUSH
40269: LD_INT 5
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: ST_TO_ADDR
40276: GO 40949
40278: LD_INT 10
40280: DOUBLE
40281: EQUAL
40282: IFTRUE 40286
40284: GO 40304
40286: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40287: LD_ADDR_VAR 0 3
40291: PUSH
40292: LD_INT 4
40294: PUSH
40295: LD_INT 5
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: ST_TO_ADDR
40302: GO 40949
40304: LD_INT 22
40306: DOUBLE
40307: EQUAL
40308: IFTRUE 40312
40310: GO 40338
40312: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40313: LD_ADDR_VAR 0 3
40317: PUSH
40318: LD_INT 11
40320: PUSH
40321: LD_INT 12
40323: PUSH
40324: LD_INT 13
40326: PUSH
40327: LD_INT 14
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: ST_TO_ADDR
40336: GO 40949
40338: LD_INT 23
40340: DOUBLE
40341: EQUAL
40342: IFTRUE 40346
40344: GO 40372
40346: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40347: LD_ADDR_VAR 0 3
40351: PUSH
40352: LD_INT 11
40354: PUSH
40355: LD_INT 12
40357: PUSH
40358: LD_INT 13
40360: PUSH
40361: LD_INT 14
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: ST_TO_ADDR
40370: GO 40949
40372: LD_INT 24
40374: DOUBLE
40375: EQUAL
40376: IFTRUE 40380
40378: GO 40406
40380: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40381: LD_ADDR_VAR 0 3
40385: PUSH
40386: LD_INT 11
40388: PUSH
40389: LD_INT 12
40391: PUSH
40392: LD_INT 13
40394: PUSH
40395: LD_INT 14
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: ST_TO_ADDR
40404: GO 40949
40406: LD_INT 30
40408: DOUBLE
40409: EQUAL
40410: IFTRUE 40414
40412: GO 40440
40414: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40415: LD_ADDR_VAR 0 3
40419: PUSH
40420: LD_INT 11
40422: PUSH
40423: LD_INT 12
40425: PUSH
40426: LD_INT 13
40428: PUSH
40429: LD_INT 14
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: ST_TO_ADDR
40438: GO 40949
40440: LD_INT 25
40442: DOUBLE
40443: EQUAL
40444: IFTRUE 40448
40446: GO 40466
40448: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40449: LD_ADDR_VAR 0 3
40453: PUSH
40454: LD_INT 13
40456: PUSH
40457: LD_INT 14
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: ST_TO_ADDR
40464: GO 40949
40466: LD_INT 27
40468: DOUBLE
40469: EQUAL
40470: IFTRUE 40474
40472: GO 40492
40474: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40475: LD_ADDR_VAR 0 3
40479: PUSH
40480: LD_INT 13
40482: PUSH
40483: LD_INT 14
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: ST_TO_ADDR
40490: GO 40949
40492: LD_EXP 67
40496: DOUBLE
40497: EQUAL
40498: IFTRUE 40502
40500: GO 40528
40502: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40503: LD_ADDR_VAR 0 3
40507: PUSH
40508: LD_INT 11
40510: PUSH
40511: LD_INT 12
40513: PUSH
40514: LD_INT 13
40516: PUSH
40517: LD_INT 14
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: ST_TO_ADDR
40526: GO 40949
40528: LD_INT 28
40530: DOUBLE
40531: EQUAL
40532: IFTRUE 40536
40534: GO 40554
40536: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40537: LD_ADDR_VAR 0 3
40541: PUSH
40542: LD_INT 13
40544: PUSH
40545: LD_INT 14
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: ST_TO_ADDR
40552: GO 40949
40554: LD_INT 29
40556: DOUBLE
40557: EQUAL
40558: IFTRUE 40562
40560: GO 40580
40562: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40563: LD_ADDR_VAR 0 3
40567: PUSH
40568: LD_INT 13
40570: PUSH
40571: LD_INT 14
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: ST_TO_ADDR
40578: GO 40949
40580: LD_INT 31
40582: DOUBLE
40583: EQUAL
40584: IFTRUE 40588
40586: GO 40606
40588: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40589: LD_ADDR_VAR 0 3
40593: PUSH
40594: LD_INT 13
40596: PUSH
40597: LD_INT 14
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: ST_TO_ADDR
40604: GO 40949
40606: LD_INT 26
40608: DOUBLE
40609: EQUAL
40610: IFTRUE 40614
40612: GO 40632
40614: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40615: LD_ADDR_VAR 0 3
40619: PUSH
40620: LD_INT 13
40622: PUSH
40623: LD_INT 14
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: ST_TO_ADDR
40630: GO 40949
40632: LD_INT 42
40634: DOUBLE
40635: EQUAL
40636: IFTRUE 40640
40638: GO 40666
40640: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40641: LD_ADDR_VAR 0 3
40645: PUSH
40646: LD_INT 21
40648: PUSH
40649: LD_INT 22
40651: PUSH
40652: LD_INT 23
40654: PUSH
40655: LD_INT 24
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: ST_TO_ADDR
40664: GO 40949
40666: LD_INT 43
40668: DOUBLE
40669: EQUAL
40670: IFTRUE 40674
40672: GO 40700
40674: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40675: LD_ADDR_VAR 0 3
40679: PUSH
40680: LD_INT 21
40682: PUSH
40683: LD_INT 22
40685: PUSH
40686: LD_INT 23
40688: PUSH
40689: LD_INT 24
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: ST_TO_ADDR
40698: GO 40949
40700: LD_INT 44
40702: DOUBLE
40703: EQUAL
40704: IFTRUE 40708
40706: GO 40734
40708: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40709: LD_ADDR_VAR 0 3
40713: PUSH
40714: LD_INT 21
40716: PUSH
40717: LD_INT 22
40719: PUSH
40720: LD_INT 23
40722: PUSH
40723: LD_INT 24
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: ST_TO_ADDR
40732: GO 40949
40734: LD_INT 45
40736: DOUBLE
40737: EQUAL
40738: IFTRUE 40742
40740: GO 40768
40742: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40743: LD_ADDR_VAR 0 3
40747: PUSH
40748: LD_INT 21
40750: PUSH
40751: LD_INT 22
40753: PUSH
40754: LD_INT 23
40756: PUSH
40757: LD_INT 24
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: ST_TO_ADDR
40766: GO 40949
40768: LD_INT 49
40770: DOUBLE
40771: EQUAL
40772: IFTRUE 40776
40774: GO 40802
40776: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40777: LD_ADDR_VAR 0 3
40781: PUSH
40782: LD_INT 21
40784: PUSH
40785: LD_INT 22
40787: PUSH
40788: LD_INT 23
40790: PUSH
40791: LD_INT 24
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: ST_TO_ADDR
40800: GO 40949
40802: LD_INT 51
40804: DOUBLE
40805: EQUAL
40806: IFTRUE 40810
40808: GO 40836
40810: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40811: LD_ADDR_VAR 0 3
40815: PUSH
40816: LD_INT 21
40818: PUSH
40819: LD_INT 22
40821: PUSH
40822: LD_INT 23
40824: PUSH
40825: LD_INT 24
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: ST_TO_ADDR
40834: GO 40949
40836: LD_INT 52
40838: DOUBLE
40839: EQUAL
40840: IFTRUE 40844
40842: GO 40870
40844: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40845: LD_ADDR_VAR 0 3
40849: PUSH
40850: LD_INT 21
40852: PUSH
40853: LD_INT 22
40855: PUSH
40856: LD_INT 23
40858: PUSH
40859: LD_INT 24
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: ST_TO_ADDR
40868: GO 40949
40870: LD_INT 53
40872: DOUBLE
40873: EQUAL
40874: IFTRUE 40878
40876: GO 40896
40878: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40879: LD_ADDR_VAR 0 3
40883: PUSH
40884: LD_INT 23
40886: PUSH
40887: LD_INT 24
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: ST_TO_ADDR
40894: GO 40949
40896: LD_INT 46
40898: DOUBLE
40899: EQUAL
40900: IFTRUE 40904
40902: GO 40922
40904: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40905: LD_ADDR_VAR 0 3
40909: PUSH
40910: LD_INT 23
40912: PUSH
40913: LD_INT 24
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: ST_TO_ADDR
40920: GO 40949
40922: LD_INT 47
40924: DOUBLE
40925: EQUAL
40926: IFTRUE 40930
40928: GO 40948
40930: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40931: LD_ADDR_VAR 0 3
40935: PUSH
40936: LD_INT 23
40938: PUSH
40939: LD_INT 24
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: ST_TO_ADDR
40946: GO 40949
40948: POP
// result := ( chassis in result ) ;
40949: LD_ADDR_VAR 0 3
40953: PUSH
40954: LD_VAR 0 1
40958: PUSH
40959: LD_VAR 0 3
40963: IN
40964: ST_TO_ADDR
// end ;
40965: LD_VAR 0 3
40969: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40970: LD_INT 0
40972: PPUSH
40973: PPUSH
40974: PPUSH
40975: PPUSH
40976: PPUSH
40977: PPUSH
40978: PPUSH
// result := array ;
40979: LD_ADDR_VAR 0 5
40983: PUSH
40984: LD_VAR 0 1
40988: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40989: LD_VAR 0 1
40993: NOT
40994: PUSH
40995: LD_VAR 0 2
40999: NOT
41000: OR
41001: PUSH
41002: LD_VAR 0 3
41006: NOT
41007: OR
41008: PUSH
41009: LD_VAR 0 2
41013: PUSH
41014: LD_VAR 0 1
41018: GREATER
41019: OR
41020: PUSH
41021: LD_VAR 0 3
41025: PUSH
41026: LD_VAR 0 1
41030: GREATER
41031: OR
41032: IFFALSE 41036
// exit ;
41034: GO 41332
// if direction then
41036: LD_VAR 0 4
41040: IFFALSE 41104
// begin d := 1 ;
41042: LD_ADDR_VAR 0 9
41046: PUSH
41047: LD_INT 1
41049: ST_TO_ADDR
// if i_from > i_to then
41050: LD_VAR 0 2
41054: PUSH
41055: LD_VAR 0 3
41059: GREATER
41060: IFFALSE 41086
// length := ( array - i_from ) + i_to else
41062: LD_ADDR_VAR 0 11
41066: PUSH
41067: LD_VAR 0 1
41071: PUSH
41072: LD_VAR 0 2
41076: MINUS
41077: PUSH
41078: LD_VAR 0 3
41082: PLUS
41083: ST_TO_ADDR
41084: GO 41102
// length := i_to - i_from ;
41086: LD_ADDR_VAR 0 11
41090: PUSH
41091: LD_VAR 0 3
41095: PUSH
41096: LD_VAR 0 2
41100: MINUS
41101: ST_TO_ADDR
// end else
41102: GO 41165
// begin d := - 1 ;
41104: LD_ADDR_VAR 0 9
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: ST_TO_ADDR
// if i_from > i_to then
41113: LD_VAR 0 2
41117: PUSH
41118: LD_VAR 0 3
41122: GREATER
41123: IFFALSE 41143
// length := i_from - i_to else
41125: LD_ADDR_VAR 0 11
41129: PUSH
41130: LD_VAR 0 2
41134: PUSH
41135: LD_VAR 0 3
41139: MINUS
41140: ST_TO_ADDR
41141: GO 41165
// length := ( array - i_to ) + i_from ;
41143: LD_ADDR_VAR 0 11
41147: PUSH
41148: LD_VAR 0 1
41152: PUSH
41153: LD_VAR 0 3
41157: MINUS
41158: PUSH
41159: LD_VAR 0 2
41163: PLUS
41164: ST_TO_ADDR
// end ; if not length then
41165: LD_VAR 0 11
41169: NOT
41170: IFFALSE 41174
// exit ;
41172: GO 41332
// tmp := array ;
41174: LD_ADDR_VAR 0 10
41178: PUSH
41179: LD_VAR 0 1
41183: ST_TO_ADDR
// for i = 1 to length do
41184: LD_ADDR_VAR 0 6
41188: PUSH
41189: DOUBLE
41190: LD_INT 1
41192: DEC
41193: ST_TO_ADDR
41194: LD_VAR 0 11
41198: PUSH
41199: FOR_TO
41200: IFFALSE 41320
// begin for j = 1 to array do
41202: LD_ADDR_VAR 0 7
41206: PUSH
41207: DOUBLE
41208: LD_INT 1
41210: DEC
41211: ST_TO_ADDR
41212: LD_VAR 0 1
41216: PUSH
41217: FOR_TO
41218: IFFALSE 41306
// begin k := j + d ;
41220: LD_ADDR_VAR 0 8
41224: PUSH
41225: LD_VAR 0 7
41229: PUSH
41230: LD_VAR 0 9
41234: PLUS
41235: ST_TO_ADDR
// if k > array then
41236: LD_VAR 0 8
41240: PUSH
41241: LD_VAR 0 1
41245: GREATER
41246: IFFALSE 41256
// k := 1 ;
41248: LD_ADDR_VAR 0 8
41252: PUSH
41253: LD_INT 1
41255: ST_TO_ADDR
// if not k then
41256: LD_VAR 0 8
41260: NOT
41261: IFFALSE 41273
// k := array ;
41263: LD_ADDR_VAR 0 8
41267: PUSH
41268: LD_VAR 0 1
41272: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41273: LD_ADDR_VAR 0 10
41277: PUSH
41278: LD_VAR 0 10
41282: PPUSH
41283: LD_VAR 0 8
41287: PPUSH
41288: LD_VAR 0 1
41292: PUSH
41293: LD_VAR 0 7
41297: ARRAY
41298: PPUSH
41299: CALL_OW 1
41303: ST_TO_ADDR
// end ;
41304: GO 41217
41306: POP
41307: POP
// array := tmp ;
41308: LD_ADDR_VAR 0 1
41312: PUSH
41313: LD_VAR 0 10
41317: ST_TO_ADDR
// end ;
41318: GO 41199
41320: POP
41321: POP
// result := array ;
41322: LD_ADDR_VAR 0 5
41326: PUSH
41327: LD_VAR 0 1
41331: ST_TO_ADDR
// end ;
41332: LD_VAR 0 5
41336: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41337: LD_INT 0
41339: PPUSH
41340: PPUSH
// result := 0 ;
41341: LD_ADDR_VAR 0 3
41345: PUSH
41346: LD_INT 0
41348: ST_TO_ADDR
// if not array or not value in array then
41349: LD_VAR 0 1
41353: NOT
41354: PUSH
41355: LD_VAR 0 2
41359: PUSH
41360: LD_VAR 0 1
41364: IN
41365: NOT
41366: OR
41367: IFFALSE 41371
// exit ;
41369: GO 41425
// for i = 1 to array do
41371: LD_ADDR_VAR 0 4
41375: PUSH
41376: DOUBLE
41377: LD_INT 1
41379: DEC
41380: ST_TO_ADDR
41381: LD_VAR 0 1
41385: PUSH
41386: FOR_TO
41387: IFFALSE 41423
// if value = array [ i ] then
41389: LD_VAR 0 2
41393: PUSH
41394: LD_VAR 0 1
41398: PUSH
41399: LD_VAR 0 4
41403: ARRAY
41404: EQUAL
41405: IFFALSE 41421
// begin result := i ;
41407: LD_ADDR_VAR 0 3
41411: PUSH
41412: LD_VAR 0 4
41416: ST_TO_ADDR
// exit ;
41417: POP
41418: POP
41419: GO 41425
// end ;
41421: GO 41386
41423: POP
41424: POP
// end ;
41425: LD_VAR 0 3
41429: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41430: LD_INT 0
41432: PPUSH
// vc_chassis := chassis ;
41433: LD_ADDR_OWVAR 37
41437: PUSH
41438: LD_VAR 0 1
41442: ST_TO_ADDR
// vc_engine := engine ;
41443: LD_ADDR_OWVAR 39
41447: PUSH
41448: LD_VAR 0 2
41452: ST_TO_ADDR
// vc_control := control ;
41453: LD_ADDR_OWVAR 38
41457: PUSH
41458: LD_VAR 0 3
41462: ST_TO_ADDR
// vc_weapon := weapon ;
41463: LD_ADDR_OWVAR 40
41467: PUSH
41468: LD_VAR 0 4
41472: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41473: LD_ADDR_OWVAR 41
41477: PUSH
41478: LD_VAR 0 5
41482: ST_TO_ADDR
// end ;
41483: LD_VAR 0 6
41487: RET
// export function WantPlant ( unit ) ; var task ; begin
41488: LD_INT 0
41490: PPUSH
41491: PPUSH
// result := false ;
41492: LD_ADDR_VAR 0 2
41496: PUSH
41497: LD_INT 0
41499: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41500: LD_ADDR_VAR 0 3
41504: PUSH
41505: LD_VAR 0 1
41509: PPUSH
41510: CALL_OW 437
41514: ST_TO_ADDR
// if task then
41515: LD_VAR 0 3
41519: IFFALSE 41547
// if task [ 1 ] [ 1 ] = p then
41521: LD_VAR 0 3
41525: PUSH
41526: LD_INT 1
41528: ARRAY
41529: PUSH
41530: LD_INT 1
41532: ARRAY
41533: PUSH
41534: LD_STRING p
41536: EQUAL
41537: IFFALSE 41547
// result := true ;
41539: LD_ADDR_VAR 0 2
41543: PUSH
41544: LD_INT 1
41546: ST_TO_ADDR
// end ;
41547: LD_VAR 0 2
41551: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41552: LD_INT 0
41554: PPUSH
41555: PPUSH
41556: PPUSH
41557: PPUSH
// if pos < 1 then
41558: LD_VAR 0 2
41562: PUSH
41563: LD_INT 1
41565: LESS
41566: IFFALSE 41570
// exit ;
41568: GO 41873
// if pos = 1 then
41570: LD_VAR 0 2
41574: PUSH
41575: LD_INT 1
41577: EQUAL
41578: IFFALSE 41611
// result := Replace ( arr , pos [ 1 ] , value ) else
41580: LD_ADDR_VAR 0 4
41584: PUSH
41585: LD_VAR 0 1
41589: PPUSH
41590: LD_VAR 0 2
41594: PUSH
41595: LD_INT 1
41597: ARRAY
41598: PPUSH
41599: LD_VAR 0 3
41603: PPUSH
41604: CALL_OW 1
41608: ST_TO_ADDR
41609: GO 41873
// begin tmp := arr ;
41611: LD_ADDR_VAR 0 6
41615: PUSH
41616: LD_VAR 0 1
41620: ST_TO_ADDR
// s_arr := [ tmp ] ;
41621: LD_ADDR_VAR 0 7
41625: PUSH
41626: LD_VAR 0 6
41630: PUSH
41631: EMPTY
41632: LIST
41633: ST_TO_ADDR
// for i = 1 to pos - 1 do
41634: LD_ADDR_VAR 0 5
41638: PUSH
41639: DOUBLE
41640: LD_INT 1
41642: DEC
41643: ST_TO_ADDR
41644: LD_VAR 0 2
41648: PUSH
41649: LD_INT 1
41651: MINUS
41652: PUSH
41653: FOR_TO
41654: IFFALSE 41699
// begin tmp := tmp [ pos [ i ] ] ;
41656: LD_ADDR_VAR 0 6
41660: PUSH
41661: LD_VAR 0 6
41665: PUSH
41666: LD_VAR 0 2
41670: PUSH
41671: LD_VAR 0 5
41675: ARRAY
41676: ARRAY
41677: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41678: LD_ADDR_VAR 0 7
41682: PUSH
41683: LD_VAR 0 7
41687: PUSH
41688: LD_VAR 0 6
41692: PUSH
41693: EMPTY
41694: LIST
41695: ADD
41696: ST_TO_ADDR
// end ;
41697: GO 41653
41699: POP
41700: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41701: LD_ADDR_VAR 0 6
41705: PUSH
41706: LD_VAR 0 6
41710: PPUSH
41711: LD_VAR 0 2
41715: PUSH
41716: LD_VAR 0 2
41720: ARRAY
41721: PPUSH
41722: LD_VAR 0 3
41726: PPUSH
41727: CALL_OW 1
41731: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41732: LD_ADDR_VAR 0 7
41736: PUSH
41737: LD_VAR 0 7
41741: PPUSH
41742: LD_VAR 0 7
41746: PPUSH
41747: LD_VAR 0 6
41751: PPUSH
41752: CALL_OW 1
41756: ST_TO_ADDR
// for i = s_arr downto 2 do
41757: LD_ADDR_VAR 0 5
41761: PUSH
41762: DOUBLE
41763: LD_VAR 0 7
41767: INC
41768: ST_TO_ADDR
41769: LD_INT 2
41771: PUSH
41772: FOR_DOWNTO
41773: IFFALSE 41857
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41775: LD_ADDR_VAR 0 6
41779: PUSH
41780: LD_VAR 0 7
41784: PUSH
41785: LD_VAR 0 5
41789: PUSH
41790: LD_INT 1
41792: MINUS
41793: ARRAY
41794: PPUSH
41795: LD_VAR 0 2
41799: PUSH
41800: LD_VAR 0 5
41804: PUSH
41805: LD_INT 1
41807: MINUS
41808: ARRAY
41809: PPUSH
41810: LD_VAR 0 7
41814: PUSH
41815: LD_VAR 0 5
41819: ARRAY
41820: PPUSH
41821: CALL_OW 1
41825: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41826: LD_ADDR_VAR 0 7
41830: PUSH
41831: LD_VAR 0 7
41835: PPUSH
41836: LD_VAR 0 5
41840: PUSH
41841: LD_INT 1
41843: MINUS
41844: PPUSH
41845: LD_VAR 0 6
41849: PPUSH
41850: CALL_OW 1
41854: ST_TO_ADDR
// end ;
41855: GO 41772
41857: POP
41858: POP
// result := s_arr [ 1 ] ;
41859: LD_ADDR_VAR 0 4
41863: PUSH
41864: LD_VAR 0 7
41868: PUSH
41869: LD_INT 1
41871: ARRAY
41872: ST_TO_ADDR
// end ; end ;
41873: LD_VAR 0 4
41877: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41878: LD_INT 0
41880: PPUSH
41881: PPUSH
// if not list then
41882: LD_VAR 0 1
41886: NOT
41887: IFFALSE 41891
// exit ;
41889: GO 41982
// i := list [ pos1 ] ;
41891: LD_ADDR_VAR 0 5
41895: PUSH
41896: LD_VAR 0 1
41900: PUSH
41901: LD_VAR 0 2
41905: ARRAY
41906: ST_TO_ADDR
// if not i then
41907: LD_VAR 0 5
41911: NOT
41912: IFFALSE 41916
// exit ;
41914: GO 41982
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41916: LD_ADDR_VAR 0 1
41920: PUSH
41921: LD_VAR 0 1
41925: PPUSH
41926: LD_VAR 0 2
41930: PPUSH
41931: LD_VAR 0 1
41935: PUSH
41936: LD_VAR 0 3
41940: ARRAY
41941: PPUSH
41942: CALL_OW 1
41946: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41947: LD_ADDR_VAR 0 1
41951: PUSH
41952: LD_VAR 0 1
41956: PPUSH
41957: LD_VAR 0 3
41961: PPUSH
41962: LD_VAR 0 5
41966: PPUSH
41967: CALL_OW 1
41971: ST_TO_ADDR
// result := list ;
41972: LD_ADDR_VAR 0 4
41976: PUSH
41977: LD_VAR 0 1
41981: ST_TO_ADDR
// end ;
41982: LD_VAR 0 4
41986: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41987: LD_INT 0
41989: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41990: LD_ADDR_VAR 0 5
41994: PUSH
41995: LD_VAR 0 1
41999: PPUSH
42000: CALL_OW 250
42004: PPUSH
42005: LD_VAR 0 1
42009: PPUSH
42010: CALL_OW 251
42014: PPUSH
42015: LD_VAR 0 2
42019: PPUSH
42020: LD_VAR 0 3
42024: PPUSH
42025: LD_VAR 0 4
42029: PPUSH
42030: CALL 42040 0 5
42034: ST_TO_ADDR
// end ;
42035: LD_VAR 0 5
42039: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42040: LD_INT 0
42042: PPUSH
42043: PPUSH
42044: PPUSH
42045: PPUSH
// if not list then
42046: LD_VAR 0 3
42050: NOT
42051: IFFALSE 42055
// exit ;
42053: GO 42443
// result := [ ] ;
42055: LD_ADDR_VAR 0 6
42059: PUSH
42060: EMPTY
42061: ST_TO_ADDR
// for i in list do
42062: LD_ADDR_VAR 0 7
42066: PUSH
42067: LD_VAR 0 3
42071: PUSH
42072: FOR_IN
42073: IFFALSE 42275
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42075: LD_ADDR_VAR 0 9
42079: PUSH
42080: LD_VAR 0 7
42084: PPUSH
42085: LD_VAR 0 1
42089: PPUSH
42090: LD_VAR 0 2
42094: PPUSH
42095: CALL_OW 297
42099: ST_TO_ADDR
// if not result then
42100: LD_VAR 0 6
42104: NOT
42105: IFFALSE 42131
// result := [ [ i , tmp ] ] else
42107: LD_ADDR_VAR 0 6
42111: PUSH
42112: LD_VAR 0 7
42116: PUSH
42117: LD_VAR 0 9
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: EMPTY
42127: LIST
42128: ST_TO_ADDR
42129: GO 42273
// begin if result [ result ] [ 2 ] < tmp then
42131: LD_VAR 0 6
42135: PUSH
42136: LD_VAR 0 6
42140: ARRAY
42141: PUSH
42142: LD_INT 2
42144: ARRAY
42145: PUSH
42146: LD_VAR 0 9
42150: LESS
42151: IFFALSE 42193
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42153: LD_ADDR_VAR 0 6
42157: PUSH
42158: LD_VAR 0 6
42162: PPUSH
42163: LD_VAR 0 6
42167: PUSH
42168: LD_INT 1
42170: PLUS
42171: PPUSH
42172: LD_VAR 0 7
42176: PUSH
42177: LD_VAR 0 9
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PPUSH
42186: CALL_OW 2
42190: ST_TO_ADDR
42191: GO 42273
// for j = 1 to result do
42193: LD_ADDR_VAR 0 8
42197: PUSH
42198: DOUBLE
42199: LD_INT 1
42201: DEC
42202: ST_TO_ADDR
42203: LD_VAR 0 6
42207: PUSH
42208: FOR_TO
42209: IFFALSE 42271
// begin if tmp < result [ j ] [ 2 ] then
42211: LD_VAR 0 9
42215: PUSH
42216: LD_VAR 0 6
42220: PUSH
42221: LD_VAR 0 8
42225: ARRAY
42226: PUSH
42227: LD_INT 2
42229: ARRAY
42230: LESS
42231: IFFALSE 42269
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42233: LD_ADDR_VAR 0 6
42237: PUSH
42238: LD_VAR 0 6
42242: PPUSH
42243: LD_VAR 0 8
42247: PPUSH
42248: LD_VAR 0 7
42252: PUSH
42253: LD_VAR 0 9
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PPUSH
42262: CALL_OW 2
42266: ST_TO_ADDR
// break ;
42267: GO 42271
// end ; end ;
42269: GO 42208
42271: POP
42272: POP
// end ; end ;
42273: GO 42072
42275: POP
42276: POP
// if result and not asc then
42277: LD_VAR 0 6
42281: PUSH
42282: LD_VAR 0 4
42286: NOT
42287: AND
42288: IFFALSE 42363
// begin tmp := result ;
42290: LD_ADDR_VAR 0 9
42294: PUSH
42295: LD_VAR 0 6
42299: ST_TO_ADDR
// for i = tmp downto 1 do
42300: LD_ADDR_VAR 0 7
42304: PUSH
42305: DOUBLE
42306: LD_VAR 0 9
42310: INC
42311: ST_TO_ADDR
42312: LD_INT 1
42314: PUSH
42315: FOR_DOWNTO
42316: IFFALSE 42361
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42318: LD_ADDR_VAR 0 6
42322: PUSH
42323: LD_VAR 0 6
42327: PPUSH
42328: LD_VAR 0 9
42332: PUSH
42333: LD_VAR 0 7
42337: MINUS
42338: PUSH
42339: LD_INT 1
42341: PLUS
42342: PPUSH
42343: LD_VAR 0 9
42347: PUSH
42348: LD_VAR 0 7
42352: ARRAY
42353: PPUSH
42354: CALL_OW 1
42358: ST_TO_ADDR
42359: GO 42315
42361: POP
42362: POP
// end ; tmp := [ ] ;
42363: LD_ADDR_VAR 0 9
42367: PUSH
42368: EMPTY
42369: ST_TO_ADDR
// if mode then
42370: LD_VAR 0 5
42374: IFFALSE 42443
// begin for i = 1 to result do
42376: LD_ADDR_VAR 0 7
42380: PUSH
42381: DOUBLE
42382: LD_INT 1
42384: DEC
42385: ST_TO_ADDR
42386: LD_VAR 0 6
42390: PUSH
42391: FOR_TO
42392: IFFALSE 42431
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42394: LD_ADDR_VAR 0 9
42398: PUSH
42399: LD_VAR 0 9
42403: PPUSH
42404: LD_VAR 0 7
42408: PPUSH
42409: LD_VAR 0 6
42413: PUSH
42414: LD_VAR 0 7
42418: ARRAY
42419: PUSH
42420: LD_INT 1
42422: ARRAY
42423: PPUSH
42424: CALL_OW 1
42428: ST_TO_ADDR
42429: GO 42391
42431: POP
42432: POP
// result := tmp ;
42433: LD_ADDR_VAR 0 6
42437: PUSH
42438: LD_VAR 0 9
42442: ST_TO_ADDR
// end ; end ;
42443: LD_VAR 0 6
42447: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42448: LD_INT 0
42450: PPUSH
42451: PPUSH
42452: PPUSH
42453: PPUSH
42454: PPUSH
42455: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42456: LD_ADDR_VAR 0 5
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: EMPTY
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: ST_TO_ADDR
// if not x or not y then
42478: LD_VAR 0 2
42482: NOT
42483: PUSH
42484: LD_VAR 0 3
42488: NOT
42489: OR
42490: IFFALSE 42494
// exit ;
42492: GO 44146
// if not range then
42494: LD_VAR 0 4
42498: NOT
42499: IFFALSE 42509
// range := 10 ;
42501: LD_ADDR_VAR 0 4
42505: PUSH
42506: LD_INT 10
42508: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42509: LD_ADDR_VAR 0 8
42513: PUSH
42514: LD_INT 81
42516: PUSH
42517: LD_VAR 0 1
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 92
42528: PUSH
42529: LD_VAR 0 2
42533: PUSH
42534: LD_VAR 0 3
42538: PUSH
42539: LD_VAR 0 4
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 3
42552: PUSH
42553: LD_INT 21
42555: PUSH
42556: LD_INT 3
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: LIST
42571: PPUSH
42572: CALL_OW 69
42576: ST_TO_ADDR
// if not tmp then
42577: LD_VAR 0 8
42581: NOT
42582: IFFALSE 42586
// exit ;
42584: GO 44146
// for i in tmp do
42586: LD_ADDR_VAR 0 6
42590: PUSH
42591: LD_VAR 0 8
42595: PUSH
42596: FOR_IN
42597: IFFALSE 44121
// begin points := [ 0 , 0 , 0 ] ;
42599: LD_ADDR_VAR 0 9
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: LD_INT 0
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: LIST
42617: ST_TO_ADDR
// bpoints := 1 ;
42618: LD_ADDR_VAR 0 10
42622: PUSH
42623: LD_INT 1
42625: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42626: LD_VAR 0 6
42630: PPUSH
42631: CALL_OW 247
42635: PUSH
42636: LD_INT 1
42638: DOUBLE
42639: EQUAL
42640: IFTRUE 42644
42642: GO 43222
42644: POP
// begin if GetClass ( i ) = 1 then
42645: LD_VAR 0 6
42649: PPUSH
42650: CALL_OW 257
42654: PUSH
42655: LD_INT 1
42657: EQUAL
42658: IFFALSE 42679
// points := [ 10 , 5 , 3 ] ;
42660: LD_ADDR_VAR 0 9
42664: PUSH
42665: LD_INT 10
42667: PUSH
42668: LD_INT 5
42670: PUSH
42671: LD_INT 3
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: LIST
42678: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42679: LD_VAR 0 6
42683: PPUSH
42684: CALL_OW 257
42688: PUSH
42689: LD_INT 2
42691: PUSH
42692: LD_INT 3
42694: PUSH
42695: LD_INT 4
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: LIST
42702: IN
42703: IFFALSE 42724
// points := [ 3 , 2 , 1 ] ;
42705: LD_ADDR_VAR 0 9
42709: PUSH
42710: LD_INT 3
42712: PUSH
42713: LD_INT 2
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: LIST
42723: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42724: LD_VAR 0 6
42728: PPUSH
42729: CALL_OW 257
42733: PUSH
42734: LD_INT 5
42736: EQUAL
42737: IFFALSE 42758
// points := [ 130 , 5 , 2 ] ;
42739: LD_ADDR_VAR 0 9
42743: PUSH
42744: LD_INT 130
42746: PUSH
42747: LD_INT 5
42749: PUSH
42750: LD_INT 2
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: LIST
42757: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42758: LD_VAR 0 6
42762: PPUSH
42763: CALL_OW 257
42767: PUSH
42768: LD_INT 8
42770: EQUAL
42771: IFFALSE 42792
// points := [ 35 , 35 , 30 ] ;
42773: LD_ADDR_VAR 0 9
42777: PUSH
42778: LD_INT 35
42780: PUSH
42781: LD_INT 35
42783: PUSH
42784: LD_INT 30
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: LIST
42791: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42792: LD_VAR 0 6
42796: PPUSH
42797: CALL_OW 257
42801: PUSH
42802: LD_INT 9
42804: EQUAL
42805: IFFALSE 42826
// points := [ 20 , 55 , 40 ] ;
42807: LD_ADDR_VAR 0 9
42811: PUSH
42812: LD_INT 20
42814: PUSH
42815: LD_INT 55
42817: PUSH
42818: LD_INT 40
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42826: LD_VAR 0 6
42830: PPUSH
42831: CALL_OW 257
42835: PUSH
42836: LD_INT 12
42838: PUSH
42839: LD_INT 16
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: IN
42846: IFFALSE 42867
// points := [ 5 , 3 , 2 ] ;
42848: LD_ADDR_VAR 0 9
42852: PUSH
42853: LD_INT 5
42855: PUSH
42856: LD_INT 3
42858: PUSH
42859: LD_INT 2
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: LIST
42866: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42867: LD_VAR 0 6
42871: PPUSH
42872: CALL_OW 257
42876: PUSH
42877: LD_INT 17
42879: EQUAL
42880: IFFALSE 42901
// points := [ 100 , 50 , 75 ] ;
42882: LD_ADDR_VAR 0 9
42886: PUSH
42887: LD_INT 100
42889: PUSH
42890: LD_INT 50
42892: PUSH
42893: LD_INT 75
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: LIST
42900: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42901: LD_VAR 0 6
42905: PPUSH
42906: CALL_OW 257
42910: PUSH
42911: LD_INT 15
42913: EQUAL
42914: IFFALSE 42935
// points := [ 10 , 5 , 3 ] ;
42916: LD_ADDR_VAR 0 9
42920: PUSH
42921: LD_INT 10
42923: PUSH
42924: LD_INT 5
42926: PUSH
42927: LD_INT 3
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: LIST
42934: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42935: LD_VAR 0 6
42939: PPUSH
42940: CALL_OW 257
42944: PUSH
42945: LD_INT 14
42947: EQUAL
42948: IFFALSE 42969
// points := [ 10 , 0 , 0 ] ;
42950: LD_ADDR_VAR 0 9
42954: PUSH
42955: LD_INT 10
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: LIST
42968: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42969: LD_VAR 0 6
42973: PPUSH
42974: CALL_OW 257
42978: PUSH
42979: LD_INT 11
42981: EQUAL
42982: IFFALSE 43003
// points := [ 30 , 10 , 5 ] ;
42984: LD_ADDR_VAR 0 9
42988: PUSH
42989: LD_INT 30
42991: PUSH
42992: LD_INT 10
42994: PUSH
42995: LD_INT 5
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43003: LD_VAR 0 1
43007: PPUSH
43008: LD_INT 5
43010: PPUSH
43011: CALL_OW 321
43015: PUSH
43016: LD_INT 2
43018: EQUAL
43019: IFFALSE 43036
// bpoints := bpoints * 1.8 ;
43021: LD_ADDR_VAR 0 10
43025: PUSH
43026: LD_VAR 0 10
43030: PUSH
43031: LD_REAL  1.80000000000000E+0000
43034: MUL
43035: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43036: LD_VAR 0 6
43040: PPUSH
43041: CALL_OW 257
43045: PUSH
43046: LD_INT 1
43048: PUSH
43049: LD_INT 2
43051: PUSH
43052: LD_INT 3
43054: PUSH
43055: LD_INT 4
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: IN
43064: PUSH
43065: LD_VAR 0 1
43069: PPUSH
43070: LD_INT 51
43072: PPUSH
43073: CALL_OW 321
43077: PUSH
43078: LD_INT 2
43080: EQUAL
43081: AND
43082: IFFALSE 43099
// bpoints := bpoints * 1.2 ;
43084: LD_ADDR_VAR 0 10
43088: PUSH
43089: LD_VAR 0 10
43093: PUSH
43094: LD_REAL  1.20000000000000E+0000
43097: MUL
43098: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43099: LD_VAR 0 6
43103: PPUSH
43104: CALL_OW 257
43108: PUSH
43109: LD_INT 5
43111: PUSH
43112: LD_INT 7
43114: PUSH
43115: LD_INT 9
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: LIST
43122: IN
43123: PUSH
43124: LD_VAR 0 1
43128: PPUSH
43129: LD_INT 52
43131: PPUSH
43132: CALL_OW 321
43136: PUSH
43137: LD_INT 2
43139: EQUAL
43140: AND
43141: IFFALSE 43158
// bpoints := bpoints * 1.5 ;
43143: LD_ADDR_VAR 0 10
43147: PUSH
43148: LD_VAR 0 10
43152: PUSH
43153: LD_REAL  1.50000000000000E+0000
43156: MUL
43157: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43158: LD_VAR 0 1
43162: PPUSH
43163: LD_INT 66
43165: PPUSH
43166: CALL_OW 321
43170: PUSH
43171: LD_INT 2
43173: EQUAL
43174: IFFALSE 43191
// bpoints := bpoints * 1.1 ;
43176: LD_ADDR_VAR 0 10
43180: PUSH
43181: LD_VAR 0 10
43185: PUSH
43186: LD_REAL  1.10000000000000E+0000
43189: MUL
43190: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43191: LD_ADDR_VAR 0 10
43195: PUSH
43196: LD_VAR 0 10
43200: PUSH
43201: LD_VAR 0 6
43205: PPUSH
43206: LD_INT 1
43208: PPUSH
43209: CALL_OW 259
43213: PUSH
43214: LD_REAL  1.15000000000000E+0000
43217: MUL
43218: MUL
43219: ST_TO_ADDR
// end ; unit_vehicle :
43220: GO 44050
43222: LD_INT 2
43224: DOUBLE
43225: EQUAL
43226: IFTRUE 43230
43228: GO 44038
43230: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43231: LD_VAR 0 6
43235: PPUSH
43236: CALL_OW 264
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: LD_INT 42
43246: PUSH
43247: LD_INT 24
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: LIST
43254: IN
43255: IFFALSE 43276
// points := [ 25 , 5 , 3 ] ;
43257: LD_ADDR_VAR 0 9
43261: PUSH
43262: LD_INT 25
43264: PUSH
43265: LD_INT 5
43267: PUSH
43268: LD_INT 3
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: LIST
43275: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43276: LD_VAR 0 6
43280: PPUSH
43281: CALL_OW 264
43285: PUSH
43286: LD_INT 4
43288: PUSH
43289: LD_INT 43
43291: PUSH
43292: LD_INT 25
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: LIST
43299: IN
43300: IFFALSE 43321
// points := [ 40 , 15 , 5 ] ;
43302: LD_ADDR_VAR 0 9
43306: PUSH
43307: LD_INT 40
43309: PUSH
43310: LD_INT 15
43312: PUSH
43313: LD_INT 5
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: LIST
43320: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43321: LD_VAR 0 6
43325: PPUSH
43326: CALL_OW 264
43330: PUSH
43331: LD_INT 3
43333: PUSH
43334: LD_INT 23
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: IN
43341: IFFALSE 43362
// points := [ 7 , 25 , 8 ] ;
43343: LD_ADDR_VAR 0 9
43347: PUSH
43348: LD_INT 7
43350: PUSH
43351: LD_INT 25
43353: PUSH
43354: LD_INT 8
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: LIST
43361: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43362: LD_VAR 0 6
43366: PPUSH
43367: CALL_OW 264
43371: PUSH
43372: LD_INT 5
43374: PUSH
43375: LD_INT 27
43377: PUSH
43378: LD_INT 44
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: LIST
43385: IN
43386: IFFALSE 43407
// points := [ 14 , 50 , 16 ] ;
43388: LD_ADDR_VAR 0 9
43392: PUSH
43393: LD_INT 14
43395: PUSH
43396: LD_INT 50
43398: PUSH
43399: LD_INT 16
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: LIST
43406: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43407: LD_VAR 0 6
43411: PPUSH
43412: CALL_OW 264
43416: PUSH
43417: LD_INT 6
43419: PUSH
43420: LD_INT 46
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: IN
43427: IFFALSE 43448
// points := [ 32 , 120 , 70 ] ;
43429: LD_ADDR_VAR 0 9
43433: PUSH
43434: LD_INT 32
43436: PUSH
43437: LD_INT 120
43439: PUSH
43440: LD_INT 70
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: LIST
43447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43448: LD_VAR 0 6
43452: PPUSH
43453: CALL_OW 264
43457: PUSH
43458: LD_INT 7
43460: PUSH
43461: LD_INT 28
43463: PUSH
43464: LD_INT 45
43466: PUSH
43467: LD_EXP 67
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: IN
43478: IFFALSE 43499
// points := [ 35 , 20 , 45 ] ;
43480: LD_ADDR_VAR 0 9
43484: PUSH
43485: LD_INT 35
43487: PUSH
43488: LD_INT 20
43490: PUSH
43491: LD_INT 45
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: LIST
43498: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43499: LD_VAR 0 6
43503: PPUSH
43504: CALL_OW 264
43508: PUSH
43509: LD_INT 47
43511: PUSH
43512: EMPTY
43513: LIST
43514: IN
43515: IFFALSE 43536
// points := [ 67 , 45 , 75 ] ;
43517: LD_ADDR_VAR 0 9
43521: PUSH
43522: LD_INT 67
43524: PUSH
43525: LD_INT 45
43527: PUSH
43528: LD_INT 75
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: LIST
43535: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43536: LD_VAR 0 6
43540: PPUSH
43541: CALL_OW 264
43545: PUSH
43546: LD_INT 26
43548: PUSH
43549: EMPTY
43550: LIST
43551: IN
43552: IFFALSE 43573
// points := [ 120 , 30 , 80 ] ;
43554: LD_ADDR_VAR 0 9
43558: PUSH
43559: LD_INT 120
43561: PUSH
43562: LD_INT 30
43564: PUSH
43565: LD_INT 80
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: LIST
43572: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43573: LD_VAR 0 6
43577: PPUSH
43578: CALL_OW 264
43582: PUSH
43583: LD_INT 22
43585: PUSH
43586: EMPTY
43587: LIST
43588: IN
43589: IFFALSE 43610
// points := [ 40 , 1 , 1 ] ;
43591: LD_ADDR_VAR 0 9
43595: PUSH
43596: LD_INT 40
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: LIST
43609: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43610: LD_VAR 0 6
43614: PPUSH
43615: CALL_OW 264
43619: PUSH
43620: LD_INT 29
43622: PUSH
43623: EMPTY
43624: LIST
43625: IN
43626: IFFALSE 43647
// points := [ 70 , 200 , 400 ] ;
43628: LD_ADDR_VAR 0 9
43632: PUSH
43633: LD_INT 70
43635: PUSH
43636: LD_INT 200
43638: PUSH
43639: LD_INT 400
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: LIST
43646: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43647: LD_VAR 0 6
43651: PPUSH
43652: CALL_OW 264
43656: PUSH
43657: LD_INT 14
43659: PUSH
43660: LD_INT 53
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: IN
43667: IFFALSE 43688
// points := [ 40 , 10 , 20 ] ;
43669: LD_ADDR_VAR 0 9
43673: PUSH
43674: LD_INT 40
43676: PUSH
43677: LD_INT 10
43679: PUSH
43680: LD_INT 20
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: LIST
43687: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43688: LD_VAR 0 6
43692: PPUSH
43693: CALL_OW 264
43697: PUSH
43698: LD_INT 9
43700: PUSH
43701: EMPTY
43702: LIST
43703: IN
43704: IFFALSE 43725
// points := [ 5 , 70 , 20 ] ;
43706: LD_ADDR_VAR 0 9
43710: PUSH
43711: LD_INT 5
43713: PUSH
43714: LD_INT 70
43716: PUSH
43717: LD_INT 20
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: LIST
43724: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43725: LD_VAR 0 6
43729: PPUSH
43730: CALL_OW 264
43734: PUSH
43735: LD_INT 10
43737: PUSH
43738: EMPTY
43739: LIST
43740: IN
43741: IFFALSE 43762
// points := [ 35 , 110 , 70 ] ;
43743: LD_ADDR_VAR 0 9
43747: PUSH
43748: LD_INT 35
43750: PUSH
43751: LD_INT 110
43753: PUSH
43754: LD_INT 70
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: LIST
43761: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43762: LD_VAR 0 6
43766: PPUSH
43767: CALL_OW 265
43771: PUSH
43772: LD_INT 25
43774: EQUAL
43775: IFFALSE 43796
// points := [ 80 , 65 , 100 ] ;
43777: LD_ADDR_VAR 0 9
43781: PUSH
43782: LD_INT 80
43784: PUSH
43785: LD_INT 65
43787: PUSH
43788: LD_INT 100
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: LIST
43795: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43796: LD_VAR 0 6
43800: PPUSH
43801: CALL_OW 263
43805: PUSH
43806: LD_INT 1
43808: EQUAL
43809: IFFALSE 43844
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43811: LD_ADDR_VAR 0 10
43815: PUSH
43816: LD_VAR 0 10
43820: PUSH
43821: LD_VAR 0 6
43825: PPUSH
43826: CALL_OW 311
43830: PPUSH
43831: LD_INT 3
43833: PPUSH
43834: CALL_OW 259
43838: PUSH
43839: LD_INT 4
43841: MUL
43842: MUL
43843: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43844: LD_VAR 0 6
43848: PPUSH
43849: CALL_OW 263
43853: PUSH
43854: LD_INT 2
43856: EQUAL
43857: IFFALSE 43908
// begin j := IsControledBy ( i ) ;
43859: LD_ADDR_VAR 0 7
43863: PUSH
43864: LD_VAR 0 6
43868: PPUSH
43869: CALL_OW 312
43873: ST_TO_ADDR
// if j then
43874: LD_VAR 0 7
43878: IFFALSE 43908
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43880: LD_ADDR_VAR 0 10
43884: PUSH
43885: LD_VAR 0 10
43889: PUSH
43890: LD_VAR 0 7
43894: PPUSH
43895: LD_INT 3
43897: PPUSH
43898: CALL_OW 259
43902: PUSH
43903: LD_INT 3
43905: MUL
43906: MUL
43907: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43908: LD_VAR 0 6
43912: PPUSH
43913: CALL_OW 264
43917: PUSH
43918: LD_INT 5
43920: PUSH
43921: LD_INT 6
43923: PUSH
43924: LD_INT 46
43926: PUSH
43927: LD_INT 44
43929: PUSH
43930: LD_INT 47
43932: PUSH
43933: LD_INT 45
43935: PUSH
43936: LD_INT 28
43938: PUSH
43939: LD_INT 7
43941: PUSH
43942: LD_INT 27
43944: PUSH
43945: LD_INT 29
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: IN
43960: PUSH
43961: LD_VAR 0 1
43965: PPUSH
43966: LD_INT 52
43968: PPUSH
43969: CALL_OW 321
43973: PUSH
43974: LD_INT 2
43976: EQUAL
43977: AND
43978: IFFALSE 43995
// bpoints := bpoints * 1.2 ;
43980: LD_ADDR_VAR 0 10
43984: PUSH
43985: LD_VAR 0 10
43989: PUSH
43990: LD_REAL  1.20000000000000E+0000
43993: MUL
43994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43995: LD_VAR 0 6
43999: PPUSH
44000: CALL_OW 264
44004: PUSH
44005: LD_INT 6
44007: PUSH
44008: LD_INT 46
44010: PUSH
44011: LD_INT 47
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: LIST
44018: IN
44019: IFFALSE 44036
// bpoints := bpoints * 1.2 ;
44021: LD_ADDR_VAR 0 10
44025: PUSH
44026: LD_VAR 0 10
44030: PUSH
44031: LD_REAL  1.20000000000000E+0000
44034: MUL
44035: ST_TO_ADDR
// end ; unit_building :
44036: GO 44050
44038: LD_INT 3
44040: DOUBLE
44041: EQUAL
44042: IFTRUE 44046
44044: GO 44049
44046: POP
// ; end ;
44047: GO 44050
44049: POP
// for j = 1 to 3 do
44050: LD_ADDR_VAR 0 7
44054: PUSH
44055: DOUBLE
44056: LD_INT 1
44058: DEC
44059: ST_TO_ADDR
44060: LD_INT 3
44062: PUSH
44063: FOR_TO
44064: IFFALSE 44117
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44066: LD_ADDR_VAR 0 5
44070: PUSH
44071: LD_VAR 0 5
44075: PPUSH
44076: LD_VAR 0 7
44080: PPUSH
44081: LD_VAR 0 5
44085: PUSH
44086: LD_VAR 0 7
44090: ARRAY
44091: PUSH
44092: LD_VAR 0 9
44096: PUSH
44097: LD_VAR 0 7
44101: ARRAY
44102: PUSH
44103: LD_VAR 0 10
44107: MUL
44108: PLUS
44109: PPUSH
44110: CALL_OW 1
44114: ST_TO_ADDR
44115: GO 44063
44117: POP
44118: POP
// end ;
44119: GO 42596
44121: POP
44122: POP
// result := Replace ( result , 4 , tmp ) ;
44123: LD_ADDR_VAR 0 5
44127: PUSH
44128: LD_VAR 0 5
44132: PPUSH
44133: LD_INT 4
44135: PPUSH
44136: LD_VAR 0 8
44140: PPUSH
44141: CALL_OW 1
44145: ST_TO_ADDR
// end ;
44146: LD_VAR 0 5
44150: RET
// export function DangerAtRange ( unit , range ) ; begin
44151: LD_INT 0
44153: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44154: LD_ADDR_VAR 0 3
44158: PUSH
44159: LD_VAR 0 1
44163: PPUSH
44164: CALL_OW 255
44168: PPUSH
44169: LD_VAR 0 1
44173: PPUSH
44174: CALL_OW 250
44178: PPUSH
44179: LD_VAR 0 1
44183: PPUSH
44184: CALL_OW 251
44188: PPUSH
44189: LD_VAR 0 2
44193: PPUSH
44194: CALL 42448 0 4
44198: ST_TO_ADDR
// end ;
44199: LD_VAR 0 3
44203: RET
// export function DangerInArea ( side , area ) ; begin
44204: LD_INT 0
44206: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44207: LD_ADDR_VAR 0 3
44211: PUSH
44212: LD_VAR 0 2
44216: PPUSH
44217: LD_INT 81
44219: PUSH
44220: LD_VAR 0 1
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PPUSH
44229: CALL_OW 70
44233: ST_TO_ADDR
// end ;
44234: LD_VAR 0 3
44238: RET
// export function IsExtension ( b ) ; begin
44239: LD_INT 0
44241: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44242: LD_ADDR_VAR 0 2
44246: PUSH
44247: LD_VAR 0 1
44251: PUSH
44252: LD_INT 23
44254: PUSH
44255: LD_INT 20
44257: PUSH
44258: LD_INT 22
44260: PUSH
44261: LD_INT 17
44263: PUSH
44264: LD_INT 24
44266: PUSH
44267: LD_INT 21
44269: PUSH
44270: LD_INT 19
44272: PUSH
44273: LD_INT 16
44275: PUSH
44276: LD_INT 25
44278: PUSH
44279: LD_INT 18
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: IN
44294: ST_TO_ADDR
// end ;
44295: LD_VAR 0 2
44299: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44300: LD_INT 0
44302: PPUSH
44303: PPUSH
44304: PPUSH
// result := [ ] ;
44305: LD_ADDR_VAR 0 4
44309: PUSH
44310: EMPTY
44311: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44312: LD_ADDR_VAR 0 5
44316: PUSH
44317: LD_VAR 0 2
44321: PPUSH
44322: LD_INT 21
44324: PUSH
44325: LD_INT 3
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PPUSH
44332: CALL_OW 70
44336: ST_TO_ADDR
// if not tmp then
44337: LD_VAR 0 5
44341: NOT
44342: IFFALSE 44346
// exit ;
44344: GO 44410
// if checkLink then
44346: LD_VAR 0 3
44350: IFFALSE 44400
// begin for i in tmp do
44352: LD_ADDR_VAR 0 6
44356: PUSH
44357: LD_VAR 0 5
44361: PUSH
44362: FOR_IN
44363: IFFALSE 44398
// if GetBase ( i ) <> base then
44365: LD_VAR 0 6
44369: PPUSH
44370: CALL_OW 274
44374: PUSH
44375: LD_VAR 0 1
44379: NONEQUAL
44380: IFFALSE 44396
// ComLinkToBase ( base , i ) ;
44382: LD_VAR 0 1
44386: PPUSH
44387: LD_VAR 0 6
44391: PPUSH
44392: CALL_OW 169
44396: GO 44362
44398: POP
44399: POP
// end ; result := tmp ;
44400: LD_ADDR_VAR 0 4
44404: PUSH
44405: LD_VAR 0 5
44409: ST_TO_ADDR
// end ;
44410: LD_VAR 0 4
44414: RET
// export function ComComplete ( units , b ) ; var i ; begin
44415: LD_INT 0
44417: PPUSH
44418: PPUSH
// if not units then
44419: LD_VAR 0 1
44423: NOT
44424: IFFALSE 44428
// exit ;
44426: GO 44518
// for i in units do
44428: LD_ADDR_VAR 0 4
44432: PUSH
44433: LD_VAR 0 1
44437: PUSH
44438: FOR_IN
44439: IFFALSE 44516
// if BuildingStatus ( b ) = bs_build then
44441: LD_VAR 0 2
44445: PPUSH
44446: CALL_OW 461
44450: PUSH
44451: LD_INT 1
44453: EQUAL
44454: IFFALSE 44514
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44456: LD_VAR 0 4
44460: PPUSH
44461: LD_STRING h
44463: PUSH
44464: LD_VAR 0 2
44468: PPUSH
44469: CALL_OW 250
44473: PUSH
44474: LD_VAR 0 2
44478: PPUSH
44479: CALL_OW 251
44483: PUSH
44484: LD_VAR 0 2
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: PUSH
44507: EMPTY
44508: LIST
44509: PPUSH
44510: CALL_OW 446
44514: GO 44438
44516: POP
44517: POP
// end ;
44518: LD_VAR 0 3
44522: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44523: LD_INT 0
44525: PPUSH
44526: PPUSH
44527: PPUSH
44528: PPUSH
44529: PPUSH
44530: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44531: LD_VAR 0 1
44535: NOT
44536: PUSH
44537: LD_VAR 0 1
44541: PPUSH
44542: CALL_OW 263
44546: PUSH
44547: LD_INT 2
44549: NONEQUAL
44550: OR
44551: IFFALSE 44555
// exit ;
44553: GO 44871
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44555: LD_ADDR_VAR 0 6
44559: PUSH
44560: LD_INT 22
44562: PUSH
44563: LD_VAR 0 1
44567: PPUSH
44568: CALL_OW 255
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: LD_INT 30
44582: PUSH
44583: LD_INT 36
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 34
44592: PUSH
44593: LD_INT 31
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: LIST
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PPUSH
44609: CALL_OW 69
44613: ST_TO_ADDR
// if not tmp then
44614: LD_VAR 0 6
44618: NOT
44619: IFFALSE 44623
// exit ;
44621: GO 44871
// result := [ ] ;
44623: LD_ADDR_VAR 0 2
44627: PUSH
44628: EMPTY
44629: ST_TO_ADDR
// for i in tmp do
44630: LD_ADDR_VAR 0 3
44634: PUSH
44635: LD_VAR 0 6
44639: PUSH
44640: FOR_IN
44641: IFFALSE 44712
// begin t := UnitsInside ( i ) ;
44643: LD_ADDR_VAR 0 4
44647: PUSH
44648: LD_VAR 0 3
44652: PPUSH
44653: CALL_OW 313
44657: ST_TO_ADDR
// if t then
44658: LD_VAR 0 4
44662: IFFALSE 44710
// for j in t do
44664: LD_ADDR_VAR 0 7
44668: PUSH
44669: LD_VAR 0 4
44673: PUSH
44674: FOR_IN
44675: IFFALSE 44708
// result := Replace ( result , result + 1 , j ) ;
44677: LD_ADDR_VAR 0 2
44681: PUSH
44682: LD_VAR 0 2
44686: PPUSH
44687: LD_VAR 0 2
44691: PUSH
44692: LD_INT 1
44694: PLUS
44695: PPUSH
44696: LD_VAR 0 7
44700: PPUSH
44701: CALL_OW 1
44705: ST_TO_ADDR
44706: GO 44674
44708: POP
44709: POP
// end ;
44710: GO 44640
44712: POP
44713: POP
// if not result then
44714: LD_VAR 0 2
44718: NOT
44719: IFFALSE 44723
// exit ;
44721: GO 44871
// mech := result [ 1 ] ;
44723: LD_ADDR_VAR 0 5
44727: PUSH
44728: LD_VAR 0 2
44732: PUSH
44733: LD_INT 1
44735: ARRAY
44736: ST_TO_ADDR
// if result > 1 then
44737: LD_VAR 0 2
44741: PUSH
44742: LD_INT 1
44744: GREATER
44745: IFFALSE 44857
// begin for i = 2 to result do
44747: LD_ADDR_VAR 0 3
44751: PUSH
44752: DOUBLE
44753: LD_INT 2
44755: DEC
44756: ST_TO_ADDR
44757: LD_VAR 0 2
44761: PUSH
44762: FOR_TO
44763: IFFALSE 44855
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44765: LD_ADDR_VAR 0 4
44769: PUSH
44770: LD_VAR 0 2
44774: PUSH
44775: LD_VAR 0 3
44779: ARRAY
44780: PPUSH
44781: LD_INT 3
44783: PPUSH
44784: CALL_OW 259
44788: PUSH
44789: LD_VAR 0 2
44793: PUSH
44794: LD_VAR 0 3
44798: ARRAY
44799: PPUSH
44800: CALL_OW 432
44804: MINUS
44805: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44806: LD_VAR 0 4
44810: PUSH
44811: LD_VAR 0 5
44815: PPUSH
44816: LD_INT 3
44818: PPUSH
44819: CALL_OW 259
44823: PUSH
44824: LD_VAR 0 5
44828: PPUSH
44829: CALL_OW 432
44833: MINUS
44834: GREATEREQUAL
44835: IFFALSE 44853
// mech := result [ i ] ;
44837: LD_ADDR_VAR 0 5
44841: PUSH
44842: LD_VAR 0 2
44846: PUSH
44847: LD_VAR 0 3
44851: ARRAY
44852: ST_TO_ADDR
// end ;
44853: GO 44762
44855: POP
44856: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44857: LD_VAR 0 1
44861: PPUSH
44862: LD_VAR 0 5
44866: PPUSH
44867: CALL_OW 135
// end ;
44871: LD_VAR 0 2
44875: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44876: LD_INT 0
44878: PPUSH
44879: PPUSH
44880: PPUSH
44881: PPUSH
44882: PPUSH
44883: PPUSH
44884: PPUSH
44885: PPUSH
44886: PPUSH
44887: PPUSH
44888: PPUSH
44889: PPUSH
44890: PPUSH
// result := [ ] ;
44891: LD_ADDR_VAR 0 7
44895: PUSH
44896: EMPTY
44897: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44898: LD_VAR 0 1
44902: PPUSH
44903: CALL_OW 266
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: IN
44918: NOT
44919: IFFALSE 44923
// exit ;
44921: GO 46557
// if name then
44923: LD_VAR 0 3
44927: IFFALSE 44943
// SetBName ( base_dep , name ) ;
44929: LD_VAR 0 1
44933: PPUSH
44934: LD_VAR 0 3
44938: PPUSH
44939: CALL_OW 500
// base := GetBase ( base_dep ) ;
44943: LD_ADDR_VAR 0 15
44947: PUSH
44948: LD_VAR 0 1
44952: PPUSH
44953: CALL_OW 274
44957: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44958: LD_ADDR_VAR 0 16
44962: PUSH
44963: LD_VAR 0 1
44967: PPUSH
44968: CALL_OW 255
44972: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44973: LD_ADDR_VAR 0 17
44977: PUSH
44978: LD_VAR 0 1
44982: PPUSH
44983: CALL_OW 248
44987: ST_TO_ADDR
// if sources then
44988: LD_VAR 0 5
44992: IFFALSE 45039
// for i = 1 to 3 do
44994: LD_ADDR_VAR 0 8
44998: PUSH
44999: DOUBLE
45000: LD_INT 1
45002: DEC
45003: ST_TO_ADDR
45004: LD_INT 3
45006: PUSH
45007: FOR_TO
45008: IFFALSE 45037
// AddResourceType ( base , i , sources [ i ] ) ;
45010: LD_VAR 0 15
45014: PPUSH
45015: LD_VAR 0 8
45019: PPUSH
45020: LD_VAR 0 5
45024: PUSH
45025: LD_VAR 0 8
45029: ARRAY
45030: PPUSH
45031: CALL_OW 276
45035: GO 45007
45037: POP
45038: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45039: LD_ADDR_VAR 0 18
45043: PUSH
45044: LD_VAR 0 15
45048: PPUSH
45049: LD_VAR 0 2
45053: PPUSH
45054: LD_INT 1
45056: PPUSH
45057: CALL 44300 0 3
45061: ST_TO_ADDR
// InitHc ;
45062: CALL_OW 19
// InitUc ;
45066: CALL_OW 18
// uc_side := side ;
45070: LD_ADDR_OWVAR 20
45074: PUSH
45075: LD_VAR 0 16
45079: ST_TO_ADDR
// uc_nation := nation ;
45080: LD_ADDR_OWVAR 21
45084: PUSH
45085: LD_VAR 0 17
45089: ST_TO_ADDR
// if buildings then
45090: LD_VAR 0 18
45094: IFFALSE 46416
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45096: LD_ADDR_VAR 0 19
45100: PUSH
45101: LD_VAR 0 18
45105: PPUSH
45106: LD_INT 2
45108: PUSH
45109: LD_INT 30
45111: PUSH
45112: LD_INT 29
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 30
45121: PUSH
45122: LD_INT 30
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: LIST
45133: PPUSH
45134: CALL_OW 72
45138: ST_TO_ADDR
// if tmp then
45139: LD_VAR 0 19
45143: IFFALSE 45191
// for i in tmp do
45145: LD_ADDR_VAR 0 8
45149: PUSH
45150: LD_VAR 0 19
45154: PUSH
45155: FOR_IN
45156: IFFALSE 45189
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45158: LD_VAR 0 8
45162: PPUSH
45163: CALL_OW 250
45167: PPUSH
45168: LD_VAR 0 8
45172: PPUSH
45173: CALL_OW 251
45177: PPUSH
45178: LD_VAR 0 16
45182: PPUSH
45183: CALL_OW 441
45187: GO 45155
45189: POP
45190: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45191: LD_VAR 0 18
45195: PPUSH
45196: LD_INT 2
45198: PUSH
45199: LD_INT 30
45201: PUSH
45202: LD_INT 32
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 30
45211: PUSH
45212: LD_INT 33
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: LIST
45223: PPUSH
45224: CALL_OW 72
45228: IFFALSE 45316
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45230: LD_ADDR_VAR 0 8
45234: PUSH
45235: LD_VAR 0 18
45239: PPUSH
45240: LD_INT 2
45242: PUSH
45243: LD_INT 30
45245: PUSH
45246: LD_INT 32
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 30
45255: PUSH
45256: LD_INT 33
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: LIST
45267: PPUSH
45268: CALL_OW 72
45272: PUSH
45273: FOR_IN
45274: IFFALSE 45314
// begin if not GetBWeapon ( i ) then
45276: LD_VAR 0 8
45280: PPUSH
45281: CALL_OW 269
45285: NOT
45286: IFFALSE 45312
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45288: LD_VAR 0 8
45292: PPUSH
45293: LD_VAR 0 8
45297: PPUSH
45298: LD_VAR 0 2
45302: PPUSH
45303: CALL 46562 0 2
45307: PPUSH
45308: CALL_OW 431
// end ;
45312: GO 45273
45314: POP
45315: POP
// end ; for i = 1 to personel do
45316: LD_ADDR_VAR 0 8
45320: PUSH
45321: DOUBLE
45322: LD_INT 1
45324: DEC
45325: ST_TO_ADDR
45326: LD_VAR 0 6
45330: PUSH
45331: FOR_TO
45332: IFFALSE 46396
// begin if i > 4 then
45334: LD_VAR 0 8
45338: PUSH
45339: LD_INT 4
45341: GREATER
45342: IFFALSE 45346
// break ;
45344: GO 46396
// case i of 1 :
45346: LD_VAR 0 8
45350: PUSH
45351: LD_INT 1
45353: DOUBLE
45354: EQUAL
45355: IFTRUE 45359
45357: GO 45439
45359: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45360: LD_ADDR_VAR 0 12
45364: PUSH
45365: LD_VAR 0 18
45369: PPUSH
45370: LD_INT 22
45372: PUSH
45373: LD_VAR 0 16
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 58
45384: PUSH
45385: EMPTY
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: PUSH
45391: LD_INT 30
45393: PUSH
45394: LD_INT 32
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 30
45403: PUSH
45404: LD_INT 4
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 30
45413: PUSH
45414: LD_INT 5
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: LIST
45431: PPUSH
45432: CALL_OW 72
45436: ST_TO_ADDR
45437: GO 45661
45439: LD_INT 2
45441: DOUBLE
45442: EQUAL
45443: IFTRUE 45447
45445: GO 45509
45447: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45448: LD_ADDR_VAR 0 12
45452: PUSH
45453: LD_VAR 0 18
45457: PPUSH
45458: LD_INT 22
45460: PUSH
45461: LD_VAR 0 16
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 2
45472: PUSH
45473: LD_INT 30
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 30
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: LIST
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PPUSH
45502: CALL_OW 72
45506: ST_TO_ADDR
45507: GO 45661
45509: LD_INT 3
45511: DOUBLE
45512: EQUAL
45513: IFTRUE 45517
45515: GO 45579
45517: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45518: LD_ADDR_VAR 0 12
45522: PUSH
45523: LD_VAR 0 18
45527: PPUSH
45528: LD_INT 22
45530: PUSH
45531: LD_VAR 0 16
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 2
45542: PUSH
45543: LD_INT 30
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 30
45555: PUSH
45556: LD_INT 3
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: LIST
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PPUSH
45572: CALL_OW 72
45576: ST_TO_ADDR
45577: GO 45661
45579: LD_INT 4
45581: DOUBLE
45582: EQUAL
45583: IFTRUE 45587
45585: GO 45660
45587: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45588: LD_ADDR_VAR 0 12
45592: PUSH
45593: LD_VAR 0 18
45597: PPUSH
45598: LD_INT 22
45600: PUSH
45601: LD_VAR 0 16
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 2
45612: PUSH
45613: LD_INT 30
45615: PUSH
45616: LD_INT 6
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 30
45625: PUSH
45626: LD_INT 7
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 30
45635: PUSH
45636: LD_INT 8
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PPUSH
45653: CALL_OW 72
45657: ST_TO_ADDR
45658: GO 45661
45660: POP
// if i = 1 then
45661: LD_VAR 0 8
45665: PUSH
45666: LD_INT 1
45668: EQUAL
45669: IFFALSE 45780
// begin tmp := [ ] ;
45671: LD_ADDR_VAR 0 19
45675: PUSH
45676: EMPTY
45677: ST_TO_ADDR
// for j in f do
45678: LD_ADDR_VAR 0 9
45682: PUSH
45683: LD_VAR 0 12
45687: PUSH
45688: FOR_IN
45689: IFFALSE 45762
// if GetBType ( j ) = b_bunker then
45691: LD_VAR 0 9
45695: PPUSH
45696: CALL_OW 266
45700: PUSH
45701: LD_INT 32
45703: EQUAL
45704: IFFALSE 45731
// tmp := Insert ( tmp , 1 , j ) else
45706: LD_ADDR_VAR 0 19
45710: PUSH
45711: LD_VAR 0 19
45715: PPUSH
45716: LD_INT 1
45718: PPUSH
45719: LD_VAR 0 9
45723: PPUSH
45724: CALL_OW 2
45728: ST_TO_ADDR
45729: GO 45760
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45731: LD_ADDR_VAR 0 19
45735: PUSH
45736: LD_VAR 0 19
45740: PPUSH
45741: LD_VAR 0 19
45745: PUSH
45746: LD_INT 1
45748: PLUS
45749: PPUSH
45750: LD_VAR 0 9
45754: PPUSH
45755: CALL_OW 2
45759: ST_TO_ADDR
45760: GO 45688
45762: POP
45763: POP
// if tmp then
45764: LD_VAR 0 19
45768: IFFALSE 45780
// f := tmp ;
45770: LD_ADDR_VAR 0 12
45774: PUSH
45775: LD_VAR 0 19
45779: ST_TO_ADDR
// end ; x := personel [ i ] ;
45780: LD_ADDR_VAR 0 13
45784: PUSH
45785: LD_VAR 0 6
45789: PUSH
45790: LD_VAR 0 8
45794: ARRAY
45795: ST_TO_ADDR
// if x = - 1 then
45796: LD_VAR 0 13
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: EQUAL
45805: IFFALSE 46014
// begin for j in f do
45807: LD_ADDR_VAR 0 9
45811: PUSH
45812: LD_VAR 0 12
45816: PUSH
45817: FOR_IN
45818: IFFALSE 46010
// repeat InitHc ;
45820: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45824: LD_VAR 0 9
45828: PPUSH
45829: CALL_OW 266
45833: PUSH
45834: LD_INT 5
45836: EQUAL
45837: IFFALSE 45907
// begin if UnitsInside ( j ) < 3 then
45839: LD_VAR 0 9
45843: PPUSH
45844: CALL_OW 313
45848: PUSH
45849: LD_INT 3
45851: LESS
45852: IFFALSE 45888
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45854: LD_INT 0
45856: PPUSH
45857: LD_INT 5
45859: PUSH
45860: LD_INT 8
45862: PUSH
45863: LD_INT 9
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: LIST
45870: PUSH
45871: LD_VAR 0 17
45875: ARRAY
45876: PPUSH
45877: LD_VAR 0 4
45881: PPUSH
45882: CALL_OW 380
45886: GO 45905
// PrepareHuman ( false , i , skill ) ;
45888: LD_INT 0
45890: PPUSH
45891: LD_VAR 0 8
45895: PPUSH
45896: LD_VAR 0 4
45900: PPUSH
45901: CALL_OW 380
// end else
45905: GO 45924
// PrepareHuman ( false , i , skill ) ;
45907: LD_INT 0
45909: PPUSH
45910: LD_VAR 0 8
45914: PPUSH
45915: LD_VAR 0 4
45919: PPUSH
45920: CALL_OW 380
// un := CreateHuman ;
45924: LD_ADDR_VAR 0 14
45928: PUSH
45929: CALL_OW 44
45933: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45934: LD_ADDR_VAR 0 7
45938: PUSH
45939: LD_VAR 0 7
45943: PPUSH
45944: LD_INT 1
45946: PPUSH
45947: LD_VAR 0 14
45951: PPUSH
45952: CALL_OW 2
45956: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45957: LD_VAR 0 14
45961: PPUSH
45962: LD_VAR 0 9
45966: PPUSH
45967: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45971: LD_VAR 0 9
45975: PPUSH
45976: CALL_OW 313
45980: PUSH
45981: LD_INT 6
45983: EQUAL
45984: PUSH
45985: LD_VAR 0 9
45989: PPUSH
45990: CALL_OW 266
45994: PUSH
45995: LD_INT 32
45997: PUSH
45998: LD_INT 31
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: IN
46005: OR
46006: IFFALSE 45820
46008: GO 45817
46010: POP
46011: POP
// end else
46012: GO 46394
// for j = 1 to x do
46014: LD_ADDR_VAR 0 9
46018: PUSH
46019: DOUBLE
46020: LD_INT 1
46022: DEC
46023: ST_TO_ADDR
46024: LD_VAR 0 13
46028: PUSH
46029: FOR_TO
46030: IFFALSE 46392
// begin InitHc ;
46032: CALL_OW 19
// if not f then
46036: LD_VAR 0 12
46040: NOT
46041: IFFALSE 46130
// begin PrepareHuman ( false , i , skill ) ;
46043: LD_INT 0
46045: PPUSH
46046: LD_VAR 0 8
46050: PPUSH
46051: LD_VAR 0 4
46055: PPUSH
46056: CALL_OW 380
// un := CreateHuman ;
46060: LD_ADDR_VAR 0 14
46064: PUSH
46065: CALL_OW 44
46069: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46070: LD_ADDR_VAR 0 7
46074: PUSH
46075: LD_VAR 0 7
46079: PPUSH
46080: LD_INT 1
46082: PPUSH
46083: LD_VAR 0 14
46087: PPUSH
46088: CALL_OW 2
46092: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46093: LD_VAR 0 14
46097: PPUSH
46098: LD_VAR 0 1
46102: PPUSH
46103: CALL_OW 250
46107: PPUSH
46108: LD_VAR 0 1
46112: PPUSH
46113: CALL_OW 251
46117: PPUSH
46118: LD_INT 10
46120: PPUSH
46121: LD_INT 0
46123: PPUSH
46124: CALL_OW 50
// continue ;
46128: GO 46029
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46130: LD_VAR 0 12
46134: PUSH
46135: LD_INT 1
46137: ARRAY
46138: PPUSH
46139: CALL_OW 313
46143: PUSH
46144: LD_VAR 0 12
46148: PUSH
46149: LD_INT 1
46151: ARRAY
46152: PPUSH
46153: CALL_OW 266
46157: PUSH
46158: LD_INT 32
46160: PUSH
46161: LD_INT 31
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: IN
46168: AND
46169: PUSH
46170: LD_VAR 0 12
46174: PUSH
46175: LD_INT 1
46177: ARRAY
46178: PPUSH
46179: CALL_OW 313
46183: PUSH
46184: LD_INT 6
46186: EQUAL
46187: OR
46188: IFFALSE 46208
// f := Delete ( f , 1 ) ;
46190: LD_ADDR_VAR 0 12
46194: PUSH
46195: LD_VAR 0 12
46199: PPUSH
46200: LD_INT 1
46202: PPUSH
46203: CALL_OW 3
46207: ST_TO_ADDR
// if not f then
46208: LD_VAR 0 12
46212: NOT
46213: IFFALSE 46231
// begin x := x + 2 ;
46215: LD_ADDR_VAR 0 13
46219: PUSH
46220: LD_VAR 0 13
46224: PUSH
46225: LD_INT 2
46227: PLUS
46228: ST_TO_ADDR
// continue ;
46229: GO 46029
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46231: LD_VAR 0 12
46235: PUSH
46236: LD_INT 1
46238: ARRAY
46239: PPUSH
46240: CALL_OW 266
46244: PUSH
46245: LD_INT 5
46247: EQUAL
46248: IFFALSE 46322
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46250: LD_VAR 0 12
46254: PUSH
46255: LD_INT 1
46257: ARRAY
46258: PPUSH
46259: CALL_OW 313
46263: PUSH
46264: LD_INT 3
46266: LESS
46267: IFFALSE 46303
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46269: LD_INT 0
46271: PPUSH
46272: LD_INT 5
46274: PUSH
46275: LD_INT 8
46277: PUSH
46278: LD_INT 9
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: LIST
46285: PUSH
46286: LD_VAR 0 17
46290: ARRAY
46291: PPUSH
46292: LD_VAR 0 4
46296: PPUSH
46297: CALL_OW 380
46301: GO 46320
// PrepareHuman ( false , i , skill ) ;
46303: LD_INT 0
46305: PPUSH
46306: LD_VAR 0 8
46310: PPUSH
46311: LD_VAR 0 4
46315: PPUSH
46316: CALL_OW 380
// end else
46320: GO 46339
// PrepareHuman ( false , i , skill ) ;
46322: LD_INT 0
46324: PPUSH
46325: LD_VAR 0 8
46329: PPUSH
46330: LD_VAR 0 4
46334: PPUSH
46335: CALL_OW 380
// un := CreateHuman ;
46339: LD_ADDR_VAR 0 14
46343: PUSH
46344: CALL_OW 44
46348: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46349: LD_ADDR_VAR 0 7
46353: PUSH
46354: LD_VAR 0 7
46358: PPUSH
46359: LD_INT 1
46361: PPUSH
46362: LD_VAR 0 14
46366: PPUSH
46367: CALL_OW 2
46371: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46372: LD_VAR 0 14
46376: PPUSH
46377: LD_VAR 0 12
46381: PUSH
46382: LD_INT 1
46384: ARRAY
46385: PPUSH
46386: CALL_OW 52
// end ;
46390: GO 46029
46392: POP
46393: POP
// end ;
46394: GO 45331
46396: POP
46397: POP
// result := result ^ buildings ;
46398: LD_ADDR_VAR 0 7
46402: PUSH
46403: LD_VAR 0 7
46407: PUSH
46408: LD_VAR 0 18
46412: ADD
46413: ST_TO_ADDR
// end else
46414: GO 46557
// begin for i = 1 to personel do
46416: LD_ADDR_VAR 0 8
46420: PUSH
46421: DOUBLE
46422: LD_INT 1
46424: DEC
46425: ST_TO_ADDR
46426: LD_VAR 0 6
46430: PUSH
46431: FOR_TO
46432: IFFALSE 46555
// begin if i > 4 then
46434: LD_VAR 0 8
46438: PUSH
46439: LD_INT 4
46441: GREATER
46442: IFFALSE 46446
// break ;
46444: GO 46555
// x := personel [ i ] ;
46446: LD_ADDR_VAR 0 13
46450: PUSH
46451: LD_VAR 0 6
46455: PUSH
46456: LD_VAR 0 8
46460: ARRAY
46461: ST_TO_ADDR
// if x = - 1 then
46462: LD_VAR 0 13
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: EQUAL
46471: IFFALSE 46475
// continue ;
46473: GO 46431
// PrepareHuman ( false , i , skill ) ;
46475: LD_INT 0
46477: PPUSH
46478: LD_VAR 0 8
46482: PPUSH
46483: LD_VAR 0 4
46487: PPUSH
46488: CALL_OW 380
// un := CreateHuman ;
46492: LD_ADDR_VAR 0 14
46496: PUSH
46497: CALL_OW 44
46501: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46502: LD_VAR 0 14
46506: PPUSH
46507: LD_VAR 0 1
46511: PPUSH
46512: CALL_OW 250
46516: PPUSH
46517: LD_VAR 0 1
46521: PPUSH
46522: CALL_OW 251
46526: PPUSH
46527: LD_INT 10
46529: PPUSH
46530: LD_INT 0
46532: PPUSH
46533: CALL_OW 50
// result := result ^ un ;
46537: LD_ADDR_VAR 0 7
46541: PUSH
46542: LD_VAR 0 7
46546: PUSH
46547: LD_VAR 0 14
46551: ADD
46552: ST_TO_ADDR
// end ;
46553: GO 46431
46555: POP
46556: POP
// end ; end ;
46557: LD_VAR 0 7
46561: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46562: LD_INT 0
46564: PPUSH
46565: PPUSH
46566: PPUSH
46567: PPUSH
46568: PPUSH
46569: PPUSH
46570: PPUSH
46571: PPUSH
46572: PPUSH
46573: PPUSH
46574: PPUSH
46575: PPUSH
46576: PPUSH
46577: PPUSH
46578: PPUSH
46579: PPUSH
// result := false ;
46580: LD_ADDR_VAR 0 3
46584: PUSH
46585: LD_INT 0
46587: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46588: LD_VAR 0 1
46592: NOT
46593: PUSH
46594: LD_VAR 0 1
46598: PPUSH
46599: CALL_OW 266
46603: PUSH
46604: LD_INT 32
46606: PUSH
46607: LD_INT 33
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: IN
46614: NOT
46615: OR
46616: IFFALSE 46620
// exit ;
46618: GO 47729
// nat := GetNation ( tower ) ;
46620: LD_ADDR_VAR 0 12
46624: PUSH
46625: LD_VAR 0 1
46629: PPUSH
46630: CALL_OW 248
46634: ST_TO_ADDR
// side := GetSide ( tower ) ;
46635: LD_ADDR_VAR 0 16
46639: PUSH
46640: LD_VAR 0 1
46644: PPUSH
46645: CALL_OW 255
46649: ST_TO_ADDR
// x := GetX ( tower ) ;
46650: LD_ADDR_VAR 0 10
46654: PUSH
46655: LD_VAR 0 1
46659: PPUSH
46660: CALL_OW 250
46664: ST_TO_ADDR
// y := GetY ( tower ) ;
46665: LD_ADDR_VAR 0 11
46669: PUSH
46670: LD_VAR 0 1
46674: PPUSH
46675: CALL_OW 251
46679: ST_TO_ADDR
// if not x or not y then
46680: LD_VAR 0 10
46684: NOT
46685: PUSH
46686: LD_VAR 0 11
46690: NOT
46691: OR
46692: IFFALSE 46696
// exit ;
46694: GO 47729
// weapon := 0 ;
46696: LD_ADDR_VAR 0 18
46700: PUSH
46701: LD_INT 0
46703: ST_TO_ADDR
// fac_list := [ ] ;
46704: LD_ADDR_VAR 0 17
46708: PUSH
46709: EMPTY
46710: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46711: LD_ADDR_VAR 0 6
46715: PUSH
46716: LD_VAR 0 1
46720: PPUSH
46721: CALL_OW 274
46725: PPUSH
46726: LD_VAR 0 2
46730: PPUSH
46731: LD_INT 0
46733: PPUSH
46734: CALL 44300 0 3
46738: PPUSH
46739: LD_INT 30
46741: PUSH
46742: LD_INT 3
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PPUSH
46749: CALL_OW 72
46753: ST_TO_ADDR
// if not factories then
46754: LD_VAR 0 6
46758: NOT
46759: IFFALSE 46763
// exit ;
46761: GO 47729
// for i in factories do
46763: LD_ADDR_VAR 0 8
46767: PUSH
46768: LD_VAR 0 6
46772: PUSH
46773: FOR_IN
46774: IFFALSE 46799
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46776: LD_ADDR_VAR 0 17
46780: PUSH
46781: LD_VAR 0 17
46785: PUSH
46786: LD_VAR 0 8
46790: PPUSH
46791: CALL_OW 478
46795: UNION
46796: ST_TO_ADDR
46797: GO 46773
46799: POP
46800: POP
// if not fac_list then
46801: LD_VAR 0 17
46805: NOT
46806: IFFALSE 46810
// exit ;
46808: GO 47729
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46810: LD_ADDR_VAR 0 5
46814: PUSH
46815: LD_INT 4
46817: PUSH
46818: LD_INT 5
46820: PUSH
46821: LD_INT 9
46823: PUSH
46824: LD_INT 10
46826: PUSH
46827: LD_INT 6
46829: PUSH
46830: LD_INT 7
46832: PUSH
46833: LD_INT 11
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 27
46847: PUSH
46848: LD_INT 28
46850: PUSH
46851: LD_INT 26
46853: PUSH
46854: LD_INT 30
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 43
46865: PUSH
46866: LD_INT 44
46868: PUSH
46869: LD_INT 46
46871: PUSH
46872: LD_INT 45
46874: PUSH
46875: LD_INT 47
46877: PUSH
46878: LD_INT 49
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: LIST
46893: PUSH
46894: LD_VAR 0 12
46898: ARRAY
46899: ST_TO_ADDR
// list := list isect fac_list ;
46900: LD_ADDR_VAR 0 5
46904: PUSH
46905: LD_VAR 0 5
46909: PUSH
46910: LD_VAR 0 17
46914: ISECT
46915: ST_TO_ADDR
// if not list then
46916: LD_VAR 0 5
46920: NOT
46921: IFFALSE 46925
// exit ;
46923: GO 47729
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46925: LD_VAR 0 12
46929: PUSH
46930: LD_INT 3
46932: EQUAL
46933: PUSH
46934: LD_INT 49
46936: PUSH
46937: LD_VAR 0 5
46941: IN
46942: AND
46943: PUSH
46944: LD_INT 31
46946: PPUSH
46947: LD_VAR 0 16
46951: PPUSH
46952: CALL_OW 321
46956: PUSH
46957: LD_INT 2
46959: EQUAL
46960: AND
46961: IFFALSE 47021
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46963: LD_INT 22
46965: PUSH
46966: LD_VAR 0 16
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 35
46977: PUSH
46978: LD_INT 49
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 91
46987: PUSH
46988: LD_VAR 0 1
46992: PUSH
46993: LD_INT 10
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: LIST
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: LIST
47005: PPUSH
47006: CALL_OW 69
47010: NOT
47011: IFFALSE 47021
// weapon := ru_time_lapser ;
47013: LD_ADDR_VAR 0 18
47017: PUSH
47018: LD_INT 49
47020: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47021: LD_VAR 0 12
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: LD_INT 2
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: IN
47036: PUSH
47037: LD_INT 11
47039: PUSH
47040: LD_VAR 0 5
47044: IN
47045: PUSH
47046: LD_INT 30
47048: PUSH
47049: LD_VAR 0 5
47053: IN
47054: OR
47055: AND
47056: PUSH
47057: LD_INT 6
47059: PPUSH
47060: LD_VAR 0 16
47064: PPUSH
47065: CALL_OW 321
47069: PUSH
47070: LD_INT 2
47072: EQUAL
47073: AND
47074: IFFALSE 47239
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47076: LD_INT 22
47078: PUSH
47079: LD_VAR 0 16
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 2
47090: PUSH
47091: LD_INT 35
47093: PUSH
47094: LD_INT 11
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 35
47103: PUSH
47104: LD_INT 30
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 91
47118: PUSH
47119: LD_VAR 0 1
47123: PUSH
47124: LD_INT 18
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: LIST
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: LIST
47136: PPUSH
47137: CALL_OW 69
47141: NOT
47142: PUSH
47143: LD_INT 22
47145: PUSH
47146: LD_VAR 0 16
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: PUSH
47158: LD_INT 30
47160: PUSH
47161: LD_INT 32
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 30
47170: PUSH
47171: LD_INT 33
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 91
47185: PUSH
47186: LD_VAR 0 1
47190: PUSH
47191: LD_INT 12
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: LIST
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: LIST
47203: PUSH
47204: EMPTY
47205: LIST
47206: PPUSH
47207: CALL_OW 69
47211: PUSH
47212: LD_INT 2
47214: GREATER
47215: AND
47216: IFFALSE 47239
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47218: LD_ADDR_VAR 0 18
47222: PUSH
47223: LD_INT 11
47225: PUSH
47226: LD_INT 30
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_VAR 0 12
47237: ARRAY
47238: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47239: LD_VAR 0 18
47243: NOT
47244: PUSH
47245: LD_INT 40
47247: PPUSH
47248: LD_VAR 0 16
47252: PPUSH
47253: CALL_OW 321
47257: PUSH
47258: LD_INT 2
47260: EQUAL
47261: AND
47262: PUSH
47263: LD_INT 7
47265: PUSH
47266: LD_VAR 0 5
47270: IN
47271: PUSH
47272: LD_INT 28
47274: PUSH
47275: LD_VAR 0 5
47279: IN
47280: OR
47281: PUSH
47282: LD_INT 45
47284: PUSH
47285: LD_VAR 0 5
47289: IN
47290: OR
47291: AND
47292: IFFALSE 47546
// begin hex := GetHexInfo ( x , y ) ;
47294: LD_ADDR_VAR 0 4
47298: PUSH
47299: LD_VAR 0 10
47303: PPUSH
47304: LD_VAR 0 11
47308: PPUSH
47309: CALL_OW 546
47313: ST_TO_ADDR
// if hex [ 1 ] then
47314: LD_VAR 0 4
47318: PUSH
47319: LD_INT 1
47321: ARRAY
47322: IFFALSE 47326
// exit ;
47324: GO 47729
// height := hex [ 2 ] ;
47326: LD_ADDR_VAR 0 15
47330: PUSH
47331: LD_VAR 0 4
47335: PUSH
47336: LD_INT 2
47338: ARRAY
47339: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47340: LD_ADDR_VAR 0 14
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: LD_INT 2
47350: PUSH
47351: LD_INT 3
47353: PUSH
47354: LD_INT 5
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: ST_TO_ADDR
// for i in tmp do
47363: LD_ADDR_VAR 0 8
47367: PUSH
47368: LD_VAR 0 14
47372: PUSH
47373: FOR_IN
47374: IFFALSE 47544
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47376: LD_ADDR_VAR 0 9
47380: PUSH
47381: LD_VAR 0 10
47385: PPUSH
47386: LD_VAR 0 8
47390: PPUSH
47391: LD_INT 5
47393: PPUSH
47394: CALL_OW 272
47398: PUSH
47399: LD_VAR 0 11
47403: PPUSH
47404: LD_VAR 0 8
47408: PPUSH
47409: LD_INT 5
47411: PPUSH
47412: CALL_OW 273
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47421: LD_VAR 0 9
47425: PUSH
47426: LD_INT 1
47428: ARRAY
47429: PPUSH
47430: LD_VAR 0 9
47434: PUSH
47435: LD_INT 2
47437: ARRAY
47438: PPUSH
47439: CALL_OW 488
47443: IFFALSE 47542
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47445: LD_ADDR_VAR 0 4
47449: PUSH
47450: LD_VAR 0 9
47454: PUSH
47455: LD_INT 1
47457: ARRAY
47458: PPUSH
47459: LD_VAR 0 9
47463: PUSH
47464: LD_INT 2
47466: ARRAY
47467: PPUSH
47468: CALL_OW 546
47472: ST_TO_ADDR
// if hex [ 1 ] then
47473: LD_VAR 0 4
47477: PUSH
47478: LD_INT 1
47480: ARRAY
47481: IFFALSE 47485
// continue ;
47483: GO 47373
// h := hex [ 2 ] ;
47485: LD_ADDR_VAR 0 13
47489: PUSH
47490: LD_VAR 0 4
47494: PUSH
47495: LD_INT 2
47497: ARRAY
47498: ST_TO_ADDR
// if h + 7 < height then
47499: LD_VAR 0 13
47503: PUSH
47504: LD_INT 7
47506: PLUS
47507: PUSH
47508: LD_VAR 0 15
47512: LESS
47513: IFFALSE 47542
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47515: LD_ADDR_VAR 0 18
47519: PUSH
47520: LD_INT 7
47522: PUSH
47523: LD_INT 28
47525: PUSH
47526: LD_INT 45
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: LIST
47533: PUSH
47534: LD_VAR 0 12
47538: ARRAY
47539: ST_TO_ADDR
// break ;
47540: GO 47544
// end ; end ; end ;
47542: GO 47373
47544: POP
47545: POP
// end ; if not weapon then
47546: LD_VAR 0 18
47550: NOT
47551: IFFALSE 47611
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47553: LD_ADDR_VAR 0 5
47557: PUSH
47558: LD_VAR 0 5
47562: PUSH
47563: LD_INT 11
47565: PUSH
47566: LD_INT 30
47568: PUSH
47569: LD_INT 49
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: LIST
47576: DIFF
47577: ST_TO_ADDR
// if not list then
47578: LD_VAR 0 5
47582: NOT
47583: IFFALSE 47587
// exit ;
47585: GO 47729
// weapon := list [ rand ( 1 , list ) ] ;
47587: LD_ADDR_VAR 0 18
47591: PUSH
47592: LD_VAR 0 5
47596: PUSH
47597: LD_INT 1
47599: PPUSH
47600: LD_VAR 0 5
47604: PPUSH
47605: CALL_OW 12
47609: ARRAY
47610: ST_TO_ADDR
// end ; if weapon then
47611: LD_VAR 0 18
47615: IFFALSE 47729
// begin tmp := CostOfWeapon ( weapon ) ;
47617: LD_ADDR_VAR 0 14
47621: PUSH
47622: LD_VAR 0 18
47626: PPUSH
47627: CALL_OW 451
47631: ST_TO_ADDR
// j := GetBase ( tower ) ;
47632: LD_ADDR_VAR 0 9
47636: PUSH
47637: LD_VAR 0 1
47641: PPUSH
47642: CALL_OW 274
47646: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47647: LD_VAR 0 9
47651: PPUSH
47652: LD_INT 1
47654: PPUSH
47655: CALL_OW 275
47659: PUSH
47660: LD_VAR 0 14
47664: PUSH
47665: LD_INT 1
47667: ARRAY
47668: GREATEREQUAL
47669: PUSH
47670: LD_VAR 0 9
47674: PPUSH
47675: LD_INT 2
47677: PPUSH
47678: CALL_OW 275
47682: PUSH
47683: LD_VAR 0 14
47687: PUSH
47688: LD_INT 2
47690: ARRAY
47691: GREATEREQUAL
47692: AND
47693: PUSH
47694: LD_VAR 0 9
47698: PPUSH
47699: LD_INT 3
47701: PPUSH
47702: CALL_OW 275
47706: PUSH
47707: LD_VAR 0 14
47711: PUSH
47712: LD_INT 3
47714: ARRAY
47715: GREATEREQUAL
47716: AND
47717: IFFALSE 47729
// result := weapon ;
47719: LD_ADDR_VAR 0 3
47723: PUSH
47724: LD_VAR 0 18
47728: ST_TO_ADDR
// end ; end ;
47729: LD_VAR 0 3
47733: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47734: LD_INT 0
47736: PPUSH
47737: PPUSH
// result := true ;
47738: LD_ADDR_VAR 0 3
47742: PUSH
47743: LD_INT 1
47745: ST_TO_ADDR
// if array1 = array2 then
47746: LD_VAR 0 1
47750: PUSH
47751: LD_VAR 0 2
47755: EQUAL
47756: IFFALSE 47816
// begin for i = 1 to array1 do
47758: LD_ADDR_VAR 0 4
47762: PUSH
47763: DOUBLE
47764: LD_INT 1
47766: DEC
47767: ST_TO_ADDR
47768: LD_VAR 0 1
47772: PUSH
47773: FOR_TO
47774: IFFALSE 47812
// if array1 [ i ] <> array2 [ i ] then
47776: LD_VAR 0 1
47780: PUSH
47781: LD_VAR 0 4
47785: ARRAY
47786: PUSH
47787: LD_VAR 0 2
47791: PUSH
47792: LD_VAR 0 4
47796: ARRAY
47797: NONEQUAL
47798: IFFALSE 47810
// begin result := false ;
47800: LD_ADDR_VAR 0 3
47804: PUSH
47805: LD_INT 0
47807: ST_TO_ADDR
// break ;
47808: GO 47812
// end ;
47810: GO 47773
47812: POP
47813: POP
// end else
47814: GO 47824
// result := false ;
47816: LD_ADDR_VAR 0 3
47820: PUSH
47821: LD_INT 0
47823: ST_TO_ADDR
// end ;
47824: LD_VAR 0 3
47828: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47829: LD_INT 0
47831: PPUSH
47832: PPUSH
// if not array1 or not array2 then
47833: LD_VAR 0 1
47837: NOT
47838: PUSH
47839: LD_VAR 0 2
47843: NOT
47844: OR
47845: IFFALSE 47849
// exit ;
47847: GO 47913
// result := true ;
47849: LD_ADDR_VAR 0 3
47853: PUSH
47854: LD_INT 1
47856: ST_TO_ADDR
// for i = 1 to array1 do
47857: LD_ADDR_VAR 0 4
47861: PUSH
47862: DOUBLE
47863: LD_INT 1
47865: DEC
47866: ST_TO_ADDR
47867: LD_VAR 0 1
47871: PUSH
47872: FOR_TO
47873: IFFALSE 47911
// if array1 [ i ] <> array2 [ i ] then
47875: LD_VAR 0 1
47879: PUSH
47880: LD_VAR 0 4
47884: ARRAY
47885: PUSH
47886: LD_VAR 0 2
47890: PUSH
47891: LD_VAR 0 4
47895: ARRAY
47896: NONEQUAL
47897: IFFALSE 47909
// begin result := false ;
47899: LD_ADDR_VAR 0 3
47903: PUSH
47904: LD_INT 0
47906: ST_TO_ADDR
// break ;
47907: GO 47911
// end ;
47909: GO 47872
47911: POP
47912: POP
// end ;
47913: LD_VAR 0 3
47917: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47918: LD_INT 0
47920: PPUSH
47921: PPUSH
47922: PPUSH
// pom := GetBase ( fac ) ;
47923: LD_ADDR_VAR 0 5
47927: PUSH
47928: LD_VAR 0 1
47932: PPUSH
47933: CALL_OW 274
47937: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47938: LD_ADDR_VAR 0 4
47942: PUSH
47943: LD_VAR 0 2
47947: PUSH
47948: LD_INT 1
47950: ARRAY
47951: PPUSH
47952: LD_VAR 0 2
47956: PUSH
47957: LD_INT 2
47959: ARRAY
47960: PPUSH
47961: LD_VAR 0 2
47965: PUSH
47966: LD_INT 3
47968: ARRAY
47969: PPUSH
47970: LD_VAR 0 2
47974: PUSH
47975: LD_INT 4
47977: ARRAY
47978: PPUSH
47979: CALL_OW 449
47983: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47984: LD_ADDR_VAR 0 3
47988: PUSH
47989: LD_VAR 0 5
47993: PPUSH
47994: LD_INT 1
47996: PPUSH
47997: CALL_OW 275
48001: PUSH
48002: LD_VAR 0 4
48006: PUSH
48007: LD_INT 1
48009: ARRAY
48010: GREATEREQUAL
48011: PUSH
48012: LD_VAR 0 5
48016: PPUSH
48017: LD_INT 2
48019: PPUSH
48020: CALL_OW 275
48024: PUSH
48025: LD_VAR 0 4
48029: PUSH
48030: LD_INT 2
48032: ARRAY
48033: GREATEREQUAL
48034: AND
48035: PUSH
48036: LD_VAR 0 5
48040: PPUSH
48041: LD_INT 3
48043: PPUSH
48044: CALL_OW 275
48048: PUSH
48049: LD_VAR 0 4
48053: PUSH
48054: LD_INT 3
48056: ARRAY
48057: GREATEREQUAL
48058: AND
48059: ST_TO_ADDR
// end ;
48060: LD_VAR 0 3
48064: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48065: LD_INT 0
48067: PPUSH
48068: PPUSH
48069: PPUSH
48070: PPUSH
// pom := GetBase ( building ) ;
48071: LD_ADDR_VAR 0 3
48075: PUSH
48076: LD_VAR 0 1
48080: PPUSH
48081: CALL_OW 274
48085: ST_TO_ADDR
// if not pom then
48086: LD_VAR 0 3
48090: NOT
48091: IFFALSE 48095
// exit ;
48093: GO 48265
// btype := GetBType ( building ) ;
48095: LD_ADDR_VAR 0 5
48099: PUSH
48100: LD_VAR 0 1
48104: PPUSH
48105: CALL_OW 266
48109: ST_TO_ADDR
// if btype = b_armoury then
48110: LD_VAR 0 5
48114: PUSH
48115: LD_INT 4
48117: EQUAL
48118: IFFALSE 48128
// btype := b_barracks ;
48120: LD_ADDR_VAR 0 5
48124: PUSH
48125: LD_INT 5
48127: ST_TO_ADDR
// if btype = b_depot then
48128: LD_VAR 0 5
48132: PUSH
48133: LD_INT 0
48135: EQUAL
48136: IFFALSE 48146
// btype := b_warehouse ;
48138: LD_ADDR_VAR 0 5
48142: PUSH
48143: LD_INT 1
48145: ST_TO_ADDR
// if btype = b_workshop then
48146: LD_VAR 0 5
48150: PUSH
48151: LD_INT 2
48153: EQUAL
48154: IFFALSE 48164
// btype := b_factory ;
48156: LD_ADDR_VAR 0 5
48160: PUSH
48161: LD_INT 3
48163: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48164: LD_ADDR_VAR 0 4
48168: PUSH
48169: LD_VAR 0 5
48173: PPUSH
48174: LD_VAR 0 1
48178: PPUSH
48179: CALL_OW 248
48183: PPUSH
48184: CALL_OW 450
48188: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48189: LD_ADDR_VAR 0 2
48193: PUSH
48194: LD_VAR 0 3
48198: PPUSH
48199: LD_INT 1
48201: PPUSH
48202: CALL_OW 275
48206: PUSH
48207: LD_VAR 0 4
48211: PUSH
48212: LD_INT 1
48214: ARRAY
48215: GREATEREQUAL
48216: PUSH
48217: LD_VAR 0 3
48221: PPUSH
48222: LD_INT 2
48224: PPUSH
48225: CALL_OW 275
48229: PUSH
48230: LD_VAR 0 4
48234: PUSH
48235: LD_INT 2
48237: ARRAY
48238: GREATEREQUAL
48239: AND
48240: PUSH
48241: LD_VAR 0 3
48245: PPUSH
48246: LD_INT 3
48248: PPUSH
48249: CALL_OW 275
48253: PUSH
48254: LD_VAR 0 4
48258: PUSH
48259: LD_INT 3
48261: ARRAY
48262: GREATEREQUAL
48263: AND
48264: ST_TO_ADDR
// end ;
48265: LD_VAR 0 2
48269: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48270: LD_INT 0
48272: PPUSH
48273: PPUSH
48274: PPUSH
// pom := GetBase ( building ) ;
48275: LD_ADDR_VAR 0 4
48279: PUSH
48280: LD_VAR 0 1
48284: PPUSH
48285: CALL_OW 274
48289: ST_TO_ADDR
// if not pom then
48290: LD_VAR 0 4
48294: NOT
48295: IFFALSE 48299
// exit ;
48297: GO 48400
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48299: LD_ADDR_VAR 0 5
48303: PUSH
48304: LD_VAR 0 2
48308: PPUSH
48309: LD_VAR 0 1
48313: PPUSH
48314: CALL_OW 248
48318: PPUSH
48319: CALL_OW 450
48323: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48324: LD_ADDR_VAR 0 3
48328: PUSH
48329: LD_VAR 0 4
48333: PPUSH
48334: LD_INT 1
48336: PPUSH
48337: CALL_OW 275
48341: PUSH
48342: LD_VAR 0 5
48346: PUSH
48347: LD_INT 1
48349: ARRAY
48350: GREATEREQUAL
48351: PUSH
48352: LD_VAR 0 4
48356: PPUSH
48357: LD_INT 2
48359: PPUSH
48360: CALL_OW 275
48364: PUSH
48365: LD_VAR 0 5
48369: PUSH
48370: LD_INT 2
48372: ARRAY
48373: GREATEREQUAL
48374: AND
48375: PUSH
48376: LD_VAR 0 4
48380: PPUSH
48381: LD_INT 3
48383: PPUSH
48384: CALL_OW 275
48388: PUSH
48389: LD_VAR 0 5
48393: PUSH
48394: LD_INT 3
48396: ARRAY
48397: GREATEREQUAL
48398: AND
48399: ST_TO_ADDR
// end ;
48400: LD_VAR 0 3
48404: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48405: LD_INT 0
48407: PPUSH
48408: PPUSH
48409: PPUSH
48410: PPUSH
48411: PPUSH
48412: PPUSH
48413: PPUSH
48414: PPUSH
48415: PPUSH
48416: PPUSH
48417: PPUSH
// result := false ;
48418: LD_ADDR_VAR 0 8
48422: PUSH
48423: LD_INT 0
48425: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48426: LD_VAR 0 5
48430: NOT
48431: PUSH
48432: LD_VAR 0 1
48436: NOT
48437: OR
48438: PUSH
48439: LD_VAR 0 2
48443: NOT
48444: OR
48445: PUSH
48446: LD_VAR 0 3
48450: NOT
48451: OR
48452: IFFALSE 48456
// exit ;
48454: GO 49270
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48456: LD_ADDR_VAR 0 14
48460: PUSH
48461: LD_VAR 0 1
48465: PPUSH
48466: LD_VAR 0 2
48470: PPUSH
48471: LD_VAR 0 3
48475: PPUSH
48476: LD_VAR 0 4
48480: PPUSH
48481: LD_VAR 0 5
48485: PUSH
48486: LD_INT 1
48488: ARRAY
48489: PPUSH
48490: CALL_OW 248
48494: PPUSH
48495: LD_INT 0
48497: PPUSH
48498: CALL 50507 0 6
48502: ST_TO_ADDR
// if not hexes then
48503: LD_VAR 0 14
48507: NOT
48508: IFFALSE 48512
// exit ;
48510: GO 49270
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48512: LD_ADDR_VAR 0 17
48516: PUSH
48517: LD_VAR 0 5
48521: PPUSH
48522: LD_INT 22
48524: PUSH
48525: LD_VAR 0 13
48529: PPUSH
48530: CALL_OW 255
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 2
48541: PUSH
48542: LD_INT 30
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 30
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: LIST
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PPUSH
48571: CALL_OW 72
48575: ST_TO_ADDR
// for i = 1 to hexes do
48576: LD_ADDR_VAR 0 9
48580: PUSH
48581: DOUBLE
48582: LD_INT 1
48584: DEC
48585: ST_TO_ADDR
48586: LD_VAR 0 14
48590: PUSH
48591: FOR_TO
48592: IFFALSE 49268
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48594: LD_ADDR_VAR 0 13
48598: PUSH
48599: LD_VAR 0 14
48603: PUSH
48604: LD_VAR 0 9
48608: ARRAY
48609: PUSH
48610: LD_INT 1
48612: ARRAY
48613: PPUSH
48614: LD_VAR 0 14
48618: PUSH
48619: LD_VAR 0 9
48623: ARRAY
48624: PUSH
48625: LD_INT 2
48627: ARRAY
48628: PPUSH
48629: CALL_OW 428
48633: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48634: LD_VAR 0 14
48638: PUSH
48639: LD_VAR 0 9
48643: ARRAY
48644: PUSH
48645: LD_INT 1
48647: ARRAY
48648: PPUSH
48649: LD_VAR 0 14
48653: PUSH
48654: LD_VAR 0 9
48658: ARRAY
48659: PUSH
48660: LD_INT 2
48662: ARRAY
48663: PPUSH
48664: CALL_OW 351
48668: PUSH
48669: LD_VAR 0 14
48673: PUSH
48674: LD_VAR 0 9
48678: ARRAY
48679: PUSH
48680: LD_INT 1
48682: ARRAY
48683: PPUSH
48684: LD_VAR 0 14
48688: PUSH
48689: LD_VAR 0 9
48693: ARRAY
48694: PUSH
48695: LD_INT 2
48697: ARRAY
48698: PPUSH
48699: CALL_OW 488
48703: NOT
48704: OR
48705: PUSH
48706: LD_VAR 0 13
48710: PPUSH
48711: CALL_OW 247
48715: PUSH
48716: LD_INT 3
48718: EQUAL
48719: OR
48720: IFFALSE 48726
// exit ;
48722: POP
48723: POP
48724: GO 49270
// if not tmp then
48726: LD_VAR 0 13
48730: NOT
48731: IFFALSE 48735
// continue ;
48733: GO 48591
// result := true ;
48735: LD_ADDR_VAR 0 8
48739: PUSH
48740: LD_INT 1
48742: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48743: LD_VAR 0 6
48747: PUSH
48748: LD_VAR 0 13
48752: PPUSH
48753: CALL_OW 247
48757: PUSH
48758: LD_INT 2
48760: EQUAL
48761: AND
48762: PUSH
48763: LD_VAR 0 13
48767: PPUSH
48768: CALL_OW 263
48772: PUSH
48773: LD_INT 1
48775: EQUAL
48776: AND
48777: IFFALSE 48941
// begin if IsDrivenBy ( tmp ) then
48779: LD_VAR 0 13
48783: PPUSH
48784: CALL_OW 311
48788: IFFALSE 48792
// continue ;
48790: GO 48591
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48792: LD_VAR 0 6
48796: PPUSH
48797: LD_INT 3
48799: PUSH
48800: LD_INT 60
48802: PUSH
48803: EMPTY
48804: LIST
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 3
48812: PUSH
48813: LD_INT 55
48815: PUSH
48816: EMPTY
48817: LIST
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PPUSH
48827: CALL_OW 72
48831: IFFALSE 48939
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48833: LD_ADDR_VAR 0 18
48837: PUSH
48838: LD_VAR 0 6
48842: PPUSH
48843: LD_INT 3
48845: PUSH
48846: LD_INT 60
48848: PUSH
48849: EMPTY
48850: LIST
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 3
48858: PUSH
48859: LD_INT 55
48861: PUSH
48862: EMPTY
48863: LIST
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PPUSH
48873: CALL_OW 72
48877: PUSH
48878: LD_INT 1
48880: ARRAY
48881: ST_TO_ADDR
// if IsInUnit ( driver ) then
48882: LD_VAR 0 18
48886: PPUSH
48887: CALL_OW 310
48891: IFFALSE 48902
// ComExit ( driver ) ;
48893: LD_VAR 0 18
48897: PPUSH
48898: CALL 73691 0 1
// AddComEnterUnit ( driver , tmp ) ;
48902: LD_VAR 0 18
48906: PPUSH
48907: LD_VAR 0 13
48911: PPUSH
48912: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48916: LD_VAR 0 18
48920: PPUSH
48921: LD_VAR 0 7
48925: PPUSH
48926: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48930: LD_VAR 0 18
48934: PPUSH
48935: CALL_OW 181
// end ; continue ;
48939: GO 48591
// end ; if not cleaners or not tmp in cleaners then
48941: LD_VAR 0 6
48945: NOT
48946: PUSH
48947: LD_VAR 0 13
48951: PUSH
48952: LD_VAR 0 6
48956: IN
48957: NOT
48958: OR
48959: IFFALSE 49266
// begin if dep then
48961: LD_VAR 0 17
48965: IFFALSE 49101
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48967: LD_ADDR_VAR 0 16
48971: PUSH
48972: LD_VAR 0 17
48976: PUSH
48977: LD_INT 1
48979: ARRAY
48980: PPUSH
48981: CALL_OW 250
48985: PPUSH
48986: LD_VAR 0 17
48990: PUSH
48991: LD_INT 1
48993: ARRAY
48994: PPUSH
48995: CALL_OW 254
48999: PPUSH
49000: LD_INT 5
49002: PPUSH
49003: CALL_OW 272
49007: PUSH
49008: LD_VAR 0 17
49012: PUSH
49013: LD_INT 1
49015: ARRAY
49016: PPUSH
49017: CALL_OW 251
49021: PPUSH
49022: LD_VAR 0 17
49026: PUSH
49027: LD_INT 1
49029: ARRAY
49030: PPUSH
49031: CALL_OW 254
49035: PPUSH
49036: LD_INT 5
49038: PPUSH
49039: CALL_OW 273
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49048: LD_VAR 0 16
49052: PUSH
49053: LD_INT 1
49055: ARRAY
49056: PPUSH
49057: LD_VAR 0 16
49061: PUSH
49062: LD_INT 2
49064: ARRAY
49065: PPUSH
49066: CALL_OW 488
49070: IFFALSE 49101
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49072: LD_VAR 0 13
49076: PPUSH
49077: LD_VAR 0 16
49081: PUSH
49082: LD_INT 1
49084: ARRAY
49085: PPUSH
49086: LD_VAR 0 16
49090: PUSH
49091: LD_INT 2
49093: ARRAY
49094: PPUSH
49095: CALL_OW 111
// continue ;
49099: GO 48591
// end ; end ; r := GetDir ( tmp ) ;
49101: LD_ADDR_VAR 0 15
49105: PUSH
49106: LD_VAR 0 13
49110: PPUSH
49111: CALL_OW 254
49115: ST_TO_ADDR
// if r = 5 then
49116: LD_VAR 0 15
49120: PUSH
49121: LD_INT 5
49123: EQUAL
49124: IFFALSE 49134
// r := 0 ;
49126: LD_ADDR_VAR 0 15
49130: PUSH
49131: LD_INT 0
49133: ST_TO_ADDR
// for j = r to 5 do
49134: LD_ADDR_VAR 0 10
49138: PUSH
49139: DOUBLE
49140: LD_VAR 0 15
49144: DEC
49145: ST_TO_ADDR
49146: LD_INT 5
49148: PUSH
49149: FOR_TO
49150: IFFALSE 49264
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49152: LD_ADDR_VAR 0 11
49156: PUSH
49157: LD_VAR 0 13
49161: PPUSH
49162: CALL_OW 250
49166: PPUSH
49167: LD_VAR 0 10
49171: PPUSH
49172: LD_INT 2
49174: PPUSH
49175: CALL_OW 272
49179: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49180: LD_ADDR_VAR 0 12
49184: PUSH
49185: LD_VAR 0 13
49189: PPUSH
49190: CALL_OW 251
49194: PPUSH
49195: LD_VAR 0 10
49199: PPUSH
49200: LD_INT 2
49202: PPUSH
49203: CALL_OW 273
49207: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49208: LD_VAR 0 11
49212: PPUSH
49213: LD_VAR 0 12
49217: PPUSH
49218: CALL_OW 488
49222: PUSH
49223: LD_VAR 0 11
49227: PPUSH
49228: LD_VAR 0 12
49232: PPUSH
49233: CALL_OW 428
49237: NOT
49238: AND
49239: IFFALSE 49262
// begin ComMoveXY ( tmp , _x , _y ) ;
49241: LD_VAR 0 13
49245: PPUSH
49246: LD_VAR 0 11
49250: PPUSH
49251: LD_VAR 0 12
49255: PPUSH
49256: CALL_OW 111
// break ;
49260: GO 49264
// end ; end ;
49262: GO 49149
49264: POP
49265: POP
// end ; end ;
49266: GO 48591
49268: POP
49269: POP
// end ;
49270: LD_VAR 0 8
49274: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49275: LD_INT 0
49277: PPUSH
// result := true ;
49278: LD_ADDR_VAR 0 3
49282: PUSH
49283: LD_INT 1
49285: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49286: LD_VAR 0 2
49290: PUSH
49291: LD_INT 24
49293: DOUBLE
49294: EQUAL
49295: IFTRUE 49305
49297: LD_INT 33
49299: DOUBLE
49300: EQUAL
49301: IFTRUE 49305
49303: GO 49330
49305: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49306: LD_ADDR_VAR 0 3
49310: PUSH
49311: LD_INT 32
49313: PPUSH
49314: LD_VAR 0 1
49318: PPUSH
49319: CALL_OW 321
49323: PUSH
49324: LD_INT 2
49326: EQUAL
49327: ST_TO_ADDR
49328: GO 49650
49330: LD_INT 20
49332: DOUBLE
49333: EQUAL
49334: IFTRUE 49338
49336: GO 49363
49338: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49339: LD_ADDR_VAR 0 3
49343: PUSH
49344: LD_INT 6
49346: PPUSH
49347: LD_VAR 0 1
49351: PPUSH
49352: CALL_OW 321
49356: PUSH
49357: LD_INT 2
49359: EQUAL
49360: ST_TO_ADDR
49361: GO 49650
49363: LD_INT 22
49365: DOUBLE
49366: EQUAL
49367: IFTRUE 49377
49369: LD_INT 36
49371: DOUBLE
49372: EQUAL
49373: IFTRUE 49377
49375: GO 49402
49377: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49378: LD_ADDR_VAR 0 3
49382: PUSH
49383: LD_INT 15
49385: PPUSH
49386: LD_VAR 0 1
49390: PPUSH
49391: CALL_OW 321
49395: PUSH
49396: LD_INT 2
49398: EQUAL
49399: ST_TO_ADDR
49400: GO 49650
49402: LD_INT 30
49404: DOUBLE
49405: EQUAL
49406: IFTRUE 49410
49408: GO 49435
49410: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49411: LD_ADDR_VAR 0 3
49415: PUSH
49416: LD_INT 20
49418: PPUSH
49419: LD_VAR 0 1
49423: PPUSH
49424: CALL_OW 321
49428: PUSH
49429: LD_INT 2
49431: EQUAL
49432: ST_TO_ADDR
49433: GO 49650
49435: LD_INT 28
49437: DOUBLE
49438: EQUAL
49439: IFTRUE 49449
49441: LD_INT 21
49443: DOUBLE
49444: EQUAL
49445: IFTRUE 49449
49447: GO 49474
49449: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49450: LD_ADDR_VAR 0 3
49454: PUSH
49455: LD_INT 21
49457: PPUSH
49458: LD_VAR 0 1
49462: PPUSH
49463: CALL_OW 321
49467: PUSH
49468: LD_INT 2
49470: EQUAL
49471: ST_TO_ADDR
49472: GO 49650
49474: LD_INT 16
49476: DOUBLE
49477: EQUAL
49478: IFTRUE 49482
49480: GO 49509
49482: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49483: LD_ADDR_VAR 0 3
49487: PUSH
49488: LD_EXP 74
49492: PPUSH
49493: LD_VAR 0 1
49497: PPUSH
49498: CALL_OW 321
49502: PUSH
49503: LD_INT 2
49505: EQUAL
49506: ST_TO_ADDR
49507: GO 49650
49509: LD_INT 19
49511: DOUBLE
49512: EQUAL
49513: IFTRUE 49523
49515: LD_INT 23
49517: DOUBLE
49518: EQUAL
49519: IFTRUE 49523
49521: GO 49550
49523: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49524: LD_ADDR_VAR 0 3
49528: PUSH
49529: LD_EXP 73
49533: PPUSH
49534: LD_VAR 0 1
49538: PPUSH
49539: CALL_OW 321
49543: PUSH
49544: LD_INT 2
49546: EQUAL
49547: ST_TO_ADDR
49548: GO 49650
49550: LD_INT 17
49552: DOUBLE
49553: EQUAL
49554: IFTRUE 49558
49556: GO 49583
49558: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49559: LD_ADDR_VAR 0 3
49563: PUSH
49564: LD_INT 39
49566: PPUSH
49567: LD_VAR 0 1
49571: PPUSH
49572: CALL_OW 321
49576: PUSH
49577: LD_INT 2
49579: EQUAL
49580: ST_TO_ADDR
49581: GO 49650
49583: LD_INT 18
49585: DOUBLE
49586: EQUAL
49587: IFTRUE 49591
49589: GO 49616
49591: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49592: LD_ADDR_VAR 0 3
49596: PUSH
49597: LD_INT 40
49599: PPUSH
49600: LD_VAR 0 1
49604: PPUSH
49605: CALL_OW 321
49609: PUSH
49610: LD_INT 2
49612: EQUAL
49613: ST_TO_ADDR
49614: GO 49650
49616: LD_INT 27
49618: DOUBLE
49619: EQUAL
49620: IFTRUE 49624
49622: GO 49649
49624: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49625: LD_ADDR_VAR 0 3
49629: PUSH
49630: LD_INT 35
49632: PPUSH
49633: LD_VAR 0 1
49637: PPUSH
49638: CALL_OW 321
49642: PUSH
49643: LD_INT 2
49645: EQUAL
49646: ST_TO_ADDR
49647: GO 49650
49649: POP
// end ;
49650: LD_VAR 0 3
49654: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49655: LD_INT 0
49657: PPUSH
49658: PPUSH
49659: PPUSH
49660: PPUSH
49661: PPUSH
49662: PPUSH
49663: PPUSH
49664: PPUSH
49665: PPUSH
49666: PPUSH
49667: PPUSH
// result := false ;
49668: LD_ADDR_VAR 0 6
49672: PUSH
49673: LD_INT 0
49675: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49676: LD_VAR 0 1
49680: NOT
49681: PUSH
49682: LD_VAR 0 1
49686: PPUSH
49687: CALL_OW 266
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: IN
49702: NOT
49703: OR
49704: PUSH
49705: LD_VAR 0 2
49709: NOT
49710: OR
49711: PUSH
49712: LD_VAR 0 5
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: LD_INT 2
49725: PUSH
49726: LD_INT 3
49728: PUSH
49729: LD_INT 4
49731: PUSH
49732: LD_INT 5
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: IN
49743: NOT
49744: OR
49745: PUSH
49746: LD_VAR 0 3
49750: PPUSH
49751: LD_VAR 0 4
49755: PPUSH
49756: CALL_OW 488
49760: NOT
49761: OR
49762: IFFALSE 49766
// exit ;
49764: GO 50502
// side := GetSide ( depot ) ;
49766: LD_ADDR_VAR 0 9
49770: PUSH
49771: LD_VAR 0 1
49775: PPUSH
49776: CALL_OW 255
49780: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49781: LD_VAR 0 9
49785: PPUSH
49786: LD_VAR 0 2
49790: PPUSH
49791: CALL 49275 0 2
49795: NOT
49796: IFFALSE 49800
// exit ;
49798: GO 50502
// pom := GetBase ( depot ) ;
49800: LD_ADDR_VAR 0 10
49804: PUSH
49805: LD_VAR 0 1
49809: PPUSH
49810: CALL_OW 274
49814: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49815: LD_ADDR_VAR 0 11
49819: PUSH
49820: LD_VAR 0 2
49824: PPUSH
49825: LD_VAR 0 1
49829: PPUSH
49830: CALL_OW 248
49834: PPUSH
49835: CALL_OW 450
49839: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49840: LD_VAR 0 10
49844: PPUSH
49845: LD_INT 1
49847: PPUSH
49848: CALL_OW 275
49852: PUSH
49853: LD_VAR 0 11
49857: PUSH
49858: LD_INT 1
49860: ARRAY
49861: GREATEREQUAL
49862: PUSH
49863: LD_VAR 0 10
49867: PPUSH
49868: LD_INT 2
49870: PPUSH
49871: CALL_OW 275
49875: PUSH
49876: LD_VAR 0 11
49880: PUSH
49881: LD_INT 2
49883: ARRAY
49884: GREATEREQUAL
49885: AND
49886: PUSH
49887: LD_VAR 0 10
49891: PPUSH
49892: LD_INT 3
49894: PPUSH
49895: CALL_OW 275
49899: PUSH
49900: LD_VAR 0 11
49904: PUSH
49905: LD_INT 3
49907: ARRAY
49908: GREATEREQUAL
49909: AND
49910: NOT
49911: IFFALSE 49915
// exit ;
49913: GO 50502
// if GetBType ( depot ) = b_depot then
49915: LD_VAR 0 1
49919: PPUSH
49920: CALL_OW 266
49924: PUSH
49925: LD_INT 0
49927: EQUAL
49928: IFFALSE 49940
// dist := 28 else
49930: LD_ADDR_VAR 0 14
49934: PUSH
49935: LD_INT 28
49937: ST_TO_ADDR
49938: GO 49948
// dist := 36 ;
49940: LD_ADDR_VAR 0 14
49944: PUSH
49945: LD_INT 36
49947: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49948: LD_VAR 0 1
49952: PPUSH
49953: LD_VAR 0 3
49957: PPUSH
49958: LD_VAR 0 4
49962: PPUSH
49963: CALL_OW 297
49967: PUSH
49968: LD_VAR 0 14
49972: GREATER
49973: IFFALSE 49977
// exit ;
49975: GO 50502
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49977: LD_ADDR_VAR 0 12
49981: PUSH
49982: LD_VAR 0 2
49986: PPUSH
49987: LD_VAR 0 3
49991: PPUSH
49992: LD_VAR 0 4
49996: PPUSH
49997: LD_VAR 0 5
50001: PPUSH
50002: LD_VAR 0 1
50006: PPUSH
50007: CALL_OW 248
50011: PPUSH
50012: LD_INT 0
50014: PPUSH
50015: CALL 50507 0 6
50019: ST_TO_ADDR
// if not hexes then
50020: LD_VAR 0 12
50024: NOT
50025: IFFALSE 50029
// exit ;
50027: GO 50502
// hex := GetHexInfo ( x , y ) ;
50029: LD_ADDR_VAR 0 15
50033: PUSH
50034: LD_VAR 0 3
50038: PPUSH
50039: LD_VAR 0 4
50043: PPUSH
50044: CALL_OW 546
50048: ST_TO_ADDR
// if hex [ 1 ] then
50049: LD_VAR 0 15
50053: PUSH
50054: LD_INT 1
50056: ARRAY
50057: IFFALSE 50061
// exit ;
50059: GO 50502
// height := hex [ 2 ] ;
50061: LD_ADDR_VAR 0 13
50065: PUSH
50066: LD_VAR 0 15
50070: PUSH
50071: LD_INT 2
50073: ARRAY
50074: ST_TO_ADDR
// for i = 1 to hexes do
50075: LD_ADDR_VAR 0 7
50079: PUSH
50080: DOUBLE
50081: LD_INT 1
50083: DEC
50084: ST_TO_ADDR
50085: LD_VAR 0 12
50089: PUSH
50090: FOR_TO
50091: IFFALSE 50421
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50093: LD_VAR 0 12
50097: PUSH
50098: LD_VAR 0 7
50102: ARRAY
50103: PUSH
50104: LD_INT 1
50106: ARRAY
50107: PPUSH
50108: LD_VAR 0 12
50112: PUSH
50113: LD_VAR 0 7
50117: ARRAY
50118: PUSH
50119: LD_INT 2
50121: ARRAY
50122: PPUSH
50123: CALL_OW 488
50127: NOT
50128: PUSH
50129: LD_VAR 0 12
50133: PUSH
50134: LD_VAR 0 7
50138: ARRAY
50139: PUSH
50140: LD_INT 1
50142: ARRAY
50143: PPUSH
50144: LD_VAR 0 12
50148: PUSH
50149: LD_VAR 0 7
50153: ARRAY
50154: PUSH
50155: LD_INT 2
50157: ARRAY
50158: PPUSH
50159: CALL_OW 428
50163: PUSH
50164: LD_INT 0
50166: GREATER
50167: OR
50168: PUSH
50169: LD_VAR 0 12
50173: PUSH
50174: LD_VAR 0 7
50178: ARRAY
50179: PUSH
50180: LD_INT 1
50182: ARRAY
50183: PPUSH
50184: LD_VAR 0 12
50188: PUSH
50189: LD_VAR 0 7
50193: ARRAY
50194: PUSH
50195: LD_INT 2
50197: ARRAY
50198: PPUSH
50199: CALL_OW 351
50203: OR
50204: IFFALSE 50210
// exit ;
50206: POP
50207: POP
50208: GO 50502
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50210: LD_ADDR_VAR 0 8
50214: PUSH
50215: LD_VAR 0 12
50219: PUSH
50220: LD_VAR 0 7
50224: ARRAY
50225: PUSH
50226: LD_INT 1
50228: ARRAY
50229: PPUSH
50230: LD_VAR 0 12
50234: PUSH
50235: LD_VAR 0 7
50239: ARRAY
50240: PUSH
50241: LD_INT 2
50243: ARRAY
50244: PPUSH
50245: CALL_OW 546
50249: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50250: LD_VAR 0 8
50254: PUSH
50255: LD_INT 1
50257: ARRAY
50258: PUSH
50259: LD_VAR 0 8
50263: PUSH
50264: LD_INT 2
50266: ARRAY
50267: PUSH
50268: LD_VAR 0 13
50272: PUSH
50273: LD_INT 2
50275: PLUS
50276: GREATER
50277: OR
50278: PUSH
50279: LD_VAR 0 8
50283: PUSH
50284: LD_INT 2
50286: ARRAY
50287: PUSH
50288: LD_VAR 0 13
50292: PUSH
50293: LD_INT 2
50295: MINUS
50296: LESS
50297: OR
50298: PUSH
50299: LD_VAR 0 8
50303: PUSH
50304: LD_INT 3
50306: ARRAY
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: LD_INT 8
50313: PUSH
50314: LD_INT 9
50316: PUSH
50317: LD_INT 10
50319: PUSH
50320: LD_INT 11
50322: PUSH
50323: LD_INT 12
50325: PUSH
50326: LD_INT 13
50328: PUSH
50329: LD_INT 16
50331: PUSH
50332: LD_INT 17
50334: PUSH
50335: LD_INT 18
50337: PUSH
50338: LD_INT 19
50340: PUSH
50341: LD_INT 20
50343: PUSH
50344: LD_INT 21
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: IN
50362: NOT
50363: OR
50364: PUSH
50365: LD_VAR 0 8
50369: PUSH
50370: LD_INT 5
50372: ARRAY
50373: NOT
50374: OR
50375: PUSH
50376: LD_VAR 0 8
50380: PUSH
50381: LD_INT 6
50383: ARRAY
50384: PUSH
50385: LD_INT 1
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: LD_INT 7
50393: PUSH
50394: LD_INT 9
50396: PUSH
50397: LD_INT 10
50399: PUSH
50400: LD_INT 11
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: IN
50411: NOT
50412: OR
50413: IFFALSE 50419
// exit ;
50415: POP
50416: POP
50417: GO 50502
// end ;
50419: GO 50090
50421: POP
50422: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50423: LD_VAR 0 9
50427: PPUSH
50428: LD_VAR 0 3
50432: PPUSH
50433: LD_VAR 0 4
50437: PPUSH
50438: LD_INT 20
50440: PPUSH
50441: CALL 42448 0 4
50445: PUSH
50446: LD_INT 4
50448: ARRAY
50449: IFFALSE 50453
// exit ;
50451: GO 50502
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50453: LD_VAR 0 2
50457: PUSH
50458: LD_INT 29
50460: PUSH
50461: LD_INT 30
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: IN
50468: PUSH
50469: LD_VAR 0 3
50473: PPUSH
50474: LD_VAR 0 4
50478: PPUSH
50479: LD_VAR 0 9
50483: PPUSH
50484: CALL_OW 440
50488: NOT
50489: AND
50490: IFFALSE 50494
// exit ;
50492: GO 50502
// result := true ;
50494: LD_ADDR_VAR 0 6
50498: PUSH
50499: LD_INT 1
50501: ST_TO_ADDR
// end ;
50502: LD_VAR 0 6
50506: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50507: LD_INT 0
50509: PPUSH
50510: PPUSH
50511: PPUSH
50512: PPUSH
50513: PPUSH
50514: PPUSH
50515: PPUSH
50516: PPUSH
50517: PPUSH
50518: PPUSH
50519: PPUSH
50520: PPUSH
50521: PPUSH
50522: PPUSH
50523: PPUSH
50524: PPUSH
50525: PPUSH
50526: PPUSH
50527: PPUSH
50528: PPUSH
50529: PPUSH
50530: PPUSH
50531: PPUSH
50532: PPUSH
50533: PPUSH
50534: PPUSH
50535: PPUSH
50536: PPUSH
50537: PPUSH
50538: PPUSH
50539: PPUSH
50540: PPUSH
50541: PPUSH
50542: PPUSH
50543: PPUSH
50544: PPUSH
50545: PPUSH
50546: PPUSH
50547: PPUSH
50548: PPUSH
50549: PPUSH
50550: PPUSH
50551: PPUSH
50552: PPUSH
50553: PPUSH
50554: PPUSH
50555: PPUSH
50556: PPUSH
50557: PPUSH
50558: PPUSH
50559: PPUSH
50560: PPUSH
50561: PPUSH
50562: PPUSH
50563: PPUSH
50564: PPUSH
50565: PPUSH
50566: PPUSH
// result = [ ] ;
50567: LD_ADDR_VAR 0 7
50571: PUSH
50572: EMPTY
50573: ST_TO_ADDR
// temp_list = [ ] ;
50574: LD_ADDR_VAR 0 9
50578: PUSH
50579: EMPTY
50580: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50581: LD_VAR 0 4
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: LD_INT 2
50594: PUSH
50595: LD_INT 3
50597: PUSH
50598: LD_INT 4
50600: PUSH
50601: LD_INT 5
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: IN
50612: NOT
50613: PUSH
50614: LD_VAR 0 1
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: IN
50629: PUSH
50630: LD_VAR 0 5
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: LD_INT 3
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: LIST
50648: IN
50649: NOT
50650: AND
50651: OR
50652: IFFALSE 50656
// exit ;
50654: GO 69047
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50656: LD_VAR 0 1
50660: PUSH
50661: LD_INT 6
50663: PUSH
50664: LD_INT 7
50666: PUSH
50667: LD_INT 8
50669: PUSH
50670: LD_INT 13
50672: PUSH
50673: LD_INT 12
50675: PUSH
50676: LD_INT 15
50678: PUSH
50679: LD_INT 11
50681: PUSH
50682: LD_INT 14
50684: PUSH
50685: LD_INT 10
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: IN
50699: IFFALSE 50709
// btype = b_lab ;
50701: LD_ADDR_VAR 0 1
50705: PUSH
50706: LD_INT 6
50708: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50709: LD_VAR 0 6
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 2
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: LIST
50727: IN
50728: NOT
50729: PUSH
50730: LD_VAR 0 1
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: LD_INT 3
50746: PUSH
50747: LD_INT 6
50749: PUSH
50750: LD_INT 36
50752: PUSH
50753: LD_INT 4
50755: PUSH
50756: LD_INT 5
50758: PUSH
50759: LD_INT 31
50761: PUSH
50762: LD_INT 32
50764: PUSH
50765: LD_INT 33
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: IN
50781: NOT
50782: PUSH
50783: LD_VAR 0 6
50787: PUSH
50788: LD_INT 1
50790: EQUAL
50791: AND
50792: OR
50793: PUSH
50794: LD_VAR 0 1
50798: PUSH
50799: LD_INT 2
50801: PUSH
50802: LD_INT 3
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: IN
50809: NOT
50810: PUSH
50811: LD_VAR 0 6
50815: PUSH
50816: LD_INT 2
50818: EQUAL
50819: AND
50820: OR
50821: IFFALSE 50831
// mode = 0 ;
50823: LD_ADDR_VAR 0 6
50827: PUSH
50828: LD_INT 0
50830: ST_TO_ADDR
// case mode of 0 :
50831: LD_VAR 0 6
50835: PUSH
50836: LD_INT 0
50838: DOUBLE
50839: EQUAL
50840: IFTRUE 50844
50842: GO 62297
50844: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50845: LD_ADDR_VAR 0 11
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 1
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: LD_INT 1
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: LD_INT 2
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: LD_INT 2
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: LD_INT 3
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: LD_INT 3
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: LD_INT 2
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51038: LD_ADDR_VAR 0 12
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 2
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 2
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 2
51184: NEG
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 3
51195: NEG
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 3
51206: NEG
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51234: LD_ADDR_VAR 0 13
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 2
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 2
51337: PUSH
51338: LD_INT 2
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: LD_INT 2
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 2
51357: NEG
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 2
51381: NEG
51382: PUSH
51383: LD_INT 3
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 3
51393: NEG
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 3
51405: NEG
51406: PUSH
51407: LD_INT 3
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51433: LD_ADDR_VAR 0 14
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 1
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 1
51491: NEG
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: LD_INT 1
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: LD_INT 2
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: LD_INT 2
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: LD_INT 2
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: LD_INT 3
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: LD_INT 3
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51629: LD_ADDR_VAR 0 15
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 2
51763: NEG
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 2
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 3
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 3
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51822: LD_ADDR_VAR 0 16
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: LD_INT 2
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 2
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 2
51945: NEG
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 2
51957: NEG
51958: PUSH
51959: LD_INT 2
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 3
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 3
51979: PUSH
51980: LD_INT 3
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 2
51989: PUSH
51990: LD_INT 3
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52015: LD_ADDR_VAR 0 17
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: LD_INT 2
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: LD_INT 2
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: LD_INT 2
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: LD_INT 2
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: NEG
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 2
52214: NEG
52215: PUSH
52216: LD_INT 2
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52245: LD_ADDR_VAR 0 18
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: LD_INT 1
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: LD_INT 2
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: LD_INT 1
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 2
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: LD_INT 2
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 2
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 2
52444: NEG
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52475: LD_ADDR_VAR 0 19
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: LD_INT 2
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: LD_INT 2
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 2
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 2
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: PUSH
52611: LD_INT 2
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: LD_INT 2
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 2
52651: NEG
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 2
52674: NEG
52675: PUSH
52676: LD_INT 2
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52705: LD_ADDR_VAR 0 20
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: LD_INT 2
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 2
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 2
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 2
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 2
52892: NEG
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 2
52904: NEG
52905: PUSH
52906: LD_INT 2
52908: NEG
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52935: LD_ADDR_VAR 0 21
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: LD_INT 1
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 1
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: LD_INT 2
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 2
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 2
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 2
53060: PUSH
53061: LD_INT 1
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 2
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 2
53111: NEG
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 2
53122: NEG
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: LD_INT 2
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53165: LD_ADDR_VAR 0 22
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 1
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: LD_INT 2
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 2
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 2
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 2
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: LD_INT 2
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: LD_INT 2
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 2
53352: NEG
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: LD_INT 2
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53395: LD_ADDR_VAR 0 23
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: LD_INT 2
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: LD_INT 2
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 2
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 2
53520: PUSH
53521: LD_INT 1
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: LD_INT 2
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: LD_INT 2
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 2
53571: NEG
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 2
53582: NEG
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: LD_INT 2
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 2
53606: NEG
53607: PUSH
53608: LD_INT 3
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: LD_INT 3
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: LD_INT 2
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53675: LD_ADDR_VAR 0 24
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: LD_INT 0
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: LD_INT 1
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: LD_INT 2
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: LD_INT 2
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 2
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 2
53810: PUSH
53811: LD_INT 2
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: LD_INT 2
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: LD_INT 2
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 2
53851: NEG
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 2
53862: NEG
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 2
53874: NEG
53875: PUSH
53876: LD_INT 2
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: LD_INT 2
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 2
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 3
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 3
53918: PUSH
53919: LD_INT 2
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53951: LD_ADDR_VAR 0 25
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 1
54009: NEG
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: LD_INT 2
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 2
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 2
54086: PUSH
54087: LD_INT 2
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: LD_INT 2
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 2
54138: NEG
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 2
54150: NEG
54151: PUSH
54152: LD_INT 2
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 3
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 3
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: PUSH
54183: LD_INT 3
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: LD_INT 3
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54225: LD_ADDR_VAR 0 26
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: LD_INT 2
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: LD_INT 2
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 2
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 2
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 2
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 2
54424: NEG
54425: PUSH
54426: LD_INT 2
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 2
54436: PUSH
54437: LD_INT 3
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: LD_INT 3
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 1
54456: NEG
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 2
54467: NEG
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54501: LD_ADDR_VAR 0 27
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: NEG
54583: PUSH
54584: LD_INT 2
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: LD_INT 2
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 2
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: LD_INT 2
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: LD_INT 2
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 2
54688: NEG
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 2
54700: NEG
54701: PUSH
54702: LD_INT 2
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: NEG
54713: PUSH
54714: LD_INT 2
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 2
54723: NEG
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 3
54734: NEG
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 3
54746: NEG
54747: PUSH
54748: LD_INT 2
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54781: LD_ADDR_VAR 0 28
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: LD_INT 2
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 2
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 2
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: LD_INT 2
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: LD_INT 2
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: NEG
54981: PUSH
54982: LD_INT 2
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 2
54992: NEG
54993: PUSH
54994: LD_INT 3
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: LD_INT 3
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 3
55016: NEG
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 3
55028: NEG
55029: PUSH
55030: LD_INT 2
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55063: LD_ADDR_VAR 0 29
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 0
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: NEG
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: LD_INT 2
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 2
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 2
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: LD_INT 2
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 2
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 2
55229: NEG
55230: PUSH
55231: LD_INT 1
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: NEG
55242: PUSH
55243: LD_INT 2
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 2
55253: NEG
55254: PUSH
55255: LD_INT 3
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 3
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 3
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: NEG
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 3
55307: NEG
55308: PUSH
55309: LD_INT 2
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55342: LD_ADDR_VAR 0 30
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: LD_INT 2
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: LD_INT 2
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 2
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 1
55497: NEG
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: LD_INT 1
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: LD_INT 3
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: LD_INT 2
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 3
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 2
55564: PUSH
55565: LD_INT 3
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 3
55585: NEG
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55620: LD_ADDR_VAR 0 31
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: LD_INT 2
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 2
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: LD_INT 2
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 2
55785: NEG
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 2
55797: NEG
55798: PUSH
55799: LD_INT 2
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 2
55809: NEG
55810: PUSH
55811: LD_INT 3
55813: NEG
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 2
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 3
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: LD_INT 3
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 3
55863: NEG
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55898: LD_ADDR_VAR 0 32
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: LD_INT 0
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 2
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 2
56023: PUSH
56024: LD_INT 2
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: PUSH
56034: LD_INT 2
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: LD_INT 2
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 2
56064: NEG
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 2
56075: NEG
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: LD_INT 3
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 3
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 2
56120: PUSH
56121: LD_INT 3
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 3
56141: NEG
56142: PUSH
56143: LD_INT 1
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56176: LD_ADDR_VAR 0 33
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 2
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 2
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: LD_INT 2
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: LD_INT 2
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 2
56331: NEG
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 2
56342: NEG
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 2
56354: NEG
56355: PUSH
56356: LD_INT 2
56358: NEG
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 2
56366: NEG
56367: PUSH
56368: LD_INT 3
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 2
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 3
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: LD_INT 3
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: LD_INT 2
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 3
56420: NEG
56421: PUSH
56422: LD_INT 2
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56455: LD_ADDR_VAR 0 34
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: NEG
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: LD_INT 2
56540: NEG
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: LD_INT 2
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 2
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 2
56580: PUSH
56581: LD_INT 2
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 2
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 2
56622: NEG
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: NEG
56635: PUSH
56636: LD_INT 2
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: LD_INT 3
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 3
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 2
56679: PUSH
56680: LD_INT 3
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 2
56689: NEG
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 3
56700: NEG
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56735: LD_ADDR_VAR 0 35
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 2
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 2
56826: NEG
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56847: LD_ADDR_VAR 0 36
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 2
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: LD_INT 2
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56959: LD_ADDR_VAR 0 37
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57071: LD_ADDR_VAR 0 38
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: LD_INT 1
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 2
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 2
57162: NEG
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57183: LD_ADDR_VAR 0 39
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: LD_INT 1
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: NEG
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: LD_INT 2
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 1
57276: PUSH
57277: LD_INT 2
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57295: LD_ADDR_VAR 0 40
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57407: LD_ADDR_VAR 0 41
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: LD_INT 1
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: LD_INT 1
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: NEG
57466: PUSH
57467: LD_INT 0
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: LD_INT 2
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 2
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 2
57521: PUSH
57522: LD_INT 1
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 2
57531: PUSH
57532: LD_INT 2
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: LD_INT 2
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 2
57562: NEG
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 2
57573: NEG
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 2
57585: NEG
57586: PUSH
57587: LD_INT 2
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 2
57597: NEG
57598: PUSH
57599: LD_INT 3
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 3
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 3
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 3
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 3
57650: PUSH
57651: LD_INT 3
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 2
57660: PUSH
57661: LD_INT 3
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 3
57681: NEG
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 3
57692: NEG
57693: PUSH
57694: LD_INT 1
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 3
57704: NEG
57705: PUSH
57706: LD_INT 2
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 3
57716: NEG
57717: PUSH
57718: LD_INT 3
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57757: LD_ADDR_VAR 0 42
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: LD_INT 1
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: NEG
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: LD_INT 2
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 2
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 2
57882: PUSH
57883: LD_INT 2
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: LD_INT 2
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: LD_INT 2
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: LD_INT 1
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 2
57923: NEG
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 2
57935: NEG
57936: PUSH
57937: LD_INT 2
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 2
57947: NEG
57948: PUSH
57949: LD_INT 3
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: LD_INT 3
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: LD_INT 3
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 3
57993: PUSH
57994: LD_INT 2
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 3
58003: PUSH
58004: LD_INT 3
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 2
58013: PUSH
58014: LD_INT 3
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: LD_INT 3
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: LD_INT 3
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: LD_INT 2
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 3
58054: NEG
58055: PUSH
58056: LD_INT 2
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 3
58066: NEG
58067: PUSH
58068: LD_INT 3
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58107: LD_ADDR_VAR 0 43
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: LD_INT 1
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 0
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 1
58165: NEG
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 1
58176: NEG
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: NEG
58189: PUSH
58190: LD_INT 2
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: LD_INT 2
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 2
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 2
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: LD_INT 2
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: LD_INT 2
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 2
58273: NEG
58274: PUSH
58275: LD_INT 0
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 2
58284: NEG
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 1
58296: NEG
58297: PUSH
58298: LD_INT 3
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: LD_INT 3
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: LD_INT 2
58322: NEG
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 3
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 3
58351: PUSH
58352: LD_INT 1
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 1
58361: PUSH
58362: LD_INT 3
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: LD_INT 3
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: LD_INT 2
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 2
58392: NEG
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 3
58403: NEG
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 3
58414: NEG
58415: PUSH
58416: LD_INT 1
58418: NEG
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58455: LD_ADDR_VAR 0 44
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: LD_INT 1
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 1
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 0
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: LD_INT 1
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: LD_INT 2
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: LD_INT 1
58551: NEG
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 2
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 2
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 2
58579: PUSH
58580: LD_INT 2
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: LD_INT 2
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 2
58610: NEG
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 2
58621: NEG
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 2
58633: NEG
58634: PUSH
58635: LD_INT 2
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 2
58645: NEG
58646: PUSH
58647: LD_INT 3
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 3
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 3
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 3
58688: PUSH
58689: LD_INT 2
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 3
58698: PUSH
58699: LD_INT 3
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: PUSH
58709: LD_INT 3
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 2
58718: NEG
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 3
58729: NEG
58730: PUSH
58731: LD_INT 0
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 3
58740: NEG
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 3
58752: NEG
58753: PUSH
58754: LD_INT 2
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 3
58764: NEG
58765: PUSH
58766: LD_INT 3
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58805: LD_ADDR_VAR 0 45
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: LD_INT 0
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 0
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: LD_INT 2
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: LD_INT 2
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: LD_INT 1
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 2
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 2
58930: PUSH
58931: LD_INT 2
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: PUSH
58941: LD_INT 2
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: LD_INT 2
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: LD_INT 1
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 2
58971: NEG
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: NEG
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 2
58995: NEG
58996: PUSH
58997: LD_INT 3
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 1
59007: NEG
59008: PUSH
59009: LD_INT 3
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: LD_INT 3
59022: NEG
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: LD_INT 2
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 3
59041: PUSH
59042: LD_INT 2
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 3
59051: PUSH
59052: LD_INT 3
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 2
59061: PUSH
59062: LD_INT 3
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: LD_INT 3
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 0
59081: PUSH
59082: LD_INT 3
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: LD_INT 2
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 3
59102: NEG
59103: PUSH
59104: LD_INT 2
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: LD_INT 3
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59155: LD_ADDR_VAR 0 46
59159: PUSH
59160: LD_INT 0
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: LD_INT 2
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 2
59270: PUSH
59271: LD_INT 0
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 2
59280: PUSH
59281: LD_INT 1
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: LD_INT 2
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: LD_INT 1
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 2
59321: NEG
59322: PUSH
59323: LD_INT 0
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 2
59332: NEG
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: LD_INT 3
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: LD_INT 3
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 1
59367: PUSH
59368: LD_INT 2
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 2
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 3
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 3
59399: PUSH
59400: LD_INT 1
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: LD_INT 3
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: LD_INT 3
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: LD_INT 2
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 2
59440: NEG
59441: PUSH
59442: LD_INT 1
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 3
59451: NEG
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 3
59462: NEG
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59503: LD_ADDR_VAR 0 47
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: LD_INT 1
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: LD_INT 0
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 1
59561: NEG
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: LD_INT 1
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: LD_INT 2
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: LD_INT 2
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 1
59607: PUSH
59608: LD_INT 1
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 2
59618: NEG
59619: PUSH
59620: LD_INT 1
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 2
59630: NEG
59631: PUSH
59632: LD_INT 2
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59654: LD_ADDR_VAR 0 48
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: LD_INT 1
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 1
59735: NEG
59736: PUSH
59737: LD_INT 2
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: LD_INT 2
59750: NEG
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 2
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 2
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59801: LD_ADDR_VAR 0 49
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 1
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 1
59839: PUSH
59840: LD_INT 1
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: LD_INT 1
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 1
59882: PUSH
59883: LD_INT 1
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 2
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 2
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 2
59913: PUSH
59914: LD_INT 2
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: LD_INT 2
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59945: LD_ADDR_VAR 0 50
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: LD_INT 1
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: LD_INT 1
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 1
60003: NEG
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: NEG
60015: PUSH
60016: LD_INT 1
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 2
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: LD_INT 2
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: LD_INT 2
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 0
60056: PUSH
60057: LD_INT 2
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60089: LD_ADDR_VAR 0 51
60093: PUSH
60094: LD_INT 0
60096: PUSH
60097: LD_INT 0
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 0
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: LD_INT 1
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: LD_INT 1
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: LD_INT 2
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: LD_INT 2
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 2
60201: NEG
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: NEG
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60236: LD_ADDR_VAR 0 52
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 0
60253: PUSH
60254: LD_INT 1
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: LD_INT 1
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 1
60305: NEG
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 1
60317: NEG
60318: PUSH
60319: LD_INT 2
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: LD_INT 1
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 2
60340: NEG
60341: PUSH
60342: LD_INT 0
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 2
60351: NEG
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 2
60363: NEG
60364: PUSH
60365: LD_INT 2
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60387: LD_ADDR_VAR 0 53
60391: PUSH
60392: LD_INT 0
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: LD_INT 1
60407: NEG
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 1
60415: PUSH
60416: LD_INT 0
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: LD_INT 1
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 0
60435: PUSH
60436: LD_INT 1
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 1
60445: NEG
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 1
60456: NEG
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 1
60468: NEG
60469: PUSH
60470: LD_INT 2
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: LD_INT 1
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 2
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 2
60512: PUSH
60513: LD_INT 1
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 2
60522: PUSH
60523: LD_INT 2
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 1
60532: PUSH
60533: LD_INT 2
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: LD_INT 2
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 2
60563: NEG
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 2
60574: NEG
60575: PUSH
60576: LD_INT 1
60578: NEG
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 2
60586: NEG
60587: PUSH
60588: LD_INT 2
60590: NEG
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60617: LD_ADDR_VAR 0 54
60621: PUSH
60622: LD_INT 0
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: LD_INT 1
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: LD_INT 0
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 1
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: LD_INT 1
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 1
60675: NEG
60676: PUSH
60677: LD_INT 0
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 1
60686: NEG
60687: PUSH
60688: LD_INT 1
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: LD_INT 2
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: LD_INT 2
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 1
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 2
60732: PUSH
60733: LD_INT 0
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 2
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: LD_INT 2
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 1
60762: PUSH
60763: LD_INT 2
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: LD_INT 2
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: LD_INT 1
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 2
60793: NEG
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 2
60804: NEG
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 2
60816: NEG
60817: PUSH
60818: LD_INT 2
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60847: LD_ADDR_VAR 0 55
60851: PUSH
60852: LD_INT 0
60854: PUSH
60855: LD_INT 0
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 1
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 1
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: LD_INT 1
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: LD_INT 0
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 1
60916: NEG
60917: PUSH
60918: LD_INT 1
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: NEG
60929: PUSH
60930: LD_INT 2
60932: NEG
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: LD_INT 2
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 1
60951: PUSH
60952: LD_INT 1
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 2
60962: PUSH
60963: LD_INT 0
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 2
60972: PUSH
60973: LD_INT 1
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 2
60982: PUSH
60983: LD_INT 2
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: LD_INT 2
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: LD_INT 2
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: LD_INT 1
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 2
61023: NEG
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 2
61034: NEG
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 2
61046: NEG
61047: PUSH
61048: LD_INT 2
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61077: LD_ADDR_VAR 0 56
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 1
61115: PUSH
61116: LD_INT 1
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 1
61146: NEG
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: NEG
61159: PUSH
61160: LD_INT 2
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: LD_INT 2
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 2
61192: PUSH
61193: LD_INT 0
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 2
61202: PUSH
61203: LD_INT 1
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 2
61212: PUSH
61213: LD_INT 2
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 1
61222: PUSH
61223: LD_INT 2
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: LD_INT 2
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: LD_INT 1
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 2
61253: NEG
61254: PUSH
61255: LD_INT 0
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 2
61264: NEG
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 2
61276: NEG
61277: PUSH
61278: LD_INT 2
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61307: LD_ADDR_VAR 0 57
61311: PUSH
61312: LD_INT 0
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 0
61324: PUSH
61325: LD_INT 1
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: LD_INT 0
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 1
61345: PUSH
61346: LD_INT 1
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 0
61355: PUSH
61356: LD_INT 1
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 1
61365: NEG
61366: PUSH
61367: LD_INT 0
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 1
61376: NEG
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 2
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 0
61400: PUSH
61401: LD_INT 2
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: LD_INT 1
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 2
61422: PUSH
61423: LD_INT 0
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 2
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 2
61442: PUSH
61443: LD_INT 2
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 1
61452: PUSH
61453: LD_INT 2
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: LD_INT 2
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 1
61472: NEG
61473: PUSH
61474: LD_INT 1
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 2
61483: NEG
61484: PUSH
61485: LD_INT 0
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 2
61494: NEG
61495: PUSH
61496: LD_INT 1
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 2
61506: NEG
61507: PUSH
61508: LD_INT 2
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61537: LD_ADDR_VAR 0 58
61541: PUSH
61542: LD_INT 0
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 0
61554: PUSH
61555: LD_INT 1
61557: NEG
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 1
61565: PUSH
61566: LD_INT 0
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 1
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 1
61595: NEG
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 1
61606: NEG
61607: PUSH
61608: LD_INT 1
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: LD_INT 2
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: LD_INT 2
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: LD_INT 1
61644: NEG
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 2
61652: PUSH
61653: LD_INT 0
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 2
61662: PUSH
61663: LD_INT 1
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 2
61672: PUSH
61673: LD_INT 2
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 1
61682: PUSH
61683: LD_INT 2
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: LD_INT 2
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: NEG
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 2
61713: NEG
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 2
61724: NEG
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 2
61736: NEG
61737: PUSH
61738: LD_INT 2
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61767: LD_ADDR_VAR 0 59
61771: PUSH
61772: LD_INT 0
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 1
61795: PUSH
61796: LD_INT 0
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 1
61805: PUSH
61806: LD_INT 1
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 0
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 1
61825: NEG
61826: PUSH
61827: LD_INT 0
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 1
61836: NEG
61837: PUSH
61838: LD_INT 1
61840: NEG
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61855: LD_ADDR_VAR 0 60
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 1
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: LD_INT 1
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 1
61913: NEG
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: NEG
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61943: LD_ADDR_VAR 0 61
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 0
61960: PUSH
61961: LD_INT 1
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 1
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: LD_INT 1
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: LD_INT 0
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 1
62012: NEG
62013: PUSH
62014: LD_INT 1
62016: NEG
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62031: LD_ADDR_VAR 0 62
62035: PUSH
62036: LD_INT 0
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 1
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 1
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: NEG
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 1
62100: NEG
62101: PUSH
62102: LD_INT 1
62104: NEG
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62119: LD_ADDR_VAR 0 63
62123: PUSH
62124: LD_INT 0
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 1
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 0
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 1
62188: NEG
62189: PUSH
62190: LD_INT 1
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62207: LD_ADDR_VAR 0 64
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 1
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: LD_INT 1
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: NEG
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: LD_INT 1
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: ST_TO_ADDR
// end ; 1 :
62295: GO 68192
62297: LD_INT 1
62299: DOUBLE
62300: EQUAL
62301: IFTRUE 62305
62303: GO 64928
62305: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62306: LD_ADDR_VAR 0 11
62310: PUSH
62311: LD_INT 1
62313: NEG
62314: PUSH
62315: LD_INT 3
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: LD_INT 3
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 1
62336: PUSH
62337: LD_INT 2
62339: NEG
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: LIST
62349: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62350: LD_ADDR_VAR 0 12
62354: PUSH
62355: LD_INT 2
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 3
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 3
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: LIST
62390: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62391: LD_ADDR_VAR 0 13
62395: PUSH
62396: LD_INT 3
62398: PUSH
62399: LD_INT 2
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 3
62408: PUSH
62409: LD_INT 3
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 2
62418: PUSH
62419: LD_INT 3
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: LIST
62430: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62431: LD_ADDR_VAR 0 14
62435: PUSH
62436: LD_INT 1
62438: PUSH
62439: LD_INT 3
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 0
62448: PUSH
62449: LD_INT 3
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 1
62458: NEG
62459: PUSH
62460: LD_INT 2
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: LIST
62471: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62472: LD_ADDR_VAR 0 15
62476: PUSH
62477: LD_INT 2
62479: NEG
62480: PUSH
62481: LD_INT 1
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 3
62490: NEG
62491: PUSH
62492: LD_INT 0
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 3
62501: NEG
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: LIST
62515: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62516: LD_ADDR_VAR 0 16
62520: PUSH
62521: LD_INT 2
62523: NEG
62524: PUSH
62525: LD_INT 3
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 3
62535: NEG
62536: PUSH
62537: LD_INT 2
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 3
62547: NEG
62548: PUSH
62549: LD_INT 3
62551: NEG
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: LIST
62561: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62562: LD_ADDR_VAR 0 17
62566: PUSH
62567: LD_INT 1
62569: NEG
62570: PUSH
62571: LD_INT 3
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 0
62581: PUSH
62582: LD_INT 3
62584: NEG
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: LD_INT 2
62595: NEG
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: LIST
62605: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62606: LD_ADDR_VAR 0 18
62610: PUSH
62611: LD_INT 2
62613: PUSH
62614: LD_INT 1
62616: NEG
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 3
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 3
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: LIST
62646: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62647: LD_ADDR_VAR 0 19
62651: PUSH
62652: LD_INT 3
62654: PUSH
62655: LD_INT 2
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 3
62664: PUSH
62665: LD_INT 3
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 2
62674: PUSH
62675: LD_INT 3
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: LIST
62686: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62687: LD_ADDR_VAR 0 20
62691: PUSH
62692: LD_INT 1
62694: PUSH
62695: LD_INT 3
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: LD_INT 3
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 1
62714: NEG
62715: PUSH
62716: LD_INT 2
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: LIST
62727: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62728: LD_ADDR_VAR 0 21
62732: PUSH
62733: LD_INT 2
62735: NEG
62736: PUSH
62737: LD_INT 1
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 3
62746: NEG
62747: PUSH
62748: LD_INT 0
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 3
62757: NEG
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: LIST
62771: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62772: LD_ADDR_VAR 0 22
62776: PUSH
62777: LD_INT 2
62779: NEG
62780: PUSH
62781: LD_INT 3
62783: NEG
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 3
62791: NEG
62792: PUSH
62793: LD_INT 2
62795: NEG
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 3
62803: NEG
62804: PUSH
62805: LD_INT 3
62807: NEG
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: LIST
62817: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62818: LD_ADDR_VAR 0 23
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: LD_INT 3
62828: NEG
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 1
62836: NEG
62837: PUSH
62838: LD_INT 4
62840: NEG
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 1
62848: PUSH
62849: LD_INT 3
62851: NEG
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: LIST
62861: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62862: LD_ADDR_VAR 0 24
62866: PUSH
62867: LD_INT 3
62869: PUSH
62870: LD_INT 0
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 3
62879: PUSH
62880: LD_INT 1
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 4
62890: PUSH
62891: LD_INT 1
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: LIST
62902: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62903: LD_ADDR_VAR 0 25
62907: PUSH
62908: LD_INT 3
62910: PUSH
62911: LD_INT 3
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 4
62920: PUSH
62921: LD_INT 3
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 3
62930: PUSH
62931: LD_INT 4
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: LIST
62942: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62943: LD_ADDR_VAR 0 26
62947: PUSH
62948: LD_INT 0
62950: PUSH
62951: LD_INT 3
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: PUSH
62961: LD_INT 4
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 1
62970: NEG
62971: PUSH
62972: LD_INT 3
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: LIST
62983: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62984: LD_ADDR_VAR 0 27
62988: PUSH
62989: LD_INT 3
62991: NEG
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 3
63002: NEG
63003: PUSH
63004: LD_INT 1
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 4
63013: NEG
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: LIST
63027: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63028: LD_ADDR_VAR 0 28
63032: PUSH
63033: LD_INT 3
63035: NEG
63036: PUSH
63037: LD_INT 3
63039: NEG
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 3
63047: NEG
63048: PUSH
63049: LD_INT 4
63051: NEG
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 4
63059: NEG
63060: PUSH
63061: LD_INT 3
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: LIST
63073: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63074: LD_ADDR_VAR 0 29
63078: PUSH
63079: LD_INT 1
63081: NEG
63082: PUSH
63083: LD_INT 3
63085: NEG
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 0
63093: PUSH
63094: LD_INT 3
63096: NEG
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 1
63104: PUSH
63105: LD_INT 2
63107: NEG
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: LD_INT 4
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: LD_INT 4
63130: NEG
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: PUSH
63139: LD_INT 3
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: NEG
63150: PUSH
63151: LD_INT 5
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: LD_INT 5
63164: NEG
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 1
63172: PUSH
63173: LD_INT 4
63175: NEG
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 1
63183: NEG
63184: PUSH
63185: LD_INT 6
63187: NEG
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 0
63195: PUSH
63196: LD_INT 6
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 1
63206: PUSH
63207: LD_INT 5
63209: NEG
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63229: LD_ADDR_VAR 0 30
63233: PUSH
63234: LD_INT 2
63236: PUSH
63237: LD_INT 1
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 3
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 3
63257: PUSH
63258: LD_INT 1
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 3
63267: PUSH
63268: LD_INT 1
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 4
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 4
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 4
63298: PUSH
63299: LD_INT 1
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 5
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 5
63319: PUSH
63320: LD_INT 1
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 5
63329: PUSH
63330: LD_INT 1
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 6
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 6
63350: PUSH
63351: LD_INT 1
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63372: LD_ADDR_VAR 0 31
63376: PUSH
63377: LD_INT 3
63379: PUSH
63380: LD_INT 2
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 3
63389: PUSH
63390: LD_INT 3
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 2
63399: PUSH
63400: LD_INT 3
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 4
63409: PUSH
63410: LD_INT 3
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 4
63419: PUSH
63420: LD_INT 4
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 3
63429: PUSH
63430: LD_INT 4
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 5
63439: PUSH
63440: LD_INT 4
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 5
63449: PUSH
63450: LD_INT 5
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 4
63459: PUSH
63460: LD_INT 5
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 6
63469: PUSH
63470: LD_INT 5
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 6
63479: PUSH
63480: LD_INT 6
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 5
63489: PUSH
63490: LD_INT 6
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63511: LD_ADDR_VAR 0 32
63515: PUSH
63516: LD_INT 1
63518: PUSH
63519: LD_INT 3
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: LD_INT 3
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 1
63538: NEG
63539: PUSH
63540: LD_INT 2
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 1
63549: PUSH
63550: LD_INT 4
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: LD_INT 4
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 1
63569: NEG
63570: PUSH
63571: LD_INT 3
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 1
63580: PUSH
63581: LD_INT 5
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 0
63590: PUSH
63591: LD_INT 5
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 1
63600: NEG
63601: PUSH
63602: LD_INT 4
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 1
63611: PUSH
63612: LD_INT 6
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 0
63621: PUSH
63622: LD_INT 6
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 1
63631: NEG
63632: PUSH
63633: LD_INT 5
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63654: LD_ADDR_VAR 0 33
63658: PUSH
63659: LD_INT 2
63661: NEG
63662: PUSH
63663: LD_INT 1
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 3
63672: NEG
63673: PUSH
63674: LD_INT 0
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 3
63683: NEG
63684: PUSH
63685: LD_INT 1
63687: NEG
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 3
63695: NEG
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 4
63706: NEG
63707: PUSH
63708: LD_INT 0
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 4
63717: NEG
63718: PUSH
63719: LD_INT 1
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 4
63729: NEG
63730: PUSH
63731: LD_INT 1
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 5
63740: NEG
63741: PUSH
63742: LD_INT 0
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 5
63751: NEG
63752: PUSH
63753: LD_INT 1
63755: NEG
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 5
63763: NEG
63764: PUSH
63765: LD_INT 1
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 6
63774: NEG
63775: PUSH
63776: LD_INT 0
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 6
63785: NEG
63786: PUSH
63787: LD_INT 1
63789: NEG
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63809: LD_ADDR_VAR 0 34
63813: PUSH
63814: LD_INT 2
63816: NEG
63817: PUSH
63818: LD_INT 3
63820: NEG
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 3
63828: NEG
63829: PUSH
63830: LD_INT 2
63832: NEG
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 3
63840: NEG
63841: PUSH
63842: LD_INT 3
63844: NEG
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 3
63852: NEG
63853: PUSH
63854: LD_INT 4
63856: NEG
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 4
63864: NEG
63865: PUSH
63866: LD_INT 3
63868: NEG
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 4
63876: NEG
63877: PUSH
63878: LD_INT 4
63880: NEG
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 4
63888: NEG
63889: PUSH
63890: LD_INT 5
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 5
63900: NEG
63901: PUSH
63902: LD_INT 4
63904: NEG
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 5
63912: NEG
63913: PUSH
63914: LD_INT 5
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 5
63924: NEG
63925: PUSH
63926: LD_INT 6
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 6
63936: NEG
63937: PUSH
63938: LD_INT 5
63940: NEG
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 6
63948: NEG
63949: PUSH
63950: LD_INT 6
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63972: LD_ADDR_VAR 0 41
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: LD_INT 2
63982: NEG
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 1
63990: NEG
63991: PUSH
63992: LD_INT 3
63994: NEG
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 1
64002: PUSH
64003: LD_INT 2
64005: NEG
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: LIST
64015: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64016: LD_ADDR_VAR 0 42
64020: PUSH
64021: LD_INT 2
64023: PUSH
64024: LD_INT 0
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 2
64033: PUSH
64034: LD_INT 1
64036: NEG
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 3
64044: PUSH
64045: LD_INT 1
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: LIST
64056: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64057: LD_ADDR_VAR 0 43
64061: PUSH
64062: LD_INT 2
64064: PUSH
64065: LD_INT 2
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 3
64074: PUSH
64075: LD_INT 2
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 2
64084: PUSH
64085: LD_INT 3
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: LIST
64096: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64097: LD_ADDR_VAR 0 44
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: LD_INT 2
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 1
64114: PUSH
64115: LD_INT 3
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 1
64124: NEG
64125: PUSH
64126: LD_INT 2
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: LIST
64137: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64138: LD_ADDR_VAR 0 45
64142: PUSH
64143: LD_INT 2
64145: NEG
64146: PUSH
64147: LD_INT 0
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 2
64156: NEG
64157: PUSH
64158: LD_INT 1
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 3
64167: NEG
64168: PUSH
64169: LD_INT 1
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: LIST
64181: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64182: LD_ADDR_VAR 0 46
64186: PUSH
64187: LD_INT 2
64189: NEG
64190: PUSH
64191: LD_INT 2
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 2
64201: NEG
64202: PUSH
64203: LD_INT 3
64205: NEG
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 3
64213: NEG
64214: PUSH
64215: LD_INT 2
64217: NEG
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: LIST
64227: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64228: LD_ADDR_VAR 0 47
64232: PUSH
64233: LD_INT 2
64235: NEG
64236: PUSH
64237: LD_INT 3
64239: NEG
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 1
64247: NEG
64248: PUSH
64249: LD_INT 3
64251: NEG
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64261: LD_ADDR_VAR 0 48
64265: PUSH
64266: LD_INT 1
64268: PUSH
64269: LD_INT 2
64271: NEG
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 2
64279: PUSH
64280: LD_INT 1
64282: NEG
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64292: LD_ADDR_VAR 0 49
64296: PUSH
64297: LD_INT 3
64299: PUSH
64300: LD_INT 1
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 3
64309: PUSH
64310: LD_INT 2
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64321: LD_ADDR_VAR 0 50
64325: PUSH
64326: LD_INT 2
64328: PUSH
64329: LD_INT 3
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 1
64338: PUSH
64339: LD_INT 3
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64350: LD_ADDR_VAR 0 51
64354: PUSH
64355: LD_INT 1
64357: NEG
64358: PUSH
64359: LD_INT 2
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 2
64368: NEG
64369: PUSH
64370: LD_INT 1
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64381: LD_ADDR_VAR 0 52
64385: PUSH
64386: LD_INT 3
64388: NEG
64389: PUSH
64390: LD_INT 1
64392: NEG
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 3
64400: NEG
64401: PUSH
64402: LD_INT 2
64404: NEG
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64414: LD_ADDR_VAR 0 53
64418: PUSH
64419: LD_INT 1
64421: NEG
64422: PUSH
64423: LD_INT 3
64425: NEG
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 0
64433: PUSH
64434: LD_INT 3
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 1
64444: PUSH
64445: LD_INT 2
64447: NEG
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: LIST
64457: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64458: LD_ADDR_VAR 0 54
64462: PUSH
64463: LD_INT 2
64465: PUSH
64466: LD_INT 1
64468: NEG
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 3
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 3
64486: PUSH
64487: LD_INT 1
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: LIST
64498: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64499: LD_ADDR_VAR 0 55
64503: PUSH
64504: LD_INT 3
64506: PUSH
64507: LD_INT 2
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 3
64516: PUSH
64517: LD_INT 3
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 2
64526: PUSH
64527: LD_INT 3
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: LIST
64538: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64539: LD_ADDR_VAR 0 56
64543: PUSH
64544: LD_INT 1
64546: PUSH
64547: LD_INT 3
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 0
64556: PUSH
64557: LD_INT 3
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 1
64566: NEG
64567: PUSH
64568: LD_INT 2
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: LIST
64579: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64580: LD_ADDR_VAR 0 57
64584: PUSH
64585: LD_INT 2
64587: NEG
64588: PUSH
64589: LD_INT 1
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 3
64598: NEG
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 3
64609: NEG
64610: PUSH
64611: LD_INT 1
64613: NEG
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: LIST
64623: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64624: LD_ADDR_VAR 0 58
64628: PUSH
64629: LD_INT 2
64631: NEG
64632: PUSH
64633: LD_INT 3
64635: NEG
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 3
64643: NEG
64644: PUSH
64645: LD_INT 2
64647: NEG
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 3
64655: NEG
64656: PUSH
64657: LD_INT 3
64659: NEG
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: LIST
64669: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64670: LD_ADDR_VAR 0 59
64674: PUSH
64675: LD_INT 1
64677: NEG
64678: PUSH
64679: LD_INT 2
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: LD_INT 2
64692: NEG
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 1
64700: PUSH
64701: LD_INT 1
64703: NEG
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: LIST
64713: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64714: LD_ADDR_VAR 0 60
64718: PUSH
64719: LD_INT 1
64721: PUSH
64722: LD_INT 1
64724: NEG
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 2
64732: PUSH
64733: LD_INT 0
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 2
64742: PUSH
64743: LD_INT 1
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: LIST
64754: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64755: LD_ADDR_VAR 0 61
64759: PUSH
64760: LD_INT 2
64762: PUSH
64763: LD_INT 1
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 2
64772: PUSH
64773: LD_INT 2
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 1
64782: PUSH
64783: LD_INT 2
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: LIST
64794: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64795: LD_ADDR_VAR 0 62
64799: PUSH
64800: LD_INT 1
64802: PUSH
64803: LD_INT 2
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 0
64812: PUSH
64813: LD_INT 2
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 1
64822: NEG
64823: PUSH
64824: LD_INT 1
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: LIST
64835: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64836: LD_ADDR_VAR 0 63
64840: PUSH
64841: LD_INT 1
64843: NEG
64844: PUSH
64845: LD_INT 1
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 2
64854: NEG
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 2
64865: NEG
64866: PUSH
64867: LD_INT 1
64869: NEG
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: LIST
64879: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64880: LD_ADDR_VAR 0 64
64884: PUSH
64885: LD_INT 1
64887: NEG
64888: PUSH
64889: LD_INT 2
64891: NEG
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 2
64899: NEG
64900: PUSH
64901: LD_INT 1
64903: NEG
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 2
64911: NEG
64912: PUSH
64913: LD_INT 2
64915: NEG
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: LIST
64925: ST_TO_ADDR
// end ; 2 :
64926: GO 68192
64928: LD_INT 2
64930: DOUBLE
64931: EQUAL
64932: IFTRUE 64936
64934: GO 68191
64936: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64937: LD_ADDR_VAR 0 29
64941: PUSH
64942: LD_INT 4
64944: PUSH
64945: LD_INT 0
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 4
64954: PUSH
64955: LD_INT 1
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 5
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 5
64975: PUSH
64976: LD_INT 1
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 4
64985: PUSH
64986: LD_INT 1
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 3
64995: PUSH
64996: LD_INT 0
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 3
65005: PUSH
65006: LD_INT 1
65008: NEG
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 3
65016: PUSH
65017: LD_INT 2
65019: NEG
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 5
65027: PUSH
65028: LD_INT 2
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 3
65037: PUSH
65038: LD_INT 3
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 3
65047: PUSH
65048: LD_INT 2
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 4
65057: PUSH
65058: LD_INT 3
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 4
65067: PUSH
65068: LD_INT 4
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 3
65077: PUSH
65078: LD_INT 4
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 2
65087: PUSH
65088: LD_INT 3
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 2
65097: PUSH
65098: LD_INT 2
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 4
65107: PUSH
65108: LD_INT 2
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 2
65117: PUSH
65118: LD_INT 4
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: LD_INT 4
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 0
65137: PUSH
65138: LD_INT 3
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 1
65147: PUSH
65148: LD_INT 4
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 1
65157: PUSH
65158: LD_INT 5
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 0
65167: PUSH
65168: LD_INT 5
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 1
65177: NEG
65178: PUSH
65179: LD_INT 4
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 1
65188: NEG
65189: PUSH
65190: LD_INT 3
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 2
65199: PUSH
65200: LD_INT 5
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 2
65209: NEG
65210: PUSH
65211: LD_INT 3
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 3
65220: NEG
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 3
65231: NEG
65232: PUSH
65233: LD_INT 1
65235: NEG
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 2
65243: NEG
65244: PUSH
65245: LD_INT 0
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 2
65254: NEG
65255: PUSH
65256: LD_INT 1
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 3
65265: NEG
65266: PUSH
65267: LD_INT 1
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 4
65276: NEG
65277: PUSH
65278: LD_INT 0
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 4
65287: NEG
65288: PUSH
65289: LD_INT 1
65291: NEG
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 4
65299: NEG
65300: PUSH
65301: LD_INT 2
65303: NEG
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 2
65311: NEG
65312: PUSH
65313: LD_INT 2
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 4
65322: NEG
65323: PUSH
65324: LD_INT 4
65326: NEG
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 4
65334: NEG
65335: PUSH
65336: LD_INT 5
65338: NEG
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 3
65346: NEG
65347: PUSH
65348: LD_INT 4
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 3
65358: NEG
65359: PUSH
65360: LD_INT 3
65362: NEG
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 4
65370: NEG
65371: PUSH
65372: LD_INT 3
65374: NEG
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 5
65382: NEG
65383: PUSH
65384: LD_INT 4
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 5
65394: NEG
65395: PUSH
65396: LD_INT 5
65398: NEG
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 3
65406: NEG
65407: PUSH
65408: LD_INT 5
65410: NEG
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 5
65418: NEG
65419: PUSH
65420: LD_INT 3
65422: NEG
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65475: LD_ADDR_VAR 0 30
65479: PUSH
65480: LD_INT 4
65482: PUSH
65483: LD_INT 4
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 4
65492: PUSH
65493: LD_INT 3
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 5
65502: PUSH
65503: LD_INT 4
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 5
65512: PUSH
65513: LD_INT 5
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 4
65522: PUSH
65523: LD_INT 5
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 3
65532: PUSH
65533: LD_INT 4
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 3
65542: PUSH
65543: LD_INT 3
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 5
65552: PUSH
65553: LD_INT 3
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 3
65562: PUSH
65563: LD_INT 5
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 0
65572: PUSH
65573: LD_INT 3
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 0
65582: PUSH
65583: LD_INT 2
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 1
65592: PUSH
65593: LD_INT 3
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 1
65602: PUSH
65603: LD_INT 4
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: LD_INT 4
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 1
65622: NEG
65623: PUSH
65624: LD_INT 3
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 1
65633: NEG
65634: PUSH
65635: LD_INT 2
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 2
65644: PUSH
65645: LD_INT 4
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 2
65654: NEG
65655: PUSH
65656: LD_INT 2
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 4
65665: NEG
65666: PUSH
65667: LD_INT 0
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 4
65676: NEG
65677: PUSH
65678: LD_INT 1
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 3
65688: NEG
65689: PUSH
65690: LD_INT 0
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 3
65699: NEG
65700: PUSH
65701: LD_INT 1
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 4
65710: NEG
65711: PUSH
65712: LD_INT 1
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 5
65721: NEG
65722: PUSH
65723: LD_INT 0
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 5
65732: NEG
65733: PUSH
65734: LD_INT 1
65736: NEG
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 5
65744: NEG
65745: PUSH
65746: LD_INT 2
65748: NEG
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 3
65756: NEG
65757: PUSH
65758: LD_INT 2
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 3
65767: NEG
65768: PUSH
65769: LD_INT 3
65771: NEG
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 3
65779: NEG
65780: PUSH
65781: LD_INT 4
65783: NEG
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 2
65791: NEG
65792: PUSH
65793: LD_INT 3
65795: NEG
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 2
65803: NEG
65804: PUSH
65805: LD_INT 2
65807: NEG
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 3
65815: NEG
65816: PUSH
65817: LD_INT 2
65819: NEG
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 4
65827: NEG
65828: PUSH
65829: LD_INT 3
65831: NEG
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 4
65839: NEG
65840: PUSH
65841: LD_INT 4
65843: NEG
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 2
65851: NEG
65852: PUSH
65853: LD_INT 4
65855: NEG
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 4
65863: NEG
65864: PUSH
65865: LD_INT 2
65867: NEG
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: LD_INT 4
65878: NEG
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 0
65886: PUSH
65887: LD_INT 5
65889: NEG
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 1
65897: PUSH
65898: LD_INT 4
65900: NEG
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 1
65908: PUSH
65909: LD_INT 3
65911: NEG
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 0
65919: PUSH
65920: LD_INT 3
65922: NEG
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 1
65930: NEG
65931: PUSH
65932: LD_INT 4
65934: NEG
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 1
65942: NEG
65943: PUSH
65944: LD_INT 5
65946: NEG
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 2
65954: PUSH
65955: LD_INT 3
65957: NEG
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 2
65965: NEG
65966: PUSH
65967: LD_INT 5
65969: NEG
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66022: LD_ADDR_VAR 0 31
66026: PUSH
66027: LD_INT 0
66029: PUSH
66030: LD_INT 4
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 0
66039: PUSH
66040: LD_INT 3
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 1
66049: PUSH
66050: LD_INT 4
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 1
66059: PUSH
66060: LD_INT 5
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 0
66069: PUSH
66070: LD_INT 5
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 1
66079: NEG
66080: PUSH
66081: LD_INT 4
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 1
66090: NEG
66091: PUSH
66092: LD_INT 3
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 2
66101: PUSH
66102: LD_INT 5
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 2
66111: NEG
66112: PUSH
66113: LD_INT 3
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 3
66122: NEG
66123: PUSH
66124: LD_INT 0
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 3
66133: NEG
66134: PUSH
66135: LD_INT 1
66137: NEG
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 2
66145: NEG
66146: PUSH
66147: LD_INT 0
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 2
66156: NEG
66157: PUSH
66158: LD_INT 1
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 3
66167: NEG
66168: PUSH
66169: LD_INT 1
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 4
66178: NEG
66179: PUSH
66180: LD_INT 0
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 4
66189: NEG
66190: PUSH
66191: LD_INT 1
66193: NEG
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 4
66201: NEG
66202: PUSH
66203: LD_INT 2
66205: NEG
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 2
66213: NEG
66214: PUSH
66215: LD_INT 2
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 4
66224: NEG
66225: PUSH
66226: LD_INT 4
66228: NEG
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 4
66236: NEG
66237: PUSH
66238: LD_INT 5
66240: NEG
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 3
66248: NEG
66249: PUSH
66250: LD_INT 4
66252: NEG
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 3
66260: NEG
66261: PUSH
66262: LD_INT 3
66264: NEG
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 4
66272: NEG
66273: PUSH
66274: LD_INT 3
66276: NEG
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 5
66284: NEG
66285: PUSH
66286: LD_INT 4
66288: NEG
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 5
66296: NEG
66297: PUSH
66298: LD_INT 5
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 3
66308: NEG
66309: PUSH
66310: LD_INT 5
66312: NEG
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 5
66320: NEG
66321: PUSH
66322: LD_INT 3
66324: NEG
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 0
66332: PUSH
66333: LD_INT 3
66335: NEG
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 0
66343: PUSH
66344: LD_INT 4
66346: NEG
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 1
66354: PUSH
66355: LD_INT 3
66357: NEG
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 1
66365: PUSH
66366: LD_INT 2
66368: NEG
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 0
66376: PUSH
66377: LD_INT 2
66379: NEG
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 1
66387: NEG
66388: PUSH
66389: LD_INT 3
66391: NEG
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 1
66399: NEG
66400: PUSH
66401: LD_INT 4
66403: NEG
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 2
66411: PUSH
66412: LD_INT 2
66414: NEG
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 2
66422: NEG
66423: PUSH
66424: LD_INT 4
66426: NEG
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 4
66434: PUSH
66435: LD_INT 0
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 4
66444: PUSH
66445: LD_INT 1
66447: NEG
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 5
66455: PUSH
66456: LD_INT 0
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 5
66465: PUSH
66466: LD_INT 1
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 4
66475: PUSH
66476: LD_INT 1
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 3
66485: PUSH
66486: LD_INT 0
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 3
66495: PUSH
66496: LD_INT 1
66498: NEG
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 3
66506: PUSH
66507: LD_INT 2
66509: NEG
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 5
66517: PUSH
66518: LD_INT 2
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66572: LD_ADDR_VAR 0 32
66576: PUSH
66577: LD_INT 4
66579: NEG
66580: PUSH
66581: LD_INT 0
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 4
66590: NEG
66591: PUSH
66592: LD_INT 1
66594: NEG
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 3
66602: NEG
66603: PUSH
66604: LD_INT 0
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 3
66613: NEG
66614: PUSH
66615: LD_INT 1
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 4
66624: NEG
66625: PUSH
66626: LD_INT 1
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 5
66635: NEG
66636: PUSH
66637: LD_INT 0
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 5
66646: NEG
66647: PUSH
66648: LD_INT 1
66650: NEG
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 5
66658: NEG
66659: PUSH
66660: LD_INT 2
66662: NEG
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 3
66670: NEG
66671: PUSH
66672: LD_INT 2
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 3
66681: NEG
66682: PUSH
66683: LD_INT 3
66685: NEG
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 3
66693: NEG
66694: PUSH
66695: LD_INT 4
66697: NEG
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 2
66705: NEG
66706: PUSH
66707: LD_INT 3
66709: NEG
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 2
66717: NEG
66718: PUSH
66719: LD_INT 2
66721: NEG
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 3
66729: NEG
66730: PUSH
66731: LD_INT 2
66733: NEG
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 4
66741: NEG
66742: PUSH
66743: LD_INT 3
66745: NEG
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 4
66753: NEG
66754: PUSH
66755: LD_INT 4
66757: NEG
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 2
66765: NEG
66766: PUSH
66767: LD_INT 4
66769: NEG
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 4
66777: NEG
66778: PUSH
66779: LD_INT 2
66781: NEG
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 0
66789: PUSH
66790: LD_INT 4
66792: NEG
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 0
66800: PUSH
66801: LD_INT 5
66803: NEG
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 1
66811: PUSH
66812: LD_INT 4
66814: NEG
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 1
66822: PUSH
66823: LD_INT 3
66825: NEG
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 0
66833: PUSH
66834: LD_INT 3
66836: NEG
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 1
66844: NEG
66845: PUSH
66846: LD_INT 4
66848: NEG
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 1
66856: NEG
66857: PUSH
66858: LD_INT 5
66860: NEG
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 2
66868: PUSH
66869: LD_INT 3
66871: NEG
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 2
66879: NEG
66880: PUSH
66881: LD_INT 5
66883: NEG
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 3
66891: PUSH
66892: LD_INT 0
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 3
66901: PUSH
66902: LD_INT 1
66904: NEG
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 4
66912: PUSH
66913: LD_INT 0
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 4
66922: PUSH
66923: LD_INT 1
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 3
66932: PUSH
66933: LD_INT 1
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 2
66942: PUSH
66943: LD_INT 0
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 2
66952: PUSH
66953: LD_INT 1
66955: NEG
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 2
66963: PUSH
66964: LD_INT 2
66966: NEG
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 4
66974: PUSH
66975: LD_INT 2
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 4
66984: PUSH
66985: LD_INT 4
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 4
66994: PUSH
66995: LD_INT 3
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 5
67004: PUSH
67005: LD_INT 4
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 5
67014: PUSH
67015: LD_INT 5
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 4
67024: PUSH
67025: LD_INT 5
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 3
67034: PUSH
67035: LD_INT 4
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 3
67044: PUSH
67045: LD_INT 3
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 5
67054: PUSH
67055: LD_INT 3
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 3
67064: PUSH
67065: LD_INT 5
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67119: LD_ADDR_VAR 0 33
67123: PUSH
67124: LD_INT 4
67126: NEG
67127: PUSH
67128: LD_INT 4
67130: NEG
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 4
67138: NEG
67139: PUSH
67140: LD_INT 5
67142: NEG
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 3
67150: NEG
67151: PUSH
67152: LD_INT 4
67154: NEG
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 3
67162: NEG
67163: PUSH
67164: LD_INT 3
67166: NEG
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 4
67174: NEG
67175: PUSH
67176: LD_INT 3
67178: NEG
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 5
67186: NEG
67187: PUSH
67188: LD_INT 4
67190: NEG
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: PUSH
67196: LD_INT 5
67198: NEG
67199: PUSH
67200: LD_INT 5
67202: NEG
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 3
67210: NEG
67211: PUSH
67212: LD_INT 5
67214: NEG
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 5
67222: NEG
67223: PUSH
67224: LD_INT 3
67226: NEG
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 0
67234: PUSH
67235: LD_INT 3
67237: NEG
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 0
67245: PUSH
67246: LD_INT 4
67248: NEG
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 1
67256: PUSH
67257: LD_INT 3
67259: NEG
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 1
67267: PUSH
67268: LD_INT 2
67270: NEG
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 0
67278: PUSH
67279: LD_INT 2
67281: NEG
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 1
67289: NEG
67290: PUSH
67291: LD_INT 3
67293: NEG
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 1
67301: NEG
67302: PUSH
67303: LD_INT 4
67305: NEG
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 2
67313: PUSH
67314: LD_INT 2
67316: NEG
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 2
67324: NEG
67325: PUSH
67326: LD_INT 4
67328: NEG
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 4
67336: PUSH
67337: LD_INT 0
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 4
67346: PUSH
67347: LD_INT 1
67349: NEG
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 5
67357: PUSH
67358: LD_INT 0
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 5
67367: PUSH
67368: LD_INT 1
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 4
67377: PUSH
67378: LD_INT 1
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 3
67387: PUSH
67388: LD_INT 0
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 3
67397: PUSH
67398: LD_INT 1
67400: NEG
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 3
67408: PUSH
67409: LD_INT 2
67411: NEG
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 5
67419: PUSH
67420: LD_INT 2
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 3
67429: PUSH
67430: LD_INT 3
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 3
67439: PUSH
67440: LD_INT 2
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 4
67449: PUSH
67450: LD_INT 3
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 4
67459: PUSH
67460: LD_INT 4
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 3
67469: PUSH
67470: LD_INT 4
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 2
67479: PUSH
67480: LD_INT 3
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 2
67489: PUSH
67490: LD_INT 2
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 4
67499: PUSH
67500: LD_INT 2
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 2
67509: PUSH
67510: LD_INT 4
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 0
67519: PUSH
67520: LD_INT 4
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 0
67529: PUSH
67530: LD_INT 3
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 1
67539: PUSH
67540: LD_INT 4
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 1
67549: PUSH
67550: LD_INT 5
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 0
67559: PUSH
67560: LD_INT 5
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 1
67569: NEG
67570: PUSH
67571: LD_INT 4
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 1
67580: NEG
67581: PUSH
67582: LD_INT 3
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 2
67591: PUSH
67592: LD_INT 5
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 2
67601: NEG
67602: PUSH
67603: LD_INT 3
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67657: LD_ADDR_VAR 0 34
67661: PUSH
67662: LD_INT 0
67664: PUSH
67665: LD_INT 4
67667: NEG
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 0
67675: PUSH
67676: LD_INT 5
67678: NEG
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 1
67686: PUSH
67687: LD_INT 4
67689: NEG
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 1
67697: PUSH
67698: LD_INT 3
67700: NEG
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 0
67708: PUSH
67709: LD_INT 3
67711: NEG
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 1
67719: NEG
67720: PUSH
67721: LD_INT 4
67723: NEG
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 1
67731: NEG
67732: PUSH
67733: LD_INT 5
67735: NEG
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 2
67743: PUSH
67744: LD_INT 3
67746: NEG
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 2
67754: NEG
67755: PUSH
67756: LD_INT 5
67758: NEG
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 3
67766: PUSH
67767: LD_INT 0
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 3
67776: PUSH
67777: LD_INT 1
67779: NEG
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 4
67787: PUSH
67788: LD_INT 0
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 4
67797: PUSH
67798: LD_INT 1
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 3
67807: PUSH
67808: LD_INT 1
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 2
67817: PUSH
67818: LD_INT 0
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 2
67827: PUSH
67828: LD_INT 1
67830: NEG
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 2
67838: PUSH
67839: LD_INT 2
67841: NEG
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 4
67849: PUSH
67850: LD_INT 2
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 4
67859: PUSH
67860: LD_INT 4
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 4
67869: PUSH
67870: LD_INT 3
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 5
67879: PUSH
67880: LD_INT 4
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 5
67889: PUSH
67890: LD_INT 5
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 4
67899: PUSH
67900: LD_INT 5
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 3
67909: PUSH
67910: LD_INT 4
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 3
67919: PUSH
67920: LD_INT 3
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 5
67929: PUSH
67930: LD_INT 3
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 3
67939: PUSH
67940: LD_INT 5
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 0
67949: PUSH
67950: LD_INT 3
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 0
67959: PUSH
67960: LD_INT 2
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 1
67969: PUSH
67970: LD_INT 3
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 1
67979: PUSH
67980: LD_INT 4
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 0
67989: PUSH
67990: LD_INT 4
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 1
67999: NEG
68000: PUSH
68001: LD_INT 3
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 1
68010: NEG
68011: PUSH
68012: LD_INT 2
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 2
68021: PUSH
68022: LD_INT 4
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 2
68031: NEG
68032: PUSH
68033: LD_INT 2
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 4
68042: NEG
68043: PUSH
68044: LD_INT 0
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 4
68053: NEG
68054: PUSH
68055: LD_INT 1
68057: NEG
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 3
68065: NEG
68066: PUSH
68067: LD_INT 0
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: LD_INT 3
68076: NEG
68077: PUSH
68078: LD_INT 1
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 4
68087: NEG
68088: PUSH
68089: LD_INT 1
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 5
68098: NEG
68099: PUSH
68100: LD_INT 0
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 5
68109: NEG
68110: PUSH
68111: LD_INT 1
68113: NEG
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 5
68121: NEG
68122: PUSH
68123: LD_INT 2
68125: NEG
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 3
68133: NEG
68134: PUSH
68135: LD_INT 2
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: ST_TO_ADDR
// end ; end ;
68189: GO 68192
68191: POP
// case btype of b_depot , b_warehouse :
68192: LD_VAR 0 1
68196: PUSH
68197: LD_INT 0
68199: DOUBLE
68200: EQUAL
68201: IFTRUE 68211
68203: LD_INT 1
68205: DOUBLE
68206: EQUAL
68207: IFTRUE 68211
68209: GO 68412
68211: POP
// case nation of nation_american :
68212: LD_VAR 0 5
68216: PUSH
68217: LD_INT 1
68219: DOUBLE
68220: EQUAL
68221: IFTRUE 68225
68223: GO 68281
68225: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68226: LD_ADDR_VAR 0 9
68230: PUSH
68231: LD_VAR 0 11
68235: PUSH
68236: LD_VAR 0 12
68240: PUSH
68241: LD_VAR 0 13
68245: PUSH
68246: LD_VAR 0 14
68250: PUSH
68251: LD_VAR 0 15
68255: PUSH
68256: LD_VAR 0 16
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: PUSH
68269: LD_VAR 0 4
68273: PUSH
68274: LD_INT 1
68276: PLUS
68277: ARRAY
68278: ST_TO_ADDR
68279: GO 68410
68281: LD_INT 2
68283: DOUBLE
68284: EQUAL
68285: IFTRUE 68289
68287: GO 68345
68289: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68290: LD_ADDR_VAR 0 9
68294: PUSH
68295: LD_VAR 0 17
68299: PUSH
68300: LD_VAR 0 18
68304: PUSH
68305: LD_VAR 0 19
68309: PUSH
68310: LD_VAR 0 20
68314: PUSH
68315: LD_VAR 0 21
68319: PUSH
68320: LD_VAR 0 22
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: PUSH
68333: LD_VAR 0 4
68337: PUSH
68338: LD_INT 1
68340: PLUS
68341: ARRAY
68342: ST_TO_ADDR
68343: GO 68410
68345: LD_INT 3
68347: DOUBLE
68348: EQUAL
68349: IFTRUE 68353
68351: GO 68409
68353: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68354: LD_ADDR_VAR 0 9
68358: PUSH
68359: LD_VAR 0 23
68363: PUSH
68364: LD_VAR 0 24
68368: PUSH
68369: LD_VAR 0 25
68373: PUSH
68374: LD_VAR 0 26
68378: PUSH
68379: LD_VAR 0 27
68383: PUSH
68384: LD_VAR 0 28
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: PUSH
68397: LD_VAR 0 4
68401: PUSH
68402: LD_INT 1
68404: PLUS
68405: ARRAY
68406: ST_TO_ADDR
68407: GO 68410
68409: POP
68410: GO 68965
68412: LD_INT 2
68414: DOUBLE
68415: EQUAL
68416: IFTRUE 68426
68418: LD_INT 3
68420: DOUBLE
68421: EQUAL
68422: IFTRUE 68426
68424: GO 68482
68426: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68427: LD_ADDR_VAR 0 9
68431: PUSH
68432: LD_VAR 0 29
68436: PUSH
68437: LD_VAR 0 30
68441: PUSH
68442: LD_VAR 0 31
68446: PUSH
68447: LD_VAR 0 32
68451: PUSH
68452: LD_VAR 0 33
68456: PUSH
68457: LD_VAR 0 34
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: PUSH
68470: LD_VAR 0 4
68474: PUSH
68475: LD_INT 1
68477: PLUS
68478: ARRAY
68479: ST_TO_ADDR
68480: GO 68965
68482: LD_INT 16
68484: DOUBLE
68485: EQUAL
68486: IFTRUE 68544
68488: LD_INT 17
68490: DOUBLE
68491: EQUAL
68492: IFTRUE 68544
68494: LD_INT 18
68496: DOUBLE
68497: EQUAL
68498: IFTRUE 68544
68500: LD_INT 19
68502: DOUBLE
68503: EQUAL
68504: IFTRUE 68544
68506: LD_INT 22
68508: DOUBLE
68509: EQUAL
68510: IFTRUE 68544
68512: LD_INT 20
68514: DOUBLE
68515: EQUAL
68516: IFTRUE 68544
68518: LD_INT 21
68520: DOUBLE
68521: EQUAL
68522: IFTRUE 68544
68524: LD_INT 23
68526: DOUBLE
68527: EQUAL
68528: IFTRUE 68544
68530: LD_INT 24
68532: DOUBLE
68533: EQUAL
68534: IFTRUE 68544
68536: LD_INT 25
68538: DOUBLE
68539: EQUAL
68540: IFTRUE 68544
68542: GO 68600
68544: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68545: LD_ADDR_VAR 0 9
68549: PUSH
68550: LD_VAR 0 35
68554: PUSH
68555: LD_VAR 0 36
68559: PUSH
68560: LD_VAR 0 37
68564: PUSH
68565: LD_VAR 0 38
68569: PUSH
68570: LD_VAR 0 39
68574: PUSH
68575: LD_VAR 0 40
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: PUSH
68588: LD_VAR 0 4
68592: PUSH
68593: LD_INT 1
68595: PLUS
68596: ARRAY
68597: ST_TO_ADDR
68598: GO 68965
68600: LD_INT 6
68602: DOUBLE
68603: EQUAL
68604: IFTRUE 68656
68606: LD_INT 7
68608: DOUBLE
68609: EQUAL
68610: IFTRUE 68656
68612: LD_INT 8
68614: DOUBLE
68615: EQUAL
68616: IFTRUE 68656
68618: LD_INT 13
68620: DOUBLE
68621: EQUAL
68622: IFTRUE 68656
68624: LD_INT 12
68626: DOUBLE
68627: EQUAL
68628: IFTRUE 68656
68630: LD_INT 15
68632: DOUBLE
68633: EQUAL
68634: IFTRUE 68656
68636: LD_INT 11
68638: DOUBLE
68639: EQUAL
68640: IFTRUE 68656
68642: LD_INT 14
68644: DOUBLE
68645: EQUAL
68646: IFTRUE 68656
68648: LD_INT 10
68650: DOUBLE
68651: EQUAL
68652: IFTRUE 68656
68654: GO 68712
68656: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68657: LD_ADDR_VAR 0 9
68661: PUSH
68662: LD_VAR 0 41
68666: PUSH
68667: LD_VAR 0 42
68671: PUSH
68672: LD_VAR 0 43
68676: PUSH
68677: LD_VAR 0 44
68681: PUSH
68682: LD_VAR 0 45
68686: PUSH
68687: LD_VAR 0 46
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: PUSH
68700: LD_VAR 0 4
68704: PUSH
68705: LD_INT 1
68707: PLUS
68708: ARRAY
68709: ST_TO_ADDR
68710: GO 68965
68712: LD_INT 36
68714: DOUBLE
68715: EQUAL
68716: IFTRUE 68720
68718: GO 68776
68720: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68721: LD_ADDR_VAR 0 9
68725: PUSH
68726: LD_VAR 0 47
68730: PUSH
68731: LD_VAR 0 48
68735: PUSH
68736: LD_VAR 0 49
68740: PUSH
68741: LD_VAR 0 50
68745: PUSH
68746: LD_VAR 0 51
68750: PUSH
68751: LD_VAR 0 52
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: PUSH
68764: LD_VAR 0 4
68768: PUSH
68769: LD_INT 1
68771: PLUS
68772: ARRAY
68773: ST_TO_ADDR
68774: GO 68965
68776: LD_INT 4
68778: DOUBLE
68779: EQUAL
68780: IFTRUE 68802
68782: LD_INT 5
68784: DOUBLE
68785: EQUAL
68786: IFTRUE 68802
68788: LD_INT 34
68790: DOUBLE
68791: EQUAL
68792: IFTRUE 68802
68794: LD_INT 37
68796: DOUBLE
68797: EQUAL
68798: IFTRUE 68802
68800: GO 68858
68802: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68803: LD_ADDR_VAR 0 9
68807: PUSH
68808: LD_VAR 0 53
68812: PUSH
68813: LD_VAR 0 54
68817: PUSH
68818: LD_VAR 0 55
68822: PUSH
68823: LD_VAR 0 56
68827: PUSH
68828: LD_VAR 0 57
68832: PUSH
68833: LD_VAR 0 58
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: PUSH
68846: LD_VAR 0 4
68850: PUSH
68851: LD_INT 1
68853: PLUS
68854: ARRAY
68855: ST_TO_ADDR
68856: GO 68965
68858: LD_INT 31
68860: DOUBLE
68861: EQUAL
68862: IFTRUE 68908
68864: LD_INT 32
68866: DOUBLE
68867: EQUAL
68868: IFTRUE 68908
68870: LD_INT 33
68872: DOUBLE
68873: EQUAL
68874: IFTRUE 68908
68876: LD_INT 27
68878: DOUBLE
68879: EQUAL
68880: IFTRUE 68908
68882: LD_INT 26
68884: DOUBLE
68885: EQUAL
68886: IFTRUE 68908
68888: LD_INT 28
68890: DOUBLE
68891: EQUAL
68892: IFTRUE 68908
68894: LD_INT 29
68896: DOUBLE
68897: EQUAL
68898: IFTRUE 68908
68900: LD_INT 30
68902: DOUBLE
68903: EQUAL
68904: IFTRUE 68908
68906: GO 68964
68908: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68909: LD_ADDR_VAR 0 9
68913: PUSH
68914: LD_VAR 0 59
68918: PUSH
68919: LD_VAR 0 60
68923: PUSH
68924: LD_VAR 0 61
68928: PUSH
68929: LD_VAR 0 62
68933: PUSH
68934: LD_VAR 0 63
68938: PUSH
68939: LD_VAR 0 64
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: PUSH
68952: LD_VAR 0 4
68956: PUSH
68957: LD_INT 1
68959: PLUS
68960: ARRAY
68961: ST_TO_ADDR
68962: GO 68965
68964: POP
// temp_list2 = [ ] ;
68965: LD_ADDR_VAR 0 10
68969: PUSH
68970: EMPTY
68971: ST_TO_ADDR
// for i in temp_list do
68972: LD_ADDR_VAR 0 8
68976: PUSH
68977: LD_VAR 0 9
68981: PUSH
68982: FOR_IN
68983: IFFALSE 69035
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68985: LD_ADDR_VAR 0 10
68989: PUSH
68990: LD_VAR 0 10
68994: PUSH
68995: LD_VAR 0 8
68999: PUSH
69000: LD_INT 1
69002: ARRAY
69003: PUSH
69004: LD_VAR 0 2
69008: PLUS
69009: PUSH
69010: LD_VAR 0 8
69014: PUSH
69015: LD_INT 2
69017: ARRAY
69018: PUSH
69019: LD_VAR 0 3
69023: PLUS
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: EMPTY
69030: LIST
69031: ADD
69032: ST_TO_ADDR
69033: GO 68982
69035: POP
69036: POP
// result = temp_list2 ;
69037: LD_ADDR_VAR 0 7
69041: PUSH
69042: LD_VAR 0 10
69046: ST_TO_ADDR
// end ;
69047: LD_VAR 0 7
69051: RET
// export function EnemyInRange ( unit , dist ) ; begin
69052: LD_INT 0
69054: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69055: LD_ADDR_VAR 0 3
69059: PUSH
69060: LD_VAR 0 1
69064: PPUSH
69065: CALL_OW 255
69069: PPUSH
69070: LD_VAR 0 1
69074: PPUSH
69075: CALL_OW 250
69079: PPUSH
69080: LD_VAR 0 1
69084: PPUSH
69085: CALL_OW 251
69089: PPUSH
69090: LD_VAR 0 2
69094: PPUSH
69095: CALL 42448 0 4
69099: PUSH
69100: LD_INT 4
69102: ARRAY
69103: ST_TO_ADDR
// end ;
69104: LD_VAR 0 3
69108: RET
// export function PlayerSeeMe ( unit ) ; begin
69109: LD_INT 0
69111: PPUSH
// result := See ( your_side , unit ) ;
69112: LD_ADDR_VAR 0 2
69116: PUSH
69117: LD_OWVAR 2
69121: PPUSH
69122: LD_VAR 0 1
69126: PPUSH
69127: CALL_OW 292
69131: ST_TO_ADDR
// end ;
69132: LD_VAR 0 2
69136: RET
// export function ReverseDir ( unit ) ; begin
69137: LD_INT 0
69139: PPUSH
// if not unit then
69140: LD_VAR 0 1
69144: NOT
69145: IFFALSE 69149
// exit ;
69147: GO 69172
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69149: LD_ADDR_VAR 0 2
69153: PUSH
69154: LD_VAR 0 1
69158: PPUSH
69159: CALL_OW 254
69163: PUSH
69164: LD_INT 3
69166: PLUS
69167: PUSH
69168: LD_INT 6
69170: MOD
69171: ST_TO_ADDR
// end ;
69172: LD_VAR 0 2
69176: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69177: LD_INT 0
69179: PPUSH
69180: PPUSH
69181: PPUSH
69182: PPUSH
69183: PPUSH
// if not hexes then
69184: LD_VAR 0 2
69188: NOT
69189: IFFALSE 69193
// exit ;
69191: GO 69341
// dist := 9999 ;
69193: LD_ADDR_VAR 0 5
69197: PUSH
69198: LD_INT 9999
69200: ST_TO_ADDR
// for i = 1 to hexes do
69201: LD_ADDR_VAR 0 4
69205: PUSH
69206: DOUBLE
69207: LD_INT 1
69209: DEC
69210: ST_TO_ADDR
69211: LD_VAR 0 2
69215: PUSH
69216: FOR_TO
69217: IFFALSE 69329
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69219: LD_VAR 0 1
69223: PPUSH
69224: LD_VAR 0 2
69228: PUSH
69229: LD_VAR 0 4
69233: ARRAY
69234: PUSH
69235: LD_INT 1
69237: ARRAY
69238: PPUSH
69239: LD_VAR 0 2
69243: PUSH
69244: LD_VAR 0 4
69248: ARRAY
69249: PUSH
69250: LD_INT 2
69252: ARRAY
69253: PPUSH
69254: CALL_OW 297
69258: PUSH
69259: LD_VAR 0 5
69263: LESS
69264: IFFALSE 69327
// begin hex := hexes [ i ] ;
69266: LD_ADDR_VAR 0 7
69270: PUSH
69271: LD_VAR 0 2
69275: PUSH
69276: LD_VAR 0 4
69280: ARRAY
69281: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69282: LD_ADDR_VAR 0 5
69286: PUSH
69287: LD_VAR 0 1
69291: PPUSH
69292: LD_VAR 0 2
69296: PUSH
69297: LD_VAR 0 4
69301: ARRAY
69302: PUSH
69303: LD_INT 1
69305: ARRAY
69306: PPUSH
69307: LD_VAR 0 2
69311: PUSH
69312: LD_VAR 0 4
69316: ARRAY
69317: PUSH
69318: LD_INT 2
69320: ARRAY
69321: PPUSH
69322: CALL_OW 297
69326: ST_TO_ADDR
// end ; end ;
69327: GO 69216
69329: POP
69330: POP
// result := hex ;
69331: LD_ADDR_VAR 0 3
69335: PUSH
69336: LD_VAR 0 7
69340: ST_TO_ADDR
// end ;
69341: LD_VAR 0 3
69345: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69346: LD_INT 0
69348: PPUSH
69349: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69350: LD_VAR 0 1
69354: NOT
69355: PUSH
69356: LD_VAR 0 1
69360: PUSH
69361: LD_INT 21
69363: PUSH
69364: LD_INT 2
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 23
69373: PUSH
69374: LD_INT 2
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PPUSH
69385: CALL_OW 69
69389: IN
69390: NOT
69391: OR
69392: IFFALSE 69396
// exit ;
69394: GO 69443
// for i = 1 to 3 do
69396: LD_ADDR_VAR 0 3
69400: PUSH
69401: DOUBLE
69402: LD_INT 1
69404: DEC
69405: ST_TO_ADDR
69406: LD_INT 3
69408: PUSH
69409: FOR_TO
69410: IFFALSE 69441
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69412: LD_VAR 0 1
69416: PPUSH
69417: CALL_OW 250
69421: PPUSH
69422: LD_VAR 0 1
69426: PPUSH
69427: CALL_OW 251
69431: PPUSH
69432: LD_INT 1
69434: PPUSH
69435: CALL_OW 453
69439: GO 69409
69441: POP
69442: POP
// end ;
69443: LD_VAR 0 2
69447: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69448: LD_INT 0
69450: PPUSH
69451: PPUSH
69452: PPUSH
69453: PPUSH
69454: PPUSH
69455: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69456: LD_VAR 0 1
69460: NOT
69461: PUSH
69462: LD_VAR 0 2
69466: NOT
69467: OR
69468: PUSH
69469: LD_VAR 0 1
69473: PPUSH
69474: CALL_OW 314
69478: OR
69479: IFFALSE 69483
// exit ;
69481: GO 69924
// x := GetX ( enemy_unit ) ;
69483: LD_ADDR_VAR 0 7
69487: PUSH
69488: LD_VAR 0 2
69492: PPUSH
69493: CALL_OW 250
69497: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69498: LD_ADDR_VAR 0 8
69502: PUSH
69503: LD_VAR 0 2
69507: PPUSH
69508: CALL_OW 251
69512: ST_TO_ADDR
// if not x or not y then
69513: LD_VAR 0 7
69517: NOT
69518: PUSH
69519: LD_VAR 0 8
69523: NOT
69524: OR
69525: IFFALSE 69529
// exit ;
69527: GO 69924
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69529: LD_ADDR_VAR 0 6
69533: PUSH
69534: LD_VAR 0 7
69538: PPUSH
69539: LD_INT 0
69541: PPUSH
69542: LD_INT 4
69544: PPUSH
69545: CALL_OW 272
69549: PUSH
69550: LD_VAR 0 8
69554: PPUSH
69555: LD_INT 0
69557: PPUSH
69558: LD_INT 4
69560: PPUSH
69561: CALL_OW 273
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_VAR 0 7
69574: PPUSH
69575: LD_INT 1
69577: PPUSH
69578: LD_INT 4
69580: PPUSH
69581: CALL_OW 272
69585: PUSH
69586: LD_VAR 0 8
69590: PPUSH
69591: LD_INT 1
69593: PPUSH
69594: LD_INT 4
69596: PPUSH
69597: CALL_OW 273
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_VAR 0 7
69610: PPUSH
69611: LD_INT 2
69613: PPUSH
69614: LD_INT 4
69616: PPUSH
69617: CALL_OW 272
69621: PUSH
69622: LD_VAR 0 8
69626: PPUSH
69627: LD_INT 2
69629: PPUSH
69630: LD_INT 4
69632: PPUSH
69633: CALL_OW 273
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_VAR 0 7
69646: PPUSH
69647: LD_INT 3
69649: PPUSH
69650: LD_INT 4
69652: PPUSH
69653: CALL_OW 272
69657: PUSH
69658: LD_VAR 0 8
69662: PPUSH
69663: LD_INT 3
69665: PPUSH
69666: LD_INT 4
69668: PPUSH
69669: CALL_OW 273
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_VAR 0 7
69682: PPUSH
69683: LD_INT 4
69685: PPUSH
69686: LD_INT 4
69688: PPUSH
69689: CALL_OW 272
69693: PUSH
69694: LD_VAR 0 8
69698: PPUSH
69699: LD_INT 4
69701: PPUSH
69702: LD_INT 4
69704: PPUSH
69705: CALL_OW 273
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: LD_VAR 0 7
69718: PPUSH
69719: LD_INT 5
69721: PPUSH
69722: LD_INT 4
69724: PPUSH
69725: CALL_OW 272
69729: PUSH
69730: LD_VAR 0 8
69734: PPUSH
69735: LD_INT 5
69737: PPUSH
69738: LD_INT 4
69740: PPUSH
69741: CALL_OW 273
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: ST_TO_ADDR
// for i = tmp downto 1 do
69758: LD_ADDR_VAR 0 4
69762: PUSH
69763: DOUBLE
69764: LD_VAR 0 6
69768: INC
69769: ST_TO_ADDR
69770: LD_INT 1
69772: PUSH
69773: FOR_DOWNTO
69774: IFFALSE 69875
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69776: LD_VAR 0 6
69780: PUSH
69781: LD_VAR 0 4
69785: ARRAY
69786: PUSH
69787: LD_INT 1
69789: ARRAY
69790: PPUSH
69791: LD_VAR 0 6
69795: PUSH
69796: LD_VAR 0 4
69800: ARRAY
69801: PUSH
69802: LD_INT 2
69804: ARRAY
69805: PPUSH
69806: CALL_OW 488
69810: NOT
69811: PUSH
69812: LD_VAR 0 6
69816: PUSH
69817: LD_VAR 0 4
69821: ARRAY
69822: PUSH
69823: LD_INT 1
69825: ARRAY
69826: PPUSH
69827: LD_VAR 0 6
69831: PUSH
69832: LD_VAR 0 4
69836: ARRAY
69837: PUSH
69838: LD_INT 2
69840: ARRAY
69841: PPUSH
69842: CALL_OW 428
69846: PUSH
69847: LD_INT 0
69849: NONEQUAL
69850: OR
69851: IFFALSE 69873
// tmp := Delete ( tmp , i ) ;
69853: LD_ADDR_VAR 0 6
69857: PUSH
69858: LD_VAR 0 6
69862: PPUSH
69863: LD_VAR 0 4
69867: PPUSH
69868: CALL_OW 3
69872: ST_TO_ADDR
69873: GO 69773
69875: POP
69876: POP
// j := GetClosestHex ( unit , tmp ) ;
69877: LD_ADDR_VAR 0 5
69881: PUSH
69882: LD_VAR 0 1
69886: PPUSH
69887: LD_VAR 0 6
69891: PPUSH
69892: CALL 69177 0 2
69896: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69897: LD_VAR 0 1
69901: PPUSH
69902: LD_VAR 0 5
69906: PUSH
69907: LD_INT 1
69909: ARRAY
69910: PPUSH
69911: LD_VAR 0 5
69915: PUSH
69916: LD_INT 2
69918: ARRAY
69919: PPUSH
69920: CALL_OW 111
// end ;
69924: LD_VAR 0 3
69928: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69929: LD_INT 0
69931: PPUSH
69932: PPUSH
69933: PPUSH
// uc_side = 0 ;
69934: LD_ADDR_OWVAR 20
69938: PUSH
69939: LD_INT 0
69941: ST_TO_ADDR
// uc_nation = 0 ;
69942: LD_ADDR_OWVAR 21
69946: PUSH
69947: LD_INT 0
69949: ST_TO_ADDR
// InitHc_All ( ) ;
69950: CALL_OW 584
// InitVc ;
69954: CALL_OW 20
// if mastodonts then
69958: LD_VAR 0 6
69962: IFFALSE 70029
// for i = 1 to mastodonts do
69964: LD_ADDR_VAR 0 11
69968: PUSH
69969: DOUBLE
69970: LD_INT 1
69972: DEC
69973: ST_TO_ADDR
69974: LD_VAR 0 6
69978: PUSH
69979: FOR_TO
69980: IFFALSE 70027
// begin vc_chassis := 31 ;
69982: LD_ADDR_OWVAR 37
69986: PUSH
69987: LD_INT 31
69989: ST_TO_ADDR
// vc_control := control_rider ;
69990: LD_ADDR_OWVAR 38
69994: PUSH
69995: LD_INT 4
69997: ST_TO_ADDR
// animal := CreateVehicle ;
69998: LD_ADDR_VAR 0 12
70002: PUSH
70003: CALL_OW 45
70007: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70008: LD_VAR 0 12
70012: PPUSH
70013: LD_VAR 0 8
70017: PPUSH
70018: LD_INT 0
70020: PPUSH
70021: CALL 72217 0 3
// end ;
70025: GO 69979
70027: POP
70028: POP
// if horses then
70029: LD_VAR 0 5
70033: IFFALSE 70100
// for i = 1 to horses do
70035: LD_ADDR_VAR 0 11
70039: PUSH
70040: DOUBLE
70041: LD_INT 1
70043: DEC
70044: ST_TO_ADDR
70045: LD_VAR 0 5
70049: PUSH
70050: FOR_TO
70051: IFFALSE 70098
// begin hc_class := 21 ;
70053: LD_ADDR_OWVAR 28
70057: PUSH
70058: LD_INT 21
70060: ST_TO_ADDR
// hc_gallery :=  ;
70061: LD_ADDR_OWVAR 33
70065: PUSH
70066: LD_STRING 
70068: ST_TO_ADDR
// animal := CreateHuman ;
70069: LD_ADDR_VAR 0 12
70073: PUSH
70074: CALL_OW 44
70078: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70079: LD_VAR 0 12
70083: PPUSH
70084: LD_VAR 0 8
70088: PPUSH
70089: LD_INT 0
70091: PPUSH
70092: CALL 72217 0 3
// end ;
70096: GO 70050
70098: POP
70099: POP
// if birds then
70100: LD_VAR 0 1
70104: IFFALSE 70171
// for i = 1 to birds do
70106: LD_ADDR_VAR 0 11
70110: PUSH
70111: DOUBLE
70112: LD_INT 1
70114: DEC
70115: ST_TO_ADDR
70116: LD_VAR 0 1
70120: PUSH
70121: FOR_TO
70122: IFFALSE 70169
// begin hc_class = 18 ;
70124: LD_ADDR_OWVAR 28
70128: PUSH
70129: LD_INT 18
70131: ST_TO_ADDR
// hc_gallery =  ;
70132: LD_ADDR_OWVAR 33
70136: PUSH
70137: LD_STRING 
70139: ST_TO_ADDR
// animal := CreateHuman ;
70140: LD_ADDR_VAR 0 12
70144: PUSH
70145: CALL_OW 44
70149: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70150: LD_VAR 0 12
70154: PPUSH
70155: LD_VAR 0 8
70159: PPUSH
70160: LD_INT 0
70162: PPUSH
70163: CALL 72217 0 3
// end ;
70167: GO 70121
70169: POP
70170: POP
// if tigers then
70171: LD_VAR 0 2
70175: IFFALSE 70259
// for i = 1 to tigers do
70177: LD_ADDR_VAR 0 11
70181: PUSH
70182: DOUBLE
70183: LD_INT 1
70185: DEC
70186: ST_TO_ADDR
70187: LD_VAR 0 2
70191: PUSH
70192: FOR_TO
70193: IFFALSE 70257
// begin hc_class = class_tiger ;
70195: LD_ADDR_OWVAR 28
70199: PUSH
70200: LD_INT 14
70202: ST_TO_ADDR
// hc_gallery =  ;
70203: LD_ADDR_OWVAR 33
70207: PUSH
70208: LD_STRING 
70210: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70211: LD_ADDR_OWVAR 35
70215: PUSH
70216: LD_INT 7
70218: NEG
70219: PPUSH
70220: LD_INT 7
70222: PPUSH
70223: CALL_OW 12
70227: ST_TO_ADDR
// animal := CreateHuman ;
70228: LD_ADDR_VAR 0 12
70232: PUSH
70233: CALL_OW 44
70237: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70238: LD_VAR 0 12
70242: PPUSH
70243: LD_VAR 0 8
70247: PPUSH
70248: LD_INT 0
70250: PPUSH
70251: CALL 72217 0 3
// end ;
70255: GO 70192
70257: POP
70258: POP
// if apemans then
70259: LD_VAR 0 3
70263: IFFALSE 70386
// for i = 1 to apemans do
70265: LD_ADDR_VAR 0 11
70269: PUSH
70270: DOUBLE
70271: LD_INT 1
70273: DEC
70274: ST_TO_ADDR
70275: LD_VAR 0 3
70279: PUSH
70280: FOR_TO
70281: IFFALSE 70384
// begin hc_class = class_apeman ;
70283: LD_ADDR_OWVAR 28
70287: PUSH
70288: LD_INT 12
70290: ST_TO_ADDR
// hc_gallery =  ;
70291: LD_ADDR_OWVAR 33
70295: PUSH
70296: LD_STRING 
70298: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70299: LD_ADDR_OWVAR 35
70303: PUSH
70304: LD_INT 2
70306: NEG
70307: PPUSH
70308: LD_INT 2
70310: PPUSH
70311: CALL_OW 12
70315: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70316: LD_ADDR_OWVAR 31
70320: PUSH
70321: LD_INT 1
70323: PPUSH
70324: LD_INT 3
70326: PPUSH
70327: CALL_OW 12
70331: PUSH
70332: LD_INT 1
70334: PPUSH
70335: LD_INT 3
70337: PPUSH
70338: CALL_OW 12
70342: PUSH
70343: LD_INT 0
70345: PUSH
70346: LD_INT 0
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: ST_TO_ADDR
// animal := CreateHuman ;
70355: LD_ADDR_VAR 0 12
70359: PUSH
70360: CALL_OW 44
70364: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70365: LD_VAR 0 12
70369: PPUSH
70370: LD_VAR 0 8
70374: PPUSH
70375: LD_INT 0
70377: PPUSH
70378: CALL 72217 0 3
// end ;
70382: GO 70280
70384: POP
70385: POP
// if enchidnas then
70386: LD_VAR 0 4
70390: IFFALSE 70457
// for i = 1 to enchidnas do
70392: LD_ADDR_VAR 0 11
70396: PUSH
70397: DOUBLE
70398: LD_INT 1
70400: DEC
70401: ST_TO_ADDR
70402: LD_VAR 0 4
70406: PUSH
70407: FOR_TO
70408: IFFALSE 70455
// begin hc_class = 13 ;
70410: LD_ADDR_OWVAR 28
70414: PUSH
70415: LD_INT 13
70417: ST_TO_ADDR
// hc_gallery =  ;
70418: LD_ADDR_OWVAR 33
70422: PUSH
70423: LD_STRING 
70425: ST_TO_ADDR
// animal := CreateHuman ;
70426: LD_ADDR_VAR 0 12
70430: PUSH
70431: CALL_OW 44
70435: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70436: LD_VAR 0 12
70440: PPUSH
70441: LD_VAR 0 8
70445: PPUSH
70446: LD_INT 0
70448: PPUSH
70449: CALL 72217 0 3
// end ;
70453: GO 70407
70455: POP
70456: POP
// if fishes then
70457: LD_VAR 0 7
70461: IFFALSE 70528
// for i = 1 to fishes do
70463: LD_ADDR_VAR 0 11
70467: PUSH
70468: DOUBLE
70469: LD_INT 1
70471: DEC
70472: ST_TO_ADDR
70473: LD_VAR 0 7
70477: PUSH
70478: FOR_TO
70479: IFFALSE 70526
// begin hc_class = 20 ;
70481: LD_ADDR_OWVAR 28
70485: PUSH
70486: LD_INT 20
70488: ST_TO_ADDR
// hc_gallery =  ;
70489: LD_ADDR_OWVAR 33
70493: PUSH
70494: LD_STRING 
70496: ST_TO_ADDR
// animal := CreateHuman ;
70497: LD_ADDR_VAR 0 12
70501: PUSH
70502: CALL_OW 44
70506: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70507: LD_VAR 0 12
70511: PPUSH
70512: LD_VAR 0 9
70516: PPUSH
70517: LD_INT 0
70519: PPUSH
70520: CALL 72217 0 3
// end ;
70524: GO 70478
70526: POP
70527: POP
// end ;
70528: LD_VAR 0 10
70532: RET
// export function WantHeal ( sci , unit ) ; begin
70533: LD_INT 0
70535: PPUSH
// if GetTaskList ( sci ) > 0 then
70536: LD_VAR 0 1
70540: PPUSH
70541: CALL_OW 437
70545: PUSH
70546: LD_INT 0
70548: GREATER
70549: IFFALSE 70619
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70551: LD_VAR 0 1
70555: PPUSH
70556: CALL_OW 437
70560: PUSH
70561: LD_INT 1
70563: ARRAY
70564: PUSH
70565: LD_INT 1
70567: ARRAY
70568: PUSH
70569: LD_STRING l
70571: EQUAL
70572: PUSH
70573: LD_VAR 0 1
70577: PPUSH
70578: CALL_OW 437
70582: PUSH
70583: LD_INT 1
70585: ARRAY
70586: PUSH
70587: LD_INT 4
70589: ARRAY
70590: PUSH
70591: LD_VAR 0 2
70595: EQUAL
70596: AND
70597: IFFALSE 70609
// result := true else
70599: LD_ADDR_VAR 0 3
70603: PUSH
70604: LD_INT 1
70606: ST_TO_ADDR
70607: GO 70617
// result := false ;
70609: LD_ADDR_VAR 0 3
70613: PUSH
70614: LD_INT 0
70616: ST_TO_ADDR
// end else
70617: GO 70627
// result := false ;
70619: LD_ADDR_VAR 0 3
70623: PUSH
70624: LD_INT 0
70626: ST_TO_ADDR
// end ;
70627: LD_VAR 0 3
70631: RET
// export function HealTarget ( sci ) ; begin
70632: LD_INT 0
70634: PPUSH
// if not sci then
70635: LD_VAR 0 1
70639: NOT
70640: IFFALSE 70644
// exit ;
70642: GO 70709
// result := 0 ;
70644: LD_ADDR_VAR 0 2
70648: PUSH
70649: LD_INT 0
70651: ST_TO_ADDR
// if GetTaskList ( sci ) then
70652: LD_VAR 0 1
70656: PPUSH
70657: CALL_OW 437
70661: IFFALSE 70709
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70663: LD_VAR 0 1
70667: PPUSH
70668: CALL_OW 437
70672: PUSH
70673: LD_INT 1
70675: ARRAY
70676: PUSH
70677: LD_INT 1
70679: ARRAY
70680: PUSH
70681: LD_STRING l
70683: EQUAL
70684: IFFALSE 70709
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70686: LD_ADDR_VAR 0 2
70690: PUSH
70691: LD_VAR 0 1
70695: PPUSH
70696: CALL_OW 437
70700: PUSH
70701: LD_INT 1
70703: ARRAY
70704: PUSH
70705: LD_INT 4
70707: ARRAY
70708: ST_TO_ADDR
// end ;
70709: LD_VAR 0 2
70713: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70714: LD_INT 0
70716: PPUSH
70717: PPUSH
70718: PPUSH
70719: PPUSH
// if not base_units then
70720: LD_VAR 0 1
70724: NOT
70725: IFFALSE 70729
// exit ;
70727: GO 70816
// result := false ;
70729: LD_ADDR_VAR 0 2
70733: PUSH
70734: LD_INT 0
70736: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70737: LD_ADDR_VAR 0 5
70741: PUSH
70742: LD_VAR 0 1
70746: PPUSH
70747: LD_INT 21
70749: PUSH
70750: LD_INT 3
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: PPUSH
70757: CALL_OW 72
70761: ST_TO_ADDR
// if not tmp then
70762: LD_VAR 0 5
70766: NOT
70767: IFFALSE 70771
// exit ;
70769: GO 70816
// for i in tmp do
70771: LD_ADDR_VAR 0 3
70775: PUSH
70776: LD_VAR 0 5
70780: PUSH
70781: FOR_IN
70782: IFFALSE 70814
// begin result := EnemyInRange ( i , 22 ) ;
70784: LD_ADDR_VAR 0 2
70788: PUSH
70789: LD_VAR 0 3
70793: PPUSH
70794: LD_INT 22
70796: PPUSH
70797: CALL 69052 0 2
70801: ST_TO_ADDR
// if result then
70802: LD_VAR 0 2
70806: IFFALSE 70812
// exit ;
70808: POP
70809: POP
70810: GO 70816
// end ;
70812: GO 70781
70814: POP
70815: POP
// end ;
70816: LD_VAR 0 2
70820: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70821: LD_INT 0
70823: PPUSH
70824: PPUSH
// if not units then
70825: LD_VAR 0 1
70829: NOT
70830: IFFALSE 70834
// exit ;
70832: GO 70904
// result := [ ] ;
70834: LD_ADDR_VAR 0 3
70838: PUSH
70839: EMPTY
70840: ST_TO_ADDR
// for i in units do
70841: LD_ADDR_VAR 0 4
70845: PUSH
70846: LD_VAR 0 1
70850: PUSH
70851: FOR_IN
70852: IFFALSE 70902
// if GetTag ( i ) = tag then
70854: LD_VAR 0 4
70858: PPUSH
70859: CALL_OW 110
70863: PUSH
70864: LD_VAR 0 2
70868: EQUAL
70869: IFFALSE 70900
// result := Replace ( result , result + 1 , i ) ;
70871: LD_ADDR_VAR 0 3
70875: PUSH
70876: LD_VAR 0 3
70880: PPUSH
70881: LD_VAR 0 3
70885: PUSH
70886: LD_INT 1
70888: PLUS
70889: PPUSH
70890: LD_VAR 0 4
70894: PPUSH
70895: CALL_OW 1
70899: ST_TO_ADDR
70900: GO 70851
70902: POP
70903: POP
// end ;
70904: LD_VAR 0 3
70908: RET
// export function IsDriver ( un ) ; begin
70909: LD_INT 0
70911: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70912: LD_ADDR_VAR 0 2
70916: PUSH
70917: LD_VAR 0 1
70921: PUSH
70922: LD_INT 55
70924: PUSH
70925: EMPTY
70926: LIST
70927: PPUSH
70928: CALL_OW 69
70932: IN
70933: ST_TO_ADDR
// end ;
70934: LD_VAR 0 2
70938: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70939: LD_INT 0
70941: PPUSH
70942: PPUSH
// list := [ ] ;
70943: LD_ADDR_VAR 0 5
70947: PUSH
70948: EMPTY
70949: ST_TO_ADDR
// case d of 0 :
70950: LD_VAR 0 3
70954: PUSH
70955: LD_INT 0
70957: DOUBLE
70958: EQUAL
70959: IFTRUE 70963
70961: GO 71096
70963: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70964: LD_ADDR_VAR 0 5
70968: PUSH
70969: LD_VAR 0 1
70973: PUSH
70974: LD_INT 4
70976: MINUS
70977: PUSH
70978: LD_VAR 0 2
70982: PUSH
70983: LD_INT 4
70985: MINUS
70986: PUSH
70987: LD_INT 2
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: LIST
70994: PUSH
70995: LD_VAR 0 1
70999: PUSH
71000: LD_INT 3
71002: MINUS
71003: PUSH
71004: LD_VAR 0 2
71008: PUSH
71009: LD_INT 1
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: LIST
71016: PUSH
71017: LD_VAR 0 1
71021: PUSH
71022: LD_INT 4
71024: PLUS
71025: PUSH
71026: LD_VAR 0 2
71030: PUSH
71031: LD_INT 4
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: LIST
71038: PUSH
71039: LD_VAR 0 1
71043: PUSH
71044: LD_INT 3
71046: PLUS
71047: PUSH
71048: LD_VAR 0 2
71052: PUSH
71053: LD_INT 3
71055: PLUS
71056: PUSH
71057: LD_INT 5
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: LIST
71064: PUSH
71065: LD_VAR 0 1
71069: PUSH
71070: LD_VAR 0 2
71074: PUSH
71075: LD_INT 4
71077: PLUS
71078: PUSH
71079: LD_INT 0
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: LIST
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: ST_TO_ADDR
// end ; 1 :
71094: GO 71794
71096: LD_INT 1
71098: DOUBLE
71099: EQUAL
71100: IFTRUE 71104
71102: GO 71237
71104: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71105: LD_ADDR_VAR 0 5
71109: PUSH
71110: LD_VAR 0 1
71114: PUSH
71115: LD_VAR 0 2
71119: PUSH
71120: LD_INT 4
71122: MINUS
71123: PUSH
71124: LD_INT 3
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: LIST
71131: PUSH
71132: LD_VAR 0 1
71136: PUSH
71137: LD_INT 3
71139: MINUS
71140: PUSH
71141: LD_VAR 0 2
71145: PUSH
71146: LD_INT 3
71148: MINUS
71149: PUSH
71150: LD_INT 2
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: LIST
71157: PUSH
71158: LD_VAR 0 1
71162: PUSH
71163: LD_INT 4
71165: MINUS
71166: PUSH
71167: LD_VAR 0 2
71171: PUSH
71172: LD_INT 1
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: LIST
71179: PUSH
71180: LD_VAR 0 1
71184: PUSH
71185: LD_VAR 0 2
71189: PUSH
71190: LD_INT 3
71192: PLUS
71193: PUSH
71194: LD_INT 0
71196: PUSH
71197: EMPTY
71198: LIST
71199: LIST
71200: LIST
71201: PUSH
71202: LD_VAR 0 1
71206: PUSH
71207: LD_INT 4
71209: PLUS
71210: PUSH
71211: LD_VAR 0 2
71215: PUSH
71216: LD_INT 4
71218: PLUS
71219: PUSH
71220: LD_INT 5
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: LIST
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: LIST
71232: LIST
71233: LIST
71234: ST_TO_ADDR
// end ; 2 :
71235: GO 71794
71237: LD_INT 2
71239: DOUBLE
71240: EQUAL
71241: IFTRUE 71245
71243: GO 71374
71245: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71246: LD_ADDR_VAR 0 5
71250: PUSH
71251: LD_VAR 0 1
71255: PUSH
71256: LD_VAR 0 2
71260: PUSH
71261: LD_INT 3
71263: MINUS
71264: PUSH
71265: LD_INT 3
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: LIST
71272: PUSH
71273: LD_VAR 0 1
71277: PUSH
71278: LD_INT 4
71280: PLUS
71281: PUSH
71282: LD_VAR 0 2
71286: PUSH
71287: LD_INT 4
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: LIST
71294: PUSH
71295: LD_VAR 0 1
71299: PUSH
71300: LD_VAR 0 2
71304: PUSH
71305: LD_INT 4
71307: PLUS
71308: PUSH
71309: LD_INT 0
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: LIST
71316: PUSH
71317: LD_VAR 0 1
71321: PUSH
71322: LD_INT 3
71324: MINUS
71325: PUSH
71326: LD_VAR 0 2
71330: PUSH
71331: LD_INT 1
71333: PUSH
71334: EMPTY
71335: LIST
71336: LIST
71337: LIST
71338: PUSH
71339: LD_VAR 0 1
71343: PUSH
71344: LD_INT 4
71346: MINUS
71347: PUSH
71348: LD_VAR 0 2
71352: PUSH
71353: LD_INT 4
71355: MINUS
71356: PUSH
71357: LD_INT 2
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: LIST
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: ST_TO_ADDR
// end ; 3 :
71372: GO 71794
71374: LD_INT 3
71376: DOUBLE
71377: EQUAL
71378: IFTRUE 71382
71380: GO 71515
71382: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71383: LD_ADDR_VAR 0 5
71387: PUSH
71388: LD_VAR 0 1
71392: PUSH
71393: LD_INT 3
71395: PLUS
71396: PUSH
71397: LD_VAR 0 2
71401: PUSH
71402: LD_INT 4
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: LIST
71409: PUSH
71410: LD_VAR 0 1
71414: PUSH
71415: LD_INT 4
71417: PLUS
71418: PUSH
71419: LD_VAR 0 2
71423: PUSH
71424: LD_INT 4
71426: PLUS
71427: PUSH
71428: LD_INT 5
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: LIST
71435: PUSH
71436: LD_VAR 0 1
71440: PUSH
71441: LD_INT 4
71443: MINUS
71444: PUSH
71445: LD_VAR 0 2
71449: PUSH
71450: LD_INT 1
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: LIST
71457: PUSH
71458: LD_VAR 0 1
71462: PUSH
71463: LD_VAR 0 2
71467: PUSH
71468: LD_INT 4
71470: MINUS
71471: PUSH
71472: LD_INT 3
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: LIST
71479: PUSH
71480: LD_VAR 0 1
71484: PUSH
71485: LD_INT 3
71487: MINUS
71488: PUSH
71489: LD_VAR 0 2
71493: PUSH
71494: LD_INT 3
71496: MINUS
71497: PUSH
71498: LD_INT 2
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: LIST
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: ST_TO_ADDR
// end ; 4 :
71513: GO 71794
71515: LD_INT 4
71517: DOUBLE
71518: EQUAL
71519: IFTRUE 71523
71521: GO 71656
71523: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71524: LD_ADDR_VAR 0 5
71528: PUSH
71529: LD_VAR 0 1
71533: PUSH
71534: LD_VAR 0 2
71538: PUSH
71539: LD_INT 4
71541: PLUS
71542: PUSH
71543: LD_INT 0
71545: PUSH
71546: EMPTY
71547: LIST
71548: LIST
71549: LIST
71550: PUSH
71551: LD_VAR 0 1
71555: PUSH
71556: LD_INT 3
71558: PLUS
71559: PUSH
71560: LD_VAR 0 2
71564: PUSH
71565: LD_INT 3
71567: PLUS
71568: PUSH
71569: LD_INT 5
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: LIST
71576: PUSH
71577: LD_VAR 0 1
71581: PUSH
71582: LD_INT 4
71584: PLUS
71585: PUSH
71586: LD_VAR 0 2
71590: PUSH
71591: LD_INT 4
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: LIST
71598: PUSH
71599: LD_VAR 0 1
71603: PUSH
71604: LD_VAR 0 2
71608: PUSH
71609: LD_INT 3
71611: MINUS
71612: PUSH
71613: LD_INT 3
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: LIST
71620: PUSH
71621: LD_VAR 0 1
71625: PUSH
71626: LD_INT 4
71628: MINUS
71629: PUSH
71630: LD_VAR 0 2
71634: PUSH
71635: LD_INT 4
71637: MINUS
71638: PUSH
71639: LD_INT 2
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: LIST
71646: PUSH
71647: EMPTY
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: ST_TO_ADDR
// end ; 5 :
71654: GO 71794
71656: LD_INT 5
71658: DOUBLE
71659: EQUAL
71660: IFTRUE 71664
71662: GO 71793
71664: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71665: LD_ADDR_VAR 0 5
71669: PUSH
71670: LD_VAR 0 1
71674: PUSH
71675: LD_INT 4
71677: MINUS
71678: PUSH
71679: LD_VAR 0 2
71683: PUSH
71684: LD_INT 1
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: LIST
71691: PUSH
71692: LD_VAR 0 1
71696: PUSH
71697: LD_VAR 0 2
71701: PUSH
71702: LD_INT 4
71704: MINUS
71705: PUSH
71706: LD_INT 3
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: LIST
71713: PUSH
71714: LD_VAR 0 1
71718: PUSH
71719: LD_INT 4
71721: PLUS
71722: PUSH
71723: LD_VAR 0 2
71727: PUSH
71728: LD_INT 4
71730: PLUS
71731: PUSH
71732: LD_INT 5
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: LIST
71739: PUSH
71740: LD_VAR 0 1
71744: PUSH
71745: LD_INT 3
71747: PLUS
71748: PUSH
71749: LD_VAR 0 2
71753: PUSH
71754: LD_INT 4
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: LIST
71761: PUSH
71762: LD_VAR 0 1
71766: PUSH
71767: LD_VAR 0 2
71771: PUSH
71772: LD_INT 3
71774: PLUS
71775: PUSH
71776: LD_INT 0
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: LIST
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: LIST
71788: LIST
71789: LIST
71790: ST_TO_ADDR
// end ; end ;
71791: GO 71794
71793: POP
// result := list ;
71794: LD_ADDR_VAR 0 4
71798: PUSH
71799: LD_VAR 0 5
71803: ST_TO_ADDR
// end ;
71804: LD_VAR 0 4
71808: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71809: LD_INT 0
71811: PPUSH
71812: PPUSH
71813: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71814: LD_VAR 0 1
71818: NOT
71819: PUSH
71820: LD_VAR 0 2
71824: PUSH
71825: LD_INT 1
71827: PUSH
71828: LD_INT 2
71830: PUSH
71831: LD_INT 3
71833: PUSH
71834: LD_INT 4
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: LIST
71841: LIST
71842: IN
71843: NOT
71844: OR
71845: IFFALSE 71849
// exit ;
71847: GO 71941
// tmp := [ ] ;
71849: LD_ADDR_VAR 0 5
71853: PUSH
71854: EMPTY
71855: ST_TO_ADDR
// for i in units do
71856: LD_ADDR_VAR 0 4
71860: PUSH
71861: LD_VAR 0 1
71865: PUSH
71866: FOR_IN
71867: IFFALSE 71910
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71869: LD_ADDR_VAR 0 5
71873: PUSH
71874: LD_VAR 0 5
71878: PPUSH
71879: LD_VAR 0 5
71883: PUSH
71884: LD_INT 1
71886: PLUS
71887: PPUSH
71888: LD_VAR 0 4
71892: PPUSH
71893: LD_VAR 0 2
71897: PPUSH
71898: CALL_OW 259
71902: PPUSH
71903: CALL_OW 2
71907: ST_TO_ADDR
71908: GO 71866
71910: POP
71911: POP
// if not tmp then
71912: LD_VAR 0 5
71916: NOT
71917: IFFALSE 71921
// exit ;
71919: GO 71941
// result := SortListByListDesc ( units , tmp ) ;
71921: LD_ADDR_VAR 0 3
71925: PUSH
71926: LD_VAR 0 1
71930: PPUSH
71931: LD_VAR 0 5
71935: PPUSH
71936: CALL_OW 77
71940: ST_TO_ADDR
// end ;
71941: LD_VAR 0 3
71945: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71946: LD_INT 0
71948: PPUSH
71949: PPUSH
71950: PPUSH
// result := false ;
71951: LD_ADDR_VAR 0 3
71955: PUSH
71956: LD_INT 0
71958: ST_TO_ADDR
// x := GetX ( building ) ;
71959: LD_ADDR_VAR 0 4
71963: PUSH
71964: LD_VAR 0 2
71968: PPUSH
71969: CALL_OW 250
71973: ST_TO_ADDR
// y := GetY ( building ) ;
71974: LD_ADDR_VAR 0 5
71978: PUSH
71979: LD_VAR 0 2
71983: PPUSH
71984: CALL_OW 251
71988: ST_TO_ADDR
// if not building or not x or not y then
71989: LD_VAR 0 2
71993: NOT
71994: PUSH
71995: LD_VAR 0 4
71999: NOT
72000: OR
72001: PUSH
72002: LD_VAR 0 5
72006: NOT
72007: OR
72008: IFFALSE 72012
// exit ;
72010: GO 72104
// if GetTaskList ( unit ) then
72012: LD_VAR 0 1
72016: PPUSH
72017: CALL_OW 437
72021: IFFALSE 72104
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72023: LD_STRING e
72025: PUSH
72026: LD_VAR 0 1
72030: PPUSH
72031: CALL_OW 437
72035: PUSH
72036: LD_INT 1
72038: ARRAY
72039: PUSH
72040: LD_INT 1
72042: ARRAY
72043: EQUAL
72044: PUSH
72045: LD_VAR 0 4
72049: PUSH
72050: LD_VAR 0 1
72054: PPUSH
72055: CALL_OW 437
72059: PUSH
72060: LD_INT 1
72062: ARRAY
72063: PUSH
72064: LD_INT 2
72066: ARRAY
72067: EQUAL
72068: AND
72069: PUSH
72070: LD_VAR 0 5
72074: PUSH
72075: LD_VAR 0 1
72079: PPUSH
72080: CALL_OW 437
72084: PUSH
72085: LD_INT 1
72087: ARRAY
72088: PUSH
72089: LD_INT 3
72091: ARRAY
72092: EQUAL
72093: AND
72094: IFFALSE 72104
// result := true end ;
72096: LD_ADDR_VAR 0 3
72100: PUSH
72101: LD_INT 1
72103: ST_TO_ADDR
// end ;
72104: LD_VAR 0 3
72108: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72109: LD_INT 0
72111: PPUSH
// result := false ;
72112: LD_ADDR_VAR 0 4
72116: PUSH
72117: LD_INT 0
72119: ST_TO_ADDR
// if GetTaskList ( unit ) then
72120: LD_VAR 0 1
72124: PPUSH
72125: CALL_OW 437
72129: IFFALSE 72212
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72131: LD_STRING M
72133: PUSH
72134: LD_VAR 0 1
72138: PPUSH
72139: CALL_OW 437
72143: PUSH
72144: LD_INT 1
72146: ARRAY
72147: PUSH
72148: LD_INT 1
72150: ARRAY
72151: EQUAL
72152: PUSH
72153: LD_VAR 0 2
72157: PUSH
72158: LD_VAR 0 1
72162: PPUSH
72163: CALL_OW 437
72167: PUSH
72168: LD_INT 1
72170: ARRAY
72171: PUSH
72172: LD_INT 2
72174: ARRAY
72175: EQUAL
72176: AND
72177: PUSH
72178: LD_VAR 0 3
72182: PUSH
72183: LD_VAR 0 1
72187: PPUSH
72188: CALL_OW 437
72192: PUSH
72193: LD_INT 1
72195: ARRAY
72196: PUSH
72197: LD_INT 3
72199: ARRAY
72200: EQUAL
72201: AND
72202: IFFALSE 72212
// result := true ;
72204: LD_ADDR_VAR 0 4
72208: PUSH
72209: LD_INT 1
72211: ST_TO_ADDR
// end ; end ;
72212: LD_VAR 0 4
72216: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72217: LD_INT 0
72219: PPUSH
72220: PPUSH
72221: PPUSH
72222: PPUSH
// if not unit or not area then
72223: LD_VAR 0 1
72227: NOT
72228: PUSH
72229: LD_VAR 0 2
72233: NOT
72234: OR
72235: IFFALSE 72239
// exit ;
72237: GO 72403
// tmp := AreaToList ( area , i ) ;
72239: LD_ADDR_VAR 0 6
72243: PUSH
72244: LD_VAR 0 2
72248: PPUSH
72249: LD_VAR 0 5
72253: PPUSH
72254: CALL_OW 517
72258: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72259: LD_ADDR_VAR 0 5
72263: PUSH
72264: DOUBLE
72265: LD_INT 1
72267: DEC
72268: ST_TO_ADDR
72269: LD_VAR 0 6
72273: PUSH
72274: LD_INT 1
72276: ARRAY
72277: PUSH
72278: FOR_TO
72279: IFFALSE 72401
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72281: LD_ADDR_VAR 0 7
72285: PUSH
72286: LD_VAR 0 6
72290: PUSH
72291: LD_INT 1
72293: ARRAY
72294: PUSH
72295: LD_VAR 0 5
72299: ARRAY
72300: PUSH
72301: LD_VAR 0 6
72305: PUSH
72306: LD_INT 2
72308: ARRAY
72309: PUSH
72310: LD_VAR 0 5
72314: ARRAY
72315: PUSH
72316: EMPTY
72317: LIST
72318: LIST
72319: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72320: LD_VAR 0 7
72324: PUSH
72325: LD_INT 1
72327: ARRAY
72328: PPUSH
72329: LD_VAR 0 7
72333: PUSH
72334: LD_INT 2
72336: ARRAY
72337: PPUSH
72338: CALL_OW 428
72342: PUSH
72343: LD_INT 0
72345: EQUAL
72346: IFFALSE 72399
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72348: LD_VAR 0 1
72352: PPUSH
72353: LD_VAR 0 7
72357: PUSH
72358: LD_INT 1
72360: ARRAY
72361: PPUSH
72362: LD_VAR 0 7
72366: PUSH
72367: LD_INT 2
72369: ARRAY
72370: PPUSH
72371: LD_VAR 0 3
72375: PPUSH
72376: CALL_OW 48
// result := IsPlaced ( unit ) ;
72380: LD_ADDR_VAR 0 4
72384: PUSH
72385: LD_VAR 0 1
72389: PPUSH
72390: CALL_OW 305
72394: ST_TO_ADDR
// exit ;
72395: POP
72396: POP
72397: GO 72403
// end ; end ;
72399: GO 72278
72401: POP
72402: POP
// end ;
72403: LD_VAR 0 4
72407: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72408: LD_INT 0
72410: PPUSH
72411: PPUSH
72412: PPUSH
// if not side or side > 8 then
72413: LD_VAR 0 1
72417: NOT
72418: PUSH
72419: LD_VAR 0 1
72423: PUSH
72424: LD_INT 8
72426: GREATER
72427: OR
72428: IFFALSE 72432
// exit ;
72430: GO 72619
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72432: LD_ADDR_VAR 0 4
72436: PUSH
72437: LD_INT 22
72439: PUSH
72440: LD_VAR 0 1
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: PUSH
72449: LD_INT 21
72451: PUSH
72452: LD_INT 3
72454: PUSH
72455: EMPTY
72456: LIST
72457: LIST
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: PPUSH
72463: CALL_OW 69
72467: ST_TO_ADDR
// if not tmp then
72468: LD_VAR 0 4
72472: NOT
72473: IFFALSE 72477
// exit ;
72475: GO 72619
// enable_addtolog := true ;
72477: LD_ADDR_OWVAR 81
72481: PUSH
72482: LD_INT 1
72484: ST_TO_ADDR
// AddToLog ( [ ) ;
72485: LD_STRING [
72487: PPUSH
72488: CALL_OW 561
// for i in tmp do
72492: LD_ADDR_VAR 0 3
72496: PUSH
72497: LD_VAR 0 4
72501: PUSH
72502: FOR_IN
72503: IFFALSE 72610
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72505: LD_STRING [
72507: PUSH
72508: LD_VAR 0 3
72512: PPUSH
72513: CALL_OW 266
72517: STR
72518: PUSH
72519: LD_STRING , 
72521: STR
72522: PUSH
72523: LD_VAR 0 3
72527: PPUSH
72528: CALL_OW 250
72532: STR
72533: PUSH
72534: LD_STRING , 
72536: STR
72537: PUSH
72538: LD_VAR 0 3
72542: PPUSH
72543: CALL_OW 251
72547: STR
72548: PUSH
72549: LD_STRING , 
72551: STR
72552: PUSH
72553: LD_VAR 0 3
72557: PPUSH
72558: CALL_OW 254
72562: STR
72563: PUSH
72564: LD_STRING , 
72566: STR
72567: PUSH
72568: LD_VAR 0 3
72572: PPUSH
72573: LD_INT 1
72575: PPUSH
72576: CALL_OW 268
72580: STR
72581: PUSH
72582: LD_STRING , 
72584: STR
72585: PUSH
72586: LD_VAR 0 3
72590: PPUSH
72591: LD_INT 2
72593: PPUSH
72594: CALL_OW 268
72598: STR
72599: PUSH
72600: LD_STRING ],
72602: STR
72603: PPUSH
72604: CALL_OW 561
// end ;
72608: GO 72502
72610: POP
72611: POP
// AddToLog ( ]; ) ;
72612: LD_STRING ];
72614: PPUSH
72615: CALL_OW 561
// end ;
72619: LD_VAR 0 2
72623: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72624: LD_INT 0
72626: PPUSH
72627: PPUSH
72628: PPUSH
72629: PPUSH
72630: PPUSH
// if not area or not rate or not max then
72631: LD_VAR 0 1
72635: NOT
72636: PUSH
72637: LD_VAR 0 2
72641: NOT
72642: OR
72643: PUSH
72644: LD_VAR 0 4
72648: NOT
72649: OR
72650: IFFALSE 72654
// exit ;
72652: GO 72846
// while 1 do
72654: LD_INT 1
72656: IFFALSE 72846
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72658: LD_ADDR_VAR 0 9
72662: PUSH
72663: LD_VAR 0 1
72667: PPUSH
72668: LD_INT 1
72670: PPUSH
72671: CALL_OW 287
72675: PUSH
72676: LD_INT 10
72678: MUL
72679: ST_TO_ADDR
// r := rate / 10 ;
72680: LD_ADDR_VAR 0 7
72684: PUSH
72685: LD_VAR 0 2
72689: PUSH
72690: LD_INT 10
72692: DIVREAL
72693: ST_TO_ADDR
// time := 1 1$00 ;
72694: LD_ADDR_VAR 0 8
72698: PUSH
72699: LD_INT 2100
72701: ST_TO_ADDR
// if amount < min then
72702: LD_VAR 0 9
72706: PUSH
72707: LD_VAR 0 3
72711: LESS
72712: IFFALSE 72730
// r := r * 2 else
72714: LD_ADDR_VAR 0 7
72718: PUSH
72719: LD_VAR 0 7
72723: PUSH
72724: LD_INT 2
72726: MUL
72727: ST_TO_ADDR
72728: GO 72756
// if amount > max then
72730: LD_VAR 0 9
72734: PUSH
72735: LD_VAR 0 4
72739: GREATER
72740: IFFALSE 72756
// r := r / 2 ;
72742: LD_ADDR_VAR 0 7
72746: PUSH
72747: LD_VAR 0 7
72751: PUSH
72752: LD_INT 2
72754: DIVREAL
72755: ST_TO_ADDR
// time := time / r ;
72756: LD_ADDR_VAR 0 8
72760: PUSH
72761: LD_VAR 0 8
72765: PUSH
72766: LD_VAR 0 7
72770: DIVREAL
72771: ST_TO_ADDR
// if time < 0 then
72772: LD_VAR 0 8
72776: PUSH
72777: LD_INT 0
72779: LESS
72780: IFFALSE 72797
// time := time * - 1 ;
72782: LD_ADDR_VAR 0 8
72786: PUSH
72787: LD_VAR 0 8
72791: PUSH
72792: LD_INT 1
72794: NEG
72795: MUL
72796: ST_TO_ADDR
// wait ( time ) ;
72797: LD_VAR 0 8
72801: PPUSH
72802: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72806: LD_INT 35
72808: PPUSH
72809: LD_INT 875
72811: PPUSH
72812: CALL_OW 12
72816: PPUSH
72817: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72821: LD_INT 1
72823: PPUSH
72824: LD_INT 5
72826: PPUSH
72827: CALL_OW 12
72831: PPUSH
72832: LD_VAR 0 1
72836: PPUSH
72837: LD_INT 1
72839: PPUSH
72840: CALL_OW 55
// end ;
72844: GO 72654
// end ;
72846: LD_VAR 0 5
72850: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72851: LD_INT 0
72853: PPUSH
72854: PPUSH
72855: PPUSH
72856: PPUSH
72857: PPUSH
72858: PPUSH
72859: PPUSH
72860: PPUSH
// if not turrets or not factories then
72861: LD_VAR 0 1
72865: NOT
72866: PUSH
72867: LD_VAR 0 2
72871: NOT
72872: OR
72873: IFFALSE 72877
// exit ;
72875: GO 73184
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72877: LD_ADDR_VAR 0 10
72881: PUSH
72882: LD_INT 5
72884: PUSH
72885: LD_INT 6
72887: PUSH
72888: EMPTY
72889: LIST
72890: LIST
72891: PUSH
72892: LD_INT 2
72894: PUSH
72895: LD_INT 4
72897: PUSH
72898: EMPTY
72899: LIST
72900: LIST
72901: PUSH
72902: LD_INT 3
72904: PUSH
72905: LD_INT 5
72907: PUSH
72908: EMPTY
72909: LIST
72910: LIST
72911: PUSH
72912: EMPTY
72913: LIST
72914: LIST
72915: LIST
72916: PUSH
72917: LD_INT 24
72919: PUSH
72920: LD_INT 25
72922: PUSH
72923: EMPTY
72924: LIST
72925: LIST
72926: PUSH
72927: LD_INT 23
72929: PUSH
72930: LD_INT 27
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PUSH
72941: LD_INT 42
72943: PUSH
72944: LD_INT 43
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PUSH
72951: LD_INT 44
72953: PUSH
72954: LD_INT 46
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 45
72963: PUSH
72964: LD_INT 47
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: EMPTY
72972: LIST
72973: LIST
72974: LIST
72975: PUSH
72976: EMPTY
72977: LIST
72978: LIST
72979: LIST
72980: ST_TO_ADDR
// result := [ ] ;
72981: LD_ADDR_VAR 0 3
72985: PUSH
72986: EMPTY
72987: ST_TO_ADDR
// for i in turrets do
72988: LD_ADDR_VAR 0 4
72992: PUSH
72993: LD_VAR 0 1
72997: PUSH
72998: FOR_IN
72999: IFFALSE 73182
// begin nat := GetNation ( i ) ;
73001: LD_ADDR_VAR 0 7
73005: PUSH
73006: LD_VAR 0 4
73010: PPUSH
73011: CALL_OW 248
73015: ST_TO_ADDR
// weapon := 0 ;
73016: LD_ADDR_VAR 0 8
73020: PUSH
73021: LD_INT 0
73023: ST_TO_ADDR
// if not nat then
73024: LD_VAR 0 7
73028: NOT
73029: IFFALSE 73033
// continue ;
73031: GO 72998
// for j in list [ nat ] do
73033: LD_ADDR_VAR 0 5
73037: PUSH
73038: LD_VAR 0 10
73042: PUSH
73043: LD_VAR 0 7
73047: ARRAY
73048: PUSH
73049: FOR_IN
73050: IFFALSE 73091
// if GetBWeapon ( i ) = j [ 1 ] then
73052: LD_VAR 0 4
73056: PPUSH
73057: CALL_OW 269
73061: PUSH
73062: LD_VAR 0 5
73066: PUSH
73067: LD_INT 1
73069: ARRAY
73070: EQUAL
73071: IFFALSE 73089
// begin weapon := j [ 2 ] ;
73073: LD_ADDR_VAR 0 8
73077: PUSH
73078: LD_VAR 0 5
73082: PUSH
73083: LD_INT 2
73085: ARRAY
73086: ST_TO_ADDR
// break ;
73087: GO 73091
// end ;
73089: GO 73049
73091: POP
73092: POP
// if not weapon then
73093: LD_VAR 0 8
73097: NOT
73098: IFFALSE 73102
// continue ;
73100: GO 72998
// for k in factories do
73102: LD_ADDR_VAR 0 6
73106: PUSH
73107: LD_VAR 0 2
73111: PUSH
73112: FOR_IN
73113: IFFALSE 73178
// begin weapons := AvailableWeaponList ( k ) ;
73115: LD_ADDR_VAR 0 9
73119: PUSH
73120: LD_VAR 0 6
73124: PPUSH
73125: CALL_OW 478
73129: ST_TO_ADDR
// if not weapons then
73130: LD_VAR 0 9
73134: NOT
73135: IFFALSE 73139
// continue ;
73137: GO 73112
// if weapon in weapons then
73139: LD_VAR 0 8
73143: PUSH
73144: LD_VAR 0 9
73148: IN
73149: IFFALSE 73176
// begin result := [ i , weapon ] ;
73151: LD_ADDR_VAR 0 3
73155: PUSH
73156: LD_VAR 0 4
73160: PUSH
73161: LD_VAR 0 8
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: ST_TO_ADDR
// exit ;
73170: POP
73171: POP
73172: POP
73173: POP
73174: GO 73184
// end ; end ;
73176: GO 73112
73178: POP
73179: POP
// end ;
73180: GO 72998
73182: POP
73183: POP
// end ;
73184: LD_VAR 0 3
73188: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73189: LD_INT 0
73191: PPUSH
// if not side or side > 8 then
73192: LD_VAR 0 3
73196: NOT
73197: PUSH
73198: LD_VAR 0 3
73202: PUSH
73203: LD_INT 8
73205: GREATER
73206: OR
73207: IFFALSE 73211
// exit ;
73209: GO 73270
// if not range then
73211: LD_VAR 0 4
73215: NOT
73216: IFFALSE 73227
// range := - 12 ;
73218: LD_ADDR_VAR 0 4
73222: PUSH
73223: LD_INT 12
73225: NEG
73226: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73227: LD_VAR 0 1
73231: PPUSH
73232: LD_VAR 0 2
73236: PPUSH
73237: LD_VAR 0 3
73241: PPUSH
73242: LD_VAR 0 4
73246: PPUSH
73247: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73251: LD_VAR 0 1
73255: PPUSH
73256: LD_VAR 0 2
73260: PPUSH
73261: LD_VAR 0 3
73265: PPUSH
73266: CALL_OW 331
// end ;
73270: LD_VAR 0 5
73274: RET
// export function Video ( mode ) ; begin
73275: LD_INT 0
73277: PPUSH
// ingame_video = mode ;
73278: LD_ADDR_OWVAR 52
73282: PUSH
73283: LD_VAR 0 1
73287: ST_TO_ADDR
// interface_hidden = mode ;
73288: LD_ADDR_OWVAR 54
73292: PUSH
73293: LD_VAR 0 1
73297: ST_TO_ADDR
// end ;
73298: LD_VAR 0 2
73302: RET
// export function Join ( array , element ) ; begin
73303: LD_INT 0
73305: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73306: LD_ADDR_VAR 0 3
73310: PUSH
73311: LD_VAR 0 1
73315: PPUSH
73316: LD_VAR 0 1
73320: PUSH
73321: LD_INT 1
73323: PLUS
73324: PPUSH
73325: LD_VAR 0 2
73329: PPUSH
73330: CALL_OW 1
73334: ST_TO_ADDR
// end ;
73335: LD_VAR 0 3
73339: RET
// export function JoinUnion ( array , element ) ; begin
73340: LD_INT 0
73342: PPUSH
// result := array union element ;
73343: LD_ADDR_VAR 0 3
73347: PUSH
73348: LD_VAR 0 1
73352: PUSH
73353: LD_VAR 0 2
73357: UNION
73358: ST_TO_ADDR
// end ;
73359: LD_VAR 0 3
73363: RET
// export function GetBehemoths ( side ) ; begin
73364: LD_INT 0
73366: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73367: LD_ADDR_VAR 0 2
73371: PUSH
73372: LD_INT 22
73374: PUSH
73375: LD_VAR 0 1
73379: PUSH
73380: EMPTY
73381: LIST
73382: LIST
73383: PUSH
73384: LD_INT 31
73386: PUSH
73387: LD_INT 25
73389: PUSH
73390: EMPTY
73391: LIST
73392: LIST
73393: PUSH
73394: EMPTY
73395: LIST
73396: LIST
73397: PPUSH
73398: CALL_OW 69
73402: ST_TO_ADDR
// end ;
73403: LD_VAR 0 2
73407: RET
// export function Shuffle ( array ) ; var i , index ; begin
73408: LD_INT 0
73410: PPUSH
73411: PPUSH
73412: PPUSH
// result := [ ] ;
73413: LD_ADDR_VAR 0 2
73417: PUSH
73418: EMPTY
73419: ST_TO_ADDR
// if not array then
73420: LD_VAR 0 1
73424: NOT
73425: IFFALSE 73429
// exit ;
73427: GO 73528
// Randomize ;
73429: CALL_OW 10
// for i = array downto 1 do
73433: LD_ADDR_VAR 0 3
73437: PUSH
73438: DOUBLE
73439: LD_VAR 0 1
73443: INC
73444: ST_TO_ADDR
73445: LD_INT 1
73447: PUSH
73448: FOR_DOWNTO
73449: IFFALSE 73526
// begin index := rand ( 1 , array ) ;
73451: LD_ADDR_VAR 0 4
73455: PUSH
73456: LD_INT 1
73458: PPUSH
73459: LD_VAR 0 1
73463: PPUSH
73464: CALL_OW 12
73468: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73469: LD_ADDR_VAR 0 2
73473: PUSH
73474: LD_VAR 0 2
73478: PPUSH
73479: LD_VAR 0 2
73483: PUSH
73484: LD_INT 1
73486: PLUS
73487: PPUSH
73488: LD_VAR 0 1
73492: PUSH
73493: LD_VAR 0 4
73497: ARRAY
73498: PPUSH
73499: CALL_OW 2
73503: ST_TO_ADDR
// array := Delete ( array , index ) ;
73504: LD_ADDR_VAR 0 1
73508: PUSH
73509: LD_VAR 0 1
73513: PPUSH
73514: LD_VAR 0 4
73518: PPUSH
73519: CALL_OW 3
73523: ST_TO_ADDR
// end ;
73524: GO 73448
73526: POP
73527: POP
// end ;
73528: LD_VAR 0 2
73532: RET
// export function GetBaseMaterials ( base ) ; begin
73533: LD_INT 0
73535: PPUSH
// result := [ 0 , 0 , 0 ] ;
73536: LD_ADDR_VAR 0 2
73540: PUSH
73541: LD_INT 0
73543: PUSH
73544: LD_INT 0
73546: PUSH
73547: LD_INT 0
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: LIST
73554: ST_TO_ADDR
// if not base then
73555: LD_VAR 0 1
73559: NOT
73560: IFFALSE 73564
// exit ;
73562: GO 73613
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73564: LD_ADDR_VAR 0 2
73568: PUSH
73569: LD_VAR 0 1
73573: PPUSH
73574: LD_INT 1
73576: PPUSH
73577: CALL_OW 275
73581: PUSH
73582: LD_VAR 0 1
73586: PPUSH
73587: LD_INT 2
73589: PPUSH
73590: CALL_OW 275
73594: PUSH
73595: LD_VAR 0 1
73599: PPUSH
73600: LD_INT 3
73602: PPUSH
73603: CALL_OW 275
73607: PUSH
73608: EMPTY
73609: LIST
73610: LIST
73611: LIST
73612: ST_TO_ADDR
// end ;
73613: LD_VAR 0 2
73617: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73618: LD_INT 0
73620: PPUSH
73621: PPUSH
// result := array ;
73622: LD_ADDR_VAR 0 3
73626: PUSH
73627: LD_VAR 0 1
73631: ST_TO_ADDR
// if size > 0 then
73632: LD_VAR 0 2
73636: PUSH
73637: LD_INT 0
73639: GREATER
73640: IFFALSE 73686
// for i := array downto size do
73642: LD_ADDR_VAR 0 4
73646: PUSH
73647: DOUBLE
73648: LD_VAR 0 1
73652: INC
73653: ST_TO_ADDR
73654: LD_VAR 0 2
73658: PUSH
73659: FOR_DOWNTO
73660: IFFALSE 73684
// result := Delete ( result , result ) ;
73662: LD_ADDR_VAR 0 3
73666: PUSH
73667: LD_VAR 0 3
73671: PPUSH
73672: LD_VAR 0 3
73676: PPUSH
73677: CALL_OW 3
73681: ST_TO_ADDR
73682: GO 73659
73684: POP
73685: POP
// end ;
73686: LD_VAR 0 3
73690: RET
// export function ComExit ( unit ) ; var tmp ; begin
73691: LD_INT 0
73693: PPUSH
73694: PPUSH
// if not IsInUnit ( unit ) then
73695: LD_VAR 0 1
73699: PPUSH
73700: CALL_OW 310
73704: NOT
73705: IFFALSE 73709
// exit ;
73707: GO 73769
// tmp := IsInUnit ( unit ) ;
73709: LD_ADDR_VAR 0 3
73713: PUSH
73714: LD_VAR 0 1
73718: PPUSH
73719: CALL_OW 310
73723: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73724: LD_VAR 0 3
73728: PPUSH
73729: CALL_OW 247
73733: PUSH
73734: LD_INT 2
73736: EQUAL
73737: IFFALSE 73750
// ComExitVehicle ( unit ) else
73739: LD_VAR 0 1
73743: PPUSH
73744: CALL_OW 121
73748: GO 73759
// ComExitBuilding ( unit ) ;
73750: LD_VAR 0 1
73754: PPUSH
73755: CALL_OW 122
// result := tmp ;
73759: LD_ADDR_VAR 0 2
73763: PUSH
73764: LD_VAR 0 3
73768: ST_TO_ADDR
// end ;
73769: LD_VAR 0 2
73773: RET
// export function ComExitAll ( units ) ; var i ; begin
73774: LD_INT 0
73776: PPUSH
73777: PPUSH
// if not units then
73778: LD_VAR 0 1
73782: NOT
73783: IFFALSE 73787
// exit ;
73785: GO 73813
// for i in units do
73787: LD_ADDR_VAR 0 3
73791: PUSH
73792: LD_VAR 0 1
73796: PUSH
73797: FOR_IN
73798: IFFALSE 73811
// ComExit ( i ) ;
73800: LD_VAR 0 3
73804: PPUSH
73805: CALL 73691 0 1
73809: GO 73797
73811: POP
73812: POP
// end ;
73813: LD_VAR 0 2
73817: RET
// export function ResetHc ; begin
73818: LD_INT 0
73820: PPUSH
// InitHc ;
73821: CALL_OW 19
// hc_importance := 0 ;
73825: LD_ADDR_OWVAR 32
73829: PUSH
73830: LD_INT 0
73832: ST_TO_ADDR
// end ;
73833: LD_VAR 0 1
73837: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73838: LD_INT 0
73840: PPUSH
73841: PPUSH
73842: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73843: LD_ADDR_VAR 0 6
73847: PUSH
73848: LD_VAR 0 1
73852: PUSH
73853: LD_VAR 0 3
73857: PLUS
73858: PUSH
73859: LD_INT 2
73861: DIV
73862: ST_TO_ADDR
// if _x < 0 then
73863: LD_VAR 0 6
73867: PUSH
73868: LD_INT 0
73870: LESS
73871: IFFALSE 73888
// _x := _x * - 1 ;
73873: LD_ADDR_VAR 0 6
73877: PUSH
73878: LD_VAR 0 6
73882: PUSH
73883: LD_INT 1
73885: NEG
73886: MUL
73887: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73888: LD_ADDR_VAR 0 7
73892: PUSH
73893: LD_VAR 0 2
73897: PUSH
73898: LD_VAR 0 4
73902: PLUS
73903: PUSH
73904: LD_INT 2
73906: DIV
73907: ST_TO_ADDR
// if _y < 0 then
73908: LD_VAR 0 7
73912: PUSH
73913: LD_INT 0
73915: LESS
73916: IFFALSE 73933
// _y := _y * - 1 ;
73918: LD_ADDR_VAR 0 7
73922: PUSH
73923: LD_VAR 0 7
73927: PUSH
73928: LD_INT 1
73930: NEG
73931: MUL
73932: ST_TO_ADDR
// result := [ _x , _y ] ;
73933: LD_ADDR_VAR 0 5
73937: PUSH
73938: LD_VAR 0 6
73942: PUSH
73943: LD_VAR 0 7
73947: PUSH
73948: EMPTY
73949: LIST
73950: LIST
73951: ST_TO_ADDR
// end ;
73952: LD_VAR 0 5
73956: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73957: LD_INT 0
73959: PPUSH
73960: PPUSH
73961: PPUSH
73962: PPUSH
// task := GetTaskList ( unit ) ;
73963: LD_ADDR_VAR 0 7
73967: PUSH
73968: LD_VAR 0 1
73972: PPUSH
73973: CALL_OW 437
73977: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73978: LD_VAR 0 7
73982: NOT
73983: PUSH
73984: LD_VAR 0 1
73988: PPUSH
73989: LD_VAR 0 2
73993: PPUSH
73994: CALL_OW 308
73998: NOT
73999: AND
74000: IFFALSE 74004
// exit ;
74002: GO 74122
// if IsInArea ( unit , area ) then
74004: LD_VAR 0 1
74008: PPUSH
74009: LD_VAR 0 2
74013: PPUSH
74014: CALL_OW 308
74018: IFFALSE 74036
// begin ComMoveToArea ( unit , goAway ) ;
74020: LD_VAR 0 1
74024: PPUSH
74025: LD_VAR 0 3
74029: PPUSH
74030: CALL_OW 113
// exit ;
74034: GO 74122
// end ; if task [ 1 ] [ 1 ] <> M then
74036: LD_VAR 0 7
74040: PUSH
74041: LD_INT 1
74043: ARRAY
74044: PUSH
74045: LD_INT 1
74047: ARRAY
74048: PUSH
74049: LD_STRING M
74051: NONEQUAL
74052: IFFALSE 74056
// exit ;
74054: GO 74122
// x := task [ 1 ] [ 2 ] ;
74056: LD_ADDR_VAR 0 5
74060: PUSH
74061: LD_VAR 0 7
74065: PUSH
74066: LD_INT 1
74068: ARRAY
74069: PUSH
74070: LD_INT 2
74072: ARRAY
74073: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74074: LD_ADDR_VAR 0 6
74078: PUSH
74079: LD_VAR 0 7
74083: PUSH
74084: LD_INT 1
74086: ARRAY
74087: PUSH
74088: LD_INT 3
74090: ARRAY
74091: ST_TO_ADDR
// if InArea ( x , y , area ) then
74092: LD_VAR 0 5
74096: PPUSH
74097: LD_VAR 0 6
74101: PPUSH
74102: LD_VAR 0 2
74106: PPUSH
74107: CALL_OW 309
74111: IFFALSE 74122
// ComStop ( unit ) ;
74113: LD_VAR 0 1
74117: PPUSH
74118: CALL_OW 141
// end ;
74122: LD_VAR 0 4
74126: RET
// export function Abs ( value ) ; begin
74127: LD_INT 0
74129: PPUSH
// result := value ;
74130: LD_ADDR_VAR 0 2
74134: PUSH
74135: LD_VAR 0 1
74139: ST_TO_ADDR
// if value < 0 then
74140: LD_VAR 0 1
74144: PUSH
74145: LD_INT 0
74147: LESS
74148: IFFALSE 74165
// result := value * - 1 ;
74150: LD_ADDR_VAR 0 2
74154: PUSH
74155: LD_VAR 0 1
74159: PUSH
74160: LD_INT 1
74162: NEG
74163: MUL
74164: ST_TO_ADDR
// end ;
74165: LD_VAR 0 2
74169: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74170: LD_INT 0
74172: PPUSH
74173: PPUSH
74174: PPUSH
74175: PPUSH
74176: PPUSH
74177: PPUSH
74178: PPUSH
74179: PPUSH
// if not unit or not building then
74180: LD_VAR 0 1
74184: NOT
74185: PUSH
74186: LD_VAR 0 2
74190: NOT
74191: OR
74192: IFFALSE 74196
// exit ;
74194: GO 74422
// x := GetX ( building ) ;
74196: LD_ADDR_VAR 0 4
74200: PUSH
74201: LD_VAR 0 2
74205: PPUSH
74206: CALL_OW 250
74210: ST_TO_ADDR
// y := GetY ( building ) ;
74211: LD_ADDR_VAR 0 6
74215: PUSH
74216: LD_VAR 0 2
74220: PPUSH
74221: CALL_OW 251
74225: ST_TO_ADDR
// d := GetDir ( building ) ;
74226: LD_ADDR_VAR 0 8
74230: PUSH
74231: LD_VAR 0 2
74235: PPUSH
74236: CALL_OW 254
74240: ST_TO_ADDR
// r := 4 ;
74241: LD_ADDR_VAR 0 9
74245: PUSH
74246: LD_INT 4
74248: ST_TO_ADDR
// for i := 1 to 5 do
74249: LD_ADDR_VAR 0 10
74253: PUSH
74254: DOUBLE
74255: LD_INT 1
74257: DEC
74258: ST_TO_ADDR
74259: LD_INT 5
74261: PUSH
74262: FOR_TO
74263: IFFALSE 74420
// begin _x := ShiftX ( x , d , r + i ) ;
74265: LD_ADDR_VAR 0 5
74269: PUSH
74270: LD_VAR 0 4
74274: PPUSH
74275: LD_VAR 0 8
74279: PPUSH
74280: LD_VAR 0 9
74284: PUSH
74285: LD_VAR 0 10
74289: PLUS
74290: PPUSH
74291: CALL_OW 272
74295: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74296: LD_ADDR_VAR 0 7
74300: PUSH
74301: LD_VAR 0 6
74305: PPUSH
74306: LD_VAR 0 8
74310: PPUSH
74311: LD_VAR 0 9
74315: PUSH
74316: LD_VAR 0 10
74320: PLUS
74321: PPUSH
74322: CALL_OW 273
74326: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74327: LD_VAR 0 5
74331: PPUSH
74332: LD_VAR 0 7
74336: PPUSH
74337: CALL_OW 488
74341: PUSH
74342: LD_VAR 0 5
74346: PPUSH
74347: LD_VAR 0 7
74351: PPUSH
74352: CALL_OW 428
74356: PPUSH
74357: CALL_OW 247
74361: PUSH
74362: LD_INT 3
74364: PUSH
74365: LD_INT 2
74367: PUSH
74368: EMPTY
74369: LIST
74370: LIST
74371: IN
74372: NOT
74373: AND
74374: IFFALSE 74418
// begin ComMoveXY ( unit , _x , _y ) ;
74376: LD_VAR 0 1
74380: PPUSH
74381: LD_VAR 0 5
74385: PPUSH
74386: LD_VAR 0 7
74390: PPUSH
74391: CALL_OW 111
// result := [ _x , _y ] ;
74395: LD_ADDR_VAR 0 3
74399: PUSH
74400: LD_VAR 0 5
74404: PUSH
74405: LD_VAR 0 7
74409: PUSH
74410: EMPTY
74411: LIST
74412: LIST
74413: ST_TO_ADDR
// exit ;
74414: POP
74415: POP
74416: GO 74422
// end ; end ;
74418: GO 74262
74420: POP
74421: POP
// end ;
74422: LD_VAR 0 3
74426: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74427: LD_INT 0
74429: PPUSH
74430: PPUSH
74431: PPUSH
// result := 0 ;
74432: LD_ADDR_VAR 0 3
74436: PUSH
74437: LD_INT 0
74439: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74440: LD_VAR 0 1
74444: PUSH
74445: LD_INT 0
74447: LESS
74448: PUSH
74449: LD_VAR 0 1
74453: PUSH
74454: LD_INT 8
74456: GREATER
74457: OR
74458: PUSH
74459: LD_VAR 0 2
74463: PUSH
74464: LD_INT 0
74466: LESS
74467: OR
74468: PUSH
74469: LD_VAR 0 2
74473: PUSH
74474: LD_INT 8
74476: GREATER
74477: OR
74478: IFFALSE 74482
// exit ;
74480: GO 74557
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74482: LD_ADDR_VAR 0 4
74486: PUSH
74487: LD_INT 22
74489: PUSH
74490: LD_VAR 0 2
74494: PUSH
74495: EMPTY
74496: LIST
74497: LIST
74498: PPUSH
74499: CALL_OW 69
74503: PUSH
74504: FOR_IN
74505: IFFALSE 74555
// begin un := UnitShoot ( i ) ;
74507: LD_ADDR_VAR 0 5
74511: PUSH
74512: LD_VAR 0 4
74516: PPUSH
74517: CALL_OW 504
74521: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74522: LD_VAR 0 5
74526: PPUSH
74527: CALL_OW 255
74531: PUSH
74532: LD_VAR 0 1
74536: EQUAL
74537: IFFALSE 74553
// begin result := un ;
74539: LD_ADDR_VAR 0 3
74543: PUSH
74544: LD_VAR 0 5
74548: ST_TO_ADDR
// exit ;
74549: POP
74550: POP
74551: GO 74557
// end ; end ;
74553: GO 74504
74555: POP
74556: POP
// end ;
74557: LD_VAR 0 3
74561: RET
// export function GetCargoBay ( units ) ; begin
74562: LD_INT 0
74564: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74565: LD_ADDR_VAR 0 2
74569: PUSH
74570: LD_VAR 0 1
74574: PPUSH
74575: LD_INT 2
74577: PUSH
74578: LD_INT 34
74580: PUSH
74581: LD_INT 12
74583: PUSH
74584: EMPTY
74585: LIST
74586: LIST
74587: PUSH
74588: LD_INT 34
74590: PUSH
74591: LD_INT 51
74593: PUSH
74594: EMPTY
74595: LIST
74596: LIST
74597: PUSH
74598: LD_INT 34
74600: PUSH
74601: LD_INT 32
74603: PUSH
74604: EMPTY
74605: LIST
74606: LIST
74607: PUSH
74608: LD_INT 34
74610: PUSH
74611: LD_EXP 63
74615: PUSH
74616: EMPTY
74617: LIST
74618: LIST
74619: PUSH
74620: EMPTY
74621: LIST
74622: LIST
74623: LIST
74624: LIST
74625: LIST
74626: PPUSH
74627: CALL_OW 72
74631: ST_TO_ADDR
// end ;
74632: LD_VAR 0 2
74636: RET
// export function Negate ( value ) ; begin
74637: LD_INT 0
74639: PPUSH
// result := not value ;
74640: LD_ADDR_VAR 0 2
74644: PUSH
74645: LD_VAR 0 1
74649: NOT
74650: ST_TO_ADDR
// end ;
74651: LD_VAR 0 2
74655: RET
// export function Inc ( value ) ; begin
74656: LD_INT 0
74658: PPUSH
// result := value + 1 ;
74659: LD_ADDR_VAR 0 2
74663: PUSH
74664: LD_VAR 0 1
74668: PUSH
74669: LD_INT 1
74671: PLUS
74672: ST_TO_ADDR
// end ;
74673: LD_VAR 0 2
74677: RET
// export function Dec ( value ) ; begin
74678: LD_INT 0
74680: PPUSH
// result := value - 1 ;
74681: LD_ADDR_VAR 0 2
74685: PUSH
74686: LD_VAR 0 1
74690: PUSH
74691: LD_INT 1
74693: MINUS
74694: ST_TO_ADDR
// end ;
74695: LD_VAR 0 2
74699: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74700: LD_INT 0
74702: PPUSH
74703: PPUSH
74704: PPUSH
74705: PPUSH
74706: PPUSH
74707: PPUSH
74708: PPUSH
74709: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74710: LD_VAR 0 1
74714: PPUSH
74715: LD_VAR 0 2
74719: PPUSH
74720: CALL_OW 488
74724: NOT
74725: PUSH
74726: LD_VAR 0 3
74730: PPUSH
74731: LD_VAR 0 4
74735: PPUSH
74736: CALL_OW 488
74740: NOT
74741: OR
74742: IFFALSE 74755
// begin result := - 1 ;
74744: LD_ADDR_VAR 0 5
74748: PUSH
74749: LD_INT 1
74751: NEG
74752: ST_TO_ADDR
// exit ;
74753: GO 74990
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74755: LD_ADDR_VAR 0 12
74759: PUSH
74760: LD_VAR 0 1
74764: PPUSH
74765: LD_VAR 0 2
74769: PPUSH
74770: LD_VAR 0 3
74774: PPUSH
74775: LD_VAR 0 4
74779: PPUSH
74780: CALL 73838 0 4
74784: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74785: LD_ADDR_VAR 0 11
74789: PUSH
74790: LD_VAR 0 1
74794: PPUSH
74795: LD_VAR 0 2
74799: PPUSH
74800: LD_VAR 0 12
74804: PUSH
74805: LD_INT 1
74807: ARRAY
74808: PPUSH
74809: LD_VAR 0 12
74813: PUSH
74814: LD_INT 2
74816: ARRAY
74817: PPUSH
74818: CALL_OW 298
74822: ST_TO_ADDR
// distance := 9999 ;
74823: LD_ADDR_VAR 0 10
74827: PUSH
74828: LD_INT 9999
74830: ST_TO_ADDR
// for i := 0 to 5 do
74831: LD_ADDR_VAR 0 6
74835: PUSH
74836: DOUBLE
74837: LD_INT 0
74839: DEC
74840: ST_TO_ADDR
74841: LD_INT 5
74843: PUSH
74844: FOR_TO
74845: IFFALSE 74988
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74847: LD_ADDR_VAR 0 7
74851: PUSH
74852: LD_VAR 0 1
74856: PPUSH
74857: LD_VAR 0 6
74861: PPUSH
74862: LD_VAR 0 11
74866: PPUSH
74867: CALL_OW 272
74871: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74872: LD_ADDR_VAR 0 8
74876: PUSH
74877: LD_VAR 0 2
74881: PPUSH
74882: LD_VAR 0 6
74886: PPUSH
74887: LD_VAR 0 11
74891: PPUSH
74892: CALL_OW 273
74896: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74897: LD_VAR 0 7
74901: PPUSH
74902: LD_VAR 0 8
74906: PPUSH
74907: CALL_OW 488
74911: NOT
74912: IFFALSE 74916
// continue ;
74914: GO 74844
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74916: LD_ADDR_VAR 0 9
74920: PUSH
74921: LD_VAR 0 12
74925: PUSH
74926: LD_INT 1
74928: ARRAY
74929: PPUSH
74930: LD_VAR 0 12
74934: PUSH
74935: LD_INT 2
74937: ARRAY
74938: PPUSH
74939: LD_VAR 0 7
74943: PPUSH
74944: LD_VAR 0 8
74948: PPUSH
74949: CALL_OW 298
74953: ST_TO_ADDR
// if tmp < distance then
74954: LD_VAR 0 9
74958: PUSH
74959: LD_VAR 0 10
74963: LESS
74964: IFFALSE 74986
// begin result := i ;
74966: LD_ADDR_VAR 0 5
74970: PUSH
74971: LD_VAR 0 6
74975: ST_TO_ADDR
// distance := tmp ;
74976: LD_ADDR_VAR 0 10
74980: PUSH
74981: LD_VAR 0 9
74985: ST_TO_ADDR
// end ; end ;
74986: GO 74844
74988: POP
74989: POP
// end ;
74990: LD_VAR 0 5
74994: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74995: LD_INT 0
74997: PPUSH
74998: PPUSH
// if not driver or not IsInUnit ( driver ) then
74999: LD_VAR 0 1
75003: NOT
75004: PUSH
75005: LD_VAR 0 1
75009: PPUSH
75010: CALL_OW 310
75014: NOT
75015: OR
75016: IFFALSE 75020
// exit ;
75018: GO 75110
// vehicle := IsInUnit ( driver ) ;
75020: LD_ADDR_VAR 0 3
75024: PUSH
75025: LD_VAR 0 1
75029: PPUSH
75030: CALL_OW 310
75034: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75035: LD_VAR 0 1
75039: PPUSH
75040: LD_STRING \
75042: PUSH
75043: LD_INT 0
75045: PUSH
75046: LD_INT 0
75048: PUSH
75049: LD_INT 0
75051: PUSH
75052: LD_INT 0
75054: PUSH
75055: LD_INT 0
75057: PUSH
75058: LD_INT 0
75060: PUSH
75061: EMPTY
75062: LIST
75063: LIST
75064: LIST
75065: LIST
75066: LIST
75067: LIST
75068: LIST
75069: PUSH
75070: LD_STRING E
75072: PUSH
75073: LD_INT 0
75075: PUSH
75076: LD_INT 0
75078: PUSH
75079: LD_VAR 0 3
75083: PUSH
75084: LD_INT 0
75086: PUSH
75087: LD_INT 0
75089: PUSH
75090: LD_INT 0
75092: PUSH
75093: EMPTY
75094: LIST
75095: LIST
75096: LIST
75097: LIST
75098: LIST
75099: LIST
75100: LIST
75101: PUSH
75102: EMPTY
75103: LIST
75104: LIST
75105: PPUSH
75106: CALL_OW 446
// end ;
75110: LD_VAR 0 2
75114: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75115: LD_INT 0
75117: PPUSH
75118: PPUSH
// if not driver or not IsInUnit ( driver ) then
75119: LD_VAR 0 1
75123: NOT
75124: PUSH
75125: LD_VAR 0 1
75129: PPUSH
75130: CALL_OW 310
75134: NOT
75135: OR
75136: IFFALSE 75140
// exit ;
75138: GO 75230
// vehicle := IsInUnit ( driver ) ;
75140: LD_ADDR_VAR 0 3
75144: PUSH
75145: LD_VAR 0 1
75149: PPUSH
75150: CALL_OW 310
75154: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75155: LD_VAR 0 1
75159: PPUSH
75160: LD_STRING \
75162: PUSH
75163: LD_INT 0
75165: PUSH
75166: LD_INT 0
75168: PUSH
75169: LD_INT 0
75171: PUSH
75172: LD_INT 0
75174: PUSH
75175: LD_INT 0
75177: PUSH
75178: LD_INT 0
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: LIST
75185: LIST
75186: LIST
75187: LIST
75188: LIST
75189: PUSH
75190: LD_STRING E
75192: PUSH
75193: LD_INT 0
75195: PUSH
75196: LD_INT 0
75198: PUSH
75199: LD_VAR 0 3
75203: PUSH
75204: LD_INT 0
75206: PUSH
75207: LD_INT 0
75209: PUSH
75210: LD_INT 0
75212: PUSH
75213: EMPTY
75214: LIST
75215: LIST
75216: LIST
75217: LIST
75218: LIST
75219: LIST
75220: LIST
75221: PUSH
75222: EMPTY
75223: LIST
75224: LIST
75225: PPUSH
75226: CALL_OW 447
// end ;
75230: LD_VAR 0 2
75234: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75235: LD_INT 0
75237: PPUSH
75238: PPUSH
75239: PPUSH
// tmp := [ ] ;
75240: LD_ADDR_VAR 0 5
75244: PUSH
75245: EMPTY
75246: ST_TO_ADDR
// for i in units do
75247: LD_ADDR_VAR 0 4
75251: PUSH
75252: LD_VAR 0 1
75256: PUSH
75257: FOR_IN
75258: IFFALSE 75296
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75260: LD_ADDR_VAR 0 5
75264: PUSH
75265: LD_VAR 0 5
75269: PPUSH
75270: LD_VAR 0 5
75274: PUSH
75275: LD_INT 1
75277: PLUS
75278: PPUSH
75279: LD_VAR 0 4
75283: PPUSH
75284: CALL_OW 256
75288: PPUSH
75289: CALL_OW 2
75293: ST_TO_ADDR
75294: GO 75257
75296: POP
75297: POP
// if not tmp then
75298: LD_VAR 0 5
75302: NOT
75303: IFFALSE 75307
// exit ;
75305: GO 75355
// if asc then
75307: LD_VAR 0 2
75311: IFFALSE 75335
// result := SortListByListAsc ( units , tmp ) else
75313: LD_ADDR_VAR 0 3
75317: PUSH
75318: LD_VAR 0 1
75322: PPUSH
75323: LD_VAR 0 5
75327: PPUSH
75328: CALL_OW 76
75332: ST_TO_ADDR
75333: GO 75355
// result := SortListByListDesc ( units , tmp ) ;
75335: LD_ADDR_VAR 0 3
75339: PUSH
75340: LD_VAR 0 1
75344: PPUSH
75345: LD_VAR 0 5
75349: PPUSH
75350: CALL_OW 77
75354: ST_TO_ADDR
// end ;
75355: LD_VAR 0 3
75359: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75360: LD_INT 0
75362: PPUSH
75363: PPUSH
// task := GetTaskList ( mech ) ;
75364: LD_ADDR_VAR 0 4
75368: PUSH
75369: LD_VAR 0 1
75373: PPUSH
75374: CALL_OW 437
75378: ST_TO_ADDR
// if not task then
75379: LD_VAR 0 4
75383: NOT
75384: IFFALSE 75388
// exit ;
75386: GO 75430
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75388: LD_ADDR_VAR 0 3
75392: PUSH
75393: LD_VAR 0 4
75397: PUSH
75398: LD_INT 1
75400: ARRAY
75401: PUSH
75402: LD_INT 1
75404: ARRAY
75405: PUSH
75406: LD_STRING r
75408: EQUAL
75409: PUSH
75410: LD_VAR 0 4
75414: PUSH
75415: LD_INT 1
75417: ARRAY
75418: PUSH
75419: LD_INT 4
75421: ARRAY
75422: PUSH
75423: LD_VAR 0 2
75427: EQUAL
75428: AND
75429: ST_TO_ADDR
// end ;
75430: LD_VAR 0 3
75434: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75435: LD_INT 0
75437: PPUSH
// SetDir ( unit , d ) ;
75438: LD_VAR 0 1
75442: PPUSH
75443: LD_VAR 0 4
75447: PPUSH
75448: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75452: LD_VAR 0 1
75456: PPUSH
75457: LD_VAR 0 2
75461: PPUSH
75462: LD_VAR 0 3
75466: PPUSH
75467: LD_VAR 0 5
75471: PPUSH
75472: CALL_OW 48
// end ;
75476: LD_VAR 0 6
75480: RET
// export function ToNaturalNumber ( number ) ; begin
75481: LD_INT 0
75483: PPUSH
// result := number div 1 ;
75484: LD_ADDR_VAR 0 2
75488: PUSH
75489: LD_VAR 0 1
75493: PUSH
75494: LD_INT 1
75496: DIV
75497: ST_TO_ADDR
// if number < 0 then
75498: LD_VAR 0 1
75502: PUSH
75503: LD_INT 0
75505: LESS
75506: IFFALSE 75516
// result := 0 ;
75508: LD_ADDR_VAR 0 2
75512: PUSH
75513: LD_INT 0
75515: ST_TO_ADDR
// end ;
75516: LD_VAR 0 2
75520: RET
// export function SortByClass ( units , class ) ; var un ; begin
75521: LD_INT 0
75523: PPUSH
75524: PPUSH
// if not units or not class then
75525: LD_VAR 0 1
75529: NOT
75530: PUSH
75531: LD_VAR 0 2
75535: NOT
75536: OR
75537: IFFALSE 75541
// exit ;
75539: GO 75636
// result := [ ] ;
75541: LD_ADDR_VAR 0 3
75545: PUSH
75546: EMPTY
75547: ST_TO_ADDR
// for un in units do
75548: LD_ADDR_VAR 0 4
75552: PUSH
75553: LD_VAR 0 1
75557: PUSH
75558: FOR_IN
75559: IFFALSE 75634
// if GetClass ( un ) = class then
75561: LD_VAR 0 4
75565: PPUSH
75566: CALL_OW 257
75570: PUSH
75571: LD_VAR 0 2
75575: EQUAL
75576: IFFALSE 75603
// result := Insert ( result , 1 , un ) else
75578: LD_ADDR_VAR 0 3
75582: PUSH
75583: LD_VAR 0 3
75587: PPUSH
75588: LD_INT 1
75590: PPUSH
75591: LD_VAR 0 4
75595: PPUSH
75596: CALL_OW 2
75600: ST_TO_ADDR
75601: GO 75632
// result := Replace ( result , result + 1 , un ) ;
75603: LD_ADDR_VAR 0 3
75607: PUSH
75608: LD_VAR 0 3
75612: PPUSH
75613: LD_VAR 0 3
75617: PUSH
75618: LD_INT 1
75620: PLUS
75621: PPUSH
75622: LD_VAR 0 4
75626: PPUSH
75627: CALL_OW 1
75631: ST_TO_ADDR
75632: GO 75558
75634: POP
75635: POP
// end ;
75636: LD_VAR 0 3
75640: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75641: LD_INT 0
75643: PPUSH
75644: PPUSH
75645: PPUSH
75646: PPUSH
75647: PPUSH
75648: PPUSH
75649: PPUSH
// result := [ ] ;
75650: LD_ADDR_VAR 0 4
75654: PUSH
75655: EMPTY
75656: ST_TO_ADDR
// if x - r < 0 then
75657: LD_VAR 0 1
75661: PUSH
75662: LD_VAR 0 3
75666: MINUS
75667: PUSH
75668: LD_INT 0
75670: LESS
75671: IFFALSE 75683
// min_x := 0 else
75673: LD_ADDR_VAR 0 8
75677: PUSH
75678: LD_INT 0
75680: ST_TO_ADDR
75681: GO 75699
// min_x := x - r ;
75683: LD_ADDR_VAR 0 8
75687: PUSH
75688: LD_VAR 0 1
75692: PUSH
75693: LD_VAR 0 3
75697: MINUS
75698: ST_TO_ADDR
// if y - r < 0 then
75699: LD_VAR 0 2
75703: PUSH
75704: LD_VAR 0 3
75708: MINUS
75709: PUSH
75710: LD_INT 0
75712: LESS
75713: IFFALSE 75725
// min_y := 0 else
75715: LD_ADDR_VAR 0 7
75719: PUSH
75720: LD_INT 0
75722: ST_TO_ADDR
75723: GO 75741
// min_y := y - r ;
75725: LD_ADDR_VAR 0 7
75729: PUSH
75730: LD_VAR 0 2
75734: PUSH
75735: LD_VAR 0 3
75739: MINUS
75740: ST_TO_ADDR
// max_x := x + r ;
75741: LD_ADDR_VAR 0 9
75745: PUSH
75746: LD_VAR 0 1
75750: PUSH
75751: LD_VAR 0 3
75755: PLUS
75756: ST_TO_ADDR
// max_y := y + r ;
75757: LD_ADDR_VAR 0 10
75761: PUSH
75762: LD_VAR 0 2
75766: PUSH
75767: LD_VAR 0 3
75771: PLUS
75772: ST_TO_ADDR
// for _x = min_x to max_x do
75773: LD_ADDR_VAR 0 5
75777: PUSH
75778: DOUBLE
75779: LD_VAR 0 8
75783: DEC
75784: ST_TO_ADDR
75785: LD_VAR 0 9
75789: PUSH
75790: FOR_TO
75791: IFFALSE 75892
// for _y = min_y to max_y do
75793: LD_ADDR_VAR 0 6
75797: PUSH
75798: DOUBLE
75799: LD_VAR 0 7
75803: DEC
75804: ST_TO_ADDR
75805: LD_VAR 0 10
75809: PUSH
75810: FOR_TO
75811: IFFALSE 75888
// begin if not ValidHex ( _x , _y ) then
75813: LD_VAR 0 5
75817: PPUSH
75818: LD_VAR 0 6
75822: PPUSH
75823: CALL_OW 488
75827: NOT
75828: IFFALSE 75832
// continue ;
75830: GO 75810
// if GetResourceTypeXY ( _x , _y ) then
75832: LD_VAR 0 5
75836: PPUSH
75837: LD_VAR 0 6
75841: PPUSH
75842: CALL_OW 283
75846: IFFALSE 75886
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75848: LD_ADDR_VAR 0 4
75852: PUSH
75853: LD_VAR 0 4
75857: PPUSH
75858: LD_VAR 0 4
75862: PUSH
75863: LD_INT 1
75865: PLUS
75866: PPUSH
75867: LD_VAR 0 5
75871: PUSH
75872: LD_VAR 0 6
75876: PUSH
75877: EMPTY
75878: LIST
75879: LIST
75880: PPUSH
75881: CALL_OW 1
75885: ST_TO_ADDR
// end ;
75886: GO 75810
75888: POP
75889: POP
75890: GO 75790
75892: POP
75893: POP
// end ;
75894: LD_VAR 0 4
75898: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75899: LD_INT 0
75901: PPUSH
75902: PPUSH
75903: PPUSH
75904: PPUSH
75905: PPUSH
75906: PPUSH
75907: PPUSH
75908: PPUSH
// if not units then
75909: LD_VAR 0 1
75913: NOT
75914: IFFALSE 75918
// exit ;
75916: GO 76343
// result := UnitFilter ( units , [ f_ok ] ) ;
75918: LD_ADDR_VAR 0 3
75922: PUSH
75923: LD_VAR 0 1
75927: PPUSH
75928: LD_INT 50
75930: PUSH
75931: EMPTY
75932: LIST
75933: PPUSH
75934: CALL_OW 72
75938: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75939: LD_ADDR_VAR 0 8
75943: PUSH
75944: LD_VAR 0 1
75948: PUSH
75949: LD_INT 1
75951: ARRAY
75952: PPUSH
75953: CALL_OW 255
75957: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
75958: LD_ADDR_VAR 0 10
75962: PUSH
75963: LD_INT 29
75965: PUSH
75966: LD_EXP 66
75970: PUSH
75971: EMPTY
75972: LIST
75973: LIST
75974: ST_TO_ADDR
// if not result then
75975: LD_VAR 0 3
75979: NOT
75980: IFFALSE 75984
// exit ;
75982: GO 76343
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75984: LD_ADDR_VAR 0 5
75988: PUSH
75989: LD_INT 81
75991: PUSH
75992: LD_VAR 0 8
75996: PUSH
75997: EMPTY
75998: LIST
75999: LIST
76000: PPUSH
76001: CALL_OW 69
76005: ST_TO_ADDR
// for i in result do
76006: LD_ADDR_VAR 0 4
76010: PUSH
76011: LD_VAR 0 3
76015: PUSH
76016: FOR_IN
76017: IFFALSE 76341
// begin tag := GetTag ( i ) + 1 ;
76019: LD_ADDR_VAR 0 9
76023: PUSH
76024: LD_VAR 0 4
76028: PPUSH
76029: CALL_OW 110
76033: PUSH
76034: LD_INT 1
76036: PLUS
76037: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76038: LD_ADDR_VAR 0 7
76042: PUSH
76043: LD_VAR 0 4
76047: PPUSH
76048: CALL_OW 250
76052: PPUSH
76053: LD_VAR 0 4
76057: PPUSH
76058: CALL_OW 251
76062: PPUSH
76063: LD_INT 6
76065: PPUSH
76066: CALL 75641 0 3
76070: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76071: LD_VAR 0 7
76075: PUSH
76076: LD_VAR 0 4
76080: PPUSH
76081: CALL_OW 264
76085: PUSH
76086: LD_VAR 0 10
76090: IN
76091: NOT
76092: AND
76093: IFFALSE 76132
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76095: LD_VAR 0 4
76099: PPUSH
76100: LD_VAR 0 7
76104: PUSH
76105: LD_INT 1
76107: ARRAY
76108: PUSH
76109: LD_INT 1
76111: ARRAY
76112: PPUSH
76113: LD_VAR 0 7
76117: PUSH
76118: LD_INT 1
76120: ARRAY
76121: PUSH
76122: LD_INT 2
76124: ARRAY
76125: PPUSH
76126: CALL_OW 116
76130: GO 76339
// if path > tag then
76132: LD_VAR 0 2
76136: PUSH
76137: LD_VAR 0 9
76141: GREATER
76142: IFFALSE 76309
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
76144: LD_ADDR_VAR 0 6
76148: PUSH
76149: LD_VAR 0 5
76153: PPUSH
76154: LD_INT 91
76156: PUSH
76157: LD_VAR 0 4
76161: PUSH
76162: LD_INT 12
76164: PUSH
76165: EMPTY
76166: LIST
76167: LIST
76168: LIST
76169: PPUSH
76170: CALL_OW 72
76174: ST_TO_ADDR
// if nearEnemy then
76175: LD_VAR 0 6
76179: IFFALSE 76207
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76181: LD_VAR 0 4
76185: PPUSH
76186: LD_VAR 0 6
76190: PPUSH
76191: LD_VAR 0 4
76195: PPUSH
76196: CALL_OW 74
76200: PPUSH
76201: CALL_OW 115
76205: GO 76307
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76207: LD_VAR 0 4
76211: PPUSH
76212: LD_VAR 0 2
76216: PUSH
76217: LD_VAR 0 9
76221: ARRAY
76222: PUSH
76223: LD_INT 1
76225: ARRAY
76226: PPUSH
76227: LD_VAR 0 2
76231: PUSH
76232: LD_VAR 0 9
76236: ARRAY
76237: PUSH
76238: LD_INT 2
76240: ARRAY
76241: PPUSH
76242: CALL_OW 297
76246: PUSH
76247: LD_INT 6
76249: GREATER
76250: IFFALSE 76293
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76252: LD_VAR 0 4
76256: PPUSH
76257: LD_VAR 0 2
76261: PUSH
76262: LD_VAR 0 9
76266: ARRAY
76267: PUSH
76268: LD_INT 1
76270: ARRAY
76271: PPUSH
76272: LD_VAR 0 2
76276: PUSH
76277: LD_VAR 0 9
76281: ARRAY
76282: PUSH
76283: LD_INT 2
76285: ARRAY
76286: PPUSH
76287: CALL_OW 114
76291: GO 76307
// SetTag ( i , tag ) ;
76293: LD_VAR 0 4
76297: PPUSH
76298: LD_VAR 0 9
76302: PPUSH
76303: CALL_OW 109
// end else
76307: GO 76339
// if enemy then
76309: LD_VAR 0 5
76313: IFFALSE 76339
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76315: LD_VAR 0 4
76319: PPUSH
76320: LD_VAR 0 5
76324: PPUSH
76325: LD_VAR 0 4
76329: PPUSH
76330: CALL_OW 74
76334: PPUSH
76335: CALL_OW 115
// end ;
76339: GO 76016
76341: POP
76342: POP
// end ;
76343: LD_VAR 0 3
76347: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76348: LD_INT 0
76350: PPUSH
76351: PPUSH
76352: PPUSH
// if not unit or IsInUnit ( unit ) then
76353: LD_VAR 0 1
76357: NOT
76358: PUSH
76359: LD_VAR 0 1
76363: PPUSH
76364: CALL_OW 310
76368: OR
76369: IFFALSE 76373
// exit ;
76371: GO 76464
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76373: LD_ADDR_VAR 0 4
76377: PUSH
76378: LD_VAR 0 1
76382: PPUSH
76383: CALL_OW 250
76387: PPUSH
76388: LD_VAR 0 2
76392: PPUSH
76393: LD_INT 1
76395: PPUSH
76396: CALL_OW 272
76400: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76401: LD_ADDR_VAR 0 5
76405: PUSH
76406: LD_VAR 0 1
76410: PPUSH
76411: CALL_OW 251
76415: PPUSH
76416: LD_VAR 0 2
76420: PPUSH
76421: LD_INT 1
76423: PPUSH
76424: CALL_OW 273
76428: ST_TO_ADDR
// if ValidHex ( x , y ) then
76429: LD_VAR 0 4
76433: PPUSH
76434: LD_VAR 0 5
76438: PPUSH
76439: CALL_OW 488
76443: IFFALSE 76464
// ComTurnXY ( unit , x , y ) ;
76445: LD_VAR 0 1
76449: PPUSH
76450: LD_VAR 0 4
76454: PPUSH
76455: LD_VAR 0 5
76459: PPUSH
76460: CALL_OW 118
// end ;
76464: LD_VAR 0 3
76468: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76469: LD_INT 0
76471: PPUSH
76472: PPUSH
// result := false ;
76473: LD_ADDR_VAR 0 3
76477: PUSH
76478: LD_INT 0
76480: ST_TO_ADDR
// if not units then
76481: LD_VAR 0 2
76485: NOT
76486: IFFALSE 76490
// exit ;
76488: GO 76535
// for i in units do
76490: LD_ADDR_VAR 0 4
76494: PUSH
76495: LD_VAR 0 2
76499: PUSH
76500: FOR_IN
76501: IFFALSE 76533
// if See ( side , i ) then
76503: LD_VAR 0 1
76507: PPUSH
76508: LD_VAR 0 4
76512: PPUSH
76513: CALL_OW 292
76517: IFFALSE 76531
// begin result := true ;
76519: LD_ADDR_VAR 0 3
76523: PUSH
76524: LD_INT 1
76526: ST_TO_ADDR
// exit ;
76527: POP
76528: POP
76529: GO 76535
// end ;
76531: GO 76500
76533: POP
76534: POP
// end ;
76535: LD_VAR 0 3
76539: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76540: LD_INT 0
76542: PPUSH
76543: PPUSH
76544: PPUSH
76545: PPUSH
// if not unit or not points then
76546: LD_VAR 0 1
76550: NOT
76551: PUSH
76552: LD_VAR 0 2
76556: NOT
76557: OR
76558: IFFALSE 76562
// exit ;
76560: GO 76652
// dist := 99999 ;
76562: LD_ADDR_VAR 0 5
76566: PUSH
76567: LD_INT 99999
76569: ST_TO_ADDR
// for i in points do
76570: LD_ADDR_VAR 0 4
76574: PUSH
76575: LD_VAR 0 2
76579: PUSH
76580: FOR_IN
76581: IFFALSE 76650
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76583: LD_ADDR_VAR 0 6
76587: PUSH
76588: LD_VAR 0 1
76592: PPUSH
76593: LD_VAR 0 4
76597: PUSH
76598: LD_INT 1
76600: ARRAY
76601: PPUSH
76602: LD_VAR 0 4
76606: PUSH
76607: LD_INT 2
76609: ARRAY
76610: PPUSH
76611: CALL_OW 297
76615: ST_TO_ADDR
// if tmpDist < dist then
76616: LD_VAR 0 6
76620: PUSH
76621: LD_VAR 0 5
76625: LESS
76626: IFFALSE 76648
// begin result := i ;
76628: LD_ADDR_VAR 0 3
76632: PUSH
76633: LD_VAR 0 4
76637: ST_TO_ADDR
// dist := tmpDist ;
76638: LD_ADDR_VAR 0 5
76642: PUSH
76643: LD_VAR 0 6
76647: ST_TO_ADDR
// end ; end ;
76648: GO 76580
76650: POP
76651: POP
// end ; end_of_file
76652: LD_VAR 0 3
76656: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76657: LD_VAR 0 1
76661: PUSH
76662: LD_INT 200
76664: DOUBLE
76665: GREATEREQUAL
76666: IFFALSE 76674
76668: LD_INT 299
76670: DOUBLE
76671: LESSEQUAL
76672: IFTRUE 76676
76674: GO 76708
76676: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76677: LD_VAR 0 1
76681: PPUSH
76682: LD_VAR 0 2
76686: PPUSH
76687: LD_VAR 0 3
76691: PPUSH
76692: LD_VAR 0 4
76696: PPUSH
76697: LD_VAR 0 5
76701: PPUSH
76702: CALL 32683 0 5
76706: GO 76785
76708: LD_INT 300
76710: DOUBLE
76711: GREATEREQUAL
76712: IFFALSE 76720
76714: LD_INT 399
76716: DOUBLE
76717: LESSEQUAL
76718: IFTRUE 76722
76720: GO 76784
76722: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76723: LD_VAR 0 1
76727: PPUSH
76728: LD_VAR 0 2
76732: PPUSH
76733: LD_VAR 0 3
76737: PPUSH
76738: LD_VAR 0 4
76742: PPUSH
76743: LD_VAR 0 5
76747: PPUSH
76748: LD_VAR 0 6
76752: PPUSH
76753: LD_VAR 0 7
76757: PPUSH
76758: LD_VAR 0 8
76762: PPUSH
76763: LD_VAR 0 9
76767: PPUSH
76768: LD_VAR 0 10
76772: PPUSH
76773: LD_VAR 0 11
76777: PPUSH
76778: CALL 30581 0 11
76782: GO 76785
76784: POP
// end ;
76785: PPOPN 11
76787: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76788: LD_VAR 0 1
76792: PPUSH
76793: LD_VAR 0 2
76797: PPUSH
76798: LD_VAR 0 3
76802: PPUSH
76803: LD_VAR 0 4
76807: PPUSH
76808: LD_VAR 0 5
76812: PPUSH
76813: CALL 32675 0 5
// end ; end_of_file
76817: PPOPN 5
76819: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76820: LD_VAR 0 1
76824: PPUSH
76825: LD_VAR 0 2
76829: PPUSH
76830: LD_VAR 0 3
76834: PPUSH
76835: LD_VAR 0 4
76839: PPUSH
76840: LD_VAR 0 5
76844: PPUSH
76845: LD_VAR 0 6
76849: PPUSH
76850: CALL 18776 0 6
// end ;
76854: PPOPN 6
76856: END
