// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3059 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2273 0 0
// PrepareWesternBase ;
  41: CALL 2502 0 0
// Action ;
  45: CALL 5323 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
// uc_side := 4 ;
1155: LD_ADDR_OWVAR 20
1159: PUSH
1160: LD_INT 4
1162: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1163: LD_ADDR_EXP 46
1167: PUSH
1168: LD_STRING Powell
1170: PPUSH
1171: LD_INT 0
1173: PPUSH
1174: LD_STRING 
1176: PPUSH
1177: CALL 38779 0 3
1181: ST_TO_ADDR
// uc_side := 1 ;
1182: LD_ADDR_OWVAR 20
1186: PUSH
1187: LD_INT 1
1189: ST_TO_ADDR
// uc_nation := 1 ;
1190: LD_ADDR_OWVAR 21
1194: PUSH
1195: LD_INT 1
1197: ST_TO_ADDR
// if debug then
1198: LD_EXP 1
1202: IFFALSE 1332
// begin for i = 1 to 4 do
1204: LD_ADDR_VAR 0 2
1208: PUSH
1209: DOUBLE
1210: LD_INT 1
1212: DEC
1213: ST_TO_ADDR
1214: LD_INT 4
1216: PUSH
1217: FOR_TO
1218: IFFALSE 1269
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1220: LD_INT 0
1222: PPUSH
1223: LD_INT 1
1225: PPUSH
1226: LD_INT 2
1228: PPUSH
1229: CALL_OW 12
1233: PPUSH
1234: LD_INT 3
1236: PPUSH
1237: CALL_OW 380
// un := CreateHuman ;
1241: LD_ADDR_VAR 0 3
1245: PUSH
1246: CALL_OW 44
1250: ST_TO_ADDR
// others := others ^ un ;
1251: LD_ADDR_VAR 0 5
1255: PUSH
1256: LD_VAR 0 5
1260: PUSH
1261: LD_VAR 0 3
1265: ADD
1266: ST_TO_ADDR
// end ;
1267: GO 1217
1269: POP
1270: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1271: LD_ADDR_VAR 0 6
1275: PUSH
1276: LD_INT 21
1278: PUSH
1279: LD_INT 1
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: LD_INT 51
1287: PUSH
1288: LD_INT 90
1290: PUSH
1291: LD_INT 504
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 21
1304: PUSH
1305: LD_INT 1
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: LD_INT 51
1313: PUSH
1314: LD_INT 80
1316: PUSH
1317: LD_INT 750
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1332: LD_ADDR_EXP 37
1336: PUSH
1337: LD_STRING JMM
1339: PPUSH
1340: LD_EXP 1
1344: NOT
1345: PPUSH
1346: LD_EXP 3
1350: PPUSH
1351: CALL 38779 0 3
1355: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1356: LD_ADDR_EXP 38
1360: PUSH
1361: LD_STRING Bobby
1363: PPUSH
1364: LD_EXP 1
1368: NOT
1369: PPUSH
1370: LD_EXP 3
1374: PPUSH
1375: CALL 38779 0 3
1379: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1380: LD_ADDR_EXP 39
1384: PUSH
1385: LD_STRING Cyrus
1387: PPUSH
1388: LD_EXP 1
1392: NOT
1393: PPUSH
1394: LD_EXP 3
1398: PPUSH
1399: CALL 38779 0 3
1403: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1404: LD_ADDR_EXP 40
1408: PUSH
1409: LD_STRING Lisa
1411: PPUSH
1412: LD_EXP 1
1416: NOT
1417: PPUSH
1418: LD_EXP 3
1422: PPUSH
1423: CALL 38779 0 3
1427: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1428: LD_ADDR_EXP 41
1432: PUSH
1433: LD_STRING Khatam
1435: PPUSH
1436: LD_EXP 1
1440: NOT
1441: PPUSH
1442: LD_EXP 3
1446: PPUSH
1447: CALL 38779 0 3
1451: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1452: LD_ADDR_EXP 42
1456: PUSH
1457: LD_STRING Brian
1459: PPUSH
1460: LD_EXP 1
1464: NOT
1465: PPUSH
1466: LD_EXP 3
1470: PPUSH
1471: CALL 38779 0 3
1475: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1476: LD_ADDR_EXP 43
1480: PUSH
1481: LD_STRING Jerry
1483: PPUSH
1484: LD_EXP 1
1488: NOT
1489: PPUSH
1490: LD_EXP 3
1494: PPUSH
1495: CALL 38779 0 3
1499: ST_TO_ADDR
// if Bobby then
1500: LD_EXP 38
1504: IFFALSE 1535
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1506: LD_ADDR_VAR 0 4
1510: PUSH
1511: LD_VAR 0 4
1515: PPUSH
1516: LD_VAR 0 4
1520: PUSH
1521: LD_INT 1
1523: PLUS
1524: PPUSH
1525: LD_EXP 38
1529: PPUSH
1530: CALL_OW 2
1534: ST_TO_ADDR
// if Cyrus then
1535: LD_EXP 39
1539: IFFALSE 1570
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_VAR 0 4
1550: PPUSH
1551: LD_VAR 0 4
1555: PUSH
1556: LD_INT 1
1558: PLUS
1559: PPUSH
1560: LD_EXP 39
1564: PPUSH
1565: CALL_OW 2
1569: ST_TO_ADDR
// if Lisa then
1570: LD_EXP 40
1574: IFFALSE 1605
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1576: LD_ADDR_VAR 0 4
1580: PUSH
1581: LD_VAR 0 4
1585: PPUSH
1586: LD_VAR 0 4
1590: PUSH
1591: LD_INT 1
1593: PLUS
1594: PPUSH
1595: LD_EXP 40
1599: PPUSH
1600: CALL_OW 2
1604: ST_TO_ADDR
// if Khatam then
1605: LD_EXP 41
1609: IFFALSE 1640
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1611: LD_ADDR_VAR 0 4
1615: PUSH
1616: LD_VAR 0 4
1620: PPUSH
1621: LD_VAR 0 4
1625: PUSH
1626: LD_INT 1
1628: PLUS
1629: PPUSH
1630: LD_EXP 41
1634: PPUSH
1635: CALL_OW 2
1639: ST_TO_ADDR
// if Brian then
1640: LD_EXP 42
1644: IFFALSE 1675
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1646: LD_ADDR_VAR 0 4
1650: PUSH
1651: LD_VAR 0 4
1655: PPUSH
1656: LD_VAR 0 4
1660: PUSH
1661: LD_INT 1
1663: PLUS
1664: PPUSH
1665: LD_EXP 42
1669: PPUSH
1670: CALL_OW 2
1674: ST_TO_ADDR
// if Jerry then
1675: LD_EXP 43
1679: IFFALSE 1710
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1681: LD_ADDR_VAR 0 4
1685: PUSH
1686: LD_VAR 0 4
1690: PPUSH
1691: LD_VAR 0 4
1695: PUSH
1696: LD_INT 1
1698: PLUS
1699: PPUSH
1700: LD_EXP 43
1704: PPUSH
1705: CALL_OW 2
1709: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1710: LD_STRING 02_other_survivors
1712: PPUSH
1713: CALL_OW 28
1717: IFFALSE 1732
// others := CreateCharacterSet ( 02_other_survivors ) ;
1719: LD_ADDR_VAR 0 5
1723: PUSH
1724: LD_STRING 02_other_survivors
1726: PPUSH
1727: CALL_OW 31
1731: ST_TO_ADDR
// if others then
1732: LD_VAR 0 5
1736: IFFALSE 1761
// begin tmp := tmp ^ others ;
1738: LD_ADDR_VAR 0 4
1742: PUSH
1743: LD_VAR 0 4
1747: PUSH
1748: LD_VAR 0 5
1752: ADD
1753: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1754: LD_STRING 02_other_survivors
1756: PPUSH
1757: CALL_OW 40
// end ; jmm_units := tmp ;
1761: LD_ADDR_EXP 4
1765: PUSH
1766: LD_VAR 0 4
1770: ST_TO_ADDR
// if not vehicles then
1771: LD_VAR 0 6
1775: NOT
1776: IFFALSE 1794
// vehicles := LoadVariable ( 02_tanks_1 , 0 ) ;
1778: LD_ADDR_VAR 0 6
1782: PUSH
1783: LD_STRING 02_tanks_1
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: CALL_OW 30
1793: ST_TO_ADDR
// if vehicles then
1794: LD_VAR 0 6
1798: IFFALSE 1992
// begin got_mech := false ;
1800: LD_ADDR_VAR 0 7
1804: PUSH
1805: LD_INT 0
1807: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
1808: LD_VAR 0 4
1812: PPUSH
1813: LD_INT 25
1815: PUSH
1816: LD_INT 3
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PPUSH
1823: CALL_OW 72
1827: IFFALSE 1837
// got_mech := true ;
1829: LD_ADDR_VAR 0 7
1833: PUSH
1834: LD_INT 1
1836: ST_TO_ADDR
// for i = 1 to vehicles do
1837: LD_ADDR_VAR 0 2
1841: PUSH
1842: DOUBLE
1843: LD_INT 1
1845: DEC
1846: ST_TO_ADDR
1847: LD_VAR 0 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1990
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
1855: LD_ADDR_VAR 0 3
1859: PUSH
1860: LD_INT 1
1862: PPUSH
1863: LD_INT 3
1865: PPUSH
1866: LD_VAR 0 6
1870: PUSH
1871: LD_VAR 0 2
1875: ARRAY
1876: PUSH
1877: LD_INT 1
1879: ARRAY
1880: PPUSH
1881: LD_VAR 0 6
1885: PUSH
1886: LD_VAR 0 2
1890: ARRAY
1891: PUSH
1892: LD_INT 2
1894: ARRAY
1895: PPUSH
1896: LD_VAR 0 6
1900: PUSH
1901: LD_VAR 0 2
1905: ARRAY
1906: PUSH
1907: LD_INT 3
1909: ARRAY
1910: PPUSH
1911: LD_VAR 0 6
1915: PUSH
1916: LD_VAR 0 2
1920: ARRAY
1921: PUSH
1922: LD_INT 4
1924: ARRAY
1925: PPUSH
1926: LD_INT 40
1928: PPUSH
1929: CALL 497 0 7
1933: ST_TO_ADDR
// if not got_mech then
1934: LD_VAR 0 7
1938: NOT
1939: IFFALSE 1965
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
1941: LD_VAR 0 3
1945: PPUSH
1946: LD_VAR 0 6
1950: PUSH
1951: LD_VAR 0 2
1955: ARRAY
1956: PUSH
1957: LD_INT 6
1959: ARRAY
1960: PPUSH
1961: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
1965: LD_ADDR_VAR 0 4
1969: PUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: LD_VAR 0 3
1982: PPUSH
1983: CALL_OW 2
1987: ST_TO_ADDR
// end ;
1988: GO 1852
1990: POP
1991: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
1992: LD_EXP 37
1996: PPUSH
1997: LD_INT 194
1999: PPUSH
2000: LD_INT 119
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL_OW 48
// if tmp then
2010: LD_VAR 0 4
2014: IFFALSE 2202
// begin for i in tmp do
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: LD_VAR 0 4
2025: PUSH
2026: FOR_IN
2027: IFFALSE 2200
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2029: LD_VAR 0 2
2033: PPUSH
2034: CALL_OW 257
2038: PUSH
2039: LD_INT 1
2041: NONEQUAL
2042: PUSH
2043: LD_VAR 0 2
2047: PUSH
2048: LD_EXP 41
2052: NONEQUAL
2053: AND
2054: IFFALSE 2068
// SetClass ( i , 1 ) ;
2056: LD_VAR 0 2
2060: PPUSH
2061: LD_INT 1
2063: PPUSH
2064: CALL_OW 336
// if i = Khatam then
2068: LD_VAR 0 2
2072: PUSH
2073: LD_EXP 41
2077: EQUAL
2078: IFFALSE 2092
// SetClass ( i , 4 ) ;
2080: LD_VAR 0 2
2084: PPUSH
2085: LD_INT 4
2087: PPUSH
2088: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2092: LD_ADDR_VAR 0 8
2096: PUSH
2097: LD_INT 22
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 21
2109: PUSH
2110: LD_INT 2
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 58
2119: PUSH
2120: EMPTY
2121: LIST
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: PPUSH
2128: CALL_OW 69
2132: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2133: LD_VAR 0 2
2137: PPUSH
2138: CALL_OW 247
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: PUSH
2147: LD_VAR 0 8
2151: AND
2152: IFFALSE 2174
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2154: LD_VAR 0 2
2158: PPUSH
2159: LD_VAR 0 8
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: CALL_OW 52
2172: GO 2189
// PlaceUnitArea ( i , startArea , false ) ;
2174: LD_VAR 0 2
2178: PPUSH
2179: LD_INT 1
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 49
// ComHold ( i ) ;
2189: LD_VAR 0 2
2193: PPUSH
2194: CALL_OW 140
// end ;
2198: GO 2026
2200: POP
2201: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2202: LD_ADDR_EXP 7
2206: PUSH
2207: LD_STRING 02_mikhailStatus_1
2209: PPUSH
2210: LD_INT 0
2212: PPUSH
2213: CALL_OW 30
2217: ST_TO_ADDR
// if not bierezov_exist and not debug then
2218: LD_EXP 7
2222: NOT
2223: PUSH
2224: LD_EXP 1
2228: NOT
2229: AND
2230: IFFALSE 2234
// exit ;
2232: GO 2268
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2234: LD_ADDR_EXP 45
2238: PUSH
2239: LD_STRING Mikhail
2241: PPUSH
2242: LD_INT 0
2244: PPUSH
2245: LD_STRING 
2247: PPUSH
2248: CALL 38779 0 3
2252: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2253: LD_EXP 45
2257: PPUSH
2258: LD_INT 1
2260: PPUSH
2261: LD_INT 0
2263: PPUSH
2264: CALL_OW 49
// end ;
2268: LD_VAR 0 1
2272: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2273: LD_INT 0
2275: PPUSH
2276: PPUSH
2277: PPUSH
2278: PPUSH
// uc_side := 4 ;
2279: LD_ADDR_OWVAR 20
2283: PUSH
2284: LD_INT 4
2286: ST_TO_ADDR
// uc_nation := 1 ;
2287: LD_ADDR_OWVAR 21
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2295: LD_ADDR_EXP 44
2299: PUSH
2300: LD_STRING Cornell
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: LD_STRING 
2308: PPUSH
2309: CALL 38779 0 3
2313: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2314: LD_ADDR_EXP 6
2318: PUSH
2319: LD_INT 9
2321: PUSH
2322: LD_EXP 4
2326: MINUS
2327: ST_TO_ADDR
// tmp := [ ] ;
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: EMPTY
2334: ST_TO_ADDR
// if cornel_units < 4 then
2335: LD_EXP 6
2339: PUSH
2340: LD_INT 4
2342: LESS
2343: IFFALSE 2353
// cornel_units := 4 ;
2345: LD_ADDR_EXP 6
2349: PUSH
2350: LD_INT 4
2352: ST_TO_ADDR
// for i = 1 to cornel_units do
2353: LD_ADDR_VAR 0 4
2357: PUSH
2358: DOUBLE
2359: LD_INT 1
2361: DEC
2362: ST_TO_ADDR
2363: LD_EXP 6
2367: PUSH
2368: FOR_TO
2369: IFFALSE 2467
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2371: LD_INT 0
2373: PPUSH
2374: LD_INT 1
2376: PUSH
2377: LD_INT 1
2379: PUSH
2380: LD_INT 1
2382: PUSH
2383: LD_INT 2
2385: PUSH
2386: LD_INT 4
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: PUSH
2396: LD_VAR 0 4
2400: PUSH
2401: LD_INT 5
2403: MOD
2404: PUSH
2405: LD_INT 1
2407: PLUS
2408: ARRAY
2409: PPUSH
2410: LD_INT 2
2412: PPUSH
2413: CALL_OW 380
// un := CreateHuman ;
2417: LD_ADDR_VAR 0 3
2421: PUSH
2422: CALL_OW 44
2426: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_VAR 0 2
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_VAR 0 3
2444: PPUSH
2445: CALL_OW 2
2449: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2450: LD_VAR 0 3
2454: PPUSH
2455: LD_INT 2
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: CALL_OW 49
// end ;
2465: GO 2368
2467: POP
2468: POP
// cornel_units := tmp ;
2469: LD_ADDR_EXP 6
2473: PUSH
2474: LD_VAR 0 2
2478: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2479: LD_EXP 44
2483: PPUSH
2484: LD_INT 191
2486: PPUSH
2487: LD_INT 106
2489: PPUSH
2490: LD_INT 0
2492: PPUSH
2493: CALL_OW 48
// end ;
2497: LD_VAR 0 1
2501: RET
// export function PrepareWesternBase ; var i ; begin
2502: LD_INT 0
2504: PPUSH
2505: PPUSH
// uc_side := 8 ;
2506: LD_ADDR_OWVAR 20
2510: PUSH
2511: LD_INT 8
2513: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2514: LD_ADDR_EXP 47
2518: PUSH
2519: LD_STRING Lynch
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: LD_STRING 
2527: PPUSH
2528: CALL 38779 0 3
2532: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2533: LD_ADDR_EXP 48
2537: PUSH
2538: LD_STRING Walker
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: LD_STRING 
2546: PPUSH
2547: CALL 38779 0 3
2551: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2552: LD_ADDR_EXP 49
2556: PUSH
2557: LD_STRING Turner
2559: PPUSH
2560: LD_INT 0
2562: PPUSH
2563: LD_STRING 
2565: PPUSH
2566: CALL 38779 0 3
2570: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2571: LD_ADDR_EXP 50
2575: PUSH
2576: LD_STRING Jillian
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: LD_STRING 
2584: PPUSH
2585: CALL 38779 0 3
2589: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: LD_EXP 47
2599: PUSH
2600: LD_EXP 48
2604: PUSH
2605: LD_EXP 49
2609: PUSH
2610: LD_EXP 50
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: PUSH
2621: FOR_IN
2622: IFFALSE 2650
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
2624: LD_VAR 0 2
2628: PPUSH
2629: LD_INT 3
2631: PPUSH
2632: LD_INT 0
2634: PPUSH
2635: CALL_OW 49
// ComHold ( i ) ;
2639: LD_VAR 0 2
2643: PPUSH
2644: CALL_OW 140
// end ;
2648: GO 2621
2650: POP
2651: POP
// end ;
2652: LD_VAR 0 1
2656: RET
// export function SelectGroup ; var units , selected , i ; begin
2657: LD_INT 0
2659: PPUSH
2660: PPUSH
2661: PPUSH
2662: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
2663: LD_ADDR_VAR 0 2
2667: PUSH
2668: LD_EXP 37
2672: PUSH
2673: LD_INT -3
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PUSH
2680: LD_EXP 4
2684: ADD
2685: PUSH
2686: LD_INT -2
2688: PUSH
2689: LD_INT -4
2691: PUSH
2692: LD_EXP 44
2696: PUSH
2697: LD_EXP 45
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: ADD
2708: PUSH
2709: LD_INT -3
2711: PUSH
2712: EMPTY
2713: LIST
2714: ADD
2715: PUSH
2716: LD_EXP 6
2720: ADD
2721: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
2722: LD_ADDR_VAR 0 3
2726: PUSH
2727: LD_EXP 37
2731: PUSH
2732: LD_STRING Select four characters to go with you
2734: PPUSH
2735: LD_INT 4
2737: PPUSH
2738: LD_INT 4
2740: PPUSH
2741: LD_VAR 0 2
2745: PPUSH
2746: EMPTY
2747: PPUSH
2748: CALL_OW 42
2752: ADD
2753: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
2754: LD_ADDR_EXP 6
2758: PUSH
2759: LD_EXP 4
2763: PUSH
2764: LD_EXP 6
2768: UNION
2769: PUSH
2770: LD_VAR 0 3
2774: DIFF
2775: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_EXP 6
2785: PUSH
2786: LD_EXP 45
2790: ADD
2791: PUSH
2792: FOR_IN
2793: IFFALSE 2824
// if GetSide ( i ) = 1 then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 255
2804: PUSH
2805: LD_INT 1
2807: EQUAL
2808: IFFALSE 2822
// SetSide ( i , 4 ) ;
2810: LD_VAR 0 4
2814: PPUSH
2815: LD_INT 4
2817: PPUSH
2818: CALL_OW 235
2822: GO 2792
2824: POP
2825: POP
// for i in selected do
2826: LD_ADDR_VAR 0 4
2830: PUSH
2831: LD_VAR 0 3
2835: PUSH
2836: FOR_IN
2837: IFFALSE 2868
// if GetSide ( i ) = 4 then
2839: LD_VAR 0 4
2843: PPUSH
2844: CALL_OW 255
2848: PUSH
2849: LD_INT 4
2851: EQUAL
2852: IFFALSE 2866
// SetSide ( i , 1 ) ;
2854: LD_VAR 0 4
2858: PPUSH
2859: LD_INT 1
2861: PPUSH
2862: CALL_OW 235
2866: GO 2836
2868: POP
2869: POP
// jmm_units := jmm_units diff cornel_units ;
2870: LD_ADDR_EXP 4
2874: PUSH
2875: LD_EXP 4
2879: PUSH
2880: LD_EXP 6
2884: DIFF
2885: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
2886: LD_EXP 38
2890: PPUSH
2891: CALL_OW 255
2895: PUSH
2896: LD_INT 4
2898: EQUAL
2899: IFFALSE 2914
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
2901: LD_EXP 3
2905: PUSH
2906: LD_STRING Bobby
2908: STR
2909: PPUSH
2910: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
2914: LD_EXP 39
2918: PPUSH
2919: CALL_OW 255
2923: PUSH
2924: LD_INT 4
2926: EQUAL
2927: IFFALSE 2942
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
2929: LD_EXP 3
2933: PUSH
2934: LD_STRING Cyrus
2936: STR
2937: PPUSH
2938: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
2942: LD_EXP 40
2946: PPUSH
2947: CALL_OW 255
2951: PUSH
2952: LD_INT 4
2954: EQUAL
2955: IFFALSE 2970
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
2957: LD_EXP 3
2961: PUSH
2962: LD_STRING Lisa
2964: STR
2965: PPUSH
2966: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
2970: LD_EXP 41
2974: PPUSH
2975: CALL_OW 255
2979: PUSH
2980: LD_INT 4
2982: EQUAL
2983: IFFALSE 2998
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
2985: LD_EXP 3
2989: PUSH
2990: LD_STRING Khatam
2992: STR
2993: PPUSH
2994: CALL_OW 40
// if GetSide ( Brian ) = 4 then
2998: LD_EXP 42
3002: PPUSH
3003: CALL_OW 255
3007: PUSH
3008: LD_INT 4
3010: EQUAL
3011: IFFALSE 3026
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3013: LD_EXP 3
3017: PUSH
3018: LD_STRING Brian
3020: STR
3021: PPUSH
3022: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3026: LD_EXP 43
3030: PPUSH
3031: CALL_OW 255
3035: PUSH
3036: LD_INT 4
3038: EQUAL
3039: IFFALSE 3054
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3041: LD_EXP 3
3045: PUSH
3046: LD_STRING Jerry
3048: STR
3049: PPUSH
3050: CALL_OW 40
// end ; end_of_file
3054: LD_VAR 0 1
3058: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3059: LD_INT 0
3061: PPUSH
3062: PPUSH
3063: PPUSH
3064: PPUSH
3065: PPUSH
3066: PPUSH
3067: PPUSH
3068: PPUSH
3069: PPUSH
3070: PPUSH
3071: PPUSH
3072: PPUSH
3073: PPUSH
// ru_alert := false ;
3074: LD_ADDR_EXP 60
3078: PUSH
3079: LD_INT 0
3081: ST_TO_ADDR
// ru_produce_list := [ ] ;
3082: LD_ADDR_EXP 57
3086: PUSH
3087: EMPTY
3088: ST_TO_ADDR
// if Difficulty > 1 then
3089: LD_OWVAR 67
3093: PUSH
3094: LD_INT 1
3096: GREATER
3097: IFFALSE 3185
// begin uc_side := 3 ;
3099: LD_ADDR_OWVAR 20
3103: PUSH
3104: LD_INT 3
3106: ST_TO_ADDR
// uc_nation := 3 ;
3107: LD_ADDR_OWVAR 21
3111: PUSH
3112: LD_INT 3
3114: ST_TO_ADDR
// bc_type := b_breastwork ;
3115: LD_ADDR_OWVAR 42
3119: PUSH
3120: LD_INT 31
3122: ST_TO_ADDR
// bc_level := Difficulty ;
3123: LD_ADDR_OWVAR 43
3127: PUSH
3128: LD_OWVAR 67
3132: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3133: LD_INT 22
3135: PPUSH
3136: LD_INT 14
3138: PPUSH
3139: LD_INT 0
3141: PPUSH
3142: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3146: LD_INT 48
3148: PPUSH
3149: LD_INT 46
3151: PPUSH
3152: LD_INT 0
3154: PPUSH
3155: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3159: LD_INT 86
3161: PPUSH
3162: LD_INT 65
3164: PPUSH
3165: LD_INT 5
3167: PPUSH
3168: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3172: LD_INT 165
3174: PPUSH
3175: LD_INT 73
3177: PPUSH
3178: LD_INT 5
3180: PPUSH
3181: CALL_OW 47
// end ; if Difficulty >= 3 then
3185: LD_OWVAR 67
3189: PUSH
3190: LD_INT 3
3192: GREATEREQUAL
3193: IFFALSE 3208
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3195: LD_INT 51
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: LD_INT 2
3203: PPUSH
3204: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3208: LD_ADDR_VAR 0 7
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: LD_INT 3
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 2
3225: PUSH
3226: LD_INT 30
3228: PUSH
3229: LD_INT 31
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: LD_INT 30
3238: PUSH
3239: LD_INT 32
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: LIST
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PPUSH
3255: CALL_OW 69
3259: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3260: LD_ADDR_VAR 0 8
3264: PUSH
3265: LD_INT 22
3267: PUSH
3268: LD_INT 3
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 30
3277: PUSH
3278: LD_INT 4
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: PPUSH
3289: CALL_OW 69
3293: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3294: LD_ADDR_VAR 0 10
3298: PUSH
3299: LD_INT 22
3301: PUSH
3302: LD_INT 3
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: LD_INT 30
3311: PUSH
3312: LD_INT 3
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PPUSH
3323: CALL_OW 69
3327: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3328: LD_ADDR_VAR 0 9
3332: PUSH
3333: LD_INT 22
3335: PUSH
3336: LD_INT 3
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 30
3345: PUSH
3346: LD_INT 6
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PPUSH
3357: CALL_OW 69
3361: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3362: LD_ADDR_VAR 0 2
3366: PUSH
3367: LD_INT 22
3369: PUSH
3370: LD_INT 3
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 30
3379: PUSH
3380: LD_INT 1
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PPUSH
3391: CALL_OW 69
3395: PUSH
3396: FOR_IN
3397: IFFALSE 3441
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3399: LD_VAR 0 2
3403: PPUSH
3404: CALL_OW 274
3408: PPUSH
3409: LD_INT 1
3411: PPUSH
3412: LD_INT 1000
3414: PPUSH
3415: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3419: LD_VAR 0 2
3423: PPUSH
3424: CALL_OW 274
3428: PPUSH
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 300
3434: PPUSH
3435: CALL_OW 277
// end ;
3439: GO 3396
3441: POP
3442: POP
// uc_side := 3 ;
3443: LD_ADDR_OWVAR 20
3447: PUSH
3448: LD_INT 3
3450: ST_TO_ADDR
// uc_nation := 3 ;
3451: LD_ADDR_OWVAR 21
3455: PUSH
3456: LD_INT 3
3458: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3459: LD_ADDR_VAR 0 11
3463: PUSH
3464: LD_INT 2
3466: PUSH
3467: LD_INT 3
3469: PUSH
3470: LD_INT 4
3472: PUSH
3473: LD_INT 4
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: PUSH
3482: LD_OWVAR 67
3486: ARRAY
3487: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3488: LD_ADDR_EXP 52
3492: PUSH
3493: LD_STRING Pokryshkin
3495: PPUSH
3496: LD_INT 0
3498: PPUSH
3499: LD_STRING 
3501: PPUSH
3502: CALL 38779 0 3
3506: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3507: LD_EXP 52
3511: PPUSH
3512: LD_INT 63
3514: PPUSH
3515: LD_INT 21
3517: PPUSH
3518: LD_INT 0
3520: PPUSH
3521: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3525: LD_EXP 52
3529: PPUSH
3530: CALL_OW 140
// InitHc ;
3534: CALL_OW 19
// for i in fac do
3538: LD_ADDR_VAR 0 2
3542: PUSH
3543: LD_VAR 0 10
3547: PUSH
3548: FOR_IN
3549: IFFALSE 3602
// begin for j = 1 to 6 do
3551: LD_ADDR_VAR 0 3
3555: PUSH
3556: DOUBLE
3557: LD_INT 1
3559: DEC
3560: ST_TO_ADDR
3561: LD_INT 6
3563: PUSH
3564: FOR_TO
3565: IFFALSE 3598
// begin PrepareHuman ( false , 3 , skill ) ;
3567: LD_INT 0
3569: PPUSH
3570: LD_INT 3
3572: PPUSH
3573: LD_VAR 0 11
3577: PPUSH
3578: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3582: CALL_OW 44
3586: PPUSH
3587: LD_VAR 0 2
3591: PPUSH
3592: CALL_OW 52
// end ;
3596: GO 3564
3598: POP
3599: POP
// end ;
3600: GO 3548
3602: POP
3603: POP
// for i in lab do
3604: LD_ADDR_VAR 0 2
3608: PUSH
3609: LD_VAR 0 9
3613: PUSH
3614: FOR_IN
3615: IFFALSE 3648
// begin PrepareHuman ( false , 4 , skill ) ;
3617: LD_INT 0
3619: PPUSH
3620: LD_INT 4
3622: PPUSH
3623: LD_VAR 0 11
3627: PPUSH
3628: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3632: CALL_OW 44
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 52
// end ;
3646: GO 3614
3648: POP
3649: POP
// for i in tw do
3650: LD_ADDR_VAR 0 2
3654: PUSH
3655: LD_VAR 0 7
3659: PUSH
3660: FOR_IN
3661: IFFALSE 3710
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
3663: LD_VAR 0 2
3667: PPUSH
3668: LD_INT 42
3670: PUSH
3671: LD_INT 43
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 1
3680: PPUSH
3681: LD_INT 2
3683: PPUSH
3684: CALL_OW 12
3688: ARRAY
3689: PPUSH
3690: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
3694: LD_VAR 0 11
3698: PPUSH
3699: LD_VAR 0 2
3703: PPUSH
3704: CALL 775 0 2
// end ;
3708: GO 3660
3710: POP
3711: POP
// for i in bar do
3712: LD_ADDR_VAR 0 2
3716: PUSH
3717: LD_VAR 0 8
3721: PUSH
3722: FOR_IN
3723: IFFALSE 3756
// begin PrepareHuman ( false , 1 , skill ) ;
3725: LD_INT 0
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_VAR 0 11
3735: PPUSH
3736: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3740: CALL_OW 44
3744: PPUSH
3745: LD_VAR 0 2
3749: PPUSH
3750: CALL_OW 52
// end ;
3754: GO 3722
3756: POP
3757: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
3758: LD_ADDR_VAR 0 13
3762: PUSH
3763: LD_INT 100
3765: PUSH
3766: LD_INT 9
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PUSH
3773: LD_INT 135
3775: PUSH
3776: LD_INT 60
3778: PUSH
3779: EMPTY
3780: LIST
3781: LIST
3782: PUSH
3783: LD_INT 41
3785: PUSH
3786: LD_INT 6
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: PUSH
3793: LD_INT 22
3795: PUSH
3796: LD_INT 9
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PUSH
3803: LD_INT 84
3805: PUSH
3806: LD_INT 14
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: ST_TO_ADDR
// vehicles := [ ] ;
3820: LD_ADDR_VAR 0 12
3824: PUSH
3825: EMPTY
3826: ST_TO_ADDR
// for i in spot_xy do
3827: LD_ADDR_VAR 0 2
3831: PUSH
3832: LD_VAR 0 13
3836: PUSH
3837: FOR_IN
3838: IFFALSE 3996
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
3840: LD_ADDR_VAR 0 6
3844: PUSH
3845: LD_INT 3
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 22
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: LD_INT 42
3862: PUSH
3863: LD_INT 43
3865: PUSH
3866: LD_INT 44
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 1
3876: PPUSH
3877: LD_INT 3
3879: PPUSH
3880: CALL_OW 12
3884: ARRAY
3885: PPUSH
3886: LD_INT 100
3888: PPUSH
3889: CALL 497 0 7
3893: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
3894: LD_ADDR_VAR 0 12
3898: PUSH
3899: LD_VAR 0 12
3903: PPUSH
3904: LD_VAR 0 12
3908: PUSH
3909: LD_INT 1
3911: PLUS
3912: PPUSH
3913: LD_VAR 0 6
3917: PPUSH
3918: CALL_OW 2
3922: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3923: LD_VAR 0 6
3927: PPUSH
3928: LD_INT 3
3930: PPUSH
3931: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
3935: LD_VAR 0 6
3939: PPUSH
3940: LD_VAR 0 2
3944: PUSH
3945: LD_INT 1
3947: ARRAY
3948: PPUSH
3949: LD_VAR 0 2
3953: PUSH
3954: LD_INT 2
3956: ARRAY
3957: PPUSH
3958: LD_INT 0
3960: PPUSH
3961: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
3965: LD_INT 0
3967: PPUSH
3968: LD_INT 3
3970: PPUSH
3971: LD_VAR 0 11
3975: PPUSH
3976: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3980: CALL_OW 44
3984: PPUSH
3985: LD_VAR 0 6
3989: PPUSH
3990: CALL_OW 52
// end ;
3994: GO 3837
3996: POP
3997: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
3998: LD_ADDR_VAR 0 2
4002: PUSH
4003: DOUBLE
4004: LD_INT 1
4006: DEC
4007: ST_TO_ADDR
4008: LD_INT 5
4010: PUSH
4011: LD_INT 7
4013: PUSH
4014: LD_INT 8
4016: PUSH
4017: LD_INT 9
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: PUSH
4026: LD_OWVAR 67
4030: ARRAY
4031: PUSH
4032: FOR_TO
4033: IFFALSE 4093
// begin PrepareHuman ( false , 1 , skill ) ;
4035: LD_INT 0
4037: PPUSH
4038: LD_INT 1
4040: PPUSH
4041: LD_VAR 0 11
4045: PPUSH
4046: CALL_OW 380
// un := CreateHuman ;
4050: LD_ADDR_VAR 0 5
4054: PUSH
4055: CALL_OW 44
4059: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4060: LD_VAR 0 5
4064: PPUSH
4065: LD_INT 11
4067: PPUSH
4068: LD_INT 0
4070: PPUSH
4071: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4075: LD_ADDR_EXP 55
4079: PUSH
4080: LD_EXP 55
4084: PUSH
4085: LD_VAR 0 5
4089: ADD
4090: ST_TO_ADDR
// end ;
4091: GO 4032
4093: POP
4094: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4095: LD_ADDR_VAR 0 2
4099: PUSH
4100: DOUBLE
4101: LD_INT 1
4103: DEC
4104: ST_TO_ADDR
4105: LD_INT 2
4107: PUSH
4108: LD_INT 3
4110: PUSH
4111: LD_INT 4
4113: PUSH
4114: LD_INT 5
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: LD_OWVAR 67
4127: ARRAY
4128: PUSH
4129: FOR_TO
4130: IFFALSE 4190
// begin PrepareHuman ( false , 1 , skill ) ;
4132: LD_INT 0
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: LD_VAR 0 11
4142: PPUSH
4143: CALL_OW 380
// un := CreateHuman ;
4147: LD_ADDR_VAR 0 5
4151: PUSH
4152: CALL_OW 44
4156: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4157: LD_VAR 0 5
4161: PPUSH
4162: LD_INT 12
4164: PPUSH
4165: LD_INT 0
4167: PPUSH
4168: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4172: LD_ADDR_EXP 53
4176: PUSH
4177: LD_EXP 53
4181: PUSH
4182: LD_VAR 0 5
4186: ADD
4187: ST_TO_ADDR
// end ;
4188: GO 4129
4190: POP
4191: POP
// for i = 1 to 2 do
4192: LD_ADDR_VAR 0 2
4196: PUSH
4197: DOUBLE
4198: LD_INT 1
4200: DEC
4201: ST_TO_ADDR
4202: LD_INT 2
4204: PUSH
4205: FOR_TO
4206: IFFALSE 4272
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4208: LD_INT 1
4210: PPUSH
4211: LD_INT 1
4213: PPUSH
4214: LD_VAR 0 11
4218: PPUSH
4219: CALL_OW 380
// un := CreateHuman ;
4223: LD_ADDR_VAR 0 5
4227: PUSH
4228: CALL_OW 44
4232: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4233: LD_VAR 0 5
4237: PPUSH
4238: LD_INT 39
4240: PPUSH
4241: LD_INT 12
4243: PPUSH
4244: LD_INT 3
4246: PPUSH
4247: LD_INT 0
4249: PPUSH
4250: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4254: LD_ADDR_EXP 54
4258: PUSH
4259: LD_EXP 54
4263: PUSH
4264: LD_VAR 0 5
4268: ADD
4269: ST_TO_ADDR
// end ;
4270: GO 4205
4272: POP
4273: POP
// for i = 1 to 3 do
4274: LD_ADDR_VAR 0 2
4278: PUSH
4279: DOUBLE
4280: LD_INT 1
4282: DEC
4283: ST_TO_ADDR
4284: LD_INT 3
4286: PUSH
4287: FOR_TO
4288: IFFALSE 4354
// begin PrepareHuman ( false , 1 , skill ) ;
4290: LD_INT 0
4292: PPUSH
4293: LD_INT 1
4295: PPUSH
4296: LD_VAR 0 11
4300: PPUSH
4301: CALL_OW 380
// un := CreateHuman ;
4305: LD_ADDR_VAR 0 5
4309: PUSH
4310: CALL_OW 44
4314: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4315: LD_VAR 0 5
4319: PPUSH
4320: LD_INT 180
4322: PPUSH
4323: LD_INT 11
4325: PPUSH
4326: LD_INT 4
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4336: LD_ADDR_EXP 58
4340: PUSH
4341: LD_EXP 58
4345: PUSH
4346: LD_VAR 0 5
4350: ADD
4351: ST_TO_ADDR
// end ;
4352: GO 4287
4354: POP
4355: POP
// ru_vehicles := vehicles ;
4356: LD_ADDR_EXP 56
4360: PUSH
4361: LD_VAR 0 12
4365: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4366: LD_ADDR_EXP 59
4370: PUSH
4371: LD_INT 131
4373: PUSH
4374: LD_INT 121
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_INT 113
4383: PUSH
4384: LD_INT 90
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: LD_INT 93
4393: PUSH
4394: LD_INT 62
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 106
4408: PUSH
4409: LD_INT 54
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 120
4418: PUSH
4419: LD_INT 80
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 143
4428: PUSH
4429: LD_INT 120
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 154
4443: PUSH
4444: LD_INT 116
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 140
4453: PUSH
4454: LD_INT 93
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: LD_INT 130
4463: PUSH
4464: LD_INT 58
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: LD_INT 105
4478: PUSH
4479: LD_INT 106
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 134
4488: PUSH
4489: LD_INT 98
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 159
4498: PUSH
4499: LD_INT 113
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: LIST
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: ST_TO_ADDR
// if Difficulty = 1 then
4517: LD_OWVAR 67
4521: PUSH
4522: LD_INT 1
4524: EQUAL
4525: IFFALSE 4529
// exit ;
4527: GO 4584
// for i = 1 to Difficulty - 1 do
4529: LD_ADDR_VAR 0 2
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_OWVAR 67
4543: PUSH
4544: LD_INT 1
4546: MINUS
4547: PUSH
4548: FOR_TO
4549: IFFALSE 4582
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
4551: LD_ADDR_EXP 57
4555: PUSH
4556: LD_EXP 57
4560: PUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: LD_INT 1
4569: PUSH
4570: LD_INT 43
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: ADD
4579: ST_TO_ADDR
4580: GO 4548
4582: POP
4583: POP
// end ;
4584: LD_VAR 0 1
4588: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
4589: LD_INT 22
4591: PUSH
4592: LD_INT 3
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: PUSH
4599: LD_INT 21
4601: PUSH
4602: LD_INT 2
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PPUSH
4613: CALL_OW 69
4617: IFFALSE 4711
4619: GO 4621
4621: DISABLE
4622: LD_INT 0
4624: PPUSH
4625: PPUSH
// begin enable ;
4626: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4627: LD_ADDR_VAR 0 2
4631: PUSH
4632: LD_INT 22
4634: PUSH
4635: LD_INT 3
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 21
4644: PUSH
4645: LD_INT 2
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PPUSH
4656: CALL_OW 69
4660: ST_TO_ADDR
// if filter then
4661: LD_VAR 0 2
4665: IFFALSE 4711
// for i in filter do
4667: LD_ADDR_VAR 0 1
4671: PUSH
4672: LD_VAR 0 2
4676: PUSH
4677: FOR_IN
4678: IFFALSE 4709
// if GetFuel ( i ) < 20 then
4680: LD_VAR 0 1
4684: PPUSH
4685: CALL_OW 261
4689: PUSH
4690: LD_INT 20
4692: LESS
4693: IFFALSE 4707
// SetFuel ( i , 20 ) ;
4695: LD_VAR 0 1
4699: PPUSH
4700: LD_INT 20
4702: PPUSH
4703: CALL_OW 240
4707: GO 4677
4709: POP
4710: POP
// end ;
4711: PPOPN 2
4713: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
4714: LD_EXP 57
4718: IFFALSE 4937
4720: GO 4722
4722: DISABLE
4723: LD_INT 0
4725: PPUSH
4726: PPUSH
4727: PPUSH
// begin enable ;
4728: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4729: LD_ADDR_VAR 0 2
4733: PUSH
4734: LD_INT 22
4736: PUSH
4737: LD_INT 3
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 30
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PPUSH
4758: CALL_OW 69
4762: ST_TO_ADDR
// can_produce := [ ] ;
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: EMPTY
4769: ST_TO_ADDR
// if not fac then
4770: LD_VAR 0 2
4774: NOT
4775: IFFALSE 4780
// begin disable ;
4777: DISABLE
// exit ;
4778: GO 4937
// end ; for i in fac do
4780: LD_ADDR_VAR 0 1
4784: PUSH
4785: LD_VAR 0 2
4789: PUSH
4790: FOR_IN
4791: IFFALSE 4829
// if UnitsInside ( i ) then
4793: LD_VAR 0 1
4797: PPUSH
4798: CALL_OW 313
4802: IFFALSE 4827
// can_produce := Insert ( can_produce , 1 , i ) ;
4804: LD_ADDR_VAR 0 3
4808: PUSH
4809: LD_VAR 0 3
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: LD_VAR 0 1
4821: PPUSH
4822: CALL_OW 2
4826: ST_TO_ADDR
4827: GO 4790
4829: POP
4830: POP
// if not can_produce then
4831: LD_VAR 0 3
4835: NOT
4836: IFFALSE 4840
// exit ;
4838: GO 4937
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
4840: LD_VAR 0 3
4844: PUSH
4845: LD_INT 1
4847: PPUSH
4848: LD_VAR 0 3
4852: PPUSH
4853: CALL_OW 12
4857: ARRAY
4858: PPUSH
4859: LD_EXP 57
4863: PUSH
4864: LD_INT 1
4866: ARRAY
4867: PPUSH
4868: LD_EXP 57
4872: PUSH
4873: LD_INT 2
4875: ARRAY
4876: PPUSH
4877: LD_EXP 57
4881: PUSH
4882: LD_INT 3
4884: ARRAY
4885: PPUSH
4886: LD_EXP 57
4890: PUSH
4891: LD_INT 4
4893: ARRAY
4894: PPUSH
4895: CALL_OW 125
// for i = 1 to 4 do
4899: LD_ADDR_VAR 0 1
4903: PUSH
4904: DOUBLE
4905: LD_INT 1
4907: DEC
4908: ST_TO_ADDR
4909: LD_INT 4
4911: PUSH
4912: FOR_TO
4913: IFFALSE 4935
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
4915: LD_ADDR_EXP 57
4919: PUSH
4920: LD_EXP 57
4924: PPUSH
4925: LD_INT 1
4927: PPUSH
4928: CALL_OW 3
4932: ST_TO_ADDR
4933: GO 4912
4935: POP
4936: POP
// end ;
4937: PPOPN 3
4939: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
4940: LD_INT 0
4942: PPUSH
4943: PPUSH
4944: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4945: LD_ADDR_VAR 0 2
4949: PUSH
4950: DOUBLE
4951: LD_INT 1
4953: DEC
4954: ST_TO_ADDR
4955: LD_INT 2
4957: PUSH
4958: LD_INT 3
4960: PUSH
4961: LD_INT 4
4963: PUSH
4964: LD_INT 4
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: LD_OWVAR 67
4977: ARRAY
4978: PUSH
4979: FOR_TO
4980: IFFALSE 5129
// begin PrepareHuman ( false , 3 , 3 ) ;
4982: LD_INT 0
4984: PPUSH
4985: LD_INT 3
4987: PPUSH
4988: LD_INT 3
4990: PPUSH
4991: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
4995: LD_ADDR_VAR 0 3
4999: PUSH
5000: LD_INT 3
5002: PPUSH
5003: LD_INT 3
5005: PPUSH
5006: LD_INT 22
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: LD_INT 1
5014: PPUSH
5015: LD_INT 43
5017: PUSH
5018: LD_INT 42
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: PUSH
5025: LD_INT 1
5027: PPUSH
5028: LD_INT 2
5030: PPUSH
5031: CALL_OW 12
5035: ARRAY
5036: PPUSH
5037: LD_INT 70
5039: PPUSH
5040: CALL 497 0 7
5044: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5045: LD_VAR 0 3
5049: PPUSH
5050: LD_INT 4
5052: PPUSH
5053: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5057: LD_VAR 0 3
5061: PPUSH
5062: LD_INT 229
5064: PPUSH
5065: LD_INT 44
5067: PPUSH
5068: LD_INT 0
5070: PPUSH
5071: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5075: CALL_OW 44
5079: PPUSH
5080: LD_VAR 0 3
5084: PPUSH
5085: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5089: LD_ADDR_EXP 56
5093: PUSH
5094: LD_EXP 56
5098: PUSH
5099: LD_VAR 0 3
5103: ADD
5104: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5105: LD_VAR 0 3
5109: PPUSH
5110: LD_INT 191
5112: PPUSH
5113: LD_INT 32
5115: PPUSH
5116: CALL_OW 111
// Wait ( 0 0$02 ) ;
5120: LD_INT 70
5122: PPUSH
5123: CALL_OW 67
// end ;
5127: GO 4979
5129: POP
5130: POP
// end ;
5131: LD_VAR 0 1
5135: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5136: LD_EXP 31
5140: PUSH
5141: LD_EXP 56
5145: AND
5146: IFFALSE 5320
5148: GO 5150
5150: DISABLE
5151: LD_INT 0
5153: PPUSH
5154: PPUSH
5155: PPUSH
// begin wait ( 0 0$50 ) ;
5156: LD_INT 1750
5158: PPUSH
5159: CALL_OW 67
// tmp := ru_vehicles ;
5163: LD_ADDR_VAR 0 3
5167: PUSH
5168: LD_EXP 56
5172: ST_TO_ADDR
// if not tmp then
5173: LD_VAR 0 3
5177: NOT
5178: IFFALSE 5182
// exit ;
5180: GO 5320
// repeat wait ( 0 0$1 ) ;
5182: LD_INT 35
5184: PPUSH
5185: CALL_OW 67
// for i in tmp do
5189: LD_ADDR_VAR 0 1
5193: PUSH
5194: LD_VAR 0 3
5198: PUSH
5199: FOR_IN
5200: IFFALSE 5311
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5202: LD_ADDR_VAR 0 2
5206: PUSH
5207: LD_INT 22
5209: PUSH
5210: LD_INT 1
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PPUSH
5217: LD_VAR 0 1
5221: PPUSH
5222: CALL_OW 74
5226: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5227: LD_VAR 0 1
5231: PPUSH
5232: LD_VAR 0 2
5236: PPUSH
5237: CALL_OW 296
5241: PUSH
5242: LD_INT 10
5244: GREATER
5245: IFFALSE 5264
// ComAgressiveMove ( i , 69 , 101 ) else
5247: LD_VAR 0 1
5251: PPUSH
5252: LD_INT 69
5254: PPUSH
5255: LD_INT 101
5257: PPUSH
5258: CALL_OW 114
5262: GO 5278
// ComAttackUnit ( i , enemy ) ;
5264: LD_VAR 0 1
5268: PPUSH
5269: LD_VAR 0 2
5273: PPUSH
5274: CALL_OW 115
// if GetLives ( i ) < 250 then
5278: LD_VAR 0 1
5282: PPUSH
5283: CALL_OW 256
5287: PUSH
5288: LD_INT 250
5290: LESS
5291: IFFALSE 5309
// tmp := tmp diff i ;
5293: LD_ADDR_VAR 0 3
5297: PUSH
5298: LD_VAR 0 3
5302: PUSH
5303: LD_VAR 0 1
5307: DIFF
5308: ST_TO_ADDR
// end ;
5309: GO 5199
5311: POP
5312: POP
// until not tmp ;
5313: LD_VAR 0 3
5317: NOT
5318: IFFALSE 5182
// end ; end_of_file
5320: PPOPN 3
5322: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5323: LD_INT 0
5325: PPUSH
5326: PPUSH
5327: PPUSH
5328: PPUSH
5329: PPUSH
5330: PPUSH
5331: PPUSH
// InGameOn ;
5332: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5336: LD_EXP 37
5340: PPUSH
5341: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5345: LD_EXP 37
5349: PPUSH
5350: LD_EXP 44
5354: PPUSH
5355: CALL_OW 119
// if Bierezov then
5359: LD_EXP 45
5363: IFFALSE 5379
// ComTurnUnit ( Bierezov , Cornel ) ;
5365: LD_EXP 45
5369: PPUSH
5370: LD_EXP 44
5374: PPUSH
5375: CALL_OW 119
// for i in jmm_units do
5379: LD_ADDR_VAR 0 2
5383: PUSH
5384: LD_EXP 4
5388: PUSH
5389: FOR_IN
5390: IFFALSE 5408
// ComTurnUnit ( i , Cornel ) ;
5392: LD_VAR 0 2
5396: PPUSH
5397: LD_EXP 44
5401: PPUSH
5402: CALL_OW 119
5406: GO 5389
5408: POP
5409: POP
// units := cornel_units union Cornel ;
5410: LD_ADDR_VAR 0 3
5414: PUSH
5415: LD_EXP 6
5419: PUSH
5420: LD_EXP 44
5424: UNION
5425: ST_TO_ADDR
// repeat wait ( 1 ) ;
5426: LD_INT 1
5428: PPUSH
5429: CALL_OW 67
// for i in units do
5433: LD_ADDR_VAR 0 2
5437: PUSH
5438: LD_VAR 0 3
5442: PUSH
5443: FOR_IN
5444: IFFALSE 5477
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5446: LD_VAR 0 2
5450: PPUSH
5451: LD_EXP 37
5455: PPUSH
5456: CALL_OW 250
5460: PPUSH
5461: LD_EXP 37
5465: PPUSH
5466: CALL_OW 251
5470: PPUSH
5471: CALL_OW 111
5475: GO 5443
5477: POP
5478: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5479: LD_VAR 0 3
5483: PPUSH
5484: LD_INT 92
5486: PUSH
5487: LD_EXP 37
5491: PPUSH
5492: CALL_OW 250
5496: PUSH
5497: LD_EXP 37
5501: PPUSH
5502: CALL_OW 251
5506: PUSH
5507: LD_INT 10
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: PPUSH
5516: CALL_OW 72
5520: PUSH
5521: LD_VAR 0 3
5525: EQUAL
5526: IFFALSE 5426
// for i in units do
5528: LD_ADDR_VAR 0 2
5532: PUSH
5533: LD_VAR 0 3
5537: PUSH
5538: FOR_IN
5539: IFFALSE 5557
// ComTurnUnit ( i , JMM ) ;
5541: LD_VAR 0 2
5545: PPUSH
5546: LD_EXP 37
5550: PPUSH
5551: CALL_OW 119
5555: GO 5538
5557: POP
5558: POP
// ComTurnUnit ( Cornel , JMM ) ;
5559: LD_EXP 44
5563: PPUSH
5564: LD_EXP 37
5568: PPUSH
5569: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
5573: LD_EXP 37
5577: PPUSH
5578: LD_STRING D1-JMM-1
5580: PPUSH
5581: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
5585: LD_EXP 44
5589: PPUSH
5590: LD_STRING D1-Corn-1
5592: PPUSH
5593: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
5597: LD_EXP 37
5601: PPUSH
5602: LD_EXP 44
5606: PPUSH
5607: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
5611: LD_EXP 44
5615: PPUSH
5616: LD_EXP 37
5620: PPUSH
5621: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
5625: LD_INT 35
5627: PPUSH
5628: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
5632: LD_EXP 37
5636: PPUSH
5637: LD_EXP 44
5641: PPUSH
5642: CALL_OW 296
5646: PUSH
5647: LD_INT 6
5649: LESS
5650: IFFALSE 5625
// ChangeSideFog ( 4 , 1 ) ;
5652: LD_INT 4
5654: PPUSH
5655: LD_INT 1
5657: PPUSH
5658: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
5662: LD_EXP 37
5666: PPUSH
5667: LD_EXP 44
5671: PPUSH
5672: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5676: LD_EXP 44
5680: PPUSH
5681: LD_EXP 37
5685: PPUSH
5686: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
5690: LD_EXP 37
5694: PPUSH
5695: LD_STRING D1-JMM-2
5697: PPUSH
5698: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
5702: LD_EXP 37
5706: PPUSH
5707: LD_STRING D1-JMM-2a
5709: PPUSH
5710: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
5714: LD_EXP 44
5718: PPUSH
5719: LD_STRING D1-Corn-2
5721: PPUSH
5722: CALL_OW 88
// if bierezov_exist or debug then
5726: LD_EXP 7
5730: PUSH
5731: LD_EXP 1
5735: OR
5736: IFFALSE 5977
// begin ComTurnUnit ( Cornel , Bierezov ) ;
5738: LD_EXP 44
5742: PPUSH
5743: LD_EXP 45
5747: PPUSH
5748: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
5752: LD_INT 10
5754: PPUSH
5755: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
5759: LD_EXP 44
5763: PPUSH
5764: LD_STRING D1a-Corn-1
5766: PPUSH
5767: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
5771: LD_EXP 37
5775: PPUSH
5776: LD_EXP 45
5780: PPUSH
5781: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
5785: LD_EXP 45
5789: PPUSH
5790: LD_EXP 37
5794: PPUSH
5795: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
5799: LD_EXP 37
5803: PPUSH
5804: LD_STRING D1a-JMM-1
5806: PPUSH
5807: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
5811: LD_EXP 37
5815: PPUSH
5816: LD_EXP 44
5820: PPUSH
5821: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5825: LD_EXP 44
5829: PPUSH
5830: LD_EXP 37
5834: PPUSH
5835: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
5839: LD_EXP 44
5843: PPUSH
5844: LD_STRING D1a-Corn-2
5846: PPUSH
5847: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
5851: LD_EXP 37
5855: PPUSH
5856: LD_STRING D1a-JMM-2
5858: PPUSH
5859: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
5863: LD_EXP 44
5867: PPUSH
5868: LD_STRING D1a-Corn-3
5870: PPUSH
5871: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
5875: LD_EXP 37
5879: PPUSH
5880: LD_STRING D1a-JMM-3
5882: PPUSH
5883: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
5887: LD_EXP 44
5891: PPUSH
5892: LD_STRING D1a-Corn-4
5894: PPUSH
5895: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
5899: LD_EXP 37
5903: PPUSH
5904: LD_STRING D1a-JMM-4
5906: PPUSH
5907: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
5911: LD_EXP 44
5915: PPUSH
5916: LD_STRING D1a-Corn-5
5918: PPUSH
5919: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
5923: LD_EXP 45
5927: PPUSH
5928: LD_EXP 44
5932: PPUSH
5933: CALL_OW 250
5937: PPUSH
5938: LD_EXP 44
5942: PPUSH
5943: CALL_OW 251
5947: PUSH
5948: LD_INT 2
5950: MINUS
5951: PPUSH
5952: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
5956: LD_EXP 45
5960: PPUSH
5961: LD_EXP 44
5965: PPUSH
5966: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
5970: LD_INT 10
5972: PPUSH
5973: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
5977: LD_EXP 37
5981: PPUSH
5982: LD_STRING D1b-JMM-1
5984: PPUSH
5985: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
5989: LD_EXP 44
5993: PPUSH
5994: LD_STRING D1b-Corn-1
5996: PPUSH
5997: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6001: LD_EXP 37
6005: PPUSH
6006: LD_STRING D1b-JMM-2
6008: PPUSH
6009: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6013: LD_EXP 44
6017: PPUSH
6018: LD_STRING D1b-Corn-2
6020: PPUSH
6021: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6025: LD_EXP 37
6029: PPUSH
6030: LD_STRING D1b-JMM-3
6032: PPUSH
6033: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6037: LD_INT 10
6039: PPUSH
6040: CALL_OW 67
// SayRadio ( Powell , D1b-Pow-3 ) ;
6044: LD_EXP 46
6048: PPUSH
6049: LD_STRING D1b-Pow-3
6051: PPUSH
6052: CALL_OW 94
// Say ( JMM , D1b-JMM-4 ) ;
6056: LD_EXP 37
6060: PPUSH
6061: LD_STRING D1b-JMM-4
6063: PPUSH
6064: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6068: LD_EXP 44
6072: PPUSH
6073: LD_STRING D1b-Corn-4
6075: PPUSH
6076: CALL_OW 88
// if Khatam then
6080: LD_EXP 41
6084: IFFALSE 6100
// Say ( Khatam , D1b-Khat-4 ) else
6086: LD_EXP 41
6090: PPUSH
6091: LD_STRING D1b-Khat-4
6093: PPUSH
6094: CALL_OW 88
6098: GO 6136
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6100: LD_EXP 6
6104: PPUSH
6105: LD_INT 26
6107: PUSH
6108: LD_INT 1
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PPUSH
6115: CALL_OW 72
6119: PUSH
6120: LD_EXP 44
6124: PUSH
6125: EMPTY
6126: LIST
6127: DIFF
6128: PPUSH
6129: LD_STRING D1b-Sol1-4
6131: PPUSH
6132: CALL 585 0 2
// if Cyrus then
6136: LD_EXP 39
6140: IFFALSE 6154
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6142: LD_EXP 39
6146: PPUSH
6147: LD_STRING D1b-Cyrus-4
6149: PPUSH
6150: CALL_OW 88
// if Lisa then
6154: LD_EXP 40
6158: IFFALSE 6216
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6160: LD_EXP 40
6164: PPUSH
6165: LD_STRING D1b-Lisa-4
6167: PPUSH
6168: CALL_OW 88
// if Cyrus then
6172: LD_EXP 39
6176: IFFALSE 6216
// begin if not IsInUnit ( Cyrus ) then
6178: LD_EXP 39
6182: PPUSH
6183: CALL_OW 310
6187: NOT
6188: IFFALSE 6204
// ComTurnUnit ( Cyrus , Lisa ) ;
6190: LD_EXP 39
6194: PPUSH
6195: LD_EXP 40
6199: PPUSH
6200: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6204: LD_EXP 39
6208: PPUSH
6209: LD_STRING D1b-Cyrus-5
6211: PPUSH
6212: CALL_OW 88
// end ; end ; SelectGroup ;
6216: CALL 2657 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6220: LD_EXP 37
6224: PPUSH
6225: LD_STRING D1d-JMM-1
6227: PPUSH
6228: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6232: LD_EXP 44
6236: PPUSH
6237: LD_STRING D1d-Corn-1
6239: PPUSH
6240: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6244: LD_ADDR_VAR 0 2
6248: PUSH
6249: LD_EXP 4
6253: PUSH
6254: LD_EXP 6
6258: ADD
6259: PUSH
6260: LD_EXP 37
6264: ADD
6265: PUSH
6266: FOR_IN
6267: IFFALSE 6280
// ComHold ( i ) ;
6269: LD_VAR 0 2
6273: PPUSH
6274: CALL_OW 140
6278: GO 6266
6280: POP
6281: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6282: LD_ADDR_VAR 0 4
6286: PUSH
6287: LD_INT 22
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 21
6299: PUSH
6300: LD_INT 2
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PPUSH
6311: CALL_OW 69
6315: ST_TO_ADDR
// if vehicles then
6316: LD_VAR 0 4
6320: IFFALSE 6658
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6322: LD_EXP 6
6326: PPUSH
6327: LD_INT 55
6329: PUSH
6330: EMPTY
6331: LIST
6332: PPUSH
6333: CALL_OW 72
6337: IFFALSE 6376
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6339: LD_ADDR_VAR 0 2
6343: PUSH
6344: LD_EXP 6
6348: PPUSH
6349: LD_INT 55
6351: PUSH
6352: EMPTY
6353: LIST
6354: PPUSH
6355: CALL_OW 72
6359: PUSH
6360: FOR_IN
6361: IFFALSE 6374
// ComExitVehicle ( i ) ;
6363: LD_VAR 0 2
6367: PPUSH
6368: CALL_OW 121
6372: GO 6360
6374: POP
6375: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6376: LD_ADDR_VAR 0 5
6380: PUSH
6381: LD_VAR 0 4
6385: PPUSH
6386: LD_INT 34
6388: PUSH
6389: LD_INT 51
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 72
6400: ST_TO_ADDR
// if cargos then
6401: LD_VAR 0 5
6405: IFFALSE 6588
// begin vehicles := cargos ;
6407: LD_ADDR_VAR 0 4
6411: PUSH
6412: LD_VAR 0 5
6416: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6417: LD_ADDR_VAR 0 6
6421: PUSH
6422: LD_STRING 02_resources_4
6424: PPUSH
6425: LD_INT 0
6427: PPUSH
6428: CALL_OW 30
6432: ST_TO_ADDR
// if debug and not resources then
6433: LD_EXP 1
6437: PUSH
6438: LD_VAR 0 6
6442: NOT
6443: AND
6444: IFFALSE 6454
// resources := 160 ;
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: LD_INT 160
6453: ST_TO_ADDR
// if resources mod 10 then
6454: LD_VAR 0 6
6458: PUSH
6459: LD_INT 10
6461: MOD
6462: IFFALSE 6484
// resources := resources - resources mod 10 ;
6464: LD_ADDR_VAR 0 6
6468: PUSH
6469: LD_VAR 0 6
6473: PUSH
6474: LD_VAR 0 6
6478: PUSH
6479: LD_INT 10
6481: MOD
6482: MINUS
6483: ST_TO_ADDR
// if resources then
6484: LD_VAR 0 6
6488: IFFALSE 6588
// for i in cargos do
6490: LD_ADDR_VAR 0 2
6494: PUSH
6495: LD_VAR 0 5
6499: PUSH
6500: FOR_IN
6501: IFFALSE 6586
// begin if resources < 100 then
6503: LD_VAR 0 6
6507: PUSH
6508: LD_INT 100
6510: LESS
6511: IFFALSE 6533
// begin cargo := resources ;
6513: LD_ADDR_VAR 0 7
6517: PUSH
6518: LD_VAR 0 6
6522: ST_TO_ADDR
// resources := 0 ;
6523: LD_ADDR_VAR 0 6
6527: PUSH
6528: LD_INT 0
6530: ST_TO_ADDR
// end else
6531: GO 6555
// begin cargo := 100 ;
6533: LD_ADDR_VAR 0 7
6537: PUSH
6538: LD_INT 100
6540: ST_TO_ADDR
// resources := resources - 100 ;
6541: LD_ADDR_VAR 0 6
6545: PUSH
6546: LD_VAR 0 6
6550: PUSH
6551: LD_INT 100
6553: MINUS
6554: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
6555: LD_VAR 0 2
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: LD_VAR 0 7
6567: PPUSH
6568: CALL_OW 290
// if resources = 0 then
6572: LD_VAR 0 6
6576: PUSH
6577: LD_INT 0
6579: EQUAL
6580: IFFALSE 6584
// break ;
6582: GO 6586
// end ;
6584: GO 6500
6586: POP
6587: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
6588: LD_VAR 0 4
6592: PUSH
6593: LD_INT 1
6595: ARRAY
6596: PPUSH
6597: CALL_OW 311
6601: PPUSH
6602: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
6606: LD_VAR 0 4
6610: PUSH
6611: LD_INT 1
6613: ARRAY
6614: PPUSH
6615: LD_INT 4
6617: PPUSH
6618: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
6622: LD_EXP 44
6626: PPUSH
6627: LD_VAR 0 4
6631: PUSH
6632: LD_INT 1
6634: ARRAY
6635: PPUSH
6636: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
6640: LD_INT 35
6642: PPUSH
6643: CALL_OW 67
// until IsInUnit ( Cornel ) ;
6647: LD_EXP 44
6651: PPUSH
6652: CALL_OW 310
6656: IFFALSE 6640
// end ; InGameOff ;
6658: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6662: LD_STRING M1
6664: PPUSH
6665: CALL_OW 337
// SaveForQuickRestart ;
6669: CALL_OW 22
// cornel_active := true ;
6673: LD_ADDR_EXP 8
6677: PUSH
6678: LD_INT 1
6680: ST_TO_ADDR
// end ;
6681: LD_VAR 0 1
6685: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
6686: LD_EXP 37
6690: PPUSH
6691: LD_EXP 47
6695: PPUSH
6696: CALL_OW 296
6700: PUSH
6701: LD_INT 10
6703: LESS
6704: IFFALSE 8087
6706: GO 6708
6708: DISABLE
6709: LD_INT 0
6711: PPUSH
6712: PPUSH
6713: PPUSH
6714: PPUSH
6715: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
6716: LD_ADDR_VAR 0 2
6720: PUSH
6721: LD_INT 89
6723: PUSH
6724: LD_INT 34
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: LD_INT 138
6733: PUSH
6734: LD_INT 63
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 196
6743: PUSH
6744: LD_INT 84
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 135
6753: PUSH
6754: LD_INT 52
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 103
6763: PUSH
6764: LD_INT 39
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 58
6773: PUSH
6774: LD_INT 30
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 38
6783: PUSH
6784: LD_INT 51
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: ST_TO_ADDR
// Video ( true ) ;
6800: LD_INT 1
6802: PPUSH
6803: CALL 76152 0 1
// if jmm_units then
6807: LD_EXP 4
6811: IFFALSE 6887
// for i in jmm_units do
6813: LD_ADDR_VAR 0 1
6817: PUSH
6818: LD_EXP 4
6822: PUSH
6823: FOR_IN
6824: IFFALSE 6885
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
6826: LD_VAR 0 1
6830: PPUSH
6831: LD_EXP 37
6835: PPUSH
6836: CALL_OW 296
6840: PUSH
6841: LD_INT 10
6843: LESS
6844: PUSH
6845: LD_VAR 0 1
6849: PPUSH
6850: CALL_OW 310
6854: NOT
6855: AND
6856: IFFALSE 6874
// ComTurnUnit ( i , JMM ) else
6858: LD_VAR 0 1
6862: PPUSH
6863: LD_EXP 37
6867: PPUSH
6868: CALL_OW 119
6872: GO 6883
// ComHold ( i ) ;
6874: LD_VAR 0 1
6878: PPUSH
6879: CALL_OW 140
// end ;
6883: GO 6823
6885: POP
6886: POP
// if IsInUnit ( JMM ) then
6887: LD_EXP 37
6891: PPUSH
6892: CALL_OW 310
6896: IFFALSE 6921
// begin ComExitVehicle ( JMM ) ;
6898: LD_EXP 37
6902: PPUSH
6903: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
6907: LD_EXP 37
6911: PPUSH
6912: LD_EXP 47
6916: PPUSH
6917: CALL_OW 172
// end ; Wait ( 10 ) ;
6921: LD_INT 10
6923: PPUSH
6924: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
6928: LD_EXP 37
6932: PPUSH
6933: LD_EXP 47
6937: PPUSH
6938: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
6942: LD_INT 35
6944: PPUSH
6945: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
6949: LD_EXP 37
6953: PPUSH
6954: LD_EXP 47
6958: PPUSH
6959: CALL_OW 296
6963: PUSH
6964: LD_INT 6
6966: LESS
6967: IFFALSE 6942
// ComTurnUnit ( JMM , Lynch ) ;
6969: LD_EXP 37
6973: PPUSH
6974: LD_EXP 47
6978: PPUSH
6979: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
6983: LD_ADDR_VAR 0 1
6987: PUSH
6988: LD_EXP 47
6992: PUSH
6993: LD_EXP 48
6997: PUSH
6998: LD_EXP 49
7002: PUSH
7003: LD_EXP 50
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: PUSH
7014: FOR_IN
7015: IFFALSE 7033
// ComTurnUnit ( i , JMM ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: LD_EXP 37
7026: PPUSH
7027: CALL_OW 119
7031: GO 7014
7033: POP
7034: POP
// Wait ( 0 0$0.3 ) ;
7035: LD_INT 10
7037: PPUSH
7038: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7042: LD_EXP 37
7046: PPUSH
7047: LD_STRING D2-JMM-1
7049: PPUSH
7050: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7054: LD_EXP 47
7058: PPUSH
7059: LD_STRING D2-Sol1-1
7061: PPUSH
7062: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7066: LD_EXP 37
7070: PPUSH
7071: LD_STRING D2-JMM-2
7073: PPUSH
7074: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7078: LD_EXP 47
7082: PPUSH
7083: LD_STRING D2-Sol1-2
7085: PPUSH
7086: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7090: LD_EXP 37
7094: PPUSH
7095: LD_STRING D2-JMM-3
7097: PPUSH
7098: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7102: LD_EXP 47
7106: PPUSH
7107: LD_STRING D2-Sol1-3
7109: PPUSH
7110: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7114: LD_ADDR_VAR 0 1
7118: PUSH
7119: LD_INT 22
7121: PUSH
7122: LD_INT 8
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PPUSH
7129: CALL_OW 69
7133: PUSH
7134: FOR_IN
7135: IFFALSE 7151
// SetSide ( i , 1 ) ;
7137: LD_VAR 0 1
7141: PPUSH
7142: LD_INT 1
7144: PPUSH
7145: CALL_OW 235
7149: GO 7134
7151: POP
7152: POP
// Say ( JMM , D2-JMM-4 ) ;
7153: LD_EXP 37
7157: PPUSH
7158: LD_STRING D2-JMM-4
7160: PPUSH
7161: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7165: LD_INT 1
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 332
// for i = 1 to points do
7175: LD_ADDR_VAR 0 1
7179: PUSH
7180: DOUBLE
7181: LD_INT 1
7183: DEC
7184: ST_TO_ADDR
7185: LD_VAR 0 2
7189: PUSH
7190: FOR_TO
7191: IFFALSE 7366
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7193: LD_VAR 0 2
7197: PUSH
7198: LD_VAR 0 1
7202: ARRAY
7203: PUSH
7204: LD_INT 1
7206: ARRAY
7207: PPUSH
7208: LD_VAR 0 2
7212: PUSH
7213: LD_VAR 0 1
7217: ARRAY
7218: PUSH
7219: LD_INT 2
7221: ARRAY
7222: PPUSH
7223: CALL_OW 84
// if i = 1 then
7227: LD_VAR 0 1
7231: PUSH
7232: LD_INT 1
7234: EQUAL
7235: IFFALSE 7249
// Say ( Lynch , D2-Sol1-4 ) ;
7237: LD_EXP 47
7241: PPUSH
7242: LD_STRING D2-Sol1-4
7244: PPUSH
7245: CALL_OW 88
// if i = 2 then
7249: LD_VAR 0 1
7253: PUSH
7254: LD_INT 2
7256: EQUAL
7257: IFFALSE 7271
// Say ( JMM , D2-JMM-5 ) ;
7259: LD_EXP 37
7263: PPUSH
7264: LD_STRING D2-JMM-5
7266: PPUSH
7267: CALL_OW 88
// if i = 4 then
7271: LD_VAR 0 1
7275: PUSH
7276: LD_INT 4
7278: EQUAL
7279: IFFALSE 7303
// begin RevealFogArea ( 1 , troopsArea ) ;
7281: LD_INT 1
7283: PPUSH
7284: LD_INT 6
7286: PPUSH
7287: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7291: LD_EXP 47
7295: PPUSH
7296: LD_STRING D2-Sol1-5
7298: PPUSH
7299: CALL_OW 88
// end ; if i = 5 then
7303: LD_VAR 0 1
7307: PUSH
7308: LD_INT 5
7310: EQUAL
7311: IFFALSE 7325
// Say ( JMM , D2-JMM-6 ) ;
7313: LD_EXP 37
7317: PPUSH
7318: LD_STRING D2-JMM-6
7320: PPUSH
7321: CALL_OW 88
// if i = 7 then
7325: LD_VAR 0 1
7329: PUSH
7330: LD_INT 7
7332: EQUAL
7333: IFFALSE 7357
// begin RevealFogArea ( 1 , forestArea ) ;
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 7
7340: PPUSH
7341: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7345: LD_EXP 47
7349: PPUSH
7350: LD_STRING D2-Sol1-6
7352: PPUSH
7353: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7357: LD_INT 46
7359: PPUSH
7360: CALL_OW 67
// end ;
7364: GO 7190
7366: POP
7367: POP
// CenterNowOnUnits ( JMM ) ;
7368: LD_EXP 37
7372: PPUSH
7373: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7377: LD_EXP 37
7381: PPUSH
7382: LD_STRING D2-JMM-7
7384: PPUSH
7385: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7389: LD_EXP 47
7393: PPUSH
7394: LD_STRING D2-Sol1-7
7396: PPUSH
7397: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7401: LD_EXP 37
7405: PPUSH
7406: LD_STRING D2-JMM-8
7408: PPUSH
7409: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7413: LD_ADDR_VAR 0 4
7417: PUSH
7418: LD_INT 22
7420: PUSH
7421: LD_INT 1
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 30
7430: PUSH
7431: LD_INT 31
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PPUSH
7442: CALL_OW 69
7446: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7447: LD_EXP 47
7451: PPUSH
7452: LD_VAR 0 4
7456: PUSH
7457: LD_INT 1
7459: ARRAY
7460: PPUSH
7461: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7465: LD_INT 65
7467: PPUSH
7468: LD_INT 101
7470: PPUSH
7471: CALL_OW 428
7475: IFFALSE 7498
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7477: LD_INT 65
7479: PPUSH
7480: LD_INT 101
7482: PPUSH
7483: CALL_OW 428
7487: PPUSH
7488: LD_INT 75
7490: PPUSH
7491: LD_INT 100
7493: PPUSH
7494: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7498: LD_INT 66
7500: PPUSH
7501: LD_INT 103
7503: PPUSH
7504: CALL_OW 428
7508: IFFALSE 7531
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7510: LD_INT 66
7512: PPUSH
7513: LD_INT 103
7515: PPUSH
7516: CALL_OW 428
7520: PPUSH
7521: LD_INT 75
7523: PPUSH
7524: LD_INT 100
7526: PPUSH
7527: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7531: LD_ADDR_VAR 0 5
7535: PUSH
7536: LD_INT 22
7538: PUSH
7539: LD_INT 1
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 21
7548: PUSH
7549: LD_INT 2
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 91
7558: PUSH
7559: LD_EXP 37
7563: PUSH
7564: LD_INT 7
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: LIST
7576: PPUSH
7577: CALL_OW 69
7581: ST_TO_ADDR
// if tmp then
7582: LD_VAR 0 5
7586: IFFALSE 7603
// ComMoveXY ( tmp , 75 , 100 ) ;
7588: LD_VAR 0 5
7592: PPUSH
7593: LD_INT 75
7595: PPUSH
7596: LD_INT 100
7598: PPUSH
7599: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
7603: LD_ADDR_VAR 0 3
7607: PUSH
7608: LD_EXP 4
7612: PPUSH
7613: LD_INT 25
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 72
7627: PPUSH
7628: LD_EXP 37
7632: PPUSH
7633: CALL_OW 74
7637: ST_TO_ADDR
// if sol then
7638: LD_VAR 0 3
7642: IFFALSE 7702
// if GetDistUnits ( JMM , sol ) < 10 then
7644: LD_EXP 37
7648: PPUSH
7649: LD_VAR 0 3
7653: PPUSH
7654: CALL_OW 296
7658: PUSH
7659: LD_INT 10
7661: LESS
7662: IFFALSE 7702
// begin if IsInUnit ( sol ) then
7664: LD_VAR 0 3
7668: PPUSH
7669: CALL_OW 310
7673: IFFALSE 7684
// ComExitVehicle ( sol ) ;
7675: LD_VAR 0 3
7679: PPUSH
7680: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
7684: LD_VAR 0 3
7688: PPUSH
7689: LD_VAR 0 4
7693: PUSH
7694: LD_INT 2
7696: ARRAY
7697: PPUSH
7698: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
7702: LD_INT 10
7704: PPUSH
7705: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
7709: LD_EXP 37
7713: PPUSH
7714: LD_INT 65
7716: PPUSH
7717: LD_INT 101
7719: PPUSH
7720: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
7724: LD_EXP 37
7728: PPUSH
7729: LD_INT 63
7731: PPUSH
7732: LD_INT 100
7734: PPUSH
7735: CALL_OW 178
// tmp := 0 0$0 ;
7739: LD_ADDR_VAR 0 5
7743: PUSH
7744: LD_INT 0
7746: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7747: LD_INT 35
7749: PPUSH
7750: CALL_OW 67
// tmp := tmp + 0 0$1 ;
7754: LD_ADDR_VAR 0 5
7758: PUSH
7759: LD_VAR 0 5
7763: PUSH
7764: LD_INT 35
7766: PLUS
7767: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
7768: LD_EXP 37
7772: PPUSH
7773: LD_INT 65
7775: PPUSH
7776: LD_INT 101
7778: PPUSH
7779: CALL_OW 307
7783: PUSH
7784: LD_VAR 0 5
7788: PUSH
7789: LD_INT 175
7791: GREATER
7792: OR
7793: IFFALSE 7747
// Say ( JMM , D2a-JMM-1 ) ;
7795: LD_EXP 37
7799: PPUSH
7800: LD_STRING D2a-JMM-1
7802: PPUSH
7803: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
7807: LD_EXP 48
7811: PPUSH
7812: LD_INT 66
7814: PPUSH
7815: LD_INT 103
7817: PPUSH
7818: CALL_OW 111
// tmp := 0 0$0 ;
7822: LD_ADDR_VAR 0 5
7826: PUSH
7827: LD_INT 0
7829: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7830: LD_INT 35
7832: PPUSH
7833: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
7837: LD_EXP 48
7841: PPUSH
7842: LD_INT 66
7844: PPUSH
7845: LD_INT 103
7847: PPUSH
7848: CALL_OW 307
7852: PUSH
7853: LD_VAR 0 5
7857: PUSH
7858: LD_INT 175
7860: GREATER
7861: OR
7862: IFFALSE 7830
// ComTurnUnit ( Walker , JMM ) ;
7864: LD_EXP 48
7868: PPUSH
7869: LD_EXP 37
7873: PPUSH
7874: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
7878: LD_EXP 48
7882: PPUSH
7883: LD_STRING D2a-Sci1-1
7885: PPUSH
7886: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
7890: LD_EXP 37
7894: PPUSH
7895: LD_EXP 48
7899: PPUSH
7900: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
7904: LD_EXP 37
7908: PPUSH
7909: LD_STRING D2a-JMM-2
7911: PPUSH
7912: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
7916: LD_EXP 48
7920: PPUSH
7921: LD_STRING D2a-Sci1-2
7923: PPUSH
7924: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
7928: LD_EXP 37
7932: PPUSH
7933: LD_STRING D2a-JMM-3
7935: PPUSH
7936: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
7940: LD_EXP 48
7944: PPUSH
7945: LD_STRING D2a-Sci1-3
7947: PPUSH
7948: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
7952: LD_ADDR_EXP 4
7956: PUSH
7957: LD_EXP 4
7961: PUSH
7962: LD_EXP 47
7966: PUSH
7967: LD_EXP 48
7971: PUSH
7972: LD_EXP 49
7976: PUSH
7977: LD_EXP 50
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: ADD
7988: ST_TO_ADDR
// for i in jmm_units do
7989: LD_ADDR_VAR 0 1
7993: PUSH
7994: LD_EXP 4
7998: PUSH
7999: FOR_IN
8000: IFFALSE 8025
// if not IsInUnit ( i ) then
8002: LD_VAR 0 1
8006: PPUSH
8007: CALL_OW 310
8011: NOT
8012: IFFALSE 8023
// ComFree ( i ) ;
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 139
8023: GO 7999
8025: POP
8026: POP
// Video ( false ) ;
8027: LD_INT 0
8029: PPUSH
8030: CALL 76152 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8034: LD_STRING MSolar1
8036: PPUSH
8037: CALL_OW 337
// jmm_on_west := true ;
8041: LD_ADDR_EXP 5
8045: PUSH
8046: LD_INT 1
8048: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8049: LD_INT 1050
8051: PPUSH
8052: CALL_OW 67
// frank_can_return := true ;
8056: LD_ADDR_EXP 12
8060: PUSH
8061: LD_INT 1
8063: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8064: LD_INT 6300
8066: PPUSH
8067: LD_INT 8400
8069: PPUSH
8070: CALL_OW 12
8074: PPUSH
8075: CALL_OW 67
// send_spec_patrol := true ;
8079: LD_ADDR_EXP 30
8083: PUSH
8084: LD_INT 1
8086: ST_TO_ADDR
// end ;
8087: PPOPN 5
8089: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8090: LD_INT 22
8092: PUSH
8093: LD_INT 1
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: LD_INT 34
8102: PUSH
8103: LD_INT 51
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PUSH
8110: LD_INT 92
8112: PUSH
8113: LD_INT 63
8115: PUSH
8116: LD_INT 100
8118: PUSH
8119: LD_INT 5
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: PPUSH
8136: CALL_OW 69
8140: PUSH
8141: LD_EXP 5
8145: NOT
8146: AND
8147: IFFALSE 8260
8149: GO 8151
8151: DISABLE
8152: LD_INT 0
8154: PPUSH
8155: PPUSH
// begin enable ;
8156: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8157: LD_ADDR_VAR 0 2
8161: PUSH
8162: LD_INT 22
8164: PUSH
8165: LD_INT 1
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: PUSH
8172: LD_INT 34
8174: PUSH
8175: LD_INT 51
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: LD_INT 92
8184: PUSH
8185: LD_INT 63
8187: PUSH
8188: LD_INT 100
8190: PUSH
8191: LD_INT 5
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: LIST
8204: PUSH
8205: EMPTY
8206: LIST
8207: PPUSH
8208: CALL_OW 69
8212: ST_TO_ADDR
// if not filter then
8213: LD_VAR 0 2
8217: NOT
8218: IFFALSE 8222
// exit ;
8220: GO 8260
// for i in filter do
8222: LD_ADDR_VAR 0 1
8226: PUSH
8227: LD_VAR 0 2
8231: PUSH
8232: FOR_IN
8233: IFFALSE 8258
// begin SetFuel ( i , 0 ) ;
8235: LD_VAR 0 1
8239: PPUSH
8240: LD_INT 0
8242: PPUSH
8243: CALL_OW 240
// ComStop ( i ) ;
8247: LD_VAR 0 1
8251: PPUSH
8252: CALL_OW 141
// end ;
8256: GO 8232
8258: POP
8259: POP
// end ;
8260: PPOPN 2
8262: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8263: LD_EXP 30
8267: IFFALSE 9393
8269: GO 8271
8271: DISABLE
8272: LD_INT 0
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
// begin if not ru_spec_patrol then
8281: LD_EXP 54
8285: NOT
8286: IFFALSE 8290
// exit ;
8288: GO 9393
// dead1 := false ;
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_INT 0
8297: ST_TO_ADDR
// dead2 := false ;
8298: LD_ADDR_VAR 0 2
8302: PUSH
8303: LD_INT 0
8305: ST_TO_ADDR
// inarea1 := false ;
8306: LD_ADDR_VAR 0 3
8310: PUSH
8311: LD_INT 0
8313: ST_TO_ADDR
// inarea2 := false ;
8314: LD_ADDR_VAR 0 4
8318: PUSH
8319: LD_INT 0
8321: ST_TO_ADDR
// tmp := [ ] ;
8322: LD_ADDR_VAR 0 6
8326: PUSH
8327: EMPTY
8328: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8329: LD_EXP 54
8333: PPUSH
8334: LD_INT 75
8336: PPUSH
8337: LD_INT 101
8339: PPUSH
8340: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8344: LD_INT 35
8346: PPUSH
8347: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8351: LD_INT 1
8353: PPUSH
8354: LD_EXP 54
8358: PUSH
8359: LD_INT 1
8361: ARRAY
8362: PPUSH
8363: CALL_OW 292
8367: PUSH
8368: LD_EXP 54
8372: PPUSH
8373: LD_INT 92
8375: PUSH
8376: LD_INT 75
8378: PUSH
8379: LD_INT 101
8381: PUSH
8382: LD_INT 4
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: PPUSH
8391: CALL_OW 72
8395: OR
8396: IFFALSE 8344
// ComStop ( ru_spec_patrol ) ;
8398: LD_EXP 54
8402: PPUSH
8403: CALL_OW 141
// Wait ( 0 0$02 ) ;
8407: LD_INT 70
8409: PPUSH
8410: CALL_OW 67
// DialogueOn ;
8414: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8418: LD_EXP 54
8422: PUSH
8423: LD_INT 1
8425: ARRAY
8426: PPUSH
8427: LD_STRING D8-Rus1-1
8429: PPUSH
8430: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8434: LD_EXP 37
8438: PPUSH
8439: LD_STRING D8-JMM-1
8441: PPUSH
8442: CALL_OW 88
// DialogueOff ;
8446: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8450: LD_EXP 54
8454: PPUSH
8455: LD_INT 13
8457: PPUSH
8458: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8462: LD_INT 35
8464: PPUSH
8465: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8469: LD_VAR 0 1
8473: NOT
8474: PUSH
8475: LD_EXP 54
8479: PUSH
8480: LD_INT 1
8482: ARRAY
8483: PPUSH
8484: CALL_OW 301
8488: AND
8489: IFFALSE 8499
// dead1 := true ;
8491: LD_ADDR_VAR 0 1
8495: PUSH
8496: LD_INT 1
8498: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8499: LD_VAR 0 2
8503: NOT
8504: PUSH
8505: LD_EXP 54
8509: PUSH
8510: LD_INT 2
8512: ARRAY
8513: PPUSH
8514: CALL_OW 301
8518: AND
8519: IFFALSE 8529
// dead2 := true ;
8521: LD_ADDR_VAR 0 2
8525: PUSH
8526: LD_INT 1
8528: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8529: LD_VAR 0 3
8533: NOT
8534: PUSH
8535: LD_EXP 54
8539: PUSH
8540: LD_INT 1
8542: ARRAY
8543: PPUSH
8544: LD_INT 14
8546: PPUSH
8547: CALL_OW 308
8551: AND
8552: IFFALSE 8562
// inarea1 := true ;
8554: LD_ADDR_VAR 0 3
8558: PUSH
8559: LD_INT 1
8561: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
8562: LD_VAR 0 4
8566: NOT
8567: PUSH
8568: LD_EXP 54
8572: PUSH
8573: LD_INT 2
8575: ARRAY
8576: PPUSH
8577: LD_INT 14
8579: PPUSH
8580: CALL_OW 308
8584: AND
8585: IFFALSE 8595
// inarea2 := true ;
8587: LD_ADDR_VAR 0 4
8591: PUSH
8592: LD_INT 1
8594: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
8595: LD_VAR 0 1
8599: PUSH
8600: LD_VAR 0 2
8604: AND
8605: PUSH
8606: LD_VAR 0 1
8610: PUSH
8611: LD_VAR 0 4
8615: AND
8616: OR
8617: PUSH
8618: LD_VAR 0 2
8622: PUSH
8623: LD_VAR 0 3
8627: AND
8628: OR
8629: PUSH
8630: LD_VAR 0 3
8634: PUSH
8635: LD_VAR 0 4
8639: AND
8640: OR
8641: IFFALSE 8462
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
8643: LD_VAR 0 3
8647: PUSH
8648: LD_VAR 0 4
8652: AND
8653: PUSH
8654: LD_VAR 0 1
8658: PUSH
8659: LD_VAR 0 4
8663: AND
8664: OR
8665: PUSH
8666: LD_VAR 0 2
8670: PUSH
8671: LD_VAR 0 3
8675: AND
8676: OR
8677: IFFALSE 9373
// begin prepare_siege := true ;
8679: LD_ADDR_EXP 31
8683: PUSH
8684: LD_INT 1
8686: ST_TO_ADDR
// DialogueOn ;
8687: CALL_OW 6
// if ( inarea1 and inarea2 ) then
8691: LD_VAR 0 3
8695: PUSH
8696: LD_VAR 0 4
8700: AND
8701: IFFALSE 8717
// Say ( JMM , D8b-JMM-1a ) else
8703: LD_EXP 37
8707: PPUSH
8708: LD_STRING D8b-JMM-1a
8710: PPUSH
8711: CALL_OW 88
8715: GO 8729
// Say ( JMM , D8b-JMM-1 ) ;
8717: LD_EXP 37
8721: PPUSH
8722: LD_STRING D8b-JMM-1
8724: PPUSH
8725: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
8729: LD_EXP 4
8733: PPUSH
8734: LD_INT 26
8736: PUSH
8737: LD_INT 1
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PPUSH
8744: CALL_OW 72
8748: PUSH
8749: LD_EXP 38
8753: PUSH
8754: LD_EXP 39
8758: PUSH
8759: LD_EXP 48
8763: PUSH
8764: LD_EXP 51
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: DIFF
8775: PPUSH
8776: LD_STRING D8b-Sol1-1
8778: PPUSH
8779: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
8783: LD_EXP 39
8787: PUSH
8788: LD_EXP 39
8792: PUSH
8793: LD_EXP 4
8797: IN
8798: AND
8799: IFFALSE 8815
// Say ( Cyrus , D8b-Cyrus-1 ) else
8801: LD_EXP 39
8805: PPUSH
8806: LD_STRING D8b-Cyrus-1
8808: PPUSH
8809: CALL_OW 88
8813: GO 8827
// Say ( JMM , D8b-JMM-1a ) ;
8815: LD_EXP 37
8819: PPUSH
8820: LD_STRING D8b-JMM-1a
8822: PPUSH
8823: CALL_OW 88
// if Lisa and Lisa in jmm_units then
8827: LD_EXP 40
8831: PUSH
8832: LD_EXP 40
8836: PUSH
8837: LD_EXP 4
8841: IN
8842: AND
8843: IFFALSE 8857
// Say ( Lisa , D8b-Lisa-2 ) ;
8845: LD_EXP 40
8849: PPUSH
8850: LD_STRING D8b-Lisa-2
8852: PPUSH
8853: CALL_OW 88
// if Bobby and Bobby in jmm_units then
8857: LD_EXP 38
8861: PUSH
8862: LD_EXP 38
8866: PUSH
8867: LD_EXP 4
8871: IN
8872: AND
8873: IFFALSE 8889
// Say ( Bobby , D8b-Bobby-1 ) else
8875: LD_EXP 38
8879: PPUSH
8880: LD_STRING D8b-Bobby-1
8882: PPUSH
8883: CALL_OW 88
8887: GO 8949
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
8889: LD_ADDR_VAR 0 5
8893: PUSH
8894: LD_EXP 4
8898: PPUSH
8899: LD_INT 26
8901: PUSH
8902: LD_INT 1
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PPUSH
8909: CALL_OW 72
8913: PUSH
8914: LD_EXP 38
8918: PUSH
8919: LD_EXP 39
8923: PUSH
8924: LD_EXP 48
8928: PUSH
8929: LD_EXP 51
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: DIFF
8940: PPUSH
8941: LD_STRING D8b-Sol2-1
8943: PPUSH
8944: CALL 585 0 2
8948: ST_TO_ADDR
// DialogueOff ;
8949: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
8953: LD_EXP 39
8957: PUSH
8958: LD_EXP 39
8962: PUSH
8963: LD_EXP 4
8967: IN
8968: AND
8969: IFFALSE 8994
// tmp := Insert ( tmp , 1 , Cyrus ) ;
8971: LD_ADDR_VAR 0 6
8975: PUSH
8976: LD_VAR 0 6
8980: PPUSH
8981: LD_INT 1
8983: PPUSH
8984: LD_EXP 39
8988: PPUSH
8989: CALL_OW 2
8993: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
8994: LD_EXP 38
8998: PUSH
8999: LD_EXP 38
9003: PUSH
9004: LD_EXP 4
9008: IN
9009: AND
9010: IFFALSE 9035
// tmp := Insert ( tmp , 1 , Bobby ) ;
9012: LD_ADDR_VAR 0 6
9016: PUSH
9017: LD_VAR 0 6
9021: PPUSH
9022: LD_INT 1
9024: PPUSH
9025: LD_EXP 38
9029: PPUSH
9030: CALL_OW 2
9034: ST_TO_ADDR
// if sol then
9035: LD_VAR 0 5
9039: IFFALSE 9064
// tmp := Insert ( tmp , 1 , sol ) ;
9041: LD_ADDR_VAR 0 6
9045: PUSH
9046: LD_VAR 0 6
9050: PPUSH
9051: LD_INT 1
9053: PPUSH
9054: LD_VAR 0 5
9058: PPUSH
9059: CALL_OW 2
9063: ST_TO_ADDR
// if tmp then
9064: LD_VAR 0 6
9068: IFFALSE 9332
// begin SetSide ( tmp , 8 ) ;
9070: LD_VAR 0 6
9074: PPUSH
9075: LD_INT 8
9077: PPUSH
9078: CALL_OW 235
// for i in tmp do
9082: LD_ADDR_VAR 0 7
9086: PUSH
9087: LD_VAR 0 6
9091: PUSH
9092: FOR_IN
9093: IFFALSE 9184
// begin if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_building then
9095: LD_VAR 0 7
9099: PPUSH
9100: CALL_OW 310
9104: PUSH
9105: LD_VAR 0 7
9109: PPUSH
9110: CALL_OW 310
9114: PPUSH
9115: CALL_OW 266
9119: PUSH
9120: LD_INT 3
9122: EQUAL
9123: AND
9124: IFFALSE 9135
// ComExitBuilding ( i ) ;
9126: LD_VAR 0 7
9130: PPUSH
9131: CALL_OW 122
// if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_vehicle then
9135: LD_VAR 0 7
9139: PPUSH
9140: CALL_OW 310
9144: PUSH
9145: LD_VAR 0 7
9149: PPUSH
9150: CALL_OW 310
9154: PPUSH
9155: CALL_OW 266
9159: PUSH
9160: LD_INT 2
9162: EQUAL
9163: AND
9164: IFFALSE 9175
// ComExitVehicle ( i ) ;
9166: LD_VAR 0 7
9170: PPUSH
9171: CALL_OW 121
// wait ( 0 0$1 ) ;
9175: LD_INT 35
9177: PPUSH
9178: CALL_OW 67
// end ;
9182: GO 9092
9184: POP
9185: POP
// ComFree ( tmp ) ;
9186: LD_VAR 0 6
9190: PPUSH
9191: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9195: LD_VAR 0 6
9199: PPUSH
9200: LD_INT 15
9202: PPUSH
9203: CALL_OW 173
// AddComHold ( tmp ) ;
9207: LD_VAR 0 6
9211: PPUSH
9212: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9216: LD_INT 35
9218: PPUSH
9219: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9223: LD_VAR 0 6
9227: PUSH
9228: LD_INT 1
9230: ARRAY
9231: PPUSH
9232: CALL_OW 314
9236: NOT
9237: IFFALSE 9251
// ComMoveToArea ( tmp , cyrusEscape ) ;
9239: LD_VAR 0 6
9243: PPUSH
9244: LD_INT 15
9246: PPUSH
9247: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9251: LD_VAR 0 6
9255: PUSH
9256: LD_INT 1
9258: ARRAY
9259: PPUSH
9260: LD_INT 15
9262: PPUSH
9263: CALL_OW 308
9267: IFFALSE 9322
// begin RemoveUnit ( tmp [ 1 ] ) ;
9269: LD_VAR 0 6
9273: PUSH
9274: LD_INT 1
9276: ARRAY
9277: PPUSH
9278: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9282: LD_ADDR_EXP 4
9286: PUSH
9287: LD_EXP 4
9291: PUSH
9292: LD_VAR 0 6
9296: PUSH
9297: LD_INT 1
9299: ARRAY
9300: DIFF
9301: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9302: LD_ADDR_VAR 0 6
9306: PUSH
9307: LD_VAR 0 6
9311: PUSH
9312: LD_VAR 0 6
9316: PUSH
9317: LD_INT 1
9319: ARRAY
9320: DIFF
9321: ST_TO_ADDR
// end ; until tmp = 0 ;
9322: LD_VAR 0 6
9326: PUSH
9327: LD_INT 0
9329: EQUAL
9330: IFFALSE 9216
// end ; wait ( 0 0$30 ) ;
9332: LD_INT 1050
9334: PPUSH
9335: CALL_OW 67
// if ru_spec_patrol then
9339: LD_EXP 54
9343: IFFALSE 9371
// for i in ru_spec_patrol do
9345: LD_ADDR_VAR 0 7
9349: PUSH
9350: LD_EXP 54
9354: PUSH
9355: FOR_IN
9356: IFFALSE 9369
// RemoveUnit ( i ) ;
9358: LD_VAR 0 7
9362: PPUSH
9363: CALL_OW 64
9367: GO 9355
9369: POP
9370: POP
// end else
9371: GO 9393
// begin prepare_siege := false ;
9373: LD_ADDR_EXP 31
9377: PUSH
9378: LD_INT 0
9380: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9381: LD_EXP 37
9385: PPUSH
9386: LD_STRING D8a-JMM-1
9388: PPUSH
9389: CALL_OW 88
// end ; end ;
9393: PPOPN 7
9395: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9396: LD_EXP 12
9400: IFFALSE 10668
9402: GO 9404
9404: DISABLE
9405: LD_INT 0
9407: PPUSH
9408: PPUSH
9409: PPUSH
// begin uc_side := 8 ;
9410: LD_ADDR_OWVAR 20
9414: PUSH
9415: LD_INT 8
9417: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9418: LD_ADDR_VAR 0 3
9422: PUSH
9423: LD_INT 59
9425: PUSH
9426: LD_INT 71
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 122
9435: PUSH
9436: LD_INT 117
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9447: LD_ADDR_EXP 51
9451: PUSH
9452: LD_STRING Frank
9454: PPUSH
9455: LD_INT 0
9457: PPUSH
9458: LD_STRING 
9460: PPUSH
9461: CALL 38779 0 3
9465: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9466: LD_ADDR_VAR 0 1
9470: PUSH
9471: LD_INT 1
9473: PPUSH
9474: LD_INT 2
9476: PPUSH
9477: CALL_OW 12
9481: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9482: LD_EXP 51
9486: PPUSH
9487: LD_VAR 0 3
9491: PUSH
9492: LD_VAR 0 1
9496: ARRAY
9497: PUSH
9498: LD_INT 1
9500: ARRAY
9501: PPUSH
9502: LD_VAR 0 3
9506: PUSH
9507: LD_VAR 0 1
9511: ARRAY
9512: PUSH
9513: LD_INT 2
9515: ARRAY
9516: PPUSH
9517: LD_INT 0
9519: PPUSH
9520: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9524: LD_EXP 51
9528: PPUSH
9529: LD_INT 1
9531: PPUSH
9532: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9536: LD_INT 35
9538: PPUSH
9539: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9543: LD_EXP 51
9547: PPUSH
9548: LD_EXP 37
9552: PPUSH
9553: CALL_OW 296
9557: PUSH
9558: LD_INT 8
9560: LESS
9561: PUSH
9562: LD_EXP 51
9566: PPUSH
9567: CALL_OW 256
9571: PUSH
9572: LD_INT 250
9574: GREATER
9575: AND
9576: IFFALSE 9536
// Video ( true ) ;
9578: LD_INT 1
9580: PPUSH
9581: CALL 76152 0 1
// CenterOnUnits ( JMM ) ;
9585: LD_EXP 37
9589: PPUSH
9590: CALL_OW 85
// if IsInUnit ( JMM ) then
9594: LD_EXP 37
9598: PPUSH
9599: CALL_OW 310
9603: IFFALSE 9614
// ComFree ( JMM ) ;
9605: LD_EXP 37
9609: PPUSH
9610: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
9614: LD_EXP 37
9618: PPUSH
9619: LD_EXP 51
9623: PPUSH
9624: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
9628: LD_EXP 51
9632: PPUSH
9633: LD_EXP 37
9637: PPUSH
9638: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
9642: LD_EXP 37
9646: PPUSH
9647: LD_STRING D6-JMM-1
9649: PPUSH
9650: CALL_OW 88
// p := 0 ;
9654: LD_ADDR_VAR 0 2
9658: PUSH
9659: LD_INT 0
9661: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9662: LD_INT 35
9664: PPUSH
9665: CALL_OW 67
// p := p + 1 ;
9669: LD_ADDR_VAR 0 2
9673: PUSH
9674: LD_VAR 0 2
9678: PUSH
9679: LD_INT 1
9681: PLUS
9682: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
9683: LD_EXP 37
9687: PPUSH
9688: LD_EXP 51
9692: PPUSH
9693: CALL_OW 296
9697: PUSH
9698: LD_INT 8
9700: LESS
9701: PUSH
9702: LD_VAR 0 2
9706: PUSH
9707: LD_INT 7
9709: GREATER
9710: OR
9711: IFFALSE 9662
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
9713: LD_EXP 40
9717: PUSH
9718: LD_EXP 40
9722: PPUSH
9723: LD_EXP 51
9727: PPUSH
9728: CALL_OW 296
9732: PUSH
9733: LD_INT 20
9735: LESS
9736: AND
9737: PUSH
9738: LD_EXP 40
9742: PUSH
9743: LD_EXP 4
9747: IN
9748: AND
9749: IFFALSE 9774
// begin ComFree ( Lisa ) ;
9751: LD_EXP 40
9755: PPUSH
9756: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
9760: LD_EXP 40
9764: PPUSH
9765: LD_EXP 51
9769: PPUSH
9770: CALL_OW 172
// end ; if Lynch then
9774: LD_EXP 47
9778: IFFALSE 9803
// begin ComFree ( Lynch ) ;
9780: LD_EXP 47
9784: PPUSH
9785: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
9789: LD_EXP 47
9793: PPUSH
9794: LD_EXP 51
9798: PPUSH
9799: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
9803: LD_EXP 37
9807: PPUSH
9808: LD_EXP 51
9812: PPUSH
9813: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
9817: LD_EXP 51
9821: PPUSH
9822: LD_EXP 37
9826: PPUSH
9827: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
9831: LD_EXP 51
9835: PPUSH
9836: LD_STRING D6-Frank-1
9838: PPUSH
9839: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
9843: LD_INT 69
9845: PPUSH
9846: LD_INT 20
9848: PPUSH
9849: LD_INT 1
9851: PPUSH
9852: LD_INT 20
9854: NEG
9855: PPUSH
9856: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
9860: LD_INT 69
9862: PPUSH
9863: LD_INT 20
9865: PPUSH
9866: LD_INT 1
9868: PPUSH
9869: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
9873: LD_INT 190
9875: PPUSH
9876: LD_INT 31
9878: PPUSH
9879: LD_INT 1
9881: PPUSH
9882: LD_INT 20
9884: NEG
9885: PPUSH
9886: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
9890: LD_INT 190
9892: PPUSH
9893: LD_INT 31
9895: PPUSH
9896: LD_INT 1
9898: PPUSH
9899: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
9903: LD_INT 69
9905: PPUSH
9906: LD_INT 20
9908: PPUSH
9909: CALL_OW 84
// Wait ( 0 0$02 ) ;
9913: LD_INT 70
9915: PPUSH
9916: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
9920: LD_EXP 37
9924: PPUSH
9925: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
9929: LD_EXP 40
9933: PUSH
9934: LD_EXP 40
9938: PPUSH
9939: LD_EXP 51
9943: PPUSH
9944: CALL_OW 296
9948: PUSH
9949: LD_INT 20
9951: LESS
9952: AND
9953: PUSH
9954: LD_EXP 40
9958: PPUSH
9959: CALL_OW 302
9963: AND
9964: PUSH
9965: LD_EXP 40
9969: PUSH
9970: LD_EXP 4
9974: IN
9975: AND
9976: IFFALSE 10098
// begin ComFree ( Lisa ) ;
9978: LD_EXP 40
9982: PPUSH
9983: CALL_OW 139
// p := 0 ;
9987: LD_ADDR_VAR 0 2
9991: PUSH
9992: LD_INT 0
9994: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9995: LD_INT 35
9997: PPUSH
9998: CALL_OW 67
// p := p + 1 ;
10002: LD_ADDR_VAR 0 2
10006: PUSH
10007: LD_VAR 0 2
10011: PUSH
10012: LD_INT 1
10014: PLUS
10015: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10016: LD_EXP 40
10020: PPUSH
10021: LD_EXP 51
10025: PPUSH
10026: CALL_OW 296
10030: PUSH
10031: LD_INT 7
10033: LESS
10034: PUSH
10035: LD_VAR 0 2
10039: PUSH
10040: LD_INT 7
10042: GREATER
10043: OR
10044: IFFALSE 9995
// Say ( Lisa , D6-Lisa-1 ) ;
10046: LD_EXP 40
10050: PPUSH
10051: LD_STRING D6-Lisa-1
10053: PPUSH
10054: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10058: LD_EXP 40
10062: PPUSH
10063: LD_EXP 51
10067: PPUSH
10068: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10072: LD_EXP 51
10076: PPUSH
10077: LD_EXP 40
10081: PPUSH
10082: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10086: LD_EXP 51
10090: PPUSH
10091: LD_STRING D6-Frank-2
10093: PPUSH
10094: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10098: LD_EXP 47
10102: PUSH
10103: LD_EXP 47
10107: PPUSH
10108: LD_EXP 51
10112: PPUSH
10113: CALL_OW 296
10117: PUSH
10118: LD_INT 20
10120: LESS
10121: AND
10122: PUSH
10123: LD_EXP 47
10127: PPUSH
10128: CALL_OW 302
10132: AND
10133: IFFALSE 10326
// begin ComTurnUnit ( Lynch , JMM ) ;
10135: LD_EXP 47
10139: PPUSH
10140: LD_EXP 37
10144: PPUSH
10145: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10149: LD_EXP 51
10153: PPUSH
10154: LD_EXP 37
10158: PPUSH
10159: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10163: LD_EXP 47
10167: PPUSH
10168: LD_STRING D6-Sol1-2
10170: PPUSH
10171: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10175: LD_EXP 37
10179: PPUSH
10180: LD_STRING D6-JMM-2
10182: PPUSH
10183: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10187: LD_EXP 51
10191: PPUSH
10192: LD_STRING D6-Frank-3
10194: PPUSH
10195: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10199: LD_EXP 37
10203: PPUSH
10204: LD_STRING D6-JMM-3
10206: PPUSH
10207: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10211: LD_EXP 51
10215: PPUSH
10216: LD_STRING D6-Frank-4
10218: PPUSH
10219: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10223: LD_EXP 51
10227: PPUSH
10228: LD_STRING D6-Frank-4a
10230: PPUSH
10231: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10235: LD_EXP 37
10239: PPUSH
10240: LD_STRING D6-JMM-4
10242: PPUSH
10243: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10247: LD_EXP 51
10251: PPUSH
10252: LD_STRING D6-Frank-5
10254: PPUSH
10255: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10259: LD_EXP 40
10263: PUSH
10264: LD_EXP 40
10268: PPUSH
10269: CALL_OW 302
10273: AND
10274: PUSH
10275: LD_EXP 40
10279: PUSH
10280: LD_EXP 4
10284: IN
10285: AND
10286: IFFALSE 10300
// Say ( Lisa , D6-Lisa-5 ) ;
10288: LD_EXP 40
10292: PPUSH
10293: LD_STRING D6-Lisa-5
10295: PPUSH
10296: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10300: LD_EXP 51
10304: PPUSH
10305: LD_STRING D6-Frank-6
10307: PPUSH
10308: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10312: LD_EXP 37
10316: PPUSH
10317: LD_STRING D6-JMM-6
10319: PPUSH
10320: CALL_OW 88
// end else
10324: GO 10453
// begin ComTurnUnit ( Frank , JMM ) ;
10326: LD_EXP 51
10330: PPUSH
10331: LD_EXP 37
10335: PPUSH
10336: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10340: LD_EXP 51
10344: PPUSH
10345: LD_STRING D6-Frank-4
10347: PPUSH
10348: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10352: LD_EXP 51
10356: PPUSH
10357: LD_STRING D6-Frank-4a
10359: PPUSH
10360: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10364: LD_EXP 37
10368: PPUSH
10369: LD_STRING D6-JMM-4
10371: PPUSH
10372: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10376: LD_EXP 51
10380: PPUSH
10381: LD_STRING D6-Frank-5
10383: PPUSH
10384: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10388: LD_EXP 40
10392: PUSH
10393: LD_EXP 40
10397: PPUSH
10398: CALL_OW 302
10402: AND
10403: PUSH
10404: LD_EXP 40
10408: PUSH
10409: LD_EXP 4
10413: IN
10414: AND
10415: IFFALSE 10429
// Say ( Lisa , D6-Lisa-5 ) ;
10417: LD_EXP 40
10421: PPUSH
10422: LD_STRING D6-Lisa-5
10424: PPUSH
10425: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10429: LD_EXP 51
10433: PPUSH
10434: LD_STRING D6-Frank-6
10436: PPUSH
10437: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10441: LD_EXP 37
10445: PPUSH
10446: LD_STRING D6-JMM-6
10448: PPUSH
10449: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10453: LD_STRING Q1
10455: PPUSH
10456: CALL_OW 97
10460: PUSH
10461: LD_INT 1
10463: DOUBLE
10464: EQUAL
10465: IFTRUE 10469
10467: GO 10480
10469: POP
// frank_send_to_scout := true ; 2 :
10470: LD_ADDR_EXP 15
10474: PUSH
10475: LD_INT 1
10477: ST_TO_ADDR
10478: GO 10500
10480: LD_INT 2
10482: DOUBLE
10483: EQUAL
10484: IFTRUE 10488
10486: GO 10499
10488: POP
// frank_send_to_scout := false ; end ;
10489: LD_ADDR_EXP 15
10493: PUSH
10494: LD_INT 0
10496: ST_TO_ADDR
10497: GO 10500
10499: POP
// Video ( false ) ;
10500: LD_INT 0
10502: PPUSH
10503: CALL 76152 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10507: LD_EXP 37
10511: PUSH
10512: LD_EXP 40
10516: PUSH
10517: LD_EXP 47
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: LIST
10526: PPUSH
10527: CALL_OW 139
// if frank_send_to_scout then
10531: LD_EXP 15
10535: IFFALSE 10589
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10537: LD_EXP 51
10541: PPUSH
10542: LD_INT 15
10544: PPUSH
10545: CALL_OW 113
// wait ( 0 0$01 ) ;
10549: LD_INT 35
10551: PPUSH
10552: CALL_OW 67
// until not See ( 1 , Frank ) ;
10556: LD_INT 1
10558: PPUSH
10559: LD_EXP 51
10563: PPUSH
10564: CALL_OW 292
10568: NOT
10569: IFFALSE 10537
// wait ( 0 0$02 ) ;
10571: LD_INT 70
10573: PPUSH
10574: CALL_OW 67
// RemoveUnit ( Frank ) ;
10578: LD_EXP 51
10582: PPUSH
10583: CALL_OW 64
// end else
10587: GO 10601
// SetSide ( Frank , 1 ) ;
10589: LD_EXP 51
10593: PPUSH
10594: LD_INT 1
10596: PPUSH
10597: CALL_OW 235
// send_attack_on_cornel_base := true ;
10601: LD_ADDR_EXP 26
10605: PUSH
10606: LD_INT 1
10608: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10609: LD_INT 35
10611: PPUSH
10612: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
10616: LD_ADDR_EXP 29
10620: PUSH
10621: LD_EXP 29
10625: PPUSH
10626: LD_STRING -
10628: PPUSH
10629: CALL 1077 0 2
10633: ST_TO_ADDR
// if debug then
10634: LD_EXP 1
10638: IFFALSE 10650
// debug_strings := time_to_prepare ;
10640: LD_ADDR_OWVAR 48
10644: PUSH
10645: LD_EXP 29
10649: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
10650: LD_EXP 29
10654: PUSH
10655: LD_INT 0
10657: EQUAL
10658: IFFALSE 10609
// cornel_prepared := true ;
10660: LD_ADDR_EXP 11
10664: PUSH
10665: LD_INT 1
10667: ST_TO_ADDR
// end ;
10668: PPOPN 3
10670: END
// every 0 0$01 trigger cornel_prepared do
10671: LD_EXP 11
10675: IFFALSE 10983
10677: GO 10679
10679: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
10680: LD_EXP 44
10684: PPUSH
10685: LD_STRING D3-Corn-1
10687: PPUSH
10688: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
10692: LD_STRING MOutWait
10694: PPUSH
10695: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
10699: LD_INT 35
10701: PPUSH
10702: CALL_OW 67
// until cornel_counter = 0 ;
10706: LD_EXP 10
10710: PUSH
10711: LD_INT 0
10713: EQUAL
10714: IFFALSE 10699
// SayRadio ( Cornel , D3a-Corn-1 ) ;
10716: LD_EXP 44
10720: PPUSH
10721: LD_STRING D3a-Corn-1
10723: PPUSH
10724: CALL_OW 94
// if IsOk ( Cornel ) then
10728: LD_EXP 44
10732: PPUSH
10733: CALL_OW 302
10737: IFFALSE 10751
// Say ( JMM , D3a-JMM-1 ) ;
10739: LD_EXP 37
10743: PPUSH
10744: LD_STRING D3a-JMM-1
10746: PPUSH
10747: CALL_OW 88
// end_mission_allowed := true ;
10751: LD_ADDR_EXP 21
10755: PUSH
10756: LD_INT 1
10758: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
10759: LD_STRING M2
10761: PPUSH
10762: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
10766: LD_INT 9
10768: PPUSH
10769: LD_INT 1
10771: PPUSH
10772: CALL_OW 424
// Wait ( 0 0$05 ) ;
10776: LD_INT 175
10778: PPUSH
10779: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
10783: LD_EXP 44
10787: PPUSH
10788: LD_STRING D3a-Corn-2
10790: PPUSH
10791: CALL_OW 94
// cornel_attack := true ;
10795: LD_ADDR_EXP 9
10799: PUSH
10800: LD_INT 1
10802: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
10803: LD_INT 105
10805: PPUSH
10806: CALL_OW 67
// AddMoreTanks ( ) ;
10810: CALL 4940 0 0
// if frank_send_to_scout then
10814: LD_EXP 15
10818: IFFALSE 10983
// begin InitHc ;
10820: CALL_OW 19
// InitUc ;
10824: CALL_OW 18
// uc_side := 8 ;
10828: LD_ADDR_OWVAR 20
10832: PUSH
10833: LD_INT 8
10835: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
10836: LD_ADDR_EXP 51
10840: PUSH
10841: LD_STRING Frank
10843: PPUSH
10844: LD_INT 0
10846: PPUSH
10847: LD_STRING 
10849: PPUSH
10850: CALL 38779 0 3
10854: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
10855: LD_EXP 51
10859: PPUSH
10860: LD_INT 6
10862: PPUSH
10863: LD_INT 9
10865: PPUSH
10866: LD_INT 0
10868: PPUSH
10869: CALL_OW 48
// ComCrawl ( Frank ) ;
10873: LD_EXP 51
10877: PPUSH
10878: CALL_OW 137
// repeat wait ( 10 ) ;
10882: LD_INT 10
10884: PPUSH
10885: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
10889: LD_EXP 37
10893: PPUSH
10894: LD_EXP 51
10898: PPUSH
10899: CALL_OW 296
10903: PUSH
10904: LD_INT 9
10906: LESS
10907: PUSH
10908: LD_INT 9
10910: PPUSH
10911: LD_INT 22
10913: PUSH
10914: LD_INT 1
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PPUSH
10921: CALL_OW 70
10925: OR
10926: IFFALSE 10882
// if IsDead ( Frank ) then
10928: LD_EXP 51
10932: PPUSH
10933: CALL_OW 301
10937: IFFALSE 10941
// exit ;
10939: GO 10983
// CenterOnUnits ( Frank ) ;
10941: LD_EXP 51
10945: PPUSH
10946: CALL_OW 85
// SetSide ( Frank , 1 ) ;
10950: LD_EXP 51
10954: PPUSH
10955: LD_INT 1
10957: PPUSH
10958: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
10962: LD_EXP 51
10966: PPUSH
10967: LD_STRING D6a-Frank-1
10969: PPUSH
10970: CALL_OW 88
// ComWalk ( Frank ) ;
10974: LD_EXP 51
10978: PPUSH
10979: CALL_OW 138
// end ; end ;
10983: END
// every 0 0$01 trigger solar_builded do
10984: LD_EXP 14
10988: IFFALSE 11092
10990: GO 10992
10992: DISABLE
// begin Wait ( 0 0$02 ) ;
10993: LD_INT 70
10995: PPUSH
10996: CALL_OW 67
// DialogueOn ;
11000: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11004: LD_EXP 37
11008: PPUSH
11009: LD_STRING D2b-JMM-1
11011: PPUSH
11012: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11016: LD_EXP 48
11020: PUSH
11021: LD_EXP 48
11025: PPUSH
11026: CALL_OW 302
11030: AND
11031: IFFALSE 11081
// begin Say ( Walker , D2b-Sci1-1 ) ;
11033: LD_EXP 48
11037: PPUSH
11038: LD_STRING D2b-Sci1-1
11040: PPUSH
11041: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11045: LD_EXP 37
11049: PPUSH
11050: LD_STRING D2b-JMM-2
11052: PPUSH
11053: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11057: LD_EXP 48
11061: PPUSH
11062: LD_STRING D2b-Sci1-2
11064: PPUSH
11065: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11069: LD_EXP 37
11073: PPUSH
11074: LD_STRING D2b-JMM-3
11076: PPUSH
11077: CALL_OW 88
// end ; DialogueOff ;
11081: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11085: LD_STRING MOutSol
11087: PPUSH
11088: CALL_OW 337
// end ;
11092: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11093: LD_EXP 14
11097: PUSH
11098: LD_EXP 37
11102: PPUSH
11103: CALL_OW 302
11107: AND
11108: PUSH
11109: LD_EXP 37
11113: PPUSH
11114: CALL 911 0 1
11118: AND
11119: PUSH
11120: LD_EXP 16
11124: NOT
11125: AND
11126: IFFALSE 11197
11128: GO 11130
11130: DISABLE
11131: LD_INT 0
11133: PPUSH
// begin jmm_in_veh := true ;
11134: LD_ADDR_EXP 16
11138: PUSH
11139: LD_INT 1
11141: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11142: LD_ADDR_VAR 0 1
11146: PUSH
11147: LD_INT 0
11149: PPUSH
11150: LD_INT 1
11152: PPUSH
11153: CALL_OW 12
11157: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11158: LD_INT 70
11160: PPUSH
11161: CALL_OW 67
// if i then
11165: LD_VAR 0 1
11169: IFFALSE 11185
// Say ( JMM , D2c-JMM-1 ) else
11171: LD_EXP 37
11175: PPUSH
11176: LD_STRING D2c-JMM-1
11178: PPUSH
11179: CALL_OW 88
11183: GO 11197
// Say ( JMM , D2c-JMM-1a ) ;
11185: LD_EXP 37
11189: PPUSH
11190: LD_STRING D2c-JMM-1a
11192: PPUSH
11193: CALL_OW 88
// end ;
11197: PPOPN 1
11199: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11200: LD_EXP 14
11204: PUSH
11205: LD_EXP 38
11209: PPUSH
11210: CALL_OW 302
11214: AND
11215: PUSH
11216: LD_EXP 38
11220: PPUSH
11221: CALL 911 0 1
11225: AND
11226: PUSH
11227: LD_EXP 17
11231: NOT
11232: AND
11233: IFFALSE 11265
11235: GO 11237
11237: DISABLE
// begin bobby_in_veh := true ;
11238: LD_ADDR_EXP 17
11242: PUSH
11243: LD_INT 1
11245: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11246: LD_INT 70
11248: PPUSH
11249: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11253: LD_EXP 38
11257: PPUSH
11258: LD_STRING D2c-Bobby-1
11260: PPUSH
11261: CALL_OW 88
11265: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11266: LD_EXP 14
11270: PUSH
11271: LD_EXP 40
11275: PPUSH
11276: CALL_OW 302
11280: AND
11281: PUSH
11282: LD_EXP 40
11286: PPUSH
11287: CALL 911 0 1
11291: AND
11292: PUSH
11293: LD_EXP 19
11297: NOT
11298: AND
11299: IFFALSE 11331
11301: GO 11303
11303: DISABLE
// begin lisa_in_veh := true ;
11304: LD_ADDR_EXP 19
11308: PUSH
11309: LD_INT 1
11311: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11312: LD_INT 70
11314: PPUSH
11315: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11319: LD_EXP 40
11323: PPUSH
11324: LD_STRING D2c-Lisa-1
11326: PPUSH
11327: CALL_OW 88
11331: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11332: LD_EXP 14
11336: PUSH
11337: LD_EXP 39
11341: PPUSH
11342: CALL_OW 302
11346: AND
11347: PUSH
11348: LD_EXP 39
11352: PPUSH
11353: CALL 911 0 1
11357: AND
11358: PUSH
11359: LD_EXP 18
11363: NOT
11364: AND
11365: IFFALSE 11436
11367: GO 11369
11369: DISABLE
11370: LD_INT 0
11372: PPUSH
// begin cyrus_in_veh := true ;
11373: LD_ADDR_EXP 18
11377: PUSH
11378: LD_INT 1
11380: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11381: LD_ADDR_VAR 0 1
11385: PUSH
11386: LD_INT 0
11388: PPUSH
11389: LD_INT 1
11391: PPUSH
11392: CALL_OW 12
11396: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11397: LD_INT 70
11399: PPUSH
11400: CALL_OW 67
// if i then
11404: LD_VAR 0 1
11408: IFFALSE 11424
// Say ( Cyrus , D2c-Cyrus-1 ) else
11410: LD_EXP 39
11414: PPUSH
11415: LD_STRING D2c-Cyrus-1
11417: PPUSH
11418: CALL_OW 88
11422: GO 11436
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11424: LD_EXP 39
11428: PPUSH
11429: LD_STRING D2c-Cyrus-1a
11431: PPUSH
11432: CALL_OW 88
// end ;
11436: PPOPN 1
11438: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11439: LD_EXP 44
11443: PPUSH
11444: LD_INT 16
11446: PPUSH
11447: CALL_OW 308
11451: IFFALSE 11732
11453: GO 11455
11455: DISABLE
11456: LD_INT 0
11458: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11459: LD_INT 3
11461: PPUSH
11462: LD_EXP 44
11466: PPUSH
11467: CALL_OW 471
// send_attack_on_cornel := true ;
11471: LD_ADDR_EXP 32
11475: PUSH
11476: LD_INT 1
11478: ST_TO_ADDR
// if ru_vehicles then
11479: LD_EXP 56
11483: IFFALSE 11517
// for i in ru_vehicles do
11485: LD_ADDR_VAR 0 1
11489: PUSH
11490: LD_EXP 56
11494: PUSH
11495: FOR_IN
11496: IFFALSE 11515
// ComAgressiveMove ( i , 215 , 69 ) ;
11498: LD_VAR 0 1
11502: PPUSH
11503: LD_INT 215
11505: PPUSH
11506: LD_INT 69
11508: PPUSH
11509: CALL_OW 114
11513: GO 11495
11515: POP
11516: POP
// if ru_patrol then
11517: LD_EXP 53
11521: IFFALSE 11555
// for i in ru_patrol do
11523: LD_ADDR_VAR 0 1
11527: PUSH
11528: LD_EXP 53
11532: PUSH
11533: FOR_IN
11534: IFFALSE 11553
// ComAgressiveMove ( i , 215 , 69 ) ;
11536: LD_VAR 0 1
11540: PPUSH
11541: LD_INT 215
11543: PPUSH
11544: LD_INT 69
11546: PPUSH
11547: CALL_OW 114
11551: GO 11533
11553: POP
11554: POP
// if frank_send_to_scout then
11555: LD_EXP 15
11559: IFFALSE 11573
// begin SayRadio ( Frank , D3b-Frank-1 ) ;
11561: LD_EXP 51
11565: PPUSH
11566: LD_STRING D3b-Frank-1
11568: PPUSH
11569: CALL_OW 94
// end ; Wait ( 0 0$03 ) ;
11573: LD_INT 105
11575: PPUSH
11576: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11580: LD_EXP 44
11584: PPUSH
11585: LD_STRING D4-Corn-1
11587: PPUSH
11588: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11592: LD_INT 35
11594: PPUSH
11595: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11599: LD_INT 22
11601: PUSH
11602: LD_INT 4
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: LD_INT 21
11611: PUSH
11612: LD_INT 1
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 3
11621: PUSH
11622: LD_INT 24
11624: PUSH
11625: LD_INT 1000
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: PPUSH
11641: CALL_OW 69
11645: PUSH
11646: LD_INT 6
11648: LESS
11649: IFFALSE 11592
// if Cornel then
11651: LD_EXP 44
11655: IFFALSE 11695
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
11657: LD_EXP 44
11661: PPUSH
11662: LD_STRING D5-Corn-1
11664: PPUSH
11665: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
11669: LD_EXP 44
11673: PPUSH
11674: LD_EXP 2
11678: PUSH
11679: LD_STRING Cornel
11681: STR
11682: PPUSH
11683: CALL_OW 38
// cornel_saved := true ;
11687: LD_ADDR_EXP 27
11691: PUSH
11692: LD_INT 1
11694: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
11695: LD_INT 4
11697: PPUSH
11698: LD_INT 8
11700: PPUSH
11701: CALL_OW 343
// Wait ( 0 0$01 ) ;
11705: LD_INT 35
11707: PPUSH
11708: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
11712: LD_INT 3
11714: PPUSH
11715: LD_EXP 44
11719: PPUSH
11720: CALL_OW 472
// send_attack_on_cornel := false ;
11724: LD_ADDR_EXP 32
11728: PUSH
11729: LD_INT 0
11731: ST_TO_ADDR
// end ;
11732: PPOPN 1
11734: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
11735: LD_INT 9
11737: PPUSH
11738: LD_INT 22
11740: PUSH
11741: LD_INT 1
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: PPUSH
11748: CALL_OW 70
11752: PUSH
11753: LD_EXP 33
11757: OR
11758: IFFALSE 11979
11760: GO 11762
11762: DISABLE
11763: LD_INT 0
11765: PPUSH
11766: PPUSH
// begin enable ;
11767: ENABLE
// if not jmm_on_west then
11768: LD_EXP 5
11772: NOT
11773: IFFALSE 11784
// begin YouLost ( 4 ) ;
11775: LD_STRING 4
11777: PPUSH
11778: CALL_OW 104
// exit ;
11782: GO 11979
// end ; if not game_end then
11784: LD_EXP 33
11788: NOT
11789: IFFALSE 11799
// game_end := true ;
11791: LD_ADDR_EXP 33
11795: PUSH
11796: LD_INT 1
11798: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11799: LD_ADDR_VAR 0 2
11803: PUSH
11804: LD_INT 9
11806: PPUSH
11807: LD_INT 22
11809: PUSH
11810: LD_INT 1
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PPUSH
11817: CALL_OW 70
11821: ST_TO_ADDR
// if not filter then
11822: LD_VAR 0 2
11826: NOT
11827: IFFALSE 11831
// exit ;
11829: GO 11979
// for i in filter do
11831: LD_ADDR_VAR 0 1
11835: PUSH
11836: LD_VAR 0 2
11840: PUSH
11841: FOR_IN
11842: IFFALSE 11977
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
11844: LD_VAR 0 1
11848: PPUSH
11849: CALL_OW 302
11853: PUSH
11854: LD_VAR 0 1
11858: PPUSH
11859: CALL_OW 247
11863: PUSH
11864: LD_INT 2
11866: EQUAL
11867: AND
11868: IFFALSE 11940
// begin if i = JMM and save_group < 4 then
11870: LD_VAR 0 1
11874: PUSH
11875: LD_EXP 37
11879: EQUAL
11880: PUSH
11881: LD_EXP 23
11885: PUSH
11886: LD_INT 4
11888: LESS
11889: AND
11890: IFFALSE 11894
// continue ;
11892: GO 11841
// if GetNation ( i ) = nation_american then
11894: LD_VAR 0 1
11898: PPUSH
11899: CALL_OW 248
11903: PUSH
11904: LD_INT 1
11906: EQUAL
11907: IFFALSE 11917
// veh_on_meta := true ;
11909: LD_ADDR_EXP 28
11913: PUSH
11914: LD_INT 1
11916: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
11917: LD_VAR 0 1
11921: PPUSH
11922: CALL_OW 311
11926: PPUSH
11927: CALL 11982 0 1
// RemoveUnit ( i ) ;
11931: LD_VAR 0 1
11935: PPUSH
11936: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
11940: LD_VAR 0 1
11944: PPUSH
11945: CALL_OW 302
11949: PUSH
11950: LD_VAR 0 1
11954: PPUSH
11955: CALL_OW 247
11959: PUSH
11960: LD_INT 1
11962: EQUAL
11963: AND
11964: IFFALSE 11975
// Save ( i ) ;
11966: LD_VAR 0 1
11970: PPUSH
11971: CALL 11982 0 1
// end ;
11975: GO 11841
11977: POP
11978: POP
// end ;
11979: PPOPN 2
11981: END
// export function Save ( i ) ; begin
11982: LD_INT 0
11984: PPUSH
// if i = JMM and save_group >= 4 then
11985: LD_VAR 0 1
11989: PUSH
11990: LD_EXP 37
11994: EQUAL
11995: PUSH
11996: LD_EXP 23
12000: PUSH
12001: LD_INT 4
12003: GREATEREQUAL
12004: AND
12005: IFFALSE 12141
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12007: LD_EXP 24
12011: PUSH
12012: LD_INT 22
12014: PUSH
12015: LD_INT 1
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: PUSH
12022: LD_INT 21
12024: PUSH
12025: LD_INT 1
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PPUSH
12036: CALL_OW 69
12040: PUSH
12041: LD_INT 1
12043: GREATER
12044: AND
12045: IFFALSE 12102
// begin show_query := false ;
12047: LD_ADDR_EXP 24
12051: PUSH
12052: LD_INT 0
12054: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12055: LD_STRING Q2
12057: PPUSH
12058: CALL_OW 97
12062: PUSH
12063: LD_INT 1
12065: DOUBLE
12066: EQUAL
12067: IFTRUE 12071
12069: GO 12082
12071: POP
// wait_for_them := true ; 2 :
12072: LD_ADDR_EXP 25
12076: PUSH
12077: LD_INT 1
12079: ST_TO_ADDR
12080: GO 12102
12082: LD_INT 2
12084: DOUBLE
12085: EQUAL
12086: IFTRUE 12090
12088: GO 12101
12090: POP
// wait_for_them := false ; end ;
12091: LD_ADDR_EXP 25
12095: PUSH
12096: LD_INT 0
12098: ST_TO_ADDR
12099: GO 12102
12101: POP
// end ; save_counter := save_counter + 1 ;
12102: LD_ADDR_EXP 36
12106: PUSH
12107: LD_EXP 36
12111: PUSH
12112: LD_INT 1
12114: PLUS
12115: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12116: LD_ADDR_EXP 23
12120: PUSH
12121: LD_EXP 23
12125: PUSH
12126: LD_EXP 37
12130: ADD
12131: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12132: LD_EXP 37
12136: PPUSH
12137: CALL_OW 64
// end ; if i = Lisa then
12141: LD_VAR 0 1
12145: PUSH
12146: LD_EXP 40
12150: EQUAL
12151: IFFALSE 12192
// begin save_counter := save_counter + 1 ;
12153: LD_ADDR_EXP 36
12157: PUSH
12158: LD_EXP 36
12162: PUSH
12163: LD_INT 1
12165: PLUS
12166: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12167: LD_ADDR_EXP 23
12171: PUSH
12172: LD_EXP 23
12176: PUSH
12177: LD_EXP 40
12181: ADD
12182: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12183: LD_EXP 40
12187: PPUSH
12188: CALL_OW 64
// end ; if i = Bobby then
12192: LD_VAR 0 1
12196: PUSH
12197: LD_EXP 38
12201: EQUAL
12202: IFFALSE 12243
// begin save_counter := save_counter + 1 ;
12204: LD_ADDR_EXP 36
12208: PUSH
12209: LD_EXP 36
12213: PUSH
12214: LD_INT 1
12216: PLUS
12217: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12218: LD_ADDR_EXP 23
12222: PUSH
12223: LD_EXP 23
12227: PUSH
12228: LD_EXP 38
12232: ADD
12233: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12234: LD_EXP 38
12238: PPUSH
12239: CALL_OW 64
// end ; if i = Cyrus then
12243: LD_VAR 0 1
12247: PUSH
12248: LD_EXP 39
12252: EQUAL
12253: IFFALSE 12294
// begin save_counter := save_counter + 1 ;
12255: LD_ADDR_EXP 36
12259: PUSH
12260: LD_EXP 36
12264: PUSH
12265: LD_INT 1
12267: PLUS
12268: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12269: LD_ADDR_EXP 23
12273: PUSH
12274: LD_EXP 23
12278: PUSH
12279: LD_EXP 39
12283: ADD
12284: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12285: LD_EXP 39
12289: PPUSH
12290: CALL_OW 64
// end ; if i = Khatam then
12294: LD_VAR 0 1
12298: PUSH
12299: LD_EXP 41
12303: EQUAL
12304: IFFALSE 12345
// begin save_counter := save_counter + 1 ;
12306: LD_ADDR_EXP 36
12310: PUSH
12311: LD_EXP 36
12315: PUSH
12316: LD_INT 1
12318: PLUS
12319: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12320: LD_ADDR_EXP 23
12324: PUSH
12325: LD_EXP 23
12329: PUSH
12330: LD_EXP 41
12334: ADD
12335: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12336: LD_EXP 41
12340: PPUSH
12341: CALL_OW 64
// end ; if i = Frank then
12345: LD_VAR 0 1
12349: PUSH
12350: LD_EXP 51
12354: EQUAL
12355: IFFALSE 12396
// begin save_counter := save_counter + 1 ;
12357: LD_ADDR_EXP 36
12361: PUSH
12362: LD_EXP 36
12366: PUSH
12367: LD_INT 1
12369: PLUS
12370: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12371: LD_ADDR_EXP 23
12375: PUSH
12376: LD_EXP 23
12380: PUSH
12381: LD_EXP 51
12385: ADD
12386: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12387: LD_EXP 51
12391: PPUSH
12392: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12396: LD_VAR 0 1
12400: PUSH
12401: LD_EXP 37
12405: NONEQUAL
12406: PUSH
12407: LD_VAR 0 1
12411: PPUSH
12412: CALL_OW 302
12416: AND
12417: PUSH
12418: LD_VAR 0 1
12422: PPUSH
12423: CALL_OW 247
12427: PUSH
12428: LD_INT 1
12430: EQUAL
12431: AND
12432: PUSH
12433: LD_VAR 0 1
12437: PUSH
12438: LD_EXP 23
12442: IN
12443: NOT
12444: AND
12445: IFFALSE 12486
// begin save_counter := save_counter + 1 ;
12447: LD_ADDR_EXP 36
12451: PUSH
12452: LD_EXP 36
12456: PUSH
12457: LD_INT 1
12459: PLUS
12460: ST_TO_ADDR
// save_others := save_others ^ i ;
12461: LD_ADDR_EXP 22
12465: PUSH
12466: LD_EXP 22
12470: PUSH
12471: LD_VAR 0 1
12475: ADD
12476: ST_TO_ADDR
// RemoveUnit ( i ) ;
12477: LD_VAR 0 1
12481: PPUSH
12482: CALL_OW 64
// end ; end ;
12486: LD_VAR 0 2
12490: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12491: LD_EXP 24
12495: NOT
12496: PUSH
12497: LD_EXP 25
12501: NOT
12502: AND
12503: PUSH
12504: LD_INT 22
12506: PUSH
12507: LD_INT 1
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 21
12516: PUSH
12517: LD_INT 1
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PPUSH
12528: CALL_OW 69
12532: PUSH
12533: LD_INT 0
12535: EQUAL
12536: OR
12537: IFFALSE 12546
12539: GO 12541
12541: DISABLE
// EndMission ;
12542: CALL 12547 0 0
12546: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12547: LD_INT 0
12549: PPUSH
12550: PPUSH
12551: PPUSH
12552: PPUSH
12553: PPUSH
// wait ( 0 0$01 ) ;
12554: LD_INT 35
12556: PPUSH
12557: CALL_OW 67
// if tick <= 12 12$00 then
12561: LD_OWVAR 1
12565: PUSH
12566: LD_INT 25200
12568: LESSEQUAL
12569: IFFALSE 12578
// SetAchievement ( ACH_ASPEED_3 ) ;
12571: LD_STRING ACH_ASPEED_3
12573: PPUSH
12574: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12578: LD_EXP 23
12582: PUSH
12583: LD_EXP 22
12587: ADD
12588: PPUSH
12589: LD_INT 25
12591: PUSH
12592: LD_INT 4
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PPUSH
12599: CALL_OW 72
12603: PUSH
12604: LD_INT 0
12606: EQUAL
12607: IFFALSE 12623
// begin wait ( 3 ) ;
12609: LD_INT 3
12611: PPUSH
12612: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
12616: LD_STRING ACH_NOSCI
12618: PPUSH
12619: CALL_OW 543
// end ; m1 := solar_builded ;
12623: LD_ADDR_VAR 0 3
12627: PUSH
12628: LD_EXP 14
12632: ST_TO_ADDR
// m2 := veh_on_meta ;
12633: LD_ADDR_VAR 0 4
12637: PUSH
12638: LD_EXP 28
12642: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
12643: LD_ADDR_VAR 0 5
12647: PUSH
12648: LD_EXP 34
12652: PUSH
12653: LD_INT 0
12655: EQUAL
12656: ST_TO_ADDR
// if solar_builded then
12657: LD_EXP 14
12661: IFFALSE 12675
// AddMedal ( Solar1 , 1 ) else
12663: LD_STRING Solar1
12665: PPUSH
12666: LD_INT 1
12668: PPUSH
12669: CALL_OW 101
12673: GO 12686
// AddMedal ( Solar1 , - 1 ) ;
12675: LD_STRING Solar1
12677: PPUSH
12678: LD_INT 1
12680: NEG
12681: PPUSH
12682: CALL_OW 101
// if veh_on_meta then
12686: LD_EXP 28
12690: IFFALSE 12704
// AddMedal ( Solar2 , 1 ) else
12692: LD_STRING Solar2
12694: PPUSH
12695: LD_INT 1
12697: PPUSH
12698: CALL_OW 101
12702: GO 12734
// if solar_builded then
12704: LD_EXP 14
12708: IFFALSE 12723
// AddMedal ( Solar2 , - 1 ) else
12710: LD_STRING Solar2
12712: PPUSH
12713: LD_INT 1
12715: NEG
12716: PPUSH
12717: CALL_OW 101
12721: GO 12734
// AddMedal ( Solar2 , - 2 ) ;
12723: LD_STRING Solar2
12725: PPUSH
12726: LD_INT 2
12728: NEG
12729: PPUSH
12730: CALL_OW 101
// if lose_counter = 0 then
12734: LD_EXP 34
12738: PUSH
12739: LD_INT 0
12741: EQUAL
12742: IFFALSE 12756
// AddMedal ( No , 1 ) else
12744: LD_STRING No
12746: PPUSH
12747: LD_INT 1
12749: PPUSH
12750: CALL_OW 101
12754: GO 12800
// if lose_counter > 0 and lose_counter < 4 then
12756: LD_EXP 34
12760: PUSH
12761: LD_INT 0
12763: GREATER
12764: PUSH
12765: LD_EXP 34
12769: PUSH
12770: LD_INT 4
12772: LESS
12773: AND
12774: IFFALSE 12789
// AddMedal ( No , - 1 ) else
12776: LD_STRING No
12778: PPUSH
12779: LD_INT 1
12781: NEG
12782: PPUSH
12783: CALL_OW 101
12787: GO 12800
// AddMedal ( UpTo4 , - 1 ) ;
12789: LD_STRING UpTo4
12791: PPUSH
12792: LD_INT 1
12794: NEG
12795: PPUSH
12796: CALL_OW 101
// GiveMedals ( MAIN ) ;
12800: LD_STRING MAIN
12802: PPUSH
12803: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
12807: LD_OWVAR 67
12811: PUSH
12812: LD_INT 3
12814: GREATEREQUAL
12815: PUSH
12816: LD_VAR 0 3
12820: AND
12821: PUSH
12822: LD_VAR 0 4
12826: AND
12827: PUSH
12828: LD_VAR 0 5
12832: AND
12833: IFFALSE 12845
// SetAchievementEX ( ACH_AMER , 3 ) ;
12835: LD_STRING ACH_AMER
12837: PPUSH
12838: LD_INT 3
12840: PPUSH
12841: CALL_OW 564
// if IsDead ( Pokryshkin ) then
12845: LD_EXP 52
12849: PPUSH
12850: CALL_OW 301
12854: IFFALSE 12910
// begin stop_talking := true ;
12856: LD_ADDR_OWVAR 56
12860: PUSH
12861: LD_INT 1
12863: ST_TO_ADDR
// for i in save_group union save_others do
12864: LD_ADDR_VAR 0 2
12868: PUSH
12869: LD_EXP 23
12873: PUSH
12874: LD_EXP 22
12878: UNION
12879: PUSH
12880: FOR_IN
12881: IFFALSE 12900
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
12883: LD_VAR 0 2
12887: PPUSH
12888: LD_INT 1
12890: PPUSH
12891: LD_INT 1500
12893: PPUSH
12894: CALL_OW 591
12898: GO 12880
12900: POP
12901: POP
// stop_talking := false ;
12902: LD_ADDR_OWVAR 56
12906: PUSH
12907: LD_INT 0
12909: ST_TO_ADDR
// end ; RewardPeople ( save_group ^ save_others ) ;
12910: LD_EXP 23
12914: PUSH
12915: LD_EXP 22
12919: ADD
12920: PPUSH
12921: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
12925: LD_EXP 37
12929: PPUSH
12930: LD_EXP 2
12934: PUSH
12935: LD_STRING JMM
12937: STR
12938: PPUSH
12939: CALL_OW 38
// if Bobby in save_group then
12943: LD_EXP 38
12947: PUSH
12948: LD_EXP 23
12952: IN
12953: IFFALSE 12973
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
12955: LD_EXP 38
12959: PPUSH
12960: LD_EXP 2
12964: PUSH
12965: LD_STRING Bobby
12967: STR
12968: PPUSH
12969: CALL_OW 38
// if Cyrus in save_group then
12973: LD_EXP 39
12977: PUSH
12978: LD_EXP 23
12982: IN
12983: IFFALSE 13003
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
12985: LD_EXP 39
12989: PPUSH
12990: LD_EXP 2
12994: PUSH
12995: LD_STRING Cyrus
12997: STR
12998: PPUSH
12999: CALL_OW 38
// if Lisa in save_group then
13003: LD_EXP 40
13007: PUSH
13008: LD_EXP 23
13012: IN
13013: IFFALSE 13033
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13015: LD_EXP 40
13019: PPUSH
13020: LD_EXP 2
13024: PUSH
13025: LD_STRING Lisa
13027: STR
13028: PPUSH
13029: CALL_OW 38
// if Frank in save_group then
13033: LD_EXP 51
13037: PUSH
13038: LD_EXP 23
13042: IN
13043: IFFALSE 13063
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13045: LD_EXP 51
13049: PPUSH
13050: LD_EXP 2
13054: PUSH
13055: LD_STRING Frank
13057: STR
13058: PPUSH
13059: CALL_OW 38
// if Khatam in save_group then
13063: LD_EXP 41
13067: PUSH
13068: LD_EXP 23
13072: IN
13073: IFFALSE 13093
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13075: LD_EXP 41
13079: PPUSH
13080: LD_EXP 2
13084: PUSH
13085: LD_STRING Khatam
13087: STR
13088: PPUSH
13089: CALL_OW 38
// if save_others then
13093: LD_EXP 22
13097: IFFALSE 13111
// SaveCharacters ( save_others , 03_others ) ;
13099: LD_EXP 22
13103: PPUSH
13104: LD_STRING 03_others
13106: PPUSH
13107: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13111: LD_EXP 45
13115: PUSH
13116: LD_EXP 45
13120: PPUSH
13121: CALL_OW 302
13125: AND
13126: PUSH
13127: LD_EXP 27
13131: AND
13132: IFFALSE 13144
// begin ResetFog ;
13134: CALL_OW 335
// DisplayEndingScene ;
13138: CALL 13166 0 0
// end else
13142: GO 13157
// DeleteCharacters ( mission_prefix & Cornel ) ;
13144: LD_EXP 2
13148: PUSH
13149: LD_STRING Cornel
13151: STR
13152: PPUSH
13153: CALL_OW 40
// YouWin ;
13157: CALL_OW 103
// end ;
13161: LD_VAR 0 1
13165: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13166: LD_INT 0
13168: PPUSH
13169: PPUSH
13170: PPUSH
13171: PPUSH
13172: PPUSH
13173: PPUSH
// InGameOn ;
13174: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13178: LD_INT 208
13180: PPUSH
13181: LD_INT 62
13183: PPUSH
13184: LD_INT 1
13186: PPUSH
13187: LD_INT 10
13189: NEG
13190: PPUSH
13191: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13195: LD_INT 208
13197: PPUSH
13198: LD_INT 62
13200: PPUSH
13201: LD_INT 1
13203: PPUSH
13204: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13208: LD_ADDR_VAR 0 3
13212: PUSH
13213: LD_INT 22
13215: PUSH
13216: LD_INT 3
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 2
13225: PUSH
13226: LD_INT 21
13228: PUSH
13229: LD_INT 2
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: LD_INT 21
13238: PUSH
13239: LD_INT 1
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: LIST
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PPUSH
13255: CALL_OW 69
13259: ST_TO_ADDR
// if filter then
13260: LD_VAR 0 3
13264: IFFALSE 13292
// for i in filter do
13266: LD_ADDR_VAR 0 2
13270: PUSH
13271: LD_VAR 0 3
13275: PUSH
13276: FOR_IN
13277: IFFALSE 13290
// RemoveUnit ( i ) ;
13279: LD_VAR 0 2
13283: PPUSH
13284: CALL_OW 64
13288: GO 13276
13290: POP
13291: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13292: LD_ADDR_VAR 0 3
13296: PUSH
13297: LD_INT 22
13299: PUSH
13300: LD_INT 4
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 21
13309: PUSH
13310: LD_INT 1
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PPUSH
13321: CALL_OW 69
13325: ST_TO_ADDR
// if filter then
13326: LD_VAR 0 3
13330: IFFALSE 13361
// for i in filter do
13332: LD_ADDR_VAR 0 2
13336: PUSH
13337: LD_VAR 0 3
13341: PUSH
13342: FOR_IN
13343: IFFALSE 13359
// SetLives ( i , 0 ) ;
13345: LD_VAR 0 2
13349: PPUSH
13350: LD_INT 0
13352: PPUSH
13353: CALL_OW 234
13357: GO 13342
13359: POP
13360: POP
// uc_side := 4 ;
13361: LD_ADDR_OWVAR 20
13365: PUSH
13366: LD_INT 4
13368: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13369: LD_ADDR_VAR 0 4
13373: PUSH
13374: LD_STRING Cornell
13376: PPUSH
13377: LD_INT 0
13379: PPUSH
13380: LD_STRING 
13382: PPUSH
13383: CALL 38779 0 3
13387: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13388: LD_VAR 0 4
13392: PPUSH
13393: LD_INT 208
13395: PPUSH
13396: LD_INT 62
13398: PPUSH
13399: LD_INT 0
13401: PPUSH
13402: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13406: LD_VAR 0 4
13410: PPUSH
13411: LD_INT 100
13413: PPUSH
13414: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13418: LD_INT 3
13420: PPUSH
13421: LD_VAR 0 4
13425: PPUSH
13426: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13430: LD_INT 4
13432: PPUSH
13433: LD_INT 3
13435: PPUSH
13436: LD_INT 1
13438: PPUSH
13439: LD_INT 1
13441: PPUSH
13442: CALL_OW 80
// uc_side := 3 ;
13446: LD_ADDR_OWVAR 20
13450: PUSH
13451: LD_INT 3
13453: ST_TO_ADDR
// uc_nation := 3 ;
13454: LD_ADDR_OWVAR 21
13458: PUSH
13459: LD_INT 3
13461: ST_TO_ADDR
// InitHc ;
13462: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13466: LD_ADDR_VAR 0 5
13470: PUSH
13471: LD_STRING Mikhail
13473: PPUSH
13474: LD_INT 0
13476: PPUSH
13477: LD_STRING 
13479: PPUSH
13480: CALL 38779 0 3
13484: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13485: LD_INT 1
13487: PPUSH
13488: LD_INT 1
13490: PPUSH
13491: LD_INT 0
13493: PPUSH
13494: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13498: LD_ADDR_VAR 0 6
13502: PUSH
13503: LD_VAR 0 6
13507: PUSH
13508: CALL_OW 44
13512: ADD
13513: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13514: LD_ADDR_VAR 0 6
13518: PUSH
13519: LD_VAR 0 6
13523: PUSH
13524: CALL_OW 44
13528: ADD
13529: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13530: LD_INT 2
13532: PPUSH
13533: LD_INT 4
13535: PPUSH
13536: LD_INT 0
13538: PPUSH
13539: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13543: LD_ADDR_VAR 0 6
13547: PUSH
13548: LD_VAR 0 6
13552: PUSH
13553: CALL_OW 44
13557: ADD
13558: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13559: LD_VAR 0 5
13563: PPUSH
13564: LD_INT 17
13566: PPUSH
13567: LD_INT 0
13569: PPUSH
13570: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13574: LD_VAR 0 5
13578: PPUSH
13579: LD_INT 210
13581: PPUSH
13582: LD_INT 63
13584: PPUSH
13585: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
13589: LD_VAR 0 5
13593: PPUSH
13594: LD_INT 208
13596: PPUSH
13597: LD_INT 62
13599: PPUSH
13600: CALL_OW 178
// for i in fake_russians do
13604: LD_ADDR_VAR 0 2
13608: PUSH
13609: LD_VAR 0 6
13613: PUSH
13614: FOR_IN
13615: IFFALSE 13693
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
13617: LD_VAR 0 2
13621: PPUSH
13622: LD_INT 17
13624: PPUSH
13625: LD_INT 0
13627: PPUSH
13628: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
13632: LD_VAR 0 2
13636: PPUSH
13637: LD_INT 215
13639: PPUSH
13640: LD_INT 67
13642: PPUSH
13643: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
13647: LD_VAR 0 2
13651: PPUSH
13652: LD_INT 208
13654: PPUSH
13655: LD_INT 62
13657: PPUSH
13658: CALL_OW 178
// if GetClass ( i ) = 4 then
13662: LD_VAR 0 2
13666: PPUSH
13667: CALL_OW 257
13671: PUSH
13672: LD_INT 4
13674: EQUAL
13675: IFFALSE 13691
// ComHeal ( i , fake_cornel ) ;
13677: LD_VAR 0 2
13681: PPUSH
13682: LD_VAR 0 4
13686: PPUSH
13687: CALL_OW 128
// end ;
13691: GO 13614
13693: POP
13694: POP
// Wait ( 0 0$01 ) ;
13695: LD_INT 35
13697: PPUSH
13698: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
13702: LD_INT 208
13704: PPUSH
13705: LD_INT 62
13707: PPUSH
13708: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13712: LD_INT 208
13714: PPUSH
13715: LD_INT 62
13717: PPUSH
13718: LD_INT 1
13720: PPUSH
13721: LD_INT 10
13723: NEG
13724: PPUSH
13725: CALL_OW 330
// Wait ( 0 0$15 ) ;
13729: LD_INT 525
13731: PPUSH
13732: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
13736: LD_INT 208
13738: PPUSH
13739: LD_INT 62
13741: PPUSH
13742: LD_INT 1
13744: PPUSH
13745: CALL_OW 331
// ResetFog ;
13749: CALL_OW 335
// InGameOff ;
13753: CALL_OW 9
// end ;
13757: LD_VAR 0 1
13761: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
13762: LD_INT 10
13764: PPUSH
13765: LD_INT 22
13767: PUSH
13768: LD_INT 1
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PPUSH
13775: CALL_OW 70
13779: PUSH
13780: LD_EXP 44
13784: PPUSH
13785: CALL_OW 302
13789: AND
13790: PUSH
13791: LD_INT 22
13793: PUSH
13794: LD_INT 1
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PPUSH
13801: CALL_OW 69
13805: PPUSH
13806: LD_EXP 44
13810: PPUSH
13811: CALL_OW 74
13815: PPUSH
13816: LD_EXP 44
13820: PPUSH
13821: CALL_OW 296
13825: PUSH
13826: LD_INT 30
13828: LESS
13829: OR
13830: IFFALSE 13881
13832: GO 13834
13834: DISABLE
// begin enable ;
13835: ENABLE
// powell_warn := powell_warn + 1 ;
13836: LD_ADDR_EXP 35
13840: PUSH
13841: LD_EXP 35
13845: PUSH
13846: LD_INT 1
13848: PLUS
13849: ST_TO_ADDR
// if powell_warn = 3 then
13850: LD_EXP 35
13854: PUSH
13855: LD_INT 3
13857: EQUAL
13858: IFFALSE 13869
// begin YouLost ( 5 ) ;
13860: LD_STRING 5
13862: PPUSH
13863: CALL_OW 104
// exit ;
13867: GO 13881
// end ; SayRadio ( Powell , DWarn-Pow-1 ) ;
13869: LD_EXP 46
13873: PPUSH
13874: LD_STRING DWarn-Pow-1
13876: PPUSH
13877: CALL_OW 94
// end ; end_of_file
13881: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
13882: LD_EXP 8
13886: IFFALSE 15723
13888: GO 13890
13890: DISABLE
13891: LD_INT 0
13893: PPUSH
13894: PPUSH
13895: PPUSH
13896: PPUSH
13897: PPUSH
13898: PPUSH
13899: PPUSH
13900: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
13901: LD_EXP 44
13905: PUSH
13906: LD_EXP 45
13910: ADD
13911: PUSH
13912: LD_EXP 6
13916: ADD
13917: PPUSH
13918: LD_INT 250
13920: PPUSH
13921: LD_INT 120
13923: PPUSH
13924: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
13928: LD_ADDR_VAR 0 2
13932: PUSH
13933: LD_EXP 6
13937: PPUSH
13938: LD_INT 25
13940: PUSH
13941: LD_INT 2
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PPUSH
13948: CALL_OW 72
13952: PUSH
13953: LD_EXP 45
13957: DIFF
13958: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
13959: LD_ADDR_VAR 0 3
13963: PUSH
13964: LD_EXP 6
13968: PPUSH
13969: LD_INT 21
13971: PUSH
13972: LD_INT 1
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PPUSH
13979: CALL_OW 72
13983: PUSH
13984: LD_VAR 0 2
13988: DIFF
13989: ST_TO_ADDR
// if not has_eng then
13990: LD_VAR 0 2
13994: NOT
13995: IFFALSE 14078
// begin uc_side := 4 ;
13997: LD_ADDR_OWVAR 20
14001: PUSH
14002: LD_INT 4
14004: ST_TO_ADDR
// uc_nation := 1 ;
14005: LD_ADDR_OWVAR 21
14009: PUSH
14010: LD_INT 1
14012: ST_TO_ADDR
// bc_type := b_depot ;
14013: LD_ADDR_OWVAR 42
14017: PUSH
14018: LD_INT 0
14020: ST_TO_ADDR
// bc_level := 2 ;
14021: LD_ADDR_OWVAR 43
14025: PUSH
14026: LD_INT 2
14028: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14029: LD_ADDR_VAR 0 4
14033: PUSH
14034: LD_INT 264
14036: PPUSH
14037: LD_INT 120
14039: PPUSH
14040: LD_INT 4
14042: PPUSH
14043: CALL_OW 47
14047: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14048: LD_INT 264
14050: PPUSH
14051: LD_INT 120
14053: PPUSH
14054: LD_INT 4
14056: PPUSH
14057: LD_INT 10
14059: NEG
14060: PPUSH
14061: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14065: LD_INT 264
14067: PPUSH
14068: LD_INT 120
14070: PPUSH
14071: LD_INT 4
14073: PPUSH
14074: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14078: LD_INT 35
14080: PPUSH
14081: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14085: LD_EXP 44
14089: PPUSH
14090: LD_INT 10
14092: PPUSH
14093: CALL_OW 308
14097: PUSH
14098: LD_EXP 44
14102: PPUSH
14103: CALL_OW 310
14107: PPUSH
14108: LD_INT 10
14110: PPUSH
14111: CALL_OW 308
14115: OR
14116: IFFALSE 14078
// if has_eng and not dep then
14118: LD_VAR 0 2
14122: PUSH
14123: LD_VAR 0 4
14127: NOT
14128: AND
14129: IFFALSE 14279
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14131: LD_VAR 0 2
14135: PPUSH
14136: LD_INT 0
14138: PPUSH
14139: LD_INT 264
14141: PPUSH
14142: LD_INT 120
14144: PPUSH
14145: LD_INT 4
14147: PPUSH
14148: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14152: LD_INT 35
14154: PPUSH
14155: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14159: LD_INT 22
14161: PUSH
14162: LD_INT 4
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 30
14171: PUSH
14172: LD_INT 0
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PPUSH
14183: CALL_OW 69
14187: IFFALSE 14152
// ComMoveXY ( filter , 264 , 120 ) ;
14189: LD_VAR 0 3
14193: PPUSH
14194: LD_INT 264
14196: PPUSH
14197: LD_INT 120
14199: PPUSH
14200: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14204: LD_INT 35
14206: PPUSH
14207: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14211: LD_INT 22
14213: PUSH
14214: LD_INT 4
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 30
14223: PUSH
14224: LD_INT 0
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 3
14233: PUSH
14234: LD_INT 57
14236: PUSH
14237: EMPTY
14238: LIST
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: LIST
14248: PPUSH
14249: CALL_OW 69
14253: IFFALSE 14204
// ComMoveXY ( filter , 247 , 113 ) ;
14255: LD_VAR 0 3
14259: PPUSH
14260: LD_INT 247
14262: PPUSH
14263: LD_INT 113
14265: PPUSH
14266: CALL_OW 111
// Wait ( 0 0$2 ) ;
14270: LD_INT 70
14272: PPUSH
14273: CALL_OW 67
// end else
14277: GO 14291
// begin SetSide ( dep , 4 ) ;
14279: LD_VAR 0 4
14283: PPUSH
14284: LD_INT 4
14286: PPUSH
14287: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14291: LD_ADDR_VAR 0 4
14295: PUSH
14296: LD_INT 22
14298: PUSH
14299: LD_INT 4
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: LD_INT 30
14308: PUSH
14309: LD_INT 0
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PPUSH
14320: CALL_OW 69
14324: PUSH
14325: LD_INT 1
14327: ARRAY
14328: ST_TO_ADDR
// if not has_eng then
14329: LD_VAR 0 2
14333: NOT
14334: IFFALSE 14421
// for i = 1 to 2 do
14336: LD_ADDR_VAR 0 1
14340: PUSH
14341: DOUBLE
14342: LD_INT 1
14344: DEC
14345: ST_TO_ADDR
14346: LD_INT 2
14348: PUSH
14349: FOR_TO
14350: IFFALSE 14419
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14352: LD_VAR 0 3
14356: PUSH
14357: LD_INT 1
14359: ARRAY
14360: PPUSH
14361: LD_VAR 0 4
14365: PPUSH
14366: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14370: LD_VAR 0 3
14374: PUSH
14375: LD_INT 1
14377: ARRAY
14378: PPUSH
14379: LD_INT 2
14381: PPUSH
14382: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14386: LD_VAR 0 3
14390: PUSH
14391: LD_INT 1
14393: ARRAY
14394: PPUSH
14395: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14399: LD_ADDR_VAR 0 3
14403: PUSH
14404: LD_VAR 0 3
14408: PPUSH
14409: LD_INT 1
14411: PPUSH
14412: CALL_OW 3
14416: ST_TO_ADDR
// end ;
14417: GO 14349
14419: POP
14420: POP
// if IsInUnit ( Cornel ) then
14421: LD_EXP 44
14425: PPUSH
14426: CALL_OW 310
14430: IFFALSE 14508
// begin cargo := IsInUnit ( Cornel ) ;
14432: LD_ADDR_VAR 0 7
14436: PUSH
14437: LD_EXP 44
14441: PPUSH
14442: CALL_OW 310
14446: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14447: LD_VAR 0 7
14451: PPUSH
14452: LD_INT 1
14454: PPUSH
14455: CALL_OW 289
14459: IFFALSE 14470
// ComUnload ( cargo ) ;
14461: LD_VAR 0 7
14465: PPUSH
14466: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14470: LD_EXP 44
14474: PPUSH
14475: LD_INT 235
14477: PPUSH
14478: LD_INT 122
14480: PPUSH
14481: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14485: LD_EXP 44
14489: PPUSH
14490: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14494: LD_EXP 44
14498: PPUSH
14499: LD_VAR 0 4
14503: PPUSH
14504: CALL_OW 180
// end ; if Bierezov then
14508: LD_EXP 45
14512: IFFALSE 14560
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14514: LD_EXP 45
14518: PPUSH
14519: LD_INT 260
14521: PPUSH
14522: LD_INT 120
14524: PPUSH
14525: CALL_OW 111
// if dep then
14529: LD_VAR 0 4
14533: IFFALSE 14551
// AddComEnterUnit ( Bierezov , dep ) else
14535: LD_EXP 45
14539: PPUSH
14540: LD_VAR 0 4
14544: PPUSH
14545: CALL_OW 180
14549: GO 14560
// AddComHold ( Bierezov ) ;
14551: LD_EXP 45
14555: PPUSH
14556: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14560: LD_INT 525
14562: PPUSH
14563: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14567: LD_ADDR_VAR 0 2
14571: PUSH
14572: LD_INT 22
14574: PUSH
14575: LD_INT 4
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PUSH
14582: LD_INT 25
14584: PUSH
14585: LD_INT 2
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PPUSH
14596: CALL_OW 69
14600: PUSH
14601: LD_EXP 45
14605: DIFF
14606: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14607: LD_INT 35
14609: PPUSH
14610: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
14614: LD_ADDR_VAR 0 6
14618: PUSH
14619: LD_INT 10
14621: PPUSH
14622: CALL_OW 435
14626: ST_TO_ADDR
// if crates then
14627: LD_VAR 0 6
14631: IFFALSE 14660
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
14633: LD_VAR 0 2
14637: PPUSH
14638: LD_VAR 0 6
14642: PUSH
14643: LD_INT 1
14645: ARRAY
14646: PPUSH
14647: LD_VAR 0 6
14651: PUSH
14652: LD_INT 2
14654: ARRAY
14655: PPUSH
14656: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
14660: LD_VAR 0 4
14664: PPUSH
14665: CALL_OW 274
14669: PPUSH
14670: LD_INT 1
14672: PPUSH
14673: CALL_OW 275
14677: PUSH
14678: LD_INT 40
14680: GREATEREQUAL
14681: IFFALSE 14607
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
14683: LD_ADDR_VAR 0 5
14687: PUSH
14688: LD_INT 4
14690: PUSH
14691: LD_INT 256
14693: PUSH
14694: LD_INT 111
14696: PUSH
14697: LD_INT 2
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 31
14708: PUSH
14709: LD_INT 243
14711: PUSH
14712: LD_INT 112
14714: PUSH
14715: LD_INT 2
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: PUSH
14724: LD_INT 31
14726: PUSH
14727: LD_INT 254
14729: PUSH
14730: LD_INT 114
14732: PUSH
14733: LD_INT 2
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: LIST
14746: ST_TO_ADDR
// for i in blist do
14747: LD_ADDR_VAR 0 1
14751: PUSH
14752: LD_VAR 0 5
14756: PUSH
14757: FOR_IN
14758: IFFALSE 14807
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
14760: LD_VAR 0 2
14764: PPUSH
14765: LD_VAR 0 1
14769: PUSH
14770: LD_INT 1
14772: ARRAY
14773: PPUSH
14774: LD_VAR 0 1
14778: PUSH
14779: LD_INT 2
14781: ARRAY
14782: PPUSH
14783: LD_VAR 0 1
14787: PUSH
14788: LD_INT 3
14790: ARRAY
14791: PPUSH
14792: LD_VAR 0 1
14796: PUSH
14797: LD_INT 4
14799: ARRAY
14800: PPUSH
14801: CALL_OW 205
14805: GO 14757
14807: POP
14808: POP
// repeat wait ( 0 0$01 ) ;
14809: LD_INT 35
14811: PPUSH
14812: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
14816: LD_INT 22
14818: PUSH
14819: LD_INT 4
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: LD_INT 30
14828: PUSH
14829: LD_INT 4
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: LD_INT 3
14838: PUSH
14839: LD_INT 57
14841: PUSH
14842: EMPTY
14843: LIST
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: LIST
14853: PPUSH
14854: CALL_OW 69
14858: IFFALSE 14809
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14860: LD_VAR 0 3
14864: PPUSH
14865: LD_INT 22
14867: PUSH
14868: LD_INT 4
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: LD_INT 30
14877: PUSH
14878: LD_INT 4
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PPUSH
14889: CALL_OW 69
14893: PUSH
14894: LD_INT 1
14896: ARRAY
14897: PPUSH
14898: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
14902: LD_VAR 0 3
14906: PPUSH
14907: LD_INT 1
14909: PPUSH
14910: CALL_OW 183
// if has_eng > 1 then
14914: LD_VAR 0 2
14918: PUSH
14919: LD_INT 1
14921: GREATER
14922: IFFALSE 15064
// for i = has_eng downto 2 do
14924: LD_ADDR_VAR 0 1
14928: PUSH
14929: DOUBLE
14930: LD_VAR 0 2
14934: INC
14935: ST_TO_ADDR
14936: LD_INT 2
14938: PUSH
14939: FOR_DOWNTO
14940: IFFALSE 15062
// begin if IsInUnit ( has_eng [ i ] ) then
14942: LD_VAR 0 2
14946: PUSH
14947: LD_VAR 0 1
14951: ARRAY
14952: PPUSH
14953: CALL_OW 310
14957: IFFALSE 14974
// ComExitBuilding ( has_eng [ i ] ) ;
14959: LD_VAR 0 2
14963: PUSH
14964: LD_VAR 0 1
14968: ARRAY
14969: PPUSH
14970: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14974: LD_VAR 0 2
14978: PUSH
14979: LD_VAR 0 1
14983: ARRAY
14984: PPUSH
14985: LD_INT 22
14987: PUSH
14988: LD_INT 4
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 30
14997: PUSH
14998: LD_INT 4
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PPUSH
15009: CALL_OW 69
15013: PUSH
15014: LD_INT 1
15016: ARRAY
15017: PPUSH
15018: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15022: LD_VAR 0 2
15026: PUSH
15027: LD_VAR 0 1
15031: ARRAY
15032: PPUSH
15033: LD_INT 1
15035: PPUSH
15036: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15040: LD_ADDR_VAR 0 2
15044: PUSH
15045: LD_VAR 0 2
15049: PPUSH
15050: LD_VAR 0 1
15054: PPUSH
15055: CALL_OW 3
15059: ST_TO_ADDR
// end ;
15060: GO 14939
15062: POP
15063: POP
// repeat wait ( 0 0$01 ) ;
15064: LD_INT 35
15066: PPUSH
15067: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15071: LD_INT 22
15073: PUSH
15074: LD_INT 4
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 30
15083: PUSH
15084: LD_INT 31
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 3
15093: PUSH
15094: LD_INT 57
15096: PUSH
15097: EMPTY
15098: LIST
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: LIST
15108: PPUSH
15109: CALL_OW 69
15113: PUSH
15114: LD_INT 1
15116: GREATER
15117: IFFALSE 15064
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15119: LD_ADDR_VAR 0 8
15123: PUSH
15124: LD_EXP 6
15128: PPUSH
15129: LD_INT 25
15131: PUSH
15132: LD_INT 1
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PPUSH
15139: CALL_OW 72
15143: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15144: LD_ADDR_VAR 0 1
15148: PUSH
15149: DOUBLE
15150: LD_INT 1
15152: DEC
15153: ST_TO_ADDR
15154: LD_INT 22
15156: PUSH
15157: LD_INT 4
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 30
15166: PUSH
15167: LD_INT 31
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 3
15176: PUSH
15177: LD_INT 57
15179: PUSH
15180: EMPTY
15181: LIST
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: PPUSH
15192: CALL_OW 69
15196: PUSH
15197: FOR_TO
15198: IFFALSE 15282
// begin if not sol [ i ] then
15200: LD_VAR 0 8
15204: PUSH
15205: LD_VAR 0 1
15209: ARRAY
15210: NOT
15211: IFFALSE 15215
// break ;
15213: GO 15282
// ComExitBuilding ( sol [ i ] ) ;
15215: LD_VAR 0 8
15219: PUSH
15220: LD_VAR 0 1
15224: ARRAY
15225: PPUSH
15226: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15230: LD_VAR 0 8
15234: PUSH
15235: LD_VAR 0 1
15239: ARRAY
15240: PPUSH
15241: LD_INT 22
15243: PUSH
15244: LD_INT 4
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PUSH
15251: LD_INT 30
15253: PUSH
15254: LD_INT 31
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PPUSH
15265: CALL_OW 69
15269: PUSH
15270: LD_VAR 0 1
15274: ARRAY
15275: PPUSH
15276: CALL_OW 180
// end ;
15280: GO 15197
15282: POP
15283: POP
// if sol > 3 then
15284: LD_VAR 0 8
15288: PUSH
15289: LD_INT 3
15291: GREATER
15292: IFFALSE 15409
// begin ComExitBuilding ( sol [ 3 ] ) ;
15294: LD_VAR 0 8
15298: PUSH
15299: LD_INT 3
15301: ARRAY
15302: PPUSH
15303: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15307: LD_VAR 0 8
15311: PUSH
15312: LD_INT 3
15314: ARRAY
15315: PPUSH
15316: LD_INT 246
15318: PPUSH
15319: LD_INT 94
15321: PPUSH
15322: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15326: LD_VAR 0 8
15330: PUSH
15331: LD_INT 3
15333: ARRAY
15334: PPUSH
15335: LD_INT 175
15337: PPUSH
15338: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15342: LD_VAR 0 8
15346: PUSH
15347: LD_INT 3
15349: ARRAY
15350: PPUSH
15351: LD_INT 224
15353: PPUSH
15354: LD_INT 90
15356: PPUSH
15357: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15361: LD_VAR 0 8
15365: PUSH
15366: LD_INT 3
15368: ARRAY
15369: PPUSH
15370: LD_INT 245
15372: PPUSH
15373: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15377: LD_VAR 0 8
15381: PUSH
15382: LD_INT 3
15384: ARRAY
15385: PPUSH
15386: LD_INT 223
15388: PPUSH
15389: LD_INT 110
15391: PPUSH
15392: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15396: LD_VAR 0 8
15400: PUSH
15401: LD_INT 3
15403: ARRAY
15404: PPUSH
15405: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15409: LD_VAR 0 2
15413: PPUSH
15414: LD_VAR 0 4
15418: PPUSH
15419: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15423: LD_INT 22
15425: PUSH
15426: LD_INT 4
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 30
15435: PUSH
15436: LD_INT 4
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PPUSH
15447: CALL_OW 69
15451: PUSH
15452: LD_INT 1
15454: ARRAY
15455: PPUSH
15456: CALL_OW 313
15460: PUSH
15461: LD_INT 6
15463: LESS
15464: IFFALSE 15528
// begin if IsInUnit ( Cornel ) then
15466: LD_EXP 44
15470: PPUSH
15471: CALL_OW 310
15475: IFFALSE 15486
// ComExitBuilding ( Cornel ) ;
15477: LD_EXP 44
15481: PPUSH
15482: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15486: LD_EXP 44
15490: PPUSH
15491: LD_INT 22
15493: PUSH
15494: LD_INT 4
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 30
15503: PUSH
15504: LD_INT 4
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PPUSH
15515: CALL_OW 69
15519: PUSH
15520: LD_INT 1
15522: ARRAY
15523: PPUSH
15524: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15528: LD_INT 35
15530: PPUSH
15531: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15535: LD_ADDR_VAR 0 3
15539: PUSH
15540: LD_INT 22
15542: PUSH
15543: LD_INT 4
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PUSH
15550: LD_INT 21
15552: PUSH
15553: LD_INT 3
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PUSH
15560: LD_INT 3
15562: PUSH
15563: LD_INT 24
15565: PUSH
15566: LD_INT 1000
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: LIST
15581: PPUSH
15582: CALL_OW 69
15586: ST_TO_ADDR
// if filter and has_eng then
15587: LD_VAR 0 3
15591: PUSH
15592: LD_VAR 0 2
15596: AND
15597: IFFALSE 15663
// begin for i in has_eng do
15599: LD_ADDR_VAR 0 1
15603: PUSH
15604: LD_VAR 0 2
15608: PUSH
15609: FOR_IN
15610: IFFALSE 15659
// begin if IsInUnit ( i ) then
15612: LD_VAR 0 1
15616: PPUSH
15617: CALL_OW 310
15621: IFFALSE 15632
// ComExitBuilding ( i ) ;
15623: LD_VAR 0 1
15627: PPUSH
15628: CALL_OW 122
// Wait ( 3 ) ;
15632: LD_INT 3
15634: PPUSH
15635: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
15639: LD_VAR 0 1
15643: PPUSH
15644: LD_VAR 0 3
15648: PUSH
15649: LD_INT 1
15651: ARRAY
15652: PPUSH
15653: CALL_OW 130
// end ;
15657: GO 15609
15659: POP
15660: POP
// end else
15661: GO 15717
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
15663: LD_VAR 0 2
15667: PUSH
15668: LD_VAR 0 2
15672: PPUSH
15673: LD_INT 56
15675: PUSH
15676: EMPTY
15677: LIST
15678: PPUSH
15679: CALL_OW 72
15683: AND
15684: IFFALSE 15717
// for i in has_eng do
15686: LD_ADDR_VAR 0 1
15690: PUSH
15691: LD_VAR 0 2
15695: PUSH
15696: FOR_IN
15697: IFFALSE 15715
// ComEnterUnit ( i , dep ) ;
15699: LD_VAR 0 1
15703: PPUSH
15704: LD_VAR 0 4
15708: PPUSH
15709: CALL_OW 120
15713: GO 15696
15715: POP
15716: POP
// until cornel_prepared ;
15717: LD_EXP 11
15721: IFFALSE 15528
// end ;
15723: PPOPN 8
15725: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
15726: LD_EXP 11
15730: IFFALSE 16129
15732: GO 15734
15734: DISABLE
15735: LD_INT 0
15737: PPUSH
15738: PPUSH
15739: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
15740: LD_ADDR_VAR 0 2
15744: PUSH
15745: LD_INT 22
15747: PUSH
15748: LD_INT 4
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: LD_INT 30
15757: PUSH
15758: LD_INT 4
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PPUSH
15769: CALL_OW 69
15773: PUSH
15774: LD_INT 1
15776: ARRAY
15777: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
15778: LD_EXP 6
15782: PPUSH
15783: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
15787: LD_EXP 45
15791: PUSH
15792: LD_EXP 45
15796: PPUSH
15797: CALL_OW 310
15801: AND
15802: IFFALSE 15813
// ComExitBuilding ( Bierezov ) ;
15804: LD_EXP 45
15808: PPUSH
15809: CALL_OW 122
// Wait ( 0 0$03 ) ;
15813: LD_INT 105
15815: PPUSH
15816: CALL_OW 67
// for i in cornel_units do
15820: LD_ADDR_VAR 0 1
15824: PUSH
15825: LD_EXP 6
15829: PUSH
15830: FOR_IN
15831: IFFALSE 15907
// begin if GetClass ( i ) in [ 2 , 3 ] then
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 257
15842: PUSH
15843: LD_INT 2
15845: PUSH
15846: LD_INT 3
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: IN
15853: IFFALSE 15890
// begin ComEnterUnit ( i , arm ) ;
15855: LD_VAR 0 1
15859: PPUSH
15860: LD_VAR 0 2
15864: PPUSH
15865: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
15869: LD_VAR 0 1
15873: PPUSH
15874: LD_INT 1
15876: PPUSH
15877: CALL_OW 183
// AddComExitBuilding ( i ) ;
15881: LD_VAR 0 1
15885: PPUSH
15886: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
15890: LD_VAR 0 1
15894: PPUSH
15895: LD_INT 257
15897: PPUSH
15898: LD_INT 121
15900: PPUSH
15901: CALL_OW 171
// end ;
15905: GO 15830
15907: POP
15908: POP
// Wait ( 1 1$00 ) ;
15909: LD_INT 2100
15911: PPUSH
15912: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
15916: LD_ADDR_VAR 0 3
15920: PUSH
15921: LD_EXP 44
15925: PUSH
15926: LD_EXP 45
15930: ADD
15931: PUSH
15932: LD_EXP 6
15936: ADD
15937: PUSH
15938: LD_EXP 6
15942: PPUSH
15943: LD_INT 21
15945: PUSH
15946: LD_INT 2
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PPUSH
15953: CALL_OW 72
15957: DIFF
15958: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
15959: LD_VAR 0 3
15963: PPUSH
15964: LD_INT 248
15966: PPUSH
15967: LD_INT 85
15969: PPUSH
15970: CALL_OW 111
// AddComHold ( filter ) ;
15974: LD_VAR 0 3
15978: PPUSH
15979: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
15983: LD_INT 35
15985: PPUSH
15986: CALL_OW 67
// until cornel_attack ;
15990: LD_EXP 9
15994: IFFALSE 15983
// ComAgressiveMove ( filter , 209 , 63 ) ;
15996: LD_VAR 0 3
16000: PPUSH
16001: LD_INT 209
16003: PPUSH
16004: LD_INT 63
16006: PPUSH
16007: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16011: LD_EXP 44
16015: PPUSH
16016: LD_INT 208
16018: PPUSH
16019: LD_INT 62
16021: PPUSH
16022: CALL_OW 114
// AddComHold ( Cornel ) ;
16026: LD_EXP 44
16030: PPUSH
16031: CALL_OW 200
// if Bierezov then
16035: LD_EXP 45
16039: IFFALSE 16129
// begin filter := filter diff Bierezov ;
16041: LD_ADDR_VAR 0 3
16045: PUSH
16046: LD_VAR 0 3
16050: PUSH
16051: LD_EXP 45
16055: DIFF
16056: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16057: LD_EXP 45
16061: PPUSH
16062: LD_INT 6
16064: PPUSH
16065: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16069: LD_EXP 45
16073: PPUSH
16074: LD_INT 235
16076: PPUSH
16077: LD_INT 60
16079: PPUSH
16080: CALL_OW 111
// AddComHold ( Bierezov ) ;
16084: LD_EXP 45
16088: PPUSH
16089: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16093: LD_EXP 45
16097: PPUSH
16098: LD_INT 350
16100: PPUSH
16101: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16105: LD_EXP 45
16109: PPUSH
16110: LD_INT 198
16112: PPUSH
16113: LD_INT 28
16115: PPUSH
16116: CALL_OW 171
// AddComHold ( Bierezov ) ;
16120: LD_EXP 45
16124: PPUSH
16125: CALL_OW 200
// end ; end ; end_of_file
16129: PPOPN 3
16131: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16132: LD_EXP 53
16136: PUSH
16137: LD_EXP 31
16141: NOT
16142: AND
16143: PUSH
16144: LD_EXP 32
16148: NOT
16149: AND
16150: IFFALSE 16600
16152: GO 16154
16154: DISABLE
16155: LD_INT 0
16157: PPUSH
16158: PPUSH
16159: PPUSH
16160: PPUSH
// begin enable ;
16161: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16162: LD_ADDR_VAR 0 4
16166: PUSH
16167: LD_INT 81
16169: PUSH
16170: LD_INT 3
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PPUSH
16177: CALL_OW 69
16181: ST_TO_ADDR
// for i = 1 to ru_patrol do
16182: LD_ADDR_VAR 0 2
16186: PUSH
16187: DOUBLE
16188: LD_INT 1
16190: DEC
16191: ST_TO_ADDR
16192: LD_EXP 53
16196: PUSH
16197: FOR_TO
16198: IFFALSE 16598
// begin un := ru_patrol [ i ] ;
16200: LD_ADDR_VAR 0 1
16204: PUSH
16205: LD_EXP 53
16209: PUSH
16210: LD_VAR 0 2
16214: ARRAY
16215: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16216: LD_VAR 0 1
16220: PPUSH
16221: LD_INT 13
16223: PPUSH
16224: CALL_OW 308
16228: IFFALSE 16333
// begin if not ru_alert then
16230: LD_EXP 60
16234: NOT
16235: IFFALSE 16245
// ru_alert := true ;
16237: LD_ADDR_EXP 60
16241: PUSH
16242: LD_INT 1
16244: ST_TO_ADDR
// if not See ( 1 , un ) then
16245: LD_INT 1
16247: PPUSH
16248: LD_VAR 0 1
16252: PPUSH
16253: CALL_OW 292
16257: NOT
16258: IFFALSE 16272
// SetLives ( un , 1000 ) ;
16260: LD_VAR 0 1
16264: PPUSH
16265: LD_INT 1000
16267: PPUSH
16268: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16272: LD_ADDR_EXP 53
16276: PUSH
16277: LD_EXP 53
16281: PUSH
16282: LD_VAR 0 1
16286: DIFF
16287: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16288: LD_VAR 0 1
16292: PPUSH
16293: LD_INT 22
16295: PUSH
16296: LD_INT 3
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: LD_INT 30
16305: PUSH
16306: LD_INT 4
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PPUSH
16317: CALL_OW 69
16321: PPUSH
16322: CALL 1007 0 1
16326: PPUSH
16327: CALL_OW 120
// continue ;
16331: GO 16197
// end ; if IsOk ( un ) and not HasTask ( un ) then
16333: LD_VAR 0 1
16337: PPUSH
16338: CALL_OW 302
16342: PUSH
16343: LD_VAR 0 1
16347: PPUSH
16348: CALL_OW 314
16352: NOT
16353: AND
16354: IFFALSE 16447
// begin for j = 1 to ru_firepoints_south [ i ] do
16356: LD_ADDR_VAR 0 3
16360: PUSH
16361: DOUBLE
16362: LD_INT 1
16364: DEC
16365: ST_TO_ADDR
16366: LD_EXP 59
16370: PUSH
16371: LD_VAR 0 2
16375: ARRAY
16376: PUSH
16377: FOR_TO
16378: IFFALSE 16445
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16380: LD_VAR 0 1
16384: PPUSH
16385: LD_EXP 59
16389: PUSH
16390: LD_VAR 0 2
16394: ARRAY
16395: PUSH
16396: LD_VAR 0 3
16400: ARRAY
16401: PUSH
16402: LD_INT 1
16404: ARRAY
16405: PPUSH
16406: LD_EXP 59
16410: PUSH
16411: LD_VAR 0 2
16415: ARRAY
16416: PUSH
16417: LD_VAR 0 3
16421: ARRAY
16422: PUSH
16423: LD_INT 2
16425: ARRAY
16426: PPUSH
16427: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16431: LD_VAR 0 1
16435: PPUSH
16436: LD_INT 70
16438: PPUSH
16439: CALL_OW 202
// end ;
16443: GO 16377
16445: POP
16446: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16447: LD_VAR 0 1
16451: PPUSH
16452: CALL_OW 256
16456: PUSH
16457: LD_INT 700
16459: LESS
16460: PUSH
16461: LD_VAR 0 1
16465: PPUSH
16466: LD_INT 13
16468: PPUSH
16469: CALL_OW 308
16473: NOT
16474: AND
16475: IFFALSE 16527
// begin ComMoveToArea ( un , retreatArea ) ;
16477: LD_VAR 0 1
16481: PPUSH
16482: LD_INT 13
16484: PPUSH
16485: CALL_OW 113
// if not ru_alert_xy then
16489: LD_EXP 61
16493: NOT
16494: IFFALSE 16525
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16496: LD_ADDR_EXP 61
16500: PUSH
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 250
16510: PUSH
16511: LD_VAR 0 1
16515: PPUSH
16516: CALL_OW 251
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: ST_TO_ADDR
// end else
16525: GO 16596
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16527: LD_VAR 0 1
16531: PPUSH
16532: LD_VAR 0 4
16536: PPUSH
16537: LD_VAR 0 1
16541: PPUSH
16542: CALL_OW 74
16546: PPUSH
16547: CALL_OW 296
16551: PUSH
16552: LD_INT 9
16554: LESS
16555: PUSH
16556: LD_VAR 0 1
16560: PPUSH
16561: CALL_OW 256
16565: PUSH
16566: LD_INT 500
16568: GREATER
16569: AND
16570: IFFALSE 16596
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
16572: LD_VAR 0 1
16576: PPUSH
16577: LD_VAR 0 4
16581: PPUSH
16582: LD_VAR 0 1
16586: PPUSH
16587: CALL_OW 74
16591: PPUSH
16592: CALL_OW 115
// end ;
16596: GO 16197
16598: POP
16599: POP
// end ;
16600: PPOPN 4
16602: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
16603: LD_EXP 60
16607: PUSH
16608: LD_EXP 61
16612: AND
16613: PUSH
16614: LD_EXP 31
16618: NOT
16619: AND
16620: PUSH
16621: LD_EXP 32
16625: NOT
16626: AND
16627: IFFALSE 16837
16629: GO 16631
16631: DISABLE
16632: LD_INT 0
16634: PPUSH
16635: PPUSH
// begin enable ;
16636: ENABLE
// if not ru_vehicles then
16637: LD_EXP 56
16641: NOT
16642: IFFALSE 16646
// exit ;
16644: GO 16837
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16646: LD_ADDR_VAR 0 2
16650: PUSH
16651: LD_INT 81
16653: PUSH
16654: LD_INT 3
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PPUSH
16661: CALL_OW 69
16665: ST_TO_ADDR
// if ru_vehicles then
16666: LD_EXP 56
16670: IFFALSE 16837
// begin for i in ru_vehicles do
16672: LD_ADDR_VAR 0 1
16676: PUSH
16677: LD_EXP 56
16681: PUSH
16682: FOR_IN
16683: IFFALSE 16835
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
16685: LD_VAR 0 1
16689: PPUSH
16690: CALL_OW 302
16694: PUSH
16695: LD_VAR 0 1
16699: PPUSH
16700: LD_VAR 0 2
16704: PPUSH
16705: LD_VAR 0 1
16709: PPUSH
16710: CALL_OW 74
16714: PPUSH
16715: CALL_OW 296
16719: PUSH
16720: LD_INT 9
16722: LESS
16723: AND
16724: IFFALSE 16750
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
16726: LD_VAR 0 1
16730: PPUSH
16731: LD_VAR 0 2
16735: PPUSH
16736: LD_VAR 0 1
16740: PPUSH
16741: CALL_OW 74
16745: PPUSH
16746: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
16750: LD_VAR 0 1
16754: PPUSH
16755: CALL_OW 314
16759: NOT
16760: PUSH
16761: LD_VAR 0 1
16765: PPUSH
16766: CALL_OW 302
16770: AND
16771: PUSH
16772: LD_VAR 0 1
16776: PPUSH
16777: LD_EXP 61
16781: PUSH
16782: LD_INT 1
16784: ARRAY
16785: PPUSH
16786: LD_EXP 61
16790: PUSH
16791: LD_INT 2
16793: ARRAY
16794: PPUSH
16795: CALL_OW 297
16799: PUSH
16800: LD_INT 10
16802: GREATER
16803: AND
16804: IFFALSE 16833
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
16806: LD_VAR 0 1
16810: PPUSH
16811: LD_EXP 61
16815: PUSH
16816: LD_INT 1
16818: ARRAY
16819: PPUSH
16820: LD_EXP 61
16824: PUSH
16825: LD_INT 2
16827: ARRAY
16828: PPUSH
16829: CALL_OW 114
// end ;
16833: GO 16682
16835: POP
16836: POP
// end ; end ;
16837: PPOPN 2
16839: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
16840: LD_EXP 61
16844: PUSH
16845: LD_EXP 60
16849: AND
16850: PUSH
16851: LD_INT 3
16853: PPUSH
16854: CALL_OW 463
16858: NOT
16859: AND
16860: PUSH
16861: LD_EXP 31
16865: NOT
16866: AND
16867: PUSH
16868: LD_EXP 32
16872: NOT
16873: AND
16874: IFFALSE 16969
16876: GO 16878
16878: DISABLE
16879: LD_INT 0
16881: PPUSH
// begin enable ;
16882: ENABLE
// ru_alert_xy := false ;
16883: LD_ADDR_EXP 61
16887: PUSH
16888: LD_INT 0
16890: ST_TO_ADDR
// ru_alert := false ;
16891: LD_ADDR_EXP 60
16895: PUSH
16896: LD_INT 0
16898: ST_TO_ADDR
// if ru_vehicles then
16899: LD_EXP 56
16903: IFFALSE 16969
// for i in ru_vehicles do
16905: LD_ADDR_VAR 0 1
16909: PUSH
16910: LD_EXP 56
16914: PUSH
16915: FOR_IN
16916: IFFALSE 16967
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
16918: LD_VAR 0 1
16922: PPUSH
16923: CALL_OW 302
16927: PUSH
16928: LD_VAR 0 1
16932: PPUSH
16933: LD_INT 89
16935: PPUSH
16936: LD_INT 36
16938: PPUSH
16939: CALL_OW 297
16943: PUSH
16944: LD_INT 10
16946: GREATER
16947: AND
16948: IFFALSE 16965
// ComMoveXY ( i , 89 , 36 ) ;
16950: LD_VAR 0 1
16954: PPUSH
16955: LD_INT 89
16957: PPUSH
16958: LD_INT 36
16960: PPUSH
16961: CALL_OW 111
16965: GO 16915
16967: POP
16968: POP
// end ;
16969: PPOPN 1
16971: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
16972: LD_EXP 55
16976: PUSH
16977: LD_EXP 31
16981: NOT
16982: AND
16983: PUSH
16984: LD_EXP 32
16988: NOT
16989: AND
16990: IFFALSE 17274
16992: GO 16994
16994: DISABLE
16995: LD_INT 0
16997: PPUSH
16998: PPUSH
16999: PPUSH
// begin enable ;
17000: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17001: LD_ADDR_VAR 0 3
17005: PUSH
17006: LD_INT 81
17008: PUSH
17009: LD_INT 3
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PPUSH
17016: CALL_OW 69
17020: ST_TO_ADDR
// for i = 1 to ru_forest do
17021: LD_ADDR_VAR 0 1
17025: PUSH
17026: DOUBLE
17027: LD_INT 1
17029: DEC
17030: ST_TO_ADDR
17031: LD_EXP 55
17035: PUSH
17036: FOR_TO
17037: IFFALSE 17272
// begin un := ru_forest [ i ] ;
17039: LD_ADDR_VAR 0 2
17043: PUSH
17044: LD_EXP 55
17048: PUSH
17049: LD_VAR 0 1
17053: ARRAY
17054: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17055: LD_VAR 0 2
17059: PPUSH
17060: LD_INT 13
17062: PPUSH
17063: CALL_OW 308
17067: IFFALSE 17157
// begin if not See ( 1 , un ) then
17069: LD_INT 1
17071: PPUSH
17072: LD_VAR 0 2
17076: PPUSH
17077: CALL_OW 292
17081: NOT
17082: IFFALSE 17096
// SetLives ( un , 1000 ) ;
17084: LD_VAR 0 2
17088: PPUSH
17089: LD_INT 1000
17091: PPUSH
17092: CALL_OW 234
// ru_forest := ru_forest diff un ;
17096: LD_ADDR_EXP 55
17100: PUSH
17101: LD_EXP 55
17105: PUSH
17106: LD_VAR 0 2
17110: DIFF
17111: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17112: LD_VAR 0 2
17116: PPUSH
17117: LD_INT 22
17119: PUSH
17120: LD_INT 3
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 30
17129: PUSH
17130: LD_INT 4
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PPUSH
17141: CALL_OW 69
17145: PPUSH
17146: CALL 1007 0 1
17150: PPUSH
17151: CALL_OW 120
// continue ;
17155: GO 17036
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17157: LD_VAR 0 2
17161: PPUSH
17162: CALL_OW 256
17166: PUSH
17167: LD_INT 700
17169: LESS
17170: PUSH
17171: LD_VAR 0 2
17175: PPUSH
17176: LD_INT 13
17178: PPUSH
17179: CALL_OW 308
17183: NOT
17184: AND
17185: IFFALSE 17201
// ComMoveToArea ( un , retreatArea ) else
17187: LD_VAR 0 2
17191: PPUSH
17192: LD_INT 13
17194: PPUSH
17195: CALL_OW 113
17199: GO 17270
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17201: LD_VAR 0 2
17205: PPUSH
17206: LD_VAR 0 3
17210: PPUSH
17211: LD_VAR 0 2
17215: PPUSH
17216: CALL_OW 74
17220: PPUSH
17221: CALL_OW 296
17225: PUSH
17226: LD_INT 9
17228: LESS
17229: PUSH
17230: LD_VAR 0 2
17234: PPUSH
17235: CALL_OW 256
17239: PUSH
17240: LD_INT 500
17242: GREATER
17243: AND
17244: IFFALSE 17270
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17246: LD_VAR 0 2
17250: PPUSH
17251: LD_VAR 0 3
17255: PPUSH
17256: LD_VAR 0 2
17260: PPUSH
17261: CALL_OW 74
17265: PPUSH
17266: CALL_OW 115
// end ;
17270: GO 17036
17272: POP
17273: POP
// end ;
17274: PPOPN 3
17276: END
// every 0 0$10 trigger not send_attack_on_cornel do var i , filter ;
17277: LD_EXP 32
17281: NOT
17282: IFFALSE 17403
17284: GO 17286
17286: DISABLE
17287: LD_INT 0
17289: PPUSH
17290: PPUSH
// begin enable ;
17291: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
17292: LD_ADDR_VAR 0 2
17296: PUSH
17297: LD_INT 22
17299: PUSH
17300: LD_INT 3
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 21
17309: PUSH
17310: LD_INT 3
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PPUSH
17321: CALL_OW 69
17325: ST_TO_ADDR
// if filter then
17326: LD_VAR 0 2
17330: IFFALSE 17403
// for i in filter do
17332: LD_ADDR_VAR 0 1
17336: PUSH
17337: LD_VAR 0 2
17341: PUSH
17342: FOR_IN
17343: IFFALSE 17401
// if GetLives ( i ) < 990 then
17345: LD_VAR 0 1
17349: PPUSH
17350: CALL_OW 256
17354: PUSH
17355: LD_INT 990
17357: LESS
17358: IFFALSE 17399
// begin ru_alert := true ;
17360: LD_ADDR_EXP 60
17364: PUSH
17365: LD_INT 1
17367: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17368: LD_ADDR_EXP 61
17372: PUSH
17373: LD_VAR 0 1
17377: PPUSH
17378: CALL_OW 250
17382: PUSH
17383: LD_VAR 0 1
17387: PPUSH
17388: CALL_OW 251
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: ST_TO_ADDR
// break ;
17397: GO 17401
// end ;
17399: GO 17342
17401: POP
17402: POP
// end ;
17403: PPOPN 2
17405: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17406: LD_EXP 31
17410: IFFALSE 17559
17412: GO 17414
17414: DISABLE
17415: LD_INT 0
17417: PPUSH
17418: PPUSH
17419: PPUSH
17420: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17421: LD_ADDR_VAR 0 4
17425: PUSH
17426: LD_EXP 56
17430: PUSH
17431: LD_EXP 55
17435: ADD
17436: PUSH
17437: LD_EXP 53
17441: ADD
17442: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17443: LD_ADDR_VAR 0 3
17447: PUSH
17448: LD_INT 3
17450: PPUSH
17451: LD_INT 81
17453: PUSH
17454: LD_INT 3
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PPUSH
17461: CALL_OW 70
17465: ST_TO_ADDR
// if filter and enemy then
17466: LD_VAR 0 4
17470: PUSH
17471: LD_VAR 0 3
17475: AND
17476: IFFALSE 17559
// repeat wait ( 0 0$01 ) ;
17478: LD_INT 35
17480: PPUSH
17481: CALL_OW 67
// for i in filter do
17485: LD_ADDR_VAR 0 1
17489: PUSH
17490: LD_VAR 0 4
17494: PUSH
17495: FOR_IN
17496: IFFALSE 17524
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17498: LD_VAR 0 1
17502: PPUSH
17503: LD_VAR 0 3
17507: PPUSH
17508: LD_VAR 0 1
17512: PPUSH
17513: CALL_OW 74
17517: PPUSH
17518: CALL_OW 115
// end ;
17522: GO 17495
17524: POP
17525: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
17526: LD_INT 3
17528: PPUSH
17529: LD_INT 81
17531: PUSH
17532: LD_INT 3
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PPUSH
17539: CALL_OW 70
17543: PUSH
17544: LD_INT 0
17546: EQUAL
17547: PUSH
17548: LD_VAR 0 4
17552: PUSH
17553: LD_INT 0
17555: EQUAL
17556: OR
17557: IFFALSE 17478
// end ;
17559: PPOPN 4
17561: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
17562: LD_EXP 26
17566: PUSH
17567: LD_INT 22
17569: PUSH
17570: LD_INT 4
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 30
17579: PUSH
17580: LD_INT 4
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 3
17589: PUSH
17590: LD_INT 57
17592: PUSH
17593: EMPTY
17594: LIST
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: LIST
17604: PPUSH
17605: CALL_OW 69
17609: AND
17610: IFFALSE 17659
17612: GO 17614
17614: DISABLE
17615: LD_INT 0
17617: PPUSH
// begin if not ru_cornel_attack then
17618: LD_EXP 58
17622: NOT
17623: IFFALSE 17627
// exit ;
17625: GO 17659
// for i in ru_cornel_attack do
17627: LD_ADDR_VAR 0 1
17631: PUSH
17632: LD_EXP 58
17636: PUSH
17637: FOR_IN
17638: IFFALSE 17657
// ComAgressiveMove ( i , 258 , 119 ) ;
17640: LD_VAR 0 1
17644: PPUSH
17645: LD_INT 258
17647: PPUSH
17648: LD_INT 119
17650: PPUSH
17651: CALL_OW 114
17655: GO 17637
17657: POP
17658: POP
// end ; end_of_file
17659: PPOPN 1
17661: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
17662: LD_EXP 5
17666: PUSH
17667: LD_EXP 9
17671: NOT
17672: AND
17673: PUSH
17674: LD_EXP 20
17678: AND
17679: IFFALSE 17791
17681: GO 17683
17683: DISABLE
17684: LD_INT 0
17686: PPUSH
// begin enable ;
17687: ENABLE
// crates_counter := crates_counter - 50 ;
17688: LD_ADDR_EXP 20
17692: PUSH
17693: LD_EXP 20
17697: PUSH
17698: LD_INT 50
17700: MINUS
17701: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
17702: LD_INT 8
17704: PPUSH
17705: LD_INT 2
17707: PPUSH
17708: LD_INT 5
17710: PPUSH
17711: CALL_OW 12
17715: PPUSH
17716: LD_INT 1
17718: PPUSH
17719: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
17723: LD_INT 1785
17725: PPUSH
17726: LD_INT 2345
17728: PPUSH
17729: CALL_OW 12
17733: PPUSH
17734: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
17738: LD_ADDR_VAR 0 1
17742: PUSH
17743: LD_INT 1
17745: PPUSH
17746: LD_OWVAR 67
17750: PUSH
17751: LD_INT 2
17753: PLUS
17754: PPUSH
17755: CALL_OW 12
17759: ST_TO_ADDR
// if r < 3 then
17760: LD_VAR 0 1
17764: PUSH
17765: LD_INT 3
17767: LESS
17768: IFFALSE 17791
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
17770: LD_INT 4
17772: PPUSH
17773: LD_INT 1
17775: PPUSH
17776: LD_INT 5
17778: PPUSH
17779: CALL_OW 12
17783: PPUSH
17784: LD_INT 1
17786: PPUSH
17787: CALL_OW 55
// end ;
17791: PPOPN 1
17793: END
// every 0 0$01 trigger cornel_active do
17794: LD_EXP 8
17798: IFFALSE 17887
17800: GO 17802
17802: DISABLE
// begin Wait ( 0 0$03 ) ;
17803: LD_INT 105
17805: PPUSH
17806: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17810: LD_INT 2
17812: PPUSH
17813: LD_INT 5
17815: PPUSH
17816: CALL_OW 12
17820: PPUSH
17821: LD_INT 10
17823: PPUSH
17824: LD_INT 1
17826: PPUSH
17827: CALL_OW 55
// Wait ( 0 0$13 ) ;
17831: LD_INT 455
17833: PPUSH
17834: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17838: LD_INT 2
17840: PPUSH
17841: LD_INT 5
17843: PPUSH
17844: CALL_OW 12
17848: PPUSH
17849: LD_INT 10
17851: PPUSH
17852: LD_INT 1
17854: PPUSH
17855: CALL_OW 55
// Wait ( 0 0$16 ) ;
17859: LD_INT 560
17861: PPUSH
17862: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17866: LD_INT 2
17868: PPUSH
17869: LD_INT 5
17871: PPUSH
17872: CALL_OW 12
17876: PPUSH
17877: LD_INT 10
17879: PPUSH
17880: LD_INT 1
17882: PPUSH
17883: CALL_OW 55
// end ; end_of_file
17887: END
// every 0 0$01 trigger cornel_prepared do
17888: LD_EXP 11
17892: IFFALSE 17951
17894: GO 17896
17896: DISABLE
// begin enable ;
17897: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
17898: LD_ADDR_OWVAR 47
17902: PUSH
17903: LD_STRING #Am03-1
17905: PUSH
17906: LD_EXP 10
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
17915: LD_ADDR_EXP 10
17919: PUSH
17920: LD_EXP 10
17924: PPUSH
17925: LD_STRING -
17927: PPUSH
17928: CALL 1077 0 2
17932: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
17933: LD_EXP 10
17937: PUSH
17938: LD_INT 0
17940: EQUAL
17941: IFFALSE 17951
// begin Display_Strings := [ ] ;
17943: LD_ADDR_OWVAR 47
17947: PUSH
17948: EMPTY
17949: ST_TO_ADDR
// disable ;
17950: DISABLE
// end ; end ;
17951: END
// every 0 0$01 trigger debug and debug_strings do
17952: LD_EXP 1
17956: PUSH
17957: LD_OWVAR 48
17961: AND
17962: IFFALSE 17978
17964: GO 17966
17966: DISABLE
// begin enable ;
17967: ENABLE
// Display_Strings := debug_strings ;
17968: LD_ADDR_OWVAR 47
17972: PUSH
17973: LD_OWVAR 48
17977: ST_TO_ADDR
// end ; end_of_file
17978: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
17979: LD_VAR 0 1
17983: PPUSH
17984: LD_VAR 0 2
17988: PPUSH
17989: CALL 34590 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
17993: LD_VAR 0 1
17997: PPUSH
17998: CALL_OW 255
18002: PUSH
18003: LD_INT 1
18005: EQUAL
18006: PUSH
18007: LD_EXP 14
18011: NOT
18012: AND
18013: IFFALSE 18023
// solar_builded := true ;
18015: LD_ADDR_EXP 14
18019: PUSH
18020: LD_INT 1
18022: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18023: LD_VAR 0 1
18027: PPUSH
18028: CALL_OW 255
18032: PUSH
18033: LD_INT 1
18035: EQUAL
18036: PUSH
18037: LD_EXP 29
18041: AND
18042: IFFALSE 18079
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
18044: LD_ADDR_EXP 29
18048: PUSH
18049: LD_EXP 29
18053: PUSH
18054: LD_INT 1750
18056: PUSH
18057: LD_INT 1400
18059: PUSH
18060: LD_INT 1225
18062: PUSH
18063: LD_INT 1050
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: PUSH
18072: LD_OWVAR 67
18076: ARRAY
18077: PLUS
18078: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18079: LD_VAR 0 1
18083: PPUSH
18084: CALL_OW 255
18088: PUSH
18089: LD_INT 3
18091: EQUAL
18092: IFFALSE 18110
// ru_vehicles := ru_vehicles ^ veh ;
18094: LD_ADDR_EXP 56
18098: PUSH
18099: LD_EXP 56
18103: PUSH
18104: LD_VAR 0 1
18108: ADD
18109: ST_TO_ADDR
// end ;
18110: PPOPN 2
18112: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18113: LD_VAR 0 1
18117: PPUSH
18118: CALL 34468 0 1
// if un in ru_patrol then
18122: LD_VAR 0 1
18126: PUSH
18127: LD_EXP 53
18131: IN
18132: IFFALSE 18150
// ru_patrol := ru_patrol diff un ;
18134: LD_ADDR_EXP 53
18138: PUSH
18139: LD_EXP 53
18143: PUSH
18144: LD_VAR 0 1
18148: DIFF
18149: ST_TO_ADDR
// if un in ru_forest then
18150: LD_VAR 0 1
18154: PUSH
18155: LD_EXP 55
18159: IN
18160: IFFALSE 18178
// ru_forest := ru_forest diff un ;
18162: LD_ADDR_EXP 55
18166: PUSH
18167: LD_EXP 55
18171: PUSH
18172: LD_VAR 0 1
18176: DIFF
18177: ST_TO_ADDR
// if un in ru_vehicles then
18178: LD_VAR 0 1
18182: PUSH
18183: LD_EXP 56
18187: IN
18188: IFFALSE 18294
// begin ru_vehicles := ru_vehicles diff un ;
18190: LD_ADDR_EXP 56
18194: PUSH
18195: LD_EXP 56
18199: PUSH
18200: LD_VAR 0 1
18204: DIFF
18205: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18206: LD_ADDR_EXP 57
18210: PUSH
18211: LD_EXP 57
18215: PUSH
18216: LD_VAR 0 1
18220: PPUSH
18221: CALL_OW 265
18225: PUSH
18226: LD_VAR 0 1
18230: PPUSH
18231: CALL_OW 262
18235: PUSH
18236: LD_VAR 0 1
18240: PPUSH
18241: CALL_OW 263
18245: PUSH
18246: LD_VAR 0 1
18250: PPUSH
18251: CALL_OW 264
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: ADD
18262: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18263: LD_ADDR_EXP 13
18267: PUSH
18268: LD_EXP 13
18272: PUSH
18273: LD_INT 1
18275: PLUS
18276: ST_TO_ADDR
// if ach_counter = 10 then
18277: LD_EXP 13
18281: PUSH
18282: LD_INT 10
18284: EQUAL
18285: IFFALSE 18294
// SetAchievement ( ACH_FAUST ) ;
18287: LD_STRING ACH_FAUST
18289: PPUSH
18290: CALL_OW 543
// end ; if un = Pokryshkin then
18294: LD_VAR 0 1
18298: PUSH
18299: LD_EXP 52
18303: EQUAL
18304: IFFALSE 18313
// SetAchievement ( ACH_POKR ) ;
18306: LD_STRING ACH_POKR
18308: PPUSH
18309: CALL_OW 543
// if un = JMM then
18313: LD_VAR 0 1
18317: PUSH
18318: LD_EXP 37
18322: EQUAL
18323: IFFALSE 18332
// YouLost ( 0 ) ;
18325: LD_STRING 0
18327: PPUSH
18328: CALL_OW 104
// if un = us_dep_west then
18332: LD_VAR 0 1
18336: PUSH
18337: LD_INT 1
18339: EQUAL
18340: IFFALSE 18349
// YouLost ( 2 ) ;
18342: LD_STRING 2
18344: PPUSH
18345: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18349: LD_VAR 0 1
18353: PPUSH
18354: CALL_OW 255
18358: PUSH
18359: LD_INT 8
18361: EQUAL
18362: PUSH
18363: LD_EXP 5
18367: NOT
18368: AND
18369: IFFALSE 18378
// YouLost ( 4 ) ;
18371: LD_STRING 4
18373: PPUSH
18374: CALL_OW 104
// if un in jmm_units then
18378: LD_VAR 0 1
18382: PUSH
18383: LD_EXP 4
18387: IN
18388: IFFALSE 18404
// lose_counter := lose_counter + 1 ;
18390: LD_ADDR_EXP 34
18394: PUSH
18395: LD_EXP 34
18399: PUSH
18400: LD_INT 1
18402: PLUS
18403: ST_TO_ADDR
// end ;
18404: PPOPN 1
18406: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18407: LD_INT 0
18409: PPUSH
18410: PPUSH
// begin if GetSide ( driver ) = 3 then
18411: LD_VAR 0 1
18415: PPUSH
18416: CALL_OW 255
18420: PUSH
18421: LD_INT 3
18423: EQUAL
18424: IFFALSE 18502
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18426: LD_ADDR_VAR 0 6
18430: PUSH
18431: LD_INT 22
18433: PUSH
18434: LD_INT 3
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 30
18443: PUSH
18444: LD_INT 3
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PPUSH
18455: CALL_OW 69
18459: PPUSH
18460: CALL 1007 0 1
18464: ST_TO_ADDR
// if place then
18465: LD_VAR 0 6
18469: IFFALSE 18487
// ComEnterUnit ( driver , place ) else
18471: LD_VAR 0 1
18475: PPUSH
18476: LD_VAR 0 6
18480: PPUSH
18481: CALL_OW 120
18485: GO 18502
// ComMoveXY ( driver , 70 , 22 ) ;
18487: LD_VAR 0 1
18491: PPUSH
18492: LD_INT 70
18494: PPUSH
18495: LD_INT 22
18497: PPUSH
18498: CALL_OW 111
// end ; end ;
18502: PPOPN 6
18504: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
18505: LD_VAR 0 1
18509: PUSH
18510: LD_INT 1
18512: EQUAL
18513: PUSH
18514: LD_VAR 0 2
18518: PUSH
18519: LD_INT 4
18521: EQUAL
18522: PUSH
18523: LD_VAR 0 2
18527: PUSH
18528: LD_INT 8
18530: EQUAL
18531: PUSH
18532: LD_EXP 5
18536: NOT
18537: AND
18538: OR
18539: AND
18540: IFFALSE 18549
// YouLost ( 5 ) ;
18542: LD_STRING 5
18544: PPUSH
18545: CALL_OW 104
// end ;
18549: PPOPN 2
18551: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
18552: LD_EXP 36
18556: PUSH
18557: LD_INT 22
18559: PUSH
18560: LD_INT 1
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 21
18569: PUSH
18570: LD_INT 1
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PPUSH
18581: CALL_OW 69
18585: PUSH
18586: LD_INT 22
18588: PUSH
18589: LD_INT 8
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 21
18598: PUSH
18599: LD_INT 1
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PPUSH
18610: CALL_OW 69
18614: ADD
18615: PLUS
18616: PUSH
18617: LD_INT 5
18619: LESS
18620: IFFALSE 18632
18622: GO 18624
18624: DISABLE
// YouLost ( 1 ) ;
18625: LD_STRING 1
18627: PPUSH
18628: CALL_OW 104
18632: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
18633: LD_INT 1
18635: PPUSH
18636: CALL_OW 255
18640: PUSH
18641: LD_INT 3
18643: EQUAL
18644: IFFALSE 18656
18646: GO 18648
18648: DISABLE
// YouLost ( 3 ) ; end_of_file
18649: LD_STRING 3
18651: PPUSH
18652: CALL_OW 104
18656: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
18657: LD_INT 0
18659: PPUSH
// ar_miner := 81 ;
18660: LD_ADDR_EXP 69
18664: PUSH
18665: LD_INT 81
18667: ST_TO_ADDR
// ar_crane := 88 ;
18668: LD_ADDR_EXP 68
18672: PUSH
18673: LD_INT 88
18675: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18676: LD_ADDR_EXP 63
18680: PUSH
18681: LD_INT 89
18683: ST_TO_ADDR
// us_hack := 99 ;
18684: LD_ADDR_EXP 64
18688: PUSH
18689: LD_INT 99
18691: ST_TO_ADDR
// us_artillery := 97 ;
18692: LD_ADDR_EXP 65
18696: PUSH
18697: LD_INT 97
18699: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18700: LD_ADDR_EXP 66
18704: PUSH
18705: LD_INT 91
18707: ST_TO_ADDR
// ar_mortar := 92 ;
18708: LD_ADDR_EXP 67
18712: PUSH
18713: LD_INT 92
18715: ST_TO_ADDR
// ru_flamethrower := 93 ;
18716: LD_ADDR_EXP 70
18720: PUSH
18721: LD_INT 93
18723: ST_TO_ADDR
// ru_radar := 98 ;
18724: LD_ADDR_EXP 62
18728: PUSH
18729: LD_INT 98
18731: ST_TO_ADDR
// tech_Artillery := 80 ;
18732: LD_ADDR_EXP 71
18736: PUSH
18737: LD_INT 80
18739: ST_TO_ADDR
// tech_RadMat := 81 ;
18740: LD_ADDR_EXP 72
18744: PUSH
18745: LD_INT 81
18747: ST_TO_ADDR
// tech_BasicTools := 82 ;
18748: LD_ADDR_EXP 73
18752: PUSH
18753: LD_INT 82
18755: ST_TO_ADDR
// tech_Cargo := 83 ;
18756: LD_ADDR_EXP 74
18760: PUSH
18761: LD_INT 83
18763: ST_TO_ADDR
// tech_Track := 84 ;
18764: LD_ADDR_EXP 75
18768: PUSH
18769: LD_INT 84
18771: ST_TO_ADDR
// tech_Crane := 85 ;
18772: LD_ADDR_EXP 76
18776: PUSH
18777: LD_INT 85
18779: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18780: LD_ADDR_EXP 77
18784: PUSH
18785: LD_INT 86
18787: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18788: LD_ADDR_EXP 78
18792: PUSH
18793: LD_INT 87
18795: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18796: LD_ADDR_EXP 79
18800: PUSH
18801: LD_INT 88
18803: ST_TO_ADDR
// end ;
18804: LD_VAR 0 1
18808: RET
// every 1 do
18809: GO 18811
18811: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18812: CALL 18657 0 0
18816: END
// every 0 0$1 do
18817: GO 18819
18819: DISABLE
// begin enable ;
18820: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18821: LD_STRING updateTimer(
18823: PUSH
18824: LD_OWVAR 1
18828: STR
18829: PUSH
18830: LD_STRING );
18832: STR
18833: PPUSH
18834: CALL_OW 559
// end ;
18838: END
// export function SOS_MapStart ( ) ; begin
18839: LD_INT 0
18841: PPUSH
// if streamModeActive then
18842: LD_EXP 80
18846: IFFALSE 18855
// DefineStreamItems ( true ) ;
18848: LD_INT 1
18850: PPUSH
18851: CALL 20509 0 1
// UpdateFactoryWaypoints ( ) ;
18855: CALL 33370 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18859: CALL 33627 0 0
// end ;
18863: LD_VAR 0 1
18867: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18868: LD_INT 0
18870: PPUSH
// if p2 = 100 then
18871: LD_VAR 0 2
18875: PUSH
18876: LD_INT 100
18878: EQUAL
18879: IFFALSE 19882
// begin if not StreamModeActive then
18881: LD_EXP 80
18885: NOT
18886: IFFALSE 18896
// StreamModeActive := true ;
18888: LD_ADDR_EXP 80
18892: PUSH
18893: LD_INT 1
18895: ST_TO_ADDR
// if p3 = 0 then
18896: LD_VAR 0 3
18900: PUSH
18901: LD_INT 0
18903: EQUAL
18904: IFFALSE 18910
// InitStreamMode ;
18906: CALL 20045 0 0
// if p3 = 1 then
18910: LD_VAR 0 3
18914: PUSH
18915: LD_INT 1
18917: EQUAL
18918: IFFALSE 18928
// sRocket := true ;
18920: LD_ADDR_EXP 85
18924: PUSH
18925: LD_INT 1
18927: ST_TO_ADDR
// if p3 = 2 then
18928: LD_VAR 0 3
18932: PUSH
18933: LD_INT 2
18935: EQUAL
18936: IFFALSE 18946
// sSpeed := true ;
18938: LD_ADDR_EXP 84
18942: PUSH
18943: LD_INT 1
18945: ST_TO_ADDR
// if p3 = 3 then
18946: LD_VAR 0 3
18950: PUSH
18951: LD_INT 3
18953: EQUAL
18954: IFFALSE 18964
// sEngine := true ;
18956: LD_ADDR_EXP 86
18960: PUSH
18961: LD_INT 1
18963: ST_TO_ADDR
// if p3 = 4 then
18964: LD_VAR 0 3
18968: PUSH
18969: LD_INT 4
18971: EQUAL
18972: IFFALSE 18982
// sSpec := true ;
18974: LD_ADDR_EXP 83
18978: PUSH
18979: LD_INT 1
18981: ST_TO_ADDR
// if p3 = 5 then
18982: LD_VAR 0 3
18986: PUSH
18987: LD_INT 5
18989: EQUAL
18990: IFFALSE 19000
// sLevel := true ;
18992: LD_ADDR_EXP 87
18996: PUSH
18997: LD_INT 1
18999: ST_TO_ADDR
// if p3 = 6 then
19000: LD_VAR 0 3
19004: PUSH
19005: LD_INT 6
19007: EQUAL
19008: IFFALSE 19018
// sArmoury := true ;
19010: LD_ADDR_EXP 88
19014: PUSH
19015: LD_INT 1
19017: ST_TO_ADDR
// if p3 = 7 then
19018: LD_VAR 0 3
19022: PUSH
19023: LD_INT 7
19025: EQUAL
19026: IFFALSE 19036
// sRadar := true ;
19028: LD_ADDR_EXP 89
19032: PUSH
19033: LD_INT 1
19035: ST_TO_ADDR
// if p3 = 8 then
19036: LD_VAR 0 3
19040: PUSH
19041: LD_INT 8
19043: EQUAL
19044: IFFALSE 19054
// sBunker := true ;
19046: LD_ADDR_EXP 90
19050: PUSH
19051: LD_INT 1
19053: ST_TO_ADDR
// if p3 = 9 then
19054: LD_VAR 0 3
19058: PUSH
19059: LD_INT 9
19061: EQUAL
19062: IFFALSE 19072
// sHack := true ;
19064: LD_ADDR_EXP 91
19068: PUSH
19069: LD_INT 1
19071: ST_TO_ADDR
// if p3 = 10 then
19072: LD_VAR 0 3
19076: PUSH
19077: LD_INT 10
19079: EQUAL
19080: IFFALSE 19090
// sFire := true ;
19082: LD_ADDR_EXP 92
19086: PUSH
19087: LD_INT 1
19089: ST_TO_ADDR
// if p3 = 11 then
19090: LD_VAR 0 3
19094: PUSH
19095: LD_INT 11
19097: EQUAL
19098: IFFALSE 19108
// sRefresh := true ;
19100: LD_ADDR_EXP 93
19104: PUSH
19105: LD_INT 1
19107: ST_TO_ADDR
// if p3 = 12 then
19108: LD_VAR 0 3
19112: PUSH
19113: LD_INT 12
19115: EQUAL
19116: IFFALSE 19126
// sExp := true ;
19118: LD_ADDR_EXP 94
19122: PUSH
19123: LD_INT 1
19125: ST_TO_ADDR
// if p3 = 13 then
19126: LD_VAR 0 3
19130: PUSH
19131: LD_INT 13
19133: EQUAL
19134: IFFALSE 19144
// sDepot := true ;
19136: LD_ADDR_EXP 95
19140: PUSH
19141: LD_INT 1
19143: ST_TO_ADDR
// if p3 = 14 then
19144: LD_VAR 0 3
19148: PUSH
19149: LD_INT 14
19151: EQUAL
19152: IFFALSE 19162
// sFlag := true ;
19154: LD_ADDR_EXP 96
19158: PUSH
19159: LD_INT 1
19161: ST_TO_ADDR
// if p3 = 15 then
19162: LD_VAR 0 3
19166: PUSH
19167: LD_INT 15
19169: EQUAL
19170: IFFALSE 19180
// sKamikadze := true ;
19172: LD_ADDR_EXP 104
19176: PUSH
19177: LD_INT 1
19179: ST_TO_ADDR
// if p3 = 16 then
19180: LD_VAR 0 3
19184: PUSH
19185: LD_INT 16
19187: EQUAL
19188: IFFALSE 19198
// sTroll := true ;
19190: LD_ADDR_EXP 105
19194: PUSH
19195: LD_INT 1
19197: ST_TO_ADDR
// if p3 = 17 then
19198: LD_VAR 0 3
19202: PUSH
19203: LD_INT 17
19205: EQUAL
19206: IFFALSE 19216
// sSlow := true ;
19208: LD_ADDR_EXP 106
19212: PUSH
19213: LD_INT 1
19215: ST_TO_ADDR
// if p3 = 18 then
19216: LD_VAR 0 3
19220: PUSH
19221: LD_INT 18
19223: EQUAL
19224: IFFALSE 19234
// sLack := true ;
19226: LD_ADDR_EXP 107
19230: PUSH
19231: LD_INT 1
19233: ST_TO_ADDR
// if p3 = 19 then
19234: LD_VAR 0 3
19238: PUSH
19239: LD_INT 19
19241: EQUAL
19242: IFFALSE 19252
// sTank := true ;
19244: LD_ADDR_EXP 109
19248: PUSH
19249: LD_INT 1
19251: ST_TO_ADDR
// if p3 = 20 then
19252: LD_VAR 0 3
19256: PUSH
19257: LD_INT 20
19259: EQUAL
19260: IFFALSE 19270
// sRemote := true ;
19262: LD_ADDR_EXP 110
19266: PUSH
19267: LD_INT 1
19269: ST_TO_ADDR
// if p3 = 21 then
19270: LD_VAR 0 3
19274: PUSH
19275: LD_INT 21
19277: EQUAL
19278: IFFALSE 19288
// sPowell := true ;
19280: LD_ADDR_EXP 111
19284: PUSH
19285: LD_INT 1
19287: ST_TO_ADDR
// if p3 = 22 then
19288: LD_VAR 0 3
19292: PUSH
19293: LD_INT 22
19295: EQUAL
19296: IFFALSE 19306
// sTeleport := true ;
19298: LD_ADDR_EXP 114
19302: PUSH
19303: LD_INT 1
19305: ST_TO_ADDR
// if p3 = 23 then
19306: LD_VAR 0 3
19310: PUSH
19311: LD_INT 23
19313: EQUAL
19314: IFFALSE 19324
// sOilTower := true ;
19316: LD_ADDR_EXP 116
19320: PUSH
19321: LD_INT 1
19323: ST_TO_ADDR
// if p3 = 24 then
19324: LD_VAR 0 3
19328: PUSH
19329: LD_INT 24
19331: EQUAL
19332: IFFALSE 19342
// sShovel := true ;
19334: LD_ADDR_EXP 117
19338: PUSH
19339: LD_INT 1
19341: ST_TO_ADDR
// if p3 = 25 then
19342: LD_VAR 0 3
19346: PUSH
19347: LD_INT 25
19349: EQUAL
19350: IFFALSE 19360
// sSheik := true ;
19352: LD_ADDR_EXP 118
19356: PUSH
19357: LD_INT 1
19359: ST_TO_ADDR
// if p3 = 26 then
19360: LD_VAR 0 3
19364: PUSH
19365: LD_INT 26
19367: EQUAL
19368: IFFALSE 19378
// sEarthquake := true ;
19370: LD_ADDR_EXP 120
19374: PUSH
19375: LD_INT 1
19377: ST_TO_ADDR
// if p3 = 27 then
19378: LD_VAR 0 3
19382: PUSH
19383: LD_INT 27
19385: EQUAL
19386: IFFALSE 19396
// sAI := true ;
19388: LD_ADDR_EXP 121
19392: PUSH
19393: LD_INT 1
19395: ST_TO_ADDR
// if p3 = 28 then
19396: LD_VAR 0 3
19400: PUSH
19401: LD_INT 28
19403: EQUAL
19404: IFFALSE 19414
// sCargo := true ;
19406: LD_ADDR_EXP 124
19410: PUSH
19411: LD_INT 1
19413: ST_TO_ADDR
// if p3 = 29 then
19414: LD_VAR 0 3
19418: PUSH
19419: LD_INT 29
19421: EQUAL
19422: IFFALSE 19432
// sDLaser := true ;
19424: LD_ADDR_EXP 125
19428: PUSH
19429: LD_INT 1
19431: ST_TO_ADDR
// if p3 = 30 then
19432: LD_VAR 0 3
19436: PUSH
19437: LD_INT 30
19439: EQUAL
19440: IFFALSE 19450
// sExchange := true ;
19442: LD_ADDR_EXP 126
19446: PUSH
19447: LD_INT 1
19449: ST_TO_ADDR
// if p3 = 31 then
19450: LD_VAR 0 3
19454: PUSH
19455: LD_INT 31
19457: EQUAL
19458: IFFALSE 19468
// sFac := true ;
19460: LD_ADDR_EXP 127
19464: PUSH
19465: LD_INT 1
19467: ST_TO_ADDR
// if p3 = 32 then
19468: LD_VAR 0 3
19472: PUSH
19473: LD_INT 32
19475: EQUAL
19476: IFFALSE 19486
// sPower := true ;
19478: LD_ADDR_EXP 128
19482: PUSH
19483: LD_INT 1
19485: ST_TO_ADDR
// if p3 = 33 then
19486: LD_VAR 0 3
19490: PUSH
19491: LD_INT 33
19493: EQUAL
19494: IFFALSE 19504
// sRandom := true ;
19496: LD_ADDR_EXP 129
19500: PUSH
19501: LD_INT 1
19503: ST_TO_ADDR
// if p3 = 34 then
19504: LD_VAR 0 3
19508: PUSH
19509: LD_INT 34
19511: EQUAL
19512: IFFALSE 19522
// sShield := true ;
19514: LD_ADDR_EXP 130
19518: PUSH
19519: LD_INT 1
19521: ST_TO_ADDR
// if p3 = 35 then
19522: LD_VAR 0 3
19526: PUSH
19527: LD_INT 35
19529: EQUAL
19530: IFFALSE 19540
// sTime := true ;
19532: LD_ADDR_EXP 131
19536: PUSH
19537: LD_INT 1
19539: ST_TO_ADDR
// if p3 = 36 then
19540: LD_VAR 0 3
19544: PUSH
19545: LD_INT 36
19547: EQUAL
19548: IFFALSE 19558
// sTools := true ;
19550: LD_ADDR_EXP 132
19554: PUSH
19555: LD_INT 1
19557: ST_TO_ADDR
// if p3 = 101 then
19558: LD_VAR 0 3
19562: PUSH
19563: LD_INT 101
19565: EQUAL
19566: IFFALSE 19576
// sSold := true ;
19568: LD_ADDR_EXP 97
19572: PUSH
19573: LD_INT 1
19575: ST_TO_ADDR
// if p3 = 102 then
19576: LD_VAR 0 3
19580: PUSH
19581: LD_INT 102
19583: EQUAL
19584: IFFALSE 19594
// sDiff := true ;
19586: LD_ADDR_EXP 98
19590: PUSH
19591: LD_INT 1
19593: ST_TO_ADDR
// if p3 = 103 then
19594: LD_VAR 0 3
19598: PUSH
19599: LD_INT 103
19601: EQUAL
19602: IFFALSE 19612
// sFog := true ;
19604: LD_ADDR_EXP 101
19608: PUSH
19609: LD_INT 1
19611: ST_TO_ADDR
// if p3 = 104 then
19612: LD_VAR 0 3
19616: PUSH
19617: LD_INT 104
19619: EQUAL
19620: IFFALSE 19630
// sReset := true ;
19622: LD_ADDR_EXP 102
19626: PUSH
19627: LD_INT 1
19629: ST_TO_ADDR
// if p3 = 105 then
19630: LD_VAR 0 3
19634: PUSH
19635: LD_INT 105
19637: EQUAL
19638: IFFALSE 19648
// sSun := true ;
19640: LD_ADDR_EXP 103
19644: PUSH
19645: LD_INT 1
19647: ST_TO_ADDR
// if p3 = 106 then
19648: LD_VAR 0 3
19652: PUSH
19653: LD_INT 106
19655: EQUAL
19656: IFFALSE 19666
// sTiger := true ;
19658: LD_ADDR_EXP 99
19662: PUSH
19663: LD_INT 1
19665: ST_TO_ADDR
// if p3 = 107 then
19666: LD_VAR 0 3
19670: PUSH
19671: LD_INT 107
19673: EQUAL
19674: IFFALSE 19684
// sBomb := true ;
19676: LD_ADDR_EXP 100
19680: PUSH
19681: LD_INT 1
19683: ST_TO_ADDR
// if p3 = 108 then
19684: LD_VAR 0 3
19688: PUSH
19689: LD_INT 108
19691: EQUAL
19692: IFFALSE 19702
// sWound := true ;
19694: LD_ADDR_EXP 108
19698: PUSH
19699: LD_INT 1
19701: ST_TO_ADDR
// if p3 = 109 then
19702: LD_VAR 0 3
19706: PUSH
19707: LD_INT 109
19709: EQUAL
19710: IFFALSE 19720
// sBetray := true ;
19712: LD_ADDR_EXP 112
19716: PUSH
19717: LD_INT 1
19719: ST_TO_ADDR
// if p3 = 110 then
19720: LD_VAR 0 3
19724: PUSH
19725: LD_INT 110
19727: EQUAL
19728: IFFALSE 19738
// sContamin := true ;
19730: LD_ADDR_EXP 113
19734: PUSH
19735: LD_INT 1
19737: ST_TO_ADDR
// if p3 = 111 then
19738: LD_VAR 0 3
19742: PUSH
19743: LD_INT 111
19745: EQUAL
19746: IFFALSE 19756
// sOil := true ;
19748: LD_ADDR_EXP 115
19752: PUSH
19753: LD_INT 1
19755: ST_TO_ADDR
// if p3 = 112 then
19756: LD_VAR 0 3
19760: PUSH
19761: LD_INT 112
19763: EQUAL
19764: IFFALSE 19774
// sStu := true ;
19766: LD_ADDR_EXP 119
19770: PUSH
19771: LD_INT 1
19773: ST_TO_ADDR
// if p3 = 113 then
19774: LD_VAR 0 3
19778: PUSH
19779: LD_INT 113
19781: EQUAL
19782: IFFALSE 19792
// sBazooka := true ;
19784: LD_ADDR_EXP 122
19788: PUSH
19789: LD_INT 1
19791: ST_TO_ADDR
// if p3 = 114 then
19792: LD_VAR 0 3
19796: PUSH
19797: LD_INT 114
19799: EQUAL
19800: IFFALSE 19810
// sMortar := true ;
19802: LD_ADDR_EXP 123
19806: PUSH
19807: LD_INT 1
19809: ST_TO_ADDR
// if p3 = 115 then
19810: LD_VAR 0 3
19814: PUSH
19815: LD_INT 115
19817: EQUAL
19818: IFFALSE 19828
// sRanger := true ;
19820: LD_ADDR_EXP 133
19824: PUSH
19825: LD_INT 1
19827: ST_TO_ADDR
// if p3 = 116 then
19828: LD_VAR 0 3
19832: PUSH
19833: LD_INT 116
19835: EQUAL
19836: IFFALSE 19846
// sComputer := true ;
19838: LD_ADDR_EXP 134
19842: PUSH
19843: LD_INT 1
19845: ST_TO_ADDR
// if p3 = 117 then
19846: LD_VAR 0 3
19850: PUSH
19851: LD_INT 117
19853: EQUAL
19854: IFFALSE 19864
// s30 := true ;
19856: LD_ADDR_EXP 135
19860: PUSH
19861: LD_INT 1
19863: ST_TO_ADDR
// if p3 = 118 then
19864: LD_VAR 0 3
19868: PUSH
19869: LD_INT 118
19871: EQUAL
19872: IFFALSE 19882
// s60 := true ;
19874: LD_ADDR_EXP 136
19878: PUSH
19879: LD_INT 1
19881: ST_TO_ADDR
// end ; if p2 = 101 then
19882: LD_VAR 0 2
19886: PUSH
19887: LD_INT 101
19889: EQUAL
19890: IFFALSE 20018
// begin case p3 of 1 :
19892: LD_VAR 0 3
19896: PUSH
19897: LD_INT 1
19899: DOUBLE
19900: EQUAL
19901: IFTRUE 19905
19903: GO 19912
19905: POP
// hHackUnlimitedResources ; 2 :
19906: CALL 32116 0 0
19910: GO 20018
19912: LD_INT 2
19914: DOUBLE
19915: EQUAL
19916: IFTRUE 19920
19918: GO 19927
19920: POP
// hHackSetLevel10 ; 3 :
19921: CALL 32249 0 0
19925: GO 20018
19927: LD_INT 3
19929: DOUBLE
19930: EQUAL
19931: IFTRUE 19935
19933: GO 19942
19935: POP
// hHackSetLevel10YourUnits ; 4 :
19936: CALL 32334 0 0
19940: GO 20018
19942: LD_INT 4
19944: DOUBLE
19945: EQUAL
19946: IFTRUE 19950
19948: GO 19957
19950: POP
// hHackInvincible ; 5 :
19951: CALL 32782 0 0
19955: GO 20018
19957: LD_INT 5
19959: DOUBLE
19960: EQUAL
19961: IFTRUE 19965
19963: GO 19972
19965: POP
// hHackInvisible ; 6 :
19966: CALL 32893 0 0
19970: GO 20018
19972: LD_INT 6
19974: DOUBLE
19975: EQUAL
19976: IFTRUE 19980
19978: GO 19987
19980: POP
// hHackChangeYourSide ; 7 :
19981: CALL 32950 0 0
19985: GO 20018
19987: LD_INT 7
19989: DOUBLE
19990: EQUAL
19991: IFTRUE 19995
19993: GO 20002
19995: POP
// hHackChangeUnitSide ; 8 :
19996: CALL 32992 0 0
20000: GO 20018
20002: LD_INT 8
20004: DOUBLE
20005: EQUAL
20006: IFTRUE 20010
20008: GO 20017
20010: POP
// hHackFog ; end ;
20011: CALL 33093 0 0
20015: GO 20018
20017: POP
// end ; end ;
20018: LD_VAR 0 7
20022: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20023: GO 20025
20025: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20026: LD_STRING initStreamRollete();
20028: PPUSH
20029: CALL_OW 559
// InitStreamMode ;
20033: CALL 20045 0 0
// DefineStreamItems ( false ) ;
20037: LD_INT 0
20039: PPUSH
20040: CALL 20509 0 1
// end ;
20044: END
// function InitStreamMode ; begin
20045: LD_INT 0
20047: PPUSH
// streamModeActive := false ;
20048: LD_ADDR_EXP 80
20052: PUSH
20053: LD_INT 0
20055: ST_TO_ADDR
// normalCounter := 36 ;
20056: LD_ADDR_EXP 81
20060: PUSH
20061: LD_INT 36
20063: ST_TO_ADDR
// hardcoreCounter := 18 ;
20064: LD_ADDR_EXP 82
20068: PUSH
20069: LD_INT 18
20071: ST_TO_ADDR
// sRocket := false ;
20072: LD_ADDR_EXP 85
20076: PUSH
20077: LD_INT 0
20079: ST_TO_ADDR
// sSpeed := false ;
20080: LD_ADDR_EXP 84
20084: PUSH
20085: LD_INT 0
20087: ST_TO_ADDR
// sEngine := false ;
20088: LD_ADDR_EXP 86
20092: PUSH
20093: LD_INT 0
20095: ST_TO_ADDR
// sSpec := false ;
20096: LD_ADDR_EXP 83
20100: PUSH
20101: LD_INT 0
20103: ST_TO_ADDR
// sLevel := false ;
20104: LD_ADDR_EXP 87
20108: PUSH
20109: LD_INT 0
20111: ST_TO_ADDR
// sArmoury := false ;
20112: LD_ADDR_EXP 88
20116: PUSH
20117: LD_INT 0
20119: ST_TO_ADDR
// sRadar := false ;
20120: LD_ADDR_EXP 89
20124: PUSH
20125: LD_INT 0
20127: ST_TO_ADDR
// sBunker := false ;
20128: LD_ADDR_EXP 90
20132: PUSH
20133: LD_INT 0
20135: ST_TO_ADDR
// sHack := false ;
20136: LD_ADDR_EXP 91
20140: PUSH
20141: LD_INT 0
20143: ST_TO_ADDR
// sFire := false ;
20144: LD_ADDR_EXP 92
20148: PUSH
20149: LD_INT 0
20151: ST_TO_ADDR
// sRefresh := false ;
20152: LD_ADDR_EXP 93
20156: PUSH
20157: LD_INT 0
20159: ST_TO_ADDR
// sExp := false ;
20160: LD_ADDR_EXP 94
20164: PUSH
20165: LD_INT 0
20167: ST_TO_ADDR
// sDepot := false ;
20168: LD_ADDR_EXP 95
20172: PUSH
20173: LD_INT 0
20175: ST_TO_ADDR
// sFlag := false ;
20176: LD_ADDR_EXP 96
20180: PUSH
20181: LD_INT 0
20183: ST_TO_ADDR
// sKamikadze := false ;
20184: LD_ADDR_EXP 104
20188: PUSH
20189: LD_INT 0
20191: ST_TO_ADDR
// sTroll := false ;
20192: LD_ADDR_EXP 105
20196: PUSH
20197: LD_INT 0
20199: ST_TO_ADDR
// sSlow := false ;
20200: LD_ADDR_EXP 106
20204: PUSH
20205: LD_INT 0
20207: ST_TO_ADDR
// sLack := false ;
20208: LD_ADDR_EXP 107
20212: PUSH
20213: LD_INT 0
20215: ST_TO_ADDR
// sTank := false ;
20216: LD_ADDR_EXP 109
20220: PUSH
20221: LD_INT 0
20223: ST_TO_ADDR
// sRemote := false ;
20224: LD_ADDR_EXP 110
20228: PUSH
20229: LD_INT 0
20231: ST_TO_ADDR
// sPowell := false ;
20232: LD_ADDR_EXP 111
20236: PUSH
20237: LD_INT 0
20239: ST_TO_ADDR
// sTeleport := false ;
20240: LD_ADDR_EXP 114
20244: PUSH
20245: LD_INT 0
20247: ST_TO_ADDR
// sOilTower := false ;
20248: LD_ADDR_EXP 116
20252: PUSH
20253: LD_INT 0
20255: ST_TO_ADDR
// sShovel := false ;
20256: LD_ADDR_EXP 117
20260: PUSH
20261: LD_INT 0
20263: ST_TO_ADDR
// sSheik := false ;
20264: LD_ADDR_EXP 118
20268: PUSH
20269: LD_INT 0
20271: ST_TO_ADDR
// sEarthquake := false ;
20272: LD_ADDR_EXP 120
20276: PUSH
20277: LD_INT 0
20279: ST_TO_ADDR
// sAI := false ;
20280: LD_ADDR_EXP 121
20284: PUSH
20285: LD_INT 0
20287: ST_TO_ADDR
// sCargo := false ;
20288: LD_ADDR_EXP 124
20292: PUSH
20293: LD_INT 0
20295: ST_TO_ADDR
// sDLaser := false ;
20296: LD_ADDR_EXP 125
20300: PUSH
20301: LD_INT 0
20303: ST_TO_ADDR
// sExchange := false ;
20304: LD_ADDR_EXP 126
20308: PUSH
20309: LD_INT 0
20311: ST_TO_ADDR
// sFac := false ;
20312: LD_ADDR_EXP 127
20316: PUSH
20317: LD_INT 0
20319: ST_TO_ADDR
// sPower := false ;
20320: LD_ADDR_EXP 128
20324: PUSH
20325: LD_INT 0
20327: ST_TO_ADDR
// sRandom := false ;
20328: LD_ADDR_EXP 129
20332: PUSH
20333: LD_INT 0
20335: ST_TO_ADDR
// sShield := false ;
20336: LD_ADDR_EXP 130
20340: PUSH
20341: LD_INT 0
20343: ST_TO_ADDR
// sTime := false ;
20344: LD_ADDR_EXP 131
20348: PUSH
20349: LD_INT 0
20351: ST_TO_ADDR
// sTools := false ;
20352: LD_ADDR_EXP 132
20356: PUSH
20357: LD_INT 0
20359: ST_TO_ADDR
// sSold := false ;
20360: LD_ADDR_EXP 97
20364: PUSH
20365: LD_INT 0
20367: ST_TO_ADDR
// sDiff := false ;
20368: LD_ADDR_EXP 98
20372: PUSH
20373: LD_INT 0
20375: ST_TO_ADDR
// sFog := false ;
20376: LD_ADDR_EXP 101
20380: PUSH
20381: LD_INT 0
20383: ST_TO_ADDR
// sReset := false ;
20384: LD_ADDR_EXP 102
20388: PUSH
20389: LD_INT 0
20391: ST_TO_ADDR
// sSun := false ;
20392: LD_ADDR_EXP 103
20396: PUSH
20397: LD_INT 0
20399: ST_TO_ADDR
// sTiger := false ;
20400: LD_ADDR_EXP 99
20404: PUSH
20405: LD_INT 0
20407: ST_TO_ADDR
// sBomb := false ;
20408: LD_ADDR_EXP 100
20412: PUSH
20413: LD_INT 0
20415: ST_TO_ADDR
// sWound := false ;
20416: LD_ADDR_EXP 108
20420: PUSH
20421: LD_INT 0
20423: ST_TO_ADDR
// sBetray := false ;
20424: LD_ADDR_EXP 112
20428: PUSH
20429: LD_INT 0
20431: ST_TO_ADDR
// sContamin := false ;
20432: LD_ADDR_EXP 113
20436: PUSH
20437: LD_INT 0
20439: ST_TO_ADDR
// sOil := false ;
20440: LD_ADDR_EXP 115
20444: PUSH
20445: LD_INT 0
20447: ST_TO_ADDR
// sStu := false ;
20448: LD_ADDR_EXP 119
20452: PUSH
20453: LD_INT 0
20455: ST_TO_ADDR
// sBazooka := false ;
20456: LD_ADDR_EXP 122
20460: PUSH
20461: LD_INT 0
20463: ST_TO_ADDR
// sMortar := false ;
20464: LD_ADDR_EXP 123
20468: PUSH
20469: LD_INT 0
20471: ST_TO_ADDR
// sRanger := false ;
20472: LD_ADDR_EXP 133
20476: PUSH
20477: LD_INT 0
20479: ST_TO_ADDR
// sComputer := false ;
20480: LD_ADDR_EXP 134
20484: PUSH
20485: LD_INT 0
20487: ST_TO_ADDR
// s30 := false ;
20488: LD_ADDR_EXP 135
20492: PUSH
20493: LD_INT 0
20495: ST_TO_ADDR
// s60 := false ;
20496: LD_ADDR_EXP 136
20500: PUSH
20501: LD_INT 0
20503: ST_TO_ADDR
// end ;
20504: LD_VAR 0 1
20508: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20509: LD_INT 0
20511: PPUSH
20512: PPUSH
20513: PPUSH
20514: PPUSH
20515: PPUSH
20516: PPUSH
20517: PPUSH
// result := [ ] ;
20518: LD_ADDR_VAR 0 2
20522: PUSH
20523: EMPTY
20524: ST_TO_ADDR
// if campaign_id = 1 then
20525: LD_OWVAR 69
20529: PUSH
20530: LD_INT 1
20532: EQUAL
20533: IFFALSE 23699
// begin case mission_number of 1 :
20535: LD_OWVAR 70
20539: PUSH
20540: LD_INT 1
20542: DOUBLE
20543: EQUAL
20544: IFTRUE 20548
20546: GO 20624
20548: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20549: LD_ADDR_VAR 0 2
20553: PUSH
20554: LD_INT 2
20556: PUSH
20557: LD_INT 4
20559: PUSH
20560: LD_INT 11
20562: PUSH
20563: LD_INT 12
20565: PUSH
20566: LD_INT 15
20568: PUSH
20569: LD_INT 16
20571: PUSH
20572: LD_INT 22
20574: PUSH
20575: LD_INT 23
20577: PUSH
20578: LD_INT 26
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 101
20594: PUSH
20595: LD_INT 102
20597: PUSH
20598: LD_INT 106
20600: PUSH
20601: LD_INT 116
20603: PUSH
20604: LD_INT 117
20606: PUSH
20607: LD_INT 118
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: ST_TO_ADDR
20622: GO 23697
20624: LD_INT 2
20626: DOUBLE
20627: EQUAL
20628: IFTRUE 20632
20630: GO 20716
20632: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20633: LD_ADDR_VAR 0 2
20637: PUSH
20638: LD_INT 2
20640: PUSH
20641: LD_INT 4
20643: PUSH
20644: LD_INT 11
20646: PUSH
20647: LD_INT 12
20649: PUSH
20650: LD_INT 15
20652: PUSH
20653: LD_INT 16
20655: PUSH
20656: LD_INT 22
20658: PUSH
20659: LD_INT 23
20661: PUSH
20662: LD_INT 26
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 101
20678: PUSH
20679: LD_INT 102
20681: PUSH
20682: LD_INT 105
20684: PUSH
20685: LD_INT 106
20687: PUSH
20688: LD_INT 108
20690: PUSH
20691: LD_INT 116
20693: PUSH
20694: LD_INT 117
20696: PUSH
20697: LD_INT 118
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: ST_TO_ADDR
20714: GO 23697
20716: LD_INT 3
20718: DOUBLE
20719: EQUAL
20720: IFTRUE 20724
20722: GO 20812
20724: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20725: LD_ADDR_VAR 0 2
20729: PUSH
20730: LD_INT 2
20732: PUSH
20733: LD_INT 4
20735: PUSH
20736: LD_INT 5
20738: PUSH
20739: LD_INT 11
20741: PUSH
20742: LD_INT 12
20744: PUSH
20745: LD_INT 15
20747: PUSH
20748: LD_INT 16
20750: PUSH
20751: LD_INT 22
20753: PUSH
20754: LD_INT 26
20756: PUSH
20757: LD_INT 36
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 101
20774: PUSH
20775: LD_INT 102
20777: PUSH
20778: LD_INT 105
20780: PUSH
20781: LD_INT 106
20783: PUSH
20784: LD_INT 108
20786: PUSH
20787: LD_INT 116
20789: PUSH
20790: LD_INT 117
20792: PUSH
20793: LD_INT 118
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: ST_TO_ADDR
20810: GO 23697
20812: LD_INT 4
20814: DOUBLE
20815: EQUAL
20816: IFTRUE 20820
20818: GO 20916
20820: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20821: LD_ADDR_VAR 0 2
20825: PUSH
20826: LD_INT 2
20828: PUSH
20829: LD_INT 4
20831: PUSH
20832: LD_INT 5
20834: PUSH
20835: LD_INT 8
20837: PUSH
20838: LD_INT 11
20840: PUSH
20841: LD_INT 12
20843: PUSH
20844: LD_INT 15
20846: PUSH
20847: LD_INT 16
20849: PUSH
20850: LD_INT 22
20852: PUSH
20853: LD_INT 23
20855: PUSH
20856: LD_INT 26
20858: PUSH
20859: LD_INT 36
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 101
20878: PUSH
20879: LD_INT 102
20881: PUSH
20882: LD_INT 105
20884: PUSH
20885: LD_INT 106
20887: PUSH
20888: LD_INT 108
20890: PUSH
20891: LD_INT 116
20893: PUSH
20894: LD_INT 117
20896: PUSH
20897: LD_INT 118
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: ST_TO_ADDR
20914: GO 23697
20916: LD_INT 5
20918: DOUBLE
20919: EQUAL
20920: IFTRUE 20924
20922: GO 21036
20924: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20925: LD_ADDR_VAR 0 2
20929: PUSH
20930: LD_INT 2
20932: PUSH
20933: LD_INT 4
20935: PUSH
20936: LD_INT 5
20938: PUSH
20939: LD_INT 6
20941: PUSH
20942: LD_INT 8
20944: PUSH
20945: LD_INT 11
20947: PUSH
20948: LD_INT 12
20950: PUSH
20951: LD_INT 15
20953: PUSH
20954: LD_INT 16
20956: PUSH
20957: LD_INT 22
20959: PUSH
20960: LD_INT 23
20962: PUSH
20963: LD_INT 25
20965: PUSH
20966: LD_INT 26
20968: PUSH
20969: LD_INT 36
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 101
20990: PUSH
20991: LD_INT 102
20993: PUSH
20994: LD_INT 105
20996: PUSH
20997: LD_INT 106
20999: PUSH
21000: LD_INT 108
21002: PUSH
21003: LD_INT 109
21005: PUSH
21006: LD_INT 112
21008: PUSH
21009: LD_INT 116
21011: PUSH
21012: LD_INT 117
21014: PUSH
21015: LD_INT 118
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: ST_TO_ADDR
21034: GO 23697
21036: LD_INT 6
21038: DOUBLE
21039: EQUAL
21040: IFTRUE 21044
21042: GO 21176
21044: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21045: LD_ADDR_VAR 0 2
21049: PUSH
21050: LD_INT 2
21052: PUSH
21053: LD_INT 4
21055: PUSH
21056: LD_INT 5
21058: PUSH
21059: LD_INT 6
21061: PUSH
21062: LD_INT 8
21064: PUSH
21065: LD_INT 11
21067: PUSH
21068: LD_INT 12
21070: PUSH
21071: LD_INT 15
21073: PUSH
21074: LD_INT 16
21076: PUSH
21077: LD_INT 20
21079: PUSH
21080: LD_INT 21
21082: PUSH
21083: LD_INT 22
21085: PUSH
21086: LD_INT 23
21088: PUSH
21089: LD_INT 25
21091: PUSH
21092: LD_INT 26
21094: PUSH
21095: LD_INT 30
21097: PUSH
21098: LD_INT 31
21100: PUSH
21101: LD_INT 32
21103: PUSH
21104: LD_INT 36
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 101
21130: PUSH
21131: LD_INT 102
21133: PUSH
21134: LD_INT 105
21136: PUSH
21137: LD_INT 106
21139: PUSH
21140: LD_INT 108
21142: PUSH
21143: LD_INT 109
21145: PUSH
21146: LD_INT 112
21148: PUSH
21149: LD_INT 116
21151: PUSH
21152: LD_INT 117
21154: PUSH
21155: LD_INT 118
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: ST_TO_ADDR
21174: GO 23697
21176: LD_INT 7
21178: DOUBLE
21179: EQUAL
21180: IFTRUE 21184
21182: GO 21296
21184: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21185: LD_ADDR_VAR 0 2
21189: PUSH
21190: LD_INT 2
21192: PUSH
21193: LD_INT 4
21195: PUSH
21196: LD_INT 5
21198: PUSH
21199: LD_INT 7
21201: PUSH
21202: LD_INT 11
21204: PUSH
21205: LD_INT 12
21207: PUSH
21208: LD_INT 15
21210: PUSH
21211: LD_INT 16
21213: PUSH
21214: LD_INT 20
21216: PUSH
21217: LD_INT 21
21219: PUSH
21220: LD_INT 22
21222: PUSH
21223: LD_INT 23
21225: PUSH
21226: LD_INT 25
21228: PUSH
21229: LD_INT 26
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 101
21250: PUSH
21251: LD_INT 102
21253: PUSH
21254: LD_INT 103
21256: PUSH
21257: LD_INT 105
21259: PUSH
21260: LD_INT 106
21262: PUSH
21263: LD_INT 108
21265: PUSH
21266: LD_INT 112
21268: PUSH
21269: LD_INT 116
21271: PUSH
21272: LD_INT 117
21274: PUSH
21275: LD_INT 118
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: ST_TO_ADDR
21294: GO 23697
21296: LD_INT 8
21298: DOUBLE
21299: EQUAL
21300: IFTRUE 21304
21302: GO 21444
21304: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21305: LD_ADDR_VAR 0 2
21309: PUSH
21310: LD_INT 2
21312: PUSH
21313: LD_INT 4
21315: PUSH
21316: LD_INT 5
21318: PUSH
21319: LD_INT 6
21321: PUSH
21322: LD_INT 7
21324: PUSH
21325: LD_INT 8
21327: PUSH
21328: LD_INT 11
21330: PUSH
21331: LD_INT 12
21333: PUSH
21334: LD_INT 15
21336: PUSH
21337: LD_INT 16
21339: PUSH
21340: LD_INT 20
21342: PUSH
21343: LD_INT 21
21345: PUSH
21346: LD_INT 22
21348: PUSH
21349: LD_INT 23
21351: PUSH
21352: LD_INT 25
21354: PUSH
21355: LD_INT 26
21357: PUSH
21358: LD_INT 30
21360: PUSH
21361: LD_INT 31
21363: PUSH
21364: LD_INT 32
21366: PUSH
21367: LD_INT 36
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 101
21394: PUSH
21395: LD_INT 102
21397: PUSH
21398: LD_INT 103
21400: PUSH
21401: LD_INT 105
21403: PUSH
21404: LD_INT 106
21406: PUSH
21407: LD_INT 108
21409: PUSH
21410: LD_INT 109
21412: PUSH
21413: LD_INT 112
21415: PUSH
21416: LD_INT 116
21418: PUSH
21419: LD_INT 117
21421: PUSH
21422: LD_INT 118
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: ST_TO_ADDR
21442: GO 23697
21444: LD_INT 9
21446: DOUBLE
21447: EQUAL
21448: IFTRUE 21452
21450: GO 21600
21452: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21453: LD_ADDR_VAR 0 2
21457: PUSH
21458: LD_INT 2
21460: PUSH
21461: LD_INT 4
21463: PUSH
21464: LD_INT 5
21466: PUSH
21467: LD_INT 6
21469: PUSH
21470: LD_INT 7
21472: PUSH
21473: LD_INT 8
21475: PUSH
21476: LD_INT 11
21478: PUSH
21479: LD_INT 12
21481: PUSH
21482: LD_INT 15
21484: PUSH
21485: LD_INT 16
21487: PUSH
21488: LD_INT 20
21490: PUSH
21491: LD_INT 21
21493: PUSH
21494: LD_INT 22
21496: PUSH
21497: LD_INT 23
21499: PUSH
21500: LD_INT 25
21502: PUSH
21503: LD_INT 26
21505: PUSH
21506: LD_INT 28
21508: PUSH
21509: LD_INT 30
21511: PUSH
21512: LD_INT 31
21514: PUSH
21515: LD_INT 32
21517: PUSH
21518: LD_INT 36
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 101
21546: PUSH
21547: LD_INT 102
21549: PUSH
21550: LD_INT 103
21552: PUSH
21553: LD_INT 105
21555: PUSH
21556: LD_INT 106
21558: PUSH
21559: LD_INT 108
21561: PUSH
21562: LD_INT 109
21564: PUSH
21565: LD_INT 112
21567: PUSH
21568: LD_INT 114
21570: PUSH
21571: LD_INT 116
21573: PUSH
21574: LD_INT 117
21576: PUSH
21577: LD_INT 118
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: ST_TO_ADDR
21598: GO 23697
21600: LD_INT 10
21602: DOUBLE
21603: EQUAL
21604: IFTRUE 21608
21606: GO 21804
21608: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21609: LD_ADDR_VAR 0 2
21613: PUSH
21614: LD_INT 2
21616: PUSH
21617: LD_INT 4
21619: PUSH
21620: LD_INT 5
21622: PUSH
21623: LD_INT 6
21625: PUSH
21626: LD_INT 7
21628: PUSH
21629: LD_INT 8
21631: PUSH
21632: LD_INT 9
21634: PUSH
21635: LD_INT 10
21637: PUSH
21638: LD_INT 11
21640: PUSH
21641: LD_INT 12
21643: PUSH
21644: LD_INT 13
21646: PUSH
21647: LD_INT 14
21649: PUSH
21650: LD_INT 15
21652: PUSH
21653: LD_INT 16
21655: PUSH
21656: LD_INT 17
21658: PUSH
21659: LD_INT 18
21661: PUSH
21662: LD_INT 19
21664: PUSH
21665: LD_INT 20
21667: PUSH
21668: LD_INT 21
21670: PUSH
21671: LD_INT 22
21673: PUSH
21674: LD_INT 23
21676: PUSH
21677: LD_INT 24
21679: PUSH
21680: LD_INT 25
21682: PUSH
21683: LD_INT 26
21685: PUSH
21686: LD_INT 28
21688: PUSH
21689: LD_INT 30
21691: PUSH
21692: LD_INT 31
21694: PUSH
21695: LD_INT 32
21697: PUSH
21698: LD_INT 36
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 101
21734: PUSH
21735: LD_INT 102
21737: PUSH
21738: LD_INT 103
21740: PUSH
21741: LD_INT 104
21743: PUSH
21744: LD_INT 105
21746: PUSH
21747: LD_INT 106
21749: PUSH
21750: LD_INT 107
21752: PUSH
21753: LD_INT 108
21755: PUSH
21756: LD_INT 109
21758: PUSH
21759: LD_INT 110
21761: PUSH
21762: LD_INT 111
21764: PUSH
21765: LD_INT 112
21767: PUSH
21768: LD_INT 114
21770: PUSH
21771: LD_INT 116
21773: PUSH
21774: LD_INT 117
21776: PUSH
21777: LD_INT 118
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: ST_TO_ADDR
21802: GO 23697
21804: LD_INT 11
21806: DOUBLE
21807: EQUAL
21808: IFTRUE 21812
21810: GO 22016
21812: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21813: LD_ADDR_VAR 0 2
21817: PUSH
21818: LD_INT 2
21820: PUSH
21821: LD_INT 3
21823: PUSH
21824: LD_INT 4
21826: PUSH
21827: LD_INT 5
21829: PUSH
21830: LD_INT 6
21832: PUSH
21833: LD_INT 7
21835: PUSH
21836: LD_INT 8
21838: PUSH
21839: LD_INT 9
21841: PUSH
21842: LD_INT 10
21844: PUSH
21845: LD_INT 11
21847: PUSH
21848: LD_INT 12
21850: PUSH
21851: LD_INT 13
21853: PUSH
21854: LD_INT 14
21856: PUSH
21857: LD_INT 15
21859: PUSH
21860: LD_INT 16
21862: PUSH
21863: LD_INT 17
21865: PUSH
21866: LD_INT 18
21868: PUSH
21869: LD_INT 19
21871: PUSH
21872: LD_INT 20
21874: PUSH
21875: LD_INT 21
21877: PUSH
21878: LD_INT 22
21880: PUSH
21881: LD_INT 23
21883: PUSH
21884: LD_INT 24
21886: PUSH
21887: LD_INT 25
21889: PUSH
21890: LD_INT 26
21892: PUSH
21893: LD_INT 28
21895: PUSH
21896: LD_INT 30
21898: PUSH
21899: LD_INT 31
21901: PUSH
21902: LD_INT 32
21904: PUSH
21905: LD_INT 34
21907: PUSH
21908: LD_INT 36
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 101
21946: PUSH
21947: LD_INT 102
21949: PUSH
21950: LD_INT 103
21952: PUSH
21953: LD_INT 104
21955: PUSH
21956: LD_INT 105
21958: PUSH
21959: LD_INT 106
21961: PUSH
21962: LD_INT 107
21964: PUSH
21965: LD_INT 108
21967: PUSH
21968: LD_INT 109
21970: PUSH
21971: LD_INT 110
21973: PUSH
21974: LD_INT 111
21976: PUSH
21977: LD_INT 112
21979: PUSH
21980: LD_INT 114
21982: PUSH
21983: LD_INT 116
21985: PUSH
21986: LD_INT 117
21988: PUSH
21989: LD_INT 118
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: ST_TO_ADDR
22014: GO 23697
22016: LD_INT 12
22018: DOUBLE
22019: EQUAL
22020: IFTRUE 22024
22022: GO 22244
22024: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22025: LD_ADDR_VAR 0 2
22029: PUSH
22030: LD_INT 1
22032: PUSH
22033: LD_INT 2
22035: PUSH
22036: LD_INT 3
22038: PUSH
22039: LD_INT 4
22041: PUSH
22042: LD_INT 5
22044: PUSH
22045: LD_INT 6
22047: PUSH
22048: LD_INT 7
22050: PUSH
22051: LD_INT 8
22053: PUSH
22054: LD_INT 9
22056: PUSH
22057: LD_INT 10
22059: PUSH
22060: LD_INT 11
22062: PUSH
22063: LD_INT 12
22065: PUSH
22066: LD_INT 13
22068: PUSH
22069: LD_INT 14
22071: PUSH
22072: LD_INT 15
22074: PUSH
22075: LD_INT 16
22077: PUSH
22078: LD_INT 17
22080: PUSH
22081: LD_INT 18
22083: PUSH
22084: LD_INT 19
22086: PUSH
22087: LD_INT 20
22089: PUSH
22090: LD_INT 21
22092: PUSH
22093: LD_INT 22
22095: PUSH
22096: LD_INT 23
22098: PUSH
22099: LD_INT 24
22101: PUSH
22102: LD_INT 25
22104: PUSH
22105: LD_INT 26
22107: PUSH
22108: LD_INT 27
22110: PUSH
22111: LD_INT 28
22113: PUSH
22114: LD_INT 30
22116: PUSH
22117: LD_INT 31
22119: PUSH
22120: LD_INT 32
22122: PUSH
22123: LD_INT 33
22125: PUSH
22126: LD_INT 34
22128: PUSH
22129: LD_INT 36
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 101
22170: PUSH
22171: LD_INT 102
22173: PUSH
22174: LD_INT 103
22176: PUSH
22177: LD_INT 104
22179: PUSH
22180: LD_INT 105
22182: PUSH
22183: LD_INT 106
22185: PUSH
22186: LD_INT 107
22188: PUSH
22189: LD_INT 108
22191: PUSH
22192: LD_INT 109
22194: PUSH
22195: LD_INT 110
22197: PUSH
22198: LD_INT 111
22200: PUSH
22201: LD_INT 112
22203: PUSH
22204: LD_INT 113
22206: PUSH
22207: LD_INT 114
22209: PUSH
22210: LD_INT 116
22212: PUSH
22213: LD_INT 117
22215: PUSH
22216: LD_INT 118
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: ST_TO_ADDR
22242: GO 23697
22244: LD_INT 13
22246: DOUBLE
22247: EQUAL
22248: IFTRUE 22252
22250: GO 22460
22252: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22253: LD_ADDR_VAR 0 2
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: LD_INT 2
22263: PUSH
22264: LD_INT 3
22266: PUSH
22267: LD_INT 4
22269: PUSH
22270: LD_INT 5
22272: PUSH
22273: LD_INT 8
22275: PUSH
22276: LD_INT 9
22278: PUSH
22279: LD_INT 10
22281: PUSH
22282: LD_INT 11
22284: PUSH
22285: LD_INT 12
22287: PUSH
22288: LD_INT 14
22290: PUSH
22291: LD_INT 15
22293: PUSH
22294: LD_INT 16
22296: PUSH
22297: LD_INT 17
22299: PUSH
22300: LD_INT 18
22302: PUSH
22303: LD_INT 19
22305: PUSH
22306: LD_INT 20
22308: PUSH
22309: LD_INT 21
22311: PUSH
22312: LD_INT 22
22314: PUSH
22315: LD_INT 23
22317: PUSH
22318: LD_INT 24
22320: PUSH
22321: LD_INT 25
22323: PUSH
22324: LD_INT 26
22326: PUSH
22327: LD_INT 27
22329: PUSH
22330: LD_INT 28
22332: PUSH
22333: LD_INT 30
22335: PUSH
22336: LD_INT 31
22338: PUSH
22339: LD_INT 32
22341: PUSH
22342: LD_INT 33
22344: PUSH
22345: LD_INT 34
22347: PUSH
22348: LD_INT 36
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 101
22386: PUSH
22387: LD_INT 102
22389: PUSH
22390: LD_INT 103
22392: PUSH
22393: LD_INT 104
22395: PUSH
22396: LD_INT 105
22398: PUSH
22399: LD_INT 106
22401: PUSH
22402: LD_INT 107
22404: PUSH
22405: LD_INT 108
22407: PUSH
22408: LD_INT 109
22410: PUSH
22411: LD_INT 110
22413: PUSH
22414: LD_INT 111
22416: PUSH
22417: LD_INT 112
22419: PUSH
22420: LD_INT 113
22422: PUSH
22423: LD_INT 114
22425: PUSH
22426: LD_INT 116
22428: PUSH
22429: LD_INT 117
22431: PUSH
22432: LD_INT 118
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: ST_TO_ADDR
22458: GO 23697
22460: LD_INT 14
22462: DOUBLE
22463: EQUAL
22464: IFTRUE 22468
22466: GO 22692
22468: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22469: LD_ADDR_VAR 0 2
22473: PUSH
22474: LD_INT 1
22476: PUSH
22477: LD_INT 2
22479: PUSH
22480: LD_INT 3
22482: PUSH
22483: LD_INT 4
22485: PUSH
22486: LD_INT 5
22488: PUSH
22489: LD_INT 6
22491: PUSH
22492: LD_INT 7
22494: PUSH
22495: LD_INT 8
22497: PUSH
22498: LD_INT 9
22500: PUSH
22501: LD_INT 10
22503: PUSH
22504: LD_INT 11
22506: PUSH
22507: LD_INT 12
22509: PUSH
22510: LD_INT 13
22512: PUSH
22513: LD_INT 14
22515: PUSH
22516: LD_INT 15
22518: PUSH
22519: LD_INT 16
22521: PUSH
22522: LD_INT 17
22524: PUSH
22525: LD_INT 18
22527: PUSH
22528: LD_INT 19
22530: PUSH
22531: LD_INT 20
22533: PUSH
22534: LD_INT 21
22536: PUSH
22537: LD_INT 22
22539: PUSH
22540: LD_INT 23
22542: PUSH
22543: LD_INT 24
22545: PUSH
22546: LD_INT 25
22548: PUSH
22549: LD_INT 26
22551: PUSH
22552: LD_INT 27
22554: PUSH
22555: LD_INT 28
22557: PUSH
22558: LD_INT 29
22560: PUSH
22561: LD_INT 30
22563: PUSH
22564: LD_INT 31
22566: PUSH
22567: LD_INT 32
22569: PUSH
22570: LD_INT 33
22572: PUSH
22573: LD_INT 34
22575: PUSH
22576: LD_INT 36
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 101
22618: PUSH
22619: LD_INT 102
22621: PUSH
22622: LD_INT 103
22624: PUSH
22625: LD_INT 104
22627: PUSH
22628: LD_INT 105
22630: PUSH
22631: LD_INT 106
22633: PUSH
22634: LD_INT 107
22636: PUSH
22637: LD_INT 108
22639: PUSH
22640: LD_INT 109
22642: PUSH
22643: LD_INT 110
22645: PUSH
22646: LD_INT 111
22648: PUSH
22649: LD_INT 112
22651: PUSH
22652: LD_INT 113
22654: PUSH
22655: LD_INT 114
22657: PUSH
22658: LD_INT 116
22660: PUSH
22661: LD_INT 117
22663: PUSH
22664: LD_INT 118
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: ST_TO_ADDR
22690: GO 23697
22692: LD_INT 15
22694: DOUBLE
22695: EQUAL
22696: IFTRUE 22700
22698: GO 22924
22700: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22701: LD_ADDR_VAR 0 2
22705: PUSH
22706: LD_INT 1
22708: PUSH
22709: LD_INT 2
22711: PUSH
22712: LD_INT 3
22714: PUSH
22715: LD_INT 4
22717: PUSH
22718: LD_INT 5
22720: PUSH
22721: LD_INT 6
22723: PUSH
22724: LD_INT 7
22726: PUSH
22727: LD_INT 8
22729: PUSH
22730: LD_INT 9
22732: PUSH
22733: LD_INT 10
22735: PUSH
22736: LD_INT 11
22738: PUSH
22739: LD_INT 12
22741: PUSH
22742: LD_INT 13
22744: PUSH
22745: LD_INT 14
22747: PUSH
22748: LD_INT 15
22750: PUSH
22751: LD_INT 16
22753: PUSH
22754: LD_INT 17
22756: PUSH
22757: LD_INT 18
22759: PUSH
22760: LD_INT 19
22762: PUSH
22763: LD_INT 20
22765: PUSH
22766: LD_INT 21
22768: PUSH
22769: LD_INT 22
22771: PUSH
22772: LD_INT 23
22774: PUSH
22775: LD_INT 24
22777: PUSH
22778: LD_INT 25
22780: PUSH
22781: LD_INT 26
22783: PUSH
22784: LD_INT 27
22786: PUSH
22787: LD_INT 28
22789: PUSH
22790: LD_INT 29
22792: PUSH
22793: LD_INT 30
22795: PUSH
22796: LD_INT 31
22798: PUSH
22799: LD_INT 32
22801: PUSH
22802: LD_INT 33
22804: PUSH
22805: LD_INT 34
22807: PUSH
22808: LD_INT 36
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 101
22850: PUSH
22851: LD_INT 102
22853: PUSH
22854: LD_INT 103
22856: PUSH
22857: LD_INT 104
22859: PUSH
22860: LD_INT 105
22862: PUSH
22863: LD_INT 106
22865: PUSH
22866: LD_INT 107
22868: PUSH
22869: LD_INT 108
22871: PUSH
22872: LD_INT 109
22874: PUSH
22875: LD_INT 110
22877: PUSH
22878: LD_INT 111
22880: PUSH
22881: LD_INT 112
22883: PUSH
22884: LD_INT 113
22886: PUSH
22887: LD_INT 114
22889: PUSH
22890: LD_INT 116
22892: PUSH
22893: LD_INT 117
22895: PUSH
22896: LD_INT 118
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: ST_TO_ADDR
22922: GO 23697
22924: LD_INT 16
22926: DOUBLE
22927: EQUAL
22928: IFTRUE 22932
22930: GO 23068
22932: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22933: LD_ADDR_VAR 0 2
22937: PUSH
22938: LD_INT 2
22940: PUSH
22941: LD_INT 4
22943: PUSH
22944: LD_INT 5
22946: PUSH
22947: LD_INT 7
22949: PUSH
22950: LD_INT 11
22952: PUSH
22953: LD_INT 12
22955: PUSH
22956: LD_INT 15
22958: PUSH
22959: LD_INT 16
22961: PUSH
22962: LD_INT 20
22964: PUSH
22965: LD_INT 21
22967: PUSH
22968: LD_INT 22
22970: PUSH
22971: LD_INT 23
22973: PUSH
22974: LD_INT 25
22976: PUSH
22977: LD_INT 26
22979: PUSH
22980: LD_INT 30
22982: PUSH
22983: LD_INT 31
22985: PUSH
22986: LD_INT 32
22988: PUSH
22989: LD_INT 33
22991: PUSH
22992: LD_INT 34
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 101
23018: PUSH
23019: LD_INT 102
23021: PUSH
23022: LD_INT 103
23024: PUSH
23025: LD_INT 106
23027: PUSH
23028: LD_INT 108
23030: PUSH
23031: LD_INT 112
23033: PUSH
23034: LD_INT 113
23036: PUSH
23037: LD_INT 114
23039: PUSH
23040: LD_INT 116
23042: PUSH
23043: LD_INT 117
23045: PUSH
23046: LD_INT 118
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: ST_TO_ADDR
23066: GO 23697
23068: LD_INT 17
23070: DOUBLE
23071: EQUAL
23072: IFTRUE 23076
23074: GO 23300
23076: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23077: LD_ADDR_VAR 0 2
23081: PUSH
23082: LD_INT 1
23084: PUSH
23085: LD_INT 2
23087: PUSH
23088: LD_INT 3
23090: PUSH
23091: LD_INT 4
23093: PUSH
23094: LD_INT 5
23096: PUSH
23097: LD_INT 6
23099: PUSH
23100: LD_INT 7
23102: PUSH
23103: LD_INT 8
23105: PUSH
23106: LD_INT 9
23108: PUSH
23109: LD_INT 10
23111: PUSH
23112: LD_INT 11
23114: PUSH
23115: LD_INT 12
23117: PUSH
23118: LD_INT 13
23120: PUSH
23121: LD_INT 14
23123: PUSH
23124: LD_INT 15
23126: PUSH
23127: LD_INT 16
23129: PUSH
23130: LD_INT 17
23132: PUSH
23133: LD_INT 18
23135: PUSH
23136: LD_INT 19
23138: PUSH
23139: LD_INT 20
23141: PUSH
23142: LD_INT 21
23144: PUSH
23145: LD_INT 22
23147: PUSH
23148: LD_INT 23
23150: PUSH
23151: LD_INT 24
23153: PUSH
23154: LD_INT 25
23156: PUSH
23157: LD_INT 26
23159: PUSH
23160: LD_INT 27
23162: PUSH
23163: LD_INT 28
23165: PUSH
23166: LD_INT 29
23168: PUSH
23169: LD_INT 30
23171: PUSH
23172: LD_INT 31
23174: PUSH
23175: LD_INT 32
23177: PUSH
23178: LD_INT 33
23180: PUSH
23181: LD_INT 34
23183: PUSH
23184: LD_INT 36
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 101
23226: PUSH
23227: LD_INT 102
23229: PUSH
23230: LD_INT 103
23232: PUSH
23233: LD_INT 104
23235: PUSH
23236: LD_INT 105
23238: PUSH
23239: LD_INT 106
23241: PUSH
23242: LD_INT 107
23244: PUSH
23245: LD_INT 108
23247: PUSH
23248: LD_INT 109
23250: PUSH
23251: LD_INT 110
23253: PUSH
23254: LD_INT 111
23256: PUSH
23257: LD_INT 112
23259: PUSH
23260: LD_INT 113
23262: PUSH
23263: LD_INT 114
23265: PUSH
23266: LD_INT 116
23268: PUSH
23269: LD_INT 117
23271: PUSH
23272: LD_INT 118
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: ST_TO_ADDR
23298: GO 23697
23300: LD_INT 18
23302: DOUBLE
23303: EQUAL
23304: IFTRUE 23308
23306: GO 23456
23308: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23309: LD_ADDR_VAR 0 2
23313: PUSH
23314: LD_INT 2
23316: PUSH
23317: LD_INT 4
23319: PUSH
23320: LD_INT 5
23322: PUSH
23323: LD_INT 7
23325: PUSH
23326: LD_INT 11
23328: PUSH
23329: LD_INT 12
23331: PUSH
23332: LD_INT 15
23334: PUSH
23335: LD_INT 16
23337: PUSH
23338: LD_INT 20
23340: PUSH
23341: LD_INT 21
23343: PUSH
23344: LD_INT 22
23346: PUSH
23347: LD_INT 23
23349: PUSH
23350: LD_INT 25
23352: PUSH
23353: LD_INT 26
23355: PUSH
23356: LD_INT 30
23358: PUSH
23359: LD_INT 31
23361: PUSH
23362: LD_INT 32
23364: PUSH
23365: LD_INT 33
23367: PUSH
23368: LD_INT 34
23370: PUSH
23371: LD_INT 35
23373: PUSH
23374: LD_INT 36
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 101
23402: PUSH
23403: LD_INT 102
23405: PUSH
23406: LD_INT 103
23408: PUSH
23409: LD_INT 106
23411: PUSH
23412: LD_INT 108
23414: PUSH
23415: LD_INT 112
23417: PUSH
23418: LD_INT 113
23420: PUSH
23421: LD_INT 114
23423: PUSH
23424: LD_INT 115
23426: PUSH
23427: LD_INT 116
23429: PUSH
23430: LD_INT 117
23432: PUSH
23433: LD_INT 118
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: ST_TO_ADDR
23454: GO 23697
23456: LD_INT 19
23458: DOUBLE
23459: EQUAL
23460: IFTRUE 23464
23462: GO 23696
23464: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23465: LD_ADDR_VAR 0 2
23469: PUSH
23470: LD_INT 1
23472: PUSH
23473: LD_INT 2
23475: PUSH
23476: LD_INT 3
23478: PUSH
23479: LD_INT 4
23481: PUSH
23482: LD_INT 5
23484: PUSH
23485: LD_INT 6
23487: PUSH
23488: LD_INT 7
23490: PUSH
23491: LD_INT 8
23493: PUSH
23494: LD_INT 9
23496: PUSH
23497: LD_INT 10
23499: PUSH
23500: LD_INT 11
23502: PUSH
23503: LD_INT 12
23505: PUSH
23506: LD_INT 13
23508: PUSH
23509: LD_INT 14
23511: PUSH
23512: LD_INT 15
23514: PUSH
23515: LD_INT 16
23517: PUSH
23518: LD_INT 17
23520: PUSH
23521: LD_INT 18
23523: PUSH
23524: LD_INT 19
23526: PUSH
23527: LD_INT 20
23529: PUSH
23530: LD_INT 21
23532: PUSH
23533: LD_INT 22
23535: PUSH
23536: LD_INT 23
23538: PUSH
23539: LD_INT 24
23541: PUSH
23542: LD_INT 25
23544: PUSH
23545: LD_INT 26
23547: PUSH
23548: LD_INT 27
23550: PUSH
23551: LD_INT 28
23553: PUSH
23554: LD_INT 29
23556: PUSH
23557: LD_INT 30
23559: PUSH
23560: LD_INT 31
23562: PUSH
23563: LD_INT 32
23565: PUSH
23566: LD_INT 33
23568: PUSH
23569: LD_INT 34
23571: PUSH
23572: LD_INT 35
23574: PUSH
23575: LD_INT 36
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 101
23618: PUSH
23619: LD_INT 102
23621: PUSH
23622: LD_INT 103
23624: PUSH
23625: LD_INT 104
23627: PUSH
23628: LD_INT 105
23630: PUSH
23631: LD_INT 106
23633: PUSH
23634: LD_INT 107
23636: PUSH
23637: LD_INT 108
23639: PUSH
23640: LD_INT 109
23642: PUSH
23643: LD_INT 110
23645: PUSH
23646: LD_INT 111
23648: PUSH
23649: LD_INT 112
23651: PUSH
23652: LD_INT 113
23654: PUSH
23655: LD_INT 114
23657: PUSH
23658: LD_INT 115
23660: PUSH
23661: LD_INT 116
23663: PUSH
23664: LD_INT 117
23666: PUSH
23667: LD_INT 118
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: ST_TO_ADDR
23694: GO 23697
23696: POP
// end else
23697: GO 23928
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23699: LD_ADDR_VAR 0 2
23703: PUSH
23704: LD_INT 1
23706: PUSH
23707: LD_INT 2
23709: PUSH
23710: LD_INT 3
23712: PUSH
23713: LD_INT 4
23715: PUSH
23716: LD_INT 5
23718: PUSH
23719: LD_INT 6
23721: PUSH
23722: LD_INT 7
23724: PUSH
23725: LD_INT 8
23727: PUSH
23728: LD_INT 9
23730: PUSH
23731: LD_INT 10
23733: PUSH
23734: LD_INT 11
23736: PUSH
23737: LD_INT 12
23739: PUSH
23740: LD_INT 13
23742: PUSH
23743: LD_INT 14
23745: PUSH
23746: LD_INT 15
23748: PUSH
23749: LD_INT 16
23751: PUSH
23752: LD_INT 17
23754: PUSH
23755: LD_INT 18
23757: PUSH
23758: LD_INT 19
23760: PUSH
23761: LD_INT 20
23763: PUSH
23764: LD_INT 21
23766: PUSH
23767: LD_INT 22
23769: PUSH
23770: LD_INT 23
23772: PUSH
23773: LD_INT 24
23775: PUSH
23776: LD_INT 25
23778: PUSH
23779: LD_INT 26
23781: PUSH
23782: LD_INT 27
23784: PUSH
23785: LD_INT 28
23787: PUSH
23788: LD_INT 29
23790: PUSH
23791: LD_INT 30
23793: PUSH
23794: LD_INT 31
23796: PUSH
23797: LD_INT 32
23799: PUSH
23800: LD_INT 33
23802: PUSH
23803: LD_INT 34
23805: PUSH
23806: LD_INT 35
23808: PUSH
23809: LD_INT 36
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 101
23852: PUSH
23853: LD_INT 102
23855: PUSH
23856: LD_INT 103
23858: PUSH
23859: LD_INT 104
23861: PUSH
23862: LD_INT 105
23864: PUSH
23865: LD_INT 106
23867: PUSH
23868: LD_INT 107
23870: PUSH
23871: LD_INT 108
23873: PUSH
23874: LD_INT 109
23876: PUSH
23877: LD_INT 110
23879: PUSH
23880: LD_INT 111
23882: PUSH
23883: LD_INT 112
23885: PUSH
23886: LD_INT 113
23888: PUSH
23889: LD_INT 114
23891: PUSH
23892: LD_INT 115
23894: PUSH
23895: LD_INT 116
23897: PUSH
23898: LD_INT 117
23900: PUSH
23901: LD_INT 118
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: ST_TO_ADDR
// if result then
23928: LD_VAR 0 2
23932: IFFALSE 24718
// begin normal :=  ;
23934: LD_ADDR_VAR 0 5
23938: PUSH
23939: LD_STRING 
23941: ST_TO_ADDR
// hardcore :=  ;
23942: LD_ADDR_VAR 0 6
23946: PUSH
23947: LD_STRING 
23949: ST_TO_ADDR
// active :=  ;
23950: LD_ADDR_VAR 0 7
23954: PUSH
23955: LD_STRING 
23957: ST_TO_ADDR
// for i = 1 to normalCounter do
23958: LD_ADDR_VAR 0 8
23962: PUSH
23963: DOUBLE
23964: LD_INT 1
23966: DEC
23967: ST_TO_ADDR
23968: LD_EXP 81
23972: PUSH
23973: FOR_TO
23974: IFFALSE 24075
// begin tmp := 0 ;
23976: LD_ADDR_VAR 0 3
23980: PUSH
23981: LD_STRING 0
23983: ST_TO_ADDR
// if result [ 1 ] then
23984: LD_VAR 0 2
23988: PUSH
23989: LD_INT 1
23991: ARRAY
23992: IFFALSE 24057
// if result [ 1 ] [ 1 ] = i then
23994: LD_VAR 0 2
23998: PUSH
23999: LD_INT 1
24001: ARRAY
24002: PUSH
24003: LD_INT 1
24005: ARRAY
24006: PUSH
24007: LD_VAR 0 8
24011: EQUAL
24012: IFFALSE 24057
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24014: LD_ADDR_VAR 0 2
24018: PUSH
24019: LD_VAR 0 2
24023: PPUSH
24024: LD_INT 1
24026: PPUSH
24027: LD_VAR 0 2
24031: PUSH
24032: LD_INT 1
24034: ARRAY
24035: PPUSH
24036: LD_INT 1
24038: PPUSH
24039: CALL_OW 3
24043: PPUSH
24044: CALL_OW 1
24048: ST_TO_ADDR
// tmp := 1 ;
24049: LD_ADDR_VAR 0 3
24053: PUSH
24054: LD_STRING 1
24056: ST_TO_ADDR
// end ; normal := normal & tmp ;
24057: LD_ADDR_VAR 0 5
24061: PUSH
24062: LD_VAR 0 5
24066: PUSH
24067: LD_VAR 0 3
24071: STR
24072: ST_TO_ADDR
// end ;
24073: GO 23973
24075: POP
24076: POP
// for i = 1 to hardcoreCounter do
24077: LD_ADDR_VAR 0 8
24081: PUSH
24082: DOUBLE
24083: LD_INT 1
24085: DEC
24086: ST_TO_ADDR
24087: LD_EXP 82
24091: PUSH
24092: FOR_TO
24093: IFFALSE 24198
// begin tmp := 0 ;
24095: LD_ADDR_VAR 0 3
24099: PUSH
24100: LD_STRING 0
24102: ST_TO_ADDR
// if result [ 2 ] then
24103: LD_VAR 0 2
24107: PUSH
24108: LD_INT 2
24110: ARRAY
24111: IFFALSE 24180
// if result [ 2 ] [ 1 ] = 100 + i then
24113: LD_VAR 0 2
24117: PUSH
24118: LD_INT 2
24120: ARRAY
24121: PUSH
24122: LD_INT 1
24124: ARRAY
24125: PUSH
24126: LD_INT 100
24128: PUSH
24129: LD_VAR 0 8
24133: PLUS
24134: EQUAL
24135: IFFALSE 24180
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24137: LD_ADDR_VAR 0 2
24141: PUSH
24142: LD_VAR 0 2
24146: PPUSH
24147: LD_INT 2
24149: PPUSH
24150: LD_VAR 0 2
24154: PUSH
24155: LD_INT 2
24157: ARRAY
24158: PPUSH
24159: LD_INT 1
24161: PPUSH
24162: CALL_OW 3
24166: PPUSH
24167: CALL_OW 1
24171: ST_TO_ADDR
// tmp := 1 ;
24172: LD_ADDR_VAR 0 3
24176: PUSH
24177: LD_STRING 1
24179: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24180: LD_ADDR_VAR 0 6
24184: PUSH
24185: LD_VAR 0 6
24189: PUSH
24190: LD_VAR 0 3
24194: STR
24195: ST_TO_ADDR
// end ;
24196: GO 24092
24198: POP
24199: POP
// if isGameLoad then
24200: LD_VAR 0 1
24204: IFFALSE 24679
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24206: LD_ADDR_VAR 0 4
24210: PUSH
24211: LD_EXP 85
24215: PUSH
24216: LD_EXP 84
24220: PUSH
24221: LD_EXP 86
24225: PUSH
24226: LD_EXP 83
24230: PUSH
24231: LD_EXP 87
24235: PUSH
24236: LD_EXP 88
24240: PUSH
24241: LD_EXP 89
24245: PUSH
24246: LD_EXP 90
24250: PUSH
24251: LD_EXP 91
24255: PUSH
24256: LD_EXP 92
24260: PUSH
24261: LD_EXP 93
24265: PUSH
24266: LD_EXP 94
24270: PUSH
24271: LD_EXP 95
24275: PUSH
24276: LD_EXP 96
24280: PUSH
24281: LD_EXP 104
24285: PUSH
24286: LD_EXP 105
24290: PUSH
24291: LD_EXP 106
24295: PUSH
24296: LD_EXP 107
24300: PUSH
24301: LD_EXP 109
24305: PUSH
24306: LD_EXP 110
24310: PUSH
24311: LD_EXP 111
24315: PUSH
24316: LD_EXP 114
24320: PUSH
24321: LD_EXP 116
24325: PUSH
24326: LD_EXP 117
24330: PUSH
24331: LD_EXP 118
24335: PUSH
24336: LD_EXP 120
24340: PUSH
24341: LD_EXP 121
24345: PUSH
24346: LD_EXP 124
24350: PUSH
24351: LD_EXP 125
24355: PUSH
24356: LD_EXP 126
24360: PUSH
24361: LD_EXP 127
24365: PUSH
24366: LD_EXP 128
24370: PUSH
24371: LD_EXP 129
24375: PUSH
24376: LD_EXP 130
24380: PUSH
24381: LD_EXP 131
24385: PUSH
24386: LD_EXP 132
24390: PUSH
24391: LD_EXP 97
24395: PUSH
24396: LD_EXP 98
24400: PUSH
24401: LD_EXP 101
24405: PUSH
24406: LD_EXP 102
24410: PUSH
24411: LD_EXP 103
24415: PUSH
24416: LD_EXP 99
24420: PUSH
24421: LD_EXP 100
24425: PUSH
24426: LD_EXP 108
24430: PUSH
24431: LD_EXP 112
24435: PUSH
24436: LD_EXP 113
24440: PUSH
24441: LD_EXP 115
24445: PUSH
24446: LD_EXP 119
24450: PUSH
24451: LD_EXP 122
24455: PUSH
24456: LD_EXP 123
24460: PUSH
24461: LD_EXP 133
24465: PUSH
24466: LD_EXP 134
24470: PUSH
24471: LD_EXP 135
24475: PUSH
24476: LD_EXP 136
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: ST_TO_ADDR
// tmp :=  ;
24537: LD_ADDR_VAR 0 3
24541: PUSH
24542: LD_STRING 
24544: ST_TO_ADDR
// for i = 1 to normalCounter do
24545: LD_ADDR_VAR 0 8
24549: PUSH
24550: DOUBLE
24551: LD_INT 1
24553: DEC
24554: ST_TO_ADDR
24555: LD_EXP 81
24559: PUSH
24560: FOR_TO
24561: IFFALSE 24597
// begin if flags [ i ] then
24563: LD_VAR 0 4
24567: PUSH
24568: LD_VAR 0 8
24572: ARRAY
24573: IFFALSE 24595
// tmp := tmp & i & ; ;
24575: LD_ADDR_VAR 0 3
24579: PUSH
24580: LD_VAR 0 3
24584: PUSH
24585: LD_VAR 0 8
24589: STR
24590: PUSH
24591: LD_STRING ;
24593: STR
24594: ST_TO_ADDR
// end ;
24595: GO 24560
24597: POP
24598: POP
// for i = 1 to hardcoreCounter do
24599: LD_ADDR_VAR 0 8
24603: PUSH
24604: DOUBLE
24605: LD_INT 1
24607: DEC
24608: ST_TO_ADDR
24609: LD_EXP 82
24613: PUSH
24614: FOR_TO
24615: IFFALSE 24661
// begin if flags [ normalCounter + i ] then
24617: LD_VAR 0 4
24621: PUSH
24622: LD_EXP 81
24626: PUSH
24627: LD_VAR 0 8
24631: PLUS
24632: ARRAY
24633: IFFALSE 24659
// tmp := tmp & ( 100 + i ) & ; ;
24635: LD_ADDR_VAR 0 3
24639: PUSH
24640: LD_VAR 0 3
24644: PUSH
24645: LD_INT 100
24647: PUSH
24648: LD_VAR 0 8
24652: PLUS
24653: STR
24654: PUSH
24655: LD_STRING ;
24657: STR
24658: ST_TO_ADDR
// end ;
24659: GO 24614
24661: POP
24662: POP
// if tmp then
24663: LD_VAR 0 3
24667: IFFALSE 24679
// active := tmp ;
24669: LD_ADDR_VAR 0 7
24673: PUSH
24674: LD_VAR 0 3
24678: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24679: LD_STRING getStreamItemsFromMission("
24681: PUSH
24682: LD_VAR 0 5
24686: STR
24687: PUSH
24688: LD_STRING ","
24690: STR
24691: PUSH
24692: LD_VAR 0 6
24696: STR
24697: PUSH
24698: LD_STRING ","
24700: STR
24701: PUSH
24702: LD_VAR 0 7
24706: STR
24707: PUSH
24708: LD_STRING ")
24710: STR
24711: PPUSH
24712: CALL_OW 559
// end else
24716: GO 24725
// ToLua ( getStreamItemsFromMission("","","") ) ;
24718: LD_STRING getStreamItemsFromMission("","","")
24720: PPUSH
24721: CALL_OW 559
// end ;
24725: LD_VAR 0 2
24729: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24730: LD_EXP 80
24734: PUSH
24735: LD_EXP 85
24739: AND
24740: IFFALSE 24864
24742: GO 24744
24744: DISABLE
24745: LD_INT 0
24747: PPUSH
24748: PPUSH
// begin enable ;
24749: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24750: LD_ADDR_VAR 0 2
24754: PUSH
24755: LD_INT 22
24757: PUSH
24758: LD_OWVAR 2
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 2
24769: PUSH
24770: LD_INT 34
24772: PUSH
24773: LD_INT 7
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 34
24782: PUSH
24783: LD_INT 45
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 34
24792: PUSH
24793: LD_INT 28
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 34
24802: PUSH
24803: LD_INT 47
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PPUSH
24821: CALL_OW 69
24825: ST_TO_ADDR
// if not tmp then
24826: LD_VAR 0 2
24830: NOT
24831: IFFALSE 24835
// exit ;
24833: GO 24864
// for i in tmp do
24835: LD_ADDR_VAR 0 1
24839: PUSH
24840: LD_VAR 0 2
24844: PUSH
24845: FOR_IN
24846: IFFALSE 24862
// begin SetLives ( i , 0 ) ;
24848: LD_VAR 0 1
24852: PPUSH
24853: LD_INT 0
24855: PPUSH
24856: CALL_OW 234
// end ;
24860: GO 24845
24862: POP
24863: POP
// end ;
24864: PPOPN 2
24866: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24867: LD_EXP 80
24871: PUSH
24872: LD_EXP 86
24876: AND
24877: IFFALSE 24961
24879: GO 24881
24881: DISABLE
24882: LD_INT 0
24884: PPUSH
24885: PPUSH
// begin enable ;
24886: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24887: LD_ADDR_VAR 0 2
24891: PUSH
24892: LD_INT 22
24894: PUSH
24895: LD_OWVAR 2
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 32
24906: PUSH
24907: LD_INT 3
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PPUSH
24918: CALL_OW 69
24922: ST_TO_ADDR
// if not tmp then
24923: LD_VAR 0 2
24927: NOT
24928: IFFALSE 24932
// exit ;
24930: GO 24961
// for i in tmp do
24932: LD_ADDR_VAR 0 1
24936: PUSH
24937: LD_VAR 0 2
24941: PUSH
24942: FOR_IN
24943: IFFALSE 24959
// begin SetLives ( i , 0 ) ;
24945: LD_VAR 0 1
24949: PPUSH
24950: LD_INT 0
24952: PPUSH
24953: CALL_OW 234
// end ;
24957: GO 24942
24959: POP
24960: POP
// end ;
24961: PPOPN 2
24963: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24964: LD_EXP 80
24968: PUSH
24969: LD_EXP 83
24973: AND
24974: IFFALSE 25067
24976: GO 24978
24978: DISABLE
24979: LD_INT 0
24981: PPUSH
// begin enable ;
24982: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24983: LD_ADDR_VAR 0 1
24987: PUSH
24988: LD_INT 22
24990: PUSH
24991: LD_OWVAR 2
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 2
25002: PUSH
25003: LD_INT 25
25005: PUSH
25006: LD_INT 5
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 25
25015: PUSH
25016: LD_INT 9
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 25
25025: PUSH
25026: LD_INT 8
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PPUSH
25043: CALL_OW 69
25047: PUSH
25048: FOR_IN
25049: IFFALSE 25065
// begin SetClass ( i , 1 ) ;
25051: LD_VAR 0 1
25055: PPUSH
25056: LD_INT 1
25058: PPUSH
25059: CALL_OW 336
// end ;
25063: GO 25048
25065: POP
25066: POP
// end ;
25067: PPOPN 1
25069: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25070: LD_EXP 80
25074: PUSH
25075: LD_EXP 84
25079: AND
25080: PUSH
25081: LD_OWVAR 65
25085: PUSH
25086: LD_INT 7
25088: LESS
25089: AND
25090: IFFALSE 25104
25092: GO 25094
25094: DISABLE
// begin enable ;
25095: ENABLE
// game_speed := 7 ;
25096: LD_ADDR_OWVAR 65
25100: PUSH
25101: LD_INT 7
25103: ST_TO_ADDR
// end ;
25104: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25105: LD_EXP 80
25109: PUSH
25110: LD_EXP 87
25114: AND
25115: IFFALSE 25317
25117: GO 25119
25119: DISABLE
25120: LD_INT 0
25122: PPUSH
25123: PPUSH
25124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25125: LD_ADDR_VAR 0 3
25129: PUSH
25130: LD_INT 81
25132: PUSH
25133: LD_OWVAR 2
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 21
25144: PUSH
25145: LD_INT 1
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PPUSH
25156: CALL_OW 69
25160: ST_TO_ADDR
// if not tmp then
25161: LD_VAR 0 3
25165: NOT
25166: IFFALSE 25170
// exit ;
25168: GO 25317
// if tmp > 5 then
25170: LD_VAR 0 3
25174: PUSH
25175: LD_INT 5
25177: GREATER
25178: IFFALSE 25190
// k := 5 else
25180: LD_ADDR_VAR 0 2
25184: PUSH
25185: LD_INT 5
25187: ST_TO_ADDR
25188: GO 25200
// k := tmp ;
25190: LD_ADDR_VAR 0 2
25194: PUSH
25195: LD_VAR 0 3
25199: ST_TO_ADDR
// for i := 1 to k do
25200: LD_ADDR_VAR 0 1
25204: PUSH
25205: DOUBLE
25206: LD_INT 1
25208: DEC
25209: ST_TO_ADDR
25210: LD_VAR 0 2
25214: PUSH
25215: FOR_TO
25216: IFFALSE 25315
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25218: LD_VAR 0 3
25222: PUSH
25223: LD_VAR 0 1
25227: ARRAY
25228: PPUSH
25229: LD_VAR 0 1
25233: PUSH
25234: LD_INT 4
25236: MOD
25237: PUSH
25238: LD_INT 1
25240: PLUS
25241: PPUSH
25242: CALL_OW 259
25246: PUSH
25247: LD_INT 10
25249: LESS
25250: IFFALSE 25313
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25252: LD_VAR 0 3
25256: PUSH
25257: LD_VAR 0 1
25261: ARRAY
25262: PPUSH
25263: LD_VAR 0 1
25267: PUSH
25268: LD_INT 4
25270: MOD
25271: PUSH
25272: LD_INT 1
25274: PLUS
25275: PPUSH
25276: LD_VAR 0 3
25280: PUSH
25281: LD_VAR 0 1
25285: ARRAY
25286: PPUSH
25287: LD_VAR 0 1
25291: PUSH
25292: LD_INT 4
25294: MOD
25295: PUSH
25296: LD_INT 1
25298: PLUS
25299: PPUSH
25300: CALL_OW 259
25304: PUSH
25305: LD_INT 1
25307: PLUS
25308: PPUSH
25309: CALL_OW 237
25313: GO 25215
25315: POP
25316: POP
// end ;
25317: PPOPN 3
25319: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25320: LD_EXP 80
25324: PUSH
25325: LD_EXP 88
25329: AND
25330: IFFALSE 25350
25332: GO 25334
25334: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25335: LD_INT 4
25337: PPUSH
25338: LD_OWVAR 2
25342: PPUSH
25343: LD_INT 0
25345: PPUSH
25346: CALL_OW 324
25350: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25351: LD_EXP 80
25355: PUSH
25356: LD_EXP 117
25360: AND
25361: IFFALSE 25381
25363: GO 25365
25365: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25366: LD_INT 19
25368: PPUSH
25369: LD_OWVAR 2
25373: PPUSH
25374: LD_INT 0
25376: PPUSH
25377: CALL_OW 324
25381: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25382: LD_EXP 80
25386: PUSH
25387: LD_EXP 89
25391: AND
25392: IFFALSE 25494
25394: GO 25396
25396: DISABLE
25397: LD_INT 0
25399: PPUSH
25400: PPUSH
// begin enable ;
25401: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25402: LD_ADDR_VAR 0 2
25406: PUSH
25407: LD_INT 22
25409: PUSH
25410: LD_OWVAR 2
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 2
25421: PUSH
25422: LD_INT 34
25424: PUSH
25425: LD_INT 11
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 34
25434: PUSH
25435: LD_INT 30
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: LIST
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PPUSH
25451: CALL_OW 69
25455: ST_TO_ADDR
// if not tmp then
25456: LD_VAR 0 2
25460: NOT
25461: IFFALSE 25465
// exit ;
25463: GO 25494
// for i in tmp do
25465: LD_ADDR_VAR 0 1
25469: PUSH
25470: LD_VAR 0 2
25474: PUSH
25475: FOR_IN
25476: IFFALSE 25492
// begin SetLives ( i , 0 ) ;
25478: LD_VAR 0 1
25482: PPUSH
25483: LD_INT 0
25485: PPUSH
25486: CALL_OW 234
// end ;
25490: GO 25475
25492: POP
25493: POP
// end ;
25494: PPOPN 2
25496: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25497: LD_EXP 80
25501: PUSH
25502: LD_EXP 90
25506: AND
25507: IFFALSE 25527
25509: GO 25511
25511: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25512: LD_INT 32
25514: PPUSH
25515: LD_OWVAR 2
25519: PPUSH
25520: LD_INT 0
25522: PPUSH
25523: CALL_OW 324
25527: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25528: LD_EXP 80
25532: PUSH
25533: LD_EXP 91
25537: AND
25538: IFFALSE 25719
25540: GO 25542
25542: DISABLE
25543: LD_INT 0
25545: PPUSH
25546: PPUSH
25547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25548: LD_ADDR_VAR 0 2
25552: PUSH
25553: LD_INT 22
25555: PUSH
25556: LD_OWVAR 2
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 33
25567: PUSH
25568: LD_INT 3
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PPUSH
25579: CALL_OW 69
25583: ST_TO_ADDR
// if not tmp then
25584: LD_VAR 0 2
25588: NOT
25589: IFFALSE 25593
// exit ;
25591: GO 25719
// side := 0 ;
25593: LD_ADDR_VAR 0 3
25597: PUSH
25598: LD_INT 0
25600: ST_TO_ADDR
// for i := 1 to 8 do
25601: LD_ADDR_VAR 0 1
25605: PUSH
25606: DOUBLE
25607: LD_INT 1
25609: DEC
25610: ST_TO_ADDR
25611: LD_INT 8
25613: PUSH
25614: FOR_TO
25615: IFFALSE 25663
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25617: LD_OWVAR 2
25621: PUSH
25622: LD_VAR 0 1
25626: NONEQUAL
25627: PUSH
25628: LD_OWVAR 2
25632: PPUSH
25633: LD_VAR 0 1
25637: PPUSH
25638: CALL_OW 81
25642: PUSH
25643: LD_INT 2
25645: EQUAL
25646: AND
25647: IFFALSE 25661
// begin side := i ;
25649: LD_ADDR_VAR 0 3
25653: PUSH
25654: LD_VAR 0 1
25658: ST_TO_ADDR
// break ;
25659: GO 25663
// end ;
25661: GO 25614
25663: POP
25664: POP
// if not side then
25665: LD_VAR 0 3
25669: NOT
25670: IFFALSE 25674
// exit ;
25672: GO 25719
// for i := 1 to tmp do
25674: LD_ADDR_VAR 0 1
25678: PUSH
25679: DOUBLE
25680: LD_INT 1
25682: DEC
25683: ST_TO_ADDR
25684: LD_VAR 0 2
25688: PUSH
25689: FOR_TO
25690: IFFALSE 25717
// if Prob ( 60 ) then
25692: LD_INT 60
25694: PPUSH
25695: CALL_OW 13
25699: IFFALSE 25715
// SetSide ( i , side ) ;
25701: LD_VAR 0 1
25705: PPUSH
25706: LD_VAR 0 3
25710: PPUSH
25711: CALL_OW 235
25715: GO 25689
25717: POP
25718: POP
// end ;
25719: PPOPN 3
25721: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25722: LD_EXP 80
25726: PUSH
25727: LD_EXP 93
25731: AND
25732: IFFALSE 25851
25734: GO 25736
25736: DISABLE
25737: LD_INT 0
25739: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25740: LD_ADDR_VAR 0 1
25744: PUSH
25745: LD_INT 22
25747: PUSH
25748: LD_OWVAR 2
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 21
25759: PUSH
25760: LD_INT 1
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 3
25769: PUSH
25770: LD_INT 23
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: LIST
25788: PPUSH
25789: CALL_OW 69
25793: PUSH
25794: FOR_IN
25795: IFFALSE 25849
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25797: LD_VAR 0 1
25801: PPUSH
25802: CALL_OW 257
25806: PUSH
25807: LD_INT 1
25809: PUSH
25810: LD_INT 2
25812: PUSH
25813: LD_INT 3
25815: PUSH
25816: LD_INT 4
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: IN
25825: IFFALSE 25847
// SetClass ( un , rand ( 1 , 4 ) ) ;
25827: LD_VAR 0 1
25831: PPUSH
25832: LD_INT 1
25834: PPUSH
25835: LD_INT 4
25837: PPUSH
25838: CALL_OW 12
25842: PPUSH
25843: CALL_OW 336
25847: GO 25794
25849: POP
25850: POP
// end ;
25851: PPOPN 1
25853: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25854: LD_EXP 80
25858: PUSH
25859: LD_EXP 92
25863: AND
25864: IFFALSE 25943
25866: GO 25868
25868: DISABLE
25869: LD_INT 0
25871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25872: LD_ADDR_VAR 0 1
25876: PUSH
25877: LD_INT 22
25879: PUSH
25880: LD_OWVAR 2
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 21
25891: PUSH
25892: LD_INT 3
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PPUSH
25903: CALL_OW 69
25907: ST_TO_ADDR
// if not tmp then
25908: LD_VAR 0 1
25912: NOT
25913: IFFALSE 25917
// exit ;
25915: GO 25943
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25917: LD_VAR 0 1
25921: PUSH
25922: LD_INT 1
25924: PPUSH
25925: LD_VAR 0 1
25929: PPUSH
25930: CALL_OW 12
25934: ARRAY
25935: PPUSH
25936: LD_INT 100
25938: PPUSH
25939: CALL_OW 234
// end ;
25943: PPOPN 1
25945: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25946: LD_EXP 80
25950: PUSH
25951: LD_EXP 94
25955: AND
25956: IFFALSE 26054
25958: GO 25960
25960: DISABLE
25961: LD_INT 0
25963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25964: LD_ADDR_VAR 0 1
25968: PUSH
25969: LD_INT 22
25971: PUSH
25972: LD_OWVAR 2
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 21
25983: PUSH
25984: LD_INT 1
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PPUSH
25995: CALL_OW 69
25999: ST_TO_ADDR
// if not tmp then
26000: LD_VAR 0 1
26004: NOT
26005: IFFALSE 26009
// exit ;
26007: GO 26054
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26009: LD_VAR 0 1
26013: PUSH
26014: LD_INT 1
26016: PPUSH
26017: LD_VAR 0 1
26021: PPUSH
26022: CALL_OW 12
26026: ARRAY
26027: PPUSH
26028: LD_INT 1
26030: PPUSH
26031: LD_INT 4
26033: PPUSH
26034: CALL_OW 12
26038: PPUSH
26039: LD_INT 3000
26041: PPUSH
26042: LD_INT 9000
26044: PPUSH
26045: CALL_OW 12
26049: PPUSH
26050: CALL_OW 492
// end ;
26054: PPOPN 1
26056: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26057: LD_EXP 80
26061: PUSH
26062: LD_EXP 95
26066: AND
26067: IFFALSE 26087
26069: GO 26071
26071: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26072: LD_INT 1
26074: PPUSH
26075: LD_OWVAR 2
26079: PPUSH
26080: LD_INT 0
26082: PPUSH
26083: CALL_OW 324
26087: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26088: LD_EXP 80
26092: PUSH
26093: LD_EXP 96
26097: AND
26098: IFFALSE 26181
26100: GO 26102
26102: DISABLE
26103: LD_INT 0
26105: PPUSH
26106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26107: LD_ADDR_VAR 0 2
26111: PUSH
26112: LD_INT 22
26114: PUSH
26115: LD_OWVAR 2
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 21
26126: PUSH
26127: LD_INT 3
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PPUSH
26138: CALL_OW 69
26142: ST_TO_ADDR
// if not tmp then
26143: LD_VAR 0 2
26147: NOT
26148: IFFALSE 26152
// exit ;
26150: GO 26181
// for i in tmp do
26152: LD_ADDR_VAR 0 1
26156: PUSH
26157: LD_VAR 0 2
26161: PUSH
26162: FOR_IN
26163: IFFALSE 26179
// SetBLevel ( i , 10 ) ;
26165: LD_VAR 0 1
26169: PPUSH
26170: LD_INT 10
26172: PPUSH
26173: CALL_OW 241
26177: GO 26162
26179: POP
26180: POP
// end ;
26181: PPOPN 2
26183: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26184: LD_EXP 80
26188: PUSH
26189: LD_EXP 97
26193: AND
26194: IFFALSE 26305
26196: GO 26198
26198: DISABLE
26199: LD_INT 0
26201: PPUSH
26202: PPUSH
26203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26204: LD_ADDR_VAR 0 3
26208: PUSH
26209: LD_INT 22
26211: PUSH
26212: LD_OWVAR 2
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 25
26223: PUSH
26224: LD_INT 1
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PPUSH
26235: CALL_OW 69
26239: ST_TO_ADDR
// if not tmp then
26240: LD_VAR 0 3
26244: NOT
26245: IFFALSE 26249
// exit ;
26247: GO 26305
// un := tmp [ rand ( 1 , tmp ) ] ;
26249: LD_ADDR_VAR 0 2
26253: PUSH
26254: LD_VAR 0 3
26258: PUSH
26259: LD_INT 1
26261: PPUSH
26262: LD_VAR 0 3
26266: PPUSH
26267: CALL_OW 12
26271: ARRAY
26272: ST_TO_ADDR
// if Crawls ( un ) then
26273: LD_VAR 0 2
26277: PPUSH
26278: CALL_OW 318
26282: IFFALSE 26293
// ComWalk ( un ) ;
26284: LD_VAR 0 2
26288: PPUSH
26289: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26293: LD_VAR 0 2
26297: PPUSH
26298: LD_INT 5
26300: PPUSH
26301: CALL_OW 336
// end ;
26305: PPOPN 3
26307: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26308: LD_EXP 80
26312: PUSH
26313: LD_EXP 98
26317: AND
26318: PUSH
26319: LD_OWVAR 67
26323: PUSH
26324: LD_INT 4
26326: LESS
26327: AND
26328: IFFALSE 26347
26330: GO 26332
26332: DISABLE
// begin Difficulty := Difficulty + 1 ;
26333: LD_ADDR_OWVAR 67
26337: PUSH
26338: LD_OWVAR 67
26342: PUSH
26343: LD_INT 1
26345: PLUS
26346: ST_TO_ADDR
// end ;
26347: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26348: LD_EXP 80
26352: PUSH
26353: LD_EXP 99
26357: AND
26358: IFFALSE 26461
26360: GO 26362
26362: DISABLE
26363: LD_INT 0
26365: PPUSH
// begin for i := 1 to 5 do
26366: LD_ADDR_VAR 0 1
26370: PUSH
26371: DOUBLE
26372: LD_INT 1
26374: DEC
26375: ST_TO_ADDR
26376: LD_INT 5
26378: PUSH
26379: FOR_TO
26380: IFFALSE 26459
// begin uc_nation := nation_nature ;
26382: LD_ADDR_OWVAR 21
26386: PUSH
26387: LD_INT 0
26389: ST_TO_ADDR
// uc_side := 0 ;
26390: LD_ADDR_OWVAR 20
26394: PUSH
26395: LD_INT 0
26397: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26398: LD_ADDR_OWVAR 29
26402: PUSH
26403: LD_INT 12
26405: PUSH
26406: LD_INT 12
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: ST_TO_ADDR
// hc_agressivity := 20 ;
26413: LD_ADDR_OWVAR 35
26417: PUSH
26418: LD_INT 20
26420: ST_TO_ADDR
// hc_class := class_tiger ;
26421: LD_ADDR_OWVAR 28
26425: PUSH
26426: LD_INT 14
26428: ST_TO_ADDR
// hc_gallery :=  ;
26429: LD_ADDR_OWVAR 33
26433: PUSH
26434: LD_STRING 
26436: ST_TO_ADDR
// hc_name :=  ;
26437: LD_ADDR_OWVAR 26
26441: PUSH
26442: LD_STRING 
26444: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26445: CALL_OW 44
26449: PPUSH
26450: LD_INT 0
26452: PPUSH
26453: CALL_OW 51
// end ;
26457: GO 26379
26459: POP
26460: POP
// end ;
26461: PPOPN 1
26463: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26464: LD_EXP 80
26468: PUSH
26469: LD_EXP 100
26473: AND
26474: IFFALSE 26483
26476: GO 26478
26478: DISABLE
// StreamSibBomb ;
26479: CALL 26484 0 0
26483: END
// export function StreamSibBomb ; var i , x , y ; begin
26484: LD_INT 0
26486: PPUSH
26487: PPUSH
26488: PPUSH
26489: PPUSH
// result := false ;
26490: LD_ADDR_VAR 0 1
26494: PUSH
26495: LD_INT 0
26497: ST_TO_ADDR
// for i := 1 to 16 do
26498: LD_ADDR_VAR 0 2
26502: PUSH
26503: DOUBLE
26504: LD_INT 1
26506: DEC
26507: ST_TO_ADDR
26508: LD_INT 16
26510: PUSH
26511: FOR_TO
26512: IFFALSE 26711
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26514: LD_ADDR_VAR 0 3
26518: PUSH
26519: LD_INT 10
26521: PUSH
26522: LD_INT 20
26524: PUSH
26525: LD_INT 30
26527: PUSH
26528: LD_INT 40
26530: PUSH
26531: LD_INT 50
26533: PUSH
26534: LD_INT 60
26536: PUSH
26537: LD_INT 70
26539: PUSH
26540: LD_INT 80
26542: PUSH
26543: LD_INT 90
26545: PUSH
26546: LD_INT 100
26548: PUSH
26549: LD_INT 110
26551: PUSH
26552: LD_INT 120
26554: PUSH
26555: LD_INT 130
26557: PUSH
26558: LD_INT 140
26560: PUSH
26561: LD_INT 150
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 1
26583: PPUSH
26584: LD_INT 15
26586: PPUSH
26587: CALL_OW 12
26591: ARRAY
26592: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26593: LD_ADDR_VAR 0 4
26597: PUSH
26598: LD_INT 10
26600: PUSH
26601: LD_INT 20
26603: PUSH
26604: LD_INT 30
26606: PUSH
26607: LD_INT 40
26609: PUSH
26610: LD_INT 50
26612: PUSH
26613: LD_INT 60
26615: PUSH
26616: LD_INT 70
26618: PUSH
26619: LD_INT 80
26621: PUSH
26622: LD_INT 90
26624: PUSH
26625: LD_INT 100
26627: PUSH
26628: LD_INT 110
26630: PUSH
26631: LD_INT 120
26633: PUSH
26634: LD_INT 130
26636: PUSH
26637: LD_INT 140
26639: PUSH
26640: LD_INT 150
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 1
26662: PPUSH
26663: LD_INT 15
26665: PPUSH
26666: CALL_OW 12
26670: ARRAY
26671: ST_TO_ADDR
// if ValidHex ( x , y ) then
26672: LD_VAR 0 3
26676: PPUSH
26677: LD_VAR 0 4
26681: PPUSH
26682: CALL_OW 488
26686: IFFALSE 26709
// begin result := [ x , y ] ;
26688: LD_ADDR_VAR 0 1
26692: PUSH
26693: LD_VAR 0 3
26697: PUSH
26698: LD_VAR 0 4
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: ST_TO_ADDR
// break ;
26707: GO 26711
// end ; end ;
26709: GO 26511
26711: POP
26712: POP
// if result then
26713: LD_VAR 0 1
26717: IFFALSE 26777
// begin ToLua ( playSibBomb() ) ;
26719: LD_STRING playSibBomb()
26721: PPUSH
26722: CALL_OW 559
// wait ( 0 0$14 ) ;
26726: LD_INT 490
26728: PPUSH
26729: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26733: LD_VAR 0 1
26737: PUSH
26738: LD_INT 1
26740: ARRAY
26741: PPUSH
26742: LD_VAR 0 1
26746: PUSH
26747: LD_INT 2
26749: ARRAY
26750: PPUSH
26751: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26755: LD_VAR 0 1
26759: PUSH
26760: LD_INT 1
26762: ARRAY
26763: PPUSH
26764: LD_VAR 0 1
26768: PUSH
26769: LD_INT 2
26771: ARRAY
26772: PPUSH
26773: CALL_OW 429
// end ; end ;
26777: LD_VAR 0 1
26781: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26782: LD_EXP 80
26786: PUSH
26787: LD_EXP 102
26791: AND
26792: IFFALSE 26804
26794: GO 26796
26796: DISABLE
// YouLost (  ) ;
26797: LD_STRING 
26799: PPUSH
26800: CALL_OW 104
26804: END
// every 0 0$1 trigger StreamModeActive and sFog do
26805: LD_EXP 80
26809: PUSH
26810: LD_EXP 101
26814: AND
26815: IFFALSE 26829
26817: GO 26819
26819: DISABLE
// FogOff ( your_side ) ;
26820: LD_OWVAR 2
26824: PPUSH
26825: CALL_OW 344
26829: END
// every 0 0$1 trigger StreamModeActive and sSun do
26830: LD_EXP 80
26834: PUSH
26835: LD_EXP 103
26839: AND
26840: IFFALSE 26868
26842: GO 26844
26844: DISABLE
// begin solar_recharge_percent := 0 ;
26845: LD_ADDR_OWVAR 79
26849: PUSH
26850: LD_INT 0
26852: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26853: LD_INT 10500
26855: PPUSH
26856: CALL_OW 67
// solar_recharge_percent := 100 ;
26860: LD_ADDR_OWVAR 79
26864: PUSH
26865: LD_INT 100
26867: ST_TO_ADDR
// end ;
26868: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26869: LD_EXP 80
26873: PUSH
26874: LD_EXP 104
26878: AND
26879: IFFALSE 27118
26881: GO 26883
26883: DISABLE
26884: LD_INT 0
26886: PPUSH
26887: PPUSH
26888: PPUSH
// begin tmp := [ ] ;
26889: LD_ADDR_VAR 0 3
26893: PUSH
26894: EMPTY
26895: ST_TO_ADDR
// for i := 1 to 6 do
26896: LD_ADDR_VAR 0 1
26900: PUSH
26901: DOUBLE
26902: LD_INT 1
26904: DEC
26905: ST_TO_ADDR
26906: LD_INT 6
26908: PUSH
26909: FOR_TO
26910: IFFALSE 27015
// begin uc_nation := nation_nature ;
26912: LD_ADDR_OWVAR 21
26916: PUSH
26917: LD_INT 0
26919: ST_TO_ADDR
// uc_side := 0 ;
26920: LD_ADDR_OWVAR 20
26924: PUSH
26925: LD_INT 0
26927: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26928: LD_ADDR_OWVAR 29
26932: PUSH
26933: LD_INT 12
26935: PUSH
26936: LD_INT 12
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: ST_TO_ADDR
// hc_agressivity := 20 ;
26943: LD_ADDR_OWVAR 35
26947: PUSH
26948: LD_INT 20
26950: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26951: LD_ADDR_OWVAR 28
26955: PUSH
26956: LD_INT 17
26958: ST_TO_ADDR
// hc_gallery :=  ;
26959: LD_ADDR_OWVAR 33
26963: PUSH
26964: LD_STRING 
26966: ST_TO_ADDR
// hc_name :=  ;
26967: LD_ADDR_OWVAR 26
26971: PUSH
26972: LD_STRING 
26974: ST_TO_ADDR
// un := CreateHuman ;
26975: LD_ADDR_VAR 0 2
26979: PUSH
26980: CALL_OW 44
26984: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26985: LD_VAR 0 2
26989: PPUSH
26990: LD_INT 1
26992: PPUSH
26993: CALL_OW 51
// tmp := tmp ^ un ;
26997: LD_ADDR_VAR 0 3
27001: PUSH
27002: LD_VAR 0 3
27006: PUSH
27007: LD_VAR 0 2
27011: ADD
27012: ST_TO_ADDR
// end ;
27013: GO 26909
27015: POP
27016: POP
// repeat wait ( 0 0$1 ) ;
27017: LD_INT 35
27019: PPUSH
27020: CALL_OW 67
// for un in tmp do
27024: LD_ADDR_VAR 0 2
27028: PUSH
27029: LD_VAR 0 3
27033: PUSH
27034: FOR_IN
27035: IFFALSE 27109
// begin if IsDead ( un ) then
27037: LD_VAR 0 2
27041: PPUSH
27042: CALL_OW 301
27046: IFFALSE 27066
// begin tmp := tmp diff un ;
27048: LD_ADDR_VAR 0 3
27052: PUSH
27053: LD_VAR 0 3
27057: PUSH
27058: LD_VAR 0 2
27062: DIFF
27063: ST_TO_ADDR
// continue ;
27064: GO 27034
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27066: LD_VAR 0 2
27070: PPUSH
27071: LD_INT 3
27073: PUSH
27074: LD_INT 22
27076: PUSH
27077: LD_INT 0
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PPUSH
27088: CALL_OW 69
27092: PPUSH
27093: LD_VAR 0 2
27097: PPUSH
27098: CALL_OW 74
27102: PPUSH
27103: CALL_OW 115
// end ;
27107: GO 27034
27109: POP
27110: POP
// until not tmp ;
27111: LD_VAR 0 3
27115: NOT
27116: IFFALSE 27017
// end ;
27118: PPOPN 3
27120: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27121: LD_EXP 80
27125: PUSH
27126: LD_EXP 105
27130: AND
27131: IFFALSE 27185
27133: GO 27135
27135: DISABLE
// begin ToLua ( displayTroll(); ) ;
27136: LD_STRING displayTroll();
27138: PPUSH
27139: CALL_OW 559
// wait ( 3 3$00 ) ;
27143: LD_INT 6300
27145: PPUSH
27146: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27150: LD_STRING hideTroll();
27152: PPUSH
27153: CALL_OW 559
// wait ( 1 1$00 ) ;
27157: LD_INT 2100
27159: PPUSH
27160: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27164: LD_STRING displayTroll();
27166: PPUSH
27167: CALL_OW 559
// wait ( 1 1$00 ) ;
27171: LD_INT 2100
27173: PPUSH
27174: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27178: LD_STRING hideTroll();
27180: PPUSH
27181: CALL_OW 559
// end ;
27185: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27186: LD_EXP 80
27190: PUSH
27191: LD_EXP 106
27195: AND
27196: IFFALSE 27259
27198: GO 27200
27200: DISABLE
27201: LD_INT 0
27203: PPUSH
// begin p := 0 ;
27204: LD_ADDR_VAR 0 1
27208: PUSH
27209: LD_INT 0
27211: ST_TO_ADDR
// repeat game_speed := 1 ;
27212: LD_ADDR_OWVAR 65
27216: PUSH
27217: LD_INT 1
27219: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27220: LD_INT 35
27222: PPUSH
27223: CALL_OW 67
// p := p + 1 ;
27227: LD_ADDR_VAR 0 1
27231: PUSH
27232: LD_VAR 0 1
27236: PUSH
27237: LD_INT 1
27239: PLUS
27240: ST_TO_ADDR
// until p >= 60 ;
27241: LD_VAR 0 1
27245: PUSH
27246: LD_INT 60
27248: GREATEREQUAL
27249: IFFALSE 27212
// game_speed := 4 ;
27251: LD_ADDR_OWVAR 65
27255: PUSH
27256: LD_INT 4
27258: ST_TO_ADDR
// end ;
27259: PPOPN 1
27261: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27262: LD_EXP 80
27266: PUSH
27267: LD_EXP 107
27271: AND
27272: IFFALSE 27418
27274: GO 27276
27276: DISABLE
27277: LD_INT 0
27279: PPUSH
27280: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27281: LD_ADDR_VAR 0 1
27285: PUSH
27286: LD_INT 22
27288: PUSH
27289: LD_OWVAR 2
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 2
27300: PUSH
27301: LD_INT 30
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 30
27313: PUSH
27314: LD_INT 1
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: LIST
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PPUSH
27330: CALL_OW 69
27334: ST_TO_ADDR
// if not depot then
27335: LD_VAR 0 1
27339: NOT
27340: IFFALSE 27344
// exit ;
27342: GO 27418
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27344: LD_ADDR_VAR 0 2
27348: PUSH
27349: LD_VAR 0 1
27353: PUSH
27354: LD_INT 1
27356: PPUSH
27357: LD_VAR 0 1
27361: PPUSH
27362: CALL_OW 12
27366: ARRAY
27367: PPUSH
27368: CALL_OW 274
27372: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27373: LD_VAR 0 2
27377: PPUSH
27378: LD_INT 1
27380: PPUSH
27381: LD_INT 0
27383: PPUSH
27384: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27388: LD_VAR 0 2
27392: PPUSH
27393: LD_INT 2
27395: PPUSH
27396: LD_INT 0
27398: PPUSH
27399: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27403: LD_VAR 0 2
27407: PPUSH
27408: LD_INT 3
27410: PPUSH
27411: LD_INT 0
27413: PPUSH
27414: CALL_OW 277
// end ;
27418: PPOPN 2
27420: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27421: LD_EXP 80
27425: PUSH
27426: LD_EXP 108
27430: AND
27431: IFFALSE 27528
27433: GO 27435
27435: DISABLE
27436: LD_INT 0
27438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27439: LD_ADDR_VAR 0 1
27443: PUSH
27444: LD_INT 22
27446: PUSH
27447: LD_OWVAR 2
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 21
27458: PUSH
27459: LD_INT 1
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 3
27468: PUSH
27469: LD_INT 23
27471: PUSH
27472: LD_INT 0
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: LIST
27487: PPUSH
27488: CALL_OW 69
27492: ST_TO_ADDR
// if not tmp then
27493: LD_VAR 0 1
27497: NOT
27498: IFFALSE 27502
// exit ;
27500: GO 27528
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27502: LD_VAR 0 1
27506: PUSH
27507: LD_INT 1
27509: PPUSH
27510: LD_VAR 0 1
27514: PPUSH
27515: CALL_OW 12
27519: ARRAY
27520: PPUSH
27521: LD_INT 200
27523: PPUSH
27524: CALL_OW 234
// end ;
27528: PPOPN 1
27530: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27531: LD_EXP 80
27535: PUSH
27536: LD_EXP 109
27540: AND
27541: IFFALSE 27620
27543: GO 27545
27545: DISABLE
27546: LD_INT 0
27548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27549: LD_ADDR_VAR 0 1
27553: PUSH
27554: LD_INT 22
27556: PUSH
27557: LD_OWVAR 2
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 21
27568: PUSH
27569: LD_INT 2
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PPUSH
27580: CALL_OW 69
27584: ST_TO_ADDR
// if not tmp then
27585: LD_VAR 0 1
27589: NOT
27590: IFFALSE 27594
// exit ;
27592: GO 27620
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27594: LD_VAR 0 1
27598: PUSH
27599: LD_INT 1
27601: PPUSH
27602: LD_VAR 0 1
27606: PPUSH
27607: CALL_OW 12
27611: ARRAY
27612: PPUSH
27613: LD_INT 60
27615: PPUSH
27616: CALL_OW 234
// end ;
27620: PPOPN 1
27622: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27623: LD_EXP 80
27627: PUSH
27628: LD_EXP 110
27632: AND
27633: IFFALSE 27732
27635: GO 27637
27637: DISABLE
27638: LD_INT 0
27640: PPUSH
27641: PPUSH
// begin enable ;
27642: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27643: LD_ADDR_VAR 0 1
27647: PUSH
27648: LD_INT 22
27650: PUSH
27651: LD_OWVAR 2
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 61
27662: PUSH
27663: EMPTY
27664: LIST
27665: PUSH
27666: LD_INT 33
27668: PUSH
27669: LD_INT 2
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: LIST
27680: PPUSH
27681: CALL_OW 69
27685: ST_TO_ADDR
// if not tmp then
27686: LD_VAR 0 1
27690: NOT
27691: IFFALSE 27695
// exit ;
27693: GO 27732
// for i in tmp do
27695: LD_ADDR_VAR 0 2
27699: PUSH
27700: LD_VAR 0 1
27704: PUSH
27705: FOR_IN
27706: IFFALSE 27730
// if IsControledBy ( i ) then
27708: LD_VAR 0 2
27712: PPUSH
27713: CALL_OW 312
27717: IFFALSE 27728
// ComUnlink ( i ) ;
27719: LD_VAR 0 2
27723: PPUSH
27724: CALL_OW 136
27728: GO 27705
27730: POP
27731: POP
// end ;
27732: PPOPN 2
27734: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27735: LD_EXP 80
27739: PUSH
27740: LD_EXP 111
27744: AND
27745: IFFALSE 27885
27747: GO 27749
27749: DISABLE
27750: LD_INT 0
27752: PPUSH
27753: PPUSH
// begin ToLua ( displayPowell(); ) ;
27754: LD_STRING displayPowell();
27756: PPUSH
27757: CALL_OW 559
// uc_side := 0 ;
27761: LD_ADDR_OWVAR 20
27765: PUSH
27766: LD_INT 0
27768: ST_TO_ADDR
// uc_nation := 2 ;
27769: LD_ADDR_OWVAR 21
27773: PUSH
27774: LD_INT 2
27776: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27777: LD_ADDR_OWVAR 37
27781: PUSH
27782: LD_INT 14
27784: ST_TO_ADDR
// vc_engine := engine_siberite ;
27785: LD_ADDR_OWVAR 39
27789: PUSH
27790: LD_INT 3
27792: ST_TO_ADDR
// vc_control := control_apeman ;
27793: LD_ADDR_OWVAR 38
27797: PUSH
27798: LD_INT 5
27800: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27801: LD_ADDR_OWVAR 40
27805: PUSH
27806: LD_INT 29
27808: ST_TO_ADDR
// un := CreateVehicle ;
27809: LD_ADDR_VAR 0 2
27813: PUSH
27814: CALL_OW 45
27818: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27819: LD_VAR 0 2
27823: PPUSH
27824: LD_INT 1
27826: PPUSH
27827: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27831: LD_INT 35
27833: PPUSH
27834: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27838: LD_VAR 0 2
27842: PPUSH
27843: LD_INT 22
27845: PUSH
27846: LD_OWVAR 2
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PPUSH
27855: CALL_OW 69
27859: PPUSH
27860: LD_VAR 0 2
27864: PPUSH
27865: CALL_OW 74
27869: PPUSH
27870: CALL_OW 115
// until IsDead ( un ) ;
27874: LD_VAR 0 2
27878: PPUSH
27879: CALL_OW 301
27883: IFFALSE 27831
// end ;
27885: PPOPN 2
27887: END
// every 0 0$1 trigger StreamModeActive and sStu do
27888: LD_EXP 80
27892: PUSH
27893: LD_EXP 119
27897: AND
27898: IFFALSE 27914
27900: GO 27902
27902: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27903: LD_STRING displayStucuk();
27905: PPUSH
27906: CALL_OW 559
// ResetFog ;
27910: CALL_OW 335
// end ;
27914: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27915: LD_EXP 80
27919: PUSH
27920: LD_EXP 112
27924: AND
27925: IFFALSE 28066
27927: GO 27929
27929: DISABLE
27930: LD_INT 0
27932: PPUSH
27933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27934: LD_ADDR_VAR 0 2
27938: PUSH
27939: LD_INT 22
27941: PUSH
27942: LD_OWVAR 2
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 21
27953: PUSH
27954: LD_INT 1
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PPUSH
27965: CALL_OW 69
27969: ST_TO_ADDR
// if not tmp then
27970: LD_VAR 0 2
27974: NOT
27975: IFFALSE 27979
// exit ;
27977: GO 28066
// un := tmp [ rand ( 1 , tmp ) ] ;
27979: LD_ADDR_VAR 0 1
27983: PUSH
27984: LD_VAR 0 2
27988: PUSH
27989: LD_INT 1
27991: PPUSH
27992: LD_VAR 0 2
27996: PPUSH
27997: CALL_OW 12
28001: ARRAY
28002: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28003: LD_VAR 0 1
28007: PPUSH
28008: LD_INT 0
28010: PPUSH
28011: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28015: LD_VAR 0 1
28019: PPUSH
28020: LD_OWVAR 3
28024: PUSH
28025: LD_VAR 0 1
28029: DIFF
28030: PPUSH
28031: LD_VAR 0 1
28035: PPUSH
28036: CALL_OW 74
28040: PPUSH
28041: CALL_OW 115
// wait ( 0 0$20 ) ;
28045: LD_INT 700
28047: PPUSH
28048: CALL_OW 67
// SetSide ( un , your_side ) ;
28052: LD_VAR 0 1
28056: PPUSH
28057: LD_OWVAR 2
28061: PPUSH
28062: CALL_OW 235
// end ;
28066: PPOPN 2
28068: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28069: LD_EXP 80
28073: PUSH
28074: LD_EXP 113
28078: AND
28079: IFFALSE 28185
28081: GO 28083
28083: DISABLE
28084: LD_INT 0
28086: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28087: LD_ADDR_VAR 0 1
28091: PUSH
28092: LD_INT 22
28094: PUSH
28095: LD_OWVAR 2
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 2
28106: PUSH
28107: LD_INT 30
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 30
28119: PUSH
28120: LD_INT 1
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: LIST
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PPUSH
28136: CALL_OW 69
28140: ST_TO_ADDR
// if not depot then
28141: LD_VAR 0 1
28145: NOT
28146: IFFALSE 28150
// exit ;
28148: GO 28185
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28150: LD_VAR 0 1
28154: PUSH
28155: LD_INT 1
28157: ARRAY
28158: PPUSH
28159: CALL_OW 250
28163: PPUSH
28164: LD_VAR 0 1
28168: PUSH
28169: LD_INT 1
28171: ARRAY
28172: PPUSH
28173: CALL_OW 251
28177: PPUSH
28178: LD_INT 70
28180: PPUSH
28181: CALL_OW 495
// end ;
28185: PPOPN 1
28187: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28188: LD_EXP 80
28192: PUSH
28193: LD_EXP 114
28197: AND
28198: IFFALSE 28409
28200: GO 28202
28202: DISABLE
28203: LD_INT 0
28205: PPUSH
28206: PPUSH
28207: PPUSH
28208: PPUSH
28209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28210: LD_ADDR_VAR 0 5
28214: PUSH
28215: LD_INT 22
28217: PUSH
28218: LD_OWVAR 2
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 21
28229: PUSH
28230: LD_INT 1
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PPUSH
28241: CALL_OW 69
28245: ST_TO_ADDR
// if not tmp then
28246: LD_VAR 0 5
28250: NOT
28251: IFFALSE 28255
// exit ;
28253: GO 28409
// for i in tmp do
28255: LD_ADDR_VAR 0 1
28259: PUSH
28260: LD_VAR 0 5
28264: PUSH
28265: FOR_IN
28266: IFFALSE 28407
// begin d := rand ( 0 , 5 ) ;
28268: LD_ADDR_VAR 0 4
28272: PUSH
28273: LD_INT 0
28275: PPUSH
28276: LD_INT 5
28278: PPUSH
28279: CALL_OW 12
28283: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28284: LD_ADDR_VAR 0 2
28288: PUSH
28289: LD_VAR 0 1
28293: PPUSH
28294: CALL_OW 250
28298: PPUSH
28299: LD_VAR 0 4
28303: PPUSH
28304: LD_INT 3
28306: PPUSH
28307: LD_INT 12
28309: PPUSH
28310: CALL_OW 12
28314: PPUSH
28315: CALL_OW 272
28319: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28320: LD_ADDR_VAR 0 3
28324: PUSH
28325: LD_VAR 0 1
28329: PPUSH
28330: CALL_OW 251
28334: PPUSH
28335: LD_VAR 0 4
28339: PPUSH
28340: LD_INT 3
28342: PPUSH
28343: LD_INT 12
28345: PPUSH
28346: CALL_OW 12
28350: PPUSH
28351: CALL_OW 273
28355: ST_TO_ADDR
// if ValidHex ( x , y ) then
28356: LD_VAR 0 2
28360: PPUSH
28361: LD_VAR 0 3
28365: PPUSH
28366: CALL_OW 488
28370: IFFALSE 28405
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28372: LD_VAR 0 1
28376: PPUSH
28377: LD_VAR 0 2
28381: PPUSH
28382: LD_VAR 0 3
28386: PPUSH
28387: LD_INT 3
28389: PPUSH
28390: LD_INT 6
28392: PPUSH
28393: CALL_OW 12
28397: PPUSH
28398: LD_INT 1
28400: PPUSH
28401: CALL_OW 483
// end ;
28405: GO 28265
28407: POP
28408: POP
// end ;
28409: PPOPN 5
28411: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28412: LD_EXP 80
28416: PUSH
28417: LD_EXP 115
28421: AND
28422: IFFALSE 28516
28424: GO 28426
28426: DISABLE
28427: LD_INT 0
28429: PPUSH
28430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28431: LD_ADDR_VAR 0 2
28435: PUSH
28436: LD_INT 22
28438: PUSH
28439: LD_OWVAR 2
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 32
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 21
28460: PUSH
28461: LD_INT 2
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: LIST
28472: PPUSH
28473: CALL_OW 69
28477: ST_TO_ADDR
// if not tmp then
28478: LD_VAR 0 2
28482: NOT
28483: IFFALSE 28487
// exit ;
28485: GO 28516
// for i in tmp do
28487: LD_ADDR_VAR 0 1
28491: PUSH
28492: LD_VAR 0 2
28496: PUSH
28497: FOR_IN
28498: IFFALSE 28514
// SetFuel ( i , 0 ) ;
28500: LD_VAR 0 1
28504: PPUSH
28505: LD_INT 0
28507: PPUSH
28508: CALL_OW 240
28512: GO 28497
28514: POP
28515: POP
// end ;
28516: PPOPN 2
28518: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28519: LD_EXP 80
28523: PUSH
28524: LD_EXP 116
28528: AND
28529: IFFALSE 28595
28531: GO 28533
28533: DISABLE
28534: LD_INT 0
28536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28537: LD_ADDR_VAR 0 1
28541: PUSH
28542: LD_INT 22
28544: PUSH
28545: LD_OWVAR 2
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 30
28556: PUSH
28557: LD_INT 29
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PPUSH
28568: CALL_OW 69
28572: ST_TO_ADDR
// if not tmp then
28573: LD_VAR 0 1
28577: NOT
28578: IFFALSE 28582
// exit ;
28580: GO 28595
// DestroyUnit ( tmp [ 1 ] ) ;
28582: LD_VAR 0 1
28586: PUSH
28587: LD_INT 1
28589: ARRAY
28590: PPUSH
28591: CALL_OW 65
// end ;
28595: PPOPN 1
28597: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28598: LD_EXP 80
28602: PUSH
28603: LD_EXP 118
28607: AND
28608: IFFALSE 28737
28610: GO 28612
28612: DISABLE
28613: LD_INT 0
28615: PPUSH
// begin uc_side := 0 ;
28616: LD_ADDR_OWVAR 20
28620: PUSH
28621: LD_INT 0
28623: ST_TO_ADDR
// uc_nation := nation_arabian ;
28624: LD_ADDR_OWVAR 21
28628: PUSH
28629: LD_INT 2
28631: ST_TO_ADDR
// hc_gallery :=  ;
28632: LD_ADDR_OWVAR 33
28636: PUSH
28637: LD_STRING 
28639: ST_TO_ADDR
// hc_name :=  ;
28640: LD_ADDR_OWVAR 26
28644: PUSH
28645: LD_STRING 
28647: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28648: LD_INT 1
28650: PPUSH
28651: LD_INT 11
28653: PPUSH
28654: LD_INT 10
28656: PPUSH
28657: CALL_OW 380
// un := CreateHuman ;
28661: LD_ADDR_VAR 0 1
28665: PUSH
28666: CALL_OW 44
28670: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28671: LD_VAR 0 1
28675: PPUSH
28676: LD_INT 1
28678: PPUSH
28679: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28683: LD_INT 35
28685: PPUSH
28686: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28690: LD_VAR 0 1
28694: PPUSH
28695: LD_INT 22
28697: PUSH
28698: LD_OWVAR 2
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PPUSH
28707: CALL_OW 69
28711: PPUSH
28712: LD_VAR 0 1
28716: PPUSH
28717: CALL_OW 74
28721: PPUSH
28722: CALL_OW 115
// until IsDead ( un ) ;
28726: LD_VAR 0 1
28730: PPUSH
28731: CALL_OW 301
28735: IFFALSE 28683
// end ;
28737: PPOPN 1
28739: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28740: LD_EXP 80
28744: PUSH
28745: LD_EXP 120
28749: AND
28750: IFFALSE 28762
28752: GO 28754
28754: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28755: LD_STRING earthquake(getX(game), 0, 32)
28757: PPUSH
28758: CALL_OW 559
28762: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28763: LD_EXP 80
28767: PUSH
28768: LD_EXP 121
28772: AND
28773: IFFALSE 28864
28775: GO 28777
28777: DISABLE
28778: LD_INT 0
28780: PPUSH
// begin enable ;
28781: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28782: LD_ADDR_VAR 0 1
28786: PUSH
28787: LD_INT 22
28789: PUSH
28790: LD_OWVAR 2
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 21
28801: PUSH
28802: LD_INT 2
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 33
28811: PUSH
28812: LD_INT 3
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: LIST
28823: PPUSH
28824: CALL_OW 69
28828: ST_TO_ADDR
// if not tmp then
28829: LD_VAR 0 1
28833: NOT
28834: IFFALSE 28838
// exit ;
28836: GO 28864
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28838: LD_VAR 0 1
28842: PUSH
28843: LD_INT 1
28845: PPUSH
28846: LD_VAR 0 1
28850: PPUSH
28851: CALL_OW 12
28855: ARRAY
28856: PPUSH
28857: LD_INT 1
28859: PPUSH
28860: CALL_OW 234
// end ;
28864: PPOPN 1
28866: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28867: LD_EXP 80
28871: PUSH
28872: LD_EXP 122
28876: AND
28877: IFFALSE 29018
28879: GO 28881
28881: DISABLE
28882: LD_INT 0
28884: PPUSH
28885: PPUSH
28886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28887: LD_ADDR_VAR 0 3
28891: PUSH
28892: LD_INT 22
28894: PUSH
28895: LD_OWVAR 2
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 25
28906: PUSH
28907: LD_INT 1
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PPUSH
28918: CALL_OW 69
28922: ST_TO_ADDR
// if not tmp then
28923: LD_VAR 0 3
28927: NOT
28928: IFFALSE 28932
// exit ;
28930: GO 29018
// un := tmp [ rand ( 1 , tmp ) ] ;
28932: LD_ADDR_VAR 0 2
28936: PUSH
28937: LD_VAR 0 3
28941: PUSH
28942: LD_INT 1
28944: PPUSH
28945: LD_VAR 0 3
28949: PPUSH
28950: CALL_OW 12
28954: ARRAY
28955: ST_TO_ADDR
// if Crawls ( un ) then
28956: LD_VAR 0 2
28960: PPUSH
28961: CALL_OW 318
28965: IFFALSE 28976
// ComWalk ( un ) ;
28967: LD_VAR 0 2
28971: PPUSH
28972: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28976: LD_VAR 0 2
28980: PPUSH
28981: LD_INT 9
28983: PPUSH
28984: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28988: LD_INT 28
28990: PPUSH
28991: LD_OWVAR 2
28995: PPUSH
28996: LD_INT 2
28998: PPUSH
28999: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29003: LD_INT 29
29005: PPUSH
29006: LD_OWVAR 2
29010: PPUSH
29011: LD_INT 2
29013: PPUSH
29014: CALL_OW 322
// end ;
29018: PPOPN 3
29020: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29021: LD_EXP 80
29025: PUSH
29026: LD_EXP 123
29030: AND
29031: IFFALSE 29142
29033: GO 29035
29035: DISABLE
29036: LD_INT 0
29038: PPUSH
29039: PPUSH
29040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29041: LD_ADDR_VAR 0 3
29045: PUSH
29046: LD_INT 22
29048: PUSH
29049: LD_OWVAR 2
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 25
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PPUSH
29072: CALL_OW 69
29076: ST_TO_ADDR
// if not tmp then
29077: LD_VAR 0 3
29081: NOT
29082: IFFALSE 29086
// exit ;
29084: GO 29142
// un := tmp [ rand ( 1 , tmp ) ] ;
29086: LD_ADDR_VAR 0 2
29090: PUSH
29091: LD_VAR 0 3
29095: PUSH
29096: LD_INT 1
29098: PPUSH
29099: LD_VAR 0 3
29103: PPUSH
29104: CALL_OW 12
29108: ARRAY
29109: ST_TO_ADDR
// if Crawls ( un ) then
29110: LD_VAR 0 2
29114: PPUSH
29115: CALL_OW 318
29119: IFFALSE 29130
// ComWalk ( un ) ;
29121: LD_VAR 0 2
29125: PPUSH
29126: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29130: LD_VAR 0 2
29134: PPUSH
29135: LD_INT 8
29137: PPUSH
29138: CALL_OW 336
// end ;
29142: PPOPN 3
29144: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29145: LD_EXP 80
29149: PUSH
29150: LD_EXP 124
29154: AND
29155: IFFALSE 29299
29157: GO 29159
29159: DISABLE
29160: LD_INT 0
29162: PPUSH
29163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29164: LD_ADDR_VAR 0 2
29168: PUSH
29169: LD_INT 22
29171: PUSH
29172: LD_OWVAR 2
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 21
29183: PUSH
29184: LD_INT 2
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 2
29193: PUSH
29194: LD_INT 34
29196: PUSH
29197: LD_INT 12
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 34
29206: PUSH
29207: LD_INT 51
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 34
29216: PUSH
29217: LD_INT 32
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: LIST
29234: PPUSH
29235: CALL_OW 69
29239: ST_TO_ADDR
// if not tmp then
29240: LD_VAR 0 2
29244: NOT
29245: IFFALSE 29249
// exit ;
29247: GO 29299
// for i in tmp do
29249: LD_ADDR_VAR 0 1
29253: PUSH
29254: LD_VAR 0 2
29258: PUSH
29259: FOR_IN
29260: IFFALSE 29297
// if GetCargo ( i , mat_artifact ) = 0 then
29262: LD_VAR 0 1
29266: PPUSH
29267: LD_INT 4
29269: PPUSH
29270: CALL_OW 289
29274: PUSH
29275: LD_INT 0
29277: EQUAL
29278: IFFALSE 29295
// SetCargo ( i , mat_siberit , 100 ) ;
29280: LD_VAR 0 1
29284: PPUSH
29285: LD_INT 3
29287: PPUSH
29288: LD_INT 100
29290: PPUSH
29291: CALL_OW 290
29295: GO 29259
29297: POP
29298: POP
// end ;
29299: PPOPN 2
29301: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29302: LD_EXP 80
29306: PUSH
29307: LD_EXP 125
29311: AND
29312: IFFALSE 29495
29314: GO 29316
29316: DISABLE
29317: LD_INT 0
29319: PPUSH
29320: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29321: LD_ADDR_VAR 0 2
29325: PUSH
29326: LD_INT 22
29328: PUSH
29329: LD_OWVAR 2
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PPUSH
29338: CALL_OW 69
29342: ST_TO_ADDR
// if not tmp then
29343: LD_VAR 0 2
29347: NOT
29348: IFFALSE 29352
// exit ;
29350: GO 29495
// for i := 1 to 2 do
29352: LD_ADDR_VAR 0 1
29356: PUSH
29357: DOUBLE
29358: LD_INT 1
29360: DEC
29361: ST_TO_ADDR
29362: LD_INT 2
29364: PUSH
29365: FOR_TO
29366: IFFALSE 29493
// begin uc_side := your_side ;
29368: LD_ADDR_OWVAR 20
29372: PUSH
29373: LD_OWVAR 2
29377: ST_TO_ADDR
// uc_nation := nation_american ;
29378: LD_ADDR_OWVAR 21
29382: PUSH
29383: LD_INT 1
29385: ST_TO_ADDR
// vc_chassis := us_morphling ;
29386: LD_ADDR_OWVAR 37
29390: PUSH
29391: LD_INT 5
29393: ST_TO_ADDR
// vc_engine := engine_siberite ;
29394: LD_ADDR_OWVAR 39
29398: PUSH
29399: LD_INT 3
29401: ST_TO_ADDR
// vc_control := control_computer ;
29402: LD_ADDR_OWVAR 38
29406: PUSH
29407: LD_INT 3
29409: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29410: LD_ADDR_OWVAR 40
29414: PUSH
29415: LD_INT 10
29417: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29418: LD_VAR 0 2
29422: PUSH
29423: LD_INT 1
29425: ARRAY
29426: PPUSH
29427: CALL_OW 310
29431: NOT
29432: IFFALSE 29479
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29434: CALL_OW 45
29438: PPUSH
29439: LD_VAR 0 2
29443: PUSH
29444: LD_INT 1
29446: ARRAY
29447: PPUSH
29448: CALL_OW 250
29452: PPUSH
29453: LD_VAR 0 2
29457: PUSH
29458: LD_INT 1
29460: ARRAY
29461: PPUSH
29462: CALL_OW 251
29466: PPUSH
29467: LD_INT 12
29469: PPUSH
29470: LD_INT 1
29472: PPUSH
29473: CALL_OW 50
29477: GO 29491
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29479: CALL_OW 45
29483: PPUSH
29484: LD_INT 1
29486: PPUSH
29487: CALL_OW 51
// end ;
29491: GO 29365
29493: POP
29494: POP
// end ;
29495: PPOPN 2
29497: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29498: LD_EXP 80
29502: PUSH
29503: LD_EXP 126
29507: AND
29508: IFFALSE 29730
29510: GO 29512
29512: DISABLE
29513: LD_INT 0
29515: PPUSH
29516: PPUSH
29517: PPUSH
29518: PPUSH
29519: PPUSH
29520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29521: LD_ADDR_VAR 0 6
29525: PUSH
29526: LD_INT 22
29528: PUSH
29529: LD_OWVAR 2
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 21
29540: PUSH
29541: LD_INT 1
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 3
29550: PUSH
29551: LD_INT 23
29553: PUSH
29554: LD_INT 0
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: LIST
29569: PPUSH
29570: CALL_OW 69
29574: ST_TO_ADDR
// if not tmp then
29575: LD_VAR 0 6
29579: NOT
29580: IFFALSE 29584
// exit ;
29582: GO 29730
// s1 := rand ( 1 , 4 ) ;
29584: LD_ADDR_VAR 0 2
29588: PUSH
29589: LD_INT 1
29591: PPUSH
29592: LD_INT 4
29594: PPUSH
29595: CALL_OW 12
29599: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29600: LD_ADDR_VAR 0 4
29604: PUSH
29605: LD_VAR 0 6
29609: PUSH
29610: LD_INT 1
29612: ARRAY
29613: PPUSH
29614: LD_VAR 0 2
29618: PPUSH
29619: CALL_OW 259
29623: ST_TO_ADDR
// if s1 = 1 then
29624: LD_VAR 0 2
29628: PUSH
29629: LD_INT 1
29631: EQUAL
29632: IFFALSE 29652
// s2 := rand ( 2 , 4 ) else
29634: LD_ADDR_VAR 0 3
29638: PUSH
29639: LD_INT 2
29641: PPUSH
29642: LD_INT 4
29644: PPUSH
29645: CALL_OW 12
29649: ST_TO_ADDR
29650: GO 29660
// s2 := 1 ;
29652: LD_ADDR_VAR 0 3
29656: PUSH
29657: LD_INT 1
29659: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29660: LD_ADDR_VAR 0 5
29664: PUSH
29665: LD_VAR 0 6
29669: PUSH
29670: LD_INT 1
29672: ARRAY
29673: PPUSH
29674: LD_VAR 0 3
29678: PPUSH
29679: CALL_OW 259
29683: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29684: LD_VAR 0 6
29688: PUSH
29689: LD_INT 1
29691: ARRAY
29692: PPUSH
29693: LD_VAR 0 2
29697: PPUSH
29698: LD_VAR 0 5
29702: PPUSH
29703: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29707: LD_VAR 0 6
29711: PUSH
29712: LD_INT 1
29714: ARRAY
29715: PPUSH
29716: LD_VAR 0 3
29720: PPUSH
29721: LD_VAR 0 4
29725: PPUSH
29726: CALL_OW 237
// end ;
29730: PPOPN 6
29732: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29733: LD_EXP 80
29737: PUSH
29738: LD_EXP 127
29742: AND
29743: IFFALSE 29822
29745: GO 29747
29747: DISABLE
29748: LD_INT 0
29750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29751: LD_ADDR_VAR 0 1
29755: PUSH
29756: LD_INT 22
29758: PUSH
29759: LD_OWVAR 2
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 30
29770: PUSH
29771: LD_INT 3
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PPUSH
29782: CALL_OW 69
29786: ST_TO_ADDR
// if not tmp then
29787: LD_VAR 0 1
29791: NOT
29792: IFFALSE 29796
// exit ;
29794: GO 29822
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29796: LD_VAR 0 1
29800: PUSH
29801: LD_INT 1
29803: PPUSH
29804: LD_VAR 0 1
29808: PPUSH
29809: CALL_OW 12
29813: ARRAY
29814: PPUSH
29815: LD_INT 1
29817: PPUSH
29818: CALL_OW 234
// end ;
29822: PPOPN 1
29824: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29825: LD_EXP 80
29829: PUSH
29830: LD_EXP 128
29834: AND
29835: IFFALSE 29947
29837: GO 29839
29839: DISABLE
29840: LD_INT 0
29842: PPUSH
29843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29844: LD_ADDR_VAR 0 2
29848: PUSH
29849: LD_INT 22
29851: PUSH
29852: LD_OWVAR 2
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 2
29863: PUSH
29864: LD_INT 30
29866: PUSH
29867: LD_INT 27
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 30
29876: PUSH
29877: LD_INT 26
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 30
29886: PUSH
29887: LD_INT 28
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PPUSH
29904: CALL_OW 69
29908: ST_TO_ADDR
// if not tmp then
29909: LD_VAR 0 2
29913: NOT
29914: IFFALSE 29918
// exit ;
29916: GO 29947
// for i in tmp do
29918: LD_ADDR_VAR 0 1
29922: PUSH
29923: LD_VAR 0 2
29927: PUSH
29928: FOR_IN
29929: IFFALSE 29945
// SetLives ( i , 1 ) ;
29931: LD_VAR 0 1
29935: PPUSH
29936: LD_INT 1
29938: PPUSH
29939: CALL_OW 234
29943: GO 29928
29945: POP
29946: POP
// end ;
29947: PPOPN 2
29949: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29950: LD_EXP 80
29954: PUSH
29955: LD_EXP 129
29959: AND
29960: IFFALSE 30247
29962: GO 29964
29964: DISABLE
29965: LD_INT 0
29967: PPUSH
29968: PPUSH
29969: PPUSH
// begin i := rand ( 1 , 7 ) ;
29970: LD_ADDR_VAR 0 1
29974: PUSH
29975: LD_INT 1
29977: PPUSH
29978: LD_INT 7
29980: PPUSH
29981: CALL_OW 12
29985: ST_TO_ADDR
// case i of 1 :
29986: LD_VAR 0 1
29990: PUSH
29991: LD_INT 1
29993: DOUBLE
29994: EQUAL
29995: IFTRUE 29999
29997: GO 30009
29999: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30000: LD_STRING earthquake(getX(game), 0, 32)
30002: PPUSH
30003: CALL_OW 559
30007: GO 30247
30009: LD_INT 2
30011: DOUBLE
30012: EQUAL
30013: IFTRUE 30017
30015: GO 30031
30017: POP
// begin ToLua ( displayStucuk(); ) ;
30018: LD_STRING displayStucuk();
30020: PPUSH
30021: CALL_OW 559
// ResetFog ;
30025: CALL_OW 335
// end ; 3 :
30029: GO 30247
30031: LD_INT 3
30033: DOUBLE
30034: EQUAL
30035: IFTRUE 30039
30037: GO 30143
30039: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30040: LD_ADDR_VAR 0 2
30044: PUSH
30045: LD_INT 22
30047: PUSH
30048: LD_OWVAR 2
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 25
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PPUSH
30071: CALL_OW 69
30075: ST_TO_ADDR
// if not tmp then
30076: LD_VAR 0 2
30080: NOT
30081: IFFALSE 30085
// exit ;
30083: GO 30247
// un := tmp [ rand ( 1 , tmp ) ] ;
30085: LD_ADDR_VAR 0 3
30089: PUSH
30090: LD_VAR 0 2
30094: PUSH
30095: LD_INT 1
30097: PPUSH
30098: LD_VAR 0 2
30102: PPUSH
30103: CALL_OW 12
30107: ARRAY
30108: ST_TO_ADDR
// if Crawls ( un ) then
30109: LD_VAR 0 3
30113: PPUSH
30114: CALL_OW 318
30118: IFFALSE 30129
// ComWalk ( un ) ;
30120: LD_VAR 0 3
30124: PPUSH
30125: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30129: LD_VAR 0 3
30133: PPUSH
30134: LD_INT 8
30136: PPUSH
30137: CALL_OW 336
// end ; 4 :
30141: GO 30247
30143: LD_INT 4
30145: DOUBLE
30146: EQUAL
30147: IFTRUE 30151
30149: GO 30225
30151: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30152: LD_ADDR_VAR 0 2
30156: PUSH
30157: LD_INT 22
30159: PUSH
30160: LD_OWVAR 2
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 30
30171: PUSH
30172: LD_INT 29
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PPUSH
30183: CALL_OW 69
30187: ST_TO_ADDR
// if not tmp then
30188: LD_VAR 0 2
30192: NOT
30193: IFFALSE 30197
// exit ;
30195: GO 30247
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30197: LD_VAR 0 2
30201: PUSH
30202: LD_INT 1
30204: ARRAY
30205: PPUSH
30206: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30210: LD_VAR 0 2
30214: PUSH
30215: LD_INT 1
30217: ARRAY
30218: PPUSH
30219: CALL_OW 65
// end ; 5 .. 7 :
30223: GO 30247
30225: LD_INT 5
30227: DOUBLE
30228: GREATEREQUAL
30229: IFFALSE 30237
30231: LD_INT 7
30233: DOUBLE
30234: LESSEQUAL
30235: IFTRUE 30239
30237: GO 30246
30239: POP
// StreamSibBomb ; end ;
30240: CALL 26484 0 0
30244: GO 30247
30246: POP
// end ;
30247: PPOPN 3
30249: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30250: LD_EXP 80
30254: PUSH
30255: LD_EXP 130
30259: AND
30260: IFFALSE 30416
30262: GO 30264
30264: DISABLE
30265: LD_INT 0
30267: PPUSH
30268: PPUSH
30269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30270: LD_ADDR_VAR 0 2
30274: PUSH
30275: LD_INT 81
30277: PUSH
30278: LD_OWVAR 2
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 2
30289: PUSH
30290: LD_INT 21
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 21
30302: PUSH
30303: LD_INT 2
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: LIST
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PPUSH
30319: CALL_OW 69
30323: ST_TO_ADDR
// if not tmp then
30324: LD_VAR 0 2
30328: NOT
30329: IFFALSE 30333
// exit ;
30331: GO 30416
// p := 0 ;
30333: LD_ADDR_VAR 0 3
30337: PUSH
30338: LD_INT 0
30340: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30341: LD_INT 35
30343: PPUSH
30344: CALL_OW 67
// p := p + 1 ;
30348: LD_ADDR_VAR 0 3
30352: PUSH
30353: LD_VAR 0 3
30357: PUSH
30358: LD_INT 1
30360: PLUS
30361: ST_TO_ADDR
// for i in tmp do
30362: LD_ADDR_VAR 0 1
30366: PUSH
30367: LD_VAR 0 2
30371: PUSH
30372: FOR_IN
30373: IFFALSE 30404
// if GetLives ( i ) < 1000 then
30375: LD_VAR 0 1
30379: PPUSH
30380: CALL_OW 256
30384: PUSH
30385: LD_INT 1000
30387: LESS
30388: IFFALSE 30402
// SetLives ( i , 1000 ) ;
30390: LD_VAR 0 1
30394: PPUSH
30395: LD_INT 1000
30397: PPUSH
30398: CALL_OW 234
30402: GO 30372
30404: POP
30405: POP
// until p > 20 ;
30406: LD_VAR 0 3
30410: PUSH
30411: LD_INT 20
30413: GREATER
30414: IFFALSE 30341
// end ;
30416: PPOPN 3
30418: END
// every 0 0$1 trigger StreamModeActive and sTime do
30419: LD_EXP 80
30423: PUSH
30424: LD_EXP 131
30428: AND
30429: IFFALSE 30464
30431: GO 30433
30433: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30434: LD_INT 28
30436: PPUSH
30437: LD_OWVAR 2
30441: PPUSH
30442: LD_INT 2
30444: PPUSH
30445: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30449: LD_INT 30
30451: PPUSH
30452: LD_OWVAR 2
30456: PPUSH
30457: LD_INT 2
30459: PPUSH
30460: CALL_OW 322
// end ;
30464: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30465: LD_EXP 80
30469: PUSH
30470: LD_EXP 132
30474: AND
30475: IFFALSE 30596
30477: GO 30479
30479: DISABLE
30480: LD_INT 0
30482: PPUSH
30483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30484: LD_ADDR_VAR 0 2
30488: PUSH
30489: LD_INT 22
30491: PUSH
30492: LD_OWVAR 2
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 21
30503: PUSH
30504: LD_INT 1
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 3
30513: PUSH
30514: LD_INT 23
30516: PUSH
30517: LD_INT 0
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: LIST
30532: PPUSH
30533: CALL_OW 69
30537: ST_TO_ADDR
// if not tmp then
30538: LD_VAR 0 2
30542: NOT
30543: IFFALSE 30547
// exit ;
30545: GO 30596
// for i in tmp do
30547: LD_ADDR_VAR 0 1
30551: PUSH
30552: LD_VAR 0 2
30556: PUSH
30557: FOR_IN
30558: IFFALSE 30594
// begin if Crawls ( i ) then
30560: LD_VAR 0 1
30564: PPUSH
30565: CALL_OW 318
30569: IFFALSE 30580
// ComWalk ( i ) ;
30571: LD_VAR 0 1
30575: PPUSH
30576: CALL_OW 138
// SetClass ( i , 2 ) ;
30580: LD_VAR 0 1
30584: PPUSH
30585: LD_INT 2
30587: PPUSH
30588: CALL_OW 336
// end ;
30592: GO 30557
30594: POP
30595: POP
// end ;
30596: PPOPN 2
30598: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30599: LD_EXP 80
30603: PUSH
30604: LD_EXP 133
30608: AND
30609: IFFALSE 30897
30611: GO 30613
30613: DISABLE
30614: LD_INT 0
30616: PPUSH
30617: PPUSH
30618: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30619: LD_OWVAR 2
30623: PPUSH
30624: LD_INT 9
30626: PPUSH
30627: LD_INT 1
30629: PPUSH
30630: LD_INT 1
30632: PPUSH
30633: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30637: LD_INT 9
30639: PPUSH
30640: LD_OWVAR 2
30644: PPUSH
30645: CALL_OW 343
// uc_side := 9 ;
30649: LD_ADDR_OWVAR 20
30653: PUSH
30654: LD_INT 9
30656: ST_TO_ADDR
// uc_nation := 2 ;
30657: LD_ADDR_OWVAR 21
30661: PUSH
30662: LD_INT 2
30664: ST_TO_ADDR
// hc_name := Dark Warrior ;
30665: LD_ADDR_OWVAR 26
30669: PUSH
30670: LD_STRING Dark Warrior
30672: ST_TO_ADDR
// hc_gallery :=  ;
30673: LD_ADDR_OWVAR 33
30677: PUSH
30678: LD_STRING 
30680: ST_TO_ADDR
// hc_noskilllimit := true ;
30681: LD_ADDR_OWVAR 76
30685: PUSH
30686: LD_INT 1
30688: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30689: LD_ADDR_OWVAR 31
30693: PUSH
30694: LD_INT 30
30696: PUSH
30697: LD_INT 30
30699: PUSH
30700: LD_INT 30
30702: PUSH
30703: LD_INT 30
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: ST_TO_ADDR
// un := CreateHuman ;
30712: LD_ADDR_VAR 0 3
30716: PUSH
30717: CALL_OW 44
30721: ST_TO_ADDR
// hc_noskilllimit := false ;
30722: LD_ADDR_OWVAR 76
30726: PUSH
30727: LD_INT 0
30729: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30730: LD_VAR 0 3
30734: PPUSH
30735: LD_INT 1
30737: PPUSH
30738: CALL_OW 51
// ToLua ( playRanger() ) ;
30742: LD_STRING playRanger()
30744: PPUSH
30745: CALL_OW 559
// p := 0 ;
30749: LD_ADDR_VAR 0 2
30753: PUSH
30754: LD_INT 0
30756: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30757: LD_INT 35
30759: PPUSH
30760: CALL_OW 67
// p := p + 1 ;
30764: LD_ADDR_VAR 0 2
30768: PUSH
30769: LD_VAR 0 2
30773: PUSH
30774: LD_INT 1
30776: PLUS
30777: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30778: LD_VAR 0 3
30782: PPUSH
30783: CALL_OW 256
30787: PUSH
30788: LD_INT 1000
30790: LESS
30791: IFFALSE 30805
// SetLives ( un , 1000 ) ;
30793: LD_VAR 0 3
30797: PPUSH
30798: LD_INT 1000
30800: PPUSH
30801: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30805: LD_VAR 0 3
30809: PPUSH
30810: LD_INT 81
30812: PUSH
30813: LD_OWVAR 2
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 91
30824: PUSH
30825: LD_VAR 0 3
30829: PUSH
30830: LD_INT 30
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: LIST
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PPUSH
30842: CALL_OW 69
30846: PPUSH
30847: LD_VAR 0 3
30851: PPUSH
30852: CALL_OW 74
30856: PPUSH
30857: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30861: LD_VAR 0 2
30865: PUSH
30866: LD_INT 80
30868: GREATER
30869: PUSH
30870: LD_VAR 0 3
30874: PPUSH
30875: CALL_OW 301
30879: OR
30880: IFFALSE 30757
// if un then
30882: LD_VAR 0 3
30886: IFFALSE 30897
// RemoveUnit ( un ) ;
30888: LD_VAR 0 3
30892: PPUSH
30893: CALL_OW 64
// end ;
30897: PPOPN 3
30899: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30900: LD_EXP 134
30904: IFFALSE 31020
30906: GO 30908
30908: DISABLE
30909: LD_INT 0
30911: PPUSH
30912: PPUSH
30913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30914: LD_ADDR_VAR 0 2
30918: PUSH
30919: LD_INT 81
30921: PUSH
30922: LD_OWVAR 2
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 21
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PPUSH
30945: CALL_OW 69
30949: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30950: LD_STRING playComputer()
30952: PPUSH
30953: CALL_OW 559
// if not tmp then
30957: LD_VAR 0 2
30961: NOT
30962: IFFALSE 30966
// exit ;
30964: GO 31020
// for i in tmp do
30966: LD_ADDR_VAR 0 1
30970: PUSH
30971: LD_VAR 0 2
30975: PUSH
30976: FOR_IN
30977: IFFALSE 31018
// for j := 1 to 4 do
30979: LD_ADDR_VAR 0 3
30983: PUSH
30984: DOUBLE
30985: LD_INT 1
30987: DEC
30988: ST_TO_ADDR
30989: LD_INT 4
30991: PUSH
30992: FOR_TO
30993: IFFALSE 31014
// SetSkill ( i , j , 10 ) ;
30995: LD_VAR 0 1
30999: PPUSH
31000: LD_VAR 0 3
31004: PPUSH
31005: LD_INT 10
31007: PPUSH
31008: CALL_OW 237
31012: GO 30992
31014: POP
31015: POP
31016: GO 30976
31018: POP
31019: POP
// end ;
31020: PPOPN 3
31022: END
// every 0 0$1 trigger s30 do var i , tmp ;
31023: LD_EXP 135
31027: IFFALSE 31096
31029: GO 31031
31031: DISABLE
31032: LD_INT 0
31034: PPUSH
31035: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31036: LD_ADDR_VAR 0 2
31040: PUSH
31041: LD_INT 22
31043: PUSH
31044: LD_OWVAR 2
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PPUSH
31053: CALL_OW 69
31057: ST_TO_ADDR
// if not tmp then
31058: LD_VAR 0 2
31062: NOT
31063: IFFALSE 31067
// exit ;
31065: GO 31096
// for i in tmp do
31067: LD_ADDR_VAR 0 1
31071: PUSH
31072: LD_VAR 0 2
31076: PUSH
31077: FOR_IN
31078: IFFALSE 31094
// SetLives ( i , 300 ) ;
31080: LD_VAR 0 1
31084: PPUSH
31085: LD_INT 300
31087: PPUSH
31088: CALL_OW 234
31092: GO 31077
31094: POP
31095: POP
// end ;
31096: PPOPN 2
31098: END
// every 0 0$1 trigger s60 do var i , tmp ;
31099: LD_EXP 136
31103: IFFALSE 31172
31105: GO 31107
31107: DISABLE
31108: LD_INT 0
31110: PPUSH
31111: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31112: LD_ADDR_VAR 0 2
31116: PUSH
31117: LD_INT 22
31119: PUSH
31120: LD_OWVAR 2
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PPUSH
31129: CALL_OW 69
31133: ST_TO_ADDR
// if not tmp then
31134: LD_VAR 0 2
31138: NOT
31139: IFFALSE 31143
// exit ;
31141: GO 31172
// for i in tmp do
31143: LD_ADDR_VAR 0 1
31147: PUSH
31148: LD_VAR 0 2
31152: PUSH
31153: FOR_IN
31154: IFFALSE 31170
// SetLives ( i , 600 ) ;
31156: LD_VAR 0 1
31160: PPUSH
31161: LD_INT 600
31163: PPUSH
31164: CALL_OW 234
31168: GO 31153
31170: POP
31171: POP
// end ;
31172: PPOPN 2
31174: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31175: LD_INT 0
31177: PPUSH
// case cmd of 301 :
31178: LD_VAR 0 1
31182: PUSH
31183: LD_INT 301
31185: DOUBLE
31186: EQUAL
31187: IFTRUE 31191
31189: GO 31223
31191: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31192: LD_VAR 0 6
31196: PPUSH
31197: LD_VAR 0 7
31201: PPUSH
31202: LD_VAR 0 8
31206: PPUSH
31207: LD_VAR 0 4
31211: PPUSH
31212: LD_VAR 0 5
31216: PPUSH
31217: CALL 32424 0 5
31221: GO 31344
31223: LD_INT 302
31225: DOUBLE
31226: EQUAL
31227: IFTRUE 31231
31229: GO 31268
31231: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31232: LD_VAR 0 6
31236: PPUSH
31237: LD_VAR 0 7
31241: PPUSH
31242: LD_VAR 0 8
31246: PPUSH
31247: LD_VAR 0 9
31251: PPUSH
31252: LD_VAR 0 4
31256: PPUSH
31257: LD_VAR 0 5
31261: PPUSH
31262: CALL 32515 0 6
31266: GO 31344
31268: LD_INT 303
31270: DOUBLE
31271: EQUAL
31272: IFTRUE 31276
31274: GO 31313
31276: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31277: LD_VAR 0 6
31281: PPUSH
31282: LD_VAR 0 7
31286: PPUSH
31287: LD_VAR 0 8
31291: PPUSH
31292: LD_VAR 0 9
31296: PPUSH
31297: LD_VAR 0 4
31301: PPUSH
31302: LD_VAR 0 5
31306: PPUSH
31307: CALL 31349 0 6
31311: GO 31344
31313: LD_INT 304
31315: DOUBLE
31316: EQUAL
31317: IFTRUE 31321
31319: GO 31343
31321: POP
// hHackTeleport ( unit , x , y ) ; end ;
31322: LD_VAR 0 2
31326: PPUSH
31327: LD_VAR 0 4
31331: PPUSH
31332: LD_VAR 0 5
31336: PPUSH
31337: CALL 33108 0 3
31341: GO 31344
31343: POP
// end ;
31344: LD_VAR 0 12
31348: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31349: LD_INT 0
31351: PPUSH
31352: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31353: LD_VAR 0 1
31357: PUSH
31358: LD_INT 1
31360: LESS
31361: PUSH
31362: LD_VAR 0 1
31366: PUSH
31367: LD_INT 3
31369: GREATER
31370: OR
31371: PUSH
31372: LD_VAR 0 5
31376: PPUSH
31377: LD_VAR 0 6
31381: PPUSH
31382: CALL_OW 428
31386: OR
31387: IFFALSE 31391
// exit ;
31389: GO 32111
// uc_side := your_side ;
31391: LD_ADDR_OWVAR 20
31395: PUSH
31396: LD_OWVAR 2
31400: ST_TO_ADDR
// uc_nation := nation ;
31401: LD_ADDR_OWVAR 21
31405: PUSH
31406: LD_VAR 0 1
31410: ST_TO_ADDR
// bc_level = 1 ;
31411: LD_ADDR_OWVAR 43
31415: PUSH
31416: LD_INT 1
31418: ST_TO_ADDR
// case btype of 1 :
31419: LD_VAR 0 2
31423: PUSH
31424: LD_INT 1
31426: DOUBLE
31427: EQUAL
31428: IFTRUE 31432
31430: GO 31443
31432: POP
// bc_type := b_depot ; 2 :
31433: LD_ADDR_OWVAR 42
31437: PUSH
31438: LD_INT 0
31440: ST_TO_ADDR
31441: GO 32055
31443: LD_INT 2
31445: DOUBLE
31446: EQUAL
31447: IFTRUE 31451
31449: GO 31462
31451: POP
// bc_type := b_warehouse ; 3 :
31452: LD_ADDR_OWVAR 42
31456: PUSH
31457: LD_INT 1
31459: ST_TO_ADDR
31460: GO 32055
31462: LD_INT 3
31464: DOUBLE
31465: EQUAL
31466: IFTRUE 31470
31468: GO 31481
31470: POP
// bc_type := b_lab ; 4 .. 9 :
31471: LD_ADDR_OWVAR 42
31475: PUSH
31476: LD_INT 6
31478: ST_TO_ADDR
31479: GO 32055
31481: LD_INT 4
31483: DOUBLE
31484: GREATEREQUAL
31485: IFFALSE 31493
31487: LD_INT 9
31489: DOUBLE
31490: LESSEQUAL
31491: IFTRUE 31495
31493: GO 31547
31495: POP
// begin bc_type := b_lab_half ;
31496: LD_ADDR_OWVAR 42
31500: PUSH
31501: LD_INT 7
31503: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31504: LD_ADDR_OWVAR 44
31508: PUSH
31509: LD_INT 10
31511: PUSH
31512: LD_INT 11
31514: PUSH
31515: LD_INT 12
31517: PUSH
31518: LD_INT 15
31520: PUSH
31521: LD_INT 14
31523: PUSH
31524: LD_INT 13
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: PUSH
31535: LD_VAR 0 2
31539: PUSH
31540: LD_INT 3
31542: MINUS
31543: ARRAY
31544: ST_TO_ADDR
// end ; 10 .. 13 :
31545: GO 32055
31547: LD_INT 10
31549: DOUBLE
31550: GREATEREQUAL
31551: IFFALSE 31559
31553: LD_INT 13
31555: DOUBLE
31556: LESSEQUAL
31557: IFTRUE 31561
31559: GO 31638
31561: POP
// begin bc_type := b_lab_full ;
31562: LD_ADDR_OWVAR 42
31566: PUSH
31567: LD_INT 8
31569: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31570: LD_ADDR_OWVAR 44
31574: PUSH
31575: LD_INT 10
31577: PUSH
31578: LD_INT 12
31580: PUSH
31581: LD_INT 14
31583: PUSH
31584: LD_INT 13
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: PUSH
31593: LD_VAR 0 2
31597: PUSH
31598: LD_INT 9
31600: MINUS
31601: ARRAY
31602: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31603: LD_ADDR_OWVAR 45
31607: PUSH
31608: LD_INT 11
31610: PUSH
31611: LD_INT 15
31613: PUSH
31614: LD_INT 12
31616: PUSH
31617: LD_INT 15
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: PUSH
31626: LD_VAR 0 2
31630: PUSH
31631: LD_INT 9
31633: MINUS
31634: ARRAY
31635: ST_TO_ADDR
// end ; 14 :
31636: GO 32055
31638: LD_INT 14
31640: DOUBLE
31641: EQUAL
31642: IFTRUE 31646
31644: GO 31657
31646: POP
// bc_type := b_workshop ; 15 :
31647: LD_ADDR_OWVAR 42
31651: PUSH
31652: LD_INT 2
31654: ST_TO_ADDR
31655: GO 32055
31657: LD_INT 15
31659: DOUBLE
31660: EQUAL
31661: IFTRUE 31665
31663: GO 31676
31665: POP
// bc_type := b_factory ; 16 :
31666: LD_ADDR_OWVAR 42
31670: PUSH
31671: LD_INT 3
31673: ST_TO_ADDR
31674: GO 32055
31676: LD_INT 16
31678: DOUBLE
31679: EQUAL
31680: IFTRUE 31684
31682: GO 31695
31684: POP
// bc_type := b_ext_gun ; 17 :
31685: LD_ADDR_OWVAR 42
31689: PUSH
31690: LD_INT 17
31692: ST_TO_ADDR
31693: GO 32055
31695: LD_INT 17
31697: DOUBLE
31698: EQUAL
31699: IFTRUE 31703
31701: GO 31731
31703: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31704: LD_ADDR_OWVAR 42
31708: PUSH
31709: LD_INT 19
31711: PUSH
31712: LD_INT 23
31714: PUSH
31715: LD_INT 19
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: LIST
31722: PUSH
31723: LD_VAR 0 1
31727: ARRAY
31728: ST_TO_ADDR
31729: GO 32055
31731: LD_INT 18
31733: DOUBLE
31734: EQUAL
31735: IFTRUE 31739
31737: GO 31750
31739: POP
// bc_type := b_ext_radar ; 19 :
31740: LD_ADDR_OWVAR 42
31744: PUSH
31745: LD_INT 20
31747: ST_TO_ADDR
31748: GO 32055
31750: LD_INT 19
31752: DOUBLE
31753: EQUAL
31754: IFTRUE 31758
31756: GO 31769
31758: POP
// bc_type := b_ext_radio ; 20 :
31759: LD_ADDR_OWVAR 42
31763: PUSH
31764: LD_INT 22
31766: ST_TO_ADDR
31767: GO 32055
31769: LD_INT 20
31771: DOUBLE
31772: EQUAL
31773: IFTRUE 31777
31775: GO 31788
31777: POP
// bc_type := b_ext_siberium ; 21 :
31778: LD_ADDR_OWVAR 42
31782: PUSH
31783: LD_INT 21
31785: ST_TO_ADDR
31786: GO 32055
31788: LD_INT 21
31790: DOUBLE
31791: EQUAL
31792: IFTRUE 31796
31794: GO 31807
31796: POP
// bc_type := b_ext_computer ; 22 :
31797: LD_ADDR_OWVAR 42
31801: PUSH
31802: LD_INT 24
31804: ST_TO_ADDR
31805: GO 32055
31807: LD_INT 22
31809: DOUBLE
31810: EQUAL
31811: IFTRUE 31815
31813: GO 31826
31815: POP
// bc_type := b_ext_track ; 23 :
31816: LD_ADDR_OWVAR 42
31820: PUSH
31821: LD_INT 16
31823: ST_TO_ADDR
31824: GO 32055
31826: LD_INT 23
31828: DOUBLE
31829: EQUAL
31830: IFTRUE 31834
31832: GO 31845
31834: POP
// bc_type := b_ext_laser ; 24 :
31835: LD_ADDR_OWVAR 42
31839: PUSH
31840: LD_INT 25
31842: ST_TO_ADDR
31843: GO 32055
31845: LD_INT 24
31847: DOUBLE
31848: EQUAL
31849: IFTRUE 31853
31851: GO 31864
31853: POP
// bc_type := b_control_tower ; 25 :
31854: LD_ADDR_OWVAR 42
31858: PUSH
31859: LD_INT 36
31861: ST_TO_ADDR
31862: GO 32055
31864: LD_INT 25
31866: DOUBLE
31867: EQUAL
31868: IFTRUE 31872
31870: GO 31883
31872: POP
// bc_type := b_breastwork ; 26 :
31873: LD_ADDR_OWVAR 42
31877: PUSH
31878: LD_INT 31
31880: ST_TO_ADDR
31881: GO 32055
31883: LD_INT 26
31885: DOUBLE
31886: EQUAL
31887: IFTRUE 31891
31889: GO 31902
31891: POP
// bc_type := b_bunker ; 27 :
31892: LD_ADDR_OWVAR 42
31896: PUSH
31897: LD_INT 32
31899: ST_TO_ADDR
31900: GO 32055
31902: LD_INT 27
31904: DOUBLE
31905: EQUAL
31906: IFTRUE 31910
31908: GO 31921
31910: POP
// bc_type := b_turret ; 28 :
31911: LD_ADDR_OWVAR 42
31915: PUSH
31916: LD_INT 33
31918: ST_TO_ADDR
31919: GO 32055
31921: LD_INT 28
31923: DOUBLE
31924: EQUAL
31925: IFTRUE 31929
31927: GO 31940
31929: POP
// bc_type := b_armoury ; 29 :
31930: LD_ADDR_OWVAR 42
31934: PUSH
31935: LD_INT 4
31937: ST_TO_ADDR
31938: GO 32055
31940: LD_INT 29
31942: DOUBLE
31943: EQUAL
31944: IFTRUE 31948
31946: GO 31959
31948: POP
// bc_type := b_barracks ; 30 :
31949: LD_ADDR_OWVAR 42
31953: PUSH
31954: LD_INT 5
31956: ST_TO_ADDR
31957: GO 32055
31959: LD_INT 30
31961: DOUBLE
31962: EQUAL
31963: IFTRUE 31967
31965: GO 31978
31967: POP
// bc_type := b_solar_power ; 31 :
31968: LD_ADDR_OWVAR 42
31972: PUSH
31973: LD_INT 27
31975: ST_TO_ADDR
31976: GO 32055
31978: LD_INT 31
31980: DOUBLE
31981: EQUAL
31982: IFTRUE 31986
31984: GO 31997
31986: POP
// bc_type := b_oil_power ; 32 :
31987: LD_ADDR_OWVAR 42
31991: PUSH
31992: LD_INT 26
31994: ST_TO_ADDR
31995: GO 32055
31997: LD_INT 32
31999: DOUBLE
32000: EQUAL
32001: IFTRUE 32005
32003: GO 32016
32005: POP
// bc_type := b_siberite_power ; 33 :
32006: LD_ADDR_OWVAR 42
32010: PUSH
32011: LD_INT 28
32013: ST_TO_ADDR
32014: GO 32055
32016: LD_INT 33
32018: DOUBLE
32019: EQUAL
32020: IFTRUE 32024
32022: GO 32035
32024: POP
// bc_type := b_oil_mine ; 34 :
32025: LD_ADDR_OWVAR 42
32029: PUSH
32030: LD_INT 29
32032: ST_TO_ADDR
32033: GO 32055
32035: LD_INT 34
32037: DOUBLE
32038: EQUAL
32039: IFTRUE 32043
32041: GO 32054
32043: POP
// bc_type := b_siberite_mine ; end ;
32044: LD_ADDR_OWVAR 42
32048: PUSH
32049: LD_INT 30
32051: ST_TO_ADDR
32052: GO 32055
32054: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32055: LD_ADDR_VAR 0 8
32059: PUSH
32060: LD_VAR 0 5
32064: PPUSH
32065: LD_VAR 0 6
32069: PPUSH
32070: LD_VAR 0 3
32074: PPUSH
32075: CALL_OW 47
32079: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32080: LD_OWVAR 42
32084: PUSH
32085: LD_INT 32
32087: PUSH
32088: LD_INT 33
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: IN
32095: IFFALSE 32111
// PlaceWeaponTurret ( b , weapon ) ;
32097: LD_VAR 0 8
32101: PPUSH
32102: LD_VAR 0 4
32106: PPUSH
32107: CALL_OW 431
// end ;
32111: LD_VAR 0 7
32115: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32116: LD_INT 0
32118: PPUSH
32119: PPUSH
32120: PPUSH
32121: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32122: LD_ADDR_VAR 0 4
32126: PUSH
32127: LD_INT 22
32129: PUSH
32130: LD_OWVAR 2
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 2
32141: PUSH
32142: LD_INT 30
32144: PUSH
32145: LD_INT 0
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 30
32154: PUSH
32155: LD_INT 1
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: LIST
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PPUSH
32171: CALL_OW 69
32175: ST_TO_ADDR
// if not tmp then
32176: LD_VAR 0 4
32180: NOT
32181: IFFALSE 32185
// exit ;
32183: GO 32244
// for i in tmp do
32185: LD_ADDR_VAR 0 2
32189: PUSH
32190: LD_VAR 0 4
32194: PUSH
32195: FOR_IN
32196: IFFALSE 32242
// for j = 1 to 3 do
32198: LD_ADDR_VAR 0 3
32202: PUSH
32203: DOUBLE
32204: LD_INT 1
32206: DEC
32207: ST_TO_ADDR
32208: LD_INT 3
32210: PUSH
32211: FOR_TO
32212: IFFALSE 32238
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32214: LD_VAR 0 2
32218: PPUSH
32219: CALL_OW 274
32223: PPUSH
32224: LD_VAR 0 3
32228: PPUSH
32229: LD_INT 99999
32231: PPUSH
32232: CALL_OW 277
32236: GO 32211
32238: POP
32239: POP
32240: GO 32195
32242: POP
32243: POP
// end ;
32244: LD_VAR 0 1
32248: RET
// export function hHackSetLevel10 ; var i , j ; begin
32249: LD_INT 0
32251: PPUSH
32252: PPUSH
32253: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32254: LD_ADDR_VAR 0 2
32258: PUSH
32259: LD_INT 21
32261: PUSH
32262: LD_INT 1
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PPUSH
32269: CALL_OW 69
32273: PUSH
32274: FOR_IN
32275: IFFALSE 32327
// if IsSelected ( i ) then
32277: LD_VAR 0 2
32281: PPUSH
32282: CALL_OW 306
32286: IFFALSE 32325
// begin for j := 1 to 4 do
32288: LD_ADDR_VAR 0 3
32292: PUSH
32293: DOUBLE
32294: LD_INT 1
32296: DEC
32297: ST_TO_ADDR
32298: LD_INT 4
32300: PUSH
32301: FOR_TO
32302: IFFALSE 32323
// SetSkill ( i , j , 10 ) ;
32304: LD_VAR 0 2
32308: PPUSH
32309: LD_VAR 0 3
32313: PPUSH
32314: LD_INT 10
32316: PPUSH
32317: CALL_OW 237
32321: GO 32301
32323: POP
32324: POP
// end ;
32325: GO 32274
32327: POP
32328: POP
// end ;
32329: LD_VAR 0 1
32333: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32334: LD_INT 0
32336: PPUSH
32337: PPUSH
32338: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32339: LD_ADDR_VAR 0 2
32343: PUSH
32344: LD_INT 22
32346: PUSH
32347: LD_OWVAR 2
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 21
32358: PUSH
32359: LD_INT 1
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PPUSH
32370: CALL_OW 69
32374: PUSH
32375: FOR_IN
32376: IFFALSE 32417
// begin for j := 1 to 4 do
32378: LD_ADDR_VAR 0 3
32382: PUSH
32383: DOUBLE
32384: LD_INT 1
32386: DEC
32387: ST_TO_ADDR
32388: LD_INT 4
32390: PUSH
32391: FOR_TO
32392: IFFALSE 32413
// SetSkill ( i , j , 10 ) ;
32394: LD_VAR 0 2
32398: PPUSH
32399: LD_VAR 0 3
32403: PPUSH
32404: LD_INT 10
32406: PPUSH
32407: CALL_OW 237
32411: GO 32391
32413: POP
32414: POP
// end ;
32415: GO 32375
32417: POP
32418: POP
// end ;
32419: LD_VAR 0 1
32423: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32424: LD_INT 0
32426: PPUSH
// uc_side := your_side ;
32427: LD_ADDR_OWVAR 20
32431: PUSH
32432: LD_OWVAR 2
32436: ST_TO_ADDR
// uc_nation := nation ;
32437: LD_ADDR_OWVAR 21
32441: PUSH
32442: LD_VAR 0 1
32446: ST_TO_ADDR
// InitHc ;
32447: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32451: LD_INT 0
32453: PPUSH
32454: LD_VAR 0 2
32458: PPUSH
32459: LD_VAR 0 3
32463: PPUSH
32464: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32468: LD_VAR 0 4
32472: PPUSH
32473: LD_VAR 0 5
32477: PPUSH
32478: CALL_OW 428
32482: PUSH
32483: LD_INT 0
32485: EQUAL
32486: IFFALSE 32510
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32488: CALL_OW 44
32492: PPUSH
32493: LD_VAR 0 4
32497: PPUSH
32498: LD_VAR 0 5
32502: PPUSH
32503: LD_INT 1
32505: PPUSH
32506: CALL_OW 48
// end ;
32510: LD_VAR 0 6
32514: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32515: LD_INT 0
32517: PPUSH
32518: PPUSH
// uc_side := your_side ;
32519: LD_ADDR_OWVAR 20
32523: PUSH
32524: LD_OWVAR 2
32528: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32529: LD_VAR 0 1
32533: PUSH
32534: LD_INT 1
32536: PUSH
32537: LD_INT 2
32539: PUSH
32540: LD_INT 3
32542: PUSH
32543: LD_INT 4
32545: PUSH
32546: LD_INT 5
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: IN
32556: IFFALSE 32568
// uc_nation := nation_american else
32558: LD_ADDR_OWVAR 21
32562: PUSH
32563: LD_INT 1
32565: ST_TO_ADDR
32566: GO 32611
// if chassis in [ 11 , 12 , 13 , 14 ] then
32568: LD_VAR 0 1
32572: PUSH
32573: LD_INT 11
32575: PUSH
32576: LD_INT 12
32578: PUSH
32579: LD_INT 13
32581: PUSH
32582: LD_INT 14
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: IN
32591: IFFALSE 32603
// uc_nation := nation_arabian else
32593: LD_ADDR_OWVAR 21
32597: PUSH
32598: LD_INT 2
32600: ST_TO_ADDR
32601: GO 32611
// uc_nation := nation_russian ;
32603: LD_ADDR_OWVAR 21
32607: PUSH
32608: LD_INT 3
32610: ST_TO_ADDR
// vc_chassis := chassis ;
32611: LD_ADDR_OWVAR 37
32615: PUSH
32616: LD_VAR 0 1
32620: ST_TO_ADDR
// vc_engine := engine ;
32621: LD_ADDR_OWVAR 39
32625: PUSH
32626: LD_VAR 0 2
32630: ST_TO_ADDR
// vc_control := control ;
32631: LD_ADDR_OWVAR 38
32635: PUSH
32636: LD_VAR 0 3
32640: ST_TO_ADDR
// vc_weapon := weapon ;
32641: LD_ADDR_OWVAR 40
32645: PUSH
32646: LD_VAR 0 4
32650: ST_TO_ADDR
// un := CreateVehicle ;
32651: LD_ADDR_VAR 0 8
32655: PUSH
32656: CALL_OW 45
32660: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32661: LD_VAR 0 8
32665: PPUSH
32666: LD_INT 0
32668: PPUSH
32669: LD_INT 5
32671: PPUSH
32672: CALL_OW 12
32676: PPUSH
32677: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32681: LD_VAR 0 8
32685: PPUSH
32686: LD_VAR 0 5
32690: PPUSH
32691: LD_VAR 0 6
32695: PPUSH
32696: LD_INT 1
32698: PPUSH
32699: CALL_OW 48
// end ;
32703: LD_VAR 0 7
32707: RET
// export hInvincible ; every 1 do
32708: GO 32710
32710: DISABLE
// hInvincible := [ ] ;
32711: LD_ADDR_EXP 137
32715: PUSH
32716: EMPTY
32717: ST_TO_ADDR
32718: END
// every 10 do var i ;
32719: GO 32721
32721: DISABLE
32722: LD_INT 0
32724: PPUSH
// begin enable ;
32725: ENABLE
// if not hInvincible then
32726: LD_EXP 137
32730: NOT
32731: IFFALSE 32735
// exit ;
32733: GO 32779
// for i in hInvincible do
32735: LD_ADDR_VAR 0 1
32739: PUSH
32740: LD_EXP 137
32744: PUSH
32745: FOR_IN
32746: IFFALSE 32777
// if GetLives ( i ) < 1000 then
32748: LD_VAR 0 1
32752: PPUSH
32753: CALL_OW 256
32757: PUSH
32758: LD_INT 1000
32760: LESS
32761: IFFALSE 32775
// SetLives ( i , 1000 ) ;
32763: LD_VAR 0 1
32767: PPUSH
32768: LD_INT 1000
32770: PPUSH
32771: CALL_OW 234
32775: GO 32745
32777: POP
32778: POP
// end ;
32779: PPOPN 1
32781: END
// export function hHackInvincible ; var i ; begin
32782: LD_INT 0
32784: PPUSH
32785: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32786: LD_ADDR_VAR 0 2
32790: PUSH
32791: LD_INT 2
32793: PUSH
32794: LD_INT 21
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 21
32806: PUSH
32807: LD_INT 2
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: LIST
32818: PPUSH
32819: CALL_OW 69
32823: PUSH
32824: FOR_IN
32825: IFFALSE 32886
// if IsSelected ( i ) then
32827: LD_VAR 0 2
32831: PPUSH
32832: CALL_OW 306
32836: IFFALSE 32884
// begin if i in hInvincible then
32838: LD_VAR 0 2
32842: PUSH
32843: LD_EXP 137
32847: IN
32848: IFFALSE 32868
// hInvincible := hInvincible diff i else
32850: LD_ADDR_EXP 137
32854: PUSH
32855: LD_EXP 137
32859: PUSH
32860: LD_VAR 0 2
32864: DIFF
32865: ST_TO_ADDR
32866: GO 32884
// hInvincible := hInvincible union i ;
32868: LD_ADDR_EXP 137
32872: PUSH
32873: LD_EXP 137
32877: PUSH
32878: LD_VAR 0 2
32882: UNION
32883: ST_TO_ADDR
// end ;
32884: GO 32824
32886: POP
32887: POP
// end ;
32888: LD_VAR 0 1
32892: RET
// export function hHackInvisible ; var i , j ; begin
32893: LD_INT 0
32895: PPUSH
32896: PPUSH
32897: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32898: LD_ADDR_VAR 0 2
32902: PUSH
32903: LD_INT 21
32905: PUSH
32906: LD_INT 1
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PPUSH
32913: CALL_OW 69
32917: PUSH
32918: FOR_IN
32919: IFFALSE 32943
// if IsSelected ( i ) then
32921: LD_VAR 0 2
32925: PPUSH
32926: CALL_OW 306
32930: IFFALSE 32941
// ComForceInvisible ( i ) ;
32932: LD_VAR 0 2
32936: PPUSH
32937: CALL_OW 496
32941: GO 32918
32943: POP
32944: POP
// end ;
32945: LD_VAR 0 1
32949: RET
// export function hHackChangeYourSide ; begin
32950: LD_INT 0
32952: PPUSH
// if your_side = 8 then
32953: LD_OWVAR 2
32957: PUSH
32958: LD_INT 8
32960: EQUAL
32961: IFFALSE 32973
// your_side := 0 else
32963: LD_ADDR_OWVAR 2
32967: PUSH
32968: LD_INT 0
32970: ST_TO_ADDR
32971: GO 32987
// your_side := your_side + 1 ;
32973: LD_ADDR_OWVAR 2
32977: PUSH
32978: LD_OWVAR 2
32982: PUSH
32983: LD_INT 1
32985: PLUS
32986: ST_TO_ADDR
// end ;
32987: LD_VAR 0 1
32991: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32992: LD_INT 0
32994: PPUSH
32995: PPUSH
32996: PPUSH
// for i in all_units do
32997: LD_ADDR_VAR 0 2
33001: PUSH
33002: LD_OWVAR 3
33006: PUSH
33007: FOR_IN
33008: IFFALSE 33086
// if IsSelected ( i ) then
33010: LD_VAR 0 2
33014: PPUSH
33015: CALL_OW 306
33019: IFFALSE 33084
// begin j := GetSide ( i ) ;
33021: LD_ADDR_VAR 0 3
33025: PUSH
33026: LD_VAR 0 2
33030: PPUSH
33031: CALL_OW 255
33035: ST_TO_ADDR
// if j = 8 then
33036: LD_VAR 0 3
33040: PUSH
33041: LD_INT 8
33043: EQUAL
33044: IFFALSE 33056
// j := 0 else
33046: LD_ADDR_VAR 0 3
33050: PUSH
33051: LD_INT 0
33053: ST_TO_ADDR
33054: GO 33070
// j := j + 1 ;
33056: LD_ADDR_VAR 0 3
33060: PUSH
33061: LD_VAR 0 3
33065: PUSH
33066: LD_INT 1
33068: PLUS
33069: ST_TO_ADDR
// SetSide ( i , j ) ;
33070: LD_VAR 0 2
33074: PPUSH
33075: LD_VAR 0 3
33079: PPUSH
33080: CALL_OW 235
// end ;
33084: GO 33007
33086: POP
33087: POP
// end ;
33088: LD_VAR 0 1
33092: RET
// export function hHackFog ; begin
33093: LD_INT 0
33095: PPUSH
// FogOff ( true ) ;
33096: LD_INT 1
33098: PPUSH
33099: CALL_OW 344
// end ;
33103: LD_VAR 0 1
33107: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33108: LD_INT 0
33110: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33111: LD_VAR 0 1
33115: PPUSH
33116: LD_VAR 0 2
33120: PPUSH
33121: LD_VAR 0 3
33125: PPUSH
33126: LD_INT 1
33128: PPUSH
33129: LD_INT 1
33131: PPUSH
33132: CALL_OW 483
// CenterOnXY ( x , y ) ;
33136: LD_VAR 0 2
33140: PPUSH
33141: LD_VAR 0 3
33145: PPUSH
33146: CALL_OW 84
// end ;
33150: LD_VAR 0 4
33154: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33155: LD_INT 0
33157: PPUSH
33158: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33159: LD_VAR 0 1
33163: NOT
33164: PUSH
33165: LD_VAR 0 2
33169: PPUSH
33170: LD_VAR 0 3
33174: PPUSH
33175: CALL_OW 488
33179: NOT
33180: OR
33181: PUSH
33182: LD_VAR 0 1
33186: PPUSH
33187: CALL_OW 266
33191: PUSH
33192: LD_INT 3
33194: NONEQUAL
33195: PUSH
33196: LD_VAR 0 1
33200: PPUSH
33201: CALL_OW 247
33205: PUSH
33206: LD_INT 1
33208: EQUAL
33209: NOT
33210: AND
33211: OR
33212: IFFALSE 33216
// exit ;
33214: GO 33365
// if GetType ( factory ) = unit_human then
33216: LD_VAR 0 1
33220: PPUSH
33221: CALL_OW 247
33225: PUSH
33226: LD_INT 1
33228: EQUAL
33229: IFFALSE 33246
// factory := IsInUnit ( factory ) ;
33231: LD_ADDR_VAR 0 1
33235: PUSH
33236: LD_VAR 0 1
33240: PPUSH
33241: CALL_OW 310
33245: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33246: LD_VAR 0 1
33250: PPUSH
33251: CALL_OW 266
33255: PUSH
33256: LD_INT 3
33258: NONEQUAL
33259: IFFALSE 33263
// exit ;
33261: GO 33365
// if HexInfo ( x , y ) = factory then
33263: LD_VAR 0 2
33267: PPUSH
33268: LD_VAR 0 3
33272: PPUSH
33273: CALL_OW 428
33277: PUSH
33278: LD_VAR 0 1
33282: EQUAL
33283: IFFALSE 33310
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33285: LD_ADDR_EXP 138
33289: PUSH
33290: LD_EXP 138
33294: PPUSH
33295: LD_VAR 0 1
33299: PPUSH
33300: LD_INT 0
33302: PPUSH
33303: CALL_OW 1
33307: ST_TO_ADDR
33308: GO 33361
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33310: LD_ADDR_EXP 138
33314: PUSH
33315: LD_EXP 138
33319: PPUSH
33320: LD_VAR 0 1
33324: PPUSH
33325: LD_VAR 0 1
33329: PPUSH
33330: CALL_OW 255
33334: PUSH
33335: LD_VAR 0 1
33339: PUSH
33340: LD_VAR 0 2
33344: PUSH
33345: LD_VAR 0 3
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: PPUSH
33356: CALL_OW 1
33360: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33361: CALL 33370 0 0
// end ;
33365: LD_VAR 0 4
33369: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33370: LD_INT 0
33372: PPUSH
33373: PPUSH
33374: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33375: LD_STRING resetFactoryWaypoint();
33377: PPUSH
33378: CALL_OW 559
// if factoryWaypoints then
33382: LD_EXP 138
33386: IFFALSE 33512
// begin list := PrepareArray ( factoryWaypoints ) ;
33388: LD_ADDR_VAR 0 3
33392: PUSH
33393: LD_EXP 138
33397: PPUSH
33398: CALL 79944 0 1
33402: ST_TO_ADDR
// for i := 1 to list do
33403: LD_ADDR_VAR 0 2
33407: PUSH
33408: DOUBLE
33409: LD_INT 1
33411: DEC
33412: ST_TO_ADDR
33413: LD_VAR 0 3
33417: PUSH
33418: FOR_TO
33419: IFFALSE 33510
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33421: LD_STRING setFactoryWaypointXY(
33423: PUSH
33424: LD_VAR 0 3
33428: PUSH
33429: LD_VAR 0 2
33433: ARRAY
33434: PUSH
33435: LD_INT 1
33437: ARRAY
33438: STR
33439: PUSH
33440: LD_STRING ,
33442: STR
33443: PUSH
33444: LD_VAR 0 3
33448: PUSH
33449: LD_VAR 0 2
33453: ARRAY
33454: PUSH
33455: LD_INT 2
33457: ARRAY
33458: STR
33459: PUSH
33460: LD_STRING ,
33462: STR
33463: PUSH
33464: LD_VAR 0 3
33468: PUSH
33469: LD_VAR 0 2
33473: ARRAY
33474: PUSH
33475: LD_INT 3
33477: ARRAY
33478: STR
33479: PUSH
33480: LD_STRING ,
33482: STR
33483: PUSH
33484: LD_VAR 0 3
33488: PUSH
33489: LD_VAR 0 2
33493: ARRAY
33494: PUSH
33495: LD_INT 4
33497: ARRAY
33498: STR
33499: PUSH
33500: LD_STRING )
33502: STR
33503: PPUSH
33504: CALL_OW 559
33508: GO 33418
33510: POP
33511: POP
// end ; end ;
33512: LD_VAR 0 1
33516: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33517: LD_INT 0
33519: PPUSH
// if HexInfo ( x , y ) = warehouse then
33520: LD_VAR 0 2
33524: PPUSH
33525: LD_VAR 0 3
33529: PPUSH
33530: CALL_OW 428
33534: PUSH
33535: LD_VAR 0 1
33539: EQUAL
33540: IFFALSE 33567
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33542: LD_ADDR_EXP 139
33546: PUSH
33547: LD_EXP 139
33551: PPUSH
33552: LD_VAR 0 1
33556: PPUSH
33557: LD_INT 0
33559: PPUSH
33560: CALL_OW 1
33564: ST_TO_ADDR
33565: GO 33618
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33567: LD_ADDR_EXP 139
33571: PUSH
33572: LD_EXP 139
33576: PPUSH
33577: LD_VAR 0 1
33581: PPUSH
33582: LD_VAR 0 1
33586: PPUSH
33587: CALL_OW 255
33591: PUSH
33592: LD_VAR 0 1
33596: PUSH
33597: LD_VAR 0 2
33601: PUSH
33602: LD_VAR 0 3
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: PPUSH
33613: CALL_OW 1
33617: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33618: CALL 33627 0 0
// end ;
33622: LD_VAR 0 4
33626: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33627: LD_INT 0
33629: PPUSH
33630: PPUSH
33631: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33632: LD_STRING resetWarehouseGatheringPoints();
33634: PPUSH
33635: CALL_OW 559
// if warehouseGatheringPoints then
33639: LD_EXP 139
33643: IFFALSE 33769
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33645: LD_ADDR_VAR 0 3
33649: PUSH
33650: LD_EXP 139
33654: PPUSH
33655: CALL 79944 0 1
33659: ST_TO_ADDR
// for i := 1 to list do
33660: LD_ADDR_VAR 0 2
33664: PUSH
33665: DOUBLE
33666: LD_INT 1
33668: DEC
33669: ST_TO_ADDR
33670: LD_VAR 0 3
33674: PUSH
33675: FOR_TO
33676: IFFALSE 33767
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33678: LD_STRING setWarehouseGatheringPointXY(
33680: PUSH
33681: LD_VAR 0 3
33685: PUSH
33686: LD_VAR 0 2
33690: ARRAY
33691: PUSH
33692: LD_INT 1
33694: ARRAY
33695: STR
33696: PUSH
33697: LD_STRING ,
33699: STR
33700: PUSH
33701: LD_VAR 0 3
33705: PUSH
33706: LD_VAR 0 2
33710: ARRAY
33711: PUSH
33712: LD_INT 2
33714: ARRAY
33715: STR
33716: PUSH
33717: LD_STRING ,
33719: STR
33720: PUSH
33721: LD_VAR 0 3
33725: PUSH
33726: LD_VAR 0 2
33730: ARRAY
33731: PUSH
33732: LD_INT 3
33734: ARRAY
33735: STR
33736: PUSH
33737: LD_STRING ,
33739: STR
33740: PUSH
33741: LD_VAR 0 3
33745: PUSH
33746: LD_VAR 0 2
33750: ARRAY
33751: PUSH
33752: LD_INT 4
33754: ARRAY
33755: STR
33756: PUSH
33757: LD_STRING )
33759: STR
33760: PPUSH
33761: CALL_OW 559
33765: GO 33675
33767: POP
33768: POP
// end ; end ;
33769: LD_VAR 0 1
33773: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33774: LD_EXP 139
33778: IFFALSE 34465
33780: GO 33782
33782: DISABLE
33783: LD_INT 0
33785: PPUSH
33786: PPUSH
33787: PPUSH
33788: PPUSH
33789: PPUSH
33790: PPUSH
33791: PPUSH
33792: PPUSH
33793: PPUSH
// begin enable ;
33794: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33795: LD_ADDR_VAR 0 3
33799: PUSH
33800: LD_EXP 139
33804: PPUSH
33805: CALL 79944 0 1
33809: ST_TO_ADDR
// if not list then
33810: LD_VAR 0 3
33814: NOT
33815: IFFALSE 33819
// exit ;
33817: GO 34465
// for i := 1 to list do
33819: LD_ADDR_VAR 0 1
33823: PUSH
33824: DOUBLE
33825: LD_INT 1
33827: DEC
33828: ST_TO_ADDR
33829: LD_VAR 0 3
33833: PUSH
33834: FOR_TO
33835: IFFALSE 34463
// begin depot := list [ i ] [ 2 ] ;
33837: LD_ADDR_VAR 0 8
33841: PUSH
33842: LD_VAR 0 3
33846: PUSH
33847: LD_VAR 0 1
33851: ARRAY
33852: PUSH
33853: LD_INT 2
33855: ARRAY
33856: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33857: LD_ADDR_VAR 0 5
33861: PUSH
33862: LD_VAR 0 3
33866: PUSH
33867: LD_VAR 0 1
33871: ARRAY
33872: PUSH
33873: LD_INT 1
33875: ARRAY
33876: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33877: LD_VAR 0 8
33881: PPUSH
33882: CALL_OW 301
33886: PUSH
33887: LD_VAR 0 5
33891: PUSH
33892: LD_VAR 0 8
33896: PPUSH
33897: CALL_OW 255
33901: NONEQUAL
33902: OR
33903: IFFALSE 33932
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33905: LD_ADDR_EXP 139
33909: PUSH
33910: LD_EXP 139
33914: PPUSH
33915: LD_VAR 0 8
33919: PPUSH
33920: LD_INT 0
33922: PPUSH
33923: CALL_OW 1
33927: ST_TO_ADDR
// exit ;
33928: POP
33929: POP
33930: GO 34465
// end ; x := list [ i ] [ 3 ] ;
33932: LD_ADDR_VAR 0 6
33936: PUSH
33937: LD_VAR 0 3
33941: PUSH
33942: LD_VAR 0 1
33946: ARRAY
33947: PUSH
33948: LD_INT 3
33950: ARRAY
33951: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33952: LD_ADDR_VAR 0 7
33956: PUSH
33957: LD_VAR 0 3
33961: PUSH
33962: LD_VAR 0 1
33966: ARRAY
33967: PUSH
33968: LD_INT 4
33970: ARRAY
33971: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33972: LD_ADDR_VAR 0 9
33976: PUSH
33977: LD_VAR 0 6
33981: PPUSH
33982: LD_VAR 0 7
33986: PPUSH
33987: LD_INT 16
33989: PPUSH
33990: CALL 78528 0 3
33994: ST_TO_ADDR
// if not cratesNearbyPoint then
33995: LD_VAR 0 9
33999: NOT
34000: IFFALSE 34006
// exit ;
34002: POP
34003: POP
34004: GO 34465
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34006: LD_ADDR_VAR 0 4
34010: PUSH
34011: LD_INT 22
34013: PUSH
34014: LD_VAR 0 5
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 3
34025: PUSH
34026: LD_INT 60
34028: PUSH
34029: EMPTY
34030: LIST
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 91
34038: PUSH
34039: LD_VAR 0 8
34043: PUSH
34044: LD_INT 6
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 2
34054: PUSH
34055: LD_INT 25
34057: PUSH
34058: LD_INT 2
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 25
34067: PUSH
34068: LD_INT 16
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: LIST
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: PPUSH
34086: CALL_OW 69
34090: PUSH
34091: LD_VAR 0 8
34095: PPUSH
34096: CALL_OW 313
34100: PPUSH
34101: LD_INT 3
34103: PUSH
34104: LD_INT 60
34106: PUSH
34107: EMPTY
34108: LIST
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 2
34116: PUSH
34117: LD_INT 25
34119: PUSH
34120: LD_INT 2
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 25
34129: PUSH
34130: LD_INT 16
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: LIST
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PPUSH
34146: CALL_OW 72
34150: UNION
34151: ST_TO_ADDR
// if tmp then
34152: LD_VAR 0 4
34156: IFFALSE 34236
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34158: LD_ADDR_VAR 0 4
34162: PUSH
34163: LD_VAR 0 4
34167: PPUSH
34168: LD_INT 3
34170: PPUSH
34171: CALL 76495 0 2
34175: ST_TO_ADDR
// for j in tmp do
34176: LD_ADDR_VAR 0 2
34180: PUSH
34181: LD_VAR 0 4
34185: PUSH
34186: FOR_IN
34187: IFFALSE 34230
// begin if IsInUnit ( j ) then
34189: LD_VAR 0 2
34193: PPUSH
34194: CALL_OW 310
34198: IFFALSE 34209
// ComExit ( j ) ;
34200: LD_VAR 0 2
34204: PPUSH
34205: CALL 76578 0 1
// AddComCollect ( j , x , y ) ;
34209: LD_VAR 0 2
34213: PPUSH
34214: LD_VAR 0 6
34218: PPUSH
34219: LD_VAR 0 7
34223: PPUSH
34224: CALL_OW 177
// end ;
34228: GO 34186
34230: POP
34231: POP
// exit ;
34232: POP
34233: POP
34234: GO 34465
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34236: LD_ADDR_VAR 0 4
34240: PUSH
34241: LD_INT 22
34243: PUSH
34244: LD_VAR 0 5
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 91
34255: PUSH
34256: LD_VAR 0 8
34260: PUSH
34261: LD_INT 8
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 2
34271: PUSH
34272: LD_INT 34
34274: PUSH
34275: LD_INT 12
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 34
34284: PUSH
34285: LD_INT 51
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 34
34294: PUSH
34295: LD_INT 32
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 34
34304: PUSH
34305: LD_EXP 63
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: LIST
34325: PPUSH
34326: CALL_OW 69
34330: ST_TO_ADDR
// if tmp then
34331: LD_VAR 0 4
34335: IFFALSE 34461
// begin for j in tmp do
34337: LD_ADDR_VAR 0 2
34341: PUSH
34342: LD_VAR 0 4
34346: PUSH
34347: FOR_IN
34348: IFFALSE 34459
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34350: LD_VAR 0 2
34354: PPUSH
34355: CALL_OW 262
34359: PUSH
34360: LD_INT 3
34362: EQUAL
34363: PUSH
34364: LD_VAR 0 2
34368: PPUSH
34369: CALL_OW 261
34373: PUSH
34374: LD_INT 20
34376: GREATER
34377: OR
34378: PUSH
34379: LD_VAR 0 2
34383: PPUSH
34384: CALL_OW 314
34388: NOT
34389: AND
34390: PUSH
34391: LD_VAR 0 2
34395: PPUSH
34396: CALL_OW 263
34400: PUSH
34401: LD_INT 1
34403: NONEQUAL
34404: PUSH
34405: LD_VAR 0 2
34409: PPUSH
34410: CALL_OW 311
34414: OR
34415: AND
34416: IFFALSE 34457
// begin ComCollect ( j , x , y ) ;
34418: LD_VAR 0 2
34422: PPUSH
34423: LD_VAR 0 6
34427: PPUSH
34428: LD_VAR 0 7
34432: PPUSH
34433: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34437: LD_VAR 0 2
34441: PPUSH
34442: LD_VAR 0 8
34446: PPUSH
34447: CALL_OW 172
// exit ;
34451: POP
34452: POP
34453: POP
34454: POP
34455: GO 34465
// end ;
34457: GO 34347
34459: POP
34460: POP
// end ; end ;
34461: GO 33834
34463: POP
34464: POP
// end ; end_of_file
34465: PPOPN 9
34467: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34468: LD_INT 0
34470: PPUSH
34471: PPUSH
34472: PPUSH
34473: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34474: LD_VAR 0 1
34478: PPUSH
34479: CALL_OW 264
34483: PUSH
34484: LD_EXP 66
34488: EQUAL
34489: IFFALSE 34561
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34491: LD_INT 68
34493: PPUSH
34494: LD_VAR 0 1
34498: PPUSH
34499: CALL_OW 255
34503: PPUSH
34504: CALL_OW 321
34508: PUSH
34509: LD_INT 2
34511: EQUAL
34512: IFFALSE 34524
// eff := 70 else
34514: LD_ADDR_VAR 0 4
34518: PUSH
34519: LD_INT 70
34521: ST_TO_ADDR
34522: GO 34532
// eff := 30 ;
34524: LD_ADDR_VAR 0 4
34528: PUSH
34529: LD_INT 30
34531: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34532: LD_VAR 0 1
34536: PPUSH
34537: CALL_OW 250
34541: PPUSH
34542: LD_VAR 0 1
34546: PPUSH
34547: CALL_OW 251
34551: PPUSH
34552: LD_VAR 0 4
34556: PPUSH
34557: CALL_OW 495
// end ; end ;
34561: LD_VAR 0 2
34565: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34566: LD_INT 0
34568: PPUSH
// end ;
34569: LD_VAR 0 4
34573: RET
// export function SOS_Command ( cmd ) ; begin
34574: LD_INT 0
34576: PPUSH
// end ;
34577: LD_VAR 0 2
34581: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34582: LD_INT 0
34584: PPUSH
// end ;
34585: LD_VAR 0 6
34589: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34590: LD_INT 0
34592: PPUSH
34593: PPUSH
// if not vehicle or not factory then
34594: LD_VAR 0 1
34598: NOT
34599: PUSH
34600: LD_VAR 0 2
34604: NOT
34605: OR
34606: IFFALSE 34610
// exit ;
34608: GO 34841
// if factoryWaypoints >= factory then
34610: LD_EXP 138
34614: PUSH
34615: LD_VAR 0 2
34619: GREATEREQUAL
34620: IFFALSE 34841
// if factoryWaypoints [ factory ] then
34622: LD_EXP 138
34626: PUSH
34627: LD_VAR 0 2
34631: ARRAY
34632: IFFALSE 34841
// begin if GetControl ( vehicle ) = control_manual then
34634: LD_VAR 0 1
34638: PPUSH
34639: CALL_OW 263
34643: PUSH
34644: LD_INT 1
34646: EQUAL
34647: IFFALSE 34728
// begin driver := IsDrivenBy ( vehicle ) ;
34649: LD_ADDR_VAR 0 4
34653: PUSH
34654: LD_VAR 0 1
34658: PPUSH
34659: CALL_OW 311
34663: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34664: LD_VAR 0 4
34668: PPUSH
34669: LD_EXP 138
34673: PUSH
34674: LD_VAR 0 2
34678: ARRAY
34679: PUSH
34680: LD_INT 3
34682: ARRAY
34683: PPUSH
34684: LD_EXP 138
34688: PUSH
34689: LD_VAR 0 2
34693: ARRAY
34694: PUSH
34695: LD_INT 4
34697: ARRAY
34698: PPUSH
34699: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34703: LD_VAR 0 4
34707: PPUSH
34708: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34712: LD_VAR 0 4
34716: PPUSH
34717: LD_VAR 0 2
34721: PPUSH
34722: CALL_OW 180
// end else
34726: GO 34841
// if GetControl ( vehicle ) = control_remote then
34728: LD_VAR 0 1
34732: PPUSH
34733: CALL_OW 263
34737: PUSH
34738: LD_INT 2
34740: EQUAL
34741: IFFALSE 34802
// begin wait ( 0 0$2 ) ;
34743: LD_INT 70
34745: PPUSH
34746: CALL_OW 67
// if Connect ( vehicle ) then
34750: LD_VAR 0 1
34754: PPUSH
34755: CALL 46889 0 1
34759: IFFALSE 34800
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34761: LD_VAR 0 1
34765: PPUSH
34766: LD_EXP 138
34770: PUSH
34771: LD_VAR 0 2
34775: ARRAY
34776: PUSH
34777: LD_INT 3
34779: ARRAY
34780: PPUSH
34781: LD_EXP 138
34785: PUSH
34786: LD_VAR 0 2
34790: ARRAY
34791: PUSH
34792: LD_INT 4
34794: ARRAY
34795: PPUSH
34796: CALL_OW 171
// end else
34800: GO 34841
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34802: LD_VAR 0 1
34806: PPUSH
34807: LD_EXP 138
34811: PUSH
34812: LD_VAR 0 2
34816: ARRAY
34817: PUSH
34818: LD_INT 3
34820: ARRAY
34821: PPUSH
34822: LD_EXP 138
34826: PUSH
34827: LD_VAR 0 2
34831: ARRAY
34832: PUSH
34833: LD_INT 4
34835: ARRAY
34836: PPUSH
34837: CALL_OW 171
// end ; end ;
34841: LD_VAR 0 3
34845: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34846: LD_INT 0
34848: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34849: LD_VAR 0 1
34853: PUSH
34854: LD_INT 250
34856: EQUAL
34857: PUSH
34858: LD_VAR 0 2
34862: PPUSH
34863: CALL_OW 264
34867: PUSH
34868: LD_EXP 69
34872: EQUAL
34873: AND
34874: IFFALSE 34895
// MinerPlaceMine ( unit , x , y ) ;
34876: LD_VAR 0 2
34880: PPUSH
34881: LD_VAR 0 4
34885: PPUSH
34886: LD_VAR 0 5
34890: PPUSH
34891: CALL 37294 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34895: LD_VAR 0 1
34899: PUSH
34900: LD_INT 251
34902: EQUAL
34903: PUSH
34904: LD_VAR 0 2
34908: PPUSH
34909: CALL_OW 264
34913: PUSH
34914: LD_EXP 69
34918: EQUAL
34919: AND
34920: IFFALSE 34941
// MinerDetonateMine ( unit , x , y ) ;
34922: LD_VAR 0 2
34926: PPUSH
34927: LD_VAR 0 4
34931: PPUSH
34932: LD_VAR 0 5
34936: PPUSH
34937: CALL 37571 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34941: LD_VAR 0 1
34945: PUSH
34946: LD_INT 252
34948: EQUAL
34949: PUSH
34950: LD_VAR 0 2
34954: PPUSH
34955: CALL_OW 264
34959: PUSH
34960: LD_EXP 69
34964: EQUAL
34965: AND
34966: IFFALSE 34987
// MinerCreateMinefield ( unit , x , y ) ;
34968: LD_VAR 0 2
34972: PPUSH
34973: LD_VAR 0 4
34977: PPUSH
34978: LD_VAR 0 5
34982: PPUSH
34983: CALL 37988 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34987: LD_VAR 0 1
34991: PUSH
34992: LD_INT 253
34994: EQUAL
34995: PUSH
34996: LD_VAR 0 2
35000: PPUSH
35001: CALL_OW 257
35005: PUSH
35006: LD_INT 5
35008: EQUAL
35009: AND
35010: IFFALSE 35031
// ComBinocular ( unit , x , y ) ;
35012: LD_VAR 0 2
35016: PPUSH
35017: LD_VAR 0 4
35021: PPUSH
35022: LD_VAR 0 5
35026: PPUSH
35027: CALL 38359 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35031: LD_VAR 0 1
35035: PUSH
35036: LD_INT 254
35038: EQUAL
35039: PUSH
35040: LD_VAR 0 2
35044: PPUSH
35045: CALL_OW 264
35049: PUSH
35050: LD_EXP 64
35054: EQUAL
35055: AND
35056: PUSH
35057: LD_VAR 0 3
35061: PPUSH
35062: CALL_OW 263
35066: PUSH
35067: LD_INT 3
35069: EQUAL
35070: AND
35071: IFFALSE 35087
// HackDestroyVehicle ( unit , selectedUnit ) ;
35073: LD_VAR 0 2
35077: PPUSH
35078: LD_VAR 0 3
35082: PPUSH
35083: CALL 36654 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35087: LD_VAR 0 1
35091: PUSH
35092: LD_INT 255
35094: EQUAL
35095: PUSH
35096: LD_VAR 0 2
35100: PPUSH
35101: CALL_OW 264
35105: PUSH
35106: LD_INT 14
35108: PUSH
35109: LD_INT 53
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: IN
35116: AND
35117: PUSH
35118: LD_VAR 0 4
35122: PPUSH
35123: LD_VAR 0 5
35127: PPUSH
35128: CALL_OW 488
35132: AND
35133: IFFALSE 35157
// CutTreeXYR ( unit , x , y , 12 ) ;
35135: LD_VAR 0 2
35139: PPUSH
35140: LD_VAR 0 4
35144: PPUSH
35145: LD_VAR 0 5
35149: PPUSH
35150: LD_INT 12
35152: PPUSH
35153: CALL 35220 0 4
// if cmd = 256 then
35157: LD_VAR 0 1
35161: PUSH
35162: LD_INT 256
35164: EQUAL
35165: IFFALSE 35186
// SetFactoryWaypoint ( unit , x , y ) ;
35167: LD_VAR 0 2
35171: PPUSH
35172: LD_VAR 0 4
35176: PPUSH
35177: LD_VAR 0 5
35181: PPUSH
35182: CALL 33155 0 3
// if cmd = 257 then
35186: LD_VAR 0 1
35190: PUSH
35191: LD_INT 257
35193: EQUAL
35194: IFFALSE 35215
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35196: LD_VAR 0 2
35200: PPUSH
35201: LD_VAR 0 4
35205: PPUSH
35206: LD_VAR 0 5
35210: PPUSH
35211: CALL 33517 0 3
// end ;
35215: LD_VAR 0 6
35219: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35220: LD_INT 0
35222: PPUSH
35223: PPUSH
35224: PPUSH
35225: PPUSH
35226: PPUSH
35227: PPUSH
35228: PPUSH
35229: PPUSH
35230: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35231: LD_VAR 0 1
35235: NOT
35236: PUSH
35237: LD_VAR 0 2
35241: PPUSH
35242: LD_VAR 0 3
35246: PPUSH
35247: CALL_OW 488
35251: NOT
35252: OR
35253: PUSH
35254: LD_VAR 0 4
35258: NOT
35259: OR
35260: IFFALSE 35264
// exit ;
35262: GO 35604
// list := [ ] ;
35264: LD_ADDR_VAR 0 13
35268: PUSH
35269: EMPTY
35270: ST_TO_ADDR
// if x - r < 0 then
35271: LD_VAR 0 2
35275: PUSH
35276: LD_VAR 0 4
35280: MINUS
35281: PUSH
35282: LD_INT 0
35284: LESS
35285: IFFALSE 35297
// min_x := 0 else
35287: LD_ADDR_VAR 0 7
35291: PUSH
35292: LD_INT 0
35294: ST_TO_ADDR
35295: GO 35313
// min_x := x - r ;
35297: LD_ADDR_VAR 0 7
35301: PUSH
35302: LD_VAR 0 2
35306: PUSH
35307: LD_VAR 0 4
35311: MINUS
35312: ST_TO_ADDR
// if y - r < 0 then
35313: LD_VAR 0 3
35317: PUSH
35318: LD_VAR 0 4
35322: MINUS
35323: PUSH
35324: LD_INT 0
35326: LESS
35327: IFFALSE 35339
// min_y := 0 else
35329: LD_ADDR_VAR 0 8
35333: PUSH
35334: LD_INT 0
35336: ST_TO_ADDR
35337: GO 35355
// min_y := y - r ;
35339: LD_ADDR_VAR 0 8
35343: PUSH
35344: LD_VAR 0 3
35348: PUSH
35349: LD_VAR 0 4
35353: MINUS
35354: ST_TO_ADDR
// max_x := x + r ;
35355: LD_ADDR_VAR 0 9
35359: PUSH
35360: LD_VAR 0 2
35364: PUSH
35365: LD_VAR 0 4
35369: PLUS
35370: ST_TO_ADDR
// max_y := y + r ;
35371: LD_ADDR_VAR 0 10
35375: PUSH
35376: LD_VAR 0 3
35380: PUSH
35381: LD_VAR 0 4
35385: PLUS
35386: ST_TO_ADDR
// for _x = min_x to max_x do
35387: LD_ADDR_VAR 0 11
35391: PUSH
35392: DOUBLE
35393: LD_VAR 0 7
35397: DEC
35398: ST_TO_ADDR
35399: LD_VAR 0 9
35403: PUSH
35404: FOR_TO
35405: IFFALSE 35522
// for _y = min_y to max_y do
35407: LD_ADDR_VAR 0 12
35411: PUSH
35412: DOUBLE
35413: LD_VAR 0 8
35417: DEC
35418: ST_TO_ADDR
35419: LD_VAR 0 10
35423: PUSH
35424: FOR_TO
35425: IFFALSE 35518
// begin if not ValidHex ( _x , _y ) then
35427: LD_VAR 0 11
35431: PPUSH
35432: LD_VAR 0 12
35436: PPUSH
35437: CALL_OW 488
35441: NOT
35442: IFFALSE 35446
// continue ;
35444: GO 35424
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35446: LD_VAR 0 11
35450: PPUSH
35451: LD_VAR 0 12
35455: PPUSH
35456: CALL_OW 351
35460: PUSH
35461: LD_VAR 0 11
35465: PPUSH
35466: LD_VAR 0 12
35470: PPUSH
35471: CALL_OW 554
35475: AND
35476: IFFALSE 35516
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35478: LD_ADDR_VAR 0 13
35482: PUSH
35483: LD_VAR 0 13
35487: PPUSH
35488: LD_VAR 0 13
35492: PUSH
35493: LD_INT 1
35495: PLUS
35496: PPUSH
35497: LD_VAR 0 11
35501: PUSH
35502: LD_VAR 0 12
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PPUSH
35511: CALL_OW 2
35515: ST_TO_ADDR
// end ;
35516: GO 35424
35518: POP
35519: POP
35520: GO 35404
35522: POP
35523: POP
// if not list then
35524: LD_VAR 0 13
35528: NOT
35529: IFFALSE 35533
// exit ;
35531: GO 35604
// for i in list do
35533: LD_ADDR_VAR 0 6
35537: PUSH
35538: LD_VAR 0 13
35542: PUSH
35543: FOR_IN
35544: IFFALSE 35602
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35546: LD_VAR 0 1
35550: PPUSH
35551: LD_STRING M
35553: PUSH
35554: LD_VAR 0 6
35558: PUSH
35559: LD_INT 1
35561: ARRAY
35562: PUSH
35563: LD_VAR 0 6
35567: PUSH
35568: LD_INT 2
35570: ARRAY
35571: PUSH
35572: LD_INT 0
35574: PUSH
35575: LD_INT 0
35577: PUSH
35578: LD_INT 0
35580: PUSH
35581: LD_INT 0
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: PUSH
35593: EMPTY
35594: LIST
35595: PPUSH
35596: CALL_OW 447
35600: GO 35543
35602: POP
35603: POP
// end ;
35604: LD_VAR 0 5
35608: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35609: LD_EXP 141
35613: NOT
35614: IFFALSE 35664
35616: GO 35618
35618: DISABLE
// begin initHack := true ;
35619: LD_ADDR_EXP 141
35623: PUSH
35624: LD_INT 1
35626: ST_TO_ADDR
// hackTanks := [ ] ;
35627: LD_ADDR_EXP 142
35631: PUSH
35632: EMPTY
35633: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35634: LD_ADDR_EXP 143
35638: PUSH
35639: EMPTY
35640: ST_TO_ADDR
// hackLimit := 3 ;
35641: LD_ADDR_EXP 144
35645: PUSH
35646: LD_INT 3
35648: ST_TO_ADDR
// hackDist := 12 ;
35649: LD_ADDR_EXP 145
35653: PUSH
35654: LD_INT 12
35656: ST_TO_ADDR
// hackCounter := [ ] ;
35657: LD_ADDR_EXP 146
35661: PUSH
35662: EMPTY
35663: ST_TO_ADDR
// end ;
35664: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35665: LD_EXP 141
35669: PUSH
35670: LD_INT 34
35672: PUSH
35673: LD_EXP 64
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PPUSH
35682: CALL_OW 69
35686: AND
35687: IFFALSE 35942
35689: GO 35691
35691: DISABLE
35692: LD_INT 0
35694: PPUSH
35695: PPUSH
// begin enable ;
35696: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35697: LD_ADDR_VAR 0 1
35701: PUSH
35702: LD_INT 34
35704: PUSH
35705: LD_EXP 64
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PPUSH
35714: CALL_OW 69
35718: PUSH
35719: FOR_IN
35720: IFFALSE 35940
// begin if not i in hackTanks then
35722: LD_VAR 0 1
35726: PUSH
35727: LD_EXP 142
35731: IN
35732: NOT
35733: IFFALSE 35816
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35735: LD_ADDR_EXP 142
35739: PUSH
35740: LD_EXP 142
35744: PPUSH
35745: LD_EXP 142
35749: PUSH
35750: LD_INT 1
35752: PLUS
35753: PPUSH
35754: LD_VAR 0 1
35758: PPUSH
35759: CALL_OW 1
35763: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35764: LD_ADDR_EXP 143
35768: PUSH
35769: LD_EXP 143
35773: PPUSH
35774: LD_EXP 143
35778: PUSH
35779: LD_INT 1
35781: PLUS
35782: PPUSH
35783: EMPTY
35784: PPUSH
35785: CALL_OW 1
35789: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35790: LD_ADDR_EXP 146
35794: PUSH
35795: LD_EXP 146
35799: PPUSH
35800: LD_EXP 146
35804: PUSH
35805: LD_INT 1
35807: PLUS
35808: PPUSH
35809: EMPTY
35810: PPUSH
35811: CALL_OW 1
35815: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35816: LD_VAR 0 1
35820: PPUSH
35821: CALL_OW 302
35825: NOT
35826: IFFALSE 35839
// begin HackUnlinkAll ( i ) ;
35828: LD_VAR 0 1
35832: PPUSH
35833: CALL 35945 0 1
// continue ;
35837: GO 35719
// end ; HackCheckCapturedStatus ( i ) ;
35839: LD_VAR 0 1
35843: PPUSH
35844: CALL 36388 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35848: LD_ADDR_VAR 0 2
35852: PUSH
35853: LD_INT 81
35855: PUSH
35856: LD_VAR 0 1
35860: PPUSH
35861: CALL_OW 255
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 33
35872: PUSH
35873: LD_INT 3
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 91
35882: PUSH
35883: LD_VAR 0 1
35887: PUSH
35888: LD_EXP 145
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 50
35900: PUSH
35901: EMPTY
35902: LIST
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: PPUSH
35910: CALL_OW 69
35914: ST_TO_ADDR
// if not tmp then
35915: LD_VAR 0 2
35919: NOT
35920: IFFALSE 35924
// continue ;
35922: GO 35719
// HackLink ( i , tmp ) ;
35924: LD_VAR 0 1
35928: PPUSH
35929: LD_VAR 0 2
35933: PPUSH
35934: CALL 36081 0 2
// end ;
35938: GO 35719
35940: POP
35941: POP
// end ;
35942: PPOPN 2
35944: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35945: LD_INT 0
35947: PPUSH
35948: PPUSH
35949: PPUSH
// if not hack in hackTanks then
35950: LD_VAR 0 1
35954: PUSH
35955: LD_EXP 142
35959: IN
35960: NOT
35961: IFFALSE 35965
// exit ;
35963: GO 36076
// index := GetElementIndex ( hackTanks , hack ) ;
35965: LD_ADDR_VAR 0 4
35969: PUSH
35970: LD_EXP 142
35974: PPUSH
35975: LD_VAR 0 1
35979: PPUSH
35980: CALL 43703 0 2
35984: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35985: LD_EXP 143
35989: PUSH
35990: LD_VAR 0 4
35994: ARRAY
35995: IFFALSE 36076
// begin for i in hackTanksCaptured [ index ] do
35997: LD_ADDR_VAR 0 3
36001: PUSH
36002: LD_EXP 143
36006: PUSH
36007: LD_VAR 0 4
36011: ARRAY
36012: PUSH
36013: FOR_IN
36014: IFFALSE 36040
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36016: LD_VAR 0 3
36020: PUSH
36021: LD_INT 1
36023: ARRAY
36024: PPUSH
36025: LD_VAR 0 3
36029: PUSH
36030: LD_INT 2
36032: ARRAY
36033: PPUSH
36034: CALL_OW 235
36038: GO 36013
36040: POP
36041: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36042: LD_ADDR_EXP 143
36046: PUSH
36047: LD_EXP 143
36051: PPUSH
36052: LD_VAR 0 4
36056: PPUSH
36057: EMPTY
36058: PPUSH
36059: CALL_OW 1
36063: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36064: LD_VAR 0 1
36068: PPUSH
36069: LD_INT 0
36071: PPUSH
36072: CALL_OW 505
// end ; end ;
36076: LD_VAR 0 2
36080: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36081: LD_INT 0
36083: PPUSH
36084: PPUSH
36085: PPUSH
// if not hack in hackTanks or not vehicles then
36086: LD_VAR 0 1
36090: PUSH
36091: LD_EXP 142
36095: IN
36096: NOT
36097: PUSH
36098: LD_VAR 0 2
36102: NOT
36103: OR
36104: IFFALSE 36108
// exit ;
36106: GO 36383
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36108: LD_ADDR_VAR 0 2
36112: PUSH
36113: LD_VAR 0 1
36117: PPUSH
36118: LD_VAR 0 2
36122: PPUSH
36123: LD_INT 1
36125: PPUSH
36126: LD_INT 1
36128: PPUSH
36129: CALL 44353 0 4
36133: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36134: LD_ADDR_VAR 0 5
36138: PUSH
36139: LD_EXP 142
36143: PPUSH
36144: LD_VAR 0 1
36148: PPUSH
36149: CALL 43703 0 2
36153: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36154: LD_EXP 143
36158: PUSH
36159: LD_VAR 0 5
36163: ARRAY
36164: PUSH
36165: LD_EXP 144
36169: LESS
36170: IFFALSE 36359
// begin for i := 1 to vehicles do
36172: LD_ADDR_VAR 0 4
36176: PUSH
36177: DOUBLE
36178: LD_INT 1
36180: DEC
36181: ST_TO_ADDR
36182: LD_VAR 0 2
36186: PUSH
36187: FOR_TO
36188: IFFALSE 36357
// begin if hackTanksCaptured [ index ] = hackLimit then
36190: LD_EXP 143
36194: PUSH
36195: LD_VAR 0 5
36199: ARRAY
36200: PUSH
36201: LD_EXP 144
36205: EQUAL
36206: IFFALSE 36210
// break ;
36208: GO 36357
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36210: LD_ADDR_EXP 146
36214: PUSH
36215: LD_EXP 146
36219: PPUSH
36220: LD_VAR 0 5
36224: PPUSH
36225: LD_EXP 146
36229: PUSH
36230: LD_VAR 0 5
36234: ARRAY
36235: PUSH
36236: LD_INT 1
36238: PLUS
36239: PPUSH
36240: CALL_OW 1
36244: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36245: LD_ADDR_EXP 143
36249: PUSH
36250: LD_EXP 143
36254: PPUSH
36255: LD_VAR 0 5
36259: PUSH
36260: LD_EXP 143
36264: PUSH
36265: LD_VAR 0 5
36269: ARRAY
36270: PUSH
36271: LD_INT 1
36273: PLUS
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PPUSH
36279: LD_VAR 0 2
36283: PUSH
36284: LD_VAR 0 4
36288: ARRAY
36289: PUSH
36290: LD_VAR 0 2
36294: PUSH
36295: LD_VAR 0 4
36299: ARRAY
36300: PPUSH
36301: CALL_OW 255
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PPUSH
36310: CALL 43918 0 3
36314: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36315: LD_VAR 0 2
36319: PUSH
36320: LD_VAR 0 4
36324: ARRAY
36325: PPUSH
36326: LD_VAR 0 1
36330: PPUSH
36331: CALL_OW 255
36335: PPUSH
36336: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36340: LD_VAR 0 2
36344: PUSH
36345: LD_VAR 0 4
36349: ARRAY
36350: PPUSH
36351: CALL_OW 141
// end ;
36355: GO 36187
36357: POP
36358: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36359: LD_VAR 0 1
36363: PPUSH
36364: LD_EXP 143
36368: PUSH
36369: LD_VAR 0 5
36373: ARRAY
36374: PUSH
36375: LD_INT 0
36377: PLUS
36378: PPUSH
36379: CALL_OW 505
// end ;
36383: LD_VAR 0 3
36387: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36388: LD_INT 0
36390: PPUSH
36391: PPUSH
36392: PPUSH
36393: PPUSH
// if not hack in hackTanks then
36394: LD_VAR 0 1
36398: PUSH
36399: LD_EXP 142
36403: IN
36404: NOT
36405: IFFALSE 36409
// exit ;
36407: GO 36649
// index := GetElementIndex ( hackTanks , hack ) ;
36409: LD_ADDR_VAR 0 4
36413: PUSH
36414: LD_EXP 142
36418: PPUSH
36419: LD_VAR 0 1
36423: PPUSH
36424: CALL 43703 0 2
36428: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36429: LD_ADDR_VAR 0 3
36433: PUSH
36434: DOUBLE
36435: LD_EXP 143
36439: PUSH
36440: LD_VAR 0 4
36444: ARRAY
36445: INC
36446: ST_TO_ADDR
36447: LD_INT 1
36449: PUSH
36450: FOR_DOWNTO
36451: IFFALSE 36623
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36453: LD_ADDR_VAR 0 5
36457: PUSH
36458: LD_EXP 143
36462: PUSH
36463: LD_VAR 0 4
36467: ARRAY
36468: PUSH
36469: LD_VAR 0 3
36473: ARRAY
36474: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36475: LD_VAR 0 5
36479: PUSH
36480: LD_INT 1
36482: ARRAY
36483: PPUSH
36484: CALL_OW 302
36488: NOT
36489: PUSH
36490: LD_VAR 0 5
36494: PUSH
36495: LD_INT 1
36497: ARRAY
36498: PPUSH
36499: CALL_OW 255
36503: PUSH
36504: LD_VAR 0 1
36508: PPUSH
36509: CALL_OW 255
36513: NONEQUAL
36514: OR
36515: IFFALSE 36621
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36517: LD_VAR 0 5
36521: PUSH
36522: LD_INT 1
36524: ARRAY
36525: PPUSH
36526: CALL_OW 305
36530: PUSH
36531: LD_VAR 0 5
36535: PUSH
36536: LD_INT 1
36538: ARRAY
36539: PPUSH
36540: CALL_OW 255
36544: PUSH
36545: LD_VAR 0 1
36549: PPUSH
36550: CALL_OW 255
36554: EQUAL
36555: AND
36556: IFFALSE 36580
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36558: LD_VAR 0 5
36562: PUSH
36563: LD_INT 1
36565: ARRAY
36566: PPUSH
36567: LD_VAR 0 5
36571: PUSH
36572: LD_INT 2
36574: ARRAY
36575: PPUSH
36576: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36580: LD_ADDR_EXP 143
36584: PUSH
36585: LD_EXP 143
36589: PPUSH
36590: LD_VAR 0 4
36594: PPUSH
36595: LD_EXP 143
36599: PUSH
36600: LD_VAR 0 4
36604: ARRAY
36605: PPUSH
36606: LD_VAR 0 3
36610: PPUSH
36611: CALL_OW 3
36615: PPUSH
36616: CALL_OW 1
36620: ST_TO_ADDR
// end ; end ;
36621: GO 36450
36623: POP
36624: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36625: LD_VAR 0 1
36629: PPUSH
36630: LD_EXP 143
36634: PUSH
36635: LD_VAR 0 4
36639: ARRAY
36640: PUSH
36641: LD_INT 0
36643: PLUS
36644: PPUSH
36645: CALL_OW 505
// end ;
36649: LD_VAR 0 2
36653: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36654: LD_INT 0
36656: PPUSH
36657: PPUSH
36658: PPUSH
36659: PPUSH
// if not hack in hackTanks then
36660: LD_VAR 0 1
36664: PUSH
36665: LD_EXP 142
36669: IN
36670: NOT
36671: IFFALSE 36675
// exit ;
36673: GO 36760
// index := GetElementIndex ( hackTanks , hack ) ;
36675: LD_ADDR_VAR 0 5
36679: PUSH
36680: LD_EXP 142
36684: PPUSH
36685: LD_VAR 0 1
36689: PPUSH
36690: CALL 43703 0 2
36694: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36695: LD_ADDR_VAR 0 4
36699: PUSH
36700: DOUBLE
36701: LD_INT 1
36703: DEC
36704: ST_TO_ADDR
36705: LD_EXP 143
36709: PUSH
36710: LD_VAR 0 5
36714: ARRAY
36715: PUSH
36716: FOR_TO
36717: IFFALSE 36758
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36719: LD_EXP 143
36723: PUSH
36724: LD_VAR 0 5
36728: ARRAY
36729: PUSH
36730: LD_VAR 0 4
36734: ARRAY
36735: PUSH
36736: LD_INT 1
36738: ARRAY
36739: PUSH
36740: LD_VAR 0 2
36744: EQUAL
36745: IFFALSE 36756
// KillUnit ( vehicle ) ;
36747: LD_VAR 0 2
36751: PPUSH
36752: CALL_OW 66
36756: GO 36716
36758: POP
36759: POP
// end ;
36760: LD_VAR 0 3
36764: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36765: LD_EXP 147
36769: NOT
36770: IFFALSE 36805
36772: GO 36774
36774: DISABLE
// begin initMiner := true ;
36775: LD_ADDR_EXP 147
36779: PUSH
36780: LD_INT 1
36782: ST_TO_ADDR
// minersList := [ ] ;
36783: LD_ADDR_EXP 148
36787: PUSH
36788: EMPTY
36789: ST_TO_ADDR
// minerMinesList := [ ] ;
36790: LD_ADDR_EXP 149
36794: PUSH
36795: EMPTY
36796: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36797: LD_ADDR_EXP 150
36801: PUSH
36802: LD_INT 5
36804: ST_TO_ADDR
// end ;
36805: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36806: LD_EXP 147
36810: PUSH
36811: LD_INT 34
36813: PUSH
36814: LD_EXP 69
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PPUSH
36823: CALL_OW 69
36827: AND
36828: IFFALSE 37291
36830: GO 36832
36832: DISABLE
36833: LD_INT 0
36835: PPUSH
36836: PPUSH
36837: PPUSH
36838: PPUSH
// begin enable ;
36839: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36840: LD_ADDR_VAR 0 1
36844: PUSH
36845: LD_INT 34
36847: PUSH
36848: LD_EXP 69
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PPUSH
36857: CALL_OW 69
36861: PUSH
36862: FOR_IN
36863: IFFALSE 36935
// begin if not i in minersList then
36865: LD_VAR 0 1
36869: PUSH
36870: LD_EXP 148
36874: IN
36875: NOT
36876: IFFALSE 36933
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36878: LD_ADDR_EXP 148
36882: PUSH
36883: LD_EXP 148
36887: PPUSH
36888: LD_EXP 148
36892: PUSH
36893: LD_INT 1
36895: PLUS
36896: PPUSH
36897: LD_VAR 0 1
36901: PPUSH
36902: CALL_OW 1
36906: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36907: LD_ADDR_EXP 149
36911: PUSH
36912: LD_EXP 149
36916: PPUSH
36917: LD_EXP 149
36921: PUSH
36922: LD_INT 1
36924: PLUS
36925: PPUSH
36926: EMPTY
36927: PPUSH
36928: CALL_OW 1
36932: ST_TO_ADDR
// end end ;
36933: GO 36862
36935: POP
36936: POP
// for i := minerMinesList downto 1 do
36937: LD_ADDR_VAR 0 1
36941: PUSH
36942: DOUBLE
36943: LD_EXP 149
36947: INC
36948: ST_TO_ADDR
36949: LD_INT 1
36951: PUSH
36952: FOR_DOWNTO
36953: IFFALSE 37289
// begin if IsLive ( minersList [ i ] ) then
36955: LD_EXP 148
36959: PUSH
36960: LD_VAR 0 1
36964: ARRAY
36965: PPUSH
36966: CALL_OW 300
36970: IFFALSE 36998
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36972: LD_EXP 148
36976: PUSH
36977: LD_VAR 0 1
36981: ARRAY
36982: PPUSH
36983: LD_EXP 149
36987: PUSH
36988: LD_VAR 0 1
36992: ARRAY
36993: PPUSH
36994: CALL_OW 505
// if not minerMinesList [ i ] then
36998: LD_EXP 149
37002: PUSH
37003: LD_VAR 0 1
37007: ARRAY
37008: NOT
37009: IFFALSE 37013
// continue ;
37011: GO 36952
// for j := minerMinesList [ i ] downto 1 do
37013: LD_ADDR_VAR 0 2
37017: PUSH
37018: DOUBLE
37019: LD_EXP 149
37023: PUSH
37024: LD_VAR 0 1
37028: ARRAY
37029: INC
37030: ST_TO_ADDR
37031: LD_INT 1
37033: PUSH
37034: FOR_DOWNTO
37035: IFFALSE 37285
// begin side := GetSide ( minersList [ i ] ) ;
37037: LD_ADDR_VAR 0 3
37041: PUSH
37042: LD_EXP 148
37046: PUSH
37047: LD_VAR 0 1
37051: ARRAY
37052: PPUSH
37053: CALL_OW 255
37057: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37058: LD_ADDR_VAR 0 4
37062: PUSH
37063: LD_EXP 149
37067: PUSH
37068: LD_VAR 0 1
37072: ARRAY
37073: PUSH
37074: LD_VAR 0 2
37078: ARRAY
37079: PUSH
37080: LD_INT 1
37082: ARRAY
37083: PPUSH
37084: LD_EXP 149
37088: PUSH
37089: LD_VAR 0 1
37093: ARRAY
37094: PUSH
37095: LD_VAR 0 2
37099: ARRAY
37100: PUSH
37101: LD_INT 2
37103: ARRAY
37104: PPUSH
37105: CALL_OW 428
37109: ST_TO_ADDR
// if not tmp then
37110: LD_VAR 0 4
37114: NOT
37115: IFFALSE 37119
// continue ;
37117: GO 37034
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37119: LD_VAR 0 4
37123: PUSH
37124: LD_INT 81
37126: PUSH
37127: LD_VAR 0 3
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PPUSH
37136: CALL_OW 69
37140: IN
37141: PUSH
37142: LD_EXP 149
37146: PUSH
37147: LD_VAR 0 1
37151: ARRAY
37152: PUSH
37153: LD_VAR 0 2
37157: ARRAY
37158: PUSH
37159: LD_INT 1
37161: ARRAY
37162: PPUSH
37163: LD_EXP 149
37167: PUSH
37168: LD_VAR 0 1
37172: ARRAY
37173: PUSH
37174: LD_VAR 0 2
37178: ARRAY
37179: PUSH
37180: LD_INT 2
37182: ARRAY
37183: PPUSH
37184: CALL_OW 458
37188: AND
37189: IFFALSE 37283
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37191: LD_EXP 149
37195: PUSH
37196: LD_VAR 0 1
37200: ARRAY
37201: PUSH
37202: LD_VAR 0 2
37206: ARRAY
37207: PUSH
37208: LD_INT 1
37210: ARRAY
37211: PPUSH
37212: LD_EXP 149
37216: PUSH
37217: LD_VAR 0 1
37221: ARRAY
37222: PUSH
37223: LD_VAR 0 2
37227: ARRAY
37228: PUSH
37229: LD_INT 2
37231: ARRAY
37232: PPUSH
37233: LD_VAR 0 3
37237: PPUSH
37238: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37242: LD_ADDR_EXP 149
37246: PUSH
37247: LD_EXP 149
37251: PPUSH
37252: LD_VAR 0 1
37256: PPUSH
37257: LD_EXP 149
37261: PUSH
37262: LD_VAR 0 1
37266: ARRAY
37267: PPUSH
37268: LD_VAR 0 2
37272: PPUSH
37273: CALL_OW 3
37277: PPUSH
37278: CALL_OW 1
37282: ST_TO_ADDR
// end ; end ;
37283: GO 37034
37285: POP
37286: POP
// end ;
37287: GO 36952
37289: POP
37290: POP
// end ;
37291: PPOPN 4
37293: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37294: LD_INT 0
37296: PPUSH
37297: PPUSH
// result := false ;
37298: LD_ADDR_VAR 0 4
37302: PUSH
37303: LD_INT 0
37305: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37306: LD_VAR 0 1
37310: PPUSH
37311: CALL_OW 264
37315: PUSH
37316: LD_EXP 69
37320: EQUAL
37321: NOT
37322: IFFALSE 37326
// exit ;
37324: GO 37566
// index := GetElementIndex ( minersList , unit ) ;
37326: LD_ADDR_VAR 0 5
37330: PUSH
37331: LD_EXP 148
37335: PPUSH
37336: LD_VAR 0 1
37340: PPUSH
37341: CALL 43703 0 2
37345: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37346: LD_EXP 149
37350: PUSH
37351: LD_VAR 0 5
37355: ARRAY
37356: PUSH
37357: LD_EXP 150
37361: GREATEREQUAL
37362: IFFALSE 37366
// exit ;
37364: GO 37566
// ComMoveXY ( unit , x , y ) ;
37366: LD_VAR 0 1
37370: PPUSH
37371: LD_VAR 0 2
37375: PPUSH
37376: LD_VAR 0 3
37380: PPUSH
37381: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37385: LD_INT 35
37387: PPUSH
37388: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37392: LD_VAR 0 1
37396: PPUSH
37397: LD_VAR 0 2
37401: PPUSH
37402: LD_VAR 0 3
37406: PPUSH
37407: CALL 74989 0 3
37411: NOT
37412: PUSH
37413: LD_VAR 0 1
37417: PPUSH
37418: CALL_OW 314
37422: AND
37423: IFFALSE 37427
// exit ;
37425: GO 37566
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37427: LD_VAR 0 2
37431: PPUSH
37432: LD_VAR 0 3
37436: PPUSH
37437: CALL_OW 428
37441: PUSH
37442: LD_VAR 0 1
37446: EQUAL
37447: PUSH
37448: LD_VAR 0 1
37452: PPUSH
37453: CALL_OW 314
37457: NOT
37458: AND
37459: IFFALSE 37385
// PlaySoundXY ( x , y , PlantMine ) ;
37461: LD_VAR 0 2
37465: PPUSH
37466: LD_VAR 0 3
37470: PPUSH
37471: LD_STRING PlantMine
37473: PPUSH
37474: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37478: LD_VAR 0 2
37482: PPUSH
37483: LD_VAR 0 3
37487: PPUSH
37488: LD_VAR 0 1
37492: PPUSH
37493: CALL_OW 255
37497: PPUSH
37498: LD_INT 0
37500: PPUSH
37501: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37505: LD_ADDR_EXP 149
37509: PUSH
37510: LD_EXP 149
37514: PPUSH
37515: LD_VAR 0 5
37519: PUSH
37520: LD_EXP 149
37524: PUSH
37525: LD_VAR 0 5
37529: ARRAY
37530: PUSH
37531: LD_INT 1
37533: PLUS
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PPUSH
37539: LD_VAR 0 2
37543: PUSH
37544: LD_VAR 0 3
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PPUSH
37553: CALL 43918 0 3
37557: ST_TO_ADDR
// result := true ;
37558: LD_ADDR_VAR 0 4
37562: PUSH
37563: LD_INT 1
37565: ST_TO_ADDR
// end ;
37566: LD_VAR 0 4
37570: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37571: LD_INT 0
37573: PPUSH
37574: PPUSH
37575: PPUSH
// if not unit in minersList then
37576: LD_VAR 0 1
37580: PUSH
37581: LD_EXP 148
37585: IN
37586: NOT
37587: IFFALSE 37591
// exit ;
37589: GO 37983
// index := GetElementIndex ( minersList , unit ) ;
37591: LD_ADDR_VAR 0 6
37595: PUSH
37596: LD_EXP 148
37600: PPUSH
37601: LD_VAR 0 1
37605: PPUSH
37606: CALL 43703 0 2
37610: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37611: LD_ADDR_VAR 0 5
37615: PUSH
37616: DOUBLE
37617: LD_EXP 149
37621: PUSH
37622: LD_VAR 0 6
37626: ARRAY
37627: INC
37628: ST_TO_ADDR
37629: LD_INT 1
37631: PUSH
37632: FOR_DOWNTO
37633: IFFALSE 37794
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37635: LD_EXP 149
37639: PUSH
37640: LD_VAR 0 6
37644: ARRAY
37645: PUSH
37646: LD_VAR 0 5
37650: ARRAY
37651: PUSH
37652: LD_INT 1
37654: ARRAY
37655: PUSH
37656: LD_VAR 0 2
37660: EQUAL
37661: PUSH
37662: LD_EXP 149
37666: PUSH
37667: LD_VAR 0 6
37671: ARRAY
37672: PUSH
37673: LD_VAR 0 5
37677: ARRAY
37678: PUSH
37679: LD_INT 2
37681: ARRAY
37682: PUSH
37683: LD_VAR 0 3
37687: EQUAL
37688: AND
37689: IFFALSE 37792
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37691: LD_EXP 149
37695: PUSH
37696: LD_VAR 0 6
37700: ARRAY
37701: PUSH
37702: LD_VAR 0 5
37706: ARRAY
37707: PUSH
37708: LD_INT 1
37710: ARRAY
37711: PPUSH
37712: LD_EXP 149
37716: PUSH
37717: LD_VAR 0 6
37721: ARRAY
37722: PUSH
37723: LD_VAR 0 5
37727: ARRAY
37728: PUSH
37729: LD_INT 2
37731: ARRAY
37732: PPUSH
37733: LD_VAR 0 1
37737: PPUSH
37738: CALL_OW 255
37742: PPUSH
37743: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37747: LD_ADDR_EXP 149
37751: PUSH
37752: LD_EXP 149
37756: PPUSH
37757: LD_VAR 0 6
37761: PPUSH
37762: LD_EXP 149
37766: PUSH
37767: LD_VAR 0 6
37771: ARRAY
37772: PPUSH
37773: LD_VAR 0 5
37777: PPUSH
37778: CALL_OW 3
37782: PPUSH
37783: CALL_OW 1
37787: ST_TO_ADDR
// exit ;
37788: POP
37789: POP
37790: GO 37983
// end ; end ;
37792: GO 37632
37794: POP
37795: POP
// for i := minerMinesList [ index ] downto 1 do
37796: LD_ADDR_VAR 0 5
37800: PUSH
37801: DOUBLE
37802: LD_EXP 149
37806: PUSH
37807: LD_VAR 0 6
37811: ARRAY
37812: INC
37813: ST_TO_ADDR
37814: LD_INT 1
37816: PUSH
37817: FOR_DOWNTO
37818: IFFALSE 37981
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37820: LD_EXP 149
37824: PUSH
37825: LD_VAR 0 6
37829: ARRAY
37830: PUSH
37831: LD_VAR 0 5
37835: ARRAY
37836: PUSH
37837: LD_INT 1
37839: ARRAY
37840: PPUSH
37841: LD_EXP 149
37845: PUSH
37846: LD_VAR 0 6
37850: ARRAY
37851: PUSH
37852: LD_VAR 0 5
37856: ARRAY
37857: PUSH
37858: LD_INT 2
37860: ARRAY
37861: PPUSH
37862: LD_VAR 0 2
37866: PPUSH
37867: LD_VAR 0 3
37871: PPUSH
37872: CALL_OW 298
37876: PUSH
37877: LD_INT 6
37879: LESS
37880: IFFALSE 37979
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37882: LD_EXP 149
37886: PUSH
37887: LD_VAR 0 6
37891: ARRAY
37892: PUSH
37893: LD_VAR 0 5
37897: ARRAY
37898: PUSH
37899: LD_INT 1
37901: ARRAY
37902: PPUSH
37903: LD_EXP 149
37907: PUSH
37908: LD_VAR 0 6
37912: ARRAY
37913: PUSH
37914: LD_VAR 0 5
37918: ARRAY
37919: PUSH
37920: LD_INT 2
37922: ARRAY
37923: PPUSH
37924: LD_VAR 0 1
37928: PPUSH
37929: CALL_OW 255
37933: PPUSH
37934: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37938: LD_ADDR_EXP 149
37942: PUSH
37943: LD_EXP 149
37947: PPUSH
37948: LD_VAR 0 6
37952: PPUSH
37953: LD_EXP 149
37957: PUSH
37958: LD_VAR 0 6
37962: ARRAY
37963: PPUSH
37964: LD_VAR 0 5
37968: PPUSH
37969: CALL_OW 3
37973: PPUSH
37974: CALL_OW 1
37978: ST_TO_ADDR
// end ; end ;
37979: GO 37817
37981: POP
37982: POP
// end ;
37983: LD_VAR 0 4
37987: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37988: LD_INT 0
37990: PPUSH
37991: PPUSH
37992: PPUSH
37993: PPUSH
37994: PPUSH
37995: PPUSH
37996: PPUSH
37997: PPUSH
37998: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37999: LD_VAR 0 1
38003: PPUSH
38004: CALL_OW 264
38008: PUSH
38009: LD_EXP 69
38013: EQUAL
38014: NOT
38015: PUSH
38016: LD_VAR 0 1
38020: PUSH
38021: LD_EXP 148
38025: IN
38026: NOT
38027: OR
38028: IFFALSE 38032
// exit ;
38030: GO 38354
// index := GetElementIndex ( minersList , unit ) ;
38032: LD_ADDR_VAR 0 6
38036: PUSH
38037: LD_EXP 148
38041: PPUSH
38042: LD_VAR 0 1
38046: PPUSH
38047: CALL 43703 0 2
38051: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38052: LD_ADDR_VAR 0 8
38056: PUSH
38057: LD_EXP 150
38061: PUSH
38062: LD_EXP 149
38066: PUSH
38067: LD_VAR 0 6
38071: ARRAY
38072: MINUS
38073: ST_TO_ADDR
// if not minesFreeAmount then
38074: LD_VAR 0 8
38078: NOT
38079: IFFALSE 38083
// exit ;
38081: GO 38354
// tmp := [ ] ;
38083: LD_ADDR_VAR 0 7
38087: PUSH
38088: EMPTY
38089: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38090: LD_ADDR_VAR 0 5
38094: PUSH
38095: DOUBLE
38096: LD_INT 1
38098: DEC
38099: ST_TO_ADDR
38100: LD_VAR 0 8
38104: PUSH
38105: FOR_TO
38106: IFFALSE 38301
// begin _d := rand ( 0 , 5 ) ;
38108: LD_ADDR_VAR 0 11
38112: PUSH
38113: LD_INT 0
38115: PPUSH
38116: LD_INT 5
38118: PPUSH
38119: CALL_OW 12
38123: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38124: LD_ADDR_VAR 0 12
38128: PUSH
38129: LD_INT 2
38131: PPUSH
38132: LD_INT 6
38134: PPUSH
38135: CALL_OW 12
38139: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38140: LD_ADDR_VAR 0 9
38144: PUSH
38145: LD_VAR 0 2
38149: PPUSH
38150: LD_VAR 0 11
38154: PPUSH
38155: LD_VAR 0 12
38159: PPUSH
38160: CALL_OW 272
38164: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38165: LD_ADDR_VAR 0 10
38169: PUSH
38170: LD_VAR 0 3
38174: PPUSH
38175: LD_VAR 0 11
38179: PPUSH
38180: LD_VAR 0 12
38184: PPUSH
38185: CALL_OW 273
38189: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38190: LD_VAR 0 9
38194: PPUSH
38195: LD_VAR 0 10
38199: PPUSH
38200: CALL_OW 488
38204: PUSH
38205: LD_VAR 0 9
38209: PUSH
38210: LD_VAR 0 10
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_VAR 0 7
38223: IN
38224: NOT
38225: AND
38226: PUSH
38227: LD_VAR 0 9
38231: PPUSH
38232: LD_VAR 0 10
38236: PPUSH
38237: CALL_OW 458
38241: NOT
38242: AND
38243: IFFALSE 38285
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38245: LD_ADDR_VAR 0 7
38249: PUSH
38250: LD_VAR 0 7
38254: PPUSH
38255: LD_VAR 0 7
38259: PUSH
38260: LD_INT 1
38262: PLUS
38263: PPUSH
38264: LD_VAR 0 9
38268: PUSH
38269: LD_VAR 0 10
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PPUSH
38278: CALL_OW 1
38282: ST_TO_ADDR
38283: GO 38299
// i := i - 1 ;
38285: LD_ADDR_VAR 0 5
38289: PUSH
38290: LD_VAR 0 5
38294: PUSH
38295: LD_INT 1
38297: MINUS
38298: ST_TO_ADDR
// end ;
38299: GO 38105
38301: POP
38302: POP
// for i in tmp do
38303: LD_ADDR_VAR 0 5
38307: PUSH
38308: LD_VAR 0 7
38312: PUSH
38313: FOR_IN
38314: IFFALSE 38352
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38316: LD_VAR 0 1
38320: PPUSH
38321: LD_VAR 0 5
38325: PUSH
38326: LD_INT 1
38328: ARRAY
38329: PPUSH
38330: LD_VAR 0 5
38334: PUSH
38335: LD_INT 2
38337: ARRAY
38338: PPUSH
38339: CALL 37294 0 3
38343: NOT
38344: IFFALSE 38350
// exit ;
38346: POP
38347: POP
38348: GO 38354
38350: GO 38313
38352: POP
38353: POP
// end ;
38354: LD_VAR 0 4
38358: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38359: LD_INT 0
38361: PPUSH
38362: PPUSH
38363: PPUSH
38364: PPUSH
38365: PPUSH
38366: PPUSH
38367: PPUSH
// if not GetClass ( unit ) = class_sniper then
38368: LD_VAR 0 1
38372: PPUSH
38373: CALL_OW 257
38377: PUSH
38378: LD_INT 5
38380: EQUAL
38381: NOT
38382: IFFALSE 38386
// exit ;
38384: GO 38774
// dist := 8 ;
38386: LD_ADDR_VAR 0 5
38390: PUSH
38391: LD_INT 8
38393: ST_TO_ADDR
// viewRange := 12 ;
38394: LD_ADDR_VAR 0 7
38398: PUSH
38399: LD_INT 12
38401: ST_TO_ADDR
// side := GetSide ( unit ) ;
38402: LD_ADDR_VAR 0 6
38406: PUSH
38407: LD_VAR 0 1
38411: PPUSH
38412: CALL_OW 255
38416: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38417: LD_INT 61
38419: PPUSH
38420: LD_VAR 0 6
38424: PPUSH
38425: CALL_OW 321
38429: PUSH
38430: LD_INT 2
38432: EQUAL
38433: IFFALSE 38443
// viewRange := 16 ;
38435: LD_ADDR_VAR 0 7
38439: PUSH
38440: LD_INT 16
38442: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38443: LD_VAR 0 1
38447: PPUSH
38448: LD_VAR 0 2
38452: PPUSH
38453: LD_VAR 0 3
38457: PPUSH
38458: CALL_OW 297
38462: PUSH
38463: LD_VAR 0 5
38467: GREATER
38468: IFFALSE 38547
// begin ComMoveXY ( unit , x , y ) ;
38470: LD_VAR 0 1
38474: PPUSH
38475: LD_VAR 0 2
38479: PPUSH
38480: LD_VAR 0 3
38484: PPUSH
38485: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38489: LD_INT 35
38491: PPUSH
38492: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38496: LD_VAR 0 1
38500: PPUSH
38501: LD_VAR 0 2
38505: PPUSH
38506: LD_VAR 0 3
38510: PPUSH
38511: CALL 74989 0 3
38515: NOT
38516: IFFALSE 38520
// exit ;
38518: GO 38774
// until GetDistUnitXY ( unit , x , y ) < dist ;
38520: LD_VAR 0 1
38524: PPUSH
38525: LD_VAR 0 2
38529: PPUSH
38530: LD_VAR 0 3
38534: PPUSH
38535: CALL_OW 297
38539: PUSH
38540: LD_VAR 0 5
38544: LESS
38545: IFFALSE 38489
// end ; ComTurnXY ( unit , x , y ) ;
38547: LD_VAR 0 1
38551: PPUSH
38552: LD_VAR 0 2
38556: PPUSH
38557: LD_VAR 0 3
38561: PPUSH
38562: CALL_OW 118
// wait ( 5 ) ;
38566: LD_INT 5
38568: PPUSH
38569: CALL_OW 67
// _d := GetDir ( unit ) ;
38573: LD_ADDR_VAR 0 10
38577: PUSH
38578: LD_VAR 0 1
38582: PPUSH
38583: CALL_OW 254
38587: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38588: LD_ADDR_VAR 0 8
38592: PUSH
38593: LD_VAR 0 1
38597: PPUSH
38598: CALL_OW 250
38602: PPUSH
38603: LD_VAR 0 10
38607: PPUSH
38608: LD_VAR 0 5
38612: PPUSH
38613: CALL_OW 272
38617: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38618: LD_ADDR_VAR 0 9
38622: PUSH
38623: LD_VAR 0 1
38627: PPUSH
38628: CALL_OW 251
38632: PPUSH
38633: LD_VAR 0 10
38637: PPUSH
38638: LD_VAR 0 5
38642: PPUSH
38643: CALL_OW 273
38647: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38648: LD_VAR 0 8
38652: PPUSH
38653: LD_VAR 0 9
38657: PPUSH
38658: CALL_OW 488
38662: NOT
38663: IFFALSE 38667
// exit ;
38665: GO 38774
// ComAnimCustom ( unit , 1 ) ;
38667: LD_VAR 0 1
38671: PPUSH
38672: LD_INT 1
38674: PPUSH
38675: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38679: LD_VAR 0 8
38683: PPUSH
38684: LD_VAR 0 9
38688: PPUSH
38689: LD_VAR 0 6
38693: PPUSH
38694: LD_VAR 0 7
38698: PPUSH
38699: CALL_OW 330
// repeat wait ( 1 ) ;
38703: LD_INT 1
38705: PPUSH
38706: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38710: LD_VAR 0 1
38714: PPUSH
38715: CALL_OW 316
38719: PUSH
38720: LD_VAR 0 1
38724: PPUSH
38725: CALL_OW 314
38729: OR
38730: PUSH
38731: LD_VAR 0 1
38735: PPUSH
38736: CALL_OW 302
38740: NOT
38741: OR
38742: PUSH
38743: LD_VAR 0 1
38747: PPUSH
38748: CALL_OW 301
38752: OR
38753: IFFALSE 38703
// RemoveSeeing ( _x , _y , side ) ;
38755: LD_VAR 0 8
38759: PPUSH
38760: LD_VAR 0 9
38764: PPUSH
38765: LD_VAR 0 6
38769: PPUSH
38770: CALL_OW 331
// end ; end_of_file
38774: LD_VAR 0 4
38778: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38779: LD_INT 0
38781: PPUSH
38782: PPUSH
// if exist_mode then
38783: LD_VAR 0 2
38787: IFFALSE 38812
// unit := CreateCharacter ( prefix & ident ) else
38789: LD_ADDR_VAR 0 5
38793: PUSH
38794: LD_VAR 0 3
38798: PUSH
38799: LD_VAR 0 1
38803: STR
38804: PPUSH
38805: CALL_OW 34
38809: ST_TO_ADDR
38810: GO 38827
// unit := NewCharacter ( ident ) ;
38812: LD_ADDR_VAR 0 5
38816: PUSH
38817: LD_VAR 0 1
38821: PPUSH
38822: CALL_OW 25
38826: ST_TO_ADDR
// result := unit ;
38827: LD_ADDR_VAR 0 4
38831: PUSH
38832: LD_VAR 0 5
38836: ST_TO_ADDR
// end ;
38837: LD_VAR 0 4
38841: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38842: LD_INT 0
38844: PPUSH
38845: PPUSH
// if not side or not nation then
38846: LD_VAR 0 1
38850: NOT
38851: PUSH
38852: LD_VAR 0 2
38856: NOT
38857: OR
38858: IFFALSE 38862
// exit ;
38860: GO 39630
// case nation of nation_american :
38862: LD_VAR 0 2
38866: PUSH
38867: LD_INT 1
38869: DOUBLE
38870: EQUAL
38871: IFTRUE 38875
38873: GO 39089
38875: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38876: LD_ADDR_VAR 0 4
38880: PUSH
38881: LD_INT 35
38883: PUSH
38884: LD_INT 45
38886: PUSH
38887: LD_INT 46
38889: PUSH
38890: LD_INT 47
38892: PUSH
38893: LD_INT 82
38895: PUSH
38896: LD_INT 83
38898: PUSH
38899: LD_INT 84
38901: PUSH
38902: LD_INT 85
38904: PUSH
38905: LD_INT 86
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: LD_INT 2
38913: PUSH
38914: LD_INT 6
38916: PUSH
38917: LD_INT 15
38919: PUSH
38920: LD_INT 16
38922: PUSH
38923: LD_INT 7
38925: PUSH
38926: LD_INT 12
38928: PUSH
38929: LD_INT 13
38931: PUSH
38932: LD_INT 10
38934: PUSH
38935: LD_INT 14
38937: PUSH
38938: LD_INT 20
38940: PUSH
38941: LD_INT 21
38943: PUSH
38944: LD_INT 22
38946: PUSH
38947: LD_INT 25
38949: PUSH
38950: LD_INT 32
38952: PUSH
38953: LD_INT 27
38955: PUSH
38956: LD_INT 36
38958: PUSH
38959: LD_INT 69
38961: PUSH
38962: LD_INT 39
38964: PUSH
38965: LD_INT 34
38967: PUSH
38968: LD_INT 40
38970: PUSH
38971: LD_INT 48
38973: PUSH
38974: LD_INT 49
38976: PUSH
38977: LD_INT 50
38979: PUSH
38980: LD_INT 51
38982: PUSH
38983: LD_INT 52
38985: PUSH
38986: LD_INT 53
38988: PUSH
38989: LD_INT 54
38991: PUSH
38992: LD_INT 55
38994: PUSH
38995: LD_INT 56
38997: PUSH
38998: LD_INT 57
39000: PUSH
39001: LD_INT 58
39003: PUSH
39004: LD_INT 59
39006: PUSH
39007: LD_INT 60
39009: PUSH
39010: LD_INT 61
39012: PUSH
39013: LD_INT 62
39015: PUSH
39016: LD_INT 80
39018: PUSH
39019: LD_INT 82
39021: PUSH
39022: LD_INT 83
39024: PUSH
39025: LD_INT 84
39027: PUSH
39028: LD_INT 85
39030: PUSH
39031: LD_INT 86
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: ST_TO_ADDR
39087: GO 39554
39089: LD_INT 2
39091: DOUBLE
39092: EQUAL
39093: IFTRUE 39097
39095: GO 39323
39097: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39098: LD_ADDR_VAR 0 4
39102: PUSH
39103: LD_INT 35
39105: PUSH
39106: LD_INT 45
39108: PUSH
39109: LD_INT 46
39111: PUSH
39112: LD_INT 47
39114: PUSH
39115: LD_INT 82
39117: PUSH
39118: LD_INT 83
39120: PUSH
39121: LD_INT 84
39123: PUSH
39124: LD_INT 85
39126: PUSH
39127: LD_INT 87
39129: PUSH
39130: LD_INT 70
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: LD_INT 11
39138: PUSH
39139: LD_INT 3
39141: PUSH
39142: LD_INT 4
39144: PUSH
39145: LD_INT 5
39147: PUSH
39148: LD_INT 6
39150: PUSH
39151: LD_INT 15
39153: PUSH
39154: LD_INT 18
39156: PUSH
39157: LD_INT 7
39159: PUSH
39160: LD_INT 17
39162: PUSH
39163: LD_INT 8
39165: PUSH
39166: LD_INT 20
39168: PUSH
39169: LD_INT 21
39171: PUSH
39172: LD_INT 22
39174: PUSH
39175: LD_INT 72
39177: PUSH
39178: LD_INT 26
39180: PUSH
39181: LD_INT 69
39183: PUSH
39184: LD_INT 39
39186: PUSH
39187: LD_INT 40
39189: PUSH
39190: LD_INT 41
39192: PUSH
39193: LD_INT 42
39195: PUSH
39196: LD_INT 43
39198: PUSH
39199: LD_INT 48
39201: PUSH
39202: LD_INT 49
39204: PUSH
39205: LD_INT 50
39207: PUSH
39208: LD_INT 51
39210: PUSH
39211: LD_INT 52
39213: PUSH
39214: LD_INT 53
39216: PUSH
39217: LD_INT 54
39219: PUSH
39220: LD_INT 55
39222: PUSH
39223: LD_INT 56
39225: PUSH
39226: LD_INT 60
39228: PUSH
39229: LD_INT 61
39231: PUSH
39232: LD_INT 62
39234: PUSH
39235: LD_INT 66
39237: PUSH
39238: LD_INT 67
39240: PUSH
39241: LD_INT 68
39243: PUSH
39244: LD_INT 81
39246: PUSH
39247: LD_INT 82
39249: PUSH
39250: LD_INT 83
39252: PUSH
39253: LD_INT 84
39255: PUSH
39256: LD_INT 85
39258: PUSH
39259: LD_INT 87
39261: PUSH
39262: LD_INT 88
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: ST_TO_ADDR
39321: GO 39554
39323: LD_INT 3
39325: DOUBLE
39326: EQUAL
39327: IFTRUE 39331
39329: GO 39553
39331: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39332: LD_ADDR_VAR 0 4
39336: PUSH
39337: LD_INT 46
39339: PUSH
39340: LD_INT 47
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: LD_INT 2
39348: PUSH
39349: LD_INT 82
39351: PUSH
39352: LD_INT 83
39354: PUSH
39355: LD_INT 84
39357: PUSH
39358: LD_INT 85
39360: PUSH
39361: LD_INT 86
39363: PUSH
39364: LD_INT 11
39366: PUSH
39367: LD_INT 9
39369: PUSH
39370: LD_INT 20
39372: PUSH
39373: LD_INT 19
39375: PUSH
39376: LD_INT 21
39378: PUSH
39379: LD_INT 24
39381: PUSH
39382: LD_INT 22
39384: PUSH
39385: LD_INT 25
39387: PUSH
39388: LD_INT 28
39390: PUSH
39391: LD_INT 29
39393: PUSH
39394: LD_INT 30
39396: PUSH
39397: LD_INT 31
39399: PUSH
39400: LD_INT 37
39402: PUSH
39403: LD_INT 38
39405: PUSH
39406: LD_INT 32
39408: PUSH
39409: LD_INT 27
39411: PUSH
39412: LD_INT 33
39414: PUSH
39415: LD_INT 69
39417: PUSH
39418: LD_INT 39
39420: PUSH
39421: LD_INT 34
39423: PUSH
39424: LD_INT 40
39426: PUSH
39427: LD_INT 71
39429: PUSH
39430: LD_INT 23
39432: PUSH
39433: LD_INT 44
39435: PUSH
39436: LD_INT 48
39438: PUSH
39439: LD_INT 49
39441: PUSH
39442: LD_INT 50
39444: PUSH
39445: LD_INT 51
39447: PUSH
39448: LD_INT 52
39450: PUSH
39451: LD_INT 53
39453: PUSH
39454: LD_INT 54
39456: PUSH
39457: LD_INT 55
39459: PUSH
39460: LD_INT 56
39462: PUSH
39463: LD_INT 57
39465: PUSH
39466: LD_INT 58
39468: PUSH
39469: LD_INT 59
39471: PUSH
39472: LD_INT 63
39474: PUSH
39475: LD_INT 64
39477: PUSH
39478: LD_INT 65
39480: PUSH
39481: LD_INT 82
39483: PUSH
39484: LD_INT 83
39486: PUSH
39487: LD_INT 84
39489: PUSH
39490: LD_INT 85
39492: PUSH
39493: LD_INT 86
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: ST_TO_ADDR
39551: GO 39554
39553: POP
// if state > - 1 and state < 3 then
39554: LD_VAR 0 3
39558: PUSH
39559: LD_INT 1
39561: NEG
39562: GREATER
39563: PUSH
39564: LD_VAR 0 3
39568: PUSH
39569: LD_INT 3
39571: LESS
39572: AND
39573: IFFALSE 39630
// for i in result do
39575: LD_ADDR_VAR 0 5
39579: PUSH
39580: LD_VAR 0 4
39584: PUSH
39585: FOR_IN
39586: IFFALSE 39628
// if GetTech ( i , side ) <> state then
39588: LD_VAR 0 5
39592: PPUSH
39593: LD_VAR 0 1
39597: PPUSH
39598: CALL_OW 321
39602: PUSH
39603: LD_VAR 0 3
39607: NONEQUAL
39608: IFFALSE 39626
// result := result diff i ;
39610: LD_ADDR_VAR 0 4
39614: PUSH
39615: LD_VAR 0 4
39619: PUSH
39620: LD_VAR 0 5
39624: DIFF
39625: ST_TO_ADDR
39626: GO 39585
39628: POP
39629: POP
// end ;
39630: LD_VAR 0 4
39634: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39635: LD_INT 0
39637: PPUSH
39638: PPUSH
39639: PPUSH
// result := true ;
39640: LD_ADDR_VAR 0 3
39644: PUSH
39645: LD_INT 1
39647: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39648: LD_ADDR_VAR 0 5
39652: PUSH
39653: LD_VAR 0 2
39657: PPUSH
39658: CALL_OW 480
39662: ST_TO_ADDR
// if not tmp then
39663: LD_VAR 0 5
39667: NOT
39668: IFFALSE 39672
// exit ;
39670: GO 39721
// for i in tmp do
39672: LD_ADDR_VAR 0 4
39676: PUSH
39677: LD_VAR 0 5
39681: PUSH
39682: FOR_IN
39683: IFFALSE 39719
// if GetTech ( i , side ) <> state_researched then
39685: LD_VAR 0 4
39689: PPUSH
39690: LD_VAR 0 1
39694: PPUSH
39695: CALL_OW 321
39699: PUSH
39700: LD_INT 2
39702: NONEQUAL
39703: IFFALSE 39717
// begin result := false ;
39705: LD_ADDR_VAR 0 3
39709: PUSH
39710: LD_INT 0
39712: ST_TO_ADDR
// exit ;
39713: POP
39714: POP
39715: GO 39721
// end ;
39717: GO 39682
39719: POP
39720: POP
// end ;
39721: LD_VAR 0 3
39725: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39726: LD_INT 0
39728: PPUSH
39729: PPUSH
39730: PPUSH
39731: PPUSH
39732: PPUSH
39733: PPUSH
39734: PPUSH
39735: PPUSH
39736: PPUSH
39737: PPUSH
39738: PPUSH
39739: PPUSH
39740: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39741: LD_VAR 0 1
39745: NOT
39746: PUSH
39747: LD_VAR 0 1
39751: PPUSH
39752: CALL_OW 257
39756: PUSH
39757: LD_INT 9
39759: NONEQUAL
39760: OR
39761: IFFALSE 39765
// exit ;
39763: GO 40338
// side := GetSide ( unit ) ;
39765: LD_ADDR_VAR 0 9
39769: PUSH
39770: LD_VAR 0 1
39774: PPUSH
39775: CALL_OW 255
39779: ST_TO_ADDR
// tech_space := tech_spacanom ;
39780: LD_ADDR_VAR 0 12
39784: PUSH
39785: LD_INT 29
39787: ST_TO_ADDR
// tech_time := tech_taurad ;
39788: LD_ADDR_VAR 0 13
39792: PUSH
39793: LD_INT 28
39795: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39796: LD_ADDR_VAR 0 11
39800: PUSH
39801: LD_VAR 0 1
39805: PPUSH
39806: CALL_OW 310
39810: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39811: LD_VAR 0 11
39815: PPUSH
39816: CALL_OW 247
39820: PUSH
39821: LD_INT 2
39823: EQUAL
39824: IFFALSE 39828
// exit ;
39826: GO 40338
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39828: LD_ADDR_VAR 0 8
39832: PUSH
39833: LD_INT 81
39835: PUSH
39836: LD_VAR 0 9
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 3
39847: PUSH
39848: LD_INT 21
39850: PUSH
39851: LD_INT 3
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PPUSH
39866: CALL_OW 69
39870: ST_TO_ADDR
// if not tmp then
39871: LD_VAR 0 8
39875: NOT
39876: IFFALSE 39880
// exit ;
39878: GO 40338
// if in_unit then
39880: LD_VAR 0 11
39884: IFFALSE 39908
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39886: LD_ADDR_VAR 0 10
39890: PUSH
39891: LD_VAR 0 8
39895: PPUSH
39896: LD_VAR 0 11
39900: PPUSH
39901: CALL_OW 74
39905: ST_TO_ADDR
39906: GO 39928
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39908: LD_ADDR_VAR 0 10
39912: PUSH
39913: LD_VAR 0 8
39917: PPUSH
39918: LD_VAR 0 1
39922: PPUSH
39923: CALL_OW 74
39927: ST_TO_ADDR
// if not enemy then
39928: LD_VAR 0 10
39932: NOT
39933: IFFALSE 39937
// exit ;
39935: GO 40338
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39937: LD_VAR 0 11
39941: PUSH
39942: LD_VAR 0 11
39946: PPUSH
39947: LD_VAR 0 10
39951: PPUSH
39952: CALL_OW 296
39956: PUSH
39957: LD_INT 13
39959: GREATER
39960: AND
39961: PUSH
39962: LD_VAR 0 1
39966: PPUSH
39967: LD_VAR 0 10
39971: PPUSH
39972: CALL_OW 296
39976: PUSH
39977: LD_INT 12
39979: GREATER
39980: OR
39981: IFFALSE 39985
// exit ;
39983: GO 40338
// missile := [ 1 ] ;
39985: LD_ADDR_VAR 0 14
39989: PUSH
39990: LD_INT 1
39992: PUSH
39993: EMPTY
39994: LIST
39995: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39996: LD_VAR 0 9
40000: PPUSH
40001: LD_VAR 0 12
40005: PPUSH
40006: CALL_OW 325
40010: IFFALSE 40039
// missile := Replace ( missile , missile + 1 , 2 ) ;
40012: LD_ADDR_VAR 0 14
40016: PUSH
40017: LD_VAR 0 14
40021: PPUSH
40022: LD_VAR 0 14
40026: PUSH
40027: LD_INT 1
40029: PLUS
40030: PPUSH
40031: LD_INT 2
40033: PPUSH
40034: CALL_OW 1
40038: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40039: LD_VAR 0 9
40043: PPUSH
40044: LD_VAR 0 13
40048: PPUSH
40049: CALL_OW 325
40053: PUSH
40054: LD_VAR 0 10
40058: PPUSH
40059: CALL_OW 255
40063: PPUSH
40064: LD_VAR 0 13
40068: PPUSH
40069: CALL_OW 325
40073: NOT
40074: AND
40075: IFFALSE 40104
// missile := Replace ( missile , missile + 1 , 3 ) ;
40077: LD_ADDR_VAR 0 14
40081: PUSH
40082: LD_VAR 0 14
40086: PPUSH
40087: LD_VAR 0 14
40091: PUSH
40092: LD_INT 1
40094: PLUS
40095: PPUSH
40096: LD_INT 3
40098: PPUSH
40099: CALL_OW 1
40103: ST_TO_ADDR
// if missile < 2 then
40104: LD_VAR 0 14
40108: PUSH
40109: LD_INT 2
40111: LESS
40112: IFFALSE 40116
// exit ;
40114: GO 40338
// x := GetX ( enemy ) ;
40116: LD_ADDR_VAR 0 4
40120: PUSH
40121: LD_VAR 0 10
40125: PPUSH
40126: CALL_OW 250
40130: ST_TO_ADDR
// y := GetY ( enemy ) ;
40131: LD_ADDR_VAR 0 5
40135: PUSH
40136: LD_VAR 0 10
40140: PPUSH
40141: CALL_OW 251
40145: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40146: LD_ADDR_VAR 0 6
40150: PUSH
40151: LD_VAR 0 4
40155: PUSH
40156: LD_INT 1
40158: NEG
40159: PPUSH
40160: LD_INT 1
40162: PPUSH
40163: CALL_OW 12
40167: PLUS
40168: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40169: LD_ADDR_VAR 0 7
40173: PUSH
40174: LD_VAR 0 5
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PPUSH
40183: LD_INT 1
40185: PPUSH
40186: CALL_OW 12
40190: PLUS
40191: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40192: LD_VAR 0 6
40196: PPUSH
40197: LD_VAR 0 7
40201: PPUSH
40202: CALL_OW 488
40206: NOT
40207: IFFALSE 40229
// begin _x := x ;
40209: LD_ADDR_VAR 0 6
40213: PUSH
40214: LD_VAR 0 4
40218: ST_TO_ADDR
// _y := y ;
40219: LD_ADDR_VAR 0 7
40223: PUSH
40224: LD_VAR 0 5
40228: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40229: LD_ADDR_VAR 0 3
40233: PUSH
40234: LD_INT 1
40236: PPUSH
40237: LD_VAR 0 14
40241: PPUSH
40242: CALL_OW 12
40246: ST_TO_ADDR
// case i of 1 :
40247: LD_VAR 0 3
40251: PUSH
40252: LD_INT 1
40254: DOUBLE
40255: EQUAL
40256: IFTRUE 40260
40258: GO 40277
40260: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40261: LD_VAR 0 1
40265: PPUSH
40266: LD_VAR 0 10
40270: PPUSH
40271: CALL_OW 115
40275: GO 40338
40277: LD_INT 2
40279: DOUBLE
40280: EQUAL
40281: IFTRUE 40285
40283: GO 40307
40285: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40286: LD_VAR 0 1
40290: PPUSH
40291: LD_VAR 0 6
40295: PPUSH
40296: LD_VAR 0 7
40300: PPUSH
40301: CALL_OW 153
40305: GO 40338
40307: LD_INT 3
40309: DOUBLE
40310: EQUAL
40311: IFTRUE 40315
40313: GO 40337
40315: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40316: LD_VAR 0 1
40320: PPUSH
40321: LD_VAR 0 6
40325: PPUSH
40326: LD_VAR 0 7
40330: PPUSH
40331: CALL_OW 154
40335: GO 40338
40337: POP
// end ;
40338: LD_VAR 0 2
40342: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40343: LD_INT 0
40345: PPUSH
40346: PPUSH
40347: PPUSH
40348: PPUSH
40349: PPUSH
40350: PPUSH
// if not unit or not building then
40351: LD_VAR 0 1
40355: NOT
40356: PUSH
40357: LD_VAR 0 2
40361: NOT
40362: OR
40363: IFFALSE 40367
// exit ;
40365: GO 40525
// x := GetX ( building ) ;
40367: LD_ADDR_VAR 0 5
40371: PUSH
40372: LD_VAR 0 2
40376: PPUSH
40377: CALL_OW 250
40381: ST_TO_ADDR
// y := GetY ( building ) ;
40382: LD_ADDR_VAR 0 6
40386: PUSH
40387: LD_VAR 0 2
40391: PPUSH
40392: CALL_OW 251
40396: ST_TO_ADDR
// for i = 0 to 5 do
40397: LD_ADDR_VAR 0 4
40401: PUSH
40402: DOUBLE
40403: LD_INT 0
40405: DEC
40406: ST_TO_ADDR
40407: LD_INT 5
40409: PUSH
40410: FOR_TO
40411: IFFALSE 40523
// begin _x := ShiftX ( x , i , 3 ) ;
40413: LD_ADDR_VAR 0 7
40417: PUSH
40418: LD_VAR 0 5
40422: PPUSH
40423: LD_VAR 0 4
40427: PPUSH
40428: LD_INT 3
40430: PPUSH
40431: CALL_OW 272
40435: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40436: LD_ADDR_VAR 0 8
40440: PUSH
40441: LD_VAR 0 6
40445: PPUSH
40446: LD_VAR 0 4
40450: PPUSH
40451: LD_INT 3
40453: PPUSH
40454: CALL_OW 273
40458: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40459: LD_VAR 0 7
40463: PPUSH
40464: LD_VAR 0 8
40468: PPUSH
40469: CALL_OW 488
40473: NOT
40474: IFFALSE 40478
// continue ;
40476: GO 40410
// if HexInfo ( _x , _y ) = 0 then
40478: LD_VAR 0 7
40482: PPUSH
40483: LD_VAR 0 8
40487: PPUSH
40488: CALL_OW 428
40492: PUSH
40493: LD_INT 0
40495: EQUAL
40496: IFFALSE 40521
// begin ComMoveXY ( unit , _x , _y ) ;
40498: LD_VAR 0 1
40502: PPUSH
40503: LD_VAR 0 7
40507: PPUSH
40508: LD_VAR 0 8
40512: PPUSH
40513: CALL_OW 111
// exit ;
40517: POP
40518: POP
40519: GO 40525
// end ; end ;
40521: GO 40410
40523: POP
40524: POP
// end ;
40525: LD_VAR 0 3
40529: RET
// export function ScanBase ( side , base_area ) ; begin
40530: LD_INT 0
40532: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40533: LD_ADDR_VAR 0 3
40537: PUSH
40538: LD_VAR 0 2
40542: PPUSH
40543: LD_INT 81
40545: PUSH
40546: LD_VAR 0 1
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PPUSH
40555: CALL_OW 70
40559: ST_TO_ADDR
// end ;
40560: LD_VAR 0 3
40564: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40565: LD_INT 0
40567: PPUSH
40568: PPUSH
40569: PPUSH
40570: PPUSH
// result := false ;
40571: LD_ADDR_VAR 0 2
40575: PUSH
40576: LD_INT 0
40578: ST_TO_ADDR
// side := GetSide ( unit ) ;
40579: LD_ADDR_VAR 0 3
40583: PUSH
40584: LD_VAR 0 1
40588: PPUSH
40589: CALL_OW 255
40593: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40594: LD_ADDR_VAR 0 4
40598: PUSH
40599: LD_VAR 0 1
40603: PPUSH
40604: CALL_OW 248
40608: ST_TO_ADDR
// case nat of 1 :
40609: LD_VAR 0 4
40613: PUSH
40614: LD_INT 1
40616: DOUBLE
40617: EQUAL
40618: IFTRUE 40622
40620: GO 40633
40622: POP
// tech := tech_lassight ; 2 :
40623: LD_ADDR_VAR 0 5
40627: PUSH
40628: LD_INT 12
40630: ST_TO_ADDR
40631: GO 40672
40633: LD_INT 2
40635: DOUBLE
40636: EQUAL
40637: IFTRUE 40641
40639: GO 40652
40641: POP
// tech := tech_mortar ; 3 :
40642: LD_ADDR_VAR 0 5
40646: PUSH
40647: LD_INT 41
40649: ST_TO_ADDR
40650: GO 40672
40652: LD_INT 3
40654: DOUBLE
40655: EQUAL
40656: IFTRUE 40660
40658: GO 40671
40660: POP
// tech := tech_bazooka ; end ;
40661: LD_ADDR_VAR 0 5
40665: PUSH
40666: LD_INT 44
40668: ST_TO_ADDR
40669: GO 40672
40671: POP
// if Researched ( side , tech ) then
40672: LD_VAR 0 3
40676: PPUSH
40677: LD_VAR 0 5
40681: PPUSH
40682: CALL_OW 325
40686: IFFALSE 40713
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40688: LD_ADDR_VAR 0 2
40692: PUSH
40693: LD_INT 5
40695: PUSH
40696: LD_INT 8
40698: PUSH
40699: LD_INT 9
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: LIST
40706: PUSH
40707: LD_VAR 0 4
40711: ARRAY
40712: ST_TO_ADDR
// end ;
40713: LD_VAR 0 2
40717: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40718: LD_INT 0
40720: PPUSH
40721: PPUSH
40722: PPUSH
// if not mines then
40723: LD_VAR 0 2
40727: NOT
40728: IFFALSE 40732
// exit ;
40730: GO 40876
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40732: LD_ADDR_VAR 0 5
40736: PUSH
40737: LD_INT 81
40739: PUSH
40740: LD_VAR 0 1
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 3
40751: PUSH
40752: LD_INT 21
40754: PUSH
40755: LD_INT 3
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PPUSH
40770: CALL_OW 69
40774: ST_TO_ADDR
// for i in mines do
40775: LD_ADDR_VAR 0 4
40779: PUSH
40780: LD_VAR 0 2
40784: PUSH
40785: FOR_IN
40786: IFFALSE 40874
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40788: LD_VAR 0 4
40792: PUSH
40793: LD_INT 1
40795: ARRAY
40796: PPUSH
40797: LD_VAR 0 4
40801: PUSH
40802: LD_INT 2
40804: ARRAY
40805: PPUSH
40806: CALL_OW 458
40810: NOT
40811: IFFALSE 40815
// continue ;
40813: GO 40785
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40815: LD_VAR 0 4
40819: PUSH
40820: LD_INT 1
40822: ARRAY
40823: PPUSH
40824: LD_VAR 0 4
40828: PUSH
40829: LD_INT 2
40831: ARRAY
40832: PPUSH
40833: CALL_OW 428
40837: PUSH
40838: LD_VAR 0 5
40842: IN
40843: IFFALSE 40872
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40845: LD_VAR 0 4
40849: PUSH
40850: LD_INT 1
40852: ARRAY
40853: PPUSH
40854: LD_VAR 0 4
40858: PUSH
40859: LD_INT 2
40861: ARRAY
40862: PPUSH
40863: LD_VAR 0 1
40867: PPUSH
40868: CALL_OW 456
// end ;
40872: GO 40785
40874: POP
40875: POP
// end ;
40876: LD_VAR 0 3
40880: RET
// export function Count ( array ) ; var i ; begin
40881: LD_INT 0
40883: PPUSH
40884: PPUSH
// result := 0 ;
40885: LD_ADDR_VAR 0 2
40889: PUSH
40890: LD_INT 0
40892: ST_TO_ADDR
// for i in array do
40893: LD_ADDR_VAR 0 3
40897: PUSH
40898: LD_VAR 0 1
40902: PUSH
40903: FOR_IN
40904: IFFALSE 40928
// if i then
40906: LD_VAR 0 3
40910: IFFALSE 40926
// result := result + 1 ;
40912: LD_ADDR_VAR 0 2
40916: PUSH
40917: LD_VAR 0 2
40921: PUSH
40922: LD_INT 1
40924: PLUS
40925: ST_TO_ADDR
40926: GO 40903
40928: POP
40929: POP
// end ;
40930: LD_VAR 0 2
40934: RET
// export function IsEmpty ( building ) ; begin
40935: LD_INT 0
40937: PPUSH
// if not building then
40938: LD_VAR 0 1
40942: NOT
40943: IFFALSE 40947
// exit ;
40945: GO 40990
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40947: LD_ADDR_VAR 0 2
40951: PUSH
40952: LD_VAR 0 1
40956: PUSH
40957: LD_INT 22
40959: PUSH
40960: LD_VAR 0 1
40964: PPUSH
40965: CALL_OW 255
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 58
40976: PUSH
40977: EMPTY
40978: LIST
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PPUSH
40984: CALL_OW 69
40988: IN
40989: ST_TO_ADDR
// end ;
40990: LD_VAR 0 2
40994: RET
// export function IsNotFull ( building ) ; var places ; begin
40995: LD_INT 0
40997: PPUSH
40998: PPUSH
// if not building then
40999: LD_VAR 0 1
41003: NOT
41004: IFFALSE 41008
// exit ;
41006: GO 41179
// result := false ;
41008: LD_ADDR_VAR 0 2
41012: PUSH
41013: LD_INT 0
41015: ST_TO_ADDR
// places := 0 ;
41016: LD_ADDR_VAR 0 3
41020: PUSH
41021: LD_INT 0
41023: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41024: LD_VAR 0 1
41028: PPUSH
41029: CALL_OW 266
41033: PUSH
41034: LD_INT 0
41036: DOUBLE
41037: EQUAL
41038: IFTRUE 41096
41040: LD_INT 1
41042: DOUBLE
41043: EQUAL
41044: IFTRUE 41096
41046: LD_INT 6
41048: DOUBLE
41049: EQUAL
41050: IFTRUE 41096
41052: LD_INT 7
41054: DOUBLE
41055: EQUAL
41056: IFTRUE 41096
41058: LD_INT 8
41060: DOUBLE
41061: EQUAL
41062: IFTRUE 41096
41064: LD_INT 4
41066: DOUBLE
41067: EQUAL
41068: IFTRUE 41096
41070: LD_INT 5
41072: DOUBLE
41073: EQUAL
41074: IFTRUE 41096
41076: LD_INT 2
41078: DOUBLE
41079: EQUAL
41080: IFTRUE 41096
41082: LD_INT 3
41084: DOUBLE
41085: EQUAL
41086: IFTRUE 41096
41088: LD_INT 35
41090: DOUBLE
41091: EQUAL
41092: IFTRUE 41096
41094: GO 41107
41096: POP
// places := 6 ; b_bunker , b_breastwork :
41097: LD_ADDR_VAR 0 3
41101: PUSH
41102: LD_INT 6
41104: ST_TO_ADDR
41105: GO 41152
41107: LD_INT 32
41109: DOUBLE
41110: EQUAL
41111: IFTRUE 41121
41113: LD_INT 31
41115: DOUBLE
41116: EQUAL
41117: IFTRUE 41121
41119: GO 41132
41121: POP
// places := 1 ; b_control_tower :
41122: LD_ADDR_VAR 0 3
41126: PUSH
41127: LD_INT 1
41129: ST_TO_ADDR
41130: GO 41152
41132: LD_INT 36
41134: DOUBLE
41135: EQUAL
41136: IFTRUE 41140
41138: GO 41151
41140: POP
// places := 3 ; end ;
41141: LD_ADDR_VAR 0 3
41145: PUSH
41146: LD_INT 3
41148: ST_TO_ADDR
41149: GO 41152
41151: POP
// if places then
41152: LD_VAR 0 3
41156: IFFALSE 41179
// result := UnitsInside ( building ) < places ;
41158: LD_ADDR_VAR 0 2
41162: PUSH
41163: LD_VAR 0 1
41167: PPUSH
41168: CALL_OW 313
41172: PUSH
41173: LD_VAR 0 3
41177: LESS
41178: ST_TO_ADDR
// end ;
41179: LD_VAR 0 2
41183: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41184: LD_INT 0
41186: PPUSH
41187: PPUSH
41188: PPUSH
41189: PPUSH
// tmp := [ ] ;
41190: LD_ADDR_VAR 0 3
41194: PUSH
41195: EMPTY
41196: ST_TO_ADDR
// list := [ ] ;
41197: LD_ADDR_VAR 0 5
41201: PUSH
41202: EMPTY
41203: ST_TO_ADDR
// for i = 16 to 25 do
41204: LD_ADDR_VAR 0 4
41208: PUSH
41209: DOUBLE
41210: LD_INT 16
41212: DEC
41213: ST_TO_ADDR
41214: LD_INT 25
41216: PUSH
41217: FOR_TO
41218: IFFALSE 41291
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41220: LD_ADDR_VAR 0 3
41224: PUSH
41225: LD_VAR 0 3
41229: PUSH
41230: LD_INT 22
41232: PUSH
41233: LD_VAR 0 1
41237: PPUSH
41238: CALL_OW 255
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 91
41249: PUSH
41250: LD_VAR 0 1
41254: PUSH
41255: LD_INT 6
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 30
41265: PUSH
41266: LD_VAR 0 4
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: LIST
41279: PUSH
41280: EMPTY
41281: LIST
41282: PPUSH
41283: CALL_OW 69
41287: ADD
41288: ST_TO_ADDR
41289: GO 41217
41291: POP
41292: POP
// for i = 1 to tmp do
41293: LD_ADDR_VAR 0 4
41297: PUSH
41298: DOUBLE
41299: LD_INT 1
41301: DEC
41302: ST_TO_ADDR
41303: LD_VAR 0 3
41307: PUSH
41308: FOR_TO
41309: IFFALSE 41397
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41311: LD_ADDR_VAR 0 5
41315: PUSH
41316: LD_VAR 0 5
41320: PUSH
41321: LD_VAR 0 3
41325: PUSH
41326: LD_VAR 0 4
41330: ARRAY
41331: PPUSH
41332: CALL_OW 266
41336: PUSH
41337: LD_VAR 0 3
41341: PUSH
41342: LD_VAR 0 4
41346: ARRAY
41347: PPUSH
41348: CALL_OW 250
41352: PUSH
41353: LD_VAR 0 3
41357: PUSH
41358: LD_VAR 0 4
41362: ARRAY
41363: PPUSH
41364: CALL_OW 251
41368: PUSH
41369: LD_VAR 0 3
41373: PUSH
41374: LD_VAR 0 4
41378: ARRAY
41379: PPUSH
41380: CALL_OW 254
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: PUSH
41391: EMPTY
41392: LIST
41393: ADD
41394: ST_TO_ADDR
41395: GO 41308
41397: POP
41398: POP
// result := list ;
41399: LD_ADDR_VAR 0 2
41403: PUSH
41404: LD_VAR 0 5
41408: ST_TO_ADDR
// end ;
41409: LD_VAR 0 2
41413: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41414: LD_INT 0
41416: PPUSH
41417: PPUSH
41418: PPUSH
41419: PPUSH
41420: PPUSH
41421: PPUSH
41422: PPUSH
// if not factory then
41423: LD_VAR 0 1
41427: NOT
41428: IFFALSE 41432
// exit ;
41430: GO 42025
// if control = control_apeman then
41432: LD_VAR 0 4
41436: PUSH
41437: LD_INT 5
41439: EQUAL
41440: IFFALSE 41549
// begin tmp := UnitsInside ( factory ) ;
41442: LD_ADDR_VAR 0 8
41446: PUSH
41447: LD_VAR 0 1
41451: PPUSH
41452: CALL_OW 313
41456: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41457: LD_VAR 0 8
41461: PPUSH
41462: LD_INT 25
41464: PUSH
41465: LD_INT 12
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PPUSH
41472: CALL_OW 72
41476: NOT
41477: IFFALSE 41487
// control := control_manual ;
41479: LD_ADDR_VAR 0 4
41483: PUSH
41484: LD_INT 1
41486: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41487: LD_ADDR_VAR 0 8
41491: PUSH
41492: LD_VAR 0 1
41496: PPUSH
41497: CALL 41184 0 1
41501: ST_TO_ADDR
// if tmp then
41502: LD_VAR 0 8
41506: IFFALSE 41549
// begin for i in tmp do
41508: LD_ADDR_VAR 0 7
41512: PUSH
41513: LD_VAR 0 8
41517: PUSH
41518: FOR_IN
41519: IFFALSE 41547
// if i [ 1 ] = b_ext_radio then
41521: LD_VAR 0 7
41525: PUSH
41526: LD_INT 1
41528: ARRAY
41529: PUSH
41530: LD_INT 22
41532: EQUAL
41533: IFFALSE 41545
// begin control := control_remote ;
41535: LD_ADDR_VAR 0 4
41539: PUSH
41540: LD_INT 2
41542: ST_TO_ADDR
// break ;
41543: GO 41547
// end ;
41545: GO 41518
41547: POP
41548: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41549: LD_VAR 0 1
41553: PPUSH
41554: LD_VAR 0 2
41558: PPUSH
41559: LD_VAR 0 3
41563: PPUSH
41564: LD_VAR 0 4
41568: PPUSH
41569: LD_VAR 0 5
41573: PPUSH
41574: CALL_OW 448
41578: IFFALSE 41613
// begin result := [ chassis , engine , control , weapon ] ;
41580: LD_ADDR_VAR 0 6
41584: PUSH
41585: LD_VAR 0 2
41589: PUSH
41590: LD_VAR 0 3
41594: PUSH
41595: LD_VAR 0 4
41599: PUSH
41600: LD_VAR 0 5
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: ST_TO_ADDR
// exit ;
41611: GO 42025
// end ; _chassis := AvailableChassisList ( factory ) ;
41613: LD_ADDR_VAR 0 9
41617: PUSH
41618: LD_VAR 0 1
41622: PPUSH
41623: CALL_OW 475
41627: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41628: LD_ADDR_VAR 0 11
41632: PUSH
41633: LD_VAR 0 1
41637: PPUSH
41638: CALL_OW 476
41642: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41643: LD_ADDR_VAR 0 12
41647: PUSH
41648: LD_VAR 0 1
41652: PPUSH
41653: CALL_OW 477
41657: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41658: LD_ADDR_VAR 0 10
41662: PUSH
41663: LD_VAR 0 1
41667: PPUSH
41668: CALL_OW 478
41672: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41673: LD_VAR 0 9
41677: NOT
41678: PUSH
41679: LD_VAR 0 11
41683: NOT
41684: OR
41685: PUSH
41686: LD_VAR 0 12
41690: NOT
41691: OR
41692: PUSH
41693: LD_VAR 0 10
41697: NOT
41698: OR
41699: IFFALSE 41734
// begin result := [ chassis , engine , control , weapon ] ;
41701: LD_ADDR_VAR 0 6
41705: PUSH
41706: LD_VAR 0 2
41710: PUSH
41711: LD_VAR 0 3
41715: PUSH
41716: LD_VAR 0 4
41720: PUSH
41721: LD_VAR 0 5
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: ST_TO_ADDR
// exit ;
41732: GO 42025
// end ; if not chassis in _chassis then
41734: LD_VAR 0 2
41738: PUSH
41739: LD_VAR 0 9
41743: IN
41744: NOT
41745: IFFALSE 41771
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41747: LD_ADDR_VAR 0 2
41751: PUSH
41752: LD_VAR 0 9
41756: PUSH
41757: LD_INT 1
41759: PPUSH
41760: LD_VAR 0 9
41764: PPUSH
41765: CALL_OW 12
41769: ARRAY
41770: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41771: LD_VAR 0 2
41775: PPUSH
41776: LD_VAR 0 3
41780: PPUSH
41781: CALL 42030 0 2
41785: NOT
41786: IFFALSE 41845
// repeat engine := _engine [ 1 ] ;
41788: LD_ADDR_VAR 0 3
41792: PUSH
41793: LD_VAR 0 11
41797: PUSH
41798: LD_INT 1
41800: ARRAY
41801: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41802: LD_ADDR_VAR 0 11
41806: PUSH
41807: LD_VAR 0 11
41811: PPUSH
41812: LD_INT 1
41814: PPUSH
41815: CALL_OW 3
41819: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41820: LD_VAR 0 2
41824: PPUSH
41825: LD_VAR 0 3
41829: PPUSH
41830: CALL 42030 0 2
41834: PUSH
41835: LD_VAR 0 11
41839: PUSH
41840: EMPTY
41841: EQUAL
41842: OR
41843: IFFALSE 41788
// if not control in _control then
41845: LD_VAR 0 4
41849: PUSH
41850: LD_VAR 0 12
41854: IN
41855: NOT
41856: IFFALSE 41882
// control := _control [ rand ( 1 , _control ) ] ;
41858: LD_ADDR_VAR 0 4
41862: PUSH
41863: LD_VAR 0 12
41867: PUSH
41868: LD_INT 1
41870: PPUSH
41871: LD_VAR 0 12
41875: PPUSH
41876: CALL_OW 12
41880: ARRAY
41881: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41882: LD_VAR 0 2
41886: PPUSH
41887: LD_VAR 0 5
41891: PPUSH
41892: CALL 42250 0 2
41896: NOT
41897: IFFALSE 41956
// repeat weapon := _weapon [ 1 ] ;
41899: LD_ADDR_VAR 0 5
41903: PUSH
41904: LD_VAR 0 10
41908: PUSH
41909: LD_INT 1
41911: ARRAY
41912: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41913: LD_ADDR_VAR 0 10
41917: PUSH
41918: LD_VAR 0 10
41922: PPUSH
41923: LD_INT 1
41925: PPUSH
41926: CALL_OW 3
41930: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41931: LD_VAR 0 2
41935: PPUSH
41936: LD_VAR 0 5
41940: PPUSH
41941: CALL 42250 0 2
41945: PUSH
41946: LD_VAR 0 10
41950: PUSH
41951: EMPTY
41952: EQUAL
41953: OR
41954: IFFALSE 41899
// result := [ ] ;
41956: LD_ADDR_VAR 0 6
41960: PUSH
41961: EMPTY
41962: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41963: LD_VAR 0 1
41967: PPUSH
41968: LD_VAR 0 2
41972: PPUSH
41973: LD_VAR 0 3
41977: PPUSH
41978: LD_VAR 0 4
41982: PPUSH
41983: LD_VAR 0 5
41987: PPUSH
41988: CALL_OW 448
41992: IFFALSE 42025
// result := [ chassis , engine , control , weapon ] ;
41994: LD_ADDR_VAR 0 6
41998: PUSH
41999: LD_VAR 0 2
42003: PUSH
42004: LD_VAR 0 3
42008: PUSH
42009: LD_VAR 0 4
42013: PUSH
42014: LD_VAR 0 5
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: ST_TO_ADDR
// end ;
42025: LD_VAR 0 6
42029: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42030: LD_INT 0
42032: PPUSH
// if not chassis or not engine then
42033: LD_VAR 0 1
42037: NOT
42038: PUSH
42039: LD_VAR 0 2
42043: NOT
42044: OR
42045: IFFALSE 42049
// exit ;
42047: GO 42245
// case engine of engine_solar :
42049: LD_VAR 0 2
42053: PUSH
42054: LD_INT 2
42056: DOUBLE
42057: EQUAL
42058: IFTRUE 42062
42060: GO 42100
42062: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42063: LD_ADDR_VAR 0 3
42067: PUSH
42068: LD_INT 11
42070: PUSH
42071: LD_INT 12
42073: PUSH
42074: LD_INT 13
42076: PUSH
42077: LD_INT 14
42079: PUSH
42080: LD_INT 1
42082: PUSH
42083: LD_INT 2
42085: PUSH
42086: LD_INT 3
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: ST_TO_ADDR
42098: GO 42229
42100: LD_INT 1
42102: DOUBLE
42103: EQUAL
42104: IFTRUE 42108
42106: GO 42170
42108: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42109: LD_ADDR_VAR 0 3
42113: PUSH
42114: LD_INT 11
42116: PUSH
42117: LD_INT 12
42119: PUSH
42120: LD_INT 13
42122: PUSH
42123: LD_INT 14
42125: PUSH
42126: LD_INT 1
42128: PUSH
42129: LD_INT 2
42131: PUSH
42132: LD_INT 3
42134: PUSH
42135: LD_INT 4
42137: PUSH
42138: LD_INT 5
42140: PUSH
42141: LD_INT 21
42143: PUSH
42144: LD_INT 23
42146: PUSH
42147: LD_INT 22
42149: PUSH
42150: LD_INT 24
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: ST_TO_ADDR
42168: GO 42229
42170: LD_INT 3
42172: DOUBLE
42173: EQUAL
42174: IFTRUE 42178
42176: GO 42228
42178: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42179: LD_ADDR_VAR 0 3
42183: PUSH
42184: LD_INT 13
42186: PUSH
42187: LD_INT 14
42189: PUSH
42190: LD_INT 2
42192: PUSH
42193: LD_INT 3
42195: PUSH
42196: LD_INT 4
42198: PUSH
42199: LD_INT 5
42201: PUSH
42202: LD_INT 21
42204: PUSH
42205: LD_INT 22
42207: PUSH
42208: LD_INT 23
42210: PUSH
42211: LD_INT 24
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: ST_TO_ADDR
42226: GO 42229
42228: POP
// result := ( chassis in result ) ;
42229: LD_ADDR_VAR 0 3
42233: PUSH
42234: LD_VAR 0 1
42238: PUSH
42239: LD_VAR 0 3
42243: IN
42244: ST_TO_ADDR
// end ;
42245: LD_VAR 0 3
42249: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42250: LD_INT 0
42252: PPUSH
// if not chassis or not weapon then
42253: LD_VAR 0 1
42257: NOT
42258: PUSH
42259: LD_VAR 0 2
42263: NOT
42264: OR
42265: IFFALSE 42269
// exit ;
42267: GO 43331
// case weapon of us_machine_gun :
42269: LD_VAR 0 2
42273: PUSH
42274: LD_INT 2
42276: DOUBLE
42277: EQUAL
42278: IFTRUE 42282
42280: GO 42312
42282: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42283: LD_ADDR_VAR 0 3
42287: PUSH
42288: LD_INT 1
42290: PUSH
42291: LD_INT 2
42293: PUSH
42294: LD_INT 3
42296: PUSH
42297: LD_INT 4
42299: PUSH
42300: LD_INT 5
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: ST_TO_ADDR
42310: GO 43315
42312: LD_INT 3
42314: DOUBLE
42315: EQUAL
42316: IFTRUE 42320
42318: GO 42350
42320: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42321: LD_ADDR_VAR 0 3
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: LD_INT 2
42331: PUSH
42332: LD_INT 3
42334: PUSH
42335: LD_INT 4
42337: PUSH
42338: LD_INT 5
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: ST_TO_ADDR
42348: GO 43315
42350: LD_INT 11
42352: DOUBLE
42353: EQUAL
42354: IFTRUE 42358
42356: GO 42388
42358: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42359: LD_ADDR_VAR 0 3
42363: PUSH
42364: LD_INT 1
42366: PUSH
42367: LD_INT 2
42369: PUSH
42370: LD_INT 3
42372: PUSH
42373: LD_INT 4
42375: PUSH
42376: LD_INT 5
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: ST_TO_ADDR
42386: GO 43315
42388: LD_INT 4
42390: DOUBLE
42391: EQUAL
42392: IFTRUE 42396
42394: GO 42422
42396: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42397: LD_ADDR_VAR 0 3
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: LD_INT 3
42407: PUSH
42408: LD_INT 4
42410: PUSH
42411: LD_INT 5
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: ST_TO_ADDR
42420: GO 43315
42422: LD_INT 5
42424: DOUBLE
42425: EQUAL
42426: IFTRUE 42430
42428: GO 42456
42430: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42431: LD_ADDR_VAR 0 3
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: LD_INT 3
42441: PUSH
42442: LD_INT 4
42444: PUSH
42445: LD_INT 5
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: ST_TO_ADDR
42454: GO 43315
42456: LD_INT 9
42458: DOUBLE
42459: EQUAL
42460: IFTRUE 42464
42462: GO 42490
42464: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42465: LD_ADDR_VAR 0 3
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: LD_INT 3
42475: PUSH
42476: LD_INT 4
42478: PUSH
42479: LD_INT 5
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: ST_TO_ADDR
42488: GO 43315
42490: LD_INT 7
42492: DOUBLE
42493: EQUAL
42494: IFTRUE 42498
42496: GO 42524
42498: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42499: LD_ADDR_VAR 0 3
42503: PUSH
42504: LD_INT 2
42506: PUSH
42507: LD_INT 3
42509: PUSH
42510: LD_INT 4
42512: PUSH
42513: LD_INT 5
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: ST_TO_ADDR
42522: GO 43315
42524: LD_INT 12
42526: DOUBLE
42527: EQUAL
42528: IFTRUE 42532
42530: GO 42558
42532: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42533: LD_ADDR_VAR 0 3
42537: PUSH
42538: LD_INT 2
42540: PUSH
42541: LD_INT 3
42543: PUSH
42544: LD_INT 4
42546: PUSH
42547: LD_INT 5
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: ST_TO_ADDR
42556: GO 43315
42558: LD_INT 13
42560: DOUBLE
42561: EQUAL
42562: IFTRUE 42566
42564: GO 42592
42566: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42567: LD_ADDR_VAR 0 3
42571: PUSH
42572: LD_INT 2
42574: PUSH
42575: LD_INT 3
42577: PUSH
42578: LD_INT 4
42580: PUSH
42581: LD_INT 5
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: ST_TO_ADDR
42590: GO 43315
42592: LD_INT 14
42594: DOUBLE
42595: EQUAL
42596: IFTRUE 42600
42598: GO 42618
42600: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42601: LD_ADDR_VAR 0 3
42605: PUSH
42606: LD_INT 4
42608: PUSH
42609: LD_INT 5
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: ST_TO_ADDR
42616: GO 43315
42618: LD_INT 6
42620: DOUBLE
42621: EQUAL
42622: IFTRUE 42626
42624: GO 42644
42626: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42627: LD_ADDR_VAR 0 3
42631: PUSH
42632: LD_INT 4
42634: PUSH
42635: LD_INT 5
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: ST_TO_ADDR
42642: GO 43315
42644: LD_INT 10
42646: DOUBLE
42647: EQUAL
42648: IFTRUE 42652
42650: GO 42670
42652: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42653: LD_ADDR_VAR 0 3
42657: PUSH
42658: LD_INT 4
42660: PUSH
42661: LD_INT 5
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: ST_TO_ADDR
42668: GO 43315
42670: LD_INT 22
42672: DOUBLE
42673: EQUAL
42674: IFTRUE 42678
42676: GO 42704
42678: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42679: LD_ADDR_VAR 0 3
42683: PUSH
42684: LD_INT 11
42686: PUSH
42687: LD_INT 12
42689: PUSH
42690: LD_INT 13
42692: PUSH
42693: LD_INT 14
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: ST_TO_ADDR
42702: GO 43315
42704: LD_INT 23
42706: DOUBLE
42707: EQUAL
42708: IFTRUE 42712
42710: GO 42738
42712: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42713: LD_ADDR_VAR 0 3
42717: PUSH
42718: LD_INT 11
42720: PUSH
42721: LD_INT 12
42723: PUSH
42724: LD_INT 13
42726: PUSH
42727: LD_INT 14
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: ST_TO_ADDR
42736: GO 43315
42738: LD_INT 24
42740: DOUBLE
42741: EQUAL
42742: IFTRUE 42746
42744: GO 42772
42746: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42747: LD_ADDR_VAR 0 3
42751: PUSH
42752: LD_INT 11
42754: PUSH
42755: LD_INT 12
42757: PUSH
42758: LD_INT 13
42760: PUSH
42761: LD_INT 14
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: ST_TO_ADDR
42770: GO 43315
42772: LD_INT 30
42774: DOUBLE
42775: EQUAL
42776: IFTRUE 42780
42778: GO 42806
42780: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42781: LD_ADDR_VAR 0 3
42785: PUSH
42786: LD_INT 11
42788: PUSH
42789: LD_INT 12
42791: PUSH
42792: LD_INT 13
42794: PUSH
42795: LD_INT 14
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: ST_TO_ADDR
42804: GO 43315
42806: LD_INT 25
42808: DOUBLE
42809: EQUAL
42810: IFTRUE 42814
42812: GO 42832
42814: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42815: LD_ADDR_VAR 0 3
42819: PUSH
42820: LD_INT 13
42822: PUSH
42823: LD_INT 14
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: ST_TO_ADDR
42830: GO 43315
42832: LD_INT 27
42834: DOUBLE
42835: EQUAL
42836: IFTRUE 42840
42838: GO 42858
42840: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42841: LD_ADDR_VAR 0 3
42845: PUSH
42846: LD_INT 13
42848: PUSH
42849: LD_INT 14
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: ST_TO_ADDR
42856: GO 43315
42858: LD_EXP 67
42862: DOUBLE
42863: EQUAL
42864: IFTRUE 42868
42866: GO 42894
42868: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42869: LD_ADDR_VAR 0 3
42873: PUSH
42874: LD_INT 11
42876: PUSH
42877: LD_INT 12
42879: PUSH
42880: LD_INT 13
42882: PUSH
42883: LD_INT 14
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: ST_TO_ADDR
42892: GO 43315
42894: LD_INT 28
42896: DOUBLE
42897: EQUAL
42898: IFTRUE 42902
42900: GO 42920
42902: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42903: LD_ADDR_VAR 0 3
42907: PUSH
42908: LD_INT 13
42910: PUSH
42911: LD_INT 14
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: ST_TO_ADDR
42918: GO 43315
42920: LD_INT 29
42922: DOUBLE
42923: EQUAL
42924: IFTRUE 42928
42926: GO 42946
42928: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42929: LD_ADDR_VAR 0 3
42933: PUSH
42934: LD_INT 13
42936: PUSH
42937: LD_INT 14
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: ST_TO_ADDR
42944: GO 43315
42946: LD_INT 31
42948: DOUBLE
42949: EQUAL
42950: IFTRUE 42954
42952: GO 42972
42954: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42955: LD_ADDR_VAR 0 3
42959: PUSH
42960: LD_INT 13
42962: PUSH
42963: LD_INT 14
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: ST_TO_ADDR
42970: GO 43315
42972: LD_INT 26
42974: DOUBLE
42975: EQUAL
42976: IFTRUE 42980
42978: GO 42998
42980: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42981: LD_ADDR_VAR 0 3
42985: PUSH
42986: LD_INT 13
42988: PUSH
42989: LD_INT 14
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: ST_TO_ADDR
42996: GO 43315
42998: LD_INT 42
43000: DOUBLE
43001: EQUAL
43002: IFTRUE 43006
43004: GO 43032
43006: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43007: LD_ADDR_VAR 0 3
43011: PUSH
43012: LD_INT 21
43014: PUSH
43015: LD_INT 22
43017: PUSH
43018: LD_INT 23
43020: PUSH
43021: LD_INT 24
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: ST_TO_ADDR
43030: GO 43315
43032: LD_INT 43
43034: DOUBLE
43035: EQUAL
43036: IFTRUE 43040
43038: GO 43066
43040: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43041: LD_ADDR_VAR 0 3
43045: PUSH
43046: LD_INT 21
43048: PUSH
43049: LD_INT 22
43051: PUSH
43052: LD_INT 23
43054: PUSH
43055: LD_INT 24
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: ST_TO_ADDR
43064: GO 43315
43066: LD_INT 44
43068: DOUBLE
43069: EQUAL
43070: IFTRUE 43074
43072: GO 43100
43074: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43075: LD_ADDR_VAR 0 3
43079: PUSH
43080: LD_INT 21
43082: PUSH
43083: LD_INT 22
43085: PUSH
43086: LD_INT 23
43088: PUSH
43089: LD_INT 24
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: ST_TO_ADDR
43098: GO 43315
43100: LD_INT 45
43102: DOUBLE
43103: EQUAL
43104: IFTRUE 43108
43106: GO 43134
43108: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43109: LD_ADDR_VAR 0 3
43113: PUSH
43114: LD_INT 21
43116: PUSH
43117: LD_INT 22
43119: PUSH
43120: LD_INT 23
43122: PUSH
43123: LD_INT 24
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: ST_TO_ADDR
43132: GO 43315
43134: LD_INT 49
43136: DOUBLE
43137: EQUAL
43138: IFTRUE 43142
43140: GO 43168
43142: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43143: LD_ADDR_VAR 0 3
43147: PUSH
43148: LD_INT 21
43150: PUSH
43151: LD_INT 22
43153: PUSH
43154: LD_INT 23
43156: PUSH
43157: LD_INT 24
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: ST_TO_ADDR
43166: GO 43315
43168: LD_INT 51
43170: DOUBLE
43171: EQUAL
43172: IFTRUE 43176
43174: GO 43202
43176: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43177: LD_ADDR_VAR 0 3
43181: PUSH
43182: LD_INT 21
43184: PUSH
43185: LD_INT 22
43187: PUSH
43188: LD_INT 23
43190: PUSH
43191: LD_INT 24
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: ST_TO_ADDR
43200: GO 43315
43202: LD_INT 52
43204: DOUBLE
43205: EQUAL
43206: IFTRUE 43210
43208: GO 43236
43210: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43211: LD_ADDR_VAR 0 3
43215: PUSH
43216: LD_INT 21
43218: PUSH
43219: LD_INT 22
43221: PUSH
43222: LD_INT 23
43224: PUSH
43225: LD_INT 24
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: ST_TO_ADDR
43234: GO 43315
43236: LD_INT 53
43238: DOUBLE
43239: EQUAL
43240: IFTRUE 43244
43242: GO 43262
43244: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43245: LD_ADDR_VAR 0 3
43249: PUSH
43250: LD_INT 23
43252: PUSH
43253: LD_INT 24
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: ST_TO_ADDR
43260: GO 43315
43262: LD_INT 46
43264: DOUBLE
43265: EQUAL
43266: IFTRUE 43270
43268: GO 43288
43270: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43271: LD_ADDR_VAR 0 3
43275: PUSH
43276: LD_INT 23
43278: PUSH
43279: LD_INT 24
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: ST_TO_ADDR
43286: GO 43315
43288: LD_INT 47
43290: DOUBLE
43291: EQUAL
43292: IFTRUE 43296
43294: GO 43314
43296: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43297: LD_ADDR_VAR 0 3
43301: PUSH
43302: LD_INT 23
43304: PUSH
43305: LD_INT 24
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: ST_TO_ADDR
43312: GO 43315
43314: POP
// result := ( chassis in result ) ;
43315: LD_ADDR_VAR 0 3
43319: PUSH
43320: LD_VAR 0 1
43324: PUSH
43325: LD_VAR 0 3
43329: IN
43330: ST_TO_ADDR
// end ;
43331: LD_VAR 0 3
43335: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43336: LD_INT 0
43338: PPUSH
43339: PPUSH
43340: PPUSH
43341: PPUSH
43342: PPUSH
43343: PPUSH
43344: PPUSH
// result := array ;
43345: LD_ADDR_VAR 0 5
43349: PUSH
43350: LD_VAR 0 1
43354: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43355: LD_VAR 0 1
43359: NOT
43360: PUSH
43361: LD_VAR 0 2
43365: NOT
43366: OR
43367: PUSH
43368: LD_VAR 0 3
43372: NOT
43373: OR
43374: PUSH
43375: LD_VAR 0 2
43379: PUSH
43380: LD_VAR 0 1
43384: GREATER
43385: OR
43386: PUSH
43387: LD_VAR 0 3
43391: PUSH
43392: LD_VAR 0 1
43396: GREATER
43397: OR
43398: IFFALSE 43402
// exit ;
43400: GO 43698
// if direction then
43402: LD_VAR 0 4
43406: IFFALSE 43470
// begin d := 1 ;
43408: LD_ADDR_VAR 0 9
43412: PUSH
43413: LD_INT 1
43415: ST_TO_ADDR
// if i_from > i_to then
43416: LD_VAR 0 2
43420: PUSH
43421: LD_VAR 0 3
43425: GREATER
43426: IFFALSE 43452
// length := ( array - i_from ) + i_to else
43428: LD_ADDR_VAR 0 11
43432: PUSH
43433: LD_VAR 0 1
43437: PUSH
43438: LD_VAR 0 2
43442: MINUS
43443: PUSH
43444: LD_VAR 0 3
43448: PLUS
43449: ST_TO_ADDR
43450: GO 43468
// length := i_to - i_from ;
43452: LD_ADDR_VAR 0 11
43456: PUSH
43457: LD_VAR 0 3
43461: PUSH
43462: LD_VAR 0 2
43466: MINUS
43467: ST_TO_ADDR
// end else
43468: GO 43531
// begin d := - 1 ;
43470: LD_ADDR_VAR 0 9
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: ST_TO_ADDR
// if i_from > i_to then
43479: LD_VAR 0 2
43483: PUSH
43484: LD_VAR 0 3
43488: GREATER
43489: IFFALSE 43509
// length := i_from - i_to else
43491: LD_ADDR_VAR 0 11
43495: PUSH
43496: LD_VAR 0 2
43500: PUSH
43501: LD_VAR 0 3
43505: MINUS
43506: ST_TO_ADDR
43507: GO 43531
// length := ( array - i_to ) + i_from ;
43509: LD_ADDR_VAR 0 11
43513: PUSH
43514: LD_VAR 0 1
43518: PUSH
43519: LD_VAR 0 3
43523: MINUS
43524: PUSH
43525: LD_VAR 0 2
43529: PLUS
43530: ST_TO_ADDR
// end ; if not length then
43531: LD_VAR 0 11
43535: NOT
43536: IFFALSE 43540
// exit ;
43538: GO 43698
// tmp := array ;
43540: LD_ADDR_VAR 0 10
43544: PUSH
43545: LD_VAR 0 1
43549: ST_TO_ADDR
// for i = 1 to length do
43550: LD_ADDR_VAR 0 6
43554: PUSH
43555: DOUBLE
43556: LD_INT 1
43558: DEC
43559: ST_TO_ADDR
43560: LD_VAR 0 11
43564: PUSH
43565: FOR_TO
43566: IFFALSE 43686
// begin for j = 1 to array do
43568: LD_ADDR_VAR 0 7
43572: PUSH
43573: DOUBLE
43574: LD_INT 1
43576: DEC
43577: ST_TO_ADDR
43578: LD_VAR 0 1
43582: PUSH
43583: FOR_TO
43584: IFFALSE 43672
// begin k := j + d ;
43586: LD_ADDR_VAR 0 8
43590: PUSH
43591: LD_VAR 0 7
43595: PUSH
43596: LD_VAR 0 9
43600: PLUS
43601: ST_TO_ADDR
// if k > array then
43602: LD_VAR 0 8
43606: PUSH
43607: LD_VAR 0 1
43611: GREATER
43612: IFFALSE 43622
// k := 1 ;
43614: LD_ADDR_VAR 0 8
43618: PUSH
43619: LD_INT 1
43621: ST_TO_ADDR
// if not k then
43622: LD_VAR 0 8
43626: NOT
43627: IFFALSE 43639
// k := array ;
43629: LD_ADDR_VAR 0 8
43633: PUSH
43634: LD_VAR 0 1
43638: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43639: LD_ADDR_VAR 0 10
43643: PUSH
43644: LD_VAR 0 10
43648: PPUSH
43649: LD_VAR 0 8
43653: PPUSH
43654: LD_VAR 0 1
43658: PUSH
43659: LD_VAR 0 7
43663: ARRAY
43664: PPUSH
43665: CALL_OW 1
43669: ST_TO_ADDR
// end ;
43670: GO 43583
43672: POP
43673: POP
// array := tmp ;
43674: LD_ADDR_VAR 0 1
43678: PUSH
43679: LD_VAR 0 10
43683: ST_TO_ADDR
// end ;
43684: GO 43565
43686: POP
43687: POP
// result := array ;
43688: LD_ADDR_VAR 0 5
43692: PUSH
43693: LD_VAR 0 1
43697: ST_TO_ADDR
// end ;
43698: LD_VAR 0 5
43702: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43703: LD_INT 0
43705: PPUSH
43706: PPUSH
// result := 0 ;
43707: LD_ADDR_VAR 0 3
43711: PUSH
43712: LD_INT 0
43714: ST_TO_ADDR
// if not array or not value in array then
43715: LD_VAR 0 1
43719: NOT
43720: PUSH
43721: LD_VAR 0 2
43725: PUSH
43726: LD_VAR 0 1
43730: IN
43731: NOT
43732: OR
43733: IFFALSE 43737
// exit ;
43735: GO 43791
// for i = 1 to array do
43737: LD_ADDR_VAR 0 4
43741: PUSH
43742: DOUBLE
43743: LD_INT 1
43745: DEC
43746: ST_TO_ADDR
43747: LD_VAR 0 1
43751: PUSH
43752: FOR_TO
43753: IFFALSE 43789
// if value = array [ i ] then
43755: LD_VAR 0 2
43759: PUSH
43760: LD_VAR 0 1
43764: PUSH
43765: LD_VAR 0 4
43769: ARRAY
43770: EQUAL
43771: IFFALSE 43787
// begin result := i ;
43773: LD_ADDR_VAR 0 3
43777: PUSH
43778: LD_VAR 0 4
43782: ST_TO_ADDR
// exit ;
43783: POP
43784: POP
43785: GO 43791
// end ;
43787: GO 43752
43789: POP
43790: POP
// end ;
43791: LD_VAR 0 3
43795: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43796: LD_INT 0
43798: PPUSH
// vc_chassis := chassis ;
43799: LD_ADDR_OWVAR 37
43803: PUSH
43804: LD_VAR 0 1
43808: ST_TO_ADDR
// vc_engine := engine ;
43809: LD_ADDR_OWVAR 39
43813: PUSH
43814: LD_VAR 0 2
43818: ST_TO_ADDR
// vc_control := control ;
43819: LD_ADDR_OWVAR 38
43823: PUSH
43824: LD_VAR 0 3
43828: ST_TO_ADDR
// vc_weapon := weapon ;
43829: LD_ADDR_OWVAR 40
43833: PUSH
43834: LD_VAR 0 4
43838: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43839: LD_ADDR_OWVAR 41
43843: PUSH
43844: LD_VAR 0 5
43848: ST_TO_ADDR
// end ;
43849: LD_VAR 0 6
43853: RET
// export function WantPlant ( unit ) ; var task ; begin
43854: LD_INT 0
43856: PPUSH
43857: PPUSH
// result := false ;
43858: LD_ADDR_VAR 0 2
43862: PUSH
43863: LD_INT 0
43865: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43866: LD_ADDR_VAR 0 3
43870: PUSH
43871: LD_VAR 0 1
43875: PPUSH
43876: CALL_OW 437
43880: ST_TO_ADDR
// if task then
43881: LD_VAR 0 3
43885: IFFALSE 43913
// if task [ 1 ] [ 1 ] = p then
43887: LD_VAR 0 3
43891: PUSH
43892: LD_INT 1
43894: ARRAY
43895: PUSH
43896: LD_INT 1
43898: ARRAY
43899: PUSH
43900: LD_STRING p
43902: EQUAL
43903: IFFALSE 43913
// result := true ;
43905: LD_ADDR_VAR 0 2
43909: PUSH
43910: LD_INT 1
43912: ST_TO_ADDR
// end ;
43913: LD_VAR 0 2
43917: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43918: LD_INT 0
43920: PPUSH
43921: PPUSH
43922: PPUSH
43923: PPUSH
// if pos < 1 then
43924: LD_VAR 0 2
43928: PUSH
43929: LD_INT 1
43931: LESS
43932: IFFALSE 43936
// exit ;
43934: GO 44239
// if pos = 1 then
43936: LD_VAR 0 2
43940: PUSH
43941: LD_INT 1
43943: EQUAL
43944: IFFALSE 43977
// result := Replace ( arr , pos [ 1 ] , value ) else
43946: LD_ADDR_VAR 0 4
43950: PUSH
43951: LD_VAR 0 1
43955: PPUSH
43956: LD_VAR 0 2
43960: PUSH
43961: LD_INT 1
43963: ARRAY
43964: PPUSH
43965: LD_VAR 0 3
43969: PPUSH
43970: CALL_OW 1
43974: ST_TO_ADDR
43975: GO 44239
// begin tmp := arr ;
43977: LD_ADDR_VAR 0 6
43981: PUSH
43982: LD_VAR 0 1
43986: ST_TO_ADDR
// s_arr := [ tmp ] ;
43987: LD_ADDR_VAR 0 7
43991: PUSH
43992: LD_VAR 0 6
43996: PUSH
43997: EMPTY
43998: LIST
43999: ST_TO_ADDR
// for i = 1 to pos - 1 do
44000: LD_ADDR_VAR 0 5
44004: PUSH
44005: DOUBLE
44006: LD_INT 1
44008: DEC
44009: ST_TO_ADDR
44010: LD_VAR 0 2
44014: PUSH
44015: LD_INT 1
44017: MINUS
44018: PUSH
44019: FOR_TO
44020: IFFALSE 44065
// begin tmp := tmp [ pos [ i ] ] ;
44022: LD_ADDR_VAR 0 6
44026: PUSH
44027: LD_VAR 0 6
44031: PUSH
44032: LD_VAR 0 2
44036: PUSH
44037: LD_VAR 0 5
44041: ARRAY
44042: ARRAY
44043: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44044: LD_ADDR_VAR 0 7
44048: PUSH
44049: LD_VAR 0 7
44053: PUSH
44054: LD_VAR 0 6
44058: PUSH
44059: EMPTY
44060: LIST
44061: ADD
44062: ST_TO_ADDR
// end ;
44063: GO 44019
44065: POP
44066: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44067: LD_ADDR_VAR 0 6
44071: PUSH
44072: LD_VAR 0 6
44076: PPUSH
44077: LD_VAR 0 2
44081: PUSH
44082: LD_VAR 0 2
44086: ARRAY
44087: PPUSH
44088: LD_VAR 0 3
44092: PPUSH
44093: CALL_OW 1
44097: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44098: LD_ADDR_VAR 0 7
44102: PUSH
44103: LD_VAR 0 7
44107: PPUSH
44108: LD_VAR 0 7
44112: PPUSH
44113: LD_VAR 0 6
44117: PPUSH
44118: CALL_OW 1
44122: ST_TO_ADDR
// for i = s_arr downto 2 do
44123: LD_ADDR_VAR 0 5
44127: PUSH
44128: DOUBLE
44129: LD_VAR 0 7
44133: INC
44134: ST_TO_ADDR
44135: LD_INT 2
44137: PUSH
44138: FOR_DOWNTO
44139: IFFALSE 44223
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44141: LD_ADDR_VAR 0 6
44145: PUSH
44146: LD_VAR 0 7
44150: PUSH
44151: LD_VAR 0 5
44155: PUSH
44156: LD_INT 1
44158: MINUS
44159: ARRAY
44160: PPUSH
44161: LD_VAR 0 2
44165: PUSH
44166: LD_VAR 0 5
44170: PUSH
44171: LD_INT 1
44173: MINUS
44174: ARRAY
44175: PPUSH
44176: LD_VAR 0 7
44180: PUSH
44181: LD_VAR 0 5
44185: ARRAY
44186: PPUSH
44187: CALL_OW 1
44191: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44192: LD_ADDR_VAR 0 7
44196: PUSH
44197: LD_VAR 0 7
44201: PPUSH
44202: LD_VAR 0 5
44206: PUSH
44207: LD_INT 1
44209: MINUS
44210: PPUSH
44211: LD_VAR 0 6
44215: PPUSH
44216: CALL_OW 1
44220: ST_TO_ADDR
// end ;
44221: GO 44138
44223: POP
44224: POP
// result := s_arr [ 1 ] ;
44225: LD_ADDR_VAR 0 4
44229: PUSH
44230: LD_VAR 0 7
44234: PUSH
44235: LD_INT 1
44237: ARRAY
44238: ST_TO_ADDR
// end ; end ;
44239: LD_VAR 0 4
44243: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44244: LD_INT 0
44246: PPUSH
44247: PPUSH
// if not list then
44248: LD_VAR 0 1
44252: NOT
44253: IFFALSE 44257
// exit ;
44255: GO 44348
// i := list [ pos1 ] ;
44257: LD_ADDR_VAR 0 5
44261: PUSH
44262: LD_VAR 0 1
44266: PUSH
44267: LD_VAR 0 2
44271: ARRAY
44272: ST_TO_ADDR
// if not i then
44273: LD_VAR 0 5
44277: NOT
44278: IFFALSE 44282
// exit ;
44280: GO 44348
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44282: LD_ADDR_VAR 0 1
44286: PUSH
44287: LD_VAR 0 1
44291: PPUSH
44292: LD_VAR 0 2
44296: PPUSH
44297: LD_VAR 0 1
44301: PUSH
44302: LD_VAR 0 3
44306: ARRAY
44307: PPUSH
44308: CALL_OW 1
44312: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44313: LD_ADDR_VAR 0 1
44317: PUSH
44318: LD_VAR 0 1
44322: PPUSH
44323: LD_VAR 0 3
44327: PPUSH
44328: LD_VAR 0 5
44332: PPUSH
44333: CALL_OW 1
44337: ST_TO_ADDR
// result := list ;
44338: LD_ADDR_VAR 0 4
44342: PUSH
44343: LD_VAR 0 1
44347: ST_TO_ADDR
// end ;
44348: LD_VAR 0 4
44352: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44353: LD_INT 0
44355: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44356: LD_ADDR_VAR 0 5
44360: PUSH
44361: LD_VAR 0 1
44365: PPUSH
44366: CALL_OW 250
44370: PPUSH
44371: LD_VAR 0 1
44375: PPUSH
44376: CALL_OW 251
44380: PPUSH
44381: LD_VAR 0 2
44385: PPUSH
44386: LD_VAR 0 3
44390: PPUSH
44391: LD_VAR 0 4
44395: PPUSH
44396: CALL 44406 0 5
44400: ST_TO_ADDR
// end ;
44401: LD_VAR 0 5
44405: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44406: LD_INT 0
44408: PPUSH
44409: PPUSH
44410: PPUSH
44411: PPUSH
// if not list then
44412: LD_VAR 0 3
44416: NOT
44417: IFFALSE 44421
// exit ;
44419: GO 44809
// result := [ ] ;
44421: LD_ADDR_VAR 0 6
44425: PUSH
44426: EMPTY
44427: ST_TO_ADDR
// for i in list do
44428: LD_ADDR_VAR 0 7
44432: PUSH
44433: LD_VAR 0 3
44437: PUSH
44438: FOR_IN
44439: IFFALSE 44641
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44441: LD_ADDR_VAR 0 9
44445: PUSH
44446: LD_VAR 0 7
44450: PPUSH
44451: LD_VAR 0 1
44455: PPUSH
44456: LD_VAR 0 2
44460: PPUSH
44461: CALL_OW 297
44465: ST_TO_ADDR
// if not result then
44466: LD_VAR 0 6
44470: NOT
44471: IFFALSE 44497
// result := [ [ i , tmp ] ] else
44473: LD_ADDR_VAR 0 6
44477: PUSH
44478: LD_VAR 0 7
44482: PUSH
44483: LD_VAR 0 9
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: EMPTY
44493: LIST
44494: ST_TO_ADDR
44495: GO 44639
// begin if result [ result ] [ 2 ] < tmp then
44497: LD_VAR 0 6
44501: PUSH
44502: LD_VAR 0 6
44506: ARRAY
44507: PUSH
44508: LD_INT 2
44510: ARRAY
44511: PUSH
44512: LD_VAR 0 9
44516: LESS
44517: IFFALSE 44559
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44519: LD_ADDR_VAR 0 6
44523: PUSH
44524: LD_VAR 0 6
44528: PPUSH
44529: LD_VAR 0 6
44533: PUSH
44534: LD_INT 1
44536: PLUS
44537: PPUSH
44538: LD_VAR 0 7
44542: PUSH
44543: LD_VAR 0 9
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PPUSH
44552: CALL_OW 2
44556: ST_TO_ADDR
44557: GO 44639
// for j = 1 to result do
44559: LD_ADDR_VAR 0 8
44563: PUSH
44564: DOUBLE
44565: LD_INT 1
44567: DEC
44568: ST_TO_ADDR
44569: LD_VAR 0 6
44573: PUSH
44574: FOR_TO
44575: IFFALSE 44637
// begin if tmp < result [ j ] [ 2 ] then
44577: LD_VAR 0 9
44581: PUSH
44582: LD_VAR 0 6
44586: PUSH
44587: LD_VAR 0 8
44591: ARRAY
44592: PUSH
44593: LD_INT 2
44595: ARRAY
44596: LESS
44597: IFFALSE 44635
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44599: LD_ADDR_VAR 0 6
44603: PUSH
44604: LD_VAR 0 6
44608: PPUSH
44609: LD_VAR 0 8
44613: PPUSH
44614: LD_VAR 0 7
44618: PUSH
44619: LD_VAR 0 9
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PPUSH
44628: CALL_OW 2
44632: ST_TO_ADDR
// break ;
44633: GO 44637
// end ; end ;
44635: GO 44574
44637: POP
44638: POP
// end ; end ;
44639: GO 44438
44641: POP
44642: POP
// if result and not asc then
44643: LD_VAR 0 6
44647: PUSH
44648: LD_VAR 0 4
44652: NOT
44653: AND
44654: IFFALSE 44729
// begin tmp := result ;
44656: LD_ADDR_VAR 0 9
44660: PUSH
44661: LD_VAR 0 6
44665: ST_TO_ADDR
// for i = tmp downto 1 do
44666: LD_ADDR_VAR 0 7
44670: PUSH
44671: DOUBLE
44672: LD_VAR 0 9
44676: INC
44677: ST_TO_ADDR
44678: LD_INT 1
44680: PUSH
44681: FOR_DOWNTO
44682: IFFALSE 44727
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44684: LD_ADDR_VAR 0 6
44688: PUSH
44689: LD_VAR 0 6
44693: PPUSH
44694: LD_VAR 0 9
44698: PUSH
44699: LD_VAR 0 7
44703: MINUS
44704: PUSH
44705: LD_INT 1
44707: PLUS
44708: PPUSH
44709: LD_VAR 0 9
44713: PUSH
44714: LD_VAR 0 7
44718: ARRAY
44719: PPUSH
44720: CALL_OW 1
44724: ST_TO_ADDR
44725: GO 44681
44727: POP
44728: POP
// end ; tmp := [ ] ;
44729: LD_ADDR_VAR 0 9
44733: PUSH
44734: EMPTY
44735: ST_TO_ADDR
// if mode then
44736: LD_VAR 0 5
44740: IFFALSE 44809
// begin for i = 1 to result do
44742: LD_ADDR_VAR 0 7
44746: PUSH
44747: DOUBLE
44748: LD_INT 1
44750: DEC
44751: ST_TO_ADDR
44752: LD_VAR 0 6
44756: PUSH
44757: FOR_TO
44758: IFFALSE 44797
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44760: LD_ADDR_VAR 0 9
44764: PUSH
44765: LD_VAR 0 9
44769: PPUSH
44770: LD_VAR 0 7
44774: PPUSH
44775: LD_VAR 0 6
44779: PUSH
44780: LD_VAR 0 7
44784: ARRAY
44785: PUSH
44786: LD_INT 1
44788: ARRAY
44789: PPUSH
44790: CALL_OW 1
44794: ST_TO_ADDR
44795: GO 44757
44797: POP
44798: POP
// result := tmp ;
44799: LD_ADDR_VAR 0 6
44803: PUSH
44804: LD_VAR 0 9
44808: ST_TO_ADDR
// end ; end ;
44809: LD_VAR 0 6
44813: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44814: LD_INT 0
44816: PPUSH
44817: PPUSH
44818: PPUSH
44819: PPUSH
44820: PPUSH
44821: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44822: LD_ADDR_VAR 0 5
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: EMPTY
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: ST_TO_ADDR
// if not x or not y then
44844: LD_VAR 0 2
44848: NOT
44849: PUSH
44850: LD_VAR 0 3
44854: NOT
44855: OR
44856: IFFALSE 44860
// exit ;
44858: GO 46512
// if not range then
44860: LD_VAR 0 4
44864: NOT
44865: IFFALSE 44875
// range := 10 ;
44867: LD_ADDR_VAR 0 4
44871: PUSH
44872: LD_INT 10
44874: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44875: LD_ADDR_VAR 0 8
44879: PUSH
44880: LD_INT 81
44882: PUSH
44883: LD_VAR 0 1
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 92
44894: PUSH
44895: LD_VAR 0 2
44899: PUSH
44900: LD_VAR 0 3
44904: PUSH
44905: LD_VAR 0 4
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 3
44918: PUSH
44919: LD_INT 21
44921: PUSH
44922: LD_INT 3
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: LIST
44937: PPUSH
44938: CALL_OW 69
44942: ST_TO_ADDR
// if not tmp then
44943: LD_VAR 0 8
44947: NOT
44948: IFFALSE 44952
// exit ;
44950: GO 46512
// for i in tmp do
44952: LD_ADDR_VAR 0 6
44956: PUSH
44957: LD_VAR 0 8
44961: PUSH
44962: FOR_IN
44963: IFFALSE 46487
// begin points := [ 0 , 0 , 0 ] ;
44965: LD_ADDR_VAR 0 9
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: LIST
44983: ST_TO_ADDR
// bpoints := 1 ;
44984: LD_ADDR_VAR 0 10
44988: PUSH
44989: LD_INT 1
44991: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44992: LD_VAR 0 6
44996: PPUSH
44997: CALL_OW 247
45001: PUSH
45002: LD_INT 1
45004: DOUBLE
45005: EQUAL
45006: IFTRUE 45010
45008: GO 45588
45010: POP
// begin if GetClass ( i ) = 1 then
45011: LD_VAR 0 6
45015: PPUSH
45016: CALL_OW 257
45020: PUSH
45021: LD_INT 1
45023: EQUAL
45024: IFFALSE 45045
// points := [ 10 , 5 , 3 ] ;
45026: LD_ADDR_VAR 0 9
45030: PUSH
45031: LD_INT 10
45033: PUSH
45034: LD_INT 5
45036: PUSH
45037: LD_INT 3
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: LIST
45044: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45045: LD_VAR 0 6
45049: PPUSH
45050: CALL_OW 257
45054: PUSH
45055: LD_INT 2
45057: PUSH
45058: LD_INT 3
45060: PUSH
45061: LD_INT 4
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: LIST
45068: IN
45069: IFFALSE 45090
// points := [ 3 , 2 , 1 ] ;
45071: LD_ADDR_VAR 0 9
45075: PUSH
45076: LD_INT 3
45078: PUSH
45079: LD_INT 2
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: LIST
45089: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45090: LD_VAR 0 6
45094: PPUSH
45095: CALL_OW 257
45099: PUSH
45100: LD_INT 5
45102: EQUAL
45103: IFFALSE 45124
// points := [ 130 , 5 , 2 ] ;
45105: LD_ADDR_VAR 0 9
45109: PUSH
45110: LD_INT 130
45112: PUSH
45113: LD_INT 5
45115: PUSH
45116: LD_INT 2
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: LIST
45123: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45124: LD_VAR 0 6
45128: PPUSH
45129: CALL_OW 257
45133: PUSH
45134: LD_INT 8
45136: EQUAL
45137: IFFALSE 45158
// points := [ 35 , 35 , 30 ] ;
45139: LD_ADDR_VAR 0 9
45143: PUSH
45144: LD_INT 35
45146: PUSH
45147: LD_INT 35
45149: PUSH
45150: LD_INT 30
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: LIST
45157: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45158: LD_VAR 0 6
45162: PPUSH
45163: CALL_OW 257
45167: PUSH
45168: LD_INT 9
45170: EQUAL
45171: IFFALSE 45192
// points := [ 20 , 55 , 40 ] ;
45173: LD_ADDR_VAR 0 9
45177: PUSH
45178: LD_INT 20
45180: PUSH
45181: LD_INT 55
45183: PUSH
45184: LD_INT 40
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: LIST
45191: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45192: LD_VAR 0 6
45196: PPUSH
45197: CALL_OW 257
45201: PUSH
45202: LD_INT 12
45204: PUSH
45205: LD_INT 16
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: IN
45212: IFFALSE 45233
// points := [ 5 , 3 , 2 ] ;
45214: LD_ADDR_VAR 0 9
45218: PUSH
45219: LD_INT 5
45221: PUSH
45222: LD_INT 3
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: LIST
45232: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45233: LD_VAR 0 6
45237: PPUSH
45238: CALL_OW 257
45242: PUSH
45243: LD_INT 17
45245: EQUAL
45246: IFFALSE 45267
// points := [ 100 , 50 , 75 ] ;
45248: LD_ADDR_VAR 0 9
45252: PUSH
45253: LD_INT 100
45255: PUSH
45256: LD_INT 50
45258: PUSH
45259: LD_INT 75
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: LIST
45266: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45267: LD_VAR 0 6
45271: PPUSH
45272: CALL_OW 257
45276: PUSH
45277: LD_INT 15
45279: EQUAL
45280: IFFALSE 45301
// points := [ 10 , 5 , 3 ] ;
45282: LD_ADDR_VAR 0 9
45286: PUSH
45287: LD_INT 10
45289: PUSH
45290: LD_INT 5
45292: PUSH
45293: LD_INT 3
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: LIST
45300: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45301: LD_VAR 0 6
45305: PPUSH
45306: CALL_OW 257
45310: PUSH
45311: LD_INT 14
45313: EQUAL
45314: IFFALSE 45335
// points := [ 10 , 0 , 0 ] ;
45316: LD_ADDR_VAR 0 9
45320: PUSH
45321: LD_INT 10
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: LIST
45334: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45335: LD_VAR 0 6
45339: PPUSH
45340: CALL_OW 257
45344: PUSH
45345: LD_INT 11
45347: EQUAL
45348: IFFALSE 45369
// points := [ 30 , 10 , 5 ] ;
45350: LD_ADDR_VAR 0 9
45354: PUSH
45355: LD_INT 30
45357: PUSH
45358: LD_INT 10
45360: PUSH
45361: LD_INT 5
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: LIST
45368: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45369: LD_VAR 0 1
45373: PPUSH
45374: LD_INT 5
45376: PPUSH
45377: CALL_OW 321
45381: PUSH
45382: LD_INT 2
45384: EQUAL
45385: IFFALSE 45402
// bpoints := bpoints * 1.8 ;
45387: LD_ADDR_VAR 0 10
45391: PUSH
45392: LD_VAR 0 10
45396: PUSH
45397: LD_REAL  1.80000000000000E+0000
45400: MUL
45401: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45402: LD_VAR 0 6
45406: PPUSH
45407: CALL_OW 257
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: LD_INT 3
45420: PUSH
45421: LD_INT 4
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: IN
45430: PUSH
45431: LD_VAR 0 1
45435: PPUSH
45436: LD_INT 51
45438: PPUSH
45439: CALL_OW 321
45443: PUSH
45444: LD_INT 2
45446: EQUAL
45447: AND
45448: IFFALSE 45465
// bpoints := bpoints * 1.2 ;
45450: LD_ADDR_VAR 0 10
45454: PUSH
45455: LD_VAR 0 10
45459: PUSH
45460: LD_REAL  1.20000000000000E+0000
45463: MUL
45464: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45465: LD_VAR 0 6
45469: PPUSH
45470: CALL_OW 257
45474: PUSH
45475: LD_INT 5
45477: PUSH
45478: LD_INT 7
45480: PUSH
45481: LD_INT 9
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: LIST
45488: IN
45489: PUSH
45490: LD_VAR 0 1
45494: PPUSH
45495: LD_INT 52
45497: PPUSH
45498: CALL_OW 321
45502: PUSH
45503: LD_INT 2
45505: EQUAL
45506: AND
45507: IFFALSE 45524
// bpoints := bpoints * 1.5 ;
45509: LD_ADDR_VAR 0 10
45513: PUSH
45514: LD_VAR 0 10
45518: PUSH
45519: LD_REAL  1.50000000000000E+0000
45522: MUL
45523: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45524: LD_VAR 0 1
45528: PPUSH
45529: LD_INT 66
45531: PPUSH
45532: CALL_OW 321
45536: PUSH
45537: LD_INT 2
45539: EQUAL
45540: IFFALSE 45557
// bpoints := bpoints * 1.1 ;
45542: LD_ADDR_VAR 0 10
45546: PUSH
45547: LD_VAR 0 10
45551: PUSH
45552: LD_REAL  1.10000000000000E+0000
45555: MUL
45556: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45557: LD_ADDR_VAR 0 10
45561: PUSH
45562: LD_VAR 0 10
45566: PUSH
45567: LD_VAR 0 6
45571: PPUSH
45572: LD_INT 1
45574: PPUSH
45575: CALL_OW 259
45579: PUSH
45580: LD_REAL  1.15000000000000E+0000
45583: MUL
45584: MUL
45585: ST_TO_ADDR
// end ; unit_vehicle :
45586: GO 46416
45588: LD_INT 2
45590: DOUBLE
45591: EQUAL
45592: IFTRUE 45596
45594: GO 46404
45596: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45597: LD_VAR 0 6
45601: PPUSH
45602: CALL_OW 264
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: LD_INT 42
45612: PUSH
45613: LD_INT 24
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: LIST
45620: IN
45621: IFFALSE 45642
// points := [ 25 , 5 , 3 ] ;
45623: LD_ADDR_VAR 0 9
45627: PUSH
45628: LD_INT 25
45630: PUSH
45631: LD_INT 5
45633: PUSH
45634: LD_INT 3
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: LIST
45641: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45642: LD_VAR 0 6
45646: PPUSH
45647: CALL_OW 264
45651: PUSH
45652: LD_INT 4
45654: PUSH
45655: LD_INT 43
45657: PUSH
45658: LD_INT 25
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: LIST
45665: IN
45666: IFFALSE 45687
// points := [ 40 , 15 , 5 ] ;
45668: LD_ADDR_VAR 0 9
45672: PUSH
45673: LD_INT 40
45675: PUSH
45676: LD_INT 15
45678: PUSH
45679: LD_INT 5
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: LIST
45686: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45687: LD_VAR 0 6
45691: PPUSH
45692: CALL_OW 264
45696: PUSH
45697: LD_INT 3
45699: PUSH
45700: LD_INT 23
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: IN
45707: IFFALSE 45728
// points := [ 7 , 25 , 8 ] ;
45709: LD_ADDR_VAR 0 9
45713: PUSH
45714: LD_INT 7
45716: PUSH
45717: LD_INT 25
45719: PUSH
45720: LD_INT 8
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: LIST
45727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45728: LD_VAR 0 6
45732: PPUSH
45733: CALL_OW 264
45737: PUSH
45738: LD_INT 5
45740: PUSH
45741: LD_INT 27
45743: PUSH
45744: LD_INT 44
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: LIST
45751: IN
45752: IFFALSE 45773
// points := [ 14 , 50 , 16 ] ;
45754: LD_ADDR_VAR 0 9
45758: PUSH
45759: LD_INT 14
45761: PUSH
45762: LD_INT 50
45764: PUSH
45765: LD_INT 16
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: LIST
45772: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45773: LD_VAR 0 6
45777: PPUSH
45778: CALL_OW 264
45782: PUSH
45783: LD_INT 6
45785: PUSH
45786: LD_INT 46
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: IN
45793: IFFALSE 45814
// points := [ 32 , 120 , 70 ] ;
45795: LD_ADDR_VAR 0 9
45799: PUSH
45800: LD_INT 32
45802: PUSH
45803: LD_INT 120
45805: PUSH
45806: LD_INT 70
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: LIST
45813: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45814: LD_VAR 0 6
45818: PPUSH
45819: CALL_OW 264
45823: PUSH
45824: LD_INT 7
45826: PUSH
45827: LD_INT 28
45829: PUSH
45830: LD_INT 45
45832: PUSH
45833: LD_EXP 67
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: IN
45844: IFFALSE 45865
// points := [ 35 , 20 , 45 ] ;
45846: LD_ADDR_VAR 0 9
45850: PUSH
45851: LD_INT 35
45853: PUSH
45854: LD_INT 20
45856: PUSH
45857: LD_INT 45
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: LIST
45864: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45865: LD_VAR 0 6
45869: PPUSH
45870: CALL_OW 264
45874: PUSH
45875: LD_INT 47
45877: PUSH
45878: EMPTY
45879: LIST
45880: IN
45881: IFFALSE 45902
// points := [ 67 , 45 , 75 ] ;
45883: LD_ADDR_VAR 0 9
45887: PUSH
45888: LD_INT 67
45890: PUSH
45891: LD_INT 45
45893: PUSH
45894: LD_INT 75
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: LIST
45901: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45902: LD_VAR 0 6
45906: PPUSH
45907: CALL_OW 264
45911: PUSH
45912: LD_INT 26
45914: PUSH
45915: EMPTY
45916: LIST
45917: IN
45918: IFFALSE 45939
// points := [ 120 , 30 , 80 ] ;
45920: LD_ADDR_VAR 0 9
45924: PUSH
45925: LD_INT 120
45927: PUSH
45928: LD_INT 30
45930: PUSH
45931: LD_INT 80
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: LIST
45938: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45939: LD_VAR 0 6
45943: PPUSH
45944: CALL_OW 264
45948: PUSH
45949: LD_INT 22
45951: PUSH
45952: EMPTY
45953: LIST
45954: IN
45955: IFFALSE 45976
// points := [ 40 , 1 , 1 ] ;
45957: LD_ADDR_VAR 0 9
45961: PUSH
45962: LD_INT 40
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: LIST
45975: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45976: LD_VAR 0 6
45980: PPUSH
45981: CALL_OW 264
45985: PUSH
45986: LD_INT 29
45988: PUSH
45989: EMPTY
45990: LIST
45991: IN
45992: IFFALSE 46013
// points := [ 70 , 200 , 400 ] ;
45994: LD_ADDR_VAR 0 9
45998: PUSH
45999: LD_INT 70
46001: PUSH
46002: LD_INT 200
46004: PUSH
46005: LD_INT 400
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: LIST
46012: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46013: LD_VAR 0 6
46017: PPUSH
46018: CALL_OW 264
46022: PUSH
46023: LD_INT 14
46025: PUSH
46026: LD_INT 53
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: IN
46033: IFFALSE 46054
// points := [ 40 , 10 , 20 ] ;
46035: LD_ADDR_VAR 0 9
46039: PUSH
46040: LD_INT 40
46042: PUSH
46043: LD_INT 10
46045: PUSH
46046: LD_INT 20
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: LIST
46053: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46054: LD_VAR 0 6
46058: PPUSH
46059: CALL_OW 264
46063: PUSH
46064: LD_INT 9
46066: PUSH
46067: EMPTY
46068: LIST
46069: IN
46070: IFFALSE 46091
// points := [ 5 , 70 , 20 ] ;
46072: LD_ADDR_VAR 0 9
46076: PUSH
46077: LD_INT 5
46079: PUSH
46080: LD_INT 70
46082: PUSH
46083: LD_INT 20
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: LIST
46090: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46091: LD_VAR 0 6
46095: PPUSH
46096: CALL_OW 264
46100: PUSH
46101: LD_INT 10
46103: PUSH
46104: EMPTY
46105: LIST
46106: IN
46107: IFFALSE 46128
// points := [ 35 , 110 , 70 ] ;
46109: LD_ADDR_VAR 0 9
46113: PUSH
46114: LD_INT 35
46116: PUSH
46117: LD_INT 110
46119: PUSH
46120: LD_INT 70
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: LIST
46127: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46128: LD_VAR 0 6
46132: PPUSH
46133: CALL_OW 265
46137: PUSH
46138: LD_INT 25
46140: EQUAL
46141: IFFALSE 46162
// points := [ 80 , 65 , 100 ] ;
46143: LD_ADDR_VAR 0 9
46147: PUSH
46148: LD_INT 80
46150: PUSH
46151: LD_INT 65
46153: PUSH
46154: LD_INT 100
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: LIST
46161: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46162: LD_VAR 0 6
46166: PPUSH
46167: CALL_OW 263
46171: PUSH
46172: LD_INT 1
46174: EQUAL
46175: IFFALSE 46210
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46177: LD_ADDR_VAR 0 10
46181: PUSH
46182: LD_VAR 0 10
46186: PUSH
46187: LD_VAR 0 6
46191: PPUSH
46192: CALL_OW 311
46196: PPUSH
46197: LD_INT 3
46199: PPUSH
46200: CALL_OW 259
46204: PUSH
46205: LD_INT 4
46207: MUL
46208: MUL
46209: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46210: LD_VAR 0 6
46214: PPUSH
46215: CALL_OW 263
46219: PUSH
46220: LD_INT 2
46222: EQUAL
46223: IFFALSE 46274
// begin j := IsControledBy ( i ) ;
46225: LD_ADDR_VAR 0 7
46229: PUSH
46230: LD_VAR 0 6
46234: PPUSH
46235: CALL_OW 312
46239: ST_TO_ADDR
// if j then
46240: LD_VAR 0 7
46244: IFFALSE 46274
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46246: LD_ADDR_VAR 0 10
46250: PUSH
46251: LD_VAR 0 10
46255: PUSH
46256: LD_VAR 0 7
46260: PPUSH
46261: LD_INT 3
46263: PPUSH
46264: CALL_OW 259
46268: PUSH
46269: LD_INT 3
46271: MUL
46272: MUL
46273: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46274: LD_VAR 0 6
46278: PPUSH
46279: CALL_OW 264
46283: PUSH
46284: LD_INT 5
46286: PUSH
46287: LD_INT 6
46289: PUSH
46290: LD_INT 46
46292: PUSH
46293: LD_INT 44
46295: PUSH
46296: LD_INT 47
46298: PUSH
46299: LD_INT 45
46301: PUSH
46302: LD_INT 28
46304: PUSH
46305: LD_INT 7
46307: PUSH
46308: LD_INT 27
46310: PUSH
46311: LD_INT 29
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: IN
46326: PUSH
46327: LD_VAR 0 1
46331: PPUSH
46332: LD_INT 52
46334: PPUSH
46335: CALL_OW 321
46339: PUSH
46340: LD_INT 2
46342: EQUAL
46343: AND
46344: IFFALSE 46361
// bpoints := bpoints * 1.2 ;
46346: LD_ADDR_VAR 0 10
46350: PUSH
46351: LD_VAR 0 10
46355: PUSH
46356: LD_REAL  1.20000000000000E+0000
46359: MUL
46360: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46361: LD_VAR 0 6
46365: PPUSH
46366: CALL_OW 264
46370: PUSH
46371: LD_INT 6
46373: PUSH
46374: LD_INT 46
46376: PUSH
46377: LD_INT 47
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: LIST
46384: IN
46385: IFFALSE 46402
// bpoints := bpoints * 1.2 ;
46387: LD_ADDR_VAR 0 10
46391: PUSH
46392: LD_VAR 0 10
46396: PUSH
46397: LD_REAL  1.20000000000000E+0000
46400: MUL
46401: ST_TO_ADDR
// end ; unit_building :
46402: GO 46416
46404: LD_INT 3
46406: DOUBLE
46407: EQUAL
46408: IFTRUE 46412
46410: GO 46415
46412: POP
// ; end ;
46413: GO 46416
46415: POP
// for j = 1 to 3 do
46416: LD_ADDR_VAR 0 7
46420: PUSH
46421: DOUBLE
46422: LD_INT 1
46424: DEC
46425: ST_TO_ADDR
46426: LD_INT 3
46428: PUSH
46429: FOR_TO
46430: IFFALSE 46483
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46432: LD_ADDR_VAR 0 5
46436: PUSH
46437: LD_VAR 0 5
46441: PPUSH
46442: LD_VAR 0 7
46446: PPUSH
46447: LD_VAR 0 5
46451: PUSH
46452: LD_VAR 0 7
46456: ARRAY
46457: PUSH
46458: LD_VAR 0 9
46462: PUSH
46463: LD_VAR 0 7
46467: ARRAY
46468: PUSH
46469: LD_VAR 0 10
46473: MUL
46474: PLUS
46475: PPUSH
46476: CALL_OW 1
46480: ST_TO_ADDR
46481: GO 46429
46483: POP
46484: POP
// end ;
46485: GO 44962
46487: POP
46488: POP
// result := Replace ( result , 4 , tmp ) ;
46489: LD_ADDR_VAR 0 5
46493: PUSH
46494: LD_VAR 0 5
46498: PPUSH
46499: LD_INT 4
46501: PPUSH
46502: LD_VAR 0 8
46506: PPUSH
46507: CALL_OW 1
46511: ST_TO_ADDR
// end ;
46512: LD_VAR 0 5
46516: RET
// export function DangerAtRange ( unit , range ) ; begin
46517: LD_INT 0
46519: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46520: LD_ADDR_VAR 0 3
46524: PUSH
46525: LD_VAR 0 1
46529: PPUSH
46530: CALL_OW 255
46534: PPUSH
46535: LD_VAR 0 1
46539: PPUSH
46540: CALL_OW 250
46544: PPUSH
46545: LD_VAR 0 1
46549: PPUSH
46550: CALL_OW 251
46554: PPUSH
46555: LD_VAR 0 2
46559: PPUSH
46560: CALL 44814 0 4
46564: ST_TO_ADDR
// end ;
46565: LD_VAR 0 3
46569: RET
// export function DangerInArea ( side , area ) ; begin
46570: LD_INT 0
46572: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46573: LD_ADDR_VAR 0 3
46577: PUSH
46578: LD_VAR 0 2
46582: PPUSH
46583: LD_INT 81
46585: PUSH
46586: LD_VAR 0 1
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PPUSH
46595: CALL_OW 70
46599: ST_TO_ADDR
// end ;
46600: LD_VAR 0 3
46604: RET
// export function IsExtension ( b ) ; begin
46605: LD_INT 0
46607: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46608: LD_ADDR_VAR 0 2
46612: PUSH
46613: LD_VAR 0 1
46617: PUSH
46618: LD_INT 23
46620: PUSH
46621: LD_INT 20
46623: PUSH
46624: LD_INT 22
46626: PUSH
46627: LD_INT 17
46629: PUSH
46630: LD_INT 24
46632: PUSH
46633: LD_INT 21
46635: PUSH
46636: LD_INT 19
46638: PUSH
46639: LD_INT 16
46641: PUSH
46642: LD_INT 25
46644: PUSH
46645: LD_INT 18
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: IN
46660: ST_TO_ADDR
// end ;
46661: LD_VAR 0 2
46665: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46666: LD_INT 0
46668: PPUSH
46669: PPUSH
46670: PPUSH
// result := [ ] ;
46671: LD_ADDR_VAR 0 4
46675: PUSH
46676: EMPTY
46677: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46678: LD_ADDR_VAR 0 5
46682: PUSH
46683: LD_VAR 0 2
46687: PPUSH
46688: LD_INT 21
46690: PUSH
46691: LD_INT 3
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PPUSH
46698: CALL_OW 70
46702: ST_TO_ADDR
// if not tmp then
46703: LD_VAR 0 5
46707: NOT
46708: IFFALSE 46712
// exit ;
46710: GO 46776
// if checkLink then
46712: LD_VAR 0 3
46716: IFFALSE 46766
// begin for i in tmp do
46718: LD_ADDR_VAR 0 6
46722: PUSH
46723: LD_VAR 0 5
46727: PUSH
46728: FOR_IN
46729: IFFALSE 46764
// if GetBase ( i ) <> base then
46731: LD_VAR 0 6
46735: PPUSH
46736: CALL_OW 274
46740: PUSH
46741: LD_VAR 0 1
46745: NONEQUAL
46746: IFFALSE 46762
// ComLinkToBase ( base , i ) ;
46748: LD_VAR 0 1
46752: PPUSH
46753: LD_VAR 0 6
46757: PPUSH
46758: CALL_OW 169
46762: GO 46728
46764: POP
46765: POP
// end ; result := tmp ;
46766: LD_ADDR_VAR 0 4
46770: PUSH
46771: LD_VAR 0 5
46775: ST_TO_ADDR
// end ;
46776: LD_VAR 0 4
46780: RET
// export function ComComplete ( units , b ) ; var i ; begin
46781: LD_INT 0
46783: PPUSH
46784: PPUSH
// if not units then
46785: LD_VAR 0 1
46789: NOT
46790: IFFALSE 46794
// exit ;
46792: GO 46884
// for i in units do
46794: LD_ADDR_VAR 0 4
46798: PUSH
46799: LD_VAR 0 1
46803: PUSH
46804: FOR_IN
46805: IFFALSE 46882
// if BuildingStatus ( b ) = bs_build then
46807: LD_VAR 0 2
46811: PPUSH
46812: CALL_OW 461
46816: PUSH
46817: LD_INT 1
46819: EQUAL
46820: IFFALSE 46880
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46822: LD_VAR 0 4
46826: PPUSH
46827: LD_STRING h
46829: PUSH
46830: LD_VAR 0 2
46834: PPUSH
46835: CALL_OW 250
46839: PUSH
46840: LD_VAR 0 2
46844: PPUSH
46845: CALL_OW 251
46849: PUSH
46850: LD_VAR 0 2
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: PUSH
46873: EMPTY
46874: LIST
46875: PPUSH
46876: CALL_OW 446
46880: GO 46804
46882: POP
46883: POP
// end ;
46884: LD_VAR 0 3
46888: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46889: LD_INT 0
46891: PPUSH
46892: PPUSH
46893: PPUSH
46894: PPUSH
46895: PPUSH
46896: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46897: LD_VAR 0 1
46901: NOT
46902: PUSH
46903: LD_VAR 0 1
46907: PPUSH
46908: CALL_OW 263
46912: PUSH
46913: LD_INT 2
46915: NONEQUAL
46916: OR
46917: IFFALSE 46921
// exit ;
46919: GO 47237
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46921: LD_ADDR_VAR 0 6
46925: PUSH
46926: LD_INT 22
46928: PUSH
46929: LD_VAR 0 1
46933: PPUSH
46934: CALL_OW 255
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 2
46945: PUSH
46946: LD_INT 30
46948: PUSH
46949: LD_INT 36
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 34
46958: PUSH
46959: LD_INT 31
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: LIST
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PPUSH
46975: CALL_OW 69
46979: ST_TO_ADDR
// if not tmp then
46980: LD_VAR 0 6
46984: NOT
46985: IFFALSE 46989
// exit ;
46987: GO 47237
// result := [ ] ;
46989: LD_ADDR_VAR 0 2
46993: PUSH
46994: EMPTY
46995: ST_TO_ADDR
// for i in tmp do
46996: LD_ADDR_VAR 0 3
47000: PUSH
47001: LD_VAR 0 6
47005: PUSH
47006: FOR_IN
47007: IFFALSE 47078
// begin t := UnitsInside ( i ) ;
47009: LD_ADDR_VAR 0 4
47013: PUSH
47014: LD_VAR 0 3
47018: PPUSH
47019: CALL_OW 313
47023: ST_TO_ADDR
// if t then
47024: LD_VAR 0 4
47028: IFFALSE 47076
// for j in t do
47030: LD_ADDR_VAR 0 7
47034: PUSH
47035: LD_VAR 0 4
47039: PUSH
47040: FOR_IN
47041: IFFALSE 47074
// result := Replace ( result , result + 1 , j ) ;
47043: LD_ADDR_VAR 0 2
47047: PUSH
47048: LD_VAR 0 2
47052: PPUSH
47053: LD_VAR 0 2
47057: PUSH
47058: LD_INT 1
47060: PLUS
47061: PPUSH
47062: LD_VAR 0 7
47066: PPUSH
47067: CALL_OW 1
47071: ST_TO_ADDR
47072: GO 47040
47074: POP
47075: POP
// end ;
47076: GO 47006
47078: POP
47079: POP
// if not result then
47080: LD_VAR 0 2
47084: NOT
47085: IFFALSE 47089
// exit ;
47087: GO 47237
// mech := result [ 1 ] ;
47089: LD_ADDR_VAR 0 5
47093: PUSH
47094: LD_VAR 0 2
47098: PUSH
47099: LD_INT 1
47101: ARRAY
47102: ST_TO_ADDR
// if result > 1 then
47103: LD_VAR 0 2
47107: PUSH
47108: LD_INT 1
47110: GREATER
47111: IFFALSE 47223
// begin for i = 2 to result do
47113: LD_ADDR_VAR 0 3
47117: PUSH
47118: DOUBLE
47119: LD_INT 2
47121: DEC
47122: ST_TO_ADDR
47123: LD_VAR 0 2
47127: PUSH
47128: FOR_TO
47129: IFFALSE 47221
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47131: LD_ADDR_VAR 0 4
47135: PUSH
47136: LD_VAR 0 2
47140: PUSH
47141: LD_VAR 0 3
47145: ARRAY
47146: PPUSH
47147: LD_INT 3
47149: PPUSH
47150: CALL_OW 259
47154: PUSH
47155: LD_VAR 0 2
47159: PUSH
47160: LD_VAR 0 3
47164: ARRAY
47165: PPUSH
47166: CALL_OW 432
47170: MINUS
47171: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47172: LD_VAR 0 4
47176: PUSH
47177: LD_VAR 0 5
47181: PPUSH
47182: LD_INT 3
47184: PPUSH
47185: CALL_OW 259
47189: PUSH
47190: LD_VAR 0 5
47194: PPUSH
47195: CALL_OW 432
47199: MINUS
47200: GREATEREQUAL
47201: IFFALSE 47219
// mech := result [ i ] ;
47203: LD_ADDR_VAR 0 5
47207: PUSH
47208: LD_VAR 0 2
47212: PUSH
47213: LD_VAR 0 3
47217: ARRAY
47218: ST_TO_ADDR
// end ;
47219: GO 47128
47221: POP
47222: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47223: LD_VAR 0 1
47227: PPUSH
47228: LD_VAR 0 5
47232: PPUSH
47233: CALL_OW 135
// end ;
47237: LD_VAR 0 2
47241: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47242: LD_INT 0
47244: PPUSH
47245: PPUSH
47246: PPUSH
47247: PPUSH
47248: PPUSH
47249: PPUSH
47250: PPUSH
47251: PPUSH
47252: PPUSH
47253: PPUSH
47254: PPUSH
47255: PPUSH
47256: PPUSH
// result := [ ] ;
47257: LD_ADDR_VAR 0 7
47261: PUSH
47262: EMPTY
47263: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47264: LD_VAR 0 1
47268: PPUSH
47269: CALL_OW 266
47273: PUSH
47274: LD_INT 0
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: IN
47284: NOT
47285: IFFALSE 47289
// exit ;
47287: GO 48923
// if name then
47289: LD_VAR 0 3
47293: IFFALSE 47309
// SetBName ( base_dep , name ) ;
47295: LD_VAR 0 1
47299: PPUSH
47300: LD_VAR 0 3
47304: PPUSH
47305: CALL_OW 500
// base := GetBase ( base_dep ) ;
47309: LD_ADDR_VAR 0 15
47313: PUSH
47314: LD_VAR 0 1
47318: PPUSH
47319: CALL_OW 274
47323: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47324: LD_ADDR_VAR 0 16
47328: PUSH
47329: LD_VAR 0 1
47333: PPUSH
47334: CALL_OW 255
47338: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47339: LD_ADDR_VAR 0 17
47343: PUSH
47344: LD_VAR 0 1
47348: PPUSH
47349: CALL_OW 248
47353: ST_TO_ADDR
// if sources then
47354: LD_VAR 0 5
47358: IFFALSE 47405
// for i = 1 to 3 do
47360: LD_ADDR_VAR 0 8
47364: PUSH
47365: DOUBLE
47366: LD_INT 1
47368: DEC
47369: ST_TO_ADDR
47370: LD_INT 3
47372: PUSH
47373: FOR_TO
47374: IFFALSE 47403
// AddResourceType ( base , i , sources [ i ] ) ;
47376: LD_VAR 0 15
47380: PPUSH
47381: LD_VAR 0 8
47385: PPUSH
47386: LD_VAR 0 5
47390: PUSH
47391: LD_VAR 0 8
47395: ARRAY
47396: PPUSH
47397: CALL_OW 276
47401: GO 47373
47403: POP
47404: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47405: LD_ADDR_VAR 0 18
47409: PUSH
47410: LD_VAR 0 15
47414: PPUSH
47415: LD_VAR 0 2
47419: PPUSH
47420: LD_INT 1
47422: PPUSH
47423: CALL 46666 0 3
47427: ST_TO_ADDR
// InitHc ;
47428: CALL_OW 19
// InitUc ;
47432: CALL_OW 18
// uc_side := side ;
47436: LD_ADDR_OWVAR 20
47440: PUSH
47441: LD_VAR 0 16
47445: ST_TO_ADDR
// uc_nation := nation ;
47446: LD_ADDR_OWVAR 21
47450: PUSH
47451: LD_VAR 0 17
47455: ST_TO_ADDR
// if buildings then
47456: LD_VAR 0 18
47460: IFFALSE 48782
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47462: LD_ADDR_VAR 0 19
47466: PUSH
47467: LD_VAR 0 18
47471: PPUSH
47472: LD_INT 2
47474: PUSH
47475: LD_INT 30
47477: PUSH
47478: LD_INT 29
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 30
47487: PUSH
47488: LD_INT 30
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: LIST
47499: PPUSH
47500: CALL_OW 72
47504: ST_TO_ADDR
// if tmp then
47505: LD_VAR 0 19
47509: IFFALSE 47557
// for i in tmp do
47511: LD_ADDR_VAR 0 8
47515: PUSH
47516: LD_VAR 0 19
47520: PUSH
47521: FOR_IN
47522: IFFALSE 47555
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47524: LD_VAR 0 8
47528: PPUSH
47529: CALL_OW 250
47533: PPUSH
47534: LD_VAR 0 8
47538: PPUSH
47539: CALL_OW 251
47543: PPUSH
47544: LD_VAR 0 16
47548: PPUSH
47549: CALL_OW 441
47553: GO 47521
47555: POP
47556: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47557: LD_VAR 0 18
47561: PPUSH
47562: LD_INT 2
47564: PUSH
47565: LD_INT 30
47567: PUSH
47568: LD_INT 32
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 30
47577: PUSH
47578: LD_INT 33
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: LIST
47589: PPUSH
47590: CALL_OW 72
47594: IFFALSE 47682
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47596: LD_ADDR_VAR 0 8
47600: PUSH
47601: LD_VAR 0 18
47605: PPUSH
47606: LD_INT 2
47608: PUSH
47609: LD_INT 30
47611: PUSH
47612: LD_INT 32
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 30
47621: PUSH
47622: LD_INT 33
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: LIST
47633: PPUSH
47634: CALL_OW 72
47638: PUSH
47639: FOR_IN
47640: IFFALSE 47680
// begin if not GetBWeapon ( i ) then
47642: LD_VAR 0 8
47646: PPUSH
47647: CALL_OW 269
47651: NOT
47652: IFFALSE 47678
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47654: LD_VAR 0 8
47658: PPUSH
47659: LD_VAR 0 8
47663: PPUSH
47664: LD_VAR 0 2
47668: PPUSH
47669: CALL 48928 0 2
47673: PPUSH
47674: CALL_OW 431
// end ;
47678: GO 47639
47680: POP
47681: POP
// end ; for i = 1 to personel do
47682: LD_ADDR_VAR 0 8
47686: PUSH
47687: DOUBLE
47688: LD_INT 1
47690: DEC
47691: ST_TO_ADDR
47692: LD_VAR 0 6
47696: PUSH
47697: FOR_TO
47698: IFFALSE 48762
// begin if i > 4 then
47700: LD_VAR 0 8
47704: PUSH
47705: LD_INT 4
47707: GREATER
47708: IFFALSE 47712
// break ;
47710: GO 48762
// case i of 1 :
47712: LD_VAR 0 8
47716: PUSH
47717: LD_INT 1
47719: DOUBLE
47720: EQUAL
47721: IFTRUE 47725
47723: GO 47805
47725: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47726: LD_ADDR_VAR 0 12
47730: PUSH
47731: LD_VAR 0 18
47735: PPUSH
47736: LD_INT 22
47738: PUSH
47739: LD_VAR 0 16
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 58
47750: PUSH
47751: EMPTY
47752: LIST
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: LD_INT 30
47759: PUSH
47760: LD_INT 32
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 30
47769: PUSH
47770: LD_INT 4
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 30
47779: PUSH
47780: LD_INT 5
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: LIST
47797: PPUSH
47798: CALL_OW 72
47802: ST_TO_ADDR
47803: GO 48027
47805: LD_INT 2
47807: DOUBLE
47808: EQUAL
47809: IFTRUE 47813
47811: GO 47875
47813: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47814: LD_ADDR_VAR 0 12
47818: PUSH
47819: LD_VAR 0 18
47823: PPUSH
47824: LD_INT 22
47826: PUSH
47827: LD_VAR 0 16
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: LD_INT 30
47841: PUSH
47842: LD_INT 0
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 30
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: LIST
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PPUSH
47868: CALL_OW 72
47872: ST_TO_ADDR
47873: GO 48027
47875: LD_INT 3
47877: DOUBLE
47878: EQUAL
47879: IFTRUE 47883
47881: GO 47945
47883: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47884: LD_ADDR_VAR 0 12
47888: PUSH
47889: LD_VAR 0 18
47893: PPUSH
47894: LD_INT 22
47896: PUSH
47897: LD_VAR 0 16
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: LD_INT 30
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 30
47921: PUSH
47922: LD_INT 3
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: LIST
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PPUSH
47938: CALL_OW 72
47942: ST_TO_ADDR
47943: GO 48027
47945: LD_INT 4
47947: DOUBLE
47948: EQUAL
47949: IFTRUE 47953
47951: GO 48026
47953: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47954: LD_ADDR_VAR 0 12
47958: PUSH
47959: LD_VAR 0 18
47963: PPUSH
47964: LD_INT 22
47966: PUSH
47967: LD_VAR 0 16
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: LD_INT 30
47981: PUSH
47982: LD_INT 6
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 30
47991: PUSH
47992: LD_INT 7
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 30
48001: PUSH
48002: LD_INT 8
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PPUSH
48019: CALL_OW 72
48023: ST_TO_ADDR
48024: GO 48027
48026: POP
// if i = 1 then
48027: LD_VAR 0 8
48031: PUSH
48032: LD_INT 1
48034: EQUAL
48035: IFFALSE 48146
// begin tmp := [ ] ;
48037: LD_ADDR_VAR 0 19
48041: PUSH
48042: EMPTY
48043: ST_TO_ADDR
// for j in f do
48044: LD_ADDR_VAR 0 9
48048: PUSH
48049: LD_VAR 0 12
48053: PUSH
48054: FOR_IN
48055: IFFALSE 48128
// if GetBType ( j ) = b_bunker then
48057: LD_VAR 0 9
48061: PPUSH
48062: CALL_OW 266
48066: PUSH
48067: LD_INT 32
48069: EQUAL
48070: IFFALSE 48097
// tmp := Insert ( tmp , 1 , j ) else
48072: LD_ADDR_VAR 0 19
48076: PUSH
48077: LD_VAR 0 19
48081: PPUSH
48082: LD_INT 1
48084: PPUSH
48085: LD_VAR 0 9
48089: PPUSH
48090: CALL_OW 2
48094: ST_TO_ADDR
48095: GO 48126
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48097: LD_ADDR_VAR 0 19
48101: PUSH
48102: LD_VAR 0 19
48106: PPUSH
48107: LD_VAR 0 19
48111: PUSH
48112: LD_INT 1
48114: PLUS
48115: PPUSH
48116: LD_VAR 0 9
48120: PPUSH
48121: CALL_OW 2
48125: ST_TO_ADDR
48126: GO 48054
48128: POP
48129: POP
// if tmp then
48130: LD_VAR 0 19
48134: IFFALSE 48146
// f := tmp ;
48136: LD_ADDR_VAR 0 12
48140: PUSH
48141: LD_VAR 0 19
48145: ST_TO_ADDR
// end ; x := personel [ i ] ;
48146: LD_ADDR_VAR 0 13
48150: PUSH
48151: LD_VAR 0 6
48155: PUSH
48156: LD_VAR 0 8
48160: ARRAY
48161: ST_TO_ADDR
// if x = - 1 then
48162: LD_VAR 0 13
48166: PUSH
48167: LD_INT 1
48169: NEG
48170: EQUAL
48171: IFFALSE 48380
// begin for j in f do
48173: LD_ADDR_VAR 0 9
48177: PUSH
48178: LD_VAR 0 12
48182: PUSH
48183: FOR_IN
48184: IFFALSE 48376
// repeat InitHc ;
48186: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48190: LD_VAR 0 9
48194: PPUSH
48195: CALL_OW 266
48199: PUSH
48200: LD_INT 5
48202: EQUAL
48203: IFFALSE 48273
// begin if UnitsInside ( j ) < 3 then
48205: LD_VAR 0 9
48209: PPUSH
48210: CALL_OW 313
48214: PUSH
48215: LD_INT 3
48217: LESS
48218: IFFALSE 48254
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48220: LD_INT 0
48222: PPUSH
48223: LD_INT 5
48225: PUSH
48226: LD_INT 8
48228: PUSH
48229: LD_INT 9
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: LIST
48236: PUSH
48237: LD_VAR 0 17
48241: ARRAY
48242: PPUSH
48243: LD_VAR 0 4
48247: PPUSH
48248: CALL_OW 380
48252: GO 48271
// PrepareHuman ( false , i , skill ) ;
48254: LD_INT 0
48256: PPUSH
48257: LD_VAR 0 8
48261: PPUSH
48262: LD_VAR 0 4
48266: PPUSH
48267: CALL_OW 380
// end else
48271: GO 48290
// PrepareHuman ( false , i , skill ) ;
48273: LD_INT 0
48275: PPUSH
48276: LD_VAR 0 8
48280: PPUSH
48281: LD_VAR 0 4
48285: PPUSH
48286: CALL_OW 380
// un := CreateHuman ;
48290: LD_ADDR_VAR 0 14
48294: PUSH
48295: CALL_OW 44
48299: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48300: LD_ADDR_VAR 0 7
48304: PUSH
48305: LD_VAR 0 7
48309: PPUSH
48310: LD_INT 1
48312: PPUSH
48313: LD_VAR 0 14
48317: PPUSH
48318: CALL_OW 2
48322: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48323: LD_VAR 0 14
48327: PPUSH
48328: LD_VAR 0 9
48332: PPUSH
48333: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48337: LD_VAR 0 9
48341: PPUSH
48342: CALL_OW 313
48346: PUSH
48347: LD_INT 6
48349: EQUAL
48350: PUSH
48351: LD_VAR 0 9
48355: PPUSH
48356: CALL_OW 266
48360: PUSH
48361: LD_INT 32
48363: PUSH
48364: LD_INT 31
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: IN
48371: OR
48372: IFFALSE 48186
48374: GO 48183
48376: POP
48377: POP
// end else
48378: GO 48760
// for j = 1 to x do
48380: LD_ADDR_VAR 0 9
48384: PUSH
48385: DOUBLE
48386: LD_INT 1
48388: DEC
48389: ST_TO_ADDR
48390: LD_VAR 0 13
48394: PUSH
48395: FOR_TO
48396: IFFALSE 48758
// begin InitHc ;
48398: CALL_OW 19
// if not f then
48402: LD_VAR 0 12
48406: NOT
48407: IFFALSE 48496
// begin PrepareHuman ( false , i , skill ) ;
48409: LD_INT 0
48411: PPUSH
48412: LD_VAR 0 8
48416: PPUSH
48417: LD_VAR 0 4
48421: PPUSH
48422: CALL_OW 380
// un := CreateHuman ;
48426: LD_ADDR_VAR 0 14
48430: PUSH
48431: CALL_OW 44
48435: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48436: LD_ADDR_VAR 0 7
48440: PUSH
48441: LD_VAR 0 7
48445: PPUSH
48446: LD_INT 1
48448: PPUSH
48449: LD_VAR 0 14
48453: PPUSH
48454: CALL_OW 2
48458: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48459: LD_VAR 0 14
48463: PPUSH
48464: LD_VAR 0 1
48468: PPUSH
48469: CALL_OW 250
48473: PPUSH
48474: LD_VAR 0 1
48478: PPUSH
48479: CALL_OW 251
48483: PPUSH
48484: LD_INT 10
48486: PPUSH
48487: LD_INT 0
48489: PPUSH
48490: CALL_OW 50
// continue ;
48494: GO 48395
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48496: LD_VAR 0 12
48500: PUSH
48501: LD_INT 1
48503: ARRAY
48504: PPUSH
48505: CALL_OW 313
48509: PUSH
48510: LD_VAR 0 12
48514: PUSH
48515: LD_INT 1
48517: ARRAY
48518: PPUSH
48519: CALL_OW 266
48523: PUSH
48524: LD_INT 32
48526: PUSH
48527: LD_INT 31
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: IN
48534: AND
48535: PUSH
48536: LD_VAR 0 12
48540: PUSH
48541: LD_INT 1
48543: ARRAY
48544: PPUSH
48545: CALL_OW 313
48549: PUSH
48550: LD_INT 6
48552: EQUAL
48553: OR
48554: IFFALSE 48574
// f := Delete ( f , 1 ) ;
48556: LD_ADDR_VAR 0 12
48560: PUSH
48561: LD_VAR 0 12
48565: PPUSH
48566: LD_INT 1
48568: PPUSH
48569: CALL_OW 3
48573: ST_TO_ADDR
// if not f then
48574: LD_VAR 0 12
48578: NOT
48579: IFFALSE 48597
// begin x := x + 2 ;
48581: LD_ADDR_VAR 0 13
48585: PUSH
48586: LD_VAR 0 13
48590: PUSH
48591: LD_INT 2
48593: PLUS
48594: ST_TO_ADDR
// continue ;
48595: GO 48395
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48597: LD_VAR 0 12
48601: PUSH
48602: LD_INT 1
48604: ARRAY
48605: PPUSH
48606: CALL_OW 266
48610: PUSH
48611: LD_INT 5
48613: EQUAL
48614: IFFALSE 48688
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48616: LD_VAR 0 12
48620: PUSH
48621: LD_INT 1
48623: ARRAY
48624: PPUSH
48625: CALL_OW 313
48629: PUSH
48630: LD_INT 3
48632: LESS
48633: IFFALSE 48669
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48635: LD_INT 0
48637: PPUSH
48638: LD_INT 5
48640: PUSH
48641: LD_INT 8
48643: PUSH
48644: LD_INT 9
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: LIST
48651: PUSH
48652: LD_VAR 0 17
48656: ARRAY
48657: PPUSH
48658: LD_VAR 0 4
48662: PPUSH
48663: CALL_OW 380
48667: GO 48686
// PrepareHuman ( false , i , skill ) ;
48669: LD_INT 0
48671: PPUSH
48672: LD_VAR 0 8
48676: PPUSH
48677: LD_VAR 0 4
48681: PPUSH
48682: CALL_OW 380
// end else
48686: GO 48705
// PrepareHuman ( false , i , skill ) ;
48688: LD_INT 0
48690: PPUSH
48691: LD_VAR 0 8
48695: PPUSH
48696: LD_VAR 0 4
48700: PPUSH
48701: CALL_OW 380
// un := CreateHuman ;
48705: LD_ADDR_VAR 0 14
48709: PUSH
48710: CALL_OW 44
48714: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48715: LD_ADDR_VAR 0 7
48719: PUSH
48720: LD_VAR 0 7
48724: PPUSH
48725: LD_INT 1
48727: PPUSH
48728: LD_VAR 0 14
48732: PPUSH
48733: CALL_OW 2
48737: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48738: LD_VAR 0 14
48742: PPUSH
48743: LD_VAR 0 12
48747: PUSH
48748: LD_INT 1
48750: ARRAY
48751: PPUSH
48752: CALL_OW 52
// end ;
48756: GO 48395
48758: POP
48759: POP
// end ;
48760: GO 47697
48762: POP
48763: POP
// result := result ^ buildings ;
48764: LD_ADDR_VAR 0 7
48768: PUSH
48769: LD_VAR 0 7
48773: PUSH
48774: LD_VAR 0 18
48778: ADD
48779: ST_TO_ADDR
// end else
48780: GO 48923
// begin for i = 1 to personel do
48782: LD_ADDR_VAR 0 8
48786: PUSH
48787: DOUBLE
48788: LD_INT 1
48790: DEC
48791: ST_TO_ADDR
48792: LD_VAR 0 6
48796: PUSH
48797: FOR_TO
48798: IFFALSE 48921
// begin if i > 4 then
48800: LD_VAR 0 8
48804: PUSH
48805: LD_INT 4
48807: GREATER
48808: IFFALSE 48812
// break ;
48810: GO 48921
// x := personel [ i ] ;
48812: LD_ADDR_VAR 0 13
48816: PUSH
48817: LD_VAR 0 6
48821: PUSH
48822: LD_VAR 0 8
48826: ARRAY
48827: ST_TO_ADDR
// if x = - 1 then
48828: LD_VAR 0 13
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: EQUAL
48837: IFFALSE 48841
// continue ;
48839: GO 48797
// PrepareHuman ( false , i , skill ) ;
48841: LD_INT 0
48843: PPUSH
48844: LD_VAR 0 8
48848: PPUSH
48849: LD_VAR 0 4
48853: PPUSH
48854: CALL_OW 380
// un := CreateHuman ;
48858: LD_ADDR_VAR 0 14
48862: PUSH
48863: CALL_OW 44
48867: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48868: LD_VAR 0 14
48872: PPUSH
48873: LD_VAR 0 1
48877: PPUSH
48878: CALL_OW 250
48882: PPUSH
48883: LD_VAR 0 1
48887: PPUSH
48888: CALL_OW 251
48892: PPUSH
48893: LD_INT 10
48895: PPUSH
48896: LD_INT 0
48898: PPUSH
48899: CALL_OW 50
// result := result ^ un ;
48903: LD_ADDR_VAR 0 7
48907: PUSH
48908: LD_VAR 0 7
48912: PUSH
48913: LD_VAR 0 14
48917: ADD
48918: ST_TO_ADDR
// end ;
48919: GO 48797
48921: POP
48922: POP
// end ; end ;
48923: LD_VAR 0 7
48927: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48928: LD_INT 0
48930: PPUSH
48931: PPUSH
48932: PPUSH
48933: PPUSH
48934: PPUSH
48935: PPUSH
48936: PPUSH
48937: PPUSH
48938: PPUSH
48939: PPUSH
48940: PPUSH
48941: PPUSH
48942: PPUSH
48943: PPUSH
48944: PPUSH
48945: PPUSH
// result := false ;
48946: LD_ADDR_VAR 0 3
48950: PUSH
48951: LD_INT 0
48953: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48954: LD_VAR 0 1
48958: NOT
48959: PUSH
48960: LD_VAR 0 1
48964: PPUSH
48965: CALL_OW 266
48969: PUSH
48970: LD_INT 32
48972: PUSH
48973: LD_INT 33
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: IN
48980: NOT
48981: OR
48982: IFFALSE 48986
// exit ;
48984: GO 50095
// nat := GetNation ( tower ) ;
48986: LD_ADDR_VAR 0 12
48990: PUSH
48991: LD_VAR 0 1
48995: PPUSH
48996: CALL_OW 248
49000: ST_TO_ADDR
// side := GetSide ( tower ) ;
49001: LD_ADDR_VAR 0 16
49005: PUSH
49006: LD_VAR 0 1
49010: PPUSH
49011: CALL_OW 255
49015: ST_TO_ADDR
// x := GetX ( tower ) ;
49016: LD_ADDR_VAR 0 10
49020: PUSH
49021: LD_VAR 0 1
49025: PPUSH
49026: CALL_OW 250
49030: ST_TO_ADDR
// y := GetY ( tower ) ;
49031: LD_ADDR_VAR 0 11
49035: PUSH
49036: LD_VAR 0 1
49040: PPUSH
49041: CALL_OW 251
49045: ST_TO_ADDR
// if not x or not y then
49046: LD_VAR 0 10
49050: NOT
49051: PUSH
49052: LD_VAR 0 11
49056: NOT
49057: OR
49058: IFFALSE 49062
// exit ;
49060: GO 50095
// weapon := 0 ;
49062: LD_ADDR_VAR 0 18
49066: PUSH
49067: LD_INT 0
49069: ST_TO_ADDR
// fac_list := [ ] ;
49070: LD_ADDR_VAR 0 17
49074: PUSH
49075: EMPTY
49076: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49077: LD_ADDR_VAR 0 6
49081: PUSH
49082: LD_VAR 0 1
49086: PPUSH
49087: CALL_OW 274
49091: PPUSH
49092: LD_VAR 0 2
49096: PPUSH
49097: LD_INT 0
49099: PPUSH
49100: CALL 46666 0 3
49104: PPUSH
49105: LD_INT 30
49107: PUSH
49108: LD_INT 3
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PPUSH
49115: CALL_OW 72
49119: ST_TO_ADDR
// if not factories then
49120: LD_VAR 0 6
49124: NOT
49125: IFFALSE 49129
// exit ;
49127: GO 50095
// for i in factories do
49129: LD_ADDR_VAR 0 8
49133: PUSH
49134: LD_VAR 0 6
49138: PUSH
49139: FOR_IN
49140: IFFALSE 49165
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49142: LD_ADDR_VAR 0 17
49146: PUSH
49147: LD_VAR 0 17
49151: PUSH
49152: LD_VAR 0 8
49156: PPUSH
49157: CALL_OW 478
49161: UNION
49162: ST_TO_ADDR
49163: GO 49139
49165: POP
49166: POP
// if not fac_list then
49167: LD_VAR 0 17
49171: NOT
49172: IFFALSE 49176
// exit ;
49174: GO 50095
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49176: LD_ADDR_VAR 0 5
49180: PUSH
49181: LD_INT 4
49183: PUSH
49184: LD_INT 5
49186: PUSH
49187: LD_INT 9
49189: PUSH
49190: LD_INT 10
49192: PUSH
49193: LD_INT 6
49195: PUSH
49196: LD_INT 7
49198: PUSH
49199: LD_INT 11
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 27
49213: PUSH
49214: LD_INT 28
49216: PUSH
49217: LD_INT 26
49219: PUSH
49220: LD_INT 30
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 43
49231: PUSH
49232: LD_INT 44
49234: PUSH
49235: LD_INT 46
49237: PUSH
49238: LD_INT 45
49240: PUSH
49241: LD_INT 47
49243: PUSH
49244: LD_INT 49
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: LIST
49259: PUSH
49260: LD_VAR 0 12
49264: ARRAY
49265: ST_TO_ADDR
// list := list isect fac_list ;
49266: LD_ADDR_VAR 0 5
49270: PUSH
49271: LD_VAR 0 5
49275: PUSH
49276: LD_VAR 0 17
49280: ISECT
49281: ST_TO_ADDR
// if not list then
49282: LD_VAR 0 5
49286: NOT
49287: IFFALSE 49291
// exit ;
49289: GO 50095
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49291: LD_VAR 0 12
49295: PUSH
49296: LD_INT 3
49298: EQUAL
49299: PUSH
49300: LD_INT 49
49302: PUSH
49303: LD_VAR 0 5
49307: IN
49308: AND
49309: PUSH
49310: LD_INT 31
49312: PPUSH
49313: LD_VAR 0 16
49317: PPUSH
49318: CALL_OW 321
49322: PUSH
49323: LD_INT 2
49325: EQUAL
49326: AND
49327: IFFALSE 49387
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49329: LD_INT 22
49331: PUSH
49332: LD_VAR 0 16
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 35
49343: PUSH
49344: LD_INT 49
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 91
49353: PUSH
49354: LD_VAR 0 1
49358: PUSH
49359: LD_INT 10
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: LIST
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: LIST
49371: PPUSH
49372: CALL_OW 69
49376: NOT
49377: IFFALSE 49387
// weapon := ru_time_lapser ;
49379: LD_ADDR_VAR 0 18
49383: PUSH
49384: LD_INT 49
49386: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49387: LD_VAR 0 12
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: LD_INT 2
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: IN
49402: PUSH
49403: LD_INT 11
49405: PUSH
49406: LD_VAR 0 5
49410: IN
49411: PUSH
49412: LD_INT 30
49414: PUSH
49415: LD_VAR 0 5
49419: IN
49420: OR
49421: AND
49422: PUSH
49423: LD_INT 6
49425: PPUSH
49426: LD_VAR 0 16
49430: PPUSH
49431: CALL_OW 321
49435: PUSH
49436: LD_INT 2
49438: EQUAL
49439: AND
49440: IFFALSE 49605
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49442: LD_INT 22
49444: PUSH
49445: LD_VAR 0 16
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 2
49456: PUSH
49457: LD_INT 35
49459: PUSH
49460: LD_INT 11
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 35
49469: PUSH
49470: LD_INT 30
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 91
49484: PUSH
49485: LD_VAR 0 1
49489: PUSH
49490: LD_INT 18
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: LIST
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: LIST
49502: PPUSH
49503: CALL_OW 69
49507: NOT
49508: PUSH
49509: LD_INT 22
49511: PUSH
49512: LD_VAR 0 16
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: LD_INT 30
49526: PUSH
49527: LD_INT 32
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 30
49536: PUSH
49537: LD_INT 33
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 91
49551: PUSH
49552: LD_VAR 0 1
49556: PUSH
49557: LD_INT 12
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: LIST
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: LIST
49569: PUSH
49570: EMPTY
49571: LIST
49572: PPUSH
49573: CALL_OW 69
49577: PUSH
49578: LD_INT 2
49580: GREATER
49581: AND
49582: IFFALSE 49605
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49584: LD_ADDR_VAR 0 18
49588: PUSH
49589: LD_INT 11
49591: PUSH
49592: LD_INT 30
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_VAR 0 12
49603: ARRAY
49604: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49605: LD_VAR 0 18
49609: NOT
49610: PUSH
49611: LD_INT 40
49613: PPUSH
49614: LD_VAR 0 16
49618: PPUSH
49619: CALL_OW 321
49623: PUSH
49624: LD_INT 2
49626: EQUAL
49627: AND
49628: PUSH
49629: LD_INT 7
49631: PUSH
49632: LD_VAR 0 5
49636: IN
49637: PUSH
49638: LD_INT 28
49640: PUSH
49641: LD_VAR 0 5
49645: IN
49646: OR
49647: PUSH
49648: LD_INT 45
49650: PUSH
49651: LD_VAR 0 5
49655: IN
49656: OR
49657: AND
49658: IFFALSE 49912
// begin hex := GetHexInfo ( x , y ) ;
49660: LD_ADDR_VAR 0 4
49664: PUSH
49665: LD_VAR 0 10
49669: PPUSH
49670: LD_VAR 0 11
49674: PPUSH
49675: CALL_OW 546
49679: ST_TO_ADDR
// if hex [ 1 ] then
49680: LD_VAR 0 4
49684: PUSH
49685: LD_INT 1
49687: ARRAY
49688: IFFALSE 49692
// exit ;
49690: GO 50095
// height := hex [ 2 ] ;
49692: LD_ADDR_VAR 0 15
49696: PUSH
49697: LD_VAR 0 4
49701: PUSH
49702: LD_INT 2
49704: ARRAY
49705: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49706: LD_ADDR_VAR 0 14
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: LD_INT 2
49716: PUSH
49717: LD_INT 3
49719: PUSH
49720: LD_INT 5
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: ST_TO_ADDR
// for i in tmp do
49729: LD_ADDR_VAR 0 8
49733: PUSH
49734: LD_VAR 0 14
49738: PUSH
49739: FOR_IN
49740: IFFALSE 49910
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49742: LD_ADDR_VAR 0 9
49746: PUSH
49747: LD_VAR 0 10
49751: PPUSH
49752: LD_VAR 0 8
49756: PPUSH
49757: LD_INT 5
49759: PPUSH
49760: CALL_OW 272
49764: PUSH
49765: LD_VAR 0 11
49769: PPUSH
49770: LD_VAR 0 8
49774: PPUSH
49775: LD_INT 5
49777: PPUSH
49778: CALL_OW 273
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49787: LD_VAR 0 9
49791: PUSH
49792: LD_INT 1
49794: ARRAY
49795: PPUSH
49796: LD_VAR 0 9
49800: PUSH
49801: LD_INT 2
49803: ARRAY
49804: PPUSH
49805: CALL_OW 488
49809: IFFALSE 49908
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49811: LD_ADDR_VAR 0 4
49815: PUSH
49816: LD_VAR 0 9
49820: PUSH
49821: LD_INT 1
49823: ARRAY
49824: PPUSH
49825: LD_VAR 0 9
49829: PUSH
49830: LD_INT 2
49832: ARRAY
49833: PPUSH
49834: CALL_OW 546
49838: ST_TO_ADDR
// if hex [ 1 ] then
49839: LD_VAR 0 4
49843: PUSH
49844: LD_INT 1
49846: ARRAY
49847: IFFALSE 49851
// continue ;
49849: GO 49739
// h := hex [ 2 ] ;
49851: LD_ADDR_VAR 0 13
49855: PUSH
49856: LD_VAR 0 4
49860: PUSH
49861: LD_INT 2
49863: ARRAY
49864: ST_TO_ADDR
// if h + 7 < height then
49865: LD_VAR 0 13
49869: PUSH
49870: LD_INT 7
49872: PLUS
49873: PUSH
49874: LD_VAR 0 15
49878: LESS
49879: IFFALSE 49908
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49881: LD_ADDR_VAR 0 18
49885: PUSH
49886: LD_INT 7
49888: PUSH
49889: LD_INT 28
49891: PUSH
49892: LD_INT 45
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: LIST
49899: PUSH
49900: LD_VAR 0 12
49904: ARRAY
49905: ST_TO_ADDR
// break ;
49906: GO 49910
// end ; end ; end ;
49908: GO 49739
49910: POP
49911: POP
// end ; if not weapon then
49912: LD_VAR 0 18
49916: NOT
49917: IFFALSE 49977
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49919: LD_ADDR_VAR 0 5
49923: PUSH
49924: LD_VAR 0 5
49928: PUSH
49929: LD_INT 11
49931: PUSH
49932: LD_INT 30
49934: PUSH
49935: LD_INT 49
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: LIST
49942: DIFF
49943: ST_TO_ADDR
// if not list then
49944: LD_VAR 0 5
49948: NOT
49949: IFFALSE 49953
// exit ;
49951: GO 50095
// weapon := list [ rand ( 1 , list ) ] ;
49953: LD_ADDR_VAR 0 18
49957: PUSH
49958: LD_VAR 0 5
49962: PUSH
49963: LD_INT 1
49965: PPUSH
49966: LD_VAR 0 5
49970: PPUSH
49971: CALL_OW 12
49975: ARRAY
49976: ST_TO_ADDR
// end ; if weapon then
49977: LD_VAR 0 18
49981: IFFALSE 50095
// begin tmp := CostOfWeapon ( weapon ) ;
49983: LD_ADDR_VAR 0 14
49987: PUSH
49988: LD_VAR 0 18
49992: PPUSH
49993: CALL_OW 451
49997: ST_TO_ADDR
// j := GetBase ( tower ) ;
49998: LD_ADDR_VAR 0 9
50002: PUSH
50003: LD_VAR 0 1
50007: PPUSH
50008: CALL_OW 274
50012: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50013: LD_VAR 0 9
50017: PPUSH
50018: LD_INT 1
50020: PPUSH
50021: CALL_OW 275
50025: PUSH
50026: LD_VAR 0 14
50030: PUSH
50031: LD_INT 1
50033: ARRAY
50034: GREATEREQUAL
50035: PUSH
50036: LD_VAR 0 9
50040: PPUSH
50041: LD_INT 2
50043: PPUSH
50044: CALL_OW 275
50048: PUSH
50049: LD_VAR 0 14
50053: PUSH
50054: LD_INT 2
50056: ARRAY
50057: GREATEREQUAL
50058: AND
50059: PUSH
50060: LD_VAR 0 9
50064: PPUSH
50065: LD_INT 3
50067: PPUSH
50068: CALL_OW 275
50072: PUSH
50073: LD_VAR 0 14
50077: PUSH
50078: LD_INT 3
50080: ARRAY
50081: GREATEREQUAL
50082: AND
50083: IFFALSE 50095
// result := weapon ;
50085: LD_ADDR_VAR 0 3
50089: PUSH
50090: LD_VAR 0 18
50094: ST_TO_ADDR
// end ; end ;
50095: LD_VAR 0 3
50099: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50100: LD_INT 0
50102: PPUSH
50103: PPUSH
// result := true ;
50104: LD_ADDR_VAR 0 3
50108: PUSH
50109: LD_INT 1
50111: ST_TO_ADDR
// if array1 = array2 then
50112: LD_VAR 0 1
50116: PUSH
50117: LD_VAR 0 2
50121: EQUAL
50122: IFFALSE 50182
// begin for i = 1 to array1 do
50124: LD_ADDR_VAR 0 4
50128: PUSH
50129: DOUBLE
50130: LD_INT 1
50132: DEC
50133: ST_TO_ADDR
50134: LD_VAR 0 1
50138: PUSH
50139: FOR_TO
50140: IFFALSE 50178
// if array1 [ i ] <> array2 [ i ] then
50142: LD_VAR 0 1
50146: PUSH
50147: LD_VAR 0 4
50151: ARRAY
50152: PUSH
50153: LD_VAR 0 2
50157: PUSH
50158: LD_VAR 0 4
50162: ARRAY
50163: NONEQUAL
50164: IFFALSE 50176
// begin result := false ;
50166: LD_ADDR_VAR 0 3
50170: PUSH
50171: LD_INT 0
50173: ST_TO_ADDR
// break ;
50174: GO 50178
// end ;
50176: GO 50139
50178: POP
50179: POP
// end else
50180: GO 50190
// result := false ;
50182: LD_ADDR_VAR 0 3
50186: PUSH
50187: LD_INT 0
50189: ST_TO_ADDR
// end ;
50190: LD_VAR 0 3
50194: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50195: LD_INT 0
50197: PPUSH
50198: PPUSH
// if not array1 or not array2 then
50199: LD_VAR 0 1
50203: NOT
50204: PUSH
50205: LD_VAR 0 2
50209: NOT
50210: OR
50211: IFFALSE 50215
// exit ;
50213: GO 50279
// result := true ;
50215: LD_ADDR_VAR 0 3
50219: PUSH
50220: LD_INT 1
50222: ST_TO_ADDR
// for i = 1 to array1 do
50223: LD_ADDR_VAR 0 4
50227: PUSH
50228: DOUBLE
50229: LD_INT 1
50231: DEC
50232: ST_TO_ADDR
50233: LD_VAR 0 1
50237: PUSH
50238: FOR_TO
50239: IFFALSE 50277
// if array1 [ i ] <> array2 [ i ] then
50241: LD_VAR 0 1
50245: PUSH
50246: LD_VAR 0 4
50250: ARRAY
50251: PUSH
50252: LD_VAR 0 2
50256: PUSH
50257: LD_VAR 0 4
50261: ARRAY
50262: NONEQUAL
50263: IFFALSE 50275
// begin result := false ;
50265: LD_ADDR_VAR 0 3
50269: PUSH
50270: LD_INT 0
50272: ST_TO_ADDR
// break ;
50273: GO 50277
// end ;
50275: GO 50238
50277: POP
50278: POP
// end ;
50279: LD_VAR 0 3
50283: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50284: LD_INT 0
50286: PPUSH
50287: PPUSH
50288: PPUSH
// pom := GetBase ( fac ) ;
50289: LD_ADDR_VAR 0 5
50293: PUSH
50294: LD_VAR 0 1
50298: PPUSH
50299: CALL_OW 274
50303: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50304: LD_ADDR_VAR 0 4
50308: PUSH
50309: LD_VAR 0 2
50313: PUSH
50314: LD_INT 1
50316: ARRAY
50317: PPUSH
50318: LD_VAR 0 2
50322: PUSH
50323: LD_INT 2
50325: ARRAY
50326: PPUSH
50327: LD_VAR 0 2
50331: PUSH
50332: LD_INT 3
50334: ARRAY
50335: PPUSH
50336: LD_VAR 0 2
50340: PUSH
50341: LD_INT 4
50343: ARRAY
50344: PPUSH
50345: CALL_OW 449
50349: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50350: LD_ADDR_VAR 0 3
50354: PUSH
50355: LD_VAR 0 5
50359: PPUSH
50360: LD_INT 1
50362: PPUSH
50363: CALL_OW 275
50367: PUSH
50368: LD_VAR 0 4
50372: PUSH
50373: LD_INT 1
50375: ARRAY
50376: GREATEREQUAL
50377: PUSH
50378: LD_VAR 0 5
50382: PPUSH
50383: LD_INT 2
50385: PPUSH
50386: CALL_OW 275
50390: PUSH
50391: LD_VAR 0 4
50395: PUSH
50396: LD_INT 2
50398: ARRAY
50399: GREATEREQUAL
50400: AND
50401: PUSH
50402: LD_VAR 0 5
50406: PPUSH
50407: LD_INT 3
50409: PPUSH
50410: CALL_OW 275
50414: PUSH
50415: LD_VAR 0 4
50419: PUSH
50420: LD_INT 3
50422: ARRAY
50423: GREATEREQUAL
50424: AND
50425: ST_TO_ADDR
// end ;
50426: LD_VAR 0 3
50430: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50431: LD_INT 0
50433: PPUSH
50434: PPUSH
50435: PPUSH
50436: PPUSH
// pom := GetBase ( building ) ;
50437: LD_ADDR_VAR 0 3
50441: PUSH
50442: LD_VAR 0 1
50446: PPUSH
50447: CALL_OW 274
50451: ST_TO_ADDR
// if not pom then
50452: LD_VAR 0 3
50456: NOT
50457: IFFALSE 50461
// exit ;
50459: GO 50631
// btype := GetBType ( building ) ;
50461: LD_ADDR_VAR 0 5
50465: PUSH
50466: LD_VAR 0 1
50470: PPUSH
50471: CALL_OW 266
50475: ST_TO_ADDR
// if btype = b_armoury then
50476: LD_VAR 0 5
50480: PUSH
50481: LD_INT 4
50483: EQUAL
50484: IFFALSE 50494
// btype := b_barracks ;
50486: LD_ADDR_VAR 0 5
50490: PUSH
50491: LD_INT 5
50493: ST_TO_ADDR
// if btype = b_depot then
50494: LD_VAR 0 5
50498: PUSH
50499: LD_INT 0
50501: EQUAL
50502: IFFALSE 50512
// btype := b_warehouse ;
50504: LD_ADDR_VAR 0 5
50508: PUSH
50509: LD_INT 1
50511: ST_TO_ADDR
// if btype = b_workshop then
50512: LD_VAR 0 5
50516: PUSH
50517: LD_INT 2
50519: EQUAL
50520: IFFALSE 50530
// btype := b_factory ;
50522: LD_ADDR_VAR 0 5
50526: PUSH
50527: LD_INT 3
50529: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50530: LD_ADDR_VAR 0 4
50534: PUSH
50535: LD_VAR 0 5
50539: PPUSH
50540: LD_VAR 0 1
50544: PPUSH
50545: CALL_OW 248
50549: PPUSH
50550: CALL_OW 450
50554: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50555: LD_ADDR_VAR 0 2
50559: PUSH
50560: LD_VAR 0 3
50564: PPUSH
50565: LD_INT 1
50567: PPUSH
50568: CALL_OW 275
50572: PUSH
50573: LD_VAR 0 4
50577: PUSH
50578: LD_INT 1
50580: ARRAY
50581: GREATEREQUAL
50582: PUSH
50583: LD_VAR 0 3
50587: PPUSH
50588: LD_INT 2
50590: PPUSH
50591: CALL_OW 275
50595: PUSH
50596: LD_VAR 0 4
50600: PUSH
50601: LD_INT 2
50603: ARRAY
50604: GREATEREQUAL
50605: AND
50606: PUSH
50607: LD_VAR 0 3
50611: PPUSH
50612: LD_INT 3
50614: PPUSH
50615: CALL_OW 275
50619: PUSH
50620: LD_VAR 0 4
50624: PUSH
50625: LD_INT 3
50627: ARRAY
50628: GREATEREQUAL
50629: AND
50630: ST_TO_ADDR
// end ;
50631: LD_VAR 0 2
50635: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50636: LD_INT 0
50638: PPUSH
50639: PPUSH
50640: PPUSH
// pom := GetBase ( building ) ;
50641: LD_ADDR_VAR 0 4
50645: PUSH
50646: LD_VAR 0 1
50650: PPUSH
50651: CALL_OW 274
50655: ST_TO_ADDR
// if not pom then
50656: LD_VAR 0 4
50660: NOT
50661: IFFALSE 50665
// exit ;
50663: GO 50766
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50665: LD_ADDR_VAR 0 5
50669: PUSH
50670: LD_VAR 0 2
50674: PPUSH
50675: LD_VAR 0 1
50679: PPUSH
50680: CALL_OW 248
50684: PPUSH
50685: CALL_OW 450
50689: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50690: LD_ADDR_VAR 0 3
50694: PUSH
50695: LD_VAR 0 4
50699: PPUSH
50700: LD_INT 1
50702: PPUSH
50703: CALL_OW 275
50707: PUSH
50708: LD_VAR 0 5
50712: PUSH
50713: LD_INT 1
50715: ARRAY
50716: GREATEREQUAL
50717: PUSH
50718: LD_VAR 0 4
50722: PPUSH
50723: LD_INT 2
50725: PPUSH
50726: CALL_OW 275
50730: PUSH
50731: LD_VAR 0 5
50735: PUSH
50736: LD_INT 2
50738: ARRAY
50739: GREATEREQUAL
50740: AND
50741: PUSH
50742: LD_VAR 0 4
50746: PPUSH
50747: LD_INT 3
50749: PPUSH
50750: CALL_OW 275
50754: PUSH
50755: LD_VAR 0 5
50759: PUSH
50760: LD_INT 3
50762: ARRAY
50763: GREATEREQUAL
50764: AND
50765: ST_TO_ADDR
// end ;
50766: LD_VAR 0 3
50770: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50771: LD_INT 0
50773: PPUSH
50774: PPUSH
50775: PPUSH
50776: PPUSH
50777: PPUSH
50778: PPUSH
50779: PPUSH
50780: PPUSH
50781: PPUSH
50782: PPUSH
50783: PPUSH
// result := false ;
50784: LD_ADDR_VAR 0 8
50788: PUSH
50789: LD_INT 0
50791: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50792: LD_VAR 0 5
50796: NOT
50797: PUSH
50798: LD_VAR 0 1
50802: NOT
50803: OR
50804: PUSH
50805: LD_VAR 0 2
50809: NOT
50810: OR
50811: PUSH
50812: LD_VAR 0 3
50816: NOT
50817: OR
50818: IFFALSE 50822
// exit ;
50820: GO 51636
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50822: LD_ADDR_VAR 0 14
50826: PUSH
50827: LD_VAR 0 1
50831: PPUSH
50832: LD_VAR 0 2
50836: PPUSH
50837: LD_VAR 0 3
50841: PPUSH
50842: LD_VAR 0 4
50846: PPUSH
50847: LD_VAR 0 5
50851: PUSH
50852: LD_INT 1
50854: ARRAY
50855: PPUSH
50856: CALL_OW 248
50860: PPUSH
50861: LD_INT 0
50863: PPUSH
50864: CALL 52873 0 6
50868: ST_TO_ADDR
// if not hexes then
50869: LD_VAR 0 14
50873: NOT
50874: IFFALSE 50878
// exit ;
50876: GO 51636
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50878: LD_ADDR_VAR 0 17
50882: PUSH
50883: LD_VAR 0 5
50887: PPUSH
50888: LD_INT 22
50890: PUSH
50891: LD_VAR 0 13
50895: PPUSH
50896: CALL_OW 255
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 2
50907: PUSH
50908: LD_INT 30
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 30
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: LIST
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PPUSH
50937: CALL_OW 72
50941: ST_TO_ADDR
// for i = 1 to hexes do
50942: LD_ADDR_VAR 0 9
50946: PUSH
50947: DOUBLE
50948: LD_INT 1
50950: DEC
50951: ST_TO_ADDR
50952: LD_VAR 0 14
50956: PUSH
50957: FOR_TO
50958: IFFALSE 51634
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50960: LD_ADDR_VAR 0 13
50964: PUSH
50965: LD_VAR 0 14
50969: PUSH
50970: LD_VAR 0 9
50974: ARRAY
50975: PUSH
50976: LD_INT 1
50978: ARRAY
50979: PPUSH
50980: LD_VAR 0 14
50984: PUSH
50985: LD_VAR 0 9
50989: ARRAY
50990: PUSH
50991: LD_INT 2
50993: ARRAY
50994: PPUSH
50995: CALL_OW 428
50999: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51000: LD_VAR 0 14
51004: PUSH
51005: LD_VAR 0 9
51009: ARRAY
51010: PUSH
51011: LD_INT 1
51013: ARRAY
51014: PPUSH
51015: LD_VAR 0 14
51019: PUSH
51020: LD_VAR 0 9
51024: ARRAY
51025: PUSH
51026: LD_INT 2
51028: ARRAY
51029: PPUSH
51030: CALL_OW 351
51034: PUSH
51035: LD_VAR 0 14
51039: PUSH
51040: LD_VAR 0 9
51044: ARRAY
51045: PUSH
51046: LD_INT 1
51048: ARRAY
51049: PPUSH
51050: LD_VAR 0 14
51054: PUSH
51055: LD_VAR 0 9
51059: ARRAY
51060: PUSH
51061: LD_INT 2
51063: ARRAY
51064: PPUSH
51065: CALL_OW 488
51069: NOT
51070: OR
51071: PUSH
51072: LD_VAR 0 13
51076: PPUSH
51077: CALL_OW 247
51081: PUSH
51082: LD_INT 3
51084: EQUAL
51085: OR
51086: IFFALSE 51092
// exit ;
51088: POP
51089: POP
51090: GO 51636
// if not tmp then
51092: LD_VAR 0 13
51096: NOT
51097: IFFALSE 51101
// continue ;
51099: GO 50957
// result := true ;
51101: LD_ADDR_VAR 0 8
51105: PUSH
51106: LD_INT 1
51108: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51109: LD_VAR 0 6
51113: PUSH
51114: LD_VAR 0 13
51118: PPUSH
51119: CALL_OW 247
51123: PUSH
51124: LD_INT 2
51126: EQUAL
51127: AND
51128: PUSH
51129: LD_VAR 0 13
51133: PPUSH
51134: CALL_OW 263
51138: PUSH
51139: LD_INT 1
51141: EQUAL
51142: AND
51143: IFFALSE 51307
// begin if IsDrivenBy ( tmp ) then
51145: LD_VAR 0 13
51149: PPUSH
51150: CALL_OW 311
51154: IFFALSE 51158
// continue ;
51156: GO 50957
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51158: LD_VAR 0 6
51162: PPUSH
51163: LD_INT 3
51165: PUSH
51166: LD_INT 60
51168: PUSH
51169: EMPTY
51170: LIST
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 3
51178: PUSH
51179: LD_INT 55
51181: PUSH
51182: EMPTY
51183: LIST
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PPUSH
51193: CALL_OW 72
51197: IFFALSE 51305
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51199: LD_ADDR_VAR 0 18
51203: PUSH
51204: LD_VAR 0 6
51208: PPUSH
51209: LD_INT 3
51211: PUSH
51212: LD_INT 60
51214: PUSH
51215: EMPTY
51216: LIST
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 3
51224: PUSH
51225: LD_INT 55
51227: PUSH
51228: EMPTY
51229: LIST
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PPUSH
51239: CALL_OW 72
51243: PUSH
51244: LD_INT 1
51246: ARRAY
51247: ST_TO_ADDR
// if IsInUnit ( driver ) then
51248: LD_VAR 0 18
51252: PPUSH
51253: CALL_OW 310
51257: IFFALSE 51268
// ComExit ( driver ) ;
51259: LD_VAR 0 18
51263: PPUSH
51264: CALL 76578 0 1
// AddComEnterUnit ( driver , tmp ) ;
51268: LD_VAR 0 18
51272: PPUSH
51273: LD_VAR 0 13
51277: PPUSH
51278: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51282: LD_VAR 0 18
51286: PPUSH
51287: LD_VAR 0 7
51291: PPUSH
51292: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51296: LD_VAR 0 18
51300: PPUSH
51301: CALL_OW 181
// end ; continue ;
51305: GO 50957
// end ; if not cleaners or not tmp in cleaners then
51307: LD_VAR 0 6
51311: NOT
51312: PUSH
51313: LD_VAR 0 13
51317: PUSH
51318: LD_VAR 0 6
51322: IN
51323: NOT
51324: OR
51325: IFFALSE 51632
// begin if dep then
51327: LD_VAR 0 17
51331: IFFALSE 51467
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51333: LD_ADDR_VAR 0 16
51337: PUSH
51338: LD_VAR 0 17
51342: PUSH
51343: LD_INT 1
51345: ARRAY
51346: PPUSH
51347: CALL_OW 250
51351: PPUSH
51352: LD_VAR 0 17
51356: PUSH
51357: LD_INT 1
51359: ARRAY
51360: PPUSH
51361: CALL_OW 254
51365: PPUSH
51366: LD_INT 5
51368: PPUSH
51369: CALL_OW 272
51373: PUSH
51374: LD_VAR 0 17
51378: PUSH
51379: LD_INT 1
51381: ARRAY
51382: PPUSH
51383: CALL_OW 251
51387: PPUSH
51388: LD_VAR 0 17
51392: PUSH
51393: LD_INT 1
51395: ARRAY
51396: PPUSH
51397: CALL_OW 254
51401: PPUSH
51402: LD_INT 5
51404: PPUSH
51405: CALL_OW 273
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51414: LD_VAR 0 16
51418: PUSH
51419: LD_INT 1
51421: ARRAY
51422: PPUSH
51423: LD_VAR 0 16
51427: PUSH
51428: LD_INT 2
51430: ARRAY
51431: PPUSH
51432: CALL_OW 488
51436: IFFALSE 51467
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51438: LD_VAR 0 13
51442: PPUSH
51443: LD_VAR 0 16
51447: PUSH
51448: LD_INT 1
51450: ARRAY
51451: PPUSH
51452: LD_VAR 0 16
51456: PUSH
51457: LD_INT 2
51459: ARRAY
51460: PPUSH
51461: CALL_OW 111
// continue ;
51465: GO 50957
// end ; end ; r := GetDir ( tmp ) ;
51467: LD_ADDR_VAR 0 15
51471: PUSH
51472: LD_VAR 0 13
51476: PPUSH
51477: CALL_OW 254
51481: ST_TO_ADDR
// if r = 5 then
51482: LD_VAR 0 15
51486: PUSH
51487: LD_INT 5
51489: EQUAL
51490: IFFALSE 51500
// r := 0 ;
51492: LD_ADDR_VAR 0 15
51496: PUSH
51497: LD_INT 0
51499: ST_TO_ADDR
// for j = r to 5 do
51500: LD_ADDR_VAR 0 10
51504: PUSH
51505: DOUBLE
51506: LD_VAR 0 15
51510: DEC
51511: ST_TO_ADDR
51512: LD_INT 5
51514: PUSH
51515: FOR_TO
51516: IFFALSE 51630
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51518: LD_ADDR_VAR 0 11
51522: PUSH
51523: LD_VAR 0 13
51527: PPUSH
51528: CALL_OW 250
51532: PPUSH
51533: LD_VAR 0 10
51537: PPUSH
51538: LD_INT 2
51540: PPUSH
51541: CALL_OW 272
51545: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51546: LD_ADDR_VAR 0 12
51550: PUSH
51551: LD_VAR 0 13
51555: PPUSH
51556: CALL_OW 251
51560: PPUSH
51561: LD_VAR 0 10
51565: PPUSH
51566: LD_INT 2
51568: PPUSH
51569: CALL_OW 273
51573: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51574: LD_VAR 0 11
51578: PPUSH
51579: LD_VAR 0 12
51583: PPUSH
51584: CALL_OW 488
51588: PUSH
51589: LD_VAR 0 11
51593: PPUSH
51594: LD_VAR 0 12
51598: PPUSH
51599: CALL_OW 428
51603: NOT
51604: AND
51605: IFFALSE 51628
// begin ComMoveXY ( tmp , _x , _y ) ;
51607: LD_VAR 0 13
51611: PPUSH
51612: LD_VAR 0 11
51616: PPUSH
51617: LD_VAR 0 12
51621: PPUSH
51622: CALL_OW 111
// break ;
51626: GO 51630
// end ; end ;
51628: GO 51515
51630: POP
51631: POP
// end ; end ;
51632: GO 50957
51634: POP
51635: POP
// end ;
51636: LD_VAR 0 8
51640: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51641: LD_INT 0
51643: PPUSH
// result := true ;
51644: LD_ADDR_VAR 0 3
51648: PUSH
51649: LD_INT 1
51651: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51652: LD_VAR 0 2
51656: PUSH
51657: LD_INT 24
51659: DOUBLE
51660: EQUAL
51661: IFTRUE 51671
51663: LD_INT 33
51665: DOUBLE
51666: EQUAL
51667: IFTRUE 51671
51669: GO 51696
51671: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51672: LD_ADDR_VAR 0 3
51676: PUSH
51677: LD_INT 32
51679: PPUSH
51680: LD_VAR 0 1
51684: PPUSH
51685: CALL_OW 321
51689: PUSH
51690: LD_INT 2
51692: EQUAL
51693: ST_TO_ADDR
51694: GO 52016
51696: LD_INT 20
51698: DOUBLE
51699: EQUAL
51700: IFTRUE 51704
51702: GO 51729
51704: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51705: LD_ADDR_VAR 0 3
51709: PUSH
51710: LD_INT 6
51712: PPUSH
51713: LD_VAR 0 1
51717: PPUSH
51718: CALL_OW 321
51722: PUSH
51723: LD_INT 2
51725: EQUAL
51726: ST_TO_ADDR
51727: GO 52016
51729: LD_INT 22
51731: DOUBLE
51732: EQUAL
51733: IFTRUE 51743
51735: LD_INT 36
51737: DOUBLE
51738: EQUAL
51739: IFTRUE 51743
51741: GO 51768
51743: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51744: LD_ADDR_VAR 0 3
51748: PUSH
51749: LD_INT 15
51751: PPUSH
51752: LD_VAR 0 1
51756: PPUSH
51757: CALL_OW 321
51761: PUSH
51762: LD_INT 2
51764: EQUAL
51765: ST_TO_ADDR
51766: GO 52016
51768: LD_INT 30
51770: DOUBLE
51771: EQUAL
51772: IFTRUE 51776
51774: GO 51801
51776: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51777: LD_ADDR_VAR 0 3
51781: PUSH
51782: LD_INT 20
51784: PPUSH
51785: LD_VAR 0 1
51789: PPUSH
51790: CALL_OW 321
51794: PUSH
51795: LD_INT 2
51797: EQUAL
51798: ST_TO_ADDR
51799: GO 52016
51801: LD_INT 28
51803: DOUBLE
51804: EQUAL
51805: IFTRUE 51815
51807: LD_INT 21
51809: DOUBLE
51810: EQUAL
51811: IFTRUE 51815
51813: GO 51840
51815: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51816: LD_ADDR_VAR 0 3
51820: PUSH
51821: LD_INT 21
51823: PPUSH
51824: LD_VAR 0 1
51828: PPUSH
51829: CALL_OW 321
51833: PUSH
51834: LD_INT 2
51836: EQUAL
51837: ST_TO_ADDR
51838: GO 52016
51840: LD_INT 16
51842: DOUBLE
51843: EQUAL
51844: IFTRUE 51848
51846: GO 51875
51848: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51849: LD_ADDR_VAR 0 3
51853: PUSH
51854: LD_EXP 75
51858: PPUSH
51859: LD_VAR 0 1
51863: PPUSH
51864: CALL_OW 321
51868: PUSH
51869: LD_INT 2
51871: EQUAL
51872: ST_TO_ADDR
51873: GO 52016
51875: LD_INT 19
51877: DOUBLE
51878: EQUAL
51879: IFTRUE 51889
51881: LD_INT 23
51883: DOUBLE
51884: EQUAL
51885: IFTRUE 51889
51887: GO 51916
51889: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51890: LD_ADDR_VAR 0 3
51894: PUSH
51895: LD_EXP 74
51899: PPUSH
51900: LD_VAR 0 1
51904: PPUSH
51905: CALL_OW 321
51909: PUSH
51910: LD_INT 2
51912: EQUAL
51913: ST_TO_ADDR
51914: GO 52016
51916: LD_INT 17
51918: DOUBLE
51919: EQUAL
51920: IFTRUE 51924
51922: GO 51949
51924: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51925: LD_ADDR_VAR 0 3
51929: PUSH
51930: LD_INT 39
51932: PPUSH
51933: LD_VAR 0 1
51937: PPUSH
51938: CALL_OW 321
51942: PUSH
51943: LD_INT 2
51945: EQUAL
51946: ST_TO_ADDR
51947: GO 52016
51949: LD_INT 18
51951: DOUBLE
51952: EQUAL
51953: IFTRUE 51957
51955: GO 51982
51957: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51958: LD_ADDR_VAR 0 3
51962: PUSH
51963: LD_INT 40
51965: PPUSH
51966: LD_VAR 0 1
51970: PPUSH
51971: CALL_OW 321
51975: PUSH
51976: LD_INT 2
51978: EQUAL
51979: ST_TO_ADDR
51980: GO 52016
51982: LD_INT 27
51984: DOUBLE
51985: EQUAL
51986: IFTRUE 51990
51988: GO 52015
51990: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51991: LD_ADDR_VAR 0 3
51995: PUSH
51996: LD_INT 35
51998: PPUSH
51999: LD_VAR 0 1
52003: PPUSH
52004: CALL_OW 321
52008: PUSH
52009: LD_INT 2
52011: EQUAL
52012: ST_TO_ADDR
52013: GO 52016
52015: POP
// end ;
52016: LD_VAR 0 3
52020: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52021: LD_INT 0
52023: PPUSH
52024: PPUSH
52025: PPUSH
52026: PPUSH
52027: PPUSH
52028: PPUSH
52029: PPUSH
52030: PPUSH
52031: PPUSH
52032: PPUSH
52033: PPUSH
// result := false ;
52034: LD_ADDR_VAR 0 6
52038: PUSH
52039: LD_INT 0
52041: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52042: LD_VAR 0 1
52046: NOT
52047: PUSH
52048: LD_VAR 0 1
52052: PPUSH
52053: CALL_OW 266
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: LD_INT 1
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: IN
52068: NOT
52069: OR
52070: PUSH
52071: LD_VAR 0 2
52075: NOT
52076: OR
52077: PUSH
52078: LD_VAR 0 5
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: LD_INT 2
52091: PUSH
52092: LD_INT 3
52094: PUSH
52095: LD_INT 4
52097: PUSH
52098: LD_INT 5
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: IN
52109: NOT
52110: OR
52111: PUSH
52112: LD_VAR 0 3
52116: PPUSH
52117: LD_VAR 0 4
52121: PPUSH
52122: CALL_OW 488
52126: NOT
52127: OR
52128: IFFALSE 52132
// exit ;
52130: GO 52868
// side := GetSide ( depot ) ;
52132: LD_ADDR_VAR 0 9
52136: PUSH
52137: LD_VAR 0 1
52141: PPUSH
52142: CALL_OW 255
52146: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52147: LD_VAR 0 9
52151: PPUSH
52152: LD_VAR 0 2
52156: PPUSH
52157: CALL 51641 0 2
52161: NOT
52162: IFFALSE 52166
// exit ;
52164: GO 52868
// pom := GetBase ( depot ) ;
52166: LD_ADDR_VAR 0 10
52170: PUSH
52171: LD_VAR 0 1
52175: PPUSH
52176: CALL_OW 274
52180: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52181: LD_ADDR_VAR 0 11
52185: PUSH
52186: LD_VAR 0 2
52190: PPUSH
52191: LD_VAR 0 1
52195: PPUSH
52196: CALL_OW 248
52200: PPUSH
52201: CALL_OW 450
52205: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52206: LD_VAR 0 10
52210: PPUSH
52211: LD_INT 1
52213: PPUSH
52214: CALL_OW 275
52218: PUSH
52219: LD_VAR 0 11
52223: PUSH
52224: LD_INT 1
52226: ARRAY
52227: GREATEREQUAL
52228: PUSH
52229: LD_VAR 0 10
52233: PPUSH
52234: LD_INT 2
52236: PPUSH
52237: CALL_OW 275
52241: PUSH
52242: LD_VAR 0 11
52246: PUSH
52247: LD_INT 2
52249: ARRAY
52250: GREATEREQUAL
52251: AND
52252: PUSH
52253: LD_VAR 0 10
52257: PPUSH
52258: LD_INT 3
52260: PPUSH
52261: CALL_OW 275
52265: PUSH
52266: LD_VAR 0 11
52270: PUSH
52271: LD_INT 3
52273: ARRAY
52274: GREATEREQUAL
52275: AND
52276: NOT
52277: IFFALSE 52281
// exit ;
52279: GO 52868
// if GetBType ( depot ) = b_depot then
52281: LD_VAR 0 1
52285: PPUSH
52286: CALL_OW 266
52290: PUSH
52291: LD_INT 0
52293: EQUAL
52294: IFFALSE 52306
// dist := 28 else
52296: LD_ADDR_VAR 0 14
52300: PUSH
52301: LD_INT 28
52303: ST_TO_ADDR
52304: GO 52314
// dist := 36 ;
52306: LD_ADDR_VAR 0 14
52310: PUSH
52311: LD_INT 36
52313: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52314: LD_VAR 0 1
52318: PPUSH
52319: LD_VAR 0 3
52323: PPUSH
52324: LD_VAR 0 4
52328: PPUSH
52329: CALL_OW 297
52333: PUSH
52334: LD_VAR 0 14
52338: GREATER
52339: IFFALSE 52343
// exit ;
52341: GO 52868
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52343: LD_ADDR_VAR 0 12
52347: PUSH
52348: LD_VAR 0 2
52352: PPUSH
52353: LD_VAR 0 3
52357: PPUSH
52358: LD_VAR 0 4
52362: PPUSH
52363: LD_VAR 0 5
52367: PPUSH
52368: LD_VAR 0 1
52372: PPUSH
52373: CALL_OW 248
52377: PPUSH
52378: LD_INT 0
52380: PPUSH
52381: CALL 52873 0 6
52385: ST_TO_ADDR
// if not hexes then
52386: LD_VAR 0 12
52390: NOT
52391: IFFALSE 52395
// exit ;
52393: GO 52868
// hex := GetHexInfo ( x , y ) ;
52395: LD_ADDR_VAR 0 15
52399: PUSH
52400: LD_VAR 0 3
52404: PPUSH
52405: LD_VAR 0 4
52409: PPUSH
52410: CALL_OW 546
52414: ST_TO_ADDR
// if hex [ 1 ] then
52415: LD_VAR 0 15
52419: PUSH
52420: LD_INT 1
52422: ARRAY
52423: IFFALSE 52427
// exit ;
52425: GO 52868
// height := hex [ 2 ] ;
52427: LD_ADDR_VAR 0 13
52431: PUSH
52432: LD_VAR 0 15
52436: PUSH
52437: LD_INT 2
52439: ARRAY
52440: ST_TO_ADDR
// for i = 1 to hexes do
52441: LD_ADDR_VAR 0 7
52445: PUSH
52446: DOUBLE
52447: LD_INT 1
52449: DEC
52450: ST_TO_ADDR
52451: LD_VAR 0 12
52455: PUSH
52456: FOR_TO
52457: IFFALSE 52787
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52459: LD_VAR 0 12
52463: PUSH
52464: LD_VAR 0 7
52468: ARRAY
52469: PUSH
52470: LD_INT 1
52472: ARRAY
52473: PPUSH
52474: LD_VAR 0 12
52478: PUSH
52479: LD_VAR 0 7
52483: ARRAY
52484: PUSH
52485: LD_INT 2
52487: ARRAY
52488: PPUSH
52489: CALL_OW 488
52493: NOT
52494: PUSH
52495: LD_VAR 0 12
52499: PUSH
52500: LD_VAR 0 7
52504: ARRAY
52505: PUSH
52506: LD_INT 1
52508: ARRAY
52509: PPUSH
52510: LD_VAR 0 12
52514: PUSH
52515: LD_VAR 0 7
52519: ARRAY
52520: PUSH
52521: LD_INT 2
52523: ARRAY
52524: PPUSH
52525: CALL_OW 428
52529: PUSH
52530: LD_INT 0
52532: GREATER
52533: OR
52534: PUSH
52535: LD_VAR 0 12
52539: PUSH
52540: LD_VAR 0 7
52544: ARRAY
52545: PUSH
52546: LD_INT 1
52548: ARRAY
52549: PPUSH
52550: LD_VAR 0 12
52554: PUSH
52555: LD_VAR 0 7
52559: ARRAY
52560: PUSH
52561: LD_INT 2
52563: ARRAY
52564: PPUSH
52565: CALL_OW 351
52569: OR
52570: IFFALSE 52576
// exit ;
52572: POP
52573: POP
52574: GO 52868
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52576: LD_ADDR_VAR 0 8
52580: PUSH
52581: LD_VAR 0 12
52585: PUSH
52586: LD_VAR 0 7
52590: ARRAY
52591: PUSH
52592: LD_INT 1
52594: ARRAY
52595: PPUSH
52596: LD_VAR 0 12
52600: PUSH
52601: LD_VAR 0 7
52605: ARRAY
52606: PUSH
52607: LD_INT 2
52609: ARRAY
52610: PPUSH
52611: CALL_OW 546
52615: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52616: LD_VAR 0 8
52620: PUSH
52621: LD_INT 1
52623: ARRAY
52624: PUSH
52625: LD_VAR 0 8
52629: PUSH
52630: LD_INT 2
52632: ARRAY
52633: PUSH
52634: LD_VAR 0 13
52638: PUSH
52639: LD_INT 2
52641: PLUS
52642: GREATER
52643: OR
52644: PUSH
52645: LD_VAR 0 8
52649: PUSH
52650: LD_INT 2
52652: ARRAY
52653: PUSH
52654: LD_VAR 0 13
52658: PUSH
52659: LD_INT 2
52661: MINUS
52662: LESS
52663: OR
52664: PUSH
52665: LD_VAR 0 8
52669: PUSH
52670: LD_INT 3
52672: ARRAY
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: LD_INT 8
52679: PUSH
52680: LD_INT 9
52682: PUSH
52683: LD_INT 10
52685: PUSH
52686: LD_INT 11
52688: PUSH
52689: LD_INT 12
52691: PUSH
52692: LD_INT 13
52694: PUSH
52695: LD_INT 16
52697: PUSH
52698: LD_INT 17
52700: PUSH
52701: LD_INT 18
52703: PUSH
52704: LD_INT 19
52706: PUSH
52707: LD_INT 20
52709: PUSH
52710: LD_INT 21
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: IN
52728: NOT
52729: OR
52730: PUSH
52731: LD_VAR 0 8
52735: PUSH
52736: LD_INT 5
52738: ARRAY
52739: NOT
52740: OR
52741: PUSH
52742: LD_VAR 0 8
52746: PUSH
52747: LD_INT 6
52749: ARRAY
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: LD_INT 2
52756: PUSH
52757: LD_INT 7
52759: PUSH
52760: LD_INT 9
52762: PUSH
52763: LD_INT 10
52765: PUSH
52766: LD_INT 11
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: IN
52777: NOT
52778: OR
52779: IFFALSE 52785
// exit ;
52781: POP
52782: POP
52783: GO 52868
// end ;
52785: GO 52456
52787: POP
52788: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52789: LD_VAR 0 9
52793: PPUSH
52794: LD_VAR 0 3
52798: PPUSH
52799: LD_VAR 0 4
52803: PPUSH
52804: LD_INT 20
52806: PPUSH
52807: CALL 44814 0 4
52811: PUSH
52812: LD_INT 4
52814: ARRAY
52815: IFFALSE 52819
// exit ;
52817: GO 52868
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52819: LD_VAR 0 2
52823: PUSH
52824: LD_INT 29
52826: PUSH
52827: LD_INT 30
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: IN
52834: PUSH
52835: LD_VAR 0 3
52839: PPUSH
52840: LD_VAR 0 4
52844: PPUSH
52845: LD_VAR 0 9
52849: PPUSH
52850: CALL_OW 440
52854: NOT
52855: AND
52856: IFFALSE 52860
// exit ;
52858: GO 52868
// result := true ;
52860: LD_ADDR_VAR 0 6
52864: PUSH
52865: LD_INT 1
52867: ST_TO_ADDR
// end ;
52868: LD_VAR 0 6
52872: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52873: LD_INT 0
52875: PPUSH
52876: PPUSH
52877: PPUSH
52878: PPUSH
52879: PPUSH
52880: PPUSH
52881: PPUSH
52882: PPUSH
52883: PPUSH
52884: PPUSH
52885: PPUSH
52886: PPUSH
52887: PPUSH
52888: PPUSH
52889: PPUSH
52890: PPUSH
52891: PPUSH
52892: PPUSH
52893: PPUSH
52894: PPUSH
52895: PPUSH
52896: PPUSH
52897: PPUSH
52898: PPUSH
52899: PPUSH
52900: PPUSH
52901: PPUSH
52902: PPUSH
52903: PPUSH
52904: PPUSH
52905: PPUSH
52906: PPUSH
52907: PPUSH
52908: PPUSH
52909: PPUSH
52910: PPUSH
52911: PPUSH
52912: PPUSH
52913: PPUSH
52914: PPUSH
52915: PPUSH
52916: PPUSH
52917: PPUSH
52918: PPUSH
52919: PPUSH
52920: PPUSH
52921: PPUSH
52922: PPUSH
52923: PPUSH
52924: PPUSH
52925: PPUSH
52926: PPUSH
52927: PPUSH
52928: PPUSH
52929: PPUSH
52930: PPUSH
52931: PPUSH
52932: PPUSH
// result = [ ] ;
52933: LD_ADDR_VAR 0 7
52937: PUSH
52938: EMPTY
52939: ST_TO_ADDR
// temp_list = [ ] ;
52940: LD_ADDR_VAR 0 9
52944: PUSH
52945: EMPTY
52946: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52947: LD_VAR 0 4
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: LD_INT 2
52960: PUSH
52961: LD_INT 3
52963: PUSH
52964: LD_INT 4
52966: PUSH
52967: LD_INT 5
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: IN
52978: NOT
52979: PUSH
52980: LD_VAR 0 1
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: IN
52995: PUSH
52996: LD_VAR 0 5
53000: PUSH
53001: LD_INT 1
53003: PUSH
53004: LD_INT 2
53006: PUSH
53007: LD_INT 3
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: LIST
53014: IN
53015: NOT
53016: AND
53017: OR
53018: IFFALSE 53022
// exit ;
53020: GO 71413
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53022: LD_VAR 0 1
53026: PUSH
53027: LD_INT 6
53029: PUSH
53030: LD_INT 7
53032: PUSH
53033: LD_INT 8
53035: PUSH
53036: LD_INT 13
53038: PUSH
53039: LD_INT 12
53041: PUSH
53042: LD_INT 15
53044: PUSH
53045: LD_INT 11
53047: PUSH
53048: LD_INT 14
53050: PUSH
53051: LD_INT 10
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: IN
53065: IFFALSE 53075
// btype = b_lab ;
53067: LD_ADDR_VAR 0 1
53071: PUSH
53072: LD_INT 6
53074: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53075: LD_VAR 0 6
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: LD_INT 2
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: LIST
53093: IN
53094: NOT
53095: PUSH
53096: LD_VAR 0 1
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: LD_INT 2
53109: PUSH
53110: LD_INT 3
53112: PUSH
53113: LD_INT 6
53115: PUSH
53116: LD_INT 36
53118: PUSH
53119: LD_INT 4
53121: PUSH
53122: LD_INT 5
53124: PUSH
53125: LD_INT 31
53127: PUSH
53128: LD_INT 32
53130: PUSH
53131: LD_INT 33
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: IN
53147: NOT
53148: PUSH
53149: LD_VAR 0 6
53153: PUSH
53154: LD_INT 1
53156: EQUAL
53157: AND
53158: OR
53159: PUSH
53160: LD_VAR 0 1
53164: PUSH
53165: LD_INT 2
53167: PUSH
53168: LD_INT 3
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: IN
53175: NOT
53176: PUSH
53177: LD_VAR 0 6
53181: PUSH
53182: LD_INT 2
53184: EQUAL
53185: AND
53186: OR
53187: IFFALSE 53197
// mode = 0 ;
53189: LD_ADDR_VAR 0 6
53193: PUSH
53194: LD_INT 0
53196: ST_TO_ADDR
// case mode of 0 :
53197: LD_VAR 0 6
53201: PUSH
53202: LD_INT 0
53204: DOUBLE
53205: EQUAL
53206: IFTRUE 53210
53208: GO 64663
53210: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53211: LD_ADDR_VAR 0 11
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: LD_INT 1
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: LD_INT 2
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: LD_INT 2
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: LD_INT 2
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: LD_INT 2
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: LD_INT 3
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: LD_INT 3
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53404: LD_ADDR_VAR 0 12
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 2
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 2
53527: NEG
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 2
53538: NEG
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 2
53550: NEG
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 3
53561: NEG
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 3
53572: NEG
53573: PUSH
53574: LD_INT 1
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53600: LD_ADDR_VAR 0 13
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: LD_INT 2
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: LD_INT 2
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 2
53723: NEG
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 2
53735: NEG
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 2
53747: NEG
53748: PUSH
53749: LD_INT 3
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 3
53759: NEG
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 3
53771: NEG
53772: PUSH
53773: LD_INT 3
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53799: LD_ADDR_VAR 0 14
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: NEG
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: LD_INT 2
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: LD_INT 2
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: LD_INT 2
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: LD_INT 2
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: LD_INT 3
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: LD_INT 3
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: LD_INT 2
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53995: LD_ADDR_VAR 0 15
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 2
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 2
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 2
54118: NEG
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 2
54129: NEG
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 3
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 3
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54188: LD_ADDR_VAR 0 16
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: LD_INT 1
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: LD_INT 0
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: LD_INT 2
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 2
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 2
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: LD_INT 2
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 2
54311: NEG
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: LD_INT 2
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 3
54335: PUSH
54336: LD_INT 2
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 3
54345: PUSH
54346: LD_INT 3
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 2
54355: PUSH
54356: LD_INT 3
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54381: LD_ADDR_VAR 0 17
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: LD_INT 2
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: LD_INT 2
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 2
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 2
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 2
54516: PUSH
54517: LD_INT 2
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: LD_INT 2
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: LD_INT 2
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 2
54568: NEG
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 2
54580: NEG
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54611: LD_ADDR_VAR 0 18
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: LD_INT 2
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 2
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 2
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 2
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 2
54746: PUSH
54747: LD_INT 2
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: LD_INT 2
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 2
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 2
54798: NEG
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 2
54810: NEG
54811: PUSH
54812: LD_INT 2
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54841: LD_ADDR_VAR 0 19
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 1
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: NEG
54923: PUSH
54924: LD_INT 2
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 2
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 2
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 2
54976: PUSH
54977: LD_INT 2
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: LD_INT 2
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: LD_INT 2
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 2
55028: NEG
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 2
55040: NEG
55041: PUSH
55042: LD_INT 2
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55071: LD_ADDR_VAR 0 20
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: LD_INT 2
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: LD_INT 2
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 2
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 2
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 2
55206: PUSH
55207: LD_INT 2
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: LD_INT 2
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: LD_INT 2
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 2
55247: NEG
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 2
55258: NEG
55259: PUSH
55260: LD_INT 1
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 2
55270: NEG
55271: PUSH
55272: LD_INT 2
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55301: LD_ADDR_VAR 0 21
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: LD_INT 1
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: LD_INT 2
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 2
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 2
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 2
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 2
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: NEG
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: NEG
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 2
55500: NEG
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55531: LD_ADDR_VAR 0 22
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: LD_INT 2
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: LD_INT 2
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 2
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 2
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: PUSH
55667: LD_INT 2
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: LD_INT 2
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 2
55707: NEG
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 2
55718: NEG
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 2
55730: NEG
55731: PUSH
55732: LD_INT 2
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55761: LD_ADDR_VAR 0 23
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: LD_INT 2
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: LD_INT 2
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 2
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 2
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 2
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 2
55937: NEG
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 2
55948: NEG
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 2
55960: NEG
55961: PUSH
55962: LD_INT 2
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: LD_INT 3
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: LD_INT 3
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 2
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56041: LD_ADDR_VAR 0 24
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 0
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: LD_INT 2
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: LD_INT 2
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 2
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 2
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 2
56176: PUSH
56177: LD_INT 2
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: LD_INT 2
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: LD_INT 2
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 2
56217: NEG
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 2
56228: NEG
56229: PUSH
56230: LD_INT 1
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 2
56240: NEG
56241: PUSH
56242: LD_INT 2
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: LD_INT 2
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 3
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 3
56284: PUSH
56285: LD_INT 2
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56317: LD_ADDR_VAR 0 25
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: LD_INT 2
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: LD_INT 2
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: LD_INT 1
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 2
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 2
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 2
56452: PUSH
56453: LD_INT 2
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 2
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: LD_INT 2
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 2
56493: NEG
56494: PUSH
56495: LD_INT 0
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 2
56504: NEG
56505: PUSH
56506: LD_INT 1
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 2
56516: NEG
56517: PUSH
56518: LD_INT 2
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 3
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 3
56538: PUSH
56539: LD_INT 2
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 2
56548: PUSH
56549: LD_INT 3
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: PUSH
56559: LD_INT 3
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56591: LD_ADDR_VAR 0 26
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: LD_INT 2
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 2
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: LD_INT 2
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: LD_INT 2
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: LD_INT 2
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: NEG
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 2
56790: NEG
56791: PUSH
56792: LD_INT 2
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: LD_INT 3
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: LD_INT 3
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: LD_INT 2
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 2
56833: NEG
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56867: LD_ADDR_VAR 0 27
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: LD_INT 2
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 2
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 2
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 2
57002: PUSH
57003: LD_INT 2
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: LD_INT 2
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: LD_INT 2
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: LD_INT 1
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 2
57066: NEG
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: LD_INT 2
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 2
57089: NEG
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 3
57100: NEG
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 3
57112: NEG
57113: PUSH
57114: LD_INT 2
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57147: LD_ADDR_VAR 0 28
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 1
57205: NEG
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: LD_INT 2
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 2
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 2
57272: PUSH
57273: LD_INT 1
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 2
57282: PUSH
57283: LD_INT 2
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: LD_INT 2
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: NEG
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 2
57334: NEG
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 2
57346: NEG
57347: PUSH
57348: LD_INT 2
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 2
57358: NEG
57359: PUSH
57360: LD_INT 3
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: LD_INT 3
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 3
57382: NEG
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 3
57394: NEG
57395: PUSH
57396: LD_INT 2
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57429: LD_ADDR_VAR 0 29
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: LD_INT 2
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 2
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 2
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: LD_INT 2
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: NEG
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 2
57607: NEG
57608: PUSH
57609: LD_INT 2
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 2
57619: NEG
57620: PUSH
57621: LD_INT 3
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 2
57631: PUSH
57632: LD_INT 1
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 3
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: LD_INT 3
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 1
57662: NEG
57663: PUSH
57664: LD_INT 2
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 3
57673: NEG
57674: PUSH
57675: LD_INT 2
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57708: LD_ADDR_VAR 0 30
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: LD_INT 1
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: LD_INT 2
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: LD_INT 2
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 2
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 2
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 2
57843: PUSH
57844: LD_INT 2
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 1
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 1
57863: NEG
57864: PUSH
57865: LD_INT 1
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 2
57874: NEG
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 2
57885: NEG
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: LD_INT 3
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: LD_INT 2
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 3
57920: PUSH
57921: LD_INT 2
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 2
57930: PUSH
57931: LD_INT 3
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 2
57940: NEG
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 3
57951: NEG
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57986: LD_ADDR_VAR 0 31
57990: PUSH
57991: LD_INT 0
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 1
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: NEG
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 1
58055: NEG
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: LD_INT 2
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: LD_INT 0
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 2
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 2
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 2
58163: NEG
58164: PUSH
58165: LD_INT 2
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: LD_INT 3
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 2
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 3
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: LD_INT 3
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: LD_INT 2
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 3
58229: NEG
58230: PUSH
58231: LD_INT 2
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58264: LD_ADDR_VAR 0 32
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: LD_INT 1
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: LD_INT 1
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: LD_INT 1
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: NEG
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: LD_INT 1
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 1
58345: NEG
58346: PUSH
58347: LD_INT 2
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: LD_INT 2
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: LD_INT 1
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 2
58379: PUSH
58380: LD_INT 1
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 2
58389: PUSH
58390: LD_INT 2
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 1
58399: PUSH
58400: LD_INT 2
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: LD_INT 2
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: LD_INT 1
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: NEG
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 2
58441: NEG
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: LD_INT 3
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: PUSH
58466: LD_INT 2
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 3
58476: PUSH
58477: LD_INT 2
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 2
58486: PUSH
58487: LD_INT 3
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 2
58496: NEG
58497: PUSH
58498: LD_INT 1
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 3
58507: NEG
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58542: LD_ADDR_VAR 0 33
58546: PUSH
58547: LD_INT 0
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: LD_INT 0
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: NEG
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: LD_INT 2
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 2
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 2
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: LD_INT 2
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: LD_INT 2
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 2
58697: NEG
58698: PUSH
58699: LD_INT 0
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: NEG
58709: PUSH
58710: LD_INT 1
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 2
58720: NEG
58721: PUSH
58722: LD_INT 2
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 2
58732: NEG
58733: PUSH
58734: LD_INT 3
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 3
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: LD_INT 3
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 3
58786: NEG
58787: PUSH
58788: LD_INT 2
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58821: LD_ADDR_VAR 0 34
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: LD_INT 1
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 1
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 1
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: NEG
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: NEG
58891: PUSH
58892: LD_INT 1
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 1
58902: NEG
58903: PUSH
58904: LD_INT 2
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: LD_INT 2
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 2
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 2
58946: PUSH
58947: LD_INT 2
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: LD_INT 2
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 2
58988: NEG
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 2
59000: NEG
59001: PUSH
59002: LD_INT 2
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: LD_INT 3
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 1
59024: PUSH
59025: LD_INT 2
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 3
59035: PUSH
59036: LD_INT 2
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 2
59045: PUSH
59046: LD_INT 3
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 2
59055: NEG
59056: PUSH
59057: LD_INT 1
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 3
59066: NEG
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59101: LD_ADDR_VAR 0 35
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: LD_INT 0
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 2
59182: PUSH
59183: LD_INT 1
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 2
59192: NEG
59193: PUSH
59194: LD_INT 1
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59213: LD_ADDR_VAR 0 36
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: NEG
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: LD_INT 2
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 1
59306: PUSH
59307: LD_INT 2
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59325: LD_ADDR_VAR 0 37
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: LD_INT 1
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 1
59383: NEG
59384: PUSH
59385: LD_INT 0
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: LD_INT 1
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: LD_INT 1
59409: NEG
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 1
59417: NEG
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59437: LD_ADDR_VAR 0 38
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 1
59506: NEG
59507: PUSH
59508: LD_INT 1
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 2
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 2
59528: NEG
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59549: LD_ADDR_VAR 0 39
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: LD_INT 1
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: LD_INT 1
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: LD_INT 1
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 1
59607: NEG
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: LD_INT 1
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: LD_INT 2
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: LD_INT 2
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59661: LD_ADDR_VAR 0 40
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: LD_INT 1
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: NEG
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: PUSH
59743: LD_INT 1
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 1
59753: NEG
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59773: LD_ADDR_VAR 0 41
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 0
59790: PUSH
59791: LD_INT 1
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 1
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: LD_INT 1
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 1
59831: NEG
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: PUSH
59844: LD_INT 1
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 1
59854: NEG
59855: PUSH
59856: LD_INT 2
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: LD_INT 1
59869: NEG
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 2
59877: PUSH
59878: LD_INT 0
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 2
59887: PUSH
59888: LD_INT 1
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 2
59897: PUSH
59898: LD_INT 2
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: PUSH
59908: LD_INT 2
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: NEG
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 2
59928: NEG
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 2
59939: NEG
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 2
59951: NEG
59952: PUSH
59953: LD_INT 2
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 2
59963: NEG
59964: PUSH
59965: LD_INT 3
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 2
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 3
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 3
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 3
60006: PUSH
60007: LD_INT 2
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 3
60016: PUSH
60017: LD_INT 3
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 2
60026: PUSH
60027: LD_INT 3
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 2
60036: NEG
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 3
60047: NEG
60048: PUSH
60049: LD_INT 0
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 3
60058: NEG
60059: PUSH
60060: LD_INT 1
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 3
60070: NEG
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 3
60082: NEG
60083: PUSH
60084: LD_INT 3
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60123: LD_ADDR_VAR 0 42
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 0
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 1
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 1
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 0
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: NEG
60182: PUSH
60183: LD_INT 0
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: LD_INT 1
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 1
60204: NEG
60205: PUSH
60206: LD_INT 2
60208: NEG
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: LD_INT 2
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 1
60227: PUSH
60228: LD_INT 1
60230: NEG
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 2
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 2
60248: PUSH
60249: LD_INT 2
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: LD_INT 2
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: LD_INT 2
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: LD_INT 1
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 2
60289: NEG
60290: PUSH
60291: LD_INT 1
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 2
60301: NEG
60302: PUSH
60303: LD_INT 2
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 2
60313: NEG
60314: PUSH
60315: LD_INT 3
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 1
60325: NEG
60326: PUSH
60327: LD_INT 3
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: LD_INT 3
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: PUSH
60349: LD_INT 2
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 3
60359: PUSH
60360: LD_INT 2
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 3
60369: PUSH
60370: LD_INT 3
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 2
60379: PUSH
60380: LD_INT 3
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: PUSH
60390: LD_INT 3
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: LD_INT 3
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: NEG
60410: PUSH
60411: LD_INT 2
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 3
60420: NEG
60421: PUSH
60422: LD_INT 2
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 3
60432: NEG
60433: PUSH
60434: LD_INT 3
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60473: LD_ADDR_VAR 0 43
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: LD_INT 0
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: LD_INT 1
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: NEG
60543: PUSH
60544: LD_INT 1
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: LD_INT 2
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 2
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 2
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: LD_INT 2
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: LD_INT 2
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: LD_INT 1
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 2
60639: NEG
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 2
60650: NEG
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 1
60662: NEG
60663: PUSH
60664: LD_INT 3
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: LD_INT 3
60677: NEG
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 1
60685: PUSH
60686: LD_INT 2
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 2
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 3
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 3
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: LD_INT 3
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 3
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: NEG
60748: PUSH
60749: LD_INT 2
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 2
60758: NEG
60759: PUSH
60760: LD_INT 1
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 3
60769: NEG
60770: PUSH
60771: LD_INT 0
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 3
60780: NEG
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60821: LD_ADDR_VAR 0 44
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: LD_INT 1
60841: NEG
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 1
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 1
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 0
60869: PUSH
60870: LD_INT 1
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 1
60879: NEG
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 1
60890: NEG
60891: PUSH
60892: LD_INT 1
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: LD_INT 2
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 1
60914: PUSH
60915: LD_INT 1
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 2
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 2
60935: PUSH
60936: LD_INT 1
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 2
60945: PUSH
60946: LD_INT 2
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 1
60955: PUSH
60956: LD_INT 2
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: NEG
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 2
60976: NEG
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 2
60987: NEG
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 2
60999: NEG
61000: PUSH
61001: LD_INT 2
61003: NEG
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 2
61011: NEG
61012: PUSH
61013: LD_INT 3
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 2
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 3
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 3
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 3
61054: PUSH
61055: LD_INT 2
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 3
61064: PUSH
61065: LD_INT 3
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 2
61074: PUSH
61075: LD_INT 3
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 2
61084: NEG
61085: PUSH
61086: LD_INT 1
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 3
61095: NEG
61096: PUSH
61097: LD_INT 0
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 3
61106: NEG
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 3
61118: NEG
61119: PUSH
61120: LD_INT 2
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 3
61130: NEG
61131: PUSH
61132: LD_INT 3
61134: NEG
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61171: LD_ADDR_VAR 0 45
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: LD_INT 1
61191: NEG
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: LD_INT 0
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 1
61209: PUSH
61210: LD_INT 1
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: LD_INT 1
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 1
61240: NEG
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 1
61252: NEG
61253: PUSH
61254: LD_INT 2
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: LD_INT 2
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 1
61275: PUSH
61276: LD_INT 1
61278: NEG
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 2
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 2
61296: PUSH
61297: LD_INT 2
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 1
61306: PUSH
61307: LD_INT 2
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: LD_INT 2
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: NEG
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 2
61337: NEG
61338: PUSH
61339: LD_INT 1
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 2
61349: NEG
61350: PUSH
61351: LD_INT 2
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 2
61361: NEG
61362: PUSH
61363: LD_INT 3
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 1
61373: NEG
61374: PUSH
61375: LD_INT 3
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: LD_INT 3
61388: NEG
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 1
61396: PUSH
61397: LD_INT 2
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 3
61407: PUSH
61408: LD_INT 2
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 3
61417: PUSH
61418: LD_INT 3
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 2
61427: PUSH
61428: LD_INT 3
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: LD_INT 3
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: LD_INT 3
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 1
61457: NEG
61458: PUSH
61459: LD_INT 2
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 3
61468: NEG
61469: PUSH
61470: LD_INT 2
61472: NEG
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 3
61480: NEG
61481: PUSH
61482: LD_INT 3
61484: NEG
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61521: LD_ADDR_VAR 0 46
61525: PUSH
61526: LD_INT 0
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 1
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 1
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: NEG
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: NEG
61591: PUSH
61592: LD_INT 1
61594: NEG
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 1
61602: NEG
61603: PUSH
61604: LD_INT 2
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 0
61614: PUSH
61615: LD_INT 2
61617: NEG
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 1
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 2
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 2
61646: PUSH
61647: LD_INT 1
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 1
61656: PUSH
61657: LD_INT 2
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 0
61666: PUSH
61667: LD_INT 2
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 1
61676: NEG
61677: PUSH
61678: LD_INT 1
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 2
61687: NEG
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 2
61698: NEG
61699: PUSH
61700: LD_INT 1
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 1
61710: NEG
61711: PUSH
61712: LD_INT 3
61714: NEG
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: LD_INT 3
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: LD_INT 2
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 2
61744: PUSH
61745: LD_INT 1
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 3
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 3
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 1
61775: PUSH
61776: LD_INT 3
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 0
61785: PUSH
61786: LD_INT 3
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 1
61795: NEG
61796: PUSH
61797: LD_INT 2
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 2
61806: NEG
61807: PUSH
61808: LD_INT 1
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 3
61817: NEG
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 3
61828: NEG
61829: PUSH
61830: LD_INT 1
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61869: LD_ADDR_VAR 0 47
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: LD_INT 1
61889: NEG
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 1
61897: PUSH
61898: LD_INT 0
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 1
61907: PUSH
61908: LD_INT 1
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: LD_INT 1
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 1
61927: NEG
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 1
61950: NEG
61951: PUSH
61952: LD_INT 2
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: LD_INT 2
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: LD_INT 1
61976: NEG
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 2
61984: NEG
61985: PUSH
61986: LD_INT 1
61988: NEG
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 2
61996: NEG
61997: PUSH
61998: LD_INT 2
62000: NEG
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62020: LD_ADDR_VAR 0 48
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 1
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: LD_INT 1
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: NEG
62090: PUSH
62091: LD_INT 1
62093: NEG
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 1
62101: NEG
62102: PUSH
62103: LD_INT 2
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: LD_INT 2
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 2
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 2
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62167: LD_ADDR_VAR 0 49
62171: PUSH
62172: LD_INT 0
62174: PUSH
62175: LD_INT 0
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 1
62205: PUSH
62206: LD_INT 1
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 1
62236: NEG
62237: PUSH
62238: LD_INT 1
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: LD_INT 1
62251: NEG
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 2
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 2
62269: PUSH
62270: LD_INT 1
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 2
62279: PUSH
62280: LD_INT 2
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 1
62289: PUSH
62290: LD_INT 2
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62311: LD_ADDR_VAR 0 50
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 1
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: LD_INT 1
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: LD_INT 1
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 1
62369: NEG
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 1
62380: NEG
62381: PUSH
62382: LD_INT 1
62384: NEG
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 2
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 2
62402: PUSH
62403: LD_INT 2
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: LD_INT 2
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 0
62422: PUSH
62423: LD_INT 2
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 1
62432: NEG
62433: PUSH
62434: LD_INT 1
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62455: LD_ADDR_VAR 0 51
62459: PUSH
62460: LD_INT 0
62462: PUSH
62463: LD_INT 0
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: LD_INT 1
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 1
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 1
62493: PUSH
62494: LD_INT 1
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 0
62503: PUSH
62504: LD_INT 1
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 1
62513: NEG
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 1
62524: NEG
62525: PUSH
62526: LD_INT 1
62528: NEG
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 1
62536: PUSH
62537: LD_INT 2
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: LD_INT 2
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: LD_INT 1
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 2
62567: NEG
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 2
62578: NEG
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62602: LD_ADDR_VAR 0 52
62606: PUSH
62607: LD_INT 0
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: LD_INT 1
62622: NEG
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 1
62630: PUSH
62631: LD_INT 0
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: LD_INT 1
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 0
62650: PUSH
62651: LD_INT 1
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 1
62660: NEG
62661: PUSH
62662: LD_INT 0
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 1
62671: NEG
62672: PUSH
62673: LD_INT 1
62675: NEG
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 1
62683: NEG
62684: PUSH
62685: LD_INT 2
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: NEG
62696: PUSH
62697: LD_INT 1
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 2
62706: NEG
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 2
62717: NEG
62718: PUSH
62719: LD_INT 1
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 2
62729: NEG
62730: PUSH
62731: LD_INT 2
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62753: LD_ADDR_VAR 0 53
62757: PUSH
62758: LD_INT 0
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: LD_INT 1
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 1
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 1
62791: PUSH
62792: LD_INT 1
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: LD_INT 1
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 1
62811: NEG
62812: PUSH
62813: LD_INT 0
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 1
62822: NEG
62823: PUSH
62824: LD_INT 1
62826: NEG
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 1
62834: NEG
62835: PUSH
62836: LD_INT 2
62838: NEG
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: LD_INT 2
62849: NEG
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 1
62857: PUSH
62858: LD_INT 1
62860: NEG
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 2
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 2
62878: PUSH
62879: LD_INT 1
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 2
62888: PUSH
62889: LD_INT 2
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 1
62898: PUSH
62899: LD_INT 2
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: LD_INT 2
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 1
62918: NEG
62919: PUSH
62920: LD_INT 1
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 2
62929: NEG
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 2
62940: NEG
62941: PUSH
62942: LD_INT 1
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 2
62952: NEG
62953: PUSH
62954: LD_INT 2
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62983: LD_ADDR_VAR 0 54
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 0
63000: PUSH
63001: LD_INT 1
63003: NEG
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 1
63011: PUSH
63012: LD_INT 0
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 1
63021: PUSH
63022: LD_INT 1
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: LD_INT 1
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 1
63041: NEG
63042: PUSH
63043: LD_INT 0
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 1
63052: NEG
63053: PUSH
63054: LD_INT 1
63056: NEG
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 1
63064: NEG
63065: PUSH
63066: LD_INT 2
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: LD_INT 2
63079: NEG
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 1
63087: PUSH
63088: LD_INT 1
63090: NEG
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 2
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 2
63108: PUSH
63109: LD_INT 1
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 2
63118: PUSH
63119: LD_INT 2
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 1
63128: PUSH
63129: LD_INT 2
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: LD_INT 2
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 1
63148: NEG
63149: PUSH
63150: LD_INT 1
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 2
63159: NEG
63160: PUSH
63161: LD_INT 0
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 2
63170: NEG
63171: PUSH
63172: LD_INT 1
63174: NEG
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 2
63182: NEG
63183: PUSH
63184: LD_INT 2
63186: NEG
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63213: LD_ADDR_VAR 0 55
63217: PUSH
63218: LD_INT 0
63220: PUSH
63221: LD_INT 0
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: LD_INT 1
63233: NEG
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: LD_INT 0
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 1
63251: PUSH
63252: LD_INT 1
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 0
63261: PUSH
63262: LD_INT 1
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: NEG
63272: PUSH
63273: LD_INT 0
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 1
63282: NEG
63283: PUSH
63284: LD_INT 1
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 1
63294: NEG
63295: PUSH
63296: LD_INT 2
63298: NEG
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 0
63306: PUSH
63307: LD_INT 2
63309: NEG
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: LD_INT 1
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 2
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 2
63338: PUSH
63339: LD_INT 1
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 2
63348: PUSH
63349: LD_INT 2
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 1
63358: PUSH
63359: LD_INT 2
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: LD_INT 2
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: NEG
63379: PUSH
63380: LD_INT 1
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 2
63389: NEG
63390: PUSH
63391: LD_INT 0
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 2
63400: NEG
63401: PUSH
63402: LD_INT 1
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 2
63412: NEG
63413: PUSH
63414: LD_INT 2
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63443: LD_ADDR_VAR 0 56
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 0
63460: PUSH
63461: LD_INT 1
63463: NEG
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 1
63471: PUSH
63472: LD_INT 0
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 1
63481: PUSH
63482: LD_INT 1
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: LD_INT 1
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: LD_INT 0
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 1
63512: NEG
63513: PUSH
63514: LD_INT 1
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 1
63524: NEG
63525: PUSH
63526: LD_INT 2
63528: NEG
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 0
63536: PUSH
63537: LD_INT 2
63539: NEG
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 1
63547: PUSH
63548: LD_INT 1
63550: NEG
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 2
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 2
63568: PUSH
63569: LD_INT 1
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 2
63578: PUSH
63579: LD_INT 2
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 1
63588: PUSH
63589: LD_INT 2
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 0
63598: PUSH
63599: LD_INT 2
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 1
63608: NEG
63609: PUSH
63610: LD_INT 1
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 2
63619: NEG
63620: PUSH
63621: LD_INT 0
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 2
63630: NEG
63631: PUSH
63632: LD_INT 1
63634: NEG
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 2
63642: NEG
63643: PUSH
63644: LD_INT 2
63646: NEG
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63673: LD_ADDR_VAR 0 57
63677: PUSH
63678: LD_INT 0
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: LD_INT 1
63693: NEG
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 1
63701: PUSH
63702: LD_INT 0
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 1
63711: PUSH
63712: LD_INT 1
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 0
63721: PUSH
63722: LD_INT 1
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 1
63731: NEG
63732: PUSH
63733: LD_INT 0
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 1
63742: NEG
63743: PUSH
63744: LD_INT 1
63746: NEG
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 1
63754: NEG
63755: PUSH
63756: LD_INT 2
63758: NEG
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: LD_INT 2
63769: NEG
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: LD_INT 1
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 2
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 2
63798: PUSH
63799: LD_INT 1
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 2
63808: PUSH
63809: LD_INT 2
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 1
63818: PUSH
63819: LD_INT 2
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 0
63828: PUSH
63829: LD_INT 2
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 1
63838: NEG
63839: PUSH
63840: LD_INT 1
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 2
63849: NEG
63850: PUSH
63851: LD_INT 0
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 2
63860: NEG
63861: PUSH
63862: LD_INT 1
63864: NEG
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 2
63872: NEG
63873: PUSH
63874: LD_INT 2
63876: NEG
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63903: LD_ADDR_VAR 0 58
63907: PUSH
63908: LD_INT 0
63910: PUSH
63911: LD_INT 0
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: LD_INT 1
63923: NEG
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 1
63931: PUSH
63932: LD_INT 0
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 1
63941: PUSH
63942: LD_INT 1
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 0
63951: PUSH
63952: LD_INT 1
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 1
63961: NEG
63962: PUSH
63963: LD_INT 0
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 1
63972: NEG
63973: PUSH
63974: LD_INT 1
63976: NEG
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 1
63984: NEG
63985: PUSH
63986: LD_INT 2
63988: NEG
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 0
63996: PUSH
63997: LD_INT 2
63999: NEG
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 1
64007: PUSH
64008: LD_INT 1
64010: NEG
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 2
64018: PUSH
64019: LD_INT 0
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 2
64028: PUSH
64029: LD_INT 1
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 2
64038: PUSH
64039: LD_INT 2
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 1
64048: PUSH
64049: LD_INT 2
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 0
64058: PUSH
64059: LD_INT 2
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 1
64068: NEG
64069: PUSH
64070: LD_INT 1
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 2
64079: NEG
64080: PUSH
64081: LD_INT 0
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 2
64090: NEG
64091: PUSH
64092: LD_INT 1
64094: NEG
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 2
64102: NEG
64103: PUSH
64104: LD_INT 2
64106: NEG
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64133: LD_ADDR_VAR 0 59
64137: PUSH
64138: LD_INT 0
64140: PUSH
64141: LD_INT 0
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 0
64150: PUSH
64151: LD_INT 1
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 1
64161: PUSH
64162: LD_INT 0
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 1
64171: PUSH
64172: LD_INT 1
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 0
64181: PUSH
64182: LD_INT 1
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: NEG
64192: PUSH
64193: LD_INT 0
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 1
64202: NEG
64203: PUSH
64204: LD_INT 1
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64221: LD_ADDR_VAR 0 60
64225: PUSH
64226: LD_INT 0
64228: PUSH
64229: LD_INT 0
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 0
64238: PUSH
64239: LD_INT 1
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 1
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: PUSH
64260: LD_INT 1
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 0
64269: PUSH
64270: LD_INT 1
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 1
64279: NEG
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 1
64290: NEG
64291: PUSH
64292: LD_INT 1
64294: NEG
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64309: LD_ADDR_VAR 0 61
64313: PUSH
64314: LD_INT 0
64316: PUSH
64317: LD_INT 0
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 0
64326: PUSH
64327: LD_INT 1
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 1
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 1
64347: PUSH
64348: LD_INT 1
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 0
64357: PUSH
64358: LD_INT 1
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 1
64367: NEG
64368: PUSH
64369: LD_INT 0
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 1
64378: NEG
64379: PUSH
64380: LD_INT 1
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64397: LD_ADDR_VAR 0 62
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: LD_INT 0
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 0
64414: PUSH
64415: LD_INT 1
64417: NEG
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: LD_INT 0
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 1
64435: PUSH
64436: LD_INT 1
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 0
64445: PUSH
64446: LD_INT 1
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 1
64455: NEG
64456: PUSH
64457: LD_INT 0
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 1
64466: NEG
64467: PUSH
64468: LD_INT 1
64470: NEG
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64485: LD_ADDR_VAR 0 63
64489: PUSH
64490: LD_INT 0
64492: PUSH
64493: LD_INT 0
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 0
64502: PUSH
64503: LD_INT 1
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 1
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 1
64523: PUSH
64524: LD_INT 1
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 0
64533: PUSH
64534: LD_INT 1
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 1
64543: NEG
64544: PUSH
64545: LD_INT 0
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 1
64554: NEG
64555: PUSH
64556: LD_INT 1
64558: NEG
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64573: LD_ADDR_VAR 0 64
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: LD_INT 0
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 0
64590: PUSH
64591: LD_INT 1
64593: NEG
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 1
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 1
64611: PUSH
64612: LD_INT 1
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: LD_INT 1
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: NEG
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 1
64642: NEG
64643: PUSH
64644: LD_INT 1
64646: NEG
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: ST_TO_ADDR
// end ; 1 :
64661: GO 70558
64663: LD_INT 1
64665: DOUBLE
64666: EQUAL
64667: IFTRUE 64671
64669: GO 67294
64671: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64672: LD_ADDR_VAR 0 11
64676: PUSH
64677: LD_INT 1
64679: NEG
64680: PUSH
64681: LD_INT 3
64683: NEG
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 0
64691: PUSH
64692: LD_INT 3
64694: NEG
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 1
64702: PUSH
64703: LD_INT 2
64705: NEG
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: LIST
64715: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64716: LD_ADDR_VAR 0 12
64720: PUSH
64721: LD_INT 2
64723: PUSH
64724: LD_INT 1
64726: NEG
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 3
64734: PUSH
64735: LD_INT 0
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 3
64744: PUSH
64745: LD_INT 1
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: LIST
64756: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64757: LD_ADDR_VAR 0 13
64761: PUSH
64762: LD_INT 3
64764: PUSH
64765: LD_INT 2
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 3
64774: PUSH
64775: LD_INT 3
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 2
64784: PUSH
64785: LD_INT 3
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: LIST
64796: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64797: LD_ADDR_VAR 0 14
64801: PUSH
64802: LD_INT 1
64804: PUSH
64805: LD_INT 3
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 0
64814: PUSH
64815: LD_INT 3
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 1
64824: NEG
64825: PUSH
64826: LD_INT 2
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: LIST
64837: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64838: LD_ADDR_VAR 0 15
64842: PUSH
64843: LD_INT 2
64845: NEG
64846: PUSH
64847: LD_INT 1
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 3
64856: NEG
64857: PUSH
64858: LD_INT 0
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 3
64867: NEG
64868: PUSH
64869: LD_INT 1
64871: NEG
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: LIST
64881: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64882: LD_ADDR_VAR 0 16
64886: PUSH
64887: LD_INT 2
64889: NEG
64890: PUSH
64891: LD_INT 3
64893: NEG
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 3
64901: NEG
64902: PUSH
64903: LD_INT 2
64905: NEG
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 3
64913: NEG
64914: PUSH
64915: LD_INT 3
64917: NEG
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: LIST
64927: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64928: LD_ADDR_VAR 0 17
64932: PUSH
64933: LD_INT 1
64935: NEG
64936: PUSH
64937: LD_INT 3
64939: NEG
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 0
64947: PUSH
64948: LD_INT 3
64950: NEG
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 1
64958: PUSH
64959: LD_INT 2
64961: NEG
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: LIST
64971: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64972: LD_ADDR_VAR 0 18
64976: PUSH
64977: LD_INT 2
64979: PUSH
64980: LD_INT 1
64982: NEG
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 3
64990: PUSH
64991: LD_INT 0
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 3
65000: PUSH
65001: LD_INT 1
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: LIST
65012: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65013: LD_ADDR_VAR 0 19
65017: PUSH
65018: LD_INT 3
65020: PUSH
65021: LD_INT 2
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 3
65030: PUSH
65031: LD_INT 3
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 2
65040: PUSH
65041: LD_INT 3
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: LIST
65052: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65053: LD_ADDR_VAR 0 20
65057: PUSH
65058: LD_INT 1
65060: PUSH
65061: LD_INT 3
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 0
65070: PUSH
65071: LD_INT 3
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 1
65080: NEG
65081: PUSH
65082: LD_INT 2
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: LIST
65093: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65094: LD_ADDR_VAR 0 21
65098: PUSH
65099: LD_INT 2
65101: NEG
65102: PUSH
65103: LD_INT 1
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 3
65112: NEG
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 3
65123: NEG
65124: PUSH
65125: LD_INT 1
65127: NEG
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: LIST
65137: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65138: LD_ADDR_VAR 0 22
65142: PUSH
65143: LD_INT 2
65145: NEG
65146: PUSH
65147: LD_INT 3
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 3
65157: NEG
65158: PUSH
65159: LD_INT 2
65161: NEG
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 3
65169: NEG
65170: PUSH
65171: LD_INT 3
65173: NEG
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: LIST
65183: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65184: LD_ADDR_VAR 0 23
65188: PUSH
65189: LD_INT 0
65191: PUSH
65192: LD_INT 3
65194: NEG
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 1
65202: NEG
65203: PUSH
65204: LD_INT 4
65206: NEG
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 1
65214: PUSH
65215: LD_INT 3
65217: NEG
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: LIST
65227: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65228: LD_ADDR_VAR 0 24
65232: PUSH
65233: LD_INT 3
65235: PUSH
65236: LD_INT 0
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 3
65245: PUSH
65246: LD_INT 1
65248: NEG
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 4
65256: PUSH
65257: LD_INT 1
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: LIST
65268: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65269: LD_ADDR_VAR 0 25
65273: PUSH
65274: LD_INT 3
65276: PUSH
65277: LD_INT 3
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 4
65286: PUSH
65287: LD_INT 3
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 3
65296: PUSH
65297: LD_INT 4
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: LIST
65308: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65309: LD_ADDR_VAR 0 26
65313: PUSH
65314: LD_INT 0
65316: PUSH
65317: LD_INT 3
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 1
65326: PUSH
65327: LD_INT 4
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 1
65336: NEG
65337: PUSH
65338: LD_INT 3
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: LIST
65349: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65350: LD_ADDR_VAR 0 27
65354: PUSH
65355: LD_INT 3
65357: NEG
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 3
65368: NEG
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 4
65379: NEG
65380: PUSH
65381: LD_INT 1
65383: NEG
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: LIST
65393: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65394: LD_ADDR_VAR 0 28
65398: PUSH
65399: LD_INT 3
65401: NEG
65402: PUSH
65403: LD_INT 3
65405: NEG
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 3
65413: NEG
65414: PUSH
65415: LD_INT 4
65417: NEG
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 4
65425: NEG
65426: PUSH
65427: LD_INT 3
65429: NEG
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: LIST
65439: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65440: LD_ADDR_VAR 0 29
65444: PUSH
65445: LD_INT 1
65447: NEG
65448: PUSH
65449: LD_INT 3
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 0
65459: PUSH
65460: LD_INT 3
65462: NEG
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 1
65470: PUSH
65471: LD_INT 2
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 1
65481: NEG
65482: PUSH
65483: LD_INT 4
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 0
65493: PUSH
65494: LD_INT 4
65496: NEG
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 1
65504: PUSH
65505: LD_INT 3
65507: NEG
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 1
65515: NEG
65516: PUSH
65517: LD_INT 5
65519: NEG
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 0
65527: PUSH
65528: LD_INT 5
65530: NEG
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 1
65538: PUSH
65539: LD_INT 4
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 1
65549: NEG
65550: PUSH
65551: LD_INT 6
65553: NEG
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 0
65561: PUSH
65562: LD_INT 6
65564: NEG
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 1
65572: PUSH
65573: LD_INT 5
65575: NEG
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65595: LD_ADDR_VAR 0 30
65599: PUSH
65600: LD_INT 2
65602: PUSH
65603: LD_INT 1
65605: NEG
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 3
65613: PUSH
65614: LD_INT 0
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 3
65623: PUSH
65624: LD_INT 1
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 3
65633: PUSH
65634: LD_INT 1
65636: NEG
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 4
65644: PUSH
65645: LD_INT 0
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 4
65654: PUSH
65655: LD_INT 1
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 4
65664: PUSH
65665: LD_INT 1
65667: NEG
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 5
65675: PUSH
65676: LD_INT 0
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 5
65685: PUSH
65686: LD_INT 1
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 5
65695: PUSH
65696: LD_INT 1
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 6
65706: PUSH
65707: LD_INT 0
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 6
65716: PUSH
65717: LD_INT 1
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65738: LD_ADDR_VAR 0 31
65742: PUSH
65743: LD_INT 3
65745: PUSH
65746: LD_INT 2
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 3
65755: PUSH
65756: LD_INT 3
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 2
65765: PUSH
65766: LD_INT 3
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 4
65775: PUSH
65776: LD_INT 3
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 4
65785: PUSH
65786: LD_INT 4
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 3
65795: PUSH
65796: LD_INT 4
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 5
65805: PUSH
65806: LD_INT 4
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 5
65815: PUSH
65816: LD_INT 5
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 4
65825: PUSH
65826: LD_INT 5
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 6
65835: PUSH
65836: LD_INT 5
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 6
65845: PUSH
65846: LD_INT 6
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 5
65855: PUSH
65856: LD_INT 6
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65877: LD_ADDR_VAR 0 32
65881: PUSH
65882: LD_INT 1
65884: PUSH
65885: LD_INT 3
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: LD_INT 3
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 1
65904: NEG
65905: PUSH
65906: LD_INT 2
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 1
65915: PUSH
65916: LD_INT 4
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 0
65925: PUSH
65926: LD_INT 4
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 1
65935: NEG
65936: PUSH
65937: LD_INT 3
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 1
65946: PUSH
65947: LD_INT 5
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: LD_INT 5
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 1
65966: NEG
65967: PUSH
65968: LD_INT 4
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 1
65977: PUSH
65978: LD_INT 6
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 0
65987: PUSH
65988: LD_INT 6
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 1
65997: NEG
65998: PUSH
65999: LD_INT 5
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66020: LD_ADDR_VAR 0 33
66024: PUSH
66025: LD_INT 2
66027: NEG
66028: PUSH
66029: LD_INT 1
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 3
66038: NEG
66039: PUSH
66040: LD_INT 0
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 3
66049: NEG
66050: PUSH
66051: LD_INT 1
66053: NEG
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 3
66061: NEG
66062: PUSH
66063: LD_INT 1
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 4
66072: NEG
66073: PUSH
66074: LD_INT 0
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 4
66083: NEG
66084: PUSH
66085: LD_INT 1
66087: NEG
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 4
66095: NEG
66096: PUSH
66097: LD_INT 1
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 5
66106: NEG
66107: PUSH
66108: LD_INT 0
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 5
66117: NEG
66118: PUSH
66119: LD_INT 1
66121: NEG
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 5
66129: NEG
66130: PUSH
66131: LD_INT 1
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 6
66140: NEG
66141: PUSH
66142: LD_INT 0
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 6
66151: NEG
66152: PUSH
66153: LD_INT 1
66155: NEG
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66175: LD_ADDR_VAR 0 34
66179: PUSH
66180: LD_INT 2
66182: NEG
66183: PUSH
66184: LD_INT 3
66186: NEG
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 3
66194: NEG
66195: PUSH
66196: LD_INT 2
66198: NEG
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 3
66206: NEG
66207: PUSH
66208: LD_INT 3
66210: NEG
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 3
66218: NEG
66219: PUSH
66220: LD_INT 4
66222: NEG
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 4
66230: NEG
66231: PUSH
66232: LD_INT 3
66234: NEG
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 4
66242: NEG
66243: PUSH
66244: LD_INT 4
66246: NEG
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 4
66254: NEG
66255: PUSH
66256: LD_INT 5
66258: NEG
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 5
66266: NEG
66267: PUSH
66268: LD_INT 4
66270: NEG
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 5
66278: NEG
66279: PUSH
66280: LD_INT 5
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 5
66290: NEG
66291: PUSH
66292: LD_INT 6
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 6
66302: NEG
66303: PUSH
66304: LD_INT 5
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 6
66314: NEG
66315: PUSH
66316: LD_INT 6
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66338: LD_ADDR_VAR 0 41
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: LD_INT 2
66348: NEG
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 1
66356: NEG
66357: PUSH
66358: LD_INT 3
66360: NEG
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 1
66368: PUSH
66369: LD_INT 2
66371: NEG
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: LIST
66381: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66382: LD_ADDR_VAR 0 42
66386: PUSH
66387: LD_INT 2
66389: PUSH
66390: LD_INT 0
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 2
66399: PUSH
66400: LD_INT 1
66402: NEG
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 3
66410: PUSH
66411: LD_INT 1
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: LIST
66422: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66423: LD_ADDR_VAR 0 43
66427: PUSH
66428: LD_INT 2
66430: PUSH
66431: LD_INT 2
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 3
66440: PUSH
66441: LD_INT 2
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 2
66450: PUSH
66451: LD_INT 3
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: LIST
66462: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66463: LD_ADDR_VAR 0 44
66467: PUSH
66468: LD_INT 0
66470: PUSH
66471: LD_INT 2
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 1
66480: PUSH
66481: LD_INT 3
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 1
66490: NEG
66491: PUSH
66492: LD_INT 2
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: LIST
66503: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66504: LD_ADDR_VAR 0 45
66508: PUSH
66509: LD_INT 2
66511: NEG
66512: PUSH
66513: LD_INT 0
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 2
66522: NEG
66523: PUSH
66524: LD_INT 1
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 3
66533: NEG
66534: PUSH
66535: LD_INT 1
66537: NEG
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: LIST
66547: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66548: LD_ADDR_VAR 0 46
66552: PUSH
66553: LD_INT 2
66555: NEG
66556: PUSH
66557: LD_INT 2
66559: NEG
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 2
66567: NEG
66568: PUSH
66569: LD_INT 3
66571: NEG
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 3
66579: NEG
66580: PUSH
66581: LD_INT 2
66583: NEG
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: LIST
66593: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66594: LD_ADDR_VAR 0 47
66598: PUSH
66599: LD_INT 2
66601: NEG
66602: PUSH
66603: LD_INT 3
66605: NEG
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 1
66613: NEG
66614: PUSH
66615: LD_INT 3
66617: NEG
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66627: LD_ADDR_VAR 0 48
66631: PUSH
66632: LD_INT 1
66634: PUSH
66635: LD_INT 2
66637: NEG
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 2
66645: PUSH
66646: LD_INT 1
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66658: LD_ADDR_VAR 0 49
66662: PUSH
66663: LD_INT 3
66665: PUSH
66666: LD_INT 1
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 3
66675: PUSH
66676: LD_INT 2
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66687: LD_ADDR_VAR 0 50
66691: PUSH
66692: LD_INT 2
66694: PUSH
66695: LD_INT 3
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 1
66704: PUSH
66705: LD_INT 3
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66716: LD_ADDR_VAR 0 51
66720: PUSH
66721: LD_INT 1
66723: NEG
66724: PUSH
66725: LD_INT 2
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 2
66734: NEG
66735: PUSH
66736: LD_INT 1
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66747: LD_ADDR_VAR 0 52
66751: PUSH
66752: LD_INT 3
66754: NEG
66755: PUSH
66756: LD_INT 1
66758: NEG
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 3
66766: NEG
66767: PUSH
66768: LD_INT 2
66770: NEG
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66780: LD_ADDR_VAR 0 53
66784: PUSH
66785: LD_INT 1
66787: NEG
66788: PUSH
66789: LD_INT 3
66791: NEG
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 0
66799: PUSH
66800: LD_INT 3
66802: NEG
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 1
66810: PUSH
66811: LD_INT 2
66813: NEG
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: LIST
66823: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66824: LD_ADDR_VAR 0 54
66828: PUSH
66829: LD_INT 2
66831: PUSH
66832: LD_INT 1
66834: NEG
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 3
66842: PUSH
66843: LD_INT 0
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 3
66852: PUSH
66853: LD_INT 1
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: LIST
66864: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66865: LD_ADDR_VAR 0 55
66869: PUSH
66870: LD_INT 3
66872: PUSH
66873: LD_INT 2
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 3
66882: PUSH
66883: LD_INT 3
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 2
66892: PUSH
66893: LD_INT 3
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: LIST
66904: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66905: LD_ADDR_VAR 0 56
66909: PUSH
66910: LD_INT 1
66912: PUSH
66913: LD_INT 3
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 0
66922: PUSH
66923: LD_INT 3
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 1
66932: NEG
66933: PUSH
66934: LD_INT 2
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: LIST
66945: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66946: LD_ADDR_VAR 0 57
66950: PUSH
66951: LD_INT 2
66953: NEG
66954: PUSH
66955: LD_INT 1
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 3
66964: NEG
66965: PUSH
66966: LD_INT 0
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 3
66975: NEG
66976: PUSH
66977: LD_INT 1
66979: NEG
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: LIST
66989: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66990: LD_ADDR_VAR 0 58
66994: PUSH
66995: LD_INT 2
66997: NEG
66998: PUSH
66999: LD_INT 3
67001: NEG
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 3
67009: NEG
67010: PUSH
67011: LD_INT 2
67013: NEG
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 3
67021: NEG
67022: PUSH
67023: LD_INT 3
67025: NEG
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: LIST
67035: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67036: LD_ADDR_VAR 0 59
67040: PUSH
67041: LD_INT 1
67043: NEG
67044: PUSH
67045: LD_INT 2
67047: NEG
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 0
67055: PUSH
67056: LD_INT 2
67058: NEG
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 1
67066: PUSH
67067: LD_INT 1
67069: NEG
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: LIST
67079: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67080: LD_ADDR_VAR 0 60
67084: PUSH
67085: LD_INT 1
67087: PUSH
67088: LD_INT 1
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 2
67098: PUSH
67099: LD_INT 0
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 2
67108: PUSH
67109: LD_INT 1
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: LIST
67120: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67121: LD_ADDR_VAR 0 61
67125: PUSH
67126: LD_INT 2
67128: PUSH
67129: LD_INT 1
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 2
67138: PUSH
67139: LD_INT 2
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 1
67148: PUSH
67149: LD_INT 2
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: LIST
67160: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67161: LD_ADDR_VAR 0 62
67165: PUSH
67166: LD_INT 1
67168: PUSH
67169: LD_INT 2
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 0
67178: PUSH
67179: LD_INT 2
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 1
67188: NEG
67189: PUSH
67190: LD_INT 1
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: LIST
67201: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67202: LD_ADDR_VAR 0 63
67206: PUSH
67207: LD_INT 1
67209: NEG
67210: PUSH
67211: LD_INT 1
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 2
67220: NEG
67221: PUSH
67222: LD_INT 0
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PUSH
67229: LD_INT 2
67231: NEG
67232: PUSH
67233: LD_INT 1
67235: NEG
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: LIST
67245: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67246: LD_ADDR_VAR 0 64
67250: PUSH
67251: LD_INT 1
67253: NEG
67254: PUSH
67255: LD_INT 2
67257: NEG
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 2
67265: NEG
67266: PUSH
67267: LD_INT 1
67269: NEG
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 2
67277: NEG
67278: PUSH
67279: LD_INT 2
67281: NEG
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: LIST
67291: ST_TO_ADDR
// end ; 2 :
67292: GO 70558
67294: LD_INT 2
67296: DOUBLE
67297: EQUAL
67298: IFTRUE 67302
67300: GO 70557
67302: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67303: LD_ADDR_VAR 0 29
67307: PUSH
67308: LD_INT 4
67310: PUSH
67311: LD_INT 0
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 4
67320: PUSH
67321: LD_INT 1
67323: NEG
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 5
67331: PUSH
67332: LD_INT 0
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 5
67341: PUSH
67342: LD_INT 1
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 4
67351: PUSH
67352: LD_INT 1
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 3
67361: PUSH
67362: LD_INT 0
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 3
67371: PUSH
67372: LD_INT 1
67374: NEG
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 3
67382: PUSH
67383: LD_INT 2
67385: NEG
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 5
67393: PUSH
67394: LD_INT 2
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 3
67403: PUSH
67404: LD_INT 3
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 3
67413: PUSH
67414: LD_INT 2
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 4
67423: PUSH
67424: LD_INT 3
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 4
67433: PUSH
67434: LD_INT 4
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 3
67443: PUSH
67444: LD_INT 4
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 2
67453: PUSH
67454: LD_INT 3
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 2
67463: PUSH
67464: LD_INT 2
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 4
67473: PUSH
67474: LD_INT 2
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 2
67483: PUSH
67484: LD_INT 4
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: LD_INT 4
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 0
67503: PUSH
67504: LD_INT 3
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 1
67513: PUSH
67514: LD_INT 4
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 1
67523: PUSH
67524: LD_INT 5
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 0
67533: PUSH
67534: LD_INT 5
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 1
67543: NEG
67544: PUSH
67545: LD_INT 4
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 1
67554: NEG
67555: PUSH
67556: LD_INT 3
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 2
67565: PUSH
67566: LD_INT 5
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 2
67575: NEG
67576: PUSH
67577: LD_INT 3
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 3
67586: NEG
67587: PUSH
67588: LD_INT 0
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 3
67597: NEG
67598: PUSH
67599: LD_INT 1
67601: NEG
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 2
67609: NEG
67610: PUSH
67611: LD_INT 0
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 2
67620: NEG
67621: PUSH
67622: LD_INT 1
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 3
67631: NEG
67632: PUSH
67633: LD_INT 1
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 4
67642: NEG
67643: PUSH
67644: LD_INT 0
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 4
67653: NEG
67654: PUSH
67655: LD_INT 1
67657: NEG
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 4
67665: NEG
67666: PUSH
67667: LD_INT 2
67669: NEG
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 2
67677: NEG
67678: PUSH
67679: LD_INT 2
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 4
67688: NEG
67689: PUSH
67690: LD_INT 4
67692: NEG
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 4
67700: NEG
67701: PUSH
67702: LD_INT 5
67704: NEG
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 3
67712: NEG
67713: PUSH
67714: LD_INT 4
67716: NEG
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 3
67724: NEG
67725: PUSH
67726: LD_INT 3
67728: NEG
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 4
67736: NEG
67737: PUSH
67738: LD_INT 3
67740: NEG
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 5
67748: NEG
67749: PUSH
67750: LD_INT 4
67752: NEG
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 5
67760: NEG
67761: PUSH
67762: LD_INT 5
67764: NEG
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: PUSH
67770: LD_INT 3
67772: NEG
67773: PUSH
67774: LD_INT 5
67776: NEG
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 5
67784: NEG
67785: PUSH
67786: LD_INT 3
67788: NEG
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67841: LD_ADDR_VAR 0 30
67845: PUSH
67846: LD_INT 4
67848: PUSH
67849: LD_INT 4
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 4
67858: PUSH
67859: LD_INT 3
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 5
67868: PUSH
67869: LD_INT 4
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 5
67878: PUSH
67879: LD_INT 5
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 4
67888: PUSH
67889: LD_INT 5
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 3
67898: PUSH
67899: LD_INT 4
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 3
67908: PUSH
67909: LD_INT 3
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 5
67918: PUSH
67919: LD_INT 3
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 3
67928: PUSH
67929: LD_INT 5
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 0
67938: PUSH
67939: LD_INT 3
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 0
67948: PUSH
67949: LD_INT 2
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 1
67958: PUSH
67959: LD_INT 3
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: LD_INT 4
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 0
67978: PUSH
67979: LD_INT 4
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 1
67988: NEG
67989: PUSH
67990: LD_INT 3
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 1
67999: NEG
68000: PUSH
68001: LD_INT 2
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 2
68010: PUSH
68011: LD_INT 4
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 2
68020: NEG
68021: PUSH
68022: LD_INT 2
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 4
68031: NEG
68032: PUSH
68033: LD_INT 0
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 4
68042: NEG
68043: PUSH
68044: LD_INT 1
68046: NEG
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 3
68054: NEG
68055: PUSH
68056: LD_INT 0
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 3
68065: NEG
68066: PUSH
68067: LD_INT 1
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: LD_INT 4
68076: NEG
68077: PUSH
68078: LD_INT 1
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 5
68087: NEG
68088: PUSH
68089: LD_INT 0
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 5
68098: NEG
68099: PUSH
68100: LD_INT 1
68102: NEG
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 5
68110: NEG
68111: PUSH
68112: LD_INT 2
68114: NEG
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 3
68122: NEG
68123: PUSH
68124: LD_INT 2
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 3
68133: NEG
68134: PUSH
68135: LD_INT 3
68137: NEG
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 3
68145: NEG
68146: PUSH
68147: LD_INT 4
68149: NEG
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 2
68157: NEG
68158: PUSH
68159: LD_INT 3
68161: NEG
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 2
68169: NEG
68170: PUSH
68171: LD_INT 2
68173: NEG
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 3
68181: NEG
68182: PUSH
68183: LD_INT 2
68185: NEG
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 4
68193: NEG
68194: PUSH
68195: LD_INT 3
68197: NEG
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 4
68205: NEG
68206: PUSH
68207: LD_INT 4
68209: NEG
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 2
68217: NEG
68218: PUSH
68219: LD_INT 4
68221: NEG
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 4
68229: NEG
68230: PUSH
68231: LD_INT 2
68233: NEG
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 0
68241: PUSH
68242: LD_INT 4
68244: NEG
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 0
68252: PUSH
68253: LD_INT 5
68255: NEG
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 1
68263: PUSH
68264: LD_INT 4
68266: NEG
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 1
68274: PUSH
68275: LD_INT 3
68277: NEG
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 0
68285: PUSH
68286: LD_INT 3
68288: NEG
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 1
68296: NEG
68297: PUSH
68298: LD_INT 4
68300: NEG
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 1
68308: NEG
68309: PUSH
68310: LD_INT 5
68312: NEG
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 2
68320: PUSH
68321: LD_INT 3
68323: NEG
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 2
68331: NEG
68332: PUSH
68333: LD_INT 5
68335: NEG
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68388: LD_ADDR_VAR 0 31
68392: PUSH
68393: LD_INT 0
68395: PUSH
68396: LD_INT 4
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 0
68405: PUSH
68406: LD_INT 3
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 1
68415: PUSH
68416: LD_INT 4
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 1
68425: PUSH
68426: LD_INT 5
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 0
68435: PUSH
68436: LD_INT 5
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 1
68445: NEG
68446: PUSH
68447: LD_INT 4
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 1
68456: NEG
68457: PUSH
68458: LD_INT 3
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 2
68467: PUSH
68468: LD_INT 5
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: LD_INT 2
68477: NEG
68478: PUSH
68479: LD_INT 3
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 3
68488: NEG
68489: PUSH
68490: LD_INT 0
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 3
68499: NEG
68500: PUSH
68501: LD_INT 1
68503: NEG
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 2
68511: NEG
68512: PUSH
68513: LD_INT 0
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_INT 2
68522: NEG
68523: PUSH
68524: LD_INT 1
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: LD_INT 3
68533: NEG
68534: PUSH
68535: LD_INT 1
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: LD_INT 4
68544: NEG
68545: PUSH
68546: LD_INT 0
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: LD_INT 4
68555: NEG
68556: PUSH
68557: LD_INT 1
68559: NEG
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 4
68567: NEG
68568: PUSH
68569: LD_INT 2
68571: NEG
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: LD_INT 2
68579: NEG
68580: PUSH
68581: LD_INT 2
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 4
68590: NEG
68591: PUSH
68592: LD_INT 4
68594: NEG
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 4
68602: NEG
68603: PUSH
68604: LD_INT 5
68606: NEG
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 3
68614: NEG
68615: PUSH
68616: LD_INT 4
68618: NEG
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 3
68626: NEG
68627: PUSH
68628: LD_INT 3
68630: NEG
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 4
68638: NEG
68639: PUSH
68640: LD_INT 3
68642: NEG
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 5
68650: NEG
68651: PUSH
68652: LD_INT 4
68654: NEG
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 5
68662: NEG
68663: PUSH
68664: LD_INT 5
68666: NEG
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 3
68674: NEG
68675: PUSH
68676: LD_INT 5
68678: NEG
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 5
68686: NEG
68687: PUSH
68688: LD_INT 3
68690: NEG
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 0
68698: PUSH
68699: LD_INT 3
68701: NEG
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 0
68709: PUSH
68710: LD_INT 4
68712: NEG
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 1
68720: PUSH
68721: LD_INT 3
68723: NEG
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 1
68731: PUSH
68732: LD_INT 2
68734: NEG
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 0
68742: PUSH
68743: LD_INT 2
68745: NEG
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 1
68753: NEG
68754: PUSH
68755: LD_INT 3
68757: NEG
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 1
68765: NEG
68766: PUSH
68767: LD_INT 4
68769: NEG
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 2
68777: PUSH
68778: LD_INT 2
68780: NEG
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 2
68788: NEG
68789: PUSH
68790: LD_INT 4
68792: NEG
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 4
68800: PUSH
68801: LD_INT 0
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 4
68810: PUSH
68811: LD_INT 1
68813: NEG
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 5
68821: PUSH
68822: LD_INT 0
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: LD_INT 5
68831: PUSH
68832: LD_INT 1
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 4
68841: PUSH
68842: LD_INT 1
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 3
68851: PUSH
68852: LD_INT 0
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: LD_INT 3
68861: PUSH
68862: LD_INT 1
68864: NEG
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 3
68872: PUSH
68873: LD_INT 2
68875: NEG
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 5
68883: PUSH
68884: LD_INT 2
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68938: LD_ADDR_VAR 0 32
68942: PUSH
68943: LD_INT 4
68945: NEG
68946: PUSH
68947: LD_INT 0
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 4
68956: NEG
68957: PUSH
68958: LD_INT 1
68960: NEG
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 3
68968: NEG
68969: PUSH
68970: LD_INT 0
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: LD_INT 3
68979: NEG
68980: PUSH
68981: LD_INT 1
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 4
68990: NEG
68991: PUSH
68992: LD_INT 1
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 5
69001: NEG
69002: PUSH
69003: LD_INT 0
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 5
69012: NEG
69013: PUSH
69014: LD_INT 1
69016: NEG
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PUSH
69022: LD_INT 5
69024: NEG
69025: PUSH
69026: LD_INT 2
69028: NEG
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 3
69036: NEG
69037: PUSH
69038: LD_INT 2
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: LD_INT 3
69047: NEG
69048: PUSH
69049: LD_INT 3
69051: NEG
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: PUSH
69057: LD_INT 3
69059: NEG
69060: PUSH
69061: LD_INT 4
69063: NEG
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 2
69071: NEG
69072: PUSH
69073: LD_INT 3
69075: NEG
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 2
69083: NEG
69084: PUSH
69085: LD_INT 2
69087: NEG
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 3
69095: NEG
69096: PUSH
69097: LD_INT 2
69099: NEG
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: LD_INT 4
69107: NEG
69108: PUSH
69109: LD_INT 3
69111: NEG
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 4
69119: NEG
69120: PUSH
69121: LD_INT 4
69123: NEG
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 2
69131: NEG
69132: PUSH
69133: LD_INT 4
69135: NEG
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 4
69143: NEG
69144: PUSH
69145: LD_INT 2
69147: NEG
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 0
69155: PUSH
69156: LD_INT 4
69158: NEG
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 0
69166: PUSH
69167: LD_INT 5
69169: NEG
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 1
69177: PUSH
69178: LD_INT 4
69180: NEG
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 1
69188: PUSH
69189: LD_INT 3
69191: NEG
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 0
69199: PUSH
69200: LD_INT 3
69202: NEG
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 1
69210: NEG
69211: PUSH
69212: LD_INT 4
69214: NEG
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 1
69222: NEG
69223: PUSH
69224: LD_INT 5
69226: NEG
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 2
69234: PUSH
69235: LD_INT 3
69237: NEG
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 2
69245: NEG
69246: PUSH
69247: LD_INT 5
69249: NEG
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 3
69257: PUSH
69258: LD_INT 0
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 3
69267: PUSH
69268: LD_INT 1
69270: NEG
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 4
69278: PUSH
69279: LD_INT 0
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 4
69288: PUSH
69289: LD_INT 1
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 3
69298: PUSH
69299: LD_INT 1
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 2
69308: PUSH
69309: LD_INT 0
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 2
69318: PUSH
69319: LD_INT 1
69321: NEG
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 2
69329: PUSH
69330: LD_INT 2
69332: NEG
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: LD_INT 4
69340: PUSH
69341: LD_INT 2
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 4
69350: PUSH
69351: LD_INT 4
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 4
69360: PUSH
69361: LD_INT 3
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 5
69370: PUSH
69371: LD_INT 4
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 5
69380: PUSH
69381: LD_INT 5
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 4
69390: PUSH
69391: LD_INT 5
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 3
69400: PUSH
69401: LD_INT 4
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 3
69410: PUSH
69411: LD_INT 3
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 5
69420: PUSH
69421: LD_INT 3
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 3
69430: PUSH
69431: LD_INT 5
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69485: LD_ADDR_VAR 0 33
69489: PUSH
69490: LD_INT 4
69492: NEG
69493: PUSH
69494: LD_INT 4
69496: NEG
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PUSH
69502: LD_INT 4
69504: NEG
69505: PUSH
69506: LD_INT 5
69508: NEG
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PUSH
69514: LD_INT 3
69516: NEG
69517: PUSH
69518: LD_INT 4
69520: NEG
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: LD_INT 3
69528: NEG
69529: PUSH
69530: LD_INT 3
69532: NEG
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 4
69540: NEG
69541: PUSH
69542: LD_INT 3
69544: NEG
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: LD_INT 5
69552: NEG
69553: PUSH
69554: LD_INT 4
69556: NEG
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: PUSH
69562: LD_INT 5
69564: NEG
69565: PUSH
69566: LD_INT 5
69568: NEG
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 3
69576: NEG
69577: PUSH
69578: LD_INT 5
69580: NEG
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 5
69588: NEG
69589: PUSH
69590: LD_INT 3
69592: NEG
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 0
69600: PUSH
69601: LD_INT 3
69603: NEG
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 0
69611: PUSH
69612: LD_INT 4
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 1
69622: PUSH
69623: LD_INT 3
69625: NEG
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: LD_INT 1
69633: PUSH
69634: LD_INT 2
69636: NEG
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 0
69644: PUSH
69645: LD_INT 2
69647: NEG
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 1
69655: NEG
69656: PUSH
69657: LD_INT 3
69659: NEG
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 1
69667: NEG
69668: PUSH
69669: LD_INT 4
69671: NEG
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 2
69679: PUSH
69680: LD_INT 2
69682: NEG
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 2
69690: NEG
69691: PUSH
69692: LD_INT 4
69694: NEG
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 4
69702: PUSH
69703: LD_INT 0
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 4
69712: PUSH
69713: LD_INT 1
69715: NEG
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 5
69723: PUSH
69724: LD_INT 0
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 5
69733: PUSH
69734: LD_INT 1
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 4
69743: PUSH
69744: LD_INT 1
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_INT 3
69753: PUSH
69754: LD_INT 0
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PUSH
69761: LD_INT 3
69763: PUSH
69764: LD_INT 1
69766: NEG
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 3
69774: PUSH
69775: LD_INT 2
69777: NEG
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 5
69785: PUSH
69786: LD_INT 2
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 3
69795: PUSH
69796: LD_INT 3
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 3
69805: PUSH
69806: LD_INT 2
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 4
69815: PUSH
69816: LD_INT 3
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 4
69825: PUSH
69826: LD_INT 4
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 3
69835: PUSH
69836: LD_INT 4
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 2
69845: PUSH
69846: LD_INT 3
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 2
69855: PUSH
69856: LD_INT 2
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 4
69865: PUSH
69866: LD_INT 2
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 2
69875: PUSH
69876: LD_INT 4
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 0
69885: PUSH
69886: LD_INT 4
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 0
69895: PUSH
69896: LD_INT 3
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 1
69905: PUSH
69906: LD_INT 4
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 1
69915: PUSH
69916: LD_INT 5
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 0
69925: PUSH
69926: LD_INT 5
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 1
69935: NEG
69936: PUSH
69937: LD_INT 4
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: LD_INT 1
69946: NEG
69947: PUSH
69948: LD_INT 3
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 2
69957: PUSH
69958: LD_INT 5
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 2
69967: NEG
69968: PUSH
69969: LD_INT 3
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: LIST
70001: LIST
70002: LIST
70003: LIST
70004: LIST
70005: LIST
70006: LIST
70007: LIST
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: LIST
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70023: LD_ADDR_VAR 0 34
70027: PUSH
70028: LD_INT 0
70030: PUSH
70031: LD_INT 4
70033: NEG
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 0
70041: PUSH
70042: LD_INT 5
70044: NEG
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: LD_INT 1
70052: PUSH
70053: LD_INT 4
70055: NEG
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: LD_INT 1
70063: PUSH
70064: LD_INT 3
70066: NEG
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: LD_INT 0
70074: PUSH
70075: LD_INT 3
70077: NEG
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 1
70085: NEG
70086: PUSH
70087: LD_INT 4
70089: NEG
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: LD_INT 1
70097: NEG
70098: PUSH
70099: LD_INT 5
70101: NEG
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 2
70109: PUSH
70110: LD_INT 3
70112: NEG
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 2
70120: NEG
70121: PUSH
70122: LD_INT 5
70124: NEG
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 3
70132: PUSH
70133: LD_INT 0
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 3
70142: PUSH
70143: LD_INT 1
70145: NEG
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 4
70153: PUSH
70154: LD_INT 0
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 4
70163: PUSH
70164: LD_INT 1
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 3
70173: PUSH
70174: LD_INT 1
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 2
70183: PUSH
70184: LD_INT 0
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 2
70193: PUSH
70194: LD_INT 1
70196: NEG
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 2
70204: PUSH
70205: LD_INT 2
70207: NEG
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: PUSH
70213: LD_INT 4
70215: PUSH
70216: LD_INT 2
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: LD_INT 4
70225: PUSH
70226: LD_INT 4
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 4
70235: PUSH
70236: LD_INT 3
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 5
70245: PUSH
70246: LD_INT 4
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 5
70255: PUSH
70256: LD_INT 5
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 4
70265: PUSH
70266: LD_INT 5
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 3
70275: PUSH
70276: LD_INT 4
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 3
70285: PUSH
70286: LD_INT 3
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 5
70295: PUSH
70296: LD_INT 3
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 3
70305: PUSH
70306: LD_INT 5
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: LD_INT 0
70315: PUSH
70316: LD_INT 3
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: LD_INT 0
70325: PUSH
70326: LD_INT 2
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: LD_INT 1
70335: PUSH
70336: LD_INT 3
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 1
70345: PUSH
70346: LD_INT 4
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 0
70355: PUSH
70356: LD_INT 4
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 1
70365: NEG
70366: PUSH
70367: LD_INT 3
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 1
70376: NEG
70377: PUSH
70378: LD_INT 2
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 2
70387: PUSH
70388: LD_INT 4
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 2
70397: NEG
70398: PUSH
70399: LD_INT 2
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PUSH
70406: LD_INT 4
70408: NEG
70409: PUSH
70410: LD_INT 0
70412: PUSH
70413: EMPTY
70414: LIST
70415: LIST
70416: PUSH
70417: LD_INT 4
70419: NEG
70420: PUSH
70421: LD_INT 1
70423: NEG
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: LD_INT 3
70431: NEG
70432: PUSH
70433: LD_INT 0
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 3
70442: NEG
70443: PUSH
70444: LD_INT 1
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 4
70453: NEG
70454: PUSH
70455: LD_INT 1
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 5
70464: NEG
70465: PUSH
70466: LD_INT 0
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 5
70475: NEG
70476: PUSH
70477: LD_INT 1
70479: NEG
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: LD_INT 5
70487: NEG
70488: PUSH
70489: LD_INT 2
70491: NEG
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 3
70499: NEG
70500: PUSH
70501: LD_INT 2
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: ST_TO_ADDR
// end ; end ;
70555: GO 70558
70557: POP
// case btype of b_depot , b_warehouse :
70558: LD_VAR 0 1
70562: PUSH
70563: LD_INT 0
70565: DOUBLE
70566: EQUAL
70567: IFTRUE 70577
70569: LD_INT 1
70571: DOUBLE
70572: EQUAL
70573: IFTRUE 70577
70575: GO 70778
70577: POP
// case nation of nation_american :
70578: LD_VAR 0 5
70582: PUSH
70583: LD_INT 1
70585: DOUBLE
70586: EQUAL
70587: IFTRUE 70591
70589: GO 70647
70591: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70592: LD_ADDR_VAR 0 9
70596: PUSH
70597: LD_VAR 0 11
70601: PUSH
70602: LD_VAR 0 12
70606: PUSH
70607: LD_VAR 0 13
70611: PUSH
70612: LD_VAR 0 14
70616: PUSH
70617: LD_VAR 0 15
70621: PUSH
70622: LD_VAR 0 16
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: PUSH
70635: LD_VAR 0 4
70639: PUSH
70640: LD_INT 1
70642: PLUS
70643: ARRAY
70644: ST_TO_ADDR
70645: GO 70776
70647: LD_INT 2
70649: DOUBLE
70650: EQUAL
70651: IFTRUE 70655
70653: GO 70711
70655: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70656: LD_ADDR_VAR 0 9
70660: PUSH
70661: LD_VAR 0 17
70665: PUSH
70666: LD_VAR 0 18
70670: PUSH
70671: LD_VAR 0 19
70675: PUSH
70676: LD_VAR 0 20
70680: PUSH
70681: LD_VAR 0 21
70685: PUSH
70686: LD_VAR 0 22
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: PUSH
70699: LD_VAR 0 4
70703: PUSH
70704: LD_INT 1
70706: PLUS
70707: ARRAY
70708: ST_TO_ADDR
70709: GO 70776
70711: LD_INT 3
70713: DOUBLE
70714: EQUAL
70715: IFTRUE 70719
70717: GO 70775
70719: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70720: LD_ADDR_VAR 0 9
70724: PUSH
70725: LD_VAR 0 23
70729: PUSH
70730: LD_VAR 0 24
70734: PUSH
70735: LD_VAR 0 25
70739: PUSH
70740: LD_VAR 0 26
70744: PUSH
70745: LD_VAR 0 27
70749: PUSH
70750: LD_VAR 0 28
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: PUSH
70763: LD_VAR 0 4
70767: PUSH
70768: LD_INT 1
70770: PLUS
70771: ARRAY
70772: ST_TO_ADDR
70773: GO 70776
70775: POP
70776: GO 71331
70778: LD_INT 2
70780: DOUBLE
70781: EQUAL
70782: IFTRUE 70792
70784: LD_INT 3
70786: DOUBLE
70787: EQUAL
70788: IFTRUE 70792
70790: GO 70848
70792: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70793: LD_ADDR_VAR 0 9
70797: PUSH
70798: LD_VAR 0 29
70802: PUSH
70803: LD_VAR 0 30
70807: PUSH
70808: LD_VAR 0 31
70812: PUSH
70813: LD_VAR 0 32
70817: PUSH
70818: LD_VAR 0 33
70822: PUSH
70823: LD_VAR 0 34
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: PUSH
70836: LD_VAR 0 4
70840: PUSH
70841: LD_INT 1
70843: PLUS
70844: ARRAY
70845: ST_TO_ADDR
70846: GO 71331
70848: LD_INT 16
70850: DOUBLE
70851: EQUAL
70852: IFTRUE 70910
70854: LD_INT 17
70856: DOUBLE
70857: EQUAL
70858: IFTRUE 70910
70860: LD_INT 18
70862: DOUBLE
70863: EQUAL
70864: IFTRUE 70910
70866: LD_INT 19
70868: DOUBLE
70869: EQUAL
70870: IFTRUE 70910
70872: LD_INT 22
70874: DOUBLE
70875: EQUAL
70876: IFTRUE 70910
70878: LD_INT 20
70880: DOUBLE
70881: EQUAL
70882: IFTRUE 70910
70884: LD_INT 21
70886: DOUBLE
70887: EQUAL
70888: IFTRUE 70910
70890: LD_INT 23
70892: DOUBLE
70893: EQUAL
70894: IFTRUE 70910
70896: LD_INT 24
70898: DOUBLE
70899: EQUAL
70900: IFTRUE 70910
70902: LD_INT 25
70904: DOUBLE
70905: EQUAL
70906: IFTRUE 70910
70908: GO 70966
70910: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70911: LD_ADDR_VAR 0 9
70915: PUSH
70916: LD_VAR 0 35
70920: PUSH
70921: LD_VAR 0 36
70925: PUSH
70926: LD_VAR 0 37
70930: PUSH
70931: LD_VAR 0 38
70935: PUSH
70936: LD_VAR 0 39
70940: PUSH
70941: LD_VAR 0 40
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: PUSH
70954: LD_VAR 0 4
70958: PUSH
70959: LD_INT 1
70961: PLUS
70962: ARRAY
70963: ST_TO_ADDR
70964: GO 71331
70966: LD_INT 6
70968: DOUBLE
70969: EQUAL
70970: IFTRUE 71022
70972: LD_INT 7
70974: DOUBLE
70975: EQUAL
70976: IFTRUE 71022
70978: LD_INT 8
70980: DOUBLE
70981: EQUAL
70982: IFTRUE 71022
70984: LD_INT 13
70986: DOUBLE
70987: EQUAL
70988: IFTRUE 71022
70990: LD_INT 12
70992: DOUBLE
70993: EQUAL
70994: IFTRUE 71022
70996: LD_INT 15
70998: DOUBLE
70999: EQUAL
71000: IFTRUE 71022
71002: LD_INT 11
71004: DOUBLE
71005: EQUAL
71006: IFTRUE 71022
71008: LD_INT 14
71010: DOUBLE
71011: EQUAL
71012: IFTRUE 71022
71014: LD_INT 10
71016: DOUBLE
71017: EQUAL
71018: IFTRUE 71022
71020: GO 71078
71022: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71023: LD_ADDR_VAR 0 9
71027: PUSH
71028: LD_VAR 0 41
71032: PUSH
71033: LD_VAR 0 42
71037: PUSH
71038: LD_VAR 0 43
71042: PUSH
71043: LD_VAR 0 44
71047: PUSH
71048: LD_VAR 0 45
71052: PUSH
71053: LD_VAR 0 46
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: PUSH
71066: LD_VAR 0 4
71070: PUSH
71071: LD_INT 1
71073: PLUS
71074: ARRAY
71075: ST_TO_ADDR
71076: GO 71331
71078: LD_INT 36
71080: DOUBLE
71081: EQUAL
71082: IFTRUE 71086
71084: GO 71142
71086: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71087: LD_ADDR_VAR 0 9
71091: PUSH
71092: LD_VAR 0 47
71096: PUSH
71097: LD_VAR 0 48
71101: PUSH
71102: LD_VAR 0 49
71106: PUSH
71107: LD_VAR 0 50
71111: PUSH
71112: LD_VAR 0 51
71116: PUSH
71117: LD_VAR 0 52
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: PUSH
71130: LD_VAR 0 4
71134: PUSH
71135: LD_INT 1
71137: PLUS
71138: ARRAY
71139: ST_TO_ADDR
71140: GO 71331
71142: LD_INT 4
71144: DOUBLE
71145: EQUAL
71146: IFTRUE 71168
71148: LD_INT 5
71150: DOUBLE
71151: EQUAL
71152: IFTRUE 71168
71154: LD_INT 34
71156: DOUBLE
71157: EQUAL
71158: IFTRUE 71168
71160: LD_INT 37
71162: DOUBLE
71163: EQUAL
71164: IFTRUE 71168
71166: GO 71224
71168: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71169: LD_ADDR_VAR 0 9
71173: PUSH
71174: LD_VAR 0 53
71178: PUSH
71179: LD_VAR 0 54
71183: PUSH
71184: LD_VAR 0 55
71188: PUSH
71189: LD_VAR 0 56
71193: PUSH
71194: LD_VAR 0 57
71198: PUSH
71199: LD_VAR 0 58
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: PUSH
71212: LD_VAR 0 4
71216: PUSH
71217: LD_INT 1
71219: PLUS
71220: ARRAY
71221: ST_TO_ADDR
71222: GO 71331
71224: LD_INT 31
71226: DOUBLE
71227: EQUAL
71228: IFTRUE 71274
71230: LD_INT 32
71232: DOUBLE
71233: EQUAL
71234: IFTRUE 71274
71236: LD_INT 33
71238: DOUBLE
71239: EQUAL
71240: IFTRUE 71274
71242: LD_INT 27
71244: DOUBLE
71245: EQUAL
71246: IFTRUE 71274
71248: LD_INT 26
71250: DOUBLE
71251: EQUAL
71252: IFTRUE 71274
71254: LD_INT 28
71256: DOUBLE
71257: EQUAL
71258: IFTRUE 71274
71260: LD_INT 29
71262: DOUBLE
71263: EQUAL
71264: IFTRUE 71274
71266: LD_INT 30
71268: DOUBLE
71269: EQUAL
71270: IFTRUE 71274
71272: GO 71330
71274: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71275: LD_ADDR_VAR 0 9
71279: PUSH
71280: LD_VAR 0 59
71284: PUSH
71285: LD_VAR 0 60
71289: PUSH
71290: LD_VAR 0 61
71294: PUSH
71295: LD_VAR 0 62
71299: PUSH
71300: LD_VAR 0 63
71304: PUSH
71305: LD_VAR 0 64
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: PUSH
71318: LD_VAR 0 4
71322: PUSH
71323: LD_INT 1
71325: PLUS
71326: ARRAY
71327: ST_TO_ADDR
71328: GO 71331
71330: POP
// temp_list2 = [ ] ;
71331: LD_ADDR_VAR 0 10
71335: PUSH
71336: EMPTY
71337: ST_TO_ADDR
// for i in temp_list do
71338: LD_ADDR_VAR 0 8
71342: PUSH
71343: LD_VAR 0 9
71347: PUSH
71348: FOR_IN
71349: IFFALSE 71401
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71351: LD_ADDR_VAR 0 10
71355: PUSH
71356: LD_VAR 0 10
71360: PUSH
71361: LD_VAR 0 8
71365: PUSH
71366: LD_INT 1
71368: ARRAY
71369: PUSH
71370: LD_VAR 0 2
71374: PLUS
71375: PUSH
71376: LD_VAR 0 8
71380: PUSH
71381: LD_INT 2
71383: ARRAY
71384: PUSH
71385: LD_VAR 0 3
71389: PLUS
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: PUSH
71395: EMPTY
71396: LIST
71397: ADD
71398: ST_TO_ADDR
71399: GO 71348
71401: POP
71402: POP
// result = temp_list2 ;
71403: LD_ADDR_VAR 0 7
71407: PUSH
71408: LD_VAR 0 10
71412: ST_TO_ADDR
// end ;
71413: LD_VAR 0 7
71417: RET
// export function EnemyInRange ( unit , dist ) ; begin
71418: LD_INT 0
71420: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71421: LD_ADDR_VAR 0 3
71425: PUSH
71426: LD_VAR 0 1
71430: PPUSH
71431: CALL_OW 255
71435: PPUSH
71436: LD_VAR 0 1
71440: PPUSH
71441: CALL_OW 250
71445: PPUSH
71446: LD_VAR 0 1
71450: PPUSH
71451: CALL_OW 251
71455: PPUSH
71456: LD_VAR 0 2
71460: PPUSH
71461: CALL 44814 0 4
71465: PUSH
71466: LD_INT 4
71468: ARRAY
71469: ST_TO_ADDR
// end ;
71470: LD_VAR 0 3
71474: RET
// export function PlayerSeeMe ( unit ) ; begin
71475: LD_INT 0
71477: PPUSH
// result := See ( your_side , unit ) ;
71478: LD_ADDR_VAR 0 2
71482: PUSH
71483: LD_OWVAR 2
71487: PPUSH
71488: LD_VAR 0 1
71492: PPUSH
71493: CALL_OW 292
71497: ST_TO_ADDR
// end ;
71498: LD_VAR 0 2
71502: RET
// export function ReverseDir ( unit ) ; begin
71503: LD_INT 0
71505: PPUSH
// if not unit then
71506: LD_VAR 0 1
71510: NOT
71511: IFFALSE 71515
// exit ;
71513: GO 71538
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71515: LD_ADDR_VAR 0 2
71519: PUSH
71520: LD_VAR 0 1
71524: PPUSH
71525: CALL_OW 254
71529: PUSH
71530: LD_INT 3
71532: PLUS
71533: PUSH
71534: LD_INT 6
71536: MOD
71537: ST_TO_ADDR
// end ;
71538: LD_VAR 0 2
71542: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71543: LD_INT 0
71545: PPUSH
71546: PPUSH
71547: PPUSH
71548: PPUSH
71549: PPUSH
// if not hexes then
71550: LD_VAR 0 2
71554: NOT
71555: IFFALSE 71559
// exit ;
71557: GO 71707
// dist := 9999 ;
71559: LD_ADDR_VAR 0 5
71563: PUSH
71564: LD_INT 9999
71566: ST_TO_ADDR
// for i = 1 to hexes do
71567: LD_ADDR_VAR 0 4
71571: PUSH
71572: DOUBLE
71573: LD_INT 1
71575: DEC
71576: ST_TO_ADDR
71577: LD_VAR 0 2
71581: PUSH
71582: FOR_TO
71583: IFFALSE 71695
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71585: LD_VAR 0 1
71589: PPUSH
71590: LD_VAR 0 2
71594: PUSH
71595: LD_VAR 0 4
71599: ARRAY
71600: PUSH
71601: LD_INT 1
71603: ARRAY
71604: PPUSH
71605: LD_VAR 0 2
71609: PUSH
71610: LD_VAR 0 4
71614: ARRAY
71615: PUSH
71616: LD_INT 2
71618: ARRAY
71619: PPUSH
71620: CALL_OW 297
71624: PUSH
71625: LD_VAR 0 5
71629: LESS
71630: IFFALSE 71693
// begin hex := hexes [ i ] ;
71632: LD_ADDR_VAR 0 7
71636: PUSH
71637: LD_VAR 0 2
71641: PUSH
71642: LD_VAR 0 4
71646: ARRAY
71647: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71648: LD_ADDR_VAR 0 5
71652: PUSH
71653: LD_VAR 0 1
71657: PPUSH
71658: LD_VAR 0 2
71662: PUSH
71663: LD_VAR 0 4
71667: ARRAY
71668: PUSH
71669: LD_INT 1
71671: ARRAY
71672: PPUSH
71673: LD_VAR 0 2
71677: PUSH
71678: LD_VAR 0 4
71682: ARRAY
71683: PUSH
71684: LD_INT 2
71686: ARRAY
71687: PPUSH
71688: CALL_OW 297
71692: ST_TO_ADDR
// end ; end ;
71693: GO 71582
71695: POP
71696: POP
// result := hex ;
71697: LD_ADDR_VAR 0 3
71701: PUSH
71702: LD_VAR 0 7
71706: ST_TO_ADDR
// end ;
71707: LD_VAR 0 3
71711: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71712: LD_INT 0
71714: PPUSH
71715: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71716: LD_VAR 0 1
71720: NOT
71721: PUSH
71722: LD_VAR 0 1
71726: PUSH
71727: LD_INT 21
71729: PUSH
71730: LD_INT 2
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_INT 23
71739: PUSH
71740: LD_INT 2
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PPUSH
71751: CALL_OW 69
71755: IN
71756: NOT
71757: OR
71758: IFFALSE 71762
// exit ;
71760: GO 71809
// for i = 1 to 3 do
71762: LD_ADDR_VAR 0 3
71766: PUSH
71767: DOUBLE
71768: LD_INT 1
71770: DEC
71771: ST_TO_ADDR
71772: LD_INT 3
71774: PUSH
71775: FOR_TO
71776: IFFALSE 71807
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71778: LD_VAR 0 1
71782: PPUSH
71783: CALL_OW 250
71787: PPUSH
71788: LD_VAR 0 1
71792: PPUSH
71793: CALL_OW 251
71797: PPUSH
71798: LD_INT 1
71800: PPUSH
71801: CALL_OW 453
71805: GO 71775
71807: POP
71808: POP
// end ;
71809: LD_VAR 0 2
71813: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71814: LD_INT 0
71816: PPUSH
71817: PPUSH
71818: PPUSH
71819: PPUSH
71820: PPUSH
71821: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71822: LD_VAR 0 1
71826: NOT
71827: PUSH
71828: LD_VAR 0 2
71832: NOT
71833: OR
71834: PUSH
71835: LD_VAR 0 1
71839: PPUSH
71840: CALL_OW 314
71844: OR
71845: IFFALSE 71849
// exit ;
71847: GO 72290
// x := GetX ( enemy_unit ) ;
71849: LD_ADDR_VAR 0 7
71853: PUSH
71854: LD_VAR 0 2
71858: PPUSH
71859: CALL_OW 250
71863: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71864: LD_ADDR_VAR 0 8
71868: PUSH
71869: LD_VAR 0 2
71873: PPUSH
71874: CALL_OW 251
71878: ST_TO_ADDR
// if not x or not y then
71879: LD_VAR 0 7
71883: NOT
71884: PUSH
71885: LD_VAR 0 8
71889: NOT
71890: OR
71891: IFFALSE 71895
// exit ;
71893: GO 72290
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71895: LD_ADDR_VAR 0 6
71899: PUSH
71900: LD_VAR 0 7
71904: PPUSH
71905: LD_INT 0
71907: PPUSH
71908: LD_INT 4
71910: PPUSH
71911: CALL_OW 272
71915: PUSH
71916: LD_VAR 0 8
71920: PPUSH
71921: LD_INT 0
71923: PPUSH
71924: LD_INT 4
71926: PPUSH
71927: CALL_OW 273
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PUSH
71936: LD_VAR 0 7
71940: PPUSH
71941: LD_INT 1
71943: PPUSH
71944: LD_INT 4
71946: PPUSH
71947: CALL_OW 272
71951: PUSH
71952: LD_VAR 0 8
71956: PPUSH
71957: LD_INT 1
71959: PPUSH
71960: LD_INT 4
71962: PPUSH
71963: CALL_OW 273
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PUSH
71972: LD_VAR 0 7
71976: PPUSH
71977: LD_INT 2
71979: PPUSH
71980: LD_INT 4
71982: PPUSH
71983: CALL_OW 272
71987: PUSH
71988: LD_VAR 0 8
71992: PPUSH
71993: LD_INT 2
71995: PPUSH
71996: LD_INT 4
71998: PPUSH
71999: CALL_OW 273
72003: PUSH
72004: EMPTY
72005: LIST
72006: LIST
72007: PUSH
72008: LD_VAR 0 7
72012: PPUSH
72013: LD_INT 3
72015: PPUSH
72016: LD_INT 4
72018: PPUSH
72019: CALL_OW 272
72023: PUSH
72024: LD_VAR 0 8
72028: PPUSH
72029: LD_INT 3
72031: PPUSH
72032: LD_INT 4
72034: PPUSH
72035: CALL_OW 273
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: PUSH
72044: LD_VAR 0 7
72048: PPUSH
72049: LD_INT 4
72051: PPUSH
72052: LD_INT 4
72054: PPUSH
72055: CALL_OW 272
72059: PUSH
72060: LD_VAR 0 8
72064: PPUSH
72065: LD_INT 4
72067: PPUSH
72068: LD_INT 4
72070: PPUSH
72071: CALL_OW 273
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: PUSH
72080: LD_VAR 0 7
72084: PPUSH
72085: LD_INT 5
72087: PPUSH
72088: LD_INT 4
72090: PPUSH
72091: CALL_OW 272
72095: PUSH
72096: LD_VAR 0 8
72100: PPUSH
72101: LD_INT 5
72103: PPUSH
72104: LD_INT 4
72106: PPUSH
72107: CALL_OW 273
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: ST_TO_ADDR
// for i = tmp downto 1 do
72124: LD_ADDR_VAR 0 4
72128: PUSH
72129: DOUBLE
72130: LD_VAR 0 6
72134: INC
72135: ST_TO_ADDR
72136: LD_INT 1
72138: PUSH
72139: FOR_DOWNTO
72140: IFFALSE 72241
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72142: LD_VAR 0 6
72146: PUSH
72147: LD_VAR 0 4
72151: ARRAY
72152: PUSH
72153: LD_INT 1
72155: ARRAY
72156: PPUSH
72157: LD_VAR 0 6
72161: PUSH
72162: LD_VAR 0 4
72166: ARRAY
72167: PUSH
72168: LD_INT 2
72170: ARRAY
72171: PPUSH
72172: CALL_OW 488
72176: NOT
72177: PUSH
72178: LD_VAR 0 6
72182: PUSH
72183: LD_VAR 0 4
72187: ARRAY
72188: PUSH
72189: LD_INT 1
72191: ARRAY
72192: PPUSH
72193: LD_VAR 0 6
72197: PUSH
72198: LD_VAR 0 4
72202: ARRAY
72203: PUSH
72204: LD_INT 2
72206: ARRAY
72207: PPUSH
72208: CALL_OW 428
72212: PUSH
72213: LD_INT 0
72215: NONEQUAL
72216: OR
72217: IFFALSE 72239
// tmp := Delete ( tmp , i ) ;
72219: LD_ADDR_VAR 0 6
72223: PUSH
72224: LD_VAR 0 6
72228: PPUSH
72229: LD_VAR 0 4
72233: PPUSH
72234: CALL_OW 3
72238: ST_TO_ADDR
72239: GO 72139
72241: POP
72242: POP
// j := GetClosestHex ( unit , tmp ) ;
72243: LD_ADDR_VAR 0 5
72247: PUSH
72248: LD_VAR 0 1
72252: PPUSH
72253: LD_VAR 0 6
72257: PPUSH
72258: CALL 71543 0 2
72262: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72263: LD_VAR 0 1
72267: PPUSH
72268: LD_VAR 0 5
72272: PUSH
72273: LD_INT 1
72275: ARRAY
72276: PPUSH
72277: LD_VAR 0 5
72281: PUSH
72282: LD_INT 2
72284: ARRAY
72285: PPUSH
72286: CALL_OW 111
// end ;
72290: LD_VAR 0 3
72294: RET
// export function PrepareApemanSoldier ( ) ; begin
72295: LD_INT 0
72297: PPUSH
// uc_nation := 0 ;
72298: LD_ADDR_OWVAR 21
72302: PUSH
72303: LD_INT 0
72305: ST_TO_ADDR
// hc_sex := sex_male ;
72306: LD_ADDR_OWVAR 27
72310: PUSH
72311: LD_INT 1
72313: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72314: LD_ADDR_OWVAR 28
72318: PUSH
72319: LD_INT 15
72321: ST_TO_ADDR
// hc_gallery :=  ;
72322: LD_ADDR_OWVAR 33
72326: PUSH
72327: LD_STRING 
72329: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72330: LD_ADDR_OWVAR 31
72334: PUSH
72335: LD_INT 0
72337: PPUSH
72338: LD_INT 3
72340: PPUSH
72341: CALL_OW 12
72345: PUSH
72346: LD_INT 0
72348: PPUSH
72349: LD_INT 3
72351: PPUSH
72352: CALL_OW 12
72356: PUSH
72357: LD_INT 0
72359: PUSH
72360: LD_INT 0
72362: PUSH
72363: EMPTY
72364: LIST
72365: LIST
72366: LIST
72367: LIST
72368: ST_TO_ADDR
// end ;
72369: LD_VAR 0 1
72373: RET
// export function PrepareApemanEngineer ( ) ; begin
72374: LD_INT 0
72376: PPUSH
// uc_nation := 0 ;
72377: LD_ADDR_OWVAR 21
72381: PUSH
72382: LD_INT 0
72384: ST_TO_ADDR
// hc_sex := sex_male ;
72385: LD_ADDR_OWVAR 27
72389: PUSH
72390: LD_INT 1
72392: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72393: LD_ADDR_OWVAR 28
72397: PUSH
72398: LD_INT 16
72400: ST_TO_ADDR
// hc_gallery :=  ;
72401: LD_ADDR_OWVAR 33
72405: PUSH
72406: LD_STRING 
72408: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72409: LD_ADDR_OWVAR 31
72413: PUSH
72414: LD_INT 0
72416: PPUSH
72417: LD_INT 3
72419: PPUSH
72420: CALL_OW 12
72424: PUSH
72425: LD_INT 0
72427: PPUSH
72428: LD_INT 3
72430: PPUSH
72431: CALL_OW 12
72435: PUSH
72436: LD_INT 0
72438: PUSH
72439: LD_INT 0
72441: PUSH
72442: EMPTY
72443: LIST
72444: LIST
72445: LIST
72446: LIST
72447: ST_TO_ADDR
// end ;
72448: LD_VAR 0 1
72452: RET
// export function PrepareApeman ( agressivity ) ; begin
72453: LD_INT 0
72455: PPUSH
// uc_side := 0 ;
72456: LD_ADDR_OWVAR 20
72460: PUSH
72461: LD_INT 0
72463: ST_TO_ADDR
// uc_nation := 0 ;
72464: LD_ADDR_OWVAR 21
72468: PUSH
72469: LD_INT 0
72471: ST_TO_ADDR
// hc_sex := sex_male ;
72472: LD_ADDR_OWVAR 27
72476: PUSH
72477: LD_INT 1
72479: ST_TO_ADDR
// hc_class := class_apeman ;
72480: LD_ADDR_OWVAR 28
72484: PUSH
72485: LD_INT 12
72487: ST_TO_ADDR
// hc_gallery :=  ;
72488: LD_ADDR_OWVAR 33
72492: PUSH
72493: LD_STRING 
72495: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72496: LD_ADDR_OWVAR 35
72500: PUSH
72501: LD_VAR 0 1
72505: NEG
72506: PPUSH
72507: LD_VAR 0 1
72511: PPUSH
72512: CALL_OW 12
72516: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72517: LD_ADDR_OWVAR 31
72521: PUSH
72522: LD_INT 0
72524: PPUSH
72525: LD_INT 3
72527: PPUSH
72528: CALL_OW 12
72532: PUSH
72533: LD_INT 0
72535: PPUSH
72536: LD_INT 3
72538: PPUSH
72539: CALL_OW 12
72543: PUSH
72544: LD_INT 0
72546: PUSH
72547: LD_INT 0
72549: PUSH
72550: EMPTY
72551: LIST
72552: LIST
72553: LIST
72554: LIST
72555: ST_TO_ADDR
// end ;
72556: LD_VAR 0 2
72560: RET
// export function PrepareTiger ( agressivity ) ; begin
72561: LD_INT 0
72563: PPUSH
// uc_side := 0 ;
72564: LD_ADDR_OWVAR 20
72568: PUSH
72569: LD_INT 0
72571: ST_TO_ADDR
// uc_nation := 0 ;
72572: LD_ADDR_OWVAR 21
72576: PUSH
72577: LD_INT 0
72579: ST_TO_ADDR
// hc_class := class_tiger ;
72580: LD_ADDR_OWVAR 28
72584: PUSH
72585: LD_INT 14
72587: ST_TO_ADDR
// hc_gallery :=  ;
72588: LD_ADDR_OWVAR 33
72592: PUSH
72593: LD_STRING 
72595: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72596: LD_ADDR_OWVAR 35
72600: PUSH
72601: LD_VAR 0 1
72605: NEG
72606: PPUSH
72607: LD_VAR 0 1
72611: PPUSH
72612: CALL_OW 12
72616: ST_TO_ADDR
// end ;
72617: LD_VAR 0 2
72621: RET
// export function PrepareEnchidna ( ) ; begin
72622: LD_INT 0
72624: PPUSH
// uc_side := 0 ;
72625: LD_ADDR_OWVAR 20
72629: PUSH
72630: LD_INT 0
72632: ST_TO_ADDR
// uc_nation := 0 ;
72633: LD_ADDR_OWVAR 21
72637: PUSH
72638: LD_INT 0
72640: ST_TO_ADDR
// hc_class := class_baggie ;
72641: LD_ADDR_OWVAR 28
72645: PUSH
72646: LD_INT 13
72648: ST_TO_ADDR
// hc_gallery :=  ;
72649: LD_ADDR_OWVAR 33
72653: PUSH
72654: LD_STRING 
72656: ST_TO_ADDR
// end ;
72657: LD_VAR 0 1
72661: RET
// export function PrepareFrog ( ) ; begin
72662: LD_INT 0
72664: PPUSH
// uc_side := 0 ;
72665: LD_ADDR_OWVAR 20
72669: PUSH
72670: LD_INT 0
72672: ST_TO_ADDR
// uc_nation := 0 ;
72673: LD_ADDR_OWVAR 21
72677: PUSH
72678: LD_INT 0
72680: ST_TO_ADDR
// hc_class := class_frog ;
72681: LD_ADDR_OWVAR 28
72685: PUSH
72686: LD_INT 19
72688: ST_TO_ADDR
// hc_gallery :=  ;
72689: LD_ADDR_OWVAR 33
72693: PUSH
72694: LD_STRING 
72696: ST_TO_ADDR
// end ;
72697: LD_VAR 0 1
72701: RET
// export function PrepareFish ( ) ; begin
72702: LD_INT 0
72704: PPUSH
// uc_side := 0 ;
72705: LD_ADDR_OWVAR 20
72709: PUSH
72710: LD_INT 0
72712: ST_TO_ADDR
// uc_nation := 0 ;
72713: LD_ADDR_OWVAR 21
72717: PUSH
72718: LD_INT 0
72720: ST_TO_ADDR
// hc_class := class_fish ;
72721: LD_ADDR_OWVAR 28
72725: PUSH
72726: LD_INT 20
72728: ST_TO_ADDR
// hc_gallery :=  ;
72729: LD_ADDR_OWVAR 33
72733: PUSH
72734: LD_STRING 
72736: ST_TO_ADDR
// end ;
72737: LD_VAR 0 1
72741: RET
// export function PrepareBird ( ) ; begin
72742: LD_INT 0
72744: PPUSH
// uc_side := 0 ;
72745: LD_ADDR_OWVAR 20
72749: PUSH
72750: LD_INT 0
72752: ST_TO_ADDR
// uc_nation := 0 ;
72753: LD_ADDR_OWVAR 21
72757: PUSH
72758: LD_INT 0
72760: ST_TO_ADDR
// hc_class := class_phororhacos ;
72761: LD_ADDR_OWVAR 28
72765: PUSH
72766: LD_INT 18
72768: ST_TO_ADDR
// hc_gallery :=  ;
72769: LD_ADDR_OWVAR 33
72773: PUSH
72774: LD_STRING 
72776: ST_TO_ADDR
// end ;
72777: LD_VAR 0 1
72781: RET
// export function PrepareHorse ( ) ; begin
72782: LD_INT 0
72784: PPUSH
// uc_side := 0 ;
72785: LD_ADDR_OWVAR 20
72789: PUSH
72790: LD_INT 0
72792: ST_TO_ADDR
// uc_nation := 0 ;
72793: LD_ADDR_OWVAR 21
72797: PUSH
72798: LD_INT 0
72800: ST_TO_ADDR
// hc_class := class_horse ;
72801: LD_ADDR_OWVAR 28
72805: PUSH
72806: LD_INT 21
72808: ST_TO_ADDR
// hc_gallery :=  ;
72809: LD_ADDR_OWVAR 33
72813: PUSH
72814: LD_STRING 
72816: ST_TO_ADDR
// end ;
72817: LD_VAR 0 1
72821: RET
// export function PrepareMastodont ( ) ; begin
72822: LD_INT 0
72824: PPUSH
// uc_side := 0 ;
72825: LD_ADDR_OWVAR 20
72829: PUSH
72830: LD_INT 0
72832: ST_TO_ADDR
// uc_nation := 0 ;
72833: LD_ADDR_OWVAR 21
72837: PUSH
72838: LD_INT 0
72840: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72841: LD_ADDR_OWVAR 37
72845: PUSH
72846: LD_INT 31
72848: ST_TO_ADDR
// vc_control := control_rider ;
72849: LD_ADDR_OWVAR 38
72853: PUSH
72854: LD_INT 4
72856: ST_TO_ADDR
// end ;
72857: LD_VAR 0 1
72861: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72862: LD_INT 0
72864: PPUSH
72865: PPUSH
72866: PPUSH
// uc_side = 0 ;
72867: LD_ADDR_OWVAR 20
72871: PUSH
72872: LD_INT 0
72874: ST_TO_ADDR
// uc_nation = 0 ;
72875: LD_ADDR_OWVAR 21
72879: PUSH
72880: LD_INT 0
72882: ST_TO_ADDR
// InitHc_All ( ) ;
72883: CALL_OW 584
// InitVc ;
72887: CALL_OW 20
// if mastodonts then
72891: LD_VAR 0 6
72895: IFFALSE 72962
// for i = 1 to mastodonts do
72897: LD_ADDR_VAR 0 11
72901: PUSH
72902: DOUBLE
72903: LD_INT 1
72905: DEC
72906: ST_TO_ADDR
72907: LD_VAR 0 6
72911: PUSH
72912: FOR_TO
72913: IFFALSE 72960
// begin vc_chassis := 31 ;
72915: LD_ADDR_OWVAR 37
72919: PUSH
72920: LD_INT 31
72922: ST_TO_ADDR
// vc_control := control_rider ;
72923: LD_ADDR_OWVAR 38
72927: PUSH
72928: LD_INT 4
72930: ST_TO_ADDR
// animal := CreateVehicle ;
72931: LD_ADDR_VAR 0 12
72935: PUSH
72936: CALL_OW 45
72940: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72941: LD_VAR 0 12
72945: PPUSH
72946: LD_VAR 0 8
72950: PPUSH
72951: LD_INT 0
72953: PPUSH
72954: CALL 75097 0 3
// end ;
72958: GO 72912
72960: POP
72961: POP
// if horses then
72962: LD_VAR 0 5
72966: IFFALSE 73033
// for i = 1 to horses do
72968: LD_ADDR_VAR 0 11
72972: PUSH
72973: DOUBLE
72974: LD_INT 1
72976: DEC
72977: ST_TO_ADDR
72978: LD_VAR 0 5
72982: PUSH
72983: FOR_TO
72984: IFFALSE 73031
// begin hc_class := 21 ;
72986: LD_ADDR_OWVAR 28
72990: PUSH
72991: LD_INT 21
72993: ST_TO_ADDR
// hc_gallery :=  ;
72994: LD_ADDR_OWVAR 33
72998: PUSH
72999: LD_STRING 
73001: ST_TO_ADDR
// animal := CreateHuman ;
73002: LD_ADDR_VAR 0 12
73006: PUSH
73007: CALL_OW 44
73011: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73012: LD_VAR 0 12
73016: PPUSH
73017: LD_VAR 0 8
73021: PPUSH
73022: LD_INT 0
73024: PPUSH
73025: CALL 75097 0 3
// end ;
73029: GO 72983
73031: POP
73032: POP
// if birds then
73033: LD_VAR 0 1
73037: IFFALSE 73104
// for i = 1 to birds do
73039: LD_ADDR_VAR 0 11
73043: PUSH
73044: DOUBLE
73045: LD_INT 1
73047: DEC
73048: ST_TO_ADDR
73049: LD_VAR 0 1
73053: PUSH
73054: FOR_TO
73055: IFFALSE 73102
// begin hc_class = 18 ;
73057: LD_ADDR_OWVAR 28
73061: PUSH
73062: LD_INT 18
73064: ST_TO_ADDR
// hc_gallery =  ;
73065: LD_ADDR_OWVAR 33
73069: PUSH
73070: LD_STRING 
73072: ST_TO_ADDR
// animal := CreateHuman ;
73073: LD_ADDR_VAR 0 12
73077: PUSH
73078: CALL_OW 44
73082: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73083: LD_VAR 0 12
73087: PPUSH
73088: LD_VAR 0 8
73092: PPUSH
73093: LD_INT 0
73095: PPUSH
73096: CALL 75097 0 3
// end ;
73100: GO 73054
73102: POP
73103: POP
// if tigers then
73104: LD_VAR 0 2
73108: IFFALSE 73192
// for i = 1 to tigers do
73110: LD_ADDR_VAR 0 11
73114: PUSH
73115: DOUBLE
73116: LD_INT 1
73118: DEC
73119: ST_TO_ADDR
73120: LD_VAR 0 2
73124: PUSH
73125: FOR_TO
73126: IFFALSE 73190
// begin hc_class = class_tiger ;
73128: LD_ADDR_OWVAR 28
73132: PUSH
73133: LD_INT 14
73135: ST_TO_ADDR
// hc_gallery =  ;
73136: LD_ADDR_OWVAR 33
73140: PUSH
73141: LD_STRING 
73143: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73144: LD_ADDR_OWVAR 35
73148: PUSH
73149: LD_INT 7
73151: NEG
73152: PPUSH
73153: LD_INT 7
73155: PPUSH
73156: CALL_OW 12
73160: ST_TO_ADDR
// animal := CreateHuman ;
73161: LD_ADDR_VAR 0 12
73165: PUSH
73166: CALL_OW 44
73170: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73171: LD_VAR 0 12
73175: PPUSH
73176: LD_VAR 0 8
73180: PPUSH
73181: LD_INT 0
73183: PPUSH
73184: CALL 75097 0 3
// end ;
73188: GO 73125
73190: POP
73191: POP
// if apemans then
73192: LD_VAR 0 3
73196: IFFALSE 73319
// for i = 1 to apemans do
73198: LD_ADDR_VAR 0 11
73202: PUSH
73203: DOUBLE
73204: LD_INT 1
73206: DEC
73207: ST_TO_ADDR
73208: LD_VAR 0 3
73212: PUSH
73213: FOR_TO
73214: IFFALSE 73317
// begin hc_class = class_apeman ;
73216: LD_ADDR_OWVAR 28
73220: PUSH
73221: LD_INT 12
73223: ST_TO_ADDR
// hc_gallery =  ;
73224: LD_ADDR_OWVAR 33
73228: PUSH
73229: LD_STRING 
73231: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73232: LD_ADDR_OWVAR 35
73236: PUSH
73237: LD_INT 2
73239: NEG
73240: PPUSH
73241: LD_INT 2
73243: PPUSH
73244: CALL_OW 12
73248: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73249: LD_ADDR_OWVAR 31
73253: PUSH
73254: LD_INT 1
73256: PPUSH
73257: LD_INT 3
73259: PPUSH
73260: CALL_OW 12
73264: PUSH
73265: LD_INT 1
73267: PPUSH
73268: LD_INT 3
73270: PPUSH
73271: CALL_OW 12
73275: PUSH
73276: LD_INT 0
73278: PUSH
73279: LD_INT 0
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: LIST
73286: LIST
73287: ST_TO_ADDR
// animal := CreateHuman ;
73288: LD_ADDR_VAR 0 12
73292: PUSH
73293: CALL_OW 44
73297: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73298: LD_VAR 0 12
73302: PPUSH
73303: LD_VAR 0 8
73307: PPUSH
73308: LD_INT 0
73310: PPUSH
73311: CALL 75097 0 3
// end ;
73315: GO 73213
73317: POP
73318: POP
// if enchidnas then
73319: LD_VAR 0 4
73323: IFFALSE 73390
// for i = 1 to enchidnas do
73325: LD_ADDR_VAR 0 11
73329: PUSH
73330: DOUBLE
73331: LD_INT 1
73333: DEC
73334: ST_TO_ADDR
73335: LD_VAR 0 4
73339: PUSH
73340: FOR_TO
73341: IFFALSE 73388
// begin hc_class = 13 ;
73343: LD_ADDR_OWVAR 28
73347: PUSH
73348: LD_INT 13
73350: ST_TO_ADDR
// hc_gallery =  ;
73351: LD_ADDR_OWVAR 33
73355: PUSH
73356: LD_STRING 
73358: ST_TO_ADDR
// animal := CreateHuman ;
73359: LD_ADDR_VAR 0 12
73363: PUSH
73364: CALL_OW 44
73368: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73369: LD_VAR 0 12
73373: PPUSH
73374: LD_VAR 0 8
73378: PPUSH
73379: LD_INT 0
73381: PPUSH
73382: CALL 75097 0 3
// end ;
73386: GO 73340
73388: POP
73389: POP
// if fishes then
73390: LD_VAR 0 7
73394: IFFALSE 73461
// for i = 1 to fishes do
73396: LD_ADDR_VAR 0 11
73400: PUSH
73401: DOUBLE
73402: LD_INT 1
73404: DEC
73405: ST_TO_ADDR
73406: LD_VAR 0 7
73410: PUSH
73411: FOR_TO
73412: IFFALSE 73459
// begin hc_class = 20 ;
73414: LD_ADDR_OWVAR 28
73418: PUSH
73419: LD_INT 20
73421: ST_TO_ADDR
// hc_gallery =  ;
73422: LD_ADDR_OWVAR 33
73426: PUSH
73427: LD_STRING 
73429: ST_TO_ADDR
// animal := CreateHuman ;
73430: LD_ADDR_VAR 0 12
73434: PUSH
73435: CALL_OW 44
73439: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73440: LD_VAR 0 12
73444: PPUSH
73445: LD_VAR 0 9
73449: PPUSH
73450: LD_INT 0
73452: PPUSH
73453: CALL 75097 0 3
// end ;
73457: GO 73411
73459: POP
73460: POP
// end ;
73461: LD_VAR 0 10
73465: RET
// export function WantHeal ( sci , unit ) ; begin
73466: LD_INT 0
73468: PPUSH
// if GetTaskList ( sci ) > 0 then
73469: LD_VAR 0 1
73473: PPUSH
73474: CALL_OW 437
73478: PUSH
73479: LD_INT 0
73481: GREATER
73482: IFFALSE 73552
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73484: LD_VAR 0 1
73488: PPUSH
73489: CALL_OW 437
73493: PUSH
73494: LD_INT 1
73496: ARRAY
73497: PUSH
73498: LD_INT 1
73500: ARRAY
73501: PUSH
73502: LD_STRING l
73504: EQUAL
73505: PUSH
73506: LD_VAR 0 1
73510: PPUSH
73511: CALL_OW 437
73515: PUSH
73516: LD_INT 1
73518: ARRAY
73519: PUSH
73520: LD_INT 4
73522: ARRAY
73523: PUSH
73524: LD_VAR 0 2
73528: EQUAL
73529: AND
73530: IFFALSE 73542
// result := true else
73532: LD_ADDR_VAR 0 3
73536: PUSH
73537: LD_INT 1
73539: ST_TO_ADDR
73540: GO 73550
// result := false ;
73542: LD_ADDR_VAR 0 3
73546: PUSH
73547: LD_INT 0
73549: ST_TO_ADDR
// end else
73550: GO 73560
// result := false ;
73552: LD_ADDR_VAR 0 3
73556: PUSH
73557: LD_INT 0
73559: ST_TO_ADDR
// end ;
73560: LD_VAR 0 3
73564: RET
// export function HealTarget ( sci ) ; begin
73565: LD_INT 0
73567: PPUSH
// if not sci then
73568: LD_VAR 0 1
73572: NOT
73573: IFFALSE 73577
// exit ;
73575: GO 73642
// result := 0 ;
73577: LD_ADDR_VAR 0 2
73581: PUSH
73582: LD_INT 0
73584: ST_TO_ADDR
// if GetTaskList ( sci ) then
73585: LD_VAR 0 1
73589: PPUSH
73590: CALL_OW 437
73594: IFFALSE 73642
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73596: LD_VAR 0 1
73600: PPUSH
73601: CALL_OW 437
73605: PUSH
73606: LD_INT 1
73608: ARRAY
73609: PUSH
73610: LD_INT 1
73612: ARRAY
73613: PUSH
73614: LD_STRING l
73616: EQUAL
73617: IFFALSE 73642
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73619: LD_ADDR_VAR 0 2
73623: PUSH
73624: LD_VAR 0 1
73628: PPUSH
73629: CALL_OW 437
73633: PUSH
73634: LD_INT 1
73636: ARRAY
73637: PUSH
73638: LD_INT 4
73640: ARRAY
73641: ST_TO_ADDR
// end ;
73642: LD_VAR 0 2
73646: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73647: LD_INT 0
73649: PPUSH
73650: PPUSH
73651: PPUSH
73652: PPUSH
// if not base_units then
73653: LD_VAR 0 1
73657: NOT
73658: IFFALSE 73662
// exit ;
73660: GO 73749
// result := false ;
73662: LD_ADDR_VAR 0 2
73666: PUSH
73667: LD_INT 0
73669: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73670: LD_ADDR_VAR 0 5
73674: PUSH
73675: LD_VAR 0 1
73679: PPUSH
73680: LD_INT 21
73682: PUSH
73683: LD_INT 3
73685: PUSH
73686: EMPTY
73687: LIST
73688: LIST
73689: PPUSH
73690: CALL_OW 72
73694: ST_TO_ADDR
// if not tmp then
73695: LD_VAR 0 5
73699: NOT
73700: IFFALSE 73704
// exit ;
73702: GO 73749
// for i in tmp do
73704: LD_ADDR_VAR 0 3
73708: PUSH
73709: LD_VAR 0 5
73713: PUSH
73714: FOR_IN
73715: IFFALSE 73747
// begin result := EnemyInRange ( i , 22 ) ;
73717: LD_ADDR_VAR 0 2
73721: PUSH
73722: LD_VAR 0 3
73726: PPUSH
73727: LD_INT 22
73729: PPUSH
73730: CALL 71418 0 2
73734: ST_TO_ADDR
// if result then
73735: LD_VAR 0 2
73739: IFFALSE 73745
// exit ;
73741: POP
73742: POP
73743: GO 73749
// end ;
73745: GO 73714
73747: POP
73748: POP
// end ;
73749: LD_VAR 0 2
73753: RET
// export function FilterByTag ( units , tag ) ; begin
73754: LD_INT 0
73756: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73757: LD_ADDR_VAR 0 3
73761: PUSH
73762: LD_VAR 0 1
73766: PPUSH
73767: LD_INT 120
73769: PUSH
73770: LD_VAR 0 2
73774: PUSH
73775: EMPTY
73776: LIST
73777: LIST
73778: PPUSH
73779: CALL_OW 72
73783: ST_TO_ADDR
// end ;
73784: LD_VAR 0 3
73788: RET
// export function IsDriver ( un ) ; begin
73789: LD_INT 0
73791: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73792: LD_ADDR_VAR 0 2
73796: PUSH
73797: LD_VAR 0 1
73801: PUSH
73802: LD_INT 55
73804: PUSH
73805: EMPTY
73806: LIST
73807: PPUSH
73808: CALL_OW 69
73812: IN
73813: ST_TO_ADDR
// end ;
73814: LD_VAR 0 2
73818: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73819: LD_INT 0
73821: PPUSH
73822: PPUSH
// list := [ ] ;
73823: LD_ADDR_VAR 0 5
73827: PUSH
73828: EMPTY
73829: ST_TO_ADDR
// case d of 0 :
73830: LD_VAR 0 3
73834: PUSH
73835: LD_INT 0
73837: DOUBLE
73838: EQUAL
73839: IFTRUE 73843
73841: GO 73976
73843: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73844: LD_ADDR_VAR 0 5
73848: PUSH
73849: LD_VAR 0 1
73853: PUSH
73854: LD_INT 4
73856: MINUS
73857: PUSH
73858: LD_VAR 0 2
73862: PUSH
73863: LD_INT 4
73865: MINUS
73866: PUSH
73867: LD_INT 2
73869: PUSH
73870: EMPTY
73871: LIST
73872: LIST
73873: LIST
73874: PUSH
73875: LD_VAR 0 1
73879: PUSH
73880: LD_INT 3
73882: MINUS
73883: PUSH
73884: LD_VAR 0 2
73888: PUSH
73889: LD_INT 1
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: LIST
73896: PUSH
73897: LD_VAR 0 1
73901: PUSH
73902: LD_INT 4
73904: PLUS
73905: PUSH
73906: LD_VAR 0 2
73910: PUSH
73911: LD_INT 4
73913: PUSH
73914: EMPTY
73915: LIST
73916: LIST
73917: LIST
73918: PUSH
73919: LD_VAR 0 1
73923: PUSH
73924: LD_INT 3
73926: PLUS
73927: PUSH
73928: LD_VAR 0 2
73932: PUSH
73933: LD_INT 3
73935: PLUS
73936: PUSH
73937: LD_INT 5
73939: PUSH
73940: EMPTY
73941: LIST
73942: LIST
73943: LIST
73944: PUSH
73945: LD_VAR 0 1
73949: PUSH
73950: LD_VAR 0 2
73954: PUSH
73955: LD_INT 4
73957: PLUS
73958: PUSH
73959: LD_INT 0
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: LIST
73966: PUSH
73967: EMPTY
73968: LIST
73969: LIST
73970: LIST
73971: LIST
73972: LIST
73973: ST_TO_ADDR
// end ; 1 :
73974: GO 74674
73976: LD_INT 1
73978: DOUBLE
73979: EQUAL
73980: IFTRUE 73984
73982: GO 74117
73984: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73985: LD_ADDR_VAR 0 5
73989: PUSH
73990: LD_VAR 0 1
73994: PUSH
73995: LD_VAR 0 2
73999: PUSH
74000: LD_INT 4
74002: MINUS
74003: PUSH
74004: LD_INT 3
74006: PUSH
74007: EMPTY
74008: LIST
74009: LIST
74010: LIST
74011: PUSH
74012: LD_VAR 0 1
74016: PUSH
74017: LD_INT 3
74019: MINUS
74020: PUSH
74021: LD_VAR 0 2
74025: PUSH
74026: LD_INT 3
74028: MINUS
74029: PUSH
74030: LD_INT 2
74032: PUSH
74033: EMPTY
74034: LIST
74035: LIST
74036: LIST
74037: PUSH
74038: LD_VAR 0 1
74042: PUSH
74043: LD_INT 4
74045: MINUS
74046: PUSH
74047: LD_VAR 0 2
74051: PUSH
74052: LD_INT 1
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: LIST
74059: PUSH
74060: LD_VAR 0 1
74064: PUSH
74065: LD_VAR 0 2
74069: PUSH
74070: LD_INT 3
74072: PLUS
74073: PUSH
74074: LD_INT 0
74076: PUSH
74077: EMPTY
74078: LIST
74079: LIST
74080: LIST
74081: PUSH
74082: LD_VAR 0 1
74086: PUSH
74087: LD_INT 4
74089: PLUS
74090: PUSH
74091: LD_VAR 0 2
74095: PUSH
74096: LD_INT 4
74098: PLUS
74099: PUSH
74100: LD_INT 5
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: LIST
74107: PUSH
74108: EMPTY
74109: LIST
74110: LIST
74111: LIST
74112: LIST
74113: LIST
74114: ST_TO_ADDR
// end ; 2 :
74115: GO 74674
74117: LD_INT 2
74119: DOUBLE
74120: EQUAL
74121: IFTRUE 74125
74123: GO 74254
74125: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74126: LD_ADDR_VAR 0 5
74130: PUSH
74131: LD_VAR 0 1
74135: PUSH
74136: LD_VAR 0 2
74140: PUSH
74141: LD_INT 3
74143: MINUS
74144: PUSH
74145: LD_INT 3
74147: PUSH
74148: EMPTY
74149: LIST
74150: LIST
74151: LIST
74152: PUSH
74153: LD_VAR 0 1
74157: PUSH
74158: LD_INT 4
74160: PLUS
74161: PUSH
74162: LD_VAR 0 2
74166: PUSH
74167: LD_INT 4
74169: PUSH
74170: EMPTY
74171: LIST
74172: LIST
74173: LIST
74174: PUSH
74175: LD_VAR 0 1
74179: PUSH
74180: LD_VAR 0 2
74184: PUSH
74185: LD_INT 4
74187: PLUS
74188: PUSH
74189: LD_INT 0
74191: PUSH
74192: EMPTY
74193: LIST
74194: LIST
74195: LIST
74196: PUSH
74197: LD_VAR 0 1
74201: PUSH
74202: LD_INT 3
74204: MINUS
74205: PUSH
74206: LD_VAR 0 2
74210: PUSH
74211: LD_INT 1
74213: PUSH
74214: EMPTY
74215: LIST
74216: LIST
74217: LIST
74218: PUSH
74219: LD_VAR 0 1
74223: PUSH
74224: LD_INT 4
74226: MINUS
74227: PUSH
74228: LD_VAR 0 2
74232: PUSH
74233: LD_INT 4
74235: MINUS
74236: PUSH
74237: LD_INT 2
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: LIST
74244: PUSH
74245: EMPTY
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: ST_TO_ADDR
// end ; 3 :
74252: GO 74674
74254: LD_INT 3
74256: DOUBLE
74257: EQUAL
74258: IFTRUE 74262
74260: GO 74395
74262: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74263: LD_ADDR_VAR 0 5
74267: PUSH
74268: LD_VAR 0 1
74272: PUSH
74273: LD_INT 3
74275: PLUS
74276: PUSH
74277: LD_VAR 0 2
74281: PUSH
74282: LD_INT 4
74284: PUSH
74285: EMPTY
74286: LIST
74287: LIST
74288: LIST
74289: PUSH
74290: LD_VAR 0 1
74294: PUSH
74295: LD_INT 4
74297: PLUS
74298: PUSH
74299: LD_VAR 0 2
74303: PUSH
74304: LD_INT 4
74306: PLUS
74307: PUSH
74308: LD_INT 5
74310: PUSH
74311: EMPTY
74312: LIST
74313: LIST
74314: LIST
74315: PUSH
74316: LD_VAR 0 1
74320: PUSH
74321: LD_INT 4
74323: MINUS
74324: PUSH
74325: LD_VAR 0 2
74329: PUSH
74330: LD_INT 1
74332: PUSH
74333: EMPTY
74334: LIST
74335: LIST
74336: LIST
74337: PUSH
74338: LD_VAR 0 1
74342: PUSH
74343: LD_VAR 0 2
74347: PUSH
74348: LD_INT 4
74350: MINUS
74351: PUSH
74352: LD_INT 3
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: LIST
74359: PUSH
74360: LD_VAR 0 1
74364: PUSH
74365: LD_INT 3
74367: MINUS
74368: PUSH
74369: LD_VAR 0 2
74373: PUSH
74374: LD_INT 3
74376: MINUS
74377: PUSH
74378: LD_INT 2
74380: PUSH
74381: EMPTY
74382: LIST
74383: LIST
74384: LIST
74385: PUSH
74386: EMPTY
74387: LIST
74388: LIST
74389: LIST
74390: LIST
74391: LIST
74392: ST_TO_ADDR
// end ; 4 :
74393: GO 74674
74395: LD_INT 4
74397: DOUBLE
74398: EQUAL
74399: IFTRUE 74403
74401: GO 74536
74403: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74404: LD_ADDR_VAR 0 5
74408: PUSH
74409: LD_VAR 0 1
74413: PUSH
74414: LD_VAR 0 2
74418: PUSH
74419: LD_INT 4
74421: PLUS
74422: PUSH
74423: LD_INT 0
74425: PUSH
74426: EMPTY
74427: LIST
74428: LIST
74429: LIST
74430: PUSH
74431: LD_VAR 0 1
74435: PUSH
74436: LD_INT 3
74438: PLUS
74439: PUSH
74440: LD_VAR 0 2
74444: PUSH
74445: LD_INT 3
74447: PLUS
74448: PUSH
74449: LD_INT 5
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: LIST
74456: PUSH
74457: LD_VAR 0 1
74461: PUSH
74462: LD_INT 4
74464: PLUS
74465: PUSH
74466: LD_VAR 0 2
74470: PUSH
74471: LD_INT 4
74473: PUSH
74474: EMPTY
74475: LIST
74476: LIST
74477: LIST
74478: PUSH
74479: LD_VAR 0 1
74483: PUSH
74484: LD_VAR 0 2
74488: PUSH
74489: LD_INT 3
74491: MINUS
74492: PUSH
74493: LD_INT 3
74495: PUSH
74496: EMPTY
74497: LIST
74498: LIST
74499: LIST
74500: PUSH
74501: LD_VAR 0 1
74505: PUSH
74506: LD_INT 4
74508: MINUS
74509: PUSH
74510: LD_VAR 0 2
74514: PUSH
74515: LD_INT 4
74517: MINUS
74518: PUSH
74519: LD_INT 2
74521: PUSH
74522: EMPTY
74523: LIST
74524: LIST
74525: LIST
74526: PUSH
74527: EMPTY
74528: LIST
74529: LIST
74530: LIST
74531: LIST
74532: LIST
74533: ST_TO_ADDR
// end ; 5 :
74534: GO 74674
74536: LD_INT 5
74538: DOUBLE
74539: EQUAL
74540: IFTRUE 74544
74542: GO 74673
74544: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74545: LD_ADDR_VAR 0 5
74549: PUSH
74550: LD_VAR 0 1
74554: PUSH
74555: LD_INT 4
74557: MINUS
74558: PUSH
74559: LD_VAR 0 2
74563: PUSH
74564: LD_INT 1
74566: PUSH
74567: EMPTY
74568: LIST
74569: LIST
74570: LIST
74571: PUSH
74572: LD_VAR 0 1
74576: PUSH
74577: LD_VAR 0 2
74581: PUSH
74582: LD_INT 4
74584: MINUS
74585: PUSH
74586: LD_INT 3
74588: PUSH
74589: EMPTY
74590: LIST
74591: LIST
74592: LIST
74593: PUSH
74594: LD_VAR 0 1
74598: PUSH
74599: LD_INT 4
74601: PLUS
74602: PUSH
74603: LD_VAR 0 2
74607: PUSH
74608: LD_INT 4
74610: PLUS
74611: PUSH
74612: LD_INT 5
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: LIST
74619: PUSH
74620: LD_VAR 0 1
74624: PUSH
74625: LD_INT 3
74627: PLUS
74628: PUSH
74629: LD_VAR 0 2
74633: PUSH
74634: LD_INT 4
74636: PUSH
74637: EMPTY
74638: LIST
74639: LIST
74640: LIST
74641: PUSH
74642: LD_VAR 0 1
74646: PUSH
74647: LD_VAR 0 2
74651: PUSH
74652: LD_INT 3
74654: PLUS
74655: PUSH
74656: LD_INT 0
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: LIST
74663: PUSH
74664: EMPTY
74665: LIST
74666: LIST
74667: LIST
74668: LIST
74669: LIST
74670: ST_TO_ADDR
// end ; end ;
74671: GO 74674
74673: POP
// result := list ;
74674: LD_ADDR_VAR 0 4
74678: PUSH
74679: LD_VAR 0 5
74683: ST_TO_ADDR
// end ;
74684: LD_VAR 0 4
74688: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74689: LD_INT 0
74691: PPUSH
74692: PPUSH
74693: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74694: LD_VAR 0 1
74698: NOT
74699: PUSH
74700: LD_VAR 0 2
74704: PUSH
74705: LD_INT 1
74707: PUSH
74708: LD_INT 2
74710: PUSH
74711: LD_INT 3
74713: PUSH
74714: LD_INT 4
74716: PUSH
74717: EMPTY
74718: LIST
74719: LIST
74720: LIST
74721: LIST
74722: IN
74723: NOT
74724: OR
74725: IFFALSE 74729
// exit ;
74727: GO 74821
// tmp := [ ] ;
74729: LD_ADDR_VAR 0 5
74733: PUSH
74734: EMPTY
74735: ST_TO_ADDR
// for i in units do
74736: LD_ADDR_VAR 0 4
74740: PUSH
74741: LD_VAR 0 1
74745: PUSH
74746: FOR_IN
74747: IFFALSE 74790
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74749: LD_ADDR_VAR 0 5
74753: PUSH
74754: LD_VAR 0 5
74758: PPUSH
74759: LD_VAR 0 5
74763: PUSH
74764: LD_INT 1
74766: PLUS
74767: PPUSH
74768: LD_VAR 0 4
74772: PPUSH
74773: LD_VAR 0 2
74777: PPUSH
74778: CALL_OW 259
74782: PPUSH
74783: CALL_OW 2
74787: ST_TO_ADDR
74788: GO 74746
74790: POP
74791: POP
// if not tmp then
74792: LD_VAR 0 5
74796: NOT
74797: IFFALSE 74801
// exit ;
74799: GO 74821
// result := SortListByListDesc ( units , tmp ) ;
74801: LD_ADDR_VAR 0 3
74805: PUSH
74806: LD_VAR 0 1
74810: PPUSH
74811: LD_VAR 0 5
74815: PPUSH
74816: CALL_OW 77
74820: ST_TO_ADDR
// end ;
74821: LD_VAR 0 3
74825: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74826: LD_INT 0
74828: PPUSH
74829: PPUSH
74830: PPUSH
// result := false ;
74831: LD_ADDR_VAR 0 3
74835: PUSH
74836: LD_INT 0
74838: ST_TO_ADDR
// x := GetX ( building ) ;
74839: LD_ADDR_VAR 0 4
74843: PUSH
74844: LD_VAR 0 2
74848: PPUSH
74849: CALL_OW 250
74853: ST_TO_ADDR
// y := GetY ( building ) ;
74854: LD_ADDR_VAR 0 5
74858: PUSH
74859: LD_VAR 0 2
74863: PPUSH
74864: CALL_OW 251
74868: ST_TO_ADDR
// if not building or not x or not y then
74869: LD_VAR 0 2
74873: NOT
74874: PUSH
74875: LD_VAR 0 4
74879: NOT
74880: OR
74881: PUSH
74882: LD_VAR 0 5
74886: NOT
74887: OR
74888: IFFALSE 74892
// exit ;
74890: GO 74984
// if GetTaskList ( unit ) then
74892: LD_VAR 0 1
74896: PPUSH
74897: CALL_OW 437
74901: IFFALSE 74984
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74903: LD_STRING e
74905: PUSH
74906: LD_VAR 0 1
74910: PPUSH
74911: CALL_OW 437
74915: PUSH
74916: LD_INT 1
74918: ARRAY
74919: PUSH
74920: LD_INT 1
74922: ARRAY
74923: EQUAL
74924: PUSH
74925: LD_VAR 0 4
74929: PUSH
74930: LD_VAR 0 1
74934: PPUSH
74935: CALL_OW 437
74939: PUSH
74940: LD_INT 1
74942: ARRAY
74943: PUSH
74944: LD_INT 2
74946: ARRAY
74947: EQUAL
74948: AND
74949: PUSH
74950: LD_VAR 0 5
74954: PUSH
74955: LD_VAR 0 1
74959: PPUSH
74960: CALL_OW 437
74964: PUSH
74965: LD_INT 1
74967: ARRAY
74968: PUSH
74969: LD_INT 3
74971: ARRAY
74972: EQUAL
74973: AND
74974: IFFALSE 74984
// result := true end ;
74976: LD_ADDR_VAR 0 3
74980: PUSH
74981: LD_INT 1
74983: ST_TO_ADDR
// end ;
74984: LD_VAR 0 3
74988: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74989: LD_INT 0
74991: PPUSH
// result := false ;
74992: LD_ADDR_VAR 0 4
74996: PUSH
74997: LD_INT 0
74999: ST_TO_ADDR
// if GetTaskList ( unit ) then
75000: LD_VAR 0 1
75004: PPUSH
75005: CALL_OW 437
75009: IFFALSE 75092
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75011: LD_STRING M
75013: PUSH
75014: LD_VAR 0 1
75018: PPUSH
75019: CALL_OW 437
75023: PUSH
75024: LD_INT 1
75026: ARRAY
75027: PUSH
75028: LD_INT 1
75030: ARRAY
75031: EQUAL
75032: PUSH
75033: LD_VAR 0 2
75037: PUSH
75038: LD_VAR 0 1
75042: PPUSH
75043: CALL_OW 437
75047: PUSH
75048: LD_INT 1
75050: ARRAY
75051: PUSH
75052: LD_INT 2
75054: ARRAY
75055: EQUAL
75056: AND
75057: PUSH
75058: LD_VAR 0 3
75062: PUSH
75063: LD_VAR 0 1
75067: PPUSH
75068: CALL_OW 437
75072: PUSH
75073: LD_INT 1
75075: ARRAY
75076: PUSH
75077: LD_INT 3
75079: ARRAY
75080: EQUAL
75081: AND
75082: IFFALSE 75092
// result := true ;
75084: LD_ADDR_VAR 0 4
75088: PUSH
75089: LD_INT 1
75091: ST_TO_ADDR
// end ; end ;
75092: LD_VAR 0 4
75096: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75097: LD_INT 0
75099: PPUSH
75100: PPUSH
75101: PPUSH
75102: PPUSH
// if not unit or not area then
75103: LD_VAR 0 1
75107: NOT
75108: PUSH
75109: LD_VAR 0 2
75113: NOT
75114: OR
75115: IFFALSE 75119
// exit ;
75117: GO 75283
// tmp := AreaToList ( area , i ) ;
75119: LD_ADDR_VAR 0 6
75123: PUSH
75124: LD_VAR 0 2
75128: PPUSH
75129: LD_VAR 0 5
75133: PPUSH
75134: CALL_OW 517
75138: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75139: LD_ADDR_VAR 0 5
75143: PUSH
75144: DOUBLE
75145: LD_INT 1
75147: DEC
75148: ST_TO_ADDR
75149: LD_VAR 0 6
75153: PUSH
75154: LD_INT 1
75156: ARRAY
75157: PUSH
75158: FOR_TO
75159: IFFALSE 75281
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75161: LD_ADDR_VAR 0 7
75165: PUSH
75166: LD_VAR 0 6
75170: PUSH
75171: LD_INT 1
75173: ARRAY
75174: PUSH
75175: LD_VAR 0 5
75179: ARRAY
75180: PUSH
75181: LD_VAR 0 6
75185: PUSH
75186: LD_INT 2
75188: ARRAY
75189: PUSH
75190: LD_VAR 0 5
75194: ARRAY
75195: PUSH
75196: EMPTY
75197: LIST
75198: LIST
75199: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75200: LD_VAR 0 7
75204: PUSH
75205: LD_INT 1
75207: ARRAY
75208: PPUSH
75209: LD_VAR 0 7
75213: PUSH
75214: LD_INT 2
75216: ARRAY
75217: PPUSH
75218: CALL_OW 428
75222: PUSH
75223: LD_INT 0
75225: EQUAL
75226: IFFALSE 75279
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75228: LD_VAR 0 1
75232: PPUSH
75233: LD_VAR 0 7
75237: PUSH
75238: LD_INT 1
75240: ARRAY
75241: PPUSH
75242: LD_VAR 0 7
75246: PUSH
75247: LD_INT 2
75249: ARRAY
75250: PPUSH
75251: LD_VAR 0 3
75255: PPUSH
75256: CALL_OW 48
// result := IsPlaced ( unit ) ;
75260: LD_ADDR_VAR 0 4
75264: PUSH
75265: LD_VAR 0 1
75269: PPUSH
75270: CALL_OW 305
75274: ST_TO_ADDR
// exit ;
75275: POP
75276: POP
75277: GO 75283
// end ; end ;
75279: GO 75158
75281: POP
75282: POP
// end ;
75283: LD_VAR 0 4
75287: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75288: LD_INT 0
75290: PPUSH
75291: PPUSH
75292: PPUSH
// if not side or side > 8 then
75293: LD_VAR 0 1
75297: NOT
75298: PUSH
75299: LD_VAR 0 1
75303: PUSH
75304: LD_INT 8
75306: GREATER
75307: OR
75308: IFFALSE 75312
// exit ;
75310: GO 75499
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75312: LD_ADDR_VAR 0 4
75316: PUSH
75317: LD_INT 22
75319: PUSH
75320: LD_VAR 0 1
75324: PUSH
75325: EMPTY
75326: LIST
75327: LIST
75328: PUSH
75329: LD_INT 21
75331: PUSH
75332: LD_INT 3
75334: PUSH
75335: EMPTY
75336: LIST
75337: LIST
75338: PUSH
75339: EMPTY
75340: LIST
75341: LIST
75342: PPUSH
75343: CALL_OW 69
75347: ST_TO_ADDR
// if not tmp then
75348: LD_VAR 0 4
75352: NOT
75353: IFFALSE 75357
// exit ;
75355: GO 75499
// enable_addtolog := true ;
75357: LD_ADDR_OWVAR 81
75361: PUSH
75362: LD_INT 1
75364: ST_TO_ADDR
// AddToLog ( [ ) ;
75365: LD_STRING [
75367: PPUSH
75368: CALL_OW 561
// for i in tmp do
75372: LD_ADDR_VAR 0 3
75376: PUSH
75377: LD_VAR 0 4
75381: PUSH
75382: FOR_IN
75383: IFFALSE 75490
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75385: LD_STRING [
75387: PUSH
75388: LD_VAR 0 3
75392: PPUSH
75393: CALL_OW 266
75397: STR
75398: PUSH
75399: LD_STRING , 
75401: STR
75402: PUSH
75403: LD_VAR 0 3
75407: PPUSH
75408: CALL_OW 250
75412: STR
75413: PUSH
75414: LD_STRING , 
75416: STR
75417: PUSH
75418: LD_VAR 0 3
75422: PPUSH
75423: CALL_OW 251
75427: STR
75428: PUSH
75429: LD_STRING , 
75431: STR
75432: PUSH
75433: LD_VAR 0 3
75437: PPUSH
75438: CALL_OW 254
75442: STR
75443: PUSH
75444: LD_STRING , 
75446: STR
75447: PUSH
75448: LD_VAR 0 3
75452: PPUSH
75453: LD_INT 1
75455: PPUSH
75456: CALL_OW 268
75460: STR
75461: PUSH
75462: LD_STRING , 
75464: STR
75465: PUSH
75466: LD_VAR 0 3
75470: PPUSH
75471: LD_INT 2
75473: PPUSH
75474: CALL_OW 268
75478: STR
75479: PUSH
75480: LD_STRING ],
75482: STR
75483: PPUSH
75484: CALL_OW 561
// end ;
75488: GO 75382
75490: POP
75491: POP
// AddToLog ( ]; ) ;
75492: LD_STRING ];
75494: PPUSH
75495: CALL_OW 561
// end ;
75499: LD_VAR 0 2
75503: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75504: LD_INT 0
75506: PPUSH
75507: PPUSH
75508: PPUSH
75509: PPUSH
75510: PPUSH
// if not area or not rate or not max then
75511: LD_VAR 0 1
75515: NOT
75516: PUSH
75517: LD_VAR 0 2
75521: NOT
75522: OR
75523: PUSH
75524: LD_VAR 0 4
75528: NOT
75529: OR
75530: IFFALSE 75534
// exit ;
75532: GO 75723
// while 1 do
75534: LD_INT 1
75536: IFFALSE 75723
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75538: LD_ADDR_VAR 0 9
75542: PUSH
75543: LD_VAR 0 1
75547: PPUSH
75548: LD_INT 1
75550: PPUSH
75551: CALL_OW 287
75555: PUSH
75556: LD_INT 10
75558: MUL
75559: ST_TO_ADDR
// r := rate / 10 ;
75560: LD_ADDR_VAR 0 7
75564: PUSH
75565: LD_VAR 0 2
75569: PUSH
75570: LD_INT 10
75572: DIVREAL
75573: ST_TO_ADDR
// time := 1 1$00 ;
75574: LD_ADDR_VAR 0 8
75578: PUSH
75579: LD_INT 2100
75581: ST_TO_ADDR
// if amount < min then
75582: LD_VAR 0 9
75586: PUSH
75587: LD_VAR 0 3
75591: LESS
75592: IFFALSE 75610
// r := r * 2 else
75594: LD_ADDR_VAR 0 7
75598: PUSH
75599: LD_VAR 0 7
75603: PUSH
75604: LD_INT 2
75606: MUL
75607: ST_TO_ADDR
75608: GO 75636
// if amount > max then
75610: LD_VAR 0 9
75614: PUSH
75615: LD_VAR 0 4
75619: GREATER
75620: IFFALSE 75636
// r := r / 2 ;
75622: LD_ADDR_VAR 0 7
75626: PUSH
75627: LD_VAR 0 7
75631: PUSH
75632: LD_INT 2
75634: DIVREAL
75635: ST_TO_ADDR
// time := time / r ;
75636: LD_ADDR_VAR 0 8
75640: PUSH
75641: LD_VAR 0 8
75645: PUSH
75646: LD_VAR 0 7
75650: DIVREAL
75651: ST_TO_ADDR
// if time < 0 then
75652: LD_VAR 0 8
75656: PUSH
75657: LD_INT 0
75659: LESS
75660: IFFALSE 75677
// time := time * - 1 ;
75662: LD_ADDR_VAR 0 8
75666: PUSH
75667: LD_VAR 0 8
75671: PUSH
75672: LD_INT 1
75674: NEG
75675: MUL
75676: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75677: LD_VAR 0 8
75681: PUSH
75682: LD_INT 35
75684: PPUSH
75685: LD_INT 875
75687: PPUSH
75688: CALL_OW 12
75692: PLUS
75693: PPUSH
75694: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75698: LD_INT 1
75700: PPUSH
75701: LD_INT 5
75703: PPUSH
75704: CALL_OW 12
75708: PPUSH
75709: LD_VAR 0 1
75713: PPUSH
75714: LD_INT 1
75716: PPUSH
75717: CALL_OW 55
// end ;
75721: GO 75534
// end ;
75723: LD_VAR 0 5
75727: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75728: LD_INT 0
75730: PPUSH
75731: PPUSH
75732: PPUSH
75733: PPUSH
75734: PPUSH
75735: PPUSH
75736: PPUSH
75737: PPUSH
// if not turrets or not factories then
75738: LD_VAR 0 1
75742: NOT
75743: PUSH
75744: LD_VAR 0 2
75748: NOT
75749: OR
75750: IFFALSE 75754
// exit ;
75752: GO 76061
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75754: LD_ADDR_VAR 0 10
75758: PUSH
75759: LD_INT 5
75761: PUSH
75762: LD_INT 6
75764: PUSH
75765: EMPTY
75766: LIST
75767: LIST
75768: PUSH
75769: LD_INT 2
75771: PUSH
75772: LD_INT 4
75774: PUSH
75775: EMPTY
75776: LIST
75777: LIST
75778: PUSH
75779: LD_INT 3
75781: PUSH
75782: LD_INT 5
75784: PUSH
75785: EMPTY
75786: LIST
75787: LIST
75788: PUSH
75789: EMPTY
75790: LIST
75791: LIST
75792: LIST
75793: PUSH
75794: LD_INT 24
75796: PUSH
75797: LD_INT 25
75799: PUSH
75800: EMPTY
75801: LIST
75802: LIST
75803: PUSH
75804: LD_INT 23
75806: PUSH
75807: LD_INT 27
75809: PUSH
75810: EMPTY
75811: LIST
75812: LIST
75813: PUSH
75814: EMPTY
75815: LIST
75816: LIST
75817: PUSH
75818: LD_INT 42
75820: PUSH
75821: LD_INT 43
75823: PUSH
75824: EMPTY
75825: LIST
75826: LIST
75827: PUSH
75828: LD_INT 44
75830: PUSH
75831: LD_INT 46
75833: PUSH
75834: EMPTY
75835: LIST
75836: LIST
75837: PUSH
75838: LD_INT 45
75840: PUSH
75841: LD_INT 47
75843: PUSH
75844: EMPTY
75845: LIST
75846: LIST
75847: PUSH
75848: EMPTY
75849: LIST
75850: LIST
75851: LIST
75852: PUSH
75853: EMPTY
75854: LIST
75855: LIST
75856: LIST
75857: ST_TO_ADDR
// result := [ ] ;
75858: LD_ADDR_VAR 0 3
75862: PUSH
75863: EMPTY
75864: ST_TO_ADDR
// for i in turrets do
75865: LD_ADDR_VAR 0 4
75869: PUSH
75870: LD_VAR 0 1
75874: PUSH
75875: FOR_IN
75876: IFFALSE 76059
// begin nat := GetNation ( i ) ;
75878: LD_ADDR_VAR 0 7
75882: PUSH
75883: LD_VAR 0 4
75887: PPUSH
75888: CALL_OW 248
75892: ST_TO_ADDR
// weapon := 0 ;
75893: LD_ADDR_VAR 0 8
75897: PUSH
75898: LD_INT 0
75900: ST_TO_ADDR
// if not nat then
75901: LD_VAR 0 7
75905: NOT
75906: IFFALSE 75910
// continue ;
75908: GO 75875
// for j in list [ nat ] do
75910: LD_ADDR_VAR 0 5
75914: PUSH
75915: LD_VAR 0 10
75919: PUSH
75920: LD_VAR 0 7
75924: ARRAY
75925: PUSH
75926: FOR_IN
75927: IFFALSE 75968
// if GetBWeapon ( i ) = j [ 1 ] then
75929: LD_VAR 0 4
75933: PPUSH
75934: CALL_OW 269
75938: PUSH
75939: LD_VAR 0 5
75943: PUSH
75944: LD_INT 1
75946: ARRAY
75947: EQUAL
75948: IFFALSE 75966
// begin weapon := j [ 2 ] ;
75950: LD_ADDR_VAR 0 8
75954: PUSH
75955: LD_VAR 0 5
75959: PUSH
75960: LD_INT 2
75962: ARRAY
75963: ST_TO_ADDR
// break ;
75964: GO 75968
// end ;
75966: GO 75926
75968: POP
75969: POP
// if not weapon then
75970: LD_VAR 0 8
75974: NOT
75975: IFFALSE 75979
// continue ;
75977: GO 75875
// for k in factories do
75979: LD_ADDR_VAR 0 6
75983: PUSH
75984: LD_VAR 0 2
75988: PUSH
75989: FOR_IN
75990: IFFALSE 76055
// begin weapons := AvailableWeaponList ( k ) ;
75992: LD_ADDR_VAR 0 9
75996: PUSH
75997: LD_VAR 0 6
76001: PPUSH
76002: CALL_OW 478
76006: ST_TO_ADDR
// if not weapons then
76007: LD_VAR 0 9
76011: NOT
76012: IFFALSE 76016
// continue ;
76014: GO 75989
// if weapon in weapons then
76016: LD_VAR 0 8
76020: PUSH
76021: LD_VAR 0 9
76025: IN
76026: IFFALSE 76053
// begin result := [ i , weapon ] ;
76028: LD_ADDR_VAR 0 3
76032: PUSH
76033: LD_VAR 0 4
76037: PUSH
76038: LD_VAR 0 8
76042: PUSH
76043: EMPTY
76044: LIST
76045: LIST
76046: ST_TO_ADDR
// exit ;
76047: POP
76048: POP
76049: POP
76050: POP
76051: GO 76061
// end ; end ;
76053: GO 75989
76055: POP
76056: POP
// end ;
76057: GO 75875
76059: POP
76060: POP
// end ;
76061: LD_VAR 0 3
76065: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76066: LD_INT 0
76068: PPUSH
// if not side or side > 8 then
76069: LD_VAR 0 3
76073: NOT
76074: PUSH
76075: LD_VAR 0 3
76079: PUSH
76080: LD_INT 8
76082: GREATER
76083: OR
76084: IFFALSE 76088
// exit ;
76086: GO 76147
// if not range then
76088: LD_VAR 0 4
76092: NOT
76093: IFFALSE 76104
// range := - 12 ;
76095: LD_ADDR_VAR 0 4
76099: PUSH
76100: LD_INT 12
76102: NEG
76103: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76104: LD_VAR 0 1
76108: PPUSH
76109: LD_VAR 0 2
76113: PPUSH
76114: LD_VAR 0 3
76118: PPUSH
76119: LD_VAR 0 4
76123: PPUSH
76124: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76128: LD_VAR 0 1
76132: PPUSH
76133: LD_VAR 0 2
76137: PPUSH
76138: LD_VAR 0 3
76142: PPUSH
76143: CALL_OW 331
// end ;
76147: LD_VAR 0 5
76151: RET
// export function Video ( mode ) ; begin
76152: LD_INT 0
76154: PPUSH
// ingame_video = mode ;
76155: LD_ADDR_OWVAR 52
76159: PUSH
76160: LD_VAR 0 1
76164: ST_TO_ADDR
// interface_hidden = mode ;
76165: LD_ADDR_OWVAR 54
76169: PUSH
76170: LD_VAR 0 1
76174: ST_TO_ADDR
// end ;
76175: LD_VAR 0 2
76179: RET
// export function Join ( array , element ) ; begin
76180: LD_INT 0
76182: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76183: LD_ADDR_VAR 0 3
76187: PUSH
76188: LD_VAR 0 1
76192: PPUSH
76193: LD_VAR 0 1
76197: PUSH
76198: LD_INT 1
76200: PLUS
76201: PPUSH
76202: LD_VAR 0 2
76206: PPUSH
76207: CALL_OW 1
76211: ST_TO_ADDR
// end ;
76212: LD_VAR 0 3
76216: RET
// export function JoinUnion ( array , element ) ; begin
76217: LD_INT 0
76219: PPUSH
// result := array union element ;
76220: LD_ADDR_VAR 0 3
76224: PUSH
76225: LD_VAR 0 1
76229: PUSH
76230: LD_VAR 0 2
76234: UNION
76235: ST_TO_ADDR
// end ;
76236: LD_VAR 0 3
76240: RET
// export function GetBehemoths ( side ) ; begin
76241: LD_INT 0
76243: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76244: LD_ADDR_VAR 0 2
76248: PUSH
76249: LD_INT 22
76251: PUSH
76252: LD_VAR 0 1
76256: PUSH
76257: EMPTY
76258: LIST
76259: LIST
76260: PUSH
76261: LD_INT 31
76263: PUSH
76264: LD_INT 25
76266: PUSH
76267: EMPTY
76268: LIST
76269: LIST
76270: PUSH
76271: EMPTY
76272: LIST
76273: LIST
76274: PPUSH
76275: CALL_OW 69
76279: ST_TO_ADDR
// end ;
76280: LD_VAR 0 2
76284: RET
// export function Shuffle ( array ) ; var i , index ; begin
76285: LD_INT 0
76287: PPUSH
76288: PPUSH
76289: PPUSH
// result := [ ] ;
76290: LD_ADDR_VAR 0 2
76294: PUSH
76295: EMPTY
76296: ST_TO_ADDR
// if not array then
76297: LD_VAR 0 1
76301: NOT
76302: IFFALSE 76306
// exit ;
76304: GO 76405
// Randomize ;
76306: CALL_OW 10
// for i = array downto 1 do
76310: LD_ADDR_VAR 0 3
76314: PUSH
76315: DOUBLE
76316: LD_VAR 0 1
76320: INC
76321: ST_TO_ADDR
76322: LD_INT 1
76324: PUSH
76325: FOR_DOWNTO
76326: IFFALSE 76403
// begin index := rand ( 1 , array ) ;
76328: LD_ADDR_VAR 0 4
76332: PUSH
76333: LD_INT 1
76335: PPUSH
76336: LD_VAR 0 1
76340: PPUSH
76341: CALL_OW 12
76345: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76346: LD_ADDR_VAR 0 2
76350: PUSH
76351: LD_VAR 0 2
76355: PPUSH
76356: LD_VAR 0 2
76360: PUSH
76361: LD_INT 1
76363: PLUS
76364: PPUSH
76365: LD_VAR 0 1
76369: PUSH
76370: LD_VAR 0 4
76374: ARRAY
76375: PPUSH
76376: CALL_OW 2
76380: ST_TO_ADDR
// array := Delete ( array , index ) ;
76381: LD_ADDR_VAR 0 1
76385: PUSH
76386: LD_VAR 0 1
76390: PPUSH
76391: LD_VAR 0 4
76395: PPUSH
76396: CALL_OW 3
76400: ST_TO_ADDR
// end ;
76401: GO 76325
76403: POP
76404: POP
// end ;
76405: LD_VAR 0 2
76409: RET
// export function GetBaseMaterials ( base ) ; begin
76410: LD_INT 0
76412: PPUSH
// result := [ 0 , 0 , 0 ] ;
76413: LD_ADDR_VAR 0 2
76417: PUSH
76418: LD_INT 0
76420: PUSH
76421: LD_INT 0
76423: PUSH
76424: LD_INT 0
76426: PUSH
76427: EMPTY
76428: LIST
76429: LIST
76430: LIST
76431: ST_TO_ADDR
// if not base then
76432: LD_VAR 0 1
76436: NOT
76437: IFFALSE 76441
// exit ;
76439: GO 76490
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76441: LD_ADDR_VAR 0 2
76445: PUSH
76446: LD_VAR 0 1
76450: PPUSH
76451: LD_INT 1
76453: PPUSH
76454: CALL_OW 275
76458: PUSH
76459: LD_VAR 0 1
76463: PPUSH
76464: LD_INT 2
76466: PPUSH
76467: CALL_OW 275
76471: PUSH
76472: LD_VAR 0 1
76476: PPUSH
76477: LD_INT 3
76479: PPUSH
76480: CALL_OW 275
76484: PUSH
76485: EMPTY
76486: LIST
76487: LIST
76488: LIST
76489: ST_TO_ADDR
// end ;
76490: LD_VAR 0 2
76494: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76495: LD_INT 0
76497: PPUSH
76498: PPUSH
// result := array ;
76499: LD_ADDR_VAR 0 3
76503: PUSH
76504: LD_VAR 0 1
76508: ST_TO_ADDR
// if size >= result then
76509: LD_VAR 0 2
76513: PUSH
76514: LD_VAR 0 3
76518: GREATEREQUAL
76519: IFFALSE 76523
// exit ;
76521: GO 76573
// if size then
76523: LD_VAR 0 2
76527: IFFALSE 76573
// for i := array downto size do
76529: LD_ADDR_VAR 0 4
76533: PUSH
76534: DOUBLE
76535: LD_VAR 0 1
76539: INC
76540: ST_TO_ADDR
76541: LD_VAR 0 2
76545: PUSH
76546: FOR_DOWNTO
76547: IFFALSE 76571
// result := Delete ( result , result ) ;
76549: LD_ADDR_VAR 0 3
76553: PUSH
76554: LD_VAR 0 3
76558: PPUSH
76559: LD_VAR 0 3
76563: PPUSH
76564: CALL_OW 3
76568: ST_TO_ADDR
76569: GO 76546
76571: POP
76572: POP
// end ;
76573: LD_VAR 0 3
76577: RET
// export function ComExit ( unit ) ; var tmp ; begin
76578: LD_INT 0
76580: PPUSH
76581: PPUSH
// if not IsInUnit ( unit ) then
76582: LD_VAR 0 1
76586: PPUSH
76587: CALL_OW 310
76591: NOT
76592: IFFALSE 76596
// exit ;
76594: GO 76656
// tmp := IsInUnit ( unit ) ;
76596: LD_ADDR_VAR 0 3
76600: PUSH
76601: LD_VAR 0 1
76605: PPUSH
76606: CALL_OW 310
76610: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76611: LD_VAR 0 3
76615: PPUSH
76616: CALL_OW 247
76620: PUSH
76621: LD_INT 2
76623: EQUAL
76624: IFFALSE 76637
// ComExitVehicle ( unit ) else
76626: LD_VAR 0 1
76630: PPUSH
76631: CALL_OW 121
76635: GO 76646
// ComExitBuilding ( unit ) ;
76637: LD_VAR 0 1
76641: PPUSH
76642: CALL_OW 122
// result := tmp ;
76646: LD_ADDR_VAR 0 2
76650: PUSH
76651: LD_VAR 0 3
76655: ST_TO_ADDR
// end ;
76656: LD_VAR 0 2
76660: RET
// export function ComExitAll ( units ) ; var i ; begin
76661: LD_INT 0
76663: PPUSH
76664: PPUSH
// if not units then
76665: LD_VAR 0 1
76669: NOT
76670: IFFALSE 76674
// exit ;
76672: GO 76700
// for i in units do
76674: LD_ADDR_VAR 0 3
76678: PUSH
76679: LD_VAR 0 1
76683: PUSH
76684: FOR_IN
76685: IFFALSE 76698
// ComExit ( i ) ;
76687: LD_VAR 0 3
76691: PPUSH
76692: CALL 76578 0 1
76696: GO 76684
76698: POP
76699: POP
// end ;
76700: LD_VAR 0 2
76704: RET
// export function ResetHc ; begin
76705: LD_INT 0
76707: PPUSH
// InitHc ;
76708: CALL_OW 19
// hc_importance := 0 ;
76712: LD_ADDR_OWVAR 32
76716: PUSH
76717: LD_INT 0
76719: ST_TO_ADDR
// end ;
76720: LD_VAR 0 1
76724: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76725: LD_INT 0
76727: PPUSH
76728: PPUSH
76729: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76730: LD_ADDR_VAR 0 6
76734: PUSH
76735: LD_VAR 0 1
76739: PUSH
76740: LD_VAR 0 3
76744: PLUS
76745: PUSH
76746: LD_INT 2
76748: DIV
76749: ST_TO_ADDR
// if _x < 0 then
76750: LD_VAR 0 6
76754: PUSH
76755: LD_INT 0
76757: LESS
76758: IFFALSE 76775
// _x := _x * - 1 ;
76760: LD_ADDR_VAR 0 6
76764: PUSH
76765: LD_VAR 0 6
76769: PUSH
76770: LD_INT 1
76772: NEG
76773: MUL
76774: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76775: LD_ADDR_VAR 0 7
76779: PUSH
76780: LD_VAR 0 2
76784: PUSH
76785: LD_VAR 0 4
76789: PLUS
76790: PUSH
76791: LD_INT 2
76793: DIV
76794: ST_TO_ADDR
// if _y < 0 then
76795: LD_VAR 0 7
76799: PUSH
76800: LD_INT 0
76802: LESS
76803: IFFALSE 76820
// _y := _y * - 1 ;
76805: LD_ADDR_VAR 0 7
76809: PUSH
76810: LD_VAR 0 7
76814: PUSH
76815: LD_INT 1
76817: NEG
76818: MUL
76819: ST_TO_ADDR
// result := [ _x , _y ] ;
76820: LD_ADDR_VAR 0 5
76824: PUSH
76825: LD_VAR 0 6
76829: PUSH
76830: LD_VAR 0 7
76834: PUSH
76835: EMPTY
76836: LIST
76837: LIST
76838: ST_TO_ADDR
// end ;
76839: LD_VAR 0 5
76843: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76844: LD_INT 0
76846: PPUSH
76847: PPUSH
76848: PPUSH
76849: PPUSH
// task := GetTaskList ( unit ) ;
76850: LD_ADDR_VAR 0 7
76854: PUSH
76855: LD_VAR 0 1
76859: PPUSH
76860: CALL_OW 437
76864: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76865: LD_VAR 0 7
76869: NOT
76870: PUSH
76871: LD_VAR 0 1
76875: PPUSH
76876: LD_VAR 0 2
76880: PPUSH
76881: CALL_OW 308
76885: NOT
76886: AND
76887: IFFALSE 76891
// exit ;
76889: GO 77009
// if IsInArea ( unit , area ) then
76891: LD_VAR 0 1
76895: PPUSH
76896: LD_VAR 0 2
76900: PPUSH
76901: CALL_OW 308
76905: IFFALSE 76923
// begin ComMoveToArea ( unit , goAway ) ;
76907: LD_VAR 0 1
76911: PPUSH
76912: LD_VAR 0 3
76916: PPUSH
76917: CALL_OW 113
// exit ;
76921: GO 77009
// end ; if task [ 1 ] [ 1 ] <> M then
76923: LD_VAR 0 7
76927: PUSH
76928: LD_INT 1
76930: ARRAY
76931: PUSH
76932: LD_INT 1
76934: ARRAY
76935: PUSH
76936: LD_STRING M
76938: NONEQUAL
76939: IFFALSE 76943
// exit ;
76941: GO 77009
// x := task [ 1 ] [ 2 ] ;
76943: LD_ADDR_VAR 0 5
76947: PUSH
76948: LD_VAR 0 7
76952: PUSH
76953: LD_INT 1
76955: ARRAY
76956: PUSH
76957: LD_INT 2
76959: ARRAY
76960: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76961: LD_ADDR_VAR 0 6
76965: PUSH
76966: LD_VAR 0 7
76970: PUSH
76971: LD_INT 1
76973: ARRAY
76974: PUSH
76975: LD_INT 3
76977: ARRAY
76978: ST_TO_ADDR
// if InArea ( x , y , area ) then
76979: LD_VAR 0 5
76983: PPUSH
76984: LD_VAR 0 6
76988: PPUSH
76989: LD_VAR 0 2
76993: PPUSH
76994: CALL_OW 309
76998: IFFALSE 77009
// ComStop ( unit ) ;
77000: LD_VAR 0 1
77004: PPUSH
77005: CALL_OW 141
// end ;
77009: LD_VAR 0 4
77013: RET
// export function Abs ( value ) ; begin
77014: LD_INT 0
77016: PPUSH
// result := value ;
77017: LD_ADDR_VAR 0 2
77021: PUSH
77022: LD_VAR 0 1
77026: ST_TO_ADDR
// if value < 0 then
77027: LD_VAR 0 1
77031: PUSH
77032: LD_INT 0
77034: LESS
77035: IFFALSE 77052
// result := value * - 1 ;
77037: LD_ADDR_VAR 0 2
77041: PUSH
77042: LD_VAR 0 1
77046: PUSH
77047: LD_INT 1
77049: NEG
77050: MUL
77051: ST_TO_ADDR
// end ;
77052: LD_VAR 0 2
77056: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77057: LD_INT 0
77059: PPUSH
77060: PPUSH
77061: PPUSH
77062: PPUSH
77063: PPUSH
77064: PPUSH
77065: PPUSH
77066: PPUSH
// if not unit or not building then
77067: LD_VAR 0 1
77071: NOT
77072: PUSH
77073: LD_VAR 0 2
77077: NOT
77078: OR
77079: IFFALSE 77083
// exit ;
77081: GO 77309
// x := GetX ( building ) ;
77083: LD_ADDR_VAR 0 4
77087: PUSH
77088: LD_VAR 0 2
77092: PPUSH
77093: CALL_OW 250
77097: ST_TO_ADDR
// y := GetY ( building ) ;
77098: LD_ADDR_VAR 0 6
77102: PUSH
77103: LD_VAR 0 2
77107: PPUSH
77108: CALL_OW 251
77112: ST_TO_ADDR
// d := GetDir ( building ) ;
77113: LD_ADDR_VAR 0 8
77117: PUSH
77118: LD_VAR 0 2
77122: PPUSH
77123: CALL_OW 254
77127: ST_TO_ADDR
// r := 4 ;
77128: LD_ADDR_VAR 0 9
77132: PUSH
77133: LD_INT 4
77135: ST_TO_ADDR
// for i := 1 to 5 do
77136: LD_ADDR_VAR 0 10
77140: PUSH
77141: DOUBLE
77142: LD_INT 1
77144: DEC
77145: ST_TO_ADDR
77146: LD_INT 5
77148: PUSH
77149: FOR_TO
77150: IFFALSE 77307
// begin _x := ShiftX ( x , d , r + i ) ;
77152: LD_ADDR_VAR 0 5
77156: PUSH
77157: LD_VAR 0 4
77161: PPUSH
77162: LD_VAR 0 8
77166: PPUSH
77167: LD_VAR 0 9
77171: PUSH
77172: LD_VAR 0 10
77176: PLUS
77177: PPUSH
77178: CALL_OW 272
77182: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77183: LD_ADDR_VAR 0 7
77187: PUSH
77188: LD_VAR 0 6
77192: PPUSH
77193: LD_VAR 0 8
77197: PPUSH
77198: LD_VAR 0 9
77202: PUSH
77203: LD_VAR 0 10
77207: PLUS
77208: PPUSH
77209: CALL_OW 273
77213: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77214: LD_VAR 0 5
77218: PPUSH
77219: LD_VAR 0 7
77223: PPUSH
77224: CALL_OW 488
77228: PUSH
77229: LD_VAR 0 5
77233: PPUSH
77234: LD_VAR 0 7
77238: PPUSH
77239: CALL_OW 428
77243: PPUSH
77244: CALL_OW 247
77248: PUSH
77249: LD_INT 3
77251: PUSH
77252: LD_INT 2
77254: PUSH
77255: EMPTY
77256: LIST
77257: LIST
77258: IN
77259: NOT
77260: AND
77261: IFFALSE 77305
// begin ComMoveXY ( unit , _x , _y ) ;
77263: LD_VAR 0 1
77267: PPUSH
77268: LD_VAR 0 5
77272: PPUSH
77273: LD_VAR 0 7
77277: PPUSH
77278: CALL_OW 111
// result := [ _x , _y ] ;
77282: LD_ADDR_VAR 0 3
77286: PUSH
77287: LD_VAR 0 5
77291: PUSH
77292: LD_VAR 0 7
77296: PUSH
77297: EMPTY
77298: LIST
77299: LIST
77300: ST_TO_ADDR
// exit ;
77301: POP
77302: POP
77303: GO 77309
// end ; end ;
77305: GO 77149
77307: POP
77308: POP
// end ;
77309: LD_VAR 0 3
77313: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77314: LD_INT 0
77316: PPUSH
77317: PPUSH
77318: PPUSH
// result := 0 ;
77319: LD_ADDR_VAR 0 3
77323: PUSH
77324: LD_INT 0
77326: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77327: LD_VAR 0 1
77331: PUSH
77332: LD_INT 0
77334: LESS
77335: PUSH
77336: LD_VAR 0 1
77340: PUSH
77341: LD_INT 8
77343: GREATER
77344: OR
77345: PUSH
77346: LD_VAR 0 2
77350: PUSH
77351: LD_INT 0
77353: LESS
77354: OR
77355: PUSH
77356: LD_VAR 0 2
77360: PUSH
77361: LD_INT 8
77363: GREATER
77364: OR
77365: IFFALSE 77369
// exit ;
77367: GO 77444
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77369: LD_ADDR_VAR 0 4
77373: PUSH
77374: LD_INT 22
77376: PUSH
77377: LD_VAR 0 2
77381: PUSH
77382: EMPTY
77383: LIST
77384: LIST
77385: PPUSH
77386: CALL_OW 69
77390: PUSH
77391: FOR_IN
77392: IFFALSE 77442
// begin un := UnitShoot ( i ) ;
77394: LD_ADDR_VAR 0 5
77398: PUSH
77399: LD_VAR 0 4
77403: PPUSH
77404: CALL_OW 504
77408: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77409: LD_VAR 0 5
77413: PPUSH
77414: CALL_OW 255
77418: PUSH
77419: LD_VAR 0 1
77423: EQUAL
77424: IFFALSE 77440
// begin result := un ;
77426: LD_ADDR_VAR 0 3
77430: PUSH
77431: LD_VAR 0 5
77435: ST_TO_ADDR
// exit ;
77436: POP
77437: POP
77438: GO 77444
// end ; end ;
77440: GO 77391
77442: POP
77443: POP
// end ;
77444: LD_VAR 0 3
77448: RET
// export function GetCargoBay ( units ) ; begin
77449: LD_INT 0
77451: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77452: LD_ADDR_VAR 0 2
77456: PUSH
77457: LD_VAR 0 1
77461: PPUSH
77462: LD_INT 2
77464: PUSH
77465: LD_INT 34
77467: PUSH
77468: LD_INT 12
77470: PUSH
77471: EMPTY
77472: LIST
77473: LIST
77474: PUSH
77475: LD_INT 34
77477: PUSH
77478: LD_INT 51
77480: PUSH
77481: EMPTY
77482: LIST
77483: LIST
77484: PUSH
77485: LD_INT 34
77487: PUSH
77488: LD_INT 32
77490: PUSH
77491: EMPTY
77492: LIST
77493: LIST
77494: PUSH
77495: LD_INT 34
77497: PUSH
77498: LD_EXP 63
77502: PUSH
77503: EMPTY
77504: LIST
77505: LIST
77506: PUSH
77507: EMPTY
77508: LIST
77509: LIST
77510: LIST
77511: LIST
77512: LIST
77513: PPUSH
77514: CALL_OW 72
77518: ST_TO_ADDR
// end ;
77519: LD_VAR 0 2
77523: RET
// export function Negate ( value ) ; begin
77524: LD_INT 0
77526: PPUSH
// result := not value ;
77527: LD_ADDR_VAR 0 2
77531: PUSH
77532: LD_VAR 0 1
77536: NOT
77537: ST_TO_ADDR
// end ;
77538: LD_VAR 0 2
77542: RET
// export function Inc ( value ) ; begin
77543: LD_INT 0
77545: PPUSH
// result := value + 1 ;
77546: LD_ADDR_VAR 0 2
77550: PUSH
77551: LD_VAR 0 1
77555: PUSH
77556: LD_INT 1
77558: PLUS
77559: ST_TO_ADDR
// end ;
77560: LD_VAR 0 2
77564: RET
// export function Dec ( value ) ; begin
77565: LD_INT 0
77567: PPUSH
// result := value - 1 ;
77568: LD_ADDR_VAR 0 2
77572: PUSH
77573: LD_VAR 0 1
77577: PUSH
77578: LD_INT 1
77580: MINUS
77581: ST_TO_ADDR
// end ;
77582: LD_VAR 0 2
77586: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77587: LD_INT 0
77589: PPUSH
77590: PPUSH
77591: PPUSH
77592: PPUSH
77593: PPUSH
77594: PPUSH
77595: PPUSH
77596: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77597: LD_VAR 0 1
77601: PPUSH
77602: LD_VAR 0 2
77606: PPUSH
77607: CALL_OW 488
77611: NOT
77612: PUSH
77613: LD_VAR 0 3
77617: PPUSH
77618: LD_VAR 0 4
77622: PPUSH
77623: CALL_OW 488
77627: NOT
77628: OR
77629: IFFALSE 77642
// begin result := - 1 ;
77631: LD_ADDR_VAR 0 5
77635: PUSH
77636: LD_INT 1
77638: NEG
77639: ST_TO_ADDR
// exit ;
77640: GO 77877
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77642: LD_ADDR_VAR 0 12
77646: PUSH
77647: LD_VAR 0 1
77651: PPUSH
77652: LD_VAR 0 2
77656: PPUSH
77657: LD_VAR 0 3
77661: PPUSH
77662: LD_VAR 0 4
77666: PPUSH
77667: CALL 76725 0 4
77671: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77672: LD_ADDR_VAR 0 11
77676: PUSH
77677: LD_VAR 0 1
77681: PPUSH
77682: LD_VAR 0 2
77686: PPUSH
77687: LD_VAR 0 12
77691: PUSH
77692: LD_INT 1
77694: ARRAY
77695: PPUSH
77696: LD_VAR 0 12
77700: PUSH
77701: LD_INT 2
77703: ARRAY
77704: PPUSH
77705: CALL_OW 298
77709: ST_TO_ADDR
// distance := 9999 ;
77710: LD_ADDR_VAR 0 10
77714: PUSH
77715: LD_INT 9999
77717: ST_TO_ADDR
// for i := 0 to 5 do
77718: LD_ADDR_VAR 0 6
77722: PUSH
77723: DOUBLE
77724: LD_INT 0
77726: DEC
77727: ST_TO_ADDR
77728: LD_INT 5
77730: PUSH
77731: FOR_TO
77732: IFFALSE 77875
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77734: LD_ADDR_VAR 0 7
77738: PUSH
77739: LD_VAR 0 1
77743: PPUSH
77744: LD_VAR 0 6
77748: PPUSH
77749: LD_VAR 0 11
77753: PPUSH
77754: CALL_OW 272
77758: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77759: LD_ADDR_VAR 0 8
77763: PUSH
77764: LD_VAR 0 2
77768: PPUSH
77769: LD_VAR 0 6
77773: PPUSH
77774: LD_VAR 0 11
77778: PPUSH
77779: CALL_OW 273
77783: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77784: LD_VAR 0 7
77788: PPUSH
77789: LD_VAR 0 8
77793: PPUSH
77794: CALL_OW 488
77798: NOT
77799: IFFALSE 77803
// continue ;
77801: GO 77731
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77803: LD_ADDR_VAR 0 9
77807: PUSH
77808: LD_VAR 0 12
77812: PUSH
77813: LD_INT 1
77815: ARRAY
77816: PPUSH
77817: LD_VAR 0 12
77821: PUSH
77822: LD_INT 2
77824: ARRAY
77825: PPUSH
77826: LD_VAR 0 7
77830: PPUSH
77831: LD_VAR 0 8
77835: PPUSH
77836: CALL_OW 298
77840: ST_TO_ADDR
// if tmp < distance then
77841: LD_VAR 0 9
77845: PUSH
77846: LD_VAR 0 10
77850: LESS
77851: IFFALSE 77873
// begin result := i ;
77853: LD_ADDR_VAR 0 5
77857: PUSH
77858: LD_VAR 0 6
77862: ST_TO_ADDR
// distance := tmp ;
77863: LD_ADDR_VAR 0 10
77867: PUSH
77868: LD_VAR 0 9
77872: ST_TO_ADDR
// end ; end ;
77873: GO 77731
77875: POP
77876: POP
// end ;
77877: LD_VAR 0 5
77881: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77882: LD_INT 0
77884: PPUSH
77885: PPUSH
// if not driver or not IsInUnit ( driver ) then
77886: LD_VAR 0 1
77890: NOT
77891: PUSH
77892: LD_VAR 0 1
77896: PPUSH
77897: CALL_OW 310
77901: NOT
77902: OR
77903: IFFALSE 77907
// exit ;
77905: GO 77997
// vehicle := IsInUnit ( driver ) ;
77907: LD_ADDR_VAR 0 3
77911: PUSH
77912: LD_VAR 0 1
77916: PPUSH
77917: CALL_OW 310
77921: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77922: LD_VAR 0 1
77926: PPUSH
77927: LD_STRING \
77929: PUSH
77930: LD_INT 0
77932: PUSH
77933: LD_INT 0
77935: PUSH
77936: LD_INT 0
77938: PUSH
77939: LD_INT 0
77941: PUSH
77942: LD_INT 0
77944: PUSH
77945: LD_INT 0
77947: PUSH
77948: EMPTY
77949: LIST
77950: LIST
77951: LIST
77952: LIST
77953: LIST
77954: LIST
77955: LIST
77956: PUSH
77957: LD_STRING E
77959: PUSH
77960: LD_INT 0
77962: PUSH
77963: LD_INT 0
77965: PUSH
77966: LD_VAR 0 3
77970: PUSH
77971: LD_INT 0
77973: PUSH
77974: LD_INT 0
77976: PUSH
77977: LD_INT 0
77979: PUSH
77980: EMPTY
77981: LIST
77982: LIST
77983: LIST
77984: LIST
77985: LIST
77986: LIST
77987: LIST
77988: PUSH
77989: EMPTY
77990: LIST
77991: LIST
77992: PPUSH
77993: CALL_OW 446
// end ;
77997: LD_VAR 0 2
78001: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78002: LD_INT 0
78004: PPUSH
78005: PPUSH
// if not driver or not IsInUnit ( driver ) then
78006: LD_VAR 0 1
78010: NOT
78011: PUSH
78012: LD_VAR 0 1
78016: PPUSH
78017: CALL_OW 310
78021: NOT
78022: OR
78023: IFFALSE 78027
// exit ;
78025: GO 78117
// vehicle := IsInUnit ( driver ) ;
78027: LD_ADDR_VAR 0 3
78031: PUSH
78032: LD_VAR 0 1
78036: PPUSH
78037: CALL_OW 310
78041: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78042: LD_VAR 0 1
78046: PPUSH
78047: LD_STRING \
78049: PUSH
78050: LD_INT 0
78052: PUSH
78053: LD_INT 0
78055: PUSH
78056: LD_INT 0
78058: PUSH
78059: LD_INT 0
78061: PUSH
78062: LD_INT 0
78064: PUSH
78065: LD_INT 0
78067: PUSH
78068: EMPTY
78069: LIST
78070: LIST
78071: LIST
78072: LIST
78073: LIST
78074: LIST
78075: LIST
78076: PUSH
78077: LD_STRING E
78079: PUSH
78080: LD_INT 0
78082: PUSH
78083: LD_INT 0
78085: PUSH
78086: LD_VAR 0 3
78090: PUSH
78091: LD_INT 0
78093: PUSH
78094: LD_INT 0
78096: PUSH
78097: LD_INT 0
78099: PUSH
78100: EMPTY
78101: LIST
78102: LIST
78103: LIST
78104: LIST
78105: LIST
78106: LIST
78107: LIST
78108: PUSH
78109: EMPTY
78110: LIST
78111: LIST
78112: PPUSH
78113: CALL_OW 447
// end ;
78117: LD_VAR 0 2
78121: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78122: LD_INT 0
78124: PPUSH
78125: PPUSH
78126: PPUSH
// tmp := [ ] ;
78127: LD_ADDR_VAR 0 5
78131: PUSH
78132: EMPTY
78133: ST_TO_ADDR
// for i in units do
78134: LD_ADDR_VAR 0 4
78138: PUSH
78139: LD_VAR 0 1
78143: PUSH
78144: FOR_IN
78145: IFFALSE 78183
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78147: LD_ADDR_VAR 0 5
78151: PUSH
78152: LD_VAR 0 5
78156: PPUSH
78157: LD_VAR 0 5
78161: PUSH
78162: LD_INT 1
78164: PLUS
78165: PPUSH
78166: LD_VAR 0 4
78170: PPUSH
78171: CALL_OW 256
78175: PPUSH
78176: CALL_OW 2
78180: ST_TO_ADDR
78181: GO 78144
78183: POP
78184: POP
// if not tmp then
78185: LD_VAR 0 5
78189: NOT
78190: IFFALSE 78194
// exit ;
78192: GO 78242
// if asc then
78194: LD_VAR 0 2
78198: IFFALSE 78222
// result := SortListByListAsc ( units , tmp ) else
78200: LD_ADDR_VAR 0 3
78204: PUSH
78205: LD_VAR 0 1
78209: PPUSH
78210: LD_VAR 0 5
78214: PPUSH
78215: CALL_OW 76
78219: ST_TO_ADDR
78220: GO 78242
// result := SortListByListDesc ( units , tmp ) ;
78222: LD_ADDR_VAR 0 3
78226: PUSH
78227: LD_VAR 0 1
78231: PPUSH
78232: LD_VAR 0 5
78236: PPUSH
78237: CALL_OW 77
78241: ST_TO_ADDR
// end ;
78242: LD_VAR 0 3
78246: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78247: LD_INT 0
78249: PPUSH
78250: PPUSH
// task := GetTaskList ( mech ) ;
78251: LD_ADDR_VAR 0 4
78255: PUSH
78256: LD_VAR 0 1
78260: PPUSH
78261: CALL_OW 437
78265: ST_TO_ADDR
// if not task then
78266: LD_VAR 0 4
78270: NOT
78271: IFFALSE 78275
// exit ;
78273: GO 78317
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78275: LD_ADDR_VAR 0 3
78279: PUSH
78280: LD_VAR 0 4
78284: PUSH
78285: LD_INT 1
78287: ARRAY
78288: PUSH
78289: LD_INT 1
78291: ARRAY
78292: PUSH
78293: LD_STRING r
78295: EQUAL
78296: PUSH
78297: LD_VAR 0 4
78301: PUSH
78302: LD_INT 1
78304: ARRAY
78305: PUSH
78306: LD_INT 4
78308: ARRAY
78309: PUSH
78310: LD_VAR 0 2
78314: EQUAL
78315: AND
78316: ST_TO_ADDR
// end ;
78317: LD_VAR 0 3
78321: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78322: LD_INT 0
78324: PPUSH
// SetDir ( unit , d ) ;
78325: LD_VAR 0 1
78329: PPUSH
78330: LD_VAR 0 4
78334: PPUSH
78335: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78339: LD_VAR 0 1
78343: PPUSH
78344: LD_VAR 0 2
78348: PPUSH
78349: LD_VAR 0 3
78353: PPUSH
78354: LD_VAR 0 5
78358: PPUSH
78359: CALL_OW 48
// end ;
78363: LD_VAR 0 6
78367: RET
// export function ToNaturalNumber ( number ) ; begin
78368: LD_INT 0
78370: PPUSH
// result := number div 1 ;
78371: LD_ADDR_VAR 0 2
78375: PUSH
78376: LD_VAR 0 1
78380: PUSH
78381: LD_INT 1
78383: DIV
78384: ST_TO_ADDR
// if number < 0 then
78385: LD_VAR 0 1
78389: PUSH
78390: LD_INT 0
78392: LESS
78393: IFFALSE 78403
// result := 0 ;
78395: LD_ADDR_VAR 0 2
78399: PUSH
78400: LD_INT 0
78402: ST_TO_ADDR
// end ;
78403: LD_VAR 0 2
78407: RET
// export function SortByClass ( units , class ) ; var un ; begin
78408: LD_INT 0
78410: PPUSH
78411: PPUSH
// if not units or not class then
78412: LD_VAR 0 1
78416: NOT
78417: PUSH
78418: LD_VAR 0 2
78422: NOT
78423: OR
78424: IFFALSE 78428
// exit ;
78426: GO 78523
// result := [ ] ;
78428: LD_ADDR_VAR 0 3
78432: PUSH
78433: EMPTY
78434: ST_TO_ADDR
// for un in units do
78435: LD_ADDR_VAR 0 4
78439: PUSH
78440: LD_VAR 0 1
78444: PUSH
78445: FOR_IN
78446: IFFALSE 78521
// if GetClass ( un ) = class then
78448: LD_VAR 0 4
78452: PPUSH
78453: CALL_OW 257
78457: PUSH
78458: LD_VAR 0 2
78462: EQUAL
78463: IFFALSE 78490
// result := Insert ( result , 1 , un ) else
78465: LD_ADDR_VAR 0 3
78469: PUSH
78470: LD_VAR 0 3
78474: PPUSH
78475: LD_INT 1
78477: PPUSH
78478: LD_VAR 0 4
78482: PPUSH
78483: CALL_OW 2
78487: ST_TO_ADDR
78488: GO 78519
// result := Replace ( result , result + 1 , un ) ;
78490: LD_ADDR_VAR 0 3
78494: PUSH
78495: LD_VAR 0 3
78499: PPUSH
78500: LD_VAR 0 3
78504: PUSH
78505: LD_INT 1
78507: PLUS
78508: PPUSH
78509: LD_VAR 0 4
78513: PPUSH
78514: CALL_OW 1
78518: ST_TO_ADDR
78519: GO 78445
78521: POP
78522: POP
// end ;
78523: LD_VAR 0 3
78527: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78528: LD_INT 0
78530: PPUSH
78531: PPUSH
78532: PPUSH
78533: PPUSH
78534: PPUSH
78535: PPUSH
78536: PPUSH
// result := [ ] ;
78537: LD_ADDR_VAR 0 4
78541: PUSH
78542: EMPTY
78543: ST_TO_ADDR
// if x - r < 0 then
78544: LD_VAR 0 1
78548: PUSH
78549: LD_VAR 0 3
78553: MINUS
78554: PUSH
78555: LD_INT 0
78557: LESS
78558: IFFALSE 78570
// min_x := 0 else
78560: LD_ADDR_VAR 0 8
78564: PUSH
78565: LD_INT 0
78567: ST_TO_ADDR
78568: GO 78586
// min_x := x - r ;
78570: LD_ADDR_VAR 0 8
78574: PUSH
78575: LD_VAR 0 1
78579: PUSH
78580: LD_VAR 0 3
78584: MINUS
78585: ST_TO_ADDR
// if y - r < 0 then
78586: LD_VAR 0 2
78590: PUSH
78591: LD_VAR 0 3
78595: MINUS
78596: PUSH
78597: LD_INT 0
78599: LESS
78600: IFFALSE 78612
// min_y := 0 else
78602: LD_ADDR_VAR 0 7
78606: PUSH
78607: LD_INT 0
78609: ST_TO_ADDR
78610: GO 78628
// min_y := y - r ;
78612: LD_ADDR_VAR 0 7
78616: PUSH
78617: LD_VAR 0 2
78621: PUSH
78622: LD_VAR 0 3
78626: MINUS
78627: ST_TO_ADDR
// max_x := x + r ;
78628: LD_ADDR_VAR 0 9
78632: PUSH
78633: LD_VAR 0 1
78637: PUSH
78638: LD_VAR 0 3
78642: PLUS
78643: ST_TO_ADDR
// max_y := y + r ;
78644: LD_ADDR_VAR 0 10
78648: PUSH
78649: LD_VAR 0 2
78653: PUSH
78654: LD_VAR 0 3
78658: PLUS
78659: ST_TO_ADDR
// for _x = min_x to max_x do
78660: LD_ADDR_VAR 0 5
78664: PUSH
78665: DOUBLE
78666: LD_VAR 0 8
78670: DEC
78671: ST_TO_ADDR
78672: LD_VAR 0 9
78676: PUSH
78677: FOR_TO
78678: IFFALSE 78779
// for _y = min_y to max_y do
78680: LD_ADDR_VAR 0 6
78684: PUSH
78685: DOUBLE
78686: LD_VAR 0 7
78690: DEC
78691: ST_TO_ADDR
78692: LD_VAR 0 10
78696: PUSH
78697: FOR_TO
78698: IFFALSE 78775
// begin if not ValidHex ( _x , _y ) then
78700: LD_VAR 0 5
78704: PPUSH
78705: LD_VAR 0 6
78709: PPUSH
78710: CALL_OW 488
78714: NOT
78715: IFFALSE 78719
// continue ;
78717: GO 78697
// if GetResourceTypeXY ( _x , _y ) then
78719: LD_VAR 0 5
78723: PPUSH
78724: LD_VAR 0 6
78728: PPUSH
78729: CALL_OW 283
78733: IFFALSE 78773
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78735: LD_ADDR_VAR 0 4
78739: PUSH
78740: LD_VAR 0 4
78744: PPUSH
78745: LD_VAR 0 4
78749: PUSH
78750: LD_INT 1
78752: PLUS
78753: PPUSH
78754: LD_VAR 0 5
78758: PUSH
78759: LD_VAR 0 6
78763: PUSH
78764: EMPTY
78765: LIST
78766: LIST
78767: PPUSH
78768: CALL_OW 1
78772: ST_TO_ADDR
// end ;
78773: GO 78697
78775: POP
78776: POP
78777: GO 78677
78779: POP
78780: POP
// end ;
78781: LD_VAR 0 4
78785: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78786: LD_INT 0
78788: PPUSH
78789: PPUSH
78790: PPUSH
78791: PPUSH
78792: PPUSH
78793: PPUSH
78794: PPUSH
78795: PPUSH
// if not units then
78796: LD_VAR 0 1
78800: NOT
78801: IFFALSE 78805
// exit ;
78803: GO 79331
// result := UnitFilter ( units , [ f_ok ] ) ;
78805: LD_ADDR_VAR 0 3
78809: PUSH
78810: LD_VAR 0 1
78814: PPUSH
78815: LD_INT 50
78817: PUSH
78818: EMPTY
78819: LIST
78820: PPUSH
78821: CALL_OW 72
78825: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78826: LD_ADDR_VAR 0 8
78830: PUSH
78831: LD_VAR 0 1
78835: PUSH
78836: LD_INT 1
78838: ARRAY
78839: PPUSH
78840: CALL_OW 255
78844: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78845: LD_ADDR_VAR 0 10
78849: PUSH
78850: LD_INT 29
78852: PUSH
78853: LD_EXP 66
78857: PUSH
78858: LD_INT 49
78860: PUSH
78861: EMPTY
78862: LIST
78863: LIST
78864: LIST
78865: ST_TO_ADDR
// if not result then
78866: LD_VAR 0 3
78870: NOT
78871: IFFALSE 78875
// exit ;
78873: GO 79331
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78875: LD_ADDR_VAR 0 5
78879: PUSH
78880: LD_INT 81
78882: PUSH
78883: LD_VAR 0 8
78887: PUSH
78888: EMPTY
78889: LIST
78890: LIST
78891: PPUSH
78892: CALL_OW 69
78896: ST_TO_ADDR
// for i in result do
78897: LD_ADDR_VAR 0 4
78901: PUSH
78902: LD_VAR 0 3
78906: PUSH
78907: FOR_IN
78908: IFFALSE 79329
// begin tag := GetTag ( i ) + 1 ;
78910: LD_ADDR_VAR 0 9
78914: PUSH
78915: LD_VAR 0 4
78919: PPUSH
78920: CALL_OW 110
78924: PUSH
78925: LD_INT 1
78927: PLUS
78928: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78929: LD_ADDR_VAR 0 7
78933: PUSH
78934: LD_VAR 0 4
78938: PPUSH
78939: CALL_OW 250
78943: PPUSH
78944: LD_VAR 0 4
78948: PPUSH
78949: CALL_OW 251
78953: PPUSH
78954: LD_INT 6
78956: PPUSH
78957: CALL 78528 0 3
78961: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78962: LD_VAR 0 4
78966: PPUSH
78967: CALL_OW 247
78971: PUSH
78972: LD_INT 2
78974: EQUAL
78975: PUSH
78976: LD_VAR 0 7
78980: AND
78981: PUSH
78982: LD_VAR 0 4
78986: PPUSH
78987: CALL_OW 264
78991: PUSH
78992: LD_VAR 0 10
78996: IN
78997: NOT
78998: AND
78999: IFFALSE 79038
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79001: LD_VAR 0 4
79005: PPUSH
79006: LD_VAR 0 7
79010: PUSH
79011: LD_INT 1
79013: ARRAY
79014: PUSH
79015: LD_INT 1
79017: ARRAY
79018: PPUSH
79019: LD_VAR 0 7
79023: PUSH
79024: LD_INT 1
79026: ARRAY
79027: PUSH
79028: LD_INT 2
79030: ARRAY
79031: PPUSH
79032: CALL_OW 116
79036: GO 79327
// if path > tag then
79038: LD_VAR 0 2
79042: PUSH
79043: LD_VAR 0 9
79047: GREATER
79048: IFFALSE 79256
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79050: LD_ADDR_VAR 0 6
79054: PUSH
79055: LD_VAR 0 5
79059: PPUSH
79060: LD_INT 91
79062: PUSH
79063: LD_VAR 0 4
79067: PUSH
79068: LD_INT 8
79070: PUSH
79071: EMPTY
79072: LIST
79073: LIST
79074: LIST
79075: PPUSH
79076: CALL_OW 72
79080: ST_TO_ADDR
// if nearEnemy then
79081: LD_VAR 0 6
79085: IFFALSE 79154
// begin if GetWeapon ( i ) = ru_time_lapser then
79087: LD_VAR 0 4
79091: PPUSH
79092: CALL_OW 264
79096: PUSH
79097: LD_INT 49
79099: EQUAL
79100: IFFALSE 79128
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79102: LD_VAR 0 4
79106: PPUSH
79107: LD_VAR 0 6
79111: PPUSH
79112: LD_VAR 0 4
79116: PPUSH
79117: CALL_OW 74
79121: PPUSH
79122: CALL_OW 112
79126: GO 79152
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79128: LD_VAR 0 4
79132: PPUSH
79133: LD_VAR 0 6
79137: PPUSH
79138: LD_VAR 0 4
79142: PPUSH
79143: CALL_OW 74
79147: PPUSH
79148: CALL_OW 115
// end else
79152: GO 79254
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79154: LD_VAR 0 4
79158: PPUSH
79159: LD_VAR 0 2
79163: PUSH
79164: LD_VAR 0 9
79168: ARRAY
79169: PUSH
79170: LD_INT 1
79172: ARRAY
79173: PPUSH
79174: LD_VAR 0 2
79178: PUSH
79179: LD_VAR 0 9
79183: ARRAY
79184: PUSH
79185: LD_INT 2
79187: ARRAY
79188: PPUSH
79189: CALL_OW 297
79193: PUSH
79194: LD_INT 6
79196: GREATER
79197: IFFALSE 79240
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79199: LD_VAR 0 4
79203: PPUSH
79204: LD_VAR 0 2
79208: PUSH
79209: LD_VAR 0 9
79213: ARRAY
79214: PUSH
79215: LD_INT 1
79217: ARRAY
79218: PPUSH
79219: LD_VAR 0 2
79223: PUSH
79224: LD_VAR 0 9
79228: ARRAY
79229: PUSH
79230: LD_INT 2
79232: ARRAY
79233: PPUSH
79234: CALL_OW 114
79238: GO 79254
// SetTag ( i , tag ) ;
79240: LD_VAR 0 4
79244: PPUSH
79245: LD_VAR 0 9
79249: PPUSH
79250: CALL_OW 109
// end else
79254: GO 79327
// if enemy then
79256: LD_VAR 0 5
79260: IFFALSE 79327
// begin if GetWeapon ( i ) = ru_time_lapser then
79262: LD_VAR 0 4
79266: PPUSH
79267: CALL_OW 264
79271: PUSH
79272: LD_INT 49
79274: EQUAL
79275: IFFALSE 79303
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79277: LD_VAR 0 4
79281: PPUSH
79282: LD_VAR 0 5
79286: PPUSH
79287: LD_VAR 0 4
79291: PPUSH
79292: CALL_OW 74
79296: PPUSH
79297: CALL_OW 112
79301: GO 79327
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79303: LD_VAR 0 4
79307: PPUSH
79308: LD_VAR 0 5
79312: PPUSH
79313: LD_VAR 0 4
79317: PPUSH
79318: CALL_OW 74
79322: PPUSH
79323: CALL_OW 115
// end ; end ;
79327: GO 78907
79329: POP
79330: POP
// end ;
79331: LD_VAR 0 3
79335: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79336: LD_INT 0
79338: PPUSH
79339: PPUSH
79340: PPUSH
// if not unit or IsInUnit ( unit ) then
79341: LD_VAR 0 1
79345: NOT
79346: PUSH
79347: LD_VAR 0 1
79351: PPUSH
79352: CALL_OW 310
79356: OR
79357: IFFALSE 79361
// exit ;
79359: GO 79452
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79361: LD_ADDR_VAR 0 4
79365: PUSH
79366: LD_VAR 0 1
79370: PPUSH
79371: CALL_OW 250
79375: PPUSH
79376: LD_VAR 0 2
79380: PPUSH
79381: LD_INT 1
79383: PPUSH
79384: CALL_OW 272
79388: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79389: LD_ADDR_VAR 0 5
79393: PUSH
79394: LD_VAR 0 1
79398: PPUSH
79399: CALL_OW 251
79403: PPUSH
79404: LD_VAR 0 2
79408: PPUSH
79409: LD_INT 1
79411: PPUSH
79412: CALL_OW 273
79416: ST_TO_ADDR
// if ValidHex ( x , y ) then
79417: LD_VAR 0 4
79421: PPUSH
79422: LD_VAR 0 5
79426: PPUSH
79427: CALL_OW 488
79431: IFFALSE 79452
// ComTurnXY ( unit , x , y ) ;
79433: LD_VAR 0 1
79437: PPUSH
79438: LD_VAR 0 4
79442: PPUSH
79443: LD_VAR 0 5
79447: PPUSH
79448: CALL_OW 118
// end ;
79452: LD_VAR 0 3
79456: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79457: LD_INT 0
79459: PPUSH
79460: PPUSH
// result := false ;
79461: LD_ADDR_VAR 0 3
79465: PUSH
79466: LD_INT 0
79468: ST_TO_ADDR
// if not units then
79469: LD_VAR 0 2
79473: NOT
79474: IFFALSE 79478
// exit ;
79476: GO 79523
// for i in units do
79478: LD_ADDR_VAR 0 4
79482: PUSH
79483: LD_VAR 0 2
79487: PUSH
79488: FOR_IN
79489: IFFALSE 79521
// if See ( side , i ) then
79491: LD_VAR 0 1
79495: PPUSH
79496: LD_VAR 0 4
79500: PPUSH
79501: CALL_OW 292
79505: IFFALSE 79519
// begin result := true ;
79507: LD_ADDR_VAR 0 3
79511: PUSH
79512: LD_INT 1
79514: ST_TO_ADDR
// exit ;
79515: POP
79516: POP
79517: GO 79523
// end ;
79519: GO 79488
79521: POP
79522: POP
// end ;
79523: LD_VAR 0 3
79527: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79528: LD_INT 0
79530: PPUSH
79531: PPUSH
79532: PPUSH
79533: PPUSH
// if not unit or not points then
79534: LD_VAR 0 1
79538: NOT
79539: PUSH
79540: LD_VAR 0 2
79544: NOT
79545: OR
79546: IFFALSE 79550
// exit ;
79548: GO 79640
// dist := 99999 ;
79550: LD_ADDR_VAR 0 5
79554: PUSH
79555: LD_INT 99999
79557: ST_TO_ADDR
// for i in points do
79558: LD_ADDR_VAR 0 4
79562: PUSH
79563: LD_VAR 0 2
79567: PUSH
79568: FOR_IN
79569: IFFALSE 79638
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79571: LD_ADDR_VAR 0 6
79575: PUSH
79576: LD_VAR 0 1
79580: PPUSH
79581: LD_VAR 0 4
79585: PUSH
79586: LD_INT 1
79588: ARRAY
79589: PPUSH
79590: LD_VAR 0 4
79594: PUSH
79595: LD_INT 2
79597: ARRAY
79598: PPUSH
79599: CALL_OW 297
79603: ST_TO_ADDR
// if tmpDist < dist then
79604: LD_VAR 0 6
79608: PUSH
79609: LD_VAR 0 5
79613: LESS
79614: IFFALSE 79636
// begin result := i ;
79616: LD_ADDR_VAR 0 3
79620: PUSH
79621: LD_VAR 0 4
79625: ST_TO_ADDR
// dist := tmpDist ;
79626: LD_ADDR_VAR 0 5
79630: PUSH
79631: LD_VAR 0 6
79635: ST_TO_ADDR
// end ; end ;
79636: GO 79568
79638: POP
79639: POP
// end ;
79640: LD_VAR 0 3
79644: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79645: LD_INT 0
79647: PPUSH
// uc_side := side ;
79648: LD_ADDR_OWVAR 20
79652: PUSH
79653: LD_VAR 0 1
79657: ST_TO_ADDR
// uc_nation := 3 ;
79658: LD_ADDR_OWVAR 21
79662: PUSH
79663: LD_INT 3
79665: ST_TO_ADDR
// vc_chassis := 25 ;
79666: LD_ADDR_OWVAR 37
79670: PUSH
79671: LD_INT 25
79673: ST_TO_ADDR
// vc_engine := engine_siberite ;
79674: LD_ADDR_OWVAR 39
79678: PUSH
79679: LD_INT 3
79681: ST_TO_ADDR
// vc_control := control_computer ;
79682: LD_ADDR_OWVAR 38
79686: PUSH
79687: LD_INT 3
79689: ST_TO_ADDR
// vc_weapon := 59 ;
79690: LD_ADDR_OWVAR 40
79694: PUSH
79695: LD_INT 59
79697: ST_TO_ADDR
// result := CreateVehicle ;
79698: LD_ADDR_VAR 0 5
79702: PUSH
79703: CALL_OW 45
79707: ST_TO_ADDR
// SetDir ( result , d ) ;
79708: LD_VAR 0 5
79712: PPUSH
79713: LD_VAR 0 4
79717: PPUSH
79718: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79722: LD_VAR 0 5
79726: PPUSH
79727: LD_VAR 0 2
79731: PPUSH
79732: LD_VAR 0 3
79736: PPUSH
79737: LD_INT 0
79739: PPUSH
79740: CALL_OW 48
// end ;
79744: LD_VAR 0 5
79748: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79749: LD_INT 0
79751: PPUSH
79752: PPUSH
79753: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79754: LD_ADDR_VAR 0 2
79758: PUSH
79759: LD_INT 0
79761: PUSH
79762: LD_INT 0
79764: PUSH
79765: LD_INT 0
79767: PUSH
79768: LD_INT 0
79770: PUSH
79771: EMPTY
79772: LIST
79773: LIST
79774: LIST
79775: LIST
79776: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79777: LD_VAR 0 1
79781: NOT
79782: PUSH
79783: LD_VAR 0 1
79787: PPUSH
79788: CALL_OW 264
79792: PUSH
79793: LD_INT 12
79795: PUSH
79796: LD_INT 51
79798: PUSH
79799: LD_INT 32
79801: PUSH
79802: LD_EXP 63
79806: PUSH
79807: EMPTY
79808: LIST
79809: LIST
79810: LIST
79811: LIST
79812: IN
79813: NOT
79814: OR
79815: IFFALSE 79819
// exit ;
79817: GO 79917
// for i := 1 to 3 do
79819: LD_ADDR_VAR 0 3
79823: PUSH
79824: DOUBLE
79825: LD_INT 1
79827: DEC
79828: ST_TO_ADDR
79829: LD_INT 3
79831: PUSH
79832: FOR_TO
79833: IFFALSE 79915
// begin tmp := GetCargo ( cargo , i ) ;
79835: LD_ADDR_VAR 0 4
79839: PUSH
79840: LD_VAR 0 1
79844: PPUSH
79845: LD_VAR 0 3
79849: PPUSH
79850: CALL_OW 289
79854: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79855: LD_ADDR_VAR 0 2
79859: PUSH
79860: LD_VAR 0 2
79864: PPUSH
79865: LD_VAR 0 3
79869: PPUSH
79870: LD_VAR 0 4
79874: PPUSH
79875: CALL_OW 1
79879: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79880: LD_ADDR_VAR 0 2
79884: PUSH
79885: LD_VAR 0 2
79889: PPUSH
79890: LD_INT 4
79892: PPUSH
79893: LD_VAR 0 2
79897: PUSH
79898: LD_INT 4
79900: ARRAY
79901: PUSH
79902: LD_VAR 0 4
79906: PLUS
79907: PPUSH
79908: CALL_OW 1
79912: ST_TO_ADDR
// end ;
79913: GO 79832
79915: POP
79916: POP
// end ;
79917: LD_VAR 0 2
79921: RET
// export function Length ( array ) ; begin
79922: LD_INT 0
79924: PPUSH
// result := array + 0 ;
79925: LD_ADDR_VAR 0 2
79929: PUSH
79930: LD_VAR 0 1
79934: PUSH
79935: LD_INT 0
79937: PLUS
79938: ST_TO_ADDR
// end ;
79939: LD_VAR 0 2
79943: RET
// export function PrepareArray ( array ) ; begin
79944: LD_INT 0
79946: PPUSH
// result := array diff 0 ;
79947: LD_ADDR_VAR 0 2
79951: PUSH
79952: LD_VAR 0 1
79956: PUSH
79957: LD_INT 0
79959: DIFF
79960: ST_TO_ADDR
// if not result [ 1 ] then
79961: LD_VAR 0 2
79965: PUSH
79966: LD_INT 1
79968: ARRAY
79969: NOT
79970: IFFALSE 79990
// result := Delete ( result , 1 ) ;
79972: LD_ADDR_VAR 0 2
79976: PUSH
79977: LD_VAR 0 2
79981: PPUSH
79982: LD_INT 1
79984: PPUSH
79985: CALL_OW 3
79989: ST_TO_ADDR
// end ; end_of_file
79990: LD_VAR 0 2
79994: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79995: LD_VAR 0 1
79999: PUSH
80000: LD_INT 200
80002: DOUBLE
80003: GREATEREQUAL
80004: IFFALSE 80012
80006: LD_INT 299
80008: DOUBLE
80009: LESSEQUAL
80010: IFTRUE 80014
80012: GO 80046
80014: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80015: LD_VAR 0 1
80019: PPUSH
80020: LD_VAR 0 2
80024: PPUSH
80025: LD_VAR 0 3
80029: PPUSH
80030: LD_VAR 0 4
80034: PPUSH
80035: LD_VAR 0 5
80039: PPUSH
80040: CALL 34846 0 5
80044: GO 80123
80046: LD_INT 300
80048: DOUBLE
80049: GREATEREQUAL
80050: IFFALSE 80058
80052: LD_INT 399
80054: DOUBLE
80055: LESSEQUAL
80056: IFTRUE 80060
80058: GO 80122
80060: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80061: LD_VAR 0 1
80065: PPUSH
80066: LD_VAR 0 2
80070: PPUSH
80071: LD_VAR 0 3
80075: PPUSH
80076: LD_VAR 0 4
80080: PPUSH
80081: LD_VAR 0 5
80085: PPUSH
80086: LD_VAR 0 6
80090: PPUSH
80091: LD_VAR 0 7
80095: PPUSH
80096: LD_VAR 0 8
80100: PPUSH
80101: LD_VAR 0 9
80105: PPUSH
80106: LD_VAR 0 10
80110: PPUSH
80111: LD_VAR 0 11
80115: PPUSH
80116: CALL 31175 0 11
80120: GO 80123
80122: POP
// end ;
80123: PPOPN 11
80125: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80126: LD_VAR 0 1
80130: PPUSH
80131: LD_VAR 0 2
80135: PPUSH
80136: LD_VAR 0 3
80140: PPUSH
80141: LD_VAR 0 4
80145: PPUSH
80146: LD_VAR 0 5
80150: PPUSH
80151: CALL 34582 0 5
// end ; end_of_file
80155: PPOPN 5
80157: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80158: LD_VAR 0 1
80162: PPUSH
80163: LD_VAR 0 2
80167: PPUSH
80168: LD_VAR 0 3
80172: PPUSH
80173: LD_VAR 0 4
80177: PPUSH
80178: LD_VAR 0 5
80182: PPUSH
80183: LD_VAR 0 6
80187: PPUSH
80188: CALL 18868 0 6
// end ;
80192: PPOPN 6
80194: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80195: LD_INT 0
80197: PPUSH
// begin if not units then
80198: LD_VAR 0 1
80202: NOT
80203: IFFALSE 80207
// exit ;
80205: GO 80207
// end ;
80207: PPOPN 7
80209: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80210: CALL 18839 0 0
// end ;
80214: PPOPN 1
80216: END
