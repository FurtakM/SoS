// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 378 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 466 0 0
// PrepareRussian ;
  29: CALL 3051 0 0
// PrepareAmerican ;
  33: CALL 1137 0 0
// PrepareCornell ;
  37: CALL 2265 0 0
// PrepareWesternBase ;
  41: CALL 2494 0 0
// Action ;
  45: CALL 5299 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_OWVAR 67
 220: ARRAY
 221: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 ] [ Difficulty ] ;
 222: LD_ADDR_EXP 20
 226: PUSH
 227: LD_INT 600
 229: PUSH
 230: LD_INT 500
 232: PUSH
 233: LD_INT 400
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_OWVAR 67
 245: ARRAY
 246: ST_TO_ADDR
// end_mission_allowed := false ;
 247: LD_ADDR_EXP 21
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// save_others := [ ] ;
 255: LD_ADDR_EXP 22
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// save_group := [ ] ;
 262: LD_ADDR_EXP 23
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// show_query := true ;
 269: LD_ADDR_EXP 24
 273: PUSH
 274: LD_INT 1
 276: ST_TO_ADDR
// wait_for_them := false ;
 277: LD_ADDR_EXP 25
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// veh_on_meta := false ;
 285: LD_ADDR_EXP 28
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// send_spec_patrol := false ;
 293: LD_ADDR_EXP 30
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// prepare_siege := false ;
 301: LD_ADDR_EXP 31
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// send_attack_on_cornel := false ;
 309: LD_ADDR_EXP 32
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 317: LD_ADDR_EXP 26
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// game_end := false ;
 325: LD_ADDR_EXP 33
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// lose_counter := 0 ;
 333: LD_ADDR_EXP 34
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// powell_warn := 0 ;
 341: LD_ADDR_EXP 35
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// save_counter := 0 ;
 349: LD_ADDR_EXP 36
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// cornel_saved := false ;
 357: LD_ADDR_EXP 27
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// ach_counter := 0 ;
 365: LD_ADDR_EXP 13
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// end ;
 373: LD_VAR 0 1
 377: RET
// function SetDiplomacy ; begin
 378: LD_INT 0
 380: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 381: LD_INT 1
 383: PPUSH
 384: LD_INT 4
 386: PPUSH
 387: LD_INT 1
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 397: LD_INT 1
 399: PPUSH
 400: LD_INT 8
 402: PPUSH
 403: LD_INT 1
 405: PPUSH
 406: LD_INT 1
 408: PPUSH
 409: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 413: LD_INT 3
 415: PPUSH
 416: LD_INT 6
 418: PPUSH
 419: LD_INT 1
 421: PPUSH
 422: LD_INT 1
 424: PPUSH
 425: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 429: LD_INT 4
 431: PPUSH
 432: LD_INT 6
 434: PPUSH
 435: LD_INT 0
 437: PPUSH
 438: LD_INT 1
 440: PPUSH
 441: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 445: LD_INT 3
 447: PPUSH
 448: LD_INT 8
 450: PPUSH
 451: LD_INT 0
 453: PPUSH
 454: LD_INT 1
 456: PPUSH
 457: CALL_OW 80
// end ;
 461: LD_VAR 0 1
 465: RET
// export function DebugMode ; var i ; begin
 466: LD_INT 0
 468: PPUSH
 469: PPUSH
// FogOff ( 1 ) ;
 470: LD_INT 1
 472: PPUSH
 473: CALL_OW 344
// debug_strings := [ ] ;
 477: LD_ADDR_OWVAR 48
 481: PUSH
 482: EMPTY
 483: ST_TO_ADDR
// end ; end_of_file
 484: LD_VAR 0 1
 488: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 489: LD_INT 0
 491: PPUSH
// uc_side := side ;
 492: LD_ADDR_OWVAR 20
 496: PUSH
 497: LD_VAR 0 1
 501: ST_TO_ADDR
// uc_nation := nation ;
 502: LD_ADDR_OWVAR 21
 506: PUSH
 507: LD_VAR 0 2
 511: ST_TO_ADDR
// vc_chassis := chassis ;
 512: LD_ADDR_OWVAR 37
 516: PUSH
 517: LD_VAR 0 3
 521: ST_TO_ADDR
// vc_engine := engine ;
 522: LD_ADDR_OWVAR 39
 526: PUSH
 527: LD_VAR 0 4
 531: ST_TO_ADDR
// vc_control := control ;
 532: LD_ADDR_OWVAR 38
 536: PUSH
 537: LD_VAR 0 5
 541: ST_TO_ADDR
// vc_weapon := weapon ;
 542: LD_ADDR_OWVAR 40
 546: PUSH
 547: LD_VAR 0 6
 551: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 552: LD_ADDR_OWVAR 41
 556: PUSH
 557: LD_VAR 0 7
 561: ST_TO_ADDR
// result := CreateVehicle ;
 562: LD_ADDR_VAR 0 8
 566: PUSH
 567: CALL_OW 45
 571: ST_TO_ADDR
// end ;
 572: LD_VAR 0 8
 576: RET
// export function SayX ( units , ident ) ; var i ; begin
 577: LD_INT 0
 579: PPUSH
 580: PPUSH
// result := false ;
 581: LD_ADDR_VAR 0 3
 585: PUSH
 586: LD_INT 0
 588: ST_TO_ADDR
// if not units then
 589: LD_VAR 0 1
 593: NOT
 594: IFFALSE 598
// exit ;
 596: GO 652
// for i in units do
 598: LD_ADDR_VAR 0 4
 602: PUSH
 603: LD_VAR 0 1
 607: PUSH
 608: FOR_IN
 609: IFFALSE 650
// if IsOk ( i ) then
 611: LD_VAR 0 4
 615: PPUSH
 616: CALL_OW 302
 620: IFFALSE 648
// begin Say ( i , ident ) ;
 622: LD_VAR 0 4
 626: PPUSH
 627: LD_VAR 0 2
 631: PPUSH
 632: CALL_OW 88
// result := i ;
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: LD_VAR 0 4
 645: ST_TO_ADDR
// break ;
 646: GO 650
// end ;
 648: GO 608
 650: POP
 651: POP
// end ;
 652: LD_VAR 0 3
 656: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 657: LD_INT 0
 659: PPUSH
 660: PPUSH
 661: PPUSH
 662: PPUSH
// for i = 1 to count do
 663: LD_ADDR_VAR 0 8
 667: PUSH
 668: DOUBLE
 669: LD_INT 1
 671: DEC
 672: ST_TO_ADDR
 673: LD_VAR 0 6
 677: PUSH
 678: FOR_TO
 679: IFFALSE 760
// begin uc_side = side ;
 681: LD_ADDR_OWVAR 20
 685: PUSH
 686: LD_VAR 0 1
 690: ST_TO_ADDR
// uc_nation = nation ;
 691: LD_ADDR_OWVAR 21
 695: PUSH
 696: LD_VAR 0 2
 700: ST_TO_ADDR
// hc_gallery =  ;
 701: LD_ADDR_OWVAR 33
 705: PUSH
 706: LD_STRING 
 708: ST_TO_ADDR
// hc_name =  ;
 709: LD_ADDR_OWVAR 26
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 717: LD_INT 0
 719: PPUSH
 720: LD_VAR 0 5
 724: PPUSH
 725: LD_VAR 0 4
 729: PPUSH
 730: CALL_OW 380
// un = CreateHuman ;
 734: LD_ADDR_VAR 0 10
 738: PUSH
 739: CALL_OW 44
 743: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 744: LD_VAR 0 10
 748: PPUSH
 749: LD_VAR 0 3
 753: PPUSH
 754: CALL_OW 52
// end ;
 758: GO 678
 760: POP
 761: POP
// end ;
 762: LD_VAR 0 7
 766: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 767: LD_INT 0
 769: PPUSH
 770: PPUSH
 771: PPUSH
// uc_side := GetSide ( b ) ;
 772: LD_ADDR_OWVAR 20
 776: PUSH
 777: LD_VAR 0 2
 781: PPUSH
 782: CALL_OW 255
 786: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 787: LD_ADDR_OWVAR 21
 791: PUSH
 792: LD_VAR 0 2
 796: PPUSH
 797: CALL_OW 248
 801: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 802: LD_INT 0
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: LD_VAR 0 1
 812: PPUSH
 813: CALL_OW 380
// un = CreateHuman ;
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: CALL_OW 44
 826: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 827: LD_ADDR_VAR 0 5
 831: PUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 254
 841: PUSH
 842: LD_INT 3
 844: MINUS
 845: ST_TO_ADDR
// if dir < 0 then
 846: LD_VAR 0 5
 850: PUSH
 851: LD_INT 0
 853: LESS
 854: IFFALSE 870
// dir := 6 + dir ;
 856: LD_ADDR_VAR 0 5
 860: PUSH
 861: LD_INT 6
 863: PUSH
 864: LD_VAR 0 5
 868: PLUS
 869: ST_TO_ADDR
// SetDir ( un , dir ) ;
 870: LD_VAR 0 4
 874: PPUSH
 875: LD_VAR 0 5
 879: PPUSH
 880: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 884: LD_VAR 0 4
 888: PPUSH
 889: LD_VAR 0 2
 893: PPUSH
 894: CALL_OW 52
// end ;
 898: LD_VAR 0 3
 902: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 903: LD_INT 0
 905: PPUSH
 906: PPUSH
 907: PPUSH
// result := false ;
 908: LD_ADDR_VAR 0 2
 912: PUSH
 913: LD_INT 0
 915: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 916: LD_ADDR_VAR 0 3
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 34
 933: PUSH
 934: LD_INT 2
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: PPUSH
 945: CALL_OW 69
 949: ST_TO_ADDR
// for i in filter do
 950: LD_ADDR_VAR 0 4
 954: PUSH
 955: LD_VAR 0 3
 959: PUSH
 960: FOR_IN
 961: IFFALSE 992
// if IsDrivenBy ( i ) = unit then
 963: LD_VAR 0 4
 967: PPUSH
 968: CALL_OW 311
 972: PUSH
 973: LD_VAR 0 1
 977: EQUAL
 978: IFFALSE 990
// begin result := true ;
 980: LD_ADDR_VAR 0 2
 984: PUSH
 985: LD_INT 1
 987: ST_TO_ADDR
// break ;
 988: GO 992
// end ;
 990: GO 960
 992: POP
 993: POP
// end ;
 994: LD_VAR 0 2
 998: RET
// export function FindFreePlace ( blist ) ; var i ; begin
 999: LD_INT 0
1001: PPUSH
1002: PPUSH
// result := false ;
1003: LD_ADDR_VAR 0 2
1007: PUSH
1008: LD_INT 0
1010: ST_TO_ADDR
// if not blist then
1011: LD_VAR 0 1
1015: NOT
1016: IFFALSE 1020
// exit ;
1018: GO 1064
// for i in blist do
1020: LD_ADDR_VAR 0 3
1024: PUSH
1025: LD_VAR 0 1
1029: PUSH
1030: FOR_IN
1031: IFFALSE 1062
// if UnitsInside ( i ) < 6 then
1033: LD_VAR 0 3
1037: PPUSH
1038: CALL_OW 313
1042: PUSH
1043: LD_INT 6
1045: LESS
1046: IFFALSE 1060
// begin result := i ;
1048: LD_ADDR_VAR 0 2
1052: PUSH
1053: LD_VAR 0 3
1057: ST_TO_ADDR
// break ;
1058: GO 1062
// end ;
1060: GO 1030
1062: POP
1063: POP
// end ;
1064: LD_VAR 0 2
1068: RET
// export function CountTime ( timer , mode ) ; begin
1069: LD_INT 0
1071: PPUSH
// if not timer then
1072: LD_VAR 0 1
1076: NOT
1077: IFFALSE 1081
// exit ;
1079: GO 1132
// if mode in [ asc , up , + ] then
1081: LD_VAR 0 2
1085: PUSH
1086: LD_STRING asc
1088: PUSH
1089: LD_STRING up
1091: PUSH
1092: LD_STRING +
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: LIST
1099: IN
1100: IFFALSE 1118
// result := timer + 0 0$01 else
1102: LD_ADDR_VAR 0 3
1106: PUSH
1107: LD_VAR 0 1
1111: PUSH
1112: LD_INT 35
1114: PLUS
1115: ST_TO_ADDR
1116: GO 1132
// result := timer - 0 0$01 ;
1118: LD_ADDR_VAR 0 3
1122: PUSH
1123: LD_VAR 0 1
1127: PUSH
1128: LD_INT 35
1130: MINUS
1131: ST_TO_ADDR
// end ; end_of_file
1132: LD_VAR 0 3
1136: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// uc_side := 4 ;
1147: LD_ADDR_OWVAR 20
1151: PUSH
1152: LD_INT 4
1154: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1155: LD_ADDR_EXP 46
1159: PUSH
1160: LD_STRING Powell
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: LD_STRING 
1168: PPUSH
1169: CALL 35876 0 3
1173: ST_TO_ADDR
// uc_side := 1 ;
1174: LD_ADDR_OWVAR 20
1178: PUSH
1179: LD_INT 1
1181: ST_TO_ADDR
// uc_nation := 1 ;
1182: LD_ADDR_OWVAR 21
1186: PUSH
1187: LD_INT 1
1189: ST_TO_ADDR
// if debug then
1190: LD_EXP 1
1194: IFFALSE 1324
// begin for i = 1 to 4 do
1196: LD_ADDR_VAR 0 2
1200: PUSH
1201: DOUBLE
1202: LD_INT 1
1204: DEC
1205: ST_TO_ADDR
1206: LD_INT 4
1208: PUSH
1209: FOR_TO
1210: IFFALSE 1261
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1212: LD_INT 0
1214: PPUSH
1215: LD_INT 1
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 12
1225: PPUSH
1226: LD_INT 3
1228: PPUSH
1229: CALL_OW 380
// un := CreateHuman ;
1233: LD_ADDR_VAR 0 3
1237: PUSH
1238: CALL_OW 44
1242: ST_TO_ADDR
// others := others ^ un ;
1243: LD_ADDR_VAR 0 5
1247: PUSH
1248: LD_VAR 0 5
1252: PUSH
1253: LD_VAR 0 3
1257: ADD
1258: ST_TO_ADDR
// end ;
1259: GO 1209
1261: POP
1262: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1263: LD_ADDR_VAR 0 6
1267: PUSH
1268: LD_INT 21
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 1
1276: PUSH
1277: LD_INT 51
1279: PUSH
1280: LD_INT 90
1282: PUSH
1283: LD_INT 504
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 21
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 1
1302: PUSH
1303: LD_INT 51
1305: PUSH
1306: LD_INT 80
1308: PUSH
1309: LD_INT 750
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1324: LD_ADDR_EXP 37
1328: PUSH
1329: LD_STRING JMM
1331: PPUSH
1332: LD_EXP 1
1336: NOT
1337: PPUSH
1338: LD_EXP 3
1342: PPUSH
1343: CALL 35876 0 3
1347: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1348: LD_ADDR_EXP 38
1352: PUSH
1353: LD_STRING Bobby
1355: PPUSH
1356: LD_EXP 1
1360: NOT
1361: PPUSH
1362: LD_EXP 3
1366: PPUSH
1367: CALL 35876 0 3
1371: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1372: LD_ADDR_EXP 39
1376: PUSH
1377: LD_STRING Cyrus
1379: PPUSH
1380: LD_EXP 1
1384: NOT
1385: PPUSH
1386: LD_EXP 3
1390: PPUSH
1391: CALL 35876 0 3
1395: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1396: LD_ADDR_EXP 40
1400: PUSH
1401: LD_STRING Lisa
1403: PPUSH
1404: LD_EXP 1
1408: NOT
1409: PPUSH
1410: LD_EXP 3
1414: PPUSH
1415: CALL 35876 0 3
1419: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1420: LD_ADDR_EXP 41
1424: PUSH
1425: LD_STRING Khatam
1427: PPUSH
1428: LD_EXP 1
1432: NOT
1433: PPUSH
1434: LD_EXP 3
1438: PPUSH
1439: CALL 35876 0 3
1443: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1444: LD_ADDR_EXP 42
1448: PUSH
1449: LD_STRING Brian
1451: PPUSH
1452: LD_EXP 1
1456: NOT
1457: PPUSH
1458: LD_EXP 3
1462: PPUSH
1463: CALL 35876 0 3
1467: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1468: LD_ADDR_EXP 43
1472: PUSH
1473: LD_STRING Jerry
1475: PPUSH
1476: LD_EXP 1
1480: NOT
1481: PPUSH
1482: LD_EXP 3
1486: PPUSH
1487: CALL 35876 0 3
1491: ST_TO_ADDR
// if Bobby then
1492: LD_EXP 38
1496: IFFALSE 1527
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1498: LD_ADDR_VAR 0 4
1502: PUSH
1503: LD_VAR 0 4
1507: PPUSH
1508: LD_VAR 0 4
1512: PUSH
1513: LD_INT 1
1515: PLUS
1516: PPUSH
1517: LD_EXP 38
1521: PPUSH
1522: CALL_OW 2
1526: ST_TO_ADDR
// if Cyrus then
1527: LD_EXP 39
1531: IFFALSE 1562
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1533: LD_ADDR_VAR 0 4
1537: PUSH
1538: LD_VAR 0 4
1542: PPUSH
1543: LD_VAR 0 4
1547: PUSH
1548: LD_INT 1
1550: PLUS
1551: PPUSH
1552: LD_EXP 39
1556: PPUSH
1557: CALL_OW 2
1561: ST_TO_ADDR
// if Lisa then
1562: LD_EXP 40
1566: IFFALSE 1597
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1568: LD_ADDR_VAR 0 4
1572: PUSH
1573: LD_VAR 0 4
1577: PPUSH
1578: LD_VAR 0 4
1582: PUSH
1583: LD_INT 1
1585: PLUS
1586: PPUSH
1587: LD_EXP 40
1591: PPUSH
1592: CALL_OW 2
1596: ST_TO_ADDR
// if Khatam then
1597: LD_EXP 41
1601: IFFALSE 1632
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1603: LD_ADDR_VAR 0 4
1607: PUSH
1608: LD_VAR 0 4
1612: PPUSH
1613: LD_VAR 0 4
1617: PUSH
1618: LD_INT 1
1620: PLUS
1621: PPUSH
1622: LD_EXP 41
1626: PPUSH
1627: CALL_OW 2
1631: ST_TO_ADDR
// if Brian then
1632: LD_EXP 42
1636: IFFALSE 1667
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1638: LD_ADDR_VAR 0 4
1642: PUSH
1643: LD_VAR 0 4
1647: PPUSH
1648: LD_VAR 0 4
1652: PUSH
1653: LD_INT 1
1655: PLUS
1656: PPUSH
1657: LD_EXP 42
1661: PPUSH
1662: CALL_OW 2
1666: ST_TO_ADDR
// if Jerry then
1667: LD_EXP 43
1671: IFFALSE 1702
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_VAR 0 4
1682: PPUSH
1683: LD_VAR 0 4
1687: PUSH
1688: LD_INT 1
1690: PLUS
1691: PPUSH
1692: LD_EXP 43
1696: PPUSH
1697: CALL_OW 2
1701: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1702: LD_STRING 02_other_survivors
1704: PPUSH
1705: CALL_OW 28
1709: IFFALSE 1724
// others := CreateCharacterSet ( 02_other_survivors ) ;
1711: LD_ADDR_VAR 0 5
1715: PUSH
1716: LD_STRING 02_other_survivors
1718: PPUSH
1719: CALL_OW 31
1723: ST_TO_ADDR
// if others then
1724: LD_VAR 0 5
1728: IFFALSE 1753
// begin tmp := tmp ^ others ;
1730: LD_ADDR_VAR 0 4
1734: PUSH
1735: LD_VAR 0 4
1739: PUSH
1740: LD_VAR 0 5
1744: ADD
1745: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1746: LD_STRING 02_other_survivors
1748: PPUSH
1749: CALL_OW 40
// end ; jmm_units := tmp ;
1753: LD_ADDR_EXP 4
1757: PUSH
1758: LD_VAR 0 4
1762: ST_TO_ADDR
// if not vehicles then
1763: LD_VAR 0 6
1767: NOT
1768: IFFALSE 1786
// vehicles := LoadVariable ( 02_tanks_1 , 0 ) ;
1770: LD_ADDR_VAR 0 6
1774: PUSH
1775: LD_STRING 02_tanks_1
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 30
1785: ST_TO_ADDR
// if vehicles then
1786: LD_VAR 0 6
1790: IFFALSE 1984
// begin got_mech := false ;
1792: LD_ADDR_VAR 0 7
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
1800: LD_VAR 0 4
1804: PPUSH
1805: LD_INT 25
1807: PUSH
1808: LD_INT 3
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: PPUSH
1815: CALL_OW 72
1819: IFFALSE 1829
// got_mech := true ;
1821: LD_ADDR_VAR 0 7
1825: PUSH
1826: LD_INT 1
1828: ST_TO_ADDR
// for i = 1 to vehicles do
1829: LD_ADDR_VAR 0 2
1833: PUSH
1834: DOUBLE
1835: LD_INT 1
1837: DEC
1838: ST_TO_ADDR
1839: LD_VAR 0 6
1843: PUSH
1844: FOR_TO
1845: IFFALSE 1982
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
1847: LD_ADDR_VAR 0 3
1851: PUSH
1852: LD_INT 1
1854: PPUSH
1855: LD_INT 3
1857: PPUSH
1858: LD_VAR 0 6
1862: PUSH
1863: LD_VAR 0 2
1867: ARRAY
1868: PUSH
1869: LD_INT 1
1871: ARRAY
1872: PPUSH
1873: LD_VAR 0 6
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PUSH
1884: LD_INT 2
1886: ARRAY
1887: PPUSH
1888: LD_VAR 0 6
1892: PUSH
1893: LD_VAR 0 2
1897: ARRAY
1898: PUSH
1899: LD_INT 3
1901: ARRAY
1902: PPUSH
1903: LD_VAR 0 6
1907: PUSH
1908: LD_VAR 0 2
1912: ARRAY
1913: PUSH
1914: LD_INT 4
1916: ARRAY
1917: PPUSH
1918: LD_INT 40
1920: PPUSH
1921: CALL 489 0 7
1925: ST_TO_ADDR
// if not got_mech then
1926: LD_VAR 0 7
1930: NOT
1931: IFFALSE 1957
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
1933: LD_VAR 0 3
1937: PPUSH
1938: LD_VAR 0 6
1942: PUSH
1943: LD_VAR 0 2
1947: ARRAY
1948: PUSH
1949: LD_INT 6
1951: ARRAY
1952: PPUSH
1953: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
1957: LD_ADDR_VAR 0 4
1961: PUSH
1962: LD_VAR 0 4
1966: PPUSH
1967: LD_INT 1
1969: PPUSH
1970: LD_VAR 0 3
1974: PPUSH
1975: CALL_OW 2
1979: ST_TO_ADDR
// end ;
1980: GO 1844
1982: POP
1983: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
1984: LD_EXP 37
1988: PPUSH
1989: LD_INT 194
1991: PPUSH
1992: LD_INT 119
1994: PPUSH
1995: LD_INT 0
1997: PPUSH
1998: CALL_OW 48
// if tmp then
2002: LD_VAR 0 4
2006: IFFALSE 2194
// begin for i in tmp do
2008: LD_ADDR_VAR 0 2
2012: PUSH
2013: LD_VAR 0 4
2017: PUSH
2018: FOR_IN
2019: IFFALSE 2192
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2021: LD_VAR 0 2
2025: PPUSH
2026: CALL_OW 257
2030: PUSH
2031: LD_INT 1
2033: NONEQUAL
2034: PUSH
2035: LD_VAR 0 2
2039: PUSH
2040: LD_EXP 41
2044: NONEQUAL
2045: AND
2046: IFFALSE 2060
// SetClass ( i , 1 ) ;
2048: LD_VAR 0 2
2052: PPUSH
2053: LD_INT 1
2055: PPUSH
2056: CALL_OW 336
// if i = Khatam then
2060: LD_VAR 0 2
2064: PUSH
2065: LD_EXP 41
2069: EQUAL
2070: IFFALSE 2084
// SetClass ( i , 4 ) ;
2072: LD_VAR 0 2
2076: PPUSH
2077: LD_INT 4
2079: PPUSH
2080: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2084: LD_ADDR_VAR 0 8
2088: PUSH
2089: LD_INT 22
2091: PUSH
2092: LD_INT 1
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PUSH
2099: LD_INT 21
2101: PUSH
2102: LD_INT 2
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: LD_INT 58
2111: PUSH
2112: EMPTY
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: PPUSH
2120: CALL_OW 69
2124: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2125: LD_VAR 0 2
2129: PPUSH
2130: CALL_OW 247
2134: PUSH
2135: LD_INT 1
2137: EQUAL
2138: PUSH
2139: LD_VAR 0 8
2143: AND
2144: IFFALSE 2166
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2146: LD_VAR 0 2
2150: PPUSH
2151: LD_VAR 0 8
2155: PUSH
2156: LD_INT 1
2158: ARRAY
2159: PPUSH
2160: CALL_OW 52
2164: GO 2181
// PlaceUnitArea ( i , startArea , false ) ;
2166: LD_VAR 0 2
2170: PPUSH
2171: LD_INT 1
2173: PPUSH
2174: LD_INT 0
2176: PPUSH
2177: CALL_OW 49
// ComHold ( i ) ;
2181: LD_VAR 0 2
2185: PPUSH
2186: CALL_OW 140
// end ;
2190: GO 2018
2192: POP
2193: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2194: LD_ADDR_EXP 7
2198: PUSH
2199: LD_STRING 02_mikhailStatus_1
2201: PPUSH
2202: LD_INT 0
2204: PPUSH
2205: CALL_OW 30
2209: ST_TO_ADDR
// if not bierezov_exist and not debug then
2210: LD_EXP 7
2214: NOT
2215: PUSH
2216: LD_EXP 1
2220: NOT
2221: AND
2222: IFFALSE 2226
// exit ;
2224: GO 2260
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2226: LD_ADDR_EXP 45
2230: PUSH
2231: LD_STRING Mikhail
2233: PPUSH
2234: LD_INT 0
2236: PPUSH
2237: LD_STRING 
2239: PPUSH
2240: CALL 35876 0 3
2244: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2245: LD_EXP 45
2249: PPUSH
2250: LD_INT 1
2252: PPUSH
2253: LD_INT 0
2255: PPUSH
2256: CALL_OW 49
// end ;
2260: LD_VAR 0 1
2264: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2265: LD_INT 0
2267: PPUSH
2268: PPUSH
2269: PPUSH
2270: PPUSH
// uc_side := 4 ;
2271: LD_ADDR_OWVAR 20
2275: PUSH
2276: LD_INT 4
2278: ST_TO_ADDR
// uc_nation := 1 ;
2279: LD_ADDR_OWVAR 21
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2287: LD_ADDR_EXP 44
2291: PUSH
2292: LD_STRING Cornell
2294: PPUSH
2295: LD_INT 0
2297: PPUSH
2298: LD_STRING 
2300: PPUSH
2301: CALL 35876 0 3
2305: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2306: LD_ADDR_EXP 6
2310: PUSH
2311: LD_INT 9
2313: PUSH
2314: LD_EXP 4
2318: MINUS
2319: ST_TO_ADDR
// tmp := [ ] ;
2320: LD_ADDR_VAR 0 2
2324: PUSH
2325: EMPTY
2326: ST_TO_ADDR
// if cornel_units < 4 then
2327: LD_EXP 6
2331: PUSH
2332: LD_INT 4
2334: LESS
2335: IFFALSE 2345
// cornel_units := 4 ;
2337: LD_ADDR_EXP 6
2341: PUSH
2342: LD_INT 4
2344: ST_TO_ADDR
// for i = 1 to cornel_units do
2345: LD_ADDR_VAR 0 4
2349: PUSH
2350: DOUBLE
2351: LD_INT 1
2353: DEC
2354: ST_TO_ADDR
2355: LD_EXP 6
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2459
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2363: LD_INT 0
2365: PPUSH
2366: LD_INT 1
2368: PUSH
2369: LD_INT 1
2371: PUSH
2372: LD_INT 1
2374: PUSH
2375: LD_INT 2
2377: PUSH
2378: LD_INT 4
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: PUSH
2388: LD_VAR 0 4
2392: PUSH
2393: LD_INT 5
2395: MOD
2396: PUSH
2397: LD_INT 1
2399: PLUS
2400: ARRAY
2401: PPUSH
2402: LD_INT 2
2404: PPUSH
2405: CALL_OW 380
// un := CreateHuman ;
2409: LD_ADDR_VAR 0 3
2413: PUSH
2414: CALL_OW 44
2418: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: LD_VAR 0 2
2428: PPUSH
2429: LD_INT 1
2431: PPUSH
2432: LD_VAR 0 3
2436: PPUSH
2437: CALL_OW 2
2441: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2442: LD_VAR 0 3
2446: PPUSH
2447: LD_INT 2
2449: PPUSH
2450: LD_INT 0
2452: PPUSH
2453: CALL_OW 49
// end ;
2457: GO 2360
2459: POP
2460: POP
// cornel_units := tmp ;
2461: LD_ADDR_EXP 6
2465: PUSH
2466: LD_VAR 0 2
2470: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2471: LD_EXP 44
2475: PPUSH
2476: LD_INT 191
2478: PPUSH
2479: LD_INT 106
2481: PPUSH
2482: LD_INT 0
2484: PPUSH
2485: CALL_OW 48
// end ;
2489: LD_VAR 0 1
2493: RET
// export function PrepareWesternBase ; var i ; begin
2494: LD_INT 0
2496: PPUSH
2497: PPUSH
// uc_side := 8 ;
2498: LD_ADDR_OWVAR 20
2502: PUSH
2503: LD_INT 8
2505: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2506: LD_ADDR_EXP 47
2510: PUSH
2511: LD_STRING Lynch
2513: PPUSH
2514: LD_INT 0
2516: PPUSH
2517: LD_STRING 
2519: PPUSH
2520: CALL 35876 0 3
2524: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2525: LD_ADDR_EXP 48
2529: PUSH
2530: LD_STRING Walker
2532: PPUSH
2533: LD_INT 0
2535: PPUSH
2536: LD_STRING 
2538: PPUSH
2539: CALL 35876 0 3
2543: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2544: LD_ADDR_EXP 49
2548: PUSH
2549: LD_STRING Turner
2551: PPUSH
2552: LD_INT 0
2554: PPUSH
2555: LD_STRING 
2557: PPUSH
2558: CALL 35876 0 3
2562: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2563: LD_ADDR_EXP 50
2567: PUSH
2568: LD_STRING Jillian
2570: PPUSH
2571: LD_INT 0
2573: PPUSH
2574: LD_STRING 
2576: PPUSH
2577: CALL 35876 0 3
2581: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2582: LD_ADDR_VAR 0 2
2586: PUSH
2587: LD_EXP 47
2591: PUSH
2592: LD_EXP 48
2596: PUSH
2597: LD_EXP 49
2601: PUSH
2602: LD_EXP 50
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: PUSH
2613: FOR_IN
2614: IFFALSE 2642
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
2616: LD_VAR 0 2
2620: PPUSH
2621: LD_INT 3
2623: PPUSH
2624: LD_INT 0
2626: PPUSH
2627: CALL_OW 49
// ComHold ( i ) ;
2631: LD_VAR 0 2
2635: PPUSH
2636: CALL_OW 140
// end ;
2640: GO 2613
2642: POP
2643: POP
// end ;
2644: LD_VAR 0 1
2648: RET
// export function SelectGroup ; var units , selected , i ; begin
2649: LD_INT 0
2651: PPUSH
2652: PPUSH
2653: PPUSH
2654: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
2655: LD_ADDR_VAR 0 2
2659: PUSH
2660: LD_EXP 37
2664: PUSH
2665: LD_INT -3
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_EXP 4
2676: ADD
2677: PUSH
2678: LD_INT -2
2680: PUSH
2681: LD_INT -4
2683: PUSH
2684: LD_EXP 44
2688: PUSH
2689: LD_EXP 45
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: LIST
2698: LIST
2699: ADD
2700: PUSH
2701: LD_INT -3
2703: PUSH
2704: EMPTY
2705: LIST
2706: ADD
2707: PUSH
2708: LD_EXP 6
2712: ADD
2713: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select five characters to go with you , 4 , 4 , units , [ ] ) ;
2714: LD_ADDR_VAR 0 3
2718: PUSH
2719: LD_EXP 37
2723: PUSH
2724: LD_STRING Select five characters to go with you
2726: PPUSH
2727: LD_INT 4
2729: PPUSH
2730: LD_INT 4
2732: PPUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: EMPTY
2739: PPUSH
2740: CALL_OW 42
2744: ADD
2745: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
2746: LD_ADDR_EXP 6
2750: PUSH
2751: LD_EXP 4
2755: PUSH
2756: LD_EXP 6
2760: UNION
2761: PUSH
2762: LD_VAR 0 3
2766: DIFF
2767: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
2768: LD_ADDR_VAR 0 4
2772: PUSH
2773: LD_EXP 6
2777: PUSH
2778: LD_EXP 45
2782: ADD
2783: PUSH
2784: FOR_IN
2785: IFFALSE 2816
// if GetSide ( i ) = 1 then
2787: LD_VAR 0 4
2791: PPUSH
2792: CALL_OW 255
2796: PUSH
2797: LD_INT 1
2799: EQUAL
2800: IFFALSE 2814
// SetSide ( i , 4 ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 4
2809: PPUSH
2810: CALL_OW 235
2814: GO 2784
2816: POP
2817: POP
// for i in selected do
2818: LD_ADDR_VAR 0 4
2822: PUSH
2823: LD_VAR 0 3
2827: PUSH
2828: FOR_IN
2829: IFFALSE 2860
// if GetSide ( i ) = 4 then
2831: LD_VAR 0 4
2835: PPUSH
2836: CALL_OW 255
2840: PUSH
2841: LD_INT 4
2843: EQUAL
2844: IFFALSE 2858
// SetSide ( i , 1 ) ;
2846: LD_VAR 0 4
2850: PPUSH
2851: LD_INT 1
2853: PPUSH
2854: CALL_OW 235
2858: GO 2828
2860: POP
2861: POP
// jmm_units := jmm_units diff cornel_units ;
2862: LD_ADDR_EXP 4
2866: PUSH
2867: LD_EXP 4
2871: PUSH
2872: LD_EXP 6
2876: DIFF
2877: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
2878: LD_EXP 38
2882: PPUSH
2883: CALL_OW 255
2887: PUSH
2888: LD_INT 4
2890: EQUAL
2891: IFFALSE 2906
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
2893: LD_EXP 3
2897: PUSH
2898: LD_STRING Bobby
2900: STR
2901: PPUSH
2902: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
2906: LD_EXP 39
2910: PPUSH
2911: CALL_OW 255
2915: PUSH
2916: LD_INT 4
2918: EQUAL
2919: IFFALSE 2934
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
2921: LD_EXP 3
2925: PUSH
2926: LD_STRING Cyrus
2928: STR
2929: PPUSH
2930: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
2934: LD_EXP 40
2938: PPUSH
2939: CALL_OW 255
2943: PUSH
2944: LD_INT 4
2946: EQUAL
2947: IFFALSE 2962
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
2949: LD_EXP 3
2953: PUSH
2954: LD_STRING Lisa
2956: STR
2957: PPUSH
2958: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
2962: LD_EXP 41
2966: PPUSH
2967: CALL_OW 255
2971: PUSH
2972: LD_INT 4
2974: EQUAL
2975: IFFALSE 2990
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
2977: LD_EXP 3
2981: PUSH
2982: LD_STRING Khatam
2984: STR
2985: PPUSH
2986: CALL_OW 40
// if GetSide ( Brian ) = 4 then
2990: LD_EXP 42
2994: PPUSH
2995: CALL_OW 255
2999: PUSH
3000: LD_INT 4
3002: EQUAL
3003: IFFALSE 3018
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3005: LD_EXP 3
3009: PUSH
3010: LD_STRING Brian
3012: STR
3013: PPUSH
3014: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3018: LD_EXP 43
3022: PPUSH
3023: CALL_OW 255
3027: PUSH
3028: LD_INT 4
3030: EQUAL
3031: IFFALSE 3046
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3033: LD_EXP 3
3037: PUSH
3038: LD_STRING Jerry
3040: STR
3041: PPUSH
3042: CALL_OW 40
// end ; end_of_file
3046: LD_VAR 0 1
3050: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3051: LD_INT 0
3053: PPUSH
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
3058: PPUSH
3059: PPUSH
3060: PPUSH
3061: PPUSH
3062: PPUSH
3063: PPUSH
3064: PPUSH
3065: PPUSH
// ru_alert := false ;
3066: LD_ADDR_EXP 60
3070: PUSH
3071: LD_INT 0
3073: ST_TO_ADDR
// ru_produce_list := [ ] ;
3074: LD_ADDR_EXP 57
3078: PUSH
3079: EMPTY
3080: ST_TO_ADDR
// if Difficulty > 1 then
3081: LD_OWVAR 67
3085: PUSH
3086: LD_INT 1
3088: GREATER
3089: IFFALSE 3177
// begin uc_side := 3 ;
3091: LD_ADDR_OWVAR 20
3095: PUSH
3096: LD_INT 3
3098: ST_TO_ADDR
// uc_nation := 3 ;
3099: LD_ADDR_OWVAR 21
3103: PUSH
3104: LD_INT 3
3106: ST_TO_ADDR
// bc_type := b_breastwork ;
3107: LD_ADDR_OWVAR 42
3111: PUSH
3112: LD_INT 31
3114: ST_TO_ADDR
// bc_level := Difficulty ;
3115: LD_ADDR_OWVAR 43
3119: PUSH
3120: LD_OWVAR 67
3124: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3125: LD_INT 22
3127: PPUSH
3128: LD_INT 14
3130: PPUSH
3131: LD_INT 0
3133: PPUSH
3134: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3138: LD_INT 48
3140: PPUSH
3141: LD_INT 46
3143: PPUSH
3144: LD_INT 0
3146: PPUSH
3147: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3151: LD_INT 86
3153: PPUSH
3154: LD_INT 65
3156: PPUSH
3157: LD_INT 5
3159: PPUSH
3160: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3164: LD_INT 165
3166: PPUSH
3167: LD_INT 73
3169: PPUSH
3170: LD_INT 5
3172: PPUSH
3173: CALL_OW 47
// end ; if Difficulty = 3 then
3177: LD_OWVAR 67
3181: PUSH
3182: LD_INT 3
3184: EQUAL
3185: IFFALSE 3200
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3187: LD_INT 51
3189: PPUSH
3190: LD_INT 3
3192: PPUSH
3193: LD_INT 2
3195: PPUSH
3196: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3200: LD_ADDR_VAR 0 7
3204: PUSH
3205: LD_INT 22
3207: PUSH
3208: LD_INT 3
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: LD_INT 30
3220: PUSH
3221: LD_INT 31
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PUSH
3228: LD_INT 30
3230: PUSH
3231: LD_INT 32
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PPUSH
3247: CALL_OW 69
3251: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3252: LD_ADDR_VAR 0 8
3256: PUSH
3257: LD_INT 22
3259: PUSH
3260: LD_INT 3
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: LD_INT 30
3269: PUSH
3270: LD_INT 4
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PPUSH
3281: CALL_OW 69
3285: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3286: LD_ADDR_VAR 0 10
3290: PUSH
3291: LD_INT 22
3293: PUSH
3294: LD_INT 3
3296: PUSH
3297: EMPTY
3298: LIST
3299: LIST
3300: PUSH
3301: LD_INT 30
3303: PUSH
3304: LD_INT 3
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PPUSH
3315: CALL_OW 69
3319: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3320: LD_ADDR_VAR 0 9
3324: PUSH
3325: LD_INT 22
3327: PUSH
3328: LD_INT 3
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PUSH
3335: LD_INT 30
3337: PUSH
3338: LD_INT 6
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PPUSH
3349: CALL_OW 69
3353: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3354: LD_ADDR_VAR 0 2
3358: PUSH
3359: LD_INT 22
3361: PUSH
3362: LD_INT 3
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 30
3371: PUSH
3372: LD_INT 1
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PPUSH
3383: CALL_OW 69
3387: PUSH
3388: FOR_IN
3389: IFFALSE 3433
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3391: LD_VAR 0 2
3395: PPUSH
3396: CALL_OW 274
3400: PPUSH
3401: LD_INT 1
3403: PPUSH
3404: LD_INT 1000
3406: PPUSH
3407: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3411: LD_VAR 0 2
3415: PPUSH
3416: CALL_OW 274
3420: PPUSH
3421: LD_INT 2
3423: PPUSH
3424: LD_INT 300
3426: PPUSH
3427: CALL_OW 277
// end ;
3431: GO 3388
3433: POP
3434: POP
// uc_side := 3 ;
3435: LD_ADDR_OWVAR 20
3439: PUSH
3440: LD_INT 3
3442: ST_TO_ADDR
// uc_nation := 3 ;
3443: LD_ADDR_OWVAR 21
3447: PUSH
3448: LD_INT 3
3450: ST_TO_ADDR
// skill := [ 2 , 3 , 4 ] [ Difficulty ] ;
3451: LD_ADDR_VAR 0 11
3455: PUSH
3456: LD_INT 2
3458: PUSH
3459: LD_INT 3
3461: PUSH
3462: LD_INT 4
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: LIST
3469: PUSH
3470: LD_OWVAR 67
3474: ARRAY
3475: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3476: LD_ADDR_EXP 52
3480: PUSH
3481: LD_STRING Pokryshkin
3483: PPUSH
3484: LD_INT 0
3486: PPUSH
3487: LD_STRING 
3489: PPUSH
3490: CALL 35876 0 3
3494: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3495: LD_EXP 52
3499: PPUSH
3500: LD_INT 63
3502: PPUSH
3503: LD_INT 21
3505: PPUSH
3506: LD_INT 0
3508: PPUSH
3509: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3513: LD_EXP 52
3517: PPUSH
3518: CALL_OW 140
// InitHc ;
3522: CALL_OW 19
// for i in fac do
3526: LD_ADDR_VAR 0 2
3530: PUSH
3531: LD_VAR 0 10
3535: PUSH
3536: FOR_IN
3537: IFFALSE 3590
// begin for j = 1 to 6 do
3539: LD_ADDR_VAR 0 3
3543: PUSH
3544: DOUBLE
3545: LD_INT 1
3547: DEC
3548: ST_TO_ADDR
3549: LD_INT 6
3551: PUSH
3552: FOR_TO
3553: IFFALSE 3586
// begin PrepareHuman ( false , 3 , skill ) ;
3555: LD_INT 0
3557: PPUSH
3558: LD_INT 3
3560: PPUSH
3561: LD_VAR 0 11
3565: PPUSH
3566: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3570: CALL_OW 44
3574: PPUSH
3575: LD_VAR 0 2
3579: PPUSH
3580: CALL_OW 52
// end ;
3584: GO 3552
3586: POP
3587: POP
// end ;
3588: GO 3536
3590: POP
3591: POP
// for i in lab do
3592: LD_ADDR_VAR 0 2
3596: PUSH
3597: LD_VAR 0 9
3601: PUSH
3602: FOR_IN
3603: IFFALSE 3636
// begin PrepareHuman ( false , 4 , skill ) ;
3605: LD_INT 0
3607: PPUSH
3608: LD_INT 4
3610: PPUSH
3611: LD_VAR 0 11
3615: PPUSH
3616: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3620: CALL_OW 44
3624: PPUSH
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 52
// end ;
3634: GO 3602
3636: POP
3637: POP
// for i in tw do
3638: LD_ADDR_VAR 0 2
3642: PUSH
3643: LD_VAR 0 7
3647: PUSH
3648: FOR_IN
3649: IFFALSE 3698
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
3651: LD_VAR 0 2
3655: PPUSH
3656: LD_INT 42
3658: PUSH
3659: LD_INT 43
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: PUSH
3666: LD_INT 1
3668: PPUSH
3669: LD_INT 2
3671: PPUSH
3672: CALL_OW 12
3676: ARRAY
3677: PPUSH
3678: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
3682: LD_VAR 0 11
3686: PPUSH
3687: LD_VAR 0 2
3691: PPUSH
3692: CALL 767 0 2
// end ;
3696: GO 3648
3698: POP
3699: POP
// for i in bar do
3700: LD_ADDR_VAR 0 2
3704: PUSH
3705: LD_VAR 0 8
3709: PUSH
3710: FOR_IN
3711: IFFALSE 3744
// begin PrepareHuman ( false , 1 , skill ) ;
3713: LD_INT 0
3715: PPUSH
3716: LD_INT 1
3718: PPUSH
3719: LD_VAR 0 11
3723: PPUSH
3724: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3728: CALL_OW 44
3732: PPUSH
3733: LD_VAR 0 2
3737: PPUSH
3738: CALL_OW 52
// end ;
3742: GO 3710
3744: POP
3745: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
3746: LD_ADDR_VAR 0 13
3750: PUSH
3751: LD_INT 100
3753: PUSH
3754: LD_INT 9
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 135
3763: PUSH
3764: LD_INT 60
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: LD_INT 41
3773: PUSH
3774: LD_INT 6
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_INT 22
3783: PUSH
3784: LD_INT 9
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: PUSH
3791: LD_INT 84
3793: PUSH
3794: LD_INT 14
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: ST_TO_ADDR
// vehicles := [ ] ;
3808: LD_ADDR_VAR 0 12
3812: PUSH
3813: EMPTY
3814: ST_TO_ADDR
// for i in spot_xy do
3815: LD_ADDR_VAR 0 2
3819: PUSH
3820: LD_VAR 0 13
3824: PUSH
3825: FOR_IN
3826: IFFALSE 3984
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
3828: LD_ADDR_VAR 0 6
3832: PUSH
3833: LD_INT 3
3835: PPUSH
3836: LD_INT 3
3838: PPUSH
3839: LD_INT 22
3841: PPUSH
3842: LD_INT 1
3844: PPUSH
3845: LD_INT 1
3847: PPUSH
3848: LD_INT 42
3850: PUSH
3851: LD_INT 43
3853: PUSH
3854: LD_INT 44
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: LIST
3861: PUSH
3862: LD_INT 1
3864: PPUSH
3865: LD_INT 3
3867: PPUSH
3868: CALL_OW 12
3872: ARRAY
3873: PPUSH
3874: LD_INT 100
3876: PPUSH
3877: CALL 489 0 7
3881: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
3882: LD_ADDR_VAR 0 12
3886: PUSH
3887: LD_VAR 0 12
3891: PPUSH
3892: LD_VAR 0 12
3896: PUSH
3897: LD_INT 1
3899: PLUS
3900: PPUSH
3901: LD_VAR 0 6
3905: PPUSH
3906: CALL_OW 2
3910: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3911: LD_VAR 0 6
3915: PPUSH
3916: LD_INT 3
3918: PPUSH
3919: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
3923: LD_VAR 0 6
3927: PPUSH
3928: LD_VAR 0 2
3932: PUSH
3933: LD_INT 1
3935: ARRAY
3936: PPUSH
3937: LD_VAR 0 2
3941: PUSH
3942: LD_INT 2
3944: ARRAY
3945: PPUSH
3946: LD_INT 0
3948: PPUSH
3949: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 3
3958: PPUSH
3959: LD_VAR 0 11
3963: PPUSH
3964: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3968: CALL_OW 44
3972: PPUSH
3973: LD_VAR 0 6
3977: PPUSH
3978: CALL_OW 52
// end ;
3982: GO 3825
3984: POP
3985: POP
// for i = 1 to [ 5 , 7 , 8 ] [ Difficulty ] do
3986: LD_ADDR_VAR 0 2
3990: PUSH
3991: DOUBLE
3992: LD_INT 1
3994: DEC
3995: ST_TO_ADDR
3996: LD_INT 5
3998: PUSH
3999: LD_INT 7
4001: PUSH
4002: LD_INT 8
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: PUSH
4010: LD_OWVAR 67
4014: ARRAY
4015: PUSH
4016: FOR_TO
4017: IFFALSE 4077
// begin PrepareHuman ( false , 1 , skill ) ;
4019: LD_INT 0
4021: PPUSH
4022: LD_INT 1
4024: PPUSH
4025: LD_VAR 0 11
4029: PPUSH
4030: CALL_OW 380
// un := CreateHuman ;
4034: LD_ADDR_VAR 0 5
4038: PUSH
4039: CALL_OW 44
4043: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4044: LD_VAR 0 5
4048: PPUSH
4049: LD_INT 11
4051: PPUSH
4052: LD_INT 0
4054: PPUSH
4055: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4059: LD_ADDR_EXP 55
4063: PUSH
4064: LD_EXP 55
4068: PUSH
4069: LD_VAR 0 5
4073: ADD
4074: ST_TO_ADDR
// end ;
4075: GO 4016
4077: POP
4078: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4079: LD_ADDR_VAR 0 2
4083: PUSH
4084: DOUBLE
4085: LD_INT 1
4087: DEC
4088: ST_TO_ADDR
4089: LD_INT 2
4091: PUSH
4092: LD_INT 3
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: PUSH
4103: LD_OWVAR 67
4107: ARRAY
4108: PUSH
4109: FOR_TO
4110: IFFALSE 4170
// begin PrepareHuman ( false , 1 , skill ) ;
4112: LD_INT 0
4114: PPUSH
4115: LD_INT 1
4117: PPUSH
4118: LD_VAR 0 11
4122: PPUSH
4123: CALL_OW 380
// un := CreateHuman ;
4127: LD_ADDR_VAR 0 5
4131: PUSH
4132: CALL_OW 44
4136: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4137: LD_VAR 0 5
4141: PPUSH
4142: LD_INT 12
4144: PPUSH
4145: LD_INT 0
4147: PPUSH
4148: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4152: LD_ADDR_EXP 53
4156: PUSH
4157: LD_EXP 53
4161: PUSH
4162: LD_VAR 0 5
4166: ADD
4167: ST_TO_ADDR
// end ;
4168: GO 4109
4170: POP
4171: POP
// for i = 1 to 2 do
4172: LD_ADDR_VAR 0 2
4176: PUSH
4177: DOUBLE
4178: LD_INT 1
4180: DEC
4181: ST_TO_ADDR
4182: LD_INT 2
4184: PUSH
4185: FOR_TO
4186: IFFALSE 4252
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4188: LD_INT 1
4190: PPUSH
4191: LD_INT 1
4193: PPUSH
4194: LD_VAR 0 11
4198: PPUSH
4199: CALL_OW 380
// un := CreateHuman ;
4203: LD_ADDR_VAR 0 5
4207: PUSH
4208: CALL_OW 44
4212: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4213: LD_VAR 0 5
4217: PPUSH
4218: LD_INT 39
4220: PPUSH
4221: LD_INT 12
4223: PPUSH
4224: LD_INT 3
4226: PPUSH
4227: LD_INT 0
4229: PPUSH
4230: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4234: LD_ADDR_EXP 54
4238: PUSH
4239: LD_EXP 54
4243: PUSH
4244: LD_VAR 0 5
4248: ADD
4249: ST_TO_ADDR
// end ;
4250: GO 4185
4252: POP
4253: POP
// for i = 1 to 3 do
4254: LD_ADDR_VAR 0 2
4258: PUSH
4259: DOUBLE
4260: LD_INT 1
4262: DEC
4263: ST_TO_ADDR
4264: LD_INT 3
4266: PUSH
4267: FOR_TO
4268: IFFALSE 4334
// begin PrepareHuman ( false , 1 , skill ) ;
4270: LD_INT 0
4272: PPUSH
4273: LD_INT 1
4275: PPUSH
4276: LD_VAR 0 11
4280: PPUSH
4281: CALL_OW 380
// un := CreateHuman ;
4285: LD_ADDR_VAR 0 5
4289: PUSH
4290: CALL_OW 44
4294: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4295: LD_VAR 0 5
4299: PPUSH
4300: LD_INT 180
4302: PPUSH
4303: LD_INT 11
4305: PPUSH
4306: LD_INT 4
4308: PPUSH
4309: LD_INT 0
4311: PPUSH
4312: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4316: LD_ADDR_EXP 58
4320: PUSH
4321: LD_EXP 58
4325: PUSH
4326: LD_VAR 0 5
4330: ADD
4331: ST_TO_ADDR
// end ;
4332: GO 4267
4334: POP
4335: POP
// ru_vehicles := vehicles ;
4336: LD_ADDR_EXP 56
4340: PUSH
4341: LD_VAR 0 12
4345: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4346: LD_ADDR_EXP 59
4350: PUSH
4351: LD_INT 131
4353: PUSH
4354: LD_INT 121
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: LD_INT 113
4363: PUSH
4364: LD_INT 90
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 93
4373: PUSH
4374: LD_INT 62
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: LIST
4385: PUSH
4386: LD_INT 106
4388: PUSH
4389: LD_INT 54
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PUSH
4396: LD_INT 120
4398: PUSH
4399: LD_INT 80
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 143
4408: PUSH
4409: LD_INT 120
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: LIST
4420: PUSH
4421: LD_INT 154
4423: PUSH
4424: LD_INT 116
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 140
4433: PUSH
4434: LD_INT 93
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 130
4443: PUSH
4444: LD_INT 58
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: PUSH
4456: LD_INT 105
4458: PUSH
4459: LD_INT 106
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: LD_INT 134
4468: PUSH
4469: LD_INT 98
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: LD_INT 159
4478: PUSH
4479: LD_INT 113
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: ST_TO_ADDR
// if Difficulty = 1 then
4497: LD_OWVAR 67
4501: PUSH
4502: LD_INT 1
4504: EQUAL
4505: IFFALSE 4509
// exit ;
4507: GO 4564
// for i = 1 to Difficulty - 1 do
4509: LD_ADDR_VAR 0 2
4513: PUSH
4514: DOUBLE
4515: LD_INT 1
4517: DEC
4518: ST_TO_ADDR
4519: LD_OWVAR 67
4523: PUSH
4524: LD_INT 1
4526: MINUS
4527: PUSH
4528: FOR_TO
4529: IFFALSE 4562
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
4531: LD_ADDR_EXP 57
4535: PUSH
4536: LD_EXP 57
4540: PUSH
4541: LD_INT 22
4543: PUSH
4544: LD_INT 1
4546: PUSH
4547: LD_INT 1
4549: PUSH
4550: LD_INT 43
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: ADD
4559: ST_TO_ADDR
4560: GO 4528
4562: POP
4563: POP
// end ;
4564: LD_VAR 0 1
4568: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
4569: LD_INT 22
4571: PUSH
4572: LD_INT 3
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: LD_INT 21
4581: PUSH
4582: LD_INT 2
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PPUSH
4593: CALL_OW 69
4597: IFFALSE 4691
4599: GO 4601
4601: DISABLE
4602: LD_INT 0
4604: PPUSH
4605: PPUSH
// begin enable ;
4606: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4607: LD_ADDR_VAR 0 2
4611: PUSH
4612: LD_INT 22
4614: PUSH
4615: LD_INT 3
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 21
4624: PUSH
4625: LD_INT 2
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PPUSH
4636: CALL_OW 69
4640: ST_TO_ADDR
// if filter then
4641: LD_VAR 0 2
4645: IFFALSE 4691
// for i in filter do
4647: LD_ADDR_VAR 0 1
4651: PUSH
4652: LD_VAR 0 2
4656: PUSH
4657: FOR_IN
4658: IFFALSE 4689
// if GetFuel ( i ) < 20 then
4660: LD_VAR 0 1
4664: PPUSH
4665: CALL_OW 261
4669: PUSH
4670: LD_INT 20
4672: LESS
4673: IFFALSE 4687
// SetFuel ( i , 20 ) ;
4675: LD_VAR 0 1
4679: PPUSH
4680: LD_INT 20
4682: PPUSH
4683: CALL_OW 240
4687: GO 4657
4689: POP
4690: POP
// end ;
4691: PPOPN 2
4693: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
4694: LD_EXP 57
4698: IFFALSE 4917
4700: GO 4702
4702: DISABLE
4703: LD_INT 0
4705: PPUSH
4706: PPUSH
4707: PPUSH
// begin enable ;
4708: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4709: LD_ADDR_VAR 0 2
4713: PUSH
4714: LD_INT 22
4716: PUSH
4717: LD_INT 3
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 30
4726: PUSH
4727: LD_INT 3
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: PPUSH
4738: CALL_OW 69
4742: ST_TO_ADDR
// can_produce := [ ] ;
4743: LD_ADDR_VAR 0 3
4747: PUSH
4748: EMPTY
4749: ST_TO_ADDR
// if not fac then
4750: LD_VAR 0 2
4754: NOT
4755: IFFALSE 4760
// begin disable ;
4757: DISABLE
// exit ;
4758: GO 4917
// end ; for i in fac do
4760: LD_ADDR_VAR 0 1
4764: PUSH
4765: LD_VAR 0 2
4769: PUSH
4770: FOR_IN
4771: IFFALSE 4809
// if UnitsInside ( i ) then
4773: LD_VAR 0 1
4777: PPUSH
4778: CALL_OW 313
4782: IFFALSE 4807
// can_produce := Insert ( can_produce , 1 , i ) ;
4784: LD_ADDR_VAR 0 3
4788: PUSH
4789: LD_VAR 0 3
4793: PPUSH
4794: LD_INT 1
4796: PPUSH
4797: LD_VAR 0 1
4801: PPUSH
4802: CALL_OW 2
4806: ST_TO_ADDR
4807: GO 4770
4809: POP
4810: POP
// if not can_produce then
4811: LD_VAR 0 3
4815: NOT
4816: IFFALSE 4820
// exit ;
4818: GO 4917
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
4820: LD_VAR 0 3
4824: PUSH
4825: LD_INT 1
4827: PPUSH
4828: LD_VAR 0 3
4832: PPUSH
4833: CALL_OW 12
4837: ARRAY
4838: PPUSH
4839: LD_EXP 57
4843: PUSH
4844: LD_INT 1
4846: ARRAY
4847: PPUSH
4848: LD_EXP 57
4852: PUSH
4853: LD_INT 2
4855: ARRAY
4856: PPUSH
4857: LD_EXP 57
4861: PUSH
4862: LD_INT 3
4864: ARRAY
4865: PPUSH
4866: LD_EXP 57
4870: PUSH
4871: LD_INT 4
4873: ARRAY
4874: PPUSH
4875: CALL_OW 125
// for i = 1 to 4 do
4879: LD_ADDR_VAR 0 1
4883: PUSH
4884: DOUBLE
4885: LD_INT 1
4887: DEC
4888: ST_TO_ADDR
4889: LD_INT 4
4891: PUSH
4892: FOR_TO
4893: IFFALSE 4915
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
4895: LD_ADDR_EXP 57
4899: PUSH
4900: LD_EXP 57
4904: PPUSH
4905: LD_INT 1
4907: PPUSH
4908: CALL_OW 3
4912: ST_TO_ADDR
4913: GO 4892
4915: POP
4916: POP
// end ;
4917: PPOPN 3
4919: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
4920: LD_INT 0
4922: PPUSH
4923: PPUSH
4924: PPUSH
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4925: LD_ADDR_VAR 0 2
4929: PUSH
4930: DOUBLE
4931: LD_INT 1
4933: DEC
4934: ST_TO_ADDR
4935: LD_INT 2
4937: PUSH
4938: LD_INT 3
4940: PUSH
4941: LD_INT 4
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: PUSH
4949: LD_OWVAR 67
4953: ARRAY
4954: PUSH
4955: FOR_TO
4956: IFFALSE 5105
// begin PrepareHuman ( false , 3 , 3 ) ;
4958: LD_INT 0
4960: PPUSH
4961: LD_INT 3
4963: PPUSH
4964: LD_INT 3
4966: PPUSH
4967: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
4971: LD_ADDR_VAR 0 3
4975: PUSH
4976: LD_INT 3
4978: PPUSH
4979: LD_INT 3
4981: PPUSH
4982: LD_INT 22
4984: PPUSH
4985: LD_INT 1
4987: PPUSH
4988: LD_INT 1
4990: PPUSH
4991: LD_INT 43
4993: PUSH
4994: LD_INT 42
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PUSH
5001: LD_INT 1
5003: PPUSH
5004: LD_INT 2
5006: PPUSH
5007: CALL_OW 12
5011: ARRAY
5012: PPUSH
5013: LD_INT 70
5015: PPUSH
5016: CALL 489 0 7
5020: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5021: LD_VAR 0 3
5025: PPUSH
5026: LD_INT 4
5028: PPUSH
5029: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5033: LD_VAR 0 3
5037: PPUSH
5038: LD_INT 229
5040: PPUSH
5041: LD_INT 44
5043: PPUSH
5044: LD_INT 0
5046: PPUSH
5047: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5051: CALL_OW 44
5055: PPUSH
5056: LD_VAR 0 3
5060: PPUSH
5061: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5065: LD_ADDR_EXP 56
5069: PUSH
5070: LD_EXP 56
5074: PUSH
5075: LD_VAR 0 3
5079: ADD
5080: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5081: LD_VAR 0 3
5085: PPUSH
5086: LD_INT 191
5088: PPUSH
5089: LD_INT 32
5091: PPUSH
5092: CALL_OW 111
// Wait ( 0 0$02 ) ;
5096: LD_INT 70
5098: PPUSH
5099: CALL_OW 67
// end ;
5103: GO 4955
5105: POP
5106: POP
// end ;
5107: LD_VAR 0 1
5111: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5112: LD_EXP 31
5116: PUSH
5117: LD_EXP 56
5121: AND
5122: IFFALSE 5296
5124: GO 5126
5126: DISABLE
5127: LD_INT 0
5129: PPUSH
5130: PPUSH
5131: PPUSH
// begin wait ( 0 0$50 ) ;
5132: LD_INT 1750
5134: PPUSH
5135: CALL_OW 67
// tmp := ru_vehicles ;
5139: LD_ADDR_VAR 0 3
5143: PUSH
5144: LD_EXP 56
5148: ST_TO_ADDR
// if not tmp then
5149: LD_VAR 0 3
5153: NOT
5154: IFFALSE 5158
// exit ;
5156: GO 5296
// repeat wait ( 0 0$1 ) ;
5158: LD_INT 35
5160: PPUSH
5161: CALL_OW 67
// for i in tmp do
5165: LD_ADDR_VAR 0 1
5169: PUSH
5170: LD_VAR 0 3
5174: PUSH
5175: FOR_IN
5176: IFFALSE 5287
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5178: LD_ADDR_VAR 0 2
5182: PUSH
5183: LD_INT 22
5185: PUSH
5186: LD_INT 1
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: PPUSH
5193: LD_VAR 0 1
5197: PPUSH
5198: CALL_OW 74
5202: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 2
5212: PPUSH
5213: CALL_OW 296
5217: PUSH
5218: LD_INT 10
5220: GREATER
5221: IFFALSE 5240
// ComAgressiveMove ( i , 69 , 101 ) else
5223: LD_VAR 0 1
5227: PPUSH
5228: LD_INT 69
5230: PPUSH
5231: LD_INT 101
5233: PPUSH
5234: CALL_OW 114
5238: GO 5254
// ComAttackUnit ( i , enemy ) ;
5240: LD_VAR 0 1
5244: PPUSH
5245: LD_VAR 0 2
5249: PPUSH
5250: CALL_OW 115
// if GetLives ( i ) < 250 then
5254: LD_VAR 0 1
5258: PPUSH
5259: CALL_OW 256
5263: PUSH
5264: LD_INT 250
5266: LESS
5267: IFFALSE 5285
// tmp := tmp diff i ;
5269: LD_ADDR_VAR 0 3
5273: PUSH
5274: LD_VAR 0 3
5278: PUSH
5279: LD_VAR 0 1
5283: DIFF
5284: ST_TO_ADDR
// end ;
5285: GO 5175
5287: POP
5288: POP
// until not tmp ;
5289: LD_VAR 0 3
5293: NOT
5294: IFFALSE 5158
// end ; end_of_file
5296: PPOPN 3
5298: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5299: LD_INT 0
5301: PPUSH
5302: PPUSH
5303: PPUSH
5304: PPUSH
5305: PPUSH
5306: PPUSH
5307: PPUSH
// InGameOn ;
5308: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5312: LD_EXP 37
5316: PPUSH
5317: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5321: LD_EXP 37
5325: PPUSH
5326: LD_EXP 44
5330: PPUSH
5331: CALL_OW 119
// if Bierezov then
5335: LD_EXP 45
5339: IFFALSE 5355
// ComTurnUnit ( Bierezov , Cornel ) ;
5341: LD_EXP 45
5345: PPUSH
5346: LD_EXP 44
5350: PPUSH
5351: CALL_OW 119
// for i in jmm_units do
5355: LD_ADDR_VAR 0 2
5359: PUSH
5360: LD_EXP 4
5364: PUSH
5365: FOR_IN
5366: IFFALSE 5384
// ComTurnUnit ( i , Cornel ) ;
5368: LD_VAR 0 2
5372: PPUSH
5373: LD_EXP 44
5377: PPUSH
5378: CALL_OW 119
5382: GO 5365
5384: POP
5385: POP
// units := cornel_units union Cornel ;
5386: LD_ADDR_VAR 0 3
5390: PUSH
5391: LD_EXP 6
5395: PUSH
5396: LD_EXP 44
5400: UNION
5401: ST_TO_ADDR
// repeat wait ( 1 ) ;
5402: LD_INT 1
5404: PPUSH
5405: CALL_OW 67
// for i in units do
5409: LD_ADDR_VAR 0 2
5413: PUSH
5414: LD_VAR 0 3
5418: PUSH
5419: FOR_IN
5420: IFFALSE 5453
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5422: LD_VAR 0 2
5426: PPUSH
5427: LD_EXP 37
5431: PPUSH
5432: CALL_OW 250
5436: PPUSH
5437: LD_EXP 37
5441: PPUSH
5442: CALL_OW 251
5446: PPUSH
5447: CALL_OW 111
5451: GO 5419
5453: POP
5454: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5455: LD_VAR 0 3
5459: PPUSH
5460: LD_INT 92
5462: PUSH
5463: LD_EXP 37
5467: PPUSH
5468: CALL_OW 250
5472: PUSH
5473: LD_EXP 37
5477: PPUSH
5478: CALL_OW 251
5482: PUSH
5483: LD_INT 10
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: PPUSH
5492: CALL_OW 72
5496: PUSH
5497: LD_VAR 0 3
5501: EQUAL
5502: IFFALSE 5402
// for i in units do
5504: LD_ADDR_VAR 0 2
5508: PUSH
5509: LD_VAR 0 3
5513: PUSH
5514: FOR_IN
5515: IFFALSE 5533
// ComTurnUnit ( i , JMM ) ;
5517: LD_VAR 0 2
5521: PPUSH
5522: LD_EXP 37
5526: PPUSH
5527: CALL_OW 119
5531: GO 5514
5533: POP
5534: POP
// ComTurnUnit ( Cornel , JMM ) ;
5535: LD_EXP 44
5539: PPUSH
5540: LD_EXP 37
5544: PPUSH
5545: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
5549: LD_EXP 37
5553: PPUSH
5554: LD_STRING D1-JMM-1
5556: PPUSH
5557: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
5561: LD_EXP 44
5565: PPUSH
5566: LD_STRING D1-Corn-1
5568: PPUSH
5569: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
5573: LD_EXP 37
5577: PPUSH
5578: LD_EXP 44
5582: PPUSH
5583: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
5587: LD_EXP 44
5591: PPUSH
5592: LD_EXP 37
5596: PPUSH
5597: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
5601: LD_INT 35
5603: PPUSH
5604: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
5608: LD_EXP 37
5612: PPUSH
5613: LD_EXP 44
5617: PPUSH
5618: CALL_OW 296
5622: PUSH
5623: LD_INT 6
5625: LESS
5626: IFFALSE 5601
// ChangeSideFog ( 4 , 1 ) ;
5628: LD_INT 4
5630: PPUSH
5631: LD_INT 1
5633: PPUSH
5634: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
5638: LD_EXP 37
5642: PPUSH
5643: LD_EXP 44
5647: PPUSH
5648: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5652: LD_EXP 44
5656: PPUSH
5657: LD_EXP 37
5661: PPUSH
5662: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
5666: LD_EXP 37
5670: PPUSH
5671: LD_STRING D1-JMM-2
5673: PPUSH
5674: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
5678: LD_EXP 37
5682: PPUSH
5683: LD_STRING D1-JMM-2a
5685: PPUSH
5686: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
5690: LD_EXP 44
5694: PPUSH
5695: LD_STRING D1-Corn-2
5697: PPUSH
5698: CALL_OW 88
// if bierezov_exist or debug then
5702: LD_EXP 7
5706: PUSH
5707: LD_EXP 1
5711: OR
5712: IFFALSE 5953
// begin ComTurnUnit ( Cornel , Bierezov ) ;
5714: LD_EXP 44
5718: PPUSH
5719: LD_EXP 45
5723: PPUSH
5724: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
5728: LD_INT 10
5730: PPUSH
5731: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
5735: LD_EXP 44
5739: PPUSH
5740: LD_STRING D1a-Corn-1
5742: PPUSH
5743: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
5747: LD_EXP 37
5751: PPUSH
5752: LD_EXP 45
5756: PPUSH
5757: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
5761: LD_EXP 45
5765: PPUSH
5766: LD_EXP 37
5770: PPUSH
5771: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
5775: LD_EXP 37
5779: PPUSH
5780: LD_STRING D1a-JMM-1
5782: PPUSH
5783: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
5787: LD_EXP 37
5791: PPUSH
5792: LD_EXP 44
5796: PPUSH
5797: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5801: LD_EXP 44
5805: PPUSH
5806: LD_EXP 37
5810: PPUSH
5811: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
5815: LD_EXP 44
5819: PPUSH
5820: LD_STRING D1a-Corn-2
5822: PPUSH
5823: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
5827: LD_EXP 37
5831: PPUSH
5832: LD_STRING D1a-JMM-2
5834: PPUSH
5835: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
5839: LD_EXP 44
5843: PPUSH
5844: LD_STRING D1a-Corn-3
5846: PPUSH
5847: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
5851: LD_EXP 37
5855: PPUSH
5856: LD_STRING D1a-JMM-3
5858: PPUSH
5859: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
5863: LD_EXP 44
5867: PPUSH
5868: LD_STRING D1a-Corn-4
5870: PPUSH
5871: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
5875: LD_EXP 37
5879: PPUSH
5880: LD_STRING D1a-JMM-4
5882: PPUSH
5883: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
5887: LD_EXP 44
5891: PPUSH
5892: LD_STRING D1a-Corn-5
5894: PPUSH
5895: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
5899: LD_EXP 45
5903: PPUSH
5904: LD_EXP 44
5908: PPUSH
5909: CALL_OW 250
5913: PPUSH
5914: LD_EXP 44
5918: PPUSH
5919: CALL_OW 251
5923: PUSH
5924: LD_INT 2
5926: MINUS
5927: PPUSH
5928: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
5932: LD_EXP 45
5936: PPUSH
5937: LD_EXP 44
5941: PPUSH
5942: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
5946: LD_INT 10
5948: PPUSH
5949: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
5953: LD_EXP 37
5957: PPUSH
5958: LD_STRING D1b-JMM-1
5960: PPUSH
5961: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
5965: LD_EXP 44
5969: PPUSH
5970: LD_STRING D1b-Corn-1
5972: PPUSH
5973: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
5977: LD_EXP 37
5981: PPUSH
5982: LD_STRING D1b-JMM-2
5984: PPUSH
5985: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
5989: LD_EXP 44
5993: PPUSH
5994: LD_STRING D1b-Corn-2
5996: PPUSH
5997: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6001: LD_EXP 37
6005: PPUSH
6006: LD_STRING D1b-JMM-3
6008: PPUSH
6009: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6013: LD_INT 10
6015: PPUSH
6016: CALL_OW 67
// SayRadio ( Powell , D1b-Pow-3 ) ;
6020: LD_EXP 46
6024: PPUSH
6025: LD_STRING D1b-Pow-3
6027: PPUSH
6028: CALL_OW 94
// Say ( JMM , D1b-JMM-4 ) ;
6032: LD_EXP 37
6036: PPUSH
6037: LD_STRING D1b-JMM-4
6039: PPUSH
6040: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6044: LD_EXP 44
6048: PPUSH
6049: LD_STRING D1b-Corn-4
6051: PPUSH
6052: CALL_OW 88
// if Khatam then
6056: LD_EXP 41
6060: IFFALSE 6076
// Say ( Khatam , D1b-Khat-4 ) else
6062: LD_EXP 41
6066: PPUSH
6067: LD_STRING D1b-Khat-4
6069: PPUSH
6070: CALL_OW 88
6074: GO 6112
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6076: LD_EXP 6
6080: PPUSH
6081: LD_INT 26
6083: PUSH
6084: LD_INT 1
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 72
6095: PUSH
6096: LD_EXP 44
6100: PUSH
6101: EMPTY
6102: LIST
6103: DIFF
6104: PPUSH
6105: LD_STRING D1b-Sol1-4
6107: PPUSH
6108: CALL 577 0 2
// if Cyrus then
6112: LD_EXP 39
6116: IFFALSE 6130
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6118: LD_EXP 39
6122: PPUSH
6123: LD_STRING D1b-Cyrus-4
6125: PPUSH
6126: CALL_OW 88
// if Lisa then
6130: LD_EXP 40
6134: IFFALSE 6192
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6136: LD_EXP 40
6140: PPUSH
6141: LD_STRING D1b-Lisa-4
6143: PPUSH
6144: CALL_OW 88
// if Cyrus then
6148: LD_EXP 39
6152: IFFALSE 6192
// begin if not IsInUnit ( Cyrus ) then
6154: LD_EXP 39
6158: PPUSH
6159: CALL_OW 310
6163: NOT
6164: IFFALSE 6180
// ComTurnUnit ( Cyrus , Lisa ) ;
6166: LD_EXP 39
6170: PPUSH
6171: LD_EXP 40
6175: PPUSH
6176: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6180: LD_EXP 39
6184: PPUSH
6185: LD_STRING D1b-Cyrus-5
6187: PPUSH
6188: CALL_OW 88
// end ; end ; SelectGroup ;
6192: CALL 2649 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6196: LD_EXP 37
6200: PPUSH
6201: LD_STRING D1d-JMM-1
6203: PPUSH
6204: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6208: LD_EXP 44
6212: PPUSH
6213: LD_STRING D1d-Corn-1
6215: PPUSH
6216: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6220: LD_ADDR_VAR 0 2
6224: PUSH
6225: LD_EXP 4
6229: PUSH
6230: LD_EXP 6
6234: ADD
6235: PUSH
6236: LD_EXP 37
6240: ADD
6241: PUSH
6242: FOR_IN
6243: IFFALSE 6256
// ComHold ( i ) ;
6245: LD_VAR 0 2
6249: PPUSH
6250: CALL_OW 140
6254: GO 6242
6256: POP
6257: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6258: LD_ADDR_VAR 0 4
6262: PUSH
6263: LD_INT 22
6265: PUSH
6266: LD_INT 1
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 21
6275: PUSH
6276: LD_INT 2
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PPUSH
6287: CALL_OW 69
6291: ST_TO_ADDR
// if vehicles then
6292: LD_VAR 0 4
6296: IFFALSE 6634
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6298: LD_EXP 6
6302: PPUSH
6303: LD_INT 55
6305: PUSH
6306: EMPTY
6307: LIST
6308: PPUSH
6309: CALL_OW 72
6313: IFFALSE 6352
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6315: LD_ADDR_VAR 0 2
6319: PUSH
6320: LD_EXP 6
6324: PPUSH
6325: LD_INT 55
6327: PUSH
6328: EMPTY
6329: LIST
6330: PPUSH
6331: CALL_OW 72
6335: PUSH
6336: FOR_IN
6337: IFFALSE 6350
// ComExitVehicle ( i ) ;
6339: LD_VAR 0 2
6343: PPUSH
6344: CALL_OW 121
6348: GO 6336
6350: POP
6351: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6352: LD_ADDR_VAR 0 5
6356: PUSH
6357: LD_VAR 0 4
6361: PPUSH
6362: LD_INT 34
6364: PUSH
6365: LD_INT 51
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PPUSH
6372: CALL_OW 72
6376: ST_TO_ADDR
// if cargos then
6377: LD_VAR 0 5
6381: IFFALSE 6564
// begin vehicles := cargos ;
6383: LD_ADDR_VAR 0 4
6387: PUSH
6388: LD_VAR 0 5
6392: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6393: LD_ADDR_VAR 0 6
6397: PUSH
6398: LD_STRING 02_resources_4
6400: PPUSH
6401: LD_INT 0
6403: PPUSH
6404: CALL_OW 30
6408: ST_TO_ADDR
// if debug and not resources then
6409: LD_EXP 1
6413: PUSH
6414: LD_VAR 0 6
6418: NOT
6419: AND
6420: IFFALSE 6430
// resources := 160 ;
6422: LD_ADDR_VAR 0 6
6426: PUSH
6427: LD_INT 160
6429: ST_TO_ADDR
// if resources mod 10 then
6430: LD_VAR 0 6
6434: PUSH
6435: LD_INT 10
6437: MOD
6438: IFFALSE 6460
// resources := resources - resources mod 10 ;
6440: LD_ADDR_VAR 0 6
6444: PUSH
6445: LD_VAR 0 6
6449: PUSH
6450: LD_VAR 0 6
6454: PUSH
6455: LD_INT 10
6457: MOD
6458: MINUS
6459: ST_TO_ADDR
// if resources then
6460: LD_VAR 0 6
6464: IFFALSE 6564
// for i in cargos do
6466: LD_ADDR_VAR 0 2
6470: PUSH
6471: LD_VAR 0 5
6475: PUSH
6476: FOR_IN
6477: IFFALSE 6562
// begin if resources < 100 then
6479: LD_VAR 0 6
6483: PUSH
6484: LD_INT 100
6486: LESS
6487: IFFALSE 6509
// begin cargo := resources ;
6489: LD_ADDR_VAR 0 7
6493: PUSH
6494: LD_VAR 0 6
6498: ST_TO_ADDR
// resources := 0 ;
6499: LD_ADDR_VAR 0 6
6503: PUSH
6504: LD_INT 0
6506: ST_TO_ADDR
// end else
6507: GO 6531
// begin cargo := 100 ;
6509: LD_ADDR_VAR 0 7
6513: PUSH
6514: LD_INT 100
6516: ST_TO_ADDR
// resources := resources - 100 ;
6517: LD_ADDR_VAR 0 6
6521: PUSH
6522: LD_VAR 0 6
6526: PUSH
6527: LD_INT 100
6529: MINUS
6530: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
6531: LD_VAR 0 2
6535: PPUSH
6536: LD_INT 1
6538: PPUSH
6539: LD_VAR 0 7
6543: PPUSH
6544: CALL_OW 290
// if resources = 0 then
6548: LD_VAR 0 6
6552: PUSH
6553: LD_INT 0
6555: EQUAL
6556: IFFALSE 6560
// break ;
6558: GO 6562
// end ;
6560: GO 6476
6562: POP
6563: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
6564: LD_VAR 0 4
6568: PUSH
6569: LD_INT 1
6571: ARRAY
6572: PPUSH
6573: CALL_OW 311
6577: PPUSH
6578: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
6582: LD_VAR 0 4
6586: PUSH
6587: LD_INT 1
6589: ARRAY
6590: PPUSH
6591: LD_INT 4
6593: PPUSH
6594: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
6598: LD_EXP 44
6602: PPUSH
6603: LD_VAR 0 4
6607: PUSH
6608: LD_INT 1
6610: ARRAY
6611: PPUSH
6612: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
6616: LD_INT 35
6618: PPUSH
6619: CALL_OW 67
// until IsInUnit ( Cornel ) ;
6623: LD_EXP 44
6627: PPUSH
6628: CALL_OW 310
6632: IFFALSE 6616
// end ; InGameOff ;
6634: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6638: LD_STRING M1
6640: PPUSH
6641: CALL_OW 337
// SaveForQuickRestart ;
6645: CALL_OW 22
// cornel_active := true ;
6649: LD_ADDR_EXP 8
6653: PUSH
6654: LD_INT 1
6656: ST_TO_ADDR
// end ;
6657: LD_VAR 0 1
6661: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
6662: LD_EXP 37
6666: PPUSH
6667: LD_EXP 47
6671: PPUSH
6672: CALL_OW 296
6676: PUSH
6677: LD_INT 10
6679: LESS
6680: IFFALSE 8063
6682: GO 6684
6684: DISABLE
6685: LD_INT 0
6687: PPUSH
6688: PPUSH
6689: PPUSH
6690: PPUSH
6691: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
6692: LD_ADDR_VAR 0 2
6696: PUSH
6697: LD_INT 89
6699: PUSH
6700: LD_INT 34
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 138
6709: PUSH
6710: LD_INT 63
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 196
6719: PUSH
6720: LD_INT 84
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: LD_INT 135
6729: PUSH
6730: LD_INT 52
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PUSH
6737: LD_INT 103
6739: PUSH
6740: LD_INT 39
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PUSH
6747: LD_INT 58
6749: PUSH
6750: LD_INT 30
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 38
6759: PUSH
6760: LD_INT 51
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: ST_TO_ADDR
// Video ( true ) ;
6776: LD_INT 1
6778: PPUSH
6779: CALL 72170 0 1
// if jmm_units then
6783: LD_EXP 4
6787: IFFALSE 6863
// for i in jmm_units do
6789: LD_ADDR_VAR 0 1
6793: PUSH
6794: LD_EXP 4
6798: PUSH
6799: FOR_IN
6800: IFFALSE 6861
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
6802: LD_VAR 0 1
6806: PPUSH
6807: LD_EXP 37
6811: PPUSH
6812: CALL_OW 296
6816: PUSH
6817: LD_INT 10
6819: LESS
6820: PUSH
6821: LD_VAR 0 1
6825: PPUSH
6826: CALL_OW 310
6830: NOT
6831: AND
6832: IFFALSE 6850
// ComTurnUnit ( i , JMM ) else
6834: LD_VAR 0 1
6838: PPUSH
6839: LD_EXP 37
6843: PPUSH
6844: CALL_OW 119
6848: GO 6859
// ComHold ( i ) ;
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 140
// end ;
6859: GO 6799
6861: POP
6862: POP
// if IsInUnit ( JMM ) then
6863: LD_EXP 37
6867: PPUSH
6868: CALL_OW 310
6872: IFFALSE 6897
// begin ComExitVehicle ( JMM ) ;
6874: LD_EXP 37
6878: PPUSH
6879: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
6883: LD_EXP 37
6887: PPUSH
6888: LD_EXP 47
6892: PPUSH
6893: CALL_OW 172
// end ; Wait ( 10 ) ;
6897: LD_INT 10
6899: PPUSH
6900: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
6904: LD_EXP 37
6908: PPUSH
6909: LD_EXP 47
6913: PPUSH
6914: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
6918: LD_INT 35
6920: PPUSH
6921: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
6925: LD_EXP 37
6929: PPUSH
6930: LD_EXP 47
6934: PPUSH
6935: CALL_OW 296
6939: PUSH
6940: LD_INT 6
6942: LESS
6943: IFFALSE 6918
// ComTurnUnit ( JMM , Lynch ) ;
6945: LD_EXP 37
6949: PPUSH
6950: LD_EXP 47
6954: PPUSH
6955: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
6959: LD_ADDR_VAR 0 1
6963: PUSH
6964: LD_EXP 47
6968: PUSH
6969: LD_EXP 48
6973: PUSH
6974: LD_EXP 49
6978: PUSH
6979: LD_EXP 50
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: PUSH
6990: FOR_IN
6991: IFFALSE 7009
// ComTurnUnit ( i , JMM ) ;
6993: LD_VAR 0 1
6997: PPUSH
6998: LD_EXP 37
7002: PPUSH
7003: CALL_OW 119
7007: GO 6990
7009: POP
7010: POP
// Wait ( 0 0$0.3 ) ;
7011: LD_INT 10
7013: PPUSH
7014: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7018: LD_EXP 37
7022: PPUSH
7023: LD_STRING D2-JMM-1
7025: PPUSH
7026: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7030: LD_EXP 47
7034: PPUSH
7035: LD_STRING D2-Sol1-1
7037: PPUSH
7038: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7042: LD_EXP 37
7046: PPUSH
7047: LD_STRING D2-JMM-2
7049: PPUSH
7050: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7054: LD_EXP 47
7058: PPUSH
7059: LD_STRING D2-Sol1-2
7061: PPUSH
7062: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7066: LD_EXP 37
7070: PPUSH
7071: LD_STRING D2-JMM-3
7073: PPUSH
7074: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7078: LD_EXP 47
7082: PPUSH
7083: LD_STRING D2-Sol1-3
7085: PPUSH
7086: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7090: LD_ADDR_VAR 0 1
7094: PUSH
7095: LD_INT 22
7097: PUSH
7098: LD_INT 8
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PPUSH
7105: CALL_OW 69
7109: PUSH
7110: FOR_IN
7111: IFFALSE 7127
// SetSide ( i , 1 ) ;
7113: LD_VAR 0 1
7117: PPUSH
7118: LD_INT 1
7120: PPUSH
7121: CALL_OW 235
7125: GO 7110
7127: POP
7128: POP
// Say ( JMM , D2-JMM-4 ) ;
7129: LD_EXP 37
7133: PPUSH
7134: LD_STRING D2-JMM-4
7136: PPUSH
7137: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7141: LD_INT 1
7143: PPUSH
7144: LD_INT 5
7146: PPUSH
7147: CALL_OW 332
// for i = 1 to points do
7151: LD_ADDR_VAR 0 1
7155: PUSH
7156: DOUBLE
7157: LD_INT 1
7159: DEC
7160: ST_TO_ADDR
7161: LD_VAR 0 2
7165: PUSH
7166: FOR_TO
7167: IFFALSE 7342
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7169: LD_VAR 0 2
7173: PUSH
7174: LD_VAR 0 1
7178: ARRAY
7179: PUSH
7180: LD_INT 1
7182: ARRAY
7183: PPUSH
7184: LD_VAR 0 2
7188: PUSH
7189: LD_VAR 0 1
7193: ARRAY
7194: PUSH
7195: LD_INT 2
7197: ARRAY
7198: PPUSH
7199: CALL_OW 84
// if i = 1 then
7203: LD_VAR 0 1
7207: PUSH
7208: LD_INT 1
7210: EQUAL
7211: IFFALSE 7225
// Say ( Lynch , D2-Sol1-4 ) ;
7213: LD_EXP 47
7217: PPUSH
7218: LD_STRING D2-Sol1-4
7220: PPUSH
7221: CALL_OW 88
// if i = 2 then
7225: LD_VAR 0 1
7229: PUSH
7230: LD_INT 2
7232: EQUAL
7233: IFFALSE 7247
// Say ( JMM , D2-JMM-5 ) ;
7235: LD_EXP 37
7239: PPUSH
7240: LD_STRING D2-JMM-5
7242: PPUSH
7243: CALL_OW 88
// if i = 4 then
7247: LD_VAR 0 1
7251: PUSH
7252: LD_INT 4
7254: EQUAL
7255: IFFALSE 7279
// begin RevealFogArea ( 1 , troopsArea ) ;
7257: LD_INT 1
7259: PPUSH
7260: LD_INT 6
7262: PPUSH
7263: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7267: LD_EXP 47
7271: PPUSH
7272: LD_STRING D2-Sol1-5
7274: PPUSH
7275: CALL_OW 88
// end ; if i = 5 then
7279: LD_VAR 0 1
7283: PUSH
7284: LD_INT 5
7286: EQUAL
7287: IFFALSE 7301
// Say ( JMM , D2-JMM-6 ) ;
7289: LD_EXP 37
7293: PPUSH
7294: LD_STRING D2-JMM-6
7296: PPUSH
7297: CALL_OW 88
// if i = 7 then
7301: LD_VAR 0 1
7305: PUSH
7306: LD_INT 7
7308: EQUAL
7309: IFFALSE 7333
// begin RevealFogArea ( 1 , forestArea ) ;
7311: LD_INT 1
7313: PPUSH
7314: LD_INT 7
7316: PPUSH
7317: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7321: LD_EXP 47
7325: PPUSH
7326: LD_STRING D2-Sol1-6
7328: PPUSH
7329: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7333: LD_INT 46
7335: PPUSH
7336: CALL_OW 67
// end ;
7340: GO 7166
7342: POP
7343: POP
// CenterNowOnUnits ( JMM ) ;
7344: LD_EXP 37
7348: PPUSH
7349: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7353: LD_EXP 37
7357: PPUSH
7358: LD_STRING D2-JMM-7
7360: PPUSH
7361: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7365: LD_EXP 47
7369: PPUSH
7370: LD_STRING D2-Sol1-7
7372: PPUSH
7373: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7377: LD_EXP 37
7381: PPUSH
7382: LD_STRING D2-JMM-8
7384: PPUSH
7385: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7389: LD_ADDR_VAR 0 4
7393: PUSH
7394: LD_INT 22
7396: PUSH
7397: LD_INT 1
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PUSH
7404: LD_INT 30
7406: PUSH
7407: LD_INT 31
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: PPUSH
7418: CALL_OW 69
7422: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7423: LD_EXP 47
7427: PPUSH
7428: LD_VAR 0 4
7432: PUSH
7433: LD_INT 1
7435: ARRAY
7436: PPUSH
7437: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7441: LD_INT 65
7443: PPUSH
7444: LD_INT 101
7446: PPUSH
7447: CALL_OW 428
7451: IFFALSE 7474
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7453: LD_INT 65
7455: PPUSH
7456: LD_INT 101
7458: PPUSH
7459: CALL_OW 428
7463: PPUSH
7464: LD_INT 75
7466: PPUSH
7467: LD_INT 100
7469: PPUSH
7470: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7474: LD_INT 66
7476: PPUSH
7477: LD_INT 103
7479: PPUSH
7480: CALL_OW 428
7484: IFFALSE 7507
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7486: LD_INT 66
7488: PPUSH
7489: LD_INT 103
7491: PPUSH
7492: CALL_OW 428
7496: PPUSH
7497: LD_INT 75
7499: PPUSH
7500: LD_INT 100
7502: PPUSH
7503: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7507: LD_ADDR_VAR 0 5
7511: PUSH
7512: LD_INT 22
7514: PUSH
7515: LD_INT 1
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: LD_INT 21
7524: PUSH
7525: LD_INT 2
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: PUSH
7532: LD_INT 91
7534: PUSH
7535: LD_EXP 37
7539: PUSH
7540: LD_INT 7
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: PPUSH
7553: CALL_OW 69
7557: ST_TO_ADDR
// if tmp then
7558: LD_VAR 0 5
7562: IFFALSE 7579
// ComMoveXY ( tmp , 75 , 100 ) ;
7564: LD_VAR 0 5
7568: PPUSH
7569: LD_INT 75
7571: PPUSH
7572: LD_INT 100
7574: PPUSH
7575: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
7579: LD_ADDR_VAR 0 3
7583: PUSH
7584: LD_EXP 4
7588: PPUSH
7589: LD_INT 25
7591: PUSH
7592: LD_INT 1
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PPUSH
7599: CALL_OW 72
7603: PPUSH
7604: LD_EXP 37
7608: PPUSH
7609: CALL_OW 74
7613: ST_TO_ADDR
// if sol then
7614: LD_VAR 0 3
7618: IFFALSE 7678
// if GetDistUnits ( JMM , sol ) < 10 then
7620: LD_EXP 37
7624: PPUSH
7625: LD_VAR 0 3
7629: PPUSH
7630: CALL_OW 296
7634: PUSH
7635: LD_INT 10
7637: LESS
7638: IFFALSE 7678
// begin if IsInUnit ( sol ) then
7640: LD_VAR 0 3
7644: PPUSH
7645: CALL_OW 310
7649: IFFALSE 7660
// ComExitVehicle ( sol ) ;
7651: LD_VAR 0 3
7655: PPUSH
7656: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
7660: LD_VAR 0 3
7664: PPUSH
7665: LD_VAR 0 4
7669: PUSH
7670: LD_INT 2
7672: ARRAY
7673: PPUSH
7674: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
7678: LD_INT 10
7680: PPUSH
7681: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
7685: LD_EXP 37
7689: PPUSH
7690: LD_INT 65
7692: PPUSH
7693: LD_INT 101
7695: PPUSH
7696: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
7700: LD_EXP 37
7704: PPUSH
7705: LD_INT 63
7707: PPUSH
7708: LD_INT 100
7710: PPUSH
7711: CALL_OW 178
// tmp := 0 0$0 ;
7715: LD_ADDR_VAR 0 5
7719: PUSH
7720: LD_INT 0
7722: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7723: LD_INT 35
7725: PPUSH
7726: CALL_OW 67
// tmp := tmp + 0 0$1 ;
7730: LD_ADDR_VAR 0 5
7734: PUSH
7735: LD_VAR 0 5
7739: PUSH
7740: LD_INT 35
7742: PLUS
7743: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
7744: LD_EXP 37
7748: PPUSH
7749: LD_INT 65
7751: PPUSH
7752: LD_INT 101
7754: PPUSH
7755: CALL_OW 307
7759: PUSH
7760: LD_VAR 0 5
7764: PUSH
7765: LD_INT 175
7767: GREATER
7768: OR
7769: IFFALSE 7723
// Say ( JMM , D2a-JMM-1 ) ;
7771: LD_EXP 37
7775: PPUSH
7776: LD_STRING D2a-JMM-1
7778: PPUSH
7779: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
7783: LD_EXP 48
7787: PPUSH
7788: LD_INT 66
7790: PPUSH
7791: LD_INT 103
7793: PPUSH
7794: CALL_OW 111
// tmp := 0 0$0 ;
7798: LD_ADDR_VAR 0 5
7802: PUSH
7803: LD_INT 0
7805: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7806: LD_INT 35
7808: PPUSH
7809: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
7813: LD_EXP 48
7817: PPUSH
7818: LD_INT 66
7820: PPUSH
7821: LD_INT 103
7823: PPUSH
7824: CALL_OW 307
7828: PUSH
7829: LD_VAR 0 5
7833: PUSH
7834: LD_INT 175
7836: GREATER
7837: OR
7838: IFFALSE 7806
// ComTurnUnit ( Walker , JMM ) ;
7840: LD_EXP 48
7844: PPUSH
7845: LD_EXP 37
7849: PPUSH
7850: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
7854: LD_EXP 48
7858: PPUSH
7859: LD_STRING D2a-Sci1-1
7861: PPUSH
7862: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
7866: LD_EXP 37
7870: PPUSH
7871: LD_EXP 48
7875: PPUSH
7876: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
7880: LD_EXP 37
7884: PPUSH
7885: LD_STRING D2a-JMM-2
7887: PPUSH
7888: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
7892: LD_EXP 48
7896: PPUSH
7897: LD_STRING D2a-Sci1-2
7899: PPUSH
7900: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
7904: LD_EXP 37
7908: PPUSH
7909: LD_STRING D2a-JMM-3
7911: PPUSH
7912: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
7916: LD_EXP 48
7920: PPUSH
7921: LD_STRING D2a-Sci1-3
7923: PPUSH
7924: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
7928: LD_ADDR_EXP 4
7932: PUSH
7933: LD_EXP 4
7937: PUSH
7938: LD_EXP 47
7942: PUSH
7943: LD_EXP 48
7947: PUSH
7948: LD_EXP 49
7952: PUSH
7953: LD_EXP 50
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: ADD
7964: ST_TO_ADDR
// for i in jmm_units do
7965: LD_ADDR_VAR 0 1
7969: PUSH
7970: LD_EXP 4
7974: PUSH
7975: FOR_IN
7976: IFFALSE 8001
// if not IsInUnit ( i ) then
7978: LD_VAR 0 1
7982: PPUSH
7983: CALL_OW 310
7987: NOT
7988: IFFALSE 7999
// ComFree ( i ) ;
7990: LD_VAR 0 1
7994: PPUSH
7995: CALL_OW 139
7999: GO 7975
8001: POP
8002: POP
// Video ( false ) ;
8003: LD_INT 0
8005: PPUSH
8006: CALL 72170 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8010: LD_STRING MSolar1
8012: PPUSH
8013: CALL_OW 337
// jmm_on_west := true ;
8017: LD_ADDR_EXP 5
8021: PUSH
8022: LD_INT 1
8024: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8025: LD_INT 1050
8027: PPUSH
8028: CALL_OW 67
// frank_can_return := true ;
8032: LD_ADDR_EXP 12
8036: PUSH
8037: LD_INT 1
8039: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8040: LD_INT 6300
8042: PPUSH
8043: LD_INT 8400
8045: PPUSH
8046: CALL_OW 12
8050: PPUSH
8051: CALL_OW 67
// send_spec_patrol := true ;
8055: LD_ADDR_EXP 30
8059: PUSH
8060: LD_INT 1
8062: ST_TO_ADDR
// end ;
8063: PPOPN 5
8065: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8066: LD_INT 22
8068: PUSH
8069: LD_INT 1
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: PUSH
8076: LD_INT 34
8078: PUSH
8079: LD_INT 51
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 92
8088: PUSH
8089: LD_INT 63
8091: PUSH
8092: LD_INT 100
8094: PUSH
8095: LD_INT 5
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: PPUSH
8112: CALL_OW 69
8116: PUSH
8117: LD_EXP 5
8121: NOT
8122: AND
8123: IFFALSE 8236
8125: GO 8127
8127: DISABLE
8128: LD_INT 0
8130: PPUSH
8131: PPUSH
// begin enable ;
8132: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8133: LD_ADDR_VAR 0 2
8137: PUSH
8138: LD_INT 22
8140: PUSH
8141: LD_INT 1
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PUSH
8148: LD_INT 34
8150: PUSH
8151: LD_INT 51
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 92
8160: PUSH
8161: LD_INT 63
8163: PUSH
8164: LD_INT 100
8166: PUSH
8167: LD_INT 5
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: LIST
8180: PUSH
8181: EMPTY
8182: LIST
8183: PPUSH
8184: CALL_OW 69
8188: ST_TO_ADDR
// if not filter then
8189: LD_VAR 0 2
8193: NOT
8194: IFFALSE 8198
// exit ;
8196: GO 8236
// for i in filter do
8198: LD_ADDR_VAR 0 1
8202: PUSH
8203: LD_VAR 0 2
8207: PUSH
8208: FOR_IN
8209: IFFALSE 8234
// begin SetFuel ( i , 0 ) ;
8211: LD_VAR 0 1
8215: PPUSH
8216: LD_INT 0
8218: PPUSH
8219: CALL_OW 240
// ComStop ( i ) ;
8223: LD_VAR 0 1
8227: PPUSH
8228: CALL_OW 141
// end ;
8232: GO 8208
8234: POP
8235: POP
// end ;
8236: PPOPN 2
8238: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8239: LD_EXP 30
8243: IFFALSE 9340
8245: GO 8247
8247: DISABLE
8248: LD_INT 0
8250: PPUSH
8251: PPUSH
8252: PPUSH
8253: PPUSH
8254: PPUSH
8255: PPUSH
8256: PPUSH
// begin if not ru_spec_patrol then
8257: LD_EXP 54
8261: NOT
8262: IFFALSE 8266
// exit ;
8264: GO 9340
// dead1 := false ;
8266: LD_ADDR_VAR 0 1
8270: PUSH
8271: LD_INT 0
8273: ST_TO_ADDR
// dead2 := false ;
8274: LD_ADDR_VAR 0 2
8278: PUSH
8279: LD_INT 0
8281: ST_TO_ADDR
// inarea1 := false ;
8282: LD_ADDR_VAR 0 3
8286: PUSH
8287: LD_INT 0
8289: ST_TO_ADDR
// inarea2 := false ;
8290: LD_ADDR_VAR 0 4
8294: PUSH
8295: LD_INT 0
8297: ST_TO_ADDR
// tmp := [ ] ;
8298: LD_ADDR_VAR 0 6
8302: PUSH
8303: EMPTY
8304: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8305: LD_EXP 54
8309: PPUSH
8310: LD_INT 75
8312: PPUSH
8313: LD_INT 101
8315: PPUSH
8316: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8320: LD_INT 35
8322: PPUSH
8323: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) ;
8327: LD_INT 1
8329: PPUSH
8330: LD_EXP 54
8334: PUSH
8335: LD_INT 1
8337: ARRAY
8338: PPUSH
8339: CALL_OW 292
8343: IFFALSE 8320
// ComStop ( ru_spec_patrol ) ;
8345: LD_EXP 54
8349: PPUSH
8350: CALL_OW 141
// Wait ( 0 0$02 ) ;
8354: LD_INT 70
8356: PPUSH
8357: CALL_OW 67
// DialogueOn ;
8361: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8365: LD_EXP 54
8369: PUSH
8370: LD_INT 1
8372: ARRAY
8373: PPUSH
8374: LD_STRING D8-Rus1-1
8376: PPUSH
8377: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8381: LD_EXP 37
8385: PPUSH
8386: LD_STRING D8-JMM-1
8388: PPUSH
8389: CALL_OW 88
// DialogueOff ;
8393: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8397: LD_EXP 54
8401: PPUSH
8402: LD_INT 13
8404: PPUSH
8405: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8409: LD_INT 35
8411: PPUSH
8412: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8416: LD_VAR 0 1
8420: NOT
8421: PUSH
8422: LD_EXP 54
8426: PUSH
8427: LD_INT 1
8429: ARRAY
8430: PPUSH
8431: CALL_OW 301
8435: AND
8436: IFFALSE 8446
// dead1 := true ;
8438: LD_ADDR_VAR 0 1
8442: PUSH
8443: LD_INT 1
8445: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8446: LD_VAR 0 2
8450: NOT
8451: PUSH
8452: LD_EXP 54
8456: PUSH
8457: LD_INT 2
8459: ARRAY
8460: PPUSH
8461: CALL_OW 301
8465: AND
8466: IFFALSE 8476
// dead2 := true ;
8468: LD_ADDR_VAR 0 2
8472: PUSH
8473: LD_INT 1
8475: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8476: LD_VAR 0 3
8480: NOT
8481: PUSH
8482: LD_EXP 54
8486: PUSH
8487: LD_INT 1
8489: ARRAY
8490: PPUSH
8491: LD_INT 14
8493: PPUSH
8494: CALL_OW 308
8498: AND
8499: IFFALSE 8509
// inarea1 := true ;
8501: LD_ADDR_VAR 0 3
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
8509: LD_VAR 0 4
8513: NOT
8514: PUSH
8515: LD_EXP 54
8519: PUSH
8520: LD_INT 2
8522: ARRAY
8523: PPUSH
8524: LD_INT 14
8526: PPUSH
8527: CALL_OW 308
8531: AND
8532: IFFALSE 8542
// inarea2 := true ;
8534: LD_ADDR_VAR 0 4
8538: PUSH
8539: LD_INT 1
8541: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
8542: LD_VAR 0 1
8546: PUSH
8547: LD_VAR 0 2
8551: AND
8552: PUSH
8553: LD_VAR 0 1
8557: PUSH
8558: LD_VAR 0 4
8562: AND
8563: OR
8564: PUSH
8565: LD_VAR 0 2
8569: PUSH
8570: LD_VAR 0 3
8574: AND
8575: OR
8576: PUSH
8577: LD_VAR 0 3
8581: PUSH
8582: LD_VAR 0 4
8586: AND
8587: OR
8588: IFFALSE 8409
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
8590: LD_VAR 0 3
8594: PUSH
8595: LD_VAR 0 4
8599: AND
8600: PUSH
8601: LD_VAR 0 1
8605: PUSH
8606: LD_VAR 0 4
8610: AND
8611: OR
8612: PUSH
8613: LD_VAR 0 2
8617: PUSH
8618: LD_VAR 0 3
8622: AND
8623: OR
8624: IFFALSE 9320
// begin prepare_siege := true ;
8626: LD_ADDR_EXP 31
8630: PUSH
8631: LD_INT 1
8633: ST_TO_ADDR
// DialogueOn ;
8634: CALL_OW 6
// if ( inarea1 and inarea2 ) then
8638: LD_VAR 0 3
8642: PUSH
8643: LD_VAR 0 4
8647: AND
8648: IFFALSE 8664
// Say ( JMM , D8b-JMM-1a ) else
8650: LD_EXP 37
8654: PPUSH
8655: LD_STRING D8b-JMM-1a
8657: PPUSH
8658: CALL_OW 88
8662: GO 8676
// Say ( JMM , D8b-JMM-1 ) ;
8664: LD_EXP 37
8668: PPUSH
8669: LD_STRING D8b-JMM-1
8671: PPUSH
8672: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
8676: LD_EXP 4
8680: PPUSH
8681: LD_INT 26
8683: PUSH
8684: LD_INT 1
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PPUSH
8691: CALL_OW 72
8695: PUSH
8696: LD_EXP 38
8700: PUSH
8701: LD_EXP 39
8705: PUSH
8706: LD_EXP 48
8710: PUSH
8711: LD_EXP 51
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: DIFF
8722: PPUSH
8723: LD_STRING D8b-Sol1-1
8725: PPUSH
8726: CALL 577 0 2
// if Cyrus and Cyrus in jmm_units then
8730: LD_EXP 39
8734: PUSH
8735: LD_EXP 39
8739: PUSH
8740: LD_EXP 4
8744: IN
8745: AND
8746: IFFALSE 8762
// Say ( Cyrus , D8b-Cyrus-1 ) else
8748: LD_EXP 39
8752: PPUSH
8753: LD_STRING D8b-Cyrus-1
8755: PPUSH
8756: CALL_OW 88
8760: GO 8774
// Say ( JMM , D8b-JMM-1a ) ;
8762: LD_EXP 37
8766: PPUSH
8767: LD_STRING D8b-JMM-1a
8769: PPUSH
8770: CALL_OW 88
// if Lisa and Lisa in jmm_units then
8774: LD_EXP 40
8778: PUSH
8779: LD_EXP 40
8783: PUSH
8784: LD_EXP 4
8788: IN
8789: AND
8790: IFFALSE 8804
// Say ( Lisa , D8b-Lisa-2 ) ;
8792: LD_EXP 40
8796: PPUSH
8797: LD_STRING D8b-Lisa-2
8799: PPUSH
8800: CALL_OW 88
// if Bobby and Bobby in jmm_units then
8804: LD_EXP 38
8808: PUSH
8809: LD_EXP 38
8813: PUSH
8814: LD_EXP 4
8818: IN
8819: AND
8820: IFFALSE 8836
// Say ( Bobby , D8b-Bobby-1 ) else
8822: LD_EXP 38
8826: PPUSH
8827: LD_STRING D8b-Bobby-1
8829: PPUSH
8830: CALL_OW 88
8834: GO 8896
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
8836: LD_ADDR_VAR 0 5
8840: PUSH
8841: LD_EXP 4
8845: PPUSH
8846: LD_INT 26
8848: PUSH
8849: LD_INT 1
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PPUSH
8856: CALL_OW 72
8860: PUSH
8861: LD_EXP 38
8865: PUSH
8866: LD_EXP 39
8870: PUSH
8871: LD_EXP 48
8875: PUSH
8876: LD_EXP 51
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: DIFF
8887: PPUSH
8888: LD_STRING D8b-Sol2-1
8890: PPUSH
8891: CALL 577 0 2
8895: ST_TO_ADDR
// DialogueOff ;
8896: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
8900: LD_EXP 39
8904: PUSH
8905: LD_EXP 39
8909: PUSH
8910: LD_EXP 4
8914: IN
8915: AND
8916: IFFALSE 8941
// tmp := Insert ( tmp , 1 , Cyrus ) ;
8918: LD_ADDR_VAR 0 6
8922: PUSH
8923: LD_VAR 0 6
8927: PPUSH
8928: LD_INT 1
8930: PPUSH
8931: LD_EXP 39
8935: PPUSH
8936: CALL_OW 2
8940: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
8941: LD_EXP 38
8945: PUSH
8946: LD_EXP 38
8950: PUSH
8951: LD_EXP 4
8955: IN
8956: AND
8957: IFFALSE 8982
// tmp := Insert ( tmp , 1 , Bobby ) ;
8959: LD_ADDR_VAR 0 6
8963: PUSH
8964: LD_VAR 0 6
8968: PPUSH
8969: LD_INT 1
8971: PPUSH
8972: LD_EXP 38
8976: PPUSH
8977: CALL_OW 2
8981: ST_TO_ADDR
// if sol then
8982: LD_VAR 0 5
8986: IFFALSE 9011
// tmp := Insert ( tmp , 1 , sol ) ;
8988: LD_ADDR_VAR 0 6
8992: PUSH
8993: LD_VAR 0 6
8997: PPUSH
8998: LD_INT 1
9000: PPUSH
9001: LD_VAR 0 5
9005: PPUSH
9006: CALL_OW 2
9010: ST_TO_ADDR
// if tmp then
9011: LD_VAR 0 6
9015: IFFALSE 9279
// begin SetSide ( tmp , 8 ) ;
9017: LD_VAR 0 6
9021: PPUSH
9022: LD_INT 8
9024: PPUSH
9025: CALL_OW 235
// for i in tmp do
9029: LD_ADDR_VAR 0 7
9033: PUSH
9034: LD_VAR 0 6
9038: PUSH
9039: FOR_IN
9040: IFFALSE 9131
// begin if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_building then
9042: LD_VAR 0 7
9046: PPUSH
9047: CALL_OW 310
9051: PUSH
9052: LD_VAR 0 7
9056: PPUSH
9057: CALL_OW 310
9061: PPUSH
9062: CALL_OW 266
9066: PUSH
9067: LD_INT 3
9069: EQUAL
9070: AND
9071: IFFALSE 9082
// ComExitBuilding ( i ) ;
9073: LD_VAR 0 7
9077: PPUSH
9078: CALL_OW 122
// if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_vehicle then
9082: LD_VAR 0 7
9086: PPUSH
9087: CALL_OW 310
9091: PUSH
9092: LD_VAR 0 7
9096: PPUSH
9097: CALL_OW 310
9101: PPUSH
9102: CALL_OW 266
9106: PUSH
9107: LD_INT 2
9109: EQUAL
9110: AND
9111: IFFALSE 9122
// ComExitVehicle ( i ) ;
9113: LD_VAR 0 7
9117: PPUSH
9118: CALL_OW 121
// wait ( 0 0$1 ) ;
9122: LD_INT 35
9124: PPUSH
9125: CALL_OW 67
// end ;
9129: GO 9039
9131: POP
9132: POP
// ComFree ( tmp ) ;
9133: LD_VAR 0 6
9137: PPUSH
9138: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9142: LD_VAR 0 6
9146: PPUSH
9147: LD_INT 15
9149: PPUSH
9150: CALL_OW 173
// AddComHold ( tmp ) ;
9154: LD_VAR 0 6
9158: PPUSH
9159: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9163: LD_INT 35
9165: PPUSH
9166: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9170: LD_VAR 0 6
9174: PUSH
9175: LD_INT 1
9177: ARRAY
9178: PPUSH
9179: CALL_OW 314
9183: NOT
9184: IFFALSE 9198
// ComMoveToArea ( tmp , cyrusEscape ) ;
9186: LD_VAR 0 6
9190: PPUSH
9191: LD_INT 15
9193: PPUSH
9194: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9198: LD_VAR 0 6
9202: PUSH
9203: LD_INT 1
9205: ARRAY
9206: PPUSH
9207: LD_INT 15
9209: PPUSH
9210: CALL_OW 308
9214: IFFALSE 9269
// begin RemoveUnit ( tmp [ 1 ] ) ;
9216: LD_VAR 0 6
9220: PUSH
9221: LD_INT 1
9223: ARRAY
9224: PPUSH
9225: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9229: LD_ADDR_EXP 4
9233: PUSH
9234: LD_EXP 4
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_INT 1
9246: ARRAY
9247: DIFF
9248: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9249: LD_ADDR_VAR 0 6
9253: PUSH
9254: LD_VAR 0 6
9258: PUSH
9259: LD_VAR 0 6
9263: PUSH
9264: LD_INT 1
9266: ARRAY
9267: DIFF
9268: ST_TO_ADDR
// end ; until tmp = 0 ;
9269: LD_VAR 0 6
9273: PUSH
9274: LD_INT 0
9276: EQUAL
9277: IFFALSE 9163
// end ; wait ( 0 0$30 ) ;
9279: LD_INT 1050
9281: PPUSH
9282: CALL_OW 67
// if ru_spec_patrol then
9286: LD_EXP 54
9290: IFFALSE 9318
// for i in ru_spec_patrol do
9292: LD_ADDR_VAR 0 7
9296: PUSH
9297: LD_EXP 54
9301: PUSH
9302: FOR_IN
9303: IFFALSE 9316
// RemoveUnit ( i ) ;
9305: LD_VAR 0 7
9309: PPUSH
9310: CALL_OW 64
9314: GO 9302
9316: POP
9317: POP
// end else
9318: GO 9340
// begin prepare_siege := false ;
9320: LD_ADDR_EXP 31
9324: PUSH
9325: LD_INT 0
9327: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9328: LD_EXP 37
9332: PPUSH
9333: LD_STRING D8a-JMM-1
9335: PPUSH
9336: CALL_OW 88
// end ; end ;
9340: PPOPN 7
9342: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9343: LD_EXP 12
9347: IFFALSE 10567
9349: GO 9351
9351: DISABLE
9352: LD_INT 0
9354: PPUSH
9355: PPUSH
9356: PPUSH
// begin uc_side := 8 ;
9357: LD_ADDR_OWVAR 20
9361: PUSH
9362: LD_INT 8
9364: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9365: LD_ADDR_VAR 0 3
9369: PUSH
9370: LD_INT 59
9372: PUSH
9373: LD_INT 71
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PUSH
9380: LD_INT 122
9382: PUSH
9383: LD_INT 117
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9394: LD_ADDR_EXP 51
9398: PUSH
9399: LD_STRING Frank
9401: PPUSH
9402: LD_INT 0
9404: PPUSH
9405: LD_STRING 
9407: PPUSH
9408: CALL 35876 0 3
9412: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9413: LD_ADDR_VAR 0 1
9417: PUSH
9418: LD_INT 1
9420: PPUSH
9421: LD_INT 2
9423: PPUSH
9424: CALL_OW 12
9428: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9429: LD_EXP 51
9433: PPUSH
9434: LD_VAR 0 3
9438: PUSH
9439: LD_VAR 0 1
9443: ARRAY
9444: PUSH
9445: LD_INT 1
9447: ARRAY
9448: PPUSH
9449: LD_VAR 0 3
9453: PUSH
9454: LD_VAR 0 1
9458: ARRAY
9459: PUSH
9460: LD_INT 2
9462: ARRAY
9463: PPUSH
9464: LD_INT 0
9466: PPUSH
9467: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9471: LD_EXP 51
9475: PPUSH
9476: LD_INT 1
9478: PPUSH
9479: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9483: LD_INT 35
9485: PPUSH
9486: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9490: LD_EXP 51
9494: PPUSH
9495: LD_EXP 37
9499: PPUSH
9500: CALL_OW 296
9504: PUSH
9505: LD_INT 8
9507: LESS
9508: PUSH
9509: LD_EXP 51
9513: PPUSH
9514: CALL_OW 256
9518: PUSH
9519: LD_INT 250
9521: GREATER
9522: AND
9523: IFFALSE 9483
// Video ( true ) ;
9525: LD_INT 1
9527: PPUSH
9528: CALL 72170 0 1
// CenterOnUnits ( JMM ) ;
9532: LD_EXP 37
9536: PPUSH
9537: CALL_OW 85
// if IsInUnit ( JMM ) then
9541: LD_EXP 37
9545: PPUSH
9546: CALL_OW 310
9550: IFFALSE 9561
// ComFree ( JMM ) ;
9552: LD_EXP 37
9556: PPUSH
9557: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
9561: LD_EXP 37
9565: PPUSH
9566: LD_EXP 51
9570: PPUSH
9571: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
9575: LD_EXP 51
9579: PPUSH
9580: LD_EXP 37
9584: PPUSH
9585: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
9589: LD_EXP 37
9593: PPUSH
9594: LD_STRING D6-JMM-1
9596: PPUSH
9597: CALL_OW 88
// p := 0 ;
9601: LD_ADDR_VAR 0 2
9605: PUSH
9606: LD_INT 0
9608: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9609: LD_INT 35
9611: PPUSH
9612: CALL_OW 67
// p := p + 1 ;
9616: LD_ADDR_VAR 0 2
9620: PUSH
9621: LD_VAR 0 2
9625: PUSH
9626: LD_INT 1
9628: PLUS
9629: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
9630: LD_EXP 37
9634: PPUSH
9635: LD_EXP 51
9639: PPUSH
9640: CALL_OW 296
9644: PUSH
9645: LD_INT 8
9647: LESS
9648: PUSH
9649: LD_VAR 0 2
9653: PUSH
9654: LD_INT 7
9656: GREATER
9657: OR
9658: IFFALSE 9609
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 then
9660: LD_EXP 40
9664: PUSH
9665: LD_EXP 40
9669: PPUSH
9670: LD_EXP 51
9674: PPUSH
9675: CALL_OW 296
9679: PUSH
9680: LD_INT 20
9682: LESS
9683: AND
9684: IFFALSE 9709
// begin ComFree ( Lisa ) ;
9686: LD_EXP 40
9690: PPUSH
9691: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
9695: LD_EXP 40
9699: PPUSH
9700: LD_EXP 51
9704: PPUSH
9705: CALL_OW 172
// end ; if Lynch then
9709: LD_EXP 47
9713: IFFALSE 9738
// begin ComFree ( Lynch ) ;
9715: LD_EXP 47
9719: PPUSH
9720: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
9724: LD_EXP 47
9728: PPUSH
9729: LD_EXP 51
9733: PPUSH
9734: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
9738: LD_EXP 37
9742: PPUSH
9743: LD_EXP 51
9747: PPUSH
9748: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
9752: LD_EXP 51
9756: PPUSH
9757: LD_EXP 37
9761: PPUSH
9762: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
9766: LD_EXP 51
9770: PPUSH
9771: LD_STRING D6-Frank-1
9773: PPUSH
9774: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
9778: LD_INT 69
9780: PPUSH
9781: LD_INT 20
9783: PPUSH
9784: LD_INT 1
9786: PPUSH
9787: LD_INT 20
9789: NEG
9790: PPUSH
9791: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
9795: LD_INT 69
9797: PPUSH
9798: LD_INT 20
9800: PPUSH
9801: LD_INT 1
9803: PPUSH
9804: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
9808: LD_INT 190
9810: PPUSH
9811: LD_INT 31
9813: PPUSH
9814: LD_INT 1
9816: PPUSH
9817: LD_INT 20
9819: NEG
9820: PPUSH
9821: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
9825: LD_INT 190
9827: PPUSH
9828: LD_INT 31
9830: PPUSH
9831: LD_INT 1
9833: PPUSH
9834: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
9838: LD_INT 69
9840: PPUSH
9841: LD_INT 20
9843: PPUSH
9844: CALL_OW 84
// Wait ( 0 0$02 ) ;
9848: LD_INT 70
9850: PPUSH
9851: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
9855: LD_EXP 37
9859: PPUSH
9860: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) then
9864: LD_EXP 40
9868: PUSH
9869: LD_EXP 40
9873: PPUSH
9874: LD_EXP 51
9878: PPUSH
9879: CALL_OW 296
9883: PUSH
9884: LD_INT 20
9886: LESS
9887: AND
9888: PUSH
9889: LD_EXP 40
9893: PPUSH
9894: CALL_OW 302
9898: AND
9899: IFFALSE 10021
// begin ComFree ( Lisa ) ;
9901: LD_EXP 40
9905: PPUSH
9906: CALL_OW 139
// p := 0 ;
9910: LD_ADDR_VAR 0 2
9914: PUSH
9915: LD_INT 0
9917: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9918: LD_INT 35
9920: PPUSH
9921: CALL_OW 67
// p := p + 1 ;
9925: LD_ADDR_VAR 0 2
9929: PUSH
9930: LD_VAR 0 2
9934: PUSH
9935: LD_INT 1
9937: PLUS
9938: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
9939: LD_EXP 40
9943: PPUSH
9944: LD_EXP 51
9948: PPUSH
9949: CALL_OW 296
9953: PUSH
9954: LD_INT 7
9956: LESS
9957: PUSH
9958: LD_VAR 0 2
9962: PUSH
9963: LD_INT 7
9965: GREATER
9966: OR
9967: IFFALSE 9918
// Say ( Lisa , D6-Lisa-1 ) ;
9969: LD_EXP 40
9973: PPUSH
9974: LD_STRING D6-Lisa-1
9976: PPUSH
9977: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
9981: LD_EXP 40
9985: PPUSH
9986: LD_EXP 51
9990: PPUSH
9991: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
9995: LD_EXP 51
9999: PPUSH
10000: LD_EXP 40
10004: PPUSH
10005: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10009: LD_EXP 51
10013: PPUSH
10014: LD_STRING D6-Frank-2
10016: PPUSH
10017: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10021: LD_EXP 47
10025: PUSH
10026: LD_EXP 47
10030: PPUSH
10031: LD_EXP 51
10035: PPUSH
10036: CALL_OW 296
10040: PUSH
10041: LD_INT 20
10043: LESS
10044: AND
10045: PUSH
10046: LD_EXP 47
10050: PPUSH
10051: CALL_OW 302
10055: AND
10056: IFFALSE 10237
// begin ComTurnUnit ( Lynch , JMM ) ;
10058: LD_EXP 47
10062: PPUSH
10063: LD_EXP 37
10067: PPUSH
10068: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10072: LD_EXP 51
10076: PPUSH
10077: LD_EXP 37
10081: PPUSH
10082: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10086: LD_EXP 47
10090: PPUSH
10091: LD_STRING D6-Sol1-2
10093: PPUSH
10094: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10098: LD_EXP 37
10102: PPUSH
10103: LD_STRING D6-JMM-2
10105: PPUSH
10106: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10110: LD_EXP 51
10114: PPUSH
10115: LD_STRING D6-Frank-3
10117: PPUSH
10118: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10122: LD_EXP 37
10126: PPUSH
10127: LD_STRING D6-JMM-3
10129: PPUSH
10130: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10134: LD_EXP 51
10138: PPUSH
10139: LD_STRING D6-Frank-4
10141: PPUSH
10142: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10146: LD_EXP 51
10150: PPUSH
10151: LD_STRING D6-Frank-4a
10153: PPUSH
10154: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10158: LD_EXP 37
10162: PPUSH
10163: LD_STRING D6-JMM-4
10165: PPUSH
10166: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10170: LD_EXP 51
10174: PPUSH
10175: LD_STRING D6-Frank-5
10177: PPUSH
10178: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10182: LD_EXP 40
10186: PUSH
10187: LD_EXP 40
10191: PPUSH
10192: CALL_OW 302
10196: AND
10197: IFFALSE 10211
// Say ( Lisa , D6-Lisa-5 ) ;
10199: LD_EXP 40
10203: PPUSH
10204: LD_STRING D6-Lisa-5
10206: PPUSH
10207: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10211: LD_EXP 51
10215: PPUSH
10216: LD_STRING D6-Frank-6
10218: PPUSH
10219: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10223: LD_EXP 37
10227: PPUSH
10228: LD_STRING D6-JMM-6
10230: PPUSH
10231: CALL_OW 88
// end else
10235: GO 10352
// begin ComTurnUnit ( Frank , JMM ) ;
10237: LD_EXP 51
10241: PPUSH
10242: LD_EXP 37
10246: PPUSH
10247: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10251: LD_EXP 51
10255: PPUSH
10256: LD_STRING D6-Frank-4
10258: PPUSH
10259: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10263: LD_EXP 51
10267: PPUSH
10268: LD_STRING D6-Frank-4a
10270: PPUSH
10271: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10275: LD_EXP 37
10279: PPUSH
10280: LD_STRING D6-JMM-4
10282: PPUSH
10283: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10287: LD_EXP 51
10291: PPUSH
10292: LD_STRING D6-Frank-5
10294: PPUSH
10295: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10299: LD_EXP 40
10303: PUSH
10304: LD_EXP 40
10308: PPUSH
10309: CALL_OW 302
10313: AND
10314: IFFALSE 10328
// Say ( Lisa , D6-Lisa-5 ) ;
10316: LD_EXP 40
10320: PPUSH
10321: LD_STRING D6-Lisa-5
10323: PPUSH
10324: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10328: LD_EXP 51
10332: PPUSH
10333: LD_STRING D6-Frank-6
10335: PPUSH
10336: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10340: LD_EXP 37
10344: PPUSH
10345: LD_STRING D6-JMM-6
10347: PPUSH
10348: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10352: LD_STRING Q1
10354: PPUSH
10355: CALL_OW 97
10359: PUSH
10360: LD_INT 1
10362: DOUBLE
10363: EQUAL
10364: IFTRUE 10368
10366: GO 10379
10368: POP
// frank_send_to_scout := true ; 2 :
10369: LD_ADDR_EXP 15
10373: PUSH
10374: LD_INT 1
10376: ST_TO_ADDR
10377: GO 10399
10379: LD_INT 2
10381: DOUBLE
10382: EQUAL
10383: IFTRUE 10387
10385: GO 10398
10387: POP
// frank_send_to_scout := false ; end ;
10388: LD_ADDR_EXP 15
10392: PUSH
10393: LD_INT 0
10395: ST_TO_ADDR
10396: GO 10399
10398: POP
// Video ( false ) ;
10399: LD_INT 0
10401: PPUSH
10402: CALL 72170 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10406: LD_EXP 37
10410: PUSH
10411: LD_EXP 40
10415: PUSH
10416: LD_EXP 47
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 139
// if frank_send_to_scout then
10430: LD_EXP 15
10434: IFFALSE 10488
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10436: LD_EXP 51
10440: PPUSH
10441: LD_INT 15
10443: PPUSH
10444: CALL_OW 113
// wait ( 0 0$01 ) ;
10448: LD_INT 35
10450: PPUSH
10451: CALL_OW 67
// until not See ( 1 , Frank ) ;
10455: LD_INT 1
10457: PPUSH
10458: LD_EXP 51
10462: PPUSH
10463: CALL_OW 292
10467: NOT
10468: IFFALSE 10436
// wait ( 0 0$02 ) ;
10470: LD_INT 70
10472: PPUSH
10473: CALL_OW 67
// RemoveUnit ( Frank ) ;
10477: LD_EXP 51
10481: PPUSH
10482: CALL_OW 64
// end else
10486: GO 10500
// SetSide ( Frank , 1 ) ;
10488: LD_EXP 51
10492: PPUSH
10493: LD_INT 1
10495: PPUSH
10496: CALL_OW 235
// send_attack_on_cornel_base := true ;
10500: LD_ADDR_EXP 26
10504: PUSH
10505: LD_INT 1
10507: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10508: LD_INT 35
10510: PPUSH
10511: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
10515: LD_ADDR_EXP 29
10519: PUSH
10520: LD_EXP 29
10524: PPUSH
10525: LD_STRING -
10527: PPUSH
10528: CALL 1069 0 2
10532: ST_TO_ADDR
// if debug then
10533: LD_EXP 1
10537: IFFALSE 10549
// debug_strings := time_to_prepare ;
10539: LD_ADDR_OWVAR 48
10543: PUSH
10544: LD_EXP 29
10548: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
10549: LD_EXP 29
10553: PUSH
10554: LD_INT 0
10556: EQUAL
10557: IFFALSE 10508
// cornel_prepared := true ;
10559: LD_ADDR_EXP 11
10563: PUSH
10564: LD_INT 1
10566: ST_TO_ADDR
// end ;
10567: PPOPN 3
10569: END
// every 0 0$01 trigger cornel_prepared do
10570: LD_EXP 11
10574: IFFALSE 10882
10576: GO 10578
10578: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
10579: LD_EXP 44
10583: PPUSH
10584: LD_STRING D3-Corn-1
10586: PPUSH
10587: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
10591: LD_STRING MOutWait
10593: PPUSH
10594: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
10598: LD_INT 35
10600: PPUSH
10601: CALL_OW 67
// until cornel_counter = 0 ;
10605: LD_EXP 10
10609: PUSH
10610: LD_INT 0
10612: EQUAL
10613: IFFALSE 10598
// SayRadio ( Cornel , D3a-Corn-1 ) ;
10615: LD_EXP 44
10619: PPUSH
10620: LD_STRING D3a-Corn-1
10622: PPUSH
10623: CALL_OW 94
// if IsOk ( Cornel ) then
10627: LD_EXP 44
10631: PPUSH
10632: CALL_OW 302
10636: IFFALSE 10650
// Say ( JMM , D3a-JMM-1 ) ;
10638: LD_EXP 37
10642: PPUSH
10643: LD_STRING D3a-JMM-1
10645: PPUSH
10646: CALL_OW 88
// end_mission_allowed := true ;
10650: LD_ADDR_EXP 21
10654: PUSH
10655: LD_INT 1
10657: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
10658: LD_STRING M2
10660: PPUSH
10661: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
10665: LD_INT 9
10667: PPUSH
10668: LD_INT 1
10670: PPUSH
10671: CALL_OW 424
// Wait ( 0 0$05 ) ;
10675: LD_INT 175
10677: PPUSH
10678: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
10682: LD_EXP 44
10686: PPUSH
10687: LD_STRING D3a-Corn-2
10689: PPUSH
10690: CALL_OW 94
// cornel_attack := true ;
10694: LD_ADDR_EXP 9
10698: PUSH
10699: LD_INT 1
10701: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
10702: LD_INT 105
10704: PPUSH
10705: CALL_OW 67
// AddMoreTanks ( ) ;
10709: CALL 4920 0 0
// if frank_send_to_scout then
10713: LD_EXP 15
10717: IFFALSE 10882
// begin InitHc ;
10719: CALL_OW 19
// InitUc ;
10723: CALL_OW 18
// uc_side := 8 ;
10727: LD_ADDR_OWVAR 20
10731: PUSH
10732: LD_INT 8
10734: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
10735: LD_ADDR_EXP 51
10739: PUSH
10740: LD_STRING Frank
10742: PPUSH
10743: LD_INT 0
10745: PPUSH
10746: LD_STRING 
10748: PPUSH
10749: CALL 35876 0 3
10753: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
10754: LD_EXP 51
10758: PPUSH
10759: LD_INT 6
10761: PPUSH
10762: LD_INT 9
10764: PPUSH
10765: LD_INT 0
10767: PPUSH
10768: CALL_OW 48
// ComCrawl ( Frank ) ;
10772: LD_EXP 51
10776: PPUSH
10777: CALL_OW 137
// repeat wait ( 10 ) ;
10781: LD_INT 10
10783: PPUSH
10784: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
10788: LD_EXP 37
10792: PPUSH
10793: LD_EXP 51
10797: PPUSH
10798: CALL_OW 296
10802: PUSH
10803: LD_INT 9
10805: LESS
10806: PUSH
10807: LD_INT 9
10809: PPUSH
10810: LD_INT 22
10812: PUSH
10813: LD_INT 1
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PPUSH
10820: CALL_OW 70
10824: OR
10825: IFFALSE 10781
// if IsDead ( Frank ) then
10827: LD_EXP 51
10831: PPUSH
10832: CALL_OW 301
10836: IFFALSE 10840
// exit ;
10838: GO 10882
// CenterOnUnits ( Frank ) ;
10840: LD_EXP 51
10844: PPUSH
10845: CALL_OW 85
// SetSide ( Frank , 1 ) ;
10849: LD_EXP 51
10853: PPUSH
10854: LD_INT 1
10856: PPUSH
10857: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
10861: LD_EXP 51
10865: PPUSH
10866: LD_STRING D6a-Frank-1
10868: PPUSH
10869: CALL_OW 88
// ComWalk ( Frank ) ;
10873: LD_EXP 51
10877: PPUSH
10878: CALL_OW 138
// end ; end ;
10882: END
// every 0 0$01 trigger solar_builded do
10883: LD_EXP 14
10887: IFFALSE 10991
10889: GO 10891
10891: DISABLE
// begin Wait ( 0 0$02 ) ;
10892: LD_INT 70
10894: PPUSH
10895: CALL_OW 67
// DialogueOn ;
10899: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
10903: LD_EXP 37
10907: PPUSH
10908: LD_STRING D2b-JMM-1
10910: PPUSH
10911: CALL_OW 88
// if Walker and IsOk ( Walker ) then
10915: LD_EXP 48
10919: PUSH
10920: LD_EXP 48
10924: PPUSH
10925: CALL_OW 302
10929: AND
10930: IFFALSE 10980
// begin Say ( Walker , D2b-Sci1-1 ) ;
10932: LD_EXP 48
10936: PPUSH
10937: LD_STRING D2b-Sci1-1
10939: PPUSH
10940: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
10944: LD_EXP 37
10948: PPUSH
10949: LD_STRING D2b-JMM-2
10951: PPUSH
10952: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
10956: LD_EXP 48
10960: PPUSH
10961: LD_STRING D2b-Sci1-2
10963: PPUSH
10964: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
10968: LD_EXP 37
10972: PPUSH
10973: LD_STRING D2b-JMM-3
10975: PPUSH
10976: CALL_OW 88
// end ; DialogueOff ;
10980: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
10984: LD_STRING MOutSol
10986: PPUSH
10987: CALL_OW 337
// end ;
10991: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
10992: LD_EXP 14
10996: PUSH
10997: LD_EXP 37
11001: PPUSH
11002: CALL_OW 302
11006: AND
11007: PUSH
11008: LD_EXP 37
11012: PPUSH
11013: CALL 903 0 1
11017: AND
11018: PUSH
11019: LD_EXP 16
11023: NOT
11024: AND
11025: IFFALSE 11096
11027: GO 11029
11029: DISABLE
11030: LD_INT 0
11032: PPUSH
// begin jmm_in_veh := true ;
11033: LD_ADDR_EXP 16
11037: PUSH
11038: LD_INT 1
11040: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11041: LD_ADDR_VAR 0 1
11045: PUSH
11046: LD_INT 0
11048: PPUSH
11049: LD_INT 1
11051: PPUSH
11052: CALL_OW 12
11056: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11057: LD_INT 70
11059: PPUSH
11060: CALL_OW 67
// if i then
11064: LD_VAR 0 1
11068: IFFALSE 11084
// Say ( JMM , D2c-JMM-1 ) else
11070: LD_EXP 37
11074: PPUSH
11075: LD_STRING D2c-JMM-1
11077: PPUSH
11078: CALL_OW 88
11082: GO 11096
// Say ( JMM , D2c-JMM-1a ) ;
11084: LD_EXP 37
11088: PPUSH
11089: LD_STRING D2c-JMM-1a
11091: PPUSH
11092: CALL_OW 88
// end ;
11096: PPOPN 1
11098: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11099: LD_EXP 14
11103: PUSH
11104: LD_EXP 38
11108: PPUSH
11109: CALL_OW 302
11113: AND
11114: PUSH
11115: LD_EXP 38
11119: PPUSH
11120: CALL 903 0 1
11124: AND
11125: PUSH
11126: LD_EXP 17
11130: NOT
11131: AND
11132: IFFALSE 11164
11134: GO 11136
11136: DISABLE
// begin bobby_in_veh := true ;
11137: LD_ADDR_EXP 17
11141: PUSH
11142: LD_INT 1
11144: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11145: LD_INT 70
11147: PPUSH
11148: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11152: LD_EXP 38
11156: PPUSH
11157: LD_STRING D2c-Bobby-1
11159: PPUSH
11160: CALL_OW 88
11164: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11165: LD_EXP 14
11169: PUSH
11170: LD_EXP 40
11174: PPUSH
11175: CALL_OW 302
11179: AND
11180: PUSH
11181: LD_EXP 40
11185: PPUSH
11186: CALL 903 0 1
11190: AND
11191: PUSH
11192: LD_EXP 19
11196: NOT
11197: AND
11198: IFFALSE 11230
11200: GO 11202
11202: DISABLE
// begin lisa_in_veh := true ;
11203: LD_ADDR_EXP 19
11207: PUSH
11208: LD_INT 1
11210: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11211: LD_INT 70
11213: PPUSH
11214: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11218: LD_EXP 40
11222: PPUSH
11223: LD_STRING D2c-Lisa-1
11225: PPUSH
11226: CALL_OW 88
11230: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11231: LD_EXP 14
11235: PUSH
11236: LD_EXP 39
11240: PPUSH
11241: CALL_OW 302
11245: AND
11246: PUSH
11247: LD_EXP 39
11251: PPUSH
11252: CALL 903 0 1
11256: AND
11257: PUSH
11258: LD_EXP 18
11262: NOT
11263: AND
11264: IFFALSE 11335
11266: GO 11268
11268: DISABLE
11269: LD_INT 0
11271: PPUSH
// begin cyrus_in_veh := true ;
11272: LD_ADDR_EXP 18
11276: PUSH
11277: LD_INT 1
11279: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11280: LD_ADDR_VAR 0 1
11284: PUSH
11285: LD_INT 0
11287: PPUSH
11288: LD_INT 1
11290: PPUSH
11291: CALL_OW 12
11295: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11296: LD_INT 70
11298: PPUSH
11299: CALL_OW 67
// if i then
11303: LD_VAR 0 1
11307: IFFALSE 11323
// Say ( Cyrus , D2c-Cyrus-1 ) else
11309: LD_EXP 39
11313: PPUSH
11314: LD_STRING D2c-Cyrus-1
11316: PPUSH
11317: CALL_OW 88
11321: GO 11335
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11323: LD_EXP 39
11327: PPUSH
11328: LD_STRING D2c-Cyrus-1a
11330: PPUSH
11331: CALL_OW 88
// end ;
11335: PPOPN 1
11337: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11338: LD_EXP 44
11342: PPUSH
11343: LD_INT 16
11345: PPUSH
11346: CALL_OW 308
11350: IFFALSE 11631
11352: GO 11354
11354: DISABLE
11355: LD_INT 0
11357: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11358: LD_INT 3
11360: PPUSH
11361: LD_EXP 44
11365: PPUSH
11366: CALL_OW 471
// send_attack_on_cornel := true ;
11370: LD_ADDR_EXP 32
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// if ru_vehicles then
11378: LD_EXP 56
11382: IFFALSE 11416
// for i in ru_vehicles do
11384: LD_ADDR_VAR 0 1
11388: PUSH
11389: LD_EXP 56
11393: PUSH
11394: FOR_IN
11395: IFFALSE 11414
// ComAgressiveMove ( i , 215 , 69 ) ;
11397: LD_VAR 0 1
11401: PPUSH
11402: LD_INT 215
11404: PPUSH
11405: LD_INT 69
11407: PPUSH
11408: CALL_OW 114
11412: GO 11394
11414: POP
11415: POP
// if ru_patrol then
11416: LD_EXP 53
11420: IFFALSE 11454
// for i in ru_patrol do
11422: LD_ADDR_VAR 0 1
11426: PUSH
11427: LD_EXP 53
11431: PUSH
11432: FOR_IN
11433: IFFALSE 11452
// ComAgressiveMove ( i , 215 , 69 ) ;
11435: LD_VAR 0 1
11439: PPUSH
11440: LD_INT 215
11442: PPUSH
11443: LD_INT 69
11445: PPUSH
11446: CALL_OW 114
11450: GO 11432
11452: POP
11453: POP
// if frank_send_to_scout then
11454: LD_EXP 15
11458: IFFALSE 11472
// begin SayRadio ( Frank , D3b-Frank-1 ) ;
11460: LD_EXP 51
11464: PPUSH
11465: LD_STRING D3b-Frank-1
11467: PPUSH
11468: CALL_OW 94
// end ; Wait ( 0 0$03 ) ;
11472: LD_INT 105
11474: PPUSH
11475: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11479: LD_EXP 44
11483: PPUSH
11484: LD_STRING D4-Corn-1
11486: PPUSH
11487: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11491: LD_INT 35
11493: PPUSH
11494: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11498: LD_INT 22
11500: PUSH
11501: LD_INT 4
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: PUSH
11508: LD_INT 21
11510: PUSH
11511: LD_INT 1
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 3
11520: PUSH
11521: LD_INT 24
11523: PUSH
11524: LD_INT 1000
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: LIST
11539: PPUSH
11540: CALL_OW 69
11544: PUSH
11545: LD_INT 6
11547: LESS
11548: IFFALSE 11491
// if Cornel then
11550: LD_EXP 44
11554: IFFALSE 11594
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
11556: LD_EXP 44
11560: PPUSH
11561: LD_STRING D5-Corn-1
11563: PPUSH
11564: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
11568: LD_EXP 44
11572: PPUSH
11573: LD_EXP 2
11577: PUSH
11578: LD_STRING Cornel
11580: STR
11581: PPUSH
11582: CALL_OW 38
// cornel_saved := true ;
11586: LD_ADDR_EXP 27
11590: PUSH
11591: LD_INT 1
11593: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
11594: LD_INT 4
11596: PPUSH
11597: LD_INT 8
11599: PPUSH
11600: CALL_OW 343
// Wait ( 0 0$01 ) ;
11604: LD_INT 35
11606: PPUSH
11607: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
11611: LD_INT 3
11613: PPUSH
11614: LD_EXP 44
11618: PPUSH
11619: CALL_OW 472
// send_attack_on_cornel := false ;
11623: LD_ADDR_EXP 32
11627: PUSH
11628: LD_INT 0
11630: ST_TO_ADDR
// end ;
11631: PPOPN 1
11633: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
11634: LD_INT 9
11636: PPUSH
11637: LD_INT 22
11639: PUSH
11640: LD_INT 1
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PPUSH
11647: CALL_OW 70
11651: PUSH
11652: LD_EXP 33
11656: OR
11657: IFFALSE 11878
11659: GO 11661
11661: DISABLE
11662: LD_INT 0
11664: PPUSH
11665: PPUSH
// begin enable ;
11666: ENABLE
// if not jmm_on_west then
11667: LD_EXP 5
11671: NOT
11672: IFFALSE 11683
// begin YouLost ( 4 ) ;
11674: LD_STRING 4
11676: PPUSH
11677: CALL_OW 104
// exit ;
11681: GO 11878
// end ; if not game_end then
11683: LD_EXP 33
11687: NOT
11688: IFFALSE 11698
// game_end := true ;
11690: LD_ADDR_EXP 33
11694: PUSH
11695: LD_INT 1
11697: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11698: LD_ADDR_VAR 0 2
11702: PUSH
11703: LD_INT 9
11705: PPUSH
11706: LD_INT 22
11708: PUSH
11709: LD_INT 1
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PPUSH
11716: CALL_OW 70
11720: ST_TO_ADDR
// if not filter then
11721: LD_VAR 0 2
11725: NOT
11726: IFFALSE 11730
// exit ;
11728: GO 11878
// for i in filter do
11730: LD_ADDR_VAR 0 1
11734: PUSH
11735: LD_VAR 0 2
11739: PUSH
11740: FOR_IN
11741: IFFALSE 11876
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle and GetNation ( i ) = nation_american then
11743: LD_VAR 0 1
11747: PPUSH
11748: CALL_OW 302
11752: PUSH
11753: LD_VAR 0 1
11757: PPUSH
11758: CALL_OW 247
11762: PUSH
11763: LD_INT 2
11765: EQUAL
11766: AND
11767: PUSH
11768: LD_VAR 0 1
11772: PPUSH
11773: CALL_OW 248
11777: PUSH
11778: LD_INT 1
11780: EQUAL
11781: AND
11782: IFFALSE 11839
// begin if i = JMM and save_group < 4 then
11784: LD_VAR 0 1
11788: PUSH
11789: LD_EXP 37
11793: EQUAL
11794: PUSH
11795: LD_EXP 23
11799: PUSH
11800: LD_INT 4
11802: LESS
11803: AND
11804: IFFALSE 11808
// continue ;
11806: GO 11740
// veh_on_meta := true ;
11808: LD_ADDR_EXP 28
11812: PUSH
11813: LD_INT 1
11815: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
11816: LD_VAR 0 1
11820: PPUSH
11821: CALL_OW 311
11825: PPUSH
11826: CALL 11881 0 1
// RemoveUnit ( i ) ;
11830: LD_VAR 0 1
11834: PPUSH
11835: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
11839: LD_VAR 0 1
11843: PPUSH
11844: CALL_OW 302
11848: PUSH
11849: LD_VAR 0 1
11853: PPUSH
11854: CALL_OW 247
11858: PUSH
11859: LD_INT 1
11861: EQUAL
11862: AND
11863: IFFALSE 11874
// Save ( i ) ;
11865: LD_VAR 0 1
11869: PPUSH
11870: CALL 11881 0 1
// end ;
11874: GO 11740
11876: POP
11877: POP
// end ;
11878: PPOPN 2
11880: END
// export function Save ( i ) ; begin
11881: LD_INT 0
11883: PPUSH
// if i = JMM and save_group >= 4 then
11884: LD_VAR 0 1
11888: PUSH
11889: LD_EXP 37
11893: EQUAL
11894: PUSH
11895: LD_EXP 23
11899: PUSH
11900: LD_INT 4
11902: GREATEREQUAL
11903: AND
11904: IFFALSE 12040
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
11906: LD_EXP 24
11910: PUSH
11911: LD_INT 22
11913: PUSH
11914: LD_INT 1
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: LD_INT 21
11923: PUSH
11924: LD_INT 1
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: PUSH
11940: LD_INT 1
11942: GREATER
11943: AND
11944: IFFALSE 12001
// begin show_query := false ;
11946: LD_ADDR_EXP 24
11950: PUSH
11951: LD_INT 0
11953: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
11954: LD_STRING Q2
11956: PPUSH
11957: CALL_OW 97
11961: PUSH
11962: LD_INT 1
11964: DOUBLE
11965: EQUAL
11966: IFTRUE 11970
11968: GO 11981
11970: POP
// wait_for_them := true ; 2 :
11971: LD_ADDR_EXP 25
11975: PUSH
11976: LD_INT 1
11978: ST_TO_ADDR
11979: GO 12001
11981: LD_INT 2
11983: DOUBLE
11984: EQUAL
11985: IFTRUE 11989
11987: GO 12000
11989: POP
// wait_for_them := false ; end ;
11990: LD_ADDR_EXP 25
11994: PUSH
11995: LD_INT 0
11997: ST_TO_ADDR
11998: GO 12001
12000: POP
// end ; save_counter := save_counter + 1 ;
12001: LD_ADDR_EXP 36
12005: PUSH
12006: LD_EXP 36
12010: PUSH
12011: LD_INT 1
12013: PLUS
12014: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12015: LD_ADDR_EXP 23
12019: PUSH
12020: LD_EXP 23
12024: PUSH
12025: LD_EXP 37
12029: ADD
12030: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12031: LD_EXP 37
12035: PPUSH
12036: CALL_OW 64
// end ; if i = Lisa then
12040: LD_VAR 0 1
12044: PUSH
12045: LD_EXP 40
12049: EQUAL
12050: IFFALSE 12091
// begin save_counter := save_counter + 1 ;
12052: LD_ADDR_EXP 36
12056: PUSH
12057: LD_EXP 36
12061: PUSH
12062: LD_INT 1
12064: PLUS
12065: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12066: LD_ADDR_EXP 23
12070: PUSH
12071: LD_EXP 23
12075: PUSH
12076: LD_EXP 40
12080: ADD
12081: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12082: LD_EXP 40
12086: PPUSH
12087: CALL_OW 64
// end ; if i = Bobby then
12091: LD_VAR 0 1
12095: PUSH
12096: LD_EXP 38
12100: EQUAL
12101: IFFALSE 12142
// begin save_counter := save_counter + 1 ;
12103: LD_ADDR_EXP 36
12107: PUSH
12108: LD_EXP 36
12112: PUSH
12113: LD_INT 1
12115: PLUS
12116: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12117: LD_ADDR_EXP 23
12121: PUSH
12122: LD_EXP 23
12126: PUSH
12127: LD_EXP 38
12131: ADD
12132: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12133: LD_EXP 38
12137: PPUSH
12138: CALL_OW 64
// end ; if i = Cyrus then
12142: LD_VAR 0 1
12146: PUSH
12147: LD_EXP 39
12151: EQUAL
12152: IFFALSE 12193
// begin save_counter := save_counter + 1 ;
12154: LD_ADDR_EXP 36
12158: PUSH
12159: LD_EXP 36
12163: PUSH
12164: LD_INT 1
12166: PLUS
12167: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12168: LD_ADDR_EXP 23
12172: PUSH
12173: LD_EXP 23
12177: PUSH
12178: LD_EXP 39
12182: ADD
12183: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12184: LD_EXP 39
12188: PPUSH
12189: CALL_OW 64
// end ; if i = Khatam then
12193: LD_VAR 0 1
12197: PUSH
12198: LD_EXP 41
12202: EQUAL
12203: IFFALSE 12244
// begin save_counter := save_counter + 1 ;
12205: LD_ADDR_EXP 36
12209: PUSH
12210: LD_EXP 36
12214: PUSH
12215: LD_INT 1
12217: PLUS
12218: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12219: LD_ADDR_EXP 23
12223: PUSH
12224: LD_EXP 23
12228: PUSH
12229: LD_EXP 41
12233: ADD
12234: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12235: LD_EXP 41
12239: PPUSH
12240: CALL_OW 64
// end ; if i = Frank then
12244: LD_VAR 0 1
12248: PUSH
12249: LD_EXP 51
12253: EQUAL
12254: IFFALSE 12295
// begin save_counter := save_counter + 1 ;
12256: LD_ADDR_EXP 36
12260: PUSH
12261: LD_EXP 36
12265: PUSH
12266: LD_INT 1
12268: PLUS
12269: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12270: LD_ADDR_EXP 23
12274: PUSH
12275: LD_EXP 23
12279: PUSH
12280: LD_EXP 51
12284: ADD
12285: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12286: LD_EXP 51
12290: PPUSH
12291: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12295: LD_VAR 0 1
12299: PUSH
12300: LD_EXP 37
12304: NONEQUAL
12305: PUSH
12306: LD_VAR 0 1
12310: PPUSH
12311: CALL_OW 302
12315: AND
12316: PUSH
12317: LD_VAR 0 1
12321: PPUSH
12322: CALL_OW 247
12326: PUSH
12327: LD_INT 1
12329: EQUAL
12330: AND
12331: PUSH
12332: LD_VAR 0 1
12336: PUSH
12337: LD_EXP 23
12341: IN
12342: NOT
12343: AND
12344: IFFALSE 12385
// begin save_counter := save_counter + 1 ;
12346: LD_ADDR_EXP 36
12350: PUSH
12351: LD_EXP 36
12355: PUSH
12356: LD_INT 1
12358: PLUS
12359: ST_TO_ADDR
// save_others := save_others ^ i ;
12360: LD_ADDR_EXP 22
12364: PUSH
12365: LD_EXP 22
12369: PUSH
12370: LD_VAR 0 1
12374: ADD
12375: ST_TO_ADDR
// RemoveUnit ( i ) ;
12376: LD_VAR 0 1
12380: PPUSH
12381: CALL_OW 64
// end ; end ;
12385: LD_VAR 0 2
12389: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12390: LD_EXP 24
12394: NOT
12395: PUSH
12396: LD_EXP 25
12400: NOT
12401: AND
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_INT 1
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 21
12415: PUSH
12416: LD_INT 1
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 69
12431: PUSH
12432: LD_INT 0
12434: EQUAL
12435: OR
12436: IFFALSE 12445
12438: GO 12440
12440: DISABLE
// EndMission ;
12441: CALL 12446 0 0
12445: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
12450: PPUSH
12451: PPUSH
12452: PPUSH
// wait ( 0 0$01 ) ;
12453: LD_INT 35
12455: PPUSH
12456: CALL_OW 67
// if tick <= 12 12$00 then
12460: LD_OWVAR 1
12464: PUSH
12465: LD_INT 25200
12467: LESSEQUAL
12468: IFFALSE 12477
// SetAchievement ( ACH_ASPEED_3 ) ;
12470: LD_STRING ACH_ASPEED_3
12472: PPUSH
12473: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12477: LD_EXP 23
12481: PUSH
12482: LD_EXP 22
12486: ADD
12487: PPUSH
12488: LD_INT 25
12490: PUSH
12491: LD_INT 4
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PPUSH
12498: CALL_OW 72
12502: PUSH
12503: LD_INT 0
12505: EQUAL
12506: IFFALSE 12522
// begin wait ( 3 ) ;
12508: LD_INT 3
12510: PPUSH
12511: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
12515: LD_STRING ACH_NOSCI
12517: PPUSH
12518: CALL_OW 543
// end ; m1 := solar_builded ;
12522: LD_ADDR_VAR 0 3
12526: PUSH
12527: LD_EXP 14
12531: ST_TO_ADDR
// m2 := veh_on_meta ;
12532: LD_ADDR_VAR 0 4
12536: PUSH
12537: LD_EXP 28
12541: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
12542: LD_ADDR_VAR 0 5
12546: PUSH
12547: LD_EXP 34
12551: PUSH
12552: LD_INT 0
12554: EQUAL
12555: ST_TO_ADDR
// if solar_builded then
12556: LD_EXP 14
12560: IFFALSE 12574
// AddMedal ( Solar1 , 1 ) else
12562: LD_STRING Solar1
12564: PPUSH
12565: LD_INT 1
12567: PPUSH
12568: CALL_OW 101
12572: GO 12585
// AddMedal ( Solar1 , - 1 ) ;
12574: LD_STRING Solar1
12576: PPUSH
12577: LD_INT 1
12579: NEG
12580: PPUSH
12581: CALL_OW 101
// if veh_on_meta then
12585: LD_EXP 28
12589: IFFALSE 12603
// AddMedal ( Solar2 , 1 ) else
12591: LD_STRING Solar2
12593: PPUSH
12594: LD_INT 1
12596: PPUSH
12597: CALL_OW 101
12601: GO 12633
// if solar_builded then
12603: LD_EXP 14
12607: IFFALSE 12622
// AddMedal ( Solar2 , - 1 ) else
12609: LD_STRING Solar2
12611: PPUSH
12612: LD_INT 1
12614: NEG
12615: PPUSH
12616: CALL_OW 101
12620: GO 12633
// AddMedal ( Solar2 , - 2 ) ;
12622: LD_STRING Solar2
12624: PPUSH
12625: LD_INT 2
12627: NEG
12628: PPUSH
12629: CALL_OW 101
// if lose_counter = 0 then
12633: LD_EXP 34
12637: PUSH
12638: LD_INT 0
12640: EQUAL
12641: IFFALSE 12655
// AddMedal ( No , 1 ) else
12643: LD_STRING No
12645: PPUSH
12646: LD_INT 1
12648: PPUSH
12649: CALL_OW 101
12653: GO 12699
// if lose_counter > 0 and lose_counter < 4 then
12655: LD_EXP 34
12659: PUSH
12660: LD_INT 0
12662: GREATER
12663: PUSH
12664: LD_EXP 34
12668: PUSH
12669: LD_INT 4
12671: LESS
12672: AND
12673: IFFALSE 12688
// AddMedal ( No , - 1 ) else
12675: LD_STRING No
12677: PPUSH
12678: LD_INT 1
12680: NEG
12681: PPUSH
12682: CALL_OW 101
12686: GO 12699
// AddMedal ( UpTo4 , - 1 ) ;
12688: LD_STRING UpTo4
12690: PPUSH
12691: LD_INT 1
12693: NEG
12694: PPUSH
12695: CALL_OW 101
// GiveMedals ( MAIN ) ;
12699: LD_STRING MAIN
12701: PPUSH
12702: CALL_OW 102
// if Difficulty = 3 and m1 and m2 and m3 then
12706: LD_OWVAR 67
12710: PUSH
12711: LD_INT 3
12713: EQUAL
12714: PUSH
12715: LD_VAR 0 3
12719: AND
12720: PUSH
12721: LD_VAR 0 4
12725: AND
12726: PUSH
12727: LD_VAR 0 5
12731: AND
12732: IFFALSE 12744
// SetAchievementEX ( ACH_AMER , 3 ) ;
12734: LD_STRING ACH_AMER
12736: PPUSH
12737: LD_INT 3
12739: PPUSH
12740: CALL_OW 564
// if IsDead ( Pokryshkin ) then
12744: LD_EXP 52
12748: PPUSH
12749: CALL_OW 301
12753: IFFALSE 12809
// begin stop_talking := true ;
12755: LD_ADDR_OWVAR 56
12759: PUSH
12760: LD_INT 1
12762: ST_TO_ADDR
// for i in save_group ^ save_others do
12763: LD_ADDR_VAR 0 2
12767: PUSH
12768: LD_EXP 23
12772: PUSH
12773: LD_EXP 22
12777: ADD
12778: PUSH
12779: FOR_IN
12780: IFFALSE 12799
// AddExperience ( i , skill_combat , 1500 ) ;
12782: LD_VAR 0 2
12786: PPUSH
12787: LD_INT 1
12789: PPUSH
12790: LD_INT 1500
12792: PPUSH
12793: CALL_OW 492
12797: GO 12779
12799: POP
12800: POP
// stop_talking := false ;
12801: LD_ADDR_OWVAR 56
12805: PUSH
12806: LD_INT 0
12808: ST_TO_ADDR
// end ; RewardPeople ( save_group ^ save_others ) ;
12809: LD_EXP 23
12813: PUSH
12814: LD_EXP 22
12818: ADD
12819: PPUSH
12820: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
12824: LD_EXP 37
12828: PPUSH
12829: LD_EXP 2
12833: PUSH
12834: LD_STRING JMM
12836: STR
12837: PPUSH
12838: CALL_OW 38
// if Bobby in save_group then
12842: LD_EXP 38
12846: PUSH
12847: LD_EXP 23
12851: IN
12852: IFFALSE 12872
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
12854: LD_EXP 38
12858: PPUSH
12859: LD_EXP 2
12863: PUSH
12864: LD_STRING Bobby
12866: STR
12867: PPUSH
12868: CALL_OW 38
// if Cyrus in save_group then
12872: LD_EXP 39
12876: PUSH
12877: LD_EXP 23
12881: IN
12882: IFFALSE 12902
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
12884: LD_EXP 39
12888: PPUSH
12889: LD_EXP 2
12893: PUSH
12894: LD_STRING Cyrus
12896: STR
12897: PPUSH
12898: CALL_OW 38
// if Lisa in save_group then
12902: LD_EXP 40
12906: PUSH
12907: LD_EXP 23
12911: IN
12912: IFFALSE 12932
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
12914: LD_EXP 40
12918: PPUSH
12919: LD_EXP 2
12923: PUSH
12924: LD_STRING Lisa
12926: STR
12927: PPUSH
12928: CALL_OW 38
// if Frank in save_group then
12932: LD_EXP 51
12936: PUSH
12937: LD_EXP 23
12941: IN
12942: IFFALSE 12962
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
12944: LD_EXP 51
12948: PPUSH
12949: LD_EXP 2
12953: PUSH
12954: LD_STRING Frank
12956: STR
12957: PPUSH
12958: CALL_OW 38
// if Khatam in save_group then
12962: LD_EXP 41
12966: PUSH
12967: LD_EXP 23
12971: IN
12972: IFFALSE 12992
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
12974: LD_EXP 41
12978: PPUSH
12979: LD_EXP 2
12983: PUSH
12984: LD_STRING Khatam
12986: STR
12987: PPUSH
12988: CALL_OW 38
// if save_others then
12992: LD_EXP 22
12996: IFFALSE 13010
// SaveCharacters ( save_others , 03_others ) ;
12998: LD_EXP 22
13002: PPUSH
13003: LD_STRING 03_others
13005: PPUSH
13006: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13010: LD_EXP 45
13014: PUSH
13015: LD_EXP 45
13019: PPUSH
13020: CALL_OW 302
13024: AND
13025: PUSH
13026: LD_EXP 27
13030: AND
13031: IFFALSE 13043
// begin ResetFog ;
13033: CALL_OW 335
// DisplayEndingScene ;
13037: CALL 13065 0 0
// end else
13041: GO 13056
// DeleteCharacters ( mission_prefix & Cornel ) ;
13043: LD_EXP 2
13047: PUSH
13048: LD_STRING Cornel
13050: STR
13051: PPUSH
13052: CALL_OW 40
// YouWin ;
13056: CALL_OW 103
// end ;
13060: LD_VAR 0 1
13064: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13065: LD_INT 0
13067: PPUSH
13068: PPUSH
13069: PPUSH
13070: PPUSH
13071: PPUSH
13072: PPUSH
// InGameOn ;
13073: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13077: LD_INT 208
13079: PPUSH
13080: LD_INT 62
13082: PPUSH
13083: LD_INT 1
13085: PPUSH
13086: LD_INT 10
13088: NEG
13089: PPUSH
13090: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13094: LD_INT 208
13096: PPUSH
13097: LD_INT 62
13099: PPUSH
13100: LD_INT 1
13102: PPUSH
13103: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13107: LD_ADDR_VAR 0 3
13111: PUSH
13112: LD_INT 22
13114: PUSH
13115: LD_INT 3
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 2
13124: PUSH
13125: LD_INT 21
13127: PUSH
13128: LD_INT 2
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 21
13137: PUSH
13138: LD_INT 1
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PPUSH
13154: CALL_OW 69
13158: ST_TO_ADDR
// if filter then
13159: LD_VAR 0 3
13163: IFFALSE 13191
// for i in filter do
13165: LD_ADDR_VAR 0 2
13169: PUSH
13170: LD_VAR 0 3
13174: PUSH
13175: FOR_IN
13176: IFFALSE 13189
// RemoveUnit ( i ) ;
13178: LD_VAR 0 2
13182: PPUSH
13183: CALL_OW 64
13187: GO 13175
13189: POP
13190: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13191: LD_ADDR_VAR 0 3
13195: PUSH
13196: LD_INT 22
13198: PUSH
13199: LD_INT 4
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 21
13208: PUSH
13209: LD_INT 1
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PPUSH
13220: CALL_OW 69
13224: ST_TO_ADDR
// if filter then
13225: LD_VAR 0 3
13229: IFFALSE 13260
// for i in filter do
13231: LD_ADDR_VAR 0 2
13235: PUSH
13236: LD_VAR 0 3
13240: PUSH
13241: FOR_IN
13242: IFFALSE 13258
// SetLives ( i , 0 ) ;
13244: LD_VAR 0 2
13248: PPUSH
13249: LD_INT 0
13251: PPUSH
13252: CALL_OW 234
13256: GO 13241
13258: POP
13259: POP
// uc_side := 4 ;
13260: LD_ADDR_OWVAR 20
13264: PUSH
13265: LD_INT 4
13267: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13268: LD_ADDR_VAR 0 4
13272: PUSH
13273: LD_STRING Cornell
13275: PPUSH
13276: LD_INT 0
13278: PPUSH
13279: LD_STRING 
13281: PPUSH
13282: CALL 35876 0 3
13286: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13287: LD_VAR 0 4
13291: PPUSH
13292: LD_INT 208
13294: PPUSH
13295: LD_INT 62
13297: PPUSH
13298: LD_INT 0
13300: PPUSH
13301: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13305: LD_VAR 0 4
13309: PPUSH
13310: LD_INT 100
13312: PPUSH
13313: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13317: LD_INT 3
13319: PPUSH
13320: LD_VAR 0 4
13324: PPUSH
13325: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13329: LD_INT 4
13331: PPUSH
13332: LD_INT 3
13334: PPUSH
13335: LD_INT 1
13337: PPUSH
13338: LD_INT 1
13340: PPUSH
13341: CALL_OW 80
// uc_side := 3 ;
13345: LD_ADDR_OWVAR 20
13349: PUSH
13350: LD_INT 3
13352: ST_TO_ADDR
// uc_nation := 3 ;
13353: LD_ADDR_OWVAR 21
13357: PUSH
13358: LD_INT 3
13360: ST_TO_ADDR
// InitHc ;
13361: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13365: LD_ADDR_VAR 0 5
13369: PUSH
13370: LD_STRING Mikhail
13372: PPUSH
13373: LD_INT 0
13375: PPUSH
13376: LD_STRING 
13378: PPUSH
13379: CALL 35876 0 3
13383: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13384: LD_INT 1
13386: PPUSH
13387: LD_INT 1
13389: PPUSH
13390: LD_INT 0
13392: PPUSH
13393: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13397: LD_ADDR_VAR 0 6
13401: PUSH
13402: LD_VAR 0 6
13406: PUSH
13407: CALL_OW 44
13411: ADD
13412: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13413: LD_ADDR_VAR 0 6
13417: PUSH
13418: LD_VAR 0 6
13422: PUSH
13423: CALL_OW 44
13427: ADD
13428: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13429: LD_INT 2
13431: PPUSH
13432: LD_INT 4
13434: PPUSH
13435: LD_INT 0
13437: PPUSH
13438: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13442: LD_ADDR_VAR 0 6
13446: PUSH
13447: LD_VAR 0 6
13451: PUSH
13452: CALL_OW 44
13456: ADD
13457: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13458: LD_VAR 0 5
13462: PPUSH
13463: LD_INT 17
13465: PPUSH
13466: LD_INT 0
13468: PPUSH
13469: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13473: LD_VAR 0 5
13477: PPUSH
13478: LD_INT 210
13480: PPUSH
13481: LD_INT 63
13483: PPUSH
13484: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
13488: LD_VAR 0 5
13492: PPUSH
13493: LD_INT 208
13495: PPUSH
13496: LD_INT 62
13498: PPUSH
13499: CALL_OW 178
// for i in fake_russians do
13503: LD_ADDR_VAR 0 2
13507: PUSH
13508: LD_VAR 0 6
13512: PUSH
13513: FOR_IN
13514: IFFALSE 13592
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
13516: LD_VAR 0 2
13520: PPUSH
13521: LD_INT 17
13523: PPUSH
13524: LD_INT 0
13526: PPUSH
13527: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
13531: LD_VAR 0 2
13535: PPUSH
13536: LD_INT 215
13538: PPUSH
13539: LD_INT 67
13541: PPUSH
13542: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
13546: LD_VAR 0 2
13550: PPUSH
13551: LD_INT 208
13553: PPUSH
13554: LD_INT 62
13556: PPUSH
13557: CALL_OW 178
// if GetClass ( i ) = 4 then
13561: LD_VAR 0 2
13565: PPUSH
13566: CALL_OW 257
13570: PUSH
13571: LD_INT 4
13573: EQUAL
13574: IFFALSE 13590
// ComHeal ( i , fake_cornel ) ;
13576: LD_VAR 0 2
13580: PPUSH
13581: LD_VAR 0 4
13585: PPUSH
13586: CALL_OW 128
// end ;
13590: GO 13513
13592: POP
13593: POP
// Wait ( 0 0$01 ) ;
13594: LD_INT 35
13596: PPUSH
13597: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
13601: LD_INT 208
13603: PPUSH
13604: LD_INT 62
13606: PPUSH
13607: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13611: LD_INT 208
13613: PPUSH
13614: LD_INT 62
13616: PPUSH
13617: LD_INT 1
13619: PPUSH
13620: LD_INT 10
13622: NEG
13623: PPUSH
13624: CALL_OW 330
// Wait ( 0 0$15 ) ;
13628: LD_INT 525
13630: PPUSH
13631: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
13635: LD_INT 208
13637: PPUSH
13638: LD_INT 62
13640: PPUSH
13641: LD_INT 1
13643: PPUSH
13644: CALL_OW 331
// ResetFog ;
13648: CALL_OW 335
// InGameOff ;
13652: CALL_OW 9
// end ;
13656: LD_VAR 0 1
13660: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
13661: LD_INT 10
13663: PPUSH
13664: LD_INT 22
13666: PUSH
13667: LD_INT 1
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PPUSH
13674: CALL_OW 70
13678: PUSH
13679: LD_EXP 44
13683: PPUSH
13684: CALL_OW 302
13688: AND
13689: PUSH
13690: LD_INT 22
13692: PUSH
13693: LD_INT 1
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PPUSH
13700: CALL_OW 69
13704: PPUSH
13705: LD_EXP 44
13709: PPUSH
13710: CALL_OW 74
13714: PPUSH
13715: LD_EXP 44
13719: PPUSH
13720: CALL_OW 296
13724: PUSH
13725: LD_INT 30
13727: LESS
13728: OR
13729: IFFALSE 13780
13731: GO 13733
13733: DISABLE
// begin enable ;
13734: ENABLE
// powell_warn := powell_warn + 1 ;
13735: LD_ADDR_EXP 35
13739: PUSH
13740: LD_EXP 35
13744: PUSH
13745: LD_INT 1
13747: PLUS
13748: ST_TO_ADDR
// if powell_warn = 3 then
13749: LD_EXP 35
13753: PUSH
13754: LD_INT 3
13756: EQUAL
13757: IFFALSE 13768
// begin YouLost ( 5 ) ;
13759: LD_STRING 5
13761: PPUSH
13762: CALL_OW 104
// exit ;
13766: GO 13780
// end ; SayRadio ( Powell , DWarn-Pow-1 ) ;
13768: LD_EXP 46
13772: PPUSH
13773: LD_STRING DWarn-Pow-1
13775: PPUSH
13776: CALL_OW 94
// end ; end_of_file
13780: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
13781: LD_EXP 8
13785: IFFALSE 15622
13787: GO 13789
13789: DISABLE
13790: LD_INT 0
13792: PPUSH
13793: PPUSH
13794: PPUSH
13795: PPUSH
13796: PPUSH
13797: PPUSH
13798: PPUSH
13799: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
13800: LD_EXP 44
13804: PUSH
13805: LD_EXP 45
13809: ADD
13810: PUSH
13811: LD_EXP 6
13815: ADD
13816: PPUSH
13817: LD_INT 250
13819: PPUSH
13820: LD_INT 120
13822: PPUSH
13823: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
13827: LD_ADDR_VAR 0 2
13831: PUSH
13832: LD_EXP 6
13836: PPUSH
13837: LD_INT 25
13839: PUSH
13840: LD_INT 2
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PPUSH
13847: CALL_OW 72
13851: PUSH
13852: LD_EXP 45
13856: DIFF
13857: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
13858: LD_ADDR_VAR 0 3
13862: PUSH
13863: LD_EXP 6
13867: PPUSH
13868: LD_INT 21
13870: PUSH
13871: LD_INT 1
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PPUSH
13878: CALL_OW 72
13882: PUSH
13883: LD_VAR 0 2
13887: DIFF
13888: ST_TO_ADDR
// if not has_eng then
13889: LD_VAR 0 2
13893: NOT
13894: IFFALSE 13977
// begin uc_side := 4 ;
13896: LD_ADDR_OWVAR 20
13900: PUSH
13901: LD_INT 4
13903: ST_TO_ADDR
// uc_nation := 1 ;
13904: LD_ADDR_OWVAR 21
13908: PUSH
13909: LD_INT 1
13911: ST_TO_ADDR
// bc_type := b_depot ;
13912: LD_ADDR_OWVAR 42
13916: PUSH
13917: LD_INT 0
13919: ST_TO_ADDR
// bc_level := 2 ;
13920: LD_ADDR_OWVAR 43
13924: PUSH
13925: LD_INT 2
13927: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
13928: LD_ADDR_VAR 0 4
13932: PUSH
13933: LD_INT 264
13935: PPUSH
13936: LD_INT 120
13938: PPUSH
13939: LD_INT 4
13941: PPUSH
13942: CALL_OW 47
13946: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
13947: LD_INT 264
13949: PPUSH
13950: LD_INT 120
13952: PPUSH
13953: LD_INT 4
13955: PPUSH
13956: LD_INT 10
13958: NEG
13959: PPUSH
13960: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
13964: LD_INT 264
13966: PPUSH
13967: LD_INT 120
13969: PPUSH
13970: LD_INT 4
13972: PPUSH
13973: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
13977: LD_INT 35
13979: PPUSH
13980: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
13984: LD_EXP 44
13988: PPUSH
13989: LD_INT 10
13991: PPUSH
13992: CALL_OW 308
13996: PUSH
13997: LD_EXP 44
14001: PPUSH
14002: CALL_OW 310
14006: PPUSH
14007: LD_INT 10
14009: PPUSH
14010: CALL_OW 308
14014: OR
14015: IFFALSE 13977
// if has_eng and not dep then
14017: LD_VAR 0 2
14021: PUSH
14022: LD_VAR 0 4
14026: NOT
14027: AND
14028: IFFALSE 14178
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14030: LD_VAR 0 2
14034: PPUSH
14035: LD_INT 0
14037: PPUSH
14038: LD_INT 264
14040: PPUSH
14041: LD_INT 120
14043: PPUSH
14044: LD_INT 4
14046: PPUSH
14047: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14051: LD_INT 35
14053: PPUSH
14054: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14058: LD_INT 22
14060: PUSH
14061: LD_INT 4
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: LD_INT 30
14070: PUSH
14071: LD_INT 0
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PPUSH
14082: CALL_OW 69
14086: IFFALSE 14051
// ComMoveXY ( filter , 264 , 120 ) ;
14088: LD_VAR 0 3
14092: PPUSH
14093: LD_INT 264
14095: PPUSH
14096: LD_INT 120
14098: PPUSH
14099: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14103: LD_INT 35
14105: PPUSH
14106: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14110: LD_INT 22
14112: PUSH
14113: LD_INT 4
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 30
14122: PUSH
14123: LD_INT 0
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PUSH
14130: LD_INT 3
14132: PUSH
14133: LD_INT 57
14135: PUSH
14136: EMPTY
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: PPUSH
14148: CALL_OW 69
14152: IFFALSE 14103
// ComMoveXY ( filter , 247 , 113 ) ;
14154: LD_VAR 0 3
14158: PPUSH
14159: LD_INT 247
14161: PPUSH
14162: LD_INT 113
14164: PPUSH
14165: CALL_OW 111
// Wait ( 0 0$2 ) ;
14169: LD_INT 70
14171: PPUSH
14172: CALL_OW 67
// end else
14176: GO 14190
// begin SetSide ( dep , 4 ) ;
14178: LD_VAR 0 4
14182: PPUSH
14183: LD_INT 4
14185: PPUSH
14186: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14190: LD_ADDR_VAR 0 4
14194: PUSH
14195: LD_INT 22
14197: PUSH
14198: LD_INT 4
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 30
14207: PUSH
14208: LD_INT 0
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PPUSH
14219: CALL_OW 69
14223: PUSH
14224: LD_INT 1
14226: ARRAY
14227: ST_TO_ADDR
// if not has_eng then
14228: LD_VAR 0 2
14232: NOT
14233: IFFALSE 14320
// for i = 1 to 2 do
14235: LD_ADDR_VAR 0 1
14239: PUSH
14240: DOUBLE
14241: LD_INT 1
14243: DEC
14244: ST_TO_ADDR
14245: LD_INT 2
14247: PUSH
14248: FOR_TO
14249: IFFALSE 14318
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14251: LD_VAR 0 3
14255: PUSH
14256: LD_INT 1
14258: ARRAY
14259: PPUSH
14260: LD_VAR 0 4
14264: PPUSH
14265: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14269: LD_VAR 0 3
14273: PUSH
14274: LD_INT 1
14276: ARRAY
14277: PPUSH
14278: LD_INT 2
14280: PPUSH
14281: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14285: LD_VAR 0 3
14289: PUSH
14290: LD_INT 1
14292: ARRAY
14293: PPUSH
14294: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14298: LD_ADDR_VAR 0 3
14302: PUSH
14303: LD_VAR 0 3
14307: PPUSH
14308: LD_INT 1
14310: PPUSH
14311: CALL_OW 3
14315: ST_TO_ADDR
// end ;
14316: GO 14248
14318: POP
14319: POP
// if IsInUnit ( Cornel ) then
14320: LD_EXP 44
14324: PPUSH
14325: CALL_OW 310
14329: IFFALSE 14407
// begin cargo := IsInUnit ( Cornel ) ;
14331: LD_ADDR_VAR 0 7
14335: PUSH
14336: LD_EXP 44
14340: PPUSH
14341: CALL_OW 310
14345: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14346: LD_VAR 0 7
14350: PPUSH
14351: LD_INT 1
14353: PPUSH
14354: CALL_OW 289
14358: IFFALSE 14369
// ComUnload ( cargo ) ;
14360: LD_VAR 0 7
14364: PPUSH
14365: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14369: LD_EXP 44
14373: PPUSH
14374: LD_INT 235
14376: PPUSH
14377: LD_INT 122
14379: PPUSH
14380: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14384: LD_EXP 44
14388: PPUSH
14389: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14393: LD_EXP 44
14397: PPUSH
14398: LD_VAR 0 4
14402: PPUSH
14403: CALL_OW 180
// end ; if Bierezov then
14407: LD_EXP 45
14411: IFFALSE 14459
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14413: LD_EXP 45
14417: PPUSH
14418: LD_INT 260
14420: PPUSH
14421: LD_INT 120
14423: PPUSH
14424: CALL_OW 111
// if dep then
14428: LD_VAR 0 4
14432: IFFALSE 14450
// AddComEnterUnit ( Bierezov , dep ) else
14434: LD_EXP 45
14438: PPUSH
14439: LD_VAR 0 4
14443: PPUSH
14444: CALL_OW 180
14448: GO 14459
// AddComHold ( Bierezov ) ;
14450: LD_EXP 45
14454: PPUSH
14455: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14459: LD_INT 525
14461: PPUSH
14462: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14466: LD_ADDR_VAR 0 2
14470: PUSH
14471: LD_INT 22
14473: PUSH
14474: LD_INT 4
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: LD_INT 25
14483: PUSH
14484: LD_INT 2
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PPUSH
14495: CALL_OW 69
14499: PUSH
14500: LD_EXP 45
14504: DIFF
14505: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14506: LD_INT 35
14508: PPUSH
14509: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
14513: LD_ADDR_VAR 0 6
14517: PUSH
14518: LD_INT 10
14520: PPUSH
14521: CALL_OW 435
14525: ST_TO_ADDR
// if crates then
14526: LD_VAR 0 6
14530: IFFALSE 14559
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
14532: LD_VAR 0 2
14536: PPUSH
14537: LD_VAR 0 6
14541: PUSH
14542: LD_INT 1
14544: ARRAY
14545: PPUSH
14546: LD_VAR 0 6
14550: PUSH
14551: LD_INT 2
14553: ARRAY
14554: PPUSH
14555: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
14559: LD_VAR 0 4
14563: PPUSH
14564: CALL_OW 274
14568: PPUSH
14569: LD_INT 1
14571: PPUSH
14572: CALL_OW 275
14576: PUSH
14577: LD_INT 40
14579: GREATEREQUAL
14580: IFFALSE 14506
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
14582: LD_ADDR_VAR 0 5
14586: PUSH
14587: LD_INT 4
14589: PUSH
14590: LD_INT 256
14592: PUSH
14593: LD_INT 111
14595: PUSH
14596: LD_INT 2
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: PUSH
14605: LD_INT 31
14607: PUSH
14608: LD_INT 243
14610: PUSH
14611: LD_INT 112
14613: PUSH
14614: LD_INT 2
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 31
14625: PUSH
14626: LD_INT 254
14628: PUSH
14629: LD_INT 114
14631: PUSH
14632: LD_INT 2
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: ST_TO_ADDR
// for i in blist do
14646: LD_ADDR_VAR 0 1
14650: PUSH
14651: LD_VAR 0 5
14655: PUSH
14656: FOR_IN
14657: IFFALSE 14706
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
14659: LD_VAR 0 2
14663: PPUSH
14664: LD_VAR 0 1
14668: PUSH
14669: LD_INT 1
14671: ARRAY
14672: PPUSH
14673: LD_VAR 0 1
14677: PUSH
14678: LD_INT 2
14680: ARRAY
14681: PPUSH
14682: LD_VAR 0 1
14686: PUSH
14687: LD_INT 3
14689: ARRAY
14690: PPUSH
14691: LD_VAR 0 1
14695: PUSH
14696: LD_INT 4
14698: ARRAY
14699: PPUSH
14700: CALL_OW 205
14704: GO 14656
14706: POP
14707: POP
// repeat wait ( 0 0$01 ) ;
14708: LD_INT 35
14710: PPUSH
14711: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
14715: LD_INT 22
14717: PUSH
14718: LD_INT 4
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 30
14727: PUSH
14728: LD_INT 4
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: LD_INT 3
14737: PUSH
14738: LD_INT 57
14740: PUSH
14741: EMPTY
14742: LIST
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: LIST
14752: PPUSH
14753: CALL_OW 69
14757: IFFALSE 14708
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14759: LD_VAR 0 3
14763: PPUSH
14764: LD_INT 22
14766: PUSH
14767: LD_INT 4
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 30
14776: PUSH
14777: LD_INT 4
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PPUSH
14788: CALL_OW 69
14792: PUSH
14793: LD_INT 1
14795: ARRAY
14796: PPUSH
14797: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
14801: LD_VAR 0 3
14805: PPUSH
14806: LD_INT 1
14808: PPUSH
14809: CALL_OW 183
// if has_eng > 1 then
14813: LD_VAR 0 2
14817: PUSH
14818: LD_INT 1
14820: GREATER
14821: IFFALSE 14963
// for i = has_eng downto 2 do
14823: LD_ADDR_VAR 0 1
14827: PUSH
14828: DOUBLE
14829: LD_VAR 0 2
14833: INC
14834: ST_TO_ADDR
14835: LD_INT 2
14837: PUSH
14838: FOR_DOWNTO
14839: IFFALSE 14961
// begin if IsInUnit ( has_eng [ i ] ) then
14841: LD_VAR 0 2
14845: PUSH
14846: LD_VAR 0 1
14850: ARRAY
14851: PPUSH
14852: CALL_OW 310
14856: IFFALSE 14873
// ComExitBuilding ( has_eng [ i ] ) ;
14858: LD_VAR 0 2
14862: PUSH
14863: LD_VAR 0 1
14867: ARRAY
14868: PPUSH
14869: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14873: LD_VAR 0 2
14877: PUSH
14878: LD_VAR 0 1
14882: ARRAY
14883: PPUSH
14884: LD_INT 22
14886: PUSH
14887: LD_INT 4
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: LD_INT 30
14896: PUSH
14897: LD_INT 4
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PPUSH
14908: CALL_OW 69
14912: PUSH
14913: LD_INT 1
14915: ARRAY
14916: PPUSH
14917: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
14921: LD_VAR 0 2
14925: PUSH
14926: LD_VAR 0 1
14930: ARRAY
14931: PPUSH
14932: LD_INT 1
14934: PPUSH
14935: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
14939: LD_ADDR_VAR 0 2
14943: PUSH
14944: LD_VAR 0 2
14948: PPUSH
14949: LD_VAR 0 1
14953: PPUSH
14954: CALL_OW 3
14958: ST_TO_ADDR
// end ;
14959: GO 14838
14961: POP
14962: POP
// repeat wait ( 0 0$01 ) ;
14963: LD_INT 35
14965: PPUSH
14966: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
14970: LD_INT 22
14972: PUSH
14973: LD_INT 4
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: LD_INT 30
14982: PUSH
14983: LD_INT 31
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 3
14992: PUSH
14993: LD_INT 57
14995: PUSH
14996: EMPTY
14997: LIST
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: PPUSH
15008: CALL_OW 69
15012: PUSH
15013: LD_INT 1
15015: GREATER
15016: IFFALSE 14963
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15018: LD_ADDR_VAR 0 8
15022: PUSH
15023: LD_EXP 6
15027: PPUSH
15028: LD_INT 25
15030: PUSH
15031: LD_INT 1
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PPUSH
15038: CALL_OW 72
15042: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15043: LD_ADDR_VAR 0 1
15047: PUSH
15048: DOUBLE
15049: LD_INT 1
15051: DEC
15052: ST_TO_ADDR
15053: LD_INT 22
15055: PUSH
15056: LD_INT 4
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 30
15065: PUSH
15066: LD_INT 31
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: LD_INT 3
15075: PUSH
15076: LD_INT 57
15078: PUSH
15079: EMPTY
15080: LIST
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: LIST
15090: PPUSH
15091: CALL_OW 69
15095: PUSH
15096: FOR_TO
15097: IFFALSE 15181
// begin if not sol [ i ] then
15099: LD_VAR 0 8
15103: PUSH
15104: LD_VAR 0 1
15108: ARRAY
15109: NOT
15110: IFFALSE 15114
// break ;
15112: GO 15181
// ComExitBuilding ( sol [ i ] ) ;
15114: LD_VAR 0 8
15118: PUSH
15119: LD_VAR 0 1
15123: ARRAY
15124: PPUSH
15125: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15129: LD_VAR 0 8
15133: PUSH
15134: LD_VAR 0 1
15138: ARRAY
15139: PPUSH
15140: LD_INT 22
15142: PUSH
15143: LD_INT 4
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: PUSH
15150: LD_INT 30
15152: PUSH
15153: LD_INT 31
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PPUSH
15164: CALL_OW 69
15168: PUSH
15169: LD_VAR 0 1
15173: ARRAY
15174: PPUSH
15175: CALL_OW 180
// end ;
15179: GO 15096
15181: POP
15182: POP
// if sol > 3 then
15183: LD_VAR 0 8
15187: PUSH
15188: LD_INT 3
15190: GREATER
15191: IFFALSE 15308
// begin ComExitBuilding ( sol [ 3 ] ) ;
15193: LD_VAR 0 8
15197: PUSH
15198: LD_INT 3
15200: ARRAY
15201: PPUSH
15202: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15206: LD_VAR 0 8
15210: PUSH
15211: LD_INT 3
15213: ARRAY
15214: PPUSH
15215: LD_INT 246
15217: PPUSH
15218: LD_INT 94
15220: PPUSH
15221: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15225: LD_VAR 0 8
15229: PUSH
15230: LD_INT 3
15232: ARRAY
15233: PPUSH
15234: LD_INT 175
15236: PPUSH
15237: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15241: LD_VAR 0 8
15245: PUSH
15246: LD_INT 3
15248: ARRAY
15249: PPUSH
15250: LD_INT 224
15252: PPUSH
15253: LD_INT 90
15255: PPUSH
15256: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15260: LD_VAR 0 8
15264: PUSH
15265: LD_INT 3
15267: ARRAY
15268: PPUSH
15269: LD_INT 245
15271: PPUSH
15272: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15276: LD_VAR 0 8
15280: PUSH
15281: LD_INT 3
15283: ARRAY
15284: PPUSH
15285: LD_INT 223
15287: PPUSH
15288: LD_INT 110
15290: PPUSH
15291: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15295: LD_VAR 0 8
15299: PUSH
15300: LD_INT 3
15302: ARRAY
15303: PPUSH
15304: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15308: LD_VAR 0 2
15312: PPUSH
15313: LD_VAR 0 4
15317: PPUSH
15318: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15322: LD_INT 22
15324: PUSH
15325: LD_INT 4
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 30
15334: PUSH
15335: LD_INT 4
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PPUSH
15346: CALL_OW 69
15350: PUSH
15351: LD_INT 1
15353: ARRAY
15354: PPUSH
15355: CALL_OW 313
15359: PUSH
15360: LD_INT 6
15362: LESS
15363: IFFALSE 15427
// begin if IsInUnit ( Cornel ) then
15365: LD_EXP 44
15369: PPUSH
15370: CALL_OW 310
15374: IFFALSE 15385
// ComExitBuilding ( Cornel ) ;
15376: LD_EXP 44
15380: PPUSH
15381: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15385: LD_EXP 44
15389: PPUSH
15390: LD_INT 22
15392: PUSH
15393: LD_INT 4
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 30
15402: PUSH
15403: LD_INT 4
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PPUSH
15414: CALL_OW 69
15418: PUSH
15419: LD_INT 1
15421: ARRAY
15422: PPUSH
15423: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15427: LD_INT 35
15429: PPUSH
15430: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15434: LD_ADDR_VAR 0 3
15438: PUSH
15439: LD_INT 22
15441: PUSH
15442: LD_INT 4
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 21
15451: PUSH
15452: LD_INT 3
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: LD_INT 3
15461: PUSH
15462: LD_INT 24
15464: PUSH
15465: LD_INT 1000
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: LIST
15480: PPUSH
15481: CALL_OW 69
15485: ST_TO_ADDR
// if filter and has_eng then
15486: LD_VAR 0 3
15490: PUSH
15491: LD_VAR 0 2
15495: AND
15496: IFFALSE 15562
// begin for i in has_eng do
15498: LD_ADDR_VAR 0 1
15502: PUSH
15503: LD_VAR 0 2
15507: PUSH
15508: FOR_IN
15509: IFFALSE 15558
// begin if IsInUnit ( i ) then
15511: LD_VAR 0 1
15515: PPUSH
15516: CALL_OW 310
15520: IFFALSE 15531
// ComExitBuilding ( i ) ;
15522: LD_VAR 0 1
15526: PPUSH
15527: CALL_OW 122
// Wait ( 3 ) ;
15531: LD_INT 3
15533: PPUSH
15534: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
15538: LD_VAR 0 1
15542: PPUSH
15543: LD_VAR 0 3
15547: PUSH
15548: LD_INT 1
15550: ARRAY
15551: PPUSH
15552: CALL_OW 130
// end ;
15556: GO 15508
15558: POP
15559: POP
// end else
15560: GO 15616
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
15562: LD_VAR 0 2
15566: PUSH
15567: LD_VAR 0 2
15571: PPUSH
15572: LD_INT 56
15574: PUSH
15575: EMPTY
15576: LIST
15577: PPUSH
15578: CALL_OW 72
15582: AND
15583: IFFALSE 15616
// for i in has_eng do
15585: LD_ADDR_VAR 0 1
15589: PUSH
15590: LD_VAR 0 2
15594: PUSH
15595: FOR_IN
15596: IFFALSE 15614
// ComEnterUnit ( i , dep ) ;
15598: LD_VAR 0 1
15602: PPUSH
15603: LD_VAR 0 4
15607: PPUSH
15608: CALL_OW 120
15612: GO 15595
15614: POP
15615: POP
// until cornel_prepared ;
15616: LD_EXP 11
15620: IFFALSE 15427
// end ;
15622: PPOPN 8
15624: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
15625: LD_EXP 11
15629: IFFALSE 16028
15631: GO 15633
15633: DISABLE
15634: LD_INT 0
15636: PPUSH
15637: PPUSH
15638: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
15639: LD_ADDR_VAR 0 2
15643: PUSH
15644: LD_INT 22
15646: PUSH
15647: LD_INT 4
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 30
15656: PUSH
15657: LD_INT 4
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PPUSH
15668: CALL_OW 69
15672: PUSH
15673: LD_INT 1
15675: ARRAY
15676: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
15677: LD_EXP 6
15681: PPUSH
15682: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
15686: LD_EXP 45
15690: PUSH
15691: LD_EXP 45
15695: PPUSH
15696: CALL_OW 310
15700: AND
15701: IFFALSE 15712
// ComExitBuilding ( Bierezov ) ;
15703: LD_EXP 45
15707: PPUSH
15708: CALL_OW 122
// Wait ( 0 0$03 ) ;
15712: LD_INT 105
15714: PPUSH
15715: CALL_OW 67
// for i in cornel_units do
15719: LD_ADDR_VAR 0 1
15723: PUSH
15724: LD_EXP 6
15728: PUSH
15729: FOR_IN
15730: IFFALSE 15806
// begin if GetClass ( i ) in [ 2 , 3 ] then
15732: LD_VAR 0 1
15736: PPUSH
15737: CALL_OW 257
15741: PUSH
15742: LD_INT 2
15744: PUSH
15745: LD_INT 3
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: IN
15752: IFFALSE 15789
// begin ComEnterUnit ( i , arm ) ;
15754: LD_VAR 0 1
15758: PPUSH
15759: LD_VAR 0 2
15763: PPUSH
15764: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
15768: LD_VAR 0 1
15772: PPUSH
15773: LD_INT 1
15775: PPUSH
15776: CALL_OW 183
// AddComExitBuilding ( i ) ;
15780: LD_VAR 0 1
15784: PPUSH
15785: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
15789: LD_VAR 0 1
15793: PPUSH
15794: LD_INT 257
15796: PPUSH
15797: LD_INT 121
15799: PPUSH
15800: CALL_OW 171
// end ;
15804: GO 15729
15806: POP
15807: POP
// Wait ( 1 1$00 ) ;
15808: LD_INT 2100
15810: PPUSH
15811: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
15815: LD_ADDR_VAR 0 3
15819: PUSH
15820: LD_EXP 44
15824: PUSH
15825: LD_EXP 45
15829: ADD
15830: PUSH
15831: LD_EXP 6
15835: ADD
15836: PUSH
15837: LD_EXP 6
15841: PPUSH
15842: LD_INT 21
15844: PUSH
15845: LD_INT 2
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PPUSH
15852: CALL_OW 72
15856: DIFF
15857: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
15858: LD_VAR 0 3
15862: PPUSH
15863: LD_INT 248
15865: PPUSH
15866: LD_INT 85
15868: PPUSH
15869: CALL_OW 111
// AddComHold ( filter ) ;
15873: LD_VAR 0 3
15877: PPUSH
15878: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
15882: LD_INT 35
15884: PPUSH
15885: CALL_OW 67
// until cornel_attack ;
15889: LD_EXP 9
15893: IFFALSE 15882
// ComAgressiveMove ( filter , 209 , 63 ) ;
15895: LD_VAR 0 3
15899: PPUSH
15900: LD_INT 209
15902: PPUSH
15903: LD_INT 63
15905: PPUSH
15906: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
15910: LD_EXP 44
15914: PPUSH
15915: LD_INT 208
15917: PPUSH
15918: LD_INT 62
15920: PPUSH
15921: CALL_OW 114
// AddComHold ( Cornel ) ;
15925: LD_EXP 44
15929: PPUSH
15930: CALL_OW 200
// if Bierezov then
15934: LD_EXP 45
15938: IFFALSE 16028
// begin filter := filter diff Bierezov ;
15940: LD_ADDR_VAR 0 3
15944: PUSH
15945: LD_VAR 0 3
15949: PUSH
15950: LD_EXP 45
15954: DIFF
15955: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
15956: LD_EXP 45
15960: PPUSH
15961: LD_INT 6
15963: PPUSH
15964: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
15968: LD_EXP 45
15972: PPUSH
15973: LD_INT 235
15975: PPUSH
15976: LD_INT 60
15978: PPUSH
15979: CALL_OW 111
// AddComHold ( Bierezov ) ;
15983: LD_EXP 45
15987: PPUSH
15988: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
15992: LD_EXP 45
15996: PPUSH
15997: LD_INT 350
15999: PPUSH
16000: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16004: LD_EXP 45
16008: PPUSH
16009: LD_INT 198
16011: PPUSH
16012: LD_INT 28
16014: PPUSH
16015: CALL_OW 171
// AddComHold ( Bierezov ) ;
16019: LD_EXP 45
16023: PPUSH
16024: CALL_OW 200
// end ; end ; end_of_file
16028: PPOPN 3
16030: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16031: LD_EXP 53
16035: PUSH
16036: LD_EXP 31
16040: NOT
16041: AND
16042: PUSH
16043: LD_EXP 32
16047: NOT
16048: AND
16049: IFFALSE 16499
16051: GO 16053
16053: DISABLE
16054: LD_INT 0
16056: PPUSH
16057: PPUSH
16058: PPUSH
16059: PPUSH
// begin enable ;
16060: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16061: LD_ADDR_VAR 0 4
16065: PUSH
16066: LD_INT 81
16068: PUSH
16069: LD_INT 3
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PPUSH
16076: CALL_OW 69
16080: ST_TO_ADDR
// for i = 1 to ru_patrol do
16081: LD_ADDR_VAR 0 2
16085: PUSH
16086: DOUBLE
16087: LD_INT 1
16089: DEC
16090: ST_TO_ADDR
16091: LD_EXP 53
16095: PUSH
16096: FOR_TO
16097: IFFALSE 16497
// begin un := ru_patrol [ i ] ;
16099: LD_ADDR_VAR 0 1
16103: PUSH
16104: LD_EXP 53
16108: PUSH
16109: LD_VAR 0 2
16113: ARRAY
16114: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16115: LD_VAR 0 1
16119: PPUSH
16120: LD_INT 13
16122: PPUSH
16123: CALL_OW 308
16127: IFFALSE 16232
// begin if not ru_alert then
16129: LD_EXP 60
16133: NOT
16134: IFFALSE 16144
// ru_alert := true ;
16136: LD_ADDR_EXP 60
16140: PUSH
16141: LD_INT 1
16143: ST_TO_ADDR
// if not See ( 1 , un ) then
16144: LD_INT 1
16146: PPUSH
16147: LD_VAR 0 1
16151: PPUSH
16152: CALL_OW 292
16156: NOT
16157: IFFALSE 16171
// SetLives ( un , 1000 ) ;
16159: LD_VAR 0 1
16163: PPUSH
16164: LD_INT 1000
16166: PPUSH
16167: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16171: LD_ADDR_EXP 53
16175: PUSH
16176: LD_EXP 53
16180: PUSH
16181: LD_VAR 0 1
16185: DIFF
16186: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16187: LD_VAR 0 1
16191: PPUSH
16192: LD_INT 22
16194: PUSH
16195: LD_INT 3
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 30
16204: PUSH
16205: LD_INT 4
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PPUSH
16216: CALL_OW 69
16220: PPUSH
16221: CALL 999 0 1
16225: PPUSH
16226: CALL_OW 120
// continue ;
16230: GO 16096
// end ; if IsOk ( un ) and not HasTask ( un ) then
16232: LD_VAR 0 1
16236: PPUSH
16237: CALL_OW 302
16241: PUSH
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 314
16251: NOT
16252: AND
16253: IFFALSE 16346
// begin for j = 1 to ru_firepoints_south [ i ] do
16255: LD_ADDR_VAR 0 3
16259: PUSH
16260: DOUBLE
16261: LD_INT 1
16263: DEC
16264: ST_TO_ADDR
16265: LD_EXP 59
16269: PUSH
16270: LD_VAR 0 2
16274: ARRAY
16275: PUSH
16276: FOR_TO
16277: IFFALSE 16344
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16279: LD_VAR 0 1
16283: PPUSH
16284: LD_EXP 59
16288: PUSH
16289: LD_VAR 0 2
16293: ARRAY
16294: PUSH
16295: LD_VAR 0 3
16299: ARRAY
16300: PUSH
16301: LD_INT 1
16303: ARRAY
16304: PPUSH
16305: LD_EXP 59
16309: PUSH
16310: LD_VAR 0 2
16314: ARRAY
16315: PUSH
16316: LD_VAR 0 3
16320: ARRAY
16321: PUSH
16322: LD_INT 2
16324: ARRAY
16325: PPUSH
16326: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16330: LD_VAR 0 1
16334: PPUSH
16335: LD_INT 70
16337: PPUSH
16338: CALL_OW 202
// end ;
16342: GO 16276
16344: POP
16345: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16346: LD_VAR 0 1
16350: PPUSH
16351: CALL_OW 256
16355: PUSH
16356: LD_INT 700
16358: LESS
16359: PUSH
16360: LD_VAR 0 1
16364: PPUSH
16365: LD_INT 13
16367: PPUSH
16368: CALL_OW 308
16372: NOT
16373: AND
16374: IFFALSE 16426
// begin ComMoveToArea ( un , retreatArea ) ;
16376: LD_VAR 0 1
16380: PPUSH
16381: LD_INT 13
16383: PPUSH
16384: CALL_OW 113
// if not ru_alert_xy then
16388: LD_EXP 61
16392: NOT
16393: IFFALSE 16424
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16395: LD_ADDR_EXP 61
16399: PUSH
16400: LD_VAR 0 1
16404: PPUSH
16405: CALL_OW 250
16409: PUSH
16410: LD_VAR 0 1
16414: PPUSH
16415: CALL_OW 251
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: ST_TO_ADDR
// end else
16424: GO 16495
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16426: LD_VAR 0 1
16430: PPUSH
16431: LD_VAR 0 4
16435: PPUSH
16436: LD_VAR 0 1
16440: PPUSH
16441: CALL_OW 74
16445: PPUSH
16446: CALL_OW 296
16450: PUSH
16451: LD_INT 9
16453: LESS
16454: PUSH
16455: LD_VAR 0 1
16459: PPUSH
16460: CALL_OW 256
16464: PUSH
16465: LD_INT 500
16467: GREATER
16468: AND
16469: IFFALSE 16495
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
16471: LD_VAR 0 1
16475: PPUSH
16476: LD_VAR 0 4
16480: PPUSH
16481: LD_VAR 0 1
16485: PPUSH
16486: CALL_OW 74
16490: PPUSH
16491: CALL_OW 115
// end ;
16495: GO 16096
16497: POP
16498: POP
// end ;
16499: PPOPN 4
16501: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
16502: LD_EXP 60
16506: PUSH
16507: LD_EXP 61
16511: AND
16512: PUSH
16513: LD_EXP 31
16517: NOT
16518: AND
16519: PUSH
16520: LD_EXP 32
16524: NOT
16525: AND
16526: IFFALSE 16736
16528: GO 16530
16530: DISABLE
16531: LD_INT 0
16533: PPUSH
16534: PPUSH
// begin enable ;
16535: ENABLE
// if not ru_vehicles then
16536: LD_EXP 56
16540: NOT
16541: IFFALSE 16545
// exit ;
16543: GO 16736
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16545: LD_ADDR_VAR 0 2
16549: PUSH
16550: LD_INT 81
16552: PUSH
16553: LD_INT 3
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PPUSH
16560: CALL_OW 69
16564: ST_TO_ADDR
// if ru_vehicles then
16565: LD_EXP 56
16569: IFFALSE 16736
// begin for i in ru_vehicles do
16571: LD_ADDR_VAR 0 1
16575: PUSH
16576: LD_EXP 56
16580: PUSH
16581: FOR_IN
16582: IFFALSE 16734
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 302
16593: PUSH
16594: LD_VAR 0 1
16598: PPUSH
16599: LD_VAR 0 2
16603: PPUSH
16604: LD_VAR 0 1
16608: PPUSH
16609: CALL_OW 74
16613: PPUSH
16614: CALL_OW 296
16618: PUSH
16619: LD_INT 9
16621: LESS
16622: AND
16623: IFFALSE 16649
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
16625: LD_VAR 0 1
16629: PPUSH
16630: LD_VAR 0 2
16634: PPUSH
16635: LD_VAR 0 1
16639: PPUSH
16640: CALL_OW 74
16644: PPUSH
16645: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
16649: LD_VAR 0 1
16653: PPUSH
16654: CALL_OW 314
16658: NOT
16659: PUSH
16660: LD_VAR 0 1
16664: PPUSH
16665: CALL_OW 302
16669: AND
16670: PUSH
16671: LD_VAR 0 1
16675: PPUSH
16676: LD_EXP 61
16680: PUSH
16681: LD_INT 1
16683: ARRAY
16684: PPUSH
16685: LD_EXP 61
16689: PUSH
16690: LD_INT 2
16692: ARRAY
16693: PPUSH
16694: CALL_OW 297
16698: PUSH
16699: LD_INT 10
16701: GREATER
16702: AND
16703: IFFALSE 16732
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
16705: LD_VAR 0 1
16709: PPUSH
16710: LD_EXP 61
16714: PUSH
16715: LD_INT 1
16717: ARRAY
16718: PPUSH
16719: LD_EXP 61
16723: PUSH
16724: LD_INT 2
16726: ARRAY
16727: PPUSH
16728: CALL_OW 114
// end ;
16732: GO 16581
16734: POP
16735: POP
// end ; end ;
16736: PPOPN 2
16738: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
16739: LD_EXP 61
16743: PUSH
16744: LD_EXP 60
16748: AND
16749: PUSH
16750: LD_INT 3
16752: PPUSH
16753: CALL_OW 463
16757: NOT
16758: AND
16759: PUSH
16760: LD_EXP 31
16764: NOT
16765: AND
16766: PUSH
16767: LD_EXP 32
16771: NOT
16772: AND
16773: IFFALSE 16868
16775: GO 16777
16777: DISABLE
16778: LD_INT 0
16780: PPUSH
// begin enable ;
16781: ENABLE
// ru_alert_xy := false ;
16782: LD_ADDR_EXP 61
16786: PUSH
16787: LD_INT 0
16789: ST_TO_ADDR
// ru_alert := false ;
16790: LD_ADDR_EXP 60
16794: PUSH
16795: LD_INT 0
16797: ST_TO_ADDR
// if ru_vehicles then
16798: LD_EXP 56
16802: IFFALSE 16868
// for i in ru_vehicles do
16804: LD_ADDR_VAR 0 1
16808: PUSH
16809: LD_EXP 56
16813: PUSH
16814: FOR_IN
16815: IFFALSE 16866
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
16817: LD_VAR 0 1
16821: PPUSH
16822: CALL_OW 302
16826: PUSH
16827: LD_VAR 0 1
16831: PPUSH
16832: LD_INT 89
16834: PPUSH
16835: LD_INT 36
16837: PPUSH
16838: CALL_OW 297
16842: PUSH
16843: LD_INT 10
16845: GREATER
16846: AND
16847: IFFALSE 16864
// ComMoveXY ( i , 89 , 36 ) ;
16849: LD_VAR 0 1
16853: PPUSH
16854: LD_INT 89
16856: PPUSH
16857: LD_INT 36
16859: PPUSH
16860: CALL_OW 111
16864: GO 16814
16866: POP
16867: POP
// end ;
16868: PPOPN 1
16870: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
16871: LD_EXP 55
16875: PUSH
16876: LD_EXP 31
16880: NOT
16881: AND
16882: PUSH
16883: LD_EXP 32
16887: NOT
16888: AND
16889: IFFALSE 17173
16891: GO 16893
16893: DISABLE
16894: LD_INT 0
16896: PPUSH
16897: PPUSH
16898: PPUSH
// begin enable ;
16899: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16900: LD_ADDR_VAR 0 3
16904: PUSH
16905: LD_INT 81
16907: PUSH
16908: LD_INT 3
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PPUSH
16915: CALL_OW 69
16919: ST_TO_ADDR
// for i = 1 to ru_forest do
16920: LD_ADDR_VAR 0 1
16924: PUSH
16925: DOUBLE
16926: LD_INT 1
16928: DEC
16929: ST_TO_ADDR
16930: LD_EXP 55
16934: PUSH
16935: FOR_TO
16936: IFFALSE 17171
// begin un := ru_forest [ i ] ;
16938: LD_ADDR_VAR 0 2
16942: PUSH
16943: LD_EXP 55
16947: PUSH
16948: LD_VAR 0 1
16952: ARRAY
16953: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16954: LD_VAR 0 2
16958: PPUSH
16959: LD_INT 13
16961: PPUSH
16962: CALL_OW 308
16966: IFFALSE 17056
// begin if not See ( 1 , un ) then
16968: LD_INT 1
16970: PPUSH
16971: LD_VAR 0 2
16975: PPUSH
16976: CALL_OW 292
16980: NOT
16981: IFFALSE 16995
// SetLives ( un , 1000 ) ;
16983: LD_VAR 0 2
16987: PPUSH
16988: LD_INT 1000
16990: PPUSH
16991: CALL_OW 234
// ru_forest := ru_forest diff un ;
16995: LD_ADDR_EXP 55
16999: PUSH
17000: LD_EXP 55
17004: PUSH
17005: LD_VAR 0 2
17009: DIFF
17010: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17011: LD_VAR 0 2
17015: PPUSH
17016: LD_INT 22
17018: PUSH
17019: LD_INT 3
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 30
17028: PUSH
17029: LD_INT 4
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 69
17044: PPUSH
17045: CALL 999 0 1
17049: PPUSH
17050: CALL_OW 120
// continue ;
17054: GO 16935
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17056: LD_VAR 0 2
17060: PPUSH
17061: CALL_OW 256
17065: PUSH
17066: LD_INT 700
17068: LESS
17069: PUSH
17070: LD_VAR 0 2
17074: PPUSH
17075: LD_INT 13
17077: PPUSH
17078: CALL_OW 308
17082: NOT
17083: AND
17084: IFFALSE 17100
// ComMoveToArea ( un , retreatArea ) else
17086: LD_VAR 0 2
17090: PPUSH
17091: LD_INT 13
17093: PPUSH
17094: CALL_OW 113
17098: GO 17169
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17100: LD_VAR 0 2
17104: PPUSH
17105: LD_VAR 0 3
17109: PPUSH
17110: LD_VAR 0 2
17114: PPUSH
17115: CALL_OW 74
17119: PPUSH
17120: CALL_OW 296
17124: PUSH
17125: LD_INT 9
17127: LESS
17128: PUSH
17129: LD_VAR 0 2
17133: PPUSH
17134: CALL_OW 256
17138: PUSH
17139: LD_INT 500
17141: GREATER
17142: AND
17143: IFFALSE 17169
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17145: LD_VAR 0 2
17149: PPUSH
17150: LD_VAR 0 3
17154: PPUSH
17155: LD_VAR 0 2
17159: PPUSH
17160: CALL_OW 74
17164: PPUSH
17165: CALL_OW 115
// end ;
17169: GO 16935
17171: POP
17172: POP
// end ;
17173: PPOPN 3
17175: END
// every 0 0$10 trigger not send_attack_on_cornel do var i , filter ;
17176: LD_EXP 32
17180: NOT
17181: IFFALSE 17302
17183: GO 17185
17185: DISABLE
17186: LD_INT 0
17188: PPUSH
17189: PPUSH
// begin enable ;
17190: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
17191: LD_ADDR_VAR 0 2
17195: PUSH
17196: LD_INT 22
17198: PUSH
17199: LD_INT 3
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 21
17208: PUSH
17209: LD_INT 3
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PPUSH
17220: CALL_OW 69
17224: ST_TO_ADDR
// if filter then
17225: LD_VAR 0 2
17229: IFFALSE 17302
// for i in filter do
17231: LD_ADDR_VAR 0 1
17235: PUSH
17236: LD_VAR 0 2
17240: PUSH
17241: FOR_IN
17242: IFFALSE 17300
// if GetLives ( i ) < 990 then
17244: LD_VAR 0 1
17248: PPUSH
17249: CALL_OW 256
17253: PUSH
17254: LD_INT 990
17256: LESS
17257: IFFALSE 17298
// begin ru_alert := true ;
17259: LD_ADDR_EXP 60
17263: PUSH
17264: LD_INT 1
17266: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17267: LD_ADDR_EXP 61
17271: PUSH
17272: LD_VAR 0 1
17276: PPUSH
17277: CALL_OW 250
17281: PUSH
17282: LD_VAR 0 1
17286: PPUSH
17287: CALL_OW 251
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: ST_TO_ADDR
// break ;
17296: GO 17300
// end ;
17298: GO 17241
17300: POP
17301: POP
// end ;
17302: PPOPN 2
17304: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17305: LD_EXP 31
17309: IFFALSE 17458
17311: GO 17313
17313: DISABLE
17314: LD_INT 0
17316: PPUSH
17317: PPUSH
17318: PPUSH
17319: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17320: LD_ADDR_VAR 0 4
17324: PUSH
17325: LD_EXP 56
17329: PUSH
17330: LD_EXP 55
17334: ADD
17335: PUSH
17336: LD_EXP 53
17340: ADD
17341: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17342: LD_ADDR_VAR 0 3
17346: PUSH
17347: LD_INT 3
17349: PPUSH
17350: LD_INT 81
17352: PUSH
17353: LD_INT 3
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PPUSH
17360: CALL_OW 70
17364: ST_TO_ADDR
// if filter and enemy then
17365: LD_VAR 0 4
17369: PUSH
17370: LD_VAR 0 3
17374: AND
17375: IFFALSE 17458
// repeat wait ( 0 0$01 ) ;
17377: LD_INT 35
17379: PPUSH
17380: CALL_OW 67
// for i in filter do
17384: LD_ADDR_VAR 0 1
17388: PUSH
17389: LD_VAR 0 4
17393: PUSH
17394: FOR_IN
17395: IFFALSE 17423
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17397: LD_VAR 0 1
17401: PPUSH
17402: LD_VAR 0 3
17406: PPUSH
17407: LD_VAR 0 1
17411: PPUSH
17412: CALL_OW 74
17416: PPUSH
17417: CALL_OW 115
// end ;
17421: GO 17394
17423: POP
17424: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
17425: LD_INT 3
17427: PPUSH
17428: LD_INT 81
17430: PUSH
17431: LD_INT 3
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PPUSH
17438: CALL_OW 70
17442: PUSH
17443: LD_INT 0
17445: EQUAL
17446: PUSH
17447: LD_VAR 0 4
17451: PUSH
17452: LD_INT 0
17454: EQUAL
17455: OR
17456: IFFALSE 17377
// end ;
17458: PPOPN 4
17460: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
17461: LD_EXP 26
17465: PUSH
17466: LD_INT 22
17468: PUSH
17469: LD_INT 4
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 30
17478: PUSH
17479: LD_INT 4
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 3
17488: PUSH
17489: LD_INT 57
17491: PUSH
17492: EMPTY
17493: LIST
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: LIST
17503: PPUSH
17504: CALL_OW 69
17508: AND
17509: IFFALSE 17558
17511: GO 17513
17513: DISABLE
17514: LD_INT 0
17516: PPUSH
// begin if not ru_cornel_attack then
17517: LD_EXP 58
17521: NOT
17522: IFFALSE 17526
// exit ;
17524: GO 17558
// for i in ru_cornel_attack do
17526: LD_ADDR_VAR 0 1
17530: PUSH
17531: LD_EXP 58
17535: PUSH
17536: FOR_IN
17537: IFFALSE 17556
// ComAgressiveMove ( i , 258 , 119 ) ;
17539: LD_VAR 0 1
17543: PPUSH
17544: LD_INT 258
17546: PPUSH
17547: LD_INT 119
17549: PPUSH
17550: CALL_OW 114
17554: GO 17536
17556: POP
17557: POP
// end ; end_of_file
17558: PPOPN 1
17560: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
17561: LD_EXP 5
17565: PUSH
17566: LD_EXP 9
17570: NOT
17571: AND
17572: PUSH
17573: LD_EXP 20
17577: AND
17578: IFFALSE 17690
17580: GO 17582
17582: DISABLE
17583: LD_INT 0
17585: PPUSH
// begin enable ;
17586: ENABLE
// crates_counter := crates_counter - 50 ;
17587: LD_ADDR_EXP 20
17591: PUSH
17592: LD_EXP 20
17596: PUSH
17597: LD_INT 50
17599: MINUS
17600: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
17601: LD_INT 8
17603: PPUSH
17604: LD_INT 2
17606: PPUSH
17607: LD_INT 5
17609: PPUSH
17610: CALL_OW 12
17614: PPUSH
17615: LD_INT 1
17617: PPUSH
17618: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
17622: LD_INT 1785
17624: PPUSH
17625: LD_INT 2345
17627: PPUSH
17628: CALL_OW 12
17632: PPUSH
17633: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
17637: LD_ADDR_VAR 0 1
17641: PUSH
17642: LD_INT 1
17644: PPUSH
17645: LD_OWVAR 67
17649: PUSH
17650: LD_INT 2
17652: PLUS
17653: PPUSH
17654: CALL_OW 12
17658: ST_TO_ADDR
// if r < 3 then
17659: LD_VAR 0 1
17663: PUSH
17664: LD_INT 3
17666: LESS
17667: IFFALSE 17690
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
17669: LD_INT 4
17671: PPUSH
17672: LD_INT 1
17674: PPUSH
17675: LD_INT 5
17677: PPUSH
17678: CALL_OW 12
17682: PPUSH
17683: LD_INT 1
17685: PPUSH
17686: CALL_OW 55
// end ;
17690: PPOPN 1
17692: END
// every 0 0$01 trigger cornel_active do
17693: LD_EXP 8
17697: IFFALSE 17786
17699: GO 17701
17701: DISABLE
// begin Wait ( 0 0$03 ) ;
17702: LD_INT 105
17704: PPUSH
17705: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17709: LD_INT 2
17711: PPUSH
17712: LD_INT 5
17714: PPUSH
17715: CALL_OW 12
17719: PPUSH
17720: LD_INT 10
17722: PPUSH
17723: LD_INT 1
17725: PPUSH
17726: CALL_OW 55
// Wait ( 0 0$13 ) ;
17730: LD_INT 455
17732: PPUSH
17733: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17737: LD_INT 2
17739: PPUSH
17740: LD_INT 5
17742: PPUSH
17743: CALL_OW 12
17747: PPUSH
17748: LD_INT 10
17750: PPUSH
17751: LD_INT 1
17753: PPUSH
17754: CALL_OW 55
// Wait ( 0 0$16 ) ;
17758: LD_INT 560
17760: PPUSH
17761: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17765: LD_INT 2
17767: PPUSH
17768: LD_INT 5
17770: PPUSH
17771: CALL_OW 12
17775: PPUSH
17776: LD_INT 10
17778: PPUSH
17779: LD_INT 1
17781: PPUSH
17782: CALL_OW 55
// end ; end_of_file
17786: END
// every 0 0$01 trigger cornel_prepared do
17787: LD_EXP 11
17791: IFFALSE 17850
17793: GO 17795
17795: DISABLE
// begin enable ;
17796: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
17797: LD_ADDR_OWVAR 47
17801: PUSH
17802: LD_STRING #Am03-1
17804: PUSH
17805: LD_EXP 10
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
17814: LD_ADDR_EXP 10
17818: PUSH
17819: LD_EXP 10
17823: PPUSH
17824: LD_STRING -
17826: PPUSH
17827: CALL 1069 0 2
17831: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
17832: LD_EXP 10
17836: PUSH
17837: LD_INT 0
17839: EQUAL
17840: IFFALSE 17850
// begin Display_Strings := [ ] ;
17842: LD_ADDR_OWVAR 47
17846: PUSH
17847: EMPTY
17848: ST_TO_ADDR
// disable ;
17849: DISABLE
// end ; end ;
17850: END
// every 0 0$01 trigger debug and debug_strings do
17851: LD_EXP 1
17855: PUSH
17856: LD_OWVAR 48
17860: AND
17861: IFFALSE 17877
17863: GO 17865
17865: DISABLE
// begin enable ;
17866: ENABLE
// Display_Strings := debug_strings ;
17867: LD_ADDR_OWVAR 47
17871: PUSH
17872: LD_OWVAR 48
17876: ST_TO_ADDR
// end ; end_of_file
17877: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 1 and not solar_builded then
17878: LD_VAR 0 1
17882: PPUSH
17883: CALL_OW 255
17887: PUSH
17888: LD_INT 1
17890: EQUAL
17891: PUSH
17892: LD_EXP 14
17896: NOT
17897: AND
17898: IFFALSE 17908
// solar_builded := true ;
17900: LD_ADDR_EXP 14
17904: PUSH
17905: LD_INT 1
17907: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
17908: LD_VAR 0 1
17912: PPUSH
17913: CALL_OW 255
17917: PUSH
17918: LD_INT 1
17920: EQUAL
17921: PUSH
17922: LD_EXP 29
17926: AND
17927: IFFALSE 17960
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ;
17929: LD_ADDR_EXP 29
17933: PUSH
17934: LD_EXP 29
17938: PUSH
17939: LD_INT 1750
17941: PUSH
17942: LD_INT 1400
17944: PUSH
17945: LD_INT 1225
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: LIST
17952: PUSH
17953: LD_OWVAR 67
17957: ARRAY
17958: PLUS
17959: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
17960: LD_VAR 0 1
17964: PPUSH
17965: CALL_OW 255
17969: PUSH
17970: LD_INT 3
17972: EQUAL
17973: IFFALSE 17991
// ru_vehicles := ru_vehicles ^ veh ;
17975: LD_ADDR_EXP 56
17979: PUSH
17980: LD_EXP 56
17984: PUSH
17985: LD_VAR 0 1
17989: ADD
17990: ST_TO_ADDR
// end ;
17991: PPOPN 2
17993: END
// on UnitDestroyed ( un ) do begin if un in ru_patrol then
17994: LD_VAR 0 1
17998: PUSH
17999: LD_EXP 53
18003: IN
18004: IFFALSE 18022
// ru_patrol := ru_patrol diff un ;
18006: LD_ADDR_EXP 53
18010: PUSH
18011: LD_EXP 53
18015: PUSH
18016: LD_VAR 0 1
18020: DIFF
18021: ST_TO_ADDR
// if un in ru_forest then
18022: LD_VAR 0 1
18026: PUSH
18027: LD_EXP 55
18031: IN
18032: IFFALSE 18050
// ru_forest := ru_forest diff un ;
18034: LD_ADDR_EXP 55
18038: PUSH
18039: LD_EXP 55
18043: PUSH
18044: LD_VAR 0 1
18048: DIFF
18049: ST_TO_ADDR
// if un in ru_vehicles then
18050: LD_VAR 0 1
18054: PUSH
18055: LD_EXP 56
18059: IN
18060: IFFALSE 18166
// begin ru_vehicles := ru_vehicles diff un ;
18062: LD_ADDR_EXP 56
18066: PUSH
18067: LD_EXP 56
18071: PUSH
18072: LD_VAR 0 1
18076: DIFF
18077: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18078: LD_ADDR_EXP 57
18082: PUSH
18083: LD_EXP 57
18087: PUSH
18088: LD_VAR 0 1
18092: PPUSH
18093: CALL_OW 265
18097: PUSH
18098: LD_VAR 0 1
18102: PPUSH
18103: CALL_OW 262
18107: PUSH
18108: LD_VAR 0 1
18112: PPUSH
18113: CALL_OW 263
18117: PUSH
18118: LD_VAR 0 1
18122: PPUSH
18123: CALL_OW 264
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: ADD
18134: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18135: LD_ADDR_EXP 13
18139: PUSH
18140: LD_EXP 13
18144: PUSH
18145: LD_INT 1
18147: PLUS
18148: ST_TO_ADDR
// if ach_counter = 10 then
18149: LD_EXP 13
18153: PUSH
18154: LD_INT 10
18156: EQUAL
18157: IFFALSE 18166
// SetAchievement ( ACH_FAUST ) ;
18159: LD_STRING ACH_FAUST
18161: PPUSH
18162: CALL_OW 543
// end ; if un = Pokryshkin then
18166: LD_VAR 0 1
18170: PUSH
18171: LD_EXP 52
18175: EQUAL
18176: IFFALSE 18185
// SetAchievement ( ACH_POKR ) ;
18178: LD_STRING ACH_POKR
18180: PPUSH
18181: CALL_OW 543
// if un = JMM then
18185: LD_VAR 0 1
18189: PUSH
18190: LD_EXP 37
18194: EQUAL
18195: IFFALSE 18204
// YouLost ( 0 ) ;
18197: LD_STRING 0
18199: PPUSH
18200: CALL_OW 104
// if un = us_dep_west then
18204: LD_VAR 0 1
18208: PUSH
18209: LD_INT 1
18211: EQUAL
18212: IFFALSE 18221
// YouLost ( 2 ) ;
18214: LD_STRING 2
18216: PPUSH
18217: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18221: LD_VAR 0 1
18225: PPUSH
18226: CALL_OW 255
18230: PUSH
18231: LD_INT 8
18233: EQUAL
18234: PUSH
18235: LD_EXP 5
18239: NOT
18240: AND
18241: IFFALSE 18250
// YouLost ( 4 ) ;
18243: LD_STRING 4
18245: PPUSH
18246: CALL_OW 104
// if un in jmm_units then
18250: LD_VAR 0 1
18254: PUSH
18255: LD_EXP 4
18259: IN
18260: IFFALSE 18276
// lose_counter := lose_counter + 1 ;
18262: LD_ADDR_EXP 34
18266: PUSH
18267: LD_EXP 34
18271: PUSH
18272: LD_INT 1
18274: PLUS
18275: ST_TO_ADDR
// end ;
18276: PPOPN 1
18278: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18279: LD_INT 0
18281: PPUSH
18282: PPUSH
// begin if GetSide ( driver ) = 3 then
18283: LD_VAR 0 1
18287: PPUSH
18288: CALL_OW 255
18292: PUSH
18293: LD_INT 3
18295: EQUAL
18296: IFFALSE 18374
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18298: LD_ADDR_VAR 0 6
18302: PUSH
18303: LD_INT 22
18305: PUSH
18306: LD_INT 3
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 30
18315: PUSH
18316: LD_INT 3
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PPUSH
18327: CALL_OW 69
18331: PPUSH
18332: CALL 999 0 1
18336: ST_TO_ADDR
// if place then
18337: LD_VAR 0 6
18341: IFFALSE 18359
// ComEnterUnit ( driver , place ) else
18343: LD_VAR 0 1
18347: PPUSH
18348: LD_VAR 0 6
18352: PPUSH
18353: CALL_OW 120
18357: GO 18374
// ComMoveXY ( driver , 70 , 22 ) ;
18359: LD_VAR 0 1
18363: PPUSH
18364: LD_INT 70
18366: PPUSH
18367: LD_INT 22
18369: PPUSH
18370: CALL_OW 111
// end ; end ;
18374: PPOPN 6
18376: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
18377: LD_VAR 0 1
18381: PUSH
18382: LD_INT 1
18384: EQUAL
18385: PUSH
18386: LD_VAR 0 2
18390: PUSH
18391: LD_INT 4
18393: EQUAL
18394: PUSH
18395: LD_VAR 0 2
18399: PUSH
18400: LD_INT 8
18402: EQUAL
18403: PUSH
18404: LD_EXP 5
18408: NOT
18409: AND
18410: OR
18411: AND
18412: IFFALSE 18421
// YouLost ( 5 ) ;
18414: LD_STRING 5
18416: PPUSH
18417: CALL_OW 104
// end ;
18421: PPOPN 2
18423: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
18424: LD_EXP 36
18428: PUSH
18429: LD_INT 22
18431: PUSH
18432: LD_INT 1
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 21
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PPUSH
18453: CALL_OW 69
18457: PUSH
18458: LD_INT 22
18460: PUSH
18461: LD_INT 8
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 21
18470: PUSH
18471: LD_INT 1
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PPUSH
18482: CALL_OW 69
18486: ADD
18487: PLUS
18488: PUSH
18489: LD_INT 5
18491: LESS
18492: IFFALSE 18504
18494: GO 18496
18496: DISABLE
// YouLost ( 1 ) ;
18497: LD_STRING 1
18499: PPUSH
18500: CALL_OW 104
18504: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
18505: LD_INT 1
18507: PPUSH
18508: CALL_OW 255
18512: PUSH
18513: LD_INT 3
18515: EQUAL
18516: IFFALSE 18528
18518: GO 18520
18520: DISABLE
// YouLost ( 3 ) ; end_of_file
18521: LD_STRING 3
18523: PPUSH
18524: CALL_OW 104
18528: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18529: LD_INT 0
18531: PPUSH
// ar_miner := 81 ;
18532: LD_ADDR_EXP 69
18536: PUSH
18537: LD_INT 81
18539: ST_TO_ADDR
// ar_crane := 88 ;
18540: LD_ADDR_EXP 68
18544: PUSH
18545: LD_INT 88
18547: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18548: LD_ADDR_EXP 63
18552: PUSH
18553: LD_INT 89
18555: ST_TO_ADDR
// us_hack := 99 ;
18556: LD_ADDR_EXP 64
18560: PUSH
18561: LD_INT 99
18563: ST_TO_ADDR
// us_artillery := 97 ;
18564: LD_ADDR_EXP 65
18568: PUSH
18569: LD_INT 97
18571: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18572: LD_ADDR_EXP 66
18576: PUSH
18577: LD_INT 91
18579: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
18580: LD_ADDR_EXP 67
18584: PUSH
18585: LD_INT 92
18587: ST_TO_ADDR
// ru_radar := 98 ;
18588: LD_ADDR_EXP 62
18592: PUSH
18593: LD_INT 98
18595: ST_TO_ADDR
// tech_Artillery := 80 ;
18596: LD_ADDR_EXP 70
18600: PUSH
18601: LD_INT 80
18603: ST_TO_ADDR
// tech_RadMat := 81 ;
18604: LD_ADDR_EXP 71
18608: PUSH
18609: LD_INT 81
18611: ST_TO_ADDR
// tech_BasicTools := 82 ;
18612: LD_ADDR_EXP 72
18616: PUSH
18617: LD_INT 82
18619: ST_TO_ADDR
// tech_Cargo := 83 ;
18620: LD_ADDR_EXP 73
18624: PUSH
18625: LD_INT 83
18627: ST_TO_ADDR
// tech_Track := 84 ;
18628: LD_ADDR_EXP 74
18632: PUSH
18633: LD_INT 84
18635: ST_TO_ADDR
// tech_Crane := 85 ;
18636: LD_ADDR_EXP 75
18640: PUSH
18641: LD_INT 85
18643: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18644: LD_ADDR_EXP 76
18648: PUSH
18649: LD_INT 86
18651: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18652: LD_ADDR_EXP 77
18656: PUSH
18657: LD_INT 87
18659: ST_TO_ADDR
// class_mastodont := 31 ;
18660: LD_ADDR_EXP 78
18664: PUSH
18665: LD_INT 31
18667: ST_TO_ADDR
// class_horse := 21 ;
18668: LD_ADDR_EXP 79
18672: PUSH
18673: LD_INT 21
18675: ST_TO_ADDR
// end ;
18676: LD_VAR 0 1
18680: RET
// every 1 do
18681: GO 18683
18683: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18684: CALL 18529 0 0
18688: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18689: LD_INT 0
18691: PPUSH
// if p2 = 100 then
18692: LD_VAR 0 2
18696: PUSH
18697: LD_INT 100
18699: EQUAL
18700: IFFALSE 19649
// begin if not StreamModeActive then
18702: LD_EXP 80
18706: NOT
18707: IFFALSE 18717
// StreamModeActive := true ;
18709: LD_ADDR_EXP 80
18713: PUSH
18714: LD_INT 1
18716: ST_TO_ADDR
// if p3 = 0 then
18717: LD_VAR 0 3
18721: PUSH
18722: LD_INT 0
18724: EQUAL
18725: IFFALSE 18731
// InitStreamMode ;
18727: CALL 19809 0 0
// if p3 = 1 then
18731: LD_VAR 0 3
18735: PUSH
18736: LD_INT 1
18738: EQUAL
18739: IFFALSE 18749
// sRocket := true ;
18741: LD_ADDR_EXP 85
18745: PUSH
18746: LD_INT 1
18748: ST_TO_ADDR
// if p3 = 2 then
18749: LD_VAR 0 3
18753: PUSH
18754: LD_INT 2
18756: EQUAL
18757: IFFALSE 18767
// sSpeed := true ;
18759: LD_ADDR_EXP 84
18763: PUSH
18764: LD_INT 1
18766: ST_TO_ADDR
// if p3 = 3 then
18767: LD_VAR 0 3
18771: PUSH
18772: LD_INT 3
18774: EQUAL
18775: IFFALSE 18785
// sEngine := true ;
18777: LD_ADDR_EXP 86
18781: PUSH
18782: LD_INT 1
18784: ST_TO_ADDR
// if p3 = 4 then
18785: LD_VAR 0 3
18789: PUSH
18790: LD_INT 4
18792: EQUAL
18793: IFFALSE 18803
// sSpec := true ;
18795: LD_ADDR_EXP 83
18799: PUSH
18800: LD_INT 1
18802: ST_TO_ADDR
// if p3 = 5 then
18803: LD_VAR 0 3
18807: PUSH
18808: LD_INT 5
18810: EQUAL
18811: IFFALSE 18821
// sLevel := true ;
18813: LD_ADDR_EXP 87
18817: PUSH
18818: LD_INT 1
18820: ST_TO_ADDR
// if p3 = 6 then
18821: LD_VAR 0 3
18825: PUSH
18826: LD_INT 6
18828: EQUAL
18829: IFFALSE 18839
// sArmoury := true ;
18831: LD_ADDR_EXP 88
18835: PUSH
18836: LD_INT 1
18838: ST_TO_ADDR
// if p3 = 7 then
18839: LD_VAR 0 3
18843: PUSH
18844: LD_INT 7
18846: EQUAL
18847: IFFALSE 18857
// sRadar := true ;
18849: LD_ADDR_EXP 89
18853: PUSH
18854: LD_INT 1
18856: ST_TO_ADDR
// if p3 = 8 then
18857: LD_VAR 0 3
18861: PUSH
18862: LD_INT 8
18864: EQUAL
18865: IFFALSE 18875
// sBunker := true ;
18867: LD_ADDR_EXP 90
18871: PUSH
18872: LD_INT 1
18874: ST_TO_ADDR
// if p3 = 9 then
18875: LD_VAR 0 3
18879: PUSH
18880: LD_INT 9
18882: EQUAL
18883: IFFALSE 18893
// sHack := true ;
18885: LD_ADDR_EXP 91
18889: PUSH
18890: LD_INT 1
18892: ST_TO_ADDR
// if p3 = 10 then
18893: LD_VAR 0 3
18897: PUSH
18898: LD_INT 10
18900: EQUAL
18901: IFFALSE 18911
// sFire := true ;
18903: LD_ADDR_EXP 92
18907: PUSH
18908: LD_INT 1
18910: ST_TO_ADDR
// if p3 = 11 then
18911: LD_VAR 0 3
18915: PUSH
18916: LD_INT 11
18918: EQUAL
18919: IFFALSE 18929
// sRefresh := true ;
18921: LD_ADDR_EXP 93
18925: PUSH
18926: LD_INT 1
18928: ST_TO_ADDR
// if p3 = 12 then
18929: LD_VAR 0 3
18933: PUSH
18934: LD_INT 12
18936: EQUAL
18937: IFFALSE 18947
// sExp := true ;
18939: LD_ADDR_EXP 94
18943: PUSH
18944: LD_INT 1
18946: ST_TO_ADDR
// if p3 = 13 then
18947: LD_VAR 0 3
18951: PUSH
18952: LD_INT 13
18954: EQUAL
18955: IFFALSE 18965
// sDepot := true ;
18957: LD_ADDR_EXP 95
18961: PUSH
18962: LD_INT 1
18964: ST_TO_ADDR
// if p3 = 14 then
18965: LD_VAR 0 3
18969: PUSH
18970: LD_INT 14
18972: EQUAL
18973: IFFALSE 18983
// sFlag := true ;
18975: LD_ADDR_EXP 96
18979: PUSH
18980: LD_INT 1
18982: ST_TO_ADDR
// if p3 = 15 then
18983: LD_VAR 0 3
18987: PUSH
18988: LD_INT 15
18990: EQUAL
18991: IFFALSE 19001
// sKamikadze := true ;
18993: LD_ADDR_EXP 104
18997: PUSH
18998: LD_INT 1
19000: ST_TO_ADDR
// if p3 = 16 then
19001: LD_VAR 0 3
19005: PUSH
19006: LD_INT 16
19008: EQUAL
19009: IFFALSE 19019
// sTroll := true ;
19011: LD_ADDR_EXP 105
19015: PUSH
19016: LD_INT 1
19018: ST_TO_ADDR
// if p3 = 17 then
19019: LD_VAR 0 3
19023: PUSH
19024: LD_INT 17
19026: EQUAL
19027: IFFALSE 19037
// sSlow := true ;
19029: LD_ADDR_EXP 106
19033: PUSH
19034: LD_INT 1
19036: ST_TO_ADDR
// if p3 = 18 then
19037: LD_VAR 0 3
19041: PUSH
19042: LD_INT 18
19044: EQUAL
19045: IFFALSE 19055
// sLack := true ;
19047: LD_ADDR_EXP 107
19051: PUSH
19052: LD_INT 1
19054: ST_TO_ADDR
// if p3 = 19 then
19055: LD_VAR 0 3
19059: PUSH
19060: LD_INT 19
19062: EQUAL
19063: IFFALSE 19073
// sTank := true ;
19065: LD_ADDR_EXP 109
19069: PUSH
19070: LD_INT 1
19072: ST_TO_ADDR
// if p3 = 20 then
19073: LD_VAR 0 3
19077: PUSH
19078: LD_INT 20
19080: EQUAL
19081: IFFALSE 19091
// sRemote := true ;
19083: LD_ADDR_EXP 110
19087: PUSH
19088: LD_INT 1
19090: ST_TO_ADDR
// if p3 = 21 then
19091: LD_VAR 0 3
19095: PUSH
19096: LD_INT 21
19098: EQUAL
19099: IFFALSE 19109
// sPowell := true ;
19101: LD_ADDR_EXP 111
19105: PUSH
19106: LD_INT 1
19108: ST_TO_ADDR
// if p3 = 22 then
19109: LD_VAR 0 3
19113: PUSH
19114: LD_INT 22
19116: EQUAL
19117: IFFALSE 19127
// sTeleport := true ;
19119: LD_ADDR_EXP 114
19123: PUSH
19124: LD_INT 1
19126: ST_TO_ADDR
// if p3 = 23 then
19127: LD_VAR 0 3
19131: PUSH
19132: LD_INT 23
19134: EQUAL
19135: IFFALSE 19145
// sOilTower := true ;
19137: LD_ADDR_EXP 116
19141: PUSH
19142: LD_INT 1
19144: ST_TO_ADDR
// if p3 = 24 then
19145: LD_VAR 0 3
19149: PUSH
19150: LD_INT 24
19152: EQUAL
19153: IFFALSE 19163
// sShovel := true ;
19155: LD_ADDR_EXP 117
19159: PUSH
19160: LD_INT 1
19162: ST_TO_ADDR
// if p3 = 25 then
19163: LD_VAR 0 3
19167: PUSH
19168: LD_INT 25
19170: EQUAL
19171: IFFALSE 19181
// sSheik := true ;
19173: LD_ADDR_EXP 118
19177: PUSH
19178: LD_INT 1
19180: ST_TO_ADDR
// if p3 = 26 then
19181: LD_VAR 0 3
19185: PUSH
19186: LD_INT 26
19188: EQUAL
19189: IFFALSE 19199
// sEarthquake := true ;
19191: LD_ADDR_EXP 120
19195: PUSH
19196: LD_INT 1
19198: ST_TO_ADDR
// if p3 = 27 then
19199: LD_VAR 0 3
19203: PUSH
19204: LD_INT 27
19206: EQUAL
19207: IFFALSE 19217
// sAI := true ;
19209: LD_ADDR_EXP 121
19213: PUSH
19214: LD_INT 1
19216: ST_TO_ADDR
// if p3 = 28 then
19217: LD_VAR 0 3
19221: PUSH
19222: LD_INT 28
19224: EQUAL
19225: IFFALSE 19235
// sCargo := true ;
19227: LD_ADDR_EXP 124
19231: PUSH
19232: LD_INT 1
19234: ST_TO_ADDR
// if p3 = 29 then
19235: LD_VAR 0 3
19239: PUSH
19240: LD_INT 29
19242: EQUAL
19243: IFFALSE 19253
// sDLaser := true ;
19245: LD_ADDR_EXP 125
19249: PUSH
19250: LD_INT 1
19252: ST_TO_ADDR
// if p3 = 30 then
19253: LD_VAR 0 3
19257: PUSH
19258: LD_INT 30
19260: EQUAL
19261: IFFALSE 19271
// sExchange := true ;
19263: LD_ADDR_EXP 126
19267: PUSH
19268: LD_INT 1
19270: ST_TO_ADDR
// if p3 = 31 then
19271: LD_VAR 0 3
19275: PUSH
19276: LD_INT 31
19278: EQUAL
19279: IFFALSE 19289
// sFac := true ;
19281: LD_ADDR_EXP 127
19285: PUSH
19286: LD_INT 1
19288: ST_TO_ADDR
// if p3 = 32 then
19289: LD_VAR 0 3
19293: PUSH
19294: LD_INT 32
19296: EQUAL
19297: IFFALSE 19307
// sPower := true ;
19299: LD_ADDR_EXP 128
19303: PUSH
19304: LD_INT 1
19306: ST_TO_ADDR
// if p3 = 33 then
19307: LD_VAR 0 3
19311: PUSH
19312: LD_INT 33
19314: EQUAL
19315: IFFALSE 19325
// sRandom := true ;
19317: LD_ADDR_EXP 129
19321: PUSH
19322: LD_INT 1
19324: ST_TO_ADDR
// if p3 = 34 then
19325: LD_VAR 0 3
19329: PUSH
19330: LD_INT 34
19332: EQUAL
19333: IFFALSE 19343
// sShield := true ;
19335: LD_ADDR_EXP 130
19339: PUSH
19340: LD_INT 1
19342: ST_TO_ADDR
// if p3 = 35 then
19343: LD_VAR 0 3
19347: PUSH
19348: LD_INT 35
19350: EQUAL
19351: IFFALSE 19361
// sTime := true ;
19353: LD_ADDR_EXP 131
19357: PUSH
19358: LD_INT 1
19360: ST_TO_ADDR
// if p3 = 36 then
19361: LD_VAR 0 3
19365: PUSH
19366: LD_INT 36
19368: EQUAL
19369: IFFALSE 19379
// sTools := true ;
19371: LD_ADDR_EXP 132
19375: PUSH
19376: LD_INT 1
19378: ST_TO_ADDR
// if p3 = 101 then
19379: LD_VAR 0 3
19383: PUSH
19384: LD_INT 101
19386: EQUAL
19387: IFFALSE 19397
// sSold := true ;
19389: LD_ADDR_EXP 97
19393: PUSH
19394: LD_INT 1
19396: ST_TO_ADDR
// if p3 = 102 then
19397: LD_VAR 0 3
19401: PUSH
19402: LD_INT 102
19404: EQUAL
19405: IFFALSE 19415
// sDiff := true ;
19407: LD_ADDR_EXP 98
19411: PUSH
19412: LD_INT 1
19414: ST_TO_ADDR
// if p3 = 103 then
19415: LD_VAR 0 3
19419: PUSH
19420: LD_INT 103
19422: EQUAL
19423: IFFALSE 19433
// sFog := true ;
19425: LD_ADDR_EXP 101
19429: PUSH
19430: LD_INT 1
19432: ST_TO_ADDR
// if p3 = 104 then
19433: LD_VAR 0 3
19437: PUSH
19438: LD_INT 104
19440: EQUAL
19441: IFFALSE 19451
// sReset := true ;
19443: LD_ADDR_EXP 102
19447: PUSH
19448: LD_INT 1
19450: ST_TO_ADDR
// if p3 = 105 then
19451: LD_VAR 0 3
19455: PUSH
19456: LD_INT 105
19458: EQUAL
19459: IFFALSE 19469
// sSun := true ;
19461: LD_ADDR_EXP 103
19465: PUSH
19466: LD_INT 1
19468: ST_TO_ADDR
// if p3 = 106 then
19469: LD_VAR 0 3
19473: PUSH
19474: LD_INT 106
19476: EQUAL
19477: IFFALSE 19487
// sTiger := true ;
19479: LD_ADDR_EXP 99
19483: PUSH
19484: LD_INT 1
19486: ST_TO_ADDR
// if p3 = 107 then
19487: LD_VAR 0 3
19491: PUSH
19492: LD_INT 107
19494: EQUAL
19495: IFFALSE 19505
// sBomb := true ;
19497: LD_ADDR_EXP 100
19501: PUSH
19502: LD_INT 1
19504: ST_TO_ADDR
// if p3 = 108 then
19505: LD_VAR 0 3
19509: PUSH
19510: LD_INT 108
19512: EQUAL
19513: IFFALSE 19523
// sWound := true ;
19515: LD_ADDR_EXP 108
19519: PUSH
19520: LD_INT 1
19522: ST_TO_ADDR
// if p3 = 109 then
19523: LD_VAR 0 3
19527: PUSH
19528: LD_INT 109
19530: EQUAL
19531: IFFALSE 19541
// sBetray := true ;
19533: LD_ADDR_EXP 112
19537: PUSH
19538: LD_INT 1
19540: ST_TO_ADDR
// if p3 = 110 then
19541: LD_VAR 0 3
19545: PUSH
19546: LD_INT 110
19548: EQUAL
19549: IFFALSE 19559
// sContamin := true ;
19551: LD_ADDR_EXP 113
19555: PUSH
19556: LD_INT 1
19558: ST_TO_ADDR
// if p3 = 111 then
19559: LD_VAR 0 3
19563: PUSH
19564: LD_INT 111
19566: EQUAL
19567: IFFALSE 19577
// sOil := true ;
19569: LD_ADDR_EXP 115
19573: PUSH
19574: LD_INT 1
19576: ST_TO_ADDR
// if p3 = 112 then
19577: LD_VAR 0 3
19581: PUSH
19582: LD_INT 112
19584: EQUAL
19585: IFFALSE 19595
// sStu := true ;
19587: LD_ADDR_EXP 119
19591: PUSH
19592: LD_INT 1
19594: ST_TO_ADDR
// if p3 = 113 then
19595: LD_VAR 0 3
19599: PUSH
19600: LD_INT 113
19602: EQUAL
19603: IFFALSE 19613
// sBazooka := true ;
19605: LD_ADDR_EXP 122
19609: PUSH
19610: LD_INT 1
19612: ST_TO_ADDR
// if p3 = 114 then
19613: LD_VAR 0 3
19617: PUSH
19618: LD_INT 114
19620: EQUAL
19621: IFFALSE 19631
// sMortar := true ;
19623: LD_ADDR_EXP 123
19627: PUSH
19628: LD_INT 1
19630: ST_TO_ADDR
// if p3 = 115 then
19631: LD_VAR 0 3
19635: PUSH
19636: LD_INT 115
19638: EQUAL
19639: IFFALSE 19649
// sRanger := true ;
19641: LD_ADDR_EXP 133
19645: PUSH
19646: LD_INT 1
19648: ST_TO_ADDR
// end ; if p2 = 101 then
19649: LD_VAR 0 2
19653: PUSH
19654: LD_INT 101
19656: EQUAL
19657: IFFALSE 19785
// begin case p3 of 1 :
19659: LD_VAR 0 3
19663: PUSH
19664: LD_INT 1
19666: DOUBLE
19667: EQUAL
19668: IFTRUE 19672
19670: GO 19679
19672: POP
// hHackUnlimitedResources ; 2 :
19673: CALL 30822 0 0
19677: GO 19785
19679: LD_INT 2
19681: DOUBLE
19682: EQUAL
19683: IFTRUE 19687
19685: GO 19694
19687: POP
// hHackSetLevel10 ; 3 :
19688: CALL 30955 0 0
19692: GO 19785
19694: LD_INT 3
19696: DOUBLE
19697: EQUAL
19698: IFTRUE 19702
19700: GO 19709
19702: POP
// hHackSetLevel10YourUnits ; 4 :
19703: CALL 31040 0 0
19707: GO 19785
19709: LD_INT 4
19711: DOUBLE
19712: EQUAL
19713: IFTRUE 19717
19715: GO 19724
19717: POP
// hHackInvincible ; 5 :
19718: CALL 31488 0 0
19722: GO 19785
19724: LD_INT 5
19726: DOUBLE
19727: EQUAL
19728: IFTRUE 19732
19730: GO 19739
19732: POP
// hHackInvisible ; 6 :
19733: CALL 31599 0 0
19737: GO 19785
19739: LD_INT 6
19741: DOUBLE
19742: EQUAL
19743: IFTRUE 19747
19745: GO 19754
19747: POP
// hHackChangeYourSide ; 7 :
19748: CALL 31656 0 0
19752: GO 19785
19754: LD_INT 7
19756: DOUBLE
19757: EQUAL
19758: IFTRUE 19762
19760: GO 19769
19762: POP
// hHackChangeUnitSide ; 8 :
19763: CALL 31698 0 0
19767: GO 19785
19769: LD_INT 8
19771: DOUBLE
19772: EQUAL
19773: IFTRUE 19777
19775: GO 19784
19777: POP
// hHackFog ; end ;
19778: CALL 31799 0 0
19782: GO 19785
19784: POP
// end ; end ;
19785: LD_VAR 0 7
19789: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19790: GO 19792
19792: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19793: LD_STRING initStreamRollete();
19795: PPUSH
19796: CALL_OW 559
// InitStreamMode ;
19800: CALL 19809 0 0
// DefineStreamItems ( ) ;
19804: CALL 20249 0 0
// end ;
19808: END
// function InitStreamMode ; begin
19809: LD_INT 0
19811: PPUSH
// streamModeActive := false ;
19812: LD_ADDR_EXP 80
19816: PUSH
19817: LD_INT 0
19819: ST_TO_ADDR
// normalCounter := 36 ;
19820: LD_ADDR_EXP 81
19824: PUSH
19825: LD_INT 36
19827: ST_TO_ADDR
// hardcoreCounter := 16 ;
19828: LD_ADDR_EXP 82
19832: PUSH
19833: LD_INT 16
19835: ST_TO_ADDR
// sRocket := false ;
19836: LD_ADDR_EXP 85
19840: PUSH
19841: LD_INT 0
19843: ST_TO_ADDR
// sSpeed := false ;
19844: LD_ADDR_EXP 84
19848: PUSH
19849: LD_INT 0
19851: ST_TO_ADDR
// sEngine := false ;
19852: LD_ADDR_EXP 86
19856: PUSH
19857: LD_INT 0
19859: ST_TO_ADDR
// sSpec := false ;
19860: LD_ADDR_EXP 83
19864: PUSH
19865: LD_INT 0
19867: ST_TO_ADDR
// sLevel := false ;
19868: LD_ADDR_EXP 87
19872: PUSH
19873: LD_INT 0
19875: ST_TO_ADDR
// sArmoury := false ;
19876: LD_ADDR_EXP 88
19880: PUSH
19881: LD_INT 0
19883: ST_TO_ADDR
// sRadar := false ;
19884: LD_ADDR_EXP 89
19888: PUSH
19889: LD_INT 0
19891: ST_TO_ADDR
// sBunker := false ;
19892: LD_ADDR_EXP 90
19896: PUSH
19897: LD_INT 0
19899: ST_TO_ADDR
// sHack := false ;
19900: LD_ADDR_EXP 91
19904: PUSH
19905: LD_INT 0
19907: ST_TO_ADDR
// sFire := false ;
19908: LD_ADDR_EXP 92
19912: PUSH
19913: LD_INT 0
19915: ST_TO_ADDR
// sRefresh := false ;
19916: LD_ADDR_EXP 93
19920: PUSH
19921: LD_INT 0
19923: ST_TO_ADDR
// sExp := false ;
19924: LD_ADDR_EXP 94
19928: PUSH
19929: LD_INT 0
19931: ST_TO_ADDR
// sDepot := false ;
19932: LD_ADDR_EXP 95
19936: PUSH
19937: LD_INT 0
19939: ST_TO_ADDR
// sFlag := false ;
19940: LD_ADDR_EXP 96
19944: PUSH
19945: LD_INT 0
19947: ST_TO_ADDR
// sKamikadze := false ;
19948: LD_ADDR_EXP 104
19952: PUSH
19953: LD_INT 0
19955: ST_TO_ADDR
// sTroll := false ;
19956: LD_ADDR_EXP 105
19960: PUSH
19961: LD_INT 0
19963: ST_TO_ADDR
// sSlow := false ;
19964: LD_ADDR_EXP 106
19968: PUSH
19969: LD_INT 0
19971: ST_TO_ADDR
// sLack := false ;
19972: LD_ADDR_EXP 107
19976: PUSH
19977: LD_INT 0
19979: ST_TO_ADDR
// sTank := false ;
19980: LD_ADDR_EXP 109
19984: PUSH
19985: LD_INT 0
19987: ST_TO_ADDR
// sRemote := false ;
19988: LD_ADDR_EXP 110
19992: PUSH
19993: LD_INT 0
19995: ST_TO_ADDR
// sPowell := false ;
19996: LD_ADDR_EXP 111
20000: PUSH
20001: LD_INT 0
20003: ST_TO_ADDR
// sTeleport := false ;
20004: LD_ADDR_EXP 114
20008: PUSH
20009: LD_INT 0
20011: ST_TO_ADDR
// sOilTower := false ;
20012: LD_ADDR_EXP 116
20016: PUSH
20017: LD_INT 0
20019: ST_TO_ADDR
// sShovel := false ;
20020: LD_ADDR_EXP 117
20024: PUSH
20025: LD_INT 0
20027: ST_TO_ADDR
// sSheik := false ;
20028: LD_ADDR_EXP 118
20032: PUSH
20033: LD_INT 0
20035: ST_TO_ADDR
// sEarthquake := false ;
20036: LD_ADDR_EXP 120
20040: PUSH
20041: LD_INT 0
20043: ST_TO_ADDR
// sAI := false ;
20044: LD_ADDR_EXP 121
20048: PUSH
20049: LD_INT 0
20051: ST_TO_ADDR
// sCargo := false ;
20052: LD_ADDR_EXP 124
20056: PUSH
20057: LD_INT 0
20059: ST_TO_ADDR
// sDLaser := false ;
20060: LD_ADDR_EXP 125
20064: PUSH
20065: LD_INT 0
20067: ST_TO_ADDR
// sExchange := false ;
20068: LD_ADDR_EXP 126
20072: PUSH
20073: LD_INT 0
20075: ST_TO_ADDR
// sFac := false ;
20076: LD_ADDR_EXP 127
20080: PUSH
20081: LD_INT 0
20083: ST_TO_ADDR
// sPower := false ;
20084: LD_ADDR_EXP 128
20088: PUSH
20089: LD_INT 0
20091: ST_TO_ADDR
// sRandom := false ;
20092: LD_ADDR_EXP 129
20096: PUSH
20097: LD_INT 0
20099: ST_TO_ADDR
// sShield := false ;
20100: LD_ADDR_EXP 130
20104: PUSH
20105: LD_INT 0
20107: ST_TO_ADDR
// sTime := false ;
20108: LD_ADDR_EXP 131
20112: PUSH
20113: LD_INT 0
20115: ST_TO_ADDR
// sTools := false ;
20116: LD_ADDR_EXP 132
20120: PUSH
20121: LD_INT 0
20123: ST_TO_ADDR
// sSold := false ;
20124: LD_ADDR_EXP 97
20128: PUSH
20129: LD_INT 0
20131: ST_TO_ADDR
// sDiff := false ;
20132: LD_ADDR_EXP 98
20136: PUSH
20137: LD_INT 0
20139: ST_TO_ADDR
// sFog := false ;
20140: LD_ADDR_EXP 101
20144: PUSH
20145: LD_INT 0
20147: ST_TO_ADDR
// sReset := false ;
20148: LD_ADDR_EXP 102
20152: PUSH
20153: LD_INT 0
20155: ST_TO_ADDR
// sSun := false ;
20156: LD_ADDR_EXP 103
20160: PUSH
20161: LD_INT 0
20163: ST_TO_ADDR
// sTiger := false ;
20164: LD_ADDR_EXP 99
20168: PUSH
20169: LD_INT 0
20171: ST_TO_ADDR
// sBomb := false ;
20172: LD_ADDR_EXP 100
20176: PUSH
20177: LD_INT 0
20179: ST_TO_ADDR
// sWound := false ;
20180: LD_ADDR_EXP 108
20184: PUSH
20185: LD_INT 0
20187: ST_TO_ADDR
// sBetray := false ;
20188: LD_ADDR_EXP 112
20192: PUSH
20193: LD_INT 0
20195: ST_TO_ADDR
// sContamin := false ;
20196: LD_ADDR_EXP 113
20200: PUSH
20201: LD_INT 0
20203: ST_TO_ADDR
// sOil := false ;
20204: LD_ADDR_EXP 115
20208: PUSH
20209: LD_INT 0
20211: ST_TO_ADDR
// sStu := false ;
20212: LD_ADDR_EXP 119
20216: PUSH
20217: LD_INT 0
20219: ST_TO_ADDR
// sBazooka := false ;
20220: LD_ADDR_EXP 122
20224: PUSH
20225: LD_INT 0
20227: ST_TO_ADDR
// sMortar := false ;
20228: LD_ADDR_EXP 123
20232: PUSH
20233: LD_INT 0
20235: ST_TO_ADDR
// sRanger := false ;
20236: LD_ADDR_EXP 133
20240: PUSH
20241: LD_INT 0
20243: ST_TO_ADDR
// end ;
20244: LD_VAR 0 1
20248: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20249: LD_INT 0
20251: PPUSH
20252: PPUSH
20253: PPUSH
20254: PPUSH
20255: PPUSH
// result := [ ] ;
20256: LD_ADDR_VAR 0 1
20260: PUSH
20261: EMPTY
20262: ST_TO_ADDR
// if campaign_id = 1 then
20263: LD_OWVAR 69
20267: PUSH
20268: LD_INT 1
20270: EQUAL
20271: IFFALSE 23209
// begin case mission_number of 1 :
20273: LD_OWVAR 70
20277: PUSH
20278: LD_INT 1
20280: DOUBLE
20281: EQUAL
20282: IFTRUE 20286
20284: GO 20350
20286: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20287: LD_ADDR_VAR 0 1
20291: PUSH
20292: LD_INT 2
20294: PUSH
20295: LD_INT 4
20297: PUSH
20298: LD_INT 11
20300: PUSH
20301: LD_INT 12
20303: PUSH
20304: LD_INT 15
20306: PUSH
20307: LD_INT 16
20309: PUSH
20310: LD_INT 22
20312: PUSH
20313: LD_INT 23
20315: PUSH
20316: LD_INT 26
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 101
20332: PUSH
20333: LD_INT 102
20335: PUSH
20336: LD_INT 106
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: LIST
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: ST_TO_ADDR
20348: GO 23207
20350: LD_INT 2
20352: DOUBLE
20353: EQUAL
20354: IFTRUE 20358
20356: GO 20430
20358: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20359: LD_ADDR_VAR 0 1
20363: PUSH
20364: LD_INT 2
20366: PUSH
20367: LD_INT 4
20369: PUSH
20370: LD_INT 11
20372: PUSH
20373: LD_INT 12
20375: PUSH
20376: LD_INT 15
20378: PUSH
20379: LD_INT 16
20381: PUSH
20382: LD_INT 22
20384: PUSH
20385: LD_INT 23
20387: PUSH
20388: LD_INT 26
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 101
20404: PUSH
20405: LD_INT 102
20407: PUSH
20408: LD_INT 105
20410: PUSH
20411: LD_INT 106
20413: PUSH
20414: LD_INT 108
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: ST_TO_ADDR
20428: GO 23207
20430: LD_INT 3
20432: DOUBLE
20433: EQUAL
20434: IFTRUE 20438
20436: GO 20514
20438: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20439: LD_ADDR_VAR 0 1
20443: PUSH
20444: LD_INT 2
20446: PUSH
20447: LD_INT 4
20449: PUSH
20450: LD_INT 5
20452: PUSH
20453: LD_INT 11
20455: PUSH
20456: LD_INT 12
20458: PUSH
20459: LD_INT 15
20461: PUSH
20462: LD_INT 16
20464: PUSH
20465: LD_INT 22
20467: PUSH
20468: LD_INT 26
20470: PUSH
20471: LD_INT 36
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 101
20488: PUSH
20489: LD_INT 102
20491: PUSH
20492: LD_INT 105
20494: PUSH
20495: LD_INT 106
20497: PUSH
20498: LD_INT 108
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: ST_TO_ADDR
20512: GO 23207
20514: LD_INT 4
20516: DOUBLE
20517: EQUAL
20518: IFTRUE 20522
20520: GO 20606
20522: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20523: LD_ADDR_VAR 0 1
20527: PUSH
20528: LD_INT 2
20530: PUSH
20531: LD_INT 4
20533: PUSH
20534: LD_INT 5
20536: PUSH
20537: LD_INT 8
20539: PUSH
20540: LD_INT 11
20542: PUSH
20543: LD_INT 12
20545: PUSH
20546: LD_INT 15
20548: PUSH
20549: LD_INT 16
20551: PUSH
20552: LD_INT 22
20554: PUSH
20555: LD_INT 23
20557: PUSH
20558: LD_INT 26
20560: PUSH
20561: LD_INT 36
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 101
20580: PUSH
20581: LD_INT 102
20583: PUSH
20584: LD_INT 105
20586: PUSH
20587: LD_INT 106
20589: PUSH
20590: LD_INT 108
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: ST_TO_ADDR
20604: GO 23207
20606: LD_INT 5
20608: DOUBLE
20609: EQUAL
20610: IFTRUE 20614
20612: GO 20714
20614: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20615: LD_ADDR_VAR 0 1
20619: PUSH
20620: LD_INT 2
20622: PUSH
20623: LD_INT 4
20625: PUSH
20626: LD_INT 5
20628: PUSH
20629: LD_INT 6
20631: PUSH
20632: LD_INT 8
20634: PUSH
20635: LD_INT 11
20637: PUSH
20638: LD_INT 12
20640: PUSH
20641: LD_INT 15
20643: PUSH
20644: LD_INT 16
20646: PUSH
20647: LD_INT 22
20649: PUSH
20650: LD_INT 23
20652: PUSH
20653: LD_INT 25
20655: PUSH
20656: LD_INT 26
20658: PUSH
20659: LD_INT 36
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: PUSH
20678: LD_INT 101
20680: PUSH
20681: LD_INT 102
20683: PUSH
20684: LD_INT 105
20686: PUSH
20687: LD_INT 106
20689: PUSH
20690: LD_INT 108
20692: PUSH
20693: LD_INT 109
20695: PUSH
20696: LD_INT 112
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: ST_TO_ADDR
20712: GO 23207
20714: LD_INT 6
20716: DOUBLE
20717: EQUAL
20718: IFTRUE 20722
20720: GO 20842
20722: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20723: LD_ADDR_VAR 0 1
20727: PUSH
20728: LD_INT 2
20730: PUSH
20731: LD_INT 4
20733: PUSH
20734: LD_INT 5
20736: PUSH
20737: LD_INT 6
20739: PUSH
20740: LD_INT 8
20742: PUSH
20743: LD_INT 11
20745: PUSH
20746: LD_INT 12
20748: PUSH
20749: LD_INT 15
20751: PUSH
20752: LD_INT 16
20754: PUSH
20755: LD_INT 20
20757: PUSH
20758: LD_INT 21
20760: PUSH
20761: LD_INT 22
20763: PUSH
20764: LD_INT 23
20766: PUSH
20767: LD_INT 25
20769: PUSH
20770: LD_INT 26
20772: PUSH
20773: LD_INT 30
20775: PUSH
20776: LD_INT 31
20778: PUSH
20779: LD_INT 32
20781: PUSH
20782: LD_INT 36
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 101
20808: PUSH
20809: LD_INT 102
20811: PUSH
20812: LD_INT 105
20814: PUSH
20815: LD_INT 106
20817: PUSH
20818: LD_INT 108
20820: PUSH
20821: LD_INT 109
20823: PUSH
20824: LD_INT 112
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: ST_TO_ADDR
20840: GO 23207
20842: LD_INT 7
20844: DOUBLE
20845: EQUAL
20846: IFTRUE 20850
20848: GO 20950
20850: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20851: LD_ADDR_VAR 0 1
20855: PUSH
20856: LD_INT 2
20858: PUSH
20859: LD_INT 4
20861: PUSH
20862: LD_INT 5
20864: PUSH
20865: LD_INT 7
20867: PUSH
20868: LD_INT 11
20870: PUSH
20871: LD_INT 12
20873: PUSH
20874: LD_INT 15
20876: PUSH
20877: LD_INT 16
20879: PUSH
20880: LD_INT 20
20882: PUSH
20883: LD_INT 21
20885: PUSH
20886: LD_INT 22
20888: PUSH
20889: LD_INT 23
20891: PUSH
20892: LD_INT 25
20894: PUSH
20895: LD_INT 26
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 101
20916: PUSH
20917: LD_INT 102
20919: PUSH
20920: LD_INT 103
20922: PUSH
20923: LD_INT 105
20925: PUSH
20926: LD_INT 106
20928: PUSH
20929: LD_INT 108
20931: PUSH
20932: LD_INT 112
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: ST_TO_ADDR
20948: GO 23207
20950: LD_INT 8
20952: DOUBLE
20953: EQUAL
20954: IFTRUE 20958
20956: GO 21086
20958: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20959: LD_ADDR_VAR 0 1
20963: PUSH
20964: LD_INT 2
20966: PUSH
20967: LD_INT 4
20969: PUSH
20970: LD_INT 5
20972: PUSH
20973: LD_INT 6
20975: PUSH
20976: LD_INT 7
20978: PUSH
20979: LD_INT 8
20981: PUSH
20982: LD_INT 11
20984: PUSH
20985: LD_INT 12
20987: PUSH
20988: LD_INT 15
20990: PUSH
20991: LD_INT 16
20993: PUSH
20994: LD_INT 20
20996: PUSH
20997: LD_INT 21
20999: PUSH
21000: LD_INT 22
21002: PUSH
21003: LD_INT 23
21005: PUSH
21006: LD_INT 25
21008: PUSH
21009: LD_INT 26
21011: PUSH
21012: LD_INT 30
21014: PUSH
21015: LD_INT 31
21017: PUSH
21018: LD_INT 32
21020: PUSH
21021: LD_INT 36
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: PUSH
21046: LD_INT 101
21048: PUSH
21049: LD_INT 102
21051: PUSH
21052: LD_INT 103
21054: PUSH
21055: LD_INT 105
21057: PUSH
21058: LD_INT 106
21060: PUSH
21061: LD_INT 108
21063: PUSH
21064: LD_INT 109
21066: PUSH
21067: LD_INT 112
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: ST_TO_ADDR
21084: GO 23207
21086: LD_INT 9
21088: DOUBLE
21089: EQUAL
21090: IFTRUE 21094
21092: GO 21230
21094: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21095: LD_ADDR_VAR 0 1
21099: PUSH
21100: LD_INT 2
21102: PUSH
21103: LD_INT 4
21105: PUSH
21106: LD_INT 5
21108: PUSH
21109: LD_INT 6
21111: PUSH
21112: LD_INT 7
21114: PUSH
21115: LD_INT 8
21117: PUSH
21118: LD_INT 11
21120: PUSH
21121: LD_INT 12
21123: PUSH
21124: LD_INT 15
21126: PUSH
21127: LD_INT 16
21129: PUSH
21130: LD_INT 20
21132: PUSH
21133: LD_INT 21
21135: PUSH
21136: LD_INT 22
21138: PUSH
21139: LD_INT 23
21141: PUSH
21142: LD_INT 25
21144: PUSH
21145: LD_INT 26
21147: PUSH
21148: LD_INT 28
21150: PUSH
21151: LD_INT 30
21153: PUSH
21154: LD_INT 31
21156: PUSH
21157: LD_INT 32
21159: PUSH
21160: LD_INT 36
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 101
21188: PUSH
21189: LD_INT 102
21191: PUSH
21192: LD_INT 103
21194: PUSH
21195: LD_INT 105
21197: PUSH
21198: LD_INT 106
21200: PUSH
21201: LD_INT 108
21203: PUSH
21204: LD_INT 109
21206: PUSH
21207: LD_INT 112
21209: PUSH
21210: LD_INT 114
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: ST_TO_ADDR
21228: GO 23207
21230: LD_INT 10
21232: DOUBLE
21233: EQUAL
21234: IFTRUE 21238
21236: GO 21422
21238: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21239: LD_ADDR_VAR 0 1
21243: PUSH
21244: LD_INT 2
21246: PUSH
21247: LD_INT 4
21249: PUSH
21250: LD_INT 5
21252: PUSH
21253: LD_INT 6
21255: PUSH
21256: LD_INT 7
21258: PUSH
21259: LD_INT 8
21261: PUSH
21262: LD_INT 9
21264: PUSH
21265: LD_INT 10
21267: PUSH
21268: LD_INT 11
21270: PUSH
21271: LD_INT 12
21273: PUSH
21274: LD_INT 13
21276: PUSH
21277: LD_INT 14
21279: PUSH
21280: LD_INT 15
21282: PUSH
21283: LD_INT 16
21285: PUSH
21286: LD_INT 17
21288: PUSH
21289: LD_INT 18
21291: PUSH
21292: LD_INT 19
21294: PUSH
21295: LD_INT 20
21297: PUSH
21298: LD_INT 21
21300: PUSH
21301: LD_INT 22
21303: PUSH
21304: LD_INT 23
21306: PUSH
21307: LD_INT 24
21309: PUSH
21310: LD_INT 25
21312: PUSH
21313: LD_INT 26
21315: PUSH
21316: LD_INT 28
21318: PUSH
21319: LD_INT 30
21321: PUSH
21322: LD_INT 31
21324: PUSH
21325: LD_INT 32
21327: PUSH
21328: LD_INT 36
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 101
21364: PUSH
21365: LD_INT 102
21367: PUSH
21368: LD_INT 103
21370: PUSH
21371: LD_INT 104
21373: PUSH
21374: LD_INT 105
21376: PUSH
21377: LD_INT 106
21379: PUSH
21380: LD_INT 107
21382: PUSH
21383: LD_INT 108
21385: PUSH
21386: LD_INT 109
21388: PUSH
21389: LD_INT 110
21391: PUSH
21392: LD_INT 111
21394: PUSH
21395: LD_INT 112
21397: PUSH
21398: LD_INT 114
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: ST_TO_ADDR
21420: GO 23207
21422: LD_INT 11
21424: DOUBLE
21425: EQUAL
21426: IFTRUE 21430
21428: GO 21622
21430: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21431: LD_ADDR_VAR 0 1
21435: PUSH
21436: LD_INT 2
21438: PUSH
21439: LD_INT 3
21441: PUSH
21442: LD_INT 4
21444: PUSH
21445: LD_INT 5
21447: PUSH
21448: LD_INT 6
21450: PUSH
21451: LD_INT 7
21453: PUSH
21454: LD_INT 8
21456: PUSH
21457: LD_INT 9
21459: PUSH
21460: LD_INT 10
21462: PUSH
21463: LD_INT 11
21465: PUSH
21466: LD_INT 12
21468: PUSH
21469: LD_INT 13
21471: PUSH
21472: LD_INT 14
21474: PUSH
21475: LD_INT 15
21477: PUSH
21478: LD_INT 16
21480: PUSH
21481: LD_INT 17
21483: PUSH
21484: LD_INT 18
21486: PUSH
21487: LD_INT 19
21489: PUSH
21490: LD_INT 20
21492: PUSH
21493: LD_INT 21
21495: PUSH
21496: LD_INT 22
21498: PUSH
21499: LD_INT 23
21501: PUSH
21502: LD_INT 24
21504: PUSH
21505: LD_INT 25
21507: PUSH
21508: LD_INT 26
21510: PUSH
21511: LD_INT 28
21513: PUSH
21514: LD_INT 30
21516: PUSH
21517: LD_INT 31
21519: PUSH
21520: LD_INT 32
21522: PUSH
21523: LD_INT 34
21525: PUSH
21526: LD_INT 36
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 101
21564: PUSH
21565: LD_INT 102
21567: PUSH
21568: LD_INT 103
21570: PUSH
21571: LD_INT 104
21573: PUSH
21574: LD_INT 105
21576: PUSH
21577: LD_INT 106
21579: PUSH
21580: LD_INT 107
21582: PUSH
21583: LD_INT 108
21585: PUSH
21586: LD_INT 109
21588: PUSH
21589: LD_INT 110
21591: PUSH
21592: LD_INT 111
21594: PUSH
21595: LD_INT 112
21597: PUSH
21598: LD_INT 114
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: ST_TO_ADDR
21620: GO 23207
21622: LD_INT 12
21624: DOUBLE
21625: EQUAL
21626: IFTRUE 21630
21628: GO 21838
21630: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21631: LD_ADDR_VAR 0 1
21635: PUSH
21636: LD_INT 1
21638: PUSH
21639: LD_INT 2
21641: PUSH
21642: LD_INT 3
21644: PUSH
21645: LD_INT 4
21647: PUSH
21648: LD_INT 5
21650: PUSH
21651: LD_INT 6
21653: PUSH
21654: LD_INT 7
21656: PUSH
21657: LD_INT 8
21659: PUSH
21660: LD_INT 9
21662: PUSH
21663: LD_INT 10
21665: PUSH
21666: LD_INT 11
21668: PUSH
21669: LD_INT 12
21671: PUSH
21672: LD_INT 13
21674: PUSH
21675: LD_INT 14
21677: PUSH
21678: LD_INT 15
21680: PUSH
21681: LD_INT 16
21683: PUSH
21684: LD_INT 17
21686: PUSH
21687: LD_INT 18
21689: PUSH
21690: LD_INT 19
21692: PUSH
21693: LD_INT 20
21695: PUSH
21696: LD_INT 21
21698: PUSH
21699: LD_INT 22
21701: PUSH
21702: LD_INT 23
21704: PUSH
21705: LD_INT 24
21707: PUSH
21708: LD_INT 25
21710: PUSH
21711: LD_INT 26
21713: PUSH
21714: LD_INT 27
21716: PUSH
21717: LD_INT 28
21719: PUSH
21720: LD_INT 30
21722: PUSH
21723: LD_INT 31
21725: PUSH
21726: LD_INT 32
21728: PUSH
21729: LD_INT 33
21731: PUSH
21732: LD_INT 34
21734: PUSH
21735: LD_INT 36
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 101
21776: PUSH
21777: LD_INT 102
21779: PUSH
21780: LD_INT 103
21782: PUSH
21783: LD_INT 104
21785: PUSH
21786: LD_INT 105
21788: PUSH
21789: LD_INT 106
21791: PUSH
21792: LD_INT 107
21794: PUSH
21795: LD_INT 108
21797: PUSH
21798: LD_INT 109
21800: PUSH
21801: LD_INT 110
21803: PUSH
21804: LD_INT 111
21806: PUSH
21807: LD_INT 112
21809: PUSH
21810: LD_INT 113
21812: PUSH
21813: LD_INT 114
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: ST_TO_ADDR
21836: GO 23207
21838: LD_INT 13
21840: DOUBLE
21841: EQUAL
21842: IFTRUE 21846
21844: GO 22042
21846: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21847: LD_ADDR_VAR 0 1
21851: PUSH
21852: LD_INT 1
21854: PUSH
21855: LD_INT 2
21857: PUSH
21858: LD_INT 3
21860: PUSH
21861: LD_INT 4
21863: PUSH
21864: LD_INT 5
21866: PUSH
21867: LD_INT 8
21869: PUSH
21870: LD_INT 9
21872: PUSH
21873: LD_INT 10
21875: PUSH
21876: LD_INT 11
21878: PUSH
21879: LD_INT 12
21881: PUSH
21882: LD_INT 14
21884: PUSH
21885: LD_INT 15
21887: PUSH
21888: LD_INT 16
21890: PUSH
21891: LD_INT 17
21893: PUSH
21894: LD_INT 18
21896: PUSH
21897: LD_INT 19
21899: PUSH
21900: LD_INT 20
21902: PUSH
21903: LD_INT 21
21905: PUSH
21906: LD_INT 22
21908: PUSH
21909: LD_INT 23
21911: PUSH
21912: LD_INT 24
21914: PUSH
21915: LD_INT 25
21917: PUSH
21918: LD_INT 26
21920: PUSH
21921: LD_INT 27
21923: PUSH
21924: LD_INT 28
21926: PUSH
21927: LD_INT 30
21929: PUSH
21930: LD_INT 31
21932: PUSH
21933: LD_INT 32
21935: PUSH
21936: LD_INT 33
21938: PUSH
21939: LD_INT 34
21941: PUSH
21942: LD_INT 36
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 101
21980: PUSH
21981: LD_INT 102
21983: PUSH
21984: LD_INT 103
21986: PUSH
21987: LD_INT 104
21989: PUSH
21990: LD_INT 105
21992: PUSH
21993: LD_INT 106
21995: PUSH
21996: LD_INT 107
21998: PUSH
21999: LD_INT 108
22001: PUSH
22002: LD_INT 109
22004: PUSH
22005: LD_INT 110
22007: PUSH
22008: LD_INT 111
22010: PUSH
22011: LD_INT 112
22013: PUSH
22014: LD_INT 113
22016: PUSH
22017: LD_INT 114
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: ST_TO_ADDR
22040: GO 23207
22042: LD_INT 14
22044: DOUBLE
22045: EQUAL
22046: IFTRUE 22050
22048: GO 22262
22050: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22051: LD_ADDR_VAR 0 1
22055: PUSH
22056: LD_INT 1
22058: PUSH
22059: LD_INT 2
22061: PUSH
22062: LD_INT 3
22064: PUSH
22065: LD_INT 4
22067: PUSH
22068: LD_INT 5
22070: PUSH
22071: LD_INT 6
22073: PUSH
22074: LD_INT 7
22076: PUSH
22077: LD_INT 8
22079: PUSH
22080: LD_INT 9
22082: PUSH
22083: LD_INT 10
22085: PUSH
22086: LD_INT 11
22088: PUSH
22089: LD_INT 12
22091: PUSH
22092: LD_INT 13
22094: PUSH
22095: LD_INT 14
22097: PUSH
22098: LD_INT 15
22100: PUSH
22101: LD_INT 16
22103: PUSH
22104: LD_INT 17
22106: PUSH
22107: LD_INT 18
22109: PUSH
22110: LD_INT 19
22112: PUSH
22113: LD_INT 20
22115: PUSH
22116: LD_INT 21
22118: PUSH
22119: LD_INT 22
22121: PUSH
22122: LD_INT 23
22124: PUSH
22125: LD_INT 24
22127: PUSH
22128: LD_INT 25
22130: PUSH
22131: LD_INT 26
22133: PUSH
22134: LD_INT 27
22136: PUSH
22137: LD_INT 28
22139: PUSH
22140: LD_INT 29
22142: PUSH
22143: LD_INT 30
22145: PUSH
22146: LD_INT 31
22148: PUSH
22149: LD_INT 32
22151: PUSH
22152: LD_INT 33
22154: PUSH
22155: LD_INT 34
22157: PUSH
22158: LD_INT 36
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 101
22200: PUSH
22201: LD_INT 102
22203: PUSH
22204: LD_INT 103
22206: PUSH
22207: LD_INT 104
22209: PUSH
22210: LD_INT 105
22212: PUSH
22213: LD_INT 106
22215: PUSH
22216: LD_INT 107
22218: PUSH
22219: LD_INT 108
22221: PUSH
22222: LD_INT 109
22224: PUSH
22225: LD_INT 110
22227: PUSH
22228: LD_INT 111
22230: PUSH
22231: LD_INT 112
22233: PUSH
22234: LD_INT 113
22236: PUSH
22237: LD_INT 114
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: ST_TO_ADDR
22260: GO 23207
22262: LD_INT 15
22264: DOUBLE
22265: EQUAL
22266: IFTRUE 22270
22268: GO 22482
22270: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22271: LD_ADDR_VAR 0 1
22275: PUSH
22276: LD_INT 1
22278: PUSH
22279: LD_INT 2
22281: PUSH
22282: LD_INT 3
22284: PUSH
22285: LD_INT 4
22287: PUSH
22288: LD_INT 5
22290: PUSH
22291: LD_INT 6
22293: PUSH
22294: LD_INT 7
22296: PUSH
22297: LD_INT 8
22299: PUSH
22300: LD_INT 9
22302: PUSH
22303: LD_INT 10
22305: PUSH
22306: LD_INT 11
22308: PUSH
22309: LD_INT 12
22311: PUSH
22312: LD_INT 13
22314: PUSH
22315: LD_INT 14
22317: PUSH
22318: LD_INT 15
22320: PUSH
22321: LD_INT 16
22323: PUSH
22324: LD_INT 17
22326: PUSH
22327: LD_INT 18
22329: PUSH
22330: LD_INT 19
22332: PUSH
22333: LD_INT 20
22335: PUSH
22336: LD_INT 21
22338: PUSH
22339: LD_INT 22
22341: PUSH
22342: LD_INT 23
22344: PUSH
22345: LD_INT 24
22347: PUSH
22348: LD_INT 25
22350: PUSH
22351: LD_INT 26
22353: PUSH
22354: LD_INT 27
22356: PUSH
22357: LD_INT 28
22359: PUSH
22360: LD_INT 29
22362: PUSH
22363: LD_INT 30
22365: PUSH
22366: LD_INT 31
22368: PUSH
22369: LD_INT 32
22371: PUSH
22372: LD_INT 33
22374: PUSH
22375: LD_INT 34
22377: PUSH
22378: LD_INT 36
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 101
22420: PUSH
22421: LD_INT 102
22423: PUSH
22424: LD_INT 103
22426: PUSH
22427: LD_INT 104
22429: PUSH
22430: LD_INT 105
22432: PUSH
22433: LD_INT 106
22435: PUSH
22436: LD_INT 107
22438: PUSH
22439: LD_INT 108
22441: PUSH
22442: LD_INT 109
22444: PUSH
22445: LD_INT 110
22447: PUSH
22448: LD_INT 111
22450: PUSH
22451: LD_INT 112
22453: PUSH
22454: LD_INT 113
22456: PUSH
22457: LD_INT 114
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: ST_TO_ADDR
22480: GO 23207
22482: LD_INT 16
22484: DOUBLE
22485: EQUAL
22486: IFTRUE 22490
22488: GO 22614
22490: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22491: LD_ADDR_VAR 0 1
22495: PUSH
22496: LD_INT 2
22498: PUSH
22499: LD_INT 4
22501: PUSH
22502: LD_INT 5
22504: PUSH
22505: LD_INT 7
22507: PUSH
22508: LD_INT 11
22510: PUSH
22511: LD_INT 12
22513: PUSH
22514: LD_INT 15
22516: PUSH
22517: LD_INT 16
22519: PUSH
22520: LD_INT 20
22522: PUSH
22523: LD_INT 21
22525: PUSH
22526: LD_INT 22
22528: PUSH
22529: LD_INT 23
22531: PUSH
22532: LD_INT 25
22534: PUSH
22535: LD_INT 26
22537: PUSH
22538: LD_INT 30
22540: PUSH
22541: LD_INT 31
22543: PUSH
22544: LD_INT 32
22546: PUSH
22547: LD_INT 33
22549: PUSH
22550: LD_INT 34
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 101
22576: PUSH
22577: LD_INT 102
22579: PUSH
22580: LD_INT 103
22582: PUSH
22583: LD_INT 106
22585: PUSH
22586: LD_INT 108
22588: PUSH
22589: LD_INT 112
22591: PUSH
22592: LD_INT 113
22594: PUSH
22595: LD_INT 114
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: ST_TO_ADDR
22612: GO 23207
22614: LD_INT 17
22616: DOUBLE
22617: EQUAL
22618: IFTRUE 22622
22620: GO 22834
22622: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22623: LD_ADDR_VAR 0 1
22627: PUSH
22628: LD_INT 1
22630: PUSH
22631: LD_INT 2
22633: PUSH
22634: LD_INT 3
22636: PUSH
22637: LD_INT 4
22639: PUSH
22640: LD_INT 5
22642: PUSH
22643: LD_INT 6
22645: PUSH
22646: LD_INT 7
22648: PUSH
22649: LD_INT 8
22651: PUSH
22652: LD_INT 9
22654: PUSH
22655: LD_INT 10
22657: PUSH
22658: LD_INT 11
22660: PUSH
22661: LD_INT 12
22663: PUSH
22664: LD_INT 13
22666: PUSH
22667: LD_INT 14
22669: PUSH
22670: LD_INT 15
22672: PUSH
22673: LD_INT 16
22675: PUSH
22676: LD_INT 17
22678: PUSH
22679: LD_INT 18
22681: PUSH
22682: LD_INT 19
22684: PUSH
22685: LD_INT 20
22687: PUSH
22688: LD_INT 21
22690: PUSH
22691: LD_INT 22
22693: PUSH
22694: LD_INT 23
22696: PUSH
22697: LD_INT 24
22699: PUSH
22700: LD_INT 25
22702: PUSH
22703: LD_INT 26
22705: PUSH
22706: LD_INT 27
22708: PUSH
22709: LD_INT 28
22711: PUSH
22712: LD_INT 29
22714: PUSH
22715: LD_INT 30
22717: PUSH
22718: LD_INT 31
22720: PUSH
22721: LD_INT 32
22723: PUSH
22724: LD_INT 33
22726: PUSH
22727: LD_INT 34
22729: PUSH
22730: LD_INT 36
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 101
22772: PUSH
22773: LD_INT 102
22775: PUSH
22776: LD_INT 103
22778: PUSH
22779: LD_INT 104
22781: PUSH
22782: LD_INT 105
22784: PUSH
22785: LD_INT 106
22787: PUSH
22788: LD_INT 107
22790: PUSH
22791: LD_INT 108
22793: PUSH
22794: LD_INT 109
22796: PUSH
22797: LD_INT 110
22799: PUSH
22800: LD_INT 111
22802: PUSH
22803: LD_INT 112
22805: PUSH
22806: LD_INT 113
22808: PUSH
22809: LD_INT 114
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: ST_TO_ADDR
22832: GO 23207
22834: LD_INT 18
22836: DOUBLE
22837: EQUAL
22838: IFTRUE 22842
22840: GO 22978
22842: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22843: LD_ADDR_VAR 0 1
22847: PUSH
22848: LD_INT 2
22850: PUSH
22851: LD_INT 4
22853: PUSH
22854: LD_INT 5
22856: PUSH
22857: LD_INT 7
22859: PUSH
22860: LD_INT 11
22862: PUSH
22863: LD_INT 12
22865: PUSH
22866: LD_INT 15
22868: PUSH
22869: LD_INT 16
22871: PUSH
22872: LD_INT 20
22874: PUSH
22875: LD_INT 21
22877: PUSH
22878: LD_INT 22
22880: PUSH
22881: LD_INT 23
22883: PUSH
22884: LD_INT 25
22886: PUSH
22887: LD_INT 26
22889: PUSH
22890: LD_INT 30
22892: PUSH
22893: LD_INT 31
22895: PUSH
22896: LD_INT 32
22898: PUSH
22899: LD_INT 33
22901: PUSH
22902: LD_INT 34
22904: PUSH
22905: LD_INT 35
22907: PUSH
22908: LD_INT 36
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 101
22936: PUSH
22937: LD_INT 102
22939: PUSH
22940: LD_INT 103
22942: PUSH
22943: LD_INT 106
22945: PUSH
22946: LD_INT 108
22948: PUSH
22949: LD_INT 112
22951: PUSH
22952: LD_INT 113
22954: PUSH
22955: LD_INT 114
22957: PUSH
22958: LD_INT 115
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: ST_TO_ADDR
22976: GO 23207
22978: LD_INT 19
22980: DOUBLE
22981: EQUAL
22982: IFTRUE 22986
22984: GO 23206
22986: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22987: LD_ADDR_VAR 0 1
22991: PUSH
22992: LD_INT 1
22994: PUSH
22995: LD_INT 2
22997: PUSH
22998: LD_INT 3
23000: PUSH
23001: LD_INT 4
23003: PUSH
23004: LD_INT 5
23006: PUSH
23007: LD_INT 6
23009: PUSH
23010: LD_INT 7
23012: PUSH
23013: LD_INT 8
23015: PUSH
23016: LD_INT 9
23018: PUSH
23019: LD_INT 10
23021: PUSH
23022: LD_INT 11
23024: PUSH
23025: LD_INT 12
23027: PUSH
23028: LD_INT 13
23030: PUSH
23031: LD_INT 14
23033: PUSH
23034: LD_INT 15
23036: PUSH
23037: LD_INT 16
23039: PUSH
23040: LD_INT 17
23042: PUSH
23043: LD_INT 18
23045: PUSH
23046: LD_INT 19
23048: PUSH
23049: LD_INT 20
23051: PUSH
23052: LD_INT 21
23054: PUSH
23055: LD_INT 22
23057: PUSH
23058: LD_INT 23
23060: PUSH
23061: LD_INT 24
23063: PUSH
23064: LD_INT 25
23066: PUSH
23067: LD_INT 26
23069: PUSH
23070: LD_INT 27
23072: PUSH
23073: LD_INT 28
23075: PUSH
23076: LD_INT 29
23078: PUSH
23079: LD_INT 30
23081: PUSH
23082: LD_INT 31
23084: PUSH
23085: LD_INT 32
23087: PUSH
23088: LD_INT 33
23090: PUSH
23091: LD_INT 34
23093: PUSH
23094: LD_INT 35
23096: PUSH
23097: LD_INT 36
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 101
23140: PUSH
23141: LD_INT 102
23143: PUSH
23144: LD_INT 103
23146: PUSH
23147: LD_INT 104
23149: PUSH
23150: LD_INT 105
23152: PUSH
23153: LD_INT 106
23155: PUSH
23156: LD_INT 107
23158: PUSH
23159: LD_INT 108
23161: PUSH
23162: LD_INT 109
23164: PUSH
23165: LD_INT 110
23167: PUSH
23168: LD_INT 111
23170: PUSH
23171: LD_INT 112
23173: PUSH
23174: LD_INT 113
23176: PUSH
23177: LD_INT 114
23179: PUSH
23180: LD_INT 115
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: ST_TO_ADDR
23204: GO 23207
23206: POP
// end else
23207: GO 23426
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23209: LD_ADDR_VAR 0 1
23213: PUSH
23214: LD_INT 1
23216: PUSH
23217: LD_INT 2
23219: PUSH
23220: LD_INT 3
23222: PUSH
23223: LD_INT 4
23225: PUSH
23226: LD_INT 5
23228: PUSH
23229: LD_INT 6
23231: PUSH
23232: LD_INT 7
23234: PUSH
23235: LD_INT 8
23237: PUSH
23238: LD_INT 9
23240: PUSH
23241: LD_INT 10
23243: PUSH
23244: LD_INT 11
23246: PUSH
23247: LD_INT 12
23249: PUSH
23250: LD_INT 13
23252: PUSH
23253: LD_INT 14
23255: PUSH
23256: LD_INT 15
23258: PUSH
23259: LD_INT 16
23261: PUSH
23262: LD_INT 17
23264: PUSH
23265: LD_INT 18
23267: PUSH
23268: LD_INT 19
23270: PUSH
23271: LD_INT 20
23273: PUSH
23274: LD_INT 21
23276: PUSH
23277: LD_INT 22
23279: PUSH
23280: LD_INT 23
23282: PUSH
23283: LD_INT 24
23285: PUSH
23286: LD_INT 25
23288: PUSH
23289: LD_INT 26
23291: PUSH
23292: LD_INT 27
23294: PUSH
23295: LD_INT 28
23297: PUSH
23298: LD_INT 29
23300: PUSH
23301: LD_INT 30
23303: PUSH
23304: LD_INT 31
23306: PUSH
23307: LD_INT 32
23309: PUSH
23310: LD_INT 33
23312: PUSH
23313: LD_INT 34
23315: PUSH
23316: LD_INT 35
23318: PUSH
23319: LD_INT 36
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 101
23362: PUSH
23363: LD_INT 102
23365: PUSH
23366: LD_INT 103
23368: PUSH
23369: LD_INT 104
23371: PUSH
23372: LD_INT 105
23374: PUSH
23375: LD_INT 106
23377: PUSH
23378: LD_INT 107
23380: PUSH
23381: LD_INT 108
23383: PUSH
23384: LD_INT 109
23386: PUSH
23387: LD_INT 110
23389: PUSH
23390: LD_INT 111
23392: PUSH
23393: LD_INT 112
23395: PUSH
23396: LD_INT 113
23398: PUSH
23399: LD_INT 114
23401: PUSH
23402: LD_INT 115
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: ST_TO_ADDR
// if result then
23426: LD_VAR 0 1
23430: IFFALSE 23719
// begin normal :=  ;
23432: LD_ADDR_VAR 0 3
23436: PUSH
23437: LD_STRING 
23439: ST_TO_ADDR
// hardcore :=  ;
23440: LD_ADDR_VAR 0 4
23444: PUSH
23445: LD_STRING 
23447: ST_TO_ADDR
// for i = 1 to normalCounter do
23448: LD_ADDR_VAR 0 5
23452: PUSH
23453: DOUBLE
23454: LD_INT 1
23456: DEC
23457: ST_TO_ADDR
23458: LD_EXP 81
23462: PUSH
23463: FOR_TO
23464: IFFALSE 23565
// begin tmp := 0 ;
23466: LD_ADDR_VAR 0 2
23470: PUSH
23471: LD_STRING 0
23473: ST_TO_ADDR
// if result [ 1 ] then
23474: LD_VAR 0 1
23478: PUSH
23479: LD_INT 1
23481: ARRAY
23482: IFFALSE 23547
// if result [ 1 ] [ 1 ] = i then
23484: LD_VAR 0 1
23488: PUSH
23489: LD_INT 1
23491: ARRAY
23492: PUSH
23493: LD_INT 1
23495: ARRAY
23496: PUSH
23497: LD_VAR 0 5
23501: EQUAL
23502: IFFALSE 23547
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23504: LD_ADDR_VAR 0 1
23508: PUSH
23509: LD_VAR 0 1
23513: PPUSH
23514: LD_INT 1
23516: PPUSH
23517: LD_VAR 0 1
23521: PUSH
23522: LD_INT 1
23524: ARRAY
23525: PPUSH
23526: LD_INT 1
23528: PPUSH
23529: CALL_OW 3
23533: PPUSH
23534: CALL_OW 1
23538: ST_TO_ADDR
// tmp := 1 ;
23539: LD_ADDR_VAR 0 2
23543: PUSH
23544: LD_STRING 1
23546: ST_TO_ADDR
// end ; normal := normal & tmp ;
23547: LD_ADDR_VAR 0 3
23551: PUSH
23552: LD_VAR 0 3
23556: PUSH
23557: LD_VAR 0 2
23561: STR
23562: ST_TO_ADDR
// end ;
23563: GO 23463
23565: POP
23566: POP
// for i = 1 to hardcoreCounter do
23567: LD_ADDR_VAR 0 5
23571: PUSH
23572: DOUBLE
23573: LD_INT 1
23575: DEC
23576: ST_TO_ADDR
23577: LD_EXP 82
23581: PUSH
23582: FOR_TO
23583: IFFALSE 23688
// begin tmp := 0 ;
23585: LD_ADDR_VAR 0 2
23589: PUSH
23590: LD_STRING 0
23592: ST_TO_ADDR
// if result [ 2 ] then
23593: LD_VAR 0 1
23597: PUSH
23598: LD_INT 2
23600: ARRAY
23601: IFFALSE 23670
// if result [ 2 ] [ 1 ] = 100 + i then
23603: LD_VAR 0 1
23607: PUSH
23608: LD_INT 2
23610: ARRAY
23611: PUSH
23612: LD_INT 1
23614: ARRAY
23615: PUSH
23616: LD_INT 100
23618: PUSH
23619: LD_VAR 0 5
23623: PLUS
23624: EQUAL
23625: IFFALSE 23670
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23627: LD_ADDR_VAR 0 1
23631: PUSH
23632: LD_VAR 0 1
23636: PPUSH
23637: LD_INT 2
23639: PPUSH
23640: LD_VAR 0 1
23644: PUSH
23645: LD_INT 2
23647: ARRAY
23648: PPUSH
23649: LD_INT 1
23651: PPUSH
23652: CALL_OW 3
23656: PPUSH
23657: CALL_OW 1
23661: ST_TO_ADDR
// tmp := 1 ;
23662: LD_ADDR_VAR 0 2
23666: PUSH
23667: LD_STRING 1
23669: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23670: LD_ADDR_VAR 0 4
23674: PUSH
23675: LD_VAR 0 4
23679: PUSH
23680: LD_VAR 0 2
23684: STR
23685: ST_TO_ADDR
// end ;
23686: GO 23582
23688: POP
23689: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23690: LD_STRING getStreamItemsFromMission("
23692: PUSH
23693: LD_VAR 0 3
23697: STR
23698: PUSH
23699: LD_STRING ","
23701: STR
23702: PUSH
23703: LD_VAR 0 4
23707: STR
23708: PUSH
23709: LD_STRING ")
23711: STR
23712: PPUSH
23713: CALL_OW 559
// end else
23717: GO 23726
// ToLua ( getStreamItemsFromMission("","") ) ;
23719: LD_STRING getStreamItemsFromMission("","")
23721: PPUSH
23722: CALL_OW 559
// end ;
23726: LD_VAR 0 1
23730: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23731: LD_EXP 80
23735: PUSH
23736: LD_EXP 85
23740: AND
23741: IFFALSE 23865
23743: GO 23745
23745: DISABLE
23746: LD_INT 0
23748: PPUSH
23749: PPUSH
// begin enable ;
23750: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23751: LD_ADDR_VAR 0 2
23755: PUSH
23756: LD_INT 22
23758: PUSH
23759: LD_OWVAR 2
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 2
23770: PUSH
23771: LD_INT 34
23773: PUSH
23774: LD_INT 7
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 34
23783: PUSH
23784: LD_INT 45
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 34
23793: PUSH
23794: LD_INT 28
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 34
23803: PUSH
23804: LD_INT 47
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PPUSH
23822: CALL_OW 69
23826: ST_TO_ADDR
// if not tmp then
23827: LD_VAR 0 2
23831: NOT
23832: IFFALSE 23836
// exit ;
23834: GO 23865
// for i in tmp do
23836: LD_ADDR_VAR 0 1
23840: PUSH
23841: LD_VAR 0 2
23845: PUSH
23846: FOR_IN
23847: IFFALSE 23863
// begin SetLives ( i , 0 ) ;
23849: LD_VAR 0 1
23853: PPUSH
23854: LD_INT 0
23856: PPUSH
23857: CALL_OW 234
// end ;
23861: GO 23846
23863: POP
23864: POP
// end ;
23865: PPOPN 2
23867: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23868: LD_EXP 80
23872: PUSH
23873: LD_EXP 86
23877: AND
23878: IFFALSE 23962
23880: GO 23882
23882: DISABLE
23883: LD_INT 0
23885: PPUSH
23886: PPUSH
// begin enable ;
23887: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23888: LD_ADDR_VAR 0 2
23892: PUSH
23893: LD_INT 22
23895: PUSH
23896: LD_OWVAR 2
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 32
23907: PUSH
23908: LD_INT 3
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PPUSH
23919: CALL_OW 69
23923: ST_TO_ADDR
// if not tmp then
23924: LD_VAR 0 2
23928: NOT
23929: IFFALSE 23933
// exit ;
23931: GO 23962
// for i in tmp do
23933: LD_ADDR_VAR 0 1
23937: PUSH
23938: LD_VAR 0 2
23942: PUSH
23943: FOR_IN
23944: IFFALSE 23960
// begin SetLives ( i , 0 ) ;
23946: LD_VAR 0 1
23950: PPUSH
23951: LD_INT 0
23953: PPUSH
23954: CALL_OW 234
// end ;
23958: GO 23943
23960: POP
23961: POP
// end ;
23962: PPOPN 2
23964: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23965: LD_EXP 80
23969: PUSH
23970: LD_EXP 83
23974: AND
23975: IFFALSE 24068
23977: GO 23979
23979: DISABLE
23980: LD_INT 0
23982: PPUSH
// begin enable ;
23983: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23984: LD_ADDR_VAR 0 1
23988: PUSH
23989: LD_INT 22
23991: PUSH
23992: LD_OWVAR 2
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 2
24003: PUSH
24004: LD_INT 25
24006: PUSH
24007: LD_INT 5
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 25
24016: PUSH
24017: LD_INT 9
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 25
24026: PUSH
24027: LD_INT 8
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PPUSH
24044: CALL_OW 69
24048: PUSH
24049: FOR_IN
24050: IFFALSE 24066
// begin SetClass ( i , 1 ) ;
24052: LD_VAR 0 1
24056: PPUSH
24057: LD_INT 1
24059: PPUSH
24060: CALL_OW 336
// end ;
24064: GO 24049
24066: POP
24067: POP
// end ;
24068: PPOPN 1
24070: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24071: LD_EXP 80
24075: PUSH
24076: LD_EXP 84
24080: AND
24081: PUSH
24082: LD_OWVAR 65
24086: PUSH
24087: LD_INT 7
24089: LESS
24090: AND
24091: IFFALSE 24105
24093: GO 24095
24095: DISABLE
// begin enable ;
24096: ENABLE
// game_speed := 7 ;
24097: LD_ADDR_OWVAR 65
24101: PUSH
24102: LD_INT 7
24104: ST_TO_ADDR
// end ;
24105: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24106: LD_EXP 80
24110: PUSH
24111: LD_EXP 87
24115: AND
24116: IFFALSE 24318
24118: GO 24120
24120: DISABLE
24121: LD_INT 0
24123: PPUSH
24124: PPUSH
24125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24126: LD_ADDR_VAR 0 3
24130: PUSH
24131: LD_INT 81
24133: PUSH
24134: LD_OWVAR 2
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 21
24145: PUSH
24146: LD_INT 1
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PPUSH
24157: CALL_OW 69
24161: ST_TO_ADDR
// if not tmp then
24162: LD_VAR 0 3
24166: NOT
24167: IFFALSE 24171
// exit ;
24169: GO 24318
// if tmp > 5 then
24171: LD_VAR 0 3
24175: PUSH
24176: LD_INT 5
24178: GREATER
24179: IFFALSE 24191
// k := 5 else
24181: LD_ADDR_VAR 0 2
24185: PUSH
24186: LD_INT 5
24188: ST_TO_ADDR
24189: GO 24201
// k := tmp ;
24191: LD_ADDR_VAR 0 2
24195: PUSH
24196: LD_VAR 0 3
24200: ST_TO_ADDR
// for i := 1 to k do
24201: LD_ADDR_VAR 0 1
24205: PUSH
24206: DOUBLE
24207: LD_INT 1
24209: DEC
24210: ST_TO_ADDR
24211: LD_VAR 0 2
24215: PUSH
24216: FOR_TO
24217: IFFALSE 24316
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24219: LD_VAR 0 3
24223: PUSH
24224: LD_VAR 0 1
24228: ARRAY
24229: PPUSH
24230: LD_VAR 0 1
24234: PUSH
24235: LD_INT 4
24237: MOD
24238: PUSH
24239: LD_INT 1
24241: PLUS
24242: PPUSH
24243: CALL_OW 259
24247: PUSH
24248: LD_INT 10
24250: LESS
24251: IFFALSE 24314
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24253: LD_VAR 0 3
24257: PUSH
24258: LD_VAR 0 1
24262: ARRAY
24263: PPUSH
24264: LD_VAR 0 1
24268: PUSH
24269: LD_INT 4
24271: MOD
24272: PUSH
24273: LD_INT 1
24275: PLUS
24276: PPUSH
24277: LD_VAR 0 3
24281: PUSH
24282: LD_VAR 0 1
24286: ARRAY
24287: PPUSH
24288: LD_VAR 0 1
24292: PUSH
24293: LD_INT 4
24295: MOD
24296: PUSH
24297: LD_INT 1
24299: PLUS
24300: PPUSH
24301: CALL_OW 259
24305: PUSH
24306: LD_INT 1
24308: PLUS
24309: PPUSH
24310: CALL_OW 237
24314: GO 24216
24316: POP
24317: POP
// end ;
24318: PPOPN 3
24320: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24321: LD_EXP 80
24325: PUSH
24326: LD_EXP 88
24330: AND
24331: IFFALSE 24351
24333: GO 24335
24335: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24336: LD_INT 4
24338: PPUSH
24339: LD_OWVAR 2
24343: PPUSH
24344: LD_INT 0
24346: PPUSH
24347: CALL_OW 324
24351: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24352: LD_EXP 80
24356: PUSH
24357: LD_EXP 117
24361: AND
24362: IFFALSE 24382
24364: GO 24366
24366: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24367: LD_INT 19
24369: PPUSH
24370: LD_OWVAR 2
24374: PPUSH
24375: LD_INT 0
24377: PPUSH
24378: CALL_OW 324
24382: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24383: LD_EXP 80
24387: PUSH
24388: LD_EXP 89
24392: AND
24393: IFFALSE 24495
24395: GO 24397
24397: DISABLE
24398: LD_INT 0
24400: PPUSH
24401: PPUSH
// begin enable ;
24402: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24403: LD_ADDR_VAR 0 2
24407: PUSH
24408: LD_INT 22
24410: PUSH
24411: LD_OWVAR 2
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 2
24422: PUSH
24423: LD_INT 34
24425: PUSH
24426: LD_INT 11
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 34
24435: PUSH
24436: LD_INT 30
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: LIST
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PPUSH
24452: CALL_OW 69
24456: ST_TO_ADDR
// if not tmp then
24457: LD_VAR 0 2
24461: NOT
24462: IFFALSE 24466
// exit ;
24464: GO 24495
// for i in tmp do
24466: LD_ADDR_VAR 0 1
24470: PUSH
24471: LD_VAR 0 2
24475: PUSH
24476: FOR_IN
24477: IFFALSE 24493
// begin SetLives ( i , 0 ) ;
24479: LD_VAR 0 1
24483: PPUSH
24484: LD_INT 0
24486: PPUSH
24487: CALL_OW 234
// end ;
24491: GO 24476
24493: POP
24494: POP
// end ;
24495: PPOPN 2
24497: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24498: LD_EXP 80
24502: PUSH
24503: LD_EXP 90
24507: AND
24508: IFFALSE 24528
24510: GO 24512
24512: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24513: LD_INT 32
24515: PPUSH
24516: LD_OWVAR 2
24520: PPUSH
24521: LD_INT 0
24523: PPUSH
24524: CALL_OW 324
24528: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24529: LD_EXP 80
24533: PUSH
24534: LD_EXP 91
24538: AND
24539: IFFALSE 24720
24541: GO 24543
24543: DISABLE
24544: LD_INT 0
24546: PPUSH
24547: PPUSH
24548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24549: LD_ADDR_VAR 0 2
24553: PUSH
24554: LD_INT 22
24556: PUSH
24557: LD_OWVAR 2
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 33
24568: PUSH
24569: LD_INT 3
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PPUSH
24580: CALL_OW 69
24584: ST_TO_ADDR
// if not tmp then
24585: LD_VAR 0 2
24589: NOT
24590: IFFALSE 24594
// exit ;
24592: GO 24720
// side := 0 ;
24594: LD_ADDR_VAR 0 3
24598: PUSH
24599: LD_INT 0
24601: ST_TO_ADDR
// for i := 1 to 8 do
24602: LD_ADDR_VAR 0 1
24606: PUSH
24607: DOUBLE
24608: LD_INT 1
24610: DEC
24611: ST_TO_ADDR
24612: LD_INT 8
24614: PUSH
24615: FOR_TO
24616: IFFALSE 24664
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24618: LD_OWVAR 2
24622: PUSH
24623: LD_VAR 0 1
24627: NONEQUAL
24628: PUSH
24629: LD_OWVAR 2
24633: PPUSH
24634: LD_VAR 0 1
24638: PPUSH
24639: CALL_OW 81
24643: PUSH
24644: LD_INT 2
24646: EQUAL
24647: AND
24648: IFFALSE 24662
// begin side := i ;
24650: LD_ADDR_VAR 0 3
24654: PUSH
24655: LD_VAR 0 1
24659: ST_TO_ADDR
// break ;
24660: GO 24664
// end ;
24662: GO 24615
24664: POP
24665: POP
// if not side then
24666: LD_VAR 0 3
24670: NOT
24671: IFFALSE 24675
// exit ;
24673: GO 24720
// for i := 1 to tmp do
24675: LD_ADDR_VAR 0 1
24679: PUSH
24680: DOUBLE
24681: LD_INT 1
24683: DEC
24684: ST_TO_ADDR
24685: LD_VAR 0 2
24689: PUSH
24690: FOR_TO
24691: IFFALSE 24718
// if Prob ( 60 ) then
24693: LD_INT 60
24695: PPUSH
24696: CALL_OW 13
24700: IFFALSE 24716
// SetSide ( i , side ) ;
24702: LD_VAR 0 1
24706: PPUSH
24707: LD_VAR 0 3
24711: PPUSH
24712: CALL_OW 235
24716: GO 24690
24718: POP
24719: POP
// end ;
24720: PPOPN 3
24722: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24723: LD_EXP 80
24727: PUSH
24728: LD_EXP 93
24732: AND
24733: IFFALSE 24852
24735: GO 24737
24737: DISABLE
24738: LD_INT 0
24740: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24741: LD_ADDR_VAR 0 1
24745: PUSH
24746: LD_INT 22
24748: PUSH
24749: LD_OWVAR 2
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 21
24760: PUSH
24761: LD_INT 1
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 3
24770: PUSH
24771: LD_INT 23
24773: PUSH
24774: LD_INT 0
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: LIST
24789: PPUSH
24790: CALL_OW 69
24794: PUSH
24795: FOR_IN
24796: IFFALSE 24850
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24798: LD_VAR 0 1
24802: PPUSH
24803: CALL_OW 257
24807: PUSH
24808: LD_INT 1
24810: PUSH
24811: LD_INT 2
24813: PUSH
24814: LD_INT 3
24816: PUSH
24817: LD_INT 4
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: IN
24826: IFFALSE 24848
// SetClass ( un , rand ( 1 , 4 ) ) ;
24828: LD_VAR 0 1
24832: PPUSH
24833: LD_INT 1
24835: PPUSH
24836: LD_INT 4
24838: PPUSH
24839: CALL_OW 12
24843: PPUSH
24844: CALL_OW 336
24848: GO 24795
24850: POP
24851: POP
// end ;
24852: PPOPN 1
24854: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24855: LD_EXP 80
24859: PUSH
24860: LD_EXP 92
24864: AND
24865: IFFALSE 24944
24867: GO 24869
24869: DISABLE
24870: LD_INT 0
24872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24873: LD_ADDR_VAR 0 1
24877: PUSH
24878: LD_INT 22
24880: PUSH
24881: LD_OWVAR 2
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 21
24892: PUSH
24893: LD_INT 3
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PPUSH
24904: CALL_OW 69
24908: ST_TO_ADDR
// if not tmp then
24909: LD_VAR 0 1
24913: NOT
24914: IFFALSE 24918
// exit ;
24916: GO 24944
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24918: LD_VAR 0 1
24922: PUSH
24923: LD_INT 1
24925: PPUSH
24926: LD_VAR 0 1
24930: PPUSH
24931: CALL_OW 12
24935: ARRAY
24936: PPUSH
24937: LD_INT 100
24939: PPUSH
24940: CALL_OW 234
// end ;
24944: PPOPN 1
24946: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24947: LD_EXP 80
24951: PUSH
24952: LD_EXP 94
24956: AND
24957: IFFALSE 25055
24959: GO 24961
24961: DISABLE
24962: LD_INT 0
24964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24965: LD_ADDR_VAR 0 1
24969: PUSH
24970: LD_INT 22
24972: PUSH
24973: LD_OWVAR 2
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 21
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PPUSH
24996: CALL_OW 69
25000: ST_TO_ADDR
// if not tmp then
25001: LD_VAR 0 1
25005: NOT
25006: IFFALSE 25010
// exit ;
25008: GO 25055
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25010: LD_VAR 0 1
25014: PUSH
25015: LD_INT 1
25017: PPUSH
25018: LD_VAR 0 1
25022: PPUSH
25023: CALL_OW 12
25027: ARRAY
25028: PPUSH
25029: LD_INT 1
25031: PPUSH
25032: LD_INT 4
25034: PPUSH
25035: CALL_OW 12
25039: PPUSH
25040: LD_INT 3000
25042: PPUSH
25043: LD_INT 9000
25045: PPUSH
25046: CALL_OW 12
25050: PPUSH
25051: CALL_OW 492
// end ;
25055: PPOPN 1
25057: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25058: LD_EXP 80
25062: PUSH
25063: LD_EXP 95
25067: AND
25068: IFFALSE 25088
25070: GO 25072
25072: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25073: LD_INT 1
25075: PPUSH
25076: LD_OWVAR 2
25080: PPUSH
25081: LD_INT 0
25083: PPUSH
25084: CALL_OW 324
25088: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25089: LD_EXP 80
25093: PUSH
25094: LD_EXP 96
25098: AND
25099: IFFALSE 25182
25101: GO 25103
25103: DISABLE
25104: LD_INT 0
25106: PPUSH
25107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25108: LD_ADDR_VAR 0 2
25112: PUSH
25113: LD_INT 22
25115: PUSH
25116: LD_OWVAR 2
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 21
25127: PUSH
25128: LD_INT 3
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PPUSH
25139: CALL_OW 69
25143: ST_TO_ADDR
// if not tmp then
25144: LD_VAR 0 2
25148: NOT
25149: IFFALSE 25153
// exit ;
25151: GO 25182
// for i in tmp do
25153: LD_ADDR_VAR 0 1
25157: PUSH
25158: LD_VAR 0 2
25162: PUSH
25163: FOR_IN
25164: IFFALSE 25180
// SetBLevel ( i , 10 ) ;
25166: LD_VAR 0 1
25170: PPUSH
25171: LD_INT 10
25173: PPUSH
25174: CALL_OW 241
25178: GO 25163
25180: POP
25181: POP
// end ;
25182: PPOPN 2
25184: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25185: LD_EXP 80
25189: PUSH
25190: LD_EXP 97
25194: AND
25195: IFFALSE 25306
25197: GO 25199
25199: DISABLE
25200: LD_INT 0
25202: PPUSH
25203: PPUSH
25204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25205: LD_ADDR_VAR 0 3
25209: PUSH
25210: LD_INT 22
25212: PUSH
25213: LD_OWVAR 2
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 25
25224: PUSH
25225: LD_INT 1
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PPUSH
25236: CALL_OW 69
25240: ST_TO_ADDR
// if not tmp then
25241: LD_VAR 0 3
25245: NOT
25246: IFFALSE 25250
// exit ;
25248: GO 25306
// un := tmp [ rand ( 1 , tmp ) ] ;
25250: LD_ADDR_VAR 0 2
25254: PUSH
25255: LD_VAR 0 3
25259: PUSH
25260: LD_INT 1
25262: PPUSH
25263: LD_VAR 0 3
25267: PPUSH
25268: CALL_OW 12
25272: ARRAY
25273: ST_TO_ADDR
// if Crawls ( un ) then
25274: LD_VAR 0 2
25278: PPUSH
25279: CALL_OW 318
25283: IFFALSE 25294
// ComWalk ( un ) ;
25285: LD_VAR 0 2
25289: PPUSH
25290: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25294: LD_VAR 0 2
25298: PPUSH
25299: LD_INT 5
25301: PPUSH
25302: CALL_OW 336
// end ;
25306: PPOPN 3
25308: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25309: LD_EXP 80
25313: PUSH
25314: LD_EXP 98
25318: AND
25319: PUSH
25320: LD_OWVAR 67
25324: PUSH
25325: LD_INT 3
25327: LESS
25328: AND
25329: IFFALSE 25348
25331: GO 25333
25333: DISABLE
// Difficulty := Difficulty + 1 ;
25334: LD_ADDR_OWVAR 67
25338: PUSH
25339: LD_OWVAR 67
25343: PUSH
25344: LD_INT 1
25346: PLUS
25347: ST_TO_ADDR
25348: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25349: LD_EXP 80
25353: PUSH
25354: LD_EXP 99
25358: AND
25359: IFFALSE 25462
25361: GO 25363
25363: DISABLE
25364: LD_INT 0
25366: PPUSH
// begin for i := 1 to 5 do
25367: LD_ADDR_VAR 0 1
25371: PUSH
25372: DOUBLE
25373: LD_INT 1
25375: DEC
25376: ST_TO_ADDR
25377: LD_INT 5
25379: PUSH
25380: FOR_TO
25381: IFFALSE 25460
// begin uc_nation := nation_nature ;
25383: LD_ADDR_OWVAR 21
25387: PUSH
25388: LD_INT 0
25390: ST_TO_ADDR
// uc_side := 0 ;
25391: LD_ADDR_OWVAR 20
25395: PUSH
25396: LD_INT 0
25398: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25399: LD_ADDR_OWVAR 29
25403: PUSH
25404: LD_INT 12
25406: PUSH
25407: LD_INT 12
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: ST_TO_ADDR
// hc_agressivity := 20 ;
25414: LD_ADDR_OWVAR 35
25418: PUSH
25419: LD_INT 20
25421: ST_TO_ADDR
// hc_class := class_tiger ;
25422: LD_ADDR_OWVAR 28
25426: PUSH
25427: LD_INT 14
25429: ST_TO_ADDR
// hc_gallery :=  ;
25430: LD_ADDR_OWVAR 33
25434: PUSH
25435: LD_STRING 
25437: ST_TO_ADDR
// hc_name :=  ;
25438: LD_ADDR_OWVAR 26
25442: PUSH
25443: LD_STRING 
25445: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25446: CALL_OW 44
25450: PPUSH
25451: LD_INT 0
25453: PPUSH
25454: CALL_OW 51
// end ;
25458: GO 25380
25460: POP
25461: POP
// end ;
25462: PPOPN 1
25464: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25465: LD_EXP 80
25469: PUSH
25470: LD_EXP 100
25474: AND
25475: IFFALSE 25484
25477: GO 25479
25479: DISABLE
// StreamSibBomb ;
25480: CALL 25485 0 0
25484: END
// export function StreamSibBomb ; var i , x , y ; begin
25485: LD_INT 0
25487: PPUSH
25488: PPUSH
25489: PPUSH
25490: PPUSH
// result := false ;
25491: LD_ADDR_VAR 0 1
25495: PUSH
25496: LD_INT 0
25498: ST_TO_ADDR
// for i := 1 to 16 do
25499: LD_ADDR_VAR 0 2
25503: PUSH
25504: DOUBLE
25505: LD_INT 1
25507: DEC
25508: ST_TO_ADDR
25509: LD_INT 16
25511: PUSH
25512: FOR_TO
25513: IFFALSE 25712
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25515: LD_ADDR_VAR 0 3
25519: PUSH
25520: LD_INT 10
25522: PUSH
25523: LD_INT 20
25525: PUSH
25526: LD_INT 30
25528: PUSH
25529: LD_INT 40
25531: PUSH
25532: LD_INT 50
25534: PUSH
25535: LD_INT 60
25537: PUSH
25538: LD_INT 70
25540: PUSH
25541: LD_INT 80
25543: PUSH
25544: LD_INT 90
25546: PUSH
25547: LD_INT 100
25549: PUSH
25550: LD_INT 110
25552: PUSH
25553: LD_INT 120
25555: PUSH
25556: LD_INT 130
25558: PUSH
25559: LD_INT 140
25561: PUSH
25562: LD_INT 150
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 1
25584: PPUSH
25585: LD_INT 15
25587: PPUSH
25588: CALL_OW 12
25592: ARRAY
25593: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25594: LD_ADDR_VAR 0 4
25598: PUSH
25599: LD_INT 10
25601: PUSH
25602: LD_INT 20
25604: PUSH
25605: LD_INT 30
25607: PUSH
25608: LD_INT 40
25610: PUSH
25611: LD_INT 50
25613: PUSH
25614: LD_INT 60
25616: PUSH
25617: LD_INT 70
25619: PUSH
25620: LD_INT 80
25622: PUSH
25623: LD_INT 90
25625: PUSH
25626: LD_INT 100
25628: PUSH
25629: LD_INT 110
25631: PUSH
25632: LD_INT 120
25634: PUSH
25635: LD_INT 130
25637: PUSH
25638: LD_INT 140
25640: PUSH
25641: LD_INT 150
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 1
25663: PPUSH
25664: LD_INT 15
25666: PPUSH
25667: CALL_OW 12
25671: ARRAY
25672: ST_TO_ADDR
// if ValidHex ( x , y ) then
25673: LD_VAR 0 3
25677: PPUSH
25678: LD_VAR 0 4
25682: PPUSH
25683: CALL_OW 488
25687: IFFALSE 25710
// begin result := [ x , y ] ;
25689: LD_ADDR_VAR 0 1
25693: PUSH
25694: LD_VAR 0 3
25698: PUSH
25699: LD_VAR 0 4
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: ST_TO_ADDR
// break ;
25708: GO 25712
// end ; end ;
25710: GO 25512
25712: POP
25713: POP
// if result then
25714: LD_VAR 0 1
25718: IFFALSE 25778
// begin ToLua ( playSibBomb() ) ;
25720: LD_STRING playSibBomb()
25722: PPUSH
25723: CALL_OW 559
// wait ( 0 0$14 ) ;
25727: LD_INT 490
25729: PPUSH
25730: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25734: LD_VAR 0 1
25738: PUSH
25739: LD_INT 1
25741: ARRAY
25742: PPUSH
25743: LD_VAR 0 1
25747: PUSH
25748: LD_INT 2
25750: ARRAY
25751: PPUSH
25752: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25756: LD_VAR 0 1
25760: PUSH
25761: LD_INT 1
25763: ARRAY
25764: PPUSH
25765: LD_VAR 0 1
25769: PUSH
25770: LD_INT 2
25772: ARRAY
25773: PPUSH
25774: CALL_OW 429
// end ; end ;
25778: LD_VAR 0 1
25782: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25783: LD_EXP 80
25787: PUSH
25788: LD_EXP 102
25792: AND
25793: IFFALSE 25805
25795: GO 25797
25797: DISABLE
// YouLost (  ) ;
25798: LD_STRING 
25800: PPUSH
25801: CALL_OW 104
25805: END
// every 0 0$1 trigger StreamModeActive and sFog do
25806: LD_EXP 80
25810: PUSH
25811: LD_EXP 101
25815: AND
25816: IFFALSE 25830
25818: GO 25820
25820: DISABLE
// FogOff ( your_side ) ;
25821: LD_OWVAR 2
25825: PPUSH
25826: CALL_OW 344
25830: END
// every 0 0$1 trigger StreamModeActive and sSun do
25831: LD_EXP 80
25835: PUSH
25836: LD_EXP 103
25840: AND
25841: IFFALSE 25869
25843: GO 25845
25845: DISABLE
// begin solar_recharge_percent := 0 ;
25846: LD_ADDR_OWVAR 79
25850: PUSH
25851: LD_INT 0
25853: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25854: LD_INT 10500
25856: PPUSH
25857: CALL_OW 67
// solar_recharge_percent := 100 ;
25861: LD_ADDR_OWVAR 79
25865: PUSH
25866: LD_INT 100
25868: ST_TO_ADDR
// end ;
25869: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25870: LD_EXP 80
25874: PUSH
25875: LD_EXP 104
25879: AND
25880: IFFALSE 26119
25882: GO 25884
25884: DISABLE
25885: LD_INT 0
25887: PPUSH
25888: PPUSH
25889: PPUSH
// begin tmp := [ ] ;
25890: LD_ADDR_VAR 0 3
25894: PUSH
25895: EMPTY
25896: ST_TO_ADDR
// for i := 1 to 6 do
25897: LD_ADDR_VAR 0 1
25901: PUSH
25902: DOUBLE
25903: LD_INT 1
25905: DEC
25906: ST_TO_ADDR
25907: LD_INT 6
25909: PUSH
25910: FOR_TO
25911: IFFALSE 26016
// begin uc_nation := nation_nature ;
25913: LD_ADDR_OWVAR 21
25917: PUSH
25918: LD_INT 0
25920: ST_TO_ADDR
// uc_side := 0 ;
25921: LD_ADDR_OWVAR 20
25925: PUSH
25926: LD_INT 0
25928: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25929: LD_ADDR_OWVAR 29
25933: PUSH
25934: LD_INT 12
25936: PUSH
25937: LD_INT 12
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: ST_TO_ADDR
// hc_agressivity := 20 ;
25944: LD_ADDR_OWVAR 35
25948: PUSH
25949: LD_INT 20
25951: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25952: LD_ADDR_OWVAR 28
25956: PUSH
25957: LD_INT 17
25959: ST_TO_ADDR
// hc_gallery :=  ;
25960: LD_ADDR_OWVAR 33
25964: PUSH
25965: LD_STRING 
25967: ST_TO_ADDR
// hc_name :=  ;
25968: LD_ADDR_OWVAR 26
25972: PUSH
25973: LD_STRING 
25975: ST_TO_ADDR
// un := CreateHuman ;
25976: LD_ADDR_VAR 0 2
25980: PUSH
25981: CALL_OW 44
25985: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25986: LD_VAR 0 2
25990: PPUSH
25991: LD_INT 1
25993: PPUSH
25994: CALL_OW 51
// tmp := tmp ^ un ;
25998: LD_ADDR_VAR 0 3
26002: PUSH
26003: LD_VAR 0 3
26007: PUSH
26008: LD_VAR 0 2
26012: ADD
26013: ST_TO_ADDR
// end ;
26014: GO 25910
26016: POP
26017: POP
// repeat wait ( 0 0$1 ) ;
26018: LD_INT 35
26020: PPUSH
26021: CALL_OW 67
// for un in tmp do
26025: LD_ADDR_VAR 0 2
26029: PUSH
26030: LD_VAR 0 3
26034: PUSH
26035: FOR_IN
26036: IFFALSE 26110
// begin if IsDead ( un ) then
26038: LD_VAR 0 2
26042: PPUSH
26043: CALL_OW 301
26047: IFFALSE 26067
// begin tmp := tmp diff un ;
26049: LD_ADDR_VAR 0 3
26053: PUSH
26054: LD_VAR 0 3
26058: PUSH
26059: LD_VAR 0 2
26063: DIFF
26064: ST_TO_ADDR
// continue ;
26065: GO 26035
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26067: LD_VAR 0 2
26071: PPUSH
26072: LD_INT 3
26074: PUSH
26075: LD_INT 22
26077: PUSH
26078: LD_INT 0
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PPUSH
26089: CALL_OW 69
26093: PPUSH
26094: LD_VAR 0 2
26098: PPUSH
26099: CALL_OW 74
26103: PPUSH
26104: CALL_OW 115
// end ;
26108: GO 26035
26110: POP
26111: POP
// until not tmp ;
26112: LD_VAR 0 3
26116: NOT
26117: IFFALSE 26018
// end ;
26119: PPOPN 3
26121: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26122: LD_EXP 80
26126: PUSH
26127: LD_EXP 105
26131: AND
26132: IFFALSE 26186
26134: GO 26136
26136: DISABLE
// begin ToLua ( displayTroll(); ) ;
26137: LD_STRING displayTroll();
26139: PPUSH
26140: CALL_OW 559
// wait ( 3 3$00 ) ;
26144: LD_INT 6300
26146: PPUSH
26147: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26151: LD_STRING hideTroll();
26153: PPUSH
26154: CALL_OW 559
// wait ( 1 1$00 ) ;
26158: LD_INT 2100
26160: PPUSH
26161: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26165: LD_STRING displayTroll();
26167: PPUSH
26168: CALL_OW 559
// wait ( 1 1$00 ) ;
26172: LD_INT 2100
26174: PPUSH
26175: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26179: LD_STRING hideTroll();
26181: PPUSH
26182: CALL_OW 559
// end ;
26186: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26187: LD_EXP 80
26191: PUSH
26192: LD_EXP 106
26196: AND
26197: IFFALSE 26260
26199: GO 26201
26201: DISABLE
26202: LD_INT 0
26204: PPUSH
// begin p := 0 ;
26205: LD_ADDR_VAR 0 1
26209: PUSH
26210: LD_INT 0
26212: ST_TO_ADDR
// repeat game_speed := 1 ;
26213: LD_ADDR_OWVAR 65
26217: PUSH
26218: LD_INT 1
26220: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26221: LD_INT 35
26223: PPUSH
26224: CALL_OW 67
// p := p + 1 ;
26228: LD_ADDR_VAR 0 1
26232: PUSH
26233: LD_VAR 0 1
26237: PUSH
26238: LD_INT 1
26240: PLUS
26241: ST_TO_ADDR
// until p >= 60 ;
26242: LD_VAR 0 1
26246: PUSH
26247: LD_INT 60
26249: GREATEREQUAL
26250: IFFALSE 26213
// game_speed := 4 ;
26252: LD_ADDR_OWVAR 65
26256: PUSH
26257: LD_INT 4
26259: ST_TO_ADDR
// end ;
26260: PPOPN 1
26262: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26263: LD_EXP 80
26267: PUSH
26268: LD_EXP 107
26272: AND
26273: IFFALSE 26419
26275: GO 26277
26277: DISABLE
26278: LD_INT 0
26280: PPUSH
26281: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26282: LD_ADDR_VAR 0 1
26286: PUSH
26287: LD_INT 22
26289: PUSH
26290: LD_OWVAR 2
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 2
26301: PUSH
26302: LD_INT 30
26304: PUSH
26305: LD_INT 0
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 30
26314: PUSH
26315: LD_INT 1
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: LIST
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PPUSH
26331: CALL_OW 69
26335: ST_TO_ADDR
// if not depot then
26336: LD_VAR 0 1
26340: NOT
26341: IFFALSE 26345
// exit ;
26343: GO 26419
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26345: LD_ADDR_VAR 0 2
26349: PUSH
26350: LD_VAR 0 1
26354: PUSH
26355: LD_INT 1
26357: PPUSH
26358: LD_VAR 0 1
26362: PPUSH
26363: CALL_OW 12
26367: ARRAY
26368: PPUSH
26369: CALL_OW 274
26373: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26374: LD_VAR 0 2
26378: PPUSH
26379: LD_INT 1
26381: PPUSH
26382: LD_INT 0
26384: PPUSH
26385: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26389: LD_VAR 0 2
26393: PPUSH
26394: LD_INT 2
26396: PPUSH
26397: LD_INT 0
26399: PPUSH
26400: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26404: LD_VAR 0 2
26408: PPUSH
26409: LD_INT 3
26411: PPUSH
26412: LD_INT 0
26414: PPUSH
26415: CALL_OW 277
// end ;
26419: PPOPN 2
26421: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26422: LD_EXP 80
26426: PUSH
26427: LD_EXP 108
26431: AND
26432: IFFALSE 26529
26434: GO 26436
26436: DISABLE
26437: LD_INT 0
26439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26440: LD_ADDR_VAR 0 1
26444: PUSH
26445: LD_INT 22
26447: PUSH
26448: LD_OWVAR 2
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 21
26459: PUSH
26460: LD_INT 1
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 3
26469: PUSH
26470: LD_INT 23
26472: PUSH
26473: LD_INT 0
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: LIST
26488: PPUSH
26489: CALL_OW 69
26493: ST_TO_ADDR
// if not tmp then
26494: LD_VAR 0 1
26498: NOT
26499: IFFALSE 26503
// exit ;
26501: GO 26529
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26503: LD_VAR 0 1
26507: PUSH
26508: LD_INT 1
26510: PPUSH
26511: LD_VAR 0 1
26515: PPUSH
26516: CALL_OW 12
26520: ARRAY
26521: PPUSH
26522: LD_INT 200
26524: PPUSH
26525: CALL_OW 234
// end ;
26529: PPOPN 1
26531: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26532: LD_EXP 80
26536: PUSH
26537: LD_EXP 109
26541: AND
26542: IFFALSE 26621
26544: GO 26546
26546: DISABLE
26547: LD_INT 0
26549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26550: LD_ADDR_VAR 0 1
26554: PUSH
26555: LD_INT 22
26557: PUSH
26558: LD_OWVAR 2
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 21
26569: PUSH
26570: LD_INT 2
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PPUSH
26581: CALL_OW 69
26585: ST_TO_ADDR
// if not tmp then
26586: LD_VAR 0 1
26590: NOT
26591: IFFALSE 26595
// exit ;
26593: GO 26621
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26595: LD_VAR 0 1
26599: PUSH
26600: LD_INT 1
26602: PPUSH
26603: LD_VAR 0 1
26607: PPUSH
26608: CALL_OW 12
26612: ARRAY
26613: PPUSH
26614: LD_INT 60
26616: PPUSH
26617: CALL_OW 234
// end ;
26621: PPOPN 1
26623: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26624: LD_EXP 80
26628: PUSH
26629: LD_EXP 110
26633: AND
26634: IFFALSE 26733
26636: GO 26638
26638: DISABLE
26639: LD_INT 0
26641: PPUSH
26642: PPUSH
// begin enable ;
26643: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26644: LD_ADDR_VAR 0 1
26648: PUSH
26649: LD_INT 22
26651: PUSH
26652: LD_OWVAR 2
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 61
26663: PUSH
26664: EMPTY
26665: LIST
26666: PUSH
26667: LD_INT 33
26669: PUSH
26670: LD_INT 2
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: LIST
26681: PPUSH
26682: CALL_OW 69
26686: ST_TO_ADDR
// if not tmp then
26687: LD_VAR 0 1
26691: NOT
26692: IFFALSE 26696
// exit ;
26694: GO 26733
// for i in tmp do
26696: LD_ADDR_VAR 0 2
26700: PUSH
26701: LD_VAR 0 1
26705: PUSH
26706: FOR_IN
26707: IFFALSE 26731
// if IsControledBy ( i ) then
26709: LD_VAR 0 2
26713: PPUSH
26714: CALL_OW 312
26718: IFFALSE 26729
// ComUnlink ( i ) ;
26720: LD_VAR 0 2
26724: PPUSH
26725: CALL_OW 136
26729: GO 26706
26731: POP
26732: POP
// end ;
26733: PPOPN 2
26735: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26736: LD_EXP 80
26740: PUSH
26741: LD_EXP 111
26745: AND
26746: IFFALSE 26886
26748: GO 26750
26750: DISABLE
26751: LD_INT 0
26753: PPUSH
26754: PPUSH
// begin ToLua ( displayPowell(); ) ;
26755: LD_STRING displayPowell();
26757: PPUSH
26758: CALL_OW 559
// uc_side := 0 ;
26762: LD_ADDR_OWVAR 20
26766: PUSH
26767: LD_INT 0
26769: ST_TO_ADDR
// uc_nation := 2 ;
26770: LD_ADDR_OWVAR 21
26774: PUSH
26775: LD_INT 2
26777: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26778: LD_ADDR_OWVAR 37
26782: PUSH
26783: LD_INT 14
26785: ST_TO_ADDR
// vc_engine := engine_siberite ;
26786: LD_ADDR_OWVAR 39
26790: PUSH
26791: LD_INT 3
26793: ST_TO_ADDR
// vc_control := control_apeman ;
26794: LD_ADDR_OWVAR 38
26798: PUSH
26799: LD_INT 5
26801: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26802: LD_ADDR_OWVAR 40
26806: PUSH
26807: LD_INT 29
26809: ST_TO_ADDR
// un := CreateVehicle ;
26810: LD_ADDR_VAR 0 2
26814: PUSH
26815: CALL_OW 45
26819: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26820: LD_VAR 0 2
26824: PPUSH
26825: LD_INT 1
26827: PPUSH
26828: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26832: LD_INT 35
26834: PPUSH
26835: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26839: LD_VAR 0 2
26843: PPUSH
26844: LD_INT 22
26846: PUSH
26847: LD_OWVAR 2
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PPUSH
26856: CALL_OW 69
26860: PPUSH
26861: LD_VAR 0 2
26865: PPUSH
26866: CALL_OW 74
26870: PPUSH
26871: CALL_OW 115
// until IsDead ( un ) ;
26875: LD_VAR 0 2
26879: PPUSH
26880: CALL_OW 301
26884: IFFALSE 26832
// end ;
26886: PPOPN 2
26888: END
// every 0 0$1 trigger StreamModeActive and sStu do
26889: LD_EXP 80
26893: PUSH
26894: LD_EXP 119
26898: AND
26899: IFFALSE 26915
26901: GO 26903
26903: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26904: LD_STRING displayStucuk();
26906: PPUSH
26907: CALL_OW 559
// ResetFog ;
26911: CALL_OW 335
// end ;
26915: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26916: LD_EXP 80
26920: PUSH
26921: LD_EXP 112
26925: AND
26926: IFFALSE 27067
26928: GO 26930
26930: DISABLE
26931: LD_INT 0
26933: PPUSH
26934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26935: LD_ADDR_VAR 0 2
26939: PUSH
26940: LD_INT 22
26942: PUSH
26943: LD_OWVAR 2
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 21
26954: PUSH
26955: LD_INT 1
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PPUSH
26966: CALL_OW 69
26970: ST_TO_ADDR
// if not tmp then
26971: LD_VAR 0 2
26975: NOT
26976: IFFALSE 26980
// exit ;
26978: GO 27067
// un := tmp [ rand ( 1 , tmp ) ] ;
26980: LD_ADDR_VAR 0 1
26984: PUSH
26985: LD_VAR 0 2
26989: PUSH
26990: LD_INT 1
26992: PPUSH
26993: LD_VAR 0 2
26997: PPUSH
26998: CALL_OW 12
27002: ARRAY
27003: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27004: LD_VAR 0 1
27008: PPUSH
27009: LD_INT 0
27011: PPUSH
27012: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27016: LD_VAR 0 1
27020: PPUSH
27021: LD_OWVAR 3
27025: PUSH
27026: LD_VAR 0 1
27030: DIFF
27031: PPUSH
27032: LD_VAR 0 1
27036: PPUSH
27037: CALL_OW 74
27041: PPUSH
27042: CALL_OW 115
// wait ( 0 0$20 ) ;
27046: LD_INT 700
27048: PPUSH
27049: CALL_OW 67
// SetSide ( un , your_side ) ;
27053: LD_VAR 0 1
27057: PPUSH
27058: LD_OWVAR 2
27062: PPUSH
27063: CALL_OW 235
// end ;
27067: PPOPN 2
27069: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27070: LD_EXP 80
27074: PUSH
27075: LD_EXP 113
27079: AND
27080: IFFALSE 27186
27082: GO 27084
27084: DISABLE
27085: LD_INT 0
27087: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27088: LD_ADDR_VAR 0 1
27092: PUSH
27093: LD_INT 22
27095: PUSH
27096: LD_OWVAR 2
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 2
27107: PUSH
27108: LD_INT 30
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 30
27120: PUSH
27121: LD_INT 1
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: LIST
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PPUSH
27137: CALL_OW 69
27141: ST_TO_ADDR
// if not depot then
27142: LD_VAR 0 1
27146: NOT
27147: IFFALSE 27151
// exit ;
27149: GO 27186
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27151: LD_VAR 0 1
27155: PUSH
27156: LD_INT 1
27158: ARRAY
27159: PPUSH
27160: CALL_OW 250
27164: PPUSH
27165: LD_VAR 0 1
27169: PUSH
27170: LD_INT 1
27172: ARRAY
27173: PPUSH
27174: CALL_OW 251
27178: PPUSH
27179: LD_INT 70
27181: PPUSH
27182: CALL_OW 495
// end ;
27186: PPOPN 1
27188: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27189: LD_EXP 80
27193: PUSH
27194: LD_EXP 114
27198: AND
27199: IFFALSE 27410
27201: GO 27203
27203: DISABLE
27204: LD_INT 0
27206: PPUSH
27207: PPUSH
27208: PPUSH
27209: PPUSH
27210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27211: LD_ADDR_VAR 0 5
27215: PUSH
27216: LD_INT 22
27218: PUSH
27219: LD_OWVAR 2
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 21
27230: PUSH
27231: LD_INT 1
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PPUSH
27242: CALL_OW 69
27246: ST_TO_ADDR
// if not tmp then
27247: LD_VAR 0 5
27251: NOT
27252: IFFALSE 27256
// exit ;
27254: GO 27410
// for i in tmp do
27256: LD_ADDR_VAR 0 1
27260: PUSH
27261: LD_VAR 0 5
27265: PUSH
27266: FOR_IN
27267: IFFALSE 27408
// begin d := rand ( 0 , 5 ) ;
27269: LD_ADDR_VAR 0 4
27273: PUSH
27274: LD_INT 0
27276: PPUSH
27277: LD_INT 5
27279: PPUSH
27280: CALL_OW 12
27284: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27285: LD_ADDR_VAR 0 2
27289: PUSH
27290: LD_VAR 0 1
27294: PPUSH
27295: CALL_OW 250
27299: PPUSH
27300: LD_VAR 0 4
27304: PPUSH
27305: LD_INT 3
27307: PPUSH
27308: LD_INT 12
27310: PPUSH
27311: CALL_OW 12
27315: PPUSH
27316: CALL_OW 272
27320: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27321: LD_ADDR_VAR 0 3
27325: PUSH
27326: LD_VAR 0 1
27330: PPUSH
27331: CALL_OW 251
27335: PPUSH
27336: LD_VAR 0 4
27340: PPUSH
27341: LD_INT 3
27343: PPUSH
27344: LD_INT 12
27346: PPUSH
27347: CALL_OW 12
27351: PPUSH
27352: CALL_OW 273
27356: ST_TO_ADDR
// if ValidHex ( x , y ) then
27357: LD_VAR 0 2
27361: PPUSH
27362: LD_VAR 0 3
27366: PPUSH
27367: CALL_OW 488
27371: IFFALSE 27406
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27373: LD_VAR 0 1
27377: PPUSH
27378: LD_VAR 0 2
27382: PPUSH
27383: LD_VAR 0 3
27387: PPUSH
27388: LD_INT 3
27390: PPUSH
27391: LD_INT 6
27393: PPUSH
27394: CALL_OW 12
27398: PPUSH
27399: LD_INT 1
27401: PPUSH
27402: CALL_OW 483
// end ;
27406: GO 27266
27408: POP
27409: POP
// end ;
27410: PPOPN 5
27412: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27413: LD_EXP 80
27417: PUSH
27418: LD_EXP 115
27422: AND
27423: IFFALSE 27517
27425: GO 27427
27427: DISABLE
27428: LD_INT 0
27430: PPUSH
27431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27432: LD_ADDR_VAR 0 2
27436: PUSH
27437: LD_INT 22
27439: PUSH
27440: LD_OWVAR 2
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 32
27451: PUSH
27452: LD_INT 1
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 21
27461: PUSH
27462: LD_INT 2
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: LIST
27473: PPUSH
27474: CALL_OW 69
27478: ST_TO_ADDR
// if not tmp then
27479: LD_VAR 0 2
27483: NOT
27484: IFFALSE 27488
// exit ;
27486: GO 27517
// for i in tmp do
27488: LD_ADDR_VAR 0 1
27492: PUSH
27493: LD_VAR 0 2
27497: PUSH
27498: FOR_IN
27499: IFFALSE 27515
// SetFuel ( i , 0 ) ;
27501: LD_VAR 0 1
27505: PPUSH
27506: LD_INT 0
27508: PPUSH
27509: CALL_OW 240
27513: GO 27498
27515: POP
27516: POP
// end ;
27517: PPOPN 2
27519: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27520: LD_EXP 80
27524: PUSH
27525: LD_EXP 116
27529: AND
27530: IFFALSE 27596
27532: GO 27534
27534: DISABLE
27535: LD_INT 0
27537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27538: LD_ADDR_VAR 0 1
27542: PUSH
27543: LD_INT 22
27545: PUSH
27546: LD_OWVAR 2
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 30
27557: PUSH
27558: LD_INT 29
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PPUSH
27569: CALL_OW 69
27573: ST_TO_ADDR
// if not tmp then
27574: LD_VAR 0 1
27578: NOT
27579: IFFALSE 27583
// exit ;
27581: GO 27596
// DestroyUnit ( tmp [ 1 ] ) ;
27583: LD_VAR 0 1
27587: PUSH
27588: LD_INT 1
27590: ARRAY
27591: PPUSH
27592: CALL_OW 65
// end ;
27596: PPOPN 1
27598: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27599: LD_EXP 80
27603: PUSH
27604: LD_EXP 118
27608: AND
27609: IFFALSE 27738
27611: GO 27613
27613: DISABLE
27614: LD_INT 0
27616: PPUSH
// begin uc_side := 0 ;
27617: LD_ADDR_OWVAR 20
27621: PUSH
27622: LD_INT 0
27624: ST_TO_ADDR
// uc_nation := nation_arabian ;
27625: LD_ADDR_OWVAR 21
27629: PUSH
27630: LD_INT 2
27632: ST_TO_ADDR
// hc_gallery :=  ;
27633: LD_ADDR_OWVAR 33
27637: PUSH
27638: LD_STRING 
27640: ST_TO_ADDR
// hc_name :=  ;
27641: LD_ADDR_OWVAR 26
27645: PUSH
27646: LD_STRING 
27648: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27649: LD_INT 1
27651: PPUSH
27652: LD_INT 11
27654: PPUSH
27655: LD_INT 10
27657: PPUSH
27658: CALL_OW 380
// un := CreateHuman ;
27662: LD_ADDR_VAR 0 1
27666: PUSH
27667: CALL_OW 44
27671: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27672: LD_VAR 0 1
27676: PPUSH
27677: LD_INT 1
27679: PPUSH
27680: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27684: LD_INT 35
27686: PPUSH
27687: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27691: LD_VAR 0 1
27695: PPUSH
27696: LD_INT 22
27698: PUSH
27699: LD_OWVAR 2
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PPUSH
27708: CALL_OW 69
27712: PPUSH
27713: LD_VAR 0 1
27717: PPUSH
27718: CALL_OW 74
27722: PPUSH
27723: CALL_OW 115
// until IsDead ( un ) ;
27727: LD_VAR 0 1
27731: PPUSH
27732: CALL_OW 301
27736: IFFALSE 27684
// end ;
27738: PPOPN 1
27740: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27741: LD_EXP 80
27745: PUSH
27746: LD_EXP 120
27750: AND
27751: IFFALSE 27763
27753: GO 27755
27755: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27756: LD_STRING earthquake(getX(game), 0, 32)
27758: PPUSH
27759: CALL_OW 559
27763: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27764: LD_EXP 80
27768: PUSH
27769: LD_EXP 121
27773: AND
27774: IFFALSE 27865
27776: GO 27778
27778: DISABLE
27779: LD_INT 0
27781: PPUSH
// begin enable ;
27782: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27783: LD_ADDR_VAR 0 1
27787: PUSH
27788: LD_INT 22
27790: PUSH
27791: LD_OWVAR 2
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 21
27802: PUSH
27803: LD_INT 2
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 33
27812: PUSH
27813: LD_INT 3
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: LIST
27824: PPUSH
27825: CALL_OW 69
27829: ST_TO_ADDR
// if not tmp then
27830: LD_VAR 0 1
27834: NOT
27835: IFFALSE 27839
// exit ;
27837: GO 27865
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27839: LD_VAR 0 1
27843: PUSH
27844: LD_INT 1
27846: PPUSH
27847: LD_VAR 0 1
27851: PPUSH
27852: CALL_OW 12
27856: ARRAY
27857: PPUSH
27858: LD_INT 1
27860: PPUSH
27861: CALL_OW 234
// end ;
27865: PPOPN 1
27867: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27868: LD_EXP 80
27872: PUSH
27873: LD_EXP 122
27877: AND
27878: IFFALSE 28019
27880: GO 27882
27882: DISABLE
27883: LD_INT 0
27885: PPUSH
27886: PPUSH
27887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27888: LD_ADDR_VAR 0 3
27892: PUSH
27893: LD_INT 22
27895: PUSH
27896: LD_OWVAR 2
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 25
27907: PUSH
27908: LD_INT 1
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PPUSH
27919: CALL_OW 69
27923: ST_TO_ADDR
// if not tmp then
27924: LD_VAR 0 3
27928: NOT
27929: IFFALSE 27933
// exit ;
27931: GO 28019
// un := tmp [ rand ( 1 , tmp ) ] ;
27933: LD_ADDR_VAR 0 2
27937: PUSH
27938: LD_VAR 0 3
27942: PUSH
27943: LD_INT 1
27945: PPUSH
27946: LD_VAR 0 3
27950: PPUSH
27951: CALL_OW 12
27955: ARRAY
27956: ST_TO_ADDR
// if Crawls ( un ) then
27957: LD_VAR 0 2
27961: PPUSH
27962: CALL_OW 318
27966: IFFALSE 27977
// ComWalk ( un ) ;
27968: LD_VAR 0 2
27972: PPUSH
27973: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27977: LD_VAR 0 2
27981: PPUSH
27982: LD_INT 9
27984: PPUSH
27985: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27989: LD_INT 28
27991: PPUSH
27992: LD_OWVAR 2
27996: PPUSH
27997: LD_INT 2
27999: PPUSH
28000: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28004: LD_INT 29
28006: PPUSH
28007: LD_OWVAR 2
28011: PPUSH
28012: LD_INT 2
28014: PPUSH
28015: CALL_OW 322
// end ;
28019: PPOPN 3
28021: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28022: LD_EXP 80
28026: PUSH
28027: LD_EXP 123
28031: AND
28032: IFFALSE 28143
28034: GO 28036
28036: DISABLE
28037: LD_INT 0
28039: PPUSH
28040: PPUSH
28041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28042: LD_ADDR_VAR 0 3
28046: PUSH
28047: LD_INT 22
28049: PUSH
28050: LD_OWVAR 2
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 25
28061: PUSH
28062: LD_INT 1
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PPUSH
28073: CALL_OW 69
28077: ST_TO_ADDR
// if not tmp then
28078: LD_VAR 0 3
28082: NOT
28083: IFFALSE 28087
// exit ;
28085: GO 28143
// un := tmp [ rand ( 1 , tmp ) ] ;
28087: LD_ADDR_VAR 0 2
28091: PUSH
28092: LD_VAR 0 3
28096: PUSH
28097: LD_INT 1
28099: PPUSH
28100: LD_VAR 0 3
28104: PPUSH
28105: CALL_OW 12
28109: ARRAY
28110: ST_TO_ADDR
// if Crawls ( un ) then
28111: LD_VAR 0 2
28115: PPUSH
28116: CALL_OW 318
28120: IFFALSE 28131
// ComWalk ( un ) ;
28122: LD_VAR 0 2
28126: PPUSH
28127: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28131: LD_VAR 0 2
28135: PPUSH
28136: LD_INT 8
28138: PPUSH
28139: CALL_OW 336
// end ;
28143: PPOPN 3
28145: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28146: LD_EXP 80
28150: PUSH
28151: LD_EXP 124
28155: AND
28156: IFFALSE 28300
28158: GO 28160
28160: DISABLE
28161: LD_INT 0
28163: PPUSH
28164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28165: LD_ADDR_VAR 0 2
28169: PUSH
28170: LD_INT 22
28172: PUSH
28173: LD_OWVAR 2
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 21
28184: PUSH
28185: LD_INT 2
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 2
28194: PUSH
28195: LD_INT 34
28197: PUSH
28198: LD_INT 12
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 34
28207: PUSH
28208: LD_INT 51
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 34
28217: PUSH
28218: LD_INT 32
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: LIST
28235: PPUSH
28236: CALL_OW 69
28240: ST_TO_ADDR
// if not tmp then
28241: LD_VAR 0 2
28245: NOT
28246: IFFALSE 28250
// exit ;
28248: GO 28300
// for i in tmp do
28250: LD_ADDR_VAR 0 1
28254: PUSH
28255: LD_VAR 0 2
28259: PUSH
28260: FOR_IN
28261: IFFALSE 28298
// if GetCargo ( i , mat_artifact ) = 0 then
28263: LD_VAR 0 1
28267: PPUSH
28268: LD_INT 4
28270: PPUSH
28271: CALL_OW 289
28275: PUSH
28276: LD_INT 0
28278: EQUAL
28279: IFFALSE 28296
// SetCargo ( i , mat_siberit , 100 ) ;
28281: LD_VAR 0 1
28285: PPUSH
28286: LD_INT 3
28288: PPUSH
28289: LD_INT 100
28291: PPUSH
28292: CALL_OW 290
28296: GO 28260
28298: POP
28299: POP
// end ;
28300: PPOPN 2
28302: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28303: LD_EXP 80
28307: PUSH
28308: LD_EXP 125
28312: AND
28313: IFFALSE 28496
28315: GO 28317
28317: DISABLE
28318: LD_INT 0
28320: PPUSH
28321: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28322: LD_ADDR_VAR 0 2
28326: PUSH
28327: LD_INT 22
28329: PUSH
28330: LD_OWVAR 2
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PPUSH
28339: CALL_OW 69
28343: ST_TO_ADDR
// if not tmp then
28344: LD_VAR 0 2
28348: NOT
28349: IFFALSE 28353
// exit ;
28351: GO 28496
// for i := 1 to 2 do
28353: LD_ADDR_VAR 0 1
28357: PUSH
28358: DOUBLE
28359: LD_INT 1
28361: DEC
28362: ST_TO_ADDR
28363: LD_INT 2
28365: PUSH
28366: FOR_TO
28367: IFFALSE 28494
// begin uc_side := your_side ;
28369: LD_ADDR_OWVAR 20
28373: PUSH
28374: LD_OWVAR 2
28378: ST_TO_ADDR
// uc_nation := nation_american ;
28379: LD_ADDR_OWVAR 21
28383: PUSH
28384: LD_INT 1
28386: ST_TO_ADDR
// vc_chassis := us_morphling ;
28387: LD_ADDR_OWVAR 37
28391: PUSH
28392: LD_INT 5
28394: ST_TO_ADDR
// vc_engine := engine_siberite ;
28395: LD_ADDR_OWVAR 39
28399: PUSH
28400: LD_INT 3
28402: ST_TO_ADDR
// vc_control := control_computer ;
28403: LD_ADDR_OWVAR 38
28407: PUSH
28408: LD_INT 3
28410: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28411: LD_ADDR_OWVAR 40
28415: PUSH
28416: LD_INT 10
28418: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28419: LD_VAR 0 2
28423: PUSH
28424: LD_INT 1
28426: ARRAY
28427: PPUSH
28428: CALL_OW 310
28432: NOT
28433: IFFALSE 28480
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28435: CALL_OW 45
28439: PPUSH
28440: LD_VAR 0 2
28444: PUSH
28445: LD_INT 1
28447: ARRAY
28448: PPUSH
28449: CALL_OW 250
28453: PPUSH
28454: LD_VAR 0 2
28458: PUSH
28459: LD_INT 1
28461: ARRAY
28462: PPUSH
28463: CALL_OW 251
28467: PPUSH
28468: LD_INT 12
28470: PPUSH
28471: LD_INT 1
28473: PPUSH
28474: CALL_OW 50
28478: GO 28492
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28480: CALL_OW 45
28484: PPUSH
28485: LD_INT 1
28487: PPUSH
28488: CALL_OW 51
// end ;
28492: GO 28366
28494: POP
28495: POP
// end ;
28496: PPOPN 2
28498: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28499: LD_EXP 80
28503: PUSH
28504: LD_EXP 126
28508: AND
28509: IFFALSE 28731
28511: GO 28513
28513: DISABLE
28514: LD_INT 0
28516: PPUSH
28517: PPUSH
28518: PPUSH
28519: PPUSH
28520: PPUSH
28521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28522: LD_ADDR_VAR 0 6
28526: PUSH
28527: LD_INT 22
28529: PUSH
28530: LD_OWVAR 2
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 21
28541: PUSH
28542: LD_INT 1
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 3
28551: PUSH
28552: LD_INT 23
28554: PUSH
28555: LD_INT 0
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: LIST
28570: PPUSH
28571: CALL_OW 69
28575: ST_TO_ADDR
// if not tmp then
28576: LD_VAR 0 6
28580: NOT
28581: IFFALSE 28585
// exit ;
28583: GO 28731
// s1 := rand ( 1 , 4 ) ;
28585: LD_ADDR_VAR 0 2
28589: PUSH
28590: LD_INT 1
28592: PPUSH
28593: LD_INT 4
28595: PPUSH
28596: CALL_OW 12
28600: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28601: LD_ADDR_VAR 0 4
28605: PUSH
28606: LD_VAR 0 6
28610: PUSH
28611: LD_INT 1
28613: ARRAY
28614: PPUSH
28615: LD_VAR 0 2
28619: PPUSH
28620: CALL_OW 259
28624: ST_TO_ADDR
// if s1 = 1 then
28625: LD_VAR 0 2
28629: PUSH
28630: LD_INT 1
28632: EQUAL
28633: IFFALSE 28653
// s2 := rand ( 2 , 4 ) else
28635: LD_ADDR_VAR 0 3
28639: PUSH
28640: LD_INT 2
28642: PPUSH
28643: LD_INT 4
28645: PPUSH
28646: CALL_OW 12
28650: ST_TO_ADDR
28651: GO 28661
// s2 := 1 ;
28653: LD_ADDR_VAR 0 3
28657: PUSH
28658: LD_INT 1
28660: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28661: LD_ADDR_VAR 0 5
28665: PUSH
28666: LD_VAR 0 6
28670: PUSH
28671: LD_INT 1
28673: ARRAY
28674: PPUSH
28675: LD_VAR 0 3
28679: PPUSH
28680: CALL_OW 259
28684: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28685: LD_VAR 0 6
28689: PUSH
28690: LD_INT 1
28692: ARRAY
28693: PPUSH
28694: LD_VAR 0 2
28698: PPUSH
28699: LD_VAR 0 5
28703: PPUSH
28704: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28708: LD_VAR 0 6
28712: PUSH
28713: LD_INT 1
28715: ARRAY
28716: PPUSH
28717: LD_VAR 0 3
28721: PPUSH
28722: LD_VAR 0 4
28726: PPUSH
28727: CALL_OW 237
// end ;
28731: PPOPN 6
28733: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28734: LD_EXP 80
28738: PUSH
28739: LD_EXP 127
28743: AND
28744: IFFALSE 28823
28746: GO 28748
28748: DISABLE
28749: LD_INT 0
28751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28752: LD_ADDR_VAR 0 1
28756: PUSH
28757: LD_INT 22
28759: PUSH
28760: LD_OWVAR 2
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 30
28771: PUSH
28772: LD_INT 3
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PPUSH
28783: CALL_OW 69
28787: ST_TO_ADDR
// if not tmp then
28788: LD_VAR 0 1
28792: NOT
28793: IFFALSE 28797
// exit ;
28795: GO 28823
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28797: LD_VAR 0 1
28801: PUSH
28802: LD_INT 1
28804: PPUSH
28805: LD_VAR 0 1
28809: PPUSH
28810: CALL_OW 12
28814: ARRAY
28815: PPUSH
28816: LD_INT 1
28818: PPUSH
28819: CALL_OW 234
// end ;
28823: PPOPN 1
28825: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28826: LD_EXP 80
28830: PUSH
28831: LD_EXP 128
28835: AND
28836: IFFALSE 28948
28838: GO 28840
28840: DISABLE
28841: LD_INT 0
28843: PPUSH
28844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28845: LD_ADDR_VAR 0 2
28849: PUSH
28850: LD_INT 22
28852: PUSH
28853: LD_OWVAR 2
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 2
28864: PUSH
28865: LD_INT 30
28867: PUSH
28868: LD_INT 27
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 30
28877: PUSH
28878: LD_INT 26
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 30
28887: PUSH
28888: LD_INT 28
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PPUSH
28905: CALL_OW 69
28909: ST_TO_ADDR
// if not tmp then
28910: LD_VAR 0 2
28914: NOT
28915: IFFALSE 28919
// exit ;
28917: GO 28948
// for i in tmp do
28919: LD_ADDR_VAR 0 1
28923: PUSH
28924: LD_VAR 0 2
28928: PUSH
28929: FOR_IN
28930: IFFALSE 28946
// SetLives ( i , 1 ) ;
28932: LD_VAR 0 1
28936: PPUSH
28937: LD_INT 1
28939: PPUSH
28940: CALL_OW 234
28944: GO 28929
28946: POP
28947: POP
// end ;
28948: PPOPN 2
28950: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28951: LD_EXP 80
28955: PUSH
28956: LD_EXP 129
28960: AND
28961: IFFALSE 29235
28963: GO 28965
28965: DISABLE
28966: LD_INT 0
28968: PPUSH
28969: PPUSH
28970: PPUSH
// begin i := rand ( 1 , 7 ) ;
28971: LD_ADDR_VAR 0 1
28975: PUSH
28976: LD_INT 1
28978: PPUSH
28979: LD_INT 7
28981: PPUSH
28982: CALL_OW 12
28986: ST_TO_ADDR
// case i of 1 :
28987: LD_VAR 0 1
28991: PUSH
28992: LD_INT 1
28994: DOUBLE
28995: EQUAL
28996: IFTRUE 29000
28998: GO 29010
29000: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29001: LD_STRING earthquake(getX(game), 0, 32)
29003: PPUSH
29004: CALL_OW 559
29008: GO 29235
29010: LD_INT 2
29012: DOUBLE
29013: EQUAL
29014: IFTRUE 29018
29016: GO 29032
29018: POP
// begin ToLua ( displayStucuk(); ) ;
29019: LD_STRING displayStucuk();
29021: PPUSH
29022: CALL_OW 559
// ResetFog ;
29026: CALL_OW 335
// end ; 3 :
29030: GO 29235
29032: LD_INT 3
29034: DOUBLE
29035: EQUAL
29036: IFTRUE 29040
29038: GO 29144
29040: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29041: LD_ADDR_VAR 0 2
29045: PUSH
29046: LD_INT 22
29048: PUSH
29049: LD_OWVAR 2
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 25
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PPUSH
29072: CALL_OW 69
29076: ST_TO_ADDR
// if not tmp then
29077: LD_VAR 0 2
29081: NOT
29082: IFFALSE 29086
// exit ;
29084: GO 29235
// un := tmp [ rand ( 1 , tmp ) ] ;
29086: LD_ADDR_VAR 0 3
29090: PUSH
29091: LD_VAR 0 2
29095: PUSH
29096: LD_INT 1
29098: PPUSH
29099: LD_VAR 0 2
29103: PPUSH
29104: CALL_OW 12
29108: ARRAY
29109: ST_TO_ADDR
// if Crawls ( un ) then
29110: LD_VAR 0 3
29114: PPUSH
29115: CALL_OW 318
29119: IFFALSE 29130
// ComWalk ( un ) ;
29121: LD_VAR 0 3
29125: PPUSH
29126: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29130: LD_VAR 0 3
29134: PPUSH
29135: LD_INT 8
29137: PPUSH
29138: CALL_OW 336
// end ; 4 :
29142: GO 29235
29144: LD_INT 4
29146: DOUBLE
29147: EQUAL
29148: IFTRUE 29152
29150: GO 29213
29152: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29153: LD_ADDR_VAR 0 2
29157: PUSH
29158: LD_INT 22
29160: PUSH
29161: LD_OWVAR 2
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 30
29172: PUSH
29173: LD_INT 29
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PPUSH
29184: CALL_OW 69
29188: ST_TO_ADDR
// if not tmp then
29189: LD_VAR 0 2
29193: NOT
29194: IFFALSE 29198
// exit ;
29196: GO 29235
// DestroyUnit ( tmp [ 1 ] ) ;
29198: LD_VAR 0 2
29202: PUSH
29203: LD_INT 1
29205: ARRAY
29206: PPUSH
29207: CALL_OW 65
// end ; 5 .. 7 :
29211: GO 29235
29213: LD_INT 5
29215: DOUBLE
29216: GREATEREQUAL
29217: IFFALSE 29225
29219: LD_INT 7
29221: DOUBLE
29222: LESSEQUAL
29223: IFTRUE 29227
29225: GO 29234
29227: POP
// StreamSibBomb ; end ;
29228: CALL 25485 0 0
29232: GO 29235
29234: POP
// end ;
29235: PPOPN 3
29237: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29238: LD_EXP 80
29242: PUSH
29243: LD_EXP 130
29247: AND
29248: IFFALSE 29404
29250: GO 29252
29252: DISABLE
29253: LD_INT 0
29255: PPUSH
29256: PPUSH
29257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29258: LD_ADDR_VAR 0 2
29262: PUSH
29263: LD_INT 81
29265: PUSH
29266: LD_OWVAR 2
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 2
29277: PUSH
29278: LD_INT 21
29280: PUSH
29281: LD_INT 1
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 21
29290: PUSH
29291: LD_INT 2
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: LIST
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PPUSH
29307: CALL_OW 69
29311: ST_TO_ADDR
// if not tmp then
29312: LD_VAR 0 2
29316: NOT
29317: IFFALSE 29321
// exit ;
29319: GO 29404
// p := 0 ;
29321: LD_ADDR_VAR 0 3
29325: PUSH
29326: LD_INT 0
29328: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29329: LD_INT 35
29331: PPUSH
29332: CALL_OW 67
// p := p + 1 ;
29336: LD_ADDR_VAR 0 3
29340: PUSH
29341: LD_VAR 0 3
29345: PUSH
29346: LD_INT 1
29348: PLUS
29349: ST_TO_ADDR
// for i in tmp do
29350: LD_ADDR_VAR 0 1
29354: PUSH
29355: LD_VAR 0 2
29359: PUSH
29360: FOR_IN
29361: IFFALSE 29392
// if GetLives ( i ) < 1000 then
29363: LD_VAR 0 1
29367: PPUSH
29368: CALL_OW 256
29372: PUSH
29373: LD_INT 1000
29375: LESS
29376: IFFALSE 29390
// SetLives ( i , 1000 ) ;
29378: LD_VAR 0 1
29382: PPUSH
29383: LD_INT 1000
29385: PPUSH
29386: CALL_OW 234
29390: GO 29360
29392: POP
29393: POP
// until p > 20 ;
29394: LD_VAR 0 3
29398: PUSH
29399: LD_INT 20
29401: GREATER
29402: IFFALSE 29329
// end ;
29404: PPOPN 3
29406: END
// every 0 0$1 trigger StreamModeActive and sTime do
29407: LD_EXP 80
29411: PUSH
29412: LD_EXP 131
29416: AND
29417: IFFALSE 29452
29419: GO 29421
29421: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29422: LD_INT 28
29424: PPUSH
29425: LD_OWVAR 2
29429: PPUSH
29430: LD_INT 2
29432: PPUSH
29433: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29437: LD_INT 30
29439: PPUSH
29440: LD_OWVAR 2
29444: PPUSH
29445: LD_INT 2
29447: PPUSH
29448: CALL_OW 322
// end ;
29452: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29453: LD_EXP 80
29457: PUSH
29458: LD_EXP 132
29462: AND
29463: IFFALSE 29584
29465: GO 29467
29467: DISABLE
29468: LD_INT 0
29470: PPUSH
29471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29472: LD_ADDR_VAR 0 2
29476: PUSH
29477: LD_INT 22
29479: PUSH
29480: LD_OWVAR 2
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 21
29491: PUSH
29492: LD_INT 1
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 3
29501: PUSH
29502: LD_INT 23
29504: PUSH
29505: LD_INT 0
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: LIST
29520: PPUSH
29521: CALL_OW 69
29525: ST_TO_ADDR
// if not tmp then
29526: LD_VAR 0 2
29530: NOT
29531: IFFALSE 29535
// exit ;
29533: GO 29584
// for i in tmp do
29535: LD_ADDR_VAR 0 1
29539: PUSH
29540: LD_VAR 0 2
29544: PUSH
29545: FOR_IN
29546: IFFALSE 29582
// begin if Crawls ( i ) then
29548: LD_VAR 0 1
29552: PPUSH
29553: CALL_OW 318
29557: IFFALSE 29568
// ComWalk ( i ) ;
29559: LD_VAR 0 1
29563: PPUSH
29564: CALL_OW 138
// SetClass ( i , 2 ) ;
29568: LD_VAR 0 1
29572: PPUSH
29573: LD_INT 2
29575: PPUSH
29576: CALL_OW 336
// end ;
29580: GO 29545
29582: POP
29583: POP
// end ;
29584: PPOPN 2
29586: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29587: LD_EXP 80
29591: PUSH
29592: LD_EXP 133
29596: AND
29597: IFFALSE 29878
29599: GO 29601
29601: DISABLE
29602: LD_INT 0
29604: PPUSH
29605: PPUSH
29606: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29607: LD_OWVAR 2
29611: PPUSH
29612: LD_INT 9
29614: PPUSH
29615: LD_INT 1
29617: PPUSH
29618: LD_INT 1
29620: PPUSH
29621: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29625: LD_INT 9
29627: PPUSH
29628: LD_OWVAR 2
29632: PPUSH
29633: CALL_OW 343
// uc_side := 9 ;
29637: LD_ADDR_OWVAR 20
29641: PUSH
29642: LD_INT 9
29644: ST_TO_ADDR
// uc_nation := 2 ;
29645: LD_ADDR_OWVAR 21
29649: PUSH
29650: LD_INT 2
29652: ST_TO_ADDR
// hc_name := Dark Warrior ;
29653: LD_ADDR_OWVAR 26
29657: PUSH
29658: LD_STRING Dark Warrior
29660: ST_TO_ADDR
// hc_gallery :=  ;
29661: LD_ADDR_OWVAR 33
29665: PUSH
29666: LD_STRING 
29668: ST_TO_ADDR
// hc_noskilllimit := true ;
29669: LD_ADDR_OWVAR 76
29673: PUSH
29674: LD_INT 1
29676: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29677: LD_ADDR_OWVAR 31
29681: PUSH
29682: LD_INT 30
29684: PUSH
29685: LD_INT 30
29687: PUSH
29688: LD_INT 30
29690: PUSH
29691: LD_INT 30
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: ST_TO_ADDR
// un := CreateHuman ;
29700: LD_ADDR_VAR 0 3
29704: PUSH
29705: CALL_OW 44
29709: ST_TO_ADDR
// hc_noskilllimit := false ;
29710: LD_ADDR_OWVAR 76
29714: PUSH
29715: LD_INT 0
29717: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29718: LD_VAR 0 3
29722: PPUSH
29723: LD_INT 1
29725: PPUSH
29726: CALL_OW 51
// p := 0 ;
29730: LD_ADDR_VAR 0 2
29734: PUSH
29735: LD_INT 0
29737: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29738: LD_INT 35
29740: PPUSH
29741: CALL_OW 67
// p := p + 1 ;
29745: LD_ADDR_VAR 0 2
29749: PUSH
29750: LD_VAR 0 2
29754: PUSH
29755: LD_INT 1
29757: PLUS
29758: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29759: LD_VAR 0 3
29763: PPUSH
29764: CALL_OW 256
29768: PUSH
29769: LD_INT 1000
29771: LESS
29772: IFFALSE 29786
// SetLives ( un , 1000 ) ;
29774: LD_VAR 0 3
29778: PPUSH
29779: LD_INT 1000
29781: PPUSH
29782: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29786: LD_VAR 0 3
29790: PPUSH
29791: LD_INT 81
29793: PUSH
29794: LD_OWVAR 2
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 91
29805: PUSH
29806: LD_VAR 0 3
29810: PUSH
29811: LD_INT 30
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: LIST
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PPUSH
29823: CALL_OW 69
29827: PPUSH
29828: LD_VAR 0 3
29832: PPUSH
29833: CALL_OW 74
29837: PPUSH
29838: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29842: LD_VAR 0 2
29846: PUSH
29847: LD_INT 60
29849: GREATER
29850: PUSH
29851: LD_VAR 0 3
29855: PPUSH
29856: CALL_OW 301
29860: OR
29861: IFFALSE 29738
// if un then
29863: LD_VAR 0 3
29867: IFFALSE 29878
// RemoveUnit ( un ) ;
29869: LD_VAR 0 3
29873: PPUSH
29874: CALL_OW 64
// end ;
29878: PPOPN 3
29880: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29881: LD_INT 0
29883: PPUSH
// case cmd of 301 :
29884: LD_VAR 0 1
29888: PUSH
29889: LD_INT 301
29891: DOUBLE
29892: EQUAL
29893: IFTRUE 29897
29895: GO 29929
29897: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29898: LD_VAR 0 6
29902: PPUSH
29903: LD_VAR 0 7
29907: PPUSH
29908: LD_VAR 0 8
29912: PPUSH
29913: LD_VAR 0 4
29917: PPUSH
29918: LD_VAR 0 5
29922: PPUSH
29923: CALL 31130 0 5
29927: GO 30050
29929: LD_INT 302
29931: DOUBLE
29932: EQUAL
29933: IFTRUE 29937
29935: GO 29974
29937: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29938: LD_VAR 0 6
29942: PPUSH
29943: LD_VAR 0 7
29947: PPUSH
29948: LD_VAR 0 8
29952: PPUSH
29953: LD_VAR 0 9
29957: PPUSH
29958: LD_VAR 0 4
29962: PPUSH
29963: LD_VAR 0 5
29967: PPUSH
29968: CALL 31221 0 6
29972: GO 30050
29974: LD_INT 303
29976: DOUBLE
29977: EQUAL
29978: IFTRUE 29982
29980: GO 30019
29982: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29983: LD_VAR 0 6
29987: PPUSH
29988: LD_VAR 0 7
29992: PPUSH
29993: LD_VAR 0 8
29997: PPUSH
29998: LD_VAR 0 9
30002: PPUSH
30003: LD_VAR 0 4
30007: PPUSH
30008: LD_VAR 0 5
30012: PPUSH
30013: CALL 30055 0 6
30017: GO 30050
30019: LD_INT 304
30021: DOUBLE
30022: EQUAL
30023: IFTRUE 30027
30025: GO 30049
30027: POP
// hHackTeleport ( unit , x , y ) ; end ;
30028: LD_VAR 0 2
30032: PPUSH
30033: LD_VAR 0 4
30037: PPUSH
30038: LD_VAR 0 5
30042: PPUSH
30043: CALL 31814 0 3
30047: GO 30050
30049: POP
// end ;
30050: LD_VAR 0 12
30054: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30055: LD_INT 0
30057: PPUSH
30058: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30059: LD_VAR 0 1
30063: PUSH
30064: LD_INT 1
30066: LESS
30067: PUSH
30068: LD_VAR 0 1
30072: PUSH
30073: LD_INT 3
30075: GREATER
30076: OR
30077: PUSH
30078: LD_VAR 0 5
30082: PPUSH
30083: LD_VAR 0 6
30087: PPUSH
30088: CALL_OW 428
30092: OR
30093: IFFALSE 30097
// exit ;
30095: GO 30817
// uc_side := your_side ;
30097: LD_ADDR_OWVAR 20
30101: PUSH
30102: LD_OWVAR 2
30106: ST_TO_ADDR
// uc_nation := nation ;
30107: LD_ADDR_OWVAR 21
30111: PUSH
30112: LD_VAR 0 1
30116: ST_TO_ADDR
// bc_level = 1 ;
30117: LD_ADDR_OWVAR 43
30121: PUSH
30122: LD_INT 1
30124: ST_TO_ADDR
// case btype of 1 :
30125: LD_VAR 0 2
30129: PUSH
30130: LD_INT 1
30132: DOUBLE
30133: EQUAL
30134: IFTRUE 30138
30136: GO 30149
30138: POP
// bc_type := b_depot ; 2 :
30139: LD_ADDR_OWVAR 42
30143: PUSH
30144: LD_INT 0
30146: ST_TO_ADDR
30147: GO 30761
30149: LD_INT 2
30151: DOUBLE
30152: EQUAL
30153: IFTRUE 30157
30155: GO 30168
30157: POP
// bc_type := b_warehouse ; 3 :
30158: LD_ADDR_OWVAR 42
30162: PUSH
30163: LD_INT 1
30165: ST_TO_ADDR
30166: GO 30761
30168: LD_INT 3
30170: DOUBLE
30171: EQUAL
30172: IFTRUE 30176
30174: GO 30187
30176: POP
// bc_type := b_lab ; 4 .. 9 :
30177: LD_ADDR_OWVAR 42
30181: PUSH
30182: LD_INT 6
30184: ST_TO_ADDR
30185: GO 30761
30187: LD_INT 4
30189: DOUBLE
30190: GREATEREQUAL
30191: IFFALSE 30199
30193: LD_INT 9
30195: DOUBLE
30196: LESSEQUAL
30197: IFTRUE 30201
30199: GO 30253
30201: POP
// begin bc_type := b_lab_half ;
30202: LD_ADDR_OWVAR 42
30206: PUSH
30207: LD_INT 7
30209: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30210: LD_ADDR_OWVAR 44
30214: PUSH
30215: LD_INT 10
30217: PUSH
30218: LD_INT 11
30220: PUSH
30221: LD_INT 12
30223: PUSH
30224: LD_INT 15
30226: PUSH
30227: LD_INT 14
30229: PUSH
30230: LD_INT 13
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: PUSH
30241: LD_VAR 0 2
30245: PUSH
30246: LD_INT 3
30248: MINUS
30249: ARRAY
30250: ST_TO_ADDR
// end ; 10 .. 13 :
30251: GO 30761
30253: LD_INT 10
30255: DOUBLE
30256: GREATEREQUAL
30257: IFFALSE 30265
30259: LD_INT 13
30261: DOUBLE
30262: LESSEQUAL
30263: IFTRUE 30267
30265: GO 30344
30267: POP
// begin bc_type := b_lab_full ;
30268: LD_ADDR_OWVAR 42
30272: PUSH
30273: LD_INT 8
30275: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30276: LD_ADDR_OWVAR 44
30280: PUSH
30281: LD_INT 10
30283: PUSH
30284: LD_INT 12
30286: PUSH
30287: LD_INT 14
30289: PUSH
30290: LD_INT 13
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: PUSH
30299: LD_VAR 0 2
30303: PUSH
30304: LD_INT 9
30306: MINUS
30307: ARRAY
30308: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30309: LD_ADDR_OWVAR 45
30313: PUSH
30314: LD_INT 11
30316: PUSH
30317: LD_INT 15
30319: PUSH
30320: LD_INT 12
30322: PUSH
30323: LD_INT 15
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: PUSH
30332: LD_VAR 0 2
30336: PUSH
30337: LD_INT 9
30339: MINUS
30340: ARRAY
30341: ST_TO_ADDR
// end ; 14 :
30342: GO 30761
30344: LD_INT 14
30346: DOUBLE
30347: EQUAL
30348: IFTRUE 30352
30350: GO 30363
30352: POP
// bc_type := b_workshop ; 15 :
30353: LD_ADDR_OWVAR 42
30357: PUSH
30358: LD_INT 2
30360: ST_TO_ADDR
30361: GO 30761
30363: LD_INT 15
30365: DOUBLE
30366: EQUAL
30367: IFTRUE 30371
30369: GO 30382
30371: POP
// bc_type := b_factory ; 16 :
30372: LD_ADDR_OWVAR 42
30376: PUSH
30377: LD_INT 3
30379: ST_TO_ADDR
30380: GO 30761
30382: LD_INT 16
30384: DOUBLE
30385: EQUAL
30386: IFTRUE 30390
30388: GO 30401
30390: POP
// bc_type := b_ext_gun ; 17 :
30391: LD_ADDR_OWVAR 42
30395: PUSH
30396: LD_INT 17
30398: ST_TO_ADDR
30399: GO 30761
30401: LD_INT 17
30403: DOUBLE
30404: EQUAL
30405: IFTRUE 30409
30407: GO 30437
30409: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30410: LD_ADDR_OWVAR 42
30414: PUSH
30415: LD_INT 19
30417: PUSH
30418: LD_INT 23
30420: PUSH
30421: LD_INT 19
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: LIST
30428: PUSH
30429: LD_VAR 0 1
30433: ARRAY
30434: ST_TO_ADDR
30435: GO 30761
30437: LD_INT 18
30439: DOUBLE
30440: EQUAL
30441: IFTRUE 30445
30443: GO 30456
30445: POP
// bc_type := b_ext_radar ; 19 :
30446: LD_ADDR_OWVAR 42
30450: PUSH
30451: LD_INT 20
30453: ST_TO_ADDR
30454: GO 30761
30456: LD_INT 19
30458: DOUBLE
30459: EQUAL
30460: IFTRUE 30464
30462: GO 30475
30464: POP
// bc_type := b_ext_radio ; 20 :
30465: LD_ADDR_OWVAR 42
30469: PUSH
30470: LD_INT 22
30472: ST_TO_ADDR
30473: GO 30761
30475: LD_INT 20
30477: DOUBLE
30478: EQUAL
30479: IFTRUE 30483
30481: GO 30494
30483: POP
// bc_type := b_ext_siberium ; 21 :
30484: LD_ADDR_OWVAR 42
30488: PUSH
30489: LD_INT 21
30491: ST_TO_ADDR
30492: GO 30761
30494: LD_INT 21
30496: DOUBLE
30497: EQUAL
30498: IFTRUE 30502
30500: GO 30513
30502: POP
// bc_type := b_ext_computer ; 22 :
30503: LD_ADDR_OWVAR 42
30507: PUSH
30508: LD_INT 24
30510: ST_TO_ADDR
30511: GO 30761
30513: LD_INT 22
30515: DOUBLE
30516: EQUAL
30517: IFTRUE 30521
30519: GO 30532
30521: POP
// bc_type := b_ext_track ; 23 :
30522: LD_ADDR_OWVAR 42
30526: PUSH
30527: LD_INT 16
30529: ST_TO_ADDR
30530: GO 30761
30532: LD_INT 23
30534: DOUBLE
30535: EQUAL
30536: IFTRUE 30540
30538: GO 30551
30540: POP
// bc_type := b_ext_laser ; 24 :
30541: LD_ADDR_OWVAR 42
30545: PUSH
30546: LD_INT 25
30548: ST_TO_ADDR
30549: GO 30761
30551: LD_INT 24
30553: DOUBLE
30554: EQUAL
30555: IFTRUE 30559
30557: GO 30570
30559: POP
// bc_type := b_control_tower ; 25 :
30560: LD_ADDR_OWVAR 42
30564: PUSH
30565: LD_INT 36
30567: ST_TO_ADDR
30568: GO 30761
30570: LD_INT 25
30572: DOUBLE
30573: EQUAL
30574: IFTRUE 30578
30576: GO 30589
30578: POP
// bc_type := b_breastwork ; 26 :
30579: LD_ADDR_OWVAR 42
30583: PUSH
30584: LD_INT 31
30586: ST_TO_ADDR
30587: GO 30761
30589: LD_INT 26
30591: DOUBLE
30592: EQUAL
30593: IFTRUE 30597
30595: GO 30608
30597: POP
// bc_type := b_bunker ; 27 :
30598: LD_ADDR_OWVAR 42
30602: PUSH
30603: LD_INT 32
30605: ST_TO_ADDR
30606: GO 30761
30608: LD_INT 27
30610: DOUBLE
30611: EQUAL
30612: IFTRUE 30616
30614: GO 30627
30616: POP
// bc_type := b_turret ; 28 :
30617: LD_ADDR_OWVAR 42
30621: PUSH
30622: LD_INT 33
30624: ST_TO_ADDR
30625: GO 30761
30627: LD_INT 28
30629: DOUBLE
30630: EQUAL
30631: IFTRUE 30635
30633: GO 30646
30635: POP
// bc_type := b_armoury ; 29 :
30636: LD_ADDR_OWVAR 42
30640: PUSH
30641: LD_INT 4
30643: ST_TO_ADDR
30644: GO 30761
30646: LD_INT 29
30648: DOUBLE
30649: EQUAL
30650: IFTRUE 30654
30652: GO 30665
30654: POP
// bc_type := b_barracks ; 30 :
30655: LD_ADDR_OWVAR 42
30659: PUSH
30660: LD_INT 5
30662: ST_TO_ADDR
30663: GO 30761
30665: LD_INT 30
30667: DOUBLE
30668: EQUAL
30669: IFTRUE 30673
30671: GO 30684
30673: POP
// bc_type := b_solar_power ; 31 :
30674: LD_ADDR_OWVAR 42
30678: PUSH
30679: LD_INT 27
30681: ST_TO_ADDR
30682: GO 30761
30684: LD_INT 31
30686: DOUBLE
30687: EQUAL
30688: IFTRUE 30692
30690: GO 30703
30692: POP
// bc_type := b_oil_power ; 32 :
30693: LD_ADDR_OWVAR 42
30697: PUSH
30698: LD_INT 26
30700: ST_TO_ADDR
30701: GO 30761
30703: LD_INT 32
30705: DOUBLE
30706: EQUAL
30707: IFTRUE 30711
30709: GO 30722
30711: POP
// bc_type := b_siberite_power ; 33 :
30712: LD_ADDR_OWVAR 42
30716: PUSH
30717: LD_INT 28
30719: ST_TO_ADDR
30720: GO 30761
30722: LD_INT 33
30724: DOUBLE
30725: EQUAL
30726: IFTRUE 30730
30728: GO 30741
30730: POP
// bc_type := b_oil_mine ; 34 :
30731: LD_ADDR_OWVAR 42
30735: PUSH
30736: LD_INT 29
30738: ST_TO_ADDR
30739: GO 30761
30741: LD_INT 34
30743: DOUBLE
30744: EQUAL
30745: IFTRUE 30749
30747: GO 30760
30749: POP
// bc_type := b_siberite_mine ; end ;
30750: LD_ADDR_OWVAR 42
30754: PUSH
30755: LD_INT 30
30757: ST_TO_ADDR
30758: GO 30761
30760: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30761: LD_ADDR_VAR 0 8
30765: PUSH
30766: LD_VAR 0 5
30770: PPUSH
30771: LD_VAR 0 6
30775: PPUSH
30776: LD_VAR 0 3
30780: PPUSH
30781: CALL_OW 47
30785: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30786: LD_OWVAR 42
30790: PUSH
30791: LD_INT 32
30793: PUSH
30794: LD_INT 33
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: IN
30801: IFFALSE 30817
// PlaceWeaponTurret ( b , weapon ) ;
30803: LD_VAR 0 8
30807: PPUSH
30808: LD_VAR 0 4
30812: PPUSH
30813: CALL_OW 431
// end ;
30817: LD_VAR 0 7
30821: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30822: LD_INT 0
30824: PPUSH
30825: PPUSH
30826: PPUSH
30827: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30828: LD_ADDR_VAR 0 4
30832: PUSH
30833: LD_INT 22
30835: PUSH
30836: LD_OWVAR 2
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 2
30847: PUSH
30848: LD_INT 30
30850: PUSH
30851: LD_INT 0
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 30
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: LIST
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PPUSH
30877: CALL_OW 69
30881: ST_TO_ADDR
// if not tmp then
30882: LD_VAR 0 4
30886: NOT
30887: IFFALSE 30891
// exit ;
30889: GO 30950
// for i in tmp do
30891: LD_ADDR_VAR 0 2
30895: PUSH
30896: LD_VAR 0 4
30900: PUSH
30901: FOR_IN
30902: IFFALSE 30948
// for j = 1 to 3 do
30904: LD_ADDR_VAR 0 3
30908: PUSH
30909: DOUBLE
30910: LD_INT 1
30912: DEC
30913: ST_TO_ADDR
30914: LD_INT 3
30916: PUSH
30917: FOR_TO
30918: IFFALSE 30944
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30920: LD_VAR 0 2
30924: PPUSH
30925: CALL_OW 274
30929: PPUSH
30930: LD_VAR 0 3
30934: PPUSH
30935: LD_INT 99999
30937: PPUSH
30938: CALL_OW 277
30942: GO 30917
30944: POP
30945: POP
30946: GO 30901
30948: POP
30949: POP
// end ;
30950: LD_VAR 0 1
30954: RET
// export function hHackSetLevel10 ; var i , j ; begin
30955: LD_INT 0
30957: PPUSH
30958: PPUSH
30959: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30960: LD_ADDR_VAR 0 2
30964: PUSH
30965: LD_INT 21
30967: PUSH
30968: LD_INT 1
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PPUSH
30975: CALL_OW 69
30979: PUSH
30980: FOR_IN
30981: IFFALSE 31033
// if IsSelected ( i ) then
30983: LD_VAR 0 2
30987: PPUSH
30988: CALL_OW 306
30992: IFFALSE 31031
// begin for j := 1 to 4 do
30994: LD_ADDR_VAR 0 3
30998: PUSH
30999: DOUBLE
31000: LD_INT 1
31002: DEC
31003: ST_TO_ADDR
31004: LD_INT 4
31006: PUSH
31007: FOR_TO
31008: IFFALSE 31029
// SetSkill ( i , j , 10 ) ;
31010: LD_VAR 0 2
31014: PPUSH
31015: LD_VAR 0 3
31019: PPUSH
31020: LD_INT 10
31022: PPUSH
31023: CALL_OW 237
31027: GO 31007
31029: POP
31030: POP
// end ;
31031: GO 30980
31033: POP
31034: POP
// end ;
31035: LD_VAR 0 1
31039: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31040: LD_INT 0
31042: PPUSH
31043: PPUSH
31044: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31045: LD_ADDR_VAR 0 2
31049: PUSH
31050: LD_INT 22
31052: PUSH
31053: LD_OWVAR 2
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 21
31064: PUSH
31065: LD_INT 1
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PPUSH
31076: CALL_OW 69
31080: PUSH
31081: FOR_IN
31082: IFFALSE 31123
// begin for j := 1 to 4 do
31084: LD_ADDR_VAR 0 3
31088: PUSH
31089: DOUBLE
31090: LD_INT 1
31092: DEC
31093: ST_TO_ADDR
31094: LD_INT 4
31096: PUSH
31097: FOR_TO
31098: IFFALSE 31119
// SetSkill ( i , j , 10 ) ;
31100: LD_VAR 0 2
31104: PPUSH
31105: LD_VAR 0 3
31109: PPUSH
31110: LD_INT 10
31112: PPUSH
31113: CALL_OW 237
31117: GO 31097
31119: POP
31120: POP
// end ;
31121: GO 31081
31123: POP
31124: POP
// end ;
31125: LD_VAR 0 1
31129: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31130: LD_INT 0
31132: PPUSH
// uc_side := your_side ;
31133: LD_ADDR_OWVAR 20
31137: PUSH
31138: LD_OWVAR 2
31142: ST_TO_ADDR
// uc_nation := nation ;
31143: LD_ADDR_OWVAR 21
31147: PUSH
31148: LD_VAR 0 1
31152: ST_TO_ADDR
// InitHc ;
31153: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31157: LD_INT 0
31159: PPUSH
31160: LD_VAR 0 2
31164: PPUSH
31165: LD_VAR 0 3
31169: PPUSH
31170: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31174: LD_VAR 0 4
31178: PPUSH
31179: LD_VAR 0 5
31183: PPUSH
31184: CALL_OW 428
31188: PUSH
31189: LD_INT 0
31191: EQUAL
31192: IFFALSE 31216
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31194: CALL_OW 44
31198: PPUSH
31199: LD_VAR 0 4
31203: PPUSH
31204: LD_VAR 0 5
31208: PPUSH
31209: LD_INT 1
31211: PPUSH
31212: CALL_OW 48
// end ;
31216: LD_VAR 0 6
31220: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31221: LD_INT 0
31223: PPUSH
31224: PPUSH
// uc_side := your_side ;
31225: LD_ADDR_OWVAR 20
31229: PUSH
31230: LD_OWVAR 2
31234: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31235: LD_VAR 0 1
31239: PUSH
31240: LD_INT 1
31242: PUSH
31243: LD_INT 2
31245: PUSH
31246: LD_INT 3
31248: PUSH
31249: LD_INT 4
31251: PUSH
31252: LD_INT 5
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: IN
31262: IFFALSE 31274
// uc_nation := nation_american else
31264: LD_ADDR_OWVAR 21
31268: PUSH
31269: LD_INT 1
31271: ST_TO_ADDR
31272: GO 31317
// if chassis in [ 11 , 12 , 13 , 14 ] then
31274: LD_VAR 0 1
31278: PUSH
31279: LD_INT 11
31281: PUSH
31282: LD_INT 12
31284: PUSH
31285: LD_INT 13
31287: PUSH
31288: LD_INT 14
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: IN
31297: IFFALSE 31309
// uc_nation := nation_arabian else
31299: LD_ADDR_OWVAR 21
31303: PUSH
31304: LD_INT 2
31306: ST_TO_ADDR
31307: GO 31317
// uc_nation := nation_russian ;
31309: LD_ADDR_OWVAR 21
31313: PUSH
31314: LD_INT 3
31316: ST_TO_ADDR
// vc_chassis := chassis ;
31317: LD_ADDR_OWVAR 37
31321: PUSH
31322: LD_VAR 0 1
31326: ST_TO_ADDR
// vc_engine := engine ;
31327: LD_ADDR_OWVAR 39
31331: PUSH
31332: LD_VAR 0 2
31336: ST_TO_ADDR
// vc_control := control ;
31337: LD_ADDR_OWVAR 38
31341: PUSH
31342: LD_VAR 0 3
31346: ST_TO_ADDR
// vc_weapon := weapon ;
31347: LD_ADDR_OWVAR 40
31351: PUSH
31352: LD_VAR 0 4
31356: ST_TO_ADDR
// un := CreateVehicle ;
31357: LD_ADDR_VAR 0 8
31361: PUSH
31362: CALL_OW 45
31366: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31367: LD_VAR 0 8
31371: PPUSH
31372: LD_INT 0
31374: PPUSH
31375: LD_INT 5
31377: PPUSH
31378: CALL_OW 12
31382: PPUSH
31383: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31387: LD_VAR 0 8
31391: PPUSH
31392: LD_VAR 0 5
31396: PPUSH
31397: LD_VAR 0 6
31401: PPUSH
31402: LD_INT 1
31404: PPUSH
31405: CALL_OW 48
// end ;
31409: LD_VAR 0 7
31413: RET
// export hInvincible ; every 1 do
31414: GO 31416
31416: DISABLE
// hInvincible := [ ] ;
31417: LD_ADDR_EXP 134
31421: PUSH
31422: EMPTY
31423: ST_TO_ADDR
31424: END
// every 10 do var i ;
31425: GO 31427
31427: DISABLE
31428: LD_INT 0
31430: PPUSH
// begin enable ;
31431: ENABLE
// if not hInvincible then
31432: LD_EXP 134
31436: NOT
31437: IFFALSE 31441
// exit ;
31439: GO 31485
// for i in hInvincible do
31441: LD_ADDR_VAR 0 1
31445: PUSH
31446: LD_EXP 134
31450: PUSH
31451: FOR_IN
31452: IFFALSE 31483
// if GetLives ( i ) < 1000 then
31454: LD_VAR 0 1
31458: PPUSH
31459: CALL_OW 256
31463: PUSH
31464: LD_INT 1000
31466: LESS
31467: IFFALSE 31481
// SetLives ( i , 1000 ) ;
31469: LD_VAR 0 1
31473: PPUSH
31474: LD_INT 1000
31476: PPUSH
31477: CALL_OW 234
31481: GO 31451
31483: POP
31484: POP
// end ;
31485: PPOPN 1
31487: END
// export function hHackInvincible ; var i ; begin
31488: LD_INT 0
31490: PPUSH
31491: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31492: LD_ADDR_VAR 0 2
31496: PUSH
31497: LD_INT 2
31499: PUSH
31500: LD_INT 21
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 21
31512: PUSH
31513: LD_INT 2
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: LIST
31524: PPUSH
31525: CALL_OW 69
31529: PUSH
31530: FOR_IN
31531: IFFALSE 31592
// if IsSelected ( i ) then
31533: LD_VAR 0 2
31537: PPUSH
31538: CALL_OW 306
31542: IFFALSE 31590
// begin if i in hInvincible then
31544: LD_VAR 0 2
31548: PUSH
31549: LD_EXP 134
31553: IN
31554: IFFALSE 31574
// hInvincible := hInvincible diff i else
31556: LD_ADDR_EXP 134
31560: PUSH
31561: LD_EXP 134
31565: PUSH
31566: LD_VAR 0 2
31570: DIFF
31571: ST_TO_ADDR
31572: GO 31590
// hInvincible := hInvincible union i ;
31574: LD_ADDR_EXP 134
31578: PUSH
31579: LD_EXP 134
31583: PUSH
31584: LD_VAR 0 2
31588: UNION
31589: ST_TO_ADDR
// end ;
31590: GO 31530
31592: POP
31593: POP
// end ;
31594: LD_VAR 0 1
31598: RET
// export function hHackInvisible ; var i , j ; begin
31599: LD_INT 0
31601: PPUSH
31602: PPUSH
31603: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31604: LD_ADDR_VAR 0 2
31608: PUSH
31609: LD_INT 21
31611: PUSH
31612: LD_INT 1
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PPUSH
31619: CALL_OW 69
31623: PUSH
31624: FOR_IN
31625: IFFALSE 31649
// if IsSelected ( i ) then
31627: LD_VAR 0 2
31631: PPUSH
31632: CALL_OW 306
31636: IFFALSE 31647
// ComForceInvisible ( i ) ;
31638: LD_VAR 0 2
31642: PPUSH
31643: CALL_OW 496
31647: GO 31624
31649: POP
31650: POP
// end ;
31651: LD_VAR 0 1
31655: RET
// export function hHackChangeYourSide ; begin
31656: LD_INT 0
31658: PPUSH
// if your_side = 8 then
31659: LD_OWVAR 2
31663: PUSH
31664: LD_INT 8
31666: EQUAL
31667: IFFALSE 31679
// your_side := 0 else
31669: LD_ADDR_OWVAR 2
31673: PUSH
31674: LD_INT 0
31676: ST_TO_ADDR
31677: GO 31693
// your_side := your_side + 1 ;
31679: LD_ADDR_OWVAR 2
31683: PUSH
31684: LD_OWVAR 2
31688: PUSH
31689: LD_INT 1
31691: PLUS
31692: ST_TO_ADDR
// end ;
31693: LD_VAR 0 1
31697: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31698: LD_INT 0
31700: PPUSH
31701: PPUSH
31702: PPUSH
// for i in all_units do
31703: LD_ADDR_VAR 0 2
31707: PUSH
31708: LD_OWVAR 3
31712: PUSH
31713: FOR_IN
31714: IFFALSE 31792
// if IsSelected ( i ) then
31716: LD_VAR 0 2
31720: PPUSH
31721: CALL_OW 306
31725: IFFALSE 31790
// begin j := GetSide ( i ) ;
31727: LD_ADDR_VAR 0 3
31731: PUSH
31732: LD_VAR 0 2
31736: PPUSH
31737: CALL_OW 255
31741: ST_TO_ADDR
// if j = 8 then
31742: LD_VAR 0 3
31746: PUSH
31747: LD_INT 8
31749: EQUAL
31750: IFFALSE 31762
// j := 0 else
31752: LD_ADDR_VAR 0 3
31756: PUSH
31757: LD_INT 0
31759: ST_TO_ADDR
31760: GO 31776
// j := j + 1 ;
31762: LD_ADDR_VAR 0 3
31766: PUSH
31767: LD_VAR 0 3
31771: PUSH
31772: LD_INT 1
31774: PLUS
31775: ST_TO_ADDR
// SetSide ( i , j ) ;
31776: LD_VAR 0 2
31780: PPUSH
31781: LD_VAR 0 3
31785: PPUSH
31786: CALL_OW 235
// end ;
31790: GO 31713
31792: POP
31793: POP
// end ;
31794: LD_VAR 0 1
31798: RET
// export function hHackFog ; begin
31799: LD_INT 0
31801: PPUSH
// FogOff ( true ) ;
31802: LD_INT 1
31804: PPUSH
31805: CALL_OW 344
// end ;
31809: LD_VAR 0 1
31813: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31814: LD_INT 0
31816: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31817: LD_VAR 0 1
31821: PPUSH
31822: LD_VAR 0 2
31826: PPUSH
31827: LD_VAR 0 3
31831: PPUSH
31832: LD_INT 1
31834: PPUSH
31835: LD_INT 1
31837: PPUSH
31838: CALL_OW 483
// CenterOnXY ( x , y ) ;
31842: LD_VAR 0 2
31846: PPUSH
31847: LD_VAR 0 3
31851: PPUSH
31852: CALL_OW 84
// end ; end_of_file
31856: LD_VAR 0 4
31860: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31861: LD_INT 0
31863: PPUSH
31864: PPUSH
31865: PPUSH
31866: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31867: LD_VAR 0 1
31871: PPUSH
31872: CALL_OW 264
31876: PUSH
31877: LD_EXP 66
31881: EQUAL
31882: IFFALSE 31954
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31884: LD_INT 68
31886: PPUSH
31887: LD_VAR 0 1
31891: PPUSH
31892: CALL_OW 255
31896: PPUSH
31897: CALL_OW 321
31901: PUSH
31902: LD_INT 2
31904: EQUAL
31905: IFFALSE 31917
// eff := 70 else
31907: LD_ADDR_VAR 0 4
31911: PUSH
31912: LD_INT 70
31914: ST_TO_ADDR
31915: GO 31925
// eff := 30 ;
31917: LD_ADDR_VAR 0 4
31921: PUSH
31922: LD_INT 30
31924: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31925: LD_VAR 0 1
31929: PPUSH
31930: CALL_OW 250
31934: PPUSH
31935: LD_VAR 0 1
31939: PPUSH
31940: CALL_OW 251
31944: PPUSH
31945: LD_VAR 0 4
31949: PPUSH
31950: CALL_OW 495
// end ; end ;
31954: LD_VAR 0 2
31958: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31959: LD_INT 0
31961: PPUSH
// end ;
31962: LD_VAR 0 4
31966: RET
// export function SOS_Command ( cmd ) ; begin
31967: LD_INT 0
31969: PPUSH
// end ;
31970: LD_VAR 0 2
31974: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31975: LD_INT 0
31977: PPUSH
// if cmd = 121 then
31978: LD_VAR 0 1
31982: PUSH
31983: LD_INT 121
31985: EQUAL
31986: IFFALSE 31988
// end ;
31988: LD_VAR 0 6
31992: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31993: LD_INT 0
31995: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31996: LD_VAR 0 1
32000: PUSH
32001: LD_INT 250
32003: EQUAL
32004: PUSH
32005: LD_VAR 0 2
32009: PPUSH
32010: CALL_OW 264
32014: PUSH
32015: LD_EXP 69
32019: EQUAL
32020: AND
32021: IFFALSE 32042
// MinerPlaceMine ( unit , x , y ) ;
32023: LD_VAR 0 2
32027: PPUSH
32028: LD_VAR 0 4
32032: PPUSH
32033: LD_VAR 0 5
32037: PPUSH
32038: CALL 34391 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32042: LD_VAR 0 1
32046: PUSH
32047: LD_INT 251
32049: EQUAL
32050: PUSH
32051: LD_VAR 0 2
32055: PPUSH
32056: CALL_OW 264
32060: PUSH
32061: LD_EXP 69
32065: EQUAL
32066: AND
32067: IFFALSE 32088
// MinerDetonateMine ( unit , x , y ) ;
32069: LD_VAR 0 2
32073: PPUSH
32074: LD_VAR 0 4
32078: PPUSH
32079: LD_VAR 0 5
32083: PPUSH
32084: CALL 34668 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32088: LD_VAR 0 1
32092: PUSH
32093: LD_INT 252
32095: EQUAL
32096: PUSH
32097: LD_VAR 0 2
32101: PPUSH
32102: CALL_OW 264
32106: PUSH
32107: LD_EXP 69
32111: EQUAL
32112: AND
32113: IFFALSE 32134
// MinerCreateMinefield ( unit , x , y ) ;
32115: LD_VAR 0 2
32119: PPUSH
32120: LD_VAR 0 4
32124: PPUSH
32125: LD_VAR 0 5
32129: PPUSH
32130: CALL 35085 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32134: LD_VAR 0 1
32138: PUSH
32139: LD_INT 253
32141: EQUAL
32142: PUSH
32143: LD_VAR 0 2
32147: PPUSH
32148: CALL_OW 257
32152: PUSH
32153: LD_INT 5
32155: EQUAL
32156: AND
32157: IFFALSE 32178
// ComBinocular ( unit , x , y ) ;
32159: LD_VAR 0 2
32163: PPUSH
32164: LD_VAR 0 4
32168: PPUSH
32169: LD_VAR 0 5
32173: PPUSH
32174: CALL 35456 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32178: LD_VAR 0 1
32182: PUSH
32183: LD_INT 254
32185: EQUAL
32186: PUSH
32187: LD_VAR 0 2
32191: PPUSH
32192: CALL_OW 264
32196: PUSH
32197: LD_EXP 64
32201: EQUAL
32202: AND
32203: PUSH
32204: LD_VAR 0 3
32208: PPUSH
32209: CALL_OW 263
32213: PUSH
32214: LD_INT 3
32216: EQUAL
32217: AND
32218: IFFALSE 32234
// HackDestroyVehicle ( unit , selectedUnit ) ;
32220: LD_VAR 0 2
32224: PPUSH
32225: LD_VAR 0 3
32229: PPUSH
32230: CALL 33751 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32234: LD_VAR 0 1
32238: PUSH
32239: LD_INT 255
32241: EQUAL
32242: PUSH
32243: LD_VAR 0 2
32247: PPUSH
32248: CALL_OW 264
32252: PUSH
32253: LD_INT 14
32255: PUSH
32256: LD_INT 53
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: IN
32263: AND
32264: PUSH
32265: LD_VAR 0 4
32269: PPUSH
32270: LD_VAR 0 5
32274: PPUSH
32275: CALL_OW 488
32279: AND
32280: IFFALSE 32304
// CutTreeXYR ( unit , x , y , 12 ) ;
32282: LD_VAR 0 2
32286: PPUSH
32287: LD_VAR 0 4
32291: PPUSH
32292: LD_VAR 0 5
32296: PPUSH
32297: LD_INT 12
32299: PPUSH
32300: CALL 32317 0 4
// end ;
32304: LD_VAR 0 6
32308: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
32309: LD_INT 0
32311: PPUSH
// end ;
32312: LD_VAR 0 4
32316: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32317: LD_INT 0
32319: PPUSH
32320: PPUSH
32321: PPUSH
32322: PPUSH
32323: PPUSH
32324: PPUSH
32325: PPUSH
32326: PPUSH
32327: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32328: LD_VAR 0 1
32332: NOT
32333: PUSH
32334: LD_VAR 0 2
32338: PPUSH
32339: LD_VAR 0 3
32343: PPUSH
32344: CALL_OW 488
32348: NOT
32349: OR
32350: PUSH
32351: LD_VAR 0 4
32355: NOT
32356: OR
32357: IFFALSE 32361
// exit ;
32359: GO 32701
// list := [ ] ;
32361: LD_ADDR_VAR 0 13
32365: PUSH
32366: EMPTY
32367: ST_TO_ADDR
// if x - r < 0 then
32368: LD_VAR 0 2
32372: PUSH
32373: LD_VAR 0 4
32377: MINUS
32378: PUSH
32379: LD_INT 0
32381: LESS
32382: IFFALSE 32394
// min_x := 0 else
32384: LD_ADDR_VAR 0 7
32388: PUSH
32389: LD_INT 0
32391: ST_TO_ADDR
32392: GO 32410
// min_x := x - r ;
32394: LD_ADDR_VAR 0 7
32398: PUSH
32399: LD_VAR 0 2
32403: PUSH
32404: LD_VAR 0 4
32408: MINUS
32409: ST_TO_ADDR
// if y - r < 0 then
32410: LD_VAR 0 3
32414: PUSH
32415: LD_VAR 0 4
32419: MINUS
32420: PUSH
32421: LD_INT 0
32423: LESS
32424: IFFALSE 32436
// min_y := 0 else
32426: LD_ADDR_VAR 0 8
32430: PUSH
32431: LD_INT 0
32433: ST_TO_ADDR
32434: GO 32452
// min_y := y - r ;
32436: LD_ADDR_VAR 0 8
32440: PUSH
32441: LD_VAR 0 3
32445: PUSH
32446: LD_VAR 0 4
32450: MINUS
32451: ST_TO_ADDR
// max_x := x + r ;
32452: LD_ADDR_VAR 0 9
32456: PUSH
32457: LD_VAR 0 2
32461: PUSH
32462: LD_VAR 0 4
32466: PLUS
32467: ST_TO_ADDR
// max_y := y + r ;
32468: LD_ADDR_VAR 0 10
32472: PUSH
32473: LD_VAR 0 3
32477: PUSH
32478: LD_VAR 0 4
32482: PLUS
32483: ST_TO_ADDR
// for _x = min_x to max_x do
32484: LD_ADDR_VAR 0 11
32488: PUSH
32489: DOUBLE
32490: LD_VAR 0 7
32494: DEC
32495: ST_TO_ADDR
32496: LD_VAR 0 9
32500: PUSH
32501: FOR_TO
32502: IFFALSE 32619
// for _y = min_y to max_y do
32504: LD_ADDR_VAR 0 12
32508: PUSH
32509: DOUBLE
32510: LD_VAR 0 8
32514: DEC
32515: ST_TO_ADDR
32516: LD_VAR 0 10
32520: PUSH
32521: FOR_TO
32522: IFFALSE 32615
// begin if not ValidHex ( _x , _y ) then
32524: LD_VAR 0 11
32528: PPUSH
32529: LD_VAR 0 12
32533: PPUSH
32534: CALL_OW 488
32538: NOT
32539: IFFALSE 32543
// continue ;
32541: GO 32521
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32543: LD_VAR 0 11
32547: PPUSH
32548: LD_VAR 0 12
32552: PPUSH
32553: CALL_OW 351
32557: PUSH
32558: LD_VAR 0 11
32562: PPUSH
32563: LD_VAR 0 12
32567: PPUSH
32568: CALL_OW 554
32572: AND
32573: IFFALSE 32613
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32575: LD_ADDR_VAR 0 13
32579: PUSH
32580: LD_VAR 0 13
32584: PPUSH
32585: LD_VAR 0 13
32589: PUSH
32590: LD_INT 1
32592: PLUS
32593: PPUSH
32594: LD_VAR 0 11
32598: PUSH
32599: LD_VAR 0 12
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PPUSH
32608: CALL_OW 2
32612: ST_TO_ADDR
// end ;
32613: GO 32521
32615: POP
32616: POP
32617: GO 32501
32619: POP
32620: POP
// if not list then
32621: LD_VAR 0 13
32625: NOT
32626: IFFALSE 32630
// exit ;
32628: GO 32701
// for i in list do
32630: LD_ADDR_VAR 0 6
32634: PUSH
32635: LD_VAR 0 13
32639: PUSH
32640: FOR_IN
32641: IFFALSE 32699
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32643: LD_VAR 0 1
32647: PPUSH
32648: LD_STRING M
32650: PUSH
32651: LD_VAR 0 6
32655: PUSH
32656: LD_INT 1
32658: ARRAY
32659: PUSH
32660: LD_VAR 0 6
32664: PUSH
32665: LD_INT 2
32667: ARRAY
32668: PUSH
32669: LD_INT 0
32671: PUSH
32672: LD_INT 0
32674: PUSH
32675: LD_INT 0
32677: PUSH
32678: LD_INT 0
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: PUSH
32690: EMPTY
32691: LIST
32692: PPUSH
32693: CALL_OW 447
32697: GO 32640
32699: POP
32700: POP
// end ;
32701: LD_VAR 0 5
32705: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32706: LD_EXP 137
32710: NOT
32711: IFFALSE 32761
32713: GO 32715
32715: DISABLE
// begin initHack := true ;
32716: LD_ADDR_EXP 137
32720: PUSH
32721: LD_INT 1
32723: ST_TO_ADDR
// hackTanks := [ ] ;
32724: LD_ADDR_EXP 138
32728: PUSH
32729: EMPTY
32730: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32731: LD_ADDR_EXP 139
32735: PUSH
32736: EMPTY
32737: ST_TO_ADDR
// hackLimit := 3 ;
32738: LD_ADDR_EXP 140
32742: PUSH
32743: LD_INT 3
32745: ST_TO_ADDR
// hackDist := 12 ;
32746: LD_ADDR_EXP 141
32750: PUSH
32751: LD_INT 12
32753: ST_TO_ADDR
// hackCounter := [ ] ;
32754: LD_ADDR_EXP 142
32758: PUSH
32759: EMPTY
32760: ST_TO_ADDR
// end ;
32761: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32762: LD_EXP 137
32766: PUSH
32767: LD_INT 34
32769: PUSH
32770: LD_EXP 64
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PPUSH
32779: CALL_OW 69
32783: AND
32784: IFFALSE 33039
32786: GO 32788
32788: DISABLE
32789: LD_INT 0
32791: PPUSH
32792: PPUSH
// begin enable ;
32793: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32794: LD_ADDR_VAR 0 1
32798: PUSH
32799: LD_INT 34
32801: PUSH
32802: LD_EXP 64
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PPUSH
32811: CALL_OW 69
32815: PUSH
32816: FOR_IN
32817: IFFALSE 33037
// begin if not i in hackTanks then
32819: LD_VAR 0 1
32823: PUSH
32824: LD_EXP 138
32828: IN
32829: NOT
32830: IFFALSE 32913
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32832: LD_ADDR_EXP 138
32836: PUSH
32837: LD_EXP 138
32841: PPUSH
32842: LD_EXP 138
32846: PUSH
32847: LD_INT 1
32849: PLUS
32850: PPUSH
32851: LD_VAR 0 1
32855: PPUSH
32856: CALL_OW 1
32860: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32861: LD_ADDR_EXP 139
32865: PUSH
32866: LD_EXP 139
32870: PPUSH
32871: LD_EXP 139
32875: PUSH
32876: LD_INT 1
32878: PLUS
32879: PPUSH
32880: EMPTY
32881: PPUSH
32882: CALL_OW 1
32886: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32887: LD_ADDR_EXP 142
32891: PUSH
32892: LD_EXP 142
32896: PPUSH
32897: LD_EXP 142
32901: PUSH
32902: LD_INT 1
32904: PLUS
32905: PPUSH
32906: EMPTY
32907: PPUSH
32908: CALL_OW 1
32912: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32913: LD_VAR 0 1
32917: PPUSH
32918: CALL_OW 302
32922: NOT
32923: IFFALSE 32936
// begin HackUnlinkAll ( i ) ;
32925: LD_VAR 0 1
32929: PPUSH
32930: CALL 33042 0 1
// continue ;
32934: GO 32816
// end ; HackCheckCapturedStatus ( i ) ;
32936: LD_VAR 0 1
32940: PPUSH
32941: CALL 33485 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32945: LD_ADDR_VAR 0 2
32949: PUSH
32950: LD_INT 81
32952: PUSH
32953: LD_VAR 0 1
32957: PPUSH
32958: CALL_OW 255
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 33
32969: PUSH
32970: LD_INT 3
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 91
32979: PUSH
32980: LD_VAR 0 1
32984: PUSH
32985: LD_EXP 141
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 50
32997: PUSH
32998: EMPTY
32999: LIST
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: PPUSH
33007: CALL_OW 69
33011: ST_TO_ADDR
// if not tmp then
33012: LD_VAR 0 2
33016: NOT
33017: IFFALSE 33021
// continue ;
33019: GO 32816
// HackLink ( i , tmp ) ;
33021: LD_VAR 0 1
33025: PPUSH
33026: LD_VAR 0 2
33030: PPUSH
33031: CALL 33178 0 2
// end ;
33035: GO 32816
33037: POP
33038: POP
// end ;
33039: PPOPN 2
33041: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33042: LD_INT 0
33044: PPUSH
33045: PPUSH
33046: PPUSH
// if not hack in hackTanks then
33047: LD_VAR 0 1
33051: PUSH
33052: LD_EXP 138
33056: IN
33057: NOT
33058: IFFALSE 33062
// exit ;
33060: GO 33173
// index := GetElementIndex ( hackTanks , hack ) ;
33062: LD_ADDR_VAR 0 4
33066: PUSH
33067: LD_EXP 138
33071: PPUSH
33072: LD_VAR 0 1
33076: PPUSH
33077: CALL 40607 0 2
33081: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33082: LD_EXP 139
33086: PUSH
33087: LD_VAR 0 4
33091: ARRAY
33092: IFFALSE 33173
// begin for i in hackTanksCaptured [ index ] do
33094: LD_ADDR_VAR 0 3
33098: PUSH
33099: LD_EXP 139
33103: PUSH
33104: LD_VAR 0 4
33108: ARRAY
33109: PUSH
33110: FOR_IN
33111: IFFALSE 33137
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33113: LD_VAR 0 3
33117: PUSH
33118: LD_INT 1
33120: ARRAY
33121: PPUSH
33122: LD_VAR 0 3
33126: PUSH
33127: LD_INT 2
33129: ARRAY
33130: PPUSH
33131: CALL_OW 235
33135: GO 33110
33137: POP
33138: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33139: LD_ADDR_EXP 139
33143: PUSH
33144: LD_EXP 139
33148: PPUSH
33149: LD_VAR 0 4
33153: PPUSH
33154: EMPTY
33155: PPUSH
33156: CALL_OW 1
33160: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33161: LD_VAR 0 1
33165: PPUSH
33166: LD_INT 0
33168: PPUSH
33169: CALL_OW 505
// end ; end ;
33173: LD_VAR 0 2
33177: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33178: LD_INT 0
33180: PPUSH
33181: PPUSH
33182: PPUSH
// if not hack in hackTanks or not vehicles then
33183: LD_VAR 0 1
33187: PUSH
33188: LD_EXP 138
33192: IN
33193: NOT
33194: PUSH
33195: LD_VAR 0 2
33199: NOT
33200: OR
33201: IFFALSE 33205
// exit ;
33203: GO 33480
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33205: LD_ADDR_VAR 0 2
33209: PUSH
33210: LD_VAR 0 1
33214: PPUSH
33215: LD_VAR 0 2
33219: PPUSH
33220: LD_INT 1
33222: PPUSH
33223: LD_INT 1
33225: PPUSH
33226: CALL 41257 0 4
33230: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33231: LD_ADDR_VAR 0 5
33235: PUSH
33236: LD_EXP 138
33240: PPUSH
33241: LD_VAR 0 1
33245: PPUSH
33246: CALL 40607 0 2
33250: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33251: LD_EXP 139
33255: PUSH
33256: LD_VAR 0 5
33260: ARRAY
33261: PUSH
33262: LD_EXP 140
33266: LESS
33267: IFFALSE 33456
// begin for i := 1 to vehicles do
33269: LD_ADDR_VAR 0 4
33273: PUSH
33274: DOUBLE
33275: LD_INT 1
33277: DEC
33278: ST_TO_ADDR
33279: LD_VAR 0 2
33283: PUSH
33284: FOR_TO
33285: IFFALSE 33454
// begin if hackTanksCaptured [ index ] = hackLimit then
33287: LD_EXP 139
33291: PUSH
33292: LD_VAR 0 5
33296: ARRAY
33297: PUSH
33298: LD_EXP 140
33302: EQUAL
33303: IFFALSE 33307
// break ;
33305: GO 33454
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33307: LD_ADDR_EXP 142
33311: PUSH
33312: LD_EXP 142
33316: PPUSH
33317: LD_VAR 0 5
33321: PPUSH
33322: LD_EXP 142
33326: PUSH
33327: LD_VAR 0 5
33331: ARRAY
33332: PUSH
33333: LD_INT 1
33335: PLUS
33336: PPUSH
33337: CALL_OW 1
33341: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33342: LD_ADDR_EXP 139
33346: PUSH
33347: LD_EXP 139
33351: PPUSH
33352: LD_VAR 0 5
33356: PUSH
33357: LD_EXP 139
33361: PUSH
33362: LD_VAR 0 5
33366: ARRAY
33367: PUSH
33368: LD_INT 1
33370: PLUS
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PPUSH
33376: LD_VAR 0 2
33380: PUSH
33381: LD_VAR 0 4
33385: ARRAY
33386: PUSH
33387: LD_VAR 0 2
33391: PUSH
33392: LD_VAR 0 4
33396: ARRAY
33397: PPUSH
33398: CALL_OW 255
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PPUSH
33407: CALL 40822 0 3
33411: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33412: LD_VAR 0 2
33416: PUSH
33417: LD_VAR 0 4
33421: ARRAY
33422: PPUSH
33423: LD_VAR 0 1
33427: PPUSH
33428: CALL_OW 255
33432: PPUSH
33433: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33437: LD_VAR 0 2
33441: PUSH
33442: LD_VAR 0 4
33446: ARRAY
33447: PPUSH
33448: CALL_OW 141
// end ;
33452: GO 33284
33454: POP
33455: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33456: LD_VAR 0 1
33460: PPUSH
33461: LD_EXP 139
33465: PUSH
33466: LD_VAR 0 5
33470: ARRAY
33471: PUSH
33472: LD_INT 0
33474: PLUS
33475: PPUSH
33476: CALL_OW 505
// end ;
33480: LD_VAR 0 3
33484: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33485: LD_INT 0
33487: PPUSH
33488: PPUSH
33489: PPUSH
33490: PPUSH
// if not hack in hackTanks then
33491: LD_VAR 0 1
33495: PUSH
33496: LD_EXP 138
33500: IN
33501: NOT
33502: IFFALSE 33506
// exit ;
33504: GO 33746
// index := GetElementIndex ( hackTanks , hack ) ;
33506: LD_ADDR_VAR 0 4
33510: PUSH
33511: LD_EXP 138
33515: PPUSH
33516: LD_VAR 0 1
33520: PPUSH
33521: CALL 40607 0 2
33525: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33526: LD_ADDR_VAR 0 3
33530: PUSH
33531: DOUBLE
33532: LD_EXP 139
33536: PUSH
33537: LD_VAR 0 4
33541: ARRAY
33542: INC
33543: ST_TO_ADDR
33544: LD_INT 1
33546: PUSH
33547: FOR_DOWNTO
33548: IFFALSE 33720
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33550: LD_ADDR_VAR 0 5
33554: PUSH
33555: LD_EXP 139
33559: PUSH
33560: LD_VAR 0 4
33564: ARRAY
33565: PUSH
33566: LD_VAR 0 3
33570: ARRAY
33571: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33572: LD_VAR 0 5
33576: PUSH
33577: LD_INT 1
33579: ARRAY
33580: PPUSH
33581: CALL_OW 302
33585: NOT
33586: PUSH
33587: LD_VAR 0 5
33591: PUSH
33592: LD_INT 1
33594: ARRAY
33595: PPUSH
33596: CALL_OW 255
33600: PUSH
33601: LD_VAR 0 1
33605: PPUSH
33606: CALL_OW 255
33610: NONEQUAL
33611: OR
33612: IFFALSE 33718
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33614: LD_VAR 0 5
33618: PUSH
33619: LD_INT 1
33621: ARRAY
33622: PPUSH
33623: CALL_OW 305
33627: PUSH
33628: LD_VAR 0 5
33632: PUSH
33633: LD_INT 1
33635: ARRAY
33636: PPUSH
33637: CALL_OW 255
33641: PUSH
33642: LD_VAR 0 1
33646: PPUSH
33647: CALL_OW 255
33651: EQUAL
33652: AND
33653: IFFALSE 33677
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33655: LD_VAR 0 5
33659: PUSH
33660: LD_INT 1
33662: ARRAY
33663: PPUSH
33664: LD_VAR 0 5
33668: PUSH
33669: LD_INT 2
33671: ARRAY
33672: PPUSH
33673: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33677: LD_ADDR_EXP 139
33681: PUSH
33682: LD_EXP 139
33686: PPUSH
33687: LD_VAR 0 4
33691: PPUSH
33692: LD_EXP 139
33696: PUSH
33697: LD_VAR 0 4
33701: ARRAY
33702: PPUSH
33703: LD_VAR 0 3
33707: PPUSH
33708: CALL_OW 3
33712: PPUSH
33713: CALL_OW 1
33717: ST_TO_ADDR
// end ; end ;
33718: GO 33547
33720: POP
33721: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33722: LD_VAR 0 1
33726: PPUSH
33727: LD_EXP 139
33731: PUSH
33732: LD_VAR 0 4
33736: ARRAY
33737: PUSH
33738: LD_INT 0
33740: PLUS
33741: PPUSH
33742: CALL_OW 505
// end ;
33746: LD_VAR 0 2
33750: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33751: LD_INT 0
33753: PPUSH
33754: PPUSH
33755: PPUSH
33756: PPUSH
// if not hack in hackTanks then
33757: LD_VAR 0 1
33761: PUSH
33762: LD_EXP 138
33766: IN
33767: NOT
33768: IFFALSE 33772
// exit ;
33770: GO 33857
// index := GetElementIndex ( hackTanks , hack ) ;
33772: LD_ADDR_VAR 0 5
33776: PUSH
33777: LD_EXP 138
33781: PPUSH
33782: LD_VAR 0 1
33786: PPUSH
33787: CALL 40607 0 2
33791: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33792: LD_ADDR_VAR 0 4
33796: PUSH
33797: DOUBLE
33798: LD_INT 1
33800: DEC
33801: ST_TO_ADDR
33802: LD_EXP 139
33806: PUSH
33807: LD_VAR 0 5
33811: ARRAY
33812: PUSH
33813: FOR_TO
33814: IFFALSE 33855
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33816: LD_EXP 139
33820: PUSH
33821: LD_VAR 0 5
33825: ARRAY
33826: PUSH
33827: LD_VAR 0 4
33831: ARRAY
33832: PUSH
33833: LD_INT 1
33835: ARRAY
33836: PUSH
33837: LD_VAR 0 2
33841: EQUAL
33842: IFFALSE 33853
// KillUnit ( vehicle ) ;
33844: LD_VAR 0 2
33848: PPUSH
33849: CALL_OW 66
33853: GO 33813
33855: POP
33856: POP
// end ;
33857: LD_VAR 0 3
33861: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33862: LD_EXP 143
33866: NOT
33867: IFFALSE 33902
33869: GO 33871
33871: DISABLE
// begin initMiner := true ;
33872: LD_ADDR_EXP 143
33876: PUSH
33877: LD_INT 1
33879: ST_TO_ADDR
// minersList := [ ] ;
33880: LD_ADDR_EXP 144
33884: PUSH
33885: EMPTY
33886: ST_TO_ADDR
// minerMinesList := [ ] ;
33887: LD_ADDR_EXP 145
33891: PUSH
33892: EMPTY
33893: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
33894: LD_ADDR_EXP 146
33898: PUSH
33899: LD_INT 5
33901: ST_TO_ADDR
// end ;
33902: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
33903: LD_EXP 143
33907: PUSH
33908: LD_INT 34
33910: PUSH
33911: LD_EXP 69
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PPUSH
33920: CALL_OW 69
33924: AND
33925: IFFALSE 34388
33927: GO 33929
33929: DISABLE
33930: LD_INT 0
33932: PPUSH
33933: PPUSH
33934: PPUSH
33935: PPUSH
// begin enable ;
33936: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33937: LD_ADDR_VAR 0 1
33941: PUSH
33942: LD_INT 34
33944: PUSH
33945: LD_EXP 69
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PPUSH
33954: CALL_OW 69
33958: PUSH
33959: FOR_IN
33960: IFFALSE 34032
// begin if not i in minersList then
33962: LD_VAR 0 1
33966: PUSH
33967: LD_EXP 144
33971: IN
33972: NOT
33973: IFFALSE 34030
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33975: LD_ADDR_EXP 144
33979: PUSH
33980: LD_EXP 144
33984: PPUSH
33985: LD_EXP 144
33989: PUSH
33990: LD_INT 1
33992: PLUS
33993: PPUSH
33994: LD_VAR 0 1
33998: PPUSH
33999: CALL_OW 1
34003: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34004: LD_ADDR_EXP 145
34008: PUSH
34009: LD_EXP 145
34013: PPUSH
34014: LD_EXP 145
34018: PUSH
34019: LD_INT 1
34021: PLUS
34022: PPUSH
34023: EMPTY
34024: PPUSH
34025: CALL_OW 1
34029: ST_TO_ADDR
// end end ;
34030: GO 33959
34032: POP
34033: POP
// for i := minerMinesList downto 1 do
34034: LD_ADDR_VAR 0 1
34038: PUSH
34039: DOUBLE
34040: LD_EXP 145
34044: INC
34045: ST_TO_ADDR
34046: LD_INT 1
34048: PUSH
34049: FOR_DOWNTO
34050: IFFALSE 34386
// begin if IsLive ( minersList [ i ] ) then
34052: LD_EXP 144
34056: PUSH
34057: LD_VAR 0 1
34061: ARRAY
34062: PPUSH
34063: CALL_OW 300
34067: IFFALSE 34095
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34069: LD_EXP 144
34073: PUSH
34074: LD_VAR 0 1
34078: ARRAY
34079: PPUSH
34080: LD_EXP 145
34084: PUSH
34085: LD_VAR 0 1
34089: ARRAY
34090: PPUSH
34091: CALL_OW 505
// if not minerMinesList [ i ] then
34095: LD_EXP 145
34099: PUSH
34100: LD_VAR 0 1
34104: ARRAY
34105: NOT
34106: IFFALSE 34110
// continue ;
34108: GO 34049
// for j := minerMinesList [ i ] downto 1 do
34110: LD_ADDR_VAR 0 2
34114: PUSH
34115: DOUBLE
34116: LD_EXP 145
34120: PUSH
34121: LD_VAR 0 1
34125: ARRAY
34126: INC
34127: ST_TO_ADDR
34128: LD_INT 1
34130: PUSH
34131: FOR_DOWNTO
34132: IFFALSE 34382
// begin side := GetSide ( minersList [ i ] ) ;
34134: LD_ADDR_VAR 0 3
34138: PUSH
34139: LD_EXP 144
34143: PUSH
34144: LD_VAR 0 1
34148: ARRAY
34149: PPUSH
34150: CALL_OW 255
34154: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34155: LD_ADDR_VAR 0 4
34159: PUSH
34160: LD_EXP 145
34164: PUSH
34165: LD_VAR 0 1
34169: ARRAY
34170: PUSH
34171: LD_VAR 0 2
34175: ARRAY
34176: PUSH
34177: LD_INT 1
34179: ARRAY
34180: PPUSH
34181: LD_EXP 145
34185: PUSH
34186: LD_VAR 0 1
34190: ARRAY
34191: PUSH
34192: LD_VAR 0 2
34196: ARRAY
34197: PUSH
34198: LD_INT 2
34200: ARRAY
34201: PPUSH
34202: CALL_OW 428
34206: ST_TO_ADDR
// if not tmp then
34207: LD_VAR 0 4
34211: NOT
34212: IFFALSE 34216
// continue ;
34214: GO 34131
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34216: LD_VAR 0 4
34220: PUSH
34221: LD_INT 81
34223: PUSH
34224: LD_VAR 0 3
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PPUSH
34233: CALL_OW 69
34237: IN
34238: PUSH
34239: LD_EXP 145
34243: PUSH
34244: LD_VAR 0 1
34248: ARRAY
34249: PUSH
34250: LD_VAR 0 2
34254: ARRAY
34255: PUSH
34256: LD_INT 1
34258: ARRAY
34259: PPUSH
34260: LD_EXP 145
34264: PUSH
34265: LD_VAR 0 1
34269: ARRAY
34270: PUSH
34271: LD_VAR 0 2
34275: ARRAY
34276: PUSH
34277: LD_INT 2
34279: ARRAY
34280: PPUSH
34281: CALL_OW 458
34285: AND
34286: IFFALSE 34380
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34288: LD_EXP 145
34292: PUSH
34293: LD_VAR 0 1
34297: ARRAY
34298: PUSH
34299: LD_VAR 0 2
34303: ARRAY
34304: PUSH
34305: LD_INT 1
34307: ARRAY
34308: PPUSH
34309: LD_EXP 145
34313: PUSH
34314: LD_VAR 0 1
34318: ARRAY
34319: PUSH
34320: LD_VAR 0 2
34324: ARRAY
34325: PUSH
34326: LD_INT 2
34328: ARRAY
34329: PPUSH
34330: LD_VAR 0 3
34334: PPUSH
34335: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34339: LD_ADDR_EXP 145
34343: PUSH
34344: LD_EXP 145
34348: PPUSH
34349: LD_VAR 0 1
34353: PPUSH
34354: LD_EXP 145
34358: PUSH
34359: LD_VAR 0 1
34363: ARRAY
34364: PPUSH
34365: LD_VAR 0 2
34369: PPUSH
34370: CALL_OW 3
34374: PPUSH
34375: CALL_OW 1
34379: ST_TO_ADDR
// end ; end ;
34380: GO 34131
34382: POP
34383: POP
// end ;
34384: GO 34049
34386: POP
34387: POP
// end ;
34388: PPOPN 4
34390: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34391: LD_INT 0
34393: PPUSH
34394: PPUSH
// result := false ;
34395: LD_ADDR_VAR 0 4
34399: PUSH
34400: LD_INT 0
34402: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34403: LD_VAR 0 1
34407: PPUSH
34408: CALL_OW 264
34412: PUSH
34413: LD_EXP 69
34417: EQUAL
34418: NOT
34419: IFFALSE 34423
// exit ;
34421: GO 34663
// index := GetElementIndex ( minersList , unit ) ;
34423: LD_ADDR_VAR 0 5
34427: PUSH
34428: LD_EXP 144
34432: PPUSH
34433: LD_VAR 0 1
34437: PPUSH
34438: CALL 40607 0 2
34442: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34443: LD_EXP 145
34447: PUSH
34448: LD_VAR 0 5
34452: ARRAY
34453: PUSH
34454: LD_EXP 146
34458: GREATEREQUAL
34459: IFFALSE 34463
// exit ;
34461: GO 34663
// ComMoveXY ( unit , x , y ) ;
34463: LD_VAR 0 1
34467: PPUSH
34468: LD_VAR 0 2
34472: PPUSH
34473: LD_VAR 0 3
34477: PPUSH
34478: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34482: LD_INT 35
34484: PPUSH
34485: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34489: LD_VAR 0 1
34493: PPUSH
34494: LD_VAR 0 2
34498: PPUSH
34499: LD_VAR 0 3
34503: PPUSH
34504: CALL 71004 0 3
34508: NOT
34509: PUSH
34510: LD_VAR 0 1
34514: PPUSH
34515: CALL_OW 314
34519: AND
34520: IFFALSE 34524
// exit ;
34522: GO 34663
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34524: LD_VAR 0 2
34528: PPUSH
34529: LD_VAR 0 3
34533: PPUSH
34534: CALL_OW 428
34538: PUSH
34539: LD_VAR 0 1
34543: EQUAL
34544: PUSH
34545: LD_VAR 0 1
34549: PPUSH
34550: CALL_OW 314
34554: NOT
34555: AND
34556: IFFALSE 34482
// PlaySoundXY ( x , y , PlantMine ) ;
34558: LD_VAR 0 2
34562: PPUSH
34563: LD_VAR 0 3
34567: PPUSH
34568: LD_STRING PlantMine
34570: PPUSH
34571: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34575: LD_VAR 0 2
34579: PPUSH
34580: LD_VAR 0 3
34584: PPUSH
34585: LD_VAR 0 1
34589: PPUSH
34590: CALL_OW 255
34594: PPUSH
34595: LD_INT 0
34597: PPUSH
34598: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34602: LD_ADDR_EXP 145
34606: PUSH
34607: LD_EXP 145
34611: PPUSH
34612: LD_VAR 0 5
34616: PUSH
34617: LD_EXP 145
34621: PUSH
34622: LD_VAR 0 5
34626: ARRAY
34627: PUSH
34628: LD_INT 1
34630: PLUS
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PPUSH
34636: LD_VAR 0 2
34640: PUSH
34641: LD_VAR 0 3
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PPUSH
34650: CALL 40822 0 3
34654: ST_TO_ADDR
// result := true ;
34655: LD_ADDR_VAR 0 4
34659: PUSH
34660: LD_INT 1
34662: ST_TO_ADDR
// end ;
34663: LD_VAR 0 4
34667: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34668: LD_INT 0
34670: PPUSH
34671: PPUSH
34672: PPUSH
// if not unit in minersList then
34673: LD_VAR 0 1
34677: PUSH
34678: LD_EXP 144
34682: IN
34683: NOT
34684: IFFALSE 34688
// exit ;
34686: GO 35080
// index := GetElementIndex ( minersList , unit ) ;
34688: LD_ADDR_VAR 0 6
34692: PUSH
34693: LD_EXP 144
34697: PPUSH
34698: LD_VAR 0 1
34702: PPUSH
34703: CALL 40607 0 2
34707: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34708: LD_ADDR_VAR 0 5
34712: PUSH
34713: DOUBLE
34714: LD_EXP 145
34718: PUSH
34719: LD_VAR 0 6
34723: ARRAY
34724: INC
34725: ST_TO_ADDR
34726: LD_INT 1
34728: PUSH
34729: FOR_DOWNTO
34730: IFFALSE 34891
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34732: LD_EXP 145
34736: PUSH
34737: LD_VAR 0 6
34741: ARRAY
34742: PUSH
34743: LD_VAR 0 5
34747: ARRAY
34748: PUSH
34749: LD_INT 1
34751: ARRAY
34752: PUSH
34753: LD_VAR 0 2
34757: EQUAL
34758: PUSH
34759: LD_EXP 145
34763: PUSH
34764: LD_VAR 0 6
34768: ARRAY
34769: PUSH
34770: LD_VAR 0 5
34774: ARRAY
34775: PUSH
34776: LD_INT 2
34778: ARRAY
34779: PUSH
34780: LD_VAR 0 3
34784: EQUAL
34785: AND
34786: IFFALSE 34889
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34788: LD_EXP 145
34792: PUSH
34793: LD_VAR 0 6
34797: ARRAY
34798: PUSH
34799: LD_VAR 0 5
34803: ARRAY
34804: PUSH
34805: LD_INT 1
34807: ARRAY
34808: PPUSH
34809: LD_EXP 145
34813: PUSH
34814: LD_VAR 0 6
34818: ARRAY
34819: PUSH
34820: LD_VAR 0 5
34824: ARRAY
34825: PUSH
34826: LD_INT 2
34828: ARRAY
34829: PPUSH
34830: LD_VAR 0 1
34834: PPUSH
34835: CALL_OW 255
34839: PPUSH
34840: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34844: LD_ADDR_EXP 145
34848: PUSH
34849: LD_EXP 145
34853: PPUSH
34854: LD_VAR 0 6
34858: PPUSH
34859: LD_EXP 145
34863: PUSH
34864: LD_VAR 0 6
34868: ARRAY
34869: PPUSH
34870: LD_VAR 0 5
34874: PPUSH
34875: CALL_OW 3
34879: PPUSH
34880: CALL_OW 1
34884: ST_TO_ADDR
// exit ;
34885: POP
34886: POP
34887: GO 35080
// end ; end ;
34889: GO 34729
34891: POP
34892: POP
// for i := minerMinesList [ index ] downto 1 do
34893: LD_ADDR_VAR 0 5
34897: PUSH
34898: DOUBLE
34899: LD_EXP 145
34903: PUSH
34904: LD_VAR 0 6
34908: ARRAY
34909: INC
34910: ST_TO_ADDR
34911: LD_INT 1
34913: PUSH
34914: FOR_DOWNTO
34915: IFFALSE 35078
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
34917: LD_EXP 145
34921: PUSH
34922: LD_VAR 0 6
34926: ARRAY
34927: PUSH
34928: LD_VAR 0 5
34932: ARRAY
34933: PUSH
34934: LD_INT 1
34936: ARRAY
34937: PPUSH
34938: LD_EXP 145
34942: PUSH
34943: LD_VAR 0 6
34947: ARRAY
34948: PUSH
34949: LD_VAR 0 5
34953: ARRAY
34954: PUSH
34955: LD_INT 2
34957: ARRAY
34958: PPUSH
34959: LD_VAR 0 2
34963: PPUSH
34964: LD_VAR 0 3
34968: PPUSH
34969: CALL_OW 298
34973: PUSH
34974: LD_INT 6
34976: LESS
34977: IFFALSE 35076
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34979: LD_EXP 145
34983: PUSH
34984: LD_VAR 0 6
34988: ARRAY
34989: PUSH
34990: LD_VAR 0 5
34994: ARRAY
34995: PUSH
34996: LD_INT 1
34998: ARRAY
34999: PPUSH
35000: LD_EXP 145
35004: PUSH
35005: LD_VAR 0 6
35009: ARRAY
35010: PUSH
35011: LD_VAR 0 5
35015: ARRAY
35016: PUSH
35017: LD_INT 2
35019: ARRAY
35020: PPUSH
35021: LD_VAR 0 1
35025: PPUSH
35026: CALL_OW 255
35030: PPUSH
35031: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35035: LD_ADDR_EXP 145
35039: PUSH
35040: LD_EXP 145
35044: PPUSH
35045: LD_VAR 0 6
35049: PPUSH
35050: LD_EXP 145
35054: PUSH
35055: LD_VAR 0 6
35059: ARRAY
35060: PPUSH
35061: LD_VAR 0 5
35065: PPUSH
35066: CALL_OW 3
35070: PPUSH
35071: CALL_OW 1
35075: ST_TO_ADDR
// end ; end ;
35076: GO 34914
35078: POP
35079: POP
// end ;
35080: LD_VAR 0 4
35084: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35085: LD_INT 0
35087: PPUSH
35088: PPUSH
35089: PPUSH
35090: PPUSH
35091: PPUSH
35092: PPUSH
35093: PPUSH
35094: PPUSH
35095: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35096: LD_VAR 0 1
35100: PPUSH
35101: CALL_OW 264
35105: PUSH
35106: LD_EXP 69
35110: EQUAL
35111: NOT
35112: PUSH
35113: LD_VAR 0 1
35117: PUSH
35118: LD_EXP 144
35122: IN
35123: NOT
35124: OR
35125: IFFALSE 35129
// exit ;
35127: GO 35451
// index := GetElementIndex ( minersList , unit ) ;
35129: LD_ADDR_VAR 0 6
35133: PUSH
35134: LD_EXP 144
35138: PPUSH
35139: LD_VAR 0 1
35143: PPUSH
35144: CALL 40607 0 2
35148: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35149: LD_ADDR_VAR 0 8
35153: PUSH
35154: LD_EXP 146
35158: PUSH
35159: LD_EXP 145
35163: PUSH
35164: LD_VAR 0 6
35168: ARRAY
35169: MINUS
35170: ST_TO_ADDR
// if not minesFreeAmount then
35171: LD_VAR 0 8
35175: NOT
35176: IFFALSE 35180
// exit ;
35178: GO 35451
// tmp := [ ] ;
35180: LD_ADDR_VAR 0 7
35184: PUSH
35185: EMPTY
35186: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35187: LD_ADDR_VAR 0 5
35191: PUSH
35192: DOUBLE
35193: LD_INT 1
35195: DEC
35196: ST_TO_ADDR
35197: LD_VAR 0 8
35201: PUSH
35202: FOR_TO
35203: IFFALSE 35398
// begin _d := rand ( 0 , 5 ) ;
35205: LD_ADDR_VAR 0 11
35209: PUSH
35210: LD_INT 0
35212: PPUSH
35213: LD_INT 5
35215: PPUSH
35216: CALL_OW 12
35220: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35221: LD_ADDR_VAR 0 12
35225: PUSH
35226: LD_INT 2
35228: PPUSH
35229: LD_INT 6
35231: PPUSH
35232: CALL_OW 12
35236: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35237: LD_ADDR_VAR 0 9
35241: PUSH
35242: LD_VAR 0 2
35246: PPUSH
35247: LD_VAR 0 11
35251: PPUSH
35252: LD_VAR 0 12
35256: PPUSH
35257: CALL_OW 272
35261: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35262: LD_ADDR_VAR 0 10
35266: PUSH
35267: LD_VAR 0 3
35271: PPUSH
35272: LD_VAR 0 11
35276: PPUSH
35277: LD_VAR 0 12
35281: PPUSH
35282: CALL_OW 273
35286: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35287: LD_VAR 0 9
35291: PPUSH
35292: LD_VAR 0 10
35296: PPUSH
35297: CALL_OW 488
35301: PUSH
35302: LD_VAR 0 9
35306: PUSH
35307: LD_VAR 0 10
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_VAR 0 7
35320: IN
35321: NOT
35322: AND
35323: PUSH
35324: LD_VAR 0 9
35328: PPUSH
35329: LD_VAR 0 10
35333: PPUSH
35334: CALL_OW 458
35338: NOT
35339: AND
35340: IFFALSE 35382
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35342: LD_ADDR_VAR 0 7
35346: PUSH
35347: LD_VAR 0 7
35351: PPUSH
35352: LD_VAR 0 7
35356: PUSH
35357: LD_INT 1
35359: PLUS
35360: PPUSH
35361: LD_VAR 0 9
35365: PUSH
35366: LD_VAR 0 10
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PPUSH
35375: CALL_OW 1
35379: ST_TO_ADDR
35380: GO 35396
// i := i - 1 ;
35382: LD_ADDR_VAR 0 5
35386: PUSH
35387: LD_VAR 0 5
35391: PUSH
35392: LD_INT 1
35394: MINUS
35395: ST_TO_ADDR
// end ;
35396: GO 35202
35398: POP
35399: POP
// for i in tmp do
35400: LD_ADDR_VAR 0 5
35404: PUSH
35405: LD_VAR 0 7
35409: PUSH
35410: FOR_IN
35411: IFFALSE 35449
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35413: LD_VAR 0 1
35417: PPUSH
35418: LD_VAR 0 5
35422: PUSH
35423: LD_INT 1
35425: ARRAY
35426: PPUSH
35427: LD_VAR 0 5
35431: PUSH
35432: LD_INT 2
35434: ARRAY
35435: PPUSH
35436: CALL 34391 0 3
35440: NOT
35441: IFFALSE 35447
// exit ;
35443: POP
35444: POP
35445: GO 35451
35447: GO 35410
35449: POP
35450: POP
// end ;
35451: LD_VAR 0 4
35455: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35456: LD_INT 0
35458: PPUSH
35459: PPUSH
35460: PPUSH
35461: PPUSH
35462: PPUSH
35463: PPUSH
35464: PPUSH
// if not GetClass ( unit ) = class_sniper then
35465: LD_VAR 0 1
35469: PPUSH
35470: CALL_OW 257
35474: PUSH
35475: LD_INT 5
35477: EQUAL
35478: NOT
35479: IFFALSE 35483
// exit ;
35481: GO 35871
// dist := 8 ;
35483: LD_ADDR_VAR 0 5
35487: PUSH
35488: LD_INT 8
35490: ST_TO_ADDR
// viewRange := 12 ;
35491: LD_ADDR_VAR 0 7
35495: PUSH
35496: LD_INT 12
35498: ST_TO_ADDR
// side := GetSide ( unit ) ;
35499: LD_ADDR_VAR 0 6
35503: PUSH
35504: LD_VAR 0 1
35508: PPUSH
35509: CALL_OW 255
35513: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35514: LD_INT 61
35516: PPUSH
35517: LD_VAR 0 6
35521: PPUSH
35522: CALL_OW 321
35526: PUSH
35527: LD_INT 2
35529: EQUAL
35530: IFFALSE 35540
// viewRange := 16 ;
35532: LD_ADDR_VAR 0 7
35536: PUSH
35537: LD_INT 16
35539: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35540: LD_VAR 0 1
35544: PPUSH
35545: LD_VAR 0 2
35549: PPUSH
35550: LD_VAR 0 3
35554: PPUSH
35555: CALL_OW 297
35559: PUSH
35560: LD_VAR 0 5
35564: GREATER
35565: IFFALSE 35644
// begin ComMoveXY ( unit , x , y ) ;
35567: LD_VAR 0 1
35571: PPUSH
35572: LD_VAR 0 2
35576: PPUSH
35577: LD_VAR 0 3
35581: PPUSH
35582: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35586: LD_INT 35
35588: PPUSH
35589: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35593: LD_VAR 0 1
35597: PPUSH
35598: LD_VAR 0 2
35602: PPUSH
35603: LD_VAR 0 3
35607: PPUSH
35608: CALL 71004 0 3
35612: NOT
35613: IFFALSE 35617
// exit ;
35615: GO 35871
// until GetDistUnitXY ( unit , x , y ) < dist ;
35617: LD_VAR 0 1
35621: PPUSH
35622: LD_VAR 0 2
35626: PPUSH
35627: LD_VAR 0 3
35631: PPUSH
35632: CALL_OW 297
35636: PUSH
35637: LD_VAR 0 5
35641: LESS
35642: IFFALSE 35586
// end ; ComTurnXY ( unit , x , y ) ;
35644: LD_VAR 0 1
35648: PPUSH
35649: LD_VAR 0 2
35653: PPUSH
35654: LD_VAR 0 3
35658: PPUSH
35659: CALL_OW 118
// wait ( 5 ) ;
35663: LD_INT 5
35665: PPUSH
35666: CALL_OW 67
// _d := GetDir ( unit ) ;
35670: LD_ADDR_VAR 0 10
35674: PUSH
35675: LD_VAR 0 1
35679: PPUSH
35680: CALL_OW 254
35684: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35685: LD_ADDR_VAR 0 8
35689: PUSH
35690: LD_VAR 0 1
35694: PPUSH
35695: CALL_OW 250
35699: PPUSH
35700: LD_VAR 0 10
35704: PPUSH
35705: LD_VAR 0 5
35709: PPUSH
35710: CALL_OW 272
35714: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35715: LD_ADDR_VAR 0 9
35719: PUSH
35720: LD_VAR 0 1
35724: PPUSH
35725: CALL_OW 251
35729: PPUSH
35730: LD_VAR 0 10
35734: PPUSH
35735: LD_VAR 0 5
35739: PPUSH
35740: CALL_OW 273
35744: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35745: LD_VAR 0 8
35749: PPUSH
35750: LD_VAR 0 9
35754: PPUSH
35755: CALL_OW 488
35759: NOT
35760: IFFALSE 35764
// exit ;
35762: GO 35871
// ComAnimCustom ( unit , 1 ) ;
35764: LD_VAR 0 1
35768: PPUSH
35769: LD_INT 1
35771: PPUSH
35772: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35776: LD_VAR 0 8
35780: PPUSH
35781: LD_VAR 0 9
35785: PPUSH
35786: LD_VAR 0 6
35790: PPUSH
35791: LD_VAR 0 7
35795: PPUSH
35796: CALL_OW 330
// repeat wait ( 1 ) ;
35800: LD_INT 1
35802: PPUSH
35803: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35807: LD_VAR 0 1
35811: PPUSH
35812: CALL_OW 316
35816: PUSH
35817: LD_VAR 0 1
35821: PPUSH
35822: CALL_OW 314
35826: OR
35827: PUSH
35828: LD_VAR 0 1
35832: PPUSH
35833: CALL_OW 302
35837: NOT
35838: OR
35839: PUSH
35840: LD_VAR 0 1
35844: PPUSH
35845: CALL_OW 301
35849: OR
35850: IFFALSE 35800
// RemoveSeeing ( _x , _y , side ) ;
35852: LD_VAR 0 8
35856: PPUSH
35857: LD_VAR 0 9
35861: PPUSH
35862: LD_VAR 0 6
35866: PPUSH
35867: CALL_OW 331
// end ; end_of_file
35871: LD_VAR 0 4
35875: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35876: LD_INT 0
35878: PPUSH
35879: PPUSH
// if exist_mode then
35880: LD_VAR 0 2
35884: IFFALSE 35909
// unit := CreateCharacter ( prefix & ident ) else
35886: LD_ADDR_VAR 0 5
35890: PUSH
35891: LD_VAR 0 3
35895: PUSH
35896: LD_VAR 0 1
35900: STR
35901: PPUSH
35902: CALL_OW 34
35906: ST_TO_ADDR
35907: GO 35924
// unit := NewCharacter ( ident ) ;
35909: LD_ADDR_VAR 0 5
35913: PUSH
35914: LD_VAR 0 1
35918: PPUSH
35919: CALL_OW 25
35923: ST_TO_ADDR
// result := unit ;
35924: LD_ADDR_VAR 0 4
35928: PUSH
35929: LD_VAR 0 5
35933: ST_TO_ADDR
// end ;
35934: LD_VAR 0 4
35938: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35939: LD_INT 0
35941: PPUSH
35942: PPUSH
// if not side or not nation then
35943: LD_VAR 0 1
35947: NOT
35948: PUSH
35949: LD_VAR 0 2
35953: NOT
35954: OR
35955: IFFALSE 35959
// exit ;
35957: GO 36723
// case nation of nation_american :
35959: LD_VAR 0 2
35963: PUSH
35964: LD_INT 1
35966: DOUBLE
35967: EQUAL
35968: IFTRUE 35972
35970: GO 36186
35972: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35973: LD_ADDR_VAR 0 4
35977: PUSH
35978: LD_INT 35
35980: PUSH
35981: LD_INT 45
35983: PUSH
35984: LD_INT 46
35986: PUSH
35987: LD_INT 47
35989: PUSH
35990: LD_INT 82
35992: PUSH
35993: LD_INT 83
35995: PUSH
35996: LD_INT 84
35998: PUSH
35999: LD_INT 85
36001: PUSH
36002: LD_INT 86
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: LD_INT 2
36010: PUSH
36011: LD_INT 6
36013: PUSH
36014: LD_INT 15
36016: PUSH
36017: LD_INT 16
36019: PUSH
36020: LD_INT 7
36022: PUSH
36023: LD_INT 12
36025: PUSH
36026: LD_INT 13
36028: PUSH
36029: LD_INT 10
36031: PUSH
36032: LD_INT 14
36034: PUSH
36035: LD_INT 20
36037: PUSH
36038: LD_INT 21
36040: PUSH
36041: LD_INT 22
36043: PUSH
36044: LD_INT 25
36046: PUSH
36047: LD_INT 32
36049: PUSH
36050: LD_INT 27
36052: PUSH
36053: LD_INT 36
36055: PUSH
36056: LD_INT 69
36058: PUSH
36059: LD_INT 39
36061: PUSH
36062: LD_INT 34
36064: PUSH
36065: LD_INT 40
36067: PUSH
36068: LD_INT 48
36070: PUSH
36071: LD_INT 49
36073: PUSH
36074: LD_INT 50
36076: PUSH
36077: LD_INT 51
36079: PUSH
36080: LD_INT 52
36082: PUSH
36083: LD_INT 53
36085: PUSH
36086: LD_INT 54
36088: PUSH
36089: LD_INT 55
36091: PUSH
36092: LD_INT 56
36094: PUSH
36095: LD_INT 57
36097: PUSH
36098: LD_INT 58
36100: PUSH
36101: LD_INT 59
36103: PUSH
36104: LD_INT 60
36106: PUSH
36107: LD_INT 61
36109: PUSH
36110: LD_INT 62
36112: PUSH
36113: LD_INT 80
36115: PUSH
36116: LD_INT 82
36118: PUSH
36119: LD_INT 83
36121: PUSH
36122: LD_INT 84
36124: PUSH
36125: LD_INT 85
36127: PUSH
36128: LD_INT 86
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: ST_TO_ADDR
36184: GO 36647
36186: LD_INT 2
36188: DOUBLE
36189: EQUAL
36190: IFTRUE 36194
36192: GO 36416
36194: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
36195: LD_ADDR_VAR 0 4
36199: PUSH
36200: LD_INT 35
36202: PUSH
36203: LD_INT 45
36205: PUSH
36206: LD_INT 46
36208: PUSH
36209: LD_INT 47
36211: PUSH
36212: LD_INT 82
36214: PUSH
36215: LD_INT 83
36217: PUSH
36218: LD_INT 84
36220: PUSH
36221: LD_INT 85
36223: PUSH
36224: LD_INT 87
36226: PUSH
36227: LD_INT 70
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: LD_INT 11
36235: PUSH
36236: LD_INT 3
36238: PUSH
36239: LD_INT 4
36241: PUSH
36242: LD_INT 5
36244: PUSH
36245: LD_INT 6
36247: PUSH
36248: LD_INT 15
36250: PUSH
36251: LD_INT 18
36253: PUSH
36254: LD_INT 7
36256: PUSH
36257: LD_INT 17
36259: PUSH
36260: LD_INT 8
36262: PUSH
36263: LD_INT 20
36265: PUSH
36266: LD_INT 21
36268: PUSH
36269: LD_INT 22
36271: PUSH
36272: LD_INT 72
36274: PUSH
36275: LD_INT 26
36277: PUSH
36278: LD_INT 69
36280: PUSH
36281: LD_INT 39
36283: PUSH
36284: LD_INT 40
36286: PUSH
36287: LD_INT 41
36289: PUSH
36290: LD_INT 42
36292: PUSH
36293: LD_INT 43
36295: PUSH
36296: LD_INT 48
36298: PUSH
36299: LD_INT 49
36301: PUSH
36302: LD_INT 50
36304: PUSH
36305: LD_INT 51
36307: PUSH
36308: LD_INT 52
36310: PUSH
36311: LD_INT 53
36313: PUSH
36314: LD_INT 54
36316: PUSH
36317: LD_INT 55
36319: PUSH
36320: LD_INT 56
36322: PUSH
36323: LD_INT 60
36325: PUSH
36326: LD_INT 61
36328: PUSH
36329: LD_INT 62
36331: PUSH
36332: LD_INT 66
36334: PUSH
36335: LD_INT 67
36337: PUSH
36338: LD_INT 68
36340: PUSH
36341: LD_INT 81
36343: PUSH
36344: LD_INT 82
36346: PUSH
36347: LD_INT 83
36349: PUSH
36350: LD_INT 84
36352: PUSH
36353: LD_INT 85
36355: PUSH
36356: LD_INT 87
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: ST_TO_ADDR
36414: GO 36647
36416: LD_INT 3
36418: DOUBLE
36419: EQUAL
36420: IFTRUE 36424
36422: GO 36646
36424: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36425: LD_ADDR_VAR 0 4
36429: PUSH
36430: LD_INT 46
36432: PUSH
36433: LD_INT 47
36435: PUSH
36436: LD_INT 1
36438: PUSH
36439: LD_INT 2
36441: PUSH
36442: LD_INT 82
36444: PUSH
36445: LD_INT 83
36447: PUSH
36448: LD_INT 84
36450: PUSH
36451: LD_INT 85
36453: PUSH
36454: LD_INT 86
36456: PUSH
36457: LD_INT 11
36459: PUSH
36460: LD_INT 9
36462: PUSH
36463: LD_INT 20
36465: PUSH
36466: LD_INT 19
36468: PUSH
36469: LD_INT 21
36471: PUSH
36472: LD_INT 24
36474: PUSH
36475: LD_INT 22
36477: PUSH
36478: LD_INT 25
36480: PUSH
36481: LD_INT 28
36483: PUSH
36484: LD_INT 29
36486: PUSH
36487: LD_INT 30
36489: PUSH
36490: LD_INT 31
36492: PUSH
36493: LD_INT 37
36495: PUSH
36496: LD_INT 38
36498: PUSH
36499: LD_INT 32
36501: PUSH
36502: LD_INT 27
36504: PUSH
36505: LD_INT 33
36507: PUSH
36508: LD_INT 69
36510: PUSH
36511: LD_INT 39
36513: PUSH
36514: LD_INT 34
36516: PUSH
36517: LD_INT 40
36519: PUSH
36520: LD_INT 71
36522: PUSH
36523: LD_INT 23
36525: PUSH
36526: LD_INT 44
36528: PUSH
36529: LD_INT 48
36531: PUSH
36532: LD_INT 49
36534: PUSH
36535: LD_INT 50
36537: PUSH
36538: LD_INT 51
36540: PUSH
36541: LD_INT 52
36543: PUSH
36544: LD_INT 53
36546: PUSH
36547: LD_INT 54
36549: PUSH
36550: LD_INT 55
36552: PUSH
36553: LD_INT 56
36555: PUSH
36556: LD_INT 57
36558: PUSH
36559: LD_INT 58
36561: PUSH
36562: LD_INT 59
36564: PUSH
36565: LD_INT 63
36567: PUSH
36568: LD_INT 64
36570: PUSH
36571: LD_INT 65
36573: PUSH
36574: LD_INT 82
36576: PUSH
36577: LD_INT 83
36579: PUSH
36580: LD_INT 84
36582: PUSH
36583: LD_INT 85
36585: PUSH
36586: LD_INT 86
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: ST_TO_ADDR
36644: GO 36647
36646: POP
// if state > - 1 and state < 3 then
36647: LD_VAR 0 3
36651: PUSH
36652: LD_INT 1
36654: NEG
36655: GREATER
36656: PUSH
36657: LD_VAR 0 3
36661: PUSH
36662: LD_INT 3
36664: LESS
36665: AND
36666: IFFALSE 36723
// for i in result do
36668: LD_ADDR_VAR 0 5
36672: PUSH
36673: LD_VAR 0 4
36677: PUSH
36678: FOR_IN
36679: IFFALSE 36721
// if GetTech ( i , side ) <> state then
36681: LD_VAR 0 5
36685: PPUSH
36686: LD_VAR 0 1
36690: PPUSH
36691: CALL_OW 321
36695: PUSH
36696: LD_VAR 0 3
36700: NONEQUAL
36701: IFFALSE 36719
// result := result diff i ;
36703: LD_ADDR_VAR 0 4
36707: PUSH
36708: LD_VAR 0 4
36712: PUSH
36713: LD_VAR 0 5
36717: DIFF
36718: ST_TO_ADDR
36719: GO 36678
36721: POP
36722: POP
// end ;
36723: LD_VAR 0 4
36727: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36728: LD_INT 0
36730: PPUSH
36731: PPUSH
36732: PPUSH
// result := true ;
36733: LD_ADDR_VAR 0 3
36737: PUSH
36738: LD_INT 1
36740: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36741: LD_ADDR_VAR 0 5
36745: PUSH
36746: LD_VAR 0 2
36750: PPUSH
36751: CALL_OW 480
36755: ST_TO_ADDR
// if not tmp then
36756: LD_VAR 0 5
36760: NOT
36761: IFFALSE 36765
// exit ;
36763: GO 36814
// for i in tmp do
36765: LD_ADDR_VAR 0 4
36769: PUSH
36770: LD_VAR 0 5
36774: PUSH
36775: FOR_IN
36776: IFFALSE 36812
// if GetTech ( i , side ) <> state_researched then
36778: LD_VAR 0 4
36782: PPUSH
36783: LD_VAR 0 1
36787: PPUSH
36788: CALL_OW 321
36792: PUSH
36793: LD_INT 2
36795: NONEQUAL
36796: IFFALSE 36810
// begin result := false ;
36798: LD_ADDR_VAR 0 3
36802: PUSH
36803: LD_INT 0
36805: ST_TO_ADDR
// exit ;
36806: POP
36807: POP
36808: GO 36814
// end ;
36810: GO 36775
36812: POP
36813: POP
// end ;
36814: LD_VAR 0 3
36818: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36819: LD_INT 0
36821: PPUSH
36822: PPUSH
36823: PPUSH
36824: PPUSH
36825: PPUSH
36826: PPUSH
36827: PPUSH
36828: PPUSH
36829: PPUSH
36830: PPUSH
36831: PPUSH
36832: PPUSH
36833: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36834: LD_VAR 0 1
36838: NOT
36839: PUSH
36840: LD_VAR 0 1
36844: PPUSH
36845: CALL_OW 257
36849: PUSH
36850: LD_INT 9
36852: NONEQUAL
36853: OR
36854: IFFALSE 36858
// exit ;
36856: GO 37431
// side := GetSide ( unit ) ;
36858: LD_ADDR_VAR 0 9
36862: PUSH
36863: LD_VAR 0 1
36867: PPUSH
36868: CALL_OW 255
36872: ST_TO_ADDR
// tech_space := tech_spacanom ;
36873: LD_ADDR_VAR 0 12
36877: PUSH
36878: LD_INT 29
36880: ST_TO_ADDR
// tech_time := tech_taurad ;
36881: LD_ADDR_VAR 0 13
36885: PUSH
36886: LD_INT 28
36888: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36889: LD_ADDR_VAR 0 11
36893: PUSH
36894: LD_VAR 0 1
36898: PPUSH
36899: CALL_OW 310
36903: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36904: LD_VAR 0 11
36908: PPUSH
36909: CALL_OW 247
36913: PUSH
36914: LD_INT 2
36916: EQUAL
36917: IFFALSE 36921
// exit ;
36919: GO 37431
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36921: LD_ADDR_VAR 0 8
36925: PUSH
36926: LD_INT 81
36928: PUSH
36929: LD_VAR 0 9
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 3
36940: PUSH
36941: LD_INT 21
36943: PUSH
36944: LD_INT 3
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PPUSH
36959: CALL_OW 69
36963: ST_TO_ADDR
// if not tmp then
36964: LD_VAR 0 8
36968: NOT
36969: IFFALSE 36973
// exit ;
36971: GO 37431
// if in_unit then
36973: LD_VAR 0 11
36977: IFFALSE 37001
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36979: LD_ADDR_VAR 0 10
36983: PUSH
36984: LD_VAR 0 8
36988: PPUSH
36989: LD_VAR 0 11
36993: PPUSH
36994: CALL_OW 74
36998: ST_TO_ADDR
36999: GO 37021
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37001: LD_ADDR_VAR 0 10
37005: PUSH
37006: LD_VAR 0 8
37010: PPUSH
37011: LD_VAR 0 1
37015: PPUSH
37016: CALL_OW 74
37020: ST_TO_ADDR
// if not enemy then
37021: LD_VAR 0 10
37025: NOT
37026: IFFALSE 37030
// exit ;
37028: GO 37431
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37030: LD_VAR 0 11
37034: PUSH
37035: LD_VAR 0 11
37039: PPUSH
37040: LD_VAR 0 10
37044: PPUSH
37045: CALL_OW 296
37049: PUSH
37050: LD_INT 13
37052: GREATER
37053: AND
37054: PUSH
37055: LD_VAR 0 1
37059: PPUSH
37060: LD_VAR 0 10
37064: PPUSH
37065: CALL_OW 296
37069: PUSH
37070: LD_INT 12
37072: GREATER
37073: OR
37074: IFFALSE 37078
// exit ;
37076: GO 37431
// missile := [ 1 ] ;
37078: LD_ADDR_VAR 0 14
37082: PUSH
37083: LD_INT 1
37085: PUSH
37086: EMPTY
37087: LIST
37088: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37089: LD_VAR 0 9
37093: PPUSH
37094: LD_VAR 0 12
37098: PPUSH
37099: CALL_OW 325
37103: IFFALSE 37132
// missile := Insert ( missile , missile + 1 , 2 ) ;
37105: LD_ADDR_VAR 0 14
37109: PUSH
37110: LD_VAR 0 14
37114: PPUSH
37115: LD_VAR 0 14
37119: PUSH
37120: LD_INT 1
37122: PLUS
37123: PPUSH
37124: LD_INT 2
37126: PPUSH
37127: CALL_OW 2
37131: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37132: LD_VAR 0 9
37136: PPUSH
37137: LD_VAR 0 13
37141: PPUSH
37142: CALL_OW 325
37146: PUSH
37147: LD_VAR 0 10
37151: PPUSH
37152: CALL_OW 255
37156: PPUSH
37157: LD_VAR 0 13
37161: PPUSH
37162: CALL_OW 325
37166: NOT
37167: AND
37168: IFFALSE 37197
// missile := Insert ( missile , missile + 1 , 3 ) ;
37170: LD_ADDR_VAR 0 14
37174: PUSH
37175: LD_VAR 0 14
37179: PPUSH
37180: LD_VAR 0 14
37184: PUSH
37185: LD_INT 1
37187: PLUS
37188: PPUSH
37189: LD_INT 3
37191: PPUSH
37192: CALL_OW 2
37196: ST_TO_ADDR
// if missile < 2 then
37197: LD_VAR 0 14
37201: PUSH
37202: LD_INT 2
37204: LESS
37205: IFFALSE 37209
// exit ;
37207: GO 37431
// x := GetX ( enemy ) ;
37209: LD_ADDR_VAR 0 4
37213: PUSH
37214: LD_VAR 0 10
37218: PPUSH
37219: CALL_OW 250
37223: ST_TO_ADDR
// y := GetY ( enemy ) ;
37224: LD_ADDR_VAR 0 5
37228: PUSH
37229: LD_VAR 0 10
37233: PPUSH
37234: CALL_OW 251
37238: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37239: LD_ADDR_VAR 0 6
37243: PUSH
37244: LD_VAR 0 4
37248: PUSH
37249: LD_INT 1
37251: NEG
37252: PPUSH
37253: LD_INT 1
37255: PPUSH
37256: CALL_OW 12
37260: PLUS
37261: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37262: LD_ADDR_VAR 0 7
37266: PUSH
37267: LD_VAR 0 5
37271: PUSH
37272: LD_INT 1
37274: NEG
37275: PPUSH
37276: LD_INT 1
37278: PPUSH
37279: CALL_OW 12
37283: PLUS
37284: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37285: LD_VAR 0 6
37289: PPUSH
37290: LD_VAR 0 7
37294: PPUSH
37295: CALL_OW 488
37299: NOT
37300: IFFALSE 37322
// begin _x := x ;
37302: LD_ADDR_VAR 0 6
37306: PUSH
37307: LD_VAR 0 4
37311: ST_TO_ADDR
// _y := y ;
37312: LD_ADDR_VAR 0 7
37316: PUSH
37317: LD_VAR 0 5
37321: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37322: LD_ADDR_VAR 0 3
37326: PUSH
37327: LD_INT 1
37329: PPUSH
37330: LD_VAR 0 14
37334: PPUSH
37335: CALL_OW 12
37339: ST_TO_ADDR
// case i of 1 :
37340: LD_VAR 0 3
37344: PUSH
37345: LD_INT 1
37347: DOUBLE
37348: EQUAL
37349: IFTRUE 37353
37351: GO 37370
37353: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37354: LD_VAR 0 1
37358: PPUSH
37359: LD_VAR 0 10
37363: PPUSH
37364: CALL_OW 115
37368: GO 37431
37370: LD_INT 2
37372: DOUBLE
37373: EQUAL
37374: IFTRUE 37378
37376: GO 37400
37378: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37379: LD_VAR 0 1
37383: PPUSH
37384: LD_VAR 0 6
37388: PPUSH
37389: LD_VAR 0 7
37393: PPUSH
37394: CALL_OW 153
37398: GO 37431
37400: LD_INT 3
37402: DOUBLE
37403: EQUAL
37404: IFTRUE 37408
37406: GO 37430
37408: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37409: LD_VAR 0 1
37413: PPUSH
37414: LD_VAR 0 6
37418: PPUSH
37419: LD_VAR 0 7
37423: PPUSH
37424: CALL_OW 154
37428: GO 37431
37430: POP
// end ;
37431: LD_VAR 0 2
37435: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37436: LD_INT 0
37438: PPUSH
37439: PPUSH
37440: PPUSH
37441: PPUSH
37442: PPUSH
37443: PPUSH
// if not unit or not building then
37444: LD_VAR 0 1
37448: NOT
37449: PUSH
37450: LD_VAR 0 2
37454: NOT
37455: OR
37456: IFFALSE 37460
// exit ;
37458: GO 37618
// x := GetX ( building ) ;
37460: LD_ADDR_VAR 0 5
37464: PUSH
37465: LD_VAR 0 2
37469: PPUSH
37470: CALL_OW 250
37474: ST_TO_ADDR
// y := GetY ( building ) ;
37475: LD_ADDR_VAR 0 6
37479: PUSH
37480: LD_VAR 0 2
37484: PPUSH
37485: CALL_OW 251
37489: ST_TO_ADDR
// for i = 0 to 5 do
37490: LD_ADDR_VAR 0 4
37494: PUSH
37495: DOUBLE
37496: LD_INT 0
37498: DEC
37499: ST_TO_ADDR
37500: LD_INT 5
37502: PUSH
37503: FOR_TO
37504: IFFALSE 37616
// begin _x := ShiftX ( x , i , 3 ) ;
37506: LD_ADDR_VAR 0 7
37510: PUSH
37511: LD_VAR 0 5
37515: PPUSH
37516: LD_VAR 0 4
37520: PPUSH
37521: LD_INT 3
37523: PPUSH
37524: CALL_OW 272
37528: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37529: LD_ADDR_VAR 0 8
37533: PUSH
37534: LD_VAR 0 6
37538: PPUSH
37539: LD_VAR 0 4
37543: PPUSH
37544: LD_INT 3
37546: PPUSH
37547: CALL_OW 273
37551: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37552: LD_VAR 0 7
37556: PPUSH
37557: LD_VAR 0 8
37561: PPUSH
37562: CALL_OW 488
37566: NOT
37567: IFFALSE 37571
// continue ;
37569: GO 37503
// if HexInfo ( _x , _y ) = 0 then
37571: LD_VAR 0 7
37575: PPUSH
37576: LD_VAR 0 8
37580: PPUSH
37581: CALL_OW 428
37585: PUSH
37586: LD_INT 0
37588: EQUAL
37589: IFFALSE 37614
// begin ComMoveXY ( unit , _x , _y ) ;
37591: LD_VAR 0 1
37595: PPUSH
37596: LD_VAR 0 7
37600: PPUSH
37601: LD_VAR 0 8
37605: PPUSH
37606: CALL_OW 111
// exit ;
37610: POP
37611: POP
37612: GO 37618
// end ; end ;
37614: GO 37503
37616: POP
37617: POP
// end ;
37618: LD_VAR 0 3
37622: RET
// export function ScanBase ( side , base_area ) ; begin
37623: LD_INT 0
37625: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37626: LD_ADDR_VAR 0 3
37630: PUSH
37631: LD_VAR 0 2
37635: PPUSH
37636: LD_INT 81
37638: PUSH
37639: LD_VAR 0 1
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PPUSH
37648: CALL_OW 70
37652: ST_TO_ADDR
// end ;
37653: LD_VAR 0 3
37657: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37658: LD_INT 0
37660: PPUSH
37661: PPUSH
37662: PPUSH
37663: PPUSH
// result := false ;
37664: LD_ADDR_VAR 0 2
37668: PUSH
37669: LD_INT 0
37671: ST_TO_ADDR
// side := GetSide ( unit ) ;
37672: LD_ADDR_VAR 0 3
37676: PUSH
37677: LD_VAR 0 1
37681: PPUSH
37682: CALL_OW 255
37686: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37687: LD_ADDR_VAR 0 4
37691: PUSH
37692: LD_VAR 0 1
37696: PPUSH
37697: CALL_OW 248
37701: ST_TO_ADDR
// case nat of 1 :
37702: LD_VAR 0 4
37706: PUSH
37707: LD_INT 1
37709: DOUBLE
37710: EQUAL
37711: IFTRUE 37715
37713: GO 37726
37715: POP
// tech := tech_lassight ; 2 :
37716: LD_ADDR_VAR 0 5
37720: PUSH
37721: LD_INT 12
37723: ST_TO_ADDR
37724: GO 37765
37726: LD_INT 2
37728: DOUBLE
37729: EQUAL
37730: IFTRUE 37734
37732: GO 37745
37734: POP
// tech := tech_mortar ; 3 :
37735: LD_ADDR_VAR 0 5
37739: PUSH
37740: LD_INT 41
37742: ST_TO_ADDR
37743: GO 37765
37745: LD_INT 3
37747: DOUBLE
37748: EQUAL
37749: IFTRUE 37753
37751: GO 37764
37753: POP
// tech := tech_bazooka ; end ;
37754: LD_ADDR_VAR 0 5
37758: PUSH
37759: LD_INT 44
37761: ST_TO_ADDR
37762: GO 37765
37764: POP
// if Researched ( side , tech ) then
37765: LD_VAR 0 3
37769: PPUSH
37770: LD_VAR 0 5
37774: PPUSH
37775: CALL_OW 325
37779: IFFALSE 37806
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37781: LD_ADDR_VAR 0 2
37785: PUSH
37786: LD_INT 5
37788: PUSH
37789: LD_INT 8
37791: PUSH
37792: LD_INT 9
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: LIST
37799: PUSH
37800: LD_VAR 0 4
37804: ARRAY
37805: ST_TO_ADDR
// end ;
37806: LD_VAR 0 2
37810: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37811: LD_INT 0
37813: PPUSH
37814: PPUSH
37815: PPUSH
// if not mines then
37816: LD_VAR 0 2
37820: NOT
37821: IFFALSE 37825
// exit ;
37823: GO 37969
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37825: LD_ADDR_VAR 0 5
37829: PUSH
37830: LD_INT 81
37832: PUSH
37833: LD_VAR 0 1
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 3
37844: PUSH
37845: LD_INT 21
37847: PUSH
37848: LD_INT 3
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PPUSH
37863: CALL_OW 69
37867: ST_TO_ADDR
// for i in mines do
37868: LD_ADDR_VAR 0 4
37872: PUSH
37873: LD_VAR 0 2
37877: PUSH
37878: FOR_IN
37879: IFFALSE 37967
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37881: LD_VAR 0 4
37885: PUSH
37886: LD_INT 1
37888: ARRAY
37889: PPUSH
37890: LD_VAR 0 4
37894: PUSH
37895: LD_INT 2
37897: ARRAY
37898: PPUSH
37899: CALL_OW 458
37903: NOT
37904: IFFALSE 37908
// continue ;
37906: GO 37878
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37908: LD_VAR 0 4
37912: PUSH
37913: LD_INT 1
37915: ARRAY
37916: PPUSH
37917: LD_VAR 0 4
37921: PUSH
37922: LD_INT 2
37924: ARRAY
37925: PPUSH
37926: CALL_OW 428
37930: PUSH
37931: LD_VAR 0 5
37935: IN
37936: IFFALSE 37965
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37938: LD_VAR 0 4
37942: PUSH
37943: LD_INT 1
37945: ARRAY
37946: PPUSH
37947: LD_VAR 0 4
37951: PUSH
37952: LD_INT 2
37954: ARRAY
37955: PPUSH
37956: LD_VAR 0 1
37960: PPUSH
37961: CALL_OW 456
// end ;
37965: GO 37878
37967: POP
37968: POP
// end ;
37969: LD_VAR 0 3
37973: RET
// export function Count ( array ) ; var i ; begin
37974: LD_INT 0
37976: PPUSH
37977: PPUSH
// result := 0 ;
37978: LD_ADDR_VAR 0 2
37982: PUSH
37983: LD_INT 0
37985: ST_TO_ADDR
// for i in array do
37986: LD_ADDR_VAR 0 3
37990: PUSH
37991: LD_VAR 0 1
37995: PUSH
37996: FOR_IN
37997: IFFALSE 38021
// if i then
37999: LD_VAR 0 3
38003: IFFALSE 38019
// result := result + 1 ;
38005: LD_ADDR_VAR 0 2
38009: PUSH
38010: LD_VAR 0 2
38014: PUSH
38015: LD_INT 1
38017: PLUS
38018: ST_TO_ADDR
38019: GO 37996
38021: POP
38022: POP
// end ;
38023: LD_VAR 0 2
38027: RET
// export function IsEmpty ( building ) ; begin
38028: LD_INT 0
38030: PPUSH
// if not building then
38031: LD_VAR 0 1
38035: NOT
38036: IFFALSE 38040
// exit ;
38038: GO 38083
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38040: LD_ADDR_VAR 0 2
38044: PUSH
38045: LD_VAR 0 1
38049: PUSH
38050: LD_INT 22
38052: PUSH
38053: LD_VAR 0 1
38057: PPUSH
38058: CALL_OW 255
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 58
38069: PUSH
38070: EMPTY
38071: LIST
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PPUSH
38077: CALL_OW 69
38081: IN
38082: ST_TO_ADDR
// end ;
38083: LD_VAR 0 2
38087: RET
// export function IsNotFull ( building ) ; begin
38088: LD_INT 0
38090: PPUSH
// if not building then
38091: LD_VAR 0 1
38095: NOT
38096: IFFALSE 38100
// exit ;
38098: GO 38119
// result := UnitsInside ( building ) < 6 ;
38100: LD_ADDR_VAR 0 2
38104: PUSH
38105: LD_VAR 0 1
38109: PPUSH
38110: CALL_OW 313
38114: PUSH
38115: LD_INT 6
38117: LESS
38118: ST_TO_ADDR
// end ;
38119: LD_VAR 0 2
38123: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38124: LD_INT 0
38126: PPUSH
38127: PPUSH
38128: PPUSH
38129: PPUSH
// tmp := [ ] ;
38130: LD_ADDR_VAR 0 3
38134: PUSH
38135: EMPTY
38136: ST_TO_ADDR
// list := [ ] ;
38137: LD_ADDR_VAR 0 5
38141: PUSH
38142: EMPTY
38143: ST_TO_ADDR
// for i = 16 to 25 do
38144: LD_ADDR_VAR 0 4
38148: PUSH
38149: DOUBLE
38150: LD_INT 16
38152: DEC
38153: ST_TO_ADDR
38154: LD_INT 25
38156: PUSH
38157: FOR_TO
38158: IFFALSE 38231
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38160: LD_ADDR_VAR 0 3
38164: PUSH
38165: LD_VAR 0 3
38169: PUSH
38170: LD_INT 22
38172: PUSH
38173: LD_VAR 0 1
38177: PPUSH
38178: CALL_OW 255
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 91
38189: PUSH
38190: LD_VAR 0 1
38194: PUSH
38195: LD_INT 6
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 30
38205: PUSH
38206: LD_VAR 0 4
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: LIST
38219: PUSH
38220: EMPTY
38221: LIST
38222: PPUSH
38223: CALL_OW 69
38227: ADD
38228: ST_TO_ADDR
38229: GO 38157
38231: POP
38232: POP
// for i = 1 to tmp do
38233: LD_ADDR_VAR 0 4
38237: PUSH
38238: DOUBLE
38239: LD_INT 1
38241: DEC
38242: ST_TO_ADDR
38243: LD_VAR 0 3
38247: PUSH
38248: FOR_TO
38249: IFFALSE 38337
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38251: LD_ADDR_VAR 0 5
38255: PUSH
38256: LD_VAR 0 5
38260: PUSH
38261: LD_VAR 0 3
38265: PUSH
38266: LD_VAR 0 4
38270: ARRAY
38271: PPUSH
38272: CALL_OW 266
38276: PUSH
38277: LD_VAR 0 3
38281: PUSH
38282: LD_VAR 0 4
38286: ARRAY
38287: PPUSH
38288: CALL_OW 250
38292: PUSH
38293: LD_VAR 0 3
38297: PUSH
38298: LD_VAR 0 4
38302: ARRAY
38303: PPUSH
38304: CALL_OW 251
38308: PUSH
38309: LD_VAR 0 3
38313: PUSH
38314: LD_VAR 0 4
38318: ARRAY
38319: PPUSH
38320: CALL_OW 254
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: PUSH
38331: EMPTY
38332: LIST
38333: ADD
38334: ST_TO_ADDR
38335: GO 38248
38337: POP
38338: POP
// result := list ;
38339: LD_ADDR_VAR 0 2
38343: PUSH
38344: LD_VAR 0 5
38348: ST_TO_ADDR
// end ;
38349: LD_VAR 0 2
38353: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38354: LD_INT 0
38356: PPUSH
38357: PPUSH
38358: PPUSH
38359: PPUSH
38360: PPUSH
38361: PPUSH
38362: PPUSH
// if not factory then
38363: LD_VAR 0 1
38367: NOT
38368: IFFALSE 38372
// exit ;
38370: GO 38965
// if control = control_apeman then
38372: LD_VAR 0 4
38376: PUSH
38377: LD_INT 5
38379: EQUAL
38380: IFFALSE 38489
// begin tmp := UnitsInside ( factory ) ;
38382: LD_ADDR_VAR 0 8
38386: PUSH
38387: LD_VAR 0 1
38391: PPUSH
38392: CALL_OW 313
38396: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38397: LD_VAR 0 8
38401: PPUSH
38402: LD_INT 25
38404: PUSH
38405: LD_INT 12
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PPUSH
38412: CALL_OW 72
38416: NOT
38417: IFFALSE 38427
// control := control_manual ;
38419: LD_ADDR_VAR 0 4
38423: PUSH
38424: LD_INT 1
38426: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38427: LD_ADDR_VAR 0 8
38431: PUSH
38432: LD_VAR 0 1
38436: PPUSH
38437: CALL 38124 0 1
38441: ST_TO_ADDR
// if tmp then
38442: LD_VAR 0 8
38446: IFFALSE 38489
// begin for i in tmp do
38448: LD_ADDR_VAR 0 7
38452: PUSH
38453: LD_VAR 0 8
38457: PUSH
38458: FOR_IN
38459: IFFALSE 38487
// if i [ 1 ] = b_ext_radio then
38461: LD_VAR 0 7
38465: PUSH
38466: LD_INT 1
38468: ARRAY
38469: PUSH
38470: LD_INT 22
38472: EQUAL
38473: IFFALSE 38485
// begin control := control_remote ;
38475: LD_ADDR_VAR 0 4
38479: PUSH
38480: LD_INT 2
38482: ST_TO_ADDR
// break ;
38483: GO 38487
// end ;
38485: GO 38458
38487: POP
38488: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38489: LD_VAR 0 1
38493: PPUSH
38494: LD_VAR 0 2
38498: PPUSH
38499: LD_VAR 0 3
38503: PPUSH
38504: LD_VAR 0 4
38508: PPUSH
38509: LD_VAR 0 5
38513: PPUSH
38514: CALL_OW 448
38518: IFFALSE 38553
// begin result := [ chassis , engine , control , weapon ] ;
38520: LD_ADDR_VAR 0 6
38524: PUSH
38525: LD_VAR 0 2
38529: PUSH
38530: LD_VAR 0 3
38534: PUSH
38535: LD_VAR 0 4
38539: PUSH
38540: LD_VAR 0 5
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: ST_TO_ADDR
// exit ;
38551: GO 38965
// end ; _chassis := AvailableChassisList ( factory ) ;
38553: LD_ADDR_VAR 0 9
38557: PUSH
38558: LD_VAR 0 1
38562: PPUSH
38563: CALL_OW 475
38567: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38568: LD_ADDR_VAR 0 11
38572: PUSH
38573: LD_VAR 0 1
38577: PPUSH
38578: CALL_OW 476
38582: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38583: LD_ADDR_VAR 0 12
38587: PUSH
38588: LD_VAR 0 1
38592: PPUSH
38593: CALL_OW 477
38597: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38598: LD_ADDR_VAR 0 10
38602: PUSH
38603: LD_VAR 0 1
38607: PPUSH
38608: CALL_OW 478
38612: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38613: LD_VAR 0 9
38617: NOT
38618: PUSH
38619: LD_VAR 0 11
38623: NOT
38624: OR
38625: PUSH
38626: LD_VAR 0 12
38630: NOT
38631: OR
38632: PUSH
38633: LD_VAR 0 10
38637: NOT
38638: OR
38639: IFFALSE 38674
// begin result := [ chassis , engine , control , weapon ] ;
38641: LD_ADDR_VAR 0 6
38645: PUSH
38646: LD_VAR 0 2
38650: PUSH
38651: LD_VAR 0 3
38655: PUSH
38656: LD_VAR 0 4
38660: PUSH
38661: LD_VAR 0 5
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: ST_TO_ADDR
// exit ;
38672: GO 38965
// end ; if not chassis in _chassis then
38674: LD_VAR 0 2
38678: PUSH
38679: LD_VAR 0 9
38683: IN
38684: NOT
38685: IFFALSE 38711
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38687: LD_ADDR_VAR 0 2
38691: PUSH
38692: LD_VAR 0 9
38696: PUSH
38697: LD_INT 1
38699: PPUSH
38700: LD_VAR 0 9
38704: PPUSH
38705: CALL_OW 12
38709: ARRAY
38710: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38711: LD_VAR 0 2
38715: PPUSH
38716: LD_VAR 0 3
38720: PPUSH
38721: CALL 38970 0 2
38725: NOT
38726: IFFALSE 38785
// repeat engine := _engine [ 1 ] ;
38728: LD_ADDR_VAR 0 3
38732: PUSH
38733: LD_VAR 0 11
38737: PUSH
38738: LD_INT 1
38740: ARRAY
38741: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38742: LD_ADDR_VAR 0 11
38746: PUSH
38747: LD_VAR 0 11
38751: PPUSH
38752: LD_INT 1
38754: PPUSH
38755: CALL_OW 3
38759: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38760: LD_VAR 0 2
38764: PPUSH
38765: LD_VAR 0 3
38769: PPUSH
38770: CALL 38970 0 2
38774: PUSH
38775: LD_VAR 0 11
38779: PUSH
38780: EMPTY
38781: EQUAL
38782: OR
38783: IFFALSE 38728
// if not control in _control then
38785: LD_VAR 0 4
38789: PUSH
38790: LD_VAR 0 12
38794: IN
38795: NOT
38796: IFFALSE 38822
// control := _control [ rand ( 1 , _control ) ] ;
38798: LD_ADDR_VAR 0 4
38802: PUSH
38803: LD_VAR 0 12
38807: PUSH
38808: LD_INT 1
38810: PPUSH
38811: LD_VAR 0 12
38815: PPUSH
38816: CALL_OW 12
38820: ARRAY
38821: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38822: LD_VAR 0 2
38826: PPUSH
38827: LD_VAR 0 5
38831: PPUSH
38832: CALL 39190 0 2
38836: NOT
38837: IFFALSE 38896
// repeat weapon := _weapon [ 1 ] ;
38839: LD_ADDR_VAR 0 5
38843: PUSH
38844: LD_VAR 0 10
38848: PUSH
38849: LD_INT 1
38851: ARRAY
38852: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38853: LD_ADDR_VAR 0 10
38857: PUSH
38858: LD_VAR 0 10
38862: PPUSH
38863: LD_INT 1
38865: PPUSH
38866: CALL_OW 3
38870: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38871: LD_VAR 0 2
38875: PPUSH
38876: LD_VAR 0 5
38880: PPUSH
38881: CALL 39190 0 2
38885: PUSH
38886: LD_VAR 0 10
38890: PUSH
38891: EMPTY
38892: EQUAL
38893: OR
38894: IFFALSE 38839
// result := [ ] ;
38896: LD_ADDR_VAR 0 6
38900: PUSH
38901: EMPTY
38902: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38903: LD_VAR 0 1
38907: PPUSH
38908: LD_VAR 0 2
38912: PPUSH
38913: LD_VAR 0 3
38917: PPUSH
38918: LD_VAR 0 4
38922: PPUSH
38923: LD_VAR 0 5
38927: PPUSH
38928: CALL_OW 448
38932: IFFALSE 38965
// result := [ chassis , engine , control , weapon ] ;
38934: LD_ADDR_VAR 0 6
38938: PUSH
38939: LD_VAR 0 2
38943: PUSH
38944: LD_VAR 0 3
38948: PUSH
38949: LD_VAR 0 4
38953: PUSH
38954: LD_VAR 0 5
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: ST_TO_ADDR
// end ;
38965: LD_VAR 0 6
38969: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38970: LD_INT 0
38972: PPUSH
// if not chassis or not engine then
38973: LD_VAR 0 1
38977: NOT
38978: PUSH
38979: LD_VAR 0 2
38983: NOT
38984: OR
38985: IFFALSE 38989
// exit ;
38987: GO 39185
// case engine of engine_solar :
38989: LD_VAR 0 2
38993: PUSH
38994: LD_INT 2
38996: DOUBLE
38997: EQUAL
38998: IFTRUE 39002
39000: GO 39040
39002: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39003: LD_ADDR_VAR 0 3
39007: PUSH
39008: LD_INT 11
39010: PUSH
39011: LD_INT 12
39013: PUSH
39014: LD_INT 13
39016: PUSH
39017: LD_INT 14
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: LD_INT 2
39025: PUSH
39026: LD_INT 3
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: ST_TO_ADDR
39038: GO 39169
39040: LD_INT 1
39042: DOUBLE
39043: EQUAL
39044: IFTRUE 39048
39046: GO 39110
39048: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39049: LD_ADDR_VAR 0 3
39053: PUSH
39054: LD_INT 11
39056: PUSH
39057: LD_INT 12
39059: PUSH
39060: LD_INT 13
39062: PUSH
39063: LD_INT 14
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: LD_INT 2
39071: PUSH
39072: LD_INT 3
39074: PUSH
39075: LD_INT 4
39077: PUSH
39078: LD_INT 5
39080: PUSH
39081: LD_INT 21
39083: PUSH
39084: LD_INT 23
39086: PUSH
39087: LD_INT 22
39089: PUSH
39090: LD_INT 24
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: ST_TO_ADDR
39108: GO 39169
39110: LD_INT 3
39112: DOUBLE
39113: EQUAL
39114: IFTRUE 39118
39116: GO 39168
39118: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39119: LD_ADDR_VAR 0 3
39123: PUSH
39124: LD_INT 13
39126: PUSH
39127: LD_INT 14
39129: PUSH
39130: LD_INT 2
39132: PUSH
39133: LD_INT 3
39135: PUSH
39136: LD_INT 4
39138: PUSH
39139: LD_INT 5
39141: PUSH
39142: LD_INT 21
39144: PUSH
39145: LD_INT 22
39147: PUSH
39148: LD_INT 23
39150: PUSH
39151: LD_INT 24
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: ST_TO_ADDR
39166: GO 39169
39168: POP
// result := ( chassis in result ) ;
39169: LD_ADDR_VAR 0 3
39173: PUSH
39174: LD_VAR 0 1
39178: PUSH
39179: LD_VAR 0 3
39183: IN
39184: ST_TO_ADDR
// end ;
39185: LD_VAR 0 3
39189: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39190: LD_INT 0
39192: PPUSH
// if not chassis or not weapon then
39193: LD_VAR 0 1
39197: NOT
39198: PUSH
39199: LD_VAR 0 2
39203: NOT
39204: OR
39205: IFFALSE 39209
// exit ;
39207: GO 40235
// case weapon of us_machine_gun :
39209: LD_VAR 0 2
39213: PUSH
39214: LD_INT 2
39216: DOUBLE
39217: EQUAL
39218: IFTRUE 39222
39220: GO 39252
39222: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39223: LD_ADDR_VAR 0 3
39227: PUSH
39228: LD_INT 1
39230: PUSH
39231: LD_INT 2
39233: PUSH
39234: LD_INT 3
39236: PUSH
39237: LD_INT 4
39239: PUSH
39240: LD_INT 5
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: ST_TO_ADDR
39250: GO 40219
39252: LD_INT 3
39254: DOUBLE
39255: EQUAL
39256: IFTRUE 39260
39258: GO 39290
39260: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39261: LD_ADDR_VAR 0 3
39265: PUSH
39266: LD_INT 1
39268: PUSH
39269: LD_INT 2
39271: PUSH
39272: LD_INT 3
39274: PUSH
39275: LD_INT 4
39277: PUSH
39278: LD_INT 5
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: ST_TO_ADDR
39288: GO 40219
39290: LD_INT 11
39292: DOUBLE
39293: EQUAL
39294: IFTRUE 39298
39296: GO 39328
39298: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39299: LD_ADDR_VAR 0 3
39303: PUSH
39304: LD_INT 1
39306: PUSH
39307: LD_INT 2
39309: PUSH
39310: LD_INT 3
39312: PUSH
39313: LD_INT 4
39315: PUSH
39316: LD_INT 5
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: ST_TO_ADDR
39326: GO 40219
39328: LD_INT 4
39330: DOUBLE
39331: EQUAL
39332: IFTRUE 39336
39334: GO 39362
39336: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39337: LD_ADDR_VAR 0 3
39341: PUSH
39342: LD_INT 2
39344: PUSH
39345: LD_INT 3
39347: PUSH
39348: LD_INT 4
39350: PUSH
39351: LD_INT 5
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: ST_TO_ADDR
39360: GO 40219
39362: LD_INT 5
39364: DOUBLE
39365: EQUAL
39366: IFTRUE 39370
39368: GO 39396
39370: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39371: LD_ADDR_VAR 0 3
39375: PUSH
39376: LD_INT 2
39378: PUSH
39379: LD_INT 3
39381: PUSH
39382: LD_INT 4
39384: PUSH
39385: LD_INT 5
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: ST_TO_ADDR
39394: GO 40219
39396: LD_INT 9
39398: DOUBLE
39399: EQUAL
39400: IFTRUE 39404
39402: GO 39430
39404: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39405: LD_ADDR_VAR 0 3
39409: PUSH
39410: LD_INT 2
39412: PUSH
39413: LD_INT 3
39415: PUSH
39416: LD_INT 4
39418: PUSH
39419: LD_INT 5
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: ST_TO_ADDR
39428: GO 40219
39430: LD_INT 7
39432: DOUBLE
39433: EQUAL
39434: IFTRUE 39438
39436: GO 39464
39438: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39439: LD_ADDR_VAR 0 3
39443: PUSH
39444: LD_INT 2
39446: PUSH
39447: LD_INT 3
39449: PUSH
39450: LD_INT 4
39452: PUSH
39453: LD_INT 5
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: ST_TO_ADDR
39462: GO 40219
39464: LD_INT 12
39466: DOUBLE
39467: EQUAL
39468: IFTRUE 39472
39470: GO 39498
39472: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39473: LD_ADDR_VAR 0 3
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: LD_INT 3
39483: PUSH
39484: LD_INT 4
39486: PUSH
39487: LD_INT 5
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: ST_TO_ADDR
39496: GO 40219
39498: LD_INT 13
39500: DOUBLE
39501: EQUAL
39502: IFTRUE 39506
39504: GO 39532
39506: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39507: LD_ADDR_VAR 0 3
39511: PUSH
39512: LD_INT 2
39514: PUSH
39515: LD_INT 3
39517: PUSH
39518: LD_INT 4
39520: PUSH
39521: LD_INT 5
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: ST_TO_ADDR
39530: GO 40219
39532: LD_INT 14
39534: DOUBLE
39535: EQUAL
39536: IFTRUE 39540
39538: GO 39558
39540: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39541: LD_ADDR_VAR 0 3
39545: PUSH
39546: LD_INT 4
39548: PUSH
39549: LD_INT 5
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: ST_TO_ADDR
39556: GO 40219
39558: LD_INT 6
39560: DOUBLE
39561: EQUAL
39562: IFTRUE 39566
39564: GO 39584
39566: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39567: LD_ADDR_VAR 0 3
39571: PUSH
39572: LD_INT 4
39574: PUSH
39575: LD_INT 5
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: ST_TO_ADDR
39582: GO 40219
39584: LD_INT 10
39586: DOUBLE
39587: EQUAL
39588: IFTRUE 39592
39590: GO 39610
39592: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39593: LD_ADDR_VAR 0 3
39597: PUSH
39598: LD_INT 4
39600: PUSH
39601: LD_INT 5
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: ST_TO_ADDR
39608: GO 40219
39610: LD_INT 22
39612: DOUBLE
39613: EQUAL
39614: IFTRUE 39618
39616: GO 39644
39618: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39619: LD_ADDR_VAR 0 3
39623: PUSH
39624: LD_INT 11
39626: PUSH
39627: LD_INT 12
39629: PUSH
39630: LD_INT 13
39632: PUSH
39633: LD_INT 14
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: ST_TO_ADDR
39642: GO 40219
39644: LD_INT 23
39646: DOUBLE
39647: EQUAL
39648: IFTRUE 39652
39650: GO 39678
39652: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39653: LD_ADDR_VAR 0 3
39657: PUSH
39658: LD_INT 11
39660: PUSH
39661: LD_INT 12
39663: PUSH
39664: LD_INT 13
39666: PUSH
39667: LD_INT 14
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: ST_TO_ADDR
39676: GO 40219
39678: LD_INT 24
39680: DOUBLE
39681: EQUAL
39682: IFTRUE 39686
39684: GO 39712
39686: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39687: LD_ADDR_VAR 0 3
39691: PUSH
39692: LD_INT 11
39694: PUSH
39695: LD_INT 12
39697: PUSH
39698: LD_INT 13
39700: PUSH
39701: LD_INT 14
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: ST_TO_ADDR
39710: GO 40219
39712: LD_INT 30
39714: DOUBLE
39715: EQUAL
39716: IFTRUE 39720
39718: GO 39746
39720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39721: LD_ADDR_VAR 0 3
39725: PUSH
39726: LD_INT 11
39728: PUSH
39729: LD_INT 12
39731: PUSH
39732: LD_INT 13
39734: PUSH
39735: LD_INT 14
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: ST_TO_ADDR
39744: GO 40219
39746: LD_INT 25
39748: DOUBLE
39749: EQUAL
39750: IFTRUE 39754
39752: GO 39772
39754: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39755: LD_ADDR_VAR 0 3
39759: PUSH
39760: LD_INT 13
39762: PUSH
39763: LD_INT 14
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: ST_TO_ADDR
39770: GO 40219
39772: LD_INT 27
39774: DOUBLE
39775: EQUAL
39776: IFTRUE 39780
39778: GO 39798
39780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39781: LD_ADDR_VAR 0 3
39785: PUSH
39786: LD_INT 13
39788: PUSH
39789: LD_INT 14
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: ST_TO_ADDR
39796: GO 40219
39798: LD_INT 28
39800: DOUBLE
39801: EQUAL
39802: IFTRUE 39806
39804: GO 39824
39806: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39807: LD_ADDR_VAR 0 3
39811: PUSH
39812: LD_INT 13
39814: PUSH
39815: LD_INT 14
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: ST_TO_ADDR
39822: GO 40219
39824: LD_INT 29
39826: DOUBLE
39827: EQUAL
39828: IFTRUE 39832
39830: GO 39850
39832: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39833: LD_ADDR_VAR 0 3
39837: PUSH
39838: LD_INT 13
39840: PUSH
39841: LD_INT 14
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: ST_TO_ADDR
39848: GO 40219
39850: LD_INT 31
39852: DOUBLE
39853: EQUAL
39854: IFTRUE 39858
39856: GO 39876
39858: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39859: LD_ADDR_VAR 0 3
39863: PUSH
39864: LD_INT 13
39866: PUSH
39867: LD_INT 14
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: ST_TO_ADDR
39874: GO 40219
39876: LD_INT 26
39878: DOUBLE
39879: EQUAL
39880: IFTRUE 39884
39882: GO 39902
39884: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39885: LD_ADDR_VAR 0 3
39889: PUSH
39890: LD_INT 13
39892: PUSH
39893: LD_INT 14
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: ST_TO_ADDR
39900: GO 40219
39902: LD_INT 42
39904: DOUBLE
39905: EQUAL
39906: IFTRUE 39910
39908: GO 39936
39910: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39911: LD_ADDR_VAR 0 3
39915: PUSH
39916: LD_INT 21
39918: PUSH
39919: LD_INT 22
39921: PUSH
39922: LD_INT 23
39924: PUSH
39925: LD_INT 24
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: ST_TO_ADDR
39934: GO 40219
39936: LD_INT 43
39938: DOUBLE
39939: EQUAL
39940: IFTRUE 39944
39942: GO 39970
39944: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39945: LD_ADDR_VAR 0 3
39949: PUSH
39950: LD_INT 21
39952: PUSH
39953: LD_INT 22
39955: PUSH
39956: LD_INT 23
39958: PUSH
39959: LD_INT 24
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: ST_TO_ADDR
39968: GO 40219
39970: LD_INT 44
39972: DOUBLE
39973: EQUAL
39974: IFTRUE 39978
39976: GO 40004
39978: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39979: LD_ADDR_VAR 0 3
39983: PUSH
39984: LD_INT 21
39986: PUSH
39987: LD_INT 22
39989: PUSH
39990: LD_INT 23
39992: PUSH
39993: LD_INT 24
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: ST_TO_ADDR
40002: GO 40219
40004: LD_INT 45
40006: DOUBLE
40007: EQUAL
40008: IFTRUE 40012
40010: GO 40038
40012: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40013: LD_ADDR_VAR 0 3
40017: PUSH
40018: LD_INT 21
40020: PUSH
40021: LD_INT 22
40023: PUSH
40024: LD_INT 23
40026: PUSH
40027: LD_INT 24
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: ST_TO_ADDR
40036: GO 40219
40038: LD_INT 49
40040: DOUBLE
40041: EQUAL
40042: IFTRUE 40046
40044: GO 40072
40046: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40047: LD_ADDR_VAR 0 3
40051: PUSH
40052: LD_INT 21
40054: PUSH
40055: LD_INT 22
40057: PUSH
40058: LD_INT 23
40060: PUSH
40061: LD_INT 24
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: ST_TO_ADDR
40070: GO 40219
40072: LD_INT 51
40074: DOUBLE
40075: EQUAL
40076: IFTRUE 40080
40078: GO 40106
40080: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40081: LD_ADDR_VAR 0 3
40085: PUSH
40086: LD_INT 21
40088: PUSH
40089: LD_INT 22
40091: PUSH
40092: LD_INT 23
40094: PUSH
40095: LD_INT 24
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: ST_TO_ADDR
40104: GO 40219
40106: LD_INT 52
40108: DOUBLE
40109: EQUAL
40110: IFTRUE 40114
40112: GO 40140
40114: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40115: LD_ADDR_VAR 0 3
40119: PUSH
40120: LD_INT 21
40122: PUSH
40123: LD_INT 22
40125: PUSH
40126: LD_INT 23
40128: PUSH
40129: LD_INT 24
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: ST_TO_ADDR
40138: GO 40219
40140: LD_INT 53
40142: DOUBLE
40143: EQUAL
40144: IFTRUE 40148
40146: GO 40166
40148: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40149: LD_ADDR_VAR 0 3
40153: PUSH
40154: LD_INT 23
40156: PUSH
40157: LD_INT 24
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: ST_TO_ADDR
40164: GO 40219
40166: LD_INT 46
40168: DOUBLE
40169: EQUAL
40170: IFTRUE 40174
40172: GO 40192
40174: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40175: LD_ADDR_VAR 0 3
40179: PUSH
40180: LD_INT 23
40182: PUSH
40183: LD_INT 24
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: ST_TO_ADDR
40190: GO 40219
40192: LD_INT 47
40194: DOUBLE
40195: EQUAL
40196: IFTRUE 40200
40198: GO 40218
40200: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40201: LD_ADDR_VAR 0 3
40205: PUSH
40206: LD_INT 23
40208: PUSH
40209: LD_INT 24
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: ST_TO_ADDR
40216: GO 40219
40218: POP
// result := ( chassis in result ) ;
40219: LD_ADDR_VAR 0 3
40223: PUSH
40224: LD_VAR 0 1
40228: PUSH
40229: LD_VAR 0 3
40233: IN
40234: ST_TO_ADDR
// end ;
40235: LD_VAR 0 3
40239: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40240: LD_INT 0
40242: PPUSH
40243: PPUSH
40244: PPUSH
40245: PPUSH
40246: PPUSH
40247: PPUSH
40248: PPUSH
// result := array ;
40249: LD_ADDR_VAR 0 5
40253: PUSH
40254: LD_VAR 0 1
40258: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40259: LD_VAR 0 1
40263: NOT
40264: PUSH
40265: LD_VAR 0 2
40269: NOT
40270: OR
40271: PUSH
40272: LD_VAR 0 3
40276: NOT
40277: OR
40278: PUSH
40279: LD_VAR 0 2
40283: PUSH
40284: LD_VAR 0 1
40288: GREATER
40289: OR
40290: PUSH
40291: LD_VAR 0 3
40295: PUSH
40296: LD_VAR 0 1
40300: GREATER
40301: OR
40302: IFFALSE 40306
// exit ;
40304: GO 40602
// if direction then
40306: LD_VAR 0 4
40310: IFFALSE 40374
// begin d := 1 ;
40312: LD_ADDR_VAR 0 9
40316: PUSH
40317: LD_INT 1
40319: ST_TO_ADDR
// if i_from > i_to then
40320: LD_VAR 0 2
40324: PUSH
40325: LD_VAR 0 3
40329: GREATER
40330: IFFALSE 40356
// length := ( array - i_from ) + i_to else
40332: LD_ADDR_VAR 0 11
40336: PUSH
40337: LD_VAR 0 1
40341: PUSH
40342: LD_VAR 0 2
40346: MINUS
40347: PUSH
40348: LD_VAR 0 3
40352: PLUS
40353: ST_TO_ADDR
40354: GO 40372
// length := i_to - i_from ;
40356: LD_ADDR_VAR 0 11
40360: PUSH
40361: LD_VAR 0 3
40365: PUSH
40366: LD_VAR 0 2
40370: MINUS
40371: ST_TO_ADDR
// end else
40372: GO 40435
// begin d := - 1 ;
40374: LD_ADDR_VAR 0 9
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: ST_TO_ADDR
// if i_from > i_to then
40383: LD_VAR 0 2
40387: PUSH
40388: LD_VAR 0 3
40392: GREATER
40393: IFFALSE 40413
// length := i_from - i_to else
40395: LD_ADDR_VAR 0 11
40399: PUSH
40400: LD_VAR 0 2
40404: PUSH
40405: LD_VAR 0 3
40409: MINUS
40410: ST_TO_ADDR
40411: GO 40435
// length := ( array - i_to ) + i_from ;
40413: LD_ADDR_VAR 0 11
40417: PUSH
40418: LD_VAR 0 1
40422: PUSH
40423: LD_VAR 0 3
40427: MINUS
40428: PUSH
40429: LD_VAR 0 2
40433: PLUS
40434: ST_TO_ADDR
// end ; if not length then
40435: LD_VAR 0 11
40439: NOT
40440: IFFALSE 40444
// exit ;
40442: GO 40602
// tmp := array ;
40444: LD_ADDR_VAR 0 10
40448: PUSH
40449: LD_VAR 0 1
40453: ST_TO_ADDR
// for i = 1 to length do
40454: LD_ADDR_VAR 0 6
40458: PUSH
40459: DOUBLE
40460: LD_INT 1
40462: DEC
40463: ST_TO_ADDR
40464: LD_VAR 0 11
40468: PUSH
40469: FOR_TO
40470: IFFALSE 40590
// begin for j = 1 to array do
40472: LD_ADDR_VAR 0 7
40476: PUSH
40477: DOUBLE
40478: LD_INT 1
40480: DEC
40481: ST_TO_ADDR
40482: LD_VAR 0 1
40486: PUSH
40487: FOR_TO
40488: IFFALSE 40576
// begin k := j + d ;
40490: LD_ADDR_VAR 0 8
40494: PUSH
40495: LD_VAR 0 7
40499: PUSH
40500: LD_VAR 0 9
40504: PLUS
40505: ST_TO_ADDR
// if k > array then
40506: LD_VAR 0 8
40510: PUSH
40511: LD_VAR 0 1
40515: GREATER
40516: IFFALSE 40526
// k := 1 ;
40518: LD_ADDR_VAR 0 8
40522: PUSH
40523: LD_INT 1
40525: ST_TO_ADDR
// if not k then
40526: LD_VAR 0 8
40530: NOT
40531: IFFALSE 40543
// k := array ;
40533: LD_ADDR_VAR 0 8
40537: PUSH
40538: LD_VAR 0 1
40542: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40543: LD_ADDR_VAR 0 10
40547: PUSH
40548: LD_VAR 0 10
40552: PPUSH
40553: LD_VAR 0 8
40557: PPUSH
40558: LD_VAR 0 1
40562: PUSH
40563: LD_VAR 0 7
40567: ARRAY
40568: PPUSH
40569: CALL_OW 1
40573: ST_TO_ADDR
// end ;
40574: GO 40487
40576: POP
40577: POP
// array := tmp ;
40578: LD_ADDR_VAR 0 1
40582: PUSH
40583: LD_VAR 0 10
40587: ST_TO_ADDR
// end ;
40588: GO 40469
40590: POP
40591: POP
// result := array ;
40592: LD_ADDR_VAR 0 5
40596: PUSH
40597: LD_VAR 0 1
40601: ST_TO_ADDR
// end ;
40602: LD_VAR 0 5
40606: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40607: LD_INT 0
40609: PPUSH
40610: PPUSH
// result := 0 ;
40611: LD_ADDR_VAR 0 3
40615: PUSH
40616: LD_INT 0
40618: ST_TO_ADDR
// if not array or not value in array then
40619: LD_VAR 0 1
40623: NOT
40624: PUSH
40625: LD_VAR 0 2
40629: PUSH
40630: LD_VAR 0 1
40634: IN
40635: NOT
40636: OR
40637: IFFALSE 40641
// exit ;
40639: GO 40695
// for i = 1 to array do
40641: LD_ADDR_VAR 0 4
40645: PUSH
40646: DOUBLE
40647: LD_INT 1
40649: DEC
40650: ST_TO_ADDR
40651: LD_VAR 0 1
40655: PUSH
40656: FOR_TO
40657: IFFALSE 40693
// if value = array [ i ] then
40659: LD_VAR 0 2
40663: PUSH
40664: LD_VAR 0 1
40668: PUSH
40669: LD_VAR 0 4
40673: ARRAY
40674: EQUAL
40675: IFFALSE 40691
// begin result := i ;
40677: LD_ADDR_VAR 0 3
40681: PUSH
40682: LD_VAR 0 4
40686: ST_TO_ADDR
// exit ;
40687: POP
40688: POP
40689: GO 40695
// end ;
40691: GO 40656
40693: POP
40694: POP
// end ;
40695: LD_VAR 0 3
40699: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40700: LD_INT 0
40702: PPUSH
// vc_chassis := chassis ;
40703: LD_ADDR_OWVAR 37
40707: PUSH
40708: LD_VAR 0 1
40712: ST_TO_ADDR
// vc_engine := engine ;
40713: LD_ADDR_OWVAR 39
40717: PUSH
40718: LD_VAR 0 2
40722: ST_TO_ADDR
// vc_control := control ;
40723: LD_ADDR_OWVAR 38
40727: PUSH
40728: LD_VAR 0 3
40732: ST_TO_ADDR
// vc_weapon := weapon ;
40733: LD_ADDR_OWVAR 40
40737: PUSH
40738: LD_VAR 0 4
40742: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40743: LD_ADDR_OWVAR 41
40747: PUSH
40748: LD_VAR 0 5
40752: ST_TO_ADDR
// end ;
40753: LD_VAR 0 6
40757: RET
// export function WantPlant ( unit ) ; var task ; begin
40758: LD_INT 0
40760: PPUSH
40761: PPUSH
// result := false ;
40762: LD_ADDR_VAR 0 2
40766: PUSH
40767: LD_INT 0
40769: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40770: LD_ADDR_VAR 0 3
40774: PUSH
40775: LD_VAR 0 1
40779: PPUSH
40780: CALL_OW 437
40784: ST_TO_ADDR
// if task then
40785: LD_VAR 0 3
40789: IFFALSE 40817
// if task [ 1 ] [ 1 ] = p then
40791: LD_VAR 0 3
40795: PUSH
40796: LD_INT 1
40798: ARRAY
40799: PUSH
40800: LD_INT 1
40802: ARRAY
40803: PUSH
40804: LD_STRING p
40806: EQUAL
40807: IFFALSE 40817
// result := true ;
40809: LD_ADDR_VAR 0 2
40813: PUSH
40814: LD_INT 1
40816: ST_TO_ADDR
// end ;
40817: LD_VAR 0 2
40821: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40822: LD_INT 0
40824: PPUSH
40825: PPUSH
40826: PPUSH
40827: PPUSH
// if pos < 1 then
40828: LD_VAR 0 2
40832: PUSH
40833: LD_INT 1
40835: LESS
40836: IFFALSE 40840
// exit ;
40838: GO 41143
// if pos = 1 then
40840: LD_VAR 0 2
40844: PUSH
40845: LD_INT 1
40847: EQUAL
40848: IFFALSE 40881
// result := Replace ( arr , pos [ 1 ] , value ) else
40850: LD_ADDR_VAR 0 4
40854: PUSH
40855: LD_VAR 0 1
40859: PPUSH
40860: LD_VAR 0 2
40864: PUSH
40865: LD_INT 1
40867: ARRAY
40868: PPUSH
40869: LD_VAR 0 3
40873: PPUSH
40874: CALL_OW 1
40878: ST_TO_ADDR
40879: GO 41143
// begin tmp := arr ;
40881: LD_ADDR_VAR 0 6
40885: PUSH
40886: LD_VAR 0 1
40890: ST_TO_ADDR
// s_arr := [ tmp ] ;
40891: LD_ADDR_VAR 0 7
40895: PUSH
40896: LD_VAR 0 6
40900: PUSH
40901: EMPTY
40902: LIST
40903: ST_TO_ADDR
// for i = 1 to pos - 1 do
40904: LD_ADDR_VAR 0 5
40908: PUSH
40909: DOUBLE
40910: LD_INT 1
40912: DEC
40913: ST_TO_ADDR
40914: LD_VAR 0 2
40918: PUSH
40919: LD_INT 1
40921: MINUS
40922: PUSH
40923: FOR_TO
40924: IFFALSE 40969
// begin tmp := tmp [ pos [ i ] ] ;
40926: LD_ADDR_VAR 0 6
40930: PUSH
40931: LD_VAR 0 6
40935: PUSH
40936: LD_VAR 0 2
40940: PUSH
40941: LD_VAR 0 5
40945: ARRAY
40946: ARRAY
40947: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40948: LD_ADDR_VAR 0 7
40952: PUSH
40953: LD_VAR 0 7
40957: PUSH
40958: LD_VAR 0 6
40962: PUSH
40963: EMPTY
40964: LIST
40965: ADD
40966: ST_TO_ADDR
// end ;
40967: GO 40923
40969: POP
40970: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40971: LD_ADDR_VAR 0 6
40975: PUSH
40976: LD_VAR 0 6
40980: PPUSH
40981: LD_VAR 0 2
40985: PUSH
40986: LD_VAR 0 2
40990: ARRAY
40991: PPUSH
40992: LD_VAR 0 3
40996: PPUSH
40997: CALL_OW 1
41001: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41002: LD_ADDR_VAR 0 7
41006: PUSH
41007: LD_VAR 0 7
41011: PPUSH
41012: LD_VAR 0 7
41016: PPUSH
41017: LD_VAR 0 6
41021: PPUSH
41022: CALL_OW 1
41026: ST_TO_ADDR
// for i = s_arr downto 2 do
41027: LD_ADDR_VAR 0 5
41031: PUSH
41032: DOUBLE
41033: LD_VAR 0 7
41037: INC
41038: ST_TO_ADDR
41039: LD_INT 2
41041: PUSH
41042: FOR_DOWNTO
41043: IFFALSE 41127
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41045: LD_ADDR_VAR 0 6
41049: PUSH
41050: LD_VAR 0 7
41054: PUSH
41055: LD_VAR 0 5
41059: PUSH
41060: LD_INT 1
41062: MINUS
41063: ARRAY
41064: PPUSH
41065: LD_VAR 0 2
41069: PUSH
41070: LD_VAR 0 5
41074: PUSH
41075: LD_INT 1
41077: MINUS
41078: ARRAY
41079: PPUSH
41080: LD_VAR 0 7
41084: PUSH
41085: LD_VAR 0 5
41089: ARRAY
41090: PPUSH
41091: CALL_OW 1
41095: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41096: LD_ADDR_VAR 0 7
41100: PUSH
41101: LD_VAR 0 7
41105: PPUSH
41106: LD_VAR 0 5
41110: PUSH
41111: LD_INT 1
41113: MINUS
41114: PPUSH
41115: LD_VAR 0 6
41119: PPUSH
41120: CALL_OW 1
41124: ST_TO_ADDR
// end ;
41125: GO 41042
41127: POP
41128: POP
// result := s_arr [ 1 ] ;
41129: LD_ADDR_VAR 0 4
41133: PUSH
41134: LD_VAR 0 7
41138: PUSH
41139: LD_INT 1
41141: ARRAY
41142: ST_TO_ADDR
// end ; end ;
41143: LD_VAR 0 4
41147: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41148: LD_INT 0
41150: PPUSH
41151: PPUSH
// if not list then
41152: LD_VAR 0 1
41156: NOT
41157: IFFALSE 41161
// exit ;
41159: GO 41252
// i := list [ pos1 ] ;
41161: LD_ADDR_VAR 0 5
41165: PUSH
41166: LD_VAR 0 1
41170: PUSH
41171: LD_VAR 0 2
41175: ARRAY
41176: ST_TO_ADDR
// if not i then
41177: LD_VAR 0 5
41181: NOT
41182: IFFALSE 41186
// exit ;
41184: GO 41252
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41186: LD_ADDR_VAR 0 1
41190: PUSH
41191: LD_VAR 0 1
41195: PPUSH
41196: LD_VAR 0 2
41200: PPUSH
41201: LD_VAR 0 1
41205: PUSH
41206: LD_VAR 0 3
41210: ARRAY
41211: PPUSH
41212: CALL_OW 1
41216: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41217: LD_ADDR_VAR 0 1
41221: PUSH
41222: LD_VAR 0 1
41226: PPUSH
41227: LD_VAR 0 3
41231: PPUSH
41232: LD_VAR 0 5
41236: PPUSH
41237: CALL_OW 1
41241: ST_TO_ADDR
// result := list ;
41242: LD_ADDR_VAR 0 4
41246: PUSH
41247: LD_VAR 0 1
41251: ST_TO_ADDR
// end ;
41252: LD_VAR 0 4
41256: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41257: LD_INT 0
41259: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41260: LD_ADDR_VAR 0 5
41264: PUSH
41265: LD_VAR 0 1
41269: PPUSH
41270: CALL_OW 250
41274: PPUSH
41275: LD_VAR 0 1
41279: PPUSH
41280: CALL_OW 251
41284: PPUSH
41285: LD_VAR 0 2
41289: PPUSH
41290: LD_VAR 0 3
41294: PPUSH
41295: LD_VAR 0 4
41299: PPUSH
41300: CALL 41310 0 5
41304: ST_TO_ADDR
// end ;
41305: LD_VAR 0 5
41309: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41310: LD_INT 0
41312: PPUSH
41313: PPUSH
41314: PPUSH
41315: PPUSH
// if not list then
41316: LD_VAR 0 3
41320: NOT
41321: IFFALSE 41325
// exit ;
41323: GO 41713
// result := [ ] ;
41325: LD_ADDR_VAR 0 6
41329: PUSH
41330: EMPTY
41331: ST_TO_ADDR
// for i in list do
41332: LD_ADDR_VAR 0 7
41336: PUSH
41337: LD_VAR 0 3
41341: PUSH
41342: FOR_IN
41343: IFFALSE 41545
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41345: LD_ADDR_VAR 0 9
41349: PUSH
41350: LD_VAR 0 7
41354: PPUSH
41355: LD_VAR 0 1
41359: PPUSH
41360: LD_VAR 0 2
41364: PPUSH
41365: CALL_OW 297
41369: ST_TO_ADDR
// if not result then
41370: LD_VAR 0 6
41374: NOT
41375: IFFALSE 41401
// result := [ [ i , tmp ] ] else
41377: LD_ADDR_VAR 0 6
41381: PUSH
41382: LD_VAR 0 7
41386: PUSH
41387: LD_VAR 0 9
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: EMPTY
41397: LIST
41398: ST_TO_ADDR
41399: GO 41543
// begin if result [ result ] [ 2 ] < tmp then
41401: LD_VAR 0 6
41405: PUSH
41406: LD_VAR 0 6
41410: ARRAY
41411: PUSH
41412: LD_INT 2
41414: ARRAY
41415: PUSH
41416: LD_VAR 0 9
41420: LESS
41421: IFFALSE 41463
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41423: LD_ADDR_VAR 0 6
41427: PUSH
41428: LD_VAR 0 6
41432: PPUSH
41433: LD_VAR 0 6
41437: PUSH
41438: LD_INT 1
41440: PLUS
41441: PPUSH
41442: LD_VAR 0 7
41446: PUSH
41447: LD_VAR 0 9
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PPUSH
41456: CALL_OW 2
41460: ST_TO_ADDR
41461: GO 41543
// for j = 1 to result do
41463: LD_ADDR_VAR 0 8
41467: PUSH
41468: DOUBLE
41469: LD_INT 1
41471: DEC
41472: ST_TO_ADDR
41473: LD_VAR 0 6
41477: PUSH
41478: FOR_TO
41479: IFFALSE 41541
// begin if tmp < result [ j ] [ 2 ] then
41481: LD_VAR 0 9
41485: PUSH
41486: LD_VAR 0 6
41490: PUSH
41491: LD_VAR 0 8
41495: ARRAY
41496: PUSH
41497: LD_INT 2
41499: ARRAY
41500: LESS
41501: IFFALSE 41539
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41503: LD_ADDR_VAR 0 6
41507: PUSH
41508: LD_VAR 0 6
41512: PPUSH
41513: LD_VAR 0 8
41517: PPUSH
41518: LD_VAR 0 7
41522: PUSH
41523: LD_VAR 0 9
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PPUSH
41532: CALL_OW 2
41536: ST_TO_ADDR
// break ;
41537: GO 41541
// end ; end ;
41539: GO 41478
41541: POP
41542: POP
// end ; end ;
41543: GO 41342
41545: POP
41546: POP
// if result and not asc then
41547: LD_VAR 0 6
41551: PUSH
41552: LD_VAR 0 4
41556: NOT
41557: AND
41558: IFFALSE 41633
// begin tmp := result ;
41560: LD_ADDR_VAR 0 9
41564: PUSH
41565: LD_VAR 0 6
41569: ST_TO_ADDR
// for i = tmp downto 1 do
41570: LD_ADDR_VAR 0 7
41574: PUSH
41575: DOUBLE
41576: LD_VAR 0 9
41580: INC
41581: ST_TO_ADDR
41582: LD_INT 1
41584: PUSH
41585: FOR_DOWNTO
41586: IFFALSE 41631
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41588: LD_ADDR_VAR 0 6
41592: PUSH
41593: LD_VAR 0 6
41597: PPUSH
41598: LD_VAR 0 9
41602: PUSH
41603: LD_VAR 0 7
41607: MINUS
41608: PUSH
41609: LD_INT 1
41611: PLUS
41612: PPUSH
41613: LD_VAR 0 9
41617: PUSH
41618: LD_VAR 0 7
41622: ARRAY
41623: PPUSH
41624: CALL_OW 1
41628: ST_TO_ADDR
41629: GO 41585
41631: POP
41632: POP
// end ; tmp := [ ] ;
41633: LD_ADDR_VAR 0 9
41637: PUSH
41638: EMPTY
41639: ST_TO_ADDR
// if mode then
41640: LD_VAR 0 5
41644: IFFALSE 41713
// begin for i = 1 to result do
41646: LD_ADDR_VAR 0 7
41650: PUSH
41651: DOUBLE
41652: LD_INT 1
41654: DEC
41655: ST_TO_ADDR
41656: LD_VAR 0 6
41660: PUSH
41661: FOR_TO
41662: IFFALSE 41701
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41664: LD_ADDR_VAR 0 9
41668: PUSH
41669: LD_VAR 0 9
41673: PPUSH
41674: LD_VAR 0 7
41678: PPUSH
41679: LD_VAR 0 6
41683: PUSH
41684: LD_VAR 0 7
41688: ARRAY
41689: PUSH
41690: LD_INT 1
41692: ARRAY
41693: PPUSH
41694: CALL_OW 1
41698: ST_TO_ADDR
41699: GO 41661
41701: POP
41702: POP
// result := tmp ;
41703: LD_ADDR_VAR 0 6
41707: PUSH
41708: LD_VAR 0 9
41712: ST_TO_ADDR
// end ; end ;
41713: LD_VAR 0 6
41717: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41718: LD_INT 0
41720: PPUSH
41721: PPUSH
41722: PPUSH
41723: PPUSH
41724: PPUSH
41725: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41726: LD_ADDR_VAR 0 5
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: EMPTY
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: ST_TO_ADDR
// if not x or not y then
41748: LD_VAR 0 2
41752: NOT
41753: PUSH
41754: LD_VAR 0 3
41758: NOT
41759: OR
41760: IFFALSE 41764
// exit ;
41762: GO 43410
// if not range then
41764: LD_VAR 0 4
41768: NOT
41769: IFFALSE 41779
// range := 10 ;
41771: LD_ADDR_VAR 0 4
41775: PUSH
41776: LD_INT 10
41778: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41779: LD_ADDR_VAR 0 8
41783: PUSH
41784: LD_INT 81
41786: PUSH
41787: LD_VAR 0 1
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 92
41798: PUSH
41799: LD_VAR 0 2
41803: PUSH
41804: LD_VAR 0 3
41808: PUSH
41809: LD_VAR 0 4
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 3
41822: PUSH
41823: LD_INT 21
41825: PUSH
41826: LD_INT 3
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: LIST
41841: PPUSH
41842: CALL_OW 69
41846: ST_TO_ADDR
// if not tmp then
41847: LD_VAR 0 8
41851: NOT
41852: IFFALSE 41856
// exit ;
41854: GO 43410
// for i in tmp do
41856: LD_ADDR_VAR 0 6
41860: PUSH
41861: LD_VAR 0 8
41865: PUSH
41866: FOR_IN
41867: IFFALSE 43385
// begin points := [ 0 , 0 , 0 ] ;
41869: LD_ADDR_VAR 0 9
41873: PUSH
41874: LD_INT 0
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: LIST
41887: ST_TO_ADDR
// bpoints := 1 ;
41888: LD_ADDR_VAR 0 10
41892: PUSH
41893: LD_INT 1
41895: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41896: LD_VAR 0 6
41900: PPUSH
41901: CALL_OW 247
41905: PUSH
41906: LD_INT 1
41908: DOUBLE
41909: EQUAL
41910: IFTRUE 41914
41912: GO 42492
41914: POP
// begin if GetClass ( i ) = 1 then
41915: LD_VAR 0 6
41919: PPUSH
41920: CALL_OW 257
41924: PUSH
41925: LD_INT 1
41927: EQUAL
41928: IFFALSE 41949
// points := [ 10 , 5 , 3 ] ;
41930: LD_ADDR_VAR 0 9
41934: PUSH
41935: LD_INT 10
41937: PUSH
41938: LD_INT 5
41940: PUSH
41941: LD_INT 3
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: LIST
41948: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41949: LD_VAR 0 6
41953: PPUSH
41954: CALL_OW 257
41958: PUSH
41959: LD_INT 2
41961: PUSH
41962: LD_INT 3
41964: PUSH
41965: LD_INT 4
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: LIST
41972: IN
41973: IFFALSE 41994
// points := [ 3 , 2 , 1 ] ;
41975: LD_ADDR_VAR 0 9
41979: PUSH
41980: LD_INT 3
41982: PUSH
41983: LD_INT 2
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: LIST
41993: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41994: LD_VAR 0 6
41998: PPUSH
41999: CALL_OW 257
42003: PUSH
42004: LD_INT 5
42006: EQUAL
42007: IFFALSE 42028
// points := [ 130 , 5 , 2 ] ;
42009: LD_ADDR_VAR 0 9
42013: PUSH
42014: LD_INT 130
42016: PUSH
42017: LD_INT 5
42019: PUSH
42020: LD_INT 2
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: LIST
42027: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42028: LD_VAR 0 6
42032: PPUSH
42033: CALL_OW 257
42037: PUSH
42038: LD_INT 8
42040: EQUAL
42041: IFFALSE 42062
// points := [ 35 , 35 , 30 ] ;
42043: LD_ADDR_VAR 0 9
42047: PUSH
42048: LD_INT 35
42050: PUSH
42051: LD_INT 35
42053: PUSH
42054: LD_INT 30
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: LIST
42061: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42062: LD_VAR 0 6
42066: PPUSH
42067: CALL_OW 257
42071: PUSH
42072: LD_INT 9
42074: EQUAL
42075: IFFALSE 42096
// points := [ 20 , 55 , 40 ] ;
42077: LD_ADDR_VAR 0 9
42081: PUSH
42082: LD_INT 20
42084: PUSH
42085: LD_INT 55
42087: PUSH
42088: LD_INT 40
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: LIST
42095: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42096: LD_VAR 0 6
42100: PPUSH
42101: CALL_OW 257
42105: PUSH
42106: LD_INT 12
42108: PUSH
42109: LD_INT 16
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: IN
42116: IFFALSE 42137
// points := [ 5 , 3 , 2 ] ;
42118: LD_ADDR_VAR 0 9
42122: PUSH
42123: LD_INT 5
42125: PUSH
42126: LD_INT 3
42128: PUSH
42129: LD_INT 2
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: LIST
42136: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42137: LD_VAR 0 6
42141: PPUSH
42142: CALL_OW 257
42146: PUSH
42147: LD_INT 17
42149: EQUAL
42150: IFFALSE 42171
// points := [ 100 , 50 , 75 ] ;
42152: LD_ADDR_VAR 0 9
42156: PUSH
42157: LD_INT 100
42159: PUSH
42160: LD_INT 50
42162: PUSH
42163: LD_INT 75
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: LIST
42170: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42171: LD_VAR 0 6
42175: PPUSH
42176: CALL_OW 257
42180: PUSH
42181: LD_INT 15
42183: EQUAL
42184: IFFALSE 42205
// points := [ 10 , 5 , 3 ] ;
42186: LD_ADDR_VAR 0 9
42190: PUSH
42191: LD_INT 10
42193: PUSH
42194: LD_INT 5
42196: PUSH
42197: LD_INT 3
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: LIST
42204: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42205: LD_VAR 0 6
42209: PPUSH
42210: CALL_OW 257
42214: PUSH
42215: LD_INT 14
42217: EQUAL
42218: IFFALSE 42239
// points := [ 10 , 0 , 0 ] ;
42220: LD_ADDR_VAR 0 9
42224: PUSH
42225: LD_INT 10
42227: PUSH
42228: LD_INT 0
42230: PUSH
42231: LD_INT 0
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: LIST
42238: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42239: LD_VAR 0 6
42243: PPUSH
42244: CALL_OW 257
42248: PUSH
42249: LD_INT 11
42251: EQUAL
42252: IFFALSE 42273
// points := [ 30 , 10 , 5 ] ;
42254: LD_ADDR_VAR 0 9
42258: PUSH
42259: LD_INT 30
42261: PUSH
42262: LD_INT 10
42264: PUSH
42265: LD_INT 5
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: LIST
42272: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42273: LD_VAR 0 1
42277: PPUSH
42278: LD_INT 5
42280: PPUSH
42281: CALL_OW 321
42285: PUSH
42286: LD_INT 2
42288: EQUAL
42289: IFFALSE 42306
// bpoints := bpoints * 1.8 ;
42291: LD_ADDR_VAR 0 10
42295: PUSH
42296: LD_VAR 0 10
42300: PUSH
42301: LD_REAL  1.80000000000000E+0000
42304: MUL
42305: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42306: LD_VAR 0 6
42310: PPUSH
42311: CALL_OW 257
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: LD_INT 3
42324: PUSH
42325: LD_INT 4
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: IN
42334: PUSH
42335: LD_VAR 0 1
42339: PPUSH
42340: LD_INT 51
42342: PPUSH
42343: CALL_OW 321
42347: PUSH
42348: LD_INT 2
42350: EQUAL
42351: AND
42352: IFFALSE 42369
// bpoints := bpoints * 1.2 ;
42354: LD_ADDR_VAR 0 10
42358: PUSH
42359: LD_VAR 0 10
42363: PUSH
42364: LD_REAL  1.20000000000000E+0000
42367: MUL
42368: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42369: LD_VAR 0 6
42373: PPUSH
42374: CALL_OW 257
42378: PUSH
42379: LD_INT 5
42381: PUSH
42382: LD_INT 7
42384: PUSH
42385: LD_INT 9
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: LIST
42392: IN
42393: PUSH
42394: LD_VAR 0 1
42398: PPUSH
42399: LD_INT 52
42401: PPUSH
42402: CALL_OW 321
42406: PUSH
42407: LD_INT 2
42409: EQUAL
42410: AND
42411: IFFALSE 42428
// bpoints := bpoints * 1.5 ;
42413: LD_ADDR_VAR 0 10
42417: PUSH
42418: LD_VAR 0 10
42422: PUSH
42423: LD_REAL  1.50000000000000E+0000
42426: MUL
42427: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42428: LD_VAR 0 1
42432: PPUSH
42433: LD_INT 66
42435: PPUSH
42436: CALL_OW 321
42440: PUSH
42441: LD_INT 2
42443: EQUAL
42444: IFFALSE 42461
// bpoints := bpoints * 1.1 ;
42446: LD_ADDR_VAR 0 10
42450: PUSH
42451: LD_VAR 0 10
42455: PUSH
42456: LD_REAL  1.10000000000000E+0000
42459: MUL
42460: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42461: LD_ADDR_VAR 0 10
42465: PUSH
42466: LD_VAR 0 10
42470: PUSH
42471: LD_VAR 0 6
42475: PPUSH
42476: LD_INT 1
42478: PPUSH
42479: CALL_OW 259
42483: PUSH
42484: LD_REAL  1.15000000000000E+0000
42487: MUL
42488: MUL
42489: ST_TO_ADDR
// end ; unit_vehicle :
42490: GO 43314
42492: LD_INT 2
42494: DOUBLE
42495: EQUAL
42496: IFTRUE 42500
42498: GO 43302
42500: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42501: LD_VAR 0 6
42505: PPUSH
42506: CALL_OW 264
42510: PUSH
42511: LD_INT 2
42513: PUSH
42514: LD_INT 42
42516: PUSH
42517: LD_INT 24
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: LIST
42524: IN
42525: IFFALSE 42546
// points := [ 25 , 5 , 3 ] ;
42527: LD_ADDR_VAR 0 9
42531: PUSH
42532: LD_INT 25
42534: PUSH
42535: LD_INT 5
42537: PUSH
42538: LD_INT 3
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: LIST
42545: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42546: LD_VAR 0 6
42550: PPUSH
42551: CALL_OW 264
42555: PUSH
42556: LD_INT 4
42558: PUSH
42559: LD_INT 43
42561: PUSH
42562: LD_INT 25
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: LIST
42569: IN
42570: IFFALSE 42591
// points := [ 40 , 15 , 5 ] ;
42572: LD_ADDR_VAR 0 9
42576: PUSH
42577: LD_INT 40
42579: PUSH
42580: LD_INT 15
42582: PUSH
42583: LD_INT 5
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: LIST
42590: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42591: LD_VAR 0 6
42595: PPUSH
42596: CALL_OW 264
42600: PUSH
42601: LD_INT 3
42603: PUSH
42604: LD_INT 23
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: IN
42611: IFFALSE 42632
// points := [ 7 , 25 , 8 ] ;
42613: LD_ADDR_VAR 0 9
42617: PUSH
42618: LD_INT 7
42620: PUSH
42621: LD_INT 25
42623: PUSH
42624: LD_INT 8
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: LIST
42631: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42632: LD_VAR 0 6
42636: PPUSH
42637: CALL_OW 264
42641: PUSH
42642: LD_INT 5
42644: PUSH
42645: LD_INT 27
42647: PUSH
42648: LD_INT 44
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: IN
42656: IFFALSE 42677
// points := [ 14 , 50 , 16 ] ;
42658: LD_ADDR_VAR 0 9
42662: PUSH
42663: LD_INT 14
42665: PUSH
42666: LD_INT 50
42668: PUSH
42669: LD_INT 16
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: LIST
42676: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42677: LD_VAR 0 6
42681: PPUSH
42682: CALL_OW 264
42686: PUSH
42687: LD_INT 6
42689: PUSH
42690: LD_INT 46
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: IN
42697: IFFALSE 42718
// points := [ 32 , 120 , 70 ] ;
42699: LD_ADDR_VAR 0 9
42703: PUSH
42704: LD_INT 32
42706: PUSH
42707: LD_INT 120
42709: PUSH
42710: LD_INT 70
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: LIST
42717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
42718: LD_VAR 0 6
42722: PPUSH
42723: CALL_OW 264
42727: PUSH
42728: LD_INT 7
42730: PUSH
42731: LD_INT 28
42733: PUSH
42734: LD_INT 45
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: LIST
42741: IN
42742: IFFALSE 42763
// points := [ 35 , 20 , 45 ] ;
42744: LD_ADDR_VAR 0 9
42748: PUSH
42749: LD_INT 35
42751: PUSH
42752: LD_INT 20
42754: PUSH
42755: LD_INT 45
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: LIST
42762: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42763: LD_VAR 0 6
42767: PPUSH
42768: CALL_OW 264
42772: PUSH
42773: LD_INT 47
42775: PUSH
42776: EMPTY
42777: LIST
42778: IN
42779: IFFALSE 42800
// points := [ 67 , 45 , 75 ] ;
42781: LD_ADDR_VAR 0 9
42785: PUSH
42786: LD_INT 67
42788: PUSH
42789: LD_INT 45
42791: PUSH
42792: LD_INT 75
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: LIST
42799: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42800: LD_VAR 0 6
42804: PPUSH
42805: CALL_OW 264
42809: PUSH
42810: LD_INT 26
42812: PUSH
42813: EMPTY
42814: LIST
42815: IN
42816: IFFALSE 42837
// points := [ 120 , 30 , 80 ] ;
42818: LD_ADDR_VAR 0 9
42822: PUSH
42823: LD_INT 120
42825: PUSH
42826: LD_INT 30
42828: PUSH
42829: LD_INT 80
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: LIST
42836: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42837: LD_VAR 0 6
42841: PPUSH
42842: CALL_OW 264
42846: PUSH
42847: LD_INT 22
42849: PUSH
42850: EMPTY
42851: LIST
42852: IN
42853: IFFALSE 42874
// points := [ 40 , 1 , 1 ] ;
42855: LD_ADDR_VAR 0 9
42859: PUSH
42860: LD_INT 40
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: LIST
42873: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42874: LD_VAR 0 6
42878: PPUSH
42879: CALL_OW 264
42883: PUSH
42884: LD_INT 29
42886: PUSH
42887: EMPTY
42888: LIST
42889: IN
42890: IFFALSE 42911
// points := [ 70 , 200 , 400 ] ;
42892: LD_ADDR_VAR 0 9
42896: PUSH
42897: LD_INT 70
42899: PUSH
42900: LD_INT 200
42902: PUSH
42903: LD_INT 400
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: LIST
42910: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42911: LD_VAR 0 6
42915: PPUSH
42916: CALL_OW 264
42920: PUSH
42921: LD_INT 14
42923: PUSH
42924: LD_INT 53
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: IN
42931: IFFALSE 42952
// points := [ 40 , 10 , 20 ] ;
42933: LD_ADDR_VAR 0 9
42937: PUSH
42938: LD_INT 40
42940: PUSH
42941: LD_INT 10
42943: PUSH
42944: LD_INT 20
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: LIST
42951: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42952: LD_VAR 0 6
42956: PPUSH
42957: CALL_OW 264
42961: PUSH
42962: LD_INT 9
42964: PUSH
42965: EMPTY
42966: LIST
42967: IN
42968: IFFALSE 42989
// points := [ 5 , 70 , 20 ] ;
42970: LD_ADDR_VAR 0 9
42974: PUSH
42975: LD_INT 5
42977: PUSH
42978: LD_INT 70
42980: PUSH
42981: LD_INT 20
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: LIST
42988: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42989: LD_VAR 0 6
42993: PPUSH
42994: CALL_OW 264
42998: PUSH
42999: LD_INT 10
43001: PUSH
43002: EMPTY
43003: LIST
43004: IN
43005: IFFALSE 43026
// points := [ 35 , 110 , 70 ] ;
43007: LD_ADDR_VAR 0 9
43011: PUSH
43012: LD_INT 35
43014: PUSH
43015: LD_INT 110
43017: PUSH
43018: LD_INT 70
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: LIST
43025: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43026: LD_VAR 0 6
43030: PPUSH
43031: CALL_OW 265
43035: PUSH
43036: LD_INT 25
43038: EQUAL
43039: IFFALSE 43060
// points := [ 80 , 65 , 100 ] ;
43041: LD_ADDR_VAR 0 9
43045: PUSH
43046: LD_INT 80
43048: PUSH
43049: LD_INT 65
43051: PUSH
43052: LD_INT 100
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: LIST
43059: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43060: LD_VAR 0 6
43064: PPUSH
43065: CALL_OW 263
43069: PUSH
43070: LD_INT 1
43072: EQUAL
43073: IFFALSE 43108
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43075: LD_ADDR_VAR 0 10
43079: PUSH
43080: LD_VAR 0 10
43084: PUSH
43085: LD_VAR 0 6
43089: PPUSH
43090: CALL_OW 311
43094: PPUSH
43095: LD_INT 3
43097: PPUSH
43098: CALL_OW 259
43102: PUSH
43103: LD_INT 4
43105: MUL
43106: MUL
43107: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43108: LD_VAR 0 6
43112: PPUSH
43113: CALL_OW 263
43117: PUSH
43118: LD_INT 2
43120: EQUAL
43121: IFFALSE 43172
// begin j := IsControledBy ( i ) ;
43123: LD_ADDR_VAR 0 7
43127: PUSH
43128: LD_VAR 0 6
43132: PPUSH
43133: CALL_OW 312
43137: ST_TO_ADDR
// if j then
43138: LD_VAR 0 7
43142: IFFALSE 43172
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43144: LD_ADDR_VAR 0 10
43148: PUSH
43149: LD_VAR 0 10
43153: PUSH
43154: LD_VAR 0 7
43158: PPUSH
43159: LD_INT 3
43161: PPUSH
43162: CALL_OW 259
43166: PUSH
43167: LD_INT 3
43169: MUL
43170: MUL
43171: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43172: LD_VAR 0 6
43176: PPUSH
43177: CALL_OW 264
43181: PUSH
43182: LD_INT 5
43184: PUSH
43185: LD_INT 6
43187: PUSH
43188: LD_INT 46
43190: PUSH
43191: LD_INT 44
43193: PUSH
43194: LD_INT 47
43196: PUSH
43197: LD_INT 45
43199: PUSH
43200: LD_INT 28
43202: PUSH
43203: LD_INT 7
43205: PUSH
43206: LD_INT 27
43208: PUSH
43209: LD_INT 29
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: IN
43224: PUSH
43225: LD_VAR 0 1
43229: PPUSH
43230: LD_INT 52
43232: PPUSH
43233: CALL_OW 321
43237: PUSH
43238: LD_INT 2
43240: EQUAL
43241: AND
43242: IFFALSE 43259
// bpoints := bpoints * 1.2 ;
43244: LD_ADDR_VAR 0 10
43248: PUSH
43249: LD_VAR 0 10
43253: PUSH
43254: LD_REAL  1.20000000000000E+0000
43257: MUL
43258: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43259: LD_VAR 0 6
43263: PPUSH
43264: CALL_OW 264
43268: PUSH
43269: LD_INT 6
43271: PUSH
43272: LD_INT 46
43274: PUSH
43275: LD_INT 47
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: LIST
43282: IN
43283: IFFALSE 43300
// bpoints := bpoints * 1.2 ;
43285: LD_ADDR_VAR 0 10
43289: PUSH
43290: LD_VAR 0 10
43294: PUSH
43295: LD_REAL  1.20000000000000E+0000
43298: MUL
43299: ST_TO_ADDR
// end ; unit_building :
43300: GO 43314
43302: LD_INT 3
43304: DOUBLE
43305: EQUAL
43306: IFTRUE 43310
43308: GO 43313
43310: POP
// ; end ;
43311: GO 43314
43313: POP
// for j = 1 to 3 do
43314: LD_ADDR_VAR 0 7
43318: PUSH
43319: DOUBLE
43320: LD_INT 1
43322: DEC
43323: ST_TO_ADDR
43324: LD_INT 3
43326: PUSH
43327: FOR_TO
43328: IFFALSE 43381
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43330: LD_ADDR_VAR 0 5
43334: PUSH
43335: LD_VAR 0 5
43339: PPUSH
43340: LD_VAR 0 7
43344: PPUSH
43345: LD_VAR 0 5
43349: PUSH
43350: LD_VAR 0 7
43354: ARRAY
43355: PUSH
43356: LD_VAR 0 9
43360: PUSH
43361: LD_VAR 0 7
43365: ARRAY
43366: PUSH
43367: LD_VAR 0 10
43371: MUL
43372: PLUS
43373: PPUSH
43374: CALL_OW 1
43378: ST_TO_ADDR
43379: GO 43327
43381: POP
43382: POP
// end ;
43383: GO 41866
43385: POP
43386: POP
// result := Replace ( result , 4 , tmp ) ;
43387: LD_ADDR_VAR 0 5
43391: PUSH
43392: LD_VAR 0 5
43396: PPUSH
43397: LD_INT 4
43399: PPUSH
43400: LD_VAR 0 8
43404: PPUSH
43405: CALL_OW 1
43409: ST_TO_ADDR
// end ;
43410: LD_VAR 0 5
43414: RET
// export function DangerAtRange ( unit , range ) ; begin
43415: LD_INT 0
43417: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43418: LD_ADDR_VAR 0 3
43422: PUSH
43423: LD_VAR 0 1
43427: PPUSH
43428: CALL_OW 255
43432: PPUSH
43433: LD_VAR 0 1
43437: PPUSH
43438: CALL_OW 250
43442: PPUSH
43443: LD_VAR 0 1
43447: PPUSH
43448: CALL_OW 251
43452: PPUSH
43453: LD_VAR 0 2
43457: PPUSH
43458: CALL 41718 0 4
43462: ST_TO_ADDR
// end ;
43463: LD_VAR 0 3
43467: RET
// export function DangerInArea ( side , area ) ; begin
43468: LD_INT 0
43470: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43471: LD_ADDR_VAR 0 3
43475: PUSH
43476: LD_VAR 0 2
43480: PPUSH
43481: LD_INT 81
43483: PUSH
43484: LD_VAR 0 1
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PPUSH
43493: CALL_OW 70
43497: ST_TO_ADDR
// end ;
43498: LD_VAR 0 3
43502: RET
// export function IsExtension ( b ) ; begin
43503: LD_INT 0
43505: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43506: LD_ADDR_VAR 0 2
43510: PUSH
43511: LD_VAR 0 1
43515: PUSH
43516: LD_INT 23
43518: PUSH
43519: LD_INT 20
43521: PUSH
43522: LD_INT 22
43524: PUSH
43525: LD_INT 17
43527: PUSH
43528: LD_INT 24
43530: PUSH
43531: LD_INT 21
43533: PUSH
43534: LD_INT 19
43536: PUSH
43537: LD_INT 16
43539: PUSH
43540: LD_INT 25
43542: PUSH
43543: LD_INT 18
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: IN
43558: ST_TO_ADDR
// end ;
43559: LD_VAR 0 2
43563: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43564: LD_INT 0
43566: PPUSH
43567: PPUSH
43568: PPUSH
// result := [ ] ;
43569: LD_ADDR_VAR 0 4
43573: PUSH
43574: EMPTY
43575: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43576: LD_ADDR_VAR 0 5
43580: PUSH
43581: LD_VAR 0 2
43585: PPUSH
43586: LD_INT 21
43588: PUSH
43589: LD_INT 3
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PPUSH
43596: CALL_OW 70
43600: ST_TO_ADDR
// if not tmp then
43601: LD_VAR 0 5
43605: NOT
43606: IFFALSE 43610
// exit ;
43608: GO 43674
// if checkLink then
43610: LD_VAR 0 3
43614: IFFALSE 43664
// begin for i in tmp do
43616: LD_ADDR_VAR 0 6
43620: PUSH
43621: LD_VAR 0 5
43625: PUSH
43626: FOR_IN
43627: IFFALSE 43662
// if GetBase ( i ) <> base then
43629: LD_VAR 0 6
43633: PPUSH
43634: CALL_OW 274
43638: PUSH
43639: LD_VAR 0 1
43643: NONEQUAL
43644: IFFALSE 43660
// ComLinkToBase ( base , i ) ;
43646: LD_VAR 0 1
43650: PPUSH
43651: LD_VAR 0 6
43655: PPUSH
43656: CALL_OW 169
43660: GO 43626
43662: POP
43663: POP
// end ; result := tmp ;
43664: LD_ADDR_VAR 0 4
43668: PUSH
43669: LD_VAR 0 5
43673: ST_TO_ADDR
// end ;
43674: LD_VAR 0 4
43678: RET
// export function ComComplete ( units , b ) ; var i ; begin
43679: LD_INT 0
43681: PPUSH
43682: PPUSH
// if not units then
43683: LD_VAR 0 1
43687: NOT
43688: IFFALSE 43692
// exit ;
43690: GO 43782
// for i in units do
43692: LD_ADDR_VAR 0 4
43696: PUSH
43697: LD_VAR 0 1
43701: PUSH
43702: FOR_IN
43703: IFFALSE 43780
// if BuildingStatus ( b ) = bs_build then
43705: LD_VAR 0 2
43709: PPUSH
43710: CALL_OW 461
43714: PUSH
43715: LD_INT 1
43717: EQUAL
43718: IFFALSE 43778
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43720: LD_VAR 0 4
43724: PPUSH
43725: LD_STRING h
43727: PUSH
43728: LD_VAR 0 2
43732: PPUSH
43733: CALL_OW 250
43737: PUSH
43738: LD_VAR 0 2
43742: PPUSH
43743: CALL_OW 251
43747: PUSH
43748: LD_VAR 0 2
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: PUSH
43771: EMPTY
43772: LIST
43773: PPUSH
43774: CALL_OW 446
43778: GO 43702
43780: POP
43781: POP
// end ;
43782: LD_VAR 0 3
43786: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43787: LD_INT 0
43789: PPUSH
43790: PPUSH
43791: PPUSH
43792: PPUSH
43793: PPUSH
43794: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
43795: LD_VAR 0 1
43799: NOT
43800: PUSH
43801: LD_VAR 0 1
43805: PPUSH
43806: CALL_OW 263
43810: PUSH
43811: LD_INT 2
43813: EQUAL
43814: NOT
43815: OR
43816: IFFALSE 43820
// exit ;
43818: GO 44136
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43820: LD_ADDR_VAR 0 6
43824: PUSH
43825: LD_INT 22
43827: PUSH
43828: LD_VAR 0 1
43832: PPUSH
43833: CALL_OW 255
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: LD_INT 30
43847: PUSH
43848: LD_INT 36
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 34
43857: PUSH
43858: LD_INT 31
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: LIST
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PPUSH
43874: CALL_OW 69
43878: ST_TO_ADDR
// if not tmp then
43879: LD_VAR 0 6
43883: NOT
43884: IFFALSE 43888
// exit ;
43886: GO 44136
// result := [ ] ;
43888: LD_ADDR_VAR 0 2
43892: PUSH
43893: EMPTY
43894: ST_TO_ADDR
// for i in tmp do
43895: LD_ADDR_VAR 0 3
43899: PUSH
43900: LD_VAR 0 6
43904: PUSH
43905: FOR_IN
43906: IFFALSE 43977
// begin t := UnitsInside ( i ) ;
43908: LD_ADDR_VAR 0 4
43912: PUSH
43913: LD_VAR 0 3
43917: PPUSH
43918: CALL_OW 313
43922: ST_TO_ADDR
// if t then
43923: LD_VAR 0 4
43927: IFFALSE 43975
// for j in t do
43929: LD_ADDR_VAR 0 7
43933: PUSH
43934: LD_VAR 0 4
43938: PUSH
43939: FOR_IN
43940: IFFALSE 43973
// result := Insert ( result , result + 1 , j ) ;
43942: LD_ADDR_VAR 0 2
43946: PUSH
43947: LD_VAR 0 2
43951: PPUSH
43952: LD_VAR 0 2
43956: PUSH
43957: LD_INT 1
43959: PLUS
43960: PPUSH
43961: LD_VAR 0 7
43965: PPUSH
43966: CALL_OW 2
43970: ST_TO_ADDR
43971: GO 43939
43973: POP
43974: POP
// end ;
43975: GO 43905
43977: POP
43978: POP
// if not result then
43979: LD_VAR 0 2
43983: NOT
43984: IFFALSE 43988
// exit ;
43986: GO 44136
// mech := result [ 1 ] ;
43988: LD_ADDR_VAR 0 5
43992: PUSH
43993: LD_VAR 0 2
43997: PUSH
43998: LD_INT 1
44000: ARRAY
44001: ST_TO_ADDR
// if result > 1 then
44002: LD_VAR 0 2
44006: PUSH
44007: LD_INT 1
44009: GREATER
44010: IFFALSE 44122
// for i = 2 to result do
44012: LD_ADDR_VAR 0 3
44016: PUSH
44017: DOUBLE
44018: LD_INT 2
44020: DEC
44021: ST_TO_ADDR
44022: LD_VAR 0 2
44026: PUSH
44027: FOR_TO
44028: IFFALSE 44120
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44030: LD_ADDR_VAR 0 4
44034: PUSH
44035: LD_VAR 0 2
44039: PUSH
44040: LD_VAR 0 3
44044: ARRAY
44045: PPUSH
44046: LD_INT 3
44048: PPUSH
44049: CALL_OW 259
44053: PUSH
44054: LD_VAR 0 2
44058: PUSH
44059: LD_VAR 0 3
44063: ARRAY
44064: PPUSH
44065: CALL_OW 432
44069: MINUS
44070: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44071: LD_VAR 0 4
44075: PUSH
44076: LD_VAR 0 5
44080: PPUSH
44081: LD_INT 3
44083: PPUSH
44084: CALL_OW 259
44088: PUSH
44089: LD_VAR 0 5
44093: PPUSH
44094: CALL_OW 432
44098: MINUS
44099: GREATEREQUAL
44100: IFFALSE 44118
// mech := result [ i ] ;
44102: LD_ADDR_VAR 0 5
44106: PUSH
44107: LD_VAR 0 2
44111: PUSH
44112: LD_VAR 0 3
44116: ARRAY
44117: ST_TO_ADDR
// end ;
44118: GO 44027
44120: POP
44121: POP
// ComLinkTo ( vehicle , mech ) ;
44122: LD_VAR 0 1
44126: PPUSH
44127: LD_VAR 0 5
44131: PPUSH
44132: CALL_OW 135
// end ;
44136: LD_VAR 0 2
44140: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44141: LD_INT 0
44143: PPUSH
44144: PPUSH
44145: PPUSH
44146: PPUSH
44147: PPUSH
44148: PPUSH
44149: PPUSH
44150: PPUSH
44151: PPUSH
44152: PPUSH
44153: PPUSH
44154: PPUSH
44155: PPUSH
// result := [ ] ;
44156: LD_ADDR_VAR 0 7
44160: PUSH
44161: EMPTY
44162: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44163: LD_VAR 0 1
44167: PPUSH
44168: CALL_OW 266
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: IN
44183: NOT
44184: IFFALSE 44188
// exit ;
44186: GO 45822
// if name then
44188: LD_VAR 0 3
44192: IFFALSE 44208
// SetBName ( base_dep , name ) ;
44194: LD_VAR 0 1
44198: PPUSH
44199: LD_VAR 0 3
44203: PPUSH
44204: CALL_OW 500
// base := GetBase ( base_dep ) ;
44208: LD_ADDR_VAR 0 15
44212: PUSH
44213: LD_VAR 0 1
44217: PPUSH
44218: CALL_OW 274
44222: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44223: LD_ADDR_VAR 0 16
44227: PUSH
44228: LD_VAR 0 1
44232: PPUSH
44233: CALL_OW 255
44237: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44238: LD_ADDR_VAR 0 17
44242: PUSH
44243: LD_VAR 0 1
44247: PPUSH
44248: CALL_OW 248
44252: ST_TO_ADDR
// if sources then
44253: LD_VAR 0 5
44257: IFFALSE 44304
// for i = 1 to 3 do
44259: LD_ADDR_VAR 0 8
44263: PUSH
44264: DOUBLE
44265: LD_INT 1
44267: DEC
44268: ST_TO_ADDR
44269: LD_INT 3
44271: PUSH
44272: FOR_TO
44273: IFFALSE 44302
// AddResourceType ( base , i , sources [ i ] ) ;
44275: LD_VAR 0 15
44279: PPUSH
44280: LD_VAR 0 8
44284: PPUSH
44285: LD_VAR 0 5
44289: PUSH
44290: LD_VAR 0 8
44294: ARRAY
44295: PPUSH
44296: CALL_OW 276
44300: GO 44272
44302: POP
44303: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44304: LD_ADDR_VAR 0 18
44308: PUSH
44309: LD_VAR 0 15
44313: PPUSH
44314: LD_VAR 0 2
44318: PPUSH
44319: LD_INT 1
44321: PPUSH
44322: CALL 43564 0 3
44326: ST_TO_ADDR
// InitHc ;
44327: CALL_OW 19
// InitUc ;
44331: CALL_OW 18
// uc_side := side ;
44335: LD_ADDR_OWVAR 20
44339: PUSH
44340: LD_VAR 0 16
44344: ST_TO_ADDR
// uc_nation := nation ;
44345: LD_ADDR_OWVAR 21
44349: PUSH
44350: LD_VAR 0 17
44354: ST_TO_ADDR
// if buildings then
44355: LD_VAR 0 18
44359: IFFALSE 45681
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44361: LD_ADDR_VAR 0 19
44365: PUSH
44366: LD_VAR 0 18
44370: PPUSH
44371: LD_INT 2
44373: PUSH
44374: LD_INT 30
44376: PUSH
44377: LD_INT 29
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 30
44386: PUSH
44387: LD_INT 30
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: LIST
44398: PPUSH
44399: CALL_OW 72
44403: ST_TO_ADDR
// if tmp then
44404: LD_VAR 0 19
44408: IFFALSE 44456
// for i in tmp do
44410: LD_ADDR_VAR 0 8
44414: PUSH
44415: LD_VAR 0 19
44419: PUSH
44420: FOR_IN
44421: IFFALSE 44454
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44423: LD_VAR 0 8
44427: PPUSH
44428: CALL_OW 250
44432: PPUSH
44433: LD_VAR 0 8
44437: PPUSH
44438: CALL_OW 251
44442: PPUSH
44443: LD_VAR 0 16
44447: PPUSH
44448: CALL_OW 441
44452: GO 44420
44454: POP
44455: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44456: LD_VAR 0 18
44460: PPUSH
44461: LD_INT 2
44463: PUSH
44464: LD_INT 30
44466: PUSH
44467: LD_INT 32
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 30
44476: PUSH
44477: LD_INT 33
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: LIST
44488: PPUSH
44489: CALL_OW 72
44493: IFFALSE 44581
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44495: LD_ADDR_VAR 0 8
44499: PUSH
44500: LD_VAR 0 18
44504: PPUSH
44505: LD_INT 2
44507: PUSH
44508: LD_INT 30
44510: PUSH
44511: LD_INT 32
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 30
44520: PUSH
44521: LD_INT 33
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: LIST
44532: PPUSH
44533: CALL_OW 72
44537: PUSH
44538: FOR_IN
44539: IFFALSE 44579
// begin if not GetBWeapon ( i ) then
44541: LD_VAR 0 8
44545: PPUSH
44546: CALL_OW 269
44550: NOT
44551: IFFALSE 44577
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44553: LD_VAR 0 8
44557: PPUSH
44558: LD_VAR 0 8
44562: PPUSH
44563: LD_VAR 0 2
44567: PPUSH
44568: CALL 45827 0 2
44572: PPUSH
44573: CALL_OW 431
// end ;
44577: GO 44538
44579: POP
44580: POP
// end ; for i = 1 to personel do
44581: LD_ADDR_VAR 0 8
44585: PUSH
44586: DOUBLE
44587: LD_INT 1
44589: DEC
44590: ST_TO_ADDR
44591: LD_VAR 0 6
44595: PUSH
44596: FOR_TO
44597: IFFALSE 45661
// begin if i > 4 then
44599: LD_VAR 0 8
44603: PUSH
44604: LD_INT 4
44606: GREATER
44607: IFFALSE 44611
// break ;
44609: GO 45661
// case i of 1 :
44611: LD_VAR 0 8
44615: PUSH
44616: LD_INT 1
44618: DOUBLE
44619: EQUAL
44620: IFTRUE 44624
44622: GO 44704
44624: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44625: LD_ADDR_VAR 0 12
44629: PUSH
44630: LD_VAR 0 18
44634: PPUSH
44635: LD_INT 22
44637: PUSH
44638: LD_VAR 0 16
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 58
44649: PUSH
44650: EMPTY
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: LD_INT 30
44658: PUSH
44659: LD_INT 32
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 30
44668: PUSH
44669: LD_INT 4
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 30
44678: PUSH
44679: LD_INT 5
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: LIST
44696: PPUSH
44697: CALL_OW 72
44701: ST_TO_ADDR
44702: GO 44926
44704: LD_INT 2
44706: DOUBLE
44707: EQUAL
44708: IFTRUE 44712
44710: GO 44774
44712: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44713: LD_ADDR_VAR 0 12
44717: PUSH
44718: LD_VAR 0 18
44722: PPUSH
44723: LD_INT 22
44725: PUSH
44726: LD_VAR 0 16
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 2
44737: PUSH
44738: LD_INT 30
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 30
44750: PUSH
44751: LD_INT 1
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: LIST
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PPUSH
44767: CALL_OW 72
44771: ST_TO_ADDR
44772: GO 44926
44774: LD_INT 3
44776: DOUBLE
44777: EQUAL
44778: IFTRUE 44782
44780: GO 44844
44782: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44783: LD_ADDR_VAR 0 12
44787: PUSH
44788: LD_VAR 0 18
44792: PPUSH
44793: LD_INT 22
44795: PUSH
44796: LD_VAR 0 16
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 2
44807: PUSH
44808: LD_INT 30
44810: PUSH
44811: LD_INT 2
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 30
44820: PUSH
44821: LD_INT 3
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: LIST
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PPUSH
44837: CALL_OW 72
44841: ST_TO_ADDR
44842: GO 44926
44844: LD_INT 4
44846: DOUBLE
44847: EQUAL
44848: IFTRUE 44852
44850: GO 44925
44852: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44853: LD_ADDR_VAR 0 12
44857: PUSH
44858: LD_VAR 0 18
44862: PPUSH
44863: LD_INT 22
44865: PUSH
44866: LD_VAR 0 16
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: LD_INT 30
44880: PUSH
44881: LD_INT 6
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 30
44890: PUSH
44891: LD_INT 7
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 30
44900: PUSH
44901: LD_INT 8
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PPUSH
44918: CALL_OW 72
44922: ST_TO_ADDR
44923: GO 44926
44925: POP
// if i = 1 then
44926: LD_VAR 0 8
44930: PUSH
44931: LD_INT 1
44933: EQUAL
44934: IFFALSE 45045
// begin tmp := [ ] ;
44936: LD_ADDR_VAR 0 19
44940: PUSH
44941: EMPTY
44942: ST_TO_ADDR
// for j in f do
44943: LD_ADDR_VAR 0 9
44947: PUSH
44948: LD_VAR 0 12
44952: PUSH
44953: FOR_IN
44954: IFFALSE 45027
// if GetBType ( j ) = b_bunker then
44956: LD_VAR 0 9
44960: PPUSH
44961: CALL_OW 266
44965: PUSH
44966: LD_INT 32
44968: EQUAL
44969: IFFALSE 44996
// tmp := Insert ( tmp , 1 , j ) else
44971: LD_ADDR_VAR 0 19
44975: PUSH
44976: LD_VAR 0 19
44980: PPUSH
44981: LD_INT 1
44983: PPUSH
44984: LD_VAR 0 9
44988: PPUSH
44989: CALL_OW 2
44993: ST_TO_ADDR
44994: GO 45025
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44996: LD_ADDR_VAR 0 19
45000: PUSH
45001: LD_VAR 0 19
45005: PPUSH
45006: LD_VAR 0 19
45010: PUSH
45011: LD_INT 1
45013: PLUS
45014: PPUSH
45015: LD_VAR 0 9
45019: PPUSH
45020: CALL_OW 2
45024: ST_TO_ADDR
45025: GO 44953
45027: POP
45028: POP
// if tmp then
45029: LD_VAR 0 19
45033: IFFALSE 45045
// f := tmp ;
45035: LD_ADDR_VAR 0 12
45039: PUSH
45040: LD_VAR 0 19
45044: ST_TO_ADDR
// end ; x := personel [ i ] ;
45045: LD_ADDR_VAR 0 13
45049: PUSH
45050: LD_VAR 0 6
45054: PUSH
45055: LD_VAR 0 8
45059: ARRAY
45060: ST_TO_ADDR
// if x = - 1 then
45061: LD_VAR 0 13
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: EQUAL
45070: IFFALSE 45279
// begin for j in f do
45072: LD_ADDR_VAR 0 9
45076: PUSH
45077: LD_VAR 0 12
45081: PUSH
45082: FOR_IN
45083: IFFALSE 45275
// repeat InitHc ;
45085: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45089: LD_VAR 0 9
45093: PPUSH
45094: CALL_OW 266
45098: PUSH
45099: LD_INT 5
45101: EQUAL
45102: IFFALSE 45172
// begin if UnitsInside ( j ) < 3 then
45104: LD_VAR 0 9
45108: PPUSH
45109: CALL_OW 313
45113: PUSH
45114: LD_INT 3
45116: LESS
45117: IFFALSE 45153
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45119: LD_INT 0
45121: PPUSH
45122: LD_INT 5
45124: PUSH
45125: LD_INT 8
45127: PUSH
45128: LD_INT 9
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: LIST
45135: PUSH
45136: LD_VAR 0 17
45140: ARRAY
45141: PPUSH
45142: LD_VAR 0 4
45146: PPUSH
45147: CALL_OW 380
45151: GO 45170
// PrepareHuman ( false , i , skill ) ;
45153: LD_INT 0
45155: PPUSH
45156: LD_VAR 0 8
45160: PPUSH
45161: LD_VAR 0 4
45165: PPUSH
45166: CALL_OW 380
// end else
45170: GO 45189
// PrepareHuman ( false , i , skill ) ;
45172: LD_INT 0
45174: PPUSH
45175: LD_VAR 0 8
45179: PPUSH
45180: LD_VAR 0 4
45184: PPUSH
45185: CALL_OW 380
// un := CreateHuman ;
45189: LD_ADDR_VAR 0 14
45193: PUSH
45194: CALL_OW 44
45198: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45199: LD_ADDR_VAR 0 7
45203: PUSH
45204: LD_VAR 0 7
45208: PPUSH
45209: LD_INT 1
45211: PPUSH
45212: LD_VAR 0 14
45216: PPUSH
45217: CALL_OW 2
45221: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45222: LD_VAR 0 14
45226: PPUSH
45227: LD_VAR 0 9
45231: PPUSH
45232: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45236: LD_VAR 0 9
45240: PPUSH
45241: CALL_OW 313
45245: PUSH
45246: LD_INT 6
45248: EQUAL
45249: PUSH
45250: LD_VAR 0 9
45254: PPUSH
45255: CALL_OW 266
45259: PUSH
45260: LD_INT 32
45262: PUSH
45263: LD_INT 31
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: IN
45270: OR
45271: IFFALSE 45085
45273: GO 45082
45275: POP
45276: POP
// end else
45277: GO 45659
// for j = 1 to x do
45279: LD_ADDR_VAR 0 9
45283: PUSH
45284: DOUBLE
45285: LD_INT 1
45287: DEC
45288: ST_TO_ADDR
45289: LD_VAR 0 13
45293: PUSH
45294: FOR_TO
45295: IFFALSE 45657
// begin InitHc ;
45297: CALL_OW 19
// if not f then
45301: LD_VAR 0 12
45305: NOT
45306: IFFALSE 45395
// begin PrepareHuman ( false , i , skill ) ;
45308: LD_INT 0
45310: PPUSH
45311: LD_VAR 0 8
45315: PPUSH
45316: LD_VAR 0 4
45320: PPUSH
45321: CALL_OW 380
// un := CreateHuman ;
45325: LD_ADDR_VAR 0 14
45329: PUSH
45330: CALL_OW 44
45334: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45335: LD_ADDR_VAR 0 7
45339: PUSH
45340: LD_VAR 0 7
45344: PPUSH
45345: LD_INT 1
45347: PPUSH
45348: LD_VAR 0 14
45352: PPUSH
45353: CALL_OW 2
45357: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45358: LD_VAR 0 14
45362: PPUSH
45363: LD_VAR 0 1
45367: PPUSH
45368: CALL_OW 250
45372: PPUSH
45373: LD_VAR 0 1
45377: PPUSH
45378: CALL_OW 251
45382: PPUSH
45383: LD_INT 10
45385: PPUSH
45386: LD_INT 0
45388: PPUSH
45389: CALL_OW 50
// continue ;
45393: GO 45294
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45395: LD_VAR 0 12
45399: PUSH
45400: LD_INT 1
45402: ARRAY
45403: PPUSH
45404: CALL_OW 313
45408: PUSH
45409: LD_VAR 0 12
45413: PUSH
45414: LD_INT 1
45416: ARRAY
45417: PPUSH
45418: CALL_OW 266
45422: PUSH
45423: LD_INT 32
45425: PUSH
45426: LD_INT 31
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: IN
45433: AND
45434: PUSH
45435: LD_VAR 0 12
45439: PUSH
45440: LD_INT 1
45442: ARRAY
45443: PPUSH
45444: CALL_OW 313
45448: PUSH
45449: LD_INT 6
45451: EQUAL
45452: OR
45453: IFFALSE 45473
// f := Delete ( f , 1 ) ;
45455: LD_ADDR_VAR 0 12
45459: PUSH
45460: LD_VAR 0 12
45464: PPUSH
45465: LD_INT 1
45467: PPUSH
45468: CALL_OW 3
45472: ST_TO_ADDR
// if not f then
45473: LD_VAR 0 12
45477: NOT
45478: IFFALSE 45496
// begin x := x + 2 ;
45480: LD_ADDR_VAR 0 13
45484: PUSH
45485: LD_VAR 0 13
45489: PUSH
45490: LD_INT 2
45492: PLUS
45493: ST_TO_ADDR
// continue ;
45494: GO 45294
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45496: LD_VAR 0 12
45500: PUSH
45501: LD_INT 1
45503: ARRAY
45504: PPUSH
45505: CALL_OW 266
45509: PUSH
45510: LD_INT 5
45512: EQUAL
45513: IFFALSE 45587
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45515: LD_VAR 0 12
45519: PUSH
45520: LD_INT 1
45522: ARRAY
45523: PPUSH
45524: CALL_OW 313
45528: PUSH
45529: LD_INT 3
45531: LESS
45532: IFFALSE 45568
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45534: LD_INT 0
45536: PPUSH
45537: LD_INT 5
45539: PUSH
45540: LD_INT 8
45542: PUSH
45543: LD_INT 9
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: LIST
45550: PUSH
45551: LD_VAR 0 17
45555: ARRAY
45556: PPUSH
45557: LD_VAR 0 4
45561: PPUSH
45562: CALL_OW 380
45566: GO 45585
// PrepareHuman ( false , i , skill ) ;
45568: LD_INT 0
45570: PPUSH
45571: LD_VAR 0 8
45575: PPUSH
45576: LD_VAR 0 4
45580: PPUSH
45581: CALL_OW 380
// end else
45585: GO 45604
// PrepareHuman ( false , i , skill ) ;
45587: LD_INT 0
45589: PPUSH
45590: LD_VAR 0 8
45594: PPUSH
45595: LD_VAR 0 4
45599: PPUSH
45600: CALL_OW 380
// un := CreateHuman ;
45604: LD_ADDR_VAR 0 14
45608: PUSH
45609: CALL_OW 44
45613: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45614: LD_ADDR_VAR 0 7
45618: PUSH
45619: LD_VAR 0 7
45623: PPUSH
45624: LD_INT 1
45626: PPUSH
45627: LD_VAR 0 14
45631: PPUSH
45632: CALL_OW 2
45636: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45637: LD_VAR 0 14
45641: PPUSH
45642: LD_VAR 0 12
45646: PUSH
45647: LD_INT 1
45649: ARRAY
45650: PPUSH
45651: CALL_OW 52
// end ;
45655: GO 45294
45657: POP
45658: POP
// end ;
45659: GO 44596
45661: POP
45662: POP
// result := result ^ buildings ;
45663: LD_ADDR_VAR 0 7
45667: PUSH
45668: LD_VAR 0 7
45672: PUSH
45673: LD_VAR 0 18
45677: ADD
45678: ST_TO_ADDR
// end else
45679: GO 45822
// begin for i = 1 to personel do
45681: LD_ADDR_VAR 0 8
45685: PUSH
45686: DOUBLE
45687: LD_INT 1
45689: DEC
45690: ST_TO_ADDR
45691: LD_VAR 0 6
45695: PUSH
45696: FOR_TO
45697: IFFALSE 45820
// begin if i > 4 then
45699: LD_VAR 0 8
45703: PUSH
45704: LD_INT 4
45706: GREATER
45707: IFFALSE 45711
// break ;
45709: GO 45820
// x := personel [ i ] ;
45711: LD_ADDR_VAR 0 13
45715: PUSH
45716: LD_VAR 0 6
45720: PUSH
45721: LD_VAR 0 8
45725: ARRAY
45726: ST_TO_ADDR
// if x = - 1 then
45727: LD_VAR 0 13
45731: PUSH
45732: LD_INT 1
45734: NEG
45735: EQUAL
45736: IFFALSE 45740
// continue ;
45738: GO 45696
// PrepareHuman ( false , i , skill ) ;
45740: LD_INT 0
45742: PPUSH
45743: LD_VAR 0 8
45747: PPUSH
45748: LD_VAR 0 4
45752: PPUSH
45753: CALL_OW 380
// un := CreateHuman ;
45757: LD_ADDR_VAR 0 14
45761: PUSH
45762: CALL_OW 44
45766: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45767: LD_VAR 0 14
45771: PPUSH
45772: LD_VAR 0 1
45776: PPUSH
45777: CALL_OW 250
45781: PPUSH
45782: LD_VAR 0 1
45786: PPUSH
45787: CALL_OW 251
45791: PPUSH
45792: LD_INT 10
45794: PPUSH
45795: LD_INT 0
45797: PPUSH
45798: CALL_OW 50
// result := result ^ un ;
45802: LD_ADDR_VAR 0 7
45806: PUSH
45807: LD_VAR 0 7
45811: PUSH
45812: LD_VAR 0 14
45816: ADD
45817: ST_TO_ADDR
// end ;
45818: GO 45696
45820: POP
45821: POP
// end ; end ;
45822: LD_VAR 0 7
45826: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45827: LD_INT 0
45829: PPUSH
45830: PPUSH
45831: PPUSH
45832: PPUSH
45833: PPUSH
45834: PPUSH
45835: PPUSH
45836: PPUSH
45837: PPUSH
45838: PPUSH
45839: PPUSH
45840: PPUSH
45841: PPUSH
45842: PPUSH
45843: PPUSH
45844: PPUSH
// result := false ;
45845: LD_ADDR_VAR 0 3
45849: PUSH
45850: LD_INT 0
45852: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45853: LD_VAR 0 1
45857: NOT
45858: PUSH
45859: LD_VAR 0 1
45863: PPUSH
45864: CALL_OW 266
45868: PUSH
45869: LD_INT 32
45871: PUSH
45872: LD_INT 33
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: IN
45879: NOT
45880: OR
45881: IFFALSE 45885
// exit ;
45883: GO 47024
// nat := GetNation ( tower ) ;
45885: LD_ADDR_VAR 0 12
45889: PUSH
45890: LD_VAR 0 1
45894: PPUSH
45895: CALL_OW 248
45899: ST_TO_ADDR
// side := GetSide ( tower ) ;
45900: LD_ADDR_VAR 0 16
45904: PUSH
45905: LD_VAR 0 1
45909: PPUSH
45910: CALL_OW 255
45914: ST_TO_ADDR
// x := GetX ( tower ) ;
45915: LD_ADDR_VAR 0 10
45919: PUSH
45920: LD_VAR 0 1
45924: PPUSH
45925: CALL_OW 250
45929: ST_TO_ADDR
// y := GetY ( tower ) ;
45930: LD_ADDR_VAR 0 11
45934: PUSH
45935: LD_VAR 0 1
45939: PPUSH
45940: CALL_OW 251
45944: ST_TO_ADDR
// if not x or not y then
45945: LD_VAR 0 10
45949: NOT
45950: PUSH
45951: LD_VAR 0 11
45955: NOT
45956: OR
45957: IFFALSE 45961
// exit ;
45959: GO 47024
// weapon := 0 ;
45961: LD_ADDR_VAR 0 18
45965: PUSH
45966: LD_INT 0
45968: ST_TO_ADDR
// fac_list := [ ] ;
45969: LD_ADDR_VAR 0 17
45973: PUSH
45974: EMPTY
45975: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45976: LD_ADDR_VAR 0 6
45980: PUSH
45981: LD_VAR 0 1
45985: PPUSH
45986: CALL_OW 274
45990: PPUSH
45991: LD_VAR 0 2
45995: PPUSH
45996: LD_INT 0
45998: PPUSH
45999: CALL 43564 0 3
46003: PPUSH
46004: LD_INT 30
46006: PUSH
46007: LD_INT 3
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PPUSH
46014: CALL_OW 72
46018: ST_TO_ADDR
// if not factories then
46019: LD_VAR 0 6
46023: NOT
46024: IFFALSE 46028
// exit ;
46026: GO 47024
// for i in factories do
46028: LD_ADDR_VAR 0 8
46032: PUSH
46033: LD_VAR 0 6
46037: PUSH
46038: FOR_IN
46039: IFFALSE 46064
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46041: LD_ADDR_VAR 0 17
46045: PUSH
46046: LD_VAR 0 17
46050: PUSH
46051: LD_VAR 0 8
46055: PPUSH
46056: CALL_OW 478
46060: UNION
46061: ST_TO_ADDR
46062: GO 46038
46064: POP
46065: POP
// if not fac_list then
46066: LD_VAR 0 17
46070: NOT
46071: IFFALSE 46075
// exit ;
46073: GO 47024
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46075: LD_ADDR_VAR 0 5
46079: PUSH
46080: LD_INT 4
46082: PUSH
46083: LD_INT 5
46085: PUSH
46086: LD_INT 9
46088: PUSH
46089: LD_INT 10
46091: PUSH
46092: LD_INT 6
46094: PUSH
46095: LD_INT 7
46097: PUSH
46098: LD_INT 11
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 27
46112: PUSH
46113: LD_INT 28
46115: PUSH
46116: LD_INT 26
46118: PUSH
46119: LD_INT 30
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 43
46130: PUSH
46131: LD_INT 44
46133: PUSH
46134: LD_INT 46
46136: PUSH
46137: LD_INT 45
46139: PUSH
46140: LD_INT 47
46142: PUSH
46143: LD_INT 49
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: LIST
46158: PUSH
46159: LD_VAR 0 12
46163: ARRAY
46164: ST_TO_ADDR
// for i in list do
46165: LD_ADDR_VAR 0 8
46169: PUSH
46170: LD_VAR 0 5
46174: PUSH
46175: FOR_IN
46176: IFFALSE 46209
// if not i in fac_list then
46178: LD_VAR 0 8
46182: PUSH
46183: LD_VAR 0 17
46187: IN
46188: NOT
46189: IFFALSE 46207
// list := list diff i ;
46191: LD_ADDR_VAR 0 5
46195: PUSH
46196: LD_VAR 0 5
46200: PUSH
46201: LD_VAR 0 8
46205: DIFF
46206: ST_TO_ADDR
46207: GO 46175
46209: POP
46210: POP
// if not list then
46211: LD_VAR 0 5
46215: NOT
46216: IFFALSE 46220
// exit ;
46218: GO 47024
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46220: LD_VAR 0 12
46224: PUSH
46225: LD_INT 3
46227: EQUAL
46228: PUSH
46229: LD_INT 49
46231: PUSH
46232: LD_VAR 0 5
46236: IN
46237: AND
46238: PUSH
46239: LD_INT 31
46241: PPUSH
46242: LD_VAR 0 16
46246: PPUSH
46247: CALL_OW 321
46251: PUSH
46252: LD_INT 2
46254: EQUAL
46255: AND
46256: IFFALSE 46316
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46258: LD_INT 22
46260: PUSH
46261: LD_VAR 0 16
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 35
46272: PUSH
46273: LD_INT 49
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 91
46282: PUSH
46283: LD_VAR 0 1
46287: PUSH
46288: LD_INT 10
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: LIST
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: LIST
46300: PPUSH
46301: CALL_OW 69
46305: NOT
46306: IFFALSE 46316
// weapon := ru_time_lapser ;
46308: LD_ADDR_VAR 0 18
46312: PUSH
46313: LD_INT 49
46315: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46316: LD_VAR 0 12
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: IN
46331: PUSH
46332: LD_INT 11
46334: PUSH
46335: LD_VAR 0 5
46339: IN
46340: PUSH
46341: LD_INT 30
46343: PUSH
46344: LD_VAR 0 5
46348: IN
46349: OR
46350: AND
46351: PUSH
46352: LD_INT 6
46354: PPUSH
46355: LD_VAR 0 16
46359: PPUSH
46360: CALL_OW 321
46364: PUSH
46365: LD_INT 2
46367: EQUAL
46368: AND
46369: IFFALSE 46534
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46371: LD_INT 22
46373: PUSH
46374: LD_VAR 0 16
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: LD_INT 35
46388: PUSH
46389: LD_INT 11
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 35
46398: PUSH
46399: LD_INT 30
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 91
46413: PUSH
46414: LD_VAR 0 1
46418: PUSH
46419: LD_INT 18
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: LIST
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: LIST
46431: PPUSH
46432: CALL_OW 69
46436: NOT
46437: PUSH
46438: LD_INT 22
46440: PUSH
46441: LD_VAR 0 16
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 2
46452: PUSH
46453: LD_INT 30
46455: PUSH
46456: LD_INT 32
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 30
46465: PUSH
46466: LD_INT 33
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 91
46480: PUSH
46481: LD_VAR 0 1
46485: PUSH
46486: LD_INT 12
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: LIST
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: LIST
46498: PUSH
46499: EMPTY
46500: LIST
46501: PPUSH
46502: CALL_OW 69
46506: PUSH
46507: LD_INT 2
46509: GREATER
46510: AND
46511: IFFALSE 46534
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46513: LD_ADDR_VAR 0 18
46517: PUSH
46518: LD_INT 11
46520: PUSH
46521: LD_INT 30
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_VAR 0 12
46532: ARRAY
46533: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46534: LD_VAR 0 18
46538: NOT
46539: PUSH
46540: LD_INT 40
46542: PPUSH
46543: LD_VAR 0 16
46547: PPUSH
46548: CALL_OW 321
46552: PUSH
46553: LD_INT 2
46555: EQUAL
46556: AND
46557: PUSH
46558: LD_INT 7
46560: PUSH
46561: LD_VAR 0 5
46565: IN
46566: PUSH
46567: LD_INT 28
46569: PUSH
46570: LD_VAR 0 5
46574: IN
46575: OR
46576: PUSH
46577: LD_INT 45
46579: PUSH
46580: LD_VAR 0 5
46584: IN
46585: OR
46586: AND
46587: IFFALSE 46841
// begin hex := GetHexInfo ( x , y ) ;
46589: LD_ADDR_VAR 0 4
46593: PUSH
46594: LD_VAR 0 10
46598: PPUSH
46599: LD_VAR 0 11
46603: PPUSH
46604: CALL_OW 546
46608: ST_TO_ADDR
// if hex [ 1 ] then
46609: LD_VAR 0 4
46613: PUSH
46614: LD_INT 1
46616: ARRAY
46617: IFFALSE 46621
// exit ;
46619: GO 47024
// height := hex [ 2 ] ;
46621: LD_ADDR_VAR 0 15
46625: PUSH
46626: LD_VAR 0 4
46630: PUSH
46631: LD_INT 2
46633: ARRAY
46634: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46635: LD_ADDR_VAR 0 14
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: LD_INT 2
46645: PUSH
46646: LD_INT 3
46648: PUSH
46649: LD_INT 5
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: ST_TO_ADDR
// for i in tmp do
46658: LD_ADDR_VAR 0 8
46662: PUSH
46663: LD_VAR 0 14
46667: PUSH
46668: FOR_IN
46669: IFFALSE 46839
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46671: LD_ADDR_VAR 0 9
46675: PUSH
46676: LD_VAR 0 10
46680: PPUSH
46681: LD_VAR 0 8
46685: PPUSH
46686: LD_INT 5
46688: PPUSH
46689: CALL_OW 272
46693: PUSH
46694: LD_VAR 0 11
46698: PPUSH
46699: LD_VAR 0 8
46703: PPUSH
46704: LD_INT 5
46706: PPUSH
46707: CALL_OW 273
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46716: LD_VAR 0 9
46720: PUSH
46721: LD_INT 1
46723: ARRAY
46724: PPUSH
46725: LD_VAR 0 9
46729: PUSH
46730: LD_INT 2
46732: ARRAY
46733: PPUSH
46734: CALL_OW 488
46738: IFFALSE 46837
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46740: LD_ADDR_VAR 0 4
46744: PUSH
46745: LD_VAR 0 9
46749: PUSH
46750: LD_INT 1
46752: ARRAY
46753: PPUSH
46754: LD_VAR 0 9
46758: PUSH
46759: LD_INT 2
46761: ARRAY
46762: PPUSH
46763: CALL_OW 546
46767: ST_TO_ADDR
// if hex [ 1 ] then
46768: LD_VAR 0 4
46772: PUSH
46773: LD_INT 1
46775: ARRAY
46776: IFFALSE 46780
// continue ;
46778: GO 46668
// h := hex [ 2 ] ;
46780: LD_ADDR_VAR 0 13
46784: PUSH
46785: LD_VAR 0 4
46789: PUSH
46790: LD_INT 2
46792: ARRAY
46793: ST_TO_ADDR
// if h + 7 < height then
46794: LD_VAR 0 13
46798: PUSH
46799: LD_INT 7
46801: PLUS
46802: PUSH
46803: LD_VAR 0 15
46807: LESS
46808: IFFALSE 46837
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46810: LD_ADDR_VAR 0 18
46814: PUSH
46815: LD_INT 7
46817: PUSH
46818: LD_INT 28
46820: PUSH
46821: LD_INT 45
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: LIST
46828: PUSH
46829: LD_VAR 0 12
46833: ARRAY
46834: ST_TO_ADDR
// break ;
46835: GO 46839
// end ; end ; end ;
46837: GO 46668
46839: POP
46840: POP
// end ; if not weapon then
46841: LD_VAR 0 18
46845: NOT
46846: IFFALSE 46906
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46848: LD_ADDR_VAR 0 5
46852: PUSH
46853: LD_VAR 0 5
46857: PUSH
46858: LD_INT 11
46860: PUSH
46861: LD_INT 30
46863: PUSH
46864: LD_INT 49
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: LIST
46871: DIFF
46872: ST_TO_ADDR
// if not list then
46873: LD_VAR 0 5
46877: NOT
46878: IFFALSE 46882
// exit ;
46880: GO 47024
// weapon := list [ rand ( 1 , list ) ] ;
46882: LD_ADDR_VAR 0 18
46886: PUSH
46887: LD_VAR 0 5
46891: PUSH
46892: LD_INT 1
46894: PPUSH
46895: LD_VAR 0 5
46899: PPUSH
46900: CALL_OW 12
46904: ARRAY
46905: ST_TO_ADDR
// end ; if weapon then
46906: LD_VAR 0 18
46910: IFFALSE 47024
// begin tmp := CostOfWeapon ( weapon ) ;
46912: LD_ADDR_VAR 0 14
46916: PUSH
46917: LD_VAR 0 18
46921: PPUSH
46922: CALL_OW 451
46926: ST_TO_ADDR
// j := GetBase ( tower ) ;
46927: LD_ADDR_VAR 0 9
46931: PUSH
46932: LD_VAR 0 1
46936: PPUSH
46937: CALL_OW 274
46941: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46942: LD_VAR 0 9
46946: PPUSH
46947: LD_INT 1
46949: PPUSH
46950: CALL_OW 275
46954: PUSH
46955: LD_VAR 0 14
46959: PUSH
46960: LD_INT 1
46962: ARRAY
46963: GREATEREQUAL
46964: PUSH
46965: LD_VAR 0 9
46969: PPUSH
46970: LD_INT 2
46972: PPUSH
46973: CALL_OW 275
46977: PUSH
46978: LD_VAR 0 14
46982: PUSH
46983: LD_INT 2
46985: ARRAY
46986: GREATEREQUAL
46987: AND
46988: PUSH
46989: LD_VAR 0 9
46993: PPUSH
46994: LD_INT 3
46996: PPUSH
46997: CALL_OW 275
47001: PUSH
47002: LD_VAR 0 14
47006: PUSH
47007: LD_INT 3
47009: ARRAY
47010: GREATEREQUAL
47011: AND
47012: IFFALSE 47024
// result := weapon ;
47014: LD_ADDR_VAR 0 3
47018: PUSH
47019: LD_VAR 0 18
47023: ST_TO_ADDR
// end ; end ;
47024: LD_VAR 0 3
47028: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47029: LD_INT 0
47031: PPUSH
47032: PPUSH
// result := true ;
47033: LD_ADDR_VAR 0 3
47037: PUSH
47038: LD_INT 1
47040: ST_TO_ADDR
// if array1 = array2 then
47041: LD_VAR 0 1
47045: PUSH
47046: LD_VAR 0 2
47050: EQUAL
47051: IFFALSE 47111
// begin for i = 1 to array1 do
47053: LD_ADDR_VAR 0 4
47057: PUSH
47058: DOUBLE
47059: LD_INT 1
47061: DEC
47062: ST_TO_ADDR
47063: LD_VAR 0 1
47067: PUSH
47068: FOR_TO
47069: IFFALSE 47107
// if array1 [ i ] <> array2 [ i ] then
47071: LD_VAR 0 1
47075: PUSH
47076: LD_VAR 0 4
47080: ARRAY
47081: PUSH
47082: LD_VAR 0 2
47086: PUSH
47087: LD_VAR 0 4
47091: ARRAY
47092: NONEQUAL
47093: IFFALSE 47105
// begin result := false ;
47095: LD_ADDR_VAR 0 3
47099: PUSH
47100: LD_INT 0
47102: ST_TO_ADDR
// break ;
47103: GO 47107
// end ;
47105: GO 47068
47107: POP
47108: POP
// end else
47109: GO 47119
// result := false ;
47111: LD_ADDR_VAR 0 3
47115: PUSH
47116: LD_INT 0
47118: ST_TO_ADDR
// end ;
47119: LD_VAR 0 3
47123: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47124: LD_INT 0
47126: PPUSH
47127: PPUSH
// if not array1 or not array2 then
47128: LD_VAR 0 1
47132: NOT
47133: PUSH
47134: LD_VAR 0 2
47138: NOT
47139: OR
47140: IFFALSE 47144
// exit ;
47142: GO 47208
// result := true ;
47144: LD_ADDR_VAR 0 3
47148: PUSH
47149: LD_INT 1
47151: ST_TO_ADDR
// for i = 1 to array1 do
47152: LD_ADDR_VAR 0 4
47156: PUSH
47157: DOUBLE
47158: LD_INT 1
47160: DEC
47161: ST_TO_ADDR
47162: LD_VAR 0 1
47166: PUSH
47167: FOR_TO
47168: IFFALSE 47206
// if array1 [ i ] <> array2 [ i ] then
47170: LD_VAR 0 1
47174: PUSH
47175: LD_VAR 0 4
47179: ARRAY
47180: PUSH
47181: LD_VAR 0 2
47185: PUSH
47186: LD_VAR 0 4
47190: ARRAY
47191: NONEQUAL
47192: IFFALSE 47204
// begin result := false ;
47194: LD_ADDR_VAR 0 3
47198: PUSH
47199: LD_INT 0
47201: ST_TO_ADDR
// break ;
47202: GO 47206
// end ;
47204: GO 47167
47206: POP
47207: POP
// end ;
47208: LD_VAR 0 3
47212: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47213: LD_INT 0
47215: PPUSH
47216: PPUSH
47217: PPUSH
// pom := GetBase ( fac ) ;
47218: LD_ADDR_VAR 0 5
47222: PUSH
47223: LD_VAR 0 1
47227: PPUSH
47228: CALL_OW 274
47232: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47233: LD_ADDR_VAR 0 4
47237: PUSH
47238: LD_VAR 0 2
47242: PUSH
47243: LD_INT 1
47245: ARRAY
47246: PPUSH
47247: LD_VAR 0 2
47251: PUSH
47252: LD_INT 2
47254: ARRAY
47255: PPUSH
47256: LD_VAR 0 2
47260: PUSH
47261: LD_INT 3
47263: ARRAY
47264: PPUSH
47265: LD_VAR 0 2
47269: PUSH
47270: LD_INT 4
47272: ARRAY
47273: PPUSH
47274: CALL_OW 449
47278: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47279: LD_ADDR_VAR 0 3
47283: PUSH
47284: LD_VAR 0 5
47288: PPUSH
47289: LD_INT 1
47291: PPUSH
47292: CALL_OW 275
47296: PUSH
47297: LD_VAR 0 4
47301: PUSH
47302: LD_INT 1
47304: ARRAY
47305: GREATEREQUAL
47306: PUSH
47307: LD_VAR 0 5
47311: PPUSH
47312: LD_INT 2
47314: PPUSH
47315: CALL_OW 275
47319: PUSH
47320: LD_VAR 0 4
47324: PUSH
47325: LD_INT 2
47327: ARRAY
47328: GREATEREQUAL
47329: AND
47330: PUSH
47331: LD_VAR 0 5
47335: PPUSH
47336: LD_INT 3
47338: PPUSH
47339: CALL_OW 275
47343: PUSH
47344: LD_VAR 0 4
47348: PUSH
47349: LD_INT 3
47351: ARRAY
47352: GREATEREQUAL
47353: AND
47354: ST_TO_ADDR
// end ;
47355: LD_VAR 0 3
47359: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47360: LD_INT 0
47362: PPUSH
47363: PPUSH
47364: PPUSH
47365: PPUSH
// pom := GetBase ( building ) ;
47366: LD_ADDR_VAR 0 3
47370: PUSH
47371: LD_VAR 0 1
47375: PPUSH
47376: CALL_OW 274
47380: ST_TO_ADDR
// if not pom then
47381: LD_VAR 0 3
47385: NOT
47386: IFFALSE 47390
// exit ;
47388: GO 47560
// btype := GetBType ( building ) ;
47390: LD_ADDR_VAR 0 5
47394: PUSH
47395: LD_VAR 0 1
47399: PPUSH
47400: CALL_OW 266
47404: ST_TO_ADDR
// if btype = b_armoury then
47405: LD_VAR 0 5
47409: PUSH
47410: LD_INT 4
47412: EQUAL
47413: IFFALSE 47423
// btype := b_barracks ;
47415: LD_ADDR_VAR 0 5
47419: PUSH
47420: LD_INT 5
47422: ST_TO_ADDR
// if btype = b_depot then
47423: LD_VAR 0 5
47427: PUSH
47428: LD_INT 0
47430: EQUAL
47431: IFFALSE 47441
// btype := b_warehouse ;
47433: LD_ADDR_VAR 0 5
47437: PUSH
47438: LD_INT 1
47440: ST_TO_ADDR
// if btype = b_workshop then
47441: LD_VAR 0 5
47445: PUSH
47446: LD_INT 2
47448: EQUAL
47449: IFFALSE 47459
// btype := b_factory ;
47451: LD_ADDR_VAR 0 5
47455: PUSH
47456: LD_INT 3
47458: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47459: LD_ADDR_VAR 0 4
47463: PUSH
47464: LD_VAR 0 5
47468: PPUSH
47469: LD_VAR 0 1
47473: PPUSH
47474: CALL_OW 248
47478: PPUSH
47479: CALL_OW 450
47483: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47484: LD_ADDR_VAR 0 2
47488: PUSH
47489: LD_VAR 0 3
47493: PPUSH
47494: LD_INT 1
47496: PPUSH
47497: CALL_OW 275
47501: PUSH
47502: LD_VAR 0 4
47506: PUSH
47507: LD_INT 1
47509: ARRAY
47510: GREATEREQUAL
47511: PUSH
47512: LD_VAR 0 3
47516: PPUSH
47517: LD_INT 2
47519: PPUSH
47520: CALL_OW 275
47524: PUSH
47525: LD_VAR 0 4
47529: PUSH
47530: LD_INT 2
47532: ARRAY
47533: GREATEREQUAL
47534: AND
47535: PUSH
47536: LD_VAR 0 3
47540: PPUSH
47541: LD_INT 3
47543: PPUSH
47544: CALL_OW 275
47548: PUSH
47549: LD_VAR 0 4
47553: PUSH
47554: LD_INT 3
47556: ARRAY
47557: GREATEREQUAL
47558: AND
47559: ST_TO_ADDR
// end ;
47560: LD_VAR 0 2
47564: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47565: LD_INT 0
47567: PPUSH
47568: PPUSH
47569: PPUSH
// pom := GetBase ( building ) ;
47570: LD_ADDR_VAR 0 4
47574: PUSH
47575: LD_VAR 0 1
47579: PPUSH
47580: CALL_OW 274
47584: ST_TO_ADDR
// if not pom then
47585: LD_VAR 0 4
47589: NOT
47590: IFFALSE 47594
// exit ;
47592: GO 47695
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47594: LD_ADDR_VAR 0 5
47598: PUSH
47599: LD_VAR 0 2
47603: PPUSH
47604: LD_VAR 0 1
47608: PPUSH
47609: CALL_OW 248
47613: PPUSH
47614: CALL_OW 450
47618: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47619: LD_ADDR_VAR 0 3
47623: PUSH
47624: LD_VAR 0 4
47628: PPUSH
47629: LD_INT 1
47631: PPUSH
47632: CALL_OW 275
47636: PUSH
47637: LD_VAR 0 5
47641: PUSH
47642: LD_INT 1
47644: ARRAY
47645: GREATEREQUAL
47646: PUSH
47647: LD_VAR 0 4
47651: PPUSH
47652: LD_INT 2
47654: PPUSH
47655: CALL_OW 275
47659: PUSH
47660: LD_VAR 0 5
47664: PUSH
47665: LD_INT 2
47667: ARRAY
47668: GREATEREQUAL
47669: AND
47670: PUSH
47671: LD_VAR 0 4
47675: PPUSH
47676: LD_INT 3
47678: PPUSH
47679: CALL_OW 275
47683: PUSH
47684: LD_VAR 0 5
47688: PUSH
47689: LD_INT 3
47691: ARRAY
47692: GREATEREQUAL
47693: AND
47694: ST_TO_ADDR
// end ;
47695: LD_VAR 0 3
47699: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47700: LD_INT 0
47702: PPUSH
47703: PPUSH
47704: PPUSH
47705: PPUSH
47706: PPUSH
47707: PPUSH
47708: PPUSH
47709: PPUSH
47710: PPUSH
47711: PPUSH
47712: PPUSH
// result := false ;
47713: LD_ADDR_VAR 0 8
47717: PUSH
47718: LD_INT 0
47720: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47721: LD_VAR 0 5
47725: NOT
47726: PUSH
47727: LD_VAR 0 1
47731: NOT
47732: OR
47733: PUSH
47734: LD_VAR 0 2
47738: NOT
47739: OR
47740: PUSH
47741: LD_VAR 0 3
47745: NOT
47746: OR
47747: IFFALSE 47751
// exit ;
47749: GO 48565
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47751: LD_ADDR_VAR 0 14
47755: PUSH
47756: LD_VAR 0 1
47760: PPUSH
47761: LD_VAR 0 2
47765: PPUSH
47766: LD_VAR 0 3
47770: PPUSH
47771: LD_VAR 0 4
47775: PPUSH
47776: LD_VAR 0 5
47780: PUSH
47781: LD_INT 1
47783: ARRAY
47784: PPUSH
47785: CALL_OW 248
47789: PPUSH
47790: LD_INT 0
47792: PPUSH
47793: CALL 49402 0 6
47797: ST_TO_ADDR
// if not hexes then
47798: LD_VAR 0 14
47802: NOT
47803: IFFALSE 47807
// exit ;
47805: GO 48565
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47807: LD_ADDR_VAR 0 17
47811: PUSH
47812: LD_VAR 0 5
47816: PPUSH
47817: LD_INT 22
47819: PUSH
47820: LD_VAR 0 13
47824: PPUSH
47825: CALL_OW 255
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 2
47836: PUSH
47837: LD_INT 30
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 30
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: LIST
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PPUSH
47866: CALL_OW 72
47870: ST_TO_ADDR
// for i = 1 to hexes do
47871: LD_ADDR_VAR 0 9
47875: PUSH
47876: DOUBLE
47877: LD_INT 1
47879: DEC
47880: ST_TO_ADDR
47881: LD_VAR 0 14
47885: PUSH
47886: FOR_TO
47887: IFFALSE 48563
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47889: LD_ADDR_VAR 0 13
47893: PUSH
47894: LD_VAR 0 14
47898: PUSH
47899: LD_VAR 0 9
47903: ARRAY
47904: PUSH
47905: LD_INT 1
47907: ARRAY
47908: PPUSH
47909: LD_VAR 0 14
47913: PUSH
47914: LD_VAR 0 9
47918: ARRAY
47919: PUSH
47920: LD_INT 2
47922: ARRAY
47923: PPUSH
47924: CALL_OW 428
47928: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47929: LD_VAR 0 14
47933: PUSH
47934: LD_VAR 0 9
47938: ARRAY
47939: PUSH
47940: LD_INT 1
47942: ARRAY
47943: PPUSH
47944: LD_VAR 0 14
47948: PUSH
47949: LD_VAR 0 9
47953: ARRAY
47954: PUSH
47955: LD_INT 2
47957: ARRAY
47958: PPUSH
47959: CALL_OW 351
47963: PUSH
47964: LD_VAR 0 14
47968: PUSH
47969: LD_VAR 0 9
47973: ARRAY
47974: PUSH
47975: LD_INT 1
47977: ARRAY
47978: PPUSH
47979: LD_VAR 0 14
47983: PUSH
47984: LD_VAR 0 9
47988: ARRAY
47989: PUSH
47990: LD_INT 2
47992: ARRAY
47993: PPUSH
47994: CALL_OW 488
47998: NOT
47999: OR
48000: PUSH
48001: LD_VAR 0 13
48005: PPUSH
48006: CALL_OW 247
48010: PUSH
48011: LD_INT 3
48013: EQUAL
48014: OR
48015: IFFALSE 48021
// exit ;
48017: POP
48018: POP
48019: GO 48565
// if not tmp then
48021: LD_VAR 0 13
48025: NOT
48026: IFFALSE 48030
// continue ;
48028: GO 47886
// result := true ;
48030: LD_ADDR_VAR 0 8
48034: PUSH
48035: LD_INT 1
48037: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48038: LD_VAR 0 6
48042: PUSH
48043: LD_VAR 0 13
48047: PPUSH
48048: CALL_OW 247
48052: PUSH
48053: LD_INT 2
48055: EQUAL
48056: AND
48057: PUSH
48058: LD_VAR 0 13
48062: PPUSH
48063: CALL_OW 263
48067: PUSH
48068: LD_INT 1
48070: EQUAL
48071: AND
48072: IFFALSE 48236
// begin if IsDrivenBy ( tmp ) then
48074: LD_VAR 0 13
48078: PPUSH
48079: CALL_OW 311
48083: IFFALSE 48087
// continue ;
48085: GO 47886
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48087: LD_VAR 0 6
48091: PPUSH
48092: LD_INT 3
48094: PUSH
48095: LD_INT 60
48097: PUSH
48098: EMPTY
48099: LIST
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 3
48107: PUSH
48108: LD_INT 55
48110: PUSH
48111: EMPTY
48112: LIST
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PPUSH
48122: CALL_OW 72
48126: IFFALSE 48234
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48128: LD_ADDR_VAR 0 18
48132: PUSH
48133: LD_VAR 0 6
48137: PPUSH
48138: LD_INT 3
48140: PUSH
48141: LD_INT 60
48143: PUSH
48144: EMPTY
48145: LIST
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 3
48153: PUSH
48154: LD_INT 55
48156: PUSH
48157: EMPTY
48158: LIST
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PPUSH
48168: CALL_OW 72
48172: PUSH
48173: LD_INT 1
48175: ARRAY
48176: ST_TO_ADDR
// if IsInUnit ( driver ) then
48177: LD_VAR 0 18
48181: PPUSH
48182: CALL_OW 310
48186: IFFALSE 48197
// ComExit ( driver ) ;
48188: LD_VAR 0 18
48192: PPUSH
48193: CALL 72586 0 1
// AddComEnterUnit ( driver , tmp ) ;
48197: LD_VAR 0 18
48201: PPUSH
48202: LD_VAR 0 13
48206: PPUSH
48207: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48211: LD_VAR 0 18
48215: PPUSH
48216: LD_VAR 0 7
48220: PPUSH
48221: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48225: LD_VAR 0 18
48229: PPUSH
48230: CALL_OW 181
// end ; continue ;
48234: GO 47886
// end ; if not cleaners or not tmp in cleaners then
48236: LD_VAR 0 6
48240: NOT
48241: PUSH
48242: LD_VAR 0 13
48246: PUSH
48247: LD_VAR 0 6
48251: IN
48252: NOT
48253: OR
48254: IFFALSE 48561
// begin if dep then
48256: LD_VAR 0 17
48260: IFFALSE 48396
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48262: LD_ADDR_VAR 0 16
48266: PUSH
48267: LD_VAR 0 17
48271: PUSH
48272: LD_INT 1
48274: ARRAY
48275: PPUSH
48276: CALL_OW 250
48280: PPUSH
48281: LD_VAR 0 17
48285: PUSH
48286: LD_INT 1
48288: ARRAY
48289: PPUSH
48290: CALL_OW 254
48294: PPUSH
48295: LD_INT 5
48297: PPUSH
48298: CALL_OW 272
48302: PUSH
48303: LD_VAR 0 17
48307: PUSH
48308: LD_INT 1
48310: ARRAY
48311: PPUSH
48312: CALL_OW 251
48316: PPUSH
48317: LD_VAR 0 17
48321: PUSH
48322: LD_INT 1
48324: ARRAY
48325: PPUSH
48326: CALL_OW 254
48330: PPUSH
48331: LD_INT 5
48333: PPUSH
48334: CALL_OW 273
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48343: LD_VAR 0 16
48347: PUSH
48348: LD_INT 1
48350: ARRAY
48351: PPUSH
48352: LD_VAR 0 16
48356: PUSH
48357: LD_INT 2
48359: ARRAY
48360: PPUSH
48361: CALL_OW 488
48365: IFFALSE 48396
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48367: LD_VAR 0 13
48371: PPUSH
48372: LD_VAR 0 16
48376: PUSH
48377: LD_INT 1
48379: ARRAY
48380: PPUSH
48381: LD_VAR 0 16
48385: PUSH
48386: LD_INT 2
48388: ARRAY
48389: PPUSH
48390: CALL_OW 111
// continue ;
48394: GO 47886
// end ; end ; r := GetDir ( tmp ) ;
48396: LD_ADDR_VAR 0 15
48400: PUSH
48401: LD_VAR 0 13
48405: PPUSH
48406: CALL_OW 254
48410: ST_TO_ADDR
// if r = 5 then
48411: LD_VAR 0 15
48415: PUSH
48416: LD_INT 5
48418: EQUAL
48419: IFFALSE 48429
// r := 0 ;
48421: LD_ADDR_VAR 0 15
48425: PUSH
48426: LD_INT 0
48428: ST_TO_ADDR
// for j = r to 5 do
48429: LD_ADDR_VAR 0 10
48433: PUSH
48434: DOUBLE
48435: LD_VAR 0 15
48439: DEC
48440: ST_TO_ADDR
48441: LD_INT 5
48443: PUSH
48444: FOR_TO
48445: IFFALSE 48559
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48447: LD_ADDR_VAR 0 11
48451: PUSH
48452: LD_VAR 0 13
48456: PPUSH
48457: CALL_OW 250
48461: PPUSH
48462: LD_VAR 0 10
48466: PPUSH
48467: LD_INT 2
48469: PPUSH
48470: CALL_OW 272
48474: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48475: LD_ADDR_VAR 0 12
48479: PUSH
48480: LD_VAR 0 13
48484: PPUSH
48485: CALL_OW 251
48489: PPUSH
48490: LD_VAR 0 10
48494: PPUSH
48495: LD_INT 2
48497: PPUSH
48498: CALL_OW 273
48502: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48503: LD_VAR 0 11
48507: PPUSH
48508: LD_VAR 0 12
48512: PPUSH
48513: CALL_OW 488
48517: PUSH
48518: LD_VAR 0 11
48522: PPUSH
48523: LD_VAR 0 12
48527: PPUSH
48528: CALL_OW 428
48532: NOT
48533: AND
48534: IFFALSE 48557
// begin ComMoveXY ( tmp , _x , _y ) ;
48536: LD_VAR 0 13
48540: PPUSH
48541: LD_VAR 0 11
48545: PPUSH
48546: LD_VAR 0 12
48550: PPUSH
48551: CALL_OW 111
// break ;
48555: GO 48559
// end ; end ;
48557: GO 48444
48559: POP
48560: POP
// end ; end ;
48561: GO 47886
48563: POP
48564: POP
// end ;
48565: LD_VAR 0 8
48569: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
48570: LD_INT 0
48572: PPUSH
48573: PPUSH
48574: PPUSH
48575: PPUSH
48576: PPUSH
48577: PPUSH
48578: PPUSH
48579: PPUSH
48580: PPUSH
48581: PPUSH
// result := false ;
48582: LD_ADDR_VAR 0 6
48586: PUSH
48587: LD_INT 0
48589: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48590: LD_VAR 0 1
48594: NOT
48595: PUSH
48596: LD_VAR 0 1
48600: PPUSH
48601: CALL_OW 266
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: IN
48616: NOT
48617: OR
48618: PUSH
48619: LD_VAR 0 2
48623: NOT
48624: OR
48625: PUSH
48626: LD_VAR 0 5
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: LD_INT 3
48642: PUSH
48643: LD_INT 4
48645: PUSH
48646: LD_INT 5
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: IN
48657: NOT
48658: OR
48659: PUSH
48660: LD_VAR 0 3
48664: PPUSH
48665: LD_VAR 0 4
48669: PPUSH
48670: CALL_OW 488
48674: NOT
48675: OR
48676: IFFALSE 48680
// exit ;
48678: GO 49397
// pom := GetBase ( depot ) ;
48680: LD_ADDR_VAR 0 10
48684: PUSH
48685: LD_VAR 0 1
48689: PPUSH
48690: CALL_OW 274
48694: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48695: LD_ADDR_VAR 0 11
48699: PUSH
48700: LD_VAR 0 2
48704: PPUSH
48705: LD_VAR 0 1
48709: PPUSH
48710: CALL_OW 248
48714: PPUSH
48715: CALL_OW 450
48719: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48720: LD_VAR 0 10
48724: PPUSH
48725: LD_INT 1
48727: PPUSH
48728: CALL_OW 275
48732: PUSH
48733: LD_VAR 0 11
48737: PUSH
48738: LD_INT 1
48740: ARRAY
48741: GREATEREQUAL
48742: PUSH
48743: LD_VAR 0 10
48747: PPUSH
48748: LD_INT 2
48750: PPUSH
48751: CALL_OW 275
48755: PUSH
48756: LD_VAR 0 11
48760: PUSH
48761: LD_INT 2
48763: ARRAY
48764: GREATEREQUAL
48765: AND
48766: PUSH
48767: LD_VAR 0 10
48771: PPUSH
48772: LD_INT 3
48774: PPUSH
48775: CALL_OW 275
48779: PUSH
48780: LD_VAR 0 11
48784: PUSH
48785: LD_INT 3
48787: ARRAY
48788: GREATEREQUAL
48789: AND
48790: NOT
48791: IFFALSE 48795
// exit ;
48793: GO 49397
// if GetBType ( depot ) = b_depot then
48795: LD_VAR 0 1
48799: PPUSH
48800: CALL_OW 266
48804: PUSH
48805: LD_INT 0
48807: EQUAL
48808: IFFALSE 48820
// dist := 28 else
48810: LD_ADDR_VAR 0 14
48814: PUSH
48815: LD_INT 28
48817: ST_TO_ADDR
48818: GO 48828
// dist := 36 ;
48820: LD_ADDR_VAR 0 14
48824: PUSH
48825: LD_INT 36
48827: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48828: LD_VAR 0 1
48832: PPUSH
48833: LD_VAR 0 3
48837: PPUSH
48838: LD_VAR 0 4
48842: PPUSH
48843: CALL_OW 297
48847: PUSH
48848: LD_VAR 0 14
48852: GREATER
48853: IFFALSE 48857
// exit ;
48855: GO 49397
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48857: LD_ADDR_VAR 0 12
48861: PUSH
48862: LD_VAR 0 2
48866: PPUSH
48867: LD_VAR 0 3
48871: PPUSH
48872: LD_VAR 0 4
48876: PPUSH
48877: LD_VAR 0 5
48881: PPUSH
48882: LD_VAR 0 1
48886: PPUSH
48887: CALL_OW 248
48891: PPUSH
48892: LD_INT 0
48894: PPUSH
48895: CALL 49402 0 6
48899: ST_TO_ADDR
// if not hexes then
48900: LD_VAR 0 12
48904: NOT
48905: IFFALSE 48909
// exit ;
48907: GO 49397
// hex := GetHexInfo ( x , y ) ;
48909: LD_ADDR_VAR 0 15
48913: PUSH
48914: LD_VAR 0 3
48918: PPUSH
48919: LD_VAR 0 4
48923: PPUSH
48924: CALL_OW 546
48928: ST_TO_ADDR
// if hex [ 1 ] then
48929: LD_VAR 0 15
48933: PUSH
48934: LD_INT 1
48936: ARRAY
48937: IFFALSE 48941
// exit ;
48939: GO 49397
// height := hex [ 2 ] ;
48941: LD_ADDR_VAR 0 13
48945: PUSH
48946: LD_VAR 0 15
48950: PUSH
48951: LD_INT 2
48953: ARRAY
48954: ST_TO_ADDR
// for i = 1 to hexes do
48955: LD_ADDR_VAR 0 7
48959: PUSH
48960: DOUBLE
48961: LD_INT 1
48963: DEC
48964: ST_TO_ADDR
48965: LD_VAR 0 12
48969: PUSH
48970: FOR_TO
48971: IFFALSE 49301
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48973: LD_VAR 0 12
48977: PUSH
48978: LD_VAR 0 7
48982: ARRAY
48983: PUSH
48984: LD_INT 1
48986: ARRAY
48987: PPUSH
48988: LD_VAR 0 12
48992: PUSH
48993: LD_VAR 0 7
48997: ARRAY
48998: PUSH
48999: LD_INT 2
49001: ARRAY
49002: PPUSH
49003: CALL_OW 488
49007: NOT
49008: PUSH
49009: LD_VAR 0 12
49013: PUSH
49014: LD_VAR 0 7
49018: ARRAY
49019: PUSH
49020: LD_INT 1
49022: ARRAY
49023: PPUSH
49024: LD_VAR 0 12
49028: PUSH
49029: LD_VAR 0 7
49033: ARRAY
49034: PUSH
49035: LD_INT 2
49037: ARRAY
49038: PPUSH
49039: CALL_OW 428
49043: PUSH
49044: LD_INT 0
49046: GREATER
49047: OR
49048: PUSH
49049: LD_VAR 0 12
49053: PUSH
49054: LD_VAR 0 7
49058: ARRAY
49059: PUSH
49060: LD_INT 1
49062: ARRAY
49063: PPUSH
49064: LD_VAR 0 12
49068: PUSH
49069: LD_VAR 0 7
49073: ARRAY
49074: PUSH
49075: LD_INT 2
49077: ARRAY
49078: PPUSH
49079: CALL_OW 351
49083: OR
49084: IFFALSE 49090
// exit ;
49086: POP
49087: POP
49088: GO 49397
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49090: LD_ADDR_VAR 0 8
49094: PUSH
49095: LD_VAR 0 12
49099: PUSH
49100: LD_VAR 0 7
49104: ARRAY
49105: PUSH
49106: LD_INT 1
49108: ARRAY
49109: PPUSH
49110: LD_VAR 0 12
49114: PUSH
49115: LD_VAR 0 7
49119: ARRAY
49120: PUSH
49121: LD_INT 2
49123: ARRAY
49124: PPUSH
49125: CALL_OW 546
49129: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49130: LD_VAR 0 8
49134: PUSH
49135: LD_INT 1
49137: ARRAY
49138: PUSH
49139: LD_VAR 0 8
49143: PUSH
49144: LD_INT 2
49146: ARRAY
49147: PUSH
49148: LD_VAR 0 13
49152: PUSH
49153: LD_INT 2
49155: PLUS
49156: GREATER
49157: OR
49158: PUSH
49159: LD_VAR 0 8
49163: PUSH
49164: LD_INT 2
49166: ARRAY
49167: PUSH
49168: LD_VAR 0 13
49172: PUSH
49173: LD_INT 2
49175: MINUS
49176: LESS
49177: OR
49178: PUSH
49179: LD_VAR 0 8
49183: PUSH
49184: LD_INT 3
49186: ARRAY
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 8
49193: PUSH
49194: LD_INT 9
49196: PUSH
49197: LD_INT 10
49199: PUSH
49200: LD_INT 11
49202: PUSH
49203: LD_INT 12
49205: PUSH
49206: LD_INT 13
49208: PUSH
49209: LD_INT 16
49211: PUSH
49212: LD_INT 17
49214: PUSH
49215: LD_INT 18
49217: PUSH
49218: LD_INT 19
49220: PUSH
49221: LD_INT 20
49223: PUSH
49224: LD_INT 21
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: IN
49242: NOT
49243: OR
49244: PUSH
49245: LD_VAR 0 8
49249: PUSH
49250: LD_INT 5
49252: ARRAY
49253: NOT
49254: OR
49255: PUSH
49256: LD_VAR 0 8
49260: PUSH
49261: LD_INT 6
49263: ARRAY
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: LD_INT 2
49270: PUSH
49271: LD_INT 7
49273: PUSH
49274: LD_INT 9
49276: PUSH
49277: LD_INT 10
49279: PUSH
49280: LD_INT 11
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: IN
49291: NOT
49292: OR
49293: IFFALSE 49299
// exit ;
49295: POP
49296: POP
49297: GO 49397
// end ;
49299: GO 48970
49301: POP
49302: POP
// side := GetSide ( depot ) ;
49303: LD_ADDR_VAR 0 9
49307: PUSH
49308: LD_VAR 0 1
49312: PPUSH
49313: CALL_OW 255
49317: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49318: LD_VAR 0 9
49322: PPUSH
49323: LD_VAR 0 3
49327: PPUSH
49328: LD_VAR 0 4
49332: PPUSH
49333: LD_INT 20
49335: PPUSH
49336: CALL 41718 0 4
49340: PUSH
49341: LD_INT 4
49343: ARRAY
49344: IFFALSE 49348
// exit ;
49346: GO 49397
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49348: LD_VAR 0 2
49352: PUSH
49353: LD_INT 29
49355: PUSH
49356: LD_INT 30
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: IN
49363: PUSH
49364: LD_VAR 0 3
49368: PPUSH
49369: LD_VAR 0 4
49373: PPUSH
49374: LD_VAR 0 9
49378: PPUSH
49379: CALL_OW 440
49383: NOT
49384: AND
49385: IFFALSE 49389
// exit ;
49387: GO 49397
// result := true ;
49389: LD_ADDR_VAR 0 6
49393: PUSH
49394: LD_INT 1
49396: ST_TO_ADDR
// end ;
49397: LD_VAR 0 6
49401: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49402: LD_INT 0
49404: PPUSH
49405: PPUSH
49406: PPUSH
49407: PPUSH
49408: PPUSH
49409: PPUSH
49410: PPUSH
49411: PPUSH
49412: PPUSH
49413: PPUSH
49414: PPUSH
49415: PPUSH
49416: PPUSH
49417: PPUSH
49418: PPUSH
49419: PPUSH
49420: PPUSH
49421: PPUSH
49422: PPUSH
49423: PPUSH
49424: PPUSH
49425: PPUSH
49426: PPUSH
49427: PPUSH
49428: PPUSH
49429: PPUSH
49430: PPUSH
49431: PPUSH
49432: PPUSH
49433: PPUSH
49434: PPUSH
49435: PPUSH
49436: PPUSH
49437: PPUSH
49438: PPUSH
49439: PPUSH
49440: PPUSH
49441: PPUSH
49442: PPUSH
49443: PPUSH
49444: PPUSH
49445: PPUSH
49446: PPUSH
49447: PPUSH
49448: PPUSH
49449: PPUSH
49450: PPUSH
49451: PPUSH
49452: PPUSH
49453: PPUSH
49454: PPUSH
49455: PPUSH
49456: PPUSH
49457: PPUSH
49458: PPUSH
49459: PPUSH
49460: PPUSH
49461: PPUSH
// result = [ ] ;
49462: LD_ADDR_VAR 0 7
49466: PUSH
49467: EMPTY
49468: ST_TO_ADDR
// temp_list = [ ] ;
49469: LD_ADDR_VAR 0 9
49473: PUSH
49474: EMPTY
49475: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49476: LD_VAR 0 4
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: LD_INT 2
49489: PUSH
49490: LD_INT 3
49492: PUSH
49493: LD_INT 4
49495: PUSH
49496: LD_INT 5
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: IN
49507: NOT
49508: PUSH
49509: LD_VAR 0 1
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: IN
49524: PUSH
49525: LD_VAR 0 5
49529: PUSH
49530: LD_INT 1
49532: PUSH
49533: LD_INT 2
49535: PUSH
49536: LD_INT 3
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: LIST
49543: IN
49544: NOT
49545: AND
49546: OR
49547: IFFALSE 49551
// exit ;
49549: GO 67942
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49551: LD_VAR 0 1
49555: PUSH
49556: LD_INT 6
49558: PUSH
49559: LD_INT 7
49561: PUSH
49562: LD_INT 8
49564: PUSH
49565: LD_INT 13
49567: PUSH
49568: LD_INT 12
49570: PUSH
49571: LD_INT 15
49573: PUSH
49574: LD_INT 11
49576: PUSH
49577: LD_INT 14
49579: PUSH
49580: LD_INT 10
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: IN
49594: IFFALSE 49604
// btype = b_lab ;
49596: LD_ADDR_VAR 0 1
49600: PUSH
49601: LD_INT 6
49603: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49604: LD_VAR 0 6
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: LD_INT 2
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: LIST
49622: IN
49623: NOT
49624: PUSH
49625: LD_VAR 0 1
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: LD_INT 3
49641: PUSH
49642: LD_INT 6
49644: PUSH
49645: LD_INT 36
49647: PUSH
49648: LD_INT 4
49650: PUSH
49651: LD_INT 5
49653: PUSH
49654: LD_INT 31
49656: PUSH
49657: LD_INT 32
49659: PUSH
49660: LD_INT 33
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: IN
49676: NOT
49677: PUSH
49678: LD_VAR 0 6
49682: PUSH
49683: LD_INT 1
49685: EQUAL
49686: AND
49687: OR
49688: PUSH
49689: LD_VAR 0 1
49693: PUSH
49694: LD_INT 2
49696: PUSH
49697: LD_INT 3
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: IN
49704: NOT
49705: PUSH
49706: LD_VAR 0 6
49710: PUSH
49711: LD_INT 2
49713: EQUAL
49714: AND
49715: OR
49716: IFFALSE 49726
// mode = 0 ;
49718: LD_ADDR_VAR 0 6
49722: PUSH
49723: LD_INT 0
49725: ST_TO_ADDR
// case mode of 0 :
49726: LD_VAR 0 6
49730: PUSH
49731: LD_INT 0
49733: DOUBLE
49734: EQUAL
49735: IFTRUE 49739
49737: GO 61192
49739: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49740: LD_ADDR_VAR 0 11
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: LD_INT 2
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: LD_INT 3
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: LD_INT 3
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49933: LD_ADDR_VAR 0 12
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 2
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 2
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: NEG
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 2
50067: NEG
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 2
50079: NEG
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 3
50090: NEG
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 3
50101: NEG
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50129: LD_ADDR_VAR 0 13
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 2
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 2
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: LD_INT 2
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 2
50252: NEG
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 2
50264: NEG
50265: PUSH
50266: LD_INT 2
50268: NEG
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 2
50276: NEG
50277: PUSH
50278: LD_INT 3
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 3
50288: NEG
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 3
50300: NEG
50301: PUSH
50302: LD_INT 3
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50328: LD_ADDR_VAR 0 14
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: LD_INT 2
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 2
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: LD_INT 1
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 2
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: LD_INT 3
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 3
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: LD_INT 2
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50524: LD_ADDR_VAR 0 15
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: LD_INT 0
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: NEG
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 2
50647: NEG
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 2
50658: NEG
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 2
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 3
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 3
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50717: LD_ADDR_VAR 0 16
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: LD_INT 2
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 2
50810: PUSH
50811: LD_INT 1
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 2
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: LD_INT 2
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 2
50840: NEG
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: NEG
50853: PUSH
50854: LD_INT 2
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 3
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 3
50874: PUSH
50875: LD_INT 3
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 2
50884: PUSH
50885: LD_INT 3
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50910: LD_ADDR_VAR 0 17
50914: PUSH
50915: LD_INT 0
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: LD_INT 2
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 2
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 2
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 2
51045: PUSH
51046: LD_INT 2
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: LD_INT 2
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: LD_INT 2
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 2
51086: NEG
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 2
51097: NEG
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 2
51109: NEG
51110: PUSH
51111: LD_INT 2
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51140: LD_ADDR_VAR 0 18
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: LD_INT 2
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: LD_INT 2
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 2
51275: PUSH
51276: LD_INT 2
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: LD_INT 2
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: LD_INT 2
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 2
51316: NEG
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 2
51327: NEG
51328: PUSH
51329: LD_INT 1
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 2
51339: NEG
51340: PUSH
51341: LD_INT 2
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51370: LD_ADDR_VAR 0 19
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 2
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 2
51505: PUSH
51506: LD_INT 2
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: LD_INT 2
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 2
51546: NEG
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 2
51557: NEG
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 2
51569: NEG
51570: PUSH
51571: LD_INT 2
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51600: LD_ADDR_VAR 0 20
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: NEG
51682: PUSH
51683: LD_INT 2
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: LD_INT 2
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 2
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 2
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 2
51735: PUSH
51736: LD_INT 2
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 2
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 2
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 2
51787: NEG
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 2
51799: NEG
51800: PUSH
51801: LD_INT 2
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51830: LD_ADDR_VAR 0 21
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: NEG
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: LD_INT 2
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: LD_INT 2
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 2
51965: PUSH
51966: LD_INT 2
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: LD_INT 2
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 2
52006: NEG
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 2
52029: NEG
52030: PUSH
52031: LD_INT 2
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52060: LD_ADDR_VAR 0 22
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: LD_INT 2
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: LD_INT 2
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: PUSH
52196: LD_INT 2
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 2
52247: NEG
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52290: LD_ADDR_VAR 0 23
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: NEG
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: LD_INT 2
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 2
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 2
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 2
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 2
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 2
52466: NEG
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 2
52477: NEG
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 2
52489: NEG
52490: PUSH
52491: LD_INT 2
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 2
52501: NEG
52502: PUSH
52503: LD_INT 3
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: LD_INT 3
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: LD_INT 2
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 2
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52570: LD_ADDR_VAR 0 24
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: LD_INT 2
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: LD_INT 2
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: LD_INT 1
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 2
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 2
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 2
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: LD_INT 2
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 2
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 2
52746: NEG
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 2
52757: NEG
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 2
52769: NEG
52770: PUSH
52771: LD_INT 2
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: LD_INT 2
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 3
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 3
52813: PUSH
52814: LD_INT 2
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52846: LD_ADDR_VAR 0 25
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: NEG
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: LD_INT 2
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: LD_INT 2
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 2
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 2
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: LD_INT 2
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: NEG
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 2
53033: NEG
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 2
53045: NEG
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 3
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 3
53067: PUSH
53068: LD_INT 2
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 2
53077: PUSH
53078: LD_INT 3
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: LD_INT 3
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53120: LD_ADDR_VAR 0 26
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: LD_INT 1
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: LD_INT 2
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: LD_INT 2
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 2
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 2
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 2
53255: PUSH
53256: LD_INT 2
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: LD_INT 2
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 2
53296: NEG
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 2
53307: NEG
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: LD_INT 2
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 2
53331: PUSH
53332: LD_INT 3
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: LD_INT 3
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: NEG
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53396: LD_ADDR_VAR 0 27
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: LD_INT 1
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: LD_INT 2
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: LD_INT 2
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 2
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: LD_INT 2
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: LD_INT 2
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 2
53618: NEG
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 3
53629: NEG
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 3
53641: NEG
53642: PUSH
53643: LD_INT 2
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53676: LD_ADDR_VAR 0 28
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: LD_INT 2
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: LD_INT 2
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 2
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 2
53811: PUSH
53812: LD_INT 2
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: LD_INT 2
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: LD_INT 2
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 2
53863: NEG
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 2
53875: NEG
53876: PUSH
53877: LD_INT 2
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 2
53887: NEG
53888: PUSH
53889: LD_INT 3
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: LD_INT 3
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 3
53911: NEG
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 3
53923: NEG
53924: PUSH
53925: LD_INT 2
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53958: LD_ADDR_VAR 0 29
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 2
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 2
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: LD_INT 2
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 2
54124: NEG
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 2
54136: NEG
54137: PUSH
54138: LD_INT 2
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 2
54148: NEG
54149: PUSH
54150: LD_INT 3
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 3
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: LD_INT 3
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 3
54202: NEG
54203: PUSH
54204: LD_INT 2
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54237: LD_ADDR_VAR 0 30
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 2
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: LD_INT 2
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 2
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: LD_INT 2
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 2
54403: NEG
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: NEG
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: LD_INT 3
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: LD_INT 2
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 3
54449: PUSH
54450: LD_INT 2
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 2
54459: PUSH
54460: LD_INT 3
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 3
54480: NEG
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54515: LD_ADDR_VAR 0 31
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: LD_INT 1
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: LD_INT 2
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 2
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 2
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: LD_INT 2
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 2
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 2
54680: NEG
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 2
54692: NEG
54693: PUSH
54694: LD_INT 2
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 2
54704: NEG
54705: PUSH
54706: LD_INT 3
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 2
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 3
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: LD_INT 3
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: LD_INT 2
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 3
54758: NEG
54759: PUSH
54760: LD_INT 2
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54793: LD_ADDR_VAR 0 32
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: NEG
54875: PUSH
54876: LD_INT 2
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: LD_INT 2
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: LD_INT 2
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 2
54970: NEG
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: LD_INT 3
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 2
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 3
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: LD_INT 3
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 3
55036: NEG
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55071: LD_ADDR_VAR 0 33
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: LD_INT 2
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: LD_INT 2
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: LD_INT 2
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 2
55226: NEG
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: NEG
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 2
55249: NEG
55250: PUSH
55251: LD_INT 2
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PUSH
55263: LD_INT 3
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 2
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 3
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: LD_INT 3
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 3
55315: NEG
55316: PUSH
55317: LD_INT 2
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55350: LD_ADDR_VAR 0 34
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: LD_INT 2
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: LD_INT 2
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: LD_INT 2
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 2
55506: NEG
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 2
55517: NEG
55518: PUSH
55519: LD_INT 1
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 2
55529: NEG
55530: PUSH
55531: LD_INT 2
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: LD_INT 3
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: LD_INT 2
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 3
55564: PUSH
55565: LD_INT 2
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 2
55574: PUSH
55575: LD_INT 3
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 2
55584: NEG
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 3
55595: NEG
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55630: LD_ADDR_VAR 0 35
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 2
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 2
55721: NEG
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55742: LD_ADDR_VAR 0 36
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: LD_INT 2
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55854: LD_ADDR_VAR 0 37
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 1
55946: NEG
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55966: LD_ADDR_VAR 0 38
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: LD_INT 1
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 1
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: NEG
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 2
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56078: LD_ADDR_VAR 0 39
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 2
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: LD_INT 2
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56190: LD_ADDR_VAR 0 40
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: LD_INT 1
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56302: LD_ADDR_VAR 0 41
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: LD_INT 1
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: NEG
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: LD_INT 2
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 2
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 2
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 2
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: LD_INT 2
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 2
56457: NEG
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 2
56480: NEG
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 2
56492: NEG
56493: PUSH
56494: LD_INT 3
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 2
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 3
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 3
56525: PUSH
56526: LD_INT 1
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 3
56535: PUSH
56536: LD_INT 2
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 3
56545: PUSH
56546: LD_INT 3
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 2
56555: PUSH
56556: LD_INT 3
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 2
56565: NEG
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 3
56576: NEG
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 3
56587: NEG
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 3
56599: NEG
56600: PUSH
56601: LD_INT 2
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 3
56611: NEG
56612: PUSH
56613: LD_INT 3
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56652: LD_ADDR_VAR 0 42
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: PUSH
56768: LD_INT 1
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 2
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 2
56842: NEG
56843: PUSH
56844: LD_INT 3
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: LD_INT 3
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: LD_INT 3
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: LD_INT 2
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 3
56888: PUSH
56889: LD_INT 2
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 3
56898: PUSH
56899: LD_INT 3
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: LD_INT 3
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: LD_INT 3
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 3
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: LD_INT 2
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 3
56949: NEG
56950: PUSH
56951: LD_INT 2
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 3
56961: NEG
56962: PUSH
56963: LD_INT 3
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57002: LD_ADDR_VAR 0 43
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: LD_INT 2
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: LD_INT 2
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: LD_INT 2
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: LD_INT 2
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 2
57168: NEG
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 2
57179: NEG
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: LD_INT 3
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: LD_INT 3
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: LD_INT 2
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 2
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 3
57236: PUSH
57237: LD_INT 0
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 3
57246: PUSH
57247: LD_INT 1
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: LD_INT 3
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: LD_INT 3
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: LD_INT 2
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 2
57287: NEG
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 3
57298: NEG
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 3
57309: NEG
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57350: LD_ADDR_VAR 0 44
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 1
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: LD_INT 2
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: LD_INT 1
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 2
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 2
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 2
57474: PUSH
57475: LD_INT 2
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 1
57484: PUSH
57485: LD_INT 2
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 1
57494: NEG
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 2
57505: NEG
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 2
57516: NEG
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 2
57528: NEG
57529: PUSH
57530: LD_INT 2
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 2
57540: NEG
57541: PUSH
57542: LD_INT 3
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 2
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 3
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 3
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 3
57583: PUSH
57584: LD_INT 2
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 3
57593: PUSH
57594: LD_INT 3
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 2
57603: PUSH
57604: LD_INT 3
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 2
57613: NEG
57614: PUSH
57615: LD_INT 1
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 3
57624: NEG
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 3
57635: NEG
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 3
57647: NEG
57648: PUSH
57649: LD_INT 2
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 3
57659: NEG
57660: PUSH
57661: LD_INT 3
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57700: LD_ADDR_VAR 0 45
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: LD_INT 0
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: LD_INT 1
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: LD_INT 2
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 2
57815: PUSH
57816: LD_INT 1
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 2
57825: PUSH
57826: LD_INT 2
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: LD_INT 2
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 2
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 2
57866: NEG
57867: PUSH
57868: LD_INT 1
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 2
57878: NEG
57879: PUSH
57880: LD_INT 2
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 2
57890: NEG
57891: PUSH
57892: LD_INT 3
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: LD_INT 3
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 3
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: LD_INT 2
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 3
57936: PUSH
57937: LD_INT 2
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 3
57946: PUSH
57947: LD_INT 3
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 2
57956: PUSH
57957: LD_INT 3
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: LD_INT 3
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: LD_INT 3
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: LD_INT 2
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 3
57997: NEG
57998: PUSH
57999: LD_INT 2
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 3
58009: NEG
58010: PUSH
58011: LD_INT 3
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58050: LD_ADDR_VAR 0 46
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: LD_INT 0
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 0
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 1
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 1
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 0
58098: PUSH
58099: LD_INT 1
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 1
58108: NEG
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 1
58119: NEG
58120: PUSH
58121: LD_INT 1
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: LD_INT 2
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: LD_INT 2
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: LD_INT 1
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 2
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: LD_INT 2
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: LD_INT 2
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 2
58216: NEG
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 2
58227: NEG
58228: PUSH
58229: LD_INT 1
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: LD_INT 3
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: LD_INT 3
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: LD_INT 2
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 2
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 3
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 3
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 1
58304: PUSH
58305: LD_INT 3
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: LD_INT 3
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: LD_INT 2
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 2
58335: NEG
58336: PUSH
58337: LD_INT 1
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 3
58346: NEG
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 3
58357: NEG
58358: PUSH
58359: LD_INT 1
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58398: LD_ADDR_VAR 0 47
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: LD_INT 1
58418: NEG
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 1
58456: NEG
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: LD_INT 2
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: LD_INT 2
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: LD_INT 1
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 2
58513: NEG
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 2
58525: NEG
58526: PUSH
58527: LD_INT 2
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58549: LD_ADDR_VAR 0 48
58553: PUSH
58554: LD_INT 0
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 1
58577: PUSH
58578: LD_INT 0
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 1
58587: PUSH
58588: LD_INT 1
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 1
58607: NEG
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: LD_INT 2
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: LD_INT 2
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 2
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 2
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58696: LD_ADDR_VAR 0 49
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: LD_INT 1
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 1
58754: NEG
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: LD_INT 1
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 1
58777: PUSH
58778: LD_INT 1
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: LD_INT 1
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: LD_INT 2
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 1
58818: PUSH
58819: LD_INT 2
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58840: LD_ADDR_VAR 0 50
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: LD_INT 1
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: LD_INT 1
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 2
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 2
58931: PUSH
58932: LD_INT 2
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 1
58941: PUSH
58942: LD_INT 2
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: NEG
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58984: LD_ADDR_VAR 0 51
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: LD_INT 2
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 0
59075: PUSH
59076: LD_INT 2
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 1
59085: NEG
59086: PUSH
59087: LD_INT 1
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 2
59096: NEG
59097: PUSH
59098: LD_INT 0
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 2
59107: NEG
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59131: LD_ADDR_VAR 0 52
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: LD_INT 0
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: LD_INT 0
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: NEG
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: LD_INT 2
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: LD_INT 1
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 2
59235: NEG
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 2
59246: NEG
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 2
59258: NEG
59259: PUSH
59260: LD_INT 2
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59282: LD_ADDR_VAR 0 53
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: LD_INT 1
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: LD_INT 1
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 1
59363: NEG
59364: PUSH
59365: LD_INT 2
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: LD_INT 2
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 1
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 2
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 2
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 2
59417: PUSH
59418: LD_INT 2
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: LD_INT 2
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: LD_INT 2
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 2
59458: NEG
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 2
59469: NEG
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: NEG
59482: PUSH
59483: LD_INT 2
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59512: LD_ADDR_VAR 0 54
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 0
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: LD_INT 1
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 1
59581: NEG
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 1
59593: NEG
59594: PUSH
59595: LD_INT 2
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: LD_INT 2
59608: NEG
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 2
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 2
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 2
59647: PUSH
59648: LD_INT 2
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: LD_INT 2
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: LD_INT 2
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 2
59688: NEG
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 2
59699: NEG
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 2
59711: NEG
59712: PUSH
59713: LD_INT 2
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59742: LD_ADDR_VAR 0 55
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: LD_INT 0
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: LD_INT 1
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 1
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: LD_INT 1
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 0
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 1
59811: NEG
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: LD_INT 2
59827: NEG
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: LD_INT 2
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: LD_INT 1
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 2
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 2
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 2
59877: PUSH
59878: LD_INT 2
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: LD_INT 2
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: LD_INT 2
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 2
59918: NEG
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 2
59929: NEG
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 2
59941: NEG
59942: PUSH
59943: LD_INT 2
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59972: LD_ADDR_VAR 0 56
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: LD_INT 0
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 1
60030: NEG
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: LD_INT 2
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: LD_INT 2
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: LD_INT 1
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 2
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 2
60097: PUSH
60098: LD_INT 1
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 2
60107: PUSH
60108: LD_INT 2
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: LD_INT 2
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: LD_INT 2
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 1
60137: NEG
60138: PUSH
60139: LD_INT 1
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 2
60148: NEG
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 2
60159: NEG
60160: PUSH
60161: LD_INT 1
60163: NEG
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 2
60171: NEG
60172: PUSH
60173: LD_INT 2
60175: NEG
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60202: LD_ADDR_VAR 0 57
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: LD_INT 0
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: LD_INT 1
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: LD_INT 1
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 1
60260: NEG
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 1
60271: NEG
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 1
60283: NEG
60284: PUSH
60285: LD_INT 2
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: LD_INT 2
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 2
60317: PUSH
60318: LD_INT 0
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 2
60327: PUSH
60328: LD_INT 1
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 2
60337: PUSH
60338: LD_INT 2
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: LD_INT 2
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: LD_INT 2
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 2
60378: NEG
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 2
60389: NEG
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 2
60401: NEG
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60432: LD_ADDR_VAR 0 58
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: LD_INT 1
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 1
60460: PUSH
60461: LD_INT 0
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 1
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: LD_INT 1
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: NEG
60491: PUSH
60492: LD_INT 0
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: LD_INT 1
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 1
60513: NEG
60514: PUSH
60515: LD_INT 2
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: LD_INT 2
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 2
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 2
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 2
60567: PUSH
60568: LD_INT 2
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: LD_INT 2
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: LD_INT 2
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 2
60608: NEG
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 2
60619: NEG
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 2
60631: NEG
60632: PUSH
60633: LD_INT 2
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60662: LD_ADDR_VAR 0 59
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: LD_INT 0
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 0
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 1
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: LD_INT 1
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 1
60720: NEG
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 1
60731: NEG
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60750: LD_ADDR_VAR 0 60
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: LD_INT 0
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: LD_INT 1
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: LD_INT 1
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: LD_INT 1
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: LD_INT 1
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60838: LD_ADDR_VAR 0 61
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: LD_INT 1
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: LD_INT 0
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 1
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 1
60896: NEG
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 1
60907: NEG
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60926: LD_ADDR_VAR 0 62
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: LD_INT 0
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 1
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: LD_INT 1
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 1
60984: NEG
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61014: LD_ADDR_VAR 0 63
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: LD_INT 1
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 1
61042: PUSH
61043: LD_INT 0
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 1
61052: PUSH
61053: LD_INT 1
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: LD_INT 1
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 1
61072: NEG
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 1
61083: NEG
61084: PUSH
61085: LD_INT 1
61087: NEG
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61102: LD_ADDR_VAR 0 64
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: LD_INT 1
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 1
61140: PUSH
61141: LD_INT 1
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: NEG
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: NEG
61172: PUSH
61173: LD_INT 1
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: ST_TO_ADDR
// end ; 1 :
61190: GO 67087
61192: LD_INT 1
61194: DOUBLE
61195: EQUAL
61196: IFTRUE 61200
61198: GO 63823
61200: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61201: LD_ADDR_VAR 0 11
61205: PUSH
61206: LD_INT 1
61208: NEG
61209: PUSH
61210: LD_INT 3
61212: NEG
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: LD_INT 3
61223: NEG
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 1
61231: PUSH
61232: LD_INT 2
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: LIST
61244: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61245: LD_ADDR_VAR 0 12
61249: PUSH
61250: LD_INT 2
61252: PUSH
61253: LD_INT 1
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 3
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 3
61273: PUSH
61274: LD_INT 1
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: LIST
61285: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61286: LD_ADDR_VAR 0 13
61290: PUSH
61291: LD_INT 3
61293: PUSH
61294: LD_INT 2
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 3
61303: PUSH
61304: LD_INT 3
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 2
61313: PUSH
61314: LD_INT 3
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: LIST
61325: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61326: LD_ADDR_VAR 0 14
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: LD_INT 3
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: LD_INT 3
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 1
61353: NEG
61354: PUSH
61355: LD_INT 2
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: LIST
61366: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61367: LD_ADDR_VAR 0 15
61371: PUSH
61372: LD_INT 2
61374: NEG
61375: PUSH
61376: LD_INT 1
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 3
61385: NEG
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 3
61396: NEG
61397: PUSH
61398: LD_INT 1
61400: NEG
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: LIST
61410: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61411: LD_ADDR_VAR 0 16
61415: PUSH
61416: LD_INT 2
61418: NEG
61419: PUSH
61420: LD_INT 3
61422: NEG
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 3
61430: NEG
61431: PUSH
61432: LD_INT 2
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 3
61442: NEG
61443: PUSH
61444: LD_INT 3
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: LIST
61456: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61457: LD_ADDR_VAR 0 17
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: LD_INT 3
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 0
61476: PUSH
61477: LD_INT 3
61479: NEG
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 1
61487: PUSH
61488: LD_INT 2
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: LIST
61500: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61501: LD_ADDR_VAR 0 18
61505: PUSH
61506: LD_INT 2
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 3
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 3
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: LIST
61541: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61542: LD_ADDR_VAR 0 19
61546: PUSH
61547: LD_INT 3
61549: PUSH
61550: LD_INT 2
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 3
61559: PUSH
61560: LD_INT 3
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 2
61569: PUSH
61570: LD_INT 3
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: LIST
61581: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61582: LD_ADDR_VAR 0 20
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: LD_INT 3
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: LD_INT 3
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: LD_INT 2
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: LIST
61622: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61623: LD_ADDR_VAR 0 21
61627: PUSH
61628: LD_INT 2
61630: NEG
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 3
61641: NEG
61642: PUSH
61643: LD_INT 0
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 3
61652: NEG
61653: PUSH
61654: LD_INT 1
61656: NEG
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: LIST
61666: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61667: LD_ADDR_VAR 0 22
61671: PUSH
61672: LD_INT 2
61674: NEG
61675: PUSH
61676: LD_INT 3
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 3
61686: NEG
61687: PUSH
61688: LD_INT 2
61690: NEG
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 3
61698: NEG
61699: PUSH
61700: LD_INT 3
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: LIST
61712: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61713: LD_ADDR_VAR 0 23
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: LD_INT 3
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 1
61731: NEG
61732: PUSH
61733: LD_INT 4
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: LD_INT 3
61746: NEG
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: LIST
61756: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61757: LD_ADDR_VAR 0 24
61761: PUSH
61762: LD_INT 3
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 3
61774: PUSH
61775: LD_INT 1
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 4
61785: PUSH
61786: LD_INT 1
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: LIST
61797: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61798: LD_ADDR_VAR 0 25
61802: PUSH
61803: LD_INT 3
61805: PUSH
61806: LD_INT 3
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 4
61815: PUSH
61816: LD_INT 3
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 3
61825: PUSH
61826: LD_INT 4
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: LIST
61837: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61838: LD_ADDR_VAR 0 26
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: LD_INT 3
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 1
61855: PUSH
61856: LD_INT 4
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: NEG
61866: PUSH
61867: LD_INT 3
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: LIST
61878: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61879: LD_ADDR_VAR 0 27
61883: PUSH
61884: LD_INT 3
61886: NEG
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 3
61897: NEG
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 4
61908: NEG
61909: PUSH
61910: LD_INT 1
61912: NEG
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: LIST
61922: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61923: LD_ADDR_VAR 0 28
61927: PUSH
61928: LD_INT 3
61930: NEG
61931: PUSH
61932: LD_INT 3
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 3
61942: NEG
61943: PUSH
61944: LD_INT 4
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 4
61954: NEG
61955: PUSH
61956: LD_INT 3
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: LIST
61968: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61969: LD_ADDR_VAR 0 29
61973: PUSH
61974: LD_INT 1
61976: NEG
61977: PUSH
61978: LD_INT 3
61980: NEG
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: LD_INT 3
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: LD_INT 2
62002: NEG
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 1
62010: NEG
62011: PUSH
62012: LD_INT 4
62014: NEG
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 0
62022: PUSH
62023: LD_INT 4
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 1
62033: PUSH
62034: LD_INT 3
62036: NEG
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 1
62044: NEG
62045: PUSH
62046: LD_INT 5
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: LD_INT 5
62059: NEG
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 1
62067: PUSH
62068: LD_INT 4
62070: NEG
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: LD_INT 6
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: LD_INT 6
62093: NEG
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 1
62101: PUSH
62102: LD_INT 5
62104: NEG
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62124: LD_ADDR_VAR 0 30
62128: PUSH
62129: LD_INT 2
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 3
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 3
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 3
62162: PUSH
62163: LD_INT 1
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 4
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 4
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 4
62193: PUSH
62194: LD_INT 1
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 5
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 5
62214: PUSH
62215: LD_INT 1
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 5
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 6
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 6
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62267: LD_ADDR_VAR 0 31
62271: PUSH
62272: LD_INT 3
62274: PUSH
62275: LD_INT 2
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 3
62284: PUSH
62285: LD_INT 3
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 2
62294: PUSH
62295: LD_INT 3
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 4
62304: PUSH
62305: LD_INT 3
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 4
62314: PUSH
62315: LD_INT 4
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 3
62324: PUSH
62325: LD_INT 4
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 5
62334: PUSH
62335: LD_INT 4
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 5
62344: PUSH
62345: LD_INT 5
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 4
62354: PUSH
62355: LD_INT 5
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 6
62364: PUSH
62365: LD_INT 5
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 6
62374: PUSH
62375: LD_INT 6
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 5
62384: PUSH
62385: LD_INT 6
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62406: LD_ADDR_VAR 0 32
62410: PUSH
62411: LD_INT 1
62413: PUSH
62414: LD_INT 3
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 0
62423: PUSH
62424: LD_INT 3
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 1
62433: NEG
62434: PUSH
62435: LD_INT 2
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 1
62444: PUSH
62445: LD_INT 4
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 0
62454: PUSH
62455: LD_INT 4
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 1
62464: NEG
62465: PUSH
62466: LD_INT 3
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 1
62475: PUSH
62476: LD_INT 5
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: LD_INT 5
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 1
62495: NEG
62496: PUSH
62497: LD_INT 4
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 1
62506: PUSH
62507: LD_INT 6
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: LD_INT 6
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: LD_INT 5
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62549: LD_ADDR_VAR 0 33
62553: PUSH
62554: LD_INT 2
62556: NEG
62557: PUSH
62558: LD_INT 1
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 3
62567: NEG
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 3
62578: NEG
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 3
62590: NEG
62591: PUSH
62592: LD_INT 1
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 4
62601: NEG
62602: PUSH
62603: LD_INT 0
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 4
62612: NEG
62613: PUSH
62614: LD_INT 1
62616: NEG
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 4
62624: NEG
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 5
62635: NEG
62636: PUSH
62637: LD_INT 0
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 5
62646: NEG
62647: PUSH
62648: LD_INT 1
62650: NEG
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 5
62658: NEG
62659: PUSH
62660: LD_INT 1
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 6
62669: NEG
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 6
62680: NEG
62681: PUSH
62682: LD_INT 1
62684: NEG
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62704: LD_ADDR_VAR 0 34
62708: PUSH
62709: LD_INT 2
62711: NEG
62712: PUSH
62713: LD_INT 3
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 3
62723: NEG
62724: PUSH
62725: LD_INT 2
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 3
62735: NEG
62736: PUSH
62737: LD_INT 3
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 3
62747: NEG
62748: PUSH
62749: LD_INT 4
62751: NEG
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 4
62759: NEG
62760: PUSH
62761: LD_INT 3
62763: NEG
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 4
62771: NEG
62772: PUSH
62773: LD_INT 4
62775: NEG
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 4
62783: NEG
62784: PUSH
62785: LD_INT 5
62787: NEG
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 5
62795: NEG
62796: PUSH
62797: LD_INT 4
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 5
62807: NEG
62808: PUSH
62809: LD_INT 5
62811: NEG
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 5
62819: NEG
62820: PUSH
62821: LD_INT 6
62823: NEG
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 6
62831: NEG
62832: PUSH
62833: LD_INT 5
62835: NEG
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 6
62843: NEG
62844: PUSH
62845: LD_INT 6
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62867: LD_ADDR_VAR 0 41
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: LD_INT 2
62877: NEG
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: LD_INT 3
62889: NEG
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 1
62897: PUSH
62898: LD_INT 2
62900: NEG
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: LIST
62910: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62911: LD_ADDR_VAR 0 42
62915: PUSH
62916: LD_INT 2
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 2
62928: PUSH
62929: LD_INT 1
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 3
62939: PUSH
62940: LD_INT 1
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: LIST
62951: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62952: LD_ADDR_VAR 0 43
62956: PUSH
62957: LD_INT 2
62959: PUSH
62960: LD_INT 2
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 3
62969: PUSH
62970: LD_INT 2
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 2
62979: PUSH
62980: LD_INT 3
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: LIST
62991: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62992: LD_ADDR_VAR 0 44
62996: PUSH
62997: LD_INT 0
62999: PUSH
63000: LD_INT 2
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 1
63009: PUSH
63010: LD_INT 3
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: LD_INT 2
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: LIST
63032: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63033: LD_ADDR_VAR 0 45
63037: PUSH
63038: LD_INT 2
63040: NEG
63041: PUSH
63042: LD_INT 0
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 2
63051: NEG
63052: PUSH
63053: LD_INT 1
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 3
63062: NEG
63063: PUSH
63064: LD_INT 1
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: LIST
63076: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63077: LD_ADDR_VAR 0 46
63081: PUSH
63082: LD_INT 2
63084: NEG
63085: PUSH
63086: LD_INT 2
63088: NEG
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 2
63096: NEG
63097: PUSH
63098: LD_INT 3
63100: NEG
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 3
63108: NEG
63109: PUSH
63110: LD_INT 2
63112: NEG
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: LIST
63122: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63123: LD_ADDR_VAR 0 47
63127: PUSH
63128: LD_INT 2
63130: NEG
63131: PUSH
63132: LD_INT 3
63134: NEG
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 1
63142: NEG
63143: PUSH
63144: LD_INT 3
63146: NEG
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63156: LD_ADDR_VAR 0 48
63160: PUSH
63161: LD_INT 1
63163: PUSH
63164: LD_INT 2
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 2
63174: PUSH
63175: LD_INT 1
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63187: LD_ADDR_VAR 0 49
63191: PUSH
63192: LD_INT 3
63194: PUSH
63195: LD_INT 1
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 3
63204: PUSH
63205: LD_INT 2
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63216: LD_ADDR_VAR 0 50
63220: PUSH
63221: LD_INT 2
63223: PUSH
63224: LD_INT 3
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 1
63233: PUSH
63234: LD_INT 3
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63245: LD_ADDR_VAR 0 51
63249: PUSH
63250: LD_INT 1
63252: NEG
63253: PUSH
63254: LD_INT 2
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 2
63263: NEG
63264: PUSH
63265: LD_INT 1
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63276: LD_ADDR_VAR 0 52
63280: PUSH
63281: LD_INT 3
63283: NEG
63284: PUSH
63285: LD_INT 1
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 3
63295: NEG
63296: PUSH
63297: LD_INT 2
63299: NEG
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63309: LD_ADDR_VAR 0 53
63313: PUSH
63314: LD_INT 1
63316: NEG
63317: PUSH
63318: LD_INT 3
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 0
63328: PUSH
63329: LD_INT 3
63331: NEG
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 1
63339: PUSH
63340: LD_INT 2
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: LIST
63352: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63353: LD_ADDR_VAR 0 54
63357: PUSH
63358: LD_INT 2
63360: PUSH
63361: LD_INT 1
63363: NEG
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 3
63371: PUSH
63372: LD_INT 0
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 3
63381: PUSH
63382: LD_INT 1
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: LIST
63393: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63394: LD_ADDR_VAR 0 55
63398: PUSH
63399: LD_INT 3
63401: PUSH
63402: LD_INT 2
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 3
63411: PUSH
63412: LD_INT 3
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 2
63421: PUSH
63422: LD_INT 3
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: LIST
63433: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63434: LD_ADDR_VAR 0 56
63438: PUSH
63439: LD_INT 1
63441: PUSH
63442: LD_INT 3
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: LD_INT 3
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 1
63461: NEG
63462: PUSH
63463: LD_INT 2
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: LIST
63474: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63475: LD_ADDR_VAR 0 57
63479: PUSH
63480: LD_INT 2
63482: NEG
63483: PUSH
63484: LD_INT 1
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 3
63493: NEG
63494: PUSH
63495: LD_INT 0
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 3
63504: NEG
63505: PUSH
63506: LD_INT 1
63508: NEG
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: LIST
63518: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63519: LD_ADDR_VAR 0 58
63523: PUSH
63524: LD_INT 2
63526: NEG
63527: PUSH
63528: LD_INT 3
63530: NEG
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 3
63538: NEG
63539: PUSH
63540: LD_INT 2
63542: NEG
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 3
63550: NEG
63551: PUSH
63552: LD_INT 3
63554: NEG
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: LIST
63564: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63565: LD_ADDR_VAR 0 59
63569: PUSH
63570: LD_INT 1
63572: NEG
63573: PUSH
63574: LD_INT 2
63576: NEG
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 0
63584: PUSH
63585: LD_INT 2
63587: NEG
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 1
63595: PUSH
63596: LD_INT 1
63598: NEG
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: LIST
63608: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63609: LD_ADDR_VAR 0 60
63613: PUSH
63614: LD_INT 1
63616: PUSH
63617: LD_INT 1
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 2
63627: PUSH
63628: LD_INT 0
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 2
63637: PUSH
63638: LD_INT 1
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: LIST
63649: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63650: LD_ADDR_VAR 0 61
63654: PUSH
63655: LD_INT 2
63657: PUSH
63658: LD_INT 1
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 2
63667: PUSH
63668: LD_INT 2
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: PUSH
63678: LD_INT 2
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: LIST
63689: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63690: LD_ADDR_VAR 0 62
63694: PUSH
63695: LD_INT 1
63697: PUSH
63698: LD_INT 2
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 0
63707: PUSH
63708: LD_INT 2
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 1
63717: NEG
63718: PUSH
63719: LD_INT 1
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: LIST
63730: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63731: LD_ADDR_VAR 0 63
63735: PUSH
63736: LD_INT 1
63738: NEG
63739: PUSH
63740: LD_INT 1
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 2
63749: NEG
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 2
63760: NEG
63761: PUSH
63762: LD_INT 1
63764: NEG
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: LIST
63774: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63775: LD_ADDR_VAR 0 64
63779: PUSH
63780: LD_INT 1
63782: NEG
63783: PUSH
63784: LD_INT 2
63786: NEG
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 2
63794: NEG
63795: PUSH
63796: LD_INT 1
63798: NEG
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 2
63806: NEG
63807: PUSH
63808: LD_INT 2
63810: NEG
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: LIST
63820: ST_TO_ADDR
// end ; 2 :
63821: GO 67087
63823: LD_INT 2
63825: DOUBLE
63826: EQUAL
63827: IFTRUE 63831
63829: GO 67086
63831: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63832: LD_ADDR_VAR 0 29
63836: PUSH
63837: LD_INT 4
63839: PUSH
63840: LD_INT 0
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 4
63849: PUSH
63850: LD_INT 1
63852: NEG
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 5
63860: PUSH
63861: LD_INT 0
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 5
63870: PUSH
63871: LD_INT 1
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 4
63880: PUSH
63881: LD_INT 1
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 3
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 3
63900: PUSH
63901: LD_INT 1
63903: NEG
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 3
63911: PUSH
63912: LD_INT 2
63914: NEG
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 5
63922: PUSH
63923: LD_INT 2
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 3
63932: PUSH
63933: LD_INT 3
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 3
63942: PUSH
63943: LD_INT 2
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 4
63952: PUSH
63953: LD_INT 3
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 4
63962: PUSH
63963: LD_INT 4
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 3
63972: PUSH
63973: LD_INT 4
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 2
63982: PUSH
63983: LD_INT 3
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 2
63992: PUSH
63993: LD_INT 2
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 4
64002: PUSH
64003: LD_INT 2
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 2
64012: PUSH
64013: LD_INT 4
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 0
64022: PUSH
64023: LD_INT 4
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 0
64032: PUSH
64033: LD_INT 3
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: LD_INT 4
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 1
64052: PUSH
64053: LD_INT 5
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 0
64062: PUSH
64063: LD_INT 5
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 1
64072: NEG
64073: PUSH
64074: LD_INT 4
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 1
64083: NEG
64084: PUSH
64085: LD_INT 3
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 2
64094: PUSH
64095: LD_INT 5
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 2
64104: NEG
64105: PUSH
64106: LD_INT 3
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 3
64115: NEG
64116: PUSH
64117: LD_INT 0
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 3
64126: NEG
64127: PUSH
64128: LD_INT 1
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 2
64138: NEG
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 2
64149: NEG
64150: PUSH
64151: LD_INT 1
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 3
64160: NEG
64161: PUSH
64162: LD_INT 1
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 4
64171: NEG
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 4
64182: NEG
64183: PUSH
64184: LD_INT 1
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 4
64194: NEG
64195: PUSH
64196: LD_INT 2
64198: NEG
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 2
64206: NEG
64207: PUSH
64208: LD_INT 2
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 4
64217: NEG
64218: PUSH
64219: LD_INT 4
64221: NEG
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 4
64229: NEG
64230: PUSH
64231: LD_INT 5
64233: NEG
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 3
64241: NEG
64242: PUSH
64243: LD_INT 4
64245: NEG
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 3
64253: NEG
64254: PUSH
64255: LD_INT 3
64257: NEG
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 4
64265: NEG
64266: PUSH
64267: LD_INT 3
64269: NEG
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 5
64277: NEG
64278: PUSH
64279: LD_INT 4
64281: NEG
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 5
64289: NEG
64290: PUSH
64291: LD_INT 5
64293: NEG
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 3
64301: NEG
64302: PUSH
64303: LD_INT 5
64305: NEG
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 5
64313: NEG
64314: PUSH
64315: LD_INT 3
64317: NEG
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64370: LD_ADDR_VAR 0 30
64374: PUSH
64375: LD_INT 4
64377: PUSH
64378: LD_INT 4
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 4
64387: PUSH
64388: LD_INT 3
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 5
64397: PUSH
64398: LD_INT 4
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 5
64407: PUSH
64408: LD_INT 5
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 4
64417: PUSH
64418: LD_INT 5
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 3
64427: PUSH
64428: LD_INT 4
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 3
64437: PUSH
64438: LD_INT 3
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 5
64447: PUSH
64448: LD_INT 3
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 3
64457: PUSH
64458: LD_INT 5
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 0
64467: PUSH
64468: LD_INT 3
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 0
64477: PUSH
64478: LD_INT 2
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 1
64487: PUSH
64488: LD_INT 3
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 1
64497: PUSH
64498: LD_INT 4
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: LD_INT 4
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 1
64517: NEG
64518: PUSH
64519: LD_INT 3
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 1
64528: NEG
64529: PUSH
64530: LD_INT 2
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 2
64539: PUSH
64540: LD_INT 4
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 2
64549: NEG
64550: PUSH
64551: LD_INT 2
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 4
64560: NEG
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 4
64571: NEG
64572: PUSH
64573: LD_INT 1
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 3
64583: NEG
64584: PUSH
64585: LD_INT 0
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 3
64594: NEG
64595: PUSH
64596: LD_INT 1
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 4
64605: NEG
64606: PUSH
64607: LD_INT 1
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 5
64616: NEG
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 5
64627: NEG
64628: PUSH
64629: LD_INT 1
64631: NEG
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 5
64639: NEG
64640: PUSH
64641: LD_INT 2
64643: NEG
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 3
64651: NEG
64652: PUSH
64653: LD_INT 2
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 3
64662: NEG
64663: PUSH
64664: LD_INT 3
64666: NEG
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 3
64674: NEG
64675: PUSH
64676: LD_INT 4
64678: NEG
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 2
64686: NEG
64687: PUSH
64688: LD_INT 3
64690: NEG
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 2
64698: NEG
64699: PUSH
64700: LD_INT 2
64702: NEG
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 3
64710: NEG
64711: PUSH
64712: LD_INT 2
64714: NEG
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 4
64722: NEG
64723: PUSH
64724: LD_INT 3
64726: NEG
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 4
64734: NEG
64735: PUSH
64736: LD_INT 4
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 2
64746: NEG
64747: PUSH
64748: LD_INT 4
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 4
64758: NEG
64759: PUSH
64760: LD_INT 2
64762: NEG
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 0
64770: PUSH
64771: LD_INT 4
64773: NEG
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 0
64781: PUSH
64782: LD_INT 5
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 1
64792: PUSH
64793: LD_INT 4
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 1
64803: PUSH
64804: LD_INT 3
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 0
64814: PUSH
64815: LD_INT 3
64817: NEG
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 1
64825: NEG
64826: PUSH
64827: LD_INT 4
64829: NEG
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 1
64837: NEG
64838: PUSH
64839: LD_INT 5
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 2
64849: PUSH
64850: LD_INT 3
64852: NEG
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 2
64860: NEG
64861: PUSH
64862: LD_INT 5
64864: NEG
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64917: LD_ADDR_VAR 0 31
64921: PUSH
64922: LD_INT 0
64924: PUSH
64925: LD_INT 4
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: LD_INT 3
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 1
64944: PUSH
64945: LD_INT 4
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 1
64954: PUSH
64955: LD_INT 5
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: LD_INT 5
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 1
64974: NEG
64975: PUSH
64976: LD_INT 4
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 1
64985: NEG
64986: PUSH
64987: LD_INT 3
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 2
64996: PUSH
64997: LD_INT 5
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 2
65006: NEG
65007: PUSH
65008: LD_INT 3
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 3
65017: NEG
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 3
65028: NEG
65029: PUSH
65030: LD_INT 1
65032: NEG
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 2
65040: NEG
65041: PUSH
65042: LD_INT 0
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 2
65051: NEG
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 3
65062: NEG
65063: PUSH
65064: LD_INT 1
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 4
65073: NEG
65074: PUSH
65075: LD_INT 0
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 4
65084: NEG
65085: PUSH
65086: LD_INT 1
65088: NEG
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 4
65096: NEG
65097: PUSH
65098: LD_INT 2
65100: NEG
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 2
65108: NEG
65109: PUSH
65110: LD_INT 2
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 4
65119: NEG
65120: PUSH
65121: LD_INT 4
65123: NEG
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 4
65131: NEG
65132: PUSH
65133: LD_INT 5
65135: NEG
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 3
65143: NEG
65144: PUSH
65145: LD_INT 4
65147: NEG
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 3
65155: NEG
65156: PUSH
65157: LD_INT 3
65159: NEG
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 4
65167: NEG
65168: PUSH
65169: LD_INT 3
65171: NEG
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 5
65179: NEG
65180: PUSH
65181: LD_INT 4
65183: NEG
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 5
65191: NEG
65192: PUSH
65193: LD_INT 5
65195: NEG
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 3
65203: NEG
65204: PUSH
65205: LD_INT 5
65207: NEG
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 5
65215: NEG
65216: PUSH
65217: LD_INT 3
65219: NEG
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: LD_INT 3
65230: NEG
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 0
65238: PUSH
65239: LD_INT 4
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 1
65249: PUSH
65250: LD_INT 3
65252: NEG
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 1
65260: PUSH
65261: LD_INT 2
65263: NEG
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 0
65271: PUSH
65272: LD_INT 2
65274: NEG
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 1
65282: NEG
65283: PUSH
65284: LD_INT 3
65286: NEG
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 1
65294: NEG
65295: PUSH
65296: LD_INT 4
65298: NEG
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 2
65306: PUSH
65307: LD_INT 2
65309: NEG
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 2
65317: NEG
65318: PUSH
65319: LD_INT 4
65321: NEG
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 4
65329: PUSH
65330: LD_INT 0
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 4
65339: PUSH
65340: LD_INT 1
65342: NEG
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 5
65350: PUSH
65351: LD_INT 0
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 5
65360: PUSH
65361: LD_INT 1
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 4
65370: PUSH
65371: LD_INT 1
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 3
65380: PUSH
65381: LD_INT 0
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 3
65390: PUSH
65391: LD_INT 1
65393: NEG
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 3
65401: PUSH
65402: LD_INT 2
65404: NEG
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 5
65412: PUSH
65413: LD_INT 2
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65467: LD_ADDR_VAR 0 32
65471: PUSH
65472: LD_INT 4
65474: NEG
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 4
65485: NEG
65486: PUSH
65487: LD_INT 1
65489: NEG
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 3
65497: NEG
65498: PUSH
65499: LD_INT 0
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 3
65508: NEG
65509: PUSH
65510: LD_INT 1
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 4
65519: NEG
65520: PUSH
65521: LD_INT 1
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 5
65530: NEG
65531: PUSH
65532: LD_INT 0
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 5
65541: NEG
65542: PUSH
65543: LD_INT 1
65545: NEG
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 5
65553: NEG
65554: PUSH
65555: LD_INT 2
65557: NEG
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 3
65565: NEG
65566: PUSH
65567: LD_INT 2
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 3
65576: NEG
65577: PUSH
65578: LD_INT 3
65580: NEG
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 3
65588: NEG
65589: PUSH
65590: LD_INT 4
65592: NEG
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 2
65600: NEG
65601: PUSH
65602: LD_INT 3
65604: NEG
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 2
65612: NEG
65613: PUSH
65614: LD_INT 2
65616: NEG
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 3
65624: NEG
65625: PUSH
65626: LD_INT 2
65628: NEG
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 4
65636: NEG
65637: PUSH
65638: LD_INT 3
65640: NEG
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 4
65648: NEG
65649: PUSH
65650: LD_INT 4
65652: NEG
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 2
65660: NEG
65661: PUSH
65662: LD_INT 4
65664: NEG
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 4
65672: NEG
65673: PUSH
65674: LD_INT 2
65676: NEG
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 0
65684: PUSH
65685: LD_INT 4
65687: NEG
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 0
65695: PUSH
65696: LD_INT 5
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 1
65706: PUSH
65707: LD_INT 4
65709: NEG
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 1
65717: PUSH
65718: LD_INT 3
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 0
65728: PUSH
65729: LD_INT 3
65731: NEG
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 1
65739: NEG
65740: PUSH
65741: LD_INT 4
65743: NEG
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 1
65751: NEG
65752: PUSH
65753: LD_INT 5
65755: NEG
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 2
65763: PUSH
65764: LD_INT 3
65766: NEG
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 2
65774: NEG
65775: PUSH
65776: LD_INT 5
65778: NEG
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 3
65786: PUSH
65787: LD_INT 0
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 3
65796: PUSH
65797: LD_INT 1
65799: NEG
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 4
65807: PUSH
65808: LD_INT 0
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 4
65817: PUSH
65818: LD_INT 1
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 3
65827: PUSH
65828: LD_INT 1
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 2
65837: PUSH
65838: LD_INT 0
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 2
65847: PUSH
65848: LD_INT 1
65850: NEG
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 2
65858: PUSH
65859: LD_INT 2
65861: NEG
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 4
65869: PUSH
65870: LD_INT 2
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 4
65879: PUSH
65880: LD_INT 4
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 4
65889: PUSH
65890: LD_INT 3
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 5
65899: PUSH
65900: LD_INT 4
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 5
65909: PUSH
65910: LD_INT 5
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 4
65919: PUSH
65920: LD_INT 5
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 3
65929: PUSH
65930: LD_INT 4
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 3
65939: PUSH
65940: LD_INT 3
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 5
65949: PUSH
65950: LD_INT 3
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 3
65959: PUSH
65960: LD_INT 5
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66014: LD_ADDR_VAR 0 33
66018: PUSH
66019: LD_INT 4
66021: NEG
66022: PUSH
66023: LD_INT 4
66025: NEG
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 4
66033: NEG
66034: PUSH
66035: LD_INT 5
66037: NEG
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 3
66045: NEG
66046: PUSH
66047: LD_INT 4
66049: NEG
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 3
66057: NEG
66058: PUSH
66059: LD_INT 3
66061: NEG
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 4
66069: NEG
66070: PUSH
66071: LD_INT 3
66073: NEG
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 5
66081: NEG
66082: PUSH
66083: LD_INT 4
66085: NEG
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 5
66093: NEG
66094: PUSH
66095: LD_INT 5
66097: NEG
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 3
66105: NEG
66106: PUSH
66107: LD_INT 5
66109: NEG
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 5
66117: NEG
66118: PUSH
66119: LD_INT 3
66121: NEG
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 0
66129: PUSH
66130: LD_INT 3
66132: NEG
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 0
66140: PUSH
66141: LD_INT 4
66143: NEG
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 1
66151: PUSH
66152: LD_INT 3
66154: NEG
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 1
66162: PUSH
66163: LD_INT 2
66165: NEG
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 0
66173: PUSH
66174: LD_INT 2
66176: NEG
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 1
66184: NEG
66185: PUSH
66186: LD_INT 3
66188: NEG
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 1
66196: NEG
66197: PUSH
66198: LD_INT 4
66200: NEG
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 2
66208: PUSH
66209: LD_INT 2
66211: NEG
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 2
66219: NEG
66220: PUSH
66221: LD_INT 4
66223: NEG
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 4
66231: PUSH
66232: LD_INT 0
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 4
66241: PUSH
66242: LD_INT 1
66244: NEG
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 5
66252: PUSH
66253: LD_INT 0
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 5
66262: PUSH
66263: LD_INT 1
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 4
66272: PUSH
66273: LD_INT 1
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 3
66282: PUSH
66283: LD_INT 0
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 3
66292: PUSH
66293: LD_INT 1
66295: NEG
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 3
66303: PUSH
66304: LD_INT 2
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 5
66314: PUSH
66315: LD_INT 2
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 3
66324: PUSH
66325: LD_INT 3
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 3
66334: PUSH
66335: LD_INT 2
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 4
66344: PUSH
66345: LD_INT 3
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 4
66354: PUSH
66355: LD_INT 4
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 3
66364: PUSH
66365: LD_INT 4
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 2
66374: PUSH
66375: LD_INT 3
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 2
66384: PUSH
66385: LD_INT 2
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 4
66394: PUSH
66395: LD_INT 2
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 2
66404: PUSH
66405: LD_INT 4
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 0
66414: PUSH
66415: LD_INT 4
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 0
66424: PUSH
66425: LD_INT 3
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 1
66434: PUSH
66435: LD_INT 4
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 1
66444: PUSH
66445: LD_INT 5
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 0
66454: PUSH
66455: LD_INT 5
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 1
66464: NEG
66465: PUSH
66466: LD_INT 4
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 1
66475: NEG
66476: PUSH
66477: LD_INT 3
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 2
66486: PUSH
66487: LD_INT 5
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 2
66496: NEG
66497: PUSH
66498: LD_INT 3
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66552: LD_ADDR_VAR 0 34
66556: PUSH
66557: LD_INT 0
66559: PUSH
66560: LD_INT 4
66562: NEG
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 0
66570: PUSH
66571: LD_INT 5
66573: NEG
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 1
66581: PUSH
66582: LD_INT 4
66584: NEG
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 1
66592: PUSH
66593: LD_INT 3
66595: NEG
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 0
66603: PUSH
66604: LD_INT 3
66606: NEG
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 1
66614: NEG
66615: PUSH
66616: LD_INT 4
66618: NEG
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 1
66626: NEG
66627: PUSH
66628: LD_INT 5
66630: NEG
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 2
66638: PUSH
66639: LD_INT 3
66641: NEG
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 2
66649: NEG
66650: PUSH
66651: LD_INT 5
66653: NEG
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 3
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 3
66671: PUSH
66672: LD_INT 1
66674: NEG
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 4
66682: PUSH
66683: LD_INT 0
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 4
66692: PUSH
66693: LD_INT 1
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 3
66702: PUSH
66703: LD_INT 1
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 2
66712: PUSH
66713: LD_INT 0
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 2
66722: PUSH
66723: LD_INT 1
66725: NEG
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 2
66733: PUSH
66734: LD_INT 2
66736: NEG
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 4
66744: PUSH
66745: LD_INT 2
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 4
66754: PUSH
66755: LD_INT 4
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 4
66764: PUSH
66765: LD_INT 3
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 5
66774: PUSH
66775: LD_INT 4
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 5
66784: PUSH
66785: LD_INT 5
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 4
66794: PUSH
66795: LD_INT 5
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 3
66804: PUSH
66805: LD_INT 4
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 3
66814: PUSH
66815: LD_INT 3
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 5
66824: PUSH
66825: LD_INT 3
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 3
66834: PUSH
66835: LD_INT 5
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 0
66844: PUSH
66845: LD_INT 3
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: LD_INT 2
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 1
66864: PUSH
66865: LD_INT 3
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 1
66874: PUSH
66875: LD_INT 4
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 0
66884: PUSH
66885: LD_INT 4
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 1
66894: NEG
66895: PUSH
66896: LD_INT 3
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 1
66905: NEG
66906: PUSH
66907: LD_INT 2
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 2
66916: PUSH
66917: LD_INT 4
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 2
66926: NEG
66927: PUSH
66928: LD_INT 2
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 4
66937: NEG
66938: PUSH
66939: LD_INT 0
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 4
66948: NEG
66949: PUSH
66950: LD_INT 1
66952: NEG
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 3
66960: NEG
66961: PUSH
66962: LD_INT 0
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 3
66971: NEG
66972: PUSH
66973: LD_INT 1
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 4
66982: NEG
66983: PUSH
66984: LD_INT 1
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 5
66993: NEG
66994: PUSH
66995: LD_INT 0
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 5
67004: NEG
67005: PUSH
67006: LD_INT 1
67008: NEG
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: LD_INT 5
67016: NEG
67017: PUSH
67018: LD_INT 2
67020: NEG
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 3
67028: NEG
67029: PUSH
67030: LD_INT 2
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: ST_TO_ADDR
// end ; end ;
67084: GO 67087
67086: POP
// case btype of b_depot , b_warehouse :
67087: LD_VAR 0 1
67091: PUSH
67092: LD_INT 0
67094: DOUBLE
67095: EQUAL
67096: IFTRUE 67106
67098: LD_INT 1
67100: DOUBLE
67101: EQUAL
67102: IFTRUE 67106
67104: GO 67307
67106: POP
// case nation of nation_american :
67107: LD_VAR 0 5
67111: PUSH
67112: LD_INT 1
67114: DOUBLE
67115: EQUAL
67116: IFTRUE 67120
67118: GO 67176
67120: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67121: LD_ADDR_VAR 0 9
67125: PUSH
67126: LD_VAR 0 11
67130: PUSH
67131: LD_VAR 0 12
67135: PUSH
67136: LD_VAR 0 13
67140: PUSH
67141: LD_VAR 0 14
67145: PUSH
67146: LD_VAR 0 15
67150: PUSH
67151: LD_VAR 0 16
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: PUSH
67164: LD_VAR 0 4
67168: PUSH
67169: LD_INT 1
67171: PLUS
67172: ARRAY
67173: ST_TO_ADDR
67174: GO 67305
67176: LD_INT 2
67178: DOUBLE
67179: EQUAL
67180: IFTRUE 67184
67182: GO 67240
67184: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67185: LD_ADDR_VAR 0 9
67189: PUSH
67190: LD_VAR 0 17
67194: PUSH
67195: LD_VAR 0 18
67199: PUSH
67200: LD_VAR 0 19
67204: PUSH
67205: LD_VAR 0 20
67209: PUSH
67210: LD_VAR 0 21
67214: PUSH
67215: LD_VAR 0 22
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: PUSH
67228: LD_VAR 0 4
67232: PUSH
67233: LD_INT 1
67235: PLUS
67236: ARRAY
67237: ST_TO_ADDR
67238: GO 67305
67240: LD_INT 3
67242: DOUBLE
67243: EQUAL
67244: IFTRUE 67248
67246: GO 67304
67248: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67249: LD_ADDR_VAR 0 9
67253: PUSH
67254: LD_VAR 0 23
67258: PUSH
67259: LD_VAR 0 24
67263: PUSH
67264: LD_VAR 0 25
67268: PUSH
67269: LD_VAR 0 26
67273: PUSH
67274: LD_VAR 0 27
67278: PUSH
67279: LD_VAR 0 28
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: PUSH
67292: LD_VAR 0 4
67296: PUSH
67297: LD_INT 1
67299: PLUS
67300: ARRAY
67301: ST_TO_ADDR
67302: GO 67305
67304: POP
67305: GO 67860
67307: LD_INT 2
67309: DOUBLE
67310: EQUAL
67311: IFTRUE 67321
67313: LD_INT 3
67315: DOUBLE
67316: EQUAL
67317: IFTRUE 67321
67319: GO 67377
67321: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67322: LD_ADDR_VAR 0 9
67326: PUSH
67327: LD_VAR 0 29
67331: PUSH
67332: LD_VAR 0 30
67336: PUSH
67337: LD_VAR 0 31
67341: PUSH
67342: LD_VAR 0 32
67346: PUSH
67347: LD_VAR 0 33
67351: PUSH
67352: LD_VAR 0 34
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: PUSH
67365: LD_VAR 0 4
67369: PUSH
67370: LD_INT 1
67372: PLUS
67373: ARRAY
67374: ST_TO_ADDR
67375: GO 67860
67377: LD_INT 16
67379: DOUBLE
67380: EQUAL
67381: IFTRUE 67439
67383: LD_INT 17
67385: DOUBLE
67386: EQUAL
67387: IFTRUE 67439
67389: LD_INT 18
67391: DOUBLE
67392: EQUAL
67393: IFTRUE 67439
67395: LD_INT 19
67397: DOUBLE
67398: EQUAL
67399: IFTRUE 67439
67401: LD_INT 22
67403: DOUBLE
67404: EQUAL
67405: IFTRUE 67439
67407: LD_INT 20
67409: DOUBLE
67410: EQUAL
67411: IFTRUE 67439
67413: LD_INT 21
67415: DOUBLE
67416: EQUAL
67417: IFTRUE 67439
67419: LD_INT 23
67421: DOUBLE
67422: EQUAL
67423: IFTRUE 67439
67425: LD_INT 24
67427: DOUBLE
67428: EQUAL
67429: IFTRUE 67439
67431: LD_INT 25
67433: DOUBLE
67434: EQUAL
67435: IFTRUE 67439
67437: GO 67495
67439: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67440: LD_ADDR_VAR 0 9
67444: PUSH
67445: LD_VAR 0 35
67449: PUSH
67450: LD_VAR 0 36
67454: PUSH
67455: LD_VAR 0 37
67459: PUSH
67460: LD_VAR 0 38
67464: PUSH
67465: LD_VAR 0 39
67469: PUSH
67470: LD_VAR 0 40
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: PUSH
67483: LD_VAR 0 4
67487: PUSH
67488: LD_INT 1
67490: PLUS
67491: ARRAY
67492: ST_TO_ADDR
67493: GO 67860
67495: LD_INT 6
67497: DOUBLE
67498: EQUAL
67499: IFTRUE 67551
67501: LD_INT 7
67503: DOUBLE
67504: EQUAL
67505: IFTRUE 67551
67507: LD_INT 8
67509: DOUBLE
67510: EQUAL
67511: IFTRUE 67551
67513: LD_INT 13
67515: DOUBLE
67516: EQUAL
67517: IFTRUE 67551
67519: LD_INT 12
67521: DOUBLE
67522: EQUAL
67523: IFTRUE 67551
67525: LD_INT 15
67527: DOUBLE
67528: EQUAL
67529: IFTRUE 67551
67531: LD_INT 11
67533: DOUBLE
67534: EQUAL
67535: IFTRUE 67551
67537: LD_INT 14
67539: DOUBLE
67540: EQUAL
67541: IFTRUE 67551
67543: LD_INT 10
67545: DOUBLE
67546: EQUAL
67547: IFTRUE 67551
67549: GO 67607
67551: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67552: LD_ADDR_VAR 0 9
67556: PUSH
67557: LD_VAR 0 41
67561: PUSH
67562: LD_VAR 0 42
67566: PUSH
67567: LD_VAR 0 43
67571: PUSH
67572: LD_VAR 0 44
67576: PUSH
67577: LD_VAR 0 45
67581: PUSH
67582: LD_VAR 0 46
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: PUSH
67595: LD_VAR 0 4
67599: PUSH
67600: LD_INT 1
67602: PLUS
67603: ARRAY
67604: ST_TO_ADDR
67605: GO 67860
67607: LD_INT 36
67609: DOUBLE
67610: EQUAL
67611: IFTRUE 67615
67613: GO 67671
67615: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67616: LD_ADDR_VAR 0 9
67620: PUSH
67621: LD_VAR 0 47
67625: PUSH
67626: LD_VAR 0 48
67630: PUSH
67631: LD_VAR 0 49
67635: PUSH
67636: LD_VAR 0 50
67640: PUSH
67641: LD_VAR 0 51
67645: PUSH
67646: LD_VAR 0 52
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: PUSH
67659: LD_VAR 0 4
67663: PUSH
67664: LD_INT 1
67666: PLUS
67667: ARRAY
67668: ST_TO_ADDR
67669: GO 67860
67671: LD_INT 4
67673: DOUBLE
67674: EQUAL
67675: IFTRUE 67697
67677: LD_INT 5
67679: DOUBLE
67680: EQUAL
67681: IFTRUE 67697
67683: LD_INT 34
67685: DOUBLE
67686: EQUAL
67687: IFTRUE 67697
67689: LD_INT 37
67691: DOUBLE
67692: EQUAL
67693: IFTRUE 67697
67695: GO 67753
67697: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67698: LD_ADDR_VAR 0 9
67702: PUSH
67703: LD_VAR 0 53
67707: PUSH
67708: LD_VAR 0 54
67712: PUSH
67713: LD_VAR 0 55
67717: PUSH
67718: LD_VAR 0 56
67722: PUSH
67723: LD_VAR 0 57
67727: PUSH
67728: LD_VAR 0 58
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: PUSH
67741: LD_VAR 0 4
67745: PUSH
67746: LD_INT 1
67748: PLUS
67749: ARRAY
67750: ST_TO_ADDR
67751: GO 67860
67753: LD_INT 31
67755: DOUBLE
67756: EQUAL
67757: IFTRUE 67803
67759: LD_INT 32
67761: DOUBLE
67762: EQUAL
67763: IFTRUE 67803
67765: LD_INT 33
67767: DOUBLE
67768: EQUAL
67769: IFTRUE 67803
67771: LD_INT 27
67773: DOUBLE
67774: EQUAL
67775: IFTRUE 67803
67777: LD_INT 26
67779: DOUBLE
67780: EQUAL
67781: IFTRUE 67803
67783: LD_INT 28
67785: DOUBLE
67786: EQUAL
67787: IFTRUE 67803
67789: LD_INT 29
67791: DOUBLE
67792: EQUAL
67793: IFTRUE 67803
67795: LD_INT 30
67797: DOUBLE
67798: EQUAL
67799: IFTRUE 67803
67801: GO 67859
67803: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67804: LD_ADDR_VAR 0 9
67808: PUSH
67809: LD_VAR 0 59
67813: PUSH
67814: LD_VAR 0 60
67818: PUSH
67819: LD_VAR 0 61
67823: PUSH
67824: LD_VAR 0 62
67828: PUSH
67829: LD_VAR 0 63
67833: PUSH
67834: LD_VAR 0 64
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: PUSH
67847: LD_VAR 0 4
67851: PUSH
67852: LD_INT 1
67854: PLUS
67855: ARRAY
67856: ST_TO_ADDR
67857: GO 67860
67859: POP
// temp_list2 = [ ] ;
67860: LD_ADDR_VAR 0 10
67864: PUSH
67865: EMPTY
67866: ST_TO_ADDR
// for i in temp_list do
67867: LD_ADDR_VAR 0 8
67871: PUSH
67872: LD_VAR 0 9
67876: PUSH
67877: FOR_IN
67878: IFFALSE 67930
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67880: LD_ADDR_VAR 0 10
67884: PUSH
67885: LD_VAR 0 10
67889: PUSH
67890: LD_VAR 0 8
67894: PUSH
67895: LD_INT 1
67897: ARRAY
67898: PUSH
67899: LD_VAR 0 2
67903: PLUS
67904: PUSH
67905: LD_VAR 0 8
67909: PUSH
67910: LD_INT 2
67912: ARRAY
67913: PUSH
67914: LD_VAR 0 3
67918: PLUS
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: EMPTY
67925: LIST
67926: ADD
67927: ST_TO_ADDR
67928: GO 67877
67930: POP
67931: POP
// result = temp_list2 ;
67932: LD_ADDR_VAR 0 7
67936: PUSH
67937: LD_VAR 0 10
67941: ST_TO_ADDR
// end ;
67942: LD_VAR 0 7
67946: RET
// export function EnemyInRange ( unit , dist ) ; begin
67947: LD_INT 0
67949: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67950: LD_ADDR_VAR 0 3
67954: PUSH
67955: LD_VAR 0 1
67959: PPUSH
67960: CALL_OW 255
67964: PPUSH
67965: LD_VAR 0 1
67969: PPUSH
67970: CALL_OW 250
67974: PPUSH
67975: LD_VAR 0 1
67979: PPUSH
67980: CALL_OW 251
67984: PPUSH
67985: LD_VAR 0 2
67989: PPUSH
67990: CALL 41718 0 4
67994: PUSH
67995: LD_INT 4
67997: ARRAY
67998: ST_TO_ADDR
// end ;
67999: LD_VAR 0 3
68003: RET
// export function PlayerSeeMe ( unit ) ; begin
68004: LD_INT 0
68006: PPUSH
// result := See ( your_side , unit ) ;
68007: LD_ADDR_VAR 0 2
68011: PUSH
68012: LD_OWVAR 2
68016: PPUSH
68017: LD_VAR 0 1
68021: PPUSH
68022: CALL_OW 292
68026: ST_TO_ADDR
// end ;
68027: LD_VAR 0 2
68031: RET
// export function ReverseDir ( unit ) ; begin
68032: LD_INT 0
68034: PPUSH
// if not unit then
68035: LD_VAR 0 1
68039: NOT
68040: IFFALSE 68044
// exit ;
68042: GO 68067
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68044: LD_ADDR_VAR 0 2
68048: PUSH
68049: LD_VAR 0 1
68053: PPUSH
68054: CALL_OW 254
68058: PUSH
68059: LD_INT 3
68061: PLUS
68062: PUSH
68063: LD_INT 6
68065: MOD
68066: ST_TO_ADDR
// end ;
68067: LD_VAR 0 2
68071: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68072: LD_INT 0
68074: PPUSH
68075: PPUSH
68076: PPUSH
68077: PPUSH
68078: PPUSH
// if not hexes then
68079: LD_VAR 0 2
68083: NOT
68084: IFFALSE 68088
// exit ;
68086: GO 68236
// dist := 9999 ;
68088: LD_ADDR_VAR 0 5
68092: PUSH
68093: LD_INT 9999
68095: ST_TO_ADDR
// for i = 1 to hexes do
68096: LD_ADDR_VAR 0 4
68100: PUSH
68101: DOUBLE
68102: LD_INT 1
68104: DEC
68105: ST_TO_ADDR
68106: LD_VAR 0 2
68110: PUSH
68111: FOR_TO
68112: IFFALSE 68224
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68114: LD_VAR 0 1
68118: PPUSH
68119: LD_VAR 0 2
68123: PUSH
68124: LD_VAR 0 4
68128: ARRAY
68129: PUSH
68130: LD_INT 1
68132: ARRAY
68133: PPUSH
68134: LD_VAR 0 2
68138: PUSH
68139: LD_VAR 0 4
68143: ARRAY
68144: PUSH
68145: LD_INT 2
68147: ARRAY
68148: PPUSH
68149: CALL_OW 297
68153: PUSH
68154: LD_VAR 0 5
68158: LESS
68159: IFFALSE 68222
// begin hex := hexes [ i ] ;
68161: LD_ADDR_VAR 0 7
68165: PUSH
68166: LD_VAR 0 2
68170: PUSH
68171: LD_VAR 0 4
68175: ARRAY
68176: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68177: LD_ADDR_VAR 0 5
68181: PUSH
68182: LD_VAR 0 1
68186: PPUSH
68187: LD_VAR 0 2
68191: PUSH
68192: LD_VAR 0 4
68196: ARRAY
68197: PUSH
68198: LD_INT 1
68200: ARRAY
68201: PPUSH
68202: LD_VAR 0 2
68206: PUSH
68207: LD_VAR 0 4
68211: ARRAY
68212: PUSH
68213: LD_INT 2
68215: ARRAY
68216: PPUSH
68217: CALL_OW 297
68221: ST_TO_ADDR
// end ; end ;
68222: GO 68111
68224: POP
68225: POP
// result := hex ;
68226: LD_ADDR_VAR 0 3
68230: PUSH
68231: LD_VAR 0 7
68235: ST_TO_ADDR
// end ;
68236: LD_VAR 0 3
68240: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68241: LD_INT 0
68243: PPUSH
68244: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68245: LD_VAR 0 1
68249: NOT
68250: PUSH
68251: LD_VAR 0 1
68255: PUSH
68256: LD_INT 21
68258: PUSH
68259: LD_INT 2
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 23
68268: PUSH
68269: LD_INT 2
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PPUSH
68280: CALL_OW 69
68284: IN
68285: NOT
68286: OR
68287: IFFALSE 68291
// exit ;
68289: GO 68338
// for i = 1 to 3 do
68291: LD_ADDR_VAR 0 3
68295: PUSH
68296: DOUBLE
68297: LD_INT 1
68299: DEC
68300: ST_TO_ADDR
68301: LD_INT 3
68303: PUSH
68304: FOR_TO
68305: IFFALSE 68336
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68307: LD_VAR 0 1
68311: PPUSH
68312: CALL_OW 250
68316: PPUSH
68317: LD_VAR 0 1
68321: PPUSH
68322: CALL_OW 251
68326: PPUSH
68327: LD_INT 1
68329: PPUSH
68330: CALL_OW 453
68334: GO 68304
68336: POP
68337: POP
// end ;
68338: LD_VAR 0 2
68342: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68343: LD_INT 0
68345: PPUSH
68346: PPUSH
68347: PPUSH
68348: PPUSH
68349: PPUSH
68350: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68351: LD_VAR 0 1
68355: NOT
68356: PUSH
68357: LD_VAR 0 2
68361: NOT
68362: OR
68363: PUSH
68364: LD_VAR 0 1
68368: PPUSH
68369: CALL_OW 314
68373: OR
68374: IFFALSE 68378
// exit ;
68376: GO 68819
// x := GetX ( enemy_unit ) ;
68378: LD_ADDR_VAR 0 7
68382: PUSH
68383: LD_VAR 0 2
68387: PPUSH
68388: CALL_OW 250
68392: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68393: LD_ADDR_VAR 0 8
68397: PUSH
68398: LD_VAR 0 2
68402: PPUSH
68403: CALL_OW 251
68407: ST_TO_ADDR
// if not x or not y then
68408: LD_VAR 0 7
68412: NOT
68413: PUSH
68414: LD_VAR 0 8
68418: NOT
68419: OR
68420: IFFALSE 68424
// exit ;
68422: GO 68819
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68424: LD_ADDR_VAR 0 6
68428: PUSH
68429: LD_VAR 0 7
68433: PPUSH
68434: LD_INT 0
68436: PPUSH
68437: LD_INT 4
68439: PPUSH
68440: CALL_OW 272
68444: PUSH
68445: LD_VAR 0 8
68449: PPUSH
68450: LD_INT 0
68452: PPUSH
68453: LD_INT 4
68455: PPUSH
68456: CALL_OW 273
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_VAR 0 7
68469: PPUSH
68470: LD_INT 1
68472: PPUSH
68473: LD_INT 4
68475: PPUSH
68476: CALL_OW 272
68480: PUSH
68481: LD_VAR 0 8
68485: PPUSH
68486: LD_INT 1
68488: PPUSH
68489: LD_INT 4
68491: PPUSH
68492: CALL_OW 273
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_VAR 0 7
68505: PPUSH
68506: LD_INT 2
68508: PPUSH
68509: LD_INT 4
68511: PPUSH
68512: CALL_OW 272
68516: PUSH
68517: LD_VAR 0 8
68521: PPUSH
68522: LD_INT 2
68524: PPUSH
68525: LD_INT 4
68527: PPUSH
68528: CALL_OW 273
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_VAR 0 7
68541: PPUSH
68542: LD_INT 3
68544: PPUSH
68545: LD_INT 4
68547: PPUSH
68548: CALL_OW 272
68552: PUSH
68553: LD_VAR 0 8
68557: PPUSH
68558: LD_INT 3
68560: PPUSH
68561: LD_INT 4
68563: PPUSH
68564: CALL_OW 273
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_VAR 0 7
68577: PPUSH
68578: LD_INT 4
68580: PPUSH
68581: LD_INT 4
68583: PPUSH
68584: CALL_OW 272
68588: PUSH
68589: LD_VAR 0 8
68593: PPUSH
68594: LD_INT 4
68596: PPUSH
68597: LD_INT 4
68599: PPUSH
68600: CALL_OW 273
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_VAR 0 7
68613: PPUSH
68614: LD_INT 5
68616: PPUSH
68617: LD_INT 4
68619: PPUSH
68620: CALL_OW 272
68624: PUSH
68625: LD_VAR 0 8
68629: PPUSH
68630: LD_INT 5
68632: PPUSH
68633: LD_INT 4
68635: PPUSH
68636: CALL_OW 273
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: ST_TO_ADDR
// for i = tmp downto 1 do
68653: LD_ADDR_VAR 0 4
68657: PUSH
68658: DOUBLE
68659: LD_VAR 0 6
68663: INC
68664: ST_TO_ADDR
68665: LD_INT 1
68667: PUSH
68668: FOR_DOWNTO
68669: IFFALSE 68770
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68671: LD_VAR 0 6
68675: PUSH
68676: LD_VAR 0 4
68680: ARRAY
68681: PUSH
68682: LD_INT 1
68684: ARRAY
68685: PPUSH
68686: LD_VAR 0 6
68690: PUSH
68691: LD_VAR 0 4
68695: ARRAY
68696: PUSH
68697: LD_INT 2
68699: ARRAY
68700: PPUSH
68701: CALL_OW 488
68705: NOT
68706: PUSH
68707: LD_VAR 0 6
68711: PUSH
68712: LD_VAR 0 4
68716: ARRAY
68717: PUSH
68718: LD_INT 1
68720: ARRAY
68721: PPUSH
68722: LD_VAR 0 6
68726: PUSH
68727: LD_VAR 0 4
68731: ARRAY
68732: PUSH
68733: LD_INT 2
68735: ARRAY
68736: PPUSH
68737: CALL_OW 428
68741: PUSH
68742: LD_INT 0
68744: NONEQUAL
68745: OR
68746: IFFALSE 68768
// tmp := Delete ( tmp , i ) ;
68748: LD_ADDR_VAR 0 6
68752: PUSH
68753: LD_VAR 0 6
68757: PPUSH
68758: LD_VAR 0 4
68762: PPUSH
68763: CALL_OW 3
68767: ST_TO_ADDR
68768: GO 68668
68770: POP
68771: POP
// j := GetClosestHex ( unit , tmp ) ;
68772: LD_ADDR_VAR 0 5
68776: PUSH
68777: LD_VAR 0 1
68781: PPUSH
68782: LD_VAR 0 6
68786: PPUSH
68787: CALL 68072 0 2
68791: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68792: LD_VAR 0 1
68796: PPUSH
68797: LD_VAR 0 5
68801: PUSH
68802: LD_INT 1
68804: ARRAY
68805: PPUSH
68806: LD_VAR 0 5
68810: PUSH
68811: LD_INT 2
68813: ARRAY
68814: PPUSH
68815: CALL_OW 111
// end ;
68819: LD_VAR 0 3
68823: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68824: LD_INT 0
68826: PPUSH
68827: PPUSH
68828: PPUSH
// uc_side = 0 ;
68829: LD_ADDR_OWVAR 20
68833: PUSH
68834: LD_INT 0
68836: ST_TO_ADDR
// uc_nation = 0 ;
68837: LD_ADDR_OWVAR 21
68841: PUSH
68842: LD_INT 0
68844: ST_TO_ADDR
// InitHc_All ( ) ;
68845: CALL_OW 584
// InitVc ;
68849: CALL_OW 20
// if mastodonts then
68853: LD_VAR 0 6
68857: IFFALSE 68924
// for i = 1 to mastodonts do
68859: LD_ADDR_VAR 0 11
68863: PUSH
68864: DOUBLE
68865: LD_INT 1
68867: DEC
68868: ST_TO_ADDR
68869: LD_VAR 0 6
68873: PUSH
68874: FOR_TO
68875: IFFALSE 68922
// begin vc_chassis := 31 ;
68877: LD_ADDR_OWVAR 37
68881: PUSH
68882: LD_INT 31
68884: ST_TO_ADDR
// vc_control := control_rider ;
68885: LD_ADDR_OWVAR 38
68889: PUSH
68890: LD_INT 4
68892: ST_TO_ADDR
// animal := CreateVehicle ;
68893: LD_ADDR_VAR 0 12
68897: PUSH
68898: CALL_OW 45
68902: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68903: LD_VAR 0 12
68907: PPUSH
68908: LD_VAR 0 8
68912: PPUSH
68913: LD_INT 0
68915: PPUSH
68916: CALL 71112 0 3
// end ;
68920: GO 68874
68922: POP
68923: POP
// if horses then
68924: LD_VAR 0 5
68928: IFFALSE 68995
// for i = 1 to horses do
68930: LD_ADDR_VAR 0 11
68934: PUSH
68935: DOUBLE
68936: LD_INT 1
68938: DEC
68939: ST_TO_ADDR
68940: LD_VAR 0 5
68944: PUSH
68945: FOR_TO
68946: IFFALSE 68993
// begin hc_class := 21 ;
68948: LD_ADDR_OWVAR 28
68952: PUSH
68953: LD_INT 21
68955: ST_TO_ADDR
// hc_gallery :=  ;
68956: LD_ADDR_OWVAR 33
68960: PUSH
68961: LD_STRING 
68963: ST_TO_ADDR
// animal := CreateHuman ;
68964: LD_ADDR_VAR 0 12
68968: PUSH
68969: CALL_OW 44
68973: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68974: LD_VAR 0 12
68978: PPUSH
68979: LD_VAR 0 8
68983: PPUSH
68984: LD_INT 0
68986: PPUSH
68987: CALL 71112 0 3
// end ;
68991: GO 68945
68993: POP
68994: POP
// if birds then
68995: LD_VAR 0 1
68999: IFFALSE 69066
// for i = 1 to birds do
69001: LD_ADDR_VAR 0 11
69005: PUSH
69006: DOUBLE
69007: LD_INT 1
69009: DEC
69010: ST_TO_ADDR
69011: LD_VAR 0 1
69015: PUSH
69016: FOR_TO
69017: IFFALSE 69064
// begin hc_class = 18 ;
69019: LD_ADDR_OWVAR 28
69023: PUSH
69024: LD_INT 18
69026: ST_TO_ADDR
// hc_gallery =  ;
69027: LD_ADDR_OWVAR 33
69031: PUSH
69032: LD_STRING 
69034: ST_TO_ADDR
// animal := CreateHuman ;
69035: LD_ADDR_VAR 0 12
69039: PUSH
69040: CALL_OW 44
69044: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69045: LD_VAR 0 12
69049: PPUSH
69050: LD_VAR 0 8
69054: PPUSH
69055: LD_INT 0
69057: PPUSH
69058: CALL 71112 0 3
// end ;
69062: GO 69016
69064: POP
69065: POP
// if tigers then
69066: LD_VAR 0 2
69070: IFFALSE 69154
// for i = 1 to tigers do
69072: LD_ADDR_VAR 0 11
69076: PUSH
69077: DOUBLE
69078: LD_INT 1
69080: DEC
69081: ST_TO_ADDR
69082: LD_VAR 0 2
69086: PUSH
69087: FOR_TO
69088: IFFALSE 69152
// begin hc_class = class_tiger ;
69090: LD_ADDR_OWVAR 28
69094: PUSH
69095: LD_INT 14
69097: ST_TO_ADDR
// hc_gallery =  ;
69098: LD_ADDR_OWVAR 33
69102: PUSH
69103: LD_STRING 
69105: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69106: LD_ADDR_OWVAR 35
69110: PUSH
69111: LD_INT 7
69113: NEG
69114: PPUSH
69115: LD_INT 7
69117: PPUSH
69118: CALL_OW 12
69122: ST_TO_ADDR
// animal := CreateHuman ;
69123: LD_ADDR_VAR 0 12
69127: PUSH
69128: CALL_OW 44
69132: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69133: LD_VAR 0 12
69137: PPUSH
69138: LD_VAR 0 8
69142: PPUSH
69143: LD_INT 0
69145: PPUSH
69146: CALL 71112 0 3
// end ;
69150: GO 69087
69152: POP
69153: POP
// if apemans then
69154: LD_VAR 0 3
69158: IFFALSE 69281
// for i = 1 to apemans do
69160: LD_ADDR_VAR 0 11
69164: PUSH
69165: DOUBLE
69166: LD_INT 1
69168: DEC
69169: ST_TO_ADDR
69170: LD_VAR 0 3
69174: PUSH
69175: FOR_TO
69176: IFFALSE 69279
// begin hc_class = class_apeman ;
69178: LD_ADDR_OWVAR 28
69182: PUSH
69183: LD_INT 12
69185: ST_TO_ADDR
// hc_gallery =  ;
69186: LD_ADDR_OWVAR 33
69190: PUSH
69191: LD_STRING 
69193: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
69194: LD_ADDR_OWVAR 35
69198: PUSH
69199: LD_INT 5
69201: NEG
69202: PPUSH
69203: LD_INT 5
69205: PPUSH
69206: CALL_OW 12
69210: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69211: LD_ADDR_OWVAR 31
69215: PUSH
69216: LD_INT 1
69218: PPUSH
69219: LD_INT 3
69221: PPUSH
69222: CALL_OW 12
69226: PUSH
69227: LD_INT 1
69229: PPUSH
69230: LD_INT 3
69232: PPUSH
69233: CALL_OW 12
69237: PUSH
69238: LD_INT 0
69240: PUSH
69241: LD_INT 0
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: ST_TO_ADDR
// animal := CreateHuman ;
69250: LD_ADDR_VAR 0 12
69254: PUSH
69255: CALL_OW 44
69259: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69260: LD_VAR 0 12
69264: PPUSH
69265: LD_VAR 0 8
69269: PPUSH
69270: LD_INT 0
69272: PPUSH
69273: CALL 71112 0 3
// end ;
69277: GO 69175
69279: POP
69280: POP
// if enchidnas then
69281: LD_VAR 0 4
69285: IFFALSE 69352
// for i = 1 to enchidnas do
69287: LD_ADDR_VAR 0 11
69291: PUSH
69292: DOUBLE
69293: LD_INT 1
69295: DEC
69296: ST_TO_ADDR
69297: LD_VAR 0 4
69301: PUSH
69302: FOR_TO
69303: IFFALSE 69350
// begin hc_class = 13 ;
69305: LD_ADDR_OWVAR 28
69309: PUSH
69310: LD_INT 13
69312: ST_TO_ADDR
// hc_gallery =  ;
69313: LD_ADDR_OWVAR 33
69317: PUSH
69318: LD_STRING 
69320: ST_TO_ADDR
// animal := CreateHuman ;
69321: LD_ADDR_VAR 0 12
69325: PUSH
69326: CALL_OW 44
69330: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69331: LD_VAR 0 12
69335: PPUSH
69336: LD_VAR 0 8
69340: PPUSH
69341: LD_INT 0
69343: PPUSH
69344: CALL 71112 0 3
// end ;
69348: GO 69302
69350: POP
69351: POP
// if fishes then
69352: LD_VAR 0 7
69356: IFFALSE 69423
// for i = 1 to fishes do
69358: LD_ADDR_VAR 0 11
69362: PUSH
69363: DOUBLE
69364: LD_INT 1
69366: DEC
69367: ST_TO_ADDR
69368: LD_VAR 0 7
69372: PUSH
69373: FOR_TO
69374: IFFALSE 69421
// begin hc_class = 20 ;
69376: LD_ADDR_OWVAR 28
69380: PUSH
69381: LD_INT 20
69383: ST_TO_ADDR
// hc_gallery =  ;
69384: LD_ADDR_OWVAR 33
69388: PUSH
69389: LD_STRING 
69391: ST_TO_ADDR
// animal := CreateHuman ;
69392: LD_ADDR_VAR 0 12
69396: PUSH
69397: CALL_OW 44
69401: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69402: LD_VAR 0 12
69406: PPUSH
69407: LD_VAR 0 9
69411: PPUSH
69412: LD_INT 0
69414: PPUSH
69415: CALL 71112 0 3
// end ;
69419: GO 69373
69421: POP
69422: POP
// end ;
69423: LD_VAR 0 10
69427: RET
// export function WantHeal ( sci , unit ) ; begin
69428: LD_INT 0
69430: PPUSH
// if GetTaskList ( sci ) > 0 then
69431: LD_VAR 0 1
69435: PPUSH
69436: CALL_OW 437
69440: PUSH
69441: LD_INT 0
69443: GREATER
69444: IFFALSE 69514
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69446: LD_VAR 0 1
69450: PPUSH
69451: CALL_OW 437
69455: PUSH
69456: LD_INT 1
69458: ARRAY
69459: PUSH
69460: LD_INT 1
69462: ARRAY
69463: PUSH
69464: LD_STRING l
69466: EQUAL
69467: PUSH
69468: LD_VAR 0 1
69472: PPUSH
69473: CALL_OW 437
69477: PUSH
69478: LD_INT 1
69480: ARRAY
69481: PUSH
69482: LD_INT 4
69484: ARRAY
69485: PUSH
69486: LD_VAR 0 2
69490: EQUAL
69491: AND
69492: IFFALSE 69504
// result := true else
69494: LD_ADDR_VAR 0 3
69498: PUSH
69499: LD_INT 1
69501: ST_TO_ADDR
69502: GO 69512
// result := false ;
69504: LD_ADDR_VAR 0 3
69508: PUSH
69509: LD_INT 0
69511: ST_TO_ADDR
// end else
69512: GO 69522
// result := false ;
69514: LD_ADDR_VAR 0 3
69518: PUSH
69519: LD_INT 0
69521: ST_TO_ADDR
// end ;
69522: LD_VAR 0 3
69526: RET
// export function HealTarget ( sci ) ; begin
69527: LD_INT 0
69529: PPUSH
// if not sci then
69530: LD_VAR 0 1
69534: NOT
69535: IFFALSE 69539
// exit ;
69537: GO 69604
// result := 0 ;
69539: LD_ADDR_VAR 0 2
69543: PUSH
69544: LD_INT 0
69546: ST_TO_ADDR
// if GetTaskList ( sci ) then
69547: LD_VAR 0 1
69551: PPUSH
69552: CALL_OW 437
69556: IFFALSE 69604
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69558: LD_VAR 0 1
69562: PPUSH
69563: CALL_OW 437
69567: PUSH
69568: LD_INT 1
69570: ARRAY
69571: PUSH
69572: LD_INT 1
69574: ARRAY
69575: PUSH
69576: LD_STRING l
69578: EQUAL
69579: IFFALSE 69604
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69581: LD_ADDR_VAR 0 2
69585: PUSH
69586: LD_VAR 0 1
69590: PPUSH
69591: CALL_OW 437
69595: PUSH
69596: LD_INT 1
69598: ARRAY
69599: PUSH
69600: LD_INT 4
69602: ARRAY
69603: ST_TO_ADDR
// end ;
69604: LD_VAR 0 2
69608: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69609: LD_INT 0
69611: PPUSH
69612: PPUSH
69613: PPUSH
69614: PPUSH
// if not base_units then
69615: LD_VAR 0 1
69619: NOT
69620: IFFALSE 69624
// exit ;
69622: GO 69711
// result := false ;
69624: LD_ADDR_VAR 0 2
69628: PUSH
69629: LD_INT 0
69631: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69632: LD_ADDR_VAR 0 5
69636: PUSH
69637: LD_VAR 0 1
69641: PPUSH
69642: LD_INT 21
69644: PUSH
69645: LD_INT 3
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PPUSH
69652: CALL_OW 72
69656: ST_TO_ADDR
// if not tmp then
69657: LD_VAR 0 5
69661: NOT
69662: IFFALSE 69666
// exit ;
69664: GO 69711
// for i in tmp do
69666: LD_ADDR_VAR 0 3
69670: PUSH
69671: LD_VAR 0 5
69675: PUSH
69676: FOR_IN
69677: IFFALSE 69709
// begin result := EnemyInRange ( i , 22 ) ;
69679: LD_ADDR_VAR 0 2
69683: PUSH
69684: LD_VAR 0 3
69688: PPUSH
69689: LD_INT 22
69691: PPUSH
69692: CALL 67947 0 2
69696: ST_TO_ADDR
// if result then
69697: LD_VAR 0 2
69701: IFFALSE 69707
// exit ;
69703: POP
69704: POP
69705: GO 69711
// end ;
69707: GO 69676
69709: POP
69710: POP
// end ;
69711: LD_VAR 0 2
69715: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
69716: LD_INT 0
69718: PPUSH
69719: PPUSH
// if not units then
69720: LD_VAR 0 1
69724: NOT
69725: IFFALSE 69729
// exit ;
69727: GO 69799
// result := [ ] ;
69729: LD_ADDR_VAR 0 3
69733: PUSH
69734: EMPTY
69735: ST_TO_ADDR
// for i in units do
69736: LD_ADDR_VAR 0 4
69740: PUSH
69741: LD_VAR 0 1
69745: PUSH
69746: FOR_IN
69747: IFFALSE 69797
// if GetTag ( i ) = tag then
69749: LD_VAR 0 4
69753: PPUSH
69754: CALL_OW 110
69758: PUSH
69759: LD_VAR 0 2
69763: EQUAL
69764: IFFALSE 69795
// result := Insert ( result , result + 1 , i ) ;
69766: LD_ADDR_VAR 0 3
69770: PUSH
69771: LD_VAR 0 3
69775: PPUSH
69776: LD_VAR 0 3
69780: PUSH
69781: LD_INT 1
69783: PLUS
69784: PPUSH
69785: LD_VAR 0 4
69789: PPUSH
69790: CALL_OW 2
69794: ST_TO_ADDR
69795: GO 69746
69797: POP
69798: POP
// end ;
69799: LD_VAR 0 3
69803: RET
// export function IsDriver ( un ) ; begin
69804: LD_INT 0
69806: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69807: LD_ADDR_VAR 0 2
69811: PUSH
69812: LD_VAR 0 1
69816: PUSH
69817: LD_INT 55
69819: PUSH
69820: EMPTY
69821: LIST
69822: PPUSH
69823: CALL_OW 69
69827: IN
69828: ST_TO_ADDR
// end ;
69829: LD_VAR 0 2
69833: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69834: LD_INT 0
69836: PPUSH
69837: PPUSH
// list := [ ] ;
69838: LD_ADDR_VAR 0 5
69842: PUSH
69843: EMPTY
69844: ST_TO_ADDR
// case d of 0 :
69845: LD_VAR 0 3
69849: PUSH
69850: LD_INT 0
69852: DOUBLE
69853: EQUAL
69854: IFTRUE 69858
69856: GO 69991
69858: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69859: LD_ADDR_VAR 0 5
69863: PUSH
69864: LD_VAR 0 1
69868: PUSH
69869: LD_INT 4
69871: MINUS
69872: PUSH
69873: LD_VAR 0 2
69877: PUSH
69878: LD_INT 4
69880: MINUS
69881: PUSH
69882: LD_INT 2
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: LIST
69889: PUSH
69890: LD_VAR 0 1
69894: PUSH
69895: LD_INT 3
69897: MINUS
69898: PUSH
69899: LD_VAR 0 2
69903: PUSH
69904: LD_INT 1
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: LIST
69911: PUSH
69912: LD_VAR 0 1
69916: PUSH
69917: LD_INT 4
69919: PLUS
69920: PUSH
69921: LD_VAR 0 2
69925: PUSH
69926: LD_INT 4
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: LIST
69933: PUSH
69934: LD_VAR 0 1
69938: PUSH
69939: LD_INT 3
69941: PLUS
69942: PUSH
69943: LD_VAR 0 2
69947: PUSH
69948: LD_INT 3
69950: PLUS
69951: PUSH
69952: LD_INT 5
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: LIST
69959: PUSH
69960: LD_VAR 0 1
69964: PUSH
69965: LD_VAR 0 2
69969: PUSH
69970: LD_INT 4
69972: PLUS
69973: PUSH
69974: LD_INT 0
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: LIST
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: ST_TO_ADDR
// end ; 1 :
69989: GO 70689
69991: LD_INT 1
69993: DOUBLE
69994: EQUAL
69995: IFTRUE 69999
69997: GO 70132
69999: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70000: LD_ADDR_VAR 0 5
70004: PUSH
70005: LD_VAR 0 1
70009: PUSH
70010: LD_VAR 0 2
70014: PUSH
70015: LD_INT 4
70017: MINUS
70018: PUSH
70019: LD_INT 3
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: LIST
70026: PUSH
70027: LD_VAR 0 1
70031: PUSH
70032: LD_INT 3
70034: MINUS
70035: PUSH
70036: LD_VAR 0 2
70040: PUSH
70041: LD_INT 3
70043: MINUS
70044: PUSH
70045: LD_INT 2
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: LIST
70052: PUSH
70053: LD_VAR 0 1
70057: PUSH
70058: LD_INT 4
70060: MINUS
70061: PUSH
70062: LD_VAR 0 2
70066: PUSH
70067: LD_INT 1
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: LIST
70074: PUSH
70075: LD_VAR 0 1
70079: PUSH
70080: LD_VAR 0 2
70084: PUSH
70085: LD_INT 3
70087: PLUS
70088: PUSH
70089: LD_INT 0
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: LIST
70096: PUSH
70097: LD_VAR 0 1
70101: PUSH
70102: LD_INT 4
70104: PLUS
70105: PUSH
70106: LD_VAR 0 2
70110: PUSH
70111: LD_INT 4
70113: PLUS
70114: PUSH
70115: LD_INT 5
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: LIST
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: ST_TO_ADDR
// end ; 2 :
70130: GO 70689
70132: LD_INT 2
70134: DOUBLE
70135: EQUAL
70136: IFTRUE 70140
70138: GO 70269
70140: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70141: LD_ADDR_VAR 0 5
70145: PUSH
70146: LD_VAR 0 1
70150: PUSH
70151: LD_VAR 0 2
70155: PUSH
70156: LD_INT 3
70158: MINUS
70159: PUSH
70160: LD_INT 3
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: LIST
70167: PUSH
70168: LD_VAR 0 1
70172: PUSH
70173: LD_INT 4
70175: PLUS
70176: PUSH
70177: LD_VAR 0 2
70181: PUSH
70182: LD_INT 4
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: LIST
70189: PUSH
70190: LD_VAR 0 1
70194: PUSH
70195: LD_VAR 0 2
70199: PUSH
70200: LD_INT 4
70202: PLUS
70203: PUSH
70204: LD_INT 0
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: LIST
70211: PUSH
70212: LD_VAR 0 1
70216: PUSH
70217: LD_INT 3
70219: MINUS
70220: PUSH
70221: LD_VAR 0 2
70225: PUSH
70226: LD_INT 1
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: LIST
70233: PUSH
70234: LD_VAR 0 1
70238: PUSH
70239: LD_INT 4
70241: MINUS
70242: PUSH
70243: LD_VAR 0 2
70247: PUSH
70248: LD_INT 4
70250: MINUS
70251: PUSH
70252: LD_INT 2
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: LIST
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: ST_TO_ADDR
// end ; 3 :
70267: GO 70689
70269: LD_INT 3
70271: DOUBLE
70272: EQUAL
70273: IFTRUE 70277
70275: GO 70410
70277: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70278: LD_ADDR_VAR 0 5
70282: PUSH
70283: LD_VAR 0 1
70287: PUSH
70288: LD_INT 3
70290: PLUS
70291: PUSH
70292: LD_VAR 0 2
70296: PUSH
70297: LD_INT 4
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: LIST
70304: PUSH
70305: LD_VAR 0 1
70309: PUSH
70310: LD_INT 4
70312: PLUS
70313: PUSH
70314: LD_VAR 0 2
70318: PUSH
70319: LD_INT 4
70321: PLUS
70322: PUSH
70323: LD_INT 5
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: LIST
70330: PUSH
70331: LD_VAR 0 1
70335: PUSH
70336: LD_INT 4
70338: MINUS
70339: PUSH
70340: LD_VAR 0 2
70344: PUSH
70345: LD_INT 1
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: LIST
70352: PUSH
70353: LD_VAR 0 1
70357: PUSH
70358: LD_VAR 0 2
70362: PUSH
70363: LD_INT 4
70365: MINUS
70366: PUSH
70367: LD_INT 3
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: LIST
70374: PUSH
70375: LD_VAR 0 1
70379: PUSH
70380: LD_INT 3
70382: MINUS
70383: PUSH
70384: LD_VAR 0 2
70388: PUSH
70389: LD_INT 3
70391: MINUS
70392: PUSH
70393: LD_INT 2
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: LIST
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: ST_TO_ADDR
// end ; 4 :
70408: GO 70689
70410: LD_INT 4
70412: DOUBLE
70413: EQUAL
70414: IFTRUE 70418
70416: GO 70551
70418: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70419: LD_ADDR_VAR 0 5
70423: PUSH
70424: LD_VAR 0 1
70428: PUSH
70429: LD_VAR 0 2
70433: PUSH
70434: LD_INT 4
70436: PLUS
70437: PUSH
70438: LD_INT 0
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: LIST
70445: PUSH
70446: LD_VAR 0 1
70450: PUSH
70451: LD_INT 3
70453: PLUS
70454: PUSH
70455: LD_VAR 0 2
70459: PUSH
70460: LD_INT 3
70462: PLUS
70463: PUSH
70464: LD_INT 5
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: LIST
70471: PUSH
70472: LD_VAR 0 1
70476: PUSH
70477: LD_INT 4
70479: PLUS
70480: PUSH
70481: LD_VAR 0 2
70485: PUSH
70486: LD_INT 4
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: LIST
70493: PUSH
70494: LD_VAR 0 1
70498: PUSH
70499: LD_VAR 0 2
70503: PUSH
70504: LD_INT 3
70506: MINUS
70507: PUSH
70508: LD_INT 3
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: LIST
70515: PUSH
70516: LD_VAR 0 1
70520: PUSH
70521: LD_INT 4
70523: MINUS
70524: PUSH
70525: LD_VAR 0 2
70529: PUSH
70530: LD_INT 4
70532: MINUS
70533: PUSH
70534: LD_INT 2
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: LIST
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: ST_TO_ADDR
// end ; 5 :
70549: GO 70689
70551: LD_INT 5
70553: DOUBLE
70554: EQUAL
70555: IFTRUE 70559
70557: GO 70688
70559: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70560: LD_ADDR_VAR 0 5
70564: PUSH
70565: LD_VAR 0 1
70569: PUSH
70570: LD_INT 4
70572: MINUS
70573: PUSH
70574: LD_VAR 0 2
70578: PUSH
70579: LD_INT 1
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: LIST
70586: PUSH
70587: LD_VAR 0 1
70591: PUSH
70592: LD_VAR 0 2
70596: PUSH
70597: LD_INT 4
70599: MINUS
70600: PUSH
70601: LD_INT 3
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: LIST
70608: PUSH
70609: LD_VAR 0 1
70613: PUSH
70614: LD_INT 4
70616: PLUS
70617: PUSH
70618: LD_VAR 0 2
70622: PUSH
70623: LD_INT 4
70625: PLUS
70626: PUSH
70627: LD_INT 5
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: LIST
70634: PUSH
70635: LD_VAR 0 1
70639: PUSH
70640: LD_INT 3
70642: PLUS
70643: PUSH
70644: LD_VAR 0 2
70648: PUSH
70649: LD_INT 4
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: LIST
70656: PUSH
70657: LD_VAR 0 1
70661: PUSH
70662: LD_VAR 0 2
70666: PUSH
70667: LD_INT 3
70669: PLUS
70670: PUSH
70671: LD_INT 0
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: LIST
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: ST_TO_ADDR
// end ; end ;
70686: GO 70689
70688: POP
// result := list ;
70689: LD_ADDR_VAR 0 4
70693: PUSH
70694: LD_VAR 0 5
70698: ST_TO_ADDR
// end ;
70699: LD_VAR 0 4
70703: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70704: LD_INT 0
70706: PPUSH
70707: PPUSH
70708: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70709: LD_VAR 0 1
70713: NOT
70714: PUSH
70715: LD_VAR 0 2
70719: PUSH
70720: LD_INT 1
70722: PUSH
70723: LD_INT 2
70725: PUSH
70726: LD_INT 3
70728: PUSH
70729: LD_INT 4
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: IN
70738: NOT
70739: OR
70740: IFFALSE 70744
// exit ;
70742: GO 70836
// tmp := [ ] ;
70744: LD_ADDR_VAR 0 5
70748: PUSH
70749: EMPTY
70750: ST_TO_ADDR
// for i in units do
70751: LD_ADDR_VAR 0 4
70755: PUSH
70756: LD_VAR 0 1
70760: PUSH
70761: FOR_IN
70762: IFFALSE 70805
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70764: LD_ADDR_VAR 0 5
70768: PUSH
70769: LD_VAR 0 5
70773: PPUSH
70774: LD_VAR 0 5
70778: PUSH
70779: LD_INT 1
70781: PLUS
70782: PPUSH
70783: LD_VAR 0 4
70787: PPUSH
70788: LD_VAR 0 2
70792: PPUSH
70793: CALL_OW 259
70797: PPUSH
70798: CALL_OW 2
70802: ST_TO_ADDR
70803: GO 70761
70805: POP
70806: POP
// if not tmp then
70807: LD_VAR 0 5
70811: NOT
70812: IFFALSE 70816
// exit ;
70814: GO 70836
// result := SortListByListDesc ( units , tmp ) ;
70816: LD_ADDR_VAR 0 3
70820: PUSH
70821: LD_VAR 0 1
70825: PPUSH
70826: LD_VAR 0 5
70830: PPUSH
70831: CALL_OW 77
70835: ST_TO_ADDR
// end ;
70836: LD_VAR 0 3
70840: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70841: LD_INT 0
70843: PPUSH
70844: PPUSH
70845: PPUSH
// result := false ;
70846: LD_ADDR_VAR 0 3
70850: PUSH
70851: LD_INT 0
70853: ST_TO_ADDR
// x := GetX ( building ) ;
70854: LD_ADDR_VAR 0 4
70858: PUSH
70859: LD_VAR 0 2
70863: PPUSH
70864: CALL_OW 250
70868: ST_TO_ADDR
// y := GetY ( building ) ;
70869: LD_ADDR_VAR 0 5
70873: PUSH
70874: LD_VAR 0 2
70878: PPUSH
70879: CALL_OW 251
70883: ST_TO_ADDR
// if not building or not x or not y then
70884: LD_VAR 0 2
70888: NOT
70889: PUSH
70890: LD_VAR 0 4
70894: NOT
70895: OR
70896: PUSH
70897: LD_VAR 0 5
70901: NOT
70902: OR
70903: IFFALSE 70907
// exit ;
70905: GO 70999
// if GetTaskList ( unit ) then
70907: LD_VAR 0 1
70911: PPUSH
70912: CALL_OW 437
70916: IFFALSE 70999
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70918: LD_STRING e
70920: PUSH
70921: LD_VAR 0 1
70925: PPUSH
70926: CALL_OW 437
70930: PUSH
70931: LD_INT 1
70933: ARRAY
70934: PUSH
70935: LD_INT 1
70937: ARRAY
70938: EQUAL
70939: PUSH
70940: LD_VAR 0 4
70944: PUSH
70945: LD_VAR 0 1
70949: PPUSH
70950: CALL_OW 437
70954: PUSH
70955: LD_INT 1
70957: ARRAY
70958: PUSH
70959: LD_INT 2
70961: ARRAY
70962: EQUAL
70963: AND
70964: PUSH
70965: LD_VAR 0 5
70969: PUSH
70970: LD_VAR 0 1
70974: PPUSH
70975: CALL_OW 437
70979: PUSH
70980: LD_INT 1
70982: ARRAY
70983: PUSH
70984: LD_INT 3
70986: ARRAY
70987: EQUAL
70988: AND
70989: IFFALSE 70999
// result := true end ;
70991: LD_ADDR_VAR 0 3
70995: PUSH
70996: LD_INT 1
70998: ST_TO_ADDR
// end ;
70999: LD_VAR 0 3
71003: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71004: LD_INT 0
71006: PPUSH
// result := false ;
71007: LD_ADDR_VAR 0 4
71011: PUSH
71012: LD_INT 0
71014: ST_TO_ADDR
// if GetTaskList ( unit ) then
71015: LD_VAR 0 1
71019: PPUSH
71020: CALL_OW 437
71024: IFFALSE 71107
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71026: LD_STRING M
71028: PUSH
71029: LD_VAR 0 1
71033: PPUSH
71034: CALL_OW 437
71038: PUSH
71039: LD_INT 1
71041: ARRAY
71042: PUSH
71043: LD_INT 1
71045: ARRAY
71046: EQUAL
71047: PUSH
71048: LD_VAR 0 2
71052: PUSH
71053: LD_VAR 0 1
71057: PPUSH
71058: CALL_OW 437
71062: PUSH
71063: LD_INT 1
71065: ARRAY
71066: PUSH
71067: LD_INT 2
71069: ARRAY
71070: EQUAL
71071: AND
71072: PUSH
71073: LD_VAR 0 3
71077: PUSH
71078: LD_VAR 0 1
71082: PPUSH
71083: CALL_OW 437
71087: PUSH
71088: LD_INT 1
71090: ARRAY
71091: PUSH
71092: LD_INT 3
71094: ARRAY
71095: EQUAL
71096: AND
71097: IFFALSE 71107
// result := true ;
71099: LD_ADDR_VAR 0 4
71103: PUSH
71104: LD_INT 1
71106: ST_TO_ADDR
// end ; end ;
71107: LD_VAR 0 4
71111: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71112: LD_INT 0
71114: PPUSH
71115: PPUSH
71116: PPUSH
71117: PPUSH
// if not unit or not area then
71118: LD_VAR 0 1
71122: NOT
71123: PUSH
71124: LD_VAR 0 2
71128: NOT
71129: OR
71130: IFFALSE 71134
// exit ;
71132: GO 71298
// tmp := AreaToList ( area , i ) ;
71134: LD_ADDR_VAR 0 6
71138: PUSH
71139: LD_VAR 0 2
71143: PPUSH
71144: LD_VAR 0 5
71148: PPUSH
71149: CALL_OW 517
71153: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71154: LD_ADDR_VAR 0 5
71158: PUSH
71159: DOUBLE
71160: LD_INT 1
71162: DEC
71163: ST_TO_ADDR
71164: LD_VAR 0 6
71168: PUSH
71169: LD_INT 1
71171: ARRAY
71172: PUSH
71173: FOR_TO
71174: IFFALSE 71296
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71176: LD_ADDR_VAR 0 7
71180: PUSH
71181: LD_VAR 0 6
71185: PUSH
71186: LD_INT 1
71188: ARRAY
71189: PUSH
71190: LD_VAR 0 5
71194: ARRAY
71195: PUSH
71196: LD_VAR 0 6
71200: PUSH
71201: LD_INT 2
71203: ARRAY
71204: PUSH
71205: LD_VAR 0 5
71209: ARRAY
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71215: LD_VAR 0 7
71219: PUSH
71220: LD_INT 1
71222: ARRAY
71223: PPUSH
71224: LD_VAR 0 7
71228: PUSH
71229: LD_INT 2
71231: ARRAY
71232: PPUSH
71233: CALL_OW 428
71237: PUSH
71238: LD_INT 0
71240: EQUAL
71241: IFFALSE 71294
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71243: LD_VAR 0 1
71247: PPUSH
71248: LD_VAR 0 7
71252: PUSH
71253: LD_INT 1
71255: ARRAY
71256: PPUSH
71257: LD_VAR 0 7
71261: PUSH
71262: LD_INT 2
71264: ARRAY
71265: PPUSH
71266: LD_VAR 0 3
71270: PPUSH
71271: CALL_OW 48
// result := IsPlaced ( unit ) ;
71275: LD_ADDR_VAR 0 4
71279: PUSH
71280: LD_VAR 0 1
71284: PPUSH
71285: CALL_OW 305
71289: ST_TO_ADDR
// exit ;
71290: POP
71291: POP
71292: GO 71298
// end ; end ;
71294: GO 71173
71296: POP
71297: POP
// end ;
71298: LD_VAR 0 4
71302: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71303: LD_INT 0
71305: PPUSH
71306: PPUSH
71307: PPUSH
// if not side or side > 8 then
71308: LD_VAR 0 1
71312: NOT
71313: PUSH
71314: LD_VAR 0 1
71318: PUSH
71319: LD_INT 8
71321: GREATER
71322: OR
71323: IFFALSE 71327
// exit ;
71325: GO 71514
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71327: LD_ADDR_VAR 0 4
71331: PUSH
71332: LD_INT 22
71334: PUSH
71335: LD_VAR 0 1
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: LD_INT 21
71346: PUSH
71347: LD_INT 3
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PPUSH
71358: CALL_OW 69
71362: ST_TO_ADDR
// if not tmp then
71363: LD_VAR 0 4
71367: NOT
71368: IFFALSE 71372
// exit ;
71370: GO 71514
// enable_addtolog := true ;
71372: LD_ADDR_OWVAR 81
71376: PUSH
71377: LD_INT 1
71379: ST_TO_ADDR
// AddToLog ( [ ) ;
71380: LD_STRING [
71382: PPUSH
71383: CALL_OW 561
// for i in tmp do
71387: LD_ADDR_VAR 0 3
71391: PUSH
71392: LD_VAR 0 4
71396: PUSH
71397: FOR_IN
71398: IFFALSE 71505
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71400: LD_STRING [
71402: PUSH
71403: LD_VAR 0 3
71407: PPUSH
71408: CALL_OW 266
71412: STR
71413: PUSH
71414: LD_STRING , 
71416: STR
71417: PUSH
71418: LD_VAR 0 3
71422: PPUSH
71423: CALL_OW 250
71427: STR
71428: PUSH
71429: LD_STRING , 
71431: STR
71432: PUSH
71433: LD_VAR 0 3
71437: PPUSH
71438: CALL_OW 251
71442: STR
71443: PUSH
71444: LD_STRING , 
71446: STR
71447: PUSH
71448: LD_VAR 0 3
71452: PPUSH
71453: CALL_OW 254
71457: STR
71458: PUSH
71459: LD_STRING , 
71461: STR
71462: PUSH
71463: LD_VAR 0 3
71467: PPUSH
71468: LD_INT 1
71470: PPUSH
71471: CALL_OW 268
71475: STR
71476: PUSH
71477: LD_STRING , 
71479: STR
71480: PUSH
71481: LD_VAR 0 3
71485: PPUSH
71486: LD_INT 2
71488: PPUSH
71489: CALL_OW 268
71493: STR
71494: PUSH
71495: LD_STRING ],
71497: STR
71498: PPUSH
71499: CALL_OW 561
// end ;
71503: GO 71397
71505: POP
71506: POP
// AddToLog ( ]; ) ;
71507: LD_STRING ];
71509: PPUSH
71510: CALL_OW 561
// end ;
71514: LD_VAR 0 2
71518: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71519: LD_INT 0
71521: PPUSH
71522: PPUSH
71523: PPUSH
71524: PPUSH
71525: PPUSH
// if not area or not rate or not max then
71526: LD_VAR 0 1
71530: NOT
71531: PUSH
71532: LD_VAR 0 2
71536: NOT
71537: OR
71538: PUSH
71539: LD_VAR 0 4
71543: NOT
71544: OR
71545: IFFALSE 71549
// exit ;
71547: GO 71741
// while 1 do
71549: LD_INT 1
71551: IFFALSE 71741
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71553: LD_ADDR_VAR 0 9
71557: PUSH
71558: LD_VAR 0 1
71562: PPUSH
71563: LD_INT 1
71565: PPUSH
71566: CALL_OW 287
71570: PUSH
71571: LD_INT 10
71573: MUL
71574: ST_TO_ADDR
// r := rate / 10 ;
71575: LD_ADDR_VAR 0 7
71579: PUSH
71580: LD_VAR 0 2
71584: PUSH
71585: LD_INT 10
71587: DIVREAL
71588: ST_TO_ADDR
// time := 1 1$00 ;
71589: LD_ADDR_VAR 0 8
71593: PUSH
71594: LD_INT 2100
71596: ST_TO_ADDR
// if amount < min then
71597: LD_VAR 0 9
71601: PUSH
71602: LD_VAR 0 3
71606: LESS
71607: IFFALSE 71625
// r := r * 2 else
71609: LD_ADDR_VAR 0 7
71613: PUSH
71614: LD_VAR 0 7
71618: PUSH
71619: LD_INT 2
71621: MUL
71622: ST_TO_ADDR
71623: GO 71651
// if amount > max then
71625: LD_VAR 0 9
71629: PUSH
71630: LD_VAR 0 4
71634: GREATER
71635: IFFALSE 71651
// r := r / 2 ;
71637: LD_ADDR_VAR 0 7
71641: PUSH
71642: LD_VAR 0 7
71646: PUSH
71647: LD_INT 2
71649: DIVREAL
71650: ST_TO_ADDR
// time := time / r ;
71651: LD_ADDR_VAR 0 8
71655: PUSH
71656: LD_VAR 0 8
71660: PUSH
71661: LD_VAR 0 7
71665: DIVREAL
71666: ST_TO_ADDR
// if time < 0 then
71667: LD_VAR 0 8
71671: PUSH
71672: LD_INT 0
71674: LESS
71675: IFFALSE 71692
// time := time * - 1 ;
71677: LD_ADDR_VAR 0 8
71681: PUSH
71682: LD_VAR 0 8
71686: PUSH
71687: LD_INT 1
71689: NEG
71690: MUL
71691: ST_TO_ADDR
// wait ( time ) ;
71692: LD_VAR 0 8
71696: PPUSH
71697: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
71701: LD_INT 35
71703: PPUSH
71704: LD_INT 875
71706: PPUSH
71707: CALL_OW 12
71711: PPUSH
71712: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71716: LD_INT 1
71718: PPUSH
71719: LD_INT 5
71721: PPUSH
71722: CALL_OW 12
71726: PPUSH
71727: LD_VAR 0 1
71731: PPUSH
71732: LD_INT 1
71734: PPUSH
71735: CALL_OW 55
// end ;
71739: GO 71549
// end ;
71741: LD_VAR 0 5
71745: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71746: LD_INT 0
71748: PPUSH
71749: PPUSH
71750: PPUSH
71751: PPUSH
71752: PPUSH
71753: PPUSH
71754: PPUSH
71755: PPUSH
// if not turrets or not factories then
71756: LD_VAR 0 1
71760: NOT
71761: PUSH
71762: LD_VAR 0 2
71766: NOT
71767: OR
71768: IFFALSE 71772
// exit ;
71770: GO 72079
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71772: LD_ADDR_VAR 0 10
71776: PUSH
71777: LD_INT 5
71779: PUSH
71780: LD_INT 6
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 2
71789: PUSH
71790: LD_INT 4
71792: PUSH
71793: EMPTY
71794: LIST
71795: LIST
71796: PUSH
71797: LD_INT 3
71799: PUSH
71800: LD_INT 5
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 24
71814: PUSH
71815: LD_INT 25
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 23
71824: PUSH
71825: LD_INT 27
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: PUSH
71836: LD_INT 42
71838: PUSH
71839: LD_INT 43
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: PUSH
71846: LD_INT 44
71848: PUSH
71849: LD_INT 46
71851: PUSH
71852: EMPTY
71853: LIST
71854: LIST
71855: PUSH
71856: LD_INT 45
71858: PUSH
71859: LD_INT 47
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: LIST
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: LIST
71875: ST_TO_ADDR
// result := [ ] ;
71876: LD_ADDR_VAR 0 3
71880: PUSH
71881: EMPTY
71882: ST_TO_ADDR
// for i in turrets do
71883: LD_ADDR_VAR 0 4
71887: PUSH
71888: LD_VAR 0 1
71892: PUSH
71893: FOR_IN
71894: IFFALSE 72077
// begin nat := GetNation ( i ) ;
71896: LD_ADDR_VAR 0 7
71900: PUSH
71901: LD_VAR 0 4
71905: PPUSH
71906: CALL_OW 248
71910: ST_TO_ADDR
// weapon := 0 ;
71911: LD_ADDR_VAR 0 8
71915: PUSH
71916: LD_INT 0
71918: ST_TO_ADDR
// if not nat then
71919: LD_VAR 0 7
71923: NOT
71924: IFFALSE 71928
// continue ;
71926: GO 71893
// for j in list [ nat ] do
71928: LD_ADDR_VAR 0 5
71932: PUSH
71933: LD_VAR 0 10
71937: PUSH
71938: LD_VAR 0 7
71942: ARRAY
71943: PUSH
71944: FOR_IN
71945: IFFALSE 71986
// if GetBWeapon ( i ) = j [ 1 ] then
71947: LD_VAR 0 4
71951: PPUSH
71952: CALL_OW 269
71956: PUSH
71957: LD_VAR 0 5
71961: PUSH
71962: LD_INT 1
71964: ARRAY
71965: EQUAL
71966: IFFALSE 71984
// begin weapon := j [ 2 ] ;
71968: LD_ADDR_VAR 0 8
71972: PUSH
71973: LD_VAR 0 5
71977: PUSH
71978: LD_INT 2
71980: ARRAY
71981: ST_TO_ADDR
// break ;
71982: GO 71986
// end ;
71984: GO 71944
71986: POP
71987: POP
// if not weapon then
71988: LD_VAR 0 8
71992: NOT
71993: IFFALSE 71997
// continue ;
71995: GO 71893
// for k in factories do
71997: LD_ADDR_VAR 0 6
72001: PUSH
72002: LD_VAR 0 2
72006: PUSH
72007: FOR_IN
72008: IFFALSE 72073
// begin weapons := AvailableWeaponList ( k ) ;
72010: LD_ADDR_VAR 0 9
72014: PUSH
72015: LD_VAR 0 6
72019: PPUSH
72020: CALL_OW 478
72024: ST_TO_ADDR
// if not weapons then
72025: LD_VAR 0 9
72029: NOT
72030: IFFALSE 72034
// continue ;
72032: GO 72007
// if weapon in weapons then
72034: LD_VAR 0 8
72038: PUSH
72039: LD_VAR 0 9
72043: IN
72044: IFFALSE 72071
// begin result := [ i , weapon ] ;
72046: LD_ADDR_VAR 0 3
72050: PUSH
72051: LD_VAR 0 4
72055: PUSH
72056: LD_VAR 0 8
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: ST_TO_ADDR
// exit ;
72065: POP
72066: POP
72067: POP
72068: POP
72069: GO 72079
// end ; end ;
72071: GO 72007
72073: POP
72074: POP
// end ;
72075: GO 71893
72077: POP
72078: POP
// end ;
72079: LD_VAR 0 3
72083: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72084: LD_INT 0
72086: PPUSH
// if not side or side > 8 then
72087: LD_VAR 0 3
72091: NOT
72092: PUSH
72093: LD_VAR 0 3
72097: PUSH
72098: LD_INT 8
72100: GREATER
72101: OR
72102: IFFALSE 72106
// exit ;
72104: GO 72165
// if not range then
72106: LD_VAR 0 4
72110: NOT
72111: IFFALSE 72122
// range := - 12 ;
72113: LD_ADDR_VAR 0 4
72117: PUSH
72118: LD_INT 12
72120: NEG
72121: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72122: LD_VAR 0 1
72126: PPUSH
72127: LD_VAR 0 2
72131: PPUSH
72132: LD_VAR 0 3
72136: PPUSH
72137: LD_VAR 0 4
72141: PPUSH
72142: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72146: LD_VAR 0 1
72150: PPUSH
72151: LD_VAR 0 2
72155: PPUSH
72156: LD_VAR 0 3
72160: PPUSH
72161: CALL_OW 331
// end ;
72165: LD_VAR 0 5
72169: RET
// export function Video ( mode ) ; begin
72170: LD_INT 0
72172: PPUSH
// ingame_video = mode ;
72173: LD_ADDR_OWVAR 52
72177: PUSH
72178: LD_VAR 0 1
72182: ST_TO_ADDR
// interface_hidden = mode ;
72183: LD_ADDR_OWVAR 54
72187: PUSH
72188: LD_VAR 0 1
72192: ST_TO_ADDR
// end ;
72193: LD_VAR 0 2
72197: RET
// export function Join ( array , element ) ; begin
72198: LD_INT 0
72200: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72201: LD_ADDR_VAR 0 3
72205: PUSH
72206: LD_VAR 0 1
72210: PPUSH
72211: LD_VAR 0 1
72215: PUSH
72216: LD_INT 1
72218: PLUS
72219: PPUSH
72220: LD_VAR 0 2
72224: PPUSH
72225: CALL_OW 1
72229: ST_TO_ADDR
// end ;
72230: LD_VAR 0 3
72234: RET
// export function JoinUnion ( array , element ) ; begin
72235: LD_INT 0
72237: PPUSH
// result := array union element ;
72238: LD_ADDR_VAR 0 3
72242: PUSH
72243: LD_VAR 0 1
72247: PUSH
72248: LD_VAR 0 2
72252: UNION
72253: ST_TO_ADDR
// end ;
72254: LD_VAR 0 3
72258: RET
// export function GetBehemoths ( side ) ; begin
72259: LD_INT 0
72261: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72262: LD_ADDR_VAR 0 2
72266: PUSH
72267: LD_INT 22
72269: PUSH
72270: LD_VAR 0 1
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 31
72281: PUSH
72282: LD_INT 25
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: PPUSH
72293: CALL_OW 69
72297: ST_TO_ADDR
// end ;
72298: LD_VAR 0 2
72302: RET
// export function Shuffle ( array ) ; var i , index ; begin
72303: LD_INT 0
72305: PPUSH
72306: PPUSH
72307: PPUSH
// result := [ ] ;
72308: LD_ADDR_VAR 0 2
72312: PUSH
72313: EMPTY
72314: ST_TO_ADDR
// if not array then
72315: LD_VAR 0 1
72319: NOT
72320: IFFALSE 72324
// exit ;
72322: GO 72423
// Randomize ;
72324: CALL_OW 10
// for i = array downto 1 do
72328: LD_ADDR_VAR 0 3
72332: PUSH
72333: DOUBLE
72334: LD_VAR 0 1
72338: INC
72339: ST_TO_ADDR
72340: LD_INT 1
72342: PUSH
72343: FOR_DOWNTO
72344: IFFALSE 72421
// begin index := rand ( 1 , array ) ;
72346: LD_ADDR_VAR 0 4
72350: PUSH
72351: LD_INT 1
72353: PPUSH
72354: LD_VAR 0 1
72358: PPUSH
72359: CALL_OW 12
72363: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72364: LD_ADDR_VAR 0 2
72368: PUSH
72369: LD_VAR 0 2
72373: PPUSH
72374: LD_VAR 0 2
72378: PUSH
72379: LD_INT 1
72381: PLUS
72382: PPUSH
72383: LD_VAR 0 1
72387: PUSH
72388: LD_VAR 0 4
72392: ARRAY
72393: PPUSH
72394: CALL_OW 2
72398: ST_TO_ADDR
// array := Delete ( array , index ) ;
72399: LD_ADDR_VAR 0 1
72403: PUSH
72404: LD_VAR 0 1
72408: PPUSH
72409: LD_VAR 0 4
72413: PPUSH
72414: CALL_OW 3
72418: ST_TO_ADDR
// end ;
72419: GO 72343
72421: POP
72422: POP
// end ;
72423: LD_VAR 0 2
72427: RET
// export function GetBaseMaterials ( base ) ; begin
72428: LD_INT 0
72430: PPUSH
// result := [ 0 , 0 , 0 ] ;
72431: LD_ADDR_VAR 0 2
72435: PUSH
72436: LD_INT 0
72438: PUSH
72439: LD_INT 0
72441: PUSH
72442: LD_INT 0
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: LIST
72449: ST_TO_ADDR
// if not base then
72450: LD_VAR 0 1
72454: NOT
72455: IFFALSE 72459
// exit ;
72457: GO 72508
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72459: LD_ADDR_VAR 0 2
72463: PUSH
72464: LD_VAR 0 1
72468: PPUSH
72469: LD_INT 1
72471: PPUSH
72472: CALL_OW 275
72476: PUSH
72477: LD_VAR 0 1
72481: PPUSH
72482: LD_INT 2
72484: PPUSH
72485: CALL_OW 275
72489: PUSH
72490: LD_VAR 0 1
72494: PPUSH
72495: LD_INT 3
72497: PPUSH
72498: CALL_OW 275
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: LIST
72507: ST_TO_ADDR
// end ;
72508: LD_VAR 0 2
72512: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72513: LD_INT 0
72515: PPUSH
72516: PPUSH
// result := array ;
72517: LD_ADDR_VAR 0 3
72521: PUSH
72522: LD_VAR 0 1
72526: ST_TO_ADDR
// if size > 0 then
72527: LD_VAR 0 2
72531: PUSH
72532: LD_INT 0
72534: GREATER
72535: IFFALSE 72581
// for i := array downto size do
72537: LD_ADDR_VAR 0 4
72541: PUSH
72542: DOUBLE
72543: LD_VAR 0 1
72547: INC
72548: ST_TO_ADDR
72549: LD_VAR 0 2
72553: PUSH
72554: FOR_DOWNTO
72555: IFFALSE 72579
// result := Delete ( result , result ) ;
72557: LD_ADDR_VAR 0 3
72561: PUSH
72562: LD_VAR 0 3
72566: PPUSH
72567: LD_VAR 0 3
72571: PPUSH
72572: CALL_OW 3
72576: ST_TO_ADDR
72577: GO 72554
72579: POP
72580: POP
// end ;
72581: LD_VAR 0 3
72585: RET
// export function ComExit ( unit ) ; var tmp ; begin
72586: LD_INT 0
72588: PPUSH
72589: PPUSH
// if not IsInUnit ( unit ) then
72590: LD_VAR 0 1
72594: PPUSH
72595: CALL_OW 310
72599: NOT
72600: IFFALSE 72604
// exit ;
72602: GO 72664
// tmp := IsInUnit ( unit ) ;
72604: LD_ADDR_VAR 0 3
72608: PUSH
72609: LD_VAR 0 1
72613: PPUSH
72614: CALL_OW 310
72618: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72619: LD_VAR 0 3
72623: PPUSH
72624: CALL_OW 247
72628: PUSH
72629: LD_INT 2
72631: EQUAL
72632: IFFALSE 72645
// ComExitVehicle ( unit ) else
72634: LD_VAR 0 1
72638: PPUSH
72639: CALL_OW 121
72643: GO 72654
// ComExitBuilding ( unit ) ;
72645: LD_VAR 0 1
72649: PPUSH
72650: CALL_OW 122
// result := tmp ;
72654: LD_ADDR_VAR 0 2
72658: PUSH
72659: LD_VAR 0 3
72663: ST_TO_ADDR
// end ;
72664: LD_VAR 0 2
72668: RET
// export function ComExitAll ( units ) ; var i ; begin
72669: LD_INT 0
72671: PPUSH
72672: PPUSH
// if not units then
72673: LD_VAR 0 1
72677: NOT
72678: IFFALSE 72682
// exit ;
72680: GO 72708
// for i in units do
72682: LD_ADDR_VAR 0 3
72686: PUSH
72687: LD_VAR 0 1
72691: PUSH
72692: FOR_IN
72693: IFFALSE 72706
// ComExit ( i ) ;
72695: LD_VAR 0 3
72699: PPUSH
72700: CALL 72586 0 1
72704: GO 72692
72706: POP
72707: POP
// end ;
72708: LD_VAR 0 2
72712: RET
// export function ResetHc ; begin
72713: LD_INT 0
72715: PPUSH
// InitHc ;
72716: CALL_OW 19
// hc_importance := 0 ;
72720: LD_ADDR_OWVAR 32
72724: PUSH
72725: LD_INT 0
72727: ST_TO_ADDR
// end ;
72728: LD_VAR 0 1
72732: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72733: LD_INT 0
72735: PPUSH
72736: PPUSH
72737: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72738: LD_ADDR_VAR 0 6
72742: PUSH
72743: LD_VAR 0 1
72747: PUSH
72748: LD_VAR 0 3
72752: PLUS
72753: PUSH
72754: LD_INT 2
72756: DIV
72757: ST_TO_ADDR
// if _x < 0 then
72758: LD_VAR 0 6
72762: PUSH
72763: LD_INT 0
72765: LESS
72766: IFFALSE 72783
// _x := _x * - 1 ;
72768: LD_ADDR_VAR 0 6
72772: PUSH
72773: LD_VAR 0 6
72777: PUSH
72778: LD_INT 1
72780: NEG
72781: MUL
72782: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72783: LD_ADDR_VAR 0 7
72787: PUSH
72788: LD_VAR 0 2
72792: PUSH
72793: LD_VAR 0 4
72797: PLUS
72798: PUSH
72799: LD_INT 2
72801: DIV
72802: ST_TO_ADDR
// if _y < 0 then
72803: LD_VAR 0 7
72807: PUSH
72808: LD_INT 0
72810: LESS
72811: IFFALSE 72828
// _y := _y * - 1 ;
72813: LD_ADDR_VAR 0 7
72817: PUSH
72818: LD_VAR 0 7
72822: PUSH
72823: LD_INT 1
72825: NEG
72826: MUL
72827: ST_TO_ADDR
// result := [ _x , _y ] ;
72828: LD_ADDR_VAR 0 5
72832: PUSH
72833: LD_VAR 0 6
72837: PUSH
72838: LD_VAR 0 7
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: ST_TO_ADDR
// end ;
72847: LD_VAR 0 5
72851: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72852: LD_INT 0
72854: PPUSH
72855: PPUSH
72856: PPUSH
72857: PPUSH
// task := GetTaskList ( unit ) ;
72858: LD_ADDR_VAR 0 7
72862: PUSH
72863: LD_VAR 0 1
72867: PPUSH
72868: CALL_OW 437
72872: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72873: LD_VAR 0 7
72877: NOT
72878: PUSH
72879: LD_VAR 0 1
72883: PPUSH
72884: LD_VAR 0 2
72888: PPUSH
72889: CALL_OW 308
72893: NOT
72894: AND
72895: IFFALSE 72899
// exit ;
72897: GO 73017
// if IsInArea ( unit , area ) then
72899: LD_VAR 0 1
72903: PPUSH
72904: LD_VAR 0 2
72908: PPUSH
72909: CALL_OW 308
72913: IFFALSE 72931
// begin ComMoveToArea ( unit , goAway ) ;
72915: LD_VAR 0 1
72919: PPUSH
72920: LD_VAR 0 3
72924: PPUSH
72925: CALL_OW 113
// exit ;
72929: GO 73017
// end ; if task [ 1 ] [ 1 ] <> M then
72931: LD_VAR 0 7
72935: PUSH
72936: LD_INT 1
72938: ARRAY
72939: PUSH
72940: LD_INT 1
72942: ARRAY
72943: PUSH
72944: LD_STRING M
72946: NONEQUAL
72947: IFFALSE 72951
// exit ;
72949: GO 73017
// x := task [ 1 ] [ 2 ] ;
72951: LD_ADDR_VAR 0 5
72955: PUSH
72956: LD_VAR 0 7
72960: PUSH
72961: LD_INT 1
72963: ARRAY
72964: PUSH
72965: LD_INT 2
72967: ARRAY
72968: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72969: LD_ADDR_VAR 0 6
72973: PUSH
72974: LD_VAR 0 7
72978: PUSH
72979: LD_INT 1
72981: ARRAY
72982: PUSH
72983: LD_INT 3
72985: ARRAY
72986: ST_TO_ADDR
// if InArea ( x , y , area ) then
72987: LD_VAR 0 5
72991: PPUSH
72992: LD_VAR 0 6
72996: PPUSH
72997: LD_VAR 0 2
73001: PPUSH
73002: CALL_OW 309
73006: IFFALSE 73017
// ComStop ( unit ) ;
73008: LD_VAR 0 1
73012: PPUSH
73013: CALL_OW 141
// end ;
73017: LD_VAR 0 4
73021: RET
// export function Abs ( value ) ; begin
73022: LD_INT 0
73024: PPUSH
// result := value ;
73025: LD_ADDR_VAR 0 2
73029: PUSH
73030: LD_VAR 0 1
73034: ST_TO_ADDR
// if value < 0 then
73035: LD_VAR 0 1
73039: PUSH
73040: LD_INT 0
73042: LESS
73043: IFFALSE 73060
// result := value * - 1 ;
73045: LD_ADDR_VAR 0 2
73049: PUSH
73050: LD_VAR 0 1
73054: PUSH
73055: LD_INT 1
73057: NEG
73058: MUL
73059: ST_TO_ADDR
// end ;
73060: LD_VAR 0 2
73064: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73065: LD_INT 0
73067: PPUSH
73068: PPUSH
73069: PPUSH
73070: PPUSH
73071: PPUSH
73072: PPUSH
73073: PPUSH
73074: PPUSH
// if not unit or not building then
73075: LD_VAR 0 1
73079: NOT
73080: PUSH
73081: LD_VAR 0 2
73085: NOT
73086: OR
73087: IFFALSE 73091
// exit ;
73089: GO 73317
// x := GetX ( building ) ;
73091: LD_ADDR_VAR 0 4
73095: PUSH
73096: LD_VAR 0 2
73100: PPUSH
73101: CALL_OW 250
73105: ST_TO_ADDR
// y := GetY ( building ) ;
73106: LD_ADDR_VAR 0 6
73110: PUSH
73111: LD_VAR 0 2
73115: PPUSH
73116: CALL_OW 251
73120: ST_TO_ADDR
// d := GetDir ( building ) ;
73121: LD_ADDR_VAR 0 8
73125: PUSH
73126: LD_VAR 0 2
73130: PPUSH
73131: CALL_OW 254
73135: ST_TO_ADDR
// r := 4 ;
73136: LD_ADDR_VAR 0 9
73140: PUSH
73141: LD_INT 4
73143: ST_TO_ADDR
// for i := 1 to 5 do
73144: LD_ADDR_VAR 0 10
73148: PUSH
73149: DOUBLE
73150: LD_INT 1
73152: DEC
73153: ST_TO_ADDR
73154: LD_INT 5
73156: PUSH
73157: FOR_TO
73158: IFFALSE 73315
// begin _x := ShiftX ( x , d , r + i ) ;
73160: LD_ADDR_VAR 0 5
73164: PUSH
73165: LD_VAR 0 4
73169: PPUSH
73170: LD_VAR 0 8
73174: PPUSH
73175: LD_VAR 0 9
73179: PUSH
73180: LD_VAR 0 10
73184: PLUS
73185: PPUSH
73186: CALL_OW 272
73190: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73191: LD_ADDR_VAR 0 7
73195: PUSH
73196: LD_VAR 0 6
73200: PPUSH
73201: LD_VAR 0 8
73205: PPUSH
73206: LD_VAR 0 9
73210: PUSH
73211: LD_VAR 0 10
73215: PLUS
73216: PPUSH
73217: CALL_OW 273
73221: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73222: LD_VAR 0 5
73226: PPUSH
73227: LD_VAR 0 7
73231: PPUSH
73232: CALL_OW 488
73236: PUSH
73237: LD_VAR 0 5
73241: PPUSH
73242: LD_VAR 0 7
73246: PPUSH
73247: CALL_OW 428
73251: PPUSH
73252: CALL_OW 247
73256: PUSH
73257: LD_INT 3
73259: PUSH
73260: LD_INT 2
73262: PUSH
73263: EMPTY
73264: LIST
73265: LIST
73266: IN
73267: NOT
73268: AND
73269: IFFALSE 73313
// begin ComMoveXY ( unit , _x , _y ) ;
73271: LD_VAR 0 1
73275: PPUSH
73276: LD_VAR 0 5
73280: PPUSH
73281: LD_VAR 0 7
73285: PPUSH
73286: CALL_OW 111
// result := [ _x , _y ] ;
73290: LD_ADDR_VAR 0 3
73294: PUSH
73295: LD_VAR 0 5
73299: PUSH
73300: LD_VAR 0 7
73304: PUSH
73305: EMPTY
73306: LIST
73307: LIST
73308: ST_TO_ADDR
// exit ;
73309: POP
73310: POP
73311: GO 73317
// end ; end ;
73313: GO 73157
73315: POP
73316: POP
// end ;
73317: LD_VAR 0 3
73321: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73322: LD_INT 0
73324: PPUSH
73325: PPUSH
73326: PPUSH
// result := 0 ;
73327: LD_ADDR_VAR 0 3
73331: PUSH
73332: LD_INT 0
73334: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73335: LD_VAR 0 1
73339: PUSH
73340: LD_INT 0
73342: LESS
73343: PUSH
73344: LD_VAR 0 1
73348: PUSH
73349: LD_INT 8
73351: GREATER
73352: OR
73353: PUSH
73354: LD_VAR 0 2
73358: PUSH
73359: LD_INT 0
73361: LESS
73362: OR
73363: PUSH
73364: LD_VAR 0 2
73368: PUSH
73369: LD_INT 8
73371: GREATER
73372: OR
73373: IFFALSE 73377
// exit ;
73375: GO 73452
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73377: LD_ADDR_VAR 0 4
73381: PUSH
73382: LD_INT 22
73384: PUSH
73385: LD_VAR 0 2
73389: PUSH
73390: EMPTY
73391: LIST
73392: LIST
73393: PPUSH
73394: CALL_OW 69
73398: PUSH
73399: FOR_IN
73400: IFFALSE 73450
// begin un := UnitShoot ( i ) ;
73402: LD_ADDR_VAR 0 5
73406: PUSH
73407: LD_VAR 0 4
73411: PPUSH
73412: CALL_OW 504
73416: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73417: LD_VAR 0 5
73421: PPUSH
73422: CALL_OW 255
73426: PUSH
73427: LD_VAR 0 1
73431: EQUAL
73432: IFFALSE 73448
// begin result := un ;
73434: LD_ADDR_VAR 0 3
73438: PUSH
73439: LD_VAR 0 5
73443: ST_TO_ADDR
// exit ;
73444: POP
73445: POP
73446: GO 73452
// end ; end ;
73448: GO 73399
73450: POP
73451: POP
// end ;
73452: LD_VAR 0 3
73456: RET
// export function GetCargoBay ( units ) ; begin
73457: LD_INT 0
73459: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73460: LD_ADDR_VAR 0 2
73464: PUSH
73465: LD_VAR 0 1
73469: PPUSH
73470: LD_INT 2
73472: PUSH
73473: LD_INT 34
73475: PUSH
73476: LD_INT 12
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: PUSH
73483: LD_INT 34
73485: PUSH
73486: LD_INT 51
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: PUSH
73493: LD_INT 34
73495: PUSH
73496: LD_INT 32
73498: PUSH
73499: EMPTY
73500: LIST
73501: LIST
73502: PUSH
73503: LD_INT 34
73505: PUSH
73506: LD_EXP 63
73510: PUSH
73511: EMPTY
73512: LIST
73513: LIST
73514: PUSH
73515: EMPTY
73516: LIST
73517: LIST
73518: LIST
73519: LIST
73520: LIST
73521: PPUSH
73522: CALL_OW 72
73526: ST_TO_ADDR
// end ; end_of_file
73527: LD_VAR 0 2
73531: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73532: LD_VAR 0 1
73536: PUSH
73537: LD_INT 200
73539: DOUBLE
73540: GREATEREQUAL
73541: IFFALSE 73549
73543: LD_INT 299
73545: DOUBLE
73546: LESSEQUAL
73547: IFTRUE 73551
73549: GO 73583
73551: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73552: LD_VAR 0 1
73556: PPUSH
73557: LD_VAR 0 2
73561: PPUSH
73562: LD_VAR 0 3
73566: PPUSH
73567: LD_VAR 0 4
73571: PPUSH
73572: LD_VAR 0 5
73576: PPUSH
73577: CALL 31993 0 5
73581: GO 73660
73583: LD_INT 300
73585: DOUBLE
73586: GREATEREQUAL
73587: IFFALSE 73595
73589: LD_INT 399
73591: DOUBLE
73592: LESSEQUAL
73593: IFTRUE 73597
73595: GO 73659
73597: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73598: LD_VAR 0 1
73602: PPUSH
73603: LD_VAR 0 2
73607: PPUSH
73608: LD_VAR 0 3
73612: PPUSH
73613: LD_VAR 0 4
73617: PPUSH
73618: LD_VAR 0 5
73622: PPUSH
73623: LD_VAR 0 6
73627: PPUSH
73628: LD_VAR 0 7
73632: PPUSH
73633: LD_VAR 0 8
73637: PPUSH
73638: LD_VAR 0 9
73642: PPUSH
73643: LD_VAR 0 10
73647: PPUSH
73648: LD_VAR 0 11
73652: PPUSH
73653: CALL 29881 0 11
73657: GO 73660
73659: POP
// end ;
73660: PPOPN 11
73662: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73663: LD_VAR 0 1
73667: PPUSH
73668: LD_VAR 0 2
73672: PPUSH
73673: LD_VAR 0 3
73677: PPUSH
73678: LD_VAR 0 4
73682: PPUSH
73683: LD_VAR 0 5
73687: PPUSH
73688: CALL 31975 0 5
// end ; end_of_file
73692: PPOPN 5
73694: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73695: LD_VAR 0 1
73699: PPUSH
73700: LD_VAR 0 2
73704: PPUSH
73705: LD_VAR 0 3
73709: PPUSH
73710: LD_VAR 0 4
73714: PPUSH
73715: LD_VAR 0 5
73719: PPUSH
73720: LD_VAR 0 6
73724: PPUSH
73725: CALL 18689 0 6
// end ;
73729: PPOPN 6
73731: END
