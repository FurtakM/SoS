// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3460 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2674 0 0
// PrepareWesternBase ;
  41: CALL 2903 0 0
// Action ;
  45: CALL 5793 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 500 , 450 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 500
 233: PUSH
 234: LD_INT 450
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty , vcount , tmpv ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
// uc_side := 4 ;
1157: LD_ADDR_OWVAR 20
1161: PUSH
1162: LD_INT 4
1164: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1165: LD_ADDR_EXP 46
1169: PUSH
1170: LD_STRING Powell
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: LD_STRING 
1178: PPUSH
1179: CALL 41999 0 3
1183: ST_TO_ADDR
// uc_side := 1 ;
1184: LD_ADDR_OWVAR 20
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// uc_nation := 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// if debug then
1200: LD_EXP 1
1204: IFFALSE 1550
// begin for i = 1 to 4 do
1206: LD_ADDR_VAR 0 2
1210: PUSH
1211: DOUBLE
1212: LD_INT 1
1214: DEC
1215: ST_TO_ADDR
1216: LD_INT 4
1218: PUSH
1219: FOR_TO
1220: IFFALSE 1271
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1222: LD_INT 0
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_INT 2
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL_OW 380
// un := CreateHuman ;
1243: LD_ADDR_VAR 0 3
1247: PUSH
1248: CALL_OW 44
1252: ST_TO_ADDR
// others := others ^ un ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_VAR 0 5
1262: PUSH
1263: LD_VAR 0 3
1267: ADD
1268: ST_TO_ADDR
// end ;
1269: GO 1219
1271: POP
1272: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1273: LD_ADDR_VAR 0 6
1277: PUSH
1278: LD_INT 21
1280: PUSH
1281: LD_INT 1
1283: PUSH
1284: LD_INT 1
1286: PUSH
1287: LD_INT 42
1289: PUSH
1290: LD_INT 0
1292: PUSH
1293: LD_INT 750
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 21
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 42
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 750
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: PUSH
1330: LD_INT 21
1332: PUSH
1333: LD_INT 1
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: LD_INT 42
1341: PUSH
1342: LD_INT 0
1344: PUSH
1345: LD_INT 750
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 42
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 750
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 21
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 44
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: LD_INT 750
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 21
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: LD_INT 43
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 750
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 21
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: LD_INT 43
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 750
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 21
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 43
1471: PUSH
1472: LD_INT 0
1474: PUSH
1475: LD_INT 750
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 21
1488: PUSH
1489: LD_INT 1
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: LD_INT 90
1500: PUSH
1501: LD_INT 504
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 51
1523: PUSH
1524: LD_INT 80
1526: PUSH
1527: LD_INT 750
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1550: LD_ADDR_EXP 37
1554: PUSH
1555: LD_STRING JMM
1557: PPUSH
1558: LD_EXP 1
1562: NOT
1563: PPUSH
1564: LD_EXP 3
1568: PPUSH
1569: CALL 41999 0 3
1573: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1574: LD_ADDR_EXP 38
1578: PUSH
1579: LD_STRING Bobby
1581: PPUSH
1582: LD_EXP 1
1586: NOT
1587: PPUSH
1588: LD_EXP 3
1592: PPUSH
1593: CALL 41999 0 3
1597: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1598: LD_ADDR_EXP 39
1602: PUSH
1603: LD_STRING Cyrus
1605: PPUSH
1606: LD_EXP 1
1610: NOT
1611: PPUSH
1612: LD_EXP 3
1616: PPUSH
1617: CALL 41999 0 3
1621: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1622: LD_ADDR_EXP 40
1626: PUSH
1627: LD_STRING Lisa
1629: PPUSH
1630: LD_EXP 1
1634: NOT
1635: PPUSH
1636: LD_EXP 3
1640: PPUSH
1641: CALL 41999 0 3
1645: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1646: LD_ADDR_EXP 41
1650: PUSH
1651: LD_STRING Khatam
1653: PPUSH
1654: LD_EXP 1
1658: NOT
1659: PPUSH
1660: LD_EXP 3
1664: PPUSH
1665: CALL 41999 0 3
1669: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1670: LD_ADDR_EXP 42
1674: PUSH
1675: LD_STRING Brian
1677: PPUSH
1678: LD_EXP 1
1682: NOT
1683: PPUSH
1684: LD_EXP 3
1688: PPUSH
1689: CALL 41999 0 3
1693: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1694: LD_ADDR_EXP 43
1698: PUSH
1699: LD_STRING Jerry
1701: PPUSH
1702: LD_EXP 1
1706: NOT
1707: PPUSH
1708: LD_EXP 3
1712: PPUSH
1713: CALL 41999 0 3
1717: ST_TO_ADDR
// if Bobby then
1718: LD_EXP 38
1722: IFFALSE 1753
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1724: LD_ADDR_VAR 0 4
1728: PUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: LD_VAR 0 4
1738: PUSH
1739: LD_INT 1
1741: PLUS
1742: PPUSH
1743: LD_EXP 38
1747: PPUSH
1748: CALL_OW 2
1752: ST_TO_ADDR
// if Cyrus then
1753: LD_EXP 39
1757: IFFALSE 1788
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_VAR 0 4
1773: PUSH
1774: LD_INT 1
1776: PLUS
1777: PPUSH
1778: LD_EXP 39
1782: PPUSH
1783: CALL_OW 2
1787: ST_TO_ADDR
// if Lisa then
1788: LD_EXP 40
1792: IFFALSE 1823
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: LD_VAR 0 4
1808: PUSH
1809: LD_INT 1
1811: PLUS
1812: PPUSH
1813: LD_EXP 40
1817: PPUSH
1818: CALL_OW 2
1822: ST_TO_ADDR
// if Khatam then
1823: LD_EXP 41
1827: IFFALSE 1858
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1829: LD_ADDR_VAR 0 4
1833: PUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: LD_VAR 0 4
1843: PUSH
1844: LD_INT 1
1846: PLUS
1847: PPUSH
1848: LD_EXP 41
1852: PPUSH
1853: CALL_OW 2
1857: ST_TO_ADDR
// if Brian then
1858: LD_EXP 42
1862: IFFALSE 1893
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1864: LD_ADDR_VAR 0 4
1868: PUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_VAR 0 4
1878: PUSH
1879: LD_INT 1
1881: PLUS
1882: PPUSH
1883: LD_EXP 42
1887: PPUSH
1888: CALL_OW 2
1892: ST_TO_ADDR
// if Jerry then
1893: LD_EXP 43
1897: IFFALSE 1928
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: PLUS
1917: PPUSH
1918: LD_EXP 43
1922: PPUSH
1923: CALL_OW 2
1927: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1928: LD_STRING 02_other_survivors
1930: PPUSH
1931: CALL_OW 28
1935: IFFALSE 1950
// others := CreateCharacterSet ( 02_other_survivors ) ;
1937: LD_ADDR_VAR 0 5
1941: PUSH
1942: LD_STRING 02_other_survivors
1944: PPUSH
1945: CALL_OW 31
1949: ST_TO_ADDR
// if others then
1950: LD_VAR 0 5
1954: IFFALSE 1979
// begin tmp := tmp ^ others ;
1956: LD_ADDR_VAR 0 4
1960: PUSH
1961: LD_VAR 0 4
1965: PUSH
1966: LD_VAR 0 5
1970: ADD
1971: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1972: LD_STRING 02_other_survivors
1974: PPUSH
1975: CALL_OW 40
// end ; jmm_units := tmp diff 0 ;
1979: LD_ADDR_EXP 4
1983: PUSH
1984: LD_VAR 0 4
1988: PUSH
1989: LD_INT 0
1991: DIFF
1992: ST_TO_ADDR
// if not vehicles then
1993: LD_VAR 0 6
1997: NOT
1998: IFFALSE 2015
// vehicles := LoadVariable ( 02_tanks_1 , [ ] ) ;
2000: LD_ADDR_VAR 0 6
2004: PUSH
2005: LD_STRING 02_tanks_1
2007: PPUSH
2008: EMPTY
2009: PPUSH
2010: CALL_OW 30
2014: ST_TO_ADDR
// if vehicles then
2015: LD_VAR 0 6
2019: IFFALSE 2387
// begin got_mech := false ;
2021: LD_ADDR_VAR 0 7
2025: PUSH
2026: LD_INT 0
2028: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
2029: LD_VAR 0 4
2033: PPUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 3
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 72
2048: IFFALSE 2058
// got_mech := true ;
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// vcount := Count ( vehicles ) ;
2058: LD_ADDR_VAR 0 9
2062: PUSH
2063: LD_VAR 0 6
2067: PPUSH
2068: CALL 44223 0 1
2072: ST_TO_ADDR
// if vcount > 1 then
2073: LD_VAR 0 9
2077: PUSH
2078: LD_INT 1
2080: GREATER
2081: IFFALSE 2184
// begin for i := 2 to vcount do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 2
2091: DEC
2092: ST_TO_ADDR
2093: LD_VAR 0 9
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2182
// if vehicles [ i ] [ 4 ] = ru_cargo_bay then
2101: LD_VAR 0 6
2105: PUSH
2106: LD_VAR 0 2
2110: ARRAY
2111: PUSH
2112: LD_INT 4
2114: ARRAY
2115: PUSH
2116: LD_INT 51
2118: EQUAL
2119: IFFALSE 2180
// begin tmpv := vehicles [ i ] ;
2121: LD_ADDR_VAR 0 10
2125: PUSH
2126: LD_VAR 0 6
2130: PUSH
2131: LD_VAR 0 2
2135: ARRAY
2136: ST_TO_ADDR
// vehicles := Delete ( vehicles , i ) ;
2137: LD_ADDR_VAR 0 6
2141: PUSH
2142: LD_VAR 0 6
2146: PPUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 3
2156: ST_TO_ADDR
// vehicles := Insert ( vehicles , 1 , tmpv ) ;
2157: LD_ADDR_VAR 0 6
2161: PUSH
2162: LD_VAR 0 6
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_VAR 0 10
2174: PPUSH
2175: CALL_OW 2
2179: ST_TO_ADDR
// end ;
2180: GO 2098
2182: POP
2183: POP
// end ; if vcount > 6 then
2184: LD_VAR 0 9
2188: PUSH
2189: LD_INT 6
2191: GREATER
2192: IFFALSE 2202
// vcount := 6 ;
2194: LD_ADDR_VAR 0 9
2198: PUSH
2199: LD_INT 6
2201: ST_TO_ADDR
// if jmm_units + 1 < vcount then
2202: LD_EXP 4
2206: PUSH
2207: LD_INT 1
2209: PLUS
2210: PUSH
2211: LD_VAR 0 9
2215: LESS
2216: IFFALSE 2232
// vcount := jmm_units + 1 ;
2218: LD_ADDR_VAR 0 9
2222: PUSH
2223: LD_EXP 4
2227: PUSH
2228: LD_INT 1
2230: PLUS
2231: ST_TO_ADDR
// for i := 1 to vcount do
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: DOUBLE
2238: LD_INT 1
2240: DEC
2241: ST_TO_ADDR
2242: LD_VAR 0 9
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2385
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 3
2260: PPUSH
2261: LD_VAR 0 6
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: LD_VAR 0 6
2280: PUSH
2281: LD_VAR 0 2
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_VAR 0 6
2295: PUSH
2296: LD_VAR 0 2
2300: ARRAY
2301: PUSH
2302: LD_INT 3
2304: ARRAY
2305: PPUSH
2306: LD_VAR 0 6
2310: PUSH
2311: LD_VAR 0 2
2315: ARRAY
2316: PUSH
2317: LD_INT 4
2319: ARRAY
2320: PPUSH
2321: LD_INT 40
2323: PPUSH
2324: CALL 497 0 7
2328: ST_TO_ADDR
// if not got_mech then
2329: LD_VAR 0 7
2333: NOT
2334: IFFALSE 2360
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_VAR 0 6
2345: PUSH
2346: LD_VAR 0 2
2350: ARRAY
2351: PUSH
2352: LD_INT 6
2354: ARRAY
2355: PPUSH
2356: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: LD_VAR 0 3
2377: PPUSH
2378: CALL_OW 2
2382: ST_TO_ADDR
// end ;
2383: GO 2247
2385: POP
2386: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
2387: LD_EXP 37
2391: PPUSH
2392: LD_INT 194
2394: PPUSH
2395: LD_INT 119
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 48
// if tmp then
2405: LD_VAR 0 4
2409: IFFALSE 2601
// begin for i in tmp do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_VAR 0 4
2420: PUSH
2421: FOR_IN
2422: IFFALSE 2599
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL_OW 257
2433: PUSH
2434: LD_INT 1
2436: NONEQUAL
2437: IFFALSE 2451
2439: PUSH
2440: LD_VAR 0 2
2444: PUSH
2445: LD_EXP 41
2449: NONEQUAL
2450: AND
2451: IFFALSE 2465
// SetClass ( i , 1 ) ;
2453: LD_VAR 0 2
2457: PPUSH
2458: LD_INT 1
2460: PPUSH
2461: CALL_OW 336
// if i = Khatam then
2465: LD_VAR 0 2
2469: PUSH
2470: LD_EXP 41
2474: EQUAL
2475: IFFALSE 2489
// SetClass ( i , 4 ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: LD_INT 4
2484: PPUSH
2485: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2489: LD_ADDR_VAR 0 8
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 21
2506: PUSH
2507: LD_INT 2
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 58
2516: PUSH
2517: EMPTY
2518: LIST
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: LIST
2524: PPUSH
2525: CALL_OW 69
2529: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2530: LD_VAR 0 2
2534: PPUSH
2535: CALL_OW 247
2539: PUSH
2540: LD_INT 1
2542: EQUAL
2543: IFFALSE 2551
2545: PUSH
2546: LD_VAR 0 8
2550: AND
2551: IFFALSE 2573
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2553: LD_VAR 0 2
2557: PPUSH
2558: LD_VAR 0 8
2562: PUSH
2563: LD_INT 1
2565: ARRAY
2566: PPUSH
2567: CALL_OW 52
2571: GO 2588
// PlaceUnitArea ( i , startArea , false ) ;
2573: LD_VAR 0 2
2577: PPUSH
2578: LD_INT 1
2580: PPUSH
2581: LD_INT 0
2583: PPUSH
2584: CALL_OW 49
// ComHold ( i ) ;
2588: LD_VAR 0 2
2592: PPUSH
2593: CALL_OW 140
// end ;
2597: GO 2421
2599: POP
2600: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2601: LD_ADDR_EXP 7
2605: PUSH
2606: LD_STRING 02_mikhailStatus_1
2608: PPUSH
2609: LD_INT 0
2611: PPUSH
2612: CALL_OW 30
2616: ST_TO_ADDR
// if not bierezov_exist and not debug then
2617: LD_EXP 7
2621: NOT
2622: IFFALSE 2631
2624: PUSH
2625: LD_EXP 1
2629: NOT
2630: AND
2631: IFFALSE 2635
// exit ;
2633: GO 2669
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2635: LD_ADDR_EXP 45
2639: PUSH
2640: LD_STRING Mikhail
2642: PPUSH
2643: LD_INT 0
2645: PPUSH
2646: LD_STRING 
2648: PPUSH
2649: CALL 41999 0 3
2653: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2654: LD_EXP 45
2658: PPUSH
2659: LD_INT 1
2661: PPUSH
2662: LD_INT 0
2664: PPUSH
2665: CALL_OW 49
// end ;
2669: LD_VAR 0 1
2673: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2674: LD_INT 0
2676: PPUSH
2677: PPUSH
2678: PPUSH
2679: PPUSH
// uc_side := 4 ;
2680: LD_ADDR_OWVAR 20
2684: PUSH
2685: LD_INT 4
2687: ST_TO_ADDR
// uc_nation := 1 ;
2688: LD_ADDR_OWVAR 21
2692: PUSH
2693: LD_INT 1
2695: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2696: LD_ADDR_EXP 44
2700: PUSH
2701: LD_STRING Cornell
2703: PPUSH
2704: LD_INT 0
2706: PPUSH
2707: LD_STRING 
2709: PPUSH
2710: CALL 41999 0 3
2714: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2715: LD_ADDR_EXP 6
2719: PUSH
2720: LD_INT 9
2722: PUSH
2723: LD_EXP 4
2727: MINUS
2728: ST_TO_ADDR
// tmp := [ ] ;
2729: LD_ADDR_VAR 0 2
2733: PUSH
2734: EMPTY
2735: ST_TO_ADDR
// if cornel_units < 4 then
2736: LD_EXP 6
2740: PUSH
2741: LD_INT 4
2743: LESS
2744: IFFALSE 2754
// cornel_units := 4 ;
2746: LD_ADDR_EXP 6
2750: PUSH
2751: LD_INT 4
2753: ST_TO_ADDR
// for i = 1 to cornel_units do
2754: LD_ADDR_VAR 0 4
2758: PUSH
2759: DOUBLE
2760: LD_INT 1
2762: DEC
2763: ST_TO_ADDR
2764: LD_EXP 6
2768: PUSH
2769: FOR_TO
2770: IFFALSE 2868
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2772: LD_INT 0
2774: PPUSH
2775: LD_INT 1
2777: PUSH
2778: LD_INT 1
2780: PUSH
2781: LD_INT 1
2783: PUSH
2784: LD_INT 2
2786: PUSH
2787: LD_INT 4
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: LIST
2794: LIST
2795: LIST
2796: PUSH
2797: LD_VAR 0 4
2801: PUSH
2802: LD_INT 5
2804: MOD
2805: PUSH
2806: LD_INT 1
2808: PLUS
2809: ARRAY
2810: PPUSH
2811: LD_INT 2
2813: PPUSH
2814: CALL_OW 380
// un := CreateHuman ;
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: CALL_OW 44
2827: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2828: LD_ADDR_VAR 0 2
2832: PUSH
2833: LD_VAR 0 2
2837: PPUSH
2838: LD_INT 1
2840: PPUSH
2841: LD_VAR 0 3
2845: PPUSH
2846: CALL_OW 2
2850: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2851: LD_VAR 0 3
2855: PPUSH
2856: LD_INT 2
2858: PPUSH
2859: LD_INT 0
2861: PPUSH
2862: CALL_OW 49
// end ;
2866: GO 2769
2868: POP
2869: POP
// cornel_units := tmp ;
2870: LD_ADDR_EXP 6
2874: PUSH
2875: LD_VAR 0 2
2879: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2880: LD_EXP 44
2884: PPUSH
2885: LD_INT 191
2887: PPUSH
2888: LD_INT 106
2890: PPUSH
2891: LD_INT 0
2893: PPUSH
2894: CALL_OW 48
// end ;
2898: LD_VAR 0 1
2902: RET
// export function PrepareWesternBase ; var i ; begin
2903: LD_INT 0
2905: PPUSH
2906: PPUSH
// uc_side := 8 ;
2907: LD_ADDR_OWVAR 20
2911: PUSH
2912: LD_INT 8
2914: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2915: LD_ADDR_EXP 47
2919: PUSH
2920: LD_STRING Lynch
2922: PPUSH
2923: LD_INT 0
2925: PPUSH
2926: LD_STRING 
2928: PPUSH
2929: CALL 41999 0 3
2933: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2934: LD_ADDR_EXP 48
2938: PUSH
2939: LD_STRING Walker
2941: PPUSH
2942: LD_INT 0
2944: PPUSH
2945: LD_STRING 
2947: PPUSH
2948: CALL 41999 0 3
2952: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2953: LD_ADDR_EXP 49
2957: PUSH
2958: LD_STRING Turner
2960: PPUSH
2961: LD_INT 0
2963: PPUSH
2964: LD_STRING 
2966: PPUSH
2967: CALL 41999 0 3
2971: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2972: LD_ADDR_EXP 50
2976: PUSH
2977: LD_STRING Jillian
2979: PPUSH
2980: LD_INT 0
2982: PPUSH
2983: LD_STRING 
2985: PPUSH
2986: CALL 41999 0 3
2990: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2991: LD_ADDR_VAR 0 2
2995: PUSH
2996: LD_EXP 47
3000: PUSH
3001: LD_EXP 48
3005: PUSH
3006: LD_EXP 49
3010: PUSH
3011: LD_EXP 50
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: PUSH
3022: FOR_IN
3023: IFFALSE 3051
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
3025: LD_VAR 0 2
3029: PPUSH
3030: LD_INT 3
3032: PPUSH
3033: LD_INT 0
3035: PPUSH
3036: CALL_OW 49
// ComHold ( i ) ;
3040: LD_VAR 0 2
3044: PPUSH
3045: CALL_OW 140
// end ;
3049: GO 3022
3051: POP
3052: POP
// end ;
3053: LD_VAR 0 1
3057: RET
// export function SelectGroup ; var units , selected , i ; begin
3058: LD_INT 0
3060: PPUSH
3061: PPUSH
3062: PPUSH
3063: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
3064: LD_ADDR_VAR 0 2
3068: PUSH
3069: LD_EXP 37
3073: PUSH
3074: LD_INT -3
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: PUSH
3081: LD_EXP 4
3085: ADD
3086: PUSH
3087: LD_INT -2
3089: PUSH
3090: LD_INT -4
3092: PUSH
3093: LD_EXP 44
3097: PUSH
3098: LD_EXP 45
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: LIST
3107: LIST
3108: ADD
3109: PUSH
3110: LD_INT -3
3112: PUSH
3113: EMPTY
3114: LIST
3115: ADD
3116: PUSH
3117: LD_EXP 6
3121: ADD
3122: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
3123: LD_ADDR_VAR 0 3
3127: PUSH
3128: LD_EXP 37
3132: PUSH
3133: LD_STRING Select four characters to go with you
3135: PPUSH
3136: LD_INT 4
3138: PPUSH
3139: LD_INT 4
3141: PPUSH
3142: LD_VAR 0 2
3146: PPUSH
3147: EMPTY
3148: PPUSH
3149: CALL_OW 42
3153: ADD
3154: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
3155: LD_ADDR_EXP 6
3159: PUSH
3160: LD_EXP 4
3164: PUSH
3165: LD_EXP 6
3169: UNION
3170: PUSH
3171: LD_VAR 0 3
3175: DIFF
3176: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
3177: LD_ADDR_VAR 0 4
3181: PUSH
3182: LD_EXP 6
3186: PUSH
3187: LD_EXP 45
3191: ADD
3192: PUSH
3193: FOR_IN
3194: IFFALSE 3225
// if GetSide ( i ) = 1 then
3196: LD_VAR 0 4
3200: PPUSH
3201: CALL_OW 255
3205: PUSH
3206: LD_INT 1
3208: EQUAL
3209: IFFALSE 3223
// SetSide ( i , 4 ) ;
3211: LD_VAR 0 4
3215: PPUSH
3216: LD_INT 4
3218: PPUSH
3219: CALL_OW 235
3223: GO 3193
3225: POP
3226: POP
// for i in selected do
3227: LD_ADDR_VAR 0 4
3231: PUSH
3232: LD_VAR 0 3
3236: PUSH
3237: FOR_IN
3238: IFFALSE 3269
// if GetSide ( i ) = 4 then
3240: LD_VAR 0 4
3244: PPUSH
3245: CALL_OW 255
3249: PUSH
3250: LD_INT 4
3252: EQUAL
3253: IFFALSE 3267
// SetSide ( i , 1 ) ;
3255: LD_VAR 0 4
3259: PPUSH
3260: LD_INT 1
3262: PPUSH
3263: CALL_OW 235
3267: GO 3237
3269: POP
3270: POP
// jmm_units := jmm_units diff cornel_units ;
3271: LD_ADDR_EXP 4
3275: PUSH
3276: LD_EXP 4
3280: PUSH
3281: LD_EXP 6
3285: DIFF
3286: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
3287: LD_EXP 38
3291: PPUSH
3292: CALL_OW 255
3296: PUSH
3297: LD_INT 4
3299: EQUAL
3300: IFFALSE 3315
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
3302: LD_EXP 3
3306: PUSH
3307: LD_STRING Bobby
3309: STR
3310: PPUSH
3311: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
3315: LD_EXP 39
3319: PPUSH
3320: CALL_OW 255
3324: PUSH
3325: LD_INT 4
3327: EQUAL
3328: IFFALSE 3343
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
3330: LD_EXP 3
3334: PUSH
3335: LD_STRING Cyrus
3337: STR
3338: PPUSH
3339: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
3343: LD_EXP 40
3347: PPUSH
3348: CALL_OW 255
3352: PUSH
3353: LD_INT 4
3355: EQUAL
3356: IFFALSE 3371
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
3358: LD_EXP 3
3362: PUSH
3363: LD_STRING Lisa
3365: STR
3366: PPUSH
3367: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
3371: LD_EXP 41
3375: PPUSH
3376: CALL_OW 255
3380: PUSH
3381: LD_INT 4
3383: EQUAL
3384: IFFALSE 3399
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
3386: LD_EXP 3
3390: PUSH
3391: LD_STRING Khatam
3393: STR
3394: PPUSH
3395: CALL_OW 40
// if GetSide ( Brian ) = 4 then
3399: LD_EXP 42
3403: PPUSH
3404: CALL_OW 255
3408: PUSH
3409: LD_INT 4
3411: EQUAL
3412: IFFALSE 3427
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3414: LD_EXP 3
3418: PUSH
3419: LD_STRING Brian
3421: STR
3422: PPUSH
3423: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3427: LD_EXP 43
3431: PPUSH
3432: CALL_OW 255
3436: PUSH
3437: LD_INT 4
3439: EQUAL
3440: IFFALSE 3455
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3442: LD_EXP 3
3446: PUSH
3447: LD_STRING Jerry
3449: STR
3450: PPUSH
3451: CALL_OW 40
// end ; end_of_file
3455: LD_VAR 0 1
3459: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3460: LD_INT 0
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
3469: PPUSH
3470: PPUSH
3471: PPUSH
3472: PPUSH
3473: PPUSH
3474: PPUSH
// ru_alert := false ;
3475: LD_ADDR_EXP 60
3479: PUSH
3480: LD_INT 0
3482: ST_TO_ADDR
// ru_produce_list := [ ] ;
3483: LD_ADDR_EXP 57
3487: PUSH
3488: EMPTY
3489: ST_TO_ADDR
// if Difficulty > 1 then
3490: LD_OWVAR 67
3494: PUSH
3495: LD_INT 1
3497: GREATER
3498: IFFALSE 3622
// begin uc_side := 3 ;
3500: LD_ADDR_OWVAR 20
3504: PUSH
3505: LD_INT 3
3507: ST_TO_ADDR
// uc_nation := 3 ;
3508: LD_ADDR_OWVAR 21
3512: PUSH
3513: LD_INT 3
3515: ST_TO_ADDR
// bc_type := b_breastwork ;
3516: LD_ADDR_OWVAR 42
3520: PUSH
3521: LD_INT 31
3523: ST_TO_ADDR
// bc_level := Difficulty ;
3524: LD_ADDR_OWVAR 43
3528: PUSH
3529: LD_OWVAR 67
3533: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3534: LD_INT 22
3536: PPUSH
3537: LD_INT 14
3539: PPUSH
3540: LD_INT 0
3542: PPUSH
3543: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3547: LD_INT 48
3549: PPUSH
3550: LD_INT 46
3552: PPUSH
3553: LD_INT 0
3555: PPUSH
3556: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3560: LD_INT 86
3562: PPUSH
3563: LD_INT 65
3565: PPUSH
3566: LD_INT 5
3568: PPUSH
3569: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3573: LD_INT 165
3575: PPUSH
3576: LD_INT 73
3578: PPUSH
3579: LD_INT 5
3581: PPUSH
3582: CALL_OW 47
// if Difficulty > 2 then
3586: LD_OWVAR 67
3590: PUSH
3591: LD_INT 2
3593: GREATER
3594: IFFALSE 3622
// begin CreateAndPlaceBuildingXYD ( 152 , 114 , 4 ) ;
3596: LD_INT 152
3598: PPUSH
3599: LD_INT 114
3601: PPUSH
3602: LD_INT 4
3604: PPUSH
3605: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 157 , 97 , 4 ) ;
3609: LD_INT 157
3611: PPUSH
3612: LD_INT 97
3614: PPUSH
3615: LD_INT 4
3617: PPUSH
3618: CALL_OW 47
// end ; end ; if Difficulty >= 3 then
3622: LD_OWVAR 67
3626: PUSH
3627: LD_INT 3
3629: GREATEREQUAL
3630: IFFALSE 3645
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3632: LD_INT 51
3634: PPUSH
3635: LD_INT 3
3637: PPUSH
3638: LD_INT 2
3640: PPUSH
3641: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3645: LD_ADDR_VAR 0 7
3649: PUSH
3650: LD_INT 22
3652: PUSH
3653: LD_INT 3
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: LD_INT 2
3662: PUSH
3663: LD_INT 30
3665: PUSH
3666: LD_INT 31
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: PUSH
3673: LD_INT 30
3675: PUSH
3676: LD_INT 32
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PPUSH
3692: CALL_OW 69
3696: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3697: LD_ADDR_VAR 0 8
3701: PUSH
3702: LD_INT 22
3704: PUSH
3705: LD_INT 3
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PUSH
3712: LD_INT 30
3714: PUSH
3715: LD_INT 4
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: PPUSH
3726: CALL_OW 69
3730: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3731: LD_ADDR_VAR 0 10
3735: PUSH
3736: LD_INT 22
3738: PUSH
3739: LD_INT 3
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: PUSH
3746: LD_INT 30
3748: PUSH
3749: LD_INT 3
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PPUSH
3760: CALL_OW 69
3764: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3765: LD_ADDR_VAR 0 9
3769: PUSH
3770: LD_INT 22
3772: PUSH
3773: LD_INT 3
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: PUSH
3780: LD_INT 30
3782: PUSH
3783: LD_INT 6
3785: PUSH
3786: EMPTY
3787: LIST
3788: LIST
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PPUSH
3794: CALL_OW 69
3798: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3799: LD_ADDR_VAR 0 2
3803: PUSH
3804: LD_INT 22
3806: PUSH
3807: LD_INT 3
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: PUSH
3814: LD_INT 30
3816: PUSH
3817: LD_INT 1
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: PPUSH
3828: CALL_OW 69
3832: PUSH
3833: FOR_IN
3834: IFFALSE 3878
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3836: LD_VAR 0 2
3840: PPUSH
3841: CALL_OW 274
3845: PPUSH
3846: LD_INT 1
3848: PPUSH
3849: LD_INT 1000
3851: PPUSH
3852: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3856: LD_VAR 0 2
3860: PPUSH
3861: CALL_OW 274
3865: PPUSH
3866: LD_INT 2
3868: PPUSH
3869: LD_INT 300
3871: PPUSH
3872: CALL_OW 277
// end ;
3876: GO 3833
3878: POP
3879: POP
// uc_side := 3 ;
3880: LD_ADDR_OWVAR 20
3884: PUSH
3885: LD_INT 3
3887: ST_TO_ADDR
// uc_nation := 3 ;
3888: LD_ADDR_OWVAR 21
3892: PUSH
3893: LD_INT 3
3895: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3896: LD_ADDR_VAR 0 11
3900: PUSH
3901: LD_INT 2
3903: PUSH
3904: LD_INT 3
3906: PUSH
3907: LD_INT 4
3909: PUSH
3910: LD_INT 4
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: PUSH
3919: LD_OWVAR 67
3923: ARRAY
3924: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3925: LD_ADDR_EXP 52
3929: PUSH
3930: LD_STRING Pokryshkin
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: LD_STRING 
3938: PPUSH
3939: CALL 41999 0 3
3943: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3944: LD_EXP 52
3948: PPUSH
3949: LD_INT 63
3951: PPUSH
3952: LD_INT 21
3954: PPUSH
3955: LD_INT 0
3957: PPUSH
3958: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3962: LD_EXP 52
3966: PPUSH
3967: CALL_OW 140
// InitHc ;
3971: CALL_OW 19
// for i in fac do
3975: LD_ADDR_VAR 0 2
3979: PUSH
3980: LD_VAR 0 10
3984: PUSH
3985: FOR_IN
3986: IFFALSE 4039
// begin for j = 1 to 6 do
3988: LD_ADDR_VAR 0 3
3992: PUSH
3993: DOUBLE
3994: LD_INT 1
3996: DEC
3997: ST_TO_ADDR
3998: LD_INT 6
4000: PUSH
4001: FOR_TO
4002: IFFALSE 4035
// begin PrepareHuman ( false , 3 , skill ) ;
4004: LD_INT 0
4006: PPUSH
4007: LD_INT 3
4009: PPUSH
4010: LD_VAR 0 11
4014: PPUSH
4015: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4019: CALL_OW 44
4023: PPUSH
4024: LD_VAR 0 2
4028: PPUSH
4029: CALL_OW 52
// end ;
4033: GO 4001
4035: POP
4036: POP
// end ;
4037: GO 3985
4039: POP
4040: POP
// for i in lab do
4041: LD_ADDR_VAR 0 2
4045: PUSH
4046: LD_VAR 0 9
4050: PUSH
4051: FOR_IN
4052: IFFALSE 4085
// begin PrepareHuman ( false , 4 , skill ) ;
4054: LD_INT 0
4056: PPUSH
4057: LD_INT 4
4059: PPUSH
4060: LD_VAR 0 11
4064: PPUSH
4065: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4069: CALL_OW 44
4073: PPUSH
4074: LD_VAR 0 2
4078: PPUSH
4079: CALL_OW 52
// end ;
4083: GO 4051
4085: POP
4086: POP
// for i in tw do
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: LD_VAR 0 7
4096: PUSH
4097: FOR_IN
4098: IFFALSE 4147
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
4100: LD_VAR 0 2
4104: PPUSH
4105: LD_INT 42
4107: PUSH
4108: LD_INT 43
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PUSH
4115: LD_INT 1
4117: PPUSH
4118: LD_INT 2
4120: PPUSH
4121: CALL_OW 12
4125: ARRAY
4126: PPUSH
4127: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
4131: LD_VAR 0 11
4135: PPUSH
4136: LD_VAR 0 2
4140: PPUSH
4141: CALL 775 0 2
// end ;
4145: GO 4097
4147: POP
4148: POP
// for i in bar do
4149: LD_ADDR_VAR 0 2
4153: PUSH
4154: LD_VAR 0 8
4158: PUSH
4159: FOR_IN
4160: IFFALSE 4193
// begin PrepareHuman ( false , 1 , skill ) ;
4162: LD_INT 0
4164: PPUSH
4165: LD_INT 1
4167: PPUSH
4168: LD_VAR 0 11
4172: PPUSH
4173: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4177: CALL_OW 44
4181: PPUSH
4182: LD_VAR 0 2
4186: PPUSH
4187: CALL_OW 52
// end ;
4191: GO 4159
4193: POP
4194: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
4195: LD_ADDR_VAR 0 13
4199: PUSH
4200: LD_INT 100
4202: PUSH
4203: LD_INT 9
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PUSH
4210: LD_INT 135
4212: PUSH
4213: LD_INT 60
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PUSH
4220: LD_INT 41
4222: PUSH
4223: LD_INT 6
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: LD_INT 22
4232: PUSH
4233: LD_INT 9
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_INT 84
4242: PUSH
4243: LD_INT 14
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: ST_TO_ADDR
// vehicles := [ ] ;
4257: LD_ADDR_VAR 0 12
4261: PUSH
4262: EMPTY
4263: ST_TO_ADDR
// for i in spot_xy do
4264: LD_ADDR_VAR 0 2
4268: PUSH
4269: LD_VAR 0 13
4273: PUSH
4274: FOR_IN
4275: IFFALSE 4433
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
4277: LD_ADDR_VAR 0 6
4281: PUSH
4282: LD_INT 3
4284: PPUSH
4285: LD_INT 3
4287: PPUSH
4288: LD_INT 22
4290: PPUSH
4291: LD_INT 1
4293: PPUSH
4294: LD_INT 1
4296: PPUSH
4297: LD_INT 42
4299: PUSH
4300: LD_INT 43
4302: PUSH
4303: LD_INT 44
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 1
4313: PPUSH
4314: LD_INT 3
4316: PPUSH
4317: CALL_OW 12
4321: ARRAY
4322: PPUSH
4323: LD_INT 100
4325: PPUSH
4326: CALL 497 0 7
4330: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
4331: LD_ADDR_VAR 0 12
4335: PUSH
4336: LD_VAR 0 12
4340: PPUSH
4341: LD_VAR 0 12
4345: PUSH
4346: LD_INT 1
4348: PLUS
4349: PPUSH
4350: LD_VAR 0 6
4354: PPUSH
4355: CALL_OW 2
4359: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4360: LD_VAR 0 6
4364: PPUSH
4365: LD_INT 3
4367: PPUSH
4368: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
4372: LD_VAR 0 6
4376: PPUSH
4377: LD_VAR 0 2
4381: PUSH
4382: LD_INT 1
4384: ARRAY
4385: PPUSH
4386: LD_VAR 0 2
4390: PUSH
4391: LD_INT 2
4393: ARRAY
4394: PPUSH
4395: LD_INT 0
4397: PPUSH
4398: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
4402: LD_INT 0
4404: PPUSH
4405: LD_INT 3
4407: PPUSH
4408: LD_VAR 0 11
4412: PPUSH
4413: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4417: CALL_OW 44
4421: PPUSH
4422: LD_VAR 0 6
4426: PPUSH
4427: CALL_OW 52
// end ;
4431: GO 4274
4433: POP
4434: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
4435: LD_ADDR_VAR 0 2
4439: PUSH
4440: DOUBLE
4441: LD_INT 1
4443: DEC
4444: ST_TO_ADDR
4445: LD_INT 5
4447: PUSH
4448: LD_INT 7
4450: PUSH
4451: LD_INT 8
4453: PUSH
4454: LD_INT 9
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: LIST
4462: PUSH
4463: LD_OWVAR 67
4467: ARRAY
4468: PUSH
4469: FOR_TO
4470: IFFALSE 4530
// begin PrepareHuman ( false , 1 , skill ) ;
4472: LD_INT 0
4474: PPUSH
4475: LD_INT 1
4477: PPUSH
4478: LD_VAR 0 11
4482: PPUSH
4483: CALL_OW 380
// un := CreateHuman ;
4487: LD_ADDR_VAR 0 5
4491: PUSH
4492: CALL_OW 44
4496: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4497: LD_VAR 0 5
4501: PPUSH
4502: LD_INT 11
4504: PPUSH
4505: LD_INT 0
4507: PPUSH
4508: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4512: LD_ADDR_EXP 55
4516: PUSH
4517: LD_EXP 55
4521: PUSH
4522: LD_VAR 0 5
4526: ADD
4527: ST_TO_ADDR
// end ;
4528: GO 4469
4530: POP
4531: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4532: LD_ADDR_VAR 0 2
4536: PUSH
4537: DOUBLE
4538: LD_INT 1
4540: DEC
4541: ST_TO_ADDR
4542: LD_INT 2
4544: PUSH
4545: LD_INT 3
4547: PUSH
4548: LD_INT 4
4550: PUSH
4551: LD_INT 5
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: PUSH
4560: LD_OWVAR 67
4564: ARRAY
4565: PUSH
4566: FOR_TO
4567: IFFALSE 4627
// begin PrepareHuman ( false , 1 , skill ) ;
4569: LD_INT 0
4571: PPUSH
4572: LD_INT 1
4574: PPUSH
4575: LD_VAR 0 11
4579: PPUSH
4580: CALL_OW 380
// un := CreateHuman ;
4584: LD_ADDR_VAR 0 5
4588: PUSH
4589: CALL_OW 44
4593: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4594: LD_VAR 0 5
4598: PPUSH
4599: LD_INT 12
4601: PPUSH
4602: LD_INT 0
4604: PPUSH
4605: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4609: LD_ADDR_EXP 53
4613: PUSH
4614: LD_EXP 53
4618: PUSH
4619: LD_VAR 0 5
4623: ADD
4624: ST_TO_ADDR
// end ;
4625: GO 4566
4627: POP
4628: POP
// for i = 1 to 2 do
4629: LD_ADDR_VAR 0 2
4633: PUSH
4634: DOUBLE
4635: LD_INT 1
4637: DEC
4638: ST_TO_ADDR
4639: LD_INT 2
4641: PUSH
4642: FOR_TO
4643: IFFALSE 4736
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4645: LD_INT 1
4647: PPUSH
4648: LD_INT 1
4650: PPUSH
4651: LD_VAR 0 11
4655: PPUSH
4656: CALL_OW 380
// hc_attr := [ 8 + Difficulty , 8 + Difficulty ] ;
4660: LD_ADDR_OWVAR 29
4664: PUSH
4665: LD_INT 8
4667: PUSH
4668: LD_OWVAR 67
4672: PLUS
4673: PUSH
4674: LD_INT 8
4676: PUSH
4677: LD_OWVAR 67
4681: PLUS
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: ST_TO_ADDR
// un := CreateHuman ;
4687: LD_ADDR_VAR 0 5
4691: PUSH
4692: CALL_OW 44
4696: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4697: LD_VAR 0 5
4701: PPUSH
4702: LD_INT 39
4704: PPUSH
4705: LD_INT 12
4707: PPUSH
4708: LD_INT 3
4710: PPUSH
4711: LD_INT 0
4713: PPUSH
4714: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4718: LD_ADDR_EXP 54
4722: PUSH
4723: LD_EXP 54
4727: PUSH
4728: LD_VAR 0 5
4732: ADD
4733: ST_TO_ADDR
// end ;
4734: GO 4642
4736: POP
4737: POP
// InitHc ;
4738: CALL_OW 19
// for i = 1 to 3 do
4742: LD_ADDR_VAR 0 2
4746: PUSH
4747: DOUBLE
4748: LD_INT 1
4750: DEC
4751: ST_TO_ADDR
4752: LD_INT 3
4754: PUSH
4755: FOR_TO
4756: IFFALSE 4822
// begin PrepareHuman ( false , 1 , skill ) ;
4758: LD_INT 0
4760: PPUSH
4761: LD_INT 1
4763: PPUSH
4764: LD_VAR 0 11
4768: PPUSH
4769: CALL_OW 380
// un := CreateHuman ;
4773: LD_ADDR_VAR 0 5
4777: PUSH
4778: CALL_OW 44
4782: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4783: LD_VAR 0 5
4787: PPUSH
4788: LD_INT 180
4790: PPUSH
4791: LD_INT 11
4793: PPUSH
4794: LD_INT 4
4796: PPUSH
4797: LD_INT 0
4799: PPUSH
4800: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4804: LD_ADDR_EXP 58
4808: PUSH
4809: LD_EXP 58
4813: PUSH
4814: LD_VAR 0 5
4818: ADD
4819: ST_TO_ADDR
// end ;
4820: GO 4755
4822: POP
4823: POP
// ru_vehicles := vehicles ;
4824: LD_ADDR_EXP 56
4828: PUSH
4829: LD_VAR 0 12
4833: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4834: LD_ADDR_EXP 59
4838: PUSH
4839: LD_INT 131
4841: PUSH
4842: LD_INT 121
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 113
4851: PUSH
4852: LD_INT 90
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 93
4861: PUSH
4862: LD_INT 62
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 106
4876: PUSH
4877: LD_INT 54
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 120
4886: PUSH
4887: LD_INT 80
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: LD_INT 143
4896: PUSH
4897: LD_INT 120
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 154
4911: PUSH
4912: LD_INT 116
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: LD_INT 140
4921: PUSH
4922: LD_INT 93
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: PUSH
4929: LD_INT 130
4931: PUSH
4932: LD_INT 58
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: LD_INT 105
4946: PUSH
4947: LD_INT 106
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 134
4956: PUSH
4957: LD_INT 98
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: LD_INT 159
4966: PUSH
4967: LD_INT 113
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: LIST
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: ST_TO_ADDR
// if Difficulty = 1 then
4985: LD_OWVAR 67
4989: PUSH
4990: LD_INT 1
4992: EQUAL
4993: IFFALSE 4997
// exit ;
4995: GO 5052
// for i = 1 to Difficulty - 1 do
4997: LD_ADDR_VAR 0 2
5001: PUSH
5002: DOUBLE
5003: LD_INT 1
5005: DEC
5006: ST_TO_ADDR
5007: LD_OWVAR 67
5011: PUSH
5012: LD_INT 1
5014: MINUS
5015: PUSH
5016: FOR_TO
5017: IFFALSE 5050
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
5019: LD_ADDR_EXP 57
5023: PUSH
5024: LD_EXP 57
5028: PUSH
5029: LD_INT 22
5031: PUSH
5032: LD_INT 1
5034: PUSH
5035: LD_INT 1
5037: PUSH
5038: LD_INT 43
5040: PUSH
5041: EMPTY
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: ADD
5047: ST_TO_ADDR
5048: GO 5016
5050: POP
5051: POP
// end ;
5052: LD_VAR 0 1
5056: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
5057: LD_INT 22
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: LD_INT 21
5069: PUSH
5070: LD_INT 2
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PPUSH
5081: CALL_OW 69
5085: IFFALSE 5179
5087: GO 5089
5089: DISABLE
5090: LD_INT 0
5092: PPUSH
5093: PPUSH
// begin enable ;
5094: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
5095: LD_ADDR_VAR 0 2
5099: PUSH
5100: LD_INT 22
5102: PUSH
5103: LD_INT 3
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: LD_INT 21
5112: PUSH
5113: LD_INT 2
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: PPUSH
5124: CALL_OW 69
5128: ST_TO_ADDR
// if filter then
5129: LD_VAR 0 2
5133: IFFALSE 5179
// for i in filter do
5135: LD_ADDR_VAR 0 1
5139: PUSH
5140: LD_VAR 0 2
5144: PUSH
5145: FOR_IN
5146: IFFALSE 5177
// if GetFuel ( i ) < 20 then
5148: LD_VAR 0 1
5152: PPUSH
5153: CALL_OW 261
5157: PUSH
5158: LD_INT 20
5160: LESS
5161: IFFALSE 5175
// SetFuel ( i , 20 ) ;
5163: LD_VAR 0 1
5167: PPUSH
5168: LD_INT 20
5170: PPUSH
5171: CALL_OW 240
5175: GO 5145
5177: POP
5178: POP
// end ;
5179: PPOPN 2
5181: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
5182: LD_EXP 57
5186: IFFALSE 5405
5188: GO 5190
5190: DISABLE
5191: LD_INT 0
5193: PPUSH
5194: PPUSH
5195: PPUSH
// begin enable ;
5196: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
5197: LD_ADDR_VAR 0 2
5201: PUSH
5202: LD_INT 22
5204: PUSH
5205: LD_INT 3
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PUSH
5212: LD_INT 30
5214: PUSH
5215: LD_INT 3
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PPUSH
5226: CALL_OW 69
5230: ST_TO_ADDR
// can_produce := [ ] ;
5231: LD_ADDR_VAR 0 3
5235: PUSH
5236: EMPTY
5237: ST_TO_ADDR
// if not fac then
5238: LD_VAR 0 2
5242: NOT
5243: IFFALSE 5248
// begin disable ;
5245: DISABLE
// exit ;
5246: GO 5405
// end ; for i in fac do
5248: LD_ADDR_VAR 0 1
5252: PUSH
5253: LD_VAR 0 2
5257: PUSH
5258: FOR_IN
5259: IFFALSE 5297
// if UnitsInside ( i ) then
5261: LD_VAR 0 1
5265: PPUSH
5266: CALL_OW 313
5270: IFFALSE 5295
// can_produce := Insert ( can_produce , 1 , i ) ;
5272: LD_ADDR_VAR 0 3
5276: PUSH
5277: LD_VAR 0 3
5281: PPUSH
5282: LD_INT 1
5284: PPUSH
5285: LD_VAR 0 1
5289: PPUSH
5290: CALL_OW 2
5294: ST_TO_ADDR
5295: GO 5258
5297: POP
5298: POP
// if not can_produce then
5299: LD_VAR 0 3
5303: NOT
5304: IFFALSE 5308
// exit ;
5306: GO 5405
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
5308: LD_VAR 0 3
5312: PUSH
5313: LD_INT 1
5315: PPUSH
5316: LD_VAR 0 3
5320: PPUSH
5321: CALL_OW 12
5325: ARRAY
5326: PPUSH
5327: LD_EXP 57
5331: PUSH
5332: LD_INT 1
5334: ARRAY
5335: PPUSH
5336: LD_EXP 57
5340: PUSH
5341: LD_INT 2
5343: ARRAY
5344: PPUSH
5345: LD_EXP 57
5349: PUSH
5350: LD_INT 3
5352: ARRAY
5353: PPUSH
5354: LD_EXP 57
5358: PUSH
5359: LD_INT 4
5361: ARRAY
5362: PPUSH
5363: CALL_OW 125
// for i = 1 to 4 do
5367: LD_ADDR_VAR 0 1
5371: PUSH
5372: DOUBLE
5373: LD_INT 1
5375: DEC
5376: ST_TO_ADDR
5377: LD_INT 4
5379: PUSH
5380: FOR_TO
5381: IFFALSE 5403
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
5383: LD_ADDR_EXP 57
5387: PUSH
5388: LD_EXP 57
5392: PPUSH
5393: LD_INT 1
5395: PPUSH
5396: CALL_OW 3
5400: ST_TO_ADDR
5401: GO 5380
5403: POP
5404: POP
// end ;
5405: PPOPN 3
5407: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
5408: LD_INT 0
5410: PPUSH
5411: PPUSH
5412: PPUSH
// for i = 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
5413: LD_ADDR_VAR 0 2
5417: PUSH
5418: DOUBLE
5419: LD_INT 1
5421: DEC
5422: ST_TO_ADDR
5423: LD_INT 2
5425: PUSH
5426: LD_INT 3
5428: PUSH
5429: LD_INT 3
5431: PUSH
5432: LD_INT 3
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: PUSH
5441: LD_OWVAR 67
5445: ARRAY
5446: PUSH
5447: FOR_TO
5448: IFFALSE 5597
// begin PrepareHuman ( false , 3 , 3 ) ;
5450: LD_INT 0
5452: PPUSH
5453: LD_INT 3
5455: PPUSH
5456: LD_INT 3
5458: PPUSH
5459: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
5463: LD_ADDR_VAR 0 3
5467: PUSH
5468: LD_INT 3
5470: PPUSH
5471: LD_INT 3
5473: PPUSH
5474: LD_INT 22
5476: PPUSH
5477: LD_INT 1
5479: PPUSH
5480: LD_INT 1
5482: PPUSH
5483: LD_INT 43
5485: PUSH
5486: LD_INT 42
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: PUSH
5493: LD_INT 1
5495: PPUSH
5496: LD_INT 2
5498: PPUSH
5499: CALL_OW 12
5503: ARRAY
5504: PPUSH
5505: LD_INT 70
5507: PPUSH
5508: CALL 497 0 7
5512: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5513: LD_VAR 0 3
5517: PPUSH
5518: LD_INT 4
5520: PPUSH
5521: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5525: LD_VAR 0 3
5529: PPUSH
5530: LD_INT 229
5532: PPUSH
5533: LD_INT 44
5535: PPUSH
5536: LD_INT 0
5538: PPUSH
5539: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5543: CALL_OW 44
5547: PPUSH
5548: LD_VAR 0 3
5552: PPUSH
5553: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5557: LD_ADDR_EXP 56
5561: PUSH
5562: LD_EXP 56
5566: PUSH
5567: LD_VAR 0 3
5571: ADD
5572: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5573: LD_VAR 0 3
5577: PPUSH
5578: LD_INT 191
5580: PPUSH
5581: LD_INT 32
5583: PPUSH
5584: CALL_OW 111
// Wait ( 0 0$02 ) ;
5588: LD_INT 70
5590: PPUSH
5591: CALL_OW 67
// end ;
5595: GO 5447
5597: POP
5598: POP
// end ;
5599: LD_VAR 0 1
5603: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5604: LD_EXP 31
5608: IFFALSE 5616
5610: PUSH
5611: LD_EXP 56
5615: AND
5616: IFFALSE 5790
5618: GO 5620
5620: DISABLE
5621: LD_INT 0
5623: PPUSH
5624: PPUSH
5625: PPUSH
// begin wait ( 0 0$50 ) ;
5626: LD_INT 1750
5628: PPUSH
5629: CALL_OW 67
// tmp := ru_vehicles ;
5633: LD_ADDR_VAR 0 3
5637: PUSH
5638: LD_EXP 56
5642: ST_TO_ADDR
// if not tmp then
5643: LD_VAR 0 3
5647: NOT
5648: IFFALSE 5652
// exit ;
5650: GO 5790
// repeat wait ( 0 0$1 ) ;
5652: LD_INT 35
5654: PPUSH
5655: CALL_OW 67
// for i in tmp do
5659: LD_ADDR_VAR 0 1
5663: PUSH
5664: LD_VAR 0 3
5668: PUSH
5669: FOR_IN
5670: IFFALSE 5781
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5672: LD_ADDR_VAR 0 2
5676: PUSH
5677: LD_INT 22
5679: PUSH
5680: LD_INT 1
5682: PUSH
5683: EMPTY
5684: LIST
5685: LIST
5686: PPUSH
5687: LD_VAR 0 1
5691: PPUSH
5692: CALL_OW 74
5696: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5697: LD_VAR 0 1
5701: PPUSH
5702: LD_VAR 0 2
5706: PPUSH
5707: CALL_OW 296
5711: PUSH
5712: LD_INT 10
5714: GREATER
5715: IFFALSE 5734
// ComAgressiveMove ( i , 69 , 101 ) else
5717: LD_VAR 0 1
5721: PPUSH
5722: LD_INT 69
5724: PPUSH
5725: LD_INT 101
5727: PPUSH
5728: CALL_OW 114
5732: GO 5748
// ComAttackUnit ( i , enemy ) ;
5734: LD_VAR 0 1
5738: PPUSH
5739: LD_VAR 0 2
5743: PPUSH
5744: CALL_OW 115
// if GetLives ( i ) < 250 then
5748: LD_VAR 0 1
5752: PPUSH
5753: CALL_OW 256
5757: PUSH
5758: LD_INT 250
5760: LESS
5761: IFFALSE 5779
// tmp := tmp diff i ;
5763: LD_ADDR_VAR 0 3
5767: PUSH
5768: LD_VAR 0 3
5772: PUSH
5773: LD_VAR 0 1
5777: DIFF
5778: ST_TO_ADDR
// end ;
5779: GO 5669
5781: POP
5782: POP
// until not tmp ;
5783: LD_VAR 0 3
5787: NOT
5788: IFFALSE 5652
// end ; end_of_file
5790: PPOPN 3
5792: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5793: LD_INT 0
5795: PPUSH
5796: PPUSH
5797: PPUSH
5798: PPUSH
5799: PPUSH
5800: PPUSH
5801: PPUSH
// InGameOn ;
5802: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5806: LD_EXP 37
5810: PPUSH
5811: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5815: LD_EXP 37
5819: PPUSH
5820: LD_EXP 44
5824: PPUSH
5825: CALL_OW 119
// if Bierezov then
5829: LD_EXP 45
5833: IFFALSE 5849
// ComTurnUnit ( Bierezov , Cornel ) ;
5835: LD_EXP 45
5839: PPUSH
5840: LD_EXP 44
5844: PPUSH
5845: CALL_OW 119
// for i in jmm_units do
5849: LD_ADDR_VAR 0 2
5853: PUSH
5854: LD_EXP 4
5858: PUSH
5859: FOR_IN
5860: IFFALSE 5878
// ComTurnUnit ( i , Cornel ) ;
5862: LD_VAR 0 2
5866: PPUSH
5867: LD_EXP 44
5871: PPUSH
5872: CALL_OW 119
5876: GO 5859
5878: POP
5879: POP
// units := cornel_units union Cornel ;
5880: LD_ADDR_VAR 0 3
5884: PUSH
5885: LD_EXP 6
5889: PUSH
5890: LD_EXP 44
5894: UNION
5895: ST_TO_ADDR
// repeat wait ( 1 ) ;
5896: LD_INT 1
5898: PPUSH
5899: CALL_OW 67
// for i in units do
5903: LD_ADDR_VAR 0 2
5907: PUSH
5908: LD_VAR 0 3
5912: PUSH
5913: FOR_IN
5914: IFFALSE 5947
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5916: LD_VAR 0 2
5920: PPUSH
5921: LD_EXP 37
5925: PPUSH
5926: CALL_OW 250
5930: PPUSH
5931: LD_EXP 37
5935: PPUSH
5936: CALL_OW 251
5940: PPUSH
5941: CALL_OW 111
5945: GO 5913
5947: POP
5948: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5949: LD_VAR 0 3
5953: PPUSH
5954: LD_INT 92
5956: PUSH
5957: LD_EXP 37
5961: PPUSH
5962: CALL_OW 250
5966: PUSH
5967: LD_EXP 37
5971: PPUSH
5972: CALL_OW 251
5976: PUSH
5977: LD_INT 10
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: PPUSH
5986: CALL_OW 72
5990: PUSH
5991: LD_VAR 0 3
5995: EQUAL
5996: IFFALSE 5896
// for i in units do
5998: LD_ADDR_VAR 0 2
6002: PUSH
6003: LD_VAR 0 3
6007: PUSH
6008: FOR_IN
6009: IFFALSE 6027
// ComTurnUnit ( i , JMM ) ;
6011: LD_VAR 0 2
6015: PPUSH
6016: LD_EXP 37
6020: PPUSH
6021: CALL_OW 119
6025: GO 6008
6027: POP
6028: POP
// ComTurnUnit ( Cornel , JMM ) ;
6029: LD_EXP 44
6033: PPUSH
6034: LD_EXP 37
6038: PPUSH
6039: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
6043: LD_EXP 37
6047: PPUSH
6048: LD_STRING D1-JMM-1
6050: PPUSH
6051: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
6055: LD_EXP 44
6059: PPUSH
6060: LD_STRING D1-Corn-1
6062: PPUSH
6063: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
6067: LD_EXP 37
6071: PPUSH
6072: LD_EXP 44
6076: PPUSH
6077: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
6081: LD_EXP 44
6085: PPUSH
6086: LD_EXP 37
6090: PPUSH
6091: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
6095: LD_INT 35
6097: PPUSH
6098: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
6102: LD_EXP 37
6106: PPUSH
6107: LD_EXP 44
6111: PPUSH
6112: CALL_OW 296
6116: PUSH
6117: LD_INT 6
6119: LESS
6120: IFFALSE 6095
// ChangeSideFog ( 4 , 1 ) ;
6122: LD_INT 4
6124: PPUSH
6125: LD_INT 1
6127: PPUSH
6128: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
6132: LD_EXP 37
6136: PPUSH
6137: LD_EXP 44
6141: PPUSH
6142: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6146: LD_EXP 44
6150: PPUSH
6151: LD_EXP 37
6155: PPUSH
6156: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
6160: LD_EXP 37
6164: PPUSH
6165: LD_STRING D1-JMM-2
6167: PPUSH
6168: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
6172: LD_EXP 37
6176: PPUSH
6177: LD_STRING D1-JMM-2a
6179: PPUSH
6180: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
6184: LD_EXP 44
6188: PPUSH
6189: LD_STRING D1-Corn-2
6191: PPUSH
6192: CALL_OW 88
// if bierezov_exist or debug then
6196: LD_EXP 7
6200: IFTRUE 6208
6202: PUSH
6203: LD_EXP 1
6207: OR
6208: IFFALSE 6449
// begin ComTurnUnit ( Cornel , Bierezov ) ;
6210: LD_EXP 44
6214: PPUSH
6215: LD_EXP 45
6219: PPUSH
6220: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
6224: LD_INT 10
6226: PPUSH
6227: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
6231: LD_EXP 44
6235: PPUSH
6236: LD_STRING D1a-Corn-1
6238: PPUSH
6239: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
6243: LD_EXP 37
6247: PPUSH
6248: LD_EXP 45
6252: PPUSH
6253: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
6257: LD_EXP 45
6261: PPUSH
6262: LD_EXP 37
6266: PPUSH
6267: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
6271: LD_EXP 37
6275: PPUSH
6276: LD_STRING D1a-JMM-1
6278: PPUSH
6279: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
6283: LD_EXP 37
6287: PPUSH
6288: LD_EXP 44
6292: PPUSH
6293: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6297: LD_EXP 44
6301: PPUSH
6302: LD_EXP 37
6306: PPUSH
6307: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
6311: LD_EXP 44
6315: PPUSH
6316: LD_STRING D1a-Corn-2
6318: PPUSH
6319: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
6323: LD_EXP 37
6327: PPUSH
6328: LD_STRING D1a-JMM-2
6330: PPUSH
6331: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
6335: LD_EXP 44
6339: PPUSH
6340: LD_STRING D1a-Corn-3
6342: PPUSH
6343: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
6347: LD_EXP 37
6351: PPUSH
6352: LD_STRING D1a-JMM-3
6354: PPUSH
6355: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
6359: LD_EXP 44
6363: PPUSH
6364: LD_STRING D1a-Corn-4
6366: PPUSH
6367: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
6371: LD_EXP 37
6375: PPUSH
6376: LD_STRING D1a-JMM-4
6378: PPUSH
6379: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
6383: LD_EXP 44
6387: PPUSH
6388: LD_STRING D1a-Corn-5
6390: PPUSH
6391: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
6395: LD_EXP 45
6399: PPUSH
6400: LD_EXP 44
6404: PPUSH
6405: CALL_OW 250
6409: PPUSH
6410: LD_EXP 44
6414: PPUSH
6415: CALL_OW 251
6419: PUSH
6420: LD_INT 2
6422: MINUS
6423: PPUSH
6424: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
6428: LD_EXP 45
6432: PPUSH
6433: LD_EXP 44
6437: PPUSH
6438: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
6442: LD_INT 10
6444: PPUSH
6445: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
6449: LD_EXP 37
6453: PPUSH
6454: LD_STRING D1b-JMM-1
6456: PPUSH
6457: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
6461: LD_EXP 44
6465: PPUSH
6466: LD_STRING D1b-Corn-1
6468: PPUSH
6469: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6473: LD_EXP 37
6477: PPUSH
6478: LD_STRING D1b-JMM-2
6480: PPUSH
6481: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6485: LD_EXP 44
6489: PPUSH
6490: LD_STRING D1b-Corn-2
6492: PPUSH
6493: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6497: LD_EXP 37
6501: PPUSH
6502: LD_STRING D1b-JMM-3
6504: PPUSH
6505: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6509: LD_INT 10
6511: PPUSH
6512: CALL_OW 67
// SayRadioNoFace ( Powell , D1b-Pow-3 ) ;
6516: LD_EXP 46
6520: PPUSH
6521: LD_STRING D1b-Pow-3
6523: PPUSH
6524: CALL_OW 586
// Say ( JMM , D1b-JMM-4 ) ;
6528: LD_EXP 37
6532: PPUSH
6533: LD_STRING D1b-JMM-4
6535: PPUSH
6536: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6540: LD_EXP 44
6544: PPUSH
6545: LD_STRING D1b-Corn-4
6547: PPUSH
6548: CALL_OW 88
// if Khatam then
6552: LD_EXP 41
6556: IFFALSE 6572
// Say ( Khatam , D1b-Khat-4 ) else
6558: LD_EXP 41
6562: PPUSH
6563: LD_STRING D1b-Khat-4
6565: PPUSH
6566: CALL_OW 88
6570: GO 6608
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6572: LD_EXP 6
6576: PPUSH
6577: LD_INT 26
6579: PUSH
6580: LD_INT 1
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PPUSH
6587: CALL_OW 72
6591: PUSH
6592: LD_EXP 44
6596: PUSH
6597: EMPTY
6598: LIST
6599: DIFF
6600: PPUSH
6601: LD_STRING D1b-Sol1-4
6603: PPUSH
6604: CALL 585 0 2
// if Cyrus then
6608: LD_EXP 39
6612: IFFALSE 6626
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6614: LD_EXP 39
6618: PPUSH
6619: LD_STRING D1b-Cyrus-4
6621: PPUSH
6622: CALL_OW 88
// if Lisa then
6626: LD_EXP 40
6630: IFFALSE 6688
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6632: LD_EXP 40
6636: PPUSH
6637: LD_STRING D1b-Lisa-4
6639: PPUSH
6640: CALL_OW 88
// if Cyrus then
6644: LD_EXP 39
6648: IFFALSE 6688
// begin if not IsInUnit ( Cyrus ) then
6650: LD_EXP 39
6654: PPUSH
6655: CALL_OW 310
6659: NOT
6660: IFFALSE 6676
// ComTurnUnit ( Cyrus , Lisa ) ;
6662: LD_EXP 39
6666: PPUSH
6667: LD_EXP 40
6671: PPUSH
6672: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6676: LD_EXP 39
6680: PPUSH
6681: LD_STRING D1b-Cyrus-5
6683: PPUSH
6684: CALL_OW 88
// end ; end ; SelectGroup ;
6688: CALL 3058 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6692: LD_EXP 37
6696: PPUSH
6697: LD_STRING D1d-JMM-1
6699: PPUSH
6700: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6704: LD_EXP 44
6708: PPUSH
6709: LD_STRING D1d-Corn-1
6711: PPUSH
6712: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6716: LD_ADDR_VAR 0 2
6720: PUSH
6721: LD_EXP 4
6725: PUSH
6726: LD_EXP 6
6730: ADD
6731: PUSH
6732: LD_EXP 37
6736: ADD
6737: PUSH
6738: FOR_IN
6739: IFFALSE 6752
// ComHold ( i ) ;
6741: LD_VAR 0 2
6745: PPUSH
6746: CALL_OW 140
6750: GO 6738
6752: POP
6753: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6754: LD_ADDR_VAR 0 4
6758: PUSH
6759: LD_INT 22
6761: PUSH
6762: LD_INT 1
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: LD_INT 21
6771: PUSH
6772: LD_INT 2
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: PPUSH
6783: CALL_OW 69
6787: ST_TO_ADDR
// if vehicles then
6788: LD_VAR 0 4
6792: IFFALSE 7132
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6794: LD_EXP 6
6798: PPUSH
6799: LD_INT 55
6801: PUSH
6802: EMPTY
6803: LIST
6804: PPUSH
6805: CALL_OW 72
6809: IFFALSE 6848
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6811: LD_ADDR_VAR 0 2
6815: PUSH
6816: LD_EXP 6
6820: PPUSH
6821: LD_INT 55
6823: PUSH
6824: EMPTY
6825: LIST
6826: PPUSH
6827: CALL_OW 72
6831: PUSH
6832: FOR_IN
6833: IFFALSE 6846
// ComExitVehicle ( i ) ;
6835: LD_VAR 0 2
6839: PPUSH
6840: CALL_OW 121
6844: GO 6832
6846: POP
6847: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6848: LD_ADDR_VAR 0 5
6852: PUSH
6853: LD_VAR 0 4
6857: PPUSH
6858: LD_INT 34
6860: PUSH
6861: LD_INT 51
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PPUSH
6868: CALL_OW 72
6872: ST_TO_ADDR
// if cargos then
6873: LD_VAR 0 5
6877: IFFALSE 7062
// begin vehicles := cargos ;
6879: LD_ADDR_VAR 0 4
6883: PUSH
6884: LD_VAR 0 5
6888: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6889: LD_ADDR_VAR 0 6
6893: PUSH
6894: LD_STRING 02_resources_4
6896: PPUSH
6897: LD_INT 0
6899: PPUSH
6900: CALL_OW 30
6904: ST_TO_ADDR
// if debug and not resources then
6905: LD_EXP 1
6909: IFFALSE 6918
6911: PUSH
6912: LD_VAR 0 6
6916: NOT
6917: AND
6918: IFFALSE 6928
// resources := 160 ;
6920: LD_ADDR_VAR 0 6
6924: PUSH
6925: LD_INT 160
6927: ST_TO_ADDR
// if resources mod 10 then
6928: LD_VAR 0 6
6932: PUSH
6933: LD_INT 10
6935: MOD
6936: IFFALSE 6958
// resources := resources - resources mod 10 ;
6938: LD_ADDR_VAR 0 6
6942: PUSH
6943: LD_VAR 0 6
6947: PUSH
6948: LD_VAR 0 6
6952: PUSH
6953: LD_INT 10
6955: MOD
6956: MINUS
6957: ST_TO_ADDR
// if resources then
6958: LD_VAR 0 6
6962: IFFALSE 7062
// for i in cargos do
6964: LD_ADDR_VAR 0 2
6968: PUSH
6969: LD_VAR 0 5
6973: PUSH
6974: FOR_IN
6975: IFFALSE 7060
// begin if resources < 100 then
6977: LD_VAR 0 6
6981: PUSH
6982: LD_INT 100
6984: LESS
6985: IFFALSE 7007
// begin cargo := resources ;
6987: LD_ADDR_VAR 0 7
6991: PUSH
6992: LD_VAR 0 6
6996: ST_TO_ADDR
// resources := 0 ;
6997: LD_ADDR_VAR 0 6
7001: PUSH
7002: LD_INT 0
7004: ST_TO_ADDR
// end else
7005: GO 7029
// begin cargo := 100 ;
7007: LD_ADDR_VAR 0 7
7011: PUSH
7012: LD_INT 100
7014: ST_TO_ADDR
// resources := resources - 100 ;
7015: LD_ADDR_VAR 0 6
7019: PUSH
7020: LD_VAR 0 6
7024: PUSH
7025: LD_INT 100
7027: MINUS
7028: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_INT 1
7036: PPUSH
7037: LD_VAR 0 7
7041: PPUSH
7042: CALL_OW 290
// if resources = 0 then
7046: LD_VAR 0 6
7050: PUSH
7051: LD_INT 0
7053: EQUAL
7054: IFFALSE 7058
// break ;
7056: GO 7060
// end ;
7058: GO 6974
7060: POP
7061: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
7062: LD_VAR 0 4
7066: PUSH
7067: LD_INT 1
7069: ARRAY
7070: PPUSH
7071: CALL_OW 311
7075: PPUSH
7076: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
7080: LD_VAR 0 4
7084: PUSH
7085: LD_INT 1
7087: ARRAY
7088: PPUSH
7089: LD_INT 4
7091: PPUSH
7092: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
7096: LD_EXP 44
7100: PPUSH
7101: LD_VAR 0 4
7105: PUSH
7106: LD_INT 1
7108: ARRAY
7109: PPUSH
7110: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
7114: LD_INT 35
7116: PPUSH
7117: CALL_OW 67
// until IsInUnit ( Cornel ) ;
7121: LD_EXP 44
7125: PPUSH
7126: CALL_OW 310
7130: IFFALSE 7114
// end ; InGameOff ;
7132: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
7136: LD_STRING M1
7138: PPUSH
7139: CALL_OW 337
// SaveForQuickRestart ;
7143: CALL_OW 22
// cornel_active := true ;
7147: LD_ADDR_EXP 8
7151: PUSH
7152: LD_INT 1
7154: ST_TO_ADDR
// end ;
7155: LD_VAR 0 1
7159: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
7160: LD_EXP 37
7164: PPUSH
7165: LD_EXP 47
7169: PPUSH
7170: CALL_OW 296
7174: PUSH
7175: LD_INT 10
7177: LESS
7178: IFFALSE 8567
7180: GO 7182
7182: DISABLE
7183: LD_INT 0
7185: PPUSH
7186: PPUSH
7187: PPUSH
7188: PPUSH
7189: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
7190: LD_ADDR_VAR 0 2
7194: PUSH
7195: LD_INT 89
7197: PUSH
7198: LD_INT 34
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 138
7207: PUSH
7208: LD_INT 63
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 196
7217: PUSH
7218: LD_INT 84
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 135
7227: PUSH
7228: LD_INT 52
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 103
7237: PUSH
7238: LD_INT 39
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 58
7247: PUSH
7248: LD_INT 30
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 38
7257: PUSH
7258: LD_INT 51
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: ST_TO_ADDR
// Video ( true ) ;
7274: LD_INT 1
7276: PPUSH
7277: CALL 80161 0 1
// if jmm_units then
7281: LD_EXP 4
7285: IFFALSE 7363
// for i in jmm_units do
7287: LD_ADDR_VAR 0 1
7291: PUSH
7292: LD_EXP 4
7296: PUSH
7297: FOR_IN
7298: IFFALSE 7361
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
7300: LD_VAR 0 1
7304: PPUSH
7305: LD_EXP 37
7309: PPUSH
7310: CALL_OW 296
7314: PUSH
7315: LD_INT 10
7317: LESS
7318: IFFALSE 7332
7320: PUSH
7321: LD_VAR 0 1
7325: PPUSH
7326: CALL_OW 310
7330: NOT
7331: AND
7332: IFFALSE 7350
// ComTurnUnit ( i , JMM ) else
7334: LD_VAR 0 1
7338: PPUSH
7339: LD_EXP 37
7343: PPUSH
7344: CALL_OW 119
7348: GO 7359
// ComHold ( i ) ;
7350: LD_VAR 0 1
7354: PPUSH
7355: CALL_OW 140
// end ;
7359: GO 7297
7361: POP
7362: POP
// if IsInUnit ( JMM ) then
7363: LD_EXP 37
7367: PPUSH
7368: CALL_OW 310
7372: IFFALSE 7397
// begin ComExitVehicle ( JMM ) ;
7374: LD_EXP 37
7378: PPUSH
7379: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
7383: LD_EXP 37
7387: PPUSH
7388: LD_EXP 47
7392: PPUSH
7393: CALL_OW 172
// end ; Wait ( 10 ) ;
7397: LD_INT 10
7399: PPUSH
7400: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
7404: LD_EXP 37
7408: PPUSH
7409: LD_EXP 47
7413: PPUSH
7414: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
7418: LD_INT 35
7420: PPUSH
7421: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
7425: LD_EXP 37
7429: PPUSH
7430: LD_EXP 47
7434: PPUSH
7435: CALL_OW 296
7439: PUSH
7440: LD_INT 6
7442: LESS
7443: IFFALSE 7418
// ComTurnUnit ( JMM , Lynch ) ;
7445: LD_EXP 37
7449: PPUSH
7450: LD_EXP 47
7454: PPUSH
7455: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
7459: LD_ADDR_VAR 0 1
7463: PUSH
7464: LD_EXP 47
7468: PUSH
7469: LD_EXP 48
7473: PUSH
7474: LD_EXP 49
7478: PUSH
7479: LD_EXP 50
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: PUSH
7490: FOR_IN
7491: IFFALSE 7509
// ComTurnUnit ( i , JMM ) ;
7493: LD_VAR 0 1
7497: PPUSH
7498: LD_EXP 37
7502: PPUSH
7503: CALL_OW 119
7507: GO 7490
7509: POP
7510: POP
// Wait ( 0 0$0.3 ) ;
7511: LD_INT 10
7513: PPUSH
7514: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7518: LD_EXP 37
7522: PPUSH
7523: LD_STRING D2-JMM-1
7525: PPUSH
7526: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7530: LD_EXP 47
7534: PPUSH
7535: LD_STRING D2-Sol1-1
7537: PPUSH
7538: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7542: LD_EXP 37
7546: PPUSH
7547: LD_STRING D2-JMM-2
7549: PPUSH
7550: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7554: LD_EXP 47
7558: PPUSH
7559: LD_STRING D2-Sol1-2
7561: PPUSH
7562: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7566: LD_EXP 37
7570: PPUSH
7571: LD_STRING D2-JMM-3
7573: PPUSH
7574: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7578: LD_EXP 47
7582: PPUSH
7583: LD_STRING D2-Sol1-3
7585: PPUSH
7586: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7590: LD_ADDR_VAR 0 1
7594: PUSH
7595: LD_INT 22
7597: PUSH
7598: LD_INT 8
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 69
7609: PUSH
7610: FOR_IN
7611: IFFALSE 7627
// SetSide ( i , 1 ) ;
7613: LD_VAR 0 1
7617: PPUSH
7618: LD_INT 1
7620: PPUSH
7621: CALL_OW 235
7625: GO 7610
7627: POP
7628: POP
// Say ( JMM , D2-JMM-4 ) ;
7629: LD_EXP 37
7633: PPUSH
7634: LD_STRING D2-JMM-4
7636: PPUSH
7637: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7641: LD_INT 1
7643: PPUSH
7644: LD_INT 5
7646: PPUSH
7647: CALL_OW 332
// for i = 1 to points do
7651: LD_ADDR_VAR 0 1
7655: PUSH
7656: DOUBLE
7657: LD_INT 1
7659: DEC
7660: ST_TO_ADDR
7661: LD_VAR 0 2
7665: PUSH
7666: FOR_TO
7667: IFFALSE 7842
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7669: LD_VAR 0 2
7673: PUSH
7674: LD_VAR 0 1
7678: ARRAY
7679: PUSH
7680: LD_INT 1
7682: ARRAY
7683: PPUSH
7684: LD_VAR 0 2
7688: PUSH
7689: LD_VAR 0 1
7693: ARRAY
7694: PUSH
7695: LD_INT 2
7697: ARRAY
7698: PPUSH
7699: CALL_OW 84
// if i = 1 then
7703: LD_VAR 0 1
7707: PUSH
7708: LD_INT 1
7710: EQUAL
7711: IFFALSE 7725
// Say ( Lynch , D2-Sol1-4 ) ;
7713: LD_EXP 47
7717: PPUSH
7718: LD_STRING D2-Sol1-4
7720: PPUSH
7721: CALL_OW 88
// if i = 2 then
7725: LD_VAR 0 1
7729: PUSH
7730: LD_INT 2
7732: EQUAL
7733: IFFALSE 7747
// Say ( JMM , D2-JMM-5 ) ;
7735: LD_EXP 37
7739: PPUSH
7740: LD_STRING D2-JMM-5
7742: PPUSH
7743: CALL_OW 88
// if i = 4 then
7747: LD_VAR 0 1
7751: PUSH
7752: LD_INT 4
7754: EQUAL
7755: IFFALSE 7779
// begin RevealFogArea ( 1 , troopsArea ) ;
7757: LD_INT 1
7759: PPUSH
7760: LD_INT 6
7762: PPUSH
7763: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7767: LD_EXP 47
7771: PPUSH
7772: LD_STRING D2-Sol1-5
7774: PPUSH
7775: CALL_OW 88
// end ; if i = 5 then
7779: LD_VAR 0 1
7783: PUSH
7784: LD_INT 5
7786: EQUAL
7787: IFFALSE 7801
// Say ( JMM , D2-JMM-6 ) ;
7789: LD_EXP 37
7793: PPUSH
7794: LD_STRING D2-JMM-6
7796: PPUSH
7797: CALL_OW 88
// if i = 7 then
7801: LD_VAR 0 1
7805: PUSH
7806: LD_INT 7
7808: EQUAL
7809: IFFALSE 7833
// begin RevealFogArea ( 1 , forestArea ) ;
7811: LD_INT 1
7813: PPUSH
7814: LD_INT 7
7816: PPUSH
7817: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7821: LD_EXP 47
7825: PPUSH
7826: LD_STRING D2-Sol1-6
7828: PPUSH
7829: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7833: LD_INT 46
7835: PPUSH
7836: CALL_OW 67
// end ;
7840: GO 7666
7842: POP
7843: POP
// CenterNowOnUnits ( JMM ) ;
7844: LD_EXP 37
7848: PPUSH
7849: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7853: LD_EXP 37
7857: PPUSH
7858: LD_STRING D2-JMM-7
7860: PPUSH
7861: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7865: LD_EXP 47
7869: PPUSH
7870: LD_STRING D2-Sol1-7
7872: PPUSH
7873: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7877: LD_EXP 37
7881: PPUSH
7882: LD_STRING D2-JMM-8
7884: PPUSH
7885: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7889: LD_ADDR_VAR 0 4
7893: PUSH
7894: LD_INT 22
7896: PUSH
7897: LD_INT 1
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 30
7906: PUSH
7907: LD_INT 31
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PPUSH
7918: CALL_OW 69
7922: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7923: LD_EXP 47
7927: PPUSH
7928: LD_VAR 0 4
7932: PUSH
7933: LD_INT 1
7935: ARRAY
7936: PPUSH
7937: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7941: LD_INT 65
7943: PPUSH
7944: LD_INT 101
7946: PPUSH
7947: CALL_OW 428
7951: IFFALSE 7974
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7953: LD_INT 65
7955: PPUSH
7956: LD_INT 101
7958: PPUSH
7959: CALL_OW 428
7963: PPUSH
7964: LD_INT 75
7966: PPUSH
7967: LD_INT 100
7969: PPUSH
7970: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7974: LD_INT 66
7976: PPUSH
7977: LD_INT 103
7979: PPUSH
7980: CALL_OW 428
7984: IFFALSE 8007
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7986: LD_INT 66
7988: PPUSH
7989: LD_INT 103
7991: PPUSH
7992: CALL_OW 428
7996: PPUSH
7997: LD_INT 75
7999: PPUSH
8000: LD_INT 100
8002: PPUSH
8003: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
8007: LD_ADDR_VAR 0 5
8011: PUSH
8012: LD_INT 22
8014: PUSH
8015: LD_INT 1
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: PUSH
8022: LD_INT 21
8024: PUSH
8025: LD_INT 2
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: PUSH
8032: LD_INT 91
8034: PUSH
8035: LD_EXP 37
8039: PUSH
8040: LD_INT 7
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: LIST
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: LIST
8052: PPUSH
8053: CALL_OW 69
8057: ST_TO_ADDR
// if tmp then
8058: LD_VAR 0 5
8062: IFFALSE 8079
// ComMoveXY ( tmp , 75 , 100 ) ;
8064: LD_VAR 0 5
8068: PPUSH
8069: LD_INT 75
8071: PPUSH
8072: LD_INT 100
8074: PPUSH
8075: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
8079: LD_ADDR_VAR 0 3
8083: PUSH
8084: LD_EXP 4
8088: PPUSH
8089: LD_INT 25
8091: PUSH
8092: LD_INT 1
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PPUSH
8099: CALL_OW 72
8103: PPUSH
8104: LD_EXP 37
8108: PPUSH
8109: CALL_OW 74
8113: ST_TO_ADDR
// if sol then
8114: LD_VAR 0 3
8118: IFFALSE 8178
// if GetDistUnits ( JMM , sol ) < 10 then
8120: LD_EXP 37
8124: PPUSH
8125: LD_VAR 0 3
8129: PPUSH
8130: CALL_OW 296
8134: PUSH
8135: LD_INT 10
8137: LESS
8138: IFFALSE 8178
// begin if IsInUnit ( sol ) then
8140: LD_VAR 0 3
8144: PPUSH
8145: CALL_OW 310
8149: IFFALSE 8160
// ComExitVehicle ( sol ) ;
8151: LD_VAR 0 3
8155: PPUSH
8156: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
8160: LD_VAR 0 3
8164: PPUSH
8165: LD_VAR 0 4
8169: PUSH
8170: LD_INT 2
8172: ARRAY
8173: PPUSH
8174: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
8178: LD_INT 10
8180: PPUSH
8181: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
8185: LD_EXP 37
8189: PPUSH
8190: LD_INT 65
8192: PPUSH
8193: LD_INT 101
8195: PPUSH
8196: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
8200: LD_EXP 37
8204: PPUSH
8205: LD_INT 63
8207: PPUSH
8208: LD_INT 100
8210: PPUSH
8211: CALL_OW 178
// tmp := 0 0$0 ;
8215: LD_ADDR_VAR 0 5
8219: PUSH
8220: LD_INT 0
8222: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8223: LD_INT 35
8225: PPUSH
8226: CALL_OW 67
// tmp := tmp + 0 0$1 ;
8230: LD_ADDR_VAR 0 5
8234: PUSH
8235: LD_VAR 0 5
8239: PUSH
8240: LD_INT 35
8242: PLUS
8243: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
8244: LD_EXP 37
8248: PPUSH
8249: LD_INT 65
8251: PPUSH
8252: LD_INT 101
8254: PPUSH
8255: CALL_OW 307
8259: IFTRUE 8271
8261: PUSH
8262: LD_VAR 0 5
8266: PUSH
8267: LD_INT 175
8269: GREATER
8270: OR
8271: IFFALSE 8223
// Say ( JMM , D2a-JMM-1 ) ;
8273: LD_EXP 37
8277: PPUSH
8278: LD_STRING D2a-JMM-1
8280: PPUSH
8281: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
8285: LD_EXP 48
8289: PPUSH
8290: LD_INT 66
8292: PPUSH
8293: LD_INT 103
8295: PPUSH
8296: CALL_OW 111
// tmp := 0 0$0 ;
8300: LD_ADDR_VAR 0 5
8304: PUSH
8305: LD_INT 0
8307: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8308: LD_INT 35
8310: PPUSH
8311: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
8315: LD_EXP 48
8319: PPUSH
8320: LD_INT 66
8322: PPUSH
8323: LD_INT 103
8325: PPUSH
8326: CALL_OW 307
8330: IFTRUE 8342
8332: PUSH
8333: LD_VAR 0 5
8337: PUSH
8338: LD_INT 175
8340: GREATER
8341: OR
8342: IFFALSE 8308
// ComTurnUnit ( Walker , JMM ) ;
8344: LD_EXP 48
8348: PPUSH
8349: LD_EXP 37
8353: PPUSH
8354: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
8358: LD_EXP 48
8362: PPUSH
8363: LD_STRING D2a-Sci1-1
8365: PPUSH
8366: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
8370: LD_EXP 37
8374: PPUSH
8375: LD_EXP 48
8379: PPUSH
8380: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
8384: LD_EXP 37
8388: PPUSH
8389: LD_STRING D2a-JMM-2
8391: PPUSH
8392: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
8396: LD_EXP 48
8400: PPUSH
8401: LD_STRING D2a-Sci1-2
8403: PPUSH
8404: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
8408: LD_EXP 37
8412: PPUSH
8413: LD_STRING D2a-JMM-3
8415: PPUSH
8416: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
8420: LD_EXP 48
8424: PPUSH
8425: LD_STRING D2a-Sci1-3
8427: PPUSH
8428: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
8432: LD_ADDR_EXP 4
8436: PUSH
8437: LD_EXP 4
8441: PUSH
8442: LD_EXP 47
8446: PUSH
8447: LD_EXP 48
8451: PUSH
8452: LD_EXP 49
8456: PUSH
8457: LD_EXP 50
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: ADD
8468: ST_TO_ADDR
// for i in jmm_units do
8469: LD_ADDR_VAR 0 1
8473: PUSH
8474: LD_EXP 4
8478: PUSH
8479: FOR_IN
8480: IFFALSE 8505
// if not IsInUnit ( i ) then
8482: LD_VAR 0 1
8486: PPUSH
8487: CALL_OW 310
8491: NOT
8492: IFFALSE 8503
// ComFree ( i ) ;
8494: LD_VAR 0 1
8498: PPUSH
8499: CALL_OW 139
8503: GO 8479
8505: POP
8506: POP
// Video ( false ) ;
8507: LD_INT 0
8509: PPUSH
8510: CALL 80161 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8514: LD_STRING MSolar1
8516: PPUSH
8517: CALL_OW 337
// jmm_on_west := true ;
8521: LD_ADDR_EXP 5
8525: PUSH
8526: LD_INT 1
8528: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8529: LD_INT 1050
8531: PPUSH
8532: CALL_OW 67
// frank_can_return := true ;
8536: LD_ADDR_EXP 12
8540: PUSH
8541: LD_INT 1
8543: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8544: LD_INT 6300
8546: PPUSH
8547: LD_INT 8400
8549: PPUSH
8550: CALL_OW 12
8554: PPUSH
8555: CALL_OW 67
// send_spec_patrol := true ;
8559: LD_ADDR_EXP 30
8563: PUSH
8564: LD_INT 1
8566: ST_TO_ADDR
// end ;
8567: PPOPN 5
8569: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8570: LD_INT 22
8572: PUSH
8573: LD_INT 1
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: LD_INT 34
8582: PUSH
8583: LD_INT 51
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: LD_INT 92
8592: PUSH
8593: LD_INT 63
8595: PUSH
8596: LD_INT 100
8598: PUSH
8599: LD_INT 5
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: LIST
8612: PUSH
8613: EMPTY
8614: LIST
8615: PPUSH
8616: CALL_OW 69
8620: IFFALSE 8629
8622: PUSH
8623: LD_EXP 5
8627: NOT
8628: AND
8629: IFFALSE 8742
8631: GO 8633
8633: DISABLE
8634: LD_INT 0
8636: PPUSH
8637: PPUSH
// begin enable ;
8638: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8639: LD_ADDR_VAR 0 2
8643: PUSH
8644: LD_INT 22
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 34
8656: PUSH
8657: LD_INT 51
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 92
8666: PUSH
8667: LD_INT 63
8669: PUSH
8670: LD_INT 100
8672: PUSH
8673: LD_INT 5
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: LIST
8686: PUSH
8687: EMPTY
8688: LIST
8689: PPUSH
8690: CALL_OW 69
8694: ST_TO_ADDR
// if not filter then
8695: LD_VAR 0 2
8699: NOT
8700: IFFALSE 8704
// exit ;
8702: GO 8742
// for i in filter do
8704: LD_ADDR_VAR 0 1
8708: PUSH
8709: LD_VAR 0 2
8713: PUSH
8714: FOR_IN
8715: IFFALSE 8740
// begin SetFuel ( i , 0 ) ;
8717: LD_VAR 0 1
8721: PPUSH
8722: LD_INT 0
8724: PPUSH
8725: CALL_OW 240
// ComStop ( i ) ;
8729: LD_VAR 0 1
8733: PPUSH
8734: CALL_OW 141
// end ;
8738: GO 8714
8740: POP
8741: POP
// end ;
8742: PPOPN 2
8744: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8745: LD_EXP 30
8749: IFFALSE 9850
8751: GO 8753
8753: DISABLE
8754: LD_INT 0
8756: PPUSH
8757: PPUSH
8758: PPUSH
8759: PPUSH
8760: PPUSH
8761: PPUSH
8762: PPUSH
// begin if not ru_spec_patrol then
8763: LD_EXP 54
8767: NOT
8768: IFFALSE 8772
// exit ;
8770: GO 9850
// dead1 := false ;
8772: LD_ADDR_VAR 0 1
8776: PUSH
8777: LD_INT 0
8779: ST_TO_ADDR
// dead2 := false ;
8780: LD_ADDR_VAR 0 2
8784: PUSH
8785: LD_INT 0
8787: ST_TO_ADDR
// inarea1 := false ;
8788: LD_ADDR_VAR 0 3
8792: PUSH
8793: LD_INT 0
8795: ST_TO_ADDR
// inarea2 := false ;
8796: LD_ADDR_VAR 0 4
8800: PUSH
8801: LD_INT 0
8803: ST_TO_ADDR
// tmp := [ ] ;
8804: LD_ADDR_VAR 0 6
8808: PUSH
8809: EMPTY
8810: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8811: LD_EXP 54
8815: PPUSH
8816: LD_INT 75
8818: PPUSH
8819: LD_INT 101
8821: PPUSH
8822: CALL_OW 114
// repeat wait ( 0 0$02 ) ;
8826: LD_INT 70
8828: PPUSH
8829: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8833: LD_INT 1
8835: PPUSH
8836: LD_EXP 54
8840: PUSH
8841: LD_INT 1
8843: ARRAY
8844: PPUSH
8845: CALL_OW 292
8849: IFTRUE 8880
8851: PUSH
8852: LD_EXP 54
8856: PPUSH
8857: LD_INT 92
8859: PUSH
8860: LD_INT 75
8862: PUSH
8863: LD_INT 101
8865: PUSH
8866: LD_INT 4
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 72
8879: OR
8880: IFFALSE 8826
// ComStop ( ru_spec_patrol ) ;
8882: LD_EXP 54
8886: PPUSH
8887: CALL_OW 141
// wait ( 0 0$3 ) ;
8891: LD_INT 105
8893: PPUSH
8894: CALL_OW 67
// DialogueOn ;
8898: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8902: LD_EXP 54
8906: PUSH
8907: LD_INT 1
8909: ARRAY
8910: PPUSH
8911: LD_STRING D8-Rus1-1
8913: PPUSH
8914: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8918: LD_EXP 37
8922: PPUSH
8923: LD_STRING D8-JMM-1
8925: PPUSH
8926: CALL_OW 88
// DialogueOff ;
8930: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8934: LD_EXP 54
8938: PPUSH
8939: LD_INT 13
8941: PPUSH
8942: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8946: LD_INT 35
8948: PPUSH
8949: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8953: LD_VAR 0 1
8957: NOT
8958: IFFALSE 8975
8960: PUSH
8961: LD_EXP 54
8965: PUSH
8966: LD_INT 1
8968: ARRAY
8969: PPUSH
8970: CALL_OW 301
8974: AND
8975: IFFALSE 8985
// dead1 := true ;
8977: LD_ADDR_VAR 0 1
8981: PUSH
8982: LD_INT 1
8984: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8985: LD_VAR 0 2
8989: NOT
8990: IFFALSE 9007
8992: PUSH
8993: LD_EXP 54
8997: PUSH
8998: LD_INT 2
9000: ARRAY
9001: PPUSH
9002: CALL_OW 301
9006: AND
9007: IFFALSE 9017
// dead2 := true ;
9009: LD_ADDR_VAR 0 2
9013: PUSH
9014: LD_INT 1
9016: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
9017: LD_VAR 0 3
9021: NOT
9022: IFFALSE 9042
9024: PUSH
9025: LD_EXP 54
9029: PUSH
9030: LD_INT 1
9032: ARRAY
9033: PPUSH
9034: LD_INT 14
9036: PPUSH
9037: CALL_OW 308
9041: AND
9042: IFFALSE 9052
// inarea1 := true ;
9044: LD_ADDR_VAR 0 3
9048: PUSH
9049: LD_INT 1
9051: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
9052: LD_VAR 0 4
9056: NOT
9057: IFFALSE 9077
9059: PUSH
9060: LD_EXP 54
9064: PUSH
9065: LD_INT 2
9067: ARRAY
9068: PPUSH
9069: LD_INT 14
9071: PPUSH
9072: CALL_OW 308
9076: AND
9077: IFFALSE 9087
// inarea2 := true ;
9079: LD_ADDR_VAR 0 4
9083: PUSH
9084: LD_INT 1
9086: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
9087: LD_VAR 0 1
9091: IFFALSE 9099
9093: PUSH
9094: LD_VAR 0 2
9098: AND
9099: IFTRUE 9115
9101: PUSH
9102: LD_VAR 0 1
9106: IFFALSE 9114
9108: PUSH
9109: LD_VAR 0 4
9113: AND
9114: OR
9115: IFTRUE 9131
9117: PUSH
9118: LD_VAR 0 2
9122: IFFALSE 9130
9124: PUSH
9125: LD_VAR 0 3
9129: AND
9130: OR
9131: IFTRUE 9147
9133: PUSH
9134: LD_VAR 0 3
9138: IFFALSE 9146
9140: PUSH
9141: LD_VAR 0 4
9145: AND
9146: OR
9147: IFFALSE 8946
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
9149: LD_VAR 0 3
9153: IFFALSE 9161
9155: PUSH
9156: LD_VAR 0 4
9160: AND
9161: IFTRUE 9177
9163: PUSH
9164: LD_VAR 0 1
9168: IFFALSE 9176
9170: PUSH
9171: LD_VAR 0 4
9175: AND
9176: OR
9177: IFTRUE 9193
9179: PUSH
9180: LD_VAR 0 2
9184: IFFALSE 9192
9186: PUSH
9187: LD_VAR 0 3
9191: AND
9192: OR
9193: IFFALSE 9830
// begin prepare_siege := true ;
9195: LD_ADDR_EXP 31
9199: PUSH
9200: LD_INT 1
9202: ST_TO_ADDR
// DialogueOn ;
9203: CALL_OW 6
// if ( inarea1 and inarea2 ) then
9207: LD_VAR 0 3
9211: IFFALSE 9219
9213: PUSH
9214: LD_VAR 0 4
9218: AND
9219: IFFALSE 9235
// Say ( JMM , D8b-JMM-1a ) else
9221: LD_EXP 37
9225: PPUSH
9226: LD_STRING D8b-JMM-1a
9228: PPUSH
9229: CALL_OW 88
9233: GO 9247
// Say ( JMM , D8b-JMM-1 ) ;
9235: LD_EXP 37
9239: PPUSH
9240: LD_STRING D8b-JMM-1
9242: PPUSH
9243: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
9247: LD_EXP 4
9251: PPUSH
9252: LD_INT 26
9254: PUSH
9255: LD_INT 1
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PPUSH
9262: CALL_OW 72
9266: PUSH
9267: LD_EXP 38
9271: PUSH
9272: LD_EXP 39
9276: PUSH
9277: LD_EXP 48
9281: PUSH
9282: LD_EXP 51
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: DIFF
9293: PPUSH
9294: LD_STRING D8b-Sol1-1
9296: PPUSH
9297: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
9301: LD_EXP 39
9305: IFFALSE 9319
9307: PUSH
9308: LD_EXP 39
9312: PUSH
9313: LD_EXP 4
9317: IN
9318: AND
9319: IFFALSE 9335
// Say ( Cyrus , D8b-Cyrus-1 ) else
9321: LD_EXP 39
9325: PPUSH
9326: LD_STRING D8b-Cyrus-1
9328: PPUSH
9329: CALL_OW 88
9333: GO 9347
// Say ( JMM , D8b-JMM-1a ) ;
9335: LD_EXP 37
9339: PPUSH
9340: LD_STRING D8b-JMM-1a
9342: PPUSH
9343: CALL_OW 88
// if Lisa and Lisa in jmm_units then
9347: LD_EXP 40
9351: IFFALSE 9365
9353: PUSH
9354: LD_EXP 40
9358: PUSH
9359: LD_EXP 4
9363: IN
9364: AND
9365: IFFALSE 9379
// Say ( Lisa , D8b-Lisa-2 ) ;
9367: LD_EXP 40
9371: PPUSH
9372: LD_STRING D8b-Lisa-2
9374: PPUSH
9375: CALL_OW 88
// if Bobby and Bobby in jmm_units then
9379: LD_EXP 38
9383: IFFALSE 9397
9385: PUSH
9386: LD_EXP 38
9390: PUSH
9391: LD_EXP 4
9395: IN
9396: AND
9397: IFFALSE 9413
// Say ( Bobby , D8b-Bobby-1 ) else
9399: LD_EXP 38
9403: PPUSH
9404: LD_STRING D8b-Bobby-1
9406: PPUSH
9407: CALL_OW 88
9411: GO 9473
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
9413: LD_ADDR_VAR 0 5
9417: PUSH
9418: LD_EXP 4
9422: PPUSH
9423: LD_INT 26
9425: PUSH
9426: LD_INT 1
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PPUSH
9433: CALL_OW 72
9437: PUSH
9438: LD_EXP 38
9442: PUSH
9443: LD_EXP 39
9447: PUSH
9448: LD_EXP 48
9452: PUSH
9453: LD_EXP 51
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: DIFF
9464: PPUSH
9465: LD_STRING D8b-Sol2-1
9467: PPUSH
9468: CALL 585 0 2
9472: ST_TO_ADDR
// DialogueOff ;
9473: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
9477: LD_EXP 39
9481: IFFALSE 9495
9483: PUSH
9484: LD_EXP 39
9488: PUSH
9489: LD_EXP 4
9493: IN
9494: AND
9495: IFFALSE 9520
// tmp := Insert ( tmp , 1 , Cyrus ) ;
9497: LD_ADDR_VAR 0 6
9501: PUSH
9502: LD_VAR 0 6
9506: PPUSH
9507: LD_INT 1
9509: PPUSH
9510: LD_EXP 39
9514: PPUSH
9515: CALL_OW 2
9519: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
9520: LD_EXP 38
9524: IFFALSE 9538
9526: PUSH
9527: LD_EXP 38
9531: PUSH
9532: LD_EXP 4
9536: IN
9537: AND
9538: IFFALSE 9563
// tmp := Insert ( tmp , 1 , Bobby ) ;
9540: LD_ADDR_VAR 0 6
9544: PUSH
9545: LD_VAR 0 6
9549: PPUSH
9550: LD_INT 1
9552: PPUSH
9553: LD_EXP 38
9557: PPUSH
9558: CALL_OW 2
9562: ST_TO_ADDR
// if sol then
9563: LD_VAR 0 5
9567: IFFALSE 9592
// tmp := Insert ( tmp , 1 , sol ) ;
9569: LD_ADDR_VAR 0 6
9573: PUSH
9574: LD_VAR 0 6
9578: PPUSH
9579: LD_INT 1
9581: PPUSH
9582: LD_VAR 0 5
9586: PPUSH
9587: CALL_OW 2
9591: ST_TO_ADDR
// if tmp then
9592: LD_VAR 0 6
9596: IFFALSE 9789
// begin SetSide ( tmp , 8 ) ;
9598: LD_VAR 0 6
9602: PPUSH
9603: LD_INT 8
9605: PPUSH
9606: CALL_OW 235
// for i in tmp do
9610: LD_ADDR_VAR 0 7
9614: PUSH
9615: LD_VAR 0 6
9619: PUSH
9620: FOR_IN
9621: IFFALSE 9634
// ComExit ( i ) ;
9623: LD_VAR 0 7
9627: PPUSH
9628: CALL 80587 0 1
9632: GO 9620
9634: POP
9635: POP
// wait ( 0 0$0.3 ) ;
9636: LD_INT 10
9638: PPUSH
9639: CALL_OW 67
// ComFree ( tmp ) ;
9643: LD_VAR 0 6
9647: PPUSH
9648: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9652: LD_VAR 0 6
9656: PPUSH
9657: LD_INT 15
9659: PPUSH
9660: CALL_OW 173
// AddComHold ( tmp ) ;
9664: LD_VAR 0 6
9668: PPUSH
9669: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9673: LD_INT 35
9675: PPUSH
9676: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9680: LD_VAR 0 6
9684: PUSH
9685: LD_INT 1
9687: ARRAY
9688: PPUSH
9689: CALL_OW 314
9693: NOT
9694: IFFALSE 9708
// ComMoveToArea ( tmp , cyrusEscape ) ;
9696: LD_VAR 0 6
9700: PPUSH
9701: LD_INT 15
9703: PPUSH
9704: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9708: LD_VAR 0 6
9712: PUSH
9713: LD_INT 1
9715: ARRAY
9716: PPUSH
9717: LD_INT 15
9719: PPUSH
9720: CALL_OW 308
9724: IFFALSE 9779
// begin RemoveUnit ( tmp [ 1 ] ) ;
9726: LD_VAR 0 6
9730: PUSH
9731: LD_INT 1
9733: ARRAY
9734: PPUSH
9735: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9739: LD_ADDR_EXP 4
9743: PUSH
9744: LD_EXP 4
9748: PUSH
9749: LD_VAR 0 6
9753: PUSH
9754: LD_INT 1
9756: ARRAY
9757: DIFF
9758: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9759: LD_ADDR_VAR 0 6
9763: PUSH
9764: LD_VAR 0 6
9768: PUSH
9769: LD_VAR 0 6
9773: PUSH
9774: LD_INT 1
9776: ARRAY
9777: DIFF
9778: ST_TO_ADDR
// end ; until tmp = 0 ;
9779: LD_VAR 0 6
9783: PUSH
9784: LD_INT 0
9786: EQUAL
9787: IFFALSE 9673
// end ; wait ( 0 0$30 ) ;
9789: LD_INT 1050
9791: PPUSH
9792: CALL_OW 67
// if ru_spec_patrol then
9796: LD_EXP 54
9800: IFFALSE 9828
// for i in ru_spec_patrol do
9802: LD_ADDR_VAR 0 7
9806: PUSH
9807: LD_EXP 54
9811: PUSH
9812: FOR_IN
9813: IFFALSE 9826
// RemoveUnit ( i ) ;
9815: LD_VAR 0 7
9819: PPUSH
9820: CALL_OW 64
9824: GO 9812
9826: POP
9827: POP
// end else
9828: GO 9850
// begin prepare_siege := false ;
9830: LD_ADDR_EXP 31
9834: PUSH
9835: LD_INT 0
9837: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9838: LD_EXP 37
9842: PPUSH
9843: LD_STRING D8a-JMM-1
9845: PPUSH
9846: CALL_OW 88
// end ; end ;
9850: PPOPN 7
9852: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9853: LD_EXP 12
9857: IFFALSE 11153
9859: GO 9861
9861: DISABLE
9862: LD_INT 0
9864: PPUSH
9865: PPUSH
9866: PPUSH
// begin uc_side := 8 ;
9867: LD_ADDR_OWVAR 20
9871: PUSH
9872: LD_INT 8
9874: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9875: LD_ADDR_VAR 0 3
9879: PUSH
9880: LD_INT 59
9882: PUSH
9883: LD_INT 71
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 122
9892: PUSH
9893: LD_INT 117
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9904: LD_ADDR_EXP 51
9908: PUSH
9909: LD_STRING Frank
9911: PPUSH
9912: LD_INT 0
9914: PPUSH
9915: LD_STRING 
9917: PPUSH
9918: CALL 41999 0 3
9922: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9923: LD_ADDR_VAR 0 1
9927: PUSH
9928: LD_INT 1
9930: PPUSH
9931: LD_INT 2
9933: PPUSH
9934: CALL_OW 12
9938: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9939: LD_EXP 51
9943: PPUSH
9944: LD_VAR 0 3
9948: PUSH
9949: LD_VAR 0 1
9953: ARRAY
9954: PUSH
9955: LD_INT 1
9957: ARRAY
9958: PPUSH
9959: LD_VAR 0 3
9963: PUSH
9964: LD_VAR 0 1
9968: ARRAY
9969: PUSH
9970: LD_INT 2
9972: ARRAY
9973: PPUSH
9974: LD_INT 0
9976: PPUSH
9977: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9981: LD_EXP 51
9985: PPUSH
9986: LD_INT 1
9988: PPUSH
9989: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9993: LD_INT 35
9995: PPUSH
9996: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
10000: LD_EXP 51
10004: PPUSH
10005: LD_EXP 37
10009: PPUSH
10010: CALL_OW 296
10014: PUSH
10015: LD_INT 8
10017: LESS
10018: IFFALSE 10035
10020: PUSH
10021: LD_EXP 51
10025: PPUSH
10026: CALL_OW 256
10030: PUSH
10031: LD_INT 250
10033: GREATER
10034: AND
10035: IFFALSE 9993
// Video ( true ) ;
10037: LD_INT 1
10039: PPUSH
10040: CALL 80161 0 1
// CenterOnUnits ( JMM ) ;
10044: LD_EXP 37
10048: PPUSH
10049: CALL_OW 85
// if IsInUnit ( JMM ) then
10053: LD_EXP 37
10057: PPUSH
10058: CALL_OW 310
10062: IFFALSE 10073
// ComFree ( JMM ) ;
10064: LD_EXP 37
10068: PPUSH
10069: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
10073: LD_EXP 37
10077: PPUSH
10078: LD_EXP 51
10082: PPUSH
10083: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
10087: LD_EXP 51
10091: PPUSH
10092: LD_EXP 37
10096: PPUSH
10097: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
10101: LD_EXP 37
10105: PPUSH
10106: LD_STRING D6-JMM-1
10108: PPUSH
10109: CALL_OW 88
// p := 0 ;
10113: LD_ADDR_VAR 0 2
10117: PUSH
10118: LD_INT 0
10120: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10121: LD_INT 35
10123: PPUSH
10124: CALL_OW 67
// p := p + 1 ;
10128: LD_ADDR_VAR 0 2
10132: PUSH
10133: LD_VAR 0 2
10137: PUSH
10138: LD_INT 1
10140: PLUS
10141: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
10142: LD_EXP 37
10146: PPUSH
10147: LD_EXP 51
10151: PPUSH
10152: CALL_OW 296
10156: PUSH
10157: LD_INT 8
10159: LESS
10160: IFTRUE 10172
10162: PUSH
10163: LD_VAR 0 2
10167: PUSH
10168: LD_INT 7
10170: GREATER
10171: OR
10172: IFFALSE 10121
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
10174: LD_EXP 40
10178: IFFALSE 10200
10180: PUSH
10181: LD_EXP 40
10185: PPUSH
10186: LD_EXP 51
10190: PPUSH
10191: CALL_OW 296
10195: PUSH
10196: LD_INT 20
10198: LESS
10199: AND
10200: IFFALSE 10214
10202: PUSH
10203: LD_EXP 40
10207: PUSH
10208: LD_EXP 4
10212: IN
10213: AND
10214: IFFALSE 10239
// begin ComFree ( Lisa ) ;
10216: LD_EXP 40
10220: PPUSH
10221: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
10225: LD_EXP 40
10229: PPUSH
10230: LD_EXP 51
10234: PPUSH
10235: CALL_OW 172
// end ; if Lynch then
10239: LD_EXP 47
10243: IFFALSE 10268
// begin ComFree ( Lynch ) ;
10245: LD_EXP 47
10249: PPUSH
10250: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
10254: LD_EXP 47
10258: PPUSH
10259: LD_EXP 51
10263: PPUSH
10264: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
10268: LD_EXP 37
10272: PPUSH
10273: LD_EXP 51
10277: PPUSH
10278: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10282: LD_EXP 51
10286: PPUSH
10287: LD_EXP 37
10291: PPUSH
10292: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
10296: LD_EXP 51
10300: PPUSH
10301: LD_STRING D6-Frank-1
10303: PPUSH
10304: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
10308: LD_INT 69
10310: PPUSH
10311: LD_INT 20
10313: PPUSH
10314: LD_INT 1
10316: PPUSH
10317: LD_INT 20
10319: NEG
10320: PPUSH
10321: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
10325: LD_INT 69
10327: PPUSH
10328: LD_INT 20
10330: PPUSH
10331: LD_INT 1
10333: PPUSH
10334: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
10338: LD_INT 190
10340: PPUSH
10341: LD_INT 31
10343: PPUSH
10344: LD_INT 1
10346: PPUSH
10347: LD_INT 20
10349: NEG
10350: PPUSH
10351: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
10355: LD_INT 190
10357: PPUSH
10358: LD_INT 31
10360: PPUSH
10361: LD_INT 1
10363: PPUSH
10364: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
10368: LD_INT 69
10370: PPUSH
10371: LD_INT 20
10373: PPUSH
10374: CALL_OW 84
// Wait ( 0 0$02 ) ;
10378: LD_INT 70
10380: PPUSH
10381: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
10385: LD_EXP 37
10389: PPUSH
10390: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
10394: LD_EXP 40
10398: IFFALSE 10420
10400: PUSH
10401: LD_EXP 40
10405: PPUSH
10406: LD_EXP 51
10410: PPUSH
10411: CALL_OW 296
10415: PUSH
10416: LD_INT 20
10418: LESS
10419: AND
10420: IFFALSE 10433
10422: PUSH
10423: LD_EXP 40
10427: PPUSH
10428: CALL_OW 302
10432: AND
10433: IFFALSE 10447
10435: PUSH
10436: LD_EXP 40
10440: PUSH
10441: LD_EXP 4
10445: IN
10446: AND
10447: IFFALSE 10571
// begin ComFree ( Lisa ) ;
10449: LD_EXP 40
10453: PPUSH
10454: CALL_OW 139
// p := 0 ;
10458: LD_ADDR_VAR 0 2
10462: PUSH
10463: LD_INT 0
10465: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10466: LD_INT 35
10468: PPUSH
10469: CALL_OW 67
// p := p + 1 ;
10473: LD_ADDR_VAR 0 2
10477: PUSH
10478: LD_VAR 0 2
10482: PUSH
10483: LD_INT 1
10485: PLUS
10486: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10487: LD_EXP 40
10491: PPUSH
10492: LD_EXP 51
10496: PPUSH
10497: CALL_OW 296
10501: PUSH
10502: LD_INT 7
10504: LESS
10505: IFTRUE 10517
10507: PUSH
10508: LD_VAR 0 2
10512: PUSH
10513: LD_INT 7
10515: GREATER
10516: OR
10517: IFFALSE 10466
// Say ( Lisa , D6-Lisa-1 ) ;
10519: LD_EXP 40
10523: PPUSH
10524: LD_STRING D6-Lisa-1
10526: PPUSH
10527: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10531: LD_EXP 40
10535: PPUSH
10536: LD_EXP 51
10540: PPUSH
10541: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10545: LD_EXP 51
10549: PPUSH
10550: LD_EXP 40
10554: PPUSH
10555: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10559: LD_EXP 51
10563: PPUSH
10564: LD_STRING D6-Frank-2
10566: PPUSH
10567: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10571: LD_EXP 47
10575: IFFALSE 10597
10577: PUSH
10578: LD_EXP 47
10582: PPUSH
10583: LD_EXP 51
10587: PPUSH
10588: CALL_OW 296
10592: PUSH
10593: LD_INT 20
10595: LESS
10596: AND
10597: IFFALSE 10610
10599: PUSH
10600: LD_EXP 47
10604: PPUSH
10605: CALL_OW 302
10609: AND
10610: IFFALSE 10807
// begin ComTurnUnit ( Lynch , JMM ) ;
10612: LD_EXP 47
10616: PPUSH
10617: LD_EXP 37
10621: PPUSH
10622: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10626: LD_EXP 51
10630: PPUSH
10631: LD_EXP 37
10635: PPUSH
10636: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10640: LD_EXP 47
10644: PPUSH
10645: LD_STRING D6-Sol1-2
10647: PPUSH
10648: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10652: LD_EXP 37
10656: PPUSH
10657: LD_STRING D6-JMM-2
10659: PPUSH
10660: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10664: LD_EXP 51
10668: PPUSH
10669: LD_STRING D6-Frank-3
10671: PPUSH
10672: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10676: LD_EXP 37
10680: PPUSH
10681: LD_STRING D6-JMM-3
10683: PPUSH
10684: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10688: LD_EXP 51
10692: PPUSH
10693: LD_STRING D6-Frank-4
10695: PPUSH
10696: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10700: LD_EXP 51
10704: PPUSH
10705: LD_STRING D6-Frank-4a
10707: PPUSH
10708: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10712: LD_EXP 37
10716: PPUSH
10717: LD_STRING D6-JMM-4
10719: PPUSH
10720: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10724: LD_EXP 51
10728: PPUSH
10729: LD_STRING D6-Frank-5
10731: PPUSH
10732: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10736: LD_EXP 40
10740: IFFALSE 10753
10742: PUSH
10743: LD_EXP 40
10747: PPUSH
10748: CALL_OW 302
10752: AND
10753: IFFALSE 10767
10755: PUSH
10756: LD_EXP 40
10760: PUSH
10761: LD_EXP 4
10765: IN
10766: AND
10767: IFFALSE 10781
// Say ( Lisa , D6-Lisa-5 ) ;
10769: LD_EXP 40
10773: PPUSH
10774: LD_STRING D6-Lisa-5
10776: PPUSH
10777: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10781: LD_EXP 51
10785: PPUSH
10786: LD_STRING D6-Frank-6
10788: PPUSH
10789: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10793: LD_EXP 37
10797: PPUSH
10798: LD_STRING D6-JMM-6
10800: PPUSH
10801: CALL_OW 88
// end else
10805: GO 10938
// begin ComTurnUnit ( Frank , JMM ) ;
10807: LD_EXP 51
10811: PPUSH
10812: LD_EXP 37
10816: PPUSH
10817: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10821: LD_EXP 51
10825: PPUSH
10826: LD_STRING D6-Frank-4
10828: PPUSH
10829: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10833: LD_EXP 51
10837: PPUSH
10838: LD_STRING D6-Frank-4a
10840: PPUSH
10841: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10845: LD_EXP 37
10849: PPUSH
10850: LD_STRING D6-JMM-4
10852: PPUSH
10853: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10857: LD_EXP 51
10861: PPUSH
10862: LD_STRING D6-Frank-5
10864: PPUSH
10865: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10869: LD_EXP 40
10873: IFFALSE 10886
10875: PUSH
10876: LD_EXP 40
10880: PPUSH
10881: CALL_OW 302
10885: AND
10886: IFFALSE 10900
10888: PUSH
10889: LD_EXP 40
10893: PUSH
10894: LD_EXP 4
10898: IN
10899: AND
10900: IFFALSE 10914
// Say ( Lisa , D6-Lisa-5 ) ;
10902: LD_EXP 40
10906: PPUSH
10907: LD_STRING D6-Lisa-5
10909: PPUSH
10910: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10914: LD_EXP 51
10918: PPUSH
10919: LD_STRING D6-Frank-6
10921: PPUSH
10922: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10926: LD_EXP 37
10930: PPUSH
10931: LD_STRING D6-JMM-6
10933: PPUSH
10934: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10938: LD_STRING Q1
10940: PPUSH
10941: CALL_OW 97
10945: PUSH
10946: LD_INT 1
10948: DOUBLE
10949: EQUAL
10950: IFTRUE 10954
10952: GO 10965
10954: POP
// frank_send_to_scout := true ; 2 :
10955: LD_ADDR_EXP 15
10959: PUSH
10960: LD_INT 1
10962: ST_TO_ADDR
10963: GO 10985
10965: LD_INT 2
10967: DOUBLE
10968: EQUAL
10969: IFTRUE 10973
10971: GO 10984
10973: POP
// frank_send_to_scout := false ; end ;
10974: LD_ADDR_EXP 15
10978: PUSH
10979: LD_INT 0
10981: ST_TO_ADDR
10982: GO 10985
10984: POP
// Video ( false ) ;
10985: LD_INT 0
10987: PPUSH
10988: CALL 80161 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10992: LD_EXP 37
10996: PUSH
10997: LD_EXP 40
11001: PUSH
11002: LD_EXP 47
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: LIST
11011: PPUSH
11012: CALL_OW 139
// if frank_send_to_scout then
11016: LD_EXP 15
11020: IFFALSE 11074
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
11022: LD_EXP 51
11026: PPUSH
11027: LD_INT 15
11029: PPUSH
11030: CALL_OW 113
// wait ( 0 0$01 ) ;
11034: LD_INT 35
11036: PPUSH
11037: CALL_OW 67
// until not See ( 1 , Frank ) ;
11041: LD_INT 1
11043: PPUSH
11044: LD_EXP 51
11048: PPUSH
11049: CALL_OW 292
11053: NOT
11054: IFFALSE 11022
// wait ( 0 0$02 ) ;
11056: LD_INT 70
11058: PPUSH
11059: CALL_OW 67
// RemoveUnit ( Frank ) ;
11063: LD_EXP 51
11067: PPUSH
11068: CALL_OW 64
// end else
11072: GO 11086
// SetSide ( Frank , 1 ) ;
11074: LD_EXP 51
11078: PPUSH
11079: LD_INT 1
11081: PPUSH
11082: CALL_OW 235
// send_attack_on_cornel_base := true ;
11086: LD_ADDR_EXP 26
11090: PUSH
11091: LD_INT 1
11093: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11094: LD_INT 35
11096: PPUSH
11097: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
11101: LD_ADDR_EXP 29
11105: PUSH
11106: LD_EXP 29
11110: PPUSH
11111: LD_STRING -
11113: PPUSH
11114: CALL 1077 0 2
11118: ST_TO_ADDR
// if debug then
11119: LD_EXP 1
11123: IFFALSE 11135
// debug_strings := time_to_prepare ;
11125: LD_ADDR_OWVAR 48
11129: PUSH
11130: LD_EXP 29
11134: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
11135: LD_EXP 29
11139: PUSH
11140: LD_INT 0
11142: EQUAL
11143: IFFALSE 11094
// cornel_prepared := true ;
11145: LD_ADDR_EXP 11
11149: PUSH
11150: LD_INT 1
11152: ST_TO_ADDR
// end ;
11153: PPOPN 3
11155: END
// every 0 0$01 trigger cornel_prepared do
11156: LD_EXP 11
11160: IFFALSE 11470
11162: GO 11164
11164: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
11165: LD_EXP 44
11169: PPUSH
11170: LD_STRING D3-Corn-1
11172: PPUSH
11173: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
11177: LD_STRING MOutWait
11179: PPUSH
11180: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
11184: LD_INT 35
11186: PPUSH
11187: CALL_OW 67
// until cornel_counter = 0 ;
11191: LD_EXP 10
11195: PUSH
11196: LD_INT 0
11198: EQUAL
11199: IFFALSE 11184
// SayRadio ( Cornel , D3a-Corn-1 ) ;
11201: LD_EXP 44
11205: PPUSH
11206: LD_STRING D3a-Corn-1
11208: PPUSH
11209: CALL_OW 94
// if IsOk ( Cornel ) then
11213: LD_EXP 44
11217: PPUSH
11218: CALL_OW 302
11222: IFFALSE 11236
// Say ( JMM , D3a-JMM-1 ) ;
11224: LD_EXP 37
11228: PPUSH
11229: LD_STRING D3a-JMM-1
11231: PPUSH
11232: CALL_OW 88
// end_mission_allowed := true ;
11236: LD_ADDR_EXP 21
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
11244: LD_STRING M2
11246: PPUSH
11247: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
11251: LD_INT 9
11253: PPUSH
11254: LD_INT 1
11256: PPUSH
11257: CALL_OW 424
// Wait ( 0 0$05 ) ;
11261: LD_INT 175
11263: PPUSH
11264: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
11268: LD_EXP 44
11272: PPUSH
11273: LD_STRING D3a-Corn-2
11275: PPUSH
11276: CALL_OW 94
// cornel_attack := true ;
11280: LD_ADDR_EXP 9
11284: PUSH
11285: LD_INT 1
11287: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
11288: LD_INT 105
11290: PPUSH
11291: CALL_OW 67
// AddMoreTanks ( ) ;
11295: CALL 5408 0 0
// if frank_send_to_scout then
11299: LD_EXP 15
11303: IFFALSE 11470
// begin InitHc ;
11305: CALL_OW 19
// InitUc ;
11309: CALL_OW 18
// uc_side := 8 ;
11313: LD_ADDR_OWVAR 20
11317: PUSH
11318: LD_INT 8
11320: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
11321: LD_ADDR_EXP 51
11325: PUSH
11326: LD_STRING Frank
11328: PPUSH
11329: LD_INT 0
11331: PPUSH
11332: LD_STRING 
11334: PPUSH
11335: CALL 41999 0 3
11339: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
11340: LD_EXP 51
11344: PPUSH
11345: LD_INT 6
11347: PPUSH
11348: LD_INT 9
11350: PPUSH
11351: LD_INT 0
11353: PPUSH
11354: CALL_OW 48
// ComCrawl ( Frank ) ;
11358: LD_EXP 51
11362: PPUSH
11363: CALL_OW 137
// repeat wait ( 10 ) ;
11367: LD_INT 10
11369: PPUSH
11370: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11374: LD_EXP 37
11378: PPUSH
11379: LD_EXP 51
11383: PPUSH
11384: CALL_OW 296
11388: PUSH
11389: LD_INT 9
11391: LESS
11392: IFTRUE 11413
11394: PUSH
11395: LD_INT 9
11397: PPUSH
11398: LD_INT 22
11400: PUSH
11401: LD_INT 1
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: PPUSH
11408: CALL_OW 70
11412: OR
11413: IFFALSE 11367
// if IsDead ( Frank ) then
11415: LD_EXP 51
11419: PPUSH
11420: CALL_OW 301
11424: IFFALSE 11428
// exit ;
11426: GO 11470
// CenterOnUnits ( Frank ) ;
11428: LD_EXP 51
11432: PPUSH
11433: CALL_OW 85
// SetSide ( Frank , 1 ) ;
11437: LD_EXP 51
11441: PPUSH
11442: LD_INT 1
11444: PPUSH
11445: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
11449: LD_EXP 51
11453: PPUSH
11454: LD_STRING D6a-Frank-1
11456: PPUSH
11457: CALL_OW 88
// ComWalk ( Frank ) ;
11461: LD_EXP 51
11465: PPUSH
11466: CALL_OW 138
// end ; end ;
11470: END
// every 0 0$01 trigger solar_builded do
11471: LD_EXP 14
11475: IFFALSE 11581
11477: GO 11479
11479: DISABLE
// begin Wait ( 0 0$02 ) ;
11480: LD_INT 70
11482: PPUSH
11483: CALL_OW 67
// DialogueOn ;
11487: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11491: LD_EXP 37
11495: PPUSH
11496: LD_STRING D2b-JMM-1
11498: PPUSH
11499: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11503: LD_EXP 48
11507: IFFALSE 11520
11509: PUSH
11510: LD_EXP 48
11514: PPUSH
11515: CALL_OW 302
11519: AND
11520: IFFALSE 11570
// begin Say ( Walker , D2b-Sci1-1 ) ;
11522: LD_EXP 48
11526: PPUSH
11527: LD_STRING D2b-Sci1-1
11529: PPUSH
11530: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11534: LD_EXP 37
11538: PPUSH
11539: LD_STRING D2b-JMM-2
11541: PPUSH
11542: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11546: LD_EXP 48
11550: PPUSH
11551: LD_STRING D2b-Sci1-2
11553: PPUSH
11554: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11558: LD_EXP 37
11562: PPUSH
11563: LD_STRING D2b-JMM-3
11565: PPUSH
11566: CALL_OW 88
// end ; DialogueOff ;
11570: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11574: LD_STRING MOutSol
11576: PPUSH
11577: CALL_OW 337
// end ;
11581: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11582: LD_EXP 14
11586: IFFALSE 11599
11588: PUSH
11589: LD_EXP 37
11593: PPUSH
11594: CALL_OW 302
11598: AND
11599: IFFALSE 11612
11601: PUSH
11602: LD_EXP 37
11606: PPUSH
11607: CALL 911 0 1
11611: AND
11612: IFFALSE 11621
11614: PUSH
11615: LD_EXP 16
11619: NOT
11620: AND
11621: IFFALSE 11692
11623: GO 11625
11625: DISABLE
11626: LD_INT 0
11628: PPUSH
// begin jmm_in_veh := true ;
11629: LD_ADDR_EXP 16
11633: PUSH
11634: LD_INT 1
11636: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11637: LD_ADDR_VAR 0 1
11641: PUSH
11642: LD_INT 0
11644: PPUSH
11645: LD_INT 1
11647: PPUSH
11648: CALL_OW 12
11652: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11653: LD_INT 70
11655: PPUSH
11656: CALL_OW 67
// if i then
11660: LD_VAR 0 1
11664: IFFALSE 11680
// Say ( JMM , D2c-JMM-1 ) else
11666: LD_EXP 37
11670: PPUSH
11671: LD_STRING D2c-JMM-1
11673: PPUSH
11674: CALL_OW 88
11678: GO 11692
// Say ( JMM , D2c-JMM-1a ) ;
11680: LD_EXP 37
11684: PPUSH
11685: LD_STRING D2c-JMM-1a
11687: PPUSH
11688: CALL_OW 88
// end ;
11692: PPOPN 1
11694: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11695: LD_EXP 14
11699: IFFALSE 11712
11701: PUSH
11702: LD_EXP 38
11706: PPUSH
11707: CALL_OW 302
11711: AND
11712: IFFALSE 11725
11714: PUSH
11715: LD_EXP 38
11719: PPUSH
11720: CALL 911 0 1
11724: AND
11725: IFFALSE 11734
11727: PUSH
11728: LD_EXP 17
11732: NOT
11733: AND
11734: IFFALSE 11766
11736: GO 11738
11738: DISABLE
// begin bobby_in_veh := true ;
11739: LD_ADDR_EXP 17
11743: PUSH
11744: LD_INT 1
11746: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11747: LD_INT 70
11749: PPUSH
11750: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11754: LD_EXP 38
11758: PPUSH
11759: LD_STRING D2c-Bobby-1
11761: PPUSH
11762: CALL_OW 88
11766: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11767: LD_EXP 14
11771: IFFALSE 11784
11773: PUSH
11774: LD_EXP 40
11778: PPUSH
11779: CALL_OW 302
11783: AND
11784: IFFALSE 11797
11786: PUSH
11787: LD_EXP 40
11791: PPUSH
11792: CALL 911 0 1
11796: AND
11797: IFFALSE 11806
11799: PUSH
11800: LD_EXP 19
11804: NOT
11805: AND
11806: IFFALSE 11838
11808: GO 11810
11810: DISABLE
// begin lisa_in_veh := true ;
11811: LD_ADDR_EXP 19
11815: PUSH
11816: LD_INT 1
11818: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11819: LD_INT 70
11821: PPUSH
11822: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11826: LD_EXP 40
11830: PPUSH
11831: LD_STRING D2c-Lisa-1
11833: PPUSH
11834: CALL_OW 88
11838: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11839: LD_EXP 14
11843: IFFALSE 11856
11845: PUSH
11846: LD_EXP 39
11850: PPUSH
11851: CALL_OW 302
11855: AND
11856: IFFALSE 11869
11858: PUSH
11859: LD_EXP 39
11863: PPUSH
11864: CALL 911 0 1
11868: AND
11869: IFFALSE 11878
11871: PUSH
11872: LD_EXP 18
11876: NOT
11877: AND
11878: IFFALSE 11949
11880: GO 11882
11882: DISABLE
11883: LD_INT 0
11885: PPUSH
// begin cyrus_in_veh := true ;
11886: LD_ADDR_EXP 18
11890: PUSH
11891: LD_INT 1
11893: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11894: LD_ADDR_VAR 0 1
11898: PUSH
11899: LD_INT 0
11901: PPUSH
11902: LD_INT 1
11904: PPUSH
11905: CALL_OW 12
11909: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11910: LD_INT 70
11912: PPUSH
11913: CALL_OW 67
// if i then
11917: LD_VAR 0 1
11921: IFFALSE 11937
// Say ( Cyrus , D2c-Cyrus-1 ) else
11923: LD_EXP 39
11927: PPUSH
11928: LD_STRING D2c-Cyrus-1
11930: PPUSH
11931: CALL_OW 88
11935: GO 11949
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11937: LD_EXP 39
11941: PPUSH
11942: LD_STRING D2c-Cyrus-1a
11944: PPUSH
11945: CALL_OW 88
// end ;
11949: PPOPN 1
11951: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11952: LD_EXP 44
11956: PPUSH
11957: LD_INT 16
11959: PPUSH
11960: CALL_OW 308
11964: IFFALSE 12245
11966: GO 11968
11968: DISABLE
11969: LD_INT 0
11971: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11972: LD_INT 3
11974: PPUSH
11975: LD_EXP 44
11979: PPUSH
11980: CALL_OW 471
// send_attack_on_cornel := true ;
11984: LD_ADDR_EXP 32
11988: PUSH
11989: LD_INT 1
11991: ST_TO_ADDR
// if ru_vehicles then
11992: LD_EXP 56
11996: IFFALSE 12030
// for i in ru_vehicles do
11998: LD_ADDR_VAR 0 1
12002: PUSH
12003: LD_EXP 56
12007: PUSH
12008: FOR_IN
12009: IFFALSE 12028
// ComAgressiveMove ( i , 215 , 69 ) ;
12011: LD_VAR 0 1
12015: PPUSH
12016: LD_INT 215
12018: PPUSH
12019: LD_INT 69
12021: PPUSH
12022: CALL_OW 114
12026: GO 12008
12028: POP
12029: POP
// if ru_patrol then
12030: LD_EXP 53
12034: IFFALSE 12068
// for i in ru_patrol do
12036: LD_ADDR_VAR 0 1
12040: PUSH
12041: LD_EXP 53
12045: PUSH
12046: FOR_IN
12047: IFFALSE 12066
// ComAgressiveMove ( i , 215 , 69 ) ;
12049: LD_VAR 0 1
12053: PPUSH
12054: LD_INT 215
12056: PPUSH
12057: LD_INT 69
12059: PPUSH
12060: CALL_OW 114
12064: GO 12046
12066: POP
12067: POP
// if frank_send_to_scout then
12068: LD_EXP 15
12072: IFFALSE 12086
// SayRadio ( Frank , D3b-Frank-1 ) ;
12074: LD_EXP 51
12078: PPUSH
12079: LD_STRING D3b-Frank-1
12081: PPUSH
12082: CALL_OW 94
// wait ( 0 0$03 ) ;
12086: LD_INT 105
12088: PPUSH
12089: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
12093: LD_EXP 44
12097: PPUSH
12098: LD_STRING D4-Corn-1
12100: PPUSH
12101: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
12105: LD_INT 35
12107: PPUSH
12108: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
12112: LD_INT 22
12114: PUSH
12115: LD_INT 4
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 21
12124: PUSH
12125: LD_INT 1
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 3
12134: PUSH
12135: LD_INT 24
12137: PUSH
12138: LD_INT 1000
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: LIST
12153: PPUSH
12154: CALL_OW 69
12158: PUSH
12159: LD_INT 6
12161: LESS
12162: IFFALSE 12105
// if Cornel then
12164: LD_EXP 44
12168: IFFALSE 12208
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
12170: LD_EXP 44
12174: PPUSH
12175: LD_STRING D5-Corn-1
12177: PPUSH
12178: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
12182: LD_EXP 44
12186: PPUSH
12187: LD_EXP 2
12191: PUSH
12192: LD_STRING Cornel
12194: STR
12195: PPUSH
12196: CALL_OW 38
// cornel_saved := true ;
12200: LD_ADDR_EXP 27
12204: PUSH
12205: LD_INT 1
12207: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
12208: LD_INT 4
12210: PPUSH
12211: LD_INT 8
12213: PPUSH
12214: CALL_OW 343
// wait ( 0 0$01 ) ;
12218: LD_INT 35
12220: PPUSH
12221: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
12225: LD_INT 3
12227: PPUSH
12228: LD_EXP 44
12232: PPUSH
12233: CALL_OW 472
// send_attack_on_cornel := false ;
12237: LD_ADDR_EXP 32
12241: PUSH
12242: LD_INT 0
12244: ST_TO_ADDR
// end ;
12245: PPOPN 1
12247: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
12248: LD_INT 9
12250: PPUSH
12251: LD_INT 22
12253: PUSH
12254: LD_INT 1
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PPUSH
12261: CALL_OW 70
12265: IFTRUE 12273
12267: PUSH
12268: LD_EXP 33
12272: OR
12273: IFFALSE 12530
12275: GO 12277
12277: DISABLE
12278: LD_INT 0
12280: PPUSH
12281: PPUSH
// begin enable ;
12282: ENABLE
// if not jmm_on_west then
12283: LD_EXP 5
12287: NOT
12288: IFFALSE 12299
// begin YouLost ( 4 ) ;
12290: LD_STRING 4
12292: PPUSH
12293: CALL_OW 104
// exit ;
12297: GO 12530
// end ; if not game_end then
12299: LD_EXP 33
12303: NOT
12304: IFFALSE 12314
// game_end := true ;
12306: LD_ADDR_EXP 33
12310: PUSH
12311: LD_INT 1
12313: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
12314: LD_ADDR_VAR 0 2
12318: PUSH
12319: LD_INT 9
12321: PPUSH
12322: LD_INT 22
12324: PUSH
12325: LD_INT 1
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PPUSH
12332: CALL_OW 70
12336: ST_TO_ADDR
// if not filter then
12337: LD_VAR 0 2
12341: NOT
12342: IFFALSE 12346
// exit ;
12344: GO 12530
// for i in filter do
12346: LD_ADDR_VAR 0 1
12350: PUSH
12351: LD_VAR 0 2
12355: PUSH
12356: FOR_IN
12357: IFFALSE 12528
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle and IsDrivenBy ( i ) and GetFuel ( i ) > 0 then
12359: LD_VAR 0 1
12363: PPUSH
12364: CALL_OW 302
12368: IFFALSE 12385
12370: PUSH
12371: LD_VAR 0 1
12375: PPUSH
12376: CALL_OW 247
12380: PUSH
12381: LD_INT 2
12383: EQUAL
12384: AND
12385: IFFALSE 12398
12387: PUSH
12388: LD_VAR 0 1
12392: PPUSH
12393: CALL_OW 311
12397: AND
12398: IFFALSE 12415
12400: PUSH
12401: LD_VAR 0 1
12405: PPUSH
12406: CALL_OW 261
12410: PUSH
12411: LD_INT 0
12413: GREATER
12414: AND
12415: IFFALSE 12489
// begin if i = JMM and save_group < 4 then
12417: LD_VAR 0 1
12421: PUSH
12422: LD_EXP 37
12426: EQUAL
12427: IFFALSE 12439
12429: PUSH
12430: LD_EXP 23
12434: PUSH
12435: LD_INT 4
12437: LESS
12438: AND
12439: IFFALSE 12443
// continue ;
12441: GO 12356
// if GetNation ( i ) = nation_american then
12443: LD_VAR 0 1
12447: PPUSH
12448: CALL_OW 248
12452: PUSH
12453: LD_INT 1
12455: EQUAL
12456: IFFALSE 12466
// veh_on_meta := true ;
12458: LD_ADDR_EXP 28
12462: PUSH
12463: LD_INT 1
12465: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
12466: LD_VAR 0 1
12470: PPUSH
12471: CALL_OW 311
12475: PPUSH
12476: CALL 12533 0 1
// RemoveUnit ( i ) ;
12480: LD_VAR 0 1
12484: PPUSH
12485: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
12489: LD_VAR 0 1
12493: PPUSH
12494: CALL_OW 302
12498: IFFALSE 12515
12500: PUSH
12501: LD_VAR 0 1
12505: PPUSH
12506: CALL_OW 247
12510: PUSH
12511: LD_INT 1
12513: EQUAL
12514: AND
12515: IFFALSE 12526
// Save ( i ) ;
12517: LD_VAR 0 1
12521: PPUSH
12522: CALL 12533 0 1
// end ;
12526: GO 12356
12528: POP
12529: POP
// end ;
12530: PPOPN 2
12532: END
// export function Save ( i ) ; begin
12533: LD_INT 0
12535: PPUSH
// if i = JMM and save_counter >= 4 then
12536: LD_VAR 0 1
12540: PUSH
12541: LD_EXP 37
12545: EQUAL
12546: IFFALSE 12558
12548: PUSH
12549: LD_EXP 36
12553: PUSH
12554: LD_INT 4
12556: GREATEREQUAL
12557: AND
12558: IFFALSE 12696
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12560: LD_EXP 24
12564: IFFALSE 12600
12566: PUSH
12567: LD_INT 22
12569: PUSH
12570: LD_INT 1
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 21
12579: PUSH
12580: LD_INT 1
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PPUSH
12591: CALL_OW 69
12595: PUSH
12596: LD_INT 1
12598: GREATER
12599: AND
12600: IFFALSE 12657
// begin show_query := false ;
12602: LD_ADDR_EXP 24
12606: PUSH
12607: LD_INT 0
12609: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12610: LD_STRING Q2
12612: PPUSH
12613: CALL_OW 97
12617: PUSH
12618: LD_INT 1
12620: DOUBLE
12621: EQUAL
12622: IFTRUE 12626
12624: GO 12637
12626: POP
// wait_for_them := true ; 2 :
12627: LD_ADDR_EXP 25
12631: PUSH
12632: LD_INT 1
12634: ST_TO_ADDR
12635: GO 12657
12637: LD_INT 2
12639: DOUBLE
12640: EQUAL
12641: IFTRUE 12645
12643: GO 12656
12645: POP
// wait_for_them := false ; end ;
12646: LD_ADDR_EXP 25
12650: PUSH
12651: LD_INT 0
12653: ST_TO_ADDR
12654: GO 12657
12656: POP
// end ; save_counter := save_counter + 1 ;
12657: LD_ADDR_EXP 36
12661: PUSH
12662: LD_EXP 36
12666: PUSH
12667: LD_INT 1
12669: PLUS
12670: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12671: LD_ADDR_EXP 23
12675: PUSH
12676: LD_EXP 23
12680: PUSH
12681: LD_EXP 37
12685: ADD
12686: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12687: LD_EXP 37
12691: PPUSH
12692: CALL_OW 64
// end ; if i = Lisa then
12696: LD_VAR 0 1
12700: PUSH
12701: LD_EXP 40
12705: EQUAL
12706: IFFALSE 12747
// begin save_counter := save_counter + 1 ;
12708: LD_ADDR_EXP 36
12712: PUSH
12713: LD_EXP 36
12717: PUSH
12718: LD_INT 1
12720: PLUS
12721: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12722: LD_ADDR_EXP 23
12726: PUSH
12727: LD_EXP 23
12731: PUSH
12732: LD_EXP 40
12736: ADD
12737: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12738: LD_EXP 40
12742: PPUSH
12743: CALL_OW 64
// end ; if i = Bobby then
12747: LD_VAR 0 1
12751: PUSH
12752: LD_EXP 38
12756: EQUAL
12757: IFFALSE 12798
// begin save_counter := save_counter + 1 ;
12759: LD_ADDR_EXP 36
12763: PUSH
12764: LD_EXP 36
12768: PUSH
12769: LD_INT 1
12771: PLUS
12772: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12773: LD_ADDR_EXP 23
12777: PUSH
12778: LD_EXP 23
12782: PUSH
12783: LD_EXP 38
12787: ADD
12788: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12789: LD_EXP 38
12793: PPUSH
12794: CALL_OW 64
// end ; if i = Cyrus then
12798: LD_VAR 0 1
12802: PUSH
12803: LD_EXP 39
12807: EQUAL
12808: IFFALSE 12849
// begin save_counter := save_counter + 1 ;
12810: LD_ADDR_EXP 36
12814: PUSH
12815: LD_EXP 36
12819: PUSH
12820: LD_INT 1
12822: PLUS
12823: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12824: LD_ADDR_EXP 23
12828: PUSH
12829: LD_EXP 23
12833: PUSH
12834: LD_EXP 39
12838: ADD
12839: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12840: LD_EXP 39
12844: PPUSH
12845: CALL_OW 64
// end ; if i = Khatam then
12849: LD_VAR 0 1
12853: PUSH
12854: LD_EXP 41
12858: EQUAL
12859: IFFALSE 12900
// begin save_counter := save_counter + 1 ;
12861: LD_ADDR_EXP 36
12865: PUSH
12866: LD_EXP 36
12870: PUSH
12871: LD_INT 1
12873: PLUS
12874: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12875: LD_ADDR_EXP 23
12879: PUSH
12880: LD_EXP 23
12884: PUSH
12885: LD_EXP 41
12889: ADD
12890: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12891: LD_EXP 41
12895: PPUSH
12896: CALL_OW 64
// end ; if i = Frank then
12900: LD_VAR 0 1
12904: PUSH
12905: LD_EXP 51
12909: EQUAL
12910: IFFALSE 12951
// begin save_counter := save_counter + 1 ;
12912: LD_ADDR_EXP 36
12916: PUSH
12917: LD_EXP 36
12921: PUSH
12922: LD_INT 1
12924: PLUS
12925: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12926: LD_ADDR_EXP 23
12930: PUSH
12931: LD_EXP 23
12935: PUSH
12936: LD_EXP 51
12940: ADD
12941: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12942: LD_EXP 51
12946: PPUSH
12947: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12951: LD_VAR 0 1
12955: PUSH
12956: LD_EXP 37
12960: NONEQUAL
12961: IFFALSE 12974
12963: PUSH
12964: LD_VAR 0 1
12968: PPUSH
12969: CALL_OW 302
12973: AND
12974: IFFALSE 12991
12976: PUSH
12977: LD_VAR 0 1
12981: PPUSH
12982: CALL_OW 247
12986: PUSH
12987: LD_INT 1
12989: EQUAL
12990: AND
12991: IFFALSE 13006
12993: PUSH
12994: LD_VAR 0 1
12998: PUSH
12999: LD_EXP 23
13003: IN
13004: NOT
13005: AND
13006: IFFALSE 13047
// begin save_counter := save_counter + 1 ;
13008: LD_ADDR_EXP 36
13012: PUSH
13013: LD_EXP 36
13017: PUSH
13018: LD_INT 1
13020: PLUS
13021: ST_TO_ADDR
// save_others := save_others ^ i ;
13022: LD_ADDR_EXP 22
13026: PUSH
13027: LD_EXP 22
13031: PUSH
13032: LD_VAR 0 1
13036: ADD
13037: ST_TO_ADDR
// RemoveUnit ( i ) ;
13038: LD_VAR 0 1
13042: PPUSH
13043: CALL_OW 64
// end ; end ;
13047: LD_VAR 0 2
13051: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
13052: LD_EXP 24
13056: NOT
13057: IFFALSE 13066
13059: PUSH
13060: LD_EXP 25
13064: NOT
13065: AND
13066: IFTRUE 13102
13068: PUSH
13069: LD_INT 22
13071: PUSH
13072: LD_INT 1
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: LD_INT 21
13081: PUSH
13082: LD_INT 1
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PPUSH
13093: CALL_OW 69
13097: PUSH
13098: LD_INT 0
13100: EQUAL
13101: OR
13102: IFFALSE 13111
13104: GO 13106
13106: DISABLE
// EndMission ;
13107: CALL 13112 0 0
13111: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
13112: LD_INT 0
13114: PPUSH
13115: PPUSH
13116: PPUSH
13117: PPUSH
13118: PPUSH
// wait ( 0 0$01 ) ;
13119: LD_INT 35
13121: PPUSH
13122: CALL_OW 67
// if tick <= 12 12$00 then
13126: LD_OWVAR 1
13130: PUSH
13131: LD_INT 25200
13133: LESSEQUAL
13134: IFFALSE 13143
// SetAchievement ( ACH_ASPEED_3 ) ;
13136: LD_STRING ACH_ASPEED_3
13138: PPUSH
13139: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
13143: LD_EXP 23
13147: PUSH
13148: LD_EXP 22
13152: ADD
13153: PPUSH
13154: LD_INT 25
13156: PUSH
13157: LD_INT 4
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: PPUSH
13164: CALL_OW 72
13168: PUSH
13169: LD_INT 0
13171: EQUAL
13172: IFFALSE 13188
// begin wait ( 3 ) ;
13174: LD_INT 3
13176: PPUSH
13177: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
13181: LD_STRING ACH_NOSCI
13183: PPUSH
13184: CALL_OW 543
// end ; m1 := solar_builded ;
13188: LD_ADDR_VAR 0 3
13192: PUSH
13193: LD_EXP 14
13197: ST_TO_ADDR
// m2 := veh_on_meta ;
13198: LD_ADDR_VAR 0 4
13202: PUSH
13203: LD_EXP 28
13207: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
13208: LD_ADDR_VAR 0 5
13212: PUSH
13213: LD_EXP 34
13217: PUSH
13218: LD_INT 0
13220: EQUAL
13221: ST_TO_ADDR
// if solar_builded then
13222: LD_EXP 14
13226: IFFALSE 13240
// AddMedal ( Solar1 , 1 ) else
13228: LD_STRING Solar1
13230: PPUSH
13231: LD_INT 1
13233: PPUSH
13234: CALL_OW 101
13238: GO 13251
// AddMedal ( Solar1 , - 1 ) ;
13240: LD_STRING Solar1
13242: PPUSH
13243: LD_INT 1
13245: NEG
13246: PPUSH
13247: CALL_OW 101
// if veh_on_meta then
13251: LD_EXP 28
13255: IFFALSE 13269
// AddMedal ( Solar2 , 1 ) else
13257: LD_STRING Solar2
13259: PPUSH
13260: LD_INT 1
13262: PPUSH
13263: CALL_OW 101
13267: GO 13299
// if solar_builded then
13269: LD_EXP 14
13273: IFFALSE 13288
// AddMedal ( Solar2 , - 1 ) else
13275: LD_STRING Solar2
13277: PPUSH
13278: LD_INT 1
13280: NEG
13281: PPUSH
13282: CALL_OW 101
13286: GO 13299
// AddMedal ( Solar2 , - 2 ) ;
13288: LD_STRING Solar2
13290: PPUSH
13291: LD_INT 2
13293: NEG
13294: PPUSH
13295: CALL_OW 101
// if lose_counter = 0 then
13299: LD_EXP 34
13303: PUSH
13304: LD_INT 0
13306: EQUAL
13307: IFFALSE 13321
// AddMedal ( No , 1 ) else
13309: LD_STRING No
13311: PPUSH
13312: LD_INT 1
13314: PPUSH
13315: CALL_OW 101
13319: GO 13367
// if lose_counter > 0 and lose_counter < 5 then
13321: LD_EXP 34
13325: PUSH
13326: LD_INT 0
13328: GREATER
13329: IFFALSE 13341
13331: PUSH
13332: LD_EXP 34
13336: PUSH
13337: LD_INT 5
13339: LESS
13340: AND
13341: IFFALSE 13356
// AddMedal ( No , - 1 ) else
13343: LD_STRING No
13345: PPUSH
13346: LD_INT 1
13348: NEG
13349: PPUSH
13350: CALL_OW 101
13354: GO 13367
// AddMedal ( UpTo4 , - 1 ) ;
13356: LD_STRING UpTo4
13358: PPUSH
13359: LD_INT 1
13361: NEG
13362: PPUSH
13363: CALL_OW 101
// GiveMedals ( MAIN ) ;
13367: LD_STRING MAIN
13369: PPUSH
13370: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
13374: LD_OWVAR 67
13378: PUSH
13379: LD_INT 3
13381: GREATEREQUAL
13382: IFFALSE 13390
13384: PUSH
13385: LD_VAR 0 3
13389: AND
13390: IFFALSE 13398
13392: PUSH
13393: LD_VAR 0 4
13397: AND
13398: IFFALSE 13406
13400: PUSH
13401: LD_VAR 0 5
13405: AND
13406: IFFALSE 13418
// SetAchievementEX ( ACH_AMER , 3 ) ;
13408: LD_STRING ACH_AMER
13410: PPUSH
13411: LD_INT 3
13413: PPUSH
13414: CALL_OW 564
// if IsDead ( Pokryshkin ) then
13418: LD_EXP 52
13422: PPUSH
13423: CALL_OW 301
13427: IFFALSE 13483
// begin stop_talking := true ;
13429: LD_ADDR_OWVAR 56
13433: PUSH
13434: LD_INT 1
13436: ST_TO_ADDR
// for i in save_group union save_others do
13437: LD_ADDR_VAR 0 2
13441: PUSH
13442: LD_EXP 23
13446: PUSH
13447: LD_EXP 22
13451: UNION
13452: PUSH
13453: FOR_IN
13454: IFFALSE 13473
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
13456: LD_VAR 0 2
13460: PPUSH
13461: LD_INT 1
13463: PPUSH
13464: LD_INT 1500
13466: PPUSH
13467: CALL_OW 591
13471: GO 13453
13473: POP
13474: POP
// stop_talking := false ;
13475: LD_ADDR_OWVAR 56
13479: PUSH
13480: LD_INT 0
13482: ST_TO_ADDR
// end ; RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_american ] ] ) ) ;
13483: LD_INT 22
13485: PUSH
13486: LD_INT 1
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: LD_INT 23
13495: PUSH
13496: LD_INT 1
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PPUSH
13507: CALL_OW 69
13511: PPUSH
13512: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
13516: LD_EXP 37
13520: PPUSH
13521: LD_EXP 2
13525: PUSH
13526: LD_STRING JMM
13528: STR
13529: PPUSH
13530: CALL_OW 38
// if Bobby in save_group then
13534: LD_EXP 38
13538: PUSH
13539: LD_EXP 23
13543: IN
13544: IFFALSE 13564
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
13546: LD_EXP 38
13550: PPUSH
13551: LD_EXP 2
13555: PUSH
13556: LD_STRING Bobby
13558: STR
13559: PPUSH
13560: CALL_OW 38
// if Cyrus in save_group then
13564: LD_EXP 39
13568: PUSH
13569: LD_EXP 23
13573: IN
13574: IFFALSE 13594
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
13576: LD_EXP 39
13580: PPUSH
13581: LD_EXP 2
13585: PUSH
13586: LD_STRING Cyrus
13588: STR
13589: PPUSH
13590: CALL_OW 38
// if Lisa in save_group then
13594: LD_EXP 40
13598: PUSH
13599: LD_EXP 23
13603: IN
13604: IFFALSE 13624
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13606: LD_EXP 40
13610: PPUSH
13611: LD_EXP 2
13615: PUSH
13616: LD_STRING Lisa
13618: STR
13619: PPUSH
13620: CALL_OW 38
// if Frank in save_group then
13624: LD_EXP 51
13628: PUSH
13629: LD_EXP 23
13633: IN
13634: IFFALSE 13661
// begin ToLua ( enableBioCharacter(BIO_FRANK) ) ;
13636: LD_STRING enableBioCharacter(BIO_FRANK)
13638: PPUSH
13639: CALL_OW 559
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13643: LD_EXP 51
13647: PPUSH
13648: LD_EXP 2
13652: PUSH
13653: LD_STRING Frank
13655: STR
13656: PPUSH
13657: CALL_OW 38
// end ; if Khatam in save_group then
13661: LD_EXP 41
13665: PUSH
13666: LD_EXP 23
13670: IN
13671: IFFALSE 13691
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13673: LD_EXP 41
13677: PPUSH
13678: LD_EXP 2
13682: PUSH
13683: LD_STRING Khatam
13685: STR
13686: PPUSH
13687: CALL_OW 38
// if save_others then
13691: LD_EXP 22
13695: IFFALSE 13709
// SaveCharacters ( save_others , 03_others ) ;
13697: LD_EXP 22
13701: PPUSH
13702: LD_STRING 03_others
13704: PPUSH
13705: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ANDY) ) ;
13709: LD_STRING enableBioCharacter(BIO_ANDY)
13711: PPUSH
13712: CALL_OW 559
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13716: LD_EXP 45
13720: IFFALSE 13733
13722: PUSH
13723: LD_EXP 45
13727: PPUSH
13728: CALL_OW 302
13732: AND
13733: IFFALSE 13741
13735: PUSH
13736: LD_EXP 27
13740: AND
13741: IFFALSE 13753
// begin ResetFog ;
13743: CALL_OW 335
// DisplayEndingScene ;
13747: CALL 13775 0 0
// end else
13751: GO 13766
// DeleteCharacters ( mission_prefix & Cornel ) ;
13753: LD_EXP 2
13757: PUSH
13758: LD_STRING Cornel
13760: STR
13761: PPUSH
13762: CALL_OW 40
// YouWin ;
13766: CALL_OW 103
// end ;
13770: LD_VAR 0 1
13774: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13775: LD_INT 0
13777: PPUSH
13778: PPUSH
13779: PPUSH
13780: PPUSH
13781: PPUSH
13782: PPUSH
// InGameOn ;
13783: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13787: LD_INT 208
13789: PPUSH
13790: LD_INT 62
13792: PPUSH
13793: LD_INT 1
13795: PPUSH
13796: LD_INT 10
13798: NEG
13799: PPUSH
13800: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13804: LD_INT 208
13806: PPUSH
13807: LD_INT 62
13809: PPUSH
13810: LD_INT 1
13812: PPUSH
13813: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13817: LD_ADDR_VAR 0 3
13821: PUSH
13822: LD_INT 22
13824: PUSH
13825: LD_INT 3
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: PUSH
13832: LD_INT 2
13834: PUSH
13835: LD_INT 21
13837: PUSH
13838: LD_INT 2
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 21
13847: PUSH
13848: LD_INT 1
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: LIST
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PPUSH
13864: CALL_OW 69
13868: ST_TO_ADDR
// if filter then
13869: LD_VAR 0 3
13873: IFFALSE 13901
// for i in filter do
13875: LD_ADDR_VAR 0 2
13879: PUSH
13880: LD_VAR 0 3
13884: PUSH
13885: FOR_IN
13886: IFFALSE 13899
// RemoveUnit ( i ) ;
13888: LD_VAR 0 2
13892: PPUSH
13893: CALL_OW 64
13897: GO 13885
13899: POP
13900: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13901: LD_ADDR_VAR 0 3
13905: PUSH
13906: LD_INT 22
13908: PUSH
13909: LD_INT 4
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: LD_INT 21
13918: PUSH
13919: LD_INT 1
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PPUSH
13930: CALL_OW 69
13934: ST_TO_ADDR
// if filter then
13935: LD_VAR 0 3
13939: IFFALSE 13970
// for i in filter do
13941: LD_ADDR_VAR 0 2
13945: PUSH
13946: LD_VAR 0 3
13950: PUSH
13951: FOR_IN
13952: IFFALSE 13968
// SetLives ( i , 0 ) ;
13954: LD_VAR 0 2
13958: PPUSH
13959: LD_INT 0
13961: PPUSH
13962: CALL_OW 234
13966: GO 13951
13968: POP
13969: POP
// uc_side := 4 ;
13970: LD_ADDR_OWVAR 20
13974: PUSH
13975: LD_INT 4
13977: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13978: LD_ADDR_VAR 0 4
13982: PUSH
13983: LD_STRING Cornell
13985: PPUSH
13986: LD_INT 0
13988: PPUSH
13989: LD_STRING 
13991: PPUSH
13992: CALL 41999 0 3
13996: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13997: LD_VAR 0 4
14001: PPUSH
14002: LD_INT 208
14004: PPUSH
14005: LD_INT 62
14007: PPUSH
14008: LD_INT 0
14010: PPUSH
14011: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
14015: LD_VAR 0 4
14019: PPUSH
14020: LD_INT 100
14022: PPUSH
14023: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
14027: LD_INT 3
14029: PPUSH
14030: LD_VAR 0 4
14034: PPUSH
14035: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
14039: LD_INT 4
14041: PPUSH
14042: LD_INT 3
14044: PPUSH
14045: LD_INT 1
14047: PPUSH
14048: LD_INT 1
14050: PPUSH
14051: CALL_OW 80
// uc_side := 3 ;
14055: LD_ADDR_OWVAR 20
14059: PUSH
14060: LD_INT 3
14062: ST_TO_ADDR
// uc_nation := 3 ;
14063: LD_ADDR_OWVAR 21
14067: PUSH
14068: LD_INT 3
14070: ST_TO_ADDR
// InitHc ;
14071: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
14075: LD_ADDR_VAR 0 5
14079: PUSH
14080: LD_STRING Mikhail
14082: PPUSH
14083: LD_INT 0
14085: PPUSH
14086: LD_STRING 
14088: PPUSH
14089: CALL 41999 0 3
14093: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
14094: LD_INT 1
14096: PPUSH
14097: LD_INT 1
14099: PPUSH
14100: LD_INT 0
14102: PPUSH
14103: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
14107: LD_ADDR_VAR 0 6
14111: PUSH
14112: LD_VAR 0 6
14116: PUSH
14117: CALL_OW 44
14121: ADD
14122: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
14123: LD_ADDR_VAR 0 6
14127: PUSH
14128: LD_VAR 0 6
14132: PUSH
14133: CALL_OW 44
14137: ADD
14138: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
14139: LD_INT 2
14141: PPUSH
14142: LD_INT 4
14144: PPUSH
14145: LD_INT 0
14147: PPUSH
14148: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
14152: LD_ADDR_VAR 0 6
14156: PUSH
14157: LD_VAR 0 6
14161: PUSH
14162: CALL_OW 44
14166: ADD
14167: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
14168: LD_VAR 0 5
14172: PPUSH
14173: LD_INT 17
14175: PPUSH
14176: LD_INT 0
14178: PPUSH
14179: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
14183: LD_VAR 0 5
14187: PPUSH
14188: LD_INT 210
14190: PPUSH
14191: LD_INT 63
14193: PPUSH
14194: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
14198: LD_VAR 0 5
14202: PPUSH
14203: LD_INT 208
14205: PPUSH
14206: LD_INT 62
14208: PPUSH
14209: CALL_OW 178
// for i in fake_russians do
14213: LD_ADDR_VAR 0 2
14217: PUSH
14218: LD_VAR 0 6
14222: PUSH
14223: FOR_IN
14224: IFFALSE 14302
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
14226: LD_VAR 0 2
14230: PPUSH
14231: LD_INT 17
14233: PPUSH
14234: LD_INT 0
14236: PPUSH
14237: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
14241: LD_VAR 0 2
14245: PPUSH
14246: LD_INT 215
14248: PPUSH
14249: LD_INT 67
14251: PPUSH
14252: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
14256: LD_VAR 0 2
14260: PPUSH
14261: LD_INT 208
14263: PPUSH
14264: LD_INT 62
14266: PPUSH
14267: CALL_OW 178
// if GetClass ( i ) = 4 then
14271: LD_VAR 0 2
14275: PPUSH
14276: CALL_OW 257
14280: PUSH
14281: LD_INT 4
14283: EQUAL
14284: IFFALSE 14300
// ComHeal ( i , fake_cornel ) ;
14286: LD_VAR 0 2
14290: PPUSH
14291: LD_VAR 0 4
14295: PPUSH
14296: CALL_OW 128
// end ;
14300: GO 14223
14302: POP
14303: POP
// Wait ( 0 0$01 ) ;
14304: LD_INT 35
14306: PPUSH
14307: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
14311: LD_INT 208
14313: PPUSH
14314: LD_INT 62
14316: PPUSH
14317: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
14321: LD_INT 208
14323: PPUSH
14324: LD_INT 62
14326: PPUSH
14327: LD_INT 1
14329: PPUSH
14330: LD_INT 10
14332: NEG
14333: PPUSH
14334: CALL_OW 330
// Wait ( 0 0$15 ) ;
14338: LD_INT 525
14340: PPUSH
14341: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
14345: LD_INT 208
14347: PPUSH
14348: LD_INT 62
14350: PPUSH
14351: LD_INT 1
14353: PPUSH
14354: CALL_OW 331
// ResetFog ;
14358: CALL_OW 335
// InGameOff ;
14362: CALL_OW 9
// end ;
14366: LD_VAR 0 1
14370: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
14371: LD_INT 10
14373: PPUSH
14374: LD_INT 22
14376: PUSH
14377: LD_INT 1
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PPUSH
14384: CALL_OW 70
14388: IFFALSE 14401
14390: PUSH
14391: LD_EXP 44
14395: PPUSH
14396: CALL_OW 302
14400: AND
14401: IFTRUE 14443
14403: PUSH
14404: LD_INT 22
14406: PUSH
14407: LD_INT 1
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PPUSH
14414: CALL_OW 69
14418: PPUSH
14419: LD_EXP 44
14423: PPUSH
14424: CALL_OW 74
14428: PPUSH
14429: LD_EXP 44
14433: PPUSH
14434: CALL_OW 296
14438: PUSH
14439: LD_INT 30
14441: LESS
14442: OR
14443: IFFALSE 14494
14445: GO 14447
14447: DISABLE
// begin enable ;
14448: ENABLE
// powell_warn := powell_warn + 1 ;
14449: LD_ADDR_EXP 35
14453: PUSH
14454: LD_EXP 35
14458: PUSH
14459: LD_INT 1
14461: PLUS
14462: ST_TO_ADDR
// if powell_warn = 3 then
14463: LD_EXP 35
14467: PUSH
14468: LD_INT 3
14470: EQUAL
14471: IFFALSE 14482
// begin YouLost ( 5 ) ;
14473: LD_STRING 5
14475: PPUSH
14476: CALL_OW 104
// exit ;
14480: GO 14494
// end ; SayRadioNoFace ( Powell , DWarn-Pow-1 ) ;
14482: LD_EXP 46
14486: PPUSH
14487: LD_STRING DWarn-Pow-1
14489: PPUSH
14490: CALL_OW 586
// end ; end_of_file
14494: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
14495: LD_EXP 8
14499: IFFALSE 16344
14501: GO 14503
14503: DISABLE
14504: LD_INT 0
14506: PPUSH
14507: PPUSH
14508: PPUSH
14509: PPUSH
14510: PPUSH
14511: PPUSH
14512: PPUSH
14513: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
14514: LD_EXP 44
14518: PUSH
14519: LD_EXP 45
14523: ADD
14524: PUSH
14525: LD_EXP 6
14529: ADD
14530: PPUSH
14531: LD_INT 250
14533: PPUSH
14534: LD_INT 120
14536: PPUSH
14537: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
14541: LD_ADDR_VAR 0 2
14545: PUSH
14546: LD_EXP 6
14550: PPUSH
14551: LD_INT 25
14553: PUSH
14554: LD_INT 2
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PPUSH
14561: CALL_OW 72
14565: PUSH
14566: LD_EXP 45
14570: DIFF
14571: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
14572: LD_ADDR_VAR 0 3
14576: PUSH
14577: LD_EXP 6
14581: PPUSH
14582: LD_INT 21
14584: PUSH
14585: LD_INT 1
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PPUSH
14592: CALL_OW 72
14596: PUSH
14597: LD_VAR 0 2
14601: DIFF
14602: ST_TO_ADDR
// if not has_eng then
14603: LD_VAR 0 2
14607: NOT
14608: IFFALSE 14691
// begin uc_side := 4 ;
14610: LD_ADDR_OWVAR 20
14614: PUSH
14615: LD_INT 4
14617: ST_TO_ADDR
// uc_nation := 1 ;
14618: LD_ADDR_OWVAR 21
14622: PUSH
14623: LD_INT 1
14625: ST_TO_ADDR
// bc_type := b_depot ;
14626: LD_ADDR_OWVAR 42
14630: PUSH
14631: LD_INT 0
14633: ST_TO_ADDR
// bc_level := 2 ;
14634: LD_ADDR_OWVAR 43
14638: PUSH
14639: LD_INT 2
14641: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14642: LD_ADDR_VAR 0 4
14646: PUSH
14647: LD_INT 264
14649: PPUSH
14650: LD_INT 120
14652: PPUSH
14653: LD_INT 4
14655: PPUSH
14656: CALL_OW 47
14660: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14661: LD_INT 264
14663: PPUSH
14664: LD_INT 120
14666: PPUSH
14667: LD_INT 4
14669: PPUSH
14670: LD_INT 10
14672: NEG
14673: PPUSH
14674: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14678: LD_INT 264
14680: PPUSH
14681: LD_INT 120
14683: PPUSH
14684: LD_INT 4
14686: PPUSH
14687: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14691: LD_INT 35
14693: PPUSH
14694: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14698: LD_EXP 44
14702: PPUSH
14703: LD_INT 10
14705: PPUSH
14706: CALL_OW 308
14710: IFTRUE 14731
14712: PUSH
14713: LD_EXP 44
14717: PPUSH
14718: CALL_OW 310
14722: PPUSH
14723: LD_INT 10
14725: PPUSH
14726: CALL_OW 308
14730: OR
14731: IFFALSE 14691
// if has_eng and not dep then
14733: LD_VAR 0 2
14737: IFFALSE 14746
14739: PUSH
14740: LD_VAR 0 4
14744: NOT
14745: AND
14746: IFFALSE 14896
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14748: LD_VAR 0 2
14752: PPUSH
14753: LD_INT 0
14755: PPUSH
14756: LD_INT 264
14758: PPUSH
14759: LD_INT 120
14761: PPUSH
14762: LD_INT 4
14764: PPUSH
14765: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14769: LD_INT 35
14771: PPUSH
14772: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14776: LD_INT 22
14778: PUSH
14779: LD_INT 4
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 30
14788: PUSH
14789: LD_INT 0
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PPUSH
14800: CALL_OW 69
14804: IFFALSE 14769
// ComMoveXY ( filter , 264 , 120 ) ;
14806: LD_VAR 0 3
14810: PPUSH
14811: LD_INT 264
14813: PPUSH
14814: LD_INT 120
14816: PPUSH
14817: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14821: LD_INT 35
14823: PPUSH
14824: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14828: LD_INT 22
14830: PUSH
14831: LD_INT 4
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PUSH
14838: LD_INT 30
14840: PUSH
14841: LD_INT 0
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PUSH
14848: LD_INT 3
14850: PUSH
14851: LD_INT 57
14853: PUSH
14854: EMPTY
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: LIST
14865: PPUSH
14866: CALL_OW 69
14870: IFFALSE 14821
// ComMoveXY ( filter , 247 , 113 ) ;
14872: LD_VAR 0 3
14876: PPUSH
14877: LD_INT 247
14879: PPUSH
14880: LD_INT 113
14882: PPUSH
14883: CALL_OW 111
// Wait ( 0 0$2 ) ;
14887: LD_INT 70
14889: PPUSH
14890: CALL_OW 67
// end else
14894: GO 14908
// begin SetSide ( dep , 4 ) ;
14896: LD_VAR 0 4
14900: PPUSH
14901: LD_INT 4
14903: PPUSH
14904: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14908: LD_ADDR_VAR 0 4
14912: PUSH
14913: LD_INT 22
14915: PUSH
14916: LD_INT 4
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: LD_INT 30
14925: PUSH
14926: LD_INT 0
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PPUSH
14937: CALL_OW 69
14941: PUSH
14942: LD_INT 1
14944: ARRAY
14945: ST_TO_ADDR
// if not has_eng then
14946: LD_VAR 0 2
14950: NOT
14951: IFFALSE 15038
// for i = 1 to 2 do
14953: LD_ADDR_VAR 0 1
14957: PUSH
14958: DOUBLE
14959: LD_INT 1
14961: DEC
14962: ST_TO_ADDR
14963: LD_INT 2
14965: PUSH
14966: FOR_TO
14967: IFFALSE 15036
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14969: LD_VAR 0 3
14973: PUSH
14974: LD_INT 1
14976: ARRAY
14977: PPUSH
14978: LD_VAR 0 4
14982: PPUSH
14983: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14987: LD_VAR 0 3
14991: PUSH
14992: LD_INT 1
14994: ARRAY
14995: PPUSH
14996: LD_INT 2
14998: PPUSH
14999: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
15003: LD_VAR 0 3
15007: PUSH
15008: LD_INT 1
15010: ARRAY
15011: PPUSH
15012: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
15016: LD_ADDR_VAR 0 3
15020: PUSH
15021: LD_VAR 0 3
15025: PPUSH
15026: LD_INT 1
15028: PPUSH
15029: CALL_OW 3
15033: ST_TO_ADDR
// end ;
15034: GO 14966
15036: POP
15037: POP
// if IsInUnit ( Cornel ) then
15038: LD_EXP 44
15042: PPUSH
15043: CALL_OW 310
15047: IFFALSE 15125
// begin cargo := IsInUnit ( Cornel ) ;
15049: LD_ADDR_VAR 0 7
15053: PUSH
15054: LD_EXP 44
15058: PPUSH
15059: CALL_OW 310
15063: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
15064: LD_VAR 0 7
15068: PPUSH
15069: LD_INT 1
15071: PPUSH
15072: CALL_OW 289
15076: IFFALSE 15087
// ComUnload ( cargo ) ;
15078: LD_VAR 0 7
15082: PPUSH
15083: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
15087: LD_EXP 44
15091: PPUSH
15092: LD_INT 235
15094: PPUSH
15095: LD_INT 122
15097: PPUSH
15098: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
15102: LD_EXP 44
15106: PPUSH
15107: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
15111: LD_EXP 44
15115: PPUSH
15116: LD_VAR 0 4
15120: PPUSH
15121: CALL_OW 180
// end ; if Bierezov then
15125: LD_EXP 45
15129: IFFALSE 15177
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
15131: LD_EXP 45
15135: PPUSH
15136: LD_INT 260
15138: PPUSH
15139: LD_INT 120
15141: PPUSH
15142: CALL_OW 111
// if dep then
15146: LD_VAR 0 4
15150: IFFALSE 15168
// AddComEnterUnit ( Bierezov , dep ) else
15152: LD_EXP 45
15156: PPUSH
15157: LD_VAR 0 4
15161: PPUSH
15162: CALL_OW 180
15166: GO 15177
// AddComHold ( Bierezov ) ;
15168: LD_EXP 45
15172: PPUSH
15173: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
15177: LD_INT 525
15179: PPUSH
15180: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
15184: LD_ADDR_VAR 0 2
15188: PUSH
15189: LD_INT 22
15191: PUSH
15192: LD_INT 4
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: LD_INT 25
15201: PUSH
15202: LD_INT 2
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PPUSH
15213: CALL_OW 69
15217: PUSH
15218: LD_EXP 45
15222: DIFF
15223: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15224: LD_INT 35
15226: PPUSH
15227: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
15231: LD_ADDR_VAR 0 6
15235: PUSH
15236: LD_INT 10
15238: PPUSH
15239: CALL_OW 435
15243: ST_TO_ADDR
// if crates then
15244: LD_VAR 0 6
15248: IFFALSE 15277
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
15250: LD_VAR 0 2
15254: PPUSH
15255: LD_VAR 0 6
15259: PUSH
15260: LD_INT 1
15262: ARRAY
15263: PPUSH
15264: LD_VAR 0 6
15268: PUSH
15269: LD_INT 2
15271: ARRAY
15272: PPUSH
15273: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
15277: LD_VAR 0 4
15281: PPUSH
15282: CALL_OW 274
15286: PPUSH
15287: LD_INT 1
15289: PPUSH
15290: CALL_OW 275
15294: PUSH
15295: LD_INT 40
15297: GREATEREQUAL
15298: IFFALSE 15224
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
15300: LD_ADDR_VAR 0 5
15304: PUSH
15305: LD_INT 4
15307: PUSH
15308: LD_INT 256
15310: PUSH
15311: LD_INT 111
15313: PUSH
15314: LD_INT 2
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: PUSH
15323: LD_INT 31
15325: PUSH
15326: LD_INT 243
15328: PUSH
15329: LD_INT 112
15331: PUSH
15332: LD_INT 2
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 31
15343: PUSH
15344: LD_INT 254
15346: PUSH
15347: LD_INT 114
15349: PUSH
15350: LD_INT 2
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: LIST
15363: ST_TO_ADDR
// for i in blist do
15364: LD_ADDR_VAR 0 1
15368: PUSH
15369: LD_VAR 0 5
15373: PUSH
15374: FOR_IN
15375: IFFALSE 15424
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
15377: LD_VAR 0 2
15381: PPUSH
15382: LD_VAR 0 1
15386: PUSH
15387: LD_INT 1
15389: ARRAY
15390: PPUSH
15391: LD_VAR 0 1
15395: PUSH
15396: LD_INT 2
15398: ARRAY
15399: PPUSH
15400: LD_VAR 0 1
15404: PUSH
15405: LD_INT 3
15407: ARRAY
15408: PPUSH
15409: LD_VAR 0 1
15413: PUSH
15414: LD_INT 4
15416: ARRAY
15417: PPUSH
15418: CALL_OW 205
15422: GO 15374
15424: POP
15425: POP
// repeat wait ( 0 0$01 ) ;
15426: LD_INT 35
15428: PPUSH
15429: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
15433: LD_INT 22
15435: PUSH
15436: LD_INT 4
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 30
15445: PUSH
15446: LD_INT 4
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 3
15455: PUSH
15456: LD_INT 57
15458: PUSH
15459: EMPTY
15460: LIST
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: LIST
15470: PPUSH
15471: CALL_OW 69
15475: IFFALSE 15426
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15477: LD_VAR 0 3
15481: PPUSH
15482: LD_INT 22
15484: PUSH
15485: LD_INT 4
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: LD_INT 30
15494: PUSH
15495: LD_INT 4
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PPUSH
15506: CALL_OW 69
15510: PUSH
15511: LD_INT 1
15513: ARRAY
15514: PPUSH
15515: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
15519: LD_VAR 0 3
15523: PPUSH
15524: LD_INT 1
15526: PPUSH
15527: CALL_OW 183
// if has_eng > 1 then
15531: LD_VAR 0 2
15535: PUSH
15536: LD_INT 1
15538: GREATER
15539: IFFALSE 15681
// for i = has_eng downto 2 do
15541: LD_ADDR_VAR 0 1
15545: PUSH
15546: DOUBLE
15547: LD_VAR 0 2
15551: INC
15552: ST_TO_ADDR
15553: LD_INT 2
15555: PUSH
15556: FOR_DOWNTO
15557: IFFALSE 15679
// begin if IsInUnit ( has_eng [ i ] ) then
15559: LD_VAR 0 2
15563: PUSH
15564: LD_VAR 0 1
15568: ARRAY
15569: PPUSH
15570: CALL_OW 310
15574: IFFALSE 15591
// ComExitBuilding ( has_eng [ i ] ) ;
15576: LD_VAR 0 2
15580: PUSH
15581: LD_VAR 0 1
15585: ARRAY
15586: PPUSH
15587: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15591: LD_VAR 0 2
15595: PUSH
15596: LD_VAR 0 1
15600: ARRAY
15601: PPUSH
15602: LD_INT 22
15604: PUSH
15605: LD_INT 4
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 30
15614: PUSH
15615: LD_INT 4
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PPUSH
15626: CALL_OW 69
15630: PUSH
15631: LD_INT 1
15633: ARRAY
15634: PPUSH
15635: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15639: LD_VAR 0 2
15643: PUSH
15644: LD_VAR 0 1
15648: ARRAY
15649: PPUSH
15650: LD_INT 1
15652: PPUSH
15653: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15657: LD_ADDR_VAR 0 2
15661: PUSH
15662: LD_VAR 0 2
15666: PPUSH
15667: LD_VAR 0 1
15671: PPUSH
15672: CALL_OW 3
15676: ST_TO_ADDR
// end ;
15677: GO 15556
15679: POP
15680: POP
// repeat wait ( 0 0$01 ) ;
15681: LD_INT 35
15683: PPUSH
15684: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15688: LD_INT 22
15690: PUSH
15691: LD_INT 4
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 30
15700: PUSH
15701: LD_INT 31
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 3
15710: PUSH
15711: LD_INT 57
15713: PUSH
15714: EMPTY
15715: LIST
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: LIST
15725: PPUSH
15726: CALL_OW 69
15730: PUSH
15731: LD_INT 1
15733: GREATER
15734: IFFALSE 15681
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15736: LD_ADDR_VAR 0 8
15740: PUSH
15741: LD_EXP 6
15745: PPUSH
15746: LD_INT 25
15748: PUSH
15749: LD_INT 1
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PPUSH
15756: CALL_OW 72
15760: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15761: LD_ADDR_VAR 0 1
15765: PUSH
15766: DOUBLE
15767: LD_INT 1
15769: DEC
15770: ST_TO_ADDR
15771: LD_INT 22
15773: PUSH
15774: LD_INT 4
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 30
15783: PUSH
15784: LD_INT 31
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 3
15793: PUSH
15794: LD_INT 57
15796: PUSH
15797: EMPTY
15798: LIST
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: LIST
15808: PPUSH
15809: CALL_OW 69
15813: PUSH
15814: FOR_TO
15815: IFFALSE 15899
// begin if not sol [ i ] then
15817: LD_VAR 0 8
15821: PUSH
15822: LD_VAR 0 1
15826: ARRAY
15827: NOT
15828: IFFALSE 15832
// break ;
15830: GO 15899
// ComExitBuilding ( sol [ i ] ) ;
15832: LD_VAR 0 8
15836: PUSH
15837: LD_VAR 0 1
15841: ARRAY
15842: PPUSH
15843: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15847: LD_VAR 0 8
15851: PUSH
15852: LD_VAR 0 1
15856: ARRAY
15857: PPUSH
15858: LD_INT 22
15860: PUSH
15861: LD_INT 4
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: LD_INT 30
15870: PUSH
15871: LD_INT 31
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PPUSH
15882: CALL_OW 69
15886: PUSH
15887: LD_VAR 0 1
15891: ARRAY
15892: PPUSH
15893: CALL_OW 180
// end ;
15897: GO 15814
15899: POP
15900: POP
// if sol > 3 then
15901: LD_VAR 0 8
15905: PUSH
15906: LD_INT 3
15908: GREATER
15909: IFFALSE 16026
// begin ComExitBuilding ( sol [ 3 ] ) ;
15911: LD_VAR 0 8
15915: PUSH
15916: LD_INT 3
15918: ARRAY
15919: PPUSH
15920: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15924: LD_VAR 0 8
15928: PUSH
15929: LD_INT 3
15931: ARRAY
15932: PPUSH
15933: LD_INT 246
15935: PPUSH
15936: LD_INT 94
15938: PPUSH
15939: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15943: LD_VAR 0 8
15947: PUSH
15948: LD_INT 3
15950: ARRAY
15951: PPUSH
15952: LD_INT 175
15954: PPUSH
15955: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15959: LD_VAR 0 8
15963: PUSH
15964: LD_INT 3
15966: ARRAY
15967: PPUSH
15968: LD_INT 224
15970: PPUSH
15971: LD_INT 90
15973: PPUSH
15974: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15978: LD_VAR 0 8
15982: PUSH
15983: LD_INT 3
15985: ARRAY
15986: PPUSH
15987: LD_INT 245
15989: PPUSH
15990: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15994: LD_VAR 0 8
15998: PUSH
15999: LD_INT 3
16001: ARRAY
16002: PPUSH
16003: LD_INT 223
16005: PPUSH
16006: LD_INT 110
16008: PPUSH
16009: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
16013: LD_VAR 0 8
16017: PUSH
16018: LD_INT 3
16020: ARRAY
16021: PPUSH
16022: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
16026: LD_VAR 0 2
16030: PPUSH
16031: LD_VAR 0 4
16035: PPUSH
16036: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
16040: LD_INT 22
16042: PUSH
16043: LD_INT 4
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PUSH
16050: LD_INT 30
16052: PUSH
16053: LD_INT 4
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PPUSH
16064: CALL_OW 69
16068: PUSH
16069: LD_INT 1
16071: ARRAY
16072: PPUSH
16073: CALL_OW 313
16077: PUSH
16078: LD_INT 6
16080: LESS
16081: IFFALSE 16145
// begin if IsInUnit ( Cornel ) then
16083: LD_EXP 44
16087: PPUSH
16088: CALL_OW 310
16092: IFFALSE 16103
// ComExitBuilding ( Cornel ) ;
16094: LD_EXP 44
16098: PPUSH
16099: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
16103: LD_EXP 44
16107: PPUSH
16108: LD_INT 22
16110: PUSH
16111: LD_INT 4
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 30
16120: PUSH
16121: LD_INT 4
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PPUSH
16132: CALL_OW 69
16136: PUSH
16137: LD_INT 1
16139: ARRAY
16140: PPUSH
16141: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
16145: LD_INT 35
16147: PPUSH
16148: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16152: LD_ADDR_VAR 0 3
16156: PUSH
16157: LD_INT 22
16159: PUSH
16160: LD_INT 4
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 21
16169: PUSH
16170: LD_INT 3
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: LD_INT 3
16179: PUSH
16180: LD_INT 24
16182: PUSH
16183: LD_INT 1000
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: LIST
16198: PPUSH
16199: CALL_OW 69
16203: ST_TO_ADDR
// if filter and has_eng then
16204: LD_VAR 0 3
16208: IFFALSE 16216
16210: PUSH
16211: LD_VAR 0 2
16215: AND
16216: IFFALSE 16282
// begin for i in has_eng do
16218: LD_ADDR_VAR 0 1
16222: PUSH
16223: LD_VAR 0 2
16227: PUSH
16228: FOR_IN
16229: IFFALSE 16278
// begin if IsInUnit ( i ) then
16231: LD_VAR 0 1
16235: PPUSH
16236: CALL_OW 310
16240: IFFALSE 16251
// ComExitBuilding ( i ) ;
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 122
// Wait ( 3 ) ;
16251: LD_INT 3
16253: PPUSH
16254: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
16258: LD_VAR 0 1
16262: PPUSH
16263: LD_VAR 0 3
16267: PUSH
16268: LD_INT 1
16270: ARRAY
16271: PPUSH
16272: CALL_OW 130
// end ;
16276: GO 16228
16278: POP
16279: POP
// end else
16280: GO 16338
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
16282: LD_VAR 0 2
16286: IFFALSE 16305
16288: PUSH
16289: LD_VAR 0 2
16293: PPUSH
16294: LD_INT 56
16296: PUSH
16297: EMPTY
16298: LIST
16299: PPUSH
16300: CALL_OW 72
16304: AND
16305: IFFALSE 16338
// for i in has_eng do
16307: LD_ADDR_VAR 0 1
16311: PUSH
16312: LD_VAR 0 2
16316: PUSH
16317: FOR_IN
16318: IFFALSE 16336
// ComEnterUnit ( i , dep ) ;
16320: LD_VAR 0 1
16324: PPUSH
16325: LD_VAR 0 4
16329: PPUSH
16330: CALL_OW 120
16334: GO 16317
16336: POP
16337: POP
// until cornel_prepared ;
16338: LD_EXP 11
16342: IFFALSE 16145
// end ;
16344: PPOPN 8
16346: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
16347: LD_EXP 11
16351: IFFALSE 16888
16353: GO 16355
16355: DISABLE
16356: LD_INT 0
16358: PPUSH
16359: PPUSH
16360: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
16361: LD_ADDR_VAR 0 2
16365: PUSH
16366: LD_INT 22
16368: PUSH
16369: LD_INT 4
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: LD_INT 30
16378: PUSH
16379: LD_INT 4
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PPUSH
16390: CALL_OW 69
16394: PUSH
16395: LD_INT 1
16397: ARRAY
16398: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
16399: LD_EXP 6
16403: PPUSH
16404: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
16408: LD_EXP 45
16412: IFFALSE 16425
16414: PUSH
16415: LD_EXP 45
16419: PPUSH
16420: CALL_OW 310
16424: AND
16425: IFFALSE 16436
// ComExitBuilding ( Bierezov ) ;
16427: LD_EXP 45
16431: PPUSH
16432: CALL_OW 122
// Wait ( 0 0$03 ) ;
16436: LD_INT 105
16438: PPUSH
16439: CALL_OW 67
// for i in cornel_units do
16443: LD_ADDR_VAR 0 1
16447: PUSH
16448: LD_EXP 6
16452: PUSH
16453: FOR_IN
16454: IFFALSE 16530
// begin if GetClass ( i ) in [ 2 , 3 ] then
16456: LD_VAR 0 1
16460: PPUSH
16461: CALL_OW 257
16465: PUSH
16466: LD_INT 2
16468: PUSH
16469: LD_INT 3
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: IN
16476: IFFALSE 16513
// begin ComEnterUnit ( i , arm ) ;
16478: LD_VAR 0 1
16482: PPUSH
16483: LD_VAR 0 2
16487: PPUSH
16488: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
16492: LD_VAR 0 1
16496: PPUSH
16497: LD_INT 1
16499: PPUSH
16500: CALL_OW 183
// AddComExitBuilding ( i ) ;
16504: LD_VAR 0 1
16508: PPUSH
16509: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
16513: LD_VAR 0 1
16517: PPUSH
16518: LD_INT 257
16520: PPUSH
16521: LD_INT 121
16523: PPUSH
16524: CALL_OW 171
// end ;
16528: GO 16453
16530: POP
16531: POP
// Wait ( 1 1$00 ) ;
16532: LD_INT 2100
16534: PPUSH
16535: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
16539: LD_ADDR_VAR 0 3
16543: PUSH
16544: LD_EXP 44
16548: PUSH
16549: LD_EXP 45
16553: ADD
16554: PUSH
16555: LD_EXP 6
16559: ADD
16560: PUSH
16561: LD_EXP 6
16565: PPUSH
16566: LD_INT 21
16568: PUSH
16569: LD_INT 2
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PPUSH
16576: CALL_OW 72
16580: DIFF
16581: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
16582: LD_VAR 0 3
16586: PPUSH
16587: LD_INT 248
16589: PPUSH
16590: LD_INT 85
16592: PPUSH
16593: CALL_OW 111
// AddComHold ( filter ) ;
16597: LD_VAR 0 3
16601: PPUSH
16602: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
16606: LD_INT 35
16608: PPUSH
16609: CALL_OW 67
// until cornel_attack ;
16613: LD_EXP 9
16617: IFFALSE 16606
// ComAgressiveMove ( filter , 209 , 63 ) ;
16619: LD_VAR 0 3
16623: PPUSH
16624: LD_INT 209
16626: PPUSH
16627: LD_INT 63
16629: PPUSH
16630: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16634: LD_EXP 44
16638: PPUSH
16639: LD_INT 208
16641: PPUSH
16642: LD_INT 62
16644: PPUSH
16645: CALL_OW 114
// AddComHold ( Cornel ) ;
16649: LD_EXP 44
16653: PPUSH
16654: CALL_OW 200
// if Bierezov then
16658: LD_EXP 45
16662: IFFALSE 16752
// begin filter := filter diff Bierezov ;
16664: LD_ADDR_VAR 0 3
16668: PUSH
16669: LD_VAR 0 3
16673: PUSH
16674: LD_EXP 45
16678: DIFF
16679: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16680: LD_EXP 45
16684: PPUSH
16685: LD_INT 6
16687: PPUSH
16688: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16692: LD_EXP 45
16696: PPUSH
16697: LD_INT 235
16699: PPUSH
16700: LD_INT 60
16702: PPUSH
16703: CALL_OW 111
// AddComHold ( Bierezov ) ;
16707: LD_EXP 45
16711: PPUSH
16712: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16716: LD_EXP 45
16720: PPUSH
16721: LD_INT 350
16723: PPUSH
16724: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16728: LD_EXP 45
16732: PPUSH
16733: LD_INT 198
16735: PPUSH
16736: LD_INT 28
16738: PPUSH
16739: CALL_OW 171
// AddComHold ( Bierezov ) ;
16743: LD_EXP 45
16747: PPUSH
16748: CALL_OW 200
// end ; filter := filter diff Cornel ;
16752: LD_ADDR_VAR 0 3
16756: PUSH
16757: LD_VAR 0 3
16761: PUSH
16762: LD_EXP 44
16766: DIFF
16767: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
16768: LD_INT 70
16770: PPUSH
16771: CALL_OW 67
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16775: LD_EXP 44
16779: PPUSH
16780: LD_INT 208
16782: PPUSH
16783: LD_INT 62
16785: PPUSH
16786: CALL_OW 114
// until not IsInArea ( Cornel , cornelKappaArea ) ;
16790: LD_EXP 44
16794: PPUSH
16795: LD_INT 16
16797: PPUSH
16798: CALL_OW 308
16802: NOT
16803: IFFALSE 16768
// wait ( 0 0$2 ) ;
16805: LD_INT 70
16807: PPUSH
16808: CALL_OW 67
// ComMoveXY ( filter [ 1 ] , 195 , 57 ) ;
16812: LD_VAR 0 3
16816: PUSH
16817: LD_INT 1
16819: ARRAY
16820: PPUSH
16821: LD_INT 195
16823: PPUSH
16824: LD_INT 57
16826: PPUSH
16827: CALL_OW 111
// ComMoveXY ( filter [ 2 ] , 217 , 53 ) ;
16831: LD_VAR 0 3
16835: PUSH
16836: LD_INT 2
16838: ARRAY
16839: PPUSH
16840: LD_INT 217
16842: PPUSH
16843: LD_INT 53
16845: PPUSH
16846: CALL_OW 111
// ComMoveXY ( filter [ 3 ] , 199 , 48 ) ;
16850: LD_VAR 0 3
16854: PUSH
16855: LD_INT 3
16857: ARRAY
16858: PPUSH
16859: LD_INT 199
16861: PPUSH
16862: LD_INT 48
16864: PPUSH
16865: CALL_OW 111
// ComMoveXY ( filter [ 4 ] , 179 , 48 ) ;
16869: LD_VAR 0 3
16873: PUSH
16874: LD_INT 4
16876: ARRAY
16877: PPUSH
16878: LD_INT 179
16880: PPUSH
16881: LD_INT 48
16883: PPUSH
16884: CALL_OW 111
// end ; end_of_file
16888: PPOPN 3
16890: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16891: LD_EXP 53
16895: IFFALSE 16904
16897: PUSH
16898: LD_EXP 31
16902: NOT
16903: AND
16904: IFFALSE 16913
16906: PUSH
16907: LD_EXP 32
16911: NOT
16912: AND
16913: IFFALSE 17369
16915: GO 16917
16917: DISABLE
16918: LD_INT 0
16920: PPUSH
16921: PPUSH
16922: PPUSH
16923: PPUSH
// begin enable ;
16924: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16925: LD_ADDR_VAR 0 4
16929: PUSH
16930: LD_INT 81
16932: PUSH
16933: LD_INT 3
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PPUSH
16940: CALL_OW 69
16944: ST_TO_ADDR
// for i = 1 to ru_patrol do
16945: LD_ADDR_VAR 0 2
16949: PUSH
16950: DOUBLE
16951: LD_INT 1
16953: DEC
16954: ST_TO_ADDR
16955: LD_EXP 53
16959: PUSH
16960: FOR_TO
16961: IFFALSE 17367
// begin un := ru_patrol [ i ] ;
16963: LD_ADDR_VAR 0 1
16967: PUSH
16968: LD_EXP 53
16972: PUSH
16973: LD_VAR 0 2
16977: ARRAY
16978: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16979: LD_VAR 0 1
16983: PPUSH
16984: LD_INT 13
16986: PPUSH
16987: CALL_OW 308
16991: IFFALSE 17096
// begin if not ru_alert then
16993: LD_EXP 60
16997: NOT
16998: IFFALSE 17008
// ru_alert := true ;
17000: LD_ADDR_EXP 60
17004: PUSH
17005: LD_INT 1
17007: ST_TO_ADDR
// if not See ( 1 , un ) then
17008: LD_INT 1
17010: PPUSH
17011: LD_VAR 0 1
17015: PPUSH
17016: CALL_OW 292
17020: NOT
17021: IFFALSE 17035
// SetLives ( un , 1000 ) ;
17023: LD_VAR 0 1
17027: PPUSH
17028: LD_INT 1000
17030: PPUSH
17031: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
17035: LD_ADDR_EXP 53
17039: PUSH
17040: LD_EXP 53
17044: PUSH
17045: LD_VAR 0 1
17049: DIFF
17050: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17051: LD_VAR 0 1
17055: PPUSH
17056: LD_INT 22
17058: PUSH
17059: LD_INT 3
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 30
17068: PUSH
17069: LD_INT 4
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PPUSH
17080: CALL_OW 69
17084: PPUSH
17085: CALL 1007 0 1
17089: PPUSH
17090: CALL_OW 120
// continue ;
17094: GO 16960
// end ; if IsOk ( un ) and not HasTask ( un ) then
17096: LD_VAR 0 1
17100: PPUSH
17101: CALL_OW 302
17105: IFFALSE 17119
17107: PUSH
17108: LD_VAR 0 1
17112: PPUSH
17113: CALL_OW 314
17117: NOT
17118: AND
17119: IFFALSE 17212
// begin for j = 1 to ru_firepoints_south [ i ] do
17121: LD_ADDR_VAR 0 3
17125: PUSH
17126: DOUBLE
17127: LD_INT 1
17129: DEC
17130: ST_TO_ADDR
17131: LD_EXP 59
17135: PUSH
17136: LD_VAR 0 2
17140: ARRAY
17141: PUSH
17142: FOR_TO
17143: IFFALSE 17210
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
17145: LD_VAR 0 1
17149: PPUSH
17150: LD_EXP 59
17154: PUSH
17155: LD_VAR 0 2
17159: ARRAY
17160: PUSH
17161: LD_VAR 0 3
17165: ARRAY
17166: PUSH
17167: LD_INT 1
17169: ARRAY
17170: PPUSH
17171: LD_EXP 59
17175: PUSH
17176: LD_VAR 0 2
17180: ARRAY
17181: PUSH
17182: LD_VAR 0 3
17186: ARRAY
17187: PUSH
17188: LD_INT 2
17190: ARRAY
17191: PPUSH
17192: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
17196: LD_VAR 0 1
17200: PPUSH
17201: LD_INT 70
17203: PPUSH
17204: CALL_OW 202
// end ;
17208: GO 17142
17210: POP
17211: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17212: LD_VAR 0 1
17216: PPUSH
17217: CALL_OW 256
17221: PUSH
17222: LD_INT 700
17224: LESS
17225: IFFALSE 17242
17227: PUSH
17228: LD_VAR 0 1
17232: PPUSH
17233: LD_INT 13
17235: PPUSH
17236: CALL_OW 308
17240: NOT
17241: AND
17242: IFFALSE 17294
// begin ComMoveToArea ( un , retreatArea ) ;
17244: LD_VAR 0 1
17248: PPUSH
17249: LD_INT 13
17251: PPUSH
17252: CALL_OW 113
// if not ru_alert_xy then
17256: LD_EXP 61
17260: NOT
17261: IFFALSE 17292
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
17263: LD_ADDR_EXP 61
17267: PUSH
17268: LD_VAR 0 1
17272: PPUSH
17273: CALL_OW 250
17277: PUSH
17278: LD_VAR 0 1
17282: PPUSH
17283: CALL_OW 251
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: ST_TO_ADDR
// end else
17292: GO 17365
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17294: LD_VAR 0 1
17298: PPUSH
17299: LD_VAR 0 4
17303: PPUSH
17304: LD_VAR 0 1
17308: PPUSH
17309: CALL_OW 74
17313: PPUSH
17314: CALL_OW 296
17318: PUSH
17319: LD_INT 9
17321: LESS
17322: IFFALSE 17339
17324: PUSH
17325: LD_VAR 0 1
17329: PPUSH
17330: CALL_OW 256
17334: PUSH
17335: LD_INT 500
17337: GREATER
17338: AND
17339: IFFALSE 17365
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17341: LD_VAR 0 1
17345: PPUSH
17346: LD_VAR 0 4
17350: PPUSH
17351: LD_VAR 0 1
17355: PPUSH
17356: CALL_OW 74
17360: PPUSH
17361: CALL_OW 115
// end ;
17365: GO 16960
17367: POP
17368: POP
// end ;
17369: PPOPN 4
17371: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
17372: LD_EXP 60
17376: IFFALSE 17384
17378: PUSH
17379: LD_EXP 61
17383: AND
17384: IFFALSE 17393
17386: PUSH
17387: LD_EXP 31
17391: NOT
17392: AND
17393: IFFALSE 17402
17395: PUSH
17396: LD_EXP 32
17400: NOT
17401: AND
17402: IFFALSE 17618
17404: GO 17406
17406: DISABLE
17407: LD_INT 0
17409: PPUSH
17410: PPUSH
// begin enable ;
17411: ENABLE
// if not ru_vehicles then
17412: LD_EXP 56
17416: NOT
17417: IFFALSE 17421
// exit ;
17419: GO 17618
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17421: LD_ADDR_VAR 0 2
17425: PUSH
17426: LD_INT 81
17428: PUSH
17429: LD_INT 3
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PPUSH
17436: CALL_OW 69
17440: ST_TO_ADDR
// if ru_vehicles then
17441: LD_EXP 56
17445: IFFALSE 17618
// begin for i in ru_vehicles do
17447: LD_ADDR_VAR 0 1
17451: PUSH
17452: LD_EXP 56
17456: PUSH
17457: FOR_IN
17458: IFFALSE 17616
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
17460: LD_VAR 0 1
17464: PPUSH
17465: CALL_OW 302
17469: IFFALSE 17501
17471: PUSH
17472: LD_VAR 0 1
17476: PPUSH
17477: LD_VAR 0 2
17481: PPUSH
17482: LD_VAR 0 1
17486: PPUSH
17487: CALL_OW 74
17491: PPUSH
17492: CALL_OW 296
17496: PUSH
17497: LD_INT 9
17499: LESS
17500: AND
17501: IFFALSE 17527
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17503: LD_VAR 0 1
17507: PPUSH
17508: LD_VAR 0 2
17512: PPUSH
17513: LD_VAR 0 1
17517: PPUSH
17518: CALL_OW 74
17522: PPUSH
17523: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
17527: LD_VAR 0 1
17531: PPUSH
17532: CALL_OW 314
17536: NOT
17537: IFFALSE 17550
17539: PUSH
17540: LD_VAR 0 1
17544: PPUSH
17545: CALL_OW 302
17549: AND
17550: IFFALSE 17585
17552: PUSH
17553: LD_VAR 0 1
17557: PPUSH
17558: LD_EXP 61
17562: PUSH
17563: LD_INT 1
17565: ARRAY
17566: PPUSH
17567: LD_EXP 61
17571: PUSH
17572: LD_INT 2
17574: ARRAY
17575: PPUSH
17576: CALL_OW 297
17580: PUSH
17581: LD_INT 10
17583: GREATER
17584: AND
17585: IFFALSE 17614
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
17587: LD_VAR 0 1
17591: PPUSH
17592: LD_EXP 61
17596: PUSH
17597: LD_INT 1
17599: ARRAY
17600: PPUSH
17601: LD_EXP 61
17605: PUSH
17606: LD_INT 2
17608: ARRAY
17609: PPUSH
17610: CALL_OW 114
// end ;
17614: GO 17457
17616: POP
17617: POP
// end ; end ;
17618: PPOPN 2
17620: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
17621: LD_EXP 61
17625: IFFALSE 17633
17627: PUSH
17628: LD_EXP 60
17632: AND
17633: IFFALSE 17645
17635: PUSH
17636: LD_INT 3
17638: PPUSH
17639: CALL_OW 463
17643: NOT
17644: AND
17645: IFFALSE 17654
17647: PUSH
17648: LD_EXP 31
17652: NOT
17653: AND
17654: IFFALSE 17663
17656: PUSH
17657: LD_EXP 32
17661: NOT
17662: AND
17663: IFFALSE 17760
17665: GO 17667
17667: DISABLE
17668: LD_INT 0
17670: PPUSH
// begin enable ;
17671: ENABLE
// ru_alert_xy := false ;
17672: LD_ADDR_EXP 61
17676: PUSH
17677: LD_INT 0
17679: ST_TO_ADDR
// ru_alert := false ;
17680: LD_ADDR_EXP 60
17684: PUSH
17685: LD_INT 0
17687: ST_TO_ADDR
// if ru_vehicles then
17688: LD_EXP 56
17692: IFFALSE 17760
// for i in ru_vehicles do
17694: LD_ADDR_VAR 0 1
17698: PUSH
17699: LD_EXP 56
17703: PUSH
17704: FOR_IN
17705: IFFALSE 17758
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
17707: LD_VAR 0 1
17711: PPUSH
17712: CALL_OW 302
17716: IFFALSE 17739
17718: PUSH
17719: LD_VAR 0 1
17723: PPUSH
17724: LD_INT 89
17726: PPUSH
17727: LD_INT 36
17729: PPUSH
17730: CALL_OW 297
17734: PUSH
17735: LD_INT 10
17737: GREATER
17738: AND
17739: IFFALSE 17756
// ComMoveXY ( i , 89 , 36 ) ;
17741: LD_VAR 0 1
17745: PPUSH
17746: LD_INT 89
17748: PPUSH
17749: LD_INT 36
17751: PPUSH
17752: CALL_OW 111
17756: GO 17704
17758: POP
17759: POP
// end ;
17760: PPOPN 1
17762: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
17763: LD_EXP 55
17767: IFFALSE 17776
17769: PUSH
17770: LD_EXP 31
17774: NOT
17775: AND
17776: IFFALSE 17785
17778: PUSH
17779: LD_EXP 32
17783: NOT
17784: AND
17785: IFFALSE 18073
17787: GO 17789
17789: DISABLE
17790: LD_INT 0
17792: PPUSH
17793: PPUSH
17794: PPUSH
// begin enable ;
17795: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17796: LD_ADDR_VAR 0 3
17800: PUSH
17801: LD_INT 81
17803: PUSH
17804: LD_INT 3
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PPUSH
17811: CALL_OW 69
17815: ST_TO_ADDR
// for i = 1 to ru_forest do
17816: LD_ADDR_VAR 0 1
17820: PUSH
17821: DOUBLE
17822: LD_INT 1
17824: DEC
17825: ST_TO_ADDR
17826: LD_EXP 55
17830: PUSH
17831: FOR_TO
17832: IFFALSE 18071
// begin un := ru_forest [ i ] ;
17834: LD_ADDR_VAR 0 2
17838: PUSH
17839: LD_EXP 55
17843: PUSH
17844: LD_VAR 0 1
17848: ARRAY
17849: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17850: LD_VAR 0 2
17854: PPUSH
17855: LD_INT 13
17857: PPUSH
17858: CALL_OW 308
17862: IFFALSE 17952
// begin if not See ( 1 , un ) then
17864: LD_INT 1
17866: PPUSH
17867: LD_VAR 0 2
17871: PPUSH
17872: CALL_OW 292
17876: NOT
17877: IFFALSE 17891
// SetLives ( un , 1000 ) ;
17879: LD_VAR 0 2
17883: PPUSH
17884: LD_INT 1000
17886: PPUSH
17887: CALL_OW 234
// ru_forest := ru_forest diff un ;
17891: LD_ADDR_EXP 55
17895: PUSH
17896: LD_EXP 55
17900: PUSH
17901: LD_VAR 0 2
17905: DIFF
17906: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17907: LD_VAR 0 2
17911: PPUSH
17912: LD_INT 22
17914: PUSH
17915: LD_INT 3
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 30
17924: PUSH
17925: LD_INT 4
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PPUSH
17936: CALL_OW 69
17940: PPUSH
17941: CALL 1007 0 1
17945: PPUSH
17946: CALL_OW 120
// continue ;
17950: GO 17831
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17952: LD_VAR 0 2
17956: PPUSH
17957: CALL_OW 256
17961: PUSH
17962: LD_INT 700
17964: LESS
17965: IFFALSE 17982
17967: PUSH
17968: LD_VAR 0 2
17972: PPUSH
17973: LD_INT 13
17975: PPUSH
17976: CALL_OW 308
17980: NOT
17981: AND
17982: IFFALSE 17998
// ComMoveToArea ( un , retreatArea ) else
17984: LD_VAR 0 2
17988: PPUSH
17989: LD_INT 13
17991: PPUSH
17992: CALL_OW 113
17996: GO 18069
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17998: LD_VAR 0 2
18002: PPUSH
18003: LD_VAR 0 3
18007: PPUSH
18008: LD_VAR 0 2
18012: PPUSH
18013: CALL_OW 74
18017: PPUSH
18018: CALL_OW 296
18022: PUSH
18023: LD_INT 9
18025: LESS
18026: IFFALSE 18043
18028: PUSH
18029: LD_VAR 0 2
18033: PPUSH
18034: CALL_OW 256
18038: PUSH
18039: LD_INT 500
18041: GREATER
18042: AND
18043: IFFALSE 18069
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
18045: LD_VAR 0 2
18049: PPUSH
18050: LD_VAR 0 3
18054: PPUSH
18055: LD_VAR 0 2
18059: PPUSH
18060: CALL_OW 74
18064: PPUSH
18065: CALL_OW 115
// end ;
18069: GO 17831
18071: POP
18072: POP
// end ;
18073: PPOPN 3
18075: END
// every 0 0$10 trigger not send_attack_on_cornel or IsDead ( Cornel ) do var i , filter ;
18076: LD_EXP 32
18080: NOT
18081: IFTRUE 18094
18083: PUSH
18084: LD_EXP 44
18088: PPUSH
18089: CALL_OW 301
18093: OR
18094: IFFALSE 18255
18096: GO 18098
18098: DISABLE
18099: LD_INT 0
18101: PPUSH
18102: PPUSH
// begin enable ;
18103: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_inarea , ignoreBuildingsArea ] ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 990 ] ] ] ) ;
18104: LD_ADDR_VAR 0 2
18108: PUSH
18109: LD_INT 22
18111: PUSH
18112: LD_INT 3
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 3
18121: PUSH
18122: LD_INT 95
18124: PUSH
18125: LD_INT 18
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 21
18138: PUSH
18139: LD_INT 3
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 3
18148: PUSH
18149: LD_INT 24
18151: PUSH
18152: LD_INT 990
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: PPUSH
18169: CALL_OW 69
18173: ST_TO_ADDR
// if filter then
18174: LD_VAR 0 2
18178: IFFALSE 18255
// for i in filter do
18180: LD_ADDR_VAR 0 1
18184: PUSH
18185: LD_VAR 0 2
18189: PUSH
18190: FOR_IN
18191: IFFALSE 18253
// if GetY ( i ) > 70 then
18193: LD_VAR 0 1
18197: PPUSH
18198: CALL_OW 251
18202: PUSH
18203: LD_INT 70
18205: GREATER
18206: IFFALSE 18212
// continue else
18208: GO 18190
18210: GO 18251
// begin ru_alert := true ;
18212: LD_ADDR_EXP 60
18216: PUSH
18217: LD_INT 1
18219: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
18220: LD_ADDR_EXP 61
18224: PUSH
18225: LD_VAR 0 1
18229: PPUSH
18230: CALL_OW 250
18234: PUSH
18235: LD_VAR 0 1
18239: PPUSH
18240: CALL_OW 251
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: ST_TO_ADDR
// break ;
18249: GO 18253
// end ;
18251: GO 18190
18253: POP
18254: POP
// end ;
18255: PPOPN 2
18257: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
18258: LD_EXP 31
18262: IFFALSE 18415
18264: GO 18266
18266: DISABLE
18267: LD_INT 0
18269: PPUSH
18270: PPUSH
18271: PPUSH
18272: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
18273: LD_ADDR_VAR 0 4
18277: PUSH
18278: LD_EXP 56
18282: PUSH
18283: LD_EXP 55
18287: ADD
18288: PUSH
18289: LD_EXP 53
18293: ADD
18294: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
18295: LD_ADDR_VAR 0 3
18299: PUSH
18300: LD_INT 3
18302: PPUSH
18303: LD_INT 81
18305: PUSH
18306: LD_INT 3
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PPUSH
18313: CALL_OW 70
18317: ST_TO_ADDR
// if filter and enemy then
18318: LD_VAR 0 4
18322: IFFALSE 18330
18324: PUSH
18325: LD_VAR 0 3
18329: AND
18330: IFFALSE 18415
// repeat wait ( 0 0$01 ) ;
18332: LD_INT 35
18334: PPUSH
18335: CALL_OW 67
// for i in filter do
18339: LD_ADDR_VAR 0 1
18343: PUSH
18344: LD_VAR 0 4
18348: PUSH
18349: FOR_IN
18350: IFFALSE 18378
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
18352: LD_VAR 0 1
18356: PPUSH
18357: LD_VAR 0 3
18361: PPUSH
18362: LD_VAR 0 1
18366: PPUSH
18367: CALL_OW 74
18371: PPUSH
18372: CALL_OW 115
// end ;
18376: GO 18349
18378: POP
18379: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
18380: LD_INT 3
18382: PPUSH
18383: LD_INT 81
18385: PUSH
18386: LD_INT 3
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PPUSH
18393: CALL_OW 70
18397: PUSH
18398: LD_INT 0
18400: EQUAL
18401: IFTRUE 18413
18403: PUSH
18404: LD_VAR 0 4
18408: PUSH
18409: LD_INT 0
18411: EQUAL
18412: OR
18413: IFFALSE 18332
// end ;
18415: PPOPN 4
18417: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
18418: LD_EXP 26
18422: IFFALSE 18468
18424: PUSH
18425: LD_INT 22
18427: PUSH
18428: LD_INT 4
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 30
18437: PUSH
18438: LD_INT 4
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 3
18447: PUSH
18448: LD_INT 57
18450: PUSH
18451: EMPTY
18452: LIST
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: LIST
18462: PPUSH
18463: CALL_OW 69
18467: AND
18468: IFFALSE 18517
18470: GO 18472
18472: DISABLE
18473: LD_INT 0
18475: PPUSH
// begin if not ru_cornel_attack then
18476: LD_EXP 58
18480: NOT
18481: IFFALSE 18485
// exit ;
18483: GO 18517
// for i in ru_cornel_attack do
18485: LD_ADDR_VAR 0 1
18489: PUSH
18490: LD_EXP 58
18494: PUSH
18495: FOR_IN
18496: IFFALSE 18515
// ComAgressiveMove ( i , 258 , 119 ) ;
18498: LD_VAR 0 1
18502: PPUSH
18503: LD_INT 258
18505: PPUSH
18506: LD_INT 119
18508: PPUSH
18509: CALL_OW 114
18513: GO 18495
18515: POP
18516: POP
// end ; end_of_file
18517: PPOPN 1
18519: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r , x ;
18520: LD_EXP 5
18524: IFFALSE 18533
18526: PUSH
18527: LD_EXP 9
18531: NOT
18532: AND
18533: IFFALSE 18541
18535: PUSH
18536: LD_EXP 20
18540: AND
18541: IFFALSE 18666
18543: GO 18545
18545: DISABLE
18546: LD_INT 0
18548: PPUSH
18549: PPUSH
// begin enable ;
18550: ENABLE
// x := rand ( 2 , 5 ) ;
18551: LD_ADDR_VAR 0 2
18555: PUSH
18556: LD_INT 2
18558: PPUSH
18559: LD_INT 5
18561: PPUSH
18562: CALL_OW 12
18566: ST_TO_ADDR
// crates_counter := crates_counter - ( x * 10 ) ;
18567: LD_ADDR_EXP 20
18571: PUSH
18572: LD_EXP 20
18576: PUSH
18577: LD_VAR 0 2
18581: PUSH
18582: LD_INT 10
18584: MUL
18585: MINUS
18586: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , x , true ) ;
18587: LD_INT 8
18589: PPUSH
18590: LD_VAR 0 2
18594: PPUSH
18595: LD_INT 1
18597: PPUSH
18598: CALL_OW 55
// wait ( rand ( 0 0$41 , 0 0$57 ) ) ;
18602: LD_INT 1435
18604: PPUSH
18605: LD_INT 1995
18607: PPUSH
18608: CALL_OW 12
18612: PPUSH
18613: CALL_OW 67
// r := rand ( 1 , Difficulty ) ;
18617: LD_ADDR_VAR 0 1
18621: PUSH
18622: LD_INT 1
18624: PPUSH
18625: LD_OWVAR 67
18629: PPUSH
18630: CALL_OW 12
18634: ST_TO_ADDR
// if r < 3 then
18635: LD_VAR 0 1
18639: PUSH
18640: LD_INT 3
18642: LESS
18643: IFFALSE 18666
// CreateCratesArea ( westBaseSpot , rand ( 1 , 5 ) , true ) ;
18645: LD_INT 4
18647: PPUSH
18648: LD_INT 1
18650: PPUSH
18651: LD_INT 5
18653: PPUSH
18654: CALL_OW 12
18658: PPUSH
18659: LD_INT 1
18661: PPUSH
18662: CALL_OW 55
// end ;
18666: PPOPN 2
18668: END
// every 0 0$01 trigger cornel_active do
18669: LD_EXP 8
18673: IFFALSE 18762
18675: GO 18677
18677: DISABLE
// begin Wait ( 0 0$03 ) ;
18678: LD_INT 105
18680: PPUSH
18681: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18685: LD_INT 2
18687: PPUSH
18688: LD_INT 5
18690: PPUSH
18691: CALL_OW 12
18695: PPUSH
18696: LD_INT 10
18698: PPUSH
18699: LD_INT 1
18701: PPUSH
18702: CALL_OW 55
// Wait ( 0 0$13 ) ;
18706: LD_INT 455
18708: PPUSH
18709: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18713: LD_INT 2
18715: PPUSH
18716: LD_INT 5
18718: PPUSH
18719: CALL_OW 12
18723: PPUSH
18724: LD_INT 10
18726: PPUSH
18727: LD_INT 1
18729: PPUSH
18730: CALL_OW 55
// Wait ( 0 0$16 ) ;
18734: LD_INT 560
18736: PPUSH
18737: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18741: LD_INT 2
18743: PPUSH
18744: LD_INT 5
18746: PPUSH
18747: CALL_OW 12
18751: PPUSH
18752: LD_INT 10
18754: PPUSH
18755: LD_INT 1
18757: PPUSH
18758: CALL_OW 55
// end ; end_of_file
18762: END
// every 0 0$01 trigger cornel_prepared do
18763: LD_EXP 11
18767: IFFALSE 18826
18769: GO 18771
18771: DISABLE
// begin enable ;
18772: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
18773: LD_ADDR_OWVAR 47
18777: PUSH
18778: LD_STRING #Am03-1
18780: PUSH
18781: LD_EXP 10
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
18790: LD_ADDR_EXP 10
18794: PUSH
18795: LD_EXP 10
18799: PPUSH
18800: LD_STRING -
18802: PPUSH
18803: CALL 1077 0 2
18807: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
18808: LD_EXP 10
18812: PUSH
18813: LD_INT 0
18815: EQUAL
18816: IFFALSE 18826
// begin Display_Strings := [ ] ;
18818: LD_ADDR_OWVAR 47
18822: PUSH
18823: EMPTY
18824: ST_TO_ADDR
// disable ;
18825: DISABLE
// end ; end ;
18826: END
// every 0 0$01 trigger debug and debug_strings do
18827: LD_EXP 1
18831: IFFALSE 18839
18833: PUSH
18834: LD_OWVAR 48
18838: AND
18839: IFFALSE 18855
18841: GO 18843
18843: DISABLE
// begin enable ;
18844: ENABLE
// Display_Strings := debug_strings ;
18845: LD_ADDR_OWVAR 47
18849: PUSH
18850: LD_OWVAR 48
18854: ST_TO_ADDR
// end ; end_of_file
18855: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
18856: LD_VAR 0 1
18860: PPUSH
18861: LD_VAR 0 2
18865: PPUSH
18866: CALL 35683 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
18870: LD_VAR 0 1
18874: PPUSH
18875: CALL_OW 255
18879: PUSH
18880: LD_INT 1
18882: EQUAL
18883: IFFALSE 18892
18885: PUSH
18886: LD_EXP 14
18890: NOT
18891: AND
18892: IFFALSE 18902
// solar_builded := true ;
18894: LD_ADDR_EXP 14
18898: PUSH
18899: LD_INT 1
18901: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18902: LD_VAR 0 1
18906: PPUSH
18907: CALL_OW 255
18911: PUSH
18912: LD_INT 1
18914: EQUAL
18915: IFFALSE 18923
18917: PUSH
18918: LD_EXP 29
18922: AND
18923: IFFALSE 18960
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
18925: LD_ADDR_EXP 29
18929: PUSH
18930: LD_EXP 29
18934: PUSH
18935: LD_INT 1750
18937: PUSH
18938: LD_INT 1400
18940: PUSH
18941: LD_INT 1225
18943: PUSH
18944: LD_INT 1050
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: PUSH
18953: LD_OWVAR 67
18957: ARRAY
18958: PLUS
18959: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18960: LD_VAR 0 1
18964: PPUSH
18965: CALL_OW 255
18969: PUSH
18970: LD_INT 3
18972: EQUAL
18973: IFFALSE 18991
// ru_vehicles := ru_vehicles ^ veh ;
18975: LD_ADDR_EXP 56
18979: PUSH
18980: LD_EXP 56
18984: PUSH
18985: LD_VAR 0 1
18989: ADD
18990: ST_TO_ADDR
// end ;
18991: PPOPN 2
18993: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18994: LD_VAR 0 1
18998: PPUSH
18999: CALL 35625 0 1
// if un in ru_patrol then
19003: LD_VAR 0 1
19007: PUSH
19008: LD_EXP 53
19012: IN
19013: IFFALSE 19031
// ru_patrol := ru_patrol diff un ;
19015: LD_ADDR_EXP 53
19019: PUSH
19020: LD_EXP 53
19024: PUSH
19025: LD_VAR 0 1
19029: DIFF
19030: ST_TO_ADDR
// if un in ru_forest then
19031: LD_VAR 0 1
19035: PUSH
19036: LD_EXP 55
19040: IN
19041: IFFALSE 19059
// ru_forest := ru_forest diff un ;
19043: LD_ADDR_EXP 55
19047: PUSH
19048: LD_EXP 55
19052: PUSH
19053: LD_VAR 0 1
19057: DIFF
19058: ST_TO_ADDR
// if un in ru_vehicles then
19059: LD_VAR 0 1
19063: PUSH
19064: LD_EXP 56
19068: IN
19069: IFFALSE 19175
// begin ru_vehicles := ru_vehicles diff un ;
19071: LD_ADDR_EXP 56
19075: PUSH
19076: LD_EXP 56
19080: PUSH
19081: LD_VAR 0 1
19085: DIFF
19086: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
19087: LD_ADDR_EXP 57
19091: PUSH
19092: LD_EXP 57
19096: PUSH
19097: LD_VAR 0 1
19101: PPUSH
19102: CALL_OW 265
19106: PUSH
19107: LD_VAR 0 1
19111: PPUSH
19112: CALL_OW 262
19116: PUSH
19117: LD_VAR 0 1
19121: PPUSH
19122: CALL_OW 263
19126: PUSH
19127: LD_VAR 0 1
19131: PPUSH
19132: CALL_OW 264
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: ADD
19143: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
19144: LD_ADDR_EXP 13
19148: PUSH
19149: LD_EXP 13
19153: PUSH
19154: LD_INT 1
19156: PLUS
19157: ST_TO_ADDR
// if ach_counter = 10 then
19158: LD_EXP 13
19162: PUSH
19163: LD_INT 10
19165: EQUAL
19166: IFFALSE 19175
// SetAchievement ( ACH_FAUST ) ;
19168: LD_STRING ACH_FAUST
19170: PPUSH
19171: CALL_OW 543
// end ; if un = Pokryshkin then
19175: LD_VAR 0 1
19179: PUSH
19180: LD_EXP 52
19184: EQUAL
19185: IFFALSE 19194
// SetAchievement ( ACH_POKR ) ;
19187: LD_STRING ACH_POKR
19189: PPUSH
19190: CALL_OW 543
// if un = JMM then
19194: LD_VAR 0 1
19198: PUSH
19199: LD_EXP 37
19203: EQUAL
19204: IFFALSE 19213
// YouLost ( 0 ) ;
19206: LD_STRING 0
19208: PPUSH
19209: CALL_OW 104
// if un = us_dep_west then
19213: LD_VAR 0 1
19217: PUSH
19218: LD_INT 1
19220: EQUAL
19221: IFFALSE 19230
// YouLost ( 2 ) ;
19223: LD_STRING 2
19225: PPUSH
19226: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
19230: LD_VAR 0 1
19234: PPUSH
19235: CALL_OW 255
19239: PUSH
19240: LD_INT 8
19242: EQUAL
19243: IFFALSE 19252
19245: PUSH
19246: LD_EXP 5
19250: NOT
19251: AND
19252: IFFALSE 19261
// YouLost ( 4 ) ;
19254: LD_STRING 4
19256: PPUSH
19257: CALL_OW 104
// if un in jmm_units then
19261: LD_VAR 0 1
19265: PUSH
19266: LD_EXP 4
19270: IN
19271: IFFALSE 19287
// lose_counter := lose_counter + 1 ;
19273: LD_ADDR_EXP 34
19277: PUSH
19278: LD_EXP 34
19282: PUSH
19283: LD_INT 1
19285: PLUS
19286: ST_TO_ADDR
// end ;
19287: PPOPN 1
19289: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
19290: LD_INT 0
19292: PPUSH
19293: PPUSH
// begin if GetSide ( driver ) = 3 then
19294: LD_VAR 0 1
19298: PPUSH
19299: CALL_OW 255
19303: PUSH
19304: LD_INT 3
19306: EQUAL
19307: IFFALSE 19385
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
19309: LD_ADDR_VAR 0 6
19313: PUSH
19314: LD_INT 22
19316: PUSH
19317: LD_INT 3
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 30
19326: PUSH
19327: LD_INT 3
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PPUSH
19338: CALL_OW 69
19342: PPUSH
19343: CALL 1007 0 1
19347: ST_TO_ADDR
// if place then
19348: LD_VAR 0 6
19352: IFFALSE 19370
// ComEnterUnit ( driver , place ) else
19354: LD_VAR 0 1
19358: PPUSH
19359: LD_VAR 0 6
19363: PPUSH
19364: CALL_OW 120
19368: GO 19385
// ComMoveXY ( driver , 70 , 22 ) ;
19370: LD_VAR 0 1
19374: PPUSH
19375: LD_INT 70
19377: PPUSH
19378: LD_INT 22
19380: PPUSH
19381: CALL_OW 111
// end ; end ;
19385: PPOPN 6
19387: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
19388: LD_VAR 0 1
19392: PUSH
19393: LD_INT 1
19395: EQUAL
19396: IFFALSE 19429
19398: PUSH
19399: LD_VAR 0 2
19403: PUSH
19404: LD_INT 4
19406: EQUAL
19407: IFTRUE 19428
19409: PUSH
19410: LD_VAR 0 2
19414: PUSH
19415: LD_INT 8
19417: EQUAL
19418: IFFALSE 19427
19420: PUSH
19421: LD_EXP 5
19425: NOT
19426: AND
19427: OR
19428: AND
19429: IFFALSE 19438
// YouLost ( 5 ) ;
19431: LD_STRING 5
19433: PPUSH
19434: CALL_OW 104
// end ;
19438: PPOPN 2
19440: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
19441: LD_EXP 36
19445: PUSH
19446: LD_INT 22
19448: PUSH
19449: LD_INT 1
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 21
19458: PUSH
19459: LD_INT 1
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PPUSH
19470: CALL_OW 69
19474: PUSH
19475: LD_INT 22
19477: PUSH
19478: LD_INT 8
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 21
19487: PUSH
19488: LD_INT 1
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PPUSH
19499: CALL_OW 69
19503: ADD
19504: PLUS
19505: PUSH
19506: LD_INT 5
19508: LESS
19509: IFFALSE 19521
19511: GO 19513
19513: DISABLE
// YouLost ( 1 ) ;
19514: LD_STRING 1
19516: PPUSH
19517: CALL_OW 104
19521: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
19522: LD_INT 1
19524: PPUSH
19525: CALL_OW 255
19529: PUSH
19530: LD_INT 3
19532: EQUAL
19533: IFFALSE 19545
19535: GO 19537
19537: DISABLE
// YouLost ( 3 ) ; end_of_file end_of_file
19538: LD_STRING 3
19540: PPUSH
19541: CALL_OW 104
19545: END
// export globalGameSaveCounter ; every 0 0$1 do
19546: GO 19548
19548: DISABLE
// begin enable ;
19549: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19550: LD_STRING updateTimer(
19552: PUSH
19553: LD_OWVAR 1
19557: STR
19558: PUSH
19559: LD_STRING );
19561: STR
19562: PPUSH
19563: CALL_OW 559
// end ;
19567: END
// every 0 0$1 do
19568: GO 19570
19570: DISABLE
// begin globalGameSaveCounter := 0 ;
19571: LD_ADDR_EXP 62
19575: PUSH
19576: LD_INT 0
19578: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19579: LD_STRING setGameSaveCounter(0)
19581: PPUSH
19582: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19586: LD_STRING initStreamRollete();
19588: PPUSH
19589: CALL_OW 559
// InitStreamMode ;
19593: CALL 20938 0 0
// DefineStreamItems ( false ) ;
19597: LD_INT 0
19599: PPUSH
19600: CALL 21402 0 1
// end ;
19604: END
// export function SOS_MapStart ( ) ; begin
19605: LD_INT 0
19607: PPUSH
// if streamModeActive then
19608: LD_EXP 63
19612: IFFALSE 19621
// DefineStreamItems ( true ) ;
19614: LD_INT 1
19616: PPUSH
19617: CALL 21402 0 1
// UpdateLuaVariables ( ) ;
19621: CALL 19638 0 0
// UpdateFactoryWaypoints ( ) ;
19625: CALL 34524 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19629: CALL 34776 0 0
// end ;
19633: LD_VAR 0 1
19637: RET
// function UpdateLuaVariables ( ) ; begin
19638: LD_INT 0
19640: PPUSH
// if globalGameSaveCounter then
19641: LD_EXP 62
19645: IFFALSE 19679
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19647: LD_ADDR_EXP 62
19651: PUSH
19652: LD_EXP 62
19656: PPUSH
19657: CALL 81562 0 1
19661: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19662: LD_STRING setGameSaveCounter(
19664: PUSH
19665: LD_EXP 62
19669: STR
19670: PUSH
19671: LD_STRING )
19673: STR
19674: PPUSH
19675: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19679: LD_STRING setGameDifficulty(
19681: PUSH
19682: LD_OWVAR 67
19686: STR
19687: PUSH
19688: LD_STRING )
19690: STR
19691: PPUSH
19692: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19696: LD_STRING displayDifficulty(
19698: PUSH
19699: LD_OWVAR 67
19703: STR
19704: PUSH
19705: LD_STRING )
19707: STR
19708: PPUSH
19709: CALL_OW 559
// end ;
19713: LD_VAR 0 1
19717: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19718: LD_INT 0
19720: PPUSH
// if p2 = stream_mode then
19721: LD_VAR 0 2
19725: PUSH
19726: LD_INT 100
19728: EQUAL
19729: IFFALSE 20732
// begin if not StreamModeActive then
19731: LD_EXP 63
19735: NOT
19736: IFFALSE 19746
// StreamModeActive := true ;
19738: LD_ADDR_EXP 63
19742: PUSH
19743: LD_INT 1
19745: ST_TO_ADDR
// if p3 = 0 then
19746: LD_VAR 0 3
19750: PUSH
19751: LD_INT 0
19753: EQUAL
19754: IFFALSE 19760
// InitStreamMode ;
19756: CALL 20938 0 0
// if p3 = 1 then
19760: LD_VAR 0 3
19764: PUSH
19765: LD_INT 1
19767: EQUAL
19768: IFFALSE 19778
// sRocket := true ;
19770: LD_ADDR_EXP 68
19774: PUSH
19775: LD_INT 1
19777: ST_TO_ADDR
// if p3 = 2 then
19778: LD_VAR 0 3
19782: PUSH
19783: LD_INT 2
19785: EQUAL
19786: IFFALSE 19796
// sSpeed := true ;
19788: LD_ADDR_EXP 67
19792: PUSH
19793: LD_INT 1
19795: ST_TO_ADDR
// if p3 = 3 then
19796: LD_VAR 0 3
19800: PUSH
19801: LD_INT 3
19803: EQUAL
19804: IFFALSE 19814
// sEngine := true ;
19806: LD_ADDR_EXP 69
19810: PUSH
19811: LD_INT 1
19813: ST_TO_ADDR
// if p3 = 4 then
19814: LD_VAR 0 3
19818: PUSH
19819: LD_INT 4
19821: EQUAL
19822: IFFALSE 19832
// sSpec := true ;
19824: LD_ADDR_EXP 66
19828: PUSH
19829: LD_INT 1
19831: ST_TO_ADDR
// if p3 = 5 then
19832: LD_VAR 0 3
19836: PUSH
19837: LD_INT 5
19839: EQUAL
19840: IFFALSE 19850
// sLevel := true ;
19842: LD_ADDR_EXP 70
19846: PUSH
19847: LD_INT 1
19849: ST_TO_ADDR
// if p3 = 6 then
19850: LD_VAR 0 3
19854: PUSH
19855: LD_INT 6
19857: EQUAL
19858: IFFALSE 19868
// sArmoury := true ;
19860: LD_ADDR_EXP 71
19864: PUSH
19865: LD_INT 1
19867: ST_TO_ADDR
// if p3 = 7 then
19868: LD_VAR 0 3
19872: PUSH
19873: LD_INT 7
19875: EQUAL
19876: IFFALSE 19886
// sRadar := true ;
19878: LD_ADDR_EXP 72
19882: PUSH
19883: LD_INT 1
19885: ST_TO_ADDR
// if p3 = 8 then
19886: LD_VAR 0 3
19890: PUSH
19891: LD_INT 8
19893: EQUAL
19894: IFFALSE 19904
// sBunker := true ;
19896: LD_ADDR_EXP 73
19900: PUSH
19901: LD_INT 1
19903: ST_TO_ADDR
// if p3 = 9 then
19904: LD_VAR 0 3
19908: PUSH
19909: LD_INT 9
19911: EQUAL
19912: IFFALSE 19922
// sHack := true ;
19914: LD_ADDR_EXP 74
19918: PUSH
19919: LD_INT 1
19921: ST_TO_ADDR
// if p3 = 10 then
19922: LD_VAR 0 3
19926: PUSH
19927: LD_INT 10
19929: EQUAL
19930: IFFALSE 19940
// sFire := true ;
19932: LD_ADDR_EXP 75
19936: PUSH
19937: LD_INT 1
19939: ST_TO_ADDR
// if p3 = 11 then
19940: LD_VAR 0 3
19944: PUSH
19945: LD_INT 11
19947: EQUAL
19948: IFFALSE 19958
// sRefresh := true ;
19950: LD_ADDR_EXP 76
19954: PUSH
19955: LD_INT 1
19957: ST_TO_ADDR
// if p3 = 12 then
19958: LD_VAR 0 3
19962: PUSH
19963: LD_INT 12
19965: EQUAL
19966: IFFALSE 19976
// sExp := true ;
19968: LD_ADDR_EXP 77
19972: PUSH
19973: LD_INT 1
19975: ST_TO_ADDR
// if p3 = 13 then
19976: LD_VAR 0 3
19980: PUSH
19981: LD_INT 13
19983: EQUAL
19984: IFFALSE 19994
// sDepot := true ;
19986: LD_ADDR_EXP 78
19990: PUSH
19991: LD_INT 1
19993: ST_TO_ADDR
// if p3 = 14 then
19994: LD_VAR 0 3
19998: PUSH
19999: LD_INT 14
20001: EQUAL
20002: IFFALSE 20012
// sFlag := true ;
20004: LD_ADDR_EXP 79
20008: PUSH
20009: LD_INT 1
20011: ST_TO_ADDR
// if p3 = 15 then
20012: LD_VAR 0 3
20016: PUSH
20017: LD_INT 15
20019: EQUAL
20020: IFFALSE 20030
// sKamikadze := true ;
20022: LD_ADDR_EXP 87
20026: PUSH
20027: LD_INT 1
20029: ST_TO_ADDR
// if p3 = 16 then
20030: LD_VAR 0 3
20034: PUSH
20035: LD_INT 16
20037: EQUAL
20038: IFFALSE 20048
// sTroll := true ;
20040: LD_ADDR_EXP 88
20044: PUSH
20045: LD_INT 1
20047: ST_TO_ADDR
// if p3 = 17 then
20048: LD_VAR 0 3
20052: PUSH
20053: LD_INT 17
20055: EQUAL
20056: IFFALSE 20066
// sSlow := true ;
20058: LD_ADDR_EXP 89
20062: PUSH
20063: LD_INT 1
20065: ST_TO_ADDR
// if p3 = 18 then
20066: LD_VAR 0 3
20070: PUSH
20071: LD_INT 18
20073: EQUAL
20074: IFFALSE 20084
// sLack := true ;
20076: LD_ADDR_EXP 90
20080: PUSH
20081: LD_INT 1
20083: ST_TO_ADDR
// if p3 = 19 then
20084: LD_VAR 0 3
20088: PUSH
20089: LD_INT 19
20091: EQUAL
20092: IFFALSE 20102
// sTank := true ;
20094: LD_ADDR_EXP 92
20098: PUSH
20099: LD_INT 1
20101: ST_TO_ADDR
// if p3 = 20 then
20102: LD_VAR 0 3
20106: PUSH
20107: LD_INT 20
20109: EQUAL
20110: IFFALSE 20120
// sRemote := true ;
20112: LD_ADDR_EXP 93
20116: PUSH
20117: LD_INT 1
20119: ST_TO_ADDR
// if p3 = 21 then
20120: LD_VAR 0 3
20124: PUSH
20125: LD_INT 21
20127: EQUAL
20128: IFFALSE 20138
// sPowell := true ;
20130: LD_ADDR_EXP 94
20134: PUSH
20135: LD_INT 1
20137: ST_TO_ADDR
// if p3 = 22 then
20138: LD_VAR 0 3
20142: PUSH
20143: LD_INT 22
20145: EQUAL
20146: IFFALSE 20156
// sTeleport := true ;
20148: LD_ADDR_EXP 97
20152: PUSH
20153: LD_INT 1
20155: ST_TO_ADDR
// if p3 = 23 then
20156: LD_VAR 0 3
20160: PUSH
20161: LD_INT 23
20163: EQUAL
20164: IFFALSE 20174
// sOilTower := true ;
20166: LD_ADDR_EXP 99
20170: PUSH
20171: LD_INT 1
20173: ST_TO_ADDR
// if p3 = 24 then
20174: LD_VAR 0 3
20178: PUSH
20179: LD_INT 24
20181: EQUAL
20182: IFFALSE 20192
// sShovel := true ;
20184: LD_ADDR_EXP 100
20188: PUSH
20189: LD_INT 1
20191: ST_TO_ADDR
// if p3 = 25 then
20192: LD_VAR 0 3
20196: PUSH
20197: LD_INT 25
20199: EQUAL
20200: IFFALSE 20210
// sSheik := true ;
20202: LD_ADDR_EXP 101
20206: PUSH
20207: LD_INT 1
20209: ST_TO_ADDR
// if p3 = 26 then
20210: LD_VAR 0 3
20214: PUSH
20215: LD_INT 26
20217: EQUAL
20218: IFFALSE 20228
// sEarthquake := true ;
20220: LD_ADDR_EXP 103
20224: PUSH
20225: LD_INT 1
20227: ST_TO_ADDR
// if p3 = 27 then
20228: LD_VAR 0 3
20232: PUSH
20233: LD_INT 27
20235: EQUAL
20236: IFFALSE 20246
// sAI := true ;
20238: LD_ADDR_EXP 104
20242: PUSH
20243: LD_INT 1
20245: ST_TO_ADDR
// if p3 = 28 then
20246: LD_VAR 0 3
20250: PUSH
20251: LD_INT 28
20253: EQUAL
20254: IFFALSE 20264
// sCargo := true ;
20256: LD_ADDR_EXP 107
20260: PUSH
20261: LD_INT 1
20263: ST_TO_ADDR
// if p3 = 29 then
20264: LD_VAR 0 3
20268: PUSH
20269: LD_INT 29
20271: EQUAL
20272: IFFALSE 20282
// sDLaser := true ;
20274: LD_ADDR_EXP 108
20278: PUSH
20279: LD_INT 1
20281: ST_TO_ADDR
// if p3 = 30 then
20282: LD_VAR 0 3
20286: PUSH
20287: LD_INT 30
20289: EQUAL
20290: IFFALSE 20300
// sExchange := true ;
20292: LD_ADDR_EXP 109
20296: PUSH
20297: LD_INT 1
20299: ST_TO_ADDR
// if p3 = 31 then
20300: LD_VAR 0 3
20304: PUSH
20305: LD_INT 31
20307: EQUAL
20308: IFFALSE 20318
// sFac := true ;
20310: LD_ADDR_EXP 110
20314: PUSH
20315: LD_INT 1
20317: ST_TO_ADDR
// if p3 = 32 then
20318: LD_VAR 0 3
20322: PUSH
20323: LD_INT 32
20325: EQUAL
20326: IFFALSE 20336
// sPower := true ;
20328: LD_ADDR_EXP 111
20332: PUSH
20333: LD_INT 1
20335: ST_TO_ADDR
// if p3 = 33 then
20336: LD_VAR 0 3
20340: PUSH
20341: LD_INT 33
20343: EQUAL
20344: IFFALSE 20354
// sRandom := true ;
20346: LD_ADDR_EXP 112
20350: PUSH
20351: LD_INT 1
20353: ST_TO_ADDR
// if p3 = 34 then
20354: LD_VAR 0 3
20358: PUSH
20359: LD_INT 34
20361: EQUAL
20362: IFFALSE 20372
// sShield := true ;
20364: LD_ADDR_EXP 113
20368: PUSH
20369: LD_INT 1
20371: ST_TO_ADDR
// if p3 = 35 then
20372: LD_VAR 0 3
20376: PUSH
20377: LD_INT 35
20379: EQUAL
20380: IFFALSE 20390
// sTime := true ;
20382: LD_ADDR_EXP 114
20386: PUSH
20387: LD_INT 1
20389: ST_TO_ADDR
// if p3 = 36 then
20390: LD_VAR 0 3
20394: PUSH
20395: LD_INT 36
20397: EQUAL
20398: IFFALSE 20408
// sTools := true ;
20400: LD_ADDR_EXP 115
20404: PUSH
20405: LD_INT 1
20407: ST_TO_ADDR
// if p3 = 101 then
20408: LD_VAR 0 3
20412: PUSH
20413: LD_INT 101
20415: EQUAL
20416: IFFALSE 20426
// sSold := true ;
20418: LD_ADDR_EXP 80
20422: PUSH
20423: LD_INT 1
20425: ST_TO_ADDR
// if p3 = 102 then
20426: LD_VAR 0 3
20430: PUSH
20431: LD_INT 102
20433: EQUAL
20434: IFFALSE 20444
// sDiff := true ;
20436: LD_ADDR_EXP 81
20440: PUSH
20441: LD_INT 1
20443: ST_TO_ADDR
// if p3 = 103 then
20444: LD_VAR 0 3
20448: PUSH
20449: LD_INT 103
20451: EQUAL
20452: IFFALSE 20462
// sFog := true ;
20454: LD_ADDR_EXP 84
20458: PUSH
20459: LD_INT 1
20461: ST_TO_ADDR
// if p3 = 104 then
20462: LD_VAR 0 3
20466: PUSH
20467: LD_INT 104
20469: EQUAL
20470: IFFALSE 20480
// sReset := true ;
20472: LD_ADDR_EXP 85
20476: PUSH
20477: LD_INT 1
20479: ST_TO_ADDR
// if p3 = 105 then
20480: LD_VAR 0 3
20484: PUSH
20485: LD_INT 105
20487: EQUAL
20488: IFFALSE 20498
// sSun := true ;
20490: LD_ADDR_EXP 86
20494: PUSH
20495: LD_INT 1
20497: ST_TO_ADDR
// if p3 = 106 then
20498: LD_VAR 0 3
20502: PUSH
20503: LD_INT 106
20505: EQUAL
20506: IFFALSE 20516
// sTiger := true ;
20508: LD_ADDR_EXP 82
20512: PUSH
20513: LD_INT 1
20515: ST_TO_ADDR
// if p3 = 107 then
20516: LD_VAR 0 3
20520: PUSH
20521: LD_INT 107
20523: EQUAL
20524: IFFALSE 20534
// sBomb := true ;
20526: LD_ADDR_EXP 83
20530: PUSH
20531: LD_INT 1
20533: ST_TO_ADDR
// if p3 = 108 then
20534: LD_VAR 0 3
20538: PUSH
20539: LD_INT 108
20541: EQUAL
20542: IFFALSE 20552
// sWound := true ;
20544: LD_ADDR_EXP 91
20548: PUSH
20549: LD_INT 1
20551: ST_TO_ADDR
// if p3 = 109 then
20552: LD_VAR 0 3
20556: PUSH
20557: LD_INT 109
20559: EQUAL
20560: IFFALSE 20570
// sBetray := true ;
20562: LD_ADDR_EXP 95
20566: PUSH
20567: LD_INT 1
20569: ST_TO_ADDR
// if p3 = 110 then
20570: LD_VAR 0 3
20574: PUSH
20575: LD_INT 110
20577: EQUAL
20578: IFFALSE 20588
// sContamin := true ;
20580: LD_ADDR_EXP 96
20584: PUSH
20585: LD_INT 1
20587: ST_TO_ADDR
// if p3 = 111 then
20588: LD_VAR 0 3
20592: PUSH
20593: LD_INT 111
20595: EQUAL
20596: IFFALSE 20606
// sOil := true ;
20598: LD_ADDR_EXP 98
20602: PUSH
20603: LD_INT 1
20605: ST_TO_ADDR
// if p3 = 112 then
20606: LD_VAR 0 3
20610: PUSH
20611: LD_INT 112
20613: EQUAL
20614: IFFALSE 20624
// sStu := true ;
20616: LD_ADDR_EXP 102
20620: PUSH
20621: LD_INT 1
20623: ST_TO_ADDR
// if p3 = 113 then
20624: LD_VAR 0 3
20628: PUSH
20629: LD_INT 113
20631: EQUAL
20632: IFFALSE 20642
// sBazooka := true ;
20634: LD_ADDR_EXP 105
20638: PUSH
20639: LD_INT 1
20641: ST_TO_ADDR
// if p3 = 114 then
20642: LD_VAR 0 3
20646: PUSH
20647: LD_INT 114
20649: EQUAL
20650: IFFALSE 20660
// sMortar := true ;
20652: LD_ADDR_EXP 106
20656: PUSH
20657: LD_INT 1
20659: ST_TO_ADDR
// if p3 = 115 then
20660: LD_VAR 0 3
20664: PUSH
20665: LD_INT 115
20667: EQUAL
20668: IFFALSE 20678
// sRanger := true ;
20670: LD_ADDR_EXP 116
20674: PUSH
20675: LD_INT 1
20677: ST_TO_ADDR
// if p3 = 116 then
20678: LD_VAR 0 3
20682: PUSH
20683: LD_INT 116
20685: EQUAL
20686: IFFALSE 20696
// sComputer := true ;
20688: LD_ADDR_EXP 117
20692: PUSH
20693: LD_INT 1
20695: ST_TO_ADDR
// if p3 = 117 then
20696: LD_VAR 0 3
20700: PUSH
20701: LD_INT 117
20703: EQUAL
20704: IFFALSE 20714
// s30 := true ;
20706: LD_ADDR_EXP 118
20710: PUSH
20711: LD_INT 1
20713: ST_TO_ADDR
// if p3 = 118 then
20714: LD_VAR 0 3
20718: PUSH
20719: LD_INT 118
20721: EQUAL
20722: IFFALSE 20732
// s60 := true ;
20724: LD_ADDR_EXP 119
20728: PUSH
20729: LD_INT 1
20731: ST_TO_ADDR
// end ; if p2 = hack_mode then
20732: LD_VAR 0 2
20736: PUSH
20737: LD_INT 101
20739: EQUAL
20740: IFFALSE 20868
// begin case p3 of 1 :
20742: LD_VAR 0 3
20746: PUSH
20747: LD_INT 1
20749: DOUBLE
20750: EQUAL
20751: IFTRUE 20755
20753: GO 20762
20755: POP
// hHackUnlimitedResources ; 2 :
20756: CALL 33131 0 0
20760: GO 20868
20762: LD_INT 2
20764: DOUBLE
20765: EQUAL
20766: IFTRUE 20770
20768: GO 20777
20770: POP
// hHackSetLevel10 ; 3 :
20771: CALL 33264 0 0
20775: GO 20868
20777: LD_INT 3
20779: DOUBLE
20780: EQUAL
20781: IFTRUE 20785
20783: GO 20792
20785: POP
// hHackSetLevel10YourUnits ; 4 :
20786: CALL 33349 0 0
20790: GO 20868
20792: LD_INT 4
20794: DOUBLE
20795: EQUAL
20796: IFTRUE 20800
20798: GO 20807
20800: POP
// hHackInvincible ; 5 :
20801: CALL 33797 0 0
20805: GO 20868
20807: LD_INT 5
20809: DOUBLE
20810: EQUAL
20811: IFTRUE 20815
20813: GO 20822
20815: POP
// hHackInvisible ; 6 :
20816: CALL 33908 0 0
20820: GO 20868
20822: LD_INT 6
20824: DOUBLE
20825: EQUAL
20826: IFTRUE 20830
20828: GO 20837
20830: POP
// hHackChangeYourSide ; 7 :
20831: CALL 33965 0 0
20835: GO 20868
20837: LD_INT 7
20839: DOUBLE
20840: EQUAL
20841: IFTRUE 20845
20843: GO 20852
20845: POP
// hHackChangeUnitSide ; 8 :
20846: CALL 34007 0 0
20850: GO 20868
20852: LD_INT 8
20854: DOUBLE
20855: EQUAL
20856: IFTRUE 20860
20858: GO 20867
20860: POP
// hHackFog ; end ;
20861: CALL 34108 0 0
20865: GO 20868
20867: POP
// end ; if p2 = game_save_mode then
20868: LD_VAR 0 2
20872: PUSH
20873: LD_INT 102
20875: EQUAL
20876: IFFALSE 20933
// begin if p3 = 1 then
20878: LD_VAR 0 3
20882: PUSH
20883: LD_INT 1
20885: EQUAL
20886: IFFALSE 20898
// globalGameSaveCounter := p4 ;
20888: LD_ADDR_EXP 62
20892: PUSH
20893: LD_VAR 0 4
20897: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20898: LD_VAR 0 3
20902: PUSH
20903: LD_INT 2
20905: EQUAL
20906: IFFALSE 20914
20908: PUSH
20909: LD_EXP 62
20913: AND
20914: IFFALSE 20933
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20916: LD_STRING setGameSaveCounter(
20918: PUSH
20919: LD_EXP 62
20923: STR
20924: PUSH
20925: LD_STRING )
20927: STR
20928: PPUSH
20929: CALL_OW 559
// end ; end ;
20933: LD_VAR 0 7
20937: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20938: LD_INT 0
20940: PPUSH
// streamModeActive := false ;
20941: LD_ADDR_EXP 63
20945: PUSH
20946: LD_INT 0
20948: ST_TO_ADDR
// normalCounter := 36 ;
20949: LD_ADDR_EXP 64
20953: PUSH
20954: LD_INT 36
20956: ST_TO_ADDR
// hardcoreCounter := 18 ;
20957: LD_ADDR_EXP 65
20961: PUSH
20962: LD_INT 18
20964: ST_TO_ADDR
// sRocket := false ;
20965: LD_ADDR_EXP 68
20969: PUSH
20970: LD_INT 0
20972: ST_TO_ADDR
// sSpeed := false ;
20973: LD_ADDR_EXP 67
20977: PUSH
20978: LD_INT 0
20980: ST_TO_ADDR
// sEngine := false ;
20981: LD_ADDR_EXP 69
20985: PUSH
20986: LD_INT 0
20988: ST_TO_ADDR
// sSpec := false ;
20989: LD_ADDR_EXP 66
20993: PUSH
20994: LD_INT 0
20996: ST_TO_ADDR
// sLevel := false ;
20997: LD_ADDR_EXP 70
21001: PUSH
21002: LD_INT 0
21004: ST_TO_ADDR
// sArmoury := false ;
21005: LD_ADDR_EXP 71
21009: PUSH
21010: LD_INT 0
21012: ST_TO_ADDR
// sRadar := false ;
21013: LD_ADDR_EXP 72
21017: PUSH
21018: LD_INT 0
21020: ST_TO_ADDR
// sBunker := false ;
21021: LD_ADDR_EXP 73
21025: PUSH
21026: LD_INT 0
21028: ST_TO_ADDR
// sHack := false ;
21029: LD_ADDR_EXP 74
21033: PUSH
21034: LD_INT 0
21036: ST_TO_ADDR
// sFire := false ;
21037: LD_ADDR_EXP 75
21041: PUSH
21042: LD_INT 0
21044: ST_TO_ADDR
// sRefresh := false ;
21045: LD_ADDR_EXP 76
21049: PUSH
21050: LD_INT 0
21052: ST_TO_ADDR
// sExp := false ;
21053: LD_ADDR_EXP 77
21057: PUSH
21058: LD_INT 0
21060: ST_TO_ADDR
// sDepot := false ;
21061: LD_ADDR_EXP 78
21065: PUSH
21066: LD_INT 0
21068: ST_TO_ADDR
// sFlag := false ;
21069: LD_ADDR_EXP 79
21073: PUSH
21074: LD_INT 0
21076: ST_TO_ADDR
// sKamikadze := false ;
21077: LD_ADDR_EXP 87
21081: PUSH
21082: LD_INT 0
21084: ST_TO_ADDR
// sTroll := false ;
21085: LD_ADDR_EXP 88
21089: PUSH
21090: LD_INT 0
21092: ST_TO_ADDR
// sSlow := false ;
21093: LD_ADDR_EXP 89
21097: PUSH
21098: LD_INT 0
21100: ST_TO_ADDR
// sLack := false ;
21101: LD_ADDR_EXP 90
21105: PUSH
21106: LD_INT 0
21108: ST_TO_ADDR
// sTank := false ;
21109: LD_ADDR_EXP 92
21113: PUSH
21114: LD_INT 0
21116: ST_TO_ADDR
// sRemote := false ;
21117: LD_ADDR_EXP 93
21121: PUSH
21122: LD_INT 0
21124: ST_TO_ADDR
// sPowell := false ;
21125: LD_ADDR_EXP 94
21129: PUSH
21130: LD_INT 0
21132: ST_TO_ADDR
// sTeleport := false ;
21133: LD_ADDR_EXP 97
21137: PUSH
21138: LD_INT 0
21140: ST_TO_ADDR
// sOilTower := false ;
21141: LD_ADDR_EXP 99
21145: PUSH
21146: LD_INT 0
21148: ST_TO_ADDR
// sShovel := false ;
21149: LD_ADDR_EXP 100
21153: PUSH
21154: LD_INT 0
21156: ST_TO_ADDR
// sSheik := false ;
21157: LD_ADDR_EXP 101
21161: PUSH
21162: LD_INT 0
21164: ST_TO_ADDR
// sEarthquake := false ;
21165: LD_ADDR_EXP 103
21169: PUSH
21170: LD_INT 0
21172: ST_TO_ADDR
// sAI := false ;
21173: LD_ADDR_EXP 104
21177: PUSH
21178: LD_INT 0
21180: ST_TO_ADDR
// sCargo := false ;
21181: LD_ADDR_EXP 107
21185: PUSH
21186: LD_INT 0
21188: ST_TO_ADDR
// sDLaser := false ;
21189: LD_ADDR_EXP 108
21193: PUSH
21194: LD_INT 0
21196: ST_TO_ADDR
// sExchange := false ;
21197: LD_ADDR_EXP 109
21201: PUSH
21202: LD_INT 0
21204: ST_TO_ADDR
// sFac := false ;
21205: LD_ADDR_EXP 110
21209: PUSH
21210: LD_INT 0
21212: ST_TO_ADDR
// sPower := false ;
21213: LD_ADDR_EXP 111
21217: PUSH
21218: LD_INT 0
21220: ST_TO_ADDR
// sRandom := false ;
21221: LD_ADDR_EXP 112
21225: PUSH
21226: LD_INT 0
21228: ST_TO_ADDR
// sShield := false ;
21229: LD_ADDR_EXP 113
21233: PUSH
21234: LD_INT 0
21236: ST_TO_ADDR
// sTime := false ;
21237: LD_ADDR_EXP 114
21241: PUSH
21242: LD_INT 0
21244: ST_TO_ADDR
// sTools := false ;
21245: LD_ADDR_EXP 115
21249: PUSH
21250: LD_INT 0
21252: ST_TO_ADDR
// sSold := false ;
21253: LD_ADDR_EXP 80
21257: PUSH
21258: LD_INT 0
21260: ST_TO_ADDR
// sDiff := false ;
21261: LD_ADDR_EXP 81
21265: PUSH
21266: LD_INT 0
21268: ST_TO_ADDR
// sFog := false ;
21269: LD_ADDR_EXP 84
21273: PUSH
21274: LD_INT 0
21276: ST_TO_ADDR
// sReset := false ;
21277: LD_ADDR_EXP 85
21281: PUSH
21282: LD_INT 0
21284: ST_TO_ADDR
// sSun := false ;
21285: LD_ADDR_EXP 86
21289: PUSH
21290: LD_INT 0
21292: ST_TO_ADDR
// sTiger := false ;
21293: LD_ADDR_EXP 82
21297: PUSH
21298: LD_INT 0
21300: ST_TO_ADDR
// sBomb := false ;
21301: LD_ADDR_EXP 83
21305: PUSH
21306: LD_INT 0
21308: ST_TO_ADDR
// sWound := false ;
21309: LD_ADDR_EXP 91
21313: PUSH
21314: LD_INT 0
21316: ST_TO_ADDR
// sBetray := false ;
21317: LD_ADDR_EXP 95
21321: PUSH
21322: LD_INT 0
21324: ST_TO_ADDR
// sContamin := false ;
21325: LD_ADDR_EXP 96
21329: PUSH
21330: LD_INT 0
21332: ST_TO_ADDR
// sOil := false ;
21333: LD_ADDR_EXP 98
21337: PUSH
21338: LD_INT 0
21340: ST_TO_ADDR
// sStu := false ;
21341: LD_ADDR_EXP 102
21345: PUSH
21346: LD_INT 0
21348: ST_TO_ADDR
// sBazooka := false ;
21349: LD_ADDR_EXP 105
21353: PUSH
21354: LD_INT 0
21356: ST_TO_ADDR
// sMortar := false ;
21357: LD_ADDR_EXP 106
21361: PUSH
21362: LD_INT 0
21364: ST_TO_ADDR
// sRanger := false ;
21365: LD_ADDR_EXP 116
21369: PUSH
21370: LD_INT 0
21372: ST_TO_ADDR
// sComputer := false ;
21373: LD_ADDR_EXP 117
21377: PUSH
21378: LD_INT 0
21380: ST_TO_ADDR
// s30 := false ;
21381: LD_ADDR_EXP 118
21385: PUSH
21386: LD_INT 0
21388: ST_TO_ADDR
// s60 := false ;
21389: LD_ADDR_EXP 119
21393: PUSH
21394: LD_INT 0
21396: ST_TO_ADDR
// end ;
21397: LD_VAR 0 1
21401: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21402: LD_INT 0
21404: PPUSH
21405: PPUSH
21406: PPUSH
21407: PPUSH
21408: PPUSH
21409: PPUSH
21410: PPUSH
// result := [ ] ;
21411: LD_ADDR_VAR 0 2
21415: PUSH
21416: EMPTY
21417: ST_TO_ADDR
// if campaign_id = 1 then
21418: LD_OWVAR 69
21422: PUSH
21423: LD_INT 1
21425: EQUAL
21426: IFFALSE 24592
// begin case mission_number of 1 :
21428: LD_OWVAR 70
21432: PUSH
21433: LD_INT 1
21435: DOUBLE
21436: EQUAL
21437: IFTRUE 21441
21439: GO 21517
21441: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21442: LD_ADDR_VAR 0 2
21446: PUSH
21447: LD_INT 2
21449: PUSH
21450: LD_INT 4
21452: PUSH
21453: LD_INT 11
21455: PUSH
21456: LD_INT 12
21458: PUSH
21459: LD_INT 15
21461: PUSH
21462: LD_INT 16
21464: PUSH
21465: LD_INT 22
21467: PUSH
21468: LD_INT 23
21470: PUSH
21471: LD_INT 26
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 101
21487: PUSH
21488: LD_INT 102
21490: PUSH
21491: LD_INT 106
21493: PUSH
21494: LD_INT 116
21496: PUSH
21497: LD_INT 117
21499: PUSH
21500: LD_INT 118
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: ST_TO_ADDR
21515: GO 24590
21517: LD_INT 2
21519: DOUBLE
21520: EQUAL
21521: IFTRUE 21525
21523: GO 21609
21525: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21526: LD_ADDR_VAR 0 2
21530: PUSH
21531: LD_INT 2
21533: PUSH
21534: LD_INT 4
21536: PUSH
21537: LD_INT 11
21539: PUSH
21540: LD_INT 12
21542: PUSH
21543: LD_INT 15
21545: PUSH
21546: LD_INT 16
21548: PUSH
21549: LD_INT 22
21551: PUSH
21552: LD_INT 23
21554: PUSH
21555: LD_INT 26
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 101
21571: PUSH
21572: LD_INT 102
21574: PUSH
21575: LD_INT 105
21577: PUSH
21578: LD_INT 106
21580: PUSH
21581: LD_INT 108
21583: PUSH
21584: LD_INT 116
21586: PUSH
21587: LD_INT 117
21589: PUSH
21590: LD_INT 118
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: ST_TO_ADDR
21607: GO 24590
21609: LD_INT 3
21611: DOUBLE
21612: EQUAL
21613: IFTRUE 21617
21615: GO 21705
21617: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21618: LD_ADDR_VAR 0 2
21622: PUSH
21623: LD_INT 2
21625: PUSH
21626: LD_INT 4
21628: PUSH
21629: LD_INT 5
21631: PUSH
21632: LD_INT 11
21634: PUSH
21635: LD_INT 12
21637: PUSH
21638: LD_INT 15
21640: PUSH
21641: LD_INT 16
21643: PUSH
21644: LD_INT 22
21646: PUSH
21647: LD_INT 26
21649: PUSH
21650: LD_INT 36
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 101
21667: PUSH
21668: LD_INT 102
21670: PUSH
21671: LD_INT 105
21673: PUSH
21674: LD_INT 106
21676: PUSH
21677: LD_INT 108
21679: PUSH
21680: LD_INT 116
21682: PUSH
21683: LD_INT 117
21685: PUSH
21686: LD_INT 118
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: ST_TO_ADDR
21703: GO 24590
21705: LD_INT 4
21707: DOUBLE
21708: EQUAL
21709: IFTRUE 21713
21711: GO 21809
21713: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21714: LD_ADDR_VAR 0 2
21718: PUSH
21719: LD_INT 2
21721: PUSH
21722: LD_INT 4
21724: PUSH
21725: LD_INT 5
21727: PUSH
21728: LD_INT 8
21730: PUSH
21731: LD_INT 11
21733: PUSH
21734: LD_INT 12
21736: PUSH
21737: LD_INT 15
21739: PUSH
21740: LD_INT 16
21742: PUSH
21743: LD_INT 22
21745: PUSH
21746: LD_INT 23
21748: PUSH
21749: LD_INT 26
21751: PUSH
21752: LD_INT 36
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: PUSH
21769: LD_INT 101
21771: PUSH
21772: LD_INT 102
21774: PUSH
21775: LD_INT 105
21777: PUSH
21778: LD_INT 106
21780: PUSH
21781: LD_INT 108
21783: PUSH
21784: LD_INT 116
21786: PUSH
21787: LD_INT 117
21789: PUSH
21790: LD_INT 118
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: ST_TO_ADDR
21807: GO 24590
21809: LD_INT 5
21811: DOUBLE
21812: EQUAL
21813: IFTRUE 21817
21815: GO 21929
21817: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21818: LD_ADDR_VAR 0 2
21822: PUSH
21823: LD_INT 2
21825: PUSH
21826: LD_INT 4
21828: PUSH
21829: LD_INT 5
21831: PUSH
21832: LD_INT 6
21834: PUSH
21835: LD_INT 8
21837: PUSH
21838: LD_INT 11
21840: PUSH
21841: LD_INT 12
21843: PUSH
21844: LD_INT 15
21846: PUSH
21847: LD_INT 16
21849: PUSH
21850: LD_INT 22
21852: PUSH
21853: LD_INT 23
21855: PUSH
21856: LD_INT 25
21858: PUSH
21859: LD_INT 26
21861: PUSH
21862: LD_INT 36
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 101
21883: PUSH
21884: LD_INT 102
21886: PUSH
21887: LD_INT 105
21889: PUSH
21890: LD_INT 106
21892: PUSH
21893: LD_INT 108
21895: PUSH
21896: LD_INT 109
21898: PUSH
21899: LD_INT 112
21901: PUSH
21902: LD_INT 116
21904: PUSH
21905: LD_INT 117
21907: PUSH
21908: LD_INT 118
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: ST_TO_ADDR
21927: GO 24590
21929: LD_INT 6
21931: DOUBLE
21932: EQUAL
21933: IFTRUE 21937
21935: GO 22069
21937: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21938: LD_ADDR_VAR 0 2
21942: PUSH
21943: LD_INT 2
21945: PUSH
21946: LD_INT 4
21948: PUSH
21949: LD_INT 5
21951: PUSH
21952: LD_INT 6
21954: PUSH
21955: LD_INT 8
21957: PUSH
21958: LD_INT 11
21960: PUSH
21961: LD_INT 12
21963: PUSH
21964: LD_INT 15
21966: PUSH
21967: LD_INT 16
21969: PUSH
21970: LD_INT 20
21972: PUSH
21973: LD_INT 21
21975: PUSH
21976: LD_INT 22
21978: PUSH
21979: LD_INT 23
21981: PUSH
21982: LD_INT 25
21984: PUSH
21985: LD_INT 26
21987: PUSH
21988: LD_INT 30
21990: PUSH
21991: LD_INT 31
21993: PUSH
21994: LD_INT 32
21996: PUSH
21997: LD_INT 36
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 101
22023: PUSH
22024: LD_INT 102
22026: PUSH
22027: LD_INT 105
22029: PUSH
22030: LD_INT 106
22032: PUSH
22033: LD_INT 108
22035: PUSH
22036: LD_INT 109
22038: PUSH
22039: LD_INT 112
22041: PUSH
22042: LD_INT 116
22044: PUSH
22045: LD_INT 117
22047: PUSH
22048: LD_INT 118
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: ST_TO_ADDR
22067: GO 24590
22069: LD_INT 7
22071: DOUBLE
22072: EQUAL
22073: IFTRUE 22077
22075: GO 22189
22077: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22078: LD_ADDR_VAR 0 2
22082: PUSH
22083: LD_INT 2
22085: PUSH
22086: LD_INT 4
22088: PUSH
22089: LD_INT 5
22091: PUSH
22092: LD_INT 7
22094: PUSH
22095: LD_INT 11
22097: PUSH
22098: LD_INT 12
22100: PUSH
22101: LD_INT 15
22103: PUSH
22104: LD_INT 16
22106: PUSH
22107: LD_INT 20
22109: PUSH
22110: LD_INT 21
22112: PUSH
22113: LD_INT 22
22115: PUSH
22116: LD_INT 23
22118: PUSH
22119: LD_INT 25
22121: PUSH
22122: LD_INT 26
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 101
22143: PUSH
22144: LD_INT 102
22146: PUSH
22147: LD_INT 103
22149: PUSH
22150: LD_INT 105
22152: PUSH
22153: LD_INT 106
22155: PUSH
22156: LD_INT 108
22158: PUSH
22159: LD_INT 112
22161: PUSH
22162: LD_INT 116
22164: PUSH
22165: LD_INT 117
22167: PUSH
22168: LD_INT 118
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: ST_TO_ADDR
22187: GO 24590
22189: LD_INT 8
22191: DOUBLE
22192: EQUAL
22193: IFTRUE 22197
22195: GO 22337
22197: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22198: LD_ADDR_VAR 0 2
22202: PUSH
22203: LD_INT 2
22205: PUSH
22206: LD_INT 4
22208: PUSH
22209: LD_INT 5
22211: PUSH
22212: LD_INT 6
22214: PUSH
22215: LD_INT 7
22217: PUSH
22218: LD_INT 8
22220: PUSH
22221: LD_INT 11
22223: PUSH
22224: LD_INT 12
22226: PUSH
22227: LD_INT 15
22229: PUSH
22230: LD_INT 16
22232: PUSH
22233: LD_INT 20
22235: PUSH
22236: LD_INT 21
22238: PUSH
22239: LD_INT 22
22241: PUSH
22242: LD_INT 23
22244: PUSH
22245: LD_INT 25
22247: PUSH
22248: LD_INT 26
22250: PUSH
22251: LD_INT 30
22253: PUSH
22254: LD_INT 31
22256: PUSH
22257: LD_INT 32
22259: PUSH
22260: LD_INT 36
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 101
22287: PUSH
22288: LD_INT 102
22290: PUSH
22291: LD_INT 103
22293: PUSH
22294: LD_INT 105
22296: PUSH
22297: LD_INT 106
22299: PUSH
22300: LD_INT 108
22302: PUSH
22303: LD_INT 109
22305: PUSH
22306: LD_INT 112
22308: PUSH
22309: LD_INT 116
22311: PUSH
22312: LD_INT 117
22314: PUSH
22315: LD_INT 118
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: ST_TO_ADDR
22335: GO 24590
22337: LD_INT 9
22339: DOUBLE
22340: EQUAL
22341: IFTRUE 22345
22343: GO 22493
22345: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22346: LD_ADDR_VAR 0 2
22350: PUSH
22351: LD_INT 2
22353: PUSH
22354: LD_INT 4
22356: PUSH
22357: LD_INT 5
22359: PUSH
22360: LD_INT 6
22362: PUSH
22363: LD_INT 7
22365: PUSH
22366: LD_INT 8
22368: PUSH
22369: LD_INT 11
22371: PUSH
22372: LD_INT 12
22374: PUSH
22375: LD_INT 15
22377: PUSH
22378: LD_INT 16
22380: PUSH
22381: LD_INT 20
22383: PUSH
22384: LD_INT 21
22386: PUSH
22387: LD_INT 22
22389: PUSH
22390: LD_INT 23
22392: PUSH
22393: LD_INT 25
22395: PUSH
22396: LD_INT 26
22398: PUSH
22399: LD_INT 28
22401: PUSH
22402: LD_INT 30
22404: PUSH
22405: LD_INT 31
22407: PUSH
22408: LD_INT 32
22410: PUSH
22411: LD_INT 36
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 101
22439: PUSH
22440: LD_INT 102
22442: PUSH
22443: LD_INT 103
22445: PUSH
22446: LD_INT 105
22448: PUSH
22449: LD_INT 106
22451: PUSH
22452: LD_INT 108
22454: PUSH
22455: LD_INT 109
22457: PUSH
22458: LD_INT 112
22460: PUSH
22461: LD_INT 114
22463: PUSH
22464: LD_INT 116
22466: PUSH
22467: LD_INT 117
22469: PUSH
22470: LD_INT 118
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: ST_TO_ADDR
22491: GO 24590
22493: LD_INT 10
22495: DOUBLE
22496: EQUAL
22497: IFTRUE 22501
22499: GO 22697
22501: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22502: LD_ADDR_VAR 0 2
22506: PUSH
22507: LD_INT 2
22509: PUSH
22510: LD_INT 4
22512: PUSH
22513: LD_INT 5
22515: PUSH
22516: LD_INT 6
22518: PUSH
22519: LD_INT 7
22521: PUSH
22522: LD_INT 8
22524: PUSH
22525: LD_INT 9
22527: PUSH
22528: LD_INT 10
22530: PUSH
22531: LD_INT 11
22533: PUSH
22534: LD_INT 12
22536: PUSH
22537: LD_INT 13
22539: PUSH
22540: LD_INT 14
22542: PUSH
22543: LD_INT 15
22545: PUSH
22546: LD_INT 16
22548: PUSH
22549: LD_INT 17
22551: PUSH
22552: LD_INT 18
22554: PUSH
22555: LD_INT 19
22557: PUSH
22558: LD_INT 20
22560: PUSH
22561: LD_INT 21
22563: PUSH
22564: LD_INT 22
22566: PUSH
22567: LD_INT 23
22569: PUSH
22570: LD_INT 24
22572: PUSH
22573: LD_INT 25
22575: PUSH
22576: LD_INT 26
22578: PUSH
22579: LD_INT 28
22581: PUSH
22582: LD_INT 30
22584: PUSH
22585: LD_INT 31
22587: PUSH
22588: LD_INT 32
22590: PUSH
22591: LD_INT 36
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 101
22627: PUSH
22628: LD_INT 102
22630: PUSH
22631: LD_INT 103
22633: PUSH
22634: LD_INT 104
22636: PUSH
22637: LD_INT 105
22639: PUSH
22640: LD_INT 106
22642: PUSH
22643: LD_INT 107
22645: PUSH
22646: LD_INT 108
22648: PUSH
22649: LD_INT 109
22651: PUSH
22652: LD_INT 110
22654: PUSH
22655: LD_INT 111
22657: PUSH
22658: LD_INT 112
22660: PUSH
22661: LD_INT 114
22663: PUSH
22664: LD_INT 116
22666: PUSH
22667: LD_INT 117
22669: PUSH
22670: LD_INT 118
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: ST_TO_ADDR
22695: GO 24590
22697: LD_INT 11
22699: DOUBLE
22700: EQUAL
22701: IFTRUE 22705
22703: GO 22909
22705: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22706: LD_ADDR_VAR 0 2
22710: PUSH
22711: LD_INT 2
22713: PUSH
22714: LD_INT 3
22716: PUSH
22717: LD_INT 4
22719: PUSH
22720: LD_INT 5
22722: PUSH
22723: LD_INT 6
22725: PUSH
22726: LD_INT 7
22728: PUSH
22729: LD_INT 8
22731: PUSH
22732: LD_INT 9
22734: PUSH
22735: LD_INT 10
22737: PUSH
22738: LD_INT 11
22740: PUSH
22741: LD_INT 12
22743: PUSH
22744: LD_INT 13
22746: PUSH
22747: LD_INT 14
22749: PUSH
22750: LD_INT 15
22752: PUSH
22753: LD_INT 16
22755: PUSH
22756: LD_INT 17
22758: PUSH
22759: LD_INT 18
22761: PUSH
22762: LD_INT 19
22764: PUSH
22765: LD_INT 20
22767: PUSH
22768: LD_INT 21
22770: PUSH
22771: LD_INT 22
22773: PUSH
22774: LD_INT 23
22776: PUSH
22777: LD_INT 24
22779: PUSH
22780: LD_INT 25
22782: PUSH
22783: LD_INT 26
22785: PUSH
22786: LD_INT 28
22788: PUSH
22789: LD_INT 30
22791: PUSH
22792: LD_INT 31
22794: PUSH
22795: LD_INT 32
22797: PUSH
22798: LD_INT 34
22800: PUSH
22801: LD_INT 36
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 101
22839: PUSH
22840: LD_INT 102
22842: PUSH
22843: LD_INT 103
22845: PUSH
22846: LD_INT 104
22848: PUSH
22849: LD_INT 105
22851: PUSH
22852: LD_INT 106
22854: PUSH
22855: LD_INT 107
22857: PUSH
22858: LD_INT 108
22860: PUSH
22861: LD_INT 109
22863: PUSH
22864: LD_INT 110
22866: PUSH
22867: LD_INT 111
22869: PUSH
22870: LD_INT 112
22872: PUSH
22873: LD_INT 114
22875: PUSH
22876: LD_INT 116
22878: PUSH
22879: LD_INT 117
22881: PUSH
22882: LD_INT 118
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: ST_TO_ADDR
22907: GO 24590
22909: LD_INT 12
22911: DOUBLE
22912: EQUAL
22913: IFTRUE 22917
22915: GO 23137
22917: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22918: LD_ADDR_VAR 0 2
22922: PUSH
22923: LD_INT 1
22925: PUSH
22926: LD_INT 2
22928: PUSH
22929: LD_INT 3
22931: PUSH
22932: LD_INT 4
22934: PUSH
22935: LD_INT 5
22937: PUSH
22938: LD_INT 6
22940: PUSH
22941: LD_INT 7
22943: PUSH
22944: LD_INT 8
22946: PUSH
22947: LD_INT 9
22949: PUSH
22950: LD_INT 10
22952: PUSH
22953: LD_INT 11
22955: PUSH
22956: LD_INT 12
22958: PUSH
22959: LD_INT 13
22961: PUSH
22962: LD_INT 14
22964: PUSH
22965: LD_INT 15
22967: PUSH
22968: LD_INT 16
22970: PUSH
22971: LD_INT 17
22973: PUSH
22974: LD_INT 18
22976: PUSH
22977: LD_INT 19
22979: PUSH
22980: LD_INT 20
22982: PUSH
22983: LD_INT 21
22985: PUSH
22986: LD_INT 22
22988: PUSH
22989: LD_INT 23
22991: PUSH
22992: LD_INT 24
22994: PUSH
22995: LD_INT 25
22997: PUSH
22998: LD_INT 26
23000: PUSH
23001: LD_INT 27
23003: PUSH
23004: LD_INT 28
23006: PUSH
23007: LD_INT 30
23009: PUSH
23010: LD_INT 31
23012: PUSH
23013: LD_INT 32
23015: PUSH
23016: LD_INT 33
23018: PUSH
23019: LD_INT 34
23021: PUSH
23022: LD_INT 36
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 101
23063: PUSH
23064: LD_INT 102
23066: PUSH
23067: LD_INT 103
23069: PUSH
23070: LD_INT 104
23072: PUSH
23073: LD_INT 105
23075: PUSH
23076: LD_INT 106
23078: PUSH
23079: LD_INT 107
23081: PUSH
23082: LD_INT 108
23084: PUSH
23085: LD_INT 109
23087: PUSH
23088: LD_INT 110
23090: PUSH
23091: LD_INT 111
23093: PUSH
23094: LD_INT 112
23096: PUSH
23097: LD_INT 113
23099: PUSH
23100: LD_INT 114
23102: PUSH
23103: LD_INT 116
23105: PUSH
23106: LD_INT 117
23108: PUSH
23109: LD_INT 118
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: ST_TO_ADDR
23135: GO 24590
23137: LD_INT 13
23139: DOUBLE
23140: EQUAL
23141: IFTRUE 23145
23143: GO 23353
23145: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23146: LD_ADDR_VAR 0 2
23150: PUSH
23151: LD_INT 1
23153: PUSH
23154: LD_INT 2
23156: PUSH
23157: LD_INT 3
23159: PUSH
23160: LD_INT 4
23162: PUSH
23163: LD_INT 5
23165: PUSH
23166: LD_INT 8
23168: PUSH
23169: LD_INT 9
23171: PUSH
23172: LD_INT 10
23174: PUSH
23175: LD_INT 11
23177: PUSH
23178: LD_INT 12
23180: PUSH
23181: LD_INT 14
23183: PUSH
23184: LD_INT 15
23186: PUSH
23187: LD_INT 16
23189: PUSH
23190: LD_INT 17
23192: PUSH
23193: LD_INT 18
23195: PUSH
23196: LD_INT 19
23198: PUSH
23199: LD_INT 20
23201: PUSH
23202: LD_INT 21
23204: PUSH
23205: LD_INT 22
23207: PUSH
23208: LD_INT 23
23210: PUSH
23211: LD_INT 24
23213: PUSH
23214: LD_INT 25
23216: PUSH
23217: LD_INT 26
23219: PUSH
23220: LD_INT 27
23222: PUSH
23223: LD_INT 28
23225: PUSH
23226: LD_INT 30
23228: PUSH
23229: LD_INT 31
23231: PUSH
23232: LD_INT 32
23234: PUSH
23235: LD_INT 33
23237: PUSH
23238: LD_INT 34
23240: PUSH
23241: LD_INT 36
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 101
23279: PUSH
23280: LD_INT 102
23282: PUSH
23283: LD_INT 103
23285: PUSH
23286: LD_INT 104
23288: PUSH
23289: LD_INT 105
23291: PUSH
23292: LD_INT 106
23294: PUSH
23295: LD_INT 107
23297: PUSH
23298: LD_INT 108
23300: PUSH
23301: LD_INT 109
23303: PUSH
23304: LD_INT 110
23306: PUSH
23307: LD_INT 111
23309: PUSH
23310: LD_INT 112
23312: PUSH
23313: LD_INT 113
23315: PUSH
23316: LD_INT 114
23318: PUSH
23319: LD_INT 116
23321: PUSH
23322: LD_INT 117
23324: PUSH
23325: LD_INT 118
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: ST_TO_ADDR
23351: GO 24590
23353: LD_INT 14
23355: DOUBLE
23356: EQUAL
23357: IFTRUE 23361
23359: GO 23585
23361: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23362: LD_ADDR_VAR 0 2
23366: PUSH
23367: LD_INT 1
23369: PUSH
23370: LD_INT 2
23372: PUSH
23373: LD_INT 3
23375: PUSH
23376: LD_INT 4
23378: PUSH
23379: LD_INT 5
23381: PUSH
23382: LD_INT 6
23384: PUSH
23385: LD_INT 7
23387: PUSH
23388: LD_INT 8
23390: PUSH
23391: LD_INT 9
23393: PUSH
23394: LD_INT 10
23396: PUSH
23397: LD_INT 11
23399: PUSH
23400: LD_INT 12
23402: PUSH
23403: LD_INT 13
23405: PUSH
23406: LD_INT 14
23408: PUSH
23409: LD_INT 15
23411: PUSH
23412: LD_INT 16
23414: PUSH
23415: LD_INT 17
23417: PUSH
23418: LD_INT 18
23420: PUSH
23421: LD_INT 19
23423: PUSH
23424: LD_INT 20
23426: PUSH
23427: LD_INT 21
23429: PUSH
23430: LD_INT 22
23432: PUSH
23433: LD_INT 23
23435: PUSH
23436: LD_INT 24
23438: PUSH
23439: LD_INT 25
23441: PUSH
23442: LD_INT 26
23444: PUSH
23445: LD_INT 27
23447: PUSH
23448: LD_INT 28
23450: PUSH
23451: LD_INT 29
23453: PUSH
23454: LD_INT 30
23456: PUSH
23457: LD_INT 31
23459: PUSH
23460: LD_INT 32
23462: PUSH
23463: LD_INT 33
23465: PUSH
23466: LD_INT 34
23468: PUSH
23469: LD_INT 36
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 101
23511: PUSH
23512: LD_INT 102
23514: PUSH
23515: LD_INT 103
23517: PUSH
23518: LD_INT 104
23520: PUSH
23521: LD_INT 105
23523: PUSH
23524: LD_INT 106
23526: PUSH
23527: LD_INT 107
23529: PUSH
23530: LD_INT 108
23532: PUSH
23533: LD_INT 109
23535: PUSH
23536: LD_INT 110
23538: PUSH
23539: LD_INT 111
23541: PUSH
23542: LD_INT 112
23544: PUSH
23545: LD_INT 113
23547: PUSH
23548: LD_INT 114
23550: PUSH
23551: LD_INT 116
23553: PUSH
23554: LD_INT 117
23556: PUSH
23557: LD_INT 118
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: ST_TO_ADDR
23583: GO 24590
23585: LD_INT 15
23587: DOUBLE
23588: EQUAL
23589: IFTRUE 23593
23591: GO 23817
23593: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23594: LD_ADDR_VAR 0 2
23598: PUSH
23599: LD_INT 1
23601: PUSH
23602: LD_INT 2
23604: PUSH
23605: LD_INT 3
23607: PUSH
23608: LD_INT 4
23610: PUSH
23611: LD_INT 5
23613: PUSH
23614: LD_INT 6
23616: PUSH
23617: LD_INT 7
23619: PUSH
23620: LD_INT 8
23622: PUSH
23623: LD_INT 9
23625: PUSH
23626: LD_INT 10
23628: PUSH
23629: LD_INT 11
23631: PUSH
23632: LD_INT 12
23634: PUSH
23635: LD_INT 13
23637: PUSH
23638: LD_INT 14
23640: PUSH
23641: LD_INT 15
23643: PUSH
23644: LD_INT 16
23646: PUSH
23647: LD_INT 17
23649: PUSH
23650: LD_INT 18
23652: PUSH
23653: LD_INT 19
23655: PUSH
23656: LD_INT 20
23658: PUSH
23659: LD_INT 21
23661: PUSH
23662: LD_INT 22
23664: PUSH
23665: LD_INT 23
23667: PUSH
23668: LD_INT 24
23670: PUSH
23671: LD_INT 25
23673: PUSH
23674: LD_INT 26
23676: PUSH
23677: LD_INT 27
23679: PUSH
23680: LD_INT 28
23682: PUSH
23683: LD_INT 29
23685: PUSH
23686: LD_INT 30
23688: PUSH
23689: LD_INT 31
23691: PUSH
23692: LD_INT 32
23694: PUSH
23695: LD_INT 33
23697: PUSH
23698: LD_INT 34
23700: PUSH
23701: LD_INT 36
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 101
23743: PUSH
23744: LD_INT 102
23746: PUSH
23747: LD_INT 103
23749: PUSH
23750: LD_INT 104
23752: PUSH
23753: LD_INT 105
23755: PUSH
23756: LD_INT 106
23758: PUSH
23759: LD_INT 107
23761: PUSH
23762: LD_INT 108
23764: PUSH
23765: LD_INT 109
23767: PUSH
23768: LD_INT 110
23770: PUSH
23771: LD_INT 111
23773: PUSH
23774: LD_INT 112
23776: PUSH
23777: LD_INT 113
23779: PUSH
23780: LD_INT 114
23782: PUSH
23783: LD_INT 116
23785: PUSH
23786: LD_INT 117
23788: PUSH
23789: LD_INT 118
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: ST_TO_ADDR
23815: GO 24590
23817: LD_INT 16
23819: DOUBLE
23820: EQUAL
23821: IFTRUE 23825
23823: GO 23961
23825: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23826: LD_ADDR_VAR 0 2
23830: PUSH
23831: LD_INT 2
23833: PUSH
23834: LD_INT 4
23836: PUSH
23837: LD_INT 5
23839: PUSH
23840: LD_INT 7
23842: PUSH
23843: LD_INT 11
23845: PUSH
23846: LD_INT 12
23848: PUSH
23849: LD_INT 15
23851: PUSH
23852: LD_INT 16
23854: PUSH
23855: LD_INT 20
23857: PUSH
23858: LD_INT 21
23860: PUSH
23861: LD_INT 22
23863: PUSH
23864: LD_INT 23
23866: PUSH
23867: LD_INT 25
23869: PUSH
23870: LD_INT 26
23872: PUSH
23873: LD_INT 30
23875: PUSH
23876: LD_INT 31
23878: PUSH
23879: LD_INT 32
23881: PUSH
23882: LD_INT 33
23884: PUSH
23885: LD_INT 34
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 101
23911: PUSH
23912: LD_INT 102
23914: PUSH
23915: LD_INT 103
23917: PUSH
23918: LD_INT 106
23920: PUSH
23921: LD_INT 108
23923: PUSH
23924: LD_INT 112
23926: PUSH
23927: LD_INT 113
23929: PUSH
23930: LD_INT 114
23932: PUSH
23933: LD_INT 116
23935: PUSH
23936: LD_INT 117
23938: PUSH
23939: LD_INT 118
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: ST_TO_ADDR
23959: GO 24590
23961: LD_INT 17
23963: DOUBLE
23964: EQUAL
23965: IFTRUE 23969
23967: GO 24193
23969: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23970: LD_ADDR_VAR 0 2
23974: PUSH
23975: LD_INT 1
23977: PUSH
23978: LD_INT 2
23980: PUSH
23981: LD_INT 3
23983: PUSH
23984: LD_INT 4
23986: PUSH
23987: LD_INT 5
23989: PUSH
23990: LD_INT 6
23992: PUSH
23993: LD_INT 7
23995: PUSH
23996: LD_INT 8
23998: PUSH
23999: LD_INT 9
24001: PUSH
24002: LD_INT 10
24004: PUSH
24005: LD_INT 11
24007: PUSH
24008: LD_INT 12
24010: PUSH
24011: LD_INT 13
24013: PUSH
24014: LD_INT 14
24016: PUSH
24017: LD_INT 15
24019: PUSH
24020: LD_INT 16
24022: PUSH
24023: LD_INT 17
24025: PUSH
24026: LD_INT 18
24028: PUSH
24029: LD_INT 19
24031: PUSH
24032: LD_INT 20
24034: PUSH
24035: LD_INT 21
24037: PUSH
24038: LD_INT 22
24040: PUSH
24041: LD_INT 23
24043: PUSH
24044: LD_INT 24
24046: PUSH
24047: LD_INT 25
24049: PUSH
24050: LD_INT 26
24052: PUSH
24053: LD_INT 27
24055: PUSH
24056: LD_INT 28
24058: PUSH
24059: LD_INT 29
24061: PUSH
24062: LD_INT 30
24064: PUSH
24065: LD_INT 31
24067: PUSH
24068: LD_INT 32
24070: PUSH
24071: LD_INT 33
24073: PUSH
24074: LD_INT 34
24076: PUSH
24077: LD_INT 36
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 101
24119: PUSH
24120: LD_INT 102
24122: PUSH
24123: LD_INT 103
24125: PUSH
24126: LD_INT 104
24128: PUSH
24129: LD_INT 105
24131: PUSH
24132: LD_INT 106
24134: PUSH
24135: LD_INT 107
24137: PUSH
24138: LD_INT 108
24140: PUSH
24141: LD_INT 109
24143: PUSH
24144: LD_INT 110
24146: PUSH
24147: LD_INT 111
24149: PUSH
24150: LD_INT 112
24152: PUSH
24153: LD_INT 113
24155: PUSH
24156: LD_INT 114
24158: PUSH
24159: LD_INT 116
24161: PUSH
24162: LD_INT 117
24164: PUSH
24165: LD_INT 118
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: ST_TO_ADDR
24191: GO 24590
24193: LD_INT 18
24195: DOUBLE
24196: EQUAL
24197: IFTRUE 24201
24199: GO 24349
24201: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24202: LD_ADDR_VAR 0 2
24206: PUSH
24207: LD_INT 2
24209: PUSH
24210: LD_INT 4
24212: PUSH
24213: LD_INT 5
24215: PUSH
24216: LD_INT 7
24218: PUSH
24219: LD_INT 11
24221: PUSH
24222: LD_INT 12
24224: PUSH
24225: LD_INT 15
24227: PUSH
24228: LD_INT 16
24230: PUSH
24231: LD_INT 20
24233: PUSH
24234: LD_INT 21
24236: PUSH
24237: LD_INT 22
24239: PUSH
24240: LD_INT 23
24242: PUSH
24243: LD_INT 25
24245: PUSH
24246: LD_INT 26
24248: PUSH
24249: LD_INT 30
24251: PUSH
24252: LD_INT 31
24254: PUSH
24255: LD_INT 32
24257: PUSH
24258: LD_INT 33
24260: PUSH
24261: LD_INT 34
24263: PUSH
24264: LD_INT 35
24266: PUSH
24267: LD_INT 36
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 101
24295: PUSH
24296: LD_INT 102
24298: PUSH
24299: LD_INT 103
24301: PUSH
24302: LD_INT 106
24304: PUSH
24305: LD_INT 108
24307: PUSH
24308: LD_INT 112
24310: PUSH
24311: LD_INT 113
24313: PUSH
24314: LD_INT 114
24316: PUSH
24317: LD_INT 115
24319: PUSH
24320: LD_INT 116
24322: PUSH
24323: LD_INT 117
24325: PUSH
24326: LD_INT 118
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: ST_TO_ADDR
24347: GO 24590
24349: LD_INT 19
24351: DOUBLE
24352: EQUAL
24353: IFTRUE 24357
24355: GO 24589
24357: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24358: LD_ADDR_VAR 0 2
24362: PUSH
24363: LD_INT 1
24365: PUSH
24366: LD_INT 2
24368: PUSH
24369: LD_INT 3
24371: PUSH
24372: LD_INT 4
24374: PUSH
24375: LD_INT 5
24377: PUSH
24378: LD_INT 6
24380: PUSH
24381: LD_INT 7
24383: PUSH
24384: LD_INT 8
24386: PUSH
24387: LD_INT 9
24389: PUSH
24390: LD_INT 10
24392: PUSH
24393: LD_INT 11
24395: PUSH
24396: LD_INT 12
24398: PUSH
24399: LD_INT 13
24401: PUSH
24402: LD_INT 14
24404: PUSH
24405: LD_INT 15
24407: PUSH
24408: LD_INT 16
24410: PUSH
24411: LD_INT 17
24413: PUSH
24414: LD_INT 18
24416: PUSH
24417: LD_INT 19
24419: PUSH
24420: LD_INT 20
24422: PUSH
24423: LD_INT 21
24425: PUSH
24426: LD_INT 22
24428: PUSH
24429: LD_INT 23
24431: PUSH
24432: LD_INT 24
24434: PUSH
24435: LD_INT 25
24437: PUSH
24438: LD_INT 26
24440: PUSH
24441: LD_INT 27
24443: PUSH
24444: LD_INT 28
24446: PUSH
24447: LD_INT 29
24449: PUSH
24450: LD_INT 30
24452: PUSH
24453: LD_INT 31
24455: PUSH
24456: LD_INT 32
24458: PUSH
24459: LD_INT 33
24461: PUSH
24462: LD_INT 34
24464: PUSH
24465: LD_INT 35
24467: PUSH
24468: LD_INT 36
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 101
24511: PUSH
24512: LD_INT 102
24514: PUSH
24515: LD_INT 103
24517: PUSH
24518: LD_INT 104
24520: PUSH
24521: LD_INT 105
24523: PUSH
24524: LD_INT 106
24526: PUSH
24527: LD_INT 107
24529: PUSH
24530: LD_INT 108
24532: PUSH
24533: LD_INT 109
24535: PUSH
24536: LD_INT 110
24538: PUSH
24539: LD_INT 111
24541: PUSH
24542: LD_INT 112
24544: PUSH
24545: LD_INT 113
24547: PUSH
24548: LD_INT 114
24550: PUSH
24551: LD_INT 115
24553: PUSH
24554: LD_INT 116
24556: PUSH
24557: LD_INT 117
24559: PUSH
24560: LD_INT 118
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: ST_TO_ADDR
24587: GO 24590
24589: POP
// end else
24590: GO 24821
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24592: LD_ADDR_VAR 0 2
24596: PUSH
24597: LD_INT 1
24599: PUSH
24600: LD_INT 2
24602: PUSH
24603: LD_INT 3
24605: PUSH
24606: LD_INT 4
24608: PUSH
24609: LD_INT 5
24611: PUSH
24612: LD_INT 6
24614: PUSH
24615: LD_INT 7
24617: PUSH
24618: LD_INT 8
24620: PUSH
24621: LD_INT 9
24623: PUSH
24624: LD_INT 10
24626: PUSH
24627: LD_INT 11
24629: PUSH
24630: LD_INT 12
24632: PUSH
24633: LD_INT 13
24635: PUSH
24636: LD_INT 14
24638: PUSH
24639: LD_INT 15
24641: PUSH
24642: LD_INT 16
24644: PUSH
24645: LD_INT 17
24647: PUSH
24648: LD_INT 18
24650: PUSH
24651: LD_INT 19
24653: PUSH
24654: LD_INT 20
24656: PUSH
24657: LD_INT 21
24659: PUSH
24660: LD_INT 22
24662: PUSH
24663: LD_INT 23
24665: PUSH
24666: LD_INT 24
24668: PUSH
24669: LD_INT 25
24671: PUSH
24672: LD_INT 26
24674: PUSH
24675: LD_INT 27
24677: PUSH
24678: LD_INT 28
24680: PUSH
24681: LD_INT 29
24683: PUSH
24684: LD_INT 30
24686: PUSH
24687: LD_INT 31
24689: PUSH
24690: LD_INT 32
24692: PUSH
24693: LD_INT 33
24695: PUSH
24696: LD_INT 34
24698: PUSH
24699: LD_INT 35
24701: PUSH
24702: LD_INT 36
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 101
24745: PUSH
24746: LD_INT 102
24748: PUSH
24749: LD_INT 103
24751: PUSH
24752: LD_INT 104
24754: PUSH
24755: LD_INT 105
24757: PUSH
24758: LD_INT 106
24760: PUSH
24761: LD_INT 107
24763: PUSH
24764: LD_INT 108
24766: PUSH
24767: LD_INT 109
24769: PUSH
24770: LD_INT 110
24772: PUSH
24773: LD_INT 111
24775: PUSH
24776: LD_INT 112
24778: PUSH
24779: LD_INT 113
24781: PUSH
24782: LD_INT 114
24784: PUSH
24785: LD_INT 115
24787: PUSH
24788: LD_INT 116
24790: PUSH
24791: LD_INT 117
24793: PUSH
24794: LD_INT 118
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: ST_TO_ADDR
// if result then
24821: LD_VAR 0 2
24825: IFFALSE 25611
// begin normal :=  ;
24827: LD_ADDR_VAR 0 5
24831: PUSH
24832: LD_STRING 
24834: ST_TO_ADDR
// hardcore :=  ;
24835: LD_ADDR_VAR 0 6
24839: PUSH
24840: LD_STRING 
24842: ST_TO_ADDR
// active :=  ;
24843: LD_ADDR_VAR 0 7
24847: PUSH
24848: LD_STRING 
24850: ST_TO_ADDR
// for i = 1 to normalCounter do
24851: LD_ADDR_VAR 0 8
24855: PUSH
24856: DOUBLE
24857: LD_INT 1
24859: DEC
24860: ST_TO_ADDR
24861: LD_EXP 64
24865: PUSH
24866: FOR_TO
24867: IFFALSE 24968
// begin tmp := 0 ;
24869: LD_ADDR_VAR 0 3
24873: PUSH
24874: LD_STRING 0
24876: ST_TO_ADDR
// if result [ 1 ] then
24877: LD_VAR 0 2
24881: PUSH
24882: LD_INT 1
24884: ARRAY
24885: IFFALSE 24950
// if result [ 1 ] [ 1 ] = i then
24887: LD_VAR 0 2
24891: PUSH
24892: LD_INT 1
24894: ARRAY
24895: PUSH
24896: LD_INT 1
24898: ARRAY
24899: PUSH
24900: LD_VAR 0 8
24904: EQUAL
24905: IFFALSE 24950
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24907: LD_ADDR_VAR 0 2
24911: PUSH
24912: LD_VAR 0 2
24916: PPUSH
24917: LD_INT 1
24919: PPUSH
24920: LD_VAR 0 2
24924: PUSH
24925: LD_INT 1
24927: ARRAY
24928: PPUSH
24929: LD_INT 1
24931: PPUSH
24932: CALL_OW 3
24936: PPUSH
24937: CALL_OW 1
24941: ST_TO_ADDR
// tmp := 1 ;
24942: LD_ADDR_VAR 0 3
24946: PUSH
24947: LD_STRING 1
24949: ST_TO_ADDR
// end ; normal := normal & tmp ;
24950: LD_ADDR_VAR 0 5
24954: PUSH
24955: LD_VAR 0 5
24959: PUSH
24960: LD_VAR 0 3
24964: STR
24965: ST_TO_ADDR
// end ;
24966: GO 24866
24968: POP
24969: POP
// for i = 1 to hardcoreCounter do
24970: LD_ADDR_VAR 0 8
24974: PUSH
24975: DOUBLE
24976: LD_INT 1
24978: DEC
24979: ST_TO_ADDR
24980: LD_EXP 65
24984: PUSH
24985: FOR_TO
24986: IFFALSE 25091
// begin tmp := 0 ;
24988: LD_ADDR_VAR 0 3
24992: PUSH
24993: LD_STRING 0
24995: ST_TO_ADDR
// if result [ 2 ] then
24996: LD_VAR 0 2
25000: PUSH
25001: LD_INT 2
25003: ARRAY
25004: IFFALSE 25073
// if result [ 2 ] [ 1 ] = 100 + i then
25006: LD_VAR 0 2
25010: PUSH
25011: LD_INT 2
25013: ARRAY
25014: PUSH
25015: LD_INT 1
25017: ARRAY
25018: PUSH
25019: LD_INT 100
25021: PUSH
25022: LD_VAR 0 8
25026: PLUS
25027: EQUAL
25028: IFFALSE 25073
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25030: LD_ADDR_VAR 0 2
25034: PUSH
25035: LD_VAR 0 2
25039: PPUSH
25040: LD_INT 2
25042: PPUSH
25043: LD_VAR 0 2
25047: PUSH
25048: LD_INT 2
25050: ARRAY
25051: PPUSH
25052: LD_INT 1
25054: PPUSH
25055: CALL_OW 3
25059: PPUSH
25060: CALL_OW 1
25064: ST_TO_ADDR
// tmp := 1 ;
25065: LD_ADDR_VAR 0 3
25069: PUSH
25070: LD_STRING 1
25072: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25073: LD_ADDR_VAR 0 6
25077: PUSH
25078: LD_VAR 0 6
25082: PUSH
25083: LD_VAR 0 3
25087: STR
25088: ST_TO_ADDR
// end ;
25089: GO 24985
25091: POP
25092: POP
// if isGameLoad then
25093: LD_VAR 0 1
25097: IFFALSE 25572
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25099: LD_ADDR_VAR 0 4
25103: PUSH
25104: LD_EXP 68
25108: PUSH
25109: LD_EXP 67
25113: PUSH
25114: LD_EXP 69
25118: PUSH
25119: LD_EXP 66
25123: PUSH
25124: LD_EXP 70
25128: PUSH
25129: LD_EXP 71
25133: PUSH
25134: LD_EXP 72
25138: PUSH
25139: LD_EXP 73
25143: PUSH
25144: LD_EXP 74
25148: PUSH
25149: LD_EXP 75
25153: PUSH
25154: LD_EXP 76
25158: PUSH
25159: LD_EXP 77
25163: PUSH
25164: LD_EXP 78
25168: PUSH
25169: LD_EXP 79
25173: PUSH
25174: LD_EXP 87
25178: PUSH
25179: LD_EXP 88
25183: PUSH
25184: LD_EXP 89
25188: PUSH
25189: LD_EXP 90
25193: PUSH
25194: LD_EXP 92
25198: PUSH
25199: LD_EXP 93
25203: PUSH
25204: LD_EXP 94
25208: PUSH
25209: LD_EXP 97
25213: PUSH
25214: LD_EXP 99
25218: PUSH
25219: LD_EXP 100
25223: PUSH
25224: LD_EXP 101
25228: PUSH
25229: LD_EXP 103
25233: PUSH
25234: LD_EXP 104
25238: PUSH
25239: LD_EXP 107
25243: PUSH
25244: LD_EXP 108
25248: PUSH
25249: LD_EXP 109
25253: PUSH
25254: LD_EXP 110
25258: PUSH
25259: LD_EXP 111
25263: PUSH
25264: LD_EXP 112
25268: PUSH
25269: LD_EXP 113
25273: PUSH
25274: LD_EXP 114
25278: PUSH
25279: LD_EXP 115
25283: PUSH
25284: LD_EXP 80
25288: PUSH
25289: LD_EXP 81
25293: PUSH
25294: LD_EXP 84
25298: PUSH
25299: LD_EXP 85
25303: PUSH
25304: LD_EXP 86
25308: PUSH
25309: LD_EXP 82
25313: PUSH
25314: LD_EXP 83
25318: PUSH
25319: LD_EXP 91
25323: PUSH
25324: LD_EXP 95
25328: PUSH
25329: LD_EXP 96
25333: PUSH
25334: LD_EXP 98
25338: PUSH
25339: LD_EXP 102
25343: PUSH
25344: LD_EXP 105
25348: PUSH
25349: LD_EXP 106
25353: PUSH
25354: LD_EXP 116
25358: PUSH
25359: LD_EXP 117
25363: PUSH
25364: LD_EXP 118
25368: PUSH
25369: LD_EXP 119
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: ST_TO_ADDR
// tmp :=  ;
25430: LD_ADDR_VAR 0 3
25434: PUSH
25435: LD_STRING 
25437: ST_TO_ADDR
// for i = 1 to normalCounter do
25438: LD_ADDR_VAR 0 8
25442: PUSH
25443: DOUBLE
25444: LD_INT 1
25446: DEC
25447: ST_TO_ADDR
25448: LD_EXP 64
25452: PUSH
25453: FOR_TO
25454: IFFALSE 25490
// begin if flags [ i ] then
25456: LD_VAR 0 4
25460: PUSH
25461: LD_VAR 0 8
25465: ARRAY
25466: IFFALSE 25488
// tmp := tmp & i & ; ;
25468: LD_ADDR_VAR 0 3
25472: PUSH
25473: LD_VAR 0 3
25477: PUSH
25478: LD_VAR 0 8
25482: STR
25483: PUSH
25484: LD_STRING ;
25486: STR
25487: ST_TO_ADDR
// end ;
25488: GO 25453
25490: POP
25491: POP
// for i = 1 to hardcoreCounter do
25492: LD_ADDR_VAR 0 8
25496: PUSH
25497: DOUBLE
25498: LD_INT 1
25500: DEC
25501: ST_TO_ADDR
25502: LD_EXP 65
25506: PUSH
25507: FOR_TO
25508: IFFALSE 25554
// begin if flags [ normalCounter + i ] then
25510: LD_VAR 0 4
25514: PUSH
25515: LD_EXP 64
25519: PUSH
25520: LD_VAR 0 8
25524: PLUS
25525: ARRAY
25526: IFFALSE 25552
// tmp := tmp & ( 100 + i ) & ; ;
25528: LD_ADDR_VAR 0 3
25532: PUSH
25533: LD_VAR 0 3
25537: PUSH
25538: LD_INT 100
25540: PUSH
25541: LD_VAR 0 8
25545: PLUS
25546: STR
25547: PUSH
25548: LD_STRING ;
25550: STR
25551: ST_TO_ADDR
// end ;
25552: GO 25507
25554: POP
25555: POP
// if tmp then
25556: LD_VAR 0 3
25560: IFFALSE 25572
// active := tmp ;
25562: LD_ADDR_VAR 0 7
25566: PUSH
25567: LD_VAR 0 3
25571: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25572: LD_STRING getStreamItemsFromMission("
25574: PUSH
25575: LD_VAR 0 5
25579: STR
25580: PUSH
25581: LD_STRING ","
25583: STR
25584: PUSH
25585: LD_VAR 0 6
25589: STR
25590: PUSH
25591: LD_STRING ","
25593: STR
25594: PUSH
25595: LD_VAR 0 7
25599: STR
25600: PUSH
25601: LD_STRING ")
25603: STR
25604: PPUSH
25605: CALL_OW 559
// end else
25609: GO 25618
// ToLua ( getStreamItemsFromMission("","","") ) ;
25611: LD_STRING getStreamItemsFromMission("","","")
25613: PPUSH
25614: CALL_OW 559
// end ;
25618: LD_VAR 0 2
25622: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25623: LD_EXP 63
25627: IFFALSE 25635
25629: PUSH
25630: LD_EXP 68
25634: AND
25635: IFFALSE 25759
25637: GO 25639
25639: DISABLE
25640: LD_INT 0
25642: PPUSH
25643: PPUSH
// begin enable ;
25644: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25645: LD_ADDR_VAR 0 2
25649: PUSH
25650: LD_INT 22
25652: PUSH
25653: LD_OWVAR 2
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 2
25664: PUSH
25665: LD_INT 34
25667: PUSH
25668: LD_INT 7
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 34
25677: PUSH
25678: LD_INT 45
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 34
25687: PUSH
25688: LD_INT 28
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 34
25697: PUSH
25698: LD_INT 47
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PPUSH
25716: CALL_OW 69
25720: ST_TO_ADDR
// if not tmp then
25721: LD_VAR 0 2
25725: NOT
25726: IFFALSE 25730
// exit ;
25728: GO 25759
// for i in tmp do
25730: LD_ADDR_VAR 0 1
25734: PUSH
25735: LD_VAR 0 2
25739: PUSH
25740: FOR_IN
25741: IFFALSE 25757
// begin SetLives ( i , 0 ) ;
25743: LD_VAR 0 1
25747: PPUSH
25748: LD_INT 0
25750: PPUSH
25751: CALL_OW 234
// end ;
25755: GO 25740
25757: POP
25758: POP
// end ;
25759: PPOPN 2
25761: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25762: LD_EXP 63
25766: IFFALSE 25774
25768: PUSH
25769: LD_EXP 69
25773: AND
25774: IFFALSE 25858
25776: GO 25778
25778: DISABLE
25779: LD_INT 0
25781: PPUSH
25782: PPUSH
// begin enable ;
25783: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25784: LD_ADDR_VAR 0 2
25788: PUSH
25789: LD_INT 22
25791: PUSH
25792: LD_OWVAR 2
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 32
25803: PUSH
25804: LD_INT 3
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PPUSH
25815: CALL_OW 69
25819: ST_TO_ADDR
// if not tmp then
25820: LD_VAR 0 2
25824: NOT
25825: IFFALSE 25829
// exit ;
25827: GO 25858
// for i in tmp do
25829: LD_ADDR_VAR 0 1
25833: PUSH
25834: LD_VAR 0 2
25838: PUSH
25839: FOR_IN
25840: IFFALSE 25856
// begin SetLives ( i , 0 ) ;
25842: LD_VAR 0 1
25846: PPUSH
25847: LD_INT 0
25849: PPUSH
25850: CALL_OW 234
// end ;
25854: GO 25839
25856: POP
25857: POP
// end ;
25858: PPOPN 2
25860: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25861: LD_EXP 63
25865: IFFALSE 25873
25867: PUSH
25868: LD_EXP 66
25872: AND
25873: IFFALSE 25966
25875: GO 25877
25877: DISABLE
25878: LD_INT 0
25880: PPUSH
// begin enable ;
25881: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25882: LD_ADDR_VAR 0 1
25886: PUSH
25887: LD_INT 22
25889: PUSH
25890: LD_OWVAR 2
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 2
25901: PUSH
25902: LD_INT 25
25904: PUSH
25905: LD_INT 5
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 25
25914: PUSH
25915: LD_INT 9
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 25
25924: PUSH
25925: LD_INT 8
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PPUSH
25942: CALL_OW 69
25946: PUSH
25947: FOR_IN
25948: IFFALSE 25964
// begin SetClass ( i , 1 ) ;
25950: LD_VAR 0 1
25954: PPUSH
25955: LD_INT 1
25957: PPUSH
25958: CALL_OW 336
// end ;
25962: GO 25947
25964: POP
25965: POP
// end ;
25966: PPOPN 1
25968: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25969: LD_EXP 63
25973: IFFALSE 25981
25975: PUSH
25976: LD_EXP 67
25980: AND
25981: IFFALSE 25993
25983: PUSH
25984: LD_OWVAR 65
25988: PUSH
25989: LD_INT 7
25991: LESS
25992: AND
25993: IFFALSE 26007
25995: GO 25997
25997: DISABLE
// begin enable ;
25998: ENABLE
// game_speed := 7 ;
25999: LD_ADDR_OWVAR 65
26003: PUSH
26004: LD_INT 7
26006: ST_TO_ADDR
// end ;
26007: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26008: LD_EXP 63
26012: IFFALSE 26020
26014: PUSH
26015: LD_EXP 70
26019: AND
26020: IFFALSE 26222
26022: GO 26024
26024: DISABLE
26025: LD_INT 0
26027: PPUSH
26028: PPUSH
26029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26030: LD_ADDR_VAR 0 3
26034: PUSH
26035: LD_INT 81
26037: PUSH
26038: LD_OWVAR 2
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 21
26049: PUSH
26050: LD_INT 1
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PPUSH
26061: CALL_OW 69
26065: ST_TO_ADDR
// if not tmp then
26066: LD_VAR 0 3
26070: NOT
26071: IFFALSE 26075
// exit ;
26073: GO 26222
// if tmp > 5 then
26075: LD_VAR 0 3
26079: PUSH
26080: LD_INT 5
26082: GREATER
26083: IFFALSE 26095
// k := 5 else
26085: LD_ADDR_VAR 0 2
26089: PUSH
26090: LD_INT 5
26092: ST_TO_ADDR
26093: GO 26105
// k := tmp ;
26095: LD_ADDR_VAR 0 2
26099: PUSH
26100: LD_VAR 0 3
26104: ST_TO_ADDR
// for i := 1 to k do
26105: LD_ADDR_VAR 0 1
26109: PUSH
26110: DOUBLE
26111: LD_INT 1
26113: DEC
26114: ST_TO_ADDR
26115: LD_VAR 0 2
26119: PUSH
26120: FOR_TO
26121: IFFALSE 26220
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26123: LD_VAR 0 3
26127: PUSH
26128: LD_VAR 0 1
26132: ARRAY
26133: PPUSH
26134: LD_VAR 0 1
26138: PUSH
26139: LD_INT 4
26141: MOD
26142: PUSH
26143: LD_INT 1
26145: PLUS
26146: PPUSH
26147: CALL_OW 259
26151: PUSH
26152: LD_INT 10
26154: LESS
26155: IFFALSE 26218
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26157: LD_VAR 0 3
26161: PUSH
26162: LD_VAR 0 1
26166: ARRAY
26167: PPUSH
26168: LD_VAR 0 1
26172: PUSH
26173: LD_INT 4
26175: MOD
26176: PUSH
26177: LD_INT 1
26179: PLUS
26180: PPUSH
26181: LD_VAR 0 3
26185: PUSH
26186: LD_VAR 0 1
26190: ARRAY
26191: PPUSH
26192: LD_VAR 0 1
26196: PUSH
26197: LD_INT 4
26199: MOD
26200: PUSH
26201: LD_INT 1
26203: PLUS
26204: PPUSH
26205: CALL_OW 259
26209: PUSH
26210: LD_INT 1
26212: PLUS
26213: PPUSH
26214: CALL_OW 237
26218: GO 26120
26220: POP
26221: POP
// end ;
26222: PPOPN 3
26224: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26225: LD_EXP 63
26229: IFFALSE 26237
26231: PUSH
26232: LD_EXP 71
26236: AND
26237: IFFALSE 26257
26239: GO 26241
26241: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26242: LD_INT 4
26244: PPUSH
26245: LD_OWVAR 2
26249: PPUSH
26250: LD_INT 0
26252: PPUSH
26253: CALL_OW 324
26257: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26258: LD_EXP 63
26262: IFFALSE 26270
26264: PUSH
26265: LD_EXP 100
26269: AND
26270: IFFALSE 26290
26272: GO 26274
26274: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26275: LD_INT 19
26277: PPUSH
26278: LD_OWVAR 2
26282: PPUSH
26283: LD_INT 0
26285: PPUSH
26286: CALL_OW 324
26290: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26291: LD_EXP 63
26295: IFFALSE 26303
26297: PUSH
26298: LD_EXP 72
26302: AND
26303: IFFALSE 26405
26305: GO 26307
26307: DISABLE
26308: LD_INT 0
26310: PPUSH
26311: PPUSH
// begin enable ;
26312: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26313: LD_ADDR_VAR 0 2
26317: PUSH
26318: LD_INT 22
26320: PUSH
26321: LD_OWVAR 2
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 2
26332: PUSH
26333: LD_INT 34
26335: PUSH
26336: LD_INT 11
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 34
26345: PUSH
26346: LD_INT 30
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: LIST
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PPUSH
26362: CALL_OW 69
26366: ST_TO_ADDR
// if not tmp then
26367: LD_VAR 0 2
26371: NOT
26372: IFFALSE 26376
// exit ;
26374: GO 26405
// for i in tmp do
26376: LD_ADDR_VAR 0 1
26380: PUSH
26381: LD_VAR 0 2
26385: PUSH
26386: FOR_IN
26387: IFFALSE 26403
// begin SetLives ( i , 0 ) ;
26389: LD_VAR 0 1
26393: PPUSH
26394: LD_INT 0
26396: PPUSH
26397: CALL_OW 234
// end ;
26401: GO 26386
26403: POP
26404: POP
// end ;
26405: PPOPN 2
26407: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26408: LD_EXP 63
26412: IFFALSE 26420
26414: PUSH
26415: LD_EXP 73
26419: AND
26420: IFFALSE 26440
26422: GO 26424
26424: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26425: LD_INT 32
26427: PPUSH
26428: LD_OWVAR 2
26432: PPUSH
26433: LD_INT 0
26435: PPUSH
26436: CALL_OW 324
26440: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26441: LD_EXP 63
26445: IFFALSE 26453
26447: PUSH
26448: LD_EXP 74
26452: AND
26453: IFFALSE 26636
26455: GO 26457
26457: DISABLE
26458: LD_INT 0
26460: PPUSH
26461: PPUSH
26462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26463: LD_ADDR_VAR 0 2
26467: PUSH
26468: LD_INT 22
26470: PUSH
26471: LD_OWVAR 2
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 33
26482: PUSH
26483: LD_INT 3
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PPUSH
26494: CALL_OW 69
26498: ST_TO_ADDR
// if not tmp then
26499: LD_VAR 0 2
26503: NOT
26504: IFFALSE 26508
// exit ;
26506: GO 26636
// side := 0 ;
26508: LD_ADDR_VAR 0 3
26512: PUSH
26513: LD_INT 0
26515: ST_TO_ADDR
// for i := 1 to 8 do
26516: LD_ADDR_VAR 0 1
26520: PUSH
26521: DOUBLE
26522: LD_INT 1
26524: DEC
26525: ST_TO_ADDR
26526: LD_INT 8
26528: PUSH
26529: FOR_TO
26530: IFFALSE 26580
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26532: LD_OWVAR 2
26536: PUSH
26537: LD_VAR 0 1
26541: NONEQUAL
26542: IFFALSE 26564
26544: PUSH
26545: LD_OWVAR 2
26549: PPUSH
26550: LD_VAR 0 1
26554: PPUSH
26555: CALL_OW 81
26559: PUSH
26560: LD_INT 2
26562: EQUAL
26563: AND
26564: IFFALSE 26578
// begin side := i ;
26566: LD_ADDR_VAR 0 3
26570: PUSH
26571: LD_VAR 0 1
26575: ST_TO_ADDR
// break ;
26576: GO 26580
// end ;
26578: GO 26529
26580: POP
26581: POP
// if not side then
26582: LD_VAR 0 3
26586: NOT
26587: IFFALSE 26591
// exit ;
26589: GO 26636
// for i := 1 to tmp do
26591: LD_ADDR_VAR 0 1
26595: PUSH
26596: DOUBLE
26597: LD_INT 1
26599: DEC
26600: ST_TO_ADDR
26601: LD_VAR 0 2
26605: PUSH
26606: FOR_TO
26607: IFFALSE 26634
// if Prob ( 60 ) then
26609: LD_INT 60
26611: PPUSH
26612: CALL_OW 13
26616: IFFALSE 26632
// SetSide ( i , side ) ;
26618: LD_VAR 0 1
26622: PPUSH
26623: LD_VAR 0 3
26627: PPUSH
26628: CALL_OW 235
26632: GO 26606
26634: POP
26635: POP
// end ;
26636: PPOPN 3
26638: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26639: LD_EXP 63
26643: IFFALSE 26651
26645: PUSH
26646: LD_EXP 76
26650: AND
26651: IFFALSE 26770
26653: GO 26655
26655: DISABLE
26656: LD_INT 0
26658: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26659: LD_ADDR_VAR 0 1
26663: PUSH
26664: LD_INT 22
26666: PUSH
26667: LD_OWVAR 2
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 21
26678: PUSH
26679: LD_INT 1
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 3
26688: PUSH
26689: LD_INT 23
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: LIST
26707: PPUSH
26708: CALL_OW 69
26712: PUSH
26713: FOR_IN
26714: IFFALSE 26768
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26716: LD_VAR 0 1
26720: PPUSH
26721: CALL_OW 257
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: LD_INT 2
26731: PUSH
26732: LD_INT 3
26734: PUSH
26735: LD_INT 4
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: IN
26744: IFFALSE 26766
// SetClass ( un , rand ( 1 , 4 ) ) ;
26746: LD_VAR 0 1
26750: PPUSH
26751: LD_INT 1
26753: PPUSH
26754: LD_INT 4
26756: PPUSH
26757: CALL_OW 12
26761: PPUSH
26762: CALL_OW 336
26766: GO 26713
26768: POP
26769: POP
// end ;
26770: PPOPN 1
26772: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26773: LD_EXP 63
26777: IFFALSE 26785
26779: PUSH
26780: LD_EXP 75
26784: AND
26785: IFFALSE 26864
26787: GO 26789
26789: DISABLE
26790: LD_INT 0
26792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26793: LD_ADDR_VAR 0 1
26797: PUSH
26798: LD_INT 22
26800: PUSH
26801: LD_OWVAR 2
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 21
26812: PUSH
26813: LD_INT 3
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PPUSH
26824: CALL_OW 69
26828: ST_TO_ADDR
// if not tmp then
26829: LD_VAR 0 1
26833: NOT
26834: IFFALSE 26838
// exit ;
26836: GO 26864
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26838: LD_VAR 0 1
26842: PUSH
26843: LD_INT 1
26845: PPUSH
26846: LD_VAR 0 1
26850: PPUSH
26851: CALL_OW 12
26855: ARRAY
26856: PPUSH
26857: LD_INT 100
26859: PPUSH
26860: CALL_OW 234
// end ;
26864: PPOPN 1
26866: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26867: LD_EXP 63
26871: IFFALSE 26879
26873: PUSH
26874: LD_EXP 77
26878: AND
26879: IFFALSE 26977
26881: GO 26883
26883: DISABLE
26884: LD_INT 0
26886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26887: LD_ADDR_VAR 0 1
26891: PUSH
26892: LD_INT 22
26894: PUSH
26895: LD_OWVAR 2
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 21
26906: PUSH
26907: LD_INT 1
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PPUSH
26918: CALL_OW 69
26922: ST_TO_ADDR
// if not tmp then
26923: LD_VAR 0 1
26927: NOT
26928: IFFALSE 26932
// exit ;
26930: GO 26977
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26932: LD_VAR 0 1
26936: PUSH
26937: LD_INT 1
26939: PPUSH
26940: LD_VAR 0 1
26944: PPUSH
26945: CALL_OW 12
26949: ARRAY
26950: PPUSH
26951: LD_INT 1
26953: PPUSH
26954: LD_INT 4
26956: PPUSH
26957: CALL_OW 12
26961: PPUSH
26962: LD_INT 3000
26964: PPUSH
26965: LD_INT 9000
26967: PPUSH
26968: CALL_OW 12
26972: PPUSH
26973: CALL_OW 492
// end ;
26977: PPOPN 1
26979: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26980: LD_EXP 63
26984: IFFALSE 26992
26986: PUSH
26987: LD_EXP 78
26991: AND
26992: IFFALSE 27012
26994: GO 26996
26996: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26997: LD_INT 1
26999: PPUSH
27000: LD_OWVAR 2
27004: PPUSH
27005: LD_INT 0
27007: PPUSH
27008: CALL_OW 324
27012: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27013: LD_EXP 63
27017: IFFALSE 27025
27019: PUSH
27020: LD_EXP 79
27024: AND
27025: IFFALSE 27108
27027: GO 27029
27029: DISABLE
27030: LD_INT 0
27032: PPUSH
27033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27034: LD_ADDR_VAR 0 2
27038: PUSH
27039: LD_INT 22
27041: PUSH
27042: LD_OWVAR 2
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 21
27053: PUSH
27054: LD_INT 3
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PPUSH
27065: CALL_OW 69
27069: ST_TO_ADDR
// if not tmp then
27070: LD_VAR 0 2
27074: NOT
27075: IFFALSE 27079
// exit ;
27077: GO 27108
// for i in tmp do
27079: LD_ADDR_VAR 0 1
27083: PUSH
27084: LD_VAR 0 2
27088: PUSH
27089: FOR_IN
27090: IFFALSE 27106
// SetBLevel ( i , 10 ) ;
27092: LD_VAR 0 1
27096: PPUSH
27097: LD_INT 10
27099: PPUSH
27100: CALL_OW 241
27104: GO 27089
27106: POP
27107: POP
// end ;
27108: PPOPN 2
27110: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27111: LD_EXP 63
27115: IFFALSE 27123
27117: PUSH
27118: LD_EXP 80
27122: AND
27123: IFFALSE 27234
27125: GO 27127
27127: DISABLE
27128: LD_INT 0
27130: PPUSH
27131: PPUSH
27132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27133: LD_ADDR_VAR 0 3
27137: PUSH
27138: LD_INT 22
27140: PUSH
27141: LD_OWVAR 2
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 25
27152: PUSH
27153: LD_INT 1
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PPUSH
27164: CALL_OW 69
27168: ST_TO_ADDR
// if not tmp then
27169: LD_VAR 0 3
27173: NOT
27174: IFFALSE 27178
// exit ;
27176: GO 27234
// un := tmp [ rand ( 1 , tmp ) ] ;
27178: LD_ADDR_VAR 0 2
27182: PUSH
27183: LD_VAR 0 3
27187: PUSH
27188: LD_INT 1
27190: PPUSH
27191: LD_VAR 0 3
27195: PPUSH
27196: CALL_OW 12
27200: ARRAY
27201: ST_TO_ADDR
// if Crawls ( un ) then
27202: LD_VAR 0 2
27206: PPUSH
27207: CALL_OW 318
27211: IFFALSE 27222
// ComWalk ( un ) ;
27213: LD_VAR 0 2
27217: PPUSH
27218: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27222: LD_VAR 0 2
27226: PPUSH
27227: LD_INT 5
27229: PPUSH
27230: CALL_OW 336
// end ;
27234: PPOPN 3
27236: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27237: LD_EXP 63
27241: IFFALSE 27249
27243: PUSH
27244: LD_EXP 81
27248: AND
27249: IFFALSE 27261
27251: PUSH
27252: LD_OWVAR 67
27256: PUSH
27257: LD_INT 4
27259: LESS
27260: AND
27261: IFFALSE 27280
27263: GO 27265
27265: DISABLE
// begin Difficulty := Difficulty + 1 ;
27266: LD_ADDR_OWVAR 67
27270: PUSH
27271: LD_OWVAR 67
27275: PUSH
27276: LD_INT 1
27278: PLUS
27279: ST_TO_ADDR
// end ;
27280: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27281: LD_EXP 63
27285: IFFALSE 27293
27287: PUSH
27288: LD_EXP 82
27292: AND
27293: IFFALSE 27396
27295: GO 27297
27297: DISABLE
27298: LD_INT 0
27300: PPUSH
// begin for i := 1 to 5 do
27301: LD_ADDR_VAR 0 1
27305: PUSH
27306: DOUBLE
27307: LD_INT 1
27309: DEC
27310: ST_TO_ADDR
27311: LD_INT 5
27313: PUSH
27314: FOR_TO
27315: IFFALSE 27394
// begin uc_nation := nation_nature ;
27317: LD_ADDR_OWVAR 21
27321: PUSH
27322: LD_INT 0
27324: ST_TO_ADDR
// uc_side := 0 ;
27325: LD_ADDR_OWVAR 20
27329: PUSH
27330: LD_INT 0
27332: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27333: LD_ADDR_OWVAR 29
27337: PUSH
27338: LD_INT 12
27340: PUSH
27341: LD_INT 12
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: ST_TO_ADDR
// hc_agressivity := 20 ;
27348: LD_ADDR_OWVAR 35
27352: PUSH
27353: LD_INT 20
27355: ST_TO_ADDR
// hc_class := class_tiger ;
27356: LD_ADDR_OWVAR 28
27360: PUSH
27361: LD_INT 14
27363: ST_TO_ADDR
// hc_gallery :=  ;
27364: LD_ADDR_OWVAR 33
27368: PUSH
27369: LD_STRING 
27371: ST_TO_ADDR
// hc_name :=  ;
27372: LD_ADDR_OWVAR 26
27376: PUSH
27377: LD_STRING 
27379: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27380: CALL_OW 44
27384: PPUSH
27385: LD_INT 0
27387: PPUSH
27388: CALL_OW 51
// end ;
27392: GO 27314
27394: POP
27395: POP
// end ;
27396: PPOPN 1
27398: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27399: LD_EXP 63
27403: IFFALSE 27411
27405: PUSH
27406: LD_EXP 83
27410: AND
27411: IFFALSE 27420
27413: GO 27415
27415: DISABLE
// StreamSibBomb ;
27416: CALL 27421 0 0
27420: END
// export function StreamSibBomb ; var i , x , y ; begin
27421: LD_INT 0
27423: PPUSH
27424: PPUSH
27425: PPUSH
27426: PPUSH
// result := false ;
27427: LD_ADDR_VAR 0 1
27431: PUSH
27432: LD_INT 0
27434: ST_TO_ADDR
// for i := 1 to 16 do
27435: LD_ADDR_VAR 0 2
27439: PUSH
27440: DOUBLE
27441: LD_INT 1
27443: DEC
27444: ST_TO_ADDR
27445: LD_INT 16
27447: PUSH
27448: FOR_TO
27449: IFFALSE 27648
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27451: LD_ADDR_VAR 0 3
27455: PUSH
27456: LD_INT 10
27458: PUSH
27459: LD_INT 20
27461: PUSH
27462: LD_INT 30
27464: PUSH
27465: LD_INT 40
27467: PUSH
27468: LD_INT 50
27470: PUSH
27471: LD_INT 60
27473: PUSH
27474: LD_INT 70
27476: PUSH
27477: LD_INT 80
27479: PUSH
27480: LD_INT 90
27482: PUSH
27483: LD_INT 100
27485: PUSH
27486: LD_INT 110
27488: PUSH
27489: LD_INT 120
27491: PUSH
27492: LD_INT 130
27494: PUSH
27495: LD_INT 140
27497: PUSH
27498: LD_INT 150
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 1
27520: PPUSH
27521: LD_INT 15
27523: PPUSH
27524: CALL_OW 12
27528: ARRAY
27529: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27530: LD_ADDR_VAR 0 4
27534: PUSH
27535: LD_INT 10
27537: PUSH
27538: LD_INT 20
27540: PUSH
27541: LD_INT 30
27543: PUSH
27544: LD_INT 40
27546: PUSH
27547: LD_INT 50
27549: PUSH
27550: LD_INT 60
27552: PUSH
27553: LD_INT 70
27555: PUSH
27556: LD_INT 80
27558: PUSH
27559: LD_INT 90
27561: PUSH
27562: LD_INT 100
27564: PUSH
27565: LD_INT 110
27567: PUSH
27568: LD_INT 120
27570: PUSH
27571: LD_INT 130
27573: PUSH
27574: LD_INT 140
27576: PUSH
27577: LD_INT 150
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 1
27599: PPUSH
27600: LD_INT 15
27602: PPUSH
27603: CALL_OW 12
27607: ARRAY
27608: ST_TO_ADDR
// if ValidHex ( x , y ) then
27609: LD_VAR 0 3
27613: PPUSH
27614: LD_VAR 0 4
27618: PPUSH
27619: CALL_OW 488
27623: IFFALSE 27646
// begin result := [ x , y ] ;
27625: LD_ADDR_VAR 0 1
27629: PUSH
27630: LD_VAR 0 3
27634: PUSH
27635: LD_VAR 0 4
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: ST_TO_ADDR
// break ;
27644: GO 27648
// end ; end ;
27646: GO 27448
27648: POP
27649: POP
// if result then
27650: LD_VAR 0 1
27654: IFFALSE 27714
// begin ToLua ( playSibBomb() ) ;
27656: LD_STRING playSibBomb()
27658: PPUSH
27659: CALL_OW 559
// wait ( 0 0$14 ) ;
27663: LD_INT 490
27665: PPUSH
27666: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27670: LD_VAR 0 1
27674: PUSH
27675: LD_INT 1
27677: ARRAY
27678: PPUSH
27679: LD_VAR 0 1
27683: PUSH
27684: LD_INT 2
27686: ARRAY
27687: PPUSH
27688: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27692: LD_VAR 0 1
27696: PUSH
27697: LD_INT 1
27699: ARRAY
27700: PPUSH
27701: LD_VAR 0 1
27705: PUSH
27706: LD_INT 2
27708: ARRAY
27709: PPUSH
27710: CALL_OW 429
// end ; end ;
27714: LD_VAR 0 1
27718: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27719: LD_EXP 63
27723: IFFALSE 27731
27725: PUSH
27726: LD_EXP 85
27730: AND
27731: IFFALSE 27743
27733: GO 27735
27735: DISABLE
// YouLost (  ) ;
27736: LD_STRING 
27738: PPUSH
27739: CALL_OW 104
27743: END
// every 0 0$1 trigger StreamModeActive and sFog do
27744: LD_EXP 63
27748: IFFALSE 27756
27750: PUSH
27751: LD_EXP 84
27755: AND
27756: IFFALSE 27770
27758: GO 27760
27760: DISABLE
// FogOff ( your_side ) ;
27761: LD_OWVAR 2
27765: PPUSH
27766: CALL_OW 344
27770: END
// every 0 0$1 trigger StreamModeActive and sSun do
27771: LD_EXP 63
27775: IFFALSE 27783
27777: PUSH
27778: LD_EXP 86
27782: AND
27783: IFFALSE 27811
27785: GO 27787
27787: DISABLE
// begin solar_recharge_percent := 0 ;
27788: LD_ADDR_OWVAR 79
27792: PUSH
27793: LD_INT 0
27795: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27796: LD_INT 10500
27798: PPUSH
27799: CALL_OW 67
// solar_recharge_percent := 100 ;
27803: LD_ADDR_OWVAR 79
27807: PUSH
27808: LD_INT 100
27810: ST_TO_ADDR
// end ;
27811: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27812: LD_EXP 63
27816: IFFALSE 27824
27818: PUSH
27819: LD_EXP 87
27823: AND
27824: IFFALSE 28063
27826: GO 27828
27828: DISABLE
27829: LD_INT 0
27831: PPUSH
27832: PPUSH
27833: PPUSH
// begin tmp := [ ] ;
27834: LD_ADDR_VAR 0 3
27838: PUSH
27839: EMPTY
27840: ST_TO_ADDR
// for i := 1 to 6 do
27841: LD_ADDR_VAR 0 1
27845: PUSH
27846: DOUBLE
27847: LD_INT 1
27849: DEC
27850: ST_TO_ADDR
27851: LD_INT 6
27853: PUSH
27854: FOR_TO
27855: IFFALSE 27960
// begin uc_nation := nation_nature ;
27857: LD_ADDR_OWVAR 21
27861: PUSH
27862: LD_INT 0
27864: ST_TO_ADDR
// uc_side := 0 ;
27865: LD_ADDR_OWVAR 20
27869: PUSH
27870: LD_INT 0
27872: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27873: LD_ADDR_OWVAR 29
27877: PUSH
27878: LD_INT 12
27880: PUSH
27881: LD_INT 12
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: ST_TO_ADDR
// hc_agressivity := 20 ;
27888: LD_ADDR_OWVAR 35
27892: PUSH
27893: LD_INT 20
27895: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27896: LD_ADDR_OWVAR 28
27900: PUSH
27901: LD_INT 17
27903: ST_TO_ADDR
// hc_gallery :=  ;
27904: LD_ADDR_OWVAR 33
27908: PUSH
27909: LD_STRING 
27911: ST_TO_ADDR
// hc_name :=  ;
27912: LD_ADDR_OWVAR 26
27916: PUSH
27917: LD_STRING 
27919: ST_TO_ADDR
// un := CreateHuman ;
27920: LD_ADDR_VAR 0 2
27924: PUSH
27925: CALL_OW 44
27929: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27930: LD_VAR 0 2
27934: PPUSH
27935: LD_INT 1
27937: PPUSH
27938: CALL_OW 51
// tmp := tmp ^ un ;
27942: LD_ADDR_VAR 0 3
27946: PUSH
27947: LD_VAR 0 3
27951: PUSH
27952: LD_VAR 0 2
27956: ADD
27957: ST_TO_ADDR
// end ;
27958: GO 27854
27960: POP
27961: POP
// repeat wait ( 0 0$1 ) ;
27962: LD_INT 35
27964: PPUSH
27965: CALL_OW 67
// for un in tmp do
27969: LD_ADDR_VAR 0 2
27973: PUSH
27974: LD_VAR 0 3
27978: PUSH
27979: FOR_IN
27980: IFFALSE 28054
// begin if IsDead ( un ) then
27982: LD_VAR 0 2
27986: PPUSH
27987: CALL_OW 301
27991: IFFALSE 28011
// begin tmp := tmp diff un ;
27993: LD_ADDR_VAR 0 3
27997: PUSH
27998: LD_VAR 0 3
28002: PUSH
28003: LD_VAR 0 2
28007: DIFF
28008: ST_TO_ADDR
// continue ;
28009: GO 27979
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28011: LD_VAR 0 2
28015: PPUSH
28016: LD_INT 3
28018: PUSH
28019: LD_INT 22
28021: PUSH
28022: LD_INT 0
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PPUSH
28033: CALL_OW 69
28037: PPUSH
28038: LD_VAR 0 2
28042: PPUSH
28043: CALL_OW 74
28047: PPUSH
28048: CALL_OW 115
// end ;
28052: GO 27979
28054: POP
28055: POP
// until not tmp ;
28056: LD_VAR 0 3
28060: NOT
28061: IFFALSE 27962
// end ;
28063: PPOPN 3
28065: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28066: LD_EXP 63
28070: IFFALSE 28078
28072: PUSH
28073: LD_EXP 88
28077: AND
28078: IFFALSE 28132
28080: GO 28082
28082: DISABLE
// begin ToLua ( displayTroll(); ) ;
28083: LD_STRING displayTroll();
28085: PPUSH
28086: CALL_OW 559
// wait ( 3 3$00 ) ;
28090: LD_INT 6300
28092: PPUSH
28093: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28097: LD_STRING hideTroll();
28099: PPUSH
28100: CALL_OW 559
// wait ( 1 1$00 ) ;
28104: LD_INT 2100
28106: PPUSH
28107: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28111: LD_STRING displayTroll();
28113: PPUSH
28114: CALL_OW 559
// wait ( 1 1$00 ) ;
28118: LD_INT 2100
28120: PPUSH
28121: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28125: LD_STRING hideTroll();
28127: PPUSH
28128: CALL_OW 559
// end ;
28132: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28133: LD_EXP 63
28137: IFFALSE 28145
28139: PUSH
28140: LD_EXP 89
28144: AND
28145: IFFALSE 28208
28147: GO 28149
28149: DISABLE
28150: LD_INT 0
28152: PPUSH
// begin p := 0 ;
28153: LD_ADDR_VAR 0 1
28157: PUSH
28158: LD_INT 0
28160: ST_TO_ADDR
// repeat game_speed := 1 ;
28161: LD_ADDR_OWVAR 65
28165: PUSH
28166: LD_INT 1
28168: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28169: LD_INT 35
28171: PPUSH
28172: CALL_OW 67
// p := p + 1 ;
28176: LD_ADDR_VAR 0 1
28180: PUSH
28181: LD_VAR 0 1
28185: PUSH
28186: LD_INT 1
28188: PLUS
28189: ST_TO_ADDR
// until p >= 60 ;
28190: LD_VAR 0 1
28194: PUSH
28195: LD_INT 60
28197: GREATEREQUAL
28198: IFFALSE 28161
// game_speed := 4 ;
28200: LD_ADDR_OWVAR 65
28204: PUSH
28205: LD_INT 4
28207: ST_TO_ADDR
// end ;
28208: PPOPN 1
28210: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28211: LD_EXP 63
28215: IFFALSE 28223
28217: PUSH
28218: LD_EXP 90
28222: AND
28223: IFFALSE 28369
28225: GO 28227
28227: DISABLE
28228: LD_INT 0
28230: PPUSH
28231: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28232: LD_ADDR_VAR 0 1
28236: PUSH
28237: LD_INT 22
28239: PUSH
28240: LD_OWVAR 2
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 2
28251: PUSH
28252: LD_INT 30
28254: PUSH
28255: LD_INT 0
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 30
28264: PUSH
28265: LD_INT 1
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: LIST
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PPUSH
28281: CALL_OW 69
28285: ST_TO_ADDR
// if not depot then
28286: LD_VAR 0 1
28290: NOT
28291: IFFALSE 28295
// exit ;
28293: GO 28369
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28295: LD_ADDR_VAR 0 2
28299: PUSH
28300: LD_VAR 0 1
28304: PUSH
28305: LD_INT 1
28307: PPUSH
28308: LD_VAR 0 1
28312: PPUSH
28313: CALL_OW 12
28317: ARRAY
28318: PPUSH
28319: CALL_OW 274
28323: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28324: LD_VAR 0 2
28328: PPUSH
28329: LD_INT 1
28331: PPUSH
28332: LD_INT 0
28334: PPUSH
28335: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28339: LD_VAR 0 2
28343: PPUSH
28344: LD_INT 2
28346: PPUSH
28347: LD_INT 0
28349: PPUSH
28350: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28354: LD_VAR 0 2
28358: PPUSH
28359: LD_INT 3
28361: PPUSH
28362: LD_INT 0
28364: PPUSH
28365: CALL_OW 277
// end ;
28369: PPOPN 2
28371: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28372: LD_EXP 63
28376: IFFALSE 28384
28378: PUSH
28379: LD_EXP 91
28383: AND
28384: IFFALSE 28481
28386: GO 28388
28388: DISABLE
28389: LD_INT 0
28391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28392: LD_ADDR_VAR 0 1
28396: PUSH
28397: LD_INT 22
28399: PUSH
28400: LD_OWVAR 2
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 21
28411: PUSH
28412: LD_INT 1
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 3
28421: PUSH
28422: LD_INT 23
28424: PUSH
28425: LD_INT 0
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: LIST
28440: PPUSH
28441: CALL_OW 69
28445: ST_TO_ADDR
// if not tmp then
28446: LD_VAR 0 1
28450: NOT
28451: IFFALSE 28455
// exit ;
28453: GO 28481
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28455: LD_VAR 0 1
28459: PUSH
28460: LD_INT 1
28462: PPUSH
28463: LD_VAR 0 1
28467: PPUSH
28468: CALL_OW 12
28472: ARRAY
28473: PPUSH
28474: LD_INT 200
28476: PPUSH
28477: CALL_OW 234
// end ;
28481: PPOPN 1
28483: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28484: LD_EXP 63
28488: IFFALSE 28496
28490: PUSH
28491: LD_EXP 92
28495: AND
28496: IFFALSE 28575
28498: GO 28500
28500: DISABLE
28501: LD_INT 0
28503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28504: LD_ADDR_VAR 0 1
28508: PUSH
28509: LD_INT 22
28511: PUSH
28512: LD_OWVAR 2
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 21
28523: PUSH
28524: LD_INT 2
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PPUSH
28535: CALL_OW 69
28539: ST_TO_ADDR
// if not tmp then
28540: LD_VAR 0 1
28544: NOT
28545: IFFALSE 28549
// exit ;
28547: GO 28575
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28549: LD_VAR 0 1
28553: PUSH
28554: LD_INT 1
28556: PPUSH
28557: LD_VAR 0 1
28561: PPUSH
28562: CALL_OW 12
28566: ARRAY
28567: PPUSH
28568: LD_INT 60
28570: PPUSH
28571: CALL_OW 234
// end ;
28575: PPOPN 1
28577: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28578: LD_EXP 63
28582: IFFALSE 28590
28584: PUSH
28585: LD_EXP 93
28589: AND
28590: IFFALSE 28689
28592: GO 28594
28594: DISABLE
28595: LD_INT 0
28597: PPUSH
28598: PPUSH
// begin enable ;
28599: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28600: LD_ADDR_VAR 0 1
28604: PUSH
28605: LD_INT 22
28607: PUSH
28608: LD_OWVAR 2
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 61
28619: PUSH
28620: EMPTY
28621: LIST
28622: PUSH
28623: LD_INT 33
28625: PUSH
28626: LD_INT 2
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: LIST
28637: PPUSH
28638: CALL_OW 69
28642: ST_TO_ADDR
// if not tmp then
28643: LD_VAR 0 1
28647: NOT
28648: IFFALSE 28652
// exit ;
28650: GO 28689
// for i in tmp do
28652: LD_ADDR_VAR 0 2
28656: PUSH
28657: LD_VAR 0 1
28661: PUSH
28662: FOR_IN
28663: IFFALSE 28687
// if IsControledBy ( i ) then
28665: LD_VAR 0 2
28669: PPUSH
28670: CALL_OW 312
28674: IFFALSE 28685
// ComUnlink ( i ) ;
28676: LD_VAR 0 2
28680: PPUSH
28681: CALL_OW 136
28685: GO 28662
28687: POP
28688: POP
// end ;
28689: PPOPN 2
28691: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28692: LD_EXP 63
28696: IFFALSE 28704
28698: PUSH
28699: LD_EXP 94
28703: AND
28704: IFFALSE 28844
28706: GO 28708
28708: DISABLE
28709: LD_INT 0
28711: PPUSH
28712: PPUSH
// begin ToLua ( displayPowell(); ) ;
28713: LD_STRING displayPowell();
28715: PPUSH
28716: CALL_OW 559
// uc_side := 0 ;
28720: LD_ADDR_OWVAR 20
28724: PUSH
28725: LD_INT 0
28727: ST_TO_ADDR
// uc_nation := 2 ;
28728: LD_ADDR_OWVAR 21
28732: PUSH
28733: LD_INT 2
28735: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28736: LD_ADDR_OWVAR 37
28740: PUSH
28741: LD_INT 14
28743: ST_TO_ADDR
// vc_engine := engine_siberite ;
28744: LD_ADDR_OWVAR 39
28748: PUSH
28749: LD_INT 3
28751: ST_TO_ADDR
// vc_control := control_apeman ;
28752: LD_ADDR_OWVAR 38
28756: PUSH
28757: LD_INT 5
28759: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28760: LD_ADDR_OWVAR 40
28764: PUSH
28765: LD_INT 29
28767: ST_TO_ADDR
// un := CreateVehicle ;
28768: LD_ADDR_VAR 0 2
28772: PUSH
28773: CALL_OW 45
28777: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28778: LD_VAR 0 2
28782: PPUSH
28783: LD_INT 1
28785: PPUSH
28786: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28790: LD_INT 35
28792: PPUSH
28793: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28797: LD_VAR 0 2
28801: PPUSH
28802: LD_INT 22
28804: PUSH
28805: LD_OWVAR 2
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PPUSH
28814: CALL_OW 69
28818: PPUSH
28819: LD_VAR 0 2
28823: PPUSH
28824: CALL_OW 74
28828: PPUSH
28829: CALL_OW 115
// until IsDead ( un ) ;
28833: LD_VAR 0 2
28837: PPUSH
28838: CALL_OW 301
28842: IFFALSE 28790
// end ;
28844: PPOPN 2
28846: END
// every 0 0$1 trigger StreamModeActive and sStu do
28847: LD_EXP 63
28851: IFFALSE 28859
28853: PUSH
28854: LD_EXP 102
28858: AND
28859: IFFALSE 28875
28861: GO 28863
28863: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28864: LD_STRING displayStucuk();
28866: PPUSH
28867: CALL_OW 559
// ResetFog ;
28871: CALL_OW 335
// end ;
28875: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28876: LD_EXP 63
28880: IFFALSE 28888
28882: PUSH
28883: LD_EXP 95
28887: AND
28888: IFFALSE 29029
28890: GO 28892
28892: DISABLE
28893: LD_INT 0
28895: PPUSH
28896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28897: LD_ADDR_VAR 0 2
28901: PUSH
28902: LD_INT 22
28904: PUSH
28905: LD_OWVAR 2
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 21
28916: PUSH
28917: LD_INT 1
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PPUSH
28928: CALL_OW 69
28932: ST_TO_ADDR
// if not tmp then
28933: LD_VAR 0 2
28937: NOT
28938: IFFALSE 28942
// exit ;
28940: GO 29029
// un := tmp [ rand ( 1 , tmp ) ] ;
28942: LD_ADDR_VAR 0 1
28946: PUSH
28947: LD_VAR 0 2
28951: PUSH
28952: LD_INT 1
28954: PPUSH
28955: LD_VAR 0 2
28959: PPUSH
28960: CALL_OW 12
28964: ARRAY
28965: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28966: LD_VAR 0 1
28970: PPUSH
28971: LD_INT 0
28973: PPUSH
28974: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28978: LD_VAR 0 1
28982: PPUSH
28983: LD_OWVAR 3
28987: PUSH
28988: LD_VAR 0 1
28992: DIFF
28993: PPUSH
28994: LD_VAR 0 1
28998: PPUSH
28999: CALL_OW 74
29003: PPUSH
29004: CALL_OW 115
// wait ( 0 0$20 ) ;
29008: LD_INT 700
29010: PPUSH
29011: CALL_OW 67
// SetSide ( un , your_side ) ;
29015: LD_VAR 0 1
29019: PPUSH
29020: LD_OWVAR 2
29024: PPUSH
29025: CALL_OW 235
// end ;
29029: PPOPN 2
29031: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29032: LD_EXP 63
29036: IFFALSE 29044
29038: PUSH
29039: LD_EXP 96
29043: AND
29044: IFFALSE 29150
29046: GO 29048
29048: DISABLE
29049: LD_INT 0
29051: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29052: LD_ADDR_VAR 0 1
29056: PUSH
29057: LD_INT 22
29059: PUSH
29060: LD_OWVAR 2
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 2
29071: PUSH
29072: LD_INT 30
29074: PUSH
29075: LD_INT 0
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 30
29084: PUSH
29085: LD_INT 1
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: LIST
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PPUSH
29101: CALL_OW 69
29105: ST_TO_ADDR
// if not depot then
29106: LD_VAR 0 1
29110: NOT
29111: IFFALSE 29115
// exit ;
29113: GO 29150
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29115: LD_VAR 0 1
29119: PUSH
29120: LD_INT 1
29122: ARRAY
29123: PPUSH
29124: CALL_OW 250
29128: PPUSH
29129: LD_VAR 0 1
29133: PUSH
29134: LD_INT 1
29136: ARRAY
29137: PPUSH
29138: CALL_OW 251
29142: PPUSH
29143: LD_INT 70
29145: PPUSH
29146: CALL_OW 495
// end ;
29150: PPOPN 1
29152: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29153: LD_EXP 63
29157: IFFALSE 29165
29159: PUSH
29160: LD_EXP 97
29164: AND
29165: IFFALSE 29376
29167: GO 29169
29169: DISABLE
29170: LD_INT 0
29172: PPUSH
29173: PPUSH
29174: PPUSH
29175: PPUSH
29176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29177: LD_ADDR_VAR 0 5
29181: PUSH
29182: LD_INT 22
29184: PUSH
29185: LD_OWVAR 2
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 21
29196: PUSH
29197: LD_INT 1
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PPUSH
29208: CALL_OW 69
29212: ST_TO_ADDR
// if not tmp then
29213: LD_VAR 0 5
29217: NOT
29218: IFFALSE 29222
// exit ;
29220: GO 29376
// for i in tmp do
29222: LD_ADDR_VAR 0 1
29226: PUSH
29227: LD_VAR 0 5
29231: PUSH
29232: FOR_IN
29233: IFFALSE 29374
// begin d := rand ( 0 , 5 ) ;
29235: LD_ADDR_VAR 0 4
29239: PUSH
29240: LD_INT 0
29242: PPUSH
29243: LD_INT 5
29245: PPUSH
29246: CALL_OW 12
29250: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29251: LD_ADDR_VAR 0 2
29255: PUSH
29256: LD_VAR 0 1
29260: PPUSH
29261: CALL_OW 250
29265: PPUSH
29266: LD_VAR 0 4
29270: PPUSH
29271: LD_INT 3
29273: PPUSH
29274: LD_INT 12
29276: PPUSH
29277: CALL_OW 12
29281: PPUSH
29282: CALL_OW 272
29286: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29287: LD_ADDR_VAR 0 3
29291: PUSH
29292: LD_VAR 0 1
29296: PPUSH
29297: CALL_OW 251
29301: PPUSH
29302: LD_VAR 0 4
29306: PPUSH
29307: LD_INT 3
29309: PPUSH
29310: LD_INT 12
29312: PPUSH
29313: CALL_OW 12
29317: PPUSH
29318: CALL_OW 273
29322: ST_TO_ADDR
// if ValidHex ( x , y ) then
29323: LD_VAR 0 2
29327: PPUSH
29328: LD_VAR 0 3
29332: PPUSH
29333: CALL_OW 488
29337: IFFALSE 29372
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29339: LD_VAR 0 1
29343: PPUSH
29344: LD_VAR 0 2
29348: PPUSH
29349: LD_VAR 0 3
29353: PPUSH
29354: LD_INT 3
29356: PPUSH
29357: LD_INT 6
29359: PPUSH
29360: CALL_OW 12
29364: PPUSH
29365: LD_INT 1
29367: PPUSH
29368: CALL_OW 483
// end ;
29372: GO 29232
29374: POP
29375: POP
// end ;
29376: PPOPN 5
29378: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29379: LD_EXP 63
29383: IFFALSE 29391
29385: PUSH
29386: LD_EXP 98
29390: AND
29391: IFFALSE 29485
29393: GO 29395
29395: DISABLE
29396: LD_INT 0
29398: PPUSH
29399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29400: LD_ADDR_VAR 0 2
29404: PUSH
29405: LD_INT 22
29407: PUSH
29408: LD_OWVAR 2
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 32
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 21
29429: PUSH
29430: LD_INT 2
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: LIST
29441: PPUSH
29442: CALL_OW 69
29446: ST_TO_ADDR
// if not tmp then
29447: LD_VAR 0 2
29451: NOT
29452: IFFALSE 29456
// exit ;
29454: GO 29485
// for i in tmp do
29456: LD_ADDR_VAR 0 1
29460: PUSH
29461: LD_VAR 0 2
29465: PUSH
29466: FOR_IN
29467: IFFALSE 29483
// SetFuel ( i , 0 ) ;
29469: LD_VAR 0 1
29473: PPUSH
29474: LD_INT 0
29476: PPUSH
29477: CALL_OW 240
29481: GO 29466
29483: POP
29484: POP
// end ;
29485: PPOPN 2
29487: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29488: LD_EXP 63
29492: IFFALSE 29500
29494: PUSH
29495: LD_EXP 99
29499: AND
29500: IFFALSE 29566
29502: GO 29504
29504: DISABLE
29505: LD_INT 0
29507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29508: LD_ADDR_VAR 0 1
29512: PUSH
29513: LD_INT 22
29515: PUSH
29516: LD_OWVAR 2
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 30
29527: PUSH
29528: LD_INT 29
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PPUSH
29539: CALL_OW 69
29543: ST_TO_ADDR
// if not tmp then
29544: LD_VAR 0 1
29548: NOT
29549: IFFALSE 29553
// exit ;
29551: GO 29566
// DestroyUnit ( tmp [ 1 ] ) ;
29553: LD_VAR 0 1
29557: PUSH
29558: LD_INT 1
29560: ARRAY
29561: PPUSH
29562: CALL_OW 65
// end ;
29566: PPOPN 1
29568: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29569: LD_EXP 63
29573: IFFALSE 29581
29575: PUSH
29576: LD_EXP 101
29580: AND
29581: IFFALSE 29710
29583: GO 29585
29585: DISABLE
29586: LD_INT 0
29588: PPUSH
// begin uc_side := 0 ;
29589: LD_ADDR_OWVAR 20
29593: PUSH
29594: LD_INT 0
29596: ST_TO_ADDR
// uc_nation := nation_arabian ;
29597: LD_ADDR_OWVAR 21
29601: PUSH
29602: LD_INT 2
29604: ST_TO_ADDR
// hc_gallery :=  ;
29605: LD_ADDR_OWVAR 33
29609: PUSH
29610: LD_STRING 
29612: ST_TO_ADDR
// hc_name :=  ;
29613: LD_ADDR_OWVAR 26
29617: PUSH
29618: LD_STRING 
29620: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29621: LD_INT 1
29623: PPUSH
29624: LD_INT 11
29626: PPUSH
29627: LD_INT 10
29629: PPUSH
29630: CALL_OW 380
// un := CreateHuman ;
29634: LD_ADDR_VAR 0 1
29638: PUSH
29639: CALL_OW 44
29643: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29644: LD_VAR 0 1
29648: PPUSH
29649: LD_INT 1
29651: PPUSH
29652: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29656: LD_INT 35
29658: PPUSH
29659: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29663: LD_VAR 0 1
29667: PPUSH
29668: LD_INT 22
29670: PUSH
29671: LD_OWVAR 2
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PPUSH
29680: CALL_OW 69
29684: PPUSH
29685: LD_VAR 0 1
29689: PPUSH
29690: CALL_OW 74
29694: PPUSH
29695: CALL_OW 115
// until IsDead ( un ) ;
29699: LD_VAR 0 1
29703: PPUSH
29704: CALL_OW 301
29708: IFFALSE 29656
// end ;
29710: PPOPN 1
29712: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29713: LD_EXP 63
29717: IFFALSE 29725
29719: PUSH
29720: LD_EXP 103
29724: AND
29725: IFFALSE 29737
29727: GO 29729
29729: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29730: LD_STRING earthquake(getX(game), 0, 32)
29732: PPUSH
29733: CALL_OW 559
29737: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29738: LD_EXP 63
29742: IFFALSE 29750
29744: PUSH
29745: LD_EXP 104
29749: AND
29750: IFFALSE 29841
29752: GO 29754
29754: DISABLE
29755: LD_INT 0
29757: PPUSH
// begin enable ;
29758: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29759: LD_ADDR_VAR 0 1
29763: PUSH
29764: LD_INT 22
29766: PUSH
29767: LD_OWVAR 2
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 21
29778: PUSH
29779: LD_INT 2
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 33
29788: PUSH
29789: LD_INT 3
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: LIST
29800: PPUSH
29801: CALL_OW 69
29805: ST_TO_ADDR
// if not tmp then
29806: LD_VAR 0 1
29810: NOT
29811: IFFALSE 29815
// exit ;
29813: GO 29841
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29815: LD_VAR 0 1
29819: PUSH
29820: LD_INT 1
29822: PPUSH
29823: LD_VAR 0 1
29827: PPUSH
29828: CALL_OW 12
29832: ARRAY
29833: PPUSH
29834: LD_INT 1
29836: PPUSH
29837: CALL_OW 234
// end ;
29841: PPOPN 1
29843: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29844: LD_EXP 63
29848: IFFALSE 29856
29850: PUSH
29851: LD_EXP 105
29855: AND
29856: IFFALSE 29997
29858: GO 29860
29860: DISABLE
29861: LD_INT 0
29863: PPUSH
29864: PPUSH
29865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29866: LD_ADDR_VAR 0 3
29870: PUSH
29871: LD_INT 22
29873: PUSH
29874: LD_OWVAR 2
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 25
29885: PUSH
29886: LD_INT 1
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PPUSH
29897: CALL_OW 69
29901: ST_TO_ADDR
// if not tmp then
29902: LD_VAR 0 3
29906: NOT
29907: IFFALSE 29911
// exit ;
29909: GO 29997
// un := tmp [ rand ( 1 , tmp ) ] ;
29911: LD_ADDR_VAR 0 2
29915: PUSH
29916: LD_VAR 0 3
29920: PUSH
29921: LD_INT 1
29923: PPUSH
29924: LD_VAR 0 3
29928: PPUSH
29929: CALL_OW 12
29933: ARRAY
29934: ST_TO_ADDR
// if Crawls ( un ) then
29935: LD_VAR 0 2
29939: PPUSH
29940: CALL_OW 318
29944: IFFALSE 29955
// ComWalk ( un ) ;
29946: LD_VAR 0 2
29950: PPUSH
29951: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29955: LD_VAR 0 2
29959: PPUSH
29960: LD_INT 9
29962: PPUSH
29963: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29967: LD_INT 28
29969: PPUSH
29970: LD_OWVAR 2
29974: PPUSH
29975: LD_INT 2
29977: PPUSH
29978: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29982: LD_INT 29
29984: PPUSH
29985: LD_OWVAR 2
29989: PPUSH
29990: LD_INT 2
29992: PPUSH
29993: CALL_OW 322
// end ;
29997: PPOPN 3
29999: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30000: LD_EXP 63
30004: IFFALSE 30012
30006: PUSH
30007: LD_EXP 106
30011: AND
30012: IFFALSE 30123
30014: GO 30016
30016: DISABLE
30017: LD_INT 0
30019: PPUSH
30020: PPUSH
30021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30022: LD_ADDR_VAR 0 3
30026: PUSH
30027: LD_INT 22
30029: PUSH
30030: LD_OWVAR 2
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 25
30041: PUSH
30042: LD_INT 1
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PPUSH
30053: CALL_OW 69
30057: ST_TO_ADDR
// if not tmp then
30058: LD_VAR 0 3
30062: NOT
30063: IFFALSE 30067
// exit ;
30065: GO 30123
// un := tmp [ rand ( 1 , tmp ) ] ;
30067: LD_ADDR_VAR 0 2
30071: PUSH
30072: LD_VAR 0 3
30076: PUSH
30077: LD_INT 1
30079: PPUSH
30080: LD_VAR 0 3
30084: PPUSH
30085: CALL_OW 12
30089: ARRAY
30090: ST_TO_ADDR
// if Crawls ( un ) then
30091: LD_VAR 0 2
30095: PPUSH
30096: CALL_OW 318
30100: IFFALSE 30111
// ComWalk ( un ) ;
30102: LD_VAR 0 2
30106: PPUSH
30107: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30111: LD_VAR 0 2
30115: PPUSH
30116: LD_INT 8
30118: PPUSH
30119: CALL_OW 336
// end ;
30123: PPOPN 3
30125: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30126: LD_EXP 63
30130: IFFALSE 30138
30132: PUSH
30133: LD_EXP 107
30137: AND
30138: IFFALSE 30282
30140: GO 30142
30142: DISABLE
30143: LD_INT 0
30145: PPUSH
30146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30147: LD_ADDR_VAR 0 2
30151: PUSH
30152: LD_INT 22
30154: PUSH
30155: LD_OWVAR 2
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 21
30166: PUSH
30167: LD_INT 2
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 2
30176: PUSH
30177: LD_INT 34
30179: PUSH
30180: LD_INT 12
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 34
30189: PUSH
30190: LD_INT 51
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 34
30199: PUSH
30200: LD_INT 32
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: LIST
30217: PPUSH
30218: CALL_OW 69
30222: ST_TO_ADDR
// if not tmp then
30223: LD_VAR 0 2
30227: NOT
30228: IFFALSE 30232
// exit ;
30230: GO 30282
// for i in tmp do
30232: LD_ADDR_VAR 0 1
30236: PUSH
30237: LD_VAR 0 2
30241: PUSH
30242: FOR_IN
30243: IFFALSE 30280
// if GetCargo ( i , mat_artifact ) = 0 then
30245: LD_VAR 0 1
30249: PPUSH
30250: LD_INT 4
30252: PPUSH
30253: CALL_OW 289
30257: PUSH
30258: LD_INT 0
30260: EQUAL
30261: IFFALSE 30278
// SetCargo ( i , mat_siberit , 100 ) ;
30263: LD_VAR 0 1
30267: PPUSH
30268: LD_INT 3
30270: PPUSH
30271: LD_INT 100
30273: PPUSH
30274: CALL_OW 290
30278: GO 30242
30280: POP
30281: POP
// end ;
30282: PPOPN 2
30284: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30285: LD_EXP 63
30289: IFFALSE 30297
30291: PUSH
30292: LD_EXP 108
30296: AND
30297: IFFALSE 30480
30299: GO 30301
30301: DISABLE
30302: LD_INT 0
30304: PPUSH
30305: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30306: LD_ADDR_VAR 0 2
30310: PUSH
30311: LD_INT 22
30313: PUSH
30314: LD_OWVAR 2
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PPUSH
30323: CALL_OW 69
30327: ST_TO_ADDR
// if not tmp then
30328: LD_VAR 0 2
30332: NOT
30333: IFFALSE 30337
// exit ;
30335: GO 30480
// for i := 1 to 2 do
30337: LD_ADDR_VAR 0 1
30341: PUSH
30342: DOUBLE
30343: LD_INT 1
30345: DEC
30346: ST_TO_ADDR
30347: LD_INT 2
30349: PUSH
30350: FOR_TO
30351: IFFALSE 30478
// begin uc_side := your_side ;
30353: LD_ADDR_OWVAR 20
30357: PUSH
30358: LD_OWVAR 2
30362: ST_TO_ADDR
// uc_nation := nation_american ;
30363: LD_ADDR_OWVAR 21
30367: PUSH
30368: LD_INT 1
30370: ST_TO_ADDR
// vc_chassis := us_morphling ;
30371: LD_ADDR_OWVAR 37
30375: PUSH
30376: LD_INT 5
30378: ST_TO_ADDR
// vc_engine := engine_siberite ;
30379: LD_ADDR_OWVAR 39
30383: PUSH
30384: LD_INT 3
30386: ST_TO_ADDR
// vc_control := control_computer ;
30387: LD_ADDR_OWVAR 38
30391: PUSH
30392: LD_INT 3
30394: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30395: LD_ADDR_OWVAR 40
30399: PUSH
30400: LD_INT 10
30402: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30403: LD_VAR 0 2
30407: PUSH
30408: LD_INT 1
30410: ARRAY
30411: PPUSH
30412: CALL_OW 310
30416: NOT
30417: IFFALSE 30464
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30419: CALL_OW 45
30423: PPUSH
30424: LD_VAR 0 2
30428: PUSH
30429: LD_INT 1
30431: ARRAY
30432: PPUSH
30433: CALL_OW 250
30437: PPUSH
30438: LD_VAR 0 2
30442: PUSH
30443: LD_INT 1
30445: ARRAY
30446: PPUSH
30447: CALL_OW 251
30451: PPUSH
30452: LD_INT 12
30454: PPUSH
30455: LD_INT 1
30457: PPUSH
30458: CALL_OW 50
30462: GO 30476
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30464: CALL_OW 45
30468: PPUSH
30469: LD_INT 1
30471: PPUSH
30472: CALL_OW 51
// end ;
30476: GO 30350
30478: POP
30479: POP
// end ;
30480: PPOPN 2
30482: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30483: LD_EXP 63
30487: IFFALSE 30495
30489: PUSH
30490: LD_EXP 109
30494: AND
30495: IFFALSE 30717
30497: GO 30499
30499: DISABLE
30500: LD_INT 0
30502: PPUSH
30503: PPUSH
30504: PPUSH
30505: PPUSH
30506: PPUSH
30507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30508: LD_ADDR_VAR 0 6
30512: PUSH
30513: LD_INT 22
30515: PUSH
30516: LD_OWVAR 2
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 21
30527: PUSH
30528: LD_INT 1
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 3
30537: PUSH
30538: LD_INT 23
30540: PUSH
30541: LD_INT 0
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: LIST
30556: PPUSH
30557: CALL_OW 69
30561: ST_TO_ADDR
// if not tmp then
30562: LD_VAR 0 6
30566: NOT
30567: IFFALSE 30571
// exit ;
30569: GO 30717
// s1 := rand ( 1 , 4 ) ;
30571: LD_ADDR_VAR 0 2
30575: PUSH
30576: LD_INT 1
30578: PPUSH
30579: LD_INT 4
30581: PPUSH
30582: CALL_OW 12
30586: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30587: LD_ADDR_VAR 0 4
30591: PUSH
30592: LD_VAR 0 6
30596: PUSH
30597: LD_INT 1
30599: ARRAY
30600: PPUSH
30601: LD_VAR 0 2
30605: PPUSH
30606: CALL_OW 259
30610: ST_TO_ADDR
// if s1 = 1 then
30611: LD_VAR 0 2
30615: PUSH
30616: LD_INT 1
30618: EQUAL
30619: IFFALSE 30639
// s2 := rand ( 2 , 4 ) else
30621: LD_ADDR_VAR 0 3
30625: PUSH
30626: LD_INT 2
30628: PPUSH
30629: LD_INT 4
30631: PPUSH
30632: CALL_OW 12
30636: ST_TO_ADDR
30637: GO 30647
// s2 := 1 ;
30639: LD_ADDR_VAR 0 3
30643: PUSH
30644: LD_INT 1
30646: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30647: LD_ADDR_VAR 0 5
30651: PUSH
30652: LD_VAR 0 6
30656: PUSH
30657: LD_INT 1
30659: ARRAY
30660: PPUSH
30661: LD_VAR 0 3
30665: PPUSH
30666: CALL_OW 259
30670: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30671: LD_VAR 0 6
30675: PUSH
30676: LD_INT 1
30678: ARRAY
30679: PPUSH
30680: LD_VAR 0 2
30684: PPUSH
30685: LD_VAR 0 5
30689: PPUSH
30690: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30694: LD_VAR 0 6
30698: PUSH
30699: LD_INT 1
30701: ARRAY
30702: PPUSH
30703: LD_VAR 0 3
30707: PPUSH
30708: LD_VAR 0 4
30712: PPUSH
30713: CALL_OW 237
// end ;
30717: PPOPN 6
30719: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30720: LD_EXP 63
30724: IFFALSE 30732
30726: PUSH
30727: LD_EXP 110
30731: AND
30732: IFFALSE 30811
30734: GO 30736
30736: DISABLE
30737: LD_INT 0
30739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30740: LD_ADDR_VAR 0 1
30744: PUSH
30745: LD_INT 22
30747: PUSH
30748: LD_OWVAR 2
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 30
30759: PUSH
30760: LD_INT 3
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PPUSH
30771: CALL_OW 69
30775: ST_TO_ADDR
// if not tmp then
30776: LD_VAR 0 1
30780: NOT
30781: IFFALSE 30785
// exit ;
30783: GO 30811
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30785: LD_VAR 0 1
30789: PUSH
30790: LD_INT 1
30792: PPUSH
30793: LD_VAR 0 1
30797: PPUSH
30798: CALL_OW 12
30802: ARRAY
30803: PPUSH
30804: LD_INT 1
30806: PPUSH
30807: CALL_OW 234
// end ;
30811: PPOPN 1
30813: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30814: LD_EXP 63
30818: IFFALSE 30826
30820: PUSH
30821: LD_EXP 111
30825: AND
30826: IFFALSE 30938
30828: GO 30830
30830: DISABLE
30831: LD_INT 0
30833: PPUSH
30834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30835: LD_ADDR_VAR 0 2
30839: PUSH
30840: LD_INT 22
30842: PUSH
30843: LD_OWVAR 2
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 2
30854: PUSH
30855: LD_INT 30
30857: PUSH
30858: LD_INT 27
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 30
30867: PUSH
30868: LD_INT 26
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 30
30877: PUSH
30878: LD_INT 28
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PPUSH
30895: CALL_OW 69
30899: ST_TO_ADDR
// if not tmp then
30900: LD_VAR 0 2
30904: NOT
30905: IFFALSE 30909
// exit ;
30907: GO 30938
// for i in tmp do
30909: LD_ADDR_VAR 0 1
30913: PUSH
30914: LD_VAR 0 2
30918: PUSH
30919: FOR_IN
30920: IFFALSE 30936
// SetLives ( i , 1 ) ;
30922: LD_VAR 0 1
30926: PPUSH
30927: LD_INT 1
30929: PPUSH
30930: CALL_OW 234
30934: GO 30919
30936: POP
30937: POP
// end ;
30938: PPOPN 2
30940: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30941: LD_EXP 63
30945: IFFALSE 30953
30947: PUSH
30948: LD_EXP 112
30952: AND
30953: IFFALSE 31240
30955: GO 30957
30957: DISABLE
30958: LD_INT 0
30960: PPUSH
30961: PPUSH
30962: PPUSH
// begin i := rand ( 1 , 7 ) ;
30963: LD_ADDR_VAR 0 1
30967: PUSH
30968: LD_INT 1
30970: PPUSH
30971: LD_INT 7
30973: PPUSH
30974: CALL_OW 12
30978: ST_TO_ADDR
// case i of 1 :
30979: LD_VAR 0 1
30983: PUSH
30984: LD_INT 1
30986: DOUBLE
30987: EQUAL
30988: IFTRUE 30992
30990: GO 31002
30992: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30993: LD_STRING earthquake(getX(game), 0, 32)
30995: PPUSH
30996: CALL_OW 559
31000: GO 31240
31002: LD_INT 2
31004: DOUBLE
31005: EQUAL
31006: IFTRUE 31010
31008: GO 31024
31010: POP
// begin ToLua ( displayStucuk(); ) ;
31011: LD_STRING displayStucuk();
31013: PPUSH
31014: CALL_OW 559
// ResetFog ;
31018: CALL_OW 335
// end ; 3 :
31022: GO 31240
31024: LD_INT 3
31026: DOUBLE
31027: EQUAL
31028: IFTRUE 31032
31030: GO 31136
31032: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31033: LD_ADDR_VAR 0 2
31037: PUSH
31038: LD_INT 22
31040: PUSH
31041: LD_OWVAR 2
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 25
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PPUSH
31064: CALL_OW 69
31068: ST_TO_ADDR
// if not tmp then
31069: LD_VAR 0 2
31073: NOT
31074: IFFALSE 31078
// exit ;
31076: GO 31240
// un := tmp [ rand ( 1 , tmp ) ] ;
31078: LD_ADDR_VAR 0 3
31082: PUSH
31083: LD_VAR 0 2
31087: PUSH
31088: LD_INT 1
31090: PPUSH
31091: LD_VAR 0 2
31095: PPUSH
31096: CALL_OW 12
31100: ARRAY
31101: ST_TO_ADDR
// if Crawls ( un ) then
31102: LD_VAR 0 3
31106: PPUSH
31107: CALL_OW 318
31111: IFFALSE 31122
// ComWalk ( un ) ;
31113: LD_VAR 0 3
31117: PPUSH
31118: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31122: LD_VAR 0 3
31126: PPUSH
31127: LD_INT 8
31129: PPUSH
31130: CALL_OW 336
// end ; 4 :
31134: GO 31240
31136: LD_INT 4
31138: DOUBLE
31139: EQUAL
31140: IFTRUE 31144
31142: GO 31218
31144: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31145: LD_ADDR_VAR 0 2
31149: PUSH
31150: LD_INT 22
31152: PUSH
31153: LD_OWVAR 2
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 30
31164: PUSH
31165: LD_INT 29
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PPUSH
31176: CALL_OW 69
31180: ST_TO_ADDR
// if not tmp then
31181: LD_VAR 0 2
31185: NOT
31186: IFFALSE 31190
// exit ;
31188: GO 31240
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31190: LD_VAR 0 2
31194: PUSH
31195: LD_INT 1
31197: ARRAY
31198: PPUSH
31199: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31203: LD_VAR 0 2
31207: PUSH
31208: LD_INT 1
31210: ARRAY
31211: PPUSH
31212: CALL_OW 65
// end ; 5 .. 7 :
31216: GO 31240
31218: LD_INT 5
31220: DOUBLE
31221: GREATEREQUAL
31222: IFFALSE 31230
31224: LD_INT 7
31226: DOUBLE
31227: LESSEQUAL
31228: IFTRUE 31232
31230: GO 31239
31232: POP
// StreamSibBomb ; end ;
31233: CALL 27421 0 0
31237: GO 31240
31239: POP
// end ;
31240: PPOPN 3
31242: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31243: LD_EXP 63
31247: IFFALSE 31255
31249: PUSH
31250: LD_EXP 113
31254: AND
31255: IFFALSE 31411
31257: GO 31259
31259: DISABLE
31260: LD_INT 0
31262: PPUSH
31263: PPUSH
31264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31265: LD_ADDR_VAR 0 2
31269: PUSH
31270: LD_INT 81
31272: PUSH
31273: LD_OWVAR 2
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 2
31284: PUSH
31285: LD_INT 21
31287: PUSH
31288: LD_INT 1
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 21
31297: PUSH
31298: LD_INT 2
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: LIST
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PPUSH
31314: CALL_OW 69
31318: ST_TO_ADDR
// if not tmp then
31319: LD_VAR 0 2
31323: NOT
31324: IFFALSE 31328
// exit ;
31326: GO 31411
// p := 0 ;
31328: LD_ADDR_VAR 0 3
31332: PUSH
31333: LD_INT 0
31335: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31336: LD_INT 35
31338: PPUSH
31339: CALL_OW 67
// p := p + 1 ;
31343: LD_ADDR_VAR 0 3
31347: PUSH
31348: LD_VAR 0 3
31352: PUSH
31353: LD_INT 1
31355: PLUS
31356: ST_TO_ADDR
// for i in tmp do
31357: LD_ADDR_VAR 0 1
31361: PUSH
31362: LD_VAR 0 2
31366: PUSH
31367: FOR_IN
31368: IFFALSE 31399
// if GetLives ( i ) < 1000 then
31370: LD_VAR 0 1
31374: PPUSH
31375: CALL_OW 256
31379: PUSH
31380: LD_INT 1000
31382: LESS
31383: IFFALSE 31397
// SetLives ( i , 1000 ) ;
31385: LD_VAR 0 1
31389: PPUSH
31390: LD_INT 1000
31392: PPUSH
31393: CALL_OW 234
31397: GO 31367
31399: POP
31400: POP
// until p > 20 ;
31401: LD_VAR 0 3
31405: PUSH
31406: LD_INT 20
31408: GREATER
31409: IFFALSE 31336
// end ;
31411: PPOPN 3
31413: END
// every 0 0$1 trigger StreamModeActive and sTime do
31414: LD_EXP 63
31418: IFFALSE 31426
31420: PUSH
31421: LD_EXP 114
31425: AND
31426: IFFALSE 31461
31428: GO 31430
31430: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31431: LD_INT 28
31433: PPUSH
31434: LD_OWVAR 2
31438: PPUSH
31439: LD_INT 2
31441: PPUSH
31442: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31446: LD_INT 30
31448: PPUSH
31449: LD_OWVAR 2
31453: PPUSH
31454: LD_INT 2
31456: PPUSH
31457: CALL_OW 322
// end ;
31461: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31462: LD_EXP 63
31466: IFFALSE 31474
31468: PUSH
31469: LD_EXP 115
31473: AND
31474: IFFALSE 31595
31476: GO 31478
31478: DISABLE
31479: LD_INT 0
31481: PPUSH
31482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31483: LD_ADDR_VAR 0 2
31487: PUSH
31488: LD_INT 22
31490: PUSH
31491: LD_OWVAR 2
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 21
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 3
31512: PUSH
31513: LD_INT 23
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: LIST
31531: PPUSH
31532: CALL_OW 69
31536: ST_TO_ADDR
// if not tmp then
31537: LD_VAR 0 2
31541: NOT
31542: IFFALSE 31546
// exit ;
31544: GO 31595
// for i in tmp do
31546: LD_ADDR_VAR 0 1
31550: PUSH
31551: LD_VAR 0 2
31555: PUSH
31556: FOR_IN
31557: IFFALSE 31593
// begin if Crawls ( i ) then
31559: LD_VAR 0 1
31563: PPUSH
31564: CALL_OW 318
31568: IFFALSE 31579
// ComWalk ( i ) ;
31570: LD_VAR 0 1
31574: PPUSH
31575: CALL_OW 138
// SetClass ( i , 2 ) ;
31579: LD_VAR 0 1
31583: PPUSH
31584: LD_INT 2
31586: PPUSH
31587: CALL_OW 336
// end ;
31591: GO 31556
31593: POP
31594: POP
// end ;
31595: PPOPN 2
31597: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31598: LD_EXP 63
31602: IFFALSE 31610
31604: PUSH
31605: LD_EXP 116
31609: AND
31610: IFFALSE 31900
31612: GO 31614
31614: DISABLE
31615: LD_INT 0
31617: PPUSH
31618: PPUSH
31619: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31620: LD_OWVAR 2
31624: PPUSH
31625: LD_INT 9
31627: PPUSH
31628: LD_INT 1
31630: PPUSH
31631: LD_INT 1
31633: PPUSH
31634: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31638: LD_INT 9
31640: PPUSH
31641: LD_OWVAR 2
31645: PPUSH
31646: CALL_OW 343
// uc_side := 9 ;
31650: LD_ADDR_OWVAR 20
31654: PUSH
31655: LD_INT 9
31657: ST_TO_ADDR
// uc_nation := 2 ;
31658: LD_ADDR_OWVAR 21
31662: PUSH
31663: LD_INT 2
31665: ST_TO_ADDR
// hc_name := Dark Warrior ;
31666: LD_ADDR_OWVAR 26
31670: PUSH
31671: LD_STRING Dark Warrior
31673: ST_TO_ADDR
// hc_gallery :=  ;
31674: LD_ADDR_OWVAR 33
31678: PUSH
31679: LD_STRING 
31681: ST_TO_ADDR
// hc_noskilllimit := true ;
31682: LD_ADDR_OWVAR 76
31686: PUSH
31687: LD_INT 1
31689: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31690: LD_ADDR_OWVAR 31
31694: PUSH
31695: LD_INT 30
31697: PUSH
31698: LD_INT 30
31700: PUSH
31701: LD_INT 30
31703: PUSH
31704: LD_INT 30
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: ST_TO_ADDR
// un := CreateHuman ;
31713: LD_ADDR_VAR 0 3
31717: PUSH
31718: CALL_OW 44
31722: ST_TO_ADDR
// hc_noskilllimit := false ;
31723: LD_ADDR_OWVAR 76
31727: PUSH
31728: LD_INT 0
31730: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31731: LD_VAR 0 3
31735: PPUSH
31736: LD_INT 1
31738: PPUSH
31739: CALL_OW 51
// ToLua ( playRanger() ) ;
31743: LD_STRING playRanger()
31745: PPUSH
31746: CALL_OW 559
// p := 0 ;
31750: LD_ADDR_VAR 0 2
31754: PUSH
31755: LD_INT 0
31757: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31758: LD_INT 35
31760: PPUSH
31761: CALL_OW 67
// p := p + 1 ;
31765: LD_ADDR_VAR 0 2
31769: PUSH
31770: LD_VAR 0 2
31774: PUSH
31775: LD_INT 1
31777: PLUS
31778: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31779: LD_VAR 0 3
31783: PPUSH
31784: CALL_OW 256
31788: PUSH
31789: LD_INT 1000
31791: LESS
31792: IFFALSE 31806
// SetLives ( un , 1000 ) ;
31794: LD_VAR 0 3
31798: PPUSH
31799: LD_INT 1000
31801: PPUSH
31802: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31806: LD_VAR 0 3
31810: PPUSH
31811: LD_INT 81
31813: PUSH
31814: LD_OWVAR 2
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 91
31825: PUSH
31826: LD_VAR 0 3
31830: PUSH
31831: LD_INT 30
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: LIST
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PPUSH
31843: CALL_OW 69
31847: PPUSH
31848: LD_VAR 0 3
31852: PPUSH
31853: CALL_OW 74
31857: PPUSH
31858: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31862: LD_VAR 0 2
31866: PUSH
31867: LD_INT 80
31869: GREATER
31870: IFTRUE 31883
31872: PUSH
31873: LD_VAR 0 3
31877: PPUSH
31878: CALL_OW 301
31882: OR
31883: IFFALSE 31758
// if un then
31885: LD_VAR 0 3
31889: IFFALSE 31900
// RemoveUnit ( un ) ;
31891: LD_VAR 0 3
31895: PPUSH
31896: CALL_OW 64
// end ;
31900: PPOPN 3
31902: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31903: LD_EXP 117
31907: IFFALSE 32023
31909: GO 31911
31911: DISABLE
31912: LD_INT 0
31914: PPUSH
31915: PPUSH
31916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31917: LD_ADDR_VAR 0 2
31921: PUSH
31922: LD_INT 81
31924: PUSH
31925: LD_OWVAR 2
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 21
31936: PUSH
31937: LD_INT 1
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PPUSH
31948: CALL_OW 69
31952: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31953: LD_STRING playComputer()
31955: PPUSH
31956: CALL_OW 559
// if not tmp then
31960: LD_VAR 0 2
31964: NOT
31965: IFFALSE 31969
// exit ;
31967: GO 32023
// for i in tmp do
31969: LD_ADDR_VAR 0 1
31973: PUSH
31974: LD_VAR 0 2
31978: PUSH
31979: FOR_IN
31980: IFFALSE 32021
// for j := 1 to 4 do
31982: LD_ADDR_VAR 0 3
31986: PUSH
31987: DOUBLE
31988: LD_INT 1
31990: DEC
31991: ST_TO_ADDR
31992: LD_INT 4
31994: PUSH
31995: FOR_TO
31996: IFFALSE 32017
// SetSkill ( i , j , 10 ) ;
31998: LD_VAR 0 1
32002: PPUSH
32003: LD_VAR 0 3
32007: PPUSH
32008: LD_INT 10
32010: PPUSH
32011: CALL_OW 237
32015: GO 31995
32017: POP
32018: POP
32019: GO 31979
32021: POP
32022: POP
// end ;
32023: PPOPN 3
32025: END
// every 0 0$1 trigger s30 do var i , tmp ;
32026: LD_EXP 118
32030: IFFALSE 32099
32032: GO 32034
32034: DISABLE
32035: LD_INT 0
32037: PPUSH
32038: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32039: LD_ADDR_VAR 0 2
32043: PUSH
32044: LD_INT 22
32046: PUSH
32047: LD_OWVAR 2
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PPUSH
32056: CALL_OW 69
32060: ST_TO_ADDR
// if not tmp then
32061: LD_VAR 0 2
32065: NOT
32066: IFFALSE 32070
// exit ;
32068: GO 32099
// for i in tmp do
32070: LD_ADDR_VAR 0 1
32074: PUSH
32075: LD_VAR 0 2
32079: PUSH
32080: FOR_IN
32081: IFFALSE 32097
// SetLives ( i , 300 ) ;
32083: LD_VAR 0 1
32087: PPUSH
32088: LD_INT 300
32090: PPUSH
32091: CALL_OW 234
32095: GO 32080
32097: POP
32098: POP
// end ;
32099: PPOPN 2
32101: END
// every 0 0$1 trigger s60 do var i , tmp ;
32102: LD_EXP 119
32106: IFFALSE 32175
32108: GO 32110
32110: DISABLE
32111: LD_INT 0
32113: PPUSH
32114: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32115: LD_ADDR_VAR 0 2
32119: PUSH
32120: LD_INT 22
32122: PUSH
32123: LD_OWVAR 2
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PPUSH
32132: CALL_OW 69
32136: ST_TO_ADDR
// if not tmp then
32137: LD_VAR 0 2
32141: NOT
32142: IFFALSE 32146
// exit ;
32144: GO 32175
// for i in tmp do
32146: LD_ADDR_VAR 0 1
32150: PUSH
32151: LD_VAR 0 2
32155: PUSH
32156: FOR_IN
32157: IFFALSE 32173
// SetLives ( i , 600 ) ;
32159: LD_VAR 0 1
32163: PPUSH
32164: LD_INT 600
32166: PPUSH
32167: CALL_OW 234
32171: GO 32156
32173: POP
32174: POP
// end ;
32175: PPOPN 2
32177: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32178: LD_INT 0
32180: PPUSH
// case cmd of 301 :
32181: LD_VAR 0 1
32185: PUSH
32186: LD_INT 301
32188: DOUBLE
32189: EQUAL
32190: IFTRUE 32194
32192: GO 32226
32194: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32195: LD_VAR 0 6
32199: PPUSH
32200: LD_VAR 0 7
32204: PPUSH
32205: LD_VAR 0 8
32209: PPUSH
32210: LD_VAR 0 4
32214: PPUSH
32215: LD_VAR 0 5
32219: PPUSH
32220: CALL 33439 0 5
32224: GO 32347
32226: LD_INT 302
32228: DOUBLE
32229: EQUAL
32230: IFTRUE 32234
32232: GO 32271
32234: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32235: LD_VAR 0 6
32239: PPUSH
32240: LD_VAR 0 7
32244: PPUSH
32245: LD_VAR 0 8
32249: PPUSH
32250: LD_VAR 0 9
32254: PPUSH
32255: LD_VAR 0 4
32259: PPUSH
32260: LD_VAR 0 5
32264: PPUSH
32265: CALL 33530 0 6
32269: GO 32347
32271: LD_INT 303
32273: DOUBLE
32274: EQUAL
32275: IFTRUE 32279
32277: GO 32316
32279: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32280: LD_VAR 0 6
32284: PPUSH
32285: LD_VAR 0 7
32289: PPUSH
32290: LD_VAR 0 8
32294: PPUSH
32295: LD_VAR 0 9
32299: PPUSH
32300: LD_VAR 0 4
32304: PPUSH
32305: LD_VAR 0 5
32309: PPUSH
32310: CALL 32352 0 6
32314: GO 32347
32316: LD_INT 304
32318: DOUBLE
32319: EQUAL
32320: IFTRUE 32324
32322: GO 32346
32324: POP
// hHackTeleport ( unit , x , y ) ; end ;
32325: LD_VAR 0 2
32329: PPUSH
32330: LD_VAR 0 4
32334: PPUSH
32335: LD_VAR 0 5
32339: PPUSH
32340: CALL 34123 0 3
32344: GO 32347
32346: POP
// end ;
32347: LD_VAR 0 12
32351: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32352: LD_INT 0
32354: PPUSH
32355: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32356: LD_VAR 0 1
32360: PUSH
32361: LD_INT 1
32363: LESS
32364: IFTRUE 32376
32366: PUSH
32367: LD_VAR 0 1
32371: PUSH
32372: LD_INT 3
32374: GREATER
32375: OR
32376: IFTRUE 32394
32378: PUSH
32379: LD_VAR 0 5
32383: PPUSH
32384: LD_VAR 0 6
32388: PPUSH
32389: CALL_OW 428
32393: OR
32394: IFFALSE 32398
// exit ;
32396: GO 33126
// uc_side := your_side ;
32398: LD_ADDR_OWVAR 20
32402: PUSH
32403: LD_OWVAR 2
32407: ST_TO_ADDR
// uc_nation := nation ;
32408: LD_ADDR_OWVAR 21
32412: PUSH
32413: LD_VAR 0 1
32417: ST_TO_ADDR
// bc_level = 1 ;
32418: LD_ADDR_OWVAR 43
32422: PUSH
32423: LD_INT 1
32425: ST_TO_ADDR
// case btype of 1 :
32426: LD_VAR 0 2
32430: PUSH
32431: LD_INT 1
32433: DOUBLE
32434: EQUAL
32435: IFTRUE 32439
32437: GO 32450
32439: POP
// bc_type := b_depot ; 2 :
32440: LD_ADDR_OWVAR 42
32444: PUSH
32445: LD_INT 0
32447: ST_TO_ADDR
32448: GO 33070
32450: LD_INT 2
32452: DOUBLE
32453: EQUAL
32454: IFTRUE 32458
32456: GO 32469
32458: POP
// bc_type := b_warehouse ; 3 :
32459: LD_ADDR_OWVAR 42
32463: PUSH
32464: LD_INT 1
32466: ST_TO_ADDR
32467: GO 33070
32469: LD_INT 3
32471: DOUBLE
32472: EQUAL
32473: IFTRUE 32477
32475: GO 32488
32477: POP
// bc_type := b_lab ; 4 .. 9 :
32478: LD_ADDR_OWVAR 42
32482: PUSH
32483: LD_INT 6
32485: ST_TO_ADDR
32486: GO 33070
32488: LD_INT 4
32490: DOUBLE
32491: GREATEREQUAL
32492: IFFALSE 32500
32494: LD_INT 9
32496: DOUBLE
32497: LESSEQUAL
32498: IFTRUE 32502
32500: GO 32562
32502: POP
// begin bc_type := b_lab_half ;
32503: LD_ADDR_OWVAR 42
32507: PUSH
32508: LD_INT 7
32510: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32511: LD_ADDR_OWVAR 44
32515: PUSH
32516: LD_INT 10
32518: PUSH
32519: LD_INT 11
32521: PUSH
32522: LD_INT 12
32524: PUSH
32525: LD_INT 15
32527: PUSH
32528: LD_INT 14
32530: PUSH
32531: LD_INT 13
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: PUSH
32542: LD_VAR 0 2
32546: PUSH
32547: LD_INT 3
32549: MINUS
32550: ARRAY
32551: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32552: LD_ADDR_OWVAR 45
32556: PUSH
32557: LD_INT 9
32559: ST_TO_ADDR
// end ; 10 .. 13 :
32560: GO 33070
32562: LD_INT 10
32564: DOUBLE
32565: GREATEREQUAL
32566: IFFALSE 32574
32568: LD_INT 13
32570: DOUBLE
32571: LESSEQUAL
32572: IFTRUE 32576
32574: GO 32653
32576: POP
// begin bc_type := b_lab_full ;
32577: LD_ADDR_OWVAR 42
32581: PUSH
32582: LD_INT 8
32584: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32585: LD_ADDR_OWVAR 44
32589: PUSH
32590: LD_INT 10
32592: PUSH
32593: LD_INT 12
32595: PUSH
32596: LD_INT 14
32598: PUSH
32599: LD_INT 13
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: PUSH
32608: LD_VAR 0 2
32612: PUSH
32613: LD_INT 9
32615: MINUS
32616: ARRAY
32617: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32618: LD_ADDR_OWVAR 45
32622: PUSH
32623: LD_INT 11
32625: PUSH
32626: LD_INT 15
32628: PUSH
32629: LD_INT 12
32631: PUSH
32632: LD_INT 15
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: PUSH
32641: LD_VAR 0 2
32645: PUSH
32646: LD_INT 9
32648: MINUS
32649: ARRAY
32650: ST_TO_ADDR
// end ; 14 :
32651: GO 33070
32653: LD_INT 14
32655: DOUBLE
32656: EQUAL
32657: IFTRUE 32661
32659: GO 32672
32661: POP
// bc_type := b_workshop ; 15 :
32662: LD_ADDR_OWVAR 42
32666: PUSH
32667: LD_INT 2
32669: ST_TO_ADDR
32670: GO 33070
32672: LD_INT 15
32674: DOUBLE
32675: EQUAL
32676: IFTRUE 32680
32678: GO 32691
32680: POP
// bc_type := b_factory ; 16 :
32681: LD_ADDR_OWVAR 42
32685: PUSH
32686: LD_INT 3
32688: ST_TO_ADDR
32689: GO 33070
32691: LD_INT 16
32693: DOUBLE
32694: EQUAL
32695: IFTRUE 32699
32697: GO 32710
32699: POP
// bc_type := b_ext_gun ; 17 :
32700: LD_ADDR_OWVAR 42
32704: PUSH
32705: LD_INT 17
32707: ST_TO_ADDR
32708: GO 33070
32710: LD_INT 17
32712: DOUBLE
32713: EQUAL
32714: IFTRUE 32718
32716: GO 32746
32718: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32719: LD_ADDR_OWVAR 42
32723: PUSH
32724: LD_INT 19
32726: PUSH
32727: LD_INT 23
32729: PUSH
32730: LD_INT 19
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: LIST
32737: PUSH
32738: LD_VAR 0 1
32742: ARRAY
32743: ST_TO_ADDR
32744: GO 33070
32746: LD_INT 18
32748: DOUBLE
32749: EQUAL
32750: IFTRUE 32754
32752: GO 32765
32754: POP
// bc_type := b_ext_radar ; 19 :
32755: LD_ADDR_OWVAR 42
32759: PUSH
32760: LD_INT 20
32762: ST_TO_ADDR
32763: GO 33070
32765: LD_INT 19
32767: DOUBLE
32768: EQUAL
32769: IFTRUE 32773
32771: GO 32784
32773: POP
// bc_type := b_ext_radio ; 20 :
32774: LD_ADDR_OWVAR 42
32778: PUSH
32779: LD_INT 22
32781: ST_TO_ADDR
32782: GO 33070
32784: LD_INT 20
32786: DOUBLE
32787: EQUAL
32788: IFTRUE 32792
32790: GO 32803
32792: POP
// bc_type := b_ext_siberium ; 21 :
32793: LD_ADDR_OWVAR 42
32797: PUSH
32798: LD_INT 21
32800: ST_TO_ADDR
32801: GO 33070
32803: LD_INT 21
32805: DOUBLE
32806: EQUAL
32807: IFTRUE 32811
32809: GO 32822
32811: POP
// bc_type := b_ext_computer ; 22 :
32812: LD_ADDR_OWVAR 42
32816: PUSH
32817: LD_INT 24
32819: ST_TO_ADDR
32820: GO 33070
32822: LD_INT 22
32824: DOUBLE
32825: EQUAL
32826: IFTRUE 32830
32828: GO 32841
32830: POP
// bc_type := b_ext_track ; 23 :
32831: LD_ADDR_OWVAR 42
32835: PUSH
32836: LD_INT 16
32838: ST_TO_ADDR
32839: GO 33070
32841: LD_INT 23
32843: DOUBLE
32844: EQUAL
32845: IFTRUE 32849
32847: GO 32860
32849: POP
// bc_type := b_ext_laser ; 24 :
32850: LD_ADDR_OWVAR 42
32854: PUSH
32855: LD_INT 25
32857: ST_TO_ADDR
32858: GO 33070
32860: LD_INT 24
32862: DOUBLE
32863: EQUAL
32864: IFTRUE 32868
32866: GO 32879
32868: POP
// bc_type := b_control_tower ; 25 :
32869: LD_ADDR_OWVAR 42
32873: PUSH
32874: LD_INT 36
32876: ST_TO_ADDR
32877: GO 33070
32879: LD_INT 25
32881: DOUBLE
32882: EQUAL
32883: IFTRUE 32887
32885: GO 32898
32887: POP
// bc_type := b_breastwork ; 26 :
32888: LD_ADDR_OWVAR 42
32892: PUSH
32893: LD_INT 31
32895: ST_TO_ADDR
32896: GO 33070
32898: LD_INT 26
32900: DOUBLE
32901: EQUAL
32902: IFTRUE 32906
32904: GO 32917
32906: POP
// bc_type := b_bunker ; 27 :
32907: LD_ADDR_OWVAR 42
32911: PUSH
32912: LD_INT 32
32914: ST_TO_ADDR
32915: GO 33070
32917: LD_INT 27
32919: DOUBLE
32920: EQUAL
32921: IFTRUE 32925
32923: GO 32936
32925: POP
// bc_type := b_turret ; 28 :
32926: LD_ADDR_OWVAR 42
32930: PUSH
32931: LD_INT 33
32933: ST_TO_ADDR
32934: GO 33070
32936: LD_INT 28
32938: DOUBLE
32939: EQUAL
32940: IFTRUE 32944
32942: GO 32955
32944: POP
// bc_type := b_armoury ; 29 :
32945: LD_ADDR_OWVAR 42
32949: PUSH
32950: LD_INT 4
32952: ST_TO_ADDR
32953: GO 33070
32955: LD_INT 29
32957: DOUBLE
32958: EQUAL
32959: IFTRUE 32963
32961: GO 32974
32963: POP
// bc_type := b_barracks ; 30 :
32964: LD_ADDR_OWVAR 42
32968: PUSH
32969: LD_INT 5
32971: ST_TO_ADDR
32972: GO 33070
32974: LD_INT 30
32976: DOUBLE
32977: EQUAL
32978: IFTRUE 32982
32980: GO 32993
32982: POP
// bc_type := b_solar_power ; 31 :
32983: LD_ADDR_OWVAR 42
32987: PUSH
32988: LD_INT 27
32990: ST_TO_ADDR
32991: GO 33070
32993: LD_INT 31
32995: DOUBLE
32996: EQUAL
32997: IFTRUE 33001
32999: GO 33012
33001: POP
// bc_type := b_oil_power ; 32 :
33002: LD_ADDR_OWVAR 42
33006: PUSH
33007: LD_INT 26
33009: ST_TO_ADDR
33010: GO 33070
33012: LD_INT 32
33014: DOUBLE
33015: EQUAL
33016: IFTRUE 33020
33018: GO 33031
33020: POP
// bc_type := b_siberite_power ; 33 :
33021: LD_ADDR_OWVAR 42
33025: PUSH
33026: LD_INT 28
33028: ST_TO_ADDR
33029: GO 33070
33031: LD_INT 33
33033: DOUBLE
33034: EQUAL
33035: IFTRUE 33039
33037: GO 33050
33039: POP
// bc_type := b_oil_mine ; 34 :
33040: LD_ADDR_OWVAR 42
33044: PUSH
33045: LD_INT 29
33047: ST_TO_ADDR
33048: GO 33070
33050: LD_INT 34
33052: DOUBLE
33053: EQUAL
33054: IFTRUE 33058
33056: GO 33069
33058: POP
// bc_type := b_siberite_mine ; end ;
33059: LD_ADDR_OWVAR 42
33063: PUSH
33064: LD_INT 30
33066: ST_TO_ADDR
33067: GO 33070
33069: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33070: LD_ADDR_VAR 0 8
33074: PUSH
33075: LD_VAR 0 5
33079: PPUSH
33080: LD_VAR 0 6
33084: PPUSH
33085: LD_VAR 0 3
33089: PPUSH
33090: CALL_OW 47
33094: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33095: LD_OWVAR 42
33099: PUSH
33100: LD_INT 32
33102: PUSH
33103: LD_INT 33
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: IN
33110: IFFALSE 33126
// PlaceWeaponTurret ( b , weapon ) ;
33112: LD_VAR 0 8
33116: PPUSH
33117: LD_VAR 0 4
33121: PPUSH
33122: CALL_OW 431
// end ;
33126: LD_VAR 0 7
33130: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33131: LD_INT 0
33133: PPUSH
33134: PPUSH
33135: PPUSH
33136: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33137: LD_ADDR_VAR 0 4
33141: PUSH
33142: LD_INT 22
33144: PUSH
33145: LD_OWVAR 2
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 2
33156: PUSH
33157: LD_INT 30
33159: PUSH
33160: LD_INT 0
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 30
33169: PUSH
33170: LD_INT 1
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: LIST
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PPUSH
33186: CALL_OW 69
33190: ST_TO_ADDR
// if not tmp then
33191: LD_VAR 0 4
33195: NOT
33196: IFFALSE 33200
// exit ;
33198: GO 33259
// for i in tmp do
33200: LD_ADDR_VAR 0 2
33204: PUSH
33205: LD_VAR 0 4
33209: PUSH
33210: FOR_IN
33211: IFFALSE 33257
// for j = 1 to 3 do
33213: LD_ADDR_VAR 0 3
33217: PUSH
33218: DOUBLE
33219: LD_INT 1
33221: DEC
33222: ST_TO_ADDR
33223: LD_INT 3
33225: PUSH
33226: FOR_TO
33227: IFFALSE 33253
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33229: LD_VAR 0 2
33233: PPUSH
33234: CALL_OW 274
33238: PPUSH
33239: LD_VAR 0 3
33243: PPUSH
33244: LD_INT 99999
33246: PPUSH
33247: CALL_OW 277
33251: GO 33226
33253: POP
33254: POP
33255: GO 33210
33257: POP
33258: POP
// end ;
33259: LD_VAR 0 1
33263: RET
// export function hHackSetLevel10 ; var i , j ; begin
33264: LD_INT 0
33266: PPUSH
33267: PPUSH
33268: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33269: LD_ADDR_VAR 0 2
33273: PUSH
33274: LD_INT 21
33276: PUSH
33277: LD_INT 1
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PPUSH
33284: CALL_OW 69
33288: PUSH
33289: FOR_IN
33290: IFFALSE 33342
// if IsSelected ( i ) then
33292: LD_VAR 0 2
33296: PPUSH
33297: CALL_OW 306
33301: IFFALSE 33340
// begin for j := 1 to 4 do
33303: LD_ADDR_VAR 0 3
33307: PUSH
33308: DOUBLE
33309: LD_INT 1
33311: DEC
33312: ST_TO_ADDR
33313: LD_INT 4
33315: PUSH
33316: FOR_TO
33317: IFFALSE 33338
// SetSkill ( i , j , 10 ) ;
33319: LD_VAR 0 2
33323: PPUSH
33324: LD_VAR 0 3
33328: PPUSH
33329: LD_INT 10
33331: PPUSH
33332: CALL_OW 237
33336: GO 33316
33338: POP
33339: POP
// end ;
33340: GO 33289
33342: POP
33343: POP
// end ;
33344: LD_VAR 0 1
33348: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33349: LD_INT 0
33351: PPUSH
33352: PPUSH
33353: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33354: LD_ADDR_VAR 0 2
33358: PUSH
33359: LD_INT 22
33361: PUSH
33362: LD_OWVAR 2
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 21
33373: PUSH
33374: LD_INT 1
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PPUSH
33385: CALL_OW 69
33389: PUSH
33390: FOR_IN
33391: IFFALSE 33432
// begin for j := 1 to 4 do
33393: LD_ADDR_VAR 0 3
33397: PUSH
33398: DOUBLE
33399: LD_INT 1
33401: DEC
33402: ST_TO_ADDR
33403: LD_INT 4
33405: PUSH
33406: FOR_TO
33407: IFFALSE 33428
// SetSkill ( i , j , 10 ) ;
33409: LD_VAR 0 2
33413: PPUSH
33414: LD_VAR 0 3
33418: PPUSH
33419: LD_INT 10
33421: PPUSH
33422: CALL_OW 237
33426: GO 33406
33428: POP
33429: POP
// end ;
33430: GO 33390
33432: POP
33433: POP
// end ;
33434: LD_VAR 0 1
33438: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33439: LD_INT 0
33441: PPUSH
// uc_side := your_side ;
33442: LD_ADDR_OWVAR 20
33446: PUSH
33447: LD_OWVAR 2
33451: ST_TO_ADDR
// uc_nation := nation ;
33452: LD_ADDR_OWVAR 21
33456: PUSH
33457: LD_VAR 0 1
33461: ST_TO_ADDR
// InitHc ;
33462: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33466: LD_INT 0
33468: PPUSH
33469: LD_VAR 0 2
33473: PPUSH
33474: LD_VAR 0 3
33478: PPUSH
33479: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33483: LD_VAR 0 4
33487: PPUSH
33488: LD_VAR 0 5
33492: PPUSH
33493: CALL_OW 428
33497: PUSH
33498: LD_INT 0
33500: EQUAL
33501: IFFALSE 33525
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33503: CALL_OW 44
33507: PPUSH
33508: LD_VAR 0 4
33512: PPUSH
33513: LD_VAR 0 5
33517: PPUSH
33518: LD_INT 1
33520: PPUSH
33521: CALL_OW 48
// end ;
33525: LD_VAR 0 6
33529: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33530: LD_INT 0
33532: PPUSH
33533: PPUSH
// uc_side := your_side ;
33534: LD_ADDR_OWVAR 20
33538: PUSH
33539: LD_OWVAR 2
33543: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33544: LD_VAR 0 1
33548: PUSH
33549: LD_INT 1
33551: PUSH
33552: LD_INT 2
33554: PUSH
33555: LD_INT 3
33557: PUSH
33558: LD_INT 4
33560: PUSH
33561: LD_INT 5
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: IN
33571: IFFALSE 33583
// uc_nation := nation_american else
33573: LD_ADDR_OWVAR 21
33577: PUSH
33578: LD_INT 1
33580: ST_TO_ADDR
33581: GO 33626
// if chassis in [ 11 , 12 , 13 , 14 ] then
33583: LD_VAR 0 1
33587: PUSH
33588: LD_INT 11
33590: PUSH
33591: LD_INT 12
33593: PUSH
33594: LD_INT 13
33596: PUSH
33597: LD_INT 14
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: IN
33606: IFFALSE 33618
// uc_nation := nation_arabian else
33608: LD_ADDR_OWVAR 21
33612: PUSH
33613: LD_INT 2
33615: ST_TO_ADDR
33616: GO 33626
// uc_nation := nation_russian ;
33618: LD_ADDR_OWVAR 21
33622: PUSH
33623: LD_INT 3
33625: ST_TO_ADDR
// vc_chassis := chassis ;
33626: LD_ADDR_OWVAR 37
33630: PUSH
33631: LD_VAR 0 1
33635: ST_TO_ADDR
// vc_engine := engine ;
33636: LD_ADDR_OWVAR 39
33640: PUSH
33641: LD_VAR 0 2
33645: ST_TO_ADDR
// vc_control := control ;
33646: LD_ADDR_OWVAR 38
33650: PUSH
33651: LD_VAR 0 3
33655: ST_TO_ADDR
// vc_weapon := weapon ;
33656: LD_ADDR_OWVAR 40
33660: PUSH
33661: LD_VAR 0 4
33665: ST_TO_ADDR
// un := CreateVehicle ;
33666: LD_ADDR_VAR 0 8
33670: PUSH
33671: CALL_OW 45
33675: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33676: LD_VAR 0 8
33680: PPUSH
33681: LD_INT 0
33683: PPUSH
33684: LD_INT 5
33686: PPUSH
33687: CALL_OW 12
33691: PPUSH
33692: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33696: LD_VAR 0 8
33700: PPUSH
33701: LD_VAR 0 5
33705: PPUSH
33706: LD_VAR 0 6
33710: PPUSH
33711: LD_INT 1
33713: PPUSH
33714: CALL_OW 48
// end ;
33718: LD_VAR 0 7
33722: RET
// export hInvincible ; every 1 do
33723: GO 33725
33725: DISABLE
// hInvincible := [ ] ;
33726: LD_ADDR_EXP 120
33730: PUSH
33731: EMPTY
33732: ST_TO_ADDR
33733: END
// every 10 do var i ;
33734: GO 33736
33736: DISABLE
33737: LD_INT 0
33739: PPUSH
// begin enable ;
33740: ENABLE
// if not hInvincible then
33741: LD_EXP 120
33745: NOT
33746: IFFALSE 33750
// exit ;
33748: GO 33794
// for i in hInvincible do
33750: LD_ADDR_VAR 0 1
33754: PUSH
33755: LD_EXP 120
33759: PUSH
33760: FOR_IN
33761: IFFALSE 33792
// if GetLives ( i ) < 1000 then
33763: LD_VAR 0 1
33767: PPUSH
33768: CALL_OW 256
33772: PUSH
33773: LD_INT 1000
33775: LESS
33776: IFFALSE 33790
// SetLives ( i , 1000 ) ;
33778: LD_VAR 0 1
33782: PPUSH
33783: LD_INT 1000
33785: PPUSH
33786: CALL_OW 234
33790: GO 33760
33792: POP
33793: POP
// end ;
33794: PPOPN 1
33796: END
// export function hHackInvincible ; var i ; begin
33797: LD_INT 0
33799: PPUSH
33800: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33801: LD_ADDR_VAR 0 2
33805: PUSH
33806: LD_INT 2
33808: PUSH
33809: LD_INT 21
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 21
33821: PUSH
33822: LD_INT 2
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: LIST
33833: PPUSH
33834: CALL_OW 69
33838: PUSH
33839: FOR_IN
33840: IFFALSE 33901
// if IsSelected ( i ) then
33842: LD_VAR 0 2
33846: PPUSH
33847: CALL_OW 306
33851: IFFALSE 33899
// begin if i in hInvincible then
33853: LD_VAR 0 2
33857: PUSH
33858: LD_EXP 120
33862: IN
33863: IFFALSE 33883
// hInvincible := hInvincible diff i else
33865: LD_ADDR_EXP 120
33869: PUSH
33870: LD_EXP 120
33874: PUSH
33875: LD_VAR 0 2
33879: DIFF
33880: ST_TO_ADDR
33881: GO 33899
// hInvincible := hInvincible union i ;
33883: LD_ADDR_EXP 120
33887: PUSH
33888: LD_EXP 120
33892: PUSH
33893: LD_VAR 0 2
33897: UNION
33898: ST_TO_ADDR
// end ;
33899: GO 33839
33901: POP
33902: POP
// end ;
33903: LD_VAR 0 1
33907: RET
// export function hHackInvisible ; var i , j ; begin
33908: LD_INT 0
33910: PPUSH
33911: PPUSH
33912: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33913: LD_ADDR_VAR 0 2
33917: PUSH
33918: LD_INT 21
33920: PUSH
33921: LD_INT 1
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PPUSH
33928: CALL_OW 69
33932: PUSH
33933: FOR_IN
33934: IFFALSE 33958
// if IsSelected ( i ) then
33936: LD_VAR 0 2
33940: PPUSH
33941: CALL_OW 306
33945: IFFALSE 33956
// ComForceInvisible ( i ) ;
33947: LD_VAR 0 2
33951: PPUSH
33952: CALL_OW 496
33956: GO 33933
33958: POP
33959: POP
// end ;
33960: LD_VAR 0 1
33964: RET
// export function hHackChangeYourSide ; begin
33965: LD_INT 0
33967: PPUSH
// if your_side = 8 then
33968: LD_OWVAR 2
33972: PUSH
33973: LD_INT 8
33975: EQUAL
33976: IFFALSE 33988
// your_side := 0 else
33978: LD_ADDR_OWVAR 2
33982: PUSH
33983: LD_INT 0
33985: ST_TO_ADDR
33986: GO 34002
// your_side := your_side + 1 ;
33988: LD_ADDR_OWVAR 2
33992: PUSH
33993: LD_OWVAR 2
33997: PUSH
33998: LD_INT 1
34000: PLUS
34001: ST_TO_ADDR
// end ;
34002: LD_VAR 0 1
34006: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34007: LD_INT 0
34009: PPUSH
34010: PPUSH
34011: PPUSH
// for i in all_units do
34012: LD_ADDR_VAR 0 2
34016: PUSH
34017: LD_OWVAR 3
34021: PUSH
34022: FOR_IN
34023: IFFALSE 34101
// if IsSelected ( i ) then
34025: LD_VAR 0 2
34029: PPUSH
34030: CALL_OW 306
34034: IFFALSE 34099
// begin j := GetSide ( i ) ;
34036: LD_ADDR_VAR 0 3
34040: PUSH
34041: LD_VAR 0 2
34045: PPUSH
34046: CALL_OW 255
34050: ST_TO_ADDR
// if j = 8 then
34051: LD_VAR 0 3
34055: PUSH
34056: LD_INT 8
34058: EQUAL
34059: IFFALSE 34071
// j := 0 else
34061: LD_ADDR_VAR 0 3
34065: PUSH
34066: LD_INT 0
34068: ST_TO_ADDR
34069: GO 34085
// j := j + 1 ;
34071: LD_ADDR_VAR 0 3
34075: PUSH
34076: LD_VAR 0 3
34080: PUSH
34081: LD_INT 1
34083: PLUS
34084: ST_TO_ADDR
// SetSide ( i , j ) ;
34085: LD_VAR 0 2
34089: PPUSH
34090: LD_VAR 0 3
34094: PPUSH
34095: CALL_OW 235
// end ;
34099: GO 34022
34101: POP
34102: POP
// end ;
34103: LD_VAR 0 1
34107: RET
// export function hHackFog ; begin
34108: LD_INT 0
34110: PPUSH
// FogOff ( true ) ;
34111: LD_INT 1
34113: PPUSH
34114: CALL_OW 344
// end ;
34118: LD_VAR 0 1
34122: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34123: LD_INT 0
34125: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34126: LD_VAR 0 1
34130: PPUSH
34131: LD_VAR 0 2
34135: PPUSH
34136: LD_VAR 0 3
34140: PPUSH
34141: LD_INT 1
34143: PPUSH
34144: LD_INT 1
34146: PPUSH
34147: CALL_OW 483
// CenterOnXY ( x , y ) ;
34151: LD_VAR 0 2
34155: PPUSH
34156: LD_VAR 0 3
34160: PPUSH
34161: CALL_OW 84
// end ;
34165: LD_VAR 0 4
34169: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34170: LD_INT 0
34172: PPUSH
34173: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34174: LD_VAR 0 1
34178: NOT
34179: IFTRUE 34198
34181: PUSH
34182: LD_VAR 0 2
34186: PPUSH
34187: LD_VAR 0 3
34191: PPUSH
34192: CALL_OW 488
34196: NOT
34197: OR
34198: IFTRUE 34233
34200: PUSH
34201: LD_VAR 0 1
34205: PPUSH
34206: CALL_OW 266
34210: PUSH
34211: LD_INT 3
34213: NONEQUAL
34214: IFFALSE 34232
34216: PUSH
34217: LD_VAR 0 1
34221: PPUSH
34222: CALL_OW 247
34226: PUSH
34227: LD_INT 1
34229: EQUAL
34230: NOT
34231: AND
34232: OR
34233: IFFALSE 34237
// exit ;
34235: GO 34519
// if GetType ( factory ) = unit_human then
34237: LD_VAR 0 1
34241: PPUSH
34242: CALL_OW 247
34246: PUSH
34247: LD_INT 1
34249: EQUAL
34250: IFFALSE 34267
// factory := IsInUnit ( factory ) ;
34252: LD_ADDR_VAR 0 1
34256: PUSH
34257: LD_VAR 0 1
34261: PPUSH
34262: CALL_OW 310
34266: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34267: LD_VAR 0 1
34271: PPUSH
34272: CALL_OW 266
34276: PUSH
34277: LD_INT 3
34279: NONEQUAL
34280: IFFALSE 34284
// exit ;
34282: GO 34519
// for i := 1 to Count ( factoryWaypoints ) do
34284: LD_ADDR_VAR 0 5
34288: PUSH
34289: DOUBLE
34290: LD_INT 1
34292: DEC
34293: ST_TO_ADDR
34294: LD_EXP 121
34298: PPUSH
34299: CALL 44223 0 1
34303: PUSH
34304: FOR_TO
34305: IFFALSE 34467
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34307: LD_VAR 0 2
34311: PPUSH
34312: LD_VAR 0 3
34316: PPUSH
34317: CALL_OW 428
34321: PUSH
34322: LD_EXP 121
34326: PUSH
34327: LD_VAR 0 5
34331: ARRAY
34332: PUSH
34333: LD_INT 2
34335: ARRAY
34336: EQUAL
34337: IFFALSE 34369
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34339: LD_ADDR_EXP 121
34343: PUSH
34344: LD_EXP 121
34348: PPUSH
34349: LD_VAR 0 5
34353: PPUSH
34354: CALL_OW 3
34358: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34359: CALL 34524 0 0
// exit ;
34363: POP
34364: POP
34365: GO 34519
// end else
34367: GO 34465
// if factory = factoryWaypoints [ i ] [ 2 ] then
34369: LD_VAR 0 1
34373: PUSH
34374: LD_EXP 121
34378: PUSH
34379: LD_VAR 0 5
34383: ARRAY
34384: PUSH
34385: LD_INT 2
34387: ARRAY
34388: EQUAL
34389: IFFALSE 34465
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34391: LD_ADDR_EXP 121
34395: PUSH
34396: LD_EXP 121
34400: PPUSH
34401: LD_VAR 0 5
34405: PPUSH
34406: CALL_OW 3
34410: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34411: LD_ADDR_EXP 121
34415: PUSH
34416: LD_EXP 121
34420: PPUSH
34421: LD_VAR 0 1
34425: PPUSH
34426: CALL_OW 255
34430: PUSH
34431: LD_VAR 0 1
34435: PUSH
34436: LD_VAR 0 2
34440: PUSH
34441: LD_VAR 0 3
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: PPUSH
34452: CALL 80189 0 2
34456: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34457: CALL 34524 0 0
// exit ;
34461: POP
34462: POP
34463: GO 34519
// end ; end ;
34465: GO 34304
34467: POP
34468: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34469: LD_ADDR_EXP 121
34473: PUSH
34474: LD_EXP 121
34478: PPUSH
34479: LD_VAR 0 1
34483: PPUSH
34484: CALL_OW 255
34488: PUSH
34489: LD_VAR 0 1
34493: PUSH
34494: LD_VAR 0 2
34498: PUSH
34499: LD_VAR 0 3
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: PPUSH
34510: CALL 80189 0 2
34514: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34515: CALL 34524 0 0
// end ;
34519: LD_VAR 0 4
34523: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34524: LD_INT 0
34526: PPUSH
34527: PPUSH
34528: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34529: LD_STRING resetFactoryWaypoint();
34531: PPUSH
34532: CALL_OW 559
// if factoryWaypoints then
34536: LD_EXP 121
34540: IFFALSE 34661
// begin list := factoryWaypoints ;
34542: LD_ADDR_VAR 0 3
34546: PUSH
34547: LD_EXP 121
34551: ST_TO_ADDR
// for i := 1 to list do
34552: LD_ADDR_VAR 0 2
34556: PUSH
34557: DOUBLE
34558: LD_INT 1
34560: DEC
34561: ST_TO_ADDR
34562: LD_VAR 0 3
34566: PUSH
34567: FOR_TO
34568: IFFALSE 34659
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34570: LD_STRING setFactoryWaypointXY(
34572: PUSH
34573: LD_VAR 0 3
34577: PUSH
34578: LD_VAR 0 2
34582: ARRAY
34583: PUSH
34584: LD_INT 1
34586: ARRAY
34587: STR
34588: PUSH
34589: LD_STRING ,
34591: STR
34592: PUSH
34593: LD_VAR 0 3
34597: PUSH
34598: LD_VAR 0 2
34602: ARRAY
34603: PUSH
34604: LD_INT 2
34606: ARRAY
34607: STR
34608: PUSH
34609: LD_STRING ,
34611: STR
34612: PUSH
34613: LD_VAR 0 3
34617: PUSH
34618: LD_VAR 0 2
34622: ARRAY
34623: PUSH
34624: LD_INT 3
34626: ARRAY
34627: STR
34628: PUSH
34629: LD_STRING ,
34631: STR
34632: PUSH
34633: LD_VAR 0 3
34637: PUSH
34638: LD_VAR 0 2
34642: ARRAY
34643: PUSH
34644: LD_INT 4
34646: ARRAY
34647: STR
34648: PUSH
34649: LD_STRING )
34651: STR
34652: PPUSH
34653: CALL_OW 559
34657: GO 34567
34659: POP
34660: POP
// end ; end ;
34661: LD_VAR 0 1
34665: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34666: LD_INT 0
34668: PPUSH
// if HexInfo ( x , y ) = warehouse then
34669: LD_VAR 0 2
34673: PPUSH
34674: LD_VAR 0 3
34678: PPUSH
34679: CALL_OW 428
34683: PUSH
34684: LD_VAR 0 1
34688: EQUAL
34689: IFFALSE 34716
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34691: LD_ADDR_EXP 123
34695: PUSH
34696: LD_EXP 123
34700: PPUSH
34701: LD_VAR 0 1
34705: PPUSH
34706: LD_INT 0
34708: PPUSH
34709: CALL_OW 1
34713: ST_TO_ADDR
34714: GO 34767
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34716: LD_ADDR_EXP 123
34720: PUSH
34721: LD_EXP 123
34725: PPUSH
34726: LD_VAR 0 1
34730: PPUSH
34731: LD_VAR 0 1
34735: PPUSH
34736: CALL_OW 255
34740: PUSH
34741: LD_VAR 0 1
34745: PUSH
34746: LD_VAR 0 2
34750: PUSH
34751: LD_VAR 0 3
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: PPUSH
34762: CALL_OW 1
34766: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34767: CALL 34776 0 0
// end ;
34771: LD_VAR 0 4
34775: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34776: LD_INT 0
34778: PPUSH
34779: PPUSH
34780: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34781: LD_STRING resetWarehouseGatheringPoints();
34783: PPUSH
34784: CALL_OW 559
// if warehouseGatheringPoints then
34788: LD_EXP 123
34792: IFFALSE 34918
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34794: LD_ADDR_VAR 0 3
34798: PUSH
34799: LD_EXP 123
34803: PPUSH
34804: CALL 84123 0 1
34808: ST_TO_ADDR
// for i := 1 to list do
34809: LD_ADDR_VAR 0 2
34813: PUSH
34814: DOUBLE
34815: LD_INT 1
34817: DEC
34818: ST_TO_ADDR
34819: LD_VAR 0 3
34823: PUSH
34824: FOR_TO
34825: IFFALSE 34916
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34827: LD_STRING setWarehouseGatheringPointXY(
34829: PUSH
34830: LD_VAR 0 3
34834: PUSH
34835: LD_VAR 0 2
34839: ARRAY
34840: PUSH
34841: LD_INT 1
34843: ARRAY
34844: STR
34845: PUSH
34846: LD_STRING ,
34848: STR
34849: PUSH
34850: LD_VAR 0 3
34854: PUSH
34855: LD_VAR 0 2
34859: ARRAY
34860: PUSH
34861: LD_INT 2
34863: ARRAY
34864: STR
34865: PUSH
34866: LD_STRING ,
34868: STR
34869: PUSH
34870: LD_VAR 0 3
34874: PUSH
34875: LD_VAR 0 2
34879: ARRAY
34880: PUSH
34881: LD_INT 3
34883: ARRAY
34884: STR
34885: PUSH
34886: LD_STRING ,
34888: STR
34889: PUSH
34890: LD_VAR 0 3
34894: PUSH
34895: LD_VAR 0 2
34899: ARRAY
34900: PUSH
34901: LD_INT 4
34903: ARRAY
34904: STR
34905: PUSH
34906: LD_STRING )
34908: STR
34909: PPUSH
34910: CALL_OW 559
34914: GO 34824
34916: POP
34917: POP
// end ; end ;
34918: LD_VAR 0 1
34922: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34923: LD_EXP 123
34927: IFFALSE 35622
34929: GO 34931
34931: DISABLE
34932: LD_INT 0
34934: PPUSH
34935: PPUSH
34936: PPUSH
34937: PPUSH
34938: PPUSH
34939: PPUSH
34940: PPUSH
34941: PPUSH
34942: PPUSH
// begin enable ;
34943: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34944: LD_ADDR_VAR 0 3
34948: PUSH
34949: LD_EXP 123
34953: PPUSH
34954: CALL 84123 0 1
34958: ST_TO_ADDR
// if not list then
34959: LD_VAR 0 3
34963: NOT
34964: IFFALSE 34968
// exit ;
34966: GO 35622
// for i := 1 to list do
34968: LD_ADDR_VAR 0 1
34972: PUSH
34973: DOUBLE
34974: LD_INT 1
34976: DEC
34977: ST_TO_ADDR
34978: LD_VAR 0 3
34982: PUSH
34983: FOR_TO
34984: IFFALSE 35620
// begin depot := list [ i ] [ 2 ] ;
34986: LD_ADDR_VAR 0 8
34990: PUSH
34991: LD_VAR 0 3
34995: PUSH
34996: LD_VAR 0 1
35000: ARRAY
35001: PUSH
35002: LD_INT 2
35004: ARRAY
35005: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35006: LD_ADDR_VAR 0 5
35010: PUSH
35011: LD_VAR 0 3
35015: PUSH
35016: LD_VAR 0 1
35020: ARRAY
35021: PUSH
35022: LD_INT 1
35024: ARRAY
35025: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35026: LD_VAR 0 8
35030: PPUSH
35031: CALL_OW 301
35035: IFTRUE 35054
35037: PUSH
35038: LD_VAR 0 5
35042: PUSH
35043: LD_VAR 0 8
35047: PPUSH
35048: CALL_OW 255
35052: NONEQUAL
35053: OR
35054: IFFALSE 35083
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35056: LD_ADDR_EXP 123
35060: PUSH
35061: LD_EXP 123
35065: PPUSH
35066: LD_VAR 0 8
35070: PPUSH
35071: LD_INT 0
35073: PPUSH
35074: CALL_OW 1
35078: ST_TO_ADDR
// exit ;
35079: POP
35080: POP
35081: GO 35622
// end ; x := list [ i ] [ 3 ] ;
35083: LD_ADDR_VAR 0 6
35087: PUSH
35088: LD_VAR 0 3
35092: PUSH
35093: LD_VAR 0 1
35097: ARRAY
35098: PUSH
35099: LD_INT 3
35101: ARRAY
35102: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35103: LD_ADDR_VAR 0 7
35107: PUSH
35108: LD_VAR 0 3
35112: PUSH
35113: LD_VAR 0 1
35117: ARRAY
35118: PUSH
35119: LD_INT 4
35121: ARRAY
35122: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35123: LD_ADDR_VAR 0 9
35127: PUSH
35128: LD_VAR 0 6
35132: PPUSH
35133: LD_VAR 0 7
35137: PPUSH
35138: LD_INT 16
35140: PPUSH
35141: CALL 82697 0 3
35145: ST_TO_ADDR
// if not cratesNearbyPoint then
35146: LD_VAR 0 9
35150: NOT
35151: IFFALSE 35157
// exit ;
35153: POP
35154: POP
35155: GO 35622
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35157: LD_ADDR_VAR 0 4
35161: PUSH
35162: LD_INT 22
35164: PUSH
35165: LD_VAR 0 5
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 3
35176: PUSH
35177: LD_INT 60
35179: PUSH
35180: EMPTY
35181: LIST
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 91
35189: PUSH
35190: LD_VAR 0 8
35194: PUSH
35195: LD_INT 6
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 2
35205: PUSH
35206: LD_INT 25
35208: PUSH
35209: LD_INT 2
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 25
35218: PUSH
35219: LD_INT 16
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: LIST
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: PPUSH
35237: CALL_OW 69
35241: PUSH
35242: LD_VAR 0 8
35246: PPUSH
35247: CALL_OW 313
35251: PPUSH
35252: LD_INT 3
35254: PUSH
35255: LD_INT 60
35257: PUSH
35258: EMPTY
35259: LIST
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 2
35267: PUSH
35268: LD_INT 25
35270: PUSH
35271: LD_INT 2
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 25
35280: PUSH
35281: LD_INT 16
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: LIST
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PPUSH
35297: CALL_OW 72
35301: UNION
35302: ST_TO_ADDR
// if tmp then
35303: LD_VAR 0 4
35307: IFFALSE 35387
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35309: LD_ADDR_VAR 0 4
35313: PUSH
35314: LD_VAR 0 4
35318: PPUSH
35319: LD_INT 3
35321: PPUSH
35322: CALL 80504 0 2
35326: ST_TO_ADDR
// for j in tmp do
35327: LD_ADDR_VAR 0 2
35331: PUSH
35332: LD_VAR 0 4
35336: PUSH
35337: FOR_IN
35338: IFFALSE 35381
// begin if IsInUnit ( j ) then
35340: LD_VAR 0 2
35344: PPUSH
35345: CALL_OW 310
35349: IFFALSE 35360
// ComExit ( j ) ;
35351: LD_VAR 0 2
35355: PPUSH
35356: CALL 80587 0 1
// AddComCollect ( j , x , y ) ;
35360: LD_VAR 0 2
35364: PPUSH
35365: LD_VAR 0 6
35369: PPUSH
35370: LD_VAR 0 7
35374: PPUSH
35375: CALL_OW 177
// end ;
35379: GO 35337
35381: POP
35382: POP
// exit ;
35383: POP
35384: POP
35385: GO 35622
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35387: LD_ADDR_VAR 0 4
35391: PUSH
35392: LD_INT 22
35394: PUSH
35395: LD_VAR 0 5
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 91
35406: PUSH
35407: LD_VAR 0 8
35411: PUSH
35412: LD_INT 8
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 2
35422: PUSH
35423: LD_INT 34
35425: PUSH
35426: LD_INT 12
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 34
35435: PUSH
35436: LD_INT 51
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 34
35445: PUSH
35446: LD_INT 32
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 34
35455: PUSH
35456: LD_INT 89
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: LIST
35474: PPUSH
35475: CALL_OW 69
35479: ST_TO_ADDR
// if tmp then
35480: LD_VAR 0 4
35484: IFFALSE 35618
// begin for j in tmp do
35486: LD_ADDR_VAR 0 2
35490: PUSH
35491: LD_VAR 0 4
35495: PUSH
35496: FOR_IN
35497: IFFALSE 35616
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35499: LD_VAR 0 2
35503: PPUSH
35504: CALL_OW 262
35508: PUSH
35509: LD_INT 3
35511: EQUAL
35512: IFTRUE 35529
35514: PUSH
35515: LD_VAR 0 2
35519: PPUSH
35520: CALL_OW 261
35524: PUSH
35525: LD_INT 20
35527: GREATER
35528: OR
35529: IFFALSE 35543
35531: PUSH
35532: LD_VAR 0 2
35536: PPUSH
35537: CALL_OW 314
35541: NOT
35542: AND
35543: IFFALSE 35573
35545: PUSH
35546: LD_VAR 0 2
35550: PPUSH
35551: CALL_OW 263
35555: PUSH
35556: LD_INT 1
35558: NONEQUAL
35559: IFTRUE 35572
35561: PUSH
35562: LD_VAR 0 2
35566: PPUSH
35567: CALL_OW 311
35571: OR
35572: AND
35573: IFFALSE 35614
// begin ComCollect ( j , x , y ) ;
35575: LD_VAR 0 2
35579: PPUSH
35580: LD_VAR 0 6
35584: PPUSH
35585: LD_VAR 0 7
35589: PPUSH
35590: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35594: LD_VAR 0 2
35598: PPUSH
35599: LD_VAR 0 8
35603: PPUSH
35604: CALL_OW 172
// exit ;
35608: POP
35609: POP
35610: POP
35611: POP
35612: GO 35622
// end ;
35614: GO 35496
35616: POP
35617: POP
// end ; end ;
35618: GO 34983
35620: POP
35621: POP
// end ; end_of_file
35622: PPOPN 9
35624: END
// export function SOS_UnitDestroyed ( un ) ; begin
35625: LD_INT 0
35627: PPUSH
// ComRadiation ( un ) ;
35628: LD_VAR 0 1
35632: PPUSH
35633: CALL 36795 0 1
// end ;
35637: LD_VAR 0 2
35641: RET
// export function SOS_UnitKamikazed ( un ) ; begin
35642: LD_INT 0
35644: PPUSH
// ComRadiation ( un ) ;
35645: LD_VAR 0 1
35649: PPUSH
35650: CALL 36795 0 1
// end ;
35654: LD_VAR 0 2
35658: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35659: LD_INT 0
35661: PPUSH
// end ;
35662: LD_VAR 0 4
35666: RET
// export function SOS_Command ( cmd ) ; begin
35667: LD_INT 0
35669: PPUSH
// end ;
35670: LD_VAR 0 2
35674: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35675: LD_INT 0
35677: PPUSH
// end ;
35678: LD_VAR 0 6
35682: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
35683: LD_INT 0
35685: PPUSH
35686: PPUSH
35687: PPUSH
35688: PPUSH
35689: PPUSH
// if not vehicle or not factory then
35690: LD_VAR 0 1
35694: NOT
35695: IFTRUE 35704
35697: PUSH
35698: LD_VAR 0 2
35702: NOT
35703: OR
35704: IFFALSE 35708
// exit ;
35706: GO 36370
// weapon := GetWeapon ( vehicle ) ;
35708: LD_ADDR_VAR 0 7
35712: PUSH
35713: LD_VAR 0 1
35717: PPUSH
35718: CALL_OW 264
35722: ST_TO_ADDR
// if weapon = ar_miner then
35723: LD_VAR 0 7
35727: PUSH
35728: LD_INT 81
35730: EQUAL
35731: IFFALSE 35788
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
35733: LD_ADDR_EXP 132
35737: PUSH
35738: LD_EXP 132
35742: PPUSH
35743: LD_EXP 132
35747: PUSH
35748: LD_INT 1
35750: PLUS
35751: PPUSH
35752: LD_VAR 0 1
35756: PPUSH
35757: CALL_OW 1
35761: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35762: LD_ADDR_EXP 133
35766: PUSH
35767: LD_EXP 133
35771: PPUSH
35772: LD_EXP 133
35776: PUSH
35777: LD_INT 1
35779: PLUS
35780: PPUSH
35781: EMPTY
35782: PPUSH
35783: CALL_OW 1
35787: ST_TO_ADDR
// end ; if not factoryWaypoints then
35788: LD_EXP 121
35792: NOT
35793: IFFALSE 35797
// exit ;
35795: GO 36370
// for i := 1 to Count ( factoryWaypoints ) do
35797: LD_ADDR_VAR 0 4
35801: PUSH
35802: DOUBLE
35803: LD_INT 1
35805: DEC
35806: ST_TO_ADDR
35807: LD_EXP 121
35811: PPUSH
35812: CALL 44223 0 1
35816: PUSH
35817: FOR_TO
35818: IFFALSE 36368
// if factoryWaypoints [ i ] [ 2 ] = factory then
35820: LD_EXP 121
35824: PUSH
35825: LD_VAR 0 4
35829: ARRAY
35830: PUSH
35831: LD_INT 2
35833: ARRAY
35834: PUSH
35835: LD_VAR 0 2
35839: EQUAL
35840: IFFALSE 36366
// begin if GetControl ( vehicle ) = control_manual then
35842: LD_VAR 0 1
35846: PPUSH
35847: CALL_OW 263
35851: PUSH
35852: LD_INT 1
35854: EQUAL
35855: IFFALSE 36219
// begin driver := IsDrivenBy ( vehicle ) ;
35857: LD_ADDR_VAR 0 5
35861: PUSH
35862: LD_VAR 0 1
35866: PPUSH
35867: CALL_OW 311
35871: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
35872: LD_VAR 0 5
35876: PUSH
35877: LD_EXP 122
35881: IN
35882: IFTRUE 35896
35884: PUSH
35885: LD_VAR 0 1
35889: PUSH
35890: LD_EXP 122
35894: IN
35895: OR
35896: IFFALSE 35902
// exit ;
35898: POP
35899: POP
35900: GO 36370
// if not HasTask ( driver ) then
35902: LD_VAR 0 5
35906: PPUSH
35907: CALL_OW 314
35911: NOT
35912: IFFALSE 36217
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
35914: LD_ADDR_EXP 122
35918: PUSH
35919: LD_EXP 122
35923: PPUSH
35924: LD_VAR 0 5
35928: PPUSH
35929: CALL 80189 0 2
35933: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
35934: LD_ADDR_EXP 122
35938: PUSH
35939: LD_EXP 122
35943: PPUSH
35944: LD_VAR 0 1
35948: PPUSH
35949: CALL 80189 0 2
35953: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35954: LD_ADDR_VAR 0 6
35958: PUSH
35959: LD_EXP 121
35963: PUSH
35964: LD_VAR 0 4
35968: ARRAY
35969: PUSH
35970: LD_INT 3
35972: ARRAY
35973: PPUSH
35974: LD_EXP 121
35978: PUSH
35979: LD_VAR 0 4
35983: ARRAY
35984: PUSH
35985: LD_INT 4
35987: ARRAY
35988: PPUSH
35989: CALL_OW 428
35993: ST_TO_ADDR
// if hex then
35994: LD_VAR 0 6
35998: IFFALSE 36016
// ComMoveUnit ( driver , hex ) else
36000: LD_VAR 0 5
36004: PPUSH
36005: LD_VAR 0 6
36009: PPUSH
36010: CALL_OW 112
36014: GO 36100
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
36016: LD_VAR 0 1
36020: PPUSH
36021: LD_EXP 121
36025: PUSH
36026: LD_VAR 0 4
36030: ARRAY
36031: PUSH
36032: LD_INT 3
36034: ARRAY
36035: PPUSH
36036: LD_EXP 121
36040: PUSH
36041: LD_VAR 0 4
36045: ARRAY
36046: PUSH
36047: LD_INT 4
36049: ARRAY
36050: PPUSH
36051: CALL_OW 297
36055: PUSH
36056: LD_INT 0
36058: GREATER
36059: IFFALSE 36100
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36061: LD_VAR 0 5
36065: PPUSH
36066: LD_EXP 121
36070: PUSH
36071: LD_VAR 0 4
36075: ARRAY
36076: PUSH
36077: LD_INT 3
36079: ARRAY
36080: PPUSH
36081: LD_EXP 121
36085: PUSH
36086: LD_VAR 0 4
36090: ARRAY
36091: PUSH
36092: LD_INT 4
36094: ARRAY
36095: PPUSH
36096: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36100: LD_VAR 0 5
36104: PPUSH
36105: CALL_OW 181
// if Multiplayer then
36109: LD_OWVAR 4
36113: IFFALSE 36162
// begin repeat wait ( 10 ) ;
36115: LD_INT 10
36117: PPUSH
36118: CALL_OW 67
// until not IsInUnit ( driver ) ;
36122: LD_VAR 0 5
36126: PPUSH
36127: CALL_OW 310
36131: NOT
36132: IFFALSE 36115
// if not HasTask ( driver ) then
36134: LD_VAR 0 5
36138: PPUSH
36139: CALL_OW 314
36143: NOT
36144: IFFALSE 36160
// ComEnterUnit ( driver , factory ) ;
36146: LD_VAR 0 5
36150: PPUSH
36151: LD_VAR 0 2
36155: PPUSH
36156: CALL_OW 120
// end else
36160: GO 36176
// AddComEnterUnit ( driver , factory ) ;
36162: LD_VAR 0 5
36166: PPUSH
36167: LD_VAR 0 2
36171: PPUSH
36172: CALL_OW 180
// wait ( 0 0$1 ) ;
36176: LD_INT 35
36178: PPUSH
36179: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
36183: LD_ADDR_EXP 122
36187: PUSH
36188: LD_EXP 122
36192: PUSH
36193: LD_VAR 0 5
36197: DIFF
36198: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
36199: LD_ADDR_EXP 122
36203: PUSH
36204: LD_EXP 122
36208: PUSH
36209: LD_VAR 0 1
36213: DIFF
36214: ST_TO_ADDR
// break ;
36215: GO 36368
// end ; end else
36217: GO 36366
// if GetControl ( vehicle ) = control_remote then
36219: LD_VAR 0 1
36223: PPUSH
36224: CALL_OW 263
36228: PUSH
36229: LD_INT 2
36231: EQUAL
36232: IFFALSE 36318
// begin wait ( 0 0$2 ) ;
36234: LD_INT 70
36236: PPUSH
36237: CALL_OW 67
// repeat wait ( 10 ) ;
36241: LD_INT 10
36243: PPUSH
36244: CALL_OW 67
// Connect ( vehicle ) ;
36248: LD_VAR 0 1
36252: PPUSH
36253: CALL 50501 0 1
// until IsControledBy ( vehicle ) ;
36257: LD_VAR 0 1
36261: PPUSH
36262: CALL_OW 312
36266: IFFALSE 36241
// wait ( 10 ) ;
36268: LD_INT 10
36270: PPUSH
36271: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36275: LD_VAR 0 1
36279: PPUSH
36280: LD_EXP 121
36284: PUSH
36285: LD_VAR 0 4
36289: ARRAY
36290: PUSH
36291: LD_INT 3
36293: ARRAY
36294: PPUSH
36295: LD_EXP 121
36299: PUSH
36300: LD_VAR 0 4
36304: ARRAY
36305: PUSH
36306: LD_INT 4
36308: ARRAY
36309: PPUSH
36310: CALL_OW 111
// break ;
36314: GO 36368
// end else
36316: GO 36366
// begin wait ( 0 0$3 ) ;
36318: LD_INT 105
36320: PPUSH
36321: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36325: LD_VAR 0 1
36329: PPUSH
36330: LD_EXP 121
36334: PUSH
36335: LD_VAR 0 4
36339: ARRAY
36340: PUSH
36341: LD_INT 3
36343: ARRAY
36344: PPUSH
36345: LD_EXP 121
36349: PUSH
36350: LD_VAR 0 4
36354: ARRAY
36355: PUSH
36356: LD_INT 4
36358: ARRAY
36359: PPUSH
36360: CALL_OW 111
// break ;
36364: GO 36368
// end ; end ;
36366: GO 35817
36368: POP
36369: POP
// end ;
36370: LD_VAR 0 3
36374: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36375: LD_INT 0
36377: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36378: LD_VAR 0 1
36382: PUSH
36383: LD_INT 250
36385: EQUAL
36386: IFFALSE 36403
36388: PUSH
36389: LD_VAR 0 2
36393: PPUSH
36394: CALL_OW 264
36398: PUSH
36399: LD_INT 81
36401: EQUAL
36402: AND
36403: IFFALSE 36424
// MinerPlaceMine ( unit , x , y ) ;
36405: LD_VAR 0 2
36409: PPUSH
36410: LD_VAR 0 4
36414: PPUSH
36415: LD_VAR 0 5
36419: PPUSH
36420: CALL 39705 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36424: LD_VAR 0 1
36428: PUSH
36429: LD_INT 251
36431: EQUAL
36432: IFFALSE 36449
36434: PUSH
36435: LD_VAR 0 2
36439: PPUSH
36440: CALL_OW 264
36444: PUSH
36445: LD_INT 81
36447: EQUAL
36448: AND
36449: IFFALSE 36470
// MinerDetonateMine ( unit , x , y ) ;
36451: LD_VAR 0 2
36455: PPUSH
36456: LD_VAR 0 4
36460: PPUSH
36461: LD_VAR 0 5
36465: PPUSH
36466: CALL 40112 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36470: LD_VAR 0 1
36474: PUSH
36475: LD_INT 252
36477: EQUAL
36478: IFFALSE 36495
36480: PUSH
36481: LD_VAR 0 2
36485: PPUSH
36486: CALL_OW 264
36490: PUSH
36491: LD_INT 81
36493: EQUAL
36494: AND
36495: IFFALSE 36516
// MinerCreateMinefield ( unit , x , y ) ;
36497: LD_VAR 0 2
36501: PPUSH
36502: LD_VAR 0 4
36506: PPUSH
36507: LD_VAR 0 5
36511: PPUSH
36512: CALL 40344 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36516: LD_VAR 0 1
36520: PUSH
36521: LD_INT 253
36523: EQUAL
36524: IFFALSE 36541
36526: PUSH
36527: LD_VAR 0 2
36531: PPUSH
36532: CALL_OW 257
36536: PUSH
36537: LD_INT 5
36539: EQUAL
36540: AND
36541: IFFALSE 36562
// ComBinocular ( unit , x , y ) ;
36543: LD_VAR 0 2
36547: PPUSH
36548: LD_VAR 0 4
36552: PPUSH
36553: LD_VAR 0 5
36557: PPUSH
36558: CALL 40719 0 3
// if selectedUnit then
36562: LD_VAR 0 3
36566: IFFALSE 36626
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36568: LD_VAR 0 1
36572: PUSH
36573: LD_INT 254
36575: EQUAL
36576: IFFALSE 36593
36578: PUSH
36579: LD_VAR 0 2
36583: PPUSH
36584: CALL_OW 264
36588: PUSH
36589: LD_INT 99
36591: EQUAL
36592: AND
36593: IFFALSE 36610
36595: PUSH
36596: LD_VAR 0 3
36600: PPUSH
36601: CALL_OW 263
36605: PUSH
36606: LD_INT 3
36608: EQUAL
36609: AND
36610: IFFALSE 36626
// HackDestroyVehicle ( unit , selectedUnit ) ;
36612: LD_VAR 0 2
36616: PPUSH
36617: LD_VAR 0 3
36621: PPUSH
36622: CALL 38916 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36626: LD_VAR 0 1
36630: PUSH
36631: LD_INT 255
36633: EQUAL
36634: IFFALSE 36658
36636: PUSH
36637: LD_VAR 0 2
36641: PPUSH
36642: CALL_OW 264
36646: PUSH
36647: LD_INT 14
36649: PUSH
36650: LD_INT 53
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: IN
36657: AND
36658: IFFALSE 36676
36660: PUSH
36661: LD_VAR 0 4
36665: PPUSH
36666: LD_VAR 0 5
36670: PPUSH
36671: CALL_OW 488
36675: AND
36676: IFFALSE 36700
// CutTreeXYR ( unit , x , y , 12 ) ;
36678: LD_VAR 0 2
36682: PPUSH
36683: LD_VAR 0 4
36687: PPUSH
36688: LD_VAR 0 5
36692: PPUSH
36693: LD_INT 12
36695: PPUSH
36696: CALL 36891 0 4
// if cmd = 256 then
36700: LD_VAR 0 1
36704: PUSH
36705: LD_INT 256
36707: EQUAL
36708: IFFALSE 36729
// SetFactoryWaypoint ( unit , x , y ) ;
36710: LD_VAR 0 2
36714: PPUSH
36715: LD_VAR 0 4
36719: PPUSH
36720: LD_VAR 0 5
36724: PPUSH
36725: CALL 34170 0 3
// if cmd = 257 then
36729: LD_VAR 0 1
36733: PUSH
36734: LD_INT 257
36736: EQUAL
36737: IFFALSE 36758
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36739: LD_VAR 0 2
36743: PPUSH
36744: LD_VAR 0 4
36748: PPUSH
36749: LD_VAR 0 5
36753: PPUSH
36754: CALL 34666 0 3
// if cmd = 258 then
36758: LD_VAR 0 1
36762: PUSH
36763: LD_INT 258
36765: EQUAL
36766: IFFALSE 36790
// BurnTreeXYR ( unit , x , y , 8 ) ;
36768: LD_VAR 0 2
36772: PPUSH
36773: LD_VAR 0 4
36777: PPUSH
36778: LD_VAR 0 5
36782: PPUSH
36783: LD_INT 8
36785: PPUSH
36786: CALL 37291 0 4
// end ;
36790: LD_VAR 0 6
36794: RET
// export function ComRadiation ( un ) ; var eff ; begin
36795: LD_INT 0
36797: PPUSH
36798: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
36799: LD_VAR 0 1
36803: PPUSH
36804: CALL_OW 264
36808: PUSH
36809: LD_INT 91
36811: NONEQUAL
36812: IFFALSE 36816
// exit ;
36814: GO 36886
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36816: LD_INT 68
36818: PPUSH
36819: LD_VAR 0 1
36823: PPUSH
36824: CALL_OW 255
36828: PPUSH
36829: CALL_OW 321
36833: PUSH
36834: LD_INT 2
36836: EQUAL
36837: IFFALSE 36849
// eff := 50 else
36839: LD_ADDR_VAR 0 3
36843: PUSH
36844: LD_INT 50
36846: ST_TO_ADDR
36847: GO 36857
// eff := 25 ;
36849: LD_ADDR_VAR 0 3
36853: PUSH
36854: LD_INT 25
36856: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36857: LD_VAR 0 1
36861: PPUSH
36862: CALL_OW 250
36866: PPUSH
36867: LD_VAR 0 1
36871: PPUSH
36872: CALL_OW 251
36876: PPUSH
36877: LD_VAR 0 3
36881: PPUSH
36882: CALL_OW 495
// end ;
36886: LD_VAR 0 2
36890: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36891: LD_INT 0
36893: PPUSH
36894: PPUSH
36895: PPUSH
36896: PPUSH
36897: PPUSH
36898: PPUSH
36899: PPUSH
36900: PPUSH
36901: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36902: LD_VAR 0 1
36906: PPUSH
36907: CALL_OW 302
36911: NOT
36912: IFTRUE 36931
36914: PUSH
36915: LD_VAR 0 2
36919: PPUSH
36920: LD_VAR 0 3
36924: PPUSH
36925: CALL_OW 488
36929: NOT
36930: OR
36931: IFTRUE 36940
36933: PUSH
36934: LD_VAR 0 4
36938: NOT
36939: OR
36940: IFFALSE 36944
// exit ;
36942: GO 37286
// list := [ ] ;
36944: LD_ADDR_VAR 0 13
36948: PUSH
36949: EMPTY
36950: ST_TO_ADDR
// if x - r < 0 then
36951: LD_VAR 0 2
36955: PUSH
36956: LD_VAR 0 4
36960: MINUS
36961: PUSH
36962: LD_INT 0
36964: LESS
36965: IFFALSE 36977
// min_x := 0 else
36967: LD_ADDR_VAR 0 7
36971: PUSH
36972: LD_INT 0
36974: ST_TO_ADDR
36975: GO 36993
// min_x := x - r ;
36977: LD_ADDR_VAR 0 7
36981: PUSH
36982: LD_VAR 0 2
36986: PUSH
36987: LD_VAR 0 4
36991: MINUS
36992: ST_TO_ADDR
// if y - r < 0 then
36993: LD_VAR 0 3
36997: PUSH
36998: LD_VAR 0 4
37002: MINUS
37003: PUSH
37004: LD_INT 0
37006: LESS
37007: IFFALSE 37019
// min_y := 0 else
37009: LD_ADDR_VAR 0 8
37013: PUSH
37014: LD_INT 0
37016: ST_TO_ADDR
37017: GO 37035
// min_y := y - r ;
37019: LD_ADDR_VAR 0 8
37023: PUSH
37024: LD_VAR 0 3
37028: PUSH
37029: LD_VAR 0 4
37033: MINUS
37034: ST_TO_ADDR
// max_x := x + r ;
37035: LD_ADDR_VAR 0 9
37039: PUSH
37040: LD_VAR 0 2
37044: PUSH
37045: LD_VAR 0 4
37049: PLUS
37050: ST_TO_ADDR
// max_y := y + r ;
37051: LD_ADDR_VAR 0 10
37055: PUSH
37056: LD_VAR 0 3
37060: PUSH
37061: LD_VAR 0 4
37065: PLUS
37066: ST_TO_ADDR
// for _x = min_x to max_x do
37067: LD_ADDR_VAR 0 11
37071: PUSH
37072: DOUBLE
37073: LD_VAR 0 7
37077: DEC
37078: ST_TO_ADDR
37079: LD_VAR 0 9
37083: PUSH
37084: FOR_TO
37085: IFFALSE 37204
// for _y = min_y to max_y do
37087: LD_ADDR_VAR 0 12
37091: PUSH
37092: DOUBLE
37093: LD_VAR 0 8
37097: DEC
37098: ST_TO_ADDR
37099: LD_VAR 0 10
37103: PUSH
37104: FOR_TO
37105: IFFALSE 37200
// begin if not ValidHex ( _x , _y ) then
37107: LD_VAR 0 11
37111: PPUSH
37112: LD_VAR 0 12
37116: PPUSH
37117: CALL_OW 488
37121: NOT
37122: IFFALSE 37126
// continue ;
37124: GO 37104
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37126: LD_VAR 0 11
37130: PPUSH
37131: LD_VAR 0 12
37135: PPUSH
37136: CALL_OW 351
37140: IFFALSE 37158
37142: PUSH
37143: LD_VAR 0 11
37147: PPUSH
37148: LD_VAR 0 12
37152: PPUSH
37153: CALL_OW 554
37157: AND
37158: IFFALSE 37198
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37160: LD_ADDR_VAR 0 13
37164: PUSH
37165: LD_VAR 0 13
37169: PPUSH
37170: LD_VAR 0 13
37174: PUSH
37175: LD_INT 1
37177: PLUS
37178: PPUSH
37179: LD_VAR 0 11
37183: PUSH
37184: LD_VAR 0 12
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PPUSH
37193: CALL_OW 2
37197: ST_TO_ADDR
// end ;
37198: GO 37104
37200: POP
37201: POP
37202: GO 37084
37204: POP
37205: POP
// if not list then
37206: LD_VAR 0 13
37210: NOT
37211: IFFALSE 37215
// exit ;
37213: GO 37286
// for i in list do
37215: LD_ADDR_VAR 0 6
37219: PUSH
37220: LD_VAR 0 13
37224: PUSH
37225: FOR_IN
37226: IFFALSE 37284
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37228: LD_VAR 0 1
37232: PPUSH
37233: LD_STRING M
37235: PUSH
37236: LD_VAR 0 6
37240: PUSH
37241: LD_INT 1
37243: ARRAY
37244: PUSH
37245: LD_VAR 0 6
37249: PUSH
37250: LD_INT 2
37252: ARRAY
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: LD_INT 0
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: PUSH
37275: EMPTY
37276: LIST
37277: PPUSH
37278: CALL_OW 447
37282: GO 37225
37284: POP
37285: POP
// end ;
37286: LD_VAR 0 5
37290: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37291: LD_INT 0
37293: PPUSH
37294: PPUSH
37295: PPUSH
37296: PPUSH
37297: PPUSH
37298: PPUSH
37299: PPUSH
37300: PPUSH
37301: PPUSH
37302: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37303: LD_VAR 0 1
37307: PPUSH
37308: CALL_OW 302
37312: NOT
37313: IFTRUE 37332
37315: PUSH
37316: LD_VAR 0 2
37320: PPUSH
37321: LD_VAR 0 3
37325: PPUSH
37326: CALL_OW 488
37330: NOT
37331: OR
37332: IFTRUE 37341
37334: PUSH
37335: LD_VAR 0 4
37339: NOT
37340: OR
37341: IFFALSE 37345
// exit ;
37343: GO 37862
// list := [ ] ;
37345: LD_ADDR_VAR 0 13
37349: PUSH
37350: EMPTY
37351: ST_TO_ADDR
// if x - r < 0 then
37352: LD_VAR 0 2
37356: PUSH
37357: LD_VAR 0 4
37361: MINUS
37362: PUSH
37363: LD_INT 0
37365: LESS
37366: IFFALSE 37378
// min_x := 0 else
37368: LD_ADDR_VAR 0 7
37372: PUSH
37373: LD_INT 0
37375: ST_TO_ADDR
37376: GO 37394
// min_x := x - r ;
37378: LD_ADDR_VAR 0 7
37382: PUSH
37383: LD_VAR 0 2
37387: PUSH
37388: LD_VAR 0 4
37392: MINUS
37393: ST_TO_ADDR
// if y - r < 0 then
37394: LD_VAR 0 3
37398: PUSH
37399: LD_VAR 0 4
37403: MINUS
37404: PUSH
37405: LD_INT 0
37407: LESS
37408: IFFALSE 37420
// min_y := 0 else
37410: LD_ADDR_VAR 0 8
37414: PUSH
37415: LD_INT 0
37417: ST_TO_ADDR
37418: GO 37436
// min_y := y - r ;
37420: LD_ADDR_VAR 0 8
37424: PUSH
37425: LD_VAR 0 3
37429: PUSH
37430: LD_VAR 0 4
37434: MINUS
37435: ST_TO_ADDR
// max_x := x + r ;
37436: LD_ADDR_VAR 0 9
37440: PUSH
37441: LD_VAR 0 2
37445: PUSH
37446: LD_VAR 0 4
37450: PLUS
37451: ST_TO_ADDR
// max_y := y + r ;
37452: LD_ADDR_VAR 0 10
37456: PUSH
37457: LD_VAR 0 3
37461: PUSH
37462: LD_VAR 0 4
37466: PLUS
37467: ST_TO_ADDR
// for _x = min_x to max_x do
37468: LD_ADDR_VAR 0 11
37472: PUSH
37473: DOUBLE
37474: LD_VAR 0 7
37478: DEC
37479: ST_TO_ADDR
37480: LD_VAR 0 9
37484: PUSH
37485: FOR_TO
37486: IFFALSE 37605
// for _y = min_y to max_y do
37488: LD_ADDR_VAR 0 12
37492: PUSH
37493: DOUBLE
37494: LD_VAR 0 8
37498: DEC
37499: ST_TO_ADDR
37500: LD_VAR 0 10
37504: PUSH
37505: FOR_TO
37506: IFFALSE 37601
// begin if not ValidHex ( _x , _y ) then
37508: LD_VAR 0 11
37512: PPUSH
37513: LD_VAR 0 12
37517: PPUSH
37518: CALL_OW 488
37522: NOT
37523: IFFALSE 37527
// continue ;
37525: GO 37505
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37527: LD_VAR 0 11
37531: PPUSH
37532: LD_VAR 0 12
37536: PPUSH
37537: CALL_OW 351
37541: IFFALSE 37559
37543: PUSH
37544: LD_VAR 0 11
37548: PPUSH
37549: LD_VAR 0 12
37553: PPUSH
37554: CALL_OW 554
37558: AND
37559: IFFALSE 37599
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37561: LD_ADDR_VAR 0 13
37565: PUSH
37566: LD_VAR 0 13
37570: PPUSH
37571: LD_VAR 0 13
37575: PUSH
37576: LD_INT 1
37578: PLUS
37579: PPUSH
37580: LD_VAR 0 11
37584: PUSH
37585: LD_VAR 0 12
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PPUSH
37594: CALL_OW 2
37598: ST_TO_ADDR
// end ;
37599: GO 37505
37601: POP
37602: POP
37603: GO 37485
37605: POP
37606: POP
// if not list then
37607: LD_VAR 0 13
37611: NOT
37612: IFFALSE 37616
// exit ;
37614: GO 37862
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37616: LD_ADDR_VAR 0 13
37620: PUSH
37621: LD_VAR 0 1
37625: PPUSH
37626: LD_VAR 0 13
37630: PPUSH
37631: LD_INT 1
37633: PPUSH
37634: LD_INT 1
37636: PPUSH
37637: CALL 47629 0 4
37641: ST_TO_ADDR
// ComStop ( flame ) ;
37642: LD_VAR 0 1
37646: PPUSH
37647: CALL_OW 141
// for i in list do
37651: LD_ADDR_VAR 0 6
37655: PUSH
37656: LD_VAR 0 13
37660: PUSH
37661: FOR_IN
37662: IFFALSE 37693
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37664: LD_VAR 0 1
37668: PPUSH
37669: LD_VAR 0 6
37673: PUSH
37674: LD_INT 1
37676: ARRAY
37677: PPUSH
37678: LD_VAR 0 6
37682: PUSH
37683: LD_INT 2
37685: ARRAY
37686: PPUSH
37687: CALL_OW 176
37691: GO 37661
37693: POP
37694: POP
// repeat wait ( 0 0$1 ) ;
37695: LD_INT 35
37697: PPUSH
37698: CALL_OW 67
// task := GetTaskList ( flame ) ;
37702: LD_ADDR_VAR 0 14
37706: PUSH
37707: LD_VAR 0 1
37711: PPUSH
37712: CALL_OW 437
37716: ST_TO_ADDR
// if not task then
37717: LD_VAR 0 14
37721: NOT
37722: IFFALSE 37726
// exit ;
37724: GO 37862
// if task [ 1 ] [ 1 ] <> | then
37726: LD_VAR 0 14
37730: PUSH
37731: LD_INT 1
37733: ARRAY
37734: PUSH
37735: LD_INT 1
37737: ARRAY
37738: PUSH
37739: LD_STRING |
37741: NONEQUAL
37742: IFFALSE 37746
// exit ;
37744: GO 37862
// _x := task [ 1 ] [ 2 ] ;
37746: LD_ADDR_VAR 0 11
37750: PUSH
37751: LD_VAR 0 14
37755: PUSH
37756: LD_INT 1
37758: ARRAY
37759: PUSH
37760: LD_INT 2
37762: ARRAY
37763: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37764: LD_ADDR_VAR 0 12
37768: PUSH
37769: LD_VAR 0 14
37773: PUSH
37774: LD_INT 1
37776: ARRAY
37777: PUSH
37778: LD_INT 3
37780: ARRAY
37781: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37782: LD_VAR 0 11
37786: PPUSH
37787: LD_VAR 0 12
37791: PPUSH
37792: CALL_OW 351
37796: NOT
37797: IFTRUE 37816
37799: PUSH
37800: LD_VAR 0 11
37804: PPUSH
37805: LD_VAR 0 12
37809: PPUSH
37810: CALL_OW 554
37814: NOT
37815: OR
37816: IFFALSE 37850
// begin task := Delete ( task , 1 ) ;
37818: LD_ADDR_VAR 0 14
37822: PUSH
37823: LD_VAR 0 14
37827: PPUSH
37828: LD_INT 1
37830: PPUSH
37831: CALL_OW 3
37835: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37836: LD_VAR 0 1
37840: PPUSH
37841: LD_VAR 0 14
37845: PPUSH
37846: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37850: LD_VAR 0 1
37854: PPUSH
37855: CALL_OW 314
37859: NOT
37860: IFFALSE 37695
// end ;
37862: LD_VAR 0 5
37866: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37867: LD_EXP 125
37871: NOT
37872: IFFALSE 37922
37874: GO 37876
37876: DISABLE
// begin initHack := true ;
37877: LD_ADDR_EXP 125
37881: PUSH
37882: LD_INT 1
37884: ST_TO_ADDR
// hackTanks := [ ] ;
37885: LD_ADDR_EXP 126
37889: PUSH
37890: EMPTY
37891: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37892: LD_ADDR_EXP 127
37896: PUSH
37897: EMPTY
37898: ST_TO_ADDR
// hackLimit := 3 ;
37899: LD_ADDR_EXP 128
37903: PUSH
37904: LD_INT 3
37906: ST_TO_ADDR
// hackDist := 12 ;
37907: LD_ADDR_EXP 129
37911: PUSH
37912: LD_INT 12
37914: ST_TO_ADDR
// hackCounter := [ ] ;
37915: LD_ADDR_EXP 130
37919: PUSH
37920: EMPTY
37921: ST_TO_ADDR
// end ;
37922: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37923: LD_EXP 125
37927: IFFALSE 37945
37929: PUSH
37930: LD_INT 34
37932: PUSH
37933: LD_INT 99
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PPUSH
37940: CALL_OW 69
37944: AND
37945: IFFALSE 38198
37947: GO 37949
37949: DISABLE
37950: LD_INT 0
37952: PPUSH
37953: PPUSH
// begin enable ;
37954: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37955: LD_ADDR_VAR 0 1
37959: PUSH
37960: LD_INT 34
37962: PUSH
37963: LD_INT 99
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PPUSH
37970: CALL_OW 69
37974: PUSH
37975: FOR_IN
37976: IFFALSE 38196
// begin if not i in hackTanks then
37978: LD_VAR 0 1
37982: PUSH
37983: LD_EXP 126
37987: IN
37988: NOT
37989: IFFALSE 38072
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37991: LD_ADDR_EXP 126
37995: PUSH
37996: LD_EXP 126
38000: PPUSH
38001: LD_EXP 126
38005: PUSH
38006: LD_INT 1
38008: PLUS
38009: PPUSH
38010: LD_VAR 0 1
38014: PPUSH
38015: CALL_OW 1
38019: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38020: LD_ADDR_EXP 127
38024: PUSH
38025: LD_EXP 127
38029: PPUSH
38030: LD_EXP 127
38034: PUSH
38035: LD_INT 1
38037: PLUS
38038: PPUSH
38039: EMPTY
38040: PPUSH
38041: CALL_OW 1
38045: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38046: LD_ADDR_EXP 130
38050: PUSH
38051: LD_EXP 130
38055: PPUSH
38056: LD_EXP 130
38060: PUSH
38061: LD_INT 1
38063: PLUS
38064: PPUSH
38065: EMPTY
38066: PPUSH
38067: CALL_OW 1
38071: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38072: LD_VAR 0 1
38076: PPUSH
38077: CALL_OW 302
38081: NOT
38082: IFFALSE 38095
// begin HackUnlinkAll ( i ) ;
38084: LD_VAR 0 1
38088: PPUSH
38089: CALL 38201 0 1
// continue ;
38093: GO 37975
// end ; HackCheckCapturedStatus ( i ) ;
38095: LD_VAR 0 1
38099: PPUSH
38100: CALL 38646 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38104: LD_ADDR_VAR 0 2
38108: PUSH
38109: LD_INT 81
38111: PUSH
38112: LD_VAR 0 1
38116: PPUSH
38117: CALL_OW 255
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 33
38128: PUSH
38129: LD_INT 3
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 91
38138: PUSH
38139: LD_VAR 0 1
38143: PUSH
38144: LD_EXP 129
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 50
38156: PUSH
38157: EMPTY
38158: LIST
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: PPUSH
38166: CALL_OW 69
38170: ST_TO_ADDR
// if not tmp then
38171: LD_VAR 0 2
38175: NOT
38176: IFFALSE 38180
// continue ;
38178: GO 37975
// HackLink ( i , tmp ) ;
38180: LD_VAR 0 1
38184: PPUSH
38185: LD_VAR 0 2
38189: PPUSH
38190: CALL 38337 0 2
// end ;
38194: GO 37975
38196: POP
38197: POP
// end ;
38198: PPOPN 2
38200: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38201: LD_INT 0
38203: PPUSH
38204: PPUSH
38205: PPUSH
// if not hack in hackTanks then
38206: LD_VAR 0 1
38210: PUSH
38211: LD_EXP 126
38215: IN
38216: NOT
38217: IFFALSE 38221
// exit ;
38219: GO 38332
// index := GetElementIndex ( hackTanks , hack ) ;
38221: LD_ADDR_VAR 0 4
38225: PUSH
38226: LD_EXP 126
38230: PPUSH
38231: LD_VAR 0 1
38235: PPUSH
38236: CALL 46924 0 2
38240: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38241: LD_EXP 127
38245: PUSH
38246: LD_VAR 0 4
38250: ARRAY
38251: IFFALSE 38332
// begin for i in hackTanksCaptured [ index ] do
38253: LD_ADDR_VAR 0 3
38257: PUSH
38258: LD_EXP 127
38262: PUSH
38263: LD_VAR 0 4
38267: ARRAY
38268: PUSH
38269: FOR_IN
38270: IFFALSE 38296
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38272: LD_VAR 0 3
38276: PUSH
38277: LD_INT 1
38279: ARRAY
38280: PPUSH
38281: LD_VAR 0 3
38285: PUSH
38286: LD_INT 2
38288: ARRAY
38289: PPUSH
38290: CALL_OW 235
38294: GO 38269
38296: POP
38297: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38298: LD_ADDR_EXP 127
38302: PUSH
38303: LD_EXP 127
38307: PPUSH
38308: LD_VAR 0 4
38312: PPUSH
38313: EMPTY
38314: PPUSH
38315: CALL_OW 1
38319: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38320: LD_VAR 0 1
38324: PPUSH
38325: LD_INT 0
38327: PPUSH
38328: CALL_OW 505
// end ; end ;
38332: LD_VAR 0 2
38336: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38337: LD_INT 0
38339: PPUSH
38340: PPUSH
38341: PPUSH
// if not hack in hackTanks or not vehicles then
38342: LD_VAR 0 1
38346: PUSH
38347: LD_EXP 126
38351: IN
38352: NOT
38353: IFTRUE 38362
38355: PUSH
38356: LD_VAR 0 2
38360: NOT
38361: OR
38362: IFFALSE 38366
// exit ;
38364: GO 38641
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38366: LD_ADDR_VAR 0 2
38370: PUSH
38371: LD_VAR 0 1
38375: PPUSH
38376: LD_VAR 0 2
38380: PPUSH
38381: LD_INT 1
38383: PPUSH
38384: LD_INT 1
38386: PPUSH
38387: CALL 47576 0 4
38391: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38392: LD_ADDR_VAR 0 5
38396: PUSH
38397: LD_EXP 126
38401: PPUSH
38402: LD_VAR 0 1
38406: PPUSH
38407: CALL 46924 0 2
38411: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38412: LD_EXP 127
38416: PUSH
38417: LD_VAR 0 5
38421: ARRAY
38422: PUSH
38423: LD_EXP 128
38427: LESS
38428: IFFALSE 38617
// begin for i := 1 to vehicles do
38430: LD_ADDR_VAR 0 4
38434: PUSH
38435: DOUBLE
38436: LD_INT 1
38438: DEC
38439: ST_TO_ADDR
38440: LD_VAR 0 2
38444: PUSH
38445: FOR_TO
38446: IFFALSE 38615
// begin if hackTanksCaptured [ index ] = hackLimit then
38448: LD_EXP 127
38452: PUSH
38453: LD_VAR 0 5
38457: ARRAY
38458: PUSH
38459: LD_EXP 128
38463: EQUAL
38464: IFFALSE 38468
// break ;
38466: GO 38615
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38468: LD_ADDR_EXP 130
38472: PUSH
38473: LD_EXP 130
38477: PPUSH
38478: LD_VAR 0 5
38482: PPUSH
38483: LD_EXP 130
38487: PUSH
38488: LD_VAR 0 5
38492: ARRAY
38493: PUSH
38494: LD_INT 1
38496: PLUS
38497: PPUSH
38498: CALL_OW 1
38502: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38503: LD_ADDR_EXP 127
38507: PUSH
38508: LD_EXP 127
38512: PPUSH
38513: LD_VAR 0 5
38517: PUSH
38518: LD_EXP 127
38522: PUSH
38523: LD_VAR 0 5
38527: ARRAY
38528: PUSH
38529: LD_INT 1
38531: PLUS
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PPUSH
38537: LD_VAR 0 2
38541: PUSH
38542: LD_VAR 0 4
38546: ARRAY
38547: PUSH
38548: LD_VAR 0 2
38552: PUSH
38553: LD_VAR 0 4
38557: ARRAY
38558: PPUSH
38559: CALL_OW 255
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PPUSH
38568: CALL 47141 0 3
38572: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38573: LD_VAR 0 2
38577: PUSH
38578: LD_VAR 0 4
38582: ARRAY
38583: PPUSH
38584: LD_VAR 0 1
38588: PPUSH
38589: CALL_OW 255
38593: PPUSH
38594: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38598: LD_VAR 0 2
38602: PUSH
38603: LD_VAR 0 4
38607: ARRAY
38608: PPUSH
38609: CALL_OW 141
// end ;
38613: GO 38445
38615: POP
38616: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38617: LD_VAR 0 1
38621: PPUSH
38622: LD_EXP 127
38626: PUSH
38627: LD_VAR 0 5
38631: ARRAY
38632: PUSH
38633: LD_INT 0
38635: PLUS
38636: PPUSH
38637: CALL_OW 505
// end ;
38641: LD_VAR 0 3
38645: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38646: LD_INT 0
38648: PPUSH
38649: PPUSH
38650: PPUSH
38651: PPUSH
// if not hack in hackTanks then
38652: LD_VAR 0 1
38656: PUSH
38657: LD_EXP 126
38661: IN
38662: NOT
38663: IFFALSE 38667
// exit ;
38665: GO 38911
// index := GetElementIndex ( hackTanks , hack ) ;
38667: LD_ADDR_VAR 0 4
38671: PUSH
38672: LD_EXP 126
38676: PPUSH
38677: LD_VAR 0 1
38681: PPUSH
38682: CALL 46924 0 2
38686: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38687: LD_ADDR_VAR 0 3
38691: PUSH
38692: DOUBLE
38693: LD_EXP 127
38697: PUSH
38698: LD_VAR 0 4
38702: ARRAY
38703: INC
38704: ST_TO_ADDR
38705: LD_INT 1
38707: PUSH
38708: FOR_DOWNTO
38709: IFFALSE 38885
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38711: LD_ADDR_VAR 0 5
38715: PUSH
38716: LD_EXP 127
38720: PUSH
38721: LD_VAR 0 4
38725: ARRAY
38726: PUSH
38727: LD_VAR 0 3
38731: ARRAY
38732: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38733: LD_VAR 0 5
38737: PUSH
38738: LD_INT 1
38740: ARRAY
38741: PPUSH
38742: CALL_OW 302
38746: NOT
38747: IFTRUE 38775
38749: PUSH
38750: LD_VAR 0 5
38754: PUSH
38755: LD_INT 1
38757: ARRAY
38758: PPUSH
38759: CALL_OW 255
38763: PUSH
38764: LD_VAR 0 1
38768: PPUSH
38769: CALL_OW 255
38773: NONEQUAL
38774: OR
38775: IFFALSE 38883
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38777: LD_VAR 0 5
38781: PUSH
38782: LD_INT 1
38784: ARRAY
38785: PPUSH
38786: CALL_OW 305
38790: IFFALSE 38818
38792: PUSH
38793: LD_VAR 0 5
38797: PUSH
38798: LD_INT 1
38800: ARRAY
38801: PPUSH
38802: CALL_OW 255
38806: PUSH
38807: LD_VAR 0 1
38811: PPUSH
38812: CALL_OW 255
38816: EQUAL
38817: AND
38818: IFFALSE 38842
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38820: LD_VAR 0 5
38824: PUSH
38825: LD_INT 1
38827: ARRAY
38828: PPUSH
38829: LD_VAR 0 5
38833: PUSH
38834: LD_INT 2
38836: ARRAY
38837: PPUSH
38838: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38842: LD_ADDR_EXP 127
38846: PUSH
38847: LD_EXP 127
38851: PPUSH
38852: LD_VAR 0 4
38856: PPUSH
38857: LD_EXP 127
38861: PUSH
38862: LD_VAR 0 4
38866: ARRAY
38867: PPUSH
38868: LD_VAR 0 3
38872: PPUSH
38873: CALL_OW 3
38877: PPUSH
38878: CALL_OW 1
38882: ST_TO_ADDR
// end ; end ;
38883: GO 38708
38885: POP
38886: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38887: LD_VAR 0 1
38891: PPUSH
38892: LD_EXP 127
38896: PUSH
38897: LD_VAR 0 4
38901: ARRAY
38902: PUSH
38903: LD_INT 0
38905: PLUS
38906: PPUSH
38907: CALL_OW 505
// end ;
38911: LD_VAR 0 2
38915: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38916: LD_INT 0
38918: PPUSH
38919: PPUSH
38920: PPUSH
38921: PPUSH
// if not hack in hackTanks then
38922: LD_VAR 0 1
38926: PUSH
38927: LD_EXP 126
38931: IN
38932: NOT
38933: IFFALSE 38937
// exit ;
38935: GO 39022
// index := GetElementIndex ( hackTanks , hack ) ;
38937: LD_ADDR_VAR 0 5
38941: PUSH
38942: LD_EXP 126
38946: PPUSH
38947: LD_VAR 0 1
38951: PPUSH
38952: CALL 46924 0 2
38956: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38957: LD_ADDR_VAR 0 4
38961: PUSH
38962: DOUBLE
38963: LD_INT 1
38965: DEC
38966: ST_TO_ADDR
38967: LD_EXP 127
38971: PUSH
38972: LD_VAR 0 5
38976: ARRAY
38977: PUSH
38978: FOR_TO
38979: IFFALSE 39020
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38981: LD_EXP 127
38985: PUSH
38986: LD_VAR 0 5
38990: ARRAY
38991: PUSH
38992: LD_VAR 0 4
38996: ARRAY
38997: PUSH
38998: LD_INT 1
39000: ARRAY
39001: PUSH
39002: LD_VAR 0 2
39006: EQUAL
39007: IFFALSE 39018
// KillUnit ( vehicle ) ;
39009: LD_VAR 0 2
39013: PPUSH
39014: CALL_OW 66
39018: GO 38978
39020: POP
39021: POP
// end ;
39022: LD_VAR 0 3
39026: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
39027: LD_EXP 131
39031: NOT
39032: IFFALSE 39165
39034: GO 39036
39036: DISABLE
39037: LD_INT 0
39039: PPUSH
// begin initMiner := true ;
39040: LD_ADDR_EXP 131
39044: PUSH
39045: LD_INT 1
39047: ST_TO_ADDR
// minersList := [ ] ;
39048: LD_ADDR_EXP 132
39052: PUSH
39053: EMPTY
39054: ST_TO_ADDR
// minerMinesList := [ ] ;
39055: LD_ADDR_EXP 133
39059: PUSH
39060: EMPTY
39061: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
39062: LD_ADDR_EXP 134
39066: PUSH
39067: LD_INT 6
39069: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39070: LD_ADDR_VAR 0 1
39074: PUSH
39075: LD_INT 34
39077: PUSH
39078: LD_INT 81
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PPUSH
39085: CALL_OW 69
39089: PUSH
39090: FOR_IN
39091: IFFALSE 39163
// begin if not i in minersList then
39093: LD_VAR 0 1
39097: PUSH
39098: LD_EXP 132
39102: IN
39103: NOT
39104: IFFALSE 39161
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39106: LD_ADDR_EXP 132
39110: PUSH
39111: LD_EXP 132
39115: PPUSH
39116: LD_EXP 132
39120: PUSH
39121: LD_INT 1
39123: PLUS
39124: PPUSH
39125: LD_VAR 0 1
39129: PPUSH
39130: CALL_OW 1
39134: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39135: LD_ADDR_EXP 133
39139: PUSH
39140: LD_EXP 133
39144: PPUSH
39145: LD_EXP 133
39149: PUSH
39150: LD_INT 1
39152: PLUS
39153: PPUSH
39154: EMPTY
39155: PPUSH
39156: CALL_OW 1
39160: ST_TO_ADDR
// end end ;
39161: GO 39090
39163: POP
39164: POP
// end ;
39165: PPOPN 1
39167: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
39168: LD_EXP 131
39172: IFFALSE 39203
39174: PUSH
39175: LD_EXP 133
39179: PPUSH
39180: CALL 44223 0 1
39184: IFTRUE 39202
39186: PUSH
39187: LD_INT 34
39189: PUSH
39190: LD_INT 81
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PPUSH
39197: CALL_OW 69
39201: OR
39202: AND
39203: IFFALSE 39702
39205: GO 39207
39207: DISABLE
39208: LD_INT 0
39210: PPUSH
39211: PPUSH
39212: PPUSH
39213: PPUSH
// begin enable ;
39214: ENABLE
// for i := minerMinesList downto 1 do
39215: LD_ADDR_VAR 0 1
39219: PUSH
39220: DOUBLE
39221: LD_EXP 133
39225: INC
39226: ST_TO_ADDR
39227: LD_INT 1
39229: PUSH
39230: FOR_DOWNTO
39231: IFFALSE 39700
// begin if IsLive ( minersList [ i ] ) then
39233: LD_EXP 132
39237: PUSH
39238: LD_VAR 0 1
39242: ARRAY
39243: PPUSH
39244: CALL_OW 300
39248: IFFALSE 39281
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
39250: LD_EXP 132
39254: PUSH
39255: LD_VAR 0 1
39259: ARRAY
39260: PPUSH
39261: LD_EXP 133
39265: PUSH
39266: LD_VAR 0 1
39270: ARRAY
39271: PPUSH
39272: CALL 44223 0 1
39276: PPUSH
39277: CALL_OW 505
// if not minerMinesList [ i ] then
39281: LD_EXP 133
39285: PUSH
39286: LD_VAR 0 1
39290: ARRAY
39291: NOT
39292: IFFALSE 39296
// continue ;
39294: GO 39230
// for j := minerMinesList [ i ] downto 1 do
39296: LD_ADDR_VAR 0 2
39300: PUSH
39301: DOUBLE
39302: LD_EXP 133
39306: PUSH
39307: LD_VAR 0 1
39311: ARRAY
39312: INC
39313: ST_TO_ADDR
39314: LD_INT 1
39316: PUSH
39317: FOR_DOWNTO
39318: IFFALSE 39696
// begin side := GetSide ( minersList [ i ] ) ;
39320: LD_ADDR_VAR 0 3
39324: PUSH
39325: LD_EXP 132
39329: PUSH
39330: LD_VAR 0 1
39334: ARRAY
39335: PPUSH
39336: CALL_OW 255
39340: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
39341: LD_EXP 132
39345: PUSH
39346: LD_VAR 0 1
39350: ARRAY
39351: PPUSH
39352: CALL_OW 301
39356: IFTRUE 39376
39358: PUSH
39359: LD_EXP 132
39363: PUSH
39364: LD_VAR 0 1
39368: ARRAY
39369: PPUSH
39370: CALL_OW 305
39374: NOT
39375: OR
39376: IFFALSE 39467
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39378: LD_EXP 133
39382: PUSH
39383: LD_VAR 0 1
39387: ARRAY
39388: PUSH
39389: LD_VAR 0 2
39393: ARRAY
39394: PUSH
39395: LD_INT 1
39397: ARRAY
39398: PPUSH
39399: LD_EXP 133
39403: PUSH
39404: LD_VAR 0 1
39408: ARRAY
39409: PUSH
39410: LD_VAR 0 2
39414: ARRAY
39415: PUSH
39416: LD_INT 2
39418: ARRAY
39419: PPUSH
39420: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39424: LD_ADDR_EXP 133
39428: PUSH
39429: LD_EXP 133
39433: PPUSH
39434: LD_VAR 0 1
39438: PPUSH
39439: LD_EXP 133
39443: PUSH
39444: LD_VAR 0 1
39448: ARRAY
39449: PPUSH
39450: LD_VAR 0 2
39454: PPUSH
39455: CALL_OW 3
39459: PPUSH
39460: CALL_OW 1
39464: ST_TO_ADDR
// continue ;
39465: GO 39317
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39467: LD_ADDR_VAR 0 4
39471: PUSH
39472: LD_EXP 133
39476: PUSH
39477: LD_VAR 0 1
39481: ARRAY
39482: PUSH
39483: LD_VAR 0 2
39487: ARRAY
39488: PUSH
39489: LD_INT 1
39491: ARRAY
39492: PPUSH
39493: LD_EXP 133
39497: PUSH
39498: LD_VAR 0 1
39502: ARRAY
39503: PUSH
39504: LD_VAR 0 2
39508: ARRAY
39509: PUSH
39510: LD_INT 2
39512: ARRAY
39513: PPUSH
39514: CALL_OW 428
39518: ST_TO_ADDR
// if not tmp then
39519: LD_VAR 0 4
39523: NOT
39524: IFFALSE 39528
// continue ;
39526: GO 39317
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39528: LD_VAR 0 4
39532: PUSH
39533: LD_INT 81
39535: PUSH
39536: LD_VAR 0 3
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PPUSH
39545: CALL_OW 69
39549: IN
39550: IFFALSE 39600
39552: PUSH
39553: LD_EXP 133
39557: PUSH
39558: LD_VAR 0 1
39562: ARRAY
39563: PUSH
39564: LD_VAR 0 2
39568: ARRAY
39569: PUSH
39570: LD_INT 1
39572: ARRAY
39573: PPUSH
39574: LD_EXP 133
39578: PUSH
39579: LD_VAR 0 1
39583: ARRAY
39584: PUSH
39585: LD_VAR 0 2
39589: ARRAY
39590: PUSH
39591: LD_INT 2
39593: ARRAY
39594: PPUSH
39595: CALL_OW 458
39599: AND
39600: IFFALSE 39694
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39602: LD_EXP 133
39606: PUSH
39607: LD_VAR 0 1
39611: ARRAY
39612: PUSH
39613: LD_VAR 0 2
39617: ARRAY
39618: PUSH
39619: LD_INT 1
39621: ARRAY
39622: PPUSH
39623: LD_EXP 133
39627: PUSH
39628: LD_VAR 0 1
39632: ARRAY
39633: PUSH
39634: LD_VAR 0 2
39638: ARRAY
39639: PUSH
39640: LD_INT 2
39642: ARRAY
39643: PPUSH
39644: LD_VAR 0 3
39648: PPUSH
39649: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39653: LD_ADDR_EXP 133
39657: PUSH
39658: LD_EXP 133
39662: PPUSH
39663: LD_VAR 0 1
39667: PPUSH
39668: LD_EXP 133
39672: PUSH
39673: LD_VAR 0 1
39677: ARRAY
39678: PPUSH
39679: LD_VAR 0 2
39683: PPUSH
39684: CALL_OW 3
39688: PPUSH
39689: CALL_OW 1
39693: ST_TO_ADDR
// end ; end ;
39694: GO 39317
39696: POP
39697: POP
// end ;
39698: GO 39230
39700: POP
39701: POP
// end ;
39702: PPOPN 4
39704: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
39705: LD_INT 0
39707: PPUSH
39708: PPUSH
39709: PPUSH
39710: PPUSH
// result := false ;
39711: LD_ADDR_VAR 0 4
39715: PUSH
39716: LD_INT 0
39718: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39719: LD_VAR 0 1
39723: PPUSH
39724: CALL_OW 264
39728: PUSH
39729: LD_INT 81
39731: EQUAL
39732: NOT
39733: IFFALSE 39737
// exit ;
39735: GO 40107
// side := GetSide ( unit ) ;
39737: LD_ADDR_VAR 0 6
39741: PUSH
39742: LD_VAR 0 1
39746: PPUSH
39747: CALL_OW 255
39751: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
39752: LD_ADDR_VAR 0 5
39756: PUSH
39757: LD_EXP 132
39761: PPUSH
39762: LD_VAR 0 1
39766: PPUSH
39767: CALL 46924 0 2
39771: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39772: LD_EXP 133
39776: PUSH
39777: LD_VAR 0 5
39781: ARRAY
39782: PUSH
39783: LD_EXP 134
39787: GREATEREQUAL
39788: IFFALSE 39792
// exit ;
39790: GO 40107
// ComMoveXY ( unit , x , y ) ;
39792: LD_VAR 0 1
39796: PPUSH
39797: LD_VAR 0 2
39801: PPUSH
39802: LD_VAR 0 3
39806: PPUSH
39807: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39811: LD_INT 35
39813: PPUSH
39814: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39818: LD_VAR 0 1
39822: PPUSH
39823: LD_VAR 0 2
39827: PPUSH
39828: LD_VAR 0 3
39832: PPUSH
39833: CALL 78970 0 3
39837: NOT
39838: IFFALSE 39851
39840: PUSH
39841: LD_VAR 0 1
39845: PPUSH
39846: CALL_OW 314
39850: AND
39851: IFFALSE 39855
// exit ;
39853: GO 40107
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39855: LD_VAR 0 2
39859: PPUSH
39860: LD_VAR 0 3
39864: PPUSH
39865: CALL_OW 428
39869: PUSH
39870: LD_VAR 0 1
39874: EQUAL
39875: IFFALSE 39889
39877: PUSH
39878: LD_VAR 0 1
39882: PPUSH
39883: CALL_OW 314
39887: NOT
39888: AND
39889: IFFALSE 39811
// if MineAtPos ( x , y ) then
39891: LD_VAR 0 2
39895: PPUSH
39896: LD_VAR 0 3
39900: PPUSH
39901: CALL_OW 458
39905: IFFALSE 39909
// exit ;
39907: GO 40107
// if your_side = side then
39909: LD_OWVAR 2
39913: PUSH
39914: LD_VAR 0 6
39918: EQUAL
39919: IFFALSE 39938
// PlaySoundXY ( x , y , PlantMine ) ;
39921: LD_VAR 0 2
39925: PPUSH
39926: LD_VAR 0 3
39930: PPUSH
39931: LD_STRING PlantMine
39933: PPUSH
39934: CALL_OW 366
// repeat wait ( 1 ) ;
39938: LD_INT 1
39940: PPUSH
39941: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
39945: LD_VAR 0 2
39949: PPUSH
39950: LD_VAR 0 3
39954: PPUSH
39955: LD_VAR 0 6
39959: PPUSH
39960: LD_INT 0
39962: PPUSH
39963: CALL_OW 454
39967: IFFALSE 39938
// if MineAtPos ( x , y ) then
39969: LD_VAR 0 2
39973: PPUSH
39974: LD_VAR 0 3
39978: PPUSH
39979: CALL_OW 458
39983: IFFALSE 40099
// begin for i in minerMinesList [ index ] do
39985: LD_ADDR_VAR 0 7
39989: PUSH
39990: LD_EXP 133
39994: PUSH
39995: LD_VAR 0 5
39999: ARRAY
40000: PUSH
40001: FOR_IN
40002: IFFALSE 40044
// if i [ 1 ] = x and i [ 2 ] = y then
40004: LD_VAR 0 7
40008: PUSH
40009: LD_INT 1
40011: ARRAY
40012: PUSH
40013: LD_VAR 0 2
40017: EQUAL
40018: IFFALSE 40036
40020: PUSH
40021: LD_VAR 0 7
40025: PUSH
40026: LD_INT 2
40028: ARRAY
40029: PUSH
40030: LD_VAR 0 3
40034: EQUAL
40035: AND
40036: IFFALSE 40042
// exit ;
40038: POP
40039: POP
40040: GO 40107
40042: GO 40001
40044: POP
40045: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40046: LD_ADDR_EXP 133
40050: PUSH
40051: LD_EXP 133
40055: PPUSH
40056: LD_VAR 0 5
40060: PUSH
40061: LD_EXP 133
40065: PUSH
40066: LD_VAR 0 5
40070: ARRAY
40071: PUSH
40072: LD_INT 1
40074: PLUS
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PPUSH
40080: LD_VAR 0 2
40084: PUSH
40085: LD_VAR 0 3
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PPUSH
40094: CALL 47141 0 3
40098: ST_TO_ADDR
// end ; result := true ;
40099: LD_ADDR_VAR 0 4
40103: PUSH
40104: LD_INT 1
40106: ST_TO_ADDR
// end ;
40107: LD_VAR 0 4
40111: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40112: LD_INT 0
40114: PPUSH
40115: PPUSH
40116: PPUSH
// if not unit in minersList then
40117: LD_VAR 0 1
40121: PUSH
40122: LD_EXP 132
40126: IN
40127: NOT
40128: IFFALSE 40132
// exit ;
40130: GO 40339
// index := GetElementIndex ( minersList , unit ) ;
40132: LD_ADDR_VAR 0 6
40136: PUSH
40137: LD_EXP 132
40141: PPUSH
40142: LD_VAR 0 1
40146: PPUSH
40147: CALL 46924 0 2
40151: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40152: LD_ADDR_VAR 0 5
40156: PUSH
40157: DOUBLE
40158: LD_EXP 133
40162: PUSH
40163: LD_VAR 0 6
40167: ARRAY
40168: INC
40169: ST_TO_ADDR
40170: LD_INT 1
40172: PUSH
40173: FOR_DOWNTO
40174: IFFALSE 40337
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40176: LD_EXP 133
40180: PUSH
40181: LD_VAR 0 6
40185: ARRAY
40186: PUSH
40187: LD_VAR 0 5
40191: ARRAY
40192: PUSH
40193: LD_INT 1
40195: ARRAY
40196: PPUSH
40197: LD_EXP 133
40201: PUSH
40202: LD_VAR 0 6
40206: ARRAY
40207: PUSH
40208: LD_VAR 0 5
40212: ARRAY
40213: PUSH
40214: LD_INT 2
40216: ARRAY
40217: PPUSH
40218: LD_VAR 0 2
40222: PPUSH
40223: LD_VAR 0 3
40227: PPUSH
40228: CALL_OW 298
40232: PUSH
40233: LD_INT 6
40235: LESS
40236: IFFALSE 40335
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40238: LD_EXP 133
40242: PUSH
40243: LD_VAR 0 6
40247: ARRAY
40248: PUSH
40249: LD_VAR 0 5
40253: ARRAY
40254: PUSH
40255: LD_INT 1
40257: ARRAY
40258: PPUSH
40259: LD_EXP 133
40263: PUSH
40264: LD_VAR 0 6
40268: ARRAY
40269: PUSH
40270: LD_VAR 0 5
40274: ARRAY
40275: PUSH
40276: LD_INT 2
40278: ARRAY
40279: PPUSH
40280: LD_VAR 0 1
40284: PPUSH
40285: CALL_OW 255
40289: PPUSH
40290: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40294: LD_ADDR_EXP 133
40298: PUSH
40299: LD_EXP 133
40303: PPUSH
40304: LD_VAR 0 6
40308: PPUSH
40309: LD_EXP 133
40313: PUSH
40314: LD_VAR 0 6
40318: ARRAY
40319: PPUSH
40320: LD_VAR 0 5
40324: PPUSH
40325: CALL_OW 3
40329: PPUSH
40330: CALL_OW 1
40334: ST_TO_ADDR
// end ; end ;
40335: GO 40173
40337: POP
40338: POP
// end ;
40339: LD_VAR 0 4
40343: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40344: LD_INT 0
40346: PPUSH
40347: PPUSH
40348: PPUSH
40349: PPUSH
40350: PPUSH
40351: PPUSH
40352: PPUSH
40353: PPUSH
40354: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40355: LD_VAR 0 1
40359: PPUSH
40360: CALL_OW 264
40364: PUSH
40365: LD_INT 81
40367: EQUAL
40368: NOT
40369: IFTRUE 40384
40371: PUSH
40372: LD_VAR 0 1
40376: PUSH
40377: LD_EXP 132
40381: IN
40382: NOT
40383: OR
40384: IFFALSE 40388
// exit ;
40386: GO 40714
// index := GetElementIndex ( minersList , unit ) ;
40388: LD_ADDR_VAR 0 6
40392: PUSH
40393: LD_EXP 132
40397: PPUSH
40398: LD_VAR 0 1
40402: PPUSH
40403: CALL 46924 0 2
40407: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40408: LD_ADDR_VAR 0 8
40412: PUSH
40413: LD_EXP 134
40417: PUSH
40418: LD_EXP 133
40422: PUSH
40423: LD_VAR 0 6
40427: ARRAY
40428: MINUS
40429: ST_TO_ADDR
// if not minesFreeAmount then
40430: LD_VAR 0 8
40434: NOT
40435: IFFALSE 40439
// exit ;
40437: GO 40714
// tmp := [ ] ;
40439: LD_ADDR_VAR 0 7
40443: PUSH
40444: EMPTY
40445: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40446: LD_ADDR_VAR 0 5
40450: PUSH
40451: DOUBLE
40452: LD_INT 1
40454: DEC
40455: ST_TO_ADDR
40456: LD_VAR 0 8
40460: PUSH
40461: FOR_TO
40462: IFFALSE 40661
// begin _d := rand ( 0 , 5 ) ;
40464: LD_ADDR_VAR 0 11
40468: PUSH
40469: LD_INT 0
40471: PPUSH
40472: LD_INT 5
40474: PPUSH
40475: CALL_OW 12
40479: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40480: LD_ADDR_VAR 0 12
40484: PUSH
40485: LD_INT 2
40487: PPUSH
40488: LD_INT 6
40490: PPUSH
40491: CALL_OW 12
40495: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40496: LD_ADDR_VAR 0 9
40500: PUSH
40501: LD_VAR 0 2
40505: PPUSH
40506: LD_VAR 0 11
40510: PPUSH
40511: LD_VAR 0 12
40515: PPUSH
40516: CALL_OW 272
40520: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40521: LD_ADDR_VAR 0 10
40525: PUSH
40526: LD_VAR 0 3
40530: PPUSH
40531: LD_VAR 0 11
40535: PPUSH
40536: LD_VAR 0 12
40540: PPUSH
40541: CALL_OW 273
40545: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40546: LD_VAR 0 9
40550: PPUSH
40551: LD_VAR 0 10
40555: PPUSH
40556: CALL_OW 488
40560: IFFALSE 40584
40562: PUSH
40563: LD_VAR 0 9
40567: PUSH
40568: LD_VAR 0 10
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_VAR 0 7
40581: IN
40582: NOT
40583: AND
40584: IFFALSE 40603
40586: PUSH
40587: LD_VAR 0 9
40591: PPUSH
40592: LD_VAR 0 10
40596: PPUSH
40597: CALL_OW 458
40601: NOT
40602: AND
40603: IFFALSE 40645
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40605: LD_ADDR_VAR 0 7
40609: PUSH
40610: LD_VAR 0 7
40614: PPUSH
40615: LD_VAR 0 7
40619: PUSH
40620: LD_INT 1
40622: PLUS
40623: PPUSH
40624: LD_VAR 0 9
40628: PUSH
40629: LD_VAR 0 10
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PPUSH
40638: CALL_OW 1
40642: ST_TO_ADDR
40643: GO 40659
// i := i - 1 ;
40645: LD_ADDR_VAR 0 5
40649: PUSH
40650: LD_VAR 0 5
40654: PUSH
40655: LD_INT 1
40657: MINUS
40658: ST_TO_ADDR
// end ;
40659: GO 40461
40661: POP
40662: POP
// for i in tmp do
40663: LD_ADDR_VAR 0 5
40667: PUSH
40668: LD_VAR 0 7
40672: PUSH
40673: FOR_IN
40674: IFFALSE 40712
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40676: LD_VAR 0 1
40680: PPUSH
40681: LD_VAR 0 5
40685: PUSH
40686: LD_INT 1
40688: ARRAY
40689: PPUSH
40690: LD_VAR 0 5
40694: PUSH
40695: LD_INT 2
40697: ARRAY
40698: PPUSH
40699: CALL 39705 0 3
40703: NOT
40704: IFFALSE 40710
// exit ;
40706: POP
40707: POP
40708: GO 40714
40710: GO 40673
40712: POP
40713: POP
// end ;
40714: LD_VAR 0 4
40718: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
40719: LD_INT 0
40721: PPUSH
40722: PPUSH
40723: PPUSH
40724: PPUSH
40725: PPUSH
40726: PPUSH
40727: PPUSH
40728: PPUSH
40729: PPUSH
// if GetClass ( unit ) <> class_sniper then
40730: LD_VAR 0 1
40734: PPUSH
40735: CALL_OW 257
40739: PUSH
40740: LD_INT 5
40742: NONEQUAL
40743: IFFALSE 40747
// exit ;
40745: GO 41217
// dist := 8 ;
40747: LD_ADDR_VAR 0 5
40751: PUSH
40752: LD_INT 8
40754: ST_TO_ADDR
// viewRange := 12 ;
40755: LD_ADDR_VAR 0 8
40759: PUSH
40760: LD_INT 12
40762: ST_TO_ADDR
// side := GetSide ( unit ) ;
40763: LD_ADDR_VAR 0 6
40767: PUSH
40768: LD_VAR 0 1
40772: PPUSH
40773: CALL_OW 255
40777: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40778: LD_INT 61
40780: PPUSH
40781: LD_VAR 0 6
40785: PPUSH
40786: CALL_OW 321
40790: PUSH
40791: LD_INT 2
40793: EQUAL
40794: IFFALSE 40804
// viewRange := 16 ;
40796: LD_ADDR_VAR 0 8
40800: PUSH
40801: LD_INT 16
40803: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40804: LD_VAR 0 1
40808: PPUSH
40809: LD_VAR 0 2
40813: PPUSH
40814: LD_VAR 0 3
40818: PPUSH
40819: CALL_OW 297
40823: PUSH
40824: LD_VAR 0 5
40828: GREATER
40829: IFFALSE 40908
// begin ComMoveXY ( unit , x , y ) ;
40831: LD_VAR 0 1
40835: PPUSH
40836: LD_VAR 0 2
40840: PPUSH
40841: LD_VAR 0 3
40845: PPUSH
40846: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40850: LD_INT 35
40852: PPUSH
40853: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40857: LD_VAR 0 1
40861: PPUSH
40862: LD_VAR 0 2
40866: PPUSH
40867: LD_VAR 0 3
40871: PPUSH
40872: CALL 78970 0 3
40876: NOT
40877: IFFALSE 40881
// exit ;
40879: GO 41217
// until GetDistUnitXY ( unit , x , y ) < dist ;
40881: LD_VAR 0 1
40885: PPUSH
40886: LD_VAR 0 2
40890: PPUSH
40891: LD_VAR 0 3
40895: PPUSH
40896: CALL_OW 297
40900: PUSH
40901: LD_VAR 0 5
40905: LESS
40906: IFFALSE 40850
// end ; ComTurnXY ( unit , x , y ) ;
40908: LD_VAR 0 1
40912: PPUSH
40913: LD_VAR 0 2
40917: PPUSH
40918: LD_VAR 0 3
40922: PPUSH
40923: CALL_OW 118
// repeat if Multiplayer then
40927: LD_OWVAR 4
40931: IFFALSE 40942
// wait ( 35 ) else
40933: LD_INT 35
40935: PPUSH
40936: CALL_OW 67
40940: GO 40949
// wait ( 5 ) ;
40942: LD_INT 5
40944: PPUSH
40945: CALL_OW 67
// _d := GetDir ( unit ) ;
40949: LD_ADDR_VAR 0 11
40953: PUSH
40954: LD_VAR 0 1
40958: PPUSH
40959: CALL_OW 254
40963: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
40964: LD_ADDR_VAR 0 7
40968: PUSH
40969: LD_VAR 0 1
40973: PPUSH
40974: CALL_OW 250
40978: PPUSH
40979: LD_VAR 0 1
40983: PPUSH
40984: CALL_OW 251
40988: PPUSH
40989: LD_VAR 0 2
40993: PPUSH
40994: LD_VAR 0 3
40998: PPUSH
40999: CALL 81606 0 4
41003: ST_TO_ADDR
// until dir = _d ;
41004: LD_VAR 0 7
41008: PUSH
41009: LD_VAR 0 11
41013: EQUAL
41014: IFFALSE 40927
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
41016: LD_ADDR_VAR 0 9
41020: PUSH
41021: LD_VAR 0 1
41025: PPUSH
41026: CALL_OW 250
41030: PPUSH
41031: LD_VAR 0 7
41035: PPUSH
41036: LD_VAR 0 5
41040: PPUSH
41041: CALL_OW 272
41045: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41046: LD_ADDR_VAR 0 10
41050: PUSH
41051: LD_VAR 0 1
41055: PPUSH
41056: CALL_OW 251
41060: PPUSH
41061: LD_VAR 0 7
41065: PPUSH
41066: LD_VAR 0 5
41070: PPUSH
41071: CALL_OW 273
41075: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41076: LD_VAR 0 9
41080: PPUSH
41081: LD_VAR 0 10
41085: PPUSH
41086: CALL_OW 488
41090: NOT
41091: IFFALSE 41095
// exit ;
41093: GO 41217
// ComAnimCustom ( unit , 1 ) ;
41095: LD_VAR 0 1
41099: PPUSH
41100: LD_INT 1
41102: PPUSH
41103: CALL_OW 592
// p := 0 ;
41107: LD_ADDR_VAR 0 12
41111: PUSH
41112: LD_INT 0
41114: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41115: LD_VAR 0 9
41119: PPUSH
41120: LD_VAR 0 10
41124: PPUSH
41125: LD_VAR 0 6
41129: PPUSH
41130: LD_VAR 0 8
41134: PPUSH
41135: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41139: LD_INT 35
41141: PPUSH
41142: CALL_OW 67
// p := Inc ( p ) ;
41146: LD_ADDR_VAR 0 12
41150: PUSH
41151: LD_VAR 0 12
41155: PPUSH
41156: CALL 81562 0 1
41160: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41161: LD_VAR 0 12
41165: PUSH
41166: LD_INT 3
41168: EQUAL
41169: IFTRUE 41183
41171: PUSH
41172: LD_VAR 0 1
41176: PPUSH
41177: CALL_OW 302
41181: NOT
41182: OR
41183: IFTRUE 41196
41185: PUSH
41186: LD_VAR 0 1
41190: PPUSH
41191: CALL_OW 301
41195: OR
41196: IFFALSE 41139
// RemoveSeeing ( _x , _y , side ) ;
41198: LD_VAR 0 9
41202: PPUSH
41203: LD_VAR 0 10
41207: PPUSH
41208: LD_VAR 0 6
41212: PPUSH
41213: CALL_OW 331
// end ;
41217: LD_VAR 0 4
41221: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
41222: LD_INT 0
41224: PPUSH
41225: PPUSH
41226: PPUSH
41227: PPUSH
41228: PPUSH
41229: PPUSH
41230: PPUSH
41231: PPUSH
41232: PPUSH
41233: PPUSH
41234: PPUSH
// if not unit then
41235: LD_VAR 0 1
41239: NOT
41240: IFFALSE 41244
// exit ;
41242: GO 41515
// side := GetSide ( unit ) ;
41244: LD_ADDR_VAR 0 3
41248: PUSH
41249: LD_VAR 0 1
41253: PPUSH
41254: CALL_OW 255
41258: ST_TO_ADDR
// x := GetX ( unit ) ;
41259: LD_ADDR_VAR 0 5
41263: PUSH
41264: LD_VAR 0 1
41268: PPUSH
41269: CALL_OW 250
41273: ST_TO_ADDR
// y := GetY ( unit ) ;
41274: LD_ADDR_VAR 0 6
41278: PUSH
41279: LD_VAR 0 1
41283: PPUSH
41284: CALL_OW 251
41288: ST_TO_ADDR
// r := 8 ;
41289: LD_ADDR_VAR 0 4
41293: PUSH
41294: LD_INT 8
41296: ST_TO_ADDR
// if x - r < 0 then
41297: LD_VAR 0 5
41301: PUSH
41302: LD_VAR 0 4
41306: MINUS
41307: PUSH
41308: LD_INT 0
41310: LESS
41311: IFFALSE 41323
// min_x := 0 else
41313: LD_ADDR_VAR 0 7
41317: PUSH
41318: LD_INT 0
41320: ST_TO_ADDR
41321: GO 41339
// min_x := x - r ;
41323: LD_ADDR_VAR 0 7
41327: PUSH
41328: LD_VAR 0 5
41332: PUSH
41333: LD_VAR 0 4
41337: MINUS
41338: ST_TO_ADDR
// if y - r < 0 then
41339: LD_VAR 0 6
41343: PUSH
41344: LD_VAR 0 4
41348: MINUS
41349: PUSH
41350: LD_INT 0
41352: LESS
41353: IFFALSE 41365
// min_y := 0 else
41355: LD_ADDR_VAR 0 8
41359: PUSH
41360: LD_INT 0
41362: ST_TO_ADDR
41363: GO 41381
// min_y := y - r ;
41365: LD_ADDR_VAR 0 8
41369: PUSH
41370: LD_VAR 0 6
41374: PUSH
41375: LD_VAR 0 4
41379: MINUS
41380: ST_TO_ADDR
// max_x := x + r ;
41381: LD_ADDR_VAR 0 9
41385: PUSH
41386: LD_VAR 0 5
41390: PUSH
41391: LD_VAR 0 4
41395: PLUS
41396: ST_TO_ADDR
// max_y := y + r ;
41397: LD_ADDR_VAR 0 10
41401: PUSH
41402: LD_VAR 0 6
41406: PUSH
41407: LD_VAR 0 4
41411: PLUS
41412: ST_TO_ADDR
// for _x = min_x to max_x do
41413: LD_ADDR_VAR 0 11
41417: PUSH
41418: DOUBLE
41419: LD_VAR 0 7
41423: DEC
41424: ST_TO_ADDR
41425: LD_VAR 0 9
41429: PUSH
41430: FOR_TO
41431: IFFALSE 41513
// for _y = min_y to max_y do
41433: LD_ADDR_VAR 0 12
41437: PUSH
41438: DOUBLE
41439: LD_VAR 0 8
41443: DEC
41444: ST_TO_ADDR
41445: LD_VAR 0 10
41449: PUSH
41450: FOR_TO
41451: IFFALSE 41509
// begin if not ValidHex ( _x , _y ) then
41453: LD_VAR 0 11
41457: PPUSH
41458: LD_VAR 0 12
41462: PPUSH
41463: CALL_OW 488
41467: NOT
41468: IFFALSE 41472
// continue ;
41470: GO 41450
// if MineAtPos ( _x , _y ) then
41472: LD_VAR 0 11
41476: PPUSH
41477: LD_VAR 0 12
41481: PPUSH
41482: CALL_OW 458
41486: IFFALSE 41507
// ViewMineAtPos ( _x , _y , side ) ;
41488: LD_VAR 0 11
41492: PPUSH
41493: LD_VAR 0 12
41497: PPUSH
41498: LD_VAR 0 3
41502: PPUSH
41503: CALL_OW 457
// end ;
41507: GO 41450
41509: POP
41510: POP
41511: GO 41430
41513: POP
41514: POP
// end ;
41515: LD_VAR 0 2
41519: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
41520: LD_INT 0
41522: PPUSH
41523: PPUSH
41524: PPUSH
41525: PPUSH
41526: PPUSH
41527: PPUSH
// if not units then
41528: LD_VAR 0 1
41532: NOT
41533: IFFALSE 41537
// exit ;
41535: GO 41967
// scaners := [ ] ;
41537: LD_ADDR_VAR 0 6
41541: PUSH
41542: EMPTY
41543: ST_TO_ADDR
// for i in units do
41544: LD_ADDR_VAR 0 3
41548: PUSH
41549: LD_VAR 0 1
41553: PUSH
41554: FOR_IN
41555: IFFALSE 41712
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
41557: LD_VAR 0 3
41561: PPUSH
41562: CALL_OW 264
41566: PUSH
41567: LD_INT 11
41569: NONEQUAL
41570: IFTRUE 41584
41572: PUSH
41573: LD_VAR 0 3
41577: PPUSH
41578: CALL_OW 302
41582: NOT
41583: OR
41584: IFTRUE 41601
41586: PUSH
41587: LD_VAR 0 3
41591: PPUSH
41592: CALL_OW 110
41596: PUSH
41597: LD_INT 502
41599: EQUAL
41600: OR
41601: IFFALSE 41605
// continue ;
41603: GO 41554
// ComStop ( i ) ;
41605: LD_VAR 0 3
41609: PPUSH
41610: CALL_OW 141
// x := GetX ( i ) ;
41614: LD_ADDR_VAR 0 4
41618: PUSH
41619: LD_VAR 0 3
41623: PPUSH
41624: CALL_OW 250
41628: ST_TO_ADDR
// y := GetY ( i ) ;
41629: LD_ADDR_VAR 0 5
41633: PUSH
41634: LD_VAR 0 3
41638: PPUSH
41639: CALL_OW 251
41643: ST_TO_ADDR
// if GetSide ( i ) = your_side then
41644: LD_VAR 0 3
41648: PPUSH
41649: CALL_OW 255
41653: PUSH
41654: LD_OWVAR 2
41658: EQUAL
41659: IFFALSE 41678
// PlaySoundXY ( x , y , mineDetector ) ;
41661: LD_VAR 0 4
41665: PPUSH
41666: LD_VAR 0 5
41670: PPUSH
41671: LD_STRING mineDetector
41673: PPUSH
41674: CALL_OW 366
// scaners := Join ( scaners , i ) ;
41678: LD_ADDR_VAR 0 6
41682: PUSH
41683: LD_VAR 0 6
41687: PPUSH
41688: LD_VAR 0 3
41692: PPUSH
41693: CALL 80189 0 2
41697: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
41698: LD_VAR 0 3
41702: PPUSH
41703: LD_INT 502
41705: PPUSH
41706: CALL_OW 109
// end ;
41710: GO 41554
41712: POP
41713: POP
// if not scaners then
41714: LD_VAR 0 6
41718: NOT
41719: IFFALSE 41723
// exit ;
41721: GO 41967
// wait ( 3 ) ;
41723: LD_INT 3
41725: PPUSH
41726: CALL_OW 67
// timer := 6 ;
41730: LD_ADDR_VAR 0 7
41734: PUSH
41735: LD_INT 6
41737: ST_TO_ADDR
// repeat for i in scaners do
41738: LD_ADDR_VAR 0 3
41742: PUSH
41743: LD_VAR 0 6
41747: PUSH
41748: FOR_IN
41749: IFFALSE 41865
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
41751: LD_VAR 0 3
41755: PPUSH
41756: CALL_OW 302
41760: NOT
41761: IFTRUE 41774
41763: PUSH
41764: LD_VAR 0 3
41768: PPUSH
41769: CALL_OW 314
41773: OR
41774: IFTRUE 41805
41776: PUSH
41777: LD_VAR 0 3
41781: PPUSH
41782: CALL_OW 263
41786: PUSH
41787: LD_INT 1
41789: EQUAL
41790: IFFALSE 41804
41792: PUSH
41793: LD_VAR 0 3
41797: PPUSH
41798: CALL_OW 311
41802: NOT
41803: AND
41804: OR
41805: IFFALSE 41849
// begin SetUnitDisplayNumber ( i , 0 ) ;
41807: LD_VAR 0 3
41811: PPUSH
41812: LD_INT 0
41814: PPUSH
41815: CALL_OW 505
// SetTag ( i , 0 ) ;
41819: LD_VAR 0 3
41823: PPUSH
41824: LD_INT 0
41826: PPUSH
41827: CALL_OW 109
// scaners := scaners diff i ;
41831: LD_ADDR_VAR 0 6
41835: PUSH
41836: LD_VAR 0 6
41840: PUSH
41841: LD_VAR 0 3
41845: DIFF
41846: ST_TO_ADDR
// continue ;
41847: GO 41748
// end ; SetUnitDisplayNumber ( i , timer ) ;
41849: LD_VAR 0 3
41853: PPUSH
41854: LD_VAR 0 7
41858: PPUSH
41859: CALL_OW 505
// end ;
41863: GO 41748
41865: POP
41866: POP
// if not scaners then
41867: LD_VAR 0 6
41871: NOT
41872: IFFALSE 41876
// exit ;
41874: GO 41967
// timer := Dec ( timer ) ;
41876: LD_ADDR_VAR 0 7
41880: PUSH
41881: LD_VAR 0 7
41885: PPUSH
41886: CALL 81584 0 1
41890: ST_TO_ADDR
// wait ( 0 0$1 ) ;
41891: LD_INT 35
41893: PPUSH
41894: CALL_OW 67
// until timer = 0 ;
41898: LD_VAR 0 7
41902: PUSH
41903: LD_INT 0
41905: EQUAL
41906: IFFALSE 41738
// if not scaners then
41908: LD_VAR 0 6
41912: NOT
41913: IFFALSE 41917
// exit ;
41915: GO 41967
// for i in scaners do
41917: LD_ADDR_VAR 0 3
41921: PUSH
41922: LD_VAR 0 6
41926: PUSH
41927: FOR_IN
41928: IFFALSE 41965
// begin SetUnitDisplayNumber ( i , 0 ) ;
41930: LD_VAR 0 3
41934: PPUSH
41935: LD_INT 0
41937: PPUSH
41938: CALL_OW 505
// SetTag ( i , 0 ) ;
41942: LD_VAR 0 3
41946: PPUSH
41947: LD_INT 0
41949: PPUSH
41950: CALL_OW 109
// RevealDetectorMine ( i ) ;
41954: LD_VAR 0 3
41958: PPUSH
41959: CALL 41222 0 1
// end ;
41963: GO 41927
41965: POP
41966: POP
// end ;
41967: LD_VAR 0 2
41971: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
41972: LD_INT 0
41974: PPUSH
// if p1 = mine_detector_mode then
41975: LD_VAR 0 2
41979: PUSH
41980: LD_INT 103
41982: EQUAL
41983: IFFALSE 41994
// DetectMine ( units ) ;
41985: LD_VAR 0 1
41989: PPUSH
41990: CALL 41520 0 1
// end ; end_of_file
41994: LD_VAR 0 7
41998: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41999: LD_INT 0
42001: PPUSH
42002: PPUSH
// if exist_mode then
42003: LD_VAR 0 2
42007: IFFALSE 42053
// begin unit := CreateCharacter ( prefix & ident ) ;
42009: LD_ADDR_VAR 0 5
42013: PUSH
42014: LD_VAR 0 3
42018: PUSH
42019: LD_VAR 0 1
42023: STR
42024: PPUSH
42025: CALL_OW 34
42029: ST_TO_ADDR
// if unit then
42030: LD_VAR 0 5
42034: IFFALSE 42051
// DeleteCharacters ( prefix & ident ) ;
42036: LD_VAR 0 3
42040: PUSH
42041: LD_VAR 0 1
42045: STR
42046: PPUSH
42047: CALL_OW 40
// end else
42051: GO 42068
// unit := NewCharacter ( ident ) ;
42053: LD_ADDR_VAR 0 5
42057: PUSH
42058: LD_VAR 0 1
42062: PPUSH
42063: CALL_OW 25
42067: ST_TO_ADDR
// result := unit ;
42068: LD_ADDR_VAR 0 4
42072: PUSH
42073: LD_VAR 0 5
42077: ST_TO_ADDR
// end ;
42078: LD_VAR 0 4
42082: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
42083: LD_INT 0
42085: PPUSH
42086: PPUSH
// if exist_mode then
42087: LD_VAR 0 2
42091: IFFALSE 42116
// unit := CreateCharacter ( prefix & ident ) else
42093: LD_ADDR_VAR 0 5
42097: PUSH
42098: LD_VAR 0 3
42102: PUSH
42103: LD_VAR 0 1
42107: STR
42108: PPUSH
42109: CALL_OW 34
42113: ST_TO_ADDR
42114: GO 42131
// unit := NewCharacter ( ident ) ;
42116: LD_ADDR_VAR 0 5
42120: PUSH
42121: LD_VAR 0 1
42125: PPUSH
42126: CALL_OW 25
42130: ST_TO_ADDR
// result := unit ;
42131: LD_ADDR_VAR 0 4
42135: PUSH
42136: LD_VAR 0 5
42140: ST_TO_ADDR
// end ;
42141: LD_VAR 0 4
42145: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
42146: LD_INT 0
42148: PPUSH
42149: PPUSH
// if not side or not nation then
42150: LD_VAR 0 1
42154: NOT
42155: IFTRUE 42164
42157: PUSH
42158: LD_VAR 0 2
42162: NOT
42163: OR
42164: IFFALSE 42168
// exit ;
42166: GO 42962
// case nation of nation_american :
42168: LD_VAR 0 2
42172: PUSH
42173: LD_INT 1
42175: DOUBLE
42176: EQUAL
42177: IFTRUE 42181
42179: GO 42403
42181: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
42182: LD_ADDR_VAR 0 4
42186: PUSH
42187: LD_INT 35
42189: PUSH
42190: LD_INT 45
42192: PUSH
42193: LD_INT 46
42195: PUSH
42196: LD_INT 47
42198: PUSH
42199: LD_INT 82
42201: PUSH
42202: LD_INT 83
42204: PUSH
42205: LD_INT 84
42207: PUSH
42208: LD_INT 85
42210: PUSH
42211: LD_INT 86
42213: PUSH
42214: LD_INT 1
42216: PUSH
42217: LD_INT 2
42219: PUSH
42220: LD_INT 6
42222: PUSH
42223: LD_INT 15
42225: PUSH
42226: LD_INT 16
42228: PUSH
42229: LD_INT 7
42231: PUSH
42232: LD_INT 12
42234: PUSH
42235: LD_INT 13
42237: PUSH
42238: LD_INT 10
42240: PUSH
42241: LD_INT 14
42243: PUSH
42244: LD_INT 20
42246: PUSH
42247: LD_INT 21
42249: PUSH
42250: LD_INT 22
42252: PUSH
42253: LD_INT 25
42255: PUSH
42256: LD_INT 32
42258: PUSH
42259: LD_INT 27
42261: PUSH
42262: LD_INT 36
42264: PUSH
42265: LD_INT 69
42267: PUSH
42268: LD_INT 39
42270: PUSH
42271: LD_INT 34
42273: PUSH
42274: LD_INT 40
42276: PUSH
42277: LD_INT 48
42279: PUSH
42280: LD_INT 49
42282: PUSH
42283: LD_INT 50
42285: PUSH
42286: LD_INT 51
42288: PUSH
42289: LD_INT 52
42291: PUSH
42292: LD_INT 53
42294: PUSH
42295: LD_INT 54
42297: PUSH
42298: LD_INT 55
42300: PUSH
42301: LD_INT 56
42303: PUSH
42304: LD_INT 57
42306: PUSH
42307: LD_INT 58
42309: PUSH
42310: LD_INT 59
42312: PUSH
42313: LD_INT 60
42315: PUSH
42316: LD_INT 61
42318: PUSH
42319: LD_INT 62
42321: PUSH
42322: LD_INT 80
42324: PUSH
42325: LD_INT 82
42327: PUSH
42328: LD_INT 83
42330: PUSH
42331: LD_INT 84
42333: PUSH
42334: LD_INT 85
42336: PUSH
42337: LD_INT 86
42339: PUSH
42340: LD_INT 90
42342: PUSH
42343: LD_INT 93
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: ST_TO_ADDR
42401: GO 42884
42403: LD_INT 2
42405: DOUBLE
42406: EQUAL
42407: IFTRUE 42411
42409: GO 42645
42411: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
42412: LD_ADDR_VAR 0 4
42416: PUSH
42417: LD_INT 35
42419: PUSH
42420: LD_INT 45
42422: PUSH
42423: LD_INT 46
42425: PUSH
42426: LD_INT 47
42428: PUSH
42429: LD_INT 82
42431: PUSH
42432: LD_INT 83
42434: PUSH
42435: LD_INT 84
42437: PUSH
42438: LD_INT 85
42440: PUSH
42441: LD_INT 87
42443: PUSH
42444: LD_INT 70
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: LD_INT 11
42452: PUSH
42453: LD_INT 3
42455: PUSH
42456: LD_INT 4
42458: PUSH
42459: LD_INT 5
42461: PUSH
42462: LD_INT 6
42464: PUSH
42465: LD_INT 15
42467: PUSH
42468: LD_INT 18
42470: PUSH
42471: LD_INT 7
42473: PUSH
42474: LD_INT 17
42476: PUSH
42477: LD_INT 8
42479: PUSH
42480: LD_INT 20
42482: PUSH
42483: LD_INT 21
42485: PUSH
42486: LD_INT 22
42488: PUSH
42489: LD_INT 72
42491: PUSH
42492: LD_INT 26
42494: PUSH
42495: LD_INT 69
42497: PUSH
42498: LD_INT 39
42500: PUSH
42501: LD_INT 40
42503: PUSH
42504: LD_INT 41
42506: PUSH
42507: LD_INT 42
42509: PUSH
42510: LD_INT 43
42512: PUSH
42513: LD_INT 48
42515: PUSH
42516: LD_INT 49
42518: PUSH
42519: LD_INT 50
42521: PUSH
42522: LD_INT 51
42524: PUSH
42525: LD_INT 52
42527: PUSH
42528: LD_INT 53
42530: PUSH
42531: LD_INT 54
42533: PUSH
42534: LD_INT 55
42536: PUSH
42537: LD_INT 56
42539: PUSH
42540: LD_INT 60
42542: PUSH
42543: LD_INT 61
42545: PUSH
42546: LD_INT 62
42548: PUSH
42549: LD_INT 66
42551: PUSH
42552: LD_INT 67
42554: PUSH
42555: LD_INT 68
42557: PUSH
42558: LD_INT 81
42560: PUSH
42561: LD_INT 82
42563: PUSH
42564: LD_INT 83
42566: PUSH
42567: LD_INT 84
42569: PUSH
42570: LD_INT 85
42572: PUSH
42573: LD_INT 87
42575: PUSH
42576: LD_INT 88
42578: PUSH
42579: LD_INT 92
42581: PUSH
42582: LD_INT 94
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: ST_TO_ADDR
42643: GO 42884
42645: LD_INT 3
42647: DOUBLE
42648: EQUAL
42649: IFTRUE 42653
42651: GO 42883
42653: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
42654: LD_ADDR_VAR 0 4
42658: PUSH
42659: LD_INT 46
42661: PUSH
42662: LD_INT 47
42664: PUSH
42665: LD_INT 1
42667: PUSH
42668: LD_INT 2
42670: PUSH
42671: LD_INT 82
42673: PUSH
42674: LD_INT 83
42676: PUSH
42677: LD_INT 84
42679: PUSH
42680: LD_INT 85
42682: PUSH
42683: LD_INT 86
42685: PUSH
42686: LD_INT 11
42688: PUSH
42689: LD_INT 9
42691: PUSH
42692: LD_INT 20
42694: PUSH
42695: LD_INT 19
42697: PUSH
42698: LD_INT 21
42700: PUSH
42701: LD_INT 24
42703: PUSH
42704: LD_INT 22
42706: PUSH
42707: LD_INT 25
42709: PUSH
42710: LD_INT 28
42712: PUSH
42713: LD_INT 29
42715: PUSH
42716: LD_INT 30
42718: PUSH
42719: LD_INT 31
42721: PUSH
42722: LD_INT 37
42724: PUSH
42725: LD_INT 38
42727: PUSH
42728: LD_INT 32
42730: PUSH
42731: LD_INT 27
42733: PUSH
42734: LD_INT 33
42736: PUSH
42737: LD_INT 69
42739: PUSH
42740: LD_INT 39
42742: PUSH
42743: LD_INT 34
42745: PUSH
42746: LD_INT 40
42748: PUSH
42749: LD_INT 71
42751: PUSH
42752: LD_INT 23
42754: PUSH
42755: LD_INT 44
42757: PUSH
42758: LD_INT 48
42760: PUSH
42761: LD_INT 49
42763: PUSH
42764: LD_INT 50
42766: PUSH
42767: LD_INT 51
42769: PUSH
42770: LD_INT 52
42772: PUSH
42773: LD_INT 53
42775: PUSH
42776: LD_INT 54
42778: PUSH
42779: LD_INT 55
42781: PUSH
42782: LD_INT 56
42784: PUSH
42785: LD_INT 57
42787: PUSH
42788: LD_INT 58
42790: PUSH
42791: LD_INT 59
42793: PUSH
42794: LD_INT 63
42796: PUSH
42797: LD_INT 64
42799: PUSH
42800: LD_INT 65
42802: PUSH
42803: LD_INT 82
42805: PUSH
42806: LD_INT 83
42808: PUSH
42809: LD_INT 84
42811: PUSH
42812: LD_INT 85
42814: PUSH
42815: LD_INT 86
42817: PUSH
42818: LD_INT 89
42820: PUSH
42821: LD_INT 91
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: ST_TO_ADDR
42881: GO 42884
42883: POP
// if state > - 1 and state < 3 then
42884: LD_VAR 0 3
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: GREATER
42893: IFFALSE 42905
42895: PUSH
42896: LD_VAR 0 3
42900: PUSH
42901: LD_INT 3
42903: LESS
42904: AND
42905: IFFALSE 42962
// for i in result do
42907: LD_ADDR_VAR 0 5
42911: PUSH
42912: LD_VAR 0 4
42916: PUSH
42917: FOR_IN
42918: IFFALSE 42960
// if GetTech ( i , side ) <> state then
42920: LD_VAR 0 5
42924: PPUSH
42925: LD_VAR 0 1
42929: PPUSH
42930: CALL_OW 321
42934: PUSH
42935: LD_VAR 0 3
42939: NONEQUAL
42940: IFFALSE 42958
// result := result diff i ;
42942: LD_ADDR_VAR 0 4
42946: PUSH
42947: LD_VAR 0 4
42951: PUSH
42952: LD_VAR 0 5
42956: DIFF
42957: ST_TO_ADDR
42958: GO 42917
42960: POP
42961: POP
// end ;
42962: LD_VAR 0 4
42966: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42967: LD_INT 0
42969: PPUSH
42970: PPUSH
42971: PPUSH
// result := true ;
42972: LD_ADDR_VAR 0 3
42976: PUSH
42977: LD_INT 1
42979: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42980: LD_ADDR_VAR 0 5
42984: PUSH
42985: LD_VAR 0 2
42989: PPUSH
42990: CALL_OW 480
42994: ST_TO_ADDR
// if not tmp then
42995: LD_VAR 0 5
42999: NOT
43000: IFFALSE 43004
// exit ;
43002: GO 43053
// for i in tmp do
43004: LD_ADDR_VAR 0 4
43008: PUSH
43009: LD_VAR 0 5
43013: PUSH
43014: FOR_IN
43015: IFFALSE 43051
// if GetTech ( i , side ) <> state_researched then
43017: LD_VAR 0 4
43021: PPUSH
43022: LD_VAR 0 1
43026: PPUSH
43027: CALL_OW 321
43031: PUSH
43032: LD_INT 2
43034: NONEQUAL
43035: IFFALSE 43049
// begin result := false ;
43037: LD_ADDR_VAR 0 3
43041: PUSH
43042: LD_INT 0
43044: ST_TO_ADDR
// exit ;
43045: POP
43046: POP
43047: GO 43053
// end ;
43049: GO 43014
43051: POP
43052: POP
// end ;
43053: LD_VAR 0 3
43057: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
43058: LD_INT 0
43060: PPUSH
43061: PPUSH
43062: PPUSH
43063: PPUSH
43064: PPUSH
43065: PPUSH
43066: PPUSH
43067: PPUSH
43068: PPUSH
43069: PPUSH
43070: PPUSH
43071: PPUSH
43072: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
43073: LD_VAR 0 1
43077: NOT
43078: IFTRUE 43095
43080: PUSH
43081: LD_VAR 0 1
43085: PPUSH
43086: CALL_OW 257
43090: PUSH
43091: LD_INT 9
43093: NONEQUAL
43094: OR
43095: IFFALSE 43099
// exit ;
43097: GO 43678
// side := GetSide ( unit ) ;
43099: LD_ADDR_VAR 0 9
43103: PUSH
43104: LD_VAR 0 1
43108: PPUSH
43109: CALL_OW 255
43113: ST_TO_ADDR
// tech_space := tech_spacanom ;
43114: LD_ADDR_VAR 0 12
43118: PUSH
43119: LD_INT 29
43121: ST_TO_ADDR
// tech_time := tech_taurad ;
43122: LD_ADDR_VAR 0 13
43126: PUSH
43127: LD_INT 28
43129: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
43130: LD_ADDR_VAR 0 11
43134: PUSH
43135: LD_VAR 0 1
43139: PPUSH
43140: CALL_OW 310
43144: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
43145: LD_VAR 0 11
43149: PPUSH
43150: CALL_OW 247
43154: PUSH
43155: LD_INT 2
43157: EQUAL
43158: IFFALSE 43162
// exit ;
43160: GO 43678
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43162: LD_ADDR_VAR 0 8
43166: PUSH
43167: LD_INT 81
43169: PUSH
43170: LD_VAR 0 9
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 3
43181: PUSH
43182: LD_INT 21
43184: PUSH
43185: LD_INT 3
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PPUSH
43200: CALL_OW 69
43204: ST_TO_ADDR
// if not tmp then
43205: LD_VAR 0 8
43209: NOT
43210: IFFALSE 43214
// exit ;
43212: GO 43678
// if in_unit then
43214: LD_VAR 0 11
43218: IFFALSE 43242
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43220: LD_ADDR_VAR 0 10
43224: PUSH
43225: LD_VAR 0 8
43229: PPUSH
43230: LD_VAR 0 11
43234: PPUSH
43235: CALL_OW 74
43239: ST_TO_ADDR
43240: GO 43262
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43242: LD_ADDR_VAR 0 10
43246: PUSH
43247: LD_VAR 0 8
43251: PPUSH
43252: LD_VAR 0 1
43256: PPUSH
43257: CALL_OW 74
43261: ST_TO_ADDR
// if not enemy then
43262: LD_VAR 0 10
43266: NOT
43267: IFFALSE 43271
// exit ;
43269: GO 43678
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43271: LD_VAR 0 11
43275: IFFALSE 43297
43277: PUSH
43278: LD_VAR 0 11
43282: PPUSH
43283: LD_VAR 0 10
43287: PPUSH
43288: CALL_OW 296
43292: PUSH
43293: LD_INT 13
43295: GREATER
43296: AND
43297: IFTRUE 43319
43299: PUSH
43300: LD_VAR 0 1
43304: PPUSH
43305: LD_VAR 0 10
43309: PPUSH
43310: CALL_OW 296
43314: PUSH
43315: LD_INT 12
43317: GREATER
43318: OR
43319: IFFALSE 43323
// exit ;
43321: GO 43678
// missile := [ 1 ] ;
43323: LD_ADDR_VAR 0 14
43327: PUSH
43328: LD_INT 1
43330: PUSH
43331: EMPTY
43332: LIST
43333: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43334: LD_VAR 0 9
43338: PPUSH
43339: LD_VAR 0 12
43343: PPUSH
43344: CALL_OW 325
43348: IFFALSE 43377
// missile := Replace ( missile , missile + 1 , 2 ) ;
43350: LD_ADDR_VAR 0 14
43354: PUSH
43355: LD_VAR 0 14
43359: PPUSH
43360: LD_VAR 0 14
43364: PUSH
43365: LD_INT 1
43367: PLUS
43368: PPUSH
43369: LD_INT 2
43371: PPUSH
43372: CALL_OW 1
43376: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43377: LD_VAR 0 9
43381: PPUSH
43382: LD_VAR 0 13
43386: PPUSH
43387: CALL_OW 325
43391: IFFALSE 43415
43393: PUSH
43394: LD_VAR 0 10
43398: PPUSH
43399: CALL_OW 255
43403: PPUSH
43404: LD_VAR 0 13
43408: PPUSH
43409: CALL_OW 325
43413: NOT
43414: AND
43415: IFFALSE 43444
// missile := Replace ( missile , missile + 1 , 3 ) ;
43417: LD_ADDR_VAR 0 14
43421: PUSH
43422: LD_VAR 0 14
43426: PPUSH
43427: LD_VAR 0 14
43431: PUSH
43432: LD_INT 1
43434: PLUS
43435: PPUSH
43436: LD_INT 3
43438: PPUSH
43439: CALL_OW 1
43443: ST_TO_ADDR
// if missile < 2 then
43444: LD_VAR 0 14
43448: PUSH
43449: LD_INT 2
43451: LESS
43452: IFFALSE 43456
// exit ;
43454: GO 43678
// x := GetX ( enemy ) ;
43456: LD_ADDR_VAR 0 4
43460: PUSH
43461: LD_VAR 0 10
43465: PPUSH
43466: CALL_OW 250
43470: ST_TO_ADDR
// y := GetY ( enemy ) ;
43471: LD_ADDR_VAR 0 5
43475: PUSH
43476: LD_VAR 0 10
43480: PPUSH
43481: CALL_OW 251
43485: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43486: LD_ADDR_VAR 0 6
43490: PUSH
43491: LD_VAR 0 4
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PPUSH
43500: LD_INT 1
43502: PPUSH
43503: CALL_OW 12
43507: PLUS
43508: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43509: LD_ADDR_VAR 0 7
43513: PUSH
43514: LD_VAR 0 5
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PPUSH
43523: LD_INT 1
43525: PPUSH
43526: CALL_OW 12
43530: PLUS
43531: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43532: LD_VAR 0 6
43536: PPUSH
43537: LD_VAR 0 7
43541: PPUSH
43542: CALL_OW 488
43546: NOT
43547: IFFALSE 43569
// begin _x := x ;
43549: LD_ADDR_VAR 0 6
43553: PUSH
43554: LD_VAR 0 4
43558: ST_TO_ADDR
// _y := y ;
43559: LD_ADDR_VAR 0 7
43563: PUSH
43564: LD_VAR 0 5
43568: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43569: LD_ADDR_VAR 0 3
43573: PUSH
43574: LD_INT 1
43576: PPUSH
43577: LD_VAR 0 14
43581: PPUSH
43582: CALL_OW 12
43586: ST_TO_ADDR
// case i of 1 :
43587: LD_VAR 0 3
43591: PUSH
43592: LD_INT 1
43594: DOUBLE
43595: EQUAL
43596: IFTRUE 43600
43598: GO 43617
43600: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43601: LD_VAR 0 1
43605: PPUSH
43606: LD_VAR 0 10
43610: PPUSH
43611: CALL_OW 115
43615: GO 43678
43617: LD_INT 2
43619: DOUBLE
43620: EQUAL
43621: IFTRUE 43625
43623: GO 43647
43625: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43626: LD_VAR 0 1
43630: PPUSH
43631: LD_VAR 0 6
43635: PPUSH
43636: LD_VAR 0 7
43640: PPUSH
43641: CALL_OW 153
43645: GO 43678
43647: LD_INT 3
43649: DOUBLE
43650: EQUAL
43651: IFTRUE 43655
43653: GO 43677
43655: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43656: LD_VAR 0 1
43660: PPUSH
43661: LD_VAR 0 6
43665: PPUSH
43666: LD_VAR 0 7
43670: PPUSH
43671: CALL_OW 154
43675: GO 43678
43677: POP
// end ;
43678: LD_VAR 0 2
43682: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43683: LD_INT 0
43685: PPUSH
43686: PPUSH
43687: PPUSH
43688: PPUSH
43689: PPUSH
43690: PPUSH
// if not unit or not building then
43691: LD_VAR 0 1
43695: NOT
43696: IFTRUE 43705
43698: PUSH
43699: LD_VAR 0 2
43703: NOT
43704: OR
43705: IFFALSE 43709
// exit ;
43707: GO 43867
// x := GetX ( building ) ;
43709: LD_ADDR_VAR 0 5
43713: PUSH
43714: LD_VAR 0 2
43718: PPUSH
43719: CALL_OW 250
43723: ST_TO_ADDR
// y := GetY ( building ) ;
43724: LD_ADDR_VAR 0 6
43728: PUSH
43729: LD_VAR 0 2
43733: PPUSH
43734: CALL_OW 251
43738: ST_TO_ADDR
// for i := 0 to 5 do
43739: LD_ADDR_VAR 0 4
43743: PUSH
43744: DOUBLE
43745: LD_INT 0
43747: DEC
43748: ST_TO_ADDR
43749: LD_INT 5
43751: PUSH
43752: FOR_TO
43753: IFFALSE 43865
// begin _x := ShiftX ( x , i , 3 ) ;
43755: LD_ADDR_VAR 0 7
43759: PUSH
43760: LD_VAR 0 5
43764: PPUSH
43765: LD_VAR 0 4
43769: PPUSH
43770: LD_INT 3
43772: PPUSH
43773: CALL_OW 272
43777: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43778: LD_ADDR_VAR 0 8
43782: PUSH
43783: LD_VAR 0 6
43787: PPUSH
43788: LD_VAR 0 4
43792: PPUSH
43793: LD_INT 3
43795: PPUSH
43796: CALL_OW 273
43800: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43801: LD_VAR 0 7
43805: PPUSH
43806: LD_VAR 0 8
43810: PPUSH
43811: CALL_OW 488
43815: NOT
43816: IFFALSE 43820
// continue ;
43818: GO 43752
// if HexInfo ( _x , _y ) = 0 then
43820: LD_VAR 0 7
43824: PPUSH
43825: LD_VAR 0 8
43829: PPUSH
43830: CALL_OW 428
43834: PUSH
43835: LD_INT 0
43837: EQUAL
43838: IFFALSE 43863
// begin ComMoveXY ( unit , _x , _y ) ;
43840: LD_VAR 0 1
43844: PPUSH
43845: LD_VAR 0 7
43849: PPUSH
43850: LD_VAR 0 8
43854: PPUSH
43855: CALL_OW 111
// exit ;
43859: POP
43860: POP
43861: GO 43867
// end ; end ;
43863: GO 43752
43865: POP
43866: POP
// end ;
43867: LD_VAR 0 3
43871: RET
// export function ScanBase ( side , base_area ) ; begin
43872: LD_INT 0
43874: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43875: LD_ADDR_VAR 0 3
43879: PUSH
43880: LD_VAR 0 2
43884: PPUSH
43885: LD_INT 81
43887: PUSH
43888: LD_VAR 0 1
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PPUSH
43897: CALL_OW 70
43901: ST_TO_ADDR
// end ;
43902: LD_VAR 0 3
43906: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43907: LD_INT 0
43909: PPUSH
43910: PPUSH
43911: PPUSH
43912: PPUSH
// result := false ;
43913: LD_ADDR_VAR 0 2
43917: PUSH
43918: LD_INT 0
43920: ST_TO_ADDR
// side := GetSide ( unit ) ;
43921: LD_ADDR_VAR 0 3
43925: PUSH
43926: LD_VAR 0 1
43930: PPUSH
43931: CALL_OW 255
43935: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43936: LD_ADDR_VAR 0 4
43940: PUSH
43941: LD_VAR 0 1
43945: PPUSH
43946: CALL_OW 248
43950: ST_TO_ADDR
// case nat of 1 :
43951: LD_VAR 0 4
43955: PUSH
43956: LD_INT 1
43958: DOUBLE
43959: EQUAL
43960: IFTRUE 43964
43962: GO 43975
43964: POP
// tech := tech_lassight ; 2 :
43965: LD_ADDR_VAR 0 5
43969: PUSH
43970: LD_INT 12
43972: ST_TO_ADDR
43973: GO 44014
43975: LD_INT 2
43977: DOUBLE
43978: EQUAL
43979: IFTRUE 43983
43981: GO 43994
43983: POP
// tech := tech_mortar ; 3 :
43984: LD_ADDR_VAR 0 5
43988: PUSH
43989: LD_INT 41
43991: ST_TO_ADDR
43992: GO 44014
43994: LD_INT 3
43996: DOUBLE
43997: EQUAL
43998: IFTRUE 44002
44000: GO 44013
44002: POP
// tech := tech_bazooka ; end ;
44003: LD_ADDR_VAR 0 5
44007: PUSH
44008: LD_INT 44
44010: ST_TO_ADDR
44011: GO 44014
44013: POP
// if Researched ( side , tech ) then
44014: LD_VAR 0 3
44018: PPUSH
44019: LD_VAR 0 5
44023: PPUSH
44024: CALL_OW 325
44028: IFFALSE 44055
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
44030: LD_ADDR_VAR 0 2
44034: PUSH
44035: LD_INT 5
44037: PUSH
44038: LD_INT 8
44040: PUSH
44041: LD_INT 9
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: LIST
44048: PUSH
44049: LD_VAR 0 4
44053: ARRAY
44054: ST_TO_ADDR
// end ;
44055: LD_VAR 0 2
44059: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
44060: LD_INT 0
44062: PPUSH
44063: PPUSH
44064: PPUSH
// if not mines then
44065: LD_VAR 0 2
44069: NOT
44070: IFFALSE 44074
// exit ;
44072: GO 44218
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44074: LD_ADDR_VAR 0 5
44078: PUSH
44079: LD_INT 81
44081: PUSH
44082: LD_VAR 0 1
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 3
44093: PUSH
44094: LD_INT 21
44096: PUSH
44097: LD_INT 3
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PPUSH
44112: CALL_OW 69
44116: ST_TO_ADDR
// for i in mines do
44117: LD_ADDR_VAR 0 4
44121: PUSH
44122: LD_VAR 0 2
44126: PUSH
44127: FOR_IN
44128: IFFALSE 44216
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
44130: LD_VAR 0 4
44134: PUSH
44135: LD_INT 1
44137: ARRAY
44138: PPUSH
44139: LD_VAR 0 4
44143: PUSH
44144: LD_INT 2
44146: ARRAY
44147: PPUSH
44148: CALL_OW 458
44152: NOT
44153: IFFALSE 44157
// continue ;
44155: GO 44127
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
44157: LD_VAR 0 4
44161: PUSH
44162: LD_INT 1
44164: ARRAY
44165: PPUSH
44166: LD_VAR 0 4
44170: PUSH
44171: LD_INT 2
44173: ARRAY
44174: PPUSH
44175: CALL_OW 428
44179: PUSH
44180: LD_VAR 0 5
44184: IN
44185: IFFALSE 44214
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
44187: LD_VAR 0 4
44191: PUSH
44192: LD_INT 1
44194: ARRAY
44195: PPUSH
44196: LD_VAR 0 4
44200: PUSH
44201: LD_INT 2
44203: ARRAY
44204: PPUSH
44205: LD_VAR 0 1
44209: PPUSH
44210: CALL_OW 456
// end ;
44214: GO 44127
44216: POP
44217: POP
// end ;
44218: LD_VAR 0 3
44222: RET
// export function Count ( array ) ; begin
44223: LD_INT 0
44225: PPUSH
// result := array + 0 ;
44226: LD_ADDR_VAR 0 2
44230: PUSH
44231: LD_VAR 0 1
44235: PUSH
44236: LD_INT 0
44238: PLUS
44239: ST_TO_ADDR
// end ;
44240: LD_VAR 0 2
44244: RET
// export function IsEmpty ( building ) ; begin
44245: LD_INT 0
44247: PPUSH
// if not building then
44248: LD_VAR 0 1
44252: NOT
44253: IFFALSE 44257
// exit ;
44255: GO 44300
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44257: LD_ADDR_VAR 0 2
44261: PUSH
44262: LD_VAR 0 1
44266: PUSH
44267: LD_INT 22
44269: PUSH
44270: LD_VAR 0 1
44274: PPUSH
44275: CALL_OW 255
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 58
44286: PUSH
44287: EMPTY
44288: LIST
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PPUSH
44294: CALL_OW 69
44298: IN
44299: ST_TO_ADDR
// end ;
44300: LD_VAR 0 2
44304: RET
// export function IsNotFull ( building ) ; var places ; begin
44305: LD_INT 0
44307: PPUSH
44308: PPUSH
// if not building then
44309: LD_VAR 0 1
44313: NOT
44314: IFFALSE 44318
// exit ;
44316: GO 44346
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
44318: LD_ADDR_VAR 0 2
44322: PUSH
44323: LD_VAR 0 1
44327: PPUSH
44328: LD_INT 3
44330: PUSH
44331: LD_INT 62
44333: PUSH
44334: EMPTY
44335: LIST
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PPUSH
44341: CALL_OW 72
44345: ST_TO_ADDR
// end ;
44346: LD_VAR 0 2
44350: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44351: LD_INT 0
44353: PPUSH
44354: PPUSH
44355: PPUSH
44356: PPUSH
// tmp := [ ] ;
44357: LD_ADDR_VAR 0 3
44361: PUSH
44362: EMPTY
44363: ST_TO_ADDR
// list := [ ] ;
44364: LD_ADDR_VAR 0 5
44368: PUSH
44369: EMPTY
44370: ST_TO_ADDR
// for i = 16 to 25 do
44371: LD_ADDR_VAR 0 4
44375: PUSH
44376: DOUBLE
44377: LD_INT 16
44379: DEC
44380: ST_TO_ADDR
44381: LD_INT 25
44383: PUSH
44384: FOR_TO
44385: IFFALSE 44458
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44387: LD_ADDR_VAR 0 3
44391: PUSH
44392: LD_VAR 0 3
44396: PUSH
44397: LD_INT 22
44399: PUSH
44400: LD_VAR 0 1
44404: PPUSH
44405: CALL_OW 255
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 91
44416: PUSH
44417: LD_VAR 0 1
44421: PUSH
44422: LD_INT 6
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 30
44432: PUSH
44433: LD_VAR 0 4
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: LIST
44446: PUSH
44447: EMPTY
44448: LIST
44449: PPUSH
44450: CALL_OW 69
44454: ADD
44455: ST_TO_ADDR
44456: GO 44384
44458: POP
44459: POP
// for i = 1 to tmp do
44460: LD_ADDR_VAR 0 4
44464: PUSH
44465: DOUBLE
44466: LD_INT 1
44468: DEC
44469: ST_TO_ADDR
44470: LD_VAR 0 3
44474: PUSH
44475: FOR_TO
44476: IFFALSE 44564
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44478: LD_ADDR_VAR 0 5
44482: PUSH
44483: LD_VAR 0 5
44487: PUSH
44488: LD_VAR 0 3
44492: PUSH
44493: LD_VAR 0 4
44497: ARRAY
44498: PPUSH
44499: CALL_OW 266
44503: PUSH
44504: LD_VAR 0 3
44508: PUSH
44509: LD_VAR 0 4
44513: ARRAY
44514: PPUSH
44515: CALL_OW 250
44519: PUSH
44520: LD_VAR 0 3
44524: PUSH
44525: LD_VAR 0 4
44529: ARRAY
44530: PPUSH
44531: CALL_OW 251
44535: PUSH
44536: LD_VAR 0 3
44540: PUSH
44541: LD_VAR 0 4
44545: ARRAY
44546: PPUSH
44547: CALL_OW 254
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: PUSH
44558: EMPTY
44559: LIST
44560: ADD
44561: ST_TO_ADDR
44562: GO 44475
44564: POP
44565: POP
// result := list ;
44566: LD_ADDR_VAR 0 2
44570: PUSH
44571: LD_VAR 0 5
44575: ST_TO_ADDR
// end ;
44576: LD_VAR 0 2
44580: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44581: LD_INT 0
44583: PPUSH
44584: PPUSH
44585: PPUSH
44586: PPUSH
44587: PPUSH
44588: PPUSH
44589: PPUSH
// if not factory then
44590: LD_VAR 0 1
44594: NOT
44595: IFFALSE 44599
// exit ;
44597: GO 45202
// if control = control_apeman then
44599: LD_VAR 0 4
44603: PUSH
44604: LD_INT 5
44606: EQUAL
44607: IFFALSE 44716
// begin tmp := UnitsInside ( factory ) ;
44609: LD_ADDR_VAR 0 8
44613: PUSH
44614: LD_VAR 0 1
44618: PPUSH
44619: CALL_OW 313
44623: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44624: LD_VAR 0 8
44628: PPUSH
44629: LD_INT 25
44631: PUSH
44632: LD_INT 12
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PPUSH
44639: CALL_OW 72
44643: NOT
44644: IFFALSE 44654
// control := control_manual ;
44646: LD_ADDR_VAR 0 4
44650: PUSH
44651: LD_INT 1
44653: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44654: LD_ADDR_VAR 0 8
44658: PUSH
44659: LD_VAR 0 1
44663: PPUSH
44664: CALL 44351 0 1
44668: ST_TO_ADDR
// if tmp then
44669: LD_VAR 0 8
44673: IFFALSE 44716
// begin for i in tmp do
44675: LD_ADDR_VAR 0 7
44679: PUSH
44680: LD_VAR 0 8
44684: PUSH
44685: FOR_IN
44686: IFFALSE 44714
// if i [ 1 ] = b_ext_radio then
44688: LD_VAR 0 7
44692: PUSH
44693: LD_INT 1
44695: ARRAY
44696: PUSH
44697: LD_INT 22
44699: EQUAL
44700: IFFALSE 44712
// begin control := control_remote ;
44702: LD_ADDR_VAR 0 4
44706: PUSH
44707: LD_INT 2
44709: ST_TO_ADDR
// break ;
44710: GO 44714
// end ;
44712: GO 44685
44714: POP
44715: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44716: LD_VAR 0 1
44720: PPUSH
44721: LD_VAR 0 2
44725: PPUSH
44726: LD_VAR 0 3
44730: PPUSH
44731: LD_VAR 0 4
44735: PPUSH
44736: LD_VAR 0 5
44740: PPUSH
44741: CALL_OW 448
44745: IFFALSE 44780
// begin result := [ chassis , engine , control , weapon ] ;
44747: LD_ADDR_VAR 0 6
44751: PUSH
44752: LD_VAR 0 2
44756: PUSH
44757: LD_VAR 0 3
44761: PUSH
44762: LD_VAR 0 4
44766: PUSH
44767: LD_VAR 0 5
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: ST_TO_ADDR
// exit ;
44778: GO 45202
// end ; _chassis := AvailableChassisList ( factory ) ;
44780: LD_ADDR_VAR 0 9
44784: PUSH
44785: LD_VAR 0 1
44789: PPUSH
44790: CALL_OW 475
44794: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44795: LD_ADDR_VAR 0 11
44799: PUSH
44800: LD_VAR 0 1
44804: PPUSH
44805: CALL_OW 476
44809: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44810: LD_ADDR_VAR 0 12
44814: PUSH
44815: LD_VAR 0 1
44819: PPUSH
44820: CALL_OW 477
44824: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44825: LD_ADDR_VAR 0 10
44829: PUSH
44830: LD_VAR 0 1
44834: PPUSH
44835: CALL_OW 478
44839: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44840: LD_VAR 0 9
44844: NOT
44845: IFTRUE 44854
44847: PUSH
44848: LD_VAR 0 11
44852: NOT
44853: OR
44854: IFTRUE 44863
44856: PUSH
44857: LD_VAR 0 12
44861: NOT
44862: OR
44863: IFTRUE 44872
44865: PUSH
44866: LD_VAR 0 10
44870: NOT
44871: OR
44872: IFFALSE 44907
// begin result := [ chassis , engine , control , weapon ] ;
44874: LD_ADDR_VAR 0 6
44878: PUSH
44879: LD_VAR 0 2
44883: PUSH
44884: LD_VAR 0 3
44888: PUSH
44889: LD_VAR 0 4
44893: PUSH
44894: LD_VAR 0 5
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: ST_TO_ADDR
// exit ;
44905: GO 45202
// end ; if not chassis in _chassis then
44907: LD_VAR 0 2
44911: PUSH
44912: LD_VAR 0 9
44916: IN
44917: NOT
44918: IFFALSE 44944
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44920: LD_ADDR_VAR 0 2
44924: PUSH
44925: LD_VAR 0 9
44929: PUSH
44930: LD_INT 1
44932: PPUSH
44933: LD_VAR 0 9
44937: PPUSH
44938: CALL_OW 12
44942: ARRAY
44943: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44944: LD_VAR 0 2
44948: PPUSH
44949: LD_VAR 0 3
44953: PPUSH
44954: CALL 45207 0 2
44958: NOT
44959: IFFALSE 45020
// repeat engine := _engine [ 1 ] ;
44961: LD_ADDR_VAR 0 3
44965: PUSH
44966: LD_VAR 0 11
44970: PUSH
44971: LD_INT 1
44973: ARRAY
44974: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44975: LD_ADDR_VAR 0 11
44979: PUSH
44980: LD_VAR 0 11
44984: PPUSH
44985: LD_INT 1
44987: PPUSH
44988: CALL_OW 3
44992: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44993: LD_VAR 0 2
44997: PPUSH
44998: LD_VAR 0 3
45002: PPUSH
45003: CALL 45207 0 2
45007: IFTRUE 45018
45009: PUSH
45010: LD_VAR 0 11
45014: PUSH
45015: EMPTY
45016: EQUAL
45017: OR
45018: IFFALSE 44961
// if not control in _control then
45020: LD_VAR 0 4
45024: PUSH
45025: LD_VAR 0 12
45029: IN
45030: NOT
45031: IFFALSE 45057
// control := _control [ rand ( 1 , _control ) ] ;
45033: LD_ADDR_VAR 0 4
45037: PUSH
45038: LD_VAR 0 12
45042: PUSH
45043: LD_INT 1
45045: PPUSH
45046: LD_VAR 0 12
45050: PPUSH
45051: CALL_OW 12
45055: ARRAY
45056: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
45057: LD_VAR 0 2
45061: PPUSH
45062: LD_VAR 0 5
45066: PPUSH
45067: CALL 45429 0 2
45071: NOT
45072: IFFALSE 45133
// repeat weapon := _weapon [ 1 ] ;
45074: LD_ADDR_VAR 0 5
45078: PUSH
45079: LD_VAR 0 10
45083: PUSH
45084: LD_INT 1
45086: ARRAY
45087: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
45088: LD_ADDR_VAR 0 10
45092: PUSH
45093: LD_VAR 0 10
45097: PPUSH
45098: LD_INT 1
45100: PPUSH
45101: CALL_OW 3
45105: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
45106: LD_VAR 0 2
45110: PPUSH
45111: LD_VAR 0 5
45115: PPUSH
45116: CALL 45429 0 2
45120: IFTRUE 45131
45122: PUSH
45123: LD_VAR 0 10
45127: PUSH
45128: EMPTY
45129: EQUAL
45130: OR
45131: IFFALSE 45074
// result := [ ] ;
45133: LD_ADDR_VAR 0 6
45137: PUSH
45138: EMPTY
45139: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45140: LD_VAR 0 1
45144: PPUSH
45145: LD_VAR 0 2
45149: PPUSH
45150: LD_VAR 0 3
45154: PPUSH
45155: LD_VAR 0 4
45159: PPUSH
45160: LD_VAR 0 5
45164: PPUSH
45165: CALL_OW 448
45169: IFFALSE 45202
// result := [ chassis , engine , control , weapon ] ;
45171: LD_ADDR_VAR 0 6
45175: PUSH
45176: LD_VAR 0 2
45180: PUSH
45181: LD_VAR 0 3
45185: PUSH
45186: LD_VAR 0 4
45190: PUSH
45191: LD_VAR 0 5
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: ST_TO_ADDR
// end ;
45202: LD_VAR 0 6
45206: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
45207: LD_INT 0
45209: PPUSH
// if not chassis or not engine then
45210: LD_VAR 0 1
45214: NOT
45215: IFTRUE 45224
45217: PUSH
45218: LD_VAR 0 2
45222: NOT
45223: OR
45224: IFFALSE 45228
// exit ;
45226: GO 45424
// case engine of engine_solar :
45228: LD_VAR 0 2
45232: PUSH
45233: LD_INT 2
45235: DOUBLE
45236: EQUAL
45237: IFTRUE 45241
45239: GO 45279
45241: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45242: LD_ADDR_VAR 0 3
45246: PUSH
45247: LD_INT 11
45249: PUSH
45250: LD_INT 12
45252: PUSH
45253: LD_INT 13
45255: PUSH
45256: LD_INT 14
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: LD_INT 2
45264: PUSH
45265: LD_INT 3
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: ST_TO_ADDR
45277: GO 45408
45279: LD_INT 1
45281: DOUBLE
45282: EQUAL
45283: IFTRUE 45287
45285: GO 45349
45287: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45288: LD_ADDR_VAR 0 3
45292: PUSH
45293: LD_INT 11
45295: PUSH
45296: LD_INT 12
45298: PUSH
45299: LD_INT 13
45301: PUSH
45302: LD_INT 14
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: LD_INT 2
45310: PUSH
45311: LD_INT 3
45313: PUSH
45314: LD_INT 4
45316: PUSH
45317: LD_INT 5
45319: PUSH
45320: LD_INT 21
45322: PUSH
45323: LD_INT 23
45325: PUSH
45326: LD_INT 22
45328: PUSH
45329: LD_INT 24
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: ST_TO_ADDR
45347: GO 45408
45349: LD_INT 3
45351: DOUBLE
45352: EQUAL
45353: IFTRUE 45357
45355: GO 45407
45357: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45358: LD_ADDR_VAR 0 3
45362: PUSH
45363: LD_INT 13
45365: PUSH
45366: LD_INT 14
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: LD_INT 3
45374: PUSH
45375: LD_INT 4
45377: PUSH
45378: LD_INT 5
45380: PUSH
45381: LD_INT 21
45383: PUSH
45384: LD_INT 22
45386: PUSH
45387: LD_INT 23
45389: PUSH
45390: LD_INT 24
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: ST_TO_ADDR
45405: GO 45408
45407: POP
// result := ( chassis in result ) ;
45408: LD_ADDR_VAR 0 3
45412: PUSH
45413: LD_VAR 0 1
45417: PUSH
45418: LD_VAR 0 3
45422: IN
45423: ST_TO_ADDR
// end ;
45424: LD_VAR 0 3
45428: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45429: LD_INT 0
45431: PPUSH
// if not chassis or not weapon then
45432: LD_VAR 0 1
45436: NOT
45437: IFTRUE 45446
45439: PUSH
45440: LD_VAR 0 2
45444: NOT
45445: OR
45446: IFFALSE 45450
// exit ;
45448: GO 46544
// case weapon of us_machine_gun :
45450: LD_VAR 0 2
45454: PUSH
45455: LD_INT 2
45457: DOUBLE
45458: EQUAL
45459: IFTRUE 45463
45461: GO 45493
45463: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45464: LD_ADDR_VAR 0 3
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: LD_INT 3
45477: PUSH
45478: LD_INT 4
45480: PUSH
45481: LD_INT 5
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: ST_TO_ADDR
45491: GO 46528
45493: LD_INT 3
45495: DOUBLE
45496: EQUAL
45497: IFTRUE 45501
45499: GO 45531
45501: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45502: LD_ADDR_VAR 0 3
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: LD_INT 2
45512: PUSH
45513: LD_INT 3
45515: PUSH
45516: LD_INT 4
45518: PUSH
45519: LD_INT 5
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: ST_TO_ADDR
45529: GO 46528
45531: LD_INT 11
45533: DOUBLE
45534: EQUAL
45535: IFTRUE 45539
45537: GO 45569
45539: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45540: LD_ADDR_VAR 0 3
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: LD_INT 2
45550: PUSH
45551: LD_INT 3
45553: PUSH
45554: LD_INT 4
45556: PUSH
45557: LD_INT 5
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: ST_TO_ADDR
45567: GO 46528
45569: LD_INT 4
45571: DOUBLE
45572: EQUAL
45573: IFTRUE 45577
45575: GO 45603
45577: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45578: LD_ADDR_VAR 0 3
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: LD_INT 3
45588: PUSH
45589: LD_INT 4
45591: PUSH
45592: LD_INT 5
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: ST_TO_ADDR
45601: GO 46528
45603: LD_INT 5
45605: DOUBLE
45606: EQUAL
45607: IFTRUE 45611
45609: GO 45637
45611: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45612: LD_ADDR_VAR 0 3
45616: PUSH
45617: LD_INT 2
45619: PUSH
45620: LD_INT 3
45622: PUSH
45623: LD_INT 4
45625: PUSH
45626: LD_INT 5
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: ST_TO_ADDR
45635: GO 46528
45637: LD_INT 9
45639: DOUBLE
45640: EQUAL
45641: IFTRUE 45645
45643: GO 45671
45645: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45646: LD_ADDR_VAR 0 3
45650: PUSH
45651: LD_INT 2
45653: PUSH
45654: LD_INT 3
45656: PUSH
45657: LD_INT 4
45659: PUSH
45660: LD_INT 5
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: ST_TO_ADDR
45669: GO 46528
45671: LD_INT 7
45673: DOUBLE
45674: EQUAL
45675: IFTRUE 45679
45677: GO 45705
45679: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45680: LD_ADDR_VAR 0 3
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: LD_INT 3
45690: PUSH
45691: LD_INT 4
45693: PUSH
45694: LD_INT 5
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: ST_TO_ADDR
45703: GO 46528
45705: LD_INT 12
45707: DOUBLE
45708: EQUAL
45709: IFTRUE 45713
45711: GO 45739
45713: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45714: LD_ADDR_VAR 0 3
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: LD_INT 3
45724: PUSH
45725: LD_INT 4
45727: PUSH
45728: LD_INT 5
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: ST_TO_ADDR
45737: GO 46528
45739: LD_INT 13
45741: DOUBLE
45742: EQUAL
45743: IFTRUE 45747
45745: GO 45773
45747: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45748: LD_ADDR_VAR 0 3
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: LD_INT 3
45758: PUSH
45759: LD_INT 4
45761: PUSH
45762: LD_INT 5
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: ST_TO_ADDR
45771: GO 46528
45773: LD_INT 14
45775: DOUBLE
45776: EQUAL
45777: IFTRUE 45781
45779: GO 45799
45781: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45782: LD_ADDR_VAR 0 3
45786: PUSH
45787: LD_INT 4
45789: PUSH
45790: LD_INT 5
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: ST_TO_ADDR
45797: GO 46528
45799: LD_INT 6
45801: DOUBLE
45802: EQUAL
45803: IFTRUE 45807
45805: GO 45825
45807: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45808: LD_ADDR_VAR 0 3
45812: PUSH
45813: LD_INT 4
45815: PUSH
45816: LD_INT 5
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: ST_TO_ADDR
45823: GO 46528
45825: LD_INT 10
45827: DOUBLE
45828: EQUAL
45829: IFTRUE 45833
45831: GO 45851
45833: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45834: LD_ADDR_VAR 0 3
45838: PUSH
45839: LD_INT 4
45841: PUSH
45842: LD_INT 5
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: ST_TO_ADDR
45849: GO 46528
45851: LD_INT 22
45853: DOUBLE
45854: EQUAL
45855: IFTRUE 45859
45857: GO 45885
45859: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45860: LD_ADDR_VAR 0 3
45864: PUSH
45865: LD_INT 11
45867: PUSH
45868: LD_INT 12
45870: PUSH
45871: LD_INT 13
45873: PUSH
45874: LD_INT 14
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: ST_TO_ADDR
45883: GO 46528
45885: LD_INT 23
45887: DOUBLE
45888: EQUAL
45889: IFTRUE 45893
45891: GO 45919
45893: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45894: LD_ADDR_VAR 0 3
45898: PUSH
45899: LD_INT 11
45901: PUSH
45902: LD_INT 12
45904: PUSH
45905: LD_INT 13
45907: PUSH
45908: LD_INT 14
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: ST_TO_ADDR
45917: GO 46528
45919: LD_INT 24
45921: DOUBLE
45922: EQUAL
45923: IFTRUE 45927
45925: GO 45953
45927: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45928: LD_ADDR_VAR 0 3
45932: PUSH
45933: LD_INT 11
45935: PUSH
45936: LD_INT 12
45938: PUSH
45939: LD_INT 13
45941: PUSH
45942: LD_INT 14
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: ST_TO_ADDR
45951: GO 46528
45953: LD_INT 30
45955: DOUBLE
45956: EQUAL
45957: IFTRUE 45961
45959: GO 45987
45961: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45962: LD_ADDR_VAR 0 3
45966: PUSH
45967: LD_INT 11
45969: PUSH
45970: LD_INT 12
45972: PUSH
45973: LD_INT 13
45975: PUSH
45976: LD_INT 14
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: ST_TO_ADDR
45985: GO 46528
45987: LD_INT 25
45989: DOUBLE
45990: EQUAL
45991: IFTRUE 45995
45993: GO 46013
45995: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45996: LD_ADDR_VAR 0 3
46000: PUSH
46001: LD_INT 13
46003: PUSH
46004: LD_INT 14
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: ST_TO_ADDR
46011: GO 46528
46013: LD_INT 27
46015: DOUBLE
46016: EQUAL
46017: IFTRUE 46021
46019: GO 46039
46021: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
46022: LD_ADDR_VAR 0 3
46026: PUSH
46027: LD_INT 13
46029: PUSH
46030: LD_INT 14
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: ST_TO_ADDR
46037: GO 46528
46039: LD_INT 92
46041: DOUBLE
46042: EQUAL
46043: IFTRUE 46047
46045: GO 46073
46047: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
46048: LD_ADDR_VAR 0 3
46052: PUSH
46053: LD_INT 11
46055: PUSH
46056: LD_INT 12
46058: PUSH
46059: LD_INT 13
46061: PUSH
46062: LD_INT 14
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: ST_TO_ADDR
46071: GO 46528
46073: LD_INT 28
46075: DOUBLE
46076: EQUAL
46077: IFTRUE 46081
46079: GO 46099
46081: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
46082: LD_ADDR_VAR 0 3
46086: PUSH
46087: LD_INT 13
46089: PUSH
46090: LD_INT 14
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: ST_TO_ADDR
46097: GO 46528
46099: LD_INT 29
46101: DOUBLE
46102: EQUAL
46103: IFTRUE 46107
46105: GO 46125
46107: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
46108: LD_ADDR_VAR 0 3
46112: PUSH
46113: LD_INT 13
46115: PUSH
46116: LD_INT 14
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: ST_TO_ADDR
46123: GO 46528
46125: LD_INT 31
46127: DOUBLE
46128: EQUAL
46129: IFTRUE 46133
46131: GO 46151
46133: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
46134: LD_ADDR_VAR 0 3
46138: PUSH
46139: LD_INT 13
46141: PUSH
46142: LD_INT 14
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: ST_TO_ADDR
46149: GO 46528
46151: LD_INT 26
46153: DOUBLE
46154: EQUAL
46155: IFTRUE 46159
46157: GO 46177
46159: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
46160: LD_ADDR_VAR 0 3
46164: PUSH
46165: LD_INT 13
46167: PUSH
46168: LD_INT 14
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: ST_TO_ADDR
46175: GO 46528
46177: LD_INT 42
46179: DOUBLE
46180: EQUAL
46181: IFTRUE 46185
46183: GO 46211
46185: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
46186: LD_ADDR_VAR 0 3
46190: PUSH
46191: LD_INT 21
46193: PUSH
46194: LD_INT 22
46196: PUSH
46197: LD_INT 23
46199: PUSH
46200: LD_INT 24
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: ST_TO_ADDR
46209: GO 46528
46211: LD_INT 43
46213: DOUBLE
46214: EQUAL
46215: IFTRUE 46219
46217: GO 46245
46219: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46220: LD_ADDR_VAR 0 3
46224: PUSH
46225: LD_INT 21
46227: PUSH
46228: LD_INT 22
46230: PUSH
46231: LD_INT 23
46233: PUSH
46234: LD_INT 24
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: ST_TO_ADDR
46243: GO 46528
46245: LD_INT 44
46247: DOUBLE
46248: EQUAL
46249: IFTRUE 46253
46251: GO 46279
46253: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46254: LD_ADDR_VAR 0 3
46258: PUSH
46259: LD_INT 21
46261: PUSH
46262: LD_INT 22
46264: PUSH
46265: LD_INT 23
46267: PUSH
46268: LD_INT 24
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: ST_TO_ADDR
46277: GO 46528
46279: LD_INT 45
46281: DOUBLE
46282: EQUAL
46283: IFTRUE 46287
46285: GO 46313
46287: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46288: LD_ADDR_VAR 0 3
46292: PUSH
46293: LD_INT 21
46295: PUSH
46296: LD_INT 22
46298: PUSH
46299: LD_INT 23
46301: PUSH
46302: LD_INT 24
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: ST_TO_ADDR
46311: GO 46528
46313: LD_INT 49
46315: DOUBLE
46316: EQUAL
46317: IFTRUE 46321
46319: GO 46347
46321: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46322: LD_ADDR_VAR 0 3
46326: PUSH
46327: LD_INT 21
46329: PUSH
46330: LD_INT 22
46332: PUSH
46333: LD_INT 23
46335: PUSH
46336: LD_INT 24
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: ST_TO_ADDR
46345: GO 46528
46347: LD_INT 51
46349: DOUBLE
46350: EQUAL
46351: IFTRUE 46355
46353: GO 46381
46355: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46356: LD_ADDR_VAR 0 3
46360: PUSH
46361: LD_INT 21
46363: PUSH
46364: LD_INT 22
46366: PUSH
46367: LD_INT 23
46369: PUSH
46370: LD_INT 24
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: ST_TO_ADDR
46379: GO 46528
46381: LD_INT 52
46383: DOUBLE
46384: EQUAL
46385: IFTRUE 46389
46387: GO 46415
46389: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46390: LD_ADDR_VAR 0 3
46394: PUSH
46395: LD_INT 21
46397: PUSH
46398: LD_INT 22
46400: PUSH
46401: LD_INT 23
46403: PUSH
46404: LD_INT 24
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: ST_TO_ADDR
46413: GO 46528
46415: LD_INT 53
46417: DOUBLE
46418: EQUAL
46419: IFTRUE 46423
46421: GO 46441
46423: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46424: LD_ADDR_VAR 0 3
46428: PUSH
46429: LD_INT 23
46431: PUSH
46432: LD_INT 24
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: ST_TO_ADDR
46439: GO 46528
46441: LD_INT 46
46443: DOUBLE
46444: EQUAL
46445: IFTRUE 46449
46447: GO 46467
46449: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46450: LD_ADDR_VAR 0 3
46454: PUSH
46455: LD_INT 23
46457: PUSH
46458: LD_INT 24
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: ST_TO_ADDR
46465: GO 46528
46467: LD_INT 47
46469: DOUBLE
46470: EQUAL
46471: IFTRUE 46475
46473: GO 46493
46475: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
46476: LD_ADDR_VAR 0 3
46480: PUSH
46481: LD_INT 23
46483: PUSH
46484: LD_INT 24
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: ST_TO_ADDR
46491: GO 46528
46493: LD_INT 98
46495: DOUBLE
46496: EQUAL
46497: IFTRUE 46501
46499: GO 46527
46501: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46502: LD_ADDR_VAR 0 3
46506: PUSH
46507: LD_INT 21
46509: PUSH
46510: LD_INT 22
46512: PUSH
46513: LD_INT 23
46515: PUSH
46516: LD_INT 24
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: ST_TO_ADDR
46525: GO 46528
46527: POP
// result := ( chassis in result ) ;
46528: LD_ADDR_VAR 0 3
46532: PUSH
46533: LD_VAR 0 1
46537: PUSH
46538: LD_VAR 0 3
46542: IN
46543: ST_TO_ADDR
// end ;
46544: LD_VAR 0 3
46548: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46549: LD_INT 0
46551: PPUSH
46552: PPUSH
46553: PPUSH
46554: PPUSH
46555: PPUSH
46556: PPUSH
46557: PPUSH
// result := array ;
46558: LD_ADDR_VAR 0 5
46562: PUSH
46563: LD_VAR 0 1
46567: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46568: LD_VAR 0 1
46572: NOT
46573: IFTRUE 46582
46575: PUSH
46576: LD_VAR 0 2
46580: NOT
46581: OR
46582: IFTRUE 46591
46584: PUSH
46585: LD_VAR 0 3
46589: NOT
46590: OR
46591: IFTRUE 46605
46593: PUSH
46594: LD_VAR 0 2
46598: PUSH
46599: LD_VAR 0 1
46603: GREATER
46604: OR
46605: IFTRUE 46619
46607: PUSH
46608: LD_VAR 0 3
46612: PUSH
46613: LD_VAR 0 1
46617: GREATER
46618: OR
46619: IFFALSE 46623
// exit ;
46621: GO 46919
// if direction then
46623: LD_VAR 0 4
46627: IFFALSE 46691
// begin d := 1 ;
46629: LD_ADDR_VAR 0 9
46633: PUSH
46634: LD_INT 1
46636: ST_TO_ADDR
// if i_from > i_to then
46637: LD_VAR 0 2
46641: PUSH
46642: LD_VAR 0 3
46646: GREATER
46647: IFFALSE 46673
// length := ( array - i_from ) + i_to else
46649: LD_ADDR_VAR 0 11
46653: PUSH
46654: LD_VAR 0 1
46658: PUSH
46659: LD_VAR 0 2
46663: MINUS
46664: PUSH
46665: LD_VAR 0 3
46669: PLUS
46670: ST_TO_ADDR
46671: GO 46689
// length := i_to - i_from ;
46673: LD_ADDR_VAR 0 11
46677: PUSH
46678: LD_VAR 0 3
46682: PUSH
46683: LD_VAR 0 2
46687: MINUS
46688: ST_TO_ADDR
// end else
46689: GO 46752
// begin d := - 1 ;
46691: LD_ADDR_VAR 0 9
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: ST_TO_ADDR
// if i_from > i_to then
46700: LD_VAR 0 2
46704: PUSH
46705: LD_VAR 0 3
46709: GREATER
46710: IFFALSE 46730
// length := i_from - i_to else
46712: LD_ADDR_VAR 0 11
46716: PUSH
46717: LD_VAR 0 2
46721: PUSH
46722: LD_VAR 0 3
46726: MINUS
46727: ST_TO_ADDR
46728: GO 46752
// length := ( array - i_to ) + i_from ;
46730: LD_ADDR_VAR 0 11
46734: PUSH
46735: LD_VAR 0 1
46739: PUSH
46740: LD_VAR 0 3
46744: MINUS
46745: PUSH
46746: LD_VAR 0 2
46750: PLUS
46751: ST_TO_ADDR
// end ; if not length then
46752: LD_VAR 0 11
46756: NOT
46757: IFFALSE 46761
// exit ;
46759: GO 46919
// tmp := array ;
46761: LD_ADDR_VAR 0 10
46765: PUSH
46766: LD_VAR 0 1
46770: ST_TO_ADDR
// for i = 1 to length do
46771: LD_ADDR_VAR 0 6
46775: PUSH
46776: DOUBLE
46777: LD_INT 1
46779: DEC
46780: ST_TO_ADDR
46781: LD_VAR 0 11
46785: PUSH
46786: FOR_TO
46787: IFFALSE 46907
// begin for j = 1 to array do
46789: LD_ADDR_VAR 0 7
46793: PUSH
46794: DOUBLE
46795: LD_INT 1
46797: DEC
46798: ST_TO_ADDR
46799: LD_VAR 0 1
46803: PUSH
46804: FOR_TO
46805: IFFALSE 46893
// begin k := j + d ;
46807: LD_ADDR_VAR 0 8
46811: PUSH
46812: LD_VAR 0 7
46816: PUSH
46817: LD_VAR 0 9
46821: PLUS
46822: ST_TO_ADDR
// if k > array then
46823: LD_VAR 0 8
46827: PUSH
46828: LD_VAR 0 1
46832: GREATER
46833: IFFALSE 46843
// k := 1 ;
46835: LD_ADDR_VAR 0 8
46839: PUSH
46840: LD_INT 1
46842: ST_TO_ADDR
// if not k then
46843: LD_VAR 0 8
46847: NOT
46848: IFFALSE 46860
// k := array ;
46850: LD_ADDR_VAR 0 8
46854: PUSH
46855: LD_VAR 0 1
46859: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46860: LD_ADDR_VAR 0 10
46864: PUSH
46865: LD_VAR 0 10
46869: PPUSH
46870: LD_VAR 0 8
46874: PPUSH
46875: LD_VAR 0 1
46879: PUSH
46880: LD_VAR 0 7
46884: ARRAY
46885: PPUSH
46886: CALL_OW 1
46890: ST_TO_ADDR
// end ;
46891: GO 46804
46893: POP
46894: POP
// array := tmp ;
46895: LD_ADDR_VAR 0 1
46899: PUSH
46900: LD_VAR 0 10
46904: ST_TO_ADDR
// end ;
46905: GO 46786
46907: POP
46908: POP
// result := array ;
46909: LD_ADDR_VAR 0 5
46913: PUSH
46914: LD_VAR 0 1
46918: ST_TO_ADDR
// end ;
46919: LD_VAR 0 5
46923: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46924: LD_INT 0
46926: PPUSH
46927: PPUSH
// result := 0 ;
46928: LD_ADDR_VAR 0 3
46932: PUSH
46933: LD_INT 0
46935: ST_TO_ADDR
// if not array or not value in array then
46936: LD_VAR 0 1
46940: NOT
46941: IFTRUE 46956
46943: PUSH
46944: LD_VAR 0 2
46948: PUSH
46949: LD_VAR 0 1
46953: IN
46954: NOT
46955: OR
46956: IFFALSE 46960
// exit ;
46958: GO 47014
// for i = 1 to array do
46960: LD_ADDR_VAR 0 4
46964: PUSH
46965: DOUBLE
46966: LD_INT 1
46968: DEC
46969: ST_TO_ADDR
46970: LD_VAR 0 1
46974: PUSH
46975: FOR_TO
46976: IFFALSE 47012
// if value = array [ i ] then
46978: LD_VAR 0 2
46982: PUSH
46983: LD_VAR 0 1
46987: PUSH
46988: LD_VAR 0 4
46992: ARRAY
46993: EQUAL
46994: IFFALSE 47010
// begin result := i ;
46996: LD_ADDR_VAR 0 3
47000: PUSH
47001: LD_VAR 0 4
47005: ST_TO_ADDR
// exit ;
47006: POP
47007: POP
47008: GO 47014
// end ;
47010: GO 46975
47012: POP
47013: POP
// end ;
47014: LD_VAR 0 3
47018: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
47019: LD_INT 0
47021: PPUSH
// vc_chassis := chassis ;
47022: LD_ADDR_OWVAR 37
47026: PUSH
47027: LD_VAR 0 1
47031: ST_TO_ADDR
// vc_engine := engine ;
47032: LD_ADDR_OWVAR 39
47036: PUSH
47037: LD_VAR 0 2
47041: ST_TO_ADDR
// vc_control := control ;
47042: LD_ADDR_OWVAR 38
47046: PUSH
47047: LD_VAR 0 3
47051: ST_TO_ADDR
// vc_weapon := weapon ;
47052: LD_ADDR_OWVAR 40
47056: PUSH
47057: LD_VAR 0 4
47061: ST_TO_ADDR
// vc_fuel_battery := fuel ;
47062: LD_ADDR_OWVAR 41
47066: PUSH
47067: LD_VAR 0 5
47071: ST_TO_ADDR
// end ;
47072: LD_VAR 0 6
47076: RET
// export function WantPlant ( unit ) ; var task ; begin
47077: LD_INT 0
47079: PPUSH
47080: PPUSH
// result := false ;
47081: LD_ADDR_VAR 0 2
47085: PUSH
47086: LD_INT 0
47088: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
47089: LD_ADDR_VAR 0 3
47093: PUSH
47094: LD_VAR 0 1
47098: PPUSH
47099: CALL_OW 437
47103: ST_TO_ADDR
// if task then
47104: LD_VAR 0 3
47108: IFFALSE 47136
// if task [ 1 ] [ 1 ] = p then
47110: LD_VAR 0 3
47114: PUSH
47115: LD_INT 1
47117: ARRAY
47118: PUSH
47119: LD_INT 1
47121: ARRAY
47122: PUSH
47123: LD_STRING p
47125: EQUAL
47126: IFFALSE 47136
// result := true ;
47128: LD_ADDR_VAR 0 2
47132: PUSH
47133: LD_INT 1
47135: ST_TO_ADDR
// end ;
47136: LD_VAR 0 2
47140: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
47141: LD_INT 0
47143: PPUSH
47144: PPUSH
47145: PPUSH
47146: PPUSH
// if pos < 1 then
47147: LD_VAR 0 2
47151: PUSH
47152: LD_INT 1
47154: LESS
47155: IFFALSE 47159
// exit ;
47157: GO 47462
// if pos = 1 then
47159: LD_VAR 0 2
47163: PUSH
47164: LD_INT 1
47166: EQUAL
47167: IFFALSE 47200
// result := Replace ( arr , pos [ 1 ] , value ) else
47169: LD_ADDR_VAR 0 4
47173: PUSH
47174: LD_VAR 0 1
47178: PPUSH
47179: LD_VAR 0 2
47183: PUSH
47184: LD_INT 1
47186: ARRAY
47187: PPUSH
47188: LD_VAR 0 3
47192: PPUSH
47193: CALL_OW 1
47197: ST_TO_ADDR
47198: GO 47462
// begin tmp := arr ;
47200: LD_ADDR_VAR 0 6
47204: PUSH
47205: LD_VAR 0 1
47209: ST_TO_ADDR
// s_arr := [ tmp ] ;
47210: LD_ADDR_VAR 0 7
47214: PUSH
47215: LD_VAR 0 6
47219: PUSH
47220: EMPTY
47221: LIST
47222: ST_TO_ADDR
// for i = 1 to pos - 1 do
47223: LD_ADDR_VAR 0 5
47227: PUSH
47228: DOUBLE
47229: LD_INT 1
47231: DEC
47232: ST_TO_ADDR
47233: LD_VAR 0 2
47237: PUSH
47238: LD_INT 1
47240: MINUS
47241: PUSH
47242: FOR_TO
47243: IFFALSE 47288
// begin tmp := tmp [ pos [ i ] ] ;
47245: LD_ADDR_VAR 0 6
47249: PUSH
47250: LD_VAR 0 6
47254: PUSH
47255: LD_VAR 0 2
47259: PUSH
47260: LD_VAR 0 5
47264: ARRAY
47265: ARRAY
47266: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47267: LD_ADDR_VAR 0 7
47271: PUSH
47272: LD_VAR 0 7
47276: PUSH
47277: LD_VAR 0 6
47281: PUSH
47282: EMPTY
47283: LIST
47284: ADD
47285: ST_TO_ADDR
// end ;
47286: GO 47242
47288: POP
47289: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47290: LD_ADDR_VAR 0 6
47294: PUSH
47295: LD_VAR 0 6
47299: PPUSH
47300: LD_VAR 0 2
47304: PUSH
47305: LD_VAR 0 2
47309: ARRAY
47310: PPUSH
47311: LD_VAR 0 3
47315: PPUSH
47316: CALL_OW 1
47320: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47321: LD_ADDR_VAR 0 7
47325: PUSH
47326: LD_VAR 0 7
47330: PPUSH
47331: LD_VAR 0 7
47335: PPUSH
47336: LD_VAR 0 6
47340: PPUSH
47341: CALL_OW 1
47345: ST_TO_ADDR
// for i = s_arr downto 2 do
47346: LD_ADDR_VAR 0 5
47350: PUSH
47351: DOUBLE
47352: LD_VAR 0 7
47356: INC
47357: ST_TO_ADDR
47358: LD_INT 2
47360: PUSH
47361: FOR_DOWNTO
47362: IFFALSE 47446
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47364: LD_ADDR_VAR 0 6
47368: PUSH
47369: LD_VAR 0 7
47373: PUSH
47374: LD_VAR 0 5
47378: PUSH
47379: LD_INT 1
47381: MINUS
47382: ARRAY
47383: PPUSH
47384: LD_VAR 0 2
47388: PUSH
47389: LD_VAR 0 5
47393: PUSH
47394: LD_INT 1
47396: MINUS
47397: ARRAY
47398: PPUSH
47399: LD_VAR 0 7
47403: PUSH
47404: LD_VAR 0 5
47408: ARRAY
47409: PPUSH
47410: CALL_OW 1
47414: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47415: LD_ADDR_VAR 0 7
47419: PUSH
47420: LD_VAR 0 7
47424: PPUSH
47425: LD_VAR 0 5
47429: PUSH
47430: LD_INT 1
47432: MINUS
47433: PPUSH
47434: LD_VAR 0 6
47438: PPUSH
47439: CALL_OW 1
47443: ST_TO_ADDR
// end ;
47444: GO 47361
47446: POP
47447: POP
// result := s_arr [ 1 ] ;
47448: LD_ADDR_VAR 0 4
47452: PUSH
47453: LD_VAR 0 7
47457: PUSH
47458: LD_INT 1
47460: ARRAY
47461: ST_TO_ADDR
// end ; end ;
47462: LD_VAR 0 4
47466: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47467: LD_INT 0
47469: PPUSH
47470: PPUSH
// if not list then
47471: LD_VAR 0 1
47475: NOT
47476: IFFALSE 47480
// exit ;
47478: GO 47571
// i := list [ pos1 ] ;
47480: LD_ADDR_VAR 0 5
47484: PUSH
47485: LD_VAR 0 1
47489: PUSH
47490: LD_VAR 0 2
47494: ARRAY
47495: ST_TO_ADDR
// if not i then
47496: LD_VAR 0 5
47500: NOT
47501: IFFALSE 47505
// exit ;
47503: GO 47571
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47505: LD_ADDR_VAR 0 1
47509: PUSH
47510: LD_VAR 0 1
47514: PPUSH
47515: LD_VAR 0 2
47519: PPUSH
47520: LD_VAR 0 1
47524: PUSH
47525: LD_VAR 0 3
47529: ARRAY
47530: PPUSH
47531: CALL_OW 1
47535: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47536: LD_ADDR_VAR 0 1
47540: PUSH
47541: LD_VAR 0 1
47545: PPUSH
47546: LD_VAR 0 3
47550: PPUSH
47551: LD_VAR 0 5
47555: PPUSH
47556: CALL_OW 1
47560: ST_TO_ADDR
// result := list ;
47561: LD_ADDR_VAR 0 4
47565: PUSH
47566: LD_VAR 0 1
47570: ST_TO_ADDR
// end ;
47571: LD_VAR 0 4
47575: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47576: LD_INT 0
47578: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47579: LD_ADDR_VAR 0 5
47583: PUSH
47584: LD_VAR 0 1
47588: PPUSH
47589: CALL_OW 250
47593: PPUSH
47594: LD_VAR 0 1
47598: PPUSH
47599: CALL_OW 251
47603: PPUSH
47604: LD_VAR 0 2
47608: PPUSH
47609: LD_VAR 0 3
47613: PPUSH
47614: LD_VAR 0 4
47618: PPUSH
47619: CALL 48001 0 5
47623: ST_TO_ADDR
// end ;
47624: LD_VAR 0 5
47628: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
47629: LD_INT 0
47631: PPUSH
47632: PPUSH
47633: PPUSH
47634: PPUSH
// if not list or not unit then
47635: LD_VAR 0 2
47639: NOT
47640: IFTRUE 47649
47642: PUSH
47643: LD_VAR 0 1
47647: NOT
47648: OR
47649: IFFALSE 47653
// exit ;
47651: GO 47996
// result := [ ] ;
47653: LD_ADDR_VAR 0 5
47657: PUSH
47658: EMPTY
47659: ST_TO_ADDR
// for i in list do
47660: LD_ADDR_VAR 0 6
47664: PUSH
47665: LD_VAR 0 2
47669: PUSH
47670: FOR_IN
47671: IFFALSE 47889
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47673: LD_ADDR_VAR 0 8
47677: PUSH
47678: LD_VAR 0 1
47682: PPUSH
47683: LD_VAR 0 6
47687: PUSH
47688: LD_INT 1
47690: ARRAY
47691: PPUSH
47692: LD_VAR 0 6
47696: PUSH
47697: LD_INT 2
47699: ARRAY
47700: PPUSH
47701: CALL_OW 297
47705: ST_TO_ADDR
// if not Count ( result ) then
47706: LD_VAR 0 5
47710: PPUSH
47711: CALL 44223 0 1
47715: NOT
47716: IFFALSE 47749
// begin result := Join ( result , [ i , tmp ] ) ;
47718: LD_ADDR_VAR 0 5
47722: PUSH
47723: LD_VAR 0 5
47727: PPUSH
47728: LD_VAR 0 6
47732: PUSH
47733: LD_VAR 0 8
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PPUSH
47742: CALL 80189 0 2
47746: ST_TO_ADDR
// continue ;
47747: GO 47670
// end ; if result [ result ] [ 2 ] <= tmp then
47749: LD_VAR 0 5
47753: PUSH
47754: LD_VAR 0 5
47758: ARRAY
47759: PUSH
47760: LD_INT 2
47762: ARRAY
47763: PUSH
47764: LD_VAR 0 8
47768: LESSEQUAL
47769: IFFALSE 47802
// result := Join ( result , [ i , tmp ] ) else
47771: LD_ADDR_VAR 0 5
47775: PUSH
47776: LD_VAR 0 5
47780: PPUSH
47781: LD_VAR 0 6
47785: PUSH
47786: LD_VAR 0 8
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PPUSH
47795: CALL 80189 0 2
47799: ST_TO_ADDR
47800: GO 47887
// begin for j := 1 to Count ( result ) do
47802: LD_ADDR_VAR 0 7
47806: PUSH
47807: DOUBLE
47808: LD_INT 1
47810: DEC
47811: ST_TO_ADDR
47812: LD_VAR 0 5
47816: PPUSH
47817: CALL 44223 0 1
47821: PUSH
47822: FOR_TO
47823: IFFALSE 47885
// begin if tmp < result [ j ] [ 2 ] then
47825: LD_VAR 0 8
47829: PUSH
47830: LD_VAR 0 5
47834: PUSH
47835: LD_VAR 0 7
47839: ARRAY
47840: PUSH
47841: LD_INT 2
47843: ARRAY
47844: LESS
47845: IFFALSE 47883
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47847: LD_ADDR_VAR 0 5
47851: PUSH
47852: LD_VAR 0 5
47856: PPUSH
47857: LD_VAR 0 7
47861: PPUSH
47862: LD_VAR 0 6
47866: PUSH
47867: LD_VAR 0 8
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PPUSH
47876: CALL_OW 2
47880: ST_TO_ADDR
// break ;
47881: GO 47885
// end ; end ;
47883: GO 47822
47885: POP
47886: POP
// end ; end ;
47887: GO 47670
47889: POP
47890: POP
// if result and not asc then
47891: LD_VAR 0 5
47895: IFFALSE 47904
47897: PUSH
47898: LD_VAR 0 3
47902: NOT
47903: AND
47904: IFFALSE 47921
// result := ReverseArray ( result ) ;
47906: LD_ADDR_VAR 0 5
47910: PUSH
47911: LD_VAR 0 5
47915: PPUSH
47916: CALL 75279 0 1
47920: ST_TO_ADDR
// tmp := [ ] ;
47921: LD_ADDR_VAR 0 8
47925: PUSH
47926: EMPTY
47927: ST_TO_ADDR
// if mode then
47928: LD_VAR 0 4
47932: IFFALSE 47996
// begin for i := 1 to result do
47934: LD_ADDR_VAR 0 6
47938: PUSH
47939: DOUBLE
47940: LD_INT 1
47942: DEC
47943: ST_TO_ADDR
47944: LD_VAR 0 5
47948: PUSH
47949: FOR_TO
47950: IFFALSE 47984
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
47952: LD_ADDR_VAR 0 8
47956: PUSH
47957: LD_VAR 0 8
47961: PPUSH
47962: LD_VAR 0 5
47966: PUSH
47967: LD_VAR 0 6
47971: ARRAY
47972: PUSH
47973: LD_INT 1
47975: ARRAY
47976: PPUSH
47977: CALL 80189 0 2
47981: ST_TO_ADDR
47982: GO 47949
47984: POP
47985: POP
// result := tmp ;
47986: LD_ADDR_VAR 0 5
47990: PUSH
47991: LD_VAR 0 8
47995: ST_TO_ADDR
// end ; end ;
47996: LD_VAR 0 5
48000: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
48001: LD_INT 0
48003: PPUSH
48004: PPUSH
48005: PPUSH
48006: PPUSH
// if not list then
48007: LD_VAR 0 3
48011: NOT
48012: IFFALSE 48016
// exit ;
48014: GO 48406
// result := [ ] ;
48016: LD_ADDR_VAR 0 6
48020: PUSH
48021: EMPTY
48022: ST_TO_ADDR
// for i in list do
48023: LD_ADDR_VAR 0 7
48027: PUSH
48028: LD_VAR 0 3
48032: PUSH
48033: FOR_IN
48034: IFFALSE 48236
// begin tmp := GetDistUnitXY ( i , x , y ) ;
48036: LD_ADDR_VAR 0 9
48040: PUSH
48041: LD_VAR 0 7
48045: PPUSH
48046: LD_VAR 0 1
48050: PPUSH
48051: LD_VAR 0 2
48055: PPUSH
48056: CALL_OW 297
48060: ST_TO_ADDR
// if not result then
48061: LD_VAR 0 6
48065: NOT
48066: IFFALSE 48092
// result := [ [ i , tmp ] ] else
48068: LD_ADDR_VAR 0 6
48072: PUSH
48073: LD_VAR 0 7
48077: PUSH
48078: LD_VAR 0 9
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: EMPTY
48088: LIST
48089: ST_TO_ADDR
48090: GO 48234
// begin if result [ result ] [ 2 ] <= tmp then
48092: LD_VAR 0 6
48096: PUSH
48097: LD_VAR 0 6
48101: ARRAY
48102: PUSH
48103: LD_INT 2
48105: ARRAY
48106: PUSH
48107: LD_VAR 0 9
48111: LESSEQUAL
48112: IFFALSE 48154
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
48114: LD_ADDR_VAR 0 6
48118: PUSH
48119: LD_VAR 0 6
48123: PPUSH
48124: LD_VAR 0 6
48128: PUSH
48129: LD_INT 1
48131: PLUS
48132: PPUSH
48133: LD_VAR 0 7
48137: PUSH
48138: LD_VAR 0 9
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PPUSH
48147: CALL_OW 2
48151: ST_TO_ADDR
48152: GO 48234
// for j := 1 to result do
48154: LD_ADDR_VAR 0 8
48158: PUSH
48159: DOUBLE
48160: LD_INT 1
48162: DEC
48163: ST_TO_ADDR
48164: LD_VAR 0 6
48168: PUSH
48169: FOR_TO
48170: IFFALSE 48232
// begin if tmp < result [ j ] [ 2 ] then
48172: LD_VAR 0 9
48176: PUSH
48177: LD_VAR 0 6
48181: PUSH
48182: LD_VAR 0 8
48186: ARRAY
48187: PUSH
48188: LD_INT 2
48190: ARRAY
48191: LESS
48192: IFFALSE 48230
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48194: LD_ADDR_VAR 0 6
48198: PUSH
48199: LD_VAR 0 6
48203: PPUSH
48204: LD_VAR 0 8
48208: PPUSH
48209: LD_VAR 0 7
48213: PUSH
48214: LD_VAR 0 9
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PPUSH
48223: CALL_OW 2
48227: ST_TO_ADDR
// break ;
48228: GO 48232
// end ; end ;
48230: GO 48169
48232: POP
48233: POP
// end ; end ;
48234: GO 48033
48236: POP
48237: POP
// if result and not asc then
48238: LD_VAR 0 6
48242: IFFALSE 48251
48244: PUSH
48245: LD_VAR 0 4
48249: NOT
48250: AND
48251: IFFALSE 48326
// begin tmp := result ;
48253: LD_ADDR_VAR 0 9
48257: PUSH
48258: LD_VAR 0 6
48262: ST_TO_ADDR
// for i = tmp downto 1 do
48263: LD_ADDR_VAR 0 7
48267: PUSH
48268: DOUBLE
48269: LD_VAR 0 9
48273: INC
48274: ST_TO_ADDR
48275: LD_INT 1
48277: PUSH
48278: FOR_DOWNTO
48279: IFFALSE 48324
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
48281: LD_ADDR_VAR 0 6
48285: PUSH
48286: LD_VAR 0 6
48290: PPUSH
48291: LD_VAR 0 9
48295: PUSH
48296: LD_VAR 0 7
48300: MINUS
48301: PUSH
48302: LD_INT 1
48304: PLUS
48305: PPUSH
48306: LD_VAR 0 9
48310: PUSH
48311: LD_VAR 0 7
48315: ARRAY
48316: PPUSH
48317: CALL_OW 1
48321: ST_TO_ADDR
48322: GO 48278
48324: POP
48325: POP
// end ; tmp := [ ] ;
48326: LD_ADDR_VAR 0 9
48330: PUSH
48331: EMPTY
48332: ST_TO_ADDR
// if mode then
48333: LD_VAR 0 5
48337: IFFALSE 48406
// begin for i = 1 to result do
48339: LD_ADDR_VAR 0 7
48343: PUSH
48344: DOUBLE
48345: LD_INT 1
48347: DEC
48348: ST_TO_ADDR
48349: LD_VAR 0 6
48353: PUSH
48354: FOR_TO
48355: IFFALSE 48394
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
48357: LD_ADDR_VAR 0 9
48361: PUSH
48362: LD_VAR 0 9
48366: PPUSH
48367: LD_VAR 0 7
48371: PPUSH
48372: LD_VAR 0 6
48376: PUSH
48377: LD_VAR 0 7
48381: ARRAY
48382: PUSH
48383: LD_INT 1
48385: ARRAY
48386: PPUSH
48387: CALL_OW 1
48391: ST_TO_ADDR
48392: GO 48354
48394: POP
48395: POP
// result := tmp ;
48396: LD_ADDR_VAR 0 6
48400: PUSH
48401: LD_VAR 0 9
48405: ST_TO_ADDR
// end ; end ;
48406: LD_VAR 0 6
48410: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48411: LD_INT 0
48413: PPUSH
48414: PPUSH
48415: PPUSH
48416: PPUSH
48417: PPUSH
48418: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48419: LD_ADDR_VAR 0 5
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: EMPTY
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: ST_TO_ADDR
// if not x or not y then
48441: LD_VAR 0 2
48445: NOT
48446: IFTRUE 48455
48448: PUSH
48449: LD_VAR 0 3
48453: NOT
48454: OR
48455: IFFALSE 48459
// exit ;
48457: GO 50115
// if not range then
48459: LD_VAR 0 4
48463: NOT
48464: IFFALSE 48474
// range := 10 ;
48466: LD_ADDR_VAR 0 4
48470: PUSH
48471: LD_INT 10
48473: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48474: LD_ADDR_VAR 0 8
48478: PUSH
48479: LD_INT 81
48481: PUSH
48482: LD_VAR 0 1
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 92
48493: PUSH
48494: LD_VAR 0 2
48498: PUSH
48499: LD_VAR 0 3
48503: PUSH
48504: LD_VAR 0 4
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 3
48517: PUSH
48518: LD_INT 21
48520: PUSH
48521: LD_INT 3
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: LIST
48536: PPUSH
48537: CALL_OW 69
48541: ST_TO_ADDR
// if not tmp then
48542: LD_VAR 0 8
48546: NOT
48547: IFFALSE 48551
// exit ;
48549: GO 50115
// for i in tmp do
48551: LD_ADDR_VAR 0 6
48555: PUSH
48556: LD_VAR 0 8
48560: PUSH
48561: FOR_IN
48562: IFFALSE 50090
// begin points := [ 0 , 0 , 0 ] ;
48564: LD_ADDR_VAR 0 9
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: LIST
48582: ST_TO_ADDR
// bpoints := 1 ;
48583: LD_ADDR_VAR 0 10
48587: PUSH
48588: LD_INT 1
48590: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48591: LD_VAR 0 6
48595: PPUSH
48596: CALL_OW 247
48600: PUSH
48601: LD_INT 1
48603: DOUBLE
48604: EQUAL
48605: IFTRUE 48609
48607: GO 49191
48609: POP
// begin if GetClass ( i ) = 1 then
48610: LD_VAR 0 6
48614: PPUSH
48615: CALL_OW 257
48619: PUSH
48620: LD_INT 1
48622: EQUAL
48623: IFFALSE 48644
// points := [ 10 , 5 , 3 ] ;
48625: LD_ADDR_VAR 0 9
48629: PUSH
48630: LD_INT 10
48632: PUSH
48633: LD_INT 5
48635: PUSH
48636: LD_INT 3
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: LIST
48643: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48644: LD_VAR 0 6
48648: PPUSH
48649: CALL_OW 257
48653: PUSH
48654: LD_INT 2
48656: PUSH
48657: LD_INT 3
48659: PUSH
48660: LD_INT 4
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: LIST
48667: IN
48668: IFFALSE 48689
// points := [ 3 , 2 , 1 ] ;
48670: LD_ADDR_VAR 0 9
48674: PUSH
48675: LD_INT 3
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: LIST
48688: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48689: LD_VAR 0 6
48693: PPUSH
48694: CALL_OW 257
48698: PUSH
48699: LD_INT 5
48701: EQUAL
48702: IFFALSE 48723
// points := [ 130 , 5 , 2 ] ;
48704: LD_ADDR_VAR 0 9
48708: PUSH
48709: LD_INT 130
48711: PUSH
48712: LD_INT 5
48714: PUSH
48715: LD_INT 2
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: LIST
48722: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48723: LD_VAR 0 6
48727: PPUSH
48728: CALL_OW 257
48732: PUSH
48733: LD_INT 8
48735: EQUAL
48736: IFFALSE 48757
// points := [ 35 , 35 , 30 ] ;
48738: LD_ADDR_VAR 0 9
48742: PUSH
48743: LD_INT 35
48745: PUSH
48746: LD_INT 35
48748: PUSH
48749: LD_INT 30
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: LIST
48756: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48757: LD_VAR 0 6
48761: PPUSH
48762: CALL_OW 257
48766: PUSH
48767: LD_INT 9
48769: EQUAL
48770: IFFALSE 48791
// points := [ 20 , 55 , 40 ] ;
48772: LD_ADDR_VAR 0 9
48776: PUSH
48777: LD_INT 20
48779: PUSH
48780: LD_INT 55
48782: PUSH
48783: LD_INT 40
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: LIST
48790: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48791: LD_VAR 0 6
48795: PPUSH
48796: CALL_OW 257
48800: PUSH
48801: LD_INT 12
48803: PUSH
48804: LD_INT 16
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: IN
48811: IFFALSE 48832
// points := [ 5 , 3 , 2 ] ;
48813: LD_ADDR_VAR 0 9
48817: PUSH
48818: LD_INT 5
48820: PUSH
48821: LD_INT 3
48823: PUSH
48824: LD_INT 2
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: LIST
48831: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48832: LD_VAR 0 6
48836: PPUSH
48837: CALL_OW 257
48841: PUSH
48842: LD_INT 17
48844: EQUAL
48845: IFFALSE 48866
// points := [ 100 , 50 , 75 ] ;
48847: LD_ADDR_VAR 0 9
48851: PUSH
48852: LD_INT 100
48854: PUSH
48855: LD_INT 50
48857: PUSH
48858: LD_INT 75
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: LIST
48865: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48866: LD_VAR 0 6
48870: PPUSH
48871: CALL_OW 257
48875: PUSH
48876: LD_INT 15
48878: EQUAL
48879: IFFALSE 48900
// points := [ 10 , 5 , 3 ] ;
48881: LD_ADDR_VAR 0 9
48885: PUSH
48886: LD_INT 10
48888: PUSH
48889: LD_INT 5
48891: PUSH
48892: LD_INT 3
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: LIST
48899: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48900: LD_VAR 0 6
48904: PPUSH
48905: CALL_OW 257
48909: PUSH
48910: LD_INT 14
48912: EQUAL
48913: IFFALSE 48934
// points := [ 10 , 0 , 0 ] ;
48915: LD_ADDR_VAR 0 9
48919: PUSH
48920: LD_INT 10
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: LIST
48933: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48934: LD_VAR 0 6
48938: PPUSH
48939: CALL_OW 257
48943: PUSH
48944: LD_INT 11
48946: EQUAL
48947: IFFALSE 48968
// points := [ 30 , 10 , 5 ] ;
48949: LD_ADDR_VAR 0 9
48953: PUSH
48954: LD_INT 30
48956: PUSH
48957: LD_INT 10
48959: PUSH
48960: LD_INT 5
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: LIST
48967: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48968: LD_VAR 0 1
48972: PPUSH
48973: LD_INT 5
48975: PPUSH
48976: CALL_OW 321
48980: PUSH
48981: LD_INT 2
48983: EQUAL
48984: IFFALSE 49001
// bpoints := bpoints * 1.8 ;
48986: LD_ADDR_VAR 0 10
48990: PUSH
48991: LD_VAR 0 10
48995: PUSH
48996: LD_REAL  1.80000000000000E+0000
48999: MUL
49000: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
49001: LD_VAR 0 6
49005: PPUSH
49006: CALL_OW 257
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: LD_INT 2
49016: PUSH
49017: LD_INT 3
49019: PUSH
49020: LD_INT 4
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: IN
49029: IFFALSE 49049
49031: PUSH
49032: LD_VAR 0 1
49036: PPUSH
49037: LD_INT 51
49039: PPUSH
49040: CALL_OW 321
49044: PUSH
49045: LD_INT 2
49047: EQUAL
49048: AND
49049: IFFALSE 49066
// bpoints := bpoints * 1.2 ;
49051: LD_ADDR_VAR 0 10
49055: PUSH
49056: LD_VAR 0 10
49060: PUSH
49061: LD_REAL  1.20000000000000E+0000
49064: MUL
49065: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
49066: LD_VAR 0 6
49070: PPUSH
49071: CALL_OW 257
49075: PUSH
49076: LD_INT 5
49078: PUSH
49079: LD_INT 7
49081: PUSH
49082: LD_INT 9
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: LIST
49089: IN
49090: IFFALSE 49110
49092: PUSH
49093: LD_VAR 0 1
49097: PPUSH
49098: LD_INT 52
49100: PPUSH
49101: CALL_OW 321
49105: PUSH
49106: LD_INT 2
49108: EQUAL
49109: AND
49110: IFFALSE 49127
// bpoints := bpoints * 1.5 ;
49112: LD_ADDR_VAR 0 10
49116: PUSH
49117: LD_VAR 0 10
49121: PUSH
49122: LD_REAL  1.50000000000000E+0000
49125: MUL
49126: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
49127: LD_VAR 0 1
49131: PPUSH
49132: LD_INT 66
49134: PPUSH
49135: CALL_OW 321
49139: PUSH
49140: LD_INT 2
49142: EQUAL
49143: IFFALSE 49160
// bpoints := bpoints * 1.1 ;
49145: LD_ADDR_VAR 0 10
49149: PUSH
49150: LD_VAR 0 10
49154: PUSH
49155: LD_REAL  1.10000000000000E+0000
49158: MUL
49159: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
49160: LD_ADDR_VAR 0 10
49164: PUSH
49165: LD_VAR 0 10
49169: PUSH
49170: LD_VAR 0 6
49174: PPUSH
49175: LD_INT 1
49177: PPUSH
49178: CALL_OW 259
49182: PUSH
49183: LD_REAL  1.15000000000000E+0000
49186: MUL
49187: MUL
49188: ST_TO_ADDR
// end ; unit_vehicle :
49189: GO 50019
49191: LD_INT 2
49193: DOUBLE
49194: EQUAL
49195: IFTRUE 49199
49197: GO 50007
49199: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
49200: LD_VAR 0 6
49204: PPUSH
49205: CALL_OW 264
49209: PUSH
49210: LD_INT 2
49212: PUSH
49213: LD_INT 42
49215: PUSH
49216: LD_INT 24
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: LIST
49223: IN
49224: IFFALSE 49245
// points := [ 25 , 5 , 3 ] ;
49226: LD_ADDR_VAR 0 9
49230: PUSH
49231: LD_INT 25
49233: PUSH
49234: LD_INT 5
49236: PUSH
49237: LD_INT 3
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: LIST
49244: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
49245: LD_VAR 0 6
49249: PPUSH
49250: CALL_OW 264
49254: PUSH
49255: LD_INT 4
49257: PUSH
49258: LD_INT 43
49260: PUSH
49261: LD_INT 25
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: LIST
49268: IN
49269: IFFALSE 49290
// points := [ 40 , 15 , 5 ] ;
49271: LD_ADDR_VAR 0 9
49275: PUSH
49276: LD_INT 40
49278: PUSH
49279: LD_INT 15
49281: PUSH
49282: LD_INT 5
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: LIST
49289: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
49290: LD_VAR 0 6
49294: PPUSH
49295: CALL_OW 264
49299: PUSH
49300: LD_INT 3
49302: PUSH
49303: LD_INT 23
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: IN
49310: IFFALSE 49331
// points := [ 7 , 25 , 8 ] ;
49312: LD_ADDR_VAR 0 9
49316: PUSH
49317: LD_INT 7
49319: PUSH
49320: LD_INT 25
49322: PUSH
49323: LD_INT 8
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: LIST
49330: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49331: LD_VAR 0 6
49335: PPUSH
49336: CALL_OW 264
49340: PUSH
49341: LD_INT 5
49343: PUSH
49344: LD_INT 27
49346: PUSH
49347: LD_INT 44
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: LIST
49354: IN
49355: IFFALSE 49376
// points := [ 14 , 50 , 16 ] ;
49357: LD_ADDR_VAR 0 9
49361: PUSH
49362: LD_INT 14
49364: PUSH
49365: LD_INT 50
49367: PUSH
49368: LD_INT 16
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: LIST
49375: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
49376: LD_VAR 0 6
49380: PPUSH
49381: CALL_OW 264
49385: PUSH
49386: LD_INT 6
49388: PUSH
49389: LD_INT 46
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: IN
49396: IFFALSE 49417
// points := [ 32 , 120 , 70 ] ;
49398: LD_ADDR_VAR 0 9
49402: PUSH
49403: LD_INT 32
49405: PUSH
49406: LD_INT 120
49408: PUSH
49409: LD_INT 70
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: LIST
49416: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49417: LD_VAR 0 6
49421: PPUSH
49422: CALL_OW 264
49426: PUSH
49427: LD_INT 7
49429: PUSH
49430: LD_INT 28
49432: PUSH
49433: LD_INT 45
49435: PUSH
49436: LD_INT 92
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: IN
49445: IFFALSE 49466
// points := [ 35 , 20 , 45 ] ;
49447: LD_ADDR_VAR 0 9
49451: PUSH
49452: LD_INT 35
49454: PUSH
49455: LD_INT 20
49457: PUSH
49458: LD_INT 45
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: LIST
49465: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49466: LD_VAR 0 6
49470: PPUSH
49471: CALL_OW 264
49475: PUSH
49476: LD_INT 47
49478: PUSH
49479: EMPTY
49480: LIST
49481: IN
49482: IFFALSE 49503
// points := [ 67 , 45 , 75 ] ;
49484: LD_ADDR_VAR 0 9
49488: PUSH
49489: LD_INT 67
49491: PUSH
49492: LD_INT 45
49494: PUSH
49495: LD_INT 75
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: LIST
49502: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49503: LD_VAR 0 6
49507: PPUSH
49508: CALL_OW 264
49512: PUSH
49513: LD_INT 26
49515: PUSH
49516: EMPTY
49517: LIST
49518: IN
49519: IFFALSE 49540
// points := [ 120 , 30 , 80 ] ;
49521: LD_ADDR_VAR 0 9
49525: PUSH
49526: LD_INT 120
49528: PUSH
49529: LD_INT 30
49531: PUSH
49532: LD_INT 80
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: LIST
49539: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49540: LD_VAR 0 6
49544: PPUSH
49545: CALL_OW 264
49549: PUSH
49550: LD_INT 22
49552: PUSH
49553: EMPTY
49554: LIST
49555: IN
49556: IFFALSE 49577
// points := [ 40 , 1 , 1 ] ;
49558: LD_ADDR_VAR 0 9
49562: PUSH
49563: LD_INT 40
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: LIST
49576: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49577: LD_VAR 0 6
49581: PPUSH
49582: CALL_OW 264
49586: PUSH
49587: LD_INT 29
49589: PUSH
49590: EMPTY
49591: LIST
49592: IN
49593: IFFALSE 49614
// points := [ 70 , 200 , 400 ] ;
49595: LD_ADDR_VAR 0 9
49599: PUSH
49600: LD_INT 70
49602: PUSH
49603: LD_INT 200
49605: PUSH
49606: LD_INT 400
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: LIST
49613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49614: LD_VAR 0 6
49618: PPUSH
49619: CALL_OW 264
49623: PUSH
49624: LD_INT 14
49626: PUSH
49627: LD_INT 53
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: IN
49634: IFFALSE 49655
// points := [ 40 , 10 , 20 ] ;
49636: LD_ADDR_VAR 0 9
49640: PUSH
49641: LD_INT 40
49643: PUSH
49644: LD_INT 10
49646: PUSH
49647: LD_INT 20
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: LIST
49654: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49655: LD_VAR 0 6
49659: PPUSH
49660: CALL_OW 264
49664: PUSH
49665: LD_INT 9
49667: PUSH
49668: EMPTY
49669: LIST
49670: IN
49671: IFFALSE 49692
// points := [ 5 , 70 , 20 ] ;
49673: LD_ADDR_VAR 0 9
49677: PUSH
49678: LD_INT 5
49680: PUSH
49681: LD_INT 70
49683: PUSH
49684: LD_INT 20
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: LIST
49691: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49692: LD_VAR 0 6
49696: PPUSH
49697: CALL_OW 264
49701: PUSH
49702: LD_INT 10
49704: PUSH
49705: EMPTY
49706: LIST
49707: IN
49708: IFFALSE 49729
// points := [ 35 , 110 , 70 ] ;
49710: LD_ADDR_VAR 0 9
49714: PUSH
49715: LD_INT 35
49717: PUSH
49718: LD_INT 110
49720: PUSH
49721: LD_INT 70
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: LIST
49728: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49729: LD_VAR 0 6
49733: PPUSH
49734: CALL_OW 265
49738: PUSH
49739: LD_INT 25
49741: EQUAL
49742: IFFALSE 49763
// points := [ 80 , 65 , 100 ] ;
49744: LD_ADDR_VAR 0 9
49748: PUSH
49749: LD_INT 80
49751: PUSH
49752: LD_INT 65
49754: PUSH
49755: LD_INT 100
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: LIST
49762: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49763: LD_VAR 0 6
49767: PPUSH
49768: CALL_OW 263
49772: PUSH
49773: LD_INT 1
49775: EQUAL
49776: IFFALSE 49811
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49778: LD_ADDR_VAR 0 10
49782: PUSH
49783: LD_VAR 0 10
49787: PUSH
49788: LD_VAR 0 6
49792: PPUSH
49793: CALL_OW 311
49797: PPUSH
49798: LD_INT 3
49800: PPUSH
49801: CALL_OW 259
49805: PUSH
49806: LD_INT 4
49808: MUL
49809: MUL
49810: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49811: LD_VAR 0 6
49815: PPUSH
49816: CALL_OW 263
49820: PUSH
49821: LD_INT 2
49823: EQUAL
49824: IFFALSE 49875
// begin j := IsControledBy ( i ) ;
49826: LD_ADDR_VAR 0 7
49830: PUSH
49831: LD_VAR 0 6
49835: PPUSH
49836: CALL_OW 312
49840: ST_TO_ADDR
// if j then
49841: LD_VAR 0 7
49845: IFFALSE 49875
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49847: LD_ADDR_VAR 0 10
49851: PUSH
49852: LD_VAR 0 10
49856: PUSH
49857: LD_VAR 0 7
49861: PPUSH
49862: LD_INT 3
49864: PPUSH
49865: CALL_OW 259
49869: PUSH
49870: LD_INT 3
49872: MUL
49873: MUL
49874: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49875: LD_VAR 0 6
49879: PPUSH
49880: CALL_OW 264
49884: PUSH
49885: LD_INT 5
49887: PUSH
49888: LD_INT 6
49890: PUSH
49891: LD_INT 46
49893: PUSH
49894: LD_INT 44
49896: PUSH
49897: LD_INT 47
49899: PUSH
49900: LD_INT 45
49902: PUSH
49903: LD_INT 28
49905: PUSH
49906: LD_INT 7
49908: PUSH
49909: LD_INT 27
49911: PUSH
49912: LD_INT 29
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: IN
49927: IFFALSE 49947
49929: PUSH
49930: LD_VAR 0 1
49934: PPUSH
49935: LD_INT 52
49937: PPUSH
49938: CALL_OW 321
49942: PUSH
49943: LD_INT 2
49945: EQUAL
49946: AND
49947: IFFALSE 49964
// bpoints := bpoints * 1.2 ;
49949: LD_ADDR_VAR 0 10
49953: PUSH
49954: LD_VAR 0 10
49958: PUSH
49959: LD_REAL  1.20000000000000E+0000
49962: MUL
49963: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49964: LD_VAR 0 6
49968: PPUSH
49969: CALL_OW 264
49973: PUSH
49974: LD_INT 6
49976: PUSH
49977: LD_INT 46
49979: PUSH
49980: LD_INT 47
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: LIST
49987: IN
49988: IFFALSE 50005
// bpoints := bpoints * 1.2 ;
49990: LD_ADDR_VAR 0 10
49994: PUSH
49995: LD_VAR 0 10
49999: PUSH
50000: LD_REAL  1.20000000000000E+0000
50003: MUL
50004: ST_TO_ADDR
// end ; unit_building :
50005: GO 50019
50007: LD_INT 3
50009: DOUBLE
50010: EQUAL
50011: IFTRUE 50015
50013: GO 50018
50015: POP
// ; end ;
50016: GO 50019
50018: POP
// for j = 1 to 3 do
50019: LD_ADDR_VAR 0 7
50023: PUSH
50024: DOUBLE
50025: LD_INT 1
50027: DEC
50028: ST_TO_ADDR
50029: LD_INT 3
50031: PUSH
50032: FOR_TO
50033: IFFALSE 50086
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
50035: LD_ADDR_VAR 0 5
50039: PUSH
50040: LD_VAR 0 5
50044: PPUSH
50045: LD_VAR 0 7
50049: PPUSH
50050: LD_VAR 0 5
50054: PUSH
50055: LD_VAR 0 7
50059: ARRAY
50060: PUSH
50061: LD_VAR 0 9
50065: PUSH
50066: LD_VAR 0 7
50070: ARRAY
50071: PUSH
50072: LD_VAR 0 10
50076: MUL
50077: PLUS
50078: PPUSH
50079: CALL_OW 1
50083: ST_TO_ADDR
50084: GO 50032
50086: POP
50087: POP
// end ;
50088: GO 48561
50090: POP
50091: POP
// result := Replace ( result , 4 , tmp ) ;
50092: LD_ADDR_VAR 0 5
50096: PUSH
50097: LD_VAR 0 5
50101: PPUSH
50102: LD_INT 4
50104: PPUSH
50105: LD_VAR 0 8
50109: PPUSH
50110: CALL_OW 1
50114: ST_TO_ADDR
// end ;
50115: LD_VAR 0 5
50119: RET
// export function DangerAtRange ( unit , range ) ; begin
50120: LD_INT 0
50122: PPUSH
// if not unit then
50123: LD_VAR 0 1
50127: NOT
50128: IFFALSE 50132
// exit ;
50130: GO 50177
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
50132: LD_ADDR_VAR 0 3
50136: PUSH
50137: LD_VAR 0 1
50141: PPUSH
50142: CALL_OW 255
50146: PPUSH
50147: LD_VAR 0 1
50151: PPUSH
50152: CALL_OW 250
50156: PPUSH
50157: LD_VAR 0 1
50161: PPUSH
50162: CALL_OW 251
50166: PPUSH
50167: LD_VAR 0 2
50171: PPUSH
50172: CALL 48411 0 4
50176: ST_TO_ADDR
// end ;
50177: LD_VAR 0 3
50181: RET
// export function DangerInArea ( side , area ) ; begin
50182: LD_INT 0
50184: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
50185: LD_ADDR_VAR 0 3
50189: PUSH
50190: LD_VAR 0 2
50194: PPUSH
50195: LD_INT 81
50197: PUSH
50198: LD_VAR 0 1
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PPUSH
50207: CALL_OW 70
50211: ST_TO_ADDR
// end ;
50212: LD_VAR 0 3
50216: RET
// export function IsExtension ( b ) ; begin
50217: LD_INT 0
50219: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
50220: LD_ADDR_VAR 0 2
50224: PUSH
50225: LD_VAR 0 1
50229: PUSH
50230: LD_INT 23
50232: PUSH
50233: LD_INT 20
50235: PUSH
50236: LD_INT 22
50238: PUSH
50239: LD_INT 17
50241: PUSH
50242: LD_INT 24
50244: PUSH
50245: LD_INT 21
50247: PUSH
50248: LD_INT 19
50250: PUSH
50251: LD_INT 16
50253: PUSH
50254: LD_INT 25
50256: PUSH
50257: LD_INT 18
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: IN
50272: ST_TO_ADDR
// end ;
50273: LD_VAR 0 2
50277: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
50278: LD_INT 0
50280: PPUSH
50281: PPUSH
50282: PPUSH
// result := [ ] ;
50283: LD_ADDR_VAR 0 4
50287: PUSH
50288: EMPTY
50289: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
50290: LD_ADDR_VAR 0 5
50294: PUSH
50295: LD_VAR 0 2
50299: PPUSH
50300: LD_INT 21
50302: PUSH
50303: LD_INT 3
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PPUSH
50310: CALL_OW 70
50314: ST_TO_ADDR
// if not tmp then
50315: LD_VAR 0 5
50319: NOT
50320: IFFALSE 50324
// exit ;
50322: GO 50388
// if checkLink then
50324: LD_VAR 0 3
50328: IFFALSE 50378
// begin for i in tmp do
50330: LD_ADDR_VAR 0 6
50334: PUSH
50335: LD_VAR 0 5
50339: PUSH
50340: FOR_IN
50341: IFFALSE 50376
// if GetBase ( i ) <> base then
50343: LD_VAR 0 6
50347: PPUSH
50348: CALL_OW 274
50352: PUSH
50353: LD_VAR 0 1
50357: NONEQUAL
50358: IFFALSE 50374
// ComLinkToBase ( base , i ) ;
50360: LD_VAR 0 1
50364: PPUSH
50365: LD_VAR 0 6
50369: PPUSH
50370: CALL_OW 169
50374: GO 50340
50376: POP
50377: POP
// end ; result := tmp ;
50378: LD_ADDR_VAR 0 4
50382: PUSH
50383: LD_VAR 0 5
50387: ST_TO_ADDR
// end ;
50388: LD_VAR 0 4
50392: RET
// export function ComComplete ( units , b ) ; var i ; begin
50393: LD_INT 0
50395: PPUSH
50396: PPUSH
// if not units then
50397: LD_VAR 0 1
50401: NOT
50402: IFFALSE 50406
// exit ;
50404: GO 50496
// for i in units do
50406: LD_ADDR_VAR 0 4
50410: PUSH
50411: LD_VAR 0 1
50415: PUSH
50416: FOR_IN
50417: IFFALSE 50494
// if BuildingStatus ( b ) = bs_build then
50419: LD_VAR 0 2
50423: PPUSH
50424: CALL_OW 461
50428: PUSH
50429: LD_INT 1
50431: EQUAL
50432: IFFALSE 50492
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50434: LD_VAR 0 4
50438: PPUSH
50439: LD_STRING h
50441: PUSH
50442: LD_VAR 0 2
50446: PPUSH
50447: CALL_OW 250
50451: PUSH
50452: LD_VAR 0 2
50456: PPUSH
50457: CALL_OW 251
50461: PUSH
50462: LD_VAR 0 2
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: PUSH
50485: EMPTY
50486: LIST
50487: PPUSH
50488: CALL_OW 446
50492: GO 50416
50494: POP
50495: POP
// end ;
50496: LD_VAR 0 3
50500: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50501: LD_INT 0
50503: PPUSH
50504: PPUSH
50505: PPUSH
50506: PPUSH
50507: PPUSH
50508: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50509: LD_VAR 0 1
50513: NOT
50514: IFTRUE 50531
50516: PUSH
50517: LD_VAR 0 1
50521: PPUSH
50522: CALL_OW 263
50526: PUSH
50527: LD_INT 2
50529: NONEQUAL
50530: OR
50531: IFFALSE 50535
// exit ;
50533: GO 50851
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50535: LD_ADDR_VAR 0 6
50539: PUSH
50540: LD_INT 22
50542: PUSH
50543: LD_VAR 0 1
50547: PPUSH
50548: CALL_OW 255
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 2
50559: PUSH
50560: LD_INT 30
50562: PUSH
50563: LD_INT 36
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 34
50572: PUSH
50573: LD_INT 31
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: LIST
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PPUSH
50589: CALL_OW 69
50593: ST_TO_ADDR
// if not tmp then
50594: LD_VAR 0 6
50598: NOT
50599: IFFALSE 50603
// exit ;
50601: GO 50851
// result := [ ] ;
50603: LD_ADDR_VAR 0 2
50607: PUSH
50608: EMPTY
50609: ST_TO_ADDR
// for i in tmp do
50610: LD_ADDR_VAR 0 3
50614: PUSH
50615: LD_VAR 0 6
50619: PUSH
50620: FOR_IN
50621: IFFALSE 50692
// begin t := UnitsInside ( i ) ;
50623: LD_ADDR_VAR 0 4
50627: PUSH
50628: LD_VAR 0 3
50632: PPUSH
50633: CALL_OW 313
50637: ST_TO_ADDR
// if t then
50638: LD_VAR 0 4
50642: IFFALSE 50690
// for j in t do
50644: LD_ADDR_VAR 0 7
50648: PUSH
50649: LD_VAR 0 4
50653: PUSH
50654: FOR_IN
50655: IFFALSE 50688
// result := Replace ( result , result + 1 , j ) ;
50657: LD_ADDR_VAR 0 2
50661: PUSH
50662: LD_VAR 0 2
50666: PPUSH
50667: LD_VAR 0 2
50671: PUSH
50672: LD_INT 1
50674: PLUS
50675: PPUSH
50676: LD_VAR 0 7
50680: PPUSH
50681: CALL_OW 1
50685: ST_TO_ADDR
50686: GO 50654
50688: POP
50689: POP
// end ;
50690: GO 50620
50692: POP
50693: POP
// if not result then
50694: LD_VAR 0 2
50698: NOT
50699: IFFALSE 50703
// exit ;
50701: GO 50851
// mech := result [ 1 ] ;
50703: LD_ADDR_VAR 0 5
50707: PUSH
50708: LD_VAR 0 2
50712: PUSH
50713: LD_INT 1
50715: ARRAY
50716: ST_TO_ADDR
// if result > 1 then
50717: LD_VAR 0 2
50721: PUSH
50722: LD_INT 1
50724: GREATER
50725: IFFALSE 50837
// begin for i = 2 to result do
50727: LD_ADDR_VAR 0 3
50731: PUSH
50732: DOUBLE
50733: LD_INT 2
50735: DEC
50736: ST_TO_ADDR
50737: LD_VAR 0 2
50741: PUSH
50742: FOR_TO
50743: IFFALSE 50835
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50745: LD_ADDR_VAR 0 4
50749: PUSH
50750: LD_VAR 0 2
50754: PUSH
50755: LD_VAR 0 3
50759: ARRAY
50760: PPUSH
50761: LD_INT 3
50763: PPUSH
50764: CALL_OW 259
50768: PUSH
50769: LD_VAR 0 2
50773: PUSH
50774: LD_VAR 0 3
50778: ARRAY
50779: PPUSH
50780: CALL_OW 432
50784: MINUS
50785: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50786: LD_VAR 0 4
50790: PUSH
50791: LD_VAR 0 5
50795: PPUSH
50796: LD_INT 3
50798: PPUSH
50799: CALL_OW 259
50803: PUSH
50804: LD_VAR 0 5
50808: PPUSH
50809: CALL_OW 432
50813: MINUS
50814: GREATEREQUAL
50815: IFFALSE 50833
// mech := result [ i ] ;
50817: LD_ADDR_VAR 0 5
50821: PUSH
50822: LD_VAR 0 2
50826: PUSH
50827: LD_VAR 0 3
50831: ARRAY
50832: ST_TO_ADDR
// end ;
50833: GO 50742
50835: POP
50836: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50837: LD_VAR 0 1
50841: PPUSH
50842: LD_VAR 0 5
50846: PPUSH
50847: CALL_OW 135
// end ;
50851: LD_VAR 0 2
50855: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50856: LD_INT 0
50858: PPUSH
50859: PPUSH
50860: PPUSH
50861: PPUSH
50862: PPUSH
50863: PPUSH
50864: PPUSH
50865: PPUSH
50866: PPUSH
50867: PPUSH
50868: PPUSH
50869: PPUSH
50870: PPUSH
// result := [ ] ;
50871: LD_ADDR_VAR 0 7
50875: PUSH
50876: EMPTY
50877: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50878: LD_VAR 0 1
50882: PPUSH
50883: CALL_OW 266
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: IN
50898: NOT
50899: IFFALSE 50903
// exit ;
50901: GO 52543
// if name then
50903: LD_VAR 0 3
50907: IFFALSE 50923
// SetBName ( base_dep , name ) ;
50909: LD_VAR 0 1
50913: PPUSH
50914: LD_VAR 0 3
50918: PPUSH
50919: CALL_OW 500
// base := GetBase ( base_dep ) ;
50923: LD_ADDR_VAR 0 15
50927: PUSH
50928: LD_VAR 0 1
50932: PPUSH
50933: CALL_OW 274
50937: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50938: LD_ADDR_VAR 0 16
50942: PUSH
50943: LD_VAR 0 1
50947: PPUSH
50948: CALL_OW 255
50952: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50953: LD_ADDR_VAR 0 17
50957: PUSH
50958: LD_VAR 0 1
50962: PPUSH
50963: CALL_OW 248
50967: ST_TO_ADDR
// if sources then
50968: LD_VAR 0 5
50972: IFFALSE 51019
// for i = 1 to 3 do
50974: LD_ADDR_VAR 0 8
50978: PUSH
50979: DOUBLE
50980: LD_INT 1
50982: DEC
50983: ST_TO_ADDR
50984: LD_INT 3
50986: PUSH
50987: FOR_TO
50988: IFFALSE 51017
// AddResourceType ( base , i , sources [ i ] ) ;
50990: LD_VAR 0 15
50994: PPUSH
50995: LD_VAR 0 8
50999: PPUSH
51000: LD_VAR 0 5
51004: PUSH
51005: LD_VAR 0 8
51009: ARRAY
51010: PPUSH
51011: CALL_OW 276
51015: GO 50987
51017: POP
51018: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
51019: LD_ADDR_VAR 0 18
51023: PUSH
51024: LD_VAR 0 15
51028: PPUSH
51029: LD_VAR 0 2
51033: PPUSH
51034: LD_INT 1
51036: PPUSH
51037: CALL 50278 0 3
51041: ST_TO_ADDR
// InitHc ;
51042: CALL_OW 19
// InitUc ;
51046: CALL_OW 18
// uc_side := side ;
51050: LD_ADDR_OWVAR 20
51054: PUSH
51055: LD_VAR 0 16
51059: ST_TO_ADDR
// uc_nation := nation ;
51060: LD_ADDR_OWVAR 21
51064: PUSH
51065: LD_VAR 0 17
51069: ST_TO_ADDR
// if buildings then
51070: LD_VAR 0 18
51074: IFFALSE 52402
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
51076: LD_ADDR_VAR 0 19
51080: PUSH
51081: LD_VAR 0 18
51085: PPUSH
51086: LD_INT 2
51088: PUSH
51089: LD_INT 30
51091: PUSH
51092: LD_INT 29
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 30
51101: PUSH
51102: LD_INT 30
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: LIST
51113: PPUSH
51114: CALL_OW 72
51118: ST_TO_ADDR
// if tmp then
51119: LD_VAR 0 19
51123: IFFALSE 51171
// for i in tmp do
51125: LD_ADDR_VAR 0 8
51129: PUSH
51130: LD_VAR 0 19
51134: PUSH
51135: FOR_IN
51136: IFFALSE 51169
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
51138: LD_VAR 0 8
51142: PPUSH
51143: CALL_OW 250
51147: PPUSH
51148: LD_VAR 0 8
51152: PPUSH
51153: CALL_OW 251
51157: PPUSH
51158: LD_VAR 0 16
51162: PPUSH
51163: CALL_OW 441
51167: GO 51135
51169: POP
51170: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
51171: LD_VAR 0 18
51175: PPUSH
51176: LD_INT 2
51178: PUSH
51179: LD_INT 30
51181: PUSH
51182: LD_INT 32
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 30
51191: PUSH
51192: LD_INT 33
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: LIST
51203: PPUSH
51204: CALL_OW 72
51208: IFFALSE 51296
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
51210: LD_ADDR_VAR 0 8
51214: PUSH
51215: LD_VAR 0 18
51219: PPUSH
51220: LD_INT 2
51222: PUSH
51223: LD_INT 30
51225: PUSH
51226: LD_INT 32
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 30
51235: PUSH
51236: LD_INT 33
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: LIST
51247: PPUSH
51248: CALL_OW 72
51252: PUSH
51253: FOR_IN
51254: IFFALSE 51294
// begin if not GetBWeapon ( i ) then
51256: LD_VAR 0 8
51260: PPUSH
51261: CALL_OW 269
51265: NOT
51266: IFFALSE 51292
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
51268: LD_VAR 0 8
51272: PPUSH
51273: LD_VAR 0 8
51277: PPUSH
51278: LD_VAR 0 2
51282: PPUSH
51283: CALL 52548 0 2
51287: PPUSH
51288: CALL_OW 431
// end ;
51292: GO 51253
51294: POP
51295: POP
// end ; for i = 1 to personel do
51296: LD_ADDR_VAR 0 8
51300: PUSH
51301: DOUBLE
51302: LD_INT 1
51304: DEC
51305: ST_TO_ADDR
51306: LD_VAR 0 6
51310: PUSH
51311: FOR_TO
51312: IFFALSE 52382
// begin if i > 4 then
51314: LD_VAR 0 8
51318: PUSH
51319: LD_INT 4
51321: GREATER
51322: IFFALSE 51326
// break ;
51324: GO 52382
// case i of 1 :
51326: LD_VAR 0 8
51330: PUSH
51331: LD_INT 1
51333: DOUBLE
51334: EQUAL
51335: IFTRUE 51339
51337: GO 51419
51339: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51340: LD_ADDR_VAR 0 12
51344: PUSH
51345: LD_VAR 0 18
51349: PPUSH
51350: LD_INT 22
51352: PUSH
51353: LD_VAR 0 16
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 58
51364: PUSH
51365: EMPTY
51366: LIST
51367: PUSH
51368: LD_INT 2
51370: PUSH
51371: LD_INT 30
51373: PUSH
51374: LD_INT 32
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 30
51383: PUSH
51384: LD_INT 4
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 30
51393: PUSH
51394: LD_INT 5
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: LIST
51411: PPUSH
51412: CALL_OW 72
51416: ST_TO_ADDR
51417: GO 51641
51419: LD_INT 2
51421: DOUBLE
51422: EQUAL
51423: IFTRUE 51427
51425: GO 51489
51427: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51428: LD_ADDR_VAR 0 12
51432: PUSH
51433: LD_VAR 0 18
51437: PPUSH
51438: LD_INT 22
51440: PUSH
51441: LD_VAR 0 16
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 2
51452: PUSH
51453: LD_INT 30
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 30
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: LIST
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PPUSH
51482: CALL_OW 72
51486: ST_TO_ADDR
51487: GO 51641
51489: LD_INT 3
51491: DOUBLE
51492: EQUAL
51493: IFTRUE 51497
51495: GO 51559
51497: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51498: LD_ADDR_VAR 0 12
51502: PUSH
51503: LD_VAR 0 18
51507: PPUSH
51508: LD_INT 22
51510: PUSH
51511: LD_VAR 0 16
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: PUSH
51523: LD_INT 30
51525: PUSH
51526: LD_INT 2
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 30
51535: PUSH
51536: LD_INT 3
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: LIST
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PPUSH
51552: CALL_OW 72
51556: ST_TO_ADDR
51557: GO 51641
51559: LD_INT 4
51561: DOUBLE
51562: EQUAL
51563: IFTRUE 51567
51565: GO 51640
51567: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51568: LD_ADDR_VAR 0 12
51572: PUSH
51573: LD_VAR 0 18
51577: PPUSH
51578: LD_INT 22
51580: PUSH
51581: LD_VAR 0 16
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: LD_INT 30
51595: PUSH
51596: LD_INT 6
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 30
51605: PUSH
51606: LD_INT 7
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 30
51615: PUSH
51616: LD_INT 8
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PPUSH
51633: CALL_OW 72
51637: ST_TO_ADDR
51638: GO 51641
51640: POP
// if i = 1 then
51641: LD_VAR 0 8
51645: PUSH
51646: LD_INT 1
51648: EQUAL
51649: IFFALSE 51760
// begin tmp := [ ] ;
51651: LD_ADDR_VAR 0 19
51655: PUSH
51656: EMPTY
51657: ST_TO_ADDR
// for j in f do
51658: LD_ADDR_VAR 0 9
51662: PUSH
51663: LD_VAR 0 12
51667: PUSH
51668: FOR_IN
51669: IFFALSE 51742
// if GetBType ( j ) = b_bunker then
51671: LD_VAR 0 9
51675: PPUSH
51676: CALL_OW 266
51680: PUSH
51681: LD_INT 32
51683: EQUAL
51684: IFFALSE 51711
// tmp := Insert ( tmp , 1 , j ) else
51686: LD_ADDR_VAR 0 19
51690: PUSH
51691: LD_VAR 0 19
51695: PPUSH
51696: LD_INT 1
51698: PPUSH
51699: LD_VAR 0 9
51703: PPUSH
51704: CALL_OW 2
51708: ST_TO_ADDR
51709: GO 51740
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51711: LD_ADDR_VAR 0 19
51715: PUSH
51716: LD_VAR 0 19
51720: PPUSH
51721: LD_VAR 0 19
51725: PUSH
51726: LD_INT 1
51728: PLUS
51729: PPUSH
51730: LD_VAR 0 9
51734: PPUSH
51735: CALL_OW 2
51739: ST_TO_ADDR
51740: GO 51668
51742: POP
51743: POP
// if tmp then
51744: LD_VAR 0 19
51748: IFFALSE 51760
// f := tmp ;
51750: LD_ADDR_VAR 0 12
51754: PUSH
51755: LD_VAR 0 19
51759: ST_TO_ADDR
// end ; x := personel [ i ] ;
51760: LD_ADDR_VAR 0 13
51764: PUSH
51765: LD_VAR 0 6
51769: PUSH
51770: LD_VAR 0 8
51774: ARRAY
51775: ST_TO_ADDR
// if x = - 1 then
51776: LD_VAR 0 13
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: EQUAL
51785: IFFALSE 51996
// begin for j in f do
51787: LD_ADDR_VAR 0 9
51791: PUSH
51792: LD_VAR 0 12
51796: PUSH
51797: FOR_IN
51798: IFFALSE 51992
// repeat InitHc ;
51800: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51804: LD_VAR 0 9
51808: PPUSH
51809: CALL_OW 266
51813: PUSH
51814: LD_INT 5
51816: EQUAL
51817: IFFALSE 51887
// begin if UnitsInside ( j ) < 3 then
51819: LD_VAR 0 9
51823: PPUSH
51824: CALL_OW 313
51828: PUSH
51829: LD_INT 3
51831: LESS
51832: IFFALSE 51868
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51834: LD_INT 0
51836: PPUSH
51837: LD_INT 5
51839: PUSH
51840: LD_INT 8
51842: PUSH
51843: LD_INT 9
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: LIST
51850: PUSH
51851: LD_VAR 0 17
51855: ARRAY
51856: PPUSH
51857: LD_VAR 0 4
51861: PPUSH
51862: CALL_OW 380
51866: GO 51885
// PrepareHuman ( false , i , skill ) ;
51868: LD_INT 0
51870: PPUSH
51871: LD_VAR 0 8
51875: PPUSH
51876: LD_VAR 0 4
51880: PPUSH
51881: CALL_OW 380
// end else
51885: GO 51904
// PrepareHuman ( false , i , skill ) ;
51887: LD_INT 0
51889: PPUSH
51890: LD_VAR 0 8
51894: PPUSH
51895: LD_VAR 0 4
51899: PPUSH
51900: CALL_OW 380
// un := CreateHuman ;
51904: LD_ADDR_VAR 0 14
51908: PUSH
51909: CALL_OW 44
51913: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51914: LD_ADDR_VAR 0 7
51918: PUSH
51919: LD_VAR 0 7
51923: PPUSH
51924: LD_INT 1
51926: PPUSH
51927: LD_VAR 0 14
51931: PPUSH
51932: CALL_OW 2
51936: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51937: LD_VAR 0 14
51941: PPUSH
51942: LD_VAR 0 9
51946: PPUSH
51947: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51951: LD_VAR 0 9
51955: PPUSH
51956: CALL_OW 313
51960: PUSH
51961: LD_INT 6
51963: EQUAL
51964: IFTRUE 51988
51966: PUSH
51967: LD_VAR 0 9
51971: PPUSH
51972: CALL_OW 266
51976: PUSH
51977: LD_INT 32
51979: PUSH
51980: LD_INT 31
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: IN
51987: OR
51988: IFFALSE 51800
51990: GO 51797
51992: POP
51993: POP
// end else
51994: GO 52380
// for j = 1 to x do
51996: LD_ADDR_VAR 0 9
52000: PUSH
52001: DOUBLE
52002: LD_INT 1
52004: DEC
52005: ST_TO_ADDR
52006: LD_VAR 0 13
52010: PUSH
52011: FOR_TO
52012: IFFALSE 52378
// begin InitHc ;
52014: CALL_OW 19
// if not f then
52018: LD_VAR 0 12
52022: NOT
52023: IFFALSE 52112
// begin PrepareHuman ( false , i , skill ) ;
52025: LD_INT 0
52027: PPUSH
52028: LD_VAR 0 8
52032: PPUSH
52033: LD_VAR 0 4
52037: PPUSH
52038: CALL_OW 380
// un := CreateHuman ;
52042: LD_ADDR_VAR 0 14
52046: PUSH
52047: CALL_OW 44
52051: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52052: LD_ADDR_VAR 0 7
52056: PUSH
52057: LD_VAR 0 7
52061: PPUSH
52062: LD_INT 1
52064: PPUSH
52065: LD_VAR 0 14
52069: PPUSH
52070: CALL_OW 2
52074: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52075: LD_VAR 0 14
52079: PPUSH
52080: LD_VAR 0 1
52084: PPUSH
52085: CALL_OW 250
52089: PPUSH
52090: LD_VAR 0 1
52094: PPUSH
52095: CALL_OW 251
52099: PPUSH
52100: LD_INT 10
52102: PPUSH
52103: LD_INT 0
52105: PPUSH
52106: CALL_OW 50
// continue ;
52110: GO 52011
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
52112: LD_VAR 0 12
52116: PUSH
52117: LD_INT 1
52119: ARRAY
52120: PPUSH
52121: CALL_OW 313
52125: IFFALSE 52153
52127: PUSH
52128: LD_VAR 0 12
52132: PUSH
52133: LD_INT 1
52135: ARRAY
52136: PPUSH
52137: CALL_OW 266
52141: PUSH
52142: LD_INT 32
52144: PUSH
52145: LD_INT 31
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: IN
52152: AND
52153: IFTRUE 52174
52155: PUSH
52156: LD_VAR 0 12
52160: PUSH
52161: LD_INT 1
52163: ARRAY
52164: PPUSH
52165: CALL_OW 313
52169: PUSH
52170: LD_INT 6
52172: EQUAL
52173: OR
52174: IFFALSE 52194
// f := Delete ( f , 1 ) ;
52176: LD_ADDR_VAR 0 12
52180: PUSH
52181: LD_VAR 0 12
52185: PPUSH
52186: LD_INT 1
52188: PPUSH
52189: CALL_OW 3
52193: ST_TO_ADDR
// if not f then
52194: LD_VAR 0 12
52198: NOT
52199: IFFALSE 52217
// begin x := x + 2 ;
52201: LD_ADDR_VAR 0 13
52205: PUSH
52206: LD_VAR 0 13
52210: PUSH
52211: LD_INT 2
52213: PLUS
52214: ST_TO_ADDR
// continue ;
52215: GO 52011
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
52217: LD_VAR 0 12
52221: PUSH
52222: LD_INT 1
52224: ARRAY
52225: PPUSH
52226: CALL_OW 266
52230: PUSH
52231: LD_INT 5
52233: EQUAL
52234: IFFALSE 52308
// begin if UnitsInside ( f [ 1 ] ) < 3 then
52236: LD_VAR 0 12
52240: PUSH
52241: LD_INT 1
52243: ARRAY
52244: PPUSH
52245: CALL_OW 313
52249: PUSH
52250: LD_INT 3
52252: LESS
52253: IFFALSE 52289
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52255: LD_INT 0
52257: PPUSH
52258: LD_INT 5
52260: PUSH
52261: LD_INT 8
52263: PUSH
52264: LD_INT 9
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: LIST
52271: PUSH
52272: LD_VAR 0 17
52276: ARRAY
52277: PPUSH
52278: LD_VAR 0 4
52282: PPUSH
52283: CALL_OW 380
52287: GO 52306
// PrepareHuman ( false , i , skill ) ;
52289: LD_INT 0
52291: PPUSH
52292: LD_VAR 0 8
52296: PPUSH
52297: LD_VAR 0 4
52301: PPUSH
52302: CALL_OW 380
// end else
52306: GO 52325
// PrepareHuman ( false , i , skill ) ;
52308: LD_INT 0
52310: PPUSH
52311: LD_VAR 0 8
52315: PPUSH
52316: LD_VAR 0 4
52320: PPUSH
52321: CALL_OW 380
// un := CreateHuman ;
52325: LD_ADDR_VAR 0 14
52329: PUSH
52330: CALL_OW 44
52334: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52335: LD_ADDR_VAR 0 7
52339: PUSH
52340: LD_VAR 0 7
52344: PPUSH
52345: LD_INT 1
52347: PPUSH
52348: LD_VAR 0 14
52352: PPUSH
52353: CALL_OW 2
52357: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52358: LD_VAR 0 14
52362: PPUSH
52363: LD_VAR 0 12
52367: PUSH
52368: LD_INT 1
52370: ARRAY
52371: PPUSH
52372: CALL_OW 52
// end ;
52376: GO 52011
52378: POP
52379: POP
// end ;
52380: GO 51311
52382: POP
52383: POP
// result := result ^ buildings ;
52384: LD_ADDR_VAR 0 7
52388: PUSH
52389: LD_VAR 0 7
52393: PUSH
52394: LD_VAR 0 18
52398: ADD
52399: ST_TO_ADDR
// end else
52400: GO 52543
// begin for i = 1 to personel do
52402: LD_ADDR_VAR 0 8
52406: PUSH
52407: DOUBLE
52408: LD_INT 1
52410: DEC
52411: ST_TO_ADDR
52412: LD_VAR 0 6
52416: PUSH
52417: FOR_TO
52418: IFFALSE 52541
// begin if i > 4 then
52420: LD_VAR 0 8
52424: PUSH
52425: LD_INT 4
52427: GREATER
52428: IFFALSE 52432
// break ;
52430: GO 52541
// x := personel [ i ] ;
52432: LD_ADDR_VAR 0 13
52436: PUSH
52437: LD_VAR 0 6
52441: PUSH
52442: LD_VAR 0 8
52446: ARRAY
52447: ST_TO_ADDR
// if x = - 1 then
52448: LD_VAR 0 13
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: EQUAL
52457: IFFALSE 52461
// continue ;
52459: GO 52417
// PrepareHuman ( false , i , skill ) ;
52461: LD_INT 0
52463: PPUSH
52464: LD_VAR 0 8
52468: PPUSH
52469: LD_VAR 0 4
52473: PPUSH
52474: CALL_OW 380
// un := CreateHuman ;
52478: LD_ADDR_VAR 0 14
52482: PUSH
52483: CALL_OW 44
52487: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52488: LD_VAR 0 14
52492: PPUSH
52493: LD_VAR 0 1
52497: PPUSH
52498: CALL_OW 250
52502: PPUSH
52503: LD_VAR 0 1
52507: PPUSH
52508: CALL_OW 251
52512: PPUSH
52513: LD_INT 10
52515: PPUSH
52516: LD_INT 0
52518: PPUSH
52519: CALL_OW 50
// result := result ^ un ;
52523: LD_ADDR_VAR 0 7
52527: PUSH
52528: LD_VAR 0 7
52532: PUSH
52533: LD_VAR 0 14
52537: ADD
52538: ST_TO_ADDR
// end ;
52539: GO 52417
52541: POP
52542: POP
// end ; end ;
52543: LD_VAR 0 7
52547: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52548: LD_INT 0
52550: PPUSH
52551: PPUSH
52552: PPUSH
52553: PPUSH
52554: PPUSH
52555: PPUSH
52556: PPUSH
52557: PPUSH
52558: PPUSH
52559: PPUSH
52560: PPUSH
52561: PPUSH
52562: PPUSH
52563: PPUSH
52564: PPUSH
52565: PPUSH
// result := false ;
52566: LD_ADDR_VAR 0 3
52570: PUSH
52571: LD_INT 0
52573: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52574: LD_VAR 0 1
52578: NOT
52579: IFTRUE 52604
52581: PUSH
52582: LD_VAR 0 1
52586: PPUSH
52587: CALL_OW 266
52591: PUSH
52592: LD_INT 32
52594: PUSH
52595: LD_INT 33
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: IN
52602: NOT
52603: OR
52604: IFFALSE 52608
// exit ;
52606: GO 53743
// nat := GetNation ( tower ) ;
52608: LD_ADDR_VAR 0 12
52612: PUSH
52613: LD_VAR 0 1
52617: PPUSH
52618: CALL_OW 248
52622: ST_TO_ADDR
// side := GetSide ( tower ) ;
52623: LD_ADDR_VAR 0 16
52627: PUSH
52628: LD_VAR 0 1
52632: PPUSH
52633: CALL_OW 255
52637: ST_TO_ADDR
// x := GetX ( tower ) ;
52638: LD_ADDR_VAR 0 10
52642: PUSH
52643: LD_VAR 0 1
52647: PPUSH
52648: CALL_OW 250
52652: ST_TO_ADDR
// y := GetY ( tower ) ;
52653: LD_ADDR_VAR 0 11
52657: PUSH
52658: LD_VAR 0 1
52662: PPUSH
52663: CALL_OW 251
52667: ST_TO_ADDR
// if not x or not y then
52668: LD_VAR 0 10
52672: NOT
52673: IFTRUE 52682
52675: PUSH
52676: LD_VAR 0 11
52680: NOT
52681: OR
52682: IFFALSE 52686
// exit ;
52684: GO 53743
// weapon := 0 ;
52686: LD_ADDR_VAR 0 18
52690: PUSH
52691: LD_INT 0
52693: ST_TO_ADDR
// fac_list := [ ] ;
52694: LD_ADDR_VAR 0 17
52698: PUSH
52699: EMPTY
52700: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52701: LD_ADDR_VAR 0 6
52705: PUSH
52706: LD_VAR 0 1
52710: PPUSH
52711: CALL_OW 274
52715: PPUSH
52716: LD_VAR 0 2
52720: PPUSH
52721: LD_INT 0
52723: PPUSH
52724: CALL 50278 0 3
52728: PPUSH
52729: LD_INT 30
52731: PUSH
52732: LD_INT 3
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PPUSH
52739: CALL_OW 72
52743: ST_TO_ADDR
// if not factories then
52744: LD_VAR 0 6
52748: NOT
52749: IFFALSE 52753
// exit ;
52751: GO 53743
// for i in factories do
52753: LD_ADDR_VAR 0 8
52757: PUSH
52758: LD_VAR 0 6
52762: PUSH
52763: FOR_IN
52764: IFFALSE 52789
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52766: LD_ADDR_VAR 0 17
52770: PUSH
52771: LD_VAR 0 17
52775: PUSH
52776: LD_VAR 0 8
52780: PPUSH
52781: CALL_OW 478
52785: UNION
52786: ST_TO_ADDR
52787: GO 52763
52789: POP
52790: POP
// if not fac_list then
52791: LD_VAR 0 17
52795: NOT
52796: IFFALSE 52800
// exit ;
52798: GO 53743
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52800: LD_ADDR_VAR 0 5
52804: PUSH
52805: LD_INT 4
52807: PUSH
52808: LD_INT 5
52810: PUSH
52811: LD_INT 9
52813: PUSH
52814: LD_INT 10
52816: PUSH
52817: LD_INT 6
52819: PUSH
52820: LD_INT 7
52822: PUSH
52823: LD_INT 11
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 27
52837: PUSH
52838: LD_INT 28
52840: PUSH
52841: LD_INT 26
52843: PUSH
52844: LD_INT 30
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 43
52855: PUSH
52856: LD_INT 44
52858: PUSH
52859: LD_INT 46
52861: PUSH
52862: LD_INT 45
52864: PUSH
52865: LD_INT 47
52867: PUSH
52868: LD_INT 49
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: LIST
52883: PUSH
52884: LD_VAR 0 12
52888: ARRAY
52889: ST_TO_ADDR
// list := list isect fac_list ;
52890: LD_ADDR_VAR 0 5
52894: PUSH
52895: LD_VAR 0 5
52899: PUSH
52900: LD_VAR 0 17
52904: ISECT
52905: ST_TO_ADDR
// if not list then
52906: LD_VAR 0 5
52910: NOT
52911: IFFALSE 52915
// exit ;
52913: GO 53743
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52915: LD_VAR 0 12
52919: PUSH
52920: LD_INT 3
52922: EQUAL
52923: IFFALSE 52935
52925: PUSH
52926: LD_INT 49
52928: PUSH
52929: LD_VAR 0 5
52933: IN
52934: AND
52935: IFFALSE 52955
52937: PUSH
52938: LD_INT 31
52940: PPUSH
52941: LD_VAR 0 16
52945: PPUSH
52946: CALL_OW 321
52950: PUSH
52951: LD_INT 2
52953: EQUAL
52954: AND
52955: IFFALSE 53015
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52957: LD_INT 22
52959: PUSH
52960: LD_VAR 0 16
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 35
52971: PUSH
52972: LD_INT 49
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 91
52981: PUSH
52982: LD_VAR 0 1
52986: PUSH
52987: LD_INT 10
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: LIST
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: LIST
52999: PPUSH
53000: CALL_OW 69
53004: NOT
53005: IFFALSE 53015
// weapon := ru_time_lapser ;
53007: LD_ADDR_VAR 0 18
53011: PUSH
53012: LD_INT 49
53014: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
53015: LD_VAR 0 12
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: LD_INT 2
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: IN
53030: IFFALSE 53054
53032: PUSH
53033: LD_INT 11
53035: PUSH
53036: LD_VAR 0 5
53040: IN
53041: IFTRUE 53053
53043: PUSH
53044: LD_INT 30
53046: PUSH
53047: LD_VAR 0 5
53051: IN
53052: OR
53053: AND
53054: IFFALSE 53074
53056: PUSH
53057: LD_INT 6
53059: PPUSH
53060: LD_VAR 0 16
53064: PPUSH
53065: CALL_OW 321
53069: PUSH
53070: LD_INT 2
53072: EQUAL
53073: AND
53074: IFFALSE 53241
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
53076: LD_INT 22
53078: PUSH
53079: LD_VAR 0 16
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 2
53090: PUSH
53091: LD_INT 35
53093: PUSH
53094: LD_INT 11
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 35
53103: PUSH
53104: LD_INT 30
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 91
53118: PUSH
53119: LD_VAR 0 1
53123: PUSH
53124: LD_INT 18
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: LIST
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: LIST
53136: PPUSH
53137: CALL_OW 69
53141: NOT
53142: IFFALSE 53218
53144: PUSH
53145: LD_INT 22
53147: PUSH
53148: LD_VAR 0 16
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 2
53159: PUSH
53160: LD_INT 30
53162: PUSH
53163: LD_INT 32
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 30
53172: PUSH
53173: LD_INT 33
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 91
53187: PUSH
53188: LD_VAR 0 1
53192: PUSH
53193: LD_INT 12
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: LIST
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: LIST
53205: PUSH
53206: EMPTY
53207: LIST
53208: PPUSH
53209: CALL_OW 69
53213: PUSH
53214: LD_INT 2
53216: GREATER
53217: AND
53218: IFFALSE 53241
// weapon := [ us_radar , ar_radar ] [ nat ] ;
53220: LD_ADDR_VAR 0 18
53224: PUSH
53225: LD_INT 11
53227: PUSH
53228: LD_INT 30
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_VAR 0 12
53239: ARRAY
53240: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
53241: LD_VAR 0 18
53245: NOT
53246: IFFALSE 53266
53248: PUSH
53249: LD_INT 40
53251: PPUSH
53252: LD_VAR 0 16
53256: PPUSH
53257: CALL_OW 321
53261: PUSH
53262: LD_INT 2
53264: EQUAL
53265: AND
53266: IFFALSE 53302
53268: PUSH
53269: LD_INT 7
53271: PUSH
53272: LD_VAR 0 5
53276: IN
53277: IFTRUE 53289
53279: PUSH
53280: LD_INT 28
53282: PUSH
53283: LD_VAR 0 5
53287: IN
53288: OR
53289: IFTRUE 53301
53291: PUSH
53292: LD_INT 45
53294: PUSH
53295: LD_VAR 0 5
53299: IN
53300: OR
53301: AND
53302: IFFALSE 53556
// begin hex := GetHexInfo ( x , y ) ;
53304: LD_ADDR_VAR 0 4
53308: PUSH
53309: LD_VAR 0 10
53313: PPUSH
53314: LD_VAR 0 11
53318: PPUSH
53319: CALL_OW 546
53323: ST_TO_ADDR
// if hex [ 1 ] then
53324: LD_VAR 0 4
53328: PUSH
53329: LD_INT 1
53331: ARRAY
53332: IFFALSE 53336
// exit ;
53334: GO 53743
// height := hex [ 2 ] ;
53336: LD_ADDR_VAR 0 15
53340: PUSH
53341: LD_VAR 0 4
53345: PUSH
53346: LD_INT 2
53348: ARRAY
53349: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
53350: LD_ADDR_VAR 0 14
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: LD_INT 2
53360: PUSH
53361: LD_INT 3
53363: PUSH
53364: LD_INT 5
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: ST_TO_ADDR
// for i in tmp do
53373: LD_ADDR_VAR 0 8
53377: PUSH
53378: LD_VAR 0 14
53382: PUSH
53383: FOR_IN
53384: IFFALSE 53554
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53386: LD_ADDR_VAR 0 9
53390: PUSH
53391: LD_VAR 0 10
53395: PPUSH
53396: LD_VAR 0 8
53400: PPUSH
53401: LD_INT 5
53403: PPUSH
53404: CALL_OW 272
53408: PUSH
53409: LD_VAR 0 11
53413: PPUSH
53414: LD_VAR 0 8
53418: PPUSH
53419: LD_INT 5
53421: PPUSH
53422: CALL_OW 273
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53431: LD_VAR 0 9
53435: PUSH
53436: LD_INT 1
53438: ARRAY
53439: PPUSH
53440: LD_VAR 0 9
53444: PUSH
53445: LD_INT 2
53447: ARRAY
53448: PPUSH
53449: CALL_OW 488
53453: IFFALSE 53552
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
53455: LD_ADDR_VAR 0 4
53459: PUSH
53460: LD_VAR 0 9
53464: PUSH
53465: LD_INT 1
53467: ARRAY
53468: PPUSH
53469: LD_VAR 0 9
53473: PUSH
53474: LD_INT 2
53476: ARRAY
53477: PPUSH
53478: CALL_OW 546
53482: ST_TO_ADDR
// if hex [ 1 ] then
53483: LD_VAR 0 4
53487: PUSH
53488: LD_INT 1
53490: ARRAY
53491: IFFALSE 53495
// continue ;
53493: GO 53383
// h := hex [ 2 ] ;
53495: LD_ADDR_VAR 0 13
53499: PUSH
53500: LD_VAR 0 4
53504: PUSH
53505: LD_INT 2
53507: ARRAY
53508: ST_TO_ADDR
// if h + 7 < height then
53509: LD_VAR 0 13
53513: PUSH
53514: LD_INT 7
53516: PLUS
53517: PUSH
53518: LD_VAR 0 15
53522: LESS
53523: IFFALSE 53552
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53525: LD_ADDR_VAR 0 18
53529: PUSH
53530: LD_INT 7
53532: PUSH
53533: LD_INT 28
53535: PUSH
53536: LD_INT 45
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: LIST
53543: PUSH
53544: LD_VAR 0 12
53548: ARRAY
53549: ST_TO_ADDR
// break ;
53550: GO 53554
// end ; end ; end ;
53552: GO 53383
53554: POP
53555: POP
// end ; if not weapon then
53556: LD_VAR 0 18
53560: NOT
53561: IFFALSE 53621
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53563: LD_ADDR_VAR 0 5
53567: PUSH
53568: LD_VAR 0 5
53572: PUSH
53573: LD_INT 11
53575: PUSH
53576: LD_INT 30
53578: PUSH
53579: LD_INT 49
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: LIST
53586: DIFF
53587: ST_TO_ADDR
// if not list then
53588: LD_VAR 0 5
53592: NOT
53593: IFFALSE 53597
// exit ;
53595: GO 53743
// weapon := list [ rand ( 1 , list ) ] ;
53597: LD_ADDR_VAR 0 18
53601: PUSH
53602: LD_VAR 0 5
53606: PUSH
53607: LD_INT 1
53609: PPUSH
53610: LD_VAR 0 5
53614: PPUSH
53615: CALL_OW 12
53619: ARRAY
53620: ST_TO_ADDR
// end ; if weapon then
53621: LD_VAR 0 18
53625: IFFALSE 53743
// begin tmp := CostOfWeapon ( weapon ) ;
53627: LD_ADDR_VAR 0 14
53631: PUSH
53632: LD_VAR 0 18
53636: PPUSH
53637: CALL_OW 451
53641: ST_TO_ADDR
// j := GetBase ( tower ) ;
53642: LD_ADDR_VAR 0 9
53646: PUSH
53647: LD_VAR 0 1
53651: PPUSH
53652: CALL_OW 274
53656: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53657: LD_VAR 0 9
53661: PPUSH
53662: LD_INT 1
53664: PPUSH
53665: CALL_OW 275
53669: PUSH
53670: LD_VAR 0 14
53674: PUSH
53675: LD_INT 1
53677: ARRAY
53678: GREATEREQUAL
53679: IFFALSE 53705
53681: PUSH
53682: LD_VAR 0 9
53686: PPUSH
53687: LD_INT 2
53689: PPUSH
53690: CALL_OW 275
53694: PUSH
53695: LD_VAR 0 14
53699: PUSH
53700: LD_INT 2
53702: ARRAY
53703: GREATEREQUAL
53704: AND
53705: IFFALSE 53731
53707: PUSH
53708: LD_VAR 0 9
53712: PPUSH
53713: LD_INT 3
53715: PPUSH
53716: CALL_OW 275
53720: PUSH
53721: LD_VAR 0 14
53725: PUSH
53726: LD_INT 3
53728: ARRAY
53729: GREATEREQUAL
53730: AND
53731: IFFALSE 53743
// result := weapon ;
53733: LD_ADDR_VAR 0 3
53737: PUSH
53738: LD_VAR 0 18
53742: ST_TO_ADDR
// end ; end ;
53743: LD_VAR 0 3
53747: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53748: LD_INT 0
53750: PPUSH
53751: PPUSH
// result := true ;
53752: LD_ADDR_VAR 0 3
53756: PUSH
53757: LD_INT 1
53759: ST_TO_ADDR
// if array1 = array2 then
53760: LD_VAR 0 1
53764: PUSH
53765: LD_VAR 0 2
53769: EQUAL
53770: IFFALSE 53830
// begin for i = 1 to array1 do
53772: LD_ADDR_VAR 0 4
53776: PUSH
53777: DOUBLE
53778: LD_INT 1
53780: DEC
53781: ST_TO_ADDR
53782: LD_VAR 0 1
53786: PUSH
53787: FOR_TO
53788: IFFALSE 53826
// if array1 [ i ] <> array2 [ i ] then
53790: LD_VAR 0 1
53794: PUSH
53795: LD_VAR 0 4
53799: ARRAY
53800: PUSH
53801: LD_VAR 0 2
53805: PUSH
53806: LD_VAR 0 4
53810: ARRAY
53811: NONEQUAL
53812: IFFALSE 53824
// begin result := false ;
53814: LD_ADDR_VAR 0 3
53818: PUSH
53819: LD_INT 0
53821: ST_TO_ADDR
// break ;
53822: GO 53826
// end ;
53824: GO 53787
53826: POP
53827: POP
// end else
53828: GO 53838
// result := false ;
53830: LD_ADDR_VAR 0 3
53834: PUSH
53835: LD_INT 0
53837: ST_TO_ADDR
// end ;
53838: LD_VAR 0 3
53842: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53843: LD_INT 0
53845: PPUSH
53846: PPUSH
// if not array1 or not array2 then
53847: LD_VAR 0 1
53851: NOT
53852: IFTRUE 53861
53854: PUSH
53855: LD_VAR 0 2
53859: NOT
53860: OR
53861: IFFALSE 53865
// exit ;
53863: GO 53929
// result := true ;
53865: LD_ADDR_VAR 0 3
53869: PUSH
53870: LD_INT 1
53872: ST_TO_ADDR
// for i = 1 to array1 do
53873: LD_ADDR_VAR 0 4
53877: PUSH
53878: DOUBLE
53879: LD_INT 1
53881: DEC
53882: ST_TO_ADDR
53883: LD_VAR 0 1
53887: PUSH
53888: FOR_TO
53889: IFFALSE 53927
// if array1 [ i ] <> array2 [ i ] then
53891: LD_VAR 0 1
53895: PUSH
53896: LD_VAR 0 4
53900: ARRAY
53901: PUSH
53902: LD_VAR 0 2
53906: PUSH
53907: LD_VAR 0 4
53911: ARRAY
53912: NONEQUAL
53913: IFFALSE 53925
// begin result := false ;
53915: LD_ADDR_VAR 0 3
53919: PUSH
53920: LD_INT 0
53922: ST_TO_ADDR
// break ;
53923: GO 53927
// end ;
53925: GO 53888
53927: POP
53928: POP
// end ;
53929: LD_VAR 0 3
53933: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53934: LD_INT 0
53936: PPUSH
53937: PPUSH
53938: PPUSH
// pom := GetBase ( fac ) ;
53939: LD_ADDR_VAR 0 5
53943: PUSH
53944: LD_VAR 0 1
53948: PPUSH
53949: CALL_OW 274
53953: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53954: LD_ADDR_VAR 0 4
53958: PUSH
53959: LD_VAR 0 2
53963: PUSH
53964: LD_INT 1
53966: ARRAY
53967: PPUSH
53968: LD_VAR 0 2
53972: PUSH
53973: LD_INT 2
53975: ARRAY
53976: PPUSH
53977: LD_VAR 0 2
53981: PUSH
53982: LD_INT 3
53984: ARRAY
53985: PPUSH
53986: LD_VAR 0 2
53990: PUSH
53991: LD_INT 4
53993: ARRAY
53994: PPUSH
53995: CALL_OW 449
53999: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54000: LD_ADDR_VAR 0 3
54004: PUSH
54005: LD_VAR 0 5
54009: PPUSH
54010: LD_INT 1
54012: PPUSH
54013: CALL_OW 275
54017: PUSH
54018: LD_VAR 0 4
54022: PUSH
54023: LD_INT 1
54025: ARRAY
54026: GREATEREQUAL
54027: IFFALSE 54053
54029: PUSH
54030: LD_VAR 0 5
54034: PPUSH
54035: LD_INT 2
54037: PPUSH
54038: CALL_OW 275
54042: PUSH
54043: LD_VAR 0 4
54047: PUSH
54048: LD_INT 2
54050: ARRAY
54051: GREATEREQUAL
54052: AND
54053: IFFALSE 54079
54055: PUSH
54056: LD_VAR 0 5
54060: PPUSH
54061: LD_INT 3
54063: PPUSH
54064: CALL_OW 275
54068: PUSH
54069: LD_VAR 0 4
54073: PUSH
54074: LD_INT 3
54076: ARRAY
54077: GREATEREQUAL
54078: AND
54079: ST_TO_ADDR
// end ;
54080: LD_VAR 0 3
54084: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
54085: LD_INT 0
54087: PPUSH
54088: PPUSH
54089: PPUSH
54090: PPUSH
// pom := GetBase ( building ) ;
54091: LD_ADDR_VAR 0 3
54095: PUSH
54096: LD_VAR 0 1
54100: PPUSH
54101: CALL_OW 274
54105: ST_TO_ADDR
// if not pom then
54106: LD_VAR 0 3
54110: NOT
54111: IFFALSE 54115
// exit ;
54113: GO 54289
// btype := GetBType ( building ) ;
54115: LD_ADDR_VAR 0 5
54119: PUSH
54120: LD_VAR 0 1
54124: PPUSH
54125: CALL_OW 266
54129: ST_TO_ADDR
// if btype = b_armoury then
54130: LD_VAR 0 5
54134: PUSH
54135: LD_INT 4
54137: EQUAL
54138: IFFALSE 54148
// btype := b_barracks ;
54140: LD_ADDR_VAR 0 5
54144: PUSH
54145: LD_INT 5
54147: ST_TO_ADDR
// if btype = b_depot then
54148: LD_VAR 0 5
54152: PUSH
54153: LD_INT 0
54155: EQUAL
54156: IFFALSE 54166
// btype := b_warehouse ;
54158: LD_ADDR_VAR 0 5
54162: PUSH
54163: LD_INT 1
54165: ST_TO_ADDR
// if btype = b_workshop then
54166: LD_VAR 0 5
54170: PUSH
54171: LD_INT 2
54173: EQUAL
54174: IFFALSE 54184
// btype := b_factory ;
54176: LD_ADDR_VAR 0 5
54180: PUSH
54181: LD_INT 3
54183: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54184: LD_ADDR_VAR 0 4
54188: PUSH
54189: LD_VAR 0 5
54193: PPUSH
54194: LD_VAR 0 1
54198: PPUSH
54199: CALL_OW 248
54203: PPUSH
54204: CALL_OW 450
54208: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54209: LD_ADDR_VAR 0 2
54213: PUSH
54214: LD_VAR 0 3
54218: PPUSH
54219: LD_INT 1
54221: PPUSH
54222: CALL_OW 275
54226: PUSH
54227: LD_VAR 0 4
54231: PUSH
54232: LD_INT 1
54234: ARRAY
54235: GREATEREQUAL
54236: IFFALSE 54262
54238: PUSH
54239: LD_VAR 0 3
54243: PPUSH
54244: LD_INT 2
54246: PPUSH
54247: CALL_OW 275
54251: PUSH
54252: LD_VAR 0 4
54256: PUSH
54257: LD_INT 2
54259: ARRAY
54260: GREATEREQUAL
54261: AND
54262: IFFALSE 54288
54264: PUSH
54265: LD_VAR 0 3
54269: PPUSH
54270: LD_INT 3
54272: PPUSH
54273: CALL_OW 275
54277: PUSH
54278: LD_VAR 0 4
54282: PUSH
54283: LD_INT 3
54285: ARRAY
54286: GREATEREQUAL
54287: AND
54288: ST_TO_ADDR
// end ;
54289: LD_VAR 0 2
54293: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
54294: LD_INT 0
54296: PPUSH
54297: PPUSH
54298: PPUSH
// pom := GetBase ( building ) ;
54299: LD_ADDR_VAR 0 4
54303: PUSH
54304: LD_VAR 0 1
54308: PPUSH
54309: CALL_OW 274
54313: ST_TO_ADDR
// if not pom then
54314: LD_VAR 0 4
54318: NOT
54319: IFFALSE 54323
// exit ;
54321: GO 54428
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54323: LD_ADDR_VAR 0 5
54327: PUSH
54328: LD_VAR 0 2
54332: PPUSH
54333: LD_VAR 0 1
54337: PPUSH
54338: CALL_OW 248
54342: PPUSH
54343: CALL_OW 450
54347: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54348: LD_ADDR_VAR 0 3
54352: PUSH
54353: LD_VAR 0 4
54357: PPUSH
54358: LD_INT 1
54360: PPUSH
54361: CALL_OW 275
54365: PUSH
54366: LD_VAR 0 5
54370: PUSH
54371: LD_INT 1
54373: ARRAY
54374: GREATEREQUAL
54375: IFFALSE 54401
54377: PUSH
54378: LD_VAR 0 4
54382: PPUSH
54383: LD_INT 2
54385: PPUSH
54386: CALL_OW 275
54390: PUSH
54391: LD_VAR 0 5
54395: PUSH
54396: LD_INT 2
54398: ARRAY
54399: GREATEREQUAL
54400: AND
54401: IFFALSE 54427
54403: PUSH
54404: LD_VAR 0 4
54408: PPUSH
54409: LD_INT 3
54411: PPUSH
54412: CALL_OW 275
54416: PUSH
54417: LD_VAR 0 5
54421: PUSH
54422: LD_INT 3
54424: ARRAY
54425: GREATEREQUAL
54426: AND
54427: ST_TO_ADDR
// end ;
54428: LD_VAR 0 3
54432: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
54433: LD_INT 0
54435: PPUSH
54436: PPUSH
54437: PPUSH
54438: PPUSH
54439: PPUSH
54440: PPUSH
54441: PPUSH
54442: PPUSH
54443: PPUSH
54444: PPUSH
54445: PPUSH
// result := false ;
54446: LD_ADDR_VAR 0 8
54450: PUSH
54451: LD_INT 0
54453: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
54454: LD_VAR 0 5
54458: NOT
54459: IFTRUE 54468
54461: PUSH
54462: LD_VAR 0 1
54466: NOT
54467: OR
54468: IFTRUE 54477
54470: PUSH
54471: LD_VAR 0 2
54475: NOT
54476: OR
54477: IFTRUE 54486
54479: PUSH
54480: LD_VAR 0 3
54484: NOT
54485: OR
54486: IFFALSE 54490
// exit ;
54488: GO 55316
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
54490: LD_ADDR_VAR 0 14
54494: PUSH
54495: LD_VAR 0 1
54499: PPUSH
54500: LD_VAR 0 2
54504: PPUSH
54505: LD_VAR 0 3
54509: PPUSH
54510: LD_VAR 0 4
54514: PPUSH
54515: LD_VAR 0 5
54519: PUSH
54520: LD_INT 1
54522: ARRAY
54523: PPUSH
54524: CALL_OW 248
54528: PPUSH
54529: LD_INT 0
54531: PPUSH
54532: CALL 56597 0 6
54536: ST_TO_ADDR
// if not hexes then
54537: LD_VAR 0 14
54541: NOT
54542: IFFALSE 54546
// exit ;
54544: GO 55316
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54546: LD_ADDR_VAR 0 17
54550: PUSH
54551: LD_VAR 0 5
54555: PPUSH
54556: LD_INT 22
54558: PUSH
54559: LD_VAR 0 13
54563: PPUSH
54564: CALL_OW 255
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: LD_INT 30
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 30
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: LIST
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PPUSH
54605: CALL_OW 72
54609: ST_TO_ADDR
// for i = 1 to hexes do
54610: LD_ADDR_VAR 0 9
54614: PUSH
54615: DOUBLE
54616: LD_INT 1
54618: DEC
54619: ST_TO_ADDR
54620: LD_VAR 0 14
54624: PUSH
54625: FOR_TO
54626: IFFALSE 55314
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54628: LD_ADDR_VAR 0 13
54632: PUSH
54633: LD_VAR 0 14
54637: PUSH
54638: LD_VAR 0 9
54642: ARRAY
54643: PUSH
54644: LD_INT 1
54646: ARRAY
54647: PPUSH
54648: LD_VAR 0 14
54652: PUSH
54653: LD_VAR 0 9
54657: ARRAY
54658: PUSH
54659: LD_INT 2
54661: ARRAY
54662: PPUSH
54663: CALL_OW 428
54667: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54668: LD_VAR 0 14
54672: PUSH
54673: LD_VAR 0 9
54677: ARRAY
54678: PUSH
54679: LD_INT 1
54681: ARRAY
54682: PPUSH
54683: LD_VAR 0 14
54687: PUSH
54688: LD_VAR 0 9
54692: ARRAY
54693: PUSH
54694: LD_INT 2
54696: ARRAY
54697: PPUSH
54698: CALL_OW 351
54702: IFTRUE 54741
54704: PUSH
54705: LD_VAR 0 14
54709: PUSH
54710: LD_VAR 0 9
54714: ARRAY
54715: PUSH
54716: LD_INT 1
54718: ARRAY
54719: PPUSH
54720: LD_VAR 0 14
54724: PUSH
54725: LD_VAR 0 9
54729: ARRAY
54730: PUSH
54731: LD_INT 2
54733: ARRAY
54734: PPUSH
54735: CALL_OW 488
54739: NOT
54740: OR
54741: IFTRUE 54758
54743: PUSH
54744: LD_VAR 0 13
54748: PPUSH
54749: CALL_OW 247
54753: PUSH
54754: LD_INT 3
54756: EQUAL
54757: OR
54758: IFFALSE 54764
// exit ;
54760: POP
54761: POP
54762: GO 55316
// if not tmp then
54764: LD_VAR 0 13
54768: NOT
54769: IFFALSE 54773
// continue ;
54771: GO 54625
// result := true ;
54773: LD_ADDR_VAR 0 8
54777: PUSH
54778: LD_INT 1
54780: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54781: LD_VAR 0 6
54785: IFFALSE 54802
54787: PUSH
54788: LD_VAR 0 13
54792: PPUSH
54793: CALL_OW 247
54797: PUSH
54798: LD_INT 2
54800: EQUAL
54801: AND
54802: IFFALSE 54819
54804: PUSH
54805: LD_VAR 0 13
54809: PPUSH
54810: CALL_OW 263
54814: PUSH
54815: LD_INT 1
54817: EQUAL
54818: AND
54819: IFFALSE 54983
// begin if IsDrivenBy ( tmp ) then
54821: LD_VAR 0 13
54825: PPUSH
54826: CALL_OW 311
54830: IFFALSE 54834
// continue ;
54832: GO 54625
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54834: LD_VAR 0 6
54838: PPUSH
54839: LD_INT 3
54841: PUSH
54842: LD_INT 60
54844: PUSH
54845: EMPTY
54846: LIST
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 3
54854: PUSH
54855: LD_INT 55
54857: PUSH
54858: EMPTY
54859: LIST
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PPUSH
54869: CALL_OW 72
54873: IFFALSE 54981
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54875: LD_ADDR_VAR 0 18
54879: PUSH
54880: LD_VAR 0 6
54884: PPUSH
54885: LD_INT 3
54887: PUSH
54888: LD_INT 60
54890: PUSH
54891: EMPTY
54892: LIST
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 3
54900: PUSH
54901: LD_INT 55
54903: PUSH
54904: EMPTY
54905: LIST
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PPUSH
54915: CALL_OW 72
54919: PUSH
54920: LD_INT 1
54922: ARRAY
54923: ST_TO_ADDR
// if IsInUnit ( driver ) then
54924: LD_VAR 0 18
54928: PPUSH
54929: CALL_OW 310
54933: IFFALSE 54944
// ComExit ( driver ) ;
54935: LD_VAR 0 18
54939: PPUSH
54940: CALL 80587 0 1
// AddComEnterUnit ( driver , tmp ) ;
54944: LD_VAR 0 18
54948: PPUSH
54949: LD_VAR 0 13
54953: PPUSH
54954: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54958: LD_VAR 0 18
54962: PPUSH
54963: LD_VAR 0 7
54967: PPUSH
54968: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54972: LD_VAR 0 18
54976: PPUSH
54977: CALL_OW 181
// end ; continue ;
54981: GO 54625
// end ; if not cleaners or not tmp in cleaners then
54983: LD_VAR 0 6
54987: NOT
54988: IFTRUE 55003
54990: PUSH
54991: LD_VAR 0 13
54995: PUSH
54996: LD_VAR 0 6
55000: IN
55001: NOT
55002: OR
55003: IFFALSE 55312
// begin if dep then
55005: LD_VAR 0 17
55009: IFFALSE 55145
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
55011: LD_ADDR_VAR 0 16
55015: PUSH
55016: LD_VAR 0 17
55020: PUSH
55021: LD_INT 1
55023: ARRAY
55024: PPUSH
55025: CALL_OW 250
55029: PPUSH
55030: LD_VAR 0 17
55034: PUSH
55035: LD_INT 1
55037: ARRAY
55038: PPUSH
55039: CALL_OW 254
55043: PPUSH
55044: LD_INT 5
55046: PPUSH
55047: CALL_OW 272
55051: PUSH
55052: LD_VAR 0 17
55056: PUSH
55057: LD_INT 1
55059: ARRAY
55060: PPUSH
55061: CALL_OW 251
55065: PPUSH
55066: LD_VAR 0 17
55070: PUSH
55071: LD_INT 1
55073: ARRAY
55074: PPUSH
55075: CALL_OW 254
55079: PPUSH
55080: LD_INT 5
55082: PPUSH
55083: CALL_OW 273
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
55092: LD_VAR 0 16
55096: PUSH
55097: LD_INT 1
55099: ARRAY
55100: PPUSH
55101: LD_VAR 0 16
55105: PUSH
55106: LD_INT 2
55108: ARRAY
55109: PPUSH
55110: CALL_OW 488
55114: IFFALSE 55145
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
55116: LD_VAR 0 13
55120: PPUSH
55121: LD_VAR 0 16
55125: PUSH
55126: LD_INT 1
55128: ARRAY
55129: PPUSH
55130: LD_VAR 0 16
55134: PUSH
55135: LD_INT 2
55137: ARRAY
55138: PPUSH
55139: CALL_OW 111
// continue ;
55143: GO 54625
// end ; end ; r := GetDir ( tmp ) ;
55145: LD_ADDR_VAR 0 15
55149: PUSH
55150: LD_VAR 0 13
55154: PPUSH
55155: CALL_OW 254
55159: ST_TO_ADDR
// if r = 5 then
55160: LD_VAR 0 15
55164: PUSH
55165: LD_INT 5
55167: EQUAL
55168: IFFALSE 55178
// r := 0 ;
55170: LD_ADDR_VAR 0 15
55174: PUSH
55175: LD_INT 0
55177: ST_TO_ADDR
// for j = r to 5 do
55178: LD_ADDR_VAR 0 10
55182: PUSH
55183: DOUBLE
55184: LD_VAR 0 15
55188: DEC
55189: ST_TO_ADDR
55190: LD_INT 5
55192: PUSH
55193: FOR_TO
55194: IFFALSE 55310
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
55196: LD_ADDR_VAR 0 11
55200: PUSH
55201: LD_VAR 0 13
55205: PPUSH
55206: CALL_OW 250
55210: PPUSH
55211: LD_VAR 0 10
55215: PPUSH
55216: LD_INT 2
55218: PPUSH
55219: CALL_OW 272
55223: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
55224: LD_ADDR_VAR 0 12
55228: PUSH
55229: LD_VAR 0 13
55233: PPUSH
55234: CALL_OW 251
55238: PPUSH
55239: LD_VAR 0 10
55243: PPUSH
55244: LD_INT 2
55246: PPUSH
55247: CALL_OW 273
55251: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
55252: LD_VAR 0 11
55256: PPUSH
55257: LD_VAR 0 12
55261: PPUSH
55262: CALL_OW 488
55266: IFFALSE 55285
55268: PUSH
55269: LD_VAR 0 11
55273: PPUSH
55274: LD_VAR 0 12
55278: PPUSH
55279: CALL_OW 428
55283: NOT
55284: AND
55285: IFFALSE 55308
// begin ComMoveXY ( tmp , _x , _y ) ;
55287: LD_VAR 0 13
55291: PPUSH
55292: LD_VAR 0 11
55296: PPUSH
55297: LD_VAR 0 12
55301: PPUSH
55302: CALL_OW 111
// break ;
55306: GO 55310
// end ; end ;
55308: GO 55193
55310: POP
55311: POP
// end ; end ;
55312: GO 54625
55314: POP
55315: POP
// end ;
55316: LD_VAR 0 8
55320: RET
// export function BuildingTechInvented ( side , btype ) ; begin
55321: LD_INT 0
55323: PPUSH
// result := true ;
55324: LD_ADDR_VAR 0 3
55328: PUSH
55329: LD_INT 1
55331: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
55332: LD_VAR 0 2
55336: PUSH
55337: LD_INT 24
55339: DOUBLE
55340: EQUAL
55341: IFTRUE 55351
55343: LD_INT 33
55345: DOUBLE
55346: EQUAL
55347: IFTRUE 55351
55349: GO 55376
55351: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
55352: LD_ADDR_VAR 0 3
55356: PUSH
55357: LD_INT 32
55359: PPUSH
55360: LD_VAR 0 1
55364: PPUSH
55365: CALL_OW 321
55369: PUSH
55370: LD_INT 2
55372: EQUAL
55373: ST_TO_ADDR
55374: GO 55692
55376: LD_INT 20
55378: DOUBLE
55379: EQUAL
55380: IFTRUE 55384
55382: GO 55409
55384: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
55385: LD_ADDR_VAR 0 3
55389: PUSH
55390: LD_INT 6
55392: PPUSH
55393: LD_VAR 0 1
55397: PPUSH
55398: CALL_OW 321
55402: PUSH
55403: LD_INT 2
55405: EQUAL
55406: ST_TO_ADDR
55407: GO 55692
55409: LD_INT 22
55411: DOUBLE
55412: EQUAL
55413: IFTRUE 55423
55415: LD_INT 36
55417: DOUBLE
55418: EQUAL
55419: IFTRUE 55423
55421: GO 55448
55423: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
55424: LD_ADDR_VAR 0 3
55428: PUSH
55429: LD_INT 15
55431: PPUSH
55432: LD_VAR 0 1
55436: PPUSH
55437: CALL_OW 321
55441: PUSH
55442: LD_INT 2
55444: EQUAL
55445: ST_TO_ADDR
55446: GO 55692
55448: LD_INT 30
55450: DOUBLE
55451: EQUAL
55452: IFTRUE 55456
55454: GO 55481
55456: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
55457: LD_ADDR_VAR 0 3
55461: PUSH
55462: LD_INT 20
55464: PPUSH
55465: LD_VAR 0 1
55469: PPUSH
55470: CALL_OW 321
55474: PUSH
55475: LD_INT 2
55477: EQUAL
55478: ST_TO_ADDR
55479: GO 55692
55481: LD_INT 28
55483: DOUBLE
55484: EQUAL
55485: IFTRUE 55495
55487: LD_INT 21
55489: DOUBLE
55490: EQUAL
55491: IFTRUE 55495
55493: GO 55520
55495: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
55496: LD_ADDR_VAR 0 3
55500: PUSH
55501: LD_INT 21
55503: PPUSH
55504: LD_VAR 0 1
55508: PPUSH
55509: CALL_OW 321
55513: PUSH
55514: LD_INT 2
55516: EQUAL
55517: ST_TO_ADDR
55518: GO 55692
55520: LD_INT 16
55522: DOUBLE
55523: EQUAL
55524: IFTRUE 55528
55526: GO 55553
55528: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55529: LD_ADDR_VAR 0 3
55533: PUSH
55534: LD_INT 84
55536: PPUSH
55537: LD_VAR 0 1
55541: PPUSH
55542: CALL_OW 321
55546: PUSH
55547: LD_INT 2
55549: EQUAL
55550: ST_TO_ADDR
55551: GO 55692
55553: LD_INT 19
55555: DOUBLE
55556: EQUAL
55557: IFTRUE 55567
55559: LD_INT 23
55561: DOUBLE
55562: EQUAL
55563: IFTRUE 55567
55565: GO 55592
55567: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55568: LD_ADDR_VAR 0 3
55572: PUSH
55573: LD_INT 83
55575: PPUSH
55576: LD_VAR 0 1
55580: PPUSH
55581: CALL_OW 321
55585: PUSH
55586: LD_INT 2
55588: EQUAL
55589: ST_TO_ADDR
55590: GO 55692
55592: LD_INT 17
55594: DOUBLE
55595: EQUAL
55596: IFTRUE 55600
55598: GO 55625
55600: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55601: LD_ADDR_VAR 0 3
55605: PUSH
55606: LD_INT 39
55608: PPUSH
55609: LD_VAR 0 1
55613: PPUSH
55614: CALL_OW 321
55618: PUSH
55619: LD_INT 2
55621: EQUAL
55622: ST_TO_ADDR
55623: GO 55692
55625: LD_INT 18
55627: DOUBLE
55628: EQUAL
55629: IFTRUE 55633
55631: GO 55658
55633: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55634: LD_ADDR_VAR 0 3
55638: PUSH
55639: LD_INT 40
55641: PPUSH
55642: LD_VAR 0 1
55646: PPUSH
55647: CALL_OW 321
55651: PUSH
55652: LD_INT 2
55654: EQUAL
55655: ST_TO_ADDR
55656: GO 55692
55658: LD_INT 27
55660: DOUBLE
55661: EQUAL
55662: IFTRUE 55666
55664: GO 55691
55666: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55667: LD_ADDR_VAR 0 3
55671: PUSH
55672: LD_INT 35
55674: PPUSH
55675: LD_VAR 0 1
55679: PPUSH
55680: CALL_OW 321
55684: PUSH
55685: LD_INT 2
55687: EQUAL
55688: ST_TO_ADDR
55689: GO 55692
55691: POP
// end ;
55692: LD_VAR 0 3
55696: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55697: LD_INT 0
55699: PPUSH
55700: PPUSH
55701: PPUSH
55702: PPUSH
55703: PPUSH
55704: PPUSH
55705: PPUSH
55706: PPUSH
55707: PPUSH
55708: PPUSH
55709: PPUSH
// result := false ;
55710: LD_ADDR_VAR 0 6
55714: PUSH
55715: LD_INT 0
55717: ST_TO_ADDR
// if btype = b_depot then
55718: LD_VAR 0 2
55722: PUSH
55723: LD_INT 0
55725: EQUAL
55726: IFFALSE 55738
// begin result := true ;
55728: LD_ADDR_VAR 0 6
55732: PUSH
55733: LD_INT 1
55735: ST_TO_ADDR
// exit ;
55736: GO 56592
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55738: LD_VAR 0 1
55742: NOT
55743: IFTRUE 55768
55745: PUSH
55746: LD_VAR 0 1
55750: PPUSH
55751: CALL_OW 266
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: IN
55766: NOT
55767: OR
55768: IFTRUE 55777
55770: PUSH
55771: LD_VAR 0 2
55775: NOT
55776: OR
55777: IFTRUE 55813
55779: PUSH
55780: LD_VAR 0 5
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: LD_INT 3
55796: PUSH
55797: LD_INT 4
55799: PUSH
55800: LD_INT 5
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: IN
55811: NOT
55812: OR
55813: IFTRUE 55832
55815: PUSH
55816: LD_VAR 0 3
55820: PPUSH
55821: LD_VAR 0 4
55825: PPUSH
55826: CALL_OW 488
55830: NOT
55831: OR
55832: IFFALSE 55836
// exit ;
55834: GO 56592
// side := GetSide ( depot ) ;
55836: LD_ADDR_VAR 0 9
55840: PUSH
55841: LD_VAR 0 1
55845: PPUSH
55846: CALL_OW 255
55850: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55851: LD_VAR 0 9
55855: PPUSH
55856: LD_VAR 0 2
55860: PPUSH
55861: CALL 55321 0 2
55865: NOT
55866: IFFALSE 55870
// exit ;
55868: GO 56592
// pom := GetBase ( depot ) ;
55870: LD_ADDR_VAR 0 10
55874: PUSH
55875: LD_VAR 0 1
55879: PPUSH
55880: CALL_OW 274
55884: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55885: LD_ADDR_VAR 0 11
55889: PUSH
55890: LD_VAR 0 2
55894: PPUSH
55895: LD_VAR 0 1
55899: PPUSH
55900: CALL_OW 248
55904: PPUSH
55905: CALL_OW 450
55909: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55910: LD_VAR 0 10
55914: PPUSH
55915: LD_INT 1
55917: PPUSH
55918: CALL_OW 275
55922: PUSH
55923: LD_VAR 0 11
55927: PUSH
55928: LD_INT 1
55930: ARRAY
55931: GREATEREQUAL
55932: IFFALSE 55958
55934: PUSH
55935: LD_VAR 0 10
55939: PPUSH
55940: LD_INT 2
55942: PPUSH
55943: CALL_OW 275
55947: PUSH
55948: LD_VAR 0 11
55952: PUSH
55953: LD_INT 2
55955: ARRAY
55956: GREATEREQUAL
55957: AND
55958: IFFALSE 55984
55960: PUSH
55961: LD_VAR 0 10
55965: PPUSH
55966: LD_INT 3
55968: PPUSH
55969: CALL_OW 275
55973: PUSH
55974: LD_VAR 0 11
55978: PUSH
55979: LD_INT 3
55981: ARRAY
55982: GREATEREQUAL
55983: AND
55984: NOT
55985: IFFALSE 55989
// exit ;
55987: GO 56592
// if GetBType ( depot ) = b_depot then
55989: LD_VAR 0 1
55993: PPUSH
55994: CALL_OW 266
55998: PUSH
55999: LD_INT 0
56001: EQUAL
56002: IFFALSE 56014
// dist := 28 else
56004: LD_ADDR_VAR 0 14
56008: PUSH
56009: LD_INT 28
56011: ST_TO_ADDR
56012: GO 56022
// dist := 36 ;
56014: LD_ADDR_VAR 0 14
56018: PUSH
56019: LD_INT 36
56021: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
56022: LD_VAR 0 1
56026: PPUSH
56027: LD_VAR 0 3
56031: PPUSH
56032: LD_VAR 0 4
56036: PPUSH
56037: CALL_OW 297
56041: PUSH
56042: LD_VAR 0 14
56046: GREATER
56047: IFFALSE 56051
// exit ;
56049: GO 56592
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
56051: LD_ADDR_VAR 0 12
56055: PUSH
56056: LD_VAR 0 2
56060: PPUSH
56061: LD_VAR 0 3
56065: PPUSH
56066: LD_VAR 0 4
56070: PPUSH
56071: LD_VAR 0 5
56075: PPUSH
56076: LD_VAR 0 1
56080: PPUSH
56081: CALL_OW 248
56085: PPUSH
56086: LD_INT 0
56088: PPUSH
56089: CALL 56597 0 6
56093: ST_TO_ADDR
// if not hexes then
56094: LD_VAR 0 12
56098: NOT
56099: IFFALSE 56103
// exit ;
56101: GO 56592
// hex := GetHexInfo ( x , y ) ;
56103: LD_ADDR_VAR 0 15
56107: PUSH
56108: LD_VAR 0 3
56112: PPUSH
56113: LD_VAR 0 4
56117: PPUSH
56118: CALL_OW 546
56122: ST_TO_ADDR
// if hex [ 1 ] then
56123: LD_VAR 0 15
56127: PUSH
56128: LD_INT 1
56130: ARRAY
56131: IFFALSE 56135
// exit ;
56133: GO 56592
// height := hex [ 2 ] ;
56135: LD_ADDR_VAR 0 13
56139: PUSH
56140: LD_VAR 0 15
56144: PUSH
56145: LD_INT 2
56147: ARRAY
56148: ST_TO_ADDR
// for i = 1 to hexes do
56149: LD_ADDR_VAR 0 7
56153: PUSH
56154: DOUBLE
56155: LD_INT 1
56157: DEC
56158: ST_TO_ADDR
56159: LD_VAR 0 12
56163: PUSH
56164: FOR_TO
56165: IFFALSE 56509
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56167: LD_VAR 0 12
56171: PUSH
56172: LD_VAR 0 7
56176: ARRAY
56177: PUSH
56178: LD_INT 1
56180: ARRAY
56181: PPUSH
56182: LD_VAR 0 12
56186: PUSH
56187: LD_VAR 0 7
56191: ARRAY
56192: PUSH
56193: LD_INT 2
56195: ARRAY
56196: PPUSH
56197: CALL_OW 488
56201: NOT
56202: IFTRUE 56244
56204: PUSH
56205: LD_VAR 0 12
56209: PUSH
56210: LD_VAR 0 7
56214: ARRAY
56215: PUSH
56216: LD_INT 1
56218: ARRAY
56219: PPUSH
56220: LD_VAR 0 12
56224: PUSH
56225: LD_VAR 0 7
56229: ARRAY
56230: PUSH
56231: LD_INT 2
56233: ARRAY
56234: PPUSH
56235: CALL_OW 428
56239: PUSH
56240: LD_INT 0
56242: GREATER
56243: OR
56244: IFTRUE 56282
56246: PUSH
56247: LD_VAR 0 12
56251: PUSH
56252: LD_VAR 0 7
56256: ARRAY
56257: PUSH
56258: LD_INT 1
56260: ARRAY
56261: PPUSH
56262: LD_VAR 0 12
56266: PUSH
56267: LD_VAR 0 7
56271: ARRAY
56272: PUSH
56273: LD_INT 2
56275: ARRAY
56276: PPUSH
56277: CALL_OW 351
56281: OR
56282: IFFALSE 56288
// exit ;
56284: POP
56285: POP
56286: GO 56592
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56288: LD_ADDR_VAR 0 8
56292: PUSH
56293: LD_VAR 0 12
56297: PUSH
56298: LD_VAR 0 7
56302: ARRAY
56303: PUSH
56304: LD_INT 1
56306: ARRAY
56307: PPUSH
56308: LD_VAR 0 12
56312: PUSH
56313: LD_VAR 0 7
56317: ARRAY
56318: PUSH
56319: LD_INT 2
56321: ARRAY
56322: PPUSH
56323: CALL_OW 546
56327: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
56328: LD_VAR 0 8
56332: PUSH
56333: LD_INT 1
56335: ARRAY
56336: IFTRUE 56358
56338: PUSH
56339: LD_VAR 0 8
56343: PUSH
56344: LD_INT 2
56346: ARRAY
56347: PUSH
56348: LD_VAR 0 13
56352: PUSH
56353: LD_INT 2
56355: PLUS
56356: GREATER
56357: OR
56358: IFTRUE 56380
56360: PUSH
56361: LD_VAR 0 8
56365: PUSH
56366: LD_INT 2
56368: ARRAY
56369: PUSH
56370: LD_VAR 0 13
56374: PUSH
56375: LD_INT 2
56377: MINUS
56378: LESS
56379: OR
56380: IFTRUE 56448
56382: PUSH
56383: LD_VAR 0 8
56387: PUSH
56388: LD_INT 3
56390: ARRAY
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: LD_INT 8
56397: PUSH
56398: LD_INT 9
56400: PUSH
56401: LD_INT 10
56403: PUSH
56404: LD_INT 11
56406: PUSH
56407: LD_INT 12
56409: PUSH
56410: LD_INT 13
56412: PUSH
56413: LD_INT 16
56415: PUSH
56416: LD_INT 17
56418: PUSH
56419: LD_INT 18
56421: PUSH
56422: LD_INT 19
56424: PUSH
56425: LD_INT 20
56427: PUSH
56428: LD_INT 21
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: IN
56446: NOT
56447: OR
56448: IFTRUE 56461
56450: PUSH
56451: LD_VAR 0 8
56455: PUSH
56456: LD_INT 5
56458: ARRAY
56459: NOT
56460: OR
56461: IFTRUE 56501
56463: PUSH
56464: LD_VAR 0 8
56468: PUSH
56469: LD_INT 6
56471: ARRAY
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: LD_INT 2
56478: PUSH
56479: LD_INT 7
56481: PUSH
56482: LD_INT 9
56484: PUSH
56485: LD_INT 10
56487: PUSH
56488: LD_INT 11
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: IN
56499: NOT
56500: OR
56501: IFFALSE 56507
// exit ;
56503: POP
56504: POP
56505: GO 56592
// end ;
56507: GO 56164
56509: POP
56510: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
56511: LD_VAR 0 9
56515: PPUSH
56516: LD_VAR 0 3
56520: PPUSH
56521: LD_VAR 0 4
56525: PPUSH
56526: LD_INT 20
56528: PPUSH
56529: CALL 48411 0 4
56533: PUSH
56534: LD_INT 4
56536: ARRAY
56537: IFFALSE 56541
// exit ;
56539: GO 56592
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56541: LD_VAR 0 2
56545: PUSH
56546: LD_INT 29
56548: PUSH
56549: LD_INT 30
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: IN
56556: IFFALSE 56580
56558: PUSH
56559: LD_VAR 0 3
56563: PPUSH
56564: LD_VAR 0 4
56568: PPUSH
56569: LD_VAR 0 9
56573: PPUSH
56574: CALL_OW 440
56578: NOT
56579: AND
56580: IFFALSE 56584
// exit ;
56582: GO 56592
// result := true ;
56584: LD_ADDR_VAR 0 6
56588: PUSH
56589: LD_INT 1
56591: ST_TO_ADDR
// end ;
56592: LD_VAR 0 6
56596: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56597: LD_INT 0
56599: PPUSH
56600: PPUSH
56601: PPUSH
56602: PPUSH
56603: PPUSH
56604: PPUSH
56605: PPUSH
56606: PPUSH
56607: PPUSH
56608: PPUSH
56609: PPUSH
56610: PPUSH
56611: PPUSH
56612: PPUSH
56613: PPUSH
56614: PPUSH
56615: PPUSH
56616: PPUSH
56617: PPUSH
56618: PPUSH
56619: PPUSH
56620: PPUSH
56621: PPUSH
56622: PPUSH
56623: PPUSH
56624: PPUSH
56625: PPUSH
56626: PPUSH
56627: PPUSH
56628: PPUSH
56629: PPUSH
56630: PPUSH
56631: PPUSH
56632: PPUSH
56633: PPUSH
56634: PPUSH
56635: PPUSH
56636: PPUSH
56637: PPUSH
56638: PPUSH
56639: PPUSH
56640: PPUSH
56641: PPUSH
56642: PPUSH
56643: PPUSH
56644: PPUSH
56645: PPUSH
56646: PPUSH
56647: PPUSH
56648: PPUSH
56649: PPUSH
56650: PPUSH
56651: PPUSH
56652: PPUSH
56653: PPUSH
56654: PPUSH
56655: PPUSH
56656: PPUSH
// result = [ ] ;
56657: LD_ADDR_VAR 0 7
56661: PUSH
56662: EMPTY
56663: ST_TO_ADDR
// temp_list = [ ] ;
56664: LD_ADDR_VAR 0 9
56668: PUSH
56669: EMPTY
56670: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56671: LD_VAR 0 4
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: LD_INT 2
56684: PUSH
56685: LD_INT 3
56687: PUSH
56688: LD_INT 4
56690: PUSH
56691: LD_INT 5
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: IN
56702: NOT
56703: IFTRUE 56746
56705: PUSH
56706: LD_VAR 0 1
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: IN
56721: IFFALSE 56745
56723: PUSH
56724: LD_VAR 0 5
56728: PUSH
56729: LD_INT 1
56731: PUSH
56732: LD_INT 2
56734: PUSH
56735: LD_INT 3
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: LIST
56742: IN
56743: NOT
56744: AND
56745: OR
56746: IFFALSE 56750
// exit ;
56748: GO 75149
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56750: LD_VAR 0 1
56754: PUSH
56755: LD_INT 6
56757: PUSH
56758: LD_INT 7
56760: PUSH
56761: LD_INT 8
56763: PUSH
56764: LD_INT 13
56766: PUSH
56767: LD_INT 12
56769: PUSH
56770: LD_INT 15
56772: PUSH
56773: LD_INT 11
56775: PUSH
56776: LD_INT 14
56778: PUSH
56779: LD_INT 10
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: IN
56793: IFFALSE 56803
// btype = b_lab ;
56795: LD_ADDR_VAR 0 1
56799: PUSH
56800: LD_INT 6
56802: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56803: LD_VAR 0 6
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: LD_INT 2
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: LIST
56821: IN
56822: NOT
56823: IFTRUE 56891
56825: PUSH
56826: LD_VAR 0 1
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: LD_INT 2
56839: PUSH
56840: LD_INT 3
56842: PUSH
56843: LD_INT 6
56845: PUSH
56846: LD_INT 36
56848: PUSH
56849: LD_INT 4
56851: PUSH
56852: LD_INT 5
56854: PUSH
56855: LD_INT 31
56857: PUSH
56858: LD_INT 32
56860: PUSH
56861: LD_INT 33
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: IN
56877: NOT
56878: IFFALSE 56890
56880: PUSH
56881: LD_VAR 0 6
56885: PUSH
56886: LD_INT 1
56888: EQUAL
56889: AND
56890: OR
56891: IFTRUE 56923
56893: PUSH
56894: LD_VAR 0 1
56898: PUSH
56899: LD_INT 2
56901: PUSH
56902: LD_INT 3
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: IN
56909: NOT
56910: IFFALSE 56922
56912: PUSH
56913: LD_VAR 0 6
56917: PUSH
56918: LD_INT 2
56920: EQUAL
56921: AND
56922: OR
56923: IFFALSE 56933
// mode = 0 ;
56925: LD_ADDR_VAR 0 6
56929: PUSH
56930: LD_INT 0
56932: ST_TO_ADDR
// case mode of 0 :
56933: LD_VAR 0 6
56937: PUSH
56938: LD_INT 0
56940: DOUBLE
56941: EQUAL
56942: IFTRUE 56946
56944: GO 68399
56946: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56947: LD_ADDR_VAR 0 11
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 1
57016: NEG
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: LD_INT 2
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: LD_INT 2
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: LD_INT 1
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: LD_INT 3
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: LD_INT 3
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57140: LD_ADDR_VAR 0 12
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: NEG
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 1
57209: NEG
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: LD_INT 1
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 2
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 2
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 2
57263: NEG
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: NEG
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 2
57286: NEG
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 3
57297: NEG
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 3
57308: NEG
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57336: LD_ADDR_VAR 0 13
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 1
57417: NEG
57418: PUSH
57419: LD_INT 2
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: LD_INT 2
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: LD_INT 2
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 2
57459: NEG
57460: PUSH
57461: LD_INT 1
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 2
57471: NEG
57472: PUSH
57473: LD_INT 2
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 2
57483: NEG
57484: PUSH
57485: LD_INT 3
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 3
57495: NEG
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 3
57507: NEG
57508: PUSH
57509: LD_INT 3
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57535: LD_ADDR_VAR 0 14
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: LD_INT 2
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: LD_INT 2
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: LD_INT 2
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: NEG
57682: PUSH
57683: LD_INT 3
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: LD_INT 3
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: LD_INT 2
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57731: LD_ADDR_VAR 0 15
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: LD_INT 1
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 2
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 2
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 2
57865: NEG
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 3
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 3
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57924: LD_ADDR_VAR 0 16
57928: PUSH
57929: LD_INT 0
57931: PUSH
57932: LD_INT 0
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: PUSH
57963: LD_INT 1
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: LD_INT 1
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: NEG
57994: PUSH
57995: LD_INT 1
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: LD_INT 2
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 2
58059: NEG
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 3
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 3
58081: PUSH
58082: LD_INT 3
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 2
58091: PUSH
58092: LD_INT 3
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58117: LD_ADDR_VAR 0 17
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 0
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: LD_INT 2
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 2
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 2
58252: PUSH
58253: LD_INT 2
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: LD_INT 2
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 2
58293: NEG
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 2
58304: NEG
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 2
58316: NEG
58317: PUSH
58318: LD_INT 2
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58347: LD_ADDR_VAR 0 18
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 0
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 1
58405: NEG
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: LD_INT 2
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 2
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 2
58482: PUSH
58483: LD_INT 2
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: LD_INT 2
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: LD_INT 2
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 1
58512: NEG
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 2
58523: NEG
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 2
58534: NEG
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 2
58546: NEG
58547: PUSH
58548: LD_INT 2
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58577: LD_ADDR_VAR 0 19
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: LD_INT 0
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: LD_INT 1
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: LD_INT 1
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: LD_INT 1
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 1
58635: NEG
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: LD_INT 2
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 0
58670: PUSH
58671: LD_INT 2
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 2
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 2
58712: PUSH
58713: LD_INT 2
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: LD_INT 2
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: LD_INT 2
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: LD_INT 1
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 2
58753: NEG
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 2
58764: NEG
58765: PUSH
58766: LD_INT 1
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 2
58776: NEG
58777: PUSH
58778: LD_INT 2
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58807: LD_ADDR_VAR 0 20
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: LD_INT 0
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: LD_INT 1
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 1
58865: NEG
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: LD_INT 2
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 2
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 2
58942: PUSH
58943: LD_INT 2
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: LD_INT 2
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: LD_INT 2
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: NEG
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 2
58994: NEG
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: NEG
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59037: LD_ADDR_VAR 0 21
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: LD_INT 0
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: LD_INT 1
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 1
59106: NEG
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 1
59118: NEG
59119: PUSH
59120: LD_INT 2
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: LD_INT 2
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 2
59152: PUSH
59153: LD_INT 0
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 2
59162: PUSH
59163: LD_INT 1
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 2
59172: PUSH
59173: LD_INT 2
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: LD_INT 2
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: LD_INT 2
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 2
59213: NEG
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 2
59224: NEG
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 2
59236: NEG
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59267: LD_ADDR_VAR 0 22
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 0
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: LD_INT 1
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: LD_INT 1
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: LD_INT 2
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: LD_INT 1
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 2
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 2
59392: PUSH
59393: LD_INT 1
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 2
59402: PUSH
59403: LD_INT 2
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: LD_INT 2
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: NEG
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 2
59443: NEG
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 2
59454: NEG
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 2
59466: NEG
59467: PUSH
59468: LD_INT 2
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59497: LD_ADDR_VAR 0 23
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 0
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 1
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: LD_INT 2
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_INT 2
59593: NEG
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 1
59601: PUSH
59602: LD_INT 1
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 2
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 2
59622: PUSH
59623: LD_INT 1
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 2
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: LD_INT 2
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: LD_INT 2
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 2
59673: NEG
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 2
59684: NEG
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 2
59696: NEG
59697: PUSH
59698: LD_INT 2
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: NEG
59709: PUSH
59710: LD_INT 3
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: LD_INT 3
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: LD_INT 2
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 2
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59777: LD_ADDR_VAR 0 24
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: LD_INT 1
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: PUSH
59816: LD_INT 1
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 0
59825: PUSH
59826: LD_INT 1
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 1
59846: NEG
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: LD_INT 2
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: LD_INT 2
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 2
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 2
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 2
59912: PUSH
59913: LD_INT 2
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 1
59922: PUSH
59923: LD_INT 2
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: LD_INT 2
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: LD_INT 1
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 2
59953: NEG
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 2
59964: NEG
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 2
59976: NEG
59977: PUSH
59978: LD_INT 2
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: LD_INT 2
59991: NEG
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 2
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 3
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 3
60020: PUSH
60021: LD_INT 2
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
60053: LD_ADDR_VAR 0 25
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: LD_INT 1
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: LD_INT 0
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: LD_INT 1
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: PUSH
60124: LD_INT 1
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: LD_INT 2
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: LD_INT 2
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 2
60168: PUSH
60169: LD_INT 0
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 2
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 2
60188: PUSH
60189: LD_INT 2
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: LD_INT 2
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: LD_INT 2
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 1
60218: NEG
60219: PUSH
60220: LD_INT 1
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 2
60229: NEG
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 2
60240: NEG
60241: PUSH
60242: LD_INT 1
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 2
60252: NEG
60253: PUSH
60254: LD_INT 2
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 3
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 3
60274: PUSH
60275: LD_INT 2
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 2
60284: PUSH
60285: LD_INT 3
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: LD_INT 3
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60327: LD_ADDR_VAR 0 26
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 0
60344: PUSH
60345: LD_INT 1
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: LD_INT 0
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 1
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 1
60408: NEG
60409: PUSH
60410: LD_INT 2
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 0
60420: PUSH
60421: LD_INT 2
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 2
60452: PUSH
60453: LD_INT 1
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 2
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: LD_INT 2
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: LD_INT 2
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 1
60492: NEG
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 2
60503: NEG
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 2
60514: NEG
60515: PUSH
60516: LD_INT 1
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 2
60526: NEG
60527: PUSH
60528: LD_INT 2
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 2
60538: PUSH
60539: LD_INT 3
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: PUSH
60549: LD_INT 3
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: LD_INT 2
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 2
60569: NEG
60570: PUSH
60571: LD_INT 1
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60603: LD_ADDR_VAR 0 27
60607: PUSH
60608: LD_INT 0
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 0
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 1
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: PUSH
60642: LD_INT 1
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 1
60661: NEG
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: LD_INT 2
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 0
60696: PUSH
60697: LD_INT 2
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: LD_INT 1
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 2
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 2
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 2
60738: PUSH
60739: LD_INT 2
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 1
60748: PUSH
60749: LD_INT 2
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 0
60758: PUSH
60759: LD_INT 2
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 1
60768: NEG
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 2
60779: NEG
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 2
60790: NEG
60791: PUSH
60792: LD_INT 1
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 2
60802: NEG
60803: PUSH
60804: LD_INT 2
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: LD_INT 2
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 2
60825: NEG
60826: PUSH
60827: LD_INT 1
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 3
60836: NEG
60837: PUSH
60838: LD_INT 1
60840: NEG
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 3
60848: NEG
60849: PUSH
60850: LD_INT 2
60852: NEG
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60883: LD_ADDR_VAR 0 28
60887: PUSH
60888: LD_INT 0
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 1
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: LD_INT 1
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: LD_INT 0
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 1
60952: NEG
60953: PUSH
60954: LD_INT 1
60956: NEG
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: LD_INT 2
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: LD_INT 2
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: PUSH
60988: LD_INT 1
60990: NEG
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 2
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 2
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 2
61018: PUSH
61019: LD_INT 2
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 1
61028: PUSH
61029: LD_INT 2
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 0
61038: PUSH
61039: LD_INT 2
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 1
61048: NEG
61049: PUSH
61050: LD_INT 1
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 2
61059: NEG
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 2
61070: NEG
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 2
61082: NEG
61083: PUSH
61084: LD_INT 2
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 2
61094: NEG
61095: PUSH
61096: LD_INT 3
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 1
61106: NEG
61107: PUSH
61108: LD_INT 3
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 3
61118: NEG
61119: PUSH
61120: LD_INT 1
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 3
61130: NEG
61131: PUSH
61132: LD_INT 2
61134: NEG
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61165: LD_ADDR_VAR 0 29
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 0
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 1
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 1
61203: PUSH
61204: LD_INT 1
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 1
61223: NEG
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 1
61234: NEG
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 1
61246: NEG
61247: PUSH
61248: LD_INT 2
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: LD_INT 2
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 2
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 2
61290: PUSH
61291: LD_INT 1
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: LD_INT 2
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: LD_INT 2
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 1
61320: NEG
61321: PUSH
61322: LD_INT 1
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 2
61331: NEG
61332: PUSH
61333: LD_INT 1
61335: NEG
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 2
61343: NEG
61344: PUSH
61345: LD_INT 2
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 2
61355: NEG
61356: PUSH
61357: LD_INT 3
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 2
61367: PUSH
61368: LD_INT 1
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 3
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: LD_INT 3
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 1
61398: NEG
61399: PUSH
61400: LD_INT 2
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 3
61409: NEG
61410: PUSH
61411: LD_INT 2
61413: NEG
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61444: LD_ADDR_VAR 0 30
61448: PUSH
61449: LD_INT 0
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 0
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: NEG
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 1
61513: NEG
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 1
61525: NEG
61526: PUSH
61527: LD_INT 2
61529: NEG
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 0
61537: PUSH
61538: LD_INT 2
61540: NEG
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 1
61548: PUSH
61549: LD_INT 1
61551: NEG
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 2
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 2
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 2
61579: PUSH
61580: LD_INT 2
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: LD_INT 2
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 1
61599: NEG
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 2
61610: NEG
61611: PUSH
61612: LD_INT 0
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 2
61621: NEG
61622: PUSH
61623: LD_INT 1
61625: NEG
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 1
61633: NEG
61634: PUSH
61635: LD_INT 3
61637: NEG
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 1
61645: PUSH
61646: LD_INT 2
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 3
61656: PUSH
61657: LD_INT 2
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 2
61666: PUSH
61667: LD_INT 3
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 2
61676: NEG
61677: PUSH
61678: LD_INT 1
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 3
61687: NEG
61688: PUSH
61689: LD_INT 1
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61722: LD_ADDR_VAR 0 31
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: LD_INT 1
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: NEG
61804: PUSH
61805: LD_INT 2
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: LD_INT 1
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 2
61826: PUSH
61827: LD_INT 0
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 2
61836: PUSH
61837: LD_INT 1
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 2
61846: PUSH
61847: LD_INT 2
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: LD_INT 2
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 0
61866: PUSH
61867: LD_INT 2
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 1
61876: NEG
61877: PUSH
61878: LD_INT 1
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 2
61887: NEG
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 2
61899: NEG
61900: PUSH
61901: LD_INT 2
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 2
61911: NEG
61912: PUSH
61913: LD_INT 3
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 2
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 3
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 1
61944: PUSH
61945: LD_INT 3
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 1
61954: NEG
61955: PUSH
61956: LD_INT 2
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 3
61965: NEG
61966: PUSH
61967: LD_INT 2
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62000: LD_ADDR_VAR 0 32
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: LD_INT 0
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 1
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 1
62038: PUSH
62039: LD_INT 1
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: LD_INT 1
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 1
62081: NEG
62082: PUSH
62083: LD_INT 2
62085: NEG
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: LD_INT 2
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: LD_INT 1
62107: NEG
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 2
62115: PUSH
62116: LD_INT 1
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 2
62125: PUSH
62126: LD_INT 2
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 1
62135: PUSH
62136: LD_INT 2
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: LD_INT 2
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 1
62155: NEG
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 2
62166: NEG
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 2
62177: NEG
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 1
62189: NEG
62190: PUSH
62191: LD_INT 3
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 1
62201: PUSH
62202: LD_INT 2
62204: NEG
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 3
62212: PUSH
62213: LD_INT 2
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 2
62222: PUSH
62223: LD_INT 3
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 2
62232: NEG
62233: PUSH
62234: LD_INT 1
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 3
62243: NEG
62244: PUSH
62245: LD_INT 1
62247: NEG
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62278: LD_ADDR_VAR 0 33
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 0
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 0
62295: PUSH
62296: LD_INT 1
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 1
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 0
62326: PUSH
62327: LD_INT 1
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 1
62336: NEG
62337: PUSH
62338: LD_INT 0
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 1
62347: NEG
62348: PUSH
62349: LD_INT 1
62351: NEG
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 1
62359: NEG
62360: PUSH
62361: LD_INT 2
62363: NEG
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 1
62371: PUSH
62372: LD_INT 1
62374: NEG
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 2
62382: PUSH
62383: LD_INT 0
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 2
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 1
62402: PUSH
62403: LD_INT 2
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 0
62412: PUSH
62413: LD_INT 2
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: LD_INT 1
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 2
62433: NEG
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 2
62444: NEG
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 2
62456: NEG
62457: PUSH
62458: LD_INT 2
62460: NEG
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 2
62468: NEG
62469: PUSH
62470: LD_INT 3
62472: NEG
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 2
62480: PUSH
62481: LD_INT 1
62483: NEG
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 3
62491: PUSH
62492: LD_INT 1
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 1
62501: PUSH
62502: LD_INT 3
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 1
62511: NEG
62512: PUSH
62513: LD_INT 2
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 3
62522: NEG
62523: PUSH
62524: LD_INT 2
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62557: LD_ADDR_VAR 0 34
62561: PUSH
62562: LD_INT 0
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: LD_INT 1
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 1
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 1
62595: PUSH
62596: LD_INT 1
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 0
62605: PUSH
62606: LD_INT 1
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 1
62615: NEG
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 1
62626: NEG
62627: PUSH
62628: LD_INT 1
62630: NEG
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 1
62638: NEG
62639: PUSH
62640: LD_INT 2
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 0
62650: PUSH
62651: LD_INT 2
62653: NEG
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 1
62661: PUSH
62662: LD_INT 1
62664: NEG
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 2
62672: PUSH
62673: LD_INT 1
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 2
62682: PUSH
62683: LD_INT 2
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 1
62692: PUSH
62693: LD_INT 2
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 1
62702: NEG
62703: PUSH
62704: LD_INT 1
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 2
62713: NEG
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 2
62724: NEG
62725: PUSH
62726: LD_INT 1
62728: NEG
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 2
62736: NEG
62737: PUSH
62738: LD_INT 2
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 1
62748: NEG
62749: PUSH
62750: LD_INT 3
62752: NEG
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 1
62760: PUSH
62761: LD_INT 2
62763: NEG
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 3
62771: PUSH
62772: LD_INT 2
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 2
62781: PUSH
62782: LD_INT 3
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 2
62791: NEG
62792: PUSH
62793: LD_INT 1
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 3
62802: NEG
62803: PUSH
62804: LD_INT 1
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62837: LD_ADDR_VAR 0 35
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: LD_INT 0
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: LD_INT 1
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 1
62865: PUSH
62866: LD_INT 0
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: LD_INT 1
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 1
62895: NEG
62896: PUSH
62897: LD_INT 0
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: PUSH
62908: LD_INT 1
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 2
62918: PUSH
62919: LD_INT 1
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 2
62928: NEG
62929: PUSH
62930: LD_INT 1
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62949: LD_ADDR_VAR 0 36
62953: PUSH
62954: LD_INT 0
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: LD_INT 1
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 1
62977: PUSH
62978: LD_INT 0
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: LD_INT 1
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 0
62997: PUSH
62998: LD_INT 1
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 1
63007: NEG
63008: PUSH
63009: LD_INT 0
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 1
63018: NEG
63019: PUSH
63020: LD_INT 1
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 1
63030: NEG
63031: PUSH
63032: LD_INT 2
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 1
63042: PUSH
63043: LD_INT 2
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63061: LD_ADDR_VAR 0 37
63065: PUSH
63066: LD_INT 0
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 0
63078: PUSH
63079: LD_INT 1
63081: NEG
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 1
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 1
63099: PUSH
63100: LD_INT 1
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 0
63109: PUSH
63110: LD_INT 1
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 1
63119: NEG
63120: PUSH
63121: LD_INT 0
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 1
63130: NEG
63131: PUSH
63132: LD_INT 1
63134: NEG
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 1
63142: PUSH
63143: LD_INT 1
63145: NEG
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 1
63153: NEG
63154: PUSH
63155: LD_INT 1
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63173: LD_ADDR_VAR 0 38
63177: PUSH
63178: LD_INT 0
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: LD_INT 1
63193: NEG
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 1
63201: PUSH
63202: LD_INT 0
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 1
63211: PUSH
63212: LD_INT 1
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 1
63231: NEG
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: LD_INT 1
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 2
63254: PUSH
63255: LD_INT 1
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 2
63264: NEG
63265: PUSH
63266: LD_INT 1
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63285: LD_ADDR_VAR 0 39
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: LD_INT 1
63305: NEG
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: LD_INT 0
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 0
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: LD_INT 0
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 1
63354: NEG
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 1
63366: NEG
63367: PUSH
63368: LD_INT 2
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: PUSH
63379: LD_INT 2
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63397: LD_ADDR_VAR 0 40
63401: PUSH
63402: LD_INT 0
63404: PUSH
63405: LD_INT 0
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 0
63414: PUSH
63415: LD_INT 1
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 1
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 1
63435: PUSH
63436: LD_INT 1
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 0
63445: PUSH
63446: LD_INT 1
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 1
63455: NEG
63456: PUSH
63457: LD_INT 0
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 1
63466: NEG
63467: PUSH
63468: LD_INT 1
63470: NEG
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: PUSH
63479: LD_INT 1
63481: NEG
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 1
63489: NEG
63490: PUSH
63491: LD_INT 1
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63509: LD_ADDR_VAR 0 41
63513: PUSH
63514: LD_INT 0
63516: PUSH
63517: LD_INT 0
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 0
63526: PUSH
63527: LD_INT 1
63529: NEG
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 1
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 1
63547: PUSH
63548: LD_INT 1
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 0
63557: PUSH
63558: LD_INT 1
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 1
63567: NEG
63568: PUSH
63569: LD_INT 0
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 1
63578: NEG
63579: PUSH
63580: LD_INT 1
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 1
63590: NEG
63591: PUSH
63592: LD_INT 2
63594: NEG
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 1
63602: PUSH
63603: LD_INT 1
63605: NEG
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 2
63613: PUSH
63614: LD_INT 0
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 2
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 2
63633: PUSH
63634: LD_INT 2
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: LD_INT 2
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 1
63653: NEG
63654: PUSH
63655: LD_INT 1
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 2
63664: NEG
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 2
63675: NEG
63676: PUSH
63677: LD_INT 1
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 2
63687: NEG
63688: PUSH
63689: LD_INT 2
63691: NEG
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 2
63699: NEG
63700: PUSH
63701: LD_INT 3
63703: NEG
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 2
63711: PUSH
63712: LD_INT 1
63714: NEG
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 3
63722: PUSH
63723: LD_INT 0
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 3
63732: PUSH
63733: LD_INT 1
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 3
63742: PUSH
63743: LD_INT 2
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 3
63752: PUSH
63753: LD_INT 3
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 2
63762: PUSH
63763: LD_INT 3
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 2
63772: NEG
63773: PUSH
63774: LD_INT 1
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 3
63783: NEG
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 3
63794: NEG
63795: PUSH
63796: LD_INT 1
63798: NEG
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 3
63806: NEG
63807: PUSH
63808: LD_INT 2
63810: NEG
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 3
63818: NEG
63819: PUSH
63820: LD_INT 3
63822: NEG
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63859: LD_ADDR_VAR 0 42
63863: PUSH
63864: LD_INT 0
63866: PUSH
63867: LD_INT 0
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 1
63887: PUSH
63888: LD_INT 0
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 1
63897: PUSH
63898: LD_INT 1
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 0
63907: PUSH
63908: LD_INT 1
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 1
63917: NEG
63918: PUSH
63919: LD_INT 0
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 1
63928: NEG
63929: PUSH
63930: LD_INT 1
63932: NEG
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 1
63940: NEG
63941: PUSH
63942: LD_INT 2
63944: NEG
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 0
63952: PUSH
63953: LD_INT 2
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 1
63963: PUSH
63964: LD_INT 1
63966: NEG
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 2
63974: PUSH
63975: LD_INT 1
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 2
63984: PUSH
63985: LD_INT 2
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 1
63994: PUSH
63995: LD_INT 2
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: LD_INT 2
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 1
64014: NEG
64015: PUSH
64016: LD_INT 1
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 2
64025: NEG
64026: PUSH
64027: LD_INT 1
64029: NEG
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 2
64037: NEG
64038: PUSH
64039: LD_INT 2
64041: NEG
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 2
64049: NEG
64050: PUSH
64051: LD_INT 3
64053: NEG
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 1
64061: NEG
64062: PUSH
64063: LD_INT 3
64065: NEG
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 0
64073: PUSH
64074: LD_INT 3
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 1
64084: PUSH
64085: LD_INT 2
64087: NEG
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 3
64095: PUSH
64096: LD_INT 2
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 3
64105: PUSH
64106: LD_INT 3
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 2
64115: PUSH
64116: LD_INT 3
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 1
64125: PUSH
64126: LD_INT 3
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 0
64135: PUSH
64136: LD_INT 3
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 1
64145: NEG
64146: PUSH
64147: LD_INT 2
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 3
64156: NEG
64157: PUSH
64158: LD_INT 2
64160: NEG
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 3
64168: NEG
64169: PUSH
64170: LD_INT 3
64172: NEG
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64209: LD_ADDR_VAR 0 43
64213: PUSH
64214: LD_INT 0
64216: PUSH
64217: LD_INT 0
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: LD_INT 1
64229: NEG
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: PUSH
64238: LD_INT 0
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 1
64247: PUSH
64248: LD_INT 1
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: LD_INT 1
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 1
64267: NEG
64268: PUSH
64269: LD_INT 0
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 1
64278: NEG
64279: PUSH
64280: LD_INT 1
64282: NEG
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 1
64290: NEG
64291: PUSH
64292: LD_INT 2
64294: NEG
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 0
64302: PUSH
64303: LD_INT 2
64305: NEG
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 1
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 2
64324: PUSH
64325: LD_INT 0
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 2
64334: PUSH
64335: LD_INT 1
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 1
64344: PUSH
64345: LD_INT 2
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 0
64354: PUSH
64355: LD_INT 2
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 1
64364: NEG
64365: PUSH
64366: LD_INT 1
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 2
64375: NEG
64376: PUSH
64377: LD_INT 0
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 2
64386: NEG
64387: PUSH
64388: LD_INT 1
64390: NEG
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: LD_INT 3
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: LD_INT 3
64413: NEG
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 1
64421: PUSH
64422: LD_INT 2
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 2
64432: PUSH
64433: LD_INT 1
64435: NEG
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 3
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 3
64453: PUSH
64454: LD_INT 1
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 1
64463: PUSH
64464: LD_INT 3
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: LD_INT 3
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 1
64483: NEG
64484: PUSH
64485: LD_INT 2
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 2
64494: NEG
64495: PUSH
64496: LD_INT 1
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 3
64505: NEG
64506: PUSH
64507: LD_INT 0
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 3
64516: NEG
64517: PUSH
64518: LD_INT 1
64520: NEG
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64557: LD_ADDR_VAR 0 44
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: LD_INT 0
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 0
64574: PUSH
64575: LD_INT 1
64577: NEG
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 1
64585: PUSH
64586: LD_INT 0
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: LD_INT 1
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 0
64605: PUSH
64606: LD_INT 1
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 1
64615: NEG
64616: PUSH
64617: LD_INT 0
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 1
64626: NEG
64627: PUSH
64628: LD_INT 1
64630: NEG
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 1
64638: NEG
64639: PUSH
64640: LD_INT 2
64642: NEG
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: LD_INT 1
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 2
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 2
64671: PUSH
64672: LD_INT 1
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 2
64681: PUSH
64682: LD_INT 2
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 1
64691: PUSH
64692: LD_INT 2
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 1
64701: NEG
64702: PUSH
64703: LD_INT 1
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 2
64712: NEG
64713: PUSH
64714: LD_INT 0
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 2
64723: NEG
64724: PUSH
64725: LD_INT 1
64727: NEG
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 2
64735: NEG
64736: PUSH
64737: LD_INT 2
64739: NEG
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 2
64747: NEG
64748: PUSH
64749: LD_INT 3
64751: NEG
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 2
64759: PUSH
64760: LD_INT 1
64762: NEG
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 3
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 3
64780: PUSH
64781: LD_INT 1
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 3
64790: PUSH
64791: LD_INT 2
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 3
64800: PUSH
64801: LD_INT 3
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 2
64810: PUSH
64811: LD_INT 3
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 2
64820: NEG
64821: PUSH
64822: LD_INT 1
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 3
64831: NEG
64832: PUSH
64833: LD_INT 0
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 3
64842: NEG
64843: PUSH
64844: LD_INT 1
64846: NEG
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 3
64854: NEG
64855: PUSH
64856: LD_INT 2
64858: NEG
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 3
64866: NEG
64867: PUSH
64868: LD_INT 3
64870: NEG
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64907: LD_ADDR_VAR 0 45
64911: PUSH
64912: LD_INT 0
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 0
64924: PUSH
64925: LD_INT 1
64927: NEG
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 1
64935: PUSH
64936: LD_INT 0
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 1
64945: PUSH
64946: LD_INT 1
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 0
64955: PUSH
64956: LD_INT 1
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 1
64965: NEG
64966: PUSH
64967: LD_INT 0
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 1
64976: NEG
64977: PUSH
64978: LD_INT 1
64980: NEG
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 1
64988: NEG
64989: PUSH
64990: LD_INT 2
64992: NEG
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 0
65000: PUSH
65001: LD_INT 2
65003: NEG
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 1
65011: PUSH
65012: LD_INT 1
65014: NEG
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 2
65022: PUSH
65023: LD_INT 1
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 2
65032: PUSH
65033: LD_INT 2
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 1
65042: PUSH
65043: LD_INT 2
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 0
65052: PUSH
65053: LD_INT 2
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 1
65062: NEG
65063: PUSH
65064: LD_INT 1
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 2
65073: NEG
65074: PUSH
65075: LD_INT 1
65077: NEG
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 2
65085: NEG
65086: PUSH
65087: LD_INT 2
65089: NEG
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 2
65097: NEG
65098: PUSH
65099: LD_INT 3
65101: NEG
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 1
65109: NEG
65110: PUSH
65111: LD_INT 3
65113: NEG
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 0
65121: PUSH
65122: LD_INT 3
65124: NEG
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 1
65132: PUSH
65133: LD_INT 2
65135: NEG
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 3
65143: PUSH
65144: LD_INT 2
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 3
65153: PUSH
65154: LD_INT 3
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 2
65163: PUSH
65164: LD_INT 3
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 1
65173: PUSH
65174: LD_INT 3
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 0
65183: PUSH
65184: LD_INT 3
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 1
65193: NEG
65194: PUSH
65195: LD_INT 2
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 3
65204: NEG
65205: PUSH
65206: LD_INT 2
65208: NEG
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 3
65216: NEG
65217: PUSH
65218: LD_INT 3
65220: NEG
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65257: LD_ADDR_VAR 0 46
65261: PUSH
65262: LD_INT 0
65264: PUSH
65265: LD_INT 0
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 0
65274: PUSH
65275: LD_INT 1
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 1
65285: PUSH
65286: LD_INT 0
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 1
65295: PUSH
65296: LD_INT 1
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 0
65305: PUSH
65306: LD_INT 1
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 1
65315: NEG
65316: PUSH
65317: LD_INT 0
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 1
65326: NEG
65327: PUSH
65328: LD_INT 1
65330: NEG
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 1
65338: NEG
65339: PUSH
65340: LD_INT 2
65342: NEG
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 0
65350: PUSH
65351: LD_INT 2
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 1
65361: PUSH
65362: LD_INT 1
65364: NEG
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 2
65372: PUSH
65373: LD_INT 0
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 2
65382: PUSH
65383: LD_INT 1
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 1
65392: PUSH
65393: LD_INT 2
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 0
65402: PUSH
65403: LD_INT 2
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 1
65412: NEG
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 2
65423: NEG
65424: PUSH
65425: LD_INT 0
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 2
65434: NEG
65435: PUSH
65436: LD_INT 1
65438: NEG
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 1
65446: NEG
65447: PUSH
65448: LD_INT 3
65450: NEG
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 0
65458: PUSH
65459: LD_INT 3
65461: NEG
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 1
65469: PUSH
65470: LD_INT 2
65472: NEG
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 2
65480: PUSH
65481: LD_INT 1
65483: NEG
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 3
65491: PUSH
65492: LD_INT 0
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 3
65501: PUSH
65502: LD_INT 1
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 1
65511: PUSH
65512: LD_INT 3
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 0
65521: PUSH
65522: LD_INT 3
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 1
65531: NEG
65532: PUSH
65533: LD_INT 2
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 2
65542: NEG
65543: PUSH
65544: LD_INT 1
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 3
65553: NEG
65554: PUSH
65555: LD_INT 0
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 3
65564: NEG
65565: PUSH
65566: LD_INT 1
65568: NEG
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65605: LD_ADDR_VAR 0 47
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: LD_INT 0
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 0
65622: PUSH
65623: LD_INT 1
65625: NEG
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 1
65633: PUSH
65634: LD_INT 0
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 1
65643: PUSH
65644: LD_INT 1
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 0
65653: PUSH
65654: LD_INT 1
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 1
65663: NEG
65664: PUSH
65665: LD_INT 0
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 1
65674: NEG
65675: PUSH
65676: LD_INT 1
65678: NEG
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 1
65686: NEG
65687: PUSH
65688: LD_INT 2
65690: NEG
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 0
65698: PUSH
65699: LD_INT 2
65701: NEG
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 1
65709: PUSH
65710: LD_INT 1
65712: NEG
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 2
65720: NEG
65721: PUSH
65722: LD_INT 1
65724: NEG
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 2
65732: NEG
65733: PUSH
65734: LD_INT 2
65736: NEG
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65756: LD_ADDR_VAR 0 48
65760: PUSH
65761: LD_INT 0
65763: PUSH
65764: LD_INT 0
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 0
65773: PUSH
65774: LD_INT 1
65776: NEG
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 1
65784: PUSH
65785: LD_INT 0
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 1
65794: PUSH
65795: LD_INT 1
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 0
65804: PUSH
65805: LD_INT 1
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 1
65814: NEG
65815: PUSH
65816: LD_INT 0
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 1
65825: NEG
65826: PUSH
65827: LD_INT 1
65829: NEG
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 1
65837: NEG
65838: PUSH
65839: LD_INT 2
65841: NEG
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 0
65849: PUSH
65850: LD_INT 2
65852: NEG
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 1
65860: PUSH
65861: LD_INT 1
65863: NEG
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 2
65871: PUSH
65872: LD_INT 0
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 2
65881: PUSH
65882: LD_INT 1
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65903: LD_ADDR_VAR 0 49
65907: PUSH
65908: LD_INT 0
65910: PUSH
65911: LD_INT 0
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 0
65920: PUSH
65921: LD_INT 1
65923: NEG
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 1
65931: PUSH
65932: LD_INT 0
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 1
65941: PUSH
65942: LD_INT 1
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 0
65951: PUSH
65952: LD_INT 1
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 1
65961: NEG
65962: PUSH
65963: LD_INT 0
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 1
65972: NEG
65973: PUSH
65974: LD_INT 1
65976: NEG
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 1
65984: PUSH
65985: LD_INT 1
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 2
65995: PUSH
65996: LD_INT 0
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 2
66005: PUSH
66006: LD_INT 1
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 2
66015: PUSH
66016: LD_INT 2
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 1
66025: PUSH
66026: LD_INT 2
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66047: LD_ADDR_VAR 0 50
66051: PUSH
66052: LD_INT 0
66054: PUSH
66055: LD_INT 0
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 0
66064: PUSH
66065: LD_INT 1
66067: NEG
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 1
66075: PUSH
66076: LD_INT 0
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 1
66085: PUSH
66086: LD_INT 1
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 0
66095: PUSH
66096: LD_INT 1
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 1
66105: NEG
66106: PUSH
66107: LD_INT 0
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 1
66116: NEG
66117: PUSH
66118: LD_INT 1
66120: NEG
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 2
66128: PUSH
66129: LD_INT 1
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 2
66138: PUSH
66139: LD_INT 2
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 1
66148: PUSH
66149: LD_INT 2
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 0
66158: PUSH
66159: LD_INT 2
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 1
66168: NEG
66169: PUSH
66170: LD_INT 1
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66191: LD_ADDR_VAR 0 51
66195: PUSH
66196: LD_INT 0
66198: PUSH
66199: LD_INT 0
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 0
66208: PUSH
66209: LD_INT 1
66211: NEG
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 1
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 1
66229: PUSH
66230: LD_INT 1
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 0
66239: PUSH
66240: LD_INT 1
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 1
66249: NEG
66250: PUSH
66251: LD_INT 0
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 1
66260: NEG
66261: PUSH
66262: LD_INT 1
66264: NEG
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 1
66272: PUSH
66273: LD_INT 2
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 0
66282: PUSH
66283: LD_INT 2
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 1
66292: NEG
66293: PUSH
66294: LD_INT 1
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 2
66303: NEG
66304: PUSH
66305: LD_INT 0
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 2
66314: NEG
66315: PUSH
66316: LD_INT 1
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66338: LD_ADDR_VAR 0 52
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 0
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 1
66366: PUSH
66367: LD_INT 0
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 1
66376: PUSH
66377: LD_INT 1
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 0
66386: PUSH
66387: LD_INT 1
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 1
66396: NEG
66397: PUSH
66398: LD_INT 0
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 1
66407: NEG
66408: PUSH
66409: LD_INT 1
66411: NEG
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 1
66419: NEG
66420: PUSH
66421: LD_INT 2
66423: NEG
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 1
66431: NEG
66432: PUSH
66433: LD_INT 1
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 2
66442: NEG
66443: PUSH
66444: LD_INT 0
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 2
66453: NEG
66454: PUSH
66455: LD_INT 1
66457: NEG
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 2
66465: NEG
66466: PUSH
66467: LD_INT 2
66469: NEG
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66489: LD_ADDR_VAR 0 53
66493: PUSH
66494: LD_INT 0
66496: PUSH
66497: LD_INT 0
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 0
66506: PUSH
66507: LD_INT 1
66509: NEG
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 1
66517: PUSH
66518: LD_INT 0
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 1
66527: PUSH
66528: LD_INT 1
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 0
66537: PUSH
66538: LD_INT 1
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 1
66547: NEG
66548: PUSH
66549: LD_INT 0
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 1
66558: NEG
66559: PUSH
66560: LD_INT 1
66562: NEG
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 1
66570: NEG
66571: PUSH
66572: LD_INT 2
66574: NEG
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 0
66582: PUSH
66583: LD_INT 2
66585: NEG
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 1
66593: PUSH
66594: LD_INT 1
66596: NEG
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 2
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 2
66614: PUSH
66615: LD_INT 1
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 2
66624: PUSH
66625: LD_INT 2
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 1
66634: PUSH
66635: LD_INT 2
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 0
66644: PUSH
66645: LD_INT 2
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 1
66654: NEG
66655: PUSH
66656: LD_INT 1
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 2
66665: NEG
66666: PUSH
66667: LD_INT 0
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 2
66676: NEG
66677: PUSH
66678: LD_INT 1
66680: NEG
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 2
66688: NEG
66689: PUSH
66690: LD_INT 2
66692: NEG
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66719: LD_ADDR_VAR 0 54
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: LD_INT 0
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 0
66736: PUSH
66737: LD_INT 1
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 1
66747: PUSH
66748: LD_INT 0
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 1
66757: PUSH
66758: LD_INT 1
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 0
66767: PUSH
66768: LD_INT 1
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 1
66777: NEG
66778: PUSH
66779: LD_INT 0
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 1
66788: NEG
66789: PUSH
66790: LD_INT 1
66792: NEG
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 1
66800: NEG
66801: PUSH
66802: LD_INT 2
66804: NEG
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PUSH
66810: LD_INT 0
66812: PUSH
66813: LD_INT 2
66815: NEG
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: LD_INT 1
66823: PUSH
66824: LD_INT 1
66826: NEG
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 2
66834: PUSH
66835: LD_INT 0
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 2
66844: PUSH
66845: LD_INT 1
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 2
66854: PUSH
66855: LD_INT 2
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 1
66864: PUSH
66865: LD_INT 2
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 0
66874: PUSH
66875: LD_INT 2
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 1
66884: NEG
66885: PUSH
66886: LD_INT 1
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 2
66895: NEG
66896: PUSH
66897: LD_INT 0
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 2
66906: NEG
66907: PUSH
66908: LD_INT 1
66910: NEG
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 2
66918: NEG
66919: PUSH
66920: LD_INT 2
66922: NEG
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66949: LD_ADDR_VAR 0 55
66953: PUSH
66954: LD_INT 0
66956: PUSH
66957: LD_INT 0
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: LD_INT 1
66969: NEG
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 1
66977: PUSH
66978: LD_INT 0
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 1
66987: PUSH
66988: LD_INT 1
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 0
66997: PUSH
66998: LD_INT 1
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 1
67007: NEG
67008: PUSH
67009: LD_INT 0
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 1
67018: NEG
67019: PUSH
67020: LD_INT 1
67022: NEG
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 1
67030: NEG
67031: PUSH
67032: LD_INT 2
67034: NEG
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 0
67042: PUSH
67043: LD_INT 2
67045: NEG
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 1
67053: PUSH
67054: LD_INT 1
67056: NEG
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 2
67064: PUSH
67065: LD_INT 0
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 2
67074: PUSH
67075: LD_INT 1
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 2
67084: PUSH
67085: LD_INT 2
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 1
67094: PUSH
67095: LD_INT 2
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 0
67104: PUSH
67105: LD_INT 2
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 1
67114: NEG
67115: PUSH
67116: LD_INT 1
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 2
67125: NEG
67126: PUSH
67127: LD_INT 0
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 2
67136: NEG
67137: PUSH
67138: LD_INT 1
67140: NEG
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 2
67148: NEG
67149: PUSH
67150: LD_INT 2
67152: NEG
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67179: LD_ADDR_VAR 0 56
67183: PUSH
67184: LD_INT 0
67186: PUSH
67187: LD_INT 0
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 0
67196: PUSH
67197: LD_INT 1
67199: NEG
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 1
67207: PUSH
67208: LD_INT 0
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 1
67217: PUSH
67218: LD_INT 1
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 0
67227: PUSH
67228: LD_INT 1
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 1
67237: NEG
67238: PUSH
67239: LD_INT 0
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 1
67248: NEG
67249: PUSH
67250: LD_INT 1
67252: NEG
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 1
67260: NEG
67261: PUSH
67262: LD_INT 2
67264: NEG
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 0
67272: PUSH
67273: LD_INT 2
67275: NEG
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 1
67283: PUSH
67284: LD_INT 1
67286: NEG
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 2
67294: PUSH
67295: LD_INT 0
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 2
67304: PUSH
67305: LD_INT 1
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 2
67314: PUSH
67315: LD_INT 2
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 1
67324: PUSH
67325: LD_INT 2
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 0
67334: PUSH
67335: LD_INT 2
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 1
67344: NEG
67345: PUSH
67346: LD_INT 1
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 2
67355: NEG
67356: PUSH
67357: LD_INT 0
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 2
67366: NEG
67367: PUSH
67368: LD_INT 1
67370: NEG
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 2
67378: NEG
67379: PUSH
67380: LD_INT 2
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67409: LD_ADDR_VAR 0 57
67413: PUSH
67414: LD_INT 0
67416: PUSH
67417: LD_INT 0
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 0
67426: PUSH
67427: LD_INT 1
67429: NEG
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 1
67437: PUSH
67438: LD_INT 0
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 1
67447: PUSH
67448: LD_INT 1
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: LD_INT 1
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 1
67467: NEG
67468: PUSH
67469: LD_INT 0
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 1
67478: NEG
67479: PUSH
67480: LD_INT 1
67482: NEG
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 1
67490: NEG
67491: PUSH
67492: LD_INT 2
67494: NEG
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 0
67502: PUSH
67503: LD_INT 2
67505: NEG
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 1
67513: PUSH
67514: LD_INT 1
67516: NEG
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 2
67524: PUSH
67525: LD_INT 0
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 2
67534: PUSH
67535: LD_INT 1
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 2
67544: PUSH
67545: LD_INT 2
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 1
67554: PUSH
67555: LD_INT 2
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 0
67564: PUSH
67565: LD_INT 2
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 1
67574: NEG
67575: PUSH
67576: LD_INT 1
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 2
67585: NEG
67586: PUSH
67587: LD_INT 0
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 2
67596: NEG
67597: PUSH
67598: LD_INT 1
67600: NEG
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 2
67608: NEG
67609: PUSH
67610: LD_INT 2
67612: NEG
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67639: LD_ADDR_VAR 0 58
67643: PUSH
67644: LD_INT 0
67646: PUSH
67647: LD_INT 0
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 0
67656: PUSH
67657: LD_INT 1
67659: NEG
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 1
67667: PUSH
67668: LD_INT 0
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 1
67677: PUSH
67678: LD_INT 1
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 0
67687: PUSH
67688: LD_INT 1
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 1
67697: NEG
67698: PUSH
67699: LD_INT 0
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 1
67708: NEG
67709: PUSH
67710: LD_INT 1
67712: NEG
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 1
67720: NEG
67721: PUSH
67722: LD_INT 2
67724: NEG
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 0
67732: PUSH
67733: LD_INT 2
67735: NEG
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 1
67743: PUSH
67744: LD_INT 1
67746: NEG
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 2
67754: PUSH
67755: LD_INT 0
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 2
67764: PUSH
67765: LD_INT 1
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 2
67774: PUSH
67775: LD_INT 2
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 1
67784: PUSH
67785: LD_INT 2
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 0
67794: PUSH
67795: LD_INT 2
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 1
67804: NEG
67805: PUSH
67806: LD_INT 1
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 2
67815: NEG
67816: PUSH
67817: LD_INT 0
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 2
67826: NEG
67827: PUSH
67828: LD_INT 1
67830: NEG
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 2
67838: NEG
67839: PUSH
67840: LD_INT 2
67842: NEG
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67869: LD_ADDR_VAR 0 59
67873: PUSH
67874: LD_INT 0
67876: PUSH
67877: LD_INT 0
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 0
67886: PUSH
67887: LD_INT 1
67889: NEG
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 1
67897: PUSH
67898: LD_INT 0
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 1
67907: PUSH
67908: LD_INT 1
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 0
67917: PUSH
67918: LD_INT 1
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 1
67927: NEG
67928: PUSH
67929: LD_INT 0
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 1
67938: NEG
67939: PUSH
67940: LD_INT 1
67942: NEG
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67957: LD_ADDR_VAR 0 60
67961: PUSH
67962: LD_INT 0
67964: PUSH
67965: LD_INT 0
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: LD_INT 0
67974: PUSH
67975: LD_INT 1
67977: NEG
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 1
67985: PUSH
67986: LD_INT 0
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 1
67995: PUSH
67996: LD_INT 1
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 0
68005: PUSH
68006: LD_INT 1
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 1
68015: NEG
68016: PUSH
68017: LD_INT 0
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 1
68026: NEG
68027: PUSH
68028: LD_INT 1
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68045: LD_ADDR_VAR 0 61
68049: PUSH
68050: LD_INT 0
68052: PUSH
68053: LD_INT 0
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 0
68062: PUSH
68063: LD_INT 1
68065: NEG
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 1
68073: PUSH
68074: LD_INT 0
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 1
68083: PUSH
68084: LD_INT 1
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 0
68093: PUSH
68094: LD_INT 1
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 1
68103: NEG
68104: PUSH
68105: LD_INT 0
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 1
68114: NEG
68115: PUSH
68116: LD_INT 1
68118: NEG
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68133: LD_ADDR_VAR 0 62
68137: PUSH
68138: LD_INT 0
68140: PUSH
68141: LD_INT 0
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 0
68150: PUSH
68151: LD_INT 1
68153: NEG
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 1
68161: PUSH
68162: LD_INT 0
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 1
68171: PUSH
68172: LD_INT 1
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 0
68181: PUSH
68182: LD_INT 1
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 1
68191: NEG
68192: PUSH
68193: LD_INT 0
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 1
68202: NEG
68203: PUSH
68204: LD_INT 1
68206: NEG
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68221: LD_ADDR_VAR 0 63
68225: PUSH
68226: LD_INT 0
68228: PUSH
68229: LD_INT 0
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 0
68238: PUSH
68239: LD_INT 1
68241: NEG
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 1
68249: PUSH
68250: LD_INT 0
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 1
68259: PUSH
68260: LD_INT 1
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 0
68269: PUSH
68270: LD_INT 1
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: LD_INT 1
68279: NEG
68280: PUSH
68281: LD_INT 0
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 1
68290: NEG
68291: PUSH
68292: LD_INT 1
68294: NEG
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68309: LD_ADDR_VAR 0 64
68313: PUSH
68314: LD_INT 0
68316: PUSH
68317: LD_INT 0
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 0
68326: PUSH
68327: LD_INT 1
68329: NEG
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 1
68337: PUSH
68338: LD_INT 0
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 1
68347: PUSH
68348: LD_INT 1
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 0
68357: PUSH
68358: LD_INT 1
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 1
68367: NEG
68368: PUSH
68369: LD_INT 0
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 1
68378: NEG
68379: PUSH
68380: LD_INT 1
68382: NEG
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: ST_TO_ADDR
// end ; 1 :
68397: GO 74294
68399: LD_INT 1
68401: DOUBLE
68402: EQUAL
68403: IFTRUE 68407
68405: GO 71030
68407: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68408: LD_ADDR_VAR 0 11
68412: PUSH
68413: LD_INT 1
68415: NEG
68416: PUSH
68417: LD_INT 3
68419: NEG
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 0
68427: PUSH
68428: LD_INT 3
68430: NEG
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 1
68438: PUSH
68439: LD_INT 2
68441: NEG
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: LIST
68451: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68452: LD_ADDR_VAR 0 12
68456: PUSH
68457: LD_INT 2
68459: PUSH
68460: LD_INT 1
68462: NEG
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 3
68470: PUSH
68471: LD_INT 0
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 3
68480: PUSH
68481: LD_INT 1
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: LIST
68492: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68493: LD_ADDR_VAR 0 13
68497: PUSH
68498: LD_INT 3
68500: PUSH
68501: LD_INT 2
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 3
68510: PUSH
68511: LD_INT 3
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 2
68520: PUSH
68521: LD_INT 3
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: LIST
68532: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68533: LD_ADDR_VAR 0 14
68537: PUSH
68538: LD_INT 1
68540: PUSH
68541: LD_INT 3
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 0
68550: PUSH
68551: LD_INT 3
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 1
68560: NEG
68561: PUSH
68562: LD_INT 2
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: LIST
68573: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68574: LD_ADDR_VAR 0 15
68578: PUSH
68579: LD_INT 2
68581: NEG
68582: PUSH
68583: LD_INT 1
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 3
68592: NEG
68593: PUSH
68594: LD_INT 0
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 3
68603: NEG
68604: PUSH
68605: LD_INT 1
68607: NEG
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: LIST
68617: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68618: LD_ADDR_VAR 0 16
68622: PUSH
68623: LD_INT 2
68625: NEG
68626: PUSH
68627: LD_INT 3
68629: NEG
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 3
68637: NEG
68638: PUSH
68639: LD_INT 2
68641: NEG
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 3
68649: NEG
68650: PUSH
68651: LD_INT 3
68653: NEG
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: LIST
68663: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68664: LD_ADDR_VAR 0 17
68668: PUSH
68669: LD_INT 1
68671: NEG
68672: PUSH
68673: LD_INT 3
68675: NEG
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 0
68683: PUSH
68684: LD_INT 3
68686: NEG
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 1
68694: PUSH
68695: LD_INT 2
68697: NEG
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: LIST
68707: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68708: LD_ADDR_VAR 0 18
68712: PUSH
68713: LD_INT 2
68715: PUSH
68716: LD_INT 1
68718: NEG
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 3
68726: PUSH
68727: LD_INT 0
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 3
68736: PUSH
68737: LD_INT 1
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: LIST
68748: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68749: LD_ADDR_VAR 0 19
68753: PUSH
68754: LD_INT 3
68756: PUSH
68757: LD_INT 2
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 3
68766: PUSH
68767: LD_INT 3
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 2
68776: PUSH
68777: LD_INT 3
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: LIST
68788: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68789: LD_ADDR_VAR 0 20
68793: PUSH
68794: LD_INT 1
68796: PUSH
68797: LD_INT 3
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 0
68806: PUSH
68807: LD_INT 3
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 1
68816: NEG
68817: PUSH
68818: LD_INT 2
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: LIST
68829: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68830: LD_ADDR_VAR 0 21
68834: PUSH
68835: LD_INT 2
68837: NEG
68838: PUSH
68839: LD_INT 1
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 3
68848: NEG
68849: PUSH
68850: LD_INT 0
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 3
68859: NEG
68860: PUSH
68861: LD_INT 1
68863: NEG
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: LIST
68873: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68874: LD_ADDR_VAR 0 22
68878: PUSH
68879: LD_INT 2
68881: NEG
68882: PUSH
68883: LD_INT 3
68885: NEG
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 3
68893: NEG
68894: PUSH
68895: LD_INT 2
68897: NEG
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 3
68905: NEG
68906: PUSH
68907: LD_INT 3
68909: NEG
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: LIST
68919: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68920: LD_ADDR_VAR 0 23
68924: PUSH
68925: LD_INT 0
68927: PUSH
68928: LD_INT 3
68930: NEG
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 1
68938: NEG
68939: PUSH
68940: LD_INT 4
68942: NEG
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 1
68950: PUSH
68951: LD_INT 3
68953: NEG
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: LIST
68963: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68964: LD_ADDR_VAR 0 24
68968: PUSH
68969: LD_INT 3
68971: PUSH
68972: LD_INT 0
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 3
68981: PUSH
68982: LD_INT 1
68984: NEG
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 4
68992: PUSH
68993: LD_INT 1
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: LIST
69004: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
69005: LD_ADDR_VAR 0 25
69009: PUSH
69010: LD_INT 3
69012: PUSH
69013: LD_INT 3
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 4
69022: PUSH
69023: LD_INT 3
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 3
69032: PUSH
69033: LD_INT 4
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: LIST
69044: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
69045: LD_ADDR_VAR 0 26
69049: PUSH
69050: LD_INT 0
69052: PUSH
69053: LD_INT 3
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 1
69062: PUSH
69063: LD_INT 4
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: LD_INT 1
69072: NEG
69073: PUSH
69074: LD_INT 3
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: LIST
69085: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
69086: LD_ADDR_VAR 0 27
69090: PUSH
69091: LD_INT 3
69093: NEG
69094: PUSH
69095: LD_INT 0
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 3
69104: NEG
69105: PUSH
69106: LD_INT 1
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 4
69115: NEG
69116: PUSH
69117: LD_INT 1
69119: NEG
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: LIST
69129: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
69130: LD_ADDR_VAR 0 28
69134: PUSH
69135: LD_INT 3
69137: NEG
69138: PUSH
69139: LD_INT 3
69141: NEG
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 3
69149: NEG
69150: PUSH
69151: LD_INT 4
69153: NEG
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 4
69161: NEG
69162: PUSH
69163: LD_INT 3
69165: NEG
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: LIST
69175: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69176: LD_ADDR_VAR 0 29
69180: PUSH
69181: LD_INT 1
69183: NEG
69184: PUSH
69185: LD_INT 3
69187: NEG
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 0
69195: PUSH
69196: LD_INT 3
69198: NEG
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 1
69206: PUSH
69207: LD_INT 2
69209: NEG
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 1
69217: NEG
69218: PUSH
69219: LD_INT 4
69221: NEG
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 0
69229: PUSH
69230: LD_INT 4
69232: NEG
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: LD_INT 1
69240: PUSH
69241: LD_INT 3
69243: NEG
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: PUSH
69249: LD_INT 1
69251: NEG
69252: PUSH
69253: LD_INT 5
69255: NEG
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 0
69263: PUSH
69264: LD_INT 5
69266: NEG
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 1
69274: PUSH
69275: LD_INT 4
69277: NEG
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: LD_INT 1
69285: NEG
69286: PUSH
69287: LD_INT 6
69289: NEG
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 0
69297: PUSH
69298: LD_INT 6
69300: NEG
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 1
69308: PUSH
69309: LD_INT 5
69311: NEG
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69331: LD_ADDR_VAR 0 30
69335: PUSH
69336: LD_INT 2
69338: PUSH
69339: LD_INT 1
69341: NEG
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 3
69349: PUSH
69350: LD_INT 0
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 3
69359: PUSH
69360: LD_INT 1
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 3
69369: PUSH
69370: LD_INT 1
69372: NEG
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 4
69380: PUSH
69381: LD_INT 0
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 4
69390: PUSH
69391: LD_INT 1
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 4
69400: PUSH
69401: LD_INT 1
69403: NEG
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: LD_INT 5
69411: PUSH
69412: LD_INT 0
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 5
69421: PUSH
69422: LD_INT 1
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 5
69431: PUSH
69432: LD_INT 1
69434: NEG
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 6
69442: PUSH
69443: LD_INT 0
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 6
69452: PUSH
69453: LD_INT 1
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
69474: LD_ADDR_VAR 0 31
69478: PUSH
69479: LD_INT 3
69481: PUSH
69482: LD_INT 2
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 3
69491: PUSH
69492: LD_INT 3
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 2
69501: PUSH
69502: LD_INT 3
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 4
69511: PUSH
69512: LD_INT 3
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: LD_INT 4
69521: PUSH
69522: LD_INT 4
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 3
69531: PUSH
69532: LD_INT 4
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: LD_INT 5
69541: PUSH
69542: LD_INT 4
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 5
69551: PUSH
69552: LD_INT 5
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 4
69561: PUSH
69562: LD_INT 5
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 6
69571: PUSH
69572: LD_INT 5
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 6
69581: PUSH
69582: LD_INT 6
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 5
69591: PUSH
69592: LD_INT 6
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69613: LD_ADDR_VAR 0 32
69617: PUSH
69618: LD_INT 1
69620: PUSH
69621: LD_INT 3
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 0
69630: PUSH
69631: LD_INT 3
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 1
69640: NEG
69641: PUSH
69642: LD_INT 2
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: LD_INT 1
69651: PUSH
69652: LD_INT 4
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: LD_INT 0
69661: PUSH
69662: LD_INT 4
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 1
69671: NEG
69672: PUSH
69673: LD_INT 3
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 1
69682: PUSH
69683: LD_INT 5
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 0
69692: PUSH
69693: LD_INT 5
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 1
69702: NEG
69703: PUSH
69704: LD_INT 4
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 1
69713: PUSH
69714: LD_INT 6
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 0
69723: PUSH
69724: LD_INT 6
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 1
69733: NEG
69734: PUSH
69735: LD_INT 5
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69756: LD_ADDR_VAR 0 33
69760: PUSH
69761: LD_INT 2
69763: NEG
69764: PUSH
69765: LD_INT 1
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 3
69774: NEG
69775: PUSH
69776: LD_INT 0
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 3
69785: NEG
69786: PUSH
69787: LD_INT 1
69789: NEG
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: PUSH
69795: LD_INT 3
69797: NEG
69798: PUSH
69799: LD_INT 1
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 4
69808: NEG
69809: PUSH
69810: LD_INT 0
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_INT 4
69819: NEG
69820: PUSH
69821: LD_INT 1
69823: NEG
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 4
69831: NEG
69832: PUSH
69833: LD_INT 1
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 5
69842: NEG
69843: PUSH
69844: LD_INT 0
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 5
69853: NEG
69854: PUSH
69855: LD_INT 1
69857: NEG
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 5
69865: NEG
69866: PUSH
69867: LD_INT 1
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 6
69876: NEG
69877: PUSH
69878: LD_INT 0
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 6
69887: NEG
69888: PUSH
69889: LD_INT 1
69891: NEG
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69911: LD_ADDR_VAR 0 34
69915: PUSH
69916: LD_INT 2
69918: NEG
69919: PUSH
69920: LD_INT 3
69922: NEG
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 3
69930: NEG
69931: PUSH
69932: LD_INT 2
69934: NEG
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 3
69942: NEG
69943: PUSH
69944: LD_INT 3
69946: NEG
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 3
69954: NEG
69955: PUSH
69956: LD_INT 4
69958: NEG
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 4
69966: NEG
69967: PUSH
69968: LD_INT 3
69970: NEG
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 4
69978: NEG
69979: PUSH
69980: LD_INT 4
69982: NEG
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 4
69990: NEG
69991: PUSH
69992: LD_INT 5
69994: NEG
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 5
70002: NEG
70003: PUSH
70004: LD_INT 4
70006: NEG
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 5
70014: NEG
70015: PUSH
70016: LD_INT 5
70018: NEG
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 5
70026: NEG
70027: PUSH
70028: LD_INT 6
70030: NEG
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: LD_INT 6
70038: NEG
70039: PUSH
70040: LD_INT 5
70042: NEG
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 6
70050: NEG
70051: PUSH
70052: LD_INT 6
70054: NEG
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
70074: LD_ADDR_VAR 0 41
70078: PUSH
70079: LD_INT 0
70081: PUSH
70082: LD_INT 2
70084: NEG
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 1
70092: NEG
70093: PUSH
70094: LD_INT 3
70096: NEG
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 1
70104: PUSH
70105: LD_INT 2
70107: NEG
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: LIST
70117: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
70118: LD_ADDR_VAR 0 42
70122: PUSH
70123: LD_INT 2
70125: PUSH
70126: LD_INT 0
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 2
70135: PUSH
70136: LD_INT 1
70138: NEG
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 3
70146: PUSH
70147: LD_INT 1
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: LIST
70158: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70159: LD_ADDR_VAR 0 43
70163: PUSH
70164: LD_INT 2
70166: PUSH
70167: LD_INT 2
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 3
70176: PUSH
70177: LD_INT 2
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PUSH
70184: LD_INT 2
70186: PUSH
70187: LD_INT 3
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: LIST
70198: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70199: LD_ADDR_VAR 0 44
70203: PUSH
70204: LD_INT 0
70206: PUSH
70207: LD_INT 2
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 1
70216: PUSH
70217: LD_INT 3
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 1
70226: NEG
70227: PUSH
70228: LD_INT 2
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: LIST
70239: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70240: LD_ADDR_VAR 0 45
70244: PUSH
70245: LD_INT 2
70247: NEG
70248: PUSH
70249: LD_INT 0
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 2
70258: NEG
70259: PUSH
70260: LD_INT 1
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 3
70269: NEG
70270: PUSH
70271: LD_INT 1
70273: NEG
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: LIST
70283: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70284: LD_ADDR_VAR 0 46
70288: PUSH
70289: LD_INT 2
70291: NEG
70292: PUSH
70293: LD_INT 2
70295: NEG
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 2
70303: NEG
70304: PUSH
70305: LD_INT 3
70307: NEG
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: LD_INT 3
70315: NEG
70316: PUSH
70317: LD_INT 2
70319: NEG
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: LIST
70329: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70330: LD_ADDR_VAR 0 47
70334: PUSH
70335: LD_INT 2
70337: NEG
70338: PUSH
70339: LD_INT 3
70341: NEG
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 1
70349: NEG
70350: PUSH
70351: LD_INT 3
70353: NEG
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70363: LD_ADDR_VAR 0 48
70367: PUSH
70368: LD_INT 1
70370: PUSH
70371: LD_INT 2
70373: NEG
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 2
70381: PUSH
70382: LD_INT 1
70384: NEG
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70394: LD_ADDR_VAR 0 49
70398: PUSH
70399: LD_INT 3
70401: PUSH
70402: LD_INT 1
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 3
70411: PUSH
70412: LD_INT 2
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
70423: LD_ADDR_VAR 0 50
70427: PUSH
70428: LD_INT 2
70430: PUSH
70431: LD_INT 3
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 1
70440: PUSH
70441: LD_INT 3
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
70452: LD_ADDR_VAR 0 51
70456: PUSH
70457: LD_INT 1
70459: NEG
70460: PUSH
70461: LD_INT 2
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 2
70470: NEG
70471: PUSH
70472: LD_INT 1
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70483: LD_ADDR_VAR 0 52
70487: PUSH
70488: LD_INT 3
70490: NEG
70491: PUSH
70492: LD_INT 1
70494: NEG
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 3
70502: NEG
70503: PUSH
70504: LD_INT 2
70506: NEG
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70516: LD_ADDR_VAR 0 53
70520: PUSH
70521: LD_INT 1
70523: NEG
70524: PUSH
70525: LD_INT 3
70527: NEG
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 0
70535: PUSH
70536: LD_INT 3
70538: NEG
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 1
70546: PUSH
70547: LD_INT 2
70549: NEG
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: LIST
70559: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70560: LD_ADDR_VAR 0 54
70564: PUSH
70565: LD_INT 2
70567: PUSH
70568: LD_INT 1
70570: NEG
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: PUSH
70576: LD_INT 3
70578: PUSH
70579: LD_INT 0
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PUSH
70586: LD_INT 3
70588: PUSH
70589: LD_INT 1
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: LIST
70600: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70601: LD_ADDR_VAR 0 55
70605: PUSH
70606: LD_INT 3
70608: PUSH
70609: LD_INT 2
70611: PUSH
70612: EMPTY
70613: LIST
70614: LIST
70615: PUSH
70616: LD_INT 3
70618: PUSH
70619: LD_INT 3
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PUSH
70626: LD_INT 2
70628: PUSH
70629: LD_INT 3
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: LIST
70640: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70641: LD_ADDR_VAR 0 56
70645: PUSH
70646: LD_INT 1
70648: PUSH
70649: LD_INT 3
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 0
70658: PUSH
70659: LD_INT 3
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 1
70668: NEG
70669: PUSH
70670: LD_INT 2
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: LIST
70681: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70682: LD_ADDR_VAR 0 57
70686: PUSH
70687: LD_INT 2
70689: NEG
70690: PUSH
70691: LD_INT 1
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: LD_INT 3
70700: NEG
70701: PUSH
70702: LD_INT 0
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 3
70711: NEG
70712: PUSH
70713: LD_INT 1
70715: NEG
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: LIST
70725: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70726: LD_ADDR_VAR 0 58
70730: PUSH
70731: LD_INT 2
70733: NEG
70734: PUSH
70735: LD_INT 3
70737: NEG
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: LD_INT 3
70745: NEG
70746: PUSH
70747: LD_INT 2
70749: NEG
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: LD_INT 3
70757: NEG
70758: PUSH
70759: LD_INT 3
70761: NEG
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: EMPTY
70768: LIST
70769: LIST
70770: LIST
70771: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70772: LD_ADDR_VAR 0 59
70776: PUSH
70777: LD_INT 1
70779: NEG
70780: PUSH
70781: LD_INT 2
70783: NEG
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 0
70791: PUSH
70792: LD_INT 2
70794: NEG
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PUSH
70800: LD_INT 1
70802: PUSH
70803: LD_INT 1
70805: NEG
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: LIST
70815: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70816: LD_ADDR_VAR 0 60
70820: PUSH
70821: LD_INT 1
70823: PUSH
70824: LD_INT 1
70826: NEG
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: PUSH
70832: LD_INT 2
70834: PUSH
70835: LD_INT 0
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 2
70844: PUSH
70845: LD_INT 1
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: LIST
70856: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70857: LD_ADDR_VAR 0 61
70861: PUSH
70862: LD_INT 2
70864: PUSH
70865: LD_INT 1
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 2
70874: PUSH
70875: LD_INT 2
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PUSH
70882: LD_INT 1
70884: PUSH
70885: LD_INT 2
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: LIST
70896: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70897: LD_ADDR_VAR 0 62
70901: PUSH
70902: LD_INT 1
70904: PUSH
70905: LD_INT 2
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: LD_INT 0
70914: PUSH
70915: LD_INT 2
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: LD_INT 1
70924: NEG
70925: PUSH
70926: LD_INT 1
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: LIST
70937: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70938: LD_ADDR_VAR 0 63
70942: PUSH
70943: LD_INT 1
70945: NEG
70946: PUSH
70947: LD_INT 1
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 2
70956: NEG
70957: PUSH
70958: LD_INT 0
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: LD_INT 2
70967: NEG
70968: PUSH
70969: LD_INT 1
70971: NEG
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: LIST
70981: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70982: LD_ADDR_VAR 0 64
70986: PUSH
70987: LD_INT 1
70989: NEG
70990: PUSH
70991: LD_INT 2
70993: NEG
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 2
71001: NEG
71002: PUSH
71003: LD_INT 1
71005: NEG
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 2
71013: NEG
71014: PUSH
71015: LD_INT 2
71017: NEG
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: EMPTY
71024: LIST
71025: LIST
71026: LIST
71027: ST_TO_ADDR
// end ; 2 :
71028: GO 74294
71030: LD_INT 2
71032: DOUBLE
71033: EQUAL
71034: IFTRUE 71038
71036: GO 74293
71038: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
71039: LD_ADDR_VAR 0 29
71043: PUSH
71044: LD_INT 4
71046: PUSH
71047: LD_INT 0
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 4
71056: PUSH
71057: LD_INT 1
71059: NEG
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 5
71067: PUSH
71068: LD_INT 0
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 5
71077: PUSH
71078: LD_INT 1
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PUSH
71085: LD_INT 4
71087: PUSH
71088: LD_INT 1
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 3
71097: PUSH
71098: LD_INT 0
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: PUSH
71105: LD_INT 3
71107: PUSH
71108: LD_INT 1
71110: NEG
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: LD_INT 3
71118: PUSH
71119: LD_INT 2
71121: NEG
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 5
71129: PUSH
71130: LD_INT 2
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 3
71139: PUSH
71140: LD_INT 3
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 3
71149: PUSH
71150: LD_INT 2
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: LD_INT 4
71159: PUSH
71160: LD_INT 3
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: PUSH
71167: LD_INT 4
71169: PUSH
71170: LD_INT 4
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_INT 3
71179: PUSH
71180: LD_INT 4
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_INT 2
71189: PUSH
71190: LD_INT 3
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_INT 2
71199: PUSH
71200: LD_INT 2
71202: PUSH
71203: EMPTY
71204: LIST
71205: LIST
71206: PUSH
71207: LD_INT 4
71209: PUSH
71210: LD_INT 2
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_INT 2
71219: PUSH
71220: LD_INT 4
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PUSH
71227: LD_INT 0
71229: PUSH
71230: LD_INT 4
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: LD_INT 0
71239: PUSH
71240: LD_INT 3
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 1
71249: PUSH
71250: LD_INT 4
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: PUSH
71257: LD_INT 1
71259: PUSH
71260: LD_INT 5
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 0
71269: PUSH
71270: LD_INT 5
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 1
71279: NEG
71280: PUSH
71281: LD_INT 4
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: PUSH
71288: LD_INT 1
71290: NEG
71291: PUSH
71292: LD_INT 3
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 2
71301: PUSH
71302: LD_INT 5
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: PUSH
71309: LD_INT 2
71311: NEG
71312: PUSH
71313: LD_INT 3
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 3
71322: NEG
71323: PUSH
71324: LD_INT 0
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: PUSH
71331: LD_INT 3
71333: NEG
71334: PUSH
71335: LD_INT 1
71337: NEG
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: LD_INT 2
71345: NEG
71346: PUSH
71347: LD_INT 0
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: LD_INT 2
71356: NEG
71357: PUSH
71358: LD_INT 1
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: LD_INT 3
71367: NEG
71368: PUSH
71369: LD_INT 1
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: PUSH
71376: LD_INT 4
71378: NEG
71379: PUSH
71380: LD_INT 0
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: LD_INT 4
71389: NEG
71390: PUSH
71391: LD_INT 1
71393: NEG
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 4
71401: NEG
71402: PUSH
71403: LD_INT 2
71405: NEG
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: PUSH
71411: LD_INT 2
71413: NEG
71414: PUSH
71415: LD_INT 2
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 4
71424: NEG
71425: PUSH
71426: LD_INT 4
71428: NEG
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 4
71436: NEG
71437: PUSH
71438: LD_INT 5
71440: NEG
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 3
71448: NEG
71449: PUSH
71450: LD_INT 4
71452: NEG
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: PUSH
71458: LD_INT 3
71460: NEG
71461: PUSH
71462: LD_INT 3
71464: NEG
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 4
71472: NEG
71473: PUSH
71474: LD_INT 3
71476: NEG
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: LD_INT 5
71484: NEG
71485: PUSH
71486: LD_INT 4
71488: NEG
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: PUSH
71494: LD_INT 5
71496: NEG
71497: PUSH
71498: LD_INT 5
71500: NEG
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PUSH
71506: LD_INT 3
71508: NEG
71509: PUSH
71510: LD_INT 5
71512: NEG
71513: PUSH
71514: EMPTY
71515: LIST
71516: LIST
71517: PUSH
71518: LD_INT 5
71520: NEG
71521: PUSH
71522: LD_INT 3
71524: NEG
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: LIST
71541: LIST
71542: LIST
71543: LIST
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: LIST
71549: LIST
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71577: LD_ADDR_VAR 0 30
71581: PUSH
71582: LD_INT 4
71584: PUSH
71585: LD_INT 4
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: PUSH
71592: LD_INT 4
71594: PUSH
71595: LD_INT 3
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: PUSH
71602: LD_INT 5
71604: PUSH
71605: LD_INT 4
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: PUSH
71612: LD_INT 5
71614: PUSH
71615: LD_INT 5
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: PUSH
71622: LD_INT 4
71624: PUSH
71625: LD_INT 5
71627: PUSH
71628: EMPTY
71629: LIST
71630: LIST
71631: PUSH
71632: LD_INT 3
71634: PUSH
71635: LD_INT 4
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: PUSH
71642: LD_INT 3
71644: PUSH
71645: LD_INT 3
71647: PUSH
71648: EMPTY
71649: LIST
71650: LIST
71651: PUSH
71652: LD_INT 5
71654: PUSH
71655: LD_INT 3
71657: PUSH
71658: EMPTY
71659: LIST
71660: LIST
71661: PUSH
71662: LD_INT 3
71664: PUSH
71665: LD_INT 5
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: PUSH
71672: LD_INT 0
71674: PUSH
71675: LD_INT 3
71677: PUSH
71678: EMPTY
71679: LIST
71680: LIST
71681: PUSH
71682: LD_INT 0
71684: PUSH
71685: LD_INT 2
71687: PUSH
71688: EMPTY
71689: LIST
71690: LIST
71691: PUSH
71692: LD_INT 1
71694: PUSH
71695: LD_INT 3
71697: PUSH
71698: EMPTY
71699: LIST
71700: LIST
71701: PUSH
71702: LD_INT 1
71704: PUSH
71705: LD_INT 4
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: PUSH
71712: LD_INT 0
71714: PUSH
71715: LD_INT 4
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: PUSH
71722: LD_INT 1
71724: NEG
71725: PUSH
71726: LD_INT 3
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PUSH
71733: LD_INT 1
71735: NEG
71736: PUSH
71737: LD_INT 2
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 2
71746: PUSH
71747: LD_INT 4
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: PUSH
71754: LD_INT 2
71756: NEG
71757: PUSH
71758: LD_INT 2
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PUSH
71765: LD_INT 4
71767: NEG
71768: PUSH
71769: LD_INT 0
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: PUSH
71776: LD_INT 4
71778: NEG
71779: PUSH
71780: LD_INT 1
71782: NEG
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: LD_INT 3
71790: NEG
71791: PUSH
71792: LD_INT 0
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: PUSH
71799: LD_INT 3
71801: NEG
71802: PUSH
71803: LD_INT 1
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PUSH
71810: LD_INT 4
71812: NEG
71813: PUSH
71814: LD_INT 1
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: PUSH
71821: LD_INT 5
71823: NEG
71824: PUSH
71825: LD_INT 0
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 5
71834: NEG
71835: PUSH
71836: LD_INT 1
71838: NEG
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: PUSH
71844: LD_INT 5
71846: NEG
71847: PUSH
71848: LD_INT 2
71850: NEG
71851: PUSH
71852: EMPTY
71853: LIST
71854: LIST
71855: PUSH
71856: LD_INT 3
71858: NEG
71859: PUSH
71860: LD_INT 2
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: PUSH
71867: LD_INT 3
71869: NEG
71870: PUSH
71871: LD_INT 3
71873: NEG
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 3
71881: NEG
71882: PUSH
71883: LD_INT 4
71885: NEG
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: LD_INT 2
71893: NEG
71894: PUSH
71895: LD_INT 3
71897: NEG
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: PUSH
71903: LD_INT 2
71905: NEG
71906: PUSH
71907: LD_INT 2
71909: NEG
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 3
71917: NEG
71918: PUSH
71919: LD_INT 2
71921: NEG
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 4
71929: NEG
71930: PUSH
71931: LD_INT 3
71933: NEG
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: LD_INT 4
71941: NEG
71942: PUSH
71943: LD_INT 4
71945: NEG
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: PUSH
71951: LD_INT 2
71953: NEG
71954: PUSH
71955: LD_INT 4
71957: NEG
71958: PUSH
71959: EMPTY
71960: LIST
71961: LIST
71962: PUSH
71963: LD_INT 4
71965: NEG
71966: PUSH
71967: LD_INT 2
71969: NEG
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: PUSH
71975: LD_INT 0
71977: PUSH
71978: LD_INT 4
71980: NEG
71981: PUSH
71982: EMPTY
71983: LIST
71984: LIST
71985: PUSH
71986: LD_INT 0
71988: PUSH
71989: LD_INT 5
71991: NEG
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: PUSH
71997: LD_INT 1
71999: PUSH
72000: LD_INT 4
72002: NEG
72003: PUSH
72004: EMPTY
72005: LIST
72006: LIST
72007: PUSH
72008: LD_INT 1
72010: PUSH
72011: LD_INT 3
72013: NEG
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: PUSH
72019: LD_INT 0
72021: PUSH
72022: LD_INT 3
72024: NEG
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: LD_INT 1
72032: NEG
72033: PUSH
72034: LD_INT 4
72036: NEG
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: LD_INT 1
72044: NEG
72045: PUSH
72046: LD_INT 5
72048: NEG
72049: PUSH
72050: EMPTY
72051: LIST
72052: LIST
72053: PUSH
72054: LD_INT 2
72056: PUSH
72057: LD_INT 3
72059: NEG
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: PUSH
72065: LD_INT 2
72067: NEG
72068: PUSH
72069: LD_INT 5
72071: NEG
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: LIST
72097: LIST
72098: LIST
72099: LIST
72100: LIST
72101: LIST
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
72124: LD_ADDR_VAR 0 31
72128: PUSH
72129: LD_INT 0
72131: PUSH
72132: LD_INT 4
72134: PUSH
72135: EMPTY
72136: LIST
72137: LIST
72138: PUSH
72139: LD_INT 0
72141: PUSH
72142: LD_INT 3
72144: PUSH
72145: EMPTY
72146: LIST
72147: LIST
72148: PUSH
72149: LD_INT 1
72151: PUSH
72152: LD_INT 4
72154: PUSH
72155: EMPTY
72156: LIST
72157: LIST
72158: PUSH
72159: LD_INT 1
72161: PUSH
72162: LD_INT 5
72164: PUSH
72165: EMPTY
72166: LIST
72167: LIST
72168: PUSH
72169: LD_INT 0
72171: PUSH
72172: LD_INT 5
72174: PUSH
72175: EMPTY
72176: LIST
72177: LIST
72178: PUSH
72179: LD_INT 1
72181: NEG
72182: PUSH
72183: LD_INT 4
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: PUSH
72190: LD_INT 1
72192: NEG
72193: PUSH
72194: LD_INT 3
72196: PUSH
72197: EMPTY
72198: LIST
72199: LIST
72200: PUSH
72201: LD_INT 2
72203: PUSH
72204: LD_INT 5
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 2
72213: NEG
72214: PUSH
72215: LD_INT 3
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 3
72224: NEG
72225: PUSH
72226: LD_INT 0
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: PUSH
72233: LD_INT 3
72235: NEG
72236: PUSH
72237: LD_INT 1
72239: NEG
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: PUSH
72245: LD_INT 2
72247: NEG
72248: PUSH
72249: LD_INT 0
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: PUSH
72256: LD_INT 2
72258: NEG
72259: PUSH
72260: LD_INT 1
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 3
72269: NEG
72270: PUSH
72271: LD_INT 1
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: LD_INT 4
72280: NEG
72281: PUSH
72282: LD_INT 0
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 4
72291: NEG
72292: PUSH
72293: LD_INT 1
72295: NEG
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: PUSH
72301: LD_INT 4
72303: NEG
72304: PUSH
72305: LD_INT 2
72307: NEG
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: PUSH
72313: LD_INT 2
72315: NEG
72316: PUSH
72317: LD_INT 2
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PUSH
72324: LD_INT 4
72326: NEG
72327: PUSH
72328: LD_INT 4
72330: NEG
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: PUSH
72336: LD_INT 4
72338: NEG
72339: PUSH
72340: LD_INT 5
72342: NEG
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PUSH
72348: LD_INT 3
72350: NEG
72351: PUSH
72352: LD_INT 4
72354: NEG
72355: PUSH
72356: EMPTY
72357: LIST
72358: LIST
72359: PUSH
72360: LD_INT 3
72362: NEG
72363: PUSH
72364: LD_INT 3
72366: NEG
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: PUSH
72372: LD_INT 4
72374: NEG
72375: PUSH
72376: LD_INT 3
72378: NEG
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: PUSH
72384: LD_INT 5
72386: NEG
72387: PUSH
72388: LD_INT 4
72390: NEG
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 5
72398: NEG
72399: PUSH
72400: LD_INT 5
72402: NEG
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 3
72410: NEG
72411: PUSH
72412: LD_INT 5
72414: NEG
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: LD_INT 5
72422: NEG
72423: PUSH
72424: LD_INT 3
72426: NEG
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PUSH
72432: LD_INT 0
72434: PUSH
72435: LD_INT 3
72437: NEG
72438: PUSH
72439: EMPTY
72440: LIST
72441: LIST
72442: PUSH
72443: LD_INT 0
72445: PUSH
72446: LD_INT 4
72448: NEG
72449: PUSH
72450: EMPTY
72451: LIST
72452: LIST
72453: PUSH
72454: LD_INT 1
72456: PUSH
72457: LD_INT 3
72459: NEG
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: PUSH
72465: LD_INT 1
72467: PUSH
72468: LD_INT 2
72470: NEG
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: PUSH
72476: LD_INT 0
72478: PUSH
72479: LD_INT 2
72481: NEG
72482: PUSH
72483: EMPTY
72484: LIST
72485: LIST
72486: PUSH
72487: LD_INT 1
72489: NEG
72490: PUSH
72491: LD_INT 3
72493: NEG
72494: PUSH
72495: EMPTY
72496: LIST
72497: LIST
72498: PUSH
72499: LD_INT 1
72501: NEG
72502: PUSH
72503: LD_INT 4
72505: NEG
72506: PUSH
72507: EMPTY
72508: LIST
72509: LIST
72510: PUSH
72511: LD_INT 2
72513: PUSH
72514: LD_INT 2
72516: NEG
72517: PUSH
72518: EMPTY
72519: LIST
72520: LIST
72521: PUSH
72522: LD_INT 2
72524: NEG
72525: PUSH
72526: LD_INT 4
72528: NEG
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: PUSH
72534: LD_INT 4
72536: PUSH
72537: LD_INT 0
72539: PUSH
72540: EMPTY
72541: LIST
72542: LIST
72543: PUSH
72544: LD_INT 4
72546: PUSH
72547: LD_INT 1
72549: NEG
72550: PUSH
72551: EMPTY
72552: LIST
72553: LIST
72554: PUSH
72555: LD_INT 5
72557: PUSH
72558: LD_INT 0
72560: PUSH
72561: EMPTY
72562: LIST
72563: LIST
72564: PUSH
72565: LD_INT 5
72567: PUSH
72568: LD_INT 1
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: PUSH
72575: LD_INT 4
72577: PUSH
72578: LD_INT 1
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: PUSH
72585: LD_INT 3
72587: PUSH
72588: LD_INT 0
72590: PUSH
72591: EMPTY
72592: LIST
72593: LIST
72594: PUSH
72595: LD_INT 3
72597: PUSH
72598: LD_INT 1
72600: NEG
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: PUSH
72606: LD_INT 3
72608: PUSH
72609: LD_INT 2
72611: NEG
72612: PUSH
72613: EMPTY
72614: LIST
72615: LIST
72616: PUSH
72617: LD_INT 5
72619: PUSH
72620: LD_INT 2
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PUSH
72627: EMPTY
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: LIST
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72674: LD_ADDR_VAR 0 32
72678: PUSH
72679: LD_INT 4
72681: NEG
72682: PUSH
72683: LD_INT 0
72685: PUSH
72686: EMPTY
72687: LIST
72688: LIST
72689: PUSH
72690: LD_INT 4
72692: NEG
72693: PUSH
72694: LD_INT 1
72696: NEG
72697: PUSH
72698: EMPTY
72699: LIST
72700: LIST
72701: PUSH
72702: LD_INT 3
72704: NEG
72705: PUSH
72706: LD_INT 0
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 3
72715: NEG
72716: PUSH
72717: LD_INT 1
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 4
72726: NEG
72727: PUSH
72728: LD_INT 1
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: PUSH
72735: LD_INT 5
72737: NEG
72738: PUSH
72739: LD_INT 0
72741: PUSH
72742: EMPTY
72743: LIST
72744: LIST
72745: PUSH
72746: LD_INT 5
72748: NEG
72749: PUSH
72750: LD_INT 1
72752: NEG
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PUSH
72758: LD_INT 5
72760: NEG
72761: PUSH
72762: LD_INT 2
72764: NEG
72765: PUSH
72766: EMPTY
72767: LIST
72768: LIST
72769: PUSH
72770: LD_INT 3
72772: NEG
72773: PUSH
72774: LD_INT 2
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: PUSH
72781: LD_INT 3
72783: NEG
72784: PUSH
72785: LD_INT 3
72787: NEG
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: PUSH
72793: LD_INT 3
72795: NEG
72796: PUSH
72797: LD_INT 4
72799: NEG
72800: PUSH
72801: EMPTY
72802: LIST
72803: LIST
72804: PUSH
72805: LD_INT 2
72807: NEG
72808: PUSH
72809: LD_INT 3
72811: NEG
72812: PUSH
72813: EMPTY
72814: LIST
72815: LIST
72816: PUSH
72817: LD_INT 2
72819: NEG
72820: PUSH
72821: LD_INT 2
72823: NEG
72824: PUSH
72825: EMPTY
72826: LIST
72827: LIST
72828: PUSH
72829: LD_INT 3
72831: NEG
72832: PUSH
72833: LD_INT 2
72835: NEG
72836: PUSH
72837: EMPTY
72838: LIST
72839: LIST
72840: PUSH
72841: LD_INT 4
72843: NEG
72844: PUSH
72845: LD_INT 3
72847: NEG
72848: PUSH
72849: EMPTY
72850: LIST
72851: LIST
72852: PUSH
72853: LD_INT 4
72855: NEG
72856: PUSH
72857: LD_INT 4
72859: NEG
72860: PUSH
72861: EMPTY
72862: LIST
72863: LIST
72864: PUSH
72865: LD_INT 2
72867: NEG
72868: PUSH
72869: LD_INT 4
72871: NEG
72872: PUSH
72873: EMPTY
72874: LIST
72875: LIST
72876: PUSH
72877: LD_INT 4
72879: NEG
72880: PUSH
72881: LD_INT 2
72883: NEG
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: PUSH
72889: LD_INT 0
72891: PUSH
72892: LD_INT 4
72894: NEG
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: PUSH
72900: LD_INT 0
72902: PUSH
72903: LD_INT 5
72905: NEG
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PUSH
72911: LD_INT 1
72913: PUSH
72914: LD_INT 4
72916: NEG
72917: PUSH
72918: EMPTY
72919: LIST
72920: LIST
72921: PUSH
72922: LD_INT 1
72924: PUSH
72925: LD_INT 3
72927: NEG
72928: PUSH
72929: EMPTY
72930: LIST
72931: LIST
72932: PUSH
72933: LD_INT 0
72935: PUSH
72936: LD_INT 3
72938: NEG
72939: PUSH
72940: EMPTY
72941: LIST
72942: LIST
72943: PUSH
72944: LD_INT 1
72946: NEG
72947: PUSH
72948: LD_INT 4
72950: NEG
72951: PUSH
72952: EMPTY
72953: LIST
72954: LIST
72955: PUSH
72956: LD_INT 1
72958: NEG
72959: PUSH
72960: LD_INT 5
72962: NEG
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PUSH
72968: LD_INT 2
72970: PUSH
72971: LD_INT 3
72973: NEG
72974: PUSH
72975: EMPTY
72976: LIST
72977: LIST
72978: PUSH
72979: LD_INT 2
72981: NEG
72982: PUSH
72983: LD_INT 5
72985: NEG
72986: PUSH
72987: EMPTY
72988: LIST
72989: LIST
72990: PUSH
72991: LD_INT 3
72993: PUSH
72994: LD_INT 0
72996: PUSH
72997: EMPTY
72998: LIST
72999: LIST
73000: PUSH
73001: LD_INT 3
73003: PUSH
73004: LD_INT 1
73006: NEG
73007: PUSH
73008: EMPTY
73009: LIST
73010: LIST
73011: PUSH
73012: LD_INT 4
73014: PUSH
73015: LD_INT 0
73017: PUSH
73018: EMPTY
73019: LIST
73020: LIST
73021: PUSH
73022: LD_INT 4
73024: PUSH
73025: LD_INT 1
73027: PUSH
73028: EMPTY
73029: LIST
73030: LIST
73031: PUSH
73032: LD_INT 3
73034: PUSH
73035: LD_INT 1
73037: PUSH
73038: EMPTY
73039: LIST
73040: LIST
73041: PUSH
73042: LD_INT 2
73044: PUSH
73045: LD_INT 0
73047: PUSH
73048: EMPTY
73049: LIST
73050: LIST
73051: PUSH
73052: LD_INT 2
73054: PUSH
73055: LD_INT 1
73057: NEG
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: PUSH
73063: LD_INT 2
73065: PUSH
73066: LD_INT 2
73068: NEG
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: LD_INT 4
73076: PUSH
73077: LD_INT 2
73079: PUSH
73080: EMPTY
73081: LIST
73082: LIST
73083: PUSH
73084: LD_INT 4
73086: PUSH
73087: LD_INT 4
73089: PUSH
73090: EMPTY
73091: LIST
73092: LIST
73093: PUSH
73094: LD_INT 4
73096: PUSH
73097: LD_INT 3
73099: PUSH
73100: EMPTY
73101: LIST
73102: LIST
73103: PUSH
73104: LD_INT 5
73106: PUSH
73107: LD_INT 4
73109: PUSH
73110: EMPTY
73111: LIST
73112: LIST
73113: PUSH
73114: LD_INT 5
73116: PUSH
73117: LD_INT 5
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: PUSH
73124: LD_INT 4
73126: PUSH
73127: LD_INT 5
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 3
73136: PUSH
73137: LD_INT 4
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: PUSH
73144: LD_INT 3
73146: PUSH
73147: LD_INT 3
73149: PUSH
73150: EMPTY
73151: LIST
73152: LIST
73153: PUSH
73154: LD_INT 5
73156: PUSH
73157: LD_INT 3
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: PUSH
73164: LD_INT 3
73166: PUSH
73167: LD_INT 5
73169: PUSH
73170: EMPTY
73171: LIST
73172: LIST
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
73221: LD_ADDR_VAR 0 33
73225: PUSH
73226: LD_INT 4
73228: NEG
73229: PUSH
73230: LD_INT 4
73232: NEG
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: PUSH
73238: LD_INT 4
73240: NEG
73241: PUSH
73242: LD_INT 5
73244: NEG
73245: PUSH
73246: EMPTY
73247: LIST
73248: LIST
73249: PUSH
73250: LD_INT 3
73252: NEG
73253: PUSH
73254: LD_INT 4
73256: NEG
73257: PUSH
73258: EMPTY
73259: LIST
73260: LIST
73261: PUSH
73262: LD_INT 3
73264: NEG
73265: PUSH
73266: LD_INT 3
73268: NEG
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: PUSH
73274: LD_INT 4
73276: NEG
73277: PUSH
73278: LD_INT 3
73280: NEG
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: PUSH
73286: LD_INT 5
73288: NEG
73289: PUSH
73290: LD_INT 4
73292: NEG
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: PUSH
73298: LD_INT 5
73300: NEG
73301: PUSH
73302: LD_INT 5
73304: NEG
73305: PUSH
73306: EMPTY
73307: LIST
73308: LIST
73309: PUSH
73310: LD_INT 3
73312: NEG
73313: PUSH
73314: LD_INT 5
73316: NEG
73317: PUSH
73318: EMPTY
73319: LIST
73320: LIST
73321: PUSH
73322: LD_INT 5
73324: NEG
73325: PUSH
73326: LD_INT 3
73328: NEG
73329: PUSH
73330: EMPTY
73331: LIST
73332: LIST
73333: PUSH
73334: LD_INT 0
73336: PUSH
73337: LD_INT 3
73339: NEG
73340: PUSH
73341: EMPTY
73342: LIST
73343: LIST
73344: PUSH
73345: LD_INT 0
73347: PUSH
73348: LD_INT 4
73350: NEG
73351: PUSH
73352: EMPTY
73353: LIST
73354: LIST
73355: PUSH
73356: LD_INT 1
73358: PUSH
73359: LD_INT 3
73361: NEG
73362: PUSH
73363: EMPTY
73364: LIST
73365: LIST
73366: PUSH
73367: LD_INT 1
73369: PUSH
73370: LD_INT 2
73372: NEG
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: PUSH
73378: LD_INT 0
73380: PUSH
73381: LD_INT 2
73383: NEG
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: PUSH
73389: LD_INT 1
73391: NEG
73392: PUSH
73393: LD_INT 3
73395: NEG
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: PUSH
73401: LD_INT 1
73403: NEG
73404: PUSH
73405: LD_INT 4
73407: NEG
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: PUSH
73413: LD_INT 2
73415: PUSH
73416: LD_INT 2
73418: NEG
73419: PUSH
73420: EMPTY
73421: LIST
73422: LIST
73423: PUSH
73424: LD_INT 2
73426: NEG
73427: PUSH
73428: LD_INT 4
73430: NEG
73431: PUSH
73432: EMPTY
73433: LIST
73434: LIST
73435: PUSH
73436: LD_INT 4
73438: PUSH
73439: LD_INT 0
73441: PUSH
73442: EMPTY
73443: LIST
73444: LIST
73445: PUSH
73446: LD_INT 4
73448: PUSH
73449: LD_INT 1
73451: NEG
73452: PUSH
73453: EMPTY
73454: LIST
73455: LIST
73456: PUSH
73457: LD_INT 5
73459: PUSH
73460: LD_INT 0
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: PUSH
73467: LD_INT 5
73469: PUSH
73470: LD_INT 1
73472: PUSH
73473: EMPTY
73474: LIST
73475: LIST
73476: PUSH
73477: LD_INT 4
73479: PUSH
73480: LD_INT 1
73482: PUSH
73483: EMPTY
73484: LIST
73485: LIST
73486: PUSH
73487: LD_INT 3
73489: PUSH
73490: LD_INT 0
73492: PUSH
73493: EMPTY
73494: LIST
73495: LIST
73496: PUSH
73497: LD_INT 3
73499: PUSH
73500: LD_INT 1
73502: NEG
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: PUSH
73508: LD_INT 3
73510: PUSH
73511: LD_INT 2
73513: NEG
73514: PUSH
73515: EMPTY
73516: LIST
73517: LIST
73518: PUSH
73519: LD_INT 5
73521: PUSH
73522: LD_INT 2
73524: PUSH
73525: EMPTY
73526: LIST
73527: LIST
73528: PUSH
73529: LD_INT 3
73531: PUSH
73532: LD_INT 3
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: PUSH
73539: LD_INT 3
73541: PUSH
73542: LD_INT 2
73544: PUSH
73545: EMPTY
73546: LIST
73547: LIST
73548: PUSH
73549: LD_INT 4
73551: PUSH
73552: LD_INT 3
73554: PUSH
73555: EMPTY
73556: LIST
73557: LIST
73558: PUSH
73559: LD_INT 4
73561: PUSH
73562: LD_INT 4
73564: PUSH
73565: EMPTY
73566: LIST
73567: LIST
73568: PUSH
73569: LD_INT 3
73571: PUSH
73572: LD_INT 4
73574: PUSH
73575: EMPTY
73576: LIST
73577: LIST
73578: PUSH
73579: LD_INT 2
73581: PUSH
73582: LD_INT 3
73584: PUSH
73585: EMPTY
73586: LIST
73587: LIST
73588: PUSH
73589: LD_INT 2
73591: PUSH
73592: LD_INT 2
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: PUSH
73599: LD_INT 4
73601: PUSH
73602: LD_INT 2
73604: PUSH
73605: EMPTY
73606: LIST
73607: LIST
73608: PUSH
73609: LD_INT 2
73611: PUSH
73612: LD_INT 4
73614: PUSH
73615: EMPTY
73616: LIST
73617: LIST
73618: PUSH
73619: LD_INT 0
73621: PUSH
73622: LD_INT 4
73624: PUSH
73625: EMPTY
73626: LIST
73627: LIST
73628: PUSH
73629: LD_INT 0
73631: PUSH
73632: LD_INT 3
73634: PUSH
73635: EMPTY
73636: LIST
73637: LIST
73638: PUSH
73639: LD_INT 1
73641: PUSH
73642: LD_INT 4
73644: PUSH
73645: EMPTY
73646: LIST
73647: LIST
73648: PUSH
73649: LD_INT 1
73651: PUSH
73652: LD_INT 5
73654: PUSH
73655: EMPTY
73656: LIST
73657: LIST
73658: PUSH
73659: LD_INT 0
73661: PUSH
73662: LD_INT 5
73664: PUSH
73665: EMPTY
73666: LIST
73667: LIST
73668: PUSH
73669: LD_INT 1
73671: NEG
73672: PUSH
73673: LD_INT 4
73675: PUSH
73676: EMPTY
73677: LIST
73678: LIST
73679: PUSH
73680: LD_INT 1
73682: NEG
73683: PUSH
73684: LD_INT 3
73686: PUSH
73687: EMPTY
73688: LIST
73689: LIST
73690: PUSH
73691: LD_INT 2
73693: PUSH
73694: LD_INT 5
73696: PUSH
73697: EMPTY
73698: LIST
73699: LIST
73700: PUSH
73701: LD_INT 2
73703: NEG
73704: PUSH
73705: LD_INT 3
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: LIST
73716: LIST
73717: LIST
73718: LIST
73719: LIST
73720: LIST
73721: LIST
73722: LIST
73723: LIST
73724: LIST
73725: LIST
73726: LIST
73727: LIST
73728: LIST
73729: LIST
73730: LIST
73731: LIST
73732: LIST
73733: LIST
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: LIST
73746: LIST
73747: LIST
73748: LIST
73749: LIST
73750: LIST
73751: LIST
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73759: LD_ADDR_VAR 0 34
73763: PUSH
73764: LD_INT 0
73766: PUSH
73767: LD_INT 4
73769: NEG
73770: PUSH
73771: EMPTY
73772: LIST
73773: LIST
73774: PUSH
73775: LD_INT 0
73777: PUSH
73778: LD_INT 5
73780: NEG
73781: PUSH
73782: EMPTY
73783: LIST
73784: LIST
73785: PUSH
73786: LD_INT 1
73788: PUSH
73789: LD_INT 4
73791: NEG
73792: PUSH
73793: EMPTY
73794: LIST
73795: LIST
73796: PUSH
73797: LD_INT 1
73799: PUSH
73800: LD_INT 3
73802: NEG
73803: PUSH
73804: EMPTY
73805: LIST
73806: LIST
73807: PUSH
73808: LD_INT 0
73810: PUSH
73811: LD_INT 3
73813: NEG
73814: PUSH
73815: EMPTY
73816: LIST
73817: LIST
73818: PUSH
73819: LD_INT 1
73821: NEG
73822: PUSH
73823: LD_INT 4
73825: NEG
73826: PUSH
73827: EMPTY
73828: LIST
73829: LIST
73830: PUSH
73831: LD_INT 1
73833: NEG
73834: PUSH
73835: LD_INT 5
73837: NEG
73838: PUSH
73839: EMPTY
73840: LIST
73841: LIST
73842: PUSH
73843: LD_INT 2
73845: PUSH
73846: LD_INT 3
73848: NEG
73849: PUSH
73850: EMPTY
73851: LIST
73852: LIST
73853: PUSH
73854: LD_INT 2
73856: NEG
73857: PUSH
73858: LD_INT 5
73860: NEG
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: PUSH
73866: LD_INT 3
73868: PUSH
73869: LD_INT 0
73871: PUSH
73872: EMPTY
73873: LIST
73874: LIST
73875: PUSH
73876: LD_INT 3
73878: PUSH
73879: LD_INT 1
73881: NEG
73882: PUSH
73883: EMPTY
73884: LIST
73885: LIST
73886: PUSH
73887: LD_INT 4
73889: PUSH
73890: LD_INT 0
73892: PUSH
73893: EMPTY
73894: LIST
73895: LIST
73896: PUSH
73897: LD_INT 4
73899: PUSH
73900: LD_INT 1
73902: PUSH
73903: EMPTY
73904: LIST
73905: LIST
73906: PUSH
73907: LD_INT 3
73909: PUSH
73910: LD_INT 1
73912: PUSH
73913: EMPTY
73914: LIST
73915: LIST
73916: PUSH
73917: LD_INT 2
73919: PUSH
73920: LD_INT 0
73922: PUSH
73923: EMPTY
73924: LIST
73925: LIST
73926: PUSH
73927: LD_INT 2
73929: PUSH
73930: LD_INT 1
73932: NEG
73933: PUSH
73934: EMPTY
73935: LIST
73936: LIST
73937: PUSH
73938: LD_INT 2
73940: PUSH
73941: LD_INT 2
73943: NEG
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: PUSH
73949: LD_INT 4
73951: PUSH
73952: LD_INT 2
73954: PUSH
73955: EMPTY
73956: LIST
73957: LIST
73958: PUSH
73959: LD_INT 4
73961: PUSH
73962: LD_INT 4
73964: PUSH
73965: EMPTY
73966: LIST
73967: LIST
73968: PUSH
73969: LD_INT 4
73971: PUSH
73972: LD_INT 3
73974: PUSH
73975: EMPTY
73976: LIST
73977: LIST
73978: PUSH
73979: LD_INT 5
73981: PUSH
73982: LD_INT 4
73984: PUSH
73985: EMPTY
73986: LIST
73987: LIST
73988: PUSH
73989: LD_INT 5
73991: PUSH
73992: LD_INT 5
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: PUSH
73999: LD_INT 4
74001: PUSH
74002: LD_INT 5
74004: PUSH
74005: EMPTY
74006: LIST
74007: LIST
74008: PUSH
74009: LD_INT 3
74011: PUSH
74012: LD_INT 4
74014: PUSH
74015: EMPTY
74016: LIST
74017: LIST
74018: PUSH
74019: LD_INT 3
74021: PUSH
74022: LD_INT 3
74024: PUSH
74025: EMPTY
74026: LIST
74027: LIST
74028: PUSH
74029: LD_INT 5
74031: PUSH
74032: LD_INT 3
74034: PUSH
74035: EMPTY
74036: LIST
74037: LIST
74038: PUSH
74039: LD_INT 3
74041: PUSH
74042: LD_INT 5
74044: PUSH
74045: EMPTY
74046: LIST
74047: LIST
74048: PUSH
74049: LD_INT 0
74051: PUSH
74052: LD_INT 3
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: PUSH
74059: LD_INT 0
74061: PUSH
74062: LD_INT 2
74064: PUSH
74065: EMPTY
74066: LIST
74067: LIST
74068: PUSH
74069: LD_INT 1
74071: PUSH
74072: LD_INT 3
74074: PUSH
74075: EMPTY
74076: LIST
74077: LIST
74078: PUSH
74079: LD_INT 1
74081: PUSH
74082: LD_INT 4
74084: PUSH
74085: EMPTY
74086: LIST
74087: LIST
74088: PUSH
74089: LD_INT 0
74091: PUSH
74092: LD_INT 4
74094: PUSH
74095: EMPTY
74096: LIST
74097: LIST
74098: PUSH
74099: LD_INT 1
74101: NEG
74102: PUSH
74103: LD_INT 3
74105: PUSH
74106: EMPTY
74107: LIST
74108: LIST
74109: PUSH
74110: LD_INT 1
74112: NEG
74113: PUSH
74114: LD_INT 2
74116: PUSH
74117: EMPTY
74118: LIST
74119: LIST
74120: PUSH
74121: LD_INT 2
74123: PUSH
74124: LD_INT 4
74126: PUSH
74127: EMPTY
74128: LIST
74129: LIST
74130: PUSH
74131: LD_INT 2
74133: NEG
74134: PUSH
74135: LD_INT 2
74137: PUSH
74138: EMPTY
74139: LIST
74140: LIST
74141: PUSH
74142: LD_INT 4
74144: NEG
74145: PUSH
74146: LD_INT 0
74148: PUSH
74149: EMPTY
74150: LIST
74151: LIST
74152: PUSH
74153: LD_INT 4
74155: NEG
74156: PUSH
74157: LD_INT 1
74159: NEG
74160: PUSH
74161: EMPTY
74162: LIST
74163: LIST
74164: PUSH
74165: LD_INT 3
74167: NEG
74168: PUSH
74169: LD_INT 0
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: PUSH
74176: LD_INT 3
74178: NEG
74179: PUSH
74180: LD_INT 1
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: PUSH
74187: LD_INT 4
74189: NEG
74190: PUSH
74191: LD_INT 1
74193: PUSH
74194: EMPTY
74195: LIST
74196: LIST
74197: PUSH
74198: LD_INT 5
74200: NEG
74201: PUSH
74202: LD_INT 0
74204: PUSH
74205: EMPTY
74206: LIST
74207: LIST
74208: PUSH
74209: LD_INT 5
74211: NEG
74212: PUSH
74213: LD_INT 1
74215: NEG
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: PUSH
74221: LD_INT 5
74223: NEG
74224: PUSH
74225: LD_INT 2
74227: NEG
74228: PUSH
74229: EMPTY
74230: LIST
74231: LIST
74232: PUSH
74233: LD_INT 3
74235: NEG
74236: PUSH
74237: LD_INT 2
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: PUSH
74244: EMPTY
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: LIST
74261: LIST
74262: LIST
74263: LIST
74264: LIST
74265: LIST
74266: LIST
74267: LIST
74268: LIST
74269: LIST
74270: LIST
74271: LIST
74272: LIST
74273: LIST
74274: LIST
74275: LIST
74276: LIST
74277: LIST
74278: LIST
74279: LIST
74280: LIST
74281: LIST
74282: LIST
74283: LIST
74284: LIST
74285: LIST
74286: LIST
74287: LIST
74288: LIST
74289: LIST
74290: ST_TO_ADDR
// end ; end ;
74291: GO 74294
74293: POP
// case btype of b_depot , b_warehouse :
74294: LD_VAR 0 1
74298: PUSH
74299: LD_INT 0
74301: DOUBLE
74302: EQUAL
74303: IFTRUE 74313
74305: LD_INT 1
74307: DOUBLE
74308: EQUAL
74309: IFTRUE 74313
74311: GO 74514
74313: POP
// case nation of nation_american :
74314: LD_VAR 0 5
74318: PUSH
74319: LD_INT 1
74321: DOUBLE
74322: EQUAL
74323: IFTRUE 74327
74325: GO 74383
74327: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
74328: LD_ADDR_VAR 0 9
74332: PUSH
74333: LD_VAR 0 11
74337: PUSH
74338: LD_VAR 0 12
74342: PUSH
74343: LD_VAR 0 13
74347: PUSH
74348: LD_VAR 0 14
74352: PUSH
74353: LD_VAR 0 15
74357: PUSH
74358: LD_VAR 0 16
74362: PUSH
74363: EMPTY
74364: LIST
74365: LIST
74366: LIST
74367: LIST
74368: LIST
74369: LIST
74370: PUSH
74371: LD_VAR 0 4
74375: PUSH
74376: LD_INT 1
74378: PLUS
74379: ARRAY
74380: ST_TO_ADDR
74381: GO 74512
74383: LD_INT 2
74385: DOUBLE
74386: EQUAL
74387: IFTRUE 74391
74389: GO 74447
74391: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
74392: LD_ADDR_VAR 0 9
74396: PUSH
74397: LD_VAR 0 17
74401: PUSH
74402: LD_VAR 0 18
74406: PUSH
74407: LD_VAR 0 19
74411: PUSH
74412: LD_VAR 0 20
74416: PUSH
74417: LD_VAR 0 21
74421: PUSH
74422: LD_VAR 0 22
74426: PUSH
74427: EMPTY
74428: LIST
74429: LIST
74430: LIST
74431: LIST
74432: LIST
74433: LIST
74434: PUSH
74435: LD_VAR 0 4
74439: PUSH
74440: LD_INT 1
74442: PLUS
74443: ARRAY
74444: ST_TO_ADDR
74445: GO 74512
74447: LD_INT 3
74449: DOUBLE
74450: EQUAL
74451: IFTRUE 74455
74453: GO 74511
74455: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
74456: LD_ADDR_VAR 0 9
74460: PUSH
74461: LD_VAR 0 23
74465: PUSH
74466: LD_VAR 0 24
74470: PUSH
74471: LD_VAR 0 25
74475: PUSH
74476: LD_VAR 0 26
74480: PUSH
74481: LD_VAR 0 27
74485: PUSH
74486: LD_VAR 0 28
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: LIST
74495: LIST
74496: LIST
74497: LIST
74498: PUSH
74499: LD_VAR 0 4
74503: PUSH
74504: LD_INT 1
74506: PLUS
74507: ARRAY
74508: ST_TO_ADDR
74509: GO 74512
74511: POP
74512: GO 75067
74514: LD_INT 2
74516: DOUBLE
74517: EQUAL
74518: IFTRUE 74528
74520: LD_INT 3
74522: DOUBLE
74523: EQUAL
74524: IFTRUE 74528
74526: GO 74584
74528: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74529: LD_ADDR_VAR 0 9
74533: PUSH
74534: LD_VAR 0 29
74538: PUSH
74539: LD_VAR 0 30
74543: PUSH
74544: LD_VAR 0 31
74548: PUSH
74549: LD_VAR 0 32
74553: PUSH
74554: LD_VAR 0 33
74558: PUSH
74559: LD_VAR 0 34
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: LIST
74568: LIST
74569: LIST
74570: LIST
74571: PUSH
74572: LD_VAR 0 4
74576: PUSH
74577: LD_INT 1
74579: PLUS
74580: ARRAY
74581: ST_TO_ADDR
74582: GO 75067
74584: LD_INT 16
74586: DOUBLE
74587: EQUAL
74588: IFTRUE 74646
74590: LD_INT 17
74592: DOUBLE
74593: EQUAL
74594: IFTRUE 74646
74596: LD_INT 18
74598: DOUBLE
74599: EQUAL
74600: IFTRUE 74646
74602: LD_INT 19
74604: DOUBLE
74605: EQUAL
74606: IFTRUE 74646
74608: LD_INT 22
74610: DOUBLE
74611: EQUAL
74612: IFTRUE 74646
74614: LD_INT 20
74616: DOUBLE
74617: EQUAL
74618: IFTRUE 74646
74620: LD_INT 21
74622: DOUBLE
74623: EQUAL
74624: IFTRUE 74646
74626: LD_INT 23
74628: DOUBLE
74629: EQUAL
74630: IFTRUE 74646
74632: LD_INT 24
74634: DOUBLE
74635: EQUAL
74636: IFTRUE 74646
74638: LD_INT 25
74640: DOUBLE
74641: EQUAL
74642: IFTRUE 74646
74644: GO 74702
74646: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74647: LD_ADDR_VAR 0 9
74651: PUSH
74652: LD_VAR 0 35
74656: PUSH
74657: LD_VAR 0 36
74661: PUSH
74662: LD_VAR 0 37
74666: PUSH
74667: LD_VAR 0 38
74671: PUSH
74672: LD_VAR 0 39
74676: PUSH
74677: LD_VAR 0 40
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: LIST
74686: LIST
74687: LIST
74688: LIST
74689: PUSH
74690: LD_VAR 0 4
74694: PUSH
74695: LD_INT 1
74697: PLUS
74698: ARRAY
74699: ST_TO_ADDR
74700: GO 75067
74702: LD_INT 6
74704: DOUBLE
74705: EQUAL
74706: IFTRUE 74758
74708: LD_INT 7
74710: DOUBLE
74711: EQUAL
74712: IFTRUE 74758
74714: LD_INT 8
74716: DOUBLE
74717: EQUAL
74718: IFTRUE 74758
74720: LD_INT 13
74722: DOUBLE
74723: EQUAL
74724: IFTRUE 74758
74726: LD_INT 12
74728: DOUBLE
74729: EQUAL
74730: IFTRUE 74758
74732: LD_INT 15
74734: DOUBLE
74735: EQUAL
74736: IFTRUE 74758
74738: LD_INT 11
74740: DOUBLE
74741: EQUAL
74742: IFTRUE 74758
74744: LD_INT 14
74746: DOUBLE
74747: EQUAL
74748: IFTRUE 74758
74750: LD_INT 10
74752: DOUBLE
74753: EQUAL
74754: IFTRUE 74758
74756: GO 74814
74758: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74759: LD_ADDR_VAR 0 9
74763: PUSH
74764: LD_VAR 0 41
74768: PUSH
74769: LD_VAR 0 42
74773: PUSH
74774: LD_VAR 0 43
74778: PUSH
74779: LD_VAR 0 44
74783: PUSH
74784: LD_VAR 0 45
74788: PUSH
74789: LD_VAR 0 46
74793: PUSH
74794: EMPTY
74795: LIST
74796: LIST
74797: LIST
74798: LIST
74799: LIST
74800: LIST
74801: PUSH
74802: LD_VAR 0 4
74806: PUSH
74807: LD_INT 1
74809: PLUS
74810: ARRAY
74811: ST_TO_ADDR
74812: GO 75067
74814: LD_INT 36
74816: DOUBLE
74817: EQUAL
74818: IFTRUE 74822
74820: GO 74878
74822: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74823: LD_ADDR_VAR 0 9
74827: PUSH
74828: LD_VAR 0 47
74832: PUSH
74833: LD_VAR 0 48
74837: PUSH
74838: LD_VAR 0 49
74842: PUSH
74843: LD_VAR 0 50
74847: PUSH
74848: LD_VAR 0 51
74852: PUSH
74853: LD_VAR 0 52
74857: PUSH
74858: EMPTY
74859: LIST
74860: LIST
74861: LIST
74862: LIST
74863: LIST
74864: LIST
74865: PUSH
74866: LD_VAR 0 4
74870: PUSH
74871: LD_INT 1
74873: PLUS
74874: ARRAY
74875: ST_TO_ADDR
74876: GO 75067
74878: LD_INT 4
74880: DOUBLE
74881: EQUAL
74882: IFTRUE 74904
74884: LD_INT 5
74886: DOUBLE
74887: EQUAL
74888: IFTRUE 74904
74890: LD_INT 34
74892: DOUBLE
74893: EQUAL
74894: IFTRUE 74904
74896: LD_INT 37
74898: DOUBLE
74899: EQUAL
74900: IFTRUE 74904
74902: GO 74960
74904: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74905: LD_ADDR_VAR 0 9
74909: PUSH
74910: LD_VAR 0 53
74914: PUSH
74915: LD_VAR 0 54
74919: PUSH
74920: LD_VAR 0 55
74924: PUSH
74925: LD_VAR 0 56
74929: PUSH
74930: LD_VAR 0 57
74934: PUSH
74935: LD_VAR 0 58
74939: PUSH
74940: EMPTY
74941: LIST
74942: LIST
74943: LIST
74944: LIST
74945: LIST
74946: LIST
74947: PUSH
74948: LD_VAR 0 4
74952: PUSH
74953: LD_INT 1
74955: PLUS
74956: ARRAY
74957: ST_TO_ADDR
74958: GO 75067
74960: LD_INT 31
74962: DOUBLE
74963: EQUAL
74964: IFTRUE 75010
74966: LD_INT 32
74968: DOUBLE
74969: EQUAL
74970: IFTRUE 75010
74972: LD_INT 33
74974: DOUBLE
74975: EQUAL
74976: IFTRUE 75010
74978: LD_INT 27
74980: DOUBLE
74981: EQUAL
74982: IFTRUE 75010
74984: LD_INT 26
74986: DOUBLE
74987: EQUAL
74988: IFTRUE 75010
74990: LD_INT 28
74992: DOUBLE
74993: EQUAL
74994: IFTRUE 75010
74996: LD_INT 29
74998: DOUBLE
74999: EQUAL
75000: IFTRUE 75010
75002: LD_INT 30
75004: DOUBLE
75005: EQUAL
75006: IFTRUE 75010
75008: GO 75066
75010: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
75011: LD_ADDR_VAR 0 9
75015: PUSH
75016: LD_VAR 0 59
75020: PUSH
75021: LD_VAR 0 60
75025: PUSH
75026: LD_VAR 0 61
75030: PUSH
75031: LD_VAR 0 62
75035: PUSH
75036: LD_VAR 0 63
75040: PUSH
75041: LD_VAR 0 64
75045: PUSH
75046: EMPTY
75047: LIST
75048: LIST
75049: LIST
75050: LIST
75051: LIST
75052: LIST
75053: PUSH
75054: LD_VAR 0 4
75058: PUSH
75059: LD_INT 1
75061: PLUS
75062: ARRAY
75063: ST_TO_ADDR
75064: GO 75067
75066: POP
// temp_list2 = [ ] ;
75067: LD_ADDR_VAR 0 10
75071: PUSH
75072: EMPTY
75073: ST_TO_ADDR
// for i in temp_list do
75074: LD_ADDR_VAR 0 8
75078: PUSH
75079: LD_VAR 0 9
75083: PUSH
75084: FOR_IN
75085: IFFALSE 75137
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
75087: LD_ADDR_VAR 0 10
75091: PUSH
75092: LD_VAR 0 10
75096: PUSH
75097: LD_VAR 0 8
75101: PUSH
75102: LD_INT 1
75104: ARRAY
75105: PUSH
75106: LD_VAR 0 2
75110: PLUS
75111: PUSH
75112: LD_VAR 0 8
75116: PUSH
75117: LD_INT 2
75119: ARRAY
75120: PUSH
75121: LD_VAR 0 3
75125: PLUS
75126: PUSH
75127: EMPTY
75128: LIST
75129: LIST
75130: PUSH
75131: EMPTY
75132: LIST
75133: ADD
75134: ST_TO_ADDR
75135: GO 75084
75137: POP
75138: POP
// result = temp_list2 ;
75139: LD_ADDR_VAR 0 7
75143: PUSH
75144: LD_VAR 0 10
75148: ST_TO_ADDR
// end ;
75149: LD_VAR 0 7
75153: RET
// export function EnemyInRange ( unit , dist ) ; begin
75154: LD_INT 0
75156: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75157: LD_ADDR_VAR 0 3
75161: PUSH
75162: LD_VAR 0 1
75166: PPUSH
75167: CALL_OW 255
75171: PPUSH
75172: LD_VAR 0 1
75176: PPUSH
75177: CALL_OW 250
75181: PPUSH
75182: LD_VAR 0 1
75186: PPUSH
75187: CALL_OW 251
75191: PPUSH
75192: LD_VAR 0 2
75196: PPUSH
75197: CALL 48411 0 4
75201: PUSH
75202: LD_INT 4
75204: ARRAY
75205: ST_TO_ADDR
// end ;
75206: LD_VAR 0 3
75210: RET
// export function PlayerSeeMe ( unit ) ; begin
75211: LD_INT 0
75213: PPUSH
// result := See ( your_side , unit ) ;
75214: LD_ADDR_VAR 0 2
75218: PUSH
75219: LD_OWVAR 2
75223: PPUSH
75224: LD_VAR 0 1
75228: PPUSH
75229: CALL_OW 292
75233: ST_TO_ADDR
// end ;
75234: LD_VAR 0 2
75238: RET
// export function ReverseDir ( unit ) ; begin
75239: LD_INT 0
75241: PPUSH
// if not unit then
75242: LD_VAR 0 1
75246: NOT
75247: IFFALSE 75251
// exit ;
75249: GO 75274
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75251: LD_ADDR_VAR 0 2
75255: PUSH
75256: LD_VAR 0 1
75260: PPUSH
75261: CALL_OW 254
75265: PUSH
75266: LD_INT 3
75268: PLUS
75269: PUSH
75270: LD_INT 6
75272: MOD
75273: ST_TO_ADDR
// end ;
75274: LD_VAR 0 2
75278: RET
// export function ReverseArray ( array ) ; var i ; begin
75279: LD_INT 0
75281: PPUSH
75282: PPUSH
// if not array then
75283: LD_VAR 0 1
75287: NOT
75288: IFFALSE 75292
// exit ;
75290: GO 75347
// result := [ ] ;
75292: LD_ADDR_VAR 0 2
75296: PUSH
75297: EMPTY
75298: ST_TO_ADDR
// for i := array downto 1 do
75299: LD_ADDR_VAR 0 3
75303: PUSH
75304: DOUBLE
75305: LD_VAR 0 1
75309: INC
75310: ST_TO_ADDR
75311: LD_INT 1
75313: PUSH
75314: FOR_DOWNTO
75315: IFFALSE 75345
// result := Join ( result , array [ i ] ) ;
75317: LD_ADDR_VAR 0 2
75321: PUSH
75322: LD_VAR 0 2
75326: PPUSH
75327: LD_VAR 0 1
75331: PUSH
75332: LD_VAR 0 3
75336: ARRAY
75337: PPUSH
75338: CALL 80189 0 2
75342: ST_TO_ADDR
75343: GO 75314
75345: POP
75346: POP
// end ;
75347: LD_VAR 0 2
75351: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
75352: LD_INT 0
75354: PPUSH
75355: PPUSH
75356: PPUSH
75357: PPUSH
75358: PPUSH
75359: PPUSH
// if not unit or not hexes then
75360: LD_VAR 0 1
75364: NOT
75365: IFTRUE 75374
75367: PUSH
75368: LD_VAR 0 2
75372: NOT
75373: OR
75374: IFFALSE 75378
// exit ;
75376: GO 75501
// dist := 9999 ;
75378: LD_ADDR_VAR 0 5
75382: PUSH
75383: LD_INT 9999
75385: ST_TO_ADDR
// for i = 1 to hexes do
75386: LD_ADDR_VAR 0 4
75390: PUSH
75391: DOUBLE
75392: LD_INT 1
75394: DEC
75395: ST_TO_ADDR
75396: LD_VAR 0 2
75400: PUSH
75401: FOR_TO
75402: IFFALSE 75489
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
75404: LD_ADDR_VAR 0 6
75408: PUSH
75409: LD_VAR 0 1
75413: PPUSH
75414: LD_VAR 0 2
75418: PUSH
75419: LD_VAR 0 4
75423: ARRAY
75424: PUSH
75425: LD_INT 1
75427: ARRAY
75428: PPUSH
75429: LD_VAR 0 2
75433: PUSH
75434: LD_VAR 0 4
75438: ARRAY
75439: PUSH
75440: LD_INT 2
75442: ARRAY
75443: PPUSH
75444: CALL_OW 297
75448: ST_TO_ADDR
// if tdist < dist then
75449: LD_VAR 0 6
75453: PUSH
75454: LD_VAR 0 5
75458: LESS
75459: IFFALSE 75487
// begin hex := hexes [ i ] ;
75461: LD_ADDR_VAR 0 8
75465: PUSH
75466: LD_VAR 0 2
75470: PUSH
75471: LD_VAR 0 4
75475: ARRAY
75476: ST_TO_ADDR
// dist := tdist ;
75477: LD_ADDR_VAR 0 5
75481: PUSH
75482: LD_VAR 0 6
75486: ST_TO_ADDR
// end ; end ;
75487: GO 75401
75489: POP
75490: POP
// result := hex ;
75491: LD_ADDR_VAR 0 3
75495: PUSH
75496: LD_VAR 0 8
75500: ST_TO_ADDR
// end ;
75501: LD_VAR 0 3
75505: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
75506: LD_INT 0
75508: PPUSH
75509: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75510: LD_VAR 0 1
75514: NOT
75515: IFTRUE 75554
75517: PUSH
75518: LD_VAR 0 1
75522: PUSH
75523: LD_INT 21
75525: PUSH
75526: LD_INT 2
75528: PUSH
75529: EMPTY
75530: LIST
75531: LIST
75532: PUSH
75533: LD_INT 23
75535: PUSH
75536: LD_INT 2
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: PUSH
75543: EMPTY
75544: LIST
75545: LIST
75546: PPUSH
75547: CALL_OW 69
75551: IN
75552: NOT
75553: OR
75554: IFFALSE 75558
// exit ;
75556: GO 75605
// for i = 1 to 3 do
75558: LD_ADDR_VAR 0 3
75562: PUSH
75563: DOUBLE
75564: LD_INT 1
75566: DEC
75567: ST_TO_ADDR
75568: LD_INT 3
75570: PUSH
75571: FOR_TO
75572: IFFALSE 75603
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75574: LD_VAR 0 1
75578: PPUSH
75579: CALL_OW 250
75583: PPUSH
75584: LD_VAR 0 1
75588: PPUSH
75589: CALL_OW 251
75593: PPUSH
75594: LD_INT 1
75596: PPUSH
75597: CALL_OW 453
75601: GO 75571
75603: POP
75604: POP
// end ;
75605: LD_VAR 0 2
75609: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75610: LD_INT 0
75612: PPUSH
75613: PPUSH
75614: PPUSH
75615: PPUSH
75616: PPUSH
75617: PPUSH
// if not unit or not enemy_unit then
75618: LD_VAR 0 1
75622: NOT
75623: IFTRUE 75632
75625: PUSH
75626: LD_VAR 0 2
75630: NOT
75631: OR
75632: IFFALSE 75636
// exit ;
75634: GO 76107
// if GetLives ( i ) < 250 then
75636: LD_VAR 0 4
75640: PPUSH
75641: CALL_OW 256
75645: PUSH
75646: LD_INT 250
75648: LESS
75649: IFFALSE 75662
// begin ComAutodestruct ( i ) ;
75651: LD_VAR 0 4
75655: PPUSH
75656: CALL 75506 0 1
// exit ;
75660: GO 76107
// end ; x := GetX ( enemy_unit ) ;
75662: LD_ADDR_VAR 0 7
75666: PUSH
75667: LD_VAR 0 2
75671: PPUSH
75672: CALL_OW 250
75676: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75677: LD_ADDR_VAR 0 8
75681: PUSH
75682: LD_VAR 0 2
75686: PPUSH
75687: CALL_OW 251
75691: ST_TO_ADDR
// if not x or not y then
75692: LD_VAR 0 7
75696: NOT
75697: IFTRUE 75706
75699: PUSH
75700: LD_VAR 0 8
75704: NOT
75705: OR
75706: IFFALSE 75710
// exit ;
75708: GO 76107
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75710: LD_ADDR_VAR 0 6
75714: PUSH
75715: LD_VAR 0 7
75719: PPUSH
75720: LD_INT 0
75722: PPUSH
75723: LD_INT 4
75725: PPUSH
75726: CALL_OW 272
75730: PUSH
75731: LD_VAR 0 8
75735: PPUSH
75736: LD_INT 0
75738: PPUSH
75739: LD_INT 4
75741: PPUSH
75742: CALL_OW 273
75746: PUSH
75747: EMPTY
75748: LIST
75749: LIST
75750: PUSH
75751: LD_VAR 0 7
75755: PPUSH
75756: LD_INT 1
75758: PPUSH
75759: LD_INT 4
75761: PPUSH
75762: CALL_OW 272
75766: PUSH
75767: LD_VAR 0 8
75771: PPUSH
75772: LD_INT 1
75774: PPUSH
75775: LD_INT 4
75777: PPUSH
75778: CALL_OW 273
75782: PUSH
75783: EMPTY
75784: LIST
75785: LIST
75786: PUSH
75787: LD_VAR 0 7
75791: PPUSH
75792: LD_INT 2
75794: PPUSH
75795: LD_INT 4
75797: PPUSH
75798: CALL_OW 272
75802: PUSH
75803: LD_VAR 0 8
75807: PPUSH
75808: LD_INT 2
75810: PPUSH
75811: LD_INT 4
75813: PPUSH
75814: CALL_OW 273
75818: PUSH
75819: EMPTY
75820: LIST
75821: LIST
75822: PUSH
75823: LD_VAR 0 7
75827: PPUSH
75828: LD_INT 3
75830: PPUSH
75831: LD_INT 4
75833: PPUSH
75834: CALL_OW 272
75838: PUSH
75839: LD_VAR 0 8
75843: PPUSH
75844: LD_INT 3
75846: PPUSH
75847: LD_INT 4
75849: PPUSH
75850: CALL_OW 273
75854: PUSH
75855: EMPTY
75856: LIST
75857: LIST
75858: PUSH
75859: LD_VAR 0 7
75863: PPUSH
75864: LD_INT 4
75866: PPUSH
75867: LD_INT 4
75869: PPUSH
75870: CALL_OW 272
75874: PUSH
75875: LD_VAR 0 8
75879: PPUSH
75880: LD_INT 4
75882: PPUSH
75883: LD_INT 4
75885: PPUSH
75886: CALL_OW 273
75890: PUSH
75891: EMPTY
75892: LIST
75893: LIST
75894: PUSH
75895: LD_VAR 0 7
75899: PPUSH
75900: LD_INT 5
75902: PPUSH
75903: LD_INT 4
75905: PPUSH
75906: CALL_OW 272
75910: PUSH
75911: LD_VAR 0 8
75915: PPUSH
75916: LD_INT 5
75918: PPUSH
75919: LD_INT 4
75921: PPUSH
75922: CALL_OW 273
75926: PUSH
75927: EMPTY
75928: LIST
75929: LIST
75930: PUSH
75931: EMPTY
75932: LIST
75933: LIST
75934: LIST
75935: LIST
75936: LIST
75937: LIST
75938: ST_TO_ADDR
// for i = tmp downto 1 do
75939: LD_ADDR_VAR 0 4
75943: PUSH
75944: DOUBLE
75945: LD_VAR 0 6
75949: INC
75950: ST_TO_ADDR
75951: LD_INT 1
75953: PUSH
75954: FOR_DOWNTO
75955: IFFALSE 76058
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75957: LD_VAR 0 6
75961: PUSH
75962: LD_VAR 0 4
75966: ARRAY
75967: PUSH
75968: LD_INT 1
75970: ARRAY
75971: PPUSH
75972: LD_VAR 0 6
75976: PUSH
75977: LD_VAR 0 4
75981: ARRAY
75982: PUSH
75983: LD_INT 2
75985: ARRAY
75986: PPUSH
75987: CALL_OW 488
75991: NOT
75992: IFTRUE 76034
75994: PUSH
75995: LD_VAR 0 6
75999: PUSH
76000: LD_VAR 0 4
76004: ARRAY
76005: PUSH
76006: LD_INT 1
76008: ARRAY
76009: PPUSH
76010: LD_VAR 0 6
76014: PUSH
76015: LD_VAR 0 4
76019: ARRAY
76020: PUSH
76021: LD_INT 2
76023: ARRAY
76024: PPUSH
76025: CALL_OW 428
76029: PUSH
76030: LD_INT 0
76032: NONEQUAL
76033: OR
76034: IFFALSE 76056
// tmp := Delete ( tmp , i ) ;
76036: LD_ADDR_VAR 0 6
76040: PUSH
76041: LD_VAR 0 6
76045: PPUSH
76046: LD_VAR 0 4
76050: PPUSH
76051: CALL_OW 3
76055: ST_TO_ADDR
76056: GO 75954
76058: POP
76059: POP
// j := GetClosestHex ( unit , tmp ) ;
76060: LD_ADDR_VAR 0 5
76064: PUSH
76065: LD_VAR 0 1
76069: PPUSH
76070: LD_VAR 0 6
76074: PPUSH
76075: CALL 75352 0 2
76079: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
76080: LD_VAR 0 1
76084: PPUSH
76085: LD_VAR 0 5
76089: PUSH
76090: LD_INT 1
76092: ARRAY
76093: PPUSH
76094: LD_VAR 0 5
76098: PUSH
76099: LD_INT 2
76101: ARRAY
76102: PPUSH
76103: CALL_OW 111
// end ;
76107: LD_VAR 0 3
76111: RET
// export function PrepareApemanSoldier ( ) ; begin
76112: LD_INT 0
76114: PPUSH
// uc_nation := 0 ;
76115: LD_ADDR_OWVAR 21
76119: PUSH
76120: LD_INT 0
76122: ST_TO_ADDR
// hc_sex := sex_male ;
76123: LD_ADDR_OWVAR 27
76127: PUSH
76128: LD_INT 1
76130: ST_TO_ADDR
// hc_name :=  ;
76131: LD_ADDR_OWVAR 26
76135: PUSH
76136: LD_STRING 
76138: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
76139: LD_ADDR_OWVAR 28
76143: PUSH
76144: LD_INT 15
76146: ST_TO_ADDR
// hc_gallery :=  ;
76147: LD_ADDR_OWVAR 33
76151: PUSH
76152: LD_STRING 
76154: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76155: LD_ADDR_OWVAR 31
76159: PUSH
76160: LD_INT 0
76162: PPUSH
76163: LD_INT 3
76165: PPUSH
76166: CALL_OW 12
76170: PUSH
76171: LD_INT 0
76173: PPUSH
76174: LD_INT 3
76176: PPUSH
76177: CALL_OW 12
76181: PUSH
76182: LD_INT 0
76184: PUSH
76185: LD_INT 0
76187: PUSH
76188: EMPTY
76189: LIST
76190: LIST
76191: LIST
76192: LIST
76193: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76194: LD_ADDR_OWVAR 29
76198: PUSH
76199: LD_INT 12
76201: PUSH
76202: LD_INT 12
76204: PUSH
76205: EMPTY
76206: LIST
76207: LIST
76208: ST_TO_ADDR
// end ;
76209: LD_VAR 0 1
76213: RET
// export function PrepareApemanEngineer ( ) ; begin
76214: LD_INT 0
76216: PPUSH
// uc_nation := 0 ;
76217: LD_ADDR_OWVAR 21
76221: PUSH
76222: LD_INT 0
76224: ST_TO_ADDR
// hc_sex := sex_male ;
76225: LD_ADDR_OWVAR 27
76229: PUSH
76230: LD_INT 1
76232: ST_TO_ADDR
// hc_name :=  ;
76233: LD_ADDR_OWVAR 26
76237: PUSH
76238: LD_STRING 
76240: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
76241: LD_ADDR_OWVAR 28
76245: PUSH
76246: LD_INT 16
76248: ST_TO_ADDR
// hc_gallery :=  ;
76249: LD_ADDR_OWVAR 33
76253: PUSH
76254: LD_STRING 
76256: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76257: LD_ADDR_OWVAR 31
76261: PUSH
76262: LD_INT 0
76264: PPUSH
76265: LD_INT 3
76267: PPUSH
76268: CALL_OW 12
76272: PUSH
76273: LD_INT 0
76275: PPUSH
76276: LD_INT 3
76278: PPUSH
76279: CALL_OW 12
76283: PUSH
76284: LD_INT 0
76286: PUSH
76287: LD_INT 0
76289: PUSH
76290: EMPTY
76291: LIST
76292: LIST
76293: LIST
76294: LIST
76295: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76296: LD_ADDR_OWVAR 29
76300: PUSH
76301: LD_INT 12
76303: PUSH
76304: LD_INT 12
76306: PUSH
76307: EMPTY
76308: LIST
76309: LIST
76310: ST_TO_ADDR
// end ;
76311: LD_VAR 0 1
76315: RET
// export function PrepareApeman ( agressivity ) ; begin
76316: LD_INT 0
76318: PPUSH
// uc_side := 0 ;
76319: LD_ADDR_OWVAR 20
76323: PUSH
76324: LD_INT 0
76326: ST_TO_ADDR
// uc_nation := 0 ;
76327: LD_ADDR_OWVAR 21
76331: PUSH
76332: LD_INT 0
76334: ST_TO_ADDR
// hc_sex := sex_male ;
76335: LD_ADDR_OWVAR 27
76339: PUSH
76340: LD_INT 1
76342: ST_TO_ADDR
// hc_class := class_apeman ;
76343: LD_ADDR_OWVAR 28
76347: PUSH
76348: LD_INT 12
76350: ST_TO_ADDR
// hc_gallery :=  ;
76351: LD_ADDR_OWVAR 33
76355: PUSH
76356: LD_STRING 
76358: ST_TO_ADDR
// hc_name :=  ;
76359: LD_ADDR_OWVAR 26
76363: PUSH
76364: LD_STRING 
76366: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76367: LD_ADDR_OWVAR 29
76371: PUSH
76372: LD_INT 12
76374: PUSH
76375: LD_INT 12
76377: PUSH
76378: EMPTY
76379: LIST
76380: LIST
76381: ST_TO_ADDR
// if agressivity = 0 then
76382: LD_VAR 0 1
76386: PUSH
76387: LD_INT 0
76389: EQUAL
76390: IFFALSE 76402
// hc_agressivity := 0 else
76392: LD_ADDR_OWVAR 35
76396: PUSH
76397: LD_INT 0
76399: ST_TO_ADDR
76400: GO 76423
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76402: LD_ADDR_OWVAR 35
76406: PUSH
76407: LD_VAR 0 1
76411: NEG
76412: PPUSH
76413: LD_VAR 0 1
76417: PPUSH
76418: CALL_OW 12
76422: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76423: LD_ADDR_OWVAR 31
76427: PUSH
76428: LD_INT 0
76430: PPUSH
76431: LD_INT 3
76433: PPUSH
76434: CALL_OW 12
76438: PUSH
76439: LD_INT 0
76441: PPUSH
76442: LD_INT 3
76444: PPUSH
76445: CALL_OW 12
76449: PUSH
76450: LD_INT 0
76452: PUSH
76453: LD_INT 0
76455: PUSH
76456: EMPTY
76457: LIST
76458: LIST
76459: LIST
76460: LIST
76461: ST_TO_ADDR
// end ;
76462: LD_VAR 0 2
76466: RET
// export function PrepareTiger ( agressivity ) ; begin
76467: LD_INT 0
76469: PPUSH
// uc_side := 0 ;
76470: LD_ADDR_OWVAR 20
76474: PUSH
76475: LD_INT 0
76477: ST_TO_ADDR
// uc_nation := 0 ;
76478: LD_ADDR_OWVAR 21
76482: PUSH
76483: LD_INT 0
76485: ST_TO_ADDR
// InitHc ;
76486: CALL_OW 19
// hc_class := class_tiger ;
76490: LD_ADDR_OWVAR 28
76494: PUSH
76495: LD_INT 14
76497: ST_TO_ADDR
// hc_gallery :=  ;
76498: LD_ADDR_OWVAR 33
76502: PUSH
76503: LD_STRING 
76505: ST_TO_ADDR
// hc_name :=  ;
76506: LD_ADDR_OWVAR 26
76510: PUSH
76511: LD_STRING 
76513: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76514: LD_ADDR_OWVAR 35
76518: PUSH
76519: LD_VAR 0 1
76523: NEG
76524: PPUSH
76525: LD_VAR 0 1
76529: PPUSH
76530: CALL_OW 12
76534: ST_TO_ADDR
// end ;
76535: LD_VAR 0 2
76539: RET
// export function PrepareEnchidna ( ) ; begin
76540: LD_INT 0
76542: PPUSH
// uc_side := 0 ;
76543: LD_ADDR_OWVAR 20
76547: PUSH
76548: LD_INT 0
76550: ST_TO_ADDR
// uc_nation := 0 ;
76551: LD_ADDR_OWVAR 21
76555: PUSH
76556: LD_INT 0
76558: ST_TO_ADDR
// InitHc ;
76559: CALL_OW 19
// hc_class := class_baggie ;
76563: LD_ADDR_OWVAR 28
76567: PUSH
76568: LD_INT 13
76570: ST_TO_ADDR
// hc_gallery :=  ;
76571: LD_ADDR_OWVAR 33
76575: PUSH
76576: LD_STRING 
76578: ST_TO_ADDR
// hc_name :=  ;
76579: LD_ADDR_OWVAR 26
76583: PUSH
76584: LD_STRING 
76586: ST_TO_ADDR
// end ;
76587: LD_VAR 0 1
76591: RET
// export function PrepareFrog ( ) ; begin
76592: LD_INT 0
76594: PPUSH
// uc_side := 0 ;
76595: LD_ADDR_OWVAR 20
76599: PUSH
76600: LD_INT 0
76602: ST_TO_ADDR
// uc_nation := 0 ;
76603: LD_ADDR_OWVAR 21
76607: PUSH
76608: LD_INT 0
76610: ST_TO_ADDR
// InitHc ;
76611: CALL_OW 19
// hc_class := class_frog ;
76615: LD_ADDR_OWVAR 28
76619: PUSH
76620: LD_INT 19
76622: ST_TO_ADDR
// hc_gallery :=  ;
76623: LD_ADDR_OWVAR 33
76627: PUSH
76628: LD_STRING 
76630: ST_TO_ADDR
// hc_name :=  ;
76631: LD_ADDR_OWVAR 26
76635: PUSH
76636: LD_STRING 
76638: ST_TO_ADDR
// end ;
76639: LD_VAR 0 1
76643: RET
// export function PrepareFish ( ) ; begin
76644: LD_INT 0
76646: PPUSH
// uc_side := 0 ;
76647: LD_ADDR_OWVAR 20
76651: PUSH
76652: LD_INT 0
76654: ST_TO_ADDR
// uc_nation := 0 ;
76655: LD_ADDR_OWVAR 21
76659: PUSH
76660: LD_INT 0
76662: ST_TO_ADDR
// InitHc ;
76663: CALL_OW 19
// hc_class := class_fish ;
76667: LD_ADDR_OWVAR 28
76671: PUSH
76672: LD_INT 20
76674: ST_TO_ADDR
// hc_gallery :=  ;
76675: LD_ADDR_OWVAR 33
76679: PUSH
76680: LD_STRING 
76682: ST_TO_ADDR
// hc_name :=  ;
76683: LD_ADDR_OWVAR 26
76687: PUSH
76688: LD_STRING 
76690: ST_TO_ADDR
// end ;
76691: LD_VAR 0 1
76695: RET
// export function PrepareBird ( ) ; begin
76696: LD_INT 0
76698: PPUSH
// uc_side := 0 ;
76699: LD_ADDR_OWVAR 20
76703: PUSH
76704: LD_INT 0
76706: ST_TO_ADDR
// uc_nation := 0 ;
76707: LD_ADDR_OWVAR 21
76711: PUSH
76712: LD_INT 0
76714: ST_TO_ADDR
// InitHc ;
76715: CALL_OW 19
// hc_class := class_phororhacos ;
76719: LD_ADDR_OWVAR 28
76723: PUSH
76724: LD_INT 18
76726: ST_TO_ADDR
// hc_gallery :=  ;
76727: LD_ADDR_OWVAR 33
76731: PUSH
76732: LD_STRING 
76734: ST_TO_ADDR
// hc_name :=  ;
76735: LD_ADDR_OWVAR 26
76739: PUSH
76740: LD_STRING 
76742: ST_TO_ADDR
// end ;
76743: LD_VAR 0 1
76747: RET
// export function PrepareHorse ( ) ; begin
76748: LD_INT 0
76750: PPUSH
// uc_side := 0 ;
76751: LD_ADDR_OWVAR 20
76755: PUSH
76756: LD_INT 0
76758: ST_TO_ADDR
// uc_nation := 0 ;
76759: LD_ADDR_OWVAR 21
76763: PUSH
76764: LD_INT 0
76766: ST_TO_ADDR
// InitHc ;
76767: CALL_OW 19
// hc_class := class_horse ;
76771: LD_ADDR_OWVAR 28
76775: PUSH
76776: LD_INT 21
76778: ST_TO_ADDR
// hc_gallery :=  ;
76779: LD_ADDR_OWVAR 33
76783: PUSH
76784: LD_STRING 
76786: ST_TO_ADDR
// hc_name :=  ;
76787: LD_ADDR_OWVAR 26
76791: PUSH
76792: LD_STRING 
76794: ST_TO_ADDR
// end ;
76795: LD_VAR 0 1
76799: RET
// export function PrepareMastodont ( ) ; begin
76800: LD_INT 0
76802: PPUSH
// uc_side := 0 ;
76803: LD_ADDR_OWVAR 20
76807: PUSH
76808: LD_INT 0
76810: ST_TO_ADDR
// uc_nation := 0 ;
76811: LD_ADDR_OWVAR 21
76815: PUSH
76816: LD_INT 0
76818: ST_TO_ADDR
// vc_chassis := class_mastodont ;
76819: LD_ADDR_OWVAR 37
76823: PUSH
76824: LD_INT 31
76826: ST_TO_ADDR
// vc_control := control_rider ;
76827: LD_ADDR_OWVAR 38
76831: PUSH
76832: LD_INT 4
76834: ST_TO_ADDR
// end ;
76835: LD_VAR 0 1
76839: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76840: LD_INT 0
76842: PPUSH
76843: PPUSH
76844: PPUSH
// uc_side = 0 ;
76845: LD_ADDR_OWVAR 20
76849: PUSH
76850: LD_INT 0
76852: ST_TO_ADDR
// uc_nation = 0 ;
76853: LD_ADDR_OWVAR 21
76857: PUSH
76858: LD_INT 0
76860: ST_TO_ADDR
// InitHc_All ( ) ;
76861: CALL_OW 584
// InitVc ;
76865: CALL_OW 20
// if mastodonts then
76869: LD_VAR 0 6
76873: IFFALSE 76940
// for i = 1 to mastodonts do
76875: LD_ADDR_VAR 0 11
76879: PUSH
76880: DOUBLE
76881: LD_INT 1
76883: DEC
76884: ST_TO_ADDR
76885: LD_VAR 0 6
76889: PUSH
76890: FOR_TO
76891: IFFALSE 76938
// begin vc_chassis := 31 ;
76893: LD_ADDR_OWVAR 37
76897: PUSH
76898: LD_INT 31
76900: ST_TO_ADDR
// vc_control := control_rider ;
76901: LD_ADDR_OWVAR 38
76905: PUSH
76906: LD_INT 4
76908: ST_TO_ADDR
// animal := CreateVehicle ;
76909: LD_ADDR_VAR 0 12
76913: PUSH
76914: CALL_OW 45
76918: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76919: LD_VAR 0 12
76923: PPUSH
76924: LD_VAR 0 8
76928: PPUSH
76929: LD_INT 0
76931: PPUSH
76932: CALL 79082 0 3
// end ;
76936: GO 76890
76938: POP
76939: POP
// if horses then
76940: LD_VAR 0 5
76944: IFFALSE 77011
// for i = 1 to horses do
76946: LD_ADDR_VAR 0 11
76950: PUSH
76951: DOUBLE
76952: LD_INT 1
76954: DEC
76955: ST_TO_ADDR
76956: LD_VAR 0 5
76960: PUSH
76961: FOR_TO
76962: IFFALSE 77009
// begin hc_class := 21 ;
76964: LD_ADDR_OWVAR 28
76968: PUSH
76969: LD_INT 21
76971: ST_TO_ADDR
// hc_gallery :=  ;
76972: LD_ADDR_OWVAR 33
76976: PUSH
76977: LD_STRING 
76979: ST_TO_ADDR
// animal := CreateHuman ;
76980: LD_ADDR_VAR 0 12
76984: PUSH
76985: CALL_OW 44
76989: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76990: LD_VAR 0 12
76994: PPUSH
76995: LD_VAR 0 8
76999: PPUSH
77000: LD_INT 0
77002: PPUSH
77003: CALL 79082 0 3
// end ;
77007: GO 76961
77009: POP
77010: POP
// if birds then
77011: LD_VAR 0 1
77015: IFFALSE 77082
// for i = 1 to birds do
77017: LD_ADDR_VAR 0 11
77021: PUSH
77022: DOUBLE
77023: LD_INT 1
77025: DEC
77026: ST_TO_ADDR
77027: LD_VAR 0 1
77031: PUSH
77032: FOR_TO
77033: IFFALSE 77080
// begin hc_class := 18 ;
77035: LD_ADDR_OWVAR 28
77039: PUSH
77040: LD_INT 18
77042: ST_TO_ADDR
// hc_gallery =  ;
77043: LD_ADDR_OWVAR 33
77047: PUSH
77048: LD_STRING 
77050: ST_TO_ADDR
// animal := CreateHuman ;
77051: LD_ADDR_VAR 0 12
77055: PUSH
77056: CALL_OW 44
77060: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77061: LD_VAR 0 12
77065: PPUSH
77066: LD_VAR 0 8
77070: PPUSH
77071: LD_INT 0
77073: PPUSH
77074: CALL 79082 0 3
// end ;
77078: GO 77032
77080: POP
77081: POP
// if tigers then
77082: LD_VAR 0 2
77086: IFFALSE 77170
// for i = 1 to tigers do
77088: LD_ADDR_VAR 0 11
77092: PUSH
77093: DOUBLE
77094: LD_INT 1
77096: DEC
77097: ST_TO_ADDR
77098: LD_VAR 0 2
77102: PUSH
77103: FOR_TO
77104: IFFALSE 77168
// begin hc_class = class_tiger ;
77106: LD_ADDR_OWVAR 28
77110: PUSH
77111: LD_INT 14
77113: ST_TO_ADDR
// hc_gallery =  ;
77114: LD_ADDR_OWVAR 33
77118: PUSH
77119: LD_STRING 
77121: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77122: LD_ADDR_OWVAR 35
77126: PUSH
77127: LD_INT 7
77129: NEG
77130: PPUSH
77131: LD_INT 7
77133: PPUSH
77134: CALL_OW 12
77138: ST_TO_ADDR
// animal := CreateHuman ;
77139: LD_ADDR_VAR 0 12
77143: PUSH
77144: CALL_OW 44
77148: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77149: LD_VAR 0 12
77153: PPUSH
77154: LD_VAR 0 8
77158: PPUSH
77159: LD_INT 0
77161: PPUSH
77162: CALL 79082 0 3
// end ;
77166: GO 77103
77168: POP
77169: POP
// if apemans then
77170: LD_VAR 0 3
77174: IFFALSE 77297
// for i = 1 to apemans do
77176: LD_ADDR_VAR 0 11
77180: PUSH
77181: DOUBLE
77182: LD_INT 1
77184: DEC
77185: ST_TO_ADDR
77186: LD_VAR 0 3
77190: PUSH
77191: FOR_TO
77192: IFFALSE 77295
// begin hc_class = class_apeman ;
77194: LD_ADDR_OWVAR 28
77198: PUSH
77199: LD_INT 12
77201: ST_TO_ADDR
// hc_gallery =  ;
77202: LD_ADDR_OWVAR 33
77206: PUSH
77207: LD_STRING 
77209: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
77210: LD_ADDR_OWVAR 35
77214: PUSH
77215: LD_INT 2
77217: NEG
77218: PPUSH
77219: LD_INT 2
77221: PPUSH
77222: CALL_OW 12
77226: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
77227: LD_ADDR_OWVAR 31
77231: PUSH
77232: LD_INT 1
77234: PPUSH
77235: LD_INT 3
77237: PPUSH
77238: CALL_OW 12
77242: PUSH
77243: LD_INT 1
77245: PPUSH
77246: LD_INT 3
77248: PPUSH
77249: CALL_OW 12
77253: PUSH
77254: LD_INT 0
77256: PUSH
77257: LD_INT 0
77259: PUSH
77260: EMPTY
77261: LIST
77262: LIST
77263: LIST
77264: LIST
77265: ST_TO_ADDR
// animal := CreateHuman ;
77266: LD_ADDR_VAR 0 12
77270: PUSH
77271: CALL_OW 44
77275: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77276: LD_VAR 0 12
77280: PPUSH
77281: LD_VAR 0 8
77285: PPUSH
77286: LD_INT 0
77288: PPUSH
77289: CALL 79082 0 3
// end ;
77293: GO 77191
77295: POP
77296: POP
// if enchidnas then
77297: LD_VAR 0 4
77301: IFFALSE 77368
// for i = 1 to enchidnas do
77303: LD_ADDR_VAR 0 11
77307: PUSH
77308: DOUBLE
77309: LD_INT 1
77311: DEC
77312: ST_TO_ADDR
77313: LD_VAR 0 4
77317: PUSH
77318: FOR_TO
77319: IFFALSE 77366
// begin hc_class = 13 ;
77321: LD_ADDR_OWVAR 28
77325: PUSH
77326: LD_INT 13
77328: ST_TO_ADDR
// hc_gallery =  ;
77329: LD_ADDR_OWVAR 33
77333: PUSH
77334: LD_STRING 
77336: ST_TO_ADDR
// animal := CreateHuman ;
77337: LD_ADDR_VAR 0 12
77341: PUSH
77342: CALL_OW 44
77346: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77347: LD_VAR 0 12
77351: PPUSH
77352: LD_VAR 0 8
77356: PPUSH
77357: LD_INT 0
77359: PPUSH
77360: CALL 79082 0 3
// end ;
77364: GO 77318
77366: POP
77367: POP
// if fishes then
77368: LD_VAR 0 7
77372: IFFALSE 77439
// for i = 1 to fishes do
77374: LD_ADDR_VAR 0 11
77378: PUSH
77379: DOUBLE
77380: LD_INT 1
77382: DEC
77383: ST_TO_ADDR
77384: LD_VAR 0 7
77388: PUSH
77389: FOR_TO
77390: IFFALSE 77437
// begin hc_class = 20 ;
77392: LD_ADDR_OWVAR 28
77396: PUSH
77397: LD_INT 20
77399: ST_TO_ADDR
// hc_gallery =  ;
77400: LD_ADDR_OWVAR 33
77404: PUSH
77405: LD_STRING 
77407: ST_TO_ADDR
// animal := CreateHuman ;
77408: LD_ADDR_VAR 0 12
77412: PUSH
77413: CALL_OW 44
77417: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77418: LD_VAR 0 12
77422: PPUSH
77423: LD_VAR 0 9
77427: PPUSH
77428: LD_INT 0
77430: PPUSH
77431: CALL 79082 0 3
// end ;
77435: GO 77389
77437: POP
77438: POP
// end ;
77439: LD_VAR 0 10
77443: RET
// export function WantHeal ( sci , unit ) ; begin
77444: LD_INT 0
77446: PPUSH
// if GetTaskList ( sci ) > 0 then
77447: LD_VAR 0 1
77451: PPUSH
77452: CALL_OW 437
77456: PUSH
77457: LD_INT 0
77459: GREATER
77460: IFFALSE 77532
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77462: LD_VAR 0 1
77466: PPUSH
77467: CALL_OW 437
77471: PUSH
77472: LD_INT 1
77474: ARRAY
77475: PUSH
77476: LD_INT 1
77478: ARRAY
77479: PUSH
77480: LD_STRING l
77482: EQUAL
77483: IFFALSE 77510
77485: PUSH
77486: LD_VAR 0 1
77490: PPUSH
77491: CALL_OW 437
77495: PUSH
77496: LD_INT 1
77498: ARRAY
77499: PUSH
77500: LD_INT 4
77502: ARRAY
77503: PUSH
77504: LD_VAR 0 2
77508: EQUAL
77509: AND
77510: IFFALSE 77522
// result := true else
77512: LD_ADDR_VAR 0 3
77516: PUSH
77517: LD_INT 1
77519: ST_TO_ADDR
77520: GO 77530
// result := false ;
77522: LD_ADDR_VAR 0 3
77526: PUSH
77527: LD_INT 0
77529: ST_TO_ADDR
// end else
77530: GO 77540
// result := false ;
77532: LD_ADDR_VAR 0 3
77536: PUSH
77537: LD_INT 0
77539: ST_TO_ADDR
// end ;
77540: LD_VAR 0 3
77544: RET
// export function HealTarget ( sci ) ; begin
77545: LD_INT 0
77547: PPUSH
// if not sci then
77548: LD_VAR 0 1
77552: NOT
77553: IFFALSE 77557
// exit ;
77555: GO 77622
// result := 0 ;
77557: LD_ADDR_VAR 0 2
77561: PUSH
77562: LD_INT 0
77564: ST_TO_ADDR
// if GetTaskList ( sci ) then
77565: LD_VAR 0 1
77569: PPUSH
77570: CALL_OW 437
77574: IFFALSE 77622
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77576: LD_VAR 0 1
77580: PPUSH
77581: CALL_OW 437
77585: PUSH
77586: LD_INT 1
77588: ARRAY
77589: PUSH
77590: LD_INT 1
77592: ARRAY
77593: PUSH
77594: LD_STRING l
77596: EQUAL
77597: IFFALSE 77622
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77599: LD_ADDR_VAR 0 2
77603: PUSH
77604: LD_VAR 0 1
77608: PPUSH
77609: CALL_OW 437
77613: PUSH
77614: LD_INT 1
77616: ARRAY
77617: PUSH
77618: LD_INT 4
77620: ARRAY
77621: ST_TO_ADDR
// end ;
77622: LD_VAR 0 2
77626: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77627: LD_INT 0
77629: PPUSH
77630: PPUSH
77631: PPUSH
77632: PPUSH
// if not base_units then
77633: LD_VAR 0 1
77637: NOT
77638: IFFALSE 77642
// exit ;
77640: GO 77729
// result := false ;
77642: LD_ADDR_VAR 0 2
77646: PUSH
77647: LD_INT 0
77649: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77650: LD_ADDR_VAR 0 5
77654: PUSH
77655: LD_VAR 0 1
77659: PPUSH
77660: LD_INT 21
77662: PUSH
77663: LD_INT 3
77665: PUSH
77666: EMPTY
77667: LIST
77668: LIST
77669: PPUSH
77670: CALL_OW 72
77674: ST_TO_ADDR
// if not tmp then
77675: LD_VAR 0 5
77679: NOT
77680: IFFALSE 77684
// exit ;
77682: GO 77729
// for i in tmp do
77684: LD_ADDR_VAR 0 3
77688: PUSH
77689: LD_VAR 0 5
77693: PUSH
77694: FOR_IN
77695: IFFALSE 77727
// begin result := EnemyInRange ( i , 22 ) ;
77697: LD_ADDR_VAR 0 2
77701: PUSH
77702: LD_VAR 0 3
77706: PPUSH
77707: LD_INT 22
77709: PPUSH
77710: CALL 75154 0 2
77714: ST_TO_ADDR
// if result then
77715: LD_VAR 0 2
77719: IFFALSE 77725
// exit ;
77721: POP
77722: POP
77723: GO 77729
// end ;
77725: GO 77694
77727: POP
77728: POP
// end ;
77729: LD_VAR 0 2
77733: RET
// export function FilterByTag ( units , tag ) ; begin
77734: LD_INT 0
77736: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77737: LD_ADDR_VAR 0 3
77741: PUSH
77742: LD_VAR 0 1
77746: PPUSH
77747: LD_INT 120
77749: PUSH
77750: LD_VAR 0 2
77754: PUSH
77755: EMPTY
77756: LIST
77757: LIST
77758: PPUSH
77759: CALL_OW 72
77763: ST_TO_ADDR
// end ;
77764: LD_VAR 0 3
77768: RET
// export function IsDriver ( un ) ; begin
77769: LD_INT 0
77771: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77772: LD_ADDR_VAR 0 2
77776: PUSH
77777: LD_VAR 0 1
77781: PUSH
77782: LD_INT 55
77784: PUSH
77785: EMPTY
77786: LIST
77787: PPUSH
77788: CALL_OW 69
77792: IN
77793: ST_TO_ADDR
// end ;
77794: LD_VAR 0 2
77798: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77799: LD_INT 0
77801: PPUSH
77802: PPUSH
// list := [ ] ;
77803: LD_ADDR_VAR 0 5
77807: PUSH
77808: EMPTY
77809: ST_TO_ADDR
// case d of 0 :
77810: LD_VAR 0 3
77814: PUSH
77815: LD_INT 0
77817: DOUBLE
77818: EQUAL
77819: IFTRUE 77823
77821: GO 77956
77823: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77824: LD_ADDR_VAR 0 5
77828: PUSH
77829: LD_VAR 0 1
77833: PUSH
77834: LD_INT 4
77836: MINUS
77837: PUSH
77838: LD_VAR 0 2
77842: PUSH
77843: LD_INT 4
77845: MINUS
77846: PUSH
77847: LD_INT 2
77849: PUSH
77850: EMPTY
77851: LIST
77852: LIST
77853: LIST
77854: PUSH
77855: LD_VAR 0 1
77859: PUSH
77860: LD_INT 3
77862: MINUS
77863: PUSH
77864: LD_VAR 0 2
77868: PUSH
77869: LD_INT 1
77871: PUSH
77872: EMPTY
77873: LIST
77874: LIST
77875: LIST
77876: PUSH
77877: LD_VAR 0 1
77881: PUSH
77882: LD_INT 4
77884: PLUS
77885: PUSH
77886: LD_VAR 0 2
77890: PUSH
77891: LD_INT 4
77893: PUSH
77894: EMPTY
77895: LIST
77896: LIST
77897: LIST
77898: PUSH
77899: LD_VAR 0 1
77903: PUSH
77904: LD_INT 3
77906: PLUS
77907: PUSH
77908: LD_VAR 0 2
77912: PUSH
77913: LD_INT 3
77915: PLUS
77916: PUSH
77917: LD_INT 5
77919: PUSH
77920: EMPTY
77921: LIST
77922: LIST
77923: LIST
77924: PUSH
77925: LD_VAR 0 1
77929: PUSH
77930: LD_VAR 0 2
77934: PUSH
77935: LD_INT 4
77937: PLUS
77938: PUSH
77939: LD_INT 0
77941: PUSH
77942: EMPTY
77943: LIST
77944: LIST
77945: LIST
77946: PUSH
77947: EMPTY
77948: LIST
77949: LIST
77950: LIST
77951: LIST
77952: LIST
77953: ST_TO_ADDR
// end ; 1 :
77954: GO 78654
77956: LD_INT 1
77958: DOUBLE
77959: EQUAL
77960: IFTRUE 77964
77962: GO 78097
77964: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77965: LD_ADDR_VAR 0 5
77969: PUSH
77970: LD_VAR 0 1
77974: PUSH
77975: LD_VAR 0 2
77979: PUSH
77980: LD_INT 4
77982: MINUS
77983: PUSH
77984: LD_INT 3
77986: PUSH
77987: EMPTY
77988: LIST
77989: LIST
77990: LIST
77991: PUSH
77992: LD_VAR 0 1
77996: PUSH
77997: LD_INT 3
77999: MINUS
78000: PUSH
78001: LD_VAR 0 2
78005: PUSH
78006: LD_INT 3
78008: MINUS
78009: PUSH
78010: LD_INT 2
78012: PUSH
78013: EMPTY
78014: LIST
78015: LIST
78016: LIST
78017: PUSH
78018: LD_VAR 0 1
78022: PUSH
78023: LD_INT 4
78025: MINUS
78026: PUSH
78027: LD_VAR 0 2
78031: PUSH
78032: LD_INT 1
78034: PUSH
78035: EMPTY
78036: LIST
78037: LIST
78038: LIST
78039: PUSH
78040: LD_VAR 0 1
78044: PUSH
78045: LD_VAR 0 2
78049: PUSH
78050: LD_INT 3
78052: PLUS
78053: PUSH
78054: LD_INT 0
78056: PUSH
78057: EMPTY
78058: LIST
78059: LIST
78060: LIST
78061: PUSH
78062: LD_VAR 0 1
78066: PUSH
78067: LD_INT 4
78069: PLUS
78070: PUSH
78071: LD_VAR 0 2
78075: PUSH
78076: LD_INT 4
78078: PLUS
78079: PUSH
78080: LD_INT 5
78082: PUSH
78083: EMPTY
78084: LIST
78085: LIST
78086: LIST
78087: PUSH
78088: EMPTY
78089: LIST
78090: LIST
78091: LIST
78092: LIST
78093: LIST
78094: ST_TO_ADDR
// end ; 2 :
78095: GO 78654
78097: LD_INT 2
78099: DOUBLE
78100: EQUAL
78101: IFTRUE 78105
78103: GO 78234
78105: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78106: LD_ADDR_VAR 0 5
78110: PUSH
78111: LD_VAR 0 1
78115: PUSH
78116: LD_VAR 0 2
78120: PUSH
78121: LD_INT 3
78123: MINUS
78124: PUSH
78125: LD_INT 3
78127: PUSH
78128: EMPTY
78129: LIST
78130: LIST
78131: LIST
78132: PUSH
78133: LD_VAR 0 1
78137: PUSH
78138: LD_INT 4
78140: PLUS
78141: PUSH
78142: LD_VAR 0 2
78146: PUSH
78147: LD_INT 4
78149: PUSH
78150: EMPTY
78151: LIST
78152: LIST
78153: LIST
78154: PUSH
78155: LD_VAR 0 1
78159: PUSH
78160: LD_VAR 0 2
78164: PUSH
78165: LD_INT 4
78167: PLUS
78168: PUSH
78169: LD_INT 0
78171: PUSH
78172: EMPTY
78173: LIST
78174: LIST
78175: LIST
78176: PUSH
78177: LD_VAR 0 1
78181: PUSH
78182: LD_INT 3
78184: MINUS
78185: PUSH
78186: LD_VAR 0 2
78190: PUSH
78191: LD_INT 1
78193: PUSH
78194: EMPTY
78195: LIST
78196: LIST
78197: LIST
78198: PUSH
78199: LD_VAR 0 1
78203: PUSH
78204: LD_INT 4
78206: MINUS
78207: PUSH
78208: LD_VAR 0 2
78212: PUSH
78213: LD_INT 4
78215: MINUS
78216: PUSH
78217: LD_INT 2
78219: PUSH
78220: EMPTY
78221: LIST
78222: LIST
78223: LIST
78224: PUSH
78225: EMPTY
78226: LIST
78227: LIST
78228: LIST
78229: LIST
78230: LIST
78231: ST_TO_ADDR
// end ; 3 :
78232: GO 78654
78234: LD_INT 3
78236: DOUBLE
78237: EQUAL
78238: IFTRUE 78242
78240: GO 78375
78242: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78243: LD_ADDR_VAR 0 5
78247: PUSH
78248: LD_VAR 0 1
78252: PUSH
78253: LD_INT 3
78255: PLUS
78256: PUSH
78257: LD_VAR 0 2
78261: PUSH
78262: LD_INT 4
78264: PUSH
78265: EMPTY
78266: LIST
78267: LIST
78268: LIST
78269: PUSH
78270: LD_VAR 0 1
78274: PUSH
78275: LD_INT 4
78277: PLUS
78278: PUSH
78279: LD_VAR 0 2
78283: PUSH
78284: LD_INT 4
78286: PLUS
78287: PUSH
78288: LD_INT 5
78290: PUSH
78291: EMPTY
78292: LIST
78293: LIST
78294: LIST
78295: PUSH
78296: LD_VAR 0 1
78300: PUSH
78301: LD_INT 4
78303: MINUS
78304: PUSH
78305: LD_VAR 0 2
78309: PUSH
78310: LD_INT 1
78312: PUSH
78313: EMPTY
78314: LIST
78315: LIST
78316: LIST
78317: PUSH
78318: LD_VAR 0 1
78322: PUSH
78323: LD_VAR 0 2
78327: PUSH
78328: LD_INT 4
78330: MINUS
78331: PUSH
78332: LD_INT 3
78334: PUSH
78335: EMPTY
78336: LIST
78337: LIST
78338: LIST
78339: PUSH
78340: LD_VAR 0 1
78344: PUSH
78345: LD_INT 3
78347: MINUS
78348: PUSH
78349: LD_VAR 0 2
78353: PUSH
78354: LD_INT 3
78356: MINUS
78357: PUSH
78358: LD_INT 2
78360: PUSH
78361: EMPTY
78362: LIST
78363: LIST
78364: LIST
78365: PUSH
78366: EMPTY
78367: LIST
78368: LIST
78369: LIST
78370: LIST
78371: LIST
78372: ST_TO_ADDR
// end ; 4 :
78373: GO 78654
78375: LD_INT 4
78377: DOUBLE
78378: EQUAL
78379: IFTRUE 78383
78381: GO 78516
78383: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78384: LD_ADDR_VAR 0 5
78388: PUSH
78389: LD_VAR 0 1
78393: PUSH
78394: LD_VAR 0 2
78398: PUSH
78399: LD_INT 4
78401: PLUS
78402: PUSH
78403: LD_INT 0
78405: PUSH
78406: EMPTY
78407: LIST
78408: LIST
78409: LIST
78410: PUSH
78411: LD_VAR 0 1
78415: PUSH
78416: LD_INT 3
78418: PLUS
78419: PUSH
78420: LD_VAR 0 2
78424: PUSH
78425: LD_INT 3
78427: PLUS
78428: PUSH
78429: LD_INT 5
78431: PUSH
78432: EMPTY
78433: LIST
78434: LIST
78435: LIST
78436: PUSH
78437: LD_VAR 0 1
78441: PUSH
78442: LD_INT 4
78444: PLUS
78445: PUSH
78446: LD_VAR 0 2
78450: PUSH
78451: LD_INT 4
78453: PUSH
78454: EMPTY
78455: LIST
78456: LIST
78457: LIST
78458: PUSH
78459: LD_VAR 0 1
78463: PUSH
78464: LD_VAR 0 2
78468: PUSH
78469: LD_INT 3
78471: MINUS
78472: PUSH
78473: LD_INT 3
78475: PUSH
78476: EMPTY
78477: LIST
78478: LIST
78479: LIST
78480: PUSH
78481: LD_VAR 0 1
78485: PUSH
78486: LD_INT 4
78488: MINUS
78489: PUSH
78490: LD_VAR 0 2
78494: PUSH
78495: LD_INT 4
78497: MINUS
78498: PUSH
78499: LD_INT 2
78501: PUSH
78502: EMPTY
78503: LIST
78504: LIST
78505: LIST
78506: PUSH
78507: EMPTY
78508: LIST
78509: LIST
78510: LIST
78511: LIST
78512: LIST
78513: ST_TO_ADDR
// end ; 5 :
78514: GO 78654
78516: LD_INT 5
78518: DOUBLE
78519: EQUAL
78520: IFTRUE 78524
78522: GO 78653
78524: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78525: LD_ADDR_VAR 0 5
78529: PUSH
78530: LD_VAR 0 1
78534: PUSH
78535: LD_INT 4
78537: MINUS
78538: PUSH
78539: LD_VAR 0 2
78543: PUSH
78544: LD_INT 1
78546: PUSH
78547: EMPTY
78548: LIST
78549: LIST
78550: LIST
78551: PUSH
78552: LD_VAR 0 1
78556: PUSH
78557: LD_VAR 0 2
78561: PUSH
78562: LD_INT 4
78564: MINUS
78565: PUSH
78566: LD_INT 3
78568: PUSH
78569: EMPTY
78570: LIST
78571: LIST
78572: LIST
78573: PUSH
78574: LD_VAR 0 1
78578: PUSH
78579: LD_INT 4
78581: PLUS
78582: PUSH
78583: LD_VAR 0 2
78587: PUSH
78588: LD_INT 4
78590: PLUS
78591: PUSH
78592: LD_INT 5
78594: PUSH
78595: EMPTY
78596: LIST
78597: LIST
78598: LIST
78599: PUSH
78600: LD_VAR 0 1
78604: PUSH
78605: LD_INT 3
78607: PLUS
78608: PUSH
78609: LD_VAR 0 2
78613: PUSH
78614: LD_INT 4
78616: PUSH
78617: EMPTY
78618: LIST
78619: LIST
78620: LIST
78621: PUSH
78622: LD_VAR 0 1
78626: PUSH
78627: LD_VAR 0 2
78631: PUSH
78632: LD_INT 3
78634: PLUS
78635: PUSH
78636: LD_INT 0
78638: PUSH
78639: EMPTY
78640: LIST
78641: LIST
78642: LIST
78643: PUSH
78644: EMPTY
78645: LIST
78646: LIST
78647: LIST
78648: LIST
78649: LIST
78650: ST_TO_ADDR
// end ; end ;
78651: GO 78654
78653: POP
// result := list ;
78654: LD_ADDR_VAR 0 4
78658: PUSH
78659: LD_VAR 0 5
78663: ST_TO_ADDR
// end ;
78664: LD_VAR 0 4
78668: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78669: LD_INT 0
78671: PPUSH
78672: PPUSH
78673: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78674: LD_VAR 0 1
78678: NOT
78679: IFTRUE 78707
78681: PUSH
78682: LD_VAR 0 2
78686: PUSH
78687: LD_INT 1
78689: PUSH
78690: LD_INT 2
78692: PUSH
78693: LD_INT 3
78695: PUSH
78696: LD_INT 4
78698: PUSH
78699: EMPTY
78700: LIST
78701: LIST
78702: LIST
78703: LIST
78704: IN
78705: NOT
78706: OR
78707: IFFALSE 78711
// exit ;
78709: GO 78794
// tmp := [ ] ;
78711: LD_ADDR_VAR 0 5
78715: PUSH
78716: EMPTY
78717: ST_TO_ADDR
// for i in units do
78718: LD_ADDR_VAR 0 4
78722: PUSH
78723: LD_VAR 0 1
78727: PUSH
78728: FOR_IN
78729: IFFALSE 78763
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78731: LD_ADDR_VAR 0 5
78735: PUSH
78736: LD_VAR 0 5
78740: PPUSH
78741: LD_VAR 0 4
78745: PPUSH
78746: LD_VAR 0 2
78750: PPUSH
78751: CALL_OW 259
78755: PPUSH
78756: CALL 80189 0 2
78760: ST_TO_ADDR
78761: GO 78728
78763: POP
78764: POP
// if not tmp then
78765: LD_VAR 0 5
78769: NOT
78770: IFFALSE 78774
// exit ;
78772: GO 78794
// result := SortListByListDesc ( units , tmp ) ;
78774: LD_ADDR_VAR 0 3
78778: PUSH
78779: LD_VAR 0 1
78783: PPUSH
78784: LD_VAR 0 5
78788: PPUSH
78789: CALL_OW 77
78793: ST_TO_ADDR
// end ;
78794: LD_VAR 0 3
78798: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78799: LD_INT 0
78801: PPUSH
78802: PPUSH
78803: PPUSH
// result := false ;
78804: LD_ADDR_VAR 0 3
78808: PUSH
78809: LD_INT 0
78811: ST_TO_ADDR
// if not building then
78812: LD_VAR 0 2
78816: NOT
78817: IFFALSE 78821
// exit ;
78819: GO 78965
// x := GetX ( building ) ;
78821: LD_ADDR_VAR 0 4
78825: PUSH
78826: LD_VAR 0 2
78830: PPUSH
78831: CALL_OW 250
78835: ST_TO_ADDR
// y := GetY ( building ) ;
78836: LD_ADDR_VAR 0 5
78840: PUSH
78841: LD_VAR 0 2
78845: PPUSH
78846: CALL_OW 251
78850: ST_TO_ADDR
// if not x or not y then
78851: LD_VAR 0 4
78855: NOT
78856: IFTRUE 78865
78858: PUSH
78859: LD_VAR 0 5
78863: NOT
78864: OR
78865: IFFALSE 78869
// exit ;
78867: GO 78965
// if GetTaskList ( unit ) then
78869: LD_VAR 0 1
78873: PPUSH
78874: CALL_OW 437
78878: IFFALSE 78965
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78880: LD_STRING e
78882: PUSH
78883: LD_VAR 0 1
78887: PPUSH
78888: CALL_OW 437
78892: PUSH
78893: LD_INT 1
78895: ARRAY
78896: PUSH
78897: LD_INT 1
78899: ARRAY
78900: EQUAL
78901: IFFALSE 78928
78903: PUSH
78904: LD_VAR 0 4
78908: PUSH
78909: LD_VAR 0 1
78913: PPUSH
78914: CALL_OW 437
78918: PUSH
78919: LD_INT 1
78921: ARRAY
78922: PUSH
78923: LD_INT 2
78925: ARRAY
78926: EQUAL
78927: AND
78928: IFFALSE 78955
78930: PUSH
78931: LD_VAR 0 5
78935: PUSH
78936: LD_VAR 0 1
78940: PPUSH
78941: CALL_OW 437
78945: PUSH
78946: LD_INT 1
78948: ARRAY
78949: PUSH
78950: LD_INT 3
78952: ARRAY
78953: EQUAL
78954: AND
78955: IFFALSE 78965
// result := true end ;
78957: LD_ADDR_VAR 0 3
78961: PUSH
78962: LD_INT 1
78964: ST_TO_ADDR
// end ;
78965: LD_VAR 0 3
78969: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78970: LD_INT 0
78972: PPUSH
// result := false ;
78973: LD_ADDR_VAR 0 4
78977: PUSH
78978: LD_INT 0
78980: ST_TO_ADDR
// if GetTaskList ( unit ) then
78981: LD_VAR 0 1
78985: PPUSH
78986: CALL_OW 437
78990: IFFALSE 79077
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78992: LD_STRING M
78994: PUSH
78995: LD_VAR 0 1
78999: PPUSH
79000: CALL_OW 437
79004: PUSH
79005: LD_INT 1
79007: ARRAY
79008: PUSH
79009: LD_INT 1
79011: ARRAY
79012: EQUAL
79013: IFFALSE 79040
79015: PUSH
79016: LD_VAR 0 2
79020: PUSH
79021: LD_VAR 0 1
79025: PPUSH
79026: CALL_OW 437
79030: PUSH
79031: LD_INT 1
79033: ARRAY
79034: PUSH
79035: LD_INT 2
79037: ARRAY
79038: EQUAL
79039: AND
79040: IFFALSE 79067
79042: PUSH
79043: LD_VAR 0 3
79047: PUSH
79048: LD_VAR 0 1
79052: PPUSH
79053: CALL_OW 437
79057: PUSH
79058: LD_INT 1
79060: ARRAY
79061: PUSH
79062: LD_INT 3
79064: ARRAY
79065: EQUAL
79066: AND
79067: IFFALSE 79077
// result := true ;
79069: LD_ADDR_VAR 0 4
79073: PUSH
79074: LD_INT 1
79076: ST_TO_ADDR
// end ; end ;
79077: LD_VAR 0 4
79081: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79082: LD_INT 0
79084: PPUSH
79085: PPUSH
79086: PPUSH
79087: PPUSH
// if not unit or not area then
79088: LD_VAR 0 1
79092: NOT
79093: IFTRUE 79102
79095: PUSH
79096: LD_VAR 0 2
79100: NOT
79101: OR
79102: IFFALSE 79106
// exit ;
79104: GO 79282
// tmp := AreaToList ( area , i ) ;
79106: LD_ADDR_VAR 0 6
79110: PUSH
79111: LD_VAR 0 2
79115: PPUSH
79116: LD_VAR 0 5
79120: PPUSH
79121: CALL_OW 517
79125: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
79126: LD_ADDR_VAR 0 5
79130: PUSH
79131: DOUBLE
79132: LD_INT 1
79134: DEC
79135: ST_TO_ADDR
79136: LD_VAR 0 6
79140: PUSH
79141: LD_INT 1
79143: ARRAY
79144: PUSH
79145: FOR_TO
79146: IFFALSE 79280
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
79148: LD_ADDR_VAR 0 7
79152: PUSH
79153: LD_VAR 0 6
79157: PUSH
79158: LD_INT 1
79160: ARRAY
79161: PUSH
79162: LD_VAR 0 5
79166: ARRAY
79167: PUSH
79168: LD_VAR 0 6
79172: PUSH
79173: LD_INT 2
79175: ARRAY
79176: PUSH
79177: LD_VAR 0 5
79181: ARRAY
79182: PUSH
79183: EMPTY
79184: LIST
79185: LIST
79186: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
79187: LD_INT 92
79189: PUSH
79190: LD_VAR 0 7
79194: PUSH
79195: LD_INT 1
79197: ARRAY
79198: PUSH
79199: LD_VAR 0 7
79203: PUSH
79204: LD_INT 2
79206: ARRAY
79207: PUSH
79208: LD_INT 2
79210: PUSH
79211: EMPTY
79212: LIST
79213: LIST
79214: LIST
79215: LIST
79216: PPUSH
79217: CALL_OW 69
79221: PUSH
79222: LD_INT 0
79224: EQUAL
79225: IFFALSE 79278
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79227: LD_VAR 0 1
79231: PPUSH
79232: LD_VAR 0 7
79236: PUSH
79237: LD_INT 1
79239: ARRAY
79240: PPUSH
79241: LD_VAR 0 7
79245: PUSH
79246: LD_INT 2
79248: ARRAY
79249: PPUSH
79250: LD_VAR 0 3
79254: PPUSH
79255: CALL_OW 48
// result := IsPlaced ( unit ) ;
79259: LD_ADDR_VAR 0 4
79263: PUSH
79264: LD_VAR 0 1
79268: PPUSH
79269: CALL_OW 305
79273: ST_TO_ADDR
// exit ;
79274: POP
79275: POP
79276: GO 79282
// end ; end ;
79278: GO 79145
79280: POP
79281: POP
// end ;
79282: LD_VAR 0 4
79286: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79287: LD_INT 0
79289: PPUSH
79290: PPUSH
79291: PPUSH
// if not side or side > 8 then
79292: LD_VAR 0 1
79296: NOT
79297: IFTRUE 79309
79299: PUSH
79300: LD_VAR 0 1
79304: PUSH
79305: LD_INT 8
79307: GREATER
79308: OR
79309: IFFALSE 79313
// exit ;
79311: GO 79500
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79313: LD_ADDR_VAR 0 4
79317: PUSH
79318: LD_INT 22
79320: PUSH
79321: LD_VAR 0 1
79325: PUSH
79326: EMPTY
79327: LIST
79328: LIST
79329: PUSH
79330: LD_INT 21
79332: PUSH
79333: LD_INT 3
79335: PUSH
79336: EMPTY
79337: LIST
79338: LIST
79339: PUSH
79340: EMPTY
79341: LIST
79342: LIST
79343: PPUSH
79344: CALL_OW 69
79348: ST_TO_ADDR
// if not tmp then
79349: LD_VAR 0 4
79353: NOT
79354: IFFALSE 79358
// exit ;
79356: GO 79500
// enable_addtolog := true ;
79358: LD_ADDR_OWVAR 81
79362: PUSH
79363: LD_INT 1
79365: ST_TO_ADDR
// AddToLog ( [ ) ;
79366: LD_STRING [
79368: PPUSH
79369: CALL_OW 561
// for i in tmp do
79373: LD_ADDR_VAR 0 3
79377: PUSH
79378: LD_VAR 0 4
79382: PUSH
79383: FOR_IN
79384: IFFALSE 79491
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79386: LD_STRING [
79388: PUSH
79389: LD_VAR 0 3
79393: PPUSH
79394: CALL_OW 266
79398: STR
79399: PUSH
79400: LD_STRING , 
79402: STR
79403: PUSH
79404: LD_VAR 0 3
79408: PPUSH
79409: CALL_OW 250
79413: STR
79414: PUSH
79415: LD_STRING , 
79417: STR
79418: PUSH
79419: LD_VAR 0 3
79423: PPUSH
79424: CALL_OW 251
79428: STR
79429: PUSH
79430: LD_STRING , 
79432: STR
79433: PUSH
79434: LD_VAR 0 3
79438: PPUSH
79439: CALL_OW 254
79443: STR
79444: PUSH
79445: LD_STRING , 
79447: STR
79448: PUSH
79449: LD_VAR 0 3
79453: PPUSH
79454: LD_INT 1
79456: PPUSH
79457: CALL_OW 268
79461: STR
79462: PUSH
79463: LD_STRING , 
79465: STR
79466: PUSH
79467: LD_VAR 0 3
79471: PPUSH
79472: LD_INT 2
79474: PPUSH
79475: CALL_OW 268
79479: STR
79480: PUSH
79481: LD_STRING ],
79483: STR
79484: PPUSH
79485: CALL_OW 561
// end ;
79489: GO 79383
79491: POP
79492: POP
// AddToLog ( ]; ) ;
79493: LD_STRING ];
79495: PPUSH
79496: CALL_OW 561
// end ;
79500: LD_VAR 0 2
79504: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79505: LD_INT 0
79507: PPUSH
79508: PPUSH
79509: PPUSH
79510: PPUSH
79511: PPUSH
// if not area or not rate or not max then
79512: LD_VAR 0 1
79516: NOT
79517: IFTRUE 79526
79519: PUSH
79520: LD_VAR 0 2
79524: NOT
79525: OR
79526: IFTRUE 79535
79528: PUSH
79529: LD_VAR 0 4
79533: NOT
79534: OR
79535: IFFALSE 79539
// exit ;
79537: GO 79728
// while 1 do
79539: LD_INT 1
79541: IFFALSE 79728
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79543: LD_ADDR_VAR 0 9
79547: PUSH
79548: LD_VAR 0 1
79552: PPUSH
79553: LD_INT 1
79555: PPUSH
79556: CALL_OW 287
79560: PUSH
79561: LD_INT 10
79563: MUL
79564: ST_TO_ADDR
// r := rate / 10 ;
79565: LD_ADDR_VAR 0 7
79569: PUSH
79570: LD_VAR 0 2
79574: PUSH
79575: LD_INT 10
79577: DIVREAL
79578: ST_TO_ADDR
// time := 1 1$00 ;
79579: LD_ADDR_VAR 0 8
79583: PUSH
79584: LD_INT 2100
79586: ST_TO_ADDR
// if amount < min then
79587: LD_VAR 0 9
79591: PUSH
79592: LD_VAR 0 3
79596: LESS
79597: IFFALSE 79615
// r := r * 2 else
79599: LD_ADDR_VAR 0 7
79603: PUSH
79604: LD_VAR 0 7
79608: PUSH
79609: LD_INT 2
79611: MUL
79612: ST_TO_ADDR
79613: GO 79641
// if amount > max then
79615: LD_VAR 0 9
79619: PUSH
79620: LD_VAR 0 4
79624: GREATER
79625: IFFALSE 79641
// r := r / 2 ;
79627: LD_ADDR_VAR 0 7
79631: PUSH
79632: LD_VAR 0 7
79636: PUSH
79637: LD_INT 2
79639: DIVREAL
79640: ST_TO_ADDR
// time := time / r ;
79641: LD_ADDR_VAR 0 8
79645: PUSH
79646: LD_VAR 0 8
79650: PUSH
79651: LD_VAR 0 7
79655: DIVREAL
79656: ST_TO_ADDR
// if time < 0 then
79657: LD_VAR 0 8
79661: PUSH
79662: LD_INT 0
79664: LESS
79665: IFFALSE 79682
// time := time * - 1 ;
79667: LD_ADDR_VAR 0 8
79671: PUSH
79672: LD_VAR 0 8
79676: PUSH
79677: LD_INT 1
79679: NEG
79680: MUL
79681: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
79682: LD_VAR 0 8
79686: PUSH
79687: LD_INT 35
79689: PPUSH
79690: LD_INT 875
79692: PPUSH
79693: CALL_OW 12
79697: PLUS
79698: PPUSH
79699: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79703: LD_INT 1
79705: PPUSH
79706: LD_INT 5
79708: PPUSH
79709: CALL_OW 12
79713: PPUSH
79714: LD_VAR 0 1
79718: PPUSH
79719: LD_INT 1
79721: PPUSH
79722: CALL_OW 55
// end ;
79726: GO 79539
// end ;
79728: LD_VAR 0 5
79732: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79733: LD_INT 0
79735: PPUSH
79736: PPUSH
79737: PPUSH
79738: PPUSH
79739: PPUSH
79740: PPUSH
79741: PPUSH
79742: PPUSH
// if not turrets or not factories then
79743: LD_VAR 0 1
79747: NOT
79748: IFTRUE 79757
79750: PUSH
79751: LD_VAR 0 2
79755: NOT
79756: OR
79757: IFFALSE 79761
// exit ;
79759: GO 80068
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79761: LD_ADDR_VAR 0 10
79765: PUSH
79766: LD_INT 5
79768: PUSH
79769: LD_INT 6
79771: PUSH
79772: EMPTY
79773: LIST
79774: LIST
79775: PUSH
79776: LD_INT 2
79778: PUSH
79779: LD_INT 4
79781: PUSH
79782: EMPTY
79783: LIST
79784: LIST
79785: PUSH
79786: LD_INT 3
79788: PUSH
79789: LD_INT 5
79791: PUSH
79792: EMPTY
79793: LIST
79794: LIST
79795: PUSH
79796: EMPTY
79797: LIST
79798: LIST
79799: LIST
79800: PUSH
79801: LD_INT 24
79803: PUSH
79804: LD_INT 25
79806: PUSH
79807: EMPTY
79808: LIST
79809: LIST
79810: PUSH
79811: LD_INT 23
79813: PUSH
79814: LD_INT 27
79816: PUSH
79817: EMPTY
79818: LIST
79819: LIST
79820: PUSH
79821: EMPTY
79822: LIST
79823: LIST
79824: PUSH
79825: LD_INT 42
79827: PUSH
79828: LD_INT 43
79830: PUSH
79831: EMPTY
79832: LIST
79833: LIST
79834: PUSH
79835: LD_INT 44
79837: PUSH
79838: LD_INT 46
79840: PUSH
79841: EMPTY
79842: LIST
79843: LIST
79844: PUSH
79845: LD_INT 45
79847: PUSH
79848: LD_INT 47
79850: PUSH
79851: EMPTY
79852: LIST
79853: LIST
79854: PUSH
79855: EMPTY
79856: LIST
79857: LIST
79858: LIST
79859: PUSH
79860: EMPTY
79861: LIST
79862: LIST
79863: LIST
79864: ST_TO_ADDR
// result := [ ] ;
79865: LD_ADDR_VAR 0 3
79869: PUSH
79870: EMPTY
79871: ST_TO_ADDR
// for i in turrets do
79872: LD_ADDR_VAR 0 4
79876: PUSH
79877: LD_VAR 0 1
79881: PUSH
79882: FOR_IN
79883: IFFALSE 80066
// begin nat := GetNation ( i ) ;
79885: LD_ADDR_VAR 0 7
79889: PUSH
79890: LD_VAR 0 4
79894: PPUSH
79895: CALL_OW 248
79899: ST_TO_ADDR
// weapon := 0 ;
79900: LD_ADDR_VAR 0 8
79904: PUSH
79905: LD_INT 0
79907: ST_TO_ADDR
// if not nat then
79908: LD_VAR 0 7
79912: NOT
79913: IFFALSE 79917
// continue ;
79915: GO 79882
// for j in list [ nat ] do
79917: LD_ADDR_VAR 0 5
79921: PUSH
79922: LD_VAR 0 10
79926: PUSH
79927: LD_VAR 0 7
79931: ARRAY
79932: PUSH
79933: FOR_IN
79934: IFFALSE 79975
// if GetBWeapon ( i ) = j [ 1 ] then
79936: LD_VAR 0 4
79940: PPUSH
79941: CALL_OW 269
79945: PUSH
79946: LD_VAR 0 5
79950: PUSH
79951: LD_INT 1
79953: ARRAY
79954: EQUAL
79955: IFFALSE 79973
// begin weapon := j [ 2 ] ;
79957: LD_ADDR_VAR 0 8
79961: PUSH
79962: LD_VAR 0 5
79966: PUSH
79967: LD_INT 2
79969: ARRAY
79970: ST_TO_ADDR
// break ;
79971: GO 79975
// end ;
79973: GO 79933
79975: POP
79976: POP
// if not weapon then
79977: LD_VAR 0 8
79981: NOT
79982: IFFALSE 79986
// continue ;
79984: GO 79882
// for k in factories do
79986: LD_ADDR_VAR 0 6
79990: PUSH
79991: LD_VAR 0 2
79995: PUSH
79996: FOR_IN
79997: IFFALSE 80062
// begin weapons := AvailableWeaponList ( k ) ;
79999: LD_ADDR_VAR 0 9
80003: PUSH
80004: LD_VAR 0 6
80008: PPUSH
80009: CALL_OW 478
80013: ST_TO_ADDR
// if not weapons then
80014: LD_VAR 0 9
80018: NOT
80019: IFFALSE 80023
// continue ;
80021: GO 79996
// if weapon in weapons then
80023: LD_VAR 0 8
80027: PUSH
80028: LD_VAR 0 9
80032: IN
80033: IFFALSE 80060
// begin result := [ i , weapon ] ;
80035: LD_ADDR_VAR 0 3
80039: PUSH
80040: LD_VAR 0 4
80044: PUSH
80045: LD_VAR 0 8
80049: PUSH
80050: EMPTY
80051: LIST
80052: LIST
80053: ST_TO_ADDR
// exit ;
80054: POP
80055: POP
80056: POP
80057: POP
80058: GO 80068
// end ; end ;
80060: GO 79996
80062: POP
80063: POP
// end ;
80064: GO 79882
80066: POP
80067: POP
// end ;
80068: LD_VAR 0 3
80072: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80073: LD_INT 0
80075: PPUSH
// if not side or side > 8 then
80076: LD_VAR 0 3
80080: NOT
80081: IFTRUE 80093
80083: PUSH
80084: LD_VAR 0 3
80088: PUSH
80089: LD_INT 8
80091: GREATER
80092: OR
80093: IFFALSE 80097
// exit ;
80095: GO 80156
// if not range then
80097: LD_VAR 0 4
80101: NOT
80102: IFFALSE 80113
// range := - 12 ;
80104: LD_ADDR_VAR 0 4
80108: PUSH
80109: LD_INT 12
80111: NEG
80112: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80113: LD_VAR 0 1
80117: PPUSH
80118: LD_VAR 0 2
80122: PPUSH
80123: LD_VAR 0 3
80127: PPUSH
80128: LD_VAR 0 4
80132: PPUSH
80133: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
80137: LD_VAR 0 1
80141: PPUSH
80142: LD_VAR 0 2
80146: PPUSH
80147: LD_VAR 0 3
80151: PPUSH
80152: CALL_OW 331
// end ;
80156: LD_VAR 0 5
80160: RET
// export function Video ( mode ) ; begin
80161: LD_INT 0
80163: PPUSH
// ingame_video = mode ;
80164: LD_ADDR_OWVAR 52
80168: PUSH
80169: LD_VAR 0 1
80173: ST_TO_ADDR
// interface_hidden = mode ;
80174: LD_ADDR_OWVAR 54
80178: PUSH
80179: LD_VAR 0 1
80183: ST_TO_ADDR
// end ;
80184: LD_VAR 0 2
80188: RET
// export function Join ( array , element ) ; begin
80189: LD_INT 0
80191: PPUSH
// result := Replace ( array , array + 1 , element ) ;
80192: LD_ADDR_VAR 0 3
80196: PUSH
80197: LD_VAR 0 1
80201: PPUSH
80202: LD_VAR 0 1
80206: PUSH
80207: LD_INT 1
80209: PLUS
80210: PPUSH
80211: LD_VAR 0 2
80215: PPUSH
80216: CALL_OW 1
80220: ST_TO_ADDR
// end ;
80221: LD_VAR 0 3
80225: RET
// export function JoinUnion ( array , element ) ; begin
80226: LD_INT 0
80228: PPUSH
// result := array union element ;
80229: LD_ADDR_VAR 0 3
80233: PUSH
80234: LD_VAR 0 1
80238: PUSH
80239: LD_VAR 0 2
80243: UNION
80244: ST_TO_ADDR
// end ;
80245: LD_VAR 0 3
80249: RET
// export function GetBehemoths ( side ) ; begin
80250: LD_INT 0
80252: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
80253: LD_ADDR_VAR 0 2
80257: PUSH
80258: LD_INT 22
80260: PUSH
80261: LD_VAR 0 1
80265: PUSH
80266: EMPTY
80267: LIST
80268: LIST
80269: PUSH
80270: LD_INT 31
80272: PUSH
80273: LD_INT 25
80275: PUSH
80276: EMPTY
80277: LIST
80278: LIST
80279: PUSH
80280: EMPTY
80281: LIST
80282: LIST
80283: PPUSH
80284: CALL_OW 69
80288: ST_TO_ADDR
// end ;
80289: LD_VAR 0 2
80293: RET
// export function Shuffle ( array ) ; var i , index ; begin
80294: LD_INT 0
80296: PPUSH
80297: PPUSH
80298: PPUSH
// result := [ ] ;
80299: LD_ADDR_VAR 0 2
80303: PUSH
80304: EMPTY
80305: ST_TO_ADDR
// if not array then
80306: LD_VAR 0 1
80310: NOT
80311: IFFALSE 80315
// exit ;
80313: GO 80414
// Randomize ;
80315: CALL_OW 10
// for i = array downto 1 do
80319: LD_ADDR_VAR 0 3
80323: PUSH
80324: DOUBLE
80325: LD_VAR 0 1
80329: INC
80330: ST_TO_ADDR
80331: LD_INT 1
80333: PUSH
80334: FOR_DOWNTO
80335: IFFALSE 80412
// begin index := rand ( 1 , array ) ;
80337: LD_ADDR_VAR 0 4
80341: PUSH
80342: LD_INT 1
80344: PPUSH
80345: LD_VAR 0 1
80349: PPUSH
80350: CALL_OW 12
80354: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80355: LD_ADDR_VAR 0 2
80359: PUSH
80360: LD_VAR 0 2
80364: PPUSH
80365: LD_VAR 0 2
80369: PUSH
80370: LD_INT 1
80372: PLUS
80373: PPUSH
80374: LD_VAR 0 1
80378: PUSH
80379: LD_VAR 0 4
80383: ARRAY
80384: PPUSH
80385: CALL_OW 2
80389: ST_TO_ADDR
// array := Delete ( array , index ) ;
80390: LD_ADDR_VAR 0 1
80394: PUSH
80395: LD_VAR 0 1
80399: PPUSH
80400: LD_VAR 0 4
80404: PPUSH
80405: CALL_OW 3
80409: ST_TO_ADDR
// end ;
80410: GO 80334
80412: POP
80413: POP
// end ;
80414: LD_VAR 0 2
80418: RET
// export function GetBaseMaterials ( base ) ; begin
80419: LD_INT 0
80421: PPUSH
// result := [ 0 , 0 , 0 ] ;
80422: LD_ADDR_VAR 0 2
80426: PUSH
80427: LD_INT 0
80429: PUSH
80430: LD_INT 0
80432: PUSH
80433: LD_INT 0
80435: PUSH
80436: EMPTY
80437: LIST
80438: LIST
80439: LIST
80440: ST_TO_ADDR
// if not base then
80441: LD_VAR 0 1
80445: NOT
80446: IFFALSE 80450
// exit ;
80448: GO 80499
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80450: LD_ADDR_VAR 0 2
80454: PUSH
80455: LD_VAR 0 1
80459: PPUSH
80460: LD_INT 1
80462: PPUSH
80463: CALL_OW 275
80467: PUSH
80468: LD_VAR 0 1
80472: PPUSH
80473: LD_INT 2
80475: PPUSH
80476: CALL_OW 275
80480: PUSH
80481: LD_VAR 0 1
80485: PPUSH
80486: LD_INT 3
80488: PPUSH
80489: CALL_OW 275
80493: PUSH
80494: EMPTY
80495: LIST
80496: LIST
80497: LIST
80498: ST_TO_ADDR
// end ;
80499: LD_VAR 0 2
80503: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80504: LD_INT 0
80506: PPUSH
80507: PPUSH
// result := array ;
80508: LD_ADDR_VAR 0 3
80512: PUSH
80513: LD_VAR 0 1
80517: ST_TO_ADDR
// if size >= result then
80518: LD_VAR 0 2
80522: PUSH
80523: LD_VAR 0 3
80527: GREATEREQUAL
80528: IFFALSE 80532
// exit ;
80530: GO 80582
// if size then
80532: LD_VAR 0 2
80536: IFFALSE 80582
// for i := array downto size do
80538: LD_ADDR_VAR 0 4
80542: PUSH
80543: DOUBLE
80544: LD_VAR 0 1
80548: INC
80549: ST_TO_ADDR
80550: LD_VAR 0 2
80554: PUSH
80555: FOR_DOWNTO
80556: IFFALSE 80580
// result := Delete ( result , result ) ;
80558: LD_ADDR_VAR 0 3
80562: PUSH
80563: LD_VAR 0 3
80567: PPUSH
80568: LD_VAR 0 3
80572: PPUSH
80573: CALL_OW 3
80577: ST_TO_ADDR
80578: GO 80555
80580: POP
80581: POP
// end ;
80582: LD_VAR 0 3
80586: RET
// export function ComExit ( unit ) ; var tmp ; begin
80587: LD_INT 0
80589: PPUSH
80590: PPUSH
// if not IsInUnit ( unit ) then
80591: LD_VAR 0 1
80595: PPUSH
80596: CALL_OW 310
80600: NOT
80601: IFFALSE 80605
// exit ;
80603: GO 80665
// tmp := IsInUnit ( unit ) ;
80605: LD_ADDR_VAR 0 3
80609: PUSH
80610: LD_VAR 0 1
80614: PPUSH
80615: CALL_OW 310
80619: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80620: LD_VAR 0 3
80624: PPUSH
80625: CALL_OW 247
80629: PUSH
80630: LD_INT 2
80632: EQUAL
80633: IFFALSE 80646
// ComExitVehicle ( unit ) else
80635: LD_VAR 0 1
80639: PPUSH
80640: CALL_OW 121
80644: GO 80655
// ComExitBuilding ( unit ) ;
80646: LD_VAR 0 1
80650: PPUSH
80651: CALL_OW 122
// result := tmp ;
80655: LD_ADDR_VAR 0 2
80659: PUSH
80660: LD_VAR 0 3
80664: ST_TO_ADDR
// end ;
80665: LD_VAR 0 2
80669: RET
// export function ComExitAll ( units ) ; var i ; begin
80670: LD_INT 0
80672: PPUSH
80673: PPUSH
// if not units then
80674: LD_VAR 0 1
80678: NOT
80679: IFFALSE 80683
// exit ;
80681: GO 80709
// for i in units do
80683: LD_ADDR_VAR 0 3
80687: PUSH
80688: LD_VAR 0 1
80692: PUSH
80693: FOR_IN
80694: IFFALSE 80707
// ComExit ( i ) ;
80696: LD_VAR 0 3
80700: PPUSH
80701: CALL 80587 0 1
80705: GO 80693
80707: POP
80708: POP
// end ;
80709: LD_VAR 0 2
80713: RET
// export function ResetHc ; begin
80714: LD_INT 0
80716: PPUSH
// InitHc ;
80717: CALL_OW 19
// hc_importance := 0 ;
80721: LD_ADDR_OWVAR 32
80725: PUSH
80726: LD_INT 0
80728: ST_TO_ADDR
// end ;
80729: LD_VAR 0 1
80733: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80734: LD_INT 0
80736: PPUSH
80737: PPUSH
80738: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80739: LD_ADDR_VAR 0 6
80743: PUSH
80744: LD_VAR 0 1
80748: PUSH
80749: LD_VAR 0 3
80753: PLUS
80754: PUSH
80755: LD_INT 2
80757: DIV
80758: ST_TO_ADDR
// if _x < 0 then
80759: LD_VAR 0 6
80763: PUSH
80764: LD_INT 0
80766: LESS
80767: IFFALSE 80784
// _x := _x * - 1 ;
80769: LD_ADDR_VAR 0 6
80773: PUSH
80774: LD_VAR 0 6
80778: PUSH
80779: LD_INT 1
80781: NEG
80782: MUL
80783: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80784: LD_ADDR_VAR 0 7
80788: PUSH
80789: LD_VAR 0 2
80793: PUSH
80794: LD_VAR 0 4
80798: PLUS
80799: PUSH
80800: LD_INT 2
80802: DIV
80803: ST_TO_ADDR
// if _y < 0 then
80804: LD_VAR 0 7
80808: PUSH
80809: LD_INT 0
80811: LESS
80812: IFFALSE 80829
// _y := _y * - 1 ;
80814: LD_ADDR_VAR 0 7
80818: PUSH
80819: LD_VAR 0 7
80823: PUSH
80824: LD_INT 1
80826: NEG
80827: MUL
80828: ST_TO_ADDR
// result := [ _x , _y ] ;
80829: LD_ADDR_VAR 0 5
80833: PUSH
80834: LD_VAR 0 6
80838: PUSH
80839: LD_VAR 0 7
80843: PUSH
80844: EMPTY
80845: LIST
80846: LIST
80847: ST_TO_ADDR
// end ;
80848: LD_VAR 0 5
80852: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80853: LD_INT 0
80855: PPUSH
80856: PPUSH
80857: PPUSH
80858: PPUSH
// task := GetTaskList ( unit ) ;
80859: LD_ADDR_VAR 0 7
80863: PUSH
80864: LD_VAR 0 1
80868: PPUSH
80869: CALL_OW 437
80873: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80874: LD_VAR 0 7
80878: NOT
80879: IFFALSE 80898
80881: PUSH
80882: LD_VAR 0 1
80886: PPUSH
80887: LD_VAR 0 2
80891: PPUSH
80892: CALL_OW 308
80896: NOT
80897: AND
80898: IFFALSE 80902
// exit ;
80900: GO 81020
// if IsInArea ( unit , area ) then
80902: LD_VAR 0 1
80906: PPUSH
80907: LD_VAR 0 2
80911: PPUSH
80912: CALL_OW 308
80916: IFFALSE 80934
// begin ComMoveToArea ( unit , goAway ) ;
80918: LD_VAR 0 1
80922: PPUSH
80923: LD_VAR 0 3
80927: PPUSH
80928: CALL_OW 113
// exit ;
80932: GO 81020
// end ; if task [ 1 ] [ 1 ] <> M then
80934: LD_VAR 0 7
80938: PUSH
80939: LD_INT 1
80941: ARRAY
80942: PUSH
80943: LD_INT 1
80945: ARRAY
80946: PUSH
80947: LD_STRING M
80949: NONEQUAL
80950: IFFALSE 80954
// exit ;
80952: GO 81020
// x := task [ 1 ] [ 2 ] ;
80954: LD_ADDR_VAR 0 5
80958: PUSH
80959: LD_VAR 0 7
80963: PUSH
80964: LD_INT 1
80966: ARRAY
80967: PUSH
80968: LD_INT 2
80970: ARRAY
80971: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80972: LD_ADDR_VAR 0 6
80976: PUSH
80977: LD_VAR 0 7
80981: PUSH
80982: LD_INT 1
80984: ARRAY
80985: PUSH
80986: LD_INT 3
80988: ARRAY
80989: ST_TO_ADDR
// if InArea ( x , y , area ) then
80990: LD_VAR 0 5
80994: PPUSH
80995: LD_VAR 0 6
80999: PPUSH
81000: LD_VAR 0 2
81004: PPUSH
81005: CALL_OW 309
81009: IFFALSE 81020
// ComStop ( unit ) ;
81011: LD_VAR 0 1
81015: PPUSH
81016: CALL_OW 141
// end ;
81020: LD_VAR 0 4
81024: RET
// export function Abs ( value ) ; begin
81025: LD_INT 0
81027: PPUSH
// result := value ;
81028: LD_ADDR_VAR 0 2
81032: PUSH
81033: LD_VAR 0 1
81037: ST_TO_ADDR
// if value < 0 then
81038: LD_VAR 0 1
81042: PUSH
81043: LD_INT 0
81045: LESS
81046: IFFALSE 81063
// result := value * - 1 ;
81048: LD_ADDR_VAR 0 2
81052: PUSH
81053: LD_VAR 0 1
81057: PUSH
81058: LD_INT 1
81060: NEG
81061: MUL
81062: ST_TO_ADDR
// end ;
81063: LD_VAR 0 2
81067: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
81068: LD_INT 0
81070: PPUSH
81071: PPUSH
81072: PPUSH
81073: PPUSH
81074: PPUSH
81075: PPUSH
81076: PPUSH
81077: PPUSH
// if not unit or not building then
81078: LD_VAR 0 1
81082: NOT
81083: IFTRUE 81092
81085: PUSH
81086: LD_VAR 0 2
81090: NOT
81091: OR
81092: IFFALSE 81096
// exit ;
81094: GO 81324
// x := GetX ( building ) ;
81096: LD_ADDR_VAR 0 4
81100: PUSH
81101: LD_VAR 0 2
81105: PPUSH
81106: CALL_OW 250
81110: ST_TO_ADDR
// y := GetY ( building ) ;
81111: LD_ADDR_VAR 0 6
81115: PUSH
81116: LD_VAR 0 2
81120: PPUSH
81121: CALL_OW 251
81125: ST_TO_ADDR
// d := GetDir ( building ) ;
81126: LD_ADDR_VAR 0 8
81130: PUSH
81131: LD_VAR 0 2
81135: PPUSH
81136: CALL_OW 254
81140: ST_TO_ADDR
// r := 4 ;
81141: LD_ADDR_VAR 0 9
81145: PUSH
81146: LD_INT 4
81148: ST_TO_ADDR
// for i := 1 to 5 do
81149: LD_ADDR_VAR 0 10
81153: PUSH
81154: DOUBLE
81155: LD_INT 1
81157: DEC
81158: ST_TO_ADDR
81159: LD_INT 5
81161: PUSH
81162: FOR_TO
81163: IFFALSE 81322
// begin _x := ShiftX ( x , d , r + i ) ;
81165: LD_ADDR_VAR 0 5
81169: PUSH
81170: LD_VAR 0 4
81174: PPUSH
81175: LD_VAR 0 8
81179: PPUSH
81180: LD_VAR 0 9
81184: PUSH
81185: LD_VAR 0 10
81189: PLUS
81190: PPUSH
81191: CALL_OW 272
81195: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
81196: LD_ADDR_VAR 0 7
81200: PUSH
81201: LD_VAR 0 6
81205: PPUSH
81206: LD_VAR 0 8
81210: PPUSH
81211: LD_VAR 0 9
81215: PUSH
81216: LD_VAR 0 10
81220: PLUS
81221: PPUSH
81222: CALL_OW 273
81226: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
81227: LD_VAR 0 5
81231: PPUSH
81232: LD_VAR 0 7
81236: PPUSH
81237: CALL_OW 488
81241: IFFALSE 81276
81243: PUSH
81244: LD_VAR 0 5
81248: PPUSH
81249: LD_VAR 0 7
81253: PPUSH
81254: CALL_OW 428
81258: PPUSH
81259: CALL_OW 247
81263: PUSH
81264: LD_INT 3
81266: PUSH
81267: LD_INT 2
81269: PUSH
81270: EMPTY
81271: LIST
81272: LIST
81273: IN
81274: NOT
81275: AND
81276: IFFALSE 81320
// begin ComMoveXY ( unit , _x , _y ) ;
81278: LD_VAR 0 1
81282: PPUSH
81283: LD_VAR 0 5
81287: PPUSH
81288: LD_VAR 0 7
81292: PPUSH
81293: CALL_OW 111
// result := [ _x , _y ] ;
81297: LD_ADDR_VAR 0 3
81301: PUSH
81302: LD_VAR 0 5
81306: PUSH
81307: LD_VAR 0 7
81311: PUSH
81312: EMPTY
81313: LIST
81314: LIST
81315: ST_TO_ADDR
// exit ;
81316: POP
81317: POP
81318: GO 81324
// end ; end ;
81320: GO 81162
81322: POP
81323: POP
// end ;
81324: LD_VAR 0 3
81328: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
81329: LD_INT 0
81331: PPUSH
81332: PPUSH
81333: PPUSH
// result := 0 ;
81334: LD_ADDR_VAR 0 3
81338: PUSH
81339: LD_INT 0
81341: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
81342: LD_VAR 0 1
81346: PUSH
81347: LD_INT 0
81349: LESS
81350: IFTRUE 81362
81352: PUSH
81353: LD_VAR 0 1
81357: PUSH
81358: LD_INT 8
81360: GREATER
81361: OR
81362: IFTRUE 81374
81364: PUSH
81365: LD_VAR 0 2
81369: PUSH
81370: LD_INT 0
81372: LESS
81373: OR
81374: IFTRUE 81386
81376: PUSH
81377: LD_VAR 0 2
81381: PUSH
81382: LD_INT 8
81384: GREATER
81385: OR
81386: IFFALSE 81390
// exit ;
81388: GO 81465
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
81390: LD_ADDR_VAR 0 4
81394: PUSH
81395: LD_INT 22
81397: PUSH
81398: LD_VAR 0 2
81402: PUSH
81403: EMPTY
81404: LIST
81405: LIST
81406: PPUSH
81407: CALL_OW 69
81411: PUSH
81412: FOR_IN
81413: IFFALSE 81463
// begin un := UnitShoot ( i ) ;
81415: LD_ADDR_VAR 0 5
81419: PUSH
81420: LD_VAR 0 4
81424: PPUSH
81425: CALL_OW 504
81429: ST_TO_ADDR
// if GetSide ( un ) = side1 then
81430: LD_VAR 0 5
81434: PPUSH
81435: CALL_OW 255
81439: PUSH
81440: LD_VAR 0 1
81444: EQUAL
81445: IFFALSE 81461
// begin result := un ;
81447: LD_ADDR_VAR 0 3
81451: PUSH
81452: LD_VAR 0 5
81456: ST_TO_ADDR
// exit ;
81457: POP
81458: POP
81459: GO 81465
// end ; end ;
81461: GO 81412
81463: POP
81464: POP
// end ;
81465: LD_VAR 0 3
81469: RET
// export function GetCargoBay ( units ) ; begin
81470: LD_INT 0
81472: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
81473: LD_ADDR_VAR 0 2
81477: PUSH
81478: LD_VAR 0 1
81482: PPUSH
81483: LD_INT 2
81485: PUSH
81486: LD_INT 34
81488: PUSH
81489: LD_INT 12
81491: PUSH
81492: EMPTY
81493: LIST
81494: LIST
81495: PUSH
81496: LD_INT 34
81498: PUSH
81499: LD_INT 51
81501: PUSH
81502: EMPTY
81503: LIST
81504: LIST
81505: PUSH
81506: LD_INT 34
81508: PUSH
81509: LD_INT 32
81511: PUSH
81512: EMPTY
81513: LIST
81514: LIST
81515: PUSH
81516: LD_INT 34
81518: PUSH
81519: LD_INT 89
81521: PUSH
81522: EMPTY
81523: LIST
81524: LIST
81525: PUSH
81526: EMPTY
81527: LIST
81528: LIST
81529: LIST
81530: LIST
81531: LIST
81532: PPUSH
81533: CALL_OW 72
81537: ST_TO_ADDR
// end ;
81538: LD_VAR 0 2
81542: RET
// export function Negate ( value ) ; begin
81543: LD_INT 0
81545: PPUSH
// result := not value ;
81546: LD_ADDR_VAR 0 2
81550: PUSH
81551: LD_VAR 0 1
81555: NOT
81556: ST_TO_ADDR
// end ;
81557: LD_VAR 0 2
81561: RET
// export function Inc ( value ) ; begin
81562: LD_INT 0
81564: PPUSH
// result := value + 1 ;
81565: LD_ADDR_VAR 0 2
81569: PUSH
81570: LD_VAR 0 1
81574: PUSH
81575: LD_INT 1
81577: PLUS
81578: ST_TO_ADDR
// end ;
81579: LD_VAR 0 2
81583: RET
// export function Dec ( value ) ; begin
81584: LD_INT 0
81586: PPUSH
// result := value - 1 ;
81587: LD_ADDR_VAR 0 2
81591: PUSH
81592: LD_VAR 0 1
81596: PUSH
81597: LD_INT 1
81599: MINUS
81600: ST_TO_ADDR
// end ;
81601: LD_VAR 0 2
81605: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
81606: LD_INT 0
81608: PPUSH
81609: PPUSH
81610: PPUSH
81611: PPUSH
81612: PPUSH
81613: PPUSH
81614: PPUSH
81615: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
81616: LD_VAR 0 1
81620: PPUSH
81621: LD_VAR 0 2
81625: PPUSH
81626: CALL_OW 488
81630: NOT
81631: IFTRUE 81650
81633: PUSH
81634: LD_VAR 0 3
81638: PPUSH
81639: LD_VAR 0 4
81643: PPUSH
81644: CALL_OW 488
81648: NOT
81649: OR
81650: IFFALSE 81663
// begin result := - 1 ;
81652: LD_ADDR_VAR 0 5
81656: PUSH
81657: LD_INT 1
81659: NEG
81660: ST_TO_ADDR
// exit ;
81661: GO 81898
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
81663: LD_ADDR_VAR 0 12
81667: PUSH
81668: LD_VAR 0 1
81672: PPUSH
81673: LD_VAR 0 2
81677: PPUSH
81678: LD_VAR 0 3
81682: PPUSH
81683: LD_VAR 0 4
81687: PPUSH
81688: CALL 80734 0 4
81692: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
81693: LD_ADDR_VAR 0 11
81697: PUSH
81698: LD_VAR 0 1
81702: PPUSH
81703: LD_VAR 0 2
81707: PPUSH
81708: LD_VAR 0 12
81712: PUSH
81713: LD_INT 1
81715: ARRAY
81716: PPUSH
81717: LD_VAR 0 12
81721: PUSH
81722: LD_INT 2
81724: ARRAY
81725: PPUSH
81726: CALL_OW 298
81730: ST_TO_ADDR
// distance := 9999 ;
81731: LD_ADDR_VAR 0 10
81735: PUSH
81736: LD_INT 9999
81738: ST_TO_ADDR
// for i := 0 to 5 do
81739: LD_ADDR_VAR 0 6
81743: PUSH
81744: DOUBLE
81745: LD_INT 0
81747: DEC
81748: ST_TO_ADDR
81749: LD_INT 5
81751: PUSH
81752: FOR_TO
81753: IFFALSE 81896
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81755: LD_ADDR_VAR 0 7
81759: PUSH
81760: LD_VAR 0 1
81764: PPUSH
81765: LD_VAR 0 6
81769: PPUSH
81770: LD_VAR 0 11
81774: PPUSH
81775: CALL_OW 272
81779: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81780: LD_ADDR_VAR 0 8
81784: PUSH
81785: LD_VAR 0 2
81789: PPUSH
81790: LD_VAR 0 6
81794: PPUSH
81795: LD_VAR 0 11
81799: PPUSH
81800: CALL_OW 273
81804: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81805: LD_VAR 0 7
81809: PPUSH
81810: LD_VAR 0 8
81814: PPUSH
81815: CALL_OW 488
81819: NOT
81820: IFFALSE 81824
// continue ;
81822: GO 81752
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81824: LD_ADDR_VAR 0 9
81828: PUSH
81829: LD_VAR 0 12
81833: PUSH
81834: LD_INT 1
81836: ARRAY
81837: PPUSH
81838: LD_VAR 0 12
81842: PUSH
81843: LD_INT 2
81845: ARRAY
81846: PPUSH
81847: LD_VAR 0 7
81851: PPUSH
81852: LD_VAR 0 8
81856: PPUSH
81857: CALL_OW 298
81861: ST_TO_ADDR
// if tmp < distance then
81862: LD_VAR 0 9
81866: PUSH
81867: LD_VAR 0 10
81871: LESS
81872: IFFALSE 81894
// begin result := i ;
81874: LD_ADDR_VAR 0 5
81878: PUSH
81879: LD_VAR 0 6
81883: ST_TO_ADDR
// distance := tmp ;
81884: LD_ADDR_VAR 0 10
81888: PUSH
81889: LD_VAR 0 9
81893: ST_TO_ADDR
// end ; end ;
81894: GO 81752
81896: POP
81897: POP
// end ;
81898: LD_VAR 0 5
81902: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81903: LD_INT 0
81905: PPUSH
81906: PPUSH
// if not driver or not IsInUnit ( driver ) then
81907: LD_VAR 0 1
81911: NOT
81912: IFTRUE 81926
81914: PUSH
81915: LD_VAR 0 1
81919: PPUSH
81920: CALL_OW 310
81924: NOT
81925: OR
81926: IFFALSE 81930
// exit ;
81928: GO 82020
// vehicle := IsInUnit ( driver ) ;
81930: LD_ADDR_VAR 0 3
81934: PUSH
81935: LD_VAR 0 1
81939: PPUSH
81940: CALL_OW 310
81944: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81945: LD_VAR 0 1
81949: PPUSH
81950: LD_STRING \
81952: PUSH
81953: LD_INT 0
81955: PUSH
81956: LD_INT 0
81958: PUSH
81959: LD_INT 0
81961: PUSH
81962: LD_INT 0
81964: PUSH
81965: LD_INT 0
81967: PUSH
81968: LD_INT 0
81970: PUSH
81971: EMPTY
81972: LIST
81973: LIST
81974: LIST
81975: LIST
81976: LIST
81977: LIST
81978: LIST
81979: PUSH
81980: LD_STRING E
81982: PUSH
81983: LD_INT 0
81985: PUSH
81986: LD_INT 0
81988: PUSH
81989: LD_VAR 0 3
81993: PUSH
81994: LD_INT 0
81996: PUSH
81997: LD_INT 0
81999: PUSH
82000: LD_INT 0
82002: PUSH
82003: EMPTY
82004: LIST
82005: LIST
82006: LIST
82007: LIST
82008: LIST
82009: LIST
82010: LIST
82011: PUSH
82012: EMPTY
82013: LIST
82014: LIST
82015: PPUSH
82016: CALL_OW 446
// end ;
82020: LD_VAR 0 2
82024: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82025: LD_INT 0
82027: PPUSH
82028: PPUSH
// if not driver or not IsInUnit ( driver ) then
82029: LD_VAR 0 1
82033: NOT
82034: IFTRUE 82048
82036: PUSH
82037: LD_VAR 0 1
82041: PPUSH
82042: CALL_OW 310
82046: NOT
82047: OR
82048: IFFALSE 82052
// exit ;
82050: GO 82142
// vehicle := IsInUnit ( driver ) ;
82052: LD_ADDR_VAR 0 3
82056: PUSH
82057: LD_VAR 0 1
82061: PPUSH
82062: CALL_OW 310
82066: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82067: LD_VAR 0 1
82071: PPUSH
82072: LD_STRING \
82074: PUSH
82075: LD_INT 0
82077: PUSH
82078: LD_INT 0
82080: PUSH
82081: LD_INT 0
82083: PUSH
82084: LD_INT 0
82086: PUSH
82087: LD_INT 0
82089: PUSH
82090: LD_INT 0
82092: PUSH
82093: EMPTY
82094: LIST
82095: LIST
82096: LIST
82097: LIST
82098: LIST
82099: LIST
82100: LIST
82101: PUSH
82102: LD_STRING E
82104: PUSH
82105: LD_INT 0
82107: PUSH
82108: LD_INT 0
82110: PUSH
82111: LD_VAR 0 3
82115: PUSH
82116: LD_INT 0
82118: PUSH
82119: LD_INT 0
82121: PUSH
82122: LD_INT 0
82124: PUSH
82125: EMPTY
82126: LIST
82127: LIST
82128: LIST
82129: LIST
82130: LIST
82131: LIST
82132: LIST
82133: PUSH
82134: EMPTY
82135: LIST
82136: LIST
82137: PPUSH
82138: CALL_OW 447
// end ;
82142: LD_VAR 0 2
82146: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
82147: LD_INT 0
82149: PPUSH
82150: PPUSH
82151: PPUSH
// tmp := [ ] ;
82152: LD_ADDR_VAR 0 5
82156: PUSH
82157: EMPTY
82158: ST_TO_ADDR
// for i in units do
82159: LD_ADDR_VAR 0 4
82163: PUSH
82164: LD_VAR 0 1
82168: PUSH
82169: FOR_IN
82170: IFFALSE 82208
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
82172: LD_ADDR_VAR 0 5
82176: PUSH
82177: LD_VAR 0 5
82181: PPUSH
82182: LD_VAR 0 5
82186: PUSH
82187: LD_INT 1
82189: PLUS
82190: PPUSH
82191: LD_VAR 0 4
82195: PPUSH
82196: CALL_OW 256
82200: PPUSH
82201: CALL_OW 2
82205: ST_TO_ADDR
82206: GO 82169
82208: POP
82209: POP
// if not tmp then
82210: LD_VAR 0 5
82214: NOT
82215: IFFALSE 82219
// exit ;
82217: GO 82267
// if asc then
82219: LD_VAR 0 2
82223: IFFALSE 82247
// result := SortListByListAsc ( units , tmp ) else
82225: LD_ADDR_VAR 0 3
82229: PUSH
82230: LD_VAR 0 1
82234: PPUSH
82235: LD_VAR 0 5
82239: PPUSH
82240: CALL_OW 76
82244: ST_TO_ADDR
82245: GO 82267
// result := SortListByListDesc ( units , tmp ) ;
82247: LD_ADDR_VAR 0 3
82251: PUSH
82252: LD_VAR 0 1
82256: PPUSH
82257: LD_VAR 0 5
82261: PPUSH
82262: CALL_OW 77
82266: ST_TO_ADDR
// end ;
82267: LD_VAR 0 3
82271: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
82272: LD_INT 0
82274: PPUSH
82275: PPUSH
// task := GetTaskList ( mech ) ;
82276: LD_ADDR_VAR 0 4
82280: PUSH
82281: LD_VAR 0 1
82285: PPUSH
82286: CALL_OW 437
82290: ST_TO_ADDR
// if not task then
82291: LD_VAR 0 4
82295: NOT
82296: IFFALSE 82300
// exit ;
82298: GO 82344
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
82300: LD_ADDR_VAR 0 3
82304: PUSH
82305: LD_VAR 0 4
82309: PUSH
82310: LD_INT 1
82312: ARRAY
82313: PUSH
82314: LD_INT 1
82316: ARRAY
82317: PUSH
82318: LD_STRING r
82320: EQUAL
82321: IFFALSE 82343
82323: PUSH
82324: LD_VAR 0 4
82328: PUSH
82329: LD_INT 1
82331: ARRAY
82332: PUSH
82333: LD_INT 4
82335: ARRAY
82336: PUSH
82337: LD_VAR 0 2
82341: EQUAL
82342: AND
82343: ST_TO_ADDR
// end ;
82344: LD_VAR 0 3
82348: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
82349: LD_INT 0
82351: PPUSH
// SetDir ( unit , d ) ;
82352: LD_VAR 0 1
82356: PPUSH
82357: LD_VAR 0 4
82361: PPUSH
82362: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
82366: LD_ADDR_VAR 0 6
82370: PUSH
82371: LD_VAR 0 1
82375: PPUSH
82376: LD_VAR 0 2
82380: PPUSH
82381: LD_VAR 0 3
82385: PPUSH
82386: LD_VAR 0 5
82390: PPUSH
82391: CALL_OW 48
82395: ST_TO_ADDR
// end ;
82396: LD_VAR 0 6
82400: RET
// export function ToNaturalNumber ( number ) ; begin
82401: LD_INT 0
82403: PPUSH
// result := number div 1 ;
82404: LD_ADDR_VAR 0 2
82408: PUSH
82409: LD_VAR 0 1
82413: PUSH
82414: LD_INT 1
82416: DIV
82417: ST_TO_ADDR
// if number < 0 then
82418: LD_VAR 0 1
82422: PUSH
82423: LD_INT 0
82425: LESS
82426: IFFALSE 82436
// result := 0 ;
82428: LD_ADDR_VAR 0 2
82432: PUSH
82433: LD_INT 0
82435: ST_TO_ADDR
// end ;
82436: LD_VAR 0 2
82440: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
82441: LD_INT 0
82443: PPUSH
82444: PPUSH
82445: PPUSH
// if not buildings then
82446: LD_VAR 0 1
82450: NOT
82451: IFFALSE 82455
// exit ;
82453: GO 82570
// tmp := [ ] ;
82455: LD_ADDR_VAR 0 5
82459: PUSH
82460: EMPTY
82461: ST_TO_ADDR
// for b in buildings do
82462: LD_ADDR_VAR 0 4
82466: PUSH
82467: LD_VAR 0 1
82471: PUSH
82472: FOR_IN
82473: IFFALSE 82511
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
82475: LD_ADDR_VAR 0 5
82479: PUSH
82480: LD_VAR 0 5
82484: PPUSH
82485: LD_VAR 0 5
82489: PUSH
82490: LD_INT 1
82492: PLUS
82493: PPUSH
82494: LD_VAR 0 4
82498: PPUSH
82499: CALL_OW 266
82503: PPUSH
82504: CALL_OW 1
82508: ST_TO_ADDR
82509: GO 82472
82511: POP
82512: POP
// if not tmp then
82513: LD_VAR 0 5
82517: NOT
82518: IFFALSE 82522
// exit ;
82520: GO 82570
// if asc then
82522: LD_VAR 0 2
82526: IFFALSE 82550
// result := SortListByListAsc ( buildings , tmp ) else
82528: LD_ADDR_VAR 0 3
82532: PUSH
82533: LD_VAR 0 1
82537: PPUSH
82538: LD_VAR 0 5
82542: PPUSH
82543: CALL_OW 76
82547: ST_TO_ADDR
82548: GO 82570
// result := SortListByListDesc ( buildings , tmp ) ;
82550: LD_ADDR_VAR 0 3
82554: PUSH
82555: LD_VAR 0 1
82559: PPUSH
82560: LD_VAR 0 5
82564: PPUSH
82565: CALL_OW 77
82569: ST_TO_ADDR
// end ;
82570: LD_VAR 0 3
82574: RET
// export function SortByClass ( units , class ) ; var un ; begin
82575: LD_INT 0
82577: PPUSH
82578: PPUSH
// if not units or not class then
82579: LD_VAR 0 1
82583: NOT
82584: IFTRUE 82593
82586: PUSH
82587: LD_VAR 0 2
82591: NOT
82592: OR
82593: IFFALSE 82597
// exit ;
82595: GO 82692
// result := [ ] ;
82597: LD_ADDR_VAR 0 3
82601: PUSH
82602: EMPTY
82603: ST_TO_ADDR
// for un in units do
82604: LD_ADDR_VAR 0 4
82608: PUSH
82609: LD_VAR 0 1
82613: PUSH
82614: FOR_IN
82615: IFFALSE 82690
// if GetClass ( un ) = class then
82617: LD_VAR 0 4
82621: PPUSH
82622: CALL_OW 257
82626: PUSH
82627: LD_VAR 0 2
82631: EQUAL
82632: IFFALSE 82659
// result := Insert ( result , 1 , un ) else
82634: LD_ADDR_VAR 0 3
82638: PUSH
82639: LD_VAR 0 3
82643: PPUSH
82644: LD_INT 1
82646: PPUSH
82647: LD_VAR 0 4
82651: PPUSH
82652: CALL_OW 2
82656: ST_TO_ADDR
82657: GO 82688
// result := Replace ( result , result + 1 , un ) ;
82659: LD_ADDR_VAR 0 3
82663: PUSH
82664: LD_VAR 0 3
82668: PPUSH
82669: LD_VAR 0 3
82673: PUSH
82674: LD_INT 1
82676: PLUS
82677: PPUSH
82678: LD_VAR 0 4
82682: PPUSH
82683: CALL_OW 1
82687: ST_TO_ADDR
82688: GO 82614
82690: POP
82691: POP
// end ;
82692: LD_VAR 0 3
82696: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
82697: LD_INT 0
82699: PPUSH
82700: PPUSH
82701: PPUSH
82702: PPUSH
82703: PPUSH
82704: PPUSH
82705: PPUSH
// result := [ ] ;
82706: LD_ADDR_VAR 0 4
82710: PUSH
82711: EMPTY
82712: ST_TO_ADDR
// if x - r < 0 then
82713: LD_VAR 0 1
82717: PUSH
82718: LD_VAR 0 3
82722: MINUS
82723: PUSH
82724: LD_INT 0
82726: LESS
82727: IFFALSE 82739
// min_x := 0 else
82729: LD_ADDR_VAR 0 8
82733: PUSH
82734: LD_INT 0
82736: ST_TO_ADDR
82737: GO 82755
// min_x := x - r ;
82739: LD_ADDR_VAR 0 8
82743: PUSH
82744: LD_VAR 0 1
82748: PUSH
82749: LD_VAR 0 3
82753: MINUS
82754: ST_TO_ADDR
// if y - r < 0 then
82755: LD_VAR 0 2
82759: PUSH
82760: LD_VAR 0 3
82764: MINUS
82765: PUSH
82766: LD_INT 0
82768: LESS
82769: IFFALSE 82781
// min_y := 0 else
82771: LD_ADDR_VAR 0 7
82775: PUSH
82776: LD_INT 0
82778: ST_TO_ADDR
82779: GO 82797
// min_y := y - r ;
82781: LD_ADDR_VAR 0 7
82785: PUSH
82786: LD_VAR 0 2
82790: PUSH
82791: LD_VAR 0 3
82795: MINUS
82796: ST_TO_ADDR
// max_x := x + r ;
82797: LD_ADDR_VAR 0 9
82801: PUSH
82802: LD_VAR 0 1
82806: PUSH
82807: LD_VAR 0 3
82811: PLUS
82812: ST_TO_ADDR
// max_y := y + r ;
82813: LD_ADDR_VAR 0 10
82817: PUSH
82818: LD_VAR 0 2
82822: PUSH
82823: LD_VAR 0 3
82827: PLUS
82828: ST_TO_ADDR
// for _x = min_x to max_x do
82829: LD_ADDR_VAR 0 5
82833: PUSH
82834: DOUBLE
82835: LD_VAR 0 8
82839: DEC
82840: ST_TO_ADDR
82841: LD_VAR 0 9
82845: PUSH
82846: FOR_TO
82847: IFFALSE 82948
// for _y = min_y to max_y do
82849: LD_ADDR_VAR 0 6
82853: PUSH
82854: DOUBLE
82855: LD_VAR 0 7
82859: DEC
82860: ST_TO_ADDR
82861: LD_VAR 0 10
82865: PUSH
82866: FOR_TO
82867: IFFALSE 82944
// begin if not ValidHex ( _x , _y ) then
82869: LD_VAR 0 5
82873: PPUSH
82874: LD_VAR 0 6
82878: PPUSH
82879: CALL_OW 488
82883: NOT
82884: IFFALSE 82888
// continue ;
82886: GO 82866
// if GetResourceTypeXY ( _x , _y ) then
82888: LD_VAR 0 5
82892: PPUSH
82893: LD_VAR 0 6
82897: PPUSH
82898: CALL_OW 283
82902: IFFALSE 82942
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82904: LD_ADDR_VAR 0 4
82908: PUSH
82909: LD_VAR 0 4
82913: PPUSH
82914: LD_VAR 0 4
82918: PUSH
82919: LD_INT 1
82921: PLUS
82922: PPUSH
82923: LD_VAR 0 5
82927: PUSH
82928: LD_VAR 0 6
82932: PUSH
82933: EMPTY
82934: LIST
82935: LIST
82936: PPUSH
82937: CALL_OW 1
82941: ST_TO_ADDR
// end ;
82942: GO 82866
82944: POP
82945: POP
82946: GO 82846
82948: POP
82949: POP
// end ;
82950: LD_VAR 0 4
82954: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82955: LD_INT 0
82957: PPUSH
82958: PPUSH
82959: PPUSH
82960: PPUSH
82961: PPUSH
82962: PPUSH
82963: PPUSH
82964: PPUSH
// if not units then
82965: LD_VAR 0 1
82969: NOT
82970: IFFALSE 82974
// exit ;
82972: GO 83506
// result := UnitFilter ( units , [ f_ok ] ) ;
82974: LD_ADDR_VAR 0 3
82978: PUSH
82979: LD_VAR 0 1
82983: PPUSH
82984: LD_INT 50
82986: PUSH
82987: EMPTY
82988: LIST
82989: PPUSH
82990: CALL_OW 72
82994: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
82995: LD_ADDR_VAR 0 8
82999: PUSH
83000: LD_VAR 0 1
83004: PUSH
83005: LD_INT 1
83007: ARRAY
83008: PPUSH
83009: CALL_OW 255
83013: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
83014: LD_ADDR_VAR 0 10
83018: PUSH
83019: LD_INT 29
83021: PUSH
83022: LD_INT 91
83024: PUSH
83025: LD_INT 49
83027: PUSH
83028: EMPTY
83029: LIST
83030: LIST
83031: LIST
83032: ST_TO_ADDR
// if not result then
83033: LD_VAR 0 3
83037: NOT
83038: IFFALSE 83042
// exit ;
83040: GO 83506
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
83042: LD_ADDR_VAR 0 5
83046: PUSH
83047: LD_INT 81
83049: PUSH
83050: LD_VAR 0 8
83054: PUSH
83055: EMPTY
83056: LIST
83057: LIST
83058: PPUSH
83059: CALL_OW 69
83063: ST_TO_ADDR
// for i in result do
83064: LD_ADDR_VAR 0 4
83068: PUSH
83069: LD_VAR 0 3
83073: PUSH
83074: FOR_IN
83075: IFFALSE 83504
// begin tag := GetTag ( i ) + 1 ;
83077: LD_ADDR_VAR 0 9
83081: PUSH
83082: LD_VAR 0 4
83086: PPUSH
83087: CALL_OW 110
83091: PUSH
83092: LD_INT 1
83094: PLUS
83095: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
83096: LD_ADDR_VAR 0 7
83100: PUSH
83101: LD_VAR 0 4
83105: PPUSH
83106: CALL_OW 250
83110: PPUSH
83111: LD_VAR 0 4
83115: PPUSH
83116: CALL_OW 251
83120: PPUSH
83121: LD_INT 4
83123: PPUSH
83124: CALL 82697 0 3
83128: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
83129: LD_VAR 0 4
83133: PPUSH
83134: CALL_OW 247
83138: PUSH
83139: LD_INT 2
83141: EQUAL
83142: IFFALSE 83154
83144: PUSH
83145: LD_VAR 0 7
83149: PUSH
83150: LD_INT 2
83152: GREATER
83153: AND
83154: IFFALSE 83174
83156: PUSH
83157: LD_VAR 0 4
83161: PPUSH
83162: CALL_OW 264
83166: PUSH
83167: LD_VAR 0 10
83171: IN
83172: NOT
83173: AND
83174: IFFALSE 83213
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
83176: LD_VAR 0 4
83180: PPUSH
83181: LD_VAR 0 7
83185: PUSH
83186: LD_INT 1
83188: ARRAY
83189: PUSH
83190: LD_INT 1
83192: ARRAY
83193: PPUSH
83194: LD_VAR 0 7
83198: PUSH
83199: LD_INT 1
83201: ARRAY
83202: PUSH
83203: LD_INT 2
83205: ARRAY
83206: PPUSH
83207: CALL_OW 116
83211: GO 83502
// if path > tag then
83213: LD_VAR 0 2
83217: PUSH
83218: LD_VAR 0 9
83222: GREATER
83223: IFFALSE 83431
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
83225: LD_ADDR_VAR 0 6
83229: PUSH
83230: LD_VAR 0 5
83234: PPUSH
83235: LD_INT 91
83237: PUSH
83238: LD_VAR 0 4
83242: PUSH
83243: LD_INT 8
83245: PUSH
83246: EMPTY
83247: LIST
83248: LIST
83249: LIST
83250: PPUSH
83251: CALL_OW 72
83255: ST_TO_ADDR
// if nearEnemy then
83256: LD_VAR 0 6
83260: IFFALSE 83329
// begin if GetWeapon ( i ) = ru_time_lapser then
83262: LD_VAR 0 4
83266: PPUSH
83267: CALL_OW 264
83271: PUSH
83272: LD_INT 49
83274: EQUAL
83275: IFFALSE 83303
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
83277: LD_VAR 0 4
83281: PPUSH
83282: LD_VAR 0 6
83286: PPUSH
83287: LD_VAR 0 4
83291: PPUSH
83292: CALL_OW 74
83296: PPUSH
83297: CALL_OW 112
83301: GO 83327
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
83303: LD_VAR 0 4
83307: PPUSH
83308: LD_VAR 0 6
83312: PPUSH
83313: LD_VAR 0 4
83317: PPUSH
83318: CALL_OW 74
83322: PPUSH
83323: CALL 84587 0 2
// end else
83327: GO 83429
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
83329: LD_VAR 0 4
83333: PPUSH
83334: LD_VAR 0 2
83338: PUSH
83339: LD_VAR 0 9
83343: ARRAY
83344: PUSH
83345: LD_INT 1
83347: ARRAY
83348: PPUSH
83349: LD_VAR 0 2
83353: PUSH
83354: LD_VAR 0 9
83358: ARRAY
83359: PUSH
83360: LD_INT 2
83362: ARRAY
83363: PPUSH
83364: CALL_OW 297
83368: PUSH
83369: LD_INT 6
83371: GREATER
83372: IFFALSE 83415
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
83374: LD_VAR 0 4
83378: PPUSH
83379: LD_VAR 0 2
83383: PUSH
83384: LD_VAR 0 9
83388: ARRAY
83389: PUSH
83390: LD_INT 1
83392: ARRAY
83393: PPUSH
83394: LD_VAR 0 2
83398: PUSH
83399: LD_VAR 0 9
83403: ARRAY
83404: PUSH
83405: LD_INT 2
83407: ARRAY
83408: PPUSH
83409: CALL_OW 114
83413: GO 83429
// SetTag ( i , tag ) ;
83415: LD_VAR 0 4
83419: PPUSH
83420: LD_VAR 0 9
83424: PPUSH
83425: CALL_OW 109
// end else
83429: GO 83502
// if enemy then
83431: LD_VAR 0 5
83435: IFFALSE 83502
// begin if GetWeapon ( i ) = ru_time_lapser then
83437: LD_VAR 0 4
83441: PPUSH
83442: CALL_OW 264
83446: PUSH
83447: LD_INT 49
83449: EQUAL
83450: IFFALSE 83478
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
83452: LD_VAR 0 4
83456: PPUSH
83457: LD_VAR 0 5
83461: PPUSH
83462: LD_VAR 0 4
83466: PPUSH
83467: CALL_OW 74
83471: PPUSH
83472: CALL_OW 112
83476: GO 83502
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
83478: LD_VAR 0 4
83482: PPUSH
83483: LD_VAR 0 5
83487: PPUSH
83488: LD_VAR 0 4
83492: PPUSH
83493: CALL_OW 74
83497: PPUSH
83498: CALL 84587 0 2
// end ; end ;
83502: GO 83074
83504: POP
83505: POP
// end ;
83506: LD_VAR 0 3
83510: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
83511: LD_INT 0
83513: PPUSH
83514: PPUSH
83515: PPUSH
// if not unit or IsInUnit ( unit ) then
83516: LD_VAR 0 1
83520: NOT
83521: IFTRUE 83534
83523: PUSH
83524: LD_VAR 0 1
83528: PPUSH
83529: CALL_OW 310
83533: OR
83534: IFFALSE 83538
// exit ;
83536: GO 83629
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
83538: LD_ADDR_VAR 0 4
83542: PUSH
83543: LD_VAR 0 1
83547: PPUSH
83548: CALL_OW 250
83552: PPUSH
83553: LD_VAR 0 2
83557: PPUSH
83558: LD_INT 1
83560: PPUSH
83561: CALL_OW 272
83565: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
83566: LD_ADDR_VAR 0 5
83570: PUSH
83571: LD_VAR 0 1
83575: PPUSH
83576: CALL_OW 251
83580: PPUSH
83581: LD_VAR 0 2
83585: PPUSH
83586: LD_INT 1
83588: PPUSH
83589: CALL_OW 273
83593: ST_TO_ADDR
// if ValidHex ( x , y ) then
83594: LD_VAR 0 4
83598: PPUSH
83599: LD_VAR 0 5
83603: PPUSH
83604: CALL_OW 488
83608: IFFALSE 83629
// ComTurnXY ( unit , x , y ) ;
83610: LD_VAR 0 1
83614: PPUSH
83615: LD_VAR 0 4
83619: PPUSH
83620: LD_VAR 0 5
83624: PPUSH
83625: CALL_OW 118
// end ;
83629: LD_VAR 0 3
83633: RET
// export function SeeUnits ( side , units ) ; var i ; begin
83634: LD_INT 0
83636: PPUSH
83637: PPUSH
// result := false ;
83638: LD_ADDR_VAR 0 3
83642: PUSH
83643: LD_INT 0
83645: ST_TO_ADDR
// if not units then
83646: LD_VAR 0 2
83650: NOT
83651: IFFALSE 83655
// exit ;
83653: GO 83700
// for i in units do
83655: LD_ADDR_VAR 0 4
83659: PUSH
83660: LD_VAR 0 2
83664: PUSH
83665: FOR_IN
83666: IFFALSE 83698
// if See ( side , i ) then
83668: LD_VAR 0 1
83672: PPUSH
83673: LD_VAR 0 4
83677: PPUSH
83678: CALL_OW 292
83682: IFFALSE 83696
// begin result := true ;
83684: LD_ADDR_VAR 0 3
83688: PUSH
83689: LD_INT 1
83691: ST_TO_ADDR
// exit ;
83692: POP
83693: POP
83694: GO 83700
// end ;
83696: GO 83665
83698: POP
83699: POP
// end ;
83700: LD_VAR 0 3
83704: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
83705: LD_INT 0
83707: PPUSH
83708: PPUSH
83709: PPUSH
83710: PPUSH
// if not unit or not points then
83711: LD_VAR 0 1
83715: NOT
83716: IFTRUE 83725
83718: PUSH
83719: LD_VAR 0 2
83723: NOT
83724: OR
83725: IFFALSE 83729
// exit ;
83727: GO 83819
// dist := 99999 ;
83729: LD_ADDR_VAR 0 5
83733: PUSH
83734: LD_INT 99999
83736: ST_TO_ADDR
// for i in points do
83737: LD_ADDR_VAR 0 4
83741: PUSH
83742: LD_VAR 0 2
83746: PUSH
83747: FOR_IN
83748: IFFALSE 83817
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
83750: LD_ADDR_VAR 0 6
83754: PUSH
83755: LD_VAR 0 1
83759: PPUSH
83760: LD_VAR 0 4
83764: PUSH
83765: LD_INT 1
83767: ARRAY
83768: PPUSH
83769: LD_VAR 0 4
83773: PUSH
83774: LD_INT 2
83776: ARRAY
83777: PPUSH
83778: CALL_OW 297
83782: ST_TO_ADDR
// if tmpDist < dist then
83783: LD_VAR 0 6
83787: PUSH
83788: LD_VAR 0 5
83792: LESS
83793: IFFALSE 83815
// begin result := i ;
83795: LD_ADDR_VAR 0 3
83799: PUSH
83800: LD_VAR 0 4
83804: ST_TO_ADDR
// dist := tmpDist ;
83805: LD_ADDR_VAR 0 5
83809: PUSH
83810: LD_VAR 0 6
83814: ST_TO_ADDR
// end ; end ;
83815: GO 83747
83817: POP
83818: POP
// end ;
83819: LD_VAR 0 3
83823: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
83824: LD_INT 0
83826: PPUSH
// uc_side := side ;
83827: LD_ADDR_OWVAR 20
83831: PUSH
83832: LD_VAR 0 1
83836: ST_TO_ADDR
// uc_nation := 3 ;
83837: LD_ADDR_OWVAR 21
83841: PUSH
83842: LD_INT 3
83844: ST_TO_ADDR
// vc_chassis := 25 ;
83845: LD_ADDR_OWVAR 37
83849: PUSH
83850: LD_INT 25
83852: ST_TO_ADDR
// vc_engine := engine_siberite ;
83853: LD_ADDR_OWVAR 39
83857: PUSH
83858: LD_INT 3
83860: ST_TO_ADDR
// vc_control := control_computer ;
83861: LD_ADDR_OWVAR 38
83865: PUSH
83866: LD_INT 3
83868: ST_TO_ADDR
// vc_weapon := 59 ;
83869: LD_ADDR_OWVAR 40
83873: PUSH
83874: LD_INT 59
83876: ST_TO_ADDR
// result := CreateVehicle ;
83877: LD_ADDR_VAR 0 5
83881: PUSH
83882: CALL_OW 45
83886: ST_TO_ADDR
// SetDir ( result , d ) ;
83887: LD_VAR 0 5
83891: PPUSH
83892: LD_VAR 0 4
83896: PPUSH
83897: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
83901: LD_VAR 0 5
83905: PPUSH
83906: LD_VAR 0 2
83910: PPUSH
83911: LD_VAR 0 3
83915: PPUSH
83916: LD_INT 0
83918: PPUSH
83919: CALL_OW 48
// end ;
83923: LD_VAR 0 5
83927: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
83928: LD_INT 0
83930: PPUSH
83931: PPUSH
83932: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
83933: LD_ADDR_VAR 0 2
83937: PUSH
83938: LD_INT 0
83940: PUSH
83941: LD_INT 0
83943: PUSH
83944: LD_INT 0
83946: PUSH
83947: LD_INT 0
83949: PUSH
83950: EMPTY
83951: LIST
83952: LIST
83953: LIST
83954: LIST
83955: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83956: LD_VAR 0 1
83960: NOT
83961: IFTRUE 83994
83963: PUSH
83964: LD_VAR 0 1
83968: PPUSH
83969: CALL_OW 264
83973: PUSH
83974: LD_INT 12
83976: PUSH
83977: LD_INT 51
83979: PUSH
83980: LD_INT 32
83982: PUSH
83983: LD_INT 89
83985: PUSH
83986: EMPTY
83987: LIST
83988: LIST
83989: LIST
83990: LIST
83991: IN
83992: NOT
83993: OR
83994: IFFALSE 83998
// exit ;
83996: GO 84096
// for i := 1 to 3 do
83998: LD_ADDR_VAR 0 3
84002: PUSH
84003: DOUBLE
84004: LD_INT 1
84006: DEC
84007: ST_TO_ADDR
84008: LD_INT 3
84010: PUSH
84011: FOR_TO
84012: IFFALSE 84094
// begin tmp := GetCargo ( cargo , i ) ;
84014: LD_ADDR_VAR 0 4
84018: PUSH
84019: LD_VAR 0 1
84023: PPUSH
84024: LD_VAR 0 3
84028: PPUSH
84029: CALL_OW 289
84033: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
84034: LD_ADDR_VAR 0 2
84038: PUSH
84039: LD_VAR 0 2
84043: PPUSH
84044: LD_VAR 0 3
84048: PPUSH
84049: LD_VAR 0 4
84053: PPUSH
84054: CALL_OW 1
84058: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
84059: LD_ADDR_VAR 0 2
84063: PUSH
84064: LD_VAR 0 2
84068: PPUSH
84069: LD_INT 4
84071: PPUSH
84072: LD_VAR 0 2
84076: PUSH
84077: LD_INT 4
84079: ARRAY
84080: PUSH
84081: LD_VAR 0 4
84085: PLUS
84086: PPUSH
84087: CALL_OW 1
84091: ST_TO_ADDR
// end ;
84092: GO 84011
84094: POP
84095: POP
// end ;
84096: LD_VAR 0 2
84100: RET
// export function Length ( array ) ; begin
84101: LD_INT 0
84103: PPUSH
// result := array + 0 ;
84104: LD_ADDR_VAR 0 2
84108: PUSH
84109: LD_VAR 0 1
84113: PUSH
84114: LD_INT 0
84116: PLUS
84117: ST_TO_ADDR
// end ;
84118: LD_VAR 0 2
84122: RET
// export function PrepareArray ( array ) ; begin
84123: LD_INT 0
84125: PPUSH
// result := array diff 0 ;
84126: LD_ADDR_VAR 0 2
84130: PUSH
84131: LD_VAR 0 1
84135: PUSH
84136: LD_INT 0
84138: DIFF
84139: ST_TO_ADDR
// if not result [ 1 ] then
84140: LD_VAR 0 2
84144: PUSH
84145: LD_INT 1
84147: ARRAY
84148: NOT
84149: IFFALSE 84169
// result := Delete ( result , 1 ) ;
84151: LD_ADDR_VAR 0 2
84155: PUSH
84156: LD_VAR 0 2
84160: PPUSH
84161: LD_INT 1
84163: PPUSH
84164: CALL_OW 3
84168: ST_TO_ADDR
// end ;
84169: LD_VAR 0 2
84173: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
84174: LD_INT 0
84176: PPUSH
84177: PPUSH
84178: PPUSH
84179: PPUSH
// sibRocketRange := 25 ;
84180: LD_ADDR_VAR 0 6
84184: PUSH
84185: LD_INT 25
84187: ST_TO_ADDR
// result := false ;
84188: LD_ADDR_VAR 0 4
84192: PUSH
84193: LD_INT 0
84195: ST_TO_ADDR
// for i := 0 to 5 do
84196: LD_ADDR_VAR 0 5
84200: PUSH
84201: DOUBLE
84202: LD_INT 0
84204: DEC
84205: ST_TO_ADDR
84206: LD_INT 5
84208: PUSH
84209: FOR_TO
84210: IFFALSE 84277
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
84212: LD_VAR 0 1
84216: PPUSH
84217: LD_VAR 0 5
84221: PPUSH
84222: LD_VAR 0 6
84226: PPUSH
84227: CALL_OW 272
84231: PPUSH
84232: LD_VAR 0 2
84236: PPUSH
84237: LD_VAR 0 5
84241: PPUSH
84242: LD_VAR 0 6
84246: PPUSH
84247: CALL_OW 273
84251: PPUSH
84252: LD_VAR 0 3
84256: PPUSH
84257: CALL_OW 309
84261: IFFALSE 84275
// begin result := true ;
84263: LD_ADDR_VAR 0 4
84267: PUSH
84268: LD_INT 1
84270: ST_TO_ADDR
// exit ;
84271: POP
84272: POP
84273: GO 84279
// end ;
84275: GO 84209
84277: POP
84278: POP
// end ;
84279: LD_VAR 0 4
84283: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
84284: LD_INT 0
84286: PPUSH
84287: PPUSH
84288: PPUSH
// if btype = b_depot then
84289: LD_VAR 0 2
84293: PUSH
84294: LD_INT 0
84296: EQUAL
84297: IFFALSE 84309
// begin result := true ;
84299: LD_ADDR_VAR 0 3
84303: PUSH
84304: LD_INT 1
84306: ST_TO_ADDR
// exit ;
84307: GO 84429
// end ; pom := GetBase ( depot ) ;
84309: LD_ADDR_VAR 0 4
84313: PUSH
84314: LD_VAR 0 1
84318: PPUSH
84319: CALL_OW 274
84323: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
84324: LD_ADDR_VAR 0 5
84328: PUSH
84329: LD_VAR 0 2
84333: PPUSH
84334: LD_VAR 0 1
84338: PPUSH
84339: CALL_OW 248
84343: PPUSH
84344: CALL_OW 450
84348: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
84349: LD_ADDR_VAR 0 3
84353: PUSH
84354: LD_VAR 0 4
84358: PPUSH
84359: LD_INT 1
84361: PPUSH
84362: CALL_OW 275
84366: PUSH
84367: LD_VAR 0 5
84371: PUSH
84372: LD_INT 1
84374: ARRAY
84375: GREATEREQUAL
84376: IFFALSE 84402
84378: PUSH
84379: LD_VAR 0 4
84383: PPUSH
84384: LD_INT 2
84386: PPUSH
84387: CALL_OW 275
84391: PUSH
84392: LD_VAR 0 5
84396: PUSH
84397: LD_INT 2
84399: ARRAY
84400: GREATEREQUAL
84401: AND
84402: IFFALSE 84428
84404: PUSH
84405: LD_VAR 0 4
84409: PPUSH
84410: LD_INT 3
84412: PPUSH
84413: CALL_OW 275
84417: PUSH
84418: LD_VAR 0 5
84422: PUSH
84423: LD_INT 3
84425: ARRAY
84426: GREATEREQUAL
84427: AND
84428: ST_TO_ADDR
// end ;
84429: LD_VAR 0 3
84433: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
84434: LD_INT 0
84436: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
84437: LD_VAR 0 1
84441: PPUSH
84442: LD_VAR 0 2
84446: PPUSH
84447: LD_INT 0
84449: PPUSH
84450: LD_INT 0
84452: PPUSH
84453: LD_INT 1
84455: PPUSH
84456: LD_INT 0
84458: PPUSH
84459: CALL_OW 587
// end ;
84463: LD_VAR 0 3
84467: RET
// export function CenterOnNow ( unit ) ; begin
84468: LD_INT 0
84470: PPUSH
// result := IsInUnit ( unit ) ;
84471: LD_ADDR_VAR 0 2
84475: PUSH
84476: LD_VAR 0 1
84480: PPUSH
84481: CALL_OW 310
84485: ST_TO_ADDR
// if not result then
84486: LD_VAR 0 2
84490: NOT
84491: IFFALSE 84503
// result := unit ;
84493: LD_ADDR_VAR 0 2
84497: PUSH
84498: LD_VAR 0 1
84502: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
84503: LD_VAR 0 1
84507: PPUSH
84508: CALL_OW 87
// end ;
84512: LD_VAR 0 2
84516: RET
// export function ComMoveHex ( unit , hex ) ; begin
84517: LD_INT 0
84519: PPUSH
// if not hex then
84520: LD_VAR 0 2
84524: NOT
84525: IFFALSE 84529
// exit ;
84527: GO 84582
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
84529: LD_VAR 0 2
84533: PUSH
84534: LD_INT 1
84536: ARRAY
84537: PPUSH
84538: LD_VAR 0 2
84542: PUSH
84543: LD_INT 2
84545: ARRAY
84546: PPUSH
84547: CALL_OW 428
84551: IFFALSE 84555
// exit ;
84553: GO 84582
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
84555: LD_VAR 0 1
84559: PPUSH
84560: LD_VAR 0 2
84564: PUSH
84565: LD_INT 1
84567: ARRAY
84568: PPUSH
84569: LD_VAR 0 2
84573: PUSH
84574: LD_INT 2
84576: ARRAY
84577: PPUSH
84578: CALL_OW 111
// end ;
84582: LD_VAR 0 3
84586: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
84587: LD_INT 0
84589: PPUSH
84590: PPUSH
84591: PPUSH
// if not unit or not enemy then
84592: LD_VAR 0 1
84596: NOT
84597: IFTRUE 84606
84599: PUSH
84600: LD_VAR 0 2
84604: NOT
84605: OR
84606: IFFALSE 84610
// exit ;
84608: GO 84736
// x := GetX ( enemy ) ;
84610: LD_ADDR_VAR 0 4
84614: PUSH
84615: LD_VAR 0 2
84619: PPUSH
84620: CALL_OW 250
84624: ST_TO_ADDR
// y := GetY ( enemy ) ;
84625: LD_ADDR_VAR 0 5
84629: PUSH
84630: LD_VAR 0 2
84634: PPUSH
84635: CALL_OW 251
84639: ST_TO_ADDR
// if ValidHex ( x , y ) then
84640: LD_VAR 0 4
84644: PPUSH
84645: LD_VAR 0 5
84649: PPUSH
84650: CALL_OW 488
84654: IFFALSE 84736
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
84656: LD_VAR 0 2
84660: PPUSH
84661: CALL_OW 247
84665: PUSH
84666: LD_INT 3
84668: PUSH
84669: LD_INT 2
84671: PUSH
84672: EMPTY
84673: LIST
84674: LIST
84675: IN
84676: IFTRUE 84699
84678: PUSH
84679: LD_VAR 0 1
84683: PPUSH
84684: CALL_OW 255
84688: PPUSH
84689: LD_VAR 0 2
84693: PPUSH
84694: CALL_OW 292
84698: OR
84699: IFFALSE 84717
// ComAttackUnit ( unit , enemy ) else
84701: LD_VAR 0 1
84705: PPUSH
84706: LD_VAR 0 2
84710: PPUSH
84711: CALL_OW 115
84715: GO 84736
// ComAgressiveMove ( unit , x , y ) ;
84717: LD_VAR 0 1
84721: PPUSH
84722: LD_VAR 0 4
84726: PPUSH
84727: LD_VAR 0 5
84731: PPUSH
84732: CALL_OW 114
// end ;
84736: LD_VAR 0 3
84740: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
84741: LD_INT 0
84743: PPUSH
84744: PPUSH
84745: PPUSH
// list := AreaToList ( area , 0 ) ;
84746: LD_ADDR_VAR 0 5
84750: PUSH
84751: LD_VAR 0 1
84755: PPUSH
84756: LD_INT 0
84758: PPUSH
84759: CALL_OW 517
84763: ST_TO_ADDR
// if not list then
84764: LD_VAR 0 5
84768: NOT
84769: IFFALSE 84773
// exit ;
84771: GO 84903
// if all then
84773: LD_VAR 0 2
84777: IFFALSE 84865
// begin for i := 1 to list [ 1 ] do
84779: LD_ADDR_VAR 0 4
84783: PUSH
84784: DOUBLE
84785: LD_INT 1
84787: DEC
84788: ST_TO_ADDR
84789: LD_VAR 0 5
84793: PUSH
84794: LD_INT 1
84796: ARRAY
84797: PUSH
84798: FOR_TO
84799: IFFALSE 84861
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
84801: LD_ADDR_VAR 0 3
84805: PUSH
84806: LD_VAR 0 3
84810: PPUSH
84811: LD_VAR 0 3
84815: PUSH
84816: LD_INT 1
84818: PLUS
84819: PPUSH
84820: LD_VAR 0 5
84824: PUSH
84825: LD_INT 1
84827: ARRAY
84828: PUSH
84829: LD_VAR 0 4
84833: ARRAY
84834: PUSH
84835: LD_VAR 0 5
84839: PUSH
84840: LD_INT 2
84842: ARRAY
84843: PUSH
84844: LD_VAR 0 4
84848: ARRAY
84849: PUSH
84850: EMPTY
84851: LIST
84852: LIST
84853: PPUSH
84854: CALL_OW 1
84858: ST_TO_ADDR
84859: GO 84798
84861: POP
84862: POP
// exit ;
84863: GO 84903
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
84865: LD_ADDR_VAR 0 3
84869: PUSH
84870: LD_VAR 0 5
84874: PUSH
84875: LD_INT 1
84877: ARRAY
84878: PUSH
84879: LD_INT 1
84881: ARRAY
84882: PUSH
84883: LD_VAR 0 5
84887: PUSH
84888: LD_INT 2
84890: ARRAY
84891: PUSH
84892: LD_INT 1
84894: ARRAY
84895: PUSH
84896: EMPTY
84897: LIST
84898: LIST
84899: PUSH
84900: EMPTY
84901: LIST
84902: ST_TO_ADDR
// end ;
84903: LD_VAR 0 3
84907: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
84908: LD_INT 0
84910: PPUSH
84911: PPUSH
// list := AreaToList ( area , 0 ) ;
84912: LD_ADDR_VAR 0 4
84916: PUSH
84917: LD_VAR 0 1
84921: PPUSH
84922: LD_INT 0
84924: PPUSH
84925: CALL_OW 517
84929: ST_TO_ADDR
// if not list then
84930: LD_VAR 0 4
84934: NOT
84935: IFFALSE 84939
// exit ;
84937: GO 84980
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
84939: LD_ADDR_VAR 0 3
84943: PUSH
84944: LD_VAR 0 4
84948: PUSH
84949: LD_INT 1
84951: ARRAY
84952: PUSH
84953: LD_INT 1
84955: ARRAY
84956: PUSH
84957: LD_VAR 0 4
84961: PUSH
84962: LD_INT 2
84964: ARRAY
84965: PUSH
84966: LD_INT 1
84968: ARRAY
84969: PUSH
84970: LD_VAR 0 2
84974: PUSH
84975: EMPTY
84976: LIST
84977: LIST
84978: LIST
84979: ST_TO_ADDR
// end ;
84980: LD_VAR 0 3
84984: RET
// export function First ( array ) ; begin
84985: LD_INT 0
84987: PPUSH
// if not array then
84988: LD_VAR 0 1
84992: NOT
84993: IFFALSE 84997
// exit ;
84995: GO 85011
// result := array [ 1 ] ;
84997: LD_ADDR_VAR 0 2
85001: PUSH
85002: LD_VAR 0 1
85006: PUSH
85007: LD_INT 1
85009: ARRAY
85010: ST_TO_ADDR
// end ;
85011: LD_VAR 0 2
85015: RET
// export function Last ( array ) ; begin
85016: LD_INT 0
85018: PPUSH
// if not array then
85019: LD_VAR 0 1
85023: NOT
85024: IFFALSE 85028
// exit ;
85026: GO 85044
// result := array [ array ] ;
85028: LD_ADDR_VAR 0 2
85032: PUSH
85033: LD_VAR 0 1
85037: PUSH
85038: LD_VAR 0 1
85042: ARRAY
85043: ST_TO_ADDR
// end ;
85044: LD_VAR 0 2
85048: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
85049: LD_INT 0
85051: PPUSH
85052: PPUSH
// result := [ ] ;
85053: LD_ADDR_VAR 0 5
85057: PUSH
85058: EMPTY
85059: ST_TO_ADDR
// if not array then
85060: LD_VAR 0 1
85064: NOT
85065: IFFALSE 85069
// exit ;
85067: GO 85181
// for i := 1 to array do
85069: LD_ADDR_VAR 0 6
85073: PUSH
85074: DOUBLE
85075: LD_INT 1
85077: DEC
85078: ST_TO_ADDR
85079: LD_VAR 0 1
85083: PUSH
85084: FOR_TO
85085: IFFALSE 85179
// if array [ i ] [ index ] = value then
85087: LD_VAR 0 1
85091: PUSH
85092: LD_VAR 0 6
85096: ARRAY
85097: PUSH
85098: LD_VAR 0 2
85102: ARRAY
85103: PUSH
85104: LD_VAR 0 3
85108: EQUAL
85109: IFFALSE 85177
// begin if indexColumn then
85111: LD_VAR 0 4
85115: IFFALSE 85151
// result := Join ( result , array [ i ] [ indexColumn ] ) else
85117: LD_ADDR_VAR 0 5
85121: PUSH
85122: LD_VAR 0 5
85126: PPUSH
85127: LD_VAR 0 1
85131: PUSH
85132: LD_VAR 0 6
85136: ARRAY
85137: PUSH
85138: LD_VAR 0 4
85142: ARRAY
85143: PPUSH
85144: CALL 80189 0 2
85148: ST_TO_ADDR
85149: GO 85177
// result := Join ( result , array [ i ] ) ;
85151: LD_ADDR_VAR 0 5
85155: PUSH
85156: LD_VAR 0 5
85160: PPUSH
85161: LD_VAR 0 1
85165: PUSH
85166: LD_VAR 0 6
85170: ARRAY
85171: PPUSH
85172: CALL 80189 0 2
85176: ST_TO_ADDR
// end ;
85177: GO 85084
85179: POP
85180: POP
// end ;
85181: LD_VAR 0 5
85185: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
85186: LD_INT 0
85188: PPUSH
// if not vehicles or not parkingPoint then
85189: LD_VAR 0 1
85193: NOT
85194: IFTRUE 85203
85196: PUSH
85197: LD_VAR 0 2
85201: NOT
85202: OR
85203: IFFALSE 85207
// exit ;
85205: GO 85305
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
85207: LD_ADDR_VAR 0 1
85211: PUSH
85212: LD_VAR 0 1
85216: PPUSH
85217: LD_INT 50
85219: PUSH
85220: EMPTY
85221: LIST
85222: PUSH
85223: LD_INT 3
85225: PUSH
85226: LD_INT 92
85228: PUSH
85229: LD_VAR 0 2
85233: PUSH
85234: LD_INT 1
85236: ARRAY
85237: PUSH
85238: LD_VAR 0 2
85242: PUSH
85243: LD_INT 2
85245: ARRAY
85246: PUSH
85247: LD_INT 8
85249: PUSH
85250: EMPTY
85251: LIST
85252: LIST
85253: LIST
85254: LIST
85255: PUSH
85256: EMPTY
85257: LIST
85258: LIST
85259: PUSH
85260: EMPTY
85261: LIST
85262: LIST
85263: PPUSH
85264: CALL_OW 72
85268: ST_TO_ADDR
// if not vehicles then
85269: LD_VAR 0 1
85273: NOT
85274: IFFALSE 85278
// exit ;
85276: GO 85305
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
85278: LD_VAR 0 1
85282: PPUSH
85283: LD_VAR 0 2
85287: PUSH
85288: LD_INT 1
85290: ARRAY
85291: PPUSH
85292: LD_VAR 0 2
85296: PUSH
85297: LD_INT 2
85299: ARRAY
85300: PPUSH
85301: CALL_OW 111
// end ;
85305: LD_VAR 0 3
85309: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
85310: LD_INT 0
85312: PPUSH
85313: PPUSH
85314: PPUSH
// if not side or not area then
85315: LD_VAR 0 1
85319: NOT
85320: IFTRUE 85329
85322: PUSH
85323: LD_VAR 0 2
85327: NOT
85328: OR
85329: IFFALSE 85333
// exit ;
85331: GO 85452
// tmp := AreaToList ( area , 0 ) ;
85333: LD_ADDR_VAR 0 5
85337: PUSH
85338: LD_VAR 0 2
85342: PPUSH
85343: LD_INT 0
85345: PPUSH
85346: CALL_OW 517
85350: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
85351: LD_ADDR_VAR 0 4
85355: PUSH
85356: DOUBLE
85357: LD_INT 1
85359: DEC
85360: ST_TO_ADDR
85361: LD_VAR 0 5
85365: PUSH
85366: LD_INT 1
85368: ARRAY
85369: PUSH
85370: FOR_TO
85371: IFFALSE 85450
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
85373: LD_VAR 0 5
85377: PUSH
85378: LD_INT 1
85380: ARRAY
85381: PUSH
85382: LD_VAR 0 4
85386: ARRAY
85387: PPUSH
85388: LD_VAR 0 5
85392: PUSH
85393: LD_INT 2
85395: ARRAY
85396: PUSH
85397: LD_VAR 0 4
85401: ARRAY
85402: PPUSH
85403: CALL_OW 351
85407: IFFALSE 85448
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
85409: LD_VAR 0 5
85413: PUSH
85414: LD_INT 1
85416: ARRAY
85417: PUSH
85418: LD_VAR 0 4
85422: ARRAY
85423: PPUSH
85424: LD_VAR 0 5
85428: PUSH
85429: LD_INT 2
85431: ARRAY
85432: PUSH
85433: LD_VAR 0 4
85437: ARRAY
85438: PPUSH
85439: LD_VAR 0 1
85443: PPUSH
85444: CALL_OW 244
// end ;
85448: GO 85370
85450: POP
85451: POP
// end ;
85452: LD_VAR 0 3
85456: RET
// export function UniqueArray ( array ) ; var i ; begin
85457: LD_INT 0
85459: PPUSH
85460: PPUSH
// result := [ ] ;
85461: LD_ADDR_VAR 0 2
85465: PUSH
85466: EMPTY
85467: ST_TO_ADDR
// if not array then
85468: LD_VAR 0 1
85472: NOT
85473: IFFALSE 85477
// exit ;
85475: GO 85538
// for i := 1 to array do
85477: LD_ADDR_VAR 0 3
85481: PUSH
85482: DOUBLE
85483: LD_INT 1
85485: DEC
85486: ST_TO_ADDR
85487: LD_VAR 0 1
85491: PUSH
85492: FOR_TO
85493: IFFALSE 85536
// if not array [ i ] in result then
85495: LD_VAR 0 1
85499: PUSH
85500: LD_VAR 0 3
85504: ARRAY
85505: PUSH
85506: LD_VAR 0 2
85510: IN
85511: NOT
85512: IFFALSE 85534
// result := Join ( result , i ) ;
85514: LD_ADDR_VAR 0 2
85518: PUSH
85519: LD_VAR 0 2
85523: PPUSH
85524: LD_VAR 0 3
85528: PPUSH
85529: CALL 80189 0 2
85533: ST_TO_ADDR
85534: GO 85492
85536: POP
85537: POP
// end ; end_of_file
85538: LD_VAR 0 2
85542: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
85543: LD_VAR 0 1
85547: PUSH
85548: LD_INT 200
85550: DOUBLE
85551: GREATEREQUAL
85552: IFFALSE 85560
85554: LD_INT 299
85556: DOUBLE
85557: LESSEQUAL
85558: IFTRUE 85562
85560: GO 85594
85562: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
85563: LD_VAR 0 1
85567: PPUSH
85568: LD_VAR 0 2
85572: PPUSH
85573: LD_VAR 0 3
85577: PPUSH
85578: LD_VAR 0 4
85582: PPUSH
85583: LD_VAR 0 5
85587: PPUSH
85588: CALL 36375 0 5
85592: GO 85671
85594: LD_INT 300
85596: DOUBLE
85597: GREATEREQUAL
85598: IFFALSE 85606
85600: LD_INT 399
85602: DOUBLE
85603: LESSEQUAL
85604: IFTRUE 85608
85606: GO 85670
85608: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
85609: LD_VAR 0 1
85613: PPUSH
85614: LD_VAR 0 2
85618: PPUSH
85619: LD_VAR 0 3
85623: PPUSH
85624: LD_VAR 0 4
85628: PPUSH
85629: LD_VAR 0 5
85633: PPUSH
85634: LD_VAR 0 6
85638: PPUSH
85639: LD_VAR 0 7
85643: PPUSH
85644: LD_VAR 0 8
85648: PPUSH
85649: LD_VAR 0 9
85653: PPUSH
85654: LD_VAR 0 10
85658: PPUSH
85659: LD_VAR 0 11
85663: PPUSH
85664: CALL 32178 0 11
85668: GO 85671
85670: POP
// end ;
85671: PPOPN 11
85673: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
85674: LD_VAR 0 1
85678: PPUSH
85679: LD_VAR 0 2
85683: PPUSH
85684: LD_VAR 0 3
85688: PPUSH
85689: LD_VAR 0 4
85693: PPUSH
85694: LD_VAR 0 5
85698: PPUSH
85699: CALL 35675 0 5
// end ; end_of_file
85703: PPOPN 5
85705: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
85706: LD_VAR 0 1
85710: PPUSH
85711: LD_VAR 0 2
85715: PPUSH
85716: LD_VAR 0 3
85720: PPUSH
85721: LD_VAR 0 4
85725: PPUSH
85726: LD_VAR 0 5
85730: PPUSH
85731: LD_VAR 0 6
85735: PPUSH
85736: CALL 19718 0 6
// end ;
85740: PPOPN 6
85742: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
85743: LD_INT 0
85745: PPUSH
// begin if not units then
85746: LD_VAR 0 1
85750: NOT
85751: IFFALSE 85755
// exit ;
85753: GO 85789
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
85755: LD_VAR 0 1
85759: PPUSH
85760: LD_VAR 0 2
85764: PPUSH
85765: LD_VAR 0 3
85769: PPUSH
85770: LD_VAR 0 4
85774: PPUSH
85775: LD_VAR 0 5
85779: PPUSH
85780: LD_VAR 0 6
85784: PPUSH
85785: CALL 41972 0 6
// end ;
85789: PPOPN 7
85791: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
85792: CALL 19605 0 0
// end ;
85796: PPOPN 1
85798: END
