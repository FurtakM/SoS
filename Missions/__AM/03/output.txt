// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3454 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2668 0 0
// PrepareWesternBase ;
  41: CALL 2897 0 0
// Action ;
  45: CALL 5718 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty , vcount , tmpv ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
// uc_side := 4 ;
1157: LD_ADDR_OWVAR 20
1161: PUSH
1162: LD_INT 4
1164: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1165: LD_ADDR_EXP 46
1169: PUSH
1170: LD_STRING Powell
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: LD_STRING 
1178: PPUSH
1179: CALL 39027 0 3
1183: ST_TO_ADDR
// uc_side := 1 ;
1184: LD_ADDR_OWVAR 20
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// uc_nation := 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// if debug then
1200: LD_EXP 1
1204: IFFALSE 1550
// begin for i = 1 to 4 do
1206: LD_ADDR_VAR 0 2
1210: PUSH
1211: DOUBLE
1212: LD_INT 1
1214: DEC
1215: ST_TO_ADDR
1216: LD_INT 4
1218: PUSH
1219: FOR_TO
1220: IFFALSE 1271
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1222: LD_INT 0
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_INT 2
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL_OW 380
// un := CreateHuman ;
1243: LD_ADDR_VAR 0 3
1247: PUSH
1248: CALL_OW 44
1252: ST_TO_ADDR
// others := others ^ un ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_VAR 0 5
1262: PUSH
1263: LD_VAR 0 3
1267: ADD
1268: ST_TO_ADDR
// end ;
1269: GO 1219
1271: POP
1272: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1273: LD_ADDR_VAR 0 6
1277: PUSH
1278: LD_INT 21
1280: PUSH
1281: LD_INT 1
1283: PUSH
1284: LD_INT 1
1286: PUSH
1287: LD_INT 42
1289: PUSH
1290: LD_INT 0
1292: PUSH
1293: LD_INT 750
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 21
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 42
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 750
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: PUSH
1330: LD_INT 21
1332: PUSH
1333: LD_INT 1
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: LD_INT 42
1341: PUSH
1342: LD_INT 0
1344: PUSH
1345: LD_INT 750
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 42
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 750
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 21
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 44
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: LD_INT 750
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 21
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: LD_INT 43
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 750
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 21
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: LD_INT 43
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 750
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 21
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 43
1471: PUSH
1472: LD_INT 0
1474: PUSH
1475: LD_INT 750
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 21
1488: PUSH
1489: LD_INT 1
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: LD_INT 90
1500: PUSH
1501: LD_INT 504
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 51
1523: PUSH
1524: LD_INT 80
1526: PUSH
1527: LD_INT 750
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1550: LD_ADDR_EXP 37
1554: PUSH
1555: LD_STRING JMM
1557: PPUSH
1558: LD_EXP 1
1562: NOT
1563: PPUSH
1564: LD_EXP 3
1568: PPUSH
1569: CALL 39027 0 3
1573: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1574: LD_ADDR_EXP 38
1578: PUSH
1579: LD_STRING Bobby
1581: PPUSH
1582: LD_EXP 1
1586: NOT
1587: PPUSH
1588: LD_EXP 3
1592: PPUSH
1593: CALL 39027 0 3
1597: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1598: LD_ADDR_EXP 39
1602: PUSH
1603: LD_STRING Cyrus
1605: PPUSH
1606: LD_EXP 1
1610: NOT
1611: PPUSH
1612: LD_EXP 3
1616: PPUSH
1617: CALL 39027 0 3
1621: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1622: LD_ADDR_EXP 40
1626: PUSH
1627: LD_STRING Lisa
1629: PPUSH
1630: LD_EXP 1
1634: NOT
1635: PPUSH
1636: LD_EXP 3
1640: PPUSH
1641: CALL 39027 0 3
1645: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1646: LD_ADDR_EXP 41
1650: PUSH
1651: LD_STRING Khatam
1653: PPUSH
1654: LD_EXP 1
1658: NOT
1659: PPUSH
1660: LD_EXP 3
1664: PPUSH
1665: CALL 39027 0 3
1669: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1670: LD_ADDR_EXP 42
1674: PUSH
1675: LD_STRING Brian
1677: PPUSH
1678: LD_EXP 1
1682: NOT
1683: PPUSH
1684: LD_EXP 3
1688: PPUSH
1689: CALL 39027 0 3
1693: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1694: LD_ADDR_EXP 43
1698: PUSH
1699: LD_STRING Jerry
1701: PPUSH
1702: LD_EXP 1
1706: NOT
1707: PPUSH
1708: LD_EXP 3
1712: PPUSH
1713: CALL 39027 0 3
1717: ST_TO_ADDR
// if Bobby then
1718: LD_EXP 38
1722: IFFALSE 1753
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1724: LD_ADDR_VAR 0 4
1728: PUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: LD_VAR 0 4
1738: PUSH
1739: LD_INT 1
1741: PLUS
1742: PPUSH
1743: LD_EXP 38
1747: PPUSH
1748: CALL_OW 2
1752: ST_TO_ADDR
// if Cyrus then
1753: LD_EXP 39
1757: IFFALSE 1788
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_VAR 0 4
1773: PUSH
1774: LD_INT 1
1776: PLUS
1777: PPUSH
1778: LD_EXP 39
1782: PPUSH
1783: CALL_OW 2
1787: ST_TO_ADDR
// if Lisa then
1788: LD_EXP 40
1792: IFFALSE 1823
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: LD_VAR 0 4
1808: PUSH
1809: LD_INT 1
1811: PLUS
1812: PPUSH
1813: LD_EXP 40
1817: PPUSH
1818: CALL_OW 2
1822: ST_TO_ADDR
// if Khatam then
1823: LD_EXP 41
1827: IFFALSE 1858
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1829: LD_ADDR_VAR 0 4
1833: PUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: LD_VAR 0 4
1843: PUSH
1844: LD_INT 1
1846: PLUS
1847: PPUSH
1848: LD_EXP 41
1852: PPUSH
1853: CALL_OW 2
1857: ST_TO_ADDR
// if Brian then
1858: LD_EXP 42
1862: IFFALSE 1893
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1864: LD_ADDR_VAR 0 4
1868: PUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_VAR 0 4
1878: PUSH
1879: LD_INT 1
1881: PLUS
1882: PPUSH
1883: LD_EXP 42
1887: PPUSH
1888: CALL_OW 2
1892: ST_TO_ADDR
// if Jerry then
1893: LD_EXP 43
1897: IFFALSE 1928
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: PLUS
1917: PPUSH
1918: LD_EXP 43
1922: PPUSH
1923: CALL_OW 2
1927: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1928: LD_STRING 02_other_survivors
1930: PPUSH
1931: CALL_OW 28
1935: IFFALSE 1950
// others := CreateCharacterSet ( 02_other_survivors ) ;
1937: LD_ADDR_VAR 0 5
1941: PUSH
1942: LD_STRING 02_other_survivors
1944: PPUSH
1945: CALL_OW 31
1949: ST_TO_ADDR
// if others then
1950: LD_VAR 0 5
1954: IFFALSE 1979
// begin tmp := tmp ^ others ;
1956: LD_ADDR_VAR 0 4
1960: PUSH
1961: LD_VAR 0 4
1965: PUSH
1966: LD_VAR 0 5
1970: ADD
1971: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1972: LD_STRING 02_other_survivors
1974: PPUSH
1975: CALL_OW 40
// end ; jmm_units := tmp diff 0 ;
1979: LD_ADDR_EXP 4
1983: PUSH
1984: LD_VAR 0 4
1988: PUSH
1989: LD_INT 0
1991: DIFF
1992: ST_TO_ADDR
// if not vehicles then
1993: LD_VAR 0 6
1997: NOT
1998: IFFALSE 2015
// vehicles := LoadVariable ( 02_tanks_1 , [ ] ) ;
2000: LD_ADDR_VAR 0 6
2004: PUSH
2005: LD_STRING 02_tanks_1
2007: PPUSH
2008: EMPTY
2009: PPUSH
2010: CALL_OW 30
2014: ST_TO_ADDR
// if vehicles then
2015: LD_VAR 0 6
2019: IFFALSE 2387
// begin got_mech := false ;
2021: LD_ADDR_VAR 0 7
2025: PUSH
2026: LD_INT 0
2028: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
2029: LD_VAR 0 4
2033: PPUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 3
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 72
2048: IFFALSE 2058
// got_mech := true ;
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// vcount := Count ( vehicles ) ;
2058: LD_ADDR_VAR 0 9
2062: PUSH
2063: LD_VAR 0 6
2067: PPUSH
2068: CALL 41129 0 1
2072: ST_TO_ADDR
// if vcount > 1 then
2073: LD_VAR 0 9
2077: PUSH
2078: LD_INT 1
2080: GREATER
2081: IFFALSE 2184
// begin for i := 2 to vcount do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 2
2091: DEC
2092: ST_TO_ADDR
2093: LD_VAR 0 9
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2182
// if vehicles [ i ] [ 4 ] = ru_cargo_bay then
2101: LD_VAR 0 6
2105: PUSH
2106: LD_VAR 0 2
2110: ARRAY
2111: PUSH
2112: LD_INT 4
2114: ARRAY
2115: PUSH
2116: LD_INT 51
2118: EQUAL
2119: IFFALSE 2180
// begin tmpv := vehicles [ i ] ;
2121: LD_ADDR_VAR 0 10
2125: PUSH
2126: LD_VAR 0 6
2130: PUSH
2131: LD_VAR 0 2
2135: ARRAY
2136: ST_TO_ADDR
// vehicles := Delete ( vehicles , i ) ;
2137: LD_ADDR_VAR 0 6
2141: PUSH
2142: LD_VAR 0 6
2146: PPUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 3
2156: ST_TO_ADDR
// vehicles := Insert ( vehicles , 1 , tmpv ) ;
2157: LD_ADDR_VAR 0 6
2161: PUSH
2162: LD_VAR 0 6
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_VAR 0 10
2174: PPUSH
2175: CALL_OW 2
2179: ST_TO_ADDR
// end ;
2180: GO 2098
2182: POP
2183: POP
// end ; if vcount > 6 then
2184: LD_VAR 0 9
2188: PUSH
2189: LD_INT 6
2191: GREATER
2192: IFFALSE 2202
// vcount := 6 ;
2194: LD_ADDR_VAR 0 9
2198: PUSH
2199: LD_INT 6
2201: ST_TO_ADDR
// if jmm_units + 1 < vcount then
2202: LD_EXP 4
2206: PUSH
2207: LD_INT 1
2209: PLUS
2210: PUSH
2211: LD_VAR 0 9
2215: LESS
2216: IFFALSE 2232
// vcount := jmm_units + 1 ;
2218: LD_ADDR_VAR 0 9
2222: PUSH
2223: LD_EXP 4
2227: PUSH
2228: LD_INT 1
2230: PLUS
2231: ST_TO_ADDR
// for i := 1 to vcount do
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: DOUBLE
2238: LD_INT 1
2240: DEC
2241: ST_TO_ADDR
2242: LD_VAR 0 9
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2385
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 3
2260: PPUSH
2261: LD_VAR 0 6
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: LD_VAR 0 6
2280: PUSH
2281: LD_VAR 0 2
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_VAR 0 6
2295: PUSH
2296: LD_VAR 0 2
2300: ARRAY
2301: PUSH
2302: LD_INT 3
2304: ARRAY
2305: PPUSH
2306: LD_VAR 0 6
2310: PUSH
2311: LD_VAR 0 2
2315: ARRAY
2316: PUSH
2317: LD_INT 4
2319: ARRAY
2320: PPUSH
2321: LD_INT 40
2323: PPUSH
2324: CALL 497 0 7
2328: ST_TO_ADDR
// if not got_mech then
2329: LD_VAR 0 7
2333: NOT
2334: IFFALSE 2360
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_VAR 0 6
2345: PUSH
2346: LD_VAR 0 2
2350: ARRAY
2351: PUSH
2352: LD_INT 6
2354: ARRAY
2355: PPUSH
2356: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: LD_VAR 0 3
2377: PPUSH
2378: CALL_OW 2
2382: ST_TO_ADDR
// end ;
2383: GO 2247
2385: POP
2386: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
2387: LD_EXP 37
2391: PPUSH
2392: LD_INT 194
2394: PPUSH
2395: LD_INT 119
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 48
// if tmp then
2405: LD_VAR 0 4
2409: IFFALSE 2597
// begin for i in tmp do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_VAR 0 4
2420: PUSH
2421: FOR_IN
2422: IFFALSE 2595
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL_OW 257
2433: PUSH
2434: LD_INT 1
2436: NONEQUAL
2437: PUSH
2438: LD_VAR 0 2
2442: PUSH
2443: LD_EXP 41
2447: NONEQUAL
2448: AND
2449: IFFALSE 2463
// SetClass ( i , 1 ) ;
2451: LD_VAR 0 2
2455: PPUSH
2456: LD_INT 1
2458: PPUSH
2459: CALL_OW 336
// if i = Khatam then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_EXP 41
2472: EQUAL
2473: IFFALSE 2487
// SetClass ( i , 4 ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 4
2482: PPUSH
2483: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2487: LD_ADDR_VAR 0 8
2491: PUSH
2492: LD_INT 22
2494: PUSH
2495: LD_INT 1
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 21
2504: PUSH
2505: LD_INT 2
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 58
2514: PUSH
2515: EMPTY
2516: LIST
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2528: LD_VAR 0 2
2532: PPUSH
2533: CALL_OW 247
2537: PUSH
2538: LD_INT 1
2540: EQUAL
2541: PUSH
2542: LD_VAR 0 8
2546: AND
2547: IFFALSE 2569
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2549: LD_VAR 0 2
2553: PPUSH
2554: LD_VAR 0 8
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PPUSH
2563: CALL_OW 52
2567: GO 2584
// PlaceUnitArea ( i , startArea , false ) ;
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 0
2579: PPUSH
2580: CALL_OW 49
// ComHold ( i ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: CALL_OW 140
// end ;
2593: GO 2421
2595: POP
2596: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2597: LD_ADDR_EXP 7
2601: PUSH
2602: LD_STRING 02_mikhailStatus_1
2604: PPUSH
2605: LD_INT 0
2607: PPUSH
2608: CALL_OW 30
2612: ST_TO_ADDR
// if not bierezov_exist and not debug then
2613: LD_EXP 7
2617: NOT
2618: PUSH
2619: LD_EXP 1
2623: NOT
2624: AND
2625: IFFALSE 2629
// exit ;
2627: GO 2663
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2629: LD_ADDR_EXP 45
2633: PUSH
2634: LD_STRING Mikhail
2636: PPUSH
2637: LD_INT 0
2639: PPUSH
2640: LD_STRING 
2642: PPUSH
2643: CALL 39027 0 3
2647: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2648: LD_EXP 45
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 49
// end ;
2663: LD_VAR 0 1
2667: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
2673: PPUSH
// uc_side := 4 ;
2674: LD_ADDR_OWVAR 20
2678: PUSH
2679: LD_INT 4
2681: ST_TO_ADDR
// uc_nation := 1 ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 1
2689: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2690: LD_ADDR_EXP 44
2694: PUSH
2695: LD_STRING Cornell
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: LD_STRING 
2703: PPUSH
2704: CALL 39027 0 3
2708: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2709: LD_ADDR_EXP 6
2713: PUSH
2714: LD_INT 9
2716: PUSH
2717: LD_EXP 4
2721: MINUS
2722: ST_TO_ADDR
// tmp := [ ] ;
2723: LD_ADDR_VAR 0 2
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// if cornel_units < 4 then
2730: LD_EXP 6
2734: PUSH
2735: LD_INT 4
2737: LESS
2738: IFFALSE 2748
// cornel_units := 4 ;
2740: LD_ADDR_EXP 6
2744: PUSH
2745: LD_INT 4
2747: ST_TO_ADDR
// for i = 1 to cornel_units do
2748: LD_ADDR_VAR 0 4
2752: PUSH
2753: DOUBLE
2754: LD_INT 1
2756: DEC
2757: ST_TO_ADDR
2758: LD_EXP 6
2762: PUSH
2763: FOR_TO
2764: IFFALSE 2862
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2766: LD_INT 0
2768: PPUSH
2769: LD_INT 1
2771: PUSH
2772: LD_INT 1
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: LD_INT 4
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: PUSH
2791: LD_VAR 0 4
2795: PUSH
2796: LD_INT 5
2798: MOD
2799: PUSH
2800: LD_INT 1
2802: PLUS
2803: ARRAY
2804: PPUSH
2805: LD_INT 2
2807: PPUSH
2808: CALL_OW 380
// un := CreateHuman ;
2812: LD_ADDR_VAR 0 3
2816: PUSH
2817: CALL_OW 44
2821: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2822: LD_ADDR_VAR 0 2
2826: PUSH
2827: LD_VAR 0 2
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: LD_VAR 0 3
2839: PPUSH
2840: CALL_OW 2
2844: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2845: LD_VAR 0 3
2849: PPUSH
2850: LD_INT 2
2852: PPUSH
2853: LD_INT 0
2855: PPUSH
2856: CALL_OW 49
// end ;
2860: GO 2763
2862: POP
2863: POP
// cornel_units := tmp ;
2864: LD_ADDR_EXP 6
2868: PUSH
2869: LD_VAR 0 2
2873: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2874: LD_EXP 44
2878: PPUSH
2879: LD_INT 191
2881: PPUSH
2882: LD_INT 106
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 48
// end ;
2892: LD_VAR 0 1
2896: RET
// export function PrepareWesternBase ; var i ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
// uc_side := 8 ;
2901: LD_ADDR_OWVAR 20
2905: PUSH
2906: LD_INT 8
2908: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2909: LD_ADDR_EXP 47
2913: PUSH
2914: LD_STRING Lynch
2916: PPUSH
2917: LD_INT 0
2919: PPUSH
2920: LD_STRING 
2922: PPUSH
2923: CALL 39027 0 3
2927: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2928: LD_ADDR_EXP 48
2932: PUSH
2933: LD_STRING Walker
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: LD_STRING 
2941: PPUSH
2942: CALL 39027 0 3
2946: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2947: LD_ADDR_EXP 49
2951: PUSH
2952: LD_STRING Turner
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: LD_STRING 
2960: PPUSH
2961: CALL 39027 0 3
2965: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2966: LD_ADDR_EXP 50
2970: PUSH
2971: LD_STRING Jillian
2973: PPUSH
2974: LD_INT 0
2976: PPUSH
2977: LD_STRING 
2979: PPUSH
2980: CALL 39027 0 3
2984: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: LD_EXP 47
2994: PUSH
2995: LD_EXP 48
2999: PUSH
3000: LD_EXP 49
3004: PUSH
3005: LD_EXP 50
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: FOR_IN
3017: IFFALSE 3045
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 3
3026: PPUSH
3027: LD_INT 0
3029: PPUSH
3030: CALL_OW 49
// ComHold ( i ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: CALL_OW 140
// end ;
3043: GO 3016
3045: POP
3046: POP
// end ;
3047: LD_VAR 0 1
3051: RET
// export function SelectGroup ; var units , selected , i ; begin
3052: LD_INT 0
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
3058: LD_ADDR_VAR 0 2
3062: PUSH
3063: LD_EXP 37
3067: PUSH
3068: LD_INT -3
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: LD_EXP 4
3079: ADD
3080: PUSH
3081: LD_INT -2
3083: PUSH
3084: LD_INT -4
3086: PUSH
3087: LD_EXP 44
3091: PUSH
3092: LD_EXP 45
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: ADD
3103: PUSH
3104: LD_INT -3
3106: PUSH
3107: EMPTY
3108: LIST
3109: ADD
3110: PUSH
3111: LD_EXP 6
3115: ADD
3116: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
3117: LD_ADDR_VAR 0 3
3121: PUSH
3122: LD_EXP 37
3126: PUSH
3127: LD_STRING Select four characters to go with you
3129: PPUSH
3130: LD_INT 4
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: LD_VAR 0 2
3140: PPUSH
3141: EMPTY
3142: PPUSH
3143: CALL_OW 42
3147: ADD
3148: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
3149: LD_ADDR_EXP 6
3153: PUSH
3154: LD_EXP 4
3158: PUSH
3159: LD_EXP 6
3163: UNION
3164: PUSH
3165: LD_VAR 0 3
3169: DIFF
3170: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
3171: LD_ADDR_VAR 0 4
3175: PUSH
3176: LD_EXP 6
3180: PUSH
3181: LD_EXP 45
3185: ADD
3186: PUSH
3187: FOR_IN
3188: IFFALSE 3219
// if GetSide ( i ) = 1 then
3190: LD_VAR 0 4
3194: PPUSH
3195: CALL_OW 255
3199: PUSH
3200: LD_INT 1
3202: EQUAL
3203: IFFALSE 3217
// SetSide ( i , 4 ) ;
3205: LD_VAR 0 4
3209: PPUSH
3210: LD_INT 4
3212: PPUSH
3213: CALL_OW 235
3217: GO 3187
3219: POP
3220: POP
// for i in selected do
3221: LD_ADDR_VAR 0 4
3225: PUSH
3226: LD_VAR 0 3
3230: PUSH
3231: FOR_IN
3232: IFFALSE 3263
// if GetSide ( i ) = 4 then
3234: LD_VAR 0 4
3238: PPUSH
3239: CALL_OW 255
3243: PUSH
3244: LD_INT 4
3246: EQUAL
3247: IFFALSE 3261
// SetSide ( i , 1 ) ;
3249: LD_VAR 0 4
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: CALL_OW 235
3261: GO 3231
3263: POP
3264: POP
// jmm_units := jmm_units diff cornel_units ;
3265: LD_ADDR_EXP 4
3269: PUSH
3270: LD_EXP 4
3274: PUSH
3275: LD_EXP 6
3279: DIFF
3280: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
3281: LD_EXP 38
3285: PPUSH
3286: CALL_OW 255
3290: PUSH
3291: LD_INT 4
3293: EQUAL
3294: IFFALSE 3309
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
3296: LD_EXP 3
3300: PUSH
3301: LD_STRING Bobby
3303: STR
3304: PPUSH
3305: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
3309: LD_EXP 39
3313: PPUSH
3314: CALL_OW 255
3318: PUSH
3319: LD_INT 4
3321: EQUAL
3322: IFFALSE 3337
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
3324: LD_EXP 3
3328: PUSH
3329: LD_STRING Cyrus
3331: STR
3332: PPUSH
3333: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
3337: LD_EXP 40
3341: PPUSH
3342: CALL_OW 255
3346: PUSH
3347: LD_INT 4
3349: EQUAL
3350: IFFALSE 3365
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
3352: LD_EXP 3
3356: PUSH
3357: LD_STRING Lisa
3359: STR
3360: PPUSH
3361: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
3365: LD_EXP 41
3369: PPUSH
3370: CALL_OW 255
3374: PUSH
3375: LD_INT 4
3377: EQUAL
3378: IFFALSE 3393
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
3380: LD_EXP 3
3384: PUSH
3385: LD_STRING Khatam
3387: STR
3388: PPUSH
3389: CALL_OW 40
// if GetSide ( Brian ) = 4 then
3393: LD_EXP 42
3397: PPUSH
3398: CALL_OW 255
3402: PUSH
3403: LD_INT 4
3405: EQUAL
3406: IFFALSE 3421
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3408: LD_EXP 3
3412: PUSH
3413: LD_STRING Brian
3415: STR
3416: PPUSH
3417: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3421: LD_EXP 43
3425: PPUSH
3426: CALL_OW 255
3430: PUSH
3431: LD_INT 4
3433: EQUAL
3434: IFFALSE 3449
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3436: LD_EXP 3
3440: PUSH
3441: LD_STRING Jerry
3443: STR
3444: PPUSH
3445: CALL_OW 40
// end ; end_of_file
3449: LD_VAR 0 1
3453: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3454: LD_INT 0
3456: PPUSH
3457: PPUSH
3458: PPUSH
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
// ru_alert := false ;
3469: LD_ADDR_EXP 60
3473: PUSH
3474: LD_INT 0
3476: ST_TO_ADDR
// ru_produce_list := [ ] ;
3477: LD_ADDR_EXP 57
3481: PUSH
3482: EMPTY
3483: ST_TO_ADDR
// if Difficulty > 1 then
3484: LD_OWVAR 67
3488: PUSH
3489: LD_INT 1
3491: GREATER
3492: IFFALSE 3580
// begin uc_side := 3 ;
3494: LD_ADDR_OWVAR 20
3498: PUSH
3499: LD_INT 3
3501: ST_TO_ADDR
// uc_nation := 3 ;
3502: LD_ADDR_OWVAR 21
3506: PUSH
3507: LD_INT 3
3509: ST_TO_ADDR
// bc_type := b_breastwork ;
3510: LD_ADDR_OWVAR 42
3514: PUSH
3515: LD_INT 31
3517: ST_TO_ADDR
// bc_level := Difficulty ;
3518: LD_ADDR_OWVAR 43
3522: PUSH
3523: LD_OWVAR 67
3527: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3528: LD_INT 22
3530: PPUSH
3531: LD_INT 14
3533: PPUSH
3534: LD_INT 0
3536: PPUSH
3537: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3541: LD_INT 48
3543: PPUSH
3544: LD_INT 46
3546: PPUSH
3547: LD_INT 0
3549: PPUSH
3550: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3554: LD_INT 86
3556: PPUSH
3557: LD_INT 65
3559: PPUSH
3560: LD_INT 5
3562: PPUSH
3563: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3567: LD_INT 165
3569: PPUSH
3570: LD_INT 73
3572: PPUSH
3573: LD_INT 5
3575: PPUSH
3576: CALL_OW 47
// end ; if Difficulty >= 3 then
3580: LD_OWVAR 67
3584: PUSH
3585: LD_INT 3
3587: GREATEREQUAL
3588: IFFALSE 3603
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3590: LD_INT 51
3592: PPUSH
3593: LD_INT 3
3595: PPUSH
3596: LD_INT 2
3598: PPUSH
3599: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3603: LD_ADDR_VAR 0 7
3607: PUSH
3608: LD_INT 22
3610: PUSH
3611: LD_INT 3
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: PUSH
3618: LD_INT 2
3620: PUSH
3621: LD_INT 30
3623: PUSH
3624: LD_INT 31
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: PUSH
3631: LD_INT 30
3633: PUSH
3634: LD_INT 32
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: LIST
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: PPUSH
3650: CALL_OW 69
3654: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3655: LD_ADDR_VAR 0 8
3659: PUSH
3660: LD_INT 22
3662: PUSH
3663: LD_INT 3
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: PUSH
3670: LD_INT 30
3672: PUSH
3673: LD_INT 4
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: PUSH
3680: EMPTY
3681: LIST
3682: LIST
3683: PPUSH
3684: CALL_OW 69
3688: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3689: LD_ADDR_VAR 0 10
3693: PUSH
3694: LD_INT 22
3696: PUSH
3697: LD_INT 3
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PUSH
3704: LD_INT 30
3706: PUSH
3707: LD_INT 3
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PPUSH
3718: CALL_OW 69
3722: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3723: LD_ADDR_VAR 0 9
3727: PUSH
3728: LD_INT 22
3730: PUSH
3731: LD_INT 3
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PUSH
3738: LD_INT 30
3740: PUSH
3741: LD_INT 6
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: PUSH
3748: EMPTY
3749: LIST
3750: LIST
3751: PPUSH
3752: CALL_OW 69
3756: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3757: LD_ADDR_VAR 0 2
3761: PUSH
3762: LD_INT 22
3764: PUSH
3765: LD_INT 3
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: PUSH
3772: LD_INT 30
3774: PUSH
3775: LD_INT 1
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PPUSH
3786: CALL_OW 69
3790: PUSH
3791: FOR_IN
3792: IFFALSE 3836
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3794: LD_VAR 0 2
3798: PPUSH
3799: CALL_OW 274
3803: PPUSH
3804: LD_INT 1
3806: PPUSH
3807: LD_INT 1000
3809: PPUSH
3810: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3814: LD_VAR 0 2
3818: PPUSH
3819: CALL_OW 274
3823: PPUSH
3824: LD_INT 2
3826: PPUSH
3827: LD_INT 300
3829: PPUSH
3830: CALL_OW 277
// end ;
3834: GO 3791
3836: POP
3837: POP
// uc_side := 3 ;
3838: LD_ADDR_OWVAR 20
3842: PUSH
3843: LD_INT 3
3845: ST_TO_ADDR
// uc_nation := 3 ;
3846: LD_ADDR_OWVAR 21
3850: PUSH
3851: LD_INT 3
3853: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3854: LD_ADDR_VAR 0 11
3858: PUSH
3859: LD_INT 2
3861: PUSH
3862: LD_INT 3
3864: PUSH
3865: LD_INT 4
3867: PUSH
3868: LD_INT 4
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: PUSH
3877: LD_OWVAR 67
3881: ARRAY
3882: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3883: LD_ADDR_EXP 52
3887: PUSH
3888: LD_STRING Pokryshkin
3890: PPUSH
3891: LD_INT 0
3893: PPUSH
3894: LD_STRING 
3896: PPUSH
3897: CALL 39027 0 3
3901: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3902: LD_EXP 52
3906: PPUSH
3907: LD_INT 63
3909: PPUSH
3910: LD_INT 21
3912: PPUSH
3913: LD_INT 0
3915: PPUSH
3916: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3920: LD_EXP 52
3924: PPUSH
3925: CALL_OW 140
// InitHc ;
3929: CALL_OW 19
// for i in fac do
3933: LD_ADDR_VAR 0 2
3937: PUSH
3938: LD_VAR 0 10
3942: PUSH
3943: FOR_IN
3944: IFFALSE 3997
// begin for j = 1 to 6 do
3946: LD_ADDR_VAR 0 3
3950: PUSH
3951: DOUBLE
3952: LD_INT 1
3954: DEC
3955: ST_TO_ADDR
3956: LD_INT 6
3958: PUSH
3959: FOR_TO
3960: IFFALSE 3993
// begin PrepareHuman ( false , 3 , skill ) ;
3962: LD_INT 0
3964: PPUSH
3965: LD_INT 3
3967: PPUSH
3968: LD_VAR 0 11
3972: PPUSH
3973: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3977: CALL_OW 44
3981: PPUSH
3982: LD_VAR 0 2
3986: PPUSH
3987: CALL_OW 52
// end ;
3991: GO 3959
3993: POP
3994: POP
// end ;
3995: GO 3943
3997: POP
3998: POP
// for i in lab do
3999: LD_ADDR_VAR 0 2
4003: PUSH
4004: LD_VAR 0 9
4008: PUSH
4009: FOR_IN
4010: IFFALSE 4043
// begin PrepareHuman ( false , 4 , skill ) ;
4012: LD_INT 0
4014: PPUSH
4015: LD_INT 4
4017: PPUSH
4018: LD_VAR 0 11
4022: PPUSH
4023: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4027: CALL_OW 44
4031: PPUSH
4032: LD_VAR 0 2
4036: PPUSH
4037: CALL_OW 52
// end ;
4041: GO 4009
4043: POP
4044: POP
// for i in tw do
4045: LD_ADDR_VAR 0 2
4049: PUSH
4050: LD_VAR 0 7
4054: PUSH
4055: FOR_IN
4056: IFFALSE 4105
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
4058: LD_VAR 0 2
4062: PPUSH
4063: LD_INT 42
4065: PUSH
4066: LD_INT 43
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PUSH
4073: LD_INT 1
4075: PPUSH
4076: LD_INT 2
4078: PPUSH
4079: CALL_OW 12
4083: ARRAY
4084: PPUSH
4085: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
4089: LD_VAR 0 11
4093: PPUSH
4094: LD_VAR 0 2
4098: PPUSH
4099: CALL 775 0 2
// end ;
4103: GO 4055
4105: POP
4106: POP
// for i in bar do
4107: LD_ADDR_VAR 0 2
4111: PUSH
4112: LD_VAR 0 8
4116: PUSH
4117: FOR_IN
4118: IFFALSE 4151
// begin PrepareHuman ( false , 1 , skill ) ;
4120: LD_INT 0
4122: PPUSH
4123: LD_INT 1
4125: PPUSH
4126: LD_VAR 0 11
4130: PPUSH
4131: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4135: CALL_OW 44
4139: PPUSH
4140: LD_VAR 0 2
4144: PPUSH
4145: CALL_OW 52
// end ;
4149: GO 4117
4151: POP
4152: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
4153: LD_ADDR_VAR 0 13
4157: PUSH
4158: LD_INT 100
4160: PUSH
4161: LD_INT 9
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PUSH
4168: LD_INT 135
4170: PUSH
4171: LD_INT 60
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PUSH
4178: LD_INT 41
4180: PUSH
4181: LD_INT 6
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 22
4190: PUSH
4191: LD_INT 9
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 84
4200: PUSH
4201: LD_INT 14
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: ST_TO_ADDR
// vehicles := [ ] ;
4215: LD_ADDR_VAR 0 12
4219: PUSH
4220: EMPTY
4221: ST_TO_ADDR
// for i in spot_xy do
4222: LD_ADDR_VAR 0 2
4226: PUSH
4227: LD_VAR 0 13
4231: PUSH
4232: FOR_IN
4233: IFFALSE 4391
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
4235: LD_ADDR_VAR 0 6
4239: PUSH
4240: LD_INT 3
4242: PPUSH
4243: LD_INT 3
4245: PPUSH
4246: LD_INT 22
4248: PPUSH
4249: LD_INT 1
4251: PPUSH
4252: LD_INT 1
4254: PPUSH
4255: LD_INT 42
4257: PUSH
4258: LD_INT 43
4260: PUSH
4261: LD_INT 44
4263: PUSH
4264: EMPTY
4265: LIST
4266: LIST
4267: LIST
4268: PUSH
4269: LD_INT 1
4271: PPUSH
4272: LD_INT 3
4274: PPUSH
4275: CALL_OW 12
4279: ARRAY
4280: PPUSH
4281: LD_INT 100
4283: PPUSH
4284: CALL 497 0 7
4288: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
4289: LD_ADDR_VAR 0 12
4293: PUSH
4294: LD_VAR 0 12
4298: PPUSH
4299: LD_VAR 0 12
4303: PUSH
4304: LD_INT 1
4306: PLUS
4307: PPUSH
4308: LD_VAR 0 6
4312: PPUSH
4313: CALL_OW 2
4317: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4318: LD_VAR 0 6
4322: PPUSH
4323: LD_INT 3
4325: PPUSH
4326: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
4330: LD_VAR 0 6
4334: PPUSH
4335: LD_VAR 0 2
4339: PUSH
4340: LD_INT 1
4342: ARRAY
4343: PPUSH
4344: LD_VAR 0 2
4348: PUSH
4349: LD_INT 2
4351: ARRAY
4352: PPUSH
4353: LD_INT 0
4355: PPUSH
4356: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
4360: LD_INT 0
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: LD_VAR 0 11
4370: PPUSH
4371: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4375: CALL_OW 44
4379: PPUSH
4380: LD_VAR 0 6
4384: PPUSH
4385: CALL_OW 52
// end ;
4389: GO 4232
4391: POP
4392: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
4393: LD_ADDR_VAR 0 2
4397: PUSH
4398: DOUBLE
4399: LD_INT 1
4401: DEC
4402: ST_TO_ADDR
4403: LD_INT 5
4405: PUSH
4406: LD_INT 7
4408: PUSH
4409: LD_INT 8
4411: PUSH
4412: LD_INT 9
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: PUSH
4421: LD_OWVAR 67
4425: ARRAY
4426: PUSH
4427: FOR_TO
4428: IFFALSE 4488
// begin PrepareHuman ( false , 1 , skill ) ;
4430: LD_INT 0
4432: PPUSH
4433: LD_INT 1
4435: PPUSH
4436: LD_VAR 0 11
4440: PPUSH
4441: CALL_OW 380
// un := CreateHuman ;
4445: LD_ADDR_VAR 0 5
4449: PUSH
4450: CALL_OW 44
4454: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4455: LD_VAR 0 5
4459: PPUSH
4460: LD_INT 11
4462: PPUSH
4463: LD_INT 0
4465: PPUSH
4466: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4470: LD_ADDR_EXP 55
4474: PUSH
4475: LD_EXP 55
4479: PUSH
4480: LD_VAR 0 5
4484: ADD
4485: ST_TO_ADDR
// end ;
4486: GO 4427
4488: POP
4489: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4490: LD_ADDR_VAR 0 2
4494: PUSH
4495: DOUBLE
4496: LD_INT 1
4498: DEC
4499: ST_TO_ADDR
4500: LD_INT 2
4502: PUSH
4503: LD_INT 3
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: LD_INT 5
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: PUSH
4518: LD_OWVAR 67
4522: ARRAY
4523: PUSH
4524: FOR_TO
4525: IFFALSE 4585
// begin PrepareHuman ( false , 1 , skill ) ;
4527: LD_INT 0
4529: PPUSH
4530: LD_INT 1
4532: PPUSH
4533: LD_VAR 0 11
4537: PPUSH
4538: CALL_OW 380
// un := CreateHuman ;
4542: LD_ADDR_VAR 0 5
4546: PUSH
4547: CALL_OW 44
4551: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4552: LD_VAR 0 5
4556: PPUSH
4557: LD_INT 12
4559: PPUSH
4560: LD_INT 0
4562: PPUSH
4563: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4567: LD_ADDR_EXP 53
4571: PUSH
4572: LD_EXP 53
4576: PUSH
4577: LD_VAR 0 5
4581: ADD
4582: ST_TO_ADDR
// end ;
4583: GO 4524
4585: POP
4586: POP
// for i = 1 to 2 do
4587: LD_ADDR_VAR 0 2
4591: PUSH
4592: DOUBLE
4593: LD_INT 1
4595: DEC
4596: ST_TO_ADDR
4597: LD_INT 2
4599: PUSH
4600: FOR_TO
4601: IFFALSE 4667
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4603: LD_INT 1
4605: PPUSH
4606: LD_INT 1
4608: PPUSH
4609: LD_VAR 0 11
4613: PPUSH
4614: CALL_OW 380
// un := CreateHuman ;
4618: LD_ADDR_VAR 0 5
4622: PUSH
4623: CALL_OW 44
4627: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4628: LD_VAR 0 5
4632: PPUSH
4633: LD_INT 39
4635: PPUSH
4636: LD_INT 12
4638: PPUSH
4639: LD_INT 3
4641: PPUSH
4642: LD_INT 0
4644: PPUSH
4645: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4649: LD_ADDR_EXP 54
4653: PUSH
4654: LD_EXP 54
4658: PUSH
4659: LD_VAR 0 5
4663: ADD
4664: ST_TO_ADDR
// end ;
4665: GO 4600
4667: POP
4668: POP
// for i = 1 to 3 do
4669: LD_ADDR_VAR 0 2
4673: PUSH
4674: DOUBLE
4675: LD_INT 1
4677: DEC
4678: ST_TO_ADDR
4679: LD_INT 3
4681: PUSH
4682: FOR_TO
4683: IFFALSE 4749
// begin PrepareHuman ( false , 1 , skill ) ;
4685: LD_INT 0
4687: PPUSH
4688: LD_INT 1
4690: PPUSH
4691: LD_VAR 0 11
4695: PPUSH
4696: CALL_OW 380
// un := CreateHuman ;
4700: LD_ADDR_VAR 0 5
4704: PUSH
4705: CALL_OW 44
4709: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4710: LD_VAR 0 5
4714: PPUSH
4715: LD_INT 180
4717: PPUSH
4718: LD_INT 11
4720: PPUSH
4721: LD_INT 4
4723: PPUSH
4724: LD_INT 0
4726: PPUSH
4727: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4731: LD_ADDR_EXP 58
4735: PUSH
4736: LD_EXP 58
4740: PUSH
4741: LD_VAR 0 5
4745: ADD
4746: ST_TO_ADDR
// end ;
4747: GO 4682
4749: POP
4750: POP
// ru_vehicles := vehicles ;
4751: LD_ADDR_EXP 56
4755: PUSH
4756: LD_VAR 0 12
4760: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4761: LD_ADDR_EXP 59
4765: PUSH
4766: LD_INT 131
4768: PUSH
4769: LD_INT 121
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: LD_INT 113
4778: PUSH
4779: LD_INT 90
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 93
4788: PUSH
4789: LD_INT 62
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: LIST
4800: PUSH
4801: LD_INT 106
4803: PUSH
4804: LD_INT 54
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PUSH
4811: LD_INT 120
4813: PUSH
4814: LD_INT 80
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PUSH
4821: LD_INT 143
4823: PUSH
4824: LD_INT 120
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 154
4838: PUSH
4839: LD_INT 116
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: LD_INT 140
4848: PUSH
4849: LD_INT 93
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 130
4858: PUSH
4859: LD_INT 58
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: LIST
4870: PUSH
4871: LD_INT 105
4873: PUSH
4874: LD_INT 106
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 134
4883: PUSH
4884: LD_INT 98
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 159
4893: PUSH
4894: LD_INT 113
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: LIST
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: ST_TO_ADDR
// if Difficulty = 1 then
4912: LD_OWVAR 67
4916: PUSH
4917: LD_INT 1
4919: EQUAL
4920: IFFALSE 4924
// exit ;
4922: GO 4979
// for i = 1 to Difficulty - 1 do
4924: LD_ADDR_VAR 0 2
4928: PUSH
4929: DOUBLE
4930: LD_INT 1
4932: DEC
4933: ST_TO_ADDR
4934: LD_OWVAR 67
4938: PUSH
4939: LD_INT 1
4941: MINUS
4942: PUSH
4943: FOR_TO
4944: IFFALSE 4977
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
4946: LD_ADDR_EXP 57
4950: PUSH
4951: LD_EXP 57
4955: PUSH
4956: LD_INT 22
4958: PUSH
4959: LD_INT 1
4961: PUSH
4962: LD_INT 1
4964: PUSH
4965: LD_INT 43
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: ADD
4974: ST_TO_ADDR
4975: GO 4943
4977: POP
4978: POP
// end ;
4979: LD_VAR 0 1
4983: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
4984: LD_INT 22
4986: PUSH
4987: LD_INT 3
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: PUSH
4994: LD_INT 21
4996: PUSH
4997: LD_INT 2
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PPUSH
5008: CALL_OW 69
5012: IFFALSE 5106
5014: GO 5016
5016: DISABLE
5017: LD_INT 0
5019: PPUSH
5020: PPUSH
// begin enable ;
5021: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
5022: LD_ADDR_VAR 0 2
5026: PUSH
5027: LD_INT 22
5029: PUSH
5030: LD_INT 3
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: PUSH
5037: LD_INT 21
5039: PUSH
5040: LD_INT 2
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: PPUSH
5051: CALL_OW 69
5055: ST_TO_ADDR
// if filter then
5056: LD_VAR 0 2
5060: IFFALSE 5106
// for i in filter do
5062: LD_ADDR_VAR 0 1
5066: PUSH
5067: LD_VAR 0 2
5071: PUSH
5072: FOR_IN
5073: IFFALSE 5104
// if GetFuel ( i ) < 20 then
5075: LD_VAR 0 1
5079: PPUSH
5080: CALL_OW 261
5084: PUSH
5085: LD_INT 20
5087: LESS
5088: IFFALSE 5102
// SetFuel ( i , 20 ) ;
5090: LD_VAR 0 1
5094: PPUSH
5095: LD_INT 20
5097: PPUSH
5098: CALL_OW 240
5102: GO 5072
5104: POP
5105: POP
// end ;
5106: PPOPN 2
5108: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
5109: LD_EXP 57
5113: IFFALSE 5332
5115: GO 5117
5117: DISABLE
5118: LD_INT 0
5120: PPUSH
5121: PPUSH
5122: PPUSH
// begin enable ;
5123: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
5124: LD_ADDR_VAR 0 2
5128: PUSH
5129: LD_INT 22
5131: PUSH
5132: LD_INT 3
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PUSH
5139: LD_INT 30
5141: PUSH
5142: LD_INT 3
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: PPUSH
5153: CALL_OW 69
5157: ST_TO_ADDR
// can_produce := [ ] ;
5158: LD_ADDR_VAR 0 3
5162: PUSH
5163: EMPTY
5164: ST_TO_ADDR
// if not fac then
5165: LD_VAR 0 2
5169: NOT
5170: IFFALSE 5175
// begin disable ;
5172: DISABLE
// exit ;
5173: GO 5332
// end ; for i in fac do
5175: LD_ADDR_VAR 0 1
5179: PUSH
5180: LD_VAR 0 2
5184: PUSH
5185: FOR_IN
5186: IFFALSE 5224
// if UnitsInside ( i ) then
5188: LD_VAR 0 1
5192: PPUSH
5193: CALL_OW 313
5197: IFFALSE 5222
// can_produce := Insert ( can_produce , 1 , i ) ;
5199: LD_ADDR_VAR 0 3
5203: PUSH
5204: LD_VAR 0 3
5208: PPUSH
5209: LD_INT 1
5211: PPUSH
5212: LD_VAR 0 1
5216: PPUSH
5217: CALL_OW 2
5221: ST_TO_ADDR
5222: GO 5185
5224: POP
5225: POP
// if not can_produce then
5226: LD_VAR 0 3
5230: NOT
5231: IFFALSE 5235
// exit ;
5233: GO 5332
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
5235: LD_VAR 0 3
5239: PUSH
5240: LD_INT 1
5242: PPUSH
5243: LD_VAR 0 3
5247: PPUSH
5248: CALL_OW 12
5252: ARRAY
5253: PPUSH
5254: LD_EXP 57
5258: PUSH
5259: LD_INT 1
5261: ARRAY
5262: PPUSH
5263: LD_EXP 57
5267: PUSH
5268: LD_INT 2
5270: ARRAY
5271: PPUSH
5272: LD_EXP 57
5276: PUSH
5277: LD_INT 3
5279: ARRAY
5280: PPUSH
5281: LD_EXP 57
5285: PUSH
5286: LD_INT 4
5288: ARRAY
5289: PPUSH
5290: CALL_OW 125
// for i = 1 to 4 do
5294: LD_ADDR_VAR 0 1
5298: PUSH
5299: DOUBLE
5300: LD_INT 1
5302: DEC
5303: ST_TO_ADDR
5304: LD_INT 4
5306: PUSH
5307: FOR_TO
5308: IFFALSE 5330
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
5310: LD_ADDR_EXP 57
5314: PUSH
5315: LD_EXP 57
5319: PPUSH
5320: LD_INT 1
5322: PPUSH
5323: CALL_OW 3
5327: ST_TO_ADDR
5328: GO 5307
5330: POP
5331: POP
// end ;
5332: PPOPN 3
5334: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
5335: LD_INT 0
5337: PPUSH
5338: PPUSH
5339: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5340: LD_ADDR_VAR 0 2
5344: PUSH
5345: DOUBLE
5346: LD_INT 1
5348: DEC
5349: ST_TO_ADDR
5350: LD_INT 2
5352: PUSH
5353: LD_INT 3
5355: PUSH
5356: LD_INT 4
5358: PUSH
5359: LD_INT 4
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: LD_OWVAR 67
5372: ARRAY
5373: PUSH
5374: FOR_TO
5375: IFFALSE 5524
// begin PrepareHuman ( false , 3 , 3 ) ;
5377: LD_INT 0
5379: PPUSH
5380: LD_INT 3
5382: PPUSH
5383: LD_INT 3
5385: PPUSH
5386: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
5390: LD_ADDR_VAR 0 3
5394: PUSH
5395: LD_INT 3
5397: PPUSH
5398: LD_INT 3
5400: PPUSH
5401: LD_INT 22
5403: PPUSH
5404: LD_INT 1
5406: PPUSH
5407: LD_INT 1
5409: PPUSH
5410: LD_INT 43
5412: PUSH
5413: LD_INT 42
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: PUSH
5420: LD_INT 1
5422: PPUSH
5423: LD_INT 2
5425: PPUSH
5426: CALL_OW 12
5430: ARRAY
5431: PPUSH
5432: LD_INT 70
5434: PPUSH
5435: CALL 497 0 7
5439: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5440: LD_VAR 0 3
5444: PPUSH
5445: LD_INT 4
5447: PPUSH
5448: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5452: LD_VAR 0 3
5456: PPUSH
5457: LD_INT 229
5459: PPUSH
5460: LD_INT 44
5462: PPUSH
5463: LD_INT 0
5465: PPUSH
5466: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5470: CALL_OW 44
5474: PPUSH
5475: LD_VAR 0 3
5479: PPUSH
5480: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5484: LD_ADDR_EXP 56
5488: PUSH
5489: LD_EXP 56
5493: PUSH
5494: LD_VAR 0 3
5498: ADD
5499: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5500: LD_VAR 0 3
5504: PPUSH
5505: LD_INT 191
5507: PPUSH
5508: LD_INT 32
5510: PPUSH
5511: CALL_OW 111
// Wait ( 0 0$02 ) ;
5515: LD_INT 70
5517: PPUSH
5518: CALL_OW 67
// end ;
5522: GO 5374
5524: POP
5525: POP
// end ;
5526: LD_VAR 0 1
5530: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5531: LD_EXP 31
5535: PUSH
5536: LD_EXP 56
5540: AND
5541: IFFALSE 5715
5543: GO 5545
5545: DISABLE
5546: LD_INT 0
5548: PPUSH
5549: PPUSH
5550: PPUSH
// begin wait ( 0 0$50 ) ;
5551: LD_INT 1750
5553: PPUSH
5554: CALL_OW 67
// tmp := ru_vehicles ;
5558: LD_ADDR_VAR 0 3
5562: PUSH
5563: LD_EXP 56
5567: ST_TO_ADDR
// if not tmp then
5568: LD_VAR 0 3
5572: NOT
5573: IFFALSE 5577
// exit ;
5575: GO 5715
// repeat wait ( 0 0$1 ) ;
5577: LD_INT 35
5579: PPUSH
5580: CALL_OW 67
// for i in tmp do
5584: LD_ADDR_VAR 0 1
5588: PUSH
5589: LD_VAR 0 3
5593: PUSH
5594: FOR_IN
5595: IFFALSE 5706
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5597: LD_ADDR_VAR 0 2
5601: PUSH
5602: LD_INT 22
5604: PUSH
5605: LD_INT 1
5607: PUSH
5608: EMPTY
5609: LIST
5610: LIST
5611: PPUSH
5612: LD_VAR 0 1
5616: PPUSH
5617: CALL_OW 74
5621: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5622: LD_VAR 0 1
5626: PPUSH
5627: LD_VAR 0 2
5631: PPUSH
5632: CALL_OW 296
5636: PUSH
5637: LD_INT 10
5639: GREATER
5640: IFFALSE 5659
// ComAgressiveMove ( i , 69 , 101 ) else
5642: LD_VAR 0 1
5646: PPUSH
5647: LD_INT 69
5649: PPUSH
5650: LD_INT 101
5652: PPUSH
5653: CALL_OW 114
5657: GO 5673
// ComAttackUnit ( i , enemy ) ;
5659: LD_VAR 0 1
5663: PPUSH
5664: LD_VAR 0 2
5668: PPUSH
5669: CALL_OW 115
// if GetLives ( i ) < 250 then
5673: LD_VAR 0 1
5677: PPUSH
5678: CALL_OW 256
5682: PUSH
5683: LD_INT 250
5685: LESS
5686: IFFALSE 5704
// tmp := tmp diff i ;
5688: LD_ADDR_VAR 0 3
5692: PUSH
5693: LD_VAR 0 3
5697: PUSH
5698: LD_VAR 0 1
5702: DIFF
5703: ST_TO_ADDR
// end ;
5704: GO 5594
5706: POP
5707: POP
// until not tmp ;
5708: LD_VAR 0 3
5712: NOT
5713: IFFALSE 5577
// end ; end_of_file
5715: PPOPN 3
5717: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5718: LD_INT 0
5720: PPUSH
5721: PPUSH
5722: PPUSH
5723: PPUSH
5724: PPUSH
5725: PPUSH
5726: PPUSH
// InGameOn ;
5727: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5731: LD_EXP 37
5735: PPUSH
5736: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5740: LD_EXP 37
5744: PPUSH
5745: LD_EXP 44
5749: PPUSH
5750: CALL_OW 119
// if Bierezov then
5754: LD_EXP 45
5758: IFFALSE 5774
// ComTurnUnit ( Bierezov , Cornel ) ;
5760: LD_EXP 45
5764: PPUSH
5765: LD_EXP 44
5769: PPUSH
5770: CALL_OW 119
// for i in jmm_units do
5774: LD_ADDR_VAR 0 2
5778: PUSH
5779: LD_EXP 4
5783: PUSH
5784: FOR_IN
5785: IFFALSE 5803
// ComTurnUnit ( i , Cornel ) ;
5787: LD_VAR 0 2
5791: PPUSH
5792: LD_EXP 44
5796: PPUSH
5797: CALL_OW 119
5801: GO 5784
5803: POP
5804: POP
// units := cornel_units union Cornel ;
5805: LD_ADDR_VAR 0 3
5809: PUSH
5810: LD_EXP 6
5814: PUSH
5815: LD_EXP 44
5819: UNION
5820: ST_TO_ADDR
// repeat wait ( 1 ) ;
5821: LD_INT 1
5823: PPUSH
5824: CALL_OW 67
// for i in units do
5828: LD_ADDR_VAR 0 2
5832: PUSH
5833: LD_VAR 0 3
5837: PUSH
5838: FOR_IN
5839: IFFALSE 5872
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5841: LD_VAR 0 2
5845: PPUSH
5846: LD_EXP 37
5850: PPUSH
5851: CALL_OW 250
5855: PPUSH
5856: LD_EXP 37
5860: PPUSH
5861: CALL_OW 251
5865: PPUSH
5866: CALL_OW 111
5870: GO 5838
5872: POP
5873: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5874: LD_VAR 0 3
5878: PPUSH
5879: LD_INT 92
5881: PUSH
5882: LD_EXP 37
5886: PPUSH
5887: CALL_OW 250
5891: PUSH
5892: LD_EXP 37
5896: PPUSH
5897: CALL_OW 251
5901: PUSH
5902: LD_INT 10
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: PPUSH
5911: CALL_OW 72
5915: PUSH
5916: LD_VAR 0 3
5920: EQUAL
5921: IFFALSE 5821
// for i in units do
5923: LD_ADDR_VAR 0 2
5927: PUSH
5928: LD_VAR 0 3
5932: PUSH
5933: FOR_IN
5934: IFFALSE 5952
// ComTurnUnit ( i , JMM ) ;
5936: LD_VAR 0 2
5940: PPUSH
5941: LD_EXP 37
5945: PPUSH
5946: CALL_OW 119
5950: GO 5933
5952: POP
5953: POP
// ComTurnUnit ( Cornel , JMM ) ;
5954: LD_EXP 44
5958: PPUSH
5959: LD_EXP 37
5963: PPUSH
5964: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
5968: LD_EXP 37
5972: PPUSH
5973: LD_STRING D1-JMM-1
5975: PPUSH
5976: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
5980: LD_EXP 44
5984: PPUSH
5985: LD_STRING D1-Corn-1
5987: PPUSH
5988: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
5992: LD_EXP 37
5996: PPUSH
5997: LD_EXP 44
6001: PPUSH
6002: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
6006: LD_EXP 44
6010: PPUSH
6011: LD_EXP 37
6015: PPUSH
6016: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
6020: LD_INT 35
6022: PPUSH
6023: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
6027: LD_EXP 37
6031: PPUSH
6032: LD_EXP 44
6036: PPUSH
6037: CALL_OW 296
6041: PUSH
6042: LD_INT 6
6044: LESS
6045: IFFALSE 6020
// ChangeSideFog ( 4 , 1 ) ;
6047: LD_INT 4
6049: PPUSH
6050: LD_INT 1
6052: PPUSH
6053: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
6057: LD_EXP 37
6061: PPUSH
6062: LD_EXP 44
6066: PPUSH
6067: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6071: LD_EXP 44
6075: PPUSH
6076: LD_EXP 37
6080: PPUSH
6081: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
6085: LD_EXP 37
6089: PPUSH
6090: LD_STRING D1-JMM-2
6092: PPUSH
6093: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
6097: LD_EXP 37
6101: PPUSH
6102: LD_STRING D1-JMM-2a
6104: PPUSH
6105: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
6109: LD_EXP 44
6113: PPUSH
6114: LD_STRING D1-Corn-2
6116: PPUSH
6117: CALL_OW 88
// if bierezov_exist or debug then
6121: LD_EXP 7
6125: PUSH
6126: LD_EXP 1
6130: OR
6131: IFFALSE 6372
// begin ComTurnUnit ( Cornel , Bierezov ) ;
6133: LD_EXP 44
6137: PPUSH
6138: LD_EXP 45
6142: PPUSH
6143: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
6147: LD_INT 10
6149: PPUSH
6150: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
6154: LD_EXP 44
6158: PPUSH
6159: LD_STRING D1a-Corn-1
6161: PPUSH
6162: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
6166: LD_EXP 37
6170: PPUSH
6171: LD_EXP 45
6175: PPUSH
6176: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
6180: LD_EXP 45
6184: PPUSH
6185: LD_EXP 37
6189: PPUSH
6190: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
6194: LD_EXP 37
6198: PPUSH
6199: LD_STRING D1a-JMM-1
6201: PPUSH
6202: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
6206: LD_EXP 37
6210: PPUSH
6211: LD_EXP 44
6215: PPUSH
6216: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6220: LD_EXP 44
6224: PPUSH
6225: LD_EXP 37
6229: PPUSH
6230: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
6234: LD_EXP 44
6238: PPUSH
6239: LD_STRING D1a-Corn-2
6241: PPUSH
6242: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
6246: LD_EXP 37
6250: PPUSH
6251: LD_STRING D1a-JMM-2
6253: PPUSH
6254: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
6258: LD_EXP 44
6262: PPUSH
6263: LD_STRING D1a-Corn-3
6265: PPUSH
6266: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
6270: LD_EXP 37
6274: PPUSH
6275: LD_STRING D1a-JMM-3
6277: PPUSH
6278: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
6282: LD_EXP 44
6286: PPUSH
6287: LD_STRING D1a-Corn-4
6289: PPUSH
6290: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
6294: LD_EXP 37
6298: PPUSH
6299: LD_STRING D1a-JMM-4
6301: PPUSH
6302: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
6306: LD_EXP 44
6310: PPUSH
6311: LD_STRING D1a-Corn-5
6313: PPUSH
6314: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
6318: LD_EXP 45
6322: PPUSH
6323: LD_EXP 44
6327: PPUSH
6328: CALL_OW 250
6332: PPUSH
6333: LD_EXP 44
6337: PPUSH
6338: CALL_OW 251
6342: PUSH
6343: LD_INT 2
6345: MINUS
6346: PPUSH
6347: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
6351: LD_EXP 45
6355: PPUSH
6356: LD_EXP 44
6360: PPUSH
6361: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
6365: LD_INT 10
6367: PPUSH
6368: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
6372: LD_EXP 37
6376: PPUSH
6377: LD_STRING D1b-JMM-1
6379: PPUSH
6380: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
6384: LD_EXP 44
6388: PPUSH
6389: LD_STRING D1b-Corn-1
6391: PPUSH
6392: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6396: LD_EXP 37
6400: PPUSH
6401: LD_STRING D1b-JMM-2
6403: PPUSH
6404: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6408: LD_EXP 44
6412: PPUSH
6413: LD_STRING D1b-Corn-2
6415: PPUSH
6416: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6420: LD_EXP 37
6424: PPUSH
6425: LD_STRING D1b-JMM-3
6427: PPUSH
6428: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6432: LD_INT 10
6434: PPUSH
6435: CALL_OW 67
// SayRadio ( Powell , D1b-Pow-3 ) ;
6439: LD_EXP 46
6443: PPUSH
6444: LD_STRING D1b-Pow-3
6446: PPUSH
6447: CALL_OW 94
// Say ( JMM , D1b-JMM-4 ) ;
6451: LD_EXP 37
6455: PPUSH
6456: LD_STRING D1b-JMM-4
6458: PPUSH
6459: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6463: LD_EXP 44
6467: PPUSH
6468: LD_STRING D1b-Corn-4
6470: PPUSH
6471: CALL_OW 88
// if Khatam then
6475: LD_EXP 41
6479: IFFALSE 6495
// Say ( Khatam , D1b-Khat-4 ) else
6481: LD_EXP 41
6485: PPUSH
6486: LD_STRING D1b-Khat-4
6488: PPUSH
6489: CALL_OW 88
6493: GO 6531
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6495: LD_EXP 6
6499: PPUSH
6500: LD_INT 26
6502: PUSH
6503: LD_INT 1
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PPUSH
6510: CALL_OW 72
6514: PUSH
6515: LD_EXP 44
6519: PUSH
6520: EMPTY
6521: LIST
6522: DIFF
6523: PPUSH
6524: LD_STRING D1b-Sol1-4
6526: PPUSH
6527: CALL 585 0 2
// if Cyrus then
6531: LD_EXP 39
6535: IFFALSE 6549
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6537: LD_EXP 39
6541: PPUSH
6542: LD_STRING D1b-Cyrus-4
6544: PPUSH
6545: CALL_OW 88
// if Lisa then
6549: LD_EXP 40
6553: IFFALSE 6611
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6555: LD_EXP 40
6559: PPUSH
6560: LD_STRING D1b-Lisa-4
6562: PPUSH
6563: CALL_OW 88
// if Cyrus then
6567: LD_EXP 39
6571: IFFALSE 6611
// begin if not IsInUnit ( Cyrus ) then
6573: LD_EXP 39
6577: PPUSH
6578: CALL_OW 310
6582: NOT
6583: IFFALSE 6599
// ComTurnUnit ( Cyrus , Lisa ) ;
6585: LD_EXP 39
6589: PPUSH
6590: LD_EXP 40
6594: PPUSH
6595: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6599: LD_EXP 39
6603: PPUSH
6604: LD_STRING D1b-Cyrus-5
6606: PPUSH
6607: CALL_OW 88
// end ; end ; SelectGroup ;
6611: CALL 3052 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6615: LD_EXP 37
6619: PPUSH
6620: LD_STRING D1d-JMM-1
6622: PPUSH
6623: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6627: LD_EXP 44
6631: PPUSH
6632: LD_STRING D1d-Corn-1
6634: PPUSH
6635: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6639: LD_ADDR_VAR 0 2
6643: PUSH
6644: LD_EXP 4
6648: PUSH
6649: LD_EXP 6
6653: ADD
6654: PUSH
6655: LD_EXP 37
6659: ADD
6660: PUSH
6661: FOR_IN
6662: IFFALSE 6675
// ComHold ( i ) ;
6664: LD_VAR 0 2
6668: PPUSH
6669: CALL_OW 140
6673: GO 6661
6675: POP
6676: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6677: LD_ADDR_VAR 0 4
6681: PUSH
6682: LD_INT 22
6684: PUSH
6685: LD_INT 1
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: PUSH
6692: LD_INT 21
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PPUSH
6706: CALL_OW 69
6710: ST_TO_ADDR
// if vehicles then
6711: LD_VAR 0 4
6715: IFFALSE 7053
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6717: LD_EXP 6
6721: PPUSH
6722: LD_INT 55
6724: PUSH
6725: EMPTY
6726: LIST
6727: PPUSH
6728: CALL_OW 72
6732: IFFALSE 6771
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6734: LD_ADDR_VAR 0 2
6738: PUSH
6739: LD_EXP 6
6743: PPUSH
6744: LD_INT 55
6746: PUSH
6747: EMPTY
6748: LIST
6749: PPUSH
6750: CALL_OW 72
6754: PUSH
6755: FOR_IN
6756: IFFALSE 6769
// ComExitVehicle ( i ) ;
6758: LD_VAR 0 2
6762: PPUSH
6763: CALL_OW 121
6767: GO 6755
6769: POP
6770: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6771: LD_ADDR_VAR 0 5
6775: PUSH
6776: LD_VAR 0 4
6780: PPUSH
6781: LD_INT 34
6783: PUSH
6784: LD_INT 51
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PPUSH
6791: CALL_OW 72
6795: ST_TO_ADDR
// if cargos then
6796: LD_VAR 0 5
6800: IFFALSE 6983
// begin vehicles := cargos ;
6802: LD_ADDR_VAR 0 4
6806: PUSH
6807: LD_VAR 0 5
6811: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6812: LD_ADDR_VAR 0 6
6816: PUSH
6817: LD_STRING 02_resources_4
6819: PPUSH
6820: LD_INT 0
6822: PPUSH
6823: CALL_OW 30
6827: ST_TO_ADDR
// if debug and not resources then
6828: LD_EXP 1
6832: PUSH
6833: LD_VAR 0 6
6837: NOT
6838: AND
6839: IFFALSE 6849
// resources := 160 ;
6841: LD_ADDR_VAR 0 6
6845: PUSH
6846: LD_INT 160
6848: ST_TO_ADDR
// if resources mod 10 then
6849: LD_VAR 0 6
6853: PUSH
6854: LD_INT 10
6856: MOD
6857: IFFALSE 6879
// resources := resources - resources mod 10 ;
6859: LD_ADDR_VAR 0 6
6863: PUSH
6864: LD_VAR 0 6
6868: PUSH
6869: LD_VAR 0 6
6873: PUSH
6874: LD_INT 10
6876: MOD
6877: MINUS
6878: ST_TO_ADDR
// if resources then
6879: LD_VAR 0 6
6883: IFFALSE 6983
// for i in cargos do
6885: LD_ADDR_VAR 0 2
6889: PUSH
6890: LD_VAR 0 5
6894: PUSH
6895: FOR_IN
6896: IFFALSE 6981
// begin if resources < 100 then
6898: LD_VAR 0 6
6902: PUSH
6903: LD_INT 100
6905: LESS
6906: IFFALSE 6928
// begin cargo := resources ;
6908: LD_ADDR_VAR 0 7
6912: PUSH
6913: LD_VAR 0 6
6917: ST_TO_ADDR
// resources := 0 ;
6918: LD_ADDR_VAR 0 6
6922: PUSH
6923: LD_INT 0
6925: ST_TO_ADDR
// end else
6926: GO 6950
// begin cargo := 100 ;
6928: LD_ADDR_VAR 0 7
6932: PUSH
6933: LD_INT 100
6935: ST_TO_ADDR
// resources := resources - 100 ;
6936: LD_ADDR_VAR 0 6
6940: PUSH
6941: LD_VAR 0 6
6945: PUSH
6946: LD_INT 100
6948: MINUS
6949: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
6950: LD_VAR 0 2
6954: PPUSH
6955: LD_INT 1
6957: PPUSH
6958: LD_VAR 0 7
6962: PPUSH
6963: CALL_OW 290
// if resources = 0 then
6967: LD_VAR 0 6
6971: PUSH
6972: LD_INT 0
6974: EQUAL
6975: IFFALSE 6979
// break ;
6977: GO 6981
// end ;
6979: GO 6895
6981: POP
6982: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
6983: LD_VAR 0 4
6987: PUSH
6988: LD_INT 1
6990: ARRAY
6991: PPUSH
6992: CALL_OW 311
6996: PPUSH
6997: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
7001: LD_VAR 0 4
7005: PUSH
7006: LD_INT 1
7008: ARRAY
7009: PPUSH
7010: LD_INT 4
7012: PPUSH
7013: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
7017: LD_EXP 44
7021: PPUSH
7022: LD_VAR 0 4
7026: PUSH
7027: LD_INT 1
7029: ARRAY
7030: PPUSH
7031: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
7035: LD_INT 35
7037: PPUSH
7038: CALL_OW 67
// until IsInUnit ( Cornel ) ;
7042: LD_EXP 44
7046: PPUSH
7047: CALL_OW 310
7051: IFFALSE 7035
// end ; InGameOff ;
7053: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
7057: LD_STRING M1
7059: PPUSH
7060: CALL_OW 337
// SaveForQuickRestart ;
7064: CALL_OW 22
// cornel_active := true ;
7068: LD_ADDR_EXP 8
7072: PUSH
7073: LD_INT 1
7075: ST_TO_ADDR
// end ;
7076: LD_VAR 0 1
7080: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
7081: LD_EXP 37
7085: PPUSH
7086: LD_EXP 47
7090: PPUSH
7091: CALL_OW 296
7095: PUSH
7096: LD_INT 10
7098: LESS
7099: IFFALSE 8482
7101: GO 7103
7103: DISABLE
7104: LD_INT 0
7106: PPUSH
7107: PPUSH
7108: PPUSH
7109: PPUSH
7110: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
7111: LD_ADDR_VAR 0 2
7115: PUSH
7116: LD_INT 89
7118: PUSH
7119: LD_INT 34
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: PUSH
7126: LD_INT 138
7128: PUSH
7129: LD_INT 63
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 196
7138: PUSH
7139: LD_INT 84
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: LD_INT 135
7148: PUSH
7149: LD_INT 52
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 103
7158: PUSH
7159: LD_INT 39
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 58
7168: PUSH
7169: LD_INT 30
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: PUSH
7176: LD_INT 38
7178: PUSH
7179: LD_INT 51
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: ST_TO_ADDR
// Video ( true ) ;
7195: LD_INT 1
7197: PPUSH
7198: CALL 76448 0 1
// if jmm_units then
7202: LD_EXP 4
7206: IFFALSE 7282
// for i in jmm_units do
7208: LD_ADDR_VAR 0 1
7212: PUSH
7213: LD_EXP 4
7217: PUSH
7218: FOR_IN
7219: IFFALSE 7280
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
7221: LD_VAR 0 1
7225: PPUSH
7226: LD_EXP 37
7230: PPUSH
7231: CALL_OW 296
7235: PUSH
7236: LD_INT 10
7238: LESS
7239: PUSH
7240: LD_VAR 0 1
7244: PPUSH
7245: CALL_OW 310
7249: NOT
7250: AND
7251: IFFALSE 7269
// ComTurnUnit ( i , JMM ) else
7253: LD_VAR 0 1
7257: PPUSH
7258: LD_EXP 37
7262: PPUSH
7263: CALL_OW 119
7267: GO 7278
// ComHold ( i ) ;
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL_OW 140
// end ;
7278: GO 7218
7280: POP
7281: POP
// if IsInUnit ( JMM ) then
7282: LD_EXP 37
7286: PPUSH
7287: CALL_OW 310
7291: IFFALSE 7316
// begin ComExitVehicle ( JMM ) ;
7293: LD_EXP 37
7297: PPUSH
7298: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
7302: LD_EXP 37
7306: PPUSH
7307: LD_EXP 47
7311: PPUSH
7312: CALL_OW 172
// end ; Wait ( 10 ) ;
7316: LD_INT 10
7318: PPUSH
7319: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
7323: LD_EXP 37
7327: PPUSH
7328: LD_EXP 47
7332: PPUSH
7333: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
7337: LD_INT 35
7339: PPUSH
7340: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
7344: LD_EXP 37
7348: PPUSH
7349: LD_EXP 47
7353: PPUSH
7354: CALL_OW 296
7358: PUSH
7359: LD_INT 6
7361: LESS
7362: IFFALSE 7337
// ComTurnUnit ( JMM , Lynch ) ;
7364: LD_EXP 37
7368: PPUSH
7369: LD_EXP 47
7373: PPUSH
7374: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
7378: LD_ADDR_VAR 0 1
7382: PUSH
7383: LD_EXP 47
7387: PUSH
7388: LD_EXP 48
7392: PUSH
7393: LD_EXP 49
7397: PUSH
7398: LD_EXP 50
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: PUSH
7409: FOR_IN
7410: IFFALSE 7428
// ComTurnUnit ( i , JMM ) ;
7412: LD_VAR 0 1
7416: PPUSH
7417: LD_EXP 37
7421: PPUSH
7422: CALL_OW 119
7426: GO 7409
7428: POP
7429: POP
// Wait ( 0 0$0.3 ) ;
7430: LD_INT 10
7432: PPUSH
7433: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7437: LD_EXP 37
7441: PPUSH
7442: LD_STRING D2-JMM-1
7444: PPUSH
7445: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7449: LD_EXP 47
7453: PPUSH
7454: LD_STRING D2-Sol1-1
7456: PPUSH
7457: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7461: LD_EXP 37
7465: PPUSH
7466: LD_STRING D2-JMM-2
7468: PPUSH
7469: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7473: LD_EXP 47
7477: PPUSH
7478: LD_STRING D2-Sol1-2
7480: PPUSH
7481: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7485: LD_EXP 37
7489: PPUSH
7490: LD_STRING D2-JMM-3
7492: PPUSH
7493: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7497: LD_EXP 47
7501: PPUSH
7502: LD_STRING D2-Sol1-3
7504: PPUSH
7505: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7509: LD_ADDR_VAR 0 1
7513: PUSH
7514: LD_INT 22
7516: PUSH
7517: LD_INT 8
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: PPUSH
7524: CALL_OW 69
7528: PUSH
7529: FOR_IN
7530: IFFALSE 7546
// SetSide ( i , 1 ) ;
7532: LD_VAR 0 1
7536: PPUSH
7537: LD_INT 1
7539: PPUSH
7540: CALL_OW 235
7544: GO 7529
7546: POP
7547: POP
// Say ( JMM , D2-JMM-4 ) ;
7548: LD_EXP 37
7552: PPUSH
7553: LD_STRING D2-JMM-4
7555: PPUSH
7556: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7560: LD_INT 1
7562: PPUSH
7563: LD_INT 5
7565: PPUSH
7566: CALL_OW 332
// for i = 1 to points do
7570: LD_ADDR_VAR 0 1
7574: PUSH
7575: DOUBLE
7576: LD_INT 1
7578: DEC
7579: ST_TO_ADDR
7580: LD_VAR 0 2
7584: PUSH
7585: FOR_TO
7586: IFFALSE 7761
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7588: LD_VAR 0 2
7592: PUSH
7593: LD_VAR 0 1
7597: ARRAY
7598: PUSH
7599: LD_INT 1
7601: ARRAY
7602: PPUSH
7603: LD_VAR 0 2
7607: PUSH
7608: LD_VAR 0 1
7612: ARRAY
7613: PUSH
7614: LD_INT 2
7616: ARRAY
7617: PPUSH
7618: CALL_OW 84
// if i = 1 then
7622: LD_VAR 0 1
7626: PUSH
7627: LD_INT 1
7629: EQUAL
7630: IFFALSE 7644
// Say ( Lynch , D2-Sol1-4 ) ;
7632: LD_EXP 47
7636: PPUSH
7637: LD_STRING D2-Sol1-4
7639: PPUSH
7640: CALL_OW 88
// if i = 2 then
7644: LD_VAR 0 1
7648: PUSH
7649: LD_INT 2
7651: EQUAL
7652: IFFALSE 7666
// Say ( JMM , D2-JMM-5 ) ;
7654: LD_EXP 37
7658: PPUSH
7659: LD_STRING D2-JMM-5
7661: PPUSH
7662: CALL_OW 88
// if i = 4 then
7666: LD_VAR 0 1
7670: PUSH
7671: LD_INT 4
7673: EQUAL
7674: IFFALSE 7698
// begin RevealFogArea ( 1 , troopsArea ) ;
7676: LD_INT 1
7678: PPUSH
7679: LD_INT 6
7681: PPUSH
7682: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7686: LD_EXP 47
7690: PPUSH
7691: LD_STRING D2-Sol1-5
7693: PPUSH
7694: CALL_OW 88
// end ; if i = 5 then
7698: LD_VAR 0 1
7702: PUSH
7703: LD_INT 5
7705: EQUAL
7706: IFFALSE 7720
// Say ( JMM , D2-JMM-6 ) ;
7708: LD_EXP 37
7712: PPUSH
7713: LD_STRING D2-JMM-6
7715: PPUSH
7716: CALL_OW 88
// if i = 7 then
7720: LD_VAR 0 1
7724: PUSH
7725: LD_INT 7
7727: EQUAL
7728: IFFALSE 7752
// begin RevealFogArea ( 1 , forestArea ) ;
7730: LD_INT 1
7732: PPUSH
7733: LD_INT 7
7735: PPUSH
7736: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7740: LD_EXP 47
7744: PPUSH
7745: LD_STRING D2-Sol1-6
7747: PPUSH
7748: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7752: LD_INT 46
7754: PPUSH
7755: CALL_OW 67
// end ;
7759: GO 7585
7761: POP
7762: POP
// CenterNowOnUnits ( JMM ) ;
7763: LD_EXP 37
7767: PPUSH
7768: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7772: LD_EXP 37
7776: PPUSH
7777: LD_STRING D2-JMM-7
7779: PPUSH
7780: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7784: LD_EXP 47
7788: PPUSH
7789: LD_STRING D2-Sol1-7
7791: PPUSH
7792: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7796: LD_EXP 37
7800: PPUSH
7801: LD_STRING D2-JMM-8
7803: PPUSH
7804: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7808: LD_ADDR_VAR 0 4
7812: PUSH
7813: LD_INT 22
7815: PUSH
7816: LD_INT 1
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PUSH
7823: LD_INT 30
7825: PUSH
7826: LD_INT 31
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PPUSH
7837: CALL_OW 69
7841: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7842: LD_EXP 47
7846: PPUSH
7847: LD_VAR 0 4
7851: PUSH
7852: LD_INT 1
7854: ARRAY
7855: PPUSH
7856: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7860: LD_INT 65
7862: PPUSH
7863: LD_INT 101
7865: PPUSH
7866: CALL_OW 428
7870: IFFALSE 7893
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7872: LD_INT 65
7874: PPUSH
7875: LD_INT 101
7877: PPUSH
7878: CALL_OW 428
7882: PPUSH
7883: LD_INT 75
7885: PPUSH
7886: LD_INT 100
7888: PPUSH
7889: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7893: LD_INT 66
7895: PPUSH
7896: LD_INT 103
7898: PPUSH
7899: CALL_OW 428
7903: IFFALSE 7926
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7905: LD_INT 66
7907: PPUSH
7908: LD_INT 103
7910: PPUSH
7911: CALL_OW 428
7915: PPUSH
7916: LD_INT 75
7918: PPUSH
7919: LD_INT 100
7921: PPUSH
7922: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7926: LD_ADDR_VAR 0 5
7930: PUSH
7931: LD_INT 22
7933: PUSH
7934: LD_INT 1
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: PUSH
7941: LD_INT 21
7943: PUSH
7944: LD_INT 2
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: PUSH
7951: LD_INT 91
7953: PUSH
7954: LD_EXP 37
7958: PUSH
7959: LD_INT 7
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: LIST
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: LIST
7971: PPUSH
7972: CALL_OW 69
7976: ST_TO_ADDR
// if tmp then
7977: LD_VAR 0 5
7981: IFFALSE 7998
// ComMoveXY ( tmp , 75 , 100 ) ;
7983: LD_VAR 0 5
7987: PPUSH
7988: LD_INT 75
7990: PPUSH
7991: LD_INT 100
7993: PPUSH
7994: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
7998: LD_ADDR_VAR 0 3
8002: PUSH
8003: LD_EXP 4
8007: PPUSH
8008: LD_INT 25
8010: PUSH
8011: LD_INT 1
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PPUSH
8018: CALL_OW 72
8022: PPUSH
8023: LD_EXP 37
8027: PPUSH
8028: CALL_OW 74
8032: ST_TO_ADDR
// if sol then
8033: LD_VAR 0 3
8037: IFFALSE 8097
// if GetDistUnits ( JMM , sol ) < 10 then
8039: LD_EXP 37
8043: PPUSH
8044: LD_VAR 0 3
8048: PPUSH
8049: CALL_OW 296
8053: PUSH
8054: LD_INT 10
8056: LESS
8057: IFFALSE 8097
// begin if IsInUnit ( sol ) then
8059: LD_VAR 0 3
8063: PPUSH
8064: CALL_OW 310
8068: IFFALSE 8079
// ComExitVehicle ( sol ) ;
8070: LD_VAR 0 3
8074: PPUSH
8075: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
8079: LD_VAR 0 3
8083: PPUSH
8084: LD_VAR 0 4
8088: PUSH
8089: LD_INT 2
8091: ARRAY
8092: PPUSH
8093: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
8097: LD_INT 10
8099: PPUSH
8100: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
8104: LD_EXP 37
8108: PPUSH
8109: LD_INT 65
8111: PPUSH
8112: LD_INT 101
8114: PPUSH
8115: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
8119: LD_EXP 37
8123: PPUSH
8124: LD_INT 63
8126: PPUSH
8127: LD_INT 100
8129: PPUSH
8130: CALL_OW 178
// tmp := 0 0$0 ;
8134: LD_ADDR_VAR 0 5
8138: PUSH
8139: LD_INT 0
8141: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8142: LD_INT 35
8144: PPUSH
8145: CALL_OW 67
// tmp := tmp + 0 0$1 ;
8149: LD_ADDR_VAR 0 5
8153: PUSH
8154: LD_VAR 0 5
8158: PUSH
8159: LD_INT 35
8161: PLUS
8162: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
8163: LD_EXP 37
8167: PPUSH
8168: LD_INT 65
8170: PPUSH
8171: LD_INT 101
8173: PPUSH
8174: CALL_OW 307
8178: PUSH
8179: LD_VAR 0 5
8183: PUSH
8184: LD_INT 175
8186: GREATER
8187: OR
8188: IFFALSE 8142
// Say ( JMM , D2a-JMM-1 ) ;
8190: LD_EXP 37
8194: PPUSH
8195: LD_STRING D2a-JMM-1
8197: PPUSH
8198: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
8202: LD_EXP 48
8206: PPUSH
8207: LD_INT 66
8209: PPUSH
8210: LD_INT 103
8212: PPUSH
8213: CALL_OW 111
// tmp := 0 0$0 ;
8217: LD_ADDR_VAR 0 5
8221: PUSH
8222: LD_INT 0
8224: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8225: LD_INT 35
8227: PPUSH
8228: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
8232: LD_EXP 48
8236: PPUSH
8237: LD_INT 66
8239: PPUSH
8240: LD_INT 103
8242: PPUSH
8243: CALL_OW 307
8247: PUSH
8248: LD_VAR 0 5
8252: PUSH
8253: LD_INT 175
8255: GREATER
8256: OR
8257: IFFALSE 8225
// ComTurnUnit ( Walker , JMM ) ;
8259: LD_EXP 48
8263: PPUSH
8264: LD_EXP 37
8268: PPUSH
8269: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
8273: LD_EXP 48
8277: PPUSH
8278: LD_STRING D2a-Sci1-1
8280: PPUSH
8281: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
8285: LD_EXP 37
8289: PPUSH
8290: LD_EXP 48
8294: PPUSH
8295: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
8299: LD_EXP 37
8303: PPUSH
8304: LD_STRING D2a-JMM-2
8306: PPUSH
8307: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
8311: LD_EXP 48
8315: PPUSH
8316: LD_STRING D2a-Sci1-2
8318: PPUSH
8319: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
8323: LD_EXP 37
8327: PPUSH
8328: LD_STRING D2a-JMM-3
8330: PPUSH
8331: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
8335: LD_EXP 48
8339: PPUSH
8340: LD_STRING D2a-Sci1-3
8342: PPUSH
8343: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
8347: LD_ADDR_EXP 4
8351: PUSH
8352: LD_EXP 4
8356: PUSH
8357: LD_EXP 47
8361: PUSH
8362: LD_EXP 48
8366: PUSH
8367: LD_EXP 49
8371: PUSH
8372: LD_EXP 50
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: ADD
8383: ST_TO_ADDR
// for i in jmm_units do
8384: LD_ADDR_VAR 0 1
8388: PUSH
8389: LD_EXP 4
8393: PUSH
8394: FOR_IN
8395: IFFALSE 8420
// if not IsInUnit ( i ) then
8397: LD_VAR 0 1
8401: PPUSH
8402: CALL_OW 310
8406: NOT
8407: IFFALSE 8418
// ComFree ( i ) ;
8409: LD_VAR 0 1
8413: PPUSH
8414: CALL_OW 139
8418: GO 8394
8420: POP
8421: POP
// Video ( false ) ;
8422: LD_INT 0
8424: PPUSH
8425: CALL 76448 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8429: LD_STRING MSolar1
8431: PPUSH
8432: CALL_OW 337
// jmm_on_west := true ;
8436: LD_ADDR_EXP 5
8440: PUSH
8441: LD_INT 1
8443: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8444: LD_INT 1050
8446: PPUSH
8447: CALL_OW 67
// frank_can_return := true ;
8451: LD_ADDR_EXP 12
8455: PUSH
8456: LD_INT 1
8458: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8459: LD_INT 6300
8461: PPUSH
8462: LD_INT 8400
8464: PPUSH
8465: CALL_OW 12
8469: PPUSH
8470: CALL_OW 67
// send_spec_patrol := true ;
8474: LD_ADDR_EXP 30
8478: PUSH
8479: LD_INT 1
8481: ST_TO_ADDR
// end ;
8482: PPOPN 5
8484: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8485: LD_INT 22
8487: PUSH
8488: LD_INT 1
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: PUSH
8495: LD_INT 34
8497: PUSH
8498: LD_INT 51
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: PUSH
8505: LD_INT 92
8507: PUSH
8508: LD_INT 63
8510: PUSH
8511: LD_INT 100
8513: PUSH
8514: LD_INT 5
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: LIST
8527: PUSH
8528: EMPTY
8529: LIST
8530: PPUSH
8531: CALL_OW 69
8535: PUSH
8536: LD_EXP 5
8540: NOT
8541: AND
8542: IFFALSE 8655
8544: GO 8546
8546: DISABLE
8547: LD_INT 0
8549: PPUSH
8550: PPUSH
// begin enable ;
8551: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8552: LD_ADDR_VAR 0 2
8556: PUSH
8557: LD_INT 22
8559: PUSH
8560: LD_INT 1
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: LD_INT 34
8569: PUSH
8570: LD_INT 51
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: PUSH
8577: LD_INT 92
8579: PUSH
8580: LD_INT 63
8582: PUSH
8583: LD_INT 100
8585: PUSH
8586: LD_INT 5
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: LIST
8599: PUSH
8600: EMPTY
8601: LIST
8602: PPUSH
8603: CALL_OW 69
8607: ST_TO_ADDR
// if not filter then
8608: LD_VAR 0 2
8612: NOT
8613: IFFALSE 8617
// exit ;
8615: GO 8655
// for i in filter do
8617: LD_ADDR_VAR 0 1
8621: PUSH
8622: LD_VAR 0 2
8626: PUSH
8627: FOR_IN
8628: IFFALSE 8653
// begin SetFuel ( i , 0 ) ;
8630: LD_VAR 0 1
8634: PPUSH
8635: LD_INT 0
8637: PPUSH
8638: CALL_OW 240
// ComStop ( i ) ;
8642: LD_VAR 0 1
8646: PPUSH
8647: CALL_OW 141
// end ;
8651: GO 8627
8653: POP
8654: POP
// end ;
8655: PPOPN 2
8657: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8658: LD_EXP 30
8662: IFFALSE 9788
8664: GO 8666
8666: DISABLE
8667: LD_INT 0
8669: PPUSH
8670: PPUSH
8671: PPUSH
8672: PPUSH
8673: PPUSH
8674: PPUSH
8675: PPUSH
// begin if not ru_spec_patrol then
8676: LD_EXP 54
8680: NOT
8681: IFFALSE 8685
// exit ;
8683: GO 9788
// dead1 := false ;
8685: LD_ADDR_VAR 0 1
8689: PUSH
8690: LD_INT 0
8692: ST_TO_ADDR
// dead2 := false ;
8693: LD_ADDR_VAR 0 2
8697: PUSH
8698: LD_INT 0
8700: ST_TO_ADDR
// inarea1 := false ;
8701: LD_ADDR_VAR 0 3
8705: PUSH
8706: LD_INT 0
8708: ST_TO_ADDR
// inarea2 := false ;
8709: LD_ADDR_VAR 0 4
8713: PUSH
8714: LD_INT 0
8716: ST_TO_ADDR
// tmp := [ ] ;
8717: LD_ADDR_VAR 0 6
8721: PUSH
8722: EMPTY
8723: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8724: LD_EXP 54
8728: PPUSH
8729: LD_INT 75
8731: PPUSH
8732: LD_INT 101
8734: PPUSH
8735: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8739: LD_INT 35
8741: PPUSH
8742: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8746: LD_INT 1
8748: PPUSH
8749: LD_EXP 54
8753: PUSH
8754: LD_INT 1
8756: ARRAY
8757: PPUSH
8758: CALL_OW 292
8762: PUSH
8763: LD_EXP 54
8767: PPUSH
8768: LD_INT 92
8770: PUSH
8771: LD_INT 75
8773: PUSH
8774: LD_INT 101
8776: PUSH
8777: LD_INT 4
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: PPUSH
8786: CALL_OW 72
8790: OR
8791: IFFALSE 8739
// ComStop ( ru_spec_patrol ) ;
8793: LD_EXP 54
8797: PPUSH
8798: CALL_OW 141
// Wait ( 0 0$02 ) ;
8802: LD_INT 70
8804: PPUSH
8805: CALL_OW 67
// DialogueOn ;
8809: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8813: LD_EXP 54
8817: PUSH
8818: LD_INT 1
8820: ARRAY
8821: PPUSH
8822: LD_STRING D8-Rus1-1
8824: PPUSH
8825: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8829: LD_EXP 37
8833: PPUSH
8834: LD_STRING D8-JMM-1
8836: PPUSH
8837: CALL_OW 88
// DialogueOff ;
8841: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8845: LD_EXP 54
8849: PPUSH
8850: LD_INT 13
8852: PPUSH
8853: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8857: LD_INT 35
8859: PPUSH
8860: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8864: LD_VAR 0 1
8868: NOT
8869: PUSH
8870: LD_EXP 54
8874: PUSH
8875: LD_INT 1
8877: ARRAY
8878: PPUSH
8879: CALL_OW 301
8883: AND
8884: IFFALSE 8894
// dead1 := true ;
8886: LD_ADDR_VAR 0 1
8890: PUSH
8891: LD_INT 1
8893: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8894: LD_VAR 0 2
8898: NOT
8899: PUSH
8900: LD_EXP 54
8904: PUSH
8905: LD_INT 2
8907: ARRAY
8908: PPUSH
8909: CALL_OW 301
8913: AND
8914: IFFALSE 8924
// dead2 := true ;
8916: LD_ADDR_VAR 0 2
8920: PUSH
8921: LD_INT 1
8923: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8924: LD_VAR 0 3
8928: NOT
8929: PUSH
8930: LD_EXP 54
8934: PUSH
8935: LD_INT 1
8937: ARRAY
8938: PPUSH
8939: LD_INT 14
8941: PPUSH
8942: CALL_OW 308
8946: AND
8947: IFFALSE 8957
// inarea1 := true ;
8949: LD_ADDR_VAR 0 3
8953: PUSH
8954: LD_INT 1
8956: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
8957: LD_VAR 0 4
8961: NOT
8962: PUSH
8963: LD_EXP 54
8967: PUSH
8968: LD_INT 2
8970: ARRAY
8971: PPUSH
8972: LD_INT 14
8974: PPUSH
8975: CALL_OW 308
8979: AND
8980: IFFALSE 8990
// inarea2 := true ;
8982: LD_ADDR_VAR 0 4
8986: PUSH
8987: LD_INT 1
8989: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
8990: LD_VAR 0 1
8994: PUSH
8995: LD_VAR 0 2
8999: AND
9000: PUSH
9001: LD_VAR 0 1
9005: PUSH
9006: LD_VAR 0 4
9010: AND
9011: OR
9012: PUSH
9013: LD_VAR 0 2
9017: PUSH
9018: LD_VAR 0 3
9022: AND
9023: OR
9024: PUSH
9025: LD_VAR 0 3
9029: PUSH
9030: LD_VAR 0 4
9034: AND
9035: OR
9036: IFFALSE 8857
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
9038: LD_VAR 0 3
9042: PUSH
9043: LD_VAR 0 4
9047: AND
9048: PUSH
9049: LD_VAR 0 1
9053: PUSH
9054: LD_VAR 0 4
9058: AND
9059: OR
9060: PUSH
9061: LD_VAR 0 2
9065: PUSH
9066: LD_VAR 0 3
9070: AND
9071: OR
9072: IFFALSE 9768
// begin prepare_siege := true ;
9074: LD_ADDR_EXP 31
9078: PUSH
9079: LD_INT 1
9081: ST_TO_ADDR
// DialogueOn ;
9082: CALL_OW 6
// if ( inarea1 and inarea2 ) then
9086: LD_VAR 0 3
9090: PUSH
9091: LD_VAR 0 4
9095: AND
9096: IFFALSE 9112
// Say ( JMM , D8b-JMM-1a ) else
9098: LD_EXP 37
9102: PPUSH
9103: LD_STRING D8b-JMM-1a
9105: PPUSH
9106: CALL_OW 88
9110: GO 9124
// Say ( JMM , D8b-JMM-1 ) ;
9112: LD_EXP 37
9116: PPUSH
9117: LD_STRING D8b-JMM-1
9119: PPUSH
9120: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
9124: LD_EXP 4
9128: PPUSH
9129: LD_INT 26
9131: PUSH
9132: LD_INT 1
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PPUSH
9139: CALL_OW 72
9143: PUSH
9144: LD_EXP 38
9148: PUSH
9149: LD_EXP 39
9153: PUSH
9154: LD_EXP 48
9158: PUSH
9159: LD_EXP 51
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: DIFF
9170: PPUSH
9171: LD_STRING D8b-Sol1-1
9173: PPUSH
9174: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
9178: LD_EXP 39
9182: PUSH
9183: LD_EXP 39
9187: PUSH
9188: LD_EXP 4
9192: IN
9193: AND
9194: IFFALSE 9210
// Say ( Cyrus , D8b-Cyrus-1 ) else
9196: LD_EXP 39
9200: PPUSH
9201: LD_STRING D8b-Cyrus-1
9203: PPUSH
9204: CALL_OW 88
9208: GO 9222
// Say ( JMM , D8b-JMM-1a ) ;
9210: LD_EXP 37
9214: PPUSH
9215: LD_STRING D8b-JMM-1a
9217: PPUSH
9218: CALL_OW 88
// if Lisa and Lisa in jmm_units then
9222: LD_EXP 40
9226: PUSH
9227: LD_EXP 40
9231: PUSH
9232: LD_EXP 4
9236: IN
9237: AND
9238: IFFALSE 9252
// Say ( Lisa , D8b-Lisa-2 ) ;
9240: LD_EXP 40
9244: PPUSH
9245: LD_STRING D8b-Lisa-2
9247: PPUSH
9248: CALL_OW 88
// if Bobby and Bobby in jmm_units then
9252: LD_EXP 38
9256: PUSH
9257: LD_EXP 38
9261: PUSH
9262: LD_EXP 4
9266: IN
9267: AND
9268: IFFALSE 9284
// Say ( Bobby , D8b-Bobby-1 ) else
9270: LD_EXP 38
9274: PPUSH
9275: LD_STRING D8b-Bobby-1
9277: PPUSH
9278: CALL_OW 88
9282: GO 9344
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
9284: LD_ADDR_VAR 0 5
9288: PUSH
9289: LD_EXP 4
9293: PPUSH
9294: LD_INT 26
9296: PUSH
9297: LD_INT 1
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PPUSH
9304: CALL_OW 72
9308: PUSH
9309: LD_EXP 38
9313: PUSH
9314: LD_EXP 39
9318: PUSH
9319: LD_EXP 48
9323: PUSH
9324: LD_EXP 51
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: DIFF
9335: PPUSH
9336: LD_STRING D8b-Sol2-1
9338: PPUSH
9339: CALL 585 0 2
9343: ST_TO_ADDR
// DialogueOff ;
9344: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
9348: LD_EXP 39
9352: PUSH
9353: LD_EXP 39
9357: PUSH
9358: LD_EXP 4
9362: IN
9363: AND
9364: IFFALSE 9389
// tmp := Insert ( tmp , 1 , Cyrus ) ;
9366: LD_ADDR_VAR 0 6
9370: PUSH
9371: LD_VAR 0 6
9375: PPUSH
9376: LD_INT 1
9378: PPUSH
9379: LD_EXP 39
9383: PPUSH
9384: CALL_OW 2
9388: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
9389: LD_EXP 38
9393: PUSH
9394: LD_EXP 38
9398: PUSH
9399: LD_EXP 4
9403: IN
9404: AND
9405: IFFALSE 9430
// tmp := Insert ( tmp , 1 , Bobby ) ;
9407: LD_ADDR_VAR 0 6
9411: PUSH
9412: LD_VAR 0 6
9416: PPUSH
9417: LD_INT 1
9419: PPUSH
9420: LD_EXP 38
9424: PPUSH
9425: CALL_OW 2
9429: ST_TO_ADDR
// if sol then
9430: LD_VAR 0 5
9434: IFFALSE 9459
// tmp := Insert ( tmp , 1 , sol ) ;
9436: LD_ADDR_VAR 0 6
9440: PUSH
9441: LD_VAR 0 6
9445: PPUSH
9446: LD_INT 1
9448: PPUSH
9449: LD_VAR 0 5
9453: PPUSH
9454: CALL_OW 2
9458: ST_TO_ADDR
// if tmp then
9459: LD_VAR 0 6
9463: IFFALSE 9727
// begin SetSide ( tmp , 8 ) ;
9465: LD_VAR 0 6
9469: PPUSH
9470: LD_INT 8
9472: PPUSH
9473: CALL_OW 235
// for i in tmp do
9477: LD_ADDR_VAR 0 7
9481: PUSH
9482: LD_VAR 0 6
9486: PUSH
9487: FOR_IN
9488: IFFALSE 9579
// begin if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_building then
9490: LD_VAR 0 7
9494: PPUSH
9495: CALL_OW 310
9499: PUSH
9500: LD_VAR 0 7
9504: PPUSH
9505: CALL_OW 310
9509: PPUSH
9510: CALL_OW 266
9514: PUSH
9515: LD_INT 3
9517: EQUAL
9518: AND
9519: IFFALSE 9530
// ComExitBuilding ( i ) ;
9521: LD_VAR 0 7
9525: PPUSH
9526: CALL_OW 122
// if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_vehicle then
9530: LD_VAR 0 7
9534: PPUSH
9535: CALL_OW 310
9539: PUSH
9540: LD_VAR 0 7
9544: PPUSH
9545: CALL_OW 310
9549: PPUSH
9550: CALL_OW 266
9554: PUSH
9555: LD_INT 2
9557: EQUAL
9558: AND
9559: IFFALSE 9570
// ComExitVehicle ( i ) ;
9561: LD_VAR 0 7
9565: PPUSH
9566: CALL_OW 121
// wait ( 0 0$1 ) ;
9570: LD_INT 35
9572: PPUSH
9573: CALL_OW 67
// end ;
9577: GO 9487
9579: POP
9580: POP
// ComFree ( tmp ) ;
9581: LD_VAR 0 6
9585: PPUSH
9586: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9590: LD_VAR 0 6
9594: PPUSH
9595: LD_INT 15
9597: PPUSH
9598: CALL_OW 173
// AddComHold ( tmp ) ;
9602: LD_VAR 0 6
9606: PPUSH
9607: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9611: LD_INT 35
9613: PPUSH
9614: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9618: LD_VAR 0 6
9622: PUSH
9623: LD_INT 1
9625: ARRAY
9626: PPUSH
9627: CALL_OW 314
9631: NOT
9632: IFFALSE 9646
// ComMoveToArea ( tmp , cyrusEscape ) ;
9634: LD_VAR 0 6
9638: PPUSH
9639: LD_INT 15
9641: PPUSH
9642: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9646: LD_VAR 0 6
9650: PUSH
9651: LD_INT 1
9653: ARRAY
9654: PPUSH
9655: LD_INT 15
9657: PPUSH
9658: CALL_OW 308
9662: IFFALSE 9717
// begin RemoveUnit ( tmp [ 1 ] ) ;
9664: LD_VAR 0 6
9668: PUSH
9669: LD_INT 1
9671: ARRAY
9672: PPUSH
9673: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9677: LD_ADDR_EXP 4
9681: PUSH
9682: LD_EXP 4
9686: PUSH
9687: LD_VAR 0 6
9691: PUSH
9692: LD_INT 1
9694: ARRAY
9695: DIFF
9696: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9697: LD_ADDR_VAR 0 6
9701: PUSH
9702: LD_VAR 0 6
9706: PUSH
9707: LD_VAR 0 6
9711: PUSH
9712: LD_INT 1
9714: ARRAY
9715: DIFF
9716: ST_TO_ADDR
// end ; until tmp = 0 ;
9717: LD_VAR 0 6
9721: PUSH
9722: LD_INT 0
9724: EQUAL
9725: IFFALSE 9611
// end ; wait ( 0 0$30 ) ;
9727: LD_INT 1050
9729: PPUSH
9730: CALL_OW 67
// if ru_spec_patrol then
9734: LD_EXP 54
9738: IFFALSE 9766
// for i in ru_spec_patrol do
9740: LD_ADDR_VAR 0 7
9744: PUSH
9745: LD_EXP 54
9749: PUSH
9750: FOR_IN
9751: IFFALSE 9764
// RemoveUnit ( i ) ;
9753: LD_VAR 0 7
9757: PPUSH
9758: CALL_OW 64
9762: GO 9750
9764: POP
9765: POP
// end else
9766: GO 9788
// begin prepare_siege := false ;
9768: LD_ADDR_EXP 31
9772: PUSH
9773: LD_INT 0
9775: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9776: LD_EXP 37
9780: PPUSH
9781: LD_STRING D8a-JMM-1
9783: PPUSH
9784: CALL_OW 88
// end ; end ;
9788: PPOPN 7
9790: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9791: LD_EXP 12
9795: IFFALSE 11063
9797: GO 9799
9799: DISABLE
9800: LD_INT 0
9802: PPUSH
9803: PPUSH
9804: PPUSH
// begin uc_side := 8 ;
9805: LD_ADDR_OWVAR 20
9809: PUSH
9810: LD_INT 8
9812: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9813: LD_ADDR_VAR 0 3
9817: PUSH
9818: LD_INT 59
9820: PUSH
9821: LD_INT 71
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: PUSH
9828: LD_INT 122
9830: PUSH
9831: LD_INT 117
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9842: LD_ADDR_EXP 51
9846: PUSH
9847: LD_STRING Frank
9849: PPUSH
9850: LD_INT 0
9852: PPUSH
9853: LD_STRING 
9855: PPUSH
9856: CALL 39027 0 3
9860: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9861: LD_ADDR_VAR 0 1
9865: PUSH
9866: LD_INT 1
9868: PPUSH
9869: LD_INT 2
9871: PPUSH
9872: CALL_OW 12
9876: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9877: LD_EXP 51
9881: PPUSH
9882: LD_VAR 0 3
9886: PUSH
9887: LD_VAR 0 1
9891: ARRAY
9892: PUSH
9893: LD_INT 1
9895: ARRAY
9896: PPUSH
9897: LD_VAR 0 3
9901: PUSH
9902: LD_VAR 0 1
9906: ARRAY
9907: PUSH
9908: LD_INT 2
9910: ARRAY
9911: PPUSH
9912: LD_INT 0
9914: PPUSH
9915: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9919: LD_EXP 51
9923: PPUSH
9924: LD_INT 1
9926: PPUSH
9927: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9931: LD_INT 35
9933: PPUSH
9934: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9938: LD_EXP 51
9942: PPUSH
9943: LD_EXP 37
9947: PPUSH
9948: CALL_OW 296
9952: PUSH
9953: LD_INT 8
9955: LESS
9956: PUSH
9957: LD_EXP 51
9961: PPUSH
9962: CALL_OW 256
9966: PUSH
9967: LD_INT 250
9969: GREATER
9970: AND
9971: IFFALSE 9931
// Video ( true ) ;
9973: LD_INT 1
9975: PPUSH
9976: CALL 76448 0 1
// CenterOnUnits ( JMM ) ;
9980: LD_EXP 37
9984: PPUSH
9985: CALL_OW 85
// if IsInUnit ( JMM ) then
9989: LD_EXP 37
9993: PPUSH
9994: CALL_OW 310
9998: IFFALSE 10009
// ComFree ( JMM ) ;
10000: LD_EXP 37
10004: PPUSH
10005: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
10009: LD_EXP 37
10013: PPUSH
10014: LD_EXP 51
10018: PPUSH
10019: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
10023: LD_EXP 51
10027: PPUSH
10028: LD_EXP 37
10032: PPUSH
10033: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
10037: LD_EXP 37
10041: PPUSH
10042: LD_STRING D6-JMM-1
10044: PPUSH
10045: CALL_OW 88
// p := 0 ;
10049: LD_ADDR_VAR 0 2
10053: PUSH
10054: LD_INT 0
10056: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10057: LD_INT 35
10059: PPUSH
10060: CALL_OW 67
// p := p + 1 ;
10064: LD_ADDR_VAR 0 2
10068: PUSH
10069: LD_VAR 0 2
10073: PUSH
10074: LD_INT 1
10076: PLUS
10077: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
10078: LD_EXP 37
10082: PPUSH
10083: LD_EXP 51
10087: PPUSH
10088: CALL_OW 296
10092: PUSH
10093: LD_INT 8
10095: LESS
10096: PUSH
10097: LD_VAR 0 2
10101: PUSH
10102: LD_INT 7
10104: GREATER
10105: OR
10106: IFFALSE 10057
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
10108: LD_EXP 40
10112: PUSH
10113: LD_EXP 40
10117: PPUSH
10118: LD_EXP 51
10122: PPUSH
10123: CALL_OW 296
10127: PUSH
10128: LD_INT 20
10130: LESS
10131: AND
10132: PUSH
10133: LD_EXP 40
10137: PUSH
10138: LD_EXP 4
10142: IN
10143: AND
10144: IFFALSE 10169
// begin ComFree ( Lisa ) ;
10146: LD_EXP 40
10150: PPUSH
10151: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
10155: LD_EXP 40
10159: PPUSH
10160: LD_EXP 51
10164: PPUSH
10165: CALL_OW 172
// end ; if Lynch then
10169: LD_EXP 47
10173: IFFALSE 10198
// begin ComFree ( Lynch ) ;
10175: LD_EXP 47
10179: PPUSH
10180: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
10184: LD_EXP 47
10188: PPUSH
10189: LD_EXP 51
10193: PPUSH
10194: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
10198: LD_EXP 37
10202: PPUSH
10203: LD_EXP 51
10207: PPUSH
10208: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10212: LD_EXP 51
10216: PPUSH
10217: LD_EXP 37
10221: PPUSH
10222: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
10226: LD_EXP 51
10230: PPUSH
10231: LD_STRING D6-Frank-1
10233: PPUSH
10234: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
10238: LD_INT 69
10240: PPUSH
10241: LD_INT 20
10243: PPUSH
10244: LD_INT 1
10246: PPUSH
10247: LD_INT 20
10249: NEG
10250: PPUSH
10251: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
10255: LD_INT 69
10257: PPUSH
10258: LD_INT 20
10260: PPUSH
10261: LD_INT 1
10263: PPUSH
10264: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
10268: LD_INT 190
10270: PPUSH
10271: LD_INT 31
10273: PPUSH
10274: LD_INT 1
10276: PPUSH
10277: LD_INT 20
10279: NEG
10280: PPUSH
10281: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
10285: LD_INT 190
10287: PPUSH
10288: LD_INT 31
10290: PPUSH
10291: LD_INT 1
10293: PPUSH
10294: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
10298: LD_INT 69
10300: PPUSH
10301: LD_INT 20
10303: PPUSH
10304: CALL_OW 84
// Wait ( 0 0$02 ) ;
10308: LD_INT 70
10310: PPUSH
10311: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
10315: LD_EXP 37
10319: PPUSH
10320: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
10324: LD_EXP 40
10328: PUSH
10329: LD_EXP 40
10333: PPUSH
10334: LD_EXP 51
10338: PPUSH
10339: CALL_OW 296
10343: PUSH
10344: LD_INT 20
10346: LESS
10347: AND
10348: PUSH
10349: LD_EXP 40
10353: PPUSH
10354: CALL_OW 302
10358: AND
10359: PUSH
10360: LD_EXP 40
10364: PUSH
10365: LD_EXP 4
10369: IN
10370: AND
10371: IFFALSE 10493
// begin ComFree ( Lisa ) ;
10373: LD_EXP 40
10377: PPUSH
10378: CALL_OW 139
// p := 0 ;
10382: LD_ADDR_VAR 0 2
10386: PUSH
10387: LD_INT 0
10389: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10390: LD_INT 35
10392: PPUSH
10393: CALL_OW 67
// p := p + 1 ;
10397: LD_ADDR_VAR 0 2
10401: PUSH
10402: LD_VAR 0 2
10406: PUSH
10407: LD_INT 1
10409: PLUS
10410: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10411: LD_EXP 40
10415: PPUSH
10416: LD_EXP 51
10420: PPUSH
10421: CALL_OW 296
10425: PUSH
10426: LD_INT 7
10428: LESS
10429: PUSH
10430: LD_VAR 0 2
10434: PUSH
10435: LD_INT 7
10437: GREATER
10438: OR
10439: IFFALSE 10390
// Say ( Lisa , D6-Lisa-1 ) ;
10441: LD_EXP 40
10445: PPUSH
10446: LD_STRING D6-Lisa-1
10448: PPUSH
10449: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10453: LD_EXP 40
10457: PPUSH
10458: LD_EXP 51
10462: PPUSH
10463: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10467: LD_EXP 51
10471: PPUSH
10472: LD_EXP 40
10476: PPUSH
10477: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10481: LD_EXP 51
10485: PPUSH
10486: LD_STRING D6-Frank-2
10488: PPUSH
10489: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10493: LD_EXP 47
10497: PUSH
10498: LD_EXP 47
10502: PPUSH
10503: LD_EXP 51
10507: PPUSH
10508: CALL_OW 296
10512: PUSH
10513: LD_INT 20
10515: LESS
10516: AND
10517: PUSH
10518: LD_EXP 47
10522: PPUSH
10523: CALL_OW 302
10527: AND
10528: IFFALSE 10721
// begin ComTurnUnit ( Lynch , JMM ) ;
10530: LD_EXP 47
10534: PPUSH
10535: LD_EXP 37
10539: PPUSH
10540: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10544: LD_EXP 51
10548: PPUSH
10549: LD_EXP 37
10553: PPUSH
10554: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10558: LD_EXP 47
10562: PPUSH
10563: LD_STRING D6-Sol1-2
10565: PPUSH
10566: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10570: LD_EXP 37
10574: PPUSH
10575: LD_STRING D6-JMM-2
10577: PPUSH
10578: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10582: LD_EXP 51
10586: PPUSH
10587: LD_STRING D6-Frank-3
10589: PPUSH
10590: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10594: LD_EXP 37
10598: PPUSH
10599: LD_STRING D6-JMM-3
10601: PPUSH
10602: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10606: LD_EXP 51
10610: PPUSH
10611: LD_STRING D6-Frank-4
10613: PPUSH
10614: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10618: LD_EXP 51
10622: PPUSH
10623: LD_STRING D6-Frank-4a
10625: PPUSH
10626: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10630: LD_EXP 37
10634: PPUSH
10635: LD_STRING D6-JMM-4
10637: PPUSH
10638: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10642: LD_EXP 51
10646: PPUSH
10647: LD_STRING D6-Frank-5
10649: PPUSH
10650: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10654: LD_EXP 40
10658: PUSH
10659: LD_EXP 40
10663: PPUSH
10664: CALL_OW 302
10668: AND
10669: PUSH
10670: LD_EXP 40
10674: PUSH
10675: LD_EXP 4
10679: IN
10680: AND
10681: IFFALSE 10695
// Say ( Lisa , D6-Lisa-5 ) ;
10683: LD_EXP 40
10687: PPUSH
10688: LD_STRING D6-Lisa-5
10690: PPUSH
10691: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10695: LD_EXP 51
10699: PPUSH
10700: LD_STRING D6-Frank-6
10702: PPUSH
10703: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10707: LD_EXP 37
10711: PPUSH
10712: LD_STRING D6-JMM-6
10714: PPUSH
10715: CALL_OW 88
// end else
10719: GO 10848
// begin ComTurnUnit ( Frank , JMM ) ;
10721: LD_EXP 51
10725: PPUSH
10726: LD_EXP 37
10730: PPUSH
10731: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10735: LD_EXP 51
10739: PPUSH
10740: LD_STRING D6-Frank-4
10742: PPUSH
10743: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10747: LD_EXP 51
10751: PPUSH
10752: LD_STRING D6-Frank-4a
10754: PPUSH
10755: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10759: LD_EXP 37
10763: PPUSH
10764: LD_STRING D6-JMM-4
10766: PPUSH
10767: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10771: LD_EXP 51
10775: PPUSH
10776: LD_STRING D6-Frank-5
10778: PPUSH
10779: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10783: LD_EXP 40
10787: PUSH
10788: LD_EXP 40
10792: PPUSH
10793: CALL_OW 302
10797: AND
10798: PUSH
10799: LD_EXP 40
10803: PUSH
10804: LD_EXP 4
10808: IN
10809: AND
10810: IFFALSE 10824
// Say ( Lisa , D6-Lisa-5 ) ;
10812: LD_EXP 40
10816: PPUSH
10817: LD_STRING D6-Lisa-5
10819: PPUSH
10820: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10824: LD_EXP 51
10828: PPUSH
10829: LD_STRING D6-Frank-6
10831: PPUSH
10832: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10836: LD_EXP 37
10840: PPUSH
10841: LD_STRING D6-JMM-6
10843: PPUSH
10844: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10848: LD_STRING Q1
10850: PPUSH
10851: CALL_OW 97
10855: PUSH
10856: LD_INT 1
10858: DOUBLE
10859: EQUAL
10860: IFTRUE 10864
10862: GO 10875
10864: POP
// frank_send_to_scout := true ; 2 :
10865: LD_ADDR_EXP 15
10869: PUSH
10870: LD_INT 1
10872: ST_TO_ADDR
10873: GO 10895
10875: LD_INT 2
10877: DOUBLE
10878: EQUAL
10879: IFTRUE 10883
10881: GO 10894
10883: POP
// frank_send_to_scout := false ; end ;
10884: LD_ADDR_EXP 15
10888: PUSH
10889: LD_INT 0
10891: ST_TO_ADDR
10892: GO 10895
10894: POP
// Video ( false ) ;
10895: LD_INT 0
10897: PPUSH
10898: CALL 76448 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10902: LD_EXP 37
10906: PUSH
10907: LD_EXP 40
10911: PUSH
10912: LD_EXP 47
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: LIST
10921: PPUSH
10922: CALL_OW 139
// if frank_send_to_scout then
10926: LD_EXP 15
10930: IFFALSE 10984
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10932: LD_EXP 51
10936: PPUSH
10937: LD_INT 15
10939: PPUSH
10940: CALL_OW 113
// wait ( 0 0$01 ) ;
10944: LD_INT 35
10946: PPUSH
10947: CALL_OW 67
// until not See ( 1 , Frank ) ;
10951: LD_INT 1
10953: PPUSH
10954: LD_EXP 51
10958: PPUSH
10959: CALL_OW 292
10963: NOT
10964: IFFALSE 10932
// wait ( 0 0$02 ) ;
10966: LD_INT 70
10968: PPUSH
10969: CALL_OW 67
// RemoveUnit ( Frank ) ;
10973: LD_EXP 51
10977: PPUSH
10978: CALL_OW 64
// end else
10982: GO 10996
// SetSide ( Frank , 1 ) ;
10984: LD_EXP 51
10988: PPUSH
10989: LD_INT 1
10991: PPUSH
10992: CALL_OW 235
// send_attack_on_cornel_base := true ;
10996: LD_ADDR_EXP 26
11000: PUSH
11001: LD_INT 1
11003: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11004: LD_INT 35
11006: PPUSH
11007: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
11011: LD_ADDR_EXP 29
11015: PUSH
11016: LD_EXP 29
11020: PPUSH
11021: LD_STRING -
11023: PPUSH
11024: CALL 1077 0 2
11028: ST_TO_ADDR
// if debug then
11029: LD_EXP 1
11033: IFFALSE 11045
// debug_strings := time_to_prepare ;
11035: LD_ADDR_OWVAR 48
11039: PUSH
11040: LD_EXP 29
11044: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
11045: LD_EXP 29
11049: PUSH
11050: LD_INT 0
11052: EQUAL
11053: IFFALSE 11004
// cornel_prepared := true ;
11055: LD_ADDR_EXP 11
11059: PUSH
11060: LD_INT 1
11062: ST_TO_ADDR
// end ;
11063: PPOPN 3
11065: END
// every 0 0$01 trigger cornel_prepared do
11066: LD_EXP 11
11070: IFFALSE 11378
11072: GO 11074
11074: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
11075: LD_EXP 44
11079: PPUSH
11080: LD_STRING D3-Corn-1
11082: PPUSH
11083: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
11087: LD_STRING MOutWait
11089: PPUSH
11090: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
11094: LD_INT 35
11096: PPUSH
11097: CALL_OW 67
// until cornel_counter = 0 ;
11101: LD_EXP 10
11105: PUSH
11106: LD_INT 0
11108: EQUAL
11109: IFFALSE 11094
// SayRadio ( Cornel , D3a-Corn-1 ) ;
11111: LD_EXP 44
11115: PPUSH
11116: LD_STRING D3a-Corn-1
11118: PPUSH
11119: CALL_OW 94
// if IsOk ( Cornel ) then
11123: LD_EXP 44
11127: PPUSH
11128: CALL_OW 302
11132: IFFALSE 11146
// Say ( JMM , D3a-JMM-1 ) ;
11134: LD_EXP 37
11138: PPUSH
11139: LD_STRING D3a-JMM-1
11141: PPUSH
11142: CALL_OW 88
// end_mission_allowed := true ;
11146: LD_ADDR_EXP 21
11150: PUSH
11151: LD_INT 1
11153: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
11154: LD_STRING M2
11156: PPUSH
11157: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
11161: LD_INT 9
11163: PPUSH
11164: LD_INT 1
11166: PPUSH
11167: CALL_OW 424
// Wait ( 0 0$05 ) ;
11171: LD_INT 175
11173: PPUSH
11174: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
11178: LD_EXP 44
11182: PPUSH
11183: LD_STRING D3a-Corn-2
11185: PPUSH
11186: CALL_OW 94
// cornel_attack := true ;
11190: LD_ADDR_EXP 9
11194: PUSH
11195: LD_INT 1
11197: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
11198: LD_INT 105
11200: PPUSH
11201: CALL_OW 67
// AddMoreTanks ( ) ;
11205: CALL 5335 0 0
// if frank_send_to_scout then
11209: LD_EXP 15
11213: IFFALSE 11378
// begin InitHc ;
11215: CALL_OW 19
// InitUc ;
11219: CALL_OW 18
// uc_side := 8 ;
11223: LD_ADDR_OWVAR 20
11227: PUSH
11228: LD_INT 8
11230: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
11231: LD_ADDR_EXP 51
11235: PUSH
11236: LD_STRING Frank
11238: PPUSH
11239: LD_INT 0
11241: PPUSH
11242: LD_STRING 
11244: PPUSH
11245: CALL 39027 0 3
11249: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
11250: LD_EXP 51
11254: PPUSH
11255: LD_INT 6
11257: PPUSH
11258: LD_INT 9
11260: PPUSH
11261: LD_INT 0
11263: PPUSH
11264: CALL_OW 48
// ComCrawl ( Frank ) ;
11268: LD_EXP 51
11272: PPUSH
11273: CALL_OW 137
// repeat wait ( 10 ) ;
11277: LD_INT 10
11279: PPUSH
11280: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11284: LD_EXP 37
11288: PPUSH
11289: LD_EXP 51
11293: PPUSH
11294: CALL_OW 296
11298: PUSH
11299: LD_INT 9
11301: LESS
11302: PUSH
11303: LD_INT 9
11305: PPUSH
11306: LD_INT 22
11308: PUSH
11309: LD_INT 1
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: PPUSH
11316: CALL_OW 70
11320: OR
11321: IFFALSE 11277
// if IsDead ( Frank ) then
11323: LD_EXP 51
11327: PPUSH
11328: CALL_OW 301
11332: IFFALSE 11336
// exit ;
11334: GO 11378
// CenterOnUnits ( Frank ) ;
11336: LD_EXP 51
11340: PPUSH
11341: CALL_OW 85
// SetSide ( Frank , 1 ) ;
11345: LD_EXP 51
11349: PPUSH
11350: LD_INT 1
11352: PPUSH
11353: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
11357: LD_EXP 51
11361: PPUSH
11362: LD_STRING D6a-Frank-1
11364: PPUSH
11365: CALL_OW 88
// ComWalk ( Frank ) ;
11369: LD_EXP 51
11373: PPUSH
11374: CALL_OW 138
// end ; end ;
11378: END
// every 0 0$01 trigger solar_builded do
11379: LD_EXP 14
11383: IFFALSE 11487
11385: GO 11387
11387: DISABLE
// begin Wait ( 0 0$02 ) ;
11388: LD_INT 70
11390: PPUSH
11391: CALL_OW 67
// DialogueOn ;
11395: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11399: LD_EXP 37
11403: PPUSH
11404: LD_STRING D2b-JMM-1
11406: PPUSH
11407: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11411: LD_EXP 48
11415: PUSH
11416: LD_EXP 48
11420: PPUSH
11421: CALL_OW 302
11425: AND
11426: IFFALSE 11476
// begin Say ( Walker , D2b-Sci1-1 ) ;
11428: LD_EXP 48
11432: PPUSH
11433: LD_STRING D2b-Sci1-1
11435: PPUSH
11436: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11440: LD_EXP 37
11444: PPUSH
11445: LD_STRING D2b-JMM-2
11447: PPUSH
11448: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11452: LD_EXP 48
11456: PPUSH
11457: LD_STRING D2b-Sci1-2
11459: PPUSH
11460: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11464: LD_EXP 37
11468: PPUSH
11469: LD_STRING D2b-JMM-3
11471: PPUSH
11472: CALL_OW 88
// end ; DialogueOff ;
11476: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11480: LD_STRING MOutSol
11482: PPUSH
11483: CALL_OW 337
// end ;
11487: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11488: LD_EXP 14
11492: PUSH
11493: LD_EXP 37
11497: PPUSH
11498: CALL_OW 302
11502: AND
11503: PUSH
11504: LD_EXP 37
11508: PPUSH
11509: CALL 911 0 1
11513: AND
11514: PUSH
11515: LD_EXP 16
11519: NOT
11520: AND
11521: IFFALSE 11592
11523: GO 11525
11525: DISABLE
11526: LD_INT 0
11528: PPUSH
// begin jmm_in_veh := true ;
11529: LD_ADDR_EXP 16
11533: PUSH
11534: LD_INT 1
11536: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11537: LD_ADDR_VAR 0 1
11541: PUSH
11542: LD_INT 0
11544: PPUSH
11545: LD_INT 1
11547: PPUSH
11548: CALL_OW 12
11552: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11553: LD_INT 70
11555: PPUSH
11556: CALL_OW 67
// if i then
11560: LD_VAR 0 1
11564: IFFALSE 11580
// Say ( JMM , D2c-JMM-1 ) else
11566: LD_EXP 37
11570: PPUSH
11571: LD_STRING D2c-JMM-1
11573: PPUSH
11574: CALL_OW 88
11578: GO 11592
// Say ( JMM , D2c-JMM-1a ) ;
11580: LD_EXP 37
11584: PPUSH
11585: LD_STRING D2c-JMM-1a
11587: PPUSH
11588: CALL_OW 88
// end ;
11592: PPOPN 1
11594: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11595: LD_EXP 14
11599: PUSH
11600: LD_EXP 38
11604: PPUSH
11605: CALL_OW 302
11609: AND
11610: PUSH
11611: LD_EXP 38
11615: PPUSH
11616: CALL 911 0 1
11620: AND
11621: PUSH
11622: LD_EXP 17
11626: NOT
11627: AND
11628: IFFALSE 11660
11630: GO 11632
11632: DISABLE
// begin bobby_in_veh := true ;
11633: LD_ADDR_EXP 17
11637: PUSH
11638: LD_INT 1
11640: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11641: LD_INT 70
11643: PPUSH
11644: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11648: LD_EXP 38
11652: PPUSH
11653: LD_STRING D2c-Bobby-1
11655: PPUSH
11656: CALL_OW 88
11660: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11661: LD_EXP 14
11665: PUSH
11666: LD_EXP 40
11670: PPUSH
11671: CALL_OW 302
11675: AND
11676: PUSH
11677: LD_EXP 40
11681: PPUSH
11682: CALL 911 0 1
11686: AND
11687: PUSH
11688: LD_EXP 19
11692: NOT
11693: AND
11694: IFFALSE 11726
11696: GO 11698
11698: DISABLE
// begin lisa_in_veh := true ;
11699: LD_ADDR_EXP 19
11703: PUSH
11704: LD_INT 1
11706: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11707: LD_INT 70
11709: PPUSH
11710: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11714: LD_EXP 40
11718: PPUSH
11719: LD_STRING D2c-Lisa-1
11721: PPUSH
11722: CALL_OW 88
11726: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11727: LD_EXP 14
11731: PUSH
11732: LD_EXP 39
11736: PPUSH
11737: CALL_OW 302
11741: AND
11742: PUSH
11743: LD_EXP 39
11747: PPUSH
11748: CALL 911 0 1
11752: AND
11753: PUSH
11754: LD_EXP 18
11758: NOT
11759: AND
11760: IFFALSE 11831
11762: GO 11764
11764: DISABLE
11765: LD_INT 0
11767: PPUSH
// begin cyrus_in_veh := true ;
11768: LD_ADDR_EXP 18
11772: PUSH
11773: LD_INT 1
11775: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11776: LD_ADDR_VAR 0 1
11780: PUSH
11781: LD_INT 0
11783: PPUSH
11784: LD_INT 1
11786: PPUSH
11787: CALL_OW 12
11791: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11792: LD_INT 70
11794: PPUSH
11795: CALL_OW 67
// if i then
11799: LD_VAR 0 1
11803: IFFALSE 11819
// Say ( Cyrus , D2c-Cyrus-1 ) else
11805: LD_EXP 39
11809: PPUSH
11810: LD_STRING D2c-Cyrus-1
11812: PPUSH
11813: CALL_OW 88
11817: GO 11831
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11819: LD_EXP 39
11823: PPUSH
11824: LD_STRING D2c-Cyrus-1a
11826: PPUSH
11827: CALL_OW 88
// end ;
11831: PPOPN 1
11833: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11834: LD_EXP 44
11838: PPUSH
11839: LD_INT 16
11841: PPUSH
11842: CALL_OW 308
11846: IFFALSE 12127
11848: GO 11850
11850: DISABLE
11851: LD_INT 0
11853: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11854: LD_INT 3
11856: PPUSH
11857: LD_EXP 44
11861: PPUSH
11862: CALL_OW 471
// send_attack_on_cornel := true ;
11866: LD_ADDR_EXP 32
11870: PUSH
11871: LD_INT 1
11873: ST_TO_ADDR
// if ru_vehicles then
11874: LD_EXP 56
11878: IFFALSE 11912
// for i in ru_vehicles do
11880: LD_ADDR_VAR 0 1
11884: PUSH
11885: LD_EXP 56
11889: PUSH
11890: FOR_IN
11891: IFFALSE 11910
// ComAgressiveMove ( i , 215 , 69 ) ;
11893: LD_VAR 0 1
11897: PPUSH
11898: LD_INT 215
11900: PPUSH
11901: LD_INT 69
11903: PPUSH
11904: CALL_OW 114
11908: GO 11890
11910: POP
11911: POP
// if ru_patrol then
11912: LD_EXP 53
11916: IFFALSE 11950
// for i in ru_patrol do
11918: LD_ADDR_VAR 0 1
11922: PUSH
11923: LD_EXP 53
11927: PUSH
11928: FOR_IN
11929: IFFALSE 11948
// ComAgressiveMove ( i , 215 , 69 ) ;
11931: LD_VAR 0 1
11935: PPUSH
11936: LD_INT 215
11938: PPUSH
11939: LD_INT 69
11941: PPUSH
11942: CALL_OW 114
11946: GO 11928
11948: POP
11949: POP
// if frank_send_to_scout then
11950: LD_EXP 15
11954: IFFALSE 11968
// SayRadio ( Frank , D3b-Frank-1 ) ;
11956: LD_EXP 51
11960: PPUSH
11961: LD_STRING D3b-Frank-1
11963: PPUSH
11964: CALL_OW 94
// wait ( 0 0$03 ) ;
11968: LD_INT 105
11970: PPUSH
11971: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11975: LD_EXP 44
11979: PPUSH
11980: LD_STRING D4-Corn-1
11982: PPUSH
11983: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11987: LD_INT 35
11989: PPUSH
11990: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11994: LD_INT 22
11996: PUSH
11997: LD_INT 4
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 21
12006: PUSH
12007: LD_INT 1
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 3
12016: PUSH
12017: LD_INT 24
12019: PUSH
12020: LD_INT 1000
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: LIST
12035: PPUSH
12036: CALL_OW 69
12040: PUSH
12041: LD_INT 6
12043: LESS
12044: IFFALSE 11987
// if Cornel then
12046: LD_EXP 44
12050: IFFALSE 12090
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
12052: LD_EXP 44
12056: PPUSH
12057: LD_STRING D5-Corn-1
12059: PPUSH
12060: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
12064: LD_EXP 44
12068: PPUSH
12069: LD_EXP 2
12073: PUSH
12074: LD_STRING Cornel
12076: STR
12077: PPUSH
12078: CALL_OW 38
// cornel_saved := true ;
12082: LD_ADDR_EXP 27
12086: PUSH
12087: LD_INT 1
12089: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
12090: LD_INT 4
12092: PPUSH
12093: LD_INT 8
12095: PPUSH
12096: CALL_OW 343
// wait ( 0 0$01 ) ;
12100: LD_INT 35
12102: PPUSH
12103: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
12107: LD_INT 3
12109: PPUSH
12110: LD_EXP 44
12114: PPUSH
12115: CALL_OW 472
// send_attack_on_cornel := false ;
12119: LD_ADDR_EXP 32
12123: PUSH
12124: LD_INT 0
12126: ST_TO_ADDR
// end ;
12127: PPOPN 1
12129: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
12130: LD_INT 9
12132: PPUSH
12133: LD_INT 22
12135: PUSH
12136: LD_INT 1
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PPUSH
12143: CALL_OW 70
12147: PUSH
12148: LD_EXP 33
12152: OR
12153: IFFALSE 12374
12155: GO 12157
12157: DISABLE
12158: LD_INT 0
12160: PPUSH
12161: PPUSH
// begin enable ;
12162: ENABLE
// if not jmm_on_west then
12163: LD_EXP 5
12167: NOT
12168: IFFALSE 12179
// begin YouLost ( 4 ) ;
12170: LD_STRING 4
12172: PPUSH
12173: CALL_OW 104
// exit ;
12177: GO 12374
// end ; if not game_end then
12179: LD_EXP 33
12183: NOT
12184: IFFALSE 12194
// game_end := true ;
12186: LD_ADDR_EXP 33
12190: PUSH
12191: LD_INT 1
12193: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
12194: LD_ADDR_VAR 0 2
12198: PUSH
12199: LD_INT 9
12201: PPUSH
12202: LD_INT 22
12204: PUSH
12205: LD_INT 1
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PPUSH
12212: CALL_OW 70
12216: ST_TO_ADDR
// if not filter then
12217: LD_VAR 0 2
12221: NOT
12222: IFFALSE 12226
// exit ;
12224: GO 12374
// for i in filter do
12226: LD_ADDR_VAR 0 1
12230: PUSH
12231: LD_VAR 0 2
12235: PUSH
12236: FOR_IN
12237: IFFALSE 12372
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
12239: LD_VAR 0 1
12243: PPUSH
12244: CALL_OW 302
12248: PUSH
12249: LD_VAR 0 1
12253: PPUSH
12254: CALL_OW 247
12258: PUSH
12259: LD_INT 2
12261: EQUAL
12262: AND
12263: IFFALSE 12335
// begin if i = JMM and save_group < 4 then
12265: LD_VAR 0 1
12269: PUSH
12270: LD_EXP 37
12274: EQUAL
12275: PUSH
12276: LD_EXP 23
12280: PUSH
12281: LD_INT 4
12283: LESS
12284: AND
12285: IFFALSE 12289
// continue ;
12287: GO 12236
// if GetNation ( i ) = nation_american then
12289: LD_VAR 0 1
12293: PPUSH
12294: CALL_OW 248
12298: PUSH
12299: LD_INT 1
12301: EQUAL
12302: IFFALSE 12312
// veh_on_meta := true ;
12304: LD_ADDR_EXP 28
12308: PUSH
12309: LD_INT 1
12311: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
12312: LD_VAR 0 1
12316: PPUSH
12317: CALL_OW 311
12321: PPUSH
12322: CALL 12377 0 1
// RemoveUnit ( i ) ;
12326: LD_VAR 0 1
12330: PPUSH
12331: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
12335: LD_VAR 0 1
12339: PPUSH
12340: CALL_OW 302
12344: PUSH
12345: LD_VAR 0 1
12349: PPUSH
12350: CALL_OW 247
12354: PUSH
12355: LD_INT 1
12357: EQUAL
12358: AND
12359: IFFALSE 12370
// Save ( i ) ;
12361: LD_VAR 0 1
12365: PPUSH
12366: CALL 12377 0 1
// end ;
12370: GO 12236
12372: POP
12373: POP
// end ;
12374: PPOPN 2
12376: END
// export function Save ( i ) ; begin
12377: LD_INT 0
12379: PPUSH
// if i = JMM and save_group >= 4 then
12380: LD_VAR 0 1
12384: PUSH
12385: LD_EXP 37
12389: EQUAL
12390: PUSH
12391: LD_EXP 23
12395: PUSH
12396: LD_INT 4
12398: GREATEREQUAL
12399: AND
12400: IFFALSE 12536
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12402: LD_EXP 24
12406: PUSH
12407: LD_INT 22
12409: PUSH
12410: LD_INT 1
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: LD_INT 21
12419: PUSH
12420: LD_INT 1
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PPUSH
12431: CALL_OW 69
12435: PUSH
12436: LD_INT 1
12438: GREATER
12439: AND
12440: IFFALSE 12497
// begin show_query := false ;
12442: LD_ADDR_EXP 24
12446: PUSH
12447: LD_INT 0
12449: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12450: LD_STRING Q2
12452: PPUSH
12453: CALL_OW 97
12457: PUSH
12458: LD_INT 1
12460: DOUBLE
12461: EQUAL
12462: IFTRUE 12466
12464: GO 12477
12466: POP
// wait_for_them := true ; 2 :
12467: LD_ADDR_EXP 25
12471: PUSH
12472: LD_INT 1
12474: ST_TO_ADDR
12475: GO 12497
12477: LD_INT 2
12479: DOUBLE
12480: EQUAL
12481: IFTRUE 12485
12483: GO 12496
12485: POP
// wait_for_them := false ; end ;
12486: LD_ADDR_EXP 25
12490: PUSH
12491: LD_INT 0
12493: ST_TO_ADDR
12494: GO 12497
12496: POP
// end ; save_counter := save_counter + 1 ;
12497: LD_ADDR_EXP 36
12501: PUSH
12502: LD_EXP 36
12506: PUSH
12507: LD_INT 1
12509: PLUS
12510: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12511: LD_ADDR_EXP 23
12515: PUSH
12516: LD_EXP 23
12520: PUSH
12521: LD_EXP 37
12525: ADD
12526: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12527: LD_EXP 37
12531: PPUSH
12532: CALL_OW 64
// end ; if i = Lisa then
12536: LD_VAR 0 1
12540: PUSH
12541: LD_EXP 40
12545: EQUAL
12546: IFFALSE 12587
// begin save_counter := save_counter + 1 ;
12548: LD_ADDR_EXP 36
12552: PUSH
12553: LD_EXP 36
12557: PUSH
12558: LD_INT 1
12560: PLUS
12561: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12562: LD_ADDR_EXP 23
12566: PUSH
12567: LD_EXP 23
12571: PUSH
12572: LD_EXP 40
12576: ADD
12577: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12578: LD_EXP 40
12582: PPUSH
12583: CALL_OW 64
// end ; if i = Bobby then
12587: LD_VAR 0 1
12591: PUSH
12592: LD_EXP 38
12596: EQUAL
12597: IFFALSE 12638
// begin save_counter := save_counter + 1 ;
12599: LD_ADDR_EXP 36
12603: PUSH
12604: LD_EXP 36
12608: PUSH
12609: LD_INT 1
12611: PLUS
12612: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12613: LD_ADDR_EXP 23
12617: PUSH
12618: LD_EXP 23
12622: PUSH
12623: LD_EXP 38
12627: ADD
12628: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12629: LD_EXP 38
12633: PPUSH
12634: CALL_OW 64
// end ; if i = Cyrus then
12638: LD_VAR 0 1
12642: PUSH
12643: LD_EXP 39
12647: EQUAL
12648: IFFALSE 12689
// begin save_counter := save_counter + 1 ;
12650: LD_ADDR_EXP 36
12654: PUSH
12655: LD_EXP 36
12659: PUSH
12660: LD_INT 1
12662: PLUS
12663: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12664: LD_ADDR_EXP 23
12668: PUSH
12669: LD_EXP 23
12673: PUSH
12674: LD_EXP 39
12678: ADD
12679: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12680: LD_EXP 39
12684: PPUSH
12685: CALL_OW 64
// end ; if i = Khatam then
12689: LD_VAR 0 1
12693: PUSH
12694: LD_EXP 41
12698: EQUAL
12699: IFFALSE 12740
// begin save_counter := save_counter + 1 ;
12701: LD_ADDR_EXP 36
12705: PUSH
12706: LD_EXP 36
12710: PUSH
12711: LD_INT 1
12713: PLUS
12714: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12715: LD_ADDR_EXP 23
12719: PUSH
12720: LD_EXP 23
12724: PUSH
12725: LD_EXP 41
12729: ADD
12730: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12731: LD_EXP 41
12735: PPUSH
12736: CALL_OW 64
// end ; if i = Frank then
12740: LD_VAR 0 1
12744: PUSH
12745: LD_EXP 51
12749: EQUAL
12750: IFFALSE 12791
// begin save_counter := save_counter + 1 ;
12752: LD_ADDR_EXP 36
12756: PUSH
12757: LD_EXP 36
12761: PUSH
12762: LD_INT 1
12764: PLUS
12765: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12766: LD_ADDR_EXP 23
12770: PUSH
12771: LD_EXP 23
12775: PUSH
12776: LD_EXP 51
12780: ADD
12781: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12782: LD_EXP 51
12786: PPUSH
12787: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12791: LD_VAR 0 1
12795: PUSH
12796: LD_EXP 37
12800: NONEQUAL
12801: PUSH
12802: LD_VAR 0 1
12806: PPUSH
12807: CALL_OW 302
12811: AND
12812: PUSH
12813: LD_VAR 0 1
12817: PPUSH
12818: CALL_OW 247
12822: PUSH
12823: LD_INT 1
12825: EQUAL
12826: AND
12827: PUSH
12828: LD_VAR 0 1
12832: PUSH
12833: LD_EXP 23
12837: IN
12838: NOT
12839: AND
12840: IFFALSE 12881
// begin save_counter := save_counter + 1 ;
12842: LD_ADDR_EXP 36
12846: PUSH
12847: LD_EXP 36
12851: PUSH
12852: LD_INT 1
12854: PLUS
12855: ST_TO_ADDR
// save_others := save_others ^ i ;
12856: LD_ADDR_EXP 22
12860: PUSH
12861: LD_EXP 22
12865: PUSH
12866: LD_VAR 0 1
12870: ADD
12871: ST_TO_ADDR
// RemoveUnit ( i ) ;
12872: LD_VAR 0 1
12876: PPUSH
12877: CALL_OW 64
// end ; end ;
12881: LD_VAR 0 2
12885: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12886: LD_EXP 24
12890: NOT
12891: PUSH
12892: LD_EXP 25
12896: NOT
12897: AND
12898: PUSH
12899: LD_INT 22
12901: PUSH
12902: LD_INT 1
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PUSH
12909: LD_INT 21
12911: PUSH
12912: LD_INT 1
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PPUSH
12923: CALL_OW 69
12927: PUSH
12928: LD_INT 0
12930: EQUAL
12931: OR
12932: IFFALSE 12941
12934: GO 12936
12936: DISABLE
// EndMission ;
12937: CALL 12942 0 0
12941: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12942: LD_INT 0
12944: PPUSH
12945: PPUSH
12946: PPUSH
12947: PPUSH
12948: PPUSH
// wait ( 0 0$01 ) ;
12949: LD_INT 35
12951: PPUSH
12952: CALL_OW 67
// if tick <= 12 12$00 then
12956: LD_OWVAR 1
12960: PUSH
12961: LD_INT 25200
12963: LESSEQUAL
12964: IFFALSE 12973
// SetAchievement ( ACH_ASPEED_3 ) ;
12966: LD_STRING ACH_ASPEED_3
12968: PPUSH
12969: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12973: LD_EXP 23
12977: PUSH
12978: LD_EXP 22
12982: ADD
12983: PPUSH
12984: LD_INT 25
12986: PUSH
12987: LD_INT 4
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: PPUSH
12994: CALL_OW 72
12998: PUSH
12999: LD_INT 0
13001: EQUAL
13002: IFFALSE 13018
// begin wait ( 3 ) ;
13004: LD_INT 3
13006: PPUSH
13007: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
13011: LD_STRING ACH_NOSCI
13013: PPUSH
13014: CALL_OW 543
// end ; m1 := solar_builded ;
13018: LD_ADDR_VAR 0 3
13022: PUSH
13023: LD_EXP 14
13027: ST_TO_ADDR
// m2 := veh_on_meta ;
13028: LD_ADDR_VAR 0 4
13032: PUSH
13033: LD_EXP 28
13037: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
13038: LD_ADDR_VAR 0 5
13042: PUSH
13043: LD_EXP 34
13047: PUSH
13048: LD_INT 0
13050: EQUAL
13051: ST_TO_ADDR
// if solar_builded then
13052: LD_EXP 14
13056: IFFALSE 13070
// AddMedal ( Solar1 , 1 ) else
13058: LD_STRING Solar1
13060: PPUSH
13061: LD_INT 1
13063: PPUSH
13064: CALL_OW 101
13068: GO 13081
// AddMedal ( Solar1 , - 1 ) ;
13070: LD_STRING Solar1
13072: PPUSH
13073: LD_INT 1
13075: NEG
13076: PPUSH
13077: CALL_OW 101
// if veh_on_meta then
13081: LD_EXP 28
13085: IFFALSE 13099
// AddMedal ( Solar2 , 1 ) else
13087: LD_STRING Solar2
13089: PPUSH
13090: LD_INT 1
13092: PPUSH
13093: CALL_OW 101
13097: GO 13129
// if solar_builded then
13099: LD_EXP 14
13103: IFFALSE 13118
// AddMedal ( Solar2 , - 1 ) else
13105: LD_STRING Solar2
13107: PPUSH
13108: LD_INT 1
13110: NEG
13111: PPUSH
13112: CALL_OW 101
13116: GO 13129
// AddMedal ( Solar2 , - 2 ) ;
13118: LD_STRING Solar2
13120: PPUSH
13121: LD_INT 2
13123: NEG
13124: PPUSH
13125: CALL_OW 101
// if lose_counter = 0 then
13129: LD_EXP 34
13133: PUSH
13134: LD_INT 0
13136: EQUAL
13137: IFFALSE 13151
// AddMedal ( No , 1 ) else
13139: LD_STRING No
13141: PPUSH
13142: LD_INT 1
13144: PPUSH
13145: CALL_OW 101
13149: GO 13195
// if lose_counter > 0 and lose_counter < 4 then
13151: LD_EXP 34
13155: PUSH
13156: LD_INT 0
13158: GREATER
13159: PUSH
13160: LD_EXP 34
13164: PUSH
13165: LD_INT 4
13167: LESS
13168: AND
13169: IFFALSE 13184
// AddMedal ( No , - 1 ) else
13171: LD_STRING No
13173: PPUSH
13174: LD_INT 1
13176: NEG
13177: PPUSH
13178: CALL_OW 101
13182: GO 13195
// AddMedal ( UpTo4 , - 1 ) ;
13184: LD_STRING UpTo4
13186: PPUSH
13187: LD_INT 1
13189: NEG
13190: PPUSH
13191: CALL_OW 101
// GiveMedals ( MAIN ) ;
13195: LD_STRING MAIN
13197: PPUSH
13198: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
13202: LD_OWVAR 67
13206: PUSH
13207: LD_INT 3
13209: GREATEREQUAL
13210: PUSH
13211: LD_VAR 0 3
13215: AND
13216: PUSH
13217: LD_VAR 0 4
13221: AND
13222: PUSH
13223: LD_VAR 0 5
13227: AND
13228: IFFALSE 13240
// SetAchievementEX ( ACH_AMER , 3 ) ;
13230: LD_STRING ACH_AMER
13232: PPUSH
13233: LD_INT 3
13235: PPUSH
13236: CALL_OW 564
// if IsDead ( Pokryshkin ) then
13240: LD_EXP 52
13244: PPUSH
13245: CALL_OW 301
13249: IFFALSE 13305
// begin stop_talking := true ;
13251: LD_ADDR_OWVAR 56
13255: PUSH
13256: LD_INT 1
13258: ST_TO_ADDR
// for i in save_group union save_others do
13259: LD_ADDR_VAR 0 2
13263: PUSH
13264: LD_EXP 23
13268: PUSH
13269: LD_EXP 22
13273: UNION
13274: PUSH
13275: FOR_IN
13276: IFFALSE 13295
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
13278: LD_VAR 0 2
13282: PPUSH
13283: LD_INT 1
13285: PPUSH
13286: LD_INT 1500
13288: PPUSH
13289: CALL_OW 591
13293: GO 13275
13295: POP
13296: POP
// stop_talking := false ;
13297: LD_ADDR_OWVAR 56
13301: PUSH
13302: LD_INT 0
13304: ST_TO_ADDR
// end ; RewardPeople ( save_group ^ save_others ) ;
13305: LD_EXP 23
13309: PUSH
13310: LD_EXP 22
13314: ADD
13315: PPUSH
13316: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
13320: LD_EXP 37
13324: PPUSH
13325: LD_EXP 2
13329: PUSH
13330: LD_STRING JMM
13332: STR
13333: PPUSH
13334: CALL_OW 38
// if Bobby in save_group then
13338: LD_EXP 38
13342: PUSH
13343: LD_EXP 23
13347: IN
13348: IFFALSE 13368
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
13350: LD_EXP 38
13354: PPUSH
13355: LD_EXP 2
13359: PUSH
13360: LD_STRING Bobby
13362: STR
13363: PPUSH
13364: CALL_OW 38
// if Cyrus in save_group then
13368: LD_EXP 39
13372: PUSH
13373: LD_EXP 23
13377: IN
13378: IFFALSE 13398
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
13380: LD_EXP 39
13384: PPUSH
13385: LD_EXP 2
13389: PUSH
13390: LD_STRING Cyrus
13392: STR
13393: PPUSH
13394: CALL_OW 38
// if Lisa in save_group then
13398: LD_EXP 40
13402: PUSH
13403: LD_EXP 23
13407: IN
13408: IFFALSE 13428
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13410: LD_EXP 40
13414: PPUSH
13415: LD_EXP 2
13419: PUSH
13420: LD_STRING Lisa
13422: STR
13423: PPUSH
13424: CALL_OW 38
// if Frank in save_group then
13428: LD_EXP 51
13432: PUSH
13433: LD_EXP 23
13437: IN
13438: IFFALSE 13458
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13440: LD_EXP 51
13444: PPUSH
13445: LD_EXP 2
13449: PUSH
13450: LD_STRING Frank
13452: STR
13453: PPUSH
13454: CALL_OW 38
// if Khatam in save_group then
13458: LD_EXP 41
13462: PUSH
13463: LD_EXP 23
13467: IN
13468: IFFALSE 13488
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13470: LD_EXP 41
13474: PPUSH
13475: LD_EXP 2
13479: PUSH
13480: LD_STRING Khatam
13482: STR
13483: PPUSH
13484: CALL_OW 38
// if save_others then
13488: LD_EXP 22
13492: IFFALSE 13506
// SaveCharacters ( save_others , 03_others ) ;
13494: LD_EXP 22
13498: PPUSH
13499: LD_STRING 03_others
13501: PPUSH
13502: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13506: LD_EXP 45
13510: PUSH
13511: LD_EXP 45
13515: PPUSH
13516: CALL_OW 302
13520: AND
13521: PUSH
13522: LD_EXP 27
13526: AND
13527: IFFALSE 13539
// begin ResetFog ;
13529: CALL_OW 335
// DisplayEndingScene ;
13533: CALL 13561 0 0
// end else
13537: GO 13552
// DeleteCharacters ( mission_prefix & Cornel ) ;
13539: LD_EXP 2
13543: PUSH
13544: LD_STRING Cornel
13546: STR
13547: PPUSH
13548: CALL_OW 40
// YouWin ;
13552: CALL_OW 103
// end ;
13556: LD_VAR 0 1
13560: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13561: LD_INT 0
13563: PPUSH
13564: PPUSH
13565: PPUSH
13566: PPUSH
13567: PPUSH
13568: PPUSH
// InGameOn ;
13569: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13573: LD_INT 208
13575: PPUSH
13576: LD_INT 62
13578: PPUSH
13579: LD_INT 1
13581: PPUSH
13582: LD_INT 10
13584: NEG
13585: PPUSH
13586: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13590: LD_INT 208
13592: PPUSH
13593: LD_INT 62
13595: PPUSH
13596: LD_INT 1
13598: PPUSH
13599: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13603: LD_ADDR_VAR 0 3
13607: PUSH
13608: LD_INT 22
13610: PUSH
13611: LD_INT 3
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PUSH
13618: LD_INT 2
13620: PUSH
13621: LD_INT 21
13623: PUSH
13624: LD_INT 2
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PUSH
13631: LD_INT 21
13633: PUSH
13634: LD_INT 1
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: PPUSH
13650: CALL_OW 69
13654: ST_TO_ADDR
// if filter then
13655: LD_VAR 0 3
13659: IFFALSE 13687
// for i in filter do
13661: LD_ADDR_VAR 0 2
13665: PUSH
13666: LD_VAR 0 3
13670: PUSH
13671: FOR_IN
13672: IFFALSE 13685
// RemoveUnit ( i ) ;
13674: LD_VAR 0 2
13678: PPUSH
13679: CALL_OW 64
13683: GO 13671
13685: POP
13686: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13687: LD_ADDR_VAR 0 3
13691: PUSH
13692: LD_INT 22
13694: PUSH
13695: LD_INT 4
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 21
13704: PUSH
13705: LD_INT 1
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PPUSH
13716: CALL_OW 69
13720: ST_TO_ADDR
// if filter then
13721: LD_VAR 0 3
13725: IFFALSE 13756
// for i in filter do
13727: LD_ADDR_VAR 0 2
13731: PUSH
13732: LD_VAR 0 3
13736: PUSH
13737: FOR_IN
13738: IFFALSE 13754
// SetLives ( i , 0 ) ;
13740: LD_VAR 0 2
13744: PPUSH
13745: LD_INT 0
13747: PPUSH
13748: CALL_OW 234
13752: GO 13737
13754: POP
13755: POP
// uc_side := 4 ;
13756: LD_ADDR_OWVAR 20
13760: PUSH
13761: LD_INT 4
13763: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13764: LD_ADDR_VAR 0 4
13768: PUSH
13769: LD_STRING Cornell
13771: PPUSH
13772: LD_INT 0
13774: PPUSH
13775: LD_STRING 
13777: PPUSH
13778: CALL 39027 0 3
13782: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13783: LD_VAR 0 4
13787: PPUSH
13788: LD_INT 208
13790: PPUSH
13791: LD_INT 62
13793: PPUSH
13794: LD_INT 0
13796: PPUSH
13797: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13801: LD_VAR 0 4
13805: PPUSH
13806: LD_INT 100
13808: PPUSH
13809: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13813: LD_INT 3
13815: PPUSH
13816: LD_VAR 0 4
13820: PPUSH
13821: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13825: LD_INT 4
13827: PPUSH
13828: LD_INT 3
13830: PPUSH
13831: LD_INT 1
13833: PPUSH
13834: LD_INT 1
13836: PPUSH
13837: CALL_OW 80
// uc_side := 3 ;
13841: LD_ADDR_OWVAR 20
13845: PUSH
13846: LD_INT 3
13848: ST_TO_ADDR
// uc_nation := 3 ;
13849: LD_ADDR_OWVAR 21
13853: PUSH
13854: LD_INT 3
13856: ST_TO_ADDR
// InitHc ;
13857: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13861: LD_ADDR_VAR 0 5
13865: PUSH
13866: LD_STRING Mikhail
13868: PPUSH
13869: LD_INT 0
13871: PPUSH
13872: LD_STRING 
13874: PPUSH
13875: CALL 39027 0 3
13879: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13880: LD_INT 1
13882: PPUSH
13883: LD_INT 1
13885: PPUSH
13886: LD_INT 0
13888: PPUSH
13889: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13893: LD_ADDR_VAR 0 6
13897: PUSH
13898: LD_VAR 0 6
13902: PUSH
13903: CALL_OW 44
13907: ADD
13908: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13909: LD_ADDR_VAR 0 6
13913: PUSH
13914: LD_VAR 0 6
13918: PUSH
13919: CALL_OW 44
13923: ADD
13924: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13925: LD_INT 2
13927: PPUSH
13928: LD_INT 4
13930: PPUSH
13931: LD_INT 0
13933: PPUSH
13934: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13938: LD_ADDR_VAR 0 6
13942: PUSH
13943: LD_VAR 0 6
13947: PUSH
13948: CALL_OW 44
13952: ADD
13953: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13954: LD_VAR 0 5
13958: PPUSH
13959: LD_INT 17
13961: PPUSH
13962: LD_INT 0
13964: PPUSH
13965: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13969: LD_VAR 0 5
13973: PPUSH
13974: LD_INT 210
13976: PPUSH
13977: LD_INT 63
13979: PPUSH
13980: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
13984: LD_VAR 0 5
13988: PPUSH
13989: LD_INT 208
13991: PPUSH
13992: LD_INT 62
13994: PPUSH
13995: CALL_OW 178
// for i in fake_russians do
13999: LD_ADDR_VAR 0 2
14003: PUSH
14004: LD_VAR 0 6
14008: PUSH
14009: FOR_IN
14010: IFFALSE 14088
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
14012: LD_VAR 0 2
14016: PPUSH
14017: LD_INT 17
14019: PPUSH
14020: LD_INT 0
14022: PPUSH
14023: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
14027: LD_VAR 0 2
14031: PPUSH
14032: LD_INT 215
14034: PPUSH
14035: LD_INT 67
14037: PPUSH
14038: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
14042: LD_VAR 0 2
14046: PPUSH
14047: LD_INT 208
14049: PPUSH
14050: LD_INT 62
14052: PPUSH
14053: CALL_OW 178
// if GetClass ( i ) = 4 then
14057: LD_VAR 0 2
14061: PPUSH
14062: CALL_OW 257
14066: PUSH
14067: LD_INT 4
14069: EQUAL
14070: IFFALSE 14086
// ComHeal ( i , fake_cornel ) ;
14072: LD_VAR 0 2
14076: PPUSH
14077: LD_VAR 0 4
14081: PPUSH
14082: CALL_OW 128
// end ;
14086: GO 14009
14088: POP
14089: POP
// Wait ( 0 0$01 ) ;
14090: LD_INT 35
14092: PPUSH
14093: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
14097: LD_INT 208
14099: PPUSH
14100: LD_INT 62
14102: PPUSH
14103: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
14107: LD_INT 208
14109: PPUSH
14110: LD_INT 62
14112: PPUSH
14113: LD_INT 1
14115: PPUSH
14116: LD_INT 10
14118: NEG
14119: PPUSH
14120: CALL_OW 330
// Wait ( 0 0$15 ) ;
14124: LD_INT 525
14126: PPUSH
14127: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
14131: LD_INT 208
14133: PPUSH
14134: LD_INT 62
14136: PPUSH
14137: LD_INT 1
14139: PPUSH
14140: CALL_OW 331
// ResetFog ;
14144: CALL_OW 335
// InGameOff ;
14148: CALL_OW 9
// end ;
14152: LD_VAR 0 1
14156: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
14157: LD_INT 10
14159: PPUSH
14160: LD_INT 22
14162: PUSH
14163: LD_INT 1
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: PPUSH
14170: CALL_OW 70
14174: PUSH
14175: LD_EXP 44
14179: PPUSH
14180: CALL_OW 302
14184: AND
14185: PUSH
14186: LD_INT 22
14188: PUSH
14189: LD_INT 1
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PPUSH
14196: CALL_OW 69
14200: PPUSH
14201: LD_EXP 44
14205: PPUSH
14206: CALL_OW 74
14210: PPUSH
14211: LD_EXP 44
14215: PPUSH
14216: CALL_OW 296
14220: PUSH
14221: LD_INT 30
14223: LESS
14224: OR
14225: IFFALSE 14276
14227: GO 14229
14229: DISABLE
// begin enable ;
14230: ENABLE
// powell_warn := powell_warn + 1 ;
14231: LD_ADDR_EXP 35
14235: PUSH
14236: LD_EXP 35
14240: PUSH
14241: LD_INT 1
14243: PLUS
14244: ST_TO_ADDR
// if powell_warn = 3 then
14245: LD_EXP 35
14249: PUSH
14250: LD_INT 3
14252: EQUAL
14253: IFFALSE 14264
// begin YouLost ( 5 ) ;
14255: LD_STRING 5
14257: PPUSH
14258: CALL_OW 104
// exit ;
14262: GO 14276
// end ; SayRadio ( Powell , DWarn-Pow-1 ) ;
14264: LD_EXP 46
14268: PPUSH
14269: LD_STRING DWarn-Pow-1
14271: PPUSH
14272: CALL_OW 94
// end ; end_of_file
14276: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
14277: LD_EXP 8
14281: IFFALSE 16118
14283: GO 14285
14285: DISABLE
14286: LD_INT 0
14288: PPUSH
14289: PPUSH
14290: PPUSH
14291: PPUSH
14292: PPUSH
14293: PPUSH
14294: PPUSH
14295: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
14296: LD_EXP 44
14300: PUSH
14301: LD_EXP 45
14305: ADD
14306: PUSH
14307: LD_EXP 6
14311: ADD
14312: PPUSH
14313: LD_INT 250
14315: PPUSH
14316: LD_INT 120
14318: PPUSH
14319: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
14323: LD_ADDR_VAR 0 2
14327: PUSH
14328: LD_EXP 6
14332: PPUSH
14333: LD_INT 25
14335: PUSH
14336: LD_INT 2
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PPUSH
14343: CALL_OW 72
14347: PUSH
14348: LD_EXP 45
14352: DIFF
14353: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
14354: LD_ADDR_VAR 0 3
14358: PUSH
14359: LD_EXP 6
14363: PPUSH
14364: LD_INT 21
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PPUSH
14374: CALL_OW 72
14378: PUSH
14379: LD_VAR 0 2
14383: DIFF
14384: ST_TO_ADDR
// if not has_eng then
14385: LD_VAR 0 2
14389: NOT
14390: IFFALSE 14473
// begin uc_side := 4 ;
14392: LD_ADDR_OWVAR 20
14396: PUSH
14397: LD_INT 4
14399: ST_TO_ADDR
// uc_nation := 1 ;
14400: LD_ADDR_OWVAR 21
14404: PUSH
14405: LD_INT 1
14407: ST_TO_ADDR
// bc_type := b_depot ;
14408: LD_ADDR_OWVAR 42
14412: PUSH
14413: LD_INT 0
14415: ST_TO_ADDR
// bc_level := 2 ;
14416: LD_ADDR_OWVAR 43
14420: PUSH
14421: LD_INT 2
14423: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14424: LD_ADDR_VAR 0 4
14428: PUSH
14429: LD_INT 264
14431: PPUSH
14432: LD_INT 120
14434: PPUSH
14435: LD_INT 4
14437: PPUSH
14438: CALL_OW 47
14442: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14443: LD_INT 264
14445: PPUSH
14446: LD_INT 120
14448: PPUSH
14449: LD_INT 4
14451: PPUSH
14452: LD_INT 10
14454: NEG
14455: PPUSH
14456: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14460: LD_INT 264
14462: PPUSH
14463: LD_INT 120
14465: PPUSH
14466: LD_INT 4
14468: PPUSH
14469: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14473: LD_INT 35
14475: PPUSH
14476: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14480: LD_EXP 44
14484: PPUSH
14485: LD_INT 10
14487: PPUSH
14488: CALL_OW 308
14492: PUSH
14493: LD_EXP 44
14497: PPUSH
14498: CALL_OW 310
14502: PPUSH
14503: LD_INT 10
14505: PPUSH
14506: CALL_OW 308
14510: OR
14511: IFFALSE 14473
// if has_eng and not dep then
14513: LD_VAR 0 2
14517: PUSH
14518: LD_VAR 0 4
14522: NOT
14523: AND
14524: IFFALSE 14674
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14526: LD_VAR 0 2
14530: PPUSH
14531: LD_INT 0
14533: PPUSH
14534: LD_INT 264
14536: PPUSH
14537: LD_INT 120
14539: PPUSH
14540: LD_INT 4
14542: PPUSH
14543: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14547: LD_INT 35
14549: PPUSH
14550: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14554: LD_INT 22
14556: PUSH
14557: LD_INT 4
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: PUSH
14564: LD_INT 30
14566: PUSH
14567: LD_INT 0
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: PPUSH
14578: CALL_OW 69
14582: IFFALSE 14547
// ComMoveXY ( filter , 264 , 120 ) ;
14584: LD_VAR 0 3
14588: PPUSH
14589: LD_INT 264
14591: PPUSH
14592: LD_INT 120
14594: PPUSH
14595: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14599: LD_INT 35
14601: PPUSH
14602: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14606: LD_INT 22
14608: PUSH
14609: LD_INT 4
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 30
14618: PUSH
14619: LD_INT 0
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: LD_INT 3
14628: PUSH
14629: LD_INT 57
14631: PUSH
14632: EMPTY
14633: LIST
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: LIST
14643: PPUSH
14644: CALL_OW 69
14648: IFFALSE 14599
// ComMoveXY ( filter , 247 , 113 ) ;
14650: LD_VAR 0 3
14654: PPUSH
14655: LD_INT 247
14657: PPUSH
14658: LD_INT 113
14660: PPUSH
14661: CALL_OW 111
// Wait ( 0 0$2 ) ;
14665: LD_INT 70
14667: PPUSH
14668: CALL_OW 67
// end else
14672: GO 14686
// begin SetSide ( dep , 4 ) ;
14674: LD_VAR 0 4
14678: PPUSH
14679: LD_INT 4
14681: PPUSH
14682: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14686: LD_ADDR_VAR 0 4
14690: PUSH
14691: LD_INT 22
14693: PUSH
14694: LD_INT 4
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 30
14703: PUSH
14704: LD_INT 0
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PPUSH
14715: CALL_OW 69
14719: PUSH
14720: LD_INT 1
14722: ARRAY
14723: ST_TO_ADDR
// if not has_eng then
14724: LD_VAR 0 2
14728: NOT
14729: IFFALSE 14816
// for i = 1 to 2 do
14731: LD_ADDR_VAR 0 1
14735: PUSH
14736: DOUBLE
14737: LD_INT 1
14739: DEC
14740: ST_TO_ADDR
14741: LD_INT 2
14743: PUSH
14744: FOR_TO
14745: IFFALSE 14814
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14747: LD_VAR 0 3
14751: PUSH
14752: LD_INT 1
14754: ARRAY
14755: PPUSH
14756: LD_VAR 0 4
14760: PPUSH
14761: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14765: LD_VAR 0 3
14769: PUSH
14770: LD_INT 1
14772: ARRAY
14773: PPUSH
14774: LD_INT 2
14776: PPUSH
14777: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14781: LD_VAR 0 3
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: PPUSH
14790: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14794: LD_ADDR_VAR 0 3
14798: PUSH
14799: LD_VAR 0 3
14803: PPUSH
14804: LD_INT 1
14806: PPUSH
14807: CALL_OW 3
14811: ST_TO_ADDR
// end ;
14812: GO 14744
14814: POP
14815: POP
// if IsInUnit ( Cornel ) then
14816: LD_EXP 44
14820: PPUSH
14821: CALL_OW 310
14825: IFFALSE 14903
// begin cargo := IsInUnit ( Cornel ) ;
14827: LD_ADDR_VAR 0 7
14831: PUSH
14832: LD_EXP 44
14836: PPUSH
14837: CALL_OW 310
14841: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14842: LD_VAR 0 7
14846: PPUSH
14847: LD_INT 1
14849: PPUSH
14850: CALL_OW 289
14854: IFFALSE 14865
// ComUnload ( cargo ) ;
14856: LD_VAR 0 7
14860: PPUSH
14861: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14865: LD_EXP 44
14869: PPUSH
14870: LD_INT 235
14872: PPUSH
14873: LD_INT 122
14875: PPUSH
14876: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14880: LD_EXP 44
14884: PPUSH
14885: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14889: LD_EXP 44
14893: PPUSH
14894: LD_VAR 0 4
14898: PPUSH
14899: CALL_OW 180
// end ; if Bierezov then
14903: LD_EXP 45
14907: IFFALSE 14955
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14909: LD_EXP 45
14913: PPUSH
14914: LD_INT 260
14916: PPUSH
14917: LD_INT 120
14919: PPUSH
14920: CALL_OW 111
// if dep then
14924: LD_VAR 0 4
14928: IFFALSE 14946
// AddComEnterUnit ( Bierezov , dep ) else
14930: LD_EXP 45
14934: PPUSH
14935: LD_VAR 0 4
14939: PPUSH
14940: CALL_OW 180
14944: GO 14955
// AddComHold ( Bierezov ) ;
14946: LD_EXP 45
14950: PPUSH
14951: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14955: LD_INT 525
14957: PPUSH
14958: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14962: LD_ADDR_VAR 0 2
14966: PUSH
14967: LD_INT 22
14969: PUSH
14970: LD_INT 4
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 25
14979: PUSH
14980: LD_INT 2
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PPUSH
14991: CALL_OW 69
14995: PUSH
14996: LD_EXP 45
15000: DIFF
15001: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15002: LD_INT 35
15004: PPUSH
15005: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
15009: LD_ADDR_VAR 0 6
15013: PUSH
15014: LD_INT 10
15016: PPUSH
15017: CALL_OW 435
15021: ST_TO_ADDR
// if crates then
15022: LD_VAR 0 6
15026: IFFALSE 15055
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
15028: LD_VAR 0 2
15032: PPUSH
15033: LD_VAR 0 6
15037: PUSH
15038: LD_INT 1
15040: ARRAY
15041: PPUSH
15042: LD_VAR 0 6
15046: PUSH
15047: LD_INT 2
15049: ARRAY
15050: PPUSH
15051: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
15055: LD_VAR 0 4
15059: PPUSH
15060: CALL_OW 274
15064: PPUSH
15065: LD_INT 1
15067: PPUSH
15068: CALL_OW 275
15072: PUSH
15073: LD_INT 40
15075: GREATEREQUAL
15076: IFFALSE 15002
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
15078: LD_ADDR_VAR 0 5
15082: PUSH
15083: LD_INT 4
15085: PUSH
15086: LD_INT 256
15088: PUSH
15089: LD_INT 111
15091: PUSH
15092: LD_INT 2
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 31
15103: PUSH
15104: LD_INT 243
15106: PUSH
15107: LD_INT 112
15109: PUSH
15110: LD_INT 2
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: PUSH
15119: LD_INT 31
15121: PUSH
15122: LD_INT 254
15124: PUSH
15125: LD_INT 114
15127: PUSH
15128: LD_INT 2
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: LIST
15141: ST_TO_ADDR
// for i in blist do
15142: LD_ADDR_VAR 0 1
15146: PUSH
15147: LD_VAR 0 5
15151: PUSH
15152: FOR_IN
15153: IFFALSE 15202
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
15155: LD_VAR 0 2
15159: PPUSH
15160: LD_VAR 0 1
15164: PUSH
15165: LD_INT 1
15167: ARRAY
15168: PPUSH
15169: LD_VAR 0 1
15173: PUSH
15174: LD_INT 2
15176: ARRAY
15177: PPUSH
15178: LD_VAR 0 1
15182: PUSH
15183: LD_INT 3
15185: ARRAY
15186: PPUSH
15187: LD_VAR 0 1
15191: PUSH
15192: LD_INT 4
15194: ARRAY
15195: PPUSH
15196: CALL_OW 205
15200: GO 15152
15202: POP
15203: POP
// repeat wait ( 0 0$01 ) ;
15204: LD_INT 35
15206: PPUSH
15207: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
15211: LD_INT 22
15213: PUSH
15214: LD_INT 4
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: LD_INT 30
15223: PUSH
15224: LD_INT 4
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: LD_INT 3
15233: PUSH
15234: LD_INT 57
15236: PUSH
15237: EMPTY
15238: LIST
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: LIST
15248: PPUSH
15249: CALL_OW 69
15253: IFFALSE 15204
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15255: LD_VAR 0 3
15259: PPUSH
15260: LD_INT 22
15262: PUSH
15263: LD_INT 4
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: LD_INT 30
15272: PUSH
15273: LD_INT 4
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PPUSH
15284: CALL_OW 69
15288: PUSH
15289: LD_INT 1
15291: ARRAY
15292: PPUSH
15293: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
15297: LD_VAR 0 3
15301: PPUSH
15302: LD_INT 1
15304: PPUSH
15305: CALL_OW 183
// if has_eng > 1 then
15309: LD_VAR 0 2
15313: PUSH
15314: LD_INT 1
15316: GREATER
15317: IFFALSE 15459
// for i = has_eng downto 2 do
15319: LD_ADDR_VAR 0 1
15323: PUSH
15324: DOUBLE
15325: LD_VAR 0 2
15329: INC
15330: ST_TO_ADDR
15331: LD_INT 2
15333: PUSH
15334: FOR_DOWNTO
15335: IFFALSE 15457
// begin if IsInUnit ( has_eng [ i ] ) then
15337: LD_VAR 0 2
15341: PUSH
15342: LD_VAR 0 1
15346: ARRAY
15347: PPUSH
15348: CALL_OW 310
15352: IFFALSE 15369
// ComExitBuilding ( has_eng [ i ] ) ;
15354: LD_VAR 0 2
15358: PUSH
15359: LD_VAR 0 1
15363: ARRAY
15364: PPUSH
15365: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15369: LD_VAR 0 2
15373: PUSH
15374: LD_VAR 0 1
15378: ARRAY
15379: PPUSH
15380: LD_INT 22
15382: PUSH
15383: LD_INT 4
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 30
15392: PUSH
15393: LD_INT 4
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 69
15408: PUSH
15409: LD_INT 1
15411: ARRAY
15412: PPUSH
15413: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15417: LD_VAR 0 2
15421: PUSH
15422: LD_VAR 0 1
15426: ARRAY
15427: PPUSH
15428: LD_INT 1
15430: PPUSH
15431: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15435: LD_ADDR_VAR 0 2
15439: PUSH
15440: LD_VAR 0 2
15444: PPUSH
15445: LD_VAR 0 1
15449: PPUSH
15450: CALL_OW 3
15454: ST_TO_ADDR
// end ;
15455: GO 15334
15457: POP
15458: POP
// repeat wait ( 0 0$01 ) ;
15459: LD_INT 35
15461: PPUSH
15462: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15466: LD_INT 22
15468: PUSH
15469: LD_INT 4
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: LD_INT 30
15478: PUSH
15479: LD_INT 31
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 3
15488: PUSH
15489: LD_INT 57
15491: PUSH
15492: EMPTY
15493: LIST
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: LIST
15503: PPUSH
15504: CALL_OW 69
15508: PUSH
15509: LD_INT 1
15511: GREATER
15512: IFFALSE 15459
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15514: LD_ADDR_VAR 0 8
15518: PUSH
15519: LD_EXP 6
15523: PPUSH
15524: LD_INT 25
15526: PUSH
15527: LD_INT 1
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PPUSH
15534: CALL_OW 72
15538: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15539: LD_ADDR_VAR 0 1
15543: PUSH
15544: DOUBLE
15545: LD_INT 1
15547: DEC
15548: ST_TO_ADDR
15549: LD_INT 22
15551: PUSH
15552: LD_INT 4
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PUSH
15559: LD_INT 30
15561: PUSH
15562: LD_INT 31
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: PUSH
15569: LD_INT 3
15571: PUSH
15572: LD_INT 57
15574: PUSH
15575: EMPTY
15576: LIST
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: LIST
15586: PPUSH
15587: CALL_OW 69
15591: PUSH
15592: FOR_TO
15593: IFFALSE 15677
// begin if not sol [ i ] then
15595: LD_VAR 0 8
15599: PUSH
15600: LD_VAR 0 1
15604: ARRAY
15605: NOT
15606: IFFALSE 15610
// break ;
15608: GO 15677
// ComExitBuilding ( sol [ i ] ) ;
15610: LD_VAR 0 8
15614: PUSH
15615: LD_VAR 0 1
15619: ARRAY
15620: PPUSH
15621: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15625: LD_VAR 0 8
15629: PUSH
15630: LD_VAR 0 1
15634: ARRAY
15635: PPUSH
15636: LD_INT 22
15638: PUSH
15639: LD_INT 4
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 30
15648: PUSH
15649: LD_INT 31
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PPUSH
15660: CALL_OW 69
15664: PUSH
15665: LD_VAR 0 1
15669: ARRAY
15670: PPUSH
15671: CALL_OW 180
// end ;
15675: GO 15592
15677: POP
15678: POP
// if sol > 3 then
15679: LD_VAR 0 8
15683: PUSH
15684: LD_INT 3
15686: GREATER
15687: IFFALSE 15804
// begin ComExitBuilding ( sol [ 3 ] ) ;
15689: LD_VAR 0 8
15693: PUSH
15694: LD_INT 3
15696: ARRAY
15697: PPUSH
15698: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15702: LD_VAR 0 8
15706: PUSH
15707: LD_INT 3
15709: ARRAY
15710: PPUSH
15711: LD_INT 246
15713: PPUSH
15714: LD_INT 94
15716: PPUSH
15717: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15721: LD_VAR 0 8
15725: PUSH
15726: LD_INT 3
15728: ARRAY
15729: PPUSH
15730: LD_INT 175
15732: PPUSH
15733: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15737: LD_VAR 0 8
15741: PUSH
15742: LD_INT 3
15744: ARRAY
15745: PPUSH
15746: LD_INT 224
15748: PPUSH
15749: LD_INT 90
15751: PPUSH
15752: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15756: LD_VAR 0 8
15760: PUSH
15761: LD_INT 3
15763: ARRAY
15764: PPUSH
15765: LD_INT 245
15767: PPUSH
15768: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15772: LD_VAR 0 8
15776: PUSH
15777: LD_INT 3
15779: ARRAY
15780: PPUSH
15781: LD_INT 223
15783: PPUSH
15784: LD_INT 110
15786: PPUSH
15787: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15791: LD_VAR 0 8
15795: PUSH
15796: LD_INT 3
15798: ARRAY
15799: PPUSH
15800: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15804: LD_VAR 0 2
15808: PPUSH
15809: LD_VAR 0 4
15813: PPUSH
15814: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15818: LD_INT 22
15820: PUSH
15821: LD_INT 4
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: LD_INT 30
15830: PUSH
15831: LD_INT 4
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PPUSH
15842: CALL_OW 69
15846: PUSH
15847: LD_INT 1
15849: ARRAY
15850: PPUSH
15851: CALL_OW 313
15855: PUSH
15856: LD_INT 6
15858: LESS
15859: IFFALSE 15923
// begin if IsInUnit ( Cornel ) then
15861: LD_EXP 44
15865: PPUSH
15866: CALL_OW 310
15870: IFFALSE 15881
// ComExitBuilding ( Cornel ) ;
15872: LD_EXP 44
15876: PPUSH
15877: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15881: LD_EXP 44
15885: PPUSH
15886: LD_INT 22
15888: PUSH
15889: LD_INT 4
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 30
15898: PUSH
15899: LD_INT 4
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PPUSH
15910: CALL_OW 69
15914: PUSH
15915: LD_INT 1
15917: ARRAY
15918: PPUSH
15919: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15923: LD_INT 35
15925: PPUSH
15926: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15930: LD_ADDR_VAR 0 3
15934: PUSH
15935: LD_INT 22
15937: PUSH
15938: LD_INT 4
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: PUSH
15945: LD_INT 21
15947: PUSH
15948: LD_INT 3
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 3
15957: PUSH
15958: LD_INT 24
15960: PUSH
15961: LD_INT 1000
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: LIST
15976: PPUSH
15977: CALL_OW 69
15981: ST_TO_ADDR
// if filter and has_eng then
15982: LD_VAR 0 3
15986: PUSH
15987: LD_VAR 0 2
15991: AND
15992: IFFALSE 16058
// begin for i in has_eng do
15994: LD_ADDR_VAR 0 1
15998: PUSH
15999: LD_VAR 0 2
16003: PUSH
16004: FOR_IN
16005: IFFALSE 16054
// begin if IsInUnit ( i ) then
16007: LD_VAR 0 1
16011: PPUSH
16012: CALL_OW 310
16016: IFFALSE 16027
// ComExitBuilding ( i ) ;
16018: LD_VAR 0 1
16022: PPUSH
16023: CALL_OW 122
// Wait ( 3 ) ;
16027: LD_INT 3
16029: PPUSH
16030: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
16034: LD_VAR 0 1
16038: PPUSH
16039: LD_VAR 0 3
16043: PUSH
16044: LD_INT 1
16046: ARRAY
16047: PPUSH
16048: CALL_OW 130
// end ;
16052: GO 16004
16054: POP
16055: POP
// end else
16056: GO 16112
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
16058: LD_VAR 0 2
16062: PUSH
16063: LD_VAR 0 2
16067: PPUSH
16068: LD_INT 56
16070: PUSH
16071: EMPTY
16072: LIST
16073: PPUSH
16074: CALL_OW 72
16078: AND
16079: IFFALSE 16112
// for i in has_eng do
16081: LD_ADDR_VAR 0 1
16085: PUSH
16086: LD_VAR 0 2
16090: PUSH
16091: FOR_IN
16092: IFFALSE 16110
// ComEnterUnit ( i , dep ) ;
16094: LD_VAR 0 1
16098: PPUSH
16099: LD_VAR 0 4
16103: PPUSH
16104: CALL_OW 120
16108: GO 16091
16110: POP
16111: POP
// until cornel_prepared ;
16112: LD_EXP 11
16116: IFFALSE 15923
// end ;
16118: PPOPN 8
16120: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
16121: LD_EXP 11
16125: IFFALSE 16561
16127: GO 16129
16129: DISABLE
16130: LD_INT 0
16132: PPUSH
16133: PPUSH
16134: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
16135: LD_ADDR_VAR 0 2
16139: PUSH
16140: LD_INT 22
16142: PUSH
16143: LD_INT 4
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 30
16152: PUSH
16153: LD_INT 4
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PPUSH
16164: CALL_OW 69
16168: PUSH
16169: LD_INT 1
16171: ARRAY
16172: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
16173: LD_EXP 6
16177: PPUSH
16178: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
16182: LD_EXP 45
16186: PUSH
16187: LD_EXP 45
16191: PPUSH
16192: CALL_OW 310
16196: AND
16197: IFFALSE 16208
// ComExitBuilding ( Bierezov ) ;
16199: LD_EXP 45
16203: PPUSH
16204: CALL_OW 122
// Wait ( 0 0$03 ) ;
16208: LD_INT 105
16210: PPUSH
16211: CALL_OW 67
// for i in cornel_units do
16215: LD_ADDR_VAR 0 1
16219: PUSH
16220: LD_EXP 6
16224: PUSH
16225: FOR_IN
16226: IFFALSE 16302
// begin if GetClass ( i ) in [ 2 , 3 ] then
16228: LD_VAR 0 1
16232: PPUSH
16233: CALL_OW 257
16237: PUSH
16238: LD_INT 2
16240: PUSH
16241: LD_INT 3
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: IN
16248: IFFALSE 16285
// begin ComEnterUnit ( i , arm ) ;
16250: LD_VAR 0 1
16254: PPUSH
16255: LD_VAR 0 2
16259: PPUSH
16260: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
16264: LD_VAR 0 1
16268: PPUSH
16269: LD_INT 1
16271: PPUSH
16272: CALL_OW 183
// AddComExitBuilding ( i ) ;
16276: LD_VAR 0 1
16280: PPUSH
16281: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
16285: LD_VAR 0 1
16289: PPUSH
16290: LD_INT 257
16292: PPUSH
16293: LD_INT 121
16295: PPUSH
16296: CALL_OW 171
// end ;
16300: GO 16225
16302: POP
16303: POP
// Wait ( 1 1$00 ) ;
16304: LD_INT 2100
16306: PPUSH
16307: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
16311: LD_ADDR_VAR 0 3
16315: PUSH
16316: LD_EXP 44
16320: PUSH
16321: LD_EXP 45
16325: ADD
16326: PUSH
16327: LD_EXP 6
16331: ADD
16332: PUSH
16333: LD_EXP 6
16337: PPUSH
16338: LD_INT 21
16340: PUSH
16341: LD_INT 2
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PPUSH
16348: CALL_OW 72
16352: DIFF
16353: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
16354: LD_VAR 0 3
16358: PPUSH
16359: LD_INT 248
16361: PPUSH
16362: LD_INT 85
16364: PPUSH
16365: CALL_OW 111
// AddComHold ( filter ) ;
16369: LD_VAR 0 3
16373: PPUSH
16374: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
16378: LD_INT 35
16380: PPUSH
16381: CALL_OW 67
// until cornel_attack ;
16385: LD_EXP 9
16389: IFFALSE 16378
// ComAgressiveMove ( filter , 209 , 63 ) ;
16391: LD_VAR 0 3
16395: PPUSH
16396: LD_INT 209
16398: PPUSH
16399: LD_INT 63
16401: PPUSH
16402: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16406: LD_EXP 44
16410: PPUSH
16411: LD_INT 208
16413: PPUSH
16414: LD_INT 62
16416: PPUSH
16417: CALL_OW 114
// AddComHold ( Cornel ) ;
16421: LD_EXP 44
16425: PPUSH
16426: CALL_OW 200
// if Bierezov then
16430: LD_EXP 45
16434: IFFALSE 16524
// begin filter := filter diff Bierezov ;
16436: LD_ADDR_VAR 0 3
16440: PUSH
16441: LD_VAR 0 3
16445: PUSH
16446: LD_EXP 45
16450: DIFF
16451: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16452: LD_EXP 45
16456: PPUSH
16457: LD_INT 6
16459: PPUSH
16460: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16464: LD_EXP 45
16468: PPUSH
16469: LD_INT 235
16471: PPUSH
16472: LD_INT 60
16474: PPUSH
16475: CALL_OW 111
// AddComHold ( Bierezov ) ;
16479: LD_EXP 45
16483: PPUSH
16484: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16488: LD_EXP 45
16492: PPUSH
16493: LD_INT 350
16495: PPUSH
16496: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16500: LD_EXP 45
16504: PPUSH
16505: LD_INT 198
16507: PPUSH
16508: LD_INT 28
16510: PPUSH
16511: CALL_OW 171
// AddComHold ( Bierezov ) ;
16515: LD_EXP 45
16519: PPUSH
16520: CALL_OW 200
// end ; repeat wait ( 0 0$2 ) ;
16524: LD_INT 70
16526: PPUSH
16527: CALL_OW 67
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16531: LD_EXP 44
16535: PPUSH
16536: LD_INT 208
16538: PPUSH
16539: LD_INT 62
16541: PPUSH
16542: CALL_OW 114
// until not IsInArea ( Cornel , cornelKappaArea ) ;
16546: LD_EXP 44
16550: PPUSH
16551: LD_INT 16
16553: PPUSH
16554: CALL_OW 308
16558: NOT
16559: IFFALSE 16524
// end ; end_of_file
16561: PPOPN 3
16563: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16564: LD_EXP 53
16568: PUSH
16569: LD_EXP 31
16573: NOT
16574: AND
16575: PUSH
16576: LD_EXP 32
16580: NOT
16581: AND
16582: IFFALSE 17032
16584: GO 16586
16586: DISABLE
16587: LD_INT 0
16589: PPUSH
16590: PPUSH
16591: PPUSH
16592: PPUSH
// begin enable ;
16593: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16594: LD_ADDR_VAR 0 4
16598: PUSH
16599: LD_INT 81
16601: PUSH
16602: LD_INT 3
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PPUSH
16609: CALL_OW 69
16613: ST_TO_ADDR
// for i = 1 to ru_patrol do
16614: LD_ADDR_VAR 0 2
16618: PUSH
16619: DOUBLE
16620: LD_INT 1
16622: DEC
16623: ST_TO_ADDR
16624: LD_EXP 53
16628: PUSH
16629: FOR_TO
16630: IFFALSE 17030
// begin un := ru_patrol [ i ] ;
16632: LD_ADDR_VAR 0 1
16636: PUSH
16637: LD_EXP 53
16641: PUSH
16642: LD_VAR 0 2
16646: ARRAY
16647: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16648: LD_VAR 0 1
16652: PPUSH
16653: LD_INT 13
16655: PPUSH
16656: CALL_OW 308
16660: IFFALSE 16765
// begin if not ru_alert then
16662: LD_EXP 60
16666: NOT
16667: IFFALSE 16677
// ru_alert := true ;
16669: LD_ADDR_EXP 60
16673: PUSH
16674: LD_INT 1
16676: ST_TO_ADDR
// if not See ( 1 , un ) then
16677: LD_INT 1
16679: PPUSH
16680: LD_VAR 0 1
16684: PPUSH
16685: CALL_OW 292
16689: NOT
16690: IFFALSE 16704
// SetLives ( un , 1000 ) ;
16692: LD_VAR 0 1
16696: PPUSH
16697: LD_INT 1000
16699: PPUSH
16700: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16704: LD_ADDR_EXP 53
16708: PUSH
16709: LD_EXP 53
16713: PUSH
16714: LD_VAR 0 1
16718: DIFF
16719: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16720: LD_VAR 0 1
16724: PPUSH
16725: LD_INT 22
16727: PUSH
16728: LD_INT 3
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: PUSH
16735: LD_INT 30
16737: PUSH
16738: LD_INT 4
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PPUSH
16749: CALL_OW 69
16753: PPUSH
16754: CALL 1007 0 1
16758: PPUSH
16759: CALL_OW 120
// continue ;
16763: GO 16629
// end ; if IsOk ( un ) and not HasTask ( un ) then
16765: LD_VAR 0 1
16769: PPUSH
16770: CALL_OW 302
16774: PUSH
16775: LD_VAR 0 1
16779: PPUSH
16780: CALL_OW 314
16784: NOT
16785: AND
16786: IFFALSE 16879
// begin for j = 1 to ru_firepoints_south [ i ] do
16788: LD_ADDR_VAR 0 3
16792: PUSH
16793: DOUBLE
16794: LD_INT 1
16796: DEC
16797: ST_TO_ADDR
16798: LD_EXP 59
16802: PUSH
16803: LD_VAR 0 2
16807: ARRAY
16808: PUSH
16809: FOR_TO
16810: IFFALSE 16877
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16812: LD_VAR 0 1
16816: PPUSH
16817: LD_EXP 59
16821: PUSH
16822: LD_VAR 0 2
16826: ARRAY
16827: PUSH
16828: LD_VAR 0 3
16832: ARRAY
16833: PUSH
16834: LD_INT 1
16836: ARRAY
16837: PPUSH
16838: LD_EXP 59
16842: PUSH
16843: LD_VAR 0 2
16847: ARRAY
16848: PUSH
16849: LD_VAR 0 3
16853: ARRAY
16854: PUSH
16855: LD_INT 2
16857: ARRAY
16858: PPUSH
16859: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16863: LD_VAR 0 1
16867: PPUSH
16868: LD_INT 70
16870: PPUSH
16871: CALL_OW 202
// end ;
16875: GO 16809
16877: POP
16878: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16879: LD_VAR 0 1
16883: PPUSH
16884: CALL_OW 256
16888: PUSH
16889: LD_INT 700
16891: LESS
16892: PUSH
16893: LD_VAR 0 1
16897: PPUSH
16898: LD_INT 13
16900: PPUSH
16901: CALL_OW 308
16905: NOT
16906: AND
16907: IFFALSE 16959
// begin ComMoveToArea ( un , retreatArea ) ;
16909: LD_VAR 0 1
16913: PPUSH
16914: LD_INT 13
16916: PPUSH
16917: CALL_OW 113
// if not ru_alert_xy then
16921: LD_EXP 61
16925: NOT
16926: IFFALSE 16957
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16928: LD_ADDR_EXP 61
16932: PUSH
16933: LD_VAR 0 1
16937: PPUSH
16938: CALL_OW 250
16942: PUSH
16943: LD_VAR 0 1
16947: PPUSH
16948: CALL_OW 251
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: ST_TO_ADDR
// end else
16957: GO 17028
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16959: LD_VAR 0 1
16963: PPUSH
16964: LD_VAR 0 4
16968: PPUSH
16969: LD_VAR 0 1
16973: PPUSH
16974: CALL_OW 74
16978: PPUSH
16979: CALL_OW 296
16983: PUSH
16984: LD_INT 9
16986: LESS
16987: PUSH
16988: LD_VAR 0 1
16992: PPUSH
16993: CALL_OW 256
16997: PUSH
16998: LD_INT 500
17000: GREATER
17001: AND
17002: IFFALSE 17028
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17004: LD_VAR 0 1
17008: PPUSH
17009: LD_VAR 0 4
17013: PPUSH
17014: LD_VAR 0 1
17018: PPUSH
17019: CALL_OW 74
17023: PPUSH
17024: CALL_OW 115
// end ;
17028: GO 16629
17030: POP
17031: POP
// end ;
17032: PPOPN 4
17034: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
17035: LD_EXP 60
17039: PUSH
17040: LD_EXP 61
17044: AND
17045: PUSH
17046: LD_EXP 31
17050: NOT
17051: AND
17052: PUSH
17053: LD_EXP 32
17057: NOT
17058: AND
17059: IFFALSE 17269
17061: GO 17063
17063: DISABLE
17064: LD_INT 0
17066: PPUSH
17067: PPUSH
// begin enable ;
17068: ENABLE
// if not ru_vehicles then
17069: LD_EXP 56
17073: NOT
17074: IFFALSE 17078
// exit ;
17076: GO 17269
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17078: LD_ADDR_VAR 0 2
17082: PUSH
17083: LD_INT 81
17085: PUSH
17086: LD_INT 3
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PPUSH
17093: CALL_OW 69
17097: ST_TO_ADDR
// if ru_vehicles then
17098: LD_EXP 56
17102: IFFALSE 17269
// begin for i in ru_vehicles do
17104: LD_ADDR_VAR 0 1
17108: PUSH
17109: LD_EXP 56
17113: PUSH
17114: FOR_IN
17115: IFFALSE 17267
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
17117: LD_VAR 0 1
17121: PPUSH
17122: CALL_OW 302
17126: PUSH
17127: LD_VAR 0 1
17131: PPUSH
17132: LD_VAR 0 2
17136: PPUSH
17137: LD_VAR 0 1
17141: PPUSH
17142: CALL_OW 74
17146: PPUSH
17147: CALL_OW 296
17151: PUSH
17152: LD_INT 9
17154: LESS
17155: AND
17156: IFFALSE 17182
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17158: LD_VAR 0 1
17162: PPUSH
17163: LD_VAR 0 2
17167: PPUSH
17168: LD_VAR 0 1
17172: PPUSH
17173: CALL_OW 74
17177: PPUSH
17178: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
17182: LD_VAR 0 1
17186: PPUSH
17187: CALL_OW 314
17191: NOT
17192: PUSH
17193: LD_VAR 0 1
17197: PPUSH
17198: CALL_OW 302
17202: AND
17203: PUSH
17204: LD_VAR 0 1
17208: PPUSH
17209: LD_EXP 61
17213: PUSH
17214: LD_INT 1
17216: ARRAY
17217: PPUSH
17218: LD_EXP 61
17222: PUSH
17223: LD_INT 2
17225: ARRAY
17226: PPUSH
17227: CALL_OW 297
17231: PUSH
17232: LD_INT 10
17234: GREATER
17235: AND
17236: IFFALSE 17265
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
17238: LD_VAR 0 1
17242: PPUSH
17243: LD_EXP 61
17247: PUSH
17248: LD_INT 1
17250: ARRAY
17251: PPUSH
17252: LD_EXP 61
17256: PUSH
17257: LD_INT 2
17259: ARRAY
17260: PPUSH
17261: CALL_OW 114
// end ;
17265: GO 17114
17267: POP
17268: POP
// end ; end ;
17269: PPOPN 2
17271: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
17272: LD_EXP 61
17276: PUSH
17277: LD_EXP 60
17281: AND
17282: PUSH
17283: LD_INT 3
17285: PPUSH
17286: CALL_OW 463
17290: NOT
17291: AND
17292: PUSH
17293: LD_EXP 31
17297: NOT
17298: AND
17299: PUSH
17300: LD_EXP 32
17304: NOT
17305: AND
17306: IFFALSE 17401
17308: GO 17310
17310: DISABLE
17311: LD_INT 0
17313: PPUSH
// begin enable ;
17314: ENABLE
// ru_alert_xy := false ;
17315: LD_ADDR_EXP 61
17319: PUSH
17320: LD_INT 0
17322: ST_TO_ADDR
// ru_alert := false ;
17323: LD_ADDR_EXP 60
17327: PUSH
17328: LD_INT 0
17330: ST_TO_ADDR
// if ru_vehicles then
17331: LD_EXP 56
17335: IFFALSE 17401
// for i in ru_vehicles do
17337: LD_ADDR_VAR 0 1
17341: PUSH
17342: LD_EXP 56
17346: PUSH
17347: FOR_IN
17348: IFFALSE 17399
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
17350: LD_VAR 0 1
17354: PPUSH
17355: CALL_OW 302
17359: PUSH
17360: LD_VAR 0 1
17364: PPUSH
17365: LD_INT 89
17367: PPUSH
17368: LD_INT 36
17370: PPUSH
17371: CALL_OW 297
17375: PUSH
17376: LD_INT 10
17378: GREATER
17379: AND
17380: IFFALSE 17397
// ComMoveXY ( i , 89 , 36 ) ;
17382: LD_VAR 0 1
17386: PPUSH
17387: LD_INT 89
17389: PPUSH
17390: LD_INT 36
17392: PPUSH
17393: CALL_OW 111
17397: GO 17347
17399: POP
17400: POP
// end ;
17401: PPOPN 1
17403: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
17404: LD_EXP 55
17408: PUSH
17409: LD_EXP 31
17413: NOT
17414: AND
17415: PUSH
17416: LD_EXP 32
17420: NOT
17421: AND
17422: IFFALSE 17706
17424: GO 17426
17426: DISABLE
17427: LD_INT 0
17429: PPUSH
17430: PPUSH
17431: PPUSH
// begin enable ;
17432: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17433: LD_ADDR_VAR 0 3
17437: PUSH
17438: LD_INT 81
17440: PUSH
17441: LD_INT 3
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PPUSH
17448: CALL_OW 69
17452: ST_TO_ADDR
// for i = 1 to ru_forest do
17453: LD_ADDR_VAR 0 1
17457: PUSH
17458: DOUBLE
17459: LD_INT 1
17461: DEC
17462: ST_TO_ADDR
17463: LD_EXP 55
17467: PUSH
17468: FOR_TO
17469: IFFALSE 17704
// begin un := ru_forest [ i ] ;
17471: LD_ADDR_VAR 0 2
17475: PUSH
17476: LD_EXP 55
17480: PUSH
17481: LD_VAR 0 1
17485: ARRAY
17486: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17487: LD_VAR 0 2
17491: PPUSH
17492: LD_INT 13
17494: PPUSH
17495: CALL_OW 308
17499: IFFALSE 17589
// begin if not See ( 1 , un ) then
17501: LD_INT 1
17503: PPUSH
17504: LD_VAR 0 2
17508: PPUSH
17509: CALL_OW 292
17513: NOT
17514: IFFALSE 17528
// SetLives ( un , 1000 ) ;
17516: LD_VAR 0 2
17520: PPUSH
17521: LD_INT 1000
17523: PPUSH
17524: CALL_OW 234
// ru_forest := ru_forest diff un ;
17528: LD_ADDR_EXP 55
17532: PUSH
17533: LD_EXP 55
17537: PUSH
17538: LD_VAR 0 2
17542: DIFF
17543: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17544: LD_VAR 0 2
17548: PPUSH
17549: LD_INT 22
17551: PUSH
17552: LD_INT 3
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 30
17561: PUSH
17562: LD_INT 4
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PPUSH
17573: CALL_OW 69
17577: PPUSH
17578: CALL 1007 0 1
17582: PPUSH
17583: CALL_OW 120
// continue ;
17587: GO 17468
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17589: LD_VAR 0 2
17593: PPUSH
17594: CALL_OW 256
17598: PUSH
17599: LD_INT 700
17601: LESS
17602: PUSH
17603: LD_VAR 0 2
17607: PPUSH
17608: LD_INT 13
17610: PPUSH
17611: CALL_OW 308
17615: NOT
17616: AND
17617: IFFALSE 17633
// ComMoveToArea ( un , retreatArea ) else
17619: LD_VAR 0 2
17623: PPUSH
17624: LD_INT 13
17626: PPUSH
17627: CALL_OW 113
17631: GO 17702
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17633: LD_VAR 0 2
17637: PPUSH
17638: LD_VAR 0 3
17642: PPUSH
17643: LD_VAR 0 2
17647: PPUSH
17648: CALL_OW 74
17652: PPUSH
17653: CALL_OW 296
17657: PUSH
17658: LD_INT 9
17660: LESS
17661: PUSH
17662: LD_VAR 0 2
17666: PPUSH
17667: CALL_OW 256
17671: PUSH
17672: LD_INT 500
17674: GREATER
17675: AND
17676: IFFALSE 17702
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17678: LD_VAR 0 2
17682: PPUSH
17683: LD_VAR 0 3
17687: PPUSH
17688: LD_VAR 0 2
17692: PPUSH
17693: CALL_OW 74
17697: PPUSH
17698: CALL_OW 115
// end ;
17702: GO 17468
17704: POP
17705: POP
// end ;
17706: PPOPN 3
17708: END
// every 0 0$10 trigger not send_attack_on_cornel do var i , filter ;
17709: LD_EXP 32
17713: NOT
17714: IFFALSE 17835
17716: GO 17718
17718: DISABLE
17719: LD_INT 0
17721: PPUSH
17722: PPUSH
// begin enable ;
17723: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
17724: LD_ADDR_VAR 0 2
17728: PUSH
17729: LD_INT 22
17731: PUSH
17732: LD_INT 3
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 21
17741: PUSH
17742: LD_INT 3
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PPUSH
17753: CALL_OW 69
17757: ST_TO_ADDR
// if filter then
17758: LD_VAR 0 2
17762: IFFALSE 17835
// for i in filter do
17764: LD_ADDR_VAR 0 1
17768: PUSH
17769: LD_VAR 0 2
17773: PUSH
17774: FOR_IN
17775: IFFALSE 17833
// if GetLives ( i ) < 990 then
17777: LD_VAR 0 1
17781: PPUSH
17782: CALL_OW 256
17786: PUSH
17787: LD_INT 990
17789: LESS
17790: IFFALSE 17831
// begin ru_alert := true ;
17792: LD_ADDR_EXP 60
17796: PUSH
17797: LD_INT 1
17799: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17800: LD_ADDR_EXP 61
17804: PUSH
17805: LD_VAR 0 1
17809: PPUSH
17810: CALL_OW 250
17814: PUSH
17815: LD_VAR 0 1
17819: PPUSH
17820: CALL_OW 251
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: ST_TO_ADDR
// break ;
17829: GO 17833
// end ;
17831: GO 17774
17833: POP
17834: POP
// end ;
17835: PPOPN 2
17837: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17838: LD_EXP 31
17842: IFFALSE 17991
17844: GO 17846
17846: DISABLE
17847: LD_INT 0
17849: PPUSH
17850: PPUSH
17851: PPUSH
17852: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17853: LD_ADDR_VAR 0 4
17857: PUSH
17858: LD_EXP 56
17862: PUSH
17863: LD_EXP 55
17867: ADD
17868: PUSH
17869: LD_EXP 53
17873: ADD
17874: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17875: LD_ADDR_VAR 0 3
17879: PUSH
17880: LD_INT 3
17882: PPUSH
17883: LD_INT 81
17885: PUSH
17886: LD_INT 3
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PPUSH
17893: CALL_OW 70
17897: ST_TO_ADDR
// if filter and enemy then
17898: LD_VAR 0 4
17902: PUSH
17903: LD_VAR 0 3
17907: AND
17908: IFFALSE 17991
// repeat wait ( 0 0$01 ) ;
17910: LD_INT 35
17912: PPUSH
17913: CALL_OW 67
// for i in filter do
17917: LD_ADDR_VAR 0 1
17921: PUSH
17922: LD_VAR 0 4
17926: PUSH
17927: FOR_IN
17928: IFFALSE 17956
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17930: LD_VAR 0 1
17934: PPUSH
17935: LD_VAR 0 3
17939: PPUSH
17940: LD_VAR 0 1
17944: PPUSH
17945: CALL_OW 74
17949: PPUSH
17950: CALL_OW 115
// end ;
17954: GO 17927
17956: POP
17957: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
17958: LD_INT 3
17960: PPUSH
17961: LD_INT 81
17963: PUSH
17964: LD_INT 3
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PPUSH
17971: CALL_OW 70
17975: PUSH
17976: LD_INT 0
17978: EQUAL
17979: PUSH
17980: LD_VAR 0 4
17984: PUSH
17985: LD_INT 0
17987: EQUAL
17988: OR
17989: IFFALSE 17910
// end ;
17991: PPOPN 4
17993: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
17994: LD_EXP 26
17998: PUSH
17999: LD_INT 22
18001: PUSH
18002: LD_INT 4
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 30
18011: PUSH
18012: LD_INT 4
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 3
18021: PUSH
18022: LD_INT 57
18024: PUSH
18025: EMPTY
18026: LIST
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: LIST
18036: PPUSH
18037: CALL_OW 69
18041: AND
18042: IFFALSE 18091
18044: GO 18046
18046: DISABLE
18047: LD_INT 0
18049: PPUSH
// begin if not ru_cornel_attack then
18050: LD_EXP 58
18054: NOT
18055: IFFALSE 18059
// exit ;
18057: GO 18091
// for i in ru_cornel_attack do
18059: LD_ADDR_VAR 0 1
18063: PUSH
18064: LD_EXP 58
18068: PUSH
18069: FOR_IN
18070: IFFALSE 18089
// ComAgressiveMove ( i , 258 , 119 ) ;
18072: LD_VAR 0 1
18076: PPUSH
18077: LD_INT 258
18079: PPUSH
18080: LD_INT 119
18082: PPUSH
18083: CALL_OW 114
18087: GO 18069
18089: POP
18090: POP
// end ; end_of_file
18091: PPOPN 1
18093: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
18094: LD_EXP 5
18098: PUSH
18099: LD_EXP 9
18103: NOT
18104: AND
18105: PUSH
18106: LD_EXP 20
18110: AND
18111: IFFALSE 18223
18113: GO 18115
18115: DISABLE
18116: LD_INT 0
18118: PPUSH
// begin enable ;
18119: ENABLE
// crates_counter := crates_counter - 50 ;
18120: LD_ADDR_EXP 20
18124: PUSH
18125: LD_EXP 20
18129: PUSH
18130: LD_INT 50
18132: MINUS
18133: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
18134: LD_INT 8
18136: PPUSH
18137: LD_INT 2
18139: PPUSH
18140: LD_INT 5
18142: PPUSH
18143: CALL_OW 12
18147: PPUSH
18148: LD_INT 1
18150: PPUSH
18151: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
18155: LD_INT 1785
18157: PPUSH
18158: LD_INT 2345
18160: PPUSH
18161: CALL_OW 12
18165: PPUSH
18166: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
18170: LD_ADDR_VAR 0 1
18174: PUSH
18175: LD_INT 1
18177: PPUSH
18178: LD_OWVAR 67
18182: PUSH
18183: LD_INT 2
18185: PLUS
18186: PPUSH
18187: CALL_OW 12
18191: ST_TO_ADDR
// if r < 3 then
18192: LD_VAR 0 1
18196: PUSH
18197: LD_INT 3
18199: LESS
18200: IFFALSE 18223
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
18202: LD_INT 4
18204: PPUSH
18205: LD_INT 1
18207: PPUSH
18208: LD_INT 5
18210: PPUSH
18211: CALL_OW 12
18215: PPUSH
18216: LD_INT 1
18218: PPUSH
18219: CALL_OW 55
// end ;
18223: PPOPN 1
18225: END
// every 0 0$01 trigger cornel_active do
18226: LD_EXP 8
18230: IFFALSE 18319
18232: GO 18234
18234: DISABLE
// begin Wait ( 0 0$03 ) ;
18235: LD_INT 105
18237: PPUSH
18238: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18242: LD_INT 2
18244: PPUSH
18245: LD_INT 5
18247: PPUSH
18248: CALL_OW 12
18252: PPUSH
18253: LD_INT 10
18255: PPUSH
18256: LD_INT 1
18258: PPUSH
18259: CALL_OW 55
// Wait ( 0 0$13 ) ;
18263: LD_INT 455
18265: PPUSH
18266: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18270: LD_INT 2
18272: PPUSH
18273: LD_INT 5
18275: PPUSH
18276: CALL_OW 12
18280: PPUSH
18281: LD_INT 10
18283: PPUSH
18284: LD_INT 1
18286: PPUSH
18287: CALL_OW 55
// Wait ( 0 0$16 ) ;
18291: LD_INT 560
18293: PPUSH
18294: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18298: LD_INT 2
18300: PPUSH
18301: LD_INT 5
18303: PPUSH
18304: CALL_OW 12
18308: PPUSH
18309: LD_INT 10
18311: PPUSH
18312: LD_INT 1
18314: PPUSH
18315: CALL_OW 55
// end ; end_of_file
18319: END
// every 0 0$01 trigger cornel_prepared do
18320: LD_EXP 11
18324: IFFALSE 18383
18326: GO 18328
18328: DISABLE
// begin enable ;
18329: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
18330: LD_ADDR_OWVAR 47
18334: PUSH
18335: LD_STRING #Am03-1
18337: PUSH
18338: LD_EXP 10
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
18347: LD_ADDR_EXP 10
18351: PUSH
18352: LD_EXP 10
18356: PPUSH
18357: LD_STRING -
18359: PPUSH
18360: CALL 1077 0 2
18364: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
18365: LD_EXP 10
18369: PUSH
18370: LD_INT 0
18372: EQUAL
18373: IFFALSE 18383
// begin Display_Strings := [ ] ;
18375: LD_ADDR_OWVAR 47
18379: PUSH
18380: EMPTY
18381: ST_TO_ADDR
// disable ;
18382: DISABLE
// end ; end ;
18383: END
// every 0 0$01 trigger debug and debug_strings do
18384: LD_EXP 1
18388: PUSH
18389: LD_OWVAR 48
18393: AND
18394: IFFALSE 18410
18396: GO 18398
18398: DISABLE
// begin enable ;
18399: ENABLE
// Display_Strings := debug_strings ;
18400: LD_ADDR_OWVAR 47
18404: PUSH
18405: LD_OWVAR 48
18409: ST_TO_ADDR
// end ; end_of_file
18410: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
18411: LD_VAR 0 1
18415: PPUSH
18416: LD_VAR 0 2
18420: PPUSH
18421: CALL 34858 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
18425: LD_VAR 0 1
18429: PPUSH
18430: CALL_OW 255
18434: PUSH
18435: LD_INT 1
18437: EQUAL
18438: PUSH
18439: LD_EXP 14
18443: NOT
18444: AND
18445: IFFALSE 18455
// solar_builded := true ;
18447: LD_ADDR_EXP 14
18451: PUSH
18452: LD_INT 1
18454: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18455: LD_VAR 0 1
18459: PPUSH
18460: CALL_OW 255
18464: PUSH
18465: LD_INT 1
18467: EQUAL
18468: PUSH
18469: LD_EXP 29
18473: AND
18474: IFFALSE 18511
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
18476: LD_ADDR_EXP 29
18480: PUSH
18481: LD_EXP 29
18485: PUSH
18486: LD_INT 1750
18488: PUSH
18489: LD_INT 1400
18491: PUSH
18492: LD_INT 1225
18494: PUSH
18495: LD_INT 1050
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: PUSH
18504: LD_OWVAR 67
18508: ARRAY
18509: PLUS
18510: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18511: LD_VAR 0 1
18515: PPUSH
18516: CALL_OW 255
18520: PUSH
18521: LD_INT 3
18523: EQUAL
18524: IFFALSE 18542
// ru_vehicles := ru_vehicles ^ veh ;
18526: LD_ADDR_EXP 56
18530: PUSH
18531: LD_EXP 56
18535: PUSH
18536: LD_VAR 0 1
18540: ADD
18541: ST_TO_ADDR
// end ;
18542: PPOPN 2
18544: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18545: LD_VAR 0 1
18549: PPUSH
18550: CALL 34738 0 1
// if un in ru_patrol then
18554: LD_VAR 0 1
18558: PUSH
18559: LD_EXP 53
18563: IN
18564: IFFALSE 18582
// ru_patrol := ru_patrol diff un ;
18566: LD_ADDR_EXP 53
18570: PUSH
18571: LD_EXP 53
18575: PUSH
18576: LD_VAR 0 1
18580: DIFF
18581: ST_TO_ADDR
// if un in ru_forest then
18582: LD_VAR 0 1
18586: PUSH
18587: LD_EXP 55
18591: IN
18592: IFFALSE 18610
// ru_forest := ru_forest diff un ;
18594: LD_ADDR_EXP 55
18598: PUSH
18599: LD_EXP 55
18603: PUSH
18604: LD_VAR 0 1
18608: DIFF
18609: ST_TO_ADDR
// if un in ru_vehicles then
18610: LD_VAR 0 1
18614: PUSH
18615: LD_EXP 56
18619: IN
18620: IFFALSE 18726
// begin ru_vehicles := ru_vehicles diff un ;
18622: LD_ADDR_EXP 56
18626: PUSH
18627: LD_EXP 56
18631: PUSH
18632: LD_VAR 0 1
18636: DIFF
18637: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18638: LD_ADDR_EXP 57
18642: PUSH
18643: LD_EXP 57
18647: PUSH
18648: LD_VAR 0 1
18652: PPUSH
18653: CALL_OW 265
18657: PUSH
18658: LD_VAR 0 1
18662: PPUSH
18663: CALL_OW 262
18667: PUSH
18668: LD_VAR 0 1
18672: PPUSH
18673: CALL_OW 263
18677: PUSH
18678: LD_VAR 0 1
18682: PPUSH
18683: CALL_OW 264
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: ADD
18694: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18695: LD_ADDR_EXP 13
18699: PUSH
18700: LD_EXP 13
18704: PUSH
18705: LD_INT 1
18707: PLUS
18708: ST_TO_ADDR
// if ach_counter = 10 then
18709: LD_EXP 13
18713: PUSH
18714: LD_INT 10
18716: EQUAL
18717: IFFALSE 18726
// SetAchievement ( ACH_FAUST ) ;
18719: LD_STRING ACH_FAUST
18721: PPUSH
18722: CALL_OW 543
// end ; if un = Pokryshkin then
18726: LD_VAR 0 1
18730: PUSH
18731: LD_EXP 52
18735: EQUAL
18736: IFFALSE 18745
// SetAchievement ( ACH_POKR ) ;
18738: LD_STRING ACH_POKR
18740: PPUSH
18741: CALL_OW 543
// if un = JMM then
18745: LD_VAR 0 1
18749: PUSH
18750: LD_EXP 37
18754: EQUAL
18755: IFFALSE 18764
// YouLost ( 0 ) ;
18757: LD_STRING 0
18759: PPUSH
18760: CALL_OW 104
// if un = us_dep_west then
18764: LD_VAR 0 1
18768: PUSH
18769: LD_INT 1
18771: EQUAL
18772: IFFALSE 18781
// YouLost ( 2 ) ;
18774: LD_STRING 2
18776: PPUSH
18777: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18781: LD_VAR 0 1
18785: PPUSH
18786: CALL_OW 255
18790: PUSH
18791: LD_INT 8
18793: EQUAL
18794: PUSH
18795: LD_EXP 5
18799: NOT
18800: AND
18801: IFFALSE 18810
// YouLost ( 4 ) ;
18803: LD_STRING 4
18805: PPUSH
18806: CALL_OW 104
// if un in jmm_units then
18810: LD_VAR 0 1
18814: PUSH
18815: LD_EXP 4
18819: IN
18820: IFFALSE 18836
// lose_counter := lose_counter + 1 ;
18822: LD_ADDR_EXP 34
18826: PUSH
18827: LD_EXP 34
18831: PUSH
18832: LD_INT 1
18834: PLUS
18835: ST_TO_ADDR
// end ;
18836: PPOPN 1
18838: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18839: LD_INT 0
18841: PPUSH
18842: PPUSH
// begin if GetSide ( driver ) = 3 then
18843: LD_VAR 0 1
18847: PPUSH
18848: CALL_OW 255
18852: PUSH
18853: LD_INT 3
18855: EQUAL
18856: IFFALSE 18934
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18858: LD_ADDR_VAR 0 6
18862: PUSH
18863: LD_INT 22
18865: PUSH
18866: LD_INT 3
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 30
18875: PUSH
18876: LD_INT 3
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PPUSH
18887: CALL_OW 69
18891: PPUSH
18892: CALL 1007 0 1
18896: ST_TO_ADDR
// if place then
18897: LD_VAR 0 6
18901: IFFALSE 18919
// ComEnterUnit ( driver , place ) else
18903: LD_VAR 0 1
18907: PPUSH
18908: LD_VAR 0 6
18912: PPUSH
18913: CALL_OW 120
18917: GO 18934
// ComMoveXY ( driver , 70 , 22 ) ;
18919: LD_VAR 0 1
18923: PPUSH
18924: LD_INT 70
18926: PPUSH
18927: LD_INT 22
18929: PPUSH
18930: CALL_OW 111
// end ; end ;
18934: PPOPN 6
18936: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
18937: LD_VAR 0 1
18941: PUSH
18942: LD_INT 1
18944: EQUAL
18945: PUSH
18946: LD_VAR 0 2
18950: PUSH
18951: LD_INT 4
18953: EQUAL
18954: PUSH
18955: LD_VAR 0 2
18959: PUSH
18960: LD_INT 8
18962: EQUAL
18963: PUSH
18964: LD_EXP 5
18968: NOT
18969: AND
18970: OR
18971: AND
18972: IFFALSE 18981
// YouLost ( 5 ) ;
18974: LD_STRING 5
18976: PPUSH
18977: CALL_OW 104
// end ;
18981: PPOPN 2
18983: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
18984: LD_EXP 36
18988: PUSH
18989: LD_INT 22
18991: PUSH
18992: LD_INT 1
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 21
19001: PUSH
19002: LD_INT 1
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PPUSH
19013: CALL_OW 69
19017: PUSH
19018: LD_INT 22
19020: PUSH
19021: LD_INT 8
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 21
19030: PUSH
19031: LD_INT 1
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PPUSH
19042: CALL_OW 69
19046: ADD
19047: PLUS
19048: PUSH
19049: LD_INT 5
19051: LESS
19052: IFFALSE 19064
19054: GO 19056
19056: DISABLE
// YouLost ( 1 ) ;
19057: LD_STRING 1
19059: PPUSH
19060: CALL_OW 104
19064: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
19065: LD_INT 1
19067: PPUSH
19068: CALL_OW 255
19072: PUSH
19073: LD_INT 3
19075: EQUAL
19076: IFFALSE 19088
19078: GO 19080
19080: DISABLE
// YouLost ( 3 ) ; end_of_file end_of_file
19081: LD_STRING 3
19083: PPUSH
19084: CALL_OW 104
19088: END
// every 0 0$1 do
19089: GO 19091
19091: DISABLE
// begin enable ;
19092: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19093: LD_STRING updateTimer(
19095: PUSH
19096: LD_OWVAR 1
19100: STR
19101: PUSH
19102: LD_STRING );
19104: STR
19105: PPUSH
19106: CALL_OW 559
// end ;
19110: END
// export function SOS_MapStart ( ) ; begin
19111: LD_INT 0
19113: PPUSH
// if streamModeActive then
19114: LD_EXP 62
19118: IFFALSE 19127
// DefineStreamItems ( true ) ;
19120: LD_INT 1
19122: PPUSH
19123: CALL 20781 0 1
// UpdateFactoryWaypoints ( ) ;
19127: CALL 33642 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19131: CALL 33899 0 0
// end ;
19135: LD_VAR 0 1
19139: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19140: LD_INT 0
19142: PPUSH
// if p2 = hack_mode then
19143: LD_VAR 0 2
19147: PUSH
19148: LD_INT 100
19150: EQUAL
19151: IFFALSE 20154
// begin if not StreamModeActive then
19153: LD_EXP 62
19157: NOT
19158: IFFALSE 19168
// StreamModeActive := true ;
19160: LD_ADDR_EXP 62
19164: PUSH
19165: LD_INT 1
19167: ST_TO_ADDR
// if p3 = 0 then
19168: LD_VAR 0 3
19172: PUSH
19173: LD_INT 0
19175: EQUAL
19176: IFFALSE 19182
// InitStreamMode ;
19178: CALL 20317 0 0
// if p3 = 1 then
19182: LD_VAR 0 3
19186: PUSH
19187: LD_INT 1
19189: EQUAL
19190: IFFALSE 19200
// sRocket := true ;
19192: LD_ADDR_EXP 67
19196: PUSH
19197: LD_INT 1
19199: ST_TO_ADDR
// if p3 = 2 then
19200: LD_VAR 0 3
19204: PUSH
19205: LD_INT 2
19207: EQUAL
19208: IFFALSE 19218
// sSpeed := true ;
19210: LD_ADDR_EXP 66
19214: PUSH
19215: LD_INT 1
19217: ST_TO_ADDR
// if p3 = 3 then
19218: LD_VAR 0 3
19222: PUSH
19223: LD_INT 3
19225: EQUAL
19226: IFFALSE 19236
// sEngine := true ;
19228: LD_ADDR_EXP 68
19232: PUSH
19233: LD_INT 1
19235: ST_TO_ADDR
// if p3 = 4 then
19236: LD_VAR 0 3
19240: PUSH
19241: LD_INT 4
19243: EQUAL
19244: IFFALSE 19254
// sSpec := true ;
19246: LD_ADDR_EXP 65
19250: PUSH
19251: LD_INT 1
19253: ST_TO_ADDR
// if p3 = 5 then
19254: LD_VAR 0 3
19258: PUSH
19259: LD_INT 5
19261: EQUAL
19262: IFFALSE 19272
// sLevel := true ;
19264: LD_ADDR_EXP 69
19268: PUSH
19269: LD_INT 1
19271: ST_TO_ADDR
// if p3 = 6 then
19272: LD_VAR 0 3
19276: PUSH
19277: LD_INT 6
19279: EQUAL
19280: IFFALSE 19290
// sArmoury := true ;
19282: LD_ADDR_EXP 70
19286: PUSH
19287: LD_INT 1
19289: ST_TO_ADDR
// if p3 = 7 then
19290: LD_VAR 0 3
19294: PUSH
19295: LD_INT 7
19297: EQUAL
19298: IFFALSE 19308
// sRadar := true ;
19300: LD_ADDR_EXP 71
19304: PUSH
19305: LD_INT 1
19307: ST_TO_ADDR
// if p3 = 8 then
19308: LD_VAR 0 3
19312: PUSH
19313: LD_INT 8
19315: EQUAL
19316: IFFALSE 19326
// sBunker := true ;
19318: LD_ADDR_EXP 72
19322: PUSH
19323: LD_INT 1
19325: ST_TO_ADDR
// if p3 = 9 then
19326: LD_VAR 0 3
19330: PUSH
19331: LD_INT 9
19333: EQUAL
19334: IFFALSE 19344
// sHack := true ;
19336: LD_ADDR_EXP 73
19340: PUSH
19341: LD_INT 1
19343: ST_TO_ADDR
// if p3 = 10 then
19344: LD_VAR 0 3
19348: PUSH
19349: LD_INT 10
19351: EQUAL
19352: IFFALSE 19362
// sFire := true ;
19354: LD_ADDR_EXP 74
19358: PUSH
19359: LD_INT 1
19361: ST_TO_ADDR
// if p3 = 11 then
19362: LD_VAR 0 3
19366: PUSH
19367: LD_INT 11
19369: EQUAL
19370: IFFALSE 19380
// sRefresh := true ;
19372: LD_ADDR_EXP 75
19376: PUSH
19377: LD_INT 1
19379: ST_TO_ADDR
// if p3 = 12 then
19380: LD_VAR 0 3
19384: PUSH
19385: LD_INT 12
19387: EQUAL
19388: IFFALSE 19398
// sExp := true ;
19390: LD_ADDR_EXP 76
19394: PUSH
19395: LD_INT 1
19397: ST_TO_ADDR
// if p3 = 13 then
19398: LD_VAR 0 3
19402: PUSH
19403: LD_INT 13
19405: EQUAL
19406: IFFALSE 19416
// sDepot := true ;
19408: LD_ADDR_EXP 77
19412: PUSH
19413: LD_INT 1
19415: ST_TO_ADDR
// if p3 = 14 then
19416: LD_VAR 0 3
19420: PUSH
19421: LD_INT 14
19423: EQUAL
19424: IFFALSE 19434
// sFlag := true ;
19426: LD_ADDR_EXP 78
19430: PUSH
19431: LD_INT 1
19433: ST_TO_ADDR
// if p3 = 15 then
19434: LD_VAR 0 3
19438: PUSH
19439: LD_INT 15
19441: EQUAL
19442: IFFALSE 19452
// sKamikadze := true ;
19444: LD_ADDR_EXP 86
19448: PUSH
19449: LD_INT 1
19451: ST_TO_ADDR
// if p3 = 16 then
19452: LD_VAR 0 3
19456: PUSH
19457: LD_INT 16
19459: EQUAL
19460: IFFALSE 19470
// sTroll := true ;
19462: LD_ADDR_EXP 87
19466: PUSH
19467: LD_INT 1
19469: ST_TO_ADDR
// if p3 = 17 then
19470: LD_VAR 0 3
19474: PUSH
19475: LD_INT 17
19477: EQUAL
19478: IFFALSE 19488
// sSlow := true ;
19480: LD_ADDR_EXP 88
19484: PUSH
19485: LD_INT 1
19487: ST_TO_ADDR
// if p3 = 18 then
19488: LD_VAR 0 3
19492: PUSH
19493: LD_INT 18
19495: EQUAL
19496: IFFALSE 19506
// sLack := true ;
19498: LD_ADDR_EXP 89
19502: PUSH
19503: LD_INT 1
19505: ST_TO_ADDR
// if p3 = 19 then
19506: LD_VAR 0 3
19510: PUSH
19511: LD_INT 19
19513: EQUAL
19514: IFFALSE 19524
// sTank := true ;
19516: LD_ADDR_EXP 91
19520: PUSH
19521: LD_INT 1
19523: ST_TO_ADDR
// if p3 = 20 then
19524: LD_VAR 0 3
19528: PUSH
19529: LD_INT 20
19531: EQUAL
19532: IFFALSE 19542
// sRemote := true ;
19534: LD_ADDR_EXP 92
19538: PUSH
19539: LD_INT 1
19541: ST_TO_ADDR
// if p3 = 21 then
19542: LD_VAR 0 3
19546: PUSH
19547: LD_INT 21
19549: EQUAL
19550: IFFALSE 19560
// sPowell := true ;
19552: LD_ADDR_EXP 93
19556: PUSH
19557: LD_INT 1
19559: ST_TO_ADDR
// if p3 = 22 then
19560: LD_VAR 0 3
19564: PUSH
19565: LD_INT 22
19567: EQUAL
19568: IFFALSE 19578
// sTeleport := true ;
19570: LD_ADDR_EXP 96
19574: PUSH
19575: LD_INT 1
19577: ST_TO_ADDR
// if p3 = 23 then
19578: LD_VAR 0 3
19582: PUSH
19583: LD_INT 23
19585: EQUAL
19586: IFFALSE 19596
// sOilTower := true ;
19588: LD_ADDR_EXP 98
19592: PUSH
19593: LD_INT 1
19595: ST_TO_ADDR
// if p3 = 24 then
19596: LD_VAR 0 3
19600: PUSH
19601: LD_INT 24
19603: EQUAL
19604: IFFALSE 19614
// sShovel := true ;
19606: LD_ADDR_EXP 99
19610: PUSH
19611: LD_INT 1
19613: ST_TO_ADDR
// if p3 = 25 then
19614: LD_VAR 0 3
19618: PUSH
19619: LD_INT 25
19621: EQUAL
19622: IFFALSE 19632
// sSheik := true ;
19624: LD_ADDR_EXP 100
19628: PUSH
19629: LD_INT 1
19631: ST_TO_ADDR
// if p3 = 26 then
19632: LD_VAR 0 3
19636: PUSH
19637: LD_INT 26
19639: EQUAL
19640: IFFALSE 19650
// sEarthquake := true ;
19642: LD_ADDR_EXP 102
19646: PUSH
19647: LD_INT 1
19649: ST_TO_ADDR
// if p3 = 27 then
19650: LD_VAR 0 3
19654: PUSH
19655: LD_INT 27
19657: EQUAL
19658: IFFALSE 19668
// sAI := true ;
19660: LD_ADDR_EXP 103
19664: PUSH
19665: LD_INT 1
19667: ST_TO_ADDR
// if p3 = 28 then
19668: LD_VAR 0 3
19672: PUSH
19673: LD_INT 28
19675: EQUAL
19676: IFFALSE 19686
// sCargo := true ;
19678: LD_ADDR_EXP 106
19682: PUSH
19683: LD_INT 1
19685: ST_TO_ADDR
// if p3 = 29 then
19686: LD_VAR 0 3
19690: PUSH
19691: LD_INT 29
19693: EQUAL
19694: IFFALSE 19704
// sDLaser := true ;
19696: LD_ADDR_EXP 107
19700: PUSH
19701: LD_INT 1
19703: ST_TO_ADDR
// if p3 = 30 then
19704: LD_VAR 0 3
19708: PUSH
19709: LD_INT 30
19711: EQUAL
19712: IFFALSE 19722
// sExchange := true ;
19714: LD_ADDR_EXP 108
19718: PUSH
19719: LD_INT 1
19721: ST_TO_ADDR
// if p3 = 31 then
19722: LD_VAR 0 3
19726: PUSH
19727: LD_INT 31
19729: EQUAL
19730: IFFALSE 19740
// sFac := true ;
19732: LD_ADDR_EXP 109
19736: PUSH
19737: LD_INT 1
19739: ST_TO_ADDR
// if p3 = 32 then
19740: LD_VAR 0 3
19744: PUSH
19745: LD_INT 32
19747: EQUAL
19748: IFFALSE 19758
// sPower := true ;
19750: LD_ADDR_EXP 110
19754: PUSH
19755: LD_INT 1
19757: ST_TO_ADDR
// if p3 = 33 then
19758: LD_VAR 0 3
19762: PUSH
19763: LD_INT 33
19765: EQUAL
19766: IFFALSE 19776
// sRandom := true ;
19768: LD_ADDR_EXP 111
19772: PUSH
19773: LD_INT 1
19775: ST_TO_ADDR
// if p3 = 34 then
19776: LD_VAR 0 3
19780: PUSH
19781: LD_INT 34
19783: EQUAL
19784: IFFALSE 19794
// sShield := true ;
19786: LD_ADDR_EXP 112
19790: PUSH
19791: LD_INT 1
19793: ST_TO_ADDR
// if p3 = 35 then
19794: LD_VAR 0 3
19798: PUSH
19799: LD_INT 35
19801: EQUAL
19802: IFFALSE 19812
// sTime := true ;
19804: LD_ADDR_EXP 113
19808: PUSH
19809: LD_INT 1
19811: ST_TO_ADDR
// if p3 = 36 then
19812: LD_VAR 0 3
19816: PUSH
19817: LD_INT 36
19819: EQUAL
19820: IFFALSE 19830
// sTools := true ;
19822: LD_ADDR_EXP 114
19826: PUSH
19827: LD_INT 1
19829: ST_TO_ADDR
// if p3 = 101 then
19830: LD_VAR 0 3
19834: PUSH
19835: LD_INT 101
19837: EQUAL
19838: IFFALSE 19848
// sSold := true ;
19840: LD_ADDR_EXP 79
19844: PUSH
19845: LD_INT 1
19847: ST_TO_ADDR
// if p3 = 102 then
19848: LD_VAR 0 3
19852: PUSH
19853: LD_INT 102
19855: EQUAL
19856: IFFALSE 19866
// sDiff := true ;
19858: LD_ADDR_EXP 80
19862: PUSH
19863: LD_INT 1
19865: ST_TO_ADDR
// if p3 = 103 then
19866: LD_VAR 0 3
19870: PUSH
19871: LD_INT 103
19873: EQUAL
19874: IFFALSE 19884
// sFog := true ;
19876: LD_ADDR_EXP 83
19880: PUSH
19881: LD_INT 1
19883: ST_TO_ADDR
// if p3 = 104 then
19884: LD_VAR 0 3
19888: PUSH
19889: LD_INT 104
19891: EQUAL
19892: IFFALSE 19902
// sReset := true ;
19894: LD_ADDR_EXP 84
19898: PUSH
19899: LD_INT 1
19901: ST_TO_ADDR
// if p3 = 105 then
19902: LD_VAR 0 3
19906: PUSH
19907: LD_INT 105
19909: EQUAL
19910: IFFALSE 19920
// sSun := true ;
19912: LD_ADDR_EXP 85
19916: PUSH
19917: LD_INT 1
19919: ST_TO_ADDR
// if p3 = 106 then
19920: LD_VAR 0 3
19924: PUSH
19925: LD_INT 106
19927: EQUAL
19928: IFFALSE 19938
// sTiger := true ;
19930: LD_ADDR_EXP 81
19934: PUSH
19935: LD_INT 1
19937: ST_TO_ADDR
// if p3 = 107 then
19938: LD_VAR 0 3
19942: PUSH
19943: LD_INT 107
19945: EQUAL
19946: IFFALSE 19956
// sBomb := true ;
19948: LD_ADDR_EXP 82
19952: PUSH
19953: LD_INT 1
19955: ST_TO_ADDR
// if p3 = 108 then
19956: LD_VAR 0 3
19960: PUSH
19961: LD_INT 108
19963: EQUAL
19964: IFFALSE 19974
// sWound := true ;
19966: LD_ADDR_EXP 90
19970: PUSH
19971: LD_INT 1
19973: ST_TO_ADDR
// if p3 = 109 then
19974: LD_VAR 0 3
19978: PUSH
19979: LD_INT 109
19981: EQUAL
19982: IFFALSE 19992
// sBetray := true ;
19984: LD_ADDR_EXP 94
19988: PUSH
19989: LD_INT 1
19991: ST_TO_ADDR
// if p3 = 110 then
19992: LD_VAR 0 3
19996: PUSH
19997: LD_INT 110
19999: EQUAL
20000: IFFALSE 20010
// sContamin := true ;
20002: LD_ADDR_EXP 95
20006: PUSH
20007: LD_INT 1
20009: ST_TO_ADDR
// if p3 = 111 then
20010: LD_VAR 0 3
20014: PUSH
20015: LD_INT 111
20017: EQUAL
20018: IFFALSE 20028
// sOil := true ;
20020: LD_ADDR_EXP 97
20024: PUSH
20025: LD_INT 1
20027: ST_TO_ADDR
// if p3 = 112 then
20028: LD_VAR 0 3
20032: PUSH
20033: LD_INT 112
20035: EQUAL
20036: IFFALSE 20046
// sStu := true ;
20038: LD_ADDR_EXP 101
20042: PUSH
20043: LD_INT 1
20045: ST_TO_ADDR
// if p3 = 113 then
20046: LD_VAR 0 3
20050: PUSH
20051: LD_INT 113
20053: EQUAL
20054: IFFALSE 20064
// sBazooka := true ;
20056: LD_ADDR_EXP 104
20060: PUSH
20061: LD_INT 1
20063: ST_TO_ADDR
// if p3 = 114 then
20064: LD_VAR 0 3
20068: PUSH
20069: LD_INT 114
20071: EQUAL
20072: IFFALSE 20082
// sMortar := true ;
20074: LD_ADDR_EXP 105
20078: PUSH
20079: LD_INT 1
20081: ST_TO_ADDR
// if p3 = 115 then
20082: LD_VAR 0 3
20086: PUSH
20087: LD_INT 115
20089: EQUAL
20090: IFFALSE 20100
// sRanger := true ;
20092: LD_ADDR_EXP 115
20096: PUSH
20097: LD_INT 1
20099: ST_TO_ADDR
// if p3 = 116 then
20100: LD_VAR 0 3
20104: PUSH
20105: LD_INT 116
20107: EQUAL
20108: IFFALSE 20118
// sComputer := true ;
20110: LD_ADDR_EXP 116
20114: PUSH
20115: LD_INT 1
20117: ST_TO_ADDR
// if p3 = 117 then
20118: LD_VAR 0 3
20122: PUSH
20123: LD_INT 117
20125: EQUAL
20126: IFFALSE 20136
// s30 := true ;
20128: LD_ADDR_EXP 117
20132: PUSH
20133: LD_INT 1
20135: ST_TO_ADDR
// if p3 = 118 then
20136: LD_VAR 0 3
20140: PUSH
20141: LD_INT 118
20143: EQUAL
20144: IFFALSE 20154
// s60 := true ;
20146: LD_ADDR_EXP 118
20150: PUSH
20151: LD_INT 1
20153: ST_TO_ADDR
// end ; if p2 = stream_mode then
20154: LD_VAR 0 2
20158: PUSH
20159: LD_INT 101
20161: EQUAL
20162: IFFALSE 20290
// begin case p3 of 1 :
20164: LD_VAR 0 3
20168: PUSH
20169: LD_INT 1
20171: DOUBLE
20172: EQUAL
20173: IFTRUE 20177
20175: GO 20184
20177: POP
// hHackUnlimitedResources ; 2 :
20178: CALL 32388 0 0
20182: GO 20290
20184: LD_INT 2
20186: DOUBLE
20187: EQUAL
20188: IFTRUE 20192
20190: GO 20199
20192: POP
// hHackSetLevel10 ; 3 :
20193: CALL 32521 0 0
20197: GO 20290
20199: LD_INT 3
20201: DOUBLE
20202: EQUAL
20203: IFTRUE 20207
20205: GO 20214
20207: POP
// hHackSetLevel10YourUnits ; 4 :
20208: CALL 32606 0 0
20212: GO 20290
20214: LD_INT 4
20216: DOUBLE
20217: EQUAL
20218: IFTRUE 20222
20220: GO 20229
20222: POP
// hHackInvincible ; 5 :
20223: CALL 33054 0 0
20227: GO 20290
20229: LD_INT 5
20231: DOUBLE
20232: EQUAL
20233: IFTRUE 20237
20235: GO 20244
20237: POP
// hHackInvisible ; 6 :
20238: CALL 33165 0 0
20242: GO 20290
20244: LD_INT 6
20246: DOUBLE
20247: EQUAL
20248: IFTRUE 20252
20250: GO 20259
20252: POP
// hHackChangeYourSide ; 7 :
20253: CALL 33222 0 0
20257: GO 20290
20259: LD_INT 7
20261: DOUBLE
20262: EQUAL
20263: IFTRUE 20267
20265: GO 20274
20267: POP
// hHackChangeUnitSide ; 8 :
20268: CALL 33264 0 0
20272: GO 20290
20274: LD_INT 8
20276: DOUBLE
20277: EQUAL
20278: IFTRUE 20282
20280: GO 20289
20282: POP
// hHackFog ; end ;
20283: CALL 33365 0 0
20287: GO 20290
20289: POP
// end ; end ;
20290: LD_VAR 0 7
20294: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20295: GO 20297
20297: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20298: LD_STRING initStreamRollete();
20300: PPUSH
20301: CALL_OW 559
// InitStreamMode ;
20305: CALL 20317 0 0
// DefineStreamItems ( false ) ;
20309: LD_INT 0
20311: PPUSH
20312: CALL 20781 0 1
// end ;
20316: END
// function InitStreamMode ; begin
20317: LD_INT 0
20319: PPUSH
// streamModeActive := false ;
20320: LD_ADDR_EXP 62
20324: PUSH
20325: LD_INT 0
20327: ST_TO_ADDR
// normalCounter := 36 ;
20328: LD_ADDR_EXP 63
20332: PUSH
20333: LD_INT 36
20335: ST_TO_ADDR
// hardcoreCounter := 18 ;
20336: LD_ADDR_EXP 64
20340: PUSH
20341: LD_INT 18
20343: ST_TO_ADDR
// sRocket := false ;
20344: LD_ADDR_EXP 67
20348: PUSH
20349: LD_INT 0
20351: ST_TO_ADDR
// sSpeed := false ;
20352: LD_ADDR_EXP 66
20356: PUSH
20357: LD_INT 0
20359: ST_TO_ADDR
// sEngine := false ;
20360: LD_ADDR_EXP 68
20364: PUSH
20365: LD_INT 0
20367: ST_TO_ADDR
// sSpec := false ;
20368: LD_ADDR_EXP 65
20372: PUSH
20373: LD_INT 0
20375: ST_TO_ADDR
// sLevel := false ;
20376: LD_ADDR_EXP 69
20380: PUSH
20381: LD_INT 0
20383: ST_TO_ADDR
// sArmoury := false ;
20384: LD_ADDR_EXP 70
20388: PUSH
20389: LD_INT 0
20391: ST_TO_ADDR
// sRadar := false ;
20392: LD_ADDR_EXP 71
20396: PUSH
20397: LD_INT 0
20399: ST_TO_ADDR
// sBunker := false ;
20400: LD_ADDR_EXP 72
20404: PUSH
20405: LD_INT 0
20407: ST_TO_ADDR
// sHack := false ;
20408: LD_ADDR_EXP 73
20412: PUSH
20413: LD_INT 0
20415: ST_TO_ADDR
// sFire := false ;
20416: LD_ADDR_EXP 74
20420: PUSH
20421: LD_INT 0
20423: ST_TO_ADDR
// sRefresh := false ;
20424: LD_ADDR_EXP 75
20428: PUSH
20429: LD_INT 0
20431: ST_TO_ADDR
// sExp := false ;
20432: LD_ADDR_EXP 76
20436: PUSH
20437: LD_INT 0
20439: ST_TO_ADDR
// sDepot := false ;
20440: LD_ADDR_EXP 77
20444: PUSH
20445: LD_INT 0
20447: ST_TO_ADDR
// sFlag := false ;
20448: LD_ADDR_EXP 78
20452: PUSH
20453: LD_INT 0
20455: ST_TO_ADDR
// sKamikadze := false ;
20456: LD_ADDR_EXP 86
20460: PUSH
20461: LD_INT 0
20463: ST_TO_ADDR
// sTroll := false ;
20464: LD_ADDR_EXP 87
20468: PUSH
20469: LD_INT 0
20471: ST_TO_ADDR
// sSlow := false ;
20472: LD_ADDR_EXP 88
20476: PUSH
20477: LD_INT 0
20479: ST_TO_ADDR
// sLack := false ;
20480: LD_ADDR_EXP 89
20484: PUSH
20485: LD_INT 0
20487: ST_TO_ADDR
// sTank := false ;
20488: LD_ADDR_EXP 91
20492: PUSH
20493: LD_INT 0
20495: ST_TO_ADDR
// sRemote := false ;
20496: LD_ADDR_EXP 92
20500: PUSH
20501: LD_INT 0
20503: ST_TO_ADDR
// sPowell := false ;
20504: LD_ADDR_EXP 93
20508: PUSH
20509: LD_INT 0
20511: ST_TO_ADDR
// sTeleport := false ;
20512: LD_ADDR_EXP 96
20516: PUSH
20517: LD_INT 0
20519: ST_TO_ADDR
// sOilTower := false ;
20520: LD_ADDR_EXP 98
20524: PUSH
20525: LD_INT 0
20527: ST_TO_ADDR
// sShovel := false ;
20528: LD_ADDR_EXP 99
20532: PUSH
20533: LD_INT 0
20535: ST_TO_ADDR
// sSheik := false ;
20536: LD_ADDR_EXP 100
20540: PUSH
20541: LD_INT 0
20543: ST_TO_ADDR
// sEarthquake := false ;
20544: LD_ADDR_EXP 102
20548: PUSH
20549: LD_INT 0
20551: ST_TO_ADDR
// sAI := false ;
20552: LD_ADDR_EXP 103
20556: PUSH
20557: LD_INT 0
20559: ST_TO_ADDR
// sCargo := false ;
20560: LD_ADDR_EXP 106
20564: PUSH
20565: LD_INT 0
20567: ST_TO_ADDR
// sDLaser := false ;
20568: LD_ADDR_EXP 107
20572: PUSH
20573: LD_INT 0
20575: ST_TO_ADDR
// sExchange := false ;
20576: LD_ADDR_EXP 108
20580: PUSH
20581: LD_INT 0
20583: ST_TO_ADDR
// sFac := false ;
20584: LD_ADDR_EXP 109
20588: PUSH
20589: LD_INT 0
20591: ST_TO_ADDR
// sPower := false ;
20592: LD_ADDR_EXP 110
20596: PUSH
20597: LD_INT 0
20599: ST_TO_ADDR
// sRandom := false ;
20600: LD_ADDR_EXP 111
20604: PUSH
20605: LD_INT 0
20607: ST_TO_ADDR
// sShield := false ;
20608: LD_ADDR_EXP 112
20612: PUSH
20613: LD_INT 0
20615: ST_TO_ADDR
// sTime := false ;
20616: LD_ADDR_EXP 113
20620: PUSH
20621: LD_INT 0
20623: ST_TO_ADDR
// sTools := false ;
20624: LD_ADDR_EXP 114
20628: PUSH
20629: LD_INT 0
20631: ST_TO_ADDR
// sSold := false ;
20632: LD_ADDR_EXP 79
20636: PUSH
20637: LD_INT 0
20639: ST_TO_ADDR
// sDiff := false ;
20640: LD_ADDR_EXP 80
20644: PUSH
20645: LD_INT 0
20647: ST_TO_ADDR
// sFog := false ;
20648: LD_ADDR_EXP 83
20652: PUSH
20653: LD_INT 0
20655: ST_TO_ADDR
// sReset := false ;
20656: LD_ADDR_EXP 84
20660: PUSH
20661: LD_INT 0
20663: ST_TO_ADDR
// sSun := false ;
20664: LD_ADDR_EXP 85
20668: PUSH
20669: LD_INT 0
20671: ST_TO_ADDR
// sTiger := false ;
20672: LD_ADDR_EXP 81
20676: PUSH
20677: LD_INT 0
20679: ST_TO_ADDR
// sBomb := false ;
20680: LD_ADDR_EXP 82
20684: PUSH
20685: LD_INT 0
20687: ST_TO_ADDR
// sWound := false ;
20688: LD_ADDR_EXP 90
20692: PUSH
20693: LD_INT 0
20695: ST_TO_ADDR
// sBetray := false ;
20696: LD_ADDR_EXP 94
20700: PUSH
20701: LD_INT 0
20703: ST_TO_ADDR
// sContamin := false ;
20704: LD_ADDR_EXP 95
20708: PUSH
20709: LD_INT 0
20711: ST_TO_ADDR
// sOil := false ;
20712: LD_ADDR_EXP 97
20716: PUSH
20717: LD_INT 0
20719: ST_TO_ADDR
// sStu := false ;
20720: LD_ADDR_EXP 101
20724: PUSH
20725: LD_INT 0
20727: ST_TO_ADDR
// sBazooka := false ;
20728: LD_ADDR_EXP 104
20732: PUSH
20733: LD_INT 0
20735: ST_TO_ADDR
// sMortar := false ;
20736: LD_ADDR_EXP 105
20740: PUSH
20741: LD_INT 0
20743: ST_TO_ADDR
// sRanger := false ;
20744: LD_ADDR_EXP 115
20748: PUSH
20749: LD_INT 0
20751: ST_TO_ADDR
// sComputer := false ;
20752: LD_ADDR_EXP 116
20756: PUSH
20757: LD_INT 0
20759: ST_TO_ADDR
// s30 := false ;
20760: LD_ADDR_EXP 117
20764: PUSH
20765: LD_INT 0
20767: ST_TO_ADDR
// s60 := false ;
20768: LD_ADDR_EXP 118
20772: PUSH
20773: LD_INT 0
20775: ST_TO_ADDR
// end ;
20776: LD_VAR 0 1
20780: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20781: LD_INT 0
20783: PPUSH
20784: PPUSH
20785: PPUSH
20786: PPUSH
20787: PPUSH
20788: PPUSH
20789: PPUSH
// result := [ ] ;
20790: LD_ADDR_VAR 0 2
20794: PUSH
20795: EMPTY
20796: ST_TO_ADDR
// if campaign_id = 1 then
20797: LD_OWVAR 69
20801: PUSH
20802: LD_INT 1
20804: EQUAL
20805: IFFALSE 23971
// begin case mission_number of 1 :
20807: LD_OWVAR 70
20811: PUSH
20812: LD_INT 1
20814: DOUBLE
20815: EQUAL
20816: IFTRUE 20820
20818: GO 20896
20820: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20821: LD_ADDR_VAR 0 2
20825: PUSH
20826: LD_INT 2
20828: PUSH
20829: LD_INT 4
20831: PUSH
20832: LD_INT 11
20834: PUSH
20835: LD_INT 12
20837: PUSH
20838: LD_INT 15
20840: PUSH
20841: LD_INT 16
20843: PUSH
20844: LD_INT 22
20846: PUSH
20847: LD_INT 23
20849: PUSH
20850: LD_INT 26
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 101
20866: PUSH
20867: LD_INT 102
20869: PUSH
20870: LD_INT 106
20872: PUSH
20873: LD_INT 116
20875: PUSH
20876: LD_INT 117
20878: PUSH
20879: LD_INT 118
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: ST_TO_ADDR
20894: GO 23969
20896: LD_INT 2
20898: DOUBLE
20899: EQUAL
20900: IFTRUE 20904
20902: GO 20988
20904: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20905: LD_ADDR_VAR 0 2
20909: PUSH
20910: LD_INT 2
20912: PUSH
20913: LD_INT 4
20915: PUSH
20916: LD_INT 11
20918: PUSH
20919: LD_INT 12
20921: PUSH
20922: LD_INT 15
20924: PUSH
20925: LD_INT 16
20927: PUSH
20928: LD_INT 22
20930: PUSH
20931: LD_INT 23
20933: PUSH
20934: LD_INT 26
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 101
20950: PUSH
20951: LD_INT 102
20953: PUSH
20954: LD_INT 105
20956: PUSH
20957: LD_INT 106
20959: PUSH
20960: LD_INT 108
20962: PUSH
20963: LD_INT 116
20965: PUSH
20966: LD_INT 117
20968: PUSH
20969: LD_INT 118
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: ST_TO_ADDR
20986: GO 23969
20988: LD_INT 3
20990: DOUBLE
20991: EQUAL
20992: IFTRUE 20996
20994: GO 21084
20996: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20997: LD_ADDR_VAR 0 2
21001: PUSH
21002: LD_INT 2
21004: PUSH
21005: LD_INT 4
21007: PUSH
21008: LD_INT 5
21010: PUSH
21011: LD_INT 11
21013: PUSH
21014: LD_INT 12
21016: PUSH
21017: LD_INT 15
21019: PUSH
21020: LD_INT 16
21022: PUSH
21023: LD_INT 22
21025: PUSH
21026: LD_INT 26
21028: PUSH
21029: LD_INT 36
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 101
21046: PUSH
21047: LD_INT 102
21049: PUSH
21050: LD_INT 105
21052: PUSH
21053: LD_INT 106
21055: PUSH
21056: LD_INT 108
21058: PUSH
21059: LD_INT 116
21061: PUSH
21062: LD_INT 117
21064: PUSH
21065: LD_INT 118
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: ST_TO_ADDR
21082: GO 23969
21084: LD_INT 4
21086: DOUBLE
21087: EQUAL
21088: IFTRUE 21092
21090: GO 21188
21092: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21093: LD_ADDR_VAR 0 2
21097: PUSH
21098: LD_INT 2
21100: PUSH
21101: LD_INT 4
21103: PUSH
21104: LD_INT 5
21106: PUSH
21107: LD_INT 8
21109: PUSH
21110: LD_INT 11
21112: PUSH
21113: LD_INT 12
21115: PUSH
21116: LD_INT 15
21118: PUSH
21119: LD_INT 16
21121: PUSH
21122: LD_INT 22
21124: PUSH
21125: LD_INT 23
21127: PUSH
21128: LD_INT 26
21130: PUSH
21131: LD_INT 36
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 101
21150: PUSH
21151: LD_INT 102
21153: PUSH
21154: LD_INT 105
21156: PUSH
21157: LD_INT 106
21159: PUSH
21160: LD_INT 108
21162: PUSH
21163: LD_INT 116
21165: PUSH
21166: LD_INT 117
21168: PUSH
21169: LD_INT 118
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: ST_TO_ADDR
21186: GO 23969
21188: LD_INT 5
21190: DOUBLE
21191: EQUAL
21192: IFTRUE 21196
21194: GO 21308
21196: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21197: LD_ADDR_VAR 0 2
21201: PUSH
21202: LD_INT 2
21204: PUSH
21205: LD_INT 4
21207: PUSH
21208: LD_INT 5
21210: PUSH
21211: LD_INT 6
21213: PUSH
21214: LD_INT 8
21216: PUSH
21217: LD_INT 11
21219: PUSH
21220: LD_INT 12
21222: PUSH
21223: LD_INT 15
21225: PUSH
21226: LD_INT 16
21228: PUSH
21229: LD_INT 22
21231: PUSH
21232: LD_INT 23
21234: PUSH
21235: LD_INT 25
21237: PUSH
21238: LD_INT 26
21240: PUSH
21241: LD_INT 36
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 101
21262: PUSH
21263: LD_INT 102
21265: PUSH
21266: LD_INT 105
21268: PUSH
21269: LD_INT 106
21271: PUSH
21272: LD_INT 108
21274: PUSH
21275: LD_INT 109
21277: PUSH
21278: LD_INT 112
21280: PUSH
21281: LD_INT 116
21283: PUSH
21284: LD_INT 117
21286: PUSH
21287: LD_INT 118
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: ST_TO_ADDR
21306: GO 23969
21308: LD_INT 6
21310: DOUBLE
21311: EQUAL
21312: IFTRUE 21316
21314: GO 21448
21316: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21317: LD_ADDR_VAR 0 2
21321: PUSH
21322: LD_INT 2
21324: PUSH
21325: LD_INT 4
21327: PUSH
21328: LD_INT 5
21330: PUSH
21331: LD_INT 6
21333: PUSH
21334: LD_INT 8
21336: PUSH
21337: LD_INT 11
21339: PUSH
21340: LD_INT 12
21342: PUSH
21343: LD_INT 15
21345: PUSH
21346: LD_INT 16
21348: PUSH
21349: LD_INT 20
21351: PUSH
21352: LD_INT 21
21354: PUSH
21355: LD_INT 22
21357: PUSH
21358: LD_INT 23
21360: PUSH
21361: LD_INT 25
21363: PUSH
21364: LD_INT 26
21366: PUSH
21367: LD_INT 30
21369: PUSH
21370: LD_INT 31
21372: PUSH
21373: LD_INT 32
21375: PUSH
21376: LD_INT 36
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: PUSH
21400: LD_INT 101
21402: PUSH
21403: LD_INT 102
21405: PUSH
21406: LD_INT 105
21408: PUSH
21409: LD_INT 106
21411: PUSH
21412: LD_INT 108
21414: PUSH
21415: LD_INT 109
21417: PUSH
21418: LD_INT 112
21420: PUSH
21421: LD_INT 116
21423: PUSH
21424: LD_INT 117
21426: PUSH
21427: LD_INT 118
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: ST_TO_ADDR
21446: GO 23969
21448: LD_INT 7
21450: DOUBLE
21451: EQUAL
21452: IFTRUE 21456
21454: GO 21568
21456: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21457: LD_ADDR_VAR 0 2
21461: PUSH
21462: LD_INT 2
21464: PUSH
21465: LD_INT 4
21467: PUSH
21468: LD_INT 5
21470: PUSH
21471: LD_INT 7
21473: PUSH
21474: LD_INT 11
21476: PUSH
21477: LD_INT 12
21479: PUSH
21480: LD_INT 15
21482: PUSH
21483: LD_INT 16
21485: PUSH
21486: LD_INT 20
21488: PUSH
21489: LD_INT 21
21491: PUSH
21492: LD_INT 22
21494: PUSH
21495: LD_INT 23
21497: PUSH
21498: LD_INT 25
21500: PUSH
21501: LD_INT 26
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 101
21522: PUSH
21523: LD_INT 102
21525: PUSH
21526: LD_INT 103
21528: PUSH
21529: LD_INT 105
21531: PUSH
21532: LD_INT 106
21534: PUSH
21535: LD_INT 108
21537: PUSH
21538: LD_INT 112
21540: PUSH
21541: LD_INT 116
21543: PUSH
21544: LD_INT 117
21546: PUSH
21547: LD_INT 118
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: ST_TO_ADDR
21566: GO 23969
21568: LD_INT 8
21570: DOUBLE
21571: EQUAL
21572: IFTRUE 21576
21574: GO 21716
21576: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21577: LD_ADDR_VAR 0 2
21581: PUSH
21582: LD_INT 2
21584: PUSH
21585: LD_INT 4
21587: PUSH
21588: LD_INT 5
21590: PUSH
21591: LD_INT 6
21593: PUSH
21594: LD_INT 7
21596: PUSH
21597: LD_INT 8
21599: PUSH
21600: LD_INT 11
21602: PUSH
21603: LD_INT 12
21605: PUSH
21606: LD_INT 15
21608: PUSH
21609: LD_INT 16
21611: PUSH
21612: LD_INT 20
21614: PUSH
21615: LD_INT 21
21617: PUSH
21618: LD_INT 22
21620: PUSH
21621: LD_INT 23
21623: PUSH
21624: LD_INT 25
21626: PUSH
21627: LD_INT 26
21629: PUSH
21630: LD_INT 30
21632: PUSH
21633: LD_INT 31
21635: PUSH
21636: LD_INT 32
21638: PUSH
21639: LD_INT 36
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 101
21666: PUSH
21667: LD_INT 102
21669: PUSH
21670: LD_INT 103
21672: PUSH
21673: LD_INT 105
21675: PUSH
21676: LD_INT 106
21678: PUSH
21679: LD_INT 108
21681: PUSH
21682: LD_INT 109
21684: PUSH
21685: LD_INT 112
21687: PUSH
21688: LD_INT 116
21690: PUSH
21691: LD_INT 117
21693: PUSH
21694: LD_INT 118
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: ST_TO_ADDR
21714: GO 23969
21716: LD_INT 9
21718: DOUBLE
21719: EQUAL
21720: IFTRUE 21724
21722: GO 21872
21724: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21725: LD_ADDR_VAR 0 2
21729: PUSH
21730: LD_INT 2
21732: PUSH
21733: LD_INT 4
21735: PUSH
21736: LD_INT 5
21738: PUSH
21739: LD_INT 6
21741: PUSH
21742: LD_INT 7
21744: PUSH
21745: LD_INT 8
21747: PUSH
21748: LD_INT 11
21750: PUSH
21751: LD_INT 12
21753: PUSH
21754: LD_INT 15
21756: PUSH
21757: LD_INT 16
21759: PUSH
21760: LD_INT 20
21762: PUSH
21763: LD_INT 21
21765: PUSH
21766: LD_INT 22
21768: PUSH
21769: LD_INT 23
21771: PUSH
21772: LD_INT 25
21774: PUSH
21775: LD_INT 26
21777: PUSH
21778: LD_INT 28
21780: PUSH
21781: LD_INT 30
21783: PUSH
21784: LD_INT 31
21786: PUSH
21787: LD_INT 32
21789: PUSH
21790: LD_INT 36
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 101
21818: PUSH
21819: LD_INT 102
21821: PUSH
21822: LD_INT 103
21824: PUSH
21825: LD_INT 105
21827: PUSH
21828: LD_INT 106
21830: PUSH
21831: LD_INT 108
21833: PUSH
21834: LD_INT 109
21836: PUSH
21837: LD_INT 112
21839: PUSH
21840: LD_INT 114
21842: PUSH
21843: LD_INT 116
21845: PUSH
21846: LD_INT 117
21848: PUSH
21849: LD_INT 118
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: ST_TO_ADDR
21870: GO 23969
21872: LD_INT 10
21874: DOUBLE
21875: EQUAL
21876: IFTRUE 21880
21878: GO 22076
21880: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21881: LD_ADDR_VAR 0 2
21885: PUSH
21886: LD_INT 2
21888: PUSH
21889: LD_INT 4
21891: PUSH
21892: LD_INT 5
21894: PUSH
21895: LD_INT 6
21897: PUSH
21898: LD_INT 7
21900: PUSH
21901: LD_INT 8
21903: PUSH
21904: LD_INT 9
21906: PUSH
21907: LD_INT 10
21909: PUSH
21910: LD_INT 11
21912: PUSH
21913: LD_INT 12
21915: PUSH
21916: LD_INT 13
21918: PUSH
21919: LD_INT 14
21921: PUSH
21922: LD_INT 15
21924: PUSH
21925: LD_INT 16
21927: PUSH
21928: LD_INT 17
21930: PUSH
21931: LD_INT 18
21933: PUSH
21934: LD_INT 19
21936: PUSH
21937: LD_INT 20
21939: PUSH
21940: LD_INT 21
21942: PUSH
21943: LD_INT 22
21945: PUSH
21946: LD_INT 23
21948: PUSH
21949: LD_INT 24
21951: PUSH
21952: LD_INT 25
21954: PUSH
21955: LD_INT 26
21957: PUSH
21958: LD_INT 28
21960: PUSH
21961: LD_INT 30
21963: PUSH
21964: LD_INT 31
21966: PUSH
21967: LD_INT 32
21969: PUSH
21970: LD_INT 36
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 101
22006: PUSH
22007: LD_INT 102
22009: PUSH
22010: LD_INT 103
22012: PUSH
22013: LD_INT 104
22015: PUSH
22016: LD_INT 105
22018: PUSH
22019: LD_INT 106
22021: PUSH
22022: LD_INT 107
22024: PUSH
22025: LD_INT 108
22027: PUSH
22028: LD_INT 109
22030: PUSH
22031: LD_INT 110
22033: PUSH
22034: LD_INT 111
22036: PUSH
22037: LD_INT 112
22039: PUSH
22040: LD_INT 114
22042: PUSH
22043: LD_INT 116
22045: PUSH
22046: LD_INT 117
22048: PUSH
22049: LD_INT 118
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: ST_TO_ADDR
22074: GO 23969
22076: LD_INT 11
22078: DOUBLE
22079: EQUAL
22080: IFTRUE 22084
22082: GO 22288
22084: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22085: LD_ADDR_VAR 0 2
22089: PUSH
22090: LD_INT 2
22092: PUSH
22093: LD_INT 3
22095: PUSH
22096: LD_INT 4
22098: PUSH
22099: LD_INT 5
22101: PUSH
22102: LD_INT 6
22104: PUSH
22105: LD_INT 7
22107: PUSH
22108: LD_INT 8
22110: PUSH
22111: LD_INT 9
22113: PUSH
22114: LD_INT 10
22116: PUSH
22117: LD_INT 11
22119: PUSH
22120: LD_INT 12
22122: PUSH
22123: LD_INT 13
22125: PUSH
22126: LD_INT 14
22128: PUSH
22129: LD_INT 15
22131: PUSH
22132: LD_INT 16
22134: PUSH
22135: LD_INT 17
22137: PUSH
22138: LD_INT 18
22140: PUSH
22141: LD_INT 19
22143: PUSH
22144: LD_INT 20
22146: PUSH
22147: LD_INT 21
22149: PUSH
22150: LD_INT 22
22152: PUSH
22153: LD_INT 23
22155: PUSH
22156: LD_INT 24
22158: PUSH
22159: LD_INT 25
22161: PUSH
22162: LD_INT 26
22164: PUSH
22165: LD_INT 28
22167: PUSH
22168: LD_INT 30
22170: PUSH
22171: LD_INT 31
22173: PUSH
22174: LD_INT 32
22176: PUSH
22177: LD_INT 34
22179: PUSH
22180: LD_INT 36
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 101
22218: PUSH
22219: LD_INT 102
22221: PUSH
22222: LD_INT 103
22224: PUSH
22225: LD_INT 104
22227: PUSH
22228: LD_INT 105
22230: PUSH
22231: LD_INT 106
22233: PUSH
22234: LD_INT 107
22236: PUSH
22237: LD_INT 108
22239: PUSH
22240: LD_INT 109
22242: PUSH
22243: LD_INT 110
22245: PUSH
22246: LD_INT 111
22248: PUSH
22249: LD_INT 112
22251: PUSH
22252: LD_INT 114
22254: PUSH
22255: LD_INT 116
22257: PUSH
22258: LD_INT 117
22260: PUSH
22261: LD_INT 118
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: ST_TO_ADDR
22286: GO 23969
22288: LD_INT 12
22290: DOUBLE
22291: EQUAL
22292: IFTRUE 22296
22294: GO 22516
22296: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22297: LD_ADDR_VAR 0 2
22301: PUSH
22302: LD_INT 1
22304: PUSH
22305: LD_INT 2
22307: PUSH
22308: LD_INT 3
22310: PUSH
22311: LD_INT 4
22313: PUSH
22314: LD_INT 5
22316: PUSH
22317: LD_INT 6
22319: PUSH
22320: LD_INT 7
22322: PUSH
22323: LD_INT 8
22325: PUSH
22326: LD_INT 9
22328: PUSH
22329: LD_INT 10
22331: PUSH
22332: LD_INT 11
22334: PUSH
22335: LD_INT 12
22337: PUSH
22338: LD_INT 13
22340: PUSH
22341: LD_INT 14
22343: PUSH
22344: LD_INT 15
22346: PUSH
22347: LD_INT 16
22349: PUSH
22350: LD_INT 17
22352: PUSH
22353: LD_INT 18
22355: PUSH
22356: LD_INT 19
22358: PUSH
22359: LD_INT 20
22361: PUSH
22362: LD_INT 21
22364: PUSH
22365: LD_INT 22
22367: PUSH
22368: LD_INT 23
22370: PUSH
22371: LD_INT 24
22373: PUSH
22374: LD_INT 25
22376: PUSH
22377: LD_INT 26
22379: PUSH
22380: LD_INT 27
22382: PUSH
22383: LD_INT 28
22385: PUSH
22386: LD_INT 30
22388: PUSH
22389: LD_INT 31
22391: PUSH
22392: LD_INT 32
22394: PUSH
22395: LD_INT 33
22397: PUSH
22398: LD_INT 34
22400: PUSH
22401: LD_INT 36
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 101
22442: PUSH
22443: LD_INT 102
22445: PUSH
22446: LD_INT 103
22448: PUSH
22449: LD_INT 104
22451: PUSH
22452: LD_INT 105
22454: PUSH
22455: LD_INT 106
22457: PUSH
22458: LD_INT 107
22460: PUSH
22461: LD_INT 108
22463: PUSH
22464: LD_INT 109
22466: PUSH
22467: LD_INT 110
22469: PUSH
22470: LD_INT 111
22472: PUSH
22473: LD_INT 112
22475: PUSH
22476: LD_INT 113
22478: PUSH
22479: LD_INT 114
22481: PUSH
22482: LD_INT 116
22484: PUSH
22485: LD_INT 117
22487: PUSH
22488: LD_INT 118
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: ST_TO_ADDR
22514: GO 23969
22516: LD_INT 13
22518: DOUBLE
22519: EQUAL
22520: IFTRUE 22524
22522: GO 22732
22524: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22525: LD_ADDR_VAR 0 2
22529: PUSH
22530: LD_INT 1
22532: PUSH
22533: LD_INT 2
22535: PUSH
22536: LD_INT 3
22538: PUSH
22539: LD_INT 4
22541: PUSH
22542: LD_INT 5
22544: PUSH
22545: LD_INT 8
22547: PUSH
22548: LD_INT 9
22550: PUSH
22551: LD_INT 10
22553: PUSH
22554: LD_INT 11
22556: PUSH
22557: LD_INT 12
22559: PUSH
22560: LD_INT 14
22562: PUSH
22563: LD_INT 15
22565: PUSH
22566: LD_INT 16
22568: PUSH
22569: LD_INT 17
22571: PUSH
22572: LD_INT 18
22574: PUSH
22575: LD_INT 19
22577: PUSH
22578: LD_INT 20
22580: PUSH
22581: LD_INT 21
22583: PUSH
22584: LD_INT 22
22586: PUSH
22587: LD_INT 23
22589: PUSH
22590: LD_INT 24
22592: PUSH
22593: LD_INT 25
22595: PUSH
22596: LD_INT 26
22598: PUSH
22599: LD_INT 27
22601: PUSH
22602: LD_INT 28
22604: PUSH
22605: LD_INT 30
22607: PUSH
22608: LD_INT 31
22610: PUSH
22611: LD_INT 32
22613: PUSH
22614: LD_INT 33
22616: PUSH
22617: LD_INT 34
22619: PUSH
22620: LD_INT 36
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 101
22658: PUSH
22659: LD_INT 102
22661: PUSH
22662: LD_INT 103
22664: PUSH
22665: LD_INT 104
22667: PUSH
22668: LD_INT 105
22670: PUSH
22671: LD_INT 106
22673: PUSH
22674: LD_INT 107
22676: PUSH
22677: LD_INT 108
22679: PUSH
22680: LD_INT 109
22682: PUSH
22683: LD_INT 110
22685: PUSH
22686: LD_INT 111
22688: PUSH
22689: LD_INT 112
22691: PUSH
22692: LD_INT 113
22694: PUSH
22695: LD_INT 114
22697: PUSH
22698: LD_INT 116
22700: PUSH
22701: LD_INT 117
22703: PUSH
22704: LD_INT 118
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: ST_TO_ADDR
22730: GO 23969
22732: LD_INT 14
22734: DOUBLE
22735: EQUAL
22736: IFTRUE 22740
22738: GO 22964
22740: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22741: LD_ADDR_VAR 0 2
22745: PUSH
22746: LD_INT 1
22748: PUSH
22749: LD_INT 2
22751: PUSH
22752: LD_INT 3
22754: PUSH
22755: LD_INT 4
22757: PUSH
22758: LD_INT 5
22760: PUSH
22761: LD_INT 6
22763: PUSH
22764: LD_INT 7
22766: PUSH
22767: LD_INT 8
22769: PUSH
22770: LD_INT 9
22772: PUSH
22773: LD_INT 10
22775: PUSH
22776: LD_INT 11
22778: PUSH
22779: LD_INT 12
22781: PUSH
22782: LD_INT 13
22784: PUSH
22785: LD_INT 14
22787: PUSH
22788: LD_INT 15
22790: PUSH
22791: LD_INT 16
22793: PUSH
22794: LD_INT 17
22796: PUSH
22797: LD_INT 18
22799: PUSH
22800: LD_INT 19
22802: PUSH
22803: LD_INT 20
22805: PUSH
22806: LD_INT 21
22808: PUSH
22809: LD_INT 22
22811: PUSH
22812: LD_INT 23
22814: PUSH
22815: LD_INT 24
22817: PUSH
22818: LD_INT 25
22820: PUSH
22821: LD_INT 26
22823: PUSH
22824: LD_INT 27
22826: PUSH
22827: LD_INT 28
22829: PUSH
22830: LD_INT 29
22832: PUSH
22833: LD_INT 30
22835: PUSH
22836: LD_INT 31
22838: PUSH
22839: LD_INT 32
22841: PUSH
22842: LD_INT 33
22844: PUSH
22845: LD_INT 34
22847: PUSH
22848: LD_INT 36
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 101
22890: PUSH
22891: LD_INT 102
22893: PUSH
22894: LD_INT 103
22896: PUSH
22897: LD_INT 104
22899: PUSH
22900: LD_INT 105
22902: PUSH
22903: LD_INT 106
22905: PUSH
22906: LD_INT 107
22908: PUSH
22909: LD_INT 108
22911: PUSH
22912: LD_INT 109
22914: PUSH
22915: LD_INT 110
22917: PUSH
22918: LD_INT 111
22920: PUSH
22921: LD_INT 112
22923: PUSH
22924: LD_INT 113
22926: PUSH
22927: LD_INT 114
22929: PUSH
22930: LD_INT 116
22932: PUSH
22933: LD_INT 117
22935: PUSH
22936: LD_INT 118
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: ST_TO_ADDR
22962: GO 23969
22964: LD_INT 15
22966: DOUBLE
22967: EQUAL
22968: IFTRUE 22972
22970: GO 23196
22972: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22973: LD_ADDR_VAR 0 2
22977: PUSH
22978: LD_INT 1
22980: PUSH
22981: LD_INT 2
22983: PUSH
22984: LD_INT 3
22986: PUSH
22987: LD_INT 4
22989: PUSH
22990: LD_INT 5
22992: PUSH
22993: LD_INT 6
22995: PUSH
22996: LD_INT 7
22998: PUSH
22999: LD_INT 8
23001: PUSH
23002: LD_INT 9
23004: PUSH
23005: LD_INT 10
23007: PUSH
23008: LD_INT 11
23010: PUSH
23011: LD_INT 12
23013: PUSH
23014: LD_INT 13
23016: PUSH
23017: LD_INT 14
23019: PUSH
23020: LD_INT 15
23022: PUSH
23023: LD_INT 16
23025: PUSH
23026: LD_INT 17
23028: PUSH
23029: LD_INT 18
23031: PUSH
23032: LD_INT 19
23034: PUSH
23035: LD_INT 20
23037: PUSH
23038: LD_INT 21
23040: PUSH
23041: LD_INT 22
23043: PUSH
23044: LD_INT 23
23046: PUSH
23047: LD_INT 24
23049: PUSH
23050: LD_INT 25
23052: PUSH
23053: LD_INT 26
23055: PUSH
23056: LD_INT 27
23058: PUSH
23059: LD_INT 28
23061: PUSH
23062: LD_INT 29
23064: PUSH
23065: LD_INT 30
23067: PUSH
23068: LD_INT 31
23070: PUSH
23071: LD_INT 32
23073: PUSH
23074: LD_INT 33
23076: PUSH
23077: LD_INT 34
23079: PUSH
23080: LD_INT 36
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 101
23122: PUSH
23123: LD_INT 102
23125: PUSH
23126: LD_INT 103
23128: PUSH
23129: LD_INT 104
23131: PUSH
23132: LD_INT 105
23134: PUSH
23135: LD_INT 106
23137: PUSH
23138: LD_INT 107
23140: PUSH
23141: LD_INT 108
23143: PUSH
23144: LD_INT 109
23146: PUSH
23147: LD_INT 110
23149: PUSH
23150: LD_INT 111
23152: PUSH
23153: LD_INT 112
23155: PUSH
23156: LD_INT 113
23158: PUSH
23159: LD_INT 114
23161: PUSH
23162: LD_INT 116
23164: PUSH
23165: LD_INT 117
23167: PUSH
23168: LD_INT 118
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: ST_TO_ADDR
23194: GO 23969
23196: LD_INT 16
23198: DOUBLE
23199: EQUAL
23200: IFTRUE 23204
23202: GO 23340
23204: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23205: LD_ADDR_VAR 0 2
23209: PUSH
23210: LD_INT 2
23212: PUSH
23213: LD_INT 4
23215: PUSH
23216: LD_INT 5
23218: PUSH
23219: LD_INT 7
23221: PUSH
23222: LD_INT 11
23224: PUSH
23225: LD_INT 12
23227: PUSH
23228: LD_INT 15
23230: PUSH
23231: LD_INT 16
23233: PUSH
23234: LD_INT 20
23236: PUSH
23237: LD_INT 21
23239: PUSH
23240: LD_INT 22
23242: PUSH
23243: LD_INT 23
23245: PUSH
23246: LD_INT 25
23248: PUSH
23249: LD_INT 26
23251: PUSH
23252: LD_INT 30
23254: PUSH
23255: LD_INT 31
23257: PUSH
23258: LD_INT 32
23260: PUSH
23261: LD_INT 33
23263: PUSH
23264: LD_INT 34
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 101
23290: PUSH
23291: LD_INT 102
23293: PUSH
23294: LD_INT 103
23296: PUSH
23297: LD_INT 106
23299: PUSH
23300: LD_INT 108
23302: PUSH
23303: LD_INT 112
23305: PUSH
23306: LD_INT 113
23308: PUSH
23309: LD_INT 114
23311: PUSH
23312: LD_INT 116
23314: PUSH
23315: LD_INT 117
23317: PUSH
23318: LD_INT 118
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: ST_TO_ADDR
23338: GO 23969
23340: LD_INT 17
23342: DOUBLE
23343: EQUAL
23344: IFTRUE 23348
23346: GO 23572
23348: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23349: LD_ADDR_VAR 0 2
23353: PUSH
23354: LD_INT 1
23356: PUSH
23357: LD_INT 2
23359: PUSH
23360: LD_INT 3
23362: PUSH
23363: LD_INT 4
23365: PUSH
23366: LD_INT 5
23368: PUSH
23369: LD_INT 6
23371: PUSH
23372: LD_INT 7
23374: PUSH
23375: LD_INT 8
23377: PUSH
23378: LD_INT 9
23380: PUSH
23381: LD_INT 10
23383: PUSH
23384: LD_INT 11
23386: PUSH
23387: LD_INT 12
23389: PUSH
23390: LD_INT 13
23392: PUSH
23393: LD_INT 14
23395: PUSH
23396: LD_INT 15
23398: PUSH
23399: LD_INT 16
23401: PUSH
23402: LD_INT 17
23404: PUSH
23405: LD_INT 18
23407: PUSH
23408: LD_INT 19
23410: PUSH
23411: LD_INT 20
23413: PUSH
23414: LD_INT 21
23416: PUSH
23417: LD_INT 22
23419: PUSH
23420: LD_INT 23
23422: PUSH
23423: LD_INT 24
23425: PUSH
23426: LD_INT 25
23428: PUSH
23429: LD_INT 26
23431: PUSH
23432: LD_INT 27
23434: PUSH
23435: LD_INT 28
23437: PUSH
23438: LD_INT 29
23440: PUSH
23441: LD_INT 30
23443: PUSH
23444: LD_INT 31
23446: PUSH
23447: LD_INT 32
23449: PUSH
23450: LD_INT 33
23452: PUSH
23453: LD_INT 34
23455: PUSH
23456: LD_INT 36
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 101
23498: PUSH
23499: LD_INT 102
23501: PUSH
23502: LD_INT 103
23504: PUSH
23505: LD_INT 104
23507: PUSH
23508: LD_INT 105
23510: PUSH
23511: LD_INT 106
23513: PUSH
23514: LD_INT 107
23516: PUSH
23517: LD_INT 108
23519: PUSH
23520: LD_INT 109
23522: PUSH
23523: LD_INT 110
23525: PUSH
23526: LD_INT 111
23528: PUSH
23529: LD_INT 112
23531: PUSH
23532: LD_INT 113
23534: PUSH
23535: LD_INT 114
23537: PUSH
23538: LD_INT 116
23540: PUSH
23541: LD_INT 117
23543: PUSH
23544: LD_INT 118
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: ST_TO_ADDR
23570: GO 23969
23572: LD_INT 18
23574: DOUBLE
23575: EQUAL
23576: IFTRUE 23580
23578: GO 23728
23580: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23581: LD_ADDR_VAR 0 2
23585: PUSH
23586: LD_INT 2
23588: PUSH
23589: LD_INT 4
23591: PUSH
23592: LD_INT 5
23594: PUSH
23595: LD_INT 7
23597: PUSH
23598: LD_INT 11
23600: PUSH
23601: LD_INT 12
23603: PUSH
23604: LD_INT 15
23606: PUSH
23607: LD_INT 16
23609: PUSH
23610: LD_INT 20
23612: PUSH
23613: LD_INT 21
23615: PUSH
23616: LD_INT 22
23618: PUSH
23619: LD_INT 23
23621: PUSH
23622: LD_INT 25
23624: PUSH
23625: LD_INT 26
23627: PUSH
23628: LD_INT 30
23630: PUSH
23631: LD_INT 31
23633: PUSH
23634: LD_INT 32
23636: PUSH
23637: LD_INT 33
23639: PUSH
23640: LD_INT 34
23642: PUSH
23643: LD_INT 35
23645: PUSH
23646: LD_INT 36
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 101
23674: PUSH
23675: LD_INT 102
23677: PUSH
23678: LD_INT 103
23680: PUSH
23681: LD_INT 106
23683: PUSH
23684: LD_INT 108
23686: PUSH
23687: LD_INT 112
23689: PUSH
23690: LD_INT 113
23692: PUSH
23693: LD_INT 114
23695: PUSH
23696: LD_INT 115
23698: PUSH
23699: LD_INT 116
23701: PUSH
23702: LD_INT 117
23704: PUSH
23705: LD_INT 118
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: ST_TO_ADDR
23726: GO 23969
23728: LD_INT 19
23730: DOUBLE
23731: EQUAL
23732: IFTRUE 23736
23734: GO 23968
23736: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23737: LD_ADDR_VAR 0 2
23741: PUSH
23742: LD_INT 1
23744: PUSH
23745: LD_INT 2
23747: PUSH
23748: LD_INT 3
23750: PUSH
23751: LD_INT 4
23753: PUSH
23754: LD_INT 5
23756: PUSH
23757: LD_INT 6
23759: PUSH
23760: LD_INT 7
23762: PUSH
23763: LD_INT 8
23765: PUSH
23766: LD_INT 9
23768: PUSH
23769: LD_INT 10
23771: PUSH
23772: LD_INT 11
23774: PUSH
23775: LD_INT 12
23777: PUSH
23778: LD_INT 13
23780: PUSH
23781: LD_INT 14
23783: PUSH
23784: LD_INT 15
23786: PUSH
23787: LD_INT 16
23789: PUSH
23790: LD_INT 17
23792: PUSH
23793: LD_INT 18
23795: PUSH
23796: LD_INT 19
23798: PUSH
23799: LD_INT 20
23801: PUSH
23802: LD_INT 21
23804: PUSH
23805: LD_INT 22
23807: PUSH
23808: LD_INT 23
23810: PUSH
23811: LD_INT 24
23813: PUSH
23814: LD_INT 25
23816: PUSH
23817: LD_INT 26
23819: PUSH
23820: LD_INT 27
23822: PUSH
23823: LD_INT 28
23825: PUSH
23826: LD_INT 29
23828: PUSH
23829: LD_INT 30
23831: PUSH
23832: LD_INT 31
23834: PUSH
23835: LD_INT 32
23837: PUSH
23838: LD_INT 33
23840: PUSH
23841: LD_INT 34
23843: PUSH
23844: LD_INT 35
23846: PUSH
23847: LD_INT 36
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 101
23890: PUSH
23891: LD_INT 102
23893: PUSH
23894: LD_INT 103
23896: PUSH
23897: LD_INT 104
23899: PUSH
23900: LD_INT 105
23902: PUSH
23903: LD_INT 106
23905: PUSH
23906: LD_INT 107
23908: PUSH
23909: LD_INT 108
23911: PUSH
23912: LD_INT 109
23914: PUSH
23915: LD_INT 110
23917: PUSH
23918: LD_INT 111
23920: PUSH
23921: LD_INT 112
23923: PUSH
23924: LD_INT 113
23926: PUSH
23927: LD_INT 114
23929: PUSH
23930: LD_INT 115
23932: PUSH
23933: LD_INT 116
23935: PUSH
23936: LD_INT 117
23938: PUSH
23939: LD_INT 118
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: ST_TO_ADDR
23966: GO 23969
23968: POP
// end else
23969: GO 24200
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23971: LD_ADDR_VAR 0 2
23975: PUSH
23976: LD_INT 1
23978: PUSH
23979: LD_INT 2
23981: PUSH
23982: LD_INT 3
23984: PUSH
23985: LD_INT 4
23987: PUSH
23988: LD_INT 5
23990: PUSH
23991: LD_INT 6
23993: PUSH
23994: LD_INT 7
23996: PUSH
23997: LD_INT 8
23999: PUSH
24000: LD_INT 9
24002: PUSH
24003: LD_INT 10
24005: PUSH
24006: LD_INT 11
24008: PUSH
24009: LD_INT 12
24011: PUSH
24012: LD_INT 13
24014: PUSH
24015: LD_INT 14
24017: PUSH
24018: LD_INT 15
24020: PUSH
24021: LD_INT 16
24023: PUSH
24024: LD_INT 17
24026: PUSH
24027: LD_INT 18
24029: PUSH
24030: LD_INT 19
24032: PUSH
24033: LD_INT 20
24035: PUSH
24036: LD_INT 21
24038: PUSH
24039: LD_INT 22
24041: PUSH
24042: LD_INT 23
24044: PUSH
24045: LD_INT 24
24047: PUSH
24048: LD_INT 25
24050: PUSH
24051: LD_INT 26
24053: PUSH
24054: LD_INT 27
24056: PUSH
24057: LD_INT 28
24059: PUSH
24060: LD_INT 29
24062: PUSH
24063: LD_INT 30
24065: PUSH
24066: LD_INT 31
24068: PUSH
24069: LD_INT 32
24071: PUSH
24072: LD_INT 33
24074: PUSH
24075: LD_INT 34
24077: PUSH
24078: LD_INT 35
24080: PUSH
24081: LD_INT 36
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 101
24124: PUSH
24125: LD_INT 102
24127: PUSH
24128: LD_INT 103
24130: PUSH
24131: LD_INT 104
24133: PUSH
24134: LD_INT 105
24136: PUSH
24137: LD_INT 106
24139: PUSH
24140: LD_INT 107
24142: PUSH
24143: LD_INT 108
24145: PUSH
24146: LD_INT 109
24148: PUSH
24149: LD_INT 110
24151: PUSH
24152: LD_INT 111
24154: PUSH
24155: LD_INT 112
24157: PUSH
24158: LD_INT 113
24160: PUSH
24161: LD_INT 114
24163: PUSH
24164: LD_INT 115
24166: PUSH
24167: LD_INT 116
24169: PUSH
24170: LD_INT 117
24172: PUSH
24173: LD_INT 118
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: ST_TO_ADDR
// if result then
24200: LD_VAR 0 2
24204: IFFALSE 24990
// begin normal :=  ;
24206: LD_ADDR_VAR 0 5
24210: PUSH
24211: LD_STRING 
24213: ST_TO_ADDR
// hardcore :=  ;
24214: LD_ADDR_VAR 0 6
24218: PUSH
24219: LD_STRING 
24221: ST_TO_ADDR
// active :=  ;
24222: LD_ADDR_VAR 0 7
24226: PUSH
24227: LD_STRING 
24229: ST_TO_ADDR
// for i = 1 to normalCounter do
24230: LD_ADDR_VAR 0 8
24234: PUSH
24235: DOUBLE
24236: LD_INT 1
24238: DEC
24239: ST_TO_ADDR
24240: LD_EXP 63
24244: PUSH
24245: FOR_TO
24246: IFFALSE 24347
// begin tmp := 0 ;
24248: LD_ADDR_VAR 0 3
24252: PUSH
24253: LD_STRING 0
24255: ST_TO_ADDR
// if result [ 1 ] then
24256: LD_VAR 0 2
24260: PUSH
24261: LD_INT 1
24263: ARRAY
24264: IFFALSE 24329
// if result [ 1 ] [ 1 ] = i then
24266: LD_VAR 0 2
24270: PUSH
24271: LD_INT 1
24273: ARRAY
24274: PUSH
24275: LD_INT 1
24277: ARRAY
24278: PUSH
24279: LD_VAR 0 8
24283: EQUAL
24284: IFFALSE 24329
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24286: LD_ADDR_VAR 0 2
24290: PUSH
24291: LD_VAR 0 2
24295: PPUSH
24296: LD_INT 1
24298: PPUSH
24299: LD_VAR 0 2
24303: PUSH
24304: LD_INT 1
24306: ARRAY
24307: PPUSH
24308: LD_INT 1
24310: PPUSH
24311: CALL_OW 3
24315: PPUSH
24316: CALL_OW 1
24320: ST_TO_ADDR
// tmp := 1 ;
24321: LD_ADDR_VAR 0 3
24325: PUSH
24326: LD_STRING 1
24328: ST_TO_ADDR
// end ; normal := normal & tmp ;
24329: LD_ADDR_VAR 0 5
24333: PUSH
24334: LD_VAR 0 5
24338: PUSH
24339: LD_VAR 0 3
24343: STR
24344: ST_TO_ADDR
// end ;
24345: GO 24245
24347: POP
24348: POP
// for i = 1 to hardcoreCounter do
24349: LD_ADDR_VAR 0 8
24353: PUSH
24354: DOUBLE
24355: LD_INT 1
24357: DEC
24358: ST_TO_ADDR
24359: LD_EXP 64
24363: PUSH
24364: FOR_TO
24365: IFFALSE 24470
// begin tmp := 0 ;
24367: LD_ADDR_VAR 0 3
24371: PUSH
24372: LD_STRING 0
24374: ST_TO_ADDR
// if result [ 2 ] then
24375: LD_VAR 0 2
24379: PUSH
24380: LD_INT 2
24382: ARRAY
24383: IFFALSE 24452
// if result [ 2 ] [ 1 ] = 100 + i then
24385: LD_VAR 0 2
24389: PUSH
24390: LD_INT 2
24392: ARRAY
24393: PUSH
24394: LD_INT 1
24396: ARRAY
24397: PUSH
24398: LD_INT 100
24400: PUSH
24401: LD_VAR 0 8
24405: PLUS
24406: EQUAL
24407: IFFALSE 24452
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24409: LD_ADDR_VAR 0 2
24413: PUSH
24414: LD_VAR 0 2
24418: PPUSH
24419: LD_INT 2
24421: PPUSH
24422: LD_VAR 0 2
24426: PUSH
24427: LD_INT 2
24429: ARRAY
24430: PPUSH
24431: LD_INT 1
24433: PPUSH
24434: CALL_OW 3
24438: PPUSH
24439: CALL_OW 1
24443: ST_TO_ADDR
// tmp := 1 ;
24444: LD_ADDR_VAR 0 3
24448: PUSH
24449: LD_STRING 1
24451: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24452: LD_ADDR_VAR 0 6
24456: PUSH
24457: LD_VAR 0 6
24461: PUSH
24462: LD_VAR 0 3
24466: STR
24467: ST_TO_ADDR
// end ;
24468: GO 24364
24470: POP
24471: POP
// if isGameLoad then
24472: LD_VAR 0 1
24476: IFFALSE 24951
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24478: LD_ADDR_VAR 0 4
24482: PUSH
24483: LD_EXP 67
24487: PUSH
24488: LD_EXP 66
24492: PUSH
24493: LD_EXP 68
24497: PUSH
24498: LD_EXP 65
24502: PUSH
24503: LD_EXP 69
24507: PUSH
24508: LD_EXP 70
24512: PUSH
24513: LD_EXP 71
24517: PUSH
24518: LD_EXP 72
24522: PUSH
24523: LD_EXP 73
24527: PUSH
24528: LD_EXP 74
24532: PUSH
24533: LD_EXP 75
24537: PUSH
24538: LD_EXP 76
24542: PUSH
24543: LD_EXP 77
24547: PUSH
24548: LD_EXP 78
24552: PUSH
24553: LD_EXP 86
24557: PUSH
24558: LD_EXP 87
24562: PUSH
24563: LD_EXP 88
24567: PUSH
24568: LD_EXP 89
24572: PUSH
24573: LD_EXP 91
24577: PUSH
24578: LD_EXP 92
24582: PUSH
24583: LD_EXP 93
24587: PUSH
24588: LD_EXP 96
24592: PUSH
24593: LD_EXP 98
24597: PUSH
24598: LD_EXP 99
24602: PUSH
24603: LD_EXP 100
24607: PUSH
24608: LD_EXP 102
24612: PUSH
24613: LD_EXP 103
24617: PUSH
24618: LD_EXP 106
24622: PUSH
24623: LD_EXP 107
24627: PUSH
24628: LD_EXP 108
24632: PUSH
24633: LD_EXP 109
24637: PUSH
24638: LD_EXP 110
24642: PUSH
24643: LD_EXP 111
24647: PUSH
24648: LD_EXP 112
24652: PUSH
24653: LD_EXP 113
24657: PUSH
24658: LD_EXP 114
24662: PUSH
24663: LD_EXP 79
24667: PUSH
24668: LD_EXP 80
24672: PUSH
24673: LD_EXP 83
24677: PUSH
24678: LD_EXP 84
24682: PUSH
24683: LD_EXP 85
24687: PUSH
24688: LD_EXP 81
24692: PUSH
24693: LD_EXP 82
24697: PUSH
24698: LD_EXP 90
24702: PUSH
24703: LD_EXP 94
24707: PUSH
24708: LD_EXP 95
24712: PUSH
24713: LD_EXP 97
24717: PUSH
24718: LD_EXP 101
24722: PUSH
24723: LD_EXP 104
24727: PUSH
24728: LD_EXP 105
24732: PUSH
24733: LD_EXP 115
24737: PUSH
24738: LD_EXP 116
24742: PUSH
24743: LD_EXP 117
24747: PUSH
24748: LD_EXP 118
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: ST_TO_ADDR
// tmp :=  ;
24809: LD_ADDR_VAR 0 3
24813: PUSH
24814: LD_STRING 
24816: ST_TO_ADDR
// for i = 1 to normalCounter do
24817: LD_ADDR_VAR 0 8
24821: PUSH
24822: DOUBLE
24823: LD_INT 1
24825: DEC
24826: ST_TO_ADDR
24827: LD_EXP 63
24831: PUSH
24832: FOR_TO
24833: IFFALSE 24869
// begin if flags [ i ] then
24835: LD_VAR 0 4
24839: PUSH
24840: LD_VAR 0 8
24844: ARRAY
24845: IFFALSE 24867
// tmp := tmp & i & ; ;
24847: LD_ADDR_VAR 0 3
24851: PUSH
24852: LD_VAR 0 3
24856: PUSH
24857: LD_VAR 0 8
24861: STR
24862: PUSH
24863: LD_STRING ;
24865: STR
24866: ST_TO_ADDR
// end ;
24867: GO 24832
24869: POP
24870: POP
// for i = 1 to hardcoreCounter do
24871: LD_ADDR_VAR 0 8
24875: PUSH
24876: DOUBLE
24877: LD_INT 1
24879: DEC
24880: ST_TO_ADDR
24881: LD_EXP 64
24885: PUSH
24886: FOR_TO
24887: IFFALSE 24933
// begin if flags [ normalCounter + i ] then
24889: LD_VAR 0 4
24893: PUSH
24894: LD_EXP 63
24898: PUSH
24899: LD_VAR 0 8
24903: PLUS
24904: ARRAY
24905: IFFALSE 24931
// tmp := tmp & ( 100 + i ) & ; ;
24907: LD_ADDR_VAR 0 3
24911: PUSH
24912: LD_VAR 0 3
24916: PUSH
24917: LD_INT 100
24919: PUSH
24920: LD_VAR 0 8
24924: PLUS
24925: STR
24926: PUSH
24927: LD_STRING ;
24929: STR
24930: ST_TO_ADDR
// end ;
24931: GO 24886
24933: POP
24934: POP
// if tmp then
24935: LD_VAR 0 3
24939: IFFALSE 24951
// active := tmp ;
24941: LD_ADDR_VAR 0 7
24945: PUSH
24946: LD_VAR 0 3
24950: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24951: LD_STRING getStreamItemsFromMission("
24953: PUSH
24954: LD_VAR 0 5
24958: STR
24959: PUSH
24960: LD_STRING ","
24962: STR
24963: PUSH
24964: LD_VAR 0 6
24968: STR
24969: PUSH
24970: LD_STRING ","
24972: STR
24973: PUSH
24974: LD_VAR 0 7
24978: STR
24979: PUSH
24980: LD_STRING ")
24982: STR
24983: PPUSH
24984: CALL_OW 559
// end else
24988: GO 24997
// ToLua ( getStreamItemsFromMission("","","") ) ;
24990: LD_STRING getStreamItemsFromMission("","","")
24992: PPUSH
24993: CALL_OW 559
// end ;
24997: LD_VAR 0 2
25001: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25002: LD_EXP 62
25006: PUSH
25007: LD_EXP 67
25011: AND
25012: IFFALSE 25136
25014: GO 25016
25016: DISABLE
25017: LD_INT 0
25019: PPUSH
25020: PPUSH
// begin enable ;
25021: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25022: LD_ADDR_VAR 0 2
25026: PUSH
25027: LD_INT 22
25029: PUSH
25030: LD_OWVAR 2
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 2
25041: PUSH
25042: LD_INT 34
25044: PUSH
25045: LD_INT 7
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 34
25054: PUSH
25055: LD_INT 45
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 34
25064: PUSH
25065: LD_INT 28
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 34
25074: PUSH
25075: LD_INT 47
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PPUSH
25093: CALL_OW 69
25097: ST_TO_ADDR
// if not tmp then
25098: LD_VAR 0 2
25102: NOT
25103: IFFALSE 25107
// exit ;
25105: GO 25136
// for i in tmp do
25107: LD_ADDR_VAR 0 1
25111: PUSH
25112: LD_VAR 0 2
25116: PUSH
25117: FOR_IN
25118: IFFALSE 25134
// begin SetLives ( i , 0 ) ;
25120: LD_VAR 0 1
25124: PPUSH
25125: LD_INT 0
25127: PPUSH
25128: CALL_OW 234
// end ;
25132: GO 25117
25134: POP
25135: POP
// end ;
25136: PPOPN 2
25138: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25139: LD_EXP 62
25143: PUSH
25144: LD_EXP 68
25148: AND
25149: IFFALSE 25233
25151: GO 25153
25153: DISABLE
25154: LD_INT 0
25156: PPUSH
25157: PPUSH
// begin enable ;
25158: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25159: LD_ADDR_VAR 0 2
25163: PUSH
25164: LD_INT 22
25166: PUSH
25167: LD_OWVAR 2
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 32
25178: PUSH
25179: LD_INT 3
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PPUSH
25190: CALL_OW 69
25194: ST_TO_ADDR
// if not tmp then
25195: LD_VAR 0 2
25199: NOT
25200: IFFALSE 25204
// exit ;
25202: GO 25233
// for i in tmp do
25204: LD_ADDR_VAR 0 1
25208: PUSH
25209: LD_VAR 0 2
25213: PUSH
25214: FOR_IN
25215: IFFALSE 25231
// begin SetLives ( i , 0 ) ;
25217: LD_VAR 0 1
25221: PPUSH
25222: LD_INT 0
25224: PPUSH
25225: CALL_OW 234
// end ;
25229: GO 25214
25231: POP
25232: POP
// end ;
25233: PPOPN 2
25235: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25236: LD_EXP 62
25240: PUSH
25241: LD_EXP 65
25245: AND
25246: IFFALSE 25339
25248: GO 25250
25250: DISABLE
25251: LD_INT 0
25253: PPUSH
// begin enable ;
25254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25255: LD_ADDR_VAR 0 1
25259: PUSH
25260: LD_INT 22
25262: PUSH
25263: LD_OWVAR 2
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 2
25274: PUSH
25275: LD_INT 25
25277: PUSH
25278: LD_INT 5
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 25
25287: PUSH
25288: LD_INT 9
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 25
25297: PUSH
25298: LD_INT 8
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PPUSH
25315: CALL_OW 69
25319: PUSH
25320: FOR_IN
25321: IFFALSE 25337
// begin SetClass ( i , 1 ) ;
25323: LD_VAR 0 1
25327: PPUSH
25328: LD_INT 1
25330: PPUSH
25331: CALL_OW 336
// end ;
25335: GO 25320
25337: POP
25338: POP
// end ;
25339: PPOPN 1
25341: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25342: LD_EXP 62
25346: PUSH
25347: LD_EXP 66
25351: AND
25352: PUSH
25353: LD_OWVAR 65
25357: PUSH
25358: LD_INT 7
25360: LESS
25361: AND
25362: IFFALSE 25376
25364: GO 25366
25366: DISABLE
// begin enable ;
25367: ENABLE
// game_speed := 7 ;
25368: LD_ADDR_OWVAR 65
25372: PUSH
25373: LD_INT 7
25375: ST_TO_ADDR
// end ;
25376: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25377: LD_EXP 62
25381: PUSH
25382: LD_EXP 69
25386: AND
25387: IFFALSE 25589
25389: GO 25391
25391: DISABLE
25392: LD_INT 0
25394: PPUSH
25395: PPUSH
25396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25397: LD_ADDR_VAR 0 3
25401: PUSH
25402: LD_INT 81
25404: PUSH
25405: LD_OWVAR 2
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 21
25416: PUSH
25417: LD_INT 1
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PPUSH
25428: CALL_OW 69
25432: ST_TO_ADDR
// if not tmp then
25433: LD_VAR 0 3
25437: NOT
25438: IFFALSE 25442
// exit ;
25440: GO 25589
// if tmp > 5 then
25442: LD_VAR 0 3
25446: PUSH
25447: LD_INT 5
25449: GREATER
25450: IFFALSE 25462
// k := 5 else
25452: LD_ADDR_VAR 0 2
25456: PUSH
25457: LD_INT 5
25459: ST_TO_ADDR
25460: GO 25472
// k := tmp ;
25462: LD_ADDR_VAR 0 2
25466: PUSH
25467: LD_VAR 0 3
25471: ST_TO_ADDR
// for i := 1 to k do
25472: LD_ADDR_VAR 0 1
25476: PUSH
25477: DOUBLE
25478: LD_INT 1
25480: DEC
25481: ST_TO_ADDR
25482: LD_VAR 0 2
25486: PUSH
25487: FOR_TO
25488: IFFALSE 25587
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25490: LD_VAR 0 3
25494: PUSH
25495: LD_VAR 0 1
25499: ARRAY
25500: PPUSH
25501: LD_VAR 0 1
25505: PUSH
25506: LD_INT 4
25508: MOD
25509: PUSH
25510: LD_INT 1
25512: PLUS
25513: PPUSH
25514: CALL_OW 259
25518: PUSH
25519: LD_INT 10
25521: LESS
25522: IFFALSE 25585
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25524: LD_VAR 0 3
25528: PUSH
25529: LD_VAR 0 1
25533: ARRAY
25534: PPUSH
25535: LD_VAR 0 1
25539: PUSH
25540: LD_INT 4
25542: MOD
25543: PUSH
25544: LD_INT 1
25546: PLUS
25547: PPUSH
25548: LD_VAR 0 3
25552: PUSH
25553: LD_VAR 0 1
25557: ARRAY
25558: PPUSH
25559: LD_VAR 0 1
25563: PUSH
25564: LD_INT 4
25566: MOD
25567: PUSH
25568: LD_INT 1
25570: PLUS
25571: PPUSH
25572: CALL_OW 259
25576: PUSH
25577: LD_INT 1
25579: PLUS
25580: PPUSH
25581: CALL_OW 237
25585: GO 25487
25587: POP
25588: POP
// end ;
25589: PPOPN 3
25591: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25592: LD_EXP 62
25596: PUSH
25597: LD_EXP 70
25601: AND
25602: IFFALSE 25622
25604: GO 25606
25606: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25607: LD_INT 4
25609: PPUSH
25610: LD_OWVAR 2
25614: PPUSH
25615: LD_INT 0
25617: PPUSH
25618: CALL_OW 324
25622: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25623: LD_EXP 62
25627: PUSH
25628: LD_EXP 99
25632: AND
25633: IFFALSE 25653
25635: GO 25637
25637: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25638: LD_INT 19
25640: PPUSH
25641: LD_OWVAR 2
25645: PPUSH
25646: LD_INT 0
25648: PPUSH
25649: CALL_OW 324
25653: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25654: LD_EXP 62
25658: PUSH
25659: LD_EXP 71
25663: AND
25664: IFFALSE 25766
25666: GO 25668
25668: DISABLE
25669: LD_INT 0
25671: PPUSH
25672: PPUSH
// begin enable ;
25673: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25674: LD_ADDR_VAR 0 2
25678: PUSH
25679: LD_INT 22
25681: PUSH
25682: LD_OWVAR 2
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 2
25693: PUSH
25694: LD_INT 34
25696: PUSH
25697: LD_INT 11
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 34
25706: PUSH
25707: LD_INT 30
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: LIST
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PPUSH
25723: CALL_OW 69
25727: ST_TO_ADDR
// if not tmp then
25728: LD_VAR 0 2
25732: NOT
25733: IFFALSE 25737
// exit ;
25735: GO 25766
// for i in tmp do
25737: LD_ADDR_VAR 0 1
25741: PUSH
25742: LD_VAR 0 2
25746: PUSH
25747: FOR_IN
25748: IFFALSE 25764
// begin SetLives ( i , 0 ) ;
25750: LD_VAR 0 1
25754: PPUSH
25755: LD_INT 0
25757: PPUSH
25758: CALL_OW 234
// end ;
25762: GO 25747
25764: POP
25765: POP
// end ;
25766: PPOPN 2
25768: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25769: LD_EXP 62
25773: PUSH
25774: LD_EXP 72
25778: AND
25779: IFFALSE 25799
25781: GO 25783
25783: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25784: LD_INT 32
25786: PPUSH
25787: LD_OWVAR 2
25791: PPUSH
25792: LD_INT 0
25794: PPUSH
25795: CALL_OW 324
25799: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25800: LD_EXP 62
25804: PUSH
25805: LD_EXP 73
25809: AND
25810: IFFALSE 25991
25812: GO 25814
25814: DISABLE
25815: LD_INT 0
25817: PPUSH
25818: PPUSH
25819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25820: LD_ADDR_VAR 0 2
25824: PUSH
25825: LD_INT 22
25827: PUSH
25828: LD_OWVAR 2
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 33
25839: PUSH
25840: LD_INT 3
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PPUSH
25851: CALL_OW 69
25855: ST_TO_ADDR
// if not tmp then
25856: LD_VAR 0 2
25860: NOT
25861: IFFALSE 25865
// exit ;
25863: GO 25991
// side := 0 ;
25865: LD_ADDR_VAR 0 3
25869: PUSH
25870: LD_INT 0
25872: ST_TO_ADDR
// for i := 1 to 8 do
25873: LD_ADDR_VAR 0 1
25877: PUSH
25878: DOUBLE
25879: LD_INT 1
25881: DEC
25882: ST_TO_ADDR
25883: LD_INT 8
25885: PUSH
25886: FOR_TO
25887: IFFALSE 25935
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25889: LD_OWVAR 2
25893: PUSH
25894: LD_VAR 0 1
25898: NONEQUAL
25899: PUSH
25900: LD_OWVAR 2
25904: PPUSH
25905: LD_VAR 0 1
25909: PPUSH
25910: CALL_OW 81
25914: PUSH
25915: LD_INT 2
25917: EQUAL
25918: AND
25919: IFFALSE 25933
// begin side := i ;
25921: LD_ADDR_VAR 0 3
25925: PUSH
25926: LD_VAR 0 1
25930: ST_TO_ADDR
// break ;
25931: GO 25935
// end ;
25933: GO 25886
25935: POP
25936: POP
// if not side then
25937: LD_VAR 0 3
25941: NOT
25942: IFFALSE 25946
// exit ;
25944: GO 25991
// for i := 1 to tmp do
25946: LD_ADDR_VAR 0 1
25950: PUSH
25951: DOUBLE
25952: LD_INT 1
25954: DEC
25955: ST_TO_ADDR
25956: LD_VAR 0 2
25960: PUSH
25961: FOR_TO
25962: IFFALSE 25989
// if Prob ( 60 ) then
25964: LD_INT 60
25966: PPUSH
25967: CALL_OW 13
25971: IFFALSE 25987
// SetSide ( i , side ) ;
25973: LD_VAR 0 1
25977: PPUSH
25978: LD_VAR 0 3
25982: PPUSH
25983: CALL_OW 235
25987: GO 25961
25989: POP
25990: POP
// end ;
25991: PPOPN 3
25993: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25994: LD_EXP 62
25998: PUSH
25999: LD_EXP 75
26003: AND
26004: IFFALSE 26123
26006: GO 26008
26008: DISABLE
26009: LD_INT 0
26011: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26012: LD_ADDR_VAR 0 1
26016: PUSH
26017: LD_INT 22
26019: PUSH
26020: LD_OWVAR 2
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 21
26031: PUSH
26032: LD_INT 1
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 3
26041: PUSH
26042: LD_INT 23
26044: PUSH
26045: LD_INT 0
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: LIST
26060: PPUSH
26061: CALL_OW 69
26065: PUSH
26066: FOR_IN
26067: IFFALSE 26121
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26069: LD_VAR 0 1
26073: PPUSH
26074: CALL_OW 257
26078: PUSH
26079: LD_INT 1
26081: PUSH
26082: LD_INT 2
26084: PUSH
26085: LD_INT 3
26087: PUSH
26088: LD_INT 4
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: IN
26097: IFFALSE 26119
// SetClass ( un , rand ( 1 , 4 ) ) ;
26099: LD_VAR 0 1
26103: PPUSH
26104: LD_INT 1
26106: PPUSH
26107: LD_INT 4
26109: PPUSH
26110: CALL_OW 12
26114: PPUSH
26115: CALL_OW 336
26119: GO 26066
26121: POP
26122: POP
// end ;
26123: PPOPN 1
26125: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26126: LD_EXP 62
26130: PUSH
26131: LD_EXP 74
26135: AND
26136: IFFALSE 26215
26138: GO 26140
26140: DISABLE
26141: LD_INT 0
26143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26144: LD_ADDR_VAR 0 1
26148: PUSH
26149: LD_INT 22
26151: PUSH
26152: LD_OWVAR 2
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 21
26163: PUSH
26164: LD_INT 3
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PPUSH
26175: CALL_OW 69
26179: ST_TO_ADDR
// if not tmp then
26180: LD_VAR 0 1
26184: NOT
26185: IFFALSE 26189
// exit ;
26187: GO 26215
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26189: LD_VAR 0 1
26193: PUSH
26194: LD_INT 1
26196: PPUSH
26197: LD_VAR 0 1
26201: PPUSH
26202: CALL_OW 12
26206: ARRAY
26207: PPUSH
26208: LD_INT 100
26210: PPUSH
26211: CALL_OW 234
// end ;
26215: PPOPN 1
26217: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26218: LD_EXP 62
26222: PUSH
26223: LD_EXP 76
26227: AND
26228: IFFALSE 26326
26230: GO 26232
26232: DISABLE
26233: LD_INT 0
26235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26236: LD_ADDR_VAR 0 1
26240: PUSH
26241: LD_INT 22
26243: PUSH
26244: LD_OWVAR 2
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 21
26255: PUSH
26256: LD_INT 1
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PPUSH
26267: CALL_OW 69
26271: ST_TO_ADDR
// if not tmp then
26272: LD_VAR 0 1
26276: NOT
26277: IFFALSE 26281
// exit ;
26279: GO 26326
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26281: LD_VAR 0 1
26285: PUSH
26286: LD_INT 1
26288: PPUSH
26289: LD_VAR 0 1
26293: PPUSH
26294: CALL_OW 12
26298: ARRAY
26299: PPUSH
26300: LD_INT 1
26302: PPUSH
26303: LD_INT 4
26305: PPUSH
26306: CALL_OW 12
26310: PPUSH
26311: LD_INT 3000
26313: PPUSH
26314: LD_INT 9000
26316: PPUSH
26317: CALL_OW 12
26321: PPUSH
26322: CALL_OW 492
// end ;
26326: PPOPN 1
26328: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26329: LD_EXP 62
26333: PUSH
26334: LD_EXP 77
26338: AND
26339: IFFALSE 26359
26341: GO 26343
26343: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26344: LD_INT 1
26346: PPUSH
26347: LD_OWVAR 2
26351: PPUSH
26352: LD_INT 0
26354: PPUSH
26355: CALL_OW 324
26359: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26360: LD_EXP 62
26364: PUSH
26365: LD_EXP 78
26369: AND
26370: IFFALSE 26453
26372: GO 26374
26374: DISABLE
26375: LD_INT 0
26377: PPUSH
26378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26379: LD_ADDR_VAR 0 2
26383: PUSH
26384: LD_INT 22
26386: PUSH
26387: LD_OWVAR 2
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 21
26398: PUSH
26399: LD_INT 3
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PPUSH
26410: CALL_OW 69
26414: ST_TO_ADDR
// if not tmp then
26415: LD_VAR 0 2
26419: NOT
26420: IFFALSE 26424
// exit ;
26422: GO 26453
// for i in tmp do
26424: LD_ADDR_VAR 0 1
26428: PUSH
26429: LD_VAR 0 2
26433: PUSH
26434: FOR_IN
26435: IFFALSE 26451
// SetBLevel ( i , 10 ) ;
26437: LD_VAR 0 1
26441: PPUSH
26442: LD_INT 10
26444: PPUSH
26445: CALL_OW 241
26449: GO 26434
26451: POP
26452: POP
// end ;
26453: PPOPN 2
26455: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26456: LD_EXP 62
26460: PUSH
26461: LD_EXP 79
26465: AND
26466: IFFALSE 26577
26468: GO 26470
26470: DISABLE
26471: LD_INT 0
26473: PPUSH
26474: PPUSH
26475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26476: LD_ADDR_VAR 0 3
26480: PUSH
26481: LD_INT 22
26483: PUSH
26484: LD_OWVAR 2
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 25
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PPUSH
26507: CALL_OW 69
26511: ST_TO_ADDR
// if not tmp then
26512: LD_VAR 0 3
26516: NOT
26517: IFFALSE 26521
// exit ;
26519: GO 26577
// un := tmp [ rand ( 1 , tmp ) ] ;
26521: LD_ADDR_VAR 0 2
26525: PUSH
26526: LD_VAR 0 3
26530: PUSH
26531: LD_INT 1
26533: PPUSH
26534: LD_VAR 0 3
26538: PPUSH
26539: CALL_OW 12
26543: ARRAY
26544: ST_TO_ADDR
// if Crawls ( un ) then
26545: LD_VAR 0 2
26549: PPUSH
26550: CALL_OW 318
26554: IFFALSE 26565
// ComWalk ( un ) ;
26556: LD_VAR 0 2
26560: PPUSH
26561: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26565: LD_VAR 0 2
26569: PPUSH
26570: LD_INT 5
26572: PPUSH
26573: CALL_OW 336
// end ;
26577: PPOPN 3
26579: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26580: LD_EXP 62
26584: PUSH
26585: LD_EXP 80
26589: AND
26590: PUSH
26591: LD_OWVAR 67
26595: PUSH
26596: LD_INT 4
26598: LESS
26599: AND
26600: IFFALSE 26619
26602: GO 26604
26604: DISABLE
// begin Difficulty := Difficulty + 1 ;
26605: LD_ADDR_OWVAR 67
26609: PUSH
26610: LD_OWVAR 67
26614: PUSH
26615: LD_INT 1
26617: PLUS
26618: ST_TO_ADDR
// end ;
26619: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26620: LD_EXP 62
26624: PUSH
26625: LD_EXP 81
26629: AND
26630: IFFALSE 26733
26632: GO 26634
26634: DISABLE
26635: LD_INT 0
26637: PPUSH
// begin for i := 1 to 5 do
26638: LD_ADDR_VAR 0 1
26642: PUSH
26643: DOUBLE
26644: LD_INT 1
26646: DEC
26647: ST_TO_ADDR
26648: LD_INT 5
26650: PUSH
26651: FOR_TO
26652: IFFALSE 26731
// begin uc_nation := nation_nature ;
26654: LD_ADDR_OWVAR 21
26658: PUSH
26659: LD_INT 0
26661: ST_TO_ADDR
// uc_side := 0 ;
26662: LD_ADDR_OWVAR 20
26666: PUSH
26667: LD_INT 0
26669: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26670: LD_ADDR_OWVAR 29
26674: PUSH
26675: LD_INT 12
26677: PUSH
26678: LD_INT 12
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: ST_TO_ADDR
// hc_agressivity := 20 ;
26685: LD_ADDR_OWVAR 35
26689: PUSH
26690: LD_INT 20
26692: ST_TO_ADDR
// hc_class := class_tiger ;
26693: LD_ADDR_OWVAR 28
26697: PUSH
26698: LD_INT 14
26700: ST_TO_ADDR
// hc_gallery :=  ;
26701: LD_ADDR_OWVAR 33
26705: PUSH
26706: LD_STRING 
26708: ST_TO_ADDR
// hc_name :=  ;
26709: LD_ADDR_OWVAR 26
26713: PUSH
26714: LD_STRING 
26716: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26717: CALL_OW 44
26721: PPUSH
26722: LD_INT 0
26724: PPUSH
26725: CALL_OW 51
// end ;
26729: GO 26651
26731: POP
26732: POP
// end ;
26733: PPOPN 1
26735: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26736: LD_EXP 62
26740: PUSH
26741: LD_EXP 82
26745: AND
26746: IFFALSE 26755
26748: GO 26750
26750: DISABLE
// StreamSibBomb ;
26751: CALL 26756 0 0
26755: END
// export function StreamSibBomb ; var i , x , y ; begin
26756: LD_INT 0
26758: PPUSH
26759: PPUSH
26760: PPUSH
26761: PPUSH
// result := false ;
26762: LD_ADDR_VAR 0 1
26766: PUSH
26767: LD_INT 0
26769: ST_TO_ADDR
// for i := 1 to 16 do
26770: LD_ADDR_VAR 0 2
26774: PUSH
26775: DOUBLE
26776: LD_INT 1
26778: DEC
26779: ST_TO_ADDR
26780: LD_INT 16
26782: PUSH
26783: FOR_TO
26784: IFFALSE 26983
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26786: LD_ADDR_VAR 0 3
26790: PUSH
26791: LD_INT 10
26793: PUSH
26794: LD_INT 20
26796: PUSH
26797: LD_INT 30
26799: PUSH
26800: LD_INT 40
26802: PUSH
26803: LD_INT 50
26805: PUSH
26806: LD_INT 60
26808: PUSH
26809: LD_INT 70
26811: PUSH
26812: LD_INT 80
26814: PUSH
26815: LD_INT 90
26817: PUSH
26818: LD_INT 100
26820: PUSH
26821: LD_INT 110
26823: PUSH
26824: LD_INT 120
26826: PUSH
26827: LD_INT 130
26829: PUSH
26830: LD_INT 140
26832: PUSH
26833: LD_INT 150
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 1
26855: PPUSH
26856: LD_INT 15
26858: PPUSH
26859: CALL_OW 12
26863: ARRAY
26864: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26865: LD_ADDR_VAR 0 4
26869: PUSH
26870: LD_INT 10
26872: PUSH
26873: LD_INT 20
26875: PUSH
26876: LD_INT 30
26878: PUSH
26879: LD_INT 40
26881: PUSH
26882: LD_INT 50
26884: PUSH
26885: LD_INT 60
26887: PUSH
26888: LD_INT 70
26890: PUSH
26891: LD_INT 80
26893: PUSH
26894: LD_INT 90
26896: PUSH
26897: LD_INT 100
26899: PUSH
26900: LD_INT 110
26902: PUSH
26903: LD_INT 120
26905: PUSH
26906: LD_INT 130
26908: PUSH
26909: LD_INT 140
26911: PUSH
26912: LD_INT 150
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 1
26934: PPUSH
26935: LD_INT 15
26937: PPUSH
26938: CALL_OW 12
26942: ARRAY
26943: ST_TO_ADDR
// if ValidHex ( x , y ) then
26944: LD_VAR 0 3
26948: PPUSH
26949: LD_VAR 0 4
26953: PPUSH
26954: CALL_OW 488
26958: IFFALSE 26981
// begin result := [ x , y ] ;
26960: LD_ADDR_VAR 0 1
26964: PUSH
26965: LD_VAR 0 3
26969: PUSH
26970: LD_VAR 0 4
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: ST_TO_ADDR
// break ;
26979: GO 26983
// end ; end ;
26981: GO 26783
26983: POP
26984: POP
// if result then
26985: LD_VAR 0 1
26989: IFFALSE 27049
// begin ToLua ( playSibBomb() ) ;
26991: LD_STRING playSibBomb()
26993: PPUSH
26994: CALL_OW 559
// wait ( 0 0$14 ) ;
26998: LD_INT 490
27000: PPUSH
27001: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27005: LD_VAR 0 1
27009: PUSH
27010: LD_INT 1
27012: ARRAY
27013: PPUSH
27014: LD_VAR 0 1
27018: PUSH
27019: LD_INT 2
27021: ARRAY
27022: PPUSH
27023: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27027: LD_VAR 0 1
27031: PUSH
27032: LD_INT 1
27034: ARRAY
27035: PPUSH
27036: LD_VAR 0 1
27040: PUSH
27041: LD_INT 2
27043: ARRAY
27044: PPUSH
27045: CALL_OW 429
// end ; end ;
27049: LD_VAR 0 1
27053: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27054: LD_EXP 62
27058: PUSH
27059: LD_EXP 84
27063: AND
27064: IFFALSE 27076
27066: GO 27068
27068: DISABLE
// YouLost (  ) ;
27069: LD_STRING 
27071: PPUSH
27072: CALL_OW 104
27076: END
// every 0 0$1 trigger StreamModeActive and sFog do
27077: LD_EXP 62
27081: PUSH
27082: LD_EXP 83
27086: AND
27087: IFFALSE 27101
27089: GO 27091
27091: DISABLE
// FogOff ( your_side ) ;
27092: LD_OWVAR 2
27096: PPUSH
27097: CALL_OW 344
27101: END
// every 0 0$1 trigger StreamModeActive and sSun do
27102: LD_EXP 62
27106: PUSH
27107: LD_EXP 85
27111: AND
27112: IFFALSE 27140
27114: GO 27116
27116: DISABLE
// begin solar_recharge_percent := 0 ;
27117: LD_ADDR_OWVAR 79
27121: PUSH
27122: LD_INT 0
27124: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27125: LD_INT 10500
27127: PPUSH
27128: CALL_OW 67
// solar_recharge_percent := 100 ;
27132: LD_ADDR_OWVAR 79
27136: PUSH
27137: LD_INT 100
27139: ST_TO_ADDR
// end ;
27140: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27141: LD_EXP 62
27145: PUSH
27146: LD_EXP 86
27150: AND
27151: IFFALSE 27390
27153: GO 27155
27155: DISABLE
27156: LD_INT 0
27158: PPUSH
27159: PPUSH
27160: PPUSH
// begin tmp := [ ] ;
27161: LD_ADDR_VAR 0 3
27165: PUSH
27166: EMPTY
27167: ST_TO_ADDR
// for i := 1 to 6 do
27168: LD_ADDR_VAR 0 1
27172: PUSH
27173: DOUBLE
27174: LD_INT 1
27176: DEC
27177: ST_TO_ADDR
27178: LD_INT 6
27180: PUSH
27181: FOR_TO
27182: IFFALSE 27287
// begin uc_nation := nation_nature ;
27184: LD_ADDR_OWVAR 21
27188: PUSH
27189: LD_INT 0
27191: ST_TO_ADDR
// uc_side := 0 ;
27192: LD_ADDR_OWVAR 20
27196: PUSH
27197: LD_INT 0
27199: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27200: LD_ADDR_OWVAR 29
27204: PUSH
27205: LD_INT 12
27207: PUSH
27208: LD_INT 12
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: ST_TO_ADDR
// hc_agressivity := 20 ;
27215: LD_ADDR_OWVAR 35
27219: PUSH
27220: LD_INT 20
27222: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27223: LD_ADDR_OWVAR 28
27227: PUSH
27228: LD_INT 17
27230: ST_TO_ADDR
// hc_gallery :=  ;
27231: LD_ADDR_OWVAR 33
27235: PUSH
27236: LD_STRING 
27238: ST_TO_ADDR
// hc_name :=  ;
27239: LD_ADDR_OWVAR 26
27243: PUSH
27244: LD_STRING 
27246: ST_TO_ADDR
// un := CreateHuman ;
27247: LD_ADDR_VAR 0 2
27251: PUSH
27252: CALL_OW 44
27256: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27257: LD_VAR 0 2
27261: PPUSH
27262: LD_INT 1
27264: PPUSH
27265: CALL_OW 51
// tmp := tmp ^ un ;
27269: LD_ADDR_VAR 0 3
27273: PUSH
27274: LD_VAR 0 3
27278: PUSH
27279: LD_VAR 0 2
27283: ADD
27284: ST_TO_ADDR
// end ;
27285: GO 27181
27287: POP
27288: POP
// repeat wait ( 0 0$1 ) ;
27289: LD_INT 35
27291: PPUSH
27292: CALL_OW 67
// for un in tmp do
27296: LD_ADDR_VAR 0 2
27300: PUSH
27301: LD_VAR 0 3
27305: PUSH
27306: FOR_IN
27307: IFFALSE 27381
// begin if IsDead ( un ) then
27309: LD_VAR 0 2
27313: PPUSH
27314: CALL_OW 301
27318: IFFALSE 27338
// begin tmp := tmp diff un ;
27320: LD_ADDR_VAR 0 3
27324: PUSH
27325: LD_VAR 0 3
27329: PUSH
27330: LD_VAR 0 2
27334: DIFF
27335: ST_TO_ADDR
// continue ;
27336: GO 27306
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27338: LD_VAR 0 2
27342: PPUSH
27343: LD_INT 3
27345: PUSH
27346: LD_INT 22
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PPUSH
27360: CALL_OW 69
27364: PPUSH
27365: LD_VAR 0 2
27369: PPUSH
27370: CALL_OW 74
27374: PPUSH
27375: CALL_OW 115
// end ;
27379: GO 27306
27381: POP
27382: POP
// until not tmp ;
27383: LD_VAR 0 3
27387: NOT
27388: IFFALSE 27289
// end ;
27390: PPOPN 3
27392: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27393: LD_EXP 62
27397: PUSH
27398: LD_EXP 87
27402: AND
27403: IFFALSE 27457
27405: GO 27407
27407: DISABLE
// begin ToLua ( displayTroll(); ) ;
27408: LD_STRING displayTroll();
27410: PPUSH
27411: CALL_OW 559
// wait ( 3 3$00 ) ;
27415: LD_INT 6300
27417: PPUSH
27418: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27422: LD_STRING hideTroll();
27424: PPUSH
27425: CALL_OW 559
// wait ( 1 1$00 ) ;
27429: LD_INT 2100
27431: PPUSH
27432: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27436: LD_STRING displayTroll();
27438: PPUSH
27439: CALL_OW 559
// wait ( 1 1$00 ) ;
27443: LD_INT 2100
27445: PPUSH
27446: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27450: LD_STRING hideTroll();
27452: PPUSH
27453: CALL_OW 559
// end ;
27457: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27458: LD_EXP 62
27462: PUSH
27463: LD_EXP 88
27467: AND
27468: IFFALSE 27531
27470: GO 27472
27472: DISABLE
27473: LD_INT 0
27475: PPUSH
// begin p := 0 ;
27476: LD_ADDR_VAR 0 1
27480: PUSH
27481: LD_INT 0
27483: ST_TO_ADDR
// repeat game_speed := 1 ;
27484: LD_ADDR_OWVAR 65
27488: PUSH
27489: LD_INT 1
27491: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27492: LD_INT 35
27494: PPUSH
27495: CALL_OW 67
// p := p + 1 ;
27499: LD_ADDR_VAR 0 1
27503: PUSH
27504: LD_VAR 0 1
27508: PUSH
27509: LD_INT 1
27511: PLUS
27512: ST_TO_ADDR
// until p >= 60 ;
27513: LD_VAR 0 1
27517: PUSH
27518: LD_INT 60
27520: GREATEREQUAL
27521: IFFALSE 27484
// game_speed := 4 ;
27523: LD_ADDR_OWVAR 65
27527: PUSH
27528: LD_INT 4
27530: ST_TO_ADDR
// end ;
27531: PPOPN 1
27533: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27534: LD_EXP 62
27538: PUSH
27539: LD_EXP 89
27543: AND
27544: IFFALSE 27690
27546: GO 27548
27548: DISABLE
27549: LD_INT 0
27551: PPUSH
27552: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27553: LD_ADDR_VAR 0 1
27557: PUSH
27558: LD_INT 22
27560: PUSH
27561: LD_OWVAR 2
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 2
27572: PUSH
27573: LD_INT 30
27575: PUSH
27576: LD_INT 0
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 30
27585: PUSH
27586: LD_INT 1
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: LIST
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PPUSH
27602: CALL_OW 69
27606: ST_TO_ADDR
// if not depot then
27607: LD_VAR 0 1
27611: NOT
27612: IFFALSE 27616
// exit ;
27614: GO 27690
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27616: LD_ADDR_VAR 0 2
27620: PUSH
27621: LD_VAR 0 1
27625: PUSH
27626: LD_INT 1
27628: PPUSH
27629: LD_VAR 0 1
27633: PPUSH
27634: CALL_OW 12
27638: ARRAY
27639: PPUSH
27640: CALL_OW 274
27644: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27645: LD_VAR 0 2
27649: PPUSH
27650: LD_INT 1
27652: PPUSH
27653: LD_INT 0
27655: PPUSH
27656: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27660: LD_VAR 0 2
27664: PPUSH
27665: LD_INT 2
27667: PPUSH
27668: LD_INT 0
27670: PPUSH
27671: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27675: LD_VAR 0 2
27679: PPUSH
27680: LD_INT 3
27682: PPUSH
27683: LD_INT 0
27685: PPUSH
27686: CALL_OW 277
// end ;
27690: PPOPN 2
27692: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27693: LD_EXP 62
27697: PUSH
27698: LD_EXP 90
27702: AND
27703: IFFALSE 27800
27705: GO 27707
27707: DISABLE
27708: LD_INT 0
27710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27711: LD_ADDR_VAR 0 1
27715: PUSH
27716: LD_INT 22
27718: PUSH
27719: LD_OWVAR 2
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 21
27730: PUSH
27731: LD_INT 1
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 3
27740: PUSH
27741: LD_INT 23
27743: PUSH
27744: LD_INT 0
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: LIST
27759: PPUSH
27760: CALL_OW 69
27764: ST_TO_ADDR
// if not tmp then
27765: LD_VAR 0 1
27769: NOT
27770: IFFALSE 27774
// exit ;
27772: GO 27800
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27774: LD_VAR 0 1
27778: PUSH
27779: LD_INT 1
27781: PPUSH
27782: LD_VAR 0 1
27786: PPUSH
27787: CALL_OW 12
27791: ARRAY
27792: PPUSH
27793: LD_INT 200
27795: PPUSH
27796: CALL_OW 234
// end ;
27800: PPOPN 1
27802: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27803: LD_EXP 62
27807: PUSH
27808: LD_EXP 91
27812: AND
27813: IFFALSE 27892
27815: GO 27817
27817: DISABLE
27818: LD_INT 0
27820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27821: LD_ADDR_VAR 0 1
27825: PUSH
27826: LD_INT 22
27828: PUSH
27829: LD_OWVAR 2
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 21
27840: PUSH
27841: LD_INT 2
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PPUSH
27852: CALL_OW 69
27856: ST_TO_ADDR
// if not tmp then
27857: LD_VAR 0 1
27861: NOT
27862: IFFALSE 27866
// exit ;
27864: GO 27892
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27866: LD_VAR 0 1
27870: PUSH
27871: LD_INT 1
27873: PPUSH
27874: LD_VAR 0 1
27878: PPUSH
27879: CALL_OW 12
27883: ARRAY
27884: PPUSH
27885: LD_INT 60
27887: PPUSH
27888: CALL_OW 234
// end ;
27892: PPOPN 1
27894: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27895: LD_EXP 62
27899: PUSH
27900: LD_EXP 92
27904: AND
27905: IFFALSE 28004
27907: GO 27909
27909: DISABLE
27910: LD_INT 0
27912: PPUSH
27913: PPUSH
// begin enable ;
27914: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27915: LD_ADDR_VAR 0 1
27919: PUSH
27920: LD_INT 22
27922: PUSH
27923: LD_OWVAR 2
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 61
27934: PUSH
27935: EMPTY
27936: LIST
27937: PUSH
27938: LD_INT 33
27940: PUSH
27941: LD_INT 2
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: LIST
27952: PPUSH
27953: CALL_OW 69
27957: ST_TO_ADDR
// if not tmp then
27958: LD_VAR 0 1
27962: NOT
27963: IFFALSE 27967
// exit ;
27965: GO 28004
// for i in tmp do
27967: LD_ADDR_VAR 0 2
27971: PUSH
27972: LD_VAR 0 1
27976: PUSH
27977: FOR_IN
27978: IFFALSE 28002
// if IsControledBy ( i ) then
27980: LD_VAR 0 2
27984: PPUSH
27985: CALL_OW 312
27989: IFFALSE 28000
// ComUnlink ( i ) ;
27991: LD_VAR 0 2
27995: PPUSH
27996: CALL_OW 136
28000: GO 27977
28002: POP
28003: POP
// end ;
28004: PPOPN 2
28006: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28007: LD_EXP 62
28011: PUSH
28012: LD_EXP 93
28016: AND
28017: IFFALSE 28157
28019: GO 28021
28021: DISABLE
28022: LD_INT 0
28024: PPUSH
28025: PPUSH
// begin ToLua ( displayPowell(); ) ;
28026: LD_STRING displayPowell();
28028: PPUSH
28029: CALL_OW 559
// uc_side := 0 ;
28033: LD_ADDR_OWVAR 20
28037: PUSH
28038: LD_INT 0
28040: ST_TO_ADDR
// uc_nation := 2 ;
28041: LD_ADDR_OWVAR 21
28045: PUSH
28046: LD_INT 2
28048: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28049: LD_ADDR_OWVAR 37
28053: PUSH
28054: LD_INT 14
28056: ST_TO_ADDR
// vc_engine := engine_siberite ;
28057: LD_ADDR_OWVAR 39
28061: PUSH
28062: LD_INT 3
28064: ST_TO_ADDR
// vc_control := control_apeman ;
28065: LD_ADDR_OWVAR 38
28069: PUSH
28070: LD_INT 5
28072: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28073: LD_ADDR_OWVAR 40
28077: PUSH
28078: LD_INT 29
28080: ST_TO_ADDR
// un := CreateVehicle ;
28081: LD_ADDR_VAR 0 2
28085: PUSH
28086: CALL_OW 45
28090: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28091: LD_VAR 0 2
28095: PPUSH
28096: LD_INT 1
28098: PPUSH
28099: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28103: LD_INT 35
28105: PPUSH
28106: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28110: LD_VAR 0 2
28114: PPUSH
28115: LD_INT 22
28117: PUSH
28118: LD_OWVAR 2
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PPUSH
28127: CALL_OW 69
28131: PPUSH
28132: LD_VAR 0 2
28136: PPUSH
28137: CALL_OW 74
28141: PPUSH
28142: CALL_OW 115
// until IsDead ( un ) ;
28146: LD_VAR 0 2
28150: PPUSH
28151: CALL_OW 301
28155: IFFALSE 28103
// end ;
28157: PPOPN 2
28159: END
// every 0 0$1 trigger StreamModeActive and sStu do
28160: LD_EXP 62
28164: PUSH
28165: LD_EXP 101
28169: AND
28170: IFFALSE 28186
28172: GO 28174
28174: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28175: LD_STRING displayStucuk();
28177: PPUSH
28178: CALL_OW 559
// ResetFog ;
28182: CALL_OW 335
// end ;
28186: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28187: LD_EXP 62
28191: PUSH
28192: LD_EXP 94
28196: AND
28197: IFFALSE 28338
28199: GO 28201
28201: DISABLE
28202: LD_INT 0
28204: PPUSH
28205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28206: LD_ADDR_VAR 0 2
28210: PUSH
28211: LD_INT 22
28213: PUSH
28214: LD_OWVAR 2
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 21
28225: PUSH
28226: LD_INT 1
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PPUSH
28237: CALL_OW 69
28241: ST_TO_ADDR
// if not tmp then
28242: LD_VAR 0 2
28246: NOT
28247: IFFALSE 28251
// exit ;
28249: GO 28338
// un := tmp [ rand ( 1 , tmp ) ] ;
28251: LD_ADDR_VAR 0 1
28255: PUSH
28256: LD_VAR 0 2
28260: PUSH
28261: LD_INT 1
28263: PPUSH
28264: LD_VAR 0 2
28268: PPUSH
28269: CALL_OW 12
28273: ARRAY
28274: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28275: LD_VAR 0 1
28279: PPUSH
28280: LD_INT 0
28282: PPUSH
28283: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28287: LD_VAR 0 1
28291: PPUSH
28292: LD_OWVAR 3
28296: PUSH
28297: LD_VAR 0 1
28301: DIFF
28302: PPUSH
28303: LD_VAR 0 1
28307: PPUSH
28308: CALL_OW 74
28312: PPUSH
28313: CALL_OW 115
// wait ( 0 0$20 ) ;
28317: LD_INT 700
28319: PPUSH
28320: CALL_OW 67
// SetSide ( un , your_side ) ;
28324: LD_VAR 0 1
28328: PPUSH
28329: LD_OWVAR 2
28333: PPUSH
28334: CALL_OW 235
// end ;
28338: PPOPN 2
28340: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28341: LD_EXP 62
28345: PUSH
28346: LD_EXP 95
28350: AND
28351: IFFALSE 28457
28353: GO 28355
28355: DISABLE
28356: LD_INT 0
28358: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28359: LD_ADDR_VAR 0 1
28363: PUSH
28364: LD_INT 22
28366: PUSH
28367: LD_OWVAR 2
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 2
28378: PUSH
28379: LD_INT 30
28381: PUSH
28382: LD_INT 0
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 30
28391: PUSH
28392: LD_INT 1
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: LIST
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PPUSH
28408: CALL_OW 69
28412: ST_TO_ADDR
// if not depot then
28413: LD_VAR 0 1
28417: NOT
28418: IFFALSE 28422
// exit ;
28420: GO 28457
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28422: LD_VAR 0 1
28426: PUSH
28427: LD_INT 1
28429: ARRAY
28430: PPUSH
28431: CALL_OW 250
28435: PPUSH
28436: LD_VAR 0 1
28440: PUSH
28441: LD_INT 1
28443: ARRAY
28444: PPUSH
28445: CALL_OW 251
28449: PPUSH
28450: LD_INT 70
28452: PPUSH
28453: CALL_OW 495
// end ;
28457: PPOPN 1
28459: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28460: LD_EXP 62
28464: PUSH
28465: LD_EXP 96
28469: AND
28470: IFFALSE 28681
28472: GO 28474
28474: DISABLE
28475: LD_INT 0
28477: PPUSH
28478: PPUSH
28479: PPUSH
28480: PPUSH
28481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28482: LD_ADDR_VAR 0 5
28486: PUSH
28487: LD_INT 22
28489: PUSH
28490: LD_OWVAR 2
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 21
28501: PUSH
28502: LD_INT 1
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PPUSH
28513: CALL_OW 69
28517: ST_TO_ADDR
// if not tmp then
28518: LD_VAR 0 5
28522: NOT
28523: IFFALSE 28527
// exit ;
28525: GO 28681
// for i in tmp do
28527: LD_ADDR_VAR 0 1
28531: PUSH
28532: LD_VAR 0 5
28536: PUSH
28537: FOR_IN
28538: IFFALSE 28679
// begin d := rand ( 0 , 5 ) ;
28540: LD_ADDR_VAR 0 4
28544: PUSH
28545: LD_INT 0
28547: PPUSH
28548: LD_INT 5
28550: PPUSH
28551: CALL_OW 12
28555: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28556: LD_ADDR_VAR 0 2
28560: PUSH
28561: LD_VAR 0 1
28565: PPUSH
28566: CALL_OW 250
28570: PPUSH
28571: LD_VAR 0 4
28575: PPUSH
28576: LD_INT 3
28578: PPUSH
28579: LD_INT 12
28581: PPUSH
28582: CALL_OW 12
28586: PPUSH
28587: CALL_OW 272
28591: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28592: LD_ADDR_VAR 0 3
28596: PUSH
28597: LD_VAR 0 1
28601: PPUSH
28602: CALL_OW 251
28606: PPUSH
28607: LD_VAR 0 4
28611: PPUSH
28612: LD_INT 3
28614: PPUSH
28615: LD_INT 12
28617: PPUSH
28618: CALL_OW 12
28622: PPUSH
28623: CALL_OW 273
28627: ST_TO_ADDR
// if ValidHex ( x , y ) then
28628: LD_VAR 0 2
28632: PPUSH
28633: LD_VAR 0 3
28637: PPUSH
28638: CALL_OW 488
28642: IFFALSE 28677
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28644: LD_VAR 0 1
28648: PPUSH
28649: LD_VAR 0 2
28653: PPUSH
28654: LD_VAR 0 3
28658: PPUSH
28659: LD_INT 3
28661: PPUSH
28662: LD_INT 6
28664: PPUSH
28665: CALL_OW 12
28669: PPUSH
28670: LD_INT 1
28672: PPUSH
28673: CALL_OW 483
// end ;
28677: GO 28537
28679: POP
28680: POP
// end ;
28681: PPOPN 5
28683: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28684: LD_EXP 62
28688: PUSH
28689: LD_EXP 97
28693: AND
28694: IFFALSE 28788
28696: GO 28698
28698: DISABLE
28699: LD_INT 0
28701: PPUSH
28702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28703: LD_ADDR_VAR 0 2
28707: PUSH
28708: LD_INT 22
28710: PUSH
28711: LD_OWVAR 2
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 32
28722: PUSH
28723: LD_INT 1
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 21
28732: PUSH
28733: LD_INT 2
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: LIST
28744: PPUSH
28745: CALL_OW 69
28749: ST_TO_ADDR
// if not tmp then
28750: LD_VAR 0 2
28754: NOT
28755: IFFALSE 28759
// exit ;
28757: GO 28788
// for i in tmp do
28759: LD_ADDR_VAR 0 1
28763: PUSH
28764: LD_VAR 0 2
28768: PUSH
28769: FOR_IN
28770: IFFALSE 28786
// SetFuel ( i , 0 ) ;
28772: LD_VAR 0 1
28776: PPUSH
28777: LD_INT 0
28779: PPUSH
28780: CALL_OW 240
28784: GO 28769
28786: POP
28787: POP
// end ;
28788: PPOPN 2
28790: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28791: LD_EXP 62
28795: PUSH
28796: LD_EXP 98
28800: AND
28801: IFFALSE 28867
28803: GO 28805
28805: DISABLE
28806: LD_INT 0
28808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28809: LD_ADDR_VAR 0 1
28813: PUSH
28814: LD_INT 22
28816: PUSH
28817: LD_OWVAR 2
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 30
28828: PUSH
28829: LD_INT 29
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PPUSH
28840: CALL_OW 69
28844: ST_TO_ADDR
// if not tmp then
28845: LD_VAR 0 1
28849: NOT
28850: IFFALSE 28854
// exit ;
28852: GO 28867
// DestroyUnit ( tmp [ 1 ] ) ;
28854: LD_VAR 0 1
28858: PUSH
28859: LD_INT 1
28861: ARRAY
28862: PPUSH
28863: CALL_OW 65
// end ;
28867: PPOPN 1
28869: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28870: LD_EXP 62
28874: PUSH
28875: LD_EXP 100
28879: AND
28880: IFFALSE 29009
28882: GO 28884
28884: DISABLE
28885: LD_INT 0
28887: PPUSH
// begin uc_side := 0 ;
28888: LD_ADDR_OWVAR 20
28892: PUSH
28893: LD_INT 0
28895: ST_TO_ADDR
// uc_nation := nation_arabian ;
28896: LD_ADDR_OWVAR 21
28900: PUSH
28901: LD_INT 2
28903: ST_TO_ADDR
// hc_gallery :=  ;
28904: LD_ADDR_OWVAR 33
28908: PUSH
28909: LD_STRING 
28911: ST_TO_ADDR
// hc_name :=  ;
28912: LD_ADDR_OWVAR 26
28916: PUSH
28917: LD_STRING 
28919: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28920: LD_INT 1
28922: PPUSH
28923: LD_INT 11
28925: PPUSH
28926: LD_INT 10
28928: PPUSH
28929: CALL_OW 380
// un := CreateHuman ;
28933: LD_ADDR_VAR 0 1
28937: PUSH
28938: CALL_OW 44
28942: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28943: LD_VAR 0 1
28947: PPUSH
28948: LD_INT 1
28950: PPUSH
28951: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28955: LD_INT 35
28957: PPUSH
28958: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28962: LD_VAR 0 1
28966: PPUSH
28967: LD_INT 22
28969: PUSH
28970: LD_OWVAR 2
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PPUSH
28979: CALL_OW 69
28983: PPUSH
28984: LD_VAR 0 1
28988: PPUSH
28989: CALL_OW 74
28993: PPUSH
28994: CALL_OW 115
// until IsDead ( un ) ;
28998: LD_VAR 0 1
29002: PPUSH
29003: CALL_OW 301
29007: IFFALSE 28955
// end ;
29009: PPOPN 1
29011: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29012: LD_EXP 62
29016: PUSH
29017: LD_EXP 102
29021: AND
29022: IFFALSE 29034
29024: GO 29026
29026: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29027: LD_STRING earthquake(getX(game), 0, 32)
29029: PPUSH
29030: CALL_OW 559
29034: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29035: LD_EXP 62
29039: PUSH
29040: LD_EXP 103
29044: AND
29045: IFFALSE 29136
29047: GO 29049
29049: DISABLE
29050: LD_INT 0
29052: PPUSH
// begin enable ;
29053: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29054: LD_ADDR_VAR 0 1
29058: PUSH
29059: LD_INT 22
29061: PUSH
29062: LD_OWVAR 2
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 21
29073: PUSH
29074: LD_INT 2
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 33
29083: PUSH
29084: LD_INT 3
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: LIST
29095: PPUSH
29096: CALL_OW 69
29100: ST_TO_ADDR
// if not tmp then
29101: LD_VAR 0 1
29105: NOT
29106: IFFALSE 29110
// exit ;
29108: GO 29136
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29110: LD_VAR 0 1
29114: PUSH
29115: LD_INT 1
29117: PPUSH
29118: LD_VAR 0 1
29122: PPUSH
29123: CALL_OW 12
29127: ARRAY
29128: PPUSH
29129: LD_INT 1
29131: PPUSH
29132: CALL_OW 234
// end ;
29136: PPOPN 1
29138: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29139: LD_EXP 62
29143: PUSH
29144: LD_EXP 104
29148: AND
29149: IFFALSE 29290
29151: GO 29153
29153: DISABLE
29154: LD_INT 0
29156: PPUSH
29157: PPUSH
29158: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29159: LD_ADDR_VAR 0 3
29163: PUSH
29164: LD_INT 22
29166: PUSH
29167: LD_OWVAR 2
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 25
29178: PUSH
29179: LD_INT 1
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PPUSH
29190: CALL_OW 69
29194: ST_TO_ADDR
// if not tmp then
29195: LD_VAR 0 3
29199: NOT
29200: IFFALSE 29204
// exit ;
29202: GO 29290
// un := tmp [ rand ( 1 , tmp ) ] ;
29204: LD_ADDR_VAR 0 2
29208: PUSH
29209: LD_VAR 0 3
29213: PUSH
29214: LD_INT 1
29216: PPUSH
29217: LD_VAR 0 3
29221: PPUSH
29222: CALL_OW 12
29226: ARRAY
29227: ST_TO_ADDR
// if Crawls ( un ) then
29228: LD_VAR 0 2
29232: PPUSH
29233: CALL_OW 318
29237: IFFALSE 29248
// ComWalk ( un ) ;
29239: LD_VAR 0 2
29243: PPUSH
29244: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29248: LD_VAR 0 2
29252: PPUSH
29253: LD_INT 9
29255: PPUSH
29256: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29260: LD_INT 28
29262: PPUSH
29263: LD_OWVAR 2
29267: PPUSH
29268: LD_INT 2
29270: PPUSH
29271: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29275: LD_INT 29
29277: PPUSH
29278: LD_OWVAR 2
29282: PPUSH
29283: LD_INT 2
29285: PPUSH
29286: CALL_OW 322
// end ;
29290: PPOPN 3
29292: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29293: LD_EXP 62
29297: PUSH
29298: LD_EXP 105
29302: AND
29303: IFFALSE 29414
29305: GO 29307
29307: DISABLE
29308: LD_INT 0
29310: PPUSH
29311: PPUSH
29312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29313: LD_ADDR_VAR 0 3
29317: PUSH
29318: LD_INT 22
29320: PUSH
29321: LD_OWVAR 2
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 25
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PPUSH
29344: CALL_OW 69
29348: ST_TO_ADDR
// if not tmp then
29349: LD_VAR 0 3
29353: NOT
29354: IFFALSE 29358
// exit ;
29356: GO 29414
// un := tmp [ rand ( 1 , tmp ) ] ;
29358: LD_ADDR_VAR 0 2
29362: PUSH
29363: LD_VAR 0 3
29367: PUSH
29368: LD_INT 1
29370: PPUSH
29371: LD_VAR 0 3
29375: PPUSH
29376: CALL_OW 12
29380: ARRAY
29381: ST_TO_ADDR
// if Crawls ( un ) then
29382: LD_VAR 0 2
29386: PPUSH
29387: CALL_OW 318
29391: IFFALSE 29402
// ComWalk ( un ) ;
29393: LD_VAR 0 2
29397: PPUSH
29398: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29402: LD_VAR 0 2
29406: PPUSH
29407: LD_INT 8
29409: PPUSH
29410: CALL_OW 336
// end ;
29414: PPOPN 3
29416: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29417: LD_EXP 62
29421: PUSH
29422: LD_EXP 106
29426: AND
29427: IFFALSE 29571
29429: GO 29431
29431: DISABLE
29432: LD_INT 0
29434: PPUSH
29435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29436: LD_ADDR_VAR 0 2
29440: PUSH
29441: LD_INT 22
29443: PUSH
29444: LD_OWVAR 2
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 21
29455: PUSH
29456: LD_INT 2
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 2
29465: PUSH
29466: LD_INT 34
29468: PUSH
29469: LD_INT 12
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 34
29478: PUSH
29479: LD_INT 51
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 34
29488: PUSH
29489: LD_INT 32
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: LIST
29506: PPUSH
29507: CALL_OW 69
29511: ST_TO_ADDR
// if not tmp then
29512: LD_VAR 0 2
29516: NOT
29517: IFFALSE 29521
// exit ;
29519: GO 29571
// for i in tmp do
29521: LD_ADDR_VAR 0 1
29525: PUSH
29526: LD_VAR 0 2
29530: PUSH
29531: FOR_IN
29532: IFFALSE 29569
// if GetCargo ( i , mat_artifact ) = 0 then
29534: LD_VAR 0 1
29538: PPUSH
29539: LD_INT 4
29541: PPUSH
29542: CALL_OW 289
29546: PUSH
29547: LD_INT 0
29549: EQUAL
29550: IFFALSE 29567
// SetCargo ( i , mat_siberit , 100 ) ;
29552: LD_VAR 0 1
29556: PPUSH
29557: LD_INT 3
29559: PPUSH
29560: LD_INT 100
29562: PPUSH
29563: CALL_OW 290
29567: GO 29531
29569: POP
29570: POP
// end ;
29571: PPOPN 2
29573: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29574: LD_EXP 62
29578: PUSH
29579: LD_EXP 107
29583: AND
29584: IFFALSE 29767
29586: GO 29588
29588: DISABLE
29589: LD_INT 0
29591: PPUSH
29592: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29593: LD_ADDR_VAR 0 2
29597: PUSH
29598: LD_INT 22
29600: PUSH
29601: LD_OWVAR 2
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PPUSH
29610: CALL_OW 69
29614: ST_TO_ADDR
// if not tmp then
29615: LD_VAR 0 2
29619: NOT
29620: IFFALSE 29624
// exit ;
29622: GO 29767
// for i := 1 to 2 do
29624: LD_ADDR_VAR 0 1
29628: PUSH
29629: DOUBLE
29630: LD_INT 1
29632: DEC
29633: ST_TO_ADDR
29634: LD_INT 2
29636: PUSH
29637: FOR_TO
29638: IFFALSE 29765
// begin uc_side := your_side ;
29640: LD_ADDR_OWVAR 20
29644: PUSH
29645: LD_OWVAR 2
29649: ST_TO_ADDR
// uc_nation := nation_american ;
29650: LD_ADDR_OWVAR 21
29654: PUSH
29655: LD_INT 1
29657: ST_TO_ADDR
// vc_chassis := us_morphling ;
29658: LD_ADDR_OWVAR 37
29662: PUSH
29663: LD_INT 5
29665: ST_TO_ADDR
// vc_engine := engine_siberite ;
29666: LD_ADDR_OWVAR 39
29670: PUSH
29671: LD_INT 3
29673: ST_TO_ADDR
// vc_control := control_computer ;
29674: LD_ADDR_OWVAR 38
29678: PUSH
29679: LD_INT 3
29681: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29682: LD_ADDR_OWVAR 40
29686: PUSH
29687: LD_INT 10
29689: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29690: LD_VAR 0 2
29694: PUSH
29695: LD_INT 1
29697: ARRAY
29698: PPUSH
29699: CALL_OW 310
29703: NOT
29704: IFFALSE 29751
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29706: CALL_OW 45
29710: PPUSH
29711: LD_VAR 0 2
29715: PUSH
29716: LD_INT 1
29718: ARRAY
29719: PPUSH
29720: CALL_OW 250
29724: PPUSH
29725: LD_VAR 0 2
29729: PUSH
29730: LD_INT 1
29732: ARRAY
29733: PPUSH
29734: CALL_OW 251
29738: PPUSH
29739: LD_INT 12
29741: PPUSH
29742: LD_INT 1
29744: PPUSH
29745: CALL_OW 50
29749: GO 29763
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29751: CALL_OW 45
29755: PPUSH
29756: LD_INT 1
29758: PPUSH
29759: CALL_OW 51
// end ;
29763: GO 29637
29765: POP
29766: POP
// end ;
29767: PPOPN 2
29769: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29770: LD_EXP 62
29774: PUSH
29775: LD_EXP 108
29779: AND
29780: IFFALSE 30002
29782: GO 29784
29784: DISABLE
29785: LD_INT 0
29787: PPUSH
29788: PPUSH
29789: PPUSH
29790: PPUSH
29791: PPUSH
29792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29793: LD_ADDR_VAR 0 6
29797: PUSH
29798: LD_INT 22
29800: PUSH
29801: LD_OWVAR 2
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 21
29812: PUSH
29813: LD_INT 1
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 3
29822: PUSH
29823: LD_INT 23
29825: PUSH
29826: LD_INT 0
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: LIST
29841: PPUSH
29842: CALL_OW 69
29846: ST_TO_ADDR
// if not tmp then
29847: LD_VAR 0 6
29851: NOT
29852: IFFALSE 29856
// exit ;
29854: GO 30002
// s1 := rand ( 1 , 4 ) ;
29856: LD_ADDR_VAR 0 2
29860: PUSH
29861: LD_INT 1
29863: PPUSH
29864: LD_INT 4
29866: PPUSH
29867: CALL_OW 12
29871: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29872: LD_ADDR_VAR 0 4
29876: PUSH
29877: LD_VAR 0 6
29881: PUSH
29882: LD_INT 1
29884: ARRAY
29885: PPUSH
29886: LD_VAR 0 2
29890: PPUSH
29891: CALL_OW 259
29895: ST_TO_ADDR
// if s1 = 1 then
29896: LD_VAR 0 2
29900: PUSH
29901: LD_INT 1
29903: EQUAL
29904: IFFALSE 29924
// s2 := rand ( 2 , 4 ) else
29906: LD_ADDR_VAR 0 3
29910: PUSH
29911: LD_INT 2
29913: PPUSH
29914: LD_INT 4
29916: PPUSH
29917: CALL_OW 12
29921: ST_TO_ADDR
29922: GO 29932
// s2 := 1 ;
29924: LD_ADDR_VAR 0 3
29928: PUSH
29929: LD_INT 1
29931: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29932: LD_ADDR_VAR 0 5
29936: PUSH
29937: LD_VAR 0 6
29941: PUSH
29942: LD_INT 1
29944: ARRAY
29945: PPUSH
29946: LD_VAR 0 3
29950: PPUSH
29951: CALL_OW 259
29955: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29956: LD_VAR 0 6
29960: PUSH
29961: LD_INT 1
29963: ARRAY
29964: PPUSH
29965: LD_VAR 0 2
29969: PPUSH
29970: LD_VAR 0 5
29974: PPUSH
29975: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29979: LD_VAR 0 6
29983: PUSH
29984: LD_INT 1
29986: ARRAY
29987: PPUSH
29988: LD_VAR 0 3
29992: PPUSH
29993: LD_VAR 0 4
29997: PPUSH
29998: CALL_OW 237
// end ;
30002: PPOPN 6
30004: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30005: LD_EXP 62
30009: PUSH
30010: LD_EXP 109
30014: AND
30015: IFFALSE 30094
30017: GO 30019
30019: DISABLE
30020: LD_INT 0
30022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30023: LD_ADDR_VAR 0 1
30027: PUSH
30028: LD_INT 22
30030: PUSH
30031: LD_OWVAR 2
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 30
30042: PUSH
30043: LD_INT 3
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PPUSH
30054: CALL_OW 69
30058: ST_TO_ADDR
// if not tmp then
30059: LD_VAR 0 1
30063: NOT
30064: IFFALSE 30068
// exit ;
30066: GO 30094
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30068: LD_VAR 0 1
30072: PUSH
30073: LD_INT 1
30075: PPUSH
30076: LD_VAR 0 1
30080: PPUSH
30081: CALL_OW 12
30085: ARRAY
30086: PPUSH
30087: LD_INT 1
30089: PPUSH
30090: CALL_OW 234
// end ;
30094: PPOPN 1
30096: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30097: LD_EXP 62
30101: PUSH
30102: LD_EXP 110
30106: AND
30107: IFFALSE 30219
30109: GO 30111
30111: DISABLE
30112: LD_INT 0
30114: PPUSH
30115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30116: LD_ADDR_VAR 0 2
30120: PUSH
30121: LD_INT 22
30123: PUSH
30124: LD_OWVAR 2
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 2
30135: PUSH
30136: LD_INT 30
30138: PUSH
30139: LD_INT 27
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 30
30148: PUSH
30149: LD_INT 26
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 30
30158: PUSH
30159: LD_INT 28
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PPUSH
30176: CALL_OW 69
30180: ST_TO_ADDR
// if not tmp then
30181: LD_VAR 0 2
30185: NOT
30186: IFFALSE 30190
// exit ;
30188: GO 30219
// for i in tmp do
30190: LD_ADDR_VAR 0 1
30194: PUSH
30195: LD_VAR 0 2
30199: PUSH
30200: FOR_IN
30201: IFFALSE 30217
// SetLives ( i , 1 ) ;
30203: LD_VAR 0 1
30207: PPUSH
30208: LD_INT 1
30210: PPUSH
30211: CALL_OW 234
30215: GO 30200
30217: POP
30218: POP
// end ;
30219: PPOPN 2
30221: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30222: LD_EXP 62
30226: PUSH
30227: LD_EXP 111
30231: AND
30232: IFFALSE 30519
30234: GO 30236
30236: DISABLE
30237: LD_INT 0
30239: PPUSH
30240: PPUSH
30241: PPUSH
// begin i := rand ( 1 , 7 ) ;
30242: LD_ADDR_VAR 0 1
30246: PUSH
30247: LD_INT 1
30249: PPUSH
30250: LD_INT 7
30252: PPUSH
30253: CALL_OW 12
30257: ST_TO_ADDR
// case i of 1 :
30258: LD_VAR 0 1
30262: PUSH
30263: LD_INT 1
30265: DOUBLE
30266: EQUAL
30267: IFTRUE 30271
30269: GO 30281
30271: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30272: LD_STRING earthquake(getX(game), 0, 32)
30274: PPUSH
30275: CALL_OW 559
30279: GO 30519
30281: LD_INT 2
30283: DOUBLE
30284: EQUAL
30285: IFTRUE 30289
30287: GO 30303
30289: POP
// begin ToLua ( displayStucuk(); ) ;
30290: LD_STRING displayStucuk();
30292: PPUSH
30293: CALL_OW 559
// ResetFog ;
30297: CALL_OW 335
// end ; 3 :
30301: GO 30519
30303: LD_INT 3
30305: DOUBLE
30306: EQUAL
30307: IFTRUE 30311
30309: GO 30415
30311: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30312: LD_ADDR_VAR 0 2
30316: PUSH
30317: LD_INT 22
30319: PUSH
30320: LD_OWVAR 2
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 25
30331: PUSH
30332: LD_INT 1
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PPUSH
30343: CALL_OW 69
30347: ST_TO_ADDR
// if not tmp then
30348: LD_VAR 0 2
30352: NOT
30353: IFFALSE 30357
// exit ;
30355: GO 30519
// un := tmp [ rand ( 1 , tmp ) ] ;
30357: LD_ADDR_VAR 0 3
30361: PUSH
30362: LD_VAR 0 2
30366: PUSH
30367: LD_INT 1
30369: PPUSH
30370: LD_VAR 0 2
30374: PPUSH
30375: CALL_OW 12
30379: ARRAY
30380: ST_TO_ADDR
// if Crawls ( un ) then
30381: LD_VAR 0 3
30385: PPUSH
30386: CALL_OW 318
30390: IFFALSE 30401
// ComWalk ( un ) ;
30392: LD_VAR 0 3
30396: PPUSH
30397: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30401: LD_VAR 0 3
30405: PPUSH
30406: LD_INT 8
30408: PPUSH
30409: CALL_OW 336
// end ; 4 :
30413: GO 30519
30415: LD_INT 4
30417: DOUBLE
30418: EQUAL
30419: IFTRUE 30423
30421: GO 30497
30423: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30424: LD_ADDR_VAR 0 2
30428: PUSH
30429: LD_INT 22
30431: PUSH
30432: LD_OWVAR 2
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 30
30443: PUSH
30444: LD_INT 29
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PPUSH
30455: CALL_OW 69
30459: ST_TO_ADDR
// if not tmp then
30460: LD_VAR 0 2
30464: NOT
30465: IFFALSE 30469
// exit ;
30467: GO 30519
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30469: LD_VAR 0 2
30473: PUSH
30474: LD_INT 1
30476: ARRAY
30477: PPUSH
30478: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30482: LD_VAR 0 2
30486: PUSH
30487: LD_INT 1
30489: ARRAY
30490: PPUSH
30491: CALL_OW 65
// end ; 5 .. 7 :
30495: GO 30519
30497: LD_INT 5
30499: DOUBLE
30500: GREATEREQUAL
30501: IFFALSE 30509
30503: LD_INT 7
30505: DOUBLE
30506: LESSEQUAL
30507: IFTRUE 30511
30509: GO 30518
30511: POP
// StreamSibBomb ; end ;
30512: CALL 26756 0 0
30516: GO 30519
30518: POP
// end ;
30519: PPOPN 3
30521: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30522: LD_EXP 62
30526: PUSH
30527: LD_EXP 112
30531: AND
30532: IFFALSE 30688
30534: GO 30536
30536: DISABLE
30537: LD_INT 0
30539: PPUSH
30540: PPUSH
30541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30542: LD_ADDR_VAR 0 2
30546: PUSH
30547: LD_INT 81
30549: PUSH
30550: LD_OWVAR 2
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 2
30561: PUSH
30562: LD_INT 21
30564: PUSH
30565: LD_INT 1
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 21
30574: PUSH
30575: LD_INT 2
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: LIST
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PPUSH
30591: CALL_OW 69
30595: ST_TO_ADDR
// if not tmp then
30596: LD_VAR 0 2
30600: NOT
30601: IFFALSE 30605
// exit ;
30603: GO 30688
// p := 0 ;
30605: LD_ADDR_VAR 0 3
30609: PUSH
30610: LD_INT 0
30612: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30613: LD_INT 35
30615: PPUSH
30616: CALL_OW 67
// p := p + 1 ;
30620: LD_ADDR_VAR 0 3
30624: PUSH
30625: LD_VAR 0 3
30629: PUSH
30630: LD_INT 1
30632: PLUS
30633: ST_TO_ADDR
// for i in tmp do
30634: LD_ADDR_VAR 0 1
30638: PUSH
30639: LD_VAR 0 2
30643: PUSH
30644: FOR_IN
30645: IFFALSE 30676
// if GetLives ( i ) < 1000 then
30647: LD_VAR 0 1
30651: PPUSH
30652: CALL_OW 256
30656: PUSH
30657: LD_INT 1000
30659: LESS
30660: IFFALSE 30674
// SetLives ( i , 1000 ) ;
30662: LD_VAR 0 1
30666: PPUSH
30667: LD_INT 1000
30669: PPUSH
30670: CALL_OW 234
30674: GO 30644
30676: POP
30677: POP
// until p > 20 ;
30678: LD_VAR 0 3
30682: PUSH
30683: LD_INT 20
30685: GREATER
30686: IFFALSE 30613
// end ;
30688: PPOPN 3
30690: END
// every 0 0$1 trigger StreamModeActive and sTime do
30691: LD_EXP 62
30695: PUSH
30696: LD_EXP 113
30700: AND
30701: IFFALSE 30736
30703: GO 30705
30705: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30706: LD_INT 28
30708: PPUSH
30709: LD_OWVAR 2
30713: PPUSH
30714: LD_INT 2
30716: PPUSH
30717: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30721: LD_INT 30
30723: PPUSH
30724: LD_OWVAR 2
30728: PPUSH
30729: LD_INT 2
30731: PPUSH
30732: CALL_OW 322
// end ;
30736: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30737: LD_EXP 62
30741: PUSH
30742: LD_EXP 114
30746: AND
30747: IFFALSE 30868
30749: GO 30751
30751: DISABLE
30752: LD_INT 0
30754: PPUSH
30755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30756: LD_ADDR_VAR 0 2
30760: PUSH
30761: LD_INT 22
30763: PUSH
30764: LD_OWVAR 2
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 21
30775: PUSH
30776: LD_INT 1
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 3
30785: PUSH
30786: LD_INT 23
30788: PUSH
30789: LD_INT 0
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: LIST
30804: PPUSH
30805: CALL_OW 69
30809: ST_TO_ADDR
// if not tmp then
30810: LD_VAR 0 2
30814: NOT
30815: IFFALSE 30819
// exit ;
30817: GO 30868
// for i in tmp do
30819: LD_ADDR_VAR 0 1
30823: PUSH
30824: LD_VAR 0 2
30828: PUSH
30829: FOR_IN
30830: IFFALSE 30866
// begin if Crawls ( i ) then
30832: LD_VAR 0 1
30836: PPUSH
30837: CALL_OW 318
30841: IFFALSE 30852
// ComWalk ( i ) ;
30843: LD_VAR 0 1
30847: PPUSH
30848: CALL_OW 138
// SetClass ( i , 2 ) ;
30852: LD_VAR 0 1
30856: PPUSH
30857: LD_INT 2
30859: PPUSH
30860: CALL_OW 336
// end ;
30864: GO 30829
30866: POP
30867: POP
// end ;
30868: PPOPN 2
30870: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30871: LD_EXP 62
30875: PUSH
30876: LD_EXP 115
30880: AND
30881: IFFALSE 31169
30883: GO 30885
30885: DISABLE
30886: LD_INT 0
30888: PPUSH
30889: PPUSH
30890: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30891: LD_OWVAR 2
30895: PPUSH
30896: LD_INT 9
30898: PPUSH
30899: LD_INT 1
30901: PPUSH
30902: LD_INT 1
30904: PPUSH
30905: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30909: LD_INT 9
30911: PPUSH
30912: LD_OWVAR 2
30916: PPUSH
30917: CALL_OW 343
// uc_side := 9 ;
30921: LD_ADDR_OWVAR 20
30925: PUSH
30926: LD_INT 9
30928: ST_TO_ADDR
// uc_nation := 2 ;
30929: LD_ADDR_OWVAR 21
30933: PUSH
30934: LD_INT 2
30936: ST_TO_ADDR
// hc_name := Dark Warrior ;
30937: LD_ADDR_OWVAR 26
30941: PUSH
30942: LD_STRING Dark Warrior
30944: ST_TO_ADDR
// hc_gallery :=  ;
30945: LD_ADDR_OWVAR 33
30949: PUSH
30950: LD_STRING 
30952: ST_TO_ADDR
// hc_noskilllimit := true ;
30953: LD_ADDR_OWVAR 76
30957: PUSH
30958: LD_INT 1
30960: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30961: LD_ADDR_OWVAR 31
30965: PUSH
30966: LD_INT 30
30968: PUSH
30969: LD_INT 30
30971: PUSH
30972: LD_INT 30
30974: PUSH
30975: LD_INT 30
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: ST_TO_ADDR
// un := CreateHuman ;
30984: LD_ADDR_VAR 0 3
30988: PUSH
30989: CALL_OW 44
30993: ST_TO_ADDR
// hc_noskilllimit := false ;
30994: LD_ADDR_OWVAR 76
30998: PUSH
30999: LD_INT 0
31001: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31002: LD_VAR 0 3
31006: PPUSH
31007: LD_INT 1
31009: PPUSH
31010: CALL_OW 51
// ToLua ( playRanger() ) ;
31014: LD_STRING playRanger()
31016: PPUSH
31017: CALL_OW 559
// p := 0 ;
31021: LD_ADDR_VAR 0 2
31025: PUSH
31026: LD_INT 0
31028: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31029: LD_INT 35
31031: PPUSH
31032: CALL_OW 67
// p := p + 1 ;
31036: LD_ADDR_VAR 0 2
31040: PUSH
31041: LD_VAR 0 2
31045: PUSH
31046: LD_INT 1
31048: PLUS
31049: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31050: LD_VAR 0 3
31054: PPUSH
31055: CALL_OW 256
31059: PUSH
31060: LD_INT 1000
31062: LESS
31063: IFFALSE 31077
// SetLives ( un , 1000 ) ;
31065: LD_VAR 0 3
31069: PPUSH
31070: LD_INT 1000
31072: PPUSH
31073: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31077: LD_VAR 0 3
31081: PPUSH
31082: LD_INT 81
31084: PUSH
31085: LD_OWVAR 2
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 91
31096: PUSH
31097: LD_VAR 0 3
31101: PUSH
31102: LD_INT 30
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: LIST
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PPUSH
31114: CALL_OW 69
31118: PPUSH
31119: LD_VAR 0 3
31123: PPUSH
31124: CALL_OW 74
31128: PPUSH
31129: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31133: LD_VAR 0 2
31137: PUSH
31138: LD_INT 80
31140: GREATER
31141: PUSH
31142: LD_VAR 0 3
31146: PPUSH
31147: CALL_OW 301
31151: OR
31152: IFFALSE 31029
// if un then
31154: LD_VAR 0 3
31158: IFFALSE 31169
// RemoveUnit ( un ) ;
31160: LD_VAR 0 3
31164: PPUSH
31165: CALL_OW 64
// end ;
31169: PPOPN 3
31171: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31172: LD_EXP 116
31176: IFFALSE 31292
31178: GO 31180
31180: DISABLE
31181: LD_INT 0
31183: PPUSH
31184: PPUSH
31185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31186: LD_ADDR_VAR 0 2
31190: PUSH
31191: LD_INT 81
31193: PUSH
31194: LD_OWVAR 2
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 21
31205: PUSH
31206: LD_INT 1
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PPUSH
31217: CALL_OW 69
31221: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31222: LD_STRING playComputer()
31224: PPUSH
31225: CALL_OW 559
// if not tmp then
31229: LD_VAR 0 2
31233: NOT
31234: IFFALSE 31238
// exit ;
31236: GO 31292
// for i in tmp do
31238: LD_ADDR_VAR 0 1
31242: PUSH
31243: LD_VAR 0 2
31247: PUSH
31248: FOR_IN
31249: IFFALSE 31290
// for j := 1 to 4 do
31251: LD_ADDR_VAR 0 3
31255: PUSH
31256: DOUBLE
31257: LD_INT 1
31259: DEC
31260: ST_TO_ADDR
31261: LD_INT 4
31263: PUSH
31264: FOR_TO
31265: IFFALSE 31286
// SetSkill ( i , j , 10 ) ;
31267: LD_VAR 0 1
31271: PPUSH
31272: LD_VAR 0 3
31276: PPUSH
31277: LD_INT 10
31279: PPUSH
31280: CALL_OW 237
31284: GO 31264
31286: POP
31287: POP
31288: GO 31248
31290: POP
31291: POP
// end ;
31292: PPOPN 3
31294: END
// every 0 0$1 trigger s30 do var i , tmp ;
31295: LD_EXP 117
31299: IFFALSE 31368
31301: GO 31303
31303: DISABLE
31304: LD_INT 0
31306: PPUSH
31307: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31308: LD_ADDR_VAR 0 2
31312: PUSH
31313: LD_INT 22
31315: PUSH
31316: LD_OWVAR 2
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PPUSH
31325: CALL_OW 69
31329: ST_TO_ADDR
// if not tmp then
31330: LD_VAR 0 2
31334: NOT
31335: IFFALSE 31339
// exit ;
31337: GO 31368
// for i in tmp do
31339: LD_ADDR_VAR 0 1
31343: PUSH
31344: LD_VAR 0 2
31348: PUSH
31349: FOR_IN
31350: IFFALSE 31366
// SetLives ( i , 300 ) ;
31352: LD_VAR 0 1
31356: PPUSH
31357: LD_INT 300
31359: PPUSH
31360: CALL_OW 234
31364: GO 31349
31366: POP
31367: POP
// end ;
31368: PPOPN 2
31370: END
// every 0 0$1 trigger s60 do var i , tmp ;
31371: LD_EXP 118
31375: IFFALSE 31444
31377: GO 31379
31379: DISABLE
31380: LD_INT 0
31382: PPUSH
31383: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31384: LD_ADDR_VAR 0 2
31388: PUSH
31389: LD_INT 22
31391: PUSH
31392: LD_OWVAR 2
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PPUSH
31401: CALL_OW 69
31405: ST_TO_ADDR
// if not tmp then
31406: LD_VAR 0 2
31410: NOT
31411: IFFALSE 31415
// exit ;
31413: GO 31444
// for i in tmp do
31415: LD_ADDR_VAR 0 1
31419: PUSH
31420: LD_VAR 0 2
31424: PUSH
31425: FOR_IN
31426: IFFALSE 31442
// SetLives ( i , 600 ) ;
31428: LD_VAR 0 1
31432: PPUSH
31433: LD_INT 600
31435: PPUSH
31436: CALL_OW 234
31440: GO 31425
31442: POP
31443: POP
// end ;
31444: PPOPN 2
31446: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31447: LD_INT 0
31449: PPUSH
// case cmd of 301 :
31450: LD_VAR 0 1
31454: PUSH
31455: LD_INT 301
31457: DOUBLE
31458: EQUAL
31459: IFTRUE 31463
31461: GO 31495
31463: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31464: LD_VAR 0 6
31468: PPUSH
31469: LD_VAR 0 7
31473: PPUSH
31474: LD_VAR 0 8
31478: PPUSH
31479: LD_VAR 0 4
31483: PPUSH
31484: LD_VAR 0 5
31488: PPUSH
31489: CALL 32696 0 5
31493: GO 31616
31495: LD_INT 302
31497: DOUBLE
31498: EQUAL
31499: IFTRUE 31503
31501: GO 31540
31503: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31504: LD_VAR 0 6
31508: PPUSH
31509: LD_VAR 0 7
31513: PPUSH
31514: LD_VAR 0 8
31518: PPUSH
31519: LD_VAR 0 9
31523: PPUSH
31524: LD_VAR 0 4
31528: PPUSH
31529: LD_VAR 0 5
31533: PPUSH
31534: CALL 32787 0 6
31538: GO 31616
31540: LD_INT 303
31542: DOUBLE
31543: EQUAL
31544: IFTRUE 31548
31546: GO 31585
31548: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31549: LD_VAR 0 6
31553: PPUSH
31554: LD_VAR 0 7
31558: PPUSH
31559: LD_VAR 0 8
31563: PPUSH
31564: LD_VAR 0 9
31568: PPUSH
31569: LD_VAR 0 4
31573: PPUSH
31574: LD_VAR 0 5
31578: PPUSH
31579: CALL 31621 0 6
31583: GO 31616
31585: LD_INT 304
31587: DOUBLE
31588: EQUAL
31589: IFTRUE 31593
31591: GO 31615
31593: POP
// hHackTeleport ( unit , x , y ) ; end ;
31594: LD_VAR 0 2
31598: PPUSH
31599: LD_VAR 0 4
31603: PPUSH
31604: LD_VAR 0 5
31608: PPUSH
31609: CALL 33380 0 3
31613: GO 31616
31615: POP
// end ;
31616: LD_VAR 0 12
31620: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31621: LD_INT 0
31623: PPUSH
31624: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31625: LD_VAR 0 1
31629: PUSH
31630: LD_INT 1
31632: LESS
31633: PUSH
31634: LD_VAR 0 1
31638: PUSH
31639: LD_INT 3
31641: GREATER
31642: OR
31643: PUSH
31644: LD_VAR 0 5
31648: PPUSH
31649: LD_VAR 0 6
31653: PPUSH
31654: CALL_OW 428
31658: OR
31659: IFFALSE 31663
// exit ;
31661: GO 32383
// uc_side := your_side ;
31663: LD_ADDR_OWVAR 20
31667: PUSH
31668: LD_OWVAR 2
31672: ST_TO_ADDR
// uc_nation := nation ;
31673: LD_ADDR_OWVAR 21
31677: PUSH
31678: LD_VAR 0 1
31682: ST_TO_ADDR
// bc_level = 1 ;
31683: LD_ADDR_OWVAR 43
31687: PUSH
31688: LD_INT 1
31690: ST_TO_ADDR
// case btype of 1 :
31691: LD_VAR 0 2
31695: PUSH
31696: LD_INT 1
31698: DOUBLE
31699: EQUAL
31700: IFTRUE 31704
31702: GO 31715
31704: POP
// bc_type := b_depot ; 2 :
31705: LD_ADDR_OWVAR 42
31709: PUSH
31710: LD_INT 0
31712: ST_TO_ADDR
31713: GO 32327
31715: LD_INT 2
31717: DOUBLE
31718: EQUAL
31719: IFTRUE 31723
31721: GO 31734
31723: POP
// bc_type := b_warehouse ; 3 :
31724: LD_ADDR_OWVAR 42
31728: PUSH
31729: LD_INT 1
31731: ST_TO_ADDR
31732: GO 32327
31734: LD_INT 3
31736: DOUBLE
31737: EQUAL
31738: IFTRUE 31742
31740: GO 31753
31742: POP
// bc_type := b_lab ; 4 .. 9 :
31743: LD_ADDR_OWVAR 42
31747: PUSH
31748: LD_INT 6
31750: ST_TO_ADDR
31751: GO 32327
31753: LD_INT 4
31755: DOUBLE
31756: GREATEREQUAL
31757: IFFALSE 31765
31759: LD_INT 9
31761: DOUBLE
31762: LESSEQUAL
31763: IFTRUE 31767
31765: GO 31819
31767: POP
// begin bc_type := b_lab_half ;
31768: LD_ADDR_OWVAR 42
31772: PUSH
31773: LD_INT 7
31775: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31776: LD_ADDR_OWVAR 44
31780: PUSH
31781: LD_INT 10
31783: PUSH
31784: LD_INT 11
31786: PUSH
31787: LD_INT 12
31789: PUSH
31790: LD_INT 15
31792: PUSH
31793: LD_INT 14
31795: PUSH
31796: LD_INT 13
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: PUSH
31807: LD_VAR 0 2
31811: PUSH
31812: LD_INT 3
31814: MINUS
31815: ARRAY
31816: ST_TO_ADDR
// end ; 10 .. 13 :
31817: GO 32327
31819: LD_INT 10
31821: DOUBLE
31822: GREATEREQUAL
31823: IFFALSE 31831
31825: LD_INT 13
31827: DOUBLE
31828: LESSEQUAL
31829: IFTRUE 31833
31831: GO 31910
31833: POP
// begin bc_type := b_lab_full ;
31834: LD_ADDR_OWVAR 42
31838: PUSH
31839: LD_INT 8
31841: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31842: LD_ADDR_OWVAR 44
31846: PUSH
31847: LD_INT 10
31849: PUSH
31850: LD_INT 12
31852: PUSH
31853: LD_INT 14
31855: PUSH
31856: LD_INT 13
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: PUSH
31865: LD_VAR 0 2
31869: PUSH
31870: LD_INT 9
31872: MINUS
31873: ARRAY
31874: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31875: LD_ADDR_OWVAR 45
31879: PUSH
31880: LD_INT 11
31882: PUSH
31883: LD_INT 15
31885: PUSH
31886: LD_INT 12
31888: PUSH
31889: LD_INT 15
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: PUSH
31898: LD_VAR 0 2
31902: PUSH
31903: LD_INT 9
31905: MINUS
31906: ARRAY
31907: ST_TO_ADDR
// end ; 14 :
31908: GO 32327
31910: LD_INT 14
31912: DOUBLE
31913: EQUAL
31914: IFTRUE 31918
31916: GO 31929
31918: POP
// bc_type := b_workshop ; 15 :
31919: LD_ADDR_OWVAR 42
31923: PUSH
31924: LD_INT 2
31926: ST_TO_ADDR
31927: GO 32327
31929: LD_INT 15
31931: DOUBLE
31932: EQUAL
31933: IFTRUE 31937
31935: GO 31948
31937: POP
// bc_type := b_factory ; 16 :
31938: LD_ADDR_OWVAR 42
31942: PUSH
31943: LD_INT 3
31945: ST_TO_ADDR
31946: GO 32327
31948: LD_INT 16
31950: DOUBLE
31951: EQUAL
31952: IFTRUE 31956
31954: GO 31967
31956: POP
// bc_type := b_ext_gun ; 17 :
31957: LD_ADDR_OWVAR 42
31961: PUSH
31962: LD_INT 17
31964: ST_TO_ADDR
31965: GO 32327
31967: LD_INT 17
31969: DOUBLE
31970: EQUAL
31971: IFTRUE 31975
31973: GO 32003
31975: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31976: LD_ADDR_OWVAR 42
31980: PUSH
31981: LD_INT 19
31983: PUSH
31984: LD_INT 23
31986: PUSH
31987: LD_INT 19
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: PUSH
31995: LD_VAR 0 1
31999: ARRAY
32000: ST_TO_ADDR
32001: GO 32327
32003: LD_INT 18
32005: DOUBLE
32006: EQUAL
32007: IFTRUE 32011
32009: GO 32022
32011: POP
// bc_type := b_ext_radar ; 19 :
32012: LD_ADDR_OWVAR 42
32016: PUSH
32017: LD_INT 20
32019: ST_TO_ADDR
32020: GO 32327
32022: LD_INT 19
32024: DOUBLE
32025: EQUAL
32026: IFTRUE 32030
32028: GO 32041
32030: POP
// bc_type := b_ext_radio ; 20 :
32031: LD_ADDR_OWVAR 42
32035: PUSH
32036: LD_INT 22
32038: ST_TO_ADDR
32039: GO 32327
32041: LD_INT 20
32043: DOUBLE
32044: EQUAL
32045: IFTRUE 32049
32047: GO 32060
32049: POP
// bc_type := b_ext_siberium ; 21 :
32050: LD_ADDR_OWVAR 42
32054: PUSH
32055: LD_INT 21
32057: ST_TO_ADDR
32058: GO 32327
32060: LD_INT 21
32062: DOUBLE
32063: EQUAL
32064: IFTRUE 32068
32066: GO 32079
32068: POP
// bc_type := b_ext_computer ; 22 :
32069: LD_ADDR_OWVAR 42
32073: PUSH
32074: LD_INT 24
32076: ST_TO_ADDR
32077: GO 32327
32079: LD_INT 22
32081: DOUBLE
32082: EQUAL
32083: IFTRUE 32087
32085: GO 32098
32087: POP
// bc_type := b_ext_track ; 23 :
32088: LD_ADDR_OWVAR 42
32092: PUSH
32093: LD_INT 16
32095: ST_TO_ADDR
32096: GO 32327
32098: LD_INT 23
32100: DOUBLE
32101: EQUAL
32102: IFTRUE 32106
32104: GO 32117
32106: POP
// bc_type := b_ext_laser ; 24 :
32107: LD_ADDR_OWVAR 42
32111: PUSH
32112: LD_INT 25
32114: ST_TO_ADDR
32115: GO 32327
32117: LD_INT 24
32119: DOUBLE
32120: EQUAL
32121: IFTRUE 32125
32123: GO 32136
32125: POP
// bc_type := b_control_tower ; 25 :
32126: LD_ADDR_OWVAR 42
32130: PUSH
32131: LD_INT 36
32133: ST_TO_ADDR
32134: GO 32327
32136: LD_INT 25
32138: DOUBLE
32139: EQUAL
32140: IFTRUE 32144
32142: GO 32155
32144: POP
// bc_type := b_breastwork ; 26 :
32145: LD_ADDR_OWVAR 42
32149: PUSH
32150: LD_INT 31
32152: ST_TO_ADDR
32153: GO 32327
32155: LD_INT 26
32157: DOUBLE
32158: EQUAL
32159: IFTRUE 32163
32161: GO 32174
32163: POP
// bc_type := b_bunker ; 27 :
32164: LD_ADDR_OWVAR 42
32168: PUSH
32169: LD_INT 32
32171: ST_TO_ADDR
32172: GO 32327
32174: LD_INT 27
32176: DOUBLE
32177: EQUAL
32178: IFTRUE 32182
32180: GO 32193
32182: POP
// bc_type := b_turret ; 28 :
32183: LD_ADDR_OWVAR 42
32187: PUSH
32188: LD_INT 33
32190: ST_TO_ADDR
32191: GO 32327
32193: LD_INT 28
32195: DOUBLE
32196: EQUAL
32197: IFTRUE 32201
32199: GO 32212
32201: POP
// bc_type := b_armoury ; 29 :
32202: LD_ADDR_OWVAR 42
32206: PUSH
32207: LD_INT 4
32209: ST_TO_ADDR
32210: GO 32327
32212: LD_INT 29
32214: DOUBLE
32215: EQUAL
32216: IFTRUE 32220
32218: GO 32231
32220: POP
// bc_type := b_barracks ; 30 :
32221: LD_ADDR_OWVAR 42
32225: PUSH
32226: LD_INT 5
32228: ST_TO_ADDR
32229: GO 32327
32231: LD_INT 30
32233: DOUBLE
32234: EQUAL
32235: IFTRUE 32239
32237: GO 32250
32239: POP
// bc_type := b_solar_power ; 31 :
32240: LD_ADDR_OWVAR 42
32244: PUSH
32245: LD_INT 27
32247: ST_TO_ADDR
32248: GO 32327
32250: LD_INT 31
32252: DOUBLE
32253: EQUAL
32254: IFTRUE 32258
32256: GO 32269
32258: POP
// bc_type := b_oil_power ; 32 :
32259: LD_ADDR_OWVAR 42
32263: PUSH
32264: LD_INT 26
32266: ST_TO_ADDR
32267: GO 32327
32269: LD_INT 32
32271: DOUBLE
32272: EQUAL
32273: IFTRUE 32277
32275: GO 32288
32277: POP
// bc_type := b_siberite_power ; 33 :
32278: LD_ADDR_OWVAR 42
32282: PUSH
32283: LD_INT 28
32285: ST_TO_ADDR
32286: GO 32327
32288: LD_INT 33
32290: DOUBLE
32291: EQUAL
32292: IFTRUE 32296
32294: GO 32307
32296: POP
// bc_type := b_oil_mine ; 34 :
32297: LD_ADDR_OWVAR 42
32301: PUSH
32302: LD_INT 29
32304: ST_TO_ADDR
32305: GO 32327
32307: LD_INT 34
32309: DOUBLE
32310: EQUAL
32311: IFTRUE 32315
32313: GO 32326
32315: POP
// bc_type := b_siberite_mine ; end ;
32316: LD_ADDR_OWVAR 42
32320: PUSH
32321: LD_INT 30
32323: ST_TO_ADDR
32324: GO 32327
32326: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32327: LD_ADDR_VAR 0 8
32331: PUSH
32332: LD_VAR 0 5
32336: PPUSH
32337: LD_VAR 0 6
32341: PPUSH
32342: LD_VAR 0 3
32346: PPUSH
32347: CALL_OW 47
32351: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32352: LD_OWVAR 42
32356: PUSH
32357: LD_INT 32
32359: PUSH
32360: LD_INT 33
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: IN
32367: IFFALSE 32383
// PlaceWeaponTurret ( b , weapon ) ;
32369: LD_VAR 0 8
32373: PPUSH
32374: LD_VAR 0 4
32378: PPUSH
32379: CALL_OW 431
// end ;
32383: LD_VAR 0 7
32387: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32388: LD_INT 0
32390: PPUSH
32391: PPUSH
32392: PPUSH
32393: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32394: LD_ADDR_VAR 0 4
32398: PUSH
32399: LD_INT 22
32401: PUSH
32402: LD_OWVAR 2
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 2
32413: PUSH
32414: LD_INT 30
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 30
32426: PUSH
32427: LD_INT 1
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: LIST
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PPUSH
32443: CALL_OW 69
32447: ST_TO_ADDR
// if not tmp then
32448: LD_VAR 0 4
32452: NOT
32453: IFFALSE 32457
// exit ;
32455: GO 32516
// for i in tmp do
32457: LD_ADDR_VAR 0 2
32461: PUSH
32462: LD_VAR 0 4
32466: PUSH
32467: FOR_IN
32468: IFFALSE 32514
// for j = 1 to 3 do
32470: LD_ADDR_VAR 0 3
32474: PUSH
32475: DOUBLE
32476: LD_INT 1
32478: DEC
32479: ST_TO_ADDR
32480: LD_INT 3
32482: PUSH
32483: FOR_TO
32484: IFFALSE 32510
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32486: LD_VAR 0 2
32490: PPUSH
32491: CALL_OW 274
32495: PPUSH
32496: LD_VAR 0 3
32500: PPUSH
32501: LD_INT 99999
32503: PPUSH
32504: CALL_OW 277
32508: GO 32483
32510: POP
32511: POP
32512: GO 32467
32514: POP
32515: POP
// end ;
32516: LD_VAR 0 1
32520: RET
// export function hHackSetLevel10 ; var i , j ; begin
32521: LD_INT 0
32523: PPUSH
32524: PPUSH
32525: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32526: LD_ADDR_VAR 0 2
32530: PUSH
32531: LD_INT 21
32533: PUSH
32534: LD_INT 1
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PPUSH
32541: CALL_OW 69
32545: PUSH
32546: FOR_IN
32547: IFFALSE 32599
// if IsSelected ( i ) then
32549: LD_VAR 0 2
32553: PPUSH
32554: CALL_OW 306
32558: IFFALSE 32597
// begin for j := 1 to 4 do
32560: LD_ADDR_VAR 0 3
32564: PUSH
32565: DOUBLE
32566: LD_INT 1
32568: DEC
32569: ST_TO_ADDR
32570: LD_INT 4
32572: PUSH
32573: FOR_TO
32574: IFFALSE 32595
// SetSkill ( i , j , 10 ) ;
32576: LD_VAR 0 2
32580: PPUSH
32581: LD_VAR 0 3
32585: PPUSH
32586: LD_INT 10
32588: PPUSH
32589: CALL_OW 237
32593: GO 32573
32595: POP
32596: POP
// end ;
32597: GO 32546
32599: POP
32600: POP
// end ;
32601: LD_VAR 0 1
32605: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32606: LD_INT 0
32608: PPUSH
32609: PPUSH
32610: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32611: LD_ADDR_VAR 0 2
32615: PUSH
32616: LD_INT 22
32618: PUSH
32619: LD_OWVAR 2
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 21
32630: PUSH
32631: LD_INT 1
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PPUSH
32642: CALL_OW 69
32646: PUSH
32647: FOR_IN
32648: IFFALSE 32689
// begin for j := 1 to 4 do
32650: LD_ADDR_VAR 0 3
32654: PUSH
32655: DOUBLE
32656: LD_INT 1
32658: DEC
32659: ST_TO_ADDR
32660: LD_INT 4
32662: PUSH
32663: FOR_TO
32664: IFFALSE 32685
// SetSkill ( i , j , 10 ) ;
32666: LD_VAR 0 2
32670: PPUSH
32671: LD_VAR 0 3
32675: PPUSH
32676: LD_INT 10
32678: PPUSH
32679: CALL_OW 237
32683: GO 32663
32685: POP
32686: POP
// end ;
32687: GO 32647
32689: POP
32690: POP
// end ;
32691: LD_VAR 0 1
32695: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32696: LD_INT 0
32698: PPUSH
// uc_side := your_side ;
32699: LD_ADDR_OWVAR 20
32703: PUSH
32704: LD_OWVAR 2
32708: ST_TO_ADDR
// uc_nation := nation ;
32709: LD_ADDR_OWVAR 21
32713: PUSH
32714: LD_VAR 0 1
32718: ST_TO_ADDR
// InitHc ;
32719: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32723: LD_INT 0
32725: PPUSH
32726: LD_VAR 0 2
32730: PPUSH
32731: LD_VAR 0 3
32735: PPUSH
32736: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32740: LD_VAR 0 4
32744: PPUSH
32745: LD_VAR 0 5
32749: PPUSH
32750: CALL_OW 428
32754: PUSH
32755: LD_INT 0
32757: EQUAL
32758: IFFALSE 32782
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32760: CALL_OW 44
32764: PPUSH
32765: LD_VAR 0 4
32769: PPUSH
32770: LD_VAR 0 5
32774: PPUSH
32775: LD_INT 1
32777: PPUSH
32778: CALL_OW 48
// end ;
32782: LD_VAR 0 6
32786: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32787: LD_INT 0
32789: PPUSH
32790: PPUSH
// uc_side := your_side ;
32791: LD_ADDR_OWVAR 20
32795: PUSH
32796: LD_OWVAR 2
32800: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32801: LD_VAR 0 1
32805: PUSH
32806: LD_INT 1
32808: PUSH
32809: LD_INT 2
32811: PUSH
32812: LD_INT 3
32814: PUSH
32815: LD_INT 4
32817: PUSH
32818: LD_INT 5
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: IN
32828: IFFALSE 32840
// uc_nation := nation_american else
32830: LD_ADDR_OWVAR 21
32834: PUSH
32835: LD_INT 1
32837: ST_TO_ADDR
32838: GO 32883
// if chassis in [ 11 , 12 , 13 , 14 ] then
32840: LD_VAR 0 1
32844: PUSH
32845: LD_INT 11
32847: PUSH
32848: LD_INT 12
32850: PUSH
32851: LD_INT 13
32853: PUSH
32854: LD_INT 14
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: IN
32863: IFFALSE 32875
// uc_nation := nation_arabian else
32865: LD_ADDR_OWVAR 21
32869: PUSH
32870: LD_INT 2
32872: ST_TO_ADDR
32873: GO 32883
// uc_nation := nation_russian ;
32875: LD_ADDR_OWVAR 21
32879: PUSH
32880: LD_INT 3
32882: ST_TO_ADDR
// vc_chassis := chassis ;
32883: LD_ADDR_OWVAR 37
32887: PUSH
32888: LD_VAR 0 1
32892: ST_TO_ADDR
// vc_engine := engine ;
32893: LD_ADDR_OWVAR 39
32897: PUSH
32898: LD_VAR 0 2
32902: ST_TO_ADDR
// vc_control := control ;
32903: LD_ADDR_OWVAR 38
32907: PUSH
32908: LD_VAR 0 3
32912: ST_TO_ADDR
// vc_weapon := weapon ;
32913: LD_ADDR_OWVAR 40
32917: PUSH
32918: LD_VAR 0 4
32922: ST_TO_ADDR
// un := CreateVehicle ;
32923: LD_ADDR_VAR 0 8
32927: PUSH
32928: CALL_OW 45
32932: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32933: LD_VAR 0 8
32937: PPUSH
32938: LD_INT 0
32940: PPUSH
32941: LD_INT 5
32943: PPUSH
32944: CALL_OW 12
32948: PPUSH
32949: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32953: LD_VAR 0 8
32957: PPUSH
32958: LD_VAR 0 5
32962: PPUSH
32963: LD_VAR 0 6
32967: PPUSH
32968: LD_INT 1
32970: PPUSH
32971: CALL_OW 48
// end ;
32975: LD_VAR 0 7
32979: RET
// export hInvincible ; every 1 do
32980: GO 32982
32982: DISABLE
// hInvincible := [ ] ;
32983: LD_ADDR_EXP 119
32987: PUSH
32988: EMPTY
32989: ST_TO_ADDR
32990: END
// every 10 do var i ;
32991: GO 32993
32993: DISABLE
32994: LD_INT 0
32996: PPUSH
// begin enable ;
32997: ENABLE
// if not hInvincible then
32998: LD_EXP 119
33002: NOT
33003: IFFALSE 33007
// exit ;
33005: GO 33051
// for i in hInvincible do
33007: LD_ADDR_VAR 0 1
33011: PUSH
33012: LD_EXP 119
33016: PUSH
33017: FOR_IN
33018: IFFALSE 33049
// if GetLives ( i ) < 1000 then
33020: LD_VAR 0 1
33024: PPUSH
33025: CALL_OW 256
33029: PUSH
33030: LD_INT 1000
33032: LESS
33033: IFFALSE 33047
// SetLives ( i , 1000 ) ;
33035: LD_VAR 0 1
33039: PPUSH
33040: LD_INT 1000
33042: PPUSH
33043: CALL_OW 234
33047: GO 33017
33049: POP
33050: POP
// end ;
33051: PPOPN 1
33053: END
// export function hHackInvincible ; var i ; begin
33054: LD_INT 0
33056: PPUSH
33057: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33058: LD_ADDR_VAR 0 2
33062: PUSH
33063: LD_INT 2
33065: PUSH
33066: LD_INT 21
33068: PUSH
33069: LD_INT 1
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 21
33078: PUSH
33079: LD_INT 2
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: LIST
33090: PPUSH
33091: CALL_OW 69
33095: PUSH
33096: FOR_IN
33097: IFFALSE 33158
// if IsSelected ( i ) then
33099: LD_VAR 0 2
33103: PPUSH
33104: CALL_OW 306
33108: IFFALSE 33156
// begin if i in hInvincible then
33110: LD_VAR 0 2
33114: PUSH
33115: LD_EXP 119
33119: IN
33120: IFFALSE 33140
// hInvincible := hInvincible diff i else
33122: LD_ADDR_EXP 119
33126: PUSH
33127: LD_EXP 119
33131: PUSH
33132: LD_VAR 0 2
33136: DIFF
33137: ST_TO_ADDR
33138: GO 33156
// hInvincible := hInvincible union i ;
33140: LD_ADDR_EXP 119
33144: PUSH
33145: LD_EXP 119
33149: PUSH
33150: LD_VAR 0 2
33154: UNION
33155: ST_TO_ADDR
// end ;
33156: GO 33096
33158: POP
33159: POP
// end ;
33160: LD_VAR 0 1
33164: RET
// export function hHackInvisible ; var i , j ; begin
33165: LD_INT 0
33167: PPUSH
33168: PPUSH
33169: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33170: LD_ADDR_VAR 0 2
33174: PUSH
33175: LD_INT 21
33177: PUSH
33178: LD_INT 1
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PPUSH
33185: CALL_OW 69
33189: PUSH
33190: FOR_IN
33191: IFFALSE 33215
// if IsSelected ( i ) then
33193: LD_VAR 0 2
33197: PPUSH
33198: CALL_OW 306
33202: IFFALSE 33213
// ComForceInvisible ( i ) ;
33204: LD_VAR 0 2
33208: PPUSH
33209: CALL_OW 496
33213: GO 33190
33215: POP
33216: POP
// end ;
33217: LD_VAR 0 1
33221: RET
// export function hHackChangeYourSide ; begin
33222: LD_INT 0
33224: PPUSH
// if your_side = 8 then
33225: LD_OWVAR 2
33229: PUSH
33230: LD_INT 8
33232: EQUAL
33233: IFFALSE 33245
// your_side := 0 else
33235: LD_ADDR_OWVAR 2
33239: PUSH
33240: LD_INT 0
33242: ST_TO_ADDR
33243: GO 33259
// your_side := your_side + 1 ;
33245: LD_ADDR_OWVAR 2
33249: PUSH
33250: LD_OWVAR 2
33254: PUSH
33255: LD_INT 1
33257: PLUS
33258: ST_TO_ADDR
// end ;
33259: LD_VAR 0 1
33263: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33264: LD_INT 0
33266: PPUSH
33267: PPUSH
33268: PPUSH
// for i in all_units do
33269: LD_ADDR_VAR 0 2
33273: PUSH
33274: LD_OWVAR 3
33278: PUSH
33279: FOR_IN
33280: IFFALSE 33358
// if IsSelected ( i ) then
33282: LD_VAR 0 2
33286: PPUSH
33287: CALL_OW 306
33291: IFFALSE 33356
// begin j := GetSide ( i ) ;
33293: LD_ADDR_VAR 0 3
33297: PUSH
33298: LD_VAR 0 2
33302: PPUSH
33303: CALL_OW 255
33307: ST_TO_ADDR
// if j = 8 then
33308: LD_VAR 0 3
33312: PUSH
33313: LD_INT 8
33315: EQUAL
33316: IFFALSE 33328
// j := 0 else
33318: LD_ADDR_VAR 0 3
33322: PUSH
33323: LD_INT 0
33325: ST_TO_ADDR
33326: GO 33342
// j := j + 1 ;
33328: LD_ADDR_VAR 0 3
33332: PUSH
33333: LD_VAR 0 3
33337: PUSH
33338: LD_INT 1
33340: PLUS
33341: ST_TO_ADDR
// SetSide ( i , j ) ;
33342: LD_VAR 0 2
33346: PPUSH
33347: LD_VAR 0 3
33351: PPUSH
33352: CALL_OW 235
// end ;
33356: GO 33279
33358: POP
33359: POP
// end ;
33360: LD_VAR 0 1
33364: RET
// export function hHackFog ; begin
33365: LD_INT 0
33367: PPUSH
// FogOff ( true ) ;
33368: LD_INT 1
33370: PPUSH
33371: CALL_OW 344
// end ;
33375: LD_VAR 0 1
33379: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33380: LD_INT 0
33382: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33383: LD_VAR 0 1
33387: PPUSH
33388: LD_VAR 0 2
33392: PPUSH
33393: LD_VAR 0 3
33397: PPUSH
33398: LD_INT 1
33400: PPUSH
33401: LD_INT 1
33403: PPUSH
33404: CALL_OW 483
// CenterOnXY ( x , y ) ;
33408: LD_VAR 0 2
33412: PPUSH
33413: LD_VAR 0 3
33417: PPUSH
33418: CALL_OW 84
// end ;
33422: LD_VAR 0 4
33426: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33427: LD_INT 0
33429: PPUSH
33430: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33431: LD_VAR 0 1
33435: NOT
33436: PUSH
33437: LD_VAR 0 2
33441: PPUSH
33442: LD_VAR 0 3
33446: PPUSH
33447: CALL_OW 488
33451: NOT
33452: OR
33453: PUSH
33454: LD_VAR 0 1
33458: PPUSH
33459: CALL_OW 266
33463: PUSH
33464: LD_INT 3
33466: NONEQUAL
33467: PUSH
33468: LD_VAR 0 1
33472: PPUSH
33473: CALL_OW 247
33477: PUSH
33478: LD_INT 1
33480: EQUAL
33481: NOT
33482: AND
33483: OR
33484: IFFALSE 33488
// exit ;
33486: GO 33637
// if GetType ( factory ) = unit_human then
33488: LD_VAR 0 1
33492: PPUSH
33493: CALL_OW 247
33497: PUSH
33498: LD_INT 1
33500: EQUAL
33501: IFFALSE 33518
// factory := IsInUnit ( factory ) ;
33503: LD_ADDR_VAR 0 1
33507: PUSH
33508: LD_VAR 0 1
33512: PPUSH
33513: CALL_OW 310
33517: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33518: LD_VAR 0 1
33522: PPUSH
33523: CALL_OW 266
33527: PUSH
33528: LD_INT 3
33530: NONEQUAL
33531: IFFALSE 33535
// exit ;
33533: GO 33637
// if HexInfo ( x , y ) = factory then
33535: LD_VAR 0 2
33539: PPUSH
33540: LD_VAR 0 3
33544: PPUSH
33545: CALL_OW 428
33549: PUSH
33550: LD_VAR 0 1
33554: EQUAL
33555: IFFALSE 33582
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33557: LD_ADDR_EXP 120
33561: PUSH
33562: LD_EXP 120
33566: PPUSH
33567: LD_VAR 0 1
33571: PPUSH
33572: LD_INT 0
33574: PPUSH
33575: CALL_OW 1
33579: ST_TO_ADDR
33580: GO 33633
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33582: LD_ADDR_EXP 120
33586: PUSH
33587: LD_EXP 120
33591: PPUSH
33592: LD_VAR 0 1
33596: PPUSH
33597: LD_VAR 0 1
33601: PPUSH
33602: CALL_OW 255
33606: PUSH
33607: LD_VAR 0 1
33611: PUSH
33612: LD_VAR 0 2
33616: PUSH
33617: LD_VAR 0 3
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: PPUSH
33628: CALL_OW 1
33632: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33633: CALL 33642 0 0
// end ;
33637: LD_VAR 0 4
33641: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33642: LD_INT 0
33644: PPUSH
33645: PPUSH
33646: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33647: LD_STRING resetFactoryWaypoint();
33649: PPUSH
33650: CALL_OW 559
// if factoryWaypoints then
33654: LD_EXP 120
33658: IFFALSE 33784
// begin list := PrepareArray ( factoryWaypoints ) ;
33660: LD_ADDR_VAR 0 3
33664: PUSH
33665: LD_EXP 120
33669: PPUSH
33670: CALL 80234 0 1
33674: ST_TO_ADDR
// for i := 1 to list do
33675: LD_ADDR_VAR 0 2
33679: PUSH
33680: DOUBLE
33681: LD_INT 1
33683: DEC
33684: ST_TO_ADDR
33685: LD_VAR 0 3
33689: PUSH
33690: FOR_TO
33691: IFFALSE 33782
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33693: LD_STRING setFactoryWaypointXY(
33695: PUSH
33696: LD_VAR 0 3
33700: PUSH
33701: LD_VAR 0 2
33705: ARRAY
33706: PUSH
33707: LD_INT 1
33709: ARRAY
33710: STR
33711: PUSH
33712: LD_STRING ,
33714: STR
33715: PUSH
33716: LD_VAR 0 3
33720: PUSH
33721: LD_VAR 0 2
33725: ARRAY
33726: PUSH
33727: LD_INT 2
33729: ARRAY
33730: STR
33731: PUSH
33732: LD_STRING ,
33734: STR
33735: PUSH
33736: LD_VAR 0 3
33740: PUSH
33741: LD_VAR 0 2
33745: ARRAY
33746: PUSH
33747: LD_INT 3
33749: ARRAY
33750: STR
33751: PUSH
33752: LD_STRING ,
33754: STR
33755: PUSH
33756: LD_VAR 0 3
33760: PUSH
33761: LD_VAR 0 2
33765: ARRAY
33766: PUSH
33767: LD_INT 4
33769: ARRAY
33770: STR
33771: PUSH
33772: LD_STRING )
33774: STR
33775: PPUSH
33776: CALL_OW 559
33780: GO 33690
33782: POP
33783: POP
// end ; end ;
33784: LD_VAR 0 1
33788: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33789: LD_INT 0
33791: PPUSH
// if HexInfo ( x , y ) = warehouse then
33792: LD_VAR 0 2
33796: PPUSH
33797: LD_VAR 0 3
33801: PPUSH
33802: CALL_OW 428
33806: PUSH
33807: LD_VAR 0 1
33811: EQUAL
33812: IFFALSE 33839
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33814: LD_ADDR_EXP 121
33818: PUSH
33819: LD_EXP 121
33823: PPUSH
33824: LD_VAR 0 1
33828: PPUSH
33829: LD_INT 0
33831: PPUSH
33832: CALL_OW 1
33836: ST_TO_ADDR
33837: GO 33890
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33839: LD_ADDR_EXP 121
33843: PUSH
33844: LD_EXP 121
33848: PPUSH
33849: LD_VAR 0 1
33853: PPUSH
33854: LD_VAR 0 1
33858: PPUSH
33859: CALL_OW 255
33863: PUSH
33864: LD_VAR 0 1
33868: PUSH
33869: LD_VAR 0 2
33873: PUSH
33874: LD_VAR 0 3
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: PPUSH
33885: CALL_OW 1
33889: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33890: CALL 33899 0 0
// end ;
33894: LD_VAR 0 4
33898: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33899: LD_INT 0
33901: PPUSH
33902: PPUSH
33903: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33904: LD_STRING resetWarehouseGatheringPoints();
33906: PPUSH
33907: CALL_OW 559
// if warehouseGatheringPoints then
33911: LD_EXP 121
33915: IFFALSE 34041
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33917: LD_ADDR_VAR 0 3
33921: PUSH
33922: LD_EXP 121
33926: PPUSH
33927: CALL 80234 0 1
33931: ST_TO_ADDR
// for i := 1 to list do
33932: LD_ADDR_VAR 0 2
33936: PUSH
33937: DOUBLE
33938: LD_INT 1
33940: DEC
33941: ST_TO_ADDR
33942: LD_VAR 0 3
33946: PUSH
33947: FOR_TO
33948: IFFALSE 34039
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33950: LD_STRING setWarehouseGatheringPointXY(
33952: PUSH
33953: LD_VAR 0 3
33957: PUSH
33958: LD_VAR 0 2
33962: ARRAY
33963: PUSH
33964: LD_INT 1
33966: ARRAY
33967: STR
33968: PUSH
33969: LD_STRING ,
33971: STR
33972: PUSH
33973: LD_VAR 0 3
33977: PUSH
33978: LD_VAR 0 2
33982: ARRAY
33983: PUSH
33984: LD_INT 2
33986: ARRAY
33987: STR
33988: PUSH
33989: LD_STRING ,
33991: STR
33992: PUSH
33993: LD_VAR 0 3
33997: PUSH
33998: LD_VAR 0 2
34002: ARRAY
34003: PUSH
34004: LD_INT 3
34006: ARRAY
34007: STR
34008: PUSH
34009: LD_STRING ,
34011: STR
34012: PUSH
34013: LD_VAR 0 3
34017: PUSH
34018: LD_VAR 0 2
34022: ARRAY
34023: PUSH
34024: LD_INT 4
34026: ARRAY
34027: STR
34028: PUSH
34029: LD_STRING )
34031: STR
34032: PPUSH
34033: CALL_OW 559
34037: GO 33947
34039: POP
34040: POP
// end ; end ;
34041: LD_VAR 0 1
34045: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34046: LD_EXP 121
34050: IFFALSE 34735
34052: GO 34054
34054: DISABLE
34055: LD_INT 0
34057: PPUSH
34058: PPUSH
34059: PPUSH
34060: PPUSH
34061: PPUSH
34062: PPUSH
34063: PPUSH
34064: PPUSH
34065: PPUSH
// begin enable ;
34066: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34067: LD_ADDR_VAR 0 3
34071: PUSH
34072: LD_EXP 121
34076: PPUSH
34077: CALL 80234 0 1
34081: ST_TO_ADDR
// if not list then
34082: LD_VAR 0 3
34086: NOT
34087: IFFALSE 34091
// exit ;
34089: GO 34735
// for i := 1 to list do
34091: LD_ADDR_VAR 0 1
34095: PUSH
34096: DOUBLE
34097: LD_INT 1
34099: DEC
34100: ST_TO_ADDR
34101: LD_VAR 0 3
34105: PUSH
34106: FOR_TO
34107: IFFALSE 34733
// begin depot := list [ i ] [ 2 ] ;
34109: LD_ADDR_VAR 0 8
34113: PUSH
34114: LD_VAR 0 3
34118: PUSH
34119: LD_VAR 0 1
34123: ARRAY
34124: PUSH
34125: LD_INT 2
34127: ARRAY
34128: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34129: LD_ADDR_VAR 0 5
34133: PUSH
34134: LD_VAR 0 3
34138: PUSH
34139: LD_VAR 0 1
34143: ARRAY
34144: PUSH
34145: LD_INT 1
34147: ARRAY
34148: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34149: LD_VAR 0 8
34153: PPUSH
34154: CALL_OW 301
34158: PUSH
34159: LD_VAR 0 5
34163: PUSH
34164: LD_VAR 0 8
34168: PPUSH
34169: CALL_OW 255
34173: NONEQUAL
34174: OR
34175: IFFALSE 34204
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34177: LD_ADDR_EXP 121
34181: PUSH
34182: LD_EXP 121
34186: PPUSH
34187: LD_VAR 0 8
34191: PPUSH
34192: LD_INT 0
34194: PPUSH
34195: CALL_OW 1
34199: ST_TO_ADDR
// exit ;
34200: POP
34201: POP
34202: GO 34735
// end ; x := list [ i ] [ 3 ] ;
34204: LD_ADDR_VAR 0 6
34208: PUSH
34209: LD_VAR 0 3
34213: PUSH
34214: LD_VAR 0 1
34218: ARRAY
34219: PUSH
34220: LD_INT 3
34222: ARRAY
34223: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34224: LD_ADDR_VAR 0 7
34228: PUSH
34229: LD_VAR 0 3
34233: PUSH
34234: LD_VAR 0 1
34238: ARRAY
34239: PUSH
34240: LD_INT 4
34242: ARRAY
34243: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34244: LD_ADDR_VAR 0 9
34248: PUSH
34249: LD_VAR 0 6
34253: PPUSH
34254: LD_VAR 0 7
34258: PPUSH
34259: LD_INT 16
34261: PPUSH
34262: CALL 78822 0 3
34266: ST_TO_ADDR
// if not cratesNearbyPoint then
34267: LD_VAR 0 9
34271: NOT
34272: IFFALSE 34278
// exit ;
34274: POP
34275: POP
34276: GO 34735
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34278: LD_ADDR_VAR 0 4
34282: PUSH
34283: LD_INT 22
34285: PUSH
34286: LD_VAR 0 5
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 3
34297: PUSH
34298: LD_INT 60
34300: PUSH
34301: EMPTY
34302: LIST
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 91
34310: PUSH
34311: LD_VAR 0 8
34315: PUSH
34316: LD_INT 6
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 2
34326: PUSH
34327: LD_INT 25
34329: PUSH
34330: LD_INT 2
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 25
34339: PUSH
34340: LD_INT 16
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: LIST
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: PPUSH
34358: CALL_OW 69
34362: PUSH
34363: LD_VAR 0 8
34367: PPUSH
34368: CALL_OW 313
34372: PPUSH
34373: LD_INT 3
34375: PUSH
34376: LD_INT 60
34378: PUSH
34379: EMPTY
34380: LIST
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 2
34388: PUSH
34389: LD_INT 25
34391: PUSH
34392: LD_INT 2
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 25
34401: PUSH
34402: LD_INT 16
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: LIST
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PPUSH
34418: CALL_OW 72
34422: UNION
34423: ST_TO_ADDR
// if tmp then
34424: LD_VAR 0 4
34428: IFFALSE 34508
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34430: LD_ADDR_VAR 0 4
34434: PUSH
34435: LD_VAR 0 4
34439: PPUSH
34440: LD_INT 3
34442: PPUSH
34443: CALL 76791 0 2
34447: ST_TO_ADDR
// for j in tmp do
34448: LD_ADDR_VAR 0 2
34452: PUSH
34453: LD_VAR 0 4
34457: PUSH
34458: FOR_IN
34459: IFFALSE 34502
// begin if IsInUnit ( j ) then
34461: LD_VAR 0 2
34465: PPUSH
34466: CALL_OW 310
34470: IFFALSE 34481
// ComExit ( j ) ;
34472: LD_VAR 0 2
34476: PPUSH
34477: CALL 76874 0 1
// AddComCollect ( j , x , y ) ;
34481: LD_VAR 0 2
34485: PPUSH
34486: LD_VAR 0 6
34490: PPUSH
34491: LD_VAR 0 7
34495: PPUSH
34496: CALL_OW 177
// end ;
34500: GO 34458
34502: POP
34503: POP
// exit ;
34504: POP
34505: POP
34506: GO 34735
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34508: LD_ADDR_VAR 0 4
34512: PUSH
34513: LD_INT 22
34515: PUSH
34516: LD_VAR 0 5
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 91
34527: PUSH
34528: LD_VAR 0 8
34532: PUSH
34533: LD_INT 8
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 2
34543: PUSH
34544: LD_INT 34
34546: PUSH
34547: LD_INT 12
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 34
34556: PUSH
34557: LD_INT 51
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 34
34566: PUSH
34567: LD_INT 32
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 34
34576: PUSH
34577: LD_INT 89
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: LIST
34595: PPUSH
34596: CALL_OW 69
34600: ST_TO_ADDR
// if tmp then
34601: LD_VAR 0 4
34605: IFFALSE 34731
// begin for j in tmp do
34607: LD_ADDR_VAR 0 2
34611: PUSH
34612: LD_VAR 0 4
34616: PUSH
34617: FOR_IN
34618: IFFALSE 34729
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34620: LD_VAR 0 2
34624: PPUSH
34625: CALL_OW 262
34629: PUSH
34630: LD_INT 3
34632: EQUAL
34633: PUSH
34634: LD_VAR 0 2
34638: PPUSH
34639: CALL_OW 261
34643: PUSH
34644: LD_INT 20
34646: GREATER
34647: OR
34648: PUSH
34649: LD_VAR 0 2
34653: PPUSH
34654: CALL_OW 314
34658: NOT
34659: AND
34660: PUSH
34661: LD_VAR 0 2
34665: PPUSH
34666: CALL_OW 263
34670: PUSH
34671: LD_INT 1
34673: NONEQUAL
34674: PUSH
34675: LD_VAR 0 2
34679: PPUSH
34680: CALL_OW 311
34684: OR
34685: AND
34686: IFFALSE 34727
// begin ComCollect ( j , x , y ) ;
34688: LD_VAR 0 2
34692: PPUSH
34693: LD_VAR 0 6
34697: PPUSH
34698: LD_VAR 0 7
34702: PPUSH
34703: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34707: LD_VAR 0 2
34711: PPUSH
34712: LD_VAR 0 8
34716: PPUSH
34717: CALL_OW 172
// exit ;
34721: POP
34722: POP
34723: POP
34724: POP
34725: GO 34735
// end ;
34727: GO 34617
34729: POP
34730: POP
// end ; end ;
34731: GO 34106
34733: POP
34734: POP
// end ; end_of_file
34735: PPOPN 9
34737: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34738: LD_INT 0
34740: PPUSH
34741: PPUSH
34742: PPUSH
34743: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34744: LD_VAR 0 1
34748: PPUSH
34749: CALL_OW 264
34753: PUSH
34754: LD_INT 91
34756: EQUAL
34757: IFFALSE 34829
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34759: LD_INT 68
34761: PPUSH
34762: LD_VAR 0 1
34766: PPUSH
34767: CALL_OW 255
34771: PPUSH
34772: CALL_OW 321
34776: PUSH
34777: LD_INT 2
34779: EQUAL
34780: IFFALSE 34792
// eff := 70 else
34782: LD_ADDR_VAR 0 4
34786: PUSH
34787: LD_INT 70
34789: ST_TO_ADDR
34790: GO 34800
// eff := 30 ;
34792: LD_ADDR_VAR 0 4
34796: PUSH
34797: LD_INT 30
34799: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34800: LD_VAR 0 1
34804: PPUSH
34805: CALL_OW 250
34809: PPUSH
34810: LD_VAR 0 1
34814: PPUSH
34815: CALL_OW 251
34819: PPUSH
34820: LD_VAR 0 4
34824: PPUSH
34825: CALL_OW 495
// end ; end ;
34829: LD_VAR 0 2
34833: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34834: LD_INT 0
34836: PPUSH
// end ;
34837: LD_VAR 0 4
34841: RET
// export function SOS_Command ( cmd ) ; begin
34842: LD_INT 0
34844: PPUSH
// end ;
34845: LD_VAR 0 2
34849: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34850: LD_INT 0
34852: PPUSH
// end ;
34853: LD_VAR 0 6
34857: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34858: LD_INT 0
34860: PPUSH
34861: PPUSH
// if not vehicle or not factory then
34862: LD_VAR 0 1
34866: NOT
34867: PUSH
34868: LD_VAR 0 2
34872: NOT
34873: OR
34874: IFFALSE 34878
// exit ;
34876: GO 35109
// if factoryWaypoints >= factory then
34878: LD_EXP 120
34882: PUSH
34883: LD_VAR 0 2
34887: GREATEREQUAL
34888: IFFALSE 35109
// if factoryWaypoints [ factory ] then
34890: LD_EXP 120
34894: PUSH
34895: LD_VAR 0 2
34899: ARRAY
34900: IFFALSE 35109
// begin if GetControl ( vehicle ) = control_manual then
34902: LD_VAR 0 1
34906: PPUSH
34907: CALL_OW 263
34911: PUSH
34912: LD_INT 1
34914: EQUAL
34915: IFFALSE 34996
// begin driver := IsDrivenBy ( vehicle ) ;
34917: LD_ADDR_VAR 0 4
34921: PUSH
34922: LD_VAR 0 1
34926: PPUSH
34927: CALL_OW 311
34931: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34932: LD_VAR 0 4
34936: PPUSH
34937: LD_EXP 120
34941: PUSH
34942: LD_VAR 0 2
34946: ARRAY
34947: PUSH
34948: LD_INT 3
34950: ARRAY
34951: PPUSH
34952: LD_EXP 120
34956: PUSH
34957: LD_VAR 0 2
34961: ARRAY
34962: PUSH
34963: LD_INT 4
34965: ARRAY
34966: PPUSH
34967: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34971: LD_VAR 0 4
34975: PPUSH
34976: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34980: LD_VAR 0 4
34984: PPUSH
34985: LD_VAR 0 2
34989: PPUSH
34990: CALL_OW 180
// end else
34994: GO 35109
// if GetControl ( vehicle ) = control_remote then
34996: LD_VAR 0 1
35000: PPUSH
35001: CALL_OW 263
35005: PUSH
35006: LD_INT 2
35008: EQUAL
35009: IFFALSE 35070
// begin wait ( 0 0$2 ) ;
35011: LD_INT 70
35013: PPUSH
35014: CALL_OW 67
// if Connect ( vehicle ) then
35018: LD_VAR 0 1
35022: PPUSH
35023: CALL 47133 0 1
35027: IFFALSE 35068
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35029: LD_VAR 0 1
35033: PPUSH
35034: LD_EXP 120
35038: PUSH
35039: LD_VAR 0 2
35043: ARRAY
35044: PUSH
35045: LD_INT 3
35047: ARRAY
35048: PPUSH
35049: LD_EXP 120
35053: PUSH
35054: LD_VAR 0 2
35058: ARRAY
35059: PUSH
35060: LD_INT 4
35062: ARRAY
35063: PPUSH
35064: CALL_OW 171
// end else
35068: GO 35109
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35070: LD_VAR 0 1
35074: PPUSH
35075: LD_EXP 120
35079: PUSH
35080: LD_VAR 0 2
35084: ARRAY
35085: PUSH
35086: LD_INT 3
35088: ARRAY
35089: PPUSH
35090: LD_EXP 120
35094: PUSH
35095: LD_VAR 0 2
35099: ARRAY
35100: PUSH
35101: LD_INT 4
35103: ARRAY
35104: PPUSH
35105: CALL_OW 171
// end ; end ;
35109: LD_VAR 0 3
35113: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35114: LD_INT 0
35116: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35117: LD_VAR 0 1
35121: PUSH
35122: LD_INT 250
35124: EQUAL
35125: PUSH
35126: LD_VAR 0 2
35130: PPUSH
35131: CALL_OW 264
35135: PUSH
35136: LD_INT 81
35138: EQUAL
35139: AND
35140: IFFALSE 35161
// MinerPlaceMine ( unit , x , y ) ;
35142: LD_VAR 0 2
35146: PPUSH
35147: LD_VAR 0 4
35151: PPUSH
35152: LD_VAR 0 5
35156: PPUSH
35157: CALL 37546 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35161: LD_VAR 0 1
35165: PUSH
35166: LD_INT 251
35168: EQUAL
35169: PUSH
35170: LD_VAR 0 2
35174: PPUSH
35175: CALL_OW 264
35179: PUSH
35180: LD_INT 81
35182: EQUAL
35183: AND
35184: IFFALSE 35205
// MinerDetonateMine ( unit , x , y ) ;
35186: LD_VAR 0 2
35190: PPUSH
35191: LD_VAR 0 4
35195: PPUSH
35196: LD_VAR 0 5
35200: PPUSH
35201: CALL 37821 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35205: LD_VAR 0 1
35209: PUSH
35210: LD_INT 252
35212: EQUAL
35213: PUSH
35214: LD_VAR 0 2
35218: PPUSH
35219: CALL_OW 264
35223: PUSH
35224: LD_INT 81
35226: EQUAL
35227: AND
35228: IFFALSE 35249
// MinerCreateMinefield ( unit , x , y ) ;
35230: LD_VAR 0 2
35234: PPUSH
35235: LD_VAR 0 4
35239: PPUSH
35240: LD_VAR 0 5
35244: PPUSH
35245: CALL 38238 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35249: LD_VAR 0 1
35253: PUSH
35254: LD_INT 253
35256: EQUAL
35257: PUSH
35258: LD_VAR 0 2
35262: PPUSH
35263: CALL_OW 257
35267: PUSH
35268: LD_INT 5
35270: EQUAL
35271: AND
35272: IFFALSE 35293
// ComBinocular ( unit , x , y ) ;
35274: LD_VAR 0 2
35278: PPUSH
35279: LD_VAR 0 4
35283: PPUSH
35284: LD_VAR 0 5
35288: PPUSH
35289: CALL 38607 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35293: LD_VAR 0 1
35297: PUSH
35298: LD_INT 254
35300: EQUAL
35301: PUSH
35302: LD_VAR 0 2
35306: PPUSH
35307: CALL_OW 264
35311: PUSH
35312: LD_INT 99
35314: EQUAL
35315: AND
35316: PUSH
35317: LD_VAR 0 3
35321: PPUSH
35322: CALL_OW 263
35326: PUSH
35327: LD_INT 3
35329: EQUAL
35330: AND
35331: IFFALSE 35347
// HackDestroyVehicle ( unit , selectedUnit ) ;
35333: LD_VAR 0 2
35337: PPUSH
35338: LD_VAR 0 3
35342: PPUSH
35343: CALL 36910 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35347: LD_VAR 0 1
35351: PUSH
35352: LD_INT 255
35354: EQUAL
35355: PUSH
35356: LD_VAR 0 2
35360: PPUSH
35361: CALL_OW 264
35365: PUSH
35366: LD_INT 14
35368: PUSH
35369: LD_INT 53
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: IN
35376: AND
35377: PUSH
35378: LD_VAR 0 4
35382: PPUSH
35383: LD_VAR 0 5
35387: PPUSH
35388: CALL_OW 488
35392: AND
35393: IFFALSE 35417
// CutTreeXYR ( unit , x , y , 12 ) ;
35395: LD_VAR 0 2
35399: PPUSH
35400: LD_VAR 0 4
35404: PPUSH
35405: LD_VAR 0 5
35409: PPUSH
35410: LD_INT 12
35412: PPUSH
35413: CALL 35480 0 4
// if cmd = 256 then
35417: LD_VAR 0 1
35421: PUSH
35422: LD_INT 256
35424: EQUAL
35425: IFFALSE 35446
// SetFactoryWaypoint ( unit , x , y ) ;
35427: LD_VAR 0 2
35431: PPUSH
35432: LD_VAR 0 4
35436: PPUSH
35437: LD_VAR 0 5
35441: PPUSH
35442: CALL 33427 0 3
// if cmd = 257 then
35446: LD_VAR 0 1
35450: PUSH
35451: LD_INT 257
35453: EQUAL
35454: IFFALSE 35475
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35456: LD_VAR 0 2
35460: PPUSH
35461: LD_VAR 0 4
35465: PPUSH
35466: LD_VAR 0 5
35470: PPUSH
35471: CALL 33789 0 3
// end ;
35475: LD_VAR 0 6
35479: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35480: LD_INT 0
35482: PPUSH
35483: PPUSH
35484: PPUSH
35485: PPUSH
35486: PPUSH
35487: PPUSH
35488: PPUSH
35489: PPUSH
35490: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35491: LD_VAR 0 1
35495: NOT
35496: PUSH
35497: LD_VAR 0 2
35501: PPUSH
35502: LD_VAR 0 3
35506: PPUSH
35507: CALL_OW 488
35511: NOT
35512: OR
35513: PUSH
35514: LD_VAR 0 4
35518: NOT
35519: OR
35520: IFFALSE 35524
// exit ;
35522: GO 35864
// list := [ ] ;
35524: LD_ADDR_VAR 0 13
35528: PUSH
35529: EMPTY
35530: ST_TO_ADDR
// if x - r < 0 then
35531: LD_VAR 0 2
35535: PUSH
35536: LD_VAR 0 4
35540: MINUS
35541: PUSH
35542: LD_INT 0
35544: LESS
35545: IFFALSE 35557
// min_x := 0 else
35547: LD_ADDR_VAR 0 7
35551: PUSH
35552: LD_INT 0
35554: ST_TO_ADDR
35555: GO 35573
// min_x := x - r ;
35557: LD_ADDR_VAR 0 7
35561: PUSH
35562: LD_VAR 0 2
35566: PUSH
35567: LD_VAR 0 4
35571: MINUS
35572: ST_TO_ADDR
// if y - r < 0 then
35573: LD_VAR 0 3
35577: PUSH
35578: LD_VAR 0 4
35582: MINUS
35583: PUSH
35584: LD_INT 0
35586: LESS
35587: IFFALSE 35599
// min_y := 0 else
35589: LD_ADDR_VAR 0 8
35593: PUSH
35594: LD_INT 0
35596: ST_TO_ADDR
35597: GO 35615
// min_y := y - r ;
35599: LD_ADDR_VAR 0 8
35603: PUSH
35604: LD_VAR 0 3
35608: PUSH
35609: LD_VAR 0 4
35613: MINUS
35614: ST_TO_ADDR
// max_x := x + r ;
35615: LD_ADDR_VAR 0 9
35619: PUSH
35620: LD_VAR 0 2
35624: PUSH
35625: LD_VAR 0 4
35629: PLUS
35630: ST_TO_ADDR
// max_y := y + r ;
35631: LD_ADDR_VAR 0 10
35635: PUSH
35636: LD_VAR 0 3
35640: PUSH
35641: LD_VAR 0 4
35645: PLUS
35646: ST_TO_ADDR
// for _x = min_x to max_x do
35647: LD_ADDR_VAR 0 11
35651: PUSH
35652: DOUBLE
35653: LD_VAR 0 7
35657: DEC
35658: ST_TO_ADDR
35659: LD_VAR 0 9
35663: PUSH
35664: FOR_TO
35665: IFFALSE 35782
// for _y = min_y to max_y do
35667: LD_ADDR_VAR 0 12
35671: PUSH
35672: DOUBLE
35673: LD_VAR 0 8
35677: DEC
35678: ST_TO_ADDR
35679: LD_VAR 0 10
35683: PUSH
35684: FOR_TO
35685: IFFALSE 35778
// begin if not ValidHex ( _x , _y ) then
35687: LD_VAR 0 11
35691: PPUSH
35692: LD_VAR 0 12
35696: PPUSH
35697: CALL_OW 488
35701: NOT
35702: IFFALSE 35706
// continue ;
35704: GO 35684
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35706: LD_VAR 0 11
35710: PPUSH
35711: LD_VAR 0 12
35715: PPUSH
35716: CALL_OW 351
35720: PUSH
35721: LD_VAR 0 11
35725: PPUSH
35726: LD_VAR 0 12
35730: PPUSH
35731: CALL_OW 554
35735: AND
35736: IFFALSE 35776
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35738: LD_ADDR_VAR 0 13
35742: PUSH
35743: LD_VAR 0 13
35747: PPUSH
35748: LD_VAR 0 13
35752: PUSH
35753: LD_INT 1
35755: PLUS
35756: PPUSH
35757: LD_VAR 0 11
35761: PUSH
35762: LD_VAR 0 12
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PPUSH
35771: CALL_OW 2
35775: ST_TO_ADDR
// end ;
35776: GO 35684
35778: POP
35779: POP
35780: GO 35664
35782: POP
35783: POP
// if not list then
35784: LD_VAR 0 13
35788: NOT
35789: IFFALSE 35793
// exit ;
35791: GO 35864
// for i in list do
35793: LD_ADDR_VAR 0 6
35797: PUSH
35798: LD_VAR 0 13
35802: PUSH
35803: FOR_IN
35804: IFFALSE 35862
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35806: LD_VAR 0 1
35810: PPUSH
35811: LD_STRING M
35813: PUSH
35814: LD_VAR 0 6
35818: PUSH
35819: LD_INT 1
35821: ARRAY
35822: PUSH
35823: LD_VAR 0 6
35827: PUSH
35828: LD_INT 2
35830: ARRAY
35831: PUSH
35832: LD_INT 0
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: PUSH
35853: EMPTY
35854: LIST
35855: PPUSH
35856: CALL_OW 447
35860: GO 35803
35862: POP
35863: POP
// end ;
35864: LD_VAR 0 5
35868: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35869: LD_EXP 123
35873: NOT
35874: IFFALSE 35924
35876: GO 35878
35878: DISABLE
// begin initHack := true ;
35879: LD_ADDR_EXP 123
35883: PUSH
35884: LD_INT 1
35886: ST_TO_ADDR
// hackTanks := [ ] ;
35887: LD_ADDR_EXP 124
35891: PUSH
35892: EMPTY
35893: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35894: LD_ADDR_EXP 125
35898: PUSH
35899: EMPTY
35900: ST_TO_ADDR
// hackLimit := 3 ;
35901: LD_ADDR_EXP 126
35905: PUSH
35906: LD_INT 3
35908: ST_TO_ADDR
// hackDist := 12 ;
35909: LD_ADDR_EXP 127
35913: PUSH
35914: LD_INT 12
35916: ST_TO_ADDR
// hackCounter := [ ] ;
35917: LD_ADDR_EXP 128
35921: PUSH
35922: EMPTY
35923: ST_TO_ADDR
// end ;
35924: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35925: LD_EXP 123
35929: PUSH
35930: LD_INT 34
35932: PUSH
35933: LD_INT 99
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PPUSH
35940: CALL_OW 69
35944: AND
35945: IFFALSE 36198
35947: GO 35949
35949: DISABLE
35950: LD_INT 0
35952: PPUSH
35953: PPUSH
// begin enable ;
35954: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35955: LD_ADDR_VAR 0 1
35959: PUSH
35960: LD_INT 34
35962: PUSH
35963: LD_INT 99
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PPUSH
35970: CALL_OW 69
35974: PUSH
35975: FOR_IN
35976: IFFALSE 36196
// begin if not i in hackTanks then
35978: LD_VAR 0 1
35982: PUSH
35983: LD_EXP 124
35987: IN
35988: NOT
35989: IFFALSE 36072
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35991: LD_ADDR_EXP 124
35995: PUSH
35996: LD_EXP 124
36000: PPUSH
36001: LD_EXP 124
36005: PUSH
36006: LD_INT 1
36008: PLUS
36009: PPUSH
36010: LD_VAR 0 1
36014: PPUSH
36015: CALL_OW 1
36019: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36020: LD_ADDR_EXP 125
36024: PUSH
36025: LD_EXP 125
36029: PPUSH
36030: LD_EXP 125
36034: PUSH
36035: LD_INT 1
36037: PLUS
36038: PPUSH
36039: EMPTY
36040: PPUSH
36041: CALL_OW 1
36045: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36046: LD_ADDR_EXP 128
36050: PUSH
36051: LD_EXP 128
36055: PPUSH
36056: LD_EXP 128
36060: PUSH
36061: LD_INT 1
36063: PLUS
36064: PPUSH
36065: EMPTY
36066: PPUSH
36067: CALL_OW 1
36071: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36072: LD_VAR 0 1
36076: PPUSH
36077: CALL_OW 302
36081: NOT
36082: IFFALSE 36095
// begin HackUnlinkAll ( i ) ;
36084: LD_VAR 0 1
36088: PPUSH
36089: CALL 36201 0 1
// continue ;
36093: GO 35975
// end ; HackCheckCapturedStatus ( i ) ;
36095: LD_VAR 0 1
36099: PPUSH
36100: CALL 36644 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36104: LD_ADDR_VAR 0 2
36108: PUSH
36109: LD_INT 81
36111: PUSH
36112: LD_VAR 0 1
36116: PPUSH
36117: CALL_OW 255
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 33
36128: PUSH
36129: LD_INT 3
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 91
36138: PUSH
36139: LD_VAR 0 1
36143: PUSH
36144: LD_EXP 127
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 50
36156: PUSH
36157: EMPTY
36158: LIST
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: PPUSH
36166: CALL_OW 69
36170: ST_TO_ADDR
// if not tmp then
36171: LD_VAR 0 2
36175: NOT
36176: IFFALSE 36180
// continue ;
36178: GO 35975
// HackLink ( i , tmp ) ;
36180: LD_VAR 0 1
36184: PPUSH
36185: LD_VAR 0 2
36189: PPUSH
36190: CALL 36337 0 2
// end ;
36194: GO 35975
36196: POP
36197: POP
// end ;
36198: PPOPN 2
36200: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36201: LD_INT 0
36203: PPUSH
36204: PPUSH
36205: PPUSH
// if not hack in hackTanks then
36206: LD_VAR 0 1
36210: PUSH
36211: LD_EXP 124
36215: IN
36216: NOT
36217: IFFALSE 36221
// exit ;
36219: GO 36332
// index := GetElementIndex ( hackTanks , hack ) ;
36221: LD_ADDR_VAR 0 4
36225: PUSH
36226: LD_EXP 124
36230: PPUSH
36231: LD_VAR 0 1
36235: PPUSH
36236: CALL 43949 0 2
36240: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36241: LD_EXP 125
36245: PUSH
36246: LD_VAR 0 4
36250: ARRAY
36251: IFFALSE 36332
// begin for i in hackTanksCaptured [ index ] do
36253: LD_ADDR_VAR 0 3
36257: PUSH
36258: LD_EXP 125
36262: PUSH
36263: LD_VAR 0 4
36267: ARRAY
36268: PUSH
36269: FOR_IN
36270: IFFALSE 36296
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36272: LD_VAR 0 3
36276: PUSH
36277: LD_INT 1
36279: ARRAY
36280: PPUSH
36281: LD_VAR 0 3
36285: PUSH
36286: LD_INT 2
36288: ARRAY
36289: PPUSH
36290: CALL_OW 235
36294: GO 36269
36296: POP
36297: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36298: LD_ADDR_EXP 125
36302: PUSH
36303: LD_EXP 125
36307: PPUSH
36308: LD_VAR 0 4
36312: PPUSH
36313: EMPTY
36314: PPUSH
36315: CALL_OW 1
36319: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36320: LD_VAR 0 1
36324: PPUSH
36325: LD_INT 0
36327: PPUSH
36328: CALL_OW 505
// end ; end ;
36332: LD_VAR 0 2
36336: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36337: LD_INT 0
36339: PPUSH
36340: PPUSH
36341: PPUSH
// if not hack in hackTanks or not vehicles then
36342: LD_VAR 0 1
36346: PUSH
36347: LD_EXP 124
36351: IN
36352: NOT
36353: PUSH
36354: LD_VAR 0 2
36358: NOT
36359: OR
36360: IFFALSE 36364
// exit ;
36362: GO 36639
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36364: LD_ADDR_VAR 0 2
36368: PUSH
36369: LD_VAR 0 1
36373: PPUSH
36374: LD_VAR 0 2
36378: PPUSH
36379: LD_INT 1
36381: PPUSH
36382: LD_INT 1
36384: PPUSH
36385: CALL 44599 0 4
36389: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36390: LD_ADDR_VAR 0 5
36394: PUSH
36395: LD_EXP 124
36399: PPUSH
36400: LD_VAR 0 1
36404: PPUSH
36405: CALL 43949 0 2
36409: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36410: LD_EXP 125
36414: PUSH
36415: LD_VAR 0 5
36419: ARRAY
36420: PUSH
36421: LD_EXP 126
36425: LESS
36426: IFFALSE 36615
// begin for i := 1 to vehicles do
36428: LD_ADDR_VAR 0 4
36432: PUSH
36433: DOUBLE
36434: LD_INT 1
36436: DEC
36437: ST_TO_ADDR
36438: LD_VAR 0 2
36442: PUSH
36443: FOR_TO
36444: IFFALSE 36613
// begin if hackTanksCaptured [ index ] = hackLimit then
36446: LD_EXP 125
36450: PUSH
36451: LD_VAR 0 5
36455: ARRAY
36456: PUSH
36457: LD_EXP 126
36461: EQUAL
36462: IFFALSE 36466
// break ;
36464: GO 36613
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36466: LD_ADDR_EXP 128
36470: PUSH
36471: LD_EXP 128
36475: PPUSH
36476: LD_VAR 0 5
36480: PPUSH
36481: LD_EXP 128
36485: PUSH
36486: LD_VAR 0 5
36490: ARRAY
36491: PUSH
36492: LD_INT 1
36494: PLUS
36495: PPUSH
36496: CALL_OW 1
36500: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36501: LD_ADDR_EXP 125
36505: PUSH
36506: LD_EXP 125
36510: PPUSH
36511: LD_VAR 0 5
36515: PUSH
36516: LD_EXP 125
36520: PUSH
36521: LD_VAR 0 5
36525: ARRAY
36526: PUSH
36527: LD_INT 1
36529: PLUS
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PPUSH
36535: LD_VAR 0 2
36539: PUSH
36540: LD_VAR 0 4
36544: ARRAY
36545: PUSH
36546: LD_VAR 0 2
36550: PUSH
36551: LD_VAR 0 4
36555: ARRAY
36556: PPUSH
36557: CALL_OW 255
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PPUSH
36566: CALL 44164 0 3
36570: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36571: LD_VAR 0 2
36575: PUSH
36576: LD_VAR 0 4
36580: ARRAY
36581: PPUSH
36582: LD_VAR 0 1
36586: PPUSH
36587: CALL_OW 255
36591: PPUSH
36592: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36596: LD_VAR 0 2
36600: PUSH
36601: LD_VAR 0 4
36605: ARRAY
36606: PPUSH
36607: CALL_OW 141
// end ;
36611: GO 36443
36613: POP
36614: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36615: LD_VAR 0 1
36619: PPUSH
36620: LD_EXP 125
36624: PUSH
36625: LD_VAR 0 5
36629: ARRAY
36630: PUSH
36631: LD_INT 0
36633: PLUS
36634: PPUSH
36635: CALL_OW 505
// end ;
36639: LD_VAR 0 3
36643: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36644: LD_INT 0
36646: PPUSH
36647: PPUSH
36648: PPUSH
36649: PPUSH
// if not hack in hackTanks then
36650: LD_VAR 0 1
36654: PUSH
36655: LD_EXP 124
36659: IN
36660: NOT
36661: IFFALSE 36665
// exit ;
36663: GO 36905
// index := GetElementIndex ( hackTanks , hack ) ;
36665: LD_ADDR_VAR 0 4
36669: PUSH
36670: LD_EXP 124
36674: PPUSH
36675: LD_VAR 0 1
36679: PPUSH
36680: CALL 43949 0 2
36684: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36685: LD_ADDR_VAR 0 3
36689: PUSH
36690: DOUBLE
36691: LD_EXP 125
36695: PUSH
36696: LD_VAR 0 4
36700: ARRAY
36701: INC
36702: ST_TO_ADDR
36703: LD_INT 1
36705: PUSH
36706: FOR_DOWNTO
36707: IFFALSE 36879
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36709: LD_ADDR_VAR 0 5
36713: PUSH
36714: LD_EXP 125
36718: PUSH
36719: LD_VAR 0 4
36723: ARRAY
36724: PUSH
36725: LD_VAR 0 3
36729: ARRAY
36730: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36731: LD_VAR 0 5
36735: PUSH
36736: LD_INT 1
36738: ARRAY
36739: PPUSH
36740: CALL_OW 302
36744: NOT
36745: PUSH
36746: LD_VAR 0 5
36750: PUSH
36751: LD_INT 1
36753: ARRAY
36754: PPUSH
36755: CALL_OW 255
36759: PUSH
36760: LD_VAR 0 1
36764: PPUSH
36765: CALL_OW 255
36769: NONEQUAL
36770: OR
36771: IFFALSE 36877
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36773: LD_VAR 0 5
36777: PUSH
36778: LD_INT 1
36780: ARRAY
36781: PPUSH
36782: CALL_OW 305
36786: PUSH
36787: LD_VAR 0 5
36791: PUSH
36792: LD_INT 1
36794: ARRAY
36795: PPUSH
36796: CALL_OW 255
36800: PUSH
36801: LD_VAR 0 1
36805: PPUSH
36806: CALL_OW 255
36810: EQUAL
36811: AND
36812: IFFALSE 36836
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36814: LD_VAR 0 5
36818: PUSH
36819: LD_INT 1
36821: ARRAY
36822: PPUSH
36823: LD_VAR 0 5
36827: PUSH
36828: LD_INT 2
36830: ARRAY
36831: PPUSH
36832: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36836: LD_ADDR_EXP 125
36840: PUSH
36841: LD_EXP 125
36845: PPUSH
36846: LD_VAR 0 4
36850: PPUSH
36851: LD_EXP 125
36855: PUSH
36856: LD_VAR 0 4
36860: ARRAY
36861: PPUSH
36862: LD_VAR 0 3
36866: PPUSH
36867: CALL_OW 3
36871: PPUSH
36872: CALL_OW 1
36876: ST_TO_ADDR
// end ; end ;
36877: GO 36706
36879: POP
36880: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36881: LD_VAR 0 1
36885: PPUSH
36886: LD_EXP 125
36890: PUSH
36891: LD_VAR 0 4
36895: ARRAY
36896: PUSH
36897: LD_INT 0
36899: PLUS
36900: PPUSH
36901: CALL_OW 505
// end ;
36905: LD_VAR 0 2
36909: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36910: LD_INT 0
36912: PPUSH
36913: PPUSH
36914: PPUSH
36915: PPUSH
// if not hack in hackTanks then
36916: LD_VAR 0 1
36920: PUSH
36921: LD_EXP 124
36925: IN
36926: NOT
36927: IFFALSE 36931
// exit ;
36929: GO 37016
// index := GetElementIndex ( hackTanks , hack ) ;
36931: LD_ADDR_VAR 0 5
36935: PUSH
36936: LD_EXP 124
36940: PPUSH
36941: LD_VAR 0 1
36945: PPUSH
36946: CALL 43949 0 2
36950: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36951: LD_ADDR_VAR 0 4
36955: PUSH
36956: DOUBLE
36957: LD_INT 1
36959: DEC
36960: ST_TO_ADDR
36961: LD_EXP 125
36965: PUSH
36966: LD_VAR 0 5
36970: ARRAY
36971: PUSH
36972: FOR_TO
36973: IFFALSE 37014
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36975: LD_EXP 125
36979: PUSH
36980: LD_VAR 0 5
36984: ARRAY
36985: PUSH
36986: LD_VAR 0 4
36990: ARRAY
36991: PUSH
36992: LD_INT 1
36994: ARRAY
36995: PUSH
36996: LD_VAR 0 2
37000: EQUAL
37001: IFFALSE 37012
// KillUnit ( vehicle ) ;
37003: LD_VAR 0 2
37007: PPUSH
37008: CALL_OW 66
37012: GO 36972
37014: POP
37015: POP
// end ;
37016: LD_VAR 0 3
37020: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37021: LD_EXP 129
37025: NOT
37026: IFFALSE 37061
37028: GO 37030
37030: DISABLE
// begin initMiner := true ;
37031: LD_ADDR_EXP 129
37035: PUSH
37036: LD_INT 1
37038: ST_TO_ADDR
// minersList := [ ] ;
37039: LD_ADDR_EXP 130
37043: PUSH
37044: EMPTY
37045: ST_TO_ADDR
// minerMinesList := [ ] ;
37046: LD_ADDR_EXP 131
37050: PUSH
37051: EMPTY
37052: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37053: LD_ADDR_EXP 132
37057: PUSH
37058: LD_INT 5
37060: ST_TO_ADDR
// end ;
37061: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37062: LD_EXP 129
37066: PUSH
37067: LD_INT 34
37069: PUSH
37070: LD_INT 81
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PPUSH
37077: CALL_OW 69
37081: AND
37082: IFFALSE 37543
37084: GO 37086
37086: DISABLE
37087: LD_INT 0
37089: PPUSH
37090: PPUSH
37091: PPUSH
37092: PPUSH
// begin enable ;
37093: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37094: LD_ADDR_VAR 0 1
37098: PUSH
37099: LD_INT 34
37101: PUSH
37102: LD_INT 81
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PPUSH
37109: CALL_OW 69
37113: PUSH
37114: FOR_IN
37115: IFFALSE 37187
// begin if not i in minersList then
37117: LD_VAR 0 1
37121: PUSH
37122: LD_EXP 130
37126: IN
37127: NOT
37128: IFFALSE 37185
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37130: LD_ADDR_EXP 130
37134: PUSH
37135: LD_EXP 130
37139: PPUSH
37140: LD_EXP 130
37144: PUSH
37145: LD_INT 1
37147: PLUS
37148: PPUSH
37149: LD_VAR 0 1
37153: PPUSH
37154: CALL_OW 1
37158: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37159: LD_ADDR_EXP 131
37163: PUSH
37164: LD_EXP 131
37168: PPUSH
37169: LD_EXP 131
37173: PUSH
37174: LD_INT 1
37176: PLUS
37177: PPUSH
37178: EMPTY
37179: PPUSH
37180: CALL_OW 1
37184: ST_TO_ADDR
// end end ;
37185: GO 37114
37187: POP
37188: POP
// for i := minerMinesList downto 1 do
37189: LD_ADDR_VAR 0 1
37193: PUSH
37194: DOUBLE
37195: LD_EXP 131
37199: INC
37200: ST_TO_ADDR
37201: LD_INT 1
37203: PUSH
37204: FOR_DOWNTO
37205: IFFALSE 37541
// begin if IsLive ( minersList [ i ] ) then
37207: LD_EXP 130
37211: PUSH
37212: LD_VAR 0 1
37216: ARRAY
37217: PPUSH
37218: CALL_OW 300
37222: IFFALSE 37250
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37224: LD_EXP 130
37228: PUSH
37229: LD_VAR 0 1
37233: ARRAY
37234: PPUSH
37235: LD_EXP 131
37239: PUSH
37240: LD_VAR 0 1
37244: ARRAY
37245: PPUSH
37246: CALL_OW 505
// if not minerMinesList [ i ] then
37250: LD_EXP 131
37254: PUSH
37255: LD_VAR 0 1
37259: ARRAY
37260: NOT
37261: IFFALSE 37265
// continue ;
37263: GO 37204
// for j := minerMinesList [ i ] downto 1 do
37265: LD_ADDR_VAR 0 2
37269: PUSH
37270: DOUBLE
37271: LD_EXP 131
37275: PUSH
37276: LD_VAR 0 1
37280: ARRAY
37281: INC
37282: ST_TO_ADDR
37283: LD_INT 1
37285: PUSH
37286: FOR_DOWNTO
37287: IFFALSE 37537
// begin side := GetSide ( minersList [ i ] ) ;
37289: LD_ADDR_VAR 0 3
37293: PUSH
37294: LD_EXP 130
37298: PUSH
37299: LD_VAR 0 1
37303: ARRAY
37304: PPUSH
37305: CALL_OW 255
37309: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37310: LD_ADDR_VAR 0 4
37314: PUSH
37315: LD_EXP 131
37319: PUSH
37320: LD_VAR 0 1
37324: ARRAY
37325: PUSH
37326: LD_VAR 0 2
37330: ARRAY
37331: PUSH
37332: LD_INT 1
37334: ARRAY
37335: PPUSH
37336: LD_EXP 131
37340: PUSH
37341: LD_VAR 0 1
37345: ARRAY
37346: PUSH
37347: LD_VAR 0 2
37351: ARRAY
37352: PUSH
37353: LD_INT 2
37355: ARRAY
37356: PPUSH
37357: CALL_OW 428
37361: ST_TO_ADDR
// if not tmp then
37362: LD_VAR 0 4
37366: NOT
37367: IFFALSE 37371
// continue ;
37369: GO 37286
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37371: LD_VAR 0 4
37375: PUSH
37376: LD_INT 81
37378: PUSH
37379: LD_VAR 0 3
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PPUSH
37388: CALL_OW 69
37392: IN
37393: PUSH
37394: LD_EXP 131
37398: PUSH
37399: LD_VAR 0 1
37403: ARRAY
37404: PUSH
37405: LD_VAR 0 2
37409: ARRAY
37410: PUSH
37411: LD_INT 1
37413: ARRAY
37414: PPUSH
37415: LD_EXP 131
37419: PUSH
37420: LD_VAR 0 1
37424: ARRAY
37425: PUSH
37426: LD_VAR 0 2
37430: ARRAY
37431: PUSH
37432: LD_INT 2
37434: ARRAY
37435: PPUSH
37436: CALL_OW 458
37440: AND
37441: IFFALSE 37535
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37443: LD_EXP 131
37447: PUSH
37448: LD_VAR 0 1
37452: ARRAY
37453: PUSH
37454: LD_VAR 0 2
37458: ARRAY
37459: PUSH
37460: LD_INT 1
37462: ARRAY
37463: PPUSH
37464: LD_EXP 131
37468: PUSH
37469: LD_VAR 0 1
37473: ARRAY
37474: PUSH
37475: LD_VAR 0 2
37479: ARRAY
37480: PUSH
37481: LD_INT 2
37483: ARRAY
37484: PPUSH
37485: LD_VAR 0 3
37489: PPUSH
37490: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37494: LD_ADDR_EXP 131
37498: PUSH
37499: LD_EXP 131
37503: PPUSH
37504: LD_VAR 0 1
37508: PPUSH
37509: LD_EXP 131
37513: PUSH
37514: LD_VAR 0 1
37518: ARRAY
37519: PPUSH
37520: LD_VAR 0 2
37524: PPUSH
37525: CALL_OW 3
37529: PPUSH
37530: CALL_OW 1
37534: ST_TO_ADDR
// end ; end ;
37535: GO 37286
37537: POP
37538: POP
// end ;
37539: GO 37204
37541: POP
37542: POP
// end ;
37543: PPOPN 4
37545: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37546: LD_INT 0
37548: PPUSH
37549: PPUSH
// result := false ;
37550: LD_ADDR_VAR 0 4
37554: PUSH
37555: LD_INT 0
37557: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37558: LD_VAR 0 1
37562: PPUSH
37563: CALL_OW 264
37567: PUSH
37568: LD_INT 81
37570: EQUAL
37571: NOT
37572: IFFALSE 37576
// exit ;
37574: GO 37816
// index := GetElementIndex ( minersList , unit ) ;
37576: LD_ADDR_VAR 0 5
37580: PUSH
37581: LD_EXP 130
37585: PPUSH
37586: LD_VAR 0 1
37590: PPUSH
37591: CALL 43949 0 2
37595: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37596: LD_EXP 131
37600: PUSH
37601: LD_VAR 0 5
37605: ARRAY
37606: PUSH
37607: LD_EXP 132
37611: GREATEREQUAL
37612: IFFALSE 37616
// exit ;
37614: GO 37816
// ComMoveXY ( unit , x , y ) ;
37616: LD_VAR 0 1
37620: PPUSH
37621: LD_VAR 0 2
37625: PPUSH
37626: LD_VAR 0 3
37630: PPUSH
37631: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37635: LD_INT 35
37637: PPUSH
37638: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37642: LD_VAR 0 1
37646: PPUSH
37647: LD_VAR 0 2
37651: PPUSH
37652: LD_VAR 0 3
37656: PPUSH
37657: CALL 75285 0 3
37661: NOT
37662: PUSH
37663: LD_VAR 0 1
37667: PPUSH
37668: CALL_OW 314
37672: AND
37673: IFFALSE 37677
// exit ;
37675: GO 37816
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37677: LD_VAR 0 2
37681: PPUSH
37682: LD_VAR 0 3
37686: PPUSH
37687: CALL_OW 428
37691: PUSH
37692: LD_VAR 0 1
37696: EQUAL
37697: PUSH
37698: LD_VAR 0 1
37702: PPUSH
37703: CALL_OW 314
37707: NOT
37708: AND
37709: IFFALSE 37635
// PlaySoundXY ( x , y , PlantMine ) ;
37711: LD_VAR 0 2
37715: PPUSH
37716: LD_VAR 0 3
37720: PPUSH
37721: LD_STRING PlantMine
37723: PPUSH
37724: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37728: LD_VAR 0 2
37732: PPUSH
37733: LD_VAR 0 3
37737: PPUSH
37738: LD_VAR 0 1
37742: PPUSH
37743: CALL_OW 255
37747: PPUSH
37748: LD_INT 0
37750: PPUSH
37751: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37755: LD_ADDR_EXP 131
37759: PUSH
37760: LD_EXP 131
37764: PPUSH
37765: LD_VAR 0 5
37769: PUSH
37770: LD_EXP 131
37774: PUSH
37775: LD_VAR 0 5
37779: ARRAY
37780: PUSH
37781: LD_INT 1
37783: PLUS
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PPUSH
37789: LD_VAR 0 2
37793: PUSH
37794: LD_VAR 0 3
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PPUSH
37803: CALL 44164 0 3
37807: ST_TO_ADDR
// result := true ;
37808: LD_ADDR_VAR 0 4
37812: PUSH
37813: LD_INT 1
37815: ST_TO_ADDR
// end ;
37816: LD_VAR 0 4
37820: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37821: LD_INT 0
37823: PPUSH
37824: PPUSH
37825: PPUSH
// if not unit in minersList then
37826: LD_VAR 0 1
37830: PUSH
37831: LD_EXP 130
37835: IN
37836: NOT
37837: IFFALSE 37841
// exit ;
37839: GO 38233
// index := GetElementIndex ( minersList , unit ) ;
37841: LD_ADDR_VAR 0 6
37845: PUSH
37846: LD_EXP 130
37850: PPUSH
37851: LD_VAR 0 1
37855: PPUSH
37856: CALL 43949 0 2
37860: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37861: LD_ADDR_VAR 0 5
37865: PUSH
37866: DOUBLE
37867: LD_EXP 131
37871: PUSH
37872: LD_VAR 0 6
37876: ARRAY
37877: INC
37878: ST_TO_ADDR
37879: LD_INT 1
37881: PUSH
37882: FOR_DOWNTO
37883: IFFALSE 38044
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37885: LD_EXP 131
37889: PUSH
37890: LD_VAR 0 6
37894: ARRAY
37895: PUSH
37896: LD_VAR 0 5
37900: ARRAY
37901: PUSH
37902: LD_INT 1
37904: ARRAY
37905: PUSH
37906: LD_VAR 0 2
37910: EQUAL
37911: PUSH
37912: LD_EXP 131
37916: PUSH
37917: LD_VAR 0 6
37921: ARRAY
37922: PUSH
37923: LD_VAR 0 5
37927: ARRAY
37928: PUSH
37929: LD_INT 2
37931: ARRAY
37932: PUSH
37933: LD_VAR 0 3
37937: EQUAL
37938: AND
37939: IFFALSE 38042
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37941: LD_EXP 131
37945: PUSH
37946: LD_VAR 0 6
37950: ARRAY
37951: PUSH
37952: LD_VAR 0 5
37956: ARRAY
37957: PUSH
37958: LD_INT 1
37960: ARRAY
37961: PPUSH
37962: LD_EXP 131
37966: PUSH
37967: LD_VAR 0 6
37971: ARRAY
37972: PUSH
37973: LD_VAR 0 5
37977: ARRAY
37978: PUSH
37979: LD_INT 2
37981: ARRAY
37982: PPUSH
37983: LD_VAR 0 1
37987: PPUSH
37988: CALL_OW 255
37992: PPUSH
37993: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37997: LD_ADDR_EXP 131
38001: PUSH
38002: LD_EXP 131
38006: PPUSH
38007: LD_VAR 0 6
38011: PPUSH
38012: LD_EXP 131
38016: PUSH
38017: LD_VAR 0 6
38021: ARRAY
38022: PPUSH
38023: LD_VAR 0 5
38027: PPUSH
38028: CALL_OW 3
38032: PPUSH
38033: CALL_OW 1
38037: ST_TO_ADDR
// exit ;
38038: POP
38039: POP
38040: GO 38233
// end ; end ;
38042: GO 37882
38044: POP
38045: POP
// for i := minerMinesList [ index ] downto 1 do
38046: LD_ADDR_VAR 0 5
38050: PUSH
38051: DOUBLE
38052: LD_EXP 131
38056: PUSH
38057: LD_VAR 0 6
38061: ARRAY
38062: INC
38063: ST_TO_ADDR
38064: LD_INT 1
38066: PUSH
38067: FOR_DOWNTO
38068: IFFALSE 38231
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38070: LD_EXP 131
38074: PUSH
38075: LD_VAR 0 6
38079: ARRAY
38080: PUSH
38081: LD_VAR 0 5
38085: ARRAY
38086: PUSH
38087: LD_INT 1
38089: ARRAY
38090: PPUSH
38091: LD_EXP 131
38095: PUSH
38096: LD_VAR 0 6
38100: ARRAY
38101: PUSH
38102: LD_VAR 0 5
38106: ARRAY
38107: PUSH
38108: LD_INT 2
38110: ARRAY
38111: PPUSH
38112: LD_VAR 0 2
38116: PPUSH
38117: LD_VAR 0 3
38121: PPUSH
38122: CALL_OW 298
38126: PUSH
38127: LD_INT 6
38129: LESS
38130: IFFALSE 38229
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38132: LD_EXP 131
38136: PUSH
38137: LD_VAR 0 6
38141: ARRAY
38142: PUSH
38143: LD_VAR 0 5
38147: ARRAY
38148: PUSH
38149: LD_INT 1
38151: ARRAY
38152: PPUSH
38153: LD_EXP 131
38157: PUSH
38158: LD_VAR 0 6
38162: ARRAY
38163: PUSH
38164: LD_VAR 0 5
38168: ARRAY
38169: PUSH
38170: LD_INT 2
38172: ARRAY
38173: PPUSH
38174: LD_VAR 0 1
38178: PPUSH
38179: CALL_OW 255
38183: PPUSH
38184: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38188: LD_ADDR_EXP 131
38192: PUSH
38193: LD_EXP 131
38197: PPUSH
38198: LD_VAR 0 6
38202: PPUSH
38203: LD_EXP 131
38207: PUSH
38208: LD_VAR 0 6
38212: ARRAY
38213: PPUSH
38214: LD_VAR 0 5
38218: PPUSH
38219: CALL_OW 3
38223: PPUSH
38224: CALL_OW 1
38228: ST_TO_ADDR
// end ; end ;
38229: GO 38067
38231: POP
38232: POP
// end ;
38233: LD_VAR 0 4
38237: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38238: LD_INT 0
38240: PPUSH
38241: PPUSH
38242: PPUSH
38243: PPUSH
38244: PPUSH
38245: PPUSH
38246: PPUSH
38247: PPUSH
38248: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38249: LD_VAR 0 1
38253: PPUSH
38254: CALL_OW 264
38258: PUSH
38259: LD_INT 81
38261: EQUAL
38262: NOT
38263: PUSH
38264: LD_VAR 0 1
38268: PUSH
38269: LD_EXP 130
38273: IN
38274: NOT
38275: OR
38276: IFFALSE 38280
// exit ;
38278: GO 38602
// index := GetElementIndex ( minersList , unit ) ;
38280: LD_ADDR_VAR 0 6
38284: PUSH
38285: LD_EXP 130
38289: PPUSH
38290: LD_VAR 0 1
38294: PPUSH
38295: CALL 43949 0 2
38299: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38300: LD_ADDR_VAR 0 8
38304: PUSH
38305: LD_EXP 132
38309: PUSH
38310: LD_EXP 131
38314: PUSH
38315: LD_VAR 0 6
38319: ARRAY
38320: MINUS
38321: ST_TO_ADDR
// if not minesFreeAmount then
38322: LD_VAR 0 8
38326: NOT
38327: IFFALSE 38331
// exit ;
38329: GO 38602
// tmp := [ ] ;
38331: LD_ADDR_VAR 0 7
38335: PUSH
38336: EMPTY
38337: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38338: LD_ADDR_VAR 0 5
38342: PUSH
38343: DOUBLE
38344: LD_INT 1
38346: DEC
38347: ST_TO_ADDR
38348: LD_VAR 0 8
38352: PUSH
38353: FOR_TO
38354: IFFALSE 38549
// begin _d := rand ( 0 , 5 ) ;
38356: LD_ADDR_VAR 0 11
38360: PUSH
38361: LD_INT 0
38363: PPUSH
38364: LD_INT 5
38366: PPUSH
38367: CALL_OW 12
38371: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38372: LD_ADDR_VAR 0 12
38376: PUSH
38377: LD_INT 2
38379: PPUSH
38380: LD_INT 6
38382: PPUSH
38383: CALL_OW 12
38387: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38388: LD_ADDR_VAR 0 9
38392: PUSH
38393: LD_VAR 0 2
38397: PPUSH
38398: LD_VAR 0 11
38402: PPUSH
38403: LD_VAR 0 12
38407: PPUSH
38408: CALL_OW 272
38412: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38413: LD_ADDR_VAR 0 10
38417: PUSH
38418: LD_VAR 0 3
38422: PPUSH
38423: LD_VAR 0 11
38427: PPUSH
38428: LD_VAR 0 12
38432: PPUSH
38433: CALL_OW 273
38437: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38438: LD_VAR 0 9
38442: PPUSH
38443: LD_VAR 0 10
38447: PPUSH
38448: CALL_OW 488
38452: PUSH
38453: LD_VAR 0 9
38457: PUSH
38458: LD_VAR 0 10
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_VAR 0 7
38471: IN
38472: NOT
38473: AND
38474: PUSH
38475: LD_VAR 0 9
38479: PPUSH
38480: LD_VAR 0 10
38484: PPUSH
38485: CALL_OW 458
38489: NOT
38490: AND
38491: IFFALSE 38533
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38493: LD_ADDR_VAR 0 7
38497: PUSH
38498: LD_VAR 0 7
38502: PPUSH
38503: LD_VAR 0 7
38507: PUSH
38508: LD_INT 1
38510: PLUS
38511: PPUSH
38512: LD_VAR 0 9
38516: PUSH
38517: LD_VAR 0 10
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PPUSH
38526: CALL_OW 1
38530: ST_TO_ADDR
38531: GO 38547
// i := i - 1 ;
38533: LD_ADDR_VAR 0 5
38537: PUSH
38538: LD_VAR 0 5
38542: PUSH
38543: LD_INT 1
38545: MINUS
38546: ST_TO_ADDR
// end ;
38547: GO 38353
38549: POP
38550: POP
// for i in tmp do
38551: LD_ADDR_VAR 0 5
38555: PUSH
38556: LD_VAR 0 7
38560: PUSH
38561: FOR_IN
38562: IFFALSE 38600
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38564: LD_VAR 0 1
38568: PPUSH
38569: LD_VAR 0 5
38573: PUSH
38574: LD_INT 1
38576: ARRAY
38577: PPUSH
38578: LD_VAR 0 5
38582: PUSH
38583: LD_INT 2
38585: ARRAY
38586: PPUSH
38587: CALL 37546 0 3
38591: NOT
38592: IFFALSE 38598
// exit ;
38594: POP
38595: POP
38596: GO 38602
38598: GO 38561
38600: POP
38601: POP
// end ;
38602: LD_VAR 0 4
38606: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38607: LD_INT 0
38609: PPUSH
38610: PPUSH
38611: PPUSH
38612: PPUSH
38613: PPUSH
38614: PPUSH
38615: PPUSH
// if not GetClass ( unit ) = class_sniper then
38616: LD_VAR 0 1
38620: PPUSH
38621: CALL_OW 257
38625: PUSH
38626: LD_INT 5
38628: EQUAL
38629: NOT
38630: IFFALSE 38634
// exit ;
38632: GO 39022
// dist := 8 ;
38634: LD_ADDR_VAR 0 5
38638: PUSH
38639: LD_INT 8
38641: ST_TO_ADDR
// viewRange := 12 ;
38642: LD_ADDR_VAR 0 7
38646: PUSH
38647: LD_INT 12
38649: ST_TO_ADDR
// side := GetSide ( unit ) ;
38650: LD_ADDR_VAR 0 6
38654: PUSH
38655: LD_VAR 0 1
38659: PPUSH
38660: CALL_OW 255
38664: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38665: LD_INT 61
38667: PPUSH
38668: LD_VAR 0 6
38672: PPUSH
38673: CALL_OW 321
38677: PUSH
38678: LD_INT 2
38680: EQUAL
38681: IFFALSE 38691
// viewRange := 16 ;
38683: LD_ADDR_VAR 0 7
38687: PUSH
38688: LD_INT 16
38690: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38691: LD_VAR 0 1
38695: PPUSH
38696: LD_VAR 0 2
38700: PPUSH
38701: LD_VAR 0 3
38705: PPUSH
38706: CALL_OW 297
38710: PUSH
38711: LD_VAR 0 5
38715: GREATER
38716: IFFALSE 38795
// begin ComMoveXY ( unit , x , y ) ;
38718: LD_VAR 0 1
38722: PPUSH
38723: LD_VAR 0 2
38727: PPUSH
38728: LD_VAR 0 3
38732: PPUSH
38733: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38737: LD_INT 35
38739: PPUSH
38740: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38744: LD_VAR 0 1
38748: PPUSH
38749: LD_VAR 0 2
38753: PPUSH
38754: LD_VAR 0 3
38758: PPUSH
38759: CALL 75285 0 3
38763: NOT
38764: IFFALSE 38768
// exit ;
38766: GO 39022
// until GetDistUnitXY ( unit , x , y ) < dist ;
38768: LD_VAR 0 1
38772: PPUSH
38773: LD_VAR 0 2
38777: PPUSH
38778: LD_VAR 0 3
38782: PPUSH
38783: CALL_OW 297
38787: PUSH
38788: LD_VAR 0 5
38792: LESS
38793: IFFALSE 38737
// end ; ComTurnXY ( unit , x , y ) ;
38795: LD_VAR 0 1
38799: PPUSH
38800: LD_VAR 0 2
38804: PPUSH
38805: LD_VAR 0 3
38809: PPUSH
38810: CALL_OW 118
// wait ( 5 ) ;
38814: LD_INT 5
38816: PPUSH
38817: CALL_OW 67
// _d := GetDir ( unit ) ;
38821: LD_ADDR_VAR 0 10
38825: PUSH
38826: LD_VAR 0 1
38830: PPUSH
38831: CALL_OW 254
38835: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38836: LD_ADDR_VAR 0 8
38840: PUSH
38841: LD_VAR 0 1
38845: PPUSH
38846: CALL_OW 250
38850: PPUSH
38851: LD_VAR 0 10
38855: PPUSH
38856: LD_VAR 0 5
38860: PPUSH
38861: CALL_OW 272
38865: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38866: LD_ADDR_VAR 0 9
38870: PUSH
38871: LD_VAR 0 1
38875: PPUSH
38876: CALL_OW 251
38880: PPUSH
38881: LD_VAR 0 10
38885: PPUSH
38886: LD_VAR 0 5
38890: PPUSH
38891: CALL_OW 273
38895: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38896: LD_VAR 0 8
38900: PPUSH
38901: LD_VAR 0 9
38905: PPUSH
38906: CALL_OW 488
38910: NOT
38911: IFFALSE 38915
// exit ;
38913: GO 39022
// ComAnimCustom ( unit , 1 ) ;
38915: LD_VAR 0 1
38919: PPUSH
38920: LD_INT 1
38922: PPUSH
38923: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38927: LD_VAR 0 8
38931: PPUSH
38932: LD_VAR 0 9
38936: PPUSH
38937: LD_VAR 0 6
38941: PPUSH
38942: LD_VAR 0 7
38946: PPUSH
38947: CALL_OW 330
// repeat wait ( 1 ) ;
38951: LD_INT 1
38953: PPUSH
38954: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38958: LD_VAR 0 1
38962: PPUSH
38963: CALL_OW 316
38967: PUSH
38968: LD_VAR 0 1
38972: PPUSH
38973: CALL_OW 314
38977: OR
38978: PUSH
38979: LD_VAR 0 1
38983: PPUSH
38984: CALL_OW 302
38988: NOT
38989: OR
38990: PUSH
38991: LD_VAR 0 1
38995: PPUSH
38996: CALL_OW 301
39000: OR
39001: IFFALSE 38951
// RemoveSeeing ( _x , _y , side ) ;
39003: LD_VAR 0 8
39007: PPUSH
39008: LD_VAR 0 9
39012: PPUSH
39013: LD_VAR 0 6
39017: PPUSH
39018: CALL_OW 331
// end ; end_of_file
39022: LD_VAR 0 4
39026: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39027: LD_INT 0
39029: PPUSH
39030: PPUSH
// if exist_mode then
39031: LD_VAR 0 2
39035: IFFALSE 39060
// unit := CreateCharacter ( prefix & ident ) else
39037: LD_ADDR_VAR 0 5
39041: PUSH
39042: LD_VAR 0 3
39046: PUSH
39047: LD_VAR 0 1
39051: STR
39052: PPUSH
39053: CALL_OW 34
39057: ST_TO_ADDR
39058: GO 39075
// unit := NewCharacter ( ident ) ;
39060: LD_ADDR_VAR 0 5
39064: PUSH
39065: LD_VAR 0 1
39069: PPUSH
39070: CALL_OW 25
39074: ST_TO_ADDR
// result := unit ;
39075: LD_ADDR_VAR 0 4
39079: PUSH
39080: LD_VAR 0 5
39084: ST_TO_ADDR
// end ;
39085: LD_VAR 0 4
39089: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39090: LD_INT 0
39092: PPUSH
39093: PPUSH
// if not side or not nation then
39094: LD_VAR 0 1
39098: NOT
39099: PUSH
39100: LD_VAR 0 2
39104: NOT
39105: OR
39106: IFFALSE 39110
// exit ;
39108: GO 39878
// case nation of nation_american :
39110: LD_VAR 0 2
39114: PUSH
39115: LD_INT 1
39117: DOUBLE
39118: EQUAL
39119: IFTRUE 39123
39121: GO 39337
39123: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39124: LD_ADDR_VAR 0 4
39128: PUSH
39129: LD_INT 35
39131: PUSH
39132: LD_INT 45
39134: PUSH
39135: LD_INT 46
39137: PUSH
39138: LD_INT 47
39140: PUSH
39141: LD_INT 82
39143: PUSH
39144: LD_INT 83
39146: PUSH
39147: LD_INT 84
39149: PUSH
39150: LD_INT 85
39152: PUSH
39153: LD_INT 86
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: LD_INT 2
39161: PUSH
39162: LD_INT 6
39164: PUSH
39165: LD_INT 15
39167: PUSH
39168: LD_INT 16
39170: PUSH
39171: LD_INT 7
39173: PUSH
39174: LD_INT 12
39176: PUSH
39177: LD_INT 13
39179: PUSH
39180: LD_INT 10
39182: PUSH
39183: LD_INT 14
39185: PUSH
39186: LD_INT 20
39188: PUSH
39189: LD_INT 21
39191: PUSH
39192: LD_INT 22
39194: PUSH
39195: LD_INT 25
39197: PUSH
39198: LD_INT 32
39200: PUSH
39201: LD_INT 27
39203: PUSH
39204: LD_INT 36
39206: PUSH
39207: LD_INT 69
39209: PUSH
39210: LD_INT 39
39212: PUSH
39213: LD_INT 34
39215: PUSH
39216: LD_INT 40
39218: PUSH
39219: LD_INT 48
39221: PUSH
39222: LD_INT 49
39224: PUSH
39225: LD_INT 50
39227: PUSH
39228: LD_INT 51
39230: PUSH
39231: LD_INT 52
39233: PUSH
39234: LD_INT 53
39236: PUSH
39237: LD_INT 54
39239: PUSH
39240: LD_INT 55
39242: PUSH
39243: LD_INT 56
39245: PUSH
39246: LD_INT 57
39248: PUSH
39249: LD_INT 58
39251: PUSH
39252: LD_INT 59
39254: PUSH
39255: LD_INT 60
39257: PUSH
39258: LD_INT 61
39260: PUSH
39261: LD_INT 62
39263: PUSH
39264: LD_INT 80
39266: PUSH
39267: LD_INT 82
39269: PUSH
39270: LD_INT 83
39272: PUSH
39273: LD_INT 84
39275: PUSH
39276: LD_INT 85
39278: PUSH
39279: LD_INT 86
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: ST_TO_ADDR
39335: GO 39802
39337: LD_INT 2
39339: DOUBLE
39340: EQUAL
39341: IFTRUE 39345
39343: GO 39571
39345: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39346: LD_ADDR_VAR 0 4
39350: PUSH
39351: LD_INT 35
39353: PUSH
39354: LD_INT 45
39356: PUSH
39357: LD_INT 46
39359: PUSH
39360: LD_INT 47
39362: PUSH
39363: LD_INT 82
39365: PUSH
39366: LD_INT 83
39368: PUSH
39369: LD_INT 84
39371: PUSH
39372: LD_INT 85
39374: PUSH
39375: LD_INT 87
39377: PUSH
39378: LD_INT 70
39380: PUSH
39381: LD_INT 1
39383: PUSH
39384: LD_INT 11
39386: PUSH
39387: LD_INT 3
39389: PUSH
39390: LD_INT 4
39392: PUSH
39393: LD_INT 5
39395: PUSH
39396: LD_INT 6
39398: PUSH
39399: LD_INT 15
39401: PUSH
39402: LD_INT 18
39404: PUSH
39405: LD_INT 7
39407: PUSH
39408: LD_INT 17
39410: PUSH
39411: LD_INT 8
39413: PUSH
39414: LD_INT 20
39416: PUSH
39417: LD_INT 21
39419: PUSH
39420: LD_INT 22
39422: PUSH
39423: LD_INT 72
39425: PUSH
39426: LD_INT 26
39428: PUSH
39429: LD_INT 69
39431: PUSH
39432: LD_INT 39
39434: PUSH
39435: LD_INT 40
39437: PUSH
39438: LD_INT 41
39440: PUSH
39441: LD_INT 42
39443: PUSH
39444: LD_INT 43
39446: PUSH
39447: LD_INT 48
39449: PUSH
39450: LD_INT 49
39452: PUSH
39453: LD_INT 50
39455: PUSH
39456: LD_INT 51
39458: PUSH
39459: LD_INT 52
39461: PUSH
39462: LD_INT 53
39464: PUSH
39465: LD_INT 54
39467: PUSH
39468: LD_INT 55
39470: PUSH
39471: LD_INT 56
39473: PUSH
39474: LD_INT 60
39476: PUSH
39477: LD_INT 61
39479: PUSH
39480: LD_INT 62
39482: PUSH
39483: LD_INT 66
39485: PUSH
39486: LD_INT 67
39488: PUSH
39489: LD_INT 68
39491: PUSH
39492: LD_INT 81
39494: PUSH
39495: LD_INT 82
39497: PUSH
39498: LD_INT 83
39500: PUSH
39501: LD_INT 84
39503: PUSH
39504: LD_INT 85
39506: PUSH
39507: LD_INT 87
39509: PUSH
39510: LD_INT 88
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: ST_TO_ADDR
39569: GO 39802
39571: LD_INT 3
39573: DOUBLE
39574: EQUAL
39575: IFTRUE 39579
39577: GO 39801
39579: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39580: LD_ADDR_VAR 0 4
39584: PUSH
39585: LD_INT 46
39587: PUSH
39588: LD_INT 47
39590: PUSH
39591: LD_INT 1
39593: PUSH
39594: LD_INT 2
39596: PUSH
39597: LD_INT 82
39599: PUSH
39600: LD_INT 83
39602: PUSH
39603: LD_INT 84
39605: PUSH
39606: LD_INT 85
39608: PUSH
39609: LD_INT 86
39611: PUSH
39612: LD_INT 11
39614: PUSH
39615: LD_INT 9
39617: PUSH
39618: LD_INT 20
39620: PUSH
39621: LD_INT 19
39623: PUSH
39624: LD_INT 21
39626: PUSH
39627: LD_INT 24
39629: PUSH
39630: LD_INT 22
39632: PUSH
39633: LD_INT 25
39635: PUSH
39636: LD_INT 28
39638: PUSH
39639: LD_INT 29
39641: PUSH
39642: LD_INT 30
39644: PUSH
39645: LD_INT 31
39647: PUSH
39648: LD_INT 37
39650: PUSH
39651: LD_INT 38
39653: PUSH
39654: LD_INT 32
39656: PUSH
39657: LD_INT 27
39659: PUSH
39660: LD_INT 33
39662: PUSH
39663: LD_INT 69
39665: PUSH
39666: LD_INT 39
39668: PUSH
39669: LD_INT 34
39671: PUSH
39672: LD_INT 40
39674: PUSH
39675: LD_INT 71
39677: PUSH
39678: LD_INT 23
39680: PUSH
39681: LD_INT 44
39683: PUSH
39684: LD_INT 48
39686: PUSH
39687: LD_INT 49
39689: PUSH
39690: LD_INT 50
39692: PUSH
39693: LD_INT 51
39695: PUSH
39696: LD_INT 52
39698: PUSH
39699: LD_INT 53
39701: PUSH
39702: LD_INT 54
39704: PUSH
39705: LD_INT 55
39707: PUSH
39708: LD_INT 56
39710: PUSH
39711: LD_INT 57
39713: PUSH
39714: LD_INT 58
39716: PUSH
39717: LD_INT 59
39719: PUSH
39720: LD_INT 63
39722: PUSH
39723: LD_INT 64
39725: PUSH
39726: LD_INT 65
39728: PUSH
39729: LD_INT 82
39731: PUSH
39732: LD_INT 83
39734: PUSH
39735: LD_INT 84
39737: PUSH
39738: LD_INT 85
39740: PUSH
39741: LD_INT 86
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: ST_TO_ADDR
39799: GO 39802
39801: POP
// if state > - 1 and state < 3 then
39802: LD_VAR 0 3
39806: PUSH
39807: LD_INT 1
39809: NEG
39810: GREATER
39811: PUSH
39812: LD_VAR 0 3
39816: PUSH
39817: LD_INT 3
39819: LESS
39820: AND
39821: IFFALSE 39878
// for i in result do
39823: LD_ADDR_VAR 0 5
39827: PUSH
39828: LD_VAR 0 4
39832: PUSH
39833: FOR_IN
39834: IFFALSE 39876
// if GetTech ( i , side ) <> state then
39836: LD_VAR 0 5
39840: PPUSH
39841: LD_VAR 0 1
39845: PPUSH
39846: CALL_OW 321
39850: PUSH
39851: LD_VAR 0 3
39855: NONEQUAL
39856: IFFALSE 39874
// result := result diff i ;
39858: LD_ADDR_VAR 0 4
39862: PUSH
39863: LD_VAR 0 4
39867: PUSH
39868: LD_VAR 0 5
39872: DIFF
39873: ST_TO_ADDR
39874: GO 39833
39876: POP
39877: POP
// end ;
39878: LD_VAR 0 4
39882: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39883: LD_INT 0
39885: PPUSH
39886: PPUSH
39887: PPUSH
// result := true ;
39888: LD_ADDR_VAR 0 3
39892: PUSH
39893: LD_INT 1
39895: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39896: LD_ADDR_VAR 0 5
39900: PUSH
39901: LD_VAR 0 2
39905: PPUSH
39906: CALL_OW 480
39910: ST_TO_ADDR
// if not tmp then
39911: LD_VAR 0 5
39915: NOT
39916: IFFALSE 39920
// exit ;
39918: GO 39969
// for i in tmp do
39920: LD_ADDR_VAR 0 4
39924: PUSH
39925: LD_VAR 0 5
39929: PUSH
39930: FOR_IN
39931: IFFALSE 39967
// if GetTech ( i , side ) <> state_researched then
39933: LD_VAR 0 4
39937: PPUSH
39938: LD_VAR 0 1
39942: PPUSH
39943: CALL_OW 321
39947: PUSH
39948: LD_INT 2
39950: NONEQUAL
39951: IFFALSE 39965
// begin result := false ;
39953: LD_ADDR_VAR 0 3
39957: PUSH
39958: LD_INT 0
39960: ST_TO_ADDR
// exit ;
39961: POP
39962: POP
39963: GO 39969
// end ;
39965: GO 39930
39967: POP
39968: POP
// end ;
39969: LD_VAR 0 3
39973: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39974: LD_INT 0
39976: PPUSH
39977: PPUSH
39978: PPUSH
39979: PPUSH
39980: PPUSH
39981: PPUSH
39982: PPUSH
39983: PPUSH
39984: PPUSH
39985: PPUSH
39986: PPUSH
39987: PPUSH
39988: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39989: LD_VAR 0 1
39993: NOT
39994: PUSH
39995: LD_VAR 0 1
39999: PPUSH
40000: CALL_OW 257
40004: PUSH
40005: LD_INT 9
40007: NONEQUAL
40008: OR
40009: IFFALSE 40013
// exit ;
40011: GO 40586
// side := GetSide ( unit ) ;
40013: LD_ADDR_VAR 0 9
40017: PUSH
40018: LD_VAR 0 1
40022: PPUSH
40023: CALL_OW 255
40027: ST_TO_ADDR
// tech_space := tech_spacanom ;
40028: LD_ADDR_VAR 0 12
40032: PUSH
40033: LD_INT 29
40035: ST_TO_ADDR
// tech_time := tech_taurad ;
40036: LD_ADDR_VAR 0 13
40040: PUSH
40041: LD_INT 28
40043: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40044: LD_ADDR_VAR 0 11
40048: PUSH
40049: LD_VAR 0 1
40053: PPUSH
40054: CALL_OW 310
40058: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40059: LD_VAR 0 11
40063: PPUSH
40064: CALL_OW 247
40068: PUSH
40069: LD_INT 2
40071: EQUAL
40072: IFFALSE 40076
// exit ;
40074: GO 40586
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40076: LD_ADDR_VAR 0 8
40080: PUSH
40081: LD_INT 81
40083: PUSH
40084: LD_VAR 0 9
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 3
40095: PUSH
40096: LD_INT 21
40098: PUSH
40099: LD_INT 3
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PPUSH
40114: CALL_OW 69
40118: ST_TO_ADDR
// if not tmp then
40119: LD_VAR 0 8
40123: NOT
40124: IFFALSE 40128
// exit ;
40126: GO 40586
// if in_unit then
40128: LD_VAR 0 11
40132: IFFALSE 40156
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40134: LD_ADDR_VAR 0 10
40138: PUSH
40139: LD_VAR 0 8
40143: PPUSH
40144: LD_VAR 0 11
40148: PPUSH
40149: CALL_OW 74
40153: ST_TO_ADDR
40154: GO 40176
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40156: LD_ADDR_VAR 0 10
40160: PUSH
40161: LD_VAR 0 8
40165: PPUSH
40166: LD_VAR 0 1
40170: PPUSH
40171: CALL_OW 74
40175: ST_TO_ADDR
// if not enemy then
40176: LD_VAR 0 10
40180: NOT
40181: IFFALSE 40185
// exit ;
40183: GO 40586
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40185: LD_VAR 0 11
40189: PUSH
40190: LD_VAR 0 11
40194: PPUSH
40195: LD_VAR 0 10
40199: PPUSH
40200: CALL_OW 296
40204: PUSH
40205: LD_INT 13
40207: GREATER
40208: AND
40209: PUSH
40210: LD_VAR 0 1
40214: PPUSH
40215: LD_VAR 0 10
40219: PPUSH
40220: CALL_OW 296
40224: PUSH
40225: LD_INT 12
40227: GREATER
40228: OR
40229: IFFALSE 40233
// exit ;
40231: GO 40586
// missile := [ 1 ] ;
40233: LD_ADDR_VAR 0 14
40237: PUSH
40238: LD_INT 1
40240: PUSH
40241: EMPTY
40242: LIST
40243: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40244: LD_VAR 0 9
40248: PPUSH
40249: LD_VAR 0 12
40253: PPUSH
40254: CALL_OW 325
40258: IFFALSE 40287
// missile := Replace ( missile , missile + 1 , 2 ) ;
40260: LD_ADDR_VAR 0 14
40264: PUSH
40265: LD_VAR 0 14
40269: PPUSH
40270: LD_VAR 0 14
40274: PUSH
40275: LD_INT 1
40277: PLUS
40278: PPUSH
40279: LD_INT 2
40281: PPUSH
40282: CALL_OW 1
40286: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40287: LD_VAR 0 9
40291: PPUSH
40292: LD_VAR 0 13
40296: PPUSH
40297: CALL_OW 325
40301: PUSH
40302: LD_VAR 0 10
40306: PPUSH
40307: CALL_OW 255
40311: PPUSH
40312: LD_VAR 0 13
40316: PPUSH
40317: CALL_OW 325
40321: NOT
40322: AND
40323: IFFALSE 40352
// missile := Replace ( missile , missile + 1 , 3 ) ;
40325: LD_ADDR_VAR 0 14
40329: PUSH
40330: LD_VAR 0 14
40334: PPUSH
40335: LD_VAR 0 14
40339: PUSH
40340: LD_INT 1
40342: PLUS
40343: PPUSH
40344: LD_INT 3
40346: PPUSH
40347: CALL_OW 1
40351: ST_TO_ADDR
// if missile < 2 then
40352: LD_VAR 0 14
40356: PUSH
40357: LD_INT 2
40359: LESS
40360: IFFALSE 40364
// exit ;
40362: GO 40586
// x := GetX ( enemy ) ;
40364: LD_ADDR_VAR 0 4
40368: PUSH
40369: LD_VAR 0 10
40373: PPUSH
40374: CALL_OW 250
40378: ST_TO_ADDR
// y := GetY ( enemy ) ;
40379: LD_ADDR_VAR 0 5
40383: PUSH
40384: LD_VAR 0 10
40388: PPUSH
40389: CALL_OW 251
40393: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40394: LD_ADDR_VAR 0 6
40398: PUSH
40399: LD_VAR 0 4
40403: PUSH
40404: LD_INT 1
40406: NEG
40407: PPUSH
40408: LD_INT 1
40410: PPUSH
40411: CALL_OW 12
40415: PLUS
40416: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40417: LD_ADDR_VAR 0 7
40421: PUSH
40422: LD_VAR 0 5
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PPUSH
40431: LD_INT 1
40433: PPUSH
40434: CALL_OW 12
40438: PLUS
40439: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40440: LD_VAR 0 6
40444: PPUSH
40445: LD_VAR 0 7
40449: PPUSH
40450: CALL_OW 488
40454: NOT
40455: IFFALSE 40477
// begin _x := x ;
40457: LD_ADDR_VAR 0 6
40461: PUSH
40462: LD_VAR 0 4
40466: ST_TO_ADDR
// _y := y ;
40467: LD_ADDR_VAR 0 7
40471: PUSH
40472: LD_VAR 0 5
40476: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40477: LD_ADDR_VAR 0 3
40481: PUSH
40482: LD_INT 1
40484: PPUSH
40485: LD_VAR 0 14
40489: PPUSH
40490: CALL_OW 12
40494: ST_TO_ADDR
// case i of 1 :
40495: LD_VAR 0 3
40499: PUSH
40500: LD_INT 1
40502: DOUBLE
40503: EQUAL
40504: IFTRUE 40508
40506: GO 40525
40508: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40509: LD_VAR 0 1
40513: PPUSH
40514: LD_VAR 0 10
40518: PPUSH
40519: CALL_OW 115
40523: GO 40586
40525: LD_INT 2
40527: DOUBLE
40528: EQUAL
40529: IFTRUE 40533
40531: GO 40555
40533: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40534: LD_VAR 0 1
40538: PPUSH
40539: LD_VAR 0 6
40543: PPUSH
40544: LD_VAR 0 7
40548: PPUSH
40549: CALL_OW 153
40553: GO 40586
40555: LD_INT 3
40557: DOUBLE
40558: EQUAL
40559: IFTRUE 40563
40561: GO 40585
40563: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40564: LD_VAR 0 1
40568: PPUSH
40569: LD_VAR 0 6
40573: PPUSH
40574: LD_VAR 0 7
40578: PPUSH
40579: CALL_OW 154
40583: GO 40586
40585: POP
// end ;
40586: LD_VAR 0 2
40590: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40591: LD_INT 0
40593: PPUSH
40594: PPUSH
40595: PPUSH
40596: PPUSH
40597: PPUSH
40598: PPUSH
// if not unit or not building then
40599: LD_VAR 0 1
40603: NOT
40604: PUSH
40605: LD_VAR 0 2
40609: NOT
40610: OR
40611: IFFALSE 40615
// exit ;
40613: GO 40773
// x := GetX ( building ) ;
40615: LD_ADDR_VAR 0 5
40619: PUSH
40620: LD_VAR 0 2
40624: PPUSH
40625: CALL_OW 250
40629: ST_TO_ADDR
// y := GetY ( building ) ;
40630: LD_ADDR_VAR 0 6
40634: PUSH
40635: LD_VAR 0 2
40639: PPUSH
40640: CALL_OW 251
40644: ST_TO_ADDR
// for i = 0 to 5 do
40645: LD_ADDR_VAR 0 4
40649: PUSH
40650: DOUBLE
40651: LD_INT 0
40653: DEC
40654: ST_TO_ADDR
40655: LD_INT 5
40657: PUSH
40658: FOR_TO
40659: IFFALSE 40771
// begin _x := ShiftX ( x , i , 3 ) ;
40661: LD_ADDR_VAR 0 7
40665: PUSH
40666: LD_VAR 0 5
40670: PPUSH
40671: LD_VAR 0 4
40675: PPUSH
40676: LD_INT 3
40678: PPUSH
40679: CALL_OW 272
40683: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40684: LD_ADDR_VAR 0 8
40688: PUSH
40689: LD_VAR 0 6
40693: PPUSH
40694: LD_VAR 0 4
40698: PPUSH
40699: LD_INT 3
40701: PPUSH
40702: CALL_OW 273
40706: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40707: LD_VAR 0 7
40711: PPUSH
40712: LD_VAR 0 8
40716: PPUSH
40717: CALL_OW 488
40721: NOT
40722: IFFALSE 40726
// continue ;
40724: GO 40658
// if HexInfo ( _x , _y ) = 0 then
40726: LD_VAR 0 7
40730: PPUSH
40731: LD_VAR 0 8
40735: PPUSH
40736: CALL_OW 428
40740: PUSH
40741: LD_INT 0
40743: EQUAL
40744: IFFALSE 40769
// begin ComMoveXY ( unit , _x , _y ) ;
40746: LD_VAR 0 1
40750: PPUSH
40751: LD_VAR 0 7
40755: PPUSH
40756: LD_VAR 0 8
40760: PPUSH
40761: CALL_OW 111
// exit ;
40765: POP
40766: POP
40767: GO 40773
// end ; end ;
40769: GO 40658
40771: POP
40772: POP
// end ;
40773: LD_VAR 0 3
40777: RET
// export function ScanBase ( side , base_area ) ; begin
40778: LD_INT 0
40780: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40781: LD_ADDR_VAR 0 3
40785: PUSH
40786: LD_VAR 0 2
40790: PPUSH
40791: LD_INT 81
40793: PUSH
40794: LD_VAR 0 1
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PPUSH
40803: CALL_OW 70
40807: ST_TO_ADDR
// end ;
40808: LD_VAR 0 3
40812: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40813: LD_INT 0
40815: PPUSH
40816: PPUSH
40817: PPUSH
40818: PPUSH
// result := false ;
40819: LD_ADDR_VAR 0 2
40823: PUSH
40824: LD_INT 0
40826: ST_TO_ADDR
// side := GetSide ( unit ) ;
40827: LD_ADDR_VAR 0 3
40831: PUSH
40832: LD_VAR 0 1
40836: PPUSH
40837: CALL_OW 255
40841: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40842: LD_ADDR_VAR 0 4
40846: PUSH
40847: LD_VAR 0 1
40851: PPUSH
40852: CALL_OW 248
40856: ST_TO_ADDR
// case nat of 1 :
40857: LD_VAR 0 4
40861: PUSH
40862: LD_INT 1
40864: DOUBLE
40865: EQUAL
40866: IFTRUE 40870
40868: GO 40881
40870: POP
// tech := tech_lassight ; 2 :
40871: LD_ADDR_VAR 0 5
40875: PUSH
40876: LD_INT 12
40878: ST_TO_ADDR
40879: GO 40920
40881: LD_INT 2
40883: DOUBLE
40884: EQUAL
40885: IFTRUE 40889
40887: GO 40900
40889: POP
// tech := tech_mortar ; 3 :
40890: LD_ADDR_VAR 0 5
40894: PUSH
40895: LD_INT 41
40897: ST_TO_ADDR
40898: GO 40920
40900: LD_INT 3
40902: DOUBLE
40903: EQUAL
40904: IFTRUE 40908
40906: GO 40919
40908: POP
// tech := tech_bazooka ; end ;
40909: LD_ADDR_VAR 0 5
40913: PUSH
40914: LD_INT 44
40916: ST_TO_ADDR
40917: GO 40920
40919: POP
// if Researched ( side , tech ) then
40920: LD_VAR 0 3
40924: PPUSH
40925: LD_VAR 0 5
40929: PPUSH
40930: CALL_OW 325
40934: IFFALSE 40961
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40936: LD_ADDR_VAR 0 2
40940: PUSH
40941: LD_INT 5
40943: PUSH
40944: LD_INT 8
40946: PUSH
40947: LD_INT 9
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: LIST
40954: PUSH
40955: LD_VAR 0 4
40959: ARRAY
40960: ST_TO_ADDR
// end ;
40961: LD_VAR 0 2
40965: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40966: LD_INT 0
40968: PPUSH
40969: PPUSH
40970: PPUSH
// if not mines then
40971: LD_VAR 0 2
40975: NOT
40976: IFFALSE 40980
// exit ;
40978: GO 41124
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40980: LD_ADDR_VAR 0 5
40984: PUSH
40985: LD_INT 81
40987: PUSH
40988: LD_VAR 0 1
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 3
40999: PUSH
41000: LD_INT 21
41002: PUSH
41003: LD_INT 3
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PPUSH
41018: CALL_OW 69
41022: ST_TO_ADDR
// for i in mines do
41023: LD_ADDR_VAR 0 4
41027: PUSH
41028: LD_VAR 0 2
41032: PUSH
41033: FOR_IN
41034: IFFALSE 41122
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41036: LD_VAR 0 4
41040: PUSH
41041: LD_INT 1
41043: ARRAY
41044: PPUSH
41045: LD_VAR 0 4
41049: PUSH
41050: LD_INT 2
41052: ARRAY
41053: PPUSH
41054: CALL_OW 458
41058: NOT
41059: IFFALSE 41063
// continue ;
41061: GO 41033
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41063: LD_VAR 0 4
41067: PUSH
41068: LD_INT 1
41070: ARRAY
41071: PPUSH
41072: LD_VAR 0 4
41076: PUSH
41077: LD_INT 2
41079: ARRAY
41080: PPUSH
41081: CALL_OW 428
41085: PUSH
41086: LD_VAR 0 5
41090: IN
41091: IFFALSE 41120
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41093: LD_VAR 0 4
41097: PUSH
41098: LD_INT 1
41100: ARRAY
41101: PPUSH
41102: LD_VAR 0 4
41106: PUSH
41107: LD_INT 2
41109: ARRAY
41110: PPUSH
41111: LD_VAR 0 1
41115: PPUSH
41116: CALL_OW 456
// end ;
41120: GO 41033
41122: POP
41123: POP
// end ;
41124: LD_VAR 0 3
41128: RET
// export function Count ( array ) ; var i ; begin
41129: LD_INT 0
41131: PPUSH
41132: PPUSH
// result := 0 ;
41133: LD_ADDR_VAR 0 2
41137: PUSH
41138: LD_INT 0
41140: ST_TO_ADDR
// for i in array do
41141: LD_ADDR_VAR 0 3
41145: PUSH
41146: LD_VAR 0 1
41150: PUSH
41151: FOR_IN
41152: IFFALSE 41176
// if i then
41154: LD_VAR 0 3
41158: IFFALSE 41174
// result := result + 1 ;
41160: LD_ADDR_VAR 0 2
41164: PUSH
41165: LD_VAR 0 2
41169: PUSH
41170: LD_INT 1
41172: PLUS
41173: ST_TO_ADDR
41174: GO 41151
41176: POP
41177: POP
// end ;
41178: LD_VAR 0 2
41182: RET
// export function IsEmpty ( building ) ; begin
41183: LD_INT 0
41185: PPUSH
// if not building then
41186: LD_VAR 0 1
41190: NOT
41191: IFFALSE 41195
// exit ;
41193: GO 41238
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41195: LD_ADDR_VAR 0 2
41199: PUSH
41200: LD_VAR 0 1
41204: PUSH
41205: LD_INT 22
41207: PUSH
41208: LD_VAR 0 1
41212: PPUSH
41213: CALL_OW 255
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 58
41224: PUSH
41225: EMPTY
41226: LIST
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PPUSH
41232: CALL_OW 69
41236: IN
41237: ST_TO_ADDR
// end ;
41238: LD_VAR 0 2
41242: RET
// export function IsNotFull ( building ) ; var places ; begin
41243: LD_INT 0
41245: PPUSH
41246: PPUSH
// if not building then
41247: LD_VAR 0 1
41251: NOT
41252: IFFALSE 41256
// exit ;
41254: GO 41427
// result := false ;
41256: LD_ADDR_VAR 0 2
41260: PUSH
41261: LD_INT 0
41263: ST_TO_ADDR
// places := 0 ;
41264: LD_ADDR_VAR 0 3
41268: PUSH
41269: LD_INT 0
41271: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41272: LD_VAR 0 1
41276: PPUSH
41277: CALL_OW 266
41281: PUSH
41282: LD_INT 0
41284: DOUBLE
41285: EQUAL
41286: IFTRUE 41344
41288: LD_INT 1
41290: DOUBLE
41291: EQUAL
41292: IFTRUE 41344
41294: LD_INT 6
41296: DOUBLE
41297: EQUAL
41298: IFTRUE 41344
41300: LD_INT 7
41302: DOUBLE
41303: EQUAL
41304: IFTRUE 41344
41306: LD_INT 8
41308: DOUBLE
41309: EQUAL
41310: IFTRUE 41344
41312: LD_INT 4
41314: DOUBLE
41315: EQUAL
41316: IFTRUE 41344
41318: LD_INT 5
41320: DOUBLE
41321: EQUAL
41322: IFTRUE 41344
41324: LD_INT 2
41326: DOUBLE
41327: EQUAL
41328: IFTRUE 41344
41330: LD_INT 3
41332: DOUBLE
41333: EQUAL
41334: IFTRUE 41344
41336: LD_INT 35
41338: DOUBLE
41339: EQUAL
41340: IFTRUE 41344
41342: GO 41355
41344: POP
// places := 6 ; b_bunker , b_breastwork :
41345: LD_ADDR_VAR 0 3
41349: PUSH
41350: LD_INT 6
41352: ST_TO_ADDR
41353: GO 41400
41355: LD_INT 32
41357: DOUBLE
41358: EQUAL
41359: IFTRUE 41369
41361: LD_INT 31
41363: DOUBLE
41364: EQUAL
41365: IFTRUE 41369
41367: GO 41380
41369: POP
// places := 1 ; b_control_tower :
41370: LD_ADDR_VAR 0 3
41374: PUSH
41375: LD_INT 1
41377: ST_TO_ADDR
41378: GO 41400
41380: LD_INT 36
41382: DOUBLE
41383: EQUAL
41384: IFTRUE 41388
41386: GO 41399
41388: POP
// places := 3 ; end ;
41389: LD_ADDR_VAR 0 3
41393: PUSH
41394: LD_INT 3
41396: ST_TO_ADDR
41397: GO 41400
41399: POP
// if places then
41400: LD_VAR 0 3
41404: IFFALSE 41427
// result := UnitsInside ( building ) < places ;
41406: LD_ADDR_VAR 0 2
41410: PUSH
41411: LD_VAR 0 1
41415: PPUSH
41416: CALL_OW 313
41420: PUSH
41421: LD_VAR 0 3
41425: LESS
41426: ST_TO_ADDR
// end ;
41427: LD_VAR 0 2
41431: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41432: LD_INT 0
41434: PPUSH
41435: PPUSH
41436: PPUSH
41437: PPUSH
// tmp := [ ] ;
41438: LD_ADDR_VAR 0 3
41442: PUSH
41443: EMPTY
41444: ST_TO_ADDR
// list := [ ] ;
41445: LD_ADDR_VAR 0 5
41449: PUSH
41450: EMPTY
41451: ST_TO_ADDR
// for i = 16 to 25 do
41452: LD_ADDR_VAR 0 4
41456: PUSH
41457: DOUBLE
41458: LD_INT 16
41460: DEC
41461: ST_TO_ADDR
41462: LD_INT 25
41464: PUSH
41465: FOR_TO
41466: IFFALSE 41539
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41468: LD_ADDR_VAR 0 3
41472: PUSH
41473: LD_VAR 0 3
41477: PUSH
41478: LD_INT 22
41480: PUSH
41481: LD_VAR 0 1
41485: PPUSH
41486: CALL_OW 255
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 91
41497: PUSH
41498: LD_VAR 0 1
41502: PUSH
41503: LD_INT 6
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 30
41513: PUSH
41514: LD_VAR 0 4
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: LIST
41527: PUSH
41528: EMPTY
41529: LIST
41530: PPUSH
41531: CALL_OW 69
41535: ADD
41536: ST_TO_ADDR
41537: GO 41465
41539: POP
41540: POP
// for i = 1 to tmp do
41541: LD_ADDR_VAR 0 4
41545: PUSH
41546: DOUBLE
41547: LD_INT 1
41549: DEC
41550: ST_TO_ADDR
41551: LD_VAR 0 3
41555: PUSH
41556: FOR_TO
41557: IFFALSE 41645
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41559: LD_ADDR_VAR 0 5
41563: PUSH
41564: LD_VAR 0 5
41568: PUSH
41569: LD_VAR 0 3
41573: PUSH
41574: LD_VAR 0 4
41578: ARRAY
41579: PPUSH
41580: CALL_OW 266
41584: PUSH
41585: LD_VAR 0 3
41589: PUSH
41590: LD_VAR 0 4
41594: ARRAY
41595: PPUSH
41596: CALL_OW 250
41600: PUSH
41601: LD_VAR 0 3
41605: PUSH
41606: LD_VAR 0 4
41610: ARRAY
41611: PPUSH
41612: CALL_OW 251
41616: PUSH
41617: LD_VAR 0 3
41621: PUSH
41622: LD_VAR 0 4
41626: ARRAY
41627: PPUSH
41628: CALL_OW 254
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: PUSH
41639: EMPTY
41640: LIST
41641: ADD
41642: ST_TO_ADDR
41643: GO 41556
41645: POP
41646: POP
// result := list ;
41647: LD_ADDR_VAR 0 2
41651: PUSH
41652: LD_VAR 0 5
41656: ST_TO_ADDR
// end ;
41657: LD_VAR 0 2
41661: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41662: LD_INT 0
41664: PPUSH
41665: PPUSH
41666: PPUSH
41667: PPUSH
41668: PPUSH
41669: PPUSH
41670: PPUSH
// if not factory then
41671: LD_VAR 0 1
41675: NOT
41676: IFFALSE 41680
// exit ;
41678: GO 42273
// if control = control_apeman then
41680: LD_VAR 0 4
41684: PUSH
41685: LD_INT 5
41687: EQUAL
41688: IFFALSE 41797
// begin tmp := UnitsInside ( factory ) ;
41690: LD_ADDR_VAR 0 8
41694: PUSH
41695: LD_VAR 0 1
41699: PPUSH
41700: CALL_OW 313
41704: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41705: LD_VAR 0 8
41709: PPUSH
41710: LD_INT 25
41712: PUSH
41713: LD_INT 12
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PPUSH
41720: CALL_OW 72
41724: NOT
41725: IFFALSE 41735
// control := control_manual ;
41727: LD_ADDR_VAR 0 4
41731: PUSH
41732: LD_INT 1
41734: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41735: LD_ADDR_VAR 0 8
41739: PUSH
41740: LD_VAR 0 1
41744: PPUSH
41745: CALL 41432 0 1
41749: ST_TO_ADDR
// if tmp then
41750: LD_VAR 0 8
41754: IFFALSE 41797
// begin for i in tmp do
41756: LD_ADDR_VAR 0 7
41760: PUSH
41761: LD_VAR 0 8
41765: PUSH
41766: FOR_IN
41767: IFFALSE 41795
// if i [ 1 ] = b_ext_radio then
41769: LD_VAR 0 7
41773: PUSH
41774: LD_INT 1
41776: ARRAY
41777: PUSH
41778: LD_INT 22
41780: EQUAL
41781: IFFALSE 41793
// begin control := control_remote ;
41783: LD_ADDR_VAR 0 4
41787: PUSH
41788: LD_INT 2
41790: ST_TO_ADDR
// break ;
41791: GO 41795
// end ;
41793: GO 41766
41795: POP
41796: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41797: LD_VAR 0 1
41801: PPUSH
41802: LD_VAR 0 2
41806: PPUSH
41807: LD_VAR 0 3
41811: PPUSH
41812: LD_VAR 0 4
41816: PPUSH
41817: LD_VAR 0 5
41821: PPUSH
41822: CALL_OW 448
41826: IFFALSE 41861
// begin result := [ chassis , engine , control , weapon ] ;
41828: LD_ADDR_VAR 0 6
41832: PUSH
41833: LD_VAR 0 2
41837: PUSH
41838: LD_VAR 0 3
41842: PUSH
41843: LD_VAR 0 4
41847: PUSH
41848: LD_VAR 0 5
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: ST_TO_ADDR
// exit ;
41859: GO 42273
// end ; _chassis := AvailableChassisList ( factory ) ;
41861: LD_ADDR_VAR 0 9
41865: PUSH
41866: LD_VAR 0 1
41870: PPUSH
41871: CALL_OW 475
41875: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41876: LD_ADDR_VAR 0 11
41880: PUSH
41881: LD_VAR 0 1
41885: PPUSH
41886: CALL_OW 476
41890: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41891: LD_ADDR_VAR 0 12
41895: PUSH
41896: LD_VAR 0 1
41900: PPUSH
41901: CALL_OW 477
41905: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41906: LD_ADDR_VAR 0 10
41910: PUSH
41911: LD_VAR 0 1
41915: PPUSH
41916: CALL_OW 478
41920: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41921: LD_VAR 0 9
41925: NOT
41926: PUSH
41927: LD_VAR 0 11
41931: NOT
41932: OR
41933: PUSH
41934: LD_VAR 0 12
41938: NOT
41939: OR
41940: PUSH
41941: LD_VAR 0 10
41945: NOT
41946: OR
41947: IFFALSE 41982
// begin result := [ chassis , engine , control , weapon ] ;
41949: LD_ADDR_VAR 0 6
41953: PUSH
41954: LD_VAR 0 2
41958: PUSH
41959: LD_VAR 0 3
41963: PUSH
41964: LD_VAR 0 4
41968: PUSH
41969: LD_VAR 0 5
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: ST_TO_ADDR
// exit ;
41980: GO 42273
// end ; if not chassis in _chassis then
41982: LD_VAR 0 2
41986: PUSH
41987: LD_VAR 0 9
41991: IN
41992: NOT
41993: IFFALSE 42019
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41995: LD_ADDR_VAR 0 2
41999: PUSH
42000: LD_VAR 0 9
42004: PUSH
42005: LD_INT 1
42007: PPUSH
42008: LD_VAR 0 9
42012: PPUSH
42013: CALL_OW 12
42017: ARRAY
42018: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42019: LD_VAR 0 2
42023: PPUSH
42024: LD_VAR 0 3
42028: PPUSH
42029: CALL 42278 0 2
42033: NOT
42034: IFFALSE 42093
// repeat engine := _engine [ 1 ] ;
42036: LD_ADDR_VAR 0 3
42040: PUSH
42041: LD_VAR 0 11
42045: PUSH
42046: LD_INT 1
42048: ARRAY
42049: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42050: LD_ADDR_VAR 0 11
42054: PUSH
42055: LD_VAR 0 11
42059: PPUSH
42060: LD_INT 1
42062: PPUSH
42063: CALL_OW 3
42067: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42068: LD_VAR 0 2
42072: PPUSH
42073: LD_VAR 0 3
42077: PPUSH
42078: CALL 42278 0 2
42082: PUSH
42083: LD_VAR 0 11
42087: PUSH
42088: EMPTY
42089: EQUAL
42090: OR
42091: IFFALSE 42036
// if not control in _control then
42093: LD_VAR 0 4
42097: PUSH
42098: LD_VAR 0 12
42102: IN
42103: NOT
42104: IFFALSE 42130
// control := _control [ rand ( 1 , _control ) ] ;
42106: LD_ADDR_VAR 0 4
42110: PUSH
42111: LD_VAR 0 12
42115: PUSH
42116: LD_INT 1
42118: PPUSH
42119: LD_VAR 0 12
42123: PPUSH
42124: CALL_OW 12
42128: ARRAY
42129: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42130: LD_VAR 0 2
42134: PPUSH
42135: LD_VAR 0 5
42139: PPUSH
42140: CALL 42498 0 2
42144: NOT
42145: IFFALSE 42204
// repeat weapon := _weapon [ 1 ] ;
42147: LD_ADDR_VAR 0 5
42151: PUSH
42152: LD_VAR 0 10
42156: PUSH
42157: LD_INT 1
42159: ARRAY
42160: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42161: LD_ADDR_VAR 0 10
42165: PUSH
42166: LD_VAR 0 10
42170: PPUSH
42171: LD_INT 1
42173: PPUSH
42174: CALL_OW 3
42178: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42179: LD_VAR 0 2
42183: PPUSH
42184: LD_VAR 0 5
42188: PPUSH
42189: CALL 42498 0 2
42193: PUSH
42194: LD_VAR 0 10
42198: PUSH
42199: EMPTY
42200: EQUAL
42201: OR
42202: IFFALSE 42147
// result := [ ] ;
42204: LD_ADDR_VAR 0 6
42208: PUSH
42209: EMPTY
42210: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42211: LD_VAR 0 1
42215: PPUSH
42216: LD_VAR 0 2
42220: PPUSH
42221: LD_VAR 0 3
42225: PPUSH
42226: LD_VAR 0 4
42230: PPUSH
42231: LD_VAR 0 5
42235: PPUSH
42236: CALL_OW 448
42240: IFFALSE 42273
// result := [ chassis , engine , control , weapon ] ;
42242: LD_ADDR_VAR 0 6
42246: PUSH
42247: LD_VAR 0 2
42251: PUSH
42252: LD_VAR 0 3
42256: PUSH
42257: LD_VAR 0 4
42261: PUSH
42262: LD_VAR 0 5
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: ST_TO_ADDR
// end ;
42273: LD_VAR 0 6
42277: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42278: LD_INT 0
42280: PPUSH
// if not chassis or not engine then
42281: LD_VAR 0 1
42285: NOT
42286: PUSH
42287: LD_VAR 0 2
42291: NOT
42292: OR
42293: IFFALSE 42297
// exit ;
42295: GO 42493
// case engine of engine_solar :
42297: LD_VAR 0 2
42301: PUSH
42302: LD_INT 2
42304: DOUBLE
42305: EQUAL
42306: IFTRUE 42310
42308: GO 42348
42310: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42311: LD_ADDR_VAR 0 3
42315: PUSH
42316: LD_INT 11
42318: PUSH
42319: LD_INT 12
42321: PUSH
42322: LD_INT 13
42324: PUSH
42325: LD_INT 14
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: LD_INT 2
42333: PUSH
42334: LD_INT 3
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: ST_TO_ADDR
42346: GO 42477
42348: LD_INT 1
42350: DOUBLE
42351: EQUAL
42352: IFTRUE 42356
42354: GO 42418
42356: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42357: LD_ADDR_VAR 0 3
42361: PUSH
42362: LD_INT 11
42364: PUSH
42365: LD_INT 12
42367: PUSH
42368: LD_INT 13
42370: PUSH
42371: LD_INT 14
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: LD_INT 2
42379: PUSH
42380: LD_INT 3
42382: PUSH
42383: LD_INT 4
42385: PUSH
42386: LD_INT 5
42388: PUSH
42389: LD_INT 21
42391: PUSH
42392: LD_INT 23
42394: PUSH
42395: LD_INT 22
42397: PUSH
42398: LD_INT 24
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: ST_TO_ADDR
42416: GO 42477
42418: LD_INT 3
42420: DOUBLE
42421: EQUAL
42422: IFTRUE 42426
42424: GO 42476
42426: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42427: LD_ADDR_VAR 0 3
42431: PUSH
42432: LD_INT 13
42434: PUSH
42435: LD_INT 14
42437: PUSH
42438: LD_INT 2
42440: PUSH
42441: LD_INT 3
42443: PUSH
42444: LD_INT 4
42446: PUSH
42447: LD_INT 5
42449: PUSH
42450: LD_INT 21
42452: PUSH
42453: LD_INT 22
42455: PUSH
42456: LD_INT 23
42458: PUSH
42459: LD_INT 24
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: ST_TO_ADDR
42474: GO 42477
42476: POP
// result := ( chassis in result ) ;
42477: LD_ADDR_VAR 0 3
42481: PUSH
42482: LD_VAR 0 1
42486: PUSH
42487: LD_VAR 0 3
42491: IN
42492: ST_TO_ADDR
// end ;
42493: LD_VAR 0 3
42497: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42498: LD_INT 0
42500: PPUSH
// if not chassis or not weapon then
42501: LD_VAR 0 1
42505: NOT
42506: PUSH
42507: LD_VAR 0 2
42511: NOT
42512: OR
42513: IFFALSE 42517
// exit ;
42515: GO 43577
// case weapon of us_machine_gun :
42517: LD_VAR 0 2
42521: PUSH
42522: LD_INT 2
42524: DOUBLE
42525: EQUAL
42526: IFTRUE 42530
42528: GO 42560
42530: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42531: LD_ADDR_VAR 0 3
42535: PUSH
42536: LD_INT 1
42538: PUSH
42539: LD_INT 2
42541: PUSH
42542: LD_INT 3
42544: PUSH
42545: LD_INT 4
42547: PUSH
42548: LD_INT 5
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: ST_TO_ADDR
42558: GO 43561
42560: LD_INT 3
42562: DOUBLE
42563: EQUAL
42564: IFTRUE 42568
42566: GO 42598
42568: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42569: LD_ADDR_VAR 0 3
42573: PUSH
42574: LD_INT 1
42576: PUSH
42577: LD_INT 2
42579: PUSH
42580: LD_INT 3
42582: PUSH
42583: LD_INT 4
42585: PUSH
42586: LD_INT 5
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: ST_TO_ADDR
42596: GO 43561
42598: LD_INT 11
42600: DOUBLE
42601: EQUAL
42602: IFTRUE 42606
42604: GO 42636
42606: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42607: LD_ADDR_VAR 0 3
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: LD_INT 2
42617: PUSH
42618: LD_INT 3
42620: PUSH
42621: LD_INT 4
42623: PUSH
42624: LD_INT 5
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: ST_TO_ADDR
42634: GO 43561
42636: LD_INT 4
42638: DOUBLE
42639: EQUAL
42640: IFTRUE 42644
42642: GO 42670
42644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42645: LD_ADDR_VAR 0 3
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: LD_INT 3
42655: PUSH
42656: LD_INT 4
42658: PUSH
42659: LD_INT 5
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: ST_TO_ADDR
42668: GO 43561
42670: LD_INT 5
42672: DOUBLE
42673: EQUAL
42674: IFTRUE 42678
42676: GO 42704
42678: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42679: LD_ADDR_VAR 0 3
42683: PUSH
42684: LD_INT 2
42686: PUSH
42687: LD_INT 3
42689: PUSH
42690: LD_INT 4
42692: PUSH
42693: LD_INT 5
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: ST_TO_ADDR
42702: GO 43561
42704: LD_INT 9
42706: DOUBLE
42707: EQUAL
42708: IFTRUE 42712
42710: GO 42738
42712: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42713: LD_ADDR_VAR 0 3
42717: PUSH
42718: LD_INT 2
42720: PUSH
42721: LD_INT 3
42723: PUSH
42724: LD_INT 4
42726: PUSH
42727: LD_INT 5
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: ST_TO_ADDR
42736: GO 43561
42738: LD_INT 7
42740: DOUBLE
42741: EQUAL
42742: IFTRUE 42746
42744: GO 42772
42746: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42747: LD_ADDR_VAR 0 3
42751: PUSH
42752: LD_INT 2
42754: PUSH
42755: LD_INT 3
42757: PUSH
42758: LD_INT 4
42760: PUSH
42761: LD_INT 5
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: ST_TO_ADDR
42770: GO 43561
42772: LD_INT 12
42774: DOUBLE
42775: EQUAL
42776: IFTRUE 42780
42778: GO 42806
42780: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42781: LD_ADDR_VAR 0 3
42785: PUSH
42786: LD_INT 2
42788: PUSH
42789: LD_INT 3
42791: PUSH
42792: LD_INT 4
42794: PUSH
42795: LD_INT 5
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: ST_TO_ADDR
42804: GO 43561
42806: LD_INT 13
42808: DOUBLE
42809: EQUAL
42810: IFTRUE 42814
42812: GO 42840
42814: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42815: LD_ADDR_VAR 0 3
42819: PUSH
42820: LD_INT 2
42822: PUSH
42823: LD_INT 3
42825: PUSH
42826: LD_INT 4
42828: PUSH
42829: LD_INT 5
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: ST_TO_ADDR
42838: GO 43561
42840: LD_INT 14
42842: DOUBLE
42843: EQUAL
42844: IFTRUE 42848
42846: GO 42866
42848: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42849: LD_ADDR_VAR 0 3
42853: PUSH
42854: LD_INT 4
42856: PUSH
42857: LD_INT 5
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: ST_TO_ADDR
42864: GO 43561
42866: LD_INT 6
42868: DOUBLE
42869: EQUAL
42870: IFTRUE 42874
42872: GO 42892
42874: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42875: LD_ADDR_VAR 0 3
42879: PUSH
42880: LD_INT 4
42882: PUSH
42883: LD_INT 5
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: ST_TO_ADDR
42890: GO 43561
42892: LD_INT 10
42894: DOUBLE
42895: EQUAL
42896: IFTRUE 42900
42898: GO 42918
42900: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42901: LD_ADDR_VAR 0 3
42905: PUSH
42906: LD_INT 4
42908: PUSH
42909: LD_INT 5
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: ST_TO_ADDR
42916: GO 43561
42918: LD_INT 22
42920: DOUBLE
42921: EQUAL
42922: IFTRUE 42926
42924: GO 42952
42926: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42927: LD_ADDR_VAR 0 3
42931: PUSH
42932: LD_INT 11
42934: PUSH
42935: LD_INT 12
42937: PUSH
42938: LD_INT 13
42940: PUSH
42941: LD_INT 14
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: ST_TO_ADDR
42950: GO 43561
42952: LD_INT 23
42954: DOUBLE
42955: EQUAL
42956: IFTRUE 42960
42958: GO 42986
42960: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42961: LD_ADDR_VAR 0 3
42965: PUSH
42966: LD_INT 11
42968: PUSH
42969: LD_INT 12
42971: PUSH
42972: LD_INT 13
42974: PUSH
42975: LD_INT 14
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: ST_TO_ADDR
42984: GO 43561
42986: LD_INT 24
42988: DOUBLE
42989: EQUAL
42990: IFTRUE 42994
42992: GO 43020
42994: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42995: LD_ADDR_VAR 0 3
42999: PUSH
43000: LD_INT 11
43002: PUSH
43003: LD_INT 12
43005: PUSH
43006: LD_INT 13
43008: PUSH
43009: LD_INT 14
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: ST_TO_ADDR
43018: GO 43561
43020: LD_INT 30
43022: DOUBLE
43023: EQUAL
43024: IFTRUE 43028
43026: GO 43054
43028: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43029: LD_ADDR_VAR 0 3
43033: PUSH
43034: LD_INT 11
43036: PUSH
43037: LD_INT 12
43039: PUSH
43040: LD_INT 13
43042: PUSH
43043: LD_INT 14
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: ST_TO_ADDR
43052: GO 43561
43054: LD_INT 25
43056: DOUBLE
43057: EQUAL
43058: IFTRUE 43062
43060: GO 43080
43062: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43063: LD_ADDR_VAR 0 3
43067: PUSH
43068: LD_INT 13
43070: PUSH
43071: LD_INT 14
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: ST_TO_ADDR
43078: GO 43561
43080: LD_INT 27
43082: DOUBLE
43083: EQUAL
43084: IFTRUE 43088
43086: GO 43106
43088: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43089: LD_ADDR_VAR 0 3
43093: PUSH
43094: LD_INT 13
43096: PUSH
43097: LD_INT 14
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: ST_TO_ADDR
43104: GO 43561
43106: LD_INT 92
43108: DOUBLE
43109: EQUAL
43110: IFTRUE 43114
43112: GO 43140
43114: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43115: LD_ADDR_VAR 0 3
43119: PUSH
43120: LD_INT 11
43122: PUSH
43123: LD_INT 12
43125: PUSH
43126: LD_INT 13
43128: PUSH
43129: LD_INT 14
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: ST_TO_ADDR
43138: GO 43561
43140: LD_INT 28
43142: DOUBLE
43143: EQUAL
43144: IFTRUE 43148
43146: GO 43166
43148: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43149: LD_ADDR_VAR 0 3
43153: PUSH
43154: LD_INT 13
43156: PUSH
43157: LD_INT 14
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: ST_TO_ADDR
43164: GO 43561
43166: LD_INT 29
43168: DOUBLE
43169: EQUAL
43170: IFTRUE 43174
43172: GO 43192
43174: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43175: LD_ADDR_VAR 0 3
43179: PUSH
43180: LD_INT 13
43182: PUSH
43183: LD_INT 14
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: ST_TO_ADDR
43190: GO 43561
43192: LD_INT 31
43194: DOUBLE
43195: EQUAL
43196: IFTRUE 43200
43198: GO 43218
43200: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43201: LD_ADDR_VAR 0 3
43205: PUSH
43206: LD_INT 13
43208: PUSH
43209: LD_INT 14
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: ST_TO_ADDR
43216: GO 43561
43218: LD_INT 26
43220: DOUBLE
43221: EQUAL
43222: IFTRUE 43226
43224: GO 43244
43226: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43227: LD_ADDR_VAR 0 3
43231: PUSH
43232: LD_INT 13
43234: PUSH
43235: LD_INT 14
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: ST_TO_ADDR
43242: GO 43561
43244: LD_INT 42
43246: DOUBLE
43247: EQUAL
43248: IFTRUE 43252
43250: GO 43278
43252: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43253: LD_ADDR_VAR 0 3
43257: PUSH
43258: LD_INT 21
43260: PUSH
43261: LD_INT 22
43263: PUSH
43264: LD_INT 23
43266: PUSH
43267: LD_INT 24
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: ST_TO_ADDR
43276: GO 43561
43278: LD_INT 43
43280: DOUBLE
43281: EQUAL
43282: IFTRUE 43286
43284: GO 43312
43286: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43287: LD_ADDR_VAR 0 3
43291: PUSH
43292: LD_INT 21
43294: PUSH
43295: LD_INT 22
43297: PUSH
43298: LD_INT 23
43300: PUSH
43301: LD_INT 24
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: ST_TO_ADDR
43310: GO 43561
43312: LD_INT 44
43314: DOUBLE
43315: EQUAL
43316: IFTRUE 43320
43318: GO 43346
43320: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43321: LD_ADDR_VAR 0 3
43325: PUSH
43326: LD_INT 21
43328: PUSH
43329: LD_INT 22
43331: PUSH
43332: LD_INT 23
43334: PUSH
43335: LD_INT 24
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: ST_TO_ADDR
43344: GO 43561
43346: LD_INT 45
43348: DOUBLE
43349: EQUAL
43350: IFTRUE 43354
43352: GO 43380
43354: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43355: LD_ADDR_VAR 0 3
43359: PUSH
43360: LD_INT 21
43362: PUSH
43363: LD_INT 22
43365: PUSH
43366: LD_INT 23
43368: PUSH
43369: LD_INT 24
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: ST_TO_ADDR
43378: GO 43561
43380: LD_INT 49
43382: DOUBLE
43383: EQUAL
43384: IFTRUE 43388
43386: GO 43414
43388: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43389: LD_ADDR_VAR 0 3
43393: PUSH
43394: LD_INT 21
43396: PUSH
43397: LD_INT 22
43399: PUSH
43400: LD_INT 23
43402: PUSH
43403: LD_INT 24
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: ST_TO_ADDR
43412: GO 43561
43414: LD_INT 51
43416: DOUBLE
43417: EQUAL
43418: IFTRUE 43422
43420: GO 43448
43422: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43423: LD_ADDR_VAR 0 3
43427: PUSH
43428: LD_INT 21
43430: PUSH
43431: LD_INT 22
43433: PUSH
43434: LD_INT 23
43436: PUSH
43437: LD_INT 24
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: ST_TO_ADDR
43446: GO 43561
43448: LD_INT 52
43450: DOUBLE
43451: EQUAL
43452: IFTRUE 43456
43454: GO 43482
43456: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43457: LD_ADDR_VAR 0 3
43461: PUSH
43462: LD_INT 21
43464: PUSH
43465: LD_INT 22
43467: PUSH
43468: LD_INT 23
43470: PUSH
43471: LD_INT 24
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: ST_TO_ADDR
43480: GO 43561
43482: LD_INT 53
43484: DOUBLE
43485: EQUAL
43486: IFTRUE 43490
43488: GO 43508
43490: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43491: LD_ADDR_VAR 0 3
43495: PUSH
43496: LD_INT 23
43498: PUSH
43499: LD_INT 24
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: ST_TO_ADDR
43506: GO 43561
43508: LD_INT 46
43510: DOUBLE
43511: EQUAL
43512: IFTRUE 43516
43514: GO 43534
43516: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43517: LD_ADDR_VAR 0 3
43521: PUSH
43522: LD_INT 23
43524: PUSH
43525: LD_INT 24
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: ST_TO_ADDR
43532: GO 43561
43534: LD_INT 47
43536: DOUBLE
43537: EQUAL
43538: IFTRUE 43542
43540: GO 43560
43542: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43543: LD_ADDR_VAR 0 3
43547: PUSH
43548: LD_INT 23
43550: PUSH
43551: LD_INT 24
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: ST_TO_ADDR
43558: GO 43561
43560: POP
// result := ( chassis in result ) ;
43561: LD_ADDR_VAR 0 3
43565: PUSH
43566: LD_VAR 0 1
43570: PUSH
43571: LD_VAR 0 3
43575: IN
43576: ST_TO_ADDR
// end ;
43577: LD_VAR 0 3
43581: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43582: LD_INT 0
43584: PPUSH
43585: PPUSH
43586: PPUSH
43587: PPUSH
43588: PPUSH
43589: PPUSH
43590: PPUSH
// result := array ;
43591: LD_ADDR_VAR 0 5
43595: PUSH
43596: LD_VAR 0 1
43600: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43601: LD_VAR 0 1
43605: NOT
43606: PUSH
43607: LD_VAR 0 2
43611: NOT
43612: OR
43613: PUSH
43614: LD_VAR 0 3
43618: NOT
43619: OR
43620: PUSH
43621: LD_VAR 0 2
43625: PUSH
43626: LD_VAR 0 1
43630: GREATER
43631: OR
43632: PUSH
43633: LD_VAR 0 3
43637: PUSH
43638: LD_VAR 0 1
43642: GREATER
43643: OR
43644: IFFALSE 43648
// exit ;
43646: GO 43944
// if direction then
43648: LD_VAR 0 4
43652: IFFALSE 43716
// begin d := 1 ;
43654: LD_ADDR_VAR 0 9
43658: PUSH
43659: LD_INT 1
43661: ST_TO_ADDR
// if i_from > i_to then
43662: LD_VAR 0 2
43666: PUSH
43667: LD_VAR 0 3
43671: GREATER
43672: IFFALSE 43698
// length := ( array - i_from ) + i_to else
43674: LD_ADDR_VAR 0 11
43678: PUSH
43679: LD_VAR 0 1
43683: PUSH
43684: LD_VAR 0 2
43688: MINUS
43689: PUSH
43690: LD_VAR 0 3
43694: PLUS
43695: ST_TO_ADDR
43696: GO 43714
// length := i_to - i_from ;
43698: LD_ADDR_VAR 0 11
43702: PUSH
43703: LD_VAR 0 3
43707: PUSH
43708: LD_VAR 0 2
43712: MINUS
43713: ST_TO_ADDR
// end else
43714: GO 43777
// begin d := - 1 ;
43716: LD_ADDR_VAR 0 9
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: ST_TO_ADDR
// if i_from > i_to then
43725: LD_VAR 0 2
43729: PUSH
43730: LD_VAR 0 3
43734: GREATER
43735: IFFALSE 43755
// length := i_from - i_to else
43737: LD_ADDR_VAR 0 11
43741: PUSH
43742: LD_VAR 0 2
43746: PUSH
43747: LD_VAR 0 3
43751: MINUS
43752: ST_TO_ADDR
43753: GO 43777
// length := ( array - i_to ) + i_from ;
43755: LD_ADDR_VAR 0 11
43759: PUSH
43760: LD_VAR 0 1
43764: PUSH
43765: LD_VAR 0 3
43769: MINUS
43770: PUSH
43771: LD_VAR 0 2
43775: PLUS
43776: ST_TO_ADDR
// end ; if not length then
43777: LD_VAR 0 11
43781: NOT
43782: IFFALSE 43786
// exit ;
43784: GO 43944
// tmp := array ;
43786: LD_ADDR_VAR 0 10
43790: PUSH
43791: LD_VAR 0 1
43795: ST_TO_ADDR
// for i = 1 to length do
43796: LD_ADDR_VAR 0 6
43800: PUSH
43801: DOUBLE
43802: LD_INT 1
43804: DEC
43805: ST_TO_ADDR
43806: LD_VAR 0 11
43810: PUSH
43811: FOR_TO
43812: IFFALSE 43932
// begin for j = 1 to array do
43814: LD_ADDR_VAR 0 7
43818: PUSH
43819: DOUBLE
43820: LD_INT 1
43822: DEC
43823: ST_TO_ADDR
43824: LD_VAR 0 1
43828: PUSH
43829: FOR_TO
43830: IFFALSE 43918
// begin k := j + d ;
43832: LD_ADDR_VAR 0 8
43836: PUSH
43837: LD_VAR 0 7
43841: PUSH
43842: LD_VAR 0 9
43846: PLUS
43847: ST_TO_ADDR
// if k > array then
43848: LD_VAR 0 8
43852: PUSH
43853: LD_VAR 0 1
43857: GREATER
43858: IFFALSE 43868
// k := 1 ;
43860: LD_ADDR_VAR 0 8
43864: PUSH
43865: LD_INT 1
43867: ST_TO_ADDR
// if not k then
43868: LD_VAR 0 8
43872: NOT
43873: IFFALSE 43885
// k := array ;
43875: LD_ADDR_VAR 0 8
43879: PUSH
43880: LD_VAR 0 1
43884: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43885: LD_ADDR_VAR 0 10
43889: PUSH
43890: LD_VAR 0 10
43894: PPUSH
43895: LD_VAR 0 8
43899: PPUSH
43900: LD_VAR 0 1
43904: PUSH
43905: LD_VAR 0 7
43909: ARRAY
43910: PPUSH
43911: CALL_OW 1
43915: ST_TO_ADDR
// end ;
43916: GO 43829
43918: POP
43919: POP
// array := tmp ;
43920: LD_ADDR_VAR 0 1
43924: PUSH
43925: LD_VAR 0 10
43929: ST_TO_ADDR
// end ;
43930: GO 43811
43932: POP
43933: POP
// result := array ;
43934: LD_ADDR_VAR 0 5
43938: PUSH
43939: LD_VAR 0 1
43943: ST_TO_ADDR
// end ;
43944: LD_VAR 0 5
43948: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43949: LD_INT 0
43951: PPUSH
43952: PPUSH
// result := 0 ;
43953: LD_ADDR_VAR 0 3
43957: PUSH
43958: LD_INT 0
43960: ST_TO_ADDR
// if not array or not value in array then
43961: LD_VAR 0 1
43965: NOT
43966: PUSH
43967: LD_VAR 0 2
43971: PUSH
43972: LD_VAR 0 1
43976: IN
43977: NOT
43978: OR
43979: IFFALSE 43983
// exit ;
43981: GO 44037
// for i = 1 to array do
43983: LD_ADDR_VAR 0 4
43987: PUSH
43988: DOUBLE
43989: LD_INT 1
43991: DEC
43992: ST_TO_ADDR
43993: LD_VAR 0 1
43997: PUSH
43998: FOR_TO
43999: IFFALSE 44035
// if value = array [ i ] then
44001: LD_VAR 0 2
44005: PUSH
44006: LD_VAR 0 1
44010: PUSH
44011: LD_VAR 0 4
44015: ARRAY
44016: EQUAL
44017: IFFALSE 44033
// begin result := i ;
44019: LD_ADDR_VAR 0 3
44023: PUSH
44024: LD_VAR 0 4
44028: ST_TO_ADDR
// exit ;
44029: POP
44030: POP
44031: GO 44037
// end ;
44033: GO 43998
44035: POP
44036: POP
// end ;
44037: LD_VAR 0 3
44041: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44042: LD_INT 0
44044: PPUSH
// vc_chassis := chassis ;
44045: LD_ADDR_OWVAR 37
44049: PUSH
44050: LD_VAR 0 1
44054: ST_TO_ADDR
// vc_engine := engine ;
44055: LD_ADDR_OWVAR 39
44059: PUSH
44060: LD_VAR 0 2
44064: ST_TO_ADDR
// vc_control := control ;
44065: LD_ADDR_OWVAR 38
44069: PUSH
44070: LD_VAR 0 3
44074: ST_TO_ADDR
// vc_weapon := weapon ;
44075: LD_ADDR_OWVAR 40
44079: PUSH
44080: LD_VAR 0 4
44084: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44085: LD_ADDR_OWVAR 41
44089: PUSH
44090: LD_VAR 0 5
44094: ST_TO_ADDR
// end ;
44095: LD_VAR 0 6
44099: RET
// export function WantPlant ( unit ) ; var task ; begin
44100: LD_INT 0
44102: PPUSH
44103: PPUSH
// result := false ;
44104: LD_ADDR_VAR 0 2
44108: PUSH
44109: LD_INT 0
44111: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44112: LD_ADDR_VAR 0 3
44116: PUSH
44117: LD_VAR 0 1
44121: PPUSH
44122: CALL_OW 437
44126: ST_TO_ADDR
// if task then
44127: LD_VAR 0 3
44131: IFFALSE 44159
// if task [ 1 ] [ 1 ] = p then
44133: LD_VAR 0 3
44137: PUSH
44138: LD_INT 1
44140: ARRAY
44141: PUSH
44142: LD_INT 1
44144: ARRAY
44145: PUSH
44146: LD_STRING p
44148: EQUAL
44149: IFFALSE 44159
// result := true ;
44151: LD_ADDR_VAR 0 2
44155: PUSH
44156: LD_INT 1
44158: ST_TO_ADDR
// end ;
44159: LD_VAR 0 2
44163: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44164: LD_INT 0
44166: PPUSH
44167: PPUSH
44168: PPUSH
44169: PPUSH
// if pos < 1 then
44170: LD_VAR 0 2
44174: PUSH
44175: LD_INT 1
44177: LESS
44178: IFFALSE 44182
// exit ;
44180: GO 44485
// if pos = 1 then
44182: LD_VAR 0 2
44186: PUSH
44187: LD_INT 1
44189: EQUAL
44190: IFFALSE 44223
// result := Replace ( arr , pos [ 1 ] , value ) else
44192: LD_ADDR_VAR 0 4
44196: PUSH
44197: LD_VAR 0 1
44201: PPUSH
44202: LD_VAR 0 2
44206: PUSH
44207: LD_INT 1
44209: ARRAY
44210: PPUSH
44211: LD_VAR 0 3
44215: PPUSH
44216: CALL_OW 1
44220: ST_TO_ADDR
44221: GO 44485
// begin tmp := arr ;
44223: LD_ADDR_VAR 0 6
44227: PUSH
44228: LD_VAR 0 1
44232: ST_TO_ADDR
// s_arr := [ tmp ] ;
44233: LD_ADDR_VAR 0 7
44237: PUSH
44238: LD_VAR 0 6
44242: PUSH
44243: EMPTY
44244: LIST
44245: ST_TO_ADDR
// for i = 1 to pos - 1 do
44246: LD_ADDR_VAR 0 5
44250: PUSH
44251: DOUBLE
44252: LD_INT 1
44254: DEC
44255: ST_TO_ADDR
44256: LD_VAR 0 2
44260: PUSH
44261: LD_INT 1
44263: MINUS
44264: PUSH
44265: FOR_TO
44266: IFFALSE 44311
// begin tmp := tmp [ pos [ i ] ] ;
44268: LD_ADDR_VAR 0 6
44272: PUSH
44273: LD_VAR 0 6
44277: PUSH
44278: LD_VAR 0 2
44282: PUSH
44283: LD_VAR 0 5
44287: ARRAY
44288: ARRAY
44289: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44290: LD_ADDR_VAR 0 7
44294: PUSH
44295: LD_VAR 0 7
44299: PUSH
44300: LD_VAR 0 6
44304: PUSH
44305: EMPTY
44306: LIST
44307: ADD
44308: ST_TO_ADDR
// end ;
44309: GO 44265
44311: POP
44312: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44313: LD_ADDR_VAR 0 6
44317: PUSH
44318: LD_VAR 0 6
44322: PPUSH
44323: LD_VAR 0 2
44327: PUSH
44328: LD_VAR 0 2
44332: ARRAY
44333: PPUSH
44334: LD_VAR 0 3
44338: PPUSH
44339: CALL_OW 1
44343: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44344: LD_ADDR_VAR 0 7
44348: PUSH
44349: LD_VAR 0 7
44353: PPUSH
44354: LD_VAR 0 7
44358: PPUSH
44359: LD_VAR 0 6
44363: PPUSH
44364: CALL_OW 1
44368: ST_TO_ADDR
// for i = s_arr downto 2 do
44369: LD_ADDR_VAR 0 5
44373: PUSH
44374: DOUBLE
44375: LD_VAR 0 7
44379: INC
44380: ST_TO_ADDR
44381: LD_INT 2
44383: PUSH
44384: FOR_DOWNTO
44385: IFFALSE 44469
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44387: LD_ADDR_VAR 0 6
44391: PUSH
44392: LD_VAR 0 7
44396: PUSH
44397: LD_VAR 0 5
44401: PUSH
44402: LD_INT 1
44404: MINUS
44405: ARRAY
44406: PPUSH
44407: LD_VAR 0 2
44411: PUSH
44412: LD_VAR 0 5
44416: PUSH
44417: LD_INT 1
44419: MINUS
44420: ARRAY
44421: PPUSH
44422: LD_VAR 0 7
44426: PUSH
44427: LD_VAR 0 5
44431: ARRAY
44432: PPUSH
44433: CALL_OW 1
44437: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44438: LD_ADDR_VAR 0 7
44442: PUSH
44443: LD_VAR 0 7
44447: PPUSH
44448: LD_VAR 0 5
44452: PUSH
44453: LD_INT 1
44455: MINUS
44456: PPUSH
44457: LD_VAR 0 6
44461: PPUSH
44462: CALL_OW 1
44466: ST_TO_ADDR
// end ;
44467: GO 44384
44469: POP
44470: POP
// result := s_arr [ 1 ] ;
44471: LD_ADDR_VAR 0 4
44475: PUSH
44476: LD_VAR 0 7
44480: PUSH
44481: LD_INT 1
44483: ARRAY
44484: ST_TO_ADDR
// end ; end ;
44485: LD_VAR 0 4
44489: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44490: LD_INT 0
44492: PPUSH
44493: PPUSH
// if not list then
44494: LD_VAR 0 1
44498: NOT
44499: IFFALSE 44503
// exit ;
44501: GO 44594
// i := list [ pos1 ] ;
44503: LD_ADDR_VAR 0 5
44507: PUSH
44508: LD_VAR 0 1
44512: PUSH
44513: LD_VAR 0 2
44517: ARRAY
44518: ST_TO_ADDR
// if not i then
44519: LD_VAR 0 5
44523: NOT
44524: IFFALSE 44528
// exit ;
44526: GO 44594
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44528: LD_ADDR_VAR 0 1
44532: PUSH
44533: LD_VAR 0 1
44537: PPUSH
44538: LD_VAR 0 2
44542: PPUSH
44543: LD_VAR 0 1
44547: PUSH
44548: LD_VAR 0 3
44552: ARRAY
44553: PPUSH
44554: CALL_OW 1
44558: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44559: LD_ADDR_VAR 0 1
44563: PUSH
44564: LD_VAR 0 1
44568: PPUSH
44569: LD_VAR 0 3
44573: PPUSH
44574: LD_VAR 0 5
44578: PPUSH
44579: CALL_OW 1
44583: ST_TO_ADDR
// result := list ;
44584: LD_ADDR_VAR 0 4
44588: PUSH
44589: LD_VAR 0 1
44593: ST_TO_ADDR
// end ;
44594: LD_VAR 0 4
44598: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44599: LD_INT 0
44601: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44602: LD_ADDR_VAR 0 5
44606: PUSH
44607: LD_VAR 0 1
44611: PPUSH
44612: CALL_OW 250
44616: PPUSH
44617: LD_VAR 0 1
44621: PPUSH
44622: CALL_OW 251
44626: PPUSH
44627: LD_VAR 0 2
44631: PPUSH
44632: LD_VAR 0 3
44636: PPUSH
44637: LD_VAR 0 4
44641: PPUSH
44642: CALL 44652 0 5
44646: ST_TO_ADDR
// end ;
44647: LD_VAR 0 5
44651: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44652: LD_INT 0
44654: PPUSH
44655: PPUSH
44656: PPUSH
44657: PPUSH
// if not list then
44658: LD_VAR 0 3
44662: NOT
44663: IFFALSE 44667
// exit ;
44665: GO 45055
// result := [ ] ;
44667: LD_ADDR_VAR 0 6
44671: PUSH
44672: EMPTY
44673: ST_TO_ADDR
// for i in list do
44674: LD_ADDR_VAR 0 7
44678: PUSH
44679: LD_VAR 0 3
44683: PUSH
44684: FOR_IN
44685: IFFALSE 44887
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44687: LD_ADDR_VAR 0 9
44691: PUSH
44692: LD_VAR 0 7
44696: PPUSH
44697: LD_VAR 0 1
44701: PPUSH
44702: LD_VAR 0 2
44706: PPUSH
44707: CALL_OW 297
44711: ST_TO_ADDR
// if not result then
44712: LD_VAR 0 6
44716: NOT
44717: IFFALSE 44743
// result := [ [ i , tmp ] ] else
44719: LD_ADDR_VAR 0 6
44723: PUSH
44724: LD_VAR 0 7
44728: PUSH
44729: LD_VAR 0 9
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: EMPTY
44739: LIST
44740: ST_TO_ADDR
44741: GO 44885
// begin if result [ result ] [ 2 ] < tmp then
44743: LD_VAR 0 6
44747: PUSH
44748: LD_VAR 0 6
44752: ARRAY
44753: PUSH
44754: LD_INT 2
44756: ARRAY
44757: PUSH
44758: LD_VAR 0 9
44762: LESS
44763: IFFALSE 44805
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44765: LD_ADDR_VAR 0 6
44769: PUSH
44770: LD_VAR 0 6
44774: PPUSH
44775: LD_VAR 0 6
44779: PUSH
44780: LD_INT 1
44782: PLUS
44783: PPUSH
44784: LD_VAR 0 7
44788: PUSH
44789: LD_VAR 0 9
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PPUSH
44798: CALL_OW 2
44802: ST_TO_ADDR
44803: GO 44885
// for j = 1 to result do
44805: LD_ADDR_VAR 0 8
44809: PUSH
44810: DOUBLE
44811: LD_INT 1
44813: DEC
44814: ST_TO_ADDR
44815: LD_VAR 0 6
44819: PUSH
44820: FOR_TO
44821: IFFALSE 44883
// begin if tmp < result [ j ] [ 2 ] then
44823: LD_VAR 0 9
44827: PUSH
44828: LD_VAR 0 6
44832: PUSH
44833: LD_VAR 0 8
44837: ARRAY
44838: PUSH
44839: LD_INT 2
44841: ARRAY
44842: LESS
44843: IFFALSE 44881
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44845: LD_ADDR_VAR 0 6
44849: PUSH
44850: LD_VAR 0 6
44854: PPUSH
44855: LD_VAR 0 8
44859: PPUSH
44860: LD_VAR 0 7
44864: PUSH
44865: LD_VAR 0 9
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PPUSH
44874: CALL_OW 2
44878: ST_TO_ADDR
// break ;
44879: GO 44883
// end ; end ;
44881: GO 44820
44883: POP
44884: POP
// end ; end ;
44885: GO 44684
44887: POP
44888: POP
// if result and not asc then
44889: LD_VAR 0 6
44893: PUSH
44894: LD_VAR 0 4
44898: NOT
44899: AND
44900: IFFALSE 44975
// begin tmp := result ;
44902: LD_ADDR_VAR 0 9
44906: PUSH
44907: LD_VAR 0 6
44911: ST_TO_ADDR
// for i = tmp downto 1 do
44912: LD_ADDR_VAR 0 7
44916: PUSH
44917: DOUBLE
44918: LD_VAR 0 9
44922: INC
44923: ST_TO_ADDR
44924: LD_INT 1
44926: PUSH
44927: FOR_DOWNTO
44928: IFFALSE 44973
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44930: LD_ADDR_VAR 0 6
44934: PUSH
44935: LD_VAR 0 6
44939: PPUSH
44940: LD_VAR 0 9
44944: PUSH
44945: LD_VAR 0 7
44949: MINUS
44950: PUSH
44951: LD_INT 1
44953: PLUS
44954: PPUSH
44955: LD_VAR 0 9
44959: PUSH
44960: LD_VAR 0 7
44964: ARRAY
44965: PPUSH
44966: CALL_OW 1
44970: ST_TO_ADDR
44971: GO 44927
44973: POP
44974: POP
// end ; tmp := [ ] ;
44975: LD_ADDR_VAR 0 9
44979: PUSH
44980: EMPTY
44981: ST_TO_ADDR
// if mode then
44982: LD_VAR 0 5
44986: IFFALSE 45055
// begin for i = 1 to result do
44988: LD_ADDR_VAR 0 7
44992: PUSH
44993: DOUBLE
44994: LD_INT 1
44996: DEC
44997: ST_TO_ADDR
44998: LD_VAR 0 6
45002: PUSH
45003: FOR_TO
45004: IFFALSE 45043
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45006: LD_ADDR_VAR 0 9
45010: PUSH
45011: LD_VAR 0 9
45015: PPUSH
45016: LD_VAR 0 7
45020: PPUSH
45021: LD_VAR 0 6
45025: PUSH
45026: LD_VAR 0 7
45030: ARRAY
45031: PUSH
45032: LD_INT 1
45034: ARRAY
45035: PPUSH
45036: CALL_OW 1
45040: ST_TO_ADDR
45041: GO 45003
45043: POP
45044: POP
// result := tmp ;
45045: LD_ADDR_VAR 0 6
45049: PUSH
45050: LD_VAR 0 9
45054: ST_TO_ADDR
// end ; end ;
45055: LD_VAR 0 6
45059: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45060: LD_INT 0
45062: PPUSH
45063: PPUSH
45064: PPUSH
45065: PPUSH
45066: PPUSH
45067: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45068: LD_ADDR_VAR 0 5
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: EMPTY
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: ST_TO_ADDR
// if not x or not y then
45090: LD_VAR 0 2
45094: NOT
45095: PUSH
45096: LD_VAR 0 3
45100: NOT
45101: OR
45102: IFFALSE 45106
// exit ;
45104: GO 46756
// if not range then
45106: LD_VAR 0 4
45110: NOT
45111: IFFALSE 45121
// range := 10 ;
45113: LD_ADDR_VAR 0 4
45117: PUSH
45118: LD_INT 10
45120: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45121: LD_ADDR_VAR 0 8
45125: PUSH
45126: LD_INT 81
45128: PUSH
45129: LD_VAR 0 1
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 92
45140: PUSH
45141: LD_VAR 0 2
45145: PUSH
45146: LD_VAR 0 3
45150: PUSH
45151: LD_VAR 0 4
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 3
45164: PUSH
45165: LD_INT 21
45167: PUSH
45168: LD_INT 3
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: LIST
45183: PPUSH
45184: CALL_OW 69
45188: ST_TO_ADDR
// if not tmp then
45189: LD_VAR 0 8
45193: NOT
45194: IFFALSE 45198
// exit ;
45196: GO 46756
// for i in tmp do
45198: LD_ADDR_VAR 0 6
45202: PUSH
45203: LD_VAR 0 8
45207: PUSH
45208: FOR_IN
45209: IFFALSE 46731
// begin points := [ 0 , 0 , 0 ] ;
45211: LD_ADDR_VAR 0 9
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: LIST
45229: ST_TO_ADDR
// bpoints := 1 ;
45230: LD_ADDR_VAR 0 10
45234: PUSH
45235: LD_INT 1
45237: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45238: LD_VAR 0 6
45242: PPUSH
45243: CALL_OW 247
45247: PUSH
45248: LD_INT 1
45250: DOUBLE
45251: EQUAL
45252: IFTRUE 45256
45254: GO 45834
45256: POP
// begin if GetClass ( i ) = 1 then
45257: LD_VAR 0 6
45261: PPUSH
45262: CALL_OW 257
45266: PUSH
45267: LD_INT 1
45269: EQUAL
45270: IFFALSE 45291
// points := [ 10 , 5 , 3 ] ;
45272: LD_ADDR_VAR 0 9
45276: PUSH
45277: LD_INT 10
45279: PUSH
45280: LD_INT 5
45282: PUSH
45283: LD_INT 3
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: LIST
45290: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45291: LD_VAR 0 6
45295: PPUSH
45296: CALL_OW 257
45300: PUSH
45301: LD_INT 2
45303: PUSH
45304: LD_INT 3
45306: PUSH
45307: LD_INT 4
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: LIST
45314: IN
45315: IFFALSE 45336
// points := [ 3 , 2 , 1 ] ;
45317: LD_ADDR_VAR 0 9
45321: PUSH
45322: LD_INT 3
45324: PUSH
45325: LD_INT 2
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: LIST
45335: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45336: LD_VAR 0 6
45340: PPUSH
45341: CALL_OW 257
45345: PUSH
45346: LD_INT 5
45348: EQUAL
45349: IFFALSE 45370
// points := [ 130 , 5 , 2 ] ;
45351: LD_ADDR_VAR 0 9
45355: PUSH
45356: LD_INT 130
45358: PUSH
45359: LD_INT 5
45361: PUSH
45362: LD_INT 2
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: LIST
45369: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45370: LD_VAR 0 6
45374: PPUSH
45375: CALL_OW 257
45379: PUSH
45380: LD_INT 8
45382: EQUAL
45383: IFFALSE 45404
// points := [ 35 , 35 , 30 ] ;
45385: LD_ADDR_VAR 0 9
45389: PUSH
45390: LD_INT 35
45392: PUSH
45393: LD_INT 35
45395: PUSH
45396: LD_INT 30
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: LIST
45403: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45404: LD_VAR 0 6
45408: PPUSH
45409: CALL_OW 257
45413: PUSH
45414: LD_INT 9
45416: EQUAL
45417: IFFALSE 45438
// points := [ 20 , 55 , 40 ] ;
45419: LD_ADDR_VAR 0 9
45423: PUSH
45424: LD_INT 20
45426: PUSH
45427: LD_INT 55
45429: PUSH
45430: LD_INT 40
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: LIST
45437: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45438: LD_VAR 0 6
45442: PPUSH
45443: CALL_OW 257
45447: PUSH
45448: LD_INT 12
45450: PUSH
45451: LD_INT 16
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: IN
45458: IFFALSE 45479
// points := [ 5 , 3 , 2 ] ;
45460: LD_ADDR_VAR 0 9
45464: PUSH
45465: LD_INT 5
45467: PUSH
45468: LD_INT 3
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: LIST
45478: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45479: LD_VAR 0 6
45483: PPUSH
45484: CALL_OW 257
45488: PUSH
45489: LD_INT 17
45491: EQUAL
45492: IFFALSE 45513
// points := [ 100 , 50 , 75 ] ;
45494: LD_ADDR_VAR 0 9
45498: PUSH
45499: LD_INT 100
45501: PUSH
45502: LD_INT 50
45504: PUSH
45505: LD_INT 75
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: LIST
45512: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45513: LD_VAR 0 6
45517: PPUSH
45518: CALL_OW 257
45522: PUSH
45523: LD_INT 15
45525: EQUAL
45526: IFFALSE 45547
// points := [ 10 , 5 , 3 ] ;
45528: LD_ADDR_VAR 0 9
45532: PUSH
45533: LD_INT 10
45535: PUSH
45536: LD_INT 5
45538: PUSH
45539: LD_INT 3
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: LIST
45546: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45547: LD_VAR 0 6
45551: PPUSH
45552: CALL_OW 257
45556: PUSH
45557: LD_INT 14
45559: EQUAL
45560: IFFALSE 45581
// points := [ 10 , 0 , 0 ] ;
45562: LD_ADDR_VAR 0 9
45566: PUSH
45567: LD_INT 10
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: LIST
45580: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45581: LD_VAR 0 6
45585: PPUSH
45586: CALL_OW 257
45590: PUSH
45591: LD_INT 11
45593: EQUAL
45594: IFFALSE 45615
// points := [ 30 , 10 , 5 ] ;
45596: LD_ADDR_VAR 0 9
45600: PUSH
45601: LD_INT 30
45603: PUSH
45604: LD_INT 10
45606: PUSH
45607: LD_INT 5
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: LIST
45614: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45615: LD_VAR 0 1
45619: PPUSH
45620: LD_INT 5
45622: PPUSH
45623: CALL_OW 321
45627: PUSH
45628: LD_INT 2
45630: EQUAL
45631: IFFALSE 45648
// bpoints := bpoints * 1.8 ;
45633: LD_ADDR_VAR 0 10
45637: PUSH
45638: LD_VAR 0 10
45642: PUSH
45643: LD_REAL  1.80000000000000E+0000
45646: MUL
45647: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45648: LD_VAR 0 6
45652: PPUSH
45653: CALL_OW 257
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 3
45666: PUSH
45667: LD_INT 4
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: IN
45676: PUSH
45677: LD_VAR 0 1
45681: PPUSH
45682: LD_INT 51
45684: PPUSH
45685: CALL_OW 321
45689: PUSH
45690: LD_INT 2
45692: EQUAL
45693: AND
45694: IFFALSE 45711
// bpoints := bpoints * 1.2 ;
45696: LD_ADDR_VAR 0 10
45700: PUSH
45701: LD_VAR 0 10
45705: PUSH
45706: LD_REAL  1.20000000000000E+0000
45709: MUL
45710: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45711: LD_VAR 0 6
45715: PPUSH
45716: CALL_OW 257
45720: PUSH
45721: LD_INT 5
45723: PUSH
45724: LD_INT 7
45726: PUSH
45727: LD_INT 9
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: LIST
45734: IN
45735: PUSH
45736: LD_VAR 0 1
45740: PPUSH
45741: LD_INT 52
45743: PPUSH
45744: CALL_OW 321
45748: PUSH
45749: LD_INT 2
45751: EQUAL
45752: AND
45753: IFFALSE 45770
// bpoints := bpoints * 1.5 ;
45755: LD_ADDR_VAR 0 10
45759: PUSH
45760: LD_VAR 0 10
45764: PUSH
45765: LD_REAL  1.50000000000000E+0000
45768: MUL
45769: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45770: LD_VAR 0 1
45774: PPUSH
45775: LD_INT 66
45777: PPUSH
45778: CALL_OW 321
45782: PUSH
45783: LD_INT 2
45785: EQUAL
45786: IFFALSE 45803
// bpoints := bpoints * 1.1 ;
45788: LD_ADDR_VAR 0 10
45792: PUSH
45793: LD_VAR 0 10
45797: PUSH
45798: LD_REAL  1.10000000000000E+0000
45801: MUL
45802: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45803: LD_ADDR_VAR 0 10
45807: PUSH
45808: LD_VAR 0 10
45812: PUSH
45813: LD_VAR 0 6
45817: PPUSH
45818: LD_INT 1
45820: PPUSH
45821: CALL_OW 259
45825: PUSH
45826: LD_REAL  1.15000000000000E+0000
45829: MUL
45830: MUL
45831: ST_TO_ADDR
// end ; unit_vehicle :
45832: GO 46660
45834: LD_INT 2
45836: DOUBLE
45837: EQUAL
45838: IFTRUE 45842
45840: GO 46648
45842: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45843: LD_VAR 0 6
45847: PPUSH
45848: CALL_OW 264
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: LD_INT 42
45858: PUSH
45859: LD_INT 24
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: LIST
45866: IN
45867: IFFALSE 45888
// points := [ 25 , 5 , 3 ] ;
45869: LD_ADDR_VAR 0 9
45873: PUSH
45874: LD_INT 25
45876: PUSH
45877: LD_INT 5
45879: PUSH
45880: LD_INT 3
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: LIST
45887: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45888: LD_VAR 0 6
45892: PPUSH
45893: CALL_OW 264
45897: PUSH
45898: LD_INT 4
45900: PUSH
45901: LD_INT 43
45903: PUSH
45904: LD_INT 25
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: LIST
45911: IN
45912: IFFALSE 45933
// points := [ 40 , 15 , 5 ] ;
45914: LD_ADDR_VAR 0 9
45918: PUSH
45919: LD_INT 40
45921: PUSH
45922: LD_INT 15
45924: PUSH
45925: LD_INT 5
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: LIST
45932: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45933: LD_VAR 0 6
45937: PPUSH
45938: CALL_OW 264
45942: PUSH
45943: LD_INT 3
45945: PUSH
45946: LD_INT 23
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: IN
45953: IFFALSE 45974
// points := [ 7 , 25 , 8 ] ;
45955: LD_ADDR_VAR 0 9
45959: PUSH
45960: LD_INT 7
45962: PUSH
45963: LD_INT 25
45965: PUSH
45966: LD_INT 8
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: LIST
45973: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45974: LD_VAR 0 6
45978: PPUSH
45979: CALL_OW 264
45983: PUSH
45984: LD_INT 5
45986: PUSH
45987: LD_INT 27
45989: PUSH
45990: LD_INT 44
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: LIST
45997: IN
45998: IFFALSE 46019
// points := [ 14 , 50 , 16 ] ;
46000: LD_ADDR_VAR 0 9
46004: PUSH
46005: LD_INT 14
46007: PUSH
46008: LD_INT 50
46010: PUSH
46011: LD_INT 16
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: LIST
46018: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46019: LD_VAR 0 6
46023: PPUSH
46024: CALL_OW 264
46028: PUSH
46029: LD_INT 6
46031: PUSH
46032: LD_INT 46
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: IN
46039: IFFALSE 46060
// points := [ 32 , 120 , 70 ] ;
46041: LD_ADDR_VAR 0 9
46045: PUSH
46046: LD_INT 32
46048: PUSH
46049: LD_INT 120
46051: PUSH
46052: LD_INT 70
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: LIST
46059: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46060: LD_VAR 0 6
46064: PPUSH
46065: CALL_OW 264
46069: PUSH
46070: LD_INT 7
46072: PUSH
46073: LD_INT 28
46075: PUSH
46076: LD_INT 45
46078: PUSH
46079: LD_INT 92
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: IN
46088: IFFALSE 46109
// points := [ 35 , 20 , 45 ] ;
46090: LD_ADDR_VAR 0 9
46094: PUSH
46095: LD_INT 35
46097: PUSH
46098: LD_INT 20
46100: PUSH
46101: LD_INT 45
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: LIST
46108: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46109: LD_VAR 0 6
46113: PPUSH
46114: CALL_OW 264
46118: PUSH
46119: LD_INT 47
46121: PUSH
46122: EMPTY
46123: LIST
46124: IN
46125: IFFALSE 46146
// points := [ 67 , 45 , 75 ] ;
46127: LD_ADDR_VAR 0 9
46131: PUSH
46132: LD_INT 67
46134: PUSH
46135: LD_INT 45
46137: PUSH
46138: LD_INT 75
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: LIST
46145: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46146: LD_VAR 0 6
46150: PPUSH
46151: CALL_OW 264
46155: PUSH
46156: LD_INT 26
46158: PUSH
46159: EMPTY
46160: LIST
46161: IN
46162: IFFALSE 46183
// points := [ 120 , 30 , 80 ] ;
46164: LD_ADDR_VAR 0 9
46168: PUSH
46169: LD_INT 120
46171: PUSH
46172: LD_INT 30
46174: PUSH
46175: LD_INT 80
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: LIST
46182: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46183: LD_VAR 0 6
46187: PPUSH
46188: CALL_OW 264
46192: PUSH
46193: LD_INT 22
46195: PUSH
46196: EMPTY
46197: LIST
46198: IN
46199: IFFALSE 46220
// points := [ 40 , 1 , 1 ] ;
46201: LD_ADDR_VAR 0 9
46205: PUSH
46206: LD_INT 40
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: LIST
46219: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46220: LD_VAR 0 6
46224: PPUSH
46225: CALL_OW 264
46229: PUSH
46230: LD_INT 29
46232: PUSH
46233: EMPTY
46234: LIST
46235: IN
46236: IFFALSE 46257
// points := [ 70 , 200 , 400 ] ;
46238: LD_ADDR_VAR 0 9
46242: PUSH
46243: LD_INT 70
46245: PUSH
46246: LD_INT 200
46248: PUSH
46249: LD_INT 400
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: LIST
46256: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46257: LD_VAR 0 6
46261: PPUSH
46262: CALL_OW 264
46266: PUSH
46267: LD_INT 14
46269: PUSH
46270: LD_INT 53
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: IN
46277: IFFALSE 46298
// points := [ 40 , 10 , 20 ] ;
46279: LD_ADDR_VAR 0 9
46283: PUSH
46284: LD_INT 40
46286: PUSH
46287: LD_INT 10
46289: PUSH
46290: LD_INT 20
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: LIST
46297: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46298: LD_VAR 0 6
46302: PPUSH
46303: CALL_OW 264
46307: PUSH
46308: LD_INT 9
46310: PUSH
46311: EMPTY
46312: LIST
46313: IN
46314: IFFALSE 46335
// points := [ 5 , 70 , 20 ] ;
46316: LD_ADDR_VAR 0 9
46320: PUSH
46321: LD_INT 5
46323: PUSH
46324: LD_INT 70
46326: PUSH
46327: LD_INT 20
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: LIST
46334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46335: LD_VAR 0 6
46339: PPUSH
46340: CALL_OW 264
46344: PUSH
46345: LD_INT 10
46347: PUSH
46348: EMPTY
46349: LIST
46350: IN
46351: IFFALSE 46372
// points := [ 35 , 110 , 70 ] ;
46353: LD_ADDR_VAR 0 9
46357: PUSH
46358: LD_INT 35
46360: PUSH
46361: LD_INT 110
46363: PUSH
46364: LD_INT 70
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: LIST
46371: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46372: LD_VAR 0 6
46376: PPUSH
46377: CALL_OW 265
46381: PUSH
46382: LD_INT 25
46384: EQUAL
46385: IFFALSE 46406
// points := [ 80 , 65 , 100 ] ;
46387: LD_ADDR_VAR 0 9
46391: PUSH
46392: LD_INT 80
46394: PUSH
46395: LD_INT 65
46397: PUSH
46398: LD_INT 100
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: LIST
46405: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46406: LD_VAR 0 6
46410: PPUSH
46411: CALL_OW 263
46415: PUSH
46416: LD_INT 1
46418: EQUAL
46419: IFFALSE 46454
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46421: LD_ADDR_VAR 0 10
46425: PUSH
46426: LD_VAR 0 10
46430: PUSH
46431: LD_VAR 0 6
46435: PPUSH
46436: CALL_OW 311
46440: PPUSH
46441: LD_INT 3
46443: PPUSH
46444: CALL_OW 259
46448: PUSH
46449: LD_INT 4
46451: MUL
46452: MUL
46453: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46454: LD_VAR 0 6
46458: PPUSH
46459: CALL_OW 263
46463: PUSH
46464: LD_INT 2
46466: EQUAL
46467: IFFALSE 46518
// begin j := IsControledBy ( i ) ;
46469: LD_ADDR_VAR 0 7
46473: PUSH
46474: LD_VAR 0 6
46478: PPUSH
46479: CALL_OW 312
46483: ST_TO_ADDR
// if j then
46484: LD_VAR 0 7
46488: IFFALSE 46518
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46490: LD_ADDR_VAR 0 10
46494: PUSH
46495: LD_VAR 0 10
46499: PUSH
46500: LD_VAR 0 7
46504: PPUSH
46505: LD_INT 3
46507: PPUSH
46508: CALL_OW 259
46512: PUSH
46513: LD_INT 3
46515: MUL
46516: MUL
46517: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46518: LD_VAR 0 6
46522: PPUSH
46523: CALL_OW 264
46527: PUSH
46528: LD_INT 5
46530: PUSH
46531: LD_INT 6
46533: PUSH
46534: LD_INT 46
46536: PUSH
46537: LD_INT 44
46539: PUSH
46540: LD_INT 47
46542: PUSH
46543: LD_INT 45
46545: PUSH
46546: LD_INT 28
46548: PUSH
46549: LD_INT 7
46551: PUSH
46552: LD_INT 27
46554: PUSH
46555: LD_INT 29
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: IN
46570: PUSH
46571: LD_VAR 0 1
46575: PPUSH
46576: LD_INT 52
46578: PPUSH
46579: CALL_OW 321
46583: PUSH
46584: LD_INT 2
46586: EQUAL
46587: AND
46588: IFFALSE 46605
// bpoints := bpoints * 1.2 ;
46590: LD_ADDR_VAR 0 10
46594: PUSH
46595: LD_VAR 0 10
46599: PUSH
46600: LD_REAL  1.20000000000000E+0000
46603: MUL
46604: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46605: LD_VAR 0 6
46609: PPUSH
46610: CALL_OW 264
46614: PUSH
46615: LD_INT 6
46617: PUSH
46618: LD_INT 46
46620: PUSH
46621: LD_INT 47
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: LIST
46628: IN
46629: IFFALSE 46646
// bpoints := bpoints * 1.2 ;
46631: LD_ADDR_VAR 0 10
46635: PUSH
46636: LD_VAR 0 10
46640: PUSH
46641: LD_REAL  1.20000000000000E+0000
46644: MUL
46645: ST_TO_ADDR
// end ; unit_building :
46646: GO 46660
46648: LD_INT 3
46650: DOUBLE
46651: EQUAL
46652: IFTRUE 46656
46654: GO 46659
46656: POP
// ; end ;
46657: GO 46660
46659: POP
// for j = 1 to 3 do
46660: LD_ADDR_VAR 0 7
46664: PUSH
46665: DOUBLE
46666: LD_INT 1
46668: DEC
46669: ST_TO_ADDR
46670: LD_INT 3
46672: PUSH
46673: FOR_TO
46674: IFFALSE 46727
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46676: LD_ADDR_VAR 0 5
46680: PUSH
46681: LD_VAR 0 5
46685: PPUSH
46686: LD_VAR 0 7
46690: PPUSH
46691: LD_VAR 0 5
46695: PUSH
46696: LD_VAR 0 7
46700: ARRAY
46701: PUSH
46702: LD_VAR 0 9
46706: PUSH
46707: LD_VAR 0 7
46711: ARRAY
46712: PUSH
46713: LD_VAR 0 10
46717: MUL
46718: PLUS
46719: PPUSH
46720: CALL_OW 1
46724: ST_TO_ADDR
46725: GO 46673
46727: POP
46728: POP
// end ;
46729: GO 45208
46731: POP
46732: POP
// result := Replace ( result , 4 , tmp ) ;
46733: LD_ADDR_VAR 0 5
46737: PUSH
46738: LD_VAR 0 5
46742: PPUSH
46743: LD_INT 4
46745: PPUSH
46746: LD_VAR 0 8
46750: PPUSH
46751: CALL_OW 1
46755: ST_TO_ADDR
// end ;
46756: LD_VAR 0 5
46760: RET
// export function DangerAtRange ( unit , range ) ; begin
46761: LD_INT 0
46763: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46764: LD_ADDR_VAR 0 3
46768: PUSH
46769: LD_VAR 0 1
46773: PPUSH
46774: CALL_OW 255
46778: PPUSH
46779: LD_VAR 0 1
46783: PPUSH
46784: CALL_OW 250
46788: PPUSH
46789: LD_VAR 0 1
46793: PPUSH
46794: CALL_OW 251
46798: PPUSH
46799: LD_VAR 0 2
46803: PPUSH
46804: CALL 45060 0 4
46808: ST_TO_ADDR
// end ;
46809: LD_VAR 0 3
46813: RET
// export function DangerInArea ( side , area ) ; begin
46814: LD_INT 0
46816: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46817: LD_ADDR_VAR 0 3
46821: PUSH
46822: LD_VAR 0 2
46826: PPUSH
46827: LD_INT 81
46829: PUSH
46830: LD_VAR 0 1
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PPUSH
46839: CALL_OW 70
46843: ST_TO_ADDR
// end ;
46844: LD_VAR 0 3
46848: RET
// export function IsExtension ( b ) ; begin
46849: LD_INT 0
46851: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46852: LD_ADDR_VAR 0 2
46856: PUSH
46857: LD_VAR 0 1
46861: PUSH
46862: LD_INT 23
46864: PUSH
46865: LD_INT 20
46867: PUSH
46868: LD_INT 22
46870: PUSH
46871: LD_INT 17
46873: PUSH
46874: LD_INT 24
46876: PUSH
46877: LD_INT 21
46879: PUSH
46880: LD_INT 19
46882: PUSH
46883: LD_INT 16
46885: PUSH
46886: LD_INT 25
46888: PUSH
46889: LD_INT 18
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: IN
46904: ST_TO_ADDR
// end ;
46905: LD_VAR 0 2
46909: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46910: LD_INT 0
46912: PPUSH
46913: PPUSH
46914: PPUSH
// result := [ ] ;
46915: LD_ADDR_VAR 0 4
46919: PUSH
46920: EMPTY
46921: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46922: LD_ADDR_VAR 0 5
46926: PUSH
46927: LD_VAR 0 2
46931: PPUSH
46932: LD_INT 21
46934: PUSH
46935: LD_INT 3
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PPUSH
46942: CALL_OW 70
46946: ST_TO_ADDR
// if not tmp then
46947: LD_VAR 0 5
46951: NOT
46952: IFFALSE 46956
// exit ;
46954: GO 47020
// if checkLink then
46956: LD_VAR 0 3
46960: IFFALSE 47010
// begin for i in tmp do
46962: LD_ADDR_VAR 0 6
46966: PUSH
46967: LD_VAR 0 5
46971: PUSH
46972: FOR_IN
46973: IFFALSE 47008
// if GetBase ( i ) <> base then
46975: LD_VAR 0 6
46979: PPUSH
46980: CALL_OW 274
46984: PUSH
46985: LD_VAR 0 1
46989: NONEQUAL
46990: IFFALSE 47006
// ComLinkToBase ( base , i ) ;
46992: LD_VAR 0 1
46996: PPUSH
46997: LD_VAR 0 6
47001: PPUSH
47002: CALL_OW 169
47006: GO 46972
47008: POP
47009: POP
// end ; result := tmp ;
47010: LD_ADDR_VAR 0 4
47014: PUSH
47015: LD_VAR 0 5
47019: ST_TO_ADDR
// end ;
47020: LD_VAR 0 4
47024: RET
// export function ComComplete ( units , b ) ; var i ; begin
47025: LD_INT 0
47027: PPUSH
47028: PPUSH
// if not units then
47029: LD_VAR 0 1
47033: NOT
47034: IFFALSE 47038
// exit ;
47036: GO 47128
// for i in units do
47038: LD_ADDR_VAR 0 4
47042: PUSH
47043: LD_VAR 0 1
47047: PUSH
47048: FOR_IN
47049: IFFALSE 47126
// if BuildingStatus ( b ) = bs_build then
47051: LD_VAR 0 2
47055: PPUSH
47056: CALL_OW 461
47060: PUSH
47061: LD_INT 1
47063: EQUAL
47064: IFFALSE 47124
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47066: LD_VAR 0 4
47070: PPUSH
47071: LD_STRING h
47073: PUSH
47074: LD_VAR 0 2
47078: PPUSH
47079: CALL_OW 250
47083: PUSH
47084: LD_VAR 0 2
47088: PPUSH
47089: CALL_OW 251
47093: PUSH
47094: LD_VAR 0 2
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: PUSH
47117: EMPTY
47118: LIST
47119: PPUSH
47120: CALL_OW 446
47124: GO 47048
47126: POP
47127: POP
// end ;
47128: LD_VAR 0 3
47132: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47133: LD_INT 0
47135: PPUSH
47136: PPUSH
47137: PPUSH
47138: PPUSH
47139: PPUSH
47140: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47141: LD_VAR 0 1
47145: NOT
47146: PUSH
47147: LD_VAR 0 1
47151: PPUSH
47152: CALL_OW 263
47156: PUSH
47157: LD_INT 2
47159: NONEQUAL
47160: OR
47161: IFFALSE 47165
// exit ;
47163: GO 47481
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47165: LD_ADDR_VAR 0 6
47169: PUSH
47170: LD_INT 22
47172: PUSH
47173: LD_VAR 0 1
47177: PPUSH
47178: CALL_OW 255
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: LD_INT 30
47192: PUSH
47193: LD_INT 36
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 34
47202: PUSH
47203: LD_INT 31
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: LIST
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PPUSH
47219: CALL_OW 69
47223: ST_TO_ADDR
// if not tmp then
47224: LD_VAR 0 6
47228: NOT
47229: IFFALSE 47233
// exit ;
47231: GO 47481
// result := [ ] ;
47233: LD_ADDR_VAR 0 2
47237: PUSH
47238: EMPTY
47239: ST_TO_ADDR
// for i in tmp do
47240: LD_ADDR_VAR 0 3
47244: PUSH
47245: LD_VAR 0 6
47249: PUSH
47250: FOR_IN
47251: IFFALSE 47322
// begin t := UnitsInside ( i ) ;
47253: LD_ADDR_VAR 0 4
47257: PUSH
47258: LD_VAR 0 3
47262: PPUSH
47263: CALL_OW 313
47267: ST_TO_ADDR
// if t then
47268: LD_VAR 0 4
47272: IFFALSE 47320
// for j in t do
47274: LD_ADDR_VAR 0 7
47278: PUSH
47279: LD_VAR 0 4
47283: PUSH
47284: FOR_IN
47285: IFFALSE 47318
// result := Replace ( result , result + 1 , j ) ;
47287: LD_ADDR_VAR 0 2
47291: PUSH
47292: LD_VAR 0 2
47296: PPUSH
47297: LD_VAR 0 2
47301: PUSH
47302: LD_INT 1
47304: PLUS
47305: PPUSH
47306: LD_VAR 0 7
47310: PPUSH
47311: CALL_OW 1
47315: ST_TO_ADDR
47316: GO 47284
47318: POP
47319: POP
// end ;
47320: GO 47250
47322: POP
47323: POP
// if not result then
47324: LD_VAR 0 2
47328: NOT
47329: IFFALSE 47333
// exit ;
47331: GO 47481
// mech := result [ 1 ] ;
47333: LD_ADDR_VAR 0 5
47337: PUSH
47338: LD_VAR 0 2
47342: PUSH
47343: LD_INT 1
47345: ARRAY
47346: ST_TO_ADDR
// if result > 1 then
47347: LD_VAR 0 2
47351: PUSH
47352: LD_INT 1
47354: GREATER
47355: IFFALSE 47467
// begin for i = 2 to result do
47357: LD_ADDR_VAR 0 3
47361: PUSH
47362: DOUBLE
47363: LD_INT 2
47365: DEC
47366: ST_TO_ADDR
47367: LD_VAR 0 2
47371: PUSH
47372: FOR_TO
47373: IFFALSE 47465
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47375: LD_ADDR_VAR 0 4
47379: PUSH
47380: LD_VAR 0 2
47384: PUSH
47385: LD_VAR 0 3
47389: ARRAY
47390: PPUSH
47391: LD_INT 3
47393: PPUSH
47394: CALL_OW 259
47398: PUSH
47399: LD_VAR 0 2
47403: PUSH
47404: LD_VAR 0 3
47408: ARRAY
47409: PPUSH
47410: CALL_OW 432
47414: MINUS
47415: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47416: LD_VAR 0 4
47420: PUSH
47421: LD_VAR 0 5
47425: PPUSH
47426: LD_INT 3
47428: PPUSH
47429: CALL_OW 259
47433: PUSH
47434: LD_VAR 0 5
47438: PPUSH
47439: CALL_OW 432
47443: MINUS
47444: GREATEREQUAL
47445: IFFALSE 47463
// mech := result [ i ] ;
47447: LD_ADDR_VAR 0 5
47451: PUSH
47452: LD_VAR 0 2
47456: PUSH
47457: LD_VAR 0 3
47461: ARRAY
47462: ST_TO_ADDR
// end ;
47463: GO 47372
47465: POP
47466: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47467: LD_VAR 0 1
47471: PPUSH
47472: LD_VAR 0 5
47476: PPUSH
47477: CALL_OW 135
// end ;
47481: LD_VAR 0 2
47485: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47486: LD_INT 0
47488: PPUSH
47489: PPUSH
47490: PPUSH
47491: PPUSH
47492: PPUSH
47493: PPUSH
47494: PPUSH
47495: PPUSH
47496: PPUSH
47497: PPUSH
47498: PPUSH
47499: PPUSH
47500: PPUSH
// result := [ ] ;
47501: LD_ADDR_VAR 0 7
47505: PUSH
47506: EMPTY
47507: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47508: LD_VAR 0 1
47512: PPUSH
47513: CALL_OW 266
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: IN
47528: NOT
47529: IFFALSE 47533
// exit ;
47531: GO 49167
// if name then
47533: LD_VAR 0 3
47537: IFFALSE 47553
// SetBName ( base_dep , name ) ;
47539: LD_VAR 0 1
47543: PPUSH
47544: LD_VAR 0 3
47548: PPUSH
47549: CALL_OW 500
// base := GetBase ( base_dep ) ;
47553: LD_ADDR_VAR 0 15
47557: PUSH
47558: LD_VAR 0 1
47562: PPUSH
47563: CALL_OW 274
47567: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47568: LD_ADDR_VAR 0 16
47572: PUSH
47573: LD_VAR 0 1
47577: PPUSH
47578: CALL_OW 255
47582: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47583: LD_ADDR_VAR 0 17
47587: PUSH
47588: LD_VAR 0 1
47592: PPUSH
47593: CALL_OW 248
47597: ST_TO_ADDR
// if sources then
47598: LD_VAR 0 5
47602: IFFALSE 47649
// for i = 1 to 3 do
47604: LD_ADDR_VAR 0 8
47608: PUSH
47609: DOUBLE
47610: LD_INT 1
47612: DEC
47613: ST_TO_ADDR
47614: LD_INT 3
47616: PUSH
47617: FOR_TO
47618: IFFALSE 47647
// AddResourceType ( base , i , sources [ i ] ) ;
47620: LD_VAR 0 15
47624: PPUSH
47625: LD_VAR 0 8
47629: PPUSH
47630: LD_VAR 0 5
47634: PUSH
47635: LD_VAR 0 8
47639: ARRAY
47640: PPUSH
47641: CALL_OW 276
47645: GO 47617
47647: POP
47648: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47649: LD_ADDR_VAR 0 18
47653: PUSH
47654: LD_VAR 0 15
47658: PPUSH
47659: LD_VAR 0 2
47663: PPUSH
47664: LD_INT 1
47666: PPUSH
47667: CALL 46910 0 3
47671: ST_TO_ADDR
// InitHc ;
47672: CALL_OW 19
// InitUc ;
47676: CALL_OW 18
// uc_side := side ;
47680: LD_ADDR_OWVAR 20
47684: PUSH
47685: LD_VAR 0 16
47689: ST_TO_ADDR
// uc_nation := nation ;
47690: LD_ADDR_OWVAR 21
47694: PUSH
47695: LD_VAR 0 17
47699: ST_TO_ADDR
// if buildings then
47700: LD_VAR 0 18
47704: IFFALSE 49026
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47706: LD_ADDR_VAR 0 19
47710: PUSH
47711: LD_VAR 0 18
47715: PPUSH
47716: LD_INT 2
47718: PUSH
47719: LD_INT 30
47721: PUSH
47722: LD_INT 29
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 30
47731: PUSH
47732: LD_INT 30
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: LIST
47743: PPUSH
47744: CALL_OW 72
47748: ST_TO_ADDR
// if tmp then
47749: LD_VAR 0 19
47753: IFFALSE 47801
// for i in tmp do
47755: LD_ADDR_VAR 0 8
47759: PUSH
47760: LD_VAR 0 19
47764: PUSH
47765: FOR_IN
47766: IFFALSE 47799
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47768: LD_VAR 0 8
47772: PPUSH
47773: CALL_OW 250
47777: PPUSH
47778: LD_VAR 0 8
47782: PPUSH
47783: CALL_OW 251
47787: PPUSH
47788: LD_VAR 0 16
47792: PPUSH
47793: CALL_OW 441
47797: GO 47765
47799: POP
47800: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47801: LD_VAR 0 18
47805: PPUSH
47806: LD_INT 2
47808: PUSH
47809: LD_INT 30
47811: PUSH
47812: LD_INT 32
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 30
47821: PUSH
47822: LD_INT 33
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: LIST
47833: PPUSH
47834: CALL_OW 72
47838: IFFALSE 47926
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47840: LD_ADDR_VAR 0 8
47844: PUSH
47845: LD_VAR 0 18
47849: PPUSH
47850: LD_INT 2
47852: PUSH
47853: LD_INT 30
47855: PUSH
47856: LD_INT 32
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 30
47865: PUSH
47866: LD_INT 33
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: LIST
47877: PPUSH
47878: CALL_OW 72
47882: PUSH
47883: FOR_IN
47884: IFFALSE 47924
// begin if not GetBWeapon ( i ) then
47886: LD_VAR 0 8
47890: PPUSH
47891: CALL_OW 269
47895: NOT
47896: IFFALSE 47922
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47898: LD_VAR 0 8
47902: PPUSH
47903: LD_VAR 0 8
47907: PPUSH
47908: LD_VAR 0 2
47912: PPUSH
47913: CALL 49172 0 2
47917: PPUSH
47918: CALL_OW 431
// end ;
47922: GO 47883
47924: POP
47925: POP
// end ; for i = 1 to personel do
47926: LD_ADDR_VAR 0 8
47930: PUSH
47931: DOUBLE
47932: LD_INT 1
47934: DEC
47935: ST_TO_ADDR
47936: LD_VAR 0 6
47940: PUSH
47941: FOR_TO
47942: IFFALSE 49006
// begin if i > 4 then
47944: LD_VAR 0 8
47948: PUSH
47949: LD_INT 4
47951: GREATER
47952: IFFALSE 47956
// break ;
47954: GO 49006
// case i of 1 :
47956: LD_VAR 0 8
47960: PUSH
47961: LD_INT 1
47963: DOUBLE
47964: EQUAL
47965: IFTRUE 47969
47967: GO 48049
47969: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47970: LD_ADDR_VAR 0 12
47974: PUSH
47975: LD_VAR 0 18
47979: PPUSH
47980: LD_INT 22
47982: PUSH
47983: LD_VAR 0 16
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 58
47994: PUSH
47995: EMPTY
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: LD_INT 30
48003: PUSH
48004: LD_INT 32
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 30
48013: PUSH
48014: LD_INT 4
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 30
48023: PUSH
48024: LD_INT 5
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: LIST
48041: PPUSH
48042: CALL_OW 72
48046: ST_TO_ADDR
48047: GO 48271
48049: LD_INT 2
48051: DOUBLE
48052: EQUAL
48053: IFTRUE 48057
48055: GO 48119
48057: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48058: LD_ADDR_VAR 0 12
48062: PUSH
48063: LD_VAR 0 18
48067: PPUSH
48068: LD_INT 22
48070: PUSH
48071: LD_VAR 0 16
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 2
48082: PUSH
48083: LD_INT 30
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 30
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: LIST
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PPUSH
48112: CALL_OW 72
48116: ST_TO_ADDR
48117: GO 48271
48119: LD_INT 3
48121: DOUBLE
48122: EQUAL
48123: IFTRUE 48127
48125: GO 48189
48127: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48128: LD_ADDR_VAR 0 12
48132: PUSH
48133: LD_VAR 0 18
48137: PPUSH
48138: LD_INT 22
48140: PUSH
48141: LD_VAR 0 16
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: LD_INT 30
48155: PUSH
48156: LD_INT 2
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 30
48165: PUSH
48166: LD_INT 3
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: LIST
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PPUSH
48182: CALL_OW 72
48186: ST_TO_ADDR
48187: GO 48271
48189: LD_INT 4
48191: DOUBLE
48192: EQUAL
48193: IFTRUE 48197
48195: GO 48270
48197: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48198: LD_ADDR_VAR 0 12
48202: PUSH
48203: LD_VAR 0 18
48207: PPUSH
48208: LD_INT 22
48210: PUSH
48211: LD_VAR 0 16
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: LD_INT 30
48225: PUSH
48226: LD_INT 6
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 30
48235: PUSH
48236: LD_INT 7
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 30
48245: PUSH
48246: LD_INT 8
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PPUSH
48263: CALL_OW 72
48267: ST_TO_ADDR
48268: GO 48271
48270: POP
// if i = 1 then
48271: LD_VAR 0 8
48275: PUSH
48276: LD_INT 1
48278: EQUAL
48279: IFFALSE 48390
// begin tmp := [ ] ;
48281: LD_ADDR_VAR 0 19
48285: PUSH
48286: EMPTY
48287: ST_TO_ADDR
// for j in f do
48288: LD_ADDR_VAR 0 9
48292: PUSH
48293: LD_VAR 0 12
48297: PUSH
48298: FOR_IN
48299: IFFALSE 48372
// if GetBType ( j ) = b_bunker then
48301: LD_VAR 0 9
48305: PPUSH
48306: CALL_OW 266
48310: PUSH
48311: LD_INT 32
48313: EQUAL
48314: IFFALSE 48341
// tmp := Insert ( tmp , 1 , j ) else
48316: LD_ADDR_VAR 0 19
48320: PUSH
48321: LD_VAR 0 19
48325: PPUSH
48326: LD_INT 1
48328: PPUSH
48329: LD_VAR 0 9
48333: PPUSH
48334: CALL_OW 2
48338: ST_TO_ADDR
48339: GO 48370
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48341: LD_ADDR_VAR 0 19
48345: PUSH
48346: LD_VAR 0 19
48350: PPUSH
48351: LD_VAR 0 19
48355: PUSH
48356: LD_INT 1
48358: PLUS
48359: PPUSH
48360: LD_VAR 0 9
48364: PPUSH
48365: CALL_OW 2
48369: ST_TO_ADDR
48370: GO 48298
48372: POP
48373: POP
// if tmp then
48374: LD_VAR 0 19
48378: IFFALSE 48390
// f := tmp ;
48380: LD_ADDR_VAR 0 12
48384: PUSH
48385: LD_VAR 0 19
48389: ST_TO_ADDR
// end ; x := personel [ i ] ;
48390: LD_ADDR_VAR 0 13
48394: PUSH
48395: LD_VAR 0 6
48399: PUSH
48400: LD_VAR 0 8
48404: ARRAY
48405: ST_TO_ADDR
// if x = - 1 then
48406: LD_VAR 0 13
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: EQUAL
48415: IFFALSE 48624
// begin for j in f do
48417: LD_ADDR_VAR 0 9
48421: PUSH
48422: LD_VAR 0 12
48426: PUSH
48427: FOR_IN
48428: IFFALSE 48620
// repeat InitHc ;
48430: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48434: LD_VAR 0 9
48438: PPUSH
48439: CALL_OW 266
48443: PUSH
48444: LD_INT 5
48446: EQUAL
48447: IFFALSE 48517
// begin if UnitsInside ( j ) < 3 then
48449: LD_VAR 0 9
48453: PPUSH
48454: CALL_OW 313
48458: PUSH
48459: LD_INT 3
48461: LESS
48462: IFFALSE 48498
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48464: LD_INT 0
48466: PPUSH
48467: LD_INT 5
48469: PUSH
48470: LD_INT 8
48472: PUSH
48473: LD_INT 9
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: LIST
48480: PUSH
48481: LD_VAR 0 17
48485: ARRAY
48486: PPUSH
48487: LD_VAR 0 4
48491: PPUSH
48492: CALL_OW 380
48496: GO 48515
// PrepareHuman ( false , i , skill ) ;
48498: LD_INT 0
48500: PPUSH
48501: LD_VAR 0 8
48505: PPUSH
48506: LD_VAR 0 4
48510: PPUSH
48511: CALL_OW 380
// end else
48515: GO 48534
// PrepareHuman ( false , i , skill ) ;
48517: LD_INT 0
48519: PPUSH
48520: LD_VAR 0 8
48524: PPUSH
48525: LD_VAR 0 4
48529: PPUSH
48530: CALL_OW 380
// un := CreateHuman ;
48534: LD_ADDR_VAR 0 14
48538: PUSH
48539: CALL_OW 44
48543: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48544: LD_ADDR_VAR 0 7
48548: PUSH
48549: LD_VAR 0 7
48553: PPUSH
48554: LD_INT 1
48556: PPUSH
48557: LD_VAR 0 14
48561: PPUSH
48562: CALL_OW 2
48566: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48567: LD_VAR 0 14
48571: PPUSH
48572: LD_VAR 0 9
48576: PPUSH
48577: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48581: LD_VAR 0 9
48585: PPUSH
48586: CALL_OW 313
48590: PUSH
48591: LD_INT 6
48593: EQUAL
48594: PUSH
48595: LD_VAR 0 9
48599: PPUSH
48600: CALL_OW 266
48604: PUSH
48605: LD_INT 32
48607: PUSH
48608: LD_INT 31
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: IN
48615: OR
48616: IFFALSE 48430
48618: GO 48427
48620: POP
48621: POP
// end else
48622: GO 49004
// for j = 1 to x do
48624: LD_ADDR_VAR 0 9
48628: PUSH
48629: DOUBLE
48630: LD_INT 1
48632: DEC
48633: ST_TO_ADDR
48634: LD_VAR 0 13
48638: PUSH
48639: FOR_TO
48640: IFFALSE 49002
// begin InitHc ;
48642: CALL_OW 19
// if not f then
48646: LD_VAR 0 12
48650: NOT
48651: IFFALSE 48740
// begin PrepareHuman ( false , i , skill ) ;
48653: LD_INT 0
48655: PPUSH
48656: LD_VAR 0 8
48660: PPUSH
48661: LD_VAR 0 4
48665: PPUSH
48666: CALL_OW 380
// un := CreateHuman ;
48670: LD_ADDR_VAR 0 14
48674: PUSH
48675: CALL_OW 44
48679: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48680: LD_ADDR_VAR 0 7
48684: PUSH
48685: LD_VAR 0 7
48689: PPUSH
48690: LD_INT 1
48692: PPUSH
48693: LD_VAR 0 14
48697: PPUSH
48698: CALL_OW 2
48702: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48703: LD_VAR 0 14
48707: PPUSH
48708: LD_VAR 0 1
48712: PPUSH
48713: CALL_OW 250
48717: PPUSH
48718: LD_VAR 0 1
48722: PPUSH
48723: CALL_OW 251
48727: PPUSH
48728: LD_INT 10
48730: PPUSH
48731: LD_INT 0
48733: PPUSH
48734: CALL_OW 50
// continue ;
48738: GO 48639
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48740: LD_VAR 0 12
48744: PUSH
48745: LD_INT 1
48747: ARRAY
48748: PPUSH
48749: CALL_OW 313
48753: PUSH
48754: LD_VAR 0 12
48758: PUSH
48759: LD_INT 1
48761: ARRAY
48762: PPUSH
48763: CALL_OW 266
48767: PUSH
48768: LD_INT 32
48770: PUSH
48771: LD_INT 31
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: IN
48778: AND
48779: PUSH
48780: LD_VAR 0 12
48784: PUSH
48785: LD_INT 1
48787: ARRAY
48788: PPUSH
48789: CALL_OW 313
48793: PUSH
48794: LD_INT 6
48796: EQUAL
48797: OR
48798: IFFALSE 48818
// f := Delete ( f , 1 ) ;
48800: LD_ADDR_VAR 0 12
48804: PUSH
48805: LD_VAR 0 12
48809: PPUSH
48810: LD_INT 1
48812: PPUSH
48813: CALL_OW 3
48817: ST_TO_ADDR
// if not f then
48818: LD_VAR 0 12
48822: NOT
48823: IFFALSE 48841
// begin x := x + 2 ;
48825: LD_ADDR_VAR 0 13
48829: PUSH
48830: LD_VAR 0 13
48834: PUSH
48835: LD_INT 2
48837: PLUS
48838: ST_TO_ADDR
// continue ;
48839: GO 48639
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48841: LD_VAR 0 12
48845: PUSH
48846: LD_INT 1
48848: ARRAY
48849: PPUSH
48850: CALL_OW 266
48854: PUSH
48855: LD_INT 5
48857: EQUAL
48858: IFFALSE 48932
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48860: LD_VAR 0 12
48864: PUSH
48865: LD_INT 1
48867: ARRAY
48868: PPUSH
48869: CALL_OW 313
48873: PUSH
48874: LD_INT 3
48876: LESS
48877: IFFALSE 48913
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48879: LD_INT 0
48881: PPUSH
48882: LD_INT 5
48884: PUSH
48885: LD_INT 8
48887: PUSH
48888: LD_INT 9
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: LIST
48895: PUSH
48896: LD_VAR 0 17
48900: ARRAY
48901: PPUSH
48902: LD_VAR 0 4
48906: PPUSH
48907: CALL_OW 380
48911: GO 48930
// PrepareHuman ( false , i , skill ) ;
48913: LD_INT 0
48915: PPUSH
48916: LD_VAR 0 8
48920: PPUSH
48921: LD_VAR 0 4
48925: PPUSH
48926: CALL_OW 380
// end else
48930: GO 48949
// PrepareHuman ( false , i , skill ) ;
48932: LD_INT 0
48934: PPUSH
48935: LD_VAR 0 8
48939: PPUSH
48940: LD_VAR 0 4
48944: PPUSH
48945: CALL_OW 380
// un := CreateHuman ;
48949: LD_ADDR_VAR 0 14
48953: PUSH
48954: CALL_OW 44
48958: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48959: LD_ADDR_VAR 0 7
48963: PUSH
48964: LD_VAR 0 7
48968: PPUSH
48969: LD_INT 1
48971: PPUSH
48972: LD_VAR 0 14
48976: PPUSH
48977: CALL_OW 2
48981: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48982: LD_VAR 0 14
48986: PPUSH
48987: LD_VAR 0 12
48991: PUSH
48992: LD_INT 1
48994: ARRAY
48995: PPUSH
48996: CALL_OW 52
// end ;
49000: GO 48639
49002: POP
49003: POP
// end ;
49004: GO 47941
49006: POP
49007: POP
// result := result ^ buildings ;
49008: LD_ADDR_VAR 0 7
49012: PUSH
49013: LD_VAR 0 7
49017: PUSH
49018: LD_VAR 0 18
49022: ADD
49023: ST_TO_ADDR
// end else
49024: GO 49167
// begin for i = 1 to personel do
49026: LD_ADDR_VAR 0 8
49030: PUSH
49031: DOUBLE
49032: LD_INT 1
49034: DEC
49035: ST_TO_ADDR
49036: LD_VAR 0 6
49040: PUSH
49041: FOR_TO
49042: IFFALSE 49165
// begin if i > 4 then
49044: LD_VAR 0 8
49048: PUSH
49049: LD_INT 4
49051: GREATER
49052: IFFALSE 49056
// break ;
49054: GO 49165
// x := personel [ i ] ;
49056: LD_ADDR_VAR 0 13
49060: PUSH
49061: LD_VAR 0 6
49065: PUSH
49066: LD_VAR 0 8
49070: ARRAY
49071: ST_TO_ADDR
// if x = - 1 then
49072: LD_VAR 0 13
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: EQUAL
49081: IFFALSE 49085
// continue ;
49083: GO 49041
// PrepareHuman ( false , i , skill ) ;
49085: LD_INT 0
49087: PPUSH
49088: LD_VAR 0 8
49092: PPUSH
49093: LD_VAR 0 4
49097: PPUSH
49098: CALL_OW 380
// un := CreateHuman ;
49102: LD_ADDR_VAR 0 14
49106: PUSH
49107: CALL_OW 44
49111: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49112: LD_VAR 0 14
49116: PPUSH
49117: LD_VAR 0 1
49121: PPUSH
49122: CALL_OW 250
49126: PPUSH
49127: LD_VAR 0 1
49131: PPUSH
49132: CALL_OW 251
49136: PPUSH
49137: LD_INT 10
49139: PPUSH
49140: LD_INT 0
49142: PPUSH
49143: CALL_OW 50
// result := result ^ un ;
49147: LD_ADDR_VAR 0 7
49151: PUSH
49152: LD_VAR 0 7
49156: PUSH
49157: LD_VAR 0 14
49161: ADD
49162: ST_TO_ADDR
// end ;
49163: GO 49041
49165: POP
49166: POP
// end ; end ;
49167: LD_VAR 0 7
49171: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49172: LD_INT 0
49174: PPUSH
49175: PPUSH
49176: PPUSH
49177: PPUSH
49178: PPUSH
49179: PPUSH
49180: PPUSH
49181: PPUSH
49182: PPUSH
49183: PPUSH
49184: PPUSH
49185: PPUSH
49186: PPUSH
49187: PPUSH
49188: PPUSH
49189: PPUSH
// result := false ;
49190: LD_ADDR_VAR 0 3
49194: PUSH
49195: LD_INT 0
49197: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49198: LD_VAR 0 1
49202: NOT
49203: PUSH
49204: LD_VAR 0 1
49208: PPUSH
49209: CALL_OW 266
49213: PUSH
49214: LD_INT 32
49216: PUSH
49217: LD_INT 33
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: IN
49224: NOT
49225: OR
49226: IFFALSE 49230
// exit ;
49228: GO 50339
// nat := GetNation ( tower ) ;
49230: LD_ADDR_VAR 0 12
49234: PUSH
49235: LD_VAR 0 1
49239: PPUSH
49240: CALL_OW 248
49244: ST_TO_ADDR
// side := GetSide ( tower ) ;
49245: LD_ADDR_VAR 0 16
49249: PUSH
49250: LD_VAR 0 1
49254: PPUSH
49255: CALL_OW 255
49259: ST_TO_ADDR
// x := GetX ( tower ) ;
49260: LD_ADDR_VAR 0 10
49264: PUSH
49265: LD_VAR 0 1
49269: PPUSH
49270: CALL_OW 250
49274: ST_TO_ADDR
// y := GetY ( tower ) ;
49275: LD_ADDR_VAR 0 11
49279: PUSH
49280: LD_VAR 0 1
49284: PPUSH
49285: CALL_OW 251
49289: ST_TO_ADDR
// if not x or not y then
49290: LD_VAR 0 10
49294: NOT
49295: PUSH
49296: LD_VAR 0 11
49300: NOT
49301: OR
49302: IFFALSE 49306
// exit ;
49304: GO 50339
// weapon := 0 ;
49306: LD_ADDR_VAR 0 18
49310: PUSH
49311: LD_INT 0
49313: ST_TO_ADDR
// fac_list := [ ] ;
49314: LD_ADDR_VAR 0 17
49318: PUSH
49319: EMPTY
49320: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49321: LD_ADDR_VAR 0 6
49325: PUSH
49326: LD_VAR 0 1
49330: PPUSH
49331: CALL_OW 274
49335: PPUSH
49336: LD_VAR 0 2
49340: PPUSH
49341: LD_INT 0
49343: PPUSH
49344: CALL 46910 0 3
49348: PPUSH
49349: LD_INT 30
49351: PUSH
49352: LD_INT 3
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PPUSH
49359: CALL_OW 72
49363: ST_TO_ADDR
// if not factories then
49364: LD_VAR 0 6
49368: NOT
49369: IFFALSE 49373
// exit ;
49371: GO 50339
// for i in factories do
49373: LD_ADDR_VAR 0 8
49377: PUSH
49378: LD_VAR 0 6
49382: PUSH
49383: FOR_IN
49384: IFFALSE 49409
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49386: LD_ADDR_VAR 0 17
49390: PUSH
49391: LD_VAR 0 17
49395: PUSH
49396: LD_VAR 0 8
49400: PPUSH
49401: CALL_OW 478
49405: UNION
49406: ST_TO_ADDR
49407: GO 49383
49409: POP
49410: POP
// if not fac_list then
49411: LD_VAR 0 17
49415: NOT
49416: IFFALSE 49420
// exit ;
49418: GO 50339
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49420: LD_ADDR_VAR 0 5
49424: PUSH
49425: LD_INT 4
49427: PUSH
49428: LD_INT 5
49430: PUSH
49431: LD_INT 9
49433: PUSH
49434: LD_INT 10
49436: PUSH
49437: LD_INT 6
49439: PUSH
49440: LD_INT 7
49442: PUSH
49443: LD_INT 11
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 27
49457: PUSH
49458: LD_INT 28
49460: PUSH
49461: LD_INT 26
49463: PUSH
49464: LD_INT 30
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 43
49475: PUSH
49476: LD_INT 44
49478: PUSH
49479: LD_INT 46
49481: PUSH
49482: LD_INT 45
49484: PUSH
49485: LD_INT 47
49487: PUSH
49488: LD_INT 49
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: LIST
49503: PUSH
49504: LD_VAR 0 12
49508: ARRAY
49509: ST_TO_ADDR
// list := list isect fac_list ;
49510: LD_ADDR_VAR 0 5
49514: PUSH
49515: LD_VAR 0 5
49519: PUSH
49520: LD_VAR 0 17
49524: ISECT
49525: ST_TO_ADDR
// if not list then
49526: LD_VAR 0 5
49530: NOT
49531: IFFALSE 49535
// exit ;
49533: GO 50339
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49535: LD_VAR 0 12
49539: PUSH
49540: LD_INT 3
49542: EQUAL
49543: PUSH
49544: LD_INT 49
49546: PUSH
49547: LD_VAR 0 5
49551: IN
49552: AND
49553: PUSH
49554: LD_INT 31
49556: PPUSH
49557: LD_VAR 0 16
49561: PPUSH
49562: CALL_OW 321
49566: PUSH
49567: LD_INT 2
49569: EQUAL
49570: AND
49571: IFFALSE 49631
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49573: LD_INT 22
49575: PUSH
49576: LD_VAR 0 16
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 35
49587: PUSH
49588: LD_INT 49
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 91
49597: PUSH
49598: LD_VAR 0 1
49602: PUSH
49603: LD_INT 10
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: LIST
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: LIST
49615: PPUSH
49616: CALL_OW 69
49620: NOT
49621: IFFALSE 49631
// weapon := ru_time_lapser ;
49623: LD_ADDR_VAR 0 18
49627: PUSH
49628: LD_INT 49
49630: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49631: LD_VAR 0 12
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: LD_INT 2
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: IN
49646: PUSH
49647: LD_INT 11
49649: PUSH
49650: LD_VAR 0 5
49654: IN
49655: PUSH
49656: LD_INT 30
49658: PUSH
49659: LD_VAR 0 5
49663: IN
49664: OR
49665: AND
49666: PUSH
49667: LD_INT 6
49669: PPUSH
49670: LD_VAR 0 16
49674: PPUSH
49675: CALL_OW 321
49679: PUSH
49680: LD_INT 2
49682: EQUAL
49683: AND
49684: IFFALSE 49849
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49686: LD_INT 22
49688: PUSH
49689: LD_VAR 0 16
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 2
49700: PUSH
49701: LD_INT 35
49703: PUSH
49704: LD_INT 11
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 35
49713: PUSH
49714: LD_INT 30
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 91
49728: PUSH
49729: LD_VAR 0 1
49733: PUSH
49734: LD_INT 18
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: LIST
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: LIST
49746: PPUSH
49747: CALL_OW 69
49751: NOT
49752: PUSH
49753: LD_INT 22
49755: PUSH
49756: LD_VAR 0 16
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: LD_INT 30
49770: PUSH
49771: LD_INT 32
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 30
49780: PUSH
49781: LD_INT 33
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 91
49795: PUSH
49796: LD_VAR 0 1
49800: PUSH
49801: LD_INT 12
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: LIST
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: LIST
49813: PUSH
49814: EMPTY
49815: LIST
49816: PPUSH
49817: CALL_OW 69
49821: PUSH
49822: LD_INT 2
49824: GREATER
49825: AND
49826: IFFALSE 49849
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49828: LD_ADDR_VAR 0 18
49832: PUSH
49833: LD_INT 11
49835: PUSH
49836: LD_INT 30
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_VAR 0 12
49847: ARRAY
49848: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49849: LD_VAR 0 18
49853: NOT
49854: PUSH
49855: LD_INT 40
49857: PPUSH
49858: LD_VAR 0 16
49862: PPUSH
49863: CALL_OW 321
49867: PUSH
49868: LD_INT 2
49870: EQUAL
49871: AND
49872: PUSH
49873: LD_INT 7
49875: PUSH
49876: LD_VAR 0 5
49880: IN
49881: PUSH
49882: LD_INT 28
49884: PUSH
49885: LD_VAR 0 5
49889: IN
49890: OR
49891: PUSH
49892: LD_INT 45
49894: PUSH
49895: LD_VAR 0 5
49899: IN
49900: OR
49901: AND
49902: IFFALSE 50156
// begin hex := GetHexInfo ( x , y ) ;
49904: LD_ADDR_VAR 0 4
49908: PUSH
49909: LD_VAR 0 10
49913: PPUSH
49914: LD_VAR 0 11
49918: PPUSH
49919: CALL_OW 546
49923: ST_TO_ADDR
// if hex [ 1 ] then
49924: LD_VAR 0 4
49928: PUSH
49929: LD_INT 1
49931: ARRAY
49932: IFFALSE 49936
// exit ;
49934: GO 50339
// height := hex [ 2 ] ;
49936: LD_ADDR_VAR 0 15
49940: PUSH
49941: LD_VAR 0 4
49945: PUSH
49946: LD_INT 2
49948: ARRAY
49949: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49950: LD_ADDR_VAR 0 14
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: LD_INT 3
49963: PUSH
49964: LD_INT 5
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: ST_TO_ADDR
// for i in tmp do
49973: LD_ADDR_VAR 0 8
49977: PUSH
49978: LD_VAR 0 14
49982: PUSH
49983: FOR_IN
49984: IFFALSE 50154
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49986: LD_ADDR_VAR 0 9
49990: PUSH
49991: LD_VAR 0 10
49995: PPUSH
49996: LD_VAR 0 8
50000: PPUSH
50001: LD_INT 5
50003: PPUSH
50004: CALL_OW 272
50008: PUSH
50009: LD_VAR 0 11
50013: PPUSH
50014: LD_VAR 0 8
50018: PPUSH
50019: LD_INT 5
50021: PPUSH
50022: CALL_OW 273
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50031: LD_VAR 0 9
50035: PUSH
50036: LD_INT 1
50038: ARRAY
50039: PPUSH
50040: LD_VAR 0 9
50044: PUSH
50045: LD_INT 2
50047: ARRAY
50048: PPUSH
50049: CALL_OW 488
50053: IFFALSE 50152
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50055: LD_ADDR_VAR 0 4
50059: PUSH
50060: LD_VAR 0 9
50064: PUSH
50065: LD_INT 1
50067: ARRAY
50068: PPUSH
50069: LD_VAR 0 9
50073: PUSH
50074: LD_INT 2
50076: ARRAY
50077: PPUSH
50078: CALL_OW 546
50082: ST_TO_ADDR
// if hex [ 1 ] then
50083: LD_VAR 0 4
50087: PUSH
50088: LD_INT 1
50090: ARRAY
50091: IFFALSE 50095
// continue ;
50093: GO 49983
// h := hex [ 2 ] ;
50095: LD_ADDR_VAR 0 13
50099: PUSH
50100: LD_VAR 0 4
50104: PUSH
50105: LD_INT 2
50107: ARRAY
50108: ST_TO_ADDR
// if h + 7 < height then
50109: LD_VAR 0 13
50113: PUSH
50114: LD_INT 7
50116: PLUS
50117: PUSH
50118: LD_VAR 0 15
50122: LESS
50123: IFFALSE 50152
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50125: LD_ADDR_VAR 0 18
50129: PUSH
50130: LD_INT 7
50132: PUSH
50133: LD_INT 28
50135: PUSH
50136: LD_INT 45
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: LIST
50143: PUSH
50144: LD_VAR 0 12
50148: ARRAY
50149: ST_TO_ADDR
// break ;
50150: GO 50154
// end ; end ; end ;
50152: GO 49983
50154: POP
50155: POP
// end ; if not weapon then
50156: LD_VAR 0 18
50160: NOT
50161: IFFALSE 50221
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50163: LD_ADDR_VAR 0 5
50167: PUSH
50168: LD_VAR 0 5
50172: PUSH
50173: LD_INT 11
50175: PUSH
50176: LD_INT 30
50178: PUSH
50179: LD_INT 49
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: LIST
50186: DIFF
50187: ST_TO_ADDR
// if not list then
50188: LD_VAR 0 5
50192: NOT
50193: IFFALSE 50197
// exit ;
50195: GO 50339
// weapon := list [ rand ( 1 , list ) ] ;
50197: LD_ADDR_VAR 0 18
50201: PUSH
50202: LD_VAR 0 5
50206: PUSH
50207: LD_INT 1
50209: PPUSH
50210: LD_VAR 0 5
50214: PPUSH
50215: CALL_OW 12
50219: ARRAY
50220: ST_TO_ADDR
// end ; if weapon then
50221: LD_VAR 0 18
50225: IFFALSE 50339
// begin tmp := CostOfWeapon ( weapon ) ;
50227: LD_ADDR_VAR 0 14
50231: PUSH
50232: LD_VAR 0 18
50236: PPUSH
50237: CALL_OW 451
50241: ST_TO_ADDR
// j := GetBase ( tower ) ;
50242: LD_ADDR_VAR 0 9
50246: PUSH
50247: LD_VAR 0 1
50251: PPUSH
50252: CALL_OW 274
50256: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50257: LD_VAR 0 9
50261: PPUSH
50262: LD_INT 1
50264: PPUSH
50265: CALL_OW 275
50269: PUSH
50270: LD_VAR 0 14
50274: PUSH
50275: LD_INT 1
50277: ARRAY
50278: GREATEREQUAL
50279: PUSH
50280: LD_VAR 0 9
50284: PPUSH
50285: LD_INT 2
50287: PPUSH
50288: CALL_OW 275
50292: PUSH
50293: LD_VAR 0 14
50297: PUSH
50298: LD_INT 2
50300: ARRAY
50301: GREATEREQUAL
50302: AND
50303: PUSH
50304: LD_VAR 0 9
50308: PPUSH
50309: LD_INT 3
50311: PPUSH
50312: CALL_OW 275
50316: PUSH
50317: LD_VAR 0 14
50321: PUSH
50322: LD_INT 3
50324: ARRAY
50325: GREATEREQUAL
50326: AND
50327: IFFALSE 50339
// result := weapon ;
50329: LD_ADDR_VAR 0 3
50333: PUSH
50334: LD_VAR 0 18
50338: ST_TO_ADDR
// end ; end ;
50339: LD_VAR 0 3
50343: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50344: LD_INT 0
50346: PPUSH
50347: PPUSH
// result := true ;
50348: LD_ADDR_VAR 0 3
50352: PUSH
50353: LD_INT 1
50355: ST_TO_ADDR
// if array1 = array2 then
50356: LD_VAR 0 1
50360: PUSH
50361: LD_VAR 0 2
50365: EQUAL
50366: IFFALSE 50426
// begin for i = 1 to array1 do
50368: LD_ADDR_VAR 0 4
50372: PUSH
50373: DOUBLE
50374: LD_INT 1
50376: DEC
50377: ST_TO_ADDR
50378: LD_VAR 0 1
50382: PUSH
50383: FOR_TO
50384: IFFALSE 50422
// if array1 [ i ] <> array2 [ i ] then
50386: LD_VAR 0 1
50390: PUSH
50391: LD_VAR 0 4
50395: ARRAY
50396: PUSH
50397: LD_VAR 0 2
50401: PUSH
50402: LD_VAR 0 4
50406: ARRAY
50407: NONEQUAL
50408: IFFALSE 50420
// begin result := false ;
50410: LD_ADDR_VAR 0 3
50414: PUSH
50415: LD_INT 0
50417: ST_TO_ADDR
// break ;
50418: GO 50422
// end ;
50420: GO 50383
50422: POP
50423: POP
// end else
50424: GO 50434
// result := false ;
50426: LD_ADDR_VAR 0 3
50430: PUSH
50431: LD_INT 0
50433: ST_TO_ADDR
// end ;
50434: LD_VAR 0 3
50438: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50439: LD_INT 0
50441: PPUSH
50442: PPUSH
// if not array1 or not array2 then
50443: LD_VAR 0 1
50447: NOT
50448: PUSH
50449: LD_VAR 0 2
50453: NOT
50454: OR
50455: IFFALSE 50459
// exit ;
50457: GO 50523
// result := true ;
50459: LD_ADDR_VAR 0 3
50463: PUSH
50464: LD_INT 1
50466: ST_TO_ADDR
// for i = 1 to array1 do
50467: LD_ADDR_VAR 0 4
50471: PUSH
50472: DOUBLE
50473: LD_INT 1
50475: DEC
50476: ST_TO_ADDR
50477: LD_VAR 0 1
50481: PUSH
50482: FOR_TO
50483: IFFALSE 50521
// if array1 [ i ] <> array2 [ i ] then
50485: LD_VAR 0 1
50489: PUSH
50490: LD_VAR 0 4
50494: ARRAY
50495: PUSH
50496: LD_VAR 0 2
50500: PUSH
50501: LD_VAR 0 4
50505: ARRAY
50506: NONEQUAL
50507: IFFALSE 50519
// begin result := false ;
50509: LD_ADDR_VAR 0 3
50513: PUSH
50514: LD_INT 0
50516: ST_TO_ADDR
// break ;
50517: GO 50521
// end ;
50519: GO 50482
50521: POP
50522: POP
// end ;
50523: LD_VAR 0 3
50527: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50528: LD_INT 0
50530: PPUSH
50531: PPUSH
50532: PPUSH
// pom := GetBase ( fac ) ;
50533: LD_ADDR_VAR 0 5
50537: PUSH
50538: LD_VAR 0 1
50542: PPUSH
50543: CALL_OW 274
50547: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50548: LD_ADDR_VAR 0 4
50552: PUSH
50553: LD_VAR 0 2
50557: PUSH
50558: LD_INT 1
50560: ARRAY
50561: PPUSH
50562: LD_VAR 0 2
50566: PUSH
50567: LD_INT 2
50569: ARRAY
50570: PPUSH
50571: LD_VAR 0 2
50575: PUSH
50576: LD_INT 3
50578: ARRAY
50579: PPUSH
50580: LD_VAR 0 2
50584: PUSH
50585: LD_INT 4
50587: ARRAY
50588: PPUSH
50589: CALL_OW 449
50593: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50594: LD_ADDR_VAR 0 3
50598: PUSH
50599: LD_VAR 0 5
50603: PPUSH
50604: LD_INT 1
50606: PPUSH
50607: CALL_OW 275
50611: PUSH
50612: LD_VAR 0 4
50616: PUSH
50617: LD_INT 1
50619: ARRAY
50620: GREATEREQUAL
50621: PUSH
50622: LD_VAR 0 5
50626: PPUSH
50627: LD_INT 2
50629: PPUSH
50630: CALL_OW 275
50634: PUSH
50635: LD_VAR 0 4
50639: PUSH
50640: LD_INT 2
50642: ARRAY
50643: GREATEREQUAL
50644: AND
50645: PUSH
50646: LD_VAR 0 5
50650: PPUSH
50651: LD_INT 3
50653: PPUSH
50654: CALL_OW 275
50658: PUSH
50659: LD_VAR 0 4
50663: PUSH
50664: LD_INT 3
50666: ARRAY
50667: GREATEREQUAL
50668: AND
50669: ST_TO_ADDR
// end ;
50670: LD_VAR 0 3
50674: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50675: LD_INT 0
50677: PPUSH
50678: PPUSH
50679: PPUSH
50680: PPUSH
// pom := GetBase ( building ) ;
50681: LD_ADDR_VAR 0 3
50685: PUSH
50686: LD_VAR 0 1
50690: PPUSH
50691: CALL_OW 274
50695: ST_TO_ADDR
// if not pom then
50696: LD_VAR 0 3
50700: NOT
50701: IFFALSE 50705
// exit ;
50703: GO 50875
// btype := GetBType ( building ) ;
50705: LD_ADDR_VAR 0 5
50709: PUSH
50710: LD_VAR 0 1
50714: PPUSH
50715: CALL_OW 266
50719: ST_TO_ADDR
// if btype = b_armoury then
50720: LD_VAR 0 5
50724: PUSH
50725: LD_INT 4
50727: EQUAL
50728: IFFALSE 50738
// btype := b_barracks ;
50730: LD_ADDR_VAR 0 5
50734: PUSH
50735: LD_INT 5
50737: ST_TO_ADDR
// if btype = b_depot then
50738: LD_VAR 0 5
50742: PUSH
50743: LD_INT 0
50745: EQUAL
50746: IFFALSE 50756
// btype := b_warehouse ;
50748: LD_ADDR_VAR 0 5
50752: PUSH
50753: LD_INT 1
50755: ST_TO_ADDR
// if btype = b_workshop then
50756: LD_VAR 0 5
50760: PUSH
50761: LD_INT 2
50763: EQUAL
50764: IFFALSE 50774
// btype := b_factory ;
50766: LD_ADDR_VAR 0 5
50770: PUSH
50771: LD_INT 3
50773: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50774: LD_ADDR_VAR 0 4
50778: PUSH
50779: LD_VAR 0 5
50783: PPUSH
50784: LD_VAR 0 1
50788: PPUSH
50789: CALL_OW 248
50793: PPUSH
50794: CALL_OW 450
50798: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50799: LD_ADDR_VAR 0 2
50803: PUSH
50804: LD_VAR 0 3
50808: PPUSH
50809: LD_INT 1
50811: PPUSH
50812: CALL_OW 275
50816: PUSH
50817: LD_VAR 0 4
50821: PUSH
50822: LD_INT 1
50824: ARRAY
50825: GREATEREQUAL
50826: PUSH
50827: LD_VAR 0 3
50831: PPUSH
50832: LD_INT 2
50834: PPUSH
50835: CALL_OW 275
50839: PUSH
50840: LD_VAR 0 4
50844: PUSH
50845: LD_INT 2
50847: ARRAY
50848: GREATEREQUAL
50849: AND
50850: PUSH
50851: LD_VAR 0 3
50855: PPUSH
50856: LD_INT 3
50858: PPUSH
50859: CALL_OW 275
50863: PUSH
50864: LD_VAR 0 4
50868: PUSH
50869: LD_INT 3
50871: ARRAY
50872: GREATEREQUAL
50873: AND
50874: ST_TO_ADDR
// end ;
50875: LD_VAR 0 2
50879: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50880: LD_INT 0
50882: PPUSH
50883: PPUSH
50884: PPUSH
// pom := GetBase ( building ) ;
50885: LD_ADDR_VAR 0 4
50889: PUSH
50890: LD_VAR 0 1
50894: PPUSH
50895: CALL_OW 274
50899: ST_TO_ADDR
// if not pom then
50900: LD_VAR 0 4
50904: NOT
50905: IFFALSE 50909
// exit ;
50907: GO 51010
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50909: LD_ADDR_VAR 0 5
50913: PUSH
50914: LD_VAR 0 2
50918: PPUSH
50919: LD_VAR 0 1
50923: PPUSH
50924: CALL_OW 248
50928: PPUSH
50929: CALL_OW 450
50933: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50934: LD_ADDR_VAR 0 3
50938: PUSH
50939: LD_VAR 0 4
50943: PPUSH
50944: LD_INT 1
50946: PPUSH
50947: CALL_OW 275
50951: PUSH
50952: LD_VAR 0 5
50956: PUSH
50957: LD_INT 1
50959: ARRAY
50960: GREATEREQUAL
50961: PUSH
50962: LD_VAR 0 4
50966: PPUSH
50967: LD_INT 2
50969: PPUSH
50970: CALL_OW 275
50974: PUSH
50975: LD_VAR 0 5
50979: PUSH
50980: LD_INT 2
50982: ARRAY
50983: GREATEREQUAL
50984: AND
50985: PUSH
50986: LD_VAR 0 4
50990: PPUSH
50991: LD_INT 3
50993: PPUSH
50994: CALL_OW 275
50998: PUSH
50999: LD_VAR 0 5
51003: PUSH
51004: LD_INT 3
51006: ARRAY
51007: GREATEREQUAL
51008: AND
51009: ST_TO_ADDR
// end ;
51010: LD_VAR 0 3
51014: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51015: LD_INT 0
51017: PPUSH
51018: PPUSH
51019: PPUSH
51020: PPUSH
51021: PPUSH
51022: PPUSH
51023: PPUSH
51024: PPUSH
51025: PPUSH
51026: PPUSH
51027: PPUSH
// result := false ;
51028: LD_ADDR_VAR 0 8
51032: PUSH
51033: LD_INT 0
51035: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51036: LD_VAR 0 5
51040: NOT
51041: PUSH
51042: LD_VAR 0 1
51046: NOT
51047: OR
51048: PUSH
51049: LD_VAR 0 2
51053: NOT
51054: OR
51055: PUSH
51056: LD_VAR 0 3
51060: NOT
51061: OR
51062: IFFALSE 51066
// exit ;
51064: GO 51880
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51066: LD_ADDR_VAR 0 14
51070: PUSH
51071: LD_VAR 0 1
51075: PPUSH
51076: LD_VAR 0 2
51080: PPUSH
51081: LD_VAR 0 3
51085: PPUSH
51086: LD_VAR 0 4
51090: PPUSH
51091: LD_VAR 0 5
51095: PUSH
51096: LD_INT 1
51098: ARRAY
51099: PPUSH
51100: CALL_OW 248
51104: PPUSH
51105: LD_INT 0
51107: PPUSH
51108: CALL 53113 0 6
51112: ST_TO_ADDR
// if not hexes then
51113: LD_VAR 0 14
51117: NOT
51118: IFFALSE 51122
// exit ;
51120: GO 51880
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51122: LD_ADDR_VAR 0 17
51126: PUSH
51127: LD_VAR 0 5
51131: PPUSH
51132: LD_INT 22
51134: PUSH
51135: LD_VAR 0 13
51139: PPUSH
51140: CALL_OW 255
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 2
51151: PUSH
51152: LD_INT 30
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 30
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: LIST
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PPUSH
51181: CALL_OW 72
51185: ST_TO_ADDR
// for i = 1 to hexes do
51186: LD_ADDR_VAR 0 9
51190: PUSH
51191: DOUBLE
51192: LD_INT 1
51194: DEC
51195: ST_TO_ADDR
51196: LD_VAR 0 14
51200: PUSH
51201: FOR_TO
51202: IFFALSE 51878
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51204: LD_ADDR_VAR 0 13
51208: PUSH
51209: LD_VAR 0 14
51213: PUSH
51214: LD_VAR 0 9
51218: ARRAY
51219: PUSH
51220: LD_INT 1
51222: ARRAY
51223: PPUSH
51224: LD_VAR 0 14
51228: PUSH
51229: LD_VAR 0 9
51233: ARRAY
51234: PUSH
51235: LD_INT 2
51237: ARRAY
51238: PPUSH
51239: CALL_OW 428
51243: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51244: LD_VAR 0 14
51248: PUSH
51249: LD_VAR 0 9
51253: ARRAY
51254: PUSH
51255: LD_INT 1
51257: ARRAY
51258: PPUSH
51259: LD_VAR 0 14
51263: PUSH
51264: LD_VAR 0 9
51268: ARRAY
51269: PUSH
51270: LD_INT 2
51272: ARRAY
51273: PPUSH
51274: CALL_OW 351
51278: PUSH
51279: LD_VAR 0 14
51283: PUSH
51284: LD_VAR 0 9
51288: ARRAY
51289: PUSH
51290: LD_INT 1
51292: ARRAY
51293: PPUSH
51294: LD_VAR 0 14
51298: PUSH
51299: LD_VAR 0 9
51303: ARRAY
51304: PUSH
51305: LD_INT 2
51307: ARRAY
51308: PPUSH
51309: CALL_OW 488
51313: NOT
51314: OR
51315: PUSH
51316: LD_VAR 0 13
51320: PPUSH
51321: CALL_OW 247
51325: PUSH
51326: LD_INT 3
51328: EQUAL
51329: OR
51330: IFFALSE 51336
// exit ;
51332: POP
51333: POP
51334: GO 51880
// if not tmp then
51336: LD_VAR 0 13
51340: NOT
51341: IFFALSE 51345
// continue ;
51343: GO 51201
// result := true ;
51345: LD_ADDR_VAR 0 8
51349: PUSH
51350: LD_INT 1
51352: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51353: LD_VAR 0 6
51357: PUSH
51358: LD_VAR 0 13
51362: PPUSH
51363: CALL_OW 247
51367: PUSH
51368: LD_INT 2
51370: EQUAL
51371: AND
51372: PUSH
51373: LD_VAR 0 13
51377: PPUSH
51378: CALL_OW 263
51382: PUSH
51383: LD_INT 1
51385: EQUAL
51386: AND
51387: IFFALSE 51551
// begin if IsDrivenBy ( tmp ) then
51389: LD_VAR 0 13
51393: PPUSH
51394: CALL_OW 311
51398: IFFALSE 51402
// continue ;
51400: GO 51201
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51402: LD_VAR 0 6
51406: PPUSH
51407: LD_INT 3
51409: PUSH
51410: LD_INT 60
51412: PUSH
51413: EMPTY
51414: LIST
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 3
51422: PUSH
51423: LD_INT 55
51425: PUSH
51426: EMPTY
51427: LIST
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PPUSH
51437: CALL_OW 72
51441: IFFALSE 51549
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51443: LD_ADDR_VAR 0 18
51447: PUSH
51448: LD_VAR 0 6
51452: PPUSH
51453: LD_INT 3
51455: PUSH
51456: LD_INT 60
51458: PUSH
51459: EMPTY
51460: LIST
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 3
51468: PUSH
51469: LD_INT 55
51471: PUSH
51472: EMPTY
51473: LIST
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PPUSH
51483: CALL_OW 72
51487: PUSH
51488: LD_INT 1
51490: ARRAY
51491: ST_TO_ADDR
// if IsInUnit ( driver ) then
51492: LD_VAR 0 18
51496: PPUSH
51497: CALL_OW 310
51501: IFFALSE 51512
// ComExit ( driver ) ;
51503: LD_VAR 0 18
51507: PPUSH
51508: CALL 76874 0 1
// AddComEnterUnit ( driver , tmp ) ;
51512: LD_VAR 0 18
51516: PPUSH
51517: LD_VAR 0 13
51521: PPUSH
51522: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51526: LD_VAR 0 18
51530: PPUSH
51531: LD_VAR 0 7
51535: PPUSH
51536: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51540: LD_VAR 0 18
51544: PPUSH
51545: CALL_OW 181
// end ; continue ;
51549: GO 51201
// end ; if not cleaners or not tmp in cleaners then
51551: LD_VAR 0 6
51555: NOT
51556: PUSH
51557: LD_VAR 0 13
51561: PUSH
51562: LD_VAR 0 6
51566: IN
51567: NOT
51568: OR
51569: IFFALSE 51876
// begin if dep then
51571: LD_VAR 0 17
51575: IFFALSE 51711
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51577: LD_ADDR_VAR 0 16
51581: PUSH
51582: LD_VAR 0 17
51586: PUSH
51587: LD_INT 1
51589: ARRAY
51590: PPUSH
51591: CALL_OW 250
51595: PPUSH
51596: LD_VAR 0 17
51600: PUSH
51601: LD_INT 1
51603: ARRAY
51604: PPUSH
51605: CALL_OW 254
51609: PPUSH
51610: LD_INT 5
51612: PPUSH
51613: CALL_OW 272
51617: PUSH
51618: LD_VAR 0 17
51622: PUSH
51623: LD_INT 1
51625: ARRAY
51626: PPUSH
51627: CALL_OW 251
51631: PPUSH
51632: LD_VAR 0 17
51636: PUSH
51637: LD_INT 1
51639: ARRAY
51640: PPUSH
51641: CALL_OW 254
51645: PPUSH
51646: LD_INT 5
51648: PPUSH
51649: CALL_OW 273
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51658: LD_VAR 0 16
51662: PUSH
51663: LD_INT 1
51665: ARRAY
51666: PPUSH
51667: LD_VAR 0 16
51671: PUSH
51672: LD_INT 2
51674: ARRAY
51675: PPUSH
51676: CALL_OW 488
51680: IFFALSE 51711
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51682: LD_VAR 0 13
51686: PPUSH
51687: LD_VAR 0 16
51691: PUSH
51692: LD_INT 1
51694: ARRAY
51695: PPUSH
51696: LD_VAR 0 16
51700: PUSH
51701: LD_INT 2
51703: ARRAY
51704: PPUSH
51705: CALL_OW 111
// continue ;
51709: GO 51201
// end ; end ; r := GetDir ( tmp ) ;
51711: LD_ADDR_VAR 0 15
51715: PUSH
51716: LD_VAR 0 13
51720: PPUSH
51721: CALL_OW 254
51725: ST_TO_ADDR
// if r = 5 then
51726: LD_VAR 0 15
51730: PUSH
51731: LD_INT 5
51733: EQUAL
51734: IFFALSE 51744
// r := 0 ;
51736: LD_ADDR_VAR 0 15
51740: PUSH
51741: LD_INT 0
51743: ST_TO_ADDR
// for j = r to 5 do
51744: LD_ADDR_VAR 0 10
51748: PUSH
51749: DOUBLE
51750: LD_VAR 0 15
51754: DEC
51755: ST_TO_ADDR
51756: LD_INT 5
51758: PUSH
51759: FOR_TO
51760: IFFALSE 51874
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51762: LD_ADDR_VAR 0 11
51766: PUSH
51767: LD_VAR 0 13
51771: PPUSH
51772: CALL_OW 250
51776: PPUSH
51777: LD_VAR 0 10
51781: PPUSH
51782: LD_INT 2
51784: PPUSH
51785: CALL_OW 272
51789: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51790: LD_ADDR_VAR 0 12
51794: PUSH
51795: LD_VAR 0 13
51799: PPUSH
51800: CALL_OW 251
51804: PPUSH
51805: LD_VAR 0 10
51809: PPUSH
51810: LD_INT 2
51812: PPUSH
51813: CALL_OW 273
51817: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51818: LD_VAR 0 11
51822: PPUSH
51823: LD_VAR 0 12
51827: PPUSH
51828: CALL_OW 488
51832: PUSH
51833: LD_VAR 0 11
51837: PPUSH
51838: LD_VAR 0 12
51842: PPUSH
51843: CALL_OW 428
51847: NOT
51848: AND
51849: IFFALSE 51872
// begin ComMoveXY ( tmp , _x , _y ) ;
51851: LD_VAR 0 13
51855: PPUSH
51856: LD_VAR 0 11
51860: PPUSH
51861: LD_VAR 0 12
51865: PPUSH
51866: CALL_OW 111
// break ;
51870: GO 51874
// end ; end ;
51872: GO 51759
51874: POP
51875: POP
// end ; end ;
51876: GO 51201
51878: POP
51879: POP
// end ;
51880: LD_VAR 0 8
51884: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51885: LD_INT 0
51887: PPUSH
// result := true ;
51888: LD_ADDR_VAR 0 3
51892: PUSH
51893: LD_INT 1
51895: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51896: LD_VAR 0 2
51900: PUSH
51901: LD_INT 24
51903: DOUBLE
51904: EQUAL
51905: IFTRUE 51915
51907: LD_INT 33
51909: DOUBLE
51910: EQUAL
51911: IFTRUE 51915
51913: GO 51940
51915: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51916: LD_ADDR_VAR 0 3
51920: PUSH
51921: LD_INT 32
51923: PPUSH
51924: LD_VAR 0 1
51928: PPUSH
51929: CALL_OW 321
51933: PUSH
51934: LD_INT 2
51936: EQUAL
51937: ST_TO_ADDR
51938: GO 52256
51940: LD_INT 20
51942: DOUBLE
51943: EQUAL
51944: IFTRUE 51948
51946: GO 51973
51948: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51949: LD_ADDR_VAR 0 3
51953: PUSH
51954: LD_INT 6
51956: PPUSH
51957: LD_VAR 0 1
51961: PPUSH
51962: CALL_OW 321
51966: PUSH
51967: LD_INT 2
51969: EQUAL
51970: ST_TO_ADDR
51971: GO 52256
51973: LD_INT 22
51975: DOUBLE
51976: EQUAL
51977: IFTRUE 51987
51979: LD_INT 36
51981: DOUBLE
51982: EQUAL
51983: IFTRUE 51987
51985: GO 52012
51987: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51988: LD_ADDR_VAR 0 3
51992: PUSH
51993: LD_INT 15
51995: PPUSH
51996: LD_VAR 0 1
52000: PPUSH
52001: CALL_OW 321
52005: PUSH
52006: LD_INT 2
52008: EQUAL
52009: ST_TO_ADDR
52010: GO 52256
52012: LD_INT 30
52014: DOUBLE
52015: EQUAL
52016: IFTRUE 52020
52018: GO 52045
52020: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52021: LD_ADDR_VAR 0 3
52025: PUSH
52026: LD_INT 20
52028: PPUSH
52029: LD_VAR 0 1
52033: PPUSH
52034: CALL_OW 321
52038: PUSH
52039: LD_INT 2
52041: EQUAL
52042: ST_TO_ADDR
52043: GO 52256
52045: LD_INT 28
52047: DOUBLE
52048: EQUAL
52049: IFTRUE 52059
52051: LD_INT 21
52053: DOUBLE
52054: EQUAL
52055: IFTRUE 52059
52057: GO 52084
52059: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52060: LD_ADDR_VAR 0 3
52064: PUSH
52065: LD_INT 21
52067: PPUSH
52068: LD_VAR 0 1
52072: PPUSH
52073: CALL_OW 321
52077: PUSH
52078: LD_INT 2
52080: EQUAL
52081: ST_TO_ADDR
52082: GO 52256
52084: LD_INT 16
52086: DOUBLE
52087: EQUAL
52088: IFTRUE 52092
52090: GO 52117
52092: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52093: LD_ADDR_VAR 0 3
52097: PUSH
52098: LD_INT 84
52100: PPUSH
52101: LD_VAR 0 1
52105: PPUSH
52106: CALL_OW 321
52110: PUSH
52111: LD_INT 2
52113: EQUAL
52114: ST_TO_ADDR
52115: GO 52256
52117: LD_INT 19
52119: DOUBLE
52120: EQUAL
52121: IFTRUE 52131
52123: LD_INT 23
52125: DOUBLE
52126: EQUAL
52127: IFTRUE 52131
52129: GO 52156
52131: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52132: LD_ADDR_VAR 0 3
52136: PUSH
52137: LD_INT 83
52139: PPUSH
52140: LD_VAR 0 1
52144: PPUSH
52145: CALL_OW 321
52149: PUSH
52150: LD_INT 2
52152: EQUAL
52153: ST_TO_ADDR
52154: GO 52256
52156: LD_INT 17
52158: DOUBLE
52159: EQUAL
52160: IFTRUE 52164
52162: GO 52189
52164: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52165: LD_ADDR_VAR 0 3
52169: PUSH
52170: LD_INT 39
52172: PPUSH
52173: LD_VAR 0 1
52177: PPUSH
52178: CALL_OW 321
52182: PUSH
52183: LD_INT 2
52185: EQUAL
52186: ST_TO_ADDR
52187: GO 52256
52189: LD_INT 18
52191: DOUBLE
52192: EQUAL
52193: IFTRUE 52197
52195: GO 52222
52197: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52198: LD_ADDR_VAR 0 3
52202: PUSH
52203: LD_INT 40
52205: PPUSH
52206: LD_VAR 0 1
52210: PPUSH
52211: CALL_OW 321
52215: PUSH
52216: LD_INT 2
52218: EQUAL
52219: ST_TO_ADDR
52220: GO 52256
52222: LD_INT 27
52224: DOUBLE
52225: EQUAL
52226: IFTRUE 52230
52228: GO 52255
52230: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52231: LD_ADDR_VAR 0 3
52235: PUSH
52236: LD_INT 35
52238: PPUSH
52239: LD_VAR 0 1
52243: PPUSH
52244: CALL_OW 321
52248: PUSH
52249: LD_INT 2
52251: EQUAL
52252: ST_TO_ADDR
52253: GO 52256
52255: POP
// end ;
52256: LD_VAR 0 3
52260: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52261: LD_INT 0
52263: PPUSH
52264: PPUSH
52265: PPUSH
52266: PPUSH
52267: PPUSH
52268: PPUSH
52269: PPUSH
52270: PPUSH
52271: PPUSH
52272: PPUSH
52273: PPUSH
// result := false ;
52274: LD_ADDR_VAR 0 6
52278: PUSH
52279: LD_INT 0
52281: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52282: LD_VAR 0 1
52286: NOT
52287: PUSH
52288: LD_VAR 0 1
52292: PPUSH
52293: CALL_OW 266
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: IN
52308: NOT
52309: OR
52310: PUSH
52311: LD_VAR 0 2
52315: NOT
52316: OR
52317: PUSH
52318: LD_VAR 0 5
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: LD_INT 2
52331: PUSH
52332: LD_INT 3
52334: PUSH
52335: LD_INT 4
52337: PUSH
52338: LD_INT 5
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: IN
52349: NOT
52350: OR
52351: PUSH
52352: LD_VAR 0 3
52356: PPUSH
52357: LD_VAR 0 4
52361: PPUSH
52362: CALL_OW 488
52366: NOT
52367: OR
52368: IFFALSE 52372
// exit ;
52370: GO 53108
// side := GetSide ( depot ) ;
52372: LD_ADDR_VAR 0 9
52376: PUSH
52377: LD_VAR 0 1
52381: PPUSH
52382: CALL_OW 255
52386: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52387: LD_VAR 0 9
52391: PPUSH
52392: LD_VAR 0 2
52396: PPUSH
52397: CALL 51885 0 2
52401: NOT
52402: IFFALSE 52406
// exit ;
52404: GO 53108
// pom := GetBase ( depot ) ;
52406: LD_ADDR_VAR 0 10
52410: PUSH
52411: LD_VAR 0 1
52415: PPUSH
52416: CALL_OW 274
52420: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52421: LD_ADDR_VAR 0 11
52425: PUSH
52426: LD_VAR 0 2
52430: PPUSH
52431: LD_VAR 0 1
52435: PPUSH
52436: CALL_OW 248
52440: PPUSH
52441: CALL_OW 450
52445: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52446: LD_VAR 0 10
52450: PPUSH
52451: LD_INT 1
52453: PPUSH
52454: CALL_OW 275
52458: PUSH
52459: LD_VAR 0 11
52463: PUSH
52464: LD_INT 1
52466: ARRAY
52467: GREATEREQUAL
52468: PUSH
52469: LD_VAR 0 10
52473: PPUSH
52474: LD_INT 2
52476: PPUSH
52477: CALL_OW 275
52481: PUSH
52482: LD_VAR 0 11
52486: PUSH
52487: LD_INT 2
52489: ARRAY
52490: GREATEREQUAL
52491: AND
52492: PUSH
52493: LD_VAR 0 10
52497: PPUSH
52498: LD_INT 3
52500: PPUSH
52501: CALL_OW 275
52505: PUSH
52506: LD_VAR 0 11
52510: PUSH
52511: LD_INT 3
52513: ARRAY
52514: GREATEREQUAL
52515: AND
52516: NOT
52517: IFFALSE 52521
// exit ;
52519: GO 53108
// if GetBType ( depot ) = b_depot then
52521: LD_VAR 0 1
52525: PPUSH
52526: CALL_OW 266
52530: PUSH
52531: LD_INT 0
52533: EQUAL
52534: IFFALSE 52546
// dist := 28 else
52536: LD_ADDR_VAR 0 14
52540: PUSH
52541: LD_INT 28
52543: ST_TO_ADDR
52544: GO 52554
// dist := 36 ;
52546: LD_ADDR_VAR 0 14
52550: PUSH
52551: LD_INT 36
52553: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52554: LD_VAR 0 1
52558: PPUSH
52559: LD_VAR 0 3
52563: PPUSH
52564: LD_VAR 0 4
52568: PPUSH
52569: CALL_OW 297
52573: PUSH
52574: LD_VAR 0 14
52578: GREATER
52579: IFFALSE 52583
// exit ;
52581: GO 53108
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52583: LD_ADDR_VAR 0 12
52587: PUSH
52588: LD_VAR 0 2
52592: PPUSH
52593: LD_VAR 0 3
52597: PPUSH
52598: LD_VAR 0 4
52602: PPUSH
52603: LD_VAR 0 5
52607: PPUSH
52608: LD_VAR 0 1
52612: PPUSH
52613: CALL_OW 248
52617: PPUSH
52618: LD_INT 0
52620: PPUSH
52621: CALL 53113 0 6
52625: ST_TO_ADDR
// if not hexes then
52626: LD_VAR 0 12
52630: NOT
52631: IFFALSE 52635
// exit ;
52633: GO 53108
// hex := GetHexInfo ( x , y ) ;
52635: LD_ADDR_VAR 0 15
52639: PUSH
52640: LD_VAR 0 3
52644: PPUSH
52645: LD_VAR 0 4
52649: PPUSH
52650: CALL_OW 546
52654: ST_TO_ADDR
// if hex [ 1 ] then
52655: LD_VAR 0 15
52659: PUSH
52660: LD_INT 1
52662: ARRAY
52663: IFFALSE 52667
// exit ;
52665: GO 53108
// height := hex [ 2 ] ;
52667: LD_ADDR_VAR 0 13
52671: PUSH
52672: LD_VAR 0 15
52676: PUSH
52677: LD_INT 2
52679: ARRAY
52680: ST_TO_ADDR
// for i = 1 to hexes do
52681: LD_ADDR_VAR 0 7
52685: PUSH
52686: DOUBLE
52687: LD_INT 1
52689: DEC
52690: ST_TO_ADDR
52691: LD_VAR 0 12
52695: PUSH
52696: FOR_TO
52697: IFFALSE 53027
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52699: LD_VAR 0 12
52703: PUSH
52704: LD_VAR 0 7
52708: ARRAY
52709: PUSH
52710: LD_INT 1
52712: ARRAY
52713: PPUSH
52714: LD_VAR 0 12
52718: PUSH
52719: LD_VAR 0 7
52723: ARRAY
52724: PUSH
52725: LD_INT 2
52727: ARRAY
52728: PPUSH
52729: CALL_OW 488
52733: NOT
52734: PUSH
52735: LD_VAR 0 12
52739: PUSH
52740: LD_VAR 0 7
52744: ARRAY
52745: PUSH
52746: LD_INT 1
52748: ARRAY
52749: PPUSH
52750: LD_VAR 0 12
52754: PUSH
52755: LD_VAR 0 7
52759: ARRAY
52760: PUSH
52761: LD_INT 2
52763: ARRAY
52764: PPUSH
52765: CALL_OW 428
52769: PUSH
52770: LD_INT 0
52772: GREATER
52773: OR
52774: PUSH
52775: LD_VAR 0 12
52779: PUSH
52780: LD_VAR 0 7
52784: ARRAY
52785: PUSH
52786: LD_INT 1
52788: ARRAY
52789: PPUSH
52790: LD_VAR 0 12
52794: PUSH
52795: LD_VAR 0 7
52799: ARRAY
52800: PUSH
52801: LD_INT 2
52803: ARRAY
52804: PPUSH
52805: CALL_OW 351
52809: OR
52810: IFFALSE 52816
// exit ;
52812: POP
52813: POP
52814: GO 53108
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52816: LD_ADDR_VAR 0 8
52820: PUSH
52821: LD_VAR 0 12
52825: PUSH
52826: LD_VAR 0 7
52830: ARRAY
52831: PUSH
52832: LD_INT 1
52834: ARRAY
52835: PPUSH
52836: LD_VAR 0 12
52840: PUSH
52841: LD_VAR 0 7
52845: ARRAY
52846: PUSH
52847: LD_INT 2
52849: ARRAY
52850: PPUSH
52851: CALL_OW 546
52855: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52856: LD_VAR 0 8
52860: PUSH
52861: LD_INT 1
52863: ARRAY
52864: PUSH
52865: LD_VAR 0 8
52869: PUSH
52870: LD_INT 2
52872: ARRAY
52873: PUSH
52874: LD_VAR 0 13
52878: PUSH
52879: LD_INT 2
52881: PLUS
52882: GREATER
52883: OR
52884: PUSH
52885: LD_VAR 0 8
52889: PUSH
52890: LD_INT 2
52892: ARRAY
52893: PUSH
52894: LD_VAR 0 13
52898: PUSH
52899: LD_INT 2
52901: MINUS
52902: LESS
52903: OR
52904: PUSH
52905: LD_VAR 0 8
52909: PUSH
52910: LD_INT 3
52912: ARRAY
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: LD_INT 8
52919: PUSH
52920: LD_INT 9
52922: PUSH
52923: LD_INT 10
52925: PUSH
52926: LD_INT 11
52928: PUSH
52929: LD_INT 12
52931: PUSH
52932: LD_INT 13
52934: PUSH
52935: LD_INT 16
52937: PUSH
52938: LD_INT 17
52940: PUSH
52941: LD_INT 18
52943: PUSH
52944: LD_INT 19
52946: PUSH
52947: LD_INT 20
52949: PUSH
52950: LD_INT 21
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: IN
52968: NOT
52969: OR
52970: PUSH
52971: LD_VAR 0 8
52975: PUSH
52976: LD_INT 5
52978: ARRAY
52979: NOT
52980: OR
52981: PUSH
52982: LD_VAR 0 8
52986: PUSH
52987: LD_INT 6
52989: ARRAY
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: LD_INT 7
52999: PUSH
53000: LD_INT 9
53002: PUSH
53003: LD_INT 10
53005: PUSH
53006: LD_INT 11
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: IN
53017: NOT
53018: OR
53019: IFFALSE 53025
// exit ;
53021: POP
53022: POP
53023: GO 53108
// end ;
53025: GO 52696
53027: POP
53028: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53029: LD_VAR 0 9
53033: PPUSH
53034: LD_VAR 0 3
53038: PPUSH
53039: LD_VAR 0 4
53043: PPUSH
53044: LD_INT 20
53046: PPUSH
53047: CALL 45060 0 4
53051: PUSH
53052: LD_INT 4
53054: ARRAY
53055: IFFALSE 53059
// exit ;
53057: GO 53108
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53059: LD_VAR 0 2
53063: PUSH
53064: LD_INT 29
53066: PUSH
53067: LD_INT 30
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: IN
53074: PUSH
53075: LD_VAR 0 3
53079: PPUSH
53080: LD_VAR 0 4
53084: PPUSH
53085: LD_VAR 0 9
53089: PPUSH
53090: CALL_OW 440
53094: NOT
53095: AND
53096: IFFALSE 53100
// exit ;
53098: GO 53108
// result := true ;
53100: LD_ADDR_VAR 0 6
53104: PUSH
53105: LD_INT 1
53107: ST_TO_ADDR
// end ;
53108: LD_VAR 0 6
53112: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53113: LD_INT 0
53115: PPUSH
53116: PPUSH
53117: PPUSH
53118: PPUSH
53119: PPUSH
53120: PPUSH
53121: PPUSH
53122: PPUSH
53123: PPUSH
53124: PPUSH
53125: PPUSH
53126: PPUSH
53127: PPUSH
53128: PPUSH
53129: PPUSH
53130: PPUSH
53131: PPUSH
53132: PPUSH
53133: PPUSH
53134: PPUSH
53135: PPUSH
53136: PPUSH
53137: PPUSH
53138: PPUSH
53139: PPUSH
53140: PPUSH
53141: PPUSH
53142: PPUSH
53143: PPUSH
53144: PPUSH
53145: PPUSH
53146: PPUSH
53147: PPUSH
53148: PPUSH
53149: PPUSH
53150: PPUSH
53151: PPUSH
53152: PPUSH
53153: PPUSH
53154: PPUSH
53155: PPUSH
53156: PPUSH
53157: PPUSH
53158: PPUSH
53159: PPUSH
53160: PPUSH
53161: PPUSH
53162: PPUSH
53163: PPUSH
53164: PPUSH
53165: PPUSH
53166: PPUSH
53167: PPUSH
53168: PPUSH
53169: PPUSH
53170: PPUSH
53171: PPUSH
53172: PPUSH
// result = [ ] ;
53173: LD_ADDR_VAR 0 7
53177: PUSH
53178: EMPTY
53179: ST_TO_ADDR
// temp_list = [ ] ;
53180: LD_ADDR_VAR 0 9
53184: PUSH
53185: EMPTY
53186: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53187: LD_VAR 0 4
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: LD_INT 3
53203: PUSH
53204: LD_INT 4
53206: PUSH
53207: LD_INT 5
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: IN
53218: NOT
53219: PUSH
53220: LD_VAR 0 1
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: IN
53235: PUSH
53236: LD_VAR 0 5
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: LD_INT 2
53246: PUSH
53247: LD_INT 3
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: LIST
53254: IN
53255: NOT
53256: AND
53257: OR
53258: IFFALSE 53262
// exit ;
53260: GO 71653
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53262: LD_VAR 0 1
53266: PUSH
53267: LD_INT 6
53269: PUSH
53270: LD_INT 7
53272: PUSH
53273: LD_INT 8
53275: PUSH
53276: LD_INT 13
53278: PUSH
53279: LD_INT 12
53281: PUSH
53282: LD_INT 15
53284: PUSH
53285: LD_INT 11
53287: PUSH
53288: LD_INT 14
53290: PUSH
53291: LD_INT 10
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: IN
53305: IFFALSE 53315
// btype = b_lab ;
53307: LD_ADDR_VAR 0 1
53311: PUSH
53312: LD_INT 6
53314: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53315: LD_VAR 0 6
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: LIST
53333: IN
53334: NOT
53335: PUSH
53336: LD_VAR 0 1
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: LD_INT 3
53352: PUSH
53353: LD_INT 6
53355: PUSH
53356: LD_INT 36
53358: PUSH
53359: LD_INT 4
53361: PUSH
53362: LD_INT 5
53364: PUSH
53365: LD_INT 31
53367: PUSH
53368: LD_INT 32
53370: PUSH
53371: LD_INT 33
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: IN
53387: NOT
53388: PUSH
53389: LD_VAR 0 6
53393: PUSH
53394: LD_INT 1
53396: EQUAL
53397: AND
53398: OR
53399: PUSH
53400: LD_VAR 0 1
53404: PUSH
53405: LD_INT 2
53407: PUSH
53408: LD_INT 3
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: IN
53415: NOT
53416: PUSH
53417: LD_VAR 0 6
53421: PUSH
53422: LD_INT 2
53424: EQUAL
53425: AND
53426: OR
53427: IFFALSE 53437
// mode = 0 ;
53429: LD_ADDR_VAR 0 6
53433: PUSH
53434: LD_INT 0
53436: ST_TO_ADDR
// case mode of 0 :
53437: LD_VAR 0 6
53441: PUSH
53442: LD_INT 0
53444: DOUBLE
53445: EQUAL
53446: IFTRUE 53450
53448: GO 64903
53450: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53451: LD_ADDR_VAR 0 11
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: PUSH
53490: LD_INT 1
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: LD_INT 2
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: LD_INT 2
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: LD_INT 2
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: LD_INT 2
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: LD_INT 3
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: LD_INT 3
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53644: LD_ADDR_VAR 0 12
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 2
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 2
53767: NEG
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 2
53778: NEG
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 2
53790: NEG
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 3
53801: NEG
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 3
53812: NEG
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53840: LD_ADDR_VAR 0 13
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: LD_INT 2
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 2
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 2
53943: PUSH
53944: LD_INT 2
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: LD_INT 2
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 2
53963: NEG
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 2
53975: NEG
53976: PUSH
53977: LD_INT 2
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 2
53987: NEG
53988: PUSH
53989: LD_INT 3
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 3
53999: NEG
54000: PUSH
54001: LD_INT 2
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 3
54011: NEG
54012: PUSH
54013: LD_INT 3
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54039: LD_ADDR_VAR 0 14
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 1
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: LD_INT 2
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 2
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: LD_INT 2
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: LD_INT 2
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: LD_INT 3
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 3
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: LD_INT 2
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54235: LD_ADDR_VAR 0 15
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: LD_INT 1
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 2
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 2
54369: NEG
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 2
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 3
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 3
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54428: LD_ADDR_VAR 0 16
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: LD_INT 2
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 2
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 2
54551: NEG
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: NEG
54564: PUSH
54565: LD_INT 2
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 3
54575: PUSH
54576: LD_INT 2
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 3
54585: PUSH
54586: LD_INT 3
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 2
54595: PUSH
54596: LD_INT 3
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54621: LD_ADDR_VAR 0 17
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: LD_INT 1
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: LD_INT 2
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 2
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 2
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 2
54756: PUSH
54757: LD_INT 2
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: LD_INT 2
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: LD_INT 2
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 2
54797: NEG
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: NEG
54809: PUSH
54810: LD_INT 1
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: LD_INT 2
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54851: LD_ADDR_VAR 0 18
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: NEG
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 2
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 2
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 2
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 2
54986: PUSH
54987: LD_INT 2
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: PUSH
54997: LD_INT 2
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: LD_INT 2
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: NEG
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 2
55027: NEG
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 2
55038: NEG
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 2
55050: NEG
55051: PUSH
55052: LD_INT 2
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55081: LD_ADDR_VAR 0 19
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: LD_INT 1
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: LD_INT 2
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 1
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 2
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 2
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 2
55216: PUSH
55217: LD_INT 2
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: PUSH
55227: LD_INT 2
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: LD_INT 2
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 2
55257: NEG
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 2
55268: NEG
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 2
55280: NEG
55281: PUSH
55282: LD_INT 2
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55311: LD_ADDR_VAR 0 20
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: LD_INT 1
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 1
55392: NEG
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: LD_INT 2
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 2
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 2
55446: PUSH
55447: LD_INT 2
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: LD_INT 2
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 2
55487: NEG
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: NEG
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: NEG
55511: PUSH
55512: LD_INT 2
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55541: LD_ADDR_VAR 0 21
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: LD_INT 2
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: LD_INT 2
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 2
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 2
55676: PUSH
55677: LD_INT 2
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: LD_INT 2
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 2
55728: NEG
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 2
55740: NEG
55741: PUSH
55742: LD_INT 2
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55771: LD_ADDR_VAR 0 22
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 2
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 2
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: LD_INT 2
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 2
55947: NEG
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 2
55958: NEG
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: NEG
55971: PUSH
55972: LD_INT 2
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56001: LD_ADDR_VAR 0 23
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 2
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 2
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: LD_INT 2
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: LD_INT 2
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 2
56177: NEG
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 2
56188: NEG
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: NEG
56201: PUSH
56202: LD_INT 2
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 2
56212: NEG
56213: PUSH
56214: LD_INT 3
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: LD_INT 3
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: LD_INT 2
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 2
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56281: LD_ADDR_VAR 0 24
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: LD_INT 1
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: LD_INT 2
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: LD_INT 2
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 2
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 2
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 2
56416: PUSH
56417: LD_INT 2
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: LD_INT 2
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 2
56457: NEG
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 2
56480: NEG
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: PUSH
56493: LD_INT 2
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 3
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 3
56524: PUSH
56525: LD_INT 2
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56557: LD_ADDR_VAR 0 25
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: LD_INT 2
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: LD_INT 2
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 2
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 2
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: LD_INT 2
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: LD_INT 2
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 2
56744: NEG
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 2
56756: NEG
56757: PUSH
56758: LD_INT 2
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 3
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 3
56778: PUSH
56779: LD_INT 2
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 2
56788: PUSH
56789: LD_INT 3
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: LD_INT 3
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56831: LD_ADDR_VAR 0 26
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 1
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: LD_INT 2
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: LD_INT 2
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: LD_INT 2
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 1
56976: PUSH
56977: LD_INT 2
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: LD_INT 2
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: NEG
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 2
57007: NEG
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 2
57018: NEG
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 2
57030: NEG
57031: PUSH
57032: LD_INT 2
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: LD_INT 3
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 1
57052: PUSH
57053: LD_INT 3
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: LD_INT 2
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 2
57073: NEG
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57107: LD_ADDR_VAR 0 27
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: LD_INT 2
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 2
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 2
57242: PUSH
57243: LD_INT 2
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: LD_INT 2
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: LD_INT 2
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: LD_INT 1
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 2
57283: NEG
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 2
57306: NEG
57307: PUSH
57308: LD_INT 2
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: LD_INT 2
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 2
57329: NEG
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 3
57340: NEG
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 3
57352: NEG
57353: PUSH
57354: LD_INT 2
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57387: LD_ADDR_VAR 0 28
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 2
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: LD_INT 1
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 2
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: LD_INT 1
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 2
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: LD_INT 2
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: LD_INT 2
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: NEG
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 2
57563: NEG
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 2
57574: NEG
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 2
57586: NEG
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: NEG
57599: PUSH
57600: LD_INT 3
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: LD_INT 3
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 3
57622: NEG
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 3
57634: NEG
57635: PUSH
57636: LD_INT 2
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57669: LD_ADDR_VAR 0 29
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: LD_INT 2
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: LD_INT 2
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 2
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 2
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: LD_INT 2
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: LD_INT 2
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 2
57835: NEG
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 2
57847: NEG
57848: PUSH
57849: LD_INT 2
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 2
57859: NEG
57860: PUSH
57861: LD_INT 3
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 2
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 3
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: LD_INT 3
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: LD_INT 2
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 3
57913: NEG
57914: PUSH
57915: LD_INT 2
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57948: LD_ADDR_VAR 0 30
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: LD_INT 2
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: LD_INT 1
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 2
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: PUSH
58084: LD_INT 2
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: LD_INT 2
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 2
58125: NEG
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: LD_INT 3
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: LD_INT 2
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 3
58160: PUSH
58161: LD_INT 2
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: LD_INT 3
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 2
58180: NEG
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 3
58191: NEG
58192: PUSH
58193: LD_INT 1
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58226: LD_ADDR_VAR 0 31
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: LD_INT 1
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 1
58284: NEG
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: LD_INT 2
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: LD_INT 1
58322: NEG
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 2
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 2
58350: PUSH
58351: LD_INT 2
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 1
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: LD_INT 2
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 2
58391: NEG
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 2
58403: NEG
58404: PUSH
58405: LD_INT 2
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 2
58415: NEG
58416: PUSH
58417: LD_INT 3
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 2
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 3
58438: PUSH
58439: LD_INT 1
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 1
58448: PUSH
58449: LD_INT 3
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 3
58469: NEG
58470: PUSH
58471: LD_INT 2
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58504: LD_ADDR_VAR 0 32
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: LD_INT 2
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: LD_INT 2
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 2
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 2
58629: PUSH
58630: LD_INT 2
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: LD_INT 2
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: LD_INT 2
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: LD_INT 1
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 2
58670: NEG
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 2
58681: NEG
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: LD_INT 3
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: LD_INT 2
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 3
58716: PUSH
58717: LD_INT 2
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: PUSH
58727: LD_INT 3
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 2
58736: NEG
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 3
58747: NEG
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58782: LD_ADDR_VAR 0 33
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: LD_INT 1
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: LD_INT 1
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: LD_INT 2
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 1
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 2
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 2
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 1
58906: PUSH
58907: LD_INT 2
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: LD_INT 2
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: LD_INT 1
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 2
58937: NEG
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 2
58948: NEG
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 2
58960: NEG
58961: PUSH
58962: LD_INT 2
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 2
58972: NEG
58973: PUSH
58974: LD_INT 3
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 2
58984: PUSH
58985: LD_INT 1
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 3
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: LD_INT 3
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: LD_INT 2
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 3
59026: NEG
59027: PUSH
59028: LD_INT 2
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59061: LD_ADDR_VAR 0 34
59065: PUSH
59066: LD_INT 0
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: LD_INT 1
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 1
59089: PUSH
59090: LD_INT 0
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: LD_INT 1
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: LD_INT 1
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: LD_INT 1
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: LD_INT 2
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 0
59154: PUSH
59155: LD_INT 2
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 1
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: LD_INT 1
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 2
59186: PUSH
59187: LD_INT 2
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: LD_INT 2
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: LD_INT 0
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 2
59228: NEG
59229: PUSH
59230: LD_INT 1
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: LD_INT 2
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: LD_INT 3
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: LD_INT 2
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: LD_INT 2
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 2
59285: PUSH
59286: LD_INT 3
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 2
59295: NEG
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 3
59306: NEG
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59341: LD_ADDR_VAR 0 35
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: LD_INT 0
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: LD_INT 1
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: LD_INT 1
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 0
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 1
59410: NEG
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 2
59432: NEG
59433: PUSH
59434: LD_INT 1
59436: NEG
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59453: LD_ADDR_VAR 0 36
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: NEG
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: LD_INT 2
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: LD_INT 2
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59565: LD_ADDR_VAR 0 37
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 1
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: NEG
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: NEG
59635: PUSH
59636: LD_INT 1
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: LD_INT 1
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59677: LD_ADDR_VAR 0 38
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 1
59715: PUSH
59716: LD_INT 1
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: LD_INT 1
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 1
59735: NEG
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 2
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 2
59768: NEG
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59789: LD_ADDR_VAR 0 39
59793: PUSH
59794: LD_INT 0
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 0
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: LD_INT 1
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: LD_INT 1
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 1
59847: NEG
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: LD_INT 2
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 1
59882: PUSH
59883: LD_INT 2
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59901: LD_ADDR_VAR 0 40
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: LD_INT 1
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 1
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 1
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 1
59959: NEG
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 1
59970: NEG
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 1
59982: PUSH
59983: LD_INT 1
59985: NEG
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 1
59993: NEG
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60013: LD_ADDR_VAR 0 41
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: LD_INT 0
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: LD_INT 1
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 1
60071: NEG
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 1
60082: NEG
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 1
60094: NEG
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 2
60127: PUSH
60128: LD_INT 1
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 2
60137: PUSH
60138: LD_INT 2
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: LD_INT 2
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 1
60157: NEG
60158: PUSH
60159: LD_INT 1
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 2
60168: NEG
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 2
60179: NEG
60180: PUSH
60181: LD_INT 1
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 2
60191: NEG
60192: PUSH
60193: LD_INT 2
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 2
60203: NEG
60204: PUSH
60205: LD_INT 3
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 2
60215: PUSH
60216: LD_INT 1
60218: NEG
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 3
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 3
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 3
60246: PUSH
60247: LD_INT 2
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 3
60256: PUSH
60257: LD_INT 3
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 2
60266: PUSH
60267: LD_INT 3
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 2
60276: NEG
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 3
60287: NEG
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 3
60298: NEG
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 3
60310: NEG
60311: PUSH
60312: LD_INT 2
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 3
60322: NEG
60323: PUSH
60324: LD_INT 3
60326: NEG
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60363: LD_ADDR_VAR 0 42
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 0
60380: PUSH
60381: LD_INT 1
60383: NEG
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 1
60391: PUSH
60392: LD_INT 0
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: PUSH
60402: LD_INT 1
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: PUSH
60434: LD_INT 1
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: LD_INT 2
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: LD_INT 2
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 1
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 2
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 2
60488: PUSH
60489: LD_INT 2
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 1
60498: PUSH
60499: LD_INT 2
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 0
60508: PUSH
60509: LD_INT 2
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 1
60518: NEG
60519: PUSH
60520: LD_INT 1
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 2
60529: NEG
60530: PUSH
60531: LD_INT 1
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 2
60541: NEG
60542: PUSH
60543: LD_INT 2
60545: NEG
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 2
60553: NEG
60554: PUSH
60555: LD_INT 3
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: LD_INT 3
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: LD_INT 3
60580: NEG
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: LD_INT 2
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 3
60599: PUSH
60600: LD_INT 2
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 3
60609: PUSH
60610: LD_INT 3
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 2
60619: PUSH
60620: LD_INT 3
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 1
60629: PUSH
60630: LD_INT 3
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: LD_INT 3
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 1
60649: NEG
60650: PUSH
60651: LD_INT 2
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 3
60660: NEG
60661: PUSH
60662: LD_INT 2
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 3
60672: NEG
60673: PUSH
60674: LD_INT 3
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60713: LD_ADDR_VAR 0 43
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: LD_INT 1
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 1
60771: NEG
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 1
60794: NEG
60795: PUSH
60796: LD_INT 2
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 0
60806: PUSH
60807: LD_INT 2
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: LD_INT 1
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 2
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 2
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 1
60848: PUSH
60849: LD_INT 2
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: LD_INT 2
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 1
60868: NEG
60869: PUSH
60870: LD_INT 1
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 2
60879: NEG
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 2
60890: NEG
60891: PUSH
60892: LD_INT 1
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: LD_INT 3
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: LD_INT 3
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 1
60925: PUSH
60926: LD_INT 2
60928: NEG
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 2
60936: PUSH
60937: LD_INT 1
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 3
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 3
60957: PUSH
60958: LD_INT 1
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: LD_INT 3
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 0
60977: PUSH
60978: LD_INT 3
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: NEG
60988: PUSH
60989: LD_INT 2
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 2
60998: NEG
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 3
61009: NEG
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 3
61020: NEG
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61061: LD_ADDR_VAR 0 44
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: LD_INT 1
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 1
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: LD_INT 1
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: LD_INT 1
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 1
61119: NEG
61120: PUSH
61121: LD_INT 0
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: NEG
61131: PUSH
61132: LD_INT 1
61134: NEG
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 1
61142: NEG
61143: PUSH
61144: LD_INT 2
61146: NEG
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: LD_INT 1
61157: NEG
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 2
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 2
61175: PUSH
61176: LD_INT 1
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 2
61185: PUSH
61186: LD_INT 2
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: LD_INT 2
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 1
61205: NEG
61206: PUSH
61207: LD_INT 1
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 2
61216: NEG
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 2
61227: NEG
61228: PUSH
61229: LD_INT 1
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 2
61239: NEG
61240: PUSH
61241: LD_INT 2
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 2
61251: NEG
61252: PUSH
61253: LD_INT 3
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 2
61263: PUSH
61264: LD_INT 1
61266: NEG
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 3
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 3
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 3
61294: PUSH
61295: LD_INT 2
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 3
61304: PUSH
61305: LD_INT 3
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 2
61314: PUSH
61315: LD_INT 3
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 2
61324: NEG
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 3
61335: NEG
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 3
61346: NEG
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 3
61358: NEG
61359: PUSH
61360: LD_INT 2
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 3
61370: NEG
61371: PUSH
61372: LD_INT 3
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61411: LD_ADDR_VAR 0 45
61415: PUSH
61416: LD_INT 0
61418: PUSH
61419: LD_INT 0
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: LD_INT 1
61431: NEG
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 1
61439: PUSH
61440: LD_INT 0
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 1
61449: PUSH
61450: LD_INT 1
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 0
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 1
61469: NEG
61470: PUSH
61471: LD_INT 0
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 1
61480: NEG
61481: PUSH
61482: LD_INT 1
61484: NEG
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: LD_INT 2
61496: NEG
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 0
61504: PUSH
61505: LD_INT 2
61507: NEG
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 2
61526: PUSH
61527: LD_INT 1
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 2
61536: PUSH
61537: LD_INT 2
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 1
61546: PUSH
61547: LD_INT 2
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: LD_INT 2
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: NEG
61567: PUSH
61568: LD_INT 1
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 2
61577: NEG
61578: PUSH
61579: LD_INT 1
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 2
61589: NEG
61590: PUSH
61591: LD_INT 2
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 2
61601: NEG
61602: PUSH
61603: LD_INT 3
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: NEG
61614: PUSH
61615: LD_INT 3
61617: NEG
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: LD_INT 3
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: LD_INT 2
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 3
61647: PUSH
61648: LD_INT 2
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 3
61657: PUSH
61658: LD_INT 3
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 2
61667: PUSH
61668: LD_INT 3
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 1
61677: PUSH
61678: LD_INT 3
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: LD_INT 3
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: LD_INT 2
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 3
61708: NEG
61709: PUSH
61710: LD_INT 2
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 3
61720: NEG
61721: PUSH
61722: LD_INT 3
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61761: LD_ADDR_VAR 0 46
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: LD_INT 0
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 0
61778: PUSH
61779: LD_INT 1
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 1
61789: PUSH
61790: LD_INT 0
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: LD_INT 1
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: LD_INT 1
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 1
61819: NEG
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: NEG
61843: PUSH
61844: LD_INT 2
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 0
61854: PUSH
61855: LD_INT 2
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 2
61886: PUSH
61887: LD_INT 1
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: LD_INT 2
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 0
61906: PUSH
61907: LD_INT 2
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: NEG
61917: PUSH
61918: LD_INT 1
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 2
61927: NEG
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 2
61938: NEG
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 1
61950: NEG
61951: PUSH
61952: LD_INT 3
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: LD_INT 3
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: LD_INT 2
61976: NEG
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 2
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 3
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 3
62005: PUSH
62006: LD_INT 1
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 1
62015: PUSH
62016: LD_INT 3
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: LD_INT 3
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 1
62035: NEG
62036: PUSH
62037: LD_INT 2
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 2
62046: NEG
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 3
62057: NEG
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 3
62068: NEG
62069: PUSH
62070: LD_INT 1
62072: NEG
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62109: LD_ADDR_VAR 0 47
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 0
62126: PUSH
62127: LD_INT 1
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 1
62137: PUSH
62138: LD_INT 0
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 1
62147: PUSH
62148: LD_INT 1
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 0
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 1
62167: NEG
62168: PUSH
62169: LD_INT 0
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 1
62178: NEG
62179: PUSH
62180: LD_INT 1
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: NEG
62191: PUSH
62192: LD_INT 2
62194: NEG
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 0
62202: PUSH
62203: LD_INT 2
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 1
62213: PUSH
62214: LD_INT 1
62216: NEG
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 2
62224: NEG
62225: PUSH
62226: LD_INT 1
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 2
62236: NEG
62237: PUSH
62238: LD_INT 2
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62260: LD_ADDR_VAR 0 48
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: LD_INT 1
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: LD_INT 1
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: NEG
62319: PUSH
62320: LD_INT 0
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 1
62329: NEG
62330: PUSH
62331: LD_INT 1
62333: NEG
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: LD_INT 2
62345: NEG
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: LD_INT 2
62356: NEG
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 1
62364: PUSH
62365: LD_INT 1
62367: NEG
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 2
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 2
62385: PUSH
62386: LD_INT 1
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62407: LD_ADDR_VAR 0 49
62411: PUSH
62412: LD_INT 0
62414: PUSH
62415: LD_INT 0
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 0
62424: PUSH
62425: LD_INT 1
62427: NEG
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 1
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 1
62445: PUSH
62446: LD_INT 1
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 0
62455: PUSH
62456: LD_INT 1
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 1
62465: NEG
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 1
62476: NEG
62477: PUSH
62478: LD_INT 1
62480: NEG
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 1
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 2
62499: PUSH
62500: LD_INT 0
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 2
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 2
62519: PUSH
62520: LD_INT 2
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 1
62529: PUSH
62530: LD_INT 2
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62551: LD_ADDR_VAR 0 50
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: LD_INT 0
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 0
62599: PUSH
62600: LD_INT 1
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 1
62609: NEG
62610: PUSH
62611: LD_INT 0
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 1
62620: NEG
62621: PUSH
62622: LD_INT 1
62624: NEG
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 2
62632: PUSH
62633: LD_INT 1
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 2
62642: PUSH
62643: LD_INT 2
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 1
62652: PUSH
62653: LD_INT 2
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 0
62662: PUSH
62663: LD_INT 2
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 1
62672: NEG
62673: PUSH
62674: LD_INT 1
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62695: LD_ADDR_VAR 0 51
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: LD_INT 0
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: LD_INT 1
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: LD_INT 0
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 1
62733: PUSH
62734: LD_INT 1
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 0
62743: PUSH
62744: LD_INT 1
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 1
62764: NEG
62765: PUSH
62766: LD_INT 1
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 1
62776: PUSH
62777: LD_INT 2
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 0
62786: PUSH
62787: LD_INT 2
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 1
62796: NEG
62797: PUSH
62798: LD_INT 1
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 2
62807: NEG
62808: PUSH
62809: LD_INT 0
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 2
62818: NEG
62819: PUSH
62820: LD_INT 1
62822: NEG
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62842: LD_ADDR_VAR 0 52
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: LD_INT 0
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 0
62859: PUSH
62860: LD_INT 1
62862: NEG
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 1
62870: PUSH
62871: LD_INT 0
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 1
62880: PUSH
62881: LD_INT 1
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: LD_INT 1
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 1
62900: NEG
62901: PUSH
62902: LD_INT 0
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 1
62911: NEG
62912: PUSH
62913: LD_INT 1
62915: NEG
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 1
62923: NEG
62924: PUSH
62925: LD_INT 2
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 2
62946: NEG
62947: PUSH
62948: LD_INT 0
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 2
62957: NEG
62958: PUSH
62959: LD_INT 1
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 2
62969: NEG
62970: PUSH
62971: LD_INT 2
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62993: LD_ADDR_VAR 0 53
62997: PUSH
62998: LD_INT 0
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 0
63010: PUSH
63011: LD_INT 1
63013: NEG
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 1
63021: PUSH
63022: LD_INT 0
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 1
63031: PUSH
63032: LD_INT 1
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 0
63041: PUSH
63042: LD_INT 1
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 1
63051: NEG
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 1
63062: NEG
63063: PUSH
63064: LD_INT 1
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: NEG
63075: PUSH
63076: LD_INT 2
63078: NEG
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: LD_INT 2
63089: NEG
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: LD_INT 1
63100: NEG
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 2
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 2
63118: PUSH
63119: LD_INT 1
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 2
63128: PUSH
63129: LD_INT 2
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: PUSH
63139: LD_INT 2
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 0
63148: PUSH
63149: LD_INT 2
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 1
63158: NEG
63159: PUSH
63160: LD_INT 1
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 2
63169: NEG
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 2
63180: NEG
63181: PUSH
63182: LD_INT 1
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 2
63192: NEG
63193: PUSH
63194: LD_INT 2
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63223: LD_ADDR_VAR 0 54
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 0
63240: PUSH
63241: LD_INT 1
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 1
63251: PUSH
63252: LD_INT 0
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 1
63261: PUSH
63262: LD_INT 1
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 0
63271: PUSH
63272: LD_INT 1
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 1
63281: NEG
63282: PUSH
63283: LD_INT 0
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 1
63292: NEG
63293: PUSH
63294: LD_INT 1
63296: NEG
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 1
63304: NEG
63305: PUSH
63306: LD_INT 2
63308: NEG
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 0
63316: PUSH
63317: LD_INT 2
63319: NEG
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 1
63327: PUSH
63328: LD_INT 1
63330: NEG
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 2
63338: PUSH
63339: LD_INT 0
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 2
63348: PUSH
63349: LD_INT 1
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 2
63358: PUSH
63359: LD_INT 2
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 1
63368: PUSH
63369: LD_INT 2
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 0
63378: PUSH
63379: LD_INT 2
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 1
63388: NEG
63389: PUSH
63390: LD_INT 1
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 2
63399: NEG
63400: PUSH
63401: LD_INT 0
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 2
63410: NEG
63411: PUSH
63412: LD_INT 1
63414: NEG
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 2
63422: NEG
63423: PUSH
63424: LD_INT 2
63426: NEG
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63453: LD_ADDR_VAR 0 55
63457: PUSH
63458: LD_INT 0
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 0
63470: PUSH
63471: LD_INT 1
63473: NEG
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 1
63481: PUSH
63482: LD_INT 0
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: LD_INT 1
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 0
63501: PUSH
63502: LD_INT 1
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 1
63511: NEG
63512: PUSH
63513: LD_INT 0
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 1
63522: NEG
63523: PUSH
63524: LD_INT 1
63526: NEG
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 1
63534: NEG
63535: PUSH
63536: LD_INT 2
63538: NEG
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 0
63546: PUSH
63547: LD_INT 2
63549: NEG
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 1
63557: PUSH
63558: LD_INT 1
63560: NEG
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 2
63568: PUSH
63569: LD_INT 0
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 2
63578: PUSH
63579: LD_INT 1
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 2
63588: PUSH
63589: LD_INT 2
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 1
63598: PUSH
63599: LD_INT 2
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: LD_INT 2
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 1
63618: NEG
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 2
63629: NEG
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 2
63640: NEG
63641: PUSH
63642: LD_INT 1
63644: NEG
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 2
63652: NEG
63653: PUSH
63654: LD_INT 2
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63683: LD_ADDR_VAR 0 56
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 0
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 1
63711: PUSH
63712: LD_INT 0
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 1
63721: PUSH
63722: LD_INT 1
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: LD_INT 1
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 1
63741: NEG
63742: PUSH
63743: LD_INT 0
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 1
63752: NEG
63753: PUSH
63754: LD_INT 1
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 1
63764: NEG
63765: PUSH
63766: LD_INT 2
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: LD_INT 2
63779: NEG
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 1
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 2
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 2
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 2
63818: PUSH
63819: LD_INT 2
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 1
63828: PUSH
63829: LD_INT 2
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 0
63838: PUSH
63839: LD_INT 2
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 1
63848: NEG
63849: PUSH
63850: LD_INT 1
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 2
63859: NEG
63860: PUSH
63861: LD_INT 0
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 2
63870: NEG
63871: PUSH
63872: LD_INT 1
63874: NEG
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 2
63882: NEG
63883: PUSH
63884: LD_INT 2
63886: NEG
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63913: LD_ADDR_VAR 0 57
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 0
63930: PUSH
63931: LD_INT 1
63933: NEG
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 1
63941: PUSH
63942: LD_INT 0
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 1
63951: PUSH
63952: LD_INT 1
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: LD_INT 1
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 1
63971: NEG
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 1
63982: NEG
63983: PUSH
63984: LD_INT 1
63986: NEG
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 1
63994: NEG
63995: PUSH
63996: LD_INT 2
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: LD_INT 2
64009: NEG
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 1
64017: PUSH
64018: LD_INT 1
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 2
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 2
64038: PUSH
64039: LD_INT 1
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 2
64048: PUSH
64049: LD_INT 2
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 1
64058: PUSH
64059: LD_INT 2
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 0
64068: PUSH
64069: LD_INT 2
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 1
64078: NEG
64079: PUSH
64080: LD_INT 1
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 2
64089: NEG
64090: PUSH
64091: LD_INT 0
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 2
64100: NEG
64101: PUSH
64102: LD_INT 1
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 2
64112: NEG
64113: PUSH
64114: LD_INT 2
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64143: LD_ADDR_VAR 0 58
64147: PUSH
64148: LD_INT 0
64150: PUSH
64151: LD_INT 0
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 0
64160: PUSH
64161: LD_INT 1
64163: NEG
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 1
64171: PUSH
64172: LD_INT 0
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 1
64181: PUSH
64182: LD_INT 1
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: LD_INT 1
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 1
64201: NEG
64202: PUSH
64203: LD_INT 0
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 1
64212: NEG
64213: PUSH
64214: LD_INT 1
64216: NEG
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 1
64224: NEG
64225: PUSH
64226: LD_INT 2
64228: NEG
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 0
64236: PUSH
64237: LD_INT 2
64239: NEG
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 1
64247: PUSH
64248: LD_INT 1
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 2
64258: PUSH
64259: LD_INT 0
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 2
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 2
64278: PUSH
64279: LD_INT 2
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 1
64288: PUSH
64289: LD_INT 2
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 0
64298: PUSH
64299: LD_INT 2
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 1
64308: NEG
64309: PUSH
64310: LD_INT 1
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 2
64319: NEG
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 2
64330: NEG
64331: PUSH
64332: LD_INT 1
64334: NEG
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 2
64342: NEG
64343: PUSH
64344: LD_INT 2
64346: NEG
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64373: LD_ADDR_VAR 0 59
64377: PUSH
64378: LD_INT 0
64380: PUSH
64381: LD_INT 0
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 0
64390: PUSH
64391: LD_INT 1
64393: NEG
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 1
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 1
64411: PUSH
64412: LD_INT 1
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 0
64421: PUSH
64422: LD_INT 1
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 1
64431: NEG
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 1
64442: NEG
64443: PUSH
64444: LD_INT 1
64446: NEG
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64461: LD_ADDR_VAR 0 60
64465: PUSH
64466: LD_INT 0
64468: PUSH
64469: LD_INT 0
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 0
64478: PUSH
64479: LD_INT 1
64481: NEG
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 1
64489: PUSH
64490: LD_INT 0
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 1
64499: PUSH
64500: LD_INT 1
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 0
64509: PUSH
64510: LD_INT 1
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 1
64519: NEG
64520: PUSH
64521: LD_INT 0
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 1
64530: NEG
64531: PUSH
64532: LD_INT 1
64534: NEG
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64549: LD_ADDR_VAR 0 61
64553: PUSH
64554: LD_INT 0
64556: PUSH
64557: LD_INT 0
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 0
64566: PUSH
64567: LD_INT 1
64569: NEG
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 1
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 1
64587: PUSH
64588: LD_INT 1
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 0
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 1
64607: NEG
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 1
64618: NEG
64619: PUSH
64620: LD_INT 1
64622: NEG
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64637: LD_ADDR_VAR 0 62
64641: PUSH
64642: LD_INT 0
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 0
64654: PUSH
64655: LD_INT 1
64657: NEG
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 1
64665: PUSH
64666: LD_INT 0
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 1
64675: PUSH
64676: LD_INT 1
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 0
64685: PUSH
64686: LD_INT 1
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 1
64695: NEG
64696: PUSH
64697: LD_INT 0
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 1
64706: NEG
64707: PUSH
64708: LD_INT 1
64710: NEG
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64725: LD_ADDR_VAR 0 63
64729: PUSH
64730: LD_INT 0
64732: PUSH
64733: LD_INT 0
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 0
64742: PUSH
64743: LD_INT 1
64745: NEG
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 1
64753: PUSH
64754: LD_INT 0
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 1
64763: PUSH
64764: LD_INT 1
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: LD_INT 1
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 1
64783: NEG
64784: PUSH
64785: LD_INT 0
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 1
64794: NEG
64795: PUSH
64796: LD_INT 1
64798: NEG
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64813: LD_ADDR_VAR 0 64
64817: PUSH
64818: LD_INT 0
64820: PUSH
64821: LD_INT 0
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: LD_INT 1
64833: NEG
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 1
64841: PUSH
64842: LD_INT 0
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 1
64851: PUSH
64852: LD_INT 1
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 0
64861: PUSH
64862: LD_INT 1
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 1
64871: NEG
64872: PUSH
64873: LD_INT 0
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 1
64882: NEG
64883: PUSH
64884: LD_INT 1
64886: NEG
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: ST_TO_ADDR
// end ; 1 :
64901: GO 70798
64903: LD_INT 1
64905: DOUBLE
64906: EQUAL
64907: IFTRUE 64911
64909: GO 67534
64911: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64912: LD_ADDR_VAR 0 11
64916: PUSH
64917: LD_INT 1
64919: NEG
64920: PUSH
64921: LD_INT 3
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 0
64931: PUSH
64932: LD_INT 3
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 1
64942: PUSH
64943: LD_INT 2
64945: NEG
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: LIST
64955: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64956: LD_ADDR_VAR 0 12
64960: PUSH
64961: LD_INT 2
64963: PUSH
64964: LD_INT 1
64966: NEG
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 3
64974: PUSH
64975: LD_INT 0
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 3
64984: PUSH
64985: LD_INT 1
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: LIST
64996: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64997: LD_ADDR_VAR 0 13
65001: PUSH
65002: LD_INT 3
65004: PUSH
65005: LD_INT 2
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 3
65014: PUSH
65015: LD_INT 3
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 2
65024: PUSH
65025: LD_INT 3
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: LIST
65036: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65037: LD_ADDR_VAR 0 14
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: LD_INT 3
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 0
65054: PUSH
65055: LD_INT 3
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 1
65064: NEG
65065: PUSH
65066: LD_INT 2
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: LIST
65077: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65078: LD_ADDR_VAR 0 15
65082: PUSH
65083: LD_INT 2
65085: NEG
65086: PUSH
65087: LD_INT 1
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 3
65096: NEG
65097: PUSH
65098: LD_INT 0
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 3
65107: NEG
65108: PUSH
65109: LD_INT 1
65111: NEG
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: LIST
65121: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65122: LD_ADDR_VAR 0 16
65126: PUSH
65127: LD_INT 2
65129: NEG
65130: PUSH
65131: LD_INT 3
65133: NEG
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 3
65141: NEG
65142: PUSH
65143: LD_INT 2
65145: NEG
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 3
65153: NEG
65154: PUSH
65155: LD_INT 3
65157: NEG
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: LIST
65167: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65168: LD_ADDR_VAR 0 17
65172: PUSH
65173: LD_INT 1
65175: NEG
65176: PUSH
65177: LD_INT 3
65179: NEG
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 0
65187: PUSH
65188: LD_INT 3
65190: NEG
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 1
65198: PUSH
65199: LD_INT 2
65201: NEG
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: LIST
65211: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65212: LD_ADDR_VAR 0 18
65216: PUSH
65217: LD_INT 2
65219: PUSH
65220: LD_INT 1
65222: NEG
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 3
65230: PUSH
65231: LD_INT 0
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 3
65240: PUSH
65241: LD_INT 1
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: LIST
65252: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65253: LD_ADDR_VAR 0 19
65257: PUSH
65258: LD_INT 3
65260: PUSH
65261: LD_INT 2
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 3
65270: PUSH
65271: LD_INT 3
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 2
65280: PUSH
65281: LD_INT 3
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: LIST
65292: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65293: LD_ADDR_VAR 0 20
65297: PUSH
65298: LD_INT 1
65300: PUSH
65301: LD_INT 3
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 0
65310: PUSH
65311: LD_INT 3
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 1
65320: NEG
65321: PUSH
65322: LD_INT 2
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: LIST
65333: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65334: LD_ADDR_VAR 0 21
65338: PUSH
65339: LD_INT 2
65341: NEG
65342: PUSH
65343: LD_INT 1
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 3
65352: NEG
65353: PUSH
65354: LD_INT 0
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 3
65363: NEG
65364: PUSH
65365: LD_INT 1
65367: NEG
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: LIST
65377: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65378: LD_ADDR_VAR 0 22
65382: PUSH
65383: LD_INT 2
65385: NEG
65386: PUSH
65387: LD_INT 3
65389: NEG
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 3
65397: NEG
65398: PUSH
65399: LD_INT 2
65401: NEG
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 3
65409: NEG
65410: PUSH
65411: LD_INT 3
65413: NEG
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: LIST
65423: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65424: LD_ADDR_VAR 0 23
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: LD_INT 3
65434: NEG
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 1
65442: NEG
65443: PUSH
65444: LD_INT 4
65446: NEG
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 1
65454: PUSH
65455: LD_INT 3
65457: NEG
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: LIST
65467: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65468: LD_ADDR_VAR 0 24
65472: PUSH
65473: LD_INT 3
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 3
65485: PUSH
65486: LD_INT 1
65488: NEG
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 4
65496: PUSH
65497: LD_INT 1
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: LIST
65508: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65509: LD_ADDR_VAR 0 25
65513: PUSH
65514: LD_INT 3
65516: PUSH
65517: LD_INT 3
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 4
65526: PUSH
65527: LD_INT 3
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 3
65536: PUSH
65537: LD_INT 4
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: LIST
65548: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65549: LD_ADDR_VAR 0 26
65553: PUSH
65554: LD_INT 0
65556: PUSH
65557: LD_INT 3
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 1
65566: PUSH
65567: LD_INT 4
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 1
65576: NEG
65577: PUSH
65578: LD_INT 3
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: LIST
65589: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65590: LD_ADDR_VAR 0 27
65594: PUSH
65595: LD_INT 3
65597: NEG
65598: PUSH
65599: LD_INT 0
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 3
65608: NEG
65609: PUSH
65610: LD_INT 1
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 4
65619: NEG
65620: PUSH
65621: LD_INT 1
65623: NEG
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: LIST
65633: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65634: LD_ADDR_VAR 0 28
65638: PUSH
65639: LD_INT 3
65641: NEG
65642: PUSH
65643: LD_INT 3
65645: NEG
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 3
65653: NEG
65654: PUSH
65655: LD_INT 4
65657: NEG
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 4
65665: NEG
65666: PUSH
65667: LD_INT 3
65669: NEG
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: LIST
65679: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65680: LD_ADDR_VAR 0 29
65684: PUSH
65685: LD_INT 1
65687: NEG
65688: PUSH
65689: LD_INT 3
65691: NEG
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 0
65699: PUSH
65700: LD_INT 3
65702: NEG
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 1
65710: PUSH
65711: LD_INT 2
65713: NEG
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 1
65721: NEG
65722: PUSH
65723: LD_INT 4
65725: NEG
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 0
65733: PUSH
65734: LD_INT 4
65736: NEG
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 1
65744: PUSH
65745: LD_INT 3
65747: NEG
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 1
65755: NEG
65756: PUSH
65757: LD_INT 5
65759: NEG
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 0
65767: PUSH
65768: LD_INT 5
65770: NEG
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 1
65778: PUSH
65779: LD_INT 4
65781: NEG
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 1
65789: NEG
65790: PUSH
65791: LD_INT 6
65793: NEG
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 0
65801: PUSH
65802: LD_INT 6
65804: NEG
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 1
65812: PUSH
65813: LD_INT 5
65815: NEG
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65835: LD_ADDR_VAR 0 30
65839: PUSH
65840: LD_INT 2
65842: PUSH
65843: LD_INT 1
65845: NEG
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 3
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 3
65863: PUSH
65864: LD_INT 1
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 3
65873: PUSH
65874: LD_INT 1
65876: NEG
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 4
65884: PUSH
65885: LD_INT 0
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 4
65894: PUSH
65895: LD_INT 1
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 4
65904: PUSH
65905: LD_INT 1
65907: NEG
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 5
65915: PUSH
65916: LD_INT 0
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 5
65925: PUSH
65926: LD_INT 1
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 5
65935: PUSH
65936: LD_INT 1
65938: NEG
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 6
65946: PUSH
65947: LD_INT 0
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 6
65956: PUSH
65957: LD_INT 1
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65978: LD_ADDR_VAR 0 31
65982: PUSH
65983: LD_INT 3
65985: PUSH
65986: LD_INT 2
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 3
65995: PUSH
65996: LD_INT 3
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 2
66005: PUSH
66006: LD_INT 3
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 4
66015: PUSH
66016: LD_INT 3
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 4
66025: PUSH
66026: LD_INT 4
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 3
66035: PUSH
66036: LD_INT 4
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 5
66045: PUSH
66046: LD_INT 4
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 5
66055: PUSH
66056: LD_INT 5
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 4
66065: PUSH
66066: LD_INT 5
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 6
66075: PUSH
66076: LD_INT 5
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 6
66085: PUSH
66086: LD_INT 6
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 5
66095: PUSH
66096: LD_INT 6
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66117: LD_ADDR_VAR 0 32
66121: PUSH
66122: LD_INT 1
66124: PUSH
66125: LD_INT 3
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 0
66134: PUSH
66135: LD_INT 3
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 1
66144: NEG
66145: PUSH
66146: LD_INT 2
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 1
66155: PUSH
66156: LD_INT 4
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 0
66165: PUSH
66166: LD_INT 4
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 1
66175: NEG
66176: PUSH
66177: LD_INT 3
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 1
66186: PUSH
66187: LD_INT 5
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 0
66196: PUSH
66197: LD_INT 5
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 1
66206: NEG
66207: PUSH
66208: LD_INT 4
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 1
66217: PUSH
66218: LD_INT 6
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: LD_INT 6
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 1
66237: NEG
66238: PUSH
66239: LD_INT 5
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66260: LD_ADDR_VAR 0 33
66264: PUSH
66265: LD_INT 2
66267: NEG
66268: PUSH
66269: LD_INT 1
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 3
66278: NEG
66279: PUSH
66280: LD_INT 0
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 3
66289: NEG
66290: PUSH
66291: LD_INT 1
66293: NEG
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 3
66301: NEG
66302: PUSH
66303: LD_INT 1
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 4
66312: NEG
66313: PUSH
66314: LD_INT 0
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 4
66323: NEG
66324: PUSH
66325: LD_INT 1
66327: NEG
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 4
66335: NEG
66336: PUSH
66337: LD_INT 1
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 5
66346: NEG
66347: PUSH
66348: LD_INT 0
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 5
66357: NEG
66358: PUSH
66359: LD_INT 1
66361: NEG
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 5
66369: NEG
66370: PUSH
66371: LD_INT 1
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 6
66380: NEG
66381: PUSH
66382: LD_INT 0
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 6
66391: NEG
66392: PUSH
66393: LD_INT 1
66395: NEG
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66415: LD_ADDR_VAR 0 34
66419: PUSH
66420: LD_INT 2
66422: NEG
66423: PUSH
66424: LD_INT 3
66426: NEG
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 3
66434: NEG
66435: PUSH
66436: LD_INT 2
66438: NEG
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 3
66446: NEG
66447: PUSH
66448: LD_INT 3
66450: NEG
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 3
66458: NEG
66459: PUSH
66460: LD_INT 4
66462: NEG
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 4
66470: NEG
66471: PUSH
66472: LD_INT 3
66474: NEG
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 4
66482: NEG
66483: PUSH
66484: LD_INT 4
66486: NEG
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 4
66494: NEG
66495: PUSH
66496: LD_INT 5
66498: NEG
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 5
66506: NEG
66507: PUSH
66508: LD_INT 4
66510: NEG
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 5
66518: NEG
66519: PUSH
66520: LD_INT 5
66522: NEG
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 5
66530: NEG
66531: PUSH
66532: LD_INT 6
66534: NEG
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 6
66542: NEG
66543: PUSH
66544: LD_INT 5
66546: NEG
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 6
66554: NEG
66555: PUSH
66556: LD_INT 6
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66578: LD_ADDR_VAR 0 41
66582: PUSH
66583: LD_INT 0
66585: PUSH
66586: LD_INT 2
66588: NEG
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 1
66596: NEG
66597: PUSH
66598: LD_INT 3
66600: NEG
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 1
66608: PUSH
66609: LD_INT 2
66611: NEG
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: LIST
66621: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66622: LD_ADDR_VAR 0 42
66626: PUSH
66627: LD_INT 2
66629: PUSH
66630: LD_INT 0
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 2
66639: PUSH
66640: LD_INT 1
66642: NEG
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 3
66650: PUSH
66651: LD_INT 1
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: LIST
66662: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66663: LD_ADDR_VAR 0 43
66667: PUSH
66668: LD_INT 2
66670: PUSH
66671: LD_INT 2
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 3
66680: PUSH
66681: LD_INT 2
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 2
66690: PUSH
66691: LD_INT 3
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: LIST
66702: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66703: LD_ADDR_VAR 0 44
66707: PUSH
66708: LD_INT 0
66710: PUSH
66711: LD_INT 2
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 1
66720: PUSH
66721: LD_INT 3
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 1
66730: NEG
66731: PUSH
66732: LD_INT 2
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: LIST
66743: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66744: LD_ADDR_VAR 0 45
66748: PUSH
66749: LD_INT 2
66751: NEG
66752: PUSH
66753: LD_INT 0
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 2
66762: NEG
66763: PUSH
66764: LD_INT 1
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 3
66773: NEG
66774: PUSH
66775: LD_INT 1
66777: NEG
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: LIST
66787: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66788: LD_ADDR_VAR 0 46
66792: PUSH
66793: LD_INT 2
66795: NEG
66796: PUSH
66797: LD_INT 2
66799: NEG
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 2
66807: NEG
66808: PUSH
66809: LD_INT 3
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 3
66819: NEG
66820: PUSH
66821: LD_INT 2
66823: NEG
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: LIST
66833: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66834: LD_ADDR_VAR 0 47
66838: PUSH
66839: LD_INT 2
66841: NEG
66842: PUSH
66843: LD_INT 3
66845: NEG
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 1
66853: NEG
66854: PUSH
66855: LD_INT 3
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66867: LD_ADDR_VAR 0 48
66871: PUSH
66872: LD_INT 1
66874: PUSH
66875: LD_INT 2
66877: NEG
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 2
66885: PUSH
66886: LD_INT 1
66888: NEG
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66898: LD_ADDR_VAR 0 49
66902: PUSH
66903: LD_INT 3
66905: PUSH
66906: LD_INT 1
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 3
66915: PUSH
66916: LD_INT 2
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66927: LD_ADDR_VAR 0 50
66931: PUSH
66932: LD_INT 2
66934: PUSH
66935: LD_INT 3
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 1
66944: PUSH
66945: LD_INT 3
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66956: LD_ADDR_VAR 0 51
66960: PUSH
66961: LD_INT 1
66963: NEG
66964: PUSH
66965: LD_INT 2
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 2
66974: NEG
66975: PUSH
66976: LD_INT 1
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66987: LD_ADDR_VAR 0 52
66991: PUSH
66992: LD_INT 3
66994: NEG
66995: PUSH
66996: LD_INT 1
66998: NEG
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 3
67006: NEG
67007: PUSH
67008: LD_INT 2
67010: NEG
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67020: LD_ADDR_VAR 0 53
67024: PUSH
67025: LD_INT 1
67027: NEG
67028: PUSH
67029: LD_INT 3
67031: NEG
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 0
67039: PUSH
67040: LD_INT 3
67042: NEG
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 1
67050: PUSH
67051: LD_INT 2
67053: NEG
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: LIST
67063: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67064: LD_ADDR_VAR 0 54
67068: PUSH
67069: LD_INT 2
67071: PUSH
67072: LD_INT 1
67074: NEG
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 3
67082: PUSH
67083: LD_INT 0
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 3
67092: PUSH
67093: LD_INT 1
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: LIST
67104: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67105: LD_ADDR_VAR 0 55
67109: PUSH
67110: LD_INT 3
67112: PUSH
67113: LD_INT 2
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 3
67122: PUSH
67123: LD_INT 3
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 2
67132: PUSH
67133: LD_INT 3
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: LIST
67144: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67145: LD_ADDR_VAR 0 56
67149: PUSH
67150: LD_INT 1
67152: PUSH
67153: LD_INT 3
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 0
67162: PUSH
67163: LD_INT 3
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 1
67172: NEG
67173: PUSH
67174: LD_INT 2
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: LIST
67185: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67186: LD_ADDR_VAR 0 57
67190: PUSH
67191: LD_INT 2
67193: NEG
67194: PUSH
67195: LD_INT 1
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 3
67204: NEG
67205: PUSH
67206: LD_INT 0
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 3
67215: NEG
67216: PUSH
67217: LD_INT 1
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: LIST
67229: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67230: LD_ADDR_VAR 0 58
67234: PUSH
67235: LD_INT 2
67237: NEG
67238: PUSH
67239: LD_INT 3
67241: NEG
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 3
67249: NEG
67250: PUSH
67251: LD_INT 2
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 3
67261: NEG
67262: PUSH
67263: LD_INT 3
67265: NEG
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: LIST
67275: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67276: LD_ADDR_VAR 0 59
67280: PUSH
67281: LD_INT 1
67283: NEG
67284: PUSH
67285: LD_INT 2
67287: NEG
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 0
67295: PUSH
67296: LD_INT 2
67298: NEG
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 1
67306: PUSH
67307: LD_INT 1
67309: NEG
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: LIST
67319: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67320: LD_ADDR_VAR 0 60
67324: PUSH
67325: LD_INT 1
67327: PUSH
67328: LD_INT 1
67330: NEG
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 2
67338: PUSH
67339: LD_INT 0
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 2
67348: PUSH
67349: LD_INT 1
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: LIST
67360: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67361: LD_ADDR_VAR 0 61
67365: PUSH
67366: LD_INT 2
67368: PUSH
67369: LD_INT 1
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 2
67378: PUSH
67379: LD_INT 2
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 1
67388: PUSH
67389: LD_INT 2
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: LIST
67400: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67401: LD_ADDR_VAR 0 62
67405: PUSH
67406: LD_INT 1
67408: PUSH
67409: LD_INT 2
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_INT 0
67418: PUSH
67419: LD_INT 2
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 1
67428: NEG
67429: PUSH
67430: LD_INT 1
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: LIST
67441: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67442: LD_ADDR_VAR 0 63
67446: PUSH
67447: LD_INT 1
67449: NEG
67450: PUSH
67451: LD_INT 1
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 2
67460: NEG
67461: PUSH
67462: LD_INT 0
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 2
67471: NEG
67472: PUSH
67473: LD_INT 1
67475: NEG
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: LIST
67485: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67486: LD_ADDR_VAR 0 64
67490: PUSH
67491: LD_INT 1
67493: NEG
67494: PUSH
67495: LD_INT 2
67497: NEG
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 2
67505: NEG
67506: PUSH
67507: LD_INT 1
67509: NEG
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 2
67517: NEG
67518: PUSH
67519: LD_INT 2
67521: NEG
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: LIST
67531: ST_TO_ADDR
// end ; 2 :
67532: GO 70798
67534: LD_INT 2
67536: DOUBLE
67537: EQUAL
67538: IFTRUE 67542
67540: GO 70797
67542: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67543: LD_ADDR_VAR 0 29
67547: PUSH
67548: LD_INT 4
67550: PUSH
67551: LD_INT 0
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 4
67560: PUSH
67561: LD_INT 1
67563: NEG
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 5
67571: PUSH
67572: LD_INT 0
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 5
67581: PUSH
67582: LD_INT 1
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 4
67591: PUSH
67592: LD_INT 1
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 3
67601: PUSH
67602: LD_INT 0
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 3
67611: PUSH
67612: LD_INT 1
67614: NEG
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 3
67622: PUSH
67623: LD_INT 2
67625: NEG
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 5
67633: PUSH
67634: LD_INT 2
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 3
67643: PUSH
67644: LD_INT 3
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 3
67653: PUSH
67654: LD_INT 2
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 4
67663: PUSH
67664: LD_INT 3
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 4
67673: PUSH
67674: LD_INT 4
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 3
67683: PUSH
67684: LD_INT 4
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 2
67693: PUSH
67694: LD_INT 3
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 2
67703: PUSH
67704: LD_INT 2
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 4
67713: PUSH
67714: LD_INT 2
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 2
67723: PUSH
67724: LD_INT 4
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 0
67733: PUSH
67734: LD_INT 4
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 0
67743: PUSH
67744: LD_INT 3
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 1
67753: PUSH
67754: LD_INT 4
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 1
67763: PUSH
67764: LD_INT 5
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 0
67773: PUSH
67774: LD_INT 5
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 1
67783: NEG
67784: PUSH
67785: LD_INT 4
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 1
67794: NEG
67795: PUSH
67796: LD_INT 3
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 2
67805: PUSH
67806: LD_INT 5
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 2
67815: NEG
67816: PUSH
67817: LD_INT 3
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 3
67826: NEG
67827: PUSH
67828: LD_INT 0
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 3
67837: NEG
67838: PUSH
67839: LD_INT 1
67841: NEG
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 2
67849: NEG
67850: PUSH
67851: LD_INT 0
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 2
67860: NEG
67861: PUSH
67862: LD_INT 1
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 3
67871: NEG
67872: PUSH
67873: LD_INT 1
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 4
67882: NEG
67883: PUSH
67884: LD_INT 0
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 4
67893: NEG
67894: PUSH
67895: LD_INT 1
67897: NEG
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 4
67905: NEG
67906: PUSH
67907: LD_INT 2
67909: NEG
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 2
67917: NEG
67918: PUSH
67919: LD_INT 2
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 4
67928: NEG
67929: PUSH
67930: LD_INT 4
67932: NEG
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 4
67940: NEG
67941: PUSH
67942: LD_INT 5
67944: NEG
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 3
67952: NEG
67953: PUSH
67954: LD_INT 4
67956: NEG
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 3
67964: NEG
67965: PUSH
67966: LD_INT 3
67968: NEG
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 4
67976: NEG
67977: PUSH
67978: LD_INT 3
67980: NEG
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 5
67988: NEG
67989: PUSH
67990: LD_INT 4
67992: NEG
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 5
68000: NEG
68001: PUSH
68002: LD_INT 5
68004: NEG
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 3
68012: NEG
68013: PUSH
68014: LD_INT 5
68016: NEG
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 5
68024: NEG
68025: PUSH
68026: LD_INT 3
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68081: LD_ADDR_VAR 0 30
68085: PUSH
68086: LD_INT 4
68088: PUSH
68089: LD_INT 4
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 4
68098: PUSH
68099: LD_INT 3
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 5
68108: PUSH
68109: LD_INT 4
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 5
68118: PUSH
68119: LD_INT 5
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 4
68128: PUSH
68129: LD_INT 5
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 3
68138: PUSH
68139: LD_INT 4
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 3
68148: PUSH
68149: LD_INT 3
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 5
68158: PUSH
68159: LD_INT 3
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 3
68168: PUSH
68169: LD_INT 5
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 0
68178: PUSH
68179: LD_INT 3
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 0
68188: PUSH
68189: LD_INT 2
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 1
68198: PUSH
68199: LD_INT 3
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 1
68208: PUSH
68209: LD_INT 4
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 0
68218: PUSH
68219: LD_INT 4
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 1
68228: NEG
68229: PUSH
68230: LD_INT 3
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: LD_INT 1
68239: NEG
68240: PUSH
68241: LD_INT 2
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 2
68250: PUSH
68251: LD_INT 4
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 2
68260: NEG
68261: PUSH
68262: LD_INT 2
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 4
68271: NEG
68272: PUSH
68273: LD_INT 0
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 4
68282: NEG
68283: PUSH
68284: LD_INT 1
68286: NEG
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 3
68294: NEG
68295: PUSH
68296: LD_INT 0
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 3
68305: NEG
68306: PUSH
68307: LD_INT 1
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 4
68316: NEG
68317: PUSH
68318: LD_INT 1
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 5
68327: NEG
68328: PUSH
68329: LD_INT 0
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 5
68338: NEG
68339: PUSH
68340: LD_INT 1
68342: NEG
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 5
68350: NEG
68351: PUSH
68352: LD_INT 2
68354: NEG
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 3
68362: NEG
68363: PUSH
68364: LD_INT 2
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 3
68373: NEG
68374: PUSH
68375: LD_INT 3
68377: NEG
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 3
68385: NEG
68386: PUSH
68387: LD_INT 4
68389: NEG
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 2
68397: NEG
68398: PUSH
68399: LD_INT 3
68401: NEG
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 2
68409: NEG
68410: PUSH
68411: LD_INT 2
68413: NEG
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 3
68421: NEG
68422: PUSH
68423: LD_INT 2
68425: NEG
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 4
68433: NEG
68434: PUSH
68435: LD_INT 3
68437: NEG
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 4
68445: NEG
68446: PUSH
68447: LD_INT 4
68449: NEG
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 2
68457: NEG
68458: PUSH
68459: LD_INT 4
68461: NEG
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 4
68469: NEG
68470: PUSH
68471: LD_INT 2
68473: NEG
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 0
68481: PUSH
68482: LD_INT 4
68484: NEG
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 0
68492: PUSH
68493: LD_INT 5
68495: NEG
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 1
68503: PUSH
68504: LD_INT 4
68506: NEG
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 1
68514: PUSH
68515: LD_INT 3
68517: NEG
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 0
68525: PUSH
68526: LD_INT 3
68528: NEG
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 1
68536: NEG
68537: PUSH
68538: LD_INT 4
68540: NEG
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 1
68548: NEG
68549: PUSH
68550: LD_INT 5
68552: NEG
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 2
68560: PUSH
68561: LD_INT 3
68563: NEG
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 2
68571: NEG
68572: PUSH
68573: LD_INT 5
68575: NEG
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: LIST
68613: LIST
68614: LIST
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68628: LD_ADDR_VAR 0 31
68632: PUSH
68633: LD_INT 0
68635: PUSH
68636: LD_INT 4
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 0
68645: PUSH
68646: LD_INT 3
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 1
68655: PUSH
68656: LD_INT 4
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 1
68665: PUSH
68666: LD_INT 5
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 0
68675: PUSH
68676: LD_INT 5
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 1
68685: NEG
68686: PUSH
68687: LD_INT 4
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 1
68696: NEG
68697: PUSH
68698: LD_INT 3
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 2
68707: PUSH
68708: LD_INT 5
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 2
68717: NEG
68718: PUSH
68719: LD_INT 3
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: PUSH
68726: LD_INT 3
68728: NEG
68729: PUSH
68730: LD_INT 0
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 3
68739: NEG
68740: PUSH
68741: LD_INT 1
68743: NEG
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 2
68751: NEG
68752: PUSH
68753: LD_INT 0
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: LD_INT 2
68762: NEG
68763: PUSH
68764: LD_INT 1
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 3
68773: NEG
68774: PUSH
68775: LD_INT 1
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 4
68784: NEG
68785: PUSH
68786: LD_INT 0
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 4
68795: NEG
68796: PUSH
68797: LD_INT 1
68799: NEG
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 4
68807: NEG
68808: PUSH
68809: LD_INT 2
68811: NEG
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 2
68819: NEG
68820: PUSH
68821: LD_INT 2
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: LD_INT 4
68830: NEG
68831: PUSH
68832: LD_INT 4
68834: NEG
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 4
68842: NEG
68843: PUSH
68844: LD_INT 5
68846: NEG
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 3
68854: NEG
68855: PUSH
68856: LD_INT 4
68858: NEG
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 3
68866: NEG
68867: PUSH
68868: LD_INT 3
68870: NEG
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 4
68878: NEG
68879: PUSH
68880: LD_INT 3
68882: NEG
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 5
68890: NEG
68891: PUSH
68892: LD_INT 4
68894: NEG
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 5
68902: NEG
68903: PUSH
68904: LD_INT 5
68906: NEG
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 3
68914: NEG
68915: PUSH
68916: LD_INT 5
68918: NEG
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 5
68926: NEG
68927: PUSH
68928: LD_INT 3
68930: NEG
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 0
68938: PUSH
68939: LD_INT 3
68941: NEG
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: LD_INT 0
68949: PUSH
68950: LD_INT 4
68952: NEG
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 1
68960: PUSH
68961: LD_INT 3
68963: NEG
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 1
68971: PUSH
68972: LD_INT 2
68974: NEG
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 0
68982: PUSH
68983: LD_INT 2
68985: NEG
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: PUSH
68991: LD_INT 1
68993: NEG
68994: PUSH
68995: LD_INT 3
68997: NEG
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 1
69005: NEG
69006: PUSH
69007: LD_INT 4
69009: NEG
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 2
69017: PUSH
69018: LD_INT 2
69020: NEG
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 2
69028: NEG
69029: PUSH
69030: LD_INT 4
69032: NEG
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 4
69040: PUSH
69041: LD_INT 0
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 4
69050: PUSH
69051: LD_INT 1
69053: NEG
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 5
69061: PUSH
69062: LD_INT 0
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 5
69071: PUSH
69072: LD_INT 1
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 4
69081: PUSH
69082: LD_INT 1
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 3
69091: PUSH
69092: LD_INT 0
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: LD_INT 3
69101: PUSH
69102: LD_INT 1
69104: NEG
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 3
69112: PUSH
69113: LD_INT 2
69115: NEG
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 5
69123: PUSH
69124: LD_INT 2
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69178: LD_ADDR_VAR 0 32
69182: PUSH
69183: LD_INT 4
69185: NEG
69186: PUSH
69187: LD_INT 0
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 4
69196: NEG
69197: PUSH
69198: LD_INT 1
69200: NEG
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 3
69208: NEG
69209: PUSH
69210: LD_INT 0
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 3
69219: NEG
69220: PUSH
69221: LD_INT 1
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 4
69230: NEG
69231: PUSH
69232: LD_INT 1
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 5
69241: NEG
69242: PUSH
69243: LD_INT 0
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 5
69252: NEG
69253: PUSH
69254: LD_INT 1
69256: NEG
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 5
69264: NEG
69265: PUSH
69266: LD_INT 2
69268: NEG
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 3
69276: NEG
69277: PUSH
69278: LD_INT 2
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 3
69287: NEG
69288: PUSH
69289: LD_INT 3
69291: NEG
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: LD_INT 3
69299: NEG
69300: PUSH
69301: LD_INT 4
69303: NEG
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 2
69311: NEG
69312: PUSH
69313: LD_INT 3
69315: NEG
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 2
69323: NEG
69324: PUSH
69325: LD_INT 2
69327: NEG
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 3
69335: NEG
69336: PUSH
69337: LD_INT 2
69339: NEG
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 4
69347: NEG
69348: PUSH
69349: LD_INT 3
69351: NEG
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 4
69359: NEG
69360: PUSH
69361: LD_INT 4
69363: NEG
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 2
69371: NEG
69372: PUSH
69373: LD_INT 4
69375: NEG
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 4
69383: NEG
69384: PUSH
69385: LD_INT 2
69387: NEG
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 0
69395: PUSH
69396: LD_INT 4
69398: NEG
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 0
69406: PUSH
69407: LD_INT 5
69409: NEG
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 1
69417: PUSH
69418: LD_INT 4
69420: NEG
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 1
69428: PUSH
69429: LD_INT 3
69431: NEG
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 0
69439: PUSH
69440: LD_INT 3
69442: NEG
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: LD_INT 1
69450: NEG
69451: PUSH
69452: LD_INT 4
69454: NEG
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 1
69462: NEG
69463: PUSH
69464: LD_INT 5
69466: NEG
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 2
69474: PUSH
69475: LD_INT 3
69477: NEG
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 2
69485: NEG
69486: PUSH
69487: LD_INT 5
69489: NEG
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 3
69497: PUSH
69498: LD_INT 0
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 3
69507: PUSH
69508: LD_INT 1
69510: NEG
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 4
69518: PUSH
69519: LD_INT 0
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: LD_INT 4
69528: PUSH
69529: LD_INT 1
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 3
69538: PUSH
69539: LD_INT 1
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 2
69548: PUSH
69549: LD_INT 0
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 2
69558: PUSH
69559: LD_INT 1
69561: NEG
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 2
69569: PUSH
69570: LD_INT 2
69572: NEG
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 4
69580: PUSH
69581: LD_INT 2
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 4
69590: PUSH
69591: LD_INT 4
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 4
69600: PUSH
69601: LD_INT 3
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 5
69610: PUSH
69611: LD_INT 4
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 5
69620: PUSH
69621: LD_INT 5
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 4
69630: PUSH
69631: LD_INT 5
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 3
69640: PUSH
69641: LD_INT 4
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 3
69650: PUSH
69651: LD_INT 3
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 5
69660: PUSH
69661: LD_INT 3
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 3
69670: PUSH
69671: LD_INT 5
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: LIST
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: LIST
69721: LIST
69722: LIST
69723: LIST
69724: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69725: LD_ADDR_VAR 0 33
69729: PUSH
69730: LD_INT 4
69732: NEG
69733: PUSH
69734: LD_INT 4
69736: NEG
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 4
69744: NEG
69745: PUSH
69746: LD_INT 5
69748: NEG
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 3
69756: NEG
69757: PUSH
69758: LD_INT 4
69760: NEG
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 3
69768: NEG
69769: PUSH
69770: LD_INT 3
69772: NEG
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 4
69780: NEG
69781: PUSH
69782: LD_INT 3
69784: NEG
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 5
69792: NEG
69793: PUSH
69794: LD_INT 4
69796: NEG
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 5
69804: NEG
69805: PUSH
69806: LD_INT 5
69808: NEG
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 3
69816: NEG
69817: PUSH
69818: LD_INT 5
69820: NEG
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 5
69828: NEG
69829: PUSH
69830: LD_INT 3
69832: NEG
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 0
69840: PUSH
69841: LD_INT 3
69843: NEG
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 0
69851: PUSH
69852: LD_INT 4
69854: NEG
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 1
69862: PUSH
69863: LD_INT 3
69865: NEG
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: LD_INT 1
69873: PUSH
69874: LD_INT 2
69876: NEG
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: PUSH
69882: LD_INT 0
69884: PUSH
69885: LD_INT 2
69887: NEG
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 1
69895: NEG
69896: PUSH
69897: LD_INT 3
69899: NEG
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 1
69907: NEG
69908: PUSH
69909: LD_INT 4
69911: NEG
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 2
69919: PUSH
69920: LD_INT 2
69922: NEG
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 2
69930: NEG
69931: PUSH
69932: LD_INT 4
69934: NEG
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 4
69942: PUSH
69943: LD_INT 0
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 4
69952: PUSH
69953: LD_INT 1
69955: NEG
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 5
69963: PUSH
69964: LD_INT 0
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 5
69973: PUSH
69974: LD_INT 1
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 4
69983: PUSH
69984: LD_INT 1
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: LD_INT 3
69993: PUSH
69994: LD_INT 0
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: PUSH
70001: LD_INT 3
70003: PUSH
70004: LD_INT 1
70006: NEG
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 3
70014: PUSH
70015: LD_INT 2
70017: NEG
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 5
70025: PUSH
70026: LD_INT 2
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 3
70035: PUSH
70036: LD_INT 3
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 3
70045: PUSH
70046: LD_INT 2
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 4
70055: PUSH
70056: LD_INT 3
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 4
70065: PUSH
70066: LD_INT 4
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 3
70075: PUSH
70076: LD_INT 4
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 2
70085: PUSH
70086: LD_INT 3
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: PUSH
70093: LD_INT 2
70095: PUSH
70096: LD_INT 2
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 4
70105: PUSH
70106: LD_INT 2
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 2
70115: PUSH
70116: LD_INT 4
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: LD_INT 0
70125: PUSH
70126: LD_INT 4
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 0
70135: PUSH
70136: LD_INT 3
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 1
70145: PUSH
70146: LD_INT 4
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 1
70155: PUSH
70156: LD_INT 5
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 0
70165: PUSH
70166: LD_INT 5
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 1
70175: NEG
70176: PUSH
70177: LD_INT 4
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PUSH
70184: LD_INT 1
70186: NEG
70187: PUSH
70188: LD_INT 3
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 2
70197: PUSH
70198: LD_INT 5
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: LD_INT 2
70207: NEG
70208: PUSH
70209: LD_INT 3
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70263: LD_ADDR_VAR 0 34
70267: PUSH
70268: LD_INT 0
70270: PUSH
70271: LD_INT 4
70273: NEG
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 0
70281: PUSH
70282: LD_INT 5
70284: NEG
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 1
70292: PUSH
70293: LD_INT 4
70295: NEG
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 1
70303: PUSH
70304: LD_INT 3
70306: NEG
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: LD_INT 0
70314: PUSH
70315: LD_INT 3
70317: NEG
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: LD_INT 1
70325: NEG
70326: PUSH
70327: LD_INT 4
70329: NEG
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_INT 1
70337: NEG
70338: PUSH
70339: LD_INT 5
70341: NEG
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 2
70349: PUSH
70350: LD_INT 3
70352: NEG
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 2
70360: NEG
70361: PUSH
70362: LD_INT 5
70364: NEG
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 3
70372: PUSH
70373: LD_INT 0
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 3
70382: PUSH
70383: LD_INT 1
70385: NEG
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 4
70393: PUSH
70394: LD_INT 0
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PUSH
70401: LD_INT 4
70403: PUSH
70404: LD_INT 1
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 3
70413: PUSH
70414: LD_INT 1
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 2
70423: PUSH
70424: LD_INT 0
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 2
70433: PUSH
70434: LD_INT 1
70436: NEG
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 2
70444: PUSH
70445: LD_INT 2
70447: NEG
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 4
70455: PUSH
70456: LD_INT 2
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 4
70465: PUSH
70466: LD_INT 4
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 4
70475: PUSH
70476: LD_INT 3
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 5
70485: PUSH
70486: LD_INT 4
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 5
70495: PUSH
70496: LD_INT 5
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: LD_INT 4
70505: PUSH
70506: LD_INT 5
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: PUSH
70513: LD_INT 3
70515: PUSH
70516: LD_INT 4
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 3
70525: PUSH
70526: LD_INT 3
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 5
70535: PUSH
70536: LD_INT 3
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 3
70545: PUSH
70546: LD_INT 5
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 0
70555: PUSH
70556: LD_INT 3
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: LD_INT 0
70565: PUSH
70566: LD_INT 2
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 1
70575: PUSH
70576: LD_INT 3
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: LD_INT 1
70585: PUSH
70586: LD_INT 4
70588: PUSH
70589: EMPTY
70590: LIST
70591: LIST
70592: PUSH
70593: LD_INT 0
70595: PUSH
70596: LD_INT 4
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 1
70605: NEG
70606: PUSH
70607: LD_INT 3
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: PUSH
70614: LD_INT 1
70616: NEG
70617: PUSH
70618: LD_INT 2
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: PUSH
70625: LD_INT 2
70627: PUSH
70628: LD_INT 4
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: PUSH
70635: LD_INT 2
70637: NEG
70638: PUSH
70639: LD_INT 2
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: LD_INT 4
70648: NEG
70649: PUSH
70650: LD_INT 0
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 4
70659: NEG
70660: PUSH
70661: LD_INT 1
70663: NEG
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 3
70671: NEG
70672: PUSH
70673: LD_INT 0
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 3
70682: NEG
70683: PUSH
70684: LD_INT 1
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 4
70693: NEG
70694: PUSH
70695: LD_INT 1
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: LD_INT 5
70704: NEG
70705: PUSH
70706: LD_INT 0
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 5
70715: NEG
70716: PUSH
70717: LD_INT 1
70719: NEG
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: LD_INT 5
70727: NEG
70728: PUSH
70729: LD_INT 2
70731: NEG
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PUSH
70737: LD_INT 3
70739: NEG
70740: PUSH
70741: LD_INT 2
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: LIST
70793: LIST
70794: ST_TO_ADDR
// end ; end ;
70795: GO 70798
70797: POP
// case btype of b_depot , b_warehouse :
70798: LD_VAR 0 1
70802: PUSH
70803: LD_INT 0
70805: DOUBLE
70806: EQUAL
70807: IFTRUE 70817
70809: LD_INT 1
70811: DOUBLE
70812: EQUAL
70813: IFTRUE 70817
70815: GO 71018
70817: POP
// case nation of nation_american :
70818: LD_VAR 0 5
70822: PUSH
70823: LD_INT 1
70825: DOUBLE
70826: EQUAL
70827: IFTRUE 70831
70829: GO 70887
70831: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70832: LD_ADDR_VAR 0 9
70836: PUSH
70837: LD_VAR 0 11
70841: PUSH
70842: LD_VAR 0 12
70846: PUSH
70847: LD_VAR 0 13
70851: PUSH
70852: LD_VAR 0 14
70856: PUSH
70857: LD_VAR 0 15
70861: PUSH
70862: LD_VAR 0 16
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: PUSH
70875: LD_VAR 0 4
70879: PUSH
70880: LD_INT 1
70882: PLUS
70883: ARRAY
70884: ST_TO_ADDR
70885: GO 71016
70887: LD_INT 2
70889: DOUBLE
70890: EQUAL
70891: IFTRUE 70895
70893: GO 70951
70895: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70896: LD_ADDR_VAR 0 9
70900: PUSH
70901: LD_VAR 0 17
70905: PUSH
70906: LD_VAR 0 18
70910: PUSH
70911: LD_VAR 0 19
70915: PUSH
70916: LD_VAR 0 20
70920: PUSH
70921: LD_VAR 0 21
70925: PUSH
70926: LD_VAR 0 22
70930: PUSH
70931: EMPTY
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: PUSH
70939: LD_VAR 0 4
70943: PUSH
70944: LD_INT 1
70946: PLUS
70947: ARRAY
70948: ST_TO_ADDR
70949: GO 71016
70951: LD_INT 3
70953: DOUBLE
70954: EQUAL
70955: IFTRUE 70959
70957: GO 71015
70959: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70960: LD_ADDR_VAR 0 9
70964: PUSH
70965: LD_VAR 0 23
70969: PUSH
70970: LD_VAR 0 24
70974: PUSH
70975: LD_VAR 0 25
70979: PUSH
70980: LD_VAR 0 26
70984: PUSH
70985: LD_VAR 0 27
70989: PUSH
70990: LD_VAR 0 28
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: PUSH
71003: LD_VAR 0 4
71007: PUSH
71008: LD_INT 1
71010: PLUS
71011: ARRAY
71012: ST_TO_ADDR
71013: GO 71016
71015: POP
71016: GO 71571
71018: LD_INT 2
71020: DOUBLE
71021: EQUAL
71022: IFTRUE 71032
71024: LD_INT 3
71026: DOUBLE
71027: EQUAL
71028: IFTRUE 71032
71030: GO 71088
71032: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71033: LD_ADDR_VAR 0 9
71037: PUSH
71038: LD_VAR 0 29
71042: PUSH
71043: LD_VAR 0 30
71047: PUSH
71048: LD_VAR 0 31
71052: PUSH
71053: LD_VAR 0 32
71057: PUSH
71058: LD_VAR 0 33
71062: PUSH
71063: LD_VAR 0 34
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: PUSH
71076: LD_VAR 0 4
71080: PUSH
71081: LD_INT 1
71083: PLUS
71084: ARRAY
71085: ST_TO_ADDR
71086: GO 71571
71088: LD_INT 16
71090: DOUBLE
71091: EQUAL
71092: IFTRUE 71150
71094: LD_INT 17
71096: DOUBLE
71097: EQUAL
71098: IFTRUE 71150
71100: LD_INT 18
71102: DOUBLE
71103: EQUAL
71104: IFTRUE 71150
71106: LD_INT 19
71108: DOUBLE
71109: EQUAL
71110: IFTRUE 71150
71112: LD_INT 22
71114: DOUBLE
71115: EQUAL
71116: IFTRUE 71150
71118: LD_INT 20
71120: DOUBLE
71121: EQUAL
71122: IFTRUE 71150
71124: LD_INT 21
71126: DOUBLE
71127: EQUAL
71128: IFTRUE 71150
71130: LD_INT 23
71132: DOUBLE
71133: EQUAL
71134: IFTRUE 71150
71136: LD_INT 24
71138: DOUBLE
71139: EQUAL
71140: IFTRUE 71150
71142: LD_INT 25
71144: DOUBLE
71145: EQUAL
71146: IFTRUE 71150
71148: GO 71206
71150: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71151: LD_ADDR_VAR 0 9
71155: PUSH
71156: LD_VAR 0 35
71160: PUSH
71161: LD_VAR 0 36
71165: PUSH
71166: LD_VAR 0 37
71170: PUSH
71171: LD_VAR 0 38
71175: PUSH
71176: LD_VAR 0 39
71180: PUSH
71181: LD_VAR 0 40
71185: PUSH
71186: EMPTY
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: PUSH
71194: LD_VAR 0 4
71198: PUSH
71199: LD_INT 1
71201: PLUS
71202: ARRAY
71203: ST_TO_ADDR
71204: GO 71571
71206: LD_INT 6
71208: DOUBLE
71209: EQUAL
71210: IFTRUE 71262
71212: LD_INT 7
71214: DOUBLE
71215: EQUAL
71216: IFTRUE 71262
71218: LD_INT 8
71220: DOUBLE
71221: EQUAL
71222: IFTRUE 71262
71224: LD_INT 13
71226: DOUBLE
71227: EQUAL
71228: IFTRUE 71262
71230: LD_INT 12
71232: DOUBLE
71233: EQUAL
71234: IFTRUE 71262
71236: LD_INT 15
71238: DOUBLE
71239: EQUAL
71240: IFTRUE 71262
71242: LD_INT 11
71244: DOUBLE
71245: EQUAL
71246: IFTRUE 71262
71248: LD_INT 14
71250: DOUBLE
71251: EQUAL
71252: IFTRUE 71262
71254: LD_INT 10
71256: DOUBLE
71257: EQUAL
71258: IFTRUE 71262
71260: GO 71318
71262: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71263: LD_ADDR_VAR 0 9
71267: PUSH
71268: LD_VAR 0 41
71272: PUSH
71273: LD_VAR 0 42
71277: PUSH
71278: LD_VAR 0 43
71282: PUSH
71283: LD_VAR 0 44
71287: PUSH
71288: LD_VAR 0 45
71292: PUSH
71293: LD_VAR 0 46
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: LIST
71304: LIST
71305: PUSH
71306: LD_VAR 0 4
71310: PUSH
71311: LD_INT 1
71313: PLUS
71314: ARRAY
71315: ST_TO_ADDR
71316: GO 71571
71318: LD_INT 36
71320: DOUBLE
71321: EQUAL
71322: IFTRUE 71326
71324: GO 71382
71326: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71327: LD_ADDR_VAR 0 9
71331: PUSH
71332: LD_VAR 0 47
71336: PUSH
71337: LD_VAR 0 48
71341: PUSH
71342: LD_VAR 0 49
71346: PUSH
71347: LD_VAR 0 50
71351: PUSH
71352: LD_VAR 0 51
71356: PUSH
71357: LD_VAR 0 52
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: PUSH
71370: LD_VAR 0 4
71374: PUSH
71375: LD_INT 1
71377: PLUS
71378: ARRAY
71379: ST_TO_ADDR
71380: GO 71571
71382: LD_INT 4
71384: DOUBLE
71385: EQUAL
71386: IFTRUE 71408
71388: LD_INT 5
71390: DOUBLE
71391: EQUAL
71392: IFTRUE 71408
71394: LD_INT 34
71396: DOUBLE
71397: EQUAL
71398: IFTRUE 71408
71400: LD_INT 37
71402: DOUBLE
71403: EQUAL
71404: IFTRUE 71408
71406: GO 71464
71408: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71409: LD_ADDR_VAR 0 9
71413: PUSH
71414: LD_VAR 0 53
71418: PUSH
71419: LD_VAR 0 54
71423: PUSH
71424: LD_VAR 0 55
71428: PUSH
71429: LD_VAR 0 56
71433: PUSH
71434: LD_VAR 0 57
71438: PUSH
71439: LD_VAR 0 58
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: PUSH
71452: LD_VAR 0 4
71456: PUSH
71457: LD_INT 1
71459: PLUS
71460: ARRAY
71461: ST_TO_ADDR
71462: GO 71571
71464: LD_INT 31
71466: DOUBLE
71467: EQUAL
71468: IFTRUE 71514
71470: LD_INT 32
71472: DOUBLE
71473: EQUAL
71474: IFTRUE 71514
71476: LD_INT 33
71478: DOUBLE
71479: EQUAL
71480: IFTRUE 71514
71482: LD_INT 27
71484: DOUBLE
71485: EQUAL
71486: IFTRUE 71514
71488: LD_INT 26
71490: DOUBLE
71491: EQUAL
71492: IFTRUE 71514
71494: LD_INT 28
71496: DOUBLE
71497: EQUAL
71498: IFTRUE 71514
71500: LD_INT 29
71502: DOUBLE
71503: EQUAL
71504: IFTRUE 71514
71506: LD_INT 30
71508: DOUBLE
71509: EQUAL
71510: IFTRUE 71514
71512: GO 71570
71514: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71515: LD_ADDR_VAR 0 9
71519: PUSH
71520: LD_VAR 0 59
71524: PUSH
71525: LD_VAR 0 60
71529: PUSH
71530: LD_VAR 0 61
71534: PUSH
71535: LD_VAR 0 62
71539: PUSH
71540: LD_VAR 0 63
71544: PUSH
71545: LD_VAR 0 64
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: PUSH
71558: LD_VAR 0 4
71562: PUSH
71563: LD_INT 1
71565: PLUS
71566: ARRAY
71567: ST_TO_ADDR
71568: GO 71571
71570: POP
// temp_list2 = [ ] ;
71571: LD_ADDR_VAR 0 10
71575: PUSH
71576: EMPTY
71577: ST_TO_ADDR
// for i in temp_list do
71578: LD_ADDR_VAR 0 8
71582: PUSH
71583: LD_VAR 0 9
71587: PUSH
71588: FOR_IN
71589: IFFALSE 71641
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71591: LD_ADDR_VAR 0 10
71595: PUSH
71596: LD_VAR 0 10
71600: PUSH
71601: LD_VAR 0 8
71605: PUSH
71606: LD_INT 1
71608: ARRAY
71609: PUSH
71610: LD_VAR 0 2
71614: PLUS
71615: PUSH
71616: LD_VAR 0 8
71620: PUSH
71621: LD_INT 2
71623: ARRAY
71624: PUSH
71625: LD_VAR 0 3
71629: PLUS
71630: PUSH
71631: EMPTY
71632: LIST
71633: LIST
71634: PUSH
71635: EMPTY
71636: LIST
71637: ADD
71638: ST_TO_ADDR
71639: GO 71588
71641: POP
71642: POP
// result = temp_list2 ;
71643: LD_ADDR_VAR 0 7
71647: PUSH
71648: LD_VAR 0 10
71652: ST_TO_ADDR
// end ;
71653: LD_VAR 0 7
71657: RET
// export function EnemyInRange ( unit , dist ) ; begin
71658: LD_INT 0
71660: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71661: LD_ADDR_VAR 0 3
71665: PUSH
71666: LD_VAR 0 1
71670: PPUSH
71671: CALL_OW 255
71675: PPUSH
71676: LD_VAR 0 1
71680: PPUSH
71681: CALL_OW 250
71685: PPUSH
71686: LD_VAR 0 1
71690: PPUSH
71691: CALL_OW 251
71695: PPUSH
71696: LD_VAR 0 2
71700: PPUSH
71701: CALL 45060 0 4
71705: PUSH
71706: LD_INT 4
71708: ARRAY
71709: ST_TO_ADDR
// end ;
71710: LD_VAR 0 3
71714: RET
// export function PlayerSeeMe ( unit ) ; begin
71715: LD_INT 0
71717: PPUSH
// result := See ( your_side , unit ) ;
71718: LD_ADDR_VAR 0 2
71722: PUSH
71723: LD_OWVAR 2
71727: PPUSH
71728: LD_VAR 0 1
71732: PPUSH
71733: CALL_OW 292
71737: ST_TO_ADDR
// end ;
71738: LD_VAR 0 2
71742: RET
// export function ReverseDir ( unit ) ; begin
71743: LD_INT 0
71745: PPUSH
// if not unit then
71746: LD_VAR 0 1
71750: NOT
71751: IFFALSE 71755
// exit ;
71753: GO 71778
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71755: LD_ADDR_VAR 0 2
71759: PUSH
71760: LD_VAR 0 1
71764: PPUSH
71765: CALL_OW 254
71769: PUSH
71770: LD_INT 3
71772: PLUS
71773: PUSH
71774: LD_INT 6
71776: MOD
71777: ST_TO_ADDR
// end ;
71778: LD_VAR 0 2
71782: RET
// export function ReverseArray ( array ) ; var i ; begin
71783: LD_INT 0
71785: PPUSH
71786: PPUSH
// if not array then
71787: LD_VAR 0 1
71791: NOT
71792: IFFALSE 71796
// exit ;
71794: GO 71851
// result := [ ] ;
71796: LD_ADDR_VAR 0 2
71800: PUSH
71801: EMPTY
71802: ST_TO_ADDR
// for i := array downto 1 do
71803: LD_ADDR_VAR 0 3
71807: PUSH
71808: DOUBLE
71809: LD_VAR 0 1
71813: INC
71814: ST_TO_ADDR
71815: LD_INT 1
71817: PUSH
71818: FOR_DOWNTO
71819: IFFALSE 71849
// result := Join ( result , array [ i ] ) ;
71821: LD_ADDR_VAR 0 2
71825: PUSH
71826: LD_VAR 0 2
71830: PPUSH
71831: LD_VAR 0 1
71835: PUSH
71836: LD_VAR 0 3
71840: ARRAY
71841: PPUSH
71842: CALL 76476 0 2
71846: ST_TO_ADDR
71847: GO 71818
71849: POP
71850: POP
// end ;
71851: LD_VAR 0 2
71855: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71856: LD_INT 0
71858: PPUSH
71859: PPUSH
71860: PPUSH
71861: PPUSH
71862: PPUSH
71863: PPUSH
// if not unit or not hexes then
71864: LD_VAR 0 1
71868: NOT
71869: PUSH
71870: LD_VAR 0 2
71874: NOT
71875: OR
71876: IFFALSE 71880
// exit ;
71878: GO 72003
// dist := 9999 ;
71880: LD_ADDR_VAR 0 5
71884: PUSH
71885: LD_INT 9999
71887: ST_TO_ADDR
// for i = 1 to hexes do
71888: LD_ADDR_VAR 0 4
71892: PUSH
71893: DOUBLE
71894: LD_INT 1
71896: DEC
71897: ST_TO_ADDR
71898: LD_VAR 0 2
71902: PUSH
71903: FOR_TO
71904: IFFALSE 71991
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71906: LD_ADDR_VAR 0 6
71910: PUSH
71911: LD_VAR 0 1
71915: PPUSH
71916: LD_VAR 0 2
71920: PUSH
71921: LD_VAR 0 4
71925: ARRAY
71926: PUSH
71927: LD_INT 1
71929: ARRAY
71930: PPUSH
71931: LD_VAR 0 2
71935: PUSH
71936: LD_VAR 0 4
71940: ARRAY
71941: PUSH
71942: LD_INT 2
71944: ARRAY
71945: PPUSH
71946: CALL_OW 297
71950: ST_TO_ADDR
// if tdist < dist then
71951: LD_VAR 0 6
71955: PUSH
71956: LD_VAR 0 5
71960: LESS
71961: IFFALSE 71989
// begin hex := hexes [ i ] ;
71963: LD_ADDR_VAR 0 8
71967: PUSH
71968: LD_VAR 0 2
71972: PUSH
71973: LD_VAR 0 4
71977: ARRAY
71978: ST_TO_ADDR
// dist := tdist ;
71979: LD_ADDR_VAR 0 5
71983: PUSH
71984: LD_VAR 0 6
71988: ST_TO_ADDR
// end ; end ;
71989: GO 71903
71991: POP
71992: POP
// result := hex ;
71993: LD_ADDR_VAR 0 3
71997: PUSH
71998: LD_VAR 0 8
72002: ST_TO_ADDR
// end ;
72003: LD_VAR 0 3
72007: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72008: LD_INT 0
72010: PPUSH
72011: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72012: LD_VAR 0 1
72016: NOT
72017: PUSH
72018: LD_VAR 0 1
72022: PUSH
72023: LD_INT 21
72025: PUSH
72026: LD_INT 2
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 23
72035: PUSH
72036: LD_INT 2
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: PPUSH
72047: CALL_OW 69
72051: IN
72052: NOT
72053: OR
72054: IFFALSE 72058
// exit ;
72056: GO 72105
// for i = 1 to 3 do
72058: LD_ADDR_VAR 0 3
72062: PUSH
72063: DOUBLE
72064: LD_INT 1
72066: DEC
72067: ST_TO_ADDR
72068: LD_INT 3
72070: PUSH
72071: FOR_TO
72072: IFFALSE 72103
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72074: LD_VAR 0 1
72078: PPUSH
72079: CALL_OW 250
72083: PPUSH
72084: LD_VAR 0 1
72088: PPUSH
72089: CALL_OW 251
72093: PPUSH
72094: LD_INT 1
72096: PPUSH
72097: CALL_OW 453
72101: GO 72071
72103: POP
72104: POP
// end ;
72105: LD_VAR 0 2
72109: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72110: LD_INT 0
72112: PPUSH
72113: PPUSH
72114: PPUSH
72115: PPUSH
72116: PPUSH
72117: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72118: LD_VAR 0 1
72122: NOT
72123: PUSH
72124: LD_VAR 0 2
72128: NOT
72129: OR
72130: PUSH
72131: LD_VAR 0 1
72135: PPUSH
72136: CALL_OW 314
72140: OR
72141: IFFALSE 72145
// exit ;
72143: GO 72586
// x := GetX ( enemy_unit ) ;
72145: LD_ADDR_VAR 0 7
72149: PUSH
72150: LD_VAR 0 2
72154: PPUSH
72155: CALL_OW 250
72159: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72160: LD_ADDR_VAR 0 8
72164: PUSH
72165: LD_VAR 0 2
72169: PPUSH
72170: CALL_OW 251
72174: ST_TO_ADDR
// if not x or not y then
72175: LD_VAR 0 7
72179: NOT
72180: PUSH
72181: LD_VAR 0 8
72185: NOT
72186: OR
72187: IFFALSE 72191
// exit ;
72189: GO 72586
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72191: LD_ADDR_VAR 0 6
72195: PUSH
72196: LD_VAR 0 7
72200: PPUSH
72201: LD_INT 0
72203: PPUSH
72204: LD_INT 4
72206: PPUSH
72207: CALL_OW 272
72211: PUSH
72212: LD_VAR 0 8
72216: PPUSH
72217: LD_INT 0
72219: PPUSH
72220: LD_INT 4
72222: PPUSH
72223: CALL_OW 273
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_VAR 0 7
72236: PPUSH
72237: LD_INT 1
72239: PPUSH
72240: LD_INT 4
72242: PPUSH
72243: CALL_OW 272
72247: PUSH
72248: LD_VAR 0 8
72252: PPUSH
72253: LD_INT 1
72255: PPUSH
72256: LD_INT 4
72258: PPUSH
72259: CALL_OW 273
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: PUSH
72268: LD_VAR 0 7
72272: PPUSH
72273: LD_INT 2
72275: PPUSH
72276: LD_INT 4
72278: PPUSH
72279: CALL_OW 272
72283: PUSH
72284: LD_VAR 0 8
72288: PPUSH
72289: LD_INT 2
72291: PPUSH
72292: LD_INT 4
72294: PPUSH
72295: CALL_OW 273
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PUSH
72304: LD_VAR 0 7
72308: PPUSH
72309: LD_INT 3
72311: PPUSH
72312: LD_INT 4
72314: PPUSH
72315: CALL_OW 272
72319: PUSH
72320: LD_VAR 0 8
72324: PPUSH
72325: LD_INT 3
72327: PPUSH
72328: LD_INT 4
72330: PPUSH
72331: CALL_OW 273
72335: PUSH
72336: EMPTY
72337: LIST
72338: LIST
72339: PUSH
72340: LD_VAR 0 7
72344: PPUSH
72345: LD_INT 4
72347: PPUSH
72348: LD_INT 4
72350: PPUSH
72351: CALL_OW 272
72355: PUSH
72356: LD_VAR 0 8
72360: PPUSH
72361: LD_INT 4
72363: PPUSH
72364: LD_INT 4
72366: PPUSH
72367: CALL_OW 273
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: PUSH
72376: LD_VAR 0 7
72380: PPUSH
72381: LD_INT 5
72383: PPUSH
72384: LD_INT 4
72386: PPUSH
72387: CALL_OW 272
72391: PUSH
72392: LD_VAR 0 8
72396: PPUSH
72397: LD_INT 5
72399: PPUSH
72400: LD_INT 4
72402: PPUSH
72403: CALL_OW 273
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: LIST
72416: LIST
72417: LIST
72418: LIST
72419: ST_TO_ADDR
// for i = tmp downto 1 do
72420: LD_ADDR_VAR 0 4
72424: PUSH
72425: DOUBLE
72426: LD_VAR 0 6
72430: INC
72431: ST_TO_ADDR
72432: LD_INT 1
72434: PUSH
72435: FOR_DOWNTO
72436: IFFALSE 72537
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72438: LD_VAR 0 6
72442: PUSH
72443: LD_VAR 0 4
72447: ARRAY
72448: PUSH
72449: LD_INT 1
72451: ARRAY
72452: PPUSH
72453: LD_VAR 0 6
72457: PUSH
72458: LD_VAR 0 4
72462: ARRAY
72463: PUSH
72464: LD_INT 2
72466: ARRAY
72467: PPUSH
72468: CALL_OW 488
72472: NOT
72473: PUSH
72474: LD_VAR 0 6
72478: PUSH
72479: LD_VAR 0 4
72483: ARRAY
72484: PUSH
72485: LD_INT 1
72487: ARRAY
72488: PPUSH
72489: LD_VAR 0 6
72493: PUSH
72494: LD_VAR 0 4
72498: ARRAY
72499: PUSH
72500: LD_INT 2
72502: ARRAY
72503: PPUSH
72504: CALL_OW 428
72508: PUSH
72509: LD_INT 0
72511: NONEQUAL
72512: OR
72513: IFFALSE 72535
// tmp := Delete ( tmp , i ) ;
72515: LD_ADDR_VAR 0 6
72519: PUSH
72520: LD_VAR 0 6
72524: PPUSH
72525: LD_VAR 0 4
72529: PPUSH
72530: CALL_OW 3
72534: ST_TO_ADDR
72535: GO 72435
72537: POP
72538: POP
// j := GetClosestHex ( unit , tmp ) ;
72539: LD_ADDR_VAR 0 5
72543: PUSH
72544: LD_VAR 0 1
72548: PPUSH
72549: LD_VAR 0 6
72553: PPUSH
72554: CALL 71856 0 2
72558: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72559: LD_VAR 0 1
72563: PPUSH
72564: LD_VAR 0 5
72568: PUSH
72569: LD_INT 1
72571: ARRAY
72572: PPUSH
72573: LD_VAR 0 5
72577: PUSH
72578: LD_INT 2
72580: ARRAY
72581: PPUSH
72582: CALL_OW 111
// end ;
72586: LD_VAR 0 3
72590: RET
// export function PrepareApemanSoldier ( ) ; begin
72591: LD_INT 0
72593: PPUSH
// uc_nation := 0 ;
72594: LD_ADDR_OWVAR 21
72598: PUSH
72599: LD_INT 0
72601: ST_TO_ADDR
// hc_sex := sex_male ;
72602: LD_ADDR_OWVAR 27
72606: PUSH
72607: LD_INT 1
72609: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72610: LD_ADDR_OWVAR 28
72614: PUSH
72615: LD_INT 15
72617: ST_TO_ADDR
// hc_gallery :=  ;
72618: LD_ADDR_OWVAR 33
72622: PUSH
72623: LD_STRING 
72625: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72626: LD_ADDR_OWVAR 31
72630: PUSH
72631: LD_INT 0
72633: PPUSH
72634: LD_INT 3
72636: PPUSH
72637: CALL_OW 12
72641: PUSH
72642: LD_INT 0
72644: PPUSH
72645: LD_INT 3
72647: PPUSH
72648: CALL_OW 12
72652: PUSH
72653: LD_INT 0
72655: PUSH
72656: LD_INT 0
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: ST_TO_ADDR
// end ;
72665: LD_VAR 0 1
72669: RET
// export function PrepareApemanEngineer ( ) ; begin
72670: LD_INT 0
72672: PPUSH
// uc_nation := 0 ;
72673: LD_ADDR_OWVAR 21
72677: PUSH
72678: LD_INT 0
72680: ST_TO_ADDR
// hc_sex := sex_male ;
72681: LD_ADDR_OWVAR 27
72685: PUSH
72686: LD_INT 1
72688: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72689: LD_ADDR_OWVAR 28
72693: PUSH
72694: LD_INT 16
72696: ST_TO_ADDR
// hc_gallery :=  ;
72697: LD_ADDR_OWVAR 33
72701: PUSH
72702: LD_STRING 
72704: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72705: LD_ADDR_OWVAR 31
72709: PUSH
72710: LD_INT 0
72712: PPUSH
72713: LD_INT 3
72715: PPUSH
72716: CALL_OW 12
72720: PUSH
72721: LD_INT 0
72723: PPUSH
72724: LD_INT 3
72726: PPUSH
72727: CALL_OW 12
72731: PUSH
72732: LD_INT 0
72734: PUSH
72735: LD_INT 0
72737: PUSH
72738: EMPTY
72739: LIST
72740: LIST
72741: LIST
72742: LIST
72743: ST_TO_ADDR
// end ;
72744: LD_VAR 0 1
72748: RET
// export function PrepareApeman ( agressivity ) ; begin
72749: LD_INT 0
72751: PPUSH
// uc_side := 0 ;
72752: LD_ADDR_OWVAR 20
72756: PUSH
72757: LD_INT 0
72759: ST_TO_ADDR
// uc_nation := 0 ;
72760: LD_ADDR_OWVAR 21
72764: PUSH
72765: LD_INT 0
72767: ST_TO_ADDR
// hc_sex := sex_male ;
72768: LD_ADDR_OWVAR 27
72772: PUSH
72773: LD_INT 1
72775: ST_TO_ADDR
// hc_class := class_apeman ;
72776: LD_ADDR_OWVAR 28
72780: PUSH
72781: LD_INT 12
72783: ST_TO_ADDR
// hc_gallery :=  ;
72784: LD_ADDR_OWVAR 33
72788: PUSH
72789: LD_STRING 
72791: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72792: LD_ADDR_OWVAR 35
72796: PUSH
72797: LD_VAR 0 1
72801: NEG
72802: PPUSH
72803: LD_VAR 0 1
72807: PPUSH
72808: CALL_OW 12
72812: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72813: LD_ADDR_OWVAR 31
72817: PUSH
72818: LD_INT 0
72820: PPUSH
72821: LD_INT 3
72823: PPUSH
72824: CALL_OW 12
72828: PUSH
72829: LD_INT 0
72831: PPUSH
72832: LD_INT 3
72834: PPUSH
72835: CALL_OW 12
72839: PUSH
72840: LD_INT 0
72842: PUSH
72843: LD_INT 0
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: LIST
72850: LIST
72851: ST_TO_ADDR
// end ;
72852: LD_VAR 0 2
72856: RET
// export function PrepareTiger ( agressivity ) ; begin
72857: LD_INT 0
72859: PPUSH
// uc_side := 0 ;
72860: LD_ADDR_OWVAR 20
72864: PUSH
72865: LD_INT 0
72867: ST_TO_ADDR
// uc_nation := 0 ;
72868: LD_ADDR_OWVAR 21
72872: PUSH
72873: LD_INT 0
72875: ST_TO_ADDR
// hc_class := class_tiger ;
72876: LD_ADDR_OWVAR 28
72880: PUSH
72881: LD_INT 14
72883: ST_TO_ADDR
// hc_gallery :=  ;
72884: LD_ADDR_OWVAR 33
72888: PUSH
72889: LD_STRING 
72891: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72892: LD_ADDR_OWVAR 35
72896: PUSH
72897: LD_VAR 0 1
72901: NEG
72902: PPUSH
72903: LD_VAR 0 1
72907: PPUSH
72908: CALL_OW 12
72912: ST_TO_ADDR
// end ;
72913: LD_VAR 0 2
72917: RET
// export function PrepareEnchidna ( ) ; begin
72918: LD_INT 0
72920: PPUSH
// uc_side := 0 ;
72921: LD_ADDR_OWVAR 20
72925: PUSH
72926: LD_INT 0
72928: ST_TO_ADDR
// uc_nation := 0 ;
72929: LD_ADDR_OWVAR 21
72933: PUSH
72934: LD_INT 0
72936: ST_TO_ADDR
// hc_class := class_baggie ;
72937: LD_ADDR_OWVAR 28
72941: PUSH
72942: LD_INT 13
72944: ST_TO_ADDR
// hc_gallery :=  ;
72945: LD_ADDR_OWVAR 33
72949: PUSH
72950: LD_STRING 
72952: ST_TO_ADDR
// end ;
72953: LD_VAR 0 1
72957: RET
// export function PrepareFrog ( ) ; begin
72958: LD_INT 0
72960: PPUSH
// uc_side := 0 ;
72961: LD_ADDR_OWVAR 20
72965: PUSH
72966: LD_INT 0
72968: ST_TO_ADDR
// uc_nation := 0 ;
72969: LD_ADDR_OWVAR 21
72973: PUSH
72974: LD_INT 0
72976: ST_TO_ADDR
// hc_class := class_frog ;
72977: LD_ADDR_OWVAR 28
72981: PUSH
72982: LD_INT 19
72984: ST_TO_ADDR
// hc_gallery :=  ;
72985: LD_ADDR_OWVAR 33
72989: PUSH
72990: LD_STRING 
72992: ST_TO_ADDR
// end ;
72993: LD_VAR 0 1
72997: RET
// export function PrepareFish ( ) ; begin
72998: LD_INT 0
73000: PPUSH
// uc_side := 0 ;
73001: LD_ADDR_OWVAR 20
73005: PUSH
73006: LD_INT 0
73008: ST_TO_ADDR
// uc_nation := 0 ;
73009: LD_ADDR_OWVAR 21
73013: PUSH
73014: LD_INT 0
73016: ST_TO_ADDR
// hc_class := class_fish ;
73017: LD_ADDR_OWVAR 28
73021: PUSH
73022: LD_INT 20
73024: ST_TO_ADDR
// hc_gallery :=  ;
73025: LD_ADDR_OWVAR 33
73029: PUSH
73030: LD_STRING 
73032: ST_TO_ADDR
// end ;
73033: LD_VAR 0 1
73037: RET
// export function PrepareBird ( ) ; begin
73038: LD_INT 0
73040: PPUSH
// uc_side := 0 ;
73041: LD_ADDR_OWVAR 20
73045: PUSH
73046: LD_INT 0
73048: ST_TO_ADDR
// uc_nation := 0 ;
73049: LD_ADDR_OWVAR 21
73053: PUSH
73054: LD_INT 0
73056: ST_TO_ADDR
// hc_class := class_phororhacos ;
73057: LD_ADDR_OWVAR 28
73061: PUSH
73062: LD_INT 18
73064: ST_TO_ADDR
// hc_gallery :=  ;
73065: LD_ADDR_OWVAR 33
73069: PUSH
73070: LD_STRING 
73072: ST_TO_ADDR
// end ;
73073: LD_VAR 0 1
73077: RET
// export function PrepareHorse ( ) ; begin
73078: LD_INT 0
73080: PPUSH
// uc_side := 0 ;
73081: LD_ADDR_OWVAR 20
73085: PUSH
73086: LD_INT 0
73088: ST_TO_ADDR
// uc_nation := 0 ;
73089: LD_ADDR_OWVAR 21
73093: PUSH
73094: LD_INT 0
73096: ST_TO_ADDR
// hc_class := class_horse ;
73097: LD_ADDR_OWVAR 28
73101: PUSH
73102: LD_INT 21
73104: ST_TO_ADDR
// hc_gallery :=  ;
73105: LD_ADDR_OWVAR 33
73109: PUSH
73110: LD_STRING 
73112: ST_TO_ADDR
// end ;
73113: LD_VAR 0 1
73117: RET
// export function PrepareMastodont ( ) ; begin
73118: LD_INT 0
73120: PPUSH
// uc_side := 0 ;
73121: LD_ADDR_OWVAR 20
73125: PUSH
73126: LD_INT 0
73128: ST_TO_ADDR
// uc_nation := 0 ;
73129: LD_ADDR_OWVAR 21
73133: PUSH
73134: LD_INT 0
73136: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73137: LD_ADDR_OWVAR 37
73141: PUSH
73142: LD_INT 31
73144: ST_TO_ADDR
// vc_control := control_rider ;
73145: LD_ADDR_OWVAR 38
73149: PUSH
73150: LD_INT 4
73152: ST_TO_ADDR
// end ;
73153: LD_VAR 0 1
73157: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73158: LD_INT 0
73160: PPUSH
73161: PPUSH
73162: PPUSH
// uc_side = 0 ;
73163: LD_ADDR_OWVAR 20
73167: PUSH
73168: LD_INT 0
73170: ST_TO_ADDR
// uc_nation = 0 ;
73171: LD_ADDR_OWVAR 21
73175: PUSH
73176: LD_INT 0
73178: ST_TO_ADDR
// InitHc_All ( ) ;
73179: CALL_OW 584
// InitVc ;
73183: CALL_OW 20
// if mastodonts then
73187: LD_VAR 0 6
73191: IFFALSE 73258
// for i = 1 to mastodonts do
73193: LD_ADDR_VAR 0 11
73197: PUSH
73198: DOUBLE
73199: LD_INT 1
73201: DEC
73202: ST_TO_ADDR
73203: LD_VAR 0 6
73207: PUSH
73208: FOR_TO
73209: IFFALSE 73256
// begin vc_chassis := 31 ;
73211: LD_ADDR_OWVAR 37
73215: PUSH
73216: LD_INT 31
73218: ST_TO_ADDR
// vc_control := control_rider ;
73219: LD_ADDR_OWVAR 38
73223: PUSH
73224: LD_INT 4
73226: ST_TO_ADDR
// animal := CreateVehicle ;
73227: LD_ADDR_VAR 0 12
73231: PUSH
73232: CALL_OW 45
73236: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73237: LD_VAR 0 12
73241: PPUSH
73242: LD_VAR 0 8
73246: PPUSH
73247: LD_INT 0
73249: PPUSH
73250: CALL 75393 0 3
// end ;
73254: GO 73208
73256: POP
73257: POP
// if horses then
73258: LD_VAR 0 5
73262: IFFALSE 73329
// for i = 1 to horses do
73264: LD_ADDR_VAR 0 11
73268: PUSH
73269: DOUBLE
73270: LD_INT 1
73272: DEC
73273: ST_TO_ADDR
73274: LD_VAR 0 5
73278: PUSH
73279: FOR_TO
73280: IFFALSE 73327
// begin hc_class := 21 ;
73282: LD_ADDR_OWVAR 28
73286: PUSH
73287: LD_INT 21
73289: ST_TO_ADDR
// hc_gallery :=  ;
73290: LD_ADDR_OWVAR 33
73294: PUSH
73295: LD_STRING 
73297: ST_TO_ADDR
// animal := CreateHuman ;
73298: LD_ADDR_VAR 0 12
73302: PUSH
73303: CALL_OW 44
73307: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73308: LD_VAR 0 12
73312: PPUSH
73313: LD_VAR 0 8
73317: PPUSH
73318: LD_INT 0
73320: PPUSH
73321: CALL 75393 0 3
// end ;
73325: GO 73279
73327: POP
73328: POP
// if birds then
73329: LD_VAR 0 1
73333: IFFALSE 73400
// for i = 1 to birds do
73335: LD_ADDR_VAR 0 11
73339: PUSH
73340: DOUBLE
73341: LD_INT 1
73343: DEC
73344: ST_TO_ADDR
73345: LD_VAR 0 1
73349: PUSH
73350: FOR_TO
73351: IFFALSE 73398
// begin hc_class = 18 ;
73353: LD_ADDR_OWVAR 28
73357: PUSH
73358: LD_INT 18
73360: ST_TO_ADDR
// hc_gallery =  ;
73361: LD_ADDR_OWVAR 33
73365: PUSH
73366: LD_STRING 
73368: ST_TO_ADDR
// animal := CreateHuman ;
73369: LD_ADDR_VAR 0 12
73373: PUSH
73374: CALL_OW 44
73378: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73379: LD_VAR 0 12
73383: PPUSH
73384: LD_VAR 0 8
73388: PPUSH
73389: LD_INT 0
73391: PPUSH
73392: CALL 75393 0 3
// end ;
73396: GO 73350
73398: POP
73399: POP
// if tigers then
73400: LD_VAR 0 2
73404: IFFALSE 73488
// for i = 1 to tigers do
73406: LD_ADDR_VAR 0 11
73410: PUSH
73411: DOUBLE
73412: LD_INT 1
73414: DEC
73415: ST_TO_ADDR
73416: LD_VAR 0 2
73420: PUSH
73421: FOR_TO
73422: IFFALSE 73486
// begin hc_class = class_tiger ;
73424: LD_ADDR_OWVAR 28
73428: PUSH
73429: LD_INT 14
73431: ST_TO_ADDR
// hc_gallery =  ;
73432: LD_ADDR_OWVAR 33
73436: PUSH
73437: LD_STRING 
73439: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73440: LD_ADDR_OWVAR 35
73444: PUSH
73445: LD_INT 7
73447: NEG
73448: PPUSH
73449: LD_INT 7
73451: PPUSH
73452: CALL_OW 12
73456: ST_TO_ADDR
// animal := CreateHuman ;
73457: LD_ADDR_VAR 0 12
73461: PUSH
73462: CALL_OW 44
73466: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73467: LD_VAR 0 12
73471: PPUSH
73472: LD_VAR 0 8
73476: PPUSH
73477: LD_INT 0
73479: PPUSH
73480: CALL 75393 0 3
// end ;
73484: GO 73421
73486: POP
73487: POP
// if apemans then
73488: LD_VAR 0 3
73492: IFFALSE 73615
// for i = 1 to apemans do
73494: LD_ADDR_VAR 0 11
73498: PUSH
73499: DOUBLE
73500: LD_INT 1
73502: DEC
73503: ST_TO_ADDR
73504: LD_VAR 0 3
73508: PUSH
73509: FOR_TO
73510: IFFALSE 73613
// begin hc_class = class_apeman ;
73512: LD_ADDR_OWVAR 28
73516: PUSH
73517: LD_INT 12
73519: ST_TO_ADDR
// hc_gallery =  ;
73520: LD_ADDR_OWVAR 33
73524: PUSH
73525: LD_STRING 
73527: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73528: LD_ADDR_OWVAR 35
73532: PUSH
73533: LD_INT 2
73535: NEG
73536: PPUSH
73537: LD_INT 2
73539: PPUSH
73540: CALL_OW 12
73544: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73545: LD_ADDR_OWVAR 31
73549: PUSH
73550: LD_INT 1
73552: PPUSH
73553: LD_INT 3
73555: PPUSH
73556: CALL_OW 12
73560: PUSH
73561: LD_INT 1
73563: PPUSH
73564: LD_INT 3
73566: PPUSH
73567: CALL_OW 12
73571: PUSH
73572: LD_INT 0
73574: PUSH
73575: LD_INT 0
73577: PUSH
73578: EMPTY
73579: LIST
73580: LIST
73581: LIST
73582: LIST
73583: ST_TO_ADDR
// animal := CreateHuman ;
73584: LD_ADDR_VAR 0 12
73588: PUSH
73589: CALL_OW 44
73593: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73594: LD_VAR 0 12
73598: PPUSH
73599: LD_VAR 0 8
73603: PPUSH
73604: LD_INT 0
73606: PPUSH
73607: CALL 75393 0 3
// end ;
73611: GO 73509
73613: POP
73614: POP
// if enchidnas then
73615: LD_VAR 0 4
73619: IFFALSE 73686
// for i = 1 to enchidnas do
73621: LD_ADDR_VAR 0 11
73625: PUSH
73626: DOUBLE
73627: LD_INT 1
73629: DEC
73630: ST_TO_ADDR
73631: LD_VAR 0 4
73635: PUSH
73636: FOR_TO
73637: IFFALSE 73684
// begin hc_class = 13 ;
73639: LD_ADDR_OWVAR 28
73643: PUSH
73644: LD_INT 13
73646: ST_TO_ADDR
// hc_gallery =  ;
73647: LD_ADDR_OWVAR 33
73651: PUSH
73652: LD_STRING 
73654: ST_TO_ADDR
// animal := CreateHuman ;
73655: LD_ADDR_VAR 0 12
73659: PUSH
73660: CALL_OW 44
73664: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73665: LD_VAR 0 12
73669: PPUSH
73670: LD_VAR 0 8
73674: PPUSH
73675: LD_INT 0
73677: PPUSH
73678: CALL 75393 0 3
// end ;
73682: GO 73636
73684: POP
73685: POP
// if fishes then
73686: LD_VAR 0 7
73690: IFFALSE 73757
// for i = 1 to fishes do
73692: LD_ADDR_VAR 0 11
73696: PUSH
73697: DOUBLE
73698: LD_INT 1
73700: DEC
73701: ST_TO_ADDR
73702: LD_VAR 0 7
73706: PUSH
73707: FOR_TO
73708: IFFALSE 73755
// begin hc_class = 20 ;
73710: LD_ADDR_OWVAR 28
73714: PUSH
73715: LD_INT 20
73717: ST_TO_ADDR
// hc_gallery =  ;
73718: LD_ADDR_OWVAR 33
73722: PUSH
73723: LD_STRING 
73725: ST_TO_ADDR
// animal := CreateHuman ;
73726: LD_ADDR_VAR 0 12
73730: PUSH
73731: CALL_OW 44
73735: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73736: LD_VAR 0 12
73740: PPUSH
73741: LD_VAR 0 9
73745: PPUSH
73746: LD_INT 0
73748: PPUSH
73749: CALL 75393 0 3
// end ;
73753: GO 73707
73755: POP
73756: POP
// end ;
73757: LD_VAR 0 10
73761: RET
// export function WantHeal ( sci , unit ) ; begin
73762: LD_INT 0
73764: PPUSH
// if GetTaskList ( sci ) > 0 then
73765: LD_VAR 0 1
73769: PPUSH
73770: CALL_OW 437
73774: PUSH
73775: LD_INT 0
73777: GREATER
73778: IFFALSE 73848
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73780: LD_VAR 0 1
73784: PPUSH
73785: CALL_OW 437
73789: PUSH
73790: LD_INT 1
73792: ARRAY
73793: PUSH
73794: LD_INT 1
73796: ARRAY
73797: PUSH
73798: LD_STRING l
73800: EQUAL
73801: PUSH
73802: LD_VAR 0 1
73806: PPUSH
73807: CALL_OW 437
73811: PUSH
73812: LD_INT 1
73814: ARRAY
73815: PUSH
73816: LD_INT 4
73818: ARRAY
73819: PUSH
73820: LD_VAR 0 2
73824: EQUAL
73825: AND
73826: IFFALSE 73838
// result := true else
73828: LD_ADDR_VAR 0 3
73832: PUSH
73833: LD_INT 1
73835: ST_TO_ADDR
73836: GO 73846
// result := false ;
73838: LD_ADDR_VAR 0 3
73842: PUSH
73843: LD_INT 0
73845: ST_TO_ADDR
// end else
73846: GO 73856
// result := false ;
73848: LD_ADDR_VAR 0 3
73852: PUSH
73853: LD_INT 0
73855: ST_TO_ADDR
// end ;
73856: LD_VAR 0 3
73860: RET
// export function HealTarget ( sci ) ; begin
73861: LD_INT 0
73863: PPUSH
// if not sci then
73864: LD_VAR 0 1
73868: NOT
73869: IFFALSE 73873
// exit ;
73871: GO 73938
// result := 0 ;
73873: LD_ADDR_VAR 0 2
73877: PUSH
73878: LD_INT 0
73880: ST_TO_ADDR
// if GetTaskList ( sci ) then
73881: LD_VAR 0 1
73885: PPUSH
73886: CALL_OW 437
73890: IFFALSE 73938
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73892: LD_VAR 0 1
73896: PPUSH
73897: CALL_OW 437
73901: PUSH
73902: LD_INT 1
73904: ARRAY
73905: PUSH
73906: LD_INT 1
73908: ARRAY
73909: PUSH
73910: LD_STRING l
73912: EQUAL
73913: IFFALSE 73938
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73915: LD_ADDR_VAR 0 2
73919: PUSH
73920: LD_VAR 0 1
73924: PPUSH
73925: CALL_OW 437
73929: PUSH
73930: LD_INT 1
73932: ARRAY
73933: PUSH
73934: LD_INT 4
73936: ARRAY
73937: ST_TO_ADDR
// end ;
73938: LD_VAR 0 2
73942: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73943: LD_INT 0
73945: PPUSH
73946: PPUSH
73947: PPUSH
73948: PPUSH
// if not base_units then
73949: LD_VAR 0 1
73953: NOT
73954: IFFALSE 73958
// exit ;
73956: GO 74045
// result := false ;
73958: LD_ADDR_VAR 0 2
73962: PUSH
73963: LD_INT 0
73965: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73966: LD_ADDR_VAR 0 5
73970: PUSH
73971: LD_VAR 0 1
73975: PPUSH
73976: LD_INT 21
73978: PUSH
73979: LD_INT 3
73981: PUSH
73982: EMPTY
73983: LIST
73984: LIST
73985: PPUSH
73986: CALL_OW 72
73990: ST_TO_ADDR
// if not tmp then
73991: LD_VAR 0 5
73995: NOT
73996: IFFALSE 74000
// exit ;
73998: GO 74045
// for i in tmp do
74000: LD_ADDR_VAR 0 3
74004: PUSH
74005: LD_VAR 0 5
74009: PUSH
74010: FOR_IN
74011: IFFALSE 74043
// begin result := EnemyInRange ( i , 22 ) ;
74013: LD_ADDR_VAR 0 2
74017: PUSH
74018: LD_VAR 0 3
74022: PPUSH
74023: LD_INT 22
74025: PPUSH
74026: CALL 71658 0 2
74030: ST_TO_ADDR
// if result then
74031: LD_VAR 0 2
74035: IFFALSE 74041
// exit ;
74037: POP
74038: POP
74039: GO 74045
// end ;
74041: GO 74010
74043: POP
74044: POP
// end ;
74045: LD_VAR 0 2
74049: RET
// export function FilterByTag ( units , tag ) ; begin
74050: LD_INT 0
74052: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74053: LD_ADDR_VAR 0 3
74057: PUSH
74058: LD_VAR 0 1
74062: PPUSH
74063: LD_INT 120
74065: PUSH
74066: LD_VAR 0 2
74070: PUSH
74071: EMPTY
74072: LIST
74073: LIST
74074: PPUSH
74075: CALL_OW 72
74079: ST_TO_ADDR
// end ;
74080: LD_VAR 0 3
74084: RET
// export function IsDriver ( un ) ; begin
74085: LD_INT 0
74087: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74088: LD_ADDR_VAR 0 2
74092: PUSH
74093: LD_VAR 0 1
74097: PUSH
74098: LD_INT 55
74100: PUSH
74101: EMPTY
74102: LIST
74103: PPUSH
74104: CALL_OW 69
74108: IN
74109: ST_TO_ADDR
// end ;
74110: LD_VAR 0 2
74114: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74115: LD_INT 0
74117: PPUSH
74118: PPUSH
// list := [ ] ;
74119: LD_ADDR_VAR 0 5
74123: PUSH
74124: EMPTY
74125: ST_TO_ADDR
// case d of 0 :
74126: LD_VAR 0 3
74130: PUSH
74131: LD_INT 0
74133: DOUBLE
74134: EQUAL
74135: IFTRUE 74139
74137: GO 74272
74139: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74140: LD_ADDR_VAR 0 5
74144: PUSH
74145: LD_VAR 0 1
74149: PUSH
74150: LD_INT 4
74152: MINUS
74153: PUSH
74154: LD_VAR 0 2
74158: PUSH
74159: LD_INT 4
74161: MINUS
74162: PUSH
74163: LD_INT 2
74165: PUSH
74166: EMPTY
74167: LIST
74168: LIST
74169: LIST
74170: PUSH
74171: LD_VAR 0 1
74175: PUSH
74176: LD_INT 3
74178: MINUS
74179: PUSH
74180: LD_VAR 0 2
74184: PUSH
74185: LD_INT 1
74187: PUSH
74188: EMPTY
74189: LIST
74190: LIST
74191: LIST
74192: PUSH
74193: LD_VAR 0 1
74197: PUSH
74198: LD_INT 4
74200: PLUS
74201: PUSH
74202: LD_VAR 0 2
74206: PUSH
74207: LD_INT 4
74209: PUSH
74210: EMPTY
74211: LIST
74212: LIST
74213: LIST
74214: PUSH
74215: LD_VAR 0 1
74219: PUSH
74220: LD_INT 3
74222: PLUS
74223: PUSH
74224: LD_VAR 0 2
74228: PUSH
74229: LD_INT 3
74231: PLUS
74232: PUSH
74233: LD_INT 5
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: LIST
74240: PUSH
74241: LD_VAR 0 1
74245: PUSH
74246: LD_VAR 0 2
74250: PUSH
74251: LD_INT 4
74253: PLUS
74254: PUSH
74255: LD_INT 0
74257: PUSH
74258: EMPTY
74259: LIST
74260: LIST
74261: LIST
74262: PUSH
74263: EMPTY
74264: LIST
74265: LIST
74266: LIST
74267: LIST
74268: LIST
74269: ST_TO_ADDR
// end ; 1 :
74270: GO 74970
74272: LD_INT 1
74274: DOUBLE
74275: EQUAL
74276: IFTRUE 74280
74278: GO 74413
74280: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74281: LD_ADDR_VAR 0 5
74285: PUSH
74286: LD_VAR 0 1
74290: PUSH
74291: LD_VAR 0 2
74295: PUSH
74296: LD_INT 4
74298: MINUS
74299: PUSH
74300: LD_INT 3
74302: PUSH
74303: EMPTY
74304: LIST
74305: LIST
74306: LIST
74307: PUSH
74308: LD_VAR 0 1
74312: PUSH
74313: LD_INT 3
74315: MINUS
74316: PUSH
74317: LD_VAR 0 2
74321: PUSH
74322: LD_INT 3
74324: MINUS
74325: PUSH
74326: LD_INT 2
74328: PUSH
74329: EMPTY
74330: LIST
74331: LIST
74332: LIST
74333: PUSH
74334: LD_VAR 0 1
74338: PUSH
74339: LD_INT 4
74341: MINUS
74342: PUSH
74343: LD_VAR 0 2
74347: PUSH
74348: LD_INT 1
74350: PUSH
74351: EMPTY
74352: LIST
74353: LIST
74354: LIST
74355: PUSH
74356: LD_VAR 0 1
74360: PUSH
74361: LD_VAR 0 2
74365: PUSH
74366: LD_INT 3
74368: PLUS
74369: PUSH
74370: LD_INT 0
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: LIST
74377: PUSH
74378: LD_VAR 0 1
74382: PUSH
74383: LD_INT 4
74385: PLUS
74386: PUSH
74387: LD_VAR 0 2
74391: PUSH
74392: LD_INT 4
74394: PLUS
74395: PUSH
74396: LD_INT 5
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: LIST
74403: PUSH
74404: EMPTY
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: LIST
74410: ST_TO_ADDR
// end ; 2 :
74411: GO 74970
74413: LD_INT 2
74415: DOUBLE
74416: EQUAL
74417: IFTRUE 74421
74419: GO 74550
74421: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74422: LD_ADDR_VAR 0 5
74426: PUSH
74427: LD_VAR 0 1
74431: PUSH
74432: LD_VAR 0 2
74436: PUSH
74437: LD_INT 3
74439: MINUS
74440: PUSH
74441: LD_INT 3
74443: PUSH
74444: EMPTY
74445: LIST
74446: LIST
74447: LIST
74448: PUSH
74449: LD_VAR 0 1
74453: PUSH
74454: LD_INT 4
74456: PLUS
74457: PUSH
74458: LD_VAR 0 2
74462: PUSH
74463: LD_INT 4
74465: PUSH
74466: EMPTY
74467: LIST
74468: LIST
74469: LIST
74470: PUSH
74471: LD_VAR 0 1
74475: PUSH
74476: LD_VAR 0 2
74480: PUSH
74481: LD_INT 4
74483: PLUS
74484: PUSH
74485: LD_INT 0
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: LIST
74492: PUSH
74493: LD_VAR 0 1
74497: PUSH
74498: LD_INT 3
74500: MINUS
74501: PUSH
74502: LD_VAR 0 2
74506: PUSH
74507: LD_INT 1
74509: PUSH
74510: EMPTY
74511: LIST
74512: LIST
74513: LIST
74514: PUSH
74515: LD_VAR 0 1
74519: PUSH
74520: LD_INT 4
74522: MINUS
74523: PUSH
74524: LD_VAR 0 2
74528: PUSH
74529: LD_INT 4
74531: MINUS
74532: PUSH
74533: LD_INT 2
74535: PUSH
74536: EMPTY
74537: LIST
74538: LIST
74539: LIST
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: LIST
74545: LIST
74546: LIST
74547: ST_TO_ADDR
// end ; 3 :
74548: GO 74970
74550: LD_INT 3
74552: DOUBLE
74553: EQUAL
74554: IFTRUE 74558
74556: GO 74691
74558: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74559: LD_ADDR_VAR 0 5
74563: PUSH
74564: LD_VAR 0 1
74568: PUSH
74569: LD_INT 3
74571: PLUS
74572: PUSH
74573: LD_VAR 0 2
74577: PUSH
74578: LD_INT 4
74580: PUSH
74581: EMPTY
74582: LIST
74583: LIST
74584: LIST
74585: PUSH
74586: LD_VAR 0 1
74590: PUSH
74591: LD_INT 4
74593: PLUS
74594: PUSH
74595: LD_VAR 0 2
74599: PUSH
74600: LD_INT 4
74602: PLUS
74603: PUSH
74604: LD_INT 5
74606: PUSH
74607: EMPTY
74608: LIST
74609: LIST
74610: LIST
74611: PUSH
74612: LD_VAR 0 1
74616: PUSH
74617: LD_INT 4
74619: MINUS
74620: PUSH
74621: LD_VAR 0 2
74625: PUSH
74626: LD_INT 1
74628: PUSH
74629: EMPTY
74630: LIST
74631: LIST
74632: LIST
74633: PUSH
74634: LD_VAR 0 1
74638: PUSH
74639: LD_VAR 0 2
74643: PUSH
74644: LD_INT 4
74646: MINUS
74647: PUSH
74648: LD_INT 3
74650: PUSH
74651: EMPTY
74652: LIST
74653: LIST
74654: LIST
74655: PUSH
74656: LD_VAR 0 1
74660: PUSH
74661: LD_INT 3
74663: MINUS
74664: PUSH
74665: LD_VAR 0 2
74669: PUSH
74670: LD_INT 3
74672: MINUS
74673: PUSH
74674: LD_INT 2
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: LIST
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: LIST
74686: LIST
74687: LIST
74688: ST_TO_ADDR
// end ; 4 :
74689: GO 74970
74691: LD_INT 4
74693: DOUBLE
74694: EQUAL
74695: IFTRUE 74699
74697: GO 74832
74699: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74700: LD_ADDR_VAR 0 5
74704: PUSH
74705: LD_VAR 0 1
74709: PUSH
74710: LD_VAR 0 2
74714: PUSH
74715: LD_INT 4
74717: PLUS
74718: PUSH
74719: LD_INT 0
74721: PUSH
74722: EMPTY
74723: LIST
74724: LIST
74725: LIST
74726: PUSH
74727: LD_VAR 0 1
74731: PUSH
74732: LD_INT 3
74734: PLUS
74735: PUSH
74736: LD_VAR 0 2
74740: PUSH
74741: LD_INT 3
74743: PLUS
74744: PUSH
74745: LD_INT 5
74747: PUSH
74748: EMPTY
74749: LIST
74750: LIST
74751: LIST
74752: PUSH
74753: LD_VAR 0 1
74757: PUSH
74758: LD_INT 4
74760: PLUS
74761: PUSH
74762: LD_VAR 0 2
74766: PUSH
74767: LD_INT 4
74769: PUSH
74770: EMPTY
74771: LIST
74772: LIST
74773: LIST
74774: PUSH
74775: LD_VAR 0 1
74779: PUSH
74780: LD_VAR 0 2
74784: PUSH
74785: LD_INT 3
74787: MINUS
74788: PUSH
74789: LD_INT 3
74791: PUSH
74792: EMPTY
74793: LIST
74794: LIST
74795: LIST
74796: PUSH
74797: LD_VAR 0 1
74801: PUSH
74802: LD_INT 4
74804: MINUS
74805: PUSH
74806: LD_VAR 0 2
74810: PUSH
74811: LD_INT 4
74813: MINUS
74814: PUSH
74815: LD_INT 2
74817: PUSH
74818: EMPTY
74819: LIST
74820: LIST
74821: LIST
74822: PUSH
74823: EMPTY
74824: LIST
74825: LIST
74826: LIST
74827: LIST
74828: LIST
74829: ST_TO_ADDR
// end ; 5 :
74830: GO 74970
74832: LD_INT 5
74834: DOUBLE
74835: EQUAL
74836: IFTRUE 74840
74838: GO 74969
74840: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74841: LD_ADDR_VAR 0 5
74845: PUSH
74846: LD_VAR 0 1
74850: PUSH
74851: LD_INT 4
74853: MINUS
74854: PUSH
74855: LD_VAR 0 2
74859: PUSH
74860: LD_INT 1
74862: PUSH
74863: EMPTY
74864: LIST
74865: LIST
74866: LIST
74867: PUSH
74868: LD_VAR 0 1
74872: PUSH
74873: LD_VAR 0 2
74877: PUSH
74878: LD_INT 4
74880: MINUS
74881: PUSH
74882: LD_INT 3
74884: PUSH
74885: EMPTY
74886: LIST
74887: LIST
74888: LIST
74889: PUSH
74890: LD_VAR 0 1
74894: PUSH
74895: LD_INT 4
74897: PLUS
74898: PUSH
74899: LD_VAR 0 2
74903: PUSH
74904: LD_INT 4
74906: PLUS
74907: PUSH
74908: LD_INT 5
74910: PUSH
74911: EMPTY
74912: LIST
74913: LIST
74914: LIST
74915: PUSH
74916: LD_VAR 0 1
74920: PUSH
74921: LD_INT 3
74923: PLUS
74924: PUSH
74925: LD_VAR 0 2
74929: PUSH
74930: LD_INT 4
74932: PUSH
74933: EMPTY
74934: LIST
74935: LIST
74936: LIST
74937: PUSH
74938: LD_VAR 0 1
74942: PUSH
74943: LD_VAR 0 2
74947: PUSH
74948: LD_INT 3
74950: PLUS
74951: PUSH
74952: LD_INT 0
74954: PUSH
74955: EMPTY
74956: LIST
74957: LIST
74958: LIST
74959: PUSH
74960: EMPTY
74961: LIST
74962: LIST
74963: LIST
74964: LIST
74965: LIST
74966: ST_TO_ADDR
// end ; end ;
74967: GO 74970
74969: POP
// result := list ;
74970: LD_ADDR_VAR 0 4
74974: PUSH
74975: LD_VAR 0 5
74979: ST_TO_ADDR
// end ;
74980: LD_VAR 0 4
74984: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74985: LD_INT 0
74987: PPUSH
74988: PPUSH
74989: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74990: LD_VAR 0 1
74994: NOT
74995: PUSH
74996: LD_VAR 0 2
75000: PUSH
75001: LD_INT 1
75003: PUSH
75004: LD_INT 2
75006: PUSH
75007: LD_INT 3
75009: PUSH
75010: LD_INT 4
75012: PUSH
75013: EMPTY
75014: LIST
75015: LIST
75016: LIST
75017: LIST
75018: IN
75019: NOT
75020: OR
75021: IFFALSE 75025
// exit ;
75023: GO 75117
// tmp := [ ] ;
75025: LD_ADDR_VAR 0 5
75029: PUSH
75030: EMPTY
75031: ST_TO_ADDR
// for i in units do
75032: LD_ADDR_VAR 0 4
75036: PUSH
75037: LD_VAR 0 1
75041: PUSH
75042: FOR_IN
75043: IFFALSE 75086
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75045: LD_ADDR_VAR 0 5
75049: PUSH
75050: LD_VAR 0 5
75054: PPUSH
75055: LD_VAR 0 5
75059: PUSH
75060: LD_INT 1
75062: PLUS
75063: PPUSH
75064: LD_VAR 0 4
75068: PPUSH
75069: LD_VAR 0 2
75073: PPUSH
75074: CALL_OW 259
75078: PPUSH
75079: CALL_OW 2
75083: ST_TO_ADDR
75084: GO 75042
75086: POP
75087: POP
// if not tmp then
75088: LD_VAR 0 5
75092: NOT
75093: IFFALSE 75097
// exit ;
75095: GO 75117
// result := SortListByListDesc ( units , tmp ) ;
75097: LD_ADDR_VAR 0 3
75101: PUSH
75102: LD_VAR 0 1
75106: PPUSH
75107: LD_VAR 0 5
75111: PPUSH
75112: CALL_OW 77
75116: ST_TO_ADDR
// end ;
75117: LD_VAR 0 3
75121: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75122: LD_INT 0
75124: PPUSH
75125: PPUSH
75126: PPUSH
// result := false ;
75127: LD_ADDR_VAR 0 3
75131: PUSH
75132: LD_INT 0
75134: ST_TO_ADDR
// x := GetX ( building ) ;
75135: LD_ADDR_VAR 0 4
75139: PUSH
75140: LD_VAR 0 2
75144: PPUSH
75145: CALL_OW 250
75149: ST_TO_ADDR
// y := GetY ( building ) ;
75150: LD_ADDR_VAR 0 5
75154: PUSH
75155: LD_VAR 0 2
75159: PPUSH
75160: CALL_OW 251
75164: ST_TO_ADDR
// if not building or not x or not y then
75165: LD_VAR 0 2
75169: NOT
75170: PUSH
75171: LD_VAR 0 4
75175: NOT
75176: OR
75177: PUSH
75178: LD_VAR 0 5
75182: NOT
75183: OR
75184: IFFALSE 75188
// exit ;
75186: GO 75280
// if GetTaskList ( unit ) then
75188: LD_VAR 0 1
75192: PPUSH
75193: CALL_OW 437
75197: IFFALSE 75280
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75199: LD_STRING e
75201: PUSH
75202: LD_VAR 0 1
75206: PPUSH
75207: CALL_OW 437
75211: PUSH
75212: LD_INT 1
75214: ARRAY
75215: PUSH
75216: LD_INT 1
75218: ARRAY
75219: EQUAL
75220: PUSH
75221: LD_VAR 0 4
75225: PUSH
75226: LD_VAR 0 1
75230: PPUSH
75231: CALL_OW 437
75235: PUSH
75236: LD_INT 1
75238: ARRAY
75239: PUSH
75240: LD_INT 2
75242: ARRAY
75243: EQUAL
75244: AND
75245: PUSH
75246: LD_VAR 0 5
75250: PUSH
75251: LD_VAR 0 1
75255: PPUSH
75256: CALL_OW 437
75260: PUSH
75261: LD_INT 1
75263: ARRAY
75264: PUSH
75265: LD_INT 3
75267: ARRAY
75268: EQUAL
75269: AND
75270: IFFALSE 75280
// result := true end ;
75272: LD_ADDR_VAR 0 3
75276: PUSH
75277: LD_INT 1
75279: ST_TO_ADDR
// end ;
75280: LD_VAR 0 3
75284: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75285: LD_INT 0
75287: PPUSH
// result := false ;
75288: LD_ADDR_VAR 0 4
75292: PUSH
75293: LD_INT 0
75295: ST_TO_ADDR
// if GetTaskList ( unit ) then
75296: LD_VAR 0 1
75300: PPUSH
75301: CALL_OW 437
75305: IFFALSE 75388
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75307: LD_STRING M
75309: PUSH
75310: LD_VAR 0 1
75314: PPUSH
75315: CALL_OW 437
75319: PUSH
75320: LD_INT 1
75322: ARRAY
75323: PUSH
75324: LD_INT 1
75326: ARRAY
75327: EQUAL
75328: PUSH
75329: LD_VAR 0 2
75333: PUSH
75334: LD_VAR 0 1
75338: PPUSH
75339: CALL_OW 437
75343: PUSH
75344: LD_INT 1
75346: ARRAY
75347: PUSH
75348: LD_INT 2
75350: ARRAY
75351: EQUAL
75352: AND
75353: PUSH
75354: LD_VAR 0 3
75358: PUSH
75359: LD_VAR 0 1
75363: PPUSH
75364: CALL_OW 437
75368: PUSH
75369: LD_INT 1
75371: ARRAY
75372: PUSH
75373: LD_INT 3
75375: ARRAY
75376: EQUAL
75377: AND
75378: IFFALSE 75388
// result := true ;
75380: LD_ADDR_VAR 0 4
75384: PUSH
75385: LD_INT 1
75387: ST_TO_ADDR
// end ; end ;
75388: LD_VAR 0 4
75392: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75393: LD_INT 0
75395: PPUSH
75396: PPUSH
75397: PPUSH
75398: PPUSH
// if not unit or not area then
75399: LD_VAR 0 1
75403: NOT
75404: PUSH
75405: LD_VAR 0 2
75409: NOT
75410: OR
75411: IFFALSE 75415
// exit ;
75413: GO 75579
// tmp := AreaToList ( area , i ) ;
75415: LD_ADDR_VAR 0 6
75419: PUSH
75420: LD_VAR 0 2
75424: PPUSH
75425: LD_VAR 0 5
75429: PPUSH
75430: CALL_OW 517
75434: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75435: LD_ADDR_VAR 0 5
75439: PUSH
75440: DOUBLE
75441: LD_INT 1
75443: DEC
75444: ST_TO_ADDR
75445: LD_VAR 0 6
75449: PUSH
75450: LD_INT 1
75452: ARRAY
75453: PUSH
75454: FOR_TO
75455: IFFALSE 75577
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75457: LD_ADDR_VAR 0 7
75461: PUSH
75462: LD_VAR 0 6
75466: PUSH
75467: LD_INT 1
75469: ARRAY
75470: PUSH
75471: LD_VAR 0 5
75475: ARRAY
75476: PUSH
75477: LD_VAR 0 6
75481: PUSH
75482: LD_INT 2
75484: ARRAY
75485: PUSH
75486: LD_VAR 0 5
75490: ARRAY
75491: PUSH
75492: EMPTY
75493: LIST
75494: LIST
75495: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75496: LD_VAR 0 7
75500: PUSH
75501: LD_INT 1
75503: ARRAY
75504: PPUSH
75505: LD_VAR 0 7
75509: PUSH
75510: LD_INT 2
75512: ARRAY
75513: PPUSH
75514: CALL_OW 428
75518: PUSH
75519: LD_INT 0
75521: EQUAL
75522: IFFALSE 75575
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75524: LD_VAR 0 1
75528: PPUSH
75529: LD_VAR 0 7
75533: PUSH
75534: LD_INT 1
75536: ARRAY
75537: PPUSH
75538: LD_VAR 0 7
75542: PUSH
75543: LD_INT 2
75545: ARRAY
75546: PPUSH
75547: LD_VAR 0 3
75551: PPUSH
75552: CALL_OW 48
// result := IsPlaced ( unit ) ;
75556: LD_ADDR_VAR 0 4
75560: PUSH
75561: LD_VAR 0 1
75565: PPUSH
75566: CALL_OW 305
75570: ST_TO_ADDR
// exit ;
75571: POP
75572: POP
75573: GO 75579
// end ; end ;
75575: GO 75454
75577: POP
75578: POP
// end ;
75579: LD_VAR 0 4
75583: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75584: LD_INT 0
75586: PPUSH
75587: PPUSH
75588: PPUSH
// if not side or side > 8 then
75589: LD_VAR 0 1
75593: NOT
75594: PUSH
75595: LD_VAR 0 1
75599: PUSH
75600: LD_INT 8
75602: GREATER
75603: OR
75604: IFFALSE 75608
// exit ;
75606: GO 75795
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75608: LD_ADDR_VAR 0 4
75612: PUSH
75613: LD_INT 22
75615: PUSH
75616: LD_VAR 0 1
75620: PUSH
75621: EMPTY
75622: LIST
75623: LIST
75624: PUSH
75625: LD_INT 21
75627: PUSH
75628: LD_INT 3
75630: PUSH
75631: EMPTY
75632: LIST
75633: LIST
75634: PUSH
75635: EMPTY
75636: LIST
75637: LIST
75638: PPUSH
75639: CALL_OW 69
75643: ST_TO_ADDR
// if not tmp then
75644: LD_VAR 0 4
75648: NOT
75649: IFFALSE 75653
// exit ;
75651: GO 75795
// enable_addtolog := true ;
75653: LD_ADDR_OWVAR 81
75657: PUSH
75658: LD_INT 1
75660: ST_TO_ADDR
// AddToLog ( [ ) ;
75661: LD_STRING [
75663: PPUSH
75664: CALL_OW 561
// for i in tmp do
75668: LD_ADDR_VAR 0 3
75672: PUSH
75673: LD_VAR 0 4
75677: PUSH
75678: FOR_IN
75679: IFFALSE 75786
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75681: LD_STRING [
75683: PUSH
75684: LD_VAR 0 3
75688: PPUSH
75689: CALL_OW 266
75693: STR
75694: PUSH
75695: LD_STRING , 
75697: STR
75698: PUSH
75699: LD_VAR 0 3
75703: PPUSH
75704: CALL_OW 250
75708: STR
75709: PUSH
75710: LD_STRING , 
75712: STR
75713: PUSH
75714: LD_VAR 0 3
75718: PPUSH
75719: CALL_OW 251
75723: STR
75724: PUSH
75725: LD_STRING , 
75727: STR
75728: PUSH
75729: LD_VAR 0 3
75733: PPUSH
75734: CALL_OW 254
75738: STR
75739: PUSH
75740: LD_STRING , 
75742: STR
75743: PUSH
75744: LD_VAR 0 3
75748: PPUSH
75749: LD_INT 1
75751: PPUSH
75752: CALL_OW 268
75756: STR
75757: PUSH
75758: LD_STRING , 
75760: STR
75761: PUSH
75762: LD_VAR 0 3
75766: PPUSH
75767: LD_INT 2
75769: PPUSH
75770: CALL_OW 268
75774: STR
75775: PUSH
75776: LD_STRING ],
75778: STR
75779: PPUSH
75780: CALL_OW 561
// end ;
75784: GO 75678
75786: POP
75787: POP
// AddToLog ( ]; ) ;
75788: LD_STRING ];
75790: PPUSH
75791: CALL_OW 561
// end ;
75795: LD_VAR 0 2
75799: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75800: LD_INT 0
75802: PPUSH
75803: PPUSH
75804: PPUSH
75805: PPUSH
75806: PPUSH
// if not area or not rate or not max then
75807: LD_VAR 0 1
75811: NOT
75812: PUSH
75813: LD_VAR 0 2
75817: NOT
75818: OR
75819: PUSH
75820: LD_VAR 0 4
75824: NOT
75825: OR
75826: IFFALSE 75830
// exit ;
75828: GO 76019
// while 1 do
75830: LD_INT 1
75832: IFFALSE 76019
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75834: LD_ADDR_VAR 0 9
75838: PUSH
75839: LD_VAR 0 1
75843: PPUSH
75844: LD_INT 1
75846: PPUSH
75847: CALL_OW 287
75851: PUSH
75852: LD_INT 10
75854: MUL
75855: ST_TO_ADDR
// r := rate / 10 ;
75856: LD_ADDR_VAR 0 7
75860: PUSH
75861: LD_VAR 0 2
75865: PUSH
75866: LD_INT 10
75868: DIVREAL
75869: ST_TO_ADDR
// time := 1 1$00 ;
75870: LD_ADDR_VAR 0 8
75874: PUSH
75875: LD_INT 2100
75877: ST_TO_ADDR
// if amount < min then
75878: LD_VAR 0 9
75882: PUSH
75883: LD_VAR 0 3
75887: LESS
75888: IFFALSE 75906
// r := r * 2 else
75890: LD_ADDR_VAR 0 7
75894: PUSH
75895: LD_VAR 0 7
75899: PUSH
75900: LD_INT 2
75902: MUL
75903: ST_TO_ADDR
75904: GO 75932
// if amount > max then
75906: LD_VAR 0 9
75910: PUSH
75911: LD_VAR 0 4
75915: GREATER
75916: IFFALSE 75932
// r := r / 2 ;
75918: LD_ADDR_VAR 0 7
75922: PUSH
75923: LD_VAR 0 7
75927: PUSH
75928: LD_INT 2
75930: DIVREAL
75931: ST_TO_ADDR
// time := time / r ;
75932: LD_ADDR_VAR 0 8
75936: PUSH
75937: LD_VAR 0 8
75941: PUSH
75942: LD_VAR 0 7
75946: DIVREAL
75947: ST_TO_ADDR
// if time < 0 then
75948: LD_VAR 0 8
75952: PUSH
75953: LD_INT 0
75955: LESS
75956: IFFALSE 75973
// time := time * - 1 ;
75958: LD_ADDR_VAR 0 8
75962: PUSH
75963: LD_VAR 0 8
75967: PUSH
75968: LD_INT 1
75970: NEG
75971: MUL
75972: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75973: LD_VAR 0 8
75977: PUSH
75978: LD_INT 35
75980: PPUSH
75981: LD_INT 875
75983: PPUSH
75984: CALL_OW 12
75988: PLUS
75989: PPUSH
75990: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75994: LD_INT 1
75996: PPUSH
75997: LD_INT 5
75999: PPUSH
76000: CALL_OW 12
76004: PPUSH
76005: LD_VAR 0 1
76009: PPUSH
76010: LD_INT 1
76012: PPUSH
76013: CALL_OW 55
// end ;
76017: GO 75830
// end ;
76019: LD_VAR 0 5
76023: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76024: LD_INT 0
76026: PPUSH
76027: PPUSH
76028: PPUSH
76029: PPUSH
76030: PPUSH
76031: PPUSH
76032: PPUSH
76033: PPUSH
// if not turrets or not factories then
76034: LD_VAR 0 1
76038: NOT
76039: PUSH
76040: LD_VAR 0 2
76044: NOT
76045: OR
76046: IFFALSE 76050
// exit ;
76048: GO 76357
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76050: LD_ADDR_VAR 0 10
76054: PUSH
76055: LD_INT 5
76057: PUSH
76058: LD_INT 6
76060: PUSH
76061: EMPTY
76062: LIST
76063: LIST
76064: PUSH
76065: LD_INT 2
76067: PUSH
76068: LD_INT 4
76070: PUSH
76071: EMPTY
76072: LIST
76073: LIST
76074: PUSH
76075: LD_INT 3
76077: PUSH
76078: LD_INT 5
76080: PUSH
76081: EMPTY
76082: LIST
76083: LIST
76084: PUSH
76085: EMPTY
76086: LIST
76087: LIST
76088: LIST
76089: PUSH
76090: LD_INT 24
76092: PUSH
76093: LD_INT 25
76095: PUSH
76096: EMPTY
76097: LIST
76098: LIST
76099: PUSH
76100: LD_INT 23
76102: PUSH
76103: LD_INT 27
76105: PUSH
76106: EMPTY
76107: LIST
76108: LIST
76109: PUSH
76110: EMPTY
76111: LIST
76112: LIST
76113: PUSH
76114: LD_INT 42
76116: PUSH
76117: LD_INT 43
76119: PUSH
76120: EMPTY
76121: LIST
76122: LIST
76123: PUSH
76124: LD_INT 44
76126: PUSH
76127: LD_INT 46
76129: PUSH
76130: EMPTY
76131: LIST
76132: LIST
76133: PUSH
76134: LD_INT 45
76136: PUSH
76137: LD_INT 47
76139: PUSH
76140: EMPTY
76141: LIST
76142: LIST
76143: PUSH
76144: EMPTY
76145: LIST
76146: LIST
76147: LIST
76148: PUSH
76149: EMPTY
76150: LIST
76151: LIST
76152: LIST
76153: ST_TO_ADDR
// result := [ ] ;
76154: LD_ADDR_VAR 0 3
76158: PUSH
76159: EMPTY
76160: ST_TO_ADDR
// for i in turrets do
76161: LD_ADDR_VAR 0 4
76165: PUSH
76166: LD_VAR 0 1
76170: PUSH
76171: FOR_IN
76172: IFFALSE 76355
// begin nat := GetNation ( i ) ;
76174: LD_ADDR_VAR 0 7
76178: PUSH
76179: LD_VAR 0 4
76183: PPUSH
76184: CALL_OW 248
76188: ST_TO_ADDR
// weapon := 0 ;
76189: LD_ADDR_VAR 0 8
76193: PUSH
76194: LD_INT 0
76196: ST_TO_ADDR
// if not nat then
76197: LD_VAR 0 7
76201: NOT
76202: IFFALSE 76206
// continue ;
76204: GO 76171
// for j in list [ nat ] do
76206: LD_ADDR_VAR 0 5
76210: PUSH
76211: LD_VAR 0 10
76215: PUSH
76216: LD_VAR 0 7
76220: ARRAY
76221: PUSH
76222: FOR_IN
76223: IFFALSE 76264
// if GetBWeapon ( i ) = j [ 1 ] then
76225: LD_VAR 0 4
76229: PPUSH
76230: CALL_OW 269
76234: PUSH
76235: LD_VAR 0 5
76239: PUSH
76240: LD_INT 1
76242: ARRAY
76243: EQUAL
76244: IFFALSE 76262
// begin weapon := j [ 2 ] ;
76246: LD_ADDR_VAR 0 8
76250: PUSH
76251: LD_VAR 0 5
76255: PUSH
76256: LD_INT 2
76258: ARRAY
76259: ST_TO_ADDR
// break ;
76260: GO 76264
// end ;
76262: GO 76222
76264: POP
76265: POP
// if not weapon then
76266: LD_VAR 0 8
76270: NOT
76271: IFFALSE 76275
// continue ;
76273: GO 76171
// for k in factories do
76275: LD_ADDR_VAR 0 6
76279: PUSH
76280: LD_VAR 0 2
76284: PUSH
76285: FOR_IN
76286: IFFALSE 76351
// begin weapons := AvailableWeaponList ( k ) ;
76288: LD_ADDR_VAR 0 9
76292: PUSH
76293: LD_VAR 0 6
76297: PPUSH
76298: CALL_OW 478
76302: ST_TO_ADDR
// if not weapons then
76303: LD_VAR 0 9
76307: NOT
76308: IFFALSE 76312
// continue ;
76310: GO 76285
// if weapon in weapons then
76312: LD_VAR 0 8
76316: PUSH
76317: LD_VAR 0 9
76321: IN
76322: IFFALSE 76349
// begin result := [ i , weapon ] ;
76324: LD_ADDR_VAR 0 3
76328: PUSH
76329: LD_VAR 0 4
76333: PUSH
76334: LD_VAR 0 8
76338: PUSH
76339: EMPTY
76340: LIST
76341: LIST
76342: ST_TO_ADDR
// exit ;
76343: POP
76344: POP
76345: POP
76346: POP
76347: GO 76357
// end ; end ;
76349: GO 76285
76351: POP
76352: POP
// end ;
76353: GO 76171
76355: POP
76356: POP
// end ;
76357: LD_VAR 0 3
76361: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76362: LD_INT 0
76364: PPUSH
// if not side or side > 8 then
76365: LD_VAR 0 3
76369: NOT
76370: PUSH
76371: LD_VAR 0 3
76375: PUSH
76376: LD_INT 8
76378: GREATER
76379: OR
76380: IFFALSE 76384
// exit ;
76382: GO 76443
// if not range then
76384: LD_VAR 0 4
76388: NOT
76389: IFFALSE 76400
// range := - 12 ;
76391: LD_ADDR_VAR 0 4
76395: PUSH
76396: LD_INT 12
76398: NEG
76399: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76400: LD_VAR 0 1
76404: PPUSH
76405: LD_VAR 0 2
76409: PPUSH
76410: LD_VAR 0 3
76414: PPUSH
76415: LD_VAR 0 4
76419: PPUSH
76420: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76424: LD_VAR 0 1
76428: PPUSH
76429: LD_VAR 0 2
76433: PPUSH
76434: LD_VAR 0 3
76438: PPUSH
76439: CALL_OW 331
// end ;
76443: LD_VAR 0 5
76447: RET
// export function Video ( mode ) ; begin
76448: LD_INT 0
76450: PPUSH
// ingame_video = mode ;
76451: LD_ADDR_OWVAR 52
76455: PUSH
76456: LD_VAR 0 1
76460: ST_TO_ADDR
// interface_hidden = mode ;
76461: LD_ADDR_OWVAR 54
76465: PUSH
76466: LD_VAR 0 1
76470: ST_TO_ADDR
// end ;
76471: LD_VAR 0 2
76475: RET
// export function Join ( array , element ) ; begin
76476: LD_INT 0
76478: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76479: LD_ADDR_VAR 0 3
76483: PUSH
76484: LD_VAR 0 1
76488: PPUSH
76489: LD_VAR 0 1
76493: PUSH
76494: LD_INT 1
76496: PLUS
76497: PPUSH
76498: LD_VAR 0 2
76502: PPUSH
76503: CALL_OW 1
76507: ST_TO_ADDR
// end ;
76508: LD_VAR 0 3
76512: RET
// export function JoinUnion ( array , element ) ; begin
76513: LD_INT 0
76515: PPUSH
// result := array union element ;
76516: LD_ADDR_VAR 0 3
76520: PUSH
76521: LD_VAR 0 1
76525: PUSH
76526: LD_VAR 0 2
76530: UNION
76531: ST_TO_ADDR
// end ;
76532: LD_VAR 0 3
76536: RET
// export function GetBehemoths ( side ) ; begin
76537: LD_INT 0
76539: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76540: LD_ADDR_VAR 0 2
76544: PUSH
76545: LD_INT 22
76547: PUSH
76548: LD_VAR 0 1
76552: PUSH
76553: EMPTY
76554: LIST
76555: LIST
76556: PUSH
76557: LD_INT 31
76559: PUSH
76560: LD_INT 25
76562: PUSH
76563: EMPTY
76564: LIST
76565: LIST
76566: PUSH
76567: EMPTY
76568: LIST
76569: LIST
76570: PPUSH
76571: CALL_OW 69
76575: ST_TO_ADDR
// end ;
76576: LD_VAR 0 2
76580: RET
// export function Shuffle ( array ) ; var i , index ; begin
76581: LD_INT 0
76583: PPUSH
76584: PPUSH
76585: PPUSH
// result := [ ] ;
76586: LD_ADDR_VAR 0 2
76590: PUSH
76591: EMPTY
76592: ST_TO_ADDR
// if not array then
76593: LD_VAR 0 1
76597: NOT
76598: IFFALSE 76602
// exit ;
76600: GO 76701
// Randomize ;
76602: CALL_OW 10
// for i = array downto 1 do
76606: LD_ADDR_VAR 0 3
76610: PUSH
76611: DOUBLE
76612: LD_VAR 0 1
76616: INC
76617: ST_TO_ADDR
76618: LD_INT 1
76620: PUSH
76621: FOR_DOWNTO
76622: IFFALSE 76699
// begin index := rand ( 1 , array ) ;
76624: LD_ADDR_VAR 0 4
76628: PUSH
76629: LD_INT 1
76631: PPUSH
76632: LD_VAR 0 1
76636: PPUSH
76637: CALL_OW 12
76641: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76642: LD_ADDR_VAR 0 2
76646: PUSH
76647: LD_VAR 0 2
76651: PPUSH
76652: LD_VAR 0 2
76656: PUSH
76657: LD_INT 1
76659: PLUS
76660: PPUSH
76661: LD_VAR 0 1
76665: PUSH
76666: LD_VAR 0 4
76670: ARRAY
76671: PPUSH
76672: CALL_OW 2
76676: ST_TO_ADDR
// array := Delete ( array , index ) ;
76677: LD_ADDR_VAR 0 1
76681: PUSH
76682: LD_VAR 0 1
76686: PPUSH
76687: LD_VAR 0 4
76691: PPUSH
76692: CALL_OW 3
76696: ST_TO_ADDR
// end ;
76697: GO 76621
76699: POP
76700: POP
// end ;
76701: LD_VAR 0 2
76705: RET
// export function GetBaseMaterials ( base ) ; begin
76706: LD_INT 0
76708: PPUSH
// result := [ 0 , 0 , 0 ] ;
76709: LD_ADDR_VAR 0 2
76713: PUSH
76714: LD_INT 0
76716: PUSH
76717: LD_INT 0
76719: PUSH
76720: LD_INT 0
76722: PUSH
76723: EMPTY
76724: LIST
76725: LIST
76726: LIST
76727: ST_TO_ADDR
// if not base then
76728: LD_VAR 0 1
76732: NOT
76733: IFFALSE 76737
// exit ;
76735: GO 76786
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76737: LD_ADDR_VAR 0 2
76741: PUSH
76742: LD_VAR 0 1
76746: PPUSH
76747: LD_INT 1
76749: PPUSH
76750: CALL_OW 275
76754: PUSH
76755: LD_VAR 0 1
76759: PPUSH
76760: LD_INT 2
76762: PPUSH
76763: CALL_OW 275
76767: PUSH
76768: LD_VAR 0 1
76772: PPUSH
76773: LD_INT 3
76775: PPUSH
76776: CALL_OW 275
76780: PUSH
76781: EMPTY
76782: LIST
76783: LIST
76784: LIST
76785: ST_TO_ADDR
// end ;
76786: LD_VAR 0 2
76790: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76791: LD_INT 0
76793: PPUSH
76794: PPUSH
// result := array ;
76795: LD_ADDR_VAR 0 3
76799: PUSH
76800: LD_VAR 0 1
76804: ST_TO_ADDR
// if size >= result then
76805: LD_VAR 0 2
76809: PUSH
76810: LD_VAR 0 3
76814: GREATEREQUAL
76815: IFFALSE 76819
// exit ;
76817: GO 76869
// if size then
76819: LD_VAR 0 2
76823: IFFALSE 76869
// for i := array downto size do
76825: LD_ADDR_VAR 0 4
76829: PUSH
76830: DOUBLE
76831: LD_VAR 0 1
76835: INC
76836: ST_TO_ADDR
76837: LD_VAR 0 2
76841: PUSH
76842: FOR_DOWNTO
76843: IFFALSE 76867
// result := Delete ( result , result ) ;
76845: LD_ADDR_VAR 0 3
76849: PUSH
76850: LD_VAR 0 3
76854: PPUSH
76855: LD_VAR 0 3
76859: PPUSH
76860: CALL_OW 3
76864: ST_TO_ADDR
76865: GO 76842
76867: POP
76868: POP
// end ;
76869: LD_VAR 0 3
76873: RET
// export function ComExit ( unit ) ; var tmp ; begin
76874: LD_INT 0
76876: PPUSH
76877: PPUSH
// if not IsInUnit ( unit ) then
76878: LD_VAR 0 1
76882: PPUSH
76883: CALL_OW 310
76887: NOT
76888: IFFALSE 76892
// exit ;
76890: GO 76952
// tmp := IsInUnit ( unit ) ;
76892: LD_ADDR_VAR 0 3
76896: PUSH
76897: LD_VAR 0 1
76901: PPUSH
76902: CALL_OW 310
76906: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76907: LD_VAR 0 3
76911: PPUSH
76912: CALL_OW 247
76916: PUSH
76917: LD_INT 2
76919: EQUAL
76920: IFFALSE 76933
// ComExitVehicle ( unit ) else
76922: LD_VAR 0 1
76926: PPUSH
76927: CALL_OW 121
76931: GO 76942
// ComExitBuilding ( unit ) ;
76933: LD_VAR 0 1
76937: PPUSH
76938: CALL_OW 122
// result := tmp ;
76942: LD_ADDR_VAR 0 2
76946: PUSH
76947: LD_VAR 0 3
76951: ST_TO_ADDR
// end ;
76952: LD_VAR 0 2
76956: RET
// export function ComExitAll ( units ) ; var i ; begin
76957: LD_INT 0
76959: PPUSH
76960: PPUSH
// if not units then
76961: LD_VAR 0 1
76965: NOT
76966: IFFALSE 76970
// exit ;
76968: GO 76996
// for i in units do
76970: LD_ADDR_VAR 0 3
76974: PUSH
76975: LD_VAR 0 1
76979: PUSH
76980: FOR_IN
76981: IFFALSE 76994
// ComExit ( i ) ;
76983: LD_VAR 0 3
76987: PPUSH
76988: CALL 76874 0 1
76992: GO 76980
76994: POP
76995: POP
// end ;
76996: LD_VAR 0 2
77000: RET
// export function ResetHc ; begin
77001: LD_INT 0
77003: PPUSH
// InitHc ;
77004: CALL_OW 19
// hc_importance := 0 ;
77008: LD_ADDR_OWVAR 32
77012: PUSH
77013: LD_INT 0
77015: ST_TO_ADDR
// end ;
77016: LD_VAR 0 1
77020: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77021: LD_INT 0
77023: PPUSH
77024: PPUSH
77025: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77026: LD_ADDR_VAR 0 6
77030: PUSH
77031: LD_VAR 0 1
77035: PUSH
77036: LD_VAR 0 3
77040: PLUS
77041: PUSH
77042: LD_INT 2
77044: DIV
77045: ST_TO_ADDR
// if _x < 0 then
77046: LD_VAR 0 6
77050: PUSH
77051: LD_INT 0
77053: LESS
77054: IFFALSE 77071
// _x := _x * - 1 ;
77056: LD_ADDR_VAR 0 6
77060: PUSH
77061: LD_VAR 0 6
77065: PUSH
77066: LD_INT 1
77068: NEG
77069: MUL
77070: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77071: LD_ADDR_VAR 0 7
77075: PUSH
77076: LD_VAR 0 2
77080: PUSH
77081: LD_VAR 0 4
77085: PLUS
77086: PUSH
77087: LD_INT 2
77089: DIV
77090: ST_TO_ADDR
// if _y < 0 then
77091: LD_VAR 0 7
77095: PUSH
77096: LD_INT 0
77098: LESS
77099: IFFALSE 77116
// _y := _y * - 1 ;
77101: LD_ADDR_VAR 0 7
77105: PUSH
77106: LD_VAR 0 7
77110: PUSH
77111: LD_INT 1
77113: NEG
77114: MUL
77115: ST_TO_ADDR
// result := [ _x , _y ] ;
77116: LD_ADDR_VAR 0 5
77120: PUSH
77121: LD_VAR 0 6
77125: PUSH
77126: LD_VAR 0 7
77130: PUSH
77131: EMPTY
77132: LIST
77133: LIST
77134: ST_TO_ADDR
// end ;
77135: LD_VAR 0 5
77139: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77140: LD_INT 0
77142: PPUSH
77143: PPUSH
77144: PPUSH
77145: PPUSH
// task := GetTaskList ( unit ) ;
77146: LD_ADDR_VAR 0 7
77150: PUSH
77151: LD_VAR 0 1
77155: PPUSH
77156: CALL_OW 437
77160: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77161: LD_VAR 0 7
77165: NOT
77166: PUSH
77167: LD_VAR 0 1
77171: PPUSH
77172: LD_VAR 0 2
77176: PPUSH
77177: CALL_OW 308
77181: NOT
77182: AND
77183: IFFALSE 77187
// exit ;
77185: GO 77305
// if IsInArea ( unit , area ) then
77187: LD_VAR 0 1
77191: PPUSH
77192: LD_VAR 0 2
77196: PPUSH
77197: CALL_OW 308
77201: IFFALSE 77219
// begin ComMoveToArea ( unit , goAway ) ;
77203: LD_VAR 0 1
77207: PPUSH
77208: LD_VAR 0 3
77212: PPUSH
77213: CALL_OW 113
// exit ;
77217: GO 77305
// end ; if task [ 1 ] [ 1 ] <> M then
77219: LD_VAR 0 7
77223: PUSH
77224: LD_INT 1
77226: ARRAY
77227: PUSH
77228: LD_INT 1
77230: ARRAY
77231: PUSH
77232: LD_STRING M
77234: NONEQUAL
77235: IFFALSE 77239
// exit ;
77237: GO 77305
// x := task [ 1 ] [ 2 ] ;
77239: LD_ADDR_VAR 0 5
77243: PUSH
77244: LD_VAR 0 7
77248: PUSH
77249: LD_INT 1
77251: ARRAY
77252: PUSH
77253: LD_INT 2
77255: ARRAY
77256: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77257: LD_ADDR_VAR 0 6
77261: PUSH
77262: LD_VAR 0 7
77266: PUSH
77267: LD_INT 1
77269: ARRAY
77270: PUSH
77271: LD_INT 3
77273: ARRAY
77274: ST_TO_ADDR
// if InArea ( x , y , area ) then
77275: LD_VAR 0 5
77279: PPUSH
77280: LD_VAR 0 6
77284: PPUSH
77285: LD_VAR 0 2
77289: PPUSH
77290: CALL_OW 309
77294: IFFALSE 77305
// ComStop ( unit ) ;
77296: LD_VAR 0 1
77300: PPUSH
77301: CALL_OW 141
// end ;
77305: LD_VAR 0 4
77309: RET
// export function Abs ( value ) ; begin
77310: LD_INT 0
77312: PPUSH
// result := value ;
77313: LD_ADDR_VAR 0 2
77317: PUSH
77318: LD_VAR 0 1
77322: ST_TO_ADDR
// if value < 0 then
77323: LD_VAR 0 1
77327: PUSH
77328: LD_INT 0
77330: LESS
77331: IFFALSE 77348
// result := value * - 1 ;
77333: LD_ADDR_VAR 0 2
77337: PUSH
77338: LD_VAR 0 1
77342: PUSH
77343: LD_INT 1
77345: NEG
77346: MUL
77347: ST_TO_ADDR
// end ;
77348: LD_VAR 0 2
77352: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77353: LD_INT 0
77355: PPUSH
77356: PPUSH
77357: PPUSH
77358: PPUSH
77359: PPUSH
77360: PPUSH
77361: PPUSH
77362: PPUSH
// if not unit or not building then
77363: LD_VAR 0 1
77367: NOT
77368: PUSH
77369: LD_VAR 0 2
77373: NOT
77374: OR
77375: IFFALSE 77379
// exit ;
77377: GO 77605
// x := GetX ( building ) ;
77379: LD_ADDR_VAR 0 4
77383: PUSH
77384: LD_VAR 0 2
77388: PPUSH
77389: CALL_OW 250
77393: ST_TO_ADDR
// y := GetY ( building ) ;
77394: LD_ADDR_VAR 0 6
77398: PUSH
77399: LD_VAR 0 2
77403: PPUSH
77404: CALL_OW 251
77408: ST_TO_ADDR
// d := GetDir ( building ) ;
77409: LD_ADDR_VAR 0 8
77413: PUSH
77414: LD_VAR 0 2
77418: PPUSH
77419: CALL_OW 254
77423: ST_TO_ADDR
// r := 4 ;
77424: LD_ADDR_VAR 0 9
77428: PUSH
77429: LD_INT 4
77431: ST_TO_ADDR
// for i := 1 to 5 do
77432: LD_ADDR_VAR 0 10
77436: PUSH
77437: DOUBLE
77438: LD_INT 1
77440: DEC
77441: ST_TO_ADDR
77442: LD_INT 5
77444: PUSH
77445: FOR_TO
77446: IFFALSE 77603
// begin _x := ShiftX ( x , d , r + i ) ;
77448: LD_ADDR_VAR 0 5
77452: PUSH
77453: LD_VAR 0 4
77457: PPUSH
77458: LD_VAR 0 8
77462: PPUSH
77463: LD_VAR 0 9
77467: PUSH
77468: LD_VAR 0 10
77472: PLUS
77473: PPUSH
77474: CALL_OW 272
77478: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77479: LD_ADDR_VAR 0 7
77483: PUSH
77484: LD_VAR 0 6
77488: PPUSH
77489: LD_VAR 0 8
77493: PPUSH
77494: LD_VAR 0 9
77498: PUSH
77499: LD_VAR 0 10
77503: PLUS
77504: PPUSH
77505: CALL_OW 273
77509: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77510: LD_VAR 0 5
77514: PPUSH
77515: LD_VAR 0 7
77519: PPUSH
77520: CALL_OW 488
77524: PUSH
77525: LD_VAR 0 5
77529: PPUSH
77530: LD_VAR 0 7
77534: PPUSH
77535: CALL_OW 428
77539: PPUSH
77540: CALL_OW 247
77544: PUSH
77545: LD_INT 3
77547: PUSH
77548: LD_INT 2
77550: PUSH
77551: EMPTY
77552: LIST
77553: LIST
77554: IN
77555: NOT
77556: AND
77557: IFFALSE 77601
// begin ComMoveXY ( unit , _x , _y ) ;
77559: LD_VAR 0 1
77563: PPUSH
77564: LD_VAR 0 5
77568: PPUSH
77569: LD_VAR 0 7
77573: PPUSH
77574: CALL_OW 111
// result := [ _x , _y ] ;
77578: LD_ADDR_VAR 0 3
77582: PUSH
77583: LD_VAR 0 5
77587: PUSH
77588: LD_VAR 0 7
77592: PUSH
77593: EMPTY
77594: LIST
77595: LIST
77596: ST_TO_ADDR
// exit ;
77597: POP
77598: POP
77599: GO 77605
// end ; end ;
77601: GO 77445
77603: POP
77604: POP
// end ;
77605: LD_VAR 0 3
77609: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77610: LD_INT 0
77612: PPUSH
77613: PPUSH
77614: PPUSH
// result := 0 ;
77615: LD_ADDR_VAR 0 3
77619: PUSH
77620: LD_INT 0
77622: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77623: LD_VAR 0 1
77627: PUSH
77628: LD_INT 0
77630: LESS
77631: PUSH
77632: LD_VAR 0 1
77636: PUSH
77637: LD_INT 8
77639: GREATER
77640: OR
77641: PUSH
77642: LD_VAR 0 2
77646: PUSH
77647: LD_INT 0
77649: LESS
77650: OR
77651: PUSH
77652: LD_VAR 0 2
77656: PUSH
77657: LD_INT 8
77659: GREATER
77660: OR
77661: IFFALSE 77665
// exit ;
77663: GO 77740
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77665: LD_ADDR_VAR 0 4
77669: PUSH
77670: LD_INT 22
77672: PUSH
77673: LD_VAR 0 2
77677: PUSH
77678: EMPTY
77679: LIST
77680: LIST
77681: PPUSH
77682: CALL_OW 69
77686: PUSH
77687: FOR_IN
77688: IFFALSE 77738
// begin un := UnitShoot ( i ) ;
77690: LD_ADDR_VAR 0 5
77694: PUSH
77695: LD_VAR 0 4
77699: PPUSH
77700: CALL_OW 504
77704: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77705: LD_VAR 0 5
77709: PPUSH
77710: CALL_OW 255
77714: PUSH
77715: LD_VAR 0 1
77719: EQUAL
77720: IFFALSE 77736
// begin result := un ;
77722: LD_ADDR_VAR 0 3
77726: PUSH
77727: LD_VAR 0 5
77731: ST_TO_ADDR
// exit ;
77732: POP
77733: POP
77734: GO 77740
// end ; end ;
77736: GO 77687
77738: POP
77739: POP
// end ;
77740: LD_VAR 0 3
77744: RET
// export function GetCargoBay ( units ) ; begin
77745: LD_INT 0
77747: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77748: LD_ADDR_VAR 0 2
77752: PUSH
77753: LD_VAR 0 1
77757: PPUSH
77758: LD_INT 2
77760: PUSH
77761: LD_INT 34
77763: PUSH
77764: LD_INT 12
77766: PUSH
77767: EMPTY
77768: LIST
77769: LIST
77770: PUSH
77771: LD_INT 34
77773: PUSH
77774: LD_INT 51
77776: PUSH
77777: EMPTY
77778: LIST
77779: LIST
77780: PUSH
77781: LD_INT 34
77783: PUSH
77784: LD_INT 32
77786: PUSH
77787: EMPTY
77788: LIST
77789: LIST
77790: PUSH
77791: LD_INT 34
77793: PUSH
77794: LD_INT 89
77796: PUSH
77797: EMPTY
77798: LIST
77799: LIST
77800: PUSH
77801: EMPTY
77802: LIST
77803: LIST
77804: LIST
77805: LIST
77806: LIST
77807: PPUSH
77808: CALL_OW 72
77812: ST_TO_ADDR
// end ;
77813: LD_VAR 0 2
77817: RET
// export function Negate ( value ) ; begin
77818: LD_INT 0
77820: PPUSH
// result := not value ;
77821: LD_ADDR_VAR 0 2
77825: PUSH
77826: LD_VAR 0 1
77830: NOT
77831: ST_TO_ADDR
// end ;
77832: LD_VAR 0 2
77836: RET
// export function Inc ( value ) ; begin
77837: LD_INT 0
77839: PPUSH
// result := value + 1 ;
77840: LD_ADDR_VAR 0 2
77844: PUSH
77845: LD_VAR 0 1
77849: PUSH
77850: LD_INT 1
77852: PLUS
77853: ST_TO_ADDR
// end ;
77854: LD_VAR 0 2
77858: RET
// export function Dec ( value ) ; begin
77859: LD_INT 0
77861: PPUSH
// result := value - 1 ;
77862: LD_ADDR_VAR 0 2
77866: PUSH
77867: LD_VAR 0 1
77871: PUSH
77872: LD_INT 1
77874: MINUS
77875: ST_TO_ADDR
// end ;
77876: LD_VAR 0 2
77880: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77881: LD_INT 0
77883: PPUSH
77884: PPUSH
77885: PPUSH
77886: PPUSH
77887: PPUSH
77888: PPUSH
77889: PPUSH
77890: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77891: LD_VAR 0 1
77895: PPUSH
77896: LD_VAR 0 2
77900: PPUSH
77901: CALL_OW 488
77905: NOT
77906: PUSH
77907: LD_VAR 0 3
77911: PPUSH
77912: LD_VAR 0 4
77916: PPUSH
77917: CALL_OW 488
77921: NOT
77922: OR
77923: IFFALSE 77936
// begin result := - 1 ;
77925: LD_ADDR_VAR 0 5
77929: PUSH
77930: LD_INT 1
77932: NEG
77933: ST_TO_ADDR
// exit ;
77934: GO 78171
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77936: LD_ADDR_VAR 0 12
77940: PUSH
77941: LD_VAR 0 1
77945: PPUSH
77946: LD_VAR 0 2
77950: PPUSH
77951: LD_VAR 0 3
77955: PPUSH
77956: LD_VAR 0 4
77960: PPUSH
77961: CALL 77021 0 4
77965: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77966: LD_ADDR_VAR 0 11
77970: PUSH
77971: LD_VAR 0 1
77975: PPUSH
77976: LD_VAR 0 2
77980: PPUSH
77981: LD_VAR 0 12
77985: PUSH
77986: LD_INT 1
77988: ARRAY
77989: PPUSH
77990: LD_VAR 0 12
77994: PUSH
77995: LD_INT 2
77997: ARRAY
77998: PPUSH
77999: CALL_OW 298
78003: ST_TO_ADDR
// distance := 9999 ;
78004: LD_ADDR_VAR 0 10
78008: PUSH
78009: LD_INT 9999
78011: ST_TO_ADDR
// for i := 0 to 5 do
78012: LD_ADDR_VAR 0 6
78016: PUSH
78017: DOUBLE
78018: LD_INT 0
78020: DEC
78021: ST_TO_ADDR
78022: LD_INT 5
78024: PUSH
78025: FOR_TO
78026: IFFALSE 78169
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78028: LD_ADDR_VAR 0 7
78032: PUSH
78033: LD_VAR 0 1
78037: PPUSH
78038: LD_VAR 0 6
78042: PPUSH
78043: LD_VAR 0 11
78047: PPUSH
78048: CALL_OW 272
78052: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78053: LD_ADDR_VAR 0 8
78057: PUSH
78058: LD_VAR 0 2
78062: PPUSH
78063: LD_VAR 0 6
78067: PPUSH
78068: LD_VAR 0 11
78072: PPUSH
78073: CALL_OW 273
78077: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78078: LD_VAR 0 7
78082: PPUSH
78083: LD_VAR 0 8
78087: PPUSH
78088: CALL_OW 488
78092: NOT
78093: IFFALSE 78097
// continue ;
78095: GO 78025
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78097: LD_ADDR_VAR 0 9
78101: PUSH
78102: LD_VAR 0 12
78106: PUSH
78107: LD_INT 1
78109: ARRAY
78110: PPUSH
78111: LD_VAR 0 12
78115: PUSH
78116: LD_INT 2
78118: ARRAY
78119: PPUSH
78120: LD_VAR 0 7
78124: PPUSH
78125: LD_VAR 0 8
78129: PPUSH
78130: CALL_OW 298
78134: ST_TO_ADDR
// if tmp < distance then
78135: LD_VAR 0 9
78139: PUSH
78140: LD_VAR 0 10
78144: LESS
78145: IFFALSE 78167
// begin result := i ;
78147: LD_ADDR_VAR 0 5
78151: PUSH
78152: LD_VAR 0 6
78156: ST_TO_ADDR
// distance := tmp ;
78157: LD_ADDR_VAR 0 10
78161: PUSH
78162: LD_VAR 0 9
78166: ST_TO_ADDR
// end ; end ;
78167: GO 78025
78169: POP
78170: POP
// end ;
78171: LD_VAR 0 5
78175: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78176: LD_INT 0
78178: PPUSH
78179: PPUSH
// if not driver or not IsInUnit ( driver ) then
78180: LD_VAR 0 1
78184: NOT
78185: PUSH
78186: LD_VAR 0 1
78190: PPUSH
78191: CALL_OW 310
78195: NOT
78196: OR
78197: IFFALSE 78201
// exit ;
78199: GO 78291
// vehicle := IsInUnit ( driver ) ;
78201: LD_ADDR_VAR 0 3
78205: PUSH
78206: LD_VAR 0 1
78210: PPUSH
78211: CALL_OW 310
78215: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78216: LD_VAR 0 1
78220: PPUSH
78221: LD_STRING \
78223: PUSH
78224: LD_INT 0
78226: PUSH
78227: LD_INT 0
78229: PUSH
78230: LD_INT 0
78232: PUSH
78233: LD_INT 0
78235: PUSH
78236: LD_INT 0
78238: PUSH
78239: LD_INT 0
78241: PUSH
78242: EMPTY
78243: LIST
78244: LIST
78245: LIST
78246: LIST
78247: LIST
78248: LIST
78249: LIST
78250: PUSH
78251: LD_STRING E
78253: PUSH
78254: LD_INT 0
78256: PUSH
78257: LD_INT 0
78259: PUSH
78260: LD_VAR 0 3
78264: PUSH
78265: LD_INT 0
78267: PUSH
78268: LD_INT 0
78270: PUSH
78271: LD_INT 0
78273: PUSH
78274: EMPTY
78275: LIST
78276: LIST
78277: LIST
78278: LIST
78279: LIST
78280: LIST
78281: LIST
78282: PUSH
78283: EMPTY
78284: LIST
78285: LIST
78286: PPUSH
78287: CALL_OW 446
// end ;
78291: LD_VAR 0 2
78295: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78296: LD_INT 0
78298: PPUSH
78299: PPUSH
// if not driver or not IsInUnit ( driver ) then
78300: LD_VAR 0 1
78304: NOT
78305: PUSH
78306: LD_VAR 0 1
78310: PPUSH
78311: CALL_OW 310
78315: NOT
78316: OR
78317: IFFALSE 78321
// exit ;
78319: GO 78411
// vehicle := IsInUnit ( driver ) ;
78321: LD_ADDR_VAR 0 3
78325: PUSH
78326: LD_VAR 0 1
78330: PPUSH
78331: CALL_OW 310
78335: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78336: LD_VAR 0 1
78340: PPUSH
78341: LD_STRING \
78343: PUSH
78344: LD_INT 0
78346: PUSH
78347: LD_INT 0
78349: PUSH
78350: LD_INT 0
78352: PUSH
78353: LD_INT 0
78355: PUSH
78356: LD_INT 0
78358: PUSH
78359: LD_INT 0
78361: PUSH
78362: EMPTY
78363: LIST
78364: LIST
78365: LIST
78366: LIST
78367: LIST
78368: LIST
78369: LIST
78370: PUSH
78371: LD_STRING E
78373: PUSH
78374: LD_INT 0
78376: PUSH
78377: LD_INT 0
78379: PUSH
78380: LD_VAR 0 3
78384: PUSH
78385: LD_INT 0
78387: PUSH
78388: LD_INT 0
78390: PUSH
78391: LD_INT 0
78393: PUSH
78394: EMPTY
78395: LIST
78396: LIST
78397: LIST
78398: LIST
78399: LIST
78400: LIST
78401: LIST
78402: PUSH
78403: EMPTY
78404: LIST
78405: LIST
78406: PPUSH
78407: CALL_OW 447
// end ;
78411: LD_VAR 0 2
78415: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78416: LD_INT 0
78418: PPUSH
78419: PPUSH
78420: PPUSH
// tmp := [ ] ;
78421: LD_ADDR_VAR 0 5
78425: PUSH
78426: EMPTY
78427: ST_TO_ADDR
// for i in units do
78428: LD_ADDR_VAR 0 4
78432: PUSH
78433: LD_VAR 0 1
78437: PUSH
78438: FOR_IN
78439: IFFALSE 78477
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78441: LD_ADDR_VAR 0 5
78445: PUSH
78446: LD_VAR 0 5
78450: PPUSH
78451: LD_VAR 0 5
78455: PUSH
78456: LD_INT 1
78458: PLUS
78459: PPUSH
78460: LD_VAR 0 4
78464: PPUSH
78465: CALL_OW 256
78469: PPUSH
78470: CALL_OW 2
78474: ST_TO_ADDR
78475: GO 78438
78477: POP
78478: POP
// if not tmp then
78479: LD_VAR 0 5
78483: NOT
78484: IFFALSE 78488
// exit ;
78486: GO 78536
// if asc then
78488: LD_VAR 0 2
78492: IFFALSE 78516
// result := SortListByListAsc ( units , tmp ) else
78494: LD_ADDR_VAR 0 3
78498: PUSH
78499: LD_VAR 0 1
78503: PPUSH
78504: LD_VAR 0 5
78508: PPUSH
78509: CALL_OW 76
78513: ST_TO_ADDR
78514: GO 78536
// result := SortListByListDesc ( units , tmp ) ;
78516: LD_ADDR_VAR 0 3
78520: PUSH
78521: LD_VAR 0 1
78525: PPUSH
78526: LD_VAR 0 5
78530: PPUSH
78531: CALL_OW 77
78535: ST_TO_ADDR
// end ;
78536: LD_VAR 0 3
78540: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78541: LD_INT 0
78543: PPUSH
78544: PPUSH
// task := GetTaskList ( mech ) ;
78545: LD_ADDR_VAR 0 4
78549: PUSH
78550: LD_VAR 0 1
78554: PPUSH
78555: CALL_OW 437
78559: ST_TO_ADDR
// if not task then
78560: LD_VAR 0 4
78564: NOT
78565: IFFALSE 78569
// exit ;
78567: GO 78611
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78569: LD_ADDR_VAR 0 3
78573: PUSH
78574: LD_VAR 0 4
78578: PUSH
78579: LD_INT 1
78581: ARRAY
78582: PUSH
78583: LD_INT 1
78585: ARRAY
78586: PUSH
78587: LD_STRING r
78589: EQUAL
78590: PUSH
78591: LD_VAR 0 4
78595: PUSH
78596: LD_INT 1
78598: ARRAY
78599: PUSH
78600: LD_INT 4
78602: ARRAY
78603: PUSH
78604: LD_VAR 0 2
78608: EQUAL
78609: AND
78610: ST_TO_ADDR
// end ;
78611: LD_VAR 0 3
78615: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78616: LD_INT 0
78618: PPUSH
// SetDir ( unit , d ) ;
78619: LD_VAR 0 1
78623: PPUSH
78624: LD_VAR 0 4
78628: PPUSH
78629: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78633: LD_VAR 0 1
78637: PPUSH
78638: LD_VAR 0 2
78642: PPUSH
78643: LD_VAR 0 3
78647: PPUSH
78648: LD_VAR 0 5
78652: PPUSH
78653: CALL_OW 48
// end ;
78657: LD_VAR 0 6
78661: RET
// export function ToNaturalNumber ( number ) ; begin
78662: LD_INT 0
78664: PPUSH
// result := number div 1 ;
78665: LD_ADDR_VAR 0 2
78669: PUSH
78670: LD_VAR 0 1
78674: PUSH
78675: LD_INT 1
78677: DIV
78678: ST_TO_ADDR
// if number < 0 then
78679: LD_VAR 0 1
78683: PUSH
78684: LD_INT 0
78686: LESS
78687: IFFALSE 78697
// result := 0 ;
78689: LD_ADDR_VAR 0 2
78693: PUSH
78694: LD_INT 0
78696: ST_TO_ADDR
// end ;
78697: LD_VAR 0 2
78701: RET
// export function SortByClass ( units , class ) ; var un ; begin
78702: LD_INT 0
78704: PPUSH
78705: PPUSH
// if not units or not class then
78706: LD_VAR 0 1
78710: NOT
78711: PUSH
78712: LD_VAR 0 2
78716: NOT
78717: OR
78718: IFFALSE 78722
// exit ;
78720: GO 78817
// result := [ ] ;
78722: LD_ADDR_VAR 0 3
78726: PUSH
78727: EMPTY
78728: ST_TO_ADDR
// for un in units do
78729: LD_ADDR_VAR 0 4
78733: PUSH
78734: LD_VAR 0 1
78738: PUSH
78739: FOR_IN
78740: IFFALSE 78815
// if GetClass ( un ) = class then
78742: LD_VAR 0 4
78746: PPUSH
78747: CALL_OW 257
78751: PUSH
78752: LD_VAR 0 2
78756: EQUAL
78757: IFFALSE 78784
// result := Insert ( result , 1 , un ) else
78759: LD_ADDR_VAR 0 3
78763: PUSH
78764: LD_VAR 0 3
78768: PPUSH
78769: LD_INT 1
78771: PPUSH
78772: LD_VAR 0 4
78776: PPUSH
78777: CALL_OW 2
78781: ST_TO_ADDR
78782: GO 78813
// result := Replace ( result , result + 1 , un ) ;
78784: LD_ADDR_VAR 0 3
78788: PUSH
78789: LD_VAR 0 3
78793: PPUSH
78794: LD_VAR 0 3
78798: PUSH
78799: LD_INT 1
78801: PLUS
78802: PPUSH
78803: LD_VAR 0 4
78807: PPUSH
78808: CALL_OW 1
78812: ST_TO_ADDR
78813: GO 78739
78815: POP
78816: POP
// end ;
78817: LD_VAR 0 3
78821: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78822: LD_INT 0
78824: PPUSH
78825: PPUSH
78826: PPUSH
78827: PPUSH
78828: PPUSH
78829: PPUSH
78830: PPUSH
// result := [ ] ;
78831: LD_ADDR_VAR 0 4
78835: PUSH
78836: EMPTY
78837: ST_TO_ADDR
// if x - r < 0 then
78838: LD_VAR 0 1
78842: PUSH
78843: LD_VAR 0 3
78847: MINUS
78848: PUSH
78849: LD_INT 0
78851: LESS
78852: IFFALSE 78864
// min_x := 0 else
78854: LD_ADDR_VAR 0 8
78858: PUSH
78859: LD_INT 0
78861: ST_TO_ADDR
78862: GO 78880
// min_x := x - r ;
78864: LD_ADDR_VAR 0 8
78868: PUSH
78869: LD_VAR 0 1
78873: PUSH
78874: LD_VAR 0 3
78878: MINUS
78879: ST_TO_ADDR
// if y - r < 0 then
78880: LD_VAR 0 2
78884: PUSH
78885: LD_VAR 0 3
78889: MINUS
78890: PUSH
78891: LD_INT 0
78893: LESS
78894: IFFALSE 78906
// min_y := 0 else
78896: LD_ADDR_VAR 0 7
78900: PUSH
78901: LD_INT 0
78903: ST_TO_ADDR
78904: GO 78922
// min_y := y - r ;
78906: LD_ADDR_VAR 0 7
78910: PUSH
78911: LD_VAR 0 2
78915: PUSH
78916: LD_VAR 0 3
78920: MINUS
78921: ST_TO_ADDR
// max_x := x + r ;
78922: LD_ADDR_VAR 0 9
78926: PUSH
78927: LD_VAR 0 1
78931: PUSH
78932: LD_VAR 0 3
78936: PLUS
78937: ST_TO_ADDR
// max_y := y + r ;
78938: LD_ADDR_VAR 0 10
78942: PUSH
78943: LD_VAR 0 2
78947: PUSH
78948: LD_VAR 0 3
78952: PLUS
78953: ST_TO_ADDR
// for _x = min_x to max_x do
78954: LD_ADDR_VAR 0 5
78958: PUSH
78959: DOUBLE
78960: LD_VAR 0 8
78964: DEC
78965: ST_TO_ADDR
78966: LD_VAR 0 9
78970: PUSH
78971: FOR_TO
78972: IFFALSE 79073
// for _y = min_y to max_y do
78974: LD_ADDR_VAR 0 6
78978: PUSH
78979: DOUBLE
78980: LD_VAR 0 7
78984: DEC
78985: ST_TO_ADDR
78986: LD_VAR 0 10
78990: PUSH
78991: FOR_TO
78992: IFFALSE 79069
// begin if not ValidHex ( _x , _y ) then
78994: LD_VAR 0 5
78998: PPUSH
78999: LD_VAR 0 6
79003: PPUSH
79004: CALL_OW 488
79008: NOT
79009: IFFALSE 79013
// continue ;
79011: GO 78991
// if GetResourceTypeXY ( _x , _y ) then
79013: LD_VAR 0 5
79017: PPUSH
79018: LD_VAR 0 6
79022: PPUSH
79023: CALL_OW 283
79027: IFFALSE 79067
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79029: LD_ADDR_VAR 0 4
79033: PUSH
79034: LD_VAR 0 4
79038: PPUSH
79039: LD_VAR 0 4
79043: PUSH
79044: LD_INT 1
79046: PLUS
79047: PPUSH
79048: LD_VAR 0 5
79052: PUSH
79053: LD_VAR 0 6
79057: PUSH
79058: EMPTY
79059: LIST
79060: LIST
79061: PPUSH
79062: CALL_OW 1
79066: ST_TO_ADDR
// end ;
79067: GO 78991
79069: POP
79070: POP
79071: GO 78971
79073: POP
79074: POP
// end ;
79075: LD_VAR 0 4
79079: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79080: LD_INT 0
79082: PPUSH
79083: PPUSH
79084: PPUSH
79085: PPUSH
79086: PPUSH
79087: PPUSH
79088: PPUSH
79089: PPUSH
// if not units then
79090: LD_VAR 0 1
79094: NOT
79095: IFFALSE 79099
// exit ;
79097: GO 79623
// result := UnitFilter ( units , [ f_ok ] ) ;
79099: LD_ADDR_VAR 0 3
79103: PUSH
79104: LD_VAR 0 1
79108: PPUSH
79109: LD_INT 50
79111: PUSH
79112: EMPTY
79113: LIST
79114: PPUSH
79115: CALL_OW 72
79119: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79120: LD_ADDR_VAR 0 8
79124: PUSH
79125: LD_VAR 0 1
79129: PUSH
79130: LD_INT 1
79132: ARRAY
79133: PPUSH
79134: CALL_OW 255
79138: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79139: LD_ADDR_VAR 0 10
79143: PUSH
79144: LD_INT 29
79146: PUSH
79147: LD_INT 91
79149: PUSH
79150: LD_INT 49
79152: PUSH
79153: EMPTY
79154: LIST
79155: LIST
79156: LIST
79157: ST_TO_ADDR
// if not result then
79158: LD_VAR 0 3
79162: NOT
79163: IFFALSE 79167
// exit ;
79165: GO 79623
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79167: LD_ADDR_VAR 0 5
79171: PUSH
79172: LD_INT 81
79174: PUSH
79175: LD_VAR 0 8
79179: PUSH
79180: EMPTY
79181: LIST
79182: LIST
79183: PPUSH
79184: CALL_OW 69
79188: ST_TO_ADDR
// for i in result do
79189: LD_ADDR_VAR 0 4
79193: PUSH
79194: LD_VAR 0 3
79198: PUSH
79199: FOR_IN
79200: IFFALSE 79621
// begin tag := GetTag ( i ) + 1 ;
79202: LD_ADDR_VAR 0 9
79206: PUSH
79207: LD_VAR 0 4
79211: PPUSH
79212: CALL_OW 110
79216: PUSH
79217: LD_INT 1
79219: PLUS
79220: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79221: LD_ADDR_VAR 0 7
79225: PUSH
79226: LD_VAR 0 4
79230: PPUSH
79231: CALL_OW 250
79235: PPUSH
79236: LD_VAR 0 4
79240: PPUSH
79241: CALL_OW 251
79245: PPUSH
79246: LD_INT 6
79248: PPUSH
79249: CALL 78822 0 3
79253: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79254: LD_VAR 0 4
79258: PPUSH
79259: CALL_OW 247
79263: PUSH
79264: LD_INT 2
79266: EQUAL
79267: PUSH
79268: LD_VAR 0 7
79272: AND
79273: PUSH
79274: LD_VAR 0 4
79278: PPUSH
79279: CALL_OW 264
79283: PUSH
79284: LD_VAR 0 10
79288: IN
79289: NOT
79290: AND
79291: IFFALSE 79330
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79293: LD_VAR 0 4
79297: PPUSH
79298: LD_VAR 0 7
79302: PUSH
79303: LD_INT 1
79305: ARRAY
79306: PUSH
79307: LD_INT 1
79309: ARRAY
79310: PPUSH
79311: LD_VAR 0 7
79315: PUSH
79316: LD_INT 1
79318: ARRAY
79319: PUSH
79320: LD_INT 2
79322: ARRAY
79323: PPUSH
79324: CALL_OW 116
79328: GO 79619
// if path > tag then
79330: LD_VAR 0 2
79334: PUSH
79335: LD_VAR 0 9
79339: GREATER
79340: IFFALSE 79548
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79342: LD_ADDR_VAR 0 6
79346: PUSH
79347: LD_VAR 0 5
79351: PPUSH
79352: LD_INT 91
79354: PUSH
79355: LD_VAR 0 4
79359: PUSH
79360: LD_INT 8
79362: PUSH
79363: EMPTY
79364: LIST
79365: LIST
79366: LIST
79367: PPUSH
79368: CALL_OW 72
79372: ST_TO_ADDR
// if nearEnemy then
79373: LD_VAR 0 6
79377: IFFALSE 79446
// begin if GetWeapon ( i ) = ru_time_lapser then
79379: LD_VAR 0 4
79383: PPUSH
79384: CALL_OW 264
79388: PUSH
79389: LD_INT 49
79391: EQUAL
79392: IFFALSE 79420
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79394: LD_VAR 0 4
79398: PPUSH
79399: LD_VAR 0 6
79403: PPUSH
79404: LD_VAR 0 4
79408: PPUSH
79409: CALL_OW 74
79413: PPUSH
79414: CALL_OW 112
79418: GO 79444
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79420: LD_VAR 0 4
79424: PPUSH
79425: LD_VAR 0 6
79429: PPUSH
79430: LD_VAR 0 4
79434: PPUSH
79435: CALL_OW 74
79439: PPUSH
79440: CALL_OW 115
// end else
79444: GO 79546
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79446: LD_VAR 0 4
79450: PPUSH
79451: LD_VAR 0 2
79455: PUSH
79456: LD_VAR 0 9
79460: ARRAY
79461: PUSH
79462: LD_INT 1
79464: ARRAY
79465: PPUSH
79466: LD_VAR 0 2
79470: PUSH
79471: LD_VAR 0 9
79475: ARRAY
79476: PUSH
79477: LD_INT 2
79479: ARRAY
79480: PPUSH
79481: CALL_OW 297
79485: PUSH
79486: LD_INT 6
79488: GREATER
79489: IFFALSE 79532
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79491: LD_VAR 0 4
79495: PPUSH
79496: LD_VAR 0 2
79500: PUSH
79501: LD_VAR 0 9
79505: ARRAY
79506: PUSH
79507: LD_INT 1
79509: ARRAY
79510: PPUSH
79511: LD_VAR 0 2
79515: PUSH
79516: LD_VAR 0 9
79520: ARRAY
79521: PUSH
79522: LD_INT 2
79524: ARRAY
79525: PPUSH
79526: CALL_OW 114
79530: GO 79546
// SetTag ( i , tag ) ;
79532: LD_VAR 0 4
79536: PPUSH
79537: LD_VAR 0 9
79541: PPUSH
79542: CALL_OW 109
// end else
79546: GO 79619
// if enemy then
79548: LD_VAR 0 5
79552: IFFALSE 79619
// begin if GetWeapon ( i ) = ru_time_lapser then
79554: LD_VAR 0 4
79558: PPUSH
79559: CALL_OW 264
79563: PUSH
79564: LD_INT 49
79566: EQUAL
79567: IFFALSE 79595
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79569: LD_VAR 0 4
79573: PPUSH
79574: LD_VAR 0 5
79578: PPUSH
79579: LD_VAR 0 4
79583: PPUSH
79584: CALL_OW 74
79588: PPUSH
79589: CALL_OW 112
79593: GO 79619
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79595: LD_VAR 0 4
79599: PPUSH
79600: LD_VAR 0 5
79604: PPUSH
79605: LD_VAR 0 4
79609: PPUSH
79610: CALL_OW 74
79614: PPUSH
79615: CALL_OW 115
// end ; end ;
79619: GO 79199
79621: POP
79622: POP
// end ;
79623: LD_VAR 0 3
79627: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79628: LD_INT 0
79630: PPUSH
79631: PPUSH
79632: PPUSH
// if not unit or IsInUnit ( unit ) then
79633: LD_VAR 0 1
79637: NOT
79638: PUSH
79639: LD_VAR 0 1
79643: PPUSH
79644: CALL_OW 310
79648: OR
79649: IFFALSE 79653
// exit ;
79651: GO 79744
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79653: LD_ADDR_VAR 0 4
79657: PUSH
79658: LD_VAR 0 1
79662: PPUSH
79663: CALL_OW 250
79667: PPUSH
79668: LD_VAR 0 2
79672: PPUSH
79673: LD_INT 1
79675: PPUSH
79676: CALL_OW 272
79680: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79681: LD_ADDR_VAR 0 5
79685: PUSH
79686: LD_VAR 0 1
79690: PPUSH
79691: CALL_OW 251
79695: PPUSH
79696: LD_VAR 0 2
79700: PPUSH
79701: LD_INT 1
79703: PPUSH
79704: CALL_OW 273
79708: ST_TO_ADDR
// if ValidHex ( x , y ) then
79709: LD_VAR 0 4
79713: PPUSH
79714: LD_VAR 0 5
79718: PPUSH
79719: CALL_OW 488
79723: IFFALSE 79744
// ComTurnXY ( unit , x , y ) ;
79725: LD_VAR 0 1
79729: PPUSH
79730: LD_VAR 0 4
79734: PPUSH
79735: LD_VAR 0 5
79739: PPUSH
79740: CALL_OW 118
// end ;
79744: LD_VAR 0 3
79748: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79749: LD_INT 0
79751: PPUSH
79752: PPUSH
// result := false ;
79753: LD_ADDR_VAR 0 3
79757: PUSH
79758: LD_INT 0
79760: ST_TO_ADDR
// if not units then
79761: LD_VAR 0 2
79765: NOT
79766: IFFALSE 79770
// exit ;
79768: GO 79815
// for i in units do
79770: LD_ADDR_VAR 0 4
79774: PUSH
79775: LD_VAR 0 2
79779: PUSH
79780: FOR_IN
79781: IFFALSE 79813
// if See ( side , i ) then
79783: LD_VAR 0 1
79787: PPUSH
79788: LD_VAR 0 4
79792: PPUSH
79793: CALL_OW 292
79797: IFFALSE 79811
// begin result := true ;
79799: LD_ADDR_VAR 0 3
79803: PUSH
79804: LD_INT 1
79806: ST_TO_ADDR
// exit ;
79807: POP
79808: POP
79809: GO 79815
// end ;
79811: GO 79780
79813: POP
79814: POP
// end ;
79815: LD_VAR 0 3
79819: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79820: LD_INT 0
79822: PPUSH
79823: PPUSH
79824: PPUSH
79825: PPUSH
// if not unit or not points then
79826: LD_VAR 0 1
79830: NOT
79831: PUSH
79832: LD_VAR 0 2
79836: NOT
79837: OR
79838: IFFALSE 79842
// exit ;
79840: GO 79932
// dist := 99999 ;
79842: LD_ADDR_VAR 0 5
79846: PUSH
79847: LD_INT 99999
79849: ST_TO_ADDR
// for i in points do
79850: LD_ADDR_VAR 0 4
79854: PUSH
79855: LD_VAR 0 2
79859: PUSH
79860: FOR_IN
79861: IFFALSE 79930
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79863: LD_ADDR_VAR 0 6
79867: PUSH
79868: LD_VAR 0 1
79872: PPUSH
79873: LD_VAR 0 4
79877: PUSH
79878: LD_INT 1
79880: ARRAY
79881: PPUSH
79882: LD_VAR 0 4
79886: PUSH
79887: LD_INT 2
79889: ARRAY
79890: PPUSH
79891: CALL_OW 297
79895: ST_TO_ADDR
// if tmpDist < dist then
79896: LD_VAR 0 6
79900: PUSH
79901: LD_VAR 0 5
79905: LESS
79906: IFFALSE 79928
// begin result := i ;
79908: LD_ADDR_VAR 0 3
79912: PUSH
79913: LD_VAR 0 4
79917: ST_TO_ADDR
// dist := tmpDist ;
79918: LD_ADDR_VAR 0 5
79922: PUSH
79923: LD_VAR 0 6
79927: ST_TO_ADDR
// end ; end ;
79928: GO 79860
79930: POP
79931: POP
// end ;
79932: LD_VAR 0 3
79936: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79937: LD_INT 0
79939: PPUSH
// uc_side := side ;
79940: LD_ADDR_OWVAR 20
79944: PUSH
79945: LD_VAR 0 1
79949: ST_TO_ADDR
// uc_nation := 3 ;
79950: LD_ADDR_OWVAR 21
79954: PUSH
79955: LD_INT 3
79957: ST_TO_ADDR
// vc_chassis := 25 ;
79958: LD_ADDR_OWVAR 37
79962: PUSH
79963: LD_INT 25
79965: ST_TO_ADDR
// vc_engine := engine_siberite ;
79966: LD_ADDR_OWVAR 39
79970: PUSH
79971: LD_INT 3
79973: ST_TO_ADDR
// vc_control := control_computer ;
79974: LD_ADDR_OWVAR 38
79978: PUSH
79979: LD_INT 3
79981: ST_TO_ADDR
// vc_weapon := 59 ;
79982: LD_ADDR_OWVAR 40
79986: PUSH
79987: LD_INT 59
79989: ST_TO_ADDR
// result := CreateVehicle ;
79990: LD_ADDR_VAR 0 5
79994: PUSH
79995: CALL_OW 45
79999: ST_TO_ADDR
// SetDir ( result , d ) ;
80000: LD_VAR 0 5
80004: PPUSH
80005: LD_VAR 0 4
80009: PPUSH
80010: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80014: LD_VAR 0 5
80018: PPUSH
80019: LD_VAR 0 2
80023: PPUSH
80024: LD_VAR 0 3
80028: PPUSH
80029: LD_INT 0
80031: PPUSH
80032: CALL_OW 48
// end ;
80036: LD_VAR 0 5
80040: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80041: LD_INT 0
80043: PPUSH
80044: PPUSH
80045: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80046: LD_ADDR_VAR 0 2
80050: PUSH
80051: LD_INT 0
80053: PUSH
80054: LD_INT 0
80056: PUSH
80057: LD_INT 0
80059: PUSH
80060: LD_INT 0
80062: PUSH
80063: EMPTY
80064: LIST
80065: LIST
80066: LIST
80067: LIST
80068: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80069: LD_VAR 0 1
80073: NOT
80074: PUSH
80075: LD_VAR 0 1
80079: PPUSH
80080: CALL_OW 264
80084: PUSH
80085: LD_INT 12
80087: PUSH
80088: LD_INT 51
80090: PUSH
80091: LD_INT 32
80093: PUSH
80094: LD_INT 89
80096: PUSH
80097: EMPTY
80098: LIST
80099: LIST
80100: LIST
80101: LIST
80102: IN
80103: NOT
80104: OR
80105: IFFALSE 80109
// exit ;
80107: GO 80207
// for i := 1 to 3 do
80109: LD_ADDR_VAR 0 3
80113: PUSH
80114: DOUBLE
80115: LD_INT 1
80117: DEC
80118: ST_TO_ADDR
80119: LD_INT 3
80121: PUSH
80122: FOR_TO
80123: IFFALSE 80205
// begin tmp := GetCargo ( cargo , i ) ;
80125: LD_ADDR_VAR 0 4
80129: PUSH
80130: LD_VAR 0 1
80134: PPUSH
80135: LD_VAR 0 3
80139: PPUSH
80140: CALL_OW 289
80144: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80145: LD_ADDR_VAR 0 2
80149: PUSH
80150: LD_VAR 0 2
80154: PPUSH
80155: LD_VAR 0 3
80159: PPUSH
80160: LD_VAR 0 4
80164: PPUSH
80165: CALL_OW 1
80169: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80170: LD_ADDR_VAR 0 2
80174: PUSH
80175: LD_VAR 0 2
80179: PPUSH
80180: LD_INT 4
80182: PPUSH
80183: LD_VAR 0 2
80187: PUSH
80188: LD_INT 4
80190: ARRAY
80191: PUSH
80192: LD_VAR 0 4
80196: PLUS
80197: PPUSH
80198: CALL_OW 1
80202: ST_TO_ADDR
// end ;
80203: GO 80122
80205: POP
80206: POP
// end ;
80207: LD_VAR 0 2
80211: RET
// export function Length ( array ) ; begin
80212: LD_INT 0
80214: PPUSH
// result := array + 0 ;
80215: LD_ADDR_VAR 0 2
80219: PUSH
80220: LD_VAR 0 1
80224: PUSH
80225: LD_INT 0
80227: PLUS
80228: ST_TO_ADDR
// end ;
80229: LD_VAR 0 2
80233: RET
// export function PrepareArray ( array ) ; begin
80234: LD_INT 0
80236: PPUSH
// result := array diff 0 ;
80237: LD_ADDR_VAR 0 2
80241: PUSH
80242: LD_VAR 0 1
80246: PUSH
80247: LD_INT 0
80249: DIFF
80250: ST_TO_ADDR
// if not result [ 1 ] then
80251: LD_VAR 0 2
80255: PUSH
80256: LD_INT 1
80258: ARRAY
80259: NOT
80260: IFFALSE 80280
// result := Delete ( result , 1 ) ;
80262: LD_ADDR_VAR 0 2
80266: PUSH
80267: LD_VAR 0 2
80271: PPUSH
80272: LD_INT 1
80274: PPUSH
80275: CALL_OW 3
80279: ST_TO_ADDR
// end ;
80280: LD_VAR 0 2
80284: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80285: LD_INT 0
80287: PPUSH
80288: PPUSH
80289: PPUSH
80290: PPUSH
// sibRocketRange := 25 ;
80291: LD_ADDR_VAR 0 6
80295: PUSH
80296: LD_INT 25
80298: ST_TO_ADDR
// result := false ;
80299: LD_ADDR_VAR 0 4
80303: PUSH
80304: LD_INT 0
80306: ST_TO_ADDR
// for i := 0 to 5 do
80307: LD_ADDR_VAR 0 5
80311: PUSH
80312: DOUBLE
80313: LD_INT 0
80315: DEC
80316: ST_TO_ADDR
80317: LD_INT 5
80319: PUSH
80320: FOR_TO
80321: IFFALSE 80388
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80323: LD_VAR 0 1
80327: PPUSH
80328: LD_VAR 0 5
80332: PPUSH
80333: LD_VAR 0 6
80337: PPUSH
80338: CALL_OW 272
80342: PPUSH
80343: LD_VAR 0 2
80347: PPUSH
80348: LD_VAR 0 5
80352: PPUSH
80353: LD_VAR 0 6
80357: PPUSH
80358: CALL_OW 273
80362: PPUSH
80363: LD_VAR 0 3
80367: PPUSH
80368: CALL_OW 309
80372: IFFALSE 80386
// begin result := true ;
80374: LD_ADDR_VAR 0 4
80378: PUSH
80379: LD_INT 1
80381: ST_TO_ADDR
// exit ;
80382: POP
80383: POP
80384: GO 80390
// end ;
80386: GO 80320
80388: POP
80389: POP
// end ;
80390: LD_VAR 0 4
80394: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80395: LD_INT 0
80397: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80398: LD_VAR 0 1
80402: PPUSH
80403: LD_VAR 0 2
80407: PPUSH
80408: LD_INT 0
80410: PPUSH
80411: LD_INT 0
80413: PPUSH
80414: LD_INT 1
80416: PPUSH
80417: LD_INT 0
80419: PPUSH
80420: CALL_OW 587
// end ; end_of_file
80424: LD_VAR 0 3
80428: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80429: LD_VAR 0 1
80433: PUSH
80434: LD_INT 200
80436: DOUBLE
80437: GREATEREQUAL
80438: IFFALSE 80446
80440: LD_INT 299
80442: DOUBLE
80443: LESSEQUAL
80444: IFTRUE 80448
80446: GO 80480
80448: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80449: LD_VAR 0 1
80453: PPUSH
80454: LD_VAR 0 2
80458: PPUSH
80459: LD_VAR 0 3
80463: PPUSH
80464: LD_VAR 0 4
80468: PPUSH
80469: LD_VAR 0 5
80473: PPUSH
80474: CALL 35114 0 5
80478: GO 80557
80480: LD_INT 300
80482: DOUBLE
80483: GREATEREQUAL
80484: IFFALSE 80492
80486: LD_INT 399
80488: DOUBLE
80489: LESSEQUAL
80490: IFTRUE 80494
80492: GO 80556
80494: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80495: LD_VAR 0 1
80499: PPUSH
80500: LD_VAR 0 2
80504: PPUSH
80505: LD_VAR 0 3
80509: PPUSH
80510: LD_VAR 0 4
80514: PPUSH
80515: LD_VAR 0 5
80519: PPUSH
80520: LD_VAR 0 6
80524: PPUSH
80525: LD_VAR 0 7
80529: PPUSH
80530: LD_VAR 0 8
80534: PPUSH
80535: LD_VAR 0 9
80539: PPUSH
80540: LD_VAR 0 10
80544: PPUSH
80545: LD_VAR 0 11
80549: PPUSH
80550: CALL 31447 0 11
80554: GO 80557
80556: POP
// end ;
80557: PPOPN 11
80559: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80560: LD_VAR 0 1
80564: PPUSH
80565: LD_VAR 0 2
80569: PPUSH
80570: LD_VAR 0 3
80574: PPUSH
80575: LD_VAR 0 4
80579: PPUSH
80580: LD_VAR 0 5
80584: PPUSH
80585: CALL 34850 0 5
// end ; end_of_file
80589: PPOPN 5
80591: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80592: LD_VAR 0 1
80596: PPUSH
80597: LD_VAR 0 2
80601: PPUSH
80602: LD_VAR 0 3
80606: PPUSH
80607: LD_VAR 0 4
80611: PPUSH
80612: LD_VAR 0 5
80616: PPUSH
80617: LD_VAR 0 6
80621: PPUSH
80622: CALL 19140 0 6
// end ;
80626: PPOPN 6
80628: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80629: LD_INT 0
80631: PPUSH
// begin if not units then
80632: LD_VAR 0 1
80636: NOT
80637: IFFALSE 80641
// exit ;
80639: GO 80641
// end ;
80641: PPOPN 7
80643: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80644: CALL 19111 0 0
// end ;
80648: PPOPN 1
80650: END
