// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3059 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2273 0 0
// PrepareWesternBase ;
  41: CALL 2502 0 0
// Action ;
  45: CALL 5323 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
// uc_side := 4 ;
1155: LD_ADDR_OWVAR 20
1159: PUSH
1160: LD_INT 4
1162: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1163: LD_ADDR_EXP 46
1167: PUSH
1168: LD_STRING Powell
1170: PPUSH
1171: LD_INT 0
1173: PPUSH
1174: LD_STRING 
1176: PPUSH
1177: CALL 37807 0 3
1181: ST_TO_ADDR
// uc_side := 1 ;
1182: LD_ADDR_OWVAR 20
1186: PUSH
1187: LD_INT 1
1189: ST_TO_ADDR
// uc_nation := 1 ;
1190: LD_ADDR_OWVAR 21
1194: PUSH
1195: LD_INT 1
1197: ST_TO_ADDR
// if debug then
1198: LD_EXP 1
1202: IFFALSE 1332
// begin for i = 1 to 4 do
1204: LD_ADDR_VAR 0 2
1208: PUSH
1209: DOUBLE
1210: LD_INT 1
1212: DEC
1213: ST_TO_ADDR
1214: LD_INT 4
1216: PUSH
1217: FOR_TO
1218: IFFALSE 1269
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1220: LD_INT 0
1222: PPUSH
1223: LD_INT 1
1225: PPUSH
1226: LD_INT 2
1228: PPUSH
1229: CALL_OW 12
1233: PPUSH
1234: LD_INT 3
1236: PPUSH
1237: CALL_OW 380
// un := CreateHuman ;
1241: LD_ADDR_VAR 0 3
1245: PUSH
1246: CALL_OW 44
1250: ST_TO_ADDR
// others := others ^ un ;
1251: LD_ADDR_VAR 0 5
1255: PUSH
1256: LD_VAR 0 5
1260: PUSH
1261: LD_VAR 0 3
1265: ADD
1266: ST_TO_ADDR
// end ;
1267: GO 1217
1269: POP
1270: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1271: LD_ADDR_VAR 0 6
1275: PUSH
1276: LD_INT 21
1278: PUSH
1279: LD_INT 1
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: LD_INT 51
1287: PUSH
1288: LD_INT 90
1290: PUSH
1291: LD_INT 504
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 21
1304: PUSH
1305: LD_INT 1
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: LD_INT 51
1313: PUSH
1314: LD_INT 80
1316: PUSH
1317: LD_INT 750
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1332: LD_ADDR_EXP 37
1336: PUSH
1337: LD_STRING JMM
1339: PPUSH
1340: LD_EXP 1
1344: NOT
1345: PPUSH
1346: LD_EXP 3
1350: PPUSH
1351: CALL 37807 0 3
1355: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1356: LD_ADDR_EXP 38
1360: PUSH
1361: LD_STRING Bobby
1363: PPUSH
1364: LD_EXP 1
1368: NOT
1369: PPUSH
1370: LD_EXP 3
1374: PPUSH
1375: CALL 37807 0 3
1379: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1380: LD_ADDR_EXP 39
1384: PUSH
1385: LD_STRING Cyrus
1387: PPUSH
1388: LD_EXP 1
1392: NOT
1393: PPUSH
1394: LD_EXP 3
1398: PPUSH
1399: CALL 37807 0 3
1403: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1404: LD_ADDR_EXP 40
1408: PUSH
1409: LD_STRING Lisa
1411: PPUSH
1412: LD_EXP 1
1416: NOT
1417: PPUSH
1418: LD_EXP 3
1422: PPUSH
1423: CALL 37807 0 3
1427: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1428: LD_ADDR_EXP 41
1432: PUSH
1433: LD_STRING Khatam
1435: PPUSH
1436: LD_EXP 1
1440: NOT
1441: PPUSH
1442: LD_EXP 3
1446: PPUSH
1447: CALL 37807 0 3
1451: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1452: LD_ADDR_EXP 42
1456: PUSH
1457: LD_STRING Brian
1459: PPUSH
1460: LD_EXP 1
1464: NOT
1465: PPUSH
1466: LD_EXP 3
1470: PPUSH
1471: CALL 37807 0 3
1475: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1476: LD_ADDR_EXP 43
1480: PUSH
1481: LD_STRING Jerry
1483: PPUSH
1484: LD_EXP 1
1488: NOT
1489: PPUSH
1490: LD_EXP 3
1494: PPUSH
1495: CALL 37807 0 3
1499: ST_TO_ADDR
// if Bobby then
1500: LD_EXP 38
1504: IFFALSE 1535
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1506: LD_ADDR_VAR 0 4
1510: PUSH
1511: LD_VAR 0 4
1515: PPUSH
1516: LD_VAR 0 4
1520: PUSH
1521: LD_INT 1
1523: PLUS
1524: PPUSH
1525: LD_EXP 38
1529: PPUSH
1530: CALL_OW 2
1534: ST_TO_ADDR
// if Cyrus then
1535: LD_EXP 39
1539: IFFALSE 1570
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_VAR 0 4
1550: PPUSH
1551: LD_VAR 0 4
1555: PUSH
1556: LD_INT 1
1558: PLUS
1559: PPUSH
1560: LD_EXP 39
1564: PPUSH
1565: CALL_OW 2
1569: ST_TO_ADDR
// if Lisa then
1570: LD_EXP 40
1574: IFFALSE 1605
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1576: LD_ADDR_VAR 0 4
1580: PUSH
1581: LD_VAR 0 4
1585: PPUSH
1586: LD_VAR 0 4
1590: PUSH
1591: LD_INT 1
1593: PLUS
1594: PPUSH
1595: LD_EXP 40
1599: PPUSH
1600: CALL_OW 2
1604: ST_TO_ADDR
// if Khatam then
1605: LD_EXP 41
1609: IFFALSE 1640
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1611: LD_ADDR_VAR 0 4
1615: PUSH
1616: LD_VAR 0 4
1620: PPUSH
1621: LD_VAR 0 4
1625: PUSH
1626: LD_INT 1
1628: PLUS
1629: PPUSH
1630: LD_EXP 41
1634: PPUSH
1635: CALL_OW 2
1639: ST_TO_ADDR
// if Brian then
1640: LD_EXP 42
1644: IFFALSE 1675
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1646: LD_ADDR_VAR 0 4
1650: PUSH
1651: LD_VAR 0 4
1655: PPUSH
1656: LD_VAR 0 4
1660: PUSH
1661: LD_INT 1
1663: PLUS
1664: PPUSH
1665: LD_EXP 42
1669: PPUSH
1670: CALL_OW 2
1674: ST_TO_ADDR
// if Jerry then
1675: LD_EXP 43
1679: IFFALSE 1710
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1681: LD_ADDR_VAR 0 4
1685: PUSH
1686: LD_VAR 0 4
1690: PPUSH
1691: LD_VAR 0 4
1695: PUSH
1696: LD_INT 1
1698: PLUS
1699: PPUSH
1700: LD_EXP 43
1704: PPUSH
1705: CALL_OW 2
1709: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1710: LD_STRING 02_other_survivors
1712: PPUSH
1713: CALL_OW 28
1717: IFFALSE 1732
// others := CreateCharacterSet ( 02_other_survivors ) ;
1719: LD_ADDR_VAR 0 5
1723: PUSH
1724: LD_STRING 02_other_survivors
1726: PPUSH
1727: CALL_OW 31
1731: ST_TO_ADDR
// if others then
1732: LD_VAR 0 5
1736: IFFALSE 1761
// begin tmp := tmp ^ others ;
1738: LD_ADDR_VAR 0 4
1742: PUSH
1743: LD_VAR 0 4
1747: PUSH
1748: LD_VAR 0 5
1752: ADD
1753: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1754: LD_STRING 02_other_survivors
1756: PPUSH
1757: CALL_OW 40
// end ; jmm_units := tmp ;
1761: LD_ADDR_EXP 4
1765: PUSH
1766: LD_VAR 0 4
1770: ST_TO_ADDR
// if not vehicles then
1771: LD_VAR 0 6
1775: NOT
1776: IFFALSE 1794
// vehicles := LoadVariable ( 02_tanks_1 , 0 ) ;
1778: LD_ADDR_VAR 0 6
1782: PUSH
1783: LD_STRING 02_tanks_1
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: CALL_OW 30
1793: ST_TO_ADDR
// if vehicles then
1794: LD_VAR 0 6
1798: IFFALSE 1992
// begin got_mech := false ;
1800: LD_ADDR_VAR 0 7
1804: PUSH
1805: LD_INT 0
1807: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
1808: LD_VAR 0 4
1812: PPUSH
1813: LD_INT 25
1815: PUSH
1816: LD_INT 3
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PPUSH
1823: CALL_OW 72
1827: IFFALSE 1837
// got_mech := true ;
1829: LD_ADDR_VAR 0 7
1833: PUSH
1834: LD_INT 1
1836: ST_TO_ADDR
// for i = 1 to vehicles do
1837: LD_ADDR_VAR 0 2
1841: PUSH
1842: DOUBLE
1843: LD_INT 1
1845: DEC
1846: ST_TO_ADDR
1847: LD_VAR 0 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1990
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
1855: LD_ADDR_VAR 0 3
1859: PUSH
1860: LD_INT 1
1862: PPUSH
1863: LD_INT 3
1865: PPUSH
1866: LD_VAR 0 6
1870: PUSH
1871: LD_VAR 0 2
1875: ARRAY
1876: PUSH
1877: LD_INT 1
1879: ARRAY
1880: PPUSH
1881: LD_VAR 0 6
1885: PUSH
1886: LD_VAR 0 2
1890: ARRAY
1891: PUSH
1892: LD_INT 2
1894: ARRAY
1895: PPUSH
1896: LD_VAR 0 6
1900: PUSH
1901: LD_VAR 0 2
1905: ARRAY
1906: PUSH
1907: LD_INT 3
1909: ARRAY
1910: PPUSH
1911: LD_VAR 0 6
1915: PUSH
1916: LD_VAR 0 2
1920: ARRAY
1921: PUSH
1922: LD_INT 4
1924: ARRAY
1925: PPUSH
1926: LD_INT 40
1928: PPUSH
1929: CALL 497 0 7
1933: ST_TO_ADDR
// if not got_mech then
1934: LD_VAR 0 7
1938: NOT
1939: IFFALSE 1965
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
1941: LD_VAR 0 3
1945: PPUSH
1946: LD_VAR 0 6
1950: PUSH
1951: LD_VAR 0 2
1955: ARRAY
1956: PUSH
1957: LD_INT 6
1959: ARRAY
1960: PPUSH
1961: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
1965: LD_ADDR_VAR 0 4
1969: PUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: LD_VAR 0 3
1982: PPUSH
1983: CALL_OW 2
1987: ST_TO_ADDR
// end ;
1988: GO 1852
1990: POP
1991: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
1992: LD_EXP 37
1996: PPUSH
1997: LD_INT 194
1999: PPUSH
2000: LD_INT 119
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL_OW 48
// if tmp then
2010: LD_VAR 0 4
2014: IFFALSE 2202
// begin for i in tmp do
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: LD_VAR 0 4
2025: PUSH
2026: FOR_IN
2027: IFFALSE 2200
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2029: LD_VAR 0 2
2033: PPUSH
2034: CALL_OW 257
2038: PUSH
2039: LD_INT 1
2041: NONEQUAL
2042: PUSH
2043: LD_VAR 0 2
2047: PUSH
2048: LD_EXP 41
2052: NONEQUAL
2053: AND
2054: IFFALSE 2068
// SetClass ( i , 1 ) ;
2056: LD_VAR 0 2
2060: PPUSH
2061: LD_INT 1
2063: PPUSH
2064: CALL_OW 336
// if i = Khatam then
2068: LD_VAR 0 2
2072: PUSH
2073: LD_EXP 41
2077: EQUAL
2078: IFFALSE 2092
// SetClass ( i , 4 ) ;
2080: LD_VAR 0 2
2084: PPUSH
2085: LD_INT 4
2087: PPUSH
2088: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2092: LD_ADDR_VAR 0 8
2096: PUSH
2097: LD_INT 22
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 21
2109: PUSH
2110: LD_INT 2
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 58
2119: PUSH
2120: EMPTY
2121: LIST
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: PPUSH
2128: CALL_OW 69
2132: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2133: LD_VAR 0 2
2137: PPUSH
2138: CALL_OW 247
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: PUSH
2147: LD_VAR 0 8
2151: AND
2152: IFFALSE 2174
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2154: LD_VAR 0 2
2158: PPUSH
2159: LD_VAR 0 8
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: CALL_OW 52
2172: GO 2189
// PlaceUnitArea ( i , startArea , false ) ;
2174: LD_VAR 0 2
2178: PPUSH
2179: LD_INT 1
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 49
// ComHold ( i ) ;
2189: LD_VAR 0 2
2193: PPUSH
2194: CALL_OW 140
// end ;
2198: GO 2026
2200: POP
2201: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2202: LD_ADDR_EXP 7
2206: PUSH
2207: LD_STRING 02_mikhailStatus_1
2209: PPUSH
2210: LD_INT 0
2212: PPUSH
2213: CALL_OW 30
2217: ST_TO_ADDR
// if not bierezov_exist and not debug then
2218: LD_EXP 7
2222: NOT
2223: PUSH
2224: LD_EXP 1
2228: NOT
2229: AND
2230: IFFALSE 2234
// exit ;
2232: GO 2268
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2234: LD_ADDR_EXP 45
2238: PUSH
2239: LD_STRING Mikhail
2241: PPUSH
2242: LD_INT 0
2244: PPUSH
2245: LD_STRING 
2247: PPUSH
2248: CALL 37807 0 3
2252: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2253: LD_EXP 45
2257: PPUSH
2258: LD_INT 1
2260: PPUSH
2261: LD_INT 0
2263: PPUSH
2264: CALL_OW 49
// end ;
2268: LD_VAR 0 1
2272: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2273: LD_INT 0
2275: PPUSH
2276: PPUSH
2277: PPUSH
2278: PPUSH
// uc_side := 4 ;
2279: LD_ADDR_OWVAR 20
2283: PUSH
2284: LD_INT 4
2286: ST_TO_ADDR
// uc_nation := 1 ;
2287: LD_ADDR_OWVAR 21
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2295: LD_ADDR_EXP 44
2299: PUSH
2300: LD_STRING Cornell
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: LD_STRING 
2308: PPUSH
2309: CALL 37807 0 3
2313: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2314: LD_ADDR_EXP 6
2318: PUSH
2319: LD_INT 9
2321: PUSH
2322: LD_EXP 4
2326: MINUS
2327: ST_TO_ADDR
// tmp := [ ] ;
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: EMPTY
2334: ST_TO_ADDR
// if cornel_units < 4 then
2335: LD_EXP 6
2339: PUSH
2340: LD_INT 4
2342: LESS
2343: IFFALSE 2353
// cornel_units := 4 ;
2345: LD_ADDR_EXP 6
2349: PUSH
2350: LD_INT 4
2352: ST_TO_ADDR
// for i = 1 to cornel_units do
2353: LD_ADDR_VAR 0 4
2357: PUSH
2358: DOUBLE
2359: LD_INT 1
2361: DEC
2362: ST_TO_ADDR
2363: LD_EXP 6
2367: PUSH
2368: FOR_TO
2369: IFFALSE 2467
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2371: LD_INT 0
2373: PPUSH
2374: LD_INT 1
2376: PUSH
2377: LD_INT 1
2379: PUSH
2380: LD_INT 1
2382: PUSH
2383: LD_INT 2
2385: PUSH
2386: LD_INT 4
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: PUSH
2396: LD_VAR 0 4
2400: PUSH
2401: LD_INT 5
2403: MOD
2404: PUSH
2405: LD_INT 1
2407: PLUS
2408: ARRAY
2409: PPUSH
2410: LD_INT 2
2412: PPUSH
2413: CALL_OW 380
// un := CreateHuman ;
2417: LD_ADDR_VAR 0 3
2421: PUSH
2422: CALL_OW 44
2426: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_VAR 0 2
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_VAR 0 3
2444: PPUSH
2445: CALL_OW 2
2449: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2450: LD_VAR 0 3
2454: PPUSH
2455: LD_INT 2
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: CALL_OW 49
// end ;
2465: GO 2368
2467: POP
2468: POP
// cornel_units := tmp ;
2469: LD_ADDR_EXP 6
2473: PUSH
2474: LD_VAR 0 2
2478: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2479: LD_EXP 44
2483: PPUSH
2484: LD_INT 191
2486: PPUSH
2487: LD_INT 106
2489: PPUSH
2490: LD_INT 0
2492: PPUSH
2493: CALL_OW 48
// end ;
2497: LD_VAR 0 1
2501: RET
// export function PrepareWesternBase ; var i ; begin
2502: LD_INT 0
2504: PPUSH
2505: PPUSH
// uc_side := 8 ;
2506: LD_ADDR_OWVAR 20
2510: PUSH
2511: LD_INT 8
2513: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2514: LD_ADDR_EXP 47
2518: PUSH
2519: LD_STRING Lynch
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: LD_STRING 
2527: PPUSH
2528: CALL 37807 0 3
2532: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2533: LD_ADDR_EXP 48
2537: PUSH
2538: LD_STRING Walker
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: LD_STRING 
2546: PPUSH
2547: CALL 37807 0 3
2551: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2552: LD_ADDR_EXP 49
2556: PUSH
2557: LD_STRING Turner
2559: PPUSH
2560: LD_INT 0
2562: PPUSH
2563: LD_STRING 
2565: PPUSH
2566: CALL 37807 0 3
2570: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2571: LD_ADDR_EXP 50
2575: PUSH
2576: LD_STRING Jillian
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: LD_STRING 
2584: PPUSH
2585: CALL 37807 0 3
2589: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: LD_EXP 47
2599: PUSH
2600: LD_EXP 48
2604: PUSH
2605: LD_EXP 49
2609: PUSH
2610: LD_EXP 50
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: PUSH
2621: FOR_IN
2622: IFFALSE 2650
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
2624: LD_VAR 0 2
2628: PPUSH
2629: LD_INT 3
2631: PPUSH
2632: LD_INT 0
2634: PPUSH
2635: CALL_OW 49
// ComHold ( i ) ;
2639: LD_VAR 0 2
2643: PPUSH
2644: CALL_OW 140
// end ;
2648: GO 2621
2650: POP
2651: POP
// end ;
2652: LD_VAR 0 1
2656: RET
// export function SelectGroup ; var units , selected , i ; begin
2657: LD_INT 0
2659: PPUSH
2660: PPUSH
2661: PPUSH
2662: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
2663: LD_ADDR_VAR 0 2
2667: PUSH
2668: LD_EXP 37
2672: PUSH
2673: LD_INT -3
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PUSH
2680: LD_EXP 4
2684: ADD
2685: PUSH
2686: LD_INT -2
2688: PUSH
2689: LD_INT -4
2691: PUSH
2692: LD_EXP 44
2696: PUSH
2697: LD_EXP 45
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: ADD
2708: PUSH
2709: LD_INT -3
2711: PUSH
2712: EMPTY
2713: LIST
2714: ADD
2715: PUSH
2716: LD_EXP 6
2720: ADD
2721: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
2722: LD_ADDR_VAR 0 3
2726: PUSH
2727: LD_EXP 37
2731: PUSH
2732: LD_STRING Select four characters to go with you
2734: PPUSH
2735: LD_INT 4
2737: PPUSH
2738: LD_INT 4
2740: PPUSH
2741: LD_VAR 0 2
2745: PPUSH
2746: EMPTY
2747: PPUSH
2748: CALL_OW 42
2752: ADD
2753: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
2754: LD_ADDR_EXP 6
2758: PUSH
2759: LD_EXP 4
2763: PUSH
2764: LD_EXP 6
2768: UNION
2769: PUSH
2770: LD_VAR 0 3
2774: DIFF
2775: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_EXP 6
2785: PUSH
2786: LD_EXP 45
2790: ADD
2791: PUSH
2792: FOR_IN
2793: IFFALSE 2824
// if GetSide ( i ) = 1 then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 255
2804: PUSH
2805: LD_INT 1
2807: EQUAL
2808: IFFALSE 2822
// SetSide ( i , 4 ) ;
2810: LD_VAR 0 4
2814: PPUSH
2815: LD_INT 4
2817: PPUSH
2818: CALL_OW 235
2822: GO 2792
2824: POP
2825: POP
// for i in selected do
2826: LD_ADDR_VAR 0 4
2830: PUSH
2831: LD_VAR 0 3
2835: PUSH
2836: FOR_IN
2837: IFFALSE 2868
// if GetSide ( i ) = 4 then
2839: LD_VAR 0 4
2843: PPUSH
2844: CALL_OW 255
2848: PUSH
2849: LD_INT 4
2851: EQUAL
2852: IFFALSE 2866
// SetSide ( i , 1 ) ;
2854: LD_VAR 0 4
2858: PPUSH
2859: LD_INT 1
2861: PPUSH
2862: CALL_OW 235
2866: GO 2836
2868: POP
2869: POP
// jmm_units := jmm_units diff cornel_units ;
2870: LD_ADDR_EXP 4
2874: PUSH
2875: LD_EXP 4
2879: PUSH
2880: LD_EXP 6
2884: DIFF
2885: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
2886: LD_EXP 38
2890: PPUSH
2891: CALL_OW 255
2895: PUSH
2896: LD_INT 4
2898: EQUAL
2899: IFFALSE 2914
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
2901: LD_EXP 3
2905: PUSH
2906: LD_STRING Bobby
2908: STR
2909: PPUSH
2910: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
2914: LD_EXP 39
2918: PPUSH
2919: CALL_OW 255
2923: PUSH
2924: LD_INT 4
2926: EQUAL
2927: IFFALSE 2942
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
2929: LD_EXP 3
2933: PUSH
2934: LD_STRING Cyrus
2936: STR
2937: PPUSH
2938: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
2942: LD_EXP 40
2946: PPUSH
2947: CALL_OW 255
2951: PUSH
2952: LD_INT 4
2954: EQUAL
2955: IFFALSE 2970
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
2957: LD_EXP 3
2961: PUSH
2962: LD_STRING Lisa
2964: STR
2965: PPUSH
2966: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
2970: LD_EXP 41
2974: PPUSH
2975: CALL_OW 255
2979: PUSH
2980: LD_INT 4
2982: EQUAL
2983: IFFALSE 2998
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
2985: LD_EXP 3
2989: PUSH
2990: LD_STRING Khatam
2992: STR
2993: PPUSH
2994: CALL_OW 40
// if GetSide ( Brian ) = 4 then
2998: LD_EXP 42
3002: PPUSH
3003: CALL_OW 255
3007: PUSH
3008: LD_INT 4
3010: EQUAL
3011: IFFALSE 3026
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3013: LD_EXP 3
3017: PUSH
3018: LD_STRING Brian
3020: STR
3021: PPUSH
3022: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3026: LD_EXP 43
3030: PPUSH
3031: CALL_OW 255
3035: PUSH
3036: LD_INT 4
3038: EQUAL
3039: IFFALSE 3054
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3041: LD_EXP 3
3045: PUSH
3046: LD_STRING Jerry
3048: STR
3049: PPUSH
3050: CALL_OW 40
// end ; end_of_file
3054: LD_VAR 0 1
3058: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3059: LD_INT 0
3061: PPUSH
3062: PPUSH
3063: PPUSH
3064: PPUSH
3065: PPUSH
3066: PPUSH
3067: PPUSH
3068: PPUSH
3069: PPUSH
3070: PPUSH
3071: PPUSH
3072: PPUSH
3073: PPUSH
// ru_alert := false ;
3074: LD_ADDR_EXP 60
3078: PUSH
3079: LD_INT 0
3081: ST_TO_ADDR
// ru_produce_list := [ ] ;
3082: LD_ADDR_EXP 57
3086: PUSH
3087: EMPTY
3088: ST_TO_ADDR
// if Difficulty > 1 then
3089: LD_OWVAR 67
3093: PUSH
3094: LD_INT 1
3096: GREATER
3097: IFFALSE 3185
// begin uc_side := 3 ;
3099: LD_ADDR_OWVAR 20
3103: PUSH
3104: LD_INT 3
3106: ST_TO_ADDR
// uc_nation := 3 ;
3107: LD_ADDR_OWVAR 21
3111: PUSH
3112: LD_INT 3
3114: ST_TO_ADDR
// bc_type := b_breastwork ;
3115: LD_ADDR_OWVAR 42
3119: PUSH
3120: LD_INT 31
3122: ST_TO_ADDR
// bc_level := Difficulty ;
3123: LD_ADDR_OWVAR 43
3127: PUSH
3128: LD_OWVAR 67
3132: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3133: LD_INT 22
3135: PPUSH
3136: LD_INT 14
3138: PPUSH
3139: LD_INT 0
3141: PPUSH
3142: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3146: LD_INT 48
3148: PPUSH
3149: LD_INT 46
3151: PPUSH
3152: LD_INT 0
3154: PPUSH
3155: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3159: LD_INT 86
3161: PPUSH
3162: LD_INT 65
3164: PPUSH
3165: LD_INT 5
3167: PPUSH
3168: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3172: LD_INT 165
3174: PPUSH
3175: LD_INT 73
3177: PPUSH
3178: LD_INT 5
3180: PPUSH
3181: CALL_OW 47
// end ; if Difficulty >= 3 then
3185: LD_OWVAR 67
3189: PUSH
3190: LD_INT 3
3192: GREATEREQUAL
3193: IFFALSE 3208
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3195: LD_INT 51
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: LD_INT 2
3203: PPUSH
3204: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3208: LD_ADDR_VAR 0 7
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: LD_INT 3
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 2
3225: PUSH
3226: LD_INT 30
3228: PUSH
3229: LD_INT 31
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: LD_INT 30
3238: PUSH
3239: LD_INT 32
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: LIST
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PPUSH
3255: CALL_OW 69
3259: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3260: LD_ADDR_VAR 0 8
3264: PUSH
3265: LD_INT 22
3267: PUSH
3268: LD_INT 3
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 30
3277: PUSH
3278: LD_INT 4
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: PPUSH
3289: CALL_OW 69
3293: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3294: LD_ADDR_VAR 0 10
3298: PUSH
3299: LD_INT 22
3301: PUSH
3302: LD_INT 3
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: LD_INT 30
3311: PUSH
3312: LD_INT 3
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PPUSH
3323: CALL_OW 69
3327: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3328: LD_ADDR_VAR 0 9
3332: PUSH
3333: LD_INT 22
3335: PUSH
3336: LD_INT 3
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 30
3345: PUSH
3346: LD_INT 6
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PPUSH
3357: CALL_OW 69
3361: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3362: LD_ADDR_VAR 0 2
3366: PUSH
3367: LD_INT 22
3369: PUSH
3370: LD_INT 3
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 30
3379: PUSH
3380: LD_INT 1
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PPUSH
3391: CALL_OW 69
3395: PUSH
3396: FOR_IN
3397: IFFALSE 3441
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3399: LD_VAR 0 2
3403: PPUSH
3404: CALL_OW 274
3408: PPUSH
3409: LD_INT 1
3411: PPUSH
3412: LD_INT 1000
3414: PPUSH
3415: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3419: LD_VAR 0 2
3423: PPUSH
3424: CALL_OW 274
3428: PPUSH
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 300
3434: PPUSH
3435: CALL_OW 277
// end ;
3439: GO 3396
3441: POP
3442: POP
// uc_side := 3 ;
3443: LD_ADDR_OWVAR 20
3447: PUSH
3448: LD_INT 3
3450: ST_TO_ADDR
// uc_nation := 3 ;
3451: LD_ADDR_OWVAR 21
3455: PUSH
3456: LD_INT 3
3458: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3459: LD_ADDR_VAR 0 11
3463: PUSH
3464: LD_INT 2
3466: PUSH
3467: LD_INT 3
3469: PUSH
3470: LD_INT 4
3472: PUSH
3473: LD_INT 4
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: PUSH
3482: LD_OWVAR 67
3486: ARRAY
3487: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3488: LD_ADDR_EXP 52
3492: PUSH
3493: LD_STRING Pokryshkin
3495: PPUSH
3496: LD_INT 0
3498: PPUSH
3499: LD_STRING 
3501: PPUSH
3502: CALL 37807 0 3
3506: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3507: LD_EXP 52
3511: PPUSH
3512: LD_INT 63
3514: PPUSH
3515: LD_INT 21
3517: PPUSH
3518: LD_INT 0
3520: PPUSH
3521: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3525: LD_EXP 52
3529: PPUSH
3530: CALL_OW 140
// InitHc ;
3534: CALL_OW 19
// for i in fac do
3538: LD_ADDR_VAR 0 2
3542: PUSH
3543: LD_VAR 0 10
3547: PUSH
3548: FOR_IN
3549: IFFALSE 3602
// begin for j = 1 to 6 do
3551: LD_ADDR_VAR 0 3
3555: PUSH
3556: DOUBLE
3557: LD_INT 1
3559: DEC
3560: ST_TO_ADDR
3561: LD_INT 6
3563: PUSH
3564: FOR_TO
3565: IFFALSE 3598
// begin PrepareHuman ( false , 3 , skill ) ;
3567: LD_INT 0
3569: PPUSH
3570: LD_INT 3
3572: PPUSH
3573: LD_VAR 0 11
3577: PPUSH
3578: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3582: CALL_OW 44
3586: PPUSH
3587: LD_VAR 0 2
3591: PPUSH
3592: CALL_OW 52
// end ;
3596: GO 3564
3598: POP
3599: POP
// end ;
3600: GO 3548
3602: POP
3603: POP
// for i in lab do
3604: LD_ADDR_VAR 0 2
3608: PUSH
3609: LD_VAR 0 9
3613: PUSH
3614: FOR_IN
3615: IFFALSE 3648
// begin PrepareHuman ( false , 4 , skill ) ;
3617: LD_INT 0
3619: PPUSH
3620: LD_INT 4
3622: PPUSH
3623: LD_VAR 0 11
3627: PPUSH
3628: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3632: CALL_OW 44
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 52
// end ;
3646: GO 3614
3648: POP
3649: POP
// for i in tw do
3650: LD_ADDR_VAR 0 2
3654: PUSH
3655: LD_VAR 0 7
3659: PUSH
3660: FOR_IN
3661: IFFALSE 3710
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
3663: LD_VAR 0 2
3667: PPUSH
3668: LD_INT 42
3670: PUSH
3671: LD_INT 43
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 1
3680: PPUSH
3681: LD_INT 2
3683: PPUSH
3684: CALL_OW 12
3688: ARRAY
3689: PPUSH
3690: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
3694: LD_VAR 0 11
3698: PPUSH
3699: LD_VAR 0 2
3703: PPUSH
3704: CALL 775 0 2
// end ;
3708: GO 3660
3710: POP
3711: POP
// for i in bar do
3712: LD_ADDR_VAR 0 2
3716: PUSH
3717: LD_VAR 0 8
3721: PUSH
3722: FOR_IN
3723: IFFALSE 3756
// begin PrepareHuman ( false , 1 , skill ) ;
3725: LD_INT 0
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_VAR 0 11
3735: PPUSH
3736: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3740: CALL_OW 44
3744: PPUSH
3745: LD_VAR 0 2
3749: PPUSH
3750: CALL_OW 52
// end ;
3754: GO 3722
3756: POP
3757: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
3758: LD_ADDR_VAR 0 13
3762: PUSH
3763: LD_INT 100
3765: PUSH
3766: LD_INT 9
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PUSH
3773: LD_INT 135
3775: PUSH
3776: LD_INT 60
3778: PUSH
3779: EMPTY
3780: LIST
3781: LIST
3782: PUSH
3783: LD_INT 41
3785: PUSH
3786: LD_INT 6
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: PUSH
3793: LD_INT 22
3795: PUSH
3796: LD_INT 9
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PUSH
3803: LD_INT 84
3805: PUSH
3806: LD_INT 14
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: ST_TO_ADDR
// vehicles := [ ] ;
3820: LD_ADDR_VAR 0 12
3824: PUSH
3825: EMPTY
3826: ST_TO_ADDR
// for i in spot_xy do
3827: LD_ADDR_VAR 0 2
3831: PUSH
3832: LD_VAR 0 13
3836: PUSH
3837: FOR_IN
3838: IFFALSE 3996
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
3840: LD_ADDR_VAR 0 6
3844: PUSH
3845: LD_INT 3
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 22
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: LD_INT 42
3862: PUSH
3863: LD_INT 43
3865: PUSH
3866: LD_INT 44
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 1
3876: PPUSH
3877: LD_INT 3
3879: PPUSH
3880: CALL_OW 12
3884: ARRAY
3885: PPUSH
3886: LD_INT 100
3888: PPUSH
3889: CALL 497 0 7
3893: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
3894: LD_ADDR_VAR 0 12
3898: PUSH
3899: LD_VAR 0 12
3903: PPUSH
3904: LD_VAR 0 12
3908: PUSH
3909: LD_INT 1
3911: PLUS
3912: PPUSH
3913: LD_VAR 0 6
3917: PPUSH
3918: CALL_OW 2
3922: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3923: LD_VAR 0 6
3927: PPUSH
3928: LD_INT 3
3930: PPUSH
3931: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
3935: LD_VAR 0 6
3939: PPUSH
3940: LD_VAR 0 2
3944: PUSH
3945: LD_INT 1
3947: ARRAY
3948: PPUSH
3949: LD_VAR 0 2
3953: PUSH
3954: LD_INT 2
3956: ARRAY
3957: PPUSH
3958: LD_INT 0
3960: PPUSH
3961: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
3965: LD_INT 0
3967: PPUSH
3968: LD_INT 3
3970: PPUSH
3971: LD_VAR 0 11
3975: PPUSH
3976: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3980: CALL_OW 44
3984: PPUSH
3985: LD_VAR 0 6
3989: PPUSH
3990: CALL_OW 52
// end ;
3994: GO 3837
3996: POP
3997: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
3998: LD_ADDR_VAR 0 2
4002: PUSH
4003: DOUBLE
4004: LD_INT 1
4006: DEC
4007: ST_TO_ADDR
4008: LD_INT 5
4010: PUSH
4011: LD_INT 7
4013: PUSH
4014: LD_INT 8
4016: PUSH
4017: LD_INT 9
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: PUSH
4026: LD_OWVAR 67
4030: ARRAY
4031: PUSH
4032: FOR_TO
4033: IFFALSE 4093
// begin PrepareHuman ( false , 1 , skill ) ;
4035: LD_INT 0
4037: PPUSH
4038: LD_INT 1
4040: PPUSH
4041: LD_VAR 0 11
4045: PPUSH
4046: CALL_OW 380
// un := CreateHuman ;
4050: LD_ADDR_VAR 0 5
4054: PUSH
4055: CALL_OW 44
4059: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4060: LD_VAR 0 5
4064: PPUSH
4065: LD_INT 11
4067: PPUSH
4068: LD_INT 0
4070: PPUSH
4071: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4075: LD_ADDR_EXP 55
4079: PUSH
4080: LD_EXP 55
4084: PUSH
4085: LD_VAR 0 5
4089: ADD
4090: ST_TO_ADDR
// end ;
4091: GO 4032
4093: POP
4094: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4095: LD_ADDR_VAR 0 2
4099: PUSH
4100: DOUBLE
4101: LD_INT 1
4103: DEC
4104: ST_TO_ADDR
4105: LD_INT 2
4107: PUSH
4108: LD_INT 3
4110: PUSH
4111: LD_INT 4
4113: PUSH
4114: LD_INT 5
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: LD_OWVAR 67
4127: ARRAY
4128: PUSH
4129: FOR_TO
4130: IFFALSE 4190
// begin PrepareHuman ( false , 1 , skill ) ;
4132: LD_INT 0
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: LD_VAR 0 11
4142: PPUSH
4143: CALL_OW 380
// un := CreateHuman ;
4147: LD_ADDR_VAR 0 5
4151: PUSH
4152: CALL_OW 44
4156: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4157: LD_VAR 0 5
4161: PPUSH
4162: LD_INT 12
4164: PPUSH
4165: LD_INT 0
4167: PPUSH
4168: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4172: LD_ADDR_EXP 53
4176: PUSH
4177: LD_EXP 53
4181: PUSH
4182: LD_VAR 0 5
4186: ADD
4187: ST_TO_ADDR
// end ;
4188: GO 4129
4190: POP
4191: POP
// for i = 1 to 2 do
4192: LD_ADDR_VAR 0 2
4196: PUSH
4197: DOUBLE
4198: LD_INT 1
4200: DEC
4201: ST_TO_ADDR
4202: LD_INT 2
4204: PUSH
4205: FOR_TO
4206: IFFALSE 4272
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4208: LD_INT 1
4210: PPUSH
4211: LD_INT 1
4213: PPUSH
4214: LD_VAR 0 11
4218: PPUSH
4219: CALL_OW 380
// un := CreateHuman ;
4223: LD_ADDR_VAR 0 5
4227: PUSH
4228: CALL_OW 44
4232: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4233: LD_VAR 0 5
4237: PPUSH
4238: LD_INT 39
4240: PPUSH
4241: LD_INT 12
4243: PPUSH
4244: LD_INT 3
4246: PPUSH
4247: LD_INT 0
4249: PPUSH
4250: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4254: LD_ADDR_EXP 54
4258: PUSH
4259: LD_EXP 54
4263: PUSH
4264: LD_VAR 0 5
4268: ADD
4269: ST_TO_ADDR
// end ;
4270: GO 4205
4272: POP
4273: POP
// for i = 1 to 3 do
4274: LD_ADDR_VAR 0 2
4278: PUSH
4279: DOUBLE
4280: LD_INT 1
4282: DEC
4283: ST_TO_ADDR
4284: LD_INT 3
4286: PUSH
4287: FOR_TO
4288: IFFALSE 4354
// begin PrepareHuman ( false , 1 , skill ) ;
4290: LD_INT 0
4292: PPUSH
4293: LD_INT 1
4295: PPUSH
4296: LD_VAR 0 11
4300: PPUSH
4301: CALL_OW 380
// un := CreateHuman ;
4305: LD_ADDR_VAR 0 5
4309: PUSH
4310: CALL_OW 44
4314: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4315: LD_VAR 0 5
4319: PPUSH
4320: LD_INT 180
4322: PPUSH
4323: LD_INT 11
4325: PPUSH
4326: LD_INT 4
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4336: LD_ADDR_EXP 58
4340: PUSH
4341: LD_EXP 58
4345: PUSH
4346: LD_VAR 0 5
4350: ADD
4351: ST_TO_ADDR
// end ;
4352: GO 4287
4354: POP
4355: POP
// ru_vehicles := vehicles ;
4356: LD_ADDR_EXP 56
4360: PUSH
4361: LD_VAR 0 12
4365: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4366: LD_ADDR_EXP 59
4370: PUSH
4371: LD_INT 131
4373: PUSH
4374: LD_INT 121
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_INT 113
4383: PUSH
4384: LD_INT 90
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: LD_INT 93
4393: PUSH
4394: LD_INT 62
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 106
4408: PUSH
4409: LD_INT 54
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 120
4418: PUSH
4419: LD_INT 80
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 143
4428: PUSH
4429: LD_INT 120
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 154
4443: PUSH
4444: LD_INT 116
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 140
4453: PUSH
4454: LD_INT 93
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: LD_INT 130
4463: PUSH
4464: LD_INT 58
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: LD_INT 105
4478: PUSH
4479: LD_INT 106
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 134
4488: PUSH
4489: LD_INT 98
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 159
4498: PUSH
4499: LD_INT 113
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: LIST
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: ST_TO_ADDR
// if Difficulty = 1 then
4517: LD_OWVAR 67
4521: PUSH
4522: LD_INT 1
4524: EQUAL
4525: IFFALSE 4529
// exit ;
4527: GO 4584
// for i = 1 to Difficulty - 1 do
4529: LD_ADDR_VAR 0 2
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_OWVAR 67
4543: PUSH
4544: LD_INT 1
4546: MINUS
4547: PUSH
4548: FOR_TO
4549: IFFALSE 4582
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
4551: LD_ADDR_EXP 57
4555: PUSH
4556: LD_EXP 57
4560: PUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: LD_INT 1
4569: PUSH
4570: LD_INT 43
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: ADD
4579: ST_TO_ADDR
4580: GO 4548
4582: POP
4583: POP
// end ;
4584: LD_VAR 0 1
4588: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
4589: LD_INT 22
4591: PUSH
4592: LD_INT 3
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: PUSH
4599: LD_INT 21
4601: PUSH
4602: LD_INT 2
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PPUSH
4613: CALL_OW 69
4617: IFFALSE 4711
4619: GO 4621
4621: DISABLE
4622: LD_INT 0
4624: PPUSH
4625: PPUSH
// begin enable ;
4626: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4627: LD_ADDR_VAR 0 2
4631: PUSH
4632: LD_INT 22
4634: PUSH
4635: LD_INT 3
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 21
4644: PUSH
4645: LD_INT 2
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PPUSH
4656: CALL_OW 69
4660: ST_TO_ADDR
// if filter then
4661: LD_VAR 0 2
4665: IFFALSE 4711
// for i in filter do
4667: LD_ADDR_VAR 0 1
4671: PUSH
4672: LD_VAR 0 2
4676: PUSH
4677: FOR_IN
4678: IFFALSE 4709
// if GetFuel ( i ) < 20 then
4680: LD_VAR 0 1
4684: PPUSH
4685: CALL_OW 261
4689: PUSH
4690: LD_INT 20
4692: LESS
4693: IFFALSE 4707
// SetFuel ( i , 20 ) ;
4695: LD_VAR 0 1
4699: PPUSH
4700: LD_INT 20
4702: PPUSH
4703: CALL_OW 240
4707: GO 4677
4709: POP
4710: POP
// end ;
4711: PPOPN 2
4713: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
4714: LD_EXP 57
4718: IFFALSE 4937
4720: GO 4722
4722: DISABLE
4723: LD_INT 0
4725: PPUSH
4726: PPUSH
4727: PPUSH
// begin enable ;
4728: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4729: LD_ADDR_VAR 0 2
4733: PUSH
4734: LD_INT 22
4736: PUSH
4737: LD_INT 3
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 30
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PPUSH
4758: CALL_OW 69
4762: ST_TO_ADDR
// can_produce := [ ] ;
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: EMPTY
4769: ST_TO_ADDR
// if not fac then
4770: LD_VAR 0 2
4774: NOT
4775: IFFALSE 4780
// begin disable ;
4777: DISABLE
// exit ;
4778: GO 4937
// end ; for i in fac do
4780: LD_ADDR_VAR 0 1
4784: PUSH
4785: LD_VAR 0 2
4789: PUSH
4790: FOR_IN
4791: IFFALSE 4829
// if UnitsInside ( i ) then
4793: LD_VAR 0 1
4797: PPUSH
4798: CALL_OW 313
4802: IFFALSE 4827
// can_produce := Insert ( can_produce , 1 , i ) ;
4804: LD_ADDR_VAR 0 3
4808: PUSH
4809: LD_VAR 0 3
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: LD_VAR 0 1
4821: PPUSH
4822: CALL_OW 2
4826: ST_TO_ADDR
4827: GO 4790
4829: POP
4830: POP
// if not can_produce then
4831: LD_VAR 0 3
4835: NOT
4836: IFFALSE 4840
// exit ;
4838: GO 4937
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
4840: LD_VAR 0 3
4844: PUSH
4845: LD_INT 1
4847: PPUSH
4848: LD_VAR 0 3
4852: PPUSH
4853: CALL_OW 12
4857: ARRAY
4858: PPUSH
4859: LD_EXP 57
4863: PUSH
4864: LD_INT 1
4866: ARRAY
4867: PPUSH
4868: LD_EXP 57
4872: PUSH
4873: LD_INT 2
4875: ARRAY
4876: PPUSH
4877: LD_EXP 57
4881: PUSH
4882: LD_INT 3
4884: ARRAY
4885: PPUSH
4886: LD_EXP 57
4890: PUSH
4891: LD_INT 4
4893: ARRAY
4894: PPUSH
4895: CALL_OW 125
// for i = 1 to 4 do
4899: LD_ADDR_VAR 0 1
4903: PUSH
4904: DOUBLE
4905: LD_INT 1
4907: DEC
4908: ST_TO_ADDR
4909: LD_INT 4
4911: PUSH
4912: FOR_TO
4913: IFFALSE 4935
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
4915: LD_ADDR_EXP 57
4919: PUSH
4920: LD_EXP 57
4924: PPUSH
4925: LD_INT 1
4927: PPUSH
4928: CALL_OW 3
4932: ST_TO_ADDR
4933: GO 4912
4935: POP
4936: POP
// end ;
4937: PPOPN 3
4939: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
4940: LD_INT 0
4942: PPUSH
4943: PPUSH
4944: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4945: LD_ADDR_VAR 0 2
4949: PUSH
4950: DOUBLE
4951: LD_INT 1
4953: DEC
4954: ST_TO_ADDR
4955: LD_INT 2
4957: PUSH
4958: LD_INT 3
4960: PUSH
4961: LD_INT 4
4963: PUSH
4964: LD_INT 4
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: LD_OWVAR 67
4977: ARRAY
4978: PUSH
4979: FOR_TO
4980: IFFALSE 5129
// begin PrepareHuman ( false , 3 , 3 ) ;
4982: LD_INT 0
4984: PPUSH
4985: LD_INT 3
4987: PPUSH
4988: LD_INT 3
4990: PPUSH
4991: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
4995: LD_ADDR_VAR 0 3
4999: PUSH
5000: LD_INT 3
5002: PPUSH
5003: LD_INT 3
5005: PPUSH
5006: LD_INT 22
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: LD_INT 1
5014: PPUSH
5015: LD_INT 43
5017: PUSH
5018: LD_INT 42
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: PUSH
5025: LD_INT 1
5027: PPUSH
5028: LD_INT 2
5030: PPUSH
5031: CALL_OW 12
5035: ARRAY
5036: PPUSH
5037: LD_INT 70
5039: PPUSH
5040: CALL 497 0 7
5044: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5045: LD_VAR 0 3
5049: PPUSH
5050: LD_INT 4
5052: PPUSH
5053: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5057: LD_VAR 0 3
5061: PPUSH
5062: LD_INT 229
5064: PPUSH
5065: LD_INT 44
5067: PPUSH
5068: LD_INT 0
5070: PPUSH
5071: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5075: CALL_OW 44
5079: PPUSH
5080: LD_VAR 0 3
5084: PPUSH
5085: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5089: LD_ADDR_EXP 56
5093: PUSH
5094: LD_EXP 56
5098: PUSH
5099: LD_VAR 0 3
5103: ADD
5104: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5105: LD_VAR 0 3
5109: PPUSH
5110: LD_INT 191
5112: PPUSH
5113: LD_INT 32
5115: PPUSH
5116: CALL_OW 111
// Wait ( 0 0$02 ) ;
5120: LD_INT 70
5122: PPUSH
5123: CALL_OW 67
// end ;
5127: GO 4979
5129: POP
5130: POP
// end ;
5131: LD_VAR 0 1
5135: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5136: LD_EXP 31
5140: PUSH
5141: LD_EXP 56
5145: AND
5146: IFFALSE 5320
5148: GO 5150
5150: DISABLE
5151: LD_INT 0
5153: PPUSH
5154: PPUSH
5155: PPUSH
// begin wait ( 0 0$50 ) ;
5156: LD_INT 1750
5158: PPUSH
5159: CALL_OW 67
// tmp := ru_vehicles ;
5163: LD_ADDR_VAR 0 3
5167: PUSH
5168: LD_EXP 56
5172: ST_TO_ADDR
// if not tmp then
5173: LD_VAR 0 3
5177: NOT
5178: IFFALSE 5182
// exit ;
5180: GO 5320
// repeat wait ( 0 0$1 ) ;
5182: LD_INT 35
5184: PPUSH
5185: CALL_OW 67
// for i in tmp do
5189: LD_ADDR_VAR 0 1
5193: PUSH
5194: LD_VAR 0 3
5198: PUSH
5199: FOR_IN
5200: IFFALSE 5311
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5202: LD_ADDR_VAR 0 2
5206: PUSH
5207: LD_INT 22
5209: PUSH
5210: LD_INT 1
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PPUSH
5217: LD_VAR 0 1
5221: PPUSH
5222: CALL_OW 74
5226: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5227: LD_VAR 0 1
5231: PPUSH
5232: LD_VAR 0 2
5236: PPUSH
5237: CALL_OW 296
5241: PUSH
5242: LD_INT 10
5244: GREATER
5245: IFFALSE 5264
// ComAgressiveMove ( i , 69 , 101 ) else
5247: LD_VAR 0 1
5251: PPUSH
5252: LD_INT 69
5254: PPUSH
5255: LD_INT 101
5257: PPUSH
5258: CALL_OW 114
5262: GO 5278
// ComAttackUnit ( i , enemy ) ;
5264: LD_VAR 0 1
5268: PPUSH
5269: LD_VAR 0 2
5273: PPUSH
5274: CALL_OW 115
// if GetLives ( i ) < 250 then
5278: LD_VAR 0 1
5282: PPUSH
5283: CALL_OW 256
5287: PUSH
5288: LD_INT 250
5290: LESS
5291: IFFALSE 5309
// tmp := tmp diff i ;
5293: LD_ADDR_VAR 0 3
5297: PUSH
5298: LD_VAR 0 3
5302: PUSH
5303: LD_VAR 0 1
5307: DIFF
5308: ST_TO_ADDR
// end ;
5309: GO 5199
5311: POP
5312: POP
// until not tmp ;
5313: LD_VAR 0 3
5317: NOT
5318: IFFALSE 5182
// end ; end_of_file
5320: PPOPN 3
5322: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5323: LD_INT 0
5325: PPUSH
5326: PPUSH
5327: PPUSH
5328: PPUSH
5329: PPUSH
5330: PPUSH
5331: PPUSH
// InGameOn ;
5332: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5336: LD_EXP 37
5340: PPUSH
5341: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5345: LD_EXP 37
5349: PPUSH
5350: LD_EXP 44
5354: PPUSH
5355: CALL_OW 119
// if Bierezov then
5359: LD_EXP 45
5363: IFFALSE 5379
// ComTurnUnit ( Bierezov , Cornel ) ;
5365: LD_EXP 45
5369: PPUSH
5370: LD_EXP 44
5374: PPUSH
5375: CALL_OW 119
// for i in jmm_units do
5379: LD_ADDR_VAR 0 2
5383: PUSH
5384: LD_EXP 4
5388: PUSH
5389: FOR_IN
5390: IFFALSE 5408
// ComTurnUnit ( i , Cornel ) ;
5392: LD_VAR 0 2
5396: PPUSH
5397: LD_EXP 44
5401: PPUSH
5402: CALL_OW 119
5406: GO 5389
5408: POP
5409: POP
// units := cornel_units union Cornel ;
5410: LD_ADDR_VAR 0 3
5414: PUSH
5415: LD_EXP 6
5419: PUSH
5420: LD_EXP 44
5424: UNION
5425: ST_TO_ADDR
// repeat wait ( 1 ) ;
5426: LD_INT 1
5428: PPUSH
5429: CALL_OW 67
// for i in units do
5433: LD_ADDR_VAR 0 2
5437: PUSH
5438: LD_VAR 0 3
5442: PUSH
5443: FOR_IN
5444: IFFALSE 5477
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5446: LD_VAR 0 2
5450: PPUSH
5451: LD_EXP 37
5455: PPUSH
5456: CALL_OW 250
5460: PPUSH
5461: LD_EXP 37
5465: PPUSH
5466: CALL_OW 251
5470: PPUSH
5471: CALL_OW 111
5475: GO 5443
5477: POP
5478: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5479: LD_VAR 0 3
5483: PPUSH
5484: LD_INT 92
5486: PUSH
5487: LD_EXP 37
5491: PPUSH
5492: CALL_OW 250
5496: PUSH
5497: LD_EXP 37
5501: PPUSH
5502: CALL_OW 251
5506: PUSH
5507: LD_INT 10
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: PPUSH
5516: CALL_OW 72
5520: PUSH
5521: LD_VAR 0 3
5525: EQUAL
5526: IFFALSE 5426
// for i in units do
5528: LD_ADDR_VAR 0 2
5532: PUSH
5533: LD_VAR 0 3
5537: PUSH
5538: FOR_IN
5539: IFFALSE 5557
// ComTurnUnit ( i , JMM ) ;
5541: LD_VAR 0 2
5545: PPUSH
5546: LD_EXP 37
5550: PPUSH
5551: CALL_OW 119
5555: GO 5538
5557: POP
5558: POP
// ComTurnUnit ( Cornel , JMM ) ;
5559: LD_EXP 44
5563: PPUSH
5564: LD_EXP 37
5568: PPUSH
5569: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
5573: LD_EXP 37
5577: PPUSH
5578: LD_STRING D1-JMM-1
5580: PPUSH
5581: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
5585: LD_EXP 44
5589: PPUSH
5590: LD_STRING D1-Corn-1
5592: PPUSH
5593: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
5597: LD_EXP 37
5601: PPUSH
5602: LD_EXP 44
5606: PPUSH
5607: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
5611: LD_EXP 44
5615: PPUSH
5616: LD_EXP 37
5620: PPUSH
5621: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
5625: LD_INT 35
5627: PPUSH
5628: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
5632: LD_EXP 37
5636: PPUSH
5637: LD_EXP 44
5641: PPUSH
5642: CALL_OW 296
5646: PUSH
5647: LD_INT 6
5649: LESS
5650: IFFALSE 5625
// ChangeSideFog ( 4 , 1 ) ;
5652: LD_INT 4
5654: PPUSH
5655: LD_INT 1
5657: PPUSH
5658: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
5662: LD_EXP 37
5666: PPUSH
5667: LD_EXP 44
5671: PPUSH
5672: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5676: LD_EXP 44
5680: PPUSH
5681: LD_EXP 37
5685: PPUSH
5686: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
5690: LD_EXP 37
5694: PPUSH
5695: LD_STRING D1-JMM-2
5697: PPUSH
5698: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
5702: LD_EXP 37
5706: PPUSH
5707: LD_STRING D1-JMM-2a
5709: PPUSH
5710: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
5714: LD_EXP 44
5718: PPUSH
5719: LD_STRING D1-Corn-2
5721: PPUSH
5722: CALL_OW 88
// if bierezov_exist or debug then
5726: LD_EXP 7
5730: PUSH
5731: LD_EXP 1
5735: OR
5736: IFFALSE 5977
// begin ComTurnUnit ( Cornel , Bierezov ) ;
5738: LD_EXP 44
5742: PPUSH
5743: LD_EXP 45
5747: PPUSH
5748: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
5752: LD_INT 10
5754: PPUSH
5755: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
5759: LD_EXP 44
5763: PPUSH
5764: LD_STRING D1a-Corn-1
5766: PPUSH
5767: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
5771: LD_EXP 37
5775: PPUSH
5776: LD_EXP 45
5780: PPUSH
5781: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
5785: LD_EXP 45
5789: PPUSH
5790: LD_EXP 37
5794: PPUSH
5795: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
5799: LD_EXP 37
5803: PPUSH
5804: LD_STRING D1a-JMM-1
5806: PPUSH
5807: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
5811: LD_EXP 37
5815: PPUSH
5816: LD_EXP 44
5820: PPUSH
5821: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5825: LD_EXP 44
5829: PPUSH
5830: LD_EXP 37
5834: PPUSH
5835: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
5839: LD_EXP 44
5843: PPUSH
5844: LD_STRING D1a-Corn-2
5846: PPUSH
5847: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
5851: LD_EXP 37
5855: PPUSH
5856: LD_STRING D1a-JMM-2
5858: PPUSH
5859: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
5863: LD_EXP 44
5867: PPUSH
5868: LD_STRING D1a-Corn-3
5870: PPUSH
5871: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
5875: LD_EXP 37
5879: PPUSH
5880: LD_STRING D1a-JMM-3
5882: PPUSH
5883: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
5887: LD_EXP 44
5891: PPUSH
5892: LD_STRING D1a-Corn-4
5894: PPUSH
5895: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
5899: LD_EXP 37
5903: PPUSH
5904: LD_STRING D1a-JMM-4
5906: PPUSH
5907: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
5911: LD_EXP 44
5915: PPUSH
5916: LD_STRING D1a-Corn-5
5918: PPUSH
5919: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
5923: LD_EXP 45
5927: PPUSH
5928: LD_EXP 44
5932: PPUSH
5933: CALL_OW 250
5937: PPUSH
5938: LD_EXP 44
5942: PPUSH
5943: CALL_OW 251
5947: PUSH
5948: LD_INT 2
5950: MINUS
5951: PPUSH
5952: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
5956: LD_EXP 45
5960: PPUSH
5961: LD_EXP 44
5965: PPUSH
5966: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
5970: LD_INT 10
5972: PPUSH
5973: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
5977: LD_EXP 37
5981: PPUSH
5982: LD_STRING D1b-JMM-1
5984: PPUSH
5985: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
5989: LD_EXP 44
5993: PPUSH
5994: LD_STRING D1b-Corn-1
5996: PPUSH
5997: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6001: LD_EXP 37
6005: PPUSH
6006: LD_STRING D1b-JMM-2
6008: PPUSH
6009: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6013: LD_EXP 44
6017: PPUSH
6018: LD_STRING D1b-Corn-2
6020: PPUSH
6021: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6025: LD_EXP 37
6029: PPUSH
6030: LD_STRING D1b-JMM-3
6032: PPUSH
6033: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6037: LD_INT 10
6039: PPUSH
6040: CALL_OW 67
// SayRadio ( Powell , D1b-Pow-3 ) ;
6044: LD_EXP 46
6048: PPUSH
6049: LD_STRING D1b-Pow-3
6051: PPUSH
6052: CALL_OW 94
// Say ( JMM , D1b-JMM-4 ) ;
6056: LD_EXP 37
6060: PPUSH
6061: LD_STRING D1b-JMM-4
6063: PPUSH
6064: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6068: LD_EXP 44
6072: PPUSH
6073: LD_STRING D1b-Corn-4
6075: PPUSH
6076: CALL_OW 88
// if Khatam then
6080: LD_EXP 41
6084: IFFALSE 6100
// Say ( Khatam , D1b-Khat-4 ) else
6086: LD_EXP 41
6090: PPUSH
6091: LD_STRING D1b-Khat-4
6093: PPUSH
6094: CALL_OW 88
6098: GO 6136
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6100: LD_EXP 6
6104: PPUSH
6105: LD_INT 26
6107: PUSH
6108: LD_INT 1
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PPUSH
6115: CALL_OW 72
6119: PUSH
6120: LD_EXP 44
6124: PUSH
6125: EMPTY
6126: LIST
6127: DIFF
6128: PPUSH
6129: LD_STRING D1b-Sol1-4
6131: PPUSH
6132: CALL 585 0 2
// if Cyrus then
6136: LD_EXP 39
6140: IFFALSE 6154
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6142: LD_EXP 39
6146: PPUSH
6147: LD_STRING D1b-Cyrus-4
6149: PPUSH
6150: CALL_OW 88
// if Lisa then
6154: LD_EXP 40
6158: IFFALSE 6216
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6160: LD_EXP 40
6164: PPUSH
6165: LD_STRING D1b-Lisa-4
6167: PPUSH
6168: CALL_OW 88
// if Cyrus then
6172: LD_EXP 39
6176: IFFALSE 6216
// begin if not IsInUnit ( Cyrus ) then
6178: LD_EXP 39
6182: PPUSH
6183: CALL_OW 310
6187: NOT
6188: IFFALSE 6204
// ComTurnUnit ( Cyrus , Lisa ) ;
6190: LD_EXP 39
6194: PPUSH
6195: LD_EXP 40
6199: PPUSH
6200: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6204: LD_EXP 39
6208: PPUSH
6209: LD_STRING D1b-Cyrus-5
6211: PPUSH
6212: CALL_OW 88
// end ; end ; SelectGroup ;
6216: CALL 2657 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6220: LD_EXP 37
6224: PPUSH
6225: LD_STRING D1d-JMM-1
6227: PPUSH
6228: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6232: LD_EXP 44
6236: PPUSH
6237: LD_STRING D1d-Corn-1
6239: PPUSH
6240: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6244: LD_ADDR_VAR 0 2
6248: PUSH
6249: LD_EXP 4
6253: PUSH
6254: LD_EXP 6
6258: ADD
6259: PUSH
6260: LD_EXP 37
6264: ADD
6265: PUSH
6266: FOR_IN
6267: IFFALSE 6280
// ComHold ( i ) ;
6269: LD_VAR 0 2
6273: PPUSH
6274: CALL_OW 140
6278: GO 6266
6280: POP
6281: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6282: LD_ADDR_VAR 0 4
6286: PUSH
6287: LD_INT 22
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 21
6299: PUSH
6300: LD_INT 2
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PPUSH
6311: CALL_OW 69
6315: ST_TO_ADDR
// if vehicles then
6316: LD_VAR 0 4
6320: IFFALSE 6658
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6322: LD_EXP 6
6326: PPUSH
6327: LD_INT 55
6329: PUSH
6330: EMPTY
6331: LIST
6332: PPUSH
6333: CALL_OW 72
6337: IFFALSE 6376
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6339: LD_ADDR_VAR 0 2
6343: PUSH
6344: LD_EXP 6
6348: PPUSH
6349: LD_INT 55
6351: PUSH
6352: EMPTY
6353: LIST
6354: PPUSH
6355: CALL_OW 72
6359: PUSH
6360: FOR_IN
6361: IFFALSE 6374
// ComExitVehicle ( i ) ;
6363: LD_VAR 0 2
6367: PPUSH
6368: CALL_OW 121
6372: GO 6360
6374: POP
6375: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6376: LD_ADDR_VAR 0 5
6380: PUSH
6381: LD_VAR 0 4
6385: PPUSH
6386: LD_INT 34
6388: PUSH
6389: LD_INT 51
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 72
6400: ST_TO_ADDR
// if cargos then
6401: LD_VAR 0 5
6405: IFFALSE 6588
// begin vehicles := cargos ;
6407: LD_ADDR_VAR 0 4
6411: PUSH
6412: LD_VAR 0 5
6416: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6417: LD_ADDR_VAR 0 6
6421: PUSH
6422: LD_STRING 02_resources_4
6424: PPUSH
6425: LD_INT 0
6427: PPUSH
6428: CALL_OW 30
6432: ST_TO_ADDR
// if debug and not resources then
6433: LD_EXP 1
6437: PUSH
6438: LD_VAR 0 6
6442: NOT
6443: AND
6444: IFFALSE 6454
// resources := 160 ;
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: LD_INT 160
6453: ST_TO_ADDR
// if resources mod 10 then
6454: LD_VAR 0 6
6458: PUSH
6459: LD_INT 10
6461: MOD
6462: IFFALSE 6484
// resources := resources - resources mod 10 ;
6464: LD_ADDR_VAR 0 6
6468: PUSH
6469: LD_VAR 0 6
6473: PUSH
6474: LD_VAR 0 6
6478: PUSH
6479: LD_INT 10
6481: MOD
6482: MINUS
6483: ST_TO_ADDR
// if resources then
6484: LD_VAR 0 6
6488: IFFALSE 6588
// for i in cargos do
6490: LD_ADDR_VAR 0 2
6494: PUSH
6495: LD_VAR 0 5
6499: PUSH
6500: FOR_IN
6501: IFFALSE 6586
// begin if resources < 100 then
6503: LD_VAR 0 6
6507: PUSH
6508: LD_INT 100
6510: LESS
6511: IFFALSE 6533
// begin cargo := resources ;
6513: LD_ADDR_VAR 0 7
6517: PUSH
6518: LD_VAR 0 6
6522: ST_TO_ADDR
// resources := 0 ;
6523: LD_ADDR_VAR 0 6
6527: PUSH
6528: LD_INT 0
6530: ST_TO_ADDR
// end else
6531: GO 6555
// begin cargo := 100 ;
6533: LD_ADDR_VAR 0 7
6537: PUSH
6538: LD_INT 100
6540: ST_TO_ADDR
// resources := resources - 100 ;
6541: LD_ADDR_VAR 0 6
6545: PUSH
6546: LD_VAR 0 6
6550: PUSH
6551: LD_INT 100
6553: MINUS
6554: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
6555: LD_VAR 0 2
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: LD_VAR 0 7
6567: PPUSH
6568: CALL_OW 290
// if resources = 0 then
6572: LD_VAR 0 6
6576: PUSH
6577: LD_INT 0
6579: EQUAL
6580: IFFALSE 6584
// break ;
6582: GO 6586
// end ;
6584: GO 6500
6586: POP
6587: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
6588: LD_VAR 0 4
6592: PUSH
6593: LD_INT 1
6595: ARRAY
6596: PPUSH
6597: CALL_OW 311
6601: PPUSH
6602: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
6606: LD_VAR 0 4
6610: PUSH
6611: LD_INT 1
6613: ARRAY
6614: PPUSH
6615: LD_INT 4
6617: PPUSH
6618: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
6622: LD_EXP 44
6626: PPUSH
6627: LD_VAR 0 4
6631: PUSH
6632: LD_INT 1
6634: ARRAY
6635: PPUSH
6636: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
6640: LD_INT 35
6642: PPUSH
6643: CALL_OW 67
// until IsInUnit ( Cornel ) ;
6647: LD_EXP 44
6651: PPUSH
6652: CALL_OW 310
6656: IFFALSE 6640
// end ; InGameOff ;
6658: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6662: LD_STRING M1
6664: PPUSH
6665: CALL_OW 337
// SaveForQuickRestart ;
6669: CALL_OW 22
// cornel_active := true ;
6673: LD_ADDR_EXP 8
6677: PUSH
6678: LD_INT 1
6680: ST_TO_ADDR
// end ;
6681: LD_VAR 0 1
6685: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
6686: LD_EXP 37
6690: PPUSH
6691: LD_EXP 47
6695: PPUSH
6696: CALL_OW 296
6700: PUSH
6701: LD_INT 10
6703: LESS
6704: IFFALSE 8087
6706: GO 6708
6708: DISABLE
6709: LD_INT 0
6711: PPUSH
6712: PPUSH
6713: PPUSH
6714: PPUSH
6715: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
6716: LD_ADDR_VAR 0 2
6720: PUSH
6721: LD_INT 89
6723: PUSH
6724: LD_INT 34
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: LD_INT 138
6733: PUSH
6734: LD_INT 63
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 196
6743: PUSH
6744: LD_INT 84
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 135
6753: PUSH
6754: LD_INT 52
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 103
6763: PUSH
6764: LD_INT 39
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 58
6773: PUSH
6774: LD_INT 30
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 38
6783: PUSH
6784: LD_INT 51
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: ST_TO_ADDR
// Video ( true ) ;
6800: LD_INT 1
6802: PPUSH
6803: CALL 74460 0 1
// if jmm_units then
6807: LD_EXP 4
6811: IFFALSE 6887
// for i in jmm_units do
6813: LD_ADDR_VAR 0 1
6817: PUSH
6818: LD_EXP 4
6822: PUSH
6823: FOR_IN
6824: IFFALSE 6885
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
6826: LD_VAR 0 1
6830: PPUSH
6831: LD_EXP 37
6835: PPUSH
6836: CALL_OW 296
6840: PUSH
6841: LD_INT 10
6843: LESS
6844: PUSH
6845: LD_VAR 0 1
6849: PPUSH
6850: CALL_OW 310
6854: NOT
6855: AND
6856: IFFALSE 6874
// ComTurnUnit ( i , JMM ) else
6858: LD_VAR 0 1
6862: PPUSH
6863: LD_EXP 37
6867: PPUSH
6868: CALL_OW 119
6872: GO 6883
// ComHold ( i ) ;
6874: LD_VAR 0 1
6878: PPUSH
6879: CALL_OW 140
// end ;
6883: GO 6823
6885: POP
6886: POP
// if IsInUnit ( JMM ) then
6887: LD_EXP 37
6891: PPUSH
6892: CALL_OW 310
6896: IFFALSE 6921
// begin ComExitVehicle ( JMM ) ;
6898: LD_EXP 37
6902: PPUSH
6903: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
6907: LD_EXP 37
6911: PPUSH
6912: LD_EXP 47
6916: PPUSH
6917: CALL_OW 172
// end ; Wait ( 10 ) ;
6921: LD_INT 10
6923: PPUSH
6924: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
6928: LD_EXP 37
6932: PPUSH
6933: LD_EXP 47
6937: PPUSH
6938: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
6942: LD_INT 35
6944: PPUSH
6945: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
6949: LD_EXP 37
6953: PPUSH
6954: LD_EXP 47
6958: PPUSH
6959: CALL_OW 296
6963: PUSH
6964: LD_INT 6
6966: LESS
6967: IFFALSE 6942
// ComTurnUnit ( JMM , Lynch ) ;
6969: LD_EXP 37
6973: PPUSH
6974: LD_EXP 47
6978: PPUSH
6979: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
6983: LD_ADDR_VAR 0 1
6987: PUSH
6988: LD_EXP 47
6992: PUSH
6993: LD_EXP 48
6997: PUSH
6998: LD_EXP 49
7002: PUSH
7003: LD_EXP 50
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: PUSH
7014: FOR_IN
7015: IFFALSE 7033
// ComTurnUnit ( i , JMM ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: LD_EXP 37
7026: PPUSH
7027: CALL_OW 119
7031: GO 7014
7033: POP
7034: POP
// Wait ( 0 0$0.3 ) ;
7035: LD_INT 10
7037: PPUSH
7038: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7042: LD_EXP 37
7046: PPUSH
7047: LD_STRING D2-JMM-1
7049: PPUSH
7050: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7054: LD_EXP 47
7058: PPUSH
7059: LD_STRING D2-Sol1-1
7061: PPUSH
7062: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7066: LD_EXP 37
7070: PPUSH
7071: LD_STRING D2-JMM-2
7073: PPUSH
7074: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7078: LD_EXP 47
7082: PPUSH
7083: LD_STRING D2-Sol1-2
7085: PPUSH
7086: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7090: LD_EXP 37
7094: PPUSH
7095: LD_STRING D2-JMM-3
7097: PPUSH
7098: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7102: LD_EXP 47
7106: PPUSH
7107: LD_STRING D2-Sol1-3
7109: PPUSH
7110: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7114: LD_ADDR_VAR 0 1
7118: PUSH
7119: LD_INT 22
7121: PUSH
7122: LD_INT 8
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PPUSH
7129: CALL_OW 69
7133: PUSH
7134: FOR_IN
7135: IFFALSE 7151
// SetSide ( i , 1 ) ;
7137: LD_VAR 0 1
7141: PPUSH
7142: LD_INT 1
7144: PPUSH
7145: CALL_OW 235
7149: GO 7134
7151: POP
7152: POP
// Say ( JMM , D2-JMM-4 ) ;
7153: LD_EXP 37
7157: PPUSH
7158: LD_STRING D2-JMM-4
7160: PPUSH
7161: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7165: LD_INT 1
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 332
// for i = 1 to points do
7175: LD_ADDR_VAR 0 1
7179: PUSH
7180: DOUBLE
7181: LD_INT 1
7183: DEC
7184: ST_TO_ADDR
7185: LD_VAR 0 2
7189: PUSH
7190: FOR_TO
7191: IFFALSE 7366
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7193: LD_VAR 0 2
7197: PUSH
7198: LD_VAR 0 1
7202: ARRAY
7203: PUSH
7204: LD_INT 1
7206: ARRAY
7207: PPUSH
7208: LD_VAR 0 2
7212: PUSH
7213: LD_VAR 0 1
7217: ARRAY
7218: PUSH
7219: LD_INT 2
7221: ARRAY
7222: PPUSH
7223: CALL_OW 84
// if i = 1 then
7227: LD_VAR 0 1
7231: PUSH
7232: LD_INT 1
7234: EQUAL
7235: IFFALSE 7249
// Say ( Lynch , D2-Sol1-4 ) ;
7237: LD_EXP 47
7241: PPUSH
7242: LD_STRING D2-Sol1-4
7244: PPUSH
7245: CALL_OW 88
// if i = 2 then
7249: LD_VAR 0 1
7253: PUSH
7254: LD_INT 2
7256: EQUAL
7257: IFFALSE 7271
// Say ( JMM , D2-JMM-5 ) ;
7259: LD_EXP 37
7263: PPUSH
7264: LD_STRING D2-JMM-5
7266: PPUSH
7267: CALL_OW 88
// if i = 4 then
7271: LD_VAR 0 1
7275: PUSH
7276: LD_INT 4
7278: EQUAL
7279: IFFALSE 7303
// begin RevealFogArea ( 1 , troopsArea ) ;
7281: LD_INT 1
7283: PPUSH
7284: LD_INT 6
7286: PPUSH
7287: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7291: LD_EXP 47
7295: PPUSH
7296: LD_STRING D2-Sol1-5
7298: PPUSH
7299: CALL_OW 88
// end ; if i = 5 then
7303: LD_VAR 0 1
7307: PUSH
7308: LD_INT 5
7310: EQUAL
7311: IFFALSE 7325
// Say ( JMM , D2-JMM-6 ) ;
7313: LD_EXP 37
7317: PPUSH
7318: LD_STRING D2-JMM-6
7320: PPUSH
7321: CALL_OW 88
// if i = 7 then
7325: LD_VAR 0 1
7329: PUSH
7330: LD_INT 7
7332: EQUAL
7333: IFFALSE 7357
// begin RevealFogArea ( 1 , forestArea ) ;
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 7
7340: PPUSH
7341: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7345: LD_EXP 47
7349: PPUSH
7350: LD_STRING D2-Sol1-6
7352: PPUSH
7353: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7357: LD_INT 46
7359: PPUSH
7360: CALL_OW 67
// end ;
7364: GO 7190
7366: POP
7367: POP
// CenterNowOnUnits ( JMM ) ;
7368: LD_EXP 37
7372: PPUSH
7373: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7377: LD_EXP 37
7381: PPUSH
7382: LD_STRING D2-JMM-7
7384: PPUSH
7385: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7389: LD_EXP 47
7393: PPUSH
7394: LD_STRING D2-Sol1-7
7396: PPUSH
7397: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7401: LD_EXP 37
7405: PPUSH
7406: LD_STRING D2-JMM-8
7408: PPUSH
7409: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7413: LD_ADDR_VAR 0 4
7417: PUSH
7418: LD_INT 22
7420: PUSH
7421: LD_INT 1
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 30
7430: PUSH
7431: LD_INT 31
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PPUSH
7442: CALL_OW 69
7446: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7447: LD_EXP 47
7451: PPUSH
7452: LD_VAR 0 4
7456: PUSH
7457: LD_INT 1
7459: ARRAY
7460: PPUSH
7461: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7465: LD_INT 65
7467: PPUSH
7468: LD_INT 101
7470: PPUSH
7471: CALL_OW 428
7475: IFFALSE 7498
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7477: LD_INT 65
7479: PPUSH
7480: LD_INT 101
7482: PPUSH
7483: CALL_OW 428
7487: PPUSH
7488: LD_INT 75
7490: PPUSH
7491: LD_INT 100
7493: PPUSH
7494: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7498: LD_INT 66
7500: PPUSH
7501: LD_INT 103
7503: PPUSH
7504: CALL_OW 428
7508: IFFALSE 7531
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7510: LD_INT 66
7512: PPUSH
7513: LD_INT 103
7515: PPUSH
7516: CALL_OW 428
7520: PPUSH
7521: LD_INT 75
7523: PPUSH
7524: LD_INT 100
7526: PPUSH
7527: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7531: LD_ADDR_VAR 0 5
7535: PUSH
7536: LD_INT 22
7538: PUSH
7539: LD_INT 1
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 21
7548: PUSH
7549: LD_INT 2
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 91
7558: PUSH
7559: LD_EXP 37
7563: PUSH
7564: LD_INT 7
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: LIST
7576: PPUSH
7577: CALL_OW 69
7581: ST_TO_ADDR
// if tmp then
7582: LD_VAR 0 5
7586: IFFALSE 7603
// ComMoveXY ( tmp , 75 , 100 ) ;
7588: LD_VAR 0 5
7592: PPUSH
7593: LD_INT 75
7595: PPUSH
7596: LD_INT 100
7598: PPUSH
7599: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
7603: LD_ADDR_VAR 0 3
7607: PUSH
7608: LD_EXP 4
7612: PPUSH
7613: LD_INT 25
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 72
7627: PPUSH
7628: LD_EXP 37
7632: PPUSH
7633: CALL_OW 74
7637: ST_TO_ADDR
// if sol then
7638: LD_VAR 0 3
7642: IFFALSE 7702
// if GetDistUnits ( JMM , sol ) < 10 then
7644: LD_EXP 37
7648: PPUSH
7649: LD_VAR 0 3
7653: PPUSH
7654: CALL_OW 296
7658: PUSH
7659: LD_INT 10
7661: LESS
7662: IFFALSE 7702
// begin if IsInUnit ( sol ) then
7664: LD_VAR 0 3
7668: PPUSH
7669: CALL_OW 310
7673: IFFALSE 7684
// ComExitVehicle ( sol ) ;
7675: LD_VAR 0 3
7679: PPUSH
7680: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
7684: LD_VAR 0 3
7688: PPUSH
7689: LD_VAR 0 4
7693: PUSH
7694: LD_INT 2
7696: ARRAY
7697: PPUSH
7698: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
7702: LD_INT 10
7704: PPUSH
7705: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
7709: LD_EXP 37
7713: PPUSH
7714: LD_INT 65
7716: PPUSH
7717: LD_INT 101
7719: PPUSH
7720: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
7724: LD_EXP 37
7728: PPUSH
7729: LD_INT 63
7731: PPUSH
7732: LD_INT 100
7734: PPUSH
7735: CALL_OW 178
// tmp := 0 0$0 ;
7739: LD_ADDR_VAR 0 5
7743: PUSH
7744: LD_INT 0
7746: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7747: LD_INT 35
7749: PPUSH
7750: CALL_OW 67
// tmp := tmp + 0 0$1 ;
7754: LD_ADDR_VAR 0 5
7758: PUSH
7759: LD_VAR 0 5
7763: PUSH
7764: LD_INT 35
7766: PLUS
7767: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
7768: LD_EXP 37
7772: PPUSH
7773: LD_INT 65
7775: PPUSH
7776: LD_INT 101
7778: PPUSH
7779: CALL_OW 307
7783: PUSH
7784: LD_VAR 0 5
7788: PUSH
7789: LD_INT 175
7791: GREATER
7792: OR
7793: IFFALSE 7747
// Say ( JMM , D2a-JMM-1 ) ;
7795: LD_EXP 37
7799: PPUSH
7800: LD_STRING D2a-JMM-1
7802: PPUSH
7803: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
7807: LD_EXP 48
7811: PPUSH
7812: LD_INT 66
7814: PPUSH
7815: LD_INT 103
7817: PPUSH
7818: CALL_OW 111
// tmp := 0 0$0 ;
7822: LD_ADDR_VAR 0 5
7826: PUSH
7827: LD_INT 0
7829: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7830: LD_INT 35
7832: PPUSH
7833: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
7837: LD_EXP 48
7841: PPUSH
7842: LD_INT 66
7844: PPUSH
7845: LD_INT 103
7847: PPUSH
7848: CALL_OW 307
7852: PUSH
7853: LD_VAR 0 5
7857: PUSH
7858: LD_INT 175
7860: GREATER
7861: OR
7862: IFFALSE 7830
// ComTurnUnit ( Walker , JMM ) ;
7864: LD_EXP 48
7868: PPUSH
7869: LD_EXP 37
7873: PPUSH
7874: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
7878: LD_EXP 48
7882: PPUSH
7883: LD_STRING D2a-Sci1-1
7885: PPUSH
7886: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
7890: LD_EXP 37
7894: PPUSH
7895: LD_EXP 48
7899: PPUSH
7900: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
7904: LD_EXP 37
7908: PPUSH
7909: LD_STRING D2a-JMM-2
7911: PPUSH
7912: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
7916: LD_EXP 48
7920: PPUSH
7921: LD_STRING D2a-Sci1-2
7923: PPUSH
7924: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
7928: LD_EXP 37
7932: PPUSH
7933: LD_STRING D2a-JMM-3
7935: PPUSH
7936: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
7940: LD_EXP 48
7944: PPUSH
7945: LD_STRING D2a-Sci1-3
7947: PPUSH
7948: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
7952: LD_ADDR_EXP 4
7956: PUSH
7957: LD_EXP 4
7961: PUSH
7962: LD_EXP 47
7966: PUSH
7967: LD_EXP 48
7971: PUSH
7972: LD_EXP 49
7976: PUSH
7977: LD_EXP 50
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: ADD
7988: ST_TO_ADDR
// for i in jmm_units do
7989: LD_ADDR_VAR 0 1
7993: PUSH
7994: LD_EXP 4
7998: PUSH
7999: FOR_IN
8000: IFFALSE 8025
// if not IsInUnit ( i ) then
8002: LD_VAR 0 1
8006: PPUSH
8007: CALL_OW 310
8011: NOT
8012: IFFALSE 8023
// ComFree ( i ) ;
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 139
8023: GO 7999
8025: POP
8026: POP
// Video ( false ) ;
8027: LD_INT 0
8029: PPUSH
8030: CALL 74460 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8034: LD_STRING MSolar1
8036: PPUSH
8037: CALL_OW 337
// jmm_on_west := true ;
8041: LD_ADDR_EXP 5
8045: PUSH
8046: LD_INT 1
8048: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8049: LD_INT 1050
8051: PPUSH
8052: CALL_OW 67
// frank_can_return := true ;
8056: LD_ADDR_EXP 12
8060: PUSH
8061: LD_INT 1
8063: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8064: LD_INT 6300
8066: PPUSH
8067: LD_INT 8400
8069: PPUSH
8070: CALL_OW 12
8074: PPUSH
8075: CALL_OW 67
// send_spec_patrol := true ;
8079: LD_ADDR_EXP 30
8083: PUSH
8084: LD_INT 1
8086: ST_TO_ADDR
// end ;
8087: PPOPN 5
8089: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8090: LD_INT 22
8092: PUSH
8093: LD_INT 1
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: LD_INT 34
8102: PUSH
8103: LD_INT 51
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PUSH
8110: LD_INT 92
8112: PUSH
8113: LD_INT 63
8115: PUSH
8116: LD_INT 100
8118: PUSH
8119: LD_INT 5
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: PPUSH
8136: CALL_OW 69
8140: PUSH
8141: LD_EXP 5
8145: NOT
8146: AND
8147: IFFALSE 8260
8149: GO 8151
8151: DISABLE
8152: LD_INT 0
8154: PPUSH
8155: PPUSH
// begin enable ;
8156: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8157: LD_ADDR_VAR 0 2
8161: PUSH
8162: LD_INT 22
8164: PUSH
8165: LD_INT 1
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: PUSH
8172: LD_INT 34
8174: PUSH
8175: LD_INT 51
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: LD_INT 92
8184: PUSH
8185: LD_INT 63
8187: PUSH
8188: LD_INT 100
8190: PUSH
8191: LD_INT 5
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: LIST
8204: PUSH
8205: EMPTY
8206: LIST
8207: PPUSH
8208: CALL_OW 69
8212: ST_TO_ADDR
// if not filter then
8213: LD_VAR 0 2
8217: NOT
8218: IFFALSE 8222
// exit ;
8220: GO 8260
// for i in filter do
8222: LD_ADDR_VAR 0 1
8226: PUSH
8227: LD_VAR 0 2
8231: PUSH
8232: FOR_IN
8233: IFFALSE 8258
// begin SetFuel ( i , 0 ) ;
8235: LD_VAR 0 1
8239: PPUSH
8240: LD_INT 0
8242: PPUSH
8243: CALL_OW 240
// ComStop ( i ) ;
8247: LD_VAR 0 1
8251: PPUSH
8252: CALL_OW 141
// end ;
8256: GO 8232
8258: POP
8259: POP
// end ;
8260: PPOPN 2
8262: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8263: LD_EXP 30
8267: IFFALSE 9393
8269: GO 8271
8271: DISABLE
8272: LD_INT 0
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
// begin if not ru_spec_patrol then
8281: LD_EXP 54
8285: NOT
8286: IFFALSE 8290
// exit ;
8288: GO 9393
// dead1 := false ;
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_INT 0
8297: ST_TO_ADDR
// dead2 := false ;
8298: LD_ADDR_VAR 0 2
8302: PUSH
8303: LD_INT 0
8305: ST_TO_ADDR
// inarea1 := false ;
8306: LD_ADDR_VAR 0 3
8310: PUSH
8311: LD_INT 0
8313: ST_TO_ADDR
// inarea2 := false ;
8314: LD_ADDR_VAR 0 4
8318: PUSH
8319: LD_INT 0
8321: ST_TO_ADDR
// tmp := [ ] ;
8322: LD_ADDR_VAR 0 6
8326: PUSH
8327: EMPTY
8328: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8329: LD_EXP 54
8333: PPUSH
8334: LD_INT 75
8336: PPUSH
8337: LD_INT 101
8339: PPUSH
8340: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8344: LD_INT 35
8346: PPUSH
8347: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8351: LD_INT 1
8353: PPUSH
8354: LD_EXP 54
8358: PUSH
8359: LD_INT 1
8361: ARRAY
8362: PPUSH
8363: CALL_OW 292
8367: PUSH
8368: LD_EXP 54
8372: PPUSH
8373: LD_INT 92
8375: PUSH
8376: LD_INT 75
8378: PUSH
8379: LD_INT 101
8381: PUSH
8382: LD_INT 4
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: PPUSH
8391: CALL_OW 72
8395: OR
8396: IFFALSE 8344
// ComStop ( ru_spec_patrol ) ;
8398: LD_EXP 54
8402: PPUSH
8403: CALL_OW 141
// Wait ( 0 0$02 ) ;
8407: LD_INT 70
8409: PPUSH
8410: CALL_OW 67
// DialogueOn ;
8414: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8418: LD_EXP 54
8422: PUSH
8423: LD_INT 1
8425: ARRAY
8426: PPUSH
8427: LD_STRING D8-Rus1-1
8429: PPUSH
8430: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8434: LD_EXP 37
8438: PPUSH
8439: LD_STRING D8-JMM-1
8441: PPUSH
8442: CALL_OW 88
// DialogueOff ;
8446: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8450: LD_EXP 54
8454: PPUSH
8455: LD_INT 13
8457: PPUSH
8458: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8462: LD_INT 35
8464: PPUSH
8465: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8469: LD_VAR 0 1
8473: NOT
8474: PUSH
8475: LD_EXP 54
8479: PUSH
8480: LD_INT 1
8482: ARRAY
8483: PPUSH
8484: CALL_OW 301
8488: AND
8489: IFFALSE 8499
// dead1 := true ;
8491: LD_ADDR_VAR 0 1
8495: PUSH
8496: LD_INT 1
8498: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8499: LD_VAR 0 2
8503: NOT
8504: PUSH
8505: LD_EXP 54
8509: PUSH
8510: LD_INT 2
8512: ARRAY
8513: PPUSH
8514: CALL_OW 301
8518: AND
8519: IFFALSE 8529
// dead2 := true ;
8521: LD_ADDR_VAR 0 2
8525: PUSH
8526: LD_INT 1
8528: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8529: LD_VAR 0 3
8533: NOT
8534: PUSH
8535: LD_EXP 54
8539: PUSH
8540: LD_INT 1
8542: ARRAY
8543: PPUSH
8544: LD_INT 14
8546: PPUSH
8547: CALL_OW 308
8551: AND
8552: IFFALSE 8562
// inarea1 := true ;
8554: LD_ADDR_VAR 0 3
8558: PUSH
8559: LD_INT 1
8561: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
8562: LD_VAR 0 4
8566: NOT
8567: PUSH
8568: LD_EXP 54
8572: PUSH
8573: LD_INT 2
8575: ARRAY
8576: PPUSH
8577: LD_INT 14
8579: PPUSH
8580: CALL_OW 308
8584: AND
8585: IFFALSE 8595
// inarea2 := true ;
8587: LD_ADDR_VAR 0 4
8591: PUSH
8592: LD_INT 1
8594: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
8595: LD_VAR 0 1
8599: PUSH
8600: LD_VAR 0 2
8604: AND
8605: PUSH
8606: LD_VAR 0 1
8610: PUSH
8611: LD_VAR 0 4
8615: AND
8616: OR
8617: PUSH
8618: LD_VAR 0 2
8622: PUSH
8623: LD_VAR 0 3
8627: AND
8628: OR
8629: PUSH
8630: LD_VAR 0 3
8634: PUSH
8635: LD_VAR 0 4
8639: AND
8640: OR
8641: IFFALSE 8462
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
8643: LD_VAR 0 3
8647: PUSH
8648: LD_VAR 0 4
8652: AND
8653: PUSH
8654: LD_VAR 0 1
8658: PUSH
8659: LD_VAR 0 4
8663: AND
8664: OR
8665: PUSH
8666: LD_VAR 0 2
8670: PUSH
8671: LD_VAR 0 3
8675: AND
8676: OR
8677: IFFALSE 9373
// begin prepare_siege := true ;
8679: LD_ADDR_EXP 31
8683: PUSH
8684: LD_INT 1
8686: ST_TO_ADDR
// DialogueOn ;
8687: CALL_OW 6
// if ( inarea1 and inarea2 ) then
8691: LD_VAR 0 3
8695: PUSH
8696: LD_VAR 0 4
8700: AND
8701: IFFALSE 8717
// Say ( JMM , D8b-JMM-1a ) else
8703: LD_EXP 37
8707: PPUSH
8708: LD_STRING D8b-JMM-1a
8710: PPUSH
8711: CALL_OW 88
8715: GO 8729
// Say ( JMM , D8b-JMM-1 ) ;
8717: LD_EXP 37
8721: PPUSH
8722: LD_STRING D8b-JMM-1
8724: PPUSH
8725: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
8729: LD_EXP 4
8733: PPUSH
8734: LD_INT 26
8736: PUSH
8737: LD_INT 1
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PPUSH
8744: CALL_OW 72
8748: PUSH
8749: LD_EXP 38
8753: PUSH
8754: LD_EXP 39
8758: PUSH
8759: LD_EXP 48
8763: PUSH
8764: LD_EXP 51
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: DIFF
8775: PPUSH
8776: LD_STRING D8b-Sol1-1
8778: PPUSH
8779: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
8783: LD_EXP 39
8787: PUSH
8788: LD_EXP 39
8792: PUSH
8793: LD_EXP 4
8797: IN
8798: AND
8799: IFFALSE 8815
// Say ( Cyrus , D8b-Cyrus-1 ) else
8801: LD_EXP 39
8805: PPUSH
8806: LD_STRING D8b-Cyrus-1
8808: PPUSH
8809: CALL_OW 88
8813: GO 8827
// Say ( JMM , D8b-JMM-1a ) ;
8815: LD_EXP 37
8819: PPUSH
8820: LD_STRING D8b-JMM-1a
8822: PPUSH
8823: CALL_OW 88
// if Lisa and Lisa in jmm_units then
8827: LD_EXP 40
8831: PUSH
8832: LD_EXP 40
8836: PUSH
8837: LD_EXP 4
8841: IN
8842: AND
8843: IFFALSE 8857
// Say ( Lisa , D8b-Lisa-2 ) ;
8845: LD_EXP 40
8849: PPUSH
8850: LD_STRING D8b-Lisa-2
8852: PPUSH
8853: CALL_OW 88
// if Bobby and Bobby in jmm_units then
8857: LD_EXP 38
8861: PUSH
8862: LD_EXP 38
8866: PUSH
8867: LD_EXP 4
8871: IN
8872: AND
8873: IFFALSE 8889
// Say ( Bobby , D8b-Bobby-1 ) else
8875: LD_EXP 38
8879: PPUSH
8880: LD_STRING D8b-Bobby-1
8882: PPUSH
8883: CALL_OW 88
8887: GO 8949
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
8889: LD_ADDR_VAR 0 5
8893: PUSH
8894: LD_EXP 4
8898: PPUSH
8899: LD_INT 26
8901: PUSH
8902: LD_INT 1
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PPUSH
8909: CALL_OW 72
8913: PUSH
8914: LD_EXP 38
8918: PUSH
8919: LD_EXP 39
8923: PUSH
8924: LD_EXP 48
8928: PUSH
8929: LD_EXP 51
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: DIFF
8940: PPUSH
8941: LD_STRING D8b-Sol2-1
8943: PPUSH
8944: CALL 585 0 2
8948: ST_TO_ADDR
// DialogueOff ;
8949: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
8953: LD_EXP 39
8957: PUSH
8958: LD_EXP 39
8962: PUSH
8963: LD_EXP 4
8967: IN
8968: AND
8969: IFFALSE 8994
// tmp := Insert ( tmp , 1 , Cyrus ) ;
8971: LD_ADDR_VAR 0 6
8975: PUSH
8976: LD_VAR 0 6
8980: PPUSH
8981: LD_INT 1
8983: PPUSH
8984: LD_EXP 39
8988: PPUSH
8989: CALL_OW 2
8993: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
8994: LD_EXP 38
8998: PUSH
8999: LD_EXP 38
9003: PUSH
9004: LD_EXP 4
9008: IN
9009: AND
9010: IFFALSE 9035
// tmp := Insert ( tmp , 1 , Bobby ) ;
9012: LD_ADDR_VAR 0 6
9016: PUSH
9017: LD_VAR 0 6
9021: PPUSH
9022: LD_INT 1
9024: PPUSH
9025: LD_EXP 38
9029: PPUSH
9030: CALL_OW 2
9034: ST_TO_ADDR
// if sol then
9035: LD_VAR 0 5
9039: IFFALSE 9064
// tmp := Insert ( tmp , 1 , sol ) ;
9041: LD_ADDR_VAR 0 6
9045: PUSH
9046: LD_VAR 0 6
9050: PPUSH
9051: LD_INT 1
9053: PPUSH
9054: LD_VAR 0 5
9058: PPUSH
9059: CALL_OW 2
9063: ST_TO_ADDR
// if tmp then
9064: LD_VAR 0 6
9068: IFFALSE 9332
// begin SetSide ( tmp , 8 ) ;
9070: LD_VAR 0 6
9074: PPUSH
9075: LD_INT 8
9077: PPUSH
9078: CALL_OW 235
// for i in tmp do
9082: LD_ADDR_VAR 0 7
9086: PUSH
9087: LD_VAR 0 6
9091: PUSH
9092: FOR_IN
9093: IFFALSE 9184
// begin if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_building then
9095: LD_VAR 0 7
9099: PPUSH
9100: CALL_OW 310
9104: PUSH
9105: LD_VAR 0 7
9109: PPUSH
9110: CALL_OW 310
9114: PPUSH
9115: CALL_OW 266
9119: PUSH
9120: LD_INT 3
9122: EQUAL
9123: AND
9124: IFFALSE 9135
// ComExitBuilding ( i ) ;
9126: LD_VAR 0 7
9130: PPUSH
9131: CALL_OW 122
// if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_vehicle then
9135: LD_VAR 0 7
9139: PPUSH
9140: CALL_OW 310
9144: PUSH
9145: LD_VAR 0 7
9149: PPUSH
9150: CALL_OW 310
9154: PPUSH
9155: CALL_OW 266
9159: PUSH
9160: LD_INT 2
9162: EQUAL
9163: AND
9164: IFFALSE 9175
// ComExitVehicle ( i ) ;
9166: LD_VAR 0 7
9170: PPUSH
9171: CALL_OW 121
// wait ( 0 0$1 ) ;
9175: LD_INT 35
9177: PPUSH
9178: CALL_OW 67
// end ;
9182: GO 9092
9184: POP
9185: POP
// ComFree ( tmp ) ;
9186: LD_VAR 0 6
9190: PPUSH
9191: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9195: LD_VAR 0 6
9199: PPUSH
9200: LD_INT 15
9202: PPUSH
9203: CALL_OW 173
// AddComHold ( tmp ) ;
9207: LD_VAR 0 6
9211: PPUSH
9212: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9216: LD_INT 35
9218: PPUSH
9219: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9223: LD_VAR 0 6
9227: PUSH
9228: LD_INT 1
9230: ARRAY
9231: PPUSH
9232: CALL_OW 314
9236: NOT
9237: IFFALSE 9251
// ComMoveToArea ( tmp , cyrusEscape ) ;
9239: LD_VAR 0 6
9243: PPUSH
9244: LD_INT 15
9246: PPUSH
9247: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9251: LD_VAR 0 6
9255: PUSH
9256: LD_INT 1
9258: ARRAY
9259: PPUSH
9260: LD_INT 15
9262: PPUSH
9263: CALL_OW 308
9267: IFFALSE 9322
// begin RemoveUnit ( tmp [ 1 ] ) ;
9269: LD_VAR 0 6
9273: PUSH
9274: LD_INT 1
9276: ARRAY
9277: PPUSH
9278: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9282: LD_ADDR_EXP 4
9286: PUSH
9287: LD_EXP 4
9291: PUSH
9292: LD_VAR 0 6
9296: PUSH
9297: LD_INT 1
9299: ARRAY
9300: DIFF
9301: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9302: LD_ADDR_VAR 0 6
9306: PUSH
9307: LD_VAR 0 6
9311: PUSH
9312: LD_VAR 0 6
9316: PUSH
9317: LD_INT 1
9319: ARRAY
9320: DIFF
9321: ST_TO_ADDR
// end ; until tmp = 0 ;
9322: LD_VAR 0 6
9326: PUSH
9327: LD_INT 0
9329: EQUAL
9330: IFFALSE 9216
// end ; wait ( 0 0$30 ) ;
9332: LD_INT 1050
9334: PPUSH
9335: CALL_OW 67
// if ru_spec_patrol then
9339: LD_EXP 54
9343: IFFALSE 9371
// for i in ru_spec_patrol do
9345: LD_ADDR_VAR 0 7
9349: PUSH
9350: LD_EXP 54
9354: PUSH
9355: FOR_IN
9356: IFFALSE 9369
// RemoveUnit ( i ) ;
9358: LD_VAR 0 7
9362: PPUSH
9363: CALL_OW 64
9367: GO 9355
9369: POP
9370: POP
// end else
9371: GO 9393
// begin prepare_siege := false ;
9373: LD_ADDR_EXP 31
9377: PUSH
9378: LD_INT 0
9380: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9381: LD_EXP 37
9385: PPUSH
9386: LD_STRING D8a-JMM-1
9388: PPUSH
9389: CALL_OW 88
// end ; end ;
9393: PPOPN 7
9395: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9396: LD_EXP 12
9400: IFFALSE 10668
9402: GO 9404
9404: DISABLE
9405: LD_INT 0
9407: PPUSH
9408: PPUSH
9409: PPUSH
// begin uc_side := 8 ;
9410: LD_ADDR_OWVAR 20
9414: PUSH
9415: LD_INT 8
9417: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9418: LD_ADDR_VAR 0 3
9422: PUSH
9423: LD_INT 59
9425: PUSH
9426: LD_INT 71
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 122
9435: PUSH
9436: LD_INT 117
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9447: LD_ADDR_EXP 51
9451: PUSH
9452: LD_STRING Frank
9454: PPUSH
9455: LD_INT 0
9457: PPUSH
9458: LD_STRING 
9460: PPUSH
9461: CALL 37807 0 3
9465: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9466: LD_ADDR_VAR 0 1
9470: PUSH
9471: LD_INT 1
9473: PPUSH
9474: LD_INT 2
9476: PPUSH
9477: CALL_OW 12
9481: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9482: LD_EXP 51
9486: PPUSH
9487: LD_VAR 0 3
9491: PUSH
9492: LD_VAR 0 1
9496: ARRAY
9497: PUSH
9498: LD_INT 1
9500: ARRAY
9501: PPUSH
9502: LD_VAR 0 3
9506: PUSH
9507: LD_VAR 0 1
9511: ARRAY
9512: PUSH
9513: LD_INT 2
9515: ARRAY
9516: PPUSH
9517: LD_INT 0
9519: PPUSH
9520: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9524: LD_EXP 51
9528: PPUSH
9529: LD_INT 1
9531: PPUSH
9532: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9536: LD_INT 35
9538: PPUSH
9539: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9543: LD_EXP 51
9547: PPUSH
9548: LD_EXP 37
9552: PPUSH
9553: CALL_OW 296
9557: PUSH
9558: LD_INT 8
9560: LESS
9561: PUSH
9562: LD_EXP 51
9566: PPUSH
9567: CALL_OW 256
9571: PUSH
9572: LD_INT 250
9574: GREATER
9575: AND
9576: IFFALSE 9536
// Video ( true ) ;
9578: LD_INT 1
9580: PPUSH
9581: CALL 74460 0 1
// CenterOnUnits ( JMM ) ;
9585: LD_EXP 37
9589: PPUSH
9590: CALL_OW 85
// if IsInUnit ( JMM ) then
9594: LD_EXP 37
9598: PPUSH
9599: CALL_OW 310
9603: IFFALSE 9614
// ComFree ( JMM ) ;
9605: LD_EXP 37
9609: PPUSH
9610: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
9614: LD_EXP 37
9618: PPUSH
9619: LD_EXP 51
9623: PPUSH
9624: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
9628: LD_EXP 51
9632: PPUSH
9633: LD_EXP 37
9637: PPUSH
9638: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
9642: LD_EXP 37
9646: PPUSH
9647: LD_STRING D6-JMM-1
9649: PPUSH
9650: CALL_OW 88
// p := 0 ;
9654: LD_ADDR_VAR 0 2
9658: PUSH
9659: LD_INT 0
9661: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9662: LD_INT 35
9664: PPUSH
9665: CALL_OW 67
// p := p + 1 ;
9669: LD_ADDR_VAR 0 2
9673: PUSH
9674: LD_VAR 0 2
9678: PUSH
9679: LD_INT 1
9681: PLUS
9682: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
9683: LD_EXP 37
9687: PPUSH
9688: LD_EXP 51
9692: PPUSH
9693: CALL_OW 296
9697: PUSH
9698: LD_INT 8
9700: LESS
9701: PUSH
9702: LD_VAR 0 2
9706: PUSH
9707: LD_INT 7
9709: GREATER
9710: OR
9711: IFFALSE 9662
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
9713: LD_EXP 40
9717: PUSH
9718: LD_EXP 40
9722: PPUSH
9723: LD_EXP 51
9727: PPUSH
9728: CALL_OW 296
9732: PUSH
9733: LD_INT 20
9735: LESS
9736: AND
9737: PUSH
9738: LD_EXP 40
9742: PUSH
9743: LD_EXP 4
9747: IN
9748: AND
9749: IFFALSE 9774
// begin ComFree ( Lisa ) ;
9751: LD_EXP 40
9755: PPUSH
9756: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
9760: LD_EXP 40
9764: PPUSH
9765: LD_EXP 51
9769: PPUSH
9770: CALL_OW 172
// end ; if Lynch then
9774: LD_EXP 47
9778: IFFALSE 9803
// begin ComFree ( Lynch ) ;
9780: LD_EXP 47
9784: PPUSH
9785: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
9789: LD_EXP 47
9793: PPUSH
9794: LD_EXP 51
9798: PPUSH
9799: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
9803: LD_EXP 37
9807: PPUSH
9808: LD_EXP 51
9812: PPUSH
9813: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
9817: LD_EXP 51
9821: PPUSH
9822: LD_EXP 37
9826: PPUSH
9827: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
9831: LD_EXP 51
9835: PPUSH
9836: LD_STRING D6-Frank-1
9838: PPUSH
9839: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
9843: LD_INT 69
9845: PPUSH
9846: LD_INT 20
9848: PPUSH
9849: LD_INT 1
9851: PPUSH
9852: LD_INT 20
9854: NEG
9855: PPUSH
9856: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
9860: LD_INT 69
9862: PPUSH
9863: LD_INT 20
9865: PPUSH
9866: LD_INT 1
9868: PPUSH
9869: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
9873: LD_INT 190
9875: PPUSH
9876: LD_INT 31
9878: PPUSH
9879: LD_INT 1
9881: PPUSH
9882: LD_INT 20
9884: NEG
9885: PPUSH
9886: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
9890: LD_INT 190
9892: PPUSH
9893: LD_INT 31
9895: PPUSH
9896: LD_INT 1
9898: PPUSH
9899: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
9903: LD_INT 69
9905: PPUSH
9906: LD_INT 20
9908: PPUSH
9909: CALL_OW 84
// Wait ( 0 0$02 ) ;
9913: LD_INT 70
9915: PPUSH
9916: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
9920: LD_EXP 37
9924: PPUSH
9925: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
9929: LD_EXP 40
9933: PUSH
9934: LD_EXP 40
9938: PPUSH
9939: LD_EXP 51
9943: PPUSH
9944: CALL_OW 296
9948: PUSH
9949: LD_INT 20
9951: LESS
9952: AND
9953: PUSH
9954: LD_EXP 40
9958: PPUSH
9959: CALL_OW 302
9963: AND
9964: PUSH
9965: LD_EXP 40
9969: PUSH
9970: LD_EXP 4
9974: IN
9975: AND
9976: IFFALSE 10098
// begin ComFree ( Lisa ) ;
9978: LD_EXP 40
9982: PPUSH
9983: CALL_OW 139
// p := 0 ;
9987: LD_ADDR_VAR 0 2
9991: PUSH
9992: LD_INT 0
9994: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9995: LD_INT 35
9997: PPUSH
9998: CALL_OW 67
// p := p + 1 ;
10002: LD_ADDR_VAR 0 2
10006: PUSH
10007: LD_VAR 0 2
10011: PUSH
10012: LD_INT 1
10014: PLUS
10015: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10016: LD_EXP 40
10020: PPUSH
10021: LD_EXP 51
10025: PPUSH
10026: CALL_OW 296
10030: PUSH
10031: LD_INT 7
10033: LESS
10034: PUSH
10035: LD_VAR 0 2
10039: PUSH
10040: LD_INT 7
10042: GREATER
10043: OR
10044: IFFALSE 9995
// Say ( Lisa , D6-Lisa-1 ) ;
10046: LD_EXP 40
10050: PPUSH
10051: LD_STRING D6-Lisa-1
10053: PPUSH
10054: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10058: LD_EXP 40
10062: PPUSH
10063: LD_EXP 51
10067: PPUSH
10068: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10072: LD_EXP 51
10076: PPUSH
10077: LD_EXP 40
10081: PPUSH
10082: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10086: LD_EXP 51
10090: PPUSH
10091: LD_STRING D6-Frank-2
10093: PPUSH
10094: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10098: LD_EXP 47
10102: PUSH
10103: LD_EXP 47
10107: PPUSH
10108: LD_EXP 51
10112: PPUSH
10113: CALL_OW 296
10117: PUSH
10118: LD_INT 20
10120: LESS
10121: AND
10122: PUSH
10123: LD_EXP 47
10127: PPUSH
10128: CALL_OW 302
10132: AND
10133: IFFALSE 10326
// begin ComTurnUnit ( Lynch , JMM ) ;
10135: LD_EXP 47
10139: PPUSH
10140: LD_EXP 37
10144: PPUSH
10145: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10149: LD_EXP 51
10153: PPUSH
10154: LD_EXP 37
10158: PPUSH
10159: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10163: LD_EXP 47
10167: PPUSH
10168: LD_STRING D6-Sol1-2
10170: PPUSH
10171: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10175: LD_EXP 37
10179: PPUSH
10180: LD_STRING D6-JMM-2
10182: PPUSH
10183: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10187: LD_EXP 51
10191: PPUSH
10192: LD_STRING D6-Frank-3
10194: PPUSH
10195: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10199: LD_EXP 37
10203: PPUSH
10204: LD_STRING D6-JMM-3
10206: PPUSH
10207: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10211: LD_EXP 51
10215: PPUSH
10216: LD_STRING D6-Frank-4
10218: PPUSH
10219: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10223: LD_EXP 51
10227: PPUSH
10228: LD_STRING D6-Frank-4a
10230: PPUSH
10231: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10235: LD_EXP 37
10239: PPUSH
10240: LD_STRING D6-JMM-4
10242: PPUSH
10243: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10247: LD_EXP 51
10251: PPUSH
10252: LD_STRING D6-Frank-5
10254: PPUSH
10255: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10259: LD_EXP 40
10263: PUSH
10264: LD_EXP 40
10268: PPUSH
10269: CALL_OW 302
10273: AND
10274: PUSH
10275: LD_EXP 40
10279: PUSH
10280: LD_EXP 4
10284: IN
10285: AND
10286: IFFALSE 10300
// Say ( Lisa , D6-Lisa-5 ) ;
10288: LD_EXP 40
10292: PPUSH
10293: LD_STRING D6-Lisa-5
10295: PPUSH
10296: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10300: LD_EXP 51
10304: PPUSH
10305: LD_STRING D6-Frank-6
10307: PPUSH
10308: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10312: LD_EXP 37
10316: PPUSH
10317: LD_STRING D6-JMM-6
10319: PPUSH
10320: CALL_OW 88
// end else
10324: GO 10453
// begin ComTurnUnit ( Frank , JMM ) ;
10326: LD_EXP 51
10330: PPUSH
10331: LD_EXP 37
10335: PPUSH
10336: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10340: LD_EXP 51
10344: PPUSH
10345: LD_STRING D6-Frank-4
10347: PPUSH
10348: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10352: LD_EXP 51
10356: PPUSH
10357: LD_STRING D6-Frank-4a
10359: PPUSH
10360: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10364: LD_EXP 37
10368: PPUSH
10369: LD_STRING D6-JMM-4
10371: PPUSH
10372: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10376: LD_EXP 51
10380: PPUSH
10381: LD_STRING D6-Frank-5
10383: PPUSH
10384: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10388: LD_EXP 40
10392: PUSH
10393: LD_EXP 40
10397: PPUSH
10398: CALL_OW 302
10402: AND
10403: PUSH
10404: LD_EXP 40
10408: PUSH
10409: LD_EXP 4
10413: IN
10414: AND
10415: IFFALSE 10429
// Say ( Lisa , D6-Lisa-5 ) ;
10417: LD_EXP 40
10421: PPUSH
10422: LD_STRING D6-Lisa-5
10424: PPUSH
10425: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10429: LD_EXP 51
10433: PPUSH
10434: LD_STRING D6-Frank-6
10436: PPUSH
10437: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10441: LD_EXP 37
10445: PPUSH
10446: LD_STRING D6-JMM-6
10448: PPUSH
10449: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10453: LD_STRING Q1
10455: PPUSH
10456: CALL_OW 97
10460: PUSH
10461: LD_INT 1
10463: DOUBLE
10464: EQUAL
10465: IFTRUE 10469
10467: GO 10480
10469: POP
// frank_send_to_scout := true ; 2 :
10470: LD_ADDR_EXP 15
10474: PUSH
10475: LD_INT 1
10477: ST_TO_ADDR
10478: GO 10500
10480: LD_INT 2
10482: DOUBLE
10483: EQUAL
10484: IFTRUE 10488
10486: GO 10499
10488: POP
// frank_send_to_scout := false ; end ;
10489: LD_ADDR_EXP 15
10493: PUSH
10494: LD_INT 0
10496: ST_TO_ADDR
10497: GO 10500
10499: POP
// Video ( false ) ;
10500: LD_INT 0
10502: PPUSH
10503: CALL 74460 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10507: LD_EXP 37
10511: PUSH
10512: LD_EXP 40
10516: PUSH
10517: LD_EXP 47
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: LIST
10526: PPUSH
10527: CALL_OW 139
// if frank_send_to_scout then
10531: LD_EXP 15
10535: IFFALSE 10589
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10537: LD_EXP 51
10541: PPUSH
10542: LD_INT 15
10544: PPUSH
10545: CALL_OW 113
// wait ( 0 0$01 ) ;
10549: LD_INT 35
10551: PPUSH
10552: CALL_OW 67
// until not See ( 1 , Frank ) ;
10556: LD_INT 1
10558: PPUSH
10559: LD_EXP 51
10563: PPUSH
10564: CALL_OW 292
10568: NOT
10569: IFFALSE 10537
// wait ( 0 0$02 ) ;
10571: LD_INT 70
10573: PPUSH
10574: CALL_OW 67
// RemoveUnit ( Frank ) ;
10578: LD_EXP 51
10582: PPUSH
10583: CALL_OW 64
// end else
10587: GO 10601
// SetSide ( Frank , 1 ) ;
10589: LD_EXP 51
10593: PPUSH
10594: LD_INT 1
10596: PPUSH
10597: CALL_OW 235
// send_attack_on_cornel_base := true ;
10601: LD_ADDR_EXP 26
10605: PUSH
10606: LD_INT 1
10608: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10609: LD_INT 35
10611: PPUSH
10612: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
10616: LD_ADDR_EXP 29
10620: PUSH
10621: LD_EXP 29
10625: PPUSH
10626: LD_STRING -
10628: PPUSH
10629: CALL 1077 0 2
10633: ST_TO_ADDR
// if debug then
10634: LD_EXP 1
10638: IFFALSE 10650
// debug_strings := time_to_prepare ;
10640: LD_ADDR_OWVAR 48
10644: PUSH
10645: LD_EXP 29
10649: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
10650: LD_EXP 29
10654: PUSH
10655: LD_INT 0
10657: EQUAL
10658: IFFALSE 10609
// cornel_prepared := true ;
10660: LD_ADDR_EXP 11
10664: PUSH
10665: LD_INT 1
10667: ST_TO_ADDR
// end ;
10668: PPOPN 3
10670: END
// every 0 0$01 trigger cornel_prepared do
10671: LD_EXP 11
10675: IFFALSE 10983
10677: GO 10679
10679: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
10680: LD_EXP 44
10684: PPUSH
10685: LD_STRING D3-Corn-1
10687: PPUSH
10688: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
10692: LD_STRING MOutWait
10694: PPUSH
10695: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
10699: LD_INT 35
10701: PPUSH
10702: CALL_OW 67
// until cornel_counter = 0 ;
10706: LD_EXP 10
10710: PUSH
10711: LD_INT 0
10713: EQUAL
10714: IFFALSE 10699
// SayRadio ( Cornel , D3a-Corn-1 ) ;
10716: LD_EXP 44
10720: PPUSH
10721: LD_STRING D3a-Corn-1
10723: PPUSH
10724: CALL_OW 94
// if IsOk ( Cornel ) then
10728: LD_EXP 44
10732: PPUSH
10733: CALL_OW 302
10737: IFFALSE 10751
// Say ( JMM , D3a-JMM-1 ) ;
10739: LD_EXP 37
10743: PPUSH
10744: LD_STRING D3a-JMM-1
10746: PPUSH
10747: CALL_OW 88
// end_mission_allowed := true ;
10751: LD_ADDR_EXP 21
10755: PUSH
10756: LD_INT 1
10758: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
10759: LD_STRING M2
10761: PPUSH
10762: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
10766: LD_INT 9
10768: PPUSH
10769: LD_INT 1
10771: PPUSH
10772: CALL_OW 424
// Wait ( 0 0$05 ) ;
10776: LD_INT 175
10778: PPUSH
10779: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
10783: LD_EXP 44
10787: PPUSH
10788: LD_STRING D3a-Corn-2
10790: PPUSH
10791: CALL_OW 94
// cornel_attack := true ;
10795: LD_ADDR_EXP 9
10799: PUSH
10800: LD_INT 1
10802: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
10803: LD_INT 105
10805: PPUSH
10806: CALL_OW 67
// AddMoreTanks ( ) ;
10810: CALL 4940 0 0
// if frank_send_to_scout then
10814: LD_EXP 15
10818: IFFALSE 10983
// begin InitHc ;
10820: CALL_OW 19
// InitUc ;
10824: CALL_OW 18
// uc_side := 8 ;
10828: LD_ADDR_OWVAR 20
10832: PUSH
10833: LD_INT 8
10835: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
10836: LD_ADDR_EXP 51
10840: PUSH
10841: LD_STRING Frank
10843: PPUSH
10844: LD_INT 0
10846: PPUSH
10847: LD_STRING 
10849: PPUSH
10850: CALL 37807 0 3
10854: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
10855: LD_EXP 51
10859: PPUSH
10860: LD_INT 6
10862: PPUSH
10863: LD_INT 9
10865: PPUSH
10866: LD_INT 0
10868: PPUSH
10869: CALL_OW 48
// ComCrawl ( Frank ) ;
10873: LD_EXP 51
10877: PPUSH
10878: CALL_OW 137
// repeat wait ( 10 ) ;
10882: LD_INT 10
10884: PPUSH
10885: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
10889: LD_EXP 37
10893: PPUSH
10894: LD_EXP 51
10898: PPUSH
10899: CALL_OW 296
10903: PUSH
10904: LD_INT 9
10906: LESS
10907: PUSH
10908: LD_INT 9
10910: PPUSH
10911: LD_INT 22
10913: PUSH
10914: LD_INT 1
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PPUSH
10921: CALL_OW 70
10925: OR
10926: IFFALSE 10882
// if IsDead ( Frank ) then
10928: LD_EXP 51
10932: PPUSH
10933: CALL_OW 301
10937: IFFALSE 10941
// exit ;
10939: GO 10983
// CenterOnUnits ( Frank ) ;
10941: LD_EXP 51
10945: PPUSH
10946: CALL_OW 85
// SetSide ( Frank , 1 ) ;
10950: LD_EXP 51
10954: PPUSH
10955: LD_INT 1
10957: PPUSH
10958: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
10962: LD_EXP 51
10966: PPUSH
10967: LD_STRING D6a-Frank-1
10969: PPUSH
10970: CALL_OW 88
// ComWalk ( Frank ) ;
10974: LD_EXP 51
10978: PPUSH
10979: CALL_OW 138
// end ; end ;
10983: END
// every 0 0$01 trigger solar_builded do
10984: LD_EXP 14
10988: IFFALSE 11092
10990: GO 10992
10992: DISABLE
// begin Wait ( 0 0$02 ) ;
10993: LD_INT 70
10995: PPUSH
10996: CALL_OW 67
// DialogueOn ;
11000: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11004: LD_EXP 37
11008: PPUSH
11009: LD_STRING D2b-JMM-1
11011: PPUSH
11012: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11016: LD_EXP 48
11020: PUSH
11021: LD_EXP 48
11025: PPUSH
11026: CALL_OW 302
11030: AND
11031: IFFALSE 11081
// begin Say ( Walker , D2b-Sci1-1 ) ;
11033: LD_EXP 48
11037: PPUSH
11038: LD_STRING D2b-Sci1-1
11040: PPUSH
11041: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11045: LD_EXP 37
11049: PPUSH
11050: LD_STRING D2b-JMM-2
11052: PPUSH
11053: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11057: LD_EXP 48
11061: PPUSH
11062: LD_STRING D2b-Sci1-2
11064: PPUSH
11065: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11069: LD_EXP 37
11073: PPUSH
11074: LD_STRING D2b-JMM-3
11076: PPUSH
11077: CALL_OW 88
// end ; DialogueOff ;
11081: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11085: LD_STRING MOutSol
11087: PPUSH
11088: CALL_OW 337
// end ;
11092: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11093: LD_EXP 14
11097: PUSH
11098: LD_EXP 37
11102: PPUSH
11103: CALL_OW 302
11107: AND
11108: PUSH
11109: LD_EXP 37
11113: PPUSH
11114: CALL 911 0 1
11118: AND
11119: PUSH
11120: LD_EXP 16
11124: NOT
11125: AND
11126: IFFALSE 11197
11128: GO 11130
11130: DISABLE
11131: LD_INT 0
11133: PPUSH
// begin jmm_in_veh := true ;
11134: LD_ADDR_EXP 16
11138: PUSH
11139: LD_INT 1
11141: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11142: LD_ADDR_VAR 0 1
11146: PUSH
11147: LD_INT 0
11149: PPUSH
11150: LD_INT 1
11152: PPUSH
11153: CALL_OW 12
11157: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11158: LD_INT 70
11160: PPUSH
11161: CALL_OW 67
// if i then
11165: LD_VAR 0 1
11169: IFFALSE 11185
// Say ( JMM , D2c-JMM-1 ) else
11171: LD_EXP 37
11175: PPUSH
11176: LD_STRING D2c-JMM-1
11178: PPUSH
11179: CALL_OW 88
11183: GO 11197
// Say ( JMM , D2c-JMM-1a ) ;
11185: LD_EXP 37
11189: PPUSH
11190: LD_STRING D2c-JMM-1a
11192: PPUSH
11193: CALL_OW 88
// end ;
11197: PPOPN 1
11199: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11200: LD_EXP 14
11204: PUSH
11205: LD_EXP 38
11209: PPUSH
11210: CALL_OW 302
11214: AND
11215: PUSH
11216: LD_EXP 38
11220: PPUSH
11221: CALL 911 0 1
11225: AND
11226: PUSH
11227: LD_EXP 17
11231: NOT
11232: AND
11233: IFFALSE 11265
11235: GO 11237
11237: DISABLE
// begin bobby_in_veh := true ;
11238: LD_ADDR_EXP 17
11242: PUSH
11243: LD_INT 1
11245: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11246: LD_INT 70
11248: PPUSH
11249: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11253: LD_EXP 38
11257: PPUSH
11258: LD_STRING D2c-Bobby-1
11260: PPUSH
11261: CALL_OW 88
11265: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11266: LD_EXP 14
11270: PUSH
11271: LD_EXP 40
11275: PPUSH
11276: CALL_OW 302
11280: AND
11281: PUSH
11282: LD_EXP 40
11286: PPUSH
11287: CALL 911 0 1
11291: AND
11292: PUSH
11293: LD_EXP 19
11297: NOT
11298: AND
11299: IFFALSE 11331
11301: GO 11303
11303: DISABLE
// begin lisa_in_veh := true ;
11304: LD_ADDR_EXP 19
11308: PUSH
11309: LD_INT 1
11311: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11312: LD_INT 70
11314: PPUSH
11315: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11319: LD_EXP 40
11323: PPUSH
11324: LD_STRING D2c-Lisa-1
11326: PPUSH
11327: CALL_OW 88
11331: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11332: LD_EXP 14
11336: PUSH
11337: LD_EXP 39
11341: PPUSH
11342: CALL_OW 302
11346: AND
11347: PUSH
11348: LD_EXP 39
11352: PPUSH
11353: CALL 911 0 1
11357: AND
11358: PUSH
11359: LD_EXP 18
11363: NOT
11364: AND
11365: IFFALSE 11436
11367: GO 11369
11369: DISABLE
11370: LD_INT 0
11372: PPUSH
// begin cyrus_in_veh := true ;
11373: LD_ADDR_EXP 18
11377: PUSH
11378: LD_INT 1
11380: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11381: LD_ADDR_VAR 0 1
11385: PUSH
11386: LD_INT 0
11388: PPUSH
11389: LD_INT 1
11391: PPUSH
11392: CALL_OW 12
11396: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11397: LD_INT 70
11399: PPUSH
11400: CALL_OW 67
// if i then
11404: LD_VAR 0 1
11408: IFFALSE 11424
// Say ( Cyrus , D2c-Cyrus-1 ) else
11410: LD_EXP 39
11414: PPUSH
11415: LD_STRING D2c-Cyrus-1
11417: PPUSH
11418: CALL_OW 88
11422: GO 11436
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11424: LD_EXP 39
11428: PPUSH
11429: LD_STRING D2c-Cyrus-1a
11431: PPUSH
11432: CALL_OW 88
// end ;
11436: PPOPN 1
11438: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11439: LD_EXP 44
11443: PPUSH
11444: LD_INT 16
11446: PPUSH
11447: CALL_OW 308
11451: IFFALSE 11732
11453: GO 11455
11455: DISABLE
11456: LD_INT 0
11458: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11459: LD_INT 3
11461: PPUSH
11462: LD_EXP 44
11466: PPUSH
11467: CALL_OW 471
// send_attack_on_cornel := true ;
11471: LD_ADDR_EXP 32
11475: PUSH
11476: LD_INT 1
11478: ST_TO_ADDR
// if ru_vehicles then
11479: LD_EXP 56
11483: IFFALSE 11517
// for i in ru_vehicles do
11485: LD_ADDR_VAR 0 1
11489: PUSH
11490: LD_EXP 56
11494: PUSH
11495: FOR_IN
11496: IFFALSE 11515
// ComAgressiveMove ( i , 215 , 69 ) ;
11498: LD_VAR 0 1
11502: PPUSH
11503: LD_INT 215
11505: PPUSH
11506: LD_INT 69
11508: PPUSH
11509: CALL_OW 114
11513: GO 11495
11515: POP
11516: POP
// if ru_patrol then
11517: LD_EXP 53
11521: IFFALSE 11555
// for i in ru_patrol do
11523: LD_ADDR_VAR 0 1
11527: PUSH
11528: LD_EXP 53
11532: PUSH
11533: FOR_IN
11534: IFFALSE 11553
// ComAgressiveMove ( i , 215 , 69 ) ;
11536: LD_VAR 0 1
11540: PPUSH
11541: LD_INT 215
11543: PPUSH
11544: LD_INT 69
11546: PPUSH
11547: CALL_OW 114
11551: GO 11533
11553: POP
11554: POP
// if frank_send_to_scout then
11555: LD_EXP 15
11559: IFFALSE 11573
// begin SayRadio ( Frank , D3b-Frank-1 ) ;
11561: LD_EXP 51
11565: PPUSH
11566: LD_STRING D3b-Frank-1
11568: PPUSH
11569: CALL_OW 94
// end ; Wait ( 0 0$03 ) ;
11573: LD_INT 105
11575: PPUSH
11576: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11580: LD_EXP 44
11584: PPUSH
11585: LD_STRING D4-Corn-1
11587: PPUSH
11588: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11592: LD_INT 35
11594: PPUSH
11595: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11599: LD_INT 22
11601: PUSH
11602: LD_INT 4
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: LD_INT 21
11611: PUSH
11612: LD_INT 1
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 3
11621: PUSH
11622: LD_INT 24
11624: PUSH
11625: LD_INT 1000
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: PPUSH
11641: CALL_OW 69
11645: PUSH
11646: LD_INT 6
11648: LESS
11649: IFFALSE 11592
// if Cornel then
11651: LD_EXP 44
11655: IFFALSE 11695
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
11657: LD_EXP 44
11661: PPUSH
11662: LD_STRING D5-Corn-1
11664: PPUSH
11665: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
11669: LD_EXP 44
11673: PPUSH
11674: LD_EXP 2
11678: PUSH
11679: LD_STRING Cornel
11681: STR
11682: PPUSH
11683: CALL_OW 38
// cornel_saved := true ;
11687: LD_ADDR_EXP 27
11691: PUSH
11692: LD_INT 1
11694: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
11695: LD_INT 4
11697: PPUSH
11698: LD_INT 8
11700: PPUSH
11701: CALL_OW 343
// Wait ( 0 0$01 ) ;
11705: LD_INT 35
11707: PPUSH
11708: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
11712: LD_INT 3
11714: PPUSH
11715: LD_EXP 44
11719: PPUSH
11720: CALL_OW 472
// send_attack_on_cornel := false ;
11724: LD_ADDR_EXP 32
11728: PUSH
11729: LD_INT 0
11731: ST_TO_ADDR
// end ;
11732: PPOPN 1
11734: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
11735: LD_INT 9
11737: PPUSH
11738: LD_INT 22
11740: PUSH
11741: LD_INT 1
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: PPUSH
11748: CALL_OW 70
11752: PUSH
11753: LD_EXP 33
11757: OR
11758: IFFALSE 11979
11760: GO 11762
11762: DISABLE
11763: LD_INT 0
11765: PPUSH
11766: PPUSH
// begin enable ;
11767: ENABLE
// if not jmm_on_west then
11768: LD_EXP 5
11772: NOT
11773: IFFALSE 11784
// begin YouLost ( 4 ) ;
11775: LD_STRING 4
11777: PPUSH
11778: CALL_OW 104
// exit ;
11782: GO 11979
// end ; if not game_end then
11784: LD_EXP 33
11788: NOT
11789: IFFALSE 11799
// game_end := true ;
11791: LD_ADDR_EXP 33
11795: PUSH
11796: LD_INT 1
11798: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11799: LD_ADDR_VAR 0 2
11803: PUSH
11804: LD_INT 9
11806: PPUSH
11807: LD_INT 22
11809: PUSH
11810: LD_INT 1
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PPUSH
11817: CALL_OW 70
11821: ST_TO_ADDR
// if not filter then
11822: LD_VAR 0 2
11826: NOT
11827: IFFALSE 11831
// exit ;
11829: GO 11979
// for i in filter do
11831: LD_ADDR_VAR 0 1
11835: PUSH
11836: LD_VAR 0 2
11840: PUSH
11841: FOR_IN
11842: IFFALSE 11977
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
11844: LD_VAR 0 1
11848: PPUSH
11849: CALL_OW 302
11853: PUSH
11854: LD_VAR 0 1
11858: PPUSH
11859: CALL_OW 247
11863: PUSH
11864: LD_INT 2
11866: EQUAL
11867: AND
11868: IFFALSE 11940
// begin if i = JMM and save_group < 4 then
11870: LD_VAR 0 1
11874: PUSH
11875: LD_EXP 37
11879: EQUAL
11880: PUSH
11881: LD_EXP 23
11885: PUSH
11886: LD_INT 4
11888: LESS
11889: AND
11890: IFFALSE 11894
// continue ;
11892: GO 11841
// if GetNation ( i ) = nation_american then
11894: LD_VAR 0 1
11898: PPUSH
11899: CALL_OW 248
11903: PUSH
11904: LD_INT 1
11906: EQUAL
11907: IFFALSE 11917
// veh_on_meta := true ;
11909: LD_ADDR_EXP 28
11913: PUSH
11914: LD_INT 1
11916: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
11917: LD_VAR 0 1
11921: PPUSH
11922: CALL_OW 311
11926: PPUSH
11927: CALL 11982 0 1
// RemoveUnit ( i ) ;
11931: LD_VAR 0 1
11935: PPUSH
11936: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
11940: LD_VAR 0 1
11944: PPUSH
11945: CALL_OW 302
11949: PUSH
11950: LD_VAR 0 1
11954: PPUSH
11955: CALL_OW 247
11959: PUSH
11960: LD_INT 1
11962: EQUAL
11963: AND
11964: IFFALSE 11975
// Save ( i ) ;
11966: LD_VAR 0 1
11970: PPUSH
11971: CALL 11982 0 1
// end ;
11975: GO 11841
11977: POP
11978: POP
// end ;
11979: PPOPN 2
11981: END
// export function Save ( i ) ; begin
11982: LD_INT 0
11984: PPUSH
// if i = JMM and save_group >= 4 then
11985: LD_VAR 0 1
11989: PUSH
11990: LD_EXP 37
11994: EQUAL
11995: PUSH
11996: LD_EXP 23
12000: PUSH
12001: LD_INT 4
12003: GREATEREQUAL
12004: AND
12005: IFFALSE 12141
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12007: LD_EXP 24
12011: PUSH
12012: LD_INT 22
12014: PUSH
12015: LD_INT 1
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: PUSH
12022: LD_INT 21
12024: PUSH
12025: LD_INT 1
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PPUSH
12036: CALL_OW 69
12040: PUSH
12041: LD_INT 1
12043: GREATER
12044: AND
12045: IFFALSE 12102
// begin show_query := false ;
12047: LD_ADDR_EXP 24
12051: PUSH
12052: LD_INT 0
12054: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12055: LD_STRING Q2
12057: PPUSH
12058: CALL_OW 97
12062: PUSH
12063: LD_INT 1
12065: DOUBLE
12066: EQUAL
12067: IFTRUE 12071
12069: GO 12082
12071: POP
// wait_for_them := true ; 2 :
12072: LD_ADDR_EXP 25
12076: PUSH
12077: LD_INT 1
12079: ST_TO_ADDR
12080: GO 12102
12082: LD_INT 2
12084: DOUBLE
12085: EQUAL
12086: IFTRUE 12090
12088: GO 12101
12090: POP
// wait_for_them := false ; end ;
12091: LD_ADDR_EXP 25
12095: PUSH
12096: LD_INT 0
12098: ST_TO_ADDR
12099: GO 12102
12101: POP
// end ; save_counter := save_counter + 1 ;
12102: LD_ADDR_EXP 36
12106: PUSH
12107: LD_EXP 36
12111: PUSH
12112: LD_INT 1
12114: PLUS
12115: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12116: LD_ADDR_EXP 23
12120: PUSH
12121: LD_EXP 23
12125: PUSH
12126: LD_EXP 37
12130: ADD
12131: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12132: LD_EXP 37
12136: PPUSH
12137: CALL_OW 64
// end ; if i = Lisa then
12141: LD_VAR 0 1
12145: PUSH
12146: LD_EXP 40
12150: EQUAL
12151: IFFALSE 12192
// begin save_counter := save_counter + 1 ;
12153: LD_ADDR_EXP 36
12157: PUSH
12158: LD_EXP 36
12162: PUSH
12163: LD_INT 1
12165: PLUS
12166: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12167: LD_ADDR_EXP 23
12171: PUSH
12172: LD_EXP 23
12176: PUSH
12177: LD_EXP 40
12181: ADD
12182: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12183: LD_EXP 40
12187: PPUSH
12188: CALL_OW 64
// end ; if i = Bobby then
12192: LD_VAR 0 1
12196: PUSH
12197: LD_EXP 38
12201: EQUAL
12202: IFFALSE 12243
// begin save_counter := save_counter + 1 ;
12204: LD_ADDR_EXP 36
12208: PUSH
12209: LD_EXP 36
12213: PUSH
12214: LD_INT 1
12216: PLUS
12217: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12218: LD_ADDR_EXP 23
12222: PUSH
12223: LD_EXP 23
12227: PUSH
12228: LD_EXP 38
12232: ADD
12233: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12234: LD_EXP 38
12238: PPUSH
12239: CALL_OW 64
// end ; if i = Cyrus then
12243: LD_VAR 0 1
12247: PUSH
12248: LD_EXP 39
12252: EQUAL
12253: IFFALSE 12294
// begin save_counter := save_counter + 1 ;
12255: LD_ADDR_EXP 36
12259: PUSH
12260: LD_EXP 36
12264: PUSH
12265: LD_INT 1
12267: PLUS
12268: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12269: LD_ADDR_EXP 23
12273: PUSH
12274: LD_EXP 23
12278: PUSH
12279: LD_EXP 39
12283: ADD
12284: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12285: LD_EXP 39
12289: PPUSH
12290: CALL_OW 64
// end ; if i = Khatam then
12294: LD_VAR 0 1
12298: PUSH
12299: LD_EXP 41
12303: EQUAL
12304: IFFALSE 12345
// begin save_counter := save_counter + 1 ;
12306: LD_ADDR_EXP 36
12310: PUSH
12311: LD_EXP 36
12315: PUSH
12316: LD_INT 1
12318: PLUS
12319: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12320: LD_ADDR_EXP 23
12324: PUSH
12325: LD_EXP 23
12329: PUSH
12330: LD_EXP 41
12334: ADD
12335: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12336: LD_EXP 41
12340: PPUSH
12341: CALL_OW 64
// end ; if i = Frank then
12345: LD_VAR 0 1
12349: PUSH
12350: LD_EXP 51
12354: EQUAL
12355: IFFALSE 12396
// begin save_counter := save_counter + 1 ;
12357: LD_ADDR_EXP 36
12361: PUSH
12362: LD_EXP 36
12366: PUSH
12367: LD_INT 1
12369: PLUS
12370: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12371: LD_ADDR_EXP 23
12375: PUSH
12376: LD_EXP 23
12380: PUSH
12381: LD_EXP 51
12385: ADD
12386: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12387: LD_EXP 51
12391: PPUSH
12392: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12396: LD_VAR 0 1
12400: PUSH
12401: LD_EXP 37
12405: NONEQUAL
12406: PUSH
12407: LD_VAR 0 1
12411: PPUSH
12412: CALL_OW 302
12416: AND
12417: PUSH
12418: LD_VAR 0 1
12422: PPUSH
12423: CALL_OW 247
12427: PUSH
12428: LD_INT 1
12430: EQUAL
12431: AND
12432: PUSH
12433: LD_VAR 0 1
12437: PUSH
12438: LD_EXP 23
12442: IN
12443: NOT
12444: AND
12445: IFFALSE 12486
// begin save_counter := save_counter + 1 ;
12447: LD_ADDR_EXP 36
12451: PUSH
12452: LD_EXP 36
12456: PUSH
12457: LD_INT 1
12459: PLUS
12460: ST_TO_ADDR
// save_others := save_others ^ i ;
12461: LD_ADDR_EXP 22
12465: PUSH
12466: LD_EXP 22
12470: PUSH
12471: LD_VAR 0 1
12475: ADD
12476: ST_TO_ADDR
// RemoveUnit ( i ) ;
12477: LD_VAR 0 1
12481: PPUSH
12482: CALL_OW 64
// end ; end ;
12486: LD_VAR 0 2
12490: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12491: LD_EXP 24
12495: NOT
12496: PUSH
12497: LD_EXP 25
12501: NOT
12502: AND
12503: PUSH
12504: LD_INT 22
12506: PUSH
12507: LD_INT 1
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 21
12516: PUSH
12517: LD_INT 1
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PPUSH
12528: CALL_OW 69
12532: PUSH
12533: LD_INT 0
12535: EQUAL
12536: OR
12537: IFFALSE 12546
12539: GO 12541
12541: DISABLE
// EndMission ;
12542: CALL 12547 0 0
12546: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12547: LD_INT 0
12549: PPUSH
12550: PPUSH
12551: PPUSH
12552: PPUSH
12553: PPUSH
// wait ( 0 0$01 ) ;
12554: LD_INT 35
12556: PPUSH
12557: CALL_OW 67
// if tick <= 12 12$00 then
12561: LD_OWVAR 1
12565: PUSH
12566: LD_INT 25200
12568: LESSEQUAL
12569: IFFALSE 12578
// SetAchievement ( ACH_ASPEED_3 ) ;
12571: LD_STRING ACH_ASPEED_3
12573: PPUSH
12574: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12578: LD_EXP 23
12582: PUSH
12583: LD_EXP 22
12587: ADD
12588: PPUSH
12589: LD_INT 25
12591: PUSH
12592: LD_INT 4
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PPUSH
12599: CALL_OW 72
12603: PUSH
12604: LD_INT 0
12606: EQUAL
12607: IFFALSE 12623
// begin wait ( 3 ) ;
12609: LD_INT 3
12611: PPUSH
12612: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
12616: LD_STRING ACH_NOSCI
12618: PPUSH
12619: CALL_OW 543
// end ; m1 := solar_builded ;
12623: LD_ADDR_VAR 0 3
12627: PUSH
12628: LD_EXP 14
12632: ST_TO_ADDR
// m2 := veh_on_meta ;
12633: LD_ADDR_VAR 0 4
12637: PUSH
12638: LD_EXP 28
12642: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
12643: LD_ADDR_VAR 0 5
12647: PUSH
12648: LD_EXP 34
12652: PUSH
12653: LD_INT 0
12655: EQUAL
12656: ST_TO_ADDR
// if solar_builded then
12657: LD_EXP 14
12661: IFFALSE 12675
// AddMedal ( Solar1 , 1 ) else
12663: LD_STRING Solar1
12665: PPUSH
12666: LD_INT 1
12668: PPUSH
12669: CALL_OW 101
12673: GO 12686
// AddMedal ( Solar1 , - 1 ) ;
12675: LD_STRING Solar1
12677: PPUSH
12678: LD_INT 1
12680: NEG
12681: PPUSH
12682: CALL_OW 101
// if veh_on_meta then
12686: LD_EXP 28
12690: IFFALSE 12704
// AddMedal ( Solar2 , 1 ) else
12692: LD_STRING Solar2
12694: PPUSH
12695: LD_INT 1
12697: PPUSH
12698: CALL_OW 101
12702: GO 12734
// if solar_builded then
12704: LD_EXP 14
12708: IFFALSE 12723
// AddMedal ( Solar2 , - 1 ) else
12710: LD_STRING Solar2
12712: PPUSH
12713: LD_INT 1
12715: NEG
12716: PPUSH
12717: CALL_OW 101
12721: GO 12734
// AddMedal ( Solar2 , - 2 ) ;
12723: LD_STRING Solar2
12725: PPUSH
12726: LD_INT 2
12728: NEG
12729: PPUSH
12730: CALL_OW 101
// if lose_counter = 0 then
12734: LD_EXP 34
12738: PUSH
12739: LD_INT 0
12741: EQUAL
12742: IFFALSE 12756
// AddMedal ( No , 1 ) else
12744: LD_STRING No
12746: PPUSH
12747: LD_INT 1
12749: PPUSH
12750: CALL_OW 101
12754: GO 12800
// if lose_counter > 0 and lose_counter < 4 then
12756: LD_EXP 34
12760: PUSH
12761: LD_INT 0
12763: GREATER
12764: PUSH
12765: LD_EXP 34
12769: PUSH
12770: LD_INT 4
12772: LESS
12773: AND
12774: IFFALSE 12789
// AddMedal ( No , - 1 ) else
12776: LD_STRING No
12778: PPUSH
12779: LD_INT 1
12781: NEG
12782: PPUSH
12783: CALL_OW 101
12787: GO 12800
// AddMedal ( UpTo4 , - 1 ) ;
12789: LD_STRING UpTo4
12791: PPUSH
12792: LD_INT 1
12794: NEG
12795: PPUSH
12796: CALL_OW 101
// GiveMedals ( MAIN ) ;
12800: LD_STRING MAIN
12802: PPUSH
12803: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
12807: LD_OWVAR 67
12811: PUSH
12812: LD_INT 3
12814: GREATEREQUAL
12815: PUSH
12816: LD_VAR 0 3
12820: AND
12821: PUSH
12822: LD_VAR 0 4
12826: AND
12827: PUSH
12828: LD_VAR 0 5
12832: AND
12833: IFFALSE 12845
// SetAchievementEX ( ACH_AMER , 3 ) ;
12835: LD_STRING ACH_AMER
12837: PPUSH
12838: LD_INT 3
12840: PPUSH
12841: CALL_OW 564
// if IsDead ( Pokryshkin ) then
12845: LD_EXP 52
12849: PPUSH
12850: CALL_OW 301
12854: IFFALSE 12910
// begin stop_talking := true ;
12856: LD_ADDR_OWVAR 56
12860: PUSH
12861: LD_INT 1
12863: ST_TO_ADDR
// for i in save_group union save_others do
12864: LD_ADDR_VAR 0 2
12868: PUSH
12869: LD_EXP 23
12873: PUSH
12874: LD_EXP 22
12878: UNION
12879: PUSH
12880: FOR_IN
12881: IFFALSE 12900
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
12883: LD_VAR 0 2
12887: PPUSH
12888: LD_INT 1
12890: PPUSH
12891: LD_INT 1500
12893: PPUSH
12894: CALL_OW 591
12898: GO 12880
12900: POP
12901: POP
// stop_talking := false ;
12902: LD_ADDR_OWVAR 56
12906: PUSH
12907: LD_INT 0
12909: ST_TO_ADDR
// end ; RewardPeople ( save_group ^ save_others ) ;
12910: LD_EXP 23
12914: PUSH
12915: LD_EXP 22
12919: ADD
12920: PPUSH
12921: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
12925: LD_EXP 37
12929: PPUSH
12930: LD_EXP 2
12934: PUSH
12935: LD_STRING JMM
12937: STR
12938: PPUSH
12939: CALL_OW 38
// if Bobby in save_group then
12943: LD_EXP 38
12947: PUSH
12948: LD_EXP 23
12952: IN
12953: IFFALSE 12973
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
12955: LD_EXP 38
12959: PPUSH
12960: LD_EXP 2
12964: PUSH
12965: LD_STRING Bobby
12967: STR
12968: PPUSH
12969: CALL_OW 38
// if Cyrus in save_group then
12973: LD_EXP 39
12977: PUSH
12978: LD_EXP 23
12982: IN
12983: IFFALSE 13003
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
12985: LD_EXP 39
12989: PPUSH
12990: LD_EXP 2
12994: PUSH
12995: LD_STRING Cyrus
12997: STR
12998: PPUSH
12999: CALL_OW 38
// if Lisa in save_group then
13003: LD_EXP 40
13007: PUSH
13008: LD_EXP 23
13012: IN
13013: IFFALSE 13033
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13015: LD_EXP 40
13019: PPUSH
13020: LD_EXP 2
13024: PUSH
13025: LD_STRING Lisa
13027: STR
13028: PPUSH
13029: CALL_OW 38
// if Frank in save_group then
13033: LD_EXP 51
13037: PUSH
13038: LD_EXP 23
13042: IN
13043: IFFALSE 13063
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13045: LD_EXP 51
13049: PPUSH
13050: LD_EXP 2
13054: PUSH
13055: LD_STRING Frank
13057: STR
13058: PPUSH
13059: CALL_OW 38
// if Khatam in save_group then
13063: LD_EXP 41
13067: PUSH
13068: LD_EXP 23
13072: IN
13073: IFFALSE 13093
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13075: LD_EXP 41
13079: PPUSH
13080: LD_EXP 2
13084: PUSH
13085: LD_STRING Khatam
13087: STR
13088: PPUSH
13089: CALL_OW 38
// if save_others then
13093: LD_EXP 22
13097: IFFALSE 13111
// SaveCharacters ( save_others , 03_others ) ;
13099: LD_EXP 22
13103: PPUSH
13104: LD_STRING 03_others
13106: PPUSH
13107: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13111: LD_EXP 45
13115: PUSH
13116: LD_EXP 45
13120: PPUSH
13121: CALL_OW 302
13125: AND
13126: PUSH
13127: LD_EXP 27
13131: AND
13132: IFFALSE 13144
// begin ResetFog ;
13134: CALL_OW 335
// DisplayEndingScene ;
13138: CALL 13166 0 0
// end else
13142: GO 13157
// DeleteCharacters ( mission_prefix & Cornel ) ;
13144: LD_EXP 2
13148: PUSH
13149: LD_STRING Cornel
13151: STR
13152: PPUSH
13153: CALL_OW 40
// YouWin ;
13157: CALL_OW 103
// end ;
13161: LD_VAR 0 1
13165: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13166: LD_INT 0
13168: PPUSH
13169: PPUSH
13170: PPUSH
13171: PPUSH
13172: PPUSH
13173: PPUSH
// InGameOn ;
13174: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13178: LD_INT 208
13180: PPUSH
13181: LD_INT 62
13183: PPUSH
13184: LD_INT 1
13186: PPUSH
13187: LD_INT 10
13189: NEG
13190: PPUSH
13191: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13195: LD_INT 208
13197: PPUSH
13198: LD_INT 62
13200: PPUSH
13201: LD_INT 1
13203: PPUSH
13204: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13208: LD_ADDR_VAR 0 3
13212: PUSH
13213: LD_INT 22
13215: PUSH
13216: LD_INT 3
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 2
13225: PUSH
13226: LD_INT 21
13228: PUSH
13229: LD_INT 2
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: LD_INT 21
13238: PUSH
13239: LD_INT 1
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: LIST
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PPUSH
13255: CALL_OW 69
13259: ST_TO_ADDR
// if filter then
13260: LD_VAR 0 3
13264: IFFALSE 13292
// for i in filter do
13266: LD_ADDR_VAR 0 2
13270: PUSH
13271: LD_VAR 0 3
13275: PUSH
13276: FOR_IN
13277: IFFALSE 13290
// RemoveUnit ( i ) ;
13279: LD_VAR 0 2
13283: PPUSH
13284: CALL_OW 64
13288: GO 13276
13290: POP
13291: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13292: LD_ADDR_VAR 0 3
13296: PUSH
13297: LD_INT 22
13299: PUSH
13300: LD_INT 4
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 21
13309: PUSH
13310: LD_INT 1
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PPUSH
13321: CALL_OW 69
13325: ST_TO_ADDR
// if filter then
13326: LD_VAR 0 3
13330: IFFALSE 13361
// for i in filter do
13332: LD_ADDR_VAR 0 2
13336: PUSH
13337: LD_VAR 0 3
13341: PUSH
13342: FOR_IN
13343: IFFALSE 13359
// SetLives ( i , 0 ) ;
13345: LD_VAR 0 2
13349: PPUSH
13350: LD_INT 0
13352: PPUSH
13353: CALL_OW 234
13357: GO 13342
13359: POP
13360: POP
// uc_side := 4 ;
13361: LD_ADDR_OWVAR 20
13365: PUSH
13366: LD_INT 4
13368: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13369: LD_ADDR_VAR 0 4
13373: PUSH
13374: LD_STRING Cornell
13376: PPUSH
13377: LD_INT 0
13379: PPUSH
13380: LD_STRING 
13382: PPUSH
13383: CALL 37807 0 3
13387: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13388: LD_VAR 0 4
13392: PPUSH
13393: LD_INT 208
13395: PPUSH
13396: LD_INT 62
13398: PPUSH
13399: LD_INT 0
13401: PPUSH
13402: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13406: LD_VAR 0 4
13410: PPUSH
13411: LD_INT 100
13413: PPUSH
13414: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13418: LD_INT 3
13420: PPUSH
13421: LD_VAR 0 4
13425: PPUSH
13426: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13430: LD_INT 4
13432: PPUSH
13433: LD_INT 3
13435: PPUSH
13436: LD_INT 1
13438: PPUSH
13439: LD_INT 1
13441: PPUSH
13442: CALL_OW 80
// uc_side := 3 ;
13446: LD_ADDR_OWVAR 20
13450: PUSH
13451: LD_INT 3
13453: ST_TO_ADDR
// uc_nation := 3 ;
13454: LD_ADDR_OWVAR 21
13458: PUSH
13459: LD_INT 3
13461: ST_TO_ADDR
// InitHc ;
13462: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13466: LD_ADDR_VAR 0 5
13470: PUSH
13471: LD_STRING Mikhail
13473: PPUSH
13474: LD_INT 0
13476: PPUSH
13477: LD_STRING 
13479: PPUSH
13480: CALL 37807 0 3
13484: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13485: LD_INT 1
13487: PPUSH
13488: LD_INT 1
13490: PPUSH
13491: LD_INT 0
13493: PPUSH
13494: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13498: LD_ADDR_VAR 0 6
13502: PUSH
13503: LD_VAR 0 6
13507: PUSH
13508: CALL_OW 44
13512: ADD
13513: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13514: LD_ADDR_VAR 0 6
13518: PUSH
13519: LD_VAR 0 6
13523: PUSH
13524: CALL_OW 44
13528: ADD
13529: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13530: LD_INT 2
13532: PPUSH
13533: LD_INT 4
13535: PPUSH
13536: LD_INT 0
13538: PPUSH
13539: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13543: LD_ADDR_VAR 0 6
13547: PUSH
13548: LD_VAR 0 6
13552: PUSH
13553: CALL_OW 44
13557: ADD
13558: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13559: LD_VAR 0 5
13563: PPUSH
13564: LD_INT 17
13566: PPUSH
13567: LD_INT 0
13569: PPUSH
13570: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13574: LD_VAR 0 5
13578: PPUSH
13579: LD_INT 210
13581: PPUSH
13582: LD_INT 63
13584: PPUSH
13585: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
13589: LD_VAR 0 5
13593: PPUSH
13594: LD_INT 208
13596: PPUSH
13597: LD_INT 62
13599: PPUSH
13600: CALL_OW 178
// for i in fake_russians do
13604: LD_ADDR_VAR 0 2
13608: PUSH
13609: LD_VAR 0 6
13613: PUSH
13614: FOR_IN
13615: IFFALSE 13693
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
13617: LD_VAR 0 2
13621: PPUSH
13622: LD_INT 17
13624: PPUSH
13625: LD_INT 0
13627: PPUSH
13628: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
13632: LD_VAR 0 2
13636: PPUSH
13637: LD_INT 215
13639: PPUSH
13640: LD_INT 67
13642: PPUSH
13643: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
13647: LD_VAR 0 2
13651: PPUSH
13652: LD_INT 208
13654: PPUSH
13655: LD_INT 62
13657: PPUSH
13658: CALL_OW 178
// if GetClass ( i ) = 4 then
13662: LD_VAR 0 2
13666: PPUSH
13667: CALL_OW 257
13671: PUSH
13672: LD_INT 4
13674: EQUAL
13675: IFFALSE 13691
// ComHeal ( i , fake_cornel ) ;
13677: LD_VAR 0 2
13681: PPUSH
13682: LD_VAR 0 4
13686: PPUSH
13687: CALL_OW 128
// end ;
13691: GO 13614
13693: POP
13694: POP
// Wait ( 0 0$01 ) ;
13695: LD_INT 35
13697: PPUSH
13698: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
13702: LD_INT 208
13704: PPUSH
13705: LD_INT 62
13707: PPUSH
13708: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13712: LD_INT 208
13714: PPUSH
13715: LD_INT 62
13717: PPUSH
13718: LD_INT 1
13720: PPUSH
13721: LD_INT 10
13723: NEG
13724: PPUSH
13725: CALL_OW 330
// Wait ( 0 0$15 ) ;
13729: LD_INT 525
13731: PPUSH
13732: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
13736: LD_INT 208
13738: PPUSH
13739: LD_INT 62
13741: PPUSH
13742: LD_INT 1
13744: PPUSH
13745: CALL_OW 331
// ResetFog ;
13749: CALL_OW 335
// InGameOff ;
13753: CALL_OW 9
// end ;
13757: LD_VAR 0 1
13761: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
13762: LD_INT 10
13764: PPUSH
13765: LD_INT 22
13767: PUSH
13768: LD_INT 1
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PPUSH
13775: CALL_OW 70
13779: PUSH
13780: LD_EXP 44
13784: PPUSH
13785: CALL_OW 302
13789: AND
13790: PUSH
13791: LD_INT 22
13793: PUSH
13794: LD_INT 1
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PPUSH
13801: CALL_OW 69
13805: PPUSH
13806: LD_EXP 44
13810: PPUSH
13811: CALL_OW 74
13815: PPUSH
13816: LD_EXP 44
13820: PPUSH
13821: CALL_OW 296
13825: PUSH
13826: LD_INT 30
13828: LESS
13829: OR
13830: IFFALSE 13881
13832: GO 13834
13834: DISABLE
// begin enable ;
13835: ENABLE
// powell_warn := powell_warn + 1 ;
13836: LD_ADDR_EXP 35
13840: PUSH
13841: LD_EXP 35
13845: PUSH
13846: LD_INT 1
13848: PLUS
13849: ST_TO_ADDR
// if powell_warn = 3 then
13850: LD_EXP 35
13854: PUSH
13855: LD_INT 3
13857: EQUAL
13858: IFFALSE 13869
// begin YouLost ( 5 ) ;
13860: LD_STRING 5
13862: PPUSH
13863: CALL_OW 104
// exit ;
13867: GO 13881
// end ; SayRadio ( Powell , DWarn-Pow-1 ) ;
13869: LD_EXP 46
13873: PPUSH
13874: LD_STRING DWarn-Pow-1
13876: PPUSH
13877: CALL_OW 94
// end ; end_of_file
13881: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
13882: LD_EXP 8
13886: IFFALSE 15723
13888: GO 13890
13890: DISABLE
13891: LD_INT 0
13893: PPUSH
13894: PPUSH
13895: PPUSH
13896: PPUSH
13897: PPUSH
13898: PPUSH
13899: PPUSH
13900: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
13901: LD_EXP 44
13905: PUSH
13906: LD_EXP 45
13910: ADD
13911: PUSH
13912: LD_EXP 6
13916: ADD
13917: PPUSH
13918: LD_INT 250
13920: PPUSH
13921: LD_INT 120
13923: PPUSH
13924: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
13928: LD_ADDR_VAR 0 2
13932: PUSH
13933: LD_EXP 6
13937: PPUSH
13938: LD_INT 25
13940: PUSH
13941: LD_INT 2
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PPUSH
13948: CALL_OW 72
13952: PUSH
13953: LD_EXP 45
13957: DIFF
13958: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
13959: LD_ADDR_VAR 0 3
13963: PUSH
13964: LD_EXP 6
13968: PPUSH
13969: LD_INT 21
13971: PUSH
13972: LD_INT 1
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PPUSH
13979: CALL_OW 72
13983: PUSH
13984: LD_VAR 0 2
13988: DIFF
13989: ST_TO_ADDR
// if not has_eng then
13990: LD_VAR 0 2
13994: NOT
13995: IFFALSE 14078
// begin uc_side := 4 ;
13997: LD_ADDR_OWVAR 20
14001: PUSH
14002: LD_INT 4
14004: ST_TO_ADDR
// uc_nation := 1 ;
14005: LD_ADDR_OWVAR 21
14009: PUSH
14010: LD_INT 1
14012: ST_TO_ADDR
// bc_type := b_depot ;
14013: LD_ADDR_OWVAR 42
14017: PUSH
14018: LD_INT 0
14020: ST_TO_ADDR
// bc_level := 2 ;
14021: LD_ADDR_OWVAR 43
14025: PUSH
14026: LD_INT 2
14028: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14029: LD_ADDR_VAR 0 4
14033: PUSH
14034: LD_INT 264
14036: PPUSH
14037: LD_INT 120
14039: PPUSH
14040: LD_INT 4
14042: PPUSH
14043: CALL_OW 47
14047: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14048: LD_INT 264
14050: PPUSH
14051: LD_INT 120
14053: PPUSH
14054: LD_INT 4
14056: PPUSH
14057: LD_INT 10
14059: NEG
14060: PPUSH
14061: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14065: LD_INT 264
14067: PPUSH
14068: LD_INT 120
14070: PPUSH
14071: LD_INT 4
14073: PPUSH
14074: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14078: LD_INT 35
14080: PPUSH
14081: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14085: LD_EXP 44
14089: PPUSH
14090: LD_INT 10
14092: PPUSH
14093: CALL_OW 308
14097: PUSH
14098: LD_EXP 44
14102: PPUSH
14103: CALL_OW 310
14107: PPUSH
14108: LD_INT 10
14110: PPUSH
14111: CALL_OW 308
14115: OR
14116: IFFALSE 14078
// if has_eng and not dep then
14118: LD_VAR 0 2
14122: PUSH
14123: LD_VAR 0 4
14127: NOT
14128: AND
14129: IFFALSE 14279
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14131: LD_VAR 0 2
14135: PPUSH
14136: LD_INT 0
14138: PPUSH
14139: LD_INT 264
14141: PPUSH
14142: LD_INT 120
14144: PPUSH
14145: LD_INT 4
14147: PPUSH
14148: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14152: LD_INT 35
14154: PPUSH
14155: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14159: LD_INT 22
14161: PUSH
14162: LD_INT 4
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 30
14171: PUSH
14172: LD_INT 0
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PPUSH
14183: CALL_OW 69
14187: IFFALSE 14152
// ComMoveXY ( filter , 264 , 120 ) ;
14189: LD_VAR 0 3
14193: PPUSH
14194: LD_INT 264
14196: PPUSH
14197: LD_INT 120
14199: PPUSH
14200: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14204: LD_INT 35
14206: PPUSH
14207: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14211: LD_INT 22
14213: PUSH
14214: LD_INT 4
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 30
14223: PUSH
14224: LD_INT 0
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 3
14233: PUSH
14234: LD_INT 57
14236: PUSH
14237: EMPTY
14238: LIST
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: LIST
14248: PPUSH
14249: CALL_OW 69
14253: IFFALSE 14204
// ComMoveXY ( filter , 247 , 113 ) ;
14255: LD_VAR 0 3
14259: PPUSH
14260: LD_INT 247
14262: PPUSH
14263: LD_INT 113
14265: PPUSH
14266: CALL_OW 111
// Wait ( 0 0$2 ) ;
14270: LD_INT 70
14272: PPUSH
14273: CALL_OW 67
// end else
14277: GO 14291
// begin SetSide ( dep , 4 ) ;
14279: LD_VAR 0 4
14283: PPUSH
14284: LD_INT 4
14286: PPUSH
14287: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14291: LD_ADDR_VAR 0 4
14295: PUSH
14296: LD_INT 22
14298: PUSH
14299: LD_INT 4
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: LD_INT 30
14308: PUSH
14309: LD_INT 0
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PPUSH
14320: CALL_OW 69
14324: PUSH
14325: LD_INT 1
14327: ARRAY
14328: ST_TO_ADDR
// if not has_eng then
14329: LD_VAR 0 2
14333: NOT
14334: IFFALSE 14421
// for i = 1 to 2 do
14336: LD_ADDR_VAR 0 1
14340: PUSH
14341: DOUBLE
14342: LD_INT 1
14344: DEC
14345: ST_TO_ADDR
14346: LD_INT 2
14348: PUSH
14349: FOR_TO
14350: IFFALSE 14419
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14352: LD_VAR 0 3
14356: PUSH
14357: LD_INT 1
14359: ARRAY
14360: PPUSH
14361: LD_VAR 0 4
14365: PPUSH
14366: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14370: LD_VAR 0 3
14374: PUSH
14375: LD_INT 1
14377: ARRAY
14378: PPUSH
14379: LD_INT 2
14381: PPUSH
14382: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14386: LD_VAR 0 3
14390: PUSH
14391: LD_INT 1
14393: ARRAY
14394: PPUSH
14395: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14399: LD_ADDR_VAR 0 3
14403: PUSH
14404: LD_VAR 0 3
14408: PPUSH
14409: LD_INT 1
14411: PPUSH
14412: CALL_OW 3
14416: ST_TO_ADDR
// end ;
14417: GO 14349
14419: POP
14420: POP
// if IsInUnit ( Cornel ) then
14421: LD_EXP 44
14425: PPUSH
14426: CALL_OW 310
14430: IFFALSE 14508
// begin cargo := IsInUnit ( Cornel ) ;
14432: LD_ADDR_VAR 0 7
14436: PUSH
14437: LD_EXP 44
14441: PPUSH
14442: CALL_OW 310
14446: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14447: LD_VAR 0 7
14451: PPUSH
14452: LD_INT 1
14454: PPUSH
14455: CALL_OW 289
14459: IFFALSE 14470
// ComUnload ( cargo ) ;
14461: LD_VAR 0 7
14465: PPUSH
14466: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14470: LD_EXP 44
14474: PPUSH
14475: LD_INT 235
14477: PPUSH
14478: LD_INT 122
14480: PPUSH
14481: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14485: LD_EXP 44
14489: PPUSH
14490: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14494: LD_EXP 44
14498: PPUSH
14499: LD_VAR 0 4
14503: PPUSH
14504: CALL_OW 180
// end ; if Bierezov then
14508: LD_EXP 45
14512: IFFALSE 14560
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14514: LD_EXP 45
14518: PPUSH
14519: LD_INT 260
14521: PPUSH
14522: LD_INT 120
14524: PPUSH
14525: CALL_OW 111
// if dep then
14529: LD_VAR 0 4
14533: IFFALSE 14551
// AddComEnterUnit ( Bierezov , dep ) else
14535: LD_EXP 45
14539: PPUSH
14540: LD_VAR 0 4
14544: PPUSH
14545: CALL_OW 180
14549: GO 14560
// AddComHold ( Bierezov ) ;
14551: LD_EXP 45
14555: PPUSH
14556: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14560: LD_INT 525
14562: PPUSH
14563: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14567: LD_ADDR_VAR 0 2
14571: PUSH
14572: LD_INT 22
14574: PUSH
14575: LD_INT 4
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PUSH
14582: LD_INT 25
14584: PUSH
14585: LD_INT 2
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PPUSH
14596: CALL_OW 69
14600: PUSH
14601: LD_EXP 45
14605: DIFF
14606: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14607: LD_INT 35
14609: PPUSH
14610: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
14614: LD_ADDR_VAR 0 6
14618: PUSH
14619: LD_INT 10
14621: PPUSH
14622: CALL_OW 435
14626: ST_TO_ADDR
// if crates then
14627: LD_VAR 0 6
14631: IFFALSE 14660
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
14633: LD_VAR 0 2
14637: PPUSH
14638: LD_VAR 0 6
14642: PUSH
14643: LD_INT 1
14645: ARRAY
14646: PPUSH
14647: LD_VAR 0 6
14651: PUSH
14652: LD_INT 2
14654: ARRAY
14655: PPUSH
14656: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
14660: LD_VAR 0 4
14664: PPUSH
14665: CALL_OW 274
14669: PPUSH
14670: LD_INT 1
14672: PPUSH
14673: CALL_OW 275
14677: PUSH
14678: LD_INT 40
14680: GREATEREQUAL
14681: IFFALSE 14607
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
14683: LD_ADDR_VAR 0 5
14687: PUSH
14688: LD_INT 4
14690: PUSH
14691: LD_INT 256
14693: PUSH
14694: LD_INT 111
14696: PUSH
14697: LD_INT 2
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 31
14708: PUSH
14709: LD_INT 243
14711: PUSH
14712: LD_INT 112
14714: PUSH
14715: LD_INT 2
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: PUSH
14724: LD_INT 31
14726: PUSH
14727: LD_INT 254
14729: PUSH
14730: LD_INT 114
14732: PUSH
14733: LD_INT 2
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: LIST
14746: ST_TO_ADDR
// for i in blist do
14747: LD_ADDR_VAR 0 1
14751: PUSH
14752: LD_VAR 0 5
14756: PUSH
14757: FOR_IN
14758: IFFALSE 14807
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
14760: LD_VAR 0 2
14764: PPUSH
14765: LD_VAR 0 1
14769: PUSH
14770: LD_INT 1
14772: ARRAY
14773: PPUSH
14774: LD_VAR 0 1
14778: PUSH
14779: LD_INT 2
14781: ARRAY
14782: PPUSH
14783: LD_VAR 0 1
14787: PUSH
14788: LD_INT 3
14790: ARRAY
14791: PPUSH
14792: LD_VAR 0 1
14796: PUSH
14797: LD_INT 4
14799: ARRAY
14800: PPUSH
14801: CALL_OW 205
14805: GO 14757
14807: POP
14808: POP
// repeat wait ( 0 0$01 ) ;
14809: LD_INT 35
14811: PPUSH
14812: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
14816: LD_INT 22
14818: PUSH
14819: LD_INT 4
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: LD_INT 30
14828: PUSH
14829: LD_INT 4
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: LD_INT 3
14838: PUSH
14839: LD_INT 57
14841: PUSH
14842: EMPTY
14843: LIST
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: LIST
14853: PPUSH
14854: CALL_OW 69
14858: IFFALSE 14809
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14860: LD_VAR 0 3
14864: PPUSH
14865: LD_INT 22
14867: PUSH
14868: LD_INT 4
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: LD_INT 30
14877: PUSH
14878: LD_INT 4
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PPUSH
14889: CALL_OW 69
14893: PUSH
14894: LD_INT 1
14896: ARRAY
14897: PPUSH
14898: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
14902: LD_VAR 0 3
14906: PPUSH
14907: LD_INT 1
14909: PPUSH
14910: CALL_OW 183
// if has_eng > 1 then
14914: LD_VAR 0 2
14918: PUSH
14919: LD_INT 1
14921: GREATER
14922: IFFALSE 15064
// for i = has_eng downto 2 do
14924: LD_ADDR_VAR 0 1
14928: PUSH
14929: DOUBLE
14930: LD_VAR 0 2
14934: INC
14935: ST_TO_ADDR
14936: LD_INT 2
14938: PUSH
14939: FOR_DOWNTO
14940: IFFALSE 15062
// begin if IsInUnit ( has_eng [ i ] ) then
14942: LD_VAR 0 2
14946: PUSH
14947: LD_VAR 0 1
14951: ARRAY
14952: PPUSH
14953: CALL_OW 310
14957: IFFALSE 14974
// ComExitBuilding ( has_eng [ i ] ) ;
14959: LD_VAR 0 2
14963: PUSH
14964: LD_VAR 0 1
14968: ARRAY
14969: PPUSH
14970: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14974: LD_VAR 0 2
14978: PUSH
14979: LD_VAR 0 1
14983: ARRAY
14984: PPUSH
14985: LD_INT 22
14987: PUSH
14988: LD_INT 4
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 30
14997: PUSH
14998: LD_INT 4
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PPUSH
15009: CALL_OW 69
15013: PUSH
15014: LD_INT 1
15016: ARRAY
15017: PPUSH
15018: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15022: LD_VAR 0 2
15026: PUSH
15027: LD_VAR 0 1
15031: ARRAY
15032: PPUSH
15033: LD_INT 1
15035: PPUSH
15036: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15040: LD_ADDR_VAR 0 2
15044: PUSH
15045: LD_VAR 0 2
15049: PPUSH
15050: LD_VAR 0 1
15054: PPUSH
15055: CALL_OW 3
15059: ST_TO_ADDR
// end ;
15060: GO 14939
15062: POP
15063: POP
// repeat wait ( 0 0$01 ) ;
15064: LD_INT 35
15066: PPUSH
15067: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15071: LD_INT 22
15073: PUSH
15074: LD_INT 4
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 30
15083: PUSH
15084: LD_INT 31
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 3
15093: PUSH
15094: LD_INT 57
15096: PUSH
15097: EMPTY
15098: LIST
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: LIST
15108: PPUSH
15109: CALL_OW 69
15113: PUSH
15114: LD_INT 1
15116: GREATER
15117: IFFALSE 15064
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15119: LD_ADDR_VAR 0 8
15123: PUSH
15124: LD_EXP 6
15128: PPUSH
15129: LD_INT 25
15131: PUSH
15132: LD_INT 1
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PPUSH
15139: CALL_OW 72
15143: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15144: LD_ADDR_VAR 0 1
15148: PUSH
15149: DOUBLE
15150: LD_INT 1
15152: DEC
15153: ST_TO_ADDR
15154: LD_INT 22
15156: PUSH
15157: LD_INT 4
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 30
15166: PUSH
15167: LD_INT 31
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 3
15176: PUSH
15177: LD_INT 57
15179: PUSH
15180: EMPTY
15181: LIST
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: PPUSH
15192: CALL_OW 69
15196: PUSH
15197: FOR_TO
15198: IFFALSE 15282
// begin if not sol [ i ] then
15200: LD_VAR 0 8
15204: PUSH
15205: LD_VAR 0 1
15209: ARRAY
15210: NOT
15211: IFFALSE 15215
// break ;
15213: GO 15282
// ComExitBuilding ( sol [ i ] ) ;
15215: LD_VAR 0 8
15219: PUSH
15220: LD_VAR 0 1
15224: ARRAY
15225: PPUSH
15226: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15230: LD_VAR 0 8
15234: PUSH
15235: LD_VAR 0 1
15239: ARRAY
15240: PPUSH
15241: LD_INT 22
15243: PUSH
15244: LD_INT 4
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PUSH
15251: LD_INT 30
15253: PUSH
15254: LD_INT 31
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PPUSH
15265: CALL_OW 69
15269: PUSH
15270: LD_VAR 0 1
15274: ARRAY
15275: PPUSH
15276: CALL_OW 180
// end ;
15280: GO 15197
15282: POP
15283: POP
// if sol > 3 then
15284: LD_VAR 0 8
15288: PUSH
15289: LD_INT 3
15291: GREATER
15292: IFFALSE 15409
// begin ComExitBuilding ( sol [ 3 ] ) ;
15294: LD_VAR 0 8
15298: PUSH
15299: LD_INT 3
15301: ARRAY
15302: PPUSH
15303: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15307: LD_VAR 0 8
15311: PUSH
15312: LD_INT 3
15314: ARRAY
15315: PPUSH
15316: LD_INT 246
15318: PPUSH
15319: LD_INT 94
15321: PPUSH
15322: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15326: LD_VAR 0 8
15330: PUSH
15331: LD_INT 3
15333: ARRAY
15334: PPUSH
15335: LD_INT 175
15337: PPUSH
15338: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15342: LD_VAR 0 8
15346: PUSH
15347: LD_INT 3
15349: ARRAY
15350: PPUSH
15351: LD_INT 224
15353: PPUSH
15354: LD_INT 90
15356: PPUSH
15357: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15361: LD_VAR 0 8
15365: PUSH
15366: LD_INT 3
15368: ARRAY
15369: PPUSH
15370: LD_INT 245
15372: PPUSH
15373: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15377: LD_VAR 0 8
15381: PUSH
15382: LD_INT 3
15384: ARRAY
15385: PPUSH
15386: LD_INT 223
15388: PPUSH
15389: LD_INT 110
15391: PPUSH
15392: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15396: LD_VAR 0 8
15400: PUSH
15401: LD_INT 3
15403: ARRAY
15404: PPUSH
15405: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15409: LD_VAR 0 2
15413: PPUSH
15414: LD_VAR 0 4
15418: PPUSH
15419: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15423: LD_INT 22
15425: PUSH
15426: LD_INT 4
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 30
15435: PUSH
15436: LD_INT 4
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PPUSH
15447: CALL_OW 69
15451: PUSH
15452: LD_INT 1
15454: ARRAY
15455: PPUSH
15456: CALL_OW 313
15460: PUSH
15461: LD_INT 6
15463: LESS
15464: IFFALSE 15528
// begin if IsInUnit ( Cornel ) then
15466: LD_EXP 44
15470: PPUSH
15471: CALL_OW 310
15475: IFFALSE 15486
// ComExitBuilding ( Cornel ) ;
15477: LD_EXP 44
15481: PPUSH
15482: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15486: LD_EXP 44
15490: PPUSH
15491: LD_INT 22
15493: PUSH
15494: LD_INT 4
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 30
15503: PUSH
15504: LD_INT 4
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PPUSH
15515: CALL_OW 69
15519: PUSH
15520: LD_INT 1
15522: ARRAY
15523: PPUSH
15524: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15528: LD_INT 35
15530: PPUSH
15531: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15535: LD_ADDR_VAR 0 3
15539: PUSH
15540: LD_INT 22
15542: PUSH
15543: LD_INT 4
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PUSH
15550: LD_INT 21
15552: PUSH
15553: LD_INT 3
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PUSH
15560: LD_INT 3
15562: PUSH
15563: LD_INT 24
15565: PUSH
15566: LD_INT 1000
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: LIST
15581: PPUSH
15582: CALL_OW 69
15586: ST_TO_ADDR
// if filter and has_eng then
15587: LD_VAR 0 3
15591: PUSH
15592: LD_VAR 0 2
15596: AND
15597: IFFALSE 15663
// begin for i in has_eng do
15599: LD_ADDR_VAR 0 1
15603: PUSH
15604: LD_VAR 0 2
15608: PUSH
15609: FOR_IN
15610: IFFALSE 15659
// begin if IsInUnit ( i ) then
15612: LD_VAR 0 1
15616: PPUSH
15617: CALL_OW 310
15621: IFFALSE 15632
// ComExitBuilding ( i ) ;
15623: LD_VAR 0 1
15627: PPUSH
15628: CALL_OW 122
// Wait ( 3 ) ;
15632: LD_INT 3
15634: PPUSH
15635: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
15639: LD_VAR 0 1
15643: PPUSH
15644: LD_VAR 0 3
15648: PUSH
15649: LD_INT 1
15651: ARRAY
15652: PPUSH
15653: CALL_OW 130
// end ;
15657: GO 15609
15659: POP
15660: POP
// end else
15661: GO 15717
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
15663: LD_VAR 0 2
15667: PUSH
15668: LD_VAR 0 2
15672: PPUSH
15673: LD_INT 56
15675: PUSH
15676: EMPTY
15677: LIST
15678: PPUSH
15679: CALL_OW 72
15683: AND
15684: IFFALSE 15717
// for i in has_eng do
15686: LD_ADDR_VAR 0 1
15690: PUSH
15691: LD_VAR 0 2
15695: PUSH
15696: FOR_IN
15697: IFFALSE 15715
// ComEnterUnit ( i , dep ) ;
15699: LD_VAR 0 1
15703: PPUSH
15704: LD_VAR 0 4
15708: PPUSH
15709: CALL_OW 120
15713: GO 15696
15715: POP
15716: POP
// until cornel_prepared ;
15717: LD_EXP 11
15721: IFFALSE 15528
// end ;
15723: PPOPN 8
15725: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
15726: LD_EXP 11
15730: IFFALSE 16129
15732: GO 15734
15734: DISABLE
15735: LD_INT 0
15737: PPUSH
15738: PPUSH
15739: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
15740: LD_ADDR_VAR 0 2
15744: PUSH
15745: LD_INT 22
15747: PUSH
15748: LD_INT 4
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: LD_INT 30
15757: PUSH
15758: LD_INT 4
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PPUSH
15769: CALL_OW 69
15773: PUSH
15774: LD_INT 1
15776: ARRAY
15777: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
15778: LD_EXP 6
15782: PPUSH
15783: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
15787: LD_EXP 45
15791: PUSH
15792: LD_EXP 45
15796: PPUSH
15797: CALL_OW 310
15801: AND
15802: IFFALSE 15813
// ComExitBuilding ( Bierezov ) ;
15804: LD_EXP 45
15808: PPUSH
15809: CALL_OW 122
// Wait ( 0 0$03 ) ;
15813: LD_INT 105
15815: PPUSH
15816: CALL_OW 67
// for i in cornel_units do
15820: LD_ADDR_VAR 0 1
15824: PUSH
15825: LD_EXP 6
15829: PUSH
15830: FOR_IN
15831: IFFALSE 15907
// begin if GetClass ( i ) in [ 2 , 3 ] then
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 257
15842: PUSH
15843: LD_INT 2
15845: PUSH
15846: LD_INT 3
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: IN
15853: IFFALSE 15890
// begin ComEnterUnit ( i , arm ) ;
15855: LD_VAR 0 1
15859: PPUSH
15860: LD_VAR 0 2
15864: PPUSH
15865: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
15869: LD_VAR 0 1
15873: PPUSH
15874: LD_INT 1
15876: PPUSH
15877: CALL_OW 183
// AddComExitBuilding ( i ) ;
15881: LD_VAR 0 1
15885: PPUSH
15886: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
15890: LD_VAR 0 1
15894: PPUSH
15895: LD_INT 257
15897: PPUSH
15898: LD_INT 121
15900: PPUSH
15901: CALL_OW 171
// end ;
15905: GO 15830
15907: POP
15908: POP
// Wait ( 1 1$00 ) ;
15909: LD_INT 2100
15911: PPUSH
15912: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
15916: LD_ADDR_VAR 0 3
15920: PUSH
15921: LD_EXP 44
15925: PUSH
15926: LD_EXP 45
15930: ADD
15931: PUSH
15932: LD_EXP 6
15936: ADD
15937: PUSH
15938: LD_EXP 6
15942: PPUSH
15943: LD_INT 21
15945: PUSH
15946: LD_INT 2
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PPUSH
15953: CALL_OW 72
15957: DIFF
15958: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
15959: LD_VAR 0 3
15963: PPUSH
15964: LD_INT 248
15966: PPUSH
15967: LD_INT 85
15969: PPUSH
15970: CALL_OW 111
// AddComHold ( filter ) ;
15974: LD_VAR 0 3
15978: PPUSH
15979: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
15983: LD_INT 35
15985: PPUSH
15986: CALL_OW 67
// until cornel_attack ;
15990: LD_EXP 9
15994: IFFALSE 15983
// ComAgressiveMove ( filter , 209 , 63 ) ;
15996: LD_VAR 0 3
16000: PPUSH
16001: LD_INT 209
16003: PPUSH
16004: LD_INT 63
16006: PPUSH
16007: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16011: LD_EXP 44
16015: PPUSH
16016: LD_INT 208
16018: PPUSH
16019: LD_INT 62
16021: PPUSH
16022: CALL_OW 114
// AddComHold ( Cornel ) ;
16026: LD_EXP 44
16030: PPUSH
16031: CALL_OW 200
// if Bierezov then
16035: LD_EXP 45
16039: IFFALSE 16129
// begin filter := filter diff Bierezov ;
16041: LD_ADDR_VAR 0 3
16045: PUSH
16046: LD_VAR 0 3
16050: PUSH
16051: LD_EXP 45
16055: DIFF
16056: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16057: LD_EXP 45
16061: PPUSH
16062: LD_INT 6
16064: PPUSH
16065: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16069: LD_EXP 45
16073: PPUSH
16074: LD_INT 235
16076: PPUSH
16077: LD_INT 60
16079: PPUSH
16080: CALL_OW 111
// AddComHold ( Bierezov ) ;
16084: LD_EXP 45
16088: PPUSH
16089: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16093: LD_EXP 45
16097: PPUSH
16098: LD_INT 350
16100: PPUSH
16101: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16105: LD_EXP 45
16109: PPUSH
16110: LD_INT 198
16112: PPUSH
16113: LD_INT 28
16115: PPUSH
16116: CALL_OW 171
// AddComHold ( Bierezov ) ;
16120: LD_EXP 45
16124: PPUSH
16125: CALL_OW 200
// end ; end ; end_of_file
16129: PPOPN 3
16131: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16132: LD_EXP 53
16136: PUSH
16137: LD_EXP 31
16141: NOT
16142: AND
16143: PUSH
16144: LD_EXP 32
16148: NOT
16149: AND
16150: IFFALSE 16600
16152: GO 16154
16154: DISABLE
16155: LD_INT 0
16157: PPUSH
16158: PPUSH
16159: PPUSH
16160: PPUSH
// begin enable ;
16161: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16162: LD_ADDR_VAR 0 4
16166: PUSH
16167: LD_INT 81
16169: PUSH
16170: LD_INT 3
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PPUSH
16177: CALL_OW 69
16181: ST_TO_ADDR
// for i = 1 to ru_patrol do
16182: LD_ADDR_VAR 0 2
16186: PUSH
16187: DOUBLE
16188: LD_INT 1
16190: DEC
16191: ST_TO_ADDR
16192: LD_EXP 53
16196: PUSH
16197: FOR_TO
16198: IFFALSE 16598
// begin un := ru_patrol [ i ] ;
16200: LD_ADDR_VAR 0 1
16204: PUSH
16205: LD_EXP 53
16209: PUSH
16210: LD_VAR 0 2
16214: ARRAY
16215: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16216: LD_VAR 0 1
16220: PPUSH
16221: LD_INT 13
16223: PPUSH
16224: CALL_OW 308
16228: IFFALSE 16333
// begin if not ru_alert then
16230: LD_EXP 60
16234: NOT
16235: IFFALSE 16245
// ru_alert := true ;
16237: LD_ADDR_EXP 60
16241: PUSH
16242: LD_INT 1
16244: ST_TO_ADDR
// if not See ( 1 , un ) then
16245: LD_INT 1
16247: PPUSH
16248: LD_VAR 0 1
16252: PPUSH
16253: CALL_OW 292
16257: NOT
16258: IFFALSE 16272
// SetLives ( un , 1000 ) ;
16260: LD_VAR 0 1
16264: PPUSH
16265: LD_INT 1000
16267: PPUSH
16268: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16272: LD_ADDR_EXP 53
16276: PUSH
16277: LD_EXP 53
16281: PUSH
16282: LD_VAR 0 1
16286: DIFF
16287: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16288: LD_VAR 0 1
16292: PPUSH
16293: LD_INT 22
16295: PUSH
16296: LD_INT 3
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: LD_INT 30
16305: PUSH
16306: LD_INT 4
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PPUSH
16317: CALL_OW 69
16321: PPUSH
16322: CALL 1007 0 1
16326: PPUSH
16327: CALL_OW 120
// continue ;
16331: GO 16197
// end ; if IsOk ( un ) and not HasTask ( un ) then
16333: LD_VAR 0 1
16337: PPUSH
16338: CALL_OW 302
16342: PUSH
16343: LD_VAR 0 1
16347: PPUSH
16348: CALL_OW 314
16352: NOT
16353: AND
16354: IFFALSE 16447
// begin for j = 1 to ru_firepoints_south [ i ] do
16356: LD_ADDR_VAR 0 3
16360: PUSH
16361: DOUBLE
16362: LD_INT 1
16364: DEC
16365: ST_TO_ADDR
16366: LD_EXP 59
16370: PUSH
16371: LD_VAR 0 2
16375: ARRAY
16376: PUSH
16377: FOR_TO
16378: IFFALSE 16445
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16380: LD_VAR 0 1
16384: PPUSH
16385: LD_EXP 59
16389: PUSH
16390: LD_VAR 0 2
16394: ARRAY
16395: PUSH
16396: LD_VAR 0 3
16400: ARRAY
16401: PUSH
16402: LD_INT 1
16404: ARRAY
16405: PPUSH
16406: LD_EXP 59
16410: PUSH
16411: LD_VAR 0 2
16415: ARRAY
16416: PUSH
16417: LD_VAR 0 3
16421: ARRAY
16422: PUSH
16423: LD_INT 2
16425: ARRAY
16426: PPUSH
16427: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16431: LD_VAR 0 1
16435: PPUSH
16436: LD_INT 70
16438: PPUSH
16439: CALL_OW 202
// end ;
16443: GO 16377
16445: POP
16446: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16447: LD_VAR 0 1
16451: PPUSH
16452: CALL_OW 256
16456: PUSH
16457: LD_INT 700
16459: LESS
16460: PUSH
16461: LD_VAR 0 1
16465: PPUSH
16466: LD_INT 13
16468: PPUSH
16469: CALL_OW 308
16473: NOT
16474: AND
16475: IFFALSE 16527
// begin ComMoveToArea ( un , retreatArea ) ;
16477: LD_VAR 0 1
16481: PPUSH
16482: LD_INT 13
16484: PPUSH
16485: CALL_OW 113
// if not ru_alert_xy then
16489: LD_EXP 61
16493: NOT
16494: IFFALSE 16525
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16496: LD_ADDR_EXP 61
16500: PUSH
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 250
16510: PUSH
16511: LD_VAR 0 1
16515: PPUSH
16516: CALL_OW 251
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: ST_TO_ADDR
// end else
16525: GO 16596
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16527: LD_VAR 0 1
16531: PPUSH
16532: LD_VAR 0 4
16536: PPUSH
16537: LD_VAR 0 1
16541: PPUSH
16542: CALL_OW 74
16546: PPUSH
16547: CALL_OW 296
16551: PUSH
16552: LD_INT 9
16554: LESS
16555: PUSH
16556: LD_VAR 0 1
16560: PPUSH
16561: CALL_OW 256
16565: PUSH
16566: LD_INT 500
16568: GREATER
16569: AND
16570: IFFALSE 16596
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
16572: LD_VAR 0 1
16576: PPUSH
16577: LD_VAR 0 4
16581: PPUSH
16582: LD_VAR 0 1
16586: PPUSH
16587: CALL_OW 74
16591: PPUSH
16592: CALL_OW 115
// end ;
16596: GO 16197
16598: POP
16599: POP
// end ;
16600: PPOPN 4
16602: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
16603: LD_EXP 60
16607: PUSH
16608: LD_EXP 61
16612: AND
16613: PUSH
16614: LD_EXP 31
16618: NOT
16619: AND
16620: PUSH
16621: LD_EXP 32
16625: NOT
16626: AND
16627: IFFALSE 16837
16629: GO 16631
16631: DISABLE
16632: LD_INT 0
16634: PPUSH
16635: PPUSH
// begin enable ;
16636: ENABLE
// if not ru_vehicles then
16637: LD_EXP 56
16641: NOT
16642: IFFALSE 16646
// exit ;
16644: GO 16837
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16646: LD_ADDR_VAR 0 2
16650: PUSH
16651: LD_INT 81
16653: PUSH
16654: LD_INT 3
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PPUSH
16661: CALL_OW 69
16665: ST_TO_ADDR
// if ru_vehicles then
16666: LD_EXP 56
16670: IFFALSE 16837
// begin for i in ru_vehicles do
16672: LD_ADDR_VAR 0 1
16676: PUSH
16677: LD_EXP 56
16681: PUSH
16682: FOR_IN
16683: IFFALSE 16835
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
16685: LD_VAR 0 1
16689: PPUSH
16690: CALL_OW 302
16694: PUSH
16695: LD_VAR 0 1
16699: PPUSH
16700: LD_VAR 0 2
16704: PPUSH
16705: LD_VAR 0 1
16709: PPUSH
16710: CALL_OW 74
16714: PPUSH
16715: CALL_OW 296
16719: PUSH
16720: LD_INT 9
16722: LESS
16723: AND
16724: IFFALSE 16750
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
16726: LD_VAR 0 1
16730: PPUSH
16731: LD_VAR 0 2
16735: PPUSH
16736: LD_VAR 0 1
16740: PPUSH
16741: CALL_OW 74
16745: PPUSH
16746: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
16750: LD_VAR 0 1
16754: PPUSH
16755: CALL_OW 314
16759: NOT
16760: PUSH
16761: LD_VAR 0 1
16765: PPUSH
16766: CALL_OW 302
16770: AND
16771: PUSH
16772: LD_VAR 0 1
16776: PPUSH
16777: LD_EXP 61
16781: PUSH
16782: LD_INT 1
16784: ARRAY
16785: PPUSH
16786: LD_EXP 61
16790: PUSH
16791: LD_INT 2
16793: ARRAY
16794: PPUSH
16795: CALL_OW 297
16799: PUSH
16800: LD_INT 10
16802: GREATER
16803: AND
16804: IFFALSE 16833
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
16806: LD_VAR 0 1
16810: PPUSH
16811: LD_EXP 61
16815: PUSH
16816: LD_INT 1
16818: ARRAY
16819: PPUSH
16820: LD_EXP 61
16824: PUSH
16825: LD_INT 2
16827: ARRAY
16828: PPUSH
16829: CALL_OW 114
// end ;
16833: GO 16682
16835: POP
16836: POP
// end ; end ;
16837: PPOPN 2
16839: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
16840: LD_EXP 61
16844: PUSH
16845: LD_EXP 60
16849: AND
16850: PUSH
16851: LD_INT 3
16853: PPUSH
16854: CALL_OW 463
16858: NOT
16859: AND
16860: PUSH
16861: LD_EXP 31
16865: NOT
16866: AND
16867: PUSH
16868: LD_EXP 32
16872: NOT
16873: AND
16874: IFFALSE 16969
16876: GO 16878
16878: DISABLE
16879: LD_INT 0
16881: PPUSH
// begin enable ;
16882: ENABLE
// ru_alert_xy := false ;
16883: LD_ADDR_EXP 61
16887: PUSH
16888: LD_INT 0
16890: ST_TO_ADDR
// ru_alert := false ;
16891: LD_ADDR_EXP 60
16895: PUSH
16896: LD_INT 0
16898: ST_TO_ADDR
// if ru_vehicles then
16899: LD_EXP 56
16903: IFFALSE 16969
// for i in ru_vehicles do
16905: LD_ADDR_VAR 0 1
16909: PUSH
16910: LD_EXP 56
16914: PUSH
16915: FOR_IN
16916: IFFALSE 16967
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
16918: LD_VAR 0 1
16922: PPUSH
16923: CALL_OW 302
16927: PUSH
16928: LD_VAR 0 1
16932: PPUSH
16933: LD_INT 89
16935: PPUSH
16936: LD_INT 36
16938: PPUSH
16939: CALL_OW 297
16943: PUSH
16944: LD_INT 10
16946: GREATER
16947: AND
16948: IFFALSE 16965
// ComMoveXY ( i , 89 , 36 ) ;
16950: LD_VAR 0 1
16954: PPUSH
16955: LD_INT 89
16957: PPUSH
16958: LD_INT 36
16960: PPUSH
16961: CALL_OW 111
16965: GO 16915
16967: POP
16968: POP
// end ;
16969: PPOPN 1
16971: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
16972: LD_EXP 55
16976: PUSH
16977: LD_EXP 31
16981: NOT
16982: AND
16983: PUSH
16984: LD_EXP 32
16988: NOT
16989: AND
16990: IFFALSE 17274
16992: GO 16994
16994: DISABLE
16995: LD_INT 0
16997: PPUSH
16998: PPUSH
16999: PPUSH
// begin enable ;
17000: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17001: LD_ADDR_VAR 0 3
17005: PUSH
17006: LD_INT 81
17008: PUSH
17009: LD_INT 3
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PPUSH
17016: CALL_OW 69
17020: ST_TO_ADDR
// for i = 1 to ru_forest do
17021: LD_ADDR_VAR 0 1
17025: PUSH
17026: DOUBLE
17027: LD_INT 1
17029: DEC
17030: ST_TO_ADDR
17031: LD_EXP 55
17035: PUSH
17036: FOR_TO
17037: IFFALSE 17272
// begin un := ru_forest [ i ] ;
17039: LD_ADDR_VAR 0 2
17043: PUSH
17044: LD_EXP 55
17048: PUSH
17049: LD_VAR 0 1
17053: ARRAY
17054: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17055: LD_VAR 0 2
17059: PPUSH
17060: LD_INT 13
17062: PPUSH
17063: CALL_OW 308
17067: IFFALSE 17157
// begin if not See ( 1 , un ) then
17069: LD_INT 1
17071: PPUSH
17072: LD_VAR 0 2
17076: PPUSH
17077: CALL_OW 292
17081: NOT
17082: IFFALSE 17096
// SetLives ( un , 1000 ) ;
17084: LD_VAR 0 2
17088: PPUSH
17089: LD_INT 1000
17091: PPUSH
17092: CALL_OW 234
// ru_forest := ru_forest diff un ;
17096: LD_ADDR_EXP 55
17100: PUSH
17101: LD_EXP 55
17105: PUSH
17106: LD_VAR 0 2
17110: DIFF
17111: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17112: LD_VAR 0 2
17116: PPUSH
17117: LD_INT 22
17119: PUSH
17120: LD_INT 3
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 30
17129: PUSH
17130: LD_INT 4
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PPUSH
17141: CALL_OW 69
17145: PPUSH
17146: CALL 1007 0 1
17150: PPUSH
17151: CALL_OW 120
// continue ;
17155: GO 17036
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17157: LD_VAR 0 2
17161: PPUSH
17162: CALL_OW 256
17166: PUSH
17167: LD_INT 700
17169: LESS
17170: PUSH
17171: LD_VAR 0 2
17175: PPUSH
17176: LD_INT 13
17178: PPUSH
17179: CALL_OW 308
17183: NOT
17184: AND
17185: IFFALSE 17201
// ComMoveToArea ( un , retreatArea ) else
17187: LD_VAR 0 2
17191: PPUSH
17192: LD_INT 13
17194: PPUSH
17195: CALL_OW 113
17199: GO 17270
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17201: LD_VAR 0 2
17205: PPUSH
17206: LD_VAR 0 3
17210: PPUSH
17211: LD_VAR 0 2
17215: PPUSH
17216: CALL_OW 74
17220: PPUSH
17221: CALL_OW 296
17225: PUSH
17226: LD_INT 9
17228: LESS
17229: PUSH
17230: LD_VAR 0 2
17234: PPUSH
17235: CALL_OW 256
17239: PUSH
17240: LD_INT 500
17242: GREATER
17243: AND
17244: IFFALSE 17270
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17246: LD_VAR 0 2
17250: PPUSH
17251: LD_VAR 0 3
17255: PPUSH
17256: LD_VAR 0 2
17260: PPUSH
17261: CALL_OW 74
17265: PPUSH
17266: CALL_OW 115
// end ;
17270: GO 17036
17272: POP
17273: POP
// end ;
17274: PPOPN 3
17276: END
// every 0 0$10 trigger not send_attack_on_cornel do var i , filter ;
17277: LD_EXP 32
17281: NOT
17282: IFFALSE 17403
17284: GO 17286
17286: DISABLE
17287: LD_INT 0
17289: PPUSH
17290: PPUSH
// begin enable ;
17291: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
17292: LD_ADDR_VAR 0 2
17296: PUSH
17297: LD_INT 22
17299: PUSH
17300: LD_INT 3
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 21
17309: PUSH
17310: LD_INT 3
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PPUSH
17321: CALL_OW 69
17325: ST_TO_ADDR
// if filter then
17326: LD_VAR 0 2
17330: IFFALSE 17403
// for i in filter do
17332: LD_ADDR_VAR 0 1
17336: PUSH
17337: LD_VAR 0 2
17341: PUSH
17342: FOR_IN
17343: IFFALSE 17401
// if GetLives ( i ) < 990 then
17345: LD_VAR 0 1
17349: PPUSH
17350: CALL_OW 256
17354: PUSH
17355: LD_INT 990
17357: LESS
17358: IFFALSE 17399
// begin ru_alert := true ;
17360: LD_ADDR_EXP 60
17364: PUSH
17365: LD_INT 1
17367: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17368: LD_ADDR_EXP 61
17372: PUSH
17373: LD_VAR 0 1
17377: PPUSH
17378: CALL_OW 250
17382: PUSH
17383: LD_VAR 0 1
17387: PPUSH
17388: CALL_OW 251
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: ST_TO_ADDR
// break ;
17397: GO 17401
// end ;
17399: GO 17342
17401: POP
17402: POP
// end ;
17403: PPOPN 2
17405: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17406: LD_EXP 31
17410: IFFALSE 17559
17412: GO 17414
17414: DISABLE
17415: LD_INT 0
17417: PPUSH
17418: PPUSH
17419: PPUSH
17420: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17421: LD_ADDR_VAR 0 4
17425: PUSH
17426: LD_EXP 56
17430: PUSH
17431: LD_EXP 55
17435: ADD
17436: PUSH
17437: LD_EXP 53
17441: ADD
17442: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17443: LD_ADDR_VAR 0 3
17447: PUSH
17448: LD_INT 3
17450: PPUSH
17451: LD_INT 81
17453: PUSH
17454: LD_INT 3
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PPUSH
17461: CALL_OW 70
17465: ST_TO_ADDR
// if filter and enemy then
17466: LD_VAR 0 4
17470: PUSH
17471: LD_VAR 0 3
17475: AND
17476: IFFALSE 17559
// repeat wait ( 0 0$01 ) ;
17478: LD_INT 35
17480: PPUSH
17481: CALL_OW 67
// for i in filter do
17485: LD_ADDR_VAR 0 1
17489: PUSH
17490: LD_VAR 0 4
17494: PUSH
17495: FOR_IN
17496: IFFALSE 17524
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17498: LD_VAR 0 1
17502: PPUSH
17503: LD_VAR 0 3
17507: PPUSH
17508: LD_VAR 0 1
17512: PPUSH
17513: CALL_OW 74
17517: PPUSH
17518: CALL_OW 115
// end ;
17522: GO 17495
17524: POP
17525: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
17526: LD_INT 3
17528: PPUSH
17529: LD_INT 81
17531: PUSH
17532: LD_INT 3
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PPUSH
17539: CALL_OW 70
17543: PUSH
17544: LD_INT 0
17546: EQUAL
17547: PUSH
17548: LD_VAR 0 4
17552: PUSH
17553: LD_INT 0
17555: EQUAL
17556: OR
17557: IFFALSE 17478
// end ;
17559: PPOPN 4
17561: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
17562: LD_EXP 26
17566: PUSH
17567: LD_INT 22
17569: PUSH
17570: LD_INT 4
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 30
17579: PUSH
17580: LD_INT 4
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 3
17589: PUSH
17590: LD_INT 57
17592: PUSH
17593: EMPTY
17594: LIST
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: LIST
17604: PPUSH
17605: CALL_OW 69
17609: AND
17610: IFFALSE 17659
17612: GO 17614
17614: DISABLE
17615: LD_INT 0
17617: PPUSH
// begin if not ru_cornel_attack then
17618: LD_EXP 58
17622: NOT
17623: IFFALSE 17627
// exit ;
17625: GO 17659
// for i in ru_cornel_attack do
17627: LD_ADDR_VAR 0 1
17631: PUSH
17632: LD_EXP 58
17636: PUSH
17637: FOR_IN
17638: IFFALSE 17657
// ComAgressiveMove ( i , 258 , 119 ) ;
17640: LD_VAR 0 1
17644: PPUSH
17645: LD_INT 258
17647: PPUSH
17648: LD_INT 119
17650: PPUSH
17651: CALL_OW 114
17655: GO 17637
17657: POP
17658: POP
// end ; end_of_file
17659: PPOPN 1
17661: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
17662: LD_EXP 5
17666: PUSH
17667: LD_EXP 9
17671: NOT
17672: AND
17673: PUSH
17674: LD_EXP 20
17678: AND
17679: IFFALSE 17791
17681: GO 17683
17683: DISABLE
17684: LD_INT 0
17686: PPUSH
// begin enable ;
17687: ENABLE
// crates_counter := crates_counter - 50 ;
17688: LD_ADDR_EXP 20
17692: PUSH
17693: LD_EXP 20
17697: PUSH
17698: LD_INT 50
17700: MINUS
17701: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
17702: LD_INT 8
17704: PPUSH
17705: LD_INT 2
17707: PPUSH
17708: LD_INT 5
17710: PPUSH
17711: CALL_OW 12
17715: PPUSH
17716: LD_INT 1
17718: PPUSH
17719: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
17723: LD_INT 1785
17725: PPUSH
17726: LD_INT 2345
17728: PPUSH
17729: CALL_OW 12
17733: PPUSH
17734: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
17738: LD_ADDR_VAR 0 1
17742: PUSH
17743: LD_INT 1
17745: PPUSH
17746: LD_OWVAR 67
17750: PUSH
17751: LD_INT 2
17753: PLUS
17754: PPUSH
17755: CALL_OW 12
17759: ST_TO_ADDR
// if r < 3 then
17760: LD_VAR 0 1
17764: PUSH
17765: LD_INT 3
17767: LESS
17768: IFFALSE 17791
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
17770: LD_INT 4
17772: PPUSH
17773: LD_INT 1
17775: PPUSH
17776: LD_INT 5
17778: PPUSH
17779: CALL_OW 12
17783: PPUSH
17784: LD_INT 1
17786: PPUSH
17787: CALL_OW 55
// end ;
17791: PPOPN 1
17793: END
// every 0 0$01 trigger cornel_active do
17794: LD_EXP 8
17798: IFFALSE 17887
17800: GO 17802
17802: DISABLE
// begin Wait ( 0 0$03 ) ;
17803: LD_INT 105
17805: PPUSH
17806: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17810: LD_INT 2
17812: PPUSH
17813: LD_INT 5
17815: PPUSH
17816: CALL_OW 12
17820: PPUSH
17821: LD_INT 10
17823: PPUSH
17824: LD_INT 1
17826: PPUSH
17827: CALL_OW 55
// Wait ( 0 0$13 ) ;
17831: LD_INT 455
17833: PPUSH
17834: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17838: LD_INT 2
17840: PPUSH
17841: LD_INT 5
17843: PPUSH
17844: CALL_OW 12
17848: PPUSH
17849: LD_INT 10
17851: PPUSH
17852: LD_INT 1
17854: PPUSH
17855: CALL_OW 55
// Wait ( 0 0$16 ) ;
17859: LD_INT 560
17861: PPUSH
17862: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17866: LD_INT 2
17868: PPUSH
17869: LD_INT 5
17871: PPUSH
17872: CALL_OW 12
17876: PPUSH
17877: LD_INT 10
17879: PPUSH
17880: LD_INT 1
17882: PPUSH
17883: CALL_OW 55
// end ; end_of_file
17887: END
// every 0 0$01 trigger cornel_prepared do
17888: LD_EXP 11
17892: IFFALSE 17951
17894: GO 17896
17896: DISABLE
// begin enable ;
17897: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
17898: LD_ADDR_OWVAR 47
17902: PUSH
17903: LD_STRING #Am03-1
17905: PUSH
17906: LD_EXP 10
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
17915: LD_ADDR_EXP 10
17919: PUSH
17920: LD_EXP 10
17924: PPUSH
17925: LD_STRING -
17927: PPUSH
17928: CALL 1077 0 2
17932: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
17933: LD_EXP 10
17937: PUSH
17938: LD_INT 0
17940: EQUAL
17941: IFFALSE 17951
// begin Display_Strings := [ ] ;
17943: LD_ADDR_OWVAR 47
17947: PUSH
17948: EMPTY
17949: ST_TO_ADDR
// disable ;
17950: DISABLE
// end ; end ;
17951: END
// every 0 0$01 trigger debug and debug_strings do
17952: LD_EXP 1
17956: PUSH
17957: LD_OWVAR 48
17961: AND
17962: IFFALSE 17978
17964: GO 17966
17966: DISABLE
// begin enable ;
17967: ENABLE
// Display_Strings := debug_strings ;
17968: LD_ADDR_OWVAR 47
17972: PUSH
17973: LD_OWVAR 48
17977: ST_TO_ADDR
// end ; end_of_file
17978: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
17979: LD_VAR 0 1
17983: PPUSH
17984: LD_VAR 0 2
17988: PPUSH
17989: CALL 33289 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
17993: LD_VAR 0 1
17997: PPUSH
17998: CALL_OW 255
18002: PUSH
18003: LD_INT 1
18005: EQUAL
18006: PUSH
18007: LD_EXP 14
18011: NOT
18012: AND
18013: IFFALSE 18023
// solar_builded := true ;
18015: LD_ADDR_EXP 14
18019: PUSH
18020: LD_INT 1
18022: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18023: LD_VAR 0 1
18027: PPUSH
18028: CALL_OW 255
18032: PUSH
18033: LD_INT 1
18035: EQUAL
18036: PUSH
18037: LD_EXP 29
18041: AND
18042: IFFALSE 18079
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
18044: LD_ADDR_EXP 29
18048: PUSH
18049: LD_EXP 29
18053: PUSH
18054: LD_INT 1750
18056: PUSH
18057: LD_INT 1400
18059: PUSH
18060: LD_INT 1225
18062: PUSH
18063: LD_INT 1050
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: PUSH
18072: LD_OWVAR 67
18076: ARRAY
18077: PLUS
18078: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18079: LD_VAR 0 1
18083: PPUSH
18084: CALL_OW 255
18088: PUSH
18089: LD_INT 3
18091: EQUAL
18092: IFFALSE 18110
// ru_vehicles := ru_vehicles ^ veh ;
18094: LD_ADDR_EXP 56
18098: PUSH
18099: LD_EXP 56
18103: PUSH
18104: LD_VAR 0 1
18108: ADD
18109: ST_TO_ADDR
// end ;
18110: PPOPN 2
18112: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18113: LD_VAR 0 1
18117: PPUSH
18118: CALL 33167 0 1
// if un in ru_patrol then
18122: LD_VAR 0 1
18126: PUSH
18127: LD_EXP 53
18131: IN
18132: IFFALSE 18150
// ru_patrol := ru_patrol diff un ;
18134: LD_ADDR_EXP 53
18138: PUSH
18139: LD_EXP 53
18143: PUSH
18144: LD_VAR 0 1
18148: DIFF
18149: ST_TO_ADDR
// if un in ru_forest then
18150: LD_VAR 0 1
18154: PUSH
18155: LD_EXP 55
18159: IN
18160: IFFALSE 18178
// ru_forest := ru_forest diff un ;
18162: LD_ADDR_EXP 55
18166: PUSH
18167: LD_EXP 55
18171: PUSH
18172: LD_VAR 0 1
18176: DIFF
18177: ST_TO_ADDR
// if un in ru_vehicles then
18178: LD_VAR 0 1
18182: PUSH
18183: LD_EXP 56
18187: IN
18188: IFFALSE 18294
// begin ru_vehicles := ru_vehicles diff un ;
18190: LD_ADDR_EXP 56
18194: PUSH
18195: LD_EXP 56
18199: PUSH
18200: LD_VAR 0 1
18204: DIFF
18205: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18206: LD_ADDR_EXP 57
18210: PUSH
18211: LD_EXP 57
18215: PUSH
18216: LD_VAR 0 1
18220: PPUSH
18221: CALL_OW 265
18225: PUSH
18226: LD_VAR 0 1
18230: PPUSH
18231: CALL_OW 262
18235: PUSH
18236: LD_VAR 0 1
18240: PPUSH
18241: CALL_OW 263
18245: PUSH
18246: LD_VAR 0 1
18250: PPUSH
18251: CALL_OW 264
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: ADD
18262: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18263: LD_ADDR_EXP 13
18267: PUSH
18268: LD_EXP 13
18272: PUSH
18273: LD_INT 1
18275: PLUS
18276: ST_TO_ADDR
// if ach_counter = 10 then
18277: LD_EXP 13
18281: PUSH
18282: LD_INT 10
18284: EQUAL
18285: IFFALSE 18294
// SetAchievement ( ACH_FAUST ) ;
18287: LD_STRING ACH_FAUST
18289: PPUSH
18290: CALL_OW 543
// end ; if un = Pokryshkin then
18294: LD_VAR 0 1
18298: PUSH
18299: LD_EXP 52
18303: EQUAL
18304: IFFALSE 18313
// SetAchievement ( ACH_POKR ) ;
18306: LD_STRING ACH_POKR
18308: PPUSH
18309: CALL_OW 543
// if un = JMM then
18313: LD_VAR 0 1
18317: PUSH
18318: LD_EXP 37
18322: EQUAL
18323: IFFALSE 18332
// YouLost ( 0 ) ;
18325: LD_STRING 0
18327: PPUSH
18328: CALL_OW 104
// if un = us_dep_west then
18332: LD_VAR 0 1
18336: PUSH
18337: LD_INT 1
18339: EQUAL
18340: IFFALSE 18349
// YouLost ( 2 ) ;
18342: LD_STRING 2
18344: PPUSH
18345: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18349: LD_VAR 0 1
18353: PPUSH
18354: CALL_OW 255
18358: PUSH
18359: LD_INT 8
18361: EQUAL
18362: PUSH
18363: LD_EXP 5
18367: NOT
18368: AND
18369: IFFALSE 18378
// YouLost ( 4 ) ;
18371: LD_STRING 4
18373: PPUSH
18374: CALL_OW 104
// if un in jmm_units then
18378: LD_VAR 0 1
18382: PUSH
18383: LD_EXP 4
18387: IN
18388: IFFALSE 18404
// lose_counter := lose_counter + 1 ;
18390: LD_ADDR_EXP 34
18394: PUSH
18395: LD_EXP 34
18399: PUSH
18400: LD_INT 1
18402: PLUS
18403: ST_TO_ADDR
// end ;
18404: PPOPN 1
18406: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18407: LD_INT 0
18409: PPUSH
18410: PPUSH
// begin if GetSide ( driver ) = 3 then
18411: LD_VAR 0 1
18415: PPUSH
18416: CALL_OW 255
18420: PUSH
18421: LD_INT 3
18423: EQUAL
18424: IFFALSE 18502
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18426: LD_ADDR_VAR 0 6
18430: PUSH
18431: LD_INT 22
18433: PUSH
18434: LD_INT 3
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 30
18443: PUSH
18444: LD_INT 3
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PPUSH
18455: CALL_OW 69
18459: PPUSH
18460: CALL 1007 0 1
18464: ST_TO_ADDR
// if place then
18465: LD_VAR 0 6
18469: IFFALSE 18487
// ComEnterUnit ( driver , place ) else
18471: LD_VAR 0 1
18475: PPUSH
18476: LD_VAR 0 6
18480: PPUSH
18481: CALL_OW 120
18485: GO 18502
// ComMoveXY ( driver , 70 , 22 ) ;
18487: LD_VAR 0 1
18491: PPUSH
18492: LD_INT 70
18494: PPUSH
18495: LD_INT 22
18497: PPUSH
18498: CALL_OW 111
// end ; end ;
18502: PPOPN 6
18504: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
18505: LD_VAR 0 1
18509: PUSH
18510: LD_INT 1
18512: EQUAL
18513: PUSH
18514: LD_VAR 0 2
18518: PUSH
18519: LD_INT 4
18521: EQUAL
18522: PUSH
18523: LD_VAR 0 2
18527: PUSH
18528: LD_INT 8
18530: EQUAL
18531: PUSH
18532: LD_EXP 5
18536: NOT
18537: AND
18538: OR
18539: AND
18540: IFFALSE 18549
// YouLost ( 5 ) ;
18542: LD_STRING 5
18544: PPUSH
18545: CALL_OW 104
// end ;
18549: PPOPN 2
18551: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
18552: LD_EXP 36
18556: PUSH
18557: LD_INT 22
18559: PUSH
18560: LD_INT 1
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 21
18569: PUSH
18570: LD_INT 1
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PPUSH
18581: CALL_OW 69
18585: PUSH
18586: LD_INT 22
18588: PUSH
18589: LD_INT 8
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 21
18598: PUSH
18599: LD_INT 1
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PPUSH
18610: CALL_OW 69
18614: ADD
18615: PLUS
18616: PUSH
18617: LD_INT 5
18619: LESS
18620: IFFALSE 18632
18622: GO 18624
18624: DISABLE
// YouLost ( 1 ) ;
18625: LD_STRING 1
18627: PPUSH
18628: CALL_OW 104
18632: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
18633: LD_INT 1
18635: PPUSH
18636: CALL_OW 255
18640: PUSH
18641: LD_INT 3
18643: EQUAL
18644: IFFALSE 18656
18646: GO 18648
18648: DISABLE
// YouLost ( 3 ) ; end_of_file
18649: LD_STRING 3
18651: PPUSH
18652: CALL_OW 104
18656: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18657: LD_INT 0
18659: PPUSH
// ar_miner := 81 ;
18660: LD_ADDR_EXP 69
18664: PUSH
18665: LD_INT 81
18667: ST_TO_ADDR
// ar_crane := 88 ;
18668: LD_ADDR_EXP 68
18672: PUSH
18673: LD_INT 88
18675: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18676: LD_ADDR_EXP 63
18680: PUSH
18681: LD_INT 89
18683: ST_TO_ADDR
// us_hack := 99 ;
18684: LD_ADDR_EXP 64
18688: PUSH
18689: LD_INT 99
18691: ST_TO_ADDR
// us_artillery := 97 ;
18692: LD_ADDR_EXP 65
18696: PUSH
18697: LD_INT 97
18699: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18700: LD_ADDR_EXP 66
18704: PUSH
18705: LD_INT 91
18707: ST_TO_ADDR
// ar_mortar := 92 ;
18708: LD_ADDR_EXP 67
18712: PUSH
18713: LD_INT 92
18715: ST_TO_ADDR
// ru_flamethrower := 93 ;
18716: LD_ADDR_EXP 70
18720: PUSH
18721: LD_INT 93
18723: ST_TO_ADDR
// ru_radar := 98 ;
18724: LD_ADDR_EXP 62
18728: PUSH
18729: LD_INT 98
18731: ST_TO_ADDR
// tech_Artillery := 80 ;
18732: LD_ADDR_EXP 71
18736: PUSH
18737: LD_INT 80
18739: ST_TO_ADDR
// tech_RadMat := 81 ;
18740: LD_ADDR_EXP 72
18744: PUSH
18745: LD_INT 81
18747: ST_TO_ADDR
// tech_BasicTools := 82 ;
18748: LD_ADDR_EXP 73
18752: PUSH
18753: LD_INT 82
18755: ST_TO_ADDR
// tech_Cargo := 83 ;
18756: LD_ADDR_EXP 74
18760: PUSH
18761: LD_INT 83
18763: ST_TO_ADDR
// tech_Track := 84 ;
18764: LD_ADDR_EXP 75
18768: PUSH
18769: LD_INT 84
18771: ST_TO_ADDR
// tech_Crane := 85 ;
18772: LD_ADDR_EXP 76
18776: PUSH
18777: LD_INT 85
18779: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18780: LD_ADDR_EXP 77
18784: PUSH
18785: LD_INT 86
18787: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18788: LD_ADDR_EXP 78
18792: PUSH
18793: LD_INT 87
18795: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18796: LD_ADDR_EXP 79
18800: PUSH
18801: LD_INT 88
18803: ST_TO_ADDR
// class_mastodont := 31 ;
18804: LD_ADDR_EXP 80
18808: PUSH
18809: LD_INT 31
18811: ST_TO_ADDR
// class_horse := 21 ;
18812: LD_ADDR_EXP 81
18816: PUSH
18817: LD_INT 21
18819: ST_TO_ADDR
// end ;
18820: LD_VAR 0 1
18824: RET
// every 1 do
18825: GO 18827
18827: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18828: CALL 18657 0 0
18832: END
// every 0 0$1 do
18833: GO 18835
18835: DISABLE
// begin enable ;
18836: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18837: LD_STRING updateTimer(
18839: PUSH
18840: LD_OWVAR 1
18844: STR
18845: PUSH
18846: LD_STRING );
18848: STR
18849: PPUSH
18850: CALL_OW 559
// end ;
18854: END
// export function SOS_MapStart ( ) ; begin
18855: LD_INT 0
18857: PPUSH
// if streamModeActive then
18858: LD_EXP 82
18862: IFFALSE 18871
// DefineStreamItems ( true ) ;
18864: LD_INT 1
18866: PPUSH
18867: CALL 20521 0 1
// UpdateFactoryWaypoints ( ) ;
18871: CALL 34105 0 0
// end ;
18875: LD_VAR 0 1
18879: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18880: LD_INT 0
18882: PPUSH
// if p2 = 100 then
18883: LD_VAR 0 2
18887: PUSH
18888: LD_INT 100
18890: EQUAL
18891: IFFALSE 19894
// begin if not StreamModeActive then
18893: LD_EXP 82
18897: NOT
18898: IFFALSE 18908
// StreamModeActive := true ;
18900: LD_ADDR_EXP 82
18904: PUSH
18905: LD_INT 1
18907: ST_TO_ADDR
// if p3 = 0 then
18908: LD_VAR 0 3
18912: PUSH
18913: LD_INT 0
18915: EQUAL
18916: IFFALSE 18922
// InitStreamMode ;
18918: CALL 20057 0 0
// if p3 = 1 then
18922: LD_VAR 0 3
18926: PUSH
18927: LD_INT 1
18929: EQUAL
18930: IFFALSE 18940
// sRocket := true ;
18932: LD_ADDR_EXP 87
18936: PUSH
18937: LD_INT 1
18939: ST_TO_ADDR
// if p3 = 2 then
18940: LD_VAR 0 3
18944: PUSH
18945: LD_INT 2
18947: EQUAL
18948: IFFALSE 18958
// sSpeed := true ;
18950: LD_ADDR_EXP 86
18954: PUSH
18955: LD_INT 1
18957: ST_TO_ADDR
// if p3 = 3 then
18958: LD_VAR 0 3
18962: PUSH
18963: LD_INT 3
18965: EQUAL
18966: IFFALSE 18976
// sEngine := true ;
18968: LD_ADDR_EXP 88
18972: PUSH
18973: LD_INT 1
18975: ST_TO_ADDR
// if p3 = 4 then
18976: LD_VAR 0 3
18980: PUSH
18981: LD_INT 4
18983: EQUAL
18984: IFFALSE 18994
// sSpec := true ;
18986: LD_ADDR_EXP 85
18990: PUSH
18991: LD_INT 1
18993: ST_TO_ADDR
// if p3 = 5 then
18994: LD_VAR 0 3
18998: PUSH
18999: LD_INT 5
19001: EQUAL
19002: IFFALSE 19012
// sLevel := true ;
19004: LD_ADDR_EXP 89
19008: PUSH
19009: LD_INT 1
19011: ST_TO_ADDR
// if p3 = 6 then
19012: LD_VAR 0 3
19016: PUSH
19017: LD_INT 6
19019: EQUAL
19020: IFFALSE 19030
// sArmoury := true ;
19022: LD_ADDR_EXP 90
19026: PUSH
19027: LD_INT 1
19029: ST_TO_ADDR
// if p3 = 7 then
19030: LD_VAR 0 3
19034: PUSH
19035: LD_INT 7
19037: EQUAL
19038: IFFALSE 19048
// sRadar := true ;
19040: LD_ADDR_EXP 91
19044: PUSH
19045: LD_INT 1
19047: ST_TO_ADDR
// if p3 = 8 then
19048: LD_VAR 0 3
19052: PUSH
19053: LD_INT 8
19055: EQUAL
19056: IFFALSE 19066
// sBunker := true ;
19058: LD_ADDR_EXP 92
19062: PUSH
19063: LD_INT 1
19065: ST_TO_ADDR
// if p3 = 9 then
19066: LD_VAR 0 3
19070: PUSH
19071: LD_INT 9
19073: EQUAL
19074: IFFALSE 19084
// sHack := true ;
19076: LD_ADDR_EXP 93
19080: PUSH
19081: LD_INT 1
19083: ST_TO_ADDR
// if p3 = 10 then
19084: LD_VAR 0 3
19088: PUSH
19089: LD_INT 10
19091: EQUAL
19092: IFFALSE 19102
// sFire := true ;
19094: LD_ADDR_EXP 94
19098: PUSH
19099: LD_INT 1
19101: ST_TO_ADDR
// if p3 = 11 then
19102: LD_VAR 0 3
19106: PUSH
19107: LD_INT 11
19109: EQUAL
19110: IFFALSE 19120
// sRefresh := true ;
19112: LD_ADDR_EXP 95
19116: PUSH
19117: LD_INT 1
19119: ST_TO_ADDR
// if p3 = 12 then
19120: LD_VAR 0 3
19124: PUSH
19125: LD_INT 12
19127: EQUAL
19128: IFFALSE 19138
// sExp := true ;
19130: LD_ADDR_EXP 96
19134: PUSH
19135: LD_INT 1
19137: ST_TO_ADDR
// if p3 = 13 then
19138: LD_VAR 0 3
19142: PUSH
19143: LD_INT 13
19145: EQUAL
19146: IFFALSE 19156
// sDepot := true ;
19148: LD_ADDR_EXP 97
19152: PUSH
19153: LD_INT 1
19155: ST_TO_ADDR
// if p3 = 14 then
19156: LD_VAR 0 3
19160: PUSH
19161: LD_INT 14
19163: EQUAL
19164: IFFALSE 19174
// sFlag := true ;
19166: LD_ADDR_EXP 98
19170: PUSH
19171: LD_INT 1
19173: ST_TO_ADDR
// if p3 = 15 then
19174: LD_VAR 0 3
19178: PUSH
19179: LD_INT 15
19181: EQUAL
19182: IFFALSE 19192
// sKamikadze := true ;
19184: LD_ADDR_EXP 106
19188: PUSH
19189: LD_INT 1
19191: ST_TO_ADDR
// if p3 = 16 then
19192: LD_VAR 0 3
19196: PUSH
19197: LD_INT 16
19199: EQUAL
19200: IFFALSE 19210
// sTroll := true ;
19202: LD_ADDR_EXP 107
19206: PUSH
19207: LD_INT 1
19209: ST_TO_ADDR
// if p3 = 17 then
19210: LD_VAR 0 3
19214: PUSH
19215: LD_INT 17
19217: EQUAL
19218: IFFALSE 19228
// sSlow := true ;
19220: LD_ADDR_EXP 108
19224: PUSH
19225: LD_INT 1
19227: ST_TO_ADDR
// if p3 = 18 then
19228: LD_VAR 0 3
19232: PUSH
19233: LD_INT 18
19235: EQUAL
19236: IFFALSE 19246
// sLack := true ;
19238: LD_ADDR_EXP 109
19242: PUSH
19243: LD_INT 1
19245: ST_TO_ADDR
// if p3 = 19 then
19246: LD_VAR 0 3
19250: PUSH
19251: LD_INT 19
19253: EQUAL
19254: IFFALSE 19264
// sTank := true ;
19256: LD_ADDR_EXP 111
19260: PUSH
19261: LD_INT 1
19263: ST_TO_ADDR
// if p3 = 20 then
19264: LD_VAR 0 3
19268: PUSH
19269: LD_INT 20
19271: EQUAL
19272: IFFALSE 19282
// sRemote := true ;
19274: LD_ADDR_EXP 112
19278: PUSH
19279: LD_INT 1
19281: ST_TO_ADDR
// if p3 = 21 then
19282: LD_VAR 0 3
19286: PUSH
19287: LD_INT 21
19289: EQUAL
19290: IFFALSE 19300
// sPowell := true ;
19292: LD_ADDR_EXP 113
19296: PUSH
19297: LD_INT 1
19299: ST_TO_ADDR
// if p3 = 22 then
19300: LD_VAR 0 3
19304: PUSH
19305: LD_INT 22
19307: EQUAL
19308: IFFALSE 19318
// sTeleport := true ;
19310: LD_ADDR_EXP 116
19314: PUSH
19315: LD_INT 1
19317: ST_TO_ADDR
// if p3 = 23 then
19318: LD_VAR 0 3
19322: PUSH
19323: LD_INT 23
19325: EQUAL
19326: IFFALSE 19336
// sOilTower := true ;
19328: LD_ADDR_EXP 118
19332: PUSH
19333: LD_INT 1
19335: ST_TO_ADDR
// if p3 = 24 then
19336: LD_VAR 0 3
19340: PUSH
19341: LD_INT 24
19343: EQUAL
19344: IFFALSE 19354
// sShovel := true ;
19346: LD_ADDR_EXP 119
19350: PUSH
19351: LD_INT 1
19353: ST_TO_ADDR
// if p3 = 25 then
19354: LD_VAR 0 3
19358: PUSH
19359: LD_INT 25
19361: EQUAL
19362: IFFALSE 19372
// sSheik := true ;
19364: LD_ADDR_EXP 120
19368: PUSH
19369: LD_INT 1
19371: ST_TO_ADDR
// if p3 = 26 then
19372: LD_VAR 0 3
19376: PUSH
19377: LD_INT 26
19379: EQUAL
19380: IFFALSE 19390
// sEarthquake := true ;
19382: LD_ADDR_EXP 122
19386: PUSH
19387: LD_INT 1
19389: ST_TO_ADDR
// if p3 = 27 then
19390: LD_VAR 0 3
19394: PUSH
19395: LD_INT 27
19397: EQUAL
19398: IFFALSE 19408
// sAI := true ;
19400: LD_ADDR_EXP 123
19404: PUSH
19405: LD_INT 1
19407: ST_TO_ADDR
// if p3 = 28 then
19408: LD_VAR 0 3
19412: PUSH
19413: LD_INT 28
19415: EQUAL
19416: IFFALSE 19426
// sCargo := true ;
19418: LD_ADDR_EXP 126
19422: PUSH
19423: LD_INT 1
19425: ST_TO_ADDR
// if p3 = 29 then
19426: LD_VAR 0 3
19430: PUSH
19431: LD_INT 29
19433: EQUAL
19434: IFFALSE 19444
// sDLaser := true ;
19436: LD_ADDR_EXP 127
19440: PUSH
19441: LD_INT 1
19443: ST_TO_ADDR
// if p3 = 30 then
19444: LD_VAR 0 3
19448: PUSH
19449: LD_INT 30
19451: EQUAL
19452: IFFALSE 19462
// sExchange := true ;
19454: LD_ADDR_EXP 128
19458: PUSH
19459: LD_INT 1
19461: ST_TO_ADDR
// if p3 = 31 then
19462: LD_VAR 0 3
19466: PUSH
19467: LD_INT 31
19469: EQUAL
19470: IFFALSE 19480
// sFac := true ;
19472: LD_ADDR_EXP 129
19476: PUSH
19477: LD_INT 1
19479: ST_TO_ADDR
// if p3 = 32 then
19480: LD_VAR 0 3
19484: PUSH
19485: LD_INT 32
19487: EQUAL
19488: IFFALSE 19498
// sPower := true ;
19490: LD_ADDR_EXP 130
19494: PUSH
19495: LD_INT 1
19497: ST_TO_ADDR
// if p3 = 33 then
19498: LD_VAR 0 3
19502: PUSH
19503: LD_INT 33
19505: EQUAL
19506: IFFALSE 19516
// sRandom := true ;
19508: LD_ADDR_EXP 131
19512: PUSH
19513: LD_INT 1
19515: ST_TO_ADDR
// if p3 = 34 then
19516: LD_VAR 0 3
19520: PUSH
19521: LD_INT 34
19523: EQUAL
19524: IFFALSE 19534
// sShield := true ;
19526: LD_ADDR_EXP 132
19530: PUSH
19531: LD_INT 1
19533: ST_TO_ADDR
// if p3 = 35 then
19534: LD_VAR 0 3
19538: PUSH
19539: LD_INT 35
19541: EQUAL
19542: IFFALSE 19552
// sTime := true ;
19544: LD_ADDR_EXP 133
19548: PUSH
19549: LD_INT 1
19551: ST_TO_ADDR
// if p3 = 36 then
19552: LD_VAR 0 3
19556: PUSH
19557: LD_INT 36
19559: EQUAL
19560: IFFALSE 19570
// sTools := true ;
19562: LD_ADDR_EXP 134
19566: PUSH
19567: LD_INT 1
19569: ST_TO_ADDR
// if p3 = 101 then
19570: LD_VAR 0 3
19574: PUSH
19575: LD_INT 101
19577: EQUAL
19578: IFFALSE 19588
// sSold := true ;
19580: LD_ADDR_EXP 99
19584: PUSH
19585: LD_INT 1
19587: ST_TO_ADDR
// if p3 = 102 then
19588: LD_VAR 0 3
19592: PUSH
19593: LD_INT 102
19595: EQUAL
19596: IFFALSE 19606
// sDiff := true ;
19598: LD_ADDR_EXP 100
19602: PUSH
19603: LD_INT 1
19605: ST_TO_ADDR
// if p3 = 103 then
19606: LD_VAR 0 3
19610: PUSH
19611: LD_INT 103
19613: EQUAL
19614: IFFALSE 19624
// sFog := true ;
19616: LD_ADDR_EXP 103
19620: PUSH
19621: LD_INT 1
19623: ST_TO_ADDR
// if p3 = 104 then
19624: LD_VAR 0 3
19628: PUSH
19629: LD_INT 104
19631: EQUAL
19632: IFFALSE 19642
// sReset := true ;
19634: LD_ADDR_EXP 104
19638: PUSH
19639: LD_INT 1
19641: ST_TO_ADDR
// if p3 = 105 then
19642: LD_VAR 0 3
19646: PUSH
19647: LD_INT 105
19649: EQUAL
19650: IFFALSE 19660
// sSun := true ;
19652: LD_ADDR_EXP 105
19656: PUSH
19657: LD_INT 1
19659: ST_TO_ADDR
// if p3 = 106 then
19660: LD_VAR 0 3
19664: PUSH
19665: LD_INT 106
19667: EQUAL
19668: IFFALSE 19678
// sTiger := true ;
19670: LD_ADDR_EXP 101
19674: PUSH
19675: LD_INT 1
19677: ST_TO_ADDR
// if p3 = 107 then
19678: LD_VAR 0 3
19682: PUSH
19683: LD_INT 107
19685: EQUAL
19686: IFFALSE 19696
// sBomb := true ;
19688: LD_ADDR_EXP 102
19692: PUSH
19693: LD_INT 1
19695: ST_TO_ADDR
// if p3 = 108 then
19696: LD_VAR 0 3
19700: PUSH
19701: LD_INT 108
19703: EQUAL
19704: IFFALSE 19714
// sWound := true ;
19706: LD_ADDR_EXP 110
19710: PUSH
19711: LD_INT 1
19713: ST_TO_ADDR
// if p3 = 109 then
19714: LD_VAR 0 3
19718: PUSH
19719: LD_INT 109
19721: EQUAL
19722: IFFALSE 19732
// sBetray := true ;
19724: LD_ADDR_EXP 114
19728: PUSH
19729: LD_INT 1
19731: ST_TO_ADDR
// if p3 = 110 then
19732: LD_VAR 0 3
19736: PUSH
19737: LD_INT 110
19739: EQUAL
19740: IFFALSE 19750
// sContamin := true ;
19742: LD_ADDR_EXP 115
19746: PUSH
19747: LD_INT 1
19749: ST_TO_ADDR
// if p3 = 111 then
19750: LD_VAR 0 3
19754: PUSH
19755: LD_INT 111
19757: EQUAL
19758: IFFALSE 19768
// sOil := true ;
19760: LD_ADDR_EXP 117
19764: PUSH
19765: LD_INT 1
19767: ST_TO_ADDR
// if p3 = 112 then
19768: LD_VAR 0 3
19772: PUSH
19773: LD_INT 112
19775: EQUAL
19776: IFFALSE 19786
// sStu := true ;
19778: LD_ADDR_EXP 121
19782: PUSH
19783: LD_INT 1
19785: ST_TO_ADDR
// if p3 = 113 then
19786: LD_VAR 0 3
19790: PUSH
19791: LD_INT 113
19793: EQUAL
19794: IFFALSE 19804
// sBazooka := true ;
19796: LD_ADDR_EXP 124
19800: PUSH
19801: LD_INT 1
19803: ST_TO_ADDR
// if p3 = 114 then
19804: LD_VAR 0 3
19808: PUSH
19809: LD_INT 114
19811: EQUAL
19812: IFFALSE 19822
// sMortar := true ;
19814: LD_ADDR_EXP 125
19818: PUSH
19819: LD_INT 1
19821: ST_TO_ADDR
// if p3 = 115 then
19822: LD_VAR 0 3
19826: PUSH
19827: LD_INT 115
19829: EQUAL
19830: IFFALSE 19840
// sRanger := true ;
19832: LD_ADDR_EXP 135
19836: PUSH
19837: LD_INT 1
19839: ST_TO_ADDR
// if p3 = 116 then
19840: LD_VAR 0 3
19844: PUSH
19845: LD_INT 116
19847: EQUAL
19848: IFFALSE 19858
// sComputer := true ;
19850: LD_ADDR_EXP 136
19854: PUSH
19855: LD_INT 1
19857: ST_TO_ADDR
// if p3 = 117 then
19858: LD_VAR 0 3
19862: PUSH
19863: LD_INT 117
19865: EQUAL
19866: IFFALSE 19876
// s30 := true ;
19868: LD_ADDR_EXP 137
19872: PUSH
19873: LD_INT 1
19875: ST_TO_ADDR
// if p3 = 118 then
19876: LD_VAR 0 3
19880: PUSH
19881: LD_INT 118
19883: EQUAL
19884: IFFALSE 19894
// s60 := true ;
19886: LD_ADDR_EXP 138
19890: PUSH
19891: LD_INT 1
19893: ST_TO_ADDR
// end ; if p2 = 101 then
19894: LD_VAR 0 2
19898: PUSH
19899: LD_INT 101
19901: EQUAL
19902: IFFALSE 20030
// begin case p3 of 1 :
19904: LD_VAR 0 3
19908: PUSH
19909: LD_INT 1
19911: DOUBLE
19912: EQUAL
19913: IFTRUE 19917
19915: GO 19924
19917: POP
// hHackUnlimitedResources ; 2 :
19918: CALL 32128 0 0
19922: GO 20030
19924: LD_INT 2
19926: DOUBLE
19927: EQUAL
19928: IFTRUE 19932
19930: GO 19939
19932: POP
// hHackSetLevel10 ; 3 :
19933: CALL 32261 0 0
19937: GO 20030
19939: LD_INT 3
19941: DOUBLE
19942: EQUAL
19943: IFTRUE 19947
19945: GO 19954
19947: POP
// hHackSetLevel10YourUnits ; 4 :
19948: CALL 32346 0 0
19952: GO 20030
19954: LD_INT 4
19956: DOUBLE
19957: EQUAL
19958: IFTRUE 19962
19960: GO 19969
19962: POP
// hHackInvincible ; 5 :
19963: CALL 32794 0 0
19967: GO 20030
19969: LD_INT 5
19971: DOUBLE
19972: EQUAL
19973: IFTRUE 19977
19975: GO 19984
19977: POP
// hHackInvisible ; 6 :
19978: CALL 32905 0 0
19982: GO 20030
19984: LD_INT 6
19986: DOUBLE
19987: EQUAL
19988: IFTRUE 19992
19990: GO 19999
19992: POP
// hHackChangeYourSide ; 7 :
19993: CALL 32962 0 0
19997: GO 20030
19999: LD_INT 7
20001: DOUBLE
20002: EQUAL
20003: IFTRUE 20007
20005: GO 20014
20007: POP
// hHackChangeUnitSide ; 8 :
20008: CALL 33004 0 0
20012: GO 20030
20014: LD_INT 8
20016: DOUBLE
20017: EQUAL
20018: IFTRUE 20022
20020: GO 20029
20022: POP
// hHackFog ; end ;
20023: CALL 33105 0 0
20027: GO 20030
20029: POP
// end ; end ;
20030: LD_VAR 0 7
20034: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20035: GO 20037
20037: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20038: LD_STRING initStreamRollete();
20040: PPUSH
20041: CALL_OW 559
// InitStreamMode ;
20045: CALL 20057 0 0
// DefineStreamItems ( false ) ;
20049: LD_INT 0
20051: PPUSH
20052: CALL 20521 0 1
// end ;
20056: END
// function InitStreamMode ; begin
20057: LD_INT 0
20059: PPUSH
// streamModeActive := false ;
20060: LD_ADDR_EXP 82
20064: PUSH
20065: LD_INT 0
20067: ST_TO_ADDR
// normalCounter := 36 ;
20068: LD_ADDR_EXP 83
20072: PUSH
20073: LD_INT 36
20075: ST_TO_ADDR
// hardcoreCounter := 18 ;
20076: LD_ADDR_EXP 84
20080: PUSH
20081: LD_INT 18
20083: ST_TO_ADDR
// sRocket := false ;
20084: LD_ADDR_EXP 87
20088: PUSH
20089: LD_INT 0
20091: ST_TO_ADDR
// sSpeed := false ;
20092: LD_ADDR_EXP 86
20096: PUSH
20097: LD_INT 0
20099: ST_TO_ADDR
// sEngine := false ;
20100: LD_ADDR_EXP 88
20104: PUSH
20105: LD_INT 0
20107: ST_TO_ADDR
// sSpec := false ;
20108: LD_ADDR_EXP 85
20112: PUSH
20113: LD_INT 0
20115: ST_TO_ADDR
// sLevel := false ;
20116: LD_ADDR_EXP 89
20120: PUSH
20121: LD_INT 0
20123: ST_TO_ADDR
// sArmoury := false ;
20124: LD_ADDR_EXP 90
20128: PUSH
20129: LD_INT 0
20131: ST_TO_ADDR
// sRadar := false ;
20132: LD_ADDR_EXP 91
20136: PUSH
20137: LD_INT 0
20139: ST_TO_ADDR
// sBunker := false ;
20140: LD_ADDR_EXP 92
20144: PUSH
20145: LD_INT 0
20147: ST_TO_ADDR
// sHack := false ;
20148: LD_ADDR_EXP 93
20152: PUSH
20153: LD_INT 0
20155: ST_TO_ADDR
// sFire := false ;
20156: LD_ADDR_EXP 94
20160: PUSH
20161: LD_INT 0
20163: ST_TO_ADDR
// sRefresh := false ;
20164: LD_ADDR_EXP 95
20168: PUSH
20169: LD_INT 0
20171: ST_TO_ADDR
// sExp := false ;
20172: LD_ADDR_EXP 96
20176: PUSH
20177: LD_INT 0
20179: ST_TO_ADDR
// sDepot := false ;
20180: LD_ADDR_EXP 97
20184: PUSH
20185: LD_INT 0
20187: ST_TO_ADDR
// sFlag := false ;
20188: LD_ADDR_EXP 98
20192: PUSH
20193: LD_INT 0
20195: ST_TO_ADDR
// sKamikadze := false ;
20196: LD_ADDR_EXP 106
20200: PUSH
20201: LD_INT 0
20203: ST_TO_ADDR
// sTroll := false ;
20204: LD_ADDR_EXP 107
20208: PUSH
20209: LD_INT 0
20211: ST_TO_ADDR
// sSlow := false ;
20212: LD_ADDR_EXP 108
20216: PUSH
20217: LD_INT 0
20219: ST_TO_ADDR
// sLack := false ;
20220: LD_ADDR_EXP 109
20224: PUSH
20225: LD_INT 0
20227: ST_TO_ADDR
// sTank := false ;
20228: LD_ADDR_EXP 111
20232: PUSH
20233: LD_INT 0
20235: ST_TO_ADDR
// sRemote := false ;
20236: LD_ADDR_EXP 112
20240: PUSH
20241: LD_INT 0
20243: ST_TO_ADDR
// sPowell := false ;
20244: LD_ADDR_EXP 113
20248: PUSH
20249: LD_INT 0
20251: ST_TO_ADDR
// sTeleport := false ;
20252: LD_ADDR_EXP 116
20256: PUSH
20257: LD_INT 0
20259: ST_TO_ADDR
// sOilTower := false ;
20260: LD_ADDR_EXP 118
20264: PUSH
20265: LD_INT 0
20267: ST_TO_ADDR
// sShovel := false ;
20268: LD_ADDR_EXP 119
20272: PUSH
20273: LD_INT 0
20275: ST_TO_ADDR
// sSheik := false ;
20276: LD_ADDR_EXP 120
20280: PUSH
20281: LD_INT 0
20283: ST_TO_ADDR
// sEarthquake := false ;
20284: LD_ADDR_EXP 122
20288: PUSH
20289: LD_INT 0
20291: ST_TO_ADDR
// sAI := false ;
20292: LD_ADDR_EXP 123
20296: PUSH
20297: LD_INT 0
20299: ST_TO_ADDR
// sCargo := false ;
20300: LD_ADDR_EXP 126
20304: PUSH
20305: LD_INT 0
20307: ST_TO_ADDR
// sDLaser := false ;
20308: LD_ADDR_EXP 127
20312: PUSH
20313: LD_INT 0
20315: ST_TO_ADDR
// sExchange := false ;
20316: LD_ADDR_EXP 128
20320: PUSH
20321: LD_INT 0
20323: ST_TO_ADDR
// sFac := false ;
20324: LD_ADDR_EXP 129
20328: PUSH
20329: LD_INT 0
20331: ST_TO_ADDR
// sPower := false ;
20332: LD_ADDR_EXP 130
20336: PUSH
20337: LD_INT 0
20339: ST_TO_ADDR
// sRandom := false ;
20340: LD_ADDR_EXP 131
20344: PUSH
20345: LD_INT 0
20347: ST_TO_ADDR
// sShield := false ;
20348: LD_ADDR_EXP 132
20352: PUSH
20353: LD_INT 0
20355: ST_TO_ADDR
// sTime := false ;
20356: LD_ADDR_EXP 133
20360: PUSH
20361: LD_INT 0
20363: ST_TO_ADDR
// sTools := false ;
20364: LD_ADDR_EXP 134
20368: PUSH
20369: LD_INT 0
20371: ST_TO_ADDR
// sSold := false ;
20372: LD_ADDR_EXP 99
20376: PUSH
20377: LD_INT 0
20379: ST_TO_ADDR
// sDiff := false ;
20380: LD_ADDR_EXP 100
20384: PUSH
20385: LD_INT 0
20387: ST_TO_ADDR
// sFog := false ;
20388: LD_ADDR_EXP 103
20392: PUSH
20393: LD_INT 0
20395: ST_TO_ADDR
// sReset := false ;
20396: LD_ADDR_EXP 104
20400: PUSH
20401: LD_INT 0
20403: ST_TO_ADDR
// sSun := false ;
20404: LD_ADDR_EXP 105
20408: PUSH
20409: LD_INT 0
20411: ST_TO_ADDR
// sTiger := false ;
20412: LD_ADDR_EXP 101
20416: PUSH
20417: LD_INT 0
20419: ST_TO_ADDR
// sBomb := false ;
20420: LD_ADDR_EXP 102
20424: PUSH
20425: LD_INT 0
20427: ST_TO_ADDR
// sWound := false ;
20428: LD_ADDR_EXP 110
20432: PUSH
20433: LD_INT 0
20435: ST_TO_ADDR
// sBetray := false ;
20436: LD_ADDR_EXP 114
20440: PUSH
20441: LD_INT 0
20443: ST_TO_ADDR
// sContamin := false ;
20444: LD_ADDR_EXP 115
20448: PUSH
20449: LD_INT 0
20451: ST_TO_ADDR
// sOil := false ;
20452: LD_ADDR_EXP 117
20456: PUSH
20457: LD_INT 0
20459: ST_TO_ADDR
// sStu := false ;
20460: LD_ADDR_EXP 121
20464: PUSH
20465: LD_INT 0
20467: ST_TO_ADDR
// sBazooka := false ;
20468: LD_ADDR_EXP 124
20472: PUSH
20473: LD_INT 0
20475: ST_TO_ADDR
// sMortar := false ;
20476: LD_ADDR_EXP 125
20480: PUSH
20481: LD_INT 0
20483: ST_TO_ADDR
// sRanger := false ;
20484: LD_ADDR_EXP 135
20488: PUSH
20489: LD_INT 0
20491: ST_TO_ADDR
// sComputer := false ;
20492: LD_ADDR_EXP 136
20496: PUSH
20497: LD_INT 0
20499: ST_TO_ADDR
// s30 := false ;
20500: LD_ADDR_EXP 137
20504: PUSH
20505: LD_INT 0
20507: ST_TO_ADDR
// s60 := false ;
20508: LD_ADDR_EXP 138
20512: PUSH
20513: LD_INT 0
20515: ST_TO_ADDR
// end ;
20516: LD_VAR 0 1
20520: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20521: LD_INT 0
20523: PPUSH
20524: PPUSH
20525: PPUSH
20526: PPUSH
20527: PPUSH
20528: PPUSH
20529: PPUSH
// result := [ ] ;
20530: LD_ADDR_VAR 0 2
20534: PUSH
20535: EMPTY
20536: ST_TO_ADDR
// if campaign_id = 1 then
20537: LD_OWVAR 69
20541: PUSH
20542: LD_INT 1
20544: EQUAL
20545: IFFALSE 23711
// begin case mission_number of 1 :
20547: LD_OWVAR 70
20551: PUSH
20552: LD_INT 1
20554: DOUBLE
20555: EQUAL
20556: IFTRUE 20560
20558: GO 20636
20560: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20561: LD_ADDR_VAR 0 2
20565: PUSH
20566: LD_INT 2
20568: PUSH
20569: LD_INT 4
20571: PUSH
20572: LD_INT 11
20574: PUSH
20575: LD_INT 12
20577: PUSH
20578: LD_INT 15
20580: PUSH
20581: LD_INT 16
20583: PUSH
20584: LD_INT 22
20586: PUSH
20587: LD_INT 23
20589: PUSH
20590: LD_INT 26
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 101
20606: PUSH
20607: LD_INT 102
20609: PUSH
20610: LD_INT 106
20612: PUSH
20613: LD_INT 116
20615: PUSH
20616: LD_INT 117
20618: PUSH
20619: LD_INT 118
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: ST_TO_ADDR
20634: GO 23709
20636: LD_INT 2
20638: DOUBLE
20639: EQUAL
20640: IFTRUE 20644
20642: GO 20728
20644: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20645: LD_ADDR_VAR 0 2
20649: PUSH
20650: LD_INT 2
20652: PUSH
20653: LD_INT 4
20655: PUSH
20656: LD_INT 11
20658: PUSH
20659: LD_INT 12
20661: PUSH
20662: LD_INT 15
20664: PUSH
20665: LD_INT 16
20667: PUSH
20668: LD_INT 22
20670: PUSH
20671: LD_INT 23
20673: PUSH
20674: LD_INT 26
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 101
20690: PUSH
20691: LD_INT 102
20693: PUSH
20694: LD_INT 105
20696: PUSH
20697: LD_INT 106
20699: PUSH
20700: LD_INT 108
20702: PUSH
20703: LD_INT 116
20705: PUSH
20706: LD_INT 117
20708: PUSH
20709: LD_INT 118
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: ST_TO_ADDR
20726: GO 23709
20728: LD_INT 3
20730: DOUBLE
20731: EQUAL
20732: IFTRUE 20736
20734: GO 20824
20736: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20737: LD_ADDR_VAR 0 2
20741: PUSH
20742: LD_INT 2
20744: PUSH
20745: LD_INT 4
20747: PUSH
20748: LD_INT 5
20750: PUSH
20751: LD_INT 11
20753: PUSH
20754: LD_INT 12
20756: PUSH
20757: LD_INT 15
20759: PUSH
20760: LD_INT 16
20762: PUSH
20763: LD_INT 22
20765: PUSH
20766: LD_INT 26
20768: PUSH
20769: LD_INT 36
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 101
20786: PUSH
20787: LD_INT 102
20789: PUSH
20790: LD_INT 105
20792: PUSH
20793: LD_INT 106
20795: PUSH
20796: LD_INT 108
20798: PUSH
20799: LD_INT 116
20801: PUSH
20802: LD_INT 117
20804: PUSH
20805: LD_INT 118
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: ST_TO_ADDR
20822: GO 23709
20824: LD_INT 4
20826: DOUBLE
20827: EQUAL
20828: IFTRUE 20832
20830: GO 20928
20832: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20833: LD_ADDR_VAR 0 2
20837: PUSH
20838: LD_INT 2
20840: PUSH
20841: LD_INT 4
20843: PUSH
20844: LD_INT 5
20846: PUSH
20847: LD_INT 8
20849: PUSH
20850: LD_INT 11
20852: PUSH
20853: LD_INT 12
20855: PUSH
20856: LD_INT 15
20858: PUSH
20859: LD_INT 16
20861: PUSH
20862: LD_INT 22
20864: PUSH
20865: LD_INT 23
20867: PUSH
20868: LD_INT 26
20870: PUSH
20871: LD_INT 36
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 101
20890: PUSH
20891: LD_INT 102
20893: PUSH
20894: LD_INT 105
20896: PUSH
20897: LD_INT 106
20899: PUSH
20900: LD_INT 108
20902: PUSH
20903: LD_INT 116
20905: PUSH
20906: LD_INT 117
20908: PUSH
20909: LD_INT 118
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: ST_TO_ADDR
20926: GO 23709
20928: LD_INT 5
20930: DOUBLE
20931: EQUAL
20932: IFTRUE 20936
20934: GO 21048
20936: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20937: LD_ADDR_VAR 0 2
20941: PUSH
20942: LD_INT 2
20944: PUSH
20945: LD_INT 4
20947: PUSH
20948: LD_INT 5
20950: PUSH
20951: LD_INT 6
20953: PUSH
20954: LD_INT 8
20956: PUSH
20957: LD_INT 11
20959: PUSH
20960: LD_INT 12
20962: PUSH
20963: LD_INT 15
20965: PUSH
20966: LD_INT 16
20968: PUSH
20969: LD_INT 22
20971: PUSH
20972: LD_INT 23
20974: PUSH
20975: LD_INT 25
20977: PUSH
20978: LD_INT 26
20980: PUSH
20981: LD_INT 36
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 101
21002: PUSH
21003: LD_INT 102
21005: PUSH
21006: LD_INT 105
21008: PUSH
21009: LD_INT 106
21011: PUSH
21012: LD_INT 108
21014: PUSH
21015: LD_INT 109
21017: PUSH
21018: LD_INT 112
21020: PUSH
21021: LD_INT 116
21023: PUSH
21024: LD_INT 117
21026: PUSH
21027: LD_INT 118
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: ST_TO_ADDR
21046: GO 23709
21048: LD_INT 6
21050: DOUBLE
21051: EQUAL
21052: IFTRUE 21056
21054: GO 21188
21056: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21057: LD_ADDR_VAR 0 2
21061: PUSH
21062: LD_INT 2
21064: PUSH
21065: LD_INT 4
21067: PUSH
21068: LD_INT 5
21070: PUSH
21071: LD_INT 6
21073: PUSH
21074: LD_INT 8
21076: PUSH
21077: LD_INT 11
21079: PUSH
21080: LD_INT 12
21082: PUSH
21083: LD_INT 15
21085: PUSH
21086: LD_INT 16
21088: PUSH
21089: LD_INT 20
21091: PUSH
21092: LD_INT 21
21094: PUSH
21095: LD_INT 22
21097: PUSH
21098: LD_INT 23
21100: PUSH
21101: LD_INT 25
21103: PUSH
21104: LD_INT 26
21106: PUSH
21107: LD_INT 30
21109: PUSH
21110: LD_INT 31
21112: PUSH
21113: LD_INT 32
21115: PUSH
21116: LD_INT 36
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 101
21142: PUSH
21143: LD_INT 102
21145: PUSH
21146: LD_INT 105
21148: PUSH
21149: LD_INT 106
21151: PUSH
21152: LD_INT 108
21154: PUSH
21155: LD_INT 109
21157: PUSH
21158: LD_INT 112
21160: PUSH
21161: LD_INT 116
21163: PUSH
21164: LD_INT 117
21166: PUSH
21167: LD_INT 118
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: ST_TO_ADDR
21186: GO 23709
21188: LD_INT 7
21190: DOUBLE
21191: EQUAL
21192: IFTRUE 21196
21194: GO 21308
21196: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21197: LD_ADDR_VAR 0 2
21201: PUSH
21202: LD_INT 2
21204: PUSH
21205: LD_INT 4
21207: PUSH
21208: LD_INT 5
21210: PUSH
21211: LD_INT 7
21213: PUSH
21214: LD_INT 11
21216: PUSH
21217: LD_INT 12
21219: PUSH
21220: LD_INT 15
21222: PUSH
21223: LD_INT 16
21225: PUSH
21226: LD_INT 20
21228: PUSH
21229: LD_INT 21
21231: PUSH
21232: LD_INT 22
21234: PUSH
21235: LD_INT 23
21237: PUSH
21238: LD_INT 25
21240: PUSH
21241: LD_INT 26
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 101
21262: PUSH
21263: LD_INT 102
21265: PUSH
21266: LD_INT 103
21268: PUSH
21269: LD_INT 105
21271: PUSH
21272: LD_INT 106
21274: PUSH
21275: LD_INT 108
21277: PUSH
21278: LD_INT 112
21280: PUSH
21281: LD_INT 116
21283: PUSH
21284: LD_INT 117
21286: PUSH
21287: LD_INT 118
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: ST_TO_ADDR
21306: GO 23709
21308: LD_INT 8
21310: DOUBLE
21311: EQUAL
21312: IFTRUE 21316
21314: GO 21456
21316: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21317: LD_ADDR_VAR 0 2
21321: PUSH
21322: LD_INT 2
21324: PUSH
21325: LD_INT 4
21327: PUSH
21328: LD_INT 5
21330: PUSH
21331: LD_INT 6
21333: PUSH
21334: LD_INT 7
21336: PUSH
21337: LD_INT 8
21339: PUSH
21340: LD_INT 11
21342: PUSH
21343: LD_INT 12
21345: PUSH
21346: LD_INT 15
21348: PUSH
21349: LD_INT 16
21351: PUSH
21352: LD_INT 20
21354: PUSH
21355: LD_INT 21
21357: PUSH
21358: LD_INT 22
21360: PUSH
21361: LD_INT 23
21363: PUSH
21364: LD_INT 25
21366: PUSH
21367: LD_INT 26
21369: PUSH
21370: LD_INT 30
21372: PUSH
21373: LD_INT 31
21375: PUSH
21376: LD_INT 32
21378: PUSH
21379: LD_INT 36
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 101
21406: PUSH
21407: LD_INT 102
21409: PUSH
21410: LD_INT 103
21412: PUSH
21413: LD_INT 105
21415: PUSH
21416: LD_INT 106
21418: PUSH
21419: LD_INT 108
21421: PUSH
21422: LD_INT 109
21424: PUSH
21425: LD_INT 112
21427: PUSH
21428: LD_INT 116
21430: PUSH
21431: LD_INT 117
21433: PUSH
21434: LD_INT 118
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: ST_TO_ADDR
21454: GO 23709
21456: LD_INT 9
21458: DOUBLE
21459: EQUAL
21460: IFTRUE 21464
21462: GO 21612
21464: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21465: LD_ADDR_VAR 0 2
21469: PUSH
21470: LD_INT 2
21472: PUSH
21473: LD_INT 4
21475: PUSH
21476: LD_INT 5
21478: PUSH
21479: LD_INT 6
21481: PUSH
21482: LD_INT 7
21484: PUSH
21485: LD_INT 8
21487: PUSH
21488: LD_INT 11
21490: PUSH
21491: LD_INT 12
21493: PUSH
21494: LD_INT 15
21496: PUSH
21497: LD_INT 16
21499: PUSH
21500: LD_INT 20
21502: PUSH
21503: LD_INT 21
21505: PUSH
21506: LD_INT 22
21508: PUSH
21509: LD_INT 23
21511: PUSH
21512: LD_INT 25
21514: PUSH
21515: LD_INT 26
21517: PUSH
21518: LD_INT 28
21520: PUSH
21521: LD_INT 30
21523: PUSH
21524: LD_INT 31
21526: PUSH
21527: LD_INT 32
21529: PUSH
21530: LD_INT 36
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 101
21558: PUSH
21559: LD_INT 102
21561: PUSH
21562: LD_INT 103
21564: PUSH
21565: LD_INT 105
21567: PUSH
21568: LD_INT 106
21570: PUSH
21571: LD_INT 108
21573: PUSH
21574: LD_INT 109
21576: PUSH
21577: LD_INT 112
21579: PUSH
21580: LD_INT 114
21582: PUSH
21583: LD_INT 116
21585: PUSH
21586: LD_INT 117
21588: PUSH
21589: LD_INT 118
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: ST_TO_ADDR
21610: GO 23709
21612: LD_INT 10
21614: DOUBLE
21615: EQUAL
21616: IFTRUE 21620
21618: GO 21816
21620: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21621: LD_ADDR_VAR 0 2
21625: PUSH
21626: LD_INT 2
21628: PUSH
21629: LD_INT 4
21631: PUSH
21632: LD_INT 5
21634: PUSH
21635: LD_INT 6
21637: PUSH
21638: LD_INT 7
21640: PUSH
21641: LD_INT 8
21643: PUSH
21644: LD_INT 9
21646: PUSH
21647: LD_INT 10
21649: PUSH
21650: LD_INT 11
21652: PUSH
21653: LD_INT 12
21655: PUSH
21656: LD_INT 13
21658: PUSH
21659: LD_INT 14
21661: PUSH
21662: LD_INT 15
21664: PUSH
21665: LD_INT 16
21667: PUSH
21668: LD_INT 17
21670: PUSH
21671: LD_INT 18
21673: PUSH
21674: LD_INT 19
21676: PUSH
21677: LD_INT 20
21679: PUSH
21680: LD_INT 21
21682: PUSH
21683: LD_INT 22
21685: PUSH
21686: LD_INT 23
21688: PUSH
21689: LD_INT 24
21691: PUSH
21692: LD_INT 25
21694: PUSH
21695: LD_INT 26
21697: PUSH
21698: LD_INT 28
21700: PUSH
21701: LD_INT 30
21703: PUSH
21704: LD_INT 31
21706: PUSH
21707: LD_INT 32
21709: PUSH
21710: LD_INT 36
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 101
21746: PUSH
21747: LD_INT 102
21749: PUSH
21750: LD_INT 103
21752: PUSH
21753: LD_INT 104
21755: PUSH
21756: LD_INT 105
21758: PUSH
21759: LD_INT 106
21761: PUSH
21762: LD_INT 107
21764: PUSH
21765: LD_INT 108
21767: PUSH
21768: LD_INT 109
21770: PUSH
21771: LD_INT 110
21773: PUSH
21774: LD_INT 111
21776: PUSH
21777: LD_INT 112
21779: PUSH
21780: LD_INT 114
21782: PUSH
21783: LD_INT 116
21785: PUSH
21786: LD_INT 117
21788: PUSH
21789: LD_INT 118
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: ST_TO_ADDR
21814: GO 23709
21816: LD_INT 11
21818: DOUBLE
21819: EQUAL
21820: IFTRUE 21824
21822: GO 22028
21824: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21825: LD_ADDR_VAR 0 2
21829: PUSH
21830: LD_INT 2
21832: PUSH
21833: LD_INT 3
21835: PUSH
21836: LD_INT 4
21838: PUSH
21839: LD_INT 5
21841: PUSH
21842: LD_INT 6
21844: PUSH
21845: LD_INT 7
21847: PUSH
21848: LD_INT 8
21850: PUSH
21851: LD_INT 9
21853: PUSH
21854: LD_INT 10
21856: PUSH
21857: LD_INT 11
21859: PUSH
21860: LD_INT 12
21862: PUSH
21863: LD_INT 13
21865: PUSH
21866: LD_INT 14
21868: PUSH
21869: LD_INT 15
21871: PUSH
21872: LD_INT 16
21874: PUSH
21875: LD_INT 17
21877: PUSH
21878: LD_INT 18
21880: PUSH
21881: LD_INT 19
21883: PUSH
21884: LD_INT 20
21886: PUSH
21887: LD_INT 21
21889: PUSH
21890: LD_INT 22
21892: PUSH
21893: LD_INT 23
21895: PUSH
21896: LD_INT 24
21898: PUSH
21899: LD_INT 25
21901: PUSH
21902: LD_INT 26
21904: PUSH
21905: LD_INT 28
21907: PUSH
21908: LD_INT 30
21910: PUSH
21911: LD_INT 31
21913: PUSH
21914: LD_INT 32
21916: PUSH
21917: LD_INT 34
21919: PUSH
21920: LD_INT 36
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 101
21958: PUSH
21959: LD_INT 102
21961: PUSH
21962: LD_INT 103
21964: PUSH
21965: LD_INT 104
21967: PUSH
21968: LD_INT 105
21970: PUSH
21971: LD_INT 106
21973: PUSH
21974: LD_INT 107
21976: PUSH
21977: LD_INT 108
21979: PUSH
21980: LD_INT 109
21982: PUSH
21983: LD_INT 110
21985: PUSH
21986: LD_INT 111
21988: PUSH
21989: LD_INT 112
21991: PUSH
21992: LD_INT 114
21994: PUSH
21995: LD_INT 116
21997: PUSH
21998: LD_INT 117
22000: PUSH
22001: LD_INT 118
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: ST_TO_ADDR
22026: GO 23709
22028: LD_INT 12
22030: DOUBLE
22031: EQUAL
22032: IFTRUE 22036
22034: GO 22256
22036: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22037: LD_ADDR_VAR 0 2
22041: PUSH
22042: LD_INT 1
22044: PUSH
22045: LD_INT 2
22047: PUSH
22048: LD_INT 3
22050: PUSH
22051: LD_INT 4
22053: PUSH
22054: LD_INT 5
22056: PUSH
22057: LD_INT 6
22059: PUSH
22060: LD_INT 7
22062: PUSH
22063: LD_INT 8
22065: PUSH
22066: LD_INT 9
22068: PUSH
22069: LD_INT 10
22071: PUSH
22072: LD_INT 11
22074: PUSH
22075: LD_INT 12
22077: PUSH
22078: LD_INT 13
22080: PUSH
22081: LD_INT 14
22083: PUSH
22084: LD_INT 15
22086: PUSH
22087: LD_INT 16
22089: PUSH
22090: LD_INT 17
22092: PUSH
22093: LD_INT 18
22095: PUSH
22096: LD_INT 19
22098: PUSH
22099: LD_INT 20
22101: PUSH
22102: LD_INT 21
22104: PUSH
22105: LD_INT 22
22107: PUSH
22108: LD_INT 23
22110: PUSH
22111: LD_INT 24
22113: PUSH
22114: LD_INT 25
22116: PUSH
22117: LD_INT 26
22119: PUSH
22120: LD_INT 27
22122: PUSH
22123: LD_INT 28
22125: PUSH
22126: LD_INT 30
22128: PUSH
22129: LD_INT 31
22131: PUSH
22132: LD_INT 32
22134: PUSH
22135: LD_INT 33
22137: PUSH
22138: LD_INT 34
22140: PUSH
22141: LD_INT 36
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 101
22182: PUSH
22183: LD_INT 102
22185: PUSH
22186: LD_INT 103
22188: PUSH
22189: LD_INT 104
22191: PUSH
22192: LD_INT 105
22194: PUSH
22195: LD_INT 106
22197: PUSH
22198: LD_INT 107
22200: PUSH
22201: LD_INT 108
22203: PUSH
22204: LD_INT 109
22206: PUSH
22207: LD_INT 110
22209: PUSH
22210: LD_INT 111
22212: PUSH
22213: LD_INT 112
22215: PUSH
22216: LD_INT 113
22218: PUSH
22219: LD_INT 114
22221: PUSH
22222: LD_INT 116
22224: PUSH
22225: LD_INT 117
22227: PUSH
22228: LD_INT 118
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: ST_TO_ADDR
22254: GO 23709
22256: LD_INT 13
22258: DOUBLE
22259: EQUAL
22260: IFTRUE 22264
22262: GO 22472
22264: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22265: LD_ADDR_VAR 0 2
22269: PUSH
22270: LD_INT 1
22272: PUSH
22273: LD_INT 2
22275: PUSH
22276: LD_INT 3
22278: PUSH
22279: LD_INT 4
22281: PUSH
22282: LD_INT 5
22284: PUSH
22285: LD_INT 8
22287: PUSH
22288: LD_INT 9
22290: PUSH
22291: LD_INT 10
22293: PUSH
22294: LD_INT 11
22296: PUSH
22297: LD_INT 12
22299: PUSH
22300: LD_INT 14
22302: PUSH
22303: LD_INT 15
22305: PUSH
22306: LD_INT 16
22308: PUSH
22309: LD_INT 17
22311: PUSH
22312: LD_INT 18
22314: PUSH
22315: LD_INT 19
22317: PUSH
22318: LD_INT 20
22320: PUSH
22321: LD_INT 21
22323: PUSH
22324: LD_INT 22
22326: PUSH
22327: LD_INT 23
22329: PUSH
22330: LD_INT 24
22332: PUSH
22333: LD_INT 25
22335: PUSH
22336: LD_INT 26
22338: PUSH
22339: LD_INT 27
22341: PUSH
22342: LD_INT 28
22344: PUSH
22345: LD_INT 30
22347: PUSH
22348: LD_INT 31
22350: PUSH
22351: LD_INT 32
22353: PUSH
22354: LD_INT 33
22356: PUSH
22357: LD_INT 34
22359: PUSH
22360: LD_INT 36
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 101
22398: PUSH
22399: LD_INT 102
22401: PUSH
22402: LD_INT 103
22404: PUSH
22405: LD_INT 104
22407: PUSH
22408: LD_INT 105
22410: PUSH
22411: LD_INT 106
22413: PUSH
22414: LD_INT 107
22416: PUSH
22417: LD_INT 108
22419: PUSH
22420: LD_INT 109
22422: PUSH
22423: LD_INT 110
22425: PUSH
22426: LD_INT 111
22428: PUSH
22429: LD_INT 112
22431: PUSH
22432: LD_INT 113
22434: PUSH
22435: LD_INT 114
22437: PUSH
22438: LD_INT 116
22440: PUSH
22441: LD_INT 117
22443: PUSH
22444: LD_INT 118
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: ST_TO_ADDR
22470: GO 23709
22472: LD_INT 14
22474: DOUBLE
22475: EQUAL
22476: IFTRUE 22480
22478: GO 22704
22480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22481: LD_ADDR_VAR 0 2
22485: PUSH
22486: LD_INT 1
22488: PUSH
22489: LD_INT 2
22491: PUSH
22492: LD_INT 3
22494: PUSH
22495: LD_INT 4
22497: PUSH
22498: LD_INT 5
22500: PUSH
22501: LD_INT 6
22503: PUSH
22504: LD_INT 7
22506: PUSH
22507: LD_INT 8
22509: PUSH
22510: LD_INT 9
22512: PUSH
22513: LD_INT 10
22515: PUSH
22516: LD_INT 11
22518: PUSH
22519: LD_INT 12
22521: PUSH
22522: LD_INT 13
22524: PUSH
22525: LD_INT 14
22527: PUSH
22528: LD_INT 15
22530: PUSH
22531: LD_INT 16
22533: PUSH
22534: LD_INT 17
22536: PUSH
22537: LD_INT 18
22539: PUSH
22540: LD_INT 19
22542: PUSH
22543: LD_INT 20
22545: PUSH
22546: LD_INT 21
22548: PUSH
22549: LD_INT 22
22551: PUSH
22552: LD_INT 23
22554: PUSH
22555: LD_INT 24
22557: PUSH
22558: LD_INT 25
22560: PUSH
22561: LD_INT 26
22563: PUSH
22564: LD_INT 27
22566: PUSH
22567: LD_INT 28
22569: PUSH
22570: LD_INT 29
22572: PUSH
22573: LD_INT 30
22575: PUSH
22576: LD_INT 31
22578: PUSH
22579: LD_INT 32
22581: PUSH
22582: LD_INT 33
22584: PUSH
22585: LD_INT 34
22587: PUSH
22588: LD_INT 36
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 101
22630: PUSH
22631: LD_INT 102
22633: PUSH
22634: LD_INT 103
22636: PUSH
22637: LD_INT 104
22639: PUSH
22640: LD_INT 105
22642: PUSH
22643: LD_INT 106
22645: PUSH
22646: LD_INT 107
22648: PUSH
22649: LD_INT 108
22651: PUSH
22652: LD_INT 109
22654: PUSH
22655: LD_INT 110
22657: PUSH
22658: LD_INT 111
22660: PUSH
22661: LD_INT 112
22663: PUSH
22664: LD_INT 113
22666: PUSH
22667: LD_INT 114
22669: PUSH
22670: LD_INT 116
22672: PUSH
22673: LD_INT 117
22675: PUSH
22676: LD_INT 118
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: ST_TO_ADDR
22702: GO 23709
22704: LD_INT 15
22706: DOUBLE
22707: EQUAL
22708: IFTRUE 22712
22710: GO 22936
22712: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22713: LD_ADDR_VAR 0 2
22717: PUSH
22718: LD_INT 1
22720: PUSH
22721: LD_INT 2
22723: PUSH
22724: LD_INT 3
22726: PUSH
22727: LD_INT 4
22729: PUSH
22730: LD_INT 5
22732: PUSH
22733: LD_INT 6
22735: PUSH
22736: LD_INT 7
22738: PUSH
22739: LD_INT 8
22741: PUSH
22742: LD_INT 9
22744: PUSH
22745: LD_INT 10
22747: PUSH
22748: LD_INT 11
22750: PUSH
22751: LD_INT 12
22753: PUSH
22754: LD_INT 13
22756: PUSH
22757: LD_INT 14
22759: PUSH
22760: LD_INT 15
22762: PUSH
22763: LD_INT 16
22765: PUSH
22766: LD_INT 17
22768: PUSH
22769: LD_INT 18
22771: PUSH
22772: LD_INT 19
22774: PUSH
22775: LD_INT 20
22777: PUSH
22778: LD_INT 21
22780: PUSH
22781: LD_INT 22
22783: PUSH
22784: LD_INT 23
22786: PUSH
22787: LD_INT 24
22789: PUSH
22790: LD_INT 25
22792: PUSH
22793: LD_INT 26
22795: PUSH
22796: LD_INT 27
22798: PUSH
22799: LD_INT 28
22801: PUSH
22802: LD_INT 29
22804: PUSH
22805: LD_INT 30
22807: PUSH
22808: LD_INT 31
22810: PUSH
22811: LD_INT 32
22813: PUSH
22814: LD_INT 33
22816: PUSH
22817: LD_INT 34
22819: PUSH
22820: LD_INT 36
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 101
22862: PUSH
22863: LD_INT 102
22865: PUSH
22866: LD_INT 103
22868: PUSH
22869: LD_INT 104
22871: PUSH
22872: LD_INT 105
22874: PUSH
22875: LD_INT 106
22877: PUSH
22878: LD_INT 107
22880: PUSH
22881: LD_INT 108
22883: PUSH
22884: LD_INT 109
22886: PUSH
22887: LD_INT 110
22889: PUSH
22890: LD_INT 111
22892: PUSH
22893: LD_INT 112
22895: PUSH
22896: LD_INT 113
22898: PUSH
22899: LD_INT 114
22901: PUSH
22902: LD_INT 116
22904: PUSH
22905: LD_INT 117
22907: PUSH
22908: LD_INT 118
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: ST_TO_ADDR
22934: GO 23709
22936: LD_INT 16
22938: DOUBLE
22939: EQUAL
22940: IFTRUE 22944
22942: GO 23080
22944: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22945: LD_ADDR_VAR 0 2
22949: PUSH
22950: LD_INT 2
22952: PUSH
22953: LD_INT 4
22955: PUSH
22956: LD_INT 5
22958: PUSH
22959: LD_INT 7
22961: PUSH
22962: LD_INT 11
22964: PUSH
22965: LD_INT 12
22967: PUSH
22968: LD_INT 15
22970: PUSH
22971: LD_INT 16
22973: PUSH
22974: LD_INT 20
22976: PUSH
22977: LD_INT 21
22979: PUSH
22980: LD_INT 22
22982: PUSH
22983: LD_INT 23
22985: PUSH
22986: LD_INT 25
22988: PUSH
22989: LD_INT 26
22991: PUSH
22992: LD_INT 30
22994: PUSH
22995: LD_INT 31
22997: PUSH
22998: LD_INT 32
23000: PUSH
23001: LD_INT 33
23003: PUSH
23004: LD_INT 34
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 101
23030: PUSH
23031: LD_INT 102
23033: PUSH
23034: LD_INT 103
23036: PUSH
23037: LD_INT 106
23039: PUSH
23040: LD_INT 108
23042: PUSH
23043: LD_INT 112
23045: PUSH
23046: LD_INT 113
23048: PUSH
23049: LD_INT 114
23051: PUSH
23052: LD_INT 116
23054: PUSH
23055: LD_INT 117
23057: PUSH
23058: LD_INT 118
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: ST_TO_ADDR
23078: GO 23709
23080: LD_INT 17
23082: DOUBLE
23083: EQUAL
23084: IFTRUE 23088
23086: GO 23312
23088: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23089: LD_ADDR_VAR 0 2
23093: PUSH
23094: LD_INT 1
23096: PUSH
23097: LD_INT 2
23099: PUSH
23100: LD_INT 3
23102: PUSH
23103: LD_INT 4
23105: PUSH
23106: LD_INT 5
23108: PUSH
23109: LD_INT 6
23111: PUSH
23112: LD_INT 7
23114: PUSH
23115: LD_INT 8
23117: PUSH
23118: LD_INT 9
23120: PUSH
23121: LD_INT 10
23123: PUSH
23124: LD_INT 11
23126: PUSH
23127: LD_INT 12
23129: PUSH
23130: LD_INT 13
23132: PUSH
23133: LD_INT 14
23135: PUSH
23136: LD_INT 15
23138: PUSH
23139: LD_INT 16
23141: PUSH
23142: LD_INT 17
23144: PUSH
23145: LD_INT 18
23147: PUSH
23148: LD_INT 19
23150: PUSH
23151: LD_INT 20
23153: PUSH
23154: LD_INT 21
23156: PUSH
23157: LD_INT 22
23159: PUSH
23160: LD_INT 23
23162: PUSH
23163: LD_INT 24
23165: PUSH
23166: LD_INT 25
23168: PUSH
23169: LD_INT 26
23171: PUSH
23172: LD_INT 27
23174: PUSH
23175: LD_INT 28
23177: PUSH
23178: LD_INT 29
23180: PUSH
23181: LD_INT 30
23183: PUSH
23184: LD_INT 31
23186: PUSH
23187: LD_INT 32
23189: PUSH
23190: LD_INT 33
23192: PUSH
23193: LD_INT 34
23195: PUSH
23196: LD_INT 36
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 101
23238: PUSH
23239: LD_INT 102
23241: PUSH
23242: LD_INT 103
23244: PUSH
23245: LD_INT 104
23247: PUSH
23248: LD_INT 105
23250: PUSH
23251: LD_INT 106
23253: PUSH
23254: LD_INT 107
23256: PUSH
23257: LD_INT 108
23259: PUSH
23260: LD_INT 109
23262: PUSH
23263: LD_INT 110
23265: PUSH
23266: LD_INT 111
23268: PUSH
23269: LD_INT 112
23271: PUSH
23272: LD_INT 113
23274: PUSH
23275: LD_INT 114
23277: PUSH
23278: LD_INT 116
23280: PUSH
23281: LD_INT 117
23283: PUSH
23284: LD_INT 118
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: ST_TO_ADDR
23310: GO 23709
23312: LD_INT 18
23314: DOUBLE
23315: EQUAL
23316: IFTRUE 23320
23318: GO 23468
23320: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23321: LD_ADDR_VAR 0 2
23325: PUSH
23326: LD_INT 2
23328: PUSH
23329: LD_INT 4
23331: PUSH
23332: LD_INT 5
23334: PUSH
23335: LD_INT 7
23337: PUSH
23338: LD_INT 11
23340: PUSH
23341: LD_INT 12
23343: PUSH
23344: LD_INT 15
23346: PUSH
23347: LD_INT 16
23349: PUSH
23350: LD_INT 20
23352: PUSH
23353: LD_INT 21
23355: PUSH
23356: LD_INT 22
23358: PUSH
23359: LD_INT 23
23361: PUSH
23362: LD_INT 25
23364: PUSH
23365: LD_INT 26
23367: PUSH
23368: LD_INT 30
23370: PUSH
23371: LD_INT 31
23373: PUSH
23374: LD_INT 32
23376: PUSH
23377: LD_INT 33
23379: PUSH
23380: LD_INT 34
23382: PUSH
23383: LD_INT 35
23385: PUSH
23386: LD_INT 36
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 101
23414: PUSH
23415: LD_INT 102
23417: PUSH
23418: LD_INT 103
23420: PUSH
23421: LD_INT 106
23423: PUSH
23424: LD_INT 108
23426: PUSH
23427: LD_INT 112
23429: PUSH
23430: LD_INT 113
23432: PUSH
23433: LD_INT 114
23435: PUSH
23436: LD_INT 115
23438: PUSH
23439: LD_INT 116
23441: PUSH
23442: LD_INT 117
23444: PUSH
23445: LD_INT 118
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: ST_TO_ADDR
23466: GO 23709
23468: LD_INT 19
23470: DOUBLE
23471: EQUAL
23472: IFTRUE 23476
23474: GO 23708
23476: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23477: LD_ADDR_VAR 0 2
23481: PUSH
23482: LD_INT 1
23484: PUSH
23485: LD_INT 2
23487: PUSH
23488: LD_INT 3
23490: PUSH
23491: LD_INT 4
23493: PUSH
23494: LD_INT 5
23496: PUSH
23497: LD_INT 6
23499: PUSH
23500: LD_INT 7
23502: PUSH
23503: LD_INT 8
23505: PUSH
23506: LD_INT 9
23508: PUSH
23509: LD_INT 10
23511: PUSH
23512: LD_INT 11
23514: PUSH
23515: LD_INT 12
23517: PUSH
23518: LD_INT 13
23520: PUSH
23521: LD_INT 14
23523: PUSH
23524: LD_INT 15
23526: PUSH
23527: LD_INT 16
23529: PUSH
23530: LD_INT 17
23532: PUSH
23533: LD_INT 18
23535: PUSH
23536: LD_INT 19
23538: PUSH
23539: LD_INT 20
23541: PUSH
23542: LD_INT 21
23544: PUSH
23545: LD_INT 22
23547: PUSH
23548: LD_INT 23
23550: PUSH
23551: LD_INT 24
23553: PUSH
23554: LD_INT 25
23556: PUSH
23557: LD_INT 26
23559: PUSH
23560: LD_INT 27
23562: PUSH
23563: LD_INT 28
23565: PUSH
23566: LD_INT 29
23568: PUSH
23569: LD_INT 30
23571: PUSH
23572: LD_INT 31
23574: PUSH
23575: LD_INT 32
23577: PUSH
23578: LD_INT 33
23580: PUSH
23581: LD_INT 34
23583: PUSH
23584: LD_INT 35
23586: PUSH
23587: LD_INT 36
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 101
23630: PUSH
23631: LD_INT 102
23633: PUSH
23634: LD_INT 103
23636: PUSH
23637: LD_INT 104
23639: PUSH
23640: LD_INT 105
23642: PUSH
23643: LD_INT 106
23645: PUSH
23646: LD_INT 107
23648: PUSH
23649: LD_INT 108
23651: PUSH
23652: LD_INT 109
23654: PUSH
23655: LD_INT 110
23657: PUSH
23658: LD_INT 111
23660: PUSH
23661: LD_INT 112
23663: PUSH
23664: LD_INT 113
23666: PUSH
23667: LD_INT 114
23669: PUSH
23670: LD_INT 115
23672: PUSH
23673: LD_INT 116
23675: PUSH
23676: LD_INT 117
23678: PUSH
23679: LD_INT 118
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: ST_TO_ADDR
23706: GO 23709
23708: POP
// end else
23709: GO 23940
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23711: LD_ADDR_VAR 0 2
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: LD_INT 2
23721: PUSH
23722: LD_INT 3
23724: PUSH
23725: LD_INT 4
23727: PUSH
23728: LD_INT 5
23730: PUSH
23731: LD_INT 6
23733: PUSH
23734: LD_INT 7
23736: PUSH
23737: LD_INT 8
23739: PUSH
23740: LD_INT 9
23742: PUSH
23743: LD_INT 10
23745: PUSH
23746: LD_INT 11
23748: PUSH
23749: LD_INT 12
23751: PUSH
23752: LD_INT 13
23754: PUSH
23755: LD_INT 14
23757: PUSH
23758: LD_INT 15
23760: PUSH
23761: LD_INT 16
23763: PUSH
23764: LD_INT 17
23766: PUSH
23767: LD_INT 18
23769: PUSH
23770: LD_INT 19
23772: PUSH
23773: LD_INT 20
23775: PUSH
23776: LD_INT 21
23778: PUSH
23779: LD_INT 22
23781: PUSH
23782: LD_INT 23
23784: PUSH
23785: LD_INT 24
23787: PUSH
23788: LD_INT 25
23790: PUSH
23791: LD_INT 26
23793: PUSH
23794: LD_INT 27
23796: PUSH
23797: LD_INT 28
23799: PUSH
23800: LD_INT 29
23802: PUSH
23803: LD_INT 30
23805: PUSH
23806: LD_INT 31
23808: PUSH
23809: LD_INT 32
23811: PUSH
23812: LD_INT 33
23814: PUSH
23815: LD_INT 34
23817: PUSH
23818: LD_INT 35
23820: PUSH
23821: LD_INT 36
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 101
23864: PUSH
23865: LD_INT 102
23867: PUSH
23868: LD_INT 103
23870: PUSH
23871: LD_INT 104
23873: PUSH
23874: LD_INT 105
23876: PUSH
23877: LD_INT 106
23879: PUSH
23880: LD_INT 107
23882: PUSH
23883: LD_INT 108
23885: PUSH
23886: LD_INT 109
23888: PUSH
23889: LD_INT 110
23891: PUSH
23892: LD_INT 111
23894: PUSH
23895: LD_INT 112
23897: PUSH
23898: LD_INT 113
23900: PUSH
23901: LD_INT 114
23903: PUSH
23904: LD_INT 115
23906: PUSH
23907: LD_INT 116
23909: PUSH
23910: LD_INT 117
23912: PUSH
23913: LD_INT 118
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: ST_TO_ADDR
// if result then
23940: LD_VAR 0 2
23944: IFFALSE 24730
// begin normal :=  ;
23946: LD_ADDR_VAR 0 5
23950: PUSH
23951: LD_STRING 
23953: ST_TO_ADDR
// hardcore :=  ;
23954: LD_ADDR_VAR 0 6
23958: PUSH
23959: LD_STRING 
23961: ST_TO_ADDR
// active :=  ;
23962: LD_ADDR_VAR 0 7
23966: PUSH
23967: LD_STRING 
23969: ST_TO_ADDR
// for i = 1 to normalCounter do
23970: LD_ADDR_VAR 0 8
23974: PUSH
23975: DOUBLE
23976: LD_INT 1
23978: DEC
23979: ST_TO_ADDR
23980: LD_EXP 83
23984: PUSH
23985: FOR_TO
23986: IFFALSE 24087
// begin tmp := 0 ;
23988: LD_ADDR_VAR 0 3
23992: PUSH
23993: LD_STRING 0
23995: ST_TO_ADDR
// if result [ 1 ] then
23996: LD_VAR 0 2
24000: PUSH
24001: LD_INT 1
24003: ARRAY
24004: IFFALSE 24069
// if result [ 1 ] [ 1 ] = i then
24006: LD_VAR 0 2
24010: PUSH
24011: LD_INT 1
24013: ARRAY
24014: PUSH
24015: LD_INT 1
24017: ARRAY
24018: PUSH
24019: LD_VAR 0 8
24023: EQUAL
24024: IFFALSE 24069
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24026: LD_ADDR_VAR 0 2
24030: PUSH
24031: LD_VAR 0 2
24035: PPUSH
24036: LD_INT 1
24038: PPUSH
24039: LD_VAR 0 2
24043: PUSH
24044: LD_INT 1
24046: ARRAY
24047: PPUSH
24048: LD_INT 1
24050: PPUSH
24051: CALL_OW 3
24055: PPUSH
24056: CALL_OW 1
24060: ST_TO_ADDR
// tmp := 1 ;
24061: LD_ADDR_VAR 0 3
24065: PUSH
24066: LD_STRING 1
24068: ST_TO_ADDR
// end ; normal := normal & tmp ;
24069: LD_ADDR_VAR 0 5
24073: PUSH
24074: LD_VAR 0 5
24078: PUSH
24079: LD_VAR 0 3
24083: STR
24084: ST_TO_ADDR
// end ;
24085: GO 23985
24087: POP
24088: POP
// for i = 1 to hardcoreCounter do
24089: LD_ADDR_VAR 0 8
24093: PUSH
24094: DOUBLE
24095: LD_INT 1
24097: DEC
24098: ST_TO_ADDR
24099: LD_EXP 84
24103: PUSH
24104: FOR_TO
24105: IFFALSE 24210
// begin tmp := 0 ;
24107: LD_ADDR_VAR 0 3
24111: PUSH
24112: LD_STRING 0
24114: ST_TO_ADDR
// if result [ 2 ] then
24115: LD_VAR 0 2
24119: PUSH
24120: LD_INT 2
24122: ARRAY
24123: IFFALSE 24192
// if result [ 2 ] [ 1 ] = 100 + i then
24125: LD_VAR 0 2
24129: PUSH
24130: LD_INT 2
24132: ARRAY
24133: PUSH
24134: LD_INT 1
24136: ARRAY
24137: PUSH
24138: LD_INT 100
24140: PUSH
24141: LD_VAR 0 8
24145: PLUS
24146: EQUAL
24147: IFFALSE 24192
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24149: LD_ADDR_VAR 0 2
24153: PUSH
24154: LD_VAR 0 2
24158: PPUSH
24159: LD_INT 2
24161: PPUSH
24162: LD_VAR 0 2
24166: PUSH
24167: LD_INT 2
24169: ARRAY
24170: PPUSH
24171: LD_INT 1
24173: PPUSH
24174: CALL_OW 3
24178: PPUSH
24179: CALL_OW 1
24183: ST_TO_ADDR
// tmp := 1 ;
24184: LD_ADDR_VAR 0 3
24188: PUSH
24189: LD_STRING 1
24191: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24192: LD_ADDR_VAR 0 6
24196: PUSH
24197: LD_VAR 0 6
24201: PUSH
24202: LD_VAR 0 3
24206: STR
24207: ST_TO_ADDR
// end ;
24208: GO 24104
24210: POP
24211: POP
// if isGameLoad then
24212: LD_VAR 0 1
24216: IFFALSE 24691
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24218: LD_ADDR_VAR 0 4
24222: PUSH
24223: LD_EXP 87
24227: PUSH
24228: LD_EXP 86
24232: PUSH
24233: LD_EXP 88
24237: PUSH
24238: LD_EXP 85
24242: PUSH
24243: LD_EXP 89
24247: PUSH
24248: LD_EXP 90
24252: PUSH
24253: LD_EXP 91
24257: PUSH
24258: LD_EXP 92
24262: PUSH
24263: LD_EXP 93
24267: PUSH
24268: LD_EXP 94
24272: PUSH
24273: LD_EXP 95
24277: PUSH
24278: LD_EXP 96
24282: PUSH
24283: LD_EXP 97
24287: PUSH
24288: LD_EXP 98
24292: PUSH
24293: LD_EXP 106
24297: PUSH
24298: LD_EXP 107
24302: PUSH
24303: LD_EXP 108
24307: PUSH
24308: LD_EXP 109
24312: PUSH
24313: LD_EXP 111
24317: PUSH
24318: LD_EXP 112
24322: PUSH
24323: LD_EXP 113
24327: PUSH
24328: LD_EXP 116
24332: PUSH
24333: LD_EXP 118
24337: PUSH
24338: LD_EXP 119
24342: PUSH
24343: LD_EXP 120
24347: PUSH
24348: LD_EXP 122
24352: PUSH
24353: LD_EXP 123
24357: PUSH
24358: LD_EXP 126
24362: PUSH
24363: LD_EXP 127
24367: PUSH
24368: LD_EXP 128
24372: PUSH
24373: LD_EXP 129
24377: PUSH
24378: LD_EXP 130
24382: PUSH
24383: LD_EXP 131
24387: PUSH
24388: LD_EXP 132
24392: PUSH
24393: LD_EXP 133
24397: PUSH
24398: LD_EXP 134
24402: PUSH
24403: LD_EXP 99
24407: PUSH
24408: LD_EXP 100
24412: PUSH
24413: LD_EXP 103
24417: PUSH
24418: LD_EXP 104
24422: PUSH
24423: LD_EXP 105
24427: PUSH
24428: LD_EXP 101
24432: PUSH
24433: LD_EXP 102
24437: PUSH
24438: LD_EXP 110
24442: PUSH
24443: LD_EXP 114
24447: PUSH
24448: LD_EXP 115
24452: PUSH
24453: LD_EXP 117
24457: PUSH
24458: LD_EXP 121
24462: PUSH
24463: LD_EXP 124
24467: PUSH
24468: LD_EXP 125
24472: PUSH
24473: LD_EXP 135
24477: PUSH
24478: LD_EXP 136
24482: PUSH
24483: LD_EXP 137
24487: PUSH
24488: LD_EXP 138
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: ST_TO_ADDR
// tmp :=  ;
24549: LD_ADDR_VAR 0 3
24553: PUSH
24554: LD_STRING 
24556: ST_TO_ADDR
// for i = 1 to normalCounter do
24557: LD_ADDR_VAR 0 8
24561: PUSH
24562: DOUBLE
24563: LD_INT 1
24565: DEC
24566: ST_TO_ADDR
24567: LD_EXP 83
24571: PUSH
24572: FOR_TO
24573: IFFALSE 24609
// begin if flags [ i ] then
24575: LD_VAR 0 4
24579: PUSH
24580: LD_VAR 0 8
24584: ARRAY
24585: IFFALSE 24607
// tmp := tmp & i & ; ;
24587: LD_ADDR_VAR 0 3
24591: PUSH
24592: LD_VAR 0 3
24596: PUSH
24597: LD_VAR 0 8
24601: STR
24602: PUSH
24603: LD_STRING ;
24605: STR
24606: ST_TO_ADDR
// end ;
24607: GO 24572
24609: POP
24610: POP
// for i = 1 to hardcoreCounter do
24611: LD_ADDR_VAR 0 8
24615: PUSH
24616: DOUBLE
24617: LD_INT 1
24619: DEC
24620: ST_TO_ADDR
24621: LD_EXP 84
24625: PUSH
24626: FOR_TO
24627: IFFALSE 24673
// begin if flags [ normalCounter + i ] then
24629: LD_VAR 0 4
24633: PUSH
24634: LD_EXP 83
24638: PUSH
24639: LD_VAR 0 8
24643: PLUS
24644: ARRAY
24645: IFFALSE 24671
// tmp := tmp & ( 100 + i ) & ; ;
24647: LD_ADDR_VAR 0 3
24651: PUSH
24652: LD_VAR 0 3
24656: PUSH
24657: LD_INT 100
24659: PUSH
24660: LD_VAR 0 8
24664: PLUS
24665: STR
24666: PUSH
24667: LD_STRING ;
24669: STR
24670: ST_TO_ADDR
// end ;
24671: GO 24626
24673: POP
24674: POP
// if tmp then
24675: LD_VAR 0 3
24679: IFFALSE 24691
// active := tmp ;
24681: LD_ADDR_VAR 0 7
24685: PUSH
24686: LD_VAR 0 3
24690: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24691: LD_STRING getStreamItemsFromMission("
24693: PUSH
24694: LD_VAR 0 5
24698: STR
24699: PUSH
24700: LD_STRING ","
24702: STR
24703: PUSH
24704: LD_VAR 0 6
24708: STR
24709: PUSH
24710: LD_STRING ","
24712: STR
24713: PUSH
24714: LD_VAR 0 7
24718: STR
24719: PUSH
24720: LD_STRING ")
24722: STR
24723: PPUSH
24724: CALL_OW 559
// end else
24728: GO 24737
// ToLua ( getStreamItemsFromMission("","","") ) ;
24730: LD_STRING getStreamItemsFromMission("","","")
24732: PPUSH
24733: CALL_OW 559
// end ;
24737: LD_VAR 0 2
24741: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24742: LD_EXP 82
24746: PUSH
24747: LD_EXP 87
24751: AND
24752: IFFALSE 24876
24754: GO 24756
24756: DISABLE
24757: LD_INT 0
24759: PPUSH
24760: PPUSH
// begin enable ;
24761: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24762: LD_ADDR_VAR 0 2
24766: PUSH
24767: LD_INT 22
24769: PUSH
24770: LD_OWVAR 2
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 2
24781: PUSH
24782: LD_INT 34
24784: PUSH
24785: LD_INT 7
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 34
24794: PUSH
24795: LD_INT 45
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 34
24804: PUSH
24805: LD_INT 28
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 34
24814: PUSH
24815: LD_INT 47
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PPUSH
24833: CALL_OW 69
24837: ST_TO_ADDR
// if not tmp then
24838: LD_VAR 0 2
24842: NOT
24843: IFFALSE 24847
// exit ;
24845: GO 24876
// for i in tmp do
24847: LD_ADDR_VAR 0 1
24851: PUSH
24852: LD_VAR 0 2
24856: PUSH
24857: FOR_IN
24858: IFFALSE 24874
// begin SetLives ( i , 0 ) ;
24860: LD_VAR 0 1
24864: PPUSH
24865: LD_INT 0
24867: PPUSH
24868: CALL_OW 234
// end ;
24872: GO 24857
24874: POP
24875: POP
// end ;
24876: PPOPN 2
24878: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24879: LD_EXP 82
24883: PUSH
24884: LD_EXP 88
24888: AND
24889: IFFALSE 24973
24891: GO 24893
24893: DISABLE
24894: LD_INT 0
24896: PPUSH
24897: PPUSH
// begin enable ;
24898: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24899: LD_ADDR_VAR 0 2
24903: PUSH
24904: LD_INT 22
24906: PUSH
24907: LD_OWVAR 2
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 32
24918: PUSH
24919: LD_INT 3
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PPUSH
24930: CALL_OW 69
24934: ST_TO_ADDR
// if not tmp then
24935: LD_VAR 0 2
24939: NOT
24940: IFFALSE 24944
// exit ;
24942: GO 24973
// for i in tmp do
24944: LD_ADDR_VAR 0 1
24948: PUSH
24949: LD_VAR 0 2
24953: PUSH
24954: FOR_IN
24955: IFFALSE 24971
// begin SetLives ( i , 0 ) ;
24957: LD_VAR 0 1
24961: PPUSH
24962: LD_INT 0
24964: PPUSH
24965: CALL_OW 234
// end ;
24969: GO 24954
24971: POP
24972: POP
// end ;
24973: PPOPN 2
24975: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24976: LD_EXP 82
24980: PUSH
24981: LD_EXP 85
24985: AND
24986: IFFALSE 25079
24988: GO 24990
24990: DISABLE
24991: LD_INT 0
24993: PPUSH
// begin enable ;
24994: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24995: LD_ADDR_VAR 0 1
24999: PUSH
25000: LD_INT 22
25002: PUSH
25003: LD_OWVAR 2
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 2
25014: PUSH
25015: LD_INT 25
25017: PUSH
25018: LD_INT 5
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 25
25027: PUSH
25028: LD_INT 9
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 25
25037: PUSH
25038: LD_INT 8
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PPUSH
25055: CALL_OW 69
25059: PUSH
25060: FOR_IN
25061: IFFALSE 25077
// begin SetClass ( i , 1 ) ;
25063: LD_VAR 0 1
25067: PPUSH
25068: LD_INT 1
25070: PPUSH
25071: CALL_OW 336
// end ;
25075: GO 25060
25077: POP
25078: POP
// end ;
25079: PPOPN 1
25081: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25082: LD_EXP 82
25086: PUSH
25087: LD_EXP 86
25091: AND
25092: PUSH
25093: LD_OWVAR 65
25097: PUSH
25098: LD_INT 7
25100: LESS
25101: AND
25102: IFFALSE 25116
25104: GO 25106
25106: DISABLE
// begin enable ;
25107: ENABLE
// game_speed := 7 ;
25108: LD_ADDR_OWVAR 65
25112: PUSH
25113: LD_INT 7
25115: ST_TO_ADDR
// end ;
25116: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25117: LD_EXP 82
25121: PUSH
25122: LD_EXP 89
25126: AND
25127: IFFALSE 25329
25129: GO 25131
25131: DISABLE
25132: LD_INT 0
25134: PPUSH
25135: PPUSH
25136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25137: LD_ADDR_VAR 0 3
25141: PUSH
25142: LD_INT 81
25144: PUSH
25145: LD_OWVAR 2
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 21
25156: PUSH
25157: LD_INT 1
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PPUSH
25168: CALL_OW 69
25172: ST_TO_ADDR
// if not tmp then
25173: LD_VAR 0 3
25177: NOT
25178: IFFALSE 25182
// exit ;
25180: GO 25329
// if tmp > 5 then
25182: LD_VAR 0 3
25186: PUSH
25187: LD_INT 5
25189: GREATER
25190: IFFALSE 25202
// k := 5 else
25192: LD_ADDR_VAR 0 2
25196: PUSH
25197: LD_INT 5
25199: ST_TO_ADDR
25200: GO 25212
// k := tmp ;
25202: LD_ADDR_VAR 0 2
25206: PUSH
25207: LD_VAR 0 3
25211: ST_TO_ADDR
// for i := 1 to k do
25212: LD_ADDR_VAR 0 1
25216: PUSH
25217: DOUBLE
25218: LD_INT 1
25220: DEC
25221: ST_TO_ADDR
25222: LD_VAR 0 2
25226: PUSH
25227: FOR_TO
25228: IFFALSE 25327
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25230: LD_VAR 0 3
25234: PUSH
25235: LD_VAR 0 1
25239: ARRAY
25240: PPUSH
25241: LD_VAR 0 1
25245: PUSH
25246: LD_INT 4
25248: MOD
25249: PUSH
25250: LD_INT 1
25252: PLUS
25253: PPUSH
25254: CALL_OW 259
25258: PUSH
25259: LD_INT 10
25261: LESS
25262: IFFALSE 25325
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25264: LD_VAR 0 3
25268: PUSH
25269: LD_VAR 0 1
25273: ARRAY
25274: PPUSH
25275: LD_VAR 0 1
25279: PUSH
25280: LD_INT 4
25282: MOD
25283: PUSH
25284: LD_INT 1
25286: PLUS
25287: PPUSH
25288: LD_VAR 0 3
25292: PUSH
25293: LD_VAR 0 1
25297: ARRAY
25298: PPUSH
25299: LD_VAR 0 1
25303: PUSH
25304: LD_INT 4
25306: MOD
25307: PUSH
25308: LD_INT 1
25310: PLUS
25311: PPUSH
25312: CALL_OW 259
25316: PUSH
25317: LD_INT 1
25319: PLUS
25320: PPUSH
25321: CALL_OW 237
25325: GO 25227
25327: POP
25328: POP
// end ;
25329: PPOPN 3
25331: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25332: LD_EXP 82
25336: PUSH
25337: LD_EXP 90
25341: AND
25342: IFFALSE 25362
25344: GO 25346
25346: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25347: LD_INT 4
25349: PPUSH
25350: LD_OWVAR 2
25354: PPUSH
25355: LD_INT 0
25357: PPUSH
25358: CALL_OW 324
25362: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25363: LD_EXP 82
25367: PUSH
25368: LD_EXP 119
25372: AND
25373: IFFALSE 25393
25375: GO 25377
25377: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25378: LD_INT 19
25380: PPUSH
25381: LD_OWVAR 2
25385: PPUSH
25386: LD_INT 0
25388: PPUSH
25389: CALL_OW 324
25393: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25394: LD_EXP 82
25398: PUSH
25399: LD_EXP 91
25403: AND
25404: IFFALSE 25506
25406: GO 25408
25408: DISABLE
25409: LD_INT 0
25411: PPUSH
25412: PPUSH
// begin enable ;
25413: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25414: LD_ADDR_VAR 0 2
25418: PUSH
25419: LD_INT 22
25421: PUSH
25422: LD_OWVAR 2
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 2
25433: PUSH
25434: LD_INT 34
25436: PUSH
25437: LD_INT 11
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 34
25446: PUSH
25447: LD_INT 30
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: LIST
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PPUSH
25463: CALL_OW 69
25467: ST_TO_ADDR
// if not tmp then
25468: LD_VAR 0 2
25472: NOT
25473: IFFALSE 25477
// exit ;
25475: GO 25506
// for i in tmp do
25477: LD_ADDR_VAR 0 1
25481: PUSH
25482: LD_VAR 0 2
25486: PUSH
25487: FOR_IN
25488: IFFALSE 25504
// begin SetLives ( i , 0 ) ;
25490: LD_VAR 0 1
25494: PPUSH
25495: LD_INT 0
25497: PPUSH
25498: CALL_OW 234
// end ;
25502: GO 25487
25504: POP
25505: POP
// end ;
25506: PPOPN 2
25508: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25509: LD_EXP 82
25513: PUSH
25514: LD_EXP 92
25518: AND
25519: IFFALSE 25539
25521: GO 25523
25523: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25524: LD_INT 32
25526: PPUSH
25527: LD_OWVAR 2
25531: PPUSH
25532: LD_INT 0
25534: PPUSH
25535: CALL_OW 324
25539: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25540: LD_EXP 82
25544: PUSH
25545: LD_EXP 93
25549: AND
25550: IFFALSE 25731
25552: GO 25554
25554: DISABLE
25555: LD_INT 0
25557: PPUSH
25558: PPUSH
25559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25560: LD_ADDR_VAR 0 2
25564: PUSH
25565: LD_INT 22
25567: PUSH
25568: LD_OWVAR 2
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 33
25579: PUSH
25580: LD_INT 3
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PPUSH
25591: CALL_OW 69
25595: ST_TO_ADDR
// if not tmp then
25596: LD_VAR 0 2
25600: NOT
25601: IFFALSE 25605
// exit ;
25603: GO 25731
// side := 0 ;
25605: LD_ADDR_VAR 0 3
25609: PUSH
25610: LD_INT 0
25612: ST_TO_ADDR
// for i := 1 to 8 do
25613: LD_ADDR_VAR 0 1
25617: PUSH
25618: DOUBLE
25619: LD_INT 1
25621: DEC
25622: ST_TO_ADDR
25623: LD_INT 8
25625: PUSH
25626: FOR_TO
25627: IFFALSE 25675
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25629: LD_OWVAR 2
25633: PUSH
25634: LD_VAR 0 1
25638: NONEQUAL
25639: PUSH
25640: LD_OWVAR 2
25644: PPUSH
25645: LD_VAR 0 1
25649: PPUSH
25650: CALL_OW 81
25654: PUSH
25655: LD_INT 2
25657: EQUAL
25658: AND
25659: IFFALSE 25673
// begin side := i ;
25661: LD_ADDR_VAR 0 3
25665: PUSH
25666: LD_VAR 0 1
25670: ST_TO_ADDR
// break ;
25671: GO 25675
// end ;
25673: GO 25626
25675: POP
25676: POP
// if not side then
25677: LD_VAR 0 3
25681: NOT
25682: IFFALSE 25686
// exit ;
25684: GO 25731
// for i := 1 to tmp do
25686: LD_ADDR_VAR 0 1
25690: PUSH
25691: DOUBLE
25692: LD_INT 1
25694: DEC
25695: ST_TO_ADDR
25696: LD_VAR 0 2
25700: PUSH
25701: FOR_TO
25702: IFFALSE 25729
// if Prob ( 60 ) then
25704: LD_INT 60
25706: PPUSH
25707: CALL_OW 13
25711: IFFALSE 25727
// SetSide ( i , side ) ;
25713: LD_VAR 0 1
25717: PPUSH
25718: LD_VAR 0 3
25722: PPUSH
25723: CALL_OW 235
25727: GO 25701
25729: POP
25730: POP
// end ;
25731: PPOPN 3
25733: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25734: LD_EXP 82
25738: PUSH
25739: LD_EXP 95
25743: AND
25744: IFFALSE 25863
25746: GO 25748
25748: DISABLE
25749: LD_INT 0
25751: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25752: LD_ADDR_VAR 0 1
25756: PUSH
25757: LD_INT 22
25759: PUSH
25760: LD_OWVAR 2
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 21
25771: PUSH
25772: LD_INT 1
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 3
25781: PUSH
25782: LD_INT 23
25784: PUSH
25785: LD_INT 0
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: LIST
25800: PPUSH
25801: CALL_OW 69
25805: PUSH
25806: FOR_IN
25807: IFFALSE 25861
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25809: LD_VAR 0 1
25813: PPUSH
25814: CALL_OW 257
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: LD_INT 2
25824: PUSH
25825: LD_INT 3
25827: PUSH
25828: LD_INT 4
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: IN
25837: IFFALSE 25859
// SetClass ( un , rand ( 1 , 4 ) ) ;
25839: LD_VAR 0 1
25843: PPUSH
25844: LD_INT 1
25846: PPUSH
25847: LD_INT 4
25849: PPUSH
25850: CALL_OW 12
25854: PPUSH
25855: CALL_OW 336
25859: GO 25806
25861: POP
25862: POP
// end ;
25863: PPOPN 1
25865: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25866: LD_EXP 82
25870: PUSH
25871: LD_EXP 94
25875: AND
25876: IFFALSE 25955
25878: GO 25880
25880: DISABLE
25881: LD_INT 0
25883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25884: LD_ADDR_VAR 0 1
25888: PUSH
25889: LD_INT 22
25891: PUSH
25892: LD_OWVAR 2
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 21
25903: PUSH
25904: LD_INT 3
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PPUSH
25915: CALL_OW 69
25919: ST_TO_ADDR
// if not tmp then
25920: LD_VAR 0 1
25924: NOT
25925: IFFALSE 25929
// exit ;
25927: GO 25955
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25929: LD_VAR 0 1
25933: PUSH
25934: LD_INT 1
25936: PPUSH
25937: LD_VAR 0 1
25941: PPUSH
25942: CALL_OW 12
25946: ARRAY
25947: PPUSH
25948: LD_INT 100
25950: PPUSH
25951: CALL_OW 234
// end ;
25955: PPOPN 1
25957: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25958: LD_EXP 82
25962: PUSH
25963: LD_EXP 96
25967: AND
25968: IFFALSE 26066
25970: GO 25972
25972: DISABLE
25973: LD_INT 0
25975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25976: LD_ADDR_VAR 0 1
25980: PUSH
25981: LD_INT 22
25983: PUSH
25984: LD_OWVAR 2
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 21
25995: PUSH
25996: LD_INT 1
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PPUSH
26007: CALL_OW 69
26011: ST_TO_ADDR
// if not tmp then
26012: LD_VAR 0 1
26016: NOT
26017: IFFALSE 26021
// exit ;
26019: GO 26066
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26021: LD_VAR 0 1
26025: PUSH
26026: LD_INT 1
26028: PPUSH
26029: LD_VAR 0 1
26033: PPUSH
26034: CALL_OW 12
26038: ARRAY
26039: PPUSH
26040: LD_INT 1
26042: PPUSH
26043: LD_INT 4
26045: PPUSH
26046: CALL_OW 12
26050: PPUSH
26051: LD_INT 3000
26053: PPUSH
26054: LD_INT 9000
26056: PPUSH
26057: CALL_OW 12
26061: PPUSH
26062: CALL_OW 492
// end ;
26066: PPOPN 1
26068: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26069: LD_EXP 82
26073: PUSH
26074: LD_EXP 97
26078: AND
26079: IFFALSE 26099
26081: GO 26083
26083: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26084: LD_INT 1
26086: PPUSH
26087: LD_OWVAR 2
26091: PPUSH
26092: LD_INT 0
26094: PPUSH
26095: CALL_OW 324
26099: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26100: LD_EXP 82
26104: PUSH
26105: LD_EXP 98
26109: AND
26110: IFFALSE 26193
26112: GO 26114
26114: DISABLE
26115: LD_INT 0
26117: PPUSH
26118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26119: LD_ADDR_VAR 0 2
26123: PUSH
26124: LD_INT 22
26126: PUSH
26127: LD_OWVAR 2
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 21
26138: PUSH
26139: LD_INT 3
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PPUSH
26150: CALL_OW 69
26154: ST_TO_ADDR
// if not tmp then
26155: LD_VAR 0 2
26159: NOT
26160: IFFALSE 26164
// exit ;
26162: GO 26193
// for i in tmp do
26164: LD_ADDR_VAR 0 1
26168: PUSH
26169: LD_VAR 0 2
26173: PUSH
26174: FOR_IN
26175: IFFALSE 26191
// SetBLevel ( i , 10 ) ;
26177: LD_VAR 0 1
26181: PPUSH
26182: LD_INT 10
26184: PPUSH
26185: CALL_OW 241
26189: GO 26174
26191: POP
26192: POP
// end ;
26193: PPOPN 2
26195: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26196: LD_EXP 82
26200: PUSH
26201: LD_EXP 99
26205: AND
26206: IFFALSE 26317
26208: GO 26210
26210: DISABLE
26211: LD_INT 0
26213: PPUSH
26214: PPUSH
26215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26216: LD_ADDR_VAR 0 3
26220: PUSH
26221: LD_INT 22
26223: PUSH
26224: LD_OWVAR 2
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 25
26235: PUSH
26236: LD_INT 1
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PPUSH
26247: CALL_OW 69
26251: ST_TO_ADDR
// if not tmp then
26252: LD_VAR 0 3
26256: NOT
26257: IFFALSE 26261
// exit ;
26259: GO 26317
// un := tmp [ rand ( 1 , tmp ) ] ;
26261: LD_ADDR_VAR 0 2
26265: PUSH
26266: LD_VAR 0 3
26270: PUSH
26271: LD_INT 1
26273: PPUSH
26274: LD_VAR 0 3
26278: PPUSH
26279: CALL_OW 12
26283: ARRAY
26284: ST_TO_ADDR
// if Crawls ( un ) then
26285: LD_VAR 0 2
26289: PPUSH
26290: CALL_OW 318
26294: IFFALSE 26305
// ComWalk ( un ) ;
26296: LD_VAR 0 2
26300: PPUSH
26301: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26305: LD_VAR 0 2
26309: PPUSH
26310: LD_INT 5
26312: PPUSH
26313: CALL_OW 336
// end ;
26317: PPOPN 3
26319: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26320: LD_EXP 82
26324: PUSH
26325: LD_EXP 100
26329: AND
26330: PUSH
26331: LD_OWVAR 67
26335: PUSH
26336: LD_INT 4
26338: LESS
26339: AND
26340: IFFALSE 26359
26342: GO 26344
26344: DISABLE
// begin Difficulty := Difficulty + 1 ;
26345: LD_ADDR_OWVAR 67
26349: PUSH
26350: LD_OWVAR 67
26354: PUSH
26355: LD_INT 1
26357: PLUS
26358: ST_TO_ADDR
// end ;
26359: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26360: LD_EXP 82
26364: PUSH
26365: LD_EXP 101
26369: AND
26370: IFFALSE 26473
26372: GO 26374
26374: DISABLE
26375: LD_INT 0
26377: PPUSH
// begin for i := 1 to 5 do
26378: LD_ADDR_VAR 0 1
26382: PUSH
26383: DOUBLE
26384: LD_INT 1
26386: DEC
26387: ST_TO_ADDR
26388: LD_INT 5
26390: PUSH
26391: FOR_TO
26392: IFFALSE 26471
// begin uc_nation := nation_nature ;
26394: LD_ADDR_OWVAR 21
26398: PUSH
26399: LD_INT 0
26401: ST_TO_ADDR
// uc_side := 0 ;
26402: LD_ADDR_OWVAR 20
26406: PUSH
26407: LD_INT 0
26409: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26410: LD_ADDR_OWVAR 29
26414: PUSH
26415: LD_INT 12
26417: PUSH
26418: LD_INT 12
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: ST_TO_ADDR
// hc_agressivity := 20 ;
26425: LD_ADDR_OWVAR 35
26429: PUSH
26430: LD_INT 20
26432: ST_TO_ADDR
// hc_class := class_tiger ;
26433: LD_ADDR_OWVAR 28
26437: PUSH
26438: LD_INT 14
26440: ST_TO_ADDR
// hc_gallery :=  ;
26441: LD_ADDR_OWVAR 33
26445: PUSH
26446: LD_STRING 
26448: ST_TO_ADDR
// hc_name :=  ;
26449: LD_ADDR_OWVAR 26
26453: PUSH
26454: LD_STRING 
26456: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26457: CALL_OW 44
26461: PPUSH
26462: LD_INT 0
26464: PPUSH
26465: CALL_OW 51
// end ;
26469: GO 26391
26471: POP
26472: POP
// end ;
26473: PPOPN 1
26475: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26476: LD_EXP 82
26480: PUSH
26481: LD_EXP 102
26485: AND
26486: IFFALSE 26495
26488: GO 26490
26490: DISABLE
// StreamSibBomb ;
26491: CALL 26496 0 0
26495: END
// export function StreamSibBomb ; var i , x , y ; begin
26496: LD_INT 0
26498: PPUSH
26499: PPUSH
26500: PPUSH
26501: PPUSH
// result := false ;
26502: LD_ADDR_VAR 0 1
26506: PUSH
26507: LD_INT 0
26509: ST_TO_ADDR
// for i := 1 to 16 do
26510: LD_ADDR_VAR 0 2
26514: PUSH
26515: DOUBLE
26516: LD_INT 1
26518: DEC
26519: ST_TO_ADDR
26520: LD_INT 16
26522: PUSH
26523: FOR_TO
26524: IFFALSE 26723
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26526: LD_ADDR_VAR 0 3
26530: PUSH
26531: LD_INT 10
26533: PUSH
26534: LD_INT 20
26536: PUSH
26537: LD_INT 30
26539: PUSH
26540: LD_INT 40
26542: PUSH
26543: LD_INT 50
26545: PUSH
26546: LD_INT 60
26548: PUSH
26549: LD_INT 70
26551: PUSH
26552: LD_INT 80
26554: PUSH
26555: LD_INT 90
26557: PUSH
26558: LD_INT 100
26560: PUSH
26561: LD_INT 110
26563: PUSH
26564: LD_INT 120
26566: PUSH
26567: LD_INT 130
26569: PUSH
26570: LD_INT 140
26572: PUSH
26573: LD_INT 150
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 1
26595: PPUSH
26596: LD_INT 15
26598: PPUSH
26599: CALL_OW 12
26603: ARRAY
26604: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26605: LD_ADDR_VAR 0 4
26609: PUSH
26610: LD_INT 10
26612: PUSH
26613: LD_INT 20
26615: PUSH
26616: LD_INT 30
26618: PUSH
26619: LD_INT 40
26621: PUSH
26622: LD_INT 50
26624: PUSH
26625: LD_INT 60
26627: PUSH
26628: LD_INT 70
26630: PUSH
26631: LD_INT 80
26633: PUSH
26634: LD_INT 90
26636: PUSH
26637: LD_INT 100
26639: PUSH
26640: LD_INT 110
26642: PUSH
26643: LD_INT 120
26645: PUSH
26646: LD_INT 130
26648: PUSH
26649: LD_INT 140
26651: PUSH
26652: LD_INT 150
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 1
26674: PPUSH
26675: LD_INT 15
26677: PPUSH
26678: CALL_OW 12
26682: ARRAY
26683: ST_TO_ADDR
// if ValidHex ( x , y ) then
26684: LD_VAR 0 3
26688: PPUSH
26689: LD_VAR 0 4
26693: PPUSH
26694: CALL_OW 488
26698: IFFALSE 26721
// begin result := [ x , y ] ;
26700: LD_ADDR_VAR 0 1
26704: PUSH
26705: LD_VAR 0 3
26709: PUSH
26710: LD_VAR 0 4
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: ST_TO_ADDR
// break ;
26719: GO 26723
// end ; end ;
26721: GO 26523
26723: POP
26724: POP
// if result then
26725: LD_VAR 0 1
26729: IFFALSE 26789
// begin ToLua ( playSibBomb() ) ;
26731: LD_STRING playSibBomb()
26733: PPUSH
26734: CALL_OW 559
// wait ( 0 0$14 ) ;
26738: LD_INT 490
26740: PPUSH
26741: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26745: LD_VAR 0 1
26749: PUSH
26750: LD_INT 1
26752: ARRAY
26753: PPUSH
26754: LD_VAR 0 1
26758: PUSH
26759: LD_INT 2
26761: ARRAY
26762: PPUSH
26763: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26767: LD_VAR 0 1
26771: PUSH
26772: LD_INT 1
26774: ARRAY
26775: PPUSH
26776: LD_VAR 0 1
26780: PUSH
26781: LD_INT 2
26783: ARRAY
26784: PPUSH
26785: CALL_OW 429
// end ; end ;
26789: LD_VAR 0 1
26793: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26794: LD_EXP 82
26798: PUSH
26799: LD_EXP 104
26803: AND
26804: IFFALSE 26816
26806: GO 26808
26808: DISABLE
// YouLost (  ) ;
26809: LD_STRING 
26811: PPUSH
26812: CALL_OW 104
26816: END
// every 0 0$1 trigger StreamModeActive and sFog do
26817: LD_EXP 82
26821: PUSH
26822: LD_EXP 103
26826: AND
26827: IFFALSE 26841
26829: GO 26831
26831: DISABLE
// FogOff ( your_side ) ;
26832: LD_OWVAR 2
26836: PPUSH
26837: CALL_OW 344
26841: END
// every 0 0$1 trigger StreamModeActive and sSun do
26842: LD_EXP 82
26846: PUSH
26847: LD_EXP 105
26851: AND
26852: IFFALSE 26880
26854: GO 26856
26856: DISABLE
// begin solar_recharge_percent := 0 ;
26857: LD_ADDR_OWVAR 79
26861: PUSH
26862: LD_INT 0
26864: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26865: LD_INT 10500
26867: PPUSH
26868: CALL_OW 67
// solar_recharge_percent := 100 ;
26872: LD_ADDR_OWVAR 79
26876: PUSH
26877: LD_INT 100
26879: ST_TO_ADDR
// end ;
26880: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26881: LD_EXP 82
26885: PUSH
26886: LD_EXP 106
26890: AND
26891: IFFALSE 27130
26893: GO 26895
26895: DISABLE
26896: LD_INT 0
26898: PPUSH
26899: PPUSH
26900: PPUSH
// begin tmp := [ ] ;
26901: LD_ADDR_VAR 0 3
26905: PUSH
26906: EMPTY
26907: ST_TO_ADDR
// for i := 1 to 6 do
26908: LD_ADDR_VAR 0 1
26912: PUSH
26913: DOUBLE
26914: LD_INT 1
26916: DEC
26917: ST_TO_ADDR
26918: LD_INT 6
26920: PUSH
26921: FOR_TO
26922: IFFALSE 27027
// begin uc_nation := nation_nature ;
26924: LD_ADDR_OWVAR 21
26928: PUSH
26929: LD_INT 0
26931: ST_TO_ADDR
// uc_side := 0 ;
26932: LD_ADDR_OWVAR 20
26936: PUSH
26937: LD_INT 0
26939: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26940: LD_ADDR_OWVAR 29
26944: PUSH
26945: LD_INT 12
26947: PUSH
26948: LD_INT 12
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: ST_TO_ADDR
// hc_agressivity := 20 ;
26955: LD_ADDR_OWVAR 35
26959: PUSH
26960: LD_INT 20
26962: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26963: LD_ADDR_OWVAR 28
26967: PUSH
26968: LD_INT 17
26970: ST_TO_ADDR
// hc_gallery :=  ;
26971: LD_ADDR_OWVAR 33
26975: PUSH
26976: LD_STRING 
26978: ST_TO_ADDR
// hc_name :=  ;
26979: LD_ADDR_OWVAR 26
26983: PUSH
26984: LD_STRING 
26986: ST_TO_ADDR
// un := CreateHuman ;
26987: LD_ADDR_VAR 0 2
26991: PUSH
26992: CALL_OW 44
26996: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26997: LD_VAR 0 2
27001: PPUSH
27002: LD_INT 1
27004: PPUSH
27005: CALL_OW 51
// tmp := tmp ^ un ;
27009: LD_ADDR_VAR 0 3
27013: PUSH
27014: LD_VAR 0 3
27018: PUSH
27019: LD_VAR 0 2
27023: ADD
27024: ST_TO_ADDR
// end ;
27025: GO 26921
27027: POP
27028: POP
// repeat wait ( 0 0$1 ) ;
27029: LD_INT 35
27031: PPUSH
27032: CALL_OW 67
// for un in tmp do
27036: LD_ADDR_VAR 0 2
27040: PUSH
27041: LD_VAR 0 3
27045: PUSH
27046: FOR_IN
27047: IFFALSE 27121
// begin if IsDead ( un ) then
27049: LD_VAR 0 2
27053: PPUSH
27054: CALL_OW 301
27058: IFFALSE 27078
// begin tmp := tmp diff un ;
27060: LD_ADDR_VAR 0 3
27064: PUSH
27065: LD_VAR 0 3
27069: PUSH
27070: LD_VAR 0 2
27074: DIFF
27075: ST_TO_ADDR
// continue ;
27076: GO 27046
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27078: LD_VAR 0 2
27082: PPUSH
27083: LD_INT 3
27085: PUSH
27086: LD_INT 22
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PPUSH
27100: CALL_OW 69
27104: PPUSH
27105: LD_VAR 0 2
27109: PPUSH
27110: CALL_OW 74
27114: PPUSH
27115: CALL_OW 115
// end ;
27119: GO 27046
27121: POP
27122: POP
// until not tmp ;
27123: LD_VAR 0 3
27127: NOT
27128: IFFALSE 27029
// end ;
27130: PPOPN 3
27132: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27133: LD_EXP 82
27137: PUSH
27138: LD_EXP 107
27142: AND
27143: IFFALSE 27197
27145: GO 27147
27147: DISABLE
// begin ToLua ( displayTroll(); ) ;
27148: LD_STRING displayTroll();
27150: PPUSH
27151: CALL_OW 559
// wait ( 3 3$00 ) ;
27155: LD_INT 6300
27157: PPUSH
27158: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27162: LD_STRING hideTroll();
27164: PPUSH
27165: CALL_OW 559
// wait ( 1 1$00 ) ;
27169: LD_INT 2100
27171: PPUSH
27172: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27176: LD_STRING displayTroll();
27178: PPUSH
27179: CALL_OW 559
// wait ( 1 1$00 ) ;
27183: LD_INT 2100
27185: PPUSH
27186: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27190: LD_STRING hideTroll();
27192: PPUSH
27193: CALL_OW 559
// end ;
27197: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27198: LD_EXP 82
27202: PUSH
27203: LD_EXP 108
27207: AND
27208: IFFALSE 27271
27210: GO 27212
27212: DISABLE
27213: LD_INT 0
27215: PPUSH
// begin p := 0 ;
27216: LD_ADDR_VAR 0 1
27220: PUSH
27221: LD_INT 0
27223: ST_TO_ADDR
// repeat game_speed := 1 ;
27224: LD_ADDR_OWVAR 65
27228: PUSH
27229: LD_INT 1
27231: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27232: LD_INT 35
27234: PPUSH
27235: CALL_OW 67
// p := p + 1 ;
27239: LD_ADDR_VAR 0 1
27243: PUSH
27244: LD_VAR 0 1
27248: PUSH
27249: LD_INT 1
27251: PLUS
27252: ST_TO_ADDR
// until p >= 60 ;
27253: LD_VAR 0 1
27257: PUSH
27258: LD_INT 60
27260: GREATEREQUAL
27261: IFFALSE 27224
// game_speed := 4 ;
27263: LD_ADDR_OWVAR 65
27267: PUSH
27268: LD_INT 4
27270: ST_TO_ADDR
// end ;
27271: PPOPN 1
27273: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27274: LD_EXP 82
27278: PUSH
27279: LD_EXP 109
27283: AND
27284: IFFALSE 27430
27286: GO 27288
27288: DISABLE
27289: LD_INT 0
27291: PPUSH
27292: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27293: LD_ADDR_VAR 0 1
27297: PUSH
27298: LD_INT 22
27300: PUSH
27301: LD_OWVAR 2
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 2
27312: PUSH
27313: LD_INT 30
27315: PUSH
27316: LD_INT 0
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 30
27325: PUSH
27326: LD_INT 1
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: LIST
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PPUSH
27342: CALL_OW 69
27346: ST_TO_ADDR
// if not depot then
27347: LD_VAR 0 1
27351: NOT
27352: IFFALSE 27356
// exit ;
27354: GO 27430
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27356: LD_ADDR_VAR 0 2
27360: PUSH
27361: LD_VAR 0 1
27365: PUSH
27366: LD_INT 1
27368: PPUSH
27369: LD_VAR 0 1
27373: PPUSH
27374: CALL_OW 12
27378: ARRAY
27379: PPUSH
27380: CALL_OW 274
27384: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27385: LD_VAR 0 2
27389: PPUSH
27390: LD_INT 1
27392: PPUSH
27393: LD_INT 0
27395: PPUSH
27396: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27400: LD_VAR 0 2
27404: PPUSH
27405: LD_INT 2
27407: PPUSH
27408: LD_INT 0
27410: PPUSH
27411: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27415: LD_VAR 0 2
27419: PPUSH
27420: LD_INT 3
27422: PPUSH
27423: LD_INT 0
27425: PPUSH
27426: CALL_OW 277
// end ;
27430: PPOPN 2
27432: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27433: LD_EXP 82
27437: PUSH
27438: LD_EXP 110
27442: AND
27443: IFFALSE 27540
27445: GO 27447
27447: DISABLE
27448: LD_INT 0
27450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27451: LD_ADDR_VAR 0 1
27455: PUSH
27456: LD_INT 22
27458: PUSH
27459: LD_OWVAR 2
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 21
27470: PUSH
27471: LD_INT 1
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 3
27480: PUSH
27481: LD_INT 23
27483: PUSH
27484: LD_INT 0
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: LIST
27499: PPUSH
27500: CALL_OW 69
27504: ST_TO_ADDR
// if not tmp then
27505: LD_VAR 0 1
27509: NOT
27510: IFFALSE 27514
// exit ;
27512: GO 27540
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27514: LD_VAR 0 1
27518: PUSH
27519: LD_INT 1
27521: PPUSH
27522: LD_VAR 0 1
27526: PPUSH
27527: CALL_OW 12
27531: ARRAY
27532: PPUSH
27533: LD_INT 200
27535: PPUSH
27536: CALL_OW 234
// end ;
27540: PPOPN 1
27542: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27543: LD_EXP 82
27547: PUSH
27548: LD_EXP 111
27552: AND
27553: IFFALSE 27632
27555: GO 27557
27557: DISABLE
27558: LD_INT 0
27560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27561: LD_ADDR_VAR 0 1
27565: PUSH
27566: LD_INT 22
27568: PUSH
27569: LD_OWVAR 2
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 21
27580: PUSH
27581: LD_INT 2
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PPUSH
27592: CALL_OW 69
27596: ST_TO_ADDR
// if not tmp then
27597: LD_VAR 0 1
27601: NOT
27602: IFFALSE 27606
// exit ;
27604: GO 27632
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27606: LD_VAR 0 1
27610: PUSH
27611: LD_INT 1
27613: PPUSH
27614: LD_VAR 0 1
27618: PPUSH
27619: CALL_OW 12
27623: ARRAY
27624: PPUSH
27625: LD_INT 60
27627: PPUSH
27628: CALL_OW 234
// end ;
27632: PPOPN 1
27634: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27635: LD_EXP 82
27639: PUSH
27640: LD_EXP 112
27644: AND
27645: IFFALSE 27744
27647: GO 27649
27649: DISABLE
27650: LD_INT 0
27652: PPUSH
27653: PPUSH
// begin enable ;
27654: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27655: LD_ADDR_VAR 0 1
27659: PUSH
27660: LD_INT 22
27662: PUSH
27663: LD_OWVAR 2
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 61
27674: PUSH
27675: EMPTY
27676: LIST
27677: PUSH
27678: LD_INT 33
27680: PUSH
27681: LD_INT 2
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: LIST
27692: PPUSH
27693: CALL_OW 69
27697: ST_TO_ADDR
// if not tmp then
27698: LD_VAR 0 1
27702: NOT
27703: IFFALSE 27707
// exit ;
27705: GO 27744
// for i in tmp do
27707: LD_ADDR_VAR 0 2
27711: PUSH
27712: LD_VAR 0 1
27716: PUSH
27717: FOR_IN
27718: IFFALSE 27742
// if IsControledBy ( i ) then
27720: LD_VAR 0 2
27724: PPUSH
27725: CALL_OW 312
27729: IFFALSE 27740
// ComUnlink ( i ) ;
27731: LD_VAR 0 2
27735: PPUSH
27736: CALL_OW 136
27740: GO 27717
27742: POP
27743: POP
// end ;
27744: PPOPN 2
27746: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27747: LD_EXP 82
27751: PUSH
27752: LD_EXP 113
27756: AND
27757: IFFALSE 27897
27759: GO 27761
27761: DISABLE
27762: LD_INT 0
27764: PPUSH
27765: PPUSH
// begin ToLua ( displayPowell(); ) ;
27766: LD_STRING displayPowell();
27768: PPUSH
27769: CALL_OW 559
// uc_side := 0 ;
27773: LD_ADDR_OWVAR 20
27777: PUSH
27778: LD_INT 0
27780: ST_TO_ADDR
// uc_nation := 2 ;
27781: LD_ADDR_OWVAR 21
27785: PUSH
27786: LD_INT 2
27788: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27789: LD_ADDR_OWVAR 37
27793: PUSH
27794: LD_INT 14
27796: ST_TO_ADDR
// vc_engine := engine_siberite ;
27797: LD_ADDR_OWVAR 39
27801: PUSH
27802: LD_INT 3
27804: ST_TO_ADDR
// vc_control := control_apeman ;
27805: LD_ADDR_OWVAR 38
27809: PUSH
27810: LD_INT 5
27812: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27813: LD_ADDR_OWVAR 40
27817: PUSH
27818: LD_INT 29
27820: ST_TO_ADDR
// un := CreateVehicle ;
27821: LD_ADDR_VAR 0 2
27825: PUSH
27826: CALL_OW 45
27830: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27831: LD_VAR 0 2
27835: PPUSH
27836: LD_INT 1
27838: PPUSH
27839: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27843: LD_INT 35
27845: PPUSH
27846: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27850: LD_VAR 0 2
27854: PPUSH
27855: LD_INT 22
27857: PUSH
27858: LD_OWVAR 2
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PPUSH
27867: CALL_OW 69
27871: PPUSH
27872: LD_VAR 0 2
27876: PPUSH
27877: CALL_OW 74
27881: PPUSH
27882: CALL_OW 115
// until IsDead ( un ) ;
27886: LD_VAR 0 2
27890: PPUSH
27891: CALL_OW 301
27895: IFFALSE 27843
// end ;
27897: PPOPN 2
27899: END
// every 0 0$1 trigger StreamModeActive and sStu do
27900: LD_EXP 82
27904: PUSH
27905: LD_EXP 121
27909: AND
27910: IFFALSE 27926
27912: GO 27914
27914: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27915: LD_STRING displayStucuk();
27917: PPUSH
27918: CALL_OW 559
// ResetFog ;
27922: CALL_OW 335
// end ;
27926: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27927: LD_EXP 82
27931: PUSH
27932: LD_EXP 114
27936: AND
27937: IFFALSE 28078
27939: GO 27941
27941: DISABLE
27942: LD_INT 0
27944: PPUSH
27945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27946: LD_ADDR_VAR 0 2
27950: PUSH
27951: LD_INT 22
27953: PUSH
27954: LD_OWVAR 2
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 21
27965: PUSH
27966: LD_INT 1
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PPUSH
27977: CALL_OW 69
27981: ST_TO_ADDR
// if not tmp then
27982: LD_VAR 0 2
27986: NOT
27987: IFFALSE 27991
// exit ;
27989: GO 28078
// un := tmp [ rand ( 1 , tmp ) ] ;
27991: LD_ADDR_VAR 0 1
27995: PUSH
27996: LD_VAR 0 2
28000: PUSH
28001: LD_INT 1
28003: PPUSH
28004: LD_VAR 0 2
28008: PPUSH
28009: CALL_OW 12
28013: ARRAY
28014: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28015: LD_VAR 0 1
28019: PPUSH
28020: LD_INT 0
28022: PPUSH
28023: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28027: LD_VAR 0 1
28031: PPUSH
28032: LD_OWVAR 3
28036: PUSH
28037: LD_VAR 0 1
28041: DIFF
28042: PPUSH
28043: LD_VAR 0 1
28047: PPUSH
28048: CALL_OW 74
28052: PPUSH
28053: CALL_OW 115
// wait ( 0 0$20 ) ;
28057: LD_INT 700
28059: PPUSH
28060: CALL_OW 67
// SetSide ( un , your_side ) ;
28064: LD_VAR 0 1
28068: PPUSH
28069: LD_OWVAR 2
28073: PPUSH
28074: CALL_OW 235
// end ;
28078: PPOPN 2
28080: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28081: LD_EXP 82
28085: PUSH
28086: LD_EXP 115
28090: AND
28091: IFFALSE 28197
28093: GO 28095
28095: DISABLE
28096: LD_INT 0
28098: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28099: LD_ADDR_VAR 0 1
28103: PUSH
28104: LD_INT 22
28106: PUSH
28107: LD_OWVAR 2
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 2
28118: PUSH
28119: LD_INT 30
28121: PUSH
28122: LD_INT 0
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 30
28131: PUSH
28132: LD_INT 1
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: LIST
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PPUSH
28148: CALL_OW 69
28152: ST_TO_ADDR
// if not depot then
28153: LD_VAR 0 1
28157: NOT
28158: IFFALSE 28162
// exit ;
28160: GO 28197
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28162: LD_VAR 0 1
28166: PUSH
28167: LD_INT 1
28169: ARRAY
28170: PPUSH
28171: CALL_OW 250
28175: PPUSH
28176: LD_VAR 0 1
28180: PUSH
28181: LD_INT 1
28183: ARRAY
28184: PPUSH
28185: CALL_OW 251
28189: PPUSH
28190: LD_INT 70
28192: PPUSH
28193: CALL_OW 495
// end ;
28197: PPOPN 1
28199: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28200: LD_EXP 82
28204: PUSH
28205: LD_EXP 116
28209: AND
28210: IFFALSE 28421
28212: GO 28214
28214: DISABLE
28215: LD_INT 0
28217: PPUSH
28218: PPUSH
28219: PPUSH
28220: PPUSH
28221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28222: LD_ADDR_VAR 0 5
28226: PUSH
28227: LD_INT 22
28229: PUSH
28230: LD_OWVAR 2
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 21
28241: PUSH
28242: LD_INT 1
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PPUSH
28253: CALL_OW 69
28257: ST_TO_ADDR
// if not tmp then
28258: LD_VAR 0 5
28262: NOT
28263: IFFALSE 28267
// exit ;
28265: GO 28421
// for i in tmp do
28267: LD_ADDR_VAR 0 1
28271: PUSH
28272: LD_VAR 0 5
28276: PUSH
28277: FOR_IN
28278: IFFALSE 28419
// begin d := rand ( 0 , 5 ) ;
28280: LD_ADDR_VAR 0 4
28284: PUSH
28285: LD_INT 0
28287: PPUSH
28288: LD_INT 5
28290: PPUSH
28291: CALL_OW 12
28295: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28296: LD_ADDR_VAR 0 2
28300: PUSH
28301: LD_VAR 0 1
28305: PPUSH
28306: CALL_OW 250
28310: PPUSH
28311: LD_VAR 0 4
28315: PPUSH
28316: LD_INT 3
28318: PPUSH
28319: LD_INT 12
28321: PPUSH
28322: CALL_OW 12
28326: PPUSH
28327: CALL_OW 272
28331: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28332: LD_ADDR_VAR 0 3
28336: PUSH
28337: LD_VAR 0 1
28341: PPUSH
28342: CALL_OW 251
28346: PPUSH
28347: LD_VAR 0 4
28351: PPUSH
28352: LD_INT 3
28354: PPUSH
28355: LD_INT 12
28357: PPUSH
28358: CALL_OW 12
28362: PPUSH
28363: CALL_OW 273
28367: ST_TO_ADDR
// if ValidHex ( x , y ) then
28368: LD_VAR 0 2
28372: PPUSH
28373: LD_VAR 0 3
28377: PPUSH
28378: CALL_OW 488
28382: IFFALSE 28417
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28384: LD_VAR 0 1
28388: PPUSH
28389: LD_VAR 0 2
28393: PPUSH
28394: LD_VAR 0 3
28398: PPUSH
28399: LD_INT 3
28401: PPUSH
28402: LD_INT 6
28404: PPUSH
28405: CALL_OW 12
28409: PPUSH
28410: LD_INT 1
28412: PPUSH
28413: CALL_OW 483
// end ;
28417: GO 28277
28419: POP
28420: POP
// end ;
28421: PPOPN 5
28423: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28424: LD_EXP 82
28428: PUSH
28429: LD_EXP 117
28433: AND
28434: IFFALSE 28528
28436: GO 28438
28438: DISABLE
28439: LD_INT 0
28441: PPUSH
28442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28443: LD_ADDR_VAR 0 2
28447: PUSH
28448: LD_INT 22
28450: PUSH
28451: LD_OWVAR 2
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 32
28462: PUSH
28463: LD_INT 1
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 21
28472: PUSH
28473: LD_INT 2
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: LIST
28484: PPUSH
28485: CALL_OW 69
28489: ST_TO_ADDR
// if not tmp then
28490: LD_VAR 0 2
28494: NOT
28495: IFFALSE 28499
// exit ;
28497: GO 28528
// for i in tmp do
28499: LD_ADDR_VAR 0 1
28503: PUSH
28504: LD_VAR 0 2
28508: PUSH
28509: FOR_IN
28510: IFFALSE 28526
// SetFuel ( i , 0 ) ;
28512: LD_VAR 0 1
28516: PPUSH
28517: LD_INT 0
28519: PPUSH
28520: CALL_OW 240
28524: GO 28509
28526: POP
28527: POP
// end ;
28528: PPOPN 2
28530: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28531: LD_EXP 82
28535: PUSH
28536: LD_EXP 118
28540: AND
28541: IFFALSE 28607
28543: GO 28545
28545: DISABLE
28546: LD_INT 0
28548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28549: LD_ADDR_VAR 0 1
28553: PUSH
28554: LD_INT 22
28556: PUSH
28557: LD_OWVAR 2
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 30
28568: PUSH
28569: LD_INT 29
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PPUSH
28580: CALL_OW 69
28584: ST_TO_ADDR
// if not tmp then
28585: LD_VAR 0 1
28589: NOT
28590: IFFALSE 28594
// exit ;
28592: GO 28607
// DestroyUnit ( tmp [ 1 ] ) ;
28594: LD_VAR 0 1
28598: PUSH
28599: LD_INT 1
28601: ARRAY
28602: PPUSH
28603: CALL_OW 65
// end ;
28607: PPOPN 1
28609: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28610: LD_EXP 82
28614: PUSH
28615: LD_EXP 120
28619: AND
28620: IFFALSE 28749
28622: GO 28624
28624: DISABLE
28625: LD_INT 0
28627: PPUSH
// begin uc_side := 0 ;
28628: LD_ADDR_OWVAR 20
28632: PUSH
28633: LD_INT 0
28635: ST_TO_ADDR
// uc_nation := nation_arabian ;
28636: LD_ADDR_OWVAR 21
28640: PUSH
28641: LD_INT 2
28643: ST_TO_ADDR
// hc_gallery :=  ;
28644: LD_ADDR_OWVAR 33
28648: PUSH
28649: LD_STRING 
28651: ST_TO_ADDR
// hc_name :=  ;
28652: LD_ADDR_OWVAR 26
28656: PUSH
28657: LD_STRING 
28659: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28660: LD_INT 1
28662: PPUSH
28663: LD_INT 11
28665: PPUSH
28666: LD_INT 10
28668: PPUSH
28669: CALL_OW 380
// un := CreateHuman ;
28673: LD_ADDR_VAR 0 1
28677: PUSH
28678: CALL_OW 44
28682: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28683: LD_VAR 0 1
28687: PPUSH
28688: LD_INT 1
28690: PPUSH
28691: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28695: LD_INT 35
28697: PPUSH
28698: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28702: LD_VAR 0 1
28706: PPUSH
28707: LD_INT 22
28709: PUSH
28710: LD_OWVAR 2
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PPUSH
28719: CALL_OW 69
28723: PPUSH
28724: LD_VAR 0 1
28728: PPUSH
28729: CALL_OW 74
28733: PPUSH
28734: CALL_OW 115
// until IsDead ( un ) ;
28738: LD_VAR 0 1
28742: PPUSH
28743: CALL_OW 301
28747: IFFALSE 28695
// end ;
28749: PPOPN 1
28751: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28752: LD_EXP 82
28756: PUSH
28757: LD_EXP 122
28761: AND
28762: IFFALSE 28774
28764: GO 28766
28766: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28767: LD_STRING earthquake(getX(game), 0, 32)
28769: PPUSH
28770: CALL_OW 559
28774: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28775: LD_EXP 82
28779: PUSH
28780: LD_EXP 123
28784: AND
28785: IFFALSE 28876
28787: GO 28789
28789: DISABLE
28790: LD_INT 0
28792: PPUSH
// begin enable ;
28793: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28794: LD_ADDR_VAR 0 1
28798: PUSH
28799: LD_INT 22
28801: PUSH
28802: LD_OWVAR 2
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 21
28813: PUSH
28814: LD_INT 2
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 33
28823: PUSH
28824: LD_INT 3
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: LIST
28835: PPUSH
28836: CALL_OW 69
28840: ST_TO_ADDR
// if not tmp then
28841: LD_VAR 0 1
28845: NOT
28846: IFFALSE 28850
// exit ;
28848: GO 28876
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28850: LD_VAR 0 1
28854: PUSH
28855: LD_INT 1
28857: PPUSH
28858: LD_VAR 0 1
28862: PPUSH
28863: CALL_OW 12
28867: ARRAY
28868: PPUSH
28869: LD_INT 1
28871: PPUSH
28872: CALL_OW 234
// end ;
28876: PPOPN 1
28878: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28879: LD_EXP 82
28883: PUSH
28884: LD_EXP 124
28888: AND
28889: IFFALSE 29030
28891: GO 28893
28893: DISABLE
28894: LD_INT 0
28896: PPUSH
28897: PPUSH
28898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28899: LD_ADDR_VAR 0 3
28903: PUSH
28904: LD_INT 22
28906: PUSH
28907: LD_OWVAR 2
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 25
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PPUSH
28930: CALL_OW 69
28934: ST_TO_ADDR
// if not tmp then
28935: LD_VAR 0 3
28939: NOT
28940: IFFALSE 28944
// exit ;
28942: GO 29030
// un := tmp [ rand ( 1 , tmp ) ] ;
28944: LD_ADDR_VAR 0 2
28948: PUSH
28949: LD_VAR 0 3
28953: PUSH
28954: LD_INT 1
28956: PPUSH
28957: LD_VAR 0 3
28961: PPUSH
28962: CALL_OW 12
28966: ARRAY
28967: ST_TO_ADDR
// if Crawls ( un ) then
28968: LD_VAR 0 2
28972: PPUSH
28973: CALL_OW 318
28977: IFFALSE 28988
// ComWalk ( un ) ;
28979: LD_VAR 0 2
28983: PPUSH
28984: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28988: LD_VAR 0 2
28992: PPUSH
28993: LD_INT 9
28995: PPUSH
28996: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29000: LD_INT 28
29002: PPUSH
29003: LD_OWVAR 2
29007: PPUSH
29008: LD_INT 2
29010: PPUSH
29011: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29015: LD_INT 29
29017: PPUSH
29018: LD_OWVAR 2
29022: PPUSH
29023: LD_INT 2
29025: PPUSH
29026: CALL_OW 322
// end ;
29030: PPOPN 3
29032: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29033: LD_EXP 82
29037: PUSH
29038: LD_EXP 125
29042: AND
29043: IFFALSE 29154
29045: GO 29047
29047: DISABLE
29048: LD_INT 0
29050: PPUSH
29051: PPUSH
29052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29053: LD_ADDR_VAR 0 3
29057: PUSH
29058: LD_INT 22
29060: PUSH
29061: LD_OWVAR 2
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 25
29072: PUSH
29073: LD_INT 1
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PPUSH
29084: CALL_OW 69
29088: ST_TO_ADDR
// if not tmp then
29089: LD_VAR 0 3
29093: NOT
29094: IFFALSE 29098
// exit ;
29096: GO 29154
// un := tmp [ rand ( 1 , tmp ) ] ;
29098: LD_ADDR_VAR 0 2
29102: PUSH
29103: LD_VAR 0 3
29107: PUSH
29108: LD_INT 1
29110: PPUSH
29111: LD_VAR 0 3
29115: PPUSH
29116: CALL_OW 12
29120: ARRAY
29121: ST_TO_ADDR
// if Crawls ( un ) then
29122: LD_VAR 0 2
29126: PPUSH
29127: CALL_OW 318
29131: IFFALSE 29142
// ComWalk ( un ) ;
29133: LD_VAR 0 2
29137: PPUSH
29138: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29142: LD_VAR 0 2
29146: PPUSH
29147: LD_INT 8
29149: PPUSH
29150: CALL_OW 336
// end ;
29154: PPOPN 3
29156: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29157: LD_EXP 82
29161: PUSH
29162: LD_EXP 126
29166: AND
29167: IFFALSE 29311
29169: GO 29171
29171: DISABLE
29172: LD_INT 0
29174: PPUSH
29175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29176: LD_ADDR_VAR 0 2
29180: PUSH
29181: LD_INT 22
29183: PUSH
29184: LD_OWVAR 2
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 21
29195: PUSH
29196: LD_INT 2
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 2
29205: PUSH
29206: LD_INT 34
29208: PUSH
29209: LD_INT 12
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 34
29218: PUSH
29219: LD_INT 51
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 34
29228: PUSH
29229: LD_INT 32
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: LIST
29246: PPUSH
29247: CALL_OW 69
29251: ST_TO_ADDR
// if not tmp then
29252: LD_VAR 0 2
29256: NOT
29257: IFFALSE 29261
// exit ;
29259: GO 29311
// for i in tmp do
29261: LD_ADDR_VAR 0 1
29265: PUSH
29266: LD_VAR 0 2
29270: PUSH
29271: FOR_IN
29272: IFFALSE 29309
// if GetCargo ( i , mat_artifact ) = 0 then
29274: LD_VAR 0 1
29278: PPUSH
29279: LD_INT 4
29281: PPUSH
29282: CALL_OW 289
29286: PUSH
29287: LD_INT 0
29289: EQUAL
29290: IFFALSE 29307
// SetCargo ( i , mat_siberit , 100 ) ;
29292: LD_VAR 0 1
29296: PPUSH
29297: LD_INT 3
29299: PPUSH
29300: LD_INT 100
29302: PPUSH
29303: CALL_OW 290
29307: GO 29271
29309: POP
29310: POP
// end ;
29311: PPOPN 2
29313: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29314: LD_EXP 82
29318: PUSH
29319: LD_EXP 127
29323: AND
29324: IFFALSE 29507
29326: GO 29328
29328: DISABLE
29329: LD_INT 0
29331: PPUSH
29332: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29333: LD_ADDR_VAR 0 2
29337: PUSH
29338: LD_INT 22
29340: PUSH
29341: LD_OWVAR 2
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PPUSH
29350: CALL_OW 69
29354: ST_TO_ADDR
// if not tmp then
29355: LD_VAR 0 2
29359: NOT
29360: IFFALSE 29364
// exit ;
29362: GO 29507
// for i := 1 to 2 do
29364: LD_ADDR_VAR 0 1
29368: PUSH
29369: DOUBLE
29370: LD_INT 1
29372: DEC
29373: ST_TO_ADDR
29374: LD_INT 2
29376: PUSH
29377: FOR_TO
29378: IFFALSE 29505
// begin uc_side := your_side ;
29380: LD_ADDR_OWVAR 20
29384: PUSH
29385: LD_OWVAR 2
29389: ST_TO_ADDR
// uc_nation := nation_american ;
29390: LD_ADDR_OWVAR 21
29394: PUSH
29395: LD_INT 1
29397: ST_TO_ADDR
// vc_chassis := us_morphling ;
29398: LD_ADDR_OWVAR 37
29402: PUSH
29403: LD_INT 5
29405: ST_TO_ADDR
// vc_engine := engine_siberite ;
29406: LD_ADDR_OWVAR 39
29410: PUSH
29411: LD_INT 3
29413: ST_TO_ADDR
// vc_control := control_computer ;
29414: LD_ADDR_OWVAR 38
29418: PUSH
29419: LD_INT 3
29421: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29422: LD_ADDR_OWVAR 40
29426: PUSH
29427: LD_INT 10
29429: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29430: LD_VAR 0 2
29434: PUSH
29435: LD_INT 1
29437: ARRAY
29438: PPUSH
29439: CALL_OW 310
29443: NOT
29444: IFFALSE 29491
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29446: CALL_OW 45
29450: PPUSH
29451: LD_VAR 0 2
29455: PUSH
29456: LD_INT 1
29458: ARRAY
29459: PPUSH
29460: CALL_OW 250
29464: PPUSH
29465: LD_VAR 0 2
29469: PUSH
29470: LD_INT 1
29472: ARRAY
29473: PPUSH
29474: CALL_OW 251
29478: PPUSH
29479: LD_INT 12
29481: PPUSH
29482: LD_INT 1
29484: PPUSH
29485: CALL_OW 50
29489: GO 29503
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29491: CALL_OW 45
29495: PPUSH
29496: LD_INT 1
29498: PPUSH
29499: CALL_OW 51
// end ;
29503: GO 29377
29505: POP
29506: POP
// end ;
29507: PPOPN 2
29509: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29510: LD_EXP 82
29514: PUSH
29515: LD_EXP 128
29519: AND
29520: IFFALSE 29742
29522: GO 29524
29524: DISABLE
29525: LD_INT 0
29527: PPUSH
29528: PPUSH
29529: PPUSH
29530: PPUSH
29531: PPUSH
29532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29533: LD_ADDR_VAR 0 6
29537: PUSH
29538: LD_INT 22
29540: PUSH
29541: LD_OWVAR 2
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 21
29552: PUSH
29553: LD_INT 1
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 3
29562: PUSH
29563: LD_INT 23
29565: PUSH
29566: LD_INT 0
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: LIST
29581: PPUSH
29582: CALL_OW 69
29586: ST_TO_ADDR
// if not tmp then
29587: LD_VAR 0 6
29591: NOT
29592: IFFALSE 29596
// exit ;
29594: GO 29742
// s1 := rand ( 1 , 4 ) ;
29596: LD_ADDR_VAR 0 2
29600: PUSH
29601: LD_INT 1
29603: PPUSH
29604: LD_INT 4
29606: PPUSH
29607: CALL_OW 12
29611: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29612: LD_ADDR_VAR 0 4
29616: PUSH
29617: LD_VAR 0 6
29621: PUSH
29622: LD_INT 1
29624: ARRAY
29625: PPUSH
29626: LD_VAR 0 2
29630: PPUSH
29631: CALL_OW 259
29635: ST_TO_ADDR
// if s1 = 1 then
29636: LD_VAR 0 2
29640: PUSH
29641: LD_INT 1
29643: EQUAL
29644: IFFALSE 29664
// s2 := rand ( 2 , 4 ) else
29646: LD_ADDR_VAR 0 3
29650: PUSH
29651: LD_INT 2
29653: PPUSH
29654: LD_INT 4
29656: PPUSH
29657: CALL_OW 12
29661: ST_TO_ADDR
29662: GO 29672
// s2 := 1 ;
29664: LD_ADDR_VAR 0 3
29668: PUSH
29669: LD_INT 1
29671: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29672: LD_ADDR_VAR 0 5
29676: PUSH
29677: LD_VAR 0 6
29681: PUSH
29682: LD_INT 1
29684: ARRAY
29685: PPUSH
29686: LD_VAR 0 3
29690: PPUSH
29691: CALL_OW 259
29695: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29696: LD_VAR 0 6
29700: PUSH
29701: LD_INT 1
29703: ARRAY
29704: PPUSH
29705: LD_VAR 0 2
29709: PPUSH
29710: LD_VAR 0 5
29714: PPUSH
29715: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29719: LD_VAR 0 6
29723: PUSH
29724: LD_INT 1
29726: ARRAY
29727: PPUSH
29728: LD_VAR 0 3
29732: PPUSH
29733: LD_VAR 0 4
29737: PPUSH
29738: CALL_OW 237
// end ;
29742: PPOPN 6
29744: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29745: LD_EXP 82
29749: PUSH
29750: LD_EXP 129
29754: AND
29755: IFFALSE 29834
29757: GO 29759
29759: DISABLE
29760: LD_INT 0
29762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29763: LD_ADDR_VAR 0 1
29767: PUSH
29768: LD_INT 22
29770: PUSH
29771: LD_OWVAR 2
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 30
29782: PUSH
29783: LD_INT 3
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PPUSH
29794: CALL_OW 69
29798: ST_TO_ADDR
// if not tmp then
29799: LD_VAR 0 1
29803: NOT
29804: IFFALSE 29808
// exit ;
29806: GO 29834
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29808: LD_VAR 0 1
29812: PUSH
29813: LD_INT 1
29815: PPUSH
29816: LD_VAR 0 1
29820: PPUSH
29821: CALL_OW 12
29825: ARRAY
29826: PPUSH
29827: LD_INT 1
29829: PPUSH
29830: CALL_OW 234
// end ;
29834: PPOPN 1
29836: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29837: LD_EXP 82
29841: PUSH
29842: LD_EXP 130
29846: AND
29847: IFFALSE 29959
29849: GO 29851
29851: DISABLE
29852: LD_INT 0
29854: PPUSH
29855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29856: LD_ADDR_VAR 0 2
29860: PUSH
29861: LD_INT 22
29863: PUSH
29864: LD_OWVAR 2
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 2
29875: PUSH
29876: LD_INT 30
29878: PUSH
29879: LD_INT 27
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 30
29888: PUSH
29889: LD_INT 26
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 30
29898: PUSH
29899: LD_INT 28
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PPUSH
29916: CALL_OW 69
29920: ST_TO_ADDR
// if not tmp then
29921: LD_VAR 0 2
29925: NOT
29926: IFFALSE 29930
// exit ;
29928: GO 29959
// for i in tmp do
29930: LD_ADDR_VAR 0 1
29934: PUSH
29935: LD_VAR 0 2
29939: PUSH
29940: FOR_IN
29941: IFFALSE 29957
// SetLives ( i , 1 ) ;
29943: LD_VAR 0 1
29947: PPUSH
29948: LD_INT 1
29950: PPUSH
29951: CALL_OW 234
29955: GO 29940
29957: POP
29958: POP
// end ;
29959: PPOPN 2
29961: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29962: LD_EXP 82
29966: PUSH
29967: LD_EXP 131
29971: AND
29972: IFFALSE 30259
29974: GO 29976
29976: DISABLE
29977: LD_INT 0
29979: PPUSH
29980: PPUSH
29981: PPUSH
// begin i := rand ( 1 , 7 ) ;
29982: LD_ADDR_VAR 0 1
29986: PUSH
29987: LD_INT 1
29989: PPUSH
29990: LD_INT 7
29992: PPUSH
29993: CALL_OW 12
29997: ST_TO_ADDR
// case i of 1 :
29998: LD_VAR 0 1
30002: PUSH
30003: LD_INT 1
30005: DOUBLE
30006: EQUAL
30007: IFTRUE 30011
30009: GO 30021
30011: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30012: LD_STRING earthquake(getX(game), 0, 32)
30014: PPUSH
30015: CALL_OW 559
30019: GO 30259
30021: LD_INT 2
30023: DOUBLE
30024: EQUAL
30025: IFTRUE 30029
30027: GO 30043
30029: POP
// begin ToLua ( displayStucuk(); ) ;
30030: LD_STRING displayStucuk();
30032: PPUSH
30033: CALL_OW 559
// ResetFog ;
30037: CALL_OW 335
// end ; 3 :
30041: GO 30259
30043: LD_INT 3
30045: DOUBLE
30046: EQUAL
30047: IFTRUE 30051
30049: GO 30155
30051: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30052: LD_ADDR_VAR 0 2
30056: PUSH
30057: LD_INT 22
30059: PUSH
30060: LD_OWVAR 2
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 25
30071: PUSH
30072: LD_INT 1
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PPUSH
30083: CALL_OW 69
30087: ST_TO_ADDR
// if not tmp then
30088: LD_VAR 0 2
30092: NOT
30093: IFFALSE 30097
// exit ;
30095: GO 30259
// un := tmp [ rand ( 1 , tmp ) ] ;
30097: LD_ADDR_VAR 0 3
30101: PUSH
30102: LD_VAR 0 2
30106: PUSH
30107: LD_INT 1
30109: PPUSH
30110: LD_VAR 0 2
30114: PPUSH
30115: CALL_OW 12
30119: ARRAY
30120: ST_TO_ADDR
// if Crawls ( un ) then
30121: LD_VAR 0 3
30125: PPUSH
30126: CALL_OW 318
30130: IFFALSE 30141
// ComWalk ( un ) ;
30132: LD_VAR 0 3
30136: PPUSH
30137: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30141: LD_VAR 0 3
30145: PPUSH
30146: LD_INT 8
30148: PPUSH
30149: CALL_OW 336
// end ; 4 :
30153: GO 30259
30155: LD_INT 4
30157: DOUBLE
30158: EQUAL
30159: IFTRUE 30163
30161: GO 30237
30163: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30164: LD_ADDR_VAR 0 2
30168: PUSH
30169: LD_INT 22
30171: PUSH
30172: LD_OWVAR 2
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 30
30183: PUSH
30184: LD_INT 29
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PPUSH
30195: CALL_OW 69
30199: ST_TO_ADDR
// if not tmp then
30200: LD_VAR 0 2
30204: NOT
30205: IFFALSE 30209
// exit ;
30207: GO 30259
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30209: LD_VAR 0 2
30213: PUSH
30214: LD_INT 1
30216: ARRAY
30217: PPUSH
30218: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30222: LD_VAR 0 2
30226: PUSH
30227: LD_INT 1
30229: ARRAY
30230: PPUSH
30231: CALL_OW 65
// end ; 5 .. 7 :
30235: GO 30259
30237: LD_INT 5
30239: DOUBLE
30240: GREATEREQUAL
30241: IFFALSE 30249
30243: LD_INT 7
30245: DOUBLE
30246: LESSEQUAL
30247: IFTRUE 30251
30249: GO 30258
30251: POP
// StreamSibBomb ; end ;
30252: CALL 26496 0 0
30256: GO 30259
30258: POP
// end ;
30259: PPOPN 3
30261: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30262: LD_EXP 82
30266: PUSH
30267: LD_EXP 132
30271: AND
30272: IFFALSE 30428
30274: GO 30276
30276: DISABLE
30277: LD_INT 0
30279: PPUSH
30280: PPUSH
30281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30282: LD_ADDR_VAR 0 2
30286: PUSH
30287: LD_INT 81
30289: PUSH
30290: LD_OWVAR 2
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 2
30301: PUSH
30302: LD_INT 21
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 21
30314: PUSH
30315: LD_INT 2
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: LIST
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PPUSH
30331: CALL_OW 69
30335: ST_TO_ADDR
// if not tmp then
30336: LD_VAR 0 2
30340: NOT
30341: IFFALSE 30345
// exit ;
30343: GO 30428
// p := 0 ;
30345: LD_ADDR_VAR 0 3
30349: PUSH
30350: LD_INT 0
30352: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30353: LD_INT 35
30355: PPUSH
30356: CALL_OW 67
// p := p + 1 ;
30360: LD_ADDR_VAR 0 3
30364: PUSH
30365: LD_VAR 0 3
30369: PUSH
30370: LD_INT 1
30372: PLUS
30373: ST_TO_ADDR
// for i in tmp do
30374: LD_ADDR_VAR 0 1
30378: PUSH
30379: LD_VAR 0 2
30383: PUSH
30384: FOR_IN
30385: IFFALSE 30416
// if GetLives ( i ) < 1000 then
30387: LD_VAR 0 1
30391: PPUSH
30392: CALL_OW 256
30396: PUSH
30397: LD_INT 1000
30399: LESS
30400: IFFALSE 30414
// SetLives ( i , 1000 ) ;
30402: LD_VAR 0 1
30406: PPUSH
30407: LD_INT 1000
30409: PPUSH
30410: CALL_OW 234
30414: GO 30384
30416: POP
30417: POP
// until p > 20 ;
30418: LD_VAR 0 3
30422: PUSH
30423: LD_INT 20
30425: GREATER
30426: IFFALSE 30353
// end ;
30428: PPOPN 3
30430: END
// every 0 0$1 trigger StreamModeActive and sTime do
30431: LD_EXP 82
30435: PUSH
30436: LD_EXP 133
30440: AND
30441: IFFALSE 30476
30443: GO 30445
30445: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30446: LD_INT 28
30448: PPUSH
30449: LD_OWVAR 2
30453: PPUSH
30454: LD_INT 2
30456: PPUSH
30457: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30461: LD_INT 30
30463: PPUSH
30464: LD_OWVAR 2
30468: PPUSH
30469: LD_INT 2
30471: PPUSH
30472: CALL_OW 322
// end ;
30476: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30477: LD_EXP 82
30481: PUSH
30482: LD_EXP 134
30486: AND
30487: IFFALSE 30608
30489: GO 30491
30491: DISABLE
30492: LD_INT 0
30494: PPUSH
30495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30496: LD_ADDR_VAR 0 2
30500: PUSH
30501: LD_INT 22
30503: PUSH
30504: LD_OWVAR 2
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 21
30515: PUSH
30516: LD_INT 1
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 3
30525: PUSH
30526: LD_INT 23
30528: PUSH
30529: LD_INT 0
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: LIST
30544: PPUSH
30545: CALL_OW 69
30549: ST_TO_ADDR
// if not tmp then
30550: LD_VAR 0 2
30554: NOT
30555: IFFALSE 30559
// exit ;
30557: GO 30608
// for i in tmp do
30559: LD_ADDR_VAR 0 1
30563: PUSH
30564: LD_VAR 0 2
30568: PUSH
30569: FOR_IN
30570: IFFALSE 30606
// begin if Crawls ( i ) then
30572: LD_VAR 0 1
30576: PPUSH
30577: CALL_OW 318
30581: IFFALSE 30592
// ComWalk ( i ) ;
30583: LD_VAR 0 1
30587: PPUSH
30588: CALL_OW 138
// SetClass ( i , 2 ) ;
30592: LD_VAR 0 1
30596: PPUSH
30597: LD_INT 2
30599: PPUSH
30600: CALL_OW 336
// end ;
30604: GO 30569
30606: POP
30607: POP
// end ;
30608: PPOPN 2
30610: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30611: LD_EXP 82
30615: PUSH
30616: LD_EXP 135
30620: AND
30621: IFFALSE 30909
30623: GO 30625
30625: DISABLE
30626: LD_INT 0
30628: PPUSH
30629: PPUSH
30630: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30631: LD_OWVAR 2
30635: PPUSH
30636: LD_INT 9
30638: PPUSH
30639: LD_INT 1
30641: PPUSH
30642: LD_INT 1
30644: PPUSH
30645: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30649: LD_INT 9
30651: PPUSH
30652: LD_OWVAR 2
30656: PPUSH
30657: CALL_OW 343
// uc_side := 9 ;
30661: LD_ADDR_OWVAR 20
30665: PUSH
30666: LD_INT 9
30668: ST_TO_ADDR
// uc_nation := 2 ;
30669: LD_ADDR_OWVAR 21
30673: PUSH
30674: LD_INT 2
30676: ST_TO_ADDR
// hc_name := Dark Warrior ;
30677: LD_ADDR_OWVAR 26
30681: PUSH
30682: LD_STRING Dark Warrior
30684: ST_TO_ADDR
// hc_gallery :=  ;
30685: LD_ADDR_OWVAR 33
30689: PUSH
30690: LD_STRING 
30692: ST_TO_ADDR
// hc_noskilllimit := true ;
30693: LD_ADDR_OWVAR 76
30697: PUSH
30698: LD_INT 1
30700: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30701: LD_ADDR_OWVAR 31
30705: PUSH
30706: LD_INT 30
30708: PUSH
30709: LD_INT 30
30711: PUSH
30712: LD_INT 30
30714: PUSH
30715: LD_INT 30
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: ST_TO_ADDR
// un := CreateHuman ;
30724: LD_ADDR_VAR 0 3
30728: PUSH
30729: CALL_OW 44
30733: ST_TO_ADDR
// hc_noskilllimit := false ;
30734: LD_ADDR_OWVAR 76
30738: PUSH
30739: LD_INT 0
30741: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30742: LD_VAR 0 3
30746: PPUSH
30747: LD_INT 1
30749: PPUSH
30750: CALL_OW 51
// ToLua ( playRanger() ) ;
30754: LD_STRING playRanger()
30756: PPUSH
30757: CALL_OW 559
// p := 0 ;
30761: LD_ADDR_VAR 0 2
30765: PUSH
30766: LD_INT 0
30768: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30769: LD_INT 35
30771: PPUSH
30772: CALL_OW 67
// p := p + 1 ;
30776: LD_ADDR_VAR 0 2
30780: PUSH
30781: LD_VAR 0 2
30785: PUSH
30786: LD_INT 1
30788: PLUS
30789: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30790: LD_VAR 0 3
30794: PPUSH
30795: CALL_OW 256
30799: PUSH
30800: LD_INT 1000
30802: LESS
30803: IFFALSE 30817
// SetLives ( un , 1000 ) ;
30805: LD_VAR 0 3
30809: PPUSH
30810: LD_INT 1000
30812: PPUSH
30813: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30817: LD_VAR 0 3
30821: PPUSH
30822: LD_INT 81
30824: PUSH
30825: LD_OWVAR 2
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 91
30836: PUSH
30837: LD_VAR 0 3
30841: PUSH
30842: LD_INT 30
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: LIST
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PPUSH
30854: CALL_OW 69
30858: PPUSH
30859: LD_VAR 0 3
30863: PPUSH
30864: CALL_OW 74
30868: PPUSH
30869: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30873: LD_VAR 0 2
30877: PUSH
30878: LD_INT 80
30880: GREATER
30881: PUSH
30882: LD_VAR 0 3
30886: PPUSH
30887: CALL_OW 301
30891: OR
30892: IFFALSE 30769
// if un then
30894: LD_VAR 0 3
30898: IFFALSE 30909
// RemoveUnit ( un ) ;
30900: LD_VAR 0 3
30904: PPUSH
30905: CALL_OW 64
// end ;
30909: PPOPN 3
30911: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30912: LD_EXP 136
30916: IFFALSE 31032
30918: GO 30920
30920: DISABLE
30921: LD_INT 0
30923: PPUSH
30924: PPUSH
30925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30926: LD_ADDR_VAR 0 2
30930: PUSH
30931: LD_INT 81
30933: PUSH
30934: LD_OWVAR 2
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 21
30945: PUSH
30946: LD_INT 1
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PPUSH
30957: CALL_OW 69
30961: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30962: LD_STRING playComputer()
30964: PPUSH
30965: CALL_OW 559
// if not tmp then
30969: LD_VAR 0 2
30973: NOT
30974: IFFALSE 30978
// exit ;
30976: GO 31032
// for i in tmp do
30978: LD_ADDR_VAR 0 1
30982: PUSH
30983: LD_VAR 0 2
30987: PUSH
30988: FOR_IN
30989: IFFALSE 31030
// for j := 1 to 4 do
30991: LD_ADDR_VAR 0 3
30995: PUSH
30996: DOUBLE
30997: LD_INT 1
30999: DEC
31000: ST_TO_ADDR
31001: LD_INT 4
31003: PUSH
31004: FOR_TO
31005: IFFALSE 31026
// SetSkill ( i , j , 10 ) ;
31007: LD_VAR 0 1
31011: PPUSH
31012: LD_VAR 0 3
31016: PPUSH
31017: LD_INT 10
31019: PPUSH
31020: CALL_OW 237
31024: GO 31004
31026: POP
31027: POP
31028: GO 30988
31030: POP
31031: POP
// end ;
31032: PPOPN 3
31034: END
// every 0 0$1 trigger s30 do var i , tmp ;
31035: LD_EXP 137
31039: IFFALSE 31108
31041: GO 31043
31043: DISABLE
31044: LD_INT 0
31046: PPUSH
31047: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31048: LD_ADDR_VAR 0 2
31052: PUSH
31053: LD_INT 22
31055: PUSH
31056: LD_OWVAR 2
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PPUSH
31065: CALL_OW 69
31069: ST_TO_ADDR
// if not tmp then
31070: LD_VAR 0 2
31074: NOT
31075: IFFALSE 31079
// exit ;
31077: GO 31108
// for i in tmp do
31079: LD_ADDR_VAR 0 1
31083: PUSH
31084: LD_VAR 0 2
31088: PUSH
31089: FOR_IN
31090: IFFALSE 31106
// SetLives ( i , 300 ) ;
31092: LD_VAR 0 1
31096: PPUSH
31097: LD_INT 300
31099: PPUSH
31100: CALL_OW 234
31104: GO 31089
31106: POP
31107: POP
// end ;
31108: PPOPN 2
31110: END
// every 0 0$1 trigger s60 do var i , tmp ;
31111: LD_EXP 138
31115: IFFALSE 31184
31117: GO 31119
31119: DISABLE
31120: LD_INT 0
31122: PPUSH
31123: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31124: LD_ADDR_VAR 0 2
31128: PUSH
31129: LD_INT 22
31131: PUSH
31132: LD_OWVAR 2
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PPUSH
31141: CALL_OW 69
31145: ST_TO_ADDR
// if not tmp then
31146: LD_VAR 0 2
31150: NOT
31151: IFFALSE 31155
// exit ;
31153: GO 31184
// for i in tmp do
31155: LD_ADDR_VAR 0 1
31159: PUSH
31160: LD_VAR 0 2
31164: PUSH
31165: FOR_IN
31166: IFFALSE 31182
// SetLives ( i , 600 ) ;
31168: LD_VAR 0 1
31172: PPUSH
31173: LD_INT 600
31175: PPUSH
31176: CALL_OW 234
31180: GO 31165
31182: POP
31183: POP
// end ;
31184: PPOPN 2
31186: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31187: LD_INT 0
31189: PPUSH
// case cmd of 301 :
31190: LD_VAR 0 1
31194: PUSH
31195: LD_INT 301
31197: DOUBLE
31198: EQUAL
31199: IFTRUE 31203
31201: GO 31235
31203: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31204: LD_VAR 0 6
31208: PPUSH
31209: LD_VAR 0 7
31213: PPUSH
31214: LD_VAR 0 8
31218: PPUSH
31219: LD_VAR 0 4
31223: PPUSH
31224: LD_VAR 0 5
31228: PPUSH
31229: CALL 32436 0 5
31233: GO 31356
31235: LD_INT 302
31237: DOUBLE
31238: EQUAL
31239: IFTRUE 31243
31241: GO 31280
31243: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31244: LD_VAR 0 6
31248: PPUSH
31249: LD_VAR 0 7
31253: PPUSH
31254: LD_VAR 0 8
31258: PPUSH
31259: LD_VAR 0 9
31263: PPUSH
31264: LD_VAR 0 4
31268: PPUSH
31269: LD_VAR 0 5
31273: PPUSH
31274: CALL 32527 0 6
31278: GO 31356
31280: LD_INT 303
31282: DOUBLE
31283: EQUAL
31284: IFTRUE 31288
31286: GO 31325
31288: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31289: LD_VAR 0 6
31293: PPUSH
31294: LD_VAR 0 7
31298: PPUSH
31299: LD_VAR 0 8
31303: PPUSH
31304: LD_VAR 0 9
31308: PPUSH
31309: LD_VAR 0 4
31313: PPUSH
31314: LD_VAR 0 5
31318: PPUSH
31319: CALL 31361 0 6
31323: GO 31356
31325: LD_INT 304
31327: DOUBLE
31328: EQUAL
31329: IFTRUE 31333
31331: GO 31355
31333: POP
// hHackTeleport ( unit , x , y ) ; end ;
31334: LD_VAR 0 2
31338: PPUSH
31339: LD_VAR 0 4
31343: PPUSH
31344: LD_VAR 0 5
31348: PPUSH
31349: CALL 33120 0 3
31353: GO 31356
31355: POP
// end ;
31356: LD_VAR 0 12
31360: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31361: LD_INT 0
31363: PPUSH
31364: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31365: LD_VAR 0 1
31369: PUSH
31370: LD_INT 1
31372: LESS
31373: PUSH
31374: LD_VAR 0 1
31378: PUSH
31379: LD_INT 3
31381: GREATER
31382: OR
31383: PUSH
31384: LD_VAR 0 5
31388: PPUSH
31389: LD_VAR 0 6
31393: PPUSH
31394: CALL_OW 428
31398: OR
31399: IFFALSE 31403
// exit ;
31401: GO 32123
// uc_side := your_side ;
31403: LD_ADDR_OWVAR 20
31407: PUSH
31408: LD_OWVAR 2
31412: ST_TO_ADDR
// uc_nation := nation ;
31413: LD_ADDR_OWVAR 21
31417: PUSH
31418: LD_VAR 0 1
31422: ST_TO_ADDR
// bc_level = 1 ;
31423: LD_ADDR_OWVAR 43
31427: PUSH
31428: LD_INT 1
31430: ST_TO_ADDR
// case btype of 1 :
31431: LD_VAR 0 2
31435: PUSH
31436: LD_INT 1
31438: DOUBLE
31439: EQUAL
31440: IFTRUE 31444
31442: GO 31455
31444: POP
// bc_type := b_depot ; 2 :
31445: LD_ADDR_OWVAR 42
31449: PUSH
31450: LD_INT 0
31452: ST_TO_ADDR
31453: GO 32067
31455: LD_INT 2
31457: DOUBLE
31458: EQUAL
31459: IFTRUE 31463
31461: GO 31474
31463: POP
// bc_type := b_warehouse ; 3 :
31464: LD_ADDR_OWVAR 42
31468: PUSH
31469: LD_INT 1
31471: ST_TO_ADDR
31472: GO 32067
31474: LD_INT 3
31476: DOUBLE
31477: EQUAL
31478: IFTRUE 31482
31480: GO 31493
31482: POP
// bc_type := b_lab ; 4 .. 9 :
31483: LD_ADDR_OWVAR 42
31487: PUSH
31488: LD_INT 6
31490: ST_TO_ADDR
31491: GO 32067
31493: LD_INT 4
31495: DOUBLE
31496: GREATEREQUAL
31497: IFFALSE 31505
31499: LD_INT 9
31501: DOUBLE
31502: LESSEQUAL
31503: IFTRUE 31507
31505: GO 31559
31507: POP
// begin bc_type := b_lab_half ;
31508: LD_ADDR_OWVAR 42
31512: PUSH
31513: LD_INT 7
31515: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31516: LD_ADDR_OWVAR 44
31520: PUSH
31521: LD_INT 10
31523: PUSH
31524: LD_INT 11
31526: PUSH
31527: LD_INT 12
31529: PUSH
31530: LD_INT 15
31532: PUSH
31533: LD_INT 14
31535: PUSH
31536: LD_INT 13
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: PUSH
31547: LD_VAR 0 2
31551: PUSH
31552: LD_INT 3
31554: MINUS
31555: ARRAY
31556: ST_TO_ADDR
// end ; 10 .. 13 :
31557: GO 32067
31559: LD_INT 10
31561: DOUBLE
31562: GREATEREQUAL
31563: IFFALSE 31571
31565: LD_INT 13
31567: DOUBLE
31568: LESSEQUAL
31569: IFTRUE 31573
31571: GO 31650
31573: POP
// begin bc_type := b_lab_full ;
31574: LD_ADDR_OWVAR 42
31578: PUSH
31579: LD_INT 8
31581: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31582: LD_ADDR_OWVAR 44
31586: PUSH
31587: LD_INT 10
31589: PUSH
31590: LD_INT 12
31592: PUSH
31593: LD_INT 14
31595: PUSH
31596: LD_INT 13
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: PUSH
31605: LD_VAR 0 2
31609: PUSH
31610: LD_INT 9
31612: MINUS
31613: ARRAY
31614: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31615: LD_ADDR_OWVAR 45
31619: PUSH
31620: LD_INT 11
31622: PUSH
31623: LD_INT 15
31625: PUSH
31626: LD_INT 12
31628: PUSH
31629: LD_INT 15
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: PUSH
31638: LD_VAR 0 2
31642: PUSH
31643: LD_INT 9
31645: MINUS
31646: ARRAY
31647: ST_TO_ADDR
// end ; 14 :
31648: GO 32067
31650: LD_INT 14
31652: DOUBLE
31653: EQUAL
31654: IFTRUE 31658
31656: GO 31669
31658: POP
// bc_type := b_workshop ; 15 :
31659: LD_ADDR_OWVAR 42
31663: PUSH
31664: LD_INT 2
31666: ST_TO_ADDR
31667: GO 32067
31669: LD_INT 15
31671: DOUBLE
31672: EQUAL
31673: IFTRUE 31677
31675: GO 31688
31677: POP
// bc_type := b_factory ; 16 :
31678: LD_ADDR_OWVAR 42
31682: PUSH
31683: LD_INT 3
31685: ST_TO_ADDR
31686: GO 32067
31688: LD_INT 16
31690: DOUBLE
31691: EQUAL
31692: IFTRUE 31696
31694: GO 31707
31696: POP
// bc_type := b_ext_gun ; 17 :
31697: LD_ADDR_OWVAR 42
31701: PUSH
31702: LD_INT 17
31704: ST_TO_ADDR
31705: GO 32067
31707: LD_INT 17
31709: DOUBLE
31710: EQUAL
31711: IFTRUE 31715
31713: GO 31743
31715: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31716: LD_ADDR_OWVAR 42
31720: PUSH
31721: LD_INT 19
31723: PUSH
31724: LD_INT 23
31726: PUSH
31727: LD_INT 19
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: LIST
31734: PUSH
31735: LD_VAR 0 1
31739: ARRAY
31740: ST_TO_ADDR
31741: GO 32067
31743: LD_INT 18
31745: DOUBLE
31746: EQUAL
31747: IFTRUE 31751
31749: GO 31762
31751: POP
// bc_type := b_ext_radar ; 19 :
31752: LD_ADDR_OWVAR 42
31756: PUSH
31757: LD_INT 20
31759: ST_TO_ADDR
31760: GO 32067
31762: LD_INT 19
31764: DOUBLE
31765: EQUAL
31766: IFTRUE 31770
31768: GO 31781
31770: POP
// bc_type := b_ext_radio ; 20 :
31771: LD_ADDR_OWVAR 42
31775: PUSH
31776: LD_INT 22
31778: ST_TO_ADDR
31779: GO 32067
31781: LD_INT 20
31783: DOUBLE
31784: EQUAL
31785: IFTRUE 31789
31787: GO 31800
31789: POP
// bc_type := b_ext_siberium ; 21 :
31790: LD_ADDR_OWVAR 42
31794: PUSH
31795: LD_INT 21
31797: ST_TO_ADDR
31798: GO 32067
31800: LD_INT 21
31802: DOUBLE
31803: EQUAL
31804: IFTRUE 31808
31806: GO 31819
31808: POP
// bc_type := b_ext_computer ; 22 :
31809: LD_ADDR_OWVAR 42
31813: PUSH
31814: LD_INT 24
31816: ST_TO_ADDR
31817: GO 32067
31819: LD_INT 22
31821: DOUBLE
31822: EQUAL
31823: IFTRUE 31827
31825: GO 31838
31827: POP
// bc_type := b_ext_track ; 23 :
31828: LD_ADDR_OWVAR 42
31832: PUSH
31833: LD_INT 16
31835: ST_TO_ADDR
31836: GO 32067
31838: LD_INT 23
31840: DOUBLE
31841: EQUAL
31842: IFTRUE 31846
31844: GO 31857
31846: POP
// bc_type := b_ext_laser ; 24 :
31847: LD_ADDR_OWVAR 42
31851: PUSH
31852: LD_INT 25
31854: ST_TO_ADDR
31855: GO 32067
31857: LD_INT 24
31859: DOUBLE
31860: EQUAL
31861: IFTRUE 31865
31863: GO 31876
31865: POP
// bc_type := b_control_tower ; 25 :
31866: LD_ADDR_OWVAR 42
31870: PUSH
31871: LD_INT 36
31873: ST_TO_ADDR
31874: GO 32067
31876: LD_INT 25
31878: DOUBLE
31879: EQUAL
31880: IFTRUE 31884
31882: GO 31895
31884: POP
// bc_type := b_breastwork ; 26 :
31885: LD_ADDR_OWVAR 42
31889: PUSH
31890: LD_INT 31
31892: ST_TO_ADDR
31893: GO 32067
31895: LD_INT 26
31897: DOUBLE
31898: EQUAL
31899: IFTRUE 31903
31901: GO 31914
31903: POP
// bc_type := b_bunker ; 27 :
31904: LD_ADDR_OWVAR 42
31908: PUSH
31909: LD_INT 32
31911: ST_TO_ADDR
31912: GO 32067
31914: LD_INT 27
31916: DOUBLE
31917: EQUAL
31918: IFTRUE 31922
31920: GO 31933
31922: POP
// bc_type := b_turret ; 28 :
31923: LD_ADDR_OWVAR 42
31927: PUSH
31928: LD_INT 33
31930: ST_TO_ADDR
31931: GO 32067
31933: LD_INT 28
31935: DOUBLE
31936: EQUAL
31937: IFTRUE 31941
31939: GO 31952
31941: POP
// bc_type := b_armoury ; 29 :
31942: LD_ADDR_OWVAR 42
31946: PUSH
31947: LD_INT 4
31949: ST_TO_ADDR
31950: GO 32067
31952: LD_INT 29
31954: DOUBLE
31955: EQUAL
31956: IFTRUE 31960
31958: GO 31971
31960: POP
// bc_type := b_barracks ; 30 :
31961: LD_ADDR_OWVAR 42
31965: PUSH
31966: LD_INT 5
31968: ST_TO_ADDR
31969: GO 32067
31971: LD_INT 30
31973: DOUBLE
31974: EQUAL
31975: IFTRUE 31979
31977: GO 31990
31979: POP
// bc_type := b_solar_power ; 31 :
31980: LD_ADDR_OWVAR 42
31984: PUSH
31985: LD_INT 27
31987: ST_TO_ADDR
31988: GO 32067
31990: LD_INT 31
31992: DOUBLE
31993: EQUAL
31994: IFTRUE 31998
31996: GO 32009
31998: POP
// bc_type := b_oil_power ; 32 :
31999: LD_ADDR_OWVAR 42
32003: PUSH
32004: LD_INT 26
32006: ST_TO_ADDR
32007: GO 32067
32009: LD_INT 32
32011: DOUBLE
32012: EQUAL
32013: IFTRUE 32017
32015: GO 32028
32017: POP
// bc_type := b_siberite_power ; 33 :
32018: LD_ADDR_OWVAR 42
32022: PUSH
32023: LD_INT 28
32025: ST_TO_ADDR
32026: GO 32067
32028: LD_INT 33
32030: DOUBLE
32031: EQUAL
32032: IFTRUE 32036
32034: GO 32047
32036: POP
// bc_type := b_oil_mine ; 34 :
32037: LD_ADDR_OWVAR 42
32041: PUSH
32042: LD_INT 29
32044: ST_TO_ADDR
32045: GO 32067
32047: LD_INT 34
32049: DOUBLE
32050: EQUAL
32051: IFTRUE 32055
32053: GO 32066
32055: POP
// bc_type := b_siberite_mine ; end ;
32056: LD_ADDR_OWVAR 42
32060: PUSH
32061: LD_INT 30
32063: ST_TO_ADDR
32064: GO 32067
32066: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32067: LD_ADDR_VAR 0 8
32071: PUSH
32072: LD_VAR 0 5
32076: PPUSH
32077: LD_VAR 0 6
32081: PPUSH
32082: LD_VAR 0 3
32086: PPUSH
32087: CALL_OW 47
32091: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32092: LD_OWVAR 42
32096: PUSH
32097: LD_INT 32
32099: PUSH
32100: LD_INT 33
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: IN
32107: IFFALSE 32123
// PlaceWeaponTurret ( b , weapon ) ;
32109: LD_VAR 0 8
32113: PPUSH
32114: LD_VAR 0 4
32118: PPUSH
32119: CALL_OW 431
// end ;
32123: LD_VAR 0 7
32127: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32128: LD_INT 0
32130: PPUSH
32131: PPUSH
32132: PPUSH
32133: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32134: LD_ADDR_VAR 0 4
32138: PUSH
32139: LD_INT 22
32141: PUSH
32142: LD_OWVAR 2
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 2
32153: PUSH
32154: LD_INT 30
32156: PUSH
32157: LD_INT 0
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 30
32166: PUSH
32167: LD_INT 1
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: LIST
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PPUSH
32183: CALL_OW 69
32187: ST_TO_ADDR
// if not tmp then
32188: LD_VAR 0 4
32192: NOT
32193: IFFALSE 32197
// exit ;
32195: GO 32256
// for i in tmp do
32197: LD_ADDR_VAR 0 2
32201: PUSH
32202: LD_VAR 0 4
32206: PUSH
32207: FOR_IN
32208: IFFALSE 32254
// for j = 1 to 3 do
32210: LD_ADDR_VAR 0 3
32214: PUSH
32215: DOUBLE
32216: LD_INT 1
32218: DEC
32219: ST_TO_ADDR
32220: LD_INT 3
32222: PUSH
32223: FOR_TO
32224: IFFALSE 32250
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32226: LD_VAR 0 2
32230: PPUSH
32231: CALL_OW 274
32235: PPUSH
32236: LD_VAR 0 3
32240: PPUSH
32241: LD_INT 99999
32243: PPUSH
32244: CALL_OW 277
32248: GO 32223
32250: POP
32251: POP
32252: GO 32207
32254: POP
32255: POP
// end ;
32256: LD_VAR 0 1
32260: RET
// export function hHackSetLevel10 ; var i , j ; begin
32261: LD_INT 0
32263: PPUSH
32264: PPUSH
32265: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32266: LD_ADDR_VAR 0 2
32270: PUSH
32271: LD_INT 21
32273: PUSH
32274: LD_INT 1
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PPUSH
32281: CALL_OW 69
32285: PUSH
32286: FOR_IN
32287: IFFALSE 32339
// if IsSelected ( i ) then
32289: LD_VAR 0 2
32293: PPUSH
32294: CALL_OW 306
32298: IFFALSE 32337
// begin for j := 1 to 4 do
32300: LD_ADDR_VAR 0 3
32304: PUSH
32305: DOUBLE
32306: LD_INT 1
32308: DEC
32309: ST_TO_ADDR
32310: LD_INT 4
32312: PUSH
32313: FOR_TO
32314: IFFALSE 32335
// SetSkill ( i , j , 10 ) ;
32316: LD_VAR 0 2
32320: PPUSH
32321: LD_VAR 0 3
32325: PPUSH
32326: LD_INT 10
32328: PPUSH
32329: CALL_OW 237
32333: GO 32313
32335: POP
32336: POP
// end ;
32337: GO 32286
32339: POP
32340: POP
// end ;
32341: LD_VAR 0 1
32345: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32346: LD_INT 0
32348: PPUSH
32349: PPUSH
32350: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32351: LD_ADDR_VAR 0 2
32355: PUSH
32356: LD_INT 22
32358: PUSH
32359: LD_OWVAR 2
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 21
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PPUSH
32382: CALL_OW 69
32386: PUSH
32387: FOR_IN
32388: IFFALSE 32429
// begin for j := 1 to 4 do
32390: LD_ADDR_VAR 0 3
32394: PUSH
32395: DOUBLE
32396: LD_INT 1
32398: DEC
32399: ST_TO_ADDR
32400: LD_INT 4
32402: PUSH
32403: FOR_TO
32404: IFFALSE 32425
// SetSkill ( i , j , 10 ) ;
32406: LD_VAR 0 2
32410: PPUSH
32411: LD_VAR 0 3
32415: PPUSH
32416: LD_INT 10
32418: PPUSH
32419: CALL_OW 237
32423: GO 32403
32425: POP
32426: POP
// end ;
32427: GO 32387
32429: POP
32430: POP
// end ;
32431: LD_VAR 0 1
32435: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32436: LD_INT 0
32438: PPUSH
// uc_side := your_side ;
32439: LD_ADDR_OWVAR 20
32443: PUSH
32444: LD_OWVAR 2
32448: ST_TO_ADDR
// uc_nation := nation ;
32449: LD_ADDR_OWVAR 21
32453: PUSH
32454: LD_VAR 0 1
32458: ST_TO_ADDR
// InitHc ;
32459: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32463: LD_INT 0
32465: PPUSH
32466: LD_VAR 0 2
32470: PPUSH
32471: LD_VAR 0 3
32475: PPUSH
32476: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32480: LD_VAR 0 4
32484: PPUSH
32485: LD_VAR 0 5
32489: PPUSH
32490: CALL_OW 428
32494: PUSH
32495: LD_INT 0
32497: EQUAL
32498: IFFALSE 32522
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32500: CALL_OW 44
32504: PPUSH
32505: LD_VAR 0 4
32509: PPUSH
32510: LD_VAR 0 5
32514: PPUSH
32515: LD_INT 1
32517: PPUSH
32518: CALL_OW 48
// end ;
32522: LD_VAR 0 6
32526: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32527: LD_INT 0
32529: PPUSH
32530: PPUSH
// uc_side := your_side ;
32531: LD_ADDR_OWVAR 20
32535: PUSH
32536: LD_OWVAR 2
32540: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32541: LD_VAR 0 1
32545: PUSH
32546: LD_INT 1
32548: PUSH
32549: LD_INT 2
32551: PUSH
32552: LD_INT 3
32554: PUSH
32555: LD_INT 4
32557: PUSH
32558: LD_INT 5
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: IN
32568: IFFALSE 32580
// uc_nation := nation_american else
32570: LD_ADDR_OWVAR 21
32574: PUSH
32575: LD_INT 1
32577: ST_TO_ADDR
32578: GO 32623
// if chassis in [ 11 , 12 , 13 , 14 ] then
32580: LD_VAR 0 1
32584: PUSH
32585: LD_INT 11
32587: PUSH
32588: LD_INT 12
32590: PUSH
32591: LD_INT 13
32593: PUSH
32594: LD_INT 14
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: IN
32603: IFFALSE 32615
// uc_nation := nation_arabian else
32605: LD_ADDR_OWVAR 21
32609: PUSH
32610: LD_INT 2
32612: ST_TO_ADDR
32613: GO 32623
// uc_nation := nation_russian ;
32615: LD_ADDR_OWVAR 21
32619: PUSH
32620: LD_INT 3
32622: ST_TO_ADDR
// vc_chassis := chassis ;
32623: LD_ADDR_OWVAR 37
32627: PUSH
32628: LD_VAR 0 1
32632: ST_TO_ADDR
// vc_engine := engine ;
32633: LD_ADDR_OWVAR 39
32637: PUSH
32638: LD_VAR 0 2
32642: ST_TO_ADDR
// vc_control := control ;
32643: LD_ADDR_OWVAR 38
32647: PUSH
32648: LD_VAR 0 3
32652: ST_TO_ADDR
// vc_weapon := weapon ;
32653: LD_ADDR_OWVAR 40
32657: PUSH
32658: LD_VAR 0 4
32662: ST_TO_ADDR
// un := CreateVehicle ;
32663: LD_ADDR_VAR 0 8
32667: PUSH
32668: CALL_OW 45
32672: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32673: LD_VAR 0 8
32677: PPUSH
32678: LD_INT 0
32680: PPUSH
32681: LD_INT 5
32683: PPUSH
32684: CALL_OW 12
32688: PPUSH
32689: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32693: LD_VAR 0 8
32697: PPUSH
32698: LD_VAR 0 5
32702: PPUSH
32703: LD_VAR 0 6
32707: PPUSH
32708: LD_INT 1
32710: PPUSH
32711: CALL_OW 48
// end ;
32715: LD_VAR 0 7
32719: RET
// export hInvincible ; every 1 do
32720: GO 32722
32722: DISABLE
// hInvincible := [ ] ;
32723: LD_ADDR_EXP 139
32727: PUSH
32728: EMPTY
32729: ST_TO_ADDR
32730: END
// every 10 do var i ;
32731: GO 32733
32733: DISABLE
32734: LD_INT 0
32736: PPUSH
// begin enable ;
32737: ENABLE
// if not hInvincible then
32738: LD_EXP 139
32742: NOT
32743: IFFALSE 32747
// exit ;
32745: GO 32791
// for i in hInvincible do
32747: LD_ADDR_VAR 0 1
32751: PUSH
32752: LD_EXP 139
32756: PUSH
32757: FOR_IN
32758: IFFALSE 32789
// if GetLives ( i ) < 1000 then
32760: LD_VAR 0 1
32764: PPUSH
32765: CALL_OW 256
32769: PUSH
32770: LD_INT 1000
32772: LESS
32773: IFFALSE 32787
// SetLives ( i , 1000 ) ;
32775: LD_VAR 0 1
32779: PPUSH
32780: LD_INT 1000
32782: PPUSH
32783: CALL_OW 234
32787: GO 32757
32789: POP
32790: POP
// end ;
32791: PPOPN 1
32793: END
// export function hHackInvincible ; var i ; begin
32794: LD_INT 0
32796: PPUSH
32797: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32798: LD_ADDR_VAR 0 2
32802: PUSH
32803: LD_INT 2
32805: PUSH
32806: LD_INT 21
32808: PUSH
32809: LD_INT 1
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 21
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: LIST
32830: PPUSH
32831: CALL_OW 69
32835: PUSH
32836: FOR_IN
32837: IFFALSE 32898
// if IsSelected ( i ) then
32839: LD_VAR 0 2
32843: PPUSH
32844: CALL_OW 306
32848: IFFALSE 32896
// begin if i in hInvincible then
32850: LD_VAR 0 2
32854: PUSH
32855: LD_EXP 139
32859: IN
32860: IFFALSE 32880
// hInvincible := hInvincible diff i else
32862: LD_ADDR_EXP 139
32866: PUSH
32867: LD_EXP 139
32871: PUSH
32872: LD_VAR 0 2
32876: DIFF
32877: ST_TO_ADDR
32878: GO 32896
// hInvincible := hInvincible union i ;
32880: LD_ADDR_EXP 139
32884: PUSH
32885: LD_EXP 139
32889: PUSH
32890: LD_VAR 0 2
32894: UNION
32895: ST_TO_ADDR
// end ;
32896: GO 32836
32898: POP
32899: POP
// end ;
32900: LD_VAR 0 1
32904: RET
// export function hHackInvisible ; var i , j ; begin
32905: LD_INT 0
32907: PPUSH
32908: PPUSH
32909: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32910: LD_ADDR_VAR 0 2
32914: PUSH
32915: LD_INT 21
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PPUSH
32925: CALL_OW 69
32929: PUSH
32930: FOR_IN
32931: IFFALSE 32955
// if IsSelected ( i ) then
32933: LD_VAR 0 2
32937: PPUSH
32938: CALL_OW 306
32942: IFFALSE 32953
// ComForceInvisible ( i ) ;
32944: LD_VAR 0 2
32948: PPUSH
32949: CALL_OW 496
32953: GO 32930
32955: POP
32956: POP
// end ;
32957: LD_VAR 0 1
32961: RET
// export function hHackChangeYourSide ; begin
32962: LD_INT 0
32964: PPUSH
// if your_side = 8 then
32965: LD_OWVAR 2
32969: PUSH
32970: LD_INT 8
32972: EQUAL
32973: IFFALSE 32985
// your_side := 0 else
32975: LD_ADDR_OWVAR 2
32979: PUSH
32980: LD_INT 0
32982: ST_TO_ADDR
32983: GO 32999
// your_side := your_side + 1 ;
32985: LD_ADDR_OWVAR 2
32989: PUSH
32990: LD_OWVAR 2
32994: PUSH
32995: LD_INT 1
32997: PLUS
32998: ST_TO_ADDR
// end ;
32999: LD_VAR 0 1
33003: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33004: LD_INT 0
33006: PPUSH
33007: PPUSH
33008: PPUSH
// for i in all_units do
33009: LD_ADDR_VAR 0 2
33013: PUSH
33014: LD_OWVAR 3
33018: PUSH
33019: FOR_IN
33020: IFFALSE 33098
// if IsSelected ( i ) then
33022: LD_VAR 0 2
33026: PPUSH
33027: CALL_OW 306
33031: IFFALSE 33096
// begin j := GetSide ( i ) ;
33033: LD_ADDR_VAR 0 3
33037: PUSH
33038: LD_VAR 0 2
33042: PPUSH
33043: CALL_OW 255
33047: ST_TO_ADDR
// if j = 8 then
33048: LD_VAR 0 3
33052: PUSH
33053: LD_INT 8
33055: EQUAL
33056: IFFALSE 33068
// j := 0 else
33058: LD_ADDR_VAR 0 3
33062: PUSH
33063: LD_INT 0
33065: ST_TO_ADDR
33066: GO 33082
// j := j + 1 ;
33068: LD_ADDR_VAR 0 3
33072: PUSH
33073: LD_VAR 0 3
33077: PUSH
33078: LD_INT 1
33080: PLUS
33081: ST_TO_ADDR
// SetSide ( i , j ) ;
33082: LD_VAR 0 2
33086: PPUSH
33087: LD_VAR 0 3
33091: PPUSH
33092: CALL_OW 235
// end ;
33096: GO 33019
33098: POP
33099: POP
// end ;
33100: LD_VAR 0 1
33104: RET
// export function hHackFog ; begin
33105: LD_INT 0
33107: PPUSH
// FogOff ( true ) ;
33108: LD_INT 1
33110: PPUSH
33111: CALL_OW 344
// end ;
33115: LD_VAR 0 1
33119: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33120: LD_INT 0
33122: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33123: LD_VAR 0 1
33127: PPUSH
33128: LD_VAR 0 2
33132: PPUSH
33133: LD_VAR 0 3
33137: PPUSH
33138: LD_INT 1
33140: PPUSH
33141: LD_INT 1
33143: PPUSH
33144: CALL_OW 483
// CenterOnXY ( x , y ) ;
33148: LD_VAR 0 2
33152: PPUSH
33153: LD_VAR 0 3
33157: PPUSH
33158: CALL_OW 84
// end ; end_of_file
33162: LD_VAR 0 4
33166: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33167: LD_INT 0
33169: PPUSH
33170: PPUSH
33171: PPUSH
33172: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33173: LD_VAR 0 1
33177: PPUSH
33178: CALL_OW 264
33182: PUSH
33183: LD_EXP 66
33187: EQUAL
33188: IFFALSE 33260
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33190: LD_INT 68
33192: PPUSH
33193: LD_VAR 0 1
33197: PPUSH
33198: CALL_OW 255
33202: PPUSH
33203: CALL_OW 321
33207: PUSH
33208: LD_INT 2
33210: EQUAL
33211: IFFALSE 33223
// eff := 70 else
33213: LD_ADDR_VAR 0 4
33217: PUSH
33218: LD_INT 70
33220: ST_TO_ADDR
33221: GO 33231
// eff := 30 ;
33223: LD_ADDR_VAR 0 4
33227: PUSH
33228: LD_INT 30
33230: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33231: LD_VAR 0 1
33235: PPUSH
33236: CALL_OW 250
33240: PPUSH
33241: LD_VAR 0 1
33245: PPUSH
33246: CALL_OW 251
33250: PPUSH
33251: LD_VAR 0 4
33255: PPUSH
33256: CALL_OW 495
// end ; end ;
33260: LD_VAR 0 2
33264: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33265: LD_INT 0
33267: PPUSH
// end ;
33268: LD_VAR 0 4
33272: RET
// export function SOS_Command ( cmd ) ; begin
33273: LD_INT 0
33275: PPUSH
// end ;
33276: LD_VAR 0 2
33280: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33281: LD_INT 0
33283: PPUSH
// end ;
33284: LD_VAR 0 6
33288: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33289: LD_INT 0
33291: PPUSH
33292: PPUSH
// if not vehicle or not factory then
33293: LD_VAR 0 1
33297: NOT
33298: PUSH
33299: LD_VAR 0 2
33303: NOT
33304: OR
33305: IFFALSE 33309
// exit ;
33307: GO 33540
// if factoryWaypoints >= factory then
33309: LD_EXP 140
33313: PUSH
33314: LD_VAR 0 2
33318: GREATEREQUAL
33319: IFFALSE 33540
// if factoryWaypoints [ factory ] then
33321: LD_EXP 140
33325: PUSH
33326: LD_VAR 0 2
33330: ARRAY
33331: IFFALSE 33540
// begin if GetControl ( vehicle ) = control_manual then
33333: LD_VAR 0 1
33337: PPUSH
33338: CALL_OW 263
33342: PUSH
33343: LD_INT 1
33345: EQUAL
33346: IFFALSE 33427
// begin driver := IsDrivenBy ( vehicle ) ;
33348: LD_ADDR_VAR 0 4
33352: PUSH
33353: LD_VAR 0 1
33357: PPUSH
33358: CALL_OW 311
33362: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33363: LD_VAR 0 4
33367: PPUSH
33368: LD_EXP 140
33372: PUSH
33373: LD_VAR 0 2
33377: ARRAY
33378: PUSH
33379: LD_INT 3
33381: ARRAY
33382: PPUSH
33383: LD_EXP 140
33387: PUSH
33388: LD_VAR 0 2
33392: ARRAY
33393: PUSH
33394: LD_INT 4
33396: ARRAY
33397: PPUSH
33398: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33402: LD_VAR 0 4
33406: PPUSH
33407: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33411: LD_VAR 0 4
33415: PPUSH
33416: LD_VAR 0 2
33420: PPUSH
33421: CALL_OW 180
// end else
33425: GO 33540
// if GetControl ( vehicle ) = control_remote then
33427: LD_VAR 0 1
33431: PPUSH
33432: CALL_OW 263
33436: PUSH
33437: LD_INT 2
33439: EQUAL
33440: IFFALSE 33501
// begin wait ( 0 0$2 ) ;
33442: LD_INT 70
33444: PPUSH
33445: CALL_OW 67
// if Connect ( vehicle ) then
33449: LD_VAR 0 1
33453: PPUSH
33454: CALL 45764 0 1
33458: IFFALSE 33499
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33460: LD_VAR 0 1
33464: PPUSH
33465: LD_EXP 140
33469: PUSH
33470: LD_VAR 0 2
33474: ARRAY
33475: PUSH
33476: LD_INT 3
33478: ARRAY
33479: PPUSH
33480: LD_EXP 140
33484: PUSH
33485: LD_VAR 0 2
33489: ARRAY
33490: PUSH
33491: LD_INT 4
33493: ARRAY
33494: PPUSH
33495: CALL_OW 171
// end else
33499: GO 33540
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33501: LD_VAR 0 1
33505: PPUSH
33506: LD_EXP 140
33510: PUSH
33511: LD_VAR 0 2
33515: ARRAY
33516: PUSH
33517: LD_INT 3
33519: ARRAY
33520: PPUSH
33521: LD_EXP 140
33525: PUSH
33526: LD_VAR 0 2
33530: ARRAY
33531: PUSH
33532: LD_INT 4
33534: ARRAY
33535: PPUSH
33536: CALL_OW 171
// end ; end ;
33540: LD_VAR 0 3
33544: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33545: LD_INT 0
33547: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33548: LD_VAR 0 1
33552: PUSH
33553: LD_INT 250
33555: EQUAL
33556: PUSH
33557: LD_VAR 0 2
33561: PPUSH
33562: CALL_OW 264
33566: PUSH
33567: LD_EXP 69
33571: EQUAL
33572: AND
33573: IFFALSE 33594
// MinerPlaceMine ( unit , x , y ) ;
33575: LD_VAR 0 2
33579: PPUSH
33580: LD_VAR 0 4
33584: PPUSH
33585: LD_VAR 0 5
33589: PPUSH
33590: CALL 36322 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33594: LD_VAR 0 1
33598: PUSH
33599: LD_INT 251
33601: EQUAL
33602: PUSH
33603: LD_VAR 0 2
33607: PPUSH
33608: CALL_OW 264
33612: PUSH
33613: LD_EXP 69
33617: EQUAL
33618: AND
33619: IFFALSE 33640
// MinerDetonateMine ( unit , x , y ) ;
33621: LD_VAR 0 2
33625: PPUSH
33626: LD_VAR 0 4
33630: PPUSH
33631: LD_VAR 0 5
33635: PPUSH
33636: CALL 36599 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33640: LD_VAR 0 1
33644: PUSH
33645: LD_INT 252
33647: EQUAL
33648: PUSH
33649: LD_VAR 0 2
33653: PPUSH
33654: CALL_OW 264
33658: PUSH
33659: LD_EXP 69
33663: EQUAL
33664: AND
33665: IFFALSE 33686
// MinerCreateMinefield ( unit , x , y ) ;
33667: LD_VAR 0 2
33671: PPUSH
33672: LD_VAR 0 4
33676: PPUSH
33677: LD_VAR 0 5
33681: PPUSH
33682: CALL 37016 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33686: LD_VAR 0 1
33690: PUSH
33691: LD_INT 253
33693: EQUAL
33694: PUSH
33695: LD_VAR 0 2
33699: PPUSH
33700: CALL_OW 257
33704: PUSH
33705: LD_INT 5
33707: EQUAL
33708: AND
33709: IFFALSE 33730
// ComBinocular ( unit , x , y ) ;
33711: LD_VAR 0 2
33715: PPUSH
33716: LD_VAR 0 4
33720: PPUSH
33721: LD_VAR 0 5
33725: PPUSH
33726: CALL 37387 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33730: LD_VAR 0 1
33734: PUSH
33735: LD_INT 254
33737: EQUAL
33738: PUSH
33739: LD_VAR 0 2
33743: PPUSH
33744: CALL_OW 264
33748: PUSH
33749: LD_EXP 64
33753: EQUAL
33754: AND
33755: PUSH
33756: LD_VAR 0 3
33760: PPUSH
33761: CALL_OW 263
33765: PUSH
33766: LD_INT 3
33768: EQUAL
33769: AND
33770: IFFALSE 33786
// HackDestroyVehicle ( unit , selectedUnit ) ;
33772: LD_VAR 0 2
33776: PPUSH
33777: LD_VAR 0 3
33781: PPUSH
33782: CALL 35682 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33786: LD_VAR 0 1
33790: PUSH
33791: LD_INT 255
33793: EQUAL
33794: PUSH
33795: LD_VAR 0 2
33799: PPUSH
33800: CALL_OW 264
33804: PUSH
33805: LD_INT 14
33807: PUSH
33808: LD_INT 53
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: IN
33815: AND
33816: PUSH
33817: LD_VAR 0 4
33821: PPUSH
33822: LD_VAR 0 5
33826: PPUSH
33827: CALL_OW 488
33831: AND
33832: IFFALSE 33856
// CutTreeXYR ( unit , x , y , 12 ) ;
33834: LD_VAR 0 2
33838: PPUSH
33839: LD_VAR 0 4
33843: PPUSH
33844: LD_VAR 0 5
33848: PPUSH
33849: LD_INT 12
33851: PPUSH
33852: CALL 34248 0 4
// if cmd = 256 then
33856: LD_VAR 0 1
33860: PUSH
33861: LD_INT 256
33863: EQUAL
33864: IFFALSE 33885
// SetFactoryWaypoint ( unit , x , y ) ;
33866: LD_VAR 0 2
33870: PPUSH
33871: LD_VAR 0 4
33875: PPUSH
33876: LD_VAR 0 5
33880: PPUSH
33881: CALL 33890 0 3
// end ;
33885: LD_VAR 0 6
33889: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33890: LD_INT 0
33892: PPUSH
33893: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33894: LD_VAR 0 1
33898: NOT
33899: PUSH
33900: LD_VAR 0 2
33904: PPUSH
33905: LD_VAR 0 3
33909: PPUSH
33910: CALL_OW 488
33914: NOT
33915: OR
33916: PUSH
33917: LD_VAR 0 1
33921: PPUSH
33922: CALL_OW 266
33926: PUSH
33927: LD_INT 3
33929: NONEQUAL
33930: PUSH
33931: LD_VAR 0 1
33935: PPUSH
33936: CALL_OW 247
33940: PUSH
33941: LD_INT 1
33943: EQUAL
33944: NOT
33945: AND
33946: OR
33947: IFFALSE 33951
// exit ;
33949: GO 34100
// if GetType ( factory ) = unit_human then
33951: LD_VAR 0 1
33955: PPUSH
33956: CALL_OW 247
33960: PUSH
33961: LD_INT 1
33963: EQUAL
33964: IFFALSE 33981
// factory := IsInUnit ( factory ) ;
33966: LD_ADDR_VAR 0 1
33970: PUSH
33971: LD_VAR 0 1
33975: PPUSH
33976: CALL_OW 310
33980: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33981: LD_VAR 0 1
33985: PPUSH
33986: CALL_OW 266
33990: PUSH
33991: LD_INT 3
33993: NONEQUAL
33994: IFFALSE 33998
// exit ;
33996: GO 34100
// if HexInfo ( x , y ) = factory then
33998: LD_VAR 0 2
34002: PPUSH
34003: LD_VAR 0 3
34007: PPUSH
34008: CALL_OW 428
34012: PUSH
34013: LD_VAR 0 1
34017: EQUAL
34018: IFFALSE 34045
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34020: LD_ADDR_EXP 140
34024: PUSH
34025: LD_EXP 140
34029: PPUSH
34030: LD_VAR 0 1
34034: PPUSH
34035: LD_INT 0
34037: PPUSH
34038: CALL_OW 1
34042: ST_TO_ADDR
34043: GO 34096
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34045: LD_ADDR_EXP 140
34049: PUSH
34050: LD_EXP 140
34054: PPUSH
34055: LD_VAR 0 1
34059: PPUSH
34060: LD_VAR 0 1
34064: PPUSH
34065: CALL_OW 255
34069: PUSH
34070: LD_VAR 0 1
34074: PUSH
34075: LD_VAR 0 2
34079: PUSH
34080: LD_VAR 0 3
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: PPUSH
34091: CALL_OW 1
34095: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34096: CALL 34105 0 0
// end ;
34100: LD_VAR 0 4
34104: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
34105: LD_INT 0
34107: PPUSH
34108: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34109: LD_STRING resetFactoryWaypoint();
34111: PPUSH
34112: CALL_OW 559
// if factoryWaypoints then
34116: LD_EXP 140
34120: IFFALSE 34243
// begin for i := 1 to factoryWaypoints do
34122: LD_ADDR_VAR 0 2
34126: PUSH
34127: DOUBLE
34128: LD_INT 1
34130: DEC
34131: ST_TO_ADDR
34132: LD_EXP 140
34136: PUSH
34137: FOR_TO
34138: IFFALSE 34241
// if factoryWaypoints [ i ] then
34140: LD_EXP 140
34144: PUSH
34145: LD_VAR 0 2
34149: ARRAY
34150: IFFALSE 34239
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
34152: LD_STRING setFactoryWaypointXY(
34154: PUSH
34155: LD_EXP 140
34159: PUSH
34160: LD_VAR 0 2
34164: ARRAY
34165: PUSH
34166: LD_INT 1
34168: ARRAY
34169: STR
34170: PUSH
34171: LD_STRING ,
34173: STR
34174: PUSH
34175: LD_EXP 140
34179: PUSH
34180: LD_VAR 0 2
34184: ARRAY
34185: PUSH
34186: LD_INT 2
34188: ARRAY
34189: STR
34190: PUSH
34191: LD_STRING ,
34193: STR
34194: PUSH
34195: LD_EXP 140
34199: PUSH
34200: LD_VAR 0 2
34204: ARRAY
34205: PUSH
34206: LD_INT 3
34208: ARRAY
34209: STR
34210: PUSH
34211: LD_STRING ,
34213: STR
34214: PUSH
34215: LD_EXP 140
34219: PUSH
34220: LD_VAR 0 2
34224: ARRAY
34225: PUSH
34226: LD_INT 4
34228: ARRAY
34229: STR
34230: PUSH
34231: LD_STRING )
34233: STR
34234: PPUSH
34235: CALL_OW 559
34239: GO 34137
34241: POP
34242: POP
// end ; end ;
34243: LD_VAR 0 1
34247: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34248: LD_INT 0
34250: PPUSH
34251: PPUSH
34252: PPUSH
34253: PPUSH
34254: PPUSH
34255: PPUSH
34256: PPUSH
34257: PPUSH
34258: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34259: LD_VAR 0 1
34263: NOT
34264: PUSH
34265: LD_VAR 0 2
34269: PPUSH
34270: LD_VAR 0 3
34274: PPUSH
34275: CALL_OW 488
34279: NOT
34280: OR
34281: PUSH
34282: LD_VAR 0 4
34286: NOT
34287: OR
34288: IFFALSE 34292
// exit ;
34290: GO 34632
// list := [ ] ;
34292: LD_ADDR_VAR 0 13
34296: PUSH
34297: EMPTY
34298: ST_TO_ADDR
// if x - r < 0 then
34299: LD_VAR 0 2
34303: PUSH
34304: LD_VAR 0 4
34308: MINUS
34309: PUSH
34310: LD_INT 0
34312: LESS
34313: IFFALSE 34325
// min_x := 0 else
34315: LD_ADDR_VAR 0 7
34319: PUSH
34320: LD_INT 0
34322: ST_TO_ADDR
34323: GO 34341
// min_x := x - r ;
34325: LD_ADDR_VAR 0 7
34329: PUSH
34330: LD_VAR 0 2
34334: PUSH
34335: LD_VAR 0 4
34339: MINUS
34340: ST_TO_ADDR
// if y - r < 0 then
34341: LD_VAR 0 3
34345: PUSH
34346: LD_VAR 0 4
34350: MINUS
34351: PUSH
34352: LD_INT 0
34354: LESS
34355: IFFALSE 34367
// min_y := 0 else
34357: LD_ADDR_VAR 0 8
34361: PUSH
34362: LD_INT 0
34364: ST_TO_ADDR
34365: GO 34383
// min_y := y - r ;
34367: LD_ADDR_VAR 0 8
34371: PUSH
34372: LD_VAR 0 3
34376: PUSH
34377: LD_VAR 0 4
34381: MINUS
34382: ST_TO_ADDR
// max_x := x + r ;
34383: LD_ADDR_VAR 0 9
34387: PUSH
34388: LD_VAR 0 2
34392: PUSH
34393: LD_VAR 0 4
34397: PLUS
34398: ST_TO_ADDR
// max_y := y + r ;
34399: LD_ADDR_VAR 0 10
34403: PUSH
34404: LD_VAR 0 3
34408: PUSH
34409: LD_VAR 0 4
34413: PLUS
34414: ST_TO_ADDR
// for _x = min_x to max_x do
34415: LD_ADDR_VAR 0 11
34419: PUSH
34420: DOUBLE
34421: LD_VAR 0 7
34425: DEC
34426: ST_TO_ADDR
34427: LD_VAR 0 9
34431: PUSH
34432: FOR_TO
34433: IFFALSE 34550
// for _y = min_y to max_y do
34435: LD_ADDR_VAR 0 12
34439: PUSH
34440: DOUBLE
34441: LD_VAR 0 8
34445: DEC
34446: ST_TO_ADDR
34447: LD_VAR 0 10
34451: PUSH
34452: FOR_TO
34453: IFFALSE 34546
// begin if not ValidHex ( _x , _y ) then
34455: LD_VAR 0 11
34459: PPUSH
34460: LD_VAR 0 12
34464: PPUSH
34465: CALL_OW 488
34469: NOT
34470: IFFALSE 34474
// continue ;
34472: GO 34452
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34474: LD_VAR 0 11
34478: PPUSH
34479: LD_VAR 0 12
34483: PPUSH
34484: CALL_OW 351
34488: PUSH
34489: LD_VAR 0 11
34493: PPUSH
34494: LD_VAR 0 12
34498: PPUSH
34499: CALL_OW 554
34503: AND
34504: IFFALSE 34544
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34506: LD_ADDR_VAR 0 13
34510: PUSH
34511: LD_VAR 0 13
34515: PPUSH
34516: LD_VAR 0 13
34520: PUSH
34521: LD_INT 1
34523: PLUS
34524: PPUSH
34525: LD_VAR 0 11
34529: PUSH
34530: LD_VAR 0 12
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PPUSH
34539: CALL_OW 2
34543: ST_TO_ADDR
// end ;
34544: GO 34452
34546: POP
34547: POP
34548: GO 34432
34550: POP
34551: POP
// if not list then
34552: LD_VAR 0 13
34556: NOT
34557: IFFALSE 34561
// exit ;
34559: GO 34632
// for i in list do
34561: LD_ADDR_VAR 0 6
34565: PUSH
34566: LD_VAR 0 13
34570: PUSH
34571: FOR_IN
34572: IFFALSE 34630
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34574: LD_VAR 0 1
34578: PPUSH
34579: LD_STRING M
34581: PUSH
34582: LD_VAR 0 6
34586: PUSH
34587: LD_INT 1
34589: ARRAY
34590: PUSH
34591: LD_VAR 0 6
34595: PUSH
34596: LD_INT 2
34598: ARRAY
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: LD_INT 0
34605: PUSH
34606: LD_INT 0
34608: PUSH
34609: LD_INT 0
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: PUSH
34621: EMPTY
34622: LIST
34623: PPUSH
34624: CALL_OW 447
34628: GO 34571
34630: POP
34631: POP
// end ;
34632: LD_VAR 0 5
34636: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34637: LD_EXP 141
34641: NOT
34642: IFFALSE 34692
34644: GO 34646
34646: DISABLE
// begin initHack := true ;
34647: LD_ADDR_EXP 141
34651: PUSH
34652: LD_INT 1
34654: ST_TO_ADDR
// hackTanks := [ ] ;
34655: LD_ADDR_EXP 142
34659: PUSH
34660: EMPTY
34661: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34662: LD_ADDR_EXP 143
34666: PUSH
34667: EMPTY
34668: ST_TO_ADDR
// hackLimit := 3 ;
34669: LD_ADDR_EXP 144
34673: PUSH
34674: LD_INT 3
34676: ST_TO_ADDR
// hackDist := 12 ;
34677: LD_ADDR_EXP 145
34681: PUSH
34682: LD_INT 12
34684: ST_TO_ADDR
// hackCounter := [ ] ;
34685: LD_ADDR_EXP 146
34689: PUSH
34690: EMPTY
34691: ST_TO_ADDR
// end ;
34692: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34693: LD_EXP 141
34697: PUSH
34698: LD_INT 34
34700: PUSH
34701: LD_EXP 64
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PPUSH
34710: CALL_OW 69
34714: AND
34715: IFFALSE 34970
34717: GO 34719
34719: DISABLE
34720: LD_INT 0
34722: PPUSH
34723: PPUSH
// begin enable ;
34724: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34725: LD_ADDR_VAR 0 1
34729: PUSH
34730: LD_INT 34
34732: PUSH
34733: LD_EXP 64
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PPUSH
34742: CALL_OW 69
34746: PUSH
34747: FOR_IN
34748: IFFALSE 34968
// begin if not i in hackTanks then
34750: LD_VAR 0 1
34754: PUSH
34755: LD_EXP 142
34759: IN
34760: NOT
34761: IFFALSE 34844
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34763: LD_ADDR_EXP 142
34767: PUSH
34768: LD_EXP 142
34772: PPUSH
34773: LD_EXP 142
34777: PUSH
34778: LD_INT 1
34780: PLUS
34781: PPUSH
34782: LD_VAR 0 1
34786: PPUSH
34787: CALL_OW 1
34791: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34792: LD_ADDR_EXP 143
34796: PUSH
34797: LD_EXP 143
34801: PPUSH
34802: LD_EXP 143
34806: PUSH
34807: LD_INT 1
34809: PLUS
34810: PPUSH
34811: EMPTY
34812: PPUSH
34813: CALL_OW 1
34817: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34818: LD_ADDR_EXP 146
34822: PUSH
34823: LD_EXP 146
34827: PPUSH
34828: LD_EXP 146
34832: PUSH
34833: LD_INT 1
34835: PLUS
34836: PPUSH
34837: EMPTY
34838: PPUSH
34839: CALL_OW 1
34843: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34844: LD_VAR 0 1
34848: PPUSH
34849: CALL_OW 302
34853: NOT
34854: IFFALSE 34867
// begin HackUnlinkAll ( i ) ;
34856: LD_VAR 0 1
34860: PPUSH
34861: CALL 34973 0 1
// continue ;
34865: GO 34747
// end ; HackCheckCapturedStatus ( i ) ;
34867: LD_VAR 0 1
34871: PPUSH
34872: CALL 35416 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34876: LD_ADDR_VAR 0 2
34880: PUSH
34881: LD_INT 81
34883: PUSH
34884: LD_VAR 0 1
34888: PPUSH
34889: CALL_OW 255
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 33
34900: PUSH
34901: LD_INT 3
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 91
34910: PUSH
34911: LD_VAR 0 1
34915: PUSH
34916: LD_EXP 145
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 50
34928: PUSH
34929: EMPTY
34930: LIST
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: PPUSH
34938: CALL_OW 69
34942: ST_TO_ADDR
// if not tmp then
34943: LD_VAR 0 2
34947: NOT
34948: IFFALSE 34952
// continue ;
34950: GO 34747
// HackLink ( i , tmp ) ;
34952: LD_VAR 0 1
34956: PPUSH
34957: LD_VAR 0 2
34961: PPUSH
34962: CALL 35109 0 2
// end ;
34966: GO 34747
34968: POP
34969: POP
// end ;
34970: PPOPN 2
34972: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34973: LD_INT 0
34975: PPUSH
34976: PPUSH
34977: PPUSH
// if not hack in hackTanks then
34978: LD_VAR 0 1
34982: PUSH
34983: LD_EXP 142
34987: IN
34988: NOT
34989: IFFALSE 34993
// exit ;
34991: GO 35104
// index := GetElementIndex ( hackTanks , hack ) ;
34993: LD_ADDR_VAR 0 4
34997: PUSH
34998: LD_EXP 142
35002: PPUSH
35003: LD_VAR 0 1
35007: PPUSH
35008: CALL 42578 0 2
35012: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35013: LD_EXP 143
35017: PUSH
35018: LD_VAR 0 4
35022: ARRAY
35023: IFFALSE 35104
// begin for i in hackTanksCaptured [ index ] do
35025: LD_ADDR_VAR 0 3
35029: PUSH
35030: LD_EXP 143
35034: PUSH
35035: LD_VAR 0 4
35039: ARRAY
35040: PUSH
35041: FOR_IN
35042: IFFALSE 35068
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35044: LD_VAR 0 3
35048: PUSH
35049: LD_INT 1
35051: ARRAY
35052: PPUSH
35053: LD_VAR 0 3
35057: PUSH
35058: LD_INT 2
35060: ARRAY
35061: PPUSH
35062: CALL_OW 235
35066: GO 35041
35068: POP
35069: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35070: LD_ADDR_EXP 143
35074: PUSH
35075: LD_EXP 143
35079: PPUSH
35080: LD_VAR 0 4
35084: PPUSH
35085: EMPTY
35086: PPUSH
35087: CALL_OW 1
35091: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35092: LD_VAR 0 1
35096: PPUSH
35097: LD_INT 0
35099: PPUSH
35100: CALL_OW 505
// end ; end ;
35104: LD_VAR 0 2
35108: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35109: LD_INT 0
35111: PPUSH
35112: PPUSH
35113: PPUSH
// if not hack in hackTanks or not vehicles then
35114: LD_VAR 0 1
35118: PUSH
35119: LD_EXP 142
35123: IN
35124: NOT
35125: PUSH
35126: LD_VAR 0 2
35130: NOT
35131: OR
35132: IFFALSE 35136
// exit ;
35134: GO 35411
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35136: LD_ADDR_VAR 0 2
35140: PUSH
35141: LD_VAR 0 1
35145: PPUSH
35146: LD_VAR 0 2
35150: PPUSH
35151: LD_INT 1
35153: PPUSH
35154: LD_INT 1
35156: PPUSH
35157: CALL 43228 0 4
35161: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35162: LD_ADDR_VAR 0 5
35166: PUSH
35167: LD_EXP 142
35171: PPUSH
35172: LD_VAR 0 1
35176: PPUSH
35177: CALL 42578 0 2
35181: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35182: LD_EXP 143
35186: PUSH
35187: LD_VAR 0 5
35191: ARRAY
35192: PUSH
35193: LD_EXP 144
35197: LESS
35198: IFFALSE 35387
// begin for i := 1 to vehicles do
35200: LD_ADDR_VAR 0 4
35204: PUSH
35205: DOUBLE
35206: LD_INT 1
35208: DEC
35209: ST_TO_ADDR
35210: LD_VAR 0 2
35214: PUSH
35215: FOR_TO
35216: IFFALSE 35385
// begin if hackTanksCaptured [ index ] = hackLimit then
35218: LD_EXP 143
35222: PUSH
35223: LD_VAR 0 5
35227: ARRAY
35228: PUSH
35229: LD_EXP 144
35233: EQUAL
35234: IFFALSE 35238
// break ;
35236: GO 35385
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35238: LD_ADDR_EXP 146
35242: PUSH
35243: LD_EXP 146
35247: PPUSH
35248: LD_VAR 0 5
35252: PPUSH
35253: LD_EXP 146
35257: PUSH
35258: LD_VAR 0 5
35262: ARRAY
35263: PUSH
35264: LD_INT 1
35266: PLUS
35267: PPUSH
35268: CALL_OW 1
35272: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35273: LD_ADDR_EXP 143
35277: PUSH
35278: LD_EXP 143
35282: PPUSH
35283: LD_VAR 0 5
35287: PUSH
35288: LD_EXP 143
35292: PUSH
35293: LD_VAR 0 5
35297: ARRAY
35298: PUSH
35299: LD_INT 1
35301: PLUS
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PPUSH
35307: LD_VAR 0 2
35311: PUSH
35312: LD_VAR 0 4
35316: ARRAY
35317: PUSH
35318: LD_VAR 0 2
35322: PUSH
35323: LD_VAR 0 4
35327: ARRAY
35328: PPUSH
35329: CALL_OW 255
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PPUSH
35338: CALL 42793 0 3
35342: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35343: LD_VAR 0 2
35347: PUSH
35348: LD_VAR 0 4
35352: ARRAY
35353: PPUSH
35354: LD_VAR 0 1
35358: PPUSH
35359: CALL_OW 255
35363: PPUSH
35364: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35368: LD_VAR 0 2
35372: PUSH
35373: LD_VAR 0 4
35377: ARRAY
35378: PPUSH
35379: CALL_OW 141
// end ;
35383: GO 35215
35385: POP
35386: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35387: LD_VAR 0 1
35391: PPUSH
35392: LD_EXP 143
35396: PUSH
35397: LD_VAR 0 5
35401: ARRAY
35402: PUSH
35403: LD_INT 0
35405: PLUS
35406: PPUSH
35407: CALL_OW 505
// end ;
35411: LD_VAR 0 3
35415: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35416: LD_INT 0
35418: PPUSH
35419: PPUSH
35420: PPUSH
35421: PPUSH
// if not hack in hackTanks then
35422: LD_VAR 0 1
35426: PUSH
35427: LD_EXP 142
35431: IN
35432: NOT
35433: IFFALSE 35437
// exit ;
35435: GO 35677
// index := GetElementIndex ( hackTanks , hack ) ;
35437: LD_ADDR_VAR 0 4
35441: PUSH
35442: LD_EXP 142
35446: PPUSH
35447: LD_VAR 0 1
35451: PPUSH
35452: CALL 42578 0 2
35456: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35457: LD_ADDR_VAR 0 3
35461: PUSH
35462: DOUBLE
35463: LD_EXP 143
35467: PUSH
35468: LD_VAR 0 4
35472: ARRAY
35473: INC
35474: ST_TO_ADDR
35475: LD_INT 1
35477: PUSH
35478: FOR_DOWNTO
35479: IFFALSE 35651
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35481: LD_ADDR_VAR 0 5
35485: PUSH
35486: LD_EXP 143
35490: PUSH
35491: LD_VAR 0 4
35495: ARRAY
35496: PUSH
35497: LD_VAR 0 3
35501: ARRAY
35502: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35503: LD_VAR 0 5
35507: PUSH
35508: LD_INT 1
35510: ARRAY
35511: PPUSH
35512: CALL_OW 302
35516: NOT
35517: PUSH
35518: LD_VAR 0 5
35522: PUSH
35523: LD_INT 1
35525: ARRAY
35526: PPUSH
35527: CALL_OW 255
35531: PUSH
35532: LD_VAR 0 1
35536: PPUSH
35537: CALL_OW 255
35541: NONEQUAL
35542: OR
35543: IFFALSE 35649
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35545: LD_VAR 0 5
35549: PUSH
35550: LD_INT 1
35552: ARRAY
35553: PPUSH
35554: CALL_OW 305
35558: PUSH
35559: LD_VAR 0 5
35563: PUSH
35564: LD_INT 1
35566: ARRAY
35567: PPUSH
35568: CALL_OW 255
35572: PUSH
35573: LD_VAR 0 1
35577: PPUSH
35578: CALL_OW 255
35582: EQUAL
35583: AND
35584: IFFALSE 35608
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35586: LD_VAR 0 5
35590: PUSH
35591: LD_INT 1
35593: ARRAY
35594: PPUSH
35595: LD_VAR 0 5
35599: PUSH
35600: LD_INT 2
35602: ARRAY
35603: PPUSH
35604: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35608: LD_ADDR_EXP 143
35612: PUSH
35613: LD_EXP 143
35617: PPUSH
35618: LD_VAR 0 4
35622: PPUSH
35623: LD_EXP 143
35627: PUSH
35628: LD_VAR 0 4
35632: ARRAY
35633: PPUSH
35634: LD_VAR 0 3
35638: PPUSH
35639: CALL_OW 3
35643: PPUSH
35644: CALL_OW 1
35648: ST_TO_ADDR
// end ; end ;
35649: GO 35478
35651: POP
35652: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35653: LD_VAR 0 1
35657: PPUSH
35658: LD_EXP 143
35662: PUSH
35663: LD_VAR 0 4
35667: ARRAY
35668: PUSH
35669: LD_INT 0
35671: PLUS
35672: PPUSH
35673: CALL_OW 505
// end ;
35677: LD_VAR 0 2
35681: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35682: LD_INT 0
35684: PPUSH
35685: PPUSH
35686: PPUSH
35687: PPUSH
// if not hack in hackTanks then
35688: LD_VAR 0 1
35692: PUSH
35693: LD_EXP 142
35697: IN
35698: NOT
35699: IFFALSE 35703
// exit ;
35701: GO 35788
// index := GetElementIndex ( hackTanks , hack ) ;
35703: LD_ADDR_VAR 0 5
35707: PUSH
35708: LD_EXP 142
35712: PPUSH
35713: LD_VAR 0 1
35717: PPUSH
35718: CALL 42578 0 2
35722: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35723: LD_ADDR_VAR 0 4
35727: PUSH
35728: DOUBLE
35729: LD_INT 1
35731: DEC
35732: ST_TO_ADDR
35733: LD_EXP 143
35737: PUSH
35738: LD_VAR 0 5
35742: ARRAY
35743: PUSH
35744: FOR_TO
35745: IFFALSE 35786
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35747: LD_EXP 143
35751: PUSH
35752: LD_VAR 0 5
35756: ARRAY
35757: PUSH
35758: LD_VAR 0 4
35762: ARRAY
35763: PUSH
35764: LD_INT 1
35766: ARRAY
35767: PUSH
35768: LD_VAR 0 2
35772: EQUAL
35773: IFFALSE 35784
// KillUnit ( vehicle ) ;
35775: LD_VAR 0 2
35779: PPUSH
35780: CALL_OW 66
35784: GO 35744
35786: POP
35787: POP
// end ;
35788: LD_VAR 0 3
35792: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35793: LD_EXP 147
35797: NOT
35798: IFFALSE 35833
35800: GO 35802
35802: DISABLE
// begin initMiner := true ;
35803: LD_ADDR_EXP 147
35807: PUSH
35808: LD_INT 1
35810: ST_TO_ADDR
// minersList := [ ] ;
35811: LD_ADDR_EXP 148
35815: PUSH
35816: EMPTY
35817: ST_TO_ADDR
// minerMinesList := [ ] ;
35818: LD_ADDR_EXP 149
35822: PUSH
35823: EMPTY
35824: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35825: LD_ADDR_EXP 150
35829: PUSH
35830: LD_INT 5
35832: ST_TO_ADDR
// end ;
35833: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35834: LD_EXP 147
35838: PUSH
35839: LD_INT 34
35841: PUSH
35842: LD_EXP 69
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PPUSH
35851: CALL_OW 69
35855: AND
35856: IFFALSE 36319
35858: GO 35860
35860: DISABLE
35861: LD_INT 0
35863: PPUSH
35864: PPUSH
35865: PPUSH
35866: PPUSH
// begin enable ;
35867: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35868: LD_ADDR_VAR 0 1
35872: PUSH
35873: LD_INT 34
35875: PUSH
35876: LD_EXP 69
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PPUSH
35885: CALL_OW 69
35889: PUSH
35890: FOR_IN
35891: IFFALSE 35963
// begin if not i in minersList then
35893: LD_VAR 0 1
35897: PUSH
35898: LD_EXP 148
35902: IN
35903: NOT
35904: IFFALSE 35961
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35906: LD_ADDR_EXP 148
35910: PUSH
35911: LD_EXP 148
35915: PPUSH
35916: LD_EXP 148
35920: PUSH
35921: LD_INT 1
35923: PLUS
35924: PPUSH
35925: LD_VAR 0 1
35929: PPUSH
35930: CALL_OW 1
35934: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35935: LD_ADDR_EXP 149
35939: PUSH
35940: LD_EXP 149
35944: PPUSH
35945: LD_EXP 149
35949: PUSH
35950: LD_INT 1
35952: PLUS
35953: PPUSH
35954: EMPTY
35955: PPUSH
35956: CALL_OW 1
35960: ST_TO_ADDR
// end end ;
35961: GO 35890
35963: POP
35964: POP
// for i := minerMinesList downto 1 do
35965: LD_ADDR_VAR 0 1
35969: PUSH
35970: DOUBLE
35971: LD_EXP 149
35975: INC
35976: ST_TO_ADDR
35977: LD_INT 1
35979: PUSH
35980: FOR_DOWNTO
35981: IFFALSE 36317
// begin if IsLive ( minersList [ i ] ) then
35983: LD_EXP 148
35987: PUSH
35988: LD_VAR 0 1
35992: ARRAY
35993: PPUSH
35994: CALL_OW 300
35998: IFFALSE 36026
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36000: LD_EXP 148
36004: PUSH
36005: LD_VAR 0 1
36009: ARRAY
36010: PPUSH
36011: LD_EXP 149
36015: PUSH
36016: LD_VAR 0 1
36020: ARRAY
36021: PPUSH
36022: CALL_OW 505
// if not minerMinesList [ i ] then
36026: LD_EXP 149
36030: PUSH
36031: LD_VAR 0 1
36035: ARRAY
36036: NOT
36037: IFFALSE 36041
// continue ;
36039: GO 35980
// for j := minerMinesList [ i ] downto 1 do
36041: LD_ADDR_VAR 0 2
36045: PUSH
36046: DOUBLE
36047: LD_EXP 149
36051: PUSH
36052: LD_VAR 0 1
36056: ARRAY
36057: INC
36058: ST_TO_ADDR
36059: LD_INT 1
36061: PUSH
36062: FOR_DOWNTO
36063: IFFALSE 36313
// begin side := GetSide ( minersList [ i ] ) ;
36065: LD_ADDR_VAR 0 3
36069: PUSH
36070: LD_EXP 148
36074: PUSH
36075: LD_VAR 0 1
36079: ARRAY
36080: PPUSH
36081: CALL_OW 255
36085: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36086: LD_ADDR_VAR 0 4
36090: PUSH
36091: LD_EXP 149
36095: PUSH
36096: LD_VAR 0 1
36100: ARRAY
36101: PUSH
36102: LD_VAR 0 2
36106: ARRAY
36107: PUSH
36108: LD_INT 1
36110: ARRAY
36111: PPUSH
36112: LD_EXP 149
36116: PUSH
36117: LD_VAR 0 1
36121: ARRAY
36122: PUSH
36123: LD_VAR 0 2
36127: ARRAY
36128: PUSH
36129: LD_INT 2
36131: ARRAY
36132: PPUSH
36133: CALL_OW 428
36137: ST_TO_ADDR
// if not tmp then
36138: LD_VAR 0 4
36142: NOT
36143: IFFALSE 36147
// continue ;
36145: GO 36062
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36147: LD_VAR 0 4
36151: PUSH
36152: LD_INT 81
36154: PUSH
36155: LD_VAR 0 3
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PPUSH
36164: CALL_OW 69
36168: IN
36169: PUSH
36170: LD_EXP 149
36174: PUSH
36175: LD_VAR 0 1
36179: ARRAY
36180: PUSH
36181: LD_VAR 0 2
36185: ARRAY
36186: PUSH
36187: LD_INT 1
36189: ARRAY
36190: PPUSH
36191: LD_EXP 149
36195: PUSH
36196: LD_VAR 0 1
36200: ARRAY
36201: PUSH
36202: LD_VAR 0 2
36206: ARRAY
36207: PUSH
36208: LD_INT 2
36210: ARRAY
36211: PPUSH
36212: CALL_OW 458
36216: AND
36217: IFFALSE 36311
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36219: LD_EXP 149
36223: PUSH
36224: LD_VAR 0 1
36228: ARRAY
36229: PUSH
36230: LD_VAR 0 2
36234: ARRAY
36235: PUSH
36236: LD_INT 1
36238: ARRAY
36239: PPUSH
36240: LD_EXP 149
36244: PUSH
36245: LD_VAR 0 1
36249: ARRAY
36250: PUSH
36251: LD_VAR 0 2
36255: ARRAY
36256: PUSH
36257: LD_INT 2
36259: ARRAY
36260: PPUSH
36261: LD_VAR 0 3
36265: PPUSH
36266: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36270: LD_ADDR_EXP 149
36274: PUSH
36275: LD_EXP 149
36279: PPUSH
36280: LD_VAR 0 1
36284: PPUSH
36285: LD_EXP 149
36289: PUSH
36290: LD_VAR 0 1
36294: ARRAY
36295: PPUSH
36296: LD_VAR 0 2
36300: PPUSH
36301: CALL_OW 3
36305: PPUSH
36306: CALL_OW 1
36310: ST_TO_ADDR
// end ; end ;
36311: GO 36062
36313: POP
36314: POP
// end ;
36315: GO 35980
36317: POP
36318: POP
// end ;
36319: PPOPN 4
36321: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36322: LD_INT 0
36324: PPUSH
36325: PPUSH
// result := false ;
36326: LD_ADDR_VAR 0 4
36330: PUSH
36331: LD_INT 0
36333: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36334: LD_VAR 0 1
36338: PPUSH
36339: CALL_OW 264
36343: PUSH
36344: LD_EXP 69
36348: EQUAL
36349: NOT
36350: IFFALSE 36354
// exit ;
36352: GO 36594
// index := GetElementIndex ( minersList , unit ) ;
36354: LD_ADDR_VAR 0 5
36358: PUSH
36359: LD_EXP 148
36363: PPUSH
36364: LD_VAR 0 1
36368: PPUSH
36369: CALL 42578 0 2
36373: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36374: LD_EXP 149
36378: PUSH
36379: LD_VAR 0 5
36383: ARRAY
36384: PUSH
36385: LD_EXP 150
36389: GREATEREQUAL
36390: IFFALSE 36394
// exit ;
36392: GO 36594
// ComMoveXY ( unit , x , y ) ;
36394: LD_VAR 0 1
36398: PPUSH
36399: LD_VAR 0 2
36403: PPUSH
36404: LD_VAR 0 3
36408: PPUSH
36409: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36413: LD_INT 35
36415: PPUSH
36416: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36420: LD_VAR 0 1
36424: PPUSH
36425: LD_VAR 0 2
36429: PPUSH
36430: LD_VAR 0 3
36434: PPUSH
36435: CALL 73297 0 3
36439: NOT
36440: PUSH
36441: LD_VAR 0 1
36445: PPUSH
36446: CALL_OW 314
36450: AND
36451: IFFALSE 36455
// exit ;
36453: GO 36594
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36455: LD_VAR 0 2
36459: PPUSH
36460: LD_VAR 0 3
36464: PPUSH
36465: CALL_OW 428
36469: PUSH
36470: LD_VAR 0 1
36474: EQUAL
36475: PUSH
36476: LD_VAR 0 1
36480: PPUSH
36481: CALL_OW 314
36485: NOT
36486: AND
36487: IFFALSE 36413
// PlaySoundXY ( x , y , PlantMine ) ;
36489: LD_VAR 0 2
36493: PPUSH
36494: LD_VAR 0 3
36498: PPUSH
36499: LD_STRING PlantMine
36501: PPUSH
36502: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36506: LD_VAR 0 2
36510: PPUSH
36511: LD_VAR 0 3
36515: PPUSH
36516: LD_VAR 0 1
36520: PPUSH
36521: CALL_OW 255
36525: PPUSH
36526: LD_INT 0
36528: PPUSH
36529: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36533: LD_ADDR_EXP 149
36537: PUSH
36538: LD_EXP 149
36542: PPUSH
36543: LD_VAR 0 5
36547: PUSH
36548: LD_EXP 149
36552: PUSH
36553: LD_VAR 0 5
36557: ARRAY
36558: PUSH
36559: LD_INT 1
36561: PLUS
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PPUSH
36567: LD_VAR 0 2
36571: PUSH
36572: LD_VAR 0 3
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PPUSH
36581: CALL 42793 0 3
36585: ST_TO_ADDR
// result := true ;
36586: LD_ADDR_VAR 0 4
36590: PUSH
36591: LD_INT 1
36593: ST_TO_ADDR
// end ;
36594: LD_VAR 0 4
36598: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36599: LD_INT 0
36601: PPUSH
36602: PPUSH
36603: PPUSH
// if not unit in minersList then
36604: LD_VAR 0 1
36608: PUSH
36609: LD_EXP 148
36613: IN
36614: NOT
36615: IFFALSE 36619
// exit ;
36617: GO 37011
// index := GetElementIndex ( minersList , unit ) ;
36619: LD_ADDR_VAR 0 6
36623: PUSH
36624: LD_EXP 148
36628: PPUSH
36629: LD_VAR 0 1
36633: PPUSH
36634: CALL 42578 0 2
36638: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36639: LD_ADDR_VAR 0 5
36643: PUSH
36644: DOUBLE
36645: LD_EXP 149
36649: PUSH
36650: LD_VAR 0 6
36654: ARRAY
36655: INC
36656: ST_TO_ADDR
36657: LD_INT 1
36659: PUSH
36660: FOR_DOWNTO
36661: IFFALSE 36822
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36663: LD_EXP 149
36667: PUSH
36668: LD_VAR 0 6
36672: ARRAY
36673: PUSH
36674: LD_VAR 0 5
36678: ARRAY
36679: PUSH
36680: LD_INT 1
36682: ARRAY
36683: PUSH
36684: LD_VAR 0 2
36688: EQUAL
36689: PUSH
36690: LD_EXP 149
36694: PUSH
36695: LD_VAR 0 6
36699: ARRAY
36700: PUSH
36701: LD_VAR 0 5
36705: ARRAY
36706: PUSH
36707: LD_INT 2
36709: ARRAY
36710: PUSH
36711: LD_VAR 0 3
36715: EQUAL
36716: AND
36717: IFFALSE 36820
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36719: LD_EXP 149
36723: PUSH
36724: LD_VAR 0 6
36728: ARRAY
36729: PUSH
36730: LD_VAR 0 5
36734: ARRAY
36735: PUSH
36736: LD_INT 1
36738: ARRAY
36739: PPUSH
36740: LD_EXP 149
36744: PUSH
36745: LD_VAR 0 6
36749: ARRAY
36750: PUSH
36751: LD_VAR 0 5
36755: ARRAY
36756: PUSH
36757: LD_INT 2
36759: ARRAY
36760: PPUSH
36761: LD_VAR 0 1
36765: PPUSH
36766: CALL_OW 255
36770: PPUSH
36771: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36775: LD_ADDR_EXP 149
36779: PUSH
36780: LD_EXP 149
36784: PPUSH
36785: LD_VAR 0 6
36789: PPUSH
36790: LD_EXP 149
36794: PUSH
36795: LD_VAR 0 6
36799: ARRAY
36800: PPUSH
36801: LD_VAR 0 5
36805: PPUSH
36806: CALL_OW 3
36810: PPUSH
36811: CALL_OW 1
36815: ST_TO_ADDR
// exit ;
36816: POP
36817: POP
36818: GO 37011
// end ; end ;
36820: GO 36660
36822: POP
36823: POP
// for i := minerMinesList [ index ] downto 1 do
36824: LD_ADDR_VAR 0 5
36828: PUSH
36829: DOUBLE
36830: LD_EXP 149
36834: PUSH
36835: LD_VAR 0 6
36839: ARRAY
36840: INC
36841: ST_TO_ADDR
36842: LD_INT 1
36844: PUSH
36845: FOR_DOWNTO
36846: IFFALSE 37009
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36848: LD_EXP 149
36852: PUSH
36853: LD_VAR 0 6
36857: ARRAY
36858: PUSH
36859: LD_VAR 0 5
36863: ARRAY
36864: PUSH
36865: LD_INT 1
36867: ARRAY
36868: PPUSH
36869: LD_EXP 149
36873: PUSH
36874: LD_VAR 0 6
36878: ARRAY
36879: PUSH
36880: LD_VAR 0 5
36884: ARRAY
36885: PUSH
36886: LD_INT 2
36888: ARRAY
36889: PPUSH
36890: LD_VAR 0 2
36894: PPUSH
36895: LD_VAR 0 3
36899: PPUSH
36900: CALL_OW 298
36904: PUSH
36905: LD_INT 6
36907: LESS
36908: IFFALSE 37007
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36910: LD_EXP 149
36914: PUSH
36915: LD_VAR 0 6
36919: ARRAY
36920: PUSH
36921: LD_VAR 0 5
36925: ARRAY
36926: PUSH
36927: LD_INT 1
36929: ARRAY
36930: PPUSH
36931: LD_EXP 149
36935: PUSH
36936: LD_VAR 0 6
36940: ARRAY
36941: PUSH
36942: LD_VAR 0 5
36946: ARRAY
36947: PUSH
36948: LD_INT 2
36950: ARRAY
36951: PPUSH
36952: LD_VAR 0 1
36956: PPUSH
36957: CALL_OW 255
36961: PPUSH
36962: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36966: LD_ADDR_EXP 149
36970: PUSH
36971: LD_EXP 149
36975: PPUSH
36976: LD_VAR 0 6
36980: PPUSH
36981: LD_EXP 149
36985: PUSH
36986: LD_VAR 0 6
36990: ARRAY
36991: PPUSH
36992: LD_VAR 0 5
36996: PPUSH
36997: CALL_OW 3
37001: PPUSH
37002: CALL_OW 1
37006: ST_TO_ADDR
// end ; end ;
37007: GO 36845
37009: POP
37010: POP
// end ;
37011: LD_VAR 0 4
37015: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37016: LD_INT 0
37018: PPUSH
37019: PPUSH
37020: PPUSH
37021: PPUSH
37022: PPUSH
37023: PPUSH
37024: PPUSH
37025: PPUSH
37026: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37027: LD_VAR 0 1
37031: PPUSH
37032: CALL_OW 264
37036: PUSH
37037: LD_EXP 69
37041: EQUAL
37042: NOT
37043: PUSH
37044: LD_VAR 0 1
37048: PUSH
37049: LD_EXP 148
37053: IN
37054: NOT
37055: OR
37056: IFFALSE 37060
// exit ;
37058: GO 37382
// index := GetElementIndex ( minersList , unit ) ;
37060: LD_ADDR_VAR 0 6
37064: PUSH
37065: LD_EXP 148
37069: PPUSH
37070: LD_VAR 0 1
37074: PPUSH
37075: CALL 42578 0 2
37079: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37080: LD_ADDR_VAR 0 8
37084: PUSH
37085: LD_EXP 150
37089: PUSH
37090: LD_EXP 149
37094: PUSH
37095: LD_VAR 0 6
37099: ARRAY
37100: MINUS
37101: ST_TO_ADDR
// if not minesFreeAmount then
37102: LD_VAR 0 8
37106: NOT
37107: IFFALSE 37111
// exit ;
37109: GO 37382
// tmp := [ ] ;
37111: LD_ADDR_VAR 0 7
37115: PUSH
37116: EMPTY
37117: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37118: LD_ADDR_VAR 0 5
37122: PUSH
37123: DOUBLE
37124: LD_INT 1
37126: DEC
37127: ST_TO_ADDR
37128: LD_VAR 0 8
37132: PUSH
37133: FOR_TO
37134: IFFALSE 37329
// begin _d := rand ( 0 , 5 ) ;
37136: LD_ADDR_VAR 0 11
37140: PUSH
37141: LD_INT 0
37143: PPUSH
37144: LD_INT 5
37146: PPUSH
37147: CALL_OW 12
37151: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37152: LD_ADDR_VAR 0 12
37156: PUSH
37157: LD_INT 2
37159: PPUSH
37160: LD_INT 6
37162: PPUSH
37163: CALL_OW 12
37167: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37168: LD_ADDR_VAR 0 9
37172: PUSH
37173: LD_VAR 0 2
37177: PPUSH
37178: LD_VAR 0 11
37182: PPUSH
37183: LD_VAR 0 12
37187: PPUSH
37188: CALL_OW 272
37192: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37193: LD_ADDR_VAR 0 10
37197: PUSH
37198: LD_VAR 0 3
37202: PPUSH
37203: LD_VAR 0 11
37207: PPUSH
37208: LD_VAR 0 12
37212: PPUSH
37213: CALL_OW 273
37217: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37218: LD_VAR 0 9
37222: PPUSH
37223: LD_VAR 0 10
37227: PPUSH
37228: CALL_OW 488
37232: PUSH
37233: LD_VAR 0 9
37237: PUSH
37238: LD_VAR 0 10
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_VAR 0 7
37251: IN
37252: NOT
37253: AND
37254: PUSH
37255: LD_VAR 0 9
37259: PPUSH
37260: LD_VAR 0 10
37264: PPUSH
37265: CALL_OW 458
37269: NOT
37270: AND
37271: IFFALSE 37313
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37273: LD_ADDR_VAR 0 7
37277: PUSH
37278: LD_VAR 0 7
37282: PPUSH
37283: LD_VAR 0 7
37287: PUSH
37288: LD_INT 1
37290: PLUS
37291: PPUSH
37292: LD_VAR 0 9
37296: PUSH
37297: LD_VAR 0 10
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PPUSH
37306: CALL_OW 1
37310: ST_TO_ADDR
37311: GO 37327
// i := i - 1 ;
37313: LD_ADDR_VAR 0 5
37317: PUSH
37318: LD_VAR 0 5
37322: PUSH
37323: LD_INT 1
37325: MINUS
37326: ST_TO_ADDR
// end ;
37327: GO 37133
37329: POP
37330: POP
// for i in tmp do
37331: LD_ADDR_VAR 0 5
37335: PUSH
37336: LD_VAR 0 7
37340: PUSH
37341: FOR_IN
37342: IFFALSE 37380
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37344: LD_VAR 0 1
37348: PPUSH
37349: LD_VAR 0 5
37353: PUSH
37354: LD_INT 1
37356: ARRAY
37357: PPUSH
37358: LD_VAR 0 5
37362: PUSH
37363: LD_INT 2
37365: ARRAY
37366: PPUSH
37367: CALL 36322 0 3
37371: NOT
37372: IFFALSE 37378
// exit ;
37374: POP
37375: POP
37376: GO 37382
37378: GO 37341
37380: POP
37381: POP
// end ;
37382: LD_VAR 0 4
37386: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37387: LD_INT 0
37389: PPUSH
37390: PPUSH
37391: PPUSH
37392: PPUSH
37393: PPUSH
37394: PPUSH
37395: PPUSH
// if not GetClass ( unit ) = class_sniper then
37396: LD_VAR 0 1
37400: PPUSH
37401: CALL_OW 257
37405: PUSH
37406: LD_INT 5
37408: EQUAL
37409: NOT
37410: IFFALSE 37414
// exit ;
37412: GO 37802
// dist := 8 ;
37414: LD_ADDR_VAR 0 5
37418: PUSH
37419: LD_INT 8
37421: ST_TO_ADDR
// viewRange := 12 ;
37422: LD_ADDR_VAR 0 7
37426: PUSH
37427: LD_INT 12
37429: ST_TO_ADDR
// side := GetSide ( unit ) ;
37430: LD_ADDR_VAR 0 6
37434: PUSH
37435: LD_VAR 0 1
37439: PPUSH
37440: CALL_OW 255
37444: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37445: LD_INT 61
37447: PPUSH
37448: LD_VAR 0 6
37452: PPUSH
37453: CALL_OW 321
37457: PUSH
37458: LD_INT 2
37460: EQUAL
37461: IFFALSE 37471
// viewRange := 16 ;
37463: LD_ADDR_VAR 0 7
37467: PUSH
37468: LD_INT 16
37470: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37471: LD_VAR 0 1
37475: PPUSH
37476: LD_VAR 0 2
37480: PPUSH
37481: LD_VAR 0 3
37485: PPUSH
37486: CALL_OW 297
37490: PUSH
37491: LD_VAR 0 5
37495: GREATER
37496: IFFALSE 37575
// begin ComMoveXY ( unit , x , y ) ;
37498: LD_VAR 0 1
37502: PPUSH
37503: LD_VAR 0 2
37507: PPUSH
37508: LD_VAR 0 3
37512: PPUSH
37513: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37517: LD_INT 35
37519: PPUSH
37520: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37524: LD_VAR 0 1
37528: PPUSH
37529: LD_VAR 0 2
37533: PPUSH
37534: LD_VAR 0 3
37538: PPUSH
37539: CALL 73297 0 3
37543: NOT
37544: IFFALSE 37548
// exit ;
37546: GO 37802
// until GetDistUnitXY ( unit , x , y ) < dist ;
37548: LD_VAR 0 1
37552: PPUSH
37553: LD_VAR 0 2
37557: PPUSH
37558: LD_VAR 0 3
37562: PPUSH
37563: CALL_OW 297
37567: PUSH
37568: LD_VAR 0 5
37572: LESS
37573: IFFALSE 37517
// end ; ComTurnXY ( unit , x , y ) ;
37575: LD_VAR 0 1
37579: PPUSH
37580: LD_VAR 0 2
37584: PPUSH
37585: LD_VAR 0 3
37589: PPUSH
37590: CALL_OW 118
// wait ( 5 ) ;
37594: LD_INT 5
37596: PPUSH
37597: CALL_OW 67
// _d := GetDir ( unit ) ;
37601: LD_ADDR_VAR 0 10
37605: PUSH
37606: LD_VAR 0 1
37610: PPUSH
37611: CALL_OW 254
37615: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37616: LD_ADDR_VAR 0 8
37620: PUSH
37621: LD_VAR 0 1
37625: PPUSH
37626: CALL_OW 250
37630: PPUSH
37631: LD_VAR 0 10
37635: PPUSH
37636: LD_VAR 0 5
37640: PPUSH
37641: CALL_OW 272
37645: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37646: LD_ADDR_VAR 0 9
37650: PUSH
37651: LD_VAR 0 1
37655: PPUSH
37656: CALL_OW 251
37660: PPUSH
37661: LD_VAR 0 10
37665: PPUSH
37666: LD_VAR 0 5
37670: PPUSH
37671: CALL_OW 273
37675: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37676: LD_VAR 0 8
37680: PPUSH
37681: LD_VAR 0 9
37685: PPUSH
37686: CALL_OW 488
37690: NOT
37691: IFFALSE 37695
// exit ;
37693: GO 37802
// ComAnimCustom ( unit , 1 ) ;
37695: LD_VAR 0 1
37699: PPUSH
37700: LD_INT 1
37702: PPUSH
37703: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37707: LD_VAR 0 8
37711: PPUSH
37712: LD_VAR 0 9
37716: PPUSH
37717: LD_VAR 0 6
37721: PPUSH
37722: LD_VAR 0 7
37726: PPUSH
37727: CALL_OW 330
// repeat wait ( 1 ) ;
37731: LD_INT 1
37733: PPUSH
37734: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37738: LD_VAR 0 1
37742: PPUSH
37743: CALL_OW 316
37747: PUSH
37748: LD_VAR 0 1
37752: PPUSH
37753: CALL_OW 314
37757: OR
37758: PUSH
37759: LD_VAR 0 1
37763: PPUSH
37764: CALL_OW 302
37768: NOT
37769: OR
37770: PUSH
37771: LD_VAR 0 1
37775: PPUSH
37776: CALL_OW 301
37780: OR
37781: IFFALSE 37731
// RemoveSeeing ( _x , _y , side ) ;
37783: LD_VAR 0 8
37787: PPUSH
37788: LD_VAR 0 9
37792: PPUSH
37793: LD_VAR 0 6
37797: PPUSH
37798: CALL_OW 331
// end ; end_of_file
37802: LD_VAR 0 4
37806: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37807: LD_INT 0
37809: PPUSH
37810: PPUSH
// if exist_mode then
37811: LD_VAR 0 2
37815: IFFALSE 37840
// unit := CreateCharacter ( prefix & ident ) else
37817: LD_ADDR_VAR 0 5
37821: PUSH
37822: LD_VAR 0 3
37826: PUSH
37827: LD_VAR 0 1
37831: STR
37832: PPUSH
37833: CALL_OW 34
37837: ST_TO_ADDR
37838: GO 37855
// unit := NewCharacter ( ident ) ;
37840: LD_ADDR_VAR 0 5
37844: PUSH
37845: LD_VAR 0 1
37849: PPUSH
37850: CALL_OW 25
37854: ST_TO_ADDR
// result := unit ;
37855: LD_ADDR_VAR 0 4
37859: PUSH
37860: LD_VAR 0 5
37864: ST_TO_ADDR
// end ;
37865: LD_VAR 0 4
37869: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37870: LD_INT 0
37872: PPUSH
37873: PPUSH
// if not side or not nation then
37874: LD_VAR 0 1
37878: NOT
37879: PUSH
37880: LD_VAR 0 2
37884: NOT
37885: OR
37886: IFFALSE 37890
// exit ;
37888: GO 38658
// case nation of nation_american :
37890: LD_VAR 0 2
37894: PUSH
37895: LD_INT 1
37897: DOUBLE
37898: EQUAL
37899: IFTRUE 37903
37901: GO 38117
37903: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37904: LD_ADDR_VAR 0 4
37908: PUSH
37909: LD_INT 35
37911: PUSH
37912: LD_INT 45
37914: PUSH
37915: LD_INT 46
37917: PUSH
37918: LD_INT 47
37920: PUSH
37921: LD_INT 82
37923: PUSH
37924: LD_INT 83
37926: PUSH
37927: LD_INT 84
37929: PUSH
37930: LD_INT 85
37932: PUSH
37933: LD_INT 86
37935: PUSH
37936: LD_INT 1
37938: PUSH
37939: LD_INT 2
37941: PUSH
37942: LD_INT 6
37944: PUSH
37945: LD_INT 15
37947: PUSH
37948: LD_INT 16
37950: PUSH
37951: LD_INT 7
37953: PUSH
37954: LD_INT 12
37956: PUSH
37957: LD_INT 13
37959: PUSH
37960: LD_INT 10
37962: PUSH
37963: LD_INT 14
37965: PUSH
37966: LD_INT 20
37968: PUSH
37969: LD_INT 21
37971: PUSH
37972: LD_INT 22
37974: PUSH
37975: LD_INT 25
37977: PUSH
37978: LD_INT 32
37980: PUSH
37981: LD_INT 27
37983: PUSH
37984: LD_INT 36
37986: PUSH
37987: LD_INT 69
37989: PUSH
37990: LD_INT 39
37992: PUSH
37993: LD_INT 34
37995: PUSH
37996: LD_INT 40
37998: PUSH
37999: LD_INT 48
38001: PUSH
38002: LD_INT 49
38004: PUSH
38005: LD_INT 50
38007: PUSH
38008: LD_INT 51
38010: PUSH
38011: LD_INT 52
38013: PUSH
38014: LD_INT 53
38016: PUSH
38017: LD_INT 54
38019: PUSH
38020: LD_INT 55
38022: PUSH
38023: LD_INT 56
38025: PUSH
38026: LD_INT 57
38028: PUSH
38029: LD_INT 58
38031: PUSH
38032: LD_INT 59
38034: PUSH
38035: LD_INT 60
38037: PUSH
38038: LD_INT 61
38040: PUSH
38041: LD_INT 62
38043: PUSH
38044: LD_INT 80
38046: PUSH
38047: LD_INT 82
38049: PUSH
38050: LD_INT 83
38052: PUSH
38053: LD_INT 84
38055: PUSH
38056: LD_INT 85
38058: PUSH
38059: LD_INT 86
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: ST_TO_ADDR
38115: GO 38582
38117: LD_INT 2
38119: DOUBLE
38120: EQUAL
38121: IFTRUE 38125
38123: GO 38351
38125: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38126: LD_ADDR_VAR 0 4
38130: PUSH
38131: LD_INT 35
38133: PUSH
38134: LD_INT 45
38136: PUSH
38137: LD_INT 46
38139: PUSH
38140: LD_INT 47
38142: PUSH
38143: LD_INT 82
38145: PUSH
38146: LD_INT 83
38148: PUSH
38149: LD_INT 84
38151: PUSH
38152: LD_INT 85
38154: PUSH
38155: LD_INT 87
38157: PUSH
38158: LD_INT 70
38160: PUSH
38161: LD_INT 1
38163: PUSH
38164: LD_INT 11
38166: PUSH
38167: LD_INT 3
38169: PUSH
38170: LD_INT 4
38172: PUSH
38173: LD_INT 5
38175: PUSH
38176: LD_INT 6
38178: PUSH
38179: LD_INT 15
38181: PUSH
38182: LD_INT 18
38184: PUSH
38185: LD_INT 7
38187: PUSH
38188: LD_INT 17
38190: PUSH
38191: LD_INT 8
38193: PUSH
38194: LD_INT 20
38196: PUSH
38197: LD_INT 21
38199: PUSH
38200: LD_INT 22
38202: PUSH
38203: LD_INT 72
38205: PUSH
38206: LD_INT 26
38208: PUSH
38209: LD_INT 69
38211: PUSH
38212: LD_INT 39
38214: PUSH
38215: LD_INT 40
38217: PUSH
38218: LD_INT 41
38220: PUSH
38221: LD_INT 42
38223: PUSH
38224: LD_INT 43
38226: PUSH
38227: LD_INT 48
38229: PUSH
38230: LD_INT 49
38232: PUSH
38233: LD_INT 50
38235: PUSH
38236: LD_INT 51
38238: PUSH
38239: LD_INT 52
38241: PUSH
38242: LD_INT 53
38244: PUSH
38245: LD_INT 54
38247: PUSH
38248: LD_INT 55
38250: PUSH
38251: LD_INT 56
38253: PUSH
38254: LD_INT 60
38256: PUSH
38257: LD_INT 61
38259: PUSH
38260: LD_INT 62
38262: PUSH
38263: LD_INT 66
38265: PUSH
38266: LD_INT 67
38268: PUSH
38269: LD_INT 68
38271: PUSH
38272: LD_INT 81
38274: PUSH
38275: LD_INT 82
38277: PUSH
38278: LD_INT 83
38280: PUSH
38281: LD_INT 84
38283: PUSH
38284: LD_INT 85
38286: PUSH
38287: LD_INT 87
38289: PUSH
38290: LD_INT 88
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: ST_TO_ADDR
38349: GO 38582
38351: LD_INT 3
38353: DOUBLE
38354: EQUAL
38355: IFTRUE 38359
38357: GO 38581
38359: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38360: LD_ADDR_VAR 0 4
38364: PUSH
38365: LD_INT 46
38367: PUSH
38368: LD_INT 47
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: LD_INT 2
38376: PUSH
38377: LD_INT 82
38379: PUSH
38380: LD_INT 83
38382: PUSH
38383: LD_INT 84
38385: PUSH
38386: LD_INT 85
38388: PUSH
38389: LD_INT 86
38391: PUSH
38392: LD_INT 11
38394: PUSH
38395: LD_INT 9
38397: PUSH
38398: LD_INT 20
38400: PUSH
38401: LD_INT 19
38403: PUSH
38404: LD_INT 21
38406: PUSH
38407: LD_INT 24
38409: PUSH
38410: LD_INT 22
38412: PUSH
38413: LD_INT 25
38415: PUSH
38416: LD_INT 28
38418: PUSH
38419: LD_INT 29
38421: PUSH
38422: LD_INT 30
38424: PUSH
38425: LD_INT 31
38427: PUSH
38428: LD_INT 37
38430: PUSH
38431: LD_INT 38
38433: PUSH
38434: LD_INT 32
38436: PUSH
38437: LD_INT 27
38439: PUSH
38440: LD_INT 33
38442: PUSH
38443: LD_INT 69
38445: PUSH
38446: LD_INT 39
38448: PUSH
38449: LD_INT 34
38451: PUSH
38452: LD_INT 40
38454: PUSH
38455: LD_INT 71
38457: PUSH
38458: LD_INT 23
38460: PUSH
38461: LD_INT 44
38463: PUSH
38464: LD_INT 48
38466: PUSH
38467: LD_INT 49
38469: PUSH
38470: LD_INT 50
38472: PUSH
38473: LD_INT 51
38475: PUSH
38476: LD_INT 52
38478: PUSH
38479: LD_INT 53
38481: PUSH
38482: LD_INT 54
38484: PUSH
38485: LD_INT 55
38487: PUSH
38488: LD_INT 56
38490: PUSH
38491: LD_INT 57
38493: PUSH
38494: LD_INT 58
38496: PUSH
38497: LD_INT 59
38499: PUSH
38500: LD_INT 63
38502: PUSH
38503: LD_INT 64
38505: PUSH
38506: LD_INT 65
38508: PUSH
38509: LD_INT 82
38511: PUSH
38512: LD_INT 83
38514: PUSH
38515: LD_INT 84
38517: PUSH
38518: LD_INT 85
38520: PUSH
38521: LD_INT 86
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: ST_TO_ADDR
38579: GO 38582
38581: POP
// if state > - 1 and state < 3 then
38582: LD_VAR 0 3
38586: PUSH
38587: LD_INT 1
38589: NEG
38590: GREATER
38591: PUSH
38592: LD_VAR 0 3
38596: PUSH
38597: LD_INT 3
38599: LESS
38600: AND
38601: IFFALSE 38658
// for i in result do
38603: LD_ADDR_VAR 0 5
38607: PUSH
38608: LD_VAR 0 4
38612: PUSH
38613: FOR_IN
38614: IFFALSE 38656
// if GetTech ( i , side ) <> state then
38616: LD_VAR 0 5
38620: PPUSH
38621: LD_VAR 0 1
38625: PPUSH
38626: CALL_OW 321
38630: PUSH
38631: LD_VAR 0 3
38635: NONEQUAL
38636: IFFALSE 38654
// result := result diff i ;
38638: LD_ADDR_VAR 0 4
38642: PUSH
38643: LD_VAR 0 4
38647: PUSH
38648: LD_VAR 0 5
38652: DIFF
38653: ST_TO_ADDR
38654: GO 38613
38656: POP
38657: POP
// end ;
38658: LD_VAR 0 4
38662: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38663: LD_INT 0
38665: PPUSH
38666: PPUSH
38667: PPUSH
// result := true ;
38668: LD_ADDR_VAR 0 3
38672: PUSH
38673: LD_INT 1
38675: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38676: LD_ADDR_VAR 0 5
38680: PUSH
38681: LD_VAR 0 2
38685: PPUSH
38686: CALL_OW 480
38690: ST_TO_ADDR
// if not tmp then
38691: LD_VAR 0 5
38695: NOT
38696: IFFALSE 38700
// exit ;
38698: GO 38749
// for i in tmp do
38700: LD_ADDR_VAR 0 4
38704: PUSH
38705: LD_VAR 0 5
38709: PUSH
38710: FOR_IN
38711: IFFALSE 38747
// if GetTech ( i , side ) <> state_researched then
38713: LD_VAR 0 4
38717: PPUSH
38718: LD_VAR 0 1
38722: PPUSH
38723: CALL_OW 321
38727: PUSH
38728: LD_INT 2
38730: NONEQUAL
38731: IFFALSE 38745
// begin result := false ;
38733: LD_ADDR_VAR 0 3
38737: PUSH
38738: LD_INT 0
38740: ST_TO_ADDR
// exit ;
38741: POP
38742: POP
38743: GO 38749
// end ;
38745: GO 38710
38747: POP
38748: POP
// end ;
38749: LD_VAR 0 3
38753: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38754: LD_INT 0
38756: PPUSH
38757: PPUSH
38758: PPUSH
38759: PPUSH
38760: PPUSH
38761: PPUSH
38762: PPUSH
38763: PPUSH
38764: PPUSH
38765: PPUSH
38766: PPUSH
38767: PPUSH
38768: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38769: LD_VAR 0 1
38773: NOT
38774: PUSH
38775: LD_VAR 0 1
38779: PPUSH
38780: CALL_OW 257
38784: PUSH
38785: LD_INT 9
38787: NONEQUAL
38788: OR
38789: IFFALSE 38793
// exit ;
38791: GO 39366
// side := GetSide ( unit ) ;
38793: LD_ADDR_VAR 0 9
38797: PUSH
38798: LD_VAR 0 1
38802: PPUSH
38803: CALL_OW 255
38807: ST_TO_ADDR
// tech_space := tech_spacanom ;
38808: LD_ADDR_VAR 0 12
38812: PUSH
38813: LD_INT 29
38815: ST_TO_ADDR
// tech_time := tech_taurad ;
38816: LD_ADDR_VAR 0 13
38820: PUSH
38821: LD_INT 28
38823: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38824: LD_ADDR_VAR 0 11
38828: PUSH
38829: LD_VAR 0 1
38833: PPUSH
38834: CALL_OW 310
38838: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38839: LD_VAR 0 11
38843: PPUSH
38844: CALL_OW 247
38848: PUSH
38849: LD_INT 2
38851: EQUAL
38852: IFFALSE 38856
// exit ;
38854: GO 39366
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38856: LD_ADDR_VAR 0 8
38860: PUSH
38861: LD_INT 81
38863: PUSH
38864: LD_VAR 0 9
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 3
38875: PUSH
38876: LD_INT 21
38878: PUSH
38879: LD_INT 3
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PPUSH
38894: CALL_OW 69
38898: ST_TO_ADDR
// if not tmp then
38899: LD_VAR 0 8
38903: NOT
38904: IFFALSE 38908
// exit ;
38906: GO 39366
// if in_unit then
38908: LD_VAR 0 11
38912: IFFALSE 38936
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38914: LD_ADDR_VAR 0 10
38918: PUSH
38919: LD_VAR 0 8
38923: PPUSH
38924: LD_VAR 0 11
38928: PPUSH
38929: CALL_OW 74
38933: ST_TO_ADDR
38934: GO 38956
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38936: LD_ADDR_VAR 0 10
38940: PUSH
38941: LD_VAR 0 8
38945: PPUSH
38946: LD_VAR 0 1
38950: PPUSH
38951: CALL_OW 74
38955: ST_TO_ADDR
// if not enemy then
38956: LD_VAR 0 10
38960: NOT
38961: IFFALSE 38965
// exit ;
38963: GO 39366
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38965: LD_VAR 0 11
38969: PUSH
38970: LD_VAR 0 11
38974: PPUSH
38975: LD_VAR 0 10
38979: PPUSH
38980: CALL_OW 296
38984: PUSH
38985: LD_INT 13
38987: GREATER
38988: AND
38989: PUSH
38990: LD_VAR 0 1
38994: PPUSH
38995: LD_VAR 0 10
38999: PPUSH
39000: CALL_OW 296
39004: PUSH
39005: LD_INT 12
39007: GREATER
39008: OR
39009: IFFALSE 39013
// exit ;
39011: GO 39366
// missile := [ 1 ] ;
39013: LD_ADDR_VAR 0 14
39017: PUSH
39018: LD_INT 1
39020: PUSH
39021: EMPTY
39022: LIST
39023: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39024: LD_VAR 0 9
39028: PPUSH
39029: LD_VAR 0 12
39033: PPUSH
39034: CALL_OW 325
39038: IFFALSE 39067
// missile := Replace ( missile , missile + 1 , 2 ) ;
39040: LD_ADDR_VAR 0 14
39044: PUSH
39045: LD_VAR 0 14
39049: PPUSH
39050: LD_VAR 0 14
39054: PUSH
39055: LD_INT 1
39057: PLUS
39058: PPUSH
39059: LD_INT 2
39061: PPUSH
39062: CALL_OW 1
39066: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39067: LD_VAR 0 9
39071: PPUSH
39072: LD_VAR 0 13
39076: PPUSH
39077: CALL_OW 325
39081: PUSH
39082: LD_VAR 0 10
39086: PPUSH
39087: CALL_OW 255
39091: PPUSH
39092: LD_VAR 0 13
39096: PPUSH
39097: CALL_OW 325
39101: NOT
39102: AND
39103: IFFALSE 39132
// missile := Replace ( missile , missile + 1 , 3 ) ;
39105: LD_ADDR_VAR 0 14
39109: PUSH
39110: LD_VAR 0 14
39114: PPUSH
39115: LD_VAR 0 14
39119: PUSH
39120: LD_INT 1
39122: PLUS
39123: PPUSH
39124: LD_INT 3
39126: PPUSH
39127: CALL_OW 1
39131: ST_TO_ADDR
// if missile < 2 then
39132: LD_VAR 0 14
39136: PUSH
39137: LD_INT 2
39139: LESS
39140: IFFALSE 39144
// exit ;
39142: GO 39366
// x := GetX ( enemy ) ;
39144: LD_ADDR_VAR 0 4
39148: PUSH
39149: LD_VAR 0 10
39153: PPUSH
39154: CALL_OW 250
39158: ST_TO_ADDR
// y := GetY ( enemy ) ;
39159: LD_ADDR_VAR 0 5
39163: PUSH
39164: LD_VAR 0 10
39168: PPUSH
39169: CALL_OW 251
39173: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39174: LD_ADDR_VAR 0 6
39178: PUSH
39179: LD_VAR 0 4
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PPUSH
39188: LD_INT 1
39190: PPUSH
39191: CALL_OW 12
39195: PLUS
39196: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39197: LD_ADDR_VAR 0 7
39201: PUSH
39202: LD_VAR 0 5
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PPUSH
39211: LD_INT 1
39213: PPUSH
39214: CALL_OW 12
39218: PLUS
39219: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39220: LD_VAR 0 6
39224: PPUSH
39225: LD_VAR 0 7
39229: PPUSH
39230: CALL_OW 488
39234: NOT
39235: IFFALSE 39257
// begin _x := x ;
39237: LD_ADDR_VAR 0 6
39241: PUSH
39242: LD_VAR 0 4
39246: ST_TO_ADDR
// _y := y ;
39247: LD_ADDR_VAR 0 7
39251: PUSH
39252: LD_VAR 0 5
39256: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39257: LD_ADDR_VAR 0 3
39261: PUSH
39262: LD_INT 1
39264: PPUSH
39265: LD_VAR 0 14
39269: PPUSH
39270: CALL_OW 12
39274: ST_TO_ADDR
// case i of 1 :
39275: LD_VAR 0 3
39279: PUSH
39280: LD_INT 1
39282: DOUBLE
39283: EQUAL
39284: IFTRUE 39288
39286: GO 39305
39288: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39289: LD_VAR 0 1
39293: PPUSH
39294: LD_VAR 0 10
39298: PPUSH
39299: CALL_OW 115
39303: GO 39366
39305: LD_INT 2
39307: DOUBLE
39308: EQUAL
39309: IFTRUE 39313
39311: GO 39335
39313: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39314: LD_VAR 0 1
39318: PPUSH
39319: LD_VAR 0 6
39323: PPUSH
39324: LD_VAR 0 7
39328: PPUSH
39329: CALL_OW 153
39333: GO 39366
39335: LD_INT 3
39337: DOUBLE
39338: EQUAL
39339: IFTRUE 39343
39341: GO 39365
39343: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39344: LD_VAR 0 1
39348: PPUSH
39349: LD_VAR 0 6
39353: PPUSH
39354: LD_VAR 0 7
39358: PPUSH
39359: CALL_OW 154
39363: GO 39366
39365: POP
// end ;
39366: LD_VAR 0 2
39370: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39371: LD_INT 0
39373: PPUSH
39374: PPUSH
39375: PPUSH
39376: PPUSH
39377: PPUSH
39378: PPUSH
// if not unit or not building then
39379: LD_VAR 0 1
39383: NOT
39384: PUSH
39385: LD_VAR 0 2
39389: NOT
39390: OR
39391: IFFALSE 39395
// exit ;
39393: GO 39553
// x := GetX ( building ) ;
39395: LD_ADDR_VAR 0 5
39399: PUSH
39400: LD_VAR 0 2
39404: PPUSH
39405: CALL_OW 250
39409: ST_TO_ADDR
// y := GetY ( building ) ;
39410: LD_ADDR_VAR 0 6
39414: PUSH
39415: LD_VAR 0 2
39419: PPUSH
39420: CALL_OW 251
39424: ST_TO_ADDR
// for i = 0 to 5 do
39425: LD_ADDR_VAR 0 4
39429: PUSH
39430: DOUBLE
39431: LD_INT 0
39433: DEC
39434: ST_TO_ADDR
39435: LD_INT 5
39437: PUSH
39438: FOR_TO
39439: IFFALSE 39551
// begin _x := ShiftX ( x , i , 3 ) ;
39441: LD_ADDR_VAR 0 7
39445: PUSH
39446: LD_VAR 0 5
39450: PPUSH
39451: LD_VAR 0 4
39455: PPUSH
39456: LD_INT 3
39458: PPUSH
39459: CALL_OW 272
39463: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39464: LD_ADDR_VAR 0 8
39468: PUSH
39469: LD_VAR 0 6
39473: PPUSH
39474: LD_VAR 0 4
39478: PPUSH
39479: LD_INT 3
39481: PPUSH
39482: CALL_OW 273
39486: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39487: LD_VAR 0 7
39491: PPUSH
39492: LD_VAR 0 8
39496: PPUSH
39497: CALL_OW 488
39501: NOT
39502: IFFALSE 39506
// continue ;
39504: GO 39438
// if HexInfo ( _x , _y ) = 0 then
39506: LD_VAR 0 7
39510: PPUSH
39511: LD_VAR 0 8
39515: PPUSH
39516: CALL_OW 428
39520: PUSH
39521: LD_INT 0
39523: EQUAL
39524: IFFALSE 39549
// begin ComMoveXY ( unit , _x , _y ) ;
39526: LD_VAR 0 1
39530: PPUSH
39531: LD_VAR 0 7
39535: PPUSH
39536: LD_VAR 0 8
39540: PPUSH
39541: CALL_OW 111
// exit ;
39545: POP
39546: POP
39547: GO 39553
// end ; end ;
39549: GO 39438
39551: POP
39552: POP
// end ;
39553: LD_VAR 0 3
39557: RET
// export function ScanBase ( side , base_area ) ; begin
39558: LD_INT 0
39560: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39561: LD_ADDR_VAR 0 3
39565: PUSH
39566: LD_VAR 0 2
39570: PPUSH
39571: LD_INT 81
39573: PUSH
39574: LD_VAR 0 1
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PPUSH
39583: CALL_OW 70
39587: ST_TO_ADDR
// end ;
39588: LD_VAR 0 3
39592: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39593: LD_INT 0
39595: PPUSH
39596: PPUSH
39597: PPUSH
39598: PPUSH
// result := false ;
39599: LD_ADDR_VAR 0 2
39603: PUSH
39604: LD_INT 0
39606: ST_TO_ADDR
// side := GetSide ( unit ) ;
39607: LD_ADDR_VAR 0 3
39611: PUSH
39612: LD_VAR 0 1
39616: PPUSH
39617: CALL_OW 255
39621: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39622: LD_ADDR_VAR 0 4
39626: PUSH
39627: LD_VAR 0 1
39631: PPUSH
39632: CALL_OW 248
39636: ST_TO_ADDR
// case nat of 1 :
39637: LD_VAR 0 4
39641: PUSH
39642: LD_INT 1
39644: DOUBLE
39645: EQUAL
39646: IFTRUE 39650
39648: GO 39661
39650: POP
// tech := tech_lassight ; 2 :
39651: LD_ADDR_VAR 0 5
39655: PUSH
39656: LD_INT 12
39658: ST_TO_ADDR
39659: GO 39700
39661: LD_INT 2
39663: DOUBLE
39664: EQUAL
39665: IFTRUE 39669
39667: GO 39680
39669: POP
// tech := tech_mortar ; 3 :
39670: LD_ADDR_VAR 0 5
39674: PUSH
39675: LD_INT 41
39677: ST_TO_ADDR
39678: GO 39700
39680: LD_INT 3
39682: DOUBLE
39683: EQUAL
39684: IFTRUE 39688
39686: GO 39699
39688: POP
// tech := tech_bazooka ; end ;
39689: LD_ADDR_VAR 0 5
39693: PUSH
39694: LD_INT 44
39696: ST_TO_ADDR
39697: GO 39700
39699: POP
// if Researched ( side , tech ) then
39700: LD_VAR 0 3
39704: PPUSH
39705: LD_VAR 0 5
39709: PPUSH
39710: CALL_OW 325
39714: IFFALSE 39741
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39716: LD_ADDR_VAR 0 2
39720: PUSH
39721: LD_INT 5
39723: PUSH
39724: LD_INT 8
39726: PUSH
39727: LD_INT 9
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: LIST
39734: PUSH
39735: LD_VAR 0 4
39739: ARRAY
39740: ST_TO_ADDR
// end ;
39741: LD_VAR 0 2
39745: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39746: LD_INT 0
39748: PPUSH
39749: PPUSH
39750: PPUSH
// if not mines then
39751: LD_VAR 0 2
39755: NOT
39756: IFFALSE 39760
// exit ;
39758: GO 39904
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39760: LD_ADDR_VAR 0 5
39764: PUSH
39765: LD_INT 81
39767: PUSH
39768: LD_VAR 0 1
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 3
39779: PUSH
39780: LD_INT 21
39782: PUSH
39783: LD_INT 3
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PPUSH
39798: CALL_OW 69
39802: ST_TO_ADDR
// for i in mines do
39803: LD_ADDR_VAR 0 4
39807: PUSH
39808: LD_VAR 0 2
39812: PUSH
39813: FOR_IN
39814: IFFALSE 39902
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39816: LD_VAR 0 4
39820: PUSH
39821: LD_INT 1
39823: ARRAY
39824: PPUSH
39825: LD_VAR 0 4
39829: PUSH
39830: LD_INT 2
39832: ARRAY
39833: PPUSH
39834: CALL_OW 458
39838: NOT
39839: IFFALSE 39843
// continue ;
39841: GO 39813
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39843: LD_VAR 0 4
39847: PUSH
39848: LD_INT 1
39850: ARRAY
39851: PPUSH
39852: LD_VAR 0 4
39856: PUSH
39857: LD_INT 2
39859: ARRAY
39860: PPUSH
39861: CALL_OW 428
39865: PUSH
39866: LD_VAR 0 5
39870: IN
39871: IFFALSE 39900
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39873: LD_VAR 0 4
39877: PUSH
39878: LD_INT 1
39880: ARRAY
39881: PPUSH
39882: LD_VAR 0 4
39886: PUSH
39887: LD_INT 2
39889: ARRAY
39890: PPUSH
39891: LD_VAR 0 1
39895: PPUSH
39896: CALL_OW 456
// end ;
39900: GO 39813
39902: POP
39903: POP
// end ;
39904: LD_VAR 0 3
39908: RET
// export function Count ( array ) ; var i ; begin
39909: LD_INT 0
39911: PPUSH
39912: PPUSH
// result := 0 ;
39913: LD_ADDR_VAR 0 2
39917: PUSH
39918: LD_INT 0
39920: ST_TO_ADDR
// for i in array do
39921: LD_ADDR_VAR 0 3
39925: PUSH
39926: LD_VAR 0 1
39930: PUSH
39931: FOR_IN
39932: IFFALSE 39956
// if i then
39934: LD_VAR 0 3
39938: IFFALSE 39954
// result := result + 1 ;
39940: LD_ADDR_VAR 0 2
39944: PUSH
39945: LD_VAR 0 2
39949: PUSH
39950: LD_INT 1
39952: PLUS
39953: ST_TO_ADDR
39954: GO 39931
39956: POP
39957: POP
// end ;
39958: LD_VAR 0 2
39962: RET
// export function IsEmpty ( building ) ; begin
39963: LD_INT 0
39965: PPUSH
// if not building then
39966: LD_VAR 0 1
39970: NOT
39971: IFFALSE 39975
// exit ;
39973: GO 40018
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39975: LD_ADDR_VAR 0 2
39979: PUSH
39980: LD_VAR 0 1
39984: PUSH
39985: LD_INT 22
39987: PUSH
39988: LD_VAR 0 1
39992: PPUSH
39993: CALL_OW 255
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 58
40004: PUSH
40005: EMPTY
40006: LIST
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PPUSH
40012: CALL_OW 69
40016: IN
40017: ST_TO_ADDR
// end ;
40018: LD_VAR 0 2
40022: RET
// export function IsNotFull ( building ) ; begin
40023: LD_INT 0
40025: PPUSH
// if not building then
40026: LD_VAR 0 1
40030: NOT
40031: IFFALSE 40035
// exit ;
40033: GO 40054
// result := UnitsInside ( building ) < 6 ;
40035: LD_ADDR_VAR 0 2
40039: PUSH
40040: LD_VAR 0 1
40044: PPUSH
40045: CALL_OW 313
40049: PUSH
40050: LD_INT 6
40052: LESS
40053: ST_TO_ADDR
// end ;
40054: LD_VAR 0 2
40058: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40059: LD_INT 0
40061: PPUSH
40062: PPUSH
40063: PPUSH
40064: PPUSH
// tmp := [ ] ;
40065: LD_ADDR_VAR 0 3
40069: PUSH
40070: EMPTY
40071: ST_TO_ADDR
// list := [ ] ;
40072: LD_ADDR_VAR 0 5
40076: PUSH
40077: EMPTY
40078: ST_TO_ADDR
// for i = 16 to 25 do
40079: LD_ADDR_VAR 0 4
40083: PUSH
40084: DOUBLE
40085: LD_INT 16
40087: DEC
40088: ST_TO_ADDR
40089: LD_INT 25
40091: PUSH
40092: FOR_TO
40093: IFFALSE 40166
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40095: LD_ADDR_VAR 0 3
40099: PUSH
40100: LD_VAR 0 3
40104: PUSH
40105: LD_INT 22
40107: PUSH
40108: LD_VAR 0 1
40112: PPUSH
40113: CALL_OW 255
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 91
40124: PUSH
40125: LD_VAR 0 1
40129: PUSH
40130: LD_INT 6
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 30
40140: PUSH
40141: LD_VAR 0 4
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: LIST
40154: PUSH
40155: EMPTY
40156: LIST
40157: PPUSH
40158: CALL_OW 69
40162: ADD
40163: ST_TO_ADDR
40164: GO 40092
40166: POP
40167: POP
// for i = 1 to tmp do
40168: LD_ADDR_VAR 0 4
40172: PUSH
40173: DOUBLE
40174: LD_INT 1
40176: DEC
40177: ST_TO_ADDR
40178: LD_VAR 0 3
40182: PUSH
40183: FOR_TO
40184: IFFALSE 40272
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40186: LD_ADDR_VAR 0 5
40190: PUSH
40191: LD_VAR 0 5
40195: PUSH
40196: LD_VAR 0 3
40200: PUSH
40201: LD_VAR 0 4
40205: ARRAY
40206: PPUSH
40207: CALL_OW 266
40211: PUSH
40212: LD_VAR 0 3
40216: PUSH
40217: LD_VAR 0 4
40221: ARRAY
40222: PPUSH
40223: CALL_OW 250
40227: PUSH
40228: LD_VAR 0 3
40232: PUSH
40233: LD_VAR 0 4
40237: ARRAY
40238: PPUSH
40239: CALL_OW 251
40243: PUSH
40244: LD_VAR 0 3
40248: PUSH
40249: LD_VAR 0 4
40253: ARRAY
40254: PPUSH
40255: CALL_OW 254
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: PUSH
40266: EMPTY
40267: LIST
40268: ADD
40269: ST_TO_ADDR
40270: GO 40183
40272: POP
40273: POP
// result := list ;
40274: LD_ADDR_VAR 0 2
40278: PUSH
40279: LD_VAR 0 5
40283: ST_TO_ADDR
// end ;
40284: LD_VAR 0 2
40288: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40289: LD_INT 0
40291: PPUSH
40292: PPUSH
40293: PPUSH
40294: PPUSH
40295: PPUSH
40296: PPUSH
40297: PPUSH
// if not factory then
40298: LD_VAR 0 1
40302: NOT
40303: IFFALSE 40307
// exit ;
40305: GO 40900
// if control = control_apeman then
40307: LD_VAR 0 4
40311: PUSH
40312: LD_INT 5
40314: EQUAL
40315: IFFALSE 40424
// begin tmp := UnitsInside ( factory ) ;
40317: LD_ADDR_VAR 0 8
40321: PUSH
40322: LD_VAR 0 1
40326: PPUSH
40327: CALL_OW 313
40331: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40332: LD_VAR 0 8
40336: PPUSH
40337: LD_INT 25
40339: PUSH
40340: LD_INT 12
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PPUSH
40347: CALL_OW 72
40351: NOT
40352: IFFALSE 40362
// control := control_manual ;
40354: LD_ADDR_VAR 0 4
40358: PUSH
40359: LD_INT 1
40361: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40362: LD_ADDR_VAR 0 8
40366: PUSH
40367: LD_VAR 0 1
40371: PPUSH
40372: CALL 40059 0 1
40376: ST_TO_ADDR
// if tmp then
40377: LD_VAR 0 8
40381: IFFALSE 40424
// begin for i in tmp do
40383: LD_ADDR_VAR 0 7
40387: PUSH
40388: LD_VAR 0 8
40392: PUSH
40393: FOR_IN
40394: IFFALSE 40422
// if i [ 1 ] = b_ext_radio then
40396: LD_VAR 0 7
40400: PUSH
40401: LD_INT 1
40403: ARRAY
40404: PUSH
40405: LD_INT 22
40407: EQUAL
40408: IFFALSE 40420
// begin control := control_remote ;
40410: LD_ADDR_VAR 0 4
40414: PUSH
40415: LD_INT 2
40417: ST_TO_ADDR
// break ;
40418: GO 40422
// end ;
40420: GO 40393
40422: POP
40423: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40424: LD_VAR 0 1
40428: PPUSH
40429: LD_VAR 0 2
40433: PPUSH
40434: LD_VAR 0 3
40438: PPUSH
40439: LD_VAR 0 4
40443: PPUSH
40444: LD_VAR 0 5
40448: PPUSH
40449: CALL_OW 448
40453: IFFALSE 40488
// begin result := [ chassis , engine , control , weapon ] ;
40455: LD_ADDR_VAR 0 6
40459: PUSH
40460: LD_VAR 0 2
40464: PUSH
40465: LD_VAR 0 3
40469: PUSH
40470: LD_VAR 0 4
40474: PUSH
40475: LD_VAR 0 5
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: ST_TO_ADDR
// exit ;
40486: GO 40900
// end ; _chassis := AvailableChassisList ( factory ) ;
40488: LD_ADDR_VAR 0 9
40492: PUSH
40493: LD_VAR 0 1
40497: PPUSH
40498: CALL_OW 475
40502: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40503: LD_ADDR_VAR 0 11
40507: PUSH
40508: LD_VAR 0 1
40512: PPUSH
40513: CALL_OW 476
40517: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40518: LD_ADDR_VAR 0 12
40522: PUSH
40523: LD_VAR 0 1
40527: PPUSH
40528: CALL_OW 477
40532: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40533: LD_ADDR_VAR 0 10
40537: PUSH
40538: LD_VAR 0 1
40542: PPUSH
40543: CALL_OW 478
40547: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40548: LD_VAR 0 9
40552: NOT
40553: PUSH
40554: LD_VAR 0 11
40558: NOT
40559: OR
40560: PUSH
40561: LD_VAR 0 12
40565: NOT
40566: OR
40567: PUSH
40568: LD_VAR 0 10
40572: NOT
40573: OR
40574: IFFALSE 40609
// begin result := [ chassis , engine , control , weapon ] ;
40576: LD_ADDR_VAR 0 6
40580: PUSH
40581: LD_VAR 0 2
40585: PUSH
40586: LD_VAR 0 3
40590: PUSH
40591: LD_VAR 0 4
40595: PUSH
40596: LD_VAR 0 5
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: ST_TO_ADDR
// exit ;
40607: GO 40900
// end ; if not chassis in _chassis then
40609: LD_VAR 0 2
40613: PUSH
40614: LD_VAR 0 9
40618: IN
40619: NOT
40620: IFFALSE 40646
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40622: LD_ADDR_VAR 0 2
40626: PUSH
40627: LD_VAR 0 9
40631: PUSH
40632: LD_INT 1
40634: PPUSH
40635: LD_VAR 0 9
40639: PPUSH
40640: CALL_OW 12
40644: ARRAY
40645: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40646: LD_VAR 0 2
40650: PPUSH
40651: LD_VAR 0 3
40655: PPUSH
40656: CALL 40905 0 2
40660: NOT
40661: IFFALSE 40720
// repeat engine := _engine [ 1 ] ;
40663: LD_ADDR_VAR 0 3
40667: PUSH
40668: LD_VAR 0 11
40672: PUSH
40673: LD_INT 1
40675: ARRAY
40676: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40677: LD_ADDR_VAR 0 11
40681: PUSH
40682: LD_VAR 0 11
40686: PPUSH
40687: LD_INT 1
40689: PPUSH
40690: CALL_OW 3
40694: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40695: LD_VAR 0 2
40699: PPUSH
40700: LD_VAR 0 3
40704: PPUSH
40705: CALL 40905 0 2
40709: PUSH
40710: LD_VAR 0 11
40714: PUSH
40715: EMPTY
40716: EQUAL
40717: OR
40718: IFFALSE 40663
// if not control in _control then
40720: LD_VAR 0 4
40724: PUSH
40725: LD_VAR 0 12
40729: IN
40730: NOT
40731: IFFALSE 40757
// control := _control [ rand ( 1 , _control ) ] ;
40733: LD_ADDR_VAR 0 4
40737: PUSH
40738: LD_VAR 0 12
40742: PUSH
40743: LD_INT 1
40745: PPUSH
40746: LD_VAR 0 12
40750: PPUSH
40751: CALL_OW 12
40755: ARRAY
40756: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40757: LD_VAR 0 2
40761: PPUSH
40762: LD_VAR 0 5
40766: PPUSH
40767: CALL 41125 0 2
40771: NOT
40772: IFFALSE 40831
// repeat weapon := _weapon [ 1 ] ;
40774: LD_ADDR_VAR 0 5
40778: PUSH
40779: LD_VAR 0 10
40783: PUSH
40784: LD_INT 1
40786: ARRAY
40787: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40788: LD_ADDR_VAR 0 10
40792: PUSH
40793: LD_VAR 0 10
40797: PPUSH
40798: LD_INT 1
40800: PPUSH
40801: CALL_OW 3
40805: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40806: LD_VAR 0 2
40810: PPUSH
40811: LD_VAR 0 5
40815: PPUSH
40816: CALL 41125 0 2
40820: PUSH
40821: LD_VAR 0 10
40825: PUSH
40826: EMPTY
40827: EQUAL
40828: OR
40829: IFFALSE 40774
// result := [ ] ;
40831: LD_ADDR_VAR 0 6
40835: PUSH
40836: EMPTY
40837: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40838: LD_VAR 0 1
40842: PPUSH
40843: LD_VAR 0 2
40847: PPUSH
40848: LD_VAR 0 3
40852: PPUSH
40853: LD_VAR 0 4
40857: PPUSH
40858: LD_VAR 0 5
40862: PPUSH
40863: CALL_OW 448
40867: IFFALSE 40900
// result := [ chassis , engine , control , weapon ] ;
40869: LD_ADDR_VAR 0 6
40873: PUSH
40874: LD_VAR 0 2
40878: PUSH
40879: LD_VAR 0 3
40883: PUSH
40884: LD_VAR 0 4
40888: PUSH
40889: LD_VAR 0 5
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: ST_TO_ADDR
// end ;
40900: LD_VAR 0 6
40904: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40905: LD_INT 0
40907: PPUSH
// if not chassis or not engine then
40908: LD_VAR 0 1
40912: NOT
40913: PUSH
40914: LD_VAR 0 2
40918: NOT
40919: OR
40920: IFFALSE 40924
// exit ;
40922: GO 41120
// case engine of engine_solar :
40924: LD_VAR 0 2
40928: PUSH
40929: LD_INT 2
40931: DOUBLE
40932: EQUAL
40933: IFTRUE 40937
40935: GO 40975
40937: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40938: LD_ADDR_VAR 0 3
40942: PUSH
40943: LD_INT 11
40945: PUSH
40946: LD_INT 12
40948: PUSH
40949: LD_INT 13
40951: PUSH
40952: LD_INT 14
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: LD_INT 2
40960: PUSH
40961: LD_INT 3
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: ST_TO_ADDR
40973: GO 41104
40975: LD_INT 1
40977: DOUBLE
40978: EQUAL
40979: IFTRUE 40983
40981: GO 41045
40983: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40984: LD_ADDR_VAR 0 3
40988: PUSH
40989: LD_INT 11
40991: PUSH
40992: LD_INT 12
40994: PUSH
40995: LD_INT 13
40997: PUSH
40998: LD_INT 14
41000: PUSH
41001: LD_INT 1
41003: PUSH
41004: LD_INT 2
41006: PUSH
41007: LD_INT 3
41009: PUSH
41010: LD_INT 4
41012: PUSH
41013: LD_INT 5
41015: PUSH
41016: LD_INT 21
41018: PUSH
41019: LD_INT 23
41021: PUSH
41022: LD_INT 22
41024: PUSH
41025: LD_INT 24
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: ST_TO_ADDR
41043: GO 41104
41045: LD_INT 3
41047: DOUBLE
41048: EQUAL
41049: IFTRUE 41053
41051: GO 41103
41053: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41054: LD_ADDR_VAR 0 3
41058: PUSH
41059: LD_INT 13
41061: PUSH
41062: LD_INT 14
41064: PUSH
41065: LD_INT 2
41067: PUSH
41068: LD_INT 3
41070: PUSH
41071: LD_INT 4
41073: PUSH
41074: LD_INT 5
41076: PUSH
41077: LD_INT 21
41079: PUSH
41080: LD_INT 22
41082: PUSH
41083: LD_INT 23
41085: PUSH
41086: LD_INT 24
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: ST_TO_ADDR
41101: GO 41104
41103: POP
// result := ( chassis in result ) ;
41104: LD_ADDR_VAR 0 3
41108: PUSH
41109: LD_VAR 0 1
41113: PUSH
41114: LD_VAR 0 3
41118: IN
41119: ST_TO_ADDR
// end ;
41120: LD_VAR 0 3
41124: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41125: LD_INT 0
41127: PPUSH
// if not chassis or not weapon then
41128: LD_VAR 0 1
41132: NOT
41133: PUSH
41134: LD_VAR 0 2
41138: NOT
41139: OR
41140: IFFALSE 41144
// exit ;
41142: GO 42206
// case weapon of us_machine_gun :
41144: LD_VAR 0 2
41148: PUSH
41149: LD_INT 2
41151: DOUBLE
41152: EQUAL
41153: IFTRUE 41157
41155: GO 41187
41157: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41158: LD_ADDR_VAR 0 3
41162: PUSH
41163: LD_INT 1
41165: PUSH
41166: LD_INT 2
41168: PUSH
41169: LD_INT 3
41171: PUSH
41172: LD_INT 4
41174: PUSH
41175: LD_INT 5
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: ST_TO_ADDR
41185: GO 42190
41187: LD_INT 3
41189: DOUBLE
41190: EQUAL
41191: IFTRUE 41195
41193: GO 41225
41195: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41196: LD_ADDR_VAR 0 3
41200: PUSH
41201: LD_INT 1
41203: PUSH
41204: LD_INT 2
41206: PUSH
41207: LD_INT 3
41209: PUSH
41210: LD_INT 4
41212: PUSH
41213: LD_INT 5
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: ST_TO_ADDR
41223: GO 42190
41225: LD_INT 11
41227: DOUBLE
41228: EQUAL
41229: IFTRUE 41233
41231: GO 41263
41233: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41234: LD_ADDR_VAR 0 3
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: LD_INT 2
41244: PUSH
41245: LD_INT 3
41247: PUSH
41248: LD_INT 4
41250: PUSH
41251: LD_INT 5
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: ST_TO_ADDR
41261: GO 42190
41263: LD_INT 4
41265: DOUBLE
41266: EQUAL
41267: IFTRUE 41271
41269: GO 41297
41271: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41272: LD_ADDR_VAR 0 3
41276: PUSH
41277: LD_INT 2
41279: PUSH
41280: LD_INT 3
41282: PUSH
41283: LD_INT 4
41285: PUSH
41286: LD_INT 5
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: ST_TO_ADDR
41295: GO 42190
41297: LD_INT 5
41299: DOUBLE
41300: EQUAL
41301: IFTRUE 41305
41303: GO 41331
41305: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41306: LD_ADDR_VAR 0 3
41310: PUSH
41311: LD_INT 2
41313: PUSH
41314: LD_INT 3
41316: PUSH
41317: LD_INT 4
41319: PUSH
41320: LD_INT 5
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: ST_TO_ADDR
41329: GO 42190
41331: LD_INT 9
41333: DOUBLE
41334: EQUAL
41335: IFTRUE 41339
41337: GO 41365
41339: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41340: LD_ADDR_VAR 0 3
41344: PUSH
41345: LD_INT 2
41347: PUSH
41348: LD_INT 3
41350: PUSH
41351: LD_INT 4
41353: PUSH
41354: LD_INT 5
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: ST_TO_ADDR
41363: GO 42190
41365: LD_INT 7
41367: DOUBLE
41368: EQUAL
41369: IFTRUE 41373
41371: GO 41399
41373: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41374: LD_ADDR_VAR 0 3
41378: PUSH
41379: LD_INT 2
41381: PUSH
41382: LD_INT 3
41384: PUSH
41385: LD_INT 4
41387: PUSH
41388: LD_INT 5
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: ST_TO_ADDR
41397: GO 42190
41399: LD_INT 12
41401: DOUBLE
41402: EQUAL
41403: IFTRUE 41407
41405: GO 41433
41407: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41408: LD_ADDR_VAR 0 3
41412: PUSH
41413: LD_INT 2
41415: PUSH
41416: LD_INT 3
41418: PUSH
41419: LD_INT 4
41421: PUSH
41422: LD_INT 5
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: ST_TO_ADDR
41431: GO 42190
41433: LD_INT 13
41435: DOUBLE
41436: EQUAL
41437: IFTRUE 41441
41439: GO 41467
41441: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41442: LD_ADDR_VAR 0 3
41446: PUSH
41447: LD_INT 2
41449: PUSH
41450: LD_INT 3
41452: PUSH
41453: LD_INT 4
41455: PUSH
41456: LD_INT 5
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: ST_TO_ADDR
41465: GO 42190
41467: LD_INT 14
41469: DOUBLE
41470: EQUAL
41471: IFTRUE 41475
41473: GO 41493
41475: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41476: LD_ADDR_VAR 0 3
41480: PUSH
41481: LD_INT 4
41483: PUSH
41484: LD_INT 5
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: ST_TO_ADDR
41491: GO 42190
41493: LD_INT 6
41495: DOUBLE
41496: EQUAL
41497: IFTRUE 41501
41499: GO 41519
41501: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41502: LD_ADDR_VAR 0 3
41506: PUSH
41507: LD_INT 4
41509: PUSH
41510: LD_INT 5
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: ST_TO_ADDR
41517: GO 42190
41519: LD_INT 10
41521: DOUBLE
41522: EQUAL
41523: IFTRUE 41527
41525: GO 41545
41527: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41528: LD_ADDR_VAR 0 3
41532: PUSH
41533: LD_INT 4
41535: PUSH
41536: LD_INT 5
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: ST_TO_ADDR
41543: GO 42190
41545: LD_INT 22
41547: DOUBLE
41548: EQUAL
41549: IFTRUE 41553
41551: GO 41579
41553: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41554: LD_ADDR_VAR 0 3
41558: PUSH
41559: LD_INT 11
41561: PUSH
41562: LD_INT 12
41564: PUSH
41565: LD_INT 13
41567: PUSH
41568: LD_INT 14
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: ST_TO_ADDR
41577: GO 42190
41579: LD_INT 23
41581: DOUBLE
41582: EQUAL
41583: IFTRUE 41587
41585: GO 41613
41587: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41588: LD_ADDR_VAR 0 3
41592: PUSH
41593: LD_INT 11
41595: PUSH
41596: LD_INT 12
41598: PUSH
41599: LD_INT 13
41601: PUSH
41602: LD_INT 14
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: ST_TO_ADDR
41611: GO 42190
41613: LD_INT 24
41615: DOUBLE
41616: EQUAL
41617: IFTRUE 41621
41619: GO 41647
41621: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41622: LD_ADDR_VAR 0 3
41626: PUSH
41627: LD_INT 11
41629: PUSH
41630: LD_INT 12
41632: PUSH
41633: LD_INT 13
41635: PUSH
41636: LD_INT 14
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: ST_TO_ADDR
41645: GO 42190
41647: LD_INT 30
41649: DOUBLE
41650: EQUAL
41651: IFTRUE 41655
41653: GO 41681
41655: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41656: LD_ADDR_VAR 0 3
41660: PUSH
41661: LD_INT 11
41663: PUSH
41664: LD_INT 12
41666: PUSH
41667: LD_INT 13
41669: PUSH
41670: LD_INT 14
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: ST_TO_ADDR
41679: GO 42190
41681: LD_INT 25
41683: DOUBLE
41684: EQUAL
41685: IFTRUE 41689
41687: GO 41707
41689: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41690: LD_ADDR_VAR 0 3
41694: PUSH
41695: LD_INT 13
41697: PUSH
41698: LD_INT 14
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: ST_TO_ADDR
41705: GO 42190
41707: LD_INT 27
41709: DOUBLE
41710: EQUAL
41711: IFTRUE 41715
41713: GO 41733
41715: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41716: LD_ADDR_VAR 0 3
41720: PUSH
41721: LD_INT 13
41723: PUSH
41724: LD_INT 14
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: ST_TO_ADDR
41731: GO 42190
41733: LD_EXP 67
41737: DOUBLE
41738: EQUAL
41739: IFTRUE 41743
41741: GO 41769
41743: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41744: LD_ADDR_VAR 0 3
41748: PUSH
41749: LD_INT 11
41751: PUSH
41752: LD_INT 12
41754: PUSH
41755: LD_INT 13
41757: PUSH
41758: LD_INT 14
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: ST_TO_ADDR
41767: GO 42190
41769: LD_INT 28
41771: DOUBLE
41772: EQUAL
41773: IFTRUE 41777
41775: GO 41795
41777: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41778: LD_ADDR_VAR 0 3
41782: PUSH
41783: LD_INT 13
41785: PUSH
41786: LD_INT 14
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: ST_TO_ADDR
41793: GO 42190
41795: LD_INT 29
41797: DOUBLE
41798: EQUAL
41799: IFTRUE 41803
41801: GO 41821
41803: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41804: LD_ADDR_VAR 0 3
41808: PUSH
41809: LD_INT 13
41811: PUSH
41812: LD_INT 14
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: ST_TO_ADDR
41819: GO 42190
41821: LD_INT 31
41823: DOUBLE
41824: EQUAL
41825: IFTRUE 41829
41827: GO 41847
41829: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41830: LD_ADDR_VAR 0 3
41834: PUSH
41835: LD_INT 13
41837: PUSH
41838: LD_INT 14
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: ST_TO_ADDR
41845: GO 42190
41847: LD_INT 26
41849: DOUBLE
41850: EQUAL
41851: IFTRUE 41855
41853: GO 41873
41855: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41856: LD_ADDR_VAR 0 3
41860: PUSH
41861: LD_INT 13
41863: PUSH
41864: LD_INT 14
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: ST_TO_ADDR
41871: GO 42190
41873: LD_INT 42
41875: DOUBLE
41876: EQUAL
41877: IFTRUE 41881
41879: GO 41907
41881: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41882: LD_ADDR_VAR 0 3
41886: PUSH
41887: LD_INT 21
41889: PUSH
41890: LD_INT 22
41892: PUSH
41893: LD_INT 23
41895: PUSH
41896: LD_INT 24
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: ST_TO_ADDR
41905: GO 42190
41907: LD_INT 43
41909: DOUBLE
41910: EQUAL
41911: IFTRUE 41915
41913: GO 41941
41915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41916: LD_ADDR_VAR 0 3
41920: PUSH
41921: LD_INT 21
41923: PUSH
41924: LD_INT 22
41926: PUSH
41927: LD_INT 23
41929: PUSH
41930: LD_INT 24
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: ST_TO_ADDR
41939: GO 42190
41941: LD_INT 44
41943: DOUBLE
41944: EQUAL
41945: IFTRUE 41949
41947: GO 41975
41949: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41950: LD_ADDR_VAR 0 3
41954: PUSH
41955: LD_INT 21
41957: PUSH
41958: LD_INT 22
41960: PUSH
41961: LD_INT 23
41963: PUSH
41964: LD_INT 24
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: ST_TO_ADDR
41973: GO 42190
41975: LD_INT 45
41977: DOUBLE
41978: EQUAL
41979: IFTRUE 41983
41981: GO 42009
41983: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41984: LD_ADDR_VAR 0 3
41988: PUSH
41989: LD_INT 21
41991: PUSH
41992: LD_INT 22
41994: PUSH
41995: LD_INT 23
41997: PUSH
41998: LD_INT 24
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: ST_TO_ADDR
42007: GO 42190
42009: LD_INT 49
42011: DOUBLE
42012: EQUAL
42013: IFTRUE 42017
42015: GO 42043
42017: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42018: LD_ADDR_VAR 0 3
42022: PUSH
42023: LD_INT 21
42025: PUSH
42026: LD_INT 22
42028: PUSH
42029: LD_INT 23
42031: PUSH
42032: LD_INT 24
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: ST_TO_ADDR
42041: GO 42190
42043: LD_INT 51
42045: DOUBLE
42046: EQUAL
42047: IFTRUE 42051
42049: GO 42077
42051: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42052: LD_ADDR_VAR 0 3
42056: PUSH
42057: LD_INT 21
42059: PUSH
42060: LD_INT 22
42062: PUSH
42063: LD_INT 23
42065: PUSH
42066: LD_INT 24
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: ST_TO_ADDR
42075: GO 42190
42077: LD_INT 52
42079: DOUBLE
42080: EQUAL
42081: IFTRUE 42085
42083: GO 42111
42085: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42086: LD_ADDR_VAR 0 3
42090: PUSH
42091: LD_INT 21
42093: PUSH
42094: LD_INT 22
42096: PUSH
42097: LD_INT 23
42099: PUSH
42100: LD_INT 24
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: ST_TO_ADDR
42109: GO 42190
42111: LD_INT 53
42113: DOUBLE
42114: EQUAL
42115: IFTRUE 42119
42117: GO 42137
42119: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42120: LD_ADDR_VAR 0 3
42124: PUSH
42125: LD_INT 23
42127: PUSH
42128: LD_INT 24
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: ST_TO_ADDR
42135: GO 42190
42137: LD_INT 46
42139: DOUBLE
42140: EQUAL
42141: IFTRUE 42145
42143: GO 42163
42145: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42146: LD_ADDR_VAR 0 3
42150: PUSH
42151: LD_INT 23
42153: PUSH
42154: LD_INT 24
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: ST_TO_ADDR
42161: GO 42190
42163: LD_INT 47
42165: DOUBLE
42166: EQUAL
42167: IFTRUE 42171
42169: GO 42189
42171: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42172: LD_ADDR_VAR 0 3
42176: PUSH
42177: LD_INT 23
42179: PUSH
42180: LD_INT 24
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: ST_TO_ADDR
42187: GO 42190
42189: POP
// result := ( chassis in result ) ;
42190: LD_ADDR_VAR 0 3
42194: PUSH
42195: LD_VAR 0 1
42199: PUSH
42200: LD_VAR 0 3
42204: IN
42205: ST_TO_ADDR
// end ;
42206: LD_VAR 0 3
42210: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42211: LD_INT 0
42213: PPUSH
42214: PPUSH
42215: PPUSH
42216: PPUSH
42217: PPUSH
42218: PPUSH
42219: PPUSH
// result := array ;
42220: LD_ADDR_VAR 0 5
42224: PUSH
42225: LD_VAR 0 1
42229: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42230: LD_VAR 0 1
42234: NOT
42235: PUSH
42236: LD_VAR 0 2
42240: NOT
42241: OR
42242: PUSH
42243: LD_VAR 0 3
42247: NOT
42248: OR
42249: PUSH
42250: LD_VAR 0 2
42254: PUSH
42255: LD_VAR 0 1
42259: GREATER
42260: OR
42261: PUSH
42262: LD_VAR 0 3
42266: PUSH
42267: LD_VAR 0 1
42271: GREATER
42272: OR
42273: IFFALSE 42277
// exit ;
42275: GO 42573
// if direction then
42277: LD_VAR 0 4
42281: IFFALSE 42345
// begin d := 1 ;
42283: LD_ADDR_VAR 0 9
42287: PUSH
42288: LD_INT 1
42290: ST_TO_ADDR
// if i_from > i_to then
42291: LD_VAR 0 2
42295: PUSH
42296: LD_VAR 0 3
42300: GREATER
42301: IFFALSE 42327
// length := ( array - i_from ) + i_to else
42303: LD_ADDR_VAR 0 11
42307: PUSH
42308: LD_VAR 0 1
42312: PUSH
42313: LD_VAR 0 2
42317: MINUS
42318: PUSH
42319: LD_VAR 0 3
42323: PLUS
42324: ST_TO_ADDR
42325: GO 42343
// length := i_to - i_from ;
42327: LD_ADDR_VAR 0 11
42331: PUSH
42332: LD_VAR 0 3
42336: PUSH
42337: LD_VAR 0 2
42341: MINUS
42342: ST_TO_ADDR
// end else
42343: GO 42406
// begin d := - 1 ;
42345: LD_ADDR_VAR 0 9
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: ST_TO_ADDR
// if i_from > i_to then
42354: LD_VAR 0 2
42358: PUSH
42359: LD_VAR 0 3
42363: GREATER
42364: IFFALSE 42384
// length := i_from - i_to else
42366: LD_ADDR_VAR 0 11
42370: PUSH
42371: LD_VAR 0 2
42375: PUSH
42376: LD_VAR 0 3
42380: MINUS
42381: ST_TO_ADDR
42382: GO 42406
// length := ( array - i_to ) + i_from ;
42384: LD_ADDR_VAR 0 11
42388: PUSH
42389: LD_VAR 0 1
42393: PUSH
42394: LD_VAR 0 3
42398: MINUS
42399: PUSH
42400: LD_VAR 0 2
42404: PLUS
42405: ST_TO_ADDR
// end ; if not length then
42406: LD_VAR 0 11
42410: NOT
42411: IFFALSE 42415
// exit ;
42413: GO 42573
// tmp := array ;
42415: LD_ADDR_VAR 0 10
42419: PUSH
42420: LD_VAR 0 1
42424: ST_TO_ADDR
// for i = 1 to length do
42425: LD_ADDR_VAR 0 6
42429: PUSH
42430: DOUBLE
42431: LD_INT 1
42433: DEC
42434: ST_TO_ADDR
42435: LD_VAR 0 11
42439: PUSH
42440: FOR_TO
42441: IFFALSE 42561
// begin for j = 1 to array do
42443: LD_ADDR_VAR 0 7
42447: PUSH
42448: DOUBLE
42449: LD_INT 1
42451: DEC
42452: ST_TO_ADDR
42453: LD_VAR 0 1
42457: PUSH
42458: FOR_TO
42459: IFFALSE 42547
// begin k := j + d ;
42461: LD_ADDR_VAR 0 8
42465: PUSH
42466: LD_VAR 0 7
42470: PUSH
42471: LD_VAR 0 9
42475: PLUS
42476: ST_TO_ADDR
// if k > array then
42477: LD_VAR 0 8
42481: PUSH
42482: LD_VAR 0 1
42486: GREATER
42487: IFFALSE 42497
// k := 1 ;
42489: LD_ADDR_VAR 0 8
42493: PUSH
42494: LD_INT 1
42496: ST_TO_ADDR
// if not k then
42497: LD_VAR 0 8
42501: NOT
42502: IFFALSE 42514
// k := array ;
42504: LD_ADDR_VAR 0 8
42508: PUSH
42509: LD_VAR 0 1
42513: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42514: LD_ADDR_VAR 0 10
42518: PUSH
42519: LD_VAR 0 10
42523: PPUSH
42524: LD_VAR 0 8
42528: PPUSH
42529: LD_VAR 0 1
42533: PUSH
42534: LD_VAR 0 7
42538: ARRAY
42539: PPUSH
42540: CALL_OW 1
42544: ST_TO_ADDR
// end ;
42545: GO 42458
42547: POP
42548: POP
// array := tmp ;
42549: LD_ADDR_VAR 0 1
42553: PUSH
42554: LD_VAR 0 10
42558: ST_TO_ADDR
// end ;
42559: GO 42440
42561: POP
42562: POP
// result := array ;
42563: LD_ADDR_VAR 0 5
42567: PUSH
42568: LD_VAR 0 1
42572: ST_TO_ADDR
// end ;
42573: LD_VAR 0 5
42577: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42578: LD_INT 0
42580: PPUSH
42581: PPUSH
// result := 0 ;
42582: LD_ADDR_VAR 0 3
42586: PUSH
42587: LD_INT 0
42589: ST_TO_ADDR
// if not array or not value in array then
42590: LD_VAR 0 1
42594: NOT
42595: PUSH
42596: LD_VAR 0 2
42600: PUSH
42601: LD_VAR 0 1
42605: IN
42606: NOT
42607: OR
42608: IFFALSE 42612
// exit ;
42610: GO 42666
// for i = 1 to array do
42612: LD_ADDR_VAR 0 4
42616: PUSH
42617: DOUBLE
42618: LD_INT 1
42620: DEC
42621: ST_TO_ADDR
42622: LD_VAR 0 1
42626: PUSH
42627: FOR_TO
42628: IFFALSE 42664
// if value = array [ i ] then
42630: LD_VAR 0 2
42634: PUSH
42635: LD_VAR 0 1
42639: PUSH
42640: LD_VAR 0 4
42644: ARRAY
42645: EQUAL
42646: IFFALSE 42662
// begin result := i ;
42648: LD_ADDR_VAR 0 3
42652: PUSH
42653: LD_VAR 0 4
42657: ST_TO_ADDR
// exit ;
42658: POP
42659: POP
42660: GO 42666
// end ;
42662: GO 42627
42664: POP
42665: POP
// end ;
42666: LD_VAR 0 3
42670: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42671: LD_INT 0
42673: PPUSH
// vc_chassis := chassis ;
42674: LD_ADDR_OWVAR 37
42678: PUSH
42679: LD_VAR 0 1
42683: ST_TO_ADDR
// vc_engine := engine ;
42684: LD_ADDR_OWVAR 39
42688: PUSH
42689: LD_VAR 0 2
42693: ST_TO_ADDR
// vc_control := control ;
42694: LD_ADDR_OWVAR 38
42698: PUSH
42699: LD_VAR 0 3
42703: ST_TO_ADDR
// vc_weapon := weapon ;
42704: LD_ADDR_OWVAR 40
42708: PUSH
42709: LD_VAR 0 4
42713: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42714: LD_ADDR_OWVAR 41
42718: PUSH
42719: LD_VAR 0 5
42723: ST_TO_ADDR
// end ;
42724: LD_VAR 0 6
42728: RET
// export function WantPlant ( unit ) ; var task ; begin
42729: LD_INT 0
42731: PPUSH
42732: PPUSH
// result := false ;
42733: LD_ADDR_VAR 0 2
42737: PUSH
42738: LD_INT 0
42740: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42741: LD_ADDR_VAR 0 3
42745: PUSH
42746: LD_VAR 0 1
42750: PPUSH
42751: CALL_OW 437
42755: ST_TO_ADDR
// if task then
42756: LD_VAR 0 3
42760: IFFALSE 42788
// if task [ 1 ] [ 1 ] = p then
42762: LD_VAR 0 3
42766: PUSH
42767: LD_INT 1
42769: ARRAY
42770: PUSH
42771: LD_INT 1
42773: ARRAY
42774: PUSH
42775: LD_STRING p
42777: EQUAL
42778: IFFALSE 42788
// result := true ;
42780: LD_ADDR_VAR 0 2
42784: PUSH
42785: LD_INT 1
42787: ST_TO_ADDR
// end ;
42788: LD_VAR 0 2
42792: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42793: LD_INT 0
42795: PPUSH
42796: PPUSH
42797: PPUSH
42798: PPUSH
// if pos < 1 then
42799: LD_VAR 0 2
42803: PUSH
42804: LD_INT 1
42806: LESS
42807: IFFALSE 42811
// exit ;
42809: GO 43114
// if pos = 1 then
42811: LD_VAR 0 2
42815: PUSH
42816: LD_INT 1
42818: EQUAL
42819: IFFALSE 42852
// result := Replace ( arr , pos [ 1 ] , value ) else
42821: LD_ADDR_VAR 0 4
42825: PUSH
42826: LD_VAR 0 1
42830: PPUSH
42831: LD_VAR 0 2
42835: PUSH
42836: LD_INT 1
42838: ARRAY
42839: PPUSH
42840: LD_VAR 0 3
42844: PPUSH
42845: CALL_OW 1
42849: ST_TO_ADDR
42850: GO 43114
// begin tmp := arr ;
42852: LD_ADDR_VAR 0 6
42856: PUSH
42857: LD_VAR 0 1
42861: ST_TO_ADDR
// s_arr := [ tmp ] ;
42862: LD_ADDR_VAR 0 7
42866: PUSH
42867: LD_VAR 0 6
42871: PUSH
42872: EMPTY
42873: LIST
42874: ST_TO_ADDR
// for i = 1 to pos - 1 do
42875: LD_ADDR_VAR 0 5
42879: PUSH
42880: DOUBLE
42881: LD_INT 1
42883: DEC
42884: ST_TO_ADDR
42885: LD_VAR 0 2
42889: PUSH
42890: LD_INT 1
42892: MINUS
42893: PUSH
42894: FOR_TO
42895: IFFALSE 42940
// begin tmp := tmp [ pos [ i ] ] ;
42897: LD_ADDR_VAR 0 6
42901: PUSH
42902: LD_VAR 0 6
42906: PUSH
42907: LD_VAR 0 2
42911: PUSH
42912: LD_VAR 0 5
42916: ARRAY
42917: ARRAY
42918: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42919: LD_ADDR_VAR 0 7
42923: PUSH
42924: LD_VAR 0 7
42928: PUSH
42929: LD_VAR 0 6
42933: PUSH
42934: EMPTY
42935: LIST
42936: ADD
42937: ST_TO_ADDR
// end ;
42938: GO 42894
42940: POP
42941: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42942: LD_ADDR_VAR 0 6
42946: PUSH
42947: LD_VAR 0 6
42951: PPUSH
42952: LD_VAR 0 2
42956: PUSH
42957: LD_VAR 0 2
42961: ARRAY
42962: PPUSH
42963: LD_VAR 0 3
42967: PPUSH
42968: CALL_OW 1
42972: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42973: LD_ADDR_VAR 0 7
42977: PUSH
42978: LD_VAR 0 7
42982: PPUSH
42983: LD_VAR 0 7
42987: PPUSH
42988: LD_VAR 0 6
42992: PPUSH
42993: CALL_OW 1
42997: ST_TO_ADDR
// for i = s_arr downto 2 do
42998: LD_ADDR_VAR 0 5
43002: PUSH
43003: DOUBLE
43004: LD_VAR 0 7
43008: INC
43009: ST_TO_ADDR
43010: LD_INT 2
43012: PUSH
43013: FOR_DOWNTO
43014: IFFALSE 43098
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43016: LD_ADDR_VAR 0 6
43020: PUSH
43021: LD_VAR 0 7
43025: PUSH
43026: LD_VAR 0 5
43030: PUSH
43031: LD_INT 1
43033: MINUS
43034: ARRAY
43035: PPUSH
43036: LD_VAR 0 2
43040: PUSH
43041: LD_VAR 0 5
43045: PUSH
43046: LD_INT 1
43048: MINUS
43049: ARRAY
43050: PPUSH
43051: LD_VAR 0 7
43055: PUSH
43056: LD_VAR 0 5
43060: ARRAY
43061: PPUSH
43062: CALL_OW 1
43066: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43067: LD_ADDR_VAR 0 7
43071: PUSH
43072: LD_VAR 0 7
43076: PPUSH
43077: LD_VAR 0 5
43081: PUSH
43082: LD_INT 1
43084: MINUS
43085: PPUSH
43086: LD_VAR 0 6
43090: PPUSH
43091: CALL_OW 1
43095: ST_TO_ADDR
// end ;
43096: GO 43013
43098: POP
43099: POP
// result := s_arr [ 1 ] ;
43100: LD_ADDR_VAR 0 4
43104: PUSH
43105: LD_VAR 0 7
43109: PUSH
43110: LD_INT 1
43112: ARRAY
43113: ST_TO_ADDR
// end ; end ;
43114: LD_VAR 0 4
43118: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43119: LD_INT 0
43121: PPUSH
43122: PPUSH
// if not list then
43123: LD_VAR 0 1
43127: NOT
43128: IFFALSE 43132
// exit ;
43130: GO 43223
// i := list [ pos1 ] ;
43132: LD_ADDR_VAR 0 5
43136: PUSH
43137: LD_VAR 0 1
43141: PUSH
43142: LD_VAR 0 2
43146: ARRAY
43147: ST_TO_ADDR
// if not i then
43148: LD_VAR 0 5
43152: NOT
43153: IFFALSE 43157
// exit ;
43155: GO 43223
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43157: LD_ADDR_VAR 0 1
43161: PUSH
43162: LD_VAR 0 1
43166: PPUSH
43167: LD_VAR 0 2
43171: PPUSH
43172: LD_VAR 0 1
43176: PUSH
43177: LD_VAR 0 3
43181: ARRAY
43182: PPUSH
43183: CALL_OW 1
43187: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43188: LD_ADDR_VAR 0 1
43192: PUSH
43193: LD_VAR 0 1
43197: PPUSH
43198: LD_VAR 0 3
43202: PPUSH
43203: LD_VAR 0 5
43207: PPUSH
43208: CALL_OW 1
43212: ST_TO_ADDR
// result := list ;
43213: LD_ADDR_VAR 0 4
43217: PUSH
43218: LD_VAR 0 1
43222: ST_TO_ADDR
// end ;
43223: LD_VAR 0 4
43227: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43228: LD_INT 0
43230: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43231: LD_ADDR_VAR 0 5
43235: PUSH
43236: LD_VAR 0 1
43240: PPUSH
43241: CALL_OW 250
43245: PPUSH
43246: LD_VAR 0 1
43250: PPUSH
43251: CALL_OW 251
43255: PPUSH
43256: LD_VAR 0 2
43260: PPUSH
43261: LD_VAR 0 3
43265: PPUSH
43266: LD_VAR 0 4
43270: PPUSH
43271: CALL 43281 0 5
43275: ST_TO_ADDR
// end ;
43276: LD_VAR 0 5
43280: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43281: LD_INT 0
43283: PPUSH
43284: PPUSH
43285: PPUSH
43286: PPUSH
// if not list then
43287: LD_VAR 0 3
43291: NOT
43292: IFFALSE 43296
// exit ;
43294: GO 43684
// result := [ ] ;
43296: LD_ADDR_VAR 0 6
43300: PUSH
43301: EMPTY
43302: ST_TO_ADDR
// for i in list do
43303: LD_ADDR_VAR 0 7
43307: PUSH
43308: LD_VAR 0 3
43312: PUSH
43313: FOR_IN
43314: IFFALSE 43516
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43316: LD_ADDR_VAR 0 9
43320: PUSH
43321: LD_VAR 0 7
43325: PPUSH
43326: LD_VAR 0 1
43330: PPUSH
43331: LD_VAR 0 2
43335: PPUSH
43336: CALL_OW 297
43340: ST_TO_ADDR
// if not result then
43341: LD_VAR 0 6
43345: NOT
43346: IFFALSE 43372
// result := [ [ i , tmp ] ] else
43348: LD_ADDR_VAR 0 6
43352: PUSH
43353: LD_VAR 0 7
43357: PUSH
43358: LD_VAR 0 9
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: EMPTY
43368: LIST
43369: ST_TO_ADDR
43370: GO 43514
// begin if result [ result ] [ 2 ] < tmp then
43372: LD_VAR 0 6
43376: PUSH
43377: LD_VAR 0 6
43381: ARRAY
43382: PUSH
43383: LD_INT 2
43385: ARRAY
43386: PUSH
43387: LD_VAR 0 9
43391: LESS
43392: IFFALSE 43434
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43394: LD_ADDR_VAR 0 6
43398: PUSH
43399: LD_VAR 0 6
43403: PPUSH
43404: LD_VAR 0 6
43408: PUSH
43409: LD_INT 1
43411: PLUS
43412: PPUSH
43413: LD_VAR 0 7
43417: PUSH
43418: LD_VAR 0 9
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PPUSH
43427: CALL_OW 2
43431: ST_TO_ADDR
43432: GO 43514
// for j = 1 to result do
43434: LD_ADDR_VAR 0 8
43438: PUSH
43439: DOUBLE
43440: LD_INT 1
43442: DEC
43443: ST_TO_ADDR
43444: LD_VAR 0 6
43448: PUSH
43449: FOR_TO
43450: IFFALSE 43512
// begin if tmp < result [ j ] [ 2 ] then
43452: LD_VAR 0 9
43456: PUSH
43457: LD_VAR 0 6
43461: PUSH
43462: LD_VAR 0 8
43466: ARRAY
43467: PUSH
43468: LD_INT 2
43470: ARRAY
43471: LESS
43472: IFFALSE 43510
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43474: LD_ADDR_VAR 0 6
43478: PUSH
43479: LD_VAR 0 6
43483: PPUSH
43484: LD_VAR 0 8
43488: PPUSH
43489: LD_VAR 0 7
43493: PUSH
43494: LD_VAR 0 9
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PPUSH
43503: CALL_OW 2
43507: ST_TO_ADDR
// break ;
43508: GO 43512
// end ; end ;
43510: GO 43449
43512: POP
43513: POP
// end ; end ;
43514: GO 43313
43516: POP
43517: POP
// if result and not asc then
43518: LD_VAR 0 6
43522: PUSH
43523: LD_VAR 0 4
43527: NOT
43528: AND
43529: IFFALSE 43604
// begin tmp := result ;
43531: LD_ADDR_VAR 0 9
43535: PUSH
43536: LD_VAR 0 6
43540: ST_TO_ADDR
// for i = tmp downto 1 do
43541: LD_ADDR_VAR 0 7
43545: PUSH
43546: DOUBLE
43547: LD_VAR 0 9
43551: INC
43552: ST_TO_ADDR
43553: LD_INT 1
43555: PUSH
43556: FOR_DOWNTO
43557: IFFALSE 43602
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43559: LD_ADDR_VAR 0 6
43563: PUSH
43564: LD_VAR 0 6
43568: PPUSH
43569: LD_VAR 0 9
43573: PUSH
43574: LD_VAR 0 7
43578: MINUS
43579: PUSH
43580: LD_INT 1
43582: PLUS
43583: PPUSH
43584: LD_VAR 0 9
43588: PUSH
43589: LD_VAR 0 7
43593: ARRAY
43594: PPUSH
43595: CALL_OW 1
43599: ST_TO_ADDR
43600: GO 43556
43602: POP
43603: POP
// end ; tmp := [ ] ;
43604: LD_ADDR_VAR 0 9
43608: PUSH
43609: EMPTY
43610: ST_TO_ADDR
// if mode then
43611: LD_VAR 0 5
43615: IFFALSE 43684
// begin for i = 1 to result do
43617: LD_ADDR_VAR 0 7
43621: PUSH
43622: DOUBLE
43623: LD_INT 1
43625: DEC
43626: ST_TO_ADDR
43627: LD_VAR 0 6
43631: PUSH
43632: FOR_TO
43633: IFFALSE 43672
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43635: LD_ADDR_VAR 0 9
43639: PUSH
43640: LD_VAR 0 9
43644: PPUSH
43645: LD_VAR 0 7
43649: PPUSH
43650: LD_VAR 0 6
43654: PUSH
43655: LD_VAR 0 7
43659: ARRAY
43660: PUSH
43661: LD_INT 1
43663: ARRAY
43664: PPUSH
43665: CALL_OW 1
43669: ST_TO_ADDR
43670: GO 43632
43672: POP
43673: POP
// result := tmp ;
43674: LD_ADDR_VAR 0 6
43678: PUSH
43679: LD_VAR 0 9
43683: ST_TO_ADDR
// end ; end ;
43684: LD_VAR 0 6
43688: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43689: LD_INT 0
43691: PPUSH
43692: PPUSH
43693: PPUSH
43694: PPUSH
43695: PPUSH
43696: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43697: LD_ADDR_VAR 0 5
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: EMPTY
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: ST_TO_ADDR
// if not x or not y then
43719: LD_VAR 0 2
43723: NOT
43724: PUSH
43725: LD_VAR 0 3
43729: NOT
43730: OR
43731: IFFALSE 43735
// exit ;
43733: GO 45387
// if not range then
43735: LD_VAR 0 4
43739: NOT
43740: IFFALSE 43750
// range := 10 ;
43742: LD_ADDR_VAR 0 4
43746: PUSH
43747: LD_INT 10
43749: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43750: LD_ADDR_VAR 0 8
43754: PUSH
43755: LD_INT 81
43757: PUSH
43758: LD_VAR 0 1
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 92
43769: PUSH
43770: LD_VAR 0 2
43774: PUSH
43775: LD_VAR 0 3
43779: PUSH
43780: LD_VAR 0 4
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 3
43793: PUSH
43794: LD_INT 21
43796: PUSH
43797: LD_INT 3
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: LIST
43812: PPUSH
43813: CALL_OW 69
43817: ST_TO_ADDR
// if not tmp then
43818: LD_VAR 0 8
43822: NOT
43823: IFFALSE 43827
// exit ;
43825: GO 45387
// for i in tmp do
43827: LD_ADDR_VAR 0 6
43831: PUSH
43832: LD_VAR 0 8
43836: PUSH
43837: FOR_IN
43838: IFFALSE 45362
// begin points := [ 0 , 0 , 0 ] ;
43840: LD_ADDR_VAR 0 9
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: LIST
43858: ST_TO_ADDR
// bpoints := 1 ;
43859: LD_ADDR_VAR 0 10
43863: PUSH
43864: LD_INT 1
43866: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43867: LD_VAR 0 6
43871: PPUSH
43872: CALL_OW 247
43876: PUSH
43877: LD_INT 1
43879: DOUBLE
43880: EQUAL
43881: IFTRUE 43885
43883: GO 44463
43885: POP
// begin if GetClass ( i ) = 1 then
43886: LD_VAR 0 6
43890: PPUSH
43891: CALL_OW 257
43895: PUSH
43896: LD_INT 1
43898: EQUAL
43899: IFFALSE 43920
// points := [ 10 , 5 , 3 ] ;
43901: LD_ADDR_VAR 0 9
43905: PUSH
43906: LD_INT 10
43908: PUSH
43909: LD_INT 5
43911: PUSH
43912: LD_INT 3
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: LIST
43919: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43920: LD_VAR 0 6
43924: PPUSH
43925: CALL_OW 257
43929: PUSH
43930: LD_INT 2
43932: PUSH
43933: LD_INT 3
43935: PUSH
43936: LD_INT 4
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: LIST
43943: IN
43944: IFFALSE 43965
// points := [ 3 , 2 , 1 ] ;
43946: LD_ADDR_VAR 0 9
43950: PUSH
43951: LD_INT 3
43953: PUSH
43954: LD_INT 2
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: LIST
43964: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43965: LD_VAR 0 6
43969: PPUSH
43970: CALL_OW 257
43974: PUSH
43975: LD_INT 5
43977: EQUAL
43978: IFFALSE 43999
// points := [ 130 , 5 , 2 ] ;
43980: LD_ADDR_VAR 0 9
43984: PUSH
43985: LD_INT 130
43987: PUSH
43988: LD_INT 5
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: LIST
43998: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43999: LD_VAR 0 6
44003: PPUSH
44004: CALL_OW 257
44008: PUSH
44009: LD_INT 8
44011: EQUAL
44012: IFFALSE 44033
// points := [ 35 , 35 , 30 ] ;
44014: LD_ADDR_VAR 0 9
44018: PUSH
44019: LD_INT 35
44021: PUSH
44022: LD_INT 35
44024: PUSH
44025: LD_INT 30
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: LIST
44032: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44033: LD_VAR 0 6
44037: PPUSH
44038: CALL_OW 257
44042: PUSH
44043: LD_INT 9
44045: EQUAL
44046: IFFALSE 44067
// points := [ 20 , 55 , 40 ] ;
44048: LD_ADDR_VAR 0 9
44052: PUSH
44053: LD_INT 20
44055: PUSH
44056: LD_INT 55
44058: PUSH
44059: LD_INT 40
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: LIST
44066: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44067: LD_VAR 0 6
44071: PPUSH
44072: CALL_OW 257
44076: PUSH
44077: LD_INT 12
44079: PUSH
44080: LD_INT 16
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: IN
44087: IFFALSE 44108
// points := [ 5 , 3 , 2 ] ;
44089: LD_ADDR_VAR 0 9
44093: PUSH
44094: LD_INT 5
44096: PUSH
44097: LD_INT 3
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: LIST
44107: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44108: LD_VAR 0 6
44112: PPUSH
44113: CALL_OW 257
44117: PUSH
44118: LD_INT 17
44120: EQUAL
44121: IFFALSE 44142
// points := [ 100 , 50 , 75 ] ;
44123: LD_ADDR_VAR 0 9
44127: PUSH
44128: LD_INT 100
44130: PUSH
44131: LD_INT 50
44133: PUSH
44134: LD_INT 75
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: LIST
44141: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44142: LD_VAR 0 6
44146: PPUSH
44147: CALL_OW 257
44151: PUSH
44152: LD_INT 15
44154: EQUAL
44155: IFFALSE 44176
// points := [ 10 , 5 , 3 ] ;
44157: LD_ADDR_VAR 0 9
44161: PUSH
44162: LD_INT 10
44164: PUSH
44165: LD_INT 5
44167: PUSH
44168: LD_INT 3
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: LIST
44175: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44176: LD_VAR 0 6
44180: PPUSH
44181: CALL_OW 257
44185: PUSH
44186: LD_INT 14
44188: EQUAL
44189: IFFALSE 44210
// points := [ 10 , 0 , 0 ] ;
44191: LD_ADDR_VAR 0 9
44195: PUSH
44196: LD_INT 10
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: LIST
44209: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44210: LD_VAR 0 6
44214: PPUSH
44215: CALL_OW 257
44219: PUSH
44220: LD_INT 11
44222: EQUAL
44223: IFFALSE 44244
// points := [ 30 , 10 , 5 ] ;
44225: LD_ADDR_VAR 0 9
44229: PUSH
44230: LD_INT 30
44232: PUSH
44233: LD_INT 10
44235: PUSH
44236: LD_INT 5
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: LIST
44243: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44244: LD_VAR 0 1
44248: PPUSH
44249: LD_INT 5
44251: PPUSH
44252: CALL_OW 321
44256: PUSH
44257: LD_INT 2
44259: EQUAL
44260: IFFALSE 44277
// bpoints := bpoints * 1.8 ;
44262: LD_ADDR_VAR 0 10
44266: PUSH
44267: LD_VAR 0 10
44271: PUSH
44272: LD_REAL  1.80000000000000E+0000
44275: MUL
44276: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44277: LD_VAR 0 6
44281: PPUSH
44282: CALL_OW 257
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: LD_INT 2
44292: PUSH
44293: LD_INT 3
44295: PUSH
44296: LD_INT 4
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: IN
44305: PUSH
44306: LD_VAR 0 1
44310: PPUSH
44311: LD_INT 51
44313: PPUSH
44314: CALL_OW 321
44318: PUSH
44319: LD_INT 2
44321: EQUAL
44322: AND
44323: IFFALSE 44340
// bpoints := bpoints * 1.2 ;
44325: LD_ADDR_VAR 0 10
44329: PUSH
44330: LD_VAR 0 10
44334: PUSH
44335: LD_REAL  1.20000000000000E+0000
44338: MUL
44339: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44340: LD_VAR 0 6
44344: PPUSH
44345: CALL_OW 257
44349: PUSH
44350: LD_INT 5
44352: PUSH
44353: LD_INT 7
44355: PUSH
44356: LD_INT 9
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: LIST
44363: IN
44364: PUSH
44365: LD_VAR 0 1
44369: PPUSH
44370: LD_INT 52
44372: PPUSH
44373: CALL_OW 321
44377: PUSH
44378: LD_INT 2
44380: EQUAL
44381: AND
44382: IFFALSE 44399
// bpoints := bpoints * 1.5 ;
44384: LD_ADDR_VAR 0 10
44388: PUSH
44389: LD_VAR 0 10
44393: PUSH
44394: LD_REAL  1.50000000000000E+0000
44397: MUL
44398: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44399: LD_VAR 0 1
44403: PPUSH
44404: LD_INT 66
44406: PPUSH
44407: CALL_OW 321
44411: PUSH
44412: LD_INT 2
44414: EQUAL
44415: IFFALSE 44432
// bpoints := bpoints * 1.1 ;
44417: LD_ADDR_VAR 0 10
44421: PUSH
44422: LD_VAR 0 10
44426: PUSH
44427: LD_REAL  1.10000000000000E+0000
44430: MUL
44431: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44432: LD_ADDR_VAR 0 10
44436: PUSH
44437: LD_VAR 0 10
44441: PUSH
44442: LD_VAR 0 6
44446: PPUSH
44447: LD_INT 1
44449: PPUSH
44450: CALL_OW 259
44454: PUSH
44455: LD_REAL  1.15000000000000E+0000
44458: MUL
44459: MUL
44460: ST_TO_ADDR
// end ; unit_vehicle :
44461: GO 45291
44463: LD_INT 2
44465: DOUBLE
44466: EQUAL
44467: IFTRUE 44471
44469: GO 45279
44471: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44472: LD_VAR 0 6
44476: PPUSH
44477: CALL_OW 264
44481: PUSH
44482: LD_INT 2
44484: PUSH
44485: LD_INT 42
44487: PUSH
44488: LD_INT 24
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: LIST
44495: IN
44496: IFFALSE 44517
// points := [ 25 , 5 , 3 ] ;
44498: LD_ADDR_VAR 0 9
44502: PUSH
44503: LD_INT 25
44505: PUSH
44506: LD_INT 5
44508: PUSH
44509: LD_INT 3
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: LIST
44516: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44517: LD_VAR 0 6
44521: PPUSH
44522: CALL_OW 264
44526: PUSH
44527: LD_INT 4
44529: PUSH
44530: LD_INT 43
44532: PUSH
44533: LD_INT 25
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: LIST
44540: IN
44541: IFFALSE 44562
// points := [ 40 , 15 , 5 ] ;
44543: LD_ADDR_VAR 0 9
44547: PUSH
44548: LD_INT 40
44550: PUSH
44551: LD_INT 15
44553: PUSH
44554: LD_INT 5
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: LIST
44561: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44562: LD_VAR 0 6
44566: PPUSH
44567: CALL_OW 264
44571: PUSH
44572: LD_INT 3
44574: PUSH
44575: LD_INT 23
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: IN
44582: IFFALSE 44603
// points := [ 7 , 25 , 8 ] ;
44584: LD_ADDR_VAR 0 9
44588: PUSH
44589: LD_INT 7
44591: PUSH
44592: LD_INT 25
44594: PUSH
44595: LD_INT 8
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44603: LD_VAR 0 6
44607: PPUSH
44608: CALL_OW 264
44612: PUSH
44613: LD_INT 5
44615: PUSH
44616: LD_INT 27
44618: PUSH
44619: LD_INT 44
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: LIST
44626: IN
44627: IFFALSE 44648
// points := [ 14 , 50 , 16 ] ;
44629: LD_ADDR_VAR 0 9
44633: PUSH
44634: LD_INT 14
44636: PUSH
44637: LD_INT 50
44639: PUSH
44640: LD_INT 16
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: LIST
44647: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44648: LD_VAR 0 6
44652: PPUSH
44653: CALL_OW 264
44657: PUSH
44658: LD_INT 6
44660: PUSH
44661: LD_INT 46
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: IN
44668: IFFALSE 44689
// points := [ 32 , 120 , 70 ] ;
44670: LD_ADDR_VAR 0 9
44674: PUSH
44675: LD_INT 32
44677: PUSH
44678: LD_INT 120
44680: PUSH
44681: LD_INT 70
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: LIST
44688: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44689: LD_VAR 0 6
44693: PPUSH
44694: CALL_OW 264
44698: PUSH
44699: LD_INT 7
44701: PUSH
44702: LD_INT 28
44704: PUSH
44705: LD_INT 45
44707: PUSH
44708: LD_EXP 67
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: IN
44719: IFFALSE 44740
// points := [ 35 , 20 , 45 ] ;
44721: LD_ADDR_VAR 0 9
44725: PUSH
44726: LD_INT 35
44728: PUSH
44729: LD_INT 20
44731: PUSH
44732: LD_INT 45
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: LIST
44739: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44740: LD_VAR 0 6
44744: PPUSH
44745: CALL_OW 264
44749: PUSH
44750: LD_INT 47
44752: PUSH
44753: EMPTY
44754: LIST
44755: IN
44756: IFFALSE 44777
// points := [ 67 , 45 , 75 ] ;
44758: LD_ADDR_VAR 0 9
44762: PUSH
44763: LD_INT 67
44765: PUSH
44766: LD_INT 45
44768: PUSH
44769: LD_INT 75
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: LIST
44776: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44777: LD_VAR 0 6
44781: PPUSH
44782: CALL_OW 264
44786: PUSH
44787: LD_INT 26
44789: PUSH
44790: EMPTY
44791: LIST
44792: IN
44793: IFFALSE 44814
// points := [ 120 , 30 , 80 ] ;
44795: LD_ADDR_VAR 0 9
44799: PUSH
44800: LD_INT 120
44802: PUSH
44803: LD_INT 30
44805: PUSH
44806: LD_INT 80
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: LIST
44813: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44814: LD_VAR 0 6
44818: PPUSH
44819: CALL_OW 264
44823: PUSH
44824: LD_INT 22
44826: PUSH
44827: EMPTY
44828: LIST
44829: IN
44830: IFFALSE 44851
// points := [ 40 , 1 , 1 ] ;
44832: LD_ADDR_VAR 0 9
44836: PUSH
44837: LD_INT 40
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: LIST
44850: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44851: LD_VAR 0 6
44855: PPUSH
44856: CALL_OW 264
44860: PUSH
44861: LD_INT 29
44863: PUSH
44864: EMPTY
44865: LIST
44866: IN
44867: IFFALSE 44888
// points := [ 70 , 200 , 400 ] ;
44869: LD_ADDR_VAR 0 9
44873: PUSH
44874: LD_INT 70
44876: PUSH
44877: LD_INT 200
44879: PUSH
44880: LD_INT 400
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: LIST
44887: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44888: LD_VAR 0 6
44892: PPUSH
44893: CALL_OW 264
44897: PUSH
44898: LD_INT 14
44900: PUSH
44901: LD_INT 53
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: IN
44908: IFFALSE 44929
// points := [ 40 , 10 , 20 ] ;
44910: LD_ADDR_VAR 0 9
44914: PUSH
44915: LD_INT 40
44917: PUSH
44918: LD_INT 10
44920: PUSH
44921: LD_INT 20
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: LIST
44928: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44929: LD_VAR 0 6
44933: PPUSH
44934: CALL_OW 264
44938: PUSH
44939: LD_INT 9
44941: PUSH
44942: EMPTY
44943: LIST
44944: IN
44945: IFFALSE 44966
// points := [ 5 , 70 , 20 ] ;
44947: LD_ADDR_VAR 0 9
44951: PUSH
44952: LD_INT 5
44954: PUSH
44955: LD_INT 70
44957: PUSH
44958: LD_INT 20
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: LIST
44965: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44966: LD_VAR 0 6
44970: PPUSH
44971: CALL_OW 264
44975: PUSH
44976: LD_INT 10
44978: PUSH
44979: EMPTY
44980: LIST
44981: IN
44982: IFFALSE 45003
// points := [ 35 , 110 , 70 ] ;
44984: LD_ADDR_VAR 0 9
44988: PUSH
44989: LD_INT 35
44991: PUSH
44992: LD_INT 110
44994: PUSH
44995: LD_INT 70
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: LIST
45002: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45003: LD_VAR 0 6
45007: PPUSH
45008: CALL_OW 265
45012: PUSH
45013: LD_INT 25
45015: EQUAL
45016: IFFALSE 45037
// points := [ 80 , 65 , 100 ] ;
45018: LD_ADDR_VAR 0 9
45022: PUSH
45023: LD_INT 80
45025: PUSH
45026: LD_INT 65
45028: PUSH
45029: LD_INT 100
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: LIST
45036: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45037: LD_VAR 0 6
45041: PPUSH
45042: CALL_OW 263
45046: PUSH
45047: LD_INT 1
45049: EQUAL
45050: IFFALSE 45085
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45052: LD_ADDR_VAR 0 10
45056: PUSH
45057: LD_VAR 0 10
45061: PUSH
45062: LD_VAR 0 6
45066: PPUSH
45067: CALL_OW 311
45071: PPUSH
45072: LD_INT 3
45074: PPUSH
45075: CALL_OW 259
45079: PUSH
45080: LD_INT 4
45082: MUL
45083: MUL
45084: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45085: LD_VAR 0 6
45089: PPUSH
45090: CALL_OW 263
45094: PUSH
45095: LD_INT 2
45097: EQUAL
45098: IFFALSE 45149
// begin j := IsControledBy ( i ) ;
45100: LD_ADDR_VAR 0 7
45104: PUSH
45105: LD_VAR 0 6
45109: PPUSH
45110: CALL_OW 312
45114: ST_TO_ADDR
// if j then
45115: LD_VAR 0 7
45119: IFFALSE 45149
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45121: LD_ADDR_VAR 0 10
45125: PUSH
45126: LD_VAR 0 10
45130: PUSH
45131: LD_VAR 0 7
45135: PPUSH
45136: LD_INT 3
45138: PPUSH
45139: CALL_OW 259
45143: PUSH
45144: LD_INT 3
45146: MUL
45147: MUL
45148: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45149: LD_VAR 0 6
45153: PPUSH
45154: CALL_OW 264
45158: PUSH
45159: LD_INT 5
45161: PUSH
45162: LD_INT 6
45164: PUSH
45165: LD_INT 46
45167: PUSH
45168: LD_INT 44
45170: PUSH
45171: LD_INT 47
45173: PUSH
45174: LD_INT 45
45176: PUSH
45177: LD_INT 28
45179: PUSH
45180: LD_INT 7
45182: PUSH
45183: LD_INT 27
45185: PUSH
45186: LD_INT 29
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: IN
45201: PUSH
45202: LD_VAR 0 1
45206: PPUSH
45207: LD_INT 52
45209: PPUSH
45210: CALL_OW 321
45214: PUSH
45215: LD_INT 2
45217: EQUAL
45218: AND
45219: IFFALSE 45236
// bpoints := bpoints * 1.2 ;
45221: LD_ADDR_VAR 0 10
45225: PUSH
45226: LD_VAR 0 10
45230: PUSH
45231: LD_REAL  1.20000000000000E+0000
45234: MUL
45235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45236: LD_VAR 0 6
45240: PPUSH
45241: CALL_OW 264
45245: PUSH
45246: LD_INT 6
45248: PUSH
45249: LD_INT 46
45251: PUSH
45252: LD_INT 47
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: LIST
45259: IN
45260: IFFALSE 45277
// bpoints := bpoints * 1.2 ;
45262: LD_ADDR_VAR 0 10
45266: PUSH
45267: LD_VAR 0 10
45271: PUSH
45272: LD_REAL  1.20000000000000E+0000
45275: MUL
45276: ST_TO_ADDR
// end ; unit_building :
45277: GO 45291
45279: LD_INT 3
45281: DOUBLE
45282: EQUAL
45283: IFTRUE 45287
45285: GO 45290
45287: POP
// ; end ;
45288: GO 45291
45290: POP
// for j = 1 to 3 do
45291: LD_ADDR_VAR 0 7
45295: PUSH
45296: DOUBLE
45297: LD_INT 1
45299: DEC
45300: ST_TO_ADDR
45301: LD_INT 3
45303: PUSH
45304: FOR_TO
45305: IFFALSE 45358
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45307: LD_ADDR_VAR 0 5
45311: PUSH
45312: LD_VAR 0 5
45316: PPUSH
45317: LD_VAR 0 7
45321: PPUSH
45322: LD_VAR 0 5
45326: PUSH
45327: LD_VAR 0 7
45331: ARRAY
45332: PUSH
45333: LD_VAR 0 9
45337: PUSH
45338: LD_VAR 0 7
45342: ARRAY
45343: PUSH
45344: LD_VAR 0 10
45348: MUL
45349: PLUS
45350: PPUSH
45351: CALL_OW 1
45355: ST_TO_ADDR
45356: GO 45304
45358: POP
45359: POP
// end ;
45360: GO 43837
45362: POP
45363: POP
// result := Replace ( result , 4 , tmp ) ;
45364: LD_ADDR_VAR 0 5
45368: PUSH
45369: LD_VAR 0 5
45373: PPUSH
45374: LD_INT 4
45376: PPUSH
45377: LD_VAR 0 8
45381: PPUSH
45382: CALL_OW 1
45386: ST_TO_ADDR
// end ;
45387: LD_VAR 0 5
45391: RET
// export function DangerAtRange ( unit , range ) ; begin
45392: LD_INT 0
45394: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45395: LD_ADDR_VAR 0 3
45399: PUSH
45400: LD_VAR 0 1
45404: PPUSH
45405: CALL_OW 255
45409: PPUSH
45410: LD_VAR 0 1
45414: PPUSH
45415: CALL_OW 250
45419: PPUSH
45420: LD_VAR 0 1
45424: PPUSH
45425: CALL_OW 251
45429: PPUSH
45430: LD_VAR 0 2
45434: PPUSH
45435: CALL 43689 0 4
45439: ST_TO_ADDR
// end ;
45440: LD_VAR 0 3
45444: RET
// export function DangerInArea ( side , area ) ; begin
45445: LD_INT 0
45447: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45448: LD_ADDR_VAR 0 3
45452: PUSH
45453: LD_VAR 0 2
45457: PPUSH
45458: LD_INT 81
45460: PUSH
45461: LD_VAR 0 1
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PPUSH
45470: CALL_OW 70
45474: ST_TO_ADDR
// end ;
45475: LD_VAR 0 3
45479: RET
// export function IsExtension ( b ) ; begin
45480: LD_INT 0
45482: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45483: LD_ADDR_VAR 0 2
45487: PUSH
45488: LD_VAR 0 1
45492: PUSH
45493: LD_INT 23
45495: PUSH
45496: LD_INT 20
45498: PUSH
45499: LD_INT 22
45501: PUSH
45502: LD_INT 17
45504: PUSH
45505: LD_INT 24
45507: PUSH
45508: LD_INT 21
45510: PUSH
45511: LD_INT 19
45513: PUSH
45514: LD_INT 16
45516: PUSH
45517: LD_INT 25
45519: PUSH
45520: LD_INT 18
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: IN
45535: ST_TO_ADDR
// end ;
45536: LD_VAR 0 2
45540: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45541: LD_INT 0
45543: PPUSH
45544: PPUSH
45545: PPUSH
// result := [ ] ;
45546: LD_ADDR_VAR 0 4
45550: PUSH
45551: EMPTY
45552: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45553: LD_ADDR_VAR 0 5
45557: PUSH
45558: LD_VAR 0 2
45562: PPUSH
45563: LD_INT 21
45565: PUSH
45566: LD_INT 3
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PPUSH
45573: CALL_OW 70
45577: ST_TO_ADDR
// if not tmp then
45578: LD_VAR 0 5
45582: NOT
45583: IFFALSE 45587
// exit ;
45585: GO 45651
// if checkLink then
45587: LD_VAR 0 3
45591: IFFALSE 45641
// begin for i in tmp do
45593: LD_ADDR_VAR 0 6
45597: PUSH
45598: LD_VAR 0 5
45602: PUSH
45603: FOR_IN
45604: IFFALSE 45639
// if GetBase ( i ) <> base then
45606: LD_VAR 0 6
45610: PPUSH
45611: CALL_OW 274
45615: PUSH
45616: LD_VAR 0 1
45620: NONEQUAL
45621: IFFALSE 45637
// ComLinkToBase ( base , i ) ;
45623: LD_VAR 0 1
45627: PPUSH
45628: LD_VAR 0 6
45632: PPUSH
45633: CALL_OW 169
45637: GO 45603
45639: POP
45640: POP
// end ; result := tmp ;
45641: LD_ADDR_VAR 0 4
45645: PUSH
45646: LD_VAR 0 5
45650: ST_TO_ADDR
// end ;
45651: LD_VAR 0 4
45655: RET
// export function ComComplete ( units , b ) ; var i ; begin
45656: LD_INT 0
45658: PPUSH
45659: PPUSH
// if not units then
45660: LD_VAR 0 1
45664: NOT
45665: IFFALSE 45669
// exit ;
45667: GO 45759
// for i in units do
45669: LD_ADDR_VAR 0 4
45673: PUSH
45674: LD_VAR 0 1
45678: PUSH
45679: FOR_IN
45680: IFFALSE 45757
// if BuildingStatus ( b ) = bs_build then
45682: LD_VAR 0 2
45686: PPUSH
45687: CALL_OW 461
45691: PUSH
45692: LD_INT 1
45694: EQUAL
45695: IFFALSE 45755
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45697: LD_VAR 0 4
45701: PPUSH
45702: LD_STRING h
45704: PUSH
45705: LD_VAR 0 2
45709: PPUSH
45710: CALL_OW 250
45714: PUSH
45715: LD_VAR 0 2
45719: PPUSH
45720: CALL_OW 251
45724: PUSH
45725: LD_VAR 0 2
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: PUSH
45748: EMPTY
45749: LIST
45750: PPUSH
45751: CALL_OW 446
45755: GO 45679
45757: POP
45758: POP
// end ;
45759: LD_VAR 0 3
45763: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45764: LD_INT 0
45766: PPUSH
45767: PPUSH
45768: PPUSH
45769: PPUSH
45770: PPUSH
45771: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45772: LD_VAR 0 1
45776: NOT
45777: PUSH
45778: LD_VAR 0 1
45782: PPUSH
45783: CALL_OW 263
45787: PUSH
45788: LD_INT 2
45790: NONEQUAL
45791: OR
45792: IFFALSE 45796
// exit ;
45794: GO 46112
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45796: LD_ADDR_VAR 0 6
45800: PUSH
45801: LD_INT 22
45803: PUSH
45804: LD_VAR 0 1
45808: PPUSH
45809: CALL_OW 255
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 2
45820: PUSH
45821: LD_INT 30
45823: PUSH
45824: LD_INT 36
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 34
45833: PUSH
45834: LD_INT 31
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: LIST
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PPUSH
45850: CALL_OW 69
45854: ST_TO_ADDR
// if not tmp then
45855: LD_VAR 0 6
45859: NOT
45860: IFFALSE 45864
// exit ;
45862: GO 46112
// result := [ ] ;
45864: LD_ADDR_VAR 0 2
45868: PUSH
45869: EMPTY
45870: ST_TO_ADDR
// for i in tmp do
45871: LD_ADDR_VAR 0 3
45875: PUSH
45876: LD_VAR 0 6
45880: PUSH
45881: FOR_IN
45882: IFFALSE 45953
// begin t := UnitsInside ( i ) ;
45884: LD_ADDR_VAR 0 4
45888: PUSH
45889: LD_VAR 0 3
45893: PPUSH
45894: CALL_OW 313
45898: ST_TO_ADDR
// if t then
45899: LD_VAR 0 4
45903: IFFALSE 45951
// for j in t do
45905: LD_ADDR_VAR 0 7
45909: PUSH
45910: LD_VAR 0 4
45914: PUSH
45915: FOR_IN
45916: IFFALSE 45949
// result := Replace ( result , result + 1 , j ) ;
45918: LD_ADDR_VAR 0 2
45922: PUSH
45923: LD_VAR 0 2
45927: PPUSH
45928: LD_VAR 0 2
45932: PUSH
45933: LD_INT 1
45935: PLUS
45936: PPUSH
45937: LD_VAR 0 7
45941: PPUSH
45942: CALL_OW 1
45946: ST_TO_ADDR
45947: GO 45915
45949: POP
45950: POP
// end ;
45951: GO 45881
45953: POP
45954: POP
// if not result then
45955: LD_VAR 0 2
45959: NOT
45960: IFFALSE 45964
// exit ;
45962: GO 46112
// mech := result [ 1 ] ;
45964: LD_ADDR_VAR 0 5
45968: PUSH
45969: LD_VAR 0 2
45973: PUSH
45974: LD_INT 1
45976: ARRAY
45977: ST_TO_ADDR
// if result > 1 then
45978: LD_VAR 0 2
45982: PUSH
45983: LD_INT 1
45985: GREATER
45986: IFFALSE 46098
// begin for i = 2 to result do
45988: LD_ADDR_VAR 0 3
45992: PUSH
45993: DOUBLE
45994: LD_INT 2
45996: DEC
45997: ST_TO_ADDR
45998: LD_VAR 0 2
46002: PUSH
46003: FOR_TO
46004: IFFALSE 46096
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46006: LD_ADDR_VAR 0 4
46010: PUSH
46011: LD_VAR 0 2
46015: PUSH
46016: LD_VAR 0 3
46020: ARRAY
46021: PPUSH
46022: LD_INT 3
46024: PPUSH
46025: CALL_OW 259
46029: PUSH
46030: LD_VAR 0 2
46034: PUSH
46035: LD_VAR 0 3
46039: ARRAY
46040: PPUSH
46041: CALL_OW 432
46045: MINUS
46046: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46047: LD_VAR 0 4
46051: PUSH
46052: LD_VAR 0 5
46056: PPUSH
46057: LD_INT 3
46059: PPUSH
46060: CALL_OW 259
46064: PUSH
46065: LD_VAR 0 5
46069: PPUSH
46070: CALL_OW 432
46074: MINUS
46075: GREATEREQUAL
46076: IFFALSE 46094
// mech := result [ i ] ;
46078: LD_ADDR_VAR 0 5
46082: PUSH
46083: LD_VAR 0 2
46087: PUSH
46088: LD_VAR 0 3
46092: ARRAY
46093: ST_TO_ADDR
// end ;
46094: GO 46003
46096: POP
46097: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46098: LD_VAR 0 1
46102: PPUSH
46103: LD_VAR 0 5
46107: PPUSH
46108: CALL_OW 135
// end ;
46112: LD_VAR 0 2
46116: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46117: LD_INT 0
46119: PPUSH
46120: PPUSH
46121: PPUSH
46122: PPUSH
46123: PPUSH
46124: PPUSH
46125: PPUSH
46126: PPUSH
46127: PPUSH
46128: PPUSH
46129: PPUSH
46130: PPUSH
46131: PPUSH
// result := [ ] ;
46132: LD_ADDR_VAR 0 7
46136: PUSH
46137: EMPTY
46138: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46139: LD_VAR 0 1
46143: PPUSH
46144: CALL_OW 266
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: IN
46159: NOT
46160: IFFALSE 46164
// exit ;
46162: GO 47798
// if name then
46164: LD_VAR 0 3
46168: IFFALSE 46184
// SetBName ( base_dep , name ) ;
46170: LD_VAR 0 1
46174: PPUSH
46175: LD_VAR 0 3
46179: PPUSH
46180: CALL_OW 500
// base := GetBase ( base_dep ) ;
46184: LD_ADDR_VAR 0 15
46188: PUSH
46189: LD_VAR 0 1
46193: PPUSH
46194: CALL_OW 274
46198: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46199: LD_ADDR_VAR 0 16
46203: PUSH
46204: LD_VAR 0 1
46208: PPUSH
46209: CALL_OW 255
46213: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46214: LD_ADDR_VAR 0 17
46218: PUSH
46219: LD_VAR 0 1
46223: PPUSH
46224: CALL_OW 248
46228: ST_TO_ADDR
// if sources then
46229: LD_VAR 0 5
46233: IFFALSE 46280
// for i = 1 to 3 do
46235: LD_ADDR_VAR 0 8
46239: PUSH
46240: DOUBLE
46241: LD_INT 1
46243: DEC
46244: ST_TO_ADDR
46245: LD_INT 3
46247: PUSH
46248: FOR_TO
46249: IFFALSE 46278
// AddResourceType ( base , i , sources [ i ] ) ;
46251: LD_VAR 0 15
46255: PPUSH
46256: LD_VAR 0 8
46260: PPUSH
46261: LD_VAR 0 5
46265: PUSH
46266: LD_VAR 0 8
46270: ARRAY
46271: PPUSH
46272: CALL_OW 276
46276: GO 46248
46278: POP
46279: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46280: LD_ADDR_VAR 0 18
46284: PUSH
46285: LD_VAR 0 15
46289: PPUSH
46290: LD_VAR 0 2
46294: PPUSH
46295: LD_INT 1
46297: PPUSH
46298: CALL 45541 0 3
46302: ST_TO_ADDR
// InitHc ;
46303: CALL_OW 19
// InitUc ;
46307: CALL_OW 18
// uc_side := side ;
46311: LD_ADDR_OWVAR 20
46315: PUSH
46316: LD_VAR 0 16
46320: ST_TO_ADDR
// uc_nation := nation ;
46321: LD_ADDR_OWVAR 21
46325: PUSH
46326: LD_VAR 0 17
46330: ST_TO_ADDR
// if buildings then
46331: LD_VAR 0 18
46335: IFFALSE 47657
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46337: LD_ADDR_VAR 0 19
46341: PUSH
46342: LD_VAR 0 18
46346: PPUSH
46347: LD_INT 2
46349: PUSH
46350: LD_INT 30
46352: PUSH
46353: LD_INT 29
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 30
46362: PUSH
46363: LD_INT 30
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: LIST
46374: PPUSH
46375: CALL_OW 72
46379: ST_TO_ADDR
// if tmp then
46380: LD_VAR 0 19
46384: IFFALSE 46432
// for i in tmp do
46386: LD_ADDR_VAR 0 8
46390: PUSH
46391: LD_VAR 0 19
46395: PUSH
46396: FOR_IN
46397: IFFALSE 46430
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46399: LD_VAR 0 8
46403: PPUSH
46404: CALL_OW 250
46408: PPUSH
46409: LD_VAR 0 8
46413: PPUSH
46414: CALL_OW 251
46418: PPUSH
46419: LD_VAR 0 16
46423: PPUSH
46424: CALL_OW 441
46428: GO 46396
46430: POP
46431: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46432: LD_VAR 0 18
46436: PPUSH
46437: LD_INT 2
46439: PUSH
46440: LD_INT 30
46442: PUSH
46443: LD_INT 32
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 30
46452: PUSH
46453: LD_INT 33
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: LIST
46464: PPUSH
46465: CALL_OW 72
46469: IFFALSE 46557
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46471: LD_ADDR_VAR 0 8
46475: PUSH
46476: LD_VAR 0 18
46480: PPUSH
46481: LD_INT 2
46483: PUSH
46484: LD_INT 30
46486: PUSH
46487: LD_INT 32
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 30
46496: PUSH
46497: LD_INT 33
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: LIST
46508: PPUSH
46509: CALL_OW 72
46513: PUSH
46514: FOR_IN
46515: IFFALSE 46555
// begin if not GetBWeapon ( i ) then
46517: LD_VAR 0 8
46521: PPUSH
46522: CALL_OW 269
46526: NOT
46527: IFFALSE 46553
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46529: LD_VAR 0 8
46533: PPUSH
46534: LD_VAR 0 8
46538: PPUSH
46539: LD_VAR 0 2
46543: PPUSH
46544: CALL 47803 0 2
46548: PPUSH
46549: CALL_OW 431
// end ;
46553: GO 46514
46555: POP
46556: POP
// end ; for i = 1 to personel do
46557: LD_ADDR_VAR 0 8
46561: PUSH
46562: DOUBLE
46563: LD_INT 1
46565: DEC
46566: ST_TO_ADDR
46567: LD_VAR 0 6
46571: PUSH
46572: FOR_TO
46573: IFFALSE 47637
// begin if i > 4 then
46575: LD_VAR 0 8
46579: PUSH
46580: LD_INT 4
46582: GREATER
46583: IFFALSE 46587
// break ;
46585: GO 47637
// case i of 1 :
46587: LD_VAR 0 8
46591: PUSH
46592: LD_INT 1
46594: DOUBLE
46595: EQUAL
46596: IFTRUE 46600
46598: GO 46680
46600: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46601: LD_ADDR_VAR 0 12
46605: PUSH
46606: LD_VAR 0 18
46610: PPUSH
46611: LD_INT 22
46613: PUSH
46614: LD_VAR 0 16
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 58
46625: PUSH
46626: EMPTY
46627: LIST
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: LD_INT 30
46634: PUSH
46635: LD_INT 32
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 30
46644: PUSH
46645: LD_INT 4
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 30
46654: PUSH
46655: LD_INT 5
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: LIST
46672: PPUSH
46673: CALL_OW 72
46677: ST_TO_ADDR
46678: GO 46902
46680: LD_INT 2
46682: DOUBLE
46683: EQUAL
46684: IFTRUE 46688
46686: GO 46750
46688: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46689: LD_ADDR_VAR 0 12
46693: PUSH
46694: LD_VAR 0 18
46698: PPUSH
46699: LD_INT 22
46701: PUSH
46702: LD_VAR 0 16
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: LD_INT 30
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 30
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: LIST
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PPUSH
46743: CALL_OW 72
46747: ST_TO_ADDR
46748: GO 46902
46750: LD_INT 3
46752: DOUBLE
46753: EQUAL
46754: IFTRUE 46758
46756: GO 46820
46758: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46759: LD_ADDR_VAR 0 12
46763: PUSH
46764: LD_VAR 0 18
46768: PPUSH
46769: LD_INT 22
46771: PUSH
46772: LD_VAR 0 16
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 2
46783: PUSH
46784: LD_INT 30
46786: PUSH
46787: LD_INT 2
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 30
46796: PUSH
46797: LD_INT 3
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: LIST
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PPUSH
46813: CALL_OW 72
46817: ST_TO_ADDR
46818: GO 46902
46820: LD_INT 4
46822: DOUBLE
46823: EQUAL
46824: IFTRUE 46828
46826: GO 46901
46828: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46829: LD_ADDR_VAR 0 12
46833: PUSH
46834: LD_VAR 0 18
46838: PPUSH
46839: LD_INT 22
46841: PUSH
46842: LD_VAR 0 16
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: LD_INT 30
46856: PUSH
46857: LD_INT 6
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 30
46866: PUSH
46867: LD_INT 7
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 30
46876: PUSH
46877: LD_INT 8
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PPUSH
46894: CALL_OW 72
46898: ST_TO_ADDR
46899: GO 46902
46901: POP
// if i = 1 then
46902: LD_VAR 0 8
46906: PUSH
46907: LD_INT 1
46909: EQUAL
46910: IFFALSE 47021
// begin tmp := [ ] ;
46912: LD_ADDR_VAR 0 19
46916: PUSH
46917: EMPTY
46918: ST_TO_ADDR
// for j in f do
46919: LD_ADDR_VAR 0 9
46923: PUSH
46924: LD_VAR 0 12
46928: PUSH
46929: FOR_IN
46930: IFFALSE 47003
// if GetBType ( j ) = b_bunker then
46932: LD_VAR 0 9
46936: PPUSH
46937: CALL_OW 266
46941: PUSH
46942: LD_INT 32
46944: EQUAL
46945: IFFALSE 46972
// tmp := Insert ( tmp , 1 , j ) else
46947: LD_ADDR_VAR 0 19
46951: PUSH
46952: LD_VAR 0 19
46956: PPUSH
46957: LD_INT 1
46959: PPUSH
46960: LD_VAR 0 9
46964: PPUSH
46965: CALL_OW 2
46969: ST_TO_ADDR
46970: GO 47001
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46972: LD_ADDR_VAR 0 19
46976: PUSH
46977: LD_VAR 0 19
46981: PPUSH
46982: LD_VAR 0 19
46986: PUSH
46987: LD_INT 1
46989: PLUS
46990: PPUSH
46991: LD_VAR 0 9
46995: PPUSH
46996: CALL_OW 2
47000: ST_TO_ADDR
47001: GO 46929
47003: POP
47004: POP
// if tmp then
47005: LD_VAR 0 19
47009: IFFALSE 47021
// f := tmp ;
47011: LD_ADDR_VAR 0 12
47015: PUSH
47016: LD_VAR 0 19
47020: ST_TO_ADDR
// end ; x := personel [ i ] ;
47021: LD_ADDR_VAR 0 13
47025: PUSH
47026: LD_VAR 0 6
47030: PUSH
47031: LD_VAR 0 8
47035: ARRAY
47036: ST_TO_ADDR
// if x = - 1 then
47037: LD_VAR 0 13
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: EQUAL
47046: IFFALSE 47255
// begin for j in f do
47048: LD_ADDR_VAR 0 9
47052: PUSH
47053: LD_VAR 0 12
47057: PUSH
47058: FOR_IN
47059: IFFALSE 47251
// repeat InitHc ;
47061: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47065: LD_VAR 0 9
47069: PPUSH
47070: CALL_OW 266
47074: PUSH
47075: LD_INT 5
47077: EQUAL
47078: IFFALSE 47148
// begin if UnitsInside ( j ) < 3 then
47080: LD_VAR 0 9
47084: PPUSH
47085: CALL_OW 313
47089: PUSH
47090: LD_INT 3
47092: LESS
47093: IFFALSE 47129
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47095: LD_INT 0
47097: PPUSH
47098: LD_INT 5
47100: PUSH
47101: LD_INT 8
47103: PUSH
47104: LD_INT 9
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: LIST
47111: PUSH
47112: LD_VAR 0 17
47116: ARRAY
47117: PPUSH
47118: LD_VAR 0 4
47122: PPUSH
47123: CALL_OW 380
47127: GO 47146
// PrepareHuman ( false , i , skill ) ;
47129: LD_INT 0
47131: PPUSH
47132: LD_VAR 0 8
47136: PPUSH
47137: LD_VAR 0 4
47141: PPUSH
47142: CALL_OW 380
// end else
47146: GO 47165
// PrepareHuman ( false , i , skill ) ;
47148: LD_INT 0
47150: PPUSH
47151: LD_VAR 0 8
47155: PPUSH
47156: LD_VAR 0 4
47160: PPUSH
47161: CALL_OW 380
// un := CreateHuman ;
47165: LD_ADDR_VAR 0 14
47169: PUSH
47170: CALL_OW 44
47174: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47175: LD_ADDR_VAR 0 7
47179: PUSH
47180: LD_VAR 0 7
47184: PPUSH
47185: LD_INT 1
47187: PPUSH
47188: LD_VAR 0 14
47192: PPUSH
47193: CALL_OW 2
47197: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47198: LD_VAR 0 14
47202: PPUSH
47203: LD_VAR 0 9
47207: PPUSH
47208: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47212: LD_VAR 0 9
47216: PPUSH
47217: CALL_OW 313
47221: PUSH
47222: LD_INT 6
47224: EQUAL
47225: PUSH
47226: LD_VAR 0 9
47230: PPUSH
47231: CALL_OW 266
47235: PUSH
47236: LD_INT 32
47238: PUSH
47239: LD_INT 31
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: IN
47246: OR
47247: IFFALSE 47061
47249: GO 47058
47251: POP
47252: POP
// end else
47253: GO 47635
// for j = 1 to x do
47255: LD_ADDR_VAR 0 9
47259: PUSH
47260: DOUBLE
47261: LD_INT 1
47263: DEC
47264: ST_TO_ADDR
47265: LD_VAR 0 13
47269: PUSH
47270: FOR_TO
47271: IFFALSE 47633
// begin InitHc ;
47273: CALL_OW 19
// if not f then
47277: LD_VAR 0 12
47281: NOT
47282: IFFALSE 47371
// begin PrepareHuman ( false , i , skill ) ;
47284: LD_INT 0
47286: PPUSH
47287: LD_VAR 0 8
47291: PPUSH
47292: LD_VAR 0 4
47296: PPUSH
47297: CALL_OW 380
// un := CreateHuman ;
47301: LD_ADDR_VAR 0 14
47305: PUSH
47306: CALL_OW 44
47310: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47311: LD_ADDR_VAR 0 7
47315: PUSH
47316: LD_VAR 0 7
47320: PPUSH
47321: LD_INT 1
47323: PPUSH
47324: LD_VAR 0 14
47328: PPUSH
47329: CALL_OW 2
47333: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47334: LD_VAR 0 14
47338: PPUSH
47339: LD_VAR 0 1
47343: PPUSH
47344: CALL_OW 250
47348: PPUSH
47349: LD_VAR 0 1
47353: PPUSH
47354: CALL_OW 251
47358: PPUSH
47359: LD_INT 10
47361: PPUSH
47362: LD_INT 0
47364: PPUSH
47365: CALL_OW 50
// continue ;
47369: GO 47270
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47371: LD_VAR 0 12
47375: PUSH
47376: LD_INT 1
47378: ARRAY
47379: PPUSH
47380: CALL_OW 313
47384: PUSH
47385: LD_VAR 0 12
47389: PUSH
47390: LD_INT 1
47392: ARRAY
47393: PPUSH
47394: CALL_OW 266
47398: PUSH
47399: LD_INT 32
47401: PUSH
47402: LD_INT 31
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: IN
47409: AND
47410: PUSH
47411: LD_VAR 0 12
47415: PUSH
47416: LD_INT 1
47418: ARRAY
47419: PPUSH
47420: CALL_OW 313
47424: PUSH
47425: LD_INT 6
47427: EQUAL
47428: OR
47429: IFFALSE 47449
// f := Delete ( f , 1 ) ;
47431: LD_ADDR_VAR 0 12
47435: PUSH
47436: LD_VAR 0 12
47440: PPUSH
47441: LD_INT 1
47443: PPUSH
47444: CALL_OW 3
47448: ST_TO_ADDR
// if not f then
47449: LD_VAR 0 12
47453: NOT
47454: IFFALSE 47472
// begin x := x + 2 ;
47456: LD_ADDR_VAR 0 13
47460: PUSH
47461: LD_VAR 0 13
47465: PUSH
47466: LD_INT 2
47468: PLUS
47469: ST_TO_ADDR
// continue ;
47470: GO 47270
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47472: LD_VAR 0 12
47476: PUSH
47477: LD_INT 1
47479: ARRAY
47480: PPUSH
47481: CALL_OW 266
47485: PUSH
47486: LD_INT 5
47488: EQUAL
47489: IFFALSE 47563
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47491: LD_VAR 0 12
47495: PUSH
47496: LD_INT 1
47498: ARRAY
47499: PPUSH
47500: CALL_OW 313
47504: PUSH
47505: LD_INT 3
47507: LESS
47508: IFFALSE 47544
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47510: LD_INT 0
47512: PPUSH
47513: LD_INT 5
47515: PUSH
47516: LD_INT 8
47518: PUSH
47519: LD_INT 9
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: LIST
47526: PUSH
47527: LD_VAR 0 17
47531: ARRAY
47532: PPUSH
47533: LD_VAR 0 4
47537: PPUSH
47538: CALL_OW 380
47542: GO 47561
// PrepareHuman ( false , i , skill ) ;
47544: LD_INT 0
47546: PPUSH
47547: LD_VAR 0 8
47551: PPUSH
47552: LD_VAR 0 4
47556: PPUSH
47557: CALL_OW 380
// end else
47561: GO 47580
// PrepareHuman ( false , i , skill ) ;
47563: LD_INT 0
47565: PPUSH
47566: LD_VAR 0 8
47570: PPUSH
47571: LD_VAR 0 4
47575: PPUSH
47576: CALL_OW 380
// un := CreateHuman ;
47580: LD_ADDR_VAR 0 14
47584: PUSH
47585: CALL_OW 44
47589: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47590: LD_ADDR_VAR 0 7
47594: PUSH
47595: LD_VAR 0 7
47599: PPUSH
47600: LD_INT 1
47602: PPUSH
47603: LD_VAR 0 14
47607: PPUSH
47608: CALL_OW 2
47612: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47613: LD_VAR 0 14
47617: PPUSH
47618: LD_VAR 0 12
47622: PUSH
47623: LD_INT 1
47625: ARRAY
47626: PPUSH
47627: CALL_OW 52
// end ;
47631: GO 47270
47633: POP
47634: POP
// end ;
47635: GO 46572
47637: POP
47638: POP
// result := result ^ buildings ;
47639: LD_ADDR_VAR 0 7
47643: PUSH
47644: LD_VAR 0 7
47648: PUSH
47649: LD_VAR 0 18
47653: ADD
47654: ST_TO_ADDR
// end else
47655: GO 47798
// begin for i = 1 to personel do
47657: LD_ADDR_VAR 0 8
47661: PUSH
47662: DOUBLE
47663: LD_INT 1
47665: DEC
47666: ST_TO_ADDR
47667: LD_VAR 0 6
47671: PUSH
47672: FOR_TO
47673: IFFALSE 47796
// begin if i > 4 then
47675: LD_VAR 0 8
47679: PUSH
47680: LD_INT 4
47682: GREATER
47683: IFFALSE 47687
// break ;
47685: GO 47796
// x := personel [ i ] ;
47687: LD_ADDR_VAR 0 13
47691: PUSH
47692: LD_VAR 0 6
47696: PUSH
47697: LD_VAR 0 8
47701: ARRAY
47702: ST_TO_ADDR
// if x = - 1 then
47703: LD_VAR 0 13
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: EQUAL
47712: IFFALSE 47716
// continue ;
47714: GO 47672
// PrepareHuman ( false , i , skill ) ;
47716: LD_INT 0
47718: PPUSH
47719: LD_VAR 0 8
47723: PPUSH
47724: LD_VAR 0 4
47728: PPUSH
47729: CALL_OW 380
// un := CreateHuman ;
47733: LD_ADDR_VAR 0 14
47737: PUSH
47738: CALL_OW 44
47742: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47743: LD_VAR 0 14
47747: PPUSH
47748: LD_VAR 0 1
47752: PPUSH
47753: CALL_OW 250
47757: PPUSH
47758: LD_VAR 0 1
47762: PPUSH
47763: CALL_OW 251
47767: PPUSH
47768: LD_INT 10
47770: PPUSH
47771: LD_INT 0
47773: PPUSH
47774: CALL_OW 50
// result := result ^ un ;
47778: LD_ADDR_VAR 0 7
47782: PUSH
47783: LD_VAR 0 7
47787: PUSH
47788: LD_VAR 0 14
47792: ADD
47793: ST_TO_ADDR
// end ;
47794: GO 47672
47796: POP
47797: POP
// end ; end ;
47798: LD_VAR 0 7
47802: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47803: LD_INT 0
47805: PPUSH
47806: PPUSH
47807: PPUSH
47808: PPUSH
47809: PPUSH
47810: PPUSH
47811: PPUSH
47812: PPUSH
47813: PPUSH
47814: PPUSH
47815: PPUSH
47816: PPUSH
47817: PPUSH
47818: PPUSH
47819: PPUSH
47820: PPUSH
// result := false ;
47821: LD_ADDR_VAR 0 3
47825: PUSH
47826: LD_INT 0
47828: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47829: LD_VAR 0 1
47833: NOT
47834: PUSH
47835: LD_VAR 0 1
47839: PPUSH
47840: CALL_OW 266
47844: PUSH
47845: LD_INT 32
47847: PUSH
47848: LD_INT 33
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: IN
47855: NOT
47856: OR
47857: IFFALSE 47861
// exit ;
47859: GO 48970
// nat := GetNation ( tower ) ;
47861: LD_ADDR_VAR 0 12
47865: PUSH
47866: LD_VAR 0 1
47870: PPUSH
47871: CALL_OW 248
47875: ST_TO_ADDR
// side := GetSide ( tower ) ;
47876: LD_ADDR_VAR 0 16
47880: PUSH
47881: LD_VAR 0 1
47885: PPUSH
47886: CALL_OW 255
47890: ST_TO_ADDR
// x := GetX ( tower ) ;
47891: LD_ADDR_VAR 0 10
47895: PUSH
47896: LD_VAR 0 1
47900: PPUSH
47901: CALL_OW 250
47905: ST_TO_ADDR
// y := GetY ( tower ) ;
47906: LD_ADDR_VAR 0 11
47910: PUSH
47911: LD_VAR 0 1
47915: PPUSH
47916: CALL_OW 251
47920: ST_TO_ADDR
// if not x or not y then
47921: LD_VAR 0 10
47925: NOT
47926: PUSH
47927: LD_VAR 0 11
47931: NOT
47932: OR
47933: IFFALSE 47937
// exit ;
47935: GO 48970
// weapon := 0 ;
47937: LD_ADDR_VAR 0 18
47941: PUSH
47942: LD_INT 0
47944: ST_TO_ADDR
// fac_list := [ ] ;
47945: LD_ADDR_VAR 0 17
47949: PUSH
47950: EMPTY
47951: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47952: LD_ADDR_VAR 0 6
47956: PUSH
47957: LD_VAR 0 1
47961: PPUSH
47962: CALL_OW 274
47966: PPUSH
47967: LD_VAR 0 2
47971: PPUSH
47972: LD_INT 0
47974: PPUSH
47975: CALL 45541 0 3
47979: PPUSH
47980: LD_INT 30
47982: PUSH
47983: LD_INT 3
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PPUSH
47990: CALL_OW 72
47994: ST_TO_ADDR
// if not factories then
47995: LD_VAR 0 6
47999: NOT
48000: IFFALSE 48004
// exit ;
48002: GO 48970
// for i in factories do
48004: LD_ADDR_VAR 0 8
48008: PUSH
48009: LD_VAR 0 6
48013: PUSH
48014: FOR_IN
48015: IFFALSE 48040
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48017: LD_ADDR_VAR 0 17
48021: PUSH
48022: LD_VAR 0 17
48026: PUSH
48027: LD_VAR 0 8
48031: PPUSH
48032: CALL_OW 478
48036: UNION
48037: ST_TO_ADDR
48038: GO 48014
48040: POP
48041: POP
// if not fac_list then
48042: LD_VAR 0 17
48046: NOT
48047: IFFALSE 48051
// exit ;
48049: GO 48970
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48051: LD_ADDR_VAR 0 5
48055: PUSH
48056: LD_INT 4
48058: PUSH
48059: LD_INT 5
48061: PUSH
48062: LD_INT 9
48064: PUSH
48065: LD_INT 10
48067: PUSH
48068: LD_INT 6
48070: PUSH
48071: LD_INT 7
48073: PUSH
48074: LD_INT 11
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 27
48088: PUSH
48089: LD_INT 28
48091: PUSH
48092: LD_INT 26
48094: PUSH
48095: LD_INT 30
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 43
48106: PUSH
48107: LD_INT 44
48109: PUSH
48110: LD_INT 46
48112: PUSH
48113: LD_INT 45
48115: PUSH
48116: LD_INT 47
48118: PUSH
48119: LD_INT 49
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: LIST
48134: PUSH
48135: LD_VAR 0 12
48139: ARRAY
48140: ST_TO_ADDR
// list := list isect fac_list ;
48141: LD_ADDR_VAR 0 5
48145: PUSH
48146: LD_VAR 0 5
48150: PUSH
48151: LD_VAR 0 17
48155: ISECT
48156: ST_TO_ADDR
// if not list then
48157: LD_VAR 0 5
48161: NOT
48162: IFFALSE 48166
// exit ;
48164: GO 48970
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48166: LD_VAR 0 12
48170: PUSH
48171: LD_INT 3
48173: EQUAL
48174: PUSH
48175: LD_INT 49
48177: PUSH
48178: LD_VAR 0 5
48182: IN
48183: AND
48184: PUSH
48185: LD_INT 31
48187: PPUSH
48188: LD_VAR 0 16
48192: PPUSH
48193: CALL_OW 321
48197: PUSH
48198: LD_INT 2
48200: EQUAL
48201: AND
48202: IFFALSE 48262
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48204: LD_INT 22
48206: PUSH
48207: LD_VAR 0 16
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 35
48218: PUSH
48219: LD_INT 49
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 91
48228: PUSH
48229: LD_VAR 0 1
48233: PUSH
48234: LD_INT 10
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: LIST
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: LIST
48246: PPUSH
48247: CALL_OW 69
48251: NOT
48252: IFFALSE 48262
// weapon := ru_time_lapser ;
48254: LD_ADDR_VAR 0 18
48258: PUSH
48259: LD_INT 49
48261: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48262: LD_VAR 0 12
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: LD_INT 2
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: IN
48277: PUSH
48278: LD_INT 11
48280: PUSH
48281: LD_VAR 0 5
48285: IN
48286: PUSH
48287: LD_INT 30
48289: PUSH
48290: LD_VAR 0 5
48294: IN
48295: OR
48296: AND
48297: PUSH
48298: LD_INT 6
48300: PPUSH
48301: LD_VAR 0 16
48305: PPUSH
48306: CALL_OW 321
48310: PUSH
48311: LD_INT 2
48313: EQUAL
48314: AND
48315: IFFALSE 48480
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48317: LD_INT 22
48319: PUSH
48320: LD_VAR 0 16
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: LD_INT 35
48334: PUSH
48335: LD_INT 11
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 35
48344: PUSH
48345: LD_INT 30
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 91
48359: PUSH
48360: LD_VAR 0 1
48364: PUSH
48365: LD_INT 18
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: LIST
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: LIST
48377: PPUSH
48378: CALL_OW 69
48382: NOT
48383: PUSH
48384: LD_INT 22
48386: PUSH
48387: LD_VAR 0 16
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: LD_INT 30
48401: PUSH
48402: LD_INT 32
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 30
48411: PUSH
48412: LD_INT 33
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 91
48426: PUSH
48427: LD_VAR 0 1
48431: PUSH
48432: LD_INT 12
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: LIST
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: LIST
48444: PUSH
48445: EMPTY
48446: LIST
48447: PPUSH
48448: CALL_OW 69
48452: PUSH
48453: LD_INT 2
48455: GREATER
48456: AND
48457: IFFALSE 48480
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48459: LD_ADDR_VAR 0 18
48463: PUSH
48464: LD_INT 11
48466: PUSH
48467: LD_INT 30
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_VAR 0 12
48478: ARRAY
48479: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48480: LD_VAR 0 18
48484: NOT
48485: PUSH
48486: LD_INT 40
48488: PPUSH
48489: LD_VAR 0 16
48493: PPUSH
48494: CALL_OW 321
48498: PUSH
48499: LD_INT 2
48501: EQUAL
48502: AND
48503: PUSH
48504: LD_INT 7
48506: PUSH
48507: LD_VAR 0 5
48511: IN
48512: PUSH
48513: LD_INT 28
48515: PUSH
48516: LD_VAR 0 5
48520: IN
48521: OR
48522: PUSH
48523: LD_INT 45
48525: PUSH
48526: LD_VAR 0 5
48530: IN
48531: OR
48532: AND
48533: IFFALSE 48787
// begin hex := GetHexInfo ( x , y ) ;
48535: LD_ADDR_VAR 0 4
48539: PUSH
48540: LD_VAR 0 10
48544: PPUSH
48545: LD_VAR 0 11
48549: PPUSH
48550: CALL_OW 546
48554: ST_TO_ADDR
// if hex [ 1 ] then
48555: LD_VAR 0 4
48559: PUSH
48560: LD_INT 1
48562: ARRAY
48563: IFFALSE 48567
// exit ;
48565: GO 48970
// height := hex [ 2 ] ;
48567: LD_ADDR_VAR 0 15
48571: PUSH
48572: LD_VAR 0 4
48576: PUSH
48577: LD_INT 2
48579: ARRAY
48580: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48581: LD_ADDR_VAR 0 14
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: LD_INT 2
48591: PUSH
48592: LD_INT 3
48594: PUSH
48595: LD_INT 5
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: ST_TO_ADDR
// for i in tmp do
48604: LD_ADDR_VAR 0 8
48608: PUSH
48609: LD_VAR 0 14
48613: PUSH
48614: FOR_IN
48615: IFFALSE 48785
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48617: LD_ADDR_VAR 0 9
48621: PUSH
48622: LD_VAR 0 10
48626: PPUSH
48627: LD_VAR 0 8
48631: PPUSH
48632: LD_INT 5
48634: PPUSH
48635: CALL_OW 272
48639: PUSH
48640: LD_VAR 0 11
48644: PPUSH
48645: LD_VAR 0 8
48649: PPUSH
48650: LD_INT 5
48652: PPUSH
48653: CALL_OW 273
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48662: LD_VAR 0 9
48666: PUSH
48667: LD_INT 1
48669: ARRAY
48670: PPUSH
48671: LD_VAR 0 9
48675: PUSH
48676: LD_INT 2
48678: ARRAY
48679: PPUSH
48680: CALL_OW 488
48684: IFFALSE 48783
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48686: LD_ADDR_VAR 0 4
48690: PUSH
48691: LD_VAR 0 9
48695: PUSH
48696: LD_INT 1
48698: ARRAY
48699: PPUSH
48700: LD_VAR 0 9
48704: PUSH
48705: LD_INT 2
48707: ARRAY
48708: PPUSH
48709: CALL_OW 546
48713: ST_TO_ADDR
// if hex [ 1 ] then
48714: LD_VAR 0 4
48718: PUSH
48719: LD_INT 1
48721: ARRAY
48722: IFFALSE 48726
// continue ;
48724: GO 48614
// h := hex [ 2 ] ;
48726: LD_ADDR_VAR 0 13
48730: PUSH
48731: LD_VAR 0 4
48735: PUSH
48736: LD_INT 2
48738: ARRAY
48739: ST_TO_ADDR
// if h + 7 < height then
48740: LD_VAR 0 13
48744: PUSH
48745: LD_INT 7
48747: PLUS
48748: PUSH
48749: LD_VAR 0 15
48753: LESS
48754: IFFALSE 48783
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48756: LD_ADDR_VAR 0 18
48760: PUSH
48761: LD_INT 7
48763: PUSH
48764: LD_INT 28
48766: PUSH
48767: LD_INT 45
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: LIST
48774: PUSH
48775: LD_VAR 0 12
48779: ARRAY
48780: ST_TO_ADDR
// break ;
48781: GO 48785
// end ; end ; end ;
48783: GO 48614
48785: POP
48786: POP
// end ; if not weapon then
48787: LD_VAR 0 18
48791: NOT
48792: IFFALSE 48852
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48794: LD_ADDR_VAR 0 5
48798: PUSH
48799: LD_VAR 0 5
48803: PUSH
48804: LD_INT 11
48806: PUSH
48807: LD_INT 30
48809: PUSH
48810: LD_INT 49
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: LIST
48817: DIFF
48818: ST_TO_ADDR
// if not list then
48819: LD_VAR 0 5
48823: NOT
48824: IFFALSE 48828
// exit ;
48826: GO 48970
// weapon := list [ rand ( 1 , list ) ] ;
48828: LD_ADDR_VAR 0 18
48832: PUSH
48833: LD_VAR 0 5
48837: PUSH
48838: LD_INT 1
48840: PPUSH
48841: LD_VAR 0 5
48845: PPUSH
48846: CALL_OW 12
48850: ARRAY
48851: ST_TO_ADDR
// end ; if weapon then
48852: LD_VAR 0 18
48856: IFFALSE 48970
// begin tmp := CostOfWeapon ( weapon ) ;
48858: LD_ADDR_VAR 0 14
48862: PUSH
48863: LD_VAR 0 18
48867: PPUSH
48868: CALL_OW 451
48872: ST_TO_ADDR
// j := GetBase ( tower ) ;
48873: LD_ADDR_VAR 0 9
48877: PUSH
48878: LD_VAR 0 1
48882: PPUSH
48883: CALL_OW 274
48887: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48888: LD_VAR 0 9
48892: PPUSH
48893: LD_INT 1
48895: PPUSH
48896: CALL_OW 275
48900: PUSH
48901: LD_VAR 0 14
48905: PUSH
48906: LD_INT 1
48908: ARRAY
48909: GREATEREQUAL
48910: PUSH
48911: LD_VAR 0 9
48915: PPUSH
48916: LD_INT 2
48918: PPUSH
48919: CALL_OW 275
48923: PUSH
48924: LD_VAR 0 14
48928: PUSH
48929: LD_INT 2
48931: ARRAY
48932: GREATEREQUAL
48933: AND
48934: PUSH
48935: LD_VAR 0 9
48939: PPUSH
48940: LD_INT 3
48942: PPUSH
48943: CALL_OW 275
48947: PUSH
48948: LD_VAR 0 14
48952: PUSH
48953: LD_INT 3
48955: ARRAY
48956: GREATEREQUAL
48957: AND
48958: IFFALSE 48970
// result := weapon ;
48960: LD_ADDR_VAR 0 3
48964: PUSH
48965: LD_VAR 0 18
48969: ST_TO_ADDR
// end ; end ;
48970: LD_VAR 0 3
48974: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48975: LD_INT 0
48977: PPUSH
48978: PPUSH
// result := true ;
48979: LD_ADDR_VAR 0 3
48983: PUSH
48984: LD_INT 1
48986: ST_TO_ADDR
// if array1 = array2 then
48987: LD_VAR 0 1
48991: PUSH
48992: LD_VAR 0 2
48996: EQUAL
48997: IFFALSE 49057
// begin for i = 1 to array1 do
48999: LD_ADDR_VAR 0 4
49003: PUSH
49004: DOUBLE
49005: LD_INT 1
49007: DEC
49008: ST_TO_ADDR
49009: LD_VAR 0 1
49013: PUSH
49014: FOR_TO
49015: IFFALSE 49053
// if array1 [ i ] <> array2 [ i ] then
49017: LD_VAR 0 1
49021: PUSH
49022: LD_VAR 0 4
49026: ARRAY
49027: PUSH
49028: LD_VAR 0 2
49032: PUSH
49033: LD_VAR 0 4
49037: ARRAY
49038: NONEQUAL
49039: IFFALSE 49051
// begin result := false ;
49041: LD_ADDR_VAR 0 3
49045: PUSH
49046: LD_INT 0
49048: ST_TO_ADDR
// break ;
49049: GO 49053
// end ;
49051: GO 49014
49053: POP
49054: POP
// end else
49055: GO 49065
// result := false ;
49057: LD_ADDR_VAR 0 3
49061: PUSH
49062: LD_INT 0
49064: ST_TO_ADDR
// end ;
49065: LD_VAR 0 3
49069: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49070: LD_INT 0
49072: PPUSH
49073: PPUSH
// if not array1 or not array2 then
49074: LD_VAR 0 1
49078: NOT
49079: PUSH
49080: LD_VAR 0 2
49084: NOT
49085: OR
49086: IFFALSE 49090
// exit ;
49088: GO 49154
// result := true ;
49090: LD_ADDR_VAR 0 3
49094: PUSH
49095: LD_INT 1
49097: ST_TO_ADDR
// for i = 1 to array1 do
49098: LD_ADDR_VAR 0 4
49102: PUSH
49103: DOUBLE
49104: LD_INT 1
49106: DEC
49107: ST_TO_ADDR
49108: LD_VAR 0 1
49112: PUSH
49113: FOR_TO
49114: IFFALSE 49152
// if array1 [ i ] <> array2 [ i ] then
49116: LD_VAR 0 1
49120: PUSH
49121: LD_VAR 0 4
49125: ARRAY
49126: PUSH
49127: LD_VAR 0 2
49131: PUSH
49132: LD_VAR 0 4
49136: ARRAY
49137: NONEQUAL
49138: IFFALSE 49150
// begin result := false ;
49140: LD_ADDR_VAR 0 3
49144: PUSH
49145: LD_INT 0
49147: ST_TO_ADDR
// break ;
49148: GO 49152
// end ;
49150: GO 49113
49152: POP
49153: POP
// end ;
49154: LD_VAR 0 3
49158: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49159: LD_INT 0
49161: PPUSH
49162: PPUSH
49163: PPUSH
// pom := GetBase ( fac ) ;
49164: LD_ADDR_VAR 0 5
49168: PUSH
49169: LD_VAR 0 1
49173: PPUSH
49174: CALL_OW 274
49178: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49179: LD_ADDR_VAR 0 4
49183: PUSH
49184: LD_VAR 0 2
49188: PUSH
49189: LD_INT 1
49191: ARRAY
49192: PPUSH
49193: LD_VAR 0 2
49197: PUSH
49198: LD_INT 2
49200: ARRAY
49201: PPUSH
49202: LD_VAR 0 2
49206: PUSH
49207: LD_INT 3
49209: ARRAY
49210: PPUSH
49211: LD_VAR 0 2
49215: PUSH
49216: LD_INT 4
49218: ARRAY
49219: PPUSH
49220: CALL_OW 449
49224: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49225: LD_ADDR_VAR 0 3
49229: PUSH
49230: LD_VAR 0 5
49234: PPUSH
49235: LD_INT 1
49237: PPUSH
49238: CALL_OW 275
49242: PUSH
49243: LD_VAR 0 4
49247: PUSH
49248: LD_INT 1
49250: ARRAY
49251: GREATEREQUAL
49252: PUSH
49253: LD_VAR 0 5
49257: PPUSH
49258: LD_INT 2
49260: PPUSH
49261: CALL_OW 275
49265: PUSH
49266: LD_VAR 0 4
49270: PUSH
49271: LD_INT 2
49273: ARRAY
49274: GREATEREQUAL
49275: AND
49276: PUSH
49277: LD_VAR 0 5
49281: PPUSH
49282: LD_INT 3
49284: PPUSH
49285: CALL_OW 275
49289: PUSH
49290: LD_VAR 0 4
49294: PUSH
49295: LD_INT 3
49297: ARRAY
49298: GREATEREQUAL
49299: AND
49300: ST_TO_ADDR
// end ;
49301: LD_VAR 0 3
49305: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49306: LD_INT 0
49308: PPUSH
49309: PPUSH
49310: PPUSH
49311: PPUSH
// pom := GetBase ( building ) ;
49312: LD_ADDR_VAR 0 3
49316: PUSH
49317: LD_VAR 0 1
49321: PPUSH
49322: CALL_OW 274
49326: ST_TO_ADDR
// if not pom then
49327: LD_VAR 0 3
49331: NOT
49332: IFFALSE 49336
// exit ;
49334: GO 49506
// btype := GetBType ( building ) ;
49336: LD_ADDR_VAR 0 5
49340: PUSH
49341: LD_VAR 0 1
49345: PPUSH
49346: CALL_OW 266
49350: ST_TO_ADDR
// if btype = b_armoury then
49351: LD_VAR 0 5
49355: PUSH
49356: LD_INT 4
49358: EQUAL
49359: IFFALSE 49369
// btype := b_barracks ;
49361: LD_ADDR_VAR 0 5
49365: PUSH
49366: LD_INT 5
49368: ST_TO_ADDR
// if btype = b_depot then
49369: LD_VAR 0 5
49373: PUSH
49374: LD_INT 0
49376: EQUAL
49377: IFFALSE 49387
// btype := b_warehouse ;
49379: LD_ADDR_VAR 0 5
49383: PUSH
49384: LD_INT 1
49386: ST_TO_ADDR
// if btype = b_workshop then
49387: LD_VAR 0 5
49391: PUSH
49392: LD_INT 2
49394: EQUAL
49395: IFFALSE 49405
// btype := b_factory ;
49397: LD_ADDR_VAR 0 5
49401: PUSH
49402: LD_INT 3
49404: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49405: LD_ADDR_VAR 0 4
49409: PUSH
49410: LD_VAR 0 5
49414: PPUSH
49415: LD_VAR 0 1
49419: PPUSH
49420: CALL_OW 248
49424: PPUSH
49425: CALL_OW 450
49429: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49430: LD_ADDR_VAR 0 2
49434: PUSH
49435: LD_VAR 0 3
49439: PPUSH
49440: LD_INT 1
49442: PPUSH
49443: CALL_OW 275
49447: PUSH
49448: LD_VAR 0 4
49452: PUSH
49453: LD_INT 1
49455: ARRAY
49456: GREATEREQUAL
49457: PUSH
49458: LD_VAR 0 3
49462: PPUSH
49463: LD_INT 2
49465: PPUSH
49466: CALL_OW 275
49470: PUSH
49471: LD_VAR 0 4
49475: PUSH
49476: LD_INT 2
49478: ARRAY
49479: GREATEREQUAL
49480: AND
49481: PUSH
49482: LD_VAR 0 3
49486: PPUSH
49487: LD_INT 3
49489: PPUSH
49490: CALL_OW 275
49494: PUSH
49495: LD_VAR 0 4
49499: PUSH
49500: LD_INT 3
49502: ARRAY
49503: GREATEREQUAL
49504: AND
49505: ST_TO_ADDR
// end ;
49506: LD_VAR 0 2
49510: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49511: LD_INT 0
49513: PPUSH
49514: PPUSH
49515: PPUSH
// pom := GetBase ( building ) ;
49516: LD_ADDR_VAR 0 4
49520: PUSH
49521: LD_VAR 0 1
49525: PPUSH
49526: CALL_OW 274
49530: ST_TO_ADDR
// if not pom then
49531: LD_VAR 0 4
49535: NOT
49536: IFFALSE 49540
// exit ;
49538: GO 49641
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49540: LD_ADDR_VAR 0 5
49544: PUSH
49545: LD_VAR 0 2
49549: PPUSH
49550: LD_VAR 0 1
49554: PPUSH
49555: CALL_OW 248
49559: PPUSH
49560: CALL_OW 450
49564: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49565: LD_ADDR_VAR 0 3
49569: PUSH
49570: LD_VAR 0 4
49574: PPUSH
49575: LD_INT 1
49577: PPUSH
49578: CALL_OW 275
49582: PUSH
49583: LD_VAR 0 5
49587: PUSH
49588: LD_INT 1
49590: ARRAY
49591: GREATEREQUAL
49592: PUSH
49593: LD_VAR 0 4
49597: PPUSH
49598: LD_INT 2
49600: PPUSH
49601: CALL_OW 275
49605: PUSH
49606: LD_VAR 0 5
49610: PUSH
49611: LD_INT 2
49613: ARRAY
49614: GREATEREQUAL
49615: AND
49616: PUSH
49617: LD_VAR 0 4
49621: PPUSH
49622: LD_INT 3
49624: PPUSH
49625: CALL_OW 275
49629: PUSH
49630: LD_VAR 0 5
49634: PUSH
49635: LD_INT 3
49637: ARRAY
49638: GREATEREQUAL
49639: AND
49640: ST_TO_ADDR
// end ;
49641: LD_VAR 0 3
49645: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49646: LD_INT 0
49648: PPUSH
49649: PPUSH
49650: PPUSH
49651: PPUSH
49652: PPUSH
49653: PPUSH
49654: PPUSH
49655: PPUSH
49656: PPUSH
49657: PPUSH
49658: PPUSH
// result := false ;
49659: LD_ADDR_VAR 0 8
49663: PUSH
49664: LD_INT 0
49666: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49667: LD_VAR 0 5
49671: NOT
49672: PUSH
49673: LD_VAR 0 1
49677: NOT
49678: OR
49679: PUSH
49680: LD_VAR 0 2
49684: NOT
49685: OR
49686: PUSH
49687: LD_VAR 0 3
49691: NOT
49692: OR
49693: IFFALSE 49697
// exit ;
49695: GO 50511
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49697: LD_ADDR_VAR 0 14
49701: PUSH
49702: LD_VAR 0 1
49706: PPUSH
49707: LD_VAR 0 2
49711: PPUSH
49712: LD_VAR 0 3
49716: PPUSH
49717: LD_VAR 0 4
49721: PPUSH
49722: LD_VAR 0 5
49726: PUSH
49727: LD_INT 1
49729: ARRAY
49730: PPUSH
49731: CALL_OW 248
49735: PPUSH
49736: LD_INT 0
49738: PPUSH
49739: CALL 51748 0 6
49743: ST_TO_ADDR
// if not hexes then
49744: LD_VAR 0 14
49748: NOT
49749: IFFALSE 49753
// exit ;
49751: GO 50511
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49753: LD_ADDR_VAR 0 17
49757: PUSH
49758: LD_VAR 0 5
49762: PPUSH
49763: LD_INT 22
49765: PUSH
49766: LD_VAR 0 13
49770: PPUSH
49771: CALL_OW 255
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 2
49782: PUSH
49783: LD_INT 30
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 30
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: LIST
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PPUSH
49812: CALL_OW 72
49816: ST_TO_ADDR
// for i = 1 to hexes do
49817: LD_ADDR_VAR 0 9
49821: PUSH
49822: DOUBLE
49823: LD_INT 1
49825: DEC
49826: ST_TO_ADDR
49827: LD_VAR 0 14
49831: PUSH
49832: FOR_TO
49833: IFFALSE 50509
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49835: LD_ADDR_VAR 0 13
49839: PUSH
49840: LD_VAR 0 14
49844: PUSH
49845: LD_VAR 0 9
49849: ARRAY
49850: PUSH
49851: LD_INT 1
49853: ARRAY
49854: PPUSH
49855: LD_VAR 0 14
49859: PUSH
49860: LD_VAR 0 9
49864: ARRAY
49865: PUSH
49866: LD_INT 2
49868: ARRAY
49869: PPUSH
49870: CALL_OW 428
49874: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49875: LD_VAR 0 14
49879: PUSH
49880: LD_VAR 0 9
49884: ARRAY
49885: PUSH
49886: LD_INT 1
49888: ARRAY
49889: PPUSH
49890: LD_VAR 0 14
49894: PUSH
49895: LD_VAR 0 9
49899: ARRAY
49900: PUSH
49901: LD_INT 2
49903: ARRAY
49904: PPUSH
49905: CALL_OW 351
49909: PUSH
49910: LD_VAR 0 14
49914: PUSH
49915: LD_VAR 0 9
49919: ARRAY
49920: PUSH
49921: LD_INT 1
49923: ARRAY
49924: PPUSH
49925: LD_VAR 0 14
49929: PUSH
49930: LD_VAR 0 9
49934: ARRAY
49935: PUSH
49936: LD_INT 2
49938: ARRAY
49939: PPUSH
49940: CALL_OW 488
49944: NOT
49945: OR
49946: PUSH
49947: LD_VAR 0 13
49951: PPUSH
49952: CALL_OW 247
49956: PUSH
49957: LD_INT 3
49959: EQUAL
49960: OR
49961: IFFALSE 49967
// exit ;
49963: POP
49964: POP
49965: GO 50511
// if not tmp then
49967: LD_VAR 0 13
49971: NOT
49972: IFFALSE 49976
// continue ;
49974: GO 49832
// result := true ;
49976: LD_ADDR_VAR 0 8
49980: PUSH
49981: LD_INT 1
49983: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49984: LD_VAR 0 6
49988: PUSH
49989: LD_VAR 0 13
49993: PPUSH
49994: CALL_OW 247
49998: PUSH
49999: LD_INT 2
50001: EQUAL
50002: AND
50003: PUSH
50004: LD_VAR 0 13
50008: PPUSH
50009: CALL_OW 263
50013: PUSH
50014: LD_INT 1
50016: EQUAL
50017: AND
50018: IFFALSE 50182
// begin if IsDrivenBy ( tmp ) then
50020: LD_VAR 0 13
50024: PPUSH
50025: CALL_OW 311
50029: IFFALSE 50033
// continue ;
50031: GO 49832
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50033: LD_VAR 0 6
50037: PPUSH
50038: LD_INT 3
50040: PUSH
50041: LD_INT 60
50043: PUSH
50044: EMPTY
50045: LIST
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 3
50053: PUSH
50054: LD_INT 55
50056: PUSH
50057: EMPTY
50058: LIST
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PPUSH
50068: CALL_OW 72
50072: IFFALSE 50180
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50074: LD_ADDR_VAR 0 18
50078: PUSH
50079: LD_VAR 0 6
50083: PPUSH
50084: LD_INT 3
50086: PUSH
50087: LD_INT 60
50089: PUSH
50090: EMPTY
50091: LIST
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 3
50099: PUSH
50100: LD_INT 55
50102: PUSH
50103: EMPTY
50104: LIST
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PPUSH
50114: CALL_OW 72
50118: PUSH
50119: LD_INT 1
50121: ARRAY
50122: ST_TO_ADDR
// if IsInUnit ( driver ) then
50123: LD_VAR 0 18
50127: PPUSH
50128: CALL_OW 310
50132: IFFALSE 50143
// ComExit ( driver ) ;
50134: LD_VAR 0 18
50138: PPUSH
50139: CALL 74876 0 1
// AddComEnterUnit ( driver , tmp ) ;
50143: LD_VAR 0 18
50147: PPUSH
50148: LD_VAR 0 13
50152: PPUSH
50153: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50157: LD_VAR 0 18
50161: PPUSH
50162: LD_VAR 0 7
50166: PPUSH
50167: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50171: LD_VAR 0 18
50175: PPUSH
50176: CALL_OW 181
// end ; continue ;
50180: GO 49832
// end ; if not cleaners or not tmp in cleaners then
50182: LD_VAR 0 6
50186: NOT
50187: PUSH
50188: LD_VAR 0 13
50192: PUSH
50193: LD_VAR 0 6
50197: IN
50198: NOT
50199: OR
50200: IFFALSE 50507
// begin if dep then
50202: LD_VAR 0 17
50206: IFFALSE 50342
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50208: LD_ADDR_VAR 0 16
50212: PUSH
50213: LD_VAR 0 17
50217: PUSH
50218: LD_INT 1
50220: ARRAY
50221: PPUSH
50222: CALL_OW 250
50226: PPUSH
50227: LD_VAR 0 17
50231: PUSH
50232: LD_INT 1
50234: ARRAY
50235: PPUSH
50236: CALL_OW 254
50240: PPUSH
50241: LD_INT 5
50243: PPUSH
50244: CALL_OW 272
50248: PUSH
50249: LD_VAR 0 17
50253: PUSH
50254: LD_INT 1
50256: ARRAY
50257: PPUSH
50258: CALL_OW 251
50262: PPUSH
50263: LD_VAR 0 17
50267: PUSH
50268: LD_INT 1
50270: ARRAY
50271: PPUSH
50272: CALL_OW 254
50276: PPUSH
50277: LD_INT 5
50279: PPUSH
50280: CALL_OW 273
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50289: LD_VAR 0 16
50293: PUSH
50294: LD_INT 1
50296: ARRAY
50297: PPUSH
50298: LD_VAR 0 16
50302: PUSH
50303: LD_INT 2
50305: ARRAY
50306: PPUSH
50307: CALL_OW 488
50311: IFFALSE 50342
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50313: LD_VAR 0 13
50317: PPUSH
50318: LD_VAR 0 16
50322: PUSH
50323: LD_INT 1
50325: ARRAY
50326: PPUSH
50327: LD_VAR 0 16
50331: PUSH
50332: LD_INT 2
50334: ARRAY
50335: PPUSH
50336: CALL_OW 111
// continue ;
50340: GO 49832
// end ; end ; r := GetDir ( tmp ) ;
50342: LD_ADDR_VAR 0 15
50346: PUSH
50347: LD_VAR 0 13
50351: PPUSH
50352: CALL_OW 254
50356: ST_TO_ADDR
// if r = 5 then
50357: LD_VAR 0 15
50361: PUSH
50362: LD_INT 5
50364: EQUAL
50365: IFFALSE 50375
// r := 0 ;
50367: LD_ADDR_VAR 0 15
50371: PUSH
50372: LD_INT 0
50374: ST_TO_ADDR
// for j = r to 5 do
50375: LD_ADDR_VAR 0 10
50379: PUSH
50380: DOUBLE
50381: LD_VAR 0 15
50385: DEC
50386: ST_TO_ADDR
50387: LD_INT 5
50389: PUSH
50390: FOR_TO
50391: IFFALSE 50505
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50393: LD_ADDR_VAR 0 11
50397: PUSH
50398: LD_VAR 0 13
50402: PPUSH
50403: CALL_OW 250
50407: PPUSH
50408: LD_VAR 0 10
50412: PPUSH
50413: LD_INT 2
50415: PPUSH
50416: CALL_OW 272
50420: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50421: LD_ADDR_VAR 0 12
50425: PUSH
50426: LD_VAR 0 13
50430: PPUSH
50431: CALL_OW 251
50435: PPUSH
50436: LD_VAR 0 10
50440: PPUSH
50441: LD_INT 2
50443: PPUSH
50444: CALL_OW 273
50448: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50449: LD_VAR 0 11
50453: PPUSH
50454: LD_VAR 0 12
50458: PPUSH
50459: CALL_OW 488
50463: PUSH
50464: LD_VAR 0 11
50468: PPUSH
50469: LD_VAR 0 12
50473: PPUSH
50474: CALL_OW 428
50478: NOT
50479: AND
50480: IFFALSE 50503
// begin ComMoveXY ( tmp , _x , _y ) ;
50482: LD_VAR 0 13
50486: PPUSH
50487: LD_VAR 0 11
50491: PPUSH
50492: LD_VAR 0 12
50496: PPUSH
50497: CALL_OW 111
// break ;
50501: GO 50505
// end ; end ;
50503: GO 50390
50505: POP
50506: POP
// end ; end ;
50507: GO 49832
50509: POP
50510: POP
// end ;
50511: LD_VAR 0 8
50515: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50516: LD_INT 0
50518: PPUSH
// result := true ;
50519: LD_ADDR_VAR 0 3
50523: PUSH
50524: LD_INT 1
50526: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50527: LD_VAR 0 2
50531: PUSH
50532: LD_INT 24
50534: DOUBLE
50535: EQUAL
50536: IFTRUE 50546
50538: LD_INT 33
50540: DOUBLE
50541: EQUAL
50542: IFTRUE 50546
50544: GO 50571
50546: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50547: LD_ADDR_VAR 0 3
50551: PUSH
50552: LD_INT 32
50554: PPUSH
50555: LD_VAR 0 1
50559: PPUSH
50560: CALL_OW 321
50564: PUSH
50565: LD_INT 2
50567: EQUAL
50568: ST_TO_ADDR
50569: GO 50891
50571: LD_INT 20
50573: DOUBLE
50574: EQUAL
50575: IFTRUE 50579
50577: GO 50604
50579: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50580: LD_ADDR_VAR 0 3
50584: PUSH
50585: LD_INT 6
50587: PPUSH
50588: LD_VAR 0 1
50592: PPUSH
50593: CALL_OW 321
50597: PUSH
50598: LD_INT 2
50600: EQUAL
50601: ST_TO_ADDR
50602: GO 50891
50604: LD_INT 22
50606: DOUBLE
50607: EQUAL
50608: IFTRUE 50618
50610: LD_INT 36
50612: DOUBLE
50613: EQUAL
50614: IFTRUE 50618
50616: GO 50643
50618: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50619: LD_ADDR_VAR 0 3
50623: PUSH
50624: LD_INT 15
50626: PPUSH
50627: LD_VAR 0 1
50631: PPUSH
50632: CALL_OW 321
50636: PUSH
50637: LD_INT 2
50639: EQUAL
50640: ST_TO_ADDR
50641: GO 50891
50643: LD_INT 30
50645: DOUBLE
50646: EQUAL
50647: IFTRUE 50651
50649: GO 50676
50651: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50652: LD_ADDR_VAR 0 3
50656: PUSH
50657: LD_INT 20
50659: PPUSH
50660: LD_VAR 0 1
50664: PPUSH
50665: CALL_OW 321
50669: PUSH
50670: LD_INT 2
50672: EQUAL
50673: ST_TO_ADDR
50674: GO 50891
50676: LD_INT 28
50678: DOUBLE
50679: EQUAL
50680: IFTRUE 50690
50682: LD_INT 21
50684: DOUBLE
50685: EQUAL
50686: IFTRUE 50690
50688: GO 50715
50690: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50691: LD_ADDR_VAR 0 3
50695: PUSH
50696: LD_INT 21
50698: PPUSH
50699: LD_VAR 0 1
50703: PPUSH
50704: CALL_OW 321
50708: PUSH
50709: LD_INT 2
50711: EQUAL
50712: ST_TO_ADDR
50713: GO 50891
50715: LD_INT 16
50717: DOUBLE
50718: EQUAL
50719: IFTRUE 50723
50721: GO 50750
50723: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50724: LD_ADDR_VAR 0 3
50728: PUSH
50729: LD_EXP 75
50733: PPUSH
50734: LD_VAR 0 1
50738: PPUSH
50739: CALL_OW 321
50743: PUSH
50744: LD_INT 2
50746: EQUAL
50747: ST_TO_ADDR
50748: GO 50891
50750: LD_INT 19
50752: DOUBLE
50753: EQUAL
50754: IFTRUE 50764
50756: LD_INT 23
50758: DOUBLE
50759: EQUAL
50760: IFTRUE 50764
50762: GO 50791
50764: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50765: LD_ADDR_VAR 0 3
50769: PUSH
50770: LD_EXP 74
50774: PPUSH
50775: LD_VAR 0 1
50779: PPUSH
50780: CALL_OW 321
50784: PUSH
50785: LD_INT 2
50787: EQUAL
50788: ST_TO_ADDR
50789: GO 50891
50791: LD_INT 17
50793: DOUBLE
50794: EQUAL
50795: IFTRUE 50799
50797: GO 50824
50799: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50800: LD_ADDR_VAR 0 3
50804: PUSH
50805: LD_INT 39
50807: PPUSH
50808: LD_VAR 0 1
50812: PPUSH
50813: CALL_OW 321
50817: PUSH
50818: LD_INT 2
50820: EQUAL
50821: ST_TO_ADDR
50822: GO 50891
50824: LD_INT 18
50826: DOUBLE
50827: EQUAL
50828: IFTRUE 50832
50830: GO 50857
50832: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50833: LD_ADDR_VAR 0 3
50837: PUSH
50838: LD_INT 40
50840: PPUSH
50841: LD_VAR 0 1
50845: PPUSH
50846: CALL_OW 321
50850: PUSH
50851: LD_INT 2
50853: EQUAL
50854: ST_TO_ADDR
50855: GO 50891
50857: LD_INT 27
50859: DOUBLE
50860: EQUAL
50861: IFTRUE 50865
50863: GO 50890
50865: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50866: LD_ADDR_VAR 0 3
50870: PUSH
50871: LD_INT 35
50873: PPUSH
50874: LD_VAR 0 1
50878: PPUSH
50879: CALL_OW 321
50883: PUSH
50884: LD_INT 2
50886: EQUAL
50887: ST_TO_ADDR
50888: GO 50891
50890: POP
// end ;
50891: LD_VAR 0 3
50895: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50896: LD_INT 0
50898: PPUSH
50899: PPUSH
50900: PPUSH
50901: PPUSH
50902: PPUSH
50903: PPUSH
50904: PPUSH
50905: PPUSH
50906: PPUSH
50907: PPUSH
50908: PPUSH
// result := false ;
50909: LD_ADDR_VAR 0 6
50913: PUSH
50914: LD_INT 0
50916: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50917: LD_VAR 0 1
50921: NOT
50922: PUSH
50923: LD_VAR 0 1
50927: PPUSH
50928: CALL_OW 266
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: IN
50943: NOT
50944: OR
50945: PUSH
50946: LD_VAR 0 2
50950: NOT
50951: OR
50952: PUSH
50953: LD_VAR 0 5
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: LD_INT 2
50966: PUSH
50967: LD_INT 3
50969: PUSH
50970: LD_INT 4
50972: PUSH
50973: LD_INT 5
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: IN
50984: NOT
50985: OR
50986: PUSH
50987: LD_VAR 0 3
50991: PPUSH
50992: LD_VAR 0 4
50996: PPUSH
50997: CALL_OW 488
51001: NOT
51002: OR
51003: IFFALSE 51007
// exit ;
51005: GO 51743
// side := GetSide ( depot ) ;
51007: LD_ADDR_VAR 0 9
51011: PUSH
51012: LD_VAR 0 1
51016: PPUSH
51017: CALL_OW 255
51021: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51022: LD_VAR 0 9
51026: PPUSH
51027: LD_VAR 0 2
51031: PPUSH
51032: CALL 50516 0 2
51036: NOT
51037: IFFALSE 51041
// exit ;
51039: GO 51743
// pom := GetBase ( depot ) ;
51041: LD_ADDR_VAR 0 10
51045: PUSH
51046: LD_VAR 0 1
51050: PPUSH
51051: CALL_OW 274
51055: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51056: LD_ADDR_VAR 0 11
51060: PUSH
51061: LD_VAR 0 2
51065: PPUSH
51066: LD_VAR 0 1
51070: PPUSH
51071: CALL_OW 248
51075: PPUSH
51076: CALL_OW 450
51080: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51081: LD_VAR 0 10
51085: PPUSH
51086: LD_INT 1
51088: PPUSH
51089: CALL_OW 275
51093: PUSH
51094: LD_VAR 0 11
51098: PUSH
51099: LD_INT 1
51101: ARRAY
51102: GREATEREQUAL
51103: PUSH
51104: LD_VAR 0 10
51108: PPUSH
51109: LD_INT 2
51111: PPUSH
51112: CALL_OW 275
51116: PUSH
51117: LD_VAR 0 11
51121: PUSH
51122: LD_INT 2
51124: ARRAY
51125: GREATEREQUAL
51126: AND
51127: PUSH
51128: LD_VAR 0 10
51132: PPUSH
51133: LD_INT 3
51135: PPUSH
51136: CALL_OW 275
51140: PUSH
51141: LD_VAR 0 11
51145: PUSH
51146: LD_INT 3
51148: ARRAY
51149: GREATEREQUAL
51150: AND
51151: NOT
51152: IFFALSE 51156
// exit ;
51154: GO 51743
// if GetBType ( depot ) = b_depot then
51156: LD_VAR 0 1
51160: PPUSH
51161: CALL_OW 266
51165: PUSH
51166: LD_INT 0
51168: EQUAL
51169: IFFALSE 51181
// dist := 28 else
51171: LD_ADDR_VAR 0 14
51175: PUSH
51176: LD_INT 28
51178: ST_TO_ADDR
51179: GO 51189
// dist := 36 ;
51181: LD_ADDR_VAR 0 14
51185: PUSH
51186: LD_INT 36
51188: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51189: LD_VAR 0 1
51193: PPUSH
51194: LD_VAR 0 3
51198: PPUSH
51199: LD_VAR 0 4
51203: PPUSH
51204: CALL_OW 297
51208: PUSH
51209: LD_VAR 0 14
51213: GREATER
51214: IFFALSE 51218
// exit ;
51216: GO 51743
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51218: LD_ADDR_VAR 0 12
51222: PUSH
51223: LD_VAR 0 2
51227: PPUSH
51228: LD_VAR 0 3
51232: PPUSH
51233: LD_VAR 0 4
51237: PPUSH
51238: LD_VAR 0 5
51242: PPUSH
51243: LD_VAR 0 1
51247: PPUSH
51248: CALL_OW 248
51252: PPUSH
51253: LD_INT 0
51255: PPUSH
51256: CALL 51748 0 6
51260: ST_TO_ADDR
// if not hexes then
51261: LD_VAR 0 12
51265: NOT
51266: IFFALSE 51270
// exit ;
51268: GO 51743
// hex := GetHexInfo ( x , y ) ;
51270: LD_ADDR_VAR 0 15
51274: PUSH
51275: LD_VAR 0 3
51279: PPUSH
51280: LD_VAR 0 4
51284: PPUSH
51285: CALL_OW 546
51289: ST_TO_ADDR
// if hex [ 1 ] then
51290: LD_VAR 0 15
51294: PUSH
51295: LD_INT 1
51297: ARRAY
51298: IFFALSE 51302
// exit ;
51300: GO 51743
// height := hex [ 2 ] ;
51302: LD_ADDR_VAR 0 13
51306: PUSH
51307: LD_VAR 0 15
51311: PUSH
51312: LD_INT 2
51314: ARRAY
51315: ST_TO_ADDR
// for i = 1 to hexes do
51316: LD_ADDR_VAR 0 7
51320: PUSH
51321: DOUBLE
51322: LD_INT 1
51324: DEC
51325: ST_TO_ADDR
51326: LD_VAR 0 12
51330: PUSH
51331: FOR_TO
51332: IFFALSE 51662
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51334: LD_VAR 0 12
51338: PUSH
51339: LD_VAR 0 7
51343: ARRAY
51344: PUSH
51345: LD_INT 1
51347: ARRAY
51348: PPUSH
51349: LD_VAR 0 12
51353: PUSH
51354: LD_VAR 0 7
51358: ARRAY
51359: PUSH
51360: LD_INT 2
51362: ARRAY
51363: PPUSH
51364: CALL_OW 488
51368: NOT
51369: PUSH
51370: LD_VAR 0 12
51374: PUSH
51375: LD_VAR 0 7
51379: ARRAY
51380: PUSH
51381: LD_INT 1
51383: ARRAY
51384: PPUSH
51385: LD_VAR 0 12
51389: PUSH
51390: LD_VAR 0 7
51394: ARRAY
51395: PUSH
51396: LD_INT 2
51398: ARRAY
51399: PPUSH
51400: CALL_OW 428
51404: PUSH
51405: LD_INT 0
51407: GREATER
51408: OR
51409: PUSH
51410: LD_VAR 0 12
51414: PUSH
51415: LD_VAR 0 7
51419: ARRAY
51420: PUSH
51421: LD_INT 1
51423: ARRAY
51424: PPUSH
51425: LD_VAR 0 12
51429: PUSH
51430: LD_VAR 0 7
51434: ARRAY
51435: PUSH
51436: LD_INT 2
51438: ARRAY
51439: PPUSH
51440: CALL_OW 351
51444: OR
51445: IFFALSE 51451
// exit ;
51447: POP
51448: POP
51449: GO 51743
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51451: LD_ADDR_VAR 0 8
51455: PUSH
51456: LD_VAR 0 12
51460: PUSH
51461: LD_VAR 0 7
51465: ARRAY
51466: PUSH
51467: LD_INT 1
51469: ARRAY
51470: PPUSH
51471: LD_VAR 0 12
51475: PUSH
51476: LD_VAR 0 7
51480: ARRAY
51481: PUSH
51482: LD_INT 2
51484: ARRAY
51485: PPUSH
51486: CALL_OW 546
51490: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51491: LD_VAR 0 8
51495: PUSH
51496: LD_INT 1
51498: ARRAY
51499: PUSH
51500: LD_VAR 0 8
51504: PUSH
51505: LD_INT 2
51507: ARRAY
51508: PUSH
51509: LD_VAR 0 13
51513: PUSH
51514: LD_INT 2
51516: PLUS
51517: GREATER
51518: OR
51519: PUSH
51520: LD_VAR 0 8
51524: PUSH
51525: LD_INT 2
51527: ARRAY
51528: PUSH
51529: LD_VAR 0 13
51533: PUSH
51534: LD_INT 2
51536: MINUS
51537: LESS
51538: OR
51539: PUSH
51540: LD_VAR 0 8
51544: PUSH
51545: LD_INT 3
51547: ARRAY
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: LD_INT 8
51554: PUSH
51555: LD_INT 9
51557: PUSH
51558: LD_INT 10
51560: PUSH
51561: LD_INT 11
51563: PUSH
51564: LD_INT 12
51566: PUSH
51567: LD_INT 13
51569: PUSH
51570: LD_INT 16
51572: PUSH
51573: LD_INT 17
51575: PUSH
51576: LD_INT 18
51578: PUSH
51579: LD_INT 19
51581: PUSH
51582: LD_INT 20
51584: PUSH
51585: LD_INT 21
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: IN
51603: NOT
51604: OR
51605: PUSH
51606: LD_VAR 0 8
51610: PUSH
51611: LD_INT 5
51613: ARRAY
51614: NOT
51615: OR
51616: PUSH
51617: LD_VAR 0 8
51621: PUSH
51622: LD_INT 6
51624: ARRAY
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 2
51631: PUSH
51632: LD_INT 7
51634: PUSH
51635: LD_INT 9
51637: PUSH
51638: LD_INT 10
51640: PUSH
51641: LD_INT 11
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: IN
51652: NOT
51653: OR
51654: IFFALSE 51660
// exit ;
51656: POP
51657: POP
51658: GO 51743
// end ;
51660: GO 51331
51662: POP
51663: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51664: LD_VAR 0 9
51668: PPUSH
51669: LD_VAR 0 3
51673: PPUSH
51674: LD_VAR 0 4
51678: PPUSH
51679: LD_INT 20
51681: PPUSH
51682: CALL 43689 0 4
51686: PUSH
51687: LD_INT 4
51689: ARRAY
51690: IFFALSE 51694
// exit ;
51692: GO 51743
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51694: LD_VAR 0 2
51698: PUSH
51699: LD_INT 29
51701: PUSH
51702: LD_INT 30
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: IN
51709: PUSH
51710: LD_VAR 0 3
51714: PPUSH
51715: LD_VAR 0 4
51719: PPUSH
51720: LD_VAR 0 9
51724: PPUSH
51725: CALL_OW 440
51729: NOT
51730: AND
51731: IFFALSE 51735
// exit ;
51733: GO 51743
// result := true ;
51735: LD_ADDR_VAR 0 6
51739: PUSH
51740: LD_INT 1
51742: ST_TO_ADDR
// end ;
51743: LD_VAR 0 6
51747: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51748: LD_INT 0
51750: PPUSH
51751: PPUSH
51752: PPUSH
51753: PPUSH
51754: PPUSH
51755: PPUSH
51756: PPUSH
51757: PPUSH
51758: PPUSH
51759: PPUSH
51760: PPUSH
51761: PPUSH
51762: PPUSH
51763: PPUSH
51764: PPUSH
51765: PPUSH
51766: PPUSH
51767: PPUSH
51768: PPUSH
51769: PPUSH
51770: PPUSH
51771: PPUSH
51772: PPUSH
51773: PPUSH
51774: PPUSH
51775: PPUSH
51776: PPUSH
51777: PPUSH
51778: PPUSH
51779: PPUSH
51780: PPUSH
51781: PPUSH
51782: PPUSH
51783: PPUSH
51784: PPUSH
51785: PPUSH
51786: PPUSH
51787: PPUSH
51788: PPUSH
51789: PPUSH
51790: PPUSH
51791: PPUSH
51792: PPUSH
51793: PPUSH
51794: PPUSH
51795: PPUSH
51796: PPUSH
51797: PPUSH
51798: PPUSH
51799: PPUSH
51800: PPUSH
51801: PPUSH
51802: PPUSH
51803: PPUSH
51804: PPUSH
51805: PPUSH
51806: PPUSH
51807: PPUSH
// result = [ ] ;
51808: LD_ADDR_VAR 0 7
51812: PUSH
51813: EMPTY
51814: ST_TO_ADDR
// temp_list = [ ] ;
51815: LD_ADDR_VAR 0 9
51819: PUSH
51820: EMPTY
51821: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51822: LD_VAR 0 4
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: LD_INT 3
51838: PUSH
51839: LD_INT 4
51841: PUSH
51842: LD_INT 5
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: IN
51853: NOT
51854: PUSH
51855: LD_VAR 0 1
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: IN
51870: PUSH
51871: LD_VAR 0 5
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: LD_INT 2
51881: PUSH
51882: LD_INT 3
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: LIST
51889: IN
51890: NOT
51891: AND
51892: OR
51893: IFFALSE 51897
// exit ;
51895: GO 70288
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51897: LD_VAR 0 1
51901: PUSH
51902: LD_INT 6
51904: PUSH
51905: LD_INT 7
51907: PUSH
51908: LD_INT 8
51910: PUSH
51911: LD_INT 13
51913: PUSH
51914: LD_INT 12
51916: PUSH
51917: LD_INT 15
51919: PUSH
51920: LD_INT 11
51922: PUSH
51923: LD_INT 14
51925: PUSH
51926: LD_INT 10
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: IN
51940: IFFALSE 51950
// btype = b_lab ;
51942: LD_ADDR_VAR 0 1
51946: PUSH
51947: LD_INT 6
51949: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51950: LD_VAR 0 6
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 2
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: LIST
51968: IN
51969: NOT
51970: PUSH
51971: LD_VAR 0 1
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: LD_INT 3
51987: PUSH
51988: LD_INT 6
51990: PUSH
51991: LD_INT 36
51993: PUSH
51994: LD_INT 4
51996: PUSH
51997: LD_INT 5
51999: PUSH
52000: LD_INT 31
52002: PUSH
52003: LD_INT 32
52005: PUSH
52006: LD_INT 33
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: IN
52022: NOT
52023: PUSH
52024: LD_VAR 0 6
52028: PUSH
52029: LD_INT 1
52031: EQUAL
52032: AND
52033: OR
52034: PUSH
52035: LD_VAR 0 1
52039: PUSH
52040: LD_INT 2
52042: PUSH
52043: LD_INT 3
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: IN
52050: NOT
52051: PUSH
52052: LD_VAR 0 6
52056: PUSH
52057: LD_INT 2
52059: EQUAL
52060: AND
52061: OR
52062: IFFALSE 52072
// mode = 0 ;
52064: LD_ADDR_VAR 0 6
52068: PUSH
52069: LD_INT 0
52071: ST_TO_ADDR
// case mode of 0 :
52072: LD_VAR 0 6
52076: PUSH
52077: LD_INT 0
52079: DOUBLE
52080: EQUAL
52081: IFTRUE 52085
52083: GO 63538
52085: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52086: LD_ADDR_VAR 0 11
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 0
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: LD_INT 2
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: LD_INT 2
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 2
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: PUSH
52233: LD_INT 3
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: LD_INT 3
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 1
52252: NEG
52253: PUSH
52254: LD_INT 2
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52279: LD_ADDR_VAR 0 12
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: LD_INT 1
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: LD_INT 1
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: NEG
52349: PUSH
52350: LD_INT 1
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 2
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 2
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 2
52402: NEG
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 2
52413: NEG
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 2
52425: NEG
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 3
52436: NEG
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 3
52447: NEG
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52475: LD_ADDR_VAR 0 13
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: LD_INT 2
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: NEG
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: NEG
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 2
52622: NEG
52623: PUSH
52624: LD_INT 3
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 3
52634: NEG
52635: PUSH
52636: LD_INT 2
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 3
52646: NEG
52647: PUSH
52648: LD_INT 3
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52674: LD_ADDR_VAR 0 14
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: LD_INT 1
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 1
52732: NEG
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: LD_INT 2
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: LD_INT 2
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: LD_INT 1
52781: NEG
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: LD_INT 2
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: LD_INT 3
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: LD_INT 3
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: LD_INT 2
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52870: LD_ADDR_VAR 0 15
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 1
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: LD_INT 1
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 2
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 2
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 2
52993: NEG
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 2
53004: NEG
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 2
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 3
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 3
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53063: LD_ADDR_VAR 0 16
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 1
53121: NEG
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: LD_INT 2
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 2
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 2
53166: PUSH
53167: LD_INT 2
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 2
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 2
53186: NEG
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 2
53198: NEG
53199: PUSH
53200: LD_INT 2
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 3
53210: PUSH
53211: LD_INT 2
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 3
53220: PUSH
53221: LD_INT 3
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: LD_INT 3
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53256: LD_ADDR_VAR 0 17
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: LD_INT 2
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 1
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: LD_INT 2
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 2
53443: NEG
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 2
53455: NEG
53456: PUSH
53457: LD_INT 2
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53486: LD_ADDR_VAR 0 18
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 2
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 2
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 2
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 2
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: LD_INT 2
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 2
53662: NEG
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 2
53673: NEG
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53716: LD_ADDR_VAR 0 19
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: LD_INT 1
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 0
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: NEG
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 1
53785: NEG
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: LD_INT 2
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: LD_INT 2
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 2
53851: PUSH
53852: LD_INT 2
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: LD_INT 2
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: LD_INT 2
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 2
53892: NEG
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 2
53903: NEG
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 2
53915: NEG
53916: PUSH
53917: LD_INT 2
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53946: LD_ADDR_VAR 0 20
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: NEG
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 2
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 2
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 2
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 2
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: LD_INT 2
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: LD_INT 2
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 2
54122: NEG
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 2
54133: NEG
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: LD_INT 2
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54176: LD_ADDR_VAR 0 21
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: LD_INT 1
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: LD_INT 2
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 2
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 2
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: LD_INT 2
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: LD_INT 2
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: LD_INT 2
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: NEG
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 2
54352: NEG
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 2
54363: NEG
54364: PUSH
54365: LD_INT 1
54367: NEG
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 2
54375: NEG
54376: PUSH
54377: LD_INT 2
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54406: LD_ADDR_VAR 0 22
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: LD_INT 2
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 2
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 2
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: LD_INT 2
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: LD_INT 2
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 2
54593: NEG
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: NEG
54606: PUSH
54607: LD_INT 2
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54636: LD_ADDR_VAR 0 23
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: LD_INT 1
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: LD_INT 2
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 2
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 2
54771: PUSH
54772: LD_INT 2
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: LD_INT 2
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 2
54823: NEG
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 2
54835: NEG
54836: PUSH
54837: LD_INT 2
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 2
54847: NEG
54848: PUSH
54849: LD_INT 3
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: LD_INT 3
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: LD_INT 2
54874: NEG
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 2
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54916: LD_ADDR_VAR 0 24
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: LD_INT 2
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: LD_INT 2
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: LD_INT 2
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 2
55092: NEG
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: PUSH
55128: LD_INT 2
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 2
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 3
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 3
55159: PUSH
55160: LD_INT 2
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55192: LD_ADDR_VAR 0 25
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: LD_INT 2
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: LD_INT 2
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 2
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 2
55327: PUSH
55328: LD_INT 2
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: LD_INT 2
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 2
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 2
55368: NEG
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 2
55379: NEG
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 2
55391: NEG
55392: PUSH
55393: LD_INT 2
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 3
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 3
55413: PUSH
55414: LD_INT 2
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 2
55423: PUSH
55424: LD_INT 3
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: LD_INT 3
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55466: LD_ADDR_VAR 0 26
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: NEG
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 2
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 2
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 2
55601: PUSH
55602: LD_INT 2
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: LD_INT 2
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: LD_INT 2
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 2
55642: NEG
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 2
55653: NEG
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 2
55665: NEG
55666: PUSH
55667: LD_INT 2
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: LD_INT 3
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: LD_INT 3
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: LD_INT 2
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 2
55708: NEG
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55742: LD_ADDR_VAR 0 27
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: LD_INT 2
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 2
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 2
55877: PUSH
55878: LD_INT 2
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: LD_INT 2
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: LD_INT 2
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 2
55918: NEG
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 2
55929: NEG
55930: PUSH
55931: LD_INT 1
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 2
55941: NEG
55942: PUSH
55943: LD_INT 2
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: LD_INT 2
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: NEG
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 3
55975: NEG
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 3
55987: NEG
55988: PUSH
55989: LD_INT 2
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56022: LD_ADDR_VAR 0 28
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: LD_INT 1
56042: NEG
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 1
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: NEG
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: LD_INT 2
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 2
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 2
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 2
56157: PUSH
56158: LD_INT 2
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: LD_INT 2
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: LD_INT 2
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 2
56198: NEG
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 2
56209: NEG
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 2
56221: NEG
56222: PUSH
56223: LD_INT 2
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 2
56233: NEG
56234: PUSH
56235: LD_INT 3
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 3
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 3
56257: NEG
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 3
56269: NEG
56270: PUSH
56271: LD_INT 2
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56304: LD_ADDR_VAR 0 29
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 2
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: LD_INT 2
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: LD_INT 2
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 2
56482: NEG
56483: PUSH
56484: LD_INT 2
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 2
56494: NEG
56495: PUSH
56496: LD_INT 3
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 3
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: LD_INT 3
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: LD_INT 2
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 3
56548: NEG
56549: PUSH
56550: LD_INT 2
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56583: LD_ADDR_VAR 0 30
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: LD_INT 1
56656: NEG
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 2
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: LD_INT 2
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 2
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 2
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 2
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: LD_INT 2
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 2
56749: NEG
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 2
56760: NEG
56761: PUSH
56762: LD_INT 1
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: LD_INT 3
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: LD_INT 2
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 3
56795: PUSH
56796: LD_INT 2
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 2
56805: PUSH
56806: LD_INT 3
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 2
56815: NEG
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 3
56826: NEG
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56861: LD_ADDR_VAR 0 31
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: LD_INT 1
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 1
56930: NEG
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 1
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 2
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 2
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: LD_INT 2
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: LD_INT 2
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: LD_INT 1
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 2
57026: NEG
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 2
57038: NEG
57039: PUSH
57040: LD_INT 2
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 2
57050: NEG
57051: PUSH
57052: LD_INT 3
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 2
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 3
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: LD_INT 3
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 3
57104: NEG
57105: PUSH
57106: LD_INT 2
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57139: LD_ADDR_VAR 0 32
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: LD_INT 0
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: NEG
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: LD_INT 2
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: LD_INT 2
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 2
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 2
57264: PUSH
57265: LD_INT 2
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: LD_INT 2
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: LD_INT 2
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: LD_INT 1
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 2
57305: NEG
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 2
57316: NEG
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: LD_INT 3
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 3
57351: PUSH
57352: LD_INT 2
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: LD_INT 3
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 2
57371: NEG
57372: PUSH
57373: LD_INT 1
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 3
57382: NEG
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57417: LD_ADDR_VAR 0 33
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: LD_INT 0
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: LD_INT 1
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: LD_INT 1
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: NEG
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: LD_INT 2
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 1
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 2
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 2
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: LD_INT 2
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 2
57572: NEG
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 2
57583: NEG
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: LD_INT 2
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 2
57607: NEG
57608: PUSH
57609: LD_INT 3
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 2
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 3
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 1
57640: PUSH
57641: LD_INT 3
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: LD_INT 2
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 3
57661: NEG
57662: PUSH
57663: LD_INT 2
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57696: LD_ADDR_VAR 0 34
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 1
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: LD_INT 1
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: LD_INT 1
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: NEG
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 1
57765: NEG
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: LD_INT 2
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: LD_INT 2
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 2
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 2
57821: PUSH
57822: LD_INT 2
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: LD_INT 2
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: LD_INT 1
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 2
57852: NEG
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: NEG
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 2
57875: NEG
57876: PUSH
57877: LD_INT 2
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 1
57887: NEG
57888: PUSH
57889: LD_INT 3
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: LD_INT 2
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 3
57910: PUSH
57911: LD_INT 2
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 2
57920: PUSH
57921: LD_INT 3
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 2
57930: NEG
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 3
57941: NEG
57942: PUSH
57943: LD_INT 1
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57976: LD_ADDR_VAR 0 35
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 0
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 1
58045: NEG
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 2
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 2
58067: NEG
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58088: LD_ADDR_VAR 0 36
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: LD_INT 0
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 0
58105: PUSH
58106: LD_INT 1
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: NEG
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 1
58157: NEG
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: LD_INT 2
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: LD_INT 2
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58200: LD_ADDR_VAR 0 37
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: LD_INT 1
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: LD_INT 1
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58312: LD_ADDR_VAR 0 38
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: LD_INT 1
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: LD_INT 1
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 2
58403: NEG
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58424: LD_ADDR_VAR 0 39
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: LD_INT 1
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 1
58482: NEG
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: LD_INT 1
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 1
58505: NEG
58506: PUSH
58507: LD_INT 2
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: LD_INT 2
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58536: LD_ADDR_VAR 0 40
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: LD_INT 0
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: LD_INT 1
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: PUSH
58575: LD_INT 1
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: LD_INT 1
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 1
58594: NEG
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: NEG
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 1
58628: NEG
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58648: LD_ADDR_VAR 0 41
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 1
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: LD_INT 1
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: NEG
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: LD_INT 2
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 2
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 2
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 2
58772: PUSH
58773: LD_INT 2
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: LD_INT 2
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: LD_INT 1
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 2
58803: NEG
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 2
58814: NEG
58815: PUSH
58816: LD_INT 1
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 2
58826: NEG
58827: PUSH
58828: LD_INT 2
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 2
58838: NEG
58839: PUSH
58840: LD_INT 3
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 2
58850: PUSH
58851: LD_INT 1
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 3
58861: PUSH
58862: LD_INT 0
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 3
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 3
58881: PUSH
58882: LD_INT 2
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 3
58891: PUSH
58892: LD_INT 3
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 2
58901: PUSH
58902: LD_INT 3
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 3
58922: NEG
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 3
58933: NEG
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 3
58945: NEG
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 3
58957: NEG
58958: PUSH
58959: LD_INT 3
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58998: LD_ADDR_VAR 0 42
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 1
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 1
59056: NEG
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: LD_INT 2
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 0
59091: PUSH
59092: LD_INT 2
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 1
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 2
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 2
59123: PUSH
59124: LD_INT 2
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: LD_INT 2
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 2
59164: NEG
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 2
59176: NEG
59177: PUSH
59178: LD_INT 2
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 2
59188: NEG
59189: PUSH
59190: LD_INT 3
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: NEG
59201: PUSH
59202: LD_INT 3
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: LD_INT 3
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: LD_INT 2
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 3
59234: PUSH
59235: LD_INT 2
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 3
59244: PUSH
59245: LD_INT 3
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 2
59254: PUSH
59255: LD_INT 3
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: LD_INT 3
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: LD_INT 3
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: NEG
59285: PUSH
59286: LD_INT 2
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 3
59295: NEG
59296: PUSH
59297: LD_INT 2
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 3
59307: NEG
59308: PUSH
59309: LD_INT 3
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59348: LD_ADDR_VAR 0 43
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 1
59386: PUSH
59387: LD_INT 1
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: LD_INT 1
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 1
59406: NEG
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 1
59417: NEG
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: LD_INT 2
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: LD_INT 2
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: LD_INT 1
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 2
59463: PUSH
59464: LD_INT 0
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 2
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: LD_INT 2
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: LD_INT 2
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 2
59514: NEG
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 2
59525: NEG
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 1
59537: NEG
59538: PUSH
59539: LD_INT 3
59541: NEG
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: LD_INT 3
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: PUSH
59561: LD_INT 2
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 2
59571: PUSH
59572: LD_INT 1
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 3
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 3
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 1
59602: PUSH
59603: LD_INT 3
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: LD_INT 3
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: NEG
59623: PUSH
59624: LD_INT 2
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 2
59633: NEG
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 3
59644: NEG
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 3
59655: NEG
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59696: LD_ADDR_VAR 0 44
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 0
59713: PUSH
59714: LD_INT 1
59716: NEG
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 1
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 1
59734: PUSH
59735: LD_INT 1
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: LD_INT 1
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: PUSH
59779: LD_INT 2
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 2
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: LD_INT 1
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 2
59820: PUSH
59821: LD_INT 2
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 1
59830: PUSH
59831: LD_INT 2
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 2
59851: NEG
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 2
59862: NEG
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 2
59874: NEG
59875: PUSH
59876: LD_INT 2
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 2
59886: NEG
59887: PUSH
59888: LD_INT 3
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 2
59898: PUSH
59899: LD_INT 1
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 3
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 3
59919: PUSH
59920: LD_INT 1
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 3
59929: PUSH
59930: LD_INT 2
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 3
59939: PUSH
59940: LD_INT 3
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 2
59949: PUSH
59950: LD_INT 3
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 2
59959: NEG
59960: PUSH
59961: LD_INT 1
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 3
59970: NEG
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 3
59981: NEG
59982: PUSH
59983: LD_INT 1
59985: NEG
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 3
59993: NEG
59994: PUSH
59995: LD_INT 2
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 3
60005: NEG
60006: PUSH
60007: LD_INT 3
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60046: LD_ADDR_VAR 0 45
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: LD_INT 0
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 1
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 1
60084: PUSH
60085: LD_INT 1
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: LD_INT 1
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 1
60104: NEG
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: NEG
60116: PUSH
60117: LD_INT 1
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: LD_INT 2
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: LD_INT 2
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 2
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 2
60171: PUSH
60172: LD_INT 2
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: LD_INT 2
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: PUSH
60203: LD_INT 1
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: NEG
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 2
60224: NEG
60225: PUSH
60226: LD_INT 2
60228: NEG
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 2
60236: NEG
60237: PUSH
60238: LD_INT 3
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: NEG
60249: PUSH
60250: LD_INT 3
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 0
60260: PUSH
60261: LD_INT 3
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 1
60271: PUSH
60272: LD_INT 2
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 3
60282: PUSH
60283: LD_INT 2
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 3
60292: PUSH
60293: LD_INT 3
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 2
60302: PUSH
60303: LD_INT 3
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: LD_INT 3
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: LD_INT 3
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 1
60332: NEG
60333: PUSH
60334: LD_INT 2
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 3
60343: NEG
60344: PUSH
60345: LD_INT 2
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 3
60355: NEG
60356: PUSH
60357: LD_INT 3
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60396: LD_ADDR_VAR 0 46
60400: PUSH
60401: LD_INT 0
60403: PUSH
60404: LD_INT 0
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: LD_INT 1
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 1
60434: PUSH
60435: LD_INT 1
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 0
60444: PUSH
60445: LD_INT 1
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 1
60477: NEG
60478: PUSH
60479: LD_INT 2
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: LD_INT 2
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 2
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 2
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: PUSH
60532: LD_INT 2
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: LD_INT 2
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 1
60551: NEG
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 2
60562: NEG
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: NEG
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: PUSH
60587: LD_INT 3
60589: NEG
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: LD_INT 3
60600: NEG
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: LD_INT 2
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 2
60619: PUSH
60620: LD_INT 1
60622: NEG
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 3
60630: PUSH
60631: LD_INT 0
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 3
60640: PUSH
60641: LD_INT 1
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: LD_INT 3
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: LD_INT 3
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: LD_INT 2
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 2
60681: NEG
60682: PUSH
60683: LD_INT 1
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 3
60692: NEG
60693: PUSH
60694: LD_INT 0
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 3
60703: NEG
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60744: LD_ADDR_VAR 0 47
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 1
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: LD_INT 1
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: LD_INT 0
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 1
60825: NEG
60826: PUSH
60827: LD_INT 2
60829: NEG
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 0
60837: PUSH
60838: LD_INT 2
60840: NEG
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 1
60848: PUSH
60849: LD_INT 1
60851: NEG
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 2
60859: NEG
60860: PUSH
60861: LD_INT 1
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 2
60871: NEG
60872: PUSH
60873: LD_INT 2
60875: NEG
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60895: LD_ADDR_VAR 0 48
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 0
60912: PUSH
60913: LD_INT 1
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: LD_INT 1
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: LD_INT 1
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 1
60976: NEG
60977: PUSH
60978: LD_INT 2
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: LD_INT 2
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 2
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 2
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61042: LD_ADDR_VAR 0 49
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: LD_INT 0
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 1
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 0
61090: PUSH
61091: LD_INT 1
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 1
61100: NEG
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: LD_INT 1
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 1
61123: PUSH
61124: LD_INT 1
61126: NEG
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 2
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 2
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 2
61154: PUSH
61155: LD_INT 2
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 1
61164: PUSH
61165: LD_INT 2
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61186: LD_ADDR_VAR 0 50
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 0
61203: PUSH
61204: LD_INT 1
61206: NEG
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 1
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 1
61255: NEG
61256: PUSH
61257: LD_INT 1
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 2
61267: PUSH
61268: LD_INT 1
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 2
61277: PUSH
61278: LD_INT 2
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: LD_INT 2
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: LD_INT 2
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 1
61307: NEG
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61330: LD_ADDR_VAR 0 51
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 1
61358: PUSH
61359: LD_INT 0
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: LD_INT 1
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: LD_INT 1
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: LD_INT 2
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 0
61421: PUSH
61422: LD_INT 2
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 1
61431: NEG
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 2
61442: NEG
61443: PUSH
61444: LD_INT 0
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 2
61453: NEG
61454: PUSH
61455: LD_INT 1
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61477: LD_ADDR_VAR 0 52
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: LD_INT 0
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 0
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 1
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: LD_INT 1
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 0
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 1
61535: NEG
61536: PUSH
61537: LD_INT 0
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: LD_INT 2
61562: NEG
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 1
61570: NEG
61571: PUSH
61572: LD_INT 1
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 2
61592: NEG
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 2
61604: NEG
61605: PUSH
61606: LD_INT 2
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61628: LD_ADDR_VAR 0 53
61632: PUSH
61633: LD_INT 0
61635: PUSH
61636: LD_INT 0
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 0
61645: PUSH
61646: LD_INT 1
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 1
61656: PUSH
61657: LD_INT 0
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 1
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 0
61676: PUSH
61677: LD_INT 1
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 1
61686: NEG
61687: PUSH
61688: LD_INT 0
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: LD_INT 1
61701: NEG
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: LD_INT 2
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: LD_INT 2
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 1
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 2
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 2
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 2
61763: PUSH
61764: LD_INT 2
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: LD_INT 2
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: LD_INT 2
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: NEG
61794: PUSH
61795: LD_INT 1
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: NEG
61805: PUSH
61806: LD_INT 0
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 2
61815: NEG
61816: PUSH
61817: LD_INT 1
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 2
61827: NEG
61828: PUSH
61829: LD_INT 2
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61858: LD_ADDR_VAR 0 54
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: LD_INT 0
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 0
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 1
61886: PUSH
61887: LD_INT 0
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: LD_INT 1
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 0
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: NEG
61917: PUSH
61918: LD_INT 0
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 1
61927: NEG
61928: PUSH
61929: LD_INT 1
61931: NEG
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: LD_INT 2
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 0
61951: PUSH
61952: LD_INT 2
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 1
61962: PUSH
61963: LD_INT 1
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 2
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 2
61983: PUSH
61984: LD_INT 1
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 2
61993: PUSH
61994: LD_INT 2
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 1
62003: PUSH
62004: LD_INT 2
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 0
62013: PUSH
62014: LD_INT 2
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 1
62023: NEG
62024: PUSH
62025: LD_INT 1
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 2
62034: NEG
62035: PUSH
62036: LD_INT 0
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 2
62045: NEG
62046: PUSH
62047: LD_INT 1
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 2
62057: NEG
62058: PUSH
62059: LD_INT 2
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62088: LD_ADDR_VAR 0 55
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 0
62105: PUSH
62106: LD_INT 1
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 1
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: LD_INT 1
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: LD_INT 1
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: NEG
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 1
62157: NEG
62158: PUSH
62159: LD_INT 1
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 1
62169: NEG
62170: PUSH
62171: LD_INT 2
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: LD_INT 2
62184: NEG
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 2
62203: PUSH
62204: LD_INT 0
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 2
62213: PUSH
62214: LD_INT 1
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 2
62223: PUSH
62224: LD_INT 2
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 1
62233: PUSH
62234: LD_INT 2
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: LD_INT 2
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 1
62253: NEG
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 2
62264: NEG
62265: PUSH
62266: LD_INT 0
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 2
62275: NEG
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 2
62287: NEG
62288: PUSH
62289: LD_INT 2
62291: NEG
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62318: LD_ADDR_VAR 0 56
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: LD_INT 1
62338: NEG
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 1
62346: PUSH
62347: LD_INT 0
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 1
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 0
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 1
62376: NEG
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 1
62387: NEG
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: LD_INT 2
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: LD_INT 2
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 2
62433: PUSH
62434: LD_INT 0
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 2
62443: PUSH
62444: LD_INT 1
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 2
62453: PUSH
62454: LD_INT 2
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 1
62463: PUSH
62464: LD_INT 2
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: LD_INT 2
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 1
62483: NEG
62484: PUSH
62485: LD_INT 1
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 2
62494: NEG
62495: PUSH
62496: LD_INT 0
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 2
62505: NEG
62506: PUSH
62507: LD_INT 1
62509: NEG
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 2
62517: NEG
62518: PUSH
62519: LD_INT 2
62521: NEG
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62548: LD_ADDR_VAR 0 57
62552: PUSH
62553: LD_INT 0
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 0
62565: PUSH
62566: LD_INT 1
62568: NEG
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 1
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: LD_INT 1
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 1
62606: NEG
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 1
62617: NEG
62618: PUSH
62619: LD_INT 1
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 1
62629: NEG
62630: PUSH
62631: LD_INT 2
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 0
62641: PUSH
62642: LD_INT 2
62644: NEG
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 1
62652: PUSH
62653: LD_INT 1
62655: NEG
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 2
62663: PUSH
62664: LD_INT 0
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 2
62673: PUSH
62674: LD_INT 1
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 2
62683: PUSH
62684: LD_INT 2
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 1
62693: PUSH
62694: LD_INT 2
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: LD_INT 2
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 1
62713: NEG
62714: PUSH
62715: LD_INT 1
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 2
62724: NEG
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 2
62735: NEG
62736: PUSH
62737: LD_INT 1
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 2
62747: NEG
62748: PUSH
62749: LD_INT 2
62751: NEG
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62778: LD_ADDR_VAR 0 58
62782: PUSH
62783: LD_INT 0
62785: PUSH
62786: LD_INT 0
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: LD_INT 1
62798: NEG
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 1
62806: PUSH
62807: LD_INT 0
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 1
62816: PUSH
62817: LD_INT 1
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 0
62826: PUSH
62827: LD_INT 1
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 1
62836: NEG
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: LD_INT 1
62851: NEG
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 1
62859: NEG
62860: PUSH
62861: LD_INT 2
62863: NEG
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: LD_INT 2
62874: NEG
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 1
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 2
62893: PUSH
62894: LD_INT 0
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 2
62903: PUSH
62904: LD_INT 1
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 2
62913: PUSH
62914: LD_INT 2
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 1
62923: PUSH
62924: LD_INT 2
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: LD_INT 2
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 1
62943: NEG
62944: PUSH
62945: LD_INT 1
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 2
62954: NEG
62955: PUSH
62956: LD_INT 0
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 2
62965: NEG
62966: PUSH
62967: LD_INT 1
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 2
62977: NEG
62978: PUSH
62979: LD_INT 2
62981: NEG
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63008: LD_ADDR_VAR 0 59
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: LD_INT 0
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 0
63025: PUSH
63026: LD_INT 1
63028: NEG
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 1
63036: PUSH
63037: LD_INT 0
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 1
63046: PUSH
63047: LD_INT 1
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: LD_INT 1
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 1
63066: NEG
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 1
63077: NEG
63078: PUSH
63079: LD_INT 1
63081: NEG
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63096: LD_ADDR_VAR 0 60
63100: PUSH
63101: LD_INT 0
63103: PUSH
63104: LD_INT 0
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 0
63113: PUSH
63114: LD_INT 1
63116: NEG
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 1
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 1
63134: PUSH
63135: LD_INT 1
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 0
63144: PUSH
63145: LD_INT 1
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 1
63154: NEG
63155: PUSH
63156: LD_INT 0
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 1
63165: NEG
63166: PUSH
63167: LD_INT 1
63169: NEG
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63184: LD_ADDR_VAR 0 61
63188: PUSH
63189: LD_INT 0
63191: PUSH
63192: LD_INT 0
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: LD_INT 1
63204: NEG
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 1
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 1
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: LD_INT 1
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: LD_INT 0
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 1
63253: NEG
63254: PUSH
63255: LD_INT 1
63257: NEG
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63272: LD_ADDR_VAR 0 62
63276: PUSH
63277: LD_INT 0
63279: PUSH
63280: LD_INT 0
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: LD_INT 1
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: LD_INT 0
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 1
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 1
63330: NEG
63331: PUSH
63332: LD_INT 0
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: NEG
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63360: LD_ADDR_VAR 0 63
63364: PUSH
63365: LD_INT 0
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 0
63377: PUSH
63378: LD_INT 1
63380: NEG
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 1
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 1
63398: PUSH
63399: LD_INT 1
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: LD_INT 1
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 1
63418: NEG
63419: PUSH
63420: LD_INT 0
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: NEG
63430: PUSH
63431: LD_INT 1
63433: NEG
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63448: LD_ADDR_VAR 0 64
63452: PUSH
63453: LD_INT 0
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: LD_INT 1
63468: NEG
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 1
63476: PUSH
63477: LD_INT 0
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 1
63486: PUSH
63487: LD_INT 1
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 0
63496: PUSH
63497: LD_INT 1
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 1
63506: NEG
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: NEG
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: ST_TO_ADDR
// end ; 1 :
63536: GO 69433
63538: LD_INT 1
63540: DOUBLE
63541: EQUAL
63542: IFTRUE 63546
63544: GO 66169
63546: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63547: LD_ADDR_VAR 0 11
63551: PUSH
63552: LD_INT 1
63554: NEG
63555: PUSH
63556: LD_INT 3
63558: NEG
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: LD_INT 3
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: LD_INT 2
63580: NEG
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: LIST
63590: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63591: LD_ADDR_VAR 0 12
63595: PUSH
63596: LD_INT 2
63598: PUSH
63599: LD_INT 1
63601: NEG
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 3
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 3
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: LIST
63631: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63632: LD_ADDR_VAR 0 13
63636: PUSH
63637: LD_INT 3
63639: PUSH
63640: LD_INT 2
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 3
63649: PUSH
63650: LD_INT 3
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 2
63659: PUSH
63660: LD_INT 3
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: LIST
63671: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63672: LD_ADDR_VAR 0 14
63676: PUSH
63677: LD_INT 1
63679: PUSH
63680: LD_INT 3
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 0
63689: PUSH
63690: LD_INT 3
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 1
63699: NEG
63700: PUSH
63701: LD_INT 2
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: LIST
63712: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63713: LD_ADDR_VAR 0 15
63717: PUSH
63718: LD_INT 2
63720: NEG
63721: PUSH
63722: LD_INT 1
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 3
63731: NEG
63732: PUSH
63733: LD_INT 0
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 3
63742: NEG
63743: PUSH
63744: LD_INT 1
63746: NEG
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: LIST
63756: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63757: LD_ADDR_VAR 0 16
63761: PUSH
63762: LD_INT 2
63764: NEG
63765: PUSH
63766: LD_INT 3
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 3
63776: NEG
63777: PUSH
63778: LD_INT 2
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 3
63788: NEG
63789: PUSH
63790: LD_INT 3
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: LIST
63802: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63803: LD_ADDR_VAR 0 17
63807: PUSH
63808: LD_INT 1
63810: NEG
63811: PUSH
63812: LD_INT 3
63814: NEG
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 0
63822: PUSH
63823: LD_INT 3
63825: NEG
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 1
63833: PUSH
63834: LD_INT 2
63836: NEG
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: LIST
63846: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63847: LD_ADDR_VAR 0 18
63851: PUSH
63852: LD_INT 2
63854: PUSH
63855: LD_INT 1
63857: NEG
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 3
63865: PUSH
63866: LD_INT 0
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 3
63875: PUSH
63876: LD_INT 1
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: LIST
63887: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63888: LD_ADDR_VAR 0 19
63892: PUSH
63893: LD_INT 3
63895: PUSH
63896: LD_INT 2
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 3
63905: PUSH
63906: LD_INT 3
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 2
63915: PUSH
63916: LD_INT 3
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: LIST
63927: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63928: LD_ADDR_VAR 0 20
63932: PUSH
63933: LD_INT 1
63935: PUSH
63936: LD_INT 3
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: LD_INT 3
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 1
63955: NEG
63956: PUSH
63957: LD_INT 2
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: LIST
63968: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63969: LD_ADDR_VAR 0 21
63973: PUSH
63974: LD_INT 2
63976: NEG
63977: PUSH
63978: LD_INT 1
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 3
63987: NEG
63988: PUSH
63989: LD_INT 0
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 3
63998: NEG
63999: PUSH
64000: LD_INT 1
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: LIST
64012: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64013: LD_ADDR_VAR 0 22
64017: PUSH
64018: LD_INT 2
64020: NEG
64021: PUSH
64022: LD_INT 3
64024: NEG
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 3
64032: NEG
64033: PUSH
64034: LD_INT 2
64036: NEG
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 3
64044: NEG
64045: PUSH
64046: LD_INT 3
64048: NEG
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: LIST
64058: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64059: LD_ADDR_VAR 0 23
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: LD_INT 3
64069: NEG
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 1
64077: NEG
64078: PUSH
64079: LD_INT 4
64081: NEG
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 1
64089: PUSH
64090: LD_INT 3
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: LIST
64102: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64103: LD_ADDR_VAR 0 24
64107: PUSH
64108: LD_INT 3
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 3
64120: PUSH
64121: LD_INT 1
64123: NEG
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 4
64131: PUSH
64132: LD_INT 1
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: LIST
64143: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64144: LD_ADDR_VAR 0 25
64148: PUSH
64149: LD_INT 3
64151: PUSH
64152: LD_INT 3
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 4
64161: PUSH
64162: LD_INT 3
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 3
64171: PUSH
64172: LD_INT 4
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: LIST
64183: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64184: LD_ADDR_VAR 0 26
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: LD_INT 3
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 1
64201: PUSH
64202: LD_INT 4
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 1
64211: NEG
64212: PUSH
64213: LD_INT 3
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: LIST
64224: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64225: LD_ADDR_VAR 0 27
64229: PUSH
64230: LD_INT 3
64232: NEG
64233: PUSH
64234: LD_INT 0
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 3
64243: NEG
64244: PUSH
64245: LD_INT 1
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 4
64254: NEG
64255: PUSH
64256: LD_INT 1
64258: NEG
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: LIST
64268: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64269: LD_ADDR_VAR 0 28
64273: PUSH
64274: LD_INT 3
64276: NEG
64277: PUSH
64278: LD_INT 3
64280: NEG
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 3
64288: NEG
64289: PUSH
64290: LD_INT 4
64292: NEG
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 4
64300: NEG
64301: PUSH
64302: LD_INT 3
64304: NEG
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: LIST
64314: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64315: LD_ADDR_VAR 0 29
64319: PUSH
64320: LD_INT 1
64322: NEG
64323: PUSH
64324: LD_INT 3
64326: NEG
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: LD_INT 3
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 1
64345: PUSH
64346: LD_INT 2
64348: NEG
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 1
64356: NEG
64357: PUSH
64358: LD_INT 4
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 0
64368: PUSH
64369: LD_INT 4
64371: NEG
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 1
64379: PUSH
64380: LD_INT 3
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 1
64390: NEG
64391: PUSH
64392: LD_INT 5
64394: NEG
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 0
64402: PUSH
64403: LD_INT 5
64405: NEG
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 1
64413: PUSH
64414: LD_INT 4
64416: NEG
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: LD_INT 6
64428: NEG
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 0
64436: PUSH
64437: LD_INT 6
64439: NEG
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: LD_INT 5
64450: NEG
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64470: LD_ADDR_VAR 0 30
64474: PUSH
64475: LD_INT 2
64477: PUSH
64478: LD_INT 1
64480: NEG
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 3
64488: PUSH
64489: LD_INT 0
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 3
64498: PUSH
64499: LD_INT 1
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 3
64508: PUSH
64509: LD_INT 1
64511: NEG
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 4
64519: PUSH
64520: LD_INT 0
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 4
64529: PUSH
64530: LD_INT 1
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 4
64539: PUSH
64540: LD_INT 1
64542: NEG
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 5
64550: PUSH
64551: LD_INT 0
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 5
64560: PUSH
64561: LD_INT 1
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 5
64570: PUSH
64571: LD_INT 1
64573: NEG
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 6
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 6
64591: PUSH
64592: LD_INT 1
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64613: LD_ADDR_VAR 0 31
64617: PUSH
64618: LD_INT 3
64620: PUSH
64621: LD_INT 2
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 3
64630: PUSH
64631: LD_INT 3
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 2
64640: PUSH
64641: LD_INT 3
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 4
64650: PUSH
64651: LD_INT 3
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 4
64660: PUSH
64661: LD_INT 4
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 3
64670: PUSH
64671: LD_INT 4
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 5
64680: PUSH
64681: LD_INT 4
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 5
64690: PUSH
64691: LD_INT 5
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 4
64700: PUSH
64701: LD_INT 5
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 6
64710: PUSH
64711: LD_INT 5
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 6
64720: PUSH
64721: LD_INT 6
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 5
64730: PUSH
64731: LD_INT 6
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64752: LD_ADDR_VAR 0 32
64756: PUSH
64757: LD_INT 1
64759: PUSH
64760: LD_INT 3
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: LD_INT 3
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 1
64779: NEG
64780: PUSH
64781: LD_INT 2
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 1
64790: PUSH
64791: LD_INT 4
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: LD_INT 4
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 1
64810: NEG
64811: PUSH
64812: LD_INT 3
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 1
64821: PUSH
64822: LD_INT 5
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 0
64831: PUSH
64832: LD_INT 5
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 1
64841: NEG
64842: PUSH
64843: LD_INT 4
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 1
64852: PUSH
64853: LD_INT 6
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: LD_INT 6
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 1
64872: NEG
64873: PUSH
64874: LD_INT 5
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64895: LD_ADDR_VAR 0 33
64899: PUSH
64900: LD_INT 2
64902: NEG
64903: PUSH
64904: LD_INT 1
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 3
64913: NEG
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 3
64924: NEG
64925: PUSH
64926: LD_INT 1
64928: NEG
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 3
64936: NEG
64937: PUSH
64938: LD_INT 1
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 4
64947: NEG
64948: PUSH
64949: LD_INT 0
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 4
64958: NEG
64959: PUSH
64960: LD_INT 1
64962: NEG
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 4
64970: NEG
64971: PUSH
64972: LD_INT 1
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 5
64981: NEG
64982: PUSH
64983: LD_INT 0
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 5
64992: NEG
64993: PUSH
64994: LD_INT 1
64996: NEG
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 5
65004: NEG
65005: PUSH
65006: LD_INT 1
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 6
65015: NEG
65016: PUSH
65017: LD_INT 0
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 6
65026: NEG
65027: PUSH
65028: LD_INT 1
65030: NEG
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65050: LD_ADDR_VAR 0 34
65054: PUSH
65055: LD_INT 2
65057: NEG
65058: PUSH
65059: LD_INT 3
65061: NEG
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 3
65069: NEG
65070: PUSH
65071: LD_INT 2
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 3
65081: NEG
65082: PUSH
65083: LD_INT 3
65085: NEG
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 3
65093: NEG
65094: PUSH
65095: LD_INT 4
65097: NEG
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 4
65105: NEG
65106: PUSH
65107: LD_INT 3
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 4
65117: NEG
65118: PUSH
65119: LD_INT 4
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 4
65129: NEG
65130: PUSH
65131: LD_INT 5
65133: NEG
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 5
65141: NEG
65142: PUSH
65143: LD_INT 4
65145: NEG
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 5
65153: NEG
65154: PUSH
65155: LD_INT 5
65157: NEG
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 5
65165: NEG
65166: PUSH
65167: LD_INT 6
65169: NEG
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 6
65177: NEG
65178: PUSH
65179: LD_INT 5
65181: NEG
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 6
65189: NEG
65190: PUSH
65191: LD_INT 6
65193: NEG
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65213: LD_ADDR_VAR 0 41
65217: PUSH
65218: LD_INT 0
65220: PUSH
65221: LD_INT 2
65223: NEG
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 1
65231: NEG
65232: PUSH
65233: LD_INT 3
65235: NEG
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 1
65243: PUSH
65244: LD_INT 2
65246: NEG
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: LIST
65256: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65257: LD_ADDR_VAR 0 42
65261: PUSH
65262: LD_INT 2
65264: PUSH
65265: LD_INT 0
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 2
65274: PUSH
65275: LD_INT 1
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 3
65285: PUSH
65286: LD_INT 1
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: LIST
65297: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65298: LD_ADDR_VAR 0 43
65302: PUSH
65303: LD_INT 2
65305: PUSH
65306: LD_INT 2
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 3
65315: PUSH
65316: LD_INT 2
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 2
65325: PUSH
65326: LD_INT 3
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: LIST
65337: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65338: LD_ADDR_VAR 0 44
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: LD_INT 2
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 1
65355: PUSH
65356: LD_INT 3
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 1
65365: NEG
65366: PUSH
65367: LD_INT 2
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: LIST
65378: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65379: LD_ADDR_VAR 0 45
65383: PUSH
65384: LD_INT 2
65386: NEG
65387: PUSH
65388: LD_INT 0
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 2
65397: NEG
65398: PUSH
65399: LD_INT 1
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 3
65408: NEG
65409: PUSH
65410: LD_INT 1
65412: NEG
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: LIST
65422: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65423: LD_ADDR_VAR 0 46
65427: PUSH
65428: LD_INT 2
65430: NEG
65431: PUSH
65432: LD_INT 2
65434: NEG
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 2
65442: NEG
65443: PUSH
65444: LD_INT 3
65446: NEG
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 3
65454: NEG
65455: PUSH
65456: LD_INT 2
65458: NEG
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: LIST
65468: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65469: LD_ADDR_VAR 0 47
65473: PUSH
65474: LD_INT 2
65476: NEG
65477: PUSH
65478: LD_INT 3
65480: NEG
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 1
65488: NEG
65489: PUSH
65490: LD_INT 3
65492: NEG
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65502: LD_ADDR_VAR 0 48
65506: PUSH
65507: LD_INT 1
65509: PUSH
65510: LD_INT 2
65512: NEG
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 2
65520: PUSH
65521: LD_INT 1
65523: NEG
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65533: LD_ADDR_VAR 0 49
65537: PUSH
65538: LD_INT 3
65540: PUSH
65541: LD_INT 1
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 3
65550: PUSH
65551: LD_INT 2
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65562: LD_ADDR_VAR 0 50
65566: PUSH
65567: LD_INT 2
65569: PUSH
65570: LD_INT 3
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 1
65579: PUSH
65580: LD_INT 3
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65591: LD_ADDR_VAR 0 51
65595: PUSH
65596: LD_INT 1
65598: NEG
65599: PUSH
65600: LD_INT 2
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 2
65609: NEG
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65622: LD_ADDR_VAR 0 52
65626: PUSH
65627: LD_INT 3
65629: NEG
65630: PUSH
65631: LD_INT 1
65633: NEG
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 3
65641: NEG
65642: PUSH
65643: LD_INT 2
65645: NEG
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65655: LD_ADDR_VAR 0 53
65659: PUSH
65660: LD_INT 1
65662: NEG
65663: PUSH
65664: LD_INT 3
65666: NEG
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 0
65674: PUSH
65675: LD_INT 3
65677: NEG
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 1
65685: PUSH
65686: LD_INT 2
65688: NEG
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: LIST
65698: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65699: LD_ADDR_VAR 0 54
65703: PUSH
65704: LD_INT 2
65706: PUSH
65707: LD_INT 1
65709: NEG
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 3
65717: PUSH
65718: LD_INT 0
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 3
65727: PUSH
65728: LD_INT 1
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: LIST
65739: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65740: LD_ADDR_VAR 0 55
65744: PUSH
65745: LD_INT 3
65747: PUSH
65748: LD_INT 2
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 3
65757: PUSH
65758: LD_INT 3
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 2
65767: PUSH
65768: LD_INT 3
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: LIST
65779: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65780: LD_ADDR_VAR 0 56
65784: PUSH
65785: LD_INT 1
65787: PUSH
65788: LD_INT 3
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 0
65797: PUSH
65798: LD_INT 3
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 1
65807: NEG
65808: PUSH
65809: LD_INT 2
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: LIST
65820: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65821: LD_ADDR_VAR 0 57
65825: PUSH
65826: LD_INT 2
65828: NEG
65829: PUSH
65830: LD_INT 1
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 3
65839: NEG
65840: PUSH
65841: LD_INT 0
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 3
65850: NEG
65851: PUSH
65852: LD_INT 1
65854: NEG
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: LIST
65864: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65865: LD_ADDR_VAR 0 58
65869: PUSH
65870: LD_INT 2
65872: NEG
65873: PUSH
65874: LD_INT 3
65876: NEG
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 3
65884: NEG
65885: PUSH
65886: LD_INT 2
65888: NEG
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 3
65896: NEG
65897: PUSH
65898: LD_INT 3
65900: NEG
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: LIST
65910: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65911: LD_ADDR_VAR 0 59
65915: PUSH
65916: LD_INT 1
65918: NEG
65919: PUSH
65920: LD_INT 2
65922: NEG
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 0
65930: PUSH
65931: LD_INT 2
65933: NEG
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 1
65941: PUSH
65942: LD_INT 1
65944: NEG
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: LIST
65954: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65955: LD_ADDR_VAR 0 60
65959: PUSH
65960: LD_INT 1
65962: PUSH
65963: LD_INT 1
65965: NEG
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 2
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 2
65983: PUSH
65984: LD_INT 1
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: LIST
65995: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65996: LD_ADDR_VAR 0 61
66000: PUSH
66001: LD_INT 2
66003: PUSH
66004: LD_INT 1
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 2
66013: PUSH
66014: LD_INT 2
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 1
66023: PUSH
66024: LD_INT 2
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: LIST
66035: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66036: LD_ADDR_VAR 0 62
66040: PUSH
66041: LD_INT 1
66043: PUSH
66044: LD_INT 2
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 0
66053: PUSH
66054: LD_INT 2
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 1
66063: NEG
66064: PUSH
66065: LD_INT 1
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: LIST
66076: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66077: LD_ADDR_VAR 0 63
66081: PUSH
66082: LD_INT 1
66084: NEG
66085: PUSH
66086: LD_INT 1
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 2
66095: NEG
66096: PUSH
66097: LD_INT 0
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 2
66106: NEG
66107: PUSH
66108: LD_INT 1
66110: NEG
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: LIST
66120: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66121: LD_ADDR_VAR 0 64
66125: PUSH
66126: LD_INT 1
66128: NEG
66129: PUSH
66130: LD_INT 2
66132: NEG
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 2
66140: NEG
66141: PUSH
66142: LD_INT 1
66144: NEG
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 2
66152: NEG
66153: PUSH
66154: LD_INT 2
66156: NEG
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: LIST
66166: ST_TO_ADDR
// end ; 2 :
66167: GO 69433
66169: LD_INT 2
66171: DOUBLE
66172: EQUAL
66173: IFTRUE 66177
66175: GO 69432
66177: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66178: LD_ADDR_VAR 0 29
66182: PUSH
66183: LD_INT 4
66185: PUSH
66186: LD_INT 0
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: LD_INT 4
66195: PUSH
66196: LD_INT 1
66198: NEG
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 5
66206: PUSH
66207: LD_INT 0
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 5
66216: PUSH
66217: LD_INT 1
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 4
66226: PUSH
66227: LD_INT 1
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 3
66236: PUSH
66237: LD_INT 0
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 3
66246: PUSH
66247: LD_INT 1
66249: NEG
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 3
66257: PUSH
66258: LD_INT 2
66260: NEG
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 5
66268: PUSH
66269: LD_INT 2
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 3
66278: PUSH
66279: LD_INT 3
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 3
66288: PUSH
66289: LD_INT 2
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 4
66298: PUSH
66299: LD_INT 3
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 4
66308: PUSH
66309: LD_INT 4
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 3
66318: PUSH
66319: LD_INT 4
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 2
66328: PUSH
66329: LD_INT 3
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 2
66338: PUSH
66339: LD_INT 2
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 4
66348: PUSH
66349: LD_INT 2
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 2
66358: PUSH
66359: LD_INT 4
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 0
66368: PUSH
66369: LD_INT 4
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 0
66378: PUSH
66379: LD_INT 3
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 1
66388: PUSH
66389: LD_INT 4
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 1
66398: PUSH
66399: LD_INT 5
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 0
66408: PUSH
66409: LD_INT 5
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 1
66418: NEG
66419: PUSH
66420: LD_INT 4
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 1
66429: NEG
66430: PUSH
66431: LD_INT 3
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 2
66440: PUSH
66441: LD_INT 5
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 2
66450: NEG
66451: PUSH
66452: LD_INT 3
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 3
66461: NEG
66462: PUSH
66463: LD_INT 0
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 3
66472: NEG
66473: PUSH
66474: LD_INT 1
66476: NEG
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 2
66484: NEG
66485: PUSH
66486: LD_INT 0
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 2
66495: NEG
66496: PUSH
66497: LD_INT 1
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 3
66506: NEG
66507: PUSH
66508: LD_INT 1
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 4
66517: NEG
66518: PUSH
66519: LD_INT 0
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 4
66528: NEG
66529: PUSH
66530: LD_INT 1
66532: NEG
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 4
66540: NEG
66541: PUSH
66542: LD_INT 2
66544: NEG
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 2
66552: NEG
66553: PUSH
66554: LD_INT 2
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 4
66563: NEG
66564: PUSH
66565: LD_INT 4
66567: NEG
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 4
66575: NEG
66576: PUSH
66577: LD_INT 5
66579: NEG
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 3
66587: NEG
66588: PUSH
66589: LD_INT 4
66591: NEG
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 3
66599: NEG
66600: PUSH
66601: LD_INT 3
66603: NEG
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 4
66611: NEG
66612: PUSH
66613: LD_INT 3
66615: NEG
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 5
66623: NEG
66624: PUSH
66625: LD_INT 4
66627: NEG
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 5
66635: NEG
66636: PUSH
66637: LD_INT 5
66639: NEG
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 3
66647: NEG
66648: PUSH
66649: LD_INT 5
66651: NEG
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 5
66659: NEG
66660: PUSH
66661: LD_INT 3
66663: NEG
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66716: LD_ADDR_VAR 0 30
66720: PUSH
66721: LD_INT 4
66723: PUSH
66724: LD_INT 4
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 4
66733: PUSH
66734: LD_INT 3
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 5
66743: PUSH
66744: LD_INT 4
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 5
66753: PUSH
66754: LD_INT 5
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 4
66763: PUSH
66764: LD_INT 5
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 3
66773: PUSH
66774: LD_INT 4
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 3
66783: PUSH
66784: LD_INT 3
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 5
66793: PUSH
66794: LD_INT 3
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 3
66803: PUSH
66804: LD_INT 5
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 0
66813: PUSH
66814: LD_INT 3
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: LD_INT 0
66823: PUSH
66824: LD_INT 2
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 1
66833: PUSH
66834: LD_INT 3
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 1
66843: PUSH
66844: LD_INT 4
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 0
66853: PUSH
66854: LD_INT 4
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 1
66863: NEG
66864: PUSH
66865: LD_INT 3
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 1
66874: NEG
66875: PUSH
66876: LD_INT 2
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 2
66885: PUSH
66886: LD_INT 4
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 2
66895: NEG
66896: PUSH
66897: LD_INT 2
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 4
66906: NEG
66907: PUSH
66908: LD_INT 0
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 4
66917: NEG
66918: PUSH
66919: LD_INT 1
66921: NEG
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 3
66929: NEG
66930: PUSH
66931: LD_INT 0
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 3
66940: NEG
66941: PUSH
66942: LD_INT 1
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 4
66951: NEG
66952: PUSH
66953: LD_INT 1
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 5
66962: NEG
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 5
66973: NEG
66974: PUSH
66975: LD_INT 1
66977: NEG
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 5
66985: NEG
66986: PUSH
66987: LD_INT 2
66989: NEG
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 3
66997: NEG
66998: PUSH
66999: LD_INT 2
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 3
67008: NEG
67009: PUSH
67010: LD_INT 3
67012: NEG
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 3
67020: NEG
67021: PUSH
67022: LD_INT 4
67024: NEG
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 2
67032: NEG
67033: PUSH
67034: LD_INT 3
67036: NEG
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 2
67044: NEG
67045: PUSH
67046: LD_INT 2
67048: NEG
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 3
67056: NEG
67057: PUSH
67058: LD_INT 2
67060: NEG
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: LD_INT 4
67068: NEG
67069: PUSH
67070: LD_INT 3
67072: NEG
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 4
67080: NEG
67081: PUSH
67082: LD_INT 4
67084: NEG
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 2
67092: NEG
67093: PUSH
67094: LD_INT 4
67096: NEG
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 4
67104: NEG
67105: PUSH
67106: LD_INT 2
67108: NEG
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 0
67116: PUSH
67117: LD_INT 4
67119: NEG
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 0
67127: PUSH
67128: LD_INT 5
67130: NEG
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 1
67138: PUSH
67139: LD_INT 4
67141: NEG
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 1
67149: PUSH
67150: LD_INT 3
67152: NEG
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 0
67160: PUSH
67161: LD_INT 3
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 1
67171: NEG
67172: PUSH
67173: LD_INT 4
67175: NEG
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 1
67183: NEG
67184: PUSH
67185: LD_INT 5
67187: NEG
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 2
67195: PUSH
67196: LD_INT 3
67198: NEG
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 2
67206: NEG
67207: PUSH
67208: LD_INT 5
67210: NEG
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67263: LD_ADDR_VAR 0 31
67267: PUSH
67268: LD_INT 0
67270: PUSH
67271: LD_INT 4
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 0
67280: PUSH
67281: LD_INT 3
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 1
67290: PUSH
67291: LD_INT 4
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 1
67300: PUSH
67301: LD_INT 5
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 0
67310: PUSH
67311: LD_INT 5
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 1
67320: NEG
67321: PUSH
67322: LD_INT 4
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 1
67331: NEG
67332: PUSH
67333: LD_INT 3
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 2
67342: PUSH
67343: LD_INT 5
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 2
67352: NEG
67353: PUSH
67354: LD_INT 3
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 3
67363: NEG
67364: PUSH
67365: LD_INT 0
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 3
67374: NEG
67375: PUSH
67376: LD_INT 1
67378: NEG
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 2
67386: NEG
67387: PUSH
67388: LD_INT 0
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 2
67397: NEG
67398: PUSH
67399: LD_INT 1
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 3
67408: NEG
67409: PUSH
67410: LD_INT 1
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 4
67419: NEG
67420: PUSH
67421: LD_INT 0
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 4
67430: NEG
67431: PUSH
67432: LD_INT 1
67434: NEG
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 4
67442: NEG
67443: PUSH
67444: LD_INT 2
67446: NEG
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 2
67454: NEG
67455: PUSH
67456: LD_INT 2
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 4
67465: NEG
67466: PUSH
67467: LD_INT 4
67469: NEG
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 4
67477: NEG
67478: PUSH
67479: LD_INT 5
67481: NEG
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 3
67489: NEG
67490: PUSH
67491: LD_INT 4
67493: NEG
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 3
67501: NEG
67502: PUSH
67503: LD_INT 3
67505: NEG
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 4
67513: NEG
67514: PUSH
67515: LD_INT 3
67517: NEG
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 5
67525: NEG
67526: PUSH
67527: LD_INT 4
67529: NEG
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 5
67537: NEG
67538: PUSH
67539: LD_INT 5
67541: NEG
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 3
67549: NEG
67550: PUSH
67551: LD_INT 5
67553: NEG
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 5
67561: NEG
67562: PUSH
67563: LD_INT 3
67565: NEG
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 0
67573: PUSH
67574: LD_INT 3
67576: NEG
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 0
67584: PUSH
67585: LD_INT 4
67587: NEG
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 1
67595: PUSH
67596: LD_INT 3
67598: NEG
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 1
67606: PUSH
67607: LD_INT 2
67609: NEG
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 0
67617: PUSH
67618: LD_INT 2
67620: NEG
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: PUSH
67630: LD_INT 3
67632: NEG
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 1
67640: NEG
67641: PUSH
67642: LD_INT 4
67644: NEG
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 2
67652: PUSH
67653: LD_INT 2
67655: NEG
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 2
67663: NEG
67664: PUSH
67665: LD_INT 4
67667: NEG
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 4
67675: PUSH
67676: LD_INT 0
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 4
67685: PUSH
67686: LD_INT 1
67688: NEG
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 5
67696: PUSH
67697: LD_INT 0
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 5
67706: PUSH
67707: LD_INT 1
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 4
67716: PUSH
67717: LD_INT 1
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 3
67726: PUSH
67727: LD_INT 0
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 3
67736: PUSH
67737: LD_INT 1
67739: NEG
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 3
67747: PUSH
67748: LD_INT 2
67750: NEG
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 5
67758: PUSH
67759: LD_INT 2
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67813: LD_ADDR_VAR 0 32
67817: PUSH
67818: LD_INT 4
67820: NEG
67821: PUSH
67822: LD_INT 0
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 4
67831: NEG
67832: PUSH
67833: LD_INT 1
67835: NEG
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 3
67843: NEG
67844: PUSH
67845: LD_INT 0
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 3
67854: NEG
67855: PUSH
67856: LD_INT 1
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 4
67865: NEG
67866: PUSH
67867: LD_INT 1
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 5
67876: NEG
67877: PUSH
67878: LD_INT 0
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 5
67887: NEG
67888: PUSH
67889: LD_INT 1
67891: NEG
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 5
67899: NEG
67900: PUSH
67901: LD_INT 2
67903: NEG
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 3
67911: NEG
67912: PUSH
67913: LD_INT 2
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 3
67922: NEG
67923: PUSH
67924: LD_INT 3
67926: NEG
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 3
67934: NEG
67935: PUSH
67936: LD_INT 4
67938: NEG
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 2
67946: NEG
67947: PUSH
67948: LD_INT 3
67950: NEG
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 2
67958: NEG
67959: PUSH
67960: LD_INT 2
67962: NEG
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 3
67970: NEG
67971: PUSH
67972: LD_INT 2
67974: NEG
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 4
67982: NEG
67983: PUSH
67984: LD_INT 3
67986: NEG
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 4
67994: NEG
67995: PUSH
67996: LD_INT 4
67998: NEG
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 2
68006: NEG
68007: PUSH
68008: LD_INT 4
68010: NEG
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 4
68018: NEG
68019: PUSH
68020: LD_INT 2
68022: NEG
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 0
68030: PUSH
68031: LD_INT 4
68033: NEG
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 0
68041: PUSH
68042: LD_INT 5
68044: NEG
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 1
68052: PUSH
68053: LD_INT 4
68055: NEG
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 1
68063: PUSH
68064: LD_INT 3
68066: NEG
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 0
68074: PUSH
68075: LD_INT 3
68077: NEG
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 1
68085: NEG
68086: PUSH
68087: LD_INT 4
68089: NEG
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 1
68097: NEG
68098: PUSH
68099: LD_INT 5
68101: NEG
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 2
68109: PUSH
68110: LD_INT 3
68112: NEG
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 2
68120: NEG
68121: PUSH
68122: LD_INT 5
68124: NEG
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 3
68132: PUSH
68133: LD_INT 0
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 3
68142: PUSH
68143: LD_INT 1
68145: NEG
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 4
68153: PUSH
68154: LD_INT 0
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 4
68163: PUSH
68164: LD_INT 1
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 3
68173: PUSH
68174: LD_INT 1
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 2
68183: PUSH
68184: LD_INT 0
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 2
68193: PUSH
68194: LD_INT 1
68196: NEG
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 2
68204: PUSH
68205: LD_INT 2
68207: NEG
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 4
68215: PUSH
68216: LD_INT 2
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 4
68225: PUSH
68226: LD_INT 4
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 4
68235: PUSH
68236: LD_INT 3
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 5
68245: PUSH
68246: LD_INT 4
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 5
68255: PUSH
68256: LD_INT 5
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 4
68265: PUSH
68266: LD_INT 5
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 3
68275: PUSH
68276: LD_INT 4
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 3
68285: PUSH
68286: LD_INT 3
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 5
68295: PUSH
68296: LD_INT 3
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 3
68305: PUSH
68306: LD_INT 5
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68360: LD_ADDR_VAR 0 33
68364: PUSH
68365: LD_INT 4
68367: NEG
68368: PUSH
68369: LD_INT 4
68371: NEG
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 4
68379: NEG
68380: PUSH
68381: LD_INT 5
68383: NEG
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 3
68391: NEG
68392: PUSH
68393: LD_INT 4
68395: NEG
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 3
68403: NEG
68404: PUSH
68405: LD_INT 3
68407: NEG
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 4
68415: NEG
68416: PUSH
68417: LD_INT 3
68419: NEG
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 5
68427: NEG
68428: PUSH
68429: LD_INT 4
68431: NEG
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: LD_INT 5
68439: NEG
68440: PUSH
68441: LD_INT 5
68443: NEG
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 3
68451: NEG
68452: PUSH
68453: LD_INT 5
68455: NEG
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 5
68463: NEG
68464: PUSH
68465: LD_INT 3
68467: NEG
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 0
68475: PUSH
68476: LD_INT 3
68478: NEG
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 0
68486: PUSH
68487: LD_INT 4
68489: NEG
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 1
68497: PUSH
68498: LD_INT 3
68500: NEG
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 1
68508: PUSH
68509: LD_INT 2
68511: NEG
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 0
68519: PUSH
68520: LD_INT 2
68522: NEG
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 1
68530: NEG
68531: PUSH
68532: LD_INT 3
68534: NEG
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 1
68542: NEG
68543: PUSH
68544: LD_INT 4
68546: NEG
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PUSH
68552: LD_INT 2
68554: PUSH
68555: LD_INT 2
68557: NEG
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 2
68565: NEG
68566: PUSH
68567: LD_INT 4
68569: NEG
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 4
68577: PUSH
68578: LD_INT 0
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 4
68587: PUSH
68588: LD_INT 1
68590: NEG
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 5
68598: PUSH
68599: LD_INT 0
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 5
68608: PUSH
68609: LD_INT 1
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 4
68618: PUSH
68619: LD_INT 1
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 3
68628: PUSH
68629: LD_INT 0
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 3
68638: PUSH
68639: LD_INT 1
68641: NEG
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 3
68649: PUSH
68650: LD_INT 2
68652: NEG
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 5
68660: PUSH
68661: LD_INT 2
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 3
68670: PUSH
68671: LD_INT 3
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 3
68680: PUSH
68681: LD_INT 2
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 4
68690: PUSH
68691: LD_INT 3
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 4
68700: PUSH
68701: LD_INT 4
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 3
68710: PUSH
68711: LD_INT 4
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 2
68720: PUSH
68721: LD_INT 3
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 2
68730: PUSH
68731: LD_INT 2
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 4
68740: PUSH
68741: LD_INT 2
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 2
68750: PUSH
68751: LD_INT 4
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 0
68760: PUSH
68761: LD_INT 4
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 0
68770: PUSH
68771: LD_INT 3
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 1
68780: PUSH
68781: LD_INT 4
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: LD_INT 1
68790: PUSH
68791: LD_INT 5
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 0
68800: PUSH
68801: LD_INT 5
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 1
68810: NEG
68811: PUSH
68812: LD_INT 4
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 1
68821: NEG
68822: PUSH
68823: LD_INT 3
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 2
68832: PUSH
68833: LD_INT 5
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 2
68842: NEG
68843: PUSH
68844: LD_INT 3
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68898: LD_ADDR_VAR 0 34
68902: PUSH
68903: LD_INT 0
68905: PUSH
68906: LD_INT 4
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 0
68916: PUSH
68917: LD_INT 5
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 1
68927: PUSH
68928: LD_INT 4
68930: NEG
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 1
68938: PUSH
68939: LD_INT 3
68941: NEG
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: LD_INT 0
68949: PUSH
68950: LD_INT 3
68952: NEG
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 1
68960: NEG
68961: PUSH
68962: LD_INT 4
68964: NEG
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 1
68972: NEG
68973: PUSH
68974: LD_INT 5
68976: NEG
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: LD_INT 2
68984: PUSH
68985: LD_INT 3
68987: NEG
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 2
68995: NEG
68996: PUSH
68997: LD_INT 5
68999: NEG
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 3
69007: PUSH
69008: LD_INT 0
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 3
69017: PUSH
69018: LD_INT 1
69020: NEG
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 4
69028: PUSH
69029: LD_INT 0
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 4
69038: PUSH
69039: LD_INT 1
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 3
69048: PUSH
69049: LD_INT 1
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 2
69058: PUSH
69059: LD_INT 0
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 2
69068: PUSH
69069: LD_INT 1
69071: NEG
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 2
69079: PUSH
69080: LD_INT 2
69082: NEG
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 4
69090: PUSH
69091: LD_INT 2
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 4
69100: PUSH
69101: LD_INT 4
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 4
69110: PUSH
69111: LD_INT 3
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: LD_INT 5
69120: PUSH
69121: LD_INT 4
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 5
69130: PUSH
69131: LD_INT 5
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 4
69140: PUSH
69141: LD_INT 5
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 3
69150: PUSH
69151: LD_INT 4
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 3
69160: PUSH
69161: LD_INT 3
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 5
69170: PUSH
69171: LD_INT 3
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 3
69180: PUSH
69181: LD_INT 5
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: PUSH
69188: LD_INT 0
69190: PUSH
69191: LD_INT 3
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PUSH
69198: LD_INT 0
69200: PUSH
69201: LD_INT 2
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 1
69210: PUSH
69211: LD_INT 3
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 1
69220: PUSH
69221: LD_INT 4
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 0
69230: PUSH
69231: LD_INT 4
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: LD_INT 1
69240: NEG
69241: PUSH
69242: LD_INT 3
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: PUSH
69249: LD_INT 1
69251: NEG
69252: PUSH
69253: LD_INT 2
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 2
69262: PUSH
69263: LD_INT 4
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 2
69272: NEG
69273: PUSH
69274: LD_INT 2
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 4
69283: NEG
69284: PUSH
69285: LD_INT 0
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 4
69294: NEG
69295: PUSH
69296: LD_INT 1
69298: NEG
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 3
69306: NEG
69307: PUSH
69308: LD_INT 0
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 3
69317: NEG
69318: PUSH
69319: LD_INT 1
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PUSH
69326: LD_INT 4
69328: NEG
69329: PUSH
69330: LD_INT 1
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 5
69339: NEG
69340: PUSH
69341: LD_INT 0
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 5
69350: NEG
69351: PUSH
69352: LD_INT 1
69354: NEG
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 5
69362: NEG
69363: PUSH
69364: LD_INT 2
69366: NEG
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 3
69374: NEG
69375: PUSH
69376: LD_INT 2
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: ST_TO_ADDR
// end ; end ;
69430: GO 69433
69432: POP
// case btype of b_depot , b_warehouse :
69433: LD_VAR 0 1
69437: PUSH
69438: LD_INT 0
69440: DOUBLE
69441: EQUAL
69442: IFTRUE 69452
69444: LD_INT 1
69446: DOUBLE
69447: EQUAL
69448: IFTRUE 69452
69450: GO 69653
69452: POP
// case nation of nation_american :
69453: LD_VAR 0 5
69457: PUSH
69458: LD_INT 1
69460: DOUBLE
69461: EQUAL
69462: IFTRUE 69466
69464: GO 69522
69466: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69467: LD_ADDR_VAR 0 9
69471: PUSH
69472: LD_VAR 0 11
69476: PUSH
69477: LD_VAR 0 12
69481: PUSH
69482: LD_VAR 0 13
69486: PUSH
69487: LD_VAR 0 14
69491: PUSH
69492: LD_VAR 0 15
69496: PUSH
69497: LD_VAR 0 16
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: PUSH
69510: LD_VAR 0 4
69514: PUSH
69515: LD_INT 1
69517: PLUS
69518: ARRAY
69519: ST_TO_ADDR
69520: GO 69651
69522: LD_INT 2
69524: DOUBLE
69525: EQUAL
69526: IFTRUE 69530
69528: GO 69586
69530: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69531: LD_ADDR_VAR 0 9
69535: PUSH
69536: LD_VAR 0 17
69540: PUSH
69541: LD_VAR 0 18
69545: PUSH
69546: LD_VAR 0 19
69550: PUSH
69551: LD_VAR 0 20
69555: PUSH
69556: LD_VAR 0 21
69560: PUSH
69561: LD_VAR 0 22
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: PUSH
69574: LD_VAR 0 4
69578: PUSH
69579: LD_INT 1
69581: PLUS
69582: ARRAY
69583: ST_TO_ADDR
69584: GO 69651
69586: LD_INT 3
69588: DOUBLE
69589: EQUAL
69590: IFTRUE 69594
69592: GO 69650
69594: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69595: LD_ADDR_VAR 0 9
69599: PUSH
69600: LD_VAR 0 23
69604: PUSH
69605: LD_VAR 0 24
69609: PUSH
69610: LD_VAR 0 25
69614: PUSH
69615: LD_VAR 0 26
69619: PUSH
69620: LD_VAR 0 27
69624: PUSH
69625: LD_VAR 0 28
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: PUSH
69638: LD_VAR 0 4
69642: PUSH
69643: LD_INT 1
69645: PLUS
69646: ARRAY
69647: ST_TO_ADDR
69648: GO 69651
69650: POP
69651: GO 70206
69653: LD_INT 2
69655: DOUBLE
69656: EQUAL
69657: IFTRUE 69667
69659: LD_INT 3
69661: DOUBLE
69662: EQUAL
69663: IFTRUE 69667
69665: GO 69723
69667: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69668: LD_ADDR_VAR 0 9
69672: PUSH
69673: LD_VAR 0 29
69677: PUSH
69678: LD_VAR 0 30
69682: PUSH
69683: LD_VAR 0 31
69687: PUSH
69688: LD_VAR 0 32
69692: PUSH
69693: LD_VAR 0 33
69697: PUSH
69698: LD_VAR 0 34
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: PUSH
69711: LD_VAR 0 4
69715: PUSH
69716: LD_INT 1
69718: PLUS
69719: ARRAY
69720: ST_TO_ADDR
69721: GO 70206
69723: LD_INT 16
69725: DOUBLE
69726: EQUAL
69727: IFTRUE 69785
69729: LD_INT 17
69731: DOUBLE
69732: EQUAL
69733: IFTRUE 69785
69735: LD_INT 18
69737: DOUBLE
69738: EQUAL
69739: IFTRUE 69785
69741: LD_INT 19
69743: DOUBLE
69744: EQUAL
69745: IFTRUE 69785
69747: LD_INT 22
69749: DOUBLE
69750: EQUAL
69751: IFTRUE 69785
69753: LD_INT 20
69755: DOUBLE
69756: EQUAL
69757: IFTRUE 69785
69759: LD_INT 21
69761: DOUBLE
69762: EQUAL
69763: IFTRUE 69785
69765: LD_INT 23
69767: DOUBLE
69768: EQUAL
69769: IFTRUE 69785
69771: LD_INT 24
69773: DOUBLE
69774: EQUAL
69775: IFTRUE 69785
69777: LD_INT 25
69779: DOUBLE
69780: EQUAL
69781: IFTRUE 69785
69783: GO 69841
69785: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69786: LD_ADDR_VAR 0 9
69790: PUSH
69791: LD_VAR 0 35
69795: PUSH
69796: LD_VAR 0 36
69800: PUSH
69801: LD_VAR 0 37
69805: PUSH
69806: LD_VAR 0 38
69810: PUSH
69811: LD_VAR 0 39
69815: PUSH
69816: LD_VAR 0 40
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: PUSH
69829: LD_VAR 0 4
69833: PUSH
69834: LD_INT 1
69836: PLUS
69837: ARRAY
69838: ST_TO_ADDR
69839: GO 70206
69841: LD_INT 6
69843: DOUBLE
69844: EQUAL
69845: IFTRUE 69897
69847: LD_INT 7
69849: DOUBLE
69850: EQUAL
69851: IFTRUE 69897
69853: LD_INT 8
69855: DOUBLE
69856: EQUAL
69857: IFTRUE 69897
69859: LD_INT 13
69861: DOUBLE
69862: EQUAL
69863: IFTRUE 69897
69865: LD_INT 12
69867: DOUBLE
69868: EQUAL
69869: IFTRUE 69897
69871: LD_INT 15
69873: DOUBLE
69874: EQUAL
69875: IFTRUE 69897
69877: LD_INT 11
69879: DOUBLE
69880: EQUAL
69881: IFTRUE 69897
69883: LD_INT 14
69885: DOUBLE
69886: EQUAL
69887: IFTRUE 69897
69889: LD_INT 10
69891: DOUBLE
69892: EQUAL
69893: IFTRUE 69897
69895: GO 69953
69897: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69898: LD_ADDR_VAR 0 9
69902: PUSH
69903: LD_VAR 0 41
69907: PUSH
69908: LD_VAR 0 42
69912: PUSH
69913: LD_VAR 0 43
69917: PUSH
69918: LD_VAR 0 44
69922: PUSH
69923: LD_VAR 0 45
69927: PUSH
69928: LD_VAR 0 46
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: PUSH
69941: LD_VAR 0 4
69945: PUSH
69946: LD_INT 1
69948: PLUS
69949: ARRAY
69950: ST_TO_ADDR
69951: GO 70206
69953: LD_INT 36
69955: DOUBLE
69956: EQUAL
69957: IFTRUE 69961
69959: GO 70017
69961: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69962: LD_ADDR_VAR 0 9
69966: PUSH
69967: LD_VAR 0 47
69971: PUSH
69972: LD_VAR 0 48
69976: PUSH
69977: LD_VAR 0 49
69981: PUSH
69982: LD_VAR 0 50
69986: PUSH
69987: LD_VAR 0 51
69991: PUSH
69992: LD_VAR 0 52
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: LIST
70001: LIST
70002: LIST
70003: LIST
70004: PUSH
70005: LD_VAR 0 4
70009: PUSH
70010: LD_INT 1
70012: PLUS
70013: ARRAY
70014: ST_TO_ADDR
70015: GO 70206
70017: LD_INT 4
70019: DOUBLE
70020: EQUAL
70021: IFTRUE 70043
70023: LD_INT 5
70025: DOUBLE
70026: EQUAL
70027: IFTRUE 70043
70029: LD_INT 34
70031: DOUBLE
70032: EQUAL
70033: IFTRUE 70043
70035: LD_INT 37
70037: DOUBLE
70038: EQUAL
70039: IFTRUE 70043
70041: GO 70099
70043: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70044: LD_ADDR_VAR 0 9
70048: PUSH
70049: LD_VAR 0 53
70053: PUSH
70054: LD_VAR 0 54
70058: PUSH
70059: LD_VAR 0 55
70063: PUSH
70064: LD_VAR 0 56
70068: PUSH
70069: LD_VAR 0 57
70073: PUSH
70074: LD_VAR 0 58
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: PUSH
70087: LD_VAR 0 4
70091: PUSH
70092: LD_INT 1
70094: PLUS
70095: ARRAY
70096: ST_TO_ADDR
70097: GO 70206
70099: LD_INT 31
70101: DOUBLE
70102: EQUAL
70103: IFTRUE 70149
70105: LD_INT 32
70107: DOUBLE
70108: EQUAL
70109: IFTRUE 70149
70111: LD_INT 33
70113: DOUBLE
70114: EQUAL
70115: IFTRUE 70149
70117: LD_INT 27
70119: DOUBLE
70120: EQUAL
70121: IFTRUE 70149
70123: LD_INT 26
70125: DOUBLE
70126: EQUAL
70127: IFTRUE 70149
70129: LD_INT 28
70131: DOUBLE
70132: EQUAL
70133: IFTRUE 70149
70135: LD_INT 29
70137: DOUBLE
70138: EQUAL
70139: IFTRUE 70149
70141: LD_INT 30
70143: DOUBLE
70144: EQUAL
70145: IFTRUE 70149
70147: GO 70205
70149: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70150: LD_ADDR_VAR 0 9
70154: PUSH
70155: LD_VAR 0 59
70159: PUSH
70160: LD_VAR 0 60
70164: PUSH
70165: LD_VAR 0 61
70169: PUSH
70170: LD_VAR 0 62
70174: PUSH
70175: LD_VAR 0 63
70179: PUSH
70180: LD_VAR 0 64
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: PUSH
70193: LD_VAR 0 4
70197: PUSH
70198: LD_INT 1
70200: PLUS
70201: ARRAY
70202: ST_TO_ADDR
70203: GO 70206
70205: POP
// temp_list2 = [ ] ;
70206: LD_ADDR_VAR 0 10
70210: PUSH
70211: EMPTY
70212: ST_TO_ADDR
// for i in temp_list do
70213: LD_ADDR_VAR 0 8
70217: PUSH
70218: LD_VAR 0 9
70222: PUSH
70223: FOR_IN
70224: IFFALSE 70276
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70226: LD_ADDR_VAR 0 10
70230: PUSH
70231: LD_VAR 0 10
70235: PUSH
70236: LD_VAR 0 8
70240: PUSH
70241: LD_INT 1
70243: ARRAY
70244: PUSH
70245: LD_VAR 0 2
70249: PLUS
70250: PUSH
70251: LD_VAR 0 8
70255: PUSH
70256: LD_INT 2
70258: ARRAY
70259: PUSH
70260: LD_VAR 0 3
70264: PLUS
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: EMPTY
70271: LIST
70272: ADD
70273: ST_TO_ADDR
70274: GO 70223
70276: POP
70277: POP
// result = temp_list2 ;
70278: LD_ADDR_VAR 0 7
70282: PUSH
70283: LD_VAR 0 10
70287: ST_TO_ADDR
// end ;
70288: LD_VAR 0 7
70292: RET
// export function EnemyInRange ( unit , dist ) ; begin
70293: LD_INT 0
70295: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70296: LD_ADDR_VAR 0 3
70300: PUSH
70301: LD_VAR 0 1
70305: PPUSH
70306: CALL_OW 255
70310: PPUSH
70311: LD_VAR 0 1
70315: PPUSH
70316: CALL_OW 250
70320: PPUSH
70321: LD_VAR 0 1
70325: PPUSH
70326: CALL_OW 251
70330: PPUSH
70331: LD_VAR 0 2
70335: PPUSH
70336: CALL 43689 0 4
70340: PUSH
70341: LD_INT 4
70343: ARRAY
70344: ST_TO_ADDR
// end ;
70345: LD_VAR 0 3
70349: RET
// export function PlayerSeeMe ( unit ) ; begin
70350: LD_INT 0
70352: PPUSH
// result := See ( your_side , unit ) ;
70353: LD_ADDR_VAR 0 2
70357: PUSH
70358: LD_OWVAR 2
70362: PPUSH
70363: LD_VAR 0 1
70367: PPUSH
70368: CALL_OW 292
70372: ST_TO_ADDR
// end ;
70373: LD_VAR 0 2
70377: RET
// export function ReverseDir ( unit ) ; begin
70378: LD_INT 0
70380: PPUSH
// if not unit then
70381: LD_VAR 0 1
70385: NOT
70386: IFFALSE 70390
// exit ;
70388: GO 70413
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70390: LD_ADDR_VAR 0 2
70394: PUSH
70395: LD_VAR 0 1
70399: PPUSH
70400: CALL_OW 254
70404: PUSH
70405: LD_INT 3
70407: PLUS
70408: PUSH
70409: LD_INT 6
70411: MOD
70412: ST_TO_ADDR
// end ;
70413: LD_VAR 0 2
70417: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70418: LD_INT 0
70420: PPUSH
70421: PPUSH
70422: PPUSH
70423: PPUSH
70424: PPUSH
// if not hexes then
70425: LD_VAR 0 2
70429: NOT
70430: IFFALSE 70434
// exit ;
70432: GO 70582
// dist := 9999 ;
70434: LD_ADDR_VAR 0 5
70438: PUSH
70439: LD_INT 9999
70441: ST_TO_ADDR
// for i = 1 to hexes do
70442: LD_ADDR_VAR 0 4
70446: PUSH
70447: DOUBLE
70448: LD_INT 1
70450: DEC
70451: ST_TO_ADDR
70452: LD_VAR 0 2
70456: PUSH
70457: FOR_TO
70458: IFFALSE 70570
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70460: LD_VAR 0 1
70464: PPUSH
70465: LD_VAR 0 2
70469: PUSH
70470: LD_VAR 0 4
70474: ARRAY
70475: PUSH
70476: LD_INT 1
70478: ARRAY
70479: PPUSH
70480: LD_VAR 0 2
70484: PUSH
70485: LD_VAR 0 4
70489: ARRAY
70490: PUSH
70491: LD_INT 2
70493: ARRAY
70494: PPUSH
70495: CALL_OW 297
70499: PUSH
70500: LD_VAR 0 5
70504: LESS
70505: IFFALSE 70568
// begin hex := hexes [ i ] ;
70507: LD_ADDR_VAR 0 7
70511: PUSH
70512: LD_VAR 0 2
70516: PUSH
70517: LD_VAR 0 4
70521: ARRAY
70522: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70523: LD_ADDR_VAR 0 5
70527: PUSH
70528: LD_VAR 0 1
70532: PPUSH
70533: LD_VAR 0 2
70537: PUSH
70538: LD_VAR 0 4
70542: ARRAY
70543: PUSH
70544: LD_INT 1
70546: ARRAY
70547: PPUSH
70548: LD_VAR 0 2
70552: PUSH
70553: LD_VAR 0 4
70557: ARRAY
70558: PUSH
70559: LD_INT 2
70561: ARRAY
70562: PPUSH
70563: CALL_OW 297
70567: ST_TO_ADDR
// end ; end ;
70568: GO 70457
70570: POP
70571: POP
// result := hex ;
70572: LD_ADDR_VAR 0 3
70576: PUSH
70577: LD_VAR 0 7
70581: ST_TO_ADDR
// end ;
70582: LD_VAR 0 3
70586: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70587: LD_INT 0
70589: PPUSH
70590: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70591: LD_VAR 0 1
70595: NOT
70596: PUSH
70597: LD_VAR 0 1
70601: PUSH
70602: LD_INT 21
70604: PUSH
70605: LD_INT 2
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 23
70614: PUSH
70615: LD_INT 2
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PPUSH
70626: CALL_OW 69
70630: IN
70631: NOT
70632: OR
70633: IFFALSE 70637
// exit ;
70635: GO 70684
// for i = 1 to 3 do
70637: LD_ADDR_VAR 0 3
70641: PUSH
70642: DOUBLE
70643: LD_INT 1
70645: DEC
70646: ST_TO_ADDR
70647: LD_INT 3
70649: PUSH
70650: FOR_TO
70651: IFFALSE 70682
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70653: LD_VAR 0 1
70657: PPUSH
70658: CALL_OW 250
70662: PPUSH
70663: LD_VAR 0 1
70667: PPUSH
70668: CALL_OW 251
70672: PPUSH
70673: LD_INT 1
70675: PPUSH
70676: CALL_OW 453
70680: GO 70650
70682: POP
70683: POP
// end ;
70684: LD_VAR 0 2
70688: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70689: LD_INT 0
70691: PPUSH
70692: PPUSH
70693: PPUSH
70694: PPUSH
70695: PPUSH
70696: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70697: LD_VAR 0 1
70701: NOT
70702: PUSH
70703: LD_VAR 0 2
70707: NOT
70708: OR
70709: PUSH
70710: LD_VAR 0 1
70714: PPUSH
70715: CALL_OW 314
70719: OR
70720: IFFALSE 70724
// exit ;
70722: GO 71165
// x := GetX ( enemy_unit ) ;
70724: LD_ADDR_VAR 0 7
70728: PUSH
70729: LD_VAR 0 2
70733: PPUSH
70734: CALL_OW 250
70738: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70739: LD_ADDR_VAR 0 8
70743: PUSH
70744: LD_VAR 0 2
70748: PPUSH
70749: CALL_OW 251
70753: ST_TO_ADDR
// if not x or not y then
70754: LD_VAR 0 7
70758: NOT
70759: PUSH
70760: LD_VAR 0 8
70764: NOT
70765: OR
70766: IFFALSE 70770
// exit ;
70768: GO 71165
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70770: LD_ADDR_VAR 0 6
70774: PUSH
70775: LD_VAR 0 7
70779: PPUSH
70780: LD_INT 0
70782: PPUSH
70783: LD_INT 4
70785: PPUSH
70786: CALL_OW 272
70790: PUSH
70791: LD_VAR 0 8
70795: PPUSH
70796: LD_INT 0
70798: PPUSH
70799: LD_INT 4
70801: PPUSH
70802: CALL_OW 273
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_VAR 0 7
70815: PPUSH
70816: LD_INT 1
70818: PPUSH
70819: LD_INT 4
70821: PPUSH
70822: CALL_OW 272
70826: PUSH
70827: LD_VAR 0 8
70831: PPUSH
70832: LD_INT 1
70834: PPUSH
70835: LD_INT 4
70837: PPUSH
70838: CALL_OW 273
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: PUSH
70847: LD_VAR 0 7
70851: PPUSH
70852: LD_INT 2
70854: PPUSH
70855: LD_INT 4
70857: PPUSH
70858: CALL_OW 272
70862: PUSH
70863: LD_VAR 0 8
70867: PPUSH
70868: LD_INT 2
70870: PPUSH
70871: LD_INT 4
70873: PPUSH
70874: CALL_OW 273
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: LD_VAR 0 7
70887: PPUSH
70888: LD_INT 3
70890: PPUSH
70891: LD_INT 4
70893: PPUSH
70894: CALL_OW 272
70898: PUSH
70899: LD_VAR 0 8
70903: PPUSH
70904: LD_INT 3
70906: PPUSH
70907: LD_INT 4
70909: PPUSH
70910: CALL_OW 273
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_VAR 0 7
70923: PPUSH
70924: LD_INT 4
70926: PPUSH
70927: LD_INT 4
70929: PPUSH
70930: CALL_OW 272
70934: PUSH
70935: LD_VAR 0 8
70939: PPUSH
70940: LD_INT 4
70942: PPUSH
70943: LD_INT 4
70945: PPUSH
70946: CALL_OW 273
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: PUSH
70955: LD_VAR 0 7
70959: PPUSH
70960: LD_INT 5
70962: PPUSH
70963: LD_INT 4
70965: PPUSH
70966: CALL_OW 272
70970: PUSH
70971: LD_VAR 0 8
70975: PPUSH
70976: LD_INT 5
70978: PPUSH
70979: LD_INT 4
70981: PPUSH
70982: CALL_OW 273
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: ST_TO_ADDR
// for i = tmp downto 1 do
70999: LD_ADDR_VAR 0 4
71003: PUSH
71004: DOUBLE
71005: LD_VAR 0 6
71009: INC
71010: ST_TO_ADDR
71011: LD_INT 1
71013: PUSH
71014: FOR_DOWNTO
71015: IFFALSE 71116
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71017: LD_VAR 0 6
71021: PUSH
71022: LD_VAR 0 4
71026: ARRAY
71027: PUSH
71028: LD_INT 1
71030: ARRAY
71031: PPUSH
71032: LD_VAR 0 6
71036: PUSH
71037: LD_VAR 0 4
71041: ARRAY
71042: PUSH
71043: LD_INT 2
71045: ARRAY
71046: PPUSH
71047: CALL_OW 488
71051: NOT
71052: PUSH
71053: LD_VAR 0 6
71057: PUSH
71058: LD_VAR 0 4
71062: ARRAY
71063: PUSH
71064: LD_INT 1
71066: ARRAY
71067: PPUSH
71068: LD_VAR 0 6
71072: PUSH
71073: LD_VAR 0 4
71077: ARRAY
71078: PUSH
71079: LD_INT 2
71081: ARRAY
71082: PPUSH
71083: CALL_OW 428
71087: PUSH
71088: LD_INT 0
71090: NONEQUAL
71091: OR
71092: IFFALSE 71114
// tmp := Delete ( tmp , i ) ;
71094: LD_ADDR_VAR 0 6
71098: PUSH
71099: LD_VAR 0 6
71103: PPUSH
71104: LD_VAR 0 4
71108: PPUSH
71109: CALL_OW 3
71113: ST_TO_ADDR
71114: GO 71014
71116: POP
71117: POP
// j := GetClosestHex ( unit , tmp ) ;
71118: LD_ADDR_VAR 0 5
71122: PUSH
71123: LD_VAR 0 1
71127: PPUSH
71128: LD_VAR 0 6
71132: PPUSH
71133: CALL 70418 0 2
71137: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71138: LD_VAR 0 1
71142: PPUSH
71143: LD_VAR 0 5
71147: PUSH
71148: LD_INT 1
71150: ARRAY
71151: PPUSH
71152: LD_VAR 0 5
71156: PUSH
71157: LD_INT 2
71159: ARRAY
71160: PPUSH
71161: CALL_OW 111
// end ;
71165: LD_VAR 0 3
71169: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71170: LD_INT 0
71172: PPUSH
71173: PPUSH
71174: PPUSH
// uc_side = 0 ;
71175: LD_ADDR_OWVAR 20
71179: PUSH
71180: LD_INT 0
71182: ST_TO_ADDR
// uc_nation = 0 ;
71183: LD_ADDR_OWVAR 21
71187: PUSH
71188: LD_INT 0
71190: ST_TO_ADDR
// InitHc_All ( ) ;
71191: CALL_OW 584
// InitVc ;
71195: CALL_OW 20
// if mastodonts then
71199: LD_VAR 0 6
71203: IFFALSE 71270
// for i = 1 to mastodonts do
71205: LD_ADDR_VAR 0 11
71209: PUSH
71210: DOUBLE
71211: LD_INT 1
71213: DEC
71214: ST_TO_ADDR
71215: LD_VAR 0 6
71219: PUSH
71220: FOR_TO
71221: IFFALSE 71268
// begin vc_chassis := 31 ;
71223: LD_ADDR_OWVAR 37
71227: PUSH
71228: LD_INT 31
71230: ST_TO_ADDR
// vc_control := control_rider ;
71231: LD_ADDR_OWVAR 38
71235: PUSH
71236: LD_INT 4
71238: ST_TO_ADDR
// animal := CreateVehicle ;
71239: LD_ADDR_VAR 0 12
71243: PUSH
71244: CALL_OW 45
71248: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71249: LD_VAR 0 12
71253: PPUSH
71254: LD_VAR 0 8
71258: PPUSH
71259: LD_INT 0
71261: PPUSH
71262: CALL 73405 0 3
// end ;
71266: GO 71220
71268: POP
71269: POP
// if horses then
71270: LD_VAR 0 5
71274: IFFALSE 71341
// for i = 1 to horses do
71276: LD_ADDR_VAR 0 11
71280: PUSH
71281: DOUBLE
71282: LD_INT 1
71284: DEC
71285: ST_TO_ADDR
71286: LD_VAR 0 5
71290: PUSH
71291: FOR_TO
71292: IFFALSE 71339
// begin hc_class := 21 ;
71294: LD_ADDR_OWVAR 28
71298: PUSH
71299: LD_INT 21
71301: ST_TO_ADDR
// hc_gallery :=  ;
71302: LD_ADDR_OWVAR 33
71306: PUSH
71307: LD_STRING 
71309: ST_TO_ADDR
// animal := CreateHuman ;
71310: LD_ADDR_VAR 0 12
71314: PUSH
71315: CALL_OW 44
71319: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71320: LD_VAR 0 12
71324: PPUSH
71325: LD_VAR 0 8
71329: PPUSH
71330: LD_INT 0
71332: PPUSH
71333: CALL 73405 0 3
// end ;
71337: GO 71291
71339: POP
71340: POP
// if birds then
71341: LD_VAR 0 1
71345: IFFALSE 71412
// for i = 1 to birds do
71347: LD_ADDR_VAR 0 11
71351: PUSH
71352: DOUBLE
71353: LD_INT 1
71355: DEC
71356: ST_TO_ADDR
71357: LD_VAR 0 1
71361: PUSH
71362: FOR_TO
71363: IFFALSE 71410
// begin hc_class = 18 ;
71365: LD_ADDR_OWVAR 28
71369: PUSH
71370: LD_INT 18
71372: ST_TO_ADDR
// hc_gallery =  ;
71373: LD_ADDR_OWVAR 33
71377: PUSH
71378: LD_STRING 
71380: ST_TO_ADDR
// animal := CreateHuman ;
71381: LD_ADDR_VAR 0 12
71385: PUSH
71386: CALL_OW 44
71390: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71391: LD_VAR 0 12
71395: PPUSH
71396: LD_VAR 0 8
71400: PPUSH
71401: LD_INT 0
71403: PPUSH
71404: CALL 73405 0 3
// end ;
71408: GO 71362
71410: POP
71411: POP
// if tigers then
71412: LD_VAR 0 2
71416: IFFALSE 71500
// for i = 1 to tigers do
71418: LD_ADDR_VAR 0 11
71422: PUSH
71423: DOUBLE
71424: LD_INT 1
71426: DEC
71427: ST_TO_ADDR
71428: LD_VAR 0 2
71432: PUSH
71433: FOR_TO
71434: IFFALSE 71498
// begin hc_class = class_tiger ;
71436: LD_ADDR_OWVAR 28
71440: PUSH
71441: LD_INT 14
71443: ST_TO_ADDR
// hc_gallery =  ;
71444: LD_ADDR_OWVAR 33
71448: PUSH
71449: LD_STRING 
71451: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71452: LD_ADDR_OWVAR 35
71456: PUSH
71457: LD_INT 7
71459: NEG
71460: PPUSH
71461: LD_INT 7
71463: PPUSH
71464: CALL_OW 12
71468: ST_TO_ADDR
// animal := CreateHuman ;
71469: LD_ADDR_VAR 0 12
71473: PUSH
71474: CALL_OW 44
71478: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71479: LD_VAR 0 12
71483: PPUSH
71484: LD_VAR 0 8
71488: PPUSH
71489: LD_INT 0
71491: PPUSH
71492: CALL 73405 0 3
// end ;
71496: GO 71433
71498: POP
71499: POP
// if apemans then
71500: LD_VAR 0 3
71504: IFFALSE 71627
// for i = 1 to apemans do
71506: LD_ADDR_VAR 0 11
71510: PUSH
71511: DOUBLE
71512: LD_INT 1
71514: DEC
71515: ST_TO_ADDR
71516: LD_VAR 0 3
71520: PUSH
71521: FOR_TO
71522: IFFALSE 71625
// begin hc_class = class_apeman ;
71524: LD_ADDR_OWVAR 28
71528: PUSH
71529: LD_INT 12
71531: ST_TO_ADDR
// hc_gallery =  ;
71532: LD_ADDR_OWVAR 33
71536: PUSH
71537: LD_STRING 
71539: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71540: LD_ADDR_OWVAR 35
71544: PUSH
71545: LD_INT 2
71547: NEG
71548: PPUSH
71549: LD_INT 2
71551: PPUSH
71552: CALL_OW 12
71556: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71557: LD_ADDR_OWVAR 31
71561: PUSH
71562: LD_INT 1
71564: PPUSH
71565: LD_INT 3
71567: PPUSH
71568: CALL_OW 12
71572: PUSH
71573: LD_INT 1
71575: PPUSH
71576: LD_INT 3
71578: PPUSH
71579: CALL_OW 12
71583: PUSH
71584: LD_INT 0
71586: PUSH
71587: LD_INT 0
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: ST_TO_ADDR
// animal := CreateHuman ;
71596: LD_ADDR_VAR 0 12
71600: PUSH
71601: CALL_OW 44
71605: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71606: LD_VAR 0 12
71610: PPUSH
71611: LD_VAR 0 8
71615: PPUSH
71616: LD_INT 0
71618: PPUSH
71619: CALL 73405 0 3
// end ;
71623: GO 71521
71625: POP
71626: POP
// if enchidnas then
71627: LD_VAR 0 4
71631: IFFALSE 71698
// for i = 1 to enchidnas do
71633: LD_ADDR_VAR 0 11
71637: PUSH
71638: DOUBLE
71639: LD_INT 1
71641: DEC
71642: ST_TO_ADDR
71643: LD_VAR 0 4
71647: PUSH
71648: FOR_TO
71649: IFFALSE 71696
// begin hc_class = 13 ;
71651: LD_ADDR_OWVAR 28
71655: PUSH
71656: LD_INT 13
71658: ST_TO_ADDR
// hc_gallery =  ;
71659: LD_ADDR_OWVAR 33
71663: PUSH
71664: LD_STRING 
71666: ST_TO_ADDR
// animal := CreateHuman ;
71667: LD_ADDR_VAR 0 12
71671: PUSH
71672: CALL_OW 44
71676: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71677: LD_VAR 0 12
71681: PPUSH
71682: LD_VAR 0 8
71686: PPUSH
71687: LD_INT 0
71689: PPUSH
71690: CALL 73405 0 3
// end ;
71694: GO 71648
71696: POP
71697: POP
// if fishes then
71698: LD_VAR 0 7
71702: IFFALSE 71769
// for i = 1 to fishes do
71704: LD_ADDR_VAR 0 11
71708: PUSH
71709: DOUBLE
71710: LD_INT 1
71712: DEC
71713: ST_TO_ADDR
71714: LD_VAR 0 7
71718: PUSH
71719: FOR_TO
71720: IFFALSE 71767
// begin hc_class = 20 ;
71722: LD_ADDR_OWVAR 28
71726: PUSH
71727: LD_INT 20
71729: ST_TO_ADDR
// hc_gallery =  ;
71730: LD_ADDR_OWVAR 33
71734: PUSH
71735: LD_STRING 
71737: ST_TO_ADDR
// animal := CreateHuman ;
71738: LD_ADDR_VAR 0 12
71742: PUSH
71743: CALL_OW 44
71747: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71748: LD_VAR 0 12
71752: PPUSH
71753: LD_VAR 0 9
71757: PPUSH
71758: LD_INT 0
71760: PPUSH
71761: CALL 73405 0 3
// end ;
71765: GO 71719
71767: POP
71768: POP
// end ;
71769: LD_VAR 0 10
71773: RET
// export function WantHeal ( sci , unit ) ; begin
71774: LD_INT 0
71776: PPUSH
// if GetTaskList ( sci ) > 0 then
71777: LD_VAR 0 1
71781: PPUSH
71782: CALL_OW 437
71786: PUSH
71787: LD_INT 0
71789: GREATER
71790: IFFALSE 71860
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71792: LD_VAR 0 1
71796: PPUSH
71797: CALL_OW 437
71801: PUSH
71802: LD_INT 1
71804: ARRAY
71805: PUSH
71806: LD_INT 1
71808: ARRAY
71809: PUSH
71810: LD_STRING l
71812: EQUAL
71813: PUSH
71814: LD_VAR 0 1
71818: PPUSH
71819: CALL_OW 437
71823: PUSH
71824: LD_INT 1
71826: ARRAY
71827: PUSH
71828: LD_INT 4
71830: ARRAY
71831: PUSH
71832: LD_VAR 0 2
71836: EQUAL
71837: AND
71838: IFFALSE 71850
// result := true else
71840: LD_ADDR_VAR 0 3
71844: PUSH
71845: LD_INT 1
71847: ST_TO_ADDR
71848: GO 71858
// result := false ;
71850: LD_ADDR_VAR 0 3
71854: PUSH
71855: LD_INT 0
71857: ST_TO_ADDR
// end else
71858: GO 71868
// result := false ;
71860: LD_ADDR_VAR 0 3
71864: PUSH
71865: LD_INT 0
71867: ST_TO_ADDR
// end ;
71868: LD_VAR 0 3
71872: RET
// export function HealTarget ( sci ) ; begin
71873: LD_INT 0
71875: PPUSH
// if not sci then
71876: LD_VAR 0 1
71880: NOT
71881: IFFALSE 71885
// exit ;
71883: GO 71950
// result := 0 ;
71885: LD_ADDR_VAR 0 2
71889: PUSH
71890: LD_INT 0
71892: ST_TO_ADDR
// if GetTaskList ( sci ) then
71893: LD_VAR 0 1
71897: PPUSH
71898: CALL_OW 437
71902: IFFALSE 71950
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71904: LD_VAR 0 1
71908: PPUSH
71909: CALL_OW 437
71913: PUSH
71914: LD_INT 1
71916: ARRAY
71917: PUSH
71918: LD_INT 1
71920: ARRAY
71921: PUSH
71922: LD_STRING l
71924: EQUAL
71925: IFFALSE 71950
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71927: LD_ADDR_VAR 0 2
71931: PUSH
71932: LD_VAR 0 1
71936: PPUSH
71937: CALL_OW 437
71941: PUSH
71942: LD_INT 1
71944: ARRAY
71945: PUSH
71946: LD_INT 4
71948: ARRAY
71949: ST_TO_ADDR
// end ;
71950: LD_VAR 0 2
71954: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71955: LD_INT 0
71957: PPUSH
71958: PPUSH
71959: PPUSH
71960: PPUSH
// if not base_units then
71961: LD_VAR 0 1
71965: NOT
71966: IFFALSE 71970
// exit ;
71968: GO 72057
// result := false ;
71970: LD_ADDR_VAR 0 2
71974: PUSH
71975: LD_INT 0
71977: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71978: LD_ADDR_VAR 0 5
71982: PUSH
71983: LD_VAR 0 1
71987: PPUSH
71988: LD_INT 21
71990: PUSH
71991: LD_INT 3
71993: PUSH
71994: EMPTY
71995: LIST
71996: LIST
71997: PPUSH
71998: CALL_OW 72
72002: ST_TO_ADDR
// if not tmp then
72003: LD_VAR 0 5
72007: NOT
72008: IFFALSE 72012
// exit ;
72010: GO 72057
// for i in tmp do
72012: LD_ADDR_VAR 0 3
72016: PUSH
72017: LD_VAR 0 5
72021: PUSH
72022: FOR_IN
72023: IFFALSE 72055
// begin result := EnemyInRange ( i , 22 ) ;
72025: LD_ADDR_VAR 0 2
72029: PUSH
72030: LD_VAR 0 3
72034: PPUSH
72035: LD_INT 22
72037: PPUSH
72038: CALL 70293 0 2
72042: ST_TO_ADDR
// if result then
72043: LD_VAR 0 2
72047: IFFALSE 72053
// exit ;
72049: POP
72050: POP
72051: GO 72057
// end ;
72053: GO 72022
72055: POP
72056: POP
// end ;
72057: LD_VAR 0 2
72061: RET
// export function FilterByTag ( units , tag ) ; begin
72062: LD_INT 0
72064: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72065: LD_ADDR_VAR 0 3
72069: PUSH
72070: LD_VAR 0 1
72074: PPUSH
72075: LD_INT 120
72077: PUSH
72078: LD_VAR 0 2
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: PPUSH
72087: CALL_OW 72
72091: ST_TO_ADDR
// end ;
72092: LD_VAR 0 3
72096: RET
// export function IsDriver ( un ) ; begin
72097: LD_INT 0
72099: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72100: LD_ADDR_VAR 0 2
72104: PUSH
72105: LD_VAR 0 1
72109: PUSH
72110: LD_INT 55
72112: PUSH
72113: EMPTY
72114: LIST
72115: PPUSH
72116: CALL_OW 69
72120: IN
72121: ST_TO_ADDR
// end ;
72122: LD_VAR 0 2
72126: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72127: LD_INT 0
72129: PPUSH
72130: PPUSH
// list := [ ] ;
72131: LD_ADDR_VAR 0 5
72135: PUSH
72136: EMPTY
72137: ST_TO_ADDR
// case d of 0 :
72138: LD_VAR 0 3
72142: PUSH
72143: LD_INT 0
72145: DOUBLE
72146: EQUAL
72147: IFTRUE 72151
72149: GO 72284
72151: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72152: LD_ADDR_VAR 0 5
72156: PUSH
72157: LD_VAR 0 1
72161: PUSH
72162: LD_INT 4
72164: MINUS
72165: PUSH
72166: LD_VAR 0 2
72170: PUSH
72171: LD_INT 4
72173: MINUS
72174: PUSH
72175: LD_INT 2
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: LIST
72182: PUSH
72183: LD_VAR 0 1
72187: PUSH
72188: LD_INT 3
72190: MINUS
72191: PUSH
72192: LD_VAR 0 2
72196: PUSH
72197: LD_INT 1
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: LIST
72204: PUSH
72205: LD_VAR 0 1
72209: PUSH
72210: LD_INT 4
72212: PLUS
72213: PUSH
72214: LD_VAR 0 2
72218: PUSH
72219: LD_INT 4
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: LIST
72226: PUSH
72227: LD_VAR 0 1
72231: PUSH
72232: LD_INT 3
72234: PLUS
72235: PUSH
72236: LD_VAR 0 2
72240: PUSH
72241: LD_INT 3
72243: PLUS
72244: PUSH
72245: LD_INT 5
72247: PUSH
72248: EMPTY
72249: LIST
72250: LIST
72251: LIST
72252: PUSH
72253: LD_VAR 0 1
72257: PUSH
72258: LD_VAR 0 2
72262: PUSH
72263: LD_INT 4
72265: PLUS
72266: PUSH
72267: LD_INT 0
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: LIST
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: ST_TO_ADDR
// end ; 1 :
72282: GO 72982
72284: LD_INT 1
72286: DOUBLE
72287: EQUAL
72288: IFTRUE 72292
72290: GO 72425
72292: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72293: LD_ADDR_VAR 0 5
72297: PUSH
72298: LD_VAR 0 1
72302: PUSH
72303: LD_VAR 0 2
72307: PUSH
72308: LD_INT 4
72310: MINUS
72311: PUSH
72312: LD_INT 3
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: LIST
72319: PUSH
72320: LD_VAR 0 1
72324: PUSH
72325: LD_INT 3
72327: MINUS
72328: PUSH
72329: LD_VAR 0 2
72333: PUSH
72334: LD_INT 3
72336: MINUS
72337: PUSH
72338: LD_INT 2
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: LIST
72345: PUSH
72346: LD_VAR 0 1
72350: PUSH
72351: LD_INT 4
72353: MINUS
72354: PUSH
72355: LD_VAR 0 2
72359: PUSH
72360: LD_INT 1
72362: PUSH
72363: EMPTY
72364: LIST
72365: LIST
72366: LIST
72367: PUSH
72368: LD_VAR 0 1
72372: PUSH
72373: LD_VAR 0 2
72377: PUSH
72378: LD_INT 3
72380: PLUS
72381: PUSH
72382: LD_INT 0
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: LIST
72389: PUSH
72390: LD_VAR 0 1
72394: PUSH
72395: LD_INT 4
72397: PLUS
72398: PUSH
72399: LD_VAR 0 2
72403: PUSH
72404: LD_INT 4
72406: PLUS
72407: PUSH
72408: LD_INT 5
72410: PUSH
72411: EMPTY
72412: LIST
72413: LIST
72414: LIST
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: LIST
72420: LIST
72421: LIST
72422: ST_TO_ADDR
// end ; 2 :
72423: GO 72982
72425: LD_INT 2
72427: DOUBLE
72428: EQUAL
72429: IFTRUE 72433
72431: GO 72562
72433: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72434: LD_ADDR_VAR 0 5
72438: PUSH
72439: LD_VAR 0 1
72443: PUSH
72444: LD_VAR 0 2
72448: PUSH
72449: LD_INT 3
72451: MINUS
72452: PUSH
72453: LD_INT 3
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: LIST
72460: PUSH
72461: LD_VAR 0 1
72465: PUSH
72466: LD_INT 4
72468: PLUS
72469: PUSH
72470: LD_VAR 0 2
72474: PUSH
72475: LD_INT 4
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: LIST
72482: PUSH
72483: LD_VAR 0 1
72487: PUSH
72488: LD_VAR 0 2
72492: PUSH
72493: LD_INT 4
72495: PLUS
72496: PUSH
72497: LD_INT 0
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: LIST
72504: PUSH
72505: LD_VAR 0 1
72509: PUSH
72510: LD_INT 3
72512: MINUS
72513: PUSH
72514: LD_VAR 0 2
72518: PUSH
72519: LD_INT 1
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: LIST
72526: PUSH
72527: LD_VAR 0 1
72531: PUSH
72532: LD_INT 4
72534: MINUS
72535: PUSH
72536: LD_VAR 0 2
72540: PUSH
72541: LD_INT 4
72543: MINUS
72544: PUSH
72545: LD_INT 2
72547: PUSH
72548: EMPTY
72549: LIST
72550: LIST
72551: LIST
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: LIST
72557: LIST
72558: LIST
72559: ST_TO_ADDR
// end ; 3 :
72560: GO 72982
72562: LD_INT 3
72564: DOUBLE
72565: EQUAL
72566: IFTRUE 72570
72568: GO 72703
72570: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72571: LD_ADDR_VAR 0 5
72575: PUSH
72576: LD_VAR 0 1
72580: PUSH
72581: LD_INT 3
72583: PLUS
72584: PUSH
72585: LD_VAR 0 2
72589: PUSH
72590: LD_INT 4
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: LIST
72597: PUSH
72598: LD_VAR 0 1
72602: PUSH
72603: LD_INT 4
72605: PLUS
72606: PUSH
72607: LD_VAR 0 2
72611: PUSH
72612: LD_INT 4
72614: PLUS
72615: PUSH
72616: LD_INT 5
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: LIST
72623: PUSH
72624: LD_VAR 0 1
72628: PUSH
72629: LD_INT 4
72631: MINUS
72632: PUSH
72633: LD_VAR 0 2
72637: PUSH
72638: LD_INT 1
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: LIST
72645: PUSH
72646: LD_VAR 0 1
72650: PUSH
72651: LD_VAR 0 2
72655: PUSH
72656: LD_INT 4
72658: MINUS
72659: PUSH
72660: LD_INT 3
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: LIST
72667: PUSH
72668: LD_VAR 0 1
72672: PUSH
72673: LD_INT 3
72675: MINUS
72676: PUSH
72677: LD_VAR 0 2
72681: PUSH
72682: LD_INT 3
72684: MINUS
72685: PUSH
72686: LD_INT 2
72688: PUSH
72689: EMPTY
72690: LIST
72691: LIST
72692: LIST
72693: PUSH
72694: EMPTY
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: ST_TO_ADDR
// end ; 4 :
72701: GO 72982
72703: LD_INT 4
72705: DOUBLE
72706: EQUAL
72707: IFTRUE 72711
72709: GO 72844
72711: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72712: LD_ADDR_VAR 0 5
72716: PUSH
72717: LD_VAR 0 1
72721: PUSH
72722: LD_VAR 0 2
72726: PUSH
72727: LD_INT 4
72729: PLUS
72730: PUSH
72731: LD_INT 0
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: LIST
72738: PUSH
72739: LD_VAR 0 1
72743: PUSH
72744: LD_INT 3
72746: PLUS
72747: PUSH
72748: LD_VAR 0 2
72752: PUSH
72753: LD_INT 3
72755: PLUS
72756: PUSH
72757: LD_INT 5
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: LIST
72764: PUSH
72765: LD_VAR 0 1
72769: PUSH
72770: LD_INT 4
72772: PLUS
72773: PUSH
72774: LD_VAR 0 2
72778: PUSH
72779: LD_INT 4
72781: PUSH
72782: EMPTY
72783: LIST
72784: LIST
72785: LIST
72786: PUSH
72787: LD_VAR 0 1
72791: PUSH
72792: LD_VAR 0 2
72796: PUSH
72797: LD_INT 3
72799: MINUS
72800: PUSH
72801: LD_INT 3
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: LIST
72808: PUSH
72809: LD_VAR 0 1
72813: PUSH
72814: LD_INT 4
72816: MINUS
72817: PUSH
72818: LD_VAR 0 2
72822: PUSH
72823: LD_INT 4
72825: MINUS
72826: PUSH
72827: LD_INT 2
72829: PUSH
72830: EMPTY
72831: LIST
72832: LIST
72833: LIST
72834: PUSH
72835: EMPTY
72836: LIST
72837: LIST
72838: LIST
72839: LIST
72840: LIST
72841: ST_TO_ADDR
// end ; 5 :
72842: GO 72982
72844: LD_INT 5
72846: DOUBLE
72847: EQUAL
72848: IFTRUE 72852
72850: GO 72981
72852: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72853: LD_ADDR_VAR 0 5
72857: PUSH
72858: LD_VAR 0 1
72862: PUSH
72863: LD_INT 4
72865: MINUS
72866: PUSH
72867: LD_VAR 0 2
72871: PUSH
72872: LD_INT 1
72874: PUSH
72875: EMPTY
72876: LIST
72877: LIST
72878: LIST
72879: PUSH
72880: LD_VAR 0 1
72884: PUSH
72885: LD_VAR 0 2
72889: PUSH
72890: LD_INT 4
72892: MINUS
72893: PUSH
72894: LD_INT 3
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: LIST
72901: PUSH
72902: LD_VAR 0 1
72906: PUSH
72907: LD_INT 4
72909: PLUS
72910: PUSH
72911: LD_VAR 0 2
72915: PUSH
72916: LD_INT 4
72918: PLUS
72919: PUSH
72920: LD_INT 5
72922: PUSH
72923: EMPTY
72924: LIST
72925: LIST
72926: LIST
72927: PUSH
72928: LD_VAR 0 1
72932: PUSH
72933: LD_INT 3
72935: PLUS
72936: PUSH
72937: LD_VAR 0 2
72941: PUSH
72942: LD_INT 4
72944: PUSH
72945: EMPTY
72946: LIST
72947: LIST
72948: LIST
72949: PUSH
72950: LD_VAR 0 1
72954: PUSH
72955: LD_VAR 0 2
72959: PUSH
72960: LD_INT 3
72962: PLUS
72963: PUSH
72964: LD_INT 0
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: LIST
72971: PUSH
72972: EMPTY
72973: LIST
72974: LIST
72975: LIST
72976: LIST
72977: LIST
72978: ST_TO_ADDR
// end ; end ;
72979: GO 72982
72981: POP
// result := list ;
72982: LD_ADDR_VAR 0 4
72986: PUSH
72987: LD_VAR 0 5
72991: ST_TO_ADDR
// end ;
72992: LD_VAR 0 4
72996: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72997: LD_INT 0
72999: PPUSH
73000: PPUSH
73001: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73002: LD_VAR 0 1
73006: NOT
73007: PUSH
73008: LD_VAR 0 2
73012: PUSH
73013: LD_INT 1
73015: PUSH
73016: LD_INT 2
73018: PUSH
73019: LD_INT 3
73021: PUSH
73022: LD_INT 4
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: IN
73031: NOT
73032: OR
73033: IFFALSE 73037
// exit ;
73035: GO 73129
// tmp := [ ] ;
73037: LD_ADDR_VAR 0 5
73041: PUSH
73042: EMPTY
73043: ST_TO_ADDR
// for i in units do
73044: LD_ADDR_VAR 0 4
73048: PUSH
73049: LD_VAR 0 1
73053: PUSH
73054: FOR_IN
73055: IFFALSE 73098
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73057: LD_ADDR_VAR 0 5
73061: PUSH
73062: LD_VAR 0 5
73066: PPUSH
73067: LD_VAR 0 5
73071: PUSH
73072: LD_INT 1
73074: PLUS
73075: PPUSH
73076: LD_VAR 0 4
73080: PPUSH
73081: LD_VAR 0 2
73085: PPUSH
73086: CALL_OW 259
73090: PPUSH
73091: CALL_OW 2
73095: ST_TO_ADDR
73096: GO 73054
73098: POP
73099: POP
// if not tmp then
73100: LD_VAR 0 5
73104: NOT
73105: IFFALSE 73109
// exit ;
73107: GO 73129
// result := SortListByListDesc ( units , tmp ) ;
73109: LD_ADDR_VAR 0 3
73113: PUSH
73114: LD_VAR 0 1
73118: PPUSH
73119: LD_VAR 0 5
73123: PPUSH
73124: CALL_OW 77
73128: ST_TO_ADDR
// end ;
73129: LD_VAR 0 3
73133: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73134: LD_INT 0
73136: PPUSH
73137: PPUSH
73138: PPUSH
// result := false ;
73139: LD_ADDR_VAR 0 3
73143: PUSH
73144: LD_INT 0
73146: ST_TO_ADDR
// x := GetX ( building ) ;
73147: LD_ADDR_VAR 0 4
73151: PUSH
73152: LD_VAR 0 2
73156: PPUSH
73157: CALL_OW 250
73161: ST_TO_ADDR
// y := GetY ( building ) ;
73162: LD_ADDR_VAR 0 5
73166: PUSH
73167: LD_VAR 0 2
73171: PPUSH
73172: CALL_OW 251
73176: ST_TO_ADDR
// if not building or not x or not y then
73177: LD_VAR 0 2
73181: NOT
73182: PUSH
73183: LD_VAR 0 4
73187: NOT
73188: OR
73189: PUSH
73190: LD_VAR 0 5
73194: NOT
73195: OR
73196: IFFALSE 73200
// exit ;
73198: GO 73292
// if GetTaskList ( unit ) then
73200: LD_VAR 0 1
73204: PPUSH
73205: CALL_OW 437
73209: IFFALSE 73292
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73211: LD_STRING e
73213: PUSH
73214: LD_VAR 0 1
73218: PPUSH
73219: CALL_OW 437
73223: PUSH
73224: LD_INT 1
73226: ARRAY
73227: PUSH
73228: LD_INT 1
73230: ARRAY
73231: EQUAL
73232: PUSH
73233: LD_VAR 0 4
73237: PUSH
73238: LD_VAR 0 1
73242: PPUSH
73243: CALL_OW 437
73247: PUSH
73248: LD_INT 1
73250: ARRAY
73251: PUSH
73252: LD_INT 2
73254: ARRAY
73255: EQUAL
73256: AND
73257: PUSH
73258: LD_VAR 0 5
73262: PUSH
73263: LD_VAR 0 1
73267: PPUSH
73268: CALL_OW 437
73272: PUSH
73273: LD_INT 1
73275: ARRAY
73276: PUSH
73277: LD_INT 3
73279: ARRAY
73280: EQUAL
73281: AND
73282: IFFALSE 73292
// result := true end ;
73284: LD_ADDR_VAR 0 3
73288: PUSH
73289: LD_INT 1
73291: ST_TO_ADDR
// end ;
73292: LD_VAR 0 3
73296: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73297: LD_INT 0
73299: PPUSH
// result := false ;
73300: LD_ADDR_VAR 0 4
73304: PUSH
73305: LD_INT 0
73307: ST_TO_ADDR
// if GetTaskList ( unit ) then
73308: LD_VAR 0 1
73312: PPUSH
73313: CALL_OW 437
73317: IFFALSE 73400
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73319: LD_STRING M
73321: PUSH
73322: LD_VAR 0 1
73326: PPUSH
73327: CALL_OW 437
73331: PUSH
73332: LD_INT 1
73334: ARRAY
73335: PUSH
73336: LD_INT 1
73338: ARRAY
73339: EQUAL
73340: PUSH
73341: LD_VAR 0 2
73345: PUSH
73346: LD_VAR 0 1
73350: PPUSH
73351: CALL_OW 437
73355: PUSH
73356: LD_INT 1
73358: ARRAY
73359: PUSH
73360: LD_INT 2
73362: ARRAY
73363: EQUAL
73364: AND
73365: PUSH
73366: LD_VAR 0 3
73370: PUSH
73371: LD_VAR 0 1
73375: PPUSH
73376: CALL_OW 437
73380: PUSH
73381: LD_INT 1
73383: ARRAY
73384: PUSH
73385: LD_INT 3
73387: ARRAY
73388: EQUAL
73389: AND
73390: IFFALSE 73400
// result := true ;
73392: LD_ADDR_VAR 0 4
73396: PUSH
73397: LD_INT 1
73399: ST_TO_ADDR
// end ; end ;
73400: LD_VAR 0 4
73404: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73405: LD_INT 0
73407: PPUSH
73408: PPUSH
73409: PPUSH
73410: PPUSH
// if not unit or not area then
73411: LD_VAR 0 1
73415: NOT
73416: PUSH
73417: LD_VAR 0 2
73421: NOT
73422: OR
73423: IFFALSE 73427
// exit ;
73425: GO 73591
// tmp := AreaToList ( area , i ) ;
73427: LD_ADDR_VAR 0 6
73431: PUSH
73432: LD_VAR 0 2
73436: PPUSH
73437: LD_VAR 0 5
73441: PPUSH
73442: CALL_OW 517
73446: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73447: LD_ADDR_VAR 0 5
73451: PUSH
73452: DOUBLE
73453: LD_INT 1
73455: DEC
73456: ST_TO_ADDR
73457: LD_VAR 0 6
73461: PUSH
73462: LD_INT 1
73464: ARRAY
73465: PUSH
73466: FOR_TO
73467: IFFALSE 73589
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73469: LD_ADDR_VAR 0 7
73473: PUSH
73474: LD_VAR 0 6
73478: PUSH
73479: LD_INT 1
73481: ARRAY
73482: PUSH
73483: LD_VAR 0 5
73487: ARRAY
73488: PUSH
73489: LD_VAR 0 6
73493: PUSH
73494: LD_INT 2
73496: ARRAY
73497: PUSH
73498: LD_VAR 0 5
73502: ARRAY
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73508: LD_VAR 0 7
73512: PUSH
73513: LD_INT 1
73515: ARRAY
73516: PPUSH
73517: LD_VAR 0 7
73521: PUSH
73522: LD_INT 2
73524: ARRAY
73525: PPUSH
73526: CALL_OW 428
73530: PUSH
73531: LD_INT 0
73533: EQUAL
73534: IFFALSE 73587
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73536: LD_VAR 0 1
73540: PPUSH
73541: LD_VAR 0 7
73545: PUSH
73546: LD_INT 1
73548: ARRAY
73549: PPUSH
73550: LD_VAR 0 7
73554: PUSH
73555: LD_INT 2
73557: ARRAY
73558: PPUSH
73559: LD_VAR 0 3
73563: PPUSH
73564: CALL_OW 48
// result := IsPlaced ( unit ) ;
73568: LD_ADDR_VAR 0 4
73572: PUSH
73573: LD_VAR 0 1
73577: PPUSH
73578: CALL_OW 305
73582: ST_TO_ADDR
// exit ;
73583: POP
73584: POP
73585: GO 73591
// end ; end ;
73587: GO 73466
73589: POP
73590: POP
// end ;
73591: LD_VAR 0 4
73595: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73596: LD_INT 0
73598: PPUSH
73599: PPUSH
73600: PPUSH
// if not side or side > 8 then
73601: LD_VAR 0 1
73605: NOT
73606: PUSH
73607: LD_VAR 0 1
73611: PUSH
73612: LD_INT 8
73614: GREATER
73615: OR
73616: IFFALSE 73620
// exit ;
73618: GO 73807
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73620: LD_ADDR_VAR 0 4
73624: PUSH
73625: LD_INT 22
73627: PUSH
73628: LD_VAR 0 1
73632: PUSH
73633: EMPTY
73634: LIST
73635: LIST
73636: PUSH
73637: LD_INT 21
73639: PUSH
73640: LD_INT 3
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: PUSH
73647: EMPTY
73648: LIST
73649: LIST
73650: PPUSH
73651: CALL_OW 69
73655: ST_TO_ADDR
// if not tmp then
73656: LD_VAR 0 4
73660: NOT
73661: IFFALSE 73665
// exit ;
73663: GO 73807
// enable_addtolog := true ;
73665: LD_ADDR_OWVAR 81
73669: PUSH
73670: LD_INT 1
73672: ST_TO_ADDR
// AddToLog ( [ ) ;
73673: LD_STRING [
73675: PPUSH
73676: CALL_OW 561
// for i in tmp do
73680: LD_ADDR_VAR 0 3
73684: PUSH
73685: LD_VAR 0 4
73689: PUSH
73690: FOR_IN
73691: IFFALSE 73798
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73693: LD_STRING [
73695: PUSH
73696: LD_VAR 0 3
73700: PPUSH
73701: CALL_OW 266
73705: STR
73706: PUSH
73707: LD_STRING , 
73709: STR
73710: PUSH
73711: LD_VAR 0 3
73715: PPUSH
73716: CALL_OW 250
73720: STR
73721: PUSH
73722: LD_STRING , 
73724: STR
73725: PUSH
73726: LD_VAR 0 3
73730: PPUSH
73731: CALL_OW 251
73735: STR
73736: PUSH
73737: LD_STRING , 
73739: STR
73740: PUSH
73741: LD_VAR 0 3
73745: PPUSH
73746: CALL_OW 254
73750: STR
73751: PUSH
73752: LD_STRING , 
73754: STR
73755: PUSH
73756: LD_VAR 0 3
73760: PPUSH
73761: LD_INT 1
73763: PPUSH
73764: CALL_OW 268
73768: STR
73769: PUSH
73770: LD_STRING , 
73772: STR
73773: PUSH
73774: LD_VAR 0 3
73778: PPUSH
73779: LD_INT 2
73781: PPUSH
73782: CALL_OW 268
73786: STR
73787: PUSH
73788: LD_STRING ],
73790: STR
73791: PPUSH
73792: CALL_OW 561
// end ;
73796: GO 73690
73798: POP
73799: POP
// AddToLog ( ]; ) ;
73800: LD_STRING ];
73802: PPUSH
73803: CALL_OW 561
// end ;
73807: LD_VAR 0 2
73811: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73812: LD_INT 0
73814: PPUSH
73815: PPUSH
73816: PPUSH
73817: PPUSH
73818: PPUSH
// if not area or not rate or not max then
73819: LD_VAR 0 1
73823: NOT
73824: PUSH
73825: LD_VAR 0 2
73829: NOT
73830: OR
73831: PUSH
73832: LD_VAR 0 4
73836: NOT
73837: OR
73838: IFFALSE 73842
// exit ;
73840: GO 74031
// while 1 do
73842: LD_INT 1
73844: IFFALSE 74031
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73846: LD_ADDR_VAR 0 9
73850: PUSH
73851: LD_VAR 0 1
73855: PPUSH
73856: LD_INT 1
73858: PPUSH
73859: CALL_OW 287
73863: PUSH
73864: LD_INT 10
73866: MUL
73867: ST_TO_ADDR
// r := rate / 10 ;
73868: LD_ADDR_VAR 0 7
73872: PUSH
73873: LD_VAR 0 2
73877: PUSH
73878: LD_INT 10
73880: DIVREAL
73881: ST_TO_ADDR
// time := 1 1$00 ;
73882: LD_ADDR_VAR 0 8
73886: PUSH
73887: LD_INT 2100
73889: ST_TO_ADDR
// if amount < min then
73890: LD_VAR 0 9
73894: PUSH
73895: LD_VAR 0 3
73899: LESS
73900: IFFALSE 73918
// r := r * 2 else
73902: LD_ADDR_VAR 0 7
73906: PUSH
73907: LD_VAR 0 7
73911: PUSH
73912: LD_INT 2
73914: MUL
73915: ST_TO_ADDR
73916: GO 73944
// if amount > max then
73918: LD_VAR 0 9
73922: PUSH
73923: LD_VAR 0 4
73927: GREATER
73928: IFFALSE 73944
// r := r / 2 ;
73930: LD_ADDR_VAR 0 7
73934: PUSH
73935: LD_VAR 0 7
73939: PUSH
73940: LD_INT 2
73942: DIVREAL
73943: ST_TO_ADDR
// time := time / r ;
73944: LD_ADDR_VAR 0 8
73948: PUSH
73949: LD_VAR 0 8
73953: PUSH
73954: LD_VAR 0 7
73958: DIVREAL
73959: ST_TO_ADDR
// if time < 0 then
73960: LD_VAR 0 8
73964: PUSH
73965: LD_INT 0
73967: LESS
73968: IFFALSE 73985
// time := time * - 1 ;
73970: LD_ADDR_VAR 0 8
73974: PUSH
73975: LD_VAR 0 8
73979: PUSH
73980: LD_INT 1
73982: NEG
73983: MUL
73984: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73985: LD_VAR 0 8
73989: PUSH
73990: LD_INT 35
73992: PPUSH
73993: LD_INT 875
73995: PPUSH
73996: CALL_OW 12
74000: PLUS
74001: PPUSH
74002: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74006: LD_INT 1
74008: PPUSH
74009: LD_INT 5
74011: PPUSH
74012: CALL_OW 12
74016: PPUSH
74017: LD_VAR 0 1
74021: PPUSH
74022: LD_INT 1
74024: PPUSH
74025: CALL_OW 55
// end ;
74029: GO 73842
// end ;
74031: LD_VAR 0 5
74035: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74036: LD_INT 0
74038: PPUSH
74039: PPUSH
74040: PPUSH
74041: PPUSH
74042: PPUSH
74043: PPUSH
74044: PPUSH
74045: PPUSH
// if not turrets or not factories then
74046: LD_VAR 0 1
74050: NOT
74051: PUSH
74052: LD_VAR 0 2
74056: NOT
74057: OR
74058: IFFALSE 74062
// exit ;
74060: GO 74369
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74062: LD_ADDR_VAR 0 10
74066: PUSH
74067: LD_INT 5
74069: PUSH
74070: LD_INT 6
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: PUSH
74077: LD_INT 2
74079: PUSH
74080: LD_INT 4
74082: PUSH
74083: EMPTY
74084: LIST
74085: LIST
74086: PUSH
74087: LD_INT 3
74089: PUSH
74090: LD_INT 5
74092: PUSH
74093: EMPTY
74094: LIST
74095: LIST
74096: PUSH
74097: EMPTY
74098: LIST
74099: LIST
74100: LIST
74101: PUSH
74102: LD_INT 24
74104: PUSH
74105: LD_INT 25
74107: PUSH
74108: EMPTY
74109: LIST
74110: LIST
74111: PUSH
74112: LD_INT 23
74114: PUSH
74115: LD_INT 27
74117: PUSH
74118: EMPTY
74119: LIST
74120: LIST
74121: PUSH
74122: EMPTY
74123: LIST
74124: LIST
74125: PUSH
74126: LD_INT 42
74128: PUSH
74129: LD_INT 43
74131: PUSH
74132: EMPTY
74133: LIST
74134: LIST
74135: PUSH
74136: LD_INT 44
74138: PUSH
74139: LD_INT 46
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: PUSH
74146: LD_INT 45
74148: PUSH
74149: LD_INT 47
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: LIST
74160: PUSH
74161: EMPTY
74162: LIST
74163: LIST
74164: LIST
74165: ST_TO_ADDR
// result := [ ] ;
74166: LD_ADDR_VAR 0 3
74170: PUSH
74171: EMPTY
74172: ST_TO_ADDR
// for i in turrets do
74173: LD_ADDR_VAR 0 4
74177: PUSH
74178: LD_VAR 0 1
74182: PUSH
74183: FOR_IN
74184: IFFALSE 74367
// begin nat := GetNation ( i ) ;
74186: LD_ADDR_VAR 0 7
74190: PUSH
74191: LD_VAR 0 4
74195: PPUSH
74196: CALL_OW 248
74200: ST_TO_ADDR
// weapon := 0 ;
74201: LD_ADDR_VAR 0 8
74205: PUSH
74206: LD_INT 0
74208: ST_TO_ADDR
// if not nat then
74209: LD_VAR 0 7
74213: NOT
74214: IFFALSE 74218
// continue ;
74216: GO 74183
// for j in list [ nat ] do
74218: LD_ADDR_VAR 0 5
74222: PUSH
74223: LD_VAR 0 10
74227: PUSH
74228: LD_VAR 0 7
74232: ARRAY
74233: PUSH
74234: FOR_IN
74235: IFFALSE 74276
// if GetBWeapon ( i ) = j [ 1 ] then
74237: LD_VAR 0 4
74241: PPUSH
74242: CALL_OW 269
74246: PUSH
74247: LD_VAR 0 5
74251: PUSH
74252: LD_INT 1
74254: ARRAY
74255: EQUAL
74256: IFFALSE 74274
// begin weapon := j [ 2 ] ;
74258: LD_ADDR_VAR 0 8
74262: PUSH
74263: LD_VAR 0 5
74267: PUSH
74268: LD_INT 2
74270: ARRAY
74271: ST_TO_ADDR
// break ;
74272: GO 74276
// end ;
74274: GO 74234
74276: POP
74277: POP
// if not weapon then
74278: LD_VAR 0 8
74282: NOT
74283: IFFALSE 74287
// continue ;
74285: GO 74183
// for k in factories do
74287: LD_ADDR_VAR 0 6
74291: PUSH
74292: LD_VAR 0 2
74296: PUSH
74297: FOR_IN
74298: IFFALSE 74363
// begin weapons := AvailableWeaponList ( k ) ;
74300: LD_ADDR_VAR 0 9
74304: PUSH
74305: LD_VAR 0 6
74309: PPUSH
74310: CALL_OW 478
74314: ST_TO_ADDR
// if not weapons then
74315: LD_VAR 0 9
74319: NOT
74320: IFFALSE 74324
// continue ;
74322: GO 74297
// if weapon in weapons then
74324: LD_VAR 0 8
74328: PUSH
74329: LD_VAR 0 9
74333: IN
74334: IFFALSE 74361
// begin result := [ i , weapon ] ;
74336: LD_ADDR_VAR 0 3
74340: PUSH
74341: LD_VAR 0 4
74345: PUSH
74346: LD_VAR 0 8
74350: PUSH
74351: EMPTY
74352: LIST
74353: LIST
74354: ST_TO_ADDR
// exit ;
74355: POP
74356: POP
74357: POP
74358: POP
74359: GO 74369
// end ; end ;
74361: GO 74297
74363: POP
74364: POP
// end ;
74365: GO 74183
74367: POP
74368: POP
// end ;
74369: LD_VAR 0 3
74373: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74374: LD_INT 0
74376: PPUSH
// if not side or side > 8 then
74377: LD_VAR 0 3
74381: NOT
74382: PUSH
74383: LD_VAR 0 3
74387: PUSH
74388: LD_INT 8
74390: GREATER
74391: OR
74392: IFFALSE 74396
// exit ;
74394: GO 74455
// if not range then
74396: LD_VAR 0 4
74400: NOT
74401: IFFALSE 74412
// range := - 12 ;
74403: LD_ADDR_VAR 0 4
74407: PUSH
74408: LD_INT 12
74410: NEG
74411: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74412: LD_VAR 0 1
74416: PPUSH
74417: LD_VAR 0 2
74421: PPUSH
74422: LD_VAR 0 3
74426: PPUSH
74427: LD_VAR 0 4
74431: PPUSH
74432: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74436: LD_VAR 0 1
74440: PPUSH
74441: LD_VAR 0 2
74445: PPUSH
74446: LD_VAR 0 3
74450: PPUSH
74451: CALL_OW 331
// end ;
74455: LD_VAR 0 5
74459: RET
// export function Video ( mode ) ; begin
74460: LD_INT 0
74462: PPUSH
// ingame_video = mode ;
74463: LD_ADDR_OWVAR 52
74467: PUSH
74468: LD_VAR 0 1
74472: ST_TO_ADDR
// interface_hidden = mode ;
74473: LD_ADDR_OWVAR 54
74477: PUSH
74478: LD_VAR 0 1
74482: ST_TO_ADDR
// end ;
74483: LD_VAR 0 2
74487: RET
// export function Join ( array , element ) ; begin
74488: LD_INT 0
74490: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74491: LD_ADDR_VAR 0 3
74495: PUSH
74496: LD_VAR 0 1
74500: PPUSH
74501: LD_VAR 0 1
74505: PUSH
74506: LD_INT 1
74508: PLUS
74509: PPUSH
74510: LD_VAR 0 2
74514: PPUSH
74515: CALL_OW 1
74519: ST_TO_ADDR
// end ;
74520: LD_VAR 0 3
74524: RET
// export function JoinUnion ( array , element ) ; begin
74525: LD_INT 0
74527: PPUSH
// result := array union element ;
74528: LD_ADDR_VAR 0 3
74532: PUSH
74533: LD_VAR 0 1
74537: PUSH
74538: LD_VAR 0 2
74542: UNION
74543: ST_TO_ADDR
// end ;
74544: LD_VAR 0 3
74548: RET
// export function GetBehemoths ( side ) ; begin
74549: LD_INT 0
74551: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74552: LD_ADDR_VAR 0 2
74556: PUSH
74557: LD_INT 22
74559: PUSH
74560: LD_VAR 0 1
74564: PUSH
74565: EMPTY
74566: LIST
74567: LIST
74568: PUSH
74569: LD_INT 31
74571: PUSH
74572: LD_INT 25
74574: PUSH
74575: EMPTY
74576: LIST
74577: LIST
74578: PUSH
74579: EMPTY
74580: LIST
74581: LIST
74582: PPUSH
74583: CALL_OW 69
74587: ST_TO_ADDR
// end ;
74588: LD_VAR 0 2
74592: RET
// export function Shuffle ( array ) ; var i , index ; begin
74593: LD_INT 0
74595: PPUSH
74596: PPUSH
74597: PPUSH
// result := [ ] ;
74598: LD_ADDR_VAR 0 2
74602: PUSH
74603: EMPTY
74604: ST_TO_ADDR
// if not array then
74605: LD_VAR 0 1
74609: NOT
74610: IFFALSE 74614
// exit ;
74612: GO 74713
// Randomize ;
74614: CALL_OW 10
// for i = array downto 1 do
74618: LD_ADDR_VAR 0 3
74622: PUSH
74623: DOUBLE
74624: LD_VAR 0 1
74628: INC
74629: ST_TO_ADDR
74630: LD_INT 1
74632: PUSH
74633: FOR_DOWNTO
74634: IFFALSE 74711
// begin index := rand ( 1 , array ) ;
74636: LD_ADDR_VAR 0 4
74640: PUSH
74641: LD_INT 1
74643: PPUSH
74644: LD_VAR 0 1
74648: PPUSH
74649: CALL_OW 12
74653: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74654: LD_ADDR_VAR 0 2
74658: PUSH
74659: LD_VAR 0 2
74663: PPUSH
74664: LD_VAR 0 2
74668: PUSH
74669: LD_INT 1
74671: PLUS
74672: PPUSH
74673: LD_VAR 0 1
74677: PUSH
74678: LD_VAR 0 4
74682: ARRAY
74683: PPUSH
74684: CALL_OW 2
74688: ST_TO_ADDR
// array := Delete ( array , index ) ;
74689: LD_ADDR_VAR 0 1
74693: PUSH
74694: LD_VAR 0 1
74698: PPUSH
74699: LD_VAR 0 4
74703: PPUSH
74704: CALL_OW 3
74708: ST_TO_ADDR
// end ;
74709: GO 74633
74711: POP
74712: POP
// end ;
74713: LD_VAR 0 2
74717: RET
// export function GetBaseMaterials ( base ) ; begin
74718: LD_INT 0
74720: PPUSH
// result := [ 0 , 0 , 0 ] ;
74721: LD_ADDR_VAR 0 2
74725: PUSH
74726: LD_INT 0
74728: PUSH
74729: LD_INT 0
74731: PUSH
74732: LD_INT 0
74734: PUSH
74735: EMPTY
74736: LIST
74737: LIST
74738: LIST
74739: ST_TO_ADDR
// if not base then
74740: LD_VAR 0 1
74744: NOT
74745: IFFALSE 74749
// exit ;
74747: GO 74798
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74749: LD_ADDR_VAR 0 2
74753: PUSH
74754: LD_VAR 0 1
74758: PPUSH
74759: LD_INT 1
74761: PPUSH
74762: CALL_OW 275
74766: PUSH
74767: LD_VAR 0 1
74771: PPUSH
74772: LD_INT 2
74774: PPUSH
74775: CALL_OW 275
74779: PUSH
74780: LD_VAR 0 1
74784: PPUSH
74785: LD_INT 3
74787: PPUSH
74788: CALL_OW 275
74792: PUSH
74793: EMPTY
74794: LIST
74795: LIST
74796: LIST
74797: ST_TO_ADDR
// end ;
74798: LD_VAR 0 2
74802: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74803: LD_INT 0
74805: PPUSH
74806: PPUSH
// result := array ;
74807: LD_ADDR_VAR 0 3
74811: PUSH
74812: LD_VAR 0 1
74816: ST_TO_ADDR
// if size > 0 then
74817: LD_VAR 0 2
74821: PUSH
74822: LD_INT 0
74824: GREATER
74825: IFFALSE 74871
// for i := array downto size do
74827: LD_ADDR_VAR 0 4
74831: PUSH
74832: DOUBLE
74833: LD_VAR 0 1
74837: INC
74838: ST_TO_ADDR
74839: LD_VAR 0 2
74843: PUSH
74844: FOR_DOWNTO
74845: IFFALSE 74869
// result := Delete ( result , result ) ;
74847: LD_ADDR_VAR 0 3
74851: PUSH
74852: LD_VAR 0 3
74856: PPUSH
74857: LD_VAR 0 3
74861: PPUSH
74862: CALL_OW 3
74866: ST_TO_ADDR
74867: GO 74844
74869: POP
74870: POP
// end ;
74871: LD_VAR 0 3
74875: RET
// export function ComExit ( unit ) ; var tmp ; begin
74876: LD_INT 0
74878: PPUSH
74879: PPUSH
// if not IsInUnit ( unit ) then
74880: LD_VAR 0 1
74884: PPUSH
74885: CALL_OW 310
74889: NOT
74890: IFFALSE 74894
// exit ;
74892: GO 74954
// tmp := IsInUnit ( unit ) ;
74894: LD_ADDR_VAR 0 3
74898: PUSH
74899: LD_VAR 0 1
74903: PPUSH
74904: CALL_OW 310
74908: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74909: LD_VAR 0 3
74913: PPUSH
74914: CALL_OW 247
74918: PUSH
74919: LD_INT 2
74921: EQUAL
74922: IFFALSE 74935
// ComExitVehicle ( unit ) else
74924: LD_VAR 0 1
74928: PPUSH
74929: CALL_OW 121
74933: GO 74944
// ComExitBuilding ( unit ) ;
74935: LD_VAR 0 1
74939: PPUSH
74940: CALL_OW 122
// result := tmp ;
74944: LD_ADDR_VAR 0 2
74948: PUSH
74949: LD_VAR 0 3
74953: ST_TO_ADDR
// end ;
74954: LD_VAR 0 2
74958: RET
// export function ComExitAll ( units ) ; var i ; begin
74959: LD_INT 0
74961: PPUSH
74962: PPUSH
// if not units then
74963: LD_VAR 0 1
74967: NOT
74968: IFFALSE 74972
// exit ;
74970: GO 74998
// for i in units do
74972: LD_ADDR_VAR 0 3
74976: PUSH
74977: LD_VAR 0 1
74981: PUSH
74982: FOR_IN
74983: IFFALSE 74996
// ComExit ( i ) ;
74985: LD_VAR 0 3
74989: PPUSH
74990: CALL 74876 0 1
74994: GO 74982
74996: POP
74997: POP
// end ;
74998: LD_VAR 0 2
75002: RET
// export function ResetHc ; begin
75003: LD_INT 0
75005: PPUSH
// InitHc ;
75006: CALL_OW 19
// hc_importance := 0 ;
75010: LD_ADDR_OWVAR 32
75014: PUSH
75015: LD_INT 0
75017: ST_TO_ADDR
// end ;
75018: LD_VAR 0 1
75022: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75023: LD_INT 0
75025: PPUSH
75026: PPUSH
75027: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75028: LD_ADDR_VAR 0 6
75032: PUSH
75033: LD_VAR 0 1
75037: PUSH
75038: LD_VAR 0 3
75042: PLUS
75043: PUSH
75044: LD_INT 2
75046: DIV
75047: ST_TO_ADDR
// if _x < 0 then
75048: LD_VAR 0 6
75052: PUSH
75053: LD_INT 0
75055: LESS
75056: IFFALSE 75073
// _x := _x * - 1 ;
75058: LD_ADDR_VAR 0 6
75062: PUSH
75063: LD_VAR 0 6
75067: PUSH
75068: LD_INT 1
75070: NEG
75071: MUL
75072: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75073: LD_ADDR_VAR 0 7
75077: PUSH
75078: LD_VAR 0 2
75082: PUSH
75083: LD_VAR 0 4
75087: PLUS
75088: PUSH
75089: LD_INT 2
75091: DIV
75092: ST_TO_ADDR
// if _y < 0 then
75093: LD_VAR 0 7
75097: PUSH
75098: LD_INT 0
75100: LESS
75101: IFFALSE 75118
// _y := _y * - 1 ;
75103: LD_ADDR_VAR 0 7
75107: PUSH
75108: LD_VAR 0 7
75112: PUSH
75113: LD_INT 1
75115: NEG
75116: MUL
75117: ST_TO_ADDR
// result := [ _x , _y ] ;
75118: LD_ADDR_VAR 0 5
75122: PUSH
75123: LD_VAR 0 6
75127: PUSH
75128: LD_VAR 0 7
75132: PUSH
75133: EMPTY
75134: LIST
75135: LIST
75136: ST_TO_ADDR
// end ;
75137: LD_VAR 0 5
75141: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75142: LD_INT 0
75144: PPUSH
75145: PPUSH
75146: PPUSH
75147: PPUSH
// task := GetTaskList ( unit ) ;
75148: LD_ADDR_VAR 0 7
75152: PUSH
75153: LD_VAR 0 1
75157: PPUSH
75158: CALL_OW 437
75162: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75163: LD_VAR 0 7
75167: NOT
75168: PUSH
75169: LD_VAR 0 1
75173: PPUSH
75174: LD_VAR 0 2
75178: PPUSH
75179: CALL_OW 308
75183: NOT
75184: AND
75185: IFFALSE 75189
// exit ;
75187: GO 75307
// if IsInArea ( unit , area ) then
75189: LD_VAR 0 1
75193: PPUSH
75194: LD_VAR 0 2
75198: PPUSH
75199: CALL_OW 308
75203: IFFALSE 75221
// begin ComMoveToArea ( unit , goAway ) ;
75205: LD_VAR 0 1
75209: PPUSH
75210: LD_VAR 0 3
75214: PPUSH
75215: CALL_OW 113
// exit ;
75219: GO 75307
// end ; if task [ 1 ] [ 1 ] <> M then
75221: LD_VAR 0 7
75225: PUSH
75226: LD_INT 1
75228: ARRAY
75229: PUSH
75230: LD_INT 1
75232: ARRAY
75233: PUSH
75234: LD_STRING M
75236: NONEQUAL
75237: IFFALSE 75241
// exit ;
75239: GO 75307
// x := task [ 1 ] [ 2 ] ;
75241: LD_ADDR_VAR 0 5
75245: PUSH
75246: LD_VAR 0 7
75250: PUSH
75251: LD_INT 1
75253: ARRAY
75254: PUSH
75255: LD_INT 2
75257: ARRAY
75258: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75259: LD_ADDR_VAR 0 6
75263: PUSH
75264: LD_VAR 0 7
75268: PUSH
75269: LD_INT 1
75271: ARRAY
75272: PUSH
75273: LD_INT 3
75275: ARRAY
75276: ST_TO_ADDR
// if InArea ( x , y , area ) then
75277: LD_VAR 0 5
75281: PPUSH
75282: LD_VAR 0 6
75286: PPUSH
75287: LD_VAR 0 2
75291: PPUSH
75292: CALL_OW 309
75296: IFFALSE 75307
// ComStop ( unit ) ;
75298: LD_VAR 0 1
75302: PPUSH
75303: CALL_OW 141
// end ;
75307: LD_VAR 0 4
75311: RET
// export function Abs ( value ) ; begin
75312: LD_INT 0
75314: PPUSH
// result := value ;
75315: LD_ADDR_VAR 0 2
75319: PUSH
75320: LD_VAR 0 1
75324: ST_TO_ADDR
// if value < 0 then
75325: LD_VAR 0 1
75329: PUSH
75330: LD_INT 0
75332: LESS
75333: IFFALSE 75350
// result := value * - 1 ;
75335: LD_ADDR_VAR 0 2
75339: PUSH
75340: LD_VAR 0 1
75344: PUSH
75345: LD_INT 1
75347: NEG
75348: MUL
75349: ST_TO_ADDR
// end ;
75350: LD_VAR 0 2
75354: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75355: LD_INT 0
75357: PPUSH
75358: PPUSH
75359: PPUSH
75360: PPUSH
75361: PPUSH
75362: PPUSH
75363: PPUSH
75364: PPUSH
// if not unit or not building then
75365: LD_VAR 0 1
75369: NOT
75370: PUSH
75371: LD_VAR 0 2
75375: NOT
75376: OR
75377: IFFALSE 75381
// exit ;
75379: GO 75607
// x := GetX ( building ) ;
75381: LD_ADDR_VAR 0 4
75385: PUSH
75386: LD_VAR 0 2
75390: PPUSH
75391: CALL_OW 250
75395: ST_TO_ADDR
// y := GetY ( building ) ;
75396: LD_ADDR_VAR 0 6
75400: PUSH
75401: LD_VAR 0 2
75405: PPUSH
75406: CALL_OW 251
75410: ST_TO_ADDR
// d := GetDir ( building ) ;
75411: LD_ADDR_VAR 0 8
75415: PUSH
75416: LD_VAR 0 2
75420: PPUSH
75421: CALL_OW 254
75425: ST_TO_ADDR
// r := 4 ;
75426: LD_ADDR_VAR 0 9
75430: PUSH
75431: LD_INT 4
75433: ST_TO_ADDR
// for i := 1 to 5 do
75434: LD_ADDR_VAR 0 10
75438: PUSH
75439: DOUBLE
75440: LD_INT 1
75442: DEC
75443: ST_TO_ADDR
75444: LD_INT 5
75446: PUSH
75447: FOR_TO
75448: IFFALSE 75605
// begin _x := ShiftX ( x , d , r + i ) ;
75450: LD_ADDR_VAR 0 5
75454: PUSH
75455: LD_VAR 0 4
75459: PPUSH
75460: LD_VAR 0 8
75464: PPUSH
75465: LD_VAR 0 9
75469: PUSH
75470: LD_VAR 0 10
75474: PLUS
75475: PPUSH
75476: CALL_OW 272
75480: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75481: LD_ADDR_VAR 0 7
75485: PUSH
75486: LD_VAR 0 6
75490: PPUSH
75491: LD_VAR 0 8
75495: PPUSH
75496: LD_VAR 0 9
75500: PUSH
75501: LD_VAR 0 10
75505: PLUS
75506: PPUSH
75507: CALL_OW 273
75511: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75512: LD_VAR 0 5
75516: PPUSH
75517: LD_VAR 0 7
75521: PPUSH
75522: CALL_OW 488
75526: PUSH
75527: LD_VAR 0 5
75531: PPUSH
75532: LD_VAR 0 7
75536: PPUSH
75537: CALL_OW 428
75541: PPUSH
75542: CALL_OW 247
75546: PUSH
75547: LD_INT 3
75549: PUSH
75550: LD_INT 2
75552: PUSH
75553: EMPTY
75554: LIST
75555: LIST
75556: IN
75557: NOT
75558: AND
75559: IFFALSE 75603
// begin ComMoveXY ( unit , _x , _y ) ;
75561: LD_VAR 0 1
75565: PPUSH
75566: LD_VAR 0 5
75570: PPUSH
75571: LD_VAR 0 7
75575: PPUSH
75576: CALL_OW 111
// result := [ _x , _y ] ;
75580: LD_ADDR_VAR 0 3
75584: PUSH
75585: LD_VAR 0 5
75589: PUSH
75590: LD_VAR 0 7
75594: PUSH
75595: EMPTY
75596: LIST
75597: LIST
75598: ST_TO_ADDR
// exit ;
75599: POP
75600: POP
75601: GO 75607
// end ; end ;
75603: GO 75447
75605: POP
75606: POP
// end ;
75607: LD_VAR 0 3
75611: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75612: LD_INT 0
75614: PPUSH
75615: PPUSH
75616: PPUSH
// result := 0 ;
75617: LD_ADDR_VAR 0 3
75621: PUSH
75622: LD_INT 0
75624: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75625: LD_VAR 0 1
75629: PUSH
75630: LD_INT 0
75632: LESS
75633: PUSH
75634: LD_VAR 0 1
75638: PUSH
75639: LD_INT 8
75641: GREATER
75642: OR
75643: PUSH
75644: LD_VAR 0 2
75648: PUSH
75649: LD_INT 0
75651: LESS
75652: OR
75653: PUSH
75654: LD_VAR 0 2
75658: PUSH
75659: LD_INT 8
75661: GREATER
75662: OR
75663: IFFALSE 75667
// exit ;
75665: GO 75742
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75667: LD_ADDR_VAR 0 4
75671: PUSH
75672: LD_INT 22
75674: PUSH
75675: LD_VAR 0 2
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: PPUSH
75684: CALL_OW 69
75688: PUSH
75689: FOR_IN
75690: IFFALSE 75740
// begin un := UnitShoot ( i ) ;
75692: LD_ADDR_VAR 0 5
75696: PUSH
75697: LD_VAR 0 4
75701: PPUSH
75702: CALL_OW 504
75706: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75707: LD_VAR 0 5
75711: PPUSH
75712: CALL_OW 255
75716: PUSH
75717: LD_VAR 0 1
75721: EQUAL
75722: IFFALSE 75738
// begin result := un ;
75724: LD_ADDR_VAR 0 3
75728: PUSH
75729: LD_VAR 0 5
75733: ST_TO_ADDR
// exit ;
75734: POP
75735: POP
75736: GO 75742
// end ; end ;
75738: GO 75689
75740: POP
75741: POP
// end ;
75742: LD_VAR 0 3
75746: RET
// export function GetCargoBay ( units ) ; begin
75747: LD_INT 0
75749: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75750: LD_ADDR_VAR 0 2
75754: PUSH
75755: LD_VAR 0 1
75759: PPUSH
75760: LD_INT 2
75762: PUSH
75763: LD_INT 34
75765: PUSH
75766: LD_INT 12
75768: PUSH
75769: EMPTY
75770: LIST
75771: LIST
75772: PUSH
75773: LD_INT 34
75775: PUSH
75776: LD_INT 51
75778: PUSH
75779: EMPTY
75780: LIST
75781: LIST
75782: PUSH
75783: LD_INT 34
75785: PUSH
75786: LD_INT 32
75788: PUSH
75789: EMPTY
75790: LIST
75791: LIST
75792: PUSH
75793: LD_INT 34
75795: PUSH
75796: LD_EXP 63
75800: PUSH
75801: EMPTY
75802: LIST
75803: LIST
75804: PUSH
75805: EMPTY
75806: LIST
75807: LIST
75808: LIST
75809: LIST
75810: LIST
75811: PPUSH
75812: CALL_OW 72
75816: ST_TO_ADDR
// end ;
75817: LD_VAR 0 2
75821: RET
// export function Negate ( value ) ; begin
75822: LD_INT 0
75824: PPUSH
// result := not value ;
75825: LD_ADDR_VAR 0 2
75829: PUSH
75830: LD_VAR 0 1
75834: NOT
75835: ST_TO_ADDR
// end ;
75836: LD_VAR 0 2
75840: RET
// export function Inc ( value ) ; begin
75841: LD_INT 0
75843: PPUSH
// result := value + 1 ;
75844: LD_ADDR_VAR 0 2
75848: PUSH
75849: LD_VAR 0 1
75853: PUSH
75854: LD_INT 1
75856: PLUS
75857: ST_TO_ADDR
// end ;
75858: LD_VAR 0 2
75862: RET
// export function Dec ( value ) ; begin
75863: LD_INT 0
75865: PPUSH
// result := value - 1 ;
75866: LD_ADDR_VAR 0 2
75870: PUSH
75871: LD_VAR 0 1
75875: PUSH
75876: LD_INT 1
75878: MINUS
75879: ST_TO_ADDR
// end ;
75880: LD_VAR 0 2
75884: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75885: LD_INT 0
75887: PPUSH
75888: PPUSH
75889: PPUSH
75890: PPUSH
75891: PPUSH
75892: PPUSH
75893: PPUSH
75894: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75895: LD_VAR 0 1
75899: PPUSH
75900: LD_VAR 0 2
75904: PPUSH
75905: CALL_OW 488
75909: NOT
75910: PUSH
75911: LD_VAR 0 3
75915: PPUSH
75916: LD_VAR 0 4
75920: PPUSH
75921: CALL_OW 488
75925: NOT
75926: OR
75927: IFFALSE 75940
// begin result := - 1 ;
75929: LD_ADDR_VAR 0 5
75933: PUSH
75934: LD_INT 1
75936: NEG
75937: ST_TO_ADDR
// exit ;
75938: GO 76175
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75940: LD_ADDR_VAR 0 12
75944: PUSH
75945: LD_VAR 0 1
75949: PPUSH
75950: LD_VAR 0 2
75954: PPUSH
75955: LD_VAR 0 3
75959: PPUSH
75960: LD_VAR 0 4
75964: PPUSH
75965: CALL 75023 0 4
75969: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75970: LD_ADDR_VAR 0 11
75974: PUSH
75975: LD_VAR 0 1
75979: PPUSH
75980: LD_VAR 0 2
75984: PPUSH
75985: LD_VAR 0 12
75989: PUSH
75990: LD_INT 1
75992: ARRAY
75993: PPUSH
75994: LD_VAR 0 12
75998: PUSH
75999: LD_INT 2
76001: ARRAY
76002: PPUSH
76003: CALL_OW 298
76007: ST_TO_ADDR
// distance := 9999 ;
76008: LD_ADDR_VAR 0 10
76012: PUSH
76013: LD_INT 9999
76015: ST_TO_ADDR
// for i := 0 to 5 do
76016: LD_ADDR_VAR 0 6
76020: PUSH
76021: DOUBLE
76022: LD_INT 0
76024: DEC
76025: ST_TO_ADDR
76026: LD_INT 5
76028: PUSH
76029: FOR_TO
76030: IFFALSE 76173
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76032: LD_ADDR_VAR 0 7
76036: PUSH
76037: LD_VAR 0 1
76041: PPUSH
76042: LD_VAR 0 6
76046: PPUSH
76047: LD_VAR 0 11
76051: PPUSH
76052: CALL_OW 272
76056: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76057: LD_ADDR_VAR 0 8
76061: PUSH
76062: LD_VAR 0 2
76066: PPUSH
76067: LD_VAR 0 6
76071: PPUSH
76072: LD_VAR 0 11
76076: PPUSH
76077: CALL_OW 273
76081: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76082: LD_VAR 0 7
76086: PPUSH
76087: LD_VAR 0 8
76091: PPUSH
76092: CALL_OW 488
76096: NOT
76097: IFFALSE 76101
// continue ;
76099: GO 76029
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76101: LD_ADDR_VAR 0 9
76105: PUSH
76106: LD_VAR 0 12
76110: PUSH
76111: LD_INT 1
76113: ARRAY
76114: PPUSH
76115: LD_VAR 0 12
76119: PUSH
76120: LD_INT 2
76122: ARRAY
76123: PPUSH
76124: LD_VAR 0 7
76128: PPUSH
76129: LD_VAR 0 8
76133: PPUSH
76134: CALL_OW 298
76138: ST_TO_ADDR
// if tmp < distance then
76139: LD_VAR 0 9
76143: PUSH
76144: LD_VAR 0 10
76148: LESS
76149: IFFALSE 76171
// begin result := i ;
76151: LD_ADDR_VAR 0 5
76155: PUSH
76156: LD_VAR 0 6
76160: ST_TO_ADDR
// distance := tmp ;
76161: LD_ADDR_VAR 0 10
76165: PUSH
76166: LD_VAR 0 9
76170: ST_TO_ADDR
// end ; end ;
76171: GO 76029
76173: POP
76174: POP
// end ;
76175: LD_VAR 0 5
76179: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76180: LD_INT 0
76182: PPUSH
76183: PPUSH
// if not driver or not IsInUnit ( driver ) then
76184: LD_VAR 0 1
76188: NOT
76189: PUSH
76190: LD_VAR 0 1
76194: PPUSH
76195: CALL_OW 310
76199: NOT
76200: OR
76201: IFFALSE 76205
// exit ;
76203: GO 76295
// vehicle := IsInUnit ( driver ) ;
76205: LD_ADDR_VAR 0 3
76209: PUSH
76210: LD_VAR 0 1
76214: PPUSH
76215: CALL_OW 310
76219: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76220: LD_VAR 0 1
76224: PPUSH
76225: LD_STRING \
76227: PUSH
76228: LD_INT 0
76230: PUSH
76231: LD_INT 0
76233: PUSH
76234: LD_INT 0
76236: PUSH
76237: LD_INT 0
76239: PUSH
76240: LD_INT 0
76242: PUSH
76243: LD_INT 0
76245: PUSH
76246: EMPTY
76247: LIST
76248: LIST
76249: LIST
76250: LIST
76251: LIST
76252: LIST
76253: LIST
76254: PUSH
76255: LD_STRING E
76257: PUSH
76258: LD_INT 0
76260: PUSH
76261: LD_INT 0
76263: PUSH
76264: LD_VAR 0 3
76268: PUSH
76269: LD_INT 0
76271: PUSH
76272: LD_INT 0
76274: PUSH
76275: LD_INT 0
76277: PUSH
76278: EMPTY
76279: LIST
76280: LIST
76281: LIST
76282: LIST
76283: LIST
76284: LIST
76285: LIST
76286: PUSH
76287: EMPTY
76288: LIST
76289: LIST
76290: PPUSH
76291: CALL_OW 446
// end ;
76295: LD_VAR 0 2
76299: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76300: LD_INT 0
76302: PPUSH
76303: PPUSH
// if not driver or not IsInUnit ( driver ) then
76304: LD_VAR 0 1
76308: NOT
76309: PUSH
76310: LD_VAR 0 1
76314: PPUSH
76315: CALL_OW 310
76319: NOT
76320: OR
76321: IFFALSE 76325
// exit ;
76323: GO 76415
// vehicle := IsInUnit ( driver ) ;
76325: LD_ADDR_VAR 0 3
76329: PUSH
76330: LD_VAR 0 1
76334: PPUSH
76335: CALL_OW 310
76339: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76340: LD_VAR 0 1
76344: PPUSH
76345: LD_STRING \
76347: PUSH
76348: LD_INT 0
76350: PUSH
76351: LD_INT 0
76353: PUSH
76354: LD_INT 0
76356: PUSH
76357: LD_INT 0
76359: PUSH
76360: LD_INT 0
76362: PUSH
76363: LD_INT 0
76365: PUSH
76366: EMPTY
76367: LIST
76368: LIST
76369: LIST
76370: LIST
76371: LIST
76372: LIST
76373: LIST
76374: PUSH
76375: LD_STRING E
76377: PUSH
76378: LD_INT 0
76380: PUSH
76381: LD_INT 0
76383: PUSH
76384: LD_VAR 0 3
76388: PUSH
76389: LD_INT 0
76391: PUSH
76392: LD_INT 0
76394: PUSH
76395: LD_INT 0
76397: PUSH
76398: EMPTY
76399: LIST
76400: LIST
76401: LIST
76402: LIST
76403: LIST
76404: LIST
76405: LIST
76406: PUSH
76407: EMPTY
76408: LIST
76409: LIST
76410: PPUSH
76411: CALL_OW 447
// end ;
76415: LD_VAR 0 2
76419: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76420: LD_INT 0
76422: PPUSH
76423: PPUSH
76424: PPUSH
// tmp := [ ] ;
76425: LD_ADDR_VAR 0 5
76429: PUSH
76430: EMPTY
76431: ST_TO_ADDR
// for i in units do
76432: LD_ADDR_VAR 0 4
76436: PUSH
76437: LD_VAR 0 1
76441: PUSH
76442: FOR_IN
76443: IFFALSE 76481
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76445: LD_ADDR_VAR 0 5
76449: PUSH
76450: LD_VAR 0 5
76454: PPUSH
76455: LD_VAR 0 5
76459: PUSH
76460: LD_INT 1
76462: PLUS
76463: PPUSH
76464: LD_VAR 0 4
76468: PPUSH
76469: CALL_OW 256
76473: PPUSH
76474: CALL_OW 2
76478: ST_TO_ADDR
76479: GO 76442
76481: POP
76482: POP
// if not tmp then
76483: LD_VAR 0 5
76487: NOT
76488: IFFALSE 76492
// exit ;
76490: GO 76540
// if asc then
76492: LD_VAR 0 2
76496: IFFALSE 76520
// result := SortListByListAsc ( units , tmp ) else
76498: LD_ADDR_VAR 0 3
76502: PUSH
76503: LD_VAR 0 1
76507: PPUSH
76508: LD_VAR 0 5
76512: PPUSH
76513: CALL_OW 76
76517: ST_TO_ADDR
76518: GO 76540
// result := SortListByListDesc ( units , tmp ) ;
76520: LD_ADDR_VAR 0 3
76524: PUSH
76525: LD_VAR 0 1
76529: PPUSH
76530: LD_VAR 0 5
76534: PPUSH
76535: CALL_OW 77
76539: ST_TO_ADDR
// end ;
76540: LD_VAR 0 3
76544: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76545: LD_INT 0
76547: PPUSH
76548: PPUSH
// task := GetTaskList ( mech ) ;
76549: LD_ADDR_VAR 0 4
76553: PUSH
76554: LD_VAR 0 1
76558: PPUSH
76559: CALL_OW 437
76563: ST_TO_ADDR
// if not task then
76564: LD_VAR 0 4
76568: NOT
76569: IFFALSE 76573
// exit ;
76571: GO 76615
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76573: LD_ADDR_VAR 0 3
76577: PUSH
76578: LD_VAR 0 4
76582: PUSH
76583: LD_INT 1
76585: ARRAY
76586: PUSH
76587: LD_INT 1
76589: ARRAY
76590: PUSH
76591: LD_STRING r
76593: EQUAL
76594: PUSH
76595: LD_VAR 0 4
76599: PUSH
76600: LD_INT 1
76602: ARRAY
76603: PUSH
76604: LD_INT 4
76606: ARRAY
76607: PUSH
76608: LD_VAR 0 2
76612: EQUAL
76613: AND
76614: ST_TO_ADDR
// end ;
76615: LD_VAR 0 3
76619: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76620: LD_INT 0
76622: PPUSH
// SetDir ( unit , d ) ;
76623: LD_VAR 0 1
76627: PPUSH
76628: LD_VAR 0 4
76632: PPUSH
76633: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76637: LD_VAR 0 1
76641: PPUSH
76642: LD_VAR 0 2
76646: PPUSH
76647: LD_VAR 0 3
76651: PPUSH
76652: LD_VAR 0 5
76656: PPUSH
76657: CALL_OW 48
// end ;
76661: LD_VAR 0 6
76665: RET
// export function ToNaturalNumber ( number ) ; begin
76666: LD_INT 0
76668: PPUSH
// result := number div 1 ;
76669: LD_ADDR_VAR 0 2
76673: PUSH
76674: LD_VAR 0 1
76678: PUSH
76679: LD_INT 1
76681: DIV
76682: ST_TO_ADDR
// if number < 0 then
76683: LD_VAR 0 1
76687: PUSH
76688: LD_INT 0
76690: LESS
76691: IFFALSE 76701
// result := 0 ;
76693: LD_ADDR_VAR 0 2
76697: PUSH
76698: LD_INT 0
76700: ST_TO_ADDR
// end ;
76701: LD_VAR 0 2
76705: RET
// export function SortByClass ( units , class ) ; var un ; begin
76706: LD_INT 0
76708: PPUSH
76709: PPUSH
// if not units or not class then
76710: LD_VAR 0 1
76714: NOT
76715: PUSH
76716: LD_VAR 0 2
76720: NOT
76721: OR
76722: IFFALSE 76726
// exit ;
76724: GO 76821
// result := [ ] ;
76726: LD_ADDR_VAR 0 3
76730: PUSH
76731: EMPTY
76732: ST_TO_ADDR
// for un in units do
76733: LD_ADDR_VAR 0 4
76737: PUSH
76738: LD_VAR 0 1
76742: PUSH
76743: FOR_IN
76744: IFFALSE 76819
// if GetClass ( un ) = class then
76746: LD_VAR 0 4
76750: PPUSH
76751: CALL_OW 257
76755: PUSH
76756: LD_VAR 0 2
76760: EQUAL
76761: IFFALSE 76788
// result := Insert ( result , 1 , un ) else
76763: LD_ADDR_VAR 0 3
76767: PUSH
76768: LD_VAR 0 3
76772: PPUSH
76773: LD_INT 1
76775: PPUSH
76776: LD_VAR 0 4
76780: PPUSH
76781: CALL_OW 2
76785: ST_TO_ADDR
76786: GO 76817
// result := Replace ( result , result + 1 , un ) ;
76788: LD_ADDR_VAR 0 3
76792: PUSH
76793: LD_VAR 0 3
76797: PPUSH
76798: LD_VAR 0 3
76802: PUSH
76803: LD_INT 1
76805: PLUS
76806: PPUSH
76807: LD_VAR 0 4
76811: PPUSH
76812: CALL_OW 1
76816: ST_TO_ADDR
76817: GO 76743
76819: POP
76820: POP
// end ;
76821: LD_VAR 0 3
76825: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76826: LD_INT 0
76828: PPUSH
76829: PPUSH
76830: PPUSH
76831: PPUSH
76832: PPUSH
76833: PPUSH
76834: PPUSH
// result := [ ] ;
76835: LD_ADDR_VAR 0 4
76839: PUSH
76840: EMPTY
76841: ST_TO_ADDR
// if x - r < 0 then
76842: LD_VAR 0 1
76846: PUSH
76847: LD_VAR 0 3
76851: MINUS
76852: PUSH
76853: LD_INT 0
76855: LESS
76856: IFFALSE 76868
// min_x := 0 else
76858: LD_ADDR_VAR 0 8
76862: PUSH
76863: LD_INT 0
76865: ST_TO_ADDR
76866: GO 76884
// min_x := x - r ;
76868: LD_ADDR_VAR 0 8
76872: PUSH
76873: LD_VAR 0 1
76877: PUSH
76878: LD_VAR 0 3
76882: MINUS
76883: ST_TO_ADDR
// if y - r < 0 then
76884: LD_VAR 0 2
76888: PUSH
76889: LD_VAR 0 3
76893: MINUS
76894: PUSH
76895: LD_INT 0
76897: LESS
76898: IFFALSE 76910
// min_y := 0 else
76900: LD_ADDR_VAR 0 7
76904: PUSH
76905: LD_INT 0
76907: ST_TO_ADDR
76908: GO 76926
// min_y := y - r ;
76910: LD_ADDR_VAR 0 7
76914: PUSH
76915: LD_VAR 0 2
76919: PUSH
76920: LD_VAR 0 3
76924: MINUS
76925: ST_TO_ADDR
// max_x := x + r ;
76926: LD_ADDR_VAR 0 9
76930: PUSH
76931: LD_VAR 0 1
76935: PUSH
76936: LD_VAR 0 3
76940: PLUS
76941: ST_TO_ADDR
// max_y := y + r ;
76942: LD_ADDR_VAR 0 10
76946: PUSH
76947: LD_VAR 0 2
76951: PUSH
76952: LD_VAR 0 3
76956: PLUS
76957: ST_TO_ADDR
// for _x = min_x to max_x do
76958: LD_ADDR_VAR 0 5
76962: PUSH
76963: DOUBLE
76964: LD_VAR 0 8
76968: DEC
76969: ST_TO_ADDR
76970: LD_VAR 0 9
76974: PUSH
76975: FOR_TO
76976: IFFALSE 77077
// for _y = min_y to max_y do
76978: LD_ADDR_VAR 0 6
76982: PUSH
76983: DOUBLE
76984: LD_VAR 0 7
76988: DEC
76989: ST_TO_ADDR
76990: LD_VAR 0 10
76994: PUSH
76995: FOR_TO
76996: IFFALSE 77073
// begin if not ValidHex ( _x , _y ) then
76998: LD_VAR 0 5
77002: PPUSH
77003: LD_VAR 0 6
77007: PPUSH
77008: CALL_OW 488
77012: NOT
77013: IFFALSE 77017
// continue ;
77015: GO 76995
// if GetResourceTypeXY ( _x , _y ) then
77017: LD_VAR 0 5
77021: PPUSH
77022: LD_VAR 0 6
77026: PPUSH
77027: CALL_OW 283
77031: IFFALSE 77071
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77033: LD_ADDR_VAR 0 4
77037: PUSH
77038: LD_VAR 0 4
77042: PPUSH
77043: LD_VAR 0 4
77047: PUSH
77048: LD_INT 1
77050: PLUS
77051: PPUSH
77052: LD_VAR 0 5
77056: PUSH
77057: LD_VAR 0 6
77061: PUSH
77062: EMPTY
77063: LIST
77064: LIST
77065: PPUSH
77066: CALL_OW 1
77070: ST_TO_ADDR
// end ;
77071: GO 76995
77073: POP
77074: POP
77075: GO 76975
77077: POP
77078: POP
// end ;
77079: LD_VAR 0 4
77083: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77084: LD_INT 0
77086: PPUSH
77087: PPUSH
77088: PPUSH
77089: PPUSH
77090: PPUSH
77091: PPUSH
77092: PPUSH
77093: PPUSH
// if not units then
77094: LD_VAR 0 1
77098: NOT
77099: IFFALSE 77103
// exit ;
77101: GO 77614
// result := UnitFilter ( units , [ f_ok ] ) ;
77103: LD_ADDR_VAR 0 3
77107: PUSH
77108: LD_VAR 0 1
77112: PPUSH
77113: LD_INT 50
77115: PUSH
77116: EMPTY
77117: LIST
77118: PPUSH
77119: CALL_OW 72
77123: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77124: LD_ADDR_VAR 0 8
77128: PUSH
77129: LD_VAR 0 1
77133: PUSH
77134: LD_INT 1
77136: ARRAY
77137: PPUSH
77138: CALL_OW 255
77142: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
77143: LD_ADDR_VAR 0 10
77147: PUSH
77148: LD_INT 29
77150: PUSH
77151: LD_EXP 66
77155: PUSH
77156: LD_INT 49
77158: PUSH
77159: EMPTY
77160: LIST
77161: LIST
77162: LIST
77163: ST_TO_ADDR
// if not result then
77164: LD_VAR 0 3
77168: NOT
77169: IFFALSE 77173
// exit ;
77171: GO 77614
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77173: LD_ADDR_VAR 0 5
77177: PUSH
77178: LD_INT 81
77180: PUSH
77181: LD_VAR 0 8
77185: PUSH
77186: EMPTY
77187: LIST
77188: LIST
77189: PPUSH
77190: CALL_OW 69
77194: ST_TO_ADDR
// for i in result do
77195: LD_ADDR_VAR 0 4
77199: PUSH
77200: LD_VAR 0 3
77204: PUSH
77205: FOR_IN
77206: IFFALSE 77612
// begin tag := GetTag ( i ) + 1 ;
77208: LD_ADDR_VAR 0 9
77212: PUSH
77213: LD_VAR 0 4
77217: PPUSH
77218: CALL_OW 110
77222: PUSH
77223: LD_INT 1
77225: PLUS
77226: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77227: LD_ADDR_VAR 0 7
77231: PUSH
77232: LD_VAR 0 4
77236: PPUSH
77237: CALL_OW 250
77241: PPUSH
77242: LD_VAR 0 4
77246: PPUSH
77247: CALL_OW 251
77251: PPUSH
77252: LD_INT 6
77254: PPUSH
77255: CALL 76826 0 3
77259: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77260: LD_VAR 0 7
77264: PUSH
77265: LD_VAR 0 4
77269: PPUSH
77270: CALL_OW 264
77274: PUSH
77275: LD_VAR 0 10
77279: IN
77280: NOT
77281: AND
77282: IFFALSE 77321
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77284: LD_VAR 0 4
77288: PPUSH
77289: LD_VAR 0 7
77293: PUSH
77294: LD_INT 1
77296: ARRAY
77297: PUSH
77298: LD_INT 1
77300: ARRAY
77301: PPUSH
77302: LD_VAR 0 7
77306: PUSH
77307: LD_INT 1
77309: ARRAY
77310: PUSH
77311: LD_INT 2
77313: ARRAY
77314: PPUSH
77315: CALL_OW 116
77319: GO 77610
// if path > tag then
77321: LD_VAR 0 2
77325: PUSH
77326: LD_VAR 0 9
77330: GREATER
77331: IFFALSE 77539
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
77333: LD_ADDR_VAR 0 6
77337: PUSH
77338: LD_VAR 0 5
77342: PPUSH
77343: LD_INT 91
77345: PUSH
77346: LD_VAR 0 4
77350: PUSH
77351: LD_INT 12
77353: PUSH
77354: EMPTY
77355: LIST
77356: LIST
77357: LIST
77358: PPUSH
77359: CALL_OW 72
77363: ST_TO_ADDR
// if nearEnemy then
77364: LD_VAR 0 6
77368: IFFALSE 77437
// begin if GetWeapon ( i ) = ru_time_lapser then
77370: LD_VAR 0 4
77374: PPUSH
77375: CALL_OW 264
77379: PUSH
77380: LD_INT 49
77382: EQUAL
77383: IFFALSE 77411
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77385: LD_VAR 0 4
77389: PPUSH
77390: LD_VAR 0 6
77394: PPUSH
77395: LD_VAR 0 4
77399: PPUSH
77400: CALL_OW 74
77404: PPUSH
77405: CALL_OW 112
77409: GO 77435
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77411: LD_VAR 0 4
77415: PPUSH
77416: LD_VAR 0 6
77420: PPUSH
77421: LD_VAR 0 4
77425: PPUSH
77426: CALL_OW 74
77430: PPUSH
77431: CALL_OW 115
// end else
77435: GO 77537
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77437: LD_VAR 0 4
77441: PPUSH
77442: LD_VAR 0 2
77446: PUSH
77447: LD_VAR 0 9
77451: ARRAY
77452: PUSH
77453: LD_INT 1
77455: ARRAY
77456: PPUSH
77457: LD_VAR 0 2
77461: PUSH
77462: LD_VAR 0 9
77466: ARRAY
77467: PUSH
77468: LD_INT 2
77470: ARRAY
77471: PPUSH
77472: CALL_OW 297
77476: PUSH
77477: LD_INT 6
77479: GREATER
77480: IFFALSE 77523
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77482: LD_VAR 0 4
77486: PPUSH
77487: LD_VAR 0 2
77491: PUSH
77492: LD_VAR 0 9
77496: ARRAY
77497: PUSH
77498: LD_INT 1
77500: ARRAY
77501: PPUSH
77502: LD_VAR 0 2
77506: PUSH
77507: LD_VAR 0 9
77511: ARRAY
77512: PUSH
77513: LD_INT 2
77515: ARRAY
77516: PPUSH
77517: CALL_OW 114
77521: GO 77537
// SetTag ( i , tag ) ;
77523: LD_VAR 0 4
77527: PPUSH
77528: LD_VAR 0 9
77532: PPUSH
77533: CALL_OW 109
// end else
77537: GO 77610
// if enemy then
77539: LD_VAR 0 5
77543: IFFALSE 77610
// begin if GetWeapon ( i ) = ru_time_lapser then
77545: LD_VAR 0 4
77549: PPUSH
77550: CALL_OW 264
77554: PUSH
77555: LD_INT 49
77557: EQUAL
77558: IFFALSE 77586
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77560: LD_VAR 0 4
77564: PPUSH
77565: LD_VAR 0 5
77569: PPUSH
77570: LD_VAR 0 4
77574: PPUSH
77575: CALL_OW 74
77579: PPUSH
77580: CALL_OW 112
77584: GO 77610
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77586: LD_VAR 0 4
77590: PPUSH
77591: LD_VAR 0 5
77595: PPUSH
77596: LD_VAR 0 4
77600: PPUSH
77601: CALL_OW 74
77605: PPUSH
77606: CALL_OW 115
// end ; end ;
77610: GO 77205
77612: POP
77613: POP
// end ;
77614: LD_VAR 0 3
77618: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77619: LD_INT 0
77621: PPUSH
77622: PPUSH
77623: PPUSH
// if not unit or IsInUnit ( unit ) then
77624: LD_VAR 0 1
77628: NOT
77629: PUSH
77630: LD_VAR 0 1
77634: PPUSH
77635: CALL_OW 310
77639: OR
77640: IFFALSE 77644
// exit ;
77642: GO 77735
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77644: LD_ADDR_VAR 0 4
77648: PUSH
77649: LD_VAR 0 1
77653: PPUSH
77654: CALL_OW 250
77658: PPUSH
77659: LD_VAR 0 2
77663: PPUSH
77664: LD_INT 1
77666: PPUSH
77667: CALL_OW 272
77671: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77672: LD_ADDR_VAR 0 5
77676: PUSH
77677: LD_VAR 0 1
77681: PPUSH
77682: CALL_OW 251
77686: PPUSH
77687: LD_VAR 0 2
77691: PPUSH
77692: LD_INT 1
77694: PPUSH
77695: CALL_OW 273
77699: ST_TO_ADDR
// if ValidHex ( x , y ) then
77700: LD_VAR 0 4
77704: PPUSH
77705: LD_VAR 0 5
77709: PPUSH
77710: CALL_OW 488
77714: IFFALSE 77735
// ComTurnXY ( unit , x , y ) ;
77716: LD_VAR 0 1
77720: PPUSH
77721: LD_VAR 0 4
77725: PPUSH
77726: LD_VAR 0 5
77730: PPUSH
77731: CALL_OW 118
// end ;
77735: LD_VAR 0 3
77739: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77740: LD_INT 0
77742: PPUSH
77743: PPUSH
// result := false ;
77744: LD_ADDR_VAR 0 3
77748: PUSH
77749: LD_INT 0
77751: ST_TO_ADDR
// if not units then
77752: LD_VAR 0 2
77756: NOT
77757: IFFALSE 77761
// exit ;
77759: GO 77806
// for i in units do
77761: LD_ADDR_VAR 0 4
77765: PUSH
77766: LD_VAR 0 2
77770: PUSH
77771: FOR_IN
77772: IFFALSE 77804
// if See ( side , i ) then
77774: LD_VAR 0 1
77778: PPUSH
77779: LD_VAR 0 4
77783: PPUSH
77784: CALL_OW 292
77788: IFFALSE 77802
// begin result := true ;
77790: LD_ADDR_VAR 0 3
77794: PUSH
77795: LD_INT 1
77797: ST_TO_ADDR
// exit ;
77798: POP
77799: POP
77800: GO 77806
// end ;
77802: GO 77771
77804: POP
77805: POP
// end ;
77806: LD_VAR 0 3
77810: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77811: LD_INT 0
77813: PPUSH
77814: PPUSH
77815: PPUSH
77816: PPUSH
// if not unit or not points then
77817: LD_VAR 0 1
77821: NOT
77822: PUSH
77823: LD_VAR 0 2
77827: NOT
77828: OR
77829: IFFALSE 77833
// exit ;
77831: GO 77923
// dist := 99999 ;
77833: LD_ADDR_VAR 0 5
77837: PUSH
77838: LD_INT 99999
77840: ST_TO_ADDR
// for i in points do
77841: LD_ADDR_VAR 0 4
77845: PUSH
77846: LD_VAR 0 2
77850: PUSH
77851: FOR_IN
77852: IFFALSE 77921
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77854: LD_ADDR_VAR 0 6
77858: PUSH
77859: LD_VAR 0 1
77863: PPUSH
77864: LD_VAR 0 4
77868: PUSH
77869: LD_INT 1
77871: ARRAY
77872: PPUSH
77873: LD_VAR 0 4
77877: PUSH
77878: LD_INT 2
77880: ARRAY
77881: PPUSH
77882: CALL_OW 297
77886: ST_TO_ADDR
// if tmpDist < dist then
77887: LD_VAR 0 6
77891: PUSH
77892: LD_VAR 0 5
77896: LESS
77897: IFFALSE 77919
// begin result := i ;
77899: LD_ADDR_VAR 0 3
77903: PUSH
77904: LD_VAR 0 4
77908: ST_TO_ADDR
// dist := tmpDist ;
77909: LD_ADDR_VAR 0 5
77913: PUSH
77914: LD_VAR 0 6
77918: ST_TO_ADDR
// end ; end ;
77919: GO 77851
77921: POP
77922: POP
// end ;
77923: LD_VAR 0 3
77927: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77928: LD_INT 0
77930: PPUSH
// uc_side := side ;
77931: LD_ADDR_OWVAR 20
77935: PUSH
77936: LD_VAR 0 1
77940: ST_TO_ADDR
// uc_nation := 3 ;
77941: LD_ADDR_OWVAR 21
77945: PUSH
77946: LD_INT 3
77948: ST_TO_ADDR
// vc_chassis := 25 ;
77949: LD_ADDR_OWVAR 37
77953: PUSH
77954: LD_INT 25
77956: ST_TO_ADDR
// vc_engine := engine_siberite ;
77957: LD_ADDR_OWVAR 39
77961: PUSH
77962: LD_INT 3
77964: ST_TO_ADDR
// vc_control := control_computer ;
77965: LD_ADDR_OWVAR 38
77969: PUSH
77970: LD_INT 3
77972: ST_TO_ADDR
// vc_weapon := 59 ;
77973: LD_ADDR_OWVAR 40
77977: PUSH
77978: LD_INT 59
77980: ST_TO_ADDR
// result := CreateVehicle ;
77981: LD_ADDR_VAR 0 5
77985: PUSH
77986: CALL_OW 45
77990: ST_TO_ADDR
// SetDir ( result , d ) ;
77991: LD_VAR 0 5
77995: PPUSH
77996: LD_VAR 0 4
78000: PPUSH
78001: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78005: LD_VAR 0 5
78009: PPUSH
78010: LD_VAR 0 2
78014: PPUSH
78015: LD_VAR 0 3
78019: PPUSH
78020: LD_INT 0
78022: PPUSH
78023: CALL_OW 48
// end ;
78027: LD_VAR 0 5
78031: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78032: LD_INT 0
78034: PPUSH
78035: PPUSH
78036: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78037: LD_ADDR_VAR 0 2
78041: PUSH
78042: LD_INT 0
78044: PUSH
78045: LD_INT 0
78047: PUSH
78048: LD_INT 0
78050: PUSH
78051: LD_INT 0
78053: PUSH
78054: EMPTY
78055: LIST
78056: LIST
78057: LIST
78058: LIST
78059: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78060: LD_VAR 0 1
78064: NOT
78065: PUSH
78066: LD_VAR 0 1
78070: PPUSH
78071: CALL_OW 264
78075: PUSH
78076: LD_INT 12
78078: PUSH
78079: LD_INT 51
78081: PUSH
78082: LD_INT 32
78084: PUSH
78085: LD_EXP 63
78089: PUSH
78090: EMPTY
78091: LIST
78092: LIST
78093: LIST
78094: LIST
78095: IN
78096: NOT
78097: OR
78098: IFFALSE 78102
// exit ;
78100: GO 78200
// for i := 1 to 3 do
78102: LD_ADDR_VAR 0 3
78106: PUSH
78107: DOUBLE
78108: LD_INT 1
78110: DEC
78111: ST_TO_ADDR
78112: LD_INT 3
78114: PUSH
78115: FOR_TO
78116: IFFALSE 78198
// begin tmp := GetCargo ( cargo , i ) ;
78118: LD_ADDR_VAR 0 4
78122: PUSH
78123: LD_VAR 0 1
78127: PPUSH
78128: LD_VAR 0 3
78132: PPUSH
78133: CALL_OW 289
78137: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
78138: LD_ADDR_VAR 0 2
78142: PUSH
78143: LD_VAR 0 2
78147: PPUSH
78148: LD_VAR 0 3
78152: PPUSH
78153: LD_VAR 0 4
78157: PPUSH
78158: CALL_OW 1
78162: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
78163: LD_ADDR_VAR 0 2
78167: PUSH
78168: LD_VAR 0 2
78172: PPUSH
78173: LD_INT 4
78175: PPUSH
78176: LD_VAR 0 2
78180: PUSH
78181: LD_INT 4
78183: ARRAY
78184: PUSH
78185: LD_VAR 0 4
78189: PLUS
78190: PPUSH
78191: CALL_OW 1
78195: ST_TO_ADDR
// end ;
78196: GO 78115
78198: POP
78199: POP
// end ; end_of_file
78200: LD_VAR 0 2
78204: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78205: LD_VAR 0 1
78209: PUSH
78210: LD_INT 200
78212: DOUBLE
78213: GREATEREQUAL
78214: IFFALSE 78222
78216: LD_INT 299
78218: DOUBLE
78219: LESSEQUAL
78220: IFTRUE 78224
78222: GO 78256
78224: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78225: LD_VAR 0 1
78229: PPUSH
78230: LD_VAR 0 2
78234: PPUSH
78235: LD_VAR 0 3
78239: PPUSH
78240: LD_VAR 0 4
78244: PPUSH
78245: LD_VAR 0 5
78249: PPUSH
78250: CALL 33545 0 5
78254: GO 78333
78256: LD_INT 300
78258: DOUBLE
78259: GREATEREQUAL
78260: IFFALSE 78268
78262: LD_INT 399
78264: DOUBLE
78265: LESSEQUAL
78266: IFTRUE 78270
78268: GO 78332
78270: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78271: LD_VAR 0 1
78275: PPUSH
78276: LD_VAR 0 2
78280: PPUSH
78281: LD_VAR 0 3
78285: PPUSH
78286: LD_VAR 0 4
78290: PPUSH
78291: LD_VAR 0 5
78295: PPUSH
78296: LD_VAR 0 6
78300: PPUSH
78301: LD_VAR 0 7
78305: PPUSH
78306: LD_VAR 0 8
78310: PPUSH
78311: LD_VAR 0 9
78315: PPUSH
78316: LD_VAR 0 10
78320: PPUSH
78321: LD_VAR 0 11
78325: PPUSH
78326: CALL 31187 0 11
78330: GO 78333
78332: POP
// end ;
78333: PPOPN 11
78335: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78336: LD_VAR 0 1
78340: PPUSH
78341: LD_VAR 0 2
78345: PPUSH
78346: LD_VAR 0 3
78350: PPUSH
78351: LD_VAR 0 4
78355: PPUSH
78356: LD_VAR 0 5
78360: PPUSH
78361: CALL 33281 0 5
// end ; end_of_file
78365: PPOPN 5
78367: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78368: LD_VAR 0 1
78372: PPUSH
78373: LD_VAR 0 2
78377: PPUSH
78378: LD_VAR 0 3
78382: PPUSH
78383: LD_VAR 0 4
78387: PPUSH
78388: LD_VAR 0 5
78392: PPUSH
78393: LD_VAR 0 6
78397: PPUSH
78398: CALL 18880 0 6
// end ;
78402: PPOPN 6
78404: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78405: CALL 18855 0 0
// end ;
78409: PPOPN 1
78411: END
