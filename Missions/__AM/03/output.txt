// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3454 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2668 0 0
// PrepareWesternBase ;
  41: CALL 2897 0 0
// Action ;
  45: CALL 5785 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty , vcount , tmpv ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
// uc_side := 4 ;
1157: LD_ADDR_OWVAR 20
1161: PUSH
1162: LD_INT 4
1164: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1165: LD_ADDR_EXP 46
1169: PUSH
1170: LD_STRING Powell
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: LD_STRING 
1178: PPUSH
1179: CALL 39251 0 3
1183: ST_TO_ADDR
// uc_side := 1 ;
1184: LD_ADDR_OWVAR 20
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// uc_nation := 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// if debug then
1200: LD_EXP 1
1204: IFFALSE 1550
// begin for i = 1 to 4 do
1206: LD_ADDR_VAR 0 2
1210: PUSH
1211: DOUBLE
1212: LD_INT 1
1214: DEC
1215: ST_TO_ADDR
1216: LD_INT 4
1218: PUSH
1219: FOR_TO
1220: IFFALSE 1271
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1222: LD_INT 0
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_INT 2
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL_OW 380
// un := CreateHuman ;
1243: LD_ADDR_VAR 0 3
1247: PUSH
1248: CALL_OW 44
1252: ST_TO_ADDR
// others := others ^ un ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_VAR 0 5
1262: PUSH
1263: LD_VAR 0 3
1267: ADD
1268: ST_TO_ADDR
// end ;
1269: GO 1219
1271: POP
1272: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1273: LD_ADDR_VAR 0 6
1277: PUSH
1278: LD_INT 21
1280: PUSH
1281: LD_INT 1
1283: PUSH
1284: LD_INT 1
1286: PUSH
1287: LD_INT 42
1289: PUSH
1290: LD_INT 0
1292: PUSH
1293: LD_INT 750
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 21
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 42
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 750
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: PUSH
1330: LD_INT 21
1332: PUSH
1333: LD_INT 1
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: LD_INT 42
1341: PUSH
1342: LD_INT 0
1344: PUSH
1345: LD_INT 750
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 42
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 750
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 21
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 44
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: LD_INT 750
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 21
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: LD_INT 43
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 750
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 21
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: LD_INT 43
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 750
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 21
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 43
1471: PUSH
1472: LD_INT 0
1474: PUSH
1475: LD_INT 750
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 21
1488: PUSH
1489: LD_INT 1
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: LD_INT 90
1500: PUSH
1501: LD_INT 504
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 51
1523: PUSH
1524: LD_INT 80
1526: PUSH
1527: LD_INT 750
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1550: LD_ADDR_EXP 37
1554: PUSH
1555: LD_STRING JMM
1557: PPUSH
1558: LD_EXP 1
1562: NOT
1563: PPUSH
1564: LD_EXP 3
1568: PPUSH
1569: CALL 39251 0 3
1573: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1574: LD_ADDR_EXP 38
1578: PUSH
1579: LD_STRING Bobby
1581: PPUSH
1582: LD_EXP 1
1586: NOT
1587: PPUSH
1588: LD_EXP 3
1592: PPUSH
1593: CALL 39251 0 3
1597: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1598: LD_ADDR_EXP 39
1602: PUSH
1603: LD_STRING Cyrus
1605: PPUSH
1606: LD_EXP 1
1610: NOT
1611: PPUSH
1612: LD_EXP 3
1616: PPUSH
1617: CALL 39251 0 3
1621: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1622: LD_ADDR_EXP 40
1626: PUSH
1627: LD_STRING Lisa
1629: PPUSH
1630: LD_EXP 1
1634: NOT
1635: PPUSH
1636: LD_EXP 3
1640: PPUSH
1641: CALL 39251 0 3
1645: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1646: LD_ADDR_EXP 41
1650: PUSH
1651: LD_STRING Khatam
1653: PPUSH
1654: LD_EXP 1
1658: NOT
1659: PPUSH
1660: LD_EXP 3
1664: PPUSH
1665: CALL 39251 0 3
1669: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1670: LD_ADDR_EXP 42
1674: PUSH
1675: LD_STRING Brian
1677: PPUSH
1678: LD_EXP 1
1682: NOT
1683: PPUSH
1684: LD_EXP 3
1688: PPUSH
1689: CALL 39251 0 3
1693: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1694: LD_ADDR_EXP 43
1698: PUSH
1699: LD_STRING Jerry
1701: PPUSH
1702: LD_EXP 1
1706: NOT
1707: PPUSH
1708: LD_EXP 3
1712: PPUSH
1713: CALL 39251 0 3
1717: ST_TO_ADDR
// if Bobby then
1718: LD_EXP 38
1722: IFFALSE 1753
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1724: LD_ADDR_VAR 0 4
1728: PUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: LD_VAR 0 4
1738: PUSH
1739: LD_INT 1
1741: PLUS
1742: PPUSH
1743: LD_EXP 38
1747: PPUSH
1748: CALL_OW 2
1752: ST_TO_ADDR
// if Cyrus then
1753: LD_EXP 39
1757: IFFALSE 1788
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_VAR 0 4
1773: PUSH
1774: LD_INT 1
1776: PLUS
1777: PPUSH
1778: LD_EXP 39
1782: PPUSH
1783: CALL_OW 2
1787: ST_TO_ADDR
// if Lisa then
1788: LD_EXP 40
1792: IFFALSE 1823
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: LD_VAR 0 4
1808: PUSH
1809: LD_INT 1
1811: PLUS
1812: PPUSH
1813: LD_EXP 40
1817: PPUSH
1818: CALL_OW 2
1822: ST_TO_ADDR
// if Khatam then
1823: LD_EXP 41
1827: IFFALSE 1858
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1829: LD_ADDR_VAR 0 4
1833: PUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: LD_VAR 0 4
1843: PUSH
1844: LD_INT 1
1846: PLUS
1847: PPUSH
1848: LD_EXP 41
1852: PPUSH
1853: CALL_OW 2
1857: ST_TO_ADDR
// if Brian then
1858: LD_EXP 42
1862: IFFALSE 1893
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1864: LD_ADDR_VAR 0 4
1868: PUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_VAR 0 4
1878: PUSH
1879: LD_INT 1
1881: PLUS
1882: PPUSH
1883: LD_EXP 42
1887: PPUSH
1888: CALL_OW 2
1892: ST_TO_ADDR
// if Jerry then
1893: LD_EXP 43
1897: IFFALSE 1928
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: PLUS
1917: PPUSH
1918: LD_EXP 43
1922: PPUSH
1923: CALL_OW 2
1927: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1928: LD_STRING 02_other_survivors
1930: PPUSH
1931: CALL_OW 28
1935: IFFALSE 1950
// others := CreateCharacterSet ( 02_other_survivors ) ;
1937: LD_ADDR_VAR 0 5
1941: PUSH
1942: LD_STRING 02_other_survivors
1944: PPUSH
1945: CALL_OW 31
1949: ST_TO_ADDR
// if others then
1950: LD_VAR 0 5
1954: IFFALSE 1979
// begin tmp := tmp ^ others ;
1956: LD_ADDR_VAR 0 4
1960: PUSH
1961: LD_VAR 0 4
1965: PUSH
1966: LD_VAR 0 5
1970: ADD
1971: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1972: LD_STRING 02_other_survivors
1974: PPUSH
1975: CALL_OW 40
// end ; jmm_units := tmp diff 0 ;
1979: LD_ADDR_EXP 4
1983: PUSH
1984: LD_VAR 0 4
1988: PUSH
1989: LD_INT 0
1991: DIFF
1992: ST_TO_ADDR
// if not vehicles then
1993: LD_VAR 0 6
1997: NOT
1998: IFFALSE 2015
// vehicles := LoadVariable ( 02_tanks_1 , [ ] ) ;
2000: LD_ADDR_VAR 0 6
2004: PUSH
2005: LD_STRING 02_tanks_1
2007: PPUSH
2008: EMPTY
2009: PPUSH
2010: CALL_OW 30
2014: ST_TO_ADDR
// if vehicles then
2015: LD_VAR 0 6
2019: IFFALSE 2387
// begin got_mech := false ;
2021: LD_ADDR_VAR 0 7
2025: PUSH
2026: LD_INT 0
2028: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
2029: LD_VAR 0 4
2033: PPUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 3
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 72
2048: IFFALSE 2058
// got_mech := true ;
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// vcount := Count ( vehicles ) ;
2058: LD_ADDR_VAR 0 9
2062: PUSH
2063: LD_VAR 0 6
2067: PPUSH
2068: CALL 41353 0 1
2072: ST_TO_ADDR
// if vcount > 1 then
2073: LD_VAR 0 9
2077: PUSH
2078: LD_INT 1
2080: GREATER
2081: IFFALSE 2184
// begin for i := 2 to vcount do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 2
2091: DEC
2092: ST_TO_ADDR
2093: LD_VAR 0 9
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2182
// if vehicles [ i ] [ 4 ] = ru_cargo_bay then
2101: LD_VAR 0 6
2105: PUSH
2106: LD_VAR 0 2
2110: ARRAY
2111: PUSH
2112: LD_INT 4
2114: ARRAY
2115: PUSH
2116: LD_INT 51
2118: EQUAL
2119: IFFALSE 2180
// begin tmpv := vehicles [ i ] ;
2121: LD_ADDR_VAR 0 10
2125: PUSH
2126: LD_VAR 0 6
2130: PUSH
2131: LD_VAR 0 2
2135: ARRAY
2136: ST_TO_ADDR
// vehicles := Delete ( vehicles , i ) ;
2137: LD_ADDR_VAR 0 6
2141: PUSH
2142: LD_VAR 0 6
2146: PPUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 3
2156: ST_TO_ADDR
// vehicles := Insert ( vehicles , 1 , tmpv ) ;
2157: LD_ADDR_VAR 0 6
2161: PUSH
2162: LD_VAR 0 6
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_VAR 0 10
2174: PPUSH
2175: CALL_OW 2
2179: ST_TO_ADDR
// end ;
2180: GO 2098
2182: POP
2183: POP
// end ; if vcount > 6 then
2184: LD_VAR 0 9
2188: PUSH
2189: LD_INT 6
2191: GREATER
2192: IFFALSE 2202
// vcount := 6 ;
2194: LD_ADDR_VAR 0 9
2198: PUSH
2199: LD_INT 6
2201: ST_TO_ADDR
// if jmm_units + 1 < vcount then
2202: LD_EXP 4
2206: PUSH
2207: LD_INT 1
2209: PLUS
2210: PUSH
2211: LD_VAR 0 9
2215: LESS
2216: IFFALSE 2232
// vcount := jmm_units + 1 ;
2218: LD_ADDR_VAR 0 9
2222: PUSH
2223: LD_EXP 4
2227: PUSH
2228: LD_INT 1
2230: PLUS
2231: ST_TO_ADDR
// for i := 1 to vcount do
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: DOUBLE
2238: LD_INT 1
2240: DEC
2241: ST_TO_ADDR
2242: LD_VAR 0 9
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2385
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 3
2260: PPUSH
2261: LD_VAR 0 6
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: LD_VAR 0 6
2280: PUSH
2281: LD_VAR 0 2
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_VAR 0 6
2295: PUSH
2296: LD_VAR 0 2
2300: ARRAY
2301: PUSH
2302: LD_INT 3
2304: ARRAY
2305: PPUSH
2306: LD_VAR 0 6
2310: PUSH
2311: LD_VAR 0 2
2315: ARRAY
2316: PUSH
2317: LD_INT 4
2319: ARRAY
2320: PPUSH
2321: LD_INT 40
2323: PPUSH
2324: CALL 497 0 7
2328: ST_TO_ADDR
// if not got_mech then
2329: LD_VAR 0 7
2333: NOT
2334: IFFALSE 2360
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_VAR 0 6
2345: PUSH
2346: LD_VAR 0 2
2350: ARRAY
2351: PUSH
2352: LD_INT 6
2354: ARRAY
2355: PPUSH
2356: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: LD_VAR 0 3
2377: PPUSH
2378: CALL_OW 2
2382: ST_TO_ADDR
// end ;
2383: GO 2247
2385: POP
2386: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
2387: LD_EXP 37
2391: PPUSH
2392: LD_INT 194
2394: PPUSH
2395: LD_INT 119
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 48
// if tmp then
2405: LD_VAR 0 4
2409: IFFALSE 2597
// begin for i in tmp do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_VAR 0 4
2420: PUSH
2421: FOR_IN
2422: IFFALSE 2595
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL_OW 257
2433: PUSH
2434: LD_INT 1
2436: NONEQUAL
2437: PUSH
2438: LD_VAR 0 2
2442: PUSH
2443: LD_EXP 41
2447: NONEQUAL
2448: AND
2449: IFFALSE 2463
// SetClass ( i , 1 ) ;
2451: LD_VAR 0 2
2455: PPUSH
2456: LD_INT 1
2458: PPUSH
2459: CALL_OW 336
// if i = Khatam then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_EXP 41
2472: EQUAL
2473: IFFALSE 2487
// SetClass ( i , 4 ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 4
2482: PPUSH
2483: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2487: LD_ADDR_VAR 0 8
2491: PUSH
2492: LD_INT 22
2494: PUSH
2495: LD_INT 1
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 21
2504: PUSH
2505: LD_INT 2
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 58
2514: PUSH
2515: EMPTY
2516: LIST
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2528: LD_VAR 0 2
2532: PPUSH
2533: CALL_OW 247
2537: PUSH
2538: LD_INT 1
2540: EQUAL
2541: PUSH
2542: LD_VAR 0 8
2546: AND
2547: IFFALSE 2569
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2549: LD_VAR 0 2
2553: PPUSH
2554: LD_VAR 0 8
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PPUSH
2563: CALL_OW 52
2567: GO 2584
// PlaceUnitArea ( i , startArea , false ) ;
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 0
2579: PPUSH
2580: CALL_OW 49
// ComHold ( i ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: CALL_OW 140
// end ;
2593: GO 2421
2595: POP
2596: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2597: LD_ADDR_EXP 7
2601: PUSH
2602: LD_STRING 02_mikhailStatus_1
2604: PPUSH
2605: LD_INT 0
2607: PPUSH
2608: CALL_OW 30
2612: ST_TO_ADDR
// if not bierezov_exist and not debug then
2613: LD_EXP 7
2617: NOT
2618: PUSH
2619: LD_EXP 1
2623: NOT
2624: AND
2625: IFFALSE 2629
// exit ;
2627: GO 2663
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2629: LD_ADDR_EXP 45
2633: PUSH
2634: LD_STRING Mikhail
2636: PPUSH
2637: LD_INT 0
2639: PPUSH
2640: LD_STRING 
2642: PPUSH
2643: CALL 39251 0 3
2647: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2648: LD_EXP 45
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 49
// end ;
2663: LD_VAR 0 1
2667: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
2673: PPUSH
// uc_side := 4 ;
2674: LD_ADDR_OWVAR 20
2678: PUSH
2679: LD_INT 4
2681: ST_TO_ADDR
// uc_nation := 1 ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 1
2689: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2690: LD_ADDR_EXP 44
2694: PUSH
2695: LD_STRING Cornell
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: LD_STRING 
2703: PPUSH
2704: CALL 39251 0 3
2708: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2709: LD_ADDR_EXP 6
2713: PUSH
2714: LD_INT 9
2716: PUSH
2717: LD_EXP 4
2721: MINUS
2722: ST_TO_ADDR
// tmp := [ ] ;
2723: LD_ADDR_VAR 0 2
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// if cornel_units < 4 then
2730: LD_EXP 6
2734: PUSH
2735: LD_INT 4
2737: LESS
2738: IFFALSE 2748
// cornel_units := 4 ;
2740: LD_ADDR_EXP 6
2744: PUSH
2745: LD_INT 4
2747: ST_TO_ADDR
// for i = 1 to cornel_units do
2748: LD_ADDR_VAR 0 4
2752: PUSH
2753: DOUBLE
2754: LD_INT 1
2756: DEC
2757: ST_TO_ADDR
2758: LD_EXP 6
2762: PUSH
2763: FOR_TO
2764: IFFALSE 2862
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2766: LD_INT 0
2768: PPUSH
2769: LD_INT 1
2771: PUSH
2772: LD_INT 1
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: LD_INT 4
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: PUSH
2791: LD_VAR 0 4
2795: PUSH
2796: LD_INT 5
2798: MOD
2799: PUSH
2800: LD_INT 1
2802: PLUS
2803: ARRAY
2804: PPUSH
2805: LD_INT 2
2807: PPUSH
2808: CALL_OW 380
// un := CreateHuman ;
2812: LD_ADDR_VAR 0 3
2816: PUSH
2817: CALL_OW 44
2821: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2822: LD_ADDR_VAR 0 2
2826: PUSH
2827: LD_VAR 0 2
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: LD_VAR 0 3
2839: PPUSH
2840: CALL_OW 2
2844: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2845: LD_VAR 0 3
2849: PPUSH
2850: LD_INT 2
2852: PPUSH
2853: LD_INT 0
2855: PPUSH
2856: CALL_OW 49
// end ;
2860: GO 2763
2862: POP
2863: POP
// cornel_units := tmp ;
2864: LD_ADDR_EXP 6
2868: PUSH
2869: LD_VAR 0 2
2873: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2874: LD_EXP 44
2878: PPUSH
2879: LD_INT 191
2881: PPUSH
2882: LD_INT 106
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 48
// end ;
2892: LD_VAR 0 1
2896: RET
// export function PrepareWesternBase ; var i ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
// uc_side := 8 ;
2901: LD_ADDR_OWVAR 20
2905: PUSH
2906: LD_INT 8
2908: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2909: LD_ADDR_EXP 47
2913: PUSH
2914: LD_STRING Lynch
2916: PPUSH
2917: LD_INT 0
2919: PPUSH
2920: LD_STRING 
2922: PPUSH
2923: CALL 39251 0 3
2927: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2928: LD_ADDR_EXP 48
2932: PUSH
2933: LD_STRING Walker
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: LD_STRING 
2941: PPUSH
2942: CALL 39251 0 3
2946: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2947: LD_ADDR_EXP 49
2951: PUSH
2952: LD_STRING Turner
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: LD_STRING 
2960: PPUSH
2961: CALL 39251 0 3
2965: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2966: LD_ADDR_EXP 50
2970: PUSH
2971: LD_STRING Jillian
2973: PPUSH
2974: LD_INT 0
2976: PPUSH
2977: LD_STRING 
2979: PPUSH
2980: CALL 39251 0 3
2984: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: LD_EXP 47
2994: PUSH
2995: LD_EXP 48
2999: PUSH
3000: LD_EXP 49
3004: PUSH
3005: LD_EXP 50
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: FOR_IN
3017: IFFALSE 3045
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 3
3026: PPUSH
3027: LD_INT 0
3029: PPUSH
3030: CALL_OW 49
// ComHold ( i ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: CALL_OW 140
// end ;
3043: GO 3016
3045: POP
3046: POP
// end ;
3047: LD_VAR 0 1
3051: RET
// export function SelectGroup ; var units , selected , i ; begin
3052: LD_INT 0
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
3058: LD_ADDR_VAR 0 2
3062: PUSH
3063: LD_EXP 37
3067: PUSH
3068: LD_INT -3
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: LD_EXP 4
3079: ADD
3080: PUSH
3081: LD_INT -2
3083: PUSH
3084: LD_INT -4
3086: PUSH
3087: LD_EXP 44
3091: PUSH
3092: LD_EXP 45
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: ADD
3103: PUSH
3104: LD_INT -3
3106: PUSH
3107: EMPTY
3108: LIST
3109: ADD
3110: PUSH
3111: LD_EXP 6
3115: ADD
3116: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
3117: LD_ADDR_VAR 0 3
3121: PUSH
3122: LD_EXP 37
3126: PUSH
3127: LD_STRING Select four characters to go with you
3129: PPUSH
3130: LD_INT 4
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: LD_VAR 0 2
3140: PPUSH
3141: EMPTY
3142: PPUSH
3143: CALL_OW 42
3147: ADD
3148: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
3149: LD_ADDR_EXP 6
3153: PUSH
3154: LD_EXP 4
3158: PUSH
3159: LD_EXP 6
3163: UNION
3164: PUSH
3165: LD_VAR 0 3
3169: DIFF
3170: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
3171: LD_ADDR_VAR 0 4
3175: PUSH
3176: LD_EXP 6
3180: PUSH
3181: LD_EXP 45
3185: ADD
3186: PUSH
3187: FOR_IN
3188: IFFALSE 3219
// if GetSide ( i ) = 1 then
3190: LD_VAR 0 4
3194: PPUSH
3195: CALL_OW 255
3199: PUSH
3200: LD_INT 1
3202: EQUAL
3203: IFFALSE 3217
// SetSide ( i , 4 ) ;
3205: LD_VAR 0 4
3209: PPUSH
3210: LD_INT 4
3212: PPUSH
3213: CALL_OW 235
3217: GO 3187
3219: POP
3220: POP
// for i in selected do
3221: LD_ADDR_VAR 0 4
3225: PUSH
3226: LD_VAR 0 3
3230: PUSH
3231: FOR_IN
3232: IFFALSE 3263
// if GetSide ( i ) = 4 then
3234: LD_VAR 0 4
3238: PPUSH
3239: CALL_OW 255
3243: PUSH
3244: LD_INT 4
3246: EQUAL
3247: IFFALSE 3261
// SetSide ( i , 1 ) ;
3249: LD_VAR 0 4
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: CALL_OW 235
3261: GO 3231
3263: POP
3264: POP
// jmm_units := jmm_units diff cornel_units ;
3265: LD_ADDR_EXP 4
3269: PUSH
3270: LD_EXP 4
3274: PUSH
3275: LD_EXP 6
3279: DIFF
3280: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
3281: LD_EXP 38
3285: PPUSH
3286: CALL_OW 255
3290: PUSH
3291: LD_INT 4
3293: EQUAL
3294: IFFALSE 3309
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
3296: LD_EXP 3
3300: PUSH
3301: LD_STRING Bobby
3303: STR
3304: PPUSH
3305: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
3309: LD_EXP 39
3313: PPUSH
3314: CALL_OW 255
3318: PUSH
3319: LD_INT 4
3321: EQUAL
3322: IFFALSE 3337
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
3324: LD_EXP 3
3328: PUSH
3329: LD_STRING Cyrus
3331: STR
3332: PPUSH
3333: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
3337: LD_EXP 40
3341: PPUSH
3342: CALL_OW 255
3346: PUSH
3347: LD_INT 4
3349: EQUAL
3350: IFFALSE 3365
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
3352: LD_EXP 3
3356: PUSH
3357: LD_STRING Lisa
3359: STR
3360: PPUSH
3361: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
3365: LD_EXP 41
3369: PPUSH
3370: CALL_OW 255
3374: PUSH
3375: LD_INT 4
3377: EQUAL
3378: IFFALSE 3393
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
3380: LD_EXP 3
3384: PUSH
3385: LD_STRING Khatam
3387: STR
3388: PPUSH
3389: CALL_OW 40
// if GetSide ( Brian ) = 4 then
3393: LD_EXP 42
3397: PPUSH
3398: CALL_OW 255
3402: PUSH
3403: LD_INT 4
3405: EQUAL
3406: IFFALSE 3421
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3408: LD_EXP 3
3412: PUSH
3413: LD_STRING Brian
3415: STR
3416: PPUSH
3417: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3421: LD_EXP 43
3425: PPUSH
3426: CALL_OW 255
3430: PUSH
3431: LD_INT 4
3433: EQUAL
3434: IFFALSE 3449
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3436: LD_EXP 3
3440: PUSH
3441: LD_STRING Jerry
3443: STR
3444: PPUSH
3445: CALL_OW 40
// end ; end_of_file
3449: LD_VAR 0 1
3453: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3454: LD_INT 0
3456: PPUSH
3457: PPUSH
3458: PPUSH
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
// ru_alert := false ;
3469: LD_ADDR_EXP 60
3473: PUSH
3474: LD_INT 0
3476: ST_TO_ADDR
// ru_produce_list := [ ] ;
3477: LD_ADDR_EXP 57
3481: PUSH
3482: EMPTY
3483: ST_TO_ADDR
// if Difficulty > 1 then
3484: LD_OWVAR 67
3488: PUSH
3489: LD_INT 1
3491: GREATER
3492: IFFALSE 3616
// begin uc_side := 3 ;
3494: LD_ADDR_OWVAR 20
3498: PUSH
3499: LD_INT 3
3501: ST_TO_ADDR
// uc_nation := 3 ;
3502: LD_ADDR_OWVAR 21
3506: PUSH
3507: LD_INT 3
3509: ST_TO_ADDR
// bc_type := b_breastwork ;
3510: LD_ADDR_OWVAR 42
3514: PUSH
3515: LD_INT 31
3517: ST_TO_ADDR
// bc_level := Difficulty ;
3518: LD_ADDR_OWVAR 43
3522: PUSH
3523: LD_OWVAR 67
3527: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3528: LD_INT 22
3530: PPUSH
3531: LD_INT 14
3533: PPUSH
3534: LD_INT 0
3536: PPUSH
3537: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3541: LD_INT 48
3543: PPUSH
3544: LD_INT 46
3546: PPUSH
3547: LD_INT 0
3549: PPUSH
3550: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3554: LD_INT 86
3556: PPUSH
3557: LD_INT 65
3559: PPUSH
3560: LD_INT 5
3562: PPUSH
3563: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3567: LD_INT 165
3569: PPUSH
3570: LD_INT 73
3572: PPUSH
3573: LD_INT 5
3575: PPUSH
3576: CALL_OW 47
// if Difficulty > 2 then
3580: LD_OWVAR 67
3584: PUSH
3585: LD_INT 2
3587: GREATER
3588: IFFALSE 3616
// begin CreateAndPlaceBuildingXYD ( 152 , 114 , 4 ) ;
3590: LD_INT 152
3592: PPUSH
3593: LD_INT 114
3595: PPUSH
3596: LD_INT 4
3598: PPUSH
3599: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 157 , 97 , 4 ) ;
3603: LD_INT 157
3605: PPUSH
3606: LD_INT 97
3608: PPUSH
3609: LD_INT 4
3611: PPUSH
3612: CALL_OW 47
// end ; end ; if Difficulty >= 3 then
3616: LD_OWVAR 67
3620: PUSH
3621: LD_INT 3
3623: GREATEREQUAL
3624: IFFALSE 3639
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3626: LD_INT 51
3628: PPUSH
3629: LD_INT 3
3631: PPUSH
3632: LD_INT 2
3634: PPUSH
3635: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3639: LD_ADDR_VAR 0 7
3643: PUSH
3644: LD_INT 22
3646: PUSH
3647: LD_INT 3
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 2
3656: PUSH
3657: LD_INT 30
3659: PUSH
3660: LD_INT 31
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PUSH
3667: LD_INT 30
3669: PUSH
3670: LD_INT 32
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3691: LD_ADDR_VAR 0 8
3695: PUSH
3696: LD_INT 22
3698: PUSH
3699: LD_INT 3
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: LD_INT 30
3708: PUSH
3709: LD_INT 4
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PPUSH
3720: CALL_OW 69
3724: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3725: LD_ADDR_VAR 0 10
3729: PUSH
3730: LD_INT 22
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PUSH
3740: LD_INT 30
3742: PUSH
3743: LD_INT 3
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: PPUSH
3754: CALL_OW 69
3758: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3759: LD_ADDR_VAR 0 9
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 3
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 30
3776: PUSH
3777: LD_INT 6
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PPUSH
3788: CALL_OW 69
3792: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3793: LD_ADDR_VAR 0 2
3797: PUSH
3798: LD_INT 22
3800: PUSH
3801: LD_INT 3
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: LD_INT 30
3810: PUSH
3811: LD_INT 1
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PPUSH
3822: CALL_OW 69
3826: PUSH
3827: FOR_IN
3828: IFFALSE 3872
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3830: LD_VAR 0 2
3834: PPUSH
3835: CALL_OW 274
3839: PPUSH
3840: LD_INT 1
3842: PPUSH
3843: LD_INT 1000
3845: PPUSH
3846: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3850: LD_VAR 0 2
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 2
3862: PPUSH
3863: LD_INT 300
3865: PPUSH
3866: CALL_OW 277
// end ;
3870: GO 3827
3872: POP
3873: POP
// uc_side := 3 ;
3874: LD_ADDR_OWVAR 20
3878: PUSH
3879: LD_INT 3
3881: ST_TO_ADDR
// uc_nation := 3 ;
3882: LD_ADDR_OWVAR 21
3886: PUSH
3887: LD_INT 3
3889: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3890: LD_ADDR_VAR 0 11
3894: PUSH
3895: LD_INT 2
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: LD_INT 4
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: PUSH
3913: LD_OWVAR 67
3917: ARRAY
3918: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3919: LD_ADDR_EXP 52
3923: PUSH
3924: LD_STRING Pokryshkin
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: LD_STRING 
3932: PPUSH
3933: CALL 39251 0 3
3937: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3938: LD_EXP 52
3942: PPUSH
3943: LD_INT 63
3945: PPUSH
3946: LD_INT 21
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3956: LD_EXP 52
3960: PPUSH
3961: CALL_OW 140
// InitHc ;
3965: CALL_OW 19
// for i in fac do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: LD_VAR 0 10
3978: PUSH
3979: FOR_IN
3980: IFFALSE 4033
// begin for j = 1 to 6 do
3982: LD_ADDR_VAR 0 3
3986: PUSH
3987: DOUBLE
3988: LD_INT 1
3990: DEC
3991: ST_TO_ADDR
3992: LD_INT 6
3994: PUSH
3995: FOR_TO
3996: IFFALSE 4029
// begin PrepareHuman ( false , 3 , skill ) ;
3998: LD_INT 0
4000: PPUSH
4001: LD_INT 3
4003: PPUSH
4004: LD_VAR 0 11
4008: PPUSH
4009: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4013: CALL_OW 44
4017: PPUSH
4018: LD_VAR 0 2
4022: PPUSH
4023: CALL_OW 52
// end ;
4027: GO 3995
4029: POP
4030: POP
// end ;
4031: GO 3979
4033: POP
4034: POP
// for i in lab do
4035: LD_ADDR_VAR 0 2
4039: PUSH
4040: LD_VAR 0 9
4044: PUSH
4045: FOR_IN
4046: IFFALSE 4079
// begin PrepareHuman ( false , 4 , skill ) ;
4048: LD_INT 0
4050: PPUSH
4051: LD_INT 4
4053: PPUSH
4054: LD_VAR 0 11
4058: PPUSH
4059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4063: CALL_OW 44
4067: PPUSH
4068: LD_VAR 0 2
4072: PPUSH
4073: CALL_OW 52
// end ;
4077: GO 4045
4079: POP
4080: POP
// for i in tw do
4081: LD_ADDR_VAR 0 2
4085: PUSH
4086: LD_VAR 0 7
4090: PUSH
4091: FOR_IN
4092: IFFALSE 4141
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
4094: LD_VAR 0 2
4098: PPUSH
4099: LD_INT 42
4101: PUSH
4102: LD_INT 43
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 1
4111: PPUSH
4112: LD_INT 2
4114: PPUSH
4115: CALL_OW 12
4119: ARRAY
4120: PPUSH
4121: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
4125: LD_VAR 0 11
4129: PPUSH
4130: LD_VAR 0 2
4134: PPUSH
4135: CALL 775 0 2
// end ;
4139: GO 4091
4141: POP
4142: POP
// for i in bar do
4143: LD_ADDR_VAR 0 2
4147: PUSH
4148: LD_VAR 0 8
4152: PUSH
4153: FOR_IN
4154: IFFALSE 4187
// begin PrepareHuman ( false , 1 , skill ) ;
4156: LD_INT 0
4158: PPUSH
4159: LD_INT 1
4161: PPUSH
4162: LD_VAR 0 11
4166: PPUSH
4167: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4171: CALL_OW 44
4175: PPUSH
4176: LD_VAR 0 2
4180: PPUSH
4181: CALL_OW 52
// end ;
4185: GO 4153
4187: POP
4188: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
4189: LD_ADDR_VAR 0 13
4193: PUSH
4194: LD_INT 100
4196: PUSH
4197: LD_INT 9
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 135
4206: PUSH
4207: LD_INT 60
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: LD_INT 41
4216: PUSH
4217: LD_INT 6
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: LD_INT 22
4226: PUSH
4227: LD_INT 9
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PUSH
4234: LD_INT 84
4236: PUSH
4237: LD_INT 14
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: ST_TO_ADDR
// vehicles := [ ] ;
4251: LD_ADDR_VAR 0 12
4255: PUSH
4256: EMPTY
4257: ST_TO_ADDR
// for i in spot_xy do
4258: LD_ADDR_VAR 0 2
4262: PUSH
4263: LD_VAR 0 13
4267: PUSH
4268: FOR_IN
4269: IFFALSE 4427
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
4271: LD_ADDR_VAR 0 6
4275: PUSH
4276: LD_INT 3
4278: PPUSH
4279: LD_INT 3
4281: PPUSH
4282: LD_INT 22
4284: PPUSH
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 1
4290: PPUSH
4291: LD_INT 42
4293: PUSH
4294: LD_INT 43
4296: PUSH
4297: LD_INT 44
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 3
4310: PPUSH
4311: CALL_OW 12
4315: ARRAY
4316: PPUSH
4317: LD_INT 100
4319: PPUSH
4320: CALL 497 0 7
4324: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
4325: LD_ADDR_VAR 0 12
4329: PUSH
4330: LD_VAR 0 12
4334: PPUSH
4335: LD_VAR 0 12
4339: PUSH
4340: LD_INT 1
4342: PLUS
4343: PPUSH
4344: LD_VAR 0 6
4348: PPUSH
4349: CALL_OW 2
4353: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4354: LD_VAR 0 6
4358: PPUSH
4359: LD_INT 3
4361: PPUSH
4362: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
4366: LD_VAR 0 6
4370: PPUSH
4371: LD_VAR 0 2
4375: PUSH
4376: LD_INT 1
4378: ARRAY
4379: PPUSH
4380: LD_VAR 0 2
4384: PUSH
4385: LD_INT 2
4387: ARRAY
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
4396: LD_INT 0
4398: PPUSH
4399: LD_INT 3
4401: PPUSH
4402: LD_VAR 0 11
4406: PPUSH
4407: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4411: CALL_OW 44
4415: PPUSH
4416: LD_VAR 0 6
4420: PPUSH
4421: CALL_OW 52
// end ;
4425: GO 4268
4427: POP
4428: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_INT 5
4441: PUSH
4442: LD_INT 7
4444: PUSH
4445: LD_INT 8
4447: PUSH
4448: LD_INT 9
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PUSH
4463: FOR_TO
4464: IFFALSE 4524
// begin PrepareHuman ( false , 1 , skill ) ;
4466: LD_INT 0
4468: PPUSH
4469: LD_INT 1
4471: PPUSH
4472: LD_VAR 0 11
4476: PPUSH
4477: CALL_OW 380
// un := CreateHuman ;
4481: LD_ADDR_VAR 0 5
4485: PUSH
4486: CALL_OW 44
4490: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4491: LD_VAR 0 5
4495: PPUSH
4496: LD_INT 11
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4506: LD_ADDR_EXP 55
4510: PUSH
4511: LD_EXP 55
4515: PUSH
4516: LD_VAR 0 5
4520: ADD
4521: ST_TO_ADDR
// end ;
4522: GO 4463
4524: POP
4525: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 2
4538: PUSH
4539: LD_INT 3
4541: PUSH
4542: LD_INT 4
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PUSH
4554: LD_OWVAR 67
4558: ARRAY
4559: PUSH
4560: FOR_TO
4561: IFFALSE 4621
// begin PrepareHuman ( false , 1 , skill ) ;
4563: LD_INT 0
4565: PPUSH
4566: LD_INT 1
4568: PPUSH
4569: LD_VAR 0 11
4573: PPUSH
4574: CALL_OW 380
// un := CreateHuman ;
4578: LD_ADDR_VAR 0 5
4582: PUSH
4583: CALL_OW 44
4587: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4588: LD_VAR 0 5
4592: PPUSH
4593: LD_INT 12
4595: PPUSH
4596: LD_INT 0
4598: PPUSH
4599: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4603: LD_ADDR_EXP 53
4607: PUSH
4608: LD_EXP 53
4612: PUSH
4613: LD_VAR 0 5
4617: ADD
4618: ST_TO_ADDR
// end ;
4619: GO 4560
4621: POP
4622: POP
// for i = 1 to 2 do
4623: LD_ADDR_VAR 0 2
4627: PUSH
4628: DOUBLE
4629: LD_INT 1
4631: DEC
4632: ST_TO_ADDR
4633: LD_INT 2
4635: PUSH
4636: FOR_TO
4637: IFFALSE 4730
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4639: LD_INT 1
4641: PPUSH
4642: LD_INT 1
4644: PPUSH
4645: LD_VAR 0 11
4649: PPUSH
4650: CALL_OW 380
// hc_attr := [ 8 + Difficulty , 8 + Difficulty ] ;
4654: LD_ADDR_OWVAR 29
4658: PUSH
4659: LD_INT 8
4661: PUSH
4662: LD_OWVAR 67
4666: PLUS
4667: PUSH
4668: LD_INT 8
4670: PUSH
4671: LD_OWVAR 67
4675: PLUS
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: ST_TO_ADDR
// un := CreateHuman ;
4681: LD_ADDR_VAR 0 5
4685: PUSH
4686: CALL_OW 44
4690: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4691: LD_VAR 0 5
4695: PPUSH
4696: LD_INT 39
4698: PPUSH
4699: LD_INT 12
4701: PPUSH
4702: LD_INT 3
4704: PPUSH
4705: LD_INT 0
4707: PPUSH
4708: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4712: LD_ADDR_EXP 54
4716: PUSH
4717: LD_EXP 54
4721: PUSH
4722: LD_VAR 0 5
4726: ADD
4727: ST_TO_ADDR
// end ;
4728: GO 4636
4730: POP
4731: POP
// InitHc ;
4732: CALL_OW 19
// for i = 1 to 3 do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_INT 3
4748: PUSH
4749: FOR_TO
4750: IFFALSE 4816
// begin PrepareHuman ( false , 1 , skill ) ;
4752: LD_INT 0
4754: PPUSH
4755: LD_INT 1
4757: PPUSH
4758: LD_VAR 0 11
4762: PPUSH
4763: CALL_OW 380
// un := CreateHuman ;
4767: LD_ADDR_VAR 0 5
4771: PUSH
4772: CALL_OW 44
4776: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4777: LD_VAR 0 5
4781: PPUSH
4782: LD_INT 180
4784: PPUSH
4785: LD_INT 11
4787: PPUSH
4788: LD_INT 4
4790: PPUSH
4791: LD_INT 0
4793: PPUSH
4794: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4798: LD_ADDR_EXP 58
4802: PUSH
4803: LD_EXP 58
4807: PUSH
4808: LD_VAR 0 5
4812: ADD
4813: ST_TO_ADDR
// end ;
4814: GO 4749
4816: POP
4817: POP
// ru_vehicles := vehicles ;
4818: LD_ADDR_EXP 56
4822: PUSH
4823: LD_VAR 0 12
4827: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4828: LD_ADDR_EXP 59
4832: PUSH
4833: LD_INT 131
4835: PUSH
4836: LD_INT 121
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 113
4845: PUSH
4846: LD_INT 90
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 93
4855: PUSH
4856: LD_INT 62
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 106
4870: PUSH
4871: LD_INT 54
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: LD_INT 120
4880: PUSH
4881: LD_INT 80
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 143
4890: PUSH
4891: LD_INT 120
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: PUSH
4903: LD_INT 154
4905: PUSH
4906: LD_INT 116
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PUSH
4913: LD_INT 140
4915: PUSH
4916: LD_INT 93
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PUSH
4923: LD_INT 130
4925: PUSH
4926: LD_INT 58
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: PUSH
4938: LD_INT 105
4940: PUSH
4941: LD_INT 106
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 134
4950: PUSH
4951: LD_INT 98
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 159
4960: PUSH
4961: LD_INT 113
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: ST_TO_ADDR
// if Difficulty = 1 then
4979: LD_OWVAR 67
4983: PUSH
4984: LD_INT 1
4986: EQUAL
4987: IFFALSE 4991
// exit ;
4989: GO 5046
// for i = 1 to Difficulty - 1 do
4991: LD_ADDR_VAR 0 2
4995: PUSH
4996: DOUBLE
4997: LD_INT 1
4999: DEC
5000: ST_TO_ADDR
5001: LD_OWVAR 67
5005: PUSH
5006: LD_INT 1
5008: MINUS
5009: PUSH
5010: FOR_TO
5011: IFFALSE 5044
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
5013: LD_ADDR_EXP 57
5017: PUSH
5018: LD_EXP 57
5022: PUSH
5023: LD_INT 22
5025: PUSH
5026: LD_INT 1
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: LD_INT 43
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: ADD
5041: ST_TO_ADDR
5042: GO 5010
5044: POP
5045: POP
// end ;
5046: LD_VAR 0 1
5050: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
5051: LD_INT 22
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 21
5063: PUSH
5064: LD_INT 2
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PPUSH
5075: CALL_OW 69
5079: IFFALSE 5173
5081: GO 5083
5083: DISABLE
5084: LD_INT 0
5086: PPUSH
5087: PPUSH
// begin enable ;
5088: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
5089: LD_ADDR_VAR 0 2
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_INT 3
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 2
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PPUSH
5118: CALL_OW 69
5122: ST_TO_ADDR
// if filter then
5123: LD_VAR 0 2
5127: IFFALSE 5173
// for i in filter do
5129: LD_ADDR_VAR 0 1
5133: PUSH
5134: LD_VAR 0 2
5138: PUSH
5139: FOR_IN
5140: IFFALSE 5171
// if GetFuel ( i ) < 20 then
5142: LD_VAR 0 1
5146: PPUSH
5147: CALL_OW 261
5151: PUSH
5152: LD_INT 20
5154: LESS
5155: IFFALSE 5169
// SetFuel ( i , 20 ) ;
5157: LD_VAR 0 1
5161: PPUSH
5162: LD_INT 20
5164: PPUSH
5165: CALL_OW 240
5169: GO 5139
5171: POP
5172: POP
// end ;
5173: PPOPN 2
5175: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
5176: LD_EXP 57
5180: IFFALSE 5399
5182: GO 5184
5184: DISABLE
5185: LD_INT 0
5187: PPUSH
5188: PPUSH
5189: PPUSH
// begin enable ;
5190: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
5191: LD_ADDR_VAR 0 2
5195: PUSH
5196: LD_INT 22
5198: PUSH
5199: LD_INT 3
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 30
5208: PUSH
5209: LD_INT 3
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PPUSH
5220: CALL_OW 69
5224: ST_TO_ADDR
// can_produce := [ ] ;
5225: LD_ADDR_VAR 0 3
5229: PUSH
5230: EMPTY
5231: ST_TO_ADDR
// if not fac then
5232: LD_VAR 0 2
5236: NOT
5237: IFFALSE 5242
// begin disable ;
5239: DISABLE
// exit ;
5240: GO 5399
// end ; for i in fac do
5242: LD_ADDR_VAR 0 1
5246: PUSH
5247: LD_VAR 0 2
5251: PUSH
5252: FOR_IN
5253: IFFALSE 5291
// if UnitsInside ( i ) then
5255: LD_VAR 0 1
5259: PPUSH
5260: CALL_OW 313
5264: IFFALSE 5289
// can_produce := Insert ( can_produce , 1 , i ) ;
5266: LD_ADDR_VAR 0 3
5270: PUSH
5271: LD_VAR 0 3
5275: PPUSH
5276: LD_INT 1
5278: PPUSH
5279: LD_VAR 0 1
5283: PPUSH
5284: CALL_OW 2
5288: ST_TO_ADDR
5289: GO 5252
5291: POP
5292: POP
// if not can_produce then
5293: LD_VAR 0 3
5297: NOT
5298: IFFALSE 5302
// exit ;
5300: GO 5399
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
5302: LD_VAR 0 3
5306: PUSH
5307: LD_INT 1
5309: PPUSH
5310: LD_VAR 0 3
5314: PPUSH
5315: CALL_OW 12
5319: ARRAY
5320: PPUSH
5321: LD_EXP 57
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PPUSH
5330: LD_EXP 57
5334: PUSH
5335: LD_INT 2
5337: ARRAY
5338: PPUSH
5339: LD_EXP 57
5343: PUSH
5344: LD_INT 3
5346: ARRAY
5347: PPUSH
5348: LD_EXP 57
5352: PUSH
5353: LD_INT 4
5355: ARRAY
5356: PPUSH
5357: CALL_OW 125
// for i = 1 to 4 do
5361: LD_ADDR_VAR 0 1
5365: PUSH
5366: DOUBLE
5367: LD_INT 1
5369: DEC
5370: ST_TO_ADDR
5371: LD_INT 4
5373: PUSH
5374: FOR_TO
5375: IFFALSE 5397
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
5377: LD_ADDR_EXP 57
5381: PUSH
5382: LD_EXP 57
5386: PPUSH
5387: LD_INT 1
5389: PPUSH
5390: CALL_OW 3
5394: ST_TO_ADDR
5395: GO 5374
5397: POP
5398: POP
// end ;
5399: PPOPN 3
5401: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
5402: LD_INT 0
5404: PPUSH
5405: PPUSH
5406: PPUSH
// for i = 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
5407: LD_ADDR_VAR 0 2
5411: PUSH
5412: DOUBLE
5413: LD_INT 1
5415: DEC
5416: ST_TO_ADDR
5417: LD_INT 2
5419: PUSH
5420: LD_INT 3
5422: PUSH
5423: LD_INT 3
5425: PUSH
5426: LD_INT 3
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: LD_OWVAR 67
5439: ARRAY
5440: PUSH
5441: FOR_TO
5442: IFFALSE 5591
// begin PrepareHuman ( false , 3 , 3 ) ;
5444: LD_INT 0
5446: PPUSH
5447: LD_INT 3
5449: PPUSH
5450: LD_INT 3
5452: PPUSH
5453: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
5457: LD_ADDR_VAR 0 3
5461: PUSH
5462: LD_INT 3
5464: PPUSH
5465: LD_INT 3
5467: PPUSH
5468: LD_INT 22
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: LD_INT 1
5476: PPUSH
5477: LD_INT 43
5479: PUSH
5480: LD_INT 42
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 1
5489: PPUSH
5490: LD_INT 2
5492: PPUSH
5493: CALL_OW 12
5497: ARRAY
5498: PPUSH
5499: LD_INT 70
5501: PPUSH
5502: CALL 497 0 7
5506: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5507: LD_VAR 0 3
5511: PPUSH
5512: LD_INT 4
5514: PPUSH
5515: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5519: LD_VAR 0 3
5523: PPUSH
5524: LD_INT 229
5526: PPUSH
5527: LD_INT 44
5529: PPUSH
5530: LD_INT 0
5532: PPUSH
5533: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5537: CALL_OW 44
5541: PPUSH
5542: LD_VAR 0 3
5546: PPUSH
5547: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5551: LD_ADDR_EXP 56
5555: PUSH
5556: LD_EXP 56
5560: PUSH
5561: LD_VAR 0 3
5565: ADD
5566: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5567: LD_VAR 0 3
5571: PPUSH
5572: LD_INT 191
5574: PPUSH
5575: LD_INT 32
5577: PPUSH
5578: CALL_OW 111
// Wait ( 0 0$02 ) ;
5582: LD_INT 70
5584: PPUSH
5585: CALL_OW 67
// end ;
5589: GO 5441
5591: POP
5592: POP
// end ;
5593: LD_VAR 0 1
5597: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5598: LD_EXP 31
5602: PUSH
5603: LD_EXP 56
5607: AND
5608: IFFALSE 5782
5610: GO 5612
5612: DISABLE
5613: LD_INT 0
5615: PPUSH
5616: PPUSH
5617: PPUSH
// begin wait ( 0 0$50 ) ;
5618: LD_INT 1750
5620: PPUSH
5621: CALL_OW 67
// tmp := ru_vehicles ;
5625: LD_ADDR_VAR 0 3
5629: PUSH
5630: LD_EXP 56
5634: ST_TO_ADDR
// if not tmp then
5635: LD_VAR 0 3
5639: NOT
5640: IFFALSE 5644
// exit ;
5642: GO 5782
// repeat wait ( 0 0$1 ) ;
5644: LD_INT 35
5646: PPUSH
5647: CALL_OW 67
// for i in tmp do
5651: LD_ADDR_VAR 0 1
5655: PUSH
5656: LD_VAR 0 3
5660: PUSH
5661: FOR_IN
5662: IFFALSE 5773
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5664: LD_ADDR_VAR 0 2
5668: PUSH
5669: LD_INT 22
5671: PUSH
5672: LD_INT 1
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: LD_VAR 0 1
5683: PPUSH
5684: CALL_OW 74
5688: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5689: LD_VAR 0 1
5693: PPUSH
5694: LD_VAR 0 2
5698: PPUSH
5699: CALL_OW 296
5703: PUSH
5704: LD_INT 10
5706: GREATER
5707: IFFALSE 5726
// ComAgressiveMove ( i , 69 , 101 ) else
5709: LD_VAR 0 1
5713: PPUSH
5714: LD_INT 69
5716: PPUSH
5717: LD_INT 101
5719: PPUSH
5720: CALL_OW 114
5724: GO 5740
// ComAttackUnit ( i , enemy ) ;
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: CALL_OW 115
// if GetLives ( i ) < 250 then
5740: LD_VAR 0 1
5744: PPUSH
5745: CALL_OW 256
5749: PUSH
5750: LD_INT 250
5752: LESS
5753: IFFALSE 5771
// tmp := tmp diff i ;
5755: LD_ADDR_VAR 0 3
5759: PUSH
5760: LD_VAR 0 3
5764: PUSH
5765: LD_VAR 0 1
5769: DIFF
5770: ST_TO_ADDR
// end ;
5771: GO 5661
5773: POP
5774: POP
// until not tmp ;
5775: LD_VAR 0 3
5779: NOT
5780: IFFALSE 5644
// end ; end_of_file
5782: PPOPN 3
5784: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
// InGameOn ;
5794: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5798: LD_EXP 37
5802: PPUSH
5803: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5807: LD_EXP 37
5811: PPUSH
5812: LD_EXP 44
5816: PPUSH
5817: CALL_OW 119
// if Bierezov then
5821: LD_EXP 45
5825: IFFALSE 5841
// ComTurnUnit ( Bierezov , Cornel ) ;
5827: LD_EXP 45
5831: PPUSH
5832: LD_EXP 44
5836: PPUSH
5837: CALL_OW 119
// for i in jmm_units do
5841: LD_ADDR_VAR 0 2
5845: PUSH
5846: LD_EXP 4
5850: PUSH
5851: FOR_IN
5852: IFFALSE 5870
// ComTurnUnit ( i , Cornel ) ;
5854: LD_VAR 0 2
5858: PPUSH
5859: LD_EXP 44
5863: PPUSH
5864: CALL_OW 119
5868: GO 5851
5870: POP
5871: POP
// units := cornel_units union Cornel ;
5872: LD_ADDR_VAR 0 3
5876: PUSH
5877: LD_EXP 6
5881: PUSH
5882: LD_EXP 44
5886: UNION
5887: ST_TO_ADDR
// repeat wait ( 1 ) ;
5888: LD_INT 1
5890: PPUSH
5891: CALL_OW 67
// for i in units do
5895: LD_ADDR_VAR 0 2
5899: PUSH
5900: LD_VAR 0 3
5904: PUSH
5905: FOR_IN
5906: IFFALSE 5939
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5908: LD_VAR 0 2
5912: PPUSH
5913: LD_EXP 37
5917: PPUSH
5918: CALL_OW 250
5922: PPUSH
5923: LD_EXP 37
5927: PPUSH
5928: CALL_OW 251
5932: PPUSH
5933: CALL_OW 111
5937: GO 5905
5939: POP
5940: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5941: LD_VAR 0 3
5945: PPUSH
5946: LD_INT 92
5948: PUSH
5949: LD_EXP 37
5953: PPUSH
5954: CALL_OW 250
5958: PUSH
5959: LD_EXP 37
5963: PPUSH
5964: CALL_OW 251
5968: PUSH
5969: LD_INT 10
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: PPUSH
5978: CALL_OW 72
5982: PUSH
5983: LD_VAR 0 3
5987: EQUAL
5988: IFFALSE 5888
// for i in units do
5990: LD_ADDR_VAR 0 2
5994: PUSH
5995: LD_VAR 0 3
5999: PUSH
6000: FOR_IN
6001: IFFALSE 6019
// ComTurnUnit ( i , JMM ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_EXP 37
6012: PPUSH
6013: CALL_OW 119
6017: GO 6000
6019: POP
6020: POP
// ComTurnUnit ( Cornel , JMM ) ;
6021: LD_EXP 44
6025: PPUSH
6026: LD_EXP 37
6030: PPUSH
6031: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
6035: LD_EXP 37
6039: PPUSH
6040: LD_STRING D1-JMM-1
6042: PPUSH
6043: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
6047: LD_EXP 44
6051: PPUSH
6052: LD_STRING D1-Corn-1
6054: PPUSH
6055: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
6059: LD_EXP 37
6063: PPUSH
6064: LD_EXP 44
6068: PPUSH
6069: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
6073: LD_EXP 44
6077: PPUSH
6078: LD_EXP 37
6082: PPUSH
6083: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
6087: LD_INT 35
6089: PPUSH
6090: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
6094: LD_EXP 37
6098: PPUSH
6099: LD_EXP 44
6103: PPUSH
6104: CALL_OW 296
6108: PUSH
6109: LD_INT 6
6111: LESS
6112: IFFALSE 6087
// ChangeSideFog ( 4 , 1 ) ;
6114: LD_INT 4
6116: PPUSH
6117: LD_INT 1
6119: PPUSH
6120: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
6124: LD_EXP 37
6128: PPUSH
6129: LD_EXP 44
6133: PPUSH
6134: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6138: LD_EXP 44
6142: PPUSH
6143: LD_EXP 37
6147: PPUSH
6148: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
6152: LD_EXP 37
6156: PPUSH
6157: LD_STRING D1-JMM-2
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
6164: LD_EXP 37
6168: PPUSH
6169: LD_STRING D1-JMM-2a
6171: PPUSH
6172: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
6176: LD_EXP 44
6180: PPUSH
6181: LD_STRING D1-Corn-2
6183: PPUSH
6184: CALL_OW 88
// if bierezov_exist or debug then
6188: LD_EXP 7
6192: PUSH
6193: LD_EXP 1
6197: OR
6198: IFFALSE 6439
// begin ComTurnUnit ( Cornel , Bierezov ) ;
6200: LD_EXP 44
6204: PPUSH
6205: LD_EXP 45
6209: PPUSH
6210: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
6214: LD_INT 10
6216: PPUSH
6217: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
6221: LD_EXP 44
6225: PPUSH
6226: LD_STRING D1a-Corn-1
6228: PPUSH
6229: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
6233: LD_EXP 37
6237: PPUSH
6238: LD_EXP 45
6242: PPUSH
6243: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
6247: LD_EXP 45
6251: PPUSH
6252: LD_EXP 37
6256: PPUSH
6257: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
6261: LD_EXP 37
6265: PPUSH
6266: LD_STRING D1a-JMM-1
6268: PPUSH
6269: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
6273: LD_EXP 37
6277: PPUSH
6278: LD_EXP 44
6282: PPUSH
6283: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6287: LD_EXP 44
6291: PPUSH
6292: LD_EXP 37
6296: PPUSH
6297: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
6301: LD_EXP 44
6305: PPUSH
6306: LD_STRING D1a-Corn-2
6308: PPUSH
6309: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
6313: LD_EXP 37
6317: PPUSH
6318: LD_STRING D1a-JMM-2
6320: PPUSH
6321: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
6325: LD_EXP 44
6329: PPUSH
6330: LD_STRING D1a-Corn-3
6332: PPUSH
6333: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
6337: LD_EXP 37
6341: PPUSH
6342: LD_STRING D1a-JMM-3
6344: PPUSH
6345: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
6349: LD_EXP 44
6353: PPUSH
6354: LD_STRING D1a-Corn-4
6356: PPUSH
6357: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
6361: LD_EXP 37
6365: PPUSH
6366: LD_STRING D1a-JMM-4
6368: PPUSH
6369: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
6373: LD_EXP 44
6377: PPUSH
6378: LD_STRING D1a-Corn-5
6380: PPUSH
6381: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
6385: LD_EXP 45
6389: PPUSH
6390: LD_EXP 44
6394: PPUSH
6395: CALL_OW 250
6399: PPUSH
6400: LD_EXP 44
6404: PPUSH
6405: CALL_OW 251
6409: PUSH
6410: LD_INT 2
6412: MINUS
6413: PPUSH
6414: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
6418: LD_EXP 45
6422: PPUSH
6423: LD_EXP 44
6427: PPUSH
6428: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
6432: LD_INT 10
6434: PPUSH
6435: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
6439: LD_EXP 37
6443: PPUSH
6444: LD_STRING D1b-JMM-1
6446: PPUSH
6447: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
6451: LD_EXP 44
6455: PPUSH
6456: LD_STRING D1b-Corn-1
6458: PPUSH
6459: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6463: LD_EXP 37
6467: PPUSH
6468: LD_STRING D1b-JMM-2
6470: PPUSH
6471: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6475: LD_EXP 44
6479: PPUSH
6480: LD_STRING D1b-Corn-2
6482: PPUSH
6483: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6487: LD_EXP 37
6491: PPUSH
6492: LD_STRING D1b-JMM-3
6494: PPUSH
6495: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6499: LD_INT 10
6501: PPUSH
6502: CALL_OW 67
// SayRadioNoFace ( Powell , D1b-Pow-3 ) ;
6506: LD_EXP 46
6510: PPUSH
6511: LD_STRING D1b-Pow-3
6513: PPUSH
6514: CALL_OW 586
// Say ( JMM , D1b-JMM-4 ) ;
6518: LD_EXP 37
6522: PPUSH
6523: LD_STRING D1b-JMM-4
6525: PPUSH
6526: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6530: LD_EXP 44
6534: PPUSH
6535: LD_STRING D1b-Corn-4
6537: PPUSH
6538: CALL_OW 88
// if Khatam then
6542: LD_EXP 41
6546: IFFALSE 6562
// Say ( Khatam , D1b-Khat-4 ) else
6548: LD_EXP 41
6552: PPUSH
6553: LD_STRING D1b-Khat-4
6555: PPUSH
6556: CALL_OW 88
6560: GO 6598
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6562: LD_EXP 6
6566: PPUSH
6567: LD_INT 26
6569: PUSH
6570: LD_INT 1
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PPUSH
6577: CALL_OW 72
6581: PUSH
6582: LD_EXP 44
6586: PUSH
6587: EMPTY
6588: LIST
6589: DIFF
6590: PPUSH
6591: LD_STRING D1b-Sol1-4
6593: PPUSH
6594: CALL 585 0 2
// if Cyrus then
6598: LD_EXP 39
6602: IFFALSE 6616
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6604: LD_EXP 39
6608: PPUSH
6609: LD_STRING D1b-Cyrus-4
6611: PPUSH
6612: CALL_OW 88
// if Lisa then
6616: LD_EXP 40
6620: IFFALSE 6678
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6622: LD_EXP 40
6626: PPUSH
6627: LD_STRING D1b-Lisa-4
6629: PPUSH
6630: CALL_OW 88
// if Cyrus then
6634: LD_EXP 39
6638: IFFALSE 6678
// begin if not IsInUnit ( Cyrus ) then
6640: LD_EXP 39
6644: PPUSH
6645: CALL_OW 310
6649: NOT
6650: IFFALSE 6666
// ComTurnUnit ( Cyrus , Lisa ) ;
6652: LD_EXP 39
6656: PPUSH
6657: LD_EXP 40
6661: PPUSH
6662: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6666: LD_EXP 39
6670: PPUSH
6671: LD_STRING D1b-Cyrus-5
6673: PPUSH
6674: CALL_OW 88
// end ; end ; SelectGroup ;
6678: CALL 3052 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6682: LD_EXP 37
6686: PPUSH
6687: LD_STRING D1d-JMM-1
6689: PPUSH
6690: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6694: LD_EXP 44
6698: PPUSH
6699: LD_STRING D1d-Corn-1
6701: PPUSH
6702: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6706: LD_ADDR_VAR 0 2
6710: PUSH
6711: LD_EXP 4
6715: PUSH
6716: LD_EXP 6
6720: ADD
6721: PUSH
6722: LD_EXP 37
6726: ADD
6727: PUSH
6728: FOR_IN
6729: IFFALSE 6742
// ComHold ( i ) ;
6731: LD_VAR 0 2
6735: PPUSH
6736: CALL_OW 140
6740: GO 6728
6742: POP
6743: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6744: LD_ADDR_VAR 0 4
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 1
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 21
6761: PUSH
6762: LD_INT 2
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PPUSH
6773: CALL_OW 69
6777: ST_TO_ADDR
// if vehicles then
6778: LD_VAR 0 4
6782: IFFALSE 7120
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6784: LD_EXP 6
6788: PPUSH
6789: LD_INT 55
6791: PUSH
6792: EMPTY
6793: LIST
6794: PPUSH
6795: CALL_OW 72
6799: IFFALSE 6838
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6801: LD_ADDR_VAR 0 2
6805: PUSH
6806: LD_EXP 6
6810: PPUSH
6811: LD_INT 55
6813: PUSH
6814: EMPTY
6815: LIST
6816: PPUSH
6817: CALL_OW 72
6821: PUSH
6822: FOR_IN
6823: IFFALSE 6836
// ComExitVehicle ( i ) ;
6825: LD_VAR 0 2
6829: PPUSH
6830: CALL_OW 121
6834: GO 6822
6836: POP
6837: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6838: LD_ADDR_VAR 0 5
6842: PUSH
6843: LD_VAR 0 4
6847: PPUSH
6848: LD_INT 34
6850: PUSH
6851: LD_INT 51
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 72
6862: ST_TO_ADDR
// if cargos then
6863: LD_VAR 0 5
6867: IFFALSE 7050
// begin vehicles := cargos ;
6869: LD_ADDR_VAR 0 4
6873: PUSH
6874: LD_VAR 0 5
6878: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6879: LD_ADDR_VAR 0 6
6883: PUSH
6884: LD_STRING 02_resources_4
6886: PPUSH
6887: LD_INT 0
6889: PPUSH
6890: CALL_OW 30
6894: ST_TO_ADDR
// if debug and not resources then
6895: LD_EXP 1
6899: PUSH
6900: LD_VAR 0 6
6904: NOT
6905: AND
6906: IFFALSE 6916
// resources := 160 ;
6908: LD_ADDR_VAR 0 6
6912: PUSH
6913: LD_INT 160
6915: ST_TO_ADDR
// if resources mod 10 then
6916: LD_VAR 0 6
6920: PUSH
6921: LD_INT 10
6923: MOD
6924: IFFALSE 6946
// resources := resources - resources mod 10 ;
6926: LD_ADDR_VAR 0 6
6930: PUSH
6931: LD_VAR 0 6
6935: PUSH
6936: LD_VAR 0 6
6940: PUSH
6941: LD_INT 10
6943: MOD
6944: MINUS
6945: ST_TO_ADDR
// if resources then
6946: LD_VAR 0 6
6950: IFFALSE 7050
// for i in cargos do
6952: LD_ADDR_VAR 0 2
6956: PUSH
6957: LD_VAR 0 5
6961: PUSH
6962: FOR_IN
6963: IFFALSE 7048
// begin if resources < 100 then
6965: LD_VAR 0 6
6969: PUSH
6970: LD_INT 100
6972: LESS
6973: IFFALSE 6995
// begin cargo := resources ;
6975: LD_ADDR_VAR 0 7
6979: PUSH
6980: LD_VAR 0 6
6984: ST_TO_ADDR
// resources := 0 ;
6985: LD_ADDR_VAR 0 6
6989: PUSH
6990: LD_INT 0
6992: ST_TO_ADDR
// end else
6993: GO 7017
// begin cargo := 100 ;
6995: LD_ADDR_VAR 0 7
6999: PUSH
7000: LD_INT 100
7002: ST_TO_ADDR
// resources := resources - 100 ;
7003: LD_ADDR_VAR 0 6
7007: PUSH
7008: LD_VAR 0 6
7012: PUSH
7013: LD_INT 100
7015: MINUS
7016: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
7017: LD_VAR 0 2
7021: PPUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_VAR 0 7
7029: PPUSH
7030: CALL_OW 290
// if resources = 0 then
7034: LD_VAR 0 6
7038: PUSH
7039: LD_INT 0
7041: EQUAL
7042: IFFALSE 7046
// break ;
7044: GO 7048
// end ;
7046: GO 6962
7048: POP
7049: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
7050: LD_VAR 0 4
7054: PUSH
7055: LD_INT 1
7057: ARRAY
7058: PPUSH
7059: CALL_OW 311
7063: PPUSH
7064: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
7068: LD_VAR 0 4
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: LD_INT 4
7079: PPUSH
7080: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
7084: LD_EXP 44
7088: PPUSH
7089: LD_VAR 0 4
7093: PUSH
7094: LD_INT 1
7096: ARRAY
7097: PPUSH
7098: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
7102: LD_INT 35
7104: PPUSH
7105: CALL_OW 67
// until IsInUnit ( Cornel ) ;
7109: LD_EXP 44
7113: PPUSH
7114: CALL_OW 310
7118: IFFALSE 7102
// end ; InGameOff ;
7120: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
7124: LD_STRING M1
7126: PPUSH
7127: CALL_OW 337
// SaveForQuickRestart ;
7131: CALL_OW 22
// cornel_active := true ;
7135: LD_ADDR_EXP 8
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// end ;
7143: LD_VAR 0 1
7147: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
7148: LD_EXP 37
7152: PPUSH
7153: LD_EXP 47
7157: PPUSH
7158: CALL_OW 296
7162: PUSH
7163: LD_INT 10
7165: LESS
7166: IFFALSE 8549
7168: GO 7170
7170: DISABLE
7171: LD_INT 0
7173: PPUSH
7174: PPUSH
7175: PPUSH
7176: PPUSH
7177: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
7178: LD_ADDR_VAR 0 2
7182: PUSH
7183: LD_INT 89
7185: PUSH
7186: LD_INT 34
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 138
7195: PUSH
7196: LD_INT 63
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 196
7205: PUSH
7206: LD_INT 84
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 135
7215: PUSH
7216: LD_INT 52
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 103
7225: PUSH
7226: LD_INT 39
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: LD_INT 58
7235: PUSH
7236: LD_INT 30
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 38
7245: PUSH
7246: LD_INT 51
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: ST_TO_ADDR
// Video ( true ) ;
7262: LD_INT 1
7264: PPUSH
7265: CALL 76515 0 1
// if jmm_units then
7269: LD_EXP 4
7273: IFFALSE 7349
// for i in jmm_units do
7275: LD_ADDR_VAR 0 1
7279: PUSH
7280: LD_EXP 4
7284: PUSH
7285: FOR_IN
7286: IFFALSE 7347
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_EXP 37
7297: PPUSH
7298: CALL_OW 296
7302: PUSH
7303: LD_INT 10
7305: LESS
7306: PUSH
7307: LD_VAR 0 1
7311: PPUSH
7312: CALL_OW 310
7316: NOT
7317: AND
7318: IFFALSE 7336
// ComTurnUnit ( i , JMM ) else
7320: LD_VAR 0 1
7324: PPUSH
7325: LD_EXP 37
7329: PPUSH
7330: CALL_OW 119
7334: GO 7345
// ComHold ( i ) ;
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 140
// end ;
7345: GO 7285
7347: POP
7348: POP
// if IsInUnit ( JMM ) then
7349: LD_EXP 37
7353: PPUSH
7354: CALL_OW 310
7358: IFFALSE 7383
// begin ComExitVehicle ( JMM ) ;
7360: LD_EXP 37
7364: PPUSH
7365: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
7369: LD_EXP 37
7373: PPUSH
7374: LD_EXP 47
7378: PPUSH
7379: CALL_OW 172
// end ; Wait ( 10 ) ;
7383: LD_INT 10
7385: PPUSH
7386: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
7390: LD_EXP 37
7394: PPUSH
7395: LD_EXP 47
7399: PPUSH
7400: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
7404: LD_INT 35
7406: PPUSH
7407: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
7411: LD_EXP 37
7415: PPUSH
7416: LD_EXP 47
7420: PPUSH
7421: CALL_OW 296
7425: PUSH
7426: LD_INT 6
7428: LESS
7429: IFFALSE 7404
// ComTurnUnit ( JMM , Lynch ) ;
7431: LD_EXP 37
7435: PPUSH
7436: LD_EXP 47
7440: PPUSH
7441: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
7445: LD_ADDR_VAR 0 1
7449: PUSH
7450: LD_EXP 47
7454: PUSH
7455: LD_EXP 48
7459: PUSH
7460: LD_EXP 49
7464: PUSH
7465: LD_EXP 50
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: PUSH
7476: FOR_IN
7477: IFFALSE 7495
// ComTurnUnit ( i , JMM ) ;
7479: LD_VAR 0 1
7483: PPUSH
7484: LD_EXP 37
7488: PPUSH
7489: CALL_OW 119
7493: GO 7476
7495: POP
7496: POP
// Wait ( 0 0$0.3 ) ;
7497: LD_INT 10
7499: PPUSH
7500: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7504: LD_EXP 37
7508: PPUSH
7509: LD_STRING D2-JMM-1
7511: PPUSH
7512: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7516: LD_EXP 47
7520: PPUSH
7521: LD_STRING D2-Sol1-1
7523: PPUSH
7524: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7528: LD_EXP 37
7532: PPUSH
7533: LD_STRING D2-JMM-2
7535: PPUSH
7536: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7540: LD_EXP 47
7544: PPUSH
7545: LD_STRING D2-Sol1-2
7547: PPUSH
7548: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7552: LD_EXP 37
7556: PPUSH
7557: LD_STRING D2-JMM-3
7559: PPUSH
7560: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7564: LD_EXP 47
7568: PPUSH
7569: LD_STRING D2-Sol1-3
7571: PPUSH
7572: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_INT 22
7583: PUSH
7584: LD_INT 8
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PPUSH
7591: CALL_OW 69
7595: PUSH
7596: FOR_IN
7597: IFFALSE 7613
// SetSide ( i , 1 ) ;
7599: LD_VAR 0 1
7603: PPUSH
7604: LD_INT 1
7606: PPUSH
7607: CALL_OW 235
7611: GO 7596
7613: POP
7614: POP
// Say ( JMM , D2-JMM-4 ) ;
7615: LD_EXP 37
7619: PPUSH
7620: LD_STRING D2-JMM-4
7622: PPUSH
7623: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7627: LD_INT 1
7629: PPUSH
7630: LD_INT 5
7632: PPUSH
7633: CALL_OW 332
// for i = 1 to points do
7637: LD_ADDR_VAR 0 1
7641: PUSH
7642: DOUBLE
7643: LD_INT 1
7645: DEC
7646: ST_TO_ADDR
7647: LD_VAR 0 2
7651: PUSH
7652: FOR_TO
7653: IFFALSE 7828
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7655: LD_VAR 0 2
7659: PUSH
7660: LD_VAR 0 1
7664: ARRAY
7665: PUSH
7666: LD_INT 1
7668: ARRAY
7669: PPUSH
7670: LD_VAR 0 2
7674: PUSH
7675: LD_VAR 0 1
7679: ARRAY
7680: PUSH
7681: LD_INT 2
7683: ARRAY
7684: PPUSH
7685: CALL_OW 84
// if i = 1 then
7689: LD_VAR 0 1
7693: PUSH
7694: LD_INT 1
7696: EQUAL
7697: IFFALSE 7711
// Say ( Lynch , D2-Sol1-4 ) ;
7699: LD_EXP 47
7703: PPUSH
7704: LD_STRING D2-Sol1-4
7706: PPUSH
7707: CALL_OW 88
// if i = 2 then
7711: LD_VAR 0 1
7715: PUSH
7716: LD_INT 2
7718: EQUAL
7719: IFFALSE 7733
// Say ( JMM , D2-JMM-5 ) ;
7721: LD_EXP 37
7725: PPUSH
7726: LD_STRING D2-JMM-5
7728: PPUSH
7729: CALL_OW 88
// if i = 4 then
7733: LD_VAR 0 1
7737: PUSH
7738: LD_INT 4
7740: EQUAL
7741: IFFALSE 7765
// begin RevealFogArea ( 1 , troopsArea ) ;
7743: LD_INT 1
7745: PPUSH
7746: LD_INT 6
7748: PPUSH
7749: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7753: LD_EXP 47
7757: PPUSH
7758: LD_STRING D2-Sol1-5
7760: PPUSH
7761: CALL_OW 88
// end ; if i = 5 then
7765: LD_VAR 0 1
7769: PUSH
7770: LD_INT 5
7772: EQUAL
7773: IFFALSE 7787
// Say ( JMM , D2-JMM-6 ) ;
7775: LD_EXP 37
7779: PPUSH
7780: LD_STRING D2-JMM-6
7782: PPUSH
7783: CALL_OW 88
// if i = 7 then
7787: LD_VAR 0 1
7791: PUSH
7792: LD_INT 7
7794: EQUAL
7795: IFFALSE 7819
// begin RevealFogArea ( 1 , forestArea ) ;
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 7
7802: PPUSH
7803: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7807: LD_EXP 47
7811: PPUSH
7812: LD_STRING D2-Sol1-6
7814: PPUSH
7815: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7819: LD_INT 46
7821: PPUSH
7822: CALL_OW 67
// end ;
7826: GO 7652
7828: POP
7829: POP
// CenterNowOnUnits ( JMM ) ;
7830: LD_EXP 37
7834: PPUSH
7835: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7839: LD_EXP 37
7843: PPUSH
7844: LD_STRING D2-JMM-7
7846: PPUSH
7847: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7851: LD_EXP 47
7855: PPUSH
7856: LD_STRING D2-Sol1-7
7858: PPUSH
7859: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7863: LD_EXP 37
7867: PPUSH
7868: LD_STRING D2-JMM-8
7870: PPUSH
7871: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7875: LD_ADDR_VAR 0 4
7879: PUSH
7880: LD_INT 22
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 30
7892: PUSH
7893: LD_INT 31
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 69
7908: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7909: LD_EXP 47
7913: PPUSH
7914: LD_VAR 0 4
7918: PUSH
7919: LD_INT 1
7921: ARRAY
7922: PPUSH
7923: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7927: LD_INT 65
7929: PPUSH
7930: LD_INT 101
7932: PPUSH
7933: CALL_OW 428
7937: IFFALSE 7960
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7939: LD_INT 65
7941: PPUSH
7942: LD_INT 101
7944: PPUSH
7945: CALL_OW 428
7949: PPUSH
7950: LD_INT 75
7952: PPUSH
7953: LD_INT 100
7955: PPUSH
7956: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7960: LD_INT 66
7962: PPUSH
7963: LD_INT 103
7965: PPUSH
7966: CALL_OW 428
7970: IFFALSE 7993
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7972: LD_INT 66
7974: PPUSH
7975: LD_INT 103
7977: PPUSH
7978: CALL_OW 428
7982: PPUSH
7983: LD_INT 75
7985: PPUSH
7986: LD_INT 100
7988: PPUSH
7989: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7993: LD_ADDR_VAR 0 5
7997: PUSH
7998: LD_INT 22
8000: PUSH
8001: LD_INT 1
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 21
8010: PUSH
8011: LD_INT 2
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: LD_INT 91
8020: PUSH
8021: LD_EXP 37
8025: PUSH
8026: LD_INT 7
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: PPUSH
8039: CALL_OW 69
8043: ST_TO_ADDR
// if tmp then
8044: LD_VAR 0 5
8048: IFFALSE 8065
// ComMoveXY ( tmp , 75 , 100 ) ;
8050: LD_VAR 0 5
8054: PPUSH
8055: LD_INT 75
8057: PPUSH
8058: LD_INT 100
8060: PPUSH
8061: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: LD_EXP 4
8074: PPUSH
8075: LD_INT 25
8077: PUSH
8078: LD_INT 1
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PPUSH
8085: CALL_OW 72
8089: PPUSH
8090: LD_EXP 37
8094: PPUSH
8095: CALL_OW 74
8099: ST_TO_ADDR
// if sol then
8100: LD_VAR 0 3
8104: IFFALSE 8164
// if GetDistUnits ( JMM , sol ) < 10 then
8106: LD_EXP 37
8110: PPUSH
8111: LD_VAR 0 3
8115: PPUSH
8116: CALL_OW 296
8120: PUSH
8121: LD_INT 10
8123: LESS
8124: IFFALSE 8164
// begin if IsInUnit ( sol ) then
8126: LD_VAR 0 3
8130: PPUSH
8131: CALL_OW 310
8135: IFFALSE 8146
// ComExitVehicle ( sol ) ;
8137: LD_VAR 0 3
8141: PPUSH
8142: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
8146: LD_VAR 0 3
8150: PPUSH
8151: LD_VAR 0 4
8155: PUSH
8156: LD_INT 2
8158: ARRAY
8159: PPUSH
8160: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
8164: LD_INT 10
8166: PPUSH
8167: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
8171: LD_EXP 37
8175: PPUSH
8176: LD_INT 65
8178: PPUSH
8179: LD_INT 101
8181: PPUSH
8182: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
8186: LD_EXP 37
8190: PPUSH
8191: LD_INT 63
8193: PPUSH
8194: LD_INT 100
8196: PPUSH
8197: CALL_OW 178
// tmp := 0 0$0 ;
8201: LD_ADDR_VAR 0 5
8205: PUSH
8206: LD_INT 0
8208: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8209: LD_INT 35
8211: PPUSH
8212: CALL_OW 67
// tmp := tmp + 0 0$1 ;
8216: LD_ADDR_VAR 0 5
8220: PUSH
8221: LD_VAR 0 5
8225: PUSH
8226: LD_INT 35
8228: PLUS
8229: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
8230: LD_EXP 37
8234: PPUSH
8235: LD_INT 65
8237: PPUSH
8238: LD_INT 101
8240: PPUSH
8241: CALL_OW 307
8245: PUSH
8246: LD_VAR 0 5
8250: PUSH
8251: LD_INT 175
8253: GREATER
8254: OR
8255: IFFALSE 8209
// Say ( JMM , D2a-JMM-1 ) ;
8257: LD_EXP 37
8261: PPUSH
8262: LD_STRING D2a-JMM-1
8264: PPUSH
8265: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
8269: LD_EXP 48
8273: PPUSH
8274: LD_INT 66
8276: PPUSH
8277: LD_INT 103
8279: PPUSH
8280: CALL_OW 111
// tmp := 0 0$0 ;
8284: LD_ADDR_VAR 0 5
8288: PUSH
8289: LD_INT 0
8291: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8292: LD_INT 35
8294: PPUSH
8295: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
8299: LD_EXP 48
8303: PPUSH
8304: LD_INT 66
8306: PPUSH
8307: LD_INT 103
8309: PPUSH
8310: CALL_OW 307
8314: PUSH
8315: LD_VAR 0 5
8319: PUSH
8320: LD_INT 175
8322: GREATER
8323: OR
8324: IFFALSE 8292
// ComTurnUnit ( Walker , JMM ) ;
8326: LD_EXP 48
8330: PPUSH
8331: LD_EXP 37
8335: PPUSH
8336: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
8340: LD_EXP 48
8344: PPUSH
8345: LD_STRING D2a-Sci1-1
8347: PPUSH
8348: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
8352: LD_EXP 37
8356: PPUSH
8357: LD_EXP 48
8361: PPUSH
8362: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
8366: LD_EXP 37
8370: PPUSH
8371: LD_STRING D2a-JMM-2
8373: PPUSH
8374: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
8378: LD_EXP 48
8382: PPUSH
8383: LD_STRING D2a-Sci1-2
8385: PPUSH
8386: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
8390: LD_EXP 37
8394: PPUSH
8395: LD_STRING D2a-JMM-3
8397: PPUSH
8398: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
8402: LD_EXP 48
8406: PPUSH
8407: LD_STRING D2a-Sci1-3
8409: PPUSH
8410: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
8414: LD_ADDR_EXP 4
8418: PUSH
8419: LD_EXP 4
8423: PUSH
8424: LD_EXP 47
8428: PUSH
8429: LD_EXP 48
8433: PUSH
8434: LD_EXP 49
8438: PUSH
8439: LD_EXP 50
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: ADD
8450: ST_TO_ADDR
// for i in jmm_units do
8451: LD_ADDR_VAR 0 1
8455: PUSH
8456: LD_EXP 4
8460: PUSH
8461: FOR_IN
8462: IFFALSE 8487
// if not IsInUnit ( i ) then
8464: LD_VAR 0 1
8468: PPUSH
8469: CALL_OW 310
8473: NOT
8474: IFFALSE 8485
// ComFree ( i ) ;
8476: LD_VAR 0 1
8480: PPUSH
8481: CALL_OW 139
8485: GO 8461
8487: POP
8488: POP
// Video ( false ) ;
8489: LD_INT 0
8491: PPUSH
8492: CALL 76515 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8496: LD_STRING MSolar1
8498: PPUSH
8499: CALL_OW 337
// jmm_on_west := true ;
8503: LD_ADDR_EXP 5
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8511: LD_INT 1050
8513: PPUSH
8514: CALL_OW 67
// frank_can_return := true ;
8518: LD_ADDR_EXP 12
8522: PUSH
8523: LD_INT 1
8525: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8526: LD_INT 6300
8528: PPUSH
8529: LD_INT 8400
8531: PPUSH
8532: CALL_OW 12
8536: PPUSH
8537: CALL_OW 67
// send_spec_patrol := true ;
8541: LD_ADDR_EXP 30
8545: PUSH
8546: LD_INT 1
8548: ST_TO_ADDR
// end ;
8549: PPOPN 5
8551: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8552: LD_INT 22
8554: PUSH
8555: LD_INT 1
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 34
8564: PUSH
8565: LD_INT 51
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 92
8574: PUSH
8575: LD_INT 63
8577: PUSH
8578: LD_INT 100
8580: PUSH
8581: LD_INT 5
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: PPUSH
8598: CALL_OW 69
8602: PUSH
8603: LD_EXP 5
8607: NOT
8608: AND
8609: IFFALSE 8722
8611: GO 8613
8613: DISABLE
8614: LD_INT 0
8616: PPUSH
8617: PPUSH
// begin enable ;
8618: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8619: LD_ADDR_VAR 0 2
8623: PUSH
8624: LD_INT 22
8626: PUSH
8627: LD_INT 1
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 34
8636: PUSH
8637: LD_INT 51
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 92
8646: PUSH
8647: LD_INT 63
8649: PUSH
8650: LD_INT 100
8652: PUSH
8653: LD_INT 5
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: LIST
8666: PUSH
8667: EMPTY
8668: LIST
8669: PPUSH
8670: CALL_OW 69
8674: ST_TO_ADDR
// if not filter then
8675: LD_VAR 0 2
8679: NOT
8680: IFFALSE 8684
// exit ;
8682: GO 8722
// for i in filter do
8684: LD_ADDR_VAR 0 1
8688: PUSH
8689: LD_VAR 0 2
8693: PUSH
8694: FOR_IN
8695: IFFALSE 8720
// begin SetFuel ( i , 0 ) ;
8697: LD_VAR 0 1
8701: PPUSH
8702: LD_INT 0
8704: PPUSH
8705: CALL_OW 240
// ComStop ( i ) ;
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 141
// end ;
8718: GO 8694
8720: POP
8721: POP
// end ;
8722: PPOPN 2
8724: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8725: LD_EXP 30
8729: IFFALSE 9784
8731: GO 8733
8733: DISABLE
8734: LD_INT 0
8736: PPUSH
8737: PPUSH
8738: PPUSH
8739: PPUSH
8740: PPUSH
8741: PPUSH
8742: PPUSH
// begin if not ru_spec_patrol then
8743: LD_EXP 54
8747: NOT
8748: IFFALSE 8752
// exit ;
8750: GO 9784
// dead1 := false ;
8752: LD_ADDR_VAR 0 1
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// dead2 := false ;
8760: LD_ADDR_VAR 0 2
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// inarea1 := false ;
8768: LD_ADDR_VAR 0 3
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// inarea2 := false ;
8776: LD_ADDR_VAR 0 4
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// tmp := [ ] ;
8784: LD_ADDR_VAR 0 6
8788: PUSH
8789: EMPTY
8790: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8791: LD_EXP 54
8795: PPUSH
8796: LD_INT 75
8798: PPUSH
8799: LD_INT 101
8801: PPUSH
8802: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8806: LD_INT 35
8808: PPUSH
8809: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8813: LD_INT 1
8815: PPUSH
8816: LD_EXP 54
8820: PUSH
8821: LD_INT 1
8823: ARRAY
8824: PPUSH
8825: CALL_OW 292
8829: PUSH
8830: LD_EXP 54
8834: PPUSH
8835: LD_INT 92
8837: PUSH
8838: LD_INT 75
8840: PUSH
8841: LD_INT 101
8843: PUSH
8844: LD_INT 4
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: PPUSH
8853: CALL_OW 72
8857: OR
8858: IFFALSE 8806
// ComStop ( ru_spec_patrol ) ;
8860: LD_EXP 54
8864: PPUSH
8865: CALL_OW 141
// Wait ( 0 0$02 ) ;
8869: LD_INT 70
8871: PPUSH
8872: CALL_OW 67
// DialogueOn ;
8876: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8880: LD_EXP 54
8884: PUSH
8885: LD_INT 1
8887: ARRAY
8888: PPUSH
8889: LD_STRING D8-Rus1-1
8891: PPUSH
8892: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8896: LD_EXP 37
8900: PPUSH
8901: LD_STRING D8-JMM-1
8903: PPUSH
8904: CALL_OW 88
// DialogueOff ;
8908: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8912: LD_EXP 54
8916: PPUSH
8917: LD_INT 13
8919: PPUSH
8920: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8924: LD_INT 35
8926: PPUSH
8927: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8931: LD_VAR 0 1
8935: NOT
8936: PUSH
8937: LD_EXP 54
8941: PUSH
8942: LD_INT 1
8944: ARRAY
8945: PPUSH
8946: CALL_OW 301
8950: AND
8951: IFFALSE 8961
// dead1 := true ;
8953: LD_ADDR_VAR 0 1
8957: PUSH
8958: LD_INT 1
8960: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8961: LD_VAR 0 2
8965: NOT
8966: PUSH
8967: LD_EXP 54
8971: PUSH
8972: LD_INT 2
8974: ARRAY
8975: PPUSH
8976: CALL_OW 301
8980: AND
8981: IFFALSE 8991
// dead2 := true ;
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_INT 1
8990: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8991: LD_VAR 0 3
8995: NOT
8996: PUSH
8997: LD_EXP 54
9001: PUSH
9002: LD_INT 1
9004: ARRAY
9005: PPUSH
9006: LD_INT 14
9008: PPUSH
9009: CALL_OW 308
9013: AND
9014: IFFALSE 9024
// inarea1 := true ;
9016: LD_ADDR_VAR 0 3
9020: PUSH
9021: LD_INT 1
9023: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
9024: LD_VAR 0 4
9028: NOT
9029: PUSH
9030: LD_EXP 54
9034: PUSH
9035: LD_INT 2
9037: ARRAY
9038: PPUSH
9039: LD_INT 14
9041: PPUSH
9042: CALL_OW 308
9046: AND
9047: IFFALSE 9057
// inarea2 := true ;
9049: LD_ADDR_VAR 0 4
9053: PUSH
9054: LD_INT 1
9056: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
9057: LD_VAR 0 1
9061: PUSH
9062: LD_VAR 0 2
9066: AND
9067: PUSH
9068: LD_VAR 0 1
9072: PUSH
9073: LD_VAR 0 4
9077: AND
9078: OR
9079: PUSH
9080: LD_VAR 0 2
9084: PUSH
9085: LD_VAR 0 3
9089: AND
9090: OR
9091: PUSH
9092: LD_VAR 0 3
9096: PUSH
9097: LD_VAR 0 4
9101: AND
9102: OR
9103: IFFALSE 8924
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
9105: LD_VAR 0 3
9109: PUSH
9110: LD_VAR 0 4
9114: AND
9115: PUSH
9116: LD_VAR 0 1
9120: PUSH
9121: LD_VAR 0 4
9125: AND
9126: OR
9127: PUSH
9128: LD_VAR 0 2
9132: PUSH
9133: LD_VAR 0 3
9137: AND
9138: OR
9139: IFFALSE 9764
// begin prepare_siege := true ;
9141: LD_ADDR_EXP 31
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// DialogueOn ;
9149: CALL_OW 6
// if ( inarea1 and inarea2 ) then
9153: LD_VAR 0 3
9157: PUSH
9158: LD_VAR 0 4
9162: AND
9163: IFFALSE 9179
// Say ( JMM , D8b-JMM-1a ) else
9165: LD_EXP 37
9169: PPUSH
9170: LD_STRING D8b-JMM-1a
9172: PPUSH
9173: CALL_OW 88
9177: GO 9191
// Say ( JMM , D8b-JMM-1 ) ;
9179: LD_EXP 37
9183: PPUSH
9184: LD_STRING D8b-JMM-1
9186: PPUSH
9187: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
9191: LD_EXP 4
9195: PPUSH
9196: LD_INT 26
9198: PUSH
9199: LD_INT 1
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PPUSH
9206: CALL_OW 72
9210: PUSH
9211: LD_EXP 38
9215: PUSH
9216: LD_EXP 39
9220: PUSH
9221: LD_EXP 48
9225: PUSH
9226: LD_EXP 51
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: DIFF
9237: PPUSH
9238: LD_STRING D8b-Sol1-1
9240: PPUSH
9241: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
9245: LD_EXP 39
9249: PUSH
9250: LD_EXP 39
9254: PUSH
9255: LD_EXP 4
9259: IN
9260: AND
9261: IFFALSE 9277
// Say ( Cyrus , D8b-Cyrus-1 ) else
9263: LD_EXP 39
9267: PPUSH
9268: LD_STRING D8b-Cyrus-1
9270: PPUSH
9271: CALL_OW 88
9275: GO 9289
// Say ( JMM , D8b-JMM-1a ) ;
9277: LD_EXP 37
9281: PPUSH
9282: LD_STRING D8b-JMM-1a
9284: PPUSH
9285: CALL_OW 88
// if Lisa and Lisa in jmm_units then
9289: LD_EXP 40
9293: PUSH
9294: LD_EXP 40
9298: PUSH
9299: LD_EXP 4
9303: IN
9304: AND
9305: IFFALSE 9319
// Say ( Lisa , D8b-Lisa-2 ) ;
9307: LD_EXP 40
9311: PPUSH
9312: LD_STRING D8b-Lisa-2
9314: PPUSH
9315: CALL_OW 88
// if Bobby and Bobby in jmm_units then
9319: LD_EXP 38
9323: PUSH
9324: LD_EXP 38
9328: PUSH
9329: LD_EXP 4
9333: IN
9334: AND
9335: IFFALSE 9351
// Say ( Bobby , D8b-Bobby-1 ) else
9337: LD_EXP 38
9341: PPUSH
9342: LD_STRING D8b-Bobby-1
9344: PPUSH
9345: CALL_OW 88
9349: GO 9411
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
9351: LD_ADDR_VAR 0 5
9355: PUSH
9356: LD_EXP 4
9360: PPUSH
9361: LD_INT 26
9363: PUSH
9364: LD_INT 1
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PPUSH
9371: CALL_OW 72
9375: PUSH
9376: LD_EXP 38
9380: PUSH
9381: LD_EXP 39
9385: PUSH
9386: LD_EXP 48
9390: PUSH
9391: LD_EXP 51
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: DIFF
9402: PPUSH
9403: LD_STRING D8b-Sol2-1
9405: PPUSH
9406: CALL 585 0 2
9410: ST_TO_ADDR
// DialogueOff ;
9411: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
9415: LD_EXP 39
9419: PUSH
9420: LD_EXP 39
9424: PUSH
9425: LD_EXP 4
9429: IN
9430: AND
9431: IFFALSE 9456
// tmp := Insert ( tmp , 1 , Cyrus ) ;
9433: LD_ADDR_VAR 0 6
9437: PUSH
9438: LD_VAR 0 6
9442: PPUSH
9443: LD_INT 1
9445: PPUSH
9446: LD_EXP 39
9450: PPUSH
9451: CALL_OW 2
9455: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
9456: LD_EXP 38
9460: PUSH
9461: LD_EXP 38
9465: PUSH
9466: LD_EXP 4
9470: IN
9471: AND
9472: IFFALSE 9497
// tmp := Insert ( tmp , 1 , Bobby ) ;
9474: LD_ADDR_VAR 0 6
9478: PUSH
9479: LD_VAR 0 6
9483: PPUSH
9484: LD_INT 1
9486: PPUSH
9487: LD_EXP 38
9491: PPUSH
9492: CALL_OW 2
9496: ST_TO_ADDR
// if sol then
9497: LD_VAR 0 5
9501: IFFALSE 9526
// tmp := Insert ( tmp , 1 , sol ) ;
9503: LD_ADDR_VAR 0 6
9507: PUSH
9508: LD_VAR 0 6
9512: PPUSH
9513: LD_INT 1
9515: PPUSH
9516: LD_VAR 0 5
9520: PPUSH
9521: CALL_OW 2
9525: ST_TO_ADDR
// if tmp then
9526: LD_VAR 0 6
9530: IFFALSE 9723
// begin SetSide ( tmp , 8 ) ;
9532: LD_VAR 0 6
9536: PPUSH
9537: LD_INT 8
9539: PPUSH
9540: CALL_OW 235
// for i in tmp do
9544: LD_ADDR_VAR 0 7
9548: PUSH
9549: LD_VAR 0 6
9553: PUSH
9554: FOR_IN
9555: IFFALSE 9568
// ComExit ( i ) ;
9557: LD_VAR 0 7
9561: PPUSH
9562: CALL 76941 0 1
9566: GO 9554
9568: POP
9569: POP
// wait ( 0 0$0.3 ) ;
9570: LD_INT 10
9572: PPUSH
9573: CALL_OW 67
// ComFree ( tmp ) ;
9577: LD_VAR 0 6
9581: PPUSH
9582: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9586: LD_VAR 0 6
9590: PPUSH
9591: LD_INT 15
9593: PPUSH
9594: CALL_OW 173
// AddComHold ( tmp ) ;
9598: LD_VAR 0 6
9602: PPUSH
9603: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9607: LD_INT 35
9609: PPUSH
9610: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9614: LD_VAR 0 6
9618: PUSH
9619: LD_INT 1
9621: ARRAY
9622: PPUSH
9623: CALL_OW 314
9627: NOT
9628: IFFALSE 9642
// ComMoveToArea ( tmp , cyrusEscape ) ;
9630: LD_VAR 0 6
9634: PPUSH
9635: LD_INT 15
9637: PPUSH
9638: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9642: LD_VAR 0 6
9646: PUSH
9647: LD_INT 1
9649: ARRAY
9650: PPUSH
9651: LD_INT 15
9653: PPUSH
9654: CALL_OW 308
9658: IFFALSE 9713
// begin RemoveUnit ( tmp [ 1 ] ) ;
9660: LD_VAR 0 6
9664: PUSH
9665: LD_INT 1
9667: ARRAY
9668: PPUSH
9669: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9673: LD_ADDR_EXP 4
9677: PUSH
9678: LD_EXP 4
9682: PUSH
9683: LD_VAR 0 6
9687: PUSH
9688: LD_INT 1
9690: ARRAY
9691: DIFF
9692: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9693: LD_ADDR_VAR 0 6
9697: PUSH
9698: LD_VAR 0 6
9702: PUSH
9703: LD_VAR 0 6
9707: PUSH
9708: LD_INT 1
9710: ARRAY
9711: DIFF
9712: ST_TO_ADDR
// end ; until tmp = 0 ;
9713: LD_VAR 0 6
9717: PUSH
9718: LD_INT 0
9720: EQUAL
9721: IFFALSE 9607
// end ; wait ( 0 0$30 ) ;
9723: LD_INT 1050
9725: PPUSH
9726: CALL_OW 67
// if ru_spec_patrol then
9730: LD_EXP 54
9734: IFFALSE 9762
// for i in ru_spec_patrol do
9736: LD_ADDR_VAR 0 7
9740: PUSH
9741: LD_EXP 54
9745: PUSH
9746: FOR_IN
9747: IFFALSE 9760
// RemoveUnit ( i ) ;
9749: LD_VAR 0 7
9753: PPUSH
9754: CALL_OW 64
9758: GO 9746
9760: POP
9761: POP
// end else
9762: GO 9784
// begin prepare_siege := false ;
9764: LD_ADDR_EXP 31
9768: PUSH
9769: LD_INT 0
9771: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9772: LD_EXP 37
9776: PPUSH
9777: LD_STRING D8a-JMM-1
9779: PPUSH
9780: CALL_OW 88
// end ; end ;
9784: PPOPN 7
9786: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9787: LD_EXP 12
9791: IFFALSE 11059
9793: GO 9795
9795: DISABLE
9796: LD_INT 0
9798: PPUSH
9799: PPUSH
9800: PPUSH
// begin uc_side := 8 ;
9801: LD_ADDR_OWVAR 20
9805: PUSH
9806: LD_INT 8
9808: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9809: LD_ADDR_VAR 0 3
9813: PUSH
9814: LD_INT 59
9816: PUSH
9817: LD_INT 71
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 122
9826: PUSH
9827: LD_INT 117
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9838: LD_ADDR_EXP 51
9842: PUSH
9843: LD_STRING Frank
9845: PPUSH
9846: LD_INT 0
9848: PPUSH
9849: LD_STRING 
9851: PPUSH
9852: CALL 39251 0 3
9856: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9857: LD_ADDR_VAR 0 1
9861: PUSH
9862: LD_INT 1
9864: PPUSH
9865: LD_INT 2
9867: PPUSH
9868: CALL_OW 12
9872: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9873: LD_EXP 51
9877: PPUSH
9878: LD_VAR 0 3
9882: PUSH
9883: LD_VAR 0 1
9887: ARRAY
9888: PUSH
9889: LD_INT 1
9891: ARRAY
9892: PPUSH
9893: LD_VAR 0 3
9897: PUSH
9898: LD_VAR 0 1
9902: ARRAY
9903: PUSH
9904: LD_INT 2
9906: ARRAY
9907: PPUSH
9908: LD_INT 0
9910: PPUSH
9911: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9915: LD_EXP 51
9919: PPUSH
9920: LD_INT 1
9922: PPUSH
9923: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9927: LD_INT 35
9929: PPUSH
9930: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9934: LD_EXP 51
9938: PPUSH
9939: LD_EXP 37
9943: PPUSH
9944: CALL_OW 296
9948: PUSH
9949: LD_INT 8
9951: LESS
9952: PUSH
9953: LD_EXP 51
9957: PPUSH
9958: CALL_OW 256
9962: PUSH
9963: LD_INT 250
9965: GREATER
9966: AND
9967: IFFALSE 9927
// Video ( true ) ;
9969: LD_INT 1
9971: PPUSH
9972: CALL 76515 0 1
// CenterOnUnits ( JMM ) ;
9976: LD_EXP 37
9980: PPUSH
9981: CALL_OW 85
// if IsInUnit ( JMM ) then
9985: LD_EXP 37
9989: PPUSH
9990: CALL_OW 310
9994: IFFALSE 10005
// ComFree ( JMM ) ;
9996: LD_EXP 37
10000: PPUSH
10001: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
10005: LD_EXP 37
10009: PPUSH
10010: LD_EXP 51
10014: PPUSH
10015: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
10019: LD_EXP 51
10023: PPUSH
10024: LD_EXP 37
10028: PPUSH
10029: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
10033: LD_EXP 37
10037: PPUSH
10038: LD_STRING D6-JMM-1
10040: PPUSH
10041: CALL_OW 88
// p := 0 ;
10045: LD_ADDR_VAR 0 2
10049: PUSH
10050: LD_INT 0
10052: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10053: LD_INT 35
10055: PPUSH
10056: CALL_OW 67
// p := p + 1 ;
10060: LD_ADDR_VAR 0 2
10064: PUSH
10065: LD_VAR 0 2
10069: PUSH
10070: LD_INT 1
10072: PLUS
10073: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
10074: LD_EXP 37
10078: PPUSH
10079: LD_EXP 51
10083: PPUSH
10084: CALL_OW 296
10088: PUSH
10089: LD_INT 8
10091: LESS
10092: PUSH
10093: LD_VAR 0 2
10097: PUSH
10098: LD_INT 7
10100: GREATER
10101: OR
10102: IFFALSE 10053
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
10104: LD_EXP 40
10108: PUSH
10109: LD_EXP 40
10113: PPUSH
10114: LD_EXP 51
10118: PPUSH
10119: CALL_OW 296
10123: PUSH
10124: LD_INT 20
10126: LESS
10127: AND
10128: PUSH
10129: LD_EXP 40
10133: PUSH
10134: LD_EXP 4
10138: IN
10139: AND
10140: IFFALSE 10165
// begin ComFree ( Lisa ) ;
10142: LD_EXP 40
10146: PPUSH
10147: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
10151: LD_EXP 40
10155: PPUSH
10156: LD_EXP 51
10160: PPUSH
10161: CALL_OW 172
// end ; if Lynch then
10165: LD_EXP 47
10169: IFFALSE 10194
// begin ComFree ( Lynch ) ;
10171: LD_EXP 47
10175: PPUSH
10176: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
10180: LD_EXP 47
10184: PPUSH
10185: LD_EXP 51
10189: PPUSH
10190: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
10194: LD_EXP 37
10198: PPUSH
10199: LD_EXP 51
10203: PPUSH
10204: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10208: LD_EXP 51
10212: PPUSH
10213: LD_EXP 37
10217: PPUSH
10218: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
10222: LD_EXP 51
10226: PPUSH
10227: LD_STRING D6-Frank-1
10229: PPUSH
10230: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
10234: LD_INT 69
10236: PPUSH
10237: LD_INT 20
10239: PPUSH
10240: LD_INT 1
10242: PPUSH
10243: LD_INT 20
10245: NEG
10246: PPUSH
10247: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
10251: LD_INT 69
10253: PPUSH
10254: LD_INT 20
10256: PPUSH
10257: LD_INT 1
10259: PPUSH
10260: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
10264: LD_INT 190
10266: PPUSH
10267: LD_INT 31
10269: PPUSH
10270: LD_INT 1
10272: PPUSH
10273: LD_INT 20
10275: NEG
10276: PPUSH
10277: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
10281: LD_INT 190
10283: PPUSH
10284: LD_INT 31
10286: PPUSH
10287: LD_INT 1
10289: PPUSH
10290: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
10294: LD_INT 69
10296: PPUSH
10297: LD_INT 20
10299: PPUSH
10300: CALL_OW 84
// Wait ( 0 0$02 ) ;
10304: LD_INT 70
10306: PPUSH
10307: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
10311: LD_EXP 37
10315: PPUSH
10316: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
10320: LD_EXP 40
10324: PUSH
10325: LD_EXP 40
10329: PPUSH
10330: LD_EXP 51
10334: PPUSH
10335: CALL_OW 296
10339: PUSH
10340: LD_INT 20
10342: LESS
10343: AND
10344: PUSH
10345: LD_EXP 40
10349: PPUSH
10350: CALL_OW 302
10354: AND
10355: PUSH
10356: LD_EXP 40
10360: PUSH
10361: LD_EXP 4
10365: IN
10366: AND
10367: IFFALSE 10489
// begin ComFree ( Lisa ) ;
10369: LD_EXP 40
10373: PPUSH
10374: CALL_OW 139
// p := 0 ;
10378: LD_ADDR_VAR 0 2
10382: PUSH
10383: LD_INT 0
10385: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10386: LD_INT 35
10388: PPUSH
10389: CALL_OW 67
// p := p + 1 ;
10393: LD_ADDR_VAR 0 2
10397: PUSH
10398: LD_VAR 0 2
10402: PUSH
10403: LD_INT 1
10405: PLUS
10406: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10407: LD_EXP 40
10411: PPUSH
10412: LD_EXP 51
10416: PPUSH
10417: CALL_OW 296
10421: PUSH
10422: LD_INT 7
10424: LESS
10425: PUSH
10426: LD_VAR 0 2
10430: PUSH
10431: LD_INT 7
10433: GREATER
10434: OR
10435: IFFALSE 10386
// Say ( Lisa , D6-Lisa-1 ) ;
10437: LD_EXP 40
10441: PPUSH
10442: LD_STRING D6-Lisa-1
10444: PPUSH
10445: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10449: LD_EXP 40
10453: PPUSH
10454: LD_EXP 51
10458: PPUSH
10459: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10463: LD_EXP 51
10467: PPUSH
10468: LD_EXP 40
10472: PPUSH
10473: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10477: LD_EXP 51
10481: PPUSH
10482: LD_STRING D6-Frank-2
10484: PPUSH
10485: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10489: LD_EXP 47
10493: PUSH
10494: LD_EXP 47
10498: PPUSH
10499: LD_EXP 51
10503: PPUSH
10504: CALL_OW 296
10508: PUSH
10509: LD_INT 20
10511: LESS
10512: AND
10513: PUSH
10514: LD_EXP 47
10518: PPUSH
10519: CALL_OW 302
10523: AND
10524: IFFALSE 10717
// begin ComTurnUnit ( Lynch , JMM ) ;
10526: LD_EXP 47
10530: PPUSH
10531: LD_EXP 37
10535: PPUSH
10536: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10540: LD_EXP 51
10544: PPUSH
10545: LD_EXP 37
10549: PPUSH
10550: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10554: LD_EXP 47
10558: PPUSH
10559: LD_STRING D6-Sol1-2
10561: PPUSH
10562: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10566: LD_EXP 37
10570: PPUSH
10571: LD_STRING D6-JMM-2
10573: PPUSH
10574: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10578: LD_EXP 51
10582: PPUSH
10583: LD_STRING D6-Frank-3
10585: PPUSH
10586: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10590: LD_EXP 37
10594: PPUSH
10595: LD_STRING D6-JMM-3
10597: PPUSH
10598: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10602: LD_EXP 51
10606: PPUSH
10607: LD_STRING D6-Frank-4
10609: PPUSH
10610: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10614: LD_EXP 51
10618: PPUSH
10619: LD_STRING D6-Frank-4a
10621: PPUSH
10622: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10626: LD_EXP 37
10630: PPUSH
10631: LD_STRING D6-JMM-4
10633: PPUSH
10634: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10638: LD_EXP 51
10642: PPUSH
10643: LD_STRING D6-Frank-5
10645: PPUSH
10646: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10650: LD_EXP 40
10654: PUSH
10655: LD_EXP 40
10659: PPUSH
10660: CALL_OW 302
10664: AND
10665: PUSH
10666: LD_EXP 40
10670: PUSH
10671: LD_EXP 4
10675: IN
10676: AND
10677: IFFALSE 10691
// Say ( Lisa , D6-Lisa-5 ) ;
10679: LD_EXP 40
10683: PPUSH
10684: LD_STRING D6-Lisa-5
10686: PPUSH
10687: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10691: LD_EXP 51
10695: PPUSH
10696: LD_STRING D6-Frank-6
10698: PPUSH
10699: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10703: LD_EXP 37
10707: PPUSH
10708: LD_STRING D6-JMM-6
10710: PPUSH
10711: CALL_OW 88
// end else
10715: GO 10844
// begin ComTurnUnit ( Frank , JMM ) ;
10717: LD_EXP 51
10721: PPUSH
10722: LD_EXP 37
10726: PPUSH
10727: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10731: LD_EXP 51
10735: PPUSH
10736: LD_STRING D6-Frank-4
10738: PPUSH
10739: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10743: LD_EXP 51
10747: PPUSH
10748: LD_STRING D6-Frank-4a
10750: PPUSH
10751: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10755: LD_EXP 37
10759: PPUSH
10760: LD_STRING D6-JMM-4
10762: PPUSH
10763: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10767: LD_EXP 51
10771: PPUSH
10772: LD_STRING D6-Frank-5
10774: PPUSH
10775: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10779: LD_EXP 40
10783: PUSH
10784: LD_EXP 40
10788: PPUSH
10789: CALL_OW 302
10793: AND
10794: PUSH
10795: LD_EXP 40
10799: PUSH
10800: LD_EXP 4
10804: IN
10805: AND
10806: IFFALSE 10820
// Say ( Lisa , D6-Lisa-5 ) ;
10808: LD_EXP 40
10812: PPUSH
10813: LD_STRING D6-Lisa-5
10815: PPUSH
10816: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10820: LD_EXP 51
10824: PPUSH
10825: LD_STRING D6-Frank-6
10827: PPUSH
10828: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10832: LD_EXP 37
10836: PPUSH
10837: LD_STRING D6-JMM-6
10839: PPUSH
10840: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10844: LD_STRING Q1
10846: PPUSH
10847: CALL_OW 97
10851: PUSH
10852: LD_INT 1
10854: DOUBLE
10855: EQUAL
10856: IFTRUE 10860
10858: GO 10871
10860: POP
// frank_send_to_scout := true ; 2 :
10861: LD_ADDR_EXP 15
10865: PUSH
10866: LD_INT 1
10868: ST_TO_ADDR
10869: GO 10891
10871: LD_INT 2
10873: DOUBLE
10874: EQUAL
10875: IFTRUE 10879
10877: GO 10890
10879: POP
// frank_send_to_scout := false ; end ;
10880: LD_ADDR_EXP 15
10884: PUSH
10885: LD_INT 0
10887: ST_TO_ADDR
10888: GO 10891
10890: POP
// Video ( false ) ;
10891: LD_INT 0
10893: PPUSH
10894: CALL 76515 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10898: LD_EXP 37
10902: PUSH
10903: LD_EXP 40
10907: PUSH
10908: LD_EXP 47
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: LIST
10917: PPUSH
10918: CALL_OW 139
// if frank_send_to_scout then
10922: LD_EXP 15
10926: IFFALSE 10980
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10928: LD_EXP 51
10932: PPUSH
10933: LD_INT 15
10935: PPUSH
10936: CALL_OW 113
// wait ( 0 0$01 ) ;
10940: LD_INT 35
10942: PPUSH
10943: CALL_OW 67
// until not See ( 1 , Frank ) ;
10947: LD_INT 1
10949: PPUSH
10950: LD_EXP 51
10954: PPUSH
10955: CALL_OW 292
10959: NOT
10960: IFFALSE 10928
// wait ( 0 0$02 ) ;
10962: LD_INT 70
10964: PPUSH
10965: CALL_OW 67
// RemoveUnit ( Frank ) ;
10969: LD_EXP 51
10973: PPUSH
10974: CALL_OW 64
// end else
10978: GO 10992
// SetSide ( Frank , 1 ) ;
10980: LD_EXP 51
10984: PPUSH
10985: LD_INT 1
10987: PPUSH
10988: CALL_OW 235
// send_attack_on_cornel_base := true ;
10992: LD_ADDR_EXP 26
10996: PUSH
10997: LD_INT 1
10999: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11000: LD_INT 35
11002: PPUSH
11003: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
11007: LD_ADDR_EXP 29
11011: PUSH
11012: LD_EXP 29
11016: PPUSH
11017: LD_STRING -
11019: PPUSH
11020: CALL 1077 0 2
11024: ST_TO_ADDR
// if debug then
11025: LD_EXP 1
11029: IFFALSE 11041
// debug_strings := time_to_prepare ;
11031: LD_ADDR_OWVAR 48
11035: PUSH
11036: LD_EXP 29
11040: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
11041: LD_EXP 29
11045: PUSH
11046: LD_INT 0
11048: EQUAL
11049: IFFALSE 11000
// cornel_prepared := true ;
11051: LD_ADDR_EXP 11
11055: PUSH
11056: LD_INT 1
11058: ST_TO_ADDR
// end ;
11059: PPOPN 3
11061: END
// every 0 0$01 trigger cornel_prepared do
11062: LD_EXP 11
11066: IFFALSE 11374
11068: GO 11070
11070: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
11071: LD_EXP 44
11075: PPUSH
11076: LD_STRING D3-Corn-1
11078: PPUSH
11079: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
11083: LD_STRING MOutWait
11085: PPUSH
11086: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
11090: LD_INT 35
11092: PPUSH
11093: CALL_OW 67
// until cornel_counter = 0 ;
11097: LD_EXP 10
11101: PUSH
11102: LD_INT 0
11104: EQUAL
11105: IFFALSE 11090
// SayRadio ( Cornel , D3a-Corn-1 ) ;
11107: LD_EXP 44
11111: PPUSH
11112: LD_STRING D3a-Corn-1
11114: PPUSH
11115: CALL_OW 94
// if IsOk ( Cornel ) then
11119: LD_EXP 44
11123: PPUSH
11124: CALL_OW 302
11128: IFFALSE 11142
// Say ( JMM , D3a-JMM-1 ) ;
11130: LD_EXP 37
11134: PPUSH
11135: LD_STRING D3a-JMM-1
11137: PPUSH
11138: CALL_OW 88
// end_mission_allowed := true ;
11142: LD_ADDR_EXP 21
11146: PUSH
11147: LD_INT 1
11149: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
11150: LD_STRING M2
11152: PPUSH
11153: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
11157: LD_INT 9
11159: PPUSH
11160: LD_INT 1
11162: PPUSH
11163: CALL_OW 424
// Wait ( 0 0$05 ) ;
11167: LD_INT 175
11169: PPUSH
11170: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
11174: LD_EXP 44
11178: PPUSH
11179: LD_STRING D3a-Corn-2
11181: PPUSH
11182: CALL_OW 94
// cornel_attack := true ;
11186: LD_ADDR_EXP 9
11190: PUSH
11191: LD_INT 1
11193: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
11194: LD_INT 105
11196: PPUSH
11197: CALL_OW 67
// AddMoreTanks ( ) ;
11201: CALL 5402 0 0
// if frank_send_to_scout then
11205: LD_EXP 15
11209: IFFALSE 11374
// begin InitHc ;
11211: CALL_OW 19
// InitUc ;
11215: CALL_OW 18
// uc_side := 8 ;
11219: LD_ADDR_OWVAR 20
11223: PUSH
11224: LD_INT 8
11226: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
11227: LD_ADDR_EXP 51
11231: PUSH
11232: LD_STRING Frank
11234: PPUSH
11235: LD_INT 0
11237: PPUSH
11238: LD_STRING 
11240: PPUSH
11241: CALL 39251 0 3
11245: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
11246: LD_EXP 51
11250: PPUSH
11251: LD_INT 6
11253: PPUSH
11254: LD_INT 9
11256: PPUSH
11257: LD_INT 0
11259: PPUSH
11260: CALL_OW 48
// ComCrawl ( Frank ) ;
11264: LD_EXP 51
11268: PPUSH
11269: CALL_OW 137
// repeat wait ( 10 ) ;
11273: LD_INT 10
11275: PPUSH
11276: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11280: LD_EXP 37
11284: PPUSH
11285: LD_EXP 51
11289: PPUSH
11290: CALL_OW 296
11294: PUSH
11295: LD_INT 9
11297: LESS
11298: PUSH
11299: LD_INT 9
11301: PPUSH
11302: LD_INT 22
11304: PUSH
11305: LD_INT 1
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PPUSH
11312: CALL_OW 70
11316: OR
11317: IFFALSE 11273
// if IsDead ( Frank ) then
11319: LD_EXP 51
11323: PPUSH
11324: CALL_OW 301
11328: IFFALSE 11332
// exit ;
11330: GO 11374
// CenterOnUnits ( Frank ) ;
11332: LD_EXP 51
11336: PPUSH
11337: CALL_OW 85
// SetSide ( Frank , 1 ) ;
11341: LD_EXP 51
11345: PPUSH
11346: LD_INT 1
11348: PPUSH
11349: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
11353: LD_EXP 51
11357: PPUSH
11358: LD_STRING D6a-Frank-1
11360: PPUSH
11361: CALL_OW 88
// ComWalk ( Frank ) ;
11365: LD_EXP 51
11369: PPUSH
11370: CALL_OW 138
// end ; end ;
11374: END
// every 0 0$01 trigger solar_builded do
11375: LD_EXP 14
11379: IFFALSE 11483
11381: GO 11383
11383: DISABLE
// begin Wait ( 0 0$02 ) ;
11384: LD_INT 70
11386: PPUSH
11387: CALL_OW 67
// DialogueOn ;
11391: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11395: LD_EXP 37
11399: PPUSH
11400: LD_STRING D2b-JMM-1
11402: PPUSH
11403: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11407: LD_EXP 48
11411: PUSH
11412: LD_EXP 48
11416: PPUSH
11417: CALL_OW 302
11421: AND
11422: IFFALSE 11472
// begin Say ( Walker , D2b-Sci1-1 ) ;
11424: LD_EXP 48
11428: PPUSH
11429: LD_STRING D2b-Sci1-1
11431: PPUSH
11432: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11436: LD_EXP 37
11440: PPUSH
11441: LD_STRING D2b-JMM-2
11443: PPUSH
11444: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11448: LD_EXP 48
11452: PPUSH
11453: LD_STRING D2b-Sci1-2
11455: PPUSH
11456: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11460: LD_EXP 37
11464: PPUSH
11465: LD_STRING D2b-JMM-3
11467: PPUSH
11468: CALL_OW 88
// end ; DialogueOff ;
11472: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11476: LD_STRING MOutSol
11478: PPUSH
11479: CALL_OW 337
// end ;
11483: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11484: LD_EXP 14
11488: PUSH
11489: LD_EXP 37
11493: PPUSH
11494: CALL_OW 302
11498: AND
11499: PUSH
11500: LD_EXP 37
11504: PPUSH
11505: CALL 911 0 1
11509: AND
11510: PUSH
11511: LD_EXP 16
11515: NOT
11516: AND
11517: IFFALSE 11588
11519: GO 11521
11521: DISABLE
11522: LD_INT 0
11524: PPUSH
// begin jmm_in_veh := true ;
11525: LD_ADDR_EXP 16
11529: PUSH
11530: LD_INT 1
11532: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11533: LD_ADDR_VAR 0 1
11537: PUSH
11538: LD_INT 0
11540: PPUSH
11541: LD_INT 1
11543: PPUSH
11544: CALL_OW 12
11548: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11549: LD_INT 70
11551: PPUSH
11552: CALL_OW 67
// if i then
11556: LD_VAR 0 1
11560: IFFALSE 11576
// Say ( JMM , D2c-JMM-1 ) else
11562: LD_EXP 37
11566: PPUSH
11567: LD_STRING D2c-JMM-1
11569: PPUSH
11570: CALL_OW 88
11574: GO 11588
// Say ( JMM , D2c-JMM-1a ) ;
11576: LD_EXP 37
11580: PPUSH
11581: LD_STRING D2c-JMM-1a
11583: PPUSH
11584: CALL_OW 88
// end ;
11588: PPOPN 1
11590: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11591: LD_EXP 14
11595: PUSH
11596: LD_EXP 38
11600: PPUSH
11601: CALL_OW 302
11605: AND
11606: PUSH
11607: LD_EXP 38
11611: PPUSH
11612: CALL 911 0 1
11616: AND
11617: PUSH
11618: LD_EXP 17
11622: NOT
11623: AND
11624: IFFALSE 11656
11626: GO 11628
11628: DISABLE
// begin bobby_in_veh := true ;
11629: LD_ADDR_EXP 17
11633: PUSH
11634: LD_INT 1
11636: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11637: LD_INT 70
11639: PPUSH
11640: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11644: LD_EXP 38
11648: PPUSH
11649: LD_STRING D2c-Bobby-1
11651: PPUSH
11652: CALL_OW 88
11656: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11657: LD_EXP 14
11661: PUSH
11662: LD_EXP 40
11666: PPUSH
11667: CALL_OW 302
11671: AND
11672: PUSH
11673: LD_EXP 40
11677: PPUSH
11678: CALL 911 0 1
11682: AND
11683: PUSH
11684: LD_EXP 19
11688: NOT
11689: AND
11690: IFFALSE 11722
11692: GO 11694
11694: DISABLE
// begin lisa_in_veh := true ;
11695: LD_ADDR_EXP 19
11699: PUSH
11700: LD_INT 1
11702: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11703: LD_INT 70
11705: PPUSH
11706: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11710: LD_EXP 40
11714: PPUSH
11715: LD_STRING D2c-Lisa-1
11717: PPUSH
11718: CALL_OW 88
11722: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11723: LD_EXP 14
11727: PUSH
11728: LD_EXP 39
11732: PPUSH
11733: CALL_OW 302
11737: AND
11738: PUSH
11739: LD_EXP 39
11743: PPUSH
11744: CALL 911 0 1
11748: AND
11749: PUSH
11750: LD_EXP 18
11754: NOT
11755: AND
11756: IFFALSE 11827
11758: GO 11760
11760: DISABLE
11761: LD_INT 0
11763: PPUSH
// begin cyrus_in_veh := true ;
11764: LD_ADDR_EXP 18
11768: PUSH
11769: LD_INT 1
11771: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11772: LD_ADDR_VAR 0 1
11776: PUSH
11777: LD_INT 0
11779: PPUSH
11780: LD_INT 1
11782: PPUSH
11783: CALL_OW 12
11787: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11788: LD_INT 70
11790: PPUSH
11791: CALL_OW 67
// if i then
11795: LD_VAR 0 1
11799: IFFALSE 11815
// Say ( Cyrus , D2c-Cyrus-1 ) else
11801: LD_EXP 39
11805: PPUSH
11806: LD_STRING D2c-Cyrus-1
11808: PPUSH
11809: CALL_OW 88
11813: GO 11827
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11815: LD_EXP 39
11819: PPUSH
11820: LD_STRING D2c-Cyrus-1a
11822: PPUSH
11823: CALL_OW 88
// end ;
11827: PPOPN 1
11829: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11830: LD_EXP 44
11834: PPUSH
11835: LD_INT 16
11837: PPUSH
11838: CALL_OW 308
11842: IFFALSE 12123
11844: GO 11846
11846: DISABLE
11847: LD_INT 0
11849: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11850: LD_INT 3
11852: PPUSH
11853: LD_EXP 44
11857: PPUSH
11858: CALL_OW 471
// send_attack_on_cornel := true ;
11862: LD_ADDR_EXP 32
11866: PUSH
11867: LD_INT 1
11869: ST_TO_ADDR
// if ru_vehicles then
11870: LD_EXP 56
11874: IFFALSE 11908
// for i in ru_vehicles do
11876: LD_ADDR_VAR 0 1
11880: PUSH
11881: LD_EXP 56
11885: PUSH
11886: FOR_IN
11887: IFFALSE 11906
// ComAgressiveMove ( i , 215 , 69 ) ;
11889: LD_VAR 0 1
11893: PPUSH
11894: LD_INT 215
11896: PPUSH
11897: LD_INT 69
11899: PPUSH
11900: CALL_OW 114
11904: GO 11886
11906: POP
11907: POP
// if ru_patrol then
11908: LD_EXP 53
11912: IFFALSE 11946
// for i in ru_patrol do
11914: LD_ADDR_VAR 0 1
11918: PUSH
11919: LD_EXP 53
11923: PUSH
11924: FOR_IN
11925: IFFALSE 11944
// ComAgressiveMove ( i , 215 , 69 ) ;
11927: LD_VAR 0 1
11931: PPUSH
11932: LD_INT 215
11934: PPUSH
11935: LD_INT 69
11937: PPUSH
11938: CALL_OW 114
11942: GO 11924
11944: POP
11945: POP
// if frank_send_to_scout then
11946: LD_EXP 15
11950: IFFALSE 11964
// SayRadio ( Frank , D3b-Frank-1 ) ;
11952: LD_EXP 51
11956: PPUSH
11957: LD_STRING D3b-Frank-1
11959: PPUSH
11960: CALL_OW 94
// wait ( 0 0$03 ) ;
11964: LD_INT 105
11966: PPUSH
11967: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11971: LD_EXP 44
11975: PPUSH
11976: LD_STRING D4-Corn-1
11978: PPUSH
11979: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11983: LD_INT 35
11985: PPUSH
11986: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11990: LD_INT 22
11992: PUSH
11993: LD_INT 4
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 21
12002: PUSH
12003: LD_INT 1
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 3
12012: PUSH
12013: LD_INT 24
12015: PUSH
12016: LD_INT 1000
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: PPUSH
12032: CALL_OW 69
12036: PUSH
12037: LD_INT 6
12039: LESS
12040: IFFALSE 11983
// if Cornel then
12042: LD_EXP 44
12046: IFFALSE 12086
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
12048: LD_EXP 44
12052: PPUSH
12053: LD_STRING D5-Corn-1
12055: PPUSH
12056: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
12060: LD_EXP 44
12064: PPUSH
12065: LD_EXP 2
12069: PUSH
12070: LD_STRING Cornel
12072: STR
12073: PPUSH
12074: CALL_OW 38
// cornel_saved := true ;
12078: LD_ADDR_EXP 27
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
12086: LD_INT 4
12088: PPUSH
12089: LD_INT 8
12091: PPUSH
12092: CALL_OW 343
// wait ( 0 0$01 ) ;
12096: LD_INT 35
12098: PPUSH
12099: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
12103: LD_INT 3
12105: PPUSH
12106: LD_EXP 44
12110: PPUSH
12111: CALL_OW 472
// send_attack_on_cornel := false ;
12115: LD_ADDR_EXP 32
12119: PUSH
12120: LD_INT 0
12122: ST_TO_ADDR
// end ;
12123: PPOPN 1
12125: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
12126: LD_INT 9
12128: PPUSH
12129: LD_INT 22
12131: PUSH
12132: LD_INT 1
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PPUSH
12139: CALL_OW 70
12143: PUSH
12144: LD_EXP 33
12148: OR
12149: IFFALSE 12370
12151: GO 12153
12153: DISABLE
12154: LD_INT 0
12156: PPUSH
12157: PPUSH
// begin enable ;
12158: ENABLE
// if not jmm_on_west then
12159: LD_EXP 5
12163: NOT
12164: IFFALSE 12175
// begin YouLost ( 4 ) ;
12166: LD_STRING 4
12168: PPUSH
12169: CALL_OW 104
// exit ;
12173: GO 12370
// end ; if not game_end then
12175: LD_EXP 33
12179: NOT
12180: IFFALSE 12190
// game_end := true ;
12182: LD_ADDR_EXP 33
12186: PUSH
12187: LD_INT 1
12189: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
12190: LD_ADDR_VAR 0 2
12194: PUSH
12195: LD_INT 9
12197: PPUSH
12198: LD_INT 22
12200: PUSH
12201: LD_INT 1
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PPUSH
12208: CALL_OW 70
12212: ST_TO_ADDR
// if not filter then
12213: LD_VAR 0 2
12217: NOT
12218: IFFALSE 12222
// exit ;
12220: GO 12370
// for i in filter do
12222: LD_ADDR_VAR 0 1
12226: PUSH
12227: LD_VAR 0 2
12231: PUSH
12232: FOR_IN
12233: IFFALSE 12368
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
12235: LD_VAR 0 1
12239: PPUSH
12240: CALL_OW 302
12244: PUSH
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 247
12254: PUSH
12255: LD_INT 2
12257: EQUAL
12258: AND
12259: IFFALSE 12331
// begin if i = JMM and save_group < 4 then
12261: LD_VAR 0 1
12265: PUSH
12266: LD_EXP 37
12270: EQUAL
12271: PUSH
12272: LD_EXP 23
12276: PUSH
12277: LD_INT 4
12279: LESS
12280: AND
12281: IFFALSE 12285
// continue ;
12283: GO 12232
// if GetNation ( i ) = nation_american then
12285: LD_VAR 0 1
12289: PPUSH
12290: CALL_OW 248
12294: PUSH
12295: LD_INT 1
12297: EQUAL
12298: IFFALSE 12308
// veh_on_meta := true ;
12300: LD_ADDR_EXP 28
12304: PUSH
12305: LD_INT 1
12307: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
12308: LD_VAR 0 1
12312: PPUSH
12313: CALL_OW 311
12317: PPUSH
12318: CALL 12373 0 1
// RemoveUnit ( i ) ;
12322: LD_VAR 0 1
12326: PPUSH
12327: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
12331: LD_VAR 0 1
12335: PPUSH
12336: CALL_OW 302
12340: PUSH
12341: LD_VAR 0 1
12345: PPUSH
12346: CALL_OW 247
12350: PUSH
12351: LD_INT 1
12353: EQUAL
12354: AND
12355: IFFALSE 12366
// Save ( i ) ;
12357: LD_VAR 0 1
12361: PPUSH
12362: CALL 12373 0 1
// end ;
12366: GO 12232
12368: POP
12369: POP
// end ;
12370: PPOPN 2
12372: END
// export function Save ( i ) ; begin
12373: LD_INT 0
12375: PPUSH
// if i = JMM and save_counter >= 4 then
12376: LD_VAR 0 1
12380: PUSH
12381: LD_EXP 37
12385: EQUAL
12386: PUSH
12387: LD_EXP 36
12391: PUSH
12392: LD_INT 4
12394: GREATEREQUAL
12395: AND
12396: IFFALSE 12532
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12398: LD_EXP 24
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_INT 1
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 21
12415: PUSH
12416: LD_INT 1
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 69
12431: PUSH
12432: LD_INT 1
12434: GREATER
12435: AND
12436: IFFALSE 12493
// begin show_query := false ;
12438: LD_ADDR_EXP 24
12442: PUSH
12443: LD_INT 0
12445: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12446: LD_STRING Q2
12448: PPUSH
12449: CALL_OW 97
12453: PUSH
12454: LD_INT 1
12456: DOUBLE
12457: EQUAL
12458: IFTRUE 12462
12460: GO 12473
12462: POP
// wait_for_them := true ; 2 :
12463: LD_ADDR_EXP 25
12467: PUSH
12468: LD_INT 1
12470: ST_TO_ADDR
12471: GO 12493
12473: LD_INT 2
12475: DOUBLE
12476: EQUAL
12477: IFTRUE 12481
12479: GO 12492
12481: POP
// wait_for_them := false ; end ;
12482: LD_ADDR_EXP 25
12486: PUSH
12487: LD_INT 0
12489: ST_TO_ADDR
12490: GO 12493
12492: POP
// end ; save_counter := save_counter + 1 ;
12493: LD_ADDR_EXP 36
12497: PUSH
12498: LD_EXP 36
12502: PUSH
12503: LD_INT 1
12505: PLUS
12506: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12507: LD_ADDR_EXP 23
12511: PUSH
12512: LD_EXP 23
12516: PUSH
12517: LD_EXP 37
12521: ADD
12522: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12523: LD_EXP 37
12527: PPUSH
12528: CALL_OW 64
// end ; if i = Lisa then
12532: LD_VAR 0 1
12536: PUSH
12537: LD_EXP 40
12541: EQUAL
12542: IFFALSE 12583
// begin save_counter := save_counter + 1 ;
12544: LD_ADDR_EXP 36
12548: PUSH
12549: LD_EXP 36
12553: PUSH
12554: LD_INT 1
12556: PLUS
12557: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12558: LD_ADDR_EXP 23
12562: PUSH
12563: LD_EXP 23
12567: PUSH
12568: LD_EXP 40
12572: ADD
12573: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12574: LD_EXP 40
12578: PPUSH
12579: CALL_OW 64
// end ; if i = Bobby then
12583: LD_VAR 0 1
12587: PUSH
12588: LD_EXP 38
12592: EQUAL
12593: IFFALSE 12634
// begin save_counter := save_counter + 1 ;
12595: LD_ADDR_EXP 36
12599: PUSH
12600: LD_EXP 36
12604: PUSH
12605: LD_INT 1
12607: PLUS
12608: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12609: LD_ADDR_EXP 23
12613: PUSH
12614: LD_EXP 23
12618: PUSH
12619: LD_EXP 38
12623: ADD
12624: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12625: LD_EXP 38
12629: PPUSH
12630: CALL_OW 64
// end ; if i = Cyrus then
12634: LD_VAR 0 1
12638: PUSH
12639: LD_EXP 39
12643: EQUAL
12644: IFFALSE 12685
// begin save_counter := save_counter + 1 ;
12646: LD_ADDR_EXP 36
12650: PUSH
12651: LD_EXP 36
12655: PUSH
12656: LD_INT 1
12658: PLUS
12659: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12660: LD_ADDR_EXP 23
12664: PUSH
12665: LD_EXP 23
12669: PUSH
12670: LD_EXP 39
12674: ADD
12675: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12676: LD_EXP 39
12680: PPUSH
12681: CALL_OW 64
// end ; if i = Khatam then
12685: LD_VAR 0 1
12689: PUSH
12690: LD_EXP 41
12694: EQUAL
12695: IFFALSE 12736
// begin save_counter := save_counter + 1 ;
12697: LD_ADDR_EXP 36
12701: PUSH
12702: LD_EXP 36
12706: PUSH
12707: LD_INT 1
12709: PLUS
12710: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12711: LD_ADDR_EXP 23
12715: PUSH
12716: LD_EXP 23
12720: PUSH
12721: LD_EXP 41
12725: ADD
12726: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12727: LD_EXP 41
12731: PPUSH
12732: CALL_OW 64
// end ; if i = Frank then
12736: LD_VAR 0 1
12740: PUSH
12741: LD_EXP 51
12745: EQUAL
12746: IFFALSE 12787
// begin save_counter := save_counter + 1 ;
12748: LD_ADDR_EXP 36
12752: PUSH
12753: LD_EXP 36
12757: PUSH
12758: LD_INT 1
12760: PLUS
12761: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12762: LD_ADDR_EXP 23
12766: PUSH
12767: LD_EXP 23
12771: PUSH
12772: LD_EXP 51
12776: ADD
12777: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12778: LD_EXP 51
12782: PPUSH
12783: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12787: LD_VAR 0 1
12791: PUSH
12792: LD_EXP 37
12796: NONEQUAL
12797: PUSH
12798: LD_VAR 0 1
12802: PPUSH
12803: CALL_OW 302
12807: AND
12808: PUSH
12809: LD_VAR 0 1
12813: PPUSH
12814: CALL_OW 247
12818: PUSH
12819: LD_INT 1
12821: EQUAL
12822: AND
12823: PUSH
12824: LD_VAR 0 1
12828: PUSH
12829: LD_EXP 23
12833: IN
12834: NOT
12835: AND
12836: IFFALSE 12877
// begin save_counter := save_counter + 1 ;
12838: LD_ADDR_EXP 36
12842: PUSH
12843: LD_EXP 36
12847: PUSH
12848: LD_INT 1
12850: PLUS
12851: ST_TO_ADDR
// save_others := save_others ^ i ;
12852: LD_ADDR_EXP 22
12856: PUSH
12857: LD_EXP 22
12861: PUSH
12862: LD_VAR 0 1
12866: ADD
12867: ST_TO_ADDR
// RemoveUnit ( i ) ;
12868: LD_VAR 0 1
12872: PPUSH
12873: CALL_OW 64
// end ; end ;
12877: LD_VAR 0 2
12881: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12882: LD_EXP 24
12886: NOT
12887: PUSH
12888: LD_EXP 25
12892: NOT
12893: AND
12894: PUSH
12895: LD_INT 22
12897: PUSH
12898: LD_INT 1
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 21
12907: PUSH
12908: LD_INT 1
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PPUSH
12919: CALL_OW 69
12923: PUSH
12924: LD_INT 0
12926: EQUAL
12927: OR
12928: IFFALSE 12937
12930: GO 12932
12932: DISABLE
// EndMission ;
12933: CALL 12938 0 0
12937: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12938: LD_INT 0
12940: PPUSH
12941: PPUSH
12942: PPUSH
12943: PPUSH
12944: PPUSH
// wait ( 0 0$01 ) ;
12945: LD_INT 35
12947: PPUSH
12948: CALL_OW 67
// if tick <= 12 12$00 then
12952: LD_OWVAR 1
12956: PUSH
12957: LD_INT 25200
12959: LESSEQUAL
12960: IFFALSE 12969
// SetAchievement ( ACH_ASPEED_3 ) ;
12962: LD_STRING ACH_ASPEED_3
12964: PPUSH
12965: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12969: LD_EXP 23
12973: PUSH
12974: LD_EXP 22
12978: ADD
12979: PPUSH
12980: LD_INT 25
12982: PUSH
12983: LD_INT 4
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PPUSH
12990: CALL_OW 72
12994: PUSH
12995: LD_INT 0
12997: EQUAL
12998: IFFALSE 13014
// begin wait ( 3 ) ;
13000: LD_INT 3
13002: PPUSH
13003: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
13007: LD_STRING ACH_NOSCI
13009: PPUSH
13010: CALL_OW 543
// end ; m1 := solar_builded ;
13014: LD_ADDR_VAR 0 3
13018: PUSH
13019: LD_EXP 14
13023: ST_TO_ADDR
// m2 := veh_on_meta ;
13024: LD_ADDR_VAR 0 4
13028: PUSH
13029: LD_EXP 28
13033: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
13034: LD_ADDR_VAR 0 5
13038: PUSH
13039: LD_EXP 34
13043: PUSH
13044: LD_INT 0
13046: EQUAL
13047: ST_TO_ADDR
// if solar_builded then
13048: LD_EXP 14
13052: IFFALSE 13066
// AddMedal ( Solar1 , 1 ) else
13054: LD_STRING Solar1
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 101
13064: GO 13077
// AddMedal ( Solar1 , - 1 ) ;
13066: LD_STRING Solar1
13068: PPUSH
13069: LD_INT 1
13071: NEG
13072: PPUSH
13073: CALL_OW 101
// if veh_on_meta then
13077: LD_EXP 28
13081: IFFALSE 13095
// AddMedal ( Solar2 , 1 ) else
13083: LD_STRING Solar2
13085: PPUSH
13086: LD_INT 1
13088: PPUSH
13089: CALL_OW 101
13093: GO 13125
// if solar_builded then
13095: LD_EXP 14
13099: IFFALSE 13114
// AddMedal ( Solar2 , - 1 ) else
13101: LD_STRING Solar2
13103: PPUSH
13104: LD_INT 1
13106: NEG
13107: PPUSH
13108: CALL_OW 101
13112: GO 13125
// AddMedal ( Solar2 , - 2 ) ;
13114: LD_STRING Solar2
13116: PPUSH
13117: LD_INT 2
13119: NEG
13120: PPUSH
13121: CALL_OW 101
// if lose_counter = 0 then
13125: LD_EXP 34
13129: PUSH
13130: LD_INT 0
13132: EQUAL
13133: IFFALSE 13147
// AddMedal ( No , 1 ) else
13135: LD_STRING No
13137: PPUSH
13138: LD_INT 1
13140: PPUSH
13141: CALL_OW 101
13145: GO 13191
// if lose_counter > 0 and lose_counter < 4 then
13147: LD_EXP 34
13151: PUSH
13152: LD_INT 0
13154: GREATER
13155: PUSH
13156: LD_EXP 34
13160: PUSH
13161: LD_INT 4
13163: LESS
13164: AND
13165: IFFALSE 13180
// AddMedal ( No , - 1 ) else
13167: LD_STRING No
13169: PPUSH
13170: LD_INT 1
13172: NEG
13173: PPUSH
13174: CALL_OW 101
13178: GO 13191
// AddMedal ( UpTo4 , - 1 ) ;
13180: LD_STRING UpTo4
13182: PPUSH
13183: LD_INT 1
13185: NEG
13186: PPUSH
13187: CALL_OW 101
// GiveMedals ( MAIN ) ;
13191: LD_STRING MAIN
13193: PPUSH
13194: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
13198: LD_OWVAR 67
13202: PUSH
13203: LD_INT 3
13205: GREATEREQUAL
13206: PUSH
13207: LD_VAR 0 3
13211: AND
13212: PUSH
13213: LD_VAR 0 4
13217: AND
13218: PUSH
13219: LD_VAR 0 5
13223: AND
13224: IFFALSE 13236
// SetAchievementEX ( ACH_AMER , 3 ) ;
13226: LD_STRING ACH_AMER
13228: PPUSH
13229: LD_INT 3
13231: PPUSH
13232: CALL_OW 564
// if IsDead ( Pokryshkin ) then
13236: LD_EXP 52
13240: PPUSH
13241: CALL_OW 301
13245: IFFALSE 13301
// begin stop_talking := true ;
13247: LD_ADDR_OWVAR 56
13251: PUSH
13252: LD_INT 1
13254: ST_TO_ADDR
// for i in save_group union save_others do
13255: LD_ADDR_VAR 0 2
13259: PUSH
13260: LD_EXP 23
13264: PUSH
13265: LD_EXP 22
13269: UNION
13270: PUSH
13271: FOR_IN
13272: IFFALSE 13291
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
13274: LD_VAR 0 2
13278: PPUSH
13279: LD_INT 1
13281: PPUSH
13282: LD_INT 1500
13284: PPUSH
13285: CALL_OW 591
13289: GO 13271
13291: POP
13292: POP
// stop_talking := false ;
13293: LD_ADDR_OWVAR 56
13297: PUSH
13298: LD_INT 0
13300: ST_TO_ADDR
// end ; RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_american ] ] ) ) ;
13301: LD_INT 22
13303: PUSH
13304: LD_INT 1
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PUSH
13311: LD_INT 23
13313: PUSH
13314: LD_INT 1
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: PPUSH
13325: CALL_OW 69
13329: PPUSH
13330: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
13334: LD_EXP 37
13338: PPUSH
13339: LD_EXP 2
13343: PUSH
13344: LD_STRING JMM
13346: STR
13347: PPUSH
13348: CALL_OW 38
// if Bobby in save_group then
13352: LD_EXP 38
13356: PUSH
13357: LD_EXP 23
13361: IN
13362: IFFALSE 13382
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
13364: LD_EXP 38
13368: PPUSH
13369: LD_EXP 2
13373: PUSH
13374: LD_STRING Bobby
13376: STR
13377: PPUSH
13378: CALL_OW 38
// if Cyrus in save_group then
13382: LD_EXP 39
13386: PUSH
13387: LD_EXP 23
13391: IN
13392: IFFALSE 13412
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
13394: LD_EXP 39
13398: PPUSH
13399: LD_EXP 2
13403: PUSH
13404: LD_STRING Cyrus
13406: STR
13407: PPUSH
13408: CALL_OW 38
// if Lisa in save_group then
13412: LD_EXP 40
13416: PUSH
13417: LD_EXP 23
13421: IN
13422: IFFALSE 13442
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13424: LD_EXP 40
13428: PPUSH
13429: LD_EXP 2
13433: PUSH
13434: LD_STRING Lisa
13436: STR
13437: PPUSH
13438: CALL_OW 38
// if Frank in save_group then
13442: LD_EXP 51
13446: PUSH
13447: LD_EXP 23
13451: IN
13452: IFFALSE 13479
// begin ToLua ( enableBioCharacter(BIO_FRANK) ) ;
13454: LD_STRING enableBioCharacter(BIO_FRANK)
13456: PPUSH
13457: CALL_OW 559
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13461: LD_EXP 51
13465: PPUSH
13466: LD_EXP 2
13470: PUSH
13471: LD_STRING Frank
13473: STR
13474: PPUSH
13475: CALL_OW 38
// end ; if Khatam in save_group then
13479: LD_EXP 41
13483: PUSH
13484: LD_EXP 23
13488: IN
13489: IFFALSE 13509
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13491: LD_EXP 41
13495: PPUSH
13496: LD_EXP 2
13500: PUSH
13501: LD_STRING Khatam
13503: STR
13504: PPUSH
13505: CALL_OW 38
// if save_others then
13509: LD_EXP 22
13513: IFFALSE 13527
// SaveCharacters ( save_others , 03_others ) ;
13515: LD_EXP 22
13519: PPUSH
13520: LD_STRING 03_others
13522: PPUSH
13523: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ANDY) ) ;
13527: LD_STRING enableBioCharacter(BIO_ANDY)
13529: PPUSH
13530: CALL_OW 559
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13534: LD_EXP 45
13538: PUSH
13539: LD_EXP 45
13543: PPUSH
13544: CALL_OW 302
13548: AND
13549: PUSH
13550: LD_EXP 27
13554: AND
13555: IFFALSE 13567
// begin ResetFog ;
13557: CALL_OW 335
// DisplayEndingScene ;
13561: CALL 13589 0 0
// end else
13565: GO 13580
// DeleteCharacters ( mission_prefix & Cornel ) ;
13567: LD_EXP 2
13571: PUSH
13572: LD_STRING Cornel
13574: STR
13575: PPUSH
13576: CALL_OW 40
// YouWin ;
13580: CALL_OW 103
// end ;
13584: LD_VAR 0 1
13588: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13589: LD_INT 0
13591: PPUSH
13592: PPUSH
13593: PPUSH
13594: PPUSH
13595: PPUSH
13596: PPUSH
// InGameOn ;
13597: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13601: LD_INT 208
13603: PPUSH
13604: LD_INT 62
13606: PPUSH
13607: LD_INT 1
13609: PPUSH
13610: LD_INT 10
13612: NEG
13613: PPUSH
13614: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13618: LD_INT 208
13620: PPUSH
13621: LD_INT 62
13623: PPUSH
13624: LD_INT 1
13626: PPUSH
13627: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13631: LD_ADDR_VAR 0 3
13635: PUSH
13636: LD_INT 22
13638: PUSH
13639: LD_INT 3
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: LD_INT 2
13648: PUSH
13649: LD_INT 21
13651: PUSH
13652: LD_INT 2
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PUSH
13659: LD_INT 21
13661: PUSH
13662: LD_INT 1
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PPUSH
13678: CALL_OW 69
13682: ST_TO_ADDR
// if filter then
13683: LD_VAR 0 3
13687: IFFALSE 13715
// for i in filter do
13689: LD_ADDR_VAR 0 2
13693: PUSH
13694: LD_VAR 0 3
13698: PUSH
13699: FOR_IN
13700: IFFALSE 13713
// RemoveUnit ( i ) ;
13702: LD_VAR 0 2
13706: PPUSH
13707: CALL_OW 64
13711: GO 13699
13713: POP
13714: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13715: LD_ADDR_VAR 0 3
13719: PUSH
13720: LD_INT 22
13722: PUSH
13723: LD_INT 4
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 21
13732: PUSH
13733: LD_INT 1
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PPUSH
13744: CALL_OW 69
13748: ST_TO_ADDR
// if filter then
13749: LD_VAR 0 3
13753: IFFALSE 13784
// for i in filter do
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_VAR 0 3
13764: PUSH
13765: FOR_IN
13766: IFFALSE 13782
// SetLives ( i , 0 ) ;
13768: LD_VAR 0 2
13772: PPUSH
13773: LD_INT 0
13775: PPUSH
13776: CALL_OW 234
13780: GO 13765
13782: POP
13783: POP
// uc_side := 4 ;
13784: LD_ADDR_OWVAR 20
13788: PUSH
13789: LD_INT 4
13791: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13792: LD_ADDR_VAR 0 4
13796: PUSH
13797: LD_STRING Cornell
13799: PPUSH
13800: LD_INT 0
13802: PPUSH
13803: LD_STRING 
13805: PPUSH
13806: CALL 39251 0 3
13810: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13811: LD_VAR 0 4
13815: PPUSH
13816: LD_INT 208
13818: PPUSH
13819: LD_INT 62
13821: PPUSH
13822: LD_INT 0
13824: PPUSH
13825: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13829: LD_VAR 0 4
13833: PPUSH
13834: LD_INT 100
13836: PPUSH
13837: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13841: LD_INT 3
13843: PPUSH
13844: LD_VAR 0 4
13848: PPUSH
13849: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13853: LD_INT 4
13855: PPUSH
13856: LD_INT 3
13858: PPUSH
13859: LD_INT 1
13861: PPUSH
13862: LD_INT 1
13864: PPUSH
13865: CALL_OW 80
// uc_side := 3 ;
13869: LD_ADDR_OWVAR 20
13873: PUSH
13874: LD_INT 3
13876: ST_TO_ADDR
// uc_nation := 3 ;
13877: LD_ADDR_OWVAR 21
13881: PUSH
13882: LD_INT 3
13884: ST_TO_ADDR
// InitHc ;
13885: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13889: LD_ADDR_VAR 0 5
13893: PUSH
13894: LD_STRING Mikhail
13896: PPUSH
13897: LD_INT 0
13899: PPUSH
13900: LD_STRING 
13902: PPUSH
13903: CALL 39251 0 3
13907: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13908: LD_INT 1
13910: PPUSH
13911: LD_INT 1
13913: PPUSH
13914: LD_INT 0
13916: PPUSH
13917: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13921: LD_ADDR_VAR 0 6
13925: PUSH
13926: LD_VAR 0 6
13930: PUSH
13931: CALL_OW 44
13935: ADD
13936: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13937: LD_ADDR_VAR 0 6
13941: PUSH
13942: LD_VAR 0 6
13946: PUSH
13947: CALL_OW 44
13951: ADD
13952: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13953: LD_INT 2
13955: PPUSH
13956: LD_INT 4
13958: PPUSH
13959: LD_INT 0
13961: PPUSH
13962: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13966: LD_ADDR_VAR 0 6
13970: PUSH
13971: LD_VAR 0 6
13975: PUSH
13976: CALL_OW 44
13980: ADD
13981: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13982: LD_VAR 0 5
13986: PPUSH
13987: LD_INT 17
13989: PPUSH
13990: LD_INT 0
13992: PPUSH
13993: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13997: LD_VAR 0 5
14001: PPUSH
14002: LD_INT 210
14004: PPUSH
14005: LD_INT 63
14007: PPUSH
14008: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
14012: LD_VAR 0 5
14016: PPUSH
14017: LD_INT 208
14019: PPUSH
14020: LD_INT 62
14022: PPUSH
14023: CALL_OW 178
// for i in fake_russians do
14027: LD_ADDR_VAR 0 2
14031: PUSH
14032: LD_VAR 0 6
14036: PUSH
14037: FOR_IN
14038: IFFALSE 14116
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
14040: LD_VAR 0 2
14044: PPUSH
14045: LD_INT 17
14047: PPUSH
14048: LD_INT 0
14050: PPUSH
14051: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
14055: LD_VAR 0 2
14059: PPUSH
14060: LD_INT 215
14062: PPUSH
14063: LD_INT 67
14065: PPUSH
14066: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
14070: LD_VAR 0 2
14074: PPUSH
14075: LD_INT 208
14077: PPUSH
14078: LD_INT 62
14080: PPUSH
14081: CALL_OW 178
// if GetClass ( i ) = 4 then
14085: LD_VAR 0 2
14089: PPUSH
14090: CALL_OW 257
14094: PUSH
14095: LD_INT 4
14097: EQUAL
14098: IFFALSE 14114
// ComHeal ( i , fake_cornel ) ;
14100: LD_VAR 0 2
14104: PPUSH
14105: LD_VAR 0 4
14109: PPUSH
14110: CALL_OW 128
// end ;
14114: GO 14037
14116: POP
14117: POP
// Wait ( 0 0$01 ) ;
14118: LD_INT 35
14120: PPUSH
14121: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
14125: LD_INT 208
14127: PPUSH
14128: LD_INT 62
14130: PPUSH
14131: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
14135: LD_INT 208
14137: PPUSH
14138: LD_INT 62
14140: PPUSH
14141: LD_INT 1
14143: PPUSH
14144: LD_INT 10
14146: NEG
14147: PPUSH
14148: CALL_OW 330
// Wait ( 0 0$15 ) ;
14152: LD_INT 525
14154: PPUSH
14155: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
14159: LD_INT 208
14161: PPUSH
14162: LD_INT 62
14164: PPUSH
14165: LD_INT 1
14167: PPUSH
14168: CALL_OW 331
// ResetFog ;
14172: CALL_OW 335
// InGameOff ;
14176: CALL_OW 9
// end ;
14180: LD_VAR 0 1
14184: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
14185: LD_INT 10
14187: PPUSH
14188: LD_INT 22
14190: PUSH
14191: LD_INT 1
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PPUSH
14198: CALL_OW 70
14202: PUSH
14203: LD_EXP 44
14207: PPUSH
14208: CALL_OW 302
14212: AND
14213: PUSH
14214: LD_INT 22
14216: PUSH
14217: LD_INT 1
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PPUSH
14224: CALL_OW 69
14228: PPUSH
14229: LD_EXP 44
14233: PPUSH
14234: CALL_OW 74
14238: PPUSH
14239: LD_EXP 44
14243: PPUSH
14244: CALL_OW 296
14248: PUSH
14249: LD_INT 30
14251: LESS
14252: OR
14253: IFFALSE 14304
14255: GO 14257
14257: DISABLE
// begin enable ;
14258: ENABLE
// powell_warn := powell_warn + 1 ;
14259: LD_ADDR_EXP 35
14263: PUSH
14264: LD_EXP 35
14268: PUSH
14269: LD_INT 1
14271: PLUS
14272: ST_TO_ADDR
// if powell_warn = 3 then
14273: LD_EXP 35
14277: PUSH
14278: LD_INT 3
14280: EQUAL
14281: IFFALSE 14292
// begin YouLost ( 5 ) ;
14283: LD_STRING 5
14285: PPUSH
14286: CALL_OW 104
// exit ;
14290: GO 14304
// end ; SayRadioNoFace ( Powell , DWarn-Pow-1 ) ;
14292: LD_EXP 46
14296: PPUSH
14297: LD_STRING DWarn-Pow-1
14299: PPUSH
14300: CALL_OW 586
// end ; end_of_file
14304: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
14305: LD_EXP 8
14309: IFFALSE 16146
14311: GO 14313
14313: DISABLE
14314: LD_INT 0
14316: PPUSH
14317: PPUSH
14318: PPUSH
14319: PPUSH
14320: PPUSH
14321: PPUSH
14322: PPUSH
14323: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
14324: LD_EXP 44
14328: PUSH
14329: LD_EXP 45
14333: ADD
14334: PUSH
14335: LD_EXP 6
14339: ADD
14340: PPUSH
14341: LD_INT 250
14343: PPUSH
14344: LD_INT 120
14346: PPUSH
14347: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
14351: LD_ADDR_VAR 0 2
14355: PUSH
14356: LD_EXP 6
14360: PPUSH
14361: LD_INT 25
14363: PUSH
14364: LD_INT 2
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PPUSH
14371: CALL_OW 72
14375: PUSH
14376: LD_EXP 45
14380: DIFF
14381: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
14382: LD_ADDR_VAR 0 3
14386: PUSH
14387: LD_EXP 6
14391: PPUSH
14392: LD_INT 21
14394: PUSH
14395: LD_INT 1
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PPUSH
14402: CALL_OW 72
14406: PUSH
14407: LD_VAR 0 2
14411: DIFF
14412: ST_TO_ADDR
// if not has_eng then
14413: LD_VAR 0 2
14417: NOT
14418: IFFALSE 14501
// begin uc_side := 4 ;
14420: LD_ADDR_OWVAR 20
14424: PUSH
14425: LD_INT 4
14427: ST_TO_ADDR
// uc_nation := 1 ;
14428: LD_ADDR_OWVAR 21
14432: PUSH
14433: LD_INT 1
14435: ST_TO_ADDR
// bc_type := b_depot ;
14436: LD_ADDR_OWVAR 42
14440: PUSH
14441: LD_INT 0
14443: ST_TO_ADDR
// bc_level := 2 ;
14444: LD_ADDR_OWVAR 43
14448: PUSH
14449: LD_INT 2
14451: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14452: LD_ADDR_VAR 0 4
14456: PUSH
14457: LD_INT 264
14459: PPUSH
14460: LD_INT 120
14462: PPUSH
14463: LD_INT 4
14465: PPUSH
14466: CALL_OW 47
14470: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14471: LD_INT 264
14473: PPUSH
14474: LD_INT 120
14476: PPUSH
14477: LD_INT 4
14479: PPUSH
14480: LD_INT 10
14482: NEG
14483: PPUSH
14484: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14488: LD_INT 264
14490: PPUSH
14491: LD_INT 120
14493: PPUSH
14494: LD_INT 4
14496: PPUSH
14497: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14501: LD_INT 35
14503: PPUSH
14504: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14508: LD_EXP 44
14512: PPUSH
14513: LD_INT 10
14515: PPUSH
14516: CALL_OW 308
14520: PUSH
14521: LD_EXP 44
14525: PPUSH
14526: CALL_OW 310
14530: PPUSH
14531: LD_INT 10
14533: PPUSH
14534: CALL_OW 308
14538: OR
14539: IFFALSE 14501
// if has_eng and not dep then
14541: LD_VAR 0 2
14545: PUSH
14546: LD_VAR 0 4
14550: NOT
14551: AND
14552: IFFALSE 14702
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14554: LD_VAR 0 2
14558: PPUSH
14559: LD_INT 0
14561: PPUSH
14562: LD_INT 264
14564: PPUSH
14565: LD_INT 120
14567: PPUSH
14568: LD_INT 4
14570: PPUSH
14571: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14575: LD_INT 35
14577: PPUSH
14578: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14582: LD_INT 22
14584: PUSH
14585: LD_INT 4
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: LD_INT 30
14594: PUSH
14595: LD_INT 0
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PPUSH
14606: CALL_OW 69
14610: IFFALSE 14575
// ComMoveXY ( filter , 264 , 120 ) ;
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_INT 264
14619: PPUSH
14620: LD_INT 120
14622: PPUSH
14623: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14627: LD_INT 35
14629: PPUSH
14630: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14634: LD_INT 22
14636: PUSH
14637: LD_INT 4
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PUSH
14644: LD_INT 30
14646: PUSH
14647: LD_INT 0
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 3
14656: PUSH
14657: LD_INT 57
14659: PUSH
14660: EMPTY
14661: LIST
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: LIST
14671: PPUSH
14672: CALL_OW 69
14676: IFFALSE 14627
// ComMoveXY ( filter , 247 , 113 ) ;
14678: LD_VAR 0 3
14682: PPUSH
14683: LD_INT 247
14685: PPUSH
14686: LD_INT 113
14688: PPUSH
14689: CALL_OW 111
// Wait ( 0 0$2 ) ;
14693: LD_INT 70
14695: PPUSH
14696: CALL_OW 67
// end else
14700: GO 14714
// begin SetSide ( dep , 4 ) ;
14702: LD_VAR 0 4
14706: PPUSH
14707: LD_INT 4
14709: PPUSH
14710: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14714: LD_ADDR_VAR 0 4
14718: PUSH
14719: LD_INT 22
14721: PUSH
14722: LD_INT 4
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 30
14731: PUSH
14732: LD_INT 0
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PPUSH
14743: CALL_OW 69
14747: PUSH
14748: LD_INT 1
14750: ARRAY
14751: ST_TO_ADDR
// if not has_eng then
14752: LD_VAR 0 2
14756: NOT
14757: IFFALSE 14844
// for i = 1 to 2 do
14759: LD_ADDR_VAR 0 1
14763: PUSH
14764: DOUBLE
14765: LD_INT 1
14767: DEC
14768: ST_TO_ADDR
14769: LD_INT 2
14771: PUSH
14772: FOR_TO
14773: IFFALSE 14842
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14775: LD_VAR 0 3
14779: PUSH
14780: LD_INT 1
14782: ARRAY
14783: PPUSH
14784: LD_VAR 0 4
14788: PPUSH
14789: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14793: LD_VAR 0 3
14797: PUSH
14798: LD_INT 1
14800: ARRAY
14801: PPUSH
14802: LD_INT 2
14804: PPUSH
14805: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14809: LD_VAR 0 3
14813: PUSH
14814: LD_INT 1
14816: ARRAY
14817: PPUSH
14818: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14822: LD_ADDR_VAR 0 3
14826: PUSH
14827: LD_VAR 0 3
14831: PPUSH
14832: LD_INT 1
14834: PPUSH
14835: CALL_OW 3
14839: ST_TO_ADDR
// end ;
14840: GO 14772
14842: POP
14843: POP
// if IsInUnit ( Cornel ) then
14844: LD_EXP 44
14848: PPUSH
14849: CALL_OW 310
14853: IFFALSE 14931
// begin cargo := IsInUnit ( Cornel ) ;
14855: LD_ADDR_VAR 0 7
14859: PUSH
14860: LD_EXP 44
14864: PPUSH
14865: CALL_OW 310
14869: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14870: LD_VAR 0 7
14874: PPUSH
14875: LD_INT 1
14877: PPUSH
14878: CALL_OW 289
14882: IFFALSE 14893
// ComUnload ( cargo ) ;
14884: LD_VAR 0 7
14888: PPUSH
14889: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14893: LD_EXP 44
14897: PPUSH
14898: LD_INT 235
14900: PPUSH
14901: LD_INT 122
14903: PPUSH
14904: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14908: LD_EXP 44
14912: PPUSH
14913: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14917: LD_EXP 44
14921: PPUSH
14922: LD_VAR 0 4
14926: PPUSH
14927: CALL_OW 180
// end ; if Bierezov then
14931: LD_EXP 45
14935: IFFALSE 14983
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14937: LD_EXP 45
14941: PPUSH
14942: LD_INT 260
14944: PPUSH
14945: LD_INT 120
14947: PPUSH
14948: CALL_OW 111
// if dep then
14952: LD_VAR 0 4
14956: IFFALSE 14974
// AddComEnterUnit ( Bierezov , dep ) else
14958: LD_EXP 45
14962: PPUSH
14963: LD_VAR 0 4
14967: PPUSH
14968: CALL_OW 180
14972: GO 14983
// AddComHold ( Bierezov ) ;
14974: LD_EXP 45
14978: PPUSH
14979: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14983: LD_INT 525
14985: PPUSH
14986: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14990: LD_ADDR_VAR 0 2
14994: PUSH
14995: LD_INT 22
14997: PUSH
14998: LD_INT 4
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 25
15007: PUSH
15008: LD_INT 2
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: PPUSH
15019: CALL_OW 69
15023: PUSH
15024: LD_EXP 45
15028: DIFF
15029: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15030: LD_INT 35
15032: PPUSH
15033: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
15037: LD_ADDR_VAR 0 6
15041: PUSH
15042: LD_INT 10
15044: PPUSH
15045: CALL_OW 435
15049: ST_TO_ADDR
// if crates then
15050: LD_VAR 0 6
15054: IFFALSE 15083
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
15056: LD_VAR 0 2
15060: PPUSH
15061: LD_VAR 0 6
15065: PUSH
15066: LD_INT 1
15068: ARRAY
15069: PPUSH
15070: LD_VAR 0 6
15074: PUSH
15075: LD_INT 2
15077: ARRAY
15078: PPUSH
15079: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
15083: LD_VAR 0 4
15087: PPUSH
15088: CALL_OW 274
15092: PPUSH
15093: LD_INT 1
15095: PPUSH
15096: CALL_OW 275
15100: PUSH
15101: LD_INT 40
15103: GREATEREQUAL
15104: IFFALSE 15030
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
15106: LD_ADDR_VAR 0 5
15110: PUSH
15111: LD_INT 4
15113: PUSH
15114: LD_INT 256
15116: PUSH
15117: LD_INT 111
15119: PUSH
15120: LD_INT 2
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: PUSH
15129: LD_INT 31
15131: PUSH
15132: LD_INT 243
15134: PUSH
15135: LD_INT 112
15137: PUSH
15138: LD_INT 2
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: PUSH
15147: LD_INT 31
15149: PUSH
15150: LD_INT 254
15152: PUSH
15153: LD_INT 114
15155: PUSH
15156: LD_INT 2
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: LIST
15169: ST_TO_ADDR
// for i in blist do
15170: LD_ADDR_VAR 0 1
15174: PUSH
15175: LD_VAR 0 5
15179: PUSH
15180: FOR_IN
15181: IFFALSE 15230
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
15183: LD_VAR 0 2
15187: PPUSH
15188: LD_VAR 0 1
15192: PUSH
15193: LD_INT 1
15195: ARRAY
15196: PPUSH
15197: LD_VAR 0 1
15201: PUSH
15202: LD_INT 2
15204: ARRAY
15205: PPUSH
15206: LD_VAR 0 1
15210: PUSH
15211: LD_INT 3
15213: ARRAY
15214: PPUSH
15215: LD_VAR 0 1
15219: PUSH
15220: LD_INT 4
15222: ARRAY
15223: PPUSH
15224: CALL_OW 205
15228: GO 15180
15230: POP
15231: POP
// repeat wait ( 0 0$01 ) ;
15232: LD_INT 35
15234: PPUSH
15235: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
15239: LD_INT 22
15241: PUSH
15242: LD_INT 4
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PUSH
15249: LD_INT 30
15251: PUSH
15252: LD_INT 4
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: LD_INT 3
15261: PUSH
15262: LD_INT 57
15264: PUSH
15265: EMPTY
15266: LIST
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: LIST
15276: PPUSH
15277: CALL_OW 69
15281: IFFALSE 15232
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15283: LD_VAR 0 3
15287: PPUSH
15288: LD_INT 22
15290: PUSH
15291: LD_INT 4
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 30
15300: PUSH
15301: LD_INT 4
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PPUSH
15312: CALL_OW 69
15316: PUSH
15317: LD_INT 1
15319: ARRAY
15320: PPUSH
15321: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
15325: LD_VAR 0 3
15329: PPUSH
15330: LD_INT 1
15332: PPUSH
15333: CALL_OW 183
// if has_eng > 1 then
15337: LD_VAR 0 2
15341: PUSH
15342: LD_INT 1
15344: GREATER
15345: IFFALSE 15487
// for i = has_eng downto 2 do
15347: LD_ADDR_VAR 0 1
15351: PUSH
15352: DOUBLE
15353: LD_VAR 0 2
15357: INC
15358: ST_TO_ADDR
15359: LD_INT 2
15361: PUSH
15362: FOR_DOWNTO
15363: IFFALSE 15485
// begin if IsInUnit ( has_eng [ i ] ) then
15365: LD_VAR 0 2
15369: PUSH
15370: LD_VAR 0 1
15374: ARRAY
15375: PPUSH
15376: CALL_OW 310
15380: IFFALSE 15397
// ComExitBuilding ( has_eng [ i ] ) ;
15382: LD_VAR 0 2
15386: PUSH
15387: LD_VAR 0 1
15391: ARRAY
15392: PPUSH
15393: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15397: LD_VAR 0 2
15401: PUSH
15402: LD_VAR 0 1
15406: ARRAY
15407: PPUSH
15408: LD_INT 22
15410: PUSH
15411: LD_INT 4
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 30
15420: PUSH
15421: LD_INT 4
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PPUSH
15432: CALL_OW 69
15436: PUSH
15437: LD_INT 1
15439: ARRAY
15440: PPUSH
15441: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15445: LD_VAR 0 2
15449: PUSH
15450: LD_VAR 0 1
15454: ARRAY
15455: PPUSH
15456: LD_INT 1
15458: PPUSH
15459: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15463: LD_ADDR_VAR 0 2
15467: PUSH
15468: LD_VAR 0 2
15472: PPUSH
15473: LD_VAR 0 1
15477: PPUSH
15478: CALL_OW 3
15482: ST_TO_ADDR
// end ;
15483: GO 15362
15485: POP
15486: POP
// repeat wait ( 0 0$01 ) ;
15487: LD_INT 35
15489: PPUSH
15490: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15494: LD_INT 22
15496: PUSH
15497: LD_INT 4
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: LD_INT 30
15506: PUSH
15507: LD_INT 31
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 3
15516: PUSH
15517: LD_INT 57
15519: PUSH
15520: EMPTY
15521: LIST
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: PPUSH
15532: CALL_OW 69
15536: PUSH
15537: LD_INT 1
15539: GREATER
15540: IFFALSE 15487
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15542: LD_ADDR_VAR 0 8
15546: PUSH
15547: LD_EXP 6
15551: PPUSH
15552: LD_INT 25
15554: PUSH
15555: LD_INT 1
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PPUSH
15562: CALL_OW 72
15566: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15567: LD_ADDR_VAR 0 1
15571: PUSH
15572: DOUBLE
15573: LD_INT 1
15575: DEC
15576: ST_TO_ADDR
15577: LD_INT 22
15579: PUSH
15580: LD_INT 4
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 30
15589: PUSH
15590: LD_INT 31
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 3
15599: PUSH
15600: LD_INT 57
15602: PUSH
15603: EMPTY
15604: LIST
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: LIST
15614: PPUSH
15615: CALL_OW 69
15619: PUSH
15620: FOR_TO
15621: IFFALSE 15705
// begin if not sol [ i ] then
15623: LD_VAR 0 8
15627: PUSH
15628: LD_VAR 0 1
15632: ARRAY
15633: NOT
15634: IFFALSE 15638
// break ;
15636: GO 15705
// ComExitBuilding ( sol [ i ] ) ;
15638: LD_VAR 0 8
15642: PUSH
15643: LD_VAR 0 1
15647: ARRAY
15648: PPUSH
15649: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15653: LD_VAR 0 8
15657: PUSH
15658: LD_VAR 0 1
15662: ARRAY
15663: PPUSH
15664: LD_INT 22
15666: PUSH
15667: LD_INT 4
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 30
15676: PUSH
15677: LD_INT 31
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PPUSH
15688: CALL_OW 69
15692: PUSH
15693: LD_VAR 0 1
15697: ARRAY
15698: PPUSH
15699: CALL_OW 180
// end ;
15703: GO 15620
15705: POP
15706: POP
// if sol > 3 then
15707: LD_VAR 0 8
15711: PUSH
15712: LD_INT 3
15714: GREATER
15715: IFFALSE 15832
// begin ComExitBuilding ( sol [ 3 ] ) ;
15717: LD_VAR 0 8
15721: PUSH
15722: LD_INT 3
15724: ARRAY
15725: PPUSH
15726: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15730: LD_VAR 0 8
15734: PUSH
15735: LD_INT 3
15737: ARRAY
15738: PPUSH
15739: LD_INT 246
15741: PPUSH
15742: LD_INT 94
15744: PPUSH
15745: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15749: LD_VAR 0 8
15753: PUSH
15754: LD_INT 3
15756: ARRAY
15757: PPUSH
15758: LD_INT 175
15760: PPUSH
15761: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15765: LD_VAR 0 8
15769: PUSH
15770: LD_INT 3
15772: ARRAY
15773: PPUSH
15774: LD_INT 224
15776: PPUSH
15777: LD_INT 90
15779: PPUSH
15780: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15784: LD_VAR 0 8
15788: PUSH
15789: LD_INT 3
15791: ARRAY
15792: PPUSH
15793: LD_INT 245
15795: PPUSH
15796: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15800: LD_VAR 0 8
15804: PUSH
15805: LD_INT 3
15807: ARRAY
15808: PPUSH
15809: LD_INT 223
15811: PPUSH
15812: LD_INT 110
15814: PPUSH
15815: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15819: LD_VAR 0 8
15823: PUSH
15824: LD_INT 3
15826: ARRAY
15827: PPUSH
15828: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15832: LD_VAR 0 2
15836: PPUSH
15837: LD_VAR 0 4
15841: PPUSH
15842: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15846: LD_INT 22
15848: PUSH
15849: LD_INT 4
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 30
15858: PUSH
15859: LD_INT 4
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PPUSH
15870: CALL_OW 69
15874: PUSH
15875: LD_INT 1
15877: ARRAY
15878: PPUSH
15879: CALL_OW 313
15883: PUSH
15884: LD_INT 6
15886: LESS
15887: IFFALSE 15951
// begin if IsInUnit ( Cornel ) then
15889: LD_EXP 44
15893: PPUSH
15894: CALL_OW 310
15898: IFFALSE 15909
// ComExitBuilding ( Cornel ) ;
15900: LD_EXP 44
15904: PPUSH
15905: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15909: LD_EXP 44
15913: PPUSH
15914: LD_INT 22
15916: PUSH
15917: LD_INT 4
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 30
15926: PUSH
15927: LD_INT 4
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PPUSH
15938: CALL_OW 69
15942: PUSH
15943: LD_INT 1
15945: ARRAY
15946: PPUSH
15947: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15951: LD_INT 35
15953: PPUSH
15954: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15958: LD_ADDR_VAR 0 3
15962: PUSH
15963: LD_INT 22
15965: PUSH
15966: LD_INT 4
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 21
15975: PUSH
15976: LD_INT 3
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: LD_INT 3
15985: PUSH
15986: LD_INT 24
15988: PUSH
15989: LD_INT 1000
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: LIST
16004: PPUSH
16005: CALL_OW 69
16009: ST_TO_ADDR
// if filter and has_eng then
16010: LD_VAR 0 3
16014: PUSH
16015: LD_VAR 0 2
16019: AND
16020: IFFALSE 16086
// begin for i in has_eng do
16022: LD_ADDR_VAR 0 1
16026: PUSH
16027: LD_VAR 0 2
16031: PUSH
16032: FOR_IN
16033: IFFALSE 16082
// begin if IsInUnit ( i ) then
16035: LD_VAR 0 1
16039: PPUSH
16040: CALL_OW 310
16044: IFFALSE 16055
// ComExitBuilding ( i ) ;
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL_OW 122
// Wait ( 3 ) ;
16055: LD_INT 3
16057: PPUSH
16058: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
16062: LD_VAR 0 1
16066: PPUSH
16067: LD_VAR 0 3
16071: PUSH
16072: LD_INT 1
16074: ARRAY
16075: PPUSH
16076: CALL_OW 130
// end ;
16080: GO 16032
16082: POP
16083: POP
// end else
16084: GO 16140
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
16086: LD_VAR 0 2
16090: PUSH
16091: LD_VAR 0 2
16095: PPUSH
16096: LD_INT 56
16098: PUSH
16099: EMPTY
16100: LIST
16101: PPUSH
16102: CALL_OW 72
16106: AND
16107: IFFALSE 16140
// for i in has_eng do
16109: LD_ADDR_VAR 0 1
16113: PUSH
16114: LD_VAR 0 2
16118: PUSH
16119: FOR_IN
16120: IFFALSE 16138
// ComEnterUnit ( i , dep ) ;
16122: LD_VAR 0 1
16126: PPUSH
16127: LD_VAR 0 4
16131: PPUSH
16132: CALL_OW 120
16136: GO 16119
16138: POP
16139: POP
// until cornel_prepared ;
16140: LD_EXP 11
16144: IFFALSE 15951
// end ;
16146: PPOPN 8
16148: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
16149: LD_EXP 11
16153: IFFALSE 16589
16155: GO 16157
16157: DISABLE
16158: LD_INT 0
16160: PPUSH
16161: PPUSH
16162: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
16163: LD_ADDR_VAR 0 2
16167: PUSH
16168: LD_INT 22
16170: PUSH
16171: LD_INT 4
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 30
16180: PUSH
16181: LD_INT 4
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PPUSH
16192: CALL_OW 69
16196: PUSH
16197: LD_INT 1
16199: ARRAY
16200: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
16201: LD_EXP 6
16205: PPUSH
16206: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
16210: LD_EXP 45
16214: PUSH
16215: LD_EXP 45
16219: PPUSH
16220: CALL_OW 310
16224: AND
16225: IFFALSE 16236
// ComExitBuilding ( Bierezov ) ;
16227: LD_EXP 45
16231: PPUSH
16232: CALL_OW 122
// Wait ( 0 0$03 ) ;
16236: LD_INT 105
16238: PPUSH
16239: CALL_OW 67
// for i in cornel_units do
16243: LD_ADDR_VAR 0 1
16247: PUSH
16248: LD_EXP 6
16252: PUSH
16253: FOR_IN
16254: IFFALSE 16330
// begin if GetClass ( i ) in [ 2 , 3 ] then
16256: LD_VAR 0 1
16260: PPUSH
16261: CALL_OW 257
16265: PUSH
16266: LD_INT 2
16268: PUSH
16269: LD_INT 3
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: IN
16276: IFFALSE 16313
// begin ComEnterUnit ( i , arm ) ;
16278: LD_VAR 0 1
16282: PPUSH
16283: LD_VAR 0 2
16287: PPUSH
16288: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
16292: LD_VAR 0 1
16296: PPUSH
16297: LD_INT 1
16299: PPUSH
16300: CALL_OW 183
// AddComExitBuilding ( i ) ;
16304: LD_VAR 0 1
16308: PPUSH
16309: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
16313: LD_VAR 0 1
16317: PPUSH
16318: LD_INT 257
16320: PPUSH
16321: LD_INT 121
16323: PPUSH
16324: CALL_OW 171
// end ;
16328: GO 16253
16330: POP
16331: POP
// Wait ( 1 1$00 ) ;
16332: LD_INT 2100
16334: PPUSH
16335: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
16339: LD_ADDR_VAR 0 3
16343: PUSH
16344: LD_EXP 44
16348: PUSH
16349: LD_EXP 45
16353: ADD
16354: PUSH
16355: LD_EXP 6
16359: ADD
16360: PUSH
16361: LD_EXP 6
16365: PPUSH
16366: LD_INT 21
16368: PUSH
16369: LD_INT 2
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PPUSH
16376: CALL_OW 72
16380: DIFF
16381: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
16382: LD_VAR 0 3
16386: PPUSH
16387: LD_INT 248
16389: PPUSH
16390: LD_INT 85
16392: PPUSH
16393: CALL_OW 111
// AddComHold ( filter ) ;
16397: LD_VAR 0 3
16401: PPUSH
16402: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
16406: LD_INT 35
16408: PPUSH
16409: CALL_OW 67
// until cornel_attack ;
16413: LD_EXP 9
16417: IFFALSE 16406
// ComAgressiveMove ( filter , 209 , 63 ) ;
16419: LD_VAR 0 3
16423: PPUSH
16424: LD_INT 209
16426: PPUSH
16427: LD_INT 63
16429: PPUSH
16430: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16434: LD_EXP 44
16438: PPUSH
16439: LD_INT 208
16441: PPUSH
16442: LD_INT 62
16444: PPUSH
16445: CALL_OW 114
// AddComHold ( Cornel ) ;
16449: LD_EXP 44
16453: PPUSH
16454: CALL_OW 200
// if Bierezov then
16458: LD_EXP 45
16462: IFFALSE 16552
// begin filter := filter diff Bierezov ;
16464: LD_ADDR_VAR 0 3
16468: PUSH
16469: LD_VAR 0 3
16473: PUSH
16474: LD_EXP 45
16478: DIFF
16479: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16480: LD_EXP 45
16484: PPUSH
16485: LD_INT 6
16487: PPUSH
16488: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16492: LD_EXP 45
16496: PPUSH
16497: LD_INT 235
16499: PPUSH
16500: LD_INT 60
16502: PPUSH
16503: CALL_OW 111
// AddComHold ( Bierezov ) ;
16507: LD_EXP 45
16511: PPUSH
16512: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16516: LD_EXP 45
16520: PPUSH
16521: LD_INT 350
16523: PPUSH
16524: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16528: LD_EXP 45
16532: PPUSH
16533: LD_INT 198
16535: PPUSH
16536: LD_INT 28
16538: PPUSH
16539: CALL_OW 171
// AddComHold ( Bierezov ) ;
16543: LD_EXP 45
16547: PPUSH
16548: CALL_OW 200
// end ; repeat wait ( 0 0$2 ) ;
16552: LD_INT 70
16554: PPUSH
16555: CALL_OW 67
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16559: LD_EXP 44
16563: PPUSH
16564: LD_INT 208
16566: PPUSH
16567: LD_INT 62
16569: PPUSH
16570: CALL_OW 114
// until not IsInArea ( Cornel , cornelKappaArea ) ;
16574: LD_EXP 44
16578: PPUSH
16579: LD_INT 16
16581: PPUSH
16582: CALL_OW 308
16586: NOT
16587: IFFALSE 16552
// end ; end_of_file
16589: PPOPN 3
16591: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16592: LD_EXP 53
16596: PUSH
16597: LD_EXP 31
16601: NOT
16602: AND
16603: PUSH
16604: LD_EXP 32
16608: NOT
16609: AND
16610: IFFALSE 17060
16612: GO 16614
16614: DISABLE
16615: LD_INT 0
16617: PPUSH
16618: PPUSH
16619: PPUSH
16620: PPUSH
// begin enable ;
16621: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16622: LD_ADDR_VAR 0 4
16626: PUSH
16627: LD_INT 81
16629: PUSH
16630: LD_INT 3
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PPUSH
16637: CALL_OW 69
16641: ST_TO_ADDR
// for i = 1 to ru_patrol do
16642: LD_ADDR_VAR 0 2
16646: PUSH
16647: DOUBLE
16648: LD_INT 1
16650: DEC
16651: ST_TO_ADDR
16652: LD_EXP 53
16656: PUSH
16657: FOR_TO
16658: IFFALSE 17058
// begin un := ru_patrol [ i ] ;
16660: LD_ADDR_VAR 0 1
16664: PUSH
16665: LD_EXP 53
16669: PUSH
16670: LD_VAR 0 2
16674: ARRAY
16675: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16676: LD_VAR 0 1
16680: PPUSH
16681: LD_INT 13
16683: PPUSH
16684: CALL_OW 308
16688: IFFALSE 16793
// begin if not ru_alert then
16690: LD_EXP 60
16694: NOT
16695: IFFALSE 16705
// ru_alert := true ;
16697: LD_ADDR_EXP 60
16701: PUSH
16702: LD_INT 1
16704: ST_TO_ADDR
// if not See ( 1 , un ) then
16705: LD_INT 1
16707: PPUSH
16708: LD_VAR 0 1
16712: PPUSH
16713: CALL_OW 292
16717: NOT
16718: IFFALSE 16732
// SetLives ( un , 1000 ) ;
16720: LD_VAR 0 1
16724: PPUSH
16725: LD_INT 1000
16727: PPUSH
16728: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16732: LD_ADDR_EXP 53
16736: PUSH
16737: LD_EXP 53
16741: PUSH
16742: LD_VAR 0 1
16746: DIFF
16747: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16748: LD_VAR 0 1
16752: PPUSH
16753: LD_INT 22
16755: PUSH
16756: LD_INT 3
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: LD_INT 30
16765: PUSH
16766: LD_INT 4
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PPUSH
16777: CALL_OW 69
16781: PPUSH
16782: CALL 1007 0 1
16786: PPUSH
16787: CALL_OW 120
// continue ;
16791: GO 16657
// end ; if IsOk ( un ) and not HasTask ( un ) then
16793: LD_VAR 0 1
16797: PPUSH
16798: CALL_OW 302
16802: PUSH
16803: LD_VAR 0 1
16807: PPUSH
16808: CALL_OW 314
16812: NOT
16813: AND
16814: IFFALSE 16907
// begin for j = 1 to ru_firepoints_south [ i ] do
16816: LD_ADDR_VAR 0 3
16820: PUSH
16821: DOUBLE
16822: LD_INT 1
16824: DEC
16825: ST_TO_ADDR
16826: LD_EXP 59
16830: PUSH
16831: LD_VAR 0 2
16835: ARRAY
16836: PUSH
16837: FOR_TO
16838: IFFALSE 16905
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16840: LD_VAR 0 1
16844: PPUSH
16845: LD_EXP 59
16849: PUSH
16850: LD_VAR 0 2
16854: ARRAY
16855: PUSH
16856: LD_VAR 0 3
16860: ARRAY
16861: PUSH
16862: LD_INT 1
16864: ARRAY
16865: PPUSH
16866: LD_EXP 59
16870: PUSH
16871: LD_VAR 0 2
16875: ARRAY
16876: PUSH
16877: LD_VAR 0 3
16881: ARRAY
16882: PUSH
16883: LD_INT 2
16885: ARRAY
16886: PPUSH
16887: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16891: LD_VAR 0 1
16895: PPUSH
16896: LD_INT 70
16898: PPUSH
16899: CALL_OW 202
// end ;
16903: GO 16837
16905: POP
16906: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16907: LD_VAR 0 1
16911: PPUSH
16912: CALL_OW 256
16916: PUSH
16917: LD_INT 700
16919: LESS
16920: PUSH
16921: LD_VAR 0 1
16925: PPUSH
16926: LD_INT 13
16928: PPUSH
16929: CALL_OW 308
16933: NOT
16934: AND
16935: IFFALSE 16987
// begin ComMoveToArea ( un , retreatArea ) ;
16937: LD_VAR 0 1
16941: PPUSH
16942: LD_INT 13
16944: PPUSH
16945: CALL_OW 113
// if not ru_alert_xy then
16949: LD_EXP 61
16953: NOT
16954: IFFALSE 16985
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16956: LD_ADDR_EXP 61
16960: PUSH
16961: LD_VAR 0 1
16965: PPUSH
16966: CALL_OW 250
16970: PUSH
16971: LD_VAR 0 1
16975: PPUSH
16976: CALL_OW 251
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: ST_TO_ADDR
// end else
16985: GO 17056
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16987: LD_VAR 0 1
16991: PPUSH
16992: LD_VAR 0 4
16996: PPUSH
16997: LD_VAR 0 1
17001: PPUSH
17002: CALL_OW 74
17006: PPUSH
17007: CALL_OW 296
17011: PUSH
17012: LD_INT 9
17014: LESS
17015: PUSH
17016: LD_VAR 0 1
17020: PPUSH
17021: CALL_OW 256
17025: PUSH
17026: LD_INT 500
17028: GREATER
17029: AND
17030: IFFALSE 17056
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17032: LD_VAR 0 1
17036: PPUSH
17037: LD_VAR 0 4
17041: PPUSH
17042: LD_VAR 0 1
17046: PPUSH
17047: CALL_OW 74
17051: PPUSH
17052: CALL_OW 115
// end ;
17056: GO 16657
17058: POP
17059: POP
// end ;
17060: PPOPN 4
17062: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
17063: LD_EXP 60
17067: PUSH
17068: LD_EXP 61
17072: AND
17073: PUSH
17074: LD_EXP 31
17078: NOT
17079: AND
17080: PUSH
17081: LD_EXP 32
17085: NOT
17086: AND
17087: IFFALSE 17297
17089: GO 17091
17091: DISABLE
17092: LD_INT 0
17094: PPUSH
17095: PPUSH
// begin enable ;
17096: ENABLE
// if not ru_vehicles then
17097: LD_EXP 56
17101: NOT
17102: IFFALSE 17106
// exit ;
17104: GO 17297
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17106: LD_ADDR_VAR 0 2
17110: PUSH
17111: LD_INT 81
17113: PUSH
17114: LD_INT 3
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PPUSH
17121: CALL_OW 69
17125: ST_TO_ADDR
// if ru_vehicles then
17126: LD_EXP 56
17130: IFFALSE 17297
// begin for i in ru_vehicles do
17132: LD_ADDR_VAR 0 1
17136: PUSH
17137: LD_EXP 56
17141: PUSH
17142: FOR_IN
17143: IFFALSE 17295
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
17145: LD_VAR 0 1
17149: PPUSH
17150: CALL_OW 302
17154: PUSH
17155: LD_VAR 0 1
17159: PPUSH
17160: LD_VAR 0 2
17164: PPUSH
17165: LD_VAR 0 1
17169: PPUSH
17170: CALL_OW 74
17174: PPUSH
17175: CALL_OW 296
17179: PUSH
17180: LD_INT 9
17182: LESS
17183: AND
17184: IFFALSE 17210
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17186: LD_VAR 0 1
17190: PPUSH
17191: LD_VAR 0 2
17195: PPUSH
17196: LD_VAR 0 1
17200: PPUSH
17201: CALL_OW 74
17205: PPUSH
17206: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
17210: LD_VAR 0 1
17214: PPUSH
17215: CALL_OW 314
17219: NOT
17220: PUSH
17221: LD_VAR 0 1
17225: PPUSH
17226: CALL_OW 302
17230: AND
17231: PUSH
17232: LD_VAR 0 1
17236: PPUSH
17237: LD_EXP 61
17241: PUSH
17242: LD_INT 1
17244: ARRAY
17245: PPUSH
17246: LD_EXP 61
17250: PUSH
17251: LD_INT 2
17253: ARRAY
17254: PPUSH
17255: CALL_OW 297
17259: PUSH
17260: LD_INT 10
17262: GREATER
17263: AND
17264: IFFALSE 17293
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
17266: LD_VAR 0 1
17270: PPUSH
17271: LD_EXP 61
17275: PUSH
17276: LD_INT 1
17278: ARRAY
17279: PPUSH
17280: LD_EXP 61
17284: PUSH
17285: LD_INT 2
17287: ARRAY
17288: PPUSH
17289: CALL_OW 114
// end ;
17293: GO 17142
17295: POP
17296: POP
// end ; end ;
17297: PPOPN 2
17299: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
17300: LD_EXP 61
17304: PUSH
17305: LD_EXP 60
17309: AND
17310: PUSH
17311: LD_INT 3
17313: PPUSH
17314: CALL_OW 463
17318: NOT
17319: AND
17320: PUSH
17321: LD_EXP 31
17325: NOT
17326: AND
17327: PUSH
17328: LD_EXP 32
17332: NOT
17333: AND
17334: IFFALSE 17429
17336: GO 17338
17338: DISABLE
17339: LD_INT 0
17341: PPUSH
// begin enable ;
17342: ENABLE
// ru_alert_xy := false ;
17343: LD_ADDR_EXP 61
17347: PUSH
17348: LD_INT 0
17350: ST_TO_ADDR
// ru_alert := false ;
17351: LD_ADDR_EXP 60
17355: PUSH
17356: LD_INT 0
17358: ST_TO_ADDR
// if ru_vehicles then
17359: LD_EXP 56
17363: IFFALSE 17429
// for i in ru_vehicles do
17365: LD_ADDR_VAR 0 1
17369: PUSH
17370: LD_EXP 56
17374: PUSH
17375: FOR_IN
17376: IFFALSE 17427
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
17378: LD_VAR 0 1
17382: PPUSH
17383: CALL_OW 302
17387: PUSH
17388: LD_VAR 0 1
17392: PPUSH
17393: LD_INT 89
17395: PPUSH
17396: LD_INT 36
17398: PPUSH
17399: CALL_OW 297
17403: PUSH
17404: LD_INT 10
17406: GREATER
17407: AND
17408: IFFALSE 17425
// ComMoveXY ( i , 89 , 36 ) ;
17410: LD_VAR 0 1
17414: PPUSH
17415: LD_INT 89
17417: PPUSH
17418: LD_INT 36
17420: PPUSH
17421: CALL_OW 111
17425: GO 17375
17427: POP
17428: POP
// end ;
17429: PPOPN 1
17431: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
17432: LD_EXP 55
17436: PUSH
17437: LD_EXP 31
17441: NOT
17442: AND
17443: PUSH
17444: LD_EXP 32
17448: NOT
17449: AND
17450: IFFALSE 17734
17452: GO 17454
17454: DISABLE
17455: LD_INT 0
17457: PPUSH
17458: PPUSH
17459: PPUSH
// begin enable ;
17460: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17461: LD_ADDR_VAR 0 3
17465: PUSH
17466: LD_INT 81
17468: PUSH
17469: LD_INT 3
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PPUSH
17476: CALL_OW 69
17480: ST_TO_ADDR
// for i = 1 to ru_forest do
17481: LD_ADDR_VAR 0 1
17485: PUSH
17486: DOUBLE
17487: LD_INT 1
17489: DEC
17490: ST_TO_ADDR
17491: LD_EXP 55
17495: PUSH
17496: FOR_TO
17497: IFFALSE 17732
// begin un := ru_forest [ i ] ;
17499: LD_ADDR_VAR 0 2
17503: PUSH
17504: LD_EXP 55
17508: PUSH
17509: LD_VAR 0 1
17513: ARRAY
17514: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17515: LD_VAR 0 2
17519: PPUSH
17520: LD_INT 13
17522: PPUSH
17523: CALL_OW 308
17527: IFFALSE 17617
// begin if not See ( 1 , un ) then
17529: LD_INT 1
17531: PPUSH
17532: LD_VAR 0 2
17536: PPUSH
17537: CALL_OW 292
17541: NOT
17542: IFFALSE 17556
// SetLives ( un , 1000 ) ;
17544: LD_VAR 0 2
17548: PPUSH
17549: LD_INT 1000
17551: PPUSH
17552: CALL_OW 234
// ru_forest := ru_forest diff un ;
17556: LD_ADDR_EXP 55
17560: PUSH
17561: LD_EXP 55
17565: PUSH
17566: LD_VAR 0 2
17570: DIFF
17571: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17572: LD_VAR 0 2
17576: PPUSH
17577: LD_INT 22
17579: PUSH
17580: LD_INT 3
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 30
17589: PUSH
17590: LD_INT 4
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PPUSH
17601: CALL_OW 69
17605: PPUSH
17606: CALL 1007 0 1
17610: PPUSH
17611: CALL_OW 120
// continue ;
17615: GO 17496
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17617: LD_VAR 0 2
17621: PPUSH
17622: CALL_OW 256
17626: PUSH
17627: LD_INT 700
17629: LESS
17630: PUSH
17631: LD_VAR 0 2
17635: PPUSH
17636: LD_INT 13
17638: PPUSH
17639: CALL_OW 308
17643: NOT
17644: AND
17645: IFFALSE 17661
// ComMoveToArea ( un , retreatArea ) else
17647: LD_VAR 0 2
17651: PPUSH
17652: LD_INT 13
17654: PPUSH
17655: CALL_OW 113
17659: GO 17730
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17661: LD_VAR 0 2
17665: PPUSH
17666: LD_VAR 0 3
17670: PPUSH
17671: LD_VAR 0 2
17675: PPUSH
17676: CALL_OW 74
17680: PPUSH
17681: CALL_OW 296
17685: PUSH
17686: LD_INT 9
17688: LESS
17689: PUSH
17690: LD_VAR 0 2
17694: PPUSH
17695: CALL_OW 256
17699: PUSH
17700: LD_INT 500
17702: GREATER
17703: AND
17704: IFFALSE 17730
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17706: LD_VAR 0 2
17710: PPUSH
17711: LD_VAR 0 3
17715: PPUSH
17716: LD_VAR 0 2
17720: PPUSH
17721: CALL_OW 74
17725: PPUSH
17726: CALL_OW 115
// end ;
17730: GO 17496
17732: POP
17733: POP
// end ;
17734: PPOPN 3
17736: END
// every 0 0$10 trigger not send_attack_on_cornel or IsDead ( Cornel ) do var i , filter ;
17737: LD_EXP 32
17741: NOT
17742: PUSH
17743: LD_EXP 44
17747: PPUSH
17748: CALL_OW 301
17752: OR
17753: IFFALSE 17914
17755: GO 17757
17757: DISABLE
17758: LD_INT 0
17760: PPUSH
17761: PPUSH
// begin enable ;
17762: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_inarea , ignoreBuildingsArea ] ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 990 ] ] ] ) ;
17763: LD_ADDR_VAR 0 2
17767: PUSH
17768: LD_INT 22
17770: PUSH
17771: LD_INT 3
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 3
17780: PUSH
17781: LD_INT 95
17783: PUSH
17784: LD_INT 18
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: LD_INT 21
17797: PUSH
17798: LD_INT 3
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 3
17807: PUSH
17808: LD_INT 24
17810: PUSH
17811: LD_INT 990
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: PPUSH
17828: CALL_OW 69
17832: ST_TO_ADDR
// if filter then
17833: LD_VAR 0 2
17837: IFFALSE 17914
// for i in filter do
17839: LD_ADDR_VAR 0 1
17843: PUSH
17844: LD_VAR 0 2
17848: PUSH
17849: FOR_IN
17850: IFFALSE 17912
// if GetY ( i ) > 70 then
17852: LD_VAR 0 1
17856: PPUSH
17857: CALL_OW 251
17861: PUSH
17862: LD_INT 70
17864: GREATER
17865: IFFALSE 17871
// continue else
17867: GO 17849
17869: GO 17910
// begin ru_alert := true ;
17871: LD_ADDR_EXP 60
17875: PUSH
17876: LD_INT 1
17878: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17879: LD_ADDR_EXP 61
17883: PUSH
17884: LD_VAR 0 1
17888: PPUSH
17889: CALL_OW 250
17893: PUSH
17894: LD_VAR 0 1
17898: PPUSH
17899: CALL_OW 251
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: ST_TO_ADDR
// break ;
17908: GO 17912
// end ;
17910: GO 17849
17912: POP
17913: POP
// end ;
17914: PPOPN 2
17916: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17917: LD_EXP 31
17921: IFFALSE 18070
17923: GO 17925
17925: DISABLE
17926: LD_INT 0
17928: PPUSH
17929: PPUSH
17930: PPUSH
17931: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17932: LD_ADDR_VAR 0 4
17936: PUSH
17937: LD_EXP 56
17941: PUSH
17942: LD_EXP 55
17946: ADD
17947: PUSH
17948: LD_EXP 53
17952: ADD
17953: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17954: LD_ADDR_VAR 0 3
17958: PUSH
17959: LD_INT 3
17961: PPUSH
17962: LD_INT 81
17964: PUSH
17965: LD_INT 3
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PPUSH
17972: CALL_OW 70
17976: ST_TO_ADDR
// if filter and enemy then
17977: LD_VAR 0 4
17981: PUSH
17982: LD_VAR 0 3
17986: AND
17987: IFFALSE 18070
// repeat wait ( 0 0$01 ) ;
17989: LD_INT 35
17991: PPUSH
17992: CALL_OW 67
// for i in filter do
17996: LD_ADDR_VAR 0 1
18000: PUSH
18001: LD_VAR 0 4
18005: PUSH
18006: FOR_IN
18007: IFFALSE 18035
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
18009: LD_VAR 0 1
18013: PPUSH
18014: LD_VAR 0 3
18018: PPUSH
18019: LD_VAR 0 1
18023: PPUSH
18024: CALL_OW 74
18028: PPUSH
18029: CALL_OW 115
// end ;
18033: GO 18006
18035: POP
18036: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
18037: LD_INT 3
18039: PPUSH
18040: LD_INT 81
18042: PUSH
18043: LD_INT 3
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PPUSH
18050: CALL_OW 70
18054: PUSH
18055: LD_INT 0
18057: EQUAL
18058: PUSH
18059: LD_VAR 0 4
18063: PUSH
18064: LD_INT 0
18066: EQUAL
18067: OR
18068: IFFALSE 17989
// end ;
18070: PPOPN 4
18072: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
18073: LD_EXP 26
18077: PUSH
18078: LD_INT 22
18080: PUSH
18081: LD_INT 4
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 30
18090: PUSH
18091: LD_INT 4
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 3
18100: PUSH
18101: LD_INT 57
18103: PUSH
18104: EMPTY
18105: LIST
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: LIST
18115: PPUSH
18116: CALL_OW 69
18120: AND
18121: IFFALSE 18170
18123: GO 18125
18125: DISABLE
18126: LD_INT 0
18128: PPUSH
// begin if not ru_cornel_attack then
18129: LD_EXP 58
18133: NOT
18134: IFFALSE 18138
// exit ;
18136: GO 18170
// for i in ru_cornel_attack do
18138: LD_ADDR_VAR 0 1
18142: PUSH
18143: LD_EXP 58
18147: PUSH
18148: FOR_IN
18149: IFFALSE 18168
// ComAgressiveMove ( i , 258 , 119 ) ;
18151: LD_VAR 0 1
18155: PPUSH
18156: LD_INT 258
18158: PPUSH
18159: LD_INT 119
18161: PPUSH
18162: CALL_OW 114
18166: GO 18148
18168: POP
18169: POP
// end ; end_of_file
18170: PPOPN 1
18172: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
18173: LD_EXP 5
18177: PUSH
18178: LD_EXP 9
18182: NOT
18183: AND
18184: PUSH
18185: LD_EXP 20
18189: AND
18190: IFFALSE 18302
18192: GO 18194
18194: DISABLE
18195: LD_INT 0
18197: PPUSH
// begin enable ;
18198: ENABLE
// crates_counter := crates_counter - 50 ;
18199: LD_ADDR_EXP 20
18203: PUSH
18204: LD_EXP 20
18208: PUSH
18209: LD_INT 50
18211: MINUS
18212: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
18213: LD_INT 8
18215: PPUSH
18216: LD_INT 2
18218: PPUSH
18219: LD_INT 5
18221: PPUSH
18222: CALL_OW 12
18226: PPUSH
18227: LD_INT 1
18229: PPUSH
18230: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
18234: LD_INT 1785
18236: PPUSH
18237: LD_INT 2345
18239: PPUSH
18240: CALL_OW 12
18244: PPUSH
18245: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
18249: LD_ADDR_VAR 0 1
18253: PUSH
18254: LD_INT 1
18256: PPUSH
18257: LD_OWVAR 67
18261: PUSH
18262: LD_INT 2
18264: PLUS
18265: PPUSH
18266: CALL_OW 12
18270: ST_TO_ADDR
// if r < 3 then
18271: LD_VAR 0 1
18275: PUSH
18276: LD_INT 3
18278: LESS
18279: IFFALSE 18302
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
18281: LD_INT 4
18283: PPUSH
18284: LD_INT 1
18286: PPUSH
18287: LD_INT 5
18289: PPUSH
18290: CALL_OW 12
18294: PPUSH
18295: LD_INT 1
18297: PPUSH
18298: CALL_OW 55
// end ;
18302: PPOPN 1
18304: END
// every 0 0$01 trigger cornel_active do
18305: LD_EXP 8
18309: IFFALSE 18398
18311: GO 18313
18313: DISABLE
// begin Wait ( 0 0$03 ) ;
18314: LD_INT 105
18316: PPUSH
18317: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18321: LD_INT 2
18323: PPUSH
18324: LD_INT 5
18326: PPUSH
18327: CALL_OW 12
18331: PPUSH
18332: LD_INT 10
18334: PPUSH
18335: LD_INT 1
18337: PPUSH
18338: CALL_OW 55
// Wait ( 0 0$13 ) ;
18342: LD_INT 455
18344: PPUSH
18345: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18349: LD_INT 2
18351: PPUSH
18352: LD_INT 5
18354: PPUSH
18355: CALL_OW 12
18359: PPUSH
18360: LD_INT 10
18362: PPUSH
18363: LD_INT 1
18365: PPUSH
18366: CALL_OW 55
// Wait ( 0 0$16 ) ;
18370: LD_INT 560
18372: PPUSH
18373: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18377: LD_INT 2
18379: PPUSH
18380: LD_INT 5
18382: PPUSH
18383: CALL_OW 12
18387: PPUSH
18388: LD_INT 10
18390: PPUSH
18391: LD_INT 1
18393: PPUSH
18394: CALL_OW 55
// end ; end_of_file
18398: END
// every 0 0$01 trigger cornel_prepared do
18399: LD_EXP 11
18403: IFFALSE 18462
18405: GO 18407
18407: DISABLE
// begin enable ;
18408: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
18409: LD_ADDR_OWVAR 47
18413: PUSH
18414: LD_STRING #Am03-1
18416: PUSH
18417: LD_EXP 10
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
18426: LD_ADDR_EXP 10
18430: PUSH
18431: LD_EXP 10
18435: PPUSH
18436: LD_STRING -
18438: PPUSH
18439: CALL 1077 0 2
18443: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
18444: LD_EXP 10
18448: PUSH
18449: LD_INT 0
18451: EQUAL
18452: IFFALSE 18462
// begin Display_Strings := [ ] ;
18454: LD_ADDR_OWVAR 47
18458: PUSH
18459: EMPTY
18460: ST_TO_ADDR
// disable ;
18461: DISABLE
// end ; end ;
18462: END
// every 0 0$01 trigger debug and debug_strings do
18463: LD_EXP 1
18467: PUSH
18468: LD_OWVAR 48
18472: AND
18473: IFFALSE 18489
18475: GO 18477
18477: DISABLE
// begin enable ;
18478: ENABLE
// Display_Strings := debug_strings ;
18479: LD_ADDR_OWVAR 47
18483: PUSH
18484: LD_OWVAR 48
18488: ST_TO_ADDR
// end ; end_of_file
18489: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
18490: LD_VAR 0 1
18494: PPUSH
18495: LD_VAR 0 2
18499: PPUSH
18500: CALL 35082 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 255
18513: PUSH
18514: LD_INT 1
18516: EQUAL
18517: PUSH
18518: LD_EXP 14
18522: NOT
18523: AND
18524: IFFALSE 18534
// solar_builded := true ;
18526: LD_ADDR_EXP 14
18530: PUSH
18531: LD_INT 1
18533: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18534: LD_VAR 0 1
18538: PPUSH
18539: CALL_OW 255
18543: PUSH
18544: LD_INT 1
18546: EQUAL
18547: PUSH
18548: LD_EXP 29
18552: AND
18553: IFFALSE 18590
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
18555: LD_ADDR_EXP 29
18559: PUSH
18560: LD_EXP 29
18564: PUSH
18565: LD_INT 1750
18567: PUSH
18568: LD_INT 1400
18570: PUSH
18571: LD_INT 1225
18573: PUSH
18574: LD_INT 1050
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: PUSH
18583: LD_OWVAR 67
18587: ARRAY
18588: PLUS
18589: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18590: LD_VAR 0 1
18594: PPUSH
18595: CALL_OW 255
18599: PUSH
18600: LD_INT 3
18602: EQUAL
18603: IFFALSE 18621
// ru_vehicles := ru_vehicles ^ veh ;
18605: LD_ADDR_EXP 56
18609: PUSH
18610: LD_EXP 56
18614: PUSH
18615: LD_VAR 0 1
18619: ADD
18620: ST_TO_ADDR
// end ;
18621: PPOPN 2
18623: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18624: LD_VAR 0 1
18628: PPUSH
18629: CALL 34962 0 1
// if un in ru_patrol then
18633: LD_VAR 0 1
18637: PUSH
18638: LD_EXP 53
18642: IN
18643: IFFALSE 18661
// ru_patrol := ru_patrol diff un ;
18645: LD_ADDR_EXP 53
18649: PUSH
18650: LD_EXP 53
18654: PUSH
18655: LD_VAR 0 1
18659: DIFF
18660: ST_TO_ADDR
// if un in ru_forest then
18661: LD_VAR 0 1
18665: PUSH
18666: LD_EXP 55
18670: IN
18671: IFFALSE 18689
// ru_forest := ru_forest diff un ;
18673: LD_ADDR_EXP 55
18677: PUSH
18678: LD_EXP 55
18682: PUSH
18683: LD_VAR 0 1
18687: DIFF
18688: ST_TO_ADDR
// if un in ru_vehicles then
18689: LD_VAR 0 1
18693: PUSH
18694: LD_EXP 56
18698: IN
18699: IFFALSE 18805
// begin ru_vehicles := ru_vehicles diff un ;
18701: LD_ADDR_EXP 56
18705: PUSH
18706: LD_EXP 56
18710: PUSH
18711: LD_VAR 0 1
18715: DIFF
18716: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18717: LD_ADDR_EXP 57
18721: PUSH
18722: LD_EXP 57
18726: PUSH
18727: LD_VAR 0 1
18731: PPUSH
18732: CALL_OW 265
18736: PUSH
18737: LD_VAR 0 1
18741: PPUSH
18742: CALL_OW 262
18746: PUSH
18747: LD_VAR 0 1
18751: PPUSH
18752: CALL_OW 263
18756: PUSH
18757: LD_VAR 0 1
18761: PPUSH
18762: CALL_OW 264
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: ADD
18773: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18774: LD_ADDR_EXP 13
18778: PUSH
18779: LD_EXP 13
18783: PUSH
18784: LD_INT 1
18786: PLUS
18787: ST_TO_ADDR
// if ach_counter = 10 then
18788: LD_EXP 13
18792: PUSH
18793: LD_INT 10
18795: EQUAL
18796: IFFALSE 18805
// SetAchievement ( ACH_FAUST ) ;
18798: LD_STRING ACH_FAUST
18800: PPUSH
18801: CALL_OW 543
// end ; if un = Pokryshkin then
18805: LD_VAR 0 1
18809: PUSH
18810: LD_EXP 52
18814: EQUAL
18815: IFFALSE 18824
// SetAchievement ( ACH_POKR ) ;
18817: LD_STRING ACH_POKR
18819: PPUSH
18820: CALL_OW 543
// if un = JMM then
18824: LD_VAR 0 1
18828: PUSH
18829: LD_EXP 37
18833: EQUAL
18834: IFFALSE 18843
// YouLost ( 0 ) ;
18836: LD_STRING 0
18838: PPUSH
18839: CALL_OW 104
// if un = us_dep_west then
18843: LD_VAR 0 1
18847: PUSH
18848: LD_INT 1
18850: EQUAL
18851: IFFALSE 18860
// YouLost ( 2 ) ;
18853: LD_STRING 2
18855: PPUSH
18856: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18860: LD_VAR 0 1
18864: PPUSH
18865: CALL_OW 255
18869: PUSH
18870: LD_INT 8
18872: EQUAL
18873: PUSH
18874: LD_EXP 5
18878: NOT
18879: AND
18880: IFFALSE 18889
// YouLost ( 4 ) ;
18882: LD_STRING 4
18884: PPUSH
18885: CALL_OW 104
// if un in jmm_units then
18889: LD_VAR 0 1
18893: PUSH
18894: LD_EXP 4
18898: IN
18899: IFFALSE 18915
// lose_counter := lose_counter + 1 ;
18901: LD_ADDR_EXP 34
18905: PUSH
18906: LD_EXP 34
18910: PUSH
18911: LD_INT 1
18913: PLUS
18914: ST_TO_ADDR
// end ;
18915: PPOPN 1
18917: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18918: LD_INT 0
18920: PPUSH
18921: PPUSH
// begin if GetSide ( driver ) = 3 then
18922: LD_VAR 0 1
18926: PPUSH
18927: CALL_OW 255
18931: PUSH
18932: LD_INT 3
18934: EQUAL
18935: IFFALSE 19013
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18937: LD_ADDR_VAR 0 6
18941: PUSH
18942: LD_INT 22
18944: PUSH
18945: LD_INT 3
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 30
18954: PUSH
18955: LD_INT 3
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PPUSH
18966: CALL_OW 69
18970: PPUSH
18971: CALL 1007 0 1
18975: ST_TO_ADDR
// if place then
18976: LD_VAR 0 6
18980: IFFALSE 18998
// ComEnterUnit ( driver , place ) else
18982: LD_VAR 0 1
18986: PPUSH
18987: LD_VAR 0 6
18991: PPUSH
18992: CALL_OW 120
18996: GO 19013
// ComMoveXY ( driver , 70 , 22 ) ;
18998: LD_VAR 0 1
19002: PPUSH
19003: LD_INT 70
19005: PPUSH
19006: LD_INT 22
19008: PPUSH
19009: CALL_OW 111
// end ; end ;
19013: PPOPN 6
19015: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
19016: LD_VAR 0 1
19020: PUSH
19021: LD_INT 1
19023: EQUAL
19024: PUSH
19025: LD_VAR 0 2
19029: PUSH
19030: LD_INT 4
19032: EQUAL
19033: PUSH
19034: LD_VAR 0 2
19038: PUSH
19039: LD_INT 8
19041: EQUAL
19042: PUSH
19043: LD_EXP 5
19047: NOT
19048: AND
19049: OR
19050: AND
19051: IFFALSE 19060
// YouLost ( 5 ) ;
19053: LD_STRING 5
19055: PPUSH
19056: CALL_OW 104
// end ;
19060: PPOPN 2
19062: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
19063: LD_EXP 36
19067: PUSH
19068: LD_INT 22
19070: PUSH
19071: LD_INT 1
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: LD_INT 21
19080: PUSH
19081: LD_INT 1
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PPUSH
19092: CALL_OW 69
19096: PUSH
19097: LD_INT 22
19099: PUSH
19100: LD_INT 8
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 21
19109: PUSH
19110: LD_INT 1
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PPUSH
19121: CALL_OW 69
19125: ADD
19126: PLUS
19127: PUSH
19128: LD_INT 5
19130: LESS
19131: IFFALSE 19143
19133: GO 19135
19135: DISABLE
// YouLost ( 1 ) ;
19136: LD_STRING 1
19138: PPUSH
19139: CALL_OW 104
19143: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
19144: LD_INT 1
19146: PPUSH
19147: CALL_OW 255
19151: PUSH
19152: LD_INT 3
19154: EQUAL
19155: IFFALSE 19167
19157: GO 19159
19159: DISABLE
// YouLost ( 3 ) ; end_of_file end_of_file
19160: LD_STRING 3
19162: PPUSH
19163: CALL_OW 104
19167: END
// export globalGameSaveCounter ; every 0 0$1 do
19168: GO 19170
19170: DISABLE
// begin enable ;
19171: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19172: LD_STRING updateTimer(
19174: PUSH
19175: LD_OWVAR 1
19179: STR
19180: PUSH
19181: LD_STRING );
19183: STR
19184: PPUSH
19185: CALL_OW 559
// end ;
19189: END
// every 0 0$1 do
19190: GO 19192
19192: DISABLE
// begin globalGameSaveCounter := 0 ;
19193: LD_ADDR_EXP 62
19197: PUSH
19198: LD_INT 0
19200: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19201: LD_STRING setGameSaveCounter(0)
19203: PPUSH
19204: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19208: LD_STRING initStreamRollete();
19210: PPUSH
19211: CALL_OW 559
// InitStreamMode ;
19215: CALL 20541 0 0
// DefineStreamItems ( false ) ;
19219: LD_INT 0
19221: PPUSH
19222: CALL 21005 0 1
// end ;
19226: END
// export function SOS_MapStart ( ) ; begin
19227: LD_INT 0
19229: PPUSH
// if streamModeActive then
19230: LD_EXP 63
19234: IFFALSE 19243
// DefineStreamItems ( true ) ;
19236: LD_INT 1
19238: PPUSH
19239: CALL 21005 0 1
// UpdateLuaVariables ( ) ;
19243: CALL 19260 0 0
// UpdateFactoryWaypoints ( ) ;
19247: CALL 33866 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19251: CALL 34123 0 0
// end ;
19255: LD_VAR 0 1
19259: RET
// function UpdateLuaVariables ( ) ; begin
19260: LD_INT 0
19262: PPUSH
// if globalGameSaveCounter then
19263: LD_EXP 62
19267: IFFALSE 19301
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19269: LD_ADDR_EXP 62
19273: PUSH
19274: LD_EXP 62
19278: PPUSH
19279: CALL 77904 0 1
19283: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19284: LD_STRING setGameSaveCounter(
19286: PUSH
19287: LD_EXP 62
19291: STR
19292: PUSH
19293: LD_STRING )
19295: STR
19296: PPUSH
19297: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19301: LD_STRING setGameDifficulty(
19303: PUSH
19304: LD_OWVAR 67
19308: STR
19309: PUSH
19310: LD_STRING )
19312: STR
19313: PPUSH
19314: CALL_OW 559
// end ;
19318: LD_VAR 0 1
19322: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19323: LD_INT 0
19325: PPUSH
// if p2 = stream_mode then
19326: LD_VAR 0 2
19330: PUSH
19331: LD_INT 100
19333: EQUAL
19334: IFFALSE 20337
// begin if not StreamModeActive then
19336: LD_EXP 63
19340: NOT
19341: IFFALSE 19351
// StreamModeActive := true ;
19343: LD_ADDR_EXP 63
19347: PUSH
19348: LD_INT 1
19350: ST_TO_ADDR
// if p3 = 0 then
19351: LD_VAR 0 3
19355: PUSH
19356: LD_INT 0
19358: EQUAL
19359: IFFALSE 19365
// InitStreamMode ;
19361: CALL 20541 0 0
// if p3 = 1 then
19365: LD_VAR 0 3
19369: PUSH
19370: LD_INT 1
19372: EQUAL
19373: IFFALSE 19383
// sRocket := true ;
19375: LD_ADDR_EXP 68
19379: PUSH
19380: LD_INT 1
19382: ST_TO_ADDR
// if p3 = 2 then
19383: LD_VAR 0 3
19387: PUSH
19388: LD_INT 2
19390: EQUAL
19391: IFFALSE 19401
// sSpeed := true ;
19393: LD_ADDR_EXP 67
19397: PUSH
19398: LD_INT 1
19400: ST_TO_ADDR
// if p3 = 3 then
19401: LD_VAR 0 3
19405: PUSH
19406: LD_INT 3
19408: EQUAL
19409: IFFALSE 19419
// sEngine := true ;
19411: LD_ADDR_EXP 69
19415: PUSH
19416: LD_INT 1
19418: ST_TO_ADDR
// if p3 = 4 then
19419: LD_VAR 0 3
19423: PUSH
19424: LD_INT 4
19426: EQUAL
19427: IFFALSE 19437
// sSpec := true ;
19429: LD_ADDR_EXP 66
19433: PUSH
19434: LD_INT 1
19436: ST_TO_ADDR
// if p3 = 5 then
19437: LD_VAR 0 3
19441: PUSH
19442: LD_INT 5
19444: EQUAL
19445: IFFALSE 19455
// sLevel := true ;
19447: LD_ADDR_EXP 70
19451: PUSH
19452: LD_INT 1
19454: ST_TO_ADDR
// if p3 = 6 then
19455: LD_VAR 0 3
19459: PUSH
19460: LD_INT 6
19462: EQUAL
19463: IFFALSE 19473
// sArmoury := true ;
19465: LD_ADDR_EXP 71
19469: PUSH
19470: LD_INT 1
19472: ST_TO_ADDR
// if p3 = 7 then
19473: LD_VAR 0 3
19477: PUSH
19478: LD_INT 7
19480: EQUAL
19481: IFFALSE 19491
// sRadar := true ;
19483: LD_ADDR_EXP 72
19487: PUSH
19488: LD_INT 1
19490: ST_TO_ADDR
// if p3 = 8 then
19491: LD_VAR 0 3
19495: PUSH
19496: LD_INT 8
19498: EQUAL
19499: IFFALSE 19509
// sBunker := true ;
19501: LD_ADDR_EXP 73
19505: PUSH
19506: LD_INT 1
19508: ST_TO_ADDR
// if p3 = 9 then
19509: LD_VAR 0 3
19513: PUSH
19514: LD_INT 9
19516: EQUAL
19517: IFFALSE 19527
// sHack := true ;
19519: LD_ADDR_EXP 74
19523: PUSH
19524: LD_INT 1
19526: ST_TO_ADDR
// if p3 = 10 then
19527: LD_VAR 0 3
19531: PUSH
19532: LD_INT 10
19534: EQUAL
19535: IFFALSE 19545
// sFire := true ;
19537: LD_ADDR_EXP 75
19541: PUSH
19542: LD_INT 1
19544: ST_TO_ADDR
// if p3 = 11 then
19545: LD_VAR 0 3
19549: PUSH
19550: LD_INT 11
19552: EQUAL
19553: IFFALSE 19563
// sRefresh := true ;
19555: LD_ADDR_EXP 76
19559: PUSH
19560: LD_INT 1
19562: ST_TO_ADDR
// if p3 = 12 then
19563: LD_VAR 0 3
19567: PUSH
19568: LD_INT 12
19570: EQUAL
19571: IFFALSE 19581
// sExp := true ;
19573: LD_ADDR_EXP 77
19577: PUSH
19578: LD_INT 1
19580: ST_TO_ADDR
// if p3 = 13 then
19581: LD_VAR 0 3
19585: PUSH
19586: LD_INT 13
19588: EQUAL
19589: IFFALSE 19599
// sDepot := true ;
19591: LD_ADDR_EXP 78
19595: PUSH
19596: LD_INT 1
19598: ST_TO_ADDR
// if p3 = 14 then
19599: LD_VAR 0 3
19603: PUSH
19604: LD_INT 14
19606: EQUAL
19607: IFFALSE 19617
// sFlag := true ;
19609: LD_ADDR_EXP 79
19613: PUSH
19614: LD_INT 1
19616: ST_TO_ADDR
// if p3 = 15 then
19617: LD_VAR 0 3
19621: PUSH
19622: LD_INT 15
19624: EQUAL
19625: IFFALSE 19635
// sKamikadze := true ;
19627: LD_ADDR_EXP 87
19631: PUSH
19632: LD_INT 1
19634: ST_TO_ADDR
// if p3 = 16 then
19635: LD_VAR 0 3
19639: PUSH
19640: LD_INT 16
19642: EQUAL
19643: IFFALSE 19653
// sTroll := true ;
19645: LD_ADDR_EXP 88
19649: PUSH
19650: LD_INT 1
19652: ST_TO_ADDR
// if p3 = 17 then
19653: LD_VAR 0 3
19657: PUSH
19658: LD_INT 17
19660: EQUAL
19661: IFFALSE 19671
// sSlow := true ;
19663: LD_ADDR_EXP 89
19667: PUSH
19668: LD_INT 1
19670: ST_TO_ADDR
// if p3 = 18 then
19671: LD_VAR 0 3
19675: PUSH
19676: LD_INT 18
19678: EQUAL
19679: IFFALSE 19689
// sLack := true ;
19681: LD_ADDR_EXP 90
19685: PUSH
19686: LD_INT 1
19688: ST_TO_ADDR
// if p3 = 19 then
19689: LD_VAR 0 3
19693: PUSH
19694: LD_INT 19
19696: EQUAL
19697: IFFALSE 19707
// sTank := true ;
19699: LD_ADDR_EXP 92
19703: PUSH
19704: LD_INT 1
19706: ST_TO_ADDR
// if p3 = 20 then
19707: LD_VAR 0 3
19711: PUSH
19712: LD_INT 20
19714: EQUAL
19715: IFFALSE 19725
// sRemote := true ;
19717: LD_ADDR_EXP 93
19721: PUSH
19722: LD_INT 1
19724: ST_TO_ADDR
// if p3 = 21 then
19725: LD_VAR 0 3
19729: PUSH
19730: LD_INT 21
19732: EQUAL
19733: IFFALSE 19743
// sPowell := true ;
19735: LD_ADDR_EXP 94
19739: PUSH
19740: LD_INT 1
19742: ST_TO_ADDR
// if p3 = 22 then
19743: LD_VAR 0 3
19747: PUSH
19748: LD_INT 22
19750: EQUAL
19751: IFFALSE 19761
// sTeleport := true ;
19753: LD_ADDR_EXP 97
19757: PUSH
19758: LD_INT 1
19760: ST_TO_ADDR
// if p3 = 23 then
19761: LD_VAR 0 3
19765: PUSH
19766: LD_INT 23
19768: EQUAL
19769: IFFALSE 19779
// sOilTower := true ;
19771: LD_ADDR_EXP 99
19775: PUSH
19776: LD_INT 1
19778: ST_TO_ADDR
// if p3 = 24 then
19779: LD_VAR 0 3
19783: PUSH
19784: LD_INT 24
19786: EQUAL
19787: IFFALSE 19797
// sShovel := true ;
19789: LD_ADDR_EXP 100
19793: PUSH
19794: LD_INT 1
19796: ST_TO_ADDR
// if p3 = 25 then
19797: LD_VAR 0 3
19801: PUSH
19802: LD_INT 25
19804: EQUAL
19805: IFFALSE 19815
// sSheik := true ;
19807: LD_ADDR_EXP 101
19811: PUSH
19812: LD_INT 1
19814: ST_TO_ADDR
// if p3 = 26 then
19815: LD_VAR 0 3
19819: PUSH
19820: LD_INT 26
19822: EQUAL
19823: IFFALSE 19833
// sEarthquake := true ;
19825: LD_ADDR_EXP 103
19829: PUSH
19830: LD_INT 1
19832: ST_TO_ADDR
// if p3 = 27 then
19833: LD_VAR 0 3
19837: PUSH
19838: LD_INT 27
19840: EQUAL
19841: IFFALSE 19851
// sAI := true ;
19843: LD_ADDR_EXP 104
19847: PUSH
19848: LD_INT 1
19850: ST_TO_ADDR
// if p3 = 28 then
19851: LD_VAR 0 3
19855: PUSH
19856: LD_INT 28
19858: EQUAL
19859: IFFALSE 19869
// sCargo := true ;
19861: LD_ADDR_EXP 107
19865: PUSH
19866: LD_INT 1
19868: ST_TO_ADDR
// if p3 = 29 then
19869: LD_VAR 0 3
19873: PUSH
19874: LD_INT 29
19876: EQUAL
19877: IFFALSE 19887
// sDLaser := true ;
19879: LD_ADDR_EXP 108
19883: PUSH
19884: LD_INT 1
19886: ST_TO_ADDR
// if p3 = 30 then
19887: LD_VAR 0 3
19891: PUSH
19892: LD_INT 30
19894: EQUAL
19895: IFFALSE 19905
// sExchange := true ;
19897: LD_ADDR_EXP 109
19901: PUSH
19902: LD_INT 1
19904: ST_TO_ADDR
// if p3 = 31 then
19905: LD_VAR 0 3
19909: PUSH
19910: LD_INT 31
19912: EQUAL
19913: IFFALSE 19923
// sFac := true ;
19915: LD_ADDR_EXP 110
19919: PUSH
19920: LD_INT 1
19922: ST_TO_ADDR
// if p3 = 32 then
19923: LD_VAR 0 3
19927: PUSH
19928: LD_INT 32
19930: EQUAL
19931: IFFALSE 19941
// sPower := true ;
19933: LD_ADDR_EXP 111
19937: PUSH
19938: LD_INT 1
19940: ST_TO_ADDR
// if p3 = 33 then
19941: LD_VAR 0 3
19945: PUSH
19946: LD_INT 33
19948: EQUAL
19949: IFFALSE 19959
// sRandom := true ;
19951: LD_ADDR_EXP 112
19955: PUSH
19956: LD_INT 1
19958: ST_TO_ADDR
// if p3 = 34 then
19959: LD_VAR 0 3
19963: PUSH
19964: LD_INT 34
19966: EQUAL
19967: IFFALSE 19977
// sShield := true ;
19969: LD_ADDR_EXP 113
19973: PUSH
19974: LD_INT 1
19976: ST_TO_ADDR
// if p3 = 35 then
19977: LD_VAR 0 3
19981: PUSH
19982: LD_INT 35
19984: EQUAL
19985: IFFALSE 19995
// sTime := true ;
19987: LD_ADDR_EXP 114
19991: PUSH
19992: LD_INT 1
19994: ST_TO_ADDR
// if p3 = 36 then
19995: LD_VAR 0 3
19999: PUSH
20000: LD_INT 36
20002: EQUAL
20003: IFFALSE 20013
// sTools := true ;
20005: LD_ADDR_EXP 115
20009: PUSH
20010: LD_INT 1
20012: ST_TO_ADDR
// if p3 = 101 then
20013: LD_VAR 0 3
20017: PUSH
20018: LD_INT 101
20020: EQUAL
20021: IFFALSE 20031
// sSold := true ;
20023: LD_ADDR_EXP 80
20027: PUSH
20028: LD_INT 1
20030: ST_TO_ADDR
// if p3 = 102 then
20031: LD_VAR 0 3
20035: PUSH
20036: LD_INT 102
20038: EQUAL
20039: IFFALSE 20049
// sDiff := true ;
20041: LD_ADDR_EXP 81
20045: PUSH
20046: LD_INT 1
20048: ST_TO_ADDR
// if p3 = 103 then
20049: LD_VAR 0 3
20053: PUSH
20054: LD_INT 103
20056: EQUAL
20057: IFFALSE 20067
// sFog := true ;
20059: LD_ADDR_EXP 84
20063: PUSH
20064: LD_INT 1
20066: ST_TO_ADDR
// if p3 = 104 then
20067: LD_VAR 0 3
20071: PUSH
20072: LD_INT 104
20074: EQUAL
20075: IFFALSE 20085
// sReset := true ;
20077: LD_ADDR_EXP 85
20081: PUSH
20082: LD_INT 1
20084: ST_TO_ADDR
// if p3 = 105 then
20085: LD_VAR 0 3
20089: PUSH
20090: LD_INT 105
20092: EQUAL
20093: IFFALSE 20103
// sSun := true ;
20095: LD_ADDR_EXP 86
20099: PUSH
20100: LD_INT 1
20102: ST_TO_ADDR
// if p3 = 106 then
20103: LD_VAR 0 3
20107: PUSH
20108: LD_INT 106
20110: EQUAL
20111: IFFALSE 20121
// sTiger := true ;
20113: LD_ADDR_EXP 82
20117: PUSH
20118: LD_INT 1
20120: ST_TO_ADDR
// if p3 = 107 then
20121: LD_VAR 0 3
20125: PUSH
20126: LD_INT 107
20128: EQUAL
20129: IFFALSE 20139
// sBomb := true ;
20131: LD_ADDR_EXP 83
20135: PUSH
20136: LD_INT 1
20138: ST_TO_ADDR
// if p3 = 108 then
20139: LD_VAR 0 3
20143: PUSH
20144: LD_INT 108
20146: EQUAL
20147: IFFALSE 20157
// sWound := true ;
20149: LD_ADDR_EXP 91
20153: PUSH
20154: LD_INT 1
20156: ST_TO_ADDR
// if p3 = 109 then
20157: LD_VAR 0 3
20161: PUSH
20162: LD_INT 109
20164: EQUAL
20165: IFFALSE 20175
// sBetray := true ;
20167: LD_ADDR_EXP 95
20171: PUSH
20172: LD_INT 1
20174: ST_TO_ADDR
// if p3 = 110 then
20175: LD_VAR 0 3
20179: PUSH
20180: LD_INT 110
20182: EQUAL
20183: IFFALSE 20193
// sContamin := true ;
20185: LD_ADDR_EXP 96
20189: PUSH
20190: LD_INT 1
20192: ST_TO_ADDR
// if p3 = 111 then
20193: LD_VAR 0 3
20197: PUSH
20198: LD_INT 111
20200: EQUAL
20201: IFFALSE 20211
// sOil := true ;
20203: LD_ADDR_EXP 98
20207: PUSH
20208: LD_INT 1
20210: ST_TO_ADDR
// if p3 = 112 then
20211: LD_VAR 0 3
20215: PUSH
20216: LD_INT 112
20218: EQUAL
20219: IFFALSE 20229
// sStu := true ;
20221: LD_ADDR_EXP 102
20225: PUSH
20226: LD_INT 1
20228: ST_TO_ADDR
// if p3 = 113 then
20229: LD_VAR 0 3
20233: PUSH
20234: LD_INT 113
20236: EQUAL
20237: IFFALSE 20247
// sBazooka := true ;
20239: LD_ADDR_EXP 105
20243: PUSH
20244: LD_INT 1
20246: ST_TO_ADDR
// if p3 = 114 then
20247: LD_VAR 0 3
20251: PUSH
20252: LD_INT 114
20254: EQUAL
20255: IFFALSE 20265
// sMortar := true ;
20257: LD_ADDR_EXP 106
20261: PUSH
20262: LD_INT 1
20264: ST_TO_ADDR
// if p3 = 115 then
20265: LD_VAR 0 3
20269: PUSH
20270: LD_INT 115
20272: EQUAL
20273: IFFALSE 20283
// sRanger := true ;
20275: LD_ADDR_EXP 116
20279: PUSH
20280: LD_INT 1
20282: ST_TO_ADDR
// if p3 = 116 then
20283: LD_VAR 0 3
20287: PUSH
20288: LD_INT 116
20290: EQUAL
20291: IFFALSE 20301
// sComputer := true ;
20293: LD_ADDR_EXP 117
20297: PUSH
20298: LD_INT 1
20300: ST_TO_ADDR
// if p3 = 117 then
20301: LD_VAR 0 3
20305: PUSH
20306: LD_INT 117
20308: EQUAL
20309: IFFALSE 20319
// s30 := true ;
20311: LD_ADDR_EXP 118
20315: PUSH
20316: LD_INT 1
20318: ST_TO_ADDR
// if p3 = 118 then
20319: LD_VAR 0 3
20323: PUSH
20324: LD_INT 118
20326: EQUAL
20327: IFFALSE 20337
// s60 := true ;
20329: LD_ADDR_EXP 119
20333: PUSH
20334: LD_INT 1
20336: ST_TO_ADDR
// end ; if p2 = hack_mode then
20337: LD_VAR 0 2
20341: PUSH
20342: LD_INT 101
20344: EQUAL
20345: IFFALSE 20473
// begin case p3 of 1 :
20347: LD_VAR 0 3
20351: PUSH
20352: LD_INT 1
20354: DOUBLE
20355: EQUAL
20356: IFTRUE 20360
20358: GO 20367
20360: POP
// hHackUnlimitedResources ; 2 :
20361: CALL 32612 0 0
20365: GO 20473
20367: LD_INT 2
20369: DOUBLE
20370: EQUAL
20371: IFTRUE 20375
20373: GO 20382
20375: POP
// hHackSetLevel10 ; 3 :
20376: CALL 32745 0 0
20380: GO 20473
20382: LD_INT 3
20384: DOUBLE
20385: EQUAL
20386: IFTRUE 20390
20388: GO 20397
20390: POP
// hHackSetLevel10YourUnits ; 4 :
20391: CALL 32830 0 0
20395: GO 20473
20397: LD_INT 4
20399: DOUBLE
20400: EQUAL
20401: IFTRUE 20405
20403: GO 20412
20405: POP
// hHackInvincible ; 5 :
20406: CALL 33278 0 0
20410: GO 20473
20412: LD_INT 5
20414: DOUBLE
20415: EQUAL
20416: IFTRUE 20420
20418: GO 20427
20420: POP
// hHackInvisible ; 6 :
20421: CALL 33389 0 0
20425: GO 20473
20427: LD_INT 6
20429: DOUBLE
20430: EQUAL
20431: IFTRUE 20435
20433: GO 20442
20435: POP
// hHackChangeYourSide ; 7 :
20436: CALL 33446 0 0
20440: GO 20473
20442: LD_INT 7
20444: DOUBLE
20445: EQUAL
20446: IFTRUE 20450
20448: GO 20457
20450: POP
// hHackChangeUnitSide ; 8 :
20451: CALL 33488 0 0
20455: GO 20473
20457: LD_INT 8
20459: DOUBLE
20460: EQUAL
20461: IFTRUE 20465
20463: GO 20472
20465: POP
// hHackFog ; end ;
20466: CALL 33589 0 0
20470: GO 20473
20472: POP
// end ; if p2 = game_save_mode then
20473: LD_VAR 0 2
20477: PUSH
20478: LD_INT 102
20480: EQUAL
20481: IFFALSE 20536
// begin if p3 = 1 then
20483: LD_VAR 0 3
20487: PUSH
20488: LD_INT 1
20490: EQUAL
20491: IFFALSE 20503
// globalGameSaveCounter := p4 ;
20493: LD_ADDR_EXP 62
20497: PUSH
20498: LD_VAR 0 4
20502: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20503: LD_VAR 0 3
20507: PUSH
20508: LD_INT 2
20510: EQUAL
20511: PUSH
20512: LD_EXP 62
20516: AND
20517: IFFALSE 20536
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20519: LD_STRING setGameSaveCounter(
20521: PUSH
20522: LD_EXP 62
20526: STR
20527: PUSH
20528: LD_STRING )
20530: STR
20531: PPUSH
20532: CALL_OW 559
// end ; end ;
20536: LD_VAR 0 7
20540: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20541: LD_INT 0
20543: PPUSH
// streamModeActive := false ;
20544: LD_ADDR_EXP 63
20548: PUSH
20549: LD_INT 0
20551: ST_TO_ADDR
// normalCounter := 36 ;
20552: LD_ADDR_EXP 64
20556: PUSH
20557: LD_INT 36
20559: ST_TO_ADDR
// hardcoreCounter := 18 ;
20560: LD_ADDR_EXP 65
20564: PUSH
20565: LD_INT 18
20567: ST_TO_ADDR
// sRocket := false ;
20568: LD_ADDR_EXP 68
20572: PUSH
20573: LD_INT 0
20575: ST_TO_ADDR
// sSpeed := false ;
20576: LD_ADDR_EXP 67
20580: PUSH
20581: LD_INT 0
20583: ST_TO_ADDR
// sEngine := false ;
20584: LD_ADDR_EXP 69
20588: PUSH
20589: LD_INT 0
20591: ST_TO_ADDR
// sSpec := false ;
20592: LD_ADDR_EXP 66
20596: PUSH
20597: LD_INT 0
20599: ST_TO_ADDR
// sLevel := false ;
20600: LD_ADDR_EXP 70
20604: PUSH
20605: LD_INT 0
20607: ST_TO_ADDR
// sArmoury := false ;
20608: LD_ADDR_EXP 71
20612: PUSH
20613: LD_INT 0
20615: ST_TO_ADDR
// sRadar := false ;
20616: LD_ADDR_EXP 72
20620: PUSH
20621: LD_INT 0
20623: ST_TO_ADDR
// sBunker := false ;
20624: LD_ADDR_EXP 73
20628: PUSH
20629: LD_INT 0
20631: ST_TO_ADDR
// sHack := false ;
20632: LD_ADDR_EXP 74
20636: PUSH
20637: LD_INT 0
20639: ST_TO_ADDR
// sFire := false ;
20640: LD_ADDR_EXP 75
20644: PUSH
20645: LD_INT 0
20647: ST_TO_ADDR
// sRefresh := false ;
20648: LD_ADDR_EXP 76
20652: PUSH
20653: LD_INT 0
20655: ST_TO_ADDR
// sExp := false ;
20656: LD_ADDR_EXP 77
20660: PUSH
20661: LD_INT 0
20663: ST_TO_ADDR
// sDepot := false ;
20664: LD_ADDR_EXP 78
20668: PUSH
20669: LD_INT 0
20671: ST_TO_ADDR
// sFlag := false ;
20672: LD_ADDR_EXP 79
20676: PUSH
20677: LD_INT 0
20679: ST_TO_ADDR
// sKamikadze := false ;
20680: LD_ADDR_EXP 87
20684: PUSH
20685: LD_INT 0
20687: ST_TO_ADDR
// sTroll := false ;
20688: LD_ADDR_EXP 88
20692: PUSH
20693: LD_INT 0
20695: ST_TO_ADDR
// sSlow := false ;
20696: LD_ADDR_EXP 89
20700: PUSH
20701: LD_INT 0
20703: ST_TO_ADDR
// sLack := false ;
20704: LD_ADDR_EXP 90
20708: PUSH
20709: LD_INT 0
20711: ST_TO_ADDR
// sTank := false ;
20712: LD_ADDR_EXP 92
20716: PUSH
20717: LD_INT 0
20719: ST_TO_ADDR
// sRemote := false ;
20720: LD_ADDR_EXP 93
20724: PUSH
20725: LD_INT 0
20727: ST_TO_ADDR
// sPowell := false ;
20728: LD_ADDR_EXP 94
20732: PUSH
20733: LD_INT 0
20735: ST_TO_ADDR
// sTeleport := false ;
20736: LD_ADDR_EXP 97
20740: PUSH
20741: LD_INT 0
20743: ST_TO_ADDR
// sOilTower := false ;
20744: LD_ADDR_EXP 99
20748: PUSH
20749: LD_INT 0
20751: ST_TO_ADDR
// sShovel := false ;
20752: LD_ADDR_EXP 100
20756: PUSH
20757: LD_INT 0
20759: ST_TO_ADDR
// sSheik := false ;
20760: LD_ADDR_EXP 101
20764: PUSH
20765: LD_INT 0
20767: ST_TO_ADDR
// sEarthquake := false ;
20768: LD_ADDR_EXP 103
20772: PUSH
20773: LD_INT 0
20775: ST_TO_ADDR
// sAI := false ;
20776: LD_ADDR_EXP 104
20780: PUSH
20781: LD_INT 0
20783: ST_TO_ADDR
// sCargo := false ;
20784: LD_ADDR_EXP 107
20788: PUSH
20789: LD_INT 0
20791: ST_TO_ADDR
// sDLaser := false ;
20792: LD_ADDR_EXP 108
20796: PUSH
20797: LD_INT 0
20799: ST_TO_ADDR
// sExchange := false ;
20800: LD_ADDR_EXP 109
20804: PUSH
20805: LD_INT 0
20807: ST_TO_ADDR
// sFac := false ;
20808: LD_ADDR_EXP 110
20812: PUSH
20813: LD_INT 0
20815: ST_TO_ADDR
// sPower := false ;
20816: LD_ADDR_EXP 111
20820: PUSH
20821: LD_INT 0
20823: ST_TO_ADDR
// sRandom := false ;
20824: LD_ADDR_EXP 112
20828: PUSH
20829: LD_INT 0
20831: ST_TO_ADDR
// sShield := false ;
20832: LD_ADDR_EXP 113
20836: PUSH
20837: LD_INT 0
20839: ST_TO_ADDR
// sTime := false ;
20840: LD_ADDR_EXP 114
20844: PUSH
20845: LD_INT 0
20847: ST_TO_ADDR
// sTools := false ;
20848: LD_ADDR_EXP 115
20852: PUSH
20853: LD_INT 0
20855: ST_TO_ADDR
// sSold := false ;
20856: LD_ADDR_EXP 80
20860: PUSH
20861: LD_INT 0
20863: ST_TO_ADDR
// sDiff := false ;
20864: LD_ADDR_EXP 81
20868: PUSH
20869: LD_INT 0
20871: ST_TO_ADDR
// sFog := false ;
20872: LD_ADDR_EXP 84
20876: PUSH
20877: LD_INT 0
20879: ST_TO_ADDR
// sReset := false ;
20880: LD_ADDR_EXP 85
20884: PUSH
20885: LD_INT 0
20887: ST_TO_ADDR
// sSun := false ;
20888: LD_ADDR_EXP 86
20892: PUSH
20893: LD_INT 0
20895: ST_TO_ADDR
// sTiger := false ;
20896: LD_ADDR_EXP 82
20900: PUSH
20901: LD_INT 0
20903: ST_TO_ADDR
// sBomb := false ;
20904: LD_ADDR_EXP 83
20908: PUSH
20909: LD_INT 0
20911: ST_TO_ADDR
// sWound := false ;
20912: LD_ADDR_EXP 91
20916: PUSH
20917: LD_INT 0
20919: ST_TO_ADDR
// sBetray := false ;
20920: LD_ADDR_EXP 95
20924: PUSH
20925: LD_INT 0
20927: ST_TO_ADDR
// sContamin := false ;
20928: LD_ADDR_EXP 96
20932: PUSH
20933: LD_INT 0
20935: ST_TO_ADDR
// sOil := false ;
20936: LD_ADDR_EXP 98
20940: PUSH
20941: LD_INT 0
20943: ST_TO_ADDR
// sStu := false ;
20944: LD_ADDR_EXP 102
20948: PUSH
20949: LD_INT 0
20951: ST_TO_ADDR
// sBazooka := false ;
20952: LD_ADDR_EXP 105
20956: PUSH
20957: LD_INT 0
20959: ST_TO_ADDR
// sMortar := false ;
20960: LD_ADDR_EXP 106
20964: PUSH
20965: LD_INT 0
20967: ST_TO_ADDR
// sRanger := false ;
20968: LD_ADDR_EXP 116
20972: PUSH
20973: LD_INT 0
20975: ST_TO_ADDR
// sComputer := false ;
20976: LD_ADDR_EXP 117
20980: PUSH
20981: LD_INT 0
20983: ST_TO_ADDR
// s30 := false ;
20984: LD_ADDR_EXP 118
20988: PUSH
20989: LD_INT 0
20991: ST_TO_ADDR
// s60 := false ;
20992: LD_ADDR_EXP 119
20996: PUSH
20997: LD_INT 0
20999: ST_TO_ADDR
// end ;
21000: LD_VAR 0 1
21004: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21005: LD_INT 0
21007: PPUSH
21008: PPUSH
21009: PPUSH
21010: PPUSH
21011: PPUSH
21012: PPUSH
21013: PPUSH
// result := [ ] ;
21014: LD_ADDR_VAR 0 2
21018: PUSH
21019: EMPTY
21020: ST_TO_ADDR
// if campaign_id = 1 then
21021: LD_OWVAR 69
21025: PUSH
21026: LD_INT 1
21028: EQUAL
21029: IFFALSE 24195
// begin case mission_number of 1 :
21031: LD_OWVAR 70
21035: PUSH
21036: LD_INT 1
21038: DOUBLE
21039: EQUAL
21040: IFTRUE 21044
21042: GO 21120
21044: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21045: LD_ADDR_VAR 0 2
21049: PUSH
21050: LD_INT 2
21052: PUSH
21053: LD_INT 4
21055: PUSH
21056: LD_INT 11
21058: PUSH
21059: LD_INT 12
21061: PUSH
21062: LD_INT 15
21064: PUSH
21065: LD_INT 16
21067: PUSH
21068: LD_INT 22
21070: PUSH
21071: LD_INT 23
21073: PUSH
21074: LD_INT 26
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 101
21090: PUSH
21091: LD_INT 102
21093: PUSH
21094: LD_INT 106
21096: PUSH
21097: LD_INT 116
21099: PUSH
21100: LD_INT 117
21102: PUSH
21103: LD_INT 118
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: ST_TO_ADDR
21118: GO 24193
21120: LD_INT 2
21122: DOUBLE
21123: EQUAL
21124: IFTRUE 21128
21126: GO 21212
21128: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21129: LD_ADDR_VAR 0 2
21133: PUSH
21134: LD_INT 2
21136: PUSH
21137: LD_INT 4
21139: PUSH
21140: LD_INT 11
21142: PUSH
21143: LD_INT 12
21145: PUSH
21146: LD_INT 15
21148: PUSH
21149: LD_INT 16
21151: PUSH
21152: LD_INT 22
21154: PUSH
21155: LD_INT 23
21157: PUSH
21158: LD_INT 26
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 101
21174: PUSH
21175: LD_INT 102
21177: PUSH
21178: LD_INT 105
21180: PUSH
21181: LD_INT 106
21183: PUSH
21184: LD_INT 108
21186: PUSH
21187: LD_INT 116
21189: PUSH
21190: LD_INT 117
21192: PUSH
21193: LD_INT 118
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: ST_TO_ADDR
21210: GO 24193
21212: LD_INT 3
21214: DOUBLE
21215: EQUAL
21216: IFTRUE 21220
21218: GO 21308
21220: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21221: LD_ADDR_VAR 0 2
21225: PUSH
21226: LD_INT 2
21228: PUSH
21229: LD_INT 4
21231: PUSH
21232: LD_INT 5
21234: PUSH
21235: LD_INT 11
21237: PUSH
21238: LD_INT 12
21240: PUSH
21241: LD_INT 15
21243: PUSH
21244: LD_INT 16
21246: PUSH
21247: LD_INT 22
21249: PUSH
21250: LD_INT 26
21252: PUSH
21253: LD_INT 36
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 101
21270: PUSH
21271: LD_INT 102
21273: PUSH
21274: LD_INT 105
21276: PUSH
21277: LD_INT 106
21279: PUSH
21280: LD_INT 108
21282: PUSH
21283: LD_INT 116
21285: PUSH
21286: LD_INT 117
21288: PUSH
21289: LD_INT 118
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: ST_TO_ADDR
21306: GO 24193
21308: LD_INT 4
21310: DOUBLE
21311: EQUAL
21312: IFTRUE 21316
21314: GO 21412
21316: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21317: LD_ADDR_VAR 0 2
21321: PUSH
21322: LD_INT 2
21324: PUSH
21325: LD_INT 4
21327: PUSH
21328: LD_INT 5
21330: PUSH
21331: LD_INT 8
21333: PUSH
21334: LD_INT 11
21336: PUSH
21337: LD_INT 12
21339: PUSH
21340: LD_INT 15
21342: PUSH
21343: LD_INT 16
21345: PUSH
21346: LD_INT 22
21348: PUSH
21349: LD_INT 23
21351: PUSH
21352: LD_INT 26
21354: PUSH
21355: LD_INT 36
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 101
21374: PUSH
21375: LD_INT 102
21377: PUSH
21378: LD_INT 105
21380: PUSH
21381: LD_INT 106
21383: PUSH
21384: LD_INT 108
21386: PUSH
21387: LD_INT 116
21389: PUSH
21390: LD_INT 117
21392: PUSH
21393: LD_INT 118
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: ST_TO_ADDR
21410: GO 24193
21412: LD_INT 5
21414: DOUBLE
21415: EQUAL
21416: IFTRUE 21420
21418: GO 21532
21420: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21421: LD_ADDR_VAR 0 2
21425: PUSH
21426: LD_INT 2
21428: PUSH
21429: LD_INT 4
21431: PUSH
21432: LD_INT 5
21434: PUSH
21435: LD_INT 6
21437: PUSH
21438: LD_INT 8
21440: PUSH
21441: LD_INT 11
21443: PUSH
21444: LD_INT 12
21446: PUSH
21447: LD_INT 15
21449: PUSH
21450: LD_INT 16
21452: PUSH
21453: LD_INT 22
21455: PUSH
21456: LD_INT 23
21458: PUSH
21459: LD_INT 25
21461: PUSH
21462: LD_INT 26
21464: PUSH
21465: LD_INT 36
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 101
21486: PUSH
21487: LD_INT 102
21489: PUSH
21490: LD_INT 105
21492: PUSH
21493: LD_INT 106
21495: PUSH
21496: LD_INT 108
21498: PUSH
21499: LD_INT 109
21501: PUSH
21502: LD_INT 112
21504: PUSH
21505: LD_INT 116
21507: PUSH
21508: LD_INT 117
21510: PUSH
21511: LD_INT 118
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: ST_TO_ADDR
21530: GO 24193
21532: LD_INT 6
21534: DOUBLE
21535: EQUAL
21536: IFTRUE 21540
21538: GO 21672
21540: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21541: LD_ADDR_VAR 0 2
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: LD_INT 4
21551: PUSH
21552: LD_INT 5
21554: PUSH
21555: LD_INT 6
21557: PUSH
21558: LD_INT 8
21560: PUSH
21561: LD_INT 11
21563: PUSH
21564: LD_INT 12
21566: PUSH
21567: LD_INT 15
21569: PUSH
21570: LD_INT 16
21572: PUSH
21573: LD_INT 20
21575: PUSH
21576: LD_INT 21
21578: PUSH
21579: LD_INT 22
21581: PUSH
21582: LD_INT 23
21584: PUSH
21585: LD_INT 25
21587: PUSH
21588: LD_INT 26
21590: PUSH
21591: LD_INT 30
21593: PUSH
21594: LD_INT 31
21596: PUSH
21597: LD_INT 32
21599: PUSH
21600: LD_INT 36
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 101
21626: PUSH
21627: LD_INT 102
21629: PUSH
21630: LD_INT 105
21632: PUSH
21633: LD_INT 106
21635: PUSH
21636: LD_INT 108
21638: PUSH
21639: LD_INT 109
21641: PUSH
21642: LD_INT 112
21644: PUSH
21645: LD_INT 116
21647: PUSH
21648: LD_INT 117
21650: PUSH
21651: LD_INT 118
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: ST_TO_ADDR
21670: GO 24193
21672: LD_INT 7
21674: DOUBLE
21675: EQUAL
21676: IFTRUE 21680
21678: GO 21792
21680: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21681: LD_ADDR_VAR 0 2
21685: PUSH
21686: LD_INT 2
21688: PUSH
21689: LD_INT 4
21691: PUSH
21692: LD_INT 5
21694: PUSH
21695: LD_INT 7
21697: PUSH
21698: LD_INT 11
21700: PUSH
21701: LD_INT 12
21703: PUSH
21704: LD_INT 15
21706: PUSH
21707: LD_INT 16
21709: PUSH
21710: LD_INT 20
21712: PUSH
21713: LD_INT 21
21715: PUSH
21716: LD_INT 22
21718: PUSH
21719: LD_INT 23
21721: PUSH
21722: LD_INT 25
21724: PUSH
21725: LD_INT 26
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 101
21746: PUSH
21747: LD_INT 102
21749: PUSH
21750: LD_INT 103
21752: PUSH
21753: LD_INT 105
21755: PUSH
21756: LD_INT 106
21758: PUSH
21759: LD_INT 108
21761: PUSH
21762: LD_INT 112
21764: PUSH
21765: LD_INT 116
21767: PUSH
21768: LD_INT 117
21770: PUSH
21771: LD_INT 118
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: ST_TO_ADDR
21790: GO 24193
21792: LD_INT 8
21794: DOUBLE
21795: EQUAL
21796: IFTRUE 21800
21798: GO 21940
21800: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21801: LD_ADDR_VAR 0 2
21805: PUSH
21806: LD_INT 2
21808: PUSH
21809: LD_INT 4
21811: PUSH
21812: LD_INT 5
21814: PUSH
21815: LD_INT 6
21817: PUSH
21818: LD_INT 7
21820: PUSH
21821: LD_INT 8
21823: PUSH
21824: LD_INT 11
21826: PUSH
21827: LD_INT 12
21829: PUSH
21830: LD_INT 15
21832: PUSH
21833: LD_INT 16
21835: PUSH
21836: LD_INT 20
21838: PUSH
21839: LD_INT 21
21841: PUSH
21842: LD_INT 22
21844: PUSH
21845: LD_INT 23
21847: PUSH
21848: LD_INT 25
21850: PUSH
21851: LD_INT 26
21853: PUSH
21854: LD_INT 30
21856: PUSH
21857: LD_INT 31
21859: PUSH
21860: LD_INT 32
21862: PUSH
21863: LD_INT 36
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 101
21890: PUSH
21891: LD_INT 102
21893: PUSH
21894: LD_INT 103
21896: PUSH
21897: LD_INT 105
21899: PUSH
21900: LD_INT 106
21902: PUSH
21903: LD_INT 108
21905: PUSH
21906: LD_INT 109
21908: PUSH
21909: LD_INT 112
21911: PUSH
21912: LD_INT 116
21914: PUSH
21915: LD_INT 117
21917: PUSH
21918: LD_INT 118
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: ST_TO_ADDR
21938: GO 24193
21940: LD_INT 9
21942: DOUBLE
21943: EQUAL
21944: IFTRUE 21948
21946: GO 22096
21948: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21949: LD_ADDR_VAR 0 2
21953: PUSH
21954: LD_INT 2
21956: PUSH
21957: LD_INT 4
21959: PUSH
21960: LD_INT 5
21962: PUSH
21963: LD_INT 6
21965: PUSH
21966: LD_INT 7
21968: PUSH
21969: LD_INT 8
21971: PUSH
21972: LD_INT 11
21974: PUSH
21975: LD_INT 12
21977: PUSH
21978: LD_INT 15
21980: PUSH
21981: LD_INT 16
21983: PUSH
21984: LD_INT 20
21986: PUSH
21987: LD_INT 21
21989: PUSH
21990: LD_INT 22
21992: PUSH
21993: LD_INT 23
21995: PUSH
21996: LD_INT 25
21998: PUSH
21999: LD_INT 26
22001: PUSH
22002: LD_INT 28
22004: PUSH
22005: LD_INT 30
22007: PUSH
22008: LD_INT 31
22010: PUSH
22011: LD_INT 32
22013: PUSH
22014: LD_INT 36
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 101
22042: PUSH
22043: LD_INT 102
22045: PUSH
22046: LD_INT 103
22048: PUSH
22049: LD_INT 105
22051: PUSH
22052: LD_INT 106
22054: PUSH
22055: LD_INT 108
22057: PUSH
22058: LD_INT 109
22060: PUSH
22061: LD_INT 112
22063: PUSH
22064: LD_INT 114
22066: PUSH
22067: LD_INT 116
22069: PUSH
22070: LD_INT 117
22072: PUSH
22073: LD_INT 118
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: ST_TO_ADDR
22094: GO 24193
22096: LD_INT 10
22098: DOUBLE
22099: EQUAL
22100: IFTRUE 22104
22102: GO 22300
22104: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22105: LD_ADDR_VAR 0 2
22109: PUSH
22110: LD_INT 2
22112: PUSH
22113: LD_INT 4
22115: PUSH
22116: LD_INT 5
22118: PUSH
22119: LD_INT 6
22121: PUSH
22122: LD_INT 7
22124: PUSH
22125: LD_INT 8
22127: PUSH
22128: LD_INT 9
22130: PUSH
22131: LD_INT 10
22133: PUSH
22134: LD_INT 11
22136: PUSH
22137: LD_INT 12
22139: PUSH
22140: LD_INT 13
22142: PUSH
22143: LD_INT 14
22145: PUSH
22146: LD_INT 15
22148: PUSH
22149: LD_INT 16
22151: PUSH
22152: LD_INT 17
22154: PUSH
22155: LD_INT 18
22157: PUSH
22158: LD_INT 19
22160: PUSH
22161: LD_INT 20
22163: PUSH
22164: LD_INT 21
22166: PUSH
22167: LD_INT 22
22169: PUSH
22170: LD_INT 23
22172: PUSH
22173: LD_INT 24
22175: PUSH
22176: LD_INT 25
22178: PUSH
22179: LD_INT 26
22181: PUSH
22182: LD_INT 28
22184: PUSH
22185: LD_INT 30
22187: PUSH
22188: LD_INT 31
22190: PUSH
22191: LD_INT 32
22193: PUSH
22194: LD_INT 36
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 101
22230: PUSH
22231: LD_INT 102
22233: PUSH
22234: LD_INT 103
22236: PUSH
22237: LD_INT 104
22239: PUSH
22240: LD_INT 105
22242: PUSH
22243: LD_INT 106
22245: PUSH
22246: LD_INT 107
22248: PUSH
22249: LD_INT 108
22251: PUSH
22252: LD_INT 109
22254: PUSH
22255: LD_INT 110
22257: PUSH
22258: LD_INT 111
22260: PUSH
22261: LD_INT 112
22263: PUSH
22264: LD_INT 114
22266: PUSH
22267: LD_INT 116
22269: PUSH
22270: LD_INT 117
22272: PUSH
22273: LD_INT 118
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: ST_TO_ADDR
22298: GO 24193
22300: LD_INT 11
22302: DOUBLE
22303: EQUAL
22304: IFTRUE 22308
22306: GO 22512
22308: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22309: LD_ADDR_VAR 0 2
22313: PUSH
22314: LD_INT 2
22316: PUSH
22317: LD_INT 3
22319: PUSH
22320: LD_INT 4
22322: PUSH
22323: LD_INT 5
22325: PUSH
22326: LD_INT 6
22328: PUSH
22329: LD_INT 7
22331: PUSH
22332: LD_INT 8
22334: PUSH
22335: LD_INT 9
22337: PUSH
22338: LD_INT 10
22340: PUSH
22341: LD_INT 11
22343: PUSH
22344: LD_INT 12
22346: PUSH
22347: LD_INT 13
22349: PUSH
22350: LD_INT 14
22352: PUSH
22353: LD_INT 15
22355: PUSH
22356: LD_INT 16
22358: PUSH
22359: LD_INT 17
22361: PUSH
22362: LD_INT 18
22364: PUSH
22365: LD_INT 19
22367: PUSH
22368: LD_INT 20
22370: PUSH
22371: LD_INT 21
22373: PUSH
22374: LD_INT 22
22376: PUSH
22377: LD_INT 23
22379: PUSH
22380: LD_INT 24
22382: PUSH
22383: LD_INT 25
22385: PUSH
22386: LD_INT 26
22388: PUSH
22389: LD_INT 28
22391: PUSH
22392: LD_INT 30
22394: PUSH
22395: LD_INT 31
22397: PUSH
22398: LD_INT 32
22400: PUSH
22401: LD_INT 34
22403: PUSH
22404: LD_INT 36
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 101
22442: PUSH
22443: LD_INT 102
22445: PUSH
22446: LD_INT 103
22448: PUSH
22449: LD_INT 104
22451: PUSH
22452: LD_INT 105
22454: PUSH
22455: LD_INT 106
22457: PUSH
22458: LD_INT 107
22460: PUSH
22461: LD_INT 108
22463: PUSH
22464: LD_INT 109
22466: PUSH
22467: LD_INT 110
22469: PUSH
22470: LD_INT 111
22472: PUSH
22473: LD_INT 112
22475: PUSH
22476: LD_INT 114
22478: PUSH
22479: LD_INT 116
22481: PUSH
22482: LD_INT 117
22484: PUSH
22485: LD_INT 118
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: ST_TO_ADDR
22510: GO 24193
22512: LD_INT 12
22514: DOUBLE
22515: EQUAL
22516: IFTRUE 22520
22518: GO 22740
22520: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22521: LD_ADDR_VAR 0 2
22525: PUSH
22526: LD_INT 1
22528: PUSH
22529: LD_INT 2
22531: PUSH
22532: LD_INT 3
22534: PUSH
22535: LD_INT 4
22537: PUSH
22538: LD_INT 5
22540: PUSH
22541: LD_INT 6
22543: PUSH
22544: LD_INT 7
22546: PUSH
22547: LD_INT 8
22549: PUSH
22550: LD_INT 9
22552: PUSH
22553: LD_INT 10
22555: PUSH
22556: LD_INT 11
22558: PUSH
22559: LD_INT 12
22561: PUSH
22562: LD_INT 13
22564: PUSH
22565: LD_INT 14
22567: PUSH
22568: LD_INT 15
22570: PUSH
22571: LD_INT 16
22573: PUSH
22574: LD_INT 17
22576: PUSH
22577: LD_INT 18
22579: PUSH
22580: LD_INT 19
22582: PUSH
22583: LD_INT 20
22585: PUSH
22586: LD_INT 21
22588: PUSH
22589: LD_INT 22
22591: PUSH
22592: LD_INT 23
22594: PUSH
22595: LD_INT 24
22597: PUSH
22598: LD_INT 25
22600: PUSH
22601: LD_INT 26
22603: PUSH
22604: LD_INT 27
22606: PUSH
22607: LD_INT 28
22609: PUSH
22610: LD_INT 30
22612: PUSH
22613: LD_INT 31
22615: PUSH
22616: LD_INT 32
22618: PUSH
22619: LD_INT 33
22621: PUSH
22622: LD_INT 34
22624: PUSH
22625: LD_INT 36
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 101
22666: PUSH
22667: LD_INT 102
22669: PUSH
22670: LD_INT 103
22672: PUSH
22673: LD_INT 104
22675: PUSH
22676: LD_INT 105
22678: PUSH
22679: LD_INT 106
22681: PUSH
22682: LD_INT 107
22684: PUSH
22685: LD_INT 108
22687: PUSH
22688: LD_INT 109
22690: PUSH
22691: LD_INT 110
22693: PUSH
22694: LD_INT 111
22696: PUSH
22697: LD_INT 112
22699: PUSH
22700: LD_INT 113
22702: PUSH
22703: LD_INT 114
22705: PUSH
22706: LD_INT 116
22708: PUSH
22709: LD_INT 117
22711: PUSH
22712: LD_INT 118
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: ST_TO_ADDR
22738: GO 24193
22740: LD_INT 13
22742: DOUBLE
22743: EQUAL
22744: IFTRUE 22748
22746: GO 22956
22748: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22749: LD_ADDR_VAR 0 2
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: LD_INT 2
22759: PUSH
22760: LD_INT 3
22762: PUSH
22763: LD_INT 4
22765: PUSH
22766: LD_INT 5
22768: PUSH
22769: LD_INT 8
22771: PUSH
22772: LD_INT 9
22774: PUSH
22775: LD_INT 10
22777: PUSH
22778: LD_INT 11
22780: PUSH
22781: LD_INT 12
22783: PUSH
22784: LD_INT 14
22786: PUSH
22787: LD_INT 15
22789: PUSH
22790: LD_INT 16
22792: PUSH
22793: LD_INT 17
22795: PUSH
22796: LD_INT 18
22798: PUSH
22799: LD_INT 19
22801: PUSH
22802: LD_INT 20
22804: PUSH
22805: LD_INT 21
22807: PUSH
22808: LD_INT 22
22810: PUSH
22811: LD_INT 23
22813: PUSH
22814: LD_INT 24
22816: PUSH
22817: LD_INT 25
22819: PUSH
22820: LD_INT 26
22822: PUSH
22823: LD_INT 27
22825: PUSH
22826: LD_INT 28
22828: PUSH
22829: LD_INT 30
22831: PUSH
22832: LD_INT 31
22834: PUSH
22835: LD_INT 32
22837: PUSH
22838: LD_INT 33
22840: PUSH
22841: LD_INT 34
22843: PUSH
22844: LD_INT 36
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 101
22882: PUSH
22883: LD_INT 102
22885: PUSH
22886: LD_INT 103
22888: PUSH
22889: LD_INT 104
22891: PUSH
22892: LD_INT 105
22894: PUSH
22895: LD_INT 106
22897: PUSH
22898: LD_INT 107
22900: PUSH
22901: LD_INT 108
22903: PUSH
22904: LD_INT 109
22906: PUSH
22907: LD_INT 110
22909: PUSH
22910: LD_INT 111
22912: PUSH
22913: LD_INT 112
22915: PUSH
22916: LD_INT 113
22918: PUSH
22919: LD_INT 114
22921: PUSH
22922: LD_INT 116
22924: PUSH
22925: LD_INT 117
22927: PUSH
22928: LD_INT 118
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: ST_TO_ADDR
22954: GO 24193
22956: LD_INT 14
22958: DOUBLE
22959: EQUAL
22960: IFTRUE 22964
22962: GO 23188
22964: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22965: LD_ADDR_VAR 0 2
22969: PUSH
22970: LD_INT 1
22972: PUSH
22973: LD_INT 2
22975: PUSH
22976: LD_INT 3
22978: PUSH
22979: LD_INT 4
22981: PUSH
22982: LD_INT 5
22984: PUSH
22985: LD_INT 6
22987: PUSH
22988: LD_INT 7
22990: PUSH
22991: LD_INT 8
22993: PUSH
22994: LD_INT 9
22996: PUSH
22997: LD_INT 10
22999: PUSH
23000: LD_INT 11
23002: PUSH
23003: LD_INT 12
23005: PUSH
23006: LD_INT 13
23008: PUSH
23009: LD_INT 14
23011: PUSH
23012: LD_INT 15
23014: PUSH
23015: LD_INT 16
23017: PUSH
23018: LD_INT 17
23020: PUSH
23021: LD_INT 18
23023: PUSH
23024: LD_INT 19
23026: PUSH
23027: LD_INT 20
23029: PUSH
23030: LD_INT 21
23032: PUSH
23033: LD_INT 22
23035: PUSH
23036: LD_INT 23
23038: PUSH
23039: LD_INT 24
23041: PUSH
23042: LD_INT 25
23044: PUSH
23045: LD_INT 26
23047: PUSH
23048: LD_INT 27
23050: PUSH
23051: LD_INT 28
23053: PUSH
23054: LD_INT 29
23056: PUSH
23057: LD_INT 30
23059: PUSH
23060: LD_INT 31
23062: PUSH
23063: LD_INT 32
23065: PUSH
23066: LD_INT 33
23068: PUSH
23069: LD_INT 34
23071: PUSH
23072: LD_INT 36
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 101
23114: PUSH
23115: LD_INT 102
23117: PUSH
23118: LD_INT 103
23120: PUSH
23121: LD_INT 104
23123: PUSH
23124: LD_INT 105
23126: PUSH
23127: LD_INT 106
23129: PUSH
23130: LD_INT 107
23132: PUSH
23133: LD_INT 108
23135: PUSH
23136: LD_INT 109
23138: PUSH
23139: LD_INT 110
23141: PUSH
23142: LD_INT 111
23144: PUSH
23145: LD_INT 112
23147: PUSH
23148: LD_INT 113
23150: PUSH
23151: LD_INT 114
23153: PUSH
23154: LD_INT 116
23156: PUSH
23157: LD_INT 117
23159: PUSH
23160: LD_INT 118
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: ST_TO_ADDR
23186: GO 24193
23188: LD_INT 15
23190: DOUBLE
23191: EQUAL
23192: IFTRUE 23196
23194: GO 23420
23196: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23197: LD_ADDR_VAR 0 2
23201: PUSH
23202: LD_INT 1
23204: PUSH
23205: LD_INT 2
23207: PUSH
23208: LD_INT 3
23210: PUSH
23211: LD_INT 4
23213: PUSH
23214: LD_INT 5
23216: PUSH
23217: LD_INT 6
23219: PUSH
23220: LD_INT 7
23222: PUSH
23223: LD_INT 8
23225: PUSH
23226: LD_INT 9
23228: PUSH
23229: LD_INT 10
23231: PUSH
23232: LD_INT 11
23234: PUSH
23235: LD_INT 12
23237: PUSH
23238: LD_INT 13
23240: PUSH
23241: LD_INT 14
23243: PUSH
23244: LD_INT 15
23246: PUSH
23247: LD_INT 16
23249: PUSH
23250: LD_INT 17
23252: PUSH
23253: LD_INT 18
23255: PUSH
23256: LD_INT 19
23258: PUSH
23259: LD_INT 20
23261: PUSH
23262: LD_INT 21
23264: PUSH
23265: LD_INT 22
23267: PUSH
23268: LD_INT 23
23270: PUSH
23271: LD_INT 24
23273: PUSH
23274: LD_INT 25
23276: PUSH
23277: LD_INT 26
23279: PUSH
23280: LD_INT 27
23282: PUSH
23283: LD_INT 28
23285: PUSH
23286: LD_INT 29
23288: PUSH
23289: LD_INT 30
23291: PUSH
23292: LD_INT 31
23294: PUSH
23295: LD_INT 32
23297: PUSH
23298: LD_INT 33
23300: PUSH
23301: LD_INT 34
23303: PUSH
23304: LD_INT 36
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 101
23346: PUSH
23347: LD_INT 102
23349: PUSH
23350: LD_INT 103
23352: PUSH
23353: LD_INT 104
23355: PUSH
23356: LD_INT 105
23358: PUSH
23359: LD_INT 106
23361: PUSH
23362: LD_INT 107
23364: PUSH
23365: LD_INT 108
23367: PUSH
23368: LD_INT 109
23370: PUSH
23371: LD_INT 110
23373: PUSH
23374: LD_INT 111
23376: PUSH
23377: LD_INT 112
23379: PUSH
23380: LD_INT 113
23382: PUSH
23383: LD_INT 114
23385: PUSH
23386: LD_INT 116
23388: PUSH
23389: LD_INT 117
23391: PUSH
23392: LD_INT 118
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: ST_TO_ADDR
23418: GO 24193
23420: LD_INT 16
23422: DOUBLE
23423: EQUAL
23424: IFTRUE 23428
23426: GO 23564
23428: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23429: LD_ADDR_VAR 0 2
23433: PUSH
23434: LD_INT 2
23436: PUSH
23437: LD_INT 4
23439: PUSH
23440: LD_INT 5
23442: PUSH
23443: LD_INT 7
23445: PUSH
23446: LD_INT 11
23448: PUSH
23449: LD_INT 12
23451: PUSH
23452: LD_INT 15
23454: PUSH
23455: LD_INT 16
23457: PUSH
23458: LD_INT 20
23460: PUSH
23461: LD_INT 21
23463: PUSH
23464: LD_INT 22
23466: PUSH
23467: LD_INT 23
23469: PUSH
23470: LD_INT 25
23472: PUSH
23473: LD_INT 26
23475: PUSH
23476: LD_INT 30
23478: PUSH
23479: LD_INT 31
23481: PUSH
23482: LD_INT 32
23484: PUSH
23485: LD_INT 33
23487: PUSH
23488: LD_INT 34
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 101
23514: PUSH
23515: LD_INT 102
23517: PUSH
23518: LD_INT 103
23520: PUSH
23521: LD_INT 106
23523: PUSH
23524: LD_INT 108
23526: PUSH
23527: LD_INT 112
23529: PUSH
23530: LD_INT 113
23532: PUSH
23533: LD_INT 114
23535: PUSH
23536: LD_INT 116
23538: PUSH
23539: LD_INT 117
23541: PUSH
23542: LD_INT 118
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: ST_TO_ADDR
23562: GO 24193
23564: LD_INT 17
23566: DOUBLE
23567: EQUAL
23568: IFTRUE 23572
23570: GO 23796
23572: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23573: LD_ADDR_VAR 0 2
23577: PUSH
23578: LD_INT 1
23580: PUSH
23581: LD_INT 2
23583: PUSH
23584: LD_INT 3
23586: PUSH
23587: LD_INT 4
23589: PUSH
23590: LD_INT 5
23592: PUSH
23593: LD_INT 6
23595: PUSH
23596: LD_INT 7
23598: PUSH
23599: LD_INT 8
23601: PUSH
23602: LD_INT 9
23604: PUSH
23605: LD_INT 10
23607: PUSH
23608: LD_INT 11
23610: PUSH
23611: LD_INT 12
23613: PUSH
23614: LD_INT 13
23616: PUSH
23617: LD_INT 14
23619: PUSH
23620: LD_INT 15
23622: PUSH
23623: LD_INT 16
23625: PUSH
23626: LD_INT 17
23628: PUSH
23629: LD_INT 18
23631: PUSH
23632: LD_INT 19
23634: PUSH
23635: LD_INT 20
23637: PUSH
23638: LD_INT 21
23640: PUSH
23641: LD_INT 22
23643: PUSH
23644: LD_INT 23
23646: PUSH
23647: LD_INT 24
23649: PUSH
23650: LD_INT 25
23652: PUSH
23653: LD_INT 26
23655: PUSH
23656: LD_INT 27
23658: PUSH
23659: LD_INT 28
23661: PUSH
23662: LD_INT 29
23664: PUSH
23665: LD_INT 30
23667: PUSH
23668: LD_INT 31
23670: PUSH
23671: LD_INT 32
23673: PUSH
23674: LD_INT 33
23676: PUSH
23677: LD_INT 34
23679: PUSH
23680: LD_INT 36
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 101
23722: PUSH
23723: LD_INT 102
23725: PUSH
23726: LD_INT 103
23728: PUSH
23729: LD_INT 104
23731: PUSH
23732: LD_INT 105
23734: PUSH
23735: LD_INT 106
23737: PUSH
23738: LD_INT 107
23740: PUSH
23741: LD_INT 108
23743: PUSH
23744: LD_INT 109
23746: PUSH
23747: LD_INT 110
23749: PUSH
23750: LD_INT 111
23752: PUSH
23753: LD_INT 112
23755: PUSH
23756: LD_INT 113
23758: PUSH
23759: LD_INT 114
23761: PUSH
23762: LD_INT 116
23764: PUSH
23765: LD_INT 117
23767: PUSH
23768: LD_INT 118
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: ST_TO_ADDR
23794: GO 24193
23796: LD_INT 18
23798: DOUBLE
23799: EQUAL
23800: IFTRUE 23804
23802: GO 23952
23804: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23805: LD_ADDR_VAR 0 2
23809: PUSH
23810: LD_INT 2
23812: PUSH
23813: LD_INT 4
23815: PUSH
23816: LD_INT 5
23818: PUSH
23819: LD_INT 7
23821: PUSH
23822: LD_INT 11
23824: PUSH
23825: LD_INT 12
23827: PUSH
23828: LD_INT 15
23830: PUSH
23831: LD_INT 16
23833: PUSH
23834: LD_INT 20
23836: PUSH
23837: LD_INT 21
23839: PUSH
23840: LD_INT 22
23842: PUSH
23843: LD_INT 23
23845: PUSH
23846: LD_INT 25
23848: PUSH
23849: LD_INT 26
23851: PUSH
23852: LD_INT 30
23854: PUSH
23855: LD_INT 31
23857: PUSH
23858: LD_INT 32
23860: PUSH
23861: LD_INT 33
23863: PUSH
23864: LD_INT 34
23866: PUSH
23867: LD_INT 35
23869: PUSH
23870: LD_INT 36
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 101
23898: PUSH
23899: LD_INT 102
23901: PUSH
23902: LD_INT 103
23904: PUSH
23905: LD_INT 106
23907: PUSH
23908: LD_INT 108
23910: PUSH
23911: LD_INT 112
23913: PUSH
23914: LD_INT 113
23916: PUSH
23917: LD_INT 114
23919: PUSH
23920: LD_INT 115
23922: PUSH
23923: LD_INT 116
23925: PUSH
23926: LD_INT 117
23928: PUSH
23929: LD_INT 118
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: ST_TO_ADDR
23950: GO 24193
23952: LD_INT 19
23954: DOUBLE
23955: EQUAL
23956: IFTRUE 23960
23958: GO 24192
23960: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23961: LD_ADDR_VAR 0 2
23965: PUSH
23966: LD_INT 1
23968: PUSH
23969: LD_INT 2
23971: PUSH
23972: LD_INT 3
23974: PUSH
23975: LD_INT 4
23977: PUSH
23978: LD_INT 5
23980: PUSH
23981: LD_INT 6
23983: PUSH
23984: LD_INT 7
23986: PUSH
23987: LD_INT 8
23989: PUSH
23990: LD_INT 9
23992: PUSH
23993: LD_INT 10
23995: PUSH
23996: LD_INT 11
23998: PUSH
23999: LD_INT 12
24001: PUSH
24002: LD_INT 13
24004: PUSH
24005: LD_INT 14
24007: PUSH
24008: LD_INT 15
24010: PUSH
24011: LD_INT 16
24013: PUSH
24014: LD_INT 17
24016: PUSH
24017: LD_INT 18
24019: PUSH
24020: LD_INT 19
24022: PUSH
24023: LD_INT 20
24025: PUSH
24026: LD_INT 21
24028: PUSH
24029: LD_INT 22
24031: PUSH
24032: LD_INT 23
24034: PUSH
24035: LD_INT 24
24037: PUSH
24038: LD_INT 25
24040: PUSH
24041: LD_INT 26
24043: PUSH
24044: LD_INT 27
24046: PUSH
24047: LD_INT 28
24049: PUSH
24050: LD_INT 29
24052: PUSH
24053: LD_INT 30
24055: PUSH
24056: LD_INT 31
24058: PUSH
24059: LD_INT 32
24061: PUSH
24062: LD_INT 33
24064: PUSH
24065: LD_INT 34
24067: PUSH
24068: LD_INT 35
24070: PUSH
24071: LD_INT 36
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 101
24114: PUSH
24115: LD_INT 102
24117: PUSH
24118: LD_INT 103
24120: PUSH
24121: LD_INT 104
24123: PUSH
24124: LD_INT 105
24126: PUSH
24127: LD_INT 106
24129: PUSH
24130: LD_INT 107
24132: PUSH
24133: LD_INT 108
24135: PUSH
24136: LD_INT 109
24138: PUSH
24139: LD_INT 110
24141: PUSH
24142: LD_INT 111
24144: PUSH
24145: LD_INT 112
24147: PUSH
24148: LD_INT 113
24150: PUSH
24151: LD_INT 114
24153: PUSH
24154: LD_INT 115
24156: PUSH
24157: LD_INT 116
24159: PUSH
24160: LD_INT 117
24162: PUSH
24163: LD_INT 118
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: ST_TO_ADDR
24190: GO 24193
24192: POP
// end else
24193: GO 24424
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24195: LD_ADDR_VAR 0 2
24199: PUSH
24200: LD_INT 1
24202: PUSH
24203: LD_INT 2
24205: PUSH
24206: LD_INT 3
24208: PUSH
24209: LD_INT 4
24211: PUSH
24212: LD_INT 5
24214: PUSH
24215: LD_INT 6
24217: PUSH
24218: LD_INT 7
24220: PUSH
24221: LD_INT 8
24223: PUSH
24224: LD_INT 9
24226: PUSH
24227: LD_INT 10
24229: PUSH
24230: LD_INT 11
24232: PUSH
24233: LD_INT 12
24235: PUSH
24236: LD_INT 13
24238: PUSH
24239: LD_INT 14
24241: PUSH
24242: LD_INT 15
24244: PUSH
24245: LD_INT 16
24247: PUSH
24248: LD_INT 17
24250: PUSH
24251: LD_INT 18
24253: PUSH
24254: LD_INT 19
24256: PUSH
24257: LD_INT 20
24259: PUSH
24260: LD_INT 21
24262: PUSH
24263: LD_INT 22
24265: PUSH
24266: LD_INT 23
24268: PUSH
24269: LD_INT 24
24271: PUSH
24272: LD_INT 25
24274: PUSH
24275: LD_INT 26
24277: PUSH
24278: LD_INT 27
24280: PUSH
24281: LD_INT 28
24283: PUSH
24284: LD_INT 29
24286: PUSH
24287: LD_INT 30
24289: PUSH
24290: LD_INT 31
24292: PUSH
24293: LD_INT 32
24295: PUSH
24296: LD_INT 33
24298: PUSH
24299: LD_INT 34
24301: PUSH
24302: LD_INT 35
24304: PUSH
24305: LD_INT 36
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 101
24348: PUSH
24349: LD_INT 102
24351: PUSH
24352: LD_INT 103
24354: PUSH
24355: LD_INT 104
24357: PUSH
24358: LD_INT 105
24360: PUSH
24361: LD_INT 106
24363: PUSH
24364: LD_INT 107
24366: PUSH
24367: LD_INT 108
24369: PUSH
24370: LD_INT 109
24372: PUSH
24373: LD_INT 110
24375: PUSH
24376: LD_INT 111
24378: PUSH
24379: LD_INT 112
24381: PUSH
24382: LD_INT 113
24384: PUSH
24385: LD_INT 114
24387: PUSH
24388: LD_INT 115
24390: PUSH
24391: LD_INT 116
24393: PUSH
24394: LD_INT 117
24396: PUSH
24397: LD_INT 118
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: ST_TO_ADDR
// if result then
24424: LD_VAR 0 2
24428: IFFALSE 25214
// begin normal :=  ;
24430: LD_ADDR_VAR 0 5
24434: PUSH
24435: LD_STRING 
24437: ST_TO_ADDR
// hardcore :=  ;
24438: LD_ADDR_VAR 0 6
24442: PUSH
24443: LD_STRING 
24445: ST_TO_ADDR
// active :=  ;
24446: LD_ADDR_VAR 0 7
24450: PUSH
24451: LD_STRING 
24453: ST_TO_ADDR
// for i = 1 to normalCounter do
24454: LD_ADDR_VAR 0 8
24458: PUSH
24459: DOUBLE
24460: LD_INT 1
24462: DEC
24463: ST_TO_ADDR
24464: LD_EXP 64
24468: PUSH
24469: FOR_TO
24470: IFFALSE 24571
// begin tmp := 0 ;
24472: LD_ADDR_VAR 0 3
24476: PUSH
24477: LD_STRING 0
24479: ST_TO_ADDR
// if result [ 1 ] then
24480: LD_VAR 0 2
24484: PUSH
24485: LD_INT 1
24487: ARRAY
24488: IFFALSE 24553
// if result [ 1 ] [ 1 ] = i then
24490: LD_VAR 0 2
24494: PUSH
24495: LD_INT 1
24497: ARRAY
24498: PUSH
24499: LD_INT 1
24501: ARRAY
24502: PUSH
24503: LD_VAR 0 8
24507: EQUAL
24508: IFFALSE 24553
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24510: LD_ADDR_VAR 0 2
24514: PUSH
24515: LD_VAR 0 2
24519: PPUSH
24520: LD_INT 1
24522: PPUSH
24523: LD_VAR 0 2
24527: PUSH
24528: LD_INT 1
24530: ARRAY
24531: PPUSH
24532: LD_INT 1
24534: PPUSH
24535: CALL_OW 3
24539: PPUSH
24540: CALL_OW 1
24544: ST_TO_ADDR
// tmp := 1 ;
24545: LD_ADDR_VAR 0 3
24549: PUSH
24550: LD_STRING 1
24552: ST_TO_ADDR
// end ; normal := normal & tmp ;
24553: LD_ADDR_VAR 0 5
24557: PUSH
24558: LD_VAR 0 5
24562: PUSH
24563: LD_VAR 0 3
24567: STR
24568: ST_TO_ADDR
// end ;
24569: GO 24469
24571: POP
24572: POP
// for i = 1 to hardcoreCounter do
24573: LD_ADDR_VAR 0 8
24577: PUSH
24578: DOUBLE
24579: LD_INT 1
24581: DEC
24582: ST_TO_ADDR
24583: LD_EXP 65
24587: PUSH
24588: FOR_TO
24589: IFFALSE 24694
// begin tmp := 0 ;
24591: LD_ADDR_VAR 0 3
24595: PUSH
24596: LD_STRING 0
24598: ST_TO_ADDR
// if result [ 2 ] then
24599: LD_VAR 0 2
24603: PUSH
24604: LD_INT 2
24606: ARRAY
24607: IFFALSE 24676
// if result [ 2 ] [ 1 ] = 100 + i then
24609: LD_VAR 0 2
24613: PUSH
24614: LD_INT 2
24616: ARRAY
24617: PUSH
24618: LD_INT 1
24620: ARRAY
24621: PUSH
24622: LD_INT 100
24624: PUSH
24625: LD_VAR 0 8
24629: PLUS
24630: EQUAL
24631: IFFALSE 24676
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24633: LD_ADDR_VAR 0 2
24637: PUSH
24638: LD_VAR 0 2
24642: PPUSH
24643: LD_INT 2
24645: PPUSH
24646: LD_VAR 0 2
24650: PUSH
24651: LD_INT 2
24653: ARRAY
24654: PPUSH
24655: LD_INT 1
24657: PPUSH
24658: CALL_OW 3
24662: PPUSH
24663: CALL_OW 1
24667: ST_TO_ADDR
// tmp := 1 ;
24668: LD_ADDR_VAR 0 3
24672: PUSH
24673: LD_STRING 1
24675: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24676: LD_ADDR_VAR 0 6
24680: PUSH
24681: LD_VAR 0 6
24685: PUSH
24686: LD_VAR 0 3
24690: STR
24691: ST_TO_ADDR
// end ;
24692: GO 24588
24694: POP
24695: POP
// if isGameLoad then
24696: LD_VAR 0 1
24700: IFFALSE 25175
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24702: LD_ADDR_VAR 0 4
24706: PUSH
24707: LD_EXP 68
24711: PUSH
24712: LD_EXP 67
24716: PUSH
24717: LD_EXP 69
24721: PUSH
24722: LD_EXP 66
24726: PUSH
24727: LD_EXP 70
24731: PUSH
24732: LD_EXP 71
24736: PUSH
24737: LD_EXP 72
24741: PUSH
24742: LD_EXP 73
24746: PUSH
24747: LD_EXP 74
24751: PUSH
24752: LD_EXP 75
24756: PUSH
24757: LD_EXP 76
24761: PUSH
24762: LD_EXP 77
24766: PUSH
24767: LD_EXP 78
24771: PUSH
24772: LD_EXP 79
24776: PUSH
24777: LD_EXP 87
24781: PUSH
24782: LD_EXP 88
24786: PUSH
24787: LD_EXP 89
24791: PUSH
24792: LD_EXP 90
24796: PUSH
24797: LD_EXP 92
24801: PUSH
24802: LD_EXP 93
24806: PUSH
24807: LD_EXP 94
24811: PUSH
24812: LD_EXP 97
24816: PUSH
24817: LD_EXP 99
24821: PUSH
24822: LD_EXP 100
24826: PUSH
24827: LD_EXP 101
24831: PUSH
24832: LD_EXP 103
24836: PUSH
24837: LD_EXP 104
24841: PUSH
24842: LD_EXP 107
24846: PUSH
24847: LD_EXP 108
24851: PUSH
24852: LD_EXP 109
24856: PUSH
24857: LD_EXP 110
24861: PUSH
24862: LD_EXP 111
24866: PUSH
24867: LD_EXP 112
24871: PUSH
24872: LD_EXP 113
24876: PUSH
24877: LD_EXP 114
24881: PUSH
24882: LD_EXP 115
24886: PUSH
24887: LD_EXP 80
24891: PUSH
24892: LD_EXP 81
24896: PUSH
24897: LD_EXP 84
24901: PUSH
24902: LD_EXP 85
24906: PUSH
24907: LD_EXP 86
24911: PUSH
24912: LD_EXP 82
24916: PUSH
24917: LD_EXP 83
24921: PUSH
24922: LD_EXP 91
24926: PUSH
24927: LD_EXP 95
24931: PUSH
24932: LD_EXP 96
24936: PUSH
24937: LD_EXP 98
24941: PUSH
24942: LD_EXP 102
24946: PUSH
24947: LD_EXP 105
24951: PUSH
24952: LD_EXP 106
24956: PUSH
24957: LD_EXP 116
24961: PUSH
24962: LD_EXP 117
24966: PUSH
24967: LD_EXP 118
24971: PUSH
24972: LD_EXP 119
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: ST_TO_ADDR
// tmp :=  ;
25033: LD_ADDR_VAR 0 3
25037: PUSH
25038: LD_STRING 
25040: ST_TO_ADDR
// for i = 1 to normalCounter do
25041: LD_ADDR_VAR 0 8
25045: PUSH
25046: DOUBLE
25047: LD_INT 1
25049: DEC
25050: ST_TO_ADDR
25051: LD_EXP 64
25055: PUSH
25056: FOR_TO
25057: IFFALSE 25093
// begin if flags [ i ] then
25059: LD_VAR 0 4
25063: PUSH
25064: LD_VAR 0 8
25068: ARRAY
25069: IFFALSE 25091
// tmp := tmp & i & ; ;
25071: LD_ADDR_VAR 0 3
25075: PUSH
25076: LD_VAR 0 3
25080: PUSH
25081: LD_VAR 0 8
25085: STR
25086: PUSH
25087: LD_STRING ;
25089: STR
25090: ST_TO_ADDR
// end ;
25091: GO 25056
25093: POP
25094: POP
// for i = 1 to hardcoreCounter do
25095: LD_ADDR_VAR 0 8
25099: PUSH
25100: DOUBLE
25101: LD_INT 1
25103: DEC
25104: ST_TO_ADDR
25105: LD_EXP 65
25109: PUSH
25110: FOR_TO
25111: IFFALSE 25157
// begin if flags [ normalCounter + i ] then
25113: LD_VAR 0 4
25117: PUSH
25118: LD_EXP 64
25122: PUSH
25123: LD_VAR 0 8
25127: PLUS
25128: ARRAY
25129: IFFALSE 25155
// tmp := tmp & ( 100 + i ) & ; ;
25131: LD_ADDR_VAR 0 3
25135: PUSH
25136: LD_VAR 0 3
25140: PUSH
25141: LD_INT 100
25143: PUSH
25144: LD_VAR 0 8
25148: PLUS
25149: STR
25150: PUSH
25151: LD_STRING ;
25153: STR
25154: ST_TO_ADDR
// end ;
25155: GO 25110
25157: POP
25158: POP
// if tmp then
25159: LD_VAR 0 3
25163: IFFALSE 25175
// active := tmp ;
25165: LD_ADDR_VAR 0 7
25169: PUSH
25170: LD_VAR 0 3
25174: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25175: LD_STRING getStreamItemsFromMission("
25177: PUSH
25178: LD_VAR 0 5
25182: STR
25183: PUSH
25184: LD_STRING ","
25186: STR
25187: PUSH
25188: LD_VAR 0 6
25192: STR
25193: PUSH
25194: LD_STRING ","
25196: STR
25197: PUSH
25198: LD_VAR 0 7
25202: STR
25203: PUSH
25204: LD_STRING ")
25206: STR
25207: PPUSH
25208: CALL_OW 559
// end else
25212: GO 25221
// ToLua ( getStreamItemsFromMission("","","") ) ;
25214: LD_STRING getStreamItemsFromMission("","","")
25216: PPUSH
25217: CALL_OW 559
// end ;
25221: LD_VAR 0 2
25225: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25226: LD_EXP 63
25230: PUSH
25231: LD_EXP 68
25235: AND
25236: IFFALSE 25360
25238: GO 25240
25240: DISABLE
25241: LD_INT 0
25243: PPUSH
25244: PPUSH
// begin enable ;
25245: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25246: LD_ADDR_VAR 0 2
25250: PUSH
25251: LD_INT 22
25253: PUSH
25254: LD_OWVAR 2
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: LD_INT 34
25268: PUSH
25269: LD_INT 7
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 34
25278: PUSH
25279: LD_INT 45
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 34
25288: PUSH
25289: LD_INT 28
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 34
25298: PUSH
25299: LD_INT 47
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PPUSH
25317: CALL_OW 69
25321: ST_TO_ADDR
// if not tmp then
25322: LD_VAR 0 2
25326: NOT
25327: IFFALSE 25331
// exit ;
25329: GO 25360
// for i in tmp do
25331: LD_ADDR_VAR 0 1
25335: PUSH
25336: LD_VAR 0 2
25340: PUSH
25341: FOR_IN
25342: IFFALSE 25358
// begin SetLives ( i , 0 ) ;
25344: LD_VAR 0 1
25348: PPUSH
25349: LD_INT 0
25351: PPUSH
25352: CALL_OW 234
// end ;
25356: GO 25341
25358: POP
25359: POP
// end ;
25360: PPOPN 2
25362: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25363: LD_EXP 63
25367: PUSH
25368: LD_EXP 69
25372: AND
25373: IFFALSE 25457
25375: GO 25377
25377: DISABLE
25378: LD_INT 0
25380: PPUSH
25381: PPUSH
// begin enable ;
25382: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25383: LD_ADDR_VAR 0 2
25387: PUSH
25388: LD_INT 22
25390: PUSH
25391: LD_OWVAR 2
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 32
25402: PUSH
25403: LD_INT 3
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PPUSH
25414: CALL_OW 69
25418: ST_TO_ADDR
// if not tmp then
25419: LD_VAR 0 2
25423: NOT
25424: IFFALSE 25428
// exit ;
25426: GO 25457
// for i in tmp do
25428: LD_ADDR_VAR 0 1
25432: PUSH
25433: LD_VAR 0 2
25437: PUSH
25438: FOR_IN
25439: IFFALSE 25455
// begin SetLives ( i , 0 ) ;
25441: LD_VAR 0 1
25445: PPUSH
25446: LD_INT 0
25448: PPUSH
25449: CALL_OW 234
// end ;
25453: GO 25438
25455: POP
25456: POP
// end ;
25457: PPOPN 2
25459: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25460: LD_EXP 63
25464: PUSH
25465: LD_EXP 66
25469: AND
25470: IFFALSE 25563
25472: GO 25474
25474: DISABLE
25475: LD_INT 0
25477: PPUSH
// begin enable ;
25478: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25479: LD_ADDR_VAR 0 1
25483: PUSH
25484: LD_INT 22
25486: PUSH
25487: LD_OWVAR 2
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 2
25498: PUSH
25499: LD_INT 25
25501: PUSH
25502: LD_INT 5
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 25
25511: PUSH
25512: LD_INT 9
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 25
25521: PUSH
25522: LD_INT 8
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PPUSH
25539: CALL_OW 69
25543: PUSH
25544: FOR_IN
25545: IFFALSE 25561
// begin SetClass ( i , 1 ) ;
25547: LD_VAR 0 1
25551: PPUSH
25552: LD_INT 1
25554: PPUSH
25555: CALL_OW 336
// end ;
25559: GO 25544
25561: POP
25562: POP
// end ;
25563: PPOPN 1
25565: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25566: LD_EXP 63
25570: PUSH
25571: LD_EXP 67
25575: AND
25576: PUSH
25577: LD_OWVAR 65
25581: PUSH
25582: LD_INT 7
25584: LESS
25585: AND
25586: IFFALSE 25600
25588: GO 25590
25590: DISABLE
// begin enable ;
25591: ENABLE
// game_speed := 7 ;
25592: LD_ADDR_OWVAR 65
25596: PUSH
25597: LD_INT 7
25599: ST_TO_ADDR
// end ;
25600: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25601: LD_EXP 63
25605: PUSH
25606: LD_EXP 70
25610: AND
25611: IFFALSE 25813
25613: GO 25615
25615: DISABLE
25616: LD_INT 0
25618: PPUSH
25619: PPUSH
25620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25621: LD_ADDR_VAR 0 3
25625: PUSH
25626: LD_INT 81
25628: PUSH
25629: LD_OWVAR 2
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 21
25640: PUSH
25641: LD_INT 1
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PPUSH
25652: CALL_OW 69
25656: ST_TO_ADDR
// if not tmp then
25657: LD_VAR 0 3
25661: NOT
25662: IFFALSE 25666
// exit ;
25664: GO 25813
// if tmp > 5 then
25666: LD_VAR 0 3
25670: PUSH
25671: LD_INT 5
25673: GREATER
25674: IFFALSE 25686
// k := 5 else
25676: LD_ADDR_VAR 0 2
25680: PUSH
25681: LD_INT 5
25683: ST_TO_ADDR
25684: GO 25696
// k := tmp ;
25686: LD_ADDR_VAR 0 2
25690: PUSH
25691: LD_VAR 0 3
25695: ST_TO_ADDR
// for i := 1 to k do
25696: LD_ADDR_VAR 0 1
25700: PUSH
25701: DOUBLE
25702: LD_INT 1
25704: DEC
25705: ST_TO_ADDR
25706: LD_VAR 0 2
25710: PUSH
25711: FOR_TO
25712: IFFALSE 25811
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25714: LD_VAR 0 3
25718: PUSH
25719: LD_VAR 0 1
25723: ARRAY
25724: PPUSH
25725: LD_VAR 0 1
25729: PUSH
25730: LD_INT 4
25732: MOD
25733: PUSH
25734: LD_INT 1
25736: PLUS
25737: PPUSH
25738: CALL_OW 259
25742: PUSH
25743: LD_INT 10
25745: LESS
25746: IFFALSE 25809
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25748: LD_VAR 0 3
25752: PUSH
25753: LD_VAR 0 1
25757: ARRAY
25758: PPUSH
25759: LD_VAR 0 1
25763: PUSH
25764: LD_INT 4
25766: MOD
25767: PUSH
25768: LD_INT 1
25770: PLUS
25771: PPUSH
25772: LD_VAR 0 3
25776: PUSH
25777: LD_VAR 0 1
25781: ARRAY
25782: PPUSH
25783: LD_VAR 0 1
25787: PUSH
25788: LD_INT 4
25790: MOD
25791: PUSH
25792: LD_INT 1
25794: PLUS
25795: PPUSH
25796: CALL_OW 259
25800: PUSH
25801: LD_INT 1
25803: PLUS
25804: PPUSH
25805: CALL_OW 237
25809: GO 25711
25811: POP
25812: POP
// end ;
25813: PPOPN 3
25815: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25816: LD_EXP 63
25820: PUSH
25821: LD_EXP 71
25825: AND
25826: IFFALSE 25846
25828: GO 25830
25830: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25831: LD_INT 4
25833: PPUSH
25834: LD_OWVAR 2
25838: PPUSH
25839: LD_INT 0
25841: PPUSH
25842: CALL_OW 324
25846: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25847: LD_EXP 63
25851: PUSH
25852: LD_EXP 100
25856: AND
25857: IFFALSE 25877
25859: GO 25861
25861: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25862: LD_INT 19
25864: PPUSH
25865: LD_OWVAR 2
25869: PPUSH
25870: LD_INT 0
25872: PPUSH
25873: CALL_OW 324
25877: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25878: LD_EXP 63
25882: PUSH
25883: LD_EXP 72
25887: AND
25888: IFFALSE 25990
25890: GO 25892
25892: DISABLE
25893: LD_INT 0
25895: PPUSH
25896: PPUSH
// begin enable ;
25897: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25898: LD_ADDR_VAR 0 2
25902: PUSH
25903: LD_INT 22
25905: PUSH
25906: LD_OWVAR 2
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 2
25917: PUSH
25918: LD_INT 34
25920: PUSH
25921: LD_INT 11
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 34
25930: PUSH
25931: LD_INT 30
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: LIST
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PPUSH
25947: CALL_OW 69
25951: ST_TO_ADDR
// if not tmp then
25952: LD_VAR 0 2
25956: NOT
25957: IFFALSE 25961
// exit ;
25959: GO 25990
// for i in tmp do
25961: LD_ADDR_VAR 0 1
25965: PUSH
25966: LD_VAR 0 2
25970: PUSH
25971: FOR_IN
25972: IFFALSE 25988
// begin SetLives ( i , 0 ) ;
25974: LD_VAR 0 1
25978: PPUSH
25979: LD_INT 0
25981: PPUSH
25982: CALL_OW 234
// end ;
25986: GO 25971
25988: POP
25989: POP
// end ;
25990: PPOPN 2
25992: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25993: LD_EXP 63
25997: PUSH
25998: LD_EXP 73
26002: AND
26003: IFFALSE 26023
26005: GO 26007
26007: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26008: LD_INT 32
26010: PPUSH
26011: LD_OWVAR 2
26015: PPUSH
26016: LD_INT 0
26018: PPUSH
26019: CALL_OW 324
26023: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26024: LD_EXP 63
26028: PUSH
26029: LD_EXP 74
26033: AND
26034: IFFALSE 26215
26036: GO 26038
26038: DISABLE
26039: LD_INT 0
26041: PPUSH
26042: PPUSH
26043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26044: LD_ADDR_VAR 0 2
26048: PUSH
26049: LD_INT 22
26051: PUSH
26052: LD_OWVAR 2
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 33
26063: PUSH
26064: LD_INT 3
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PPUSH
26075: CALL_OW 69
26079: ST_TO_ADDR
// if not tmp then
26080: LD_VAR 0 2
26084: NOT
26085: IFFALSE 26089
// exit ;
26087: GO 26215
// side := 0 ;
26089: LD_ADDR_VAR 0 3
26093: PUSH
26094: LD_INT 0
26096: ST_TO_ADDR
// for i := 1 to 8 do
26097: LD_ADDR_VAR 0 1
26101: PUSH
26102: DOUBLE
26103: LD_INT 1
26105: DEC
26106: ST_TO_ADDR
26107: LD_INT 8
26109: PUSH
26110: FOR_TO
26111: IFFALSE 26159
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26113: LD_OWVAR 2
26117: PUSH
26118: LD_VAR 0 1
26122: NONEQUAL
26123: PUSH
26124: LD_OWVAR 2
26128: PPUSH
26129: LD_VAR 0 1
26133: PPUSH
26134: CALL_OW 81
26138: PUSH
26139: LD_INT 2
26141: EQUAL
26142: AND
26143: IFFALSE 26157
// begin side := i ;
26145: LD_ADDR_VAR 0 3
26149: PUSH
26150: LD_VAR 0 1
26154: ST_TO_ADDR
// break ;
26155: GO 26159
// end ;
26157: GO 26110
26159: POP
26160: POP
// if not side then
26161: LD_VAR 0 3
26165: NOT
26166: IFFALSE 26170
// exit ;
26168: GO 26215
// for i := 1 to tmp do
26170: LD_ADDR_VAR 0 1
26174: PUSH
26175: DOUBLE
26176: LD_INT 1
26178: DEC
26179: ST_TO_ADDR
26180: LD_VAR 0 2
26184: PUSH
26185: FOR_TO
26186: IFFALSE 26213
// if Prob ( 60 ) then
26188: LD_INT 60
26190: PPUSH
26191: CALL_OW 13
26195: IFFALSE 26211
// SetSide ( i , side ) ;
26197: LD_VAR 0 1
26201: PPUSH
26202: LD_VAR 0 3
26206: PPUSH
26207: CALL_OW 235
26211: GO 26185
26213: POP
26214: POP
// end ;
26215: PPOPN 3
26217: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26218: LD_EXP 63
26222: PUSH
26223: LD_EXP 76
26227: AND
26228: IFFALSE 26347
26230: GO 26232
26232: DISABLE
26233: LD_INT 0
26235: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26236: LD_ADDR_VAR 0 1
26240: PUSH
26241: LD_INT 22
26243: PUSH
26244: LD_OWVAR 2
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 21
26255: PUSH
26256: LD_INT 1
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 3
26265: PUSH
26266: LD_INT 23
26268: PUSH
26269: LD_INT 0
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: LIST
26284: PPUSH
26285: CALL_OW 69
26289: PUSH
26290: FOR_IN
26291: IFFALSE 26345
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26293: LD_VAR 0 1
26297: PPUSH
26298: CALL_OW 257
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: LD_INT 2
26308: PUSH
26309: LD_INT 3
26311: PUSH
26312: LD_INT 4
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: IN
26321: IFFALSE 26343
// SetClass ( un , rand ( 1 , 4 ) ) ;
26323: LD_VAR 0 1
26327: PPUSH
26328: LD_INT 1
26330: PPUSH
26331: LD_INT 4
26333: PPUSH
26334: CALL_OW 12
26338: PPUSH
26339: CALL_OW 336
26343: GO 26290
26345: POP
26346: POP
// end ;
26347: PPOPN 1
26349: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26350: LD_EXP 63
26354: PUSH
26355: LD_EXP 75
26359: AND
26360: IFFALSE 26439
26362: GO 26364
26364: DISABLE
26365: LD_INT 0
26367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26368: LD_ADDR_VAR 0 1
26372: PUSH
26373: LD_INT 22
26375: PUSH
26376: LD_OWVAR 2
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 21
26387: PUSH
26388: LD_INT 3
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PPUSH
26399: CALL_OW 69
26403: ST_TO_ADDR
// if not tmp then
26404: LD_VAR 0 1
26408: NOT
26409: IFFALSE 26413
// exit ;
26411: GO 26439
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26413: LD_VAR 0 1
26417: PUSH
26418: LD_INT 1
26420: PPUSH
26421: LD_VAR 0 1
26425: PPUSH
26426: CALL_OW 12
26430: ARRAY
26431: PPUSH
26432: LD_INT 100
26434: PPUSH
26435: CALL_OW 234
// end ;
26439: PPOPN 1
26441: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26442: LD_EXP 63
26446: PUSH
26447: LD_EXP 77
26451: AND
26452: IFFALSE 26550
26454: GO 26456
26456: DISABLE
26457: LD_INT 0
26459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26460: LD_ADDR_VAR 0 1
26464: PUSH
26465: LD_INT 22
26467: PUSH
26468: LD_OWVAR 2
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 21
26479: PUSH
26480: LD_INT 1
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PPUSH
26491: CALL_OW 69
26495: ST_TO_ADDR
// if not tmp then
26496: LD_VAR 0 1
26500: NOT
26501: IFFALSE 26505
// exit ;
26503: GO 26550
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26505: LD_VAR 0 1
26509: PUSH
26510: LD_INT 1
26512: PPUSH
26513: LD_VAR 0 1
26517: PPUSH
26518: CALL_OW 12
26522: ARRAY
26523: PPUSH
26524: LD_INT 1
26526: PPUSH
26527: LD_INT 4
26529: PPUSH
26530: CALL_OW 12
26534: PPUSH
26535: LD_INT 3000
26537: PPUSH
26538: LD_INT 9000
26540: PPUSH
26541: CALL_OW 12
26545: PPUSH
26546: CALL_OW 492
// end ;
26550: PPOPN 1
26552: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26553: LD_EXP 63
26557: PUSH
26558: LD_EXP 78
26562: AND
26563: IFFALSE 26583
26565: GO 26567
26567: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26568: LD_INT 1
26570: PPUSH
26571: LD_OWVAR 2
26575: PPUSH
26576: LD_INT 0
26578: PPUSH
26579: CALL_OW 324
26583: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26584: LD_EXP 63
26588: PUSH
26589: LD_EXP 79
26593: AND
26594: IFFALSE 26677
26596: GO 26598
26598: DISABLE
26599: LD_INT 0
26601: PPUSH
26602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26603: LD_ADDR_VAR 0 2
26607: PUSH
26608: LD_INT 22
26610: PUSH
26611: LD_OWVAR 2
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 21
26622: PUSH
26623: LD_INT 3
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PPUSH
26634: CALL_OW 69
26638: ST_TO_ADDR
// if not tmp then
26639: LD_VAR 0 2
26643: NOT
26644: IFFALSE 26648
// exit ;
26646: GO 26677
// for i in tmp do
26648: LD_ADDR_VAR 0 1
26652: PUSH
26653: LD_VAR 0 2
26657: PUSH
26658: FOR_IN
26659: IFFALSE 26675
// SetBLevel ( i , 10 ) ;
26661: LD_VAR 0 1
26665: PPUSH
26666: LD_INT 10
26668: PPUSH
26669: CALL_OW 241
26673: GO 26658
26675: POP
26676: POP
// end ;
26677: PPOPN 2
26679: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26680: LD_EXP 63
26684: PUSH
26685: LD_EXP 80
26689: AND
26690: IFFALSE 26801
26692: GO 26694
26694: DISABLE
26695: LD_INT 0
26697: PPUSH
26698: PPUSH
26699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26700: LD_ADDR_VAR 0 3
26704: PUSH
26705: LD_INT 22
26707: PUSH
26708: LD_OWVAR 2
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 25
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PPUSH
26731: CALL_OW 69
26735: ST_TO_ADDR
// if not tmp then
26736: LD_VAR 0 3
26740: NOT
26741: IFFALSE 26745
// exit ;
26743: GO 26801
// un := tmp [ rand ( 1 , tmp ) ] ;
26745: LD_ADDR_VAR 0 2
26749: PUSH
26750: LD_VAR 0 3
26754: PUSH
26755: LD_INT 1
26757: PPUSH
26758: LD_VAR 0 3
26762: PPUSH
26763: CALL_OW 12
26767: ARRAY
26768: ST_TO_ADDR
// if Crawls ( un ) then
26769: LD_VAR 0 2
26773: PPUSH
26774: CALL_OW 318
26778: IFFALSE 26789
// ComWalk ( un ) ;
26780: LD_VAR 0 2
26784: PPUSH
26785: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26789: LD_VAR 0 2
26793: PPUSH
26794: LD_INT 5
26796: PPUSH
26797: CALL_OW 336
// end ;
26801: PPOPN 3
26803: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26804: LD_EXP 63
26808: PUSH
26809: LD_EXP 81
26813: AND
26814: PUSH
26815: LD_OWVAR 67
26819: PUSH
26820: LD_INT 4
26822: LESS
26823: AND
26824: IFFALSE 26843
26826: GO 26828
26828: DISABLE
// begin Difficulty := Difficulty + 1 ;
26829: LD_ADDR_OWVAR 67
26833: PUSH
26834: LD_OWVAR 67
26838: PUSH
26839: LD_INT 1
26841: PLUS
26842: ST_TO_ADDR
// end ;
26843: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26844: LD_EXP 63
26848: PUSH
26849: LD_EXP 82
26853: AND
26854: IFFALSE 26957
26856: GO 26858
26858: DISABLE
26859: LD_INT 0
26861: PPUSH
// begin for i := 1 to 5 do
26862: LD_ADDR_VAR 0 1
26866: PUSH
26867: DOUBLE
26868: LD_INT 1
26870: DEC
26871: ST_TO_ADDR
26872: LD_INT 5
26874: PUSH
26875: FOR_TO
26876: IFFALSE 26955
// begin uc_nation := nation_nature ;
26878: LD_ADDR_OWVAR 21
26882: PUSH
26883: LD_INT 0
26885: ST_TO_ADDR
// uc_side := 0 ;
26886: LD_ADDR_OWVAR 20
26890: PUSH
26891: LD_INT 0
26893: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26894: LD_ADDR_OWVAR 29
26898: PUSH
26899: LD_INT 12
26901: PUSH
26902: LD_INT 12
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: ST_TO_ADDR
// hc_agressivity := 20 ;
26909: LD_ADDR_OWVAR 35
26913: PUSH
26914: LD_INT 20
26916: ST_TO_ADDR
// hc_class := class_tiger ;
26917: LD_ADDR_OWVAR 28
26921: PUSH
26922: LD_INT 14
26924: ST_TO_ADDR
// hc_gallery :=  ;
26925: LD_ADDR_OWVAR 33
26929: PUSH
26930: LD_STRING 
26932: ST_TO_ADDR
// hc_name :=  ;
26933: LD_ADDR_OWVAR 26
26937: PUSH
26938: LD_STRING 
26940: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26941: CALL_OW 44
26945: PPUSH
26946: LD_INT 0
26948: PPUSH
26949: CALL_OW 51
// end ;
26953: GO 26875
26955: POP
26956: POP
// end ;
26957: PPOPN 1
26959: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26960: LD_EXP 63
26964: PUSH
26965: LD_EXP 83
26969: AND
26970: IFFALSE 26979
26972: GO 26974
26974: DISABLE
// StreamSibBomb ;
26975: CALL 26980 0 0
26979: END
// export function StreamSibBomb ; var i , x , y ; begin
26980: LD_INT 0
26982: PPUSH
26983: PPUSH
26984: PPUSH
26985: PPUSH
// result := false ;
26986: LD_ADDR_VAR 0 1
26990: PUSH
26991: LD_INT 0
26993: ST_TO_ADDR
// for i := 1 to 16 do
26994: LD_ADDR_VAR 0 2
26998: PUSH
26999: DOUBLE
27000: LD_INT 1
27002: DEC
27003: ST_TO_ADDR
27004: LD_INT 16
27006: PUSH
27007: FOR_TO
27008: IFFALSE 27207
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27010: LD_ADDR_VAR 0 3
27014: PUSH
27015: LD_INT 10
27017: PUSH
27018: LD_INT 20
27020: PUSH
27021: LD_INT 30
27023: PUSH
27024: LD_INT 40
27026: PUSH
27027: LD_INT 50
27029: PUSH
27030: LD_INT 60
27032: PUSH
27033: LD_INT 70
27035: PUSH
27036: LD_INT 80
27038: PUSH
27039: LD_INT 90
27041: PUSH
27042: LD_INT 100
27044: PUSH
27045: LD_INT 110
27047: PUSH
27048: LD_INT 120
27050: PUSH
27051: LD_INT 130
27053: PUSH
27054: LD_INT 140
27056: PUSH
27057: LD_INT 150
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 1
27079: PPUSH
27080: LD_INT 15
27082: PPUSH
27083: CALL_OW 12
27087: ARRAY
27088: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27089: LD_ADDR_VAR 0 4
27093: PUSH
27094: LD_INT 10
27096: PUSH
27097: LD_INT 20
27099: PUSH
27100: LD_INT 30
27102: PUSH
27103: LD_INT 40
27105: PUSH
27106: LD_INT 50
27108: PUSH
27109: LD_INT 60
27111: PUSH
27112: LD_INT 70
27114: PUSH
27115: LD_INT 80
27117: PUSH
27118: LD_INT 90
27120: PUSH
27121: LD_INT 100
27123: PUSH
27124: LD_INT 110
27126: PUSH
27127: LD_INT 120
27129: PUSH
27130: LD_INT 130
27132: PUSH
27133: LD_INT 140
27135: PUSH
27136: LD_INT 150
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 1
27158: PPUSH
27159: LD_INT 15
27161: PPUSH
27162: CALL_OW 12
27166: ARRAY
27167: ST_TO_ADDR
// if ValidHex ( x , y ) then
27168: LD_VAR 0 3
27172: PPUSH
27173: LD_VAR 0 4
27177: PPUSH
27178: CALL_OW 488
27182: IFFALSE 27205
// begin result := [ x , y ] ;
27184: LD_ADDR_VAR 0 1
27188: PUSH
27189: LD_VAR 0 3
27193: PUSH
27194: LD_VAR 0 4
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: ST_TO_ADDR
// break ;
27203: GO 27207
// end ; end ;
27205: GO 27007
27207: POP
27208: POP
// if result then
27209: LD_VAR 0 1
27213: IFFALSE 27273
// begin ToLua ( playSibBomb() ) ;
27215: LD_STRING playSibBomb()
27217: PPUSH
27218: CALL_OW 559
// wait ( 0 0$14 ) ;
27222: LD_INT 490
27224: PPUSH
27225: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27229: LD_VAR 0 1
27233: PUSH
27234: LD_INT 1
27236: ARRAY
27237: PPUSH
27238: LD_VAR 0 1
27242: PUSH
27243: LD_INT 2
27245: ARRAY
27246: PPUSH
27247: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27251: LD_VAR 0 1
27255: PUSH
27256: LD_INT 1
27258: ARRAY
27259: PPUSH
27260: LD_VAR 0 1
27264: PUSH
27265: LD_INT 2
27267: ARRAY
27268: PPUSH
27269: CALL_OW 429
// end ; end ;
27273: LD_VAR 0 1
27277: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27278: LD_EXP 63
27282: PUSH
27283: LD_EXP 85
27287: AND
27288: IFFALSE 27300
27290: GO 27292
27292: DISABLE
// YouLost (  ) ;
27293: LD_STRING 
27295: PPUSH
27296: CALL_OW 104
27300: END
// every 0 0$1 trigger StreamModeActive and sFog do
27301: LD_EXP 63
27305: PUSH
27306: LD_EXP 84
27310: AND
27311: IFFALSE 27325
27313: GO 27315
27315: DISABLE
// FogOff ( your_side ) ;
27316: LD_OWVAR 2
27320: PPUSH
27321: CALL_OW 344
27325: END
// every 0 0$1 trigger StreamModeActive and sSun do
27326: LD_EXP 63
27330: PUSH
27331: LD_EXP 86
27335: AND
27336: IFFALSE 27364
27338: GO 27340
27340: DISABLE
// begin solar_recharge_percent := 0 ;
27341: LD_ADDR_OWVAR 79
27345: PUSH
27346: LD_INT 0
27348: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27349: LD_INT 10500
27351: PPUSH
27352: CALL_OW 67
// solar_recharge_percent := 100 ;
27356: LD_ADDR_OWVAR 79
27360: PUSH
27361: LD_INT 100
27363: ST_TO_ADDR
// end ;
27364: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27365: LD_EXP 63
27369: PUSH
27370: LD_EXP 87
27374: AND
27375: IFFALSE 27614
27377: GO 27379
27379: DISABLE
27380: LD_INT 0
27382: PPUSH
27383: PPUSH
27384: PPUSH
// begin tmp := [ ] ;
27385: LD_ADDR_VAR 0 3
27389: PUSH
27390: EMPTY
27391: ST_TO_ADDR
// for i := 1 to 6 do
27392: LD_ADDR_VAR 0 1
27396: PUSH
27397: DOUBLE
27398: LD_INT 1
27400: DEC
27401: ST_TO_ADDR
27402: LD_INT 6
27404: PUSH
27405: FOR_TO
27406: IFFALSE 27511
// begin uc_nation := nation_nature ;
27408: LD_ADDR_OWVAR 21
27412: PUSH
27413: LD_INT 0
27415: ST_TO_ADDR
// uc_side := 0 ;
27416: LD_ADDR_OWVAR 20
27420: PUSH
27421: LD_INT 0
27423: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27424: LD_ADDR_OWVAR 29
27428: PUSH
27429: LD_INT 12
27431: PUSH
27432: LD_INT 12
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: ST_TO_ADDR
// hc_agressivity := 20 ;
27439: LD_ADDR_OWVAR 35
27443: PUSH
27444: LD_INT 20
27446: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27447: LD_ADDR_OWVAR 28
27451: PUSH
27452: LD_INT 17
27454: ST_TO_ADDR
// hc_gallery :=  ;
27455: LD_ADDR_OWVAR 33
27459: PUSH
27460: LD_STRING 
27462: ST_TO_ADDR
// hc_name :=  ;
27463: LD_ADDR_OWVAR 26
27467: PUSH
27468: LD_STRING 
27470: ST_TO_ADDR
// un := CreateHuman ;
27471: LD_ADDR_VAR 0 2
27475: PUSH
27476: CALL_OW 44
27480: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27481: LD_VAR 0 2
27485: PPUSH
27486: LD_INT 1
27488: PPUSH
27489: CALL_OW 51
// tmp := tmp ^ un ;
27493: LD_ADDR_VAR 0 3
27497: PUSH
27498: LD_VAR 0 3
27502: PUSH
27503: LD_VAR 0 2
27507: ADD
27508: ST_TO_ADDR
// end ;
27509: GO 27405
27511: POP
27512: POP
// repeat wait ( 0 0$1 ) ;
27513: LD_INT 35
27515: PPUSH
27516: CALL_OW 67
// for un in tmp do
27520: LD_ADDR_VAR 0 2
27524: PUSH
27525: LD_VAR 0 3
27529: PUSH
27530: FOR_IN
27531: IFFALSE 27605
// begin if IsDead ( un ) then
27533: LD_VAR 0 2
27537: PPUSH
27538: CALL_OW 301
27542: IFFALSE 27562
// begin tmp := tmp diff un ;
27544: LD_ADDR_VAR 0 3
27548: PUSH
27549: LD_VAR 0 3
27553: PUSH
27554: LD_VAR 0 2
27558: DIFF
27559: ST_TO_ADDR
// continue ;
27560: GO 27530
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27562: LD_VAR 0 2
27566: PPUSH
27567: LD_INT 3
27569: PUSH
27570: LD_INT 22
27572: PUSH
27573: LD_INT 0
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PPUSH
27584: CALL_OW 69
27588: PPUSH
27589: LD_VAR 0 2
27593: PPUSH
27594: CALL_OW 74
27598: PPUSH
27599: CALL_OW 115
// end ;
27603: GO 27530
27605: POP
27606: POP
// until not tmp ;
27607: LD_VAR 0 3
27611: NOT
27612: IFFALSE 27513
// end ;
27614: PPOPN 3
27616: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27617: LD_EXP 63
27621: PUSH
27622: LD_EXP 88
27626: AND
27627: IFFALSE 27681
27629: GO 27631
27631: DISABLE
// begin ToLua ( displayTroll(); ) ;
27632: LD_STRING displayTroll();
27634: PPUSH
27635: CALL_OW 559
// wait ( 3 3$00 ) ;
27639: LD_INT 6300
27641: PPUSH
27642: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27646: LD_STRING hideTroll();
27648: PPUSH
27649: CALL_OW 559
// wait ( 1 1$00 ) ;
27653: LD_INT 2100
27655: PPUSH
27656: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27660: LD_STRING displayTroll();
27662: PPUSH
27663: CALL_OW 559
// wait ( 1 1$00 ) ;
27667: LD_INT 2100
27669: PPUSH
27670: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27674: LD_STRING hideTroll();
27676: PPUSH
27677: CALL_OW 559
// end ;
27681: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27682: LD_EXP 63
27686: PUSH
27687: LD_EXP 89
27691: AND
27692: IFFALSE 27755
27694: GO 27696
27696: DISABLE
27697: LD_INT 0
27699: PPUSH
// begin p := 0 ;
27700: LD_ADDR_VAR 0 1
27704: PUSH
27705: LD_INT 0
27707: ST_TO_ADDR
// repeat game_speed := 1 ;
27708: LD_ADDR_OWVAR 65
27712: PUSH
27713: LD_INT 1
27715: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27716: LD_INT 35
27718: PPUSH
27719: CALL_OW 67
// p := p + 1 ;
27723: LD_ADDR_VAR 0 1
27727: PUSH
27728: LD_VAR 0 1
27732: PUSH
27733: LD_INT 1
27735: PLUS
27736: ST_TO_ADDR
// until p >= 60 ;
27737: LD_VAR 0 1
27741: PUSH
27742: LD_INT 60
27744: GREATEREQUAL
27745: IFFALSE 27708
// game_speed := 4 ;
27747: LD_ADDR_OWVAR 65
27751: PUSH
27752: LD_INT 4
27754: ST_TO_ADDR
// end ;
27755: PPOPN 1
27757: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27758: LD_EXP 63
27762: PUSH
27763: LD_EXP 90
27767: AND
27768: IFFALSE 27914
27770: GO 27772
27772: DISABLE
27773: LD_INT 0
27775: PPUSH
27776: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27777: LD_ADDR_VAR 0 1
27781: PUSH
27782: LD_INT 22
27784: PUSH
27785: LD_OWVAR 2
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 2
27796: PUSH
27797: LD_INT 30
27799: PUSH
27800: LD_INT 0
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 30
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: LIST
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PPUSH
27826: CALL_OW 69
27830: ST_TO_ADDR
// if not depot then
27831: LD_VAR 0 1
27835: NOT
27836: IFFALSE 27840
// exit ;
27838: GO 27914
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27840: LD_ADDR_VAR 0 2
27844: PUSH
27845: LD_VAR 0 1
27849: PUSH
27850: LD_INT 1
27852: PPUSH
27853: LD_VAR 0 1
27857: PPUSH
27858: CALL_OW 12
27862: ARRAY
27863: PPUSH
27864: CALL_OW 274
27868: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27869: LD_VAR 0 2
27873: PPUSH
27874: LD_INT 1
27876: PPUSH
27877: LD_INT 0
27879: PPUSH
27880: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27884: LD_VAR 0 2
27888: PPUSH
27889: LD_INT 2
27891: PPUSH
27892: LD_INT 0
27894: PPUSH
27895: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27899: LD_VAR 0 2
27903: PPUSH
27904: LD_INT 3
27906: PPUSH
27907: LD_INT 0
27909: PPUSH
27910: CALL_OW 277
// end ;
27914: PPOPN 2
27916: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27917: LD_EXP 63
27921: PUSH
27922: LD_EXP 91
27926: AND
27927: IFFALSE 28024
27929: GO 27931
27931: DISABLE
27932: LD_INT 0
27934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27935: LD_ADDR_VAR 0 1
27939: PUSH
27940: LD_INT 22
27942: PUSH
27943: LD_OWVAR 2
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 21
27954: PUSH
27955: LD_INT 1
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 3
27964: PUSH
27965: LD_INT 23
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: LIST
27983: PPUSH
27984: CALL_OW 69
27988: ST_TO_ADDR
// if not tmp then
27989: LD_VAR 0 1
27993: NOT
27994: IFFALSE 27998
// exit ;
27996: GO 28024
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27998: LD_VAR 0 1
28002: PUSH
28003: LD_INT 1
28005: PPUSH
28006: LD_VAR 0 1
28010: PPUSH
28011: CALL_OW 12
28015: ARRAY
28016: PPUSH
28017: LD_INT 200
28019: PPUSH
28020: CALL_OW 234
// end ;
28024: PPOPN 1
28026: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28027: LD_EXP 63
28031: PUSH
28032: LD_EXP 92
28036: AND
28037: IFFALSE 28116
28039: GO 28041
28041: DISABLE
28042: LD_INT 0
28044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28045: LD_ADDR_VAR 0 1
28049: PUSH
28050: LD_INT 22
28052: PUSH
28053: LD_OWVAR 2
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 21
28064: PUSH
28065: LD_INT 2
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PPUSH
28076: CALL_OW 69
28080: ST_TO_ADDR
// if not tmp then
28081: LD_VAR 0 1
28085: NOT
28086: IFFALSE 28090
// exit ;
28088: GO 28116
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28090: LD_VAR 0 1
28094: PUSH
28095: LD_INT 1
28097: PPUSH
28098: LD_VAR 0 1
28102: PPUSH
28103: CALL_OW 12
28107: ARRAY
28108: PPUSH
28109: LD_INT 60
28111: PPUSH
28112: CALL_OW 234
// end ;
28116: PPOPN 1
28118: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28119: LD_EXP 63
28123: PUSH
28124: LD_EXP 93
28128: AND
28129: IFFALSE 28228
28131: GO 28133
28133: DISABLE
28134: LD_INT 0
28136: PPUSH
28137: PPUSH
// begin enable ;
28138: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28139: LD_ADDR_VAR 0 1
28143: PUSH
28144: LD_INT 22
28146: PUSH
28147: LD_OWVAR 2
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 61
28158: PUSH
28159: EMPTY
28160: LIST
28161: PUSH
28162: LD_INT 33
28164: PUSH
28165: LD_INT 2
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: LIST
28176: PPUSH
28177: CALL_OW 69
28181: ST_TO_ADDR
// if not tmp then
28182: LD_VAR 0 1
28186: NOT
28187: IFFALSE 28191
// exit ;
28189: GO 28228
// for i in tmp do
28191: LD_ADDR_VAR 0 2
28195: PUSH
28196: LD_VAR 0 1
28200: PUSH
28201: FOR_IN
28202: IFFALSE 28226
// if IsControledBy ( i ) then
28204: LD_VAR 0 2
28208: PPUSH
28209: CALL_OW 312
28213: IFFALSE 28224
// ComUnlink ( i ) ;
28215: LD_VAR 0 2
28219: PPUSH
28220: CALL_OW 136
28224: GO 28201
28226: POP
28227: POP
// end ;
28228: PPOPN 2
28230: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28231: LD_EXP 63
28235: PUSH
28236: LD_EXP 94
28240: AND
28241: IFFALSE 28381
28243: GO 28245
28245: DISABLE
28246: LD_INT 0
28248: PPUSH
28249: PPUSH
// begin ToLua ( displayPowell(); ) ;
28250: LD_STRING displayPowell();
28252: PPUSH
28253: CALL_OW 559
// uc_side := 0 ;
28257: LD_ADDR_OWVAR 20
28261: PUSH
28262: LD_INT 0
28264: ST_TO_ADDR
// uc_nation := 2 ;
28265: LD_ADDR_OWVAR 21
28269: PUSH
28270: LD_INT 2
28272: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28273: LD_ADDR_OWVAR 37
28277: PUSH
28278: LD_INT 14
28280: ST_TO_ADDR
// vc_engine := engine_siberite ;
28281: LD_ADDR_OWVAR 39
28285: PUSH
28286: LD_INT 3
28288: ST_TO_ADDR
// vc_control := control_apeman ;
28289: LD_ADDR_OWVAR 38
28293: PUSH
28294: LD_INT 5
28296: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28297: LD_ADDR_OWVAR 40
28301: PUSH
28302: LD_INT 29
28304: ST_TO_ADDR
// un := CreateVehicle ;
28305: LD_ADDR_VAR 0 2
28309: PUSH
28310: CALL_OW 45
28314: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28315: LD_VAR 0 2
28319: PPUSH
28320: LD_INT 1
28322: PPUSH
28323: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28327: LD_INT 35
28329: PPUSH
28330: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28334: LD_VAR 0 2
28338: PPUSH
28339: LD_INT 22
28341: PUSH
28342: LD_OWVAR 2
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PPUSH
28351: CALL_OW 69
28355: PPUSH
28356: LD_VAR 0 2
28360: PPUSH
28361: CALL_OW 74
28365: PPUSH
28366: CALL_OW 115
// until IsDead ( un ) ;
28370: LD_VAR 0 2
28374: PPUSH
28375: CALL_OW 301
28379: IFFALSE 28327
// end ;
28381: PPOPN 2
28383: END
// every 0 0$1 trigger StreamModeActive and sStu do
28384: LD_EXP 63
28388: PUSH
28389: LD_EXP 102
28393: AND
28394: IFFALSE 28410
28396: GO 28398
28398: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28399: LD_STRING displayStucuk();
28401: PPUSH
28402: CALL_OW 559
// ResetFog ;
28406: CALL_OW 335
// end ;
28410: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28411: LD_EXP 63
28415: PUSH
28416: LD_EXP 95
28420: AND
28421: IFFALSE 28562
28423: GO 28425
28425: DISABLE
28426: LD_INT 0
28428: PPUSH
28429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28430: LD_ADDR_VAR 0 2
28434: PUSH
28435: LD_INT 22
28437: PUSH
28438: LD_OWVAR 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 21
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL_OW 69
28465: ST_TO_ADDR
// if not tmp then
28466: LD_VAR 0 2
28470: NOT
28471: IFFALSE 28475
// exit ;
28473: GO 28562
// un := tmp [ rand ( 1 , tmp ) ] ;
28475: LD_ADDR_VAR 0 1
28479: PUSH
28480: LD_VAR 0 2
28484: PUSH
28485: LD_INT 1
28487: PPUSH
28488: LD_VAR 0 2
28492: PPUSH
28493: CALL_OW 12
28497: ARRAY
28498: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28499: LD_VAR 0 1
28503: PPUSH
28504: LD_INT 0
28506: PPUSH
28507: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28511: LD_VAR 0 1
28515: PPUSH
28516: LD_OWVAR 3
28520: PUSH
28521: LD_VAR 0 1
28525: DIFF
28526: PPUSH
28527: LD_VAR 0 1
28531: PPUSH
28532: CALL_OW 74
28536: PPUSH
28537: CALL_OW 115
// wait ( 0 0$20 ) ;
28541: LD_INT 700
28543: PPUSH
28544: CALL_OW 67
// SetSide ( un , your_side ) ;
28548: LD_VAR 0 1
28552: PPUSH
28553: LD_OWVAR 2
28557: PPUSH
28558: CALL_OW 235
// end ;
28562: PPOPN 2
28564: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28565: LD_EXP 63
28569: PUSH
28570: LD_EXP 96
28574: AND
28575: IFFALSE 28681
28577: GO 28579
28579: DISABLE
28580: LD_INT 0
28582: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28583: LD_ADDR_VAR 0 1
28587: PUSH
28588: LD_INT 22
28590: PUSH
28591: LD_OWVAR 2
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 2
28602: PUSH
28603: LD_INT 30
28605: PUSH
28606: LD_INT 0
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 30
28615: PUSH
28616: LD_INT 1
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: LIST
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PPUSH
28632: CALL_OW 69
28636: ST_TO_ADDR
// if not depot then
28637: LD_VAR 0 1
28641: NOT
28642: IFFALSE 28646
// exit ;
28644: GO 28681
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28646: LD_VAR 0 1
28650: PUSH
28651: LD_INT 1
28653: ARRAY
28654: PPUSH
28655: CALL_OW 250
28659: PPUSH
28660: LD_VAR 0 1
28664: PUSH
28665: LD_INT 1
28667: ARRAY
28668: PPUSH
28669: CALL_OW 251
28673: PPUSH
28674: LD_INT 70
28676: PPUSH
28677: CALL_OW 495
// end ;
28681: PPOPN 1
28683: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28684: LD_EXP 63
28688: PUSH
28689: LD_EXP 97
28693: AND
28694: IFFALSE 28905
28696: GO 28698
28698: DISABLE
28699: LD_INT 0
28701: PPUSH
28702: PPUSH
28703: PPUSH
28704: PPUSH
28705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28706: LD_ADDR_VAR 0 5
28710: PUSH
28711: LD_INT 22
28713: PUSH
28714: LD_OWVAR 2
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 21
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PPUSH
28737: CALL_OW 69
28741: ST_TO_ADDR
// if not tmp then
28742: LD_VAR 0 5
28746: NOT
28747: IFFALSE 28751
// exit ;
28749: GO 28905
// for i in tmp do
28751: LD_ADDR_VAR 0 1
28755: PUSH
28756: LD_VAR 0 5
28760: PUSH
28761: FOR_IN
28762: IFFALSE 28903
// begin d := rand ( 0 , 5 ) ;
28764: LD_ADDR_VAR 0 4
28768: PUSH
28769: LD_INT 0
28771: PPUSH
28772: LD_INT 5
28774: PPUSH
28775: CALL_OW 12
28779: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28780: LD_ADDR_VAR 0 2
28784: PUSH
28785: LD_VAR 0 1
28789: PPUSH
28790: CALL_OW 250
28794: PPUSH
28795: LD_VAR 0 4
28799: PPUSH
28800: LD_INT 3
28802: PPUSH
28803: LD_INT 12
28805: PPUSH
28806: CALL_OW 12
28810: PPUSH
28811: CALL_OW 272
28815: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28816: LD_ADDR_VAR 0 3
28820: PUSH
28821: LD_VAR 0 1
28825: PPUSH
28826: CALL_OW 251
28830: PPUSH
28831: LD_VAR 0 4
28835: PPUSH
28836: LD_INT 3
28838: PPUSH
28839: LD_INT 12
28841: PPUSH
28842: CALL_OW 12
28846: PPUSH
28847: CALL_OW 273
28851: ST_TO_ADDR
// if ValidHex ( x , y ) then
28852: LD_VAR 0 2
28856: PPUSH
28857: LD_VAR 0 3
28861: PPUSH
28862: CALL_OW 488
28866: IFFALSE 28901
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28868: LD_VAR 0 1
28872: PPUSH
28873: LD_VAR 0 2
28877: PPUSH
28878: LD_VAR 0 3
28882: PPUSH
28883: LD_INT 3
28885: PPUSH
28886: LD_INT 6
28888: PPUSH
28889: CALL_OW 12
28893: PPUSH
28894: LD_INT 1
28896: PPUSH
28897: CALL_OW 483
// end ;
28901: GO 28761
28903: POP
28904: POP
// end ;
28905: PPOPN 5
28907: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28908: LD_EXP 63
28912: PUSH
28913: LD_EXP 98
28917: AND
28918: IFFALSE 29012
28920: GO 28922
28922: DISABLE
28923: LD_INT 0
28925: PPUSH
28926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28927: LD_ADDR_VAR 0 2
28931: PUSH
28932: LD_INT 22
28934: PUSH
28935: LD_OWVAR 2
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 32
28946: PUSH
28947: LD_INT 1
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 21
28956: PUSH
28957: LD_INT 2
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: LIST
28968: PPUSH
28969: CALL_OW 69
28973: ST_TO_ADDR
// if not tmp then
28974: LD_VAR 0 2
28978: NOT
28979: IFFALSE 28983
// exit ;
28981: GO 29012
// for i in tmp do
28983: LD_ADDR_VAR 0 1
28987: PUSH
28988: LD_VAR 0 2
28992: PUSH
28993: FOR_IN
28994: IFFALSE 29010
// SetFuel ( i , 0 ) ;
28996: LD_VAR 0 1
29000: PPUSH
29001: LD_INT 0
29003: PPUSH
29004: CALL_OW 240
29008: GO 28993
29010: POP
29011: POP
// end ;
29012: PPOPN 2
29014: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29015: LD_EXP 63
29019: PUSH
29020: LD_EXP 99
29024: AND
29025: IFFALSE 29091
29027: GO 29029
29029: DISABLE
29030: LD_INT 0
29032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29033: LD_ADDR_VAR 0 1
29037: PUSH
29038: LD_INT 22
29040: PUSH
29041: LD_OWVAR 2
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 30
29052: PUSH
29053: LD_INT 29
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PPUSH
29064: CALL_OW 69
29068: ST_TO_ADDR
// if not tmp then
29069: LD_VAR 0 1
29073: NOT
29074: IFFALSE 29078
// exit ;
29076: GO 29091
// DestroyUnit ( tmp [ 1 ] ) ;
29078: LD_VAR 0 1
29082: PUSH
29083: LD_INT 1
29085: ARRAY
29086: PPUSH
29087: CALL_OW 65
// end ;
29091: PPOPN 1
29093: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29094: LD_EXP 63
29098: PUSH
29099: LD_EXP 101
29103: AND
29104: IFFALSE 29233
29106: GO 29108
29108: DISABLE
29109: LD_INT 0
29111: PPUSH
// begin uc_side := 0 ;
29112: LD_ADDR_OWVAR 20
29116: PUSH
29117: LD_INT 0
29119: ST_TO_ADDR
// uc_nation := nation_arabian ;
29120: LD_ADDR_OWVAR 21
29124: PUSH
29125: LD_INT 2
29127: ST_TO_ADDR
// hc_gallery :=  ;
29128: LD_ADDR_OWVAR 33
29132: PUSH
29133: LD_STRING 
29135: ST_TO_ADDR
// hc_name :=  ;
29136: LD_ADDR_OWVAR 26
29140: PUSH
29141: LD_STRING 
29143: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29144: LD_INT 1
29146: PPUSH
29147: LD_INT 11
29149: PPUSH
29150: LD_INT 10
29152: PPUSH
29153: CALL_OW 380
// un := CreateHuman ;
29157: LD_ADDR_VAR 0 1
29161: PUSH
29162: CALL_OW 44
29166: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29167: LD_VAR 0 1
29171: PPUSH
29172: LD_INT 1
29174: PPUSH
29175: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29179: LD_INT 35
29181: PPUSH
29182: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29186: LD_VAR 0 1
29190: PPUSH
29191: LD_INT 22
29193: PUSH
29194: LD_OWVAR 2
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PPUSH
29203: CALL_OW 69
29207: PPUSH
29208: LD_VAR 0 1
29212: PPUSH
29213: CALL_OW 74
29217: PPUSH
29218: CALL_OW 115
// until IsDead ( un ) ;
29222: LD_VAR 0 1
29226: PPUSH
29227: CALL_OW 301
29231: IFFALSE 29179
// end ;
29233: PPOPN 1
29235: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29236: LD_EXP 63
29240: PUSH
29241: LD_EXP 103
29245: AND
29246: IFFALSE 29258
29248: GO 29250
29250: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29251: LD_STRING earthquake(getX(game), 0, 32)
29253: PPUSH
29254: CALL_OW 559
29258: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29259: LD_EXP 63
29263: PUSH
29264: LD_EXP 104
29268: AND
29269: IFFALSE 29360
29271: GO 29273
29273: DISABLE
29274: LD_INT 0
29276: PPUSH
// begin enable ;
29277: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29278: LD_ADDR_VAR 0 1
29282: PUSH
29283: LD_INT 22
29285: PUSH
29286: LD_OWVAR 2
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 21
29297: PUSH
29298: LD_INT 2
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 33
29307: PUSH
29308: LD_INT 3
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: LIST
29319: PPUSH
29320: CALL_OW 69
29324: ST_TO_ADDR
// if not tmp then
29325: LD_VAR 0 1
29329: NOT
29330: IFFALSE 29334
// exit ;
29332: GO 29360
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29334: LD_VAR 0 1
29338: PUSH
29339: LD_INT 1
29341: PPUSH
29342: LD_VAR 0 1
29346: PPUSH
29347: CALL_OW 12
29351: ARRAY
29352: PPUSH
29353: LD_INT 1
29355: PPUSH
29356: CALL_OW 234
// end ;
29360: PPOPN 1
29362: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29363: LD_EXP 63
29367: PUSH
29368: LD_EXP 105
29372: AND
29373: IFFALSE 29514
29375: GO 29377
29377: DISABLE
29378: LD_INT 0
29380: PPUSH
29381: PPUSH
29382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29383: LD_ADDR_VAR 0 3
29387: PUSH
29388: LD_INT 22
29390: PUSH
29391: LD_OWVAR 2
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 25
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PPUSH
29414: CALL_OW 69
29418: ST_TO_ADDR
// if not tmp then
29419: LD_VAR 0 3
29423: NOT
29424: IFFALSE 29428
// exit ;
29426: GO 29514
// un := tmp [ rand ( 1 , tmp ) ] ;
29428: LD_ADDR_VAR 0 2
29432: PUSH
29433: LD_VAR 0 3
29437: PUSH
29438: LD_INT 1
29440: PPUSH
29441: LD_VAR 0 3
29445: PPUSH
29446: CALL_OW 12
29450: ARRAY
29451: ST_TO_ADDR
// if Crawls ( un ) then
29452: LD_VAR 0 2
29456: PPUSH
29457: CALL_OW 318
29461: IFFALSE 29472
// ComWalk ( un ) ;
29463: LD_VAR 0 2
29467: PPUSH
29468: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29472: LD_VAR 0 2
29476: PPUSH
29477: LD_INT 9
29479: PPUSH
29480: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29484: LD_INT 28
29486: PPUSH
29487: LD_OWVAR 2
29491: PPUSH
29492: LD_INT 2
29494: PPUSH
29495: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29499: LD_INT 29
29501: PPUSH
29502: LD_OWVAR 2
29506: PPUSH
29507: LD_INT 2
29509: PPUSH
29510: CALL_OW 322
// end ;
29514: PPOPN 3
29516: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29517: LD_EXP 63
29521: PUSH
29522: LD_EXP 106
29526: AND
29527: IFFALSE 29638
29529: GO 29531
29531: DISABLE
29532: LD_INT 0
29534: PPUSH
29535: PPUSH
29536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29537: LD_ADDR_VAR 0 3
29541: PUSH
29542: LD_INT 22
29544: PUSH
29545: LD_OWVAR 2
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 25
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PPUSH
29568: CALL_OW 69
29572: ST_TO_ADDR
// if not tmp then
29573: LD_VAR 0 3
29577: NOT
29578: IFFALSE 29582
// exit ;
29580: GO 29638
// un := tmp [ rand ( 1 , tmp ) ] ;
29582: LD_ADDR_VAR 0 2
29586: PUSH
29587: LD_VAR 0 3
29591: PUSH
29592: LD_INT 1
29594: PPUSH
29595: LD_VAR 0 3
29599: PPUSH
29600: CALL_OW 12
29604: ARRAY
29605: ST_TO_ADDR
// if Crawls ( un ) then
29606: LD_VAR 0 2
29610: PPUSH
29611: CALL_OW 318
29615: IFFALSE 29626
// ComWalk ( un ) ;
29617: LD_VAR 0 2
29621: PPUSH
29622: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29626: LD_VAR 0 2
29630: PPUSH
29631: LD_INT 8
29633: PPUSH
29634: CALL_OW 336
// end ;
29638: PPOPN 3
29640: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29641: LD_EXP 63
29645: PUSH
29646: LD_EXP 107
29650: AND
29651: IFFALSE 29795
29653: GO 29655
29655: DISABLE
29656: LD_INT 0
29658: PPUSH
29659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29660: LD_ADDR_VAR 0 2
29664: PUSH
29665: LD_INT 22
29667: PUSH
29668: LD_OWVAR 2
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 21
29679: PUSH
29680: LD_INT 2
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 2
29689: PUSH
29690: LD_INT 34
29692: PUSH
29693: LD_INT 12
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 34
29702: PUSH
29703: LD_INT 51
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 34
29712: PUSH
29713: LD_INT 32
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: LIST
29730: PPUSH
29731: CALL_OW 69
29735: ST_TO_ADDR
// if not tmp then
29736: LD_VAR 0 2
29740: NOT
29741: IFFALSE 29745
// exit ;
29743: GO 29795
// for i in tmp do
29745: LD_ADDR_VAR 0 1
29749: PUSH
29750: LD_VAR 0 2
29754: PUSH
29755: FOR_IN
29756: IFFALSE 29793
// if GetCargo ( i , mat_artifact ) = 0 then
29758: LD_VAR 0 1
29762: PPUSH
29763: LD_INT 4
29765: PPUSH
29766: CALL_OW 289
29770: PUSH
29771: LD_INT 0
29773: EQUAL
29774: IFFALSE 29791
// SetCargo ( i , mat_siberit , 100 ) ;
29776: LD_VAR 0 1
29780: PPUSH
29781: LD_INT 3
29783: PPUSH
29784: LD_INT 100
29786: PPUSH
29787: CALL_OW 290
29791: GO 29755
29793: POP
29794: POP
// end ;
29795: PPOPN 2
29797: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29798: LD_EXP 63
29802: PUSH
29803: LD_EXP 108
29807: AND
29808: IFFALSE 29991
29810: GO 29812
29812: DISABLE
29813: LD_INT 0
29815: PPUSH
29816: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29817: LD_ADDR_VAR 0 2
29821: PUSH
29822: LD_INT 22
29824: PUSH
29825: LD_OWVAR 2
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PPUSH
29834: CALL_OW 69
29838: ST_TO_ADDR
// if not tmp then
29839: LD_VAR 0 2
29843: NOT
29844: IFFALSE 29848
// exit ;
29846: GO 29991
// for i := 1 to 2 do
29848: LD_ADDR_VAR 0 1
29852: PUSH
29853: DOUBLE
29854: LD_INT 1
29856: DEC
29857: ST_TO_ADDR
29858: LD_INT 2
29860: PUSH
29861: FOR_TO
29862: IFFALSE 29989
// begin uc_side := your_side ;
29864: LD_ADDR_OWVAR 20
29868: PUSH
29869: LD_OWVAR 2
29873: ST_TO_ADDR
// uc_nation := nation_american ;
29874: LD_ADDR_OWVAR 21
29878: PUSH
29879: LD_INT 1
29881: ST_TO_ADDR
// vc_chassis := us_morphling ;
29882: LD_ADDR_OWVAR 37
29886: PUSH
29887: LD_INT 5
29889: ST_TO_ADDR
// vc_engine := engine_siberite ;
29890: LD_ADDR_OWVAR 39
29894: PUSH
29895: LD_INT 3
29897: ST_TO_ADDR
// vc_control := control_computer ;
29898: LD_ADDR_OWVAR 38
29902: PUSH
29903: LD_INT 3
29905: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29906: LD_ADDR_OWVAR 40
29910: PUSH
29911: LD_INT 10
29913: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29914: LD_VAR 0 2
29918: PUSH
29919: LD_INT 1
29921: ARRAY
29922: PPUSH
29923: CALL_OW 310
29927: NOT
29928: IFFALSE 29975
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29930: CALL_OW 45
29934: PPUSH
29935: LD_VAR 0 2
29939: PUSH
29940: LD_INT 1
29942: ARRAY
29943: PPUSH
29944: CALL_OW 250
29948: PPUSH
29949: LD_VAR 0 2
29953: PUSH
29954: LD_INT 1
29956: ARRAY
29957: PPUSH
29958: CALL_OW 251
29962: PPUSH
29963: LD_INT 12
29965: PPUSH
29966: LD_INT 1
29968: PPUSH
29969: CALL_OW 50
29973: GO 29987
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29975: CALL_OW 45
29979: PPUSH
29980: LD_INT 1
29982: PPUSH
29983: CALL_OW 51
// end ;
29987: GO 29861
29989: POP
29990: POP
// end ;
29991: PPOPN 2
29993: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29994: LD_EXP 63
29998: PUSH
29999: LD_EXP 109
30003: AND
30004: IFFALSE 30226
30006: GO 30008
30008: DISABLE
30009: LD_INT 0
30011: PPUSH
30012: PPUSH
30013: PPUSH
30014: PPUSH
30015: PPUSH
30016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30017: LD_ADDR_VAR 0 6
30021: PUSH
30022: LD_INT 22
30024: PUSH
30025: LD_OWVAR 2
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 21
30036: PUSH
30037: LD_INT 1
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 3
30046: PUSH
30047: LD_INT 23
30049: PUSH
30050: LD_INT 0
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: LIST
30065: PPUSH
30066: CALL_OW 69
30070: ST_TO_ADDR
// if not tmp then
30071: LD_VAR 0 6
30075: NOT
30076: IFFALSE 30080
// exit ;
30078: GO 30226
// s1 := rand ( 1 , 4 ) ;
30080: LD_ADDR_VAR 0 2
30084: PUSH
30085: LD_INT 1
30087: PPUSH
30088: LD_INT 4
30090: PPUSH
30091: CALL_OW 12
30095: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30096: LD_ADDR_VAR 0 4
30100: PUSH
30101: LD_VAR 0 6
30105: PUSH
30106: LD_INT 1
30108: ARRAY
30109: PPUSH
30110: LD_VAR 0 2
30114: PPUSH
30115: CALL_OW 259
30119: ST_TO_ADDR
// if s1 = 1 then
30120: LD_VAR 0 2
30124: PUSH
30125: LD_INT 1
30127: EQUAL
30128: IFFALSE 30148
// s2 := rand ( 2 , 4 ) else
30130: LD_ADDR_VAR 0 3
30134: PUSH
30135: LD_INT 2
30137: PPUSH
30138: LD_INT 4
30140: PPUSH
30141: CALL_OW 12
30145: ST_TO_ADDR
30146: GO 30156
// s2 := 1 ;
30148: LD_ADDR_VAR 0 3
30152: PUSH
30153: LD_INT 1
30155: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30156: LD_ADDR_VAR 0 5
30160: PUSH
30161: LD_VAR 0 6
30165: PUSH
30166: LD_INT 1
30168: ARRAY
30169: PPUSH
30170: LD_VAR 0 3
30174: PPUSH
30175: CALL_OW 259
30179: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30180: LD_VAR 0 6
30184: PUSH
30185: LD_INT 1
30187: ARRAY
30188: PPUSH
30189: LD_VAR 0 2
30193: PPUSH
30194: LD_VAR 0 5
30198: PPUSH
30199: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30203: LD_VAR 0 6
30207: PUSH
30208: LD_INT 1
30210: ARRAY
30211: PPUSH
30212: LD_VAR 0 3
30216: PPUSH
30217: LD_VAR 0 4
30221: PPUSH
30222: CALL_OW 237
// end ;
30226: PPOPN 6
30228: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30229: LD_EXP 63
30233: PUSH
30234: LD_EXP 110
30238: AND
30239: IFFALSE 30318
30241: GO 30243
30243: DISABLE
30244: LD_INT 0
30246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30247: LD_ADDR_VAR 0 1
30251: PUSH
30252: LD_INT 22
30254: PUSH
30255: LD_OWVAR 2
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 30
30266: PUSH
30267: LD_INT 3
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PPUSH
30278: CALL_OW 69
30282: ST_TO_ADDR
// if not tmp then
30283: LD_VAR 0 1
30287: NOT
30288: IFFALSE 30292
// exit ;
30290: GO 30318
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30292: LD_VAR 0 1
30296: PUSH
30297: LD_INT 1
30299: PPUSH
30300: LD_VAR 0 1
30304: PPUSH
30305: CALL_OW 12
30309: ARRAY
30310: PPUSH
30311: LD_INT 1
30313: PPUSH
30314: CALL_OW 234
// end ;
30318: PPOPN 1
30320: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30321: LD_EXP 63
30325: PUSH
30326: LD_EXP 111
30330: AND
30331: IFFALSE 30443
30333: GO 30335
30335: DISABLE
30336: LD_INT 0
30338: PPUSH
30339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30340: LD_ADDR_VAR 0 2
30344: PUSH
30345: LD_INT 22
30347: PUSH
30348: LD_OWVAR 2
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 2
30359: PUSH
30360: LD_INT 30
30362: PUSH
30363: LD_INT 27
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 30
30372: PUSH
30373: LD_INT 26
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 30
30382: PUSH
30383: LD_INT 28
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PPUSH
30400: CALL_OW 69
30404: ST_TO_ADDR
// if not tmp then
30405: LD_VAR 0 2
30409: NOT
30410: IFFALSE 30414
// exit ;
30412: GO 30443
// for i in tmp do
30414: LD_ADDR_VAR 0 1
30418: PUSH
30419: LD_VAR 0 2
30423: PUSH
30424: FOR_IN
30425: IFFALSE 30441
// SetLives ( i , 1 ) ;
30427: LD_VAR 0 1
30431: PPUSH
30432: LD_INT 1
30434: PPUSH
30435: CALL_OW 234
30439: GO 30424
30441: POP
30442: POP
// end ;
30443: PPOPN 2
30445: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30446: LD_EXP 63
30450: PUSH
30451: LD_EXP 112
30455: AND
30456: IFFALSE 30743
30458: GO 30460
30460: DISABLE
30461: LD_INT 0
30463: PPUSH
30464: PPUSH
30465: PPUSH
// begin i := rand ( 1 , 7 ) ;
30466: LD_ADDR_VAR 0 1
30470: PUSH
30471: LD_INT 1
30473: PPUSH
30474: LD_INT 7
30476: PPUSH
30477: CALL_OW 12
30481: ST_TO_ADDR
// case i of 1 :
30482: LD_VAR 0 1
30486: PUSH
30487: LD_INT 1
30489: DOUBLE
30490: EQUAL
30491: IFTRUE 30495
30493: GO 30505
30495: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30496: LD_STRING earthquake(getX(game), 0, 32)
30498: PPUSH
30499: CALL_OW 559
30503: GO 30743
30505: LD_INT 2
30507: DOUBLE
30508: EQUAL
30509: IFTRUE 30513
30511: GO 30527
30513: POP
// begin ToLua ( displayStucuk(); ) ;
30514: LD_STRING displayStucuk();
30516: PPUSH
30517: CALL_OW 559
// ResetFog ;
30521: CALL_OW 335
// end ; 3 :
30525: GO 30743
30527: LD_INT 3
30529: DOUBLE
30530: EQUAL
30531: IFTRUE 30535
30533: GO 30639
30535: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30536: LD_ADDR_VAR 0 2
30540: PUSH
30541: LD_INT 22
30543: PUSH
30544: LD_OWVAR 2
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 25
30555: PUSH
30556: LD_INT 1
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PPUSH
30567: CALL_OW 69
30571: ST_TO_ADDR
// if not tmp then
30572: LD_VAR 0 2
30576: NOT
30577: IFFALSE 30581
// exit ;
30579: GO 30743
// un := tmp [ rand ( 1 , tmp ) ] ;
30581: LD_ADDR_VAR 0 3
30585: PUSH
30586: LD_VAR 0 2
30590: PUSH
30591: LD_INT 1
30593: PPUSH
30594: LD_VAR 0 2
30598: PPUSH
30599: CALL_OW 12
30603: ARRAY
30604: ST_TO_ADDR
// if Crawls ( un ) then
30605: LD_VAR 0 3
30609: PPUSH
30610: CALL_OW 318
30614: IFFALSE 30625
// ComWalk ( un ) ;
30616: LD_VAR 0 3
30620: PPUSH
30621: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30625: LD_VAR 0 3
30629: PPUSH
30630: LD_INT 8
30632: PPUSH
30633: CALL_OW 336
// end ; 4 :
30637: GO 30743
30639: LD_INT 4
30641: DOUBLE
30642: EQUAL
30643: IFTRUE 30647
30645: GO 30721
30647: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30648: LD_ADDR_VAR 0 2
30652: PUSH
30653: LD_INT 22
30655: PUSH
30656: LD_OWVAR 2
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 30
30667: PUSH
30668: LD_INT 29
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PPUSH
30679: CALL_OW 69
30683: ST_TO_ADDR
// if not tmp then
30684: LD_VAR 0 2
30688: NOT
30689: IFFALSE 30693
// exit ;
30691: GO 30743
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30693: LD_VAR 0 2
30697: PUSH
30698: LD_INT 1
30700: ARRAY
30701: PPUSH
30702: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30706: LD_VAR 0 2
30710: PUSH
30711: LD_INT 1
30713: ARRAY
30714: PPUSH
30715: CALL_OW 65
// end ; 5 .. 7 :
30719: GO 30743
30721: LD_INT 5
30723: DOUBLE
30724: GREATEREQUAL
30725: IFFALSE 30733
30727: LD_INT 7
30729: DOUBLE
30730: LESSEQUAL
30731: IFTRUE 30735
30733: GO 30742
30735: POP
// StreamSibBomb ; end ;
30736: CALL 26980 0 0
30740: GO 30743
30742: POP
// end ;
30743: PPOPN 3
30745: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30746: LD_EXP 63
30750: PUSH
30751: LD_EXP 113
30755: AND
30756: IFFALSE 30912
30758: GO 30760
30760: DISABLE
30761: LD_INT 0
30763: PPUSH
30764: PPUSH
30765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30766: LD_ADDR_VAR 0 2
30770: PUSH
30771: LD_INT 81
30773: PUSH
30774: LD_OWVAR 2
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 2
30785: PUSH
30786: LD_INT 21
30788: PUSH
30789: LD_INT 1
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 21
30798: PUSH
30799: LD_INT 2
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: LIST
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PPUSH
30815: CALL_OW 69
30819: ST_TO_ADDR
// if not tmp then
30820: LD_VAR 0 2
30824: NOT
30825: IFFALSE 30829
// exit ;
30827: GO 30912
// p := 0 ;
30829: LD_ADDR_VAR 0 3
30833: PUSH
30834: LD_INT 0
30836: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30837: LD_INT 35
30839: PPUSH
30840: CALL_OW 67
// p := p + 1 ;
30844: LD_ADDR_VAR 0 3
30848: PUSH
30849: LD_VAR 0 3
30853: PUSH
30854: LD_INT 1
30856: PLUS
30857: ST_TO_ADDR
// for i in tmp do
30858: LD_ADDR_VAR 0 1
30862: PUSH
30863: LD_VAR 0 2
30867: PUSH
30868: FOR_IN
30869: IFFALSE 30900
// if GetLives ( i ) < 1000 then
30871: LD_VAR 0 1
30875: PPUSH
30876: CALL_OW 256
30880: PUSH
30881: LD_INT 1000
30883: LESS
30884: IFFALSE 30898
// SetLives ( i , 1000 ) ;
30886: LD_VAR 0 1
30890: PPUSH
30891: LD_INT 1000
30893: PPUSH
30894: CALL_OW 234
30898: GO 30868
30900: POP
30901: POP
// until p > 20 ;
30902: LD_VAR 0 3
30906: PUSH
30907: LD_INT 20
30909: GREATER
30910: IFFALSE 30837
// end ;
30912: PPOPN 3
30914: END
// every 0 0$1 trigger StreamModeActive and sTime do
30915: LD_EXP 63
30919: PUSH
30920: LD_EXP 114
30924: AND
30925: IFFALSE 30960
30927: GO 30929
30929: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30930: LD_INT 28
30932: PPUSH
30933: LD_OWVAR 2
30937: PPUSH
30938: LD_INT 2
30940: PPUSH
30941: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30945: LD_INT 30
30947: PPUSH
30948: LD_OWVAR 2
30952: PPUSH
30953: LD_INT 2
30955: PPUSH
30956: CALL_OW 322
// end ;
30960: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30961: LD_EXP 63
30965: PUSH
30966: LD_EXP 115
30970: AND
30971: IFFALSE 31092
30973: GO 30975
30975: DISABLE
30976: LD_INT 0
30978: PPUSH
30979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30980: LD_ADDR_VAR 0 2
30984: PUSH
30985: LD_INT 22
30987: PUSH
30988: LD_OWVAR 2
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 21
30999: PUSH
31000: LD_INT 1
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 3
31009: PUSH
31010: LD_INT 23
31012: PUSH
31013: LD_INT 0
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: LIST
31028: PPUSH
31029: CALL_OW 69
31033: ST_TO_ADDR
// if not tmp then
31034: LD_VAR 0 2
31038: NOT
31039: IFFALSE 31043
// exit ;
31041: GO 31092
// for i in tmp do
31043: LD_ADDR_VAR 0 1
31047: PUSH
31048: LD_VAR 0 2
31052: PUSH
31053: FOR_IN
31054: IFFALSE 31090
// begin if Crawls ( i ) then
31056: LD_VAR 0 1
31060: PPUSH
31061: CALL_OW 318
31065: IFFALSE 31076
// ComWalk ( i ) ;
31067: LD_VAR 0 1
31071: PPUSH
31072: CALL_OW 138
// SetClass ( i , 2 ) ;
31076: LD_VAR 0 1
31080: PPUSH
31081: LD_INT 2
31083: PPUSH
31084: CALL_OW 336
// end ;
31088: GO 31053
31090: POP
31091: POP
// end ;
31092: PPOPN 2
31094: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31095: LD_EXP 63
31099: PUSH
31100: LD_EXP 116
31104: AND
31105: IFFALSE 31393
31107: GO 31109
31109: DISABLE
31110: LD_INT 0
31112: PPUSH
31113: PPUSH
31114: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31115: LD_OWVAR 2
31119: PPUSH
31120: LD_INT 9
31122: PPUSH
31123: LD_INT 1
31125: PPUSH
31126: LD_INT 1
31128: PPUSH
31129: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31133: LD_INT 9
31135: PPUSH
31136: LD_OWVAR 2
31140: PPUSH
31141: CALL_OW 343
// uc_side := 9 ;
31145: LD_ADDR_OWVAR 20
31149: PUSH
31150: LD_INT 9
31152: ST_TO_ADDR
// uc_nation := 2 ;
31153: LD_ADDR_OWVAR 21
31157: PUSH
31158: LD_INT 2
31160: ST_TO_ADDR
// hc_name := Dark Warrior ;
31161: LD_ADDR_OWVAR 26
31165: PUSH
31166: LD_STRING Dark Warrior
31168: ST_TO_ADDR
// hc_gallery :=  ;
31169: LD_ADDR_OWVAR 33
31173: PUSH
31174: LD_STRING 
31176: ST_TO_ADDR
// hc_noskilllimit := true ;
31177: LD_ADDR_OWVAR 76
31181: PUSH
31182: LD_INT 1
31184: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31185: LD_ADDR_OWVAR 31
31189: PUSH
31190: LD_INT 30
31192: PUSH
31193: LD_INT 30
31195: PUSH
31196: LD_INT 30
31198: PUSH
31199: LD_INT 30
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: ST_TO_ADDR
// un := CreateHuman ;
31208: LD_ADDR_VAR 0 3
31212: PUSH
31213: CALL_OW 44
31217: ST_TO_ADDR
// hc_noskilllimit := false ;
31218: LD_ADDR_OWVAR 76
31222: PUSH
31223: LD_INT 0
31225: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31226: LD_VAR 0 3
31230: PPUSH
31231: LD_INT 1
31233: PPUSH
31234: CALL_OW 51
// ToLua ( playRanger() ) ;
31238: LD_STRING playRanger()
31240: PPUSH
31241: CALL_OW 559
// p := 0 ;
31245: LD_ADDR_VAR 0 2
31249: PUSH
31250: LD_INT 0
31252: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31253: LD_INT 35
31255: PPUSH
31256: CALL_OW 67
// p := p + 1 ;
31260: LD_ADDR_VAR 0 2
31264: PUSH
31265: LD_VAR 0 2
31269: PUSH
31270: LD_INT 1
31272: PLUS
31273: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31274: LD_VAR 0 3
31278: PPUSH
31279: CALL_OW 256
31283: PUSH
31284: LD_INT 1000
31286: LESS
31287: IFFALSE 31301
// SetLives ( un , 1000 ) ;
31289: LD_VAR 0 3
31293: PPUSH
31294: LD_INT 1000
31296: PPUSH
31297: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31301: LD_VAR 0 3
31305: PPUSH
31306: LD_INT 81
31308: PUSH
31309: LD_OWVAR 2
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 91
31320: PUSH
31321: LD_VAR 0 3
31325: PUSH
31326: LD_INT 30
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: LIST
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PPUSH
31338: CALL_OW 69
31342: PPUSH
31343: LD_VAR 0 3
31347: PPUSH
31348: CALL_OW 74
31352: PPUSH
31353: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31357: LD_VAR 0 2
31361: PUSH
31362: LD_INT 80
31364: GREATER
31365: PUSH
31366: LD_VAR 0 3
31370: PPUSH
31371: CALL_OW 301
31375: OR
31376: IFFALSE 31253
// if un then
31378: LD_VAR 0 3
31382: IFFALSE 31393
// RemoveUnit ( un ) ;
31384: LD_VAR 0 3
31388: PPUSH
31389: CALL_OW 64
// end ;
31393: PPOPN 3
31395: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31396: LD_EXP 117
31400: IFFALSE 31516
31402: GO 31404
31404: DISABLE
31405: LD_INT 0
31407: PPUSH
31408: PPUSH
31409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31410: LD_ADDR_VAR 0 2
31414: PUSH
31415: LD_INT 81
31417: PUSH
31418: LD_OWVAR 2
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 21
31429: PUSH
31430: LD_INT 1
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PPUSH
31441: CALL_OW 69
31445: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31446: LD_STRING playComputer()
31448: PPUSH
31449: CALL_OW 559
// if not tmp then
31453: LD_VAR 0 2
31457: NOT
31458: IFFALSE 31462
// exit ;
31460: GO 31516
// for i in tmp do
31462: LD_ADDR_VAR 0 1
31466: PUSH
31467: LD_VAR 0 2
31471: PUSH
31472: FOR_IN
31473: IFFALSE 31514
// for j := 1 to 4 do
31475: LD_ADDR_VAR 0 3
31479: PUSH
31480: DOUBLE
31481: LD_INT 1
31483: DEC
31484: ST_TO_ADDR
31485: LD_INT 4
31487: PUSH
31488: FOR_TO
31489: IFFALSE 31510
// SetSkill ( i , j , 10 ) ;
31491: LD_VAR 0 1
31495: PPUSH
31496: LD_VAR 0 3
31500: PPUSH
31501: LD_INT 10
31503: PPUSH
31504: CALL_OW 237
31508: GO 31488
31510: POP
31511: POP
31512: GO 31472
31514: POP
31515: POP
// end ;
31516: PPOPN 3
31518: END
// every 0 0$1 trigger s30 do var i , tmp ;
31519: LD_EXP 118
31523: IFFALSE 31592
31525: GO 31527
31527: DISABLE
31528: LD_INT 0
31530: PPUSH
31531: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31532: LD_ADDR_VAR 0 2
31536: PUSH
31537: LD_INT 22
31539: PUSH
31540: LD_OWVAR 2
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PPUSH
31549: CALL_OW 69
31553: ST_TO_ADDR
// if not tmp then
31554: LD_VAR 0 2
31558: NOT
31559: IFFALSE 31563
// exit ;
31561: GO 31592
// for i in tmp do
31563: LD_ADDR_VAR 0 1
31567: PUSH
31568: LD_VAR 0 2
31572: PUSH
31573: FOR_IN
31574: IFFALSE 31590
// SetLives ( i , 300 ) ;
31576: LD_VAR 0 1
31580: PPUSH
31581: LD_INT 300
31583: PPUSH
31584: CALL_OW 234
31588: GO 31573
31590: POP
31591: POP
// end ;
31592: PPOPN 2
31594: END
// every 0 0$1 trigger s60 do var i , tmp ;
31595: LD_EXP 119
31599: IFFALSE 31668
31601: GO 31603
31603: DISABLE
31604: LD_INT 0
31606: PPUSH
31607: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31608: LD_ADDR_VAR 0 2
31612: PUSH
31613: LD_INT 22
31615: PUSH
31616: LD_OWVAR 2
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PPUSH
31625: CALL_OW 69
31629: ST_TO_ADDR
// if not tmp then
31630: LD_VAR 0 2
31634: NOT
31635: IFFALSE 31639
// exit ;
31637: GO 31668
// for i in tmp do
31639: LD_ADDR_VAR 0 1
31643: PUSH
31644: LD_VAR 0 2
31648: PUSH
31649: FOR_IN
31650: IFFALSE 31666
// SetLives ( i , 600 ) ;
31652: LD_VAR 0 1
31656: PPUSH
31657: LD_INT 600
31659: PPUSH
31660: CALL_OW 234
31664: GO 31649
31666: POP
31667: POP
// end ;
31668: PPOPN 2
31670: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31671: LD_INT 0
31673: PPUSH
// case cmd of 301 :
31674: LD_VAR 0 1
31678: PUSH
31679: LD_INT 301
31681: DOUBLE
31682: EQUAL
31683: IFTRUE 31687
31685: GO 31719
31687: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31688: LD_VAR 0 6
31692: PPUSH
31693: LD_VAR 0 7
31697: PPUSH
31698: LD_VAR 0 8
31702: PPUSH
31703: LD_VAR 0 4
31707: PPUSH
31708: LD_VAR 0 5
31712: PPUSH
31713: CALL 32920 0 5
31717: GO 31840
31719: LD_INT 302
31721: DOUBLE
31722: EQUAL
31723: IFTRUE 31727
31725: GO 31764
31727: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31728: LD_VAR 0 6
31732: PPUSH
31733: LD_VAR 0 7
31737: PPUSH
31738: LD_VAR 0 8
31742: PPUSH
31743: LD_VAR 0 9
31747: PPUSH
31748: LD_VAR 0 4
31752: PPUSH
31753: LD_VAR 0 5
31757: PPUSH
31758: CALL 33011 0 6
31762: GO 31840
31764: LD_INT 303
31766: DOUBLE
31767: EQUAL
31768: IFTRUE 31772
31770: GO 31809
31772: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31773: LD_VAR 0 6
31777: PPUSH
31778: LD_VAR 0 7
31782: PPUSH
31783: LD_VAR 0 8
31787: PPUSH
31788: LD_VAR 0 9
31792: PPUSH
31793: LD_VAR 0 4
31797: PPUSH
31798: LD_VAR 0 5
31802: PPUSH
31803: CALL 31845 0 6
31807: GO 31840
31809: LD_INT 304
31811: DOUBLE
31812: EQUAL
31813: IFTRUE 31817
31815: GO 31839
31817: POP
// hHackTeleport ( unit , x , y ) ; end ;
31818: LD_VAR 0 2
31822: PPUSH
31823: LD_VAR 0 4
31827: PPUSH
31828: LD_VAR 0 5
31832: PPUSH
31833: CALL 33604 0 3
31837: GO 31840
31839: POP
// end ;
31840: LD_VAR 0 12
31844: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31845: LD_INT 0
31847: PPUSH
31848: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31849: LD_VAR 0 1
31853: PUSH
31854: LD_INT 1
31856: LESS
31857: PUSH
31858: LD_VAR 0 1
31862: PUSH
31863: LD_INT 3
31865: GREATER
31866: OR
31867: PUSH
31868: LD_VAR 0 5
31872: PPUSH
31873: LD_VAR 0 6
31877: PPUSH
31878: CALL_OW 428
31882: OR
31883: IFFALSE 31887
// exit ;
31885: GO 32607
// uc_side := your_side ;
31887: LD_ADDR_OWVAR 20
31891: PUSH
31892: LD_OWVAR 2
31896: ST_TO_ADDR
// uc_nation := nation ;
31897: LD_ADDR_OWVAR 21
31901: PUSH
31902: LD_VAR 0 1
31906: ST_TO_ADDR
// bc_level = 1 ;
31907: LD_ADDR_OWVAR 43
31911: PUSH
31912: LD_INT 1
31914: ST_TO_ADDR
// case btype of 1 :
31915: LD_VAR 0 2
31919: PUSH
31920: LD_INT 1
31922: DOUBLE
31923: EQUAL
31924: IFTRUE 31928
31926: GO 31939
31928: POP
// bc_type := b_depot ; 2 :
31929: LD_ADDR_OWVAR 42
31933: PUSH
31934: LD_INT 0
31936: ST_TO_ADDR
31937: GO 32551
31939: LD_INT 2
31941: DOUBLE
31942: EQUAL
31943: IFTRUE 31947
31945: GO 31958
31947: POP
// bc_type := b_warehouse ; 3 :
31948: LD_ADDR_OWVAR 42
31952: PUSH
31953: LD_INT 1
31955: ST_TO_ADDR
31956: GO 32551
31958: LD_INT 3
31960: DOUBLE
31961: EQUAL
31962: IFTRUE 31966
31964: GO 31977
31966: POP
// bc_type := b_lab ; 4 .. 9 :
31967: LD_ADDR_OWVAR 42
31971: PUSH
31972: LD_INT 6
31974: ST_TO_ADDR
31975: GO 32551
31977: LD_INT 4
31979: DOUBLE
31980: GREATEREQUAL
31981: IFFALSE 31989
31983: LD_INT 9
31985: DOUBLE
31986: LESSEQUAL
31987: IFTRUE 31991
31989: GO 32043
31991: POP
// begin bc_type := b_lab_half ;
31992: LD_ADDR_OWVAR 42
31996: PUSH
31997: LD_INT 7
31999: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32000: LD_ADDR_OWVAR 44
32004: PUSH
32005: LD_INT 10
32007: PUSH
32008: LD_INT 11
32010: PUSH
32011: LD_INT 12
32013: PUSH
32014: LD_INT 15
32016: PUSH
32017: LD_INT 14
32019: PUSH
32020: LD_INT 13
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: PUSH
32031: LD_VAR 0 2
32035: PUSH
32036: LD_INT 3
32038: MINUS
32039: ARRAY
32040: ST_TO_ADDR
// end ; 10 .. 13 :
32041: GO 32551
32043: LD_INT 10
32045: DOUBLE
32046: GREATEREQUAL
32047: IFFALSE 32055
32049: LD_INT 13
32051: DOUBLE
32052: LESSEQUAL
32053: IFTRUE 32057
32055: GO 32134
32057: POP
// begin bc_type := b_lab_full ;
32058: LD_ADDR_OWVAR 42
32062: PUSH
32063: LD_INT 8
32065: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32066: LD_ADDR_OWVAR 44
32070: PUSH
32071: LD_INT 10
32073: PUSH
32074: LD_INT 12
32076: PUSH
32077: LD_INT 14
32079: PUSH
32080: LD_INT 13
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: PUSH
32089: LD_VAR 0 2
32093: PUSH
32094: LD_INT 9
32096: MINUS
32097: ARRAY
32098: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32099: LD_ADDR_OWVAR 45
32103: PUSH
32104: LD_INT 11
32106: PUSH
32107: LD_INT 15
32109: PUSH
32110: LD_INT 12
32112: PUSH
32113: LD_INT 15
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: PUSH
32122: LD_VAR 0 2
32126: PUSH
32127: LD_INT 9
32129: MINUS
32130: ARRAY
32131: ST_TO_ADDR
// end ; 14 :
32132: GO 32551
32134: LD_INT 14
32136: DOUBLE
32137: EQUAL
32138: IFTRUE 32142
32140: GO 32153
32142: POP
// bc_type := b_workshop ; 15 :
32143: LD_ADDR_OWVAR 42
32147: PUSH
32148: LD_INT 2
32150: ST_TO_ADDR
32151: GO 32551
32153: LD_INT 15
32155: DOUBLE
32156: EQUAL
32157: IFTRUE 32161
32159: GO 32172
32161: POP
// bc_type := b_factory ; 16 :
32162: LD_ADDR_OWVAR 42
32166: PUSH
32167: LD_INT 3
32169: ST_TO_ADDR
32170: GO 32551
32172: LD_INT 16
32174: DOUBLE
32175: EQUAL
32176: IFTRUE 32180
32178: GO 32191
32180: POP
// bc_type := b_ext_gun ; 17 :
32181: LD_ADDR_OWVAR 42
32185: PUSH
32186: LD_INT 17
32188: ST_TO_ADDR
32189: GO 32551
32191: LD_INT 17
32193: DOUBLE
32194: EQUAL
32195: IFTRUE 32199
32197: GO 32227
32199: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32200: LD_ADDR_OWVAR 42
32204: PUSH
32205: LD_INT 19
32207: PUSH
32208: LD_INT 23
32210: PUSH
32211: LD_INT 19
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: LIST
32218: PUSH
32219: LD_VAR 0 1
32223: ARRAY
32224: ST_TO_ADDR
32225: GO 32551
32227: LD_INT 18
32229: DOUBLE
32230: EQUAL
32231: IFTRUE 32235
32233: GO 32246
32235: POP
// bc_type := b_ext_radar ; 19 :
32236: LD_ADDR_OWVAR 42
32240: PUSH
32241: LD_INT 20
32243: ST_TO_ADDR
32244: GO 32551
32246: LD_INT 19
32248: DOUBLE
32249: EQUAL
32250: IFTRUE 32254
32252: GO 32265
32254: POP
// bc_type := b_ext_radio ; 20 :
32255: LD_ADDR_OWVAR 42
32259: PUSH
32260: LD_INT 22
32262: ST_TO_ADDR
32263: GO 32551
32265: LD_INT 20
32267: DOUBLE
32268: EQUAL
32269: IFTRUE 32273
32271: GO 32284
32273: POP
// bc_type := b_ext_siberium ; 21 :
32274: LD_ADDR_OWVAR 42
32278: PUSH
32279: LD_INT 21
32281: ST_TO_ADDR
32282: GO 32551
32284: LD_INT 21
32286: DOUBLE
32287: EQUAL
32288: IFTRUE 32292
32290: GO 32303
32292: POP
// bc_type := b_ext_computer ; 22 :
32293: LD_ADDR_OWVAR 42
32297: PUSH
32298: LD_INT 24
32300: ST_TO_ADDR
32301: GO 32551
32303: LD_INT 22
32305: DOUBLE
32306: EQUAL
32307: IFTRUE 32311
32309: GO 32322
32311: POP
// bc_type := b_ext_track ; 23 :
32312: LD_ADDR_OWVAR 42
32316: PUSH
32317: LD_INT 16
32319: ST_TO_ADDR
32320: GO 32551
32322: LD_INT 23
32324: DOUBLE
32325: EQUAL
32326: IFTRUE 32330
32328: GO 32341
32330: POP
// bc_type := b_ext_laser ; 24 :
32331: LD_ADDR_OWVAR 42
32335: PUSH
32336: LD_INT 25
32338: ST_TO_ADDR
32339: GO 32551
32341: LD_INT 24
32343: DOUBLE
32344: EQUAL
32345: IFTRUE 32349
32347: GO 32360
32349: POP
// bc_type := b_control_tower ; 25 :
32350: LD_ADDR_OWVAR 42
32354: PUSH
32355: LD_INT 36
32357: ST_TO_ADDR
32358: GO 32551
32360: LD_INT 25
32362: DOUBLE
32363: EQUAL
32364: IFTRUE 32368
32366: GO 32379
32368: POP
// bc_type := b_breastwork ; 26 :
32369: LD_ADDR_OWVAR 42
32373: PUSH
32374: LD_INT 31
32376: ST_TO_ADDR
32377: GO 32551
32379: LD_INT 26
32381: DOUBLE
32382: EQUAL
32383: IFTRUE 32387
32385: GO 32398
32387: POP
// bc_type := b_bunker ; 27 :
32388: LD_ADDR_OWVAR 42
32392: PUSH
32393: LD_INT 32
32395: ST_TO_ADDR
32396: GO 32551
32398: LD_INT 27
32400: DOUBLE
32401: EQUAL
32402: IFTRUE 32406
32404: GO 32417
32406: POP
// bc_type := b_turret ; 28 :
32407: LD_ADDR_OWVAR 42
32411: PUSH
32412: LD_INT 33
32414: ST_TO_ADDR
32415: GO 32551
32417: LD_INT 28
32419: DOUBLE
32420: EQUAL
32421: IFTRUE 32425
32423: GO 32436
32425: POP
// bc_type := b_armoury ; 29 :
32426: LD_ADDR_OWVAR 42
32430: PUSH
32431: LD_INT 4
32433: ST_TO_ADDR
32434: GO 32551
32436: LD_INT 29
32438: DOUBLE
32439: EQUAL
32440: IFTRUE 32444
32442: GO 32455
32444: POP
// bc_type := b_barracks ; 30 :
32445: LD_ADDR_OWVAR 42
32449: PUSH
32450: LD_INT 5
32452: ST_TO_ADDR
32453: GO 32551
32455: LD_INT 30
32457: DOUBLE
32458: EQUAL
32459: IFTRUE 32463
32461: GO 32474
32463: POP
// bc_type := b_solar_power ; 31 :
32464: LD_ADDR_OWVAR 42
32468: PUSH
32469: LD_INT 27
32471: ST_TO_ADDR
32472: GO 32551
32474: LD_INT 31
32476: DOUBLE
32477: EQUAL
32478: IFTRUE 32482
32480: GO 32493
32482: POP
// bc_type := b_oil_power ; 32 :
32483: LD_ADDR_OWVAR 42
32487: PUSH
32488: LD_INT 26
32490: ST_TO_ADDR
32491: GO 32551
32493: LD_INT 32
32495: DOUBLE
32496: EQUAL
32497: IFTRUE 32501
32499: GO 32512
32501: POP
// bc_type := b_siberite_power ; 33 :
32502: LD_ADDR_OWVAR 42
32506: PUSH
32507: LD_INT 28
32509: ST_TO_ADDR
32510: GO 32551
32512: LD_INT 33
32514: DOUBLE
32515: EQUAL
32516: IFTRUE 32520
32518: GO 32531
32520: POP
// bc_type := b_oil_mine ; 34 :
32521: LD_ADDR_OWVAR 42
32525: PUSH
32526: LD_INT 29
32528: ST_TO_ADDR
32529: GO 32551
32531: LD_INT 34
32533: DOUBLE
32534: EQUAL
32535: IFTRUE 32539
32537: GO 32550
32539: POP
// bc_type := b_siberite_mine ; end ;
32540: LD_ADDR_OWVAR 42
32544: PUSH
32545: LD_INT 30
32547: ST_TO_ADDR
32548: GO 32551
32550: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32551: LD_ADDR_VAR 0 8
32555: PUSH
32556: LD_VAR 0 5
32560: PPUSH
32561: LD_VAR 0 6
32565: PPUSH
32566: LD_VAR 0 3
32570: PPUSH
32571: CALL_OW 47
32575: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32576: LD_OWVAR 42
32580: PUSH
32581: LD_INT 32
32583: PUSH
32584: LD_INT 33
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: IN
32591: IFFALSE 32607
// PlaceWeaponTurret ( b , weapon ) ;
32593: LD_VAR 0 8
32597: PPUSH
32598: LD_VAR 0 4
32602: PPUSH
32603: CALL_OW 431
// end ;
32607: LD_VAR 0 7
32611: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32612: LD_INT 0
32614: PPUSH
32615: PPUSH
32616: PPUSH
32617: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32618: LD_ADDR_VAR 0 4
32622: PUSH
32623: LD_INT 22
32625: PUSH
32626: LD_OWVAR 2
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 2
32637: PUSH
32638: LD_INT 30
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 30
32650: PUSH
32651: LD_INT 1
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PPUSH
32667: CALL_OW 69
32671: ST_TO_ADDR
// if not tmp then
32672: LD_VAR 0 4
32676: NOT
32677: IFFALSE 32681
// exit ;
32679: GO 32740
// for i in tmp do
32681: LD_ADDR_VAR 0 2
32685: PUSH
32686: LD_VAR 0 4
32690: PUSH
32691: FOR_IN
32692: IFFALSE 32738
// for j = 1 to 3 do
32694: LD_ADDR_VAR 0 3
32698: PUSH
32699: DOUBLE
32700: LD_INT 1
32702: DEC
32703: ST_TO_ADDR
32704: LD_INT 3
32706: PUSH
32707: FOR_TO
32708: IFFALSE 32734
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32710: LD_VAR 0 2
32714: PPUSH
32715: CALL_OW 274
32719: PPUSH
32720: LD_VAR 0 3
32724: PPUSH
32725: LD_INT 99999
32727: PPUSH
32728: CALL_OW 277
32732: GO 32707
32734: POP
32735: POP
32736: GO 32691
32738: POP
32739: POP
// end ;
32740: LD_VAR 0 1
32744: RET
// export function hHackSetLevel10 ; var i , j ; begin
32745: LD_INT 0
32747: PPUSH
32748: PPUSH
32749: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32750: LD_ADDR_VAR 0 2
32754: PUSH
32755: LD_INT 21
32757: PUSH
32758: LD_INT 1
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PPUSH
32765: CALL_OW 69
32769: PUSH
32770: FOR_IN
32771: IFFALSE 32823
// if IsSelected ( i ) then
32773: LD_VAR 0 2
32777: PPUSH
32778: CALL_OW 306
32782: IFFALSE 32821
// begin for j := 1 to 4 do
32784: LD_ADDR_VAR 0 3
32788: PUSH
32789: DOUBLE
32790: LD_INT 1
32792: DEC
32793: ST_TO_ADDR
32794: LD_INT 4
32796: PUSH
32797: FOR_TO
32798: IFFALSE 32819
// SetSkill ( i , j , 10 ) ;
32800: LD_VAR 0 2
32804: PPUSH
32805: LD_VAR 0 3
32809: PPUSH
32810: LD_INT 10
32812: PPUSH
32813: CALL_OW 237
32817: GO 32797
32819: POP
32820: POP
// end ;
32821: GO 32770
32823: POP
32824: POP
// end ;
32825: LD_VAR 0 1
32829: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32830: LD_INT 0
32832: PPUSH
32833: PPUSH
32834: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32835: LD_ADDR_VAR 0 2
32839: PUSH
32840: LD_INT 22
32842: PUSH
32843: LD_OWVAR 2
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 21
32854: PUSH
32855: LD_INT 1
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PPUSH
32866: CALL_OW 69
32870: PUSH
32871: FOR_IN
32872: IFFALSE 32913
// begin for j := 1 to 4 do
32874: LD_ADDR_VAR 0 3
32878: PUSH
32879: DOUBLE
32880: LD_INT 1
32882: DEC
32883: ST_TO_ADDR
32884: LD_INT 4
32886: PUSH
32887: FOR_TO
32888: IFFALSE 32909
// SetSkill ( i , j , 10 ) ;
32890: LD_VAR 0 2
32894: PPUSH
32895: LD_VAR 0 3
32899: PPUSH
32900: LD_INT 10
32902: PPUSH
32903: CALL_OW 237
32907: GO 32887
32909: POP
32910: POP
// end ;
32911: GO 32871
32913: POP
32914: POP
// end ;
32915: LD_VAR 0 1
32919: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32920: LD_INT 0
32922: PPUSH
// uc_side := your_side ;
32923: LD_ADDR_OWVAR 20
32927: PUSH
32928: LD_OWVAR 2
32932: ST_TO_ADDR
// uc_nation := nation ;
32933: LD_ADDR_OWVAR 21
32937: PUSH
32938: LD_VAR 0 1
32942: ST_TO_ADDR
// InitHc ;
32943: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32947: LD_INT 0
32949: PPUSH
32950: LD_VAR 0 2
32954: PPUSH
32955: LD_VAR 0 3
32959: PPUSH
32960: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32964: LD_VAR 0 4
32968: PPUSH
32969: LD_VAR 0 5
32973: PPUSH
32974: CALL_OW 428
32978: PUSH
32979: LD_INT 0
32981: EQUAL
32982: IFFALSE 33006
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32984: CALL_OW 44
32988: PPUSH
32989: LD_VAR 0 4
32993: PPUSH
32994: LD_VAR 0 5
32998: PPUSH
32999: LD_INT 1
33001: PPUSH
33002: CALL_OW 48
// end ;
33006: LD_VAR 0 6
33010: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33011: LD_INT 0
33013: PPUSH
33014: PPUSH
// uc_side := your_side ;
33015: LD_ADDR_OWVAR 20
33019: PUSH
33020: LD_OWVAR 2
33024: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33025: LD_VAR 0 1
33029: PUSH
33030: LD_INT 1
33032: PUSH
33033: LD_INT 2
33035: PUSH
33036: LD_INT 3
33038: PUSH
33039: LD_INT 4
33041: PUSH
33042: LD_INT 5
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: IN
33052: IFFALSE 33064
// uc_nation := nation_american else
33054: LD_ADDR_OWVAR 21
33058: PUSH
33059: LD_INT 1
33061: ST_TO_ADDR
33062: GO 33107
// if chassis in [ 11 , 12 , 13 , 14 ] then
33064: LD_VAR 0 1
33068: PUSH
33069: LD_INT 11
33071: PUSH
33072: LD_INT 12
33074: PUSH
33075: LD_INT 13
33077: PUSH
33078: LD_INT 14
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: IN
33087: IFFALSE 33099
// uc_nation := nation_arabian else
33089: LD_ADDR_OWVAR 21
33093: PUSH
33094: LD_INT 2
33096: ST_TO_ADDR
33097: GO 33107
// uc_nation := nation_russian ;
33099: LD_ADDR_OWVAR 21
33103: PUSH
33104: LD_INT 3
33106: ST_TO_ADDR
// vc_chassis := chassis ;
33107: LD_ADDR_OWVAR 37
33111: PUSH
33112: LD_VAR 0 1
33116: ST_TO_ADDR
// vc_engine := engine ;
33117: LD_ADDR_OWVAR 39
33121: PUSH
33122: LD_VAR 0 2
33126: ST_TO_ADDR
// vc_control := control ;
33127: LD_ADDR_OWVAR 38
33131: PUSH
33132: LD_VAR 0 3
33136: ST_TO_ADDR
// vc_weapon := weapon ;
33137: LD_ADDR_OWVAR 40
33141: PUSH
33142: LD_VAR 0 4
33146: ST_TO_ADDR
// un := CreateVehicle ;
33147: LD_ADDR_VAR 0 8
33151: PUSH
33152: CALL_OW 45
33156: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33157: LD_VAR 0 8
33161: PPUSH
33162: LD_INT 0
33164: PPUSH
33165: LD_INT 5
33167: PPUSH
33168: CALL_OW 12
33172: PPUSH
33173: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33177: LD_VAR 0 8
33181: PPUSH
33182: LD_VAR 0 5
33186: PPUSH
33187: LD_VAR 0 6
33191: PPUSH
33192: LD_INT 1
33194: PPUSH
33195: CALL_OW 48
// end ;
33199: LD_VAR 0 7
33203: RET
// export hInvincible ; every 1 do
33204: GO 33206
33206: DISABLE
// hInvincible := [ ] ;
33207: LD_ADDR_EXP 120
33211: PUSH
33212: EMPTY
33213: ST_TO_ADDR
33214: END
// every 10 do var i ;
33215: GO 33217
33217: DISABLE
33218: LD_INT 0
33220: PPUSH
// begin enable ;
33221: ENABLE
// if not hInvincible then
33222: LD_EXP 120
33226: NOT
33227: IFFALSE 33231
// exit ;
33229: GO 33275
// for i in hInvincible do
33231: LD_ADDR_VAR 0 1
33235: PUSH
33236: LD_EXP 120
33240: PUSH
33241: FOR_IN
33242: IFFALSE 33273
// if GetLives ( i ) < 1000 then
33244: LD_VAR 0 1
33248: PPUSH
33249: CALL_OW 256
33253: PUSH
33254: LD_INT 1000
33256: LESS
33257: IFFALSE 33271
// SetLives ( i , 1000 ) ;
33259: LD_VAR 0 1
33263: PPUSH
33264: LD_INT 1000
33266: PPUSH
33267: CALL_OW 234
33271: GO 33241
33273: POP
33274: POP
// end ;
33275: PPOPN 1
33277: END
// export function hHackInvincible ; var i ; begin
33278: LD_INT 0
33280: PPUSH
33281: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33282: LD_ADDR_VAR 0 2
33286: PUSH
33287: LD_INT 2
33289: PUSH
33290: LD_INT 21
33292: PUSH
33293: LD_INT 1
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 21
33302: PUSH
33303: LD_INT 2
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: LIST
33314: PPUSH
33315: CALL_OW 69
33319: PUSH
33320: FOR_IN
33321: IFFALSE 33382
// if IsSelected ( i ) then
33323: LD_VAR 0 2
33327: PPUSH
33328: CALL_OW 306
33332: IFFALSE 33380
// begin if i in hInvincible then
33334: LD_VAR 0 2
33338: PUSH
33339: LD_EXP 120
33343: IN
33344: IFFALSE 33364
// hInvincible := hInvincible diff i else
33346: LD_ADDR_EXP 120
33350: PUSH
33351: LD_EXP 120
33355: PUSH
33356: LD_VAR 0 2
33360: DIFF
33361: ST_TO_ADDR
33362: GO 33380
// hInvincible := hInvincible union i ;
33364: LD_ADDR_EXP 120
33368: PUSH
33369: LD_EXP 120
33373: PUSH
33374: LD_VAR 0 2
33378: UNION
33379: ST_TO_ADDR
// end ;
33380: GO 33320
33382: POP
33383: POP
// end ;
33384: LD_VAR 0 1
33388: RET
// export function hHackInvisible ; var i , j ; begin
33389: LD_INT 0
33391: PPUSH
33392: PPUSH
33393: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33394: LD_ADDR_VAR 0 2
33398: PUSH
33399: LD_INT 21
33401: PUSH
33402: LD_INT 1
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PPUSH
33409: CALL_OW 69
33413: PUSH
33414: FOR_IN
33415: IFFALSE 33439
// if IsSelected ( i ) then
33417: LD_VAR 0 2
33421: PPUSH
33422: CALL_OW 306
33426: IFFALSE 33437
// ComForceInvisible ( i ) ;
33428: LD_VAR 0 2
33432: PPUSH
33433: CALL_OW 496
33437: GO 33414
33439: POP
33440: POP
// end ;
33441: LD_VAR 0 1
33445: RET
// export function hHackChangeYourSide ; begin
33446: LD_INT 0
33448: PPUSH
// if your_side = 8 then
33449: LD_OWVAR 2
33453: PUSH
33454: LD_INT 8
33456: EQUAL
33457: IFFALSE 33469
// your_side := 0 else
33459: LD_ADDR_OWVAR 2
33463: PUSH
33464: LD_INT 0
33466: ST_TO_ADDR
33467: GO 33483
// your_side := your_side + 1 ;
33469: LD_ADDR_OWVAR 2
33473: PUSH
33474: LD_OWVAR 2
33478: PUSH
33479: LD_INT 1
33481: PLUS
33482: ST_TO_ADDR
// end ;
33483: LD_VAR 0 1
33487: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33488: LD_INT 0
33490: PPUSH
33491: PPUSH
33492: PPUSH
// for i in all_units do
33493: LD_ADDR_VAR 0 2
33497: PUSH
33498: LD_OWVAR 3
33502: PUSH
33503: FOR_IN
33504: IFFALSE 33582
// if IsSelected ( i ) then
33506: LD_VAR 0 2
33510: PPUSH
33511: CALL_OW 306
33515: IFFALSE 33580
// begin j := GetSide ( i ) ;
33517: LD_ADDR_VAR 0 3
33521: PUSH
33522: LD_VAR 0 2
33526: PPUSH
33527: CALL_OW 255
33531: ST_TO_ADDR
// if j = 8 then
33532: LD_VAR 0 3
33536: PUSH
33537: LD_INT 8
33539: EQUAL
33540: IFFALSE 33552
// j := 0 else
33542: LD_ADDR_VAR 0 3
33546: PUSH
33547: LD_INT 0
33549: ST_TO_ADDR
33550: GO 33566
// j := j + 1 ;
33552: LD_ADDR_VAR 0 3
33556: PUSH
33557: LD_VAR 0 3
33561: PUSH
33562: LD_INT 1
33564: PLUS
33565: ST_TO_ADDR
// SetSide ( i , j ) ;
33566: LD_VAR 0 2
33570: PPUSH
33571: LD_VAR 0 3
33575: PPUSH
33576: CALL_OW 235
// end ;
33580: GO 33503
33582: POP
33583: POP
// end ;
33584: LD_VAR 0 1
33588: RET
// export function hHackFog ; begin
33589: LD_INT 0
33591: PPUSH
// FogOff ( true ) ;
33592: LD_INT 1
33594: PPUSH
33595: CALL_OW 344
// end ;
33599: LD_VAR 0 1
33603: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33604: LD_INT 0
33606: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33607: LD_VAR 0 1
33611: PPUSH
33612: LD_VAR 0 2
33616: PPUSH
33617: LD_VAR 0 3
33621: PPUSH
33622: LD_INT 1
33624: PPUSH
33625: LD_INT 1
33627: PPUSH
33628: CALL_OW 483
// CenterOnXY ( x , y ) ;
33632: LD_VAR 0 2
33636: PPUSH
33637: LD_VAR 0 3
33641: PPUSH
33642: CALL_OW 84
// end ;
33646: LD_VAR 0 4
33650: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33651: LD_INT 0
33653: PPUSH
33654: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33655: LD_VAR 0 1
33659: NOT
33660: PUSH
33661: LD_VAR 0 2
33665: PPUSH
33666: LD_VAR 0 3
33670: PPUSH
33671: CALL_OW 488
33675: NOT
33676: OR
33677: PUSH
33678: LD_VAR 0 1
33682: PPUSH
33683: CALL_OW 266
33687: PUSH
33688: LD_INT 3
33690: NONEQUAL
33691: PUSH
33692: LD_VAR 0 1
33696: PPUSH
33697: CALL_OW 247
33701: PUSH
33702: LD_INT 1
33704: EQUAL
33705: NOT
33706: AND
33707: OR
33708: IFFALSE 33712
// exit ;
33710: GO 33861
// if GetType ( factory ) = unit_human then
33712: LD_VAR 0 1
33716: PPUSH
33717: CALL_OW 247
33721: PUSH
33722: LD_INT 1
33724: EQUAL
33725: IFFALSE 33742
// factory := IsInUnit ( factory ) ;
33727: LD_ADDR_VAR 0 1
33731: PUSH
33732: LD_VAR 0 1
33736: PPUSH
33737: CALL_OW 310
33741: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33742: LD_VAR 0 1
33746: PPUSH
33747: CALL_OW 266
33751: PUSH
33752: LD_INT 3
33754: NONEQUAL
33755: IFFALSE 33759
// exit ;
33757: GO 33861
// if HexInfo ( x , y ) = factory then
33759: LD_VAR 0 2
33763: PPUSH
33764: LD_VAR 0 3
33768: PPUSH
33769: CALL_OW 428
33773: PUSH
33774: LD_VAR 0 1
33778: EQUAL
33779: IFFALSE 33806
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33781: LD_ADDR_EXP 121
33785: PUSH
33786: LD_EXP 121
33790: PPUSH
33791: LD_VAR 0 1
33795: PPUSH
33796: LD_INT 0
33798: PPUSH
33799: CALL_OW 1
33803: ST_TO_ADDR
33804: GO 33857
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33806: LD_ADDR_EXP 121
33810: PUSH
33811: LD_EXP 121
33815: PPUSH
33816: LD_VAR 0 1
33820: PPUSH
33821: LD_VAR 0 1
33825: PPUSH
33826: CALL_OW 255
33830: PUSH
33831: LD_VAR 0 1
33835: PUSH
33836: LD_VAR 0 2
33840: PUSH
33841: LD_VAR 0 3
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: PPUSH
33852: CALL_OW 1
33856: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33857: CALL 33866 0 0
// end ;
33861: LD_VAR 0 4
33865: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33866: LD_INT 0
33868: PPUSH
33869: PPUSH
33870: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33871: LD_STRING resetFactoryWaypoint();
33873: PPUSH
33874: CALL_OW 559
// if factoryWaypoints then
33878: LD_EXP 121
33882: IFFALSE 34008
// begin list := PrepareArray ( factoryWaypoints ) ;
33884: LD_ADDR_VAR 0 3
33888: PUSH
33889: LD_EXP 121
33893: PPUSH
33894: CALL 80301 0 1
33898: ST_TO_ADDR
// for i := 1 to list do
33899: LD_ADDR_VAR 0 2
33903: PUSH
33904: DOUBLE
33905: LD_INT 1
33907: DEC
33908: ST_TO_ADDR
33909: LD_VAR 0 3
33913: PUSH
33914: FOR_TO
33915: IFFALSE 34006
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33917: LD_STRING setFactoryWaypointXY(
33919: PUSH
33920: LD_VAR 0 3
33924: PUSH
33925: LD_VAR 0 2
33929: ARRAY
33930: PUSH
33931: LD_INT 1
33933: ARRAY
33934: STR
33935: PUSH
33936: LD_STRING ,
33938: STR
33939: PUSH
33940: LD_VAR 0 3
33944: PUSH
33945: LD_VAR 0 2
33949: ARRAY
33950: PUSH
33951: LD_INT 2
33953: ARRAY
33954: STR
33955: PUSH
33956: LD_STRING ,
33958: STR
33959: PUSH
33960: LD_VAR 0 3
33964: PUSH
33965: LD_VAR 0 2
33969: ARRAY
33970: PUSH
33971: LD_INT 3
33973: ARRAY
33974: STR
33975: PUSH
33976: LD_STRING ,
33978: STR
33979: PUSH
33980: LD_VAR 0 3
33984: PUSH
33985: LD_VAR 0 2
33989: ARRAY
33990: PUSH
33991: LD_INT 4
33993: ARRAY
33994: STR
33995: PUSH
33996: LD_STRING )
33998: STR
33999: PPUSH
34000: CALL_OW 559
34004: GO 33914
34006: POP
34007: POP
// end ; end ;
34008: LD_VAR 0 1
34012: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34013: LD_INT 0
34015: PPUSH
// if HexInfo ( x , y ) = warehouse then
34016: LD_VAR 0 2
34020: PPUSH
34021: LD_VAR 0 3
34025: PPUSH
34026: CALL_OW 428
34030: PUSH
34031: LD_VAR 0 1
34035: EQUAL
34036: IFFALSE 34063
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34038: LD_ADDR_EXP 122
34042: PUSH
34043: LD_EXP 122
34047: PPUSH
34048: LD_VAR 0 1
34052: PPUSH
34053: LD_INT 0
34055: PPUSH
34056: CALL_OW 1
34060: ST_TO_ADDR
34061: GO 34114
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34063: LD_ADDR_EXP 122
34067: PUSH
34068: LD_EXP 122
34072: PPUSH
34073: LD_VAR 0 1
34077: PPUSH
34078: LD_VAR 0 1
34082: PPUSH
34083: CALL_OW 255
34087: PUSH
34088: LD_VAR 0 1
34092: PUSH
34093: LD_VAR 0 2
34097: PUSH
34098: LD_VAR 0 3
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: PPUSH
34109: CALL_OW 1
34113: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34114: CALL 34123 0 0
// end ;
34118: LD_VAR 0 4
34122: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34123: LD_INT 0
34125: PPUSH
34126: PPUSH
34127: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34128: LD_STRING resetWarehouseGatheringPoints();
34130: PPUSH
34131: CALL_OW 559
// if warehouseGatheringPoints then
34135: LD_EXP 122
34139: IFFALSE 34265
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34141: LD_ADDR_VAR 0 3
34145: PUSH
34146: LD_EXP 122
34150: PPUSH
34151: CALL 80301 0 1
34155: ST_TO_ADDR
// for i := 1 to list do
34156: LD_ADDR_VAR 0 2
34160: PUSH
34161: DOUBLE
34162: LD_INT 1
34164: DEC
34165: ST_TO_ADDR
34166: LD_VAR 0 3
34170: PUSH
34171: FOR_TO
34172: IFFALSE 34263
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34174: LD_STRING setWarehouseGatheringPointXY(
34176: PUSH
34177: LD_VAR 0 3
34181: PUSH
34182: LD_VAR 0 2
34186: ARRAY
34187: PUSH
34188: LD_INT 1
34190: ARRAY
34191: STR
34192: PUSH
34193: LD_STRING ,
34195: STR
34196: PUSH
34197: LD_VAR 0 3
34201: PUSH
34202: LD_VAR 0 2
34206: ARRAY
34207: PUSH
34208: LD_INT 2
34210: ARRAY
34211: STR
34212: PUSH
34213: LD_STRING ,
34215: STR
34216: PUSH
34217: LD_VAR 0 3
34221: PUSH
34222: LD_VAR 0 2
34226: ARRAY
34227: PUSH
34228: LD_INT 3
34230: ARRAY
34231: STR
34232: PUSH
34233: LD_STRING ,
34235: STR
34236: PUSH
34237: LD_VAR 0 3
34241: PUSH
34242: LD_VAR 0 2
34246: ARRAY
34247: PUSH
34248: LD_INT 4
34250: ARRAY
34251: STR
34252: PUSH
34253: LD_STRING )
34255: STR
34256: PPUSH
34257: CALL_OW 559
34261: GO 34171
34263: POP
34264: POP
// end ; end ;
34265: LD_VAR 0 1
34269: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34270: LD_EXP 122
34274: IFFALSE 34959
34276: GO 34278
34278: DISABLE
34279: LD_INT 0
34281: PPUSH
34282: PPUSH
34283: PPUSH
34284: PPUSH
34285: PPUSH
34286: PPUSH
34287: PPUSH
34288: PPUSH
34289: PPUSH
// begin enable ;
34290: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34291: LD_ADDR_VAR 0 3
34295: PUSH
34296: LD_EXP 122
34300: PPUSH
34301: CALL 80301 0 1
34305: ST_TO_ADDR
// if not list then
34306: LD_VAR 0 3
34310: NOT
34311: IFFALSE 34315
// exit ;
34313: GO 34959
// for i := 1 to list do
34315: LD_ADDR_VAR 0 1
34319: PUSH
34320: DOUBLE
34321: LD_INT 1
34323: DEC
34324: ST_TO_ADDR
34325: LD_VAR 0 3
34329: PUSH
34330: FOR_TO
34331: IFFALSE 34957
// begin depot := list [ i ] [ 2 ] ;
34333: LD_ADDR_VAR 0 8
34337: PUSH
34338: LD_VAR 0 3
34342: PUSH
34343: LD_VAR 0 1
34347: ARRAY
34348: PUSH
34349: LD_INT 2
34351: ARRAY
34352: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34353: LD_ADDR_VAR 0 5
34357: PUSH
34358: LD_VAR 0 3
34362: PUSH
34363: LD_VAR 0 1
34367: ARRAY
34368: PUSH
34369: LD_INT 1
34371: ARRAY
34372: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34373: LD_VAR 0 8
34377: PPUSH
34378: CALL_OW 301
34382: PUSH
34383: LD_VAR 0 5
34387: PUSH
34388: LD_VAR 0 8
34392: PPUSH
34393: CALL_OW 255
34397: NONEQUAL
34398: OR
34399: IFFALSE 34428
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34401: LD_ADDR_EXP 122
34405: PUSH
34406: LD_EXP 122
34410: PPUSH
34411: LD_VAR 0 8
34415: PPUSH
34416: LD_INT 0
34418: PPUSH
34419: CALL_OW 1
34423: ST_TO_ADDR
// exit ;
34424: POP
34425: POP
34426: GO 34959
// end ; x := list [ i ] [ 3 ] ;
34428: LD_ADDR_VAR 0 6
34432: PUSH
34433: LD_VAR 0 3
34437: PUSH
34438: LD_VAR 0 1
34442: ARRAY
34443: PUSH
34444: LD_INT 3
34446: ARRAY
34447: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34448: LD_ADDR_VAR 0 7
34452: PUSH
34453: LD_VAR 0 3
34457: PUSH
34458: LD_VAR 0 1
34462: ARRAY
34463: PUSH
34464: LD_INT 4
34466: ARRAY
34467: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34468: LD_ADDR_VAR 0 9
34472: PUSH
34473: LD_VAR 0 6
34477: PPUSH
34478: LD_VAR 0 7
34482: PPUSH
34483: LD_INT 16
34485: PPUSH
34486: CALL 78889 0 3
34490: ST_TO_ADDR
// if not cratesNearbyPoint then
34491: LD_VAR 0 9
34495: NOT
34496: IFFALSE 34502
// exit ;
34498: POP
34499: POP
34500: GO 34959
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34502: LD_ADDR_VAR 0 4
34506: PUSH
34507: LD_INT 22
34509: PUSH
34510: LD_VAR 0 5
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 3
34521: PUSH
34522: LD_INT 60
34524: PUSH
34525: EMPTY
34526: LIST
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 91
34534: PUSH
34535: LD_VAR 0 8
34539: PUSH
34540: LD_INT 6
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 2
34550: PUSH
34551: LD_INT 25
34553: PUSH
34554: LD_INT 2
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 25
34563: PUSH
34564: LD_INT 16
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: LIST
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: PPUSH
34582: CALL_OW 69
34586: PUSH
34587: LD_VAR 0 8
34591: PPUSH
34592: CALL_OW 313
34596: PPUSH
34597: LD_INT 3
34599: PUSH
34600: LD_INT 60
34602: PUSH
34603: EMPTY
34604: LIST
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 2
34612: PUSH
34613: LD_INT 25
34615: PUSH
34616: LD_INT 2
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 25
34625: PUSH
34626: LD_INT 16
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: LIST
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PPUSH
34642: CALL_OW 72
34646: UNION
34647: ST_TO_ADDR
// if tmp then
34648: LD_VAR 0 4
34652: IFFALSE 34732
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34654: LD_ADDR_VAR 0 4
34658: PUSH
34659: LD_VAR 0 4
34663: PPUSH
34664: LD_INT 3
34666: PPUSH
34667: CALL 76858 0 2
34671: ST_TO_ADDR
// for j in tmp do
34672: LD_ADDR_VAR 0 2
34676: PUSH
34677: LD_VAR 0 4
34681: PUSH
34682: FOR_IN
34683: IFFALSE 34726
// begin if IsInUnit ( j ) then
34685: LD_VAR 0 2
34689: PPUSH
34690: CALL_OW 310
34694: IFFALSE 34705
// ComExit ( j ) ;
34696: LD_VAR 0 2
34700: PPUSH
34701: CALL 76941 0 1
// AddComCollect ( j , x , y ) ;
34705: LD_VAR 0 2
34709: PPUSH
34710: LD_VAR 0 6
34714: PPUSH
34715: LD_VAR 0 7
34719: PPUSH
34720: CALL_OW 177
// end ;
34724: GO 34682
34726: POP
34727: POP
// exit ;
34728: POP
34729: POP
34730: GO 34959
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34732: LD_ADDR_VAR 0 4
34736: PUSH
34737: LD_INT 22
34739: PUSH
34740: LD_VAR 0 5
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 91
34751: PUSH
34752: LD_VAR 0 8
34756: PUSH
34757: LD_INT 8
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 2
34767: PUSH
34768: LD_INT 34
34770: PUSH
34771: LD_INT 12
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 34
34780: PUSH
34781: LD_INT 51
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 34
34790: PUSH
34791: LD_INT 32
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 34
34800: PUSH
34801: LD_INT 89
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: LIST
34819: PPUSH
34820: CALL_OW 69
34824: ST_TO_ADDR
// if tmp then
34825: LD_VAR 0 4
34829: IFFALSE 34955
// begin for j in tmp do
34831: LD_ADDR_VAR 0 2
34835: PUSH
34836: LD_VAR 0 4
34840: PUSH
34841: FOR_IN
34842: IFFALSE 34953
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34844: LD_VAR 0 2
34848: PPUSH
34849: CALL_OW 262
34853: PUSH
34854: LD_INT 3
34856: EQUAL
34857: PUSH
34858: LD_VAR 0 2
34862: PPUSH
34863: CALL_OW 261
34867: PUSH
34868: LD_INT 20
34870: GREATER
34871: OR
34872: PUSH
34873: LD_VAR 0 2
34877: PPUSH
34878: CALL_OW 314
34882: NOT
34883: AND
34884: PUSH
34885: LD_VAR 0 2
34889: PPUSH
34890: CALL_OW 263
34894: PUSH
34895: LD_INT 1
34897: NONEQUAL
34898: PUSH
34899: LD_VAR 0 2
34903: PPUSH
34904: CALL_OW 311
34908: OR
34909: AND
34910: IFFALSE 34951
// begin ComCollect ( j , x , y ) ;
34912: LD_VAR 0 2
34916: PPUSH
34917: LD_VAR 0 6
34921: PPUSH
34922: LD_VAR 0 7
34926: PPUSH
34927: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34931: LD_VAR 0 2
34935: PPUSH
34936: LD_VAR 0 8
34940: PPUSH
34941: CALL_OW 172
// exit ;
34945: POP
34946: POP
34947: POP
34948: POP
34949: GO 34959
// end ;
34951: GO 34841
34953: POP
34954: POP
// end ; end ;
34955: GO 34330
34957: POP
34958: POP
// end ; end_of_file
34959: PPOPN 9
34961: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34962: LD_INT 0
34964: PPUSH
34965: PPUSH
34966: PPUSH
34967: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34968: LD_VAR 0 1
34972: PPUSH
34973: CALL_OW 264
34977: PUSH
34978: LD_INT 91
34980: EQUAL
34981: IFFALSE 35053
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34983: LD_INT 68
34985: PPUSH
34986: LD_VAR 0 1
34990: PPUSH
34991: CALL_OW 255
34995: PPUSH
34996: CALL_OW 321
35000: PUSH
35001: LD_INT 2
35003: EQUAL
35004: IFFALSE 35016
// eff := 70 else
35006: LD_ADDR_VAR 0 4
35010: PUSH
35011: LD_INT 70
35013: ST_TO_ADDR
35014: GO 35024
// eff := 30 ;
35016: LD_ADDR_VAR 0 4
35020: PUSH
35021: LD_INT 30
35023: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35024: LD_VAR 0 1
35028: PPUSH
35029: CALL_OW 250
35033: PPUSH
35034: LD_VAR 0 1
35038: PPUSH
35039: CALL_OW 251
35043: PPUSH
35044: LD_VAR 0 4
35048: PPUSH
35049: CALL_OW 495
// end ; end ;
35053: LD_VAR 0 2
35057: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35058: LD_INT 0
35060: PPUSH
// end ;
35061: LD_VAR 0 4
35065: RET
// export function SOS_Command ( cmd ) ; begin
35066: LD_INT 0
35068: PPUSH
// end ;
35069: LD_VAR 0 2
35073: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35074: LD_INT 0
35076: PPUSH
// end ;
35077: LD_VAR 0 6
35081: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35082: LD_INT 0
35084: PPUSH
35085: PPUSH
// if not vehicle or not factory then
35086: LD_VAR 0 1
35090: NOT
35091: PUSH
35092: LD_VAR 0 2
35096: NOT
35097: OR
35098: IFFALSE 35102
// exit ;
35100: GO 35333
// if factoryWaypoints >= factory then
35102: LD_EXP 121
35106: PUSH
35107: LD_VAR 0 2
35111: GREATEREQUAL
35112: IFFALSE 35333
// if factoryWaypoints [ factory ] then
35114: LD_EXP 121
35118: PUSH
35119: LD_VAR 0 2
35123: ARRAY
35124: IFFALSE 35333
// begin if GetControl ( vehicle ) = control_manual then
35126: LD_VAR 0 1
35130: PPUSH
35131: CALL_OW 263
35135: PUSH
35136: LD_INT 1
35138: EQUAL
35139: IFFALSE 35220
// begin driver := IsDrivenBy ( vehicle ) ;
35141: LD_ADDR_VAR 0 4
35145: PUSH
35146: LD_VAR 0 1
35150: PPUSH
35151: CALL_OW 311
35155: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35156: LD_VAR 0 4
35160: PPUSH
35161: LD_EXP 121
35165: PUSH
35166: LD_VAR 0 2
35170: ARRAY
35171: PUSH
35172: LD_INT 3
35174: ARRAY
35175: PPUSH
35176: LD_EXP 121
35180: PUSH
35181: LD_VAR 0 2
35185: ARRAY
35186: PUSH
35187: LD_INT 4
35189: ARRAY
35190: PPUSH
35191: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35195: LD_VAR 0 4
35199: PPUSH
35200: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35204: LD_VAR 0 4
35208: PPUSH
35209: LD_VAR 0 2
35213: PPUSH
35214: CALL_OW 180
// end else
35218: GO 35333
// if GetControl ( vehicle ) = control_remote then
35220: LD_VAR 0 1
35224: PPUSH
35225: CALL_OW 263
35229: PUSH
35230: LD_INT 2
35232: EQUAL
35233: IFFALSE 35294
// begin wait ( 0 0$2 ) ;
35235: LD_INT 70
35237: PPUSH
35238: CALL_OW 67
// if Connect ( vehicle ) then
35242: LD_VAR 0 1
35246: PPUSH
35247: CALL 47182 0 1
35251: IFFALSE 35292
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35253: LD_VAR 0 1
35257: PPUSH
35258: LD_EXP 121
35262: PUSH
35263: LD_VAR 0 2
35267: ARRAY
35268: PUSH
35269: LD_INT 3
35271: ARRAY
35272: PPUSH
35273: LD_EXP 121
35277: PUSH
35278: LD_VAR 0 2
35282: ARRAY
35283: PUSH
35284: LD_INT 4
35286: ARRAY
35287: PPUSH
35288: CALL_OW 171
// end else
35292: GO 35333
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35294: LD_VAR 0 1
35298: PPUSH
35299: LD_EXP 121
35303: PUSH
35304: LD_VAR 0 2
35308: ARRAY
35309: PUSH
35310: LD_INT 3
35312: ARRAY
35313: PPUSH
35314: LD_EXP 121
35318: PUSH
35319: LD_VAR 0 2
35323: ARRAY
35324: PUSH
35325: LD_INT 4
35327: ARRAY
35328: PPUSH
35329: CALL_OW 171
// end ; end ;
35333: LD_VAR 0 3
35337: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35338: LD_INT 0
35340: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35341: LD_VAR 0 1
35345: PUSH
35346: LD_INT 250
35348: EQUAL
35349: PUSH
35350: LD_VAR 0 2
35354: PPUSH
35355: CALL_OW 264
35359: PUSH
35360: LD_INT 81
35362: EQUAL
35363: AND
35364: IFFALSE 35385
// MinerPlaceMine ( unit , x , y ) ;
35366: LD_VAR 0 2
35370: PPUSH
35371: LD_VAR 0 4
35375: PPUSH
35376: LD_VAR 0 5
35380: PPUSH
35381: CALL 37770 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35385: LD_VAR 0 1
35389: PUSH
35390: LD_INT 251
35392: EQUAL
35393: PUSH
35394: LD_VAR 0 2
35398: PPUSH
35399: CALL_OW 264
35403: PUSH
35404: LD_INT 81
35406: EQUAL
35407: AND
35408: IFFALSE 35429
// MinerDetonateMine ( unit , x , y ) ;
35410: LD_VAR 0 2
35414: PPUSH
35415: LD_VAR 0 4
35419: PPUSH
35420: LD_VAR 0 5
35424: PPUSH
35425: CALL 38045 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35429: LD_VAR 0 1
35433: PUSH
35434: LD_INT 252
35436: EQUAL
35437: PUSH
35438: LD_VAR 0 2
35442: PPUSH
35443: CALL_OW 264
35447: PUSH
35448: LD_INT 81
35450: EQUAL
35451: AND
35452: IFFALSE 35473
// MinerCreateMinefield ( unit , x , y ) ;
35454: LD_VAR 0 2
35458: PPUSH
35459: LD_VAR 0 4
35463: PPUSH
35464: LD_VAR 0 5
35468: PPUSH
35469: CALL 38462 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35473: LD_VAR 0 1
35477: PUSH
35478: LD_INT 253
35480: EQUAL
35481: PUSH
35482: LD_VAR 0 2
35486: PPUSH
35487: CALL_OW 257
35491: PUSH
35492: LD_INT 5
35494: EQUAL
35495: AND
35496: IFFALSE 35517
// ComBinocular ( unit , x , y ) ;
35498: LD_VAR 0 2
35502: PPUSH
35503: LD_VAR 0 4
35507: PPUSH
35508: LD_VAR 0 5
35512: PPUSH
35513: CALL 38831 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35517: LD_VAR 0 1
35521: PUSH
35522: LD_INT 254
35524: EQUAL
35525: PUSH
35526: LD_VAR 0 2
35530: PPUSH
35531: CALL_OW 264
35535: PUSH
35536: LD_INT 99
35538: EQUAL
35539: AND
35540: PUSH
35541: LD_VAR 0 3
35545: PPUSH
35546: CALL_OW 263
35550: PUSH
35551: LD_INT 3
35553: EQUAL
35554: AND
35555: IFFALSE 35571
// HackDestroyVehicle ( unit , selectedUnit ) ;
35557: LD_VAR 0 2
35561: PPUSH
35562: LD_VAR 0 3
35566: PPUSH
35567: CALL 37134 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35571: LD_VAR 0 1
35575: PUSH
35576: LD_INT 255
35578: EQUAL
35579: PUSH
35580: LD_VAR 0 2
35584: PPUSH
35585: CALL_OW 264
35589: PUSH
35590: LD_INT 14
35592: PUSH
35593: LD_INT 53
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: IN
35600: AND
35601: PUSH
35602: LD_VAR 0 4
35606: PPUSH
35607: LD_VAR 0 5
35611: PPUSH
35612: CALL_OW 488
35616: AND
35617: IFFALSE 35641
// CutTreeXYR ( unit , x , y , 12 ) ;
35619: LD_VAR 0 2
35623: PPUSH
35624: LD_VAR 0 4
35628: PPUSH
35629: LD_VAR 0 5
35633: PPUSH
35634: LD_INT 12
35636: PPUSH
35637: CALL 35704 0 4
// if cmd = 256 then
35641: LD_VAR 0 1
35645: PUSH
35646: LD_INT 256
35648: EQUAL
35649: IFFALSE 35670
// SetFactoryWaypoint ( unit , x , y ) ;
35651: LD_VAR 0 2
35655: PPUSH
35656: LD_VAR 0 4
35660: PPUSH
35661: LD_VAR 0 5
35665: PPUSH
35666: CALL 33651 0 3
// if cmd = 257 then
35670: LD_VAR 0 1
35674: PUSH
35675: LD_INT 257
35677: EQUAL
35678: IFFALSE 35699
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35680: LD_VAR 0 2
35684: PPUSH
35685: LD_VAR 0 4
35689: PPUSH
35690: LD_VAR 0 5
35694: PPUSH
35695: CALL 34013 0 3
// end ;
35699: LD_VAR 0 6
35703: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35704: LD_INT 0
35706: PPUSH
35707: PPUSH
35708: PPUSH
35709: PPUSH
35710: PPUSH
35711: PPUSH
35712: PPUSH
35713: PPUSH
35714: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35715: LD_VAR 0 1
35719: NOT
35720: PUSH
35721: LD_VAR 0 2
35725: PPUSH
35726: LD_VAR 0 3
35730: PPUSH
35731: CALL_OW 488
35735: NOT
35736: OR
35737: PUSH
35738: LD_VAR 0 4
35742: NOT
35743: OR
35744: IFFALSE 35748
// exit ;
35746: GO 36088
// list := [ ] ;
35748: LD_ADDR_VAR 0 13
35752: PUSH
35753: EMPTY
35754: ST_TO_ADDR
// if x - r < 0 then
35755: LD_VAR 0 2
35759: PUSH
35760: LD_VAR 0 4
35764: MINUS
35765: PUSH
35766: LD_INT 0
35768: LESS
35769: IFFALSE 35781
// min_x := 0 else
35771: LD_ADDR_VAR 0 7
35775: PUSH
35776: LD_INT 0
35778: ST_TO_ADDR
35779: GO 35797
// min_x := x - r ;
35781: LD_ADDR_VAR 0 7
35785: PUSH
35786: LD_VAR 0 2
35790: PUSH
35791: LD_VAR 0 4
35795: MINUS
35796: ST_TO_ADDR
// if y - r < 0 then
35797: LD_VAR 0 3
35801: PUSH
35802: LD_VAR 0 4
35806: MINUS
35807: PUSH
35808: LD_INT 0
35810: LESS
35811: IFFALSE 35823
// min_y := 0 else
35813: LD_ADDR_VAR 0 8
35817: PUSH
35818: LD_INT 0
35820: ST_TO_ADDR
35821: GO 35839
// min_y := y - r ;
35823: LD_ADDR_VAR 0 8
35827: PUSH
35828: LD_VAR 0 3
35832: PUSH
35833: LD_VAR 0 4
35837: MINUS
35838: ST_TO_ADDR
// max_x := x + r ;
35839: LD_ADDR_VAR 0 9
35843: PUSH
35844: LD_VAR 0 2
35848: PUSH
35849: LD_VAR 0 4
35853: PLUS
35854: ST_TO_ADDR
// max_y := y + r ;
35855: LD_ADDR_VAR 0 10
35859: PUSH
35860: LD_VAR 0 3
35864: PUSH
35865: LD_VAR 0 4
35869: PLUS
35870: ST_TO_ADDR
// for _x = min_x to max_x do
35871: LD_ADDR_VAR 0 11
35875: PUSH
35876: DOUBLE
35877: LD_VAR 0 7
35881: DEC
35882: ST_TO_ADDR
35883: LD_VAR 0 9
35887: PUSH
35888: FOR_TO
35889: IFFALSE 36006
// for _y = min_y to max_y do
35891: LD_ADDR_VAR 0 12
35895: PUSH
35896: DOUBLE
35897: LD_VAR 0 8
35901: DEC
35902: ST_TO_ADDR
35903: LD_VAR 0 10
35907: PUSH
35908: FOR_TO
35909: IFFALSE 36002
// begin if not ValidHex ( _x , _y ) then
35911: LD_VAR 0 11
35915: PPUSH
35916: LD_VAR 0 12
35920: PPUSH
35921: CALL_OW 488
35925: NOT
35926: IFFALSE 35930
// continue ;
35928: GO 35908
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35930: LD_VAR 0 11
35934: PPUSH
35935: LD_VAR 0 12
35939: PPUSH
35940: CALL_OW 351
35944: PUSH
35945: LD_VAR 0 11
35949: PPUSH
35950: LD_VAR 0 12
35954: PPUSH
35955: CALL_OW 554
35959: AND
35960: IFFALSE 36000
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35962: LD_ADDR_VAR 0 13
35966: PUSH
35967: LD_VAR 0 13
35971: PPUSH
35972: LD_VAR 0 13
35976: PUSH
35977: LD_INT 1
35979: PLUS
35980: PPUSH
35981: LD_VAR 0 11
35985: PUSH
35986: LD_VAR 0 12
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PPUSH
35995: CALL_OW 2
35999: ST_TO_ADDR
// end ;
36000: GO 35908
36002: POP
36003: POP
36004: GO 35888
36006: POP
36007: POP
// if not list then
36008: LD_VAR 0 13
36012: NOT
36013: IFFALSE 36017
// exit ;
36015: GO 36088
// for i in list do
36017: LD_ADDR_VAR 0 6
36021: PUSH
36022: LD_VAR 0 13
36026: PUSH
36027: FOR_IN
36028: IFFALSE 36086
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36030: LD_VAR 0 1
36034: PPUSH
36035: LD_STRING M
36037: PUSH
36038: LD_VAR 0 6
36042: PUSH
36043: LD_INT 1
36045: ARRAY
36046: PUSH
36047: LD_VAR 0 6
36051: PUSH
36052: LD_INT 2
36054: ARRAY
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: LD_INT 0
36061: PUSH
36062: LD_INT 0
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: PUSH
36077: EMPTY
36078: LIST
36079: PPUSH
36080: CALL_OW 447
36084: GO 36027
36086: POP
36087: POP
// end ;
36088: LD_VAR 0 5
36092: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36093: LD_EXP 124
36097: NOT
36098: IFFALSE 36148
36100: GO 36102
36102: DISABLE
// begin initHack := true ;
36103: LD_ADDR_EXP 124
36107: PUSH
36108: LD_INT 1
36110: ST_TO_ADDR
// hackTanks := [ ] ;
36111: LD_ADDR_EXP 125
36115: PUSH
36116: EMPTY
36117: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36118: LD_ADDR_EXP 126
36122: PUSH
36123: EMPTY
36124: ST_TO_ADDR
// hackLimit := 3 ;
36125: LD_ADDR_EXP 127
36129: PUSH
36130: LD_INT 3
36132: ST_TO_ADDR
// hackDist := 12 ;
36133: LD_ADDR_EXP 128
36137: PUSH
36138: LD_INT 12
36140: ST_TO_ADDR
// hackCounter := [ ] ;
36141: LD_ADDR_EXP 129
36145: PUSH
36146: EMPTY
36147: ST_TO_ADDR
// end ;
36148: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36149: LD_EXP 124
36153: PUSH
36154: LD_INT 34
36156: PUSH
36157: LD_INT 99
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PPUSH
36164: CALL_OW 69
36168: AND
36169: IFFALSE 36422
36171: GO 36173
36173: DISABLE
36174: LD_INT 0
36176: PPUSH
36177: PPUSH
// begin enable ;
36178: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36179: LD_ADDR_VAR 0 1
36183: PUSH
36184: LD_INT 34
36186: PUSH
36187: LD_INT 99
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PPUSH
36194: CALL_OW 69
36198: PUSH
36199: FOR_IN
36200: IFFALSE 36420
// begin if not i in hackTanks then
36202: LD_VAR 0 1
36206: PUSH
36207: LD_EXP 125
36211: IN
36212: NOT
36213: IFFALSE 36296
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36215: LD_ADDR_EXP 125
36219: PUSH
36220: LD_EXP 125
36224: PPUSH
36225: LD_EXP 125
36229: PUSH
36230: LD_INT 1
36232: PLUS
36233: PPUSH
36234: LD_VAR 0 1
36238: PPUSH
36239: CALL_OW 1
36243: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36244: LD_ADDR_EXP 126
36248: PUSH
36249: LD_EXP 126
36253: PPUSH
36254: LD_EXP 126
36258: PUSH
36259: LD_INT 1
36261: PLUS
36262: PPUSH
36263: EMPTY
36264: PPUSH
36265: CALL_OW 1
36269: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36270: LD_ADDR_EXP 129
36274: PUSH
36275: LD_EXP 129
36279: PPUSH
36280: LD_EXP 129
36284: PUSH
36285: LD_INT 1
36287: PLUS
36288: PPUSH
36289: EMPTY
36290: PPUSH
36291: CALL_OW 1
36295: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36296: LD_VAR 0 1
36300: PPUSH
36301: CALL_OW 302
36305: NOT
36306: IFFALSE 36319
// begin HackUnlinkAll ( i ) ;
36308: LD_VAR 0 1
36312: PPUSH
36313: CALL 36425 0 1
// continue ;
36317: GO 36199
// end ; HackCheckCapturedStatus ( i ) ;
36319: LD_VAR 0 1
36323: PPUSH
36324: CALL 36868 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36328: LD_ADDR_VAR 0 2
36332: PUSH
36333: LD_INT 81
36335: PUSH
36336: LD_VAR 0 1
36340: PPUSH
36341: CALL_OW 255
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 33
36352: PUSH
36353: LD_INT 3
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 91
36362: PUSH
36363: LD_VAR 0 1
36367: PUSH
36368: LD_EXP 128
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 50
36380: PUSH
36381: EMPTY
36382: LIST
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: PPUSH
36390: CALL_OW 69
36394: ST_TO_ADDR
// if not tmp then
36395: LD_VAR 0 2
36399: NOT
36400: IFFALSE 36404
// continue ;
36402: GO 36199
// HackLink ( i , tmp ) ;
36404: LD_VAR 0 1
36408: PPUSH
36409: LD_VAR 0 2
36413: PPUSH
36414: CALL 36561 0 2
// end ;
36418: GO 36199
36420: POP
36421: POP
// end ;
36422: PPOPN 2
36424: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36425: LD_INT 0
36427: PPUSH
36428: PPUSH
36429: PPUSH
// if not hack in hackTanks then
36430: LD_VAR 0 1
36434: PUSH
36435: LD_EXP 125
36439: IN
36440: NOT
36441: IFFALSE 36445
// exit ;
36443: GO 36556
// index := GetElementIndex ( hackTanks , hack ) ;
36445: LD_ADDR_VAR 0 4
36449: PUSH
36450: LD_EXP 125
36454: PPUSH
36455: LD_VAR 0 1
36459: PPUSH
36460: CALL 43998 0 2
36464: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36465: LD_EXP 126
36469: PUSH
36470: LD_VAR 0 4
36474: ARRAY
36475: IFFALSE 36556
// begin for i in hackTanksCaptured [ index ] do
36477: LD_ADDR_VAR 0 3
36481: PUSH
36482: LD_EXP 126
36486: PUSH
36487: LD_VAR 0 4
36491: ARRAY
36492: PUSH
36493: FOR_IN
36494: IFFALSE 36520
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36496: LD_VAR 0 3
36500: PUSH
36501: LD_INT 1
36503: ARRAY
36504: PPUSH
36505: LD_VAR 0 3
36509: PUSH
36510: LD_INT 2
36512: ARRAY
36513: PPUSH
36514: CALL_OW 235
36518: GO 36493
36520: POP
36521: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36522: LD_ADDR_EXP 126
36526: PUSH
36527: LD_EXP 126
36531: PPUSH
36532: LD_VAR 0 4
36536: PPUSH
36537: EMPTY
36538: PPUSH
36539: CALL_OW 1
36543: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36544: LD_VAR 0 1
36548: PPUSH
36549: LD_INT 0
36551: PPUSH
36552: CALL_OW 505
// end ; end ;
36556: LD_VAR 0 2
36560: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36561: LD_INT 0
36563: PPUSH
36564: PPUSH
36565: PPUSH
// if not hack in hackTanks or not vehicles then
36566: LD_VAR 0 1
36570: PUSH
36571: LD_EXP 125
36575: IN
36576: NOT
36577: PUSH
36578: LD_VAR 0 2
36582: NOT
36583: OR
36584: IFFALSE 36588
// exit ;
36586: GO 36863
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36588: LD_ADDR_VAR 0 2
36592: PUSH
36593: LD_VAR 0 1
36597: PPUSH
36598: LD_VAR 0 2
36602: PPUSH
36603: LD_INT 1
36605: PPUSH
36606: LD_INT 1
36608: PPUSH
36609: CALL 44648 0 4
36613: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36614: LD_ADDR_VAR 0 5
36618: PUSH
36619: LD_EXP 125
36623: PPUSH
36624: LD_VAR 0 1
36628: PPUSH
36629: CALL 43998 0 2
36633: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36634: LD_EXP 126
36638: PUSH
36639: LD_VAR 0 5
36643: ARRAY
36644: PUSH
36645: LD_EXP 127
36649: LESS
36650: IFFALSE 36839
// begin for i := 1 to vehicles do
36652: LD_ADDR_VAR 0 4
36656: PUSH
36657: DOUBLE
36658: LD_INT 1
36660: DEC
36661: ST_TO_ADDR
36662: LD_VAR 0 2
36666: PUSH
36667: FOR_TO
36668: IFFALSE 36837
// begin if hackTanksCaptured [ index ] = hackLimit then
36670: LD_EXP 126
36674: PUSH
36675: LD_VAR 0 5
36679: ARRAY
36680: PUSH
36681: LD_EXP 127
36685: EQUAL
36686: IFFALSE 36690
// break ;
36688: GO 36837
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36690: LD_ADDR_EXP 129
36694: PUSH
36695: LD_EXP 129
36699: PPUSH
36700: LD_VAR 0 5
36704: PPUSH
36705: LD_EXP 129
36709: PUSH
36710: LD_VAR 0 5
36714: ARRAY
36715: PUSH
36716: LD_INT 1
36718: PLUS
36719: PPUSH
36720: CALL_OW 1
36724: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36725: LD_ADDR_EXP 126
36729: PUSH
36730: LD_EXP 126
36734: PPUSH
36735: LD_VAR 0 5
36739: PUSH
36740: LD_EXP 126
36744: PUSH
36745: LD_VAR 0 5
36749: ARRAY
36750: PUSH
36751: LD_INT 1
36753: PLUS
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PPUSH
36759: LD_VAR 0 2
36763: PUSH
36764: LD_VAR 0 4
36768: ARRAY
36769: PUSH
36770: LD_VAR 0 2
36774: PUSH
36775: LD_VAR 0 4
36779: ARRAY
36780: PPUSH
36781: CALL_OW 255
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PPUSH
36790: CALL 44213 0 3
36794: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36795: LD_VAR 0 2
36799: PUSH
36800: LD_VAR 0 4
36804: ARRAY
36805: PPUSH
36806: LD_VAR 0 1
36810: PPUSH
36811: CALL_OW 255
36815: PPUSH
36816: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36820: LD_VAR 0 2
36824: PUSH
36825: LD_VAR 0 4
36829: ARRAY
36830: PPUSH
36831: CALL_OW 141
// end ;
36835: GO 36667
36837: POP
36838: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36839: LD_VAR 0 1
36843: PPUSH
36844: LD_EXP 126
36848: PUSH
36849: LD_VAR 0 5
36853: ARRAY
36854: PUSH
36855: LD_INT 0
36857: PLUS
36858: PPUSH
36859: CALL_OW 505
// end ;
36863: LD_VAR 0 3
36867: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36868: LD_INT 0
36870: PPUSH
36871: PPUSH
36872: PPUSH
36873: PPUSH
// if not hack in hackTanks then
36874: LD_VAR 0 1
36878: PUSH
36879: LD_EXP 125
36883: IN
36884: NOT
36885: IFFALSE 36889
// exit ;
36887: GO 37129
// index := GetElementIndex ( hackTanks , hack ) ;
36889: LD_ADDR_VAR 0 4
36893: PUSH
36894: LD_EXP 125
36898: PPUSH
36899: LD_VAR 0 1
36903: PPUSH
36904: CALL 43998 0 2
36908: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36909: LD_ADDR_VAR 0 3
36913: PUSH
36914: DOUBLE
36915: LD_EXP 126
36919: PUSH
36920: LD_VAR 0 4
36924: ARRAY
36925: INC
36926: ST_TO_ADDR
36927: LD_INT 1
36929: PUSH
36930: FOR_DOWNTO
36931: IFFALSE 37103
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36933: LD_ADDR_VAR 0 5
36937: PUSH
36938: LD_EXP 126
36942: PUSH
36943: LD_VAR 0 4
36947: ARRAY
36948: PUSH
36949: LD_VAR 0 3
36953: ARRAY
36954: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36955: LD_VAR 0 5
36959: PUSH
36960: LD_INT 1
36962: ARRAY
36963: PPUSH
36964: CALL_OW 302
36968: NOT
36969: PUSH
36970: LD_VAR 0 5
36974: PUSH
36975: LD_INT 1
36977: ARRAY
36978: PPUSH
36979: CALL_OW 255
36983: PUSH
36984: LD_VAR 0 1
36988: PPUSH
36989: CALL_OW 255
36993: NONEQUAL
36994: OR
36995: IFFALSE 37101
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36997: LD_VAR 0 5
37001: PUSH
37002: LD_INT 1
37004: ARRAY
37005: PPUSH
37006: CALL_OW 305
37010: PUSH
37011: LD_VAR 0 5
37015: PUSH
37016: LD_INT 1
37018: ARRAY
37019: PPUSH
37020: CALL_OW 255
37024: PUSH
37025: LD_VAR 0 1
37029: PPUSH
37030: CALL_OW 255
37034: EQUAL
37035: AND
37036: IFFALSE 37060
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37038: LD_VAR 0 5
37042: PUSH
37043: LD_INT 1
37045: ARRAY
37046: PPUSH
37047: LD_VAR 0 5
37051: PUSH
37052: LD_INT 2
37054: ARRAY
37055: PPUSH
37056: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37060: LD_ADDR_EXP 126
37064: PUSH
37065: LD_EXP 126
37069: PPUSH
37070: LD_VAR 0 4
37074: PPUSH
37075: LD_EXP 126
37079: PUSH
37080: LD_VAR 0 4
37084: ARRAY
37085: PPUSH
37086: LD_VAR 0 3
37090: PPUSH
37091: CALL_OW 3
37095: PPUSH
37096: CALL_OW 1
37100: ST_TO_ADDR
// end ; end ;
37101: GO 36930
37103: POP
37104: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37105: LD_VAR 0 1
37109: PPUSH
37110: LD_EXP 126
37114: PUSH
37115: LD_VAR 0 4
37119: ARRAY
37120: PUSH
37121: LD_INT 0
37123: PLUS
37124: PPUSH
37125: CALL_OW 505
// end ;
37129: LD_VAR 0 2
37133: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37134: LD_INT 0
37136: PPUSH
37137: PPUSH
37138: PPUSH
37139: PPUSH
// if not hack in hackTanks then
37140: LD_VAR 0 1
37144: PUSH
37145: LD_EXP 125
37149: IN
37150: NOT
37151: IFFALSE 37155
// exit ;
37153: GO 37240
// index := GetElementIndex ( hackTanks , hack ) ;
37155: LD_ADDR_VAR 0 5
37159: PUSH
37160: LD_EXP 125
37164: PPUSH
37165: LD_VAR 0 1
37169: PPUSH
37170: CALL 43998 0 2
37174: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37175: LD_ADDR_VAR 0 4
37179: PUSH
37180: DOUBLE
37181: LD_INT 1
37183: DEC
37184: ST_TO_ADDR
37185: LD_EXP 126
37189: PUSH
37190: LD_VAR 0 5
37194: ARRAY
37195: PUSH
37196: FOR_TO
37197: IFFALSE 37238
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37199: LD_EXP 126
37203: PUSH
37204: LD_VAR 0 5
37208: ARRAY
37209: PUSH
37210: LD_VAR 0 4
37214: ARRAY
37215: PUSH
37216: LD_INT 1
37218: ARRAY
37219: PUSH
37220: LD_VAR 0 2
37224: EQUAL
37225: IFFALSE 37236
// KillUnit ( vehicle ) ;
37227: LD_VAR 0 2
37231: PPUSH
37232: CALL_OW 66
37236: GO 37196
37238: POP
37239: POP
// end ;
37240: LD_VAR 0 3
37244: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37245: LD_EXP 130
37249: NOT
37250: IFFALSE 37285
37252: GO 37254
37254: DISABLE
// begin initMiner := true ;
37255: LD_ADDR_EXP 130
37259: PUSH
37260: LD_INT 1
37262: ST_TO_ADDR
// minersList := [ ] ;
37263: LD_ADDR_EXP 131
37267: PUSH
37268: EMPTY
37269: ST_TO_ADDR
// minerMinesList := [ ] ;
37270: LD_ADDR_EXP 132
37274: PUSH
37275: EMPTY
37276: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37277: LD_ADDR_EXP 133
37281: PUSH
37282: LD_INT 5
37284: ST_TO_ADDR
// end ;
37285: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37286: LD_EXP 130
37290: PUSH
37291: LD_INT 34
37293: PUSH
37294: LD_INT 81
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PPUSH
37301: CALL_OW 69
37305: AND
37306: IFFALSE 37767
37308: GO 37310
37310: DISABLE
37311: LD_INT 0
37313: PPUSH
37314: PPUSH
37315: PPUSH
37316: PPUSH
// begin enable ;
37317: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37318: LD_ADDR_VAR 0 1
37322: PUSH
37323: LD_INT 34
37325: PUSH
37326: LD_INT 81
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PPUSH
37333: CALL_OW 69
37337: PUSH
37338: FOR_IN
37339: IFFALSE 37411
// begin if not i in minersList then
37341: LD_VAR 0 1
37345: PUSH
37346: LD_EXP 131
37350: IN
37351: NOT
37352: IFFALSE 37409
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37354: LD_ADDR_EXP 131
37358: PUSH
37359: LD_EXP 131
37363: PPUSH
37364: LD_EXP 131
37368: PUSH
37369: LD_INT 1
37371: PLUS
37372: PPUSH
37373: LD_VAR 0 1
37377: PPUSH
37378: CALL_OW 1
37382: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37383: LD_ADDR_EXP 132
37387: PUSH
37388: LD_EXP 132
37392: PPUSH
37393: LD_EXP 132
37397: PUSH
37398: LD_INT 1
37400: PLUS
37401: PPUSH
37402: EMPTY
37403: PPUSH
37404: CALL_OW 1
37408: ST_TO_ADDR
// end end ;
37409: GO 37338
37411: POP
37412: POP
// for i := minerMinesList downto 1 do
37413: LD_ADDR_VAR 0 1
37417: PUSH
37418: DOUBLE
37419: LD_EXP 132
37423: INC
37424: ST_TO_ADDR
37425: LD_INT 1
37427: PUSH
37428: FOR_DOWNTO
37429: IFFALSE 37765
// begin if IsLive ( minersList [ i ] ) then
37431: LD_EXP 131
37435: PUSH
37436: LD_VAR 0 1
37440: ARRAY
37441: PPUSH
37442: CALL_OW 300
37446: IFFALSE 37474
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37448: LD_EXP 131
37452: PUSH
37453: LD_VAR 0 1
37457: ARRAY
37458: PPUSH
37459: LD_EXP 132
37463: PUSH
37464: LD_VAR 0 1
37468: ARRAY
37469: PPUSH
37470: CALL_OW 505
// if not minerMinesList [ i ] then
37474: LD_EXP 132
37478: PUSH
37479: LD_VAR 0 1
37483: ARRAY
37484: NOT
37485: IFFALSE 37489
// continue ;
37487: GO 37428
// for j := minerMinesList [ i ] downto 1 do
37489: LD_ADDR_VAR 0 2
37493: PUSH
37494: DOUBLE
37495: LD_EXP 132
37499: PUSH
37500: LD_VAR 0 1
37504: ARRAY
37505: INC
37506: ST_TO_ADDR
37507: LD_INT 1
37509: PUSH
37510: FOR_DOWNTO
37511: IFFALSE 37761
// begin side := GetSide ( minersList [ i ] ) ;
37513: LD_ADDR_VAR 0 3
37517: PUSH
37518: LD_EXP 131
37522: PUSH
37523: LD_VAR 0 1
37527: ARRAY
37528: PPUSH
37529: CALL_OW 255
37533: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37534: LD_ADDR_VAR 0 4
37538: PUSH
37539: LD_EXP 132
37543: PUSH
37544: LD_VAR 0 1
37548: ARRAY
37549: PUSH
37550: LD_VAR 0 2
37554: ARRAY
37555: PUSH
37556: LD_INT 1
37558: ARRAY
37559: PPUSH
37560: LD_EXP 132
37564: PUSH
37565: LD_VAR 0 1
37569: ARRAY
37570: PUSH
37571: LD_VAR 0 2
37575: ARRAY
37576: PUSH
37577: LD_INT 2
37579: ARRAY
37580: PPUSH
37581: CALL_OW 428
37585: ST_TO_ADDR
// if not tmp then
37586: LD_VAR 0 4
37590: NOT
37591: IFFALSE 37595
// continue ;
37593: GO 37510
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37595: LD_VAR 0 4
37599: PUSH
37600: LD_INT 81
37602: PUSH
37603: LD_VAR 0 3
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PPUSH
37612: CALL_OW 69
37616: IN
37617: PUSH
37618: LD_EXP 132
37622: PUSH
37623: LD_VAR 0 1
37627: ARRAY
37628: PUSH
37629: LD_VAR 0 2
37633: ARRAY
37634: PUSH
37635: LD_INT 1
37637: ARRAY
37638: PPUSH
37639: LD_EXP 132
37643: PUSH
37644: LD_VAR 0 1
37648: ARRAY
37649: PUSH
37650: LD_VAR 0 2
37654: ARRAY
37655: PUSH
37656: LD_INT 2
37658: ARRAY
37659: PPUSH
37660: CALL_OW 458
37664: AND
37665: IFFALSE 37759
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37667: LD_EXP 132
37671: PUSH
37672: LD_VAR 0 1
37676: ARRAY
37677: PUSH
37678: LD_VAR 0 2
37682: ARRAY
37683: PUSH
37684: LD_INT 1
37686: ARRAY
37687: PPUSH
37688: LD_EXP 132
37692: PUSH
37693: LD_VAR 0 1
37697: ARRAY
37698: PUSH
37699: LD_VAR 0 2
37703: ARRAY
37704: PUSH
37705: LD_INT 2
37707: ARRAY
37708: PPUSH
37709: LD_VAR 0 3
37713: PPUSH
37714: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37718: LD_ADDR_EXP 132
37722: PUSH
37723: LD_EXP 132
37727: PPUSH
37728: LD_VAR 0 1
37732: PPUSH
37733: LD_EXP 132
37737: PUSH
37738: LD_VAR 0 1
37742: ARRAY
37743: PPUSH
37744: LD_VAR 0 2
37748: PPUSH
37749: CALL_OW 3
37753: PPUSH
37754: CALL_OW 1
37758: ST_TO_ADDR
// end ; end ;
37759: GO 37510
37761: POP
37762: POP
// end ;
37763: GO 37428
37765: POP
37766: POP
// end ;
37767: PPOPN 4
37769: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37770: LD_INT 0
37772: PPUSH
37773: PPUSH
// result := false ;
37774: LD_ADDR_VAR 0 4
37778: PUSH
37779: LD_INT 0
37781: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37782: LD_VAR 0 1
37786: PPUSH
37787: CALL_OW 264
37791: PUSH
37792: LD_INT 81
37794: EQUAL
37795: NOT
37796: IFFALSE 37800
// exit ;
37798: GO 38040
// index := GetElementIndex ( minersList , unit ) ;
37800: LD_ADDR_VAR 0 5
37804: PUSH
37805: LD_EXP 131
37809: PPUSH
37810: LD_VAR 0 1
37814: PPUSH
37815: CALL 43998 0 2
37819: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37820: LD_EXP 132
37824: PUSH
37825: LD_VAR 0 5
37829: ARRAY
37830: PUSH
37831: LD_EXP 133
37835: GREATEREQUAL
37836: IFFALSE 37840
// exit ;
37838: GO 38040
// ComMoveXY ( unit , x , y ) ;
37840: LD_VAR 0 1
37844: PPUSH
37845: LD_VAR 0 2
37849: PPUSH
37850: LD_VAR 0 3
37854: PPUSH
37855: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37859: LD_INT 35
37861: PPUSH
37862: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37866: LD_VAR 0 1
37870: PPUSH
37871: LD_VAR 0 2
37875: PPUSH
37876: LD_VAR 0 3
37880: PPUSH
37881: CALL 75353 0 3
37885: NOT
37886: PUSH
37887: LD_VAR 0 1
37891: PPUSH
37892: CALL_OW 314
37896: AND
37897: IFFALSE 37901
// exit ;
37899: GO 38040
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37901: LD_VAR 0 2
37905: PPUSH
37906: LD_VAR 0 3
37910: PPUSH
37911: CALL_OW 428
37915: PUSH
37916: LD_VAR 0 1
37920: EQUAL
37921: PUSH
37922: LD_VAR 0 1
37926: PPUSH
37927: CALL_OW 314
37931: NOT
37932: AND
37933: IFFALSE 37859
// PlaySoundXY ( x , y , PlantMine ) ;
37935: LD_VAR 0 2
37939: PPUSH
37940: LD_VAR 0 3
37944: PPUSH
37945: LD_STRING PlantMine
37947: PPUSH
37948: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37952: LD_VAR 0 2
37956: PPUSH
37957: LD_VAR 0 3
37961: PPUSH
37962: LD_VAR 0 1
37966: PPUSH
37967: CALL_OW 255
37971: PPUSH
37972: LD_INT 0
37974: PPUSH
37975: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37979: LD_ADDR_EXP 132
37983: PUSH
37984: LD_EXP 132
37988: PPUSH
37989: LD_VAR 0 5
37993: PUSH
37994: LD_EXP 132
37998: PUSH
37999: LD_VAR 0 5
38003: ARRAY
38004: PUSH
38005: LD_INT 1
38007: PLUS
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PPUSH
38013: LD_VAR 0 2
38017: PUSH
38018: LD_VAR 0 3
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PPUSH
38027: CALL 44213 0 3
38031: ST_TO_ADDR
// result := true ;
38032: LD_ADDR_VAR 0 4
38036: PUSH
38037: LD_INT 1
38039: ST_TO_ADDR
// end ;
38040: LD_VAR 0 4
38044: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38045: LD_INT 0
38047: PPUSH
38048: PPUSH
38049: PPUSH
// if not unit in minersList then
38050: LD_VAR 0 1
38054: PUSH
38055: LD_EXP 131
38059: IN
38060: NOT
38061: IFFALSE 38065
// exit ;
38063: GO 38457
// index := GetElementIndex ( minersList , unit ) ;
38065: LD_ADDR_VAR 0 6
38069: PUSH
38070: LD_EXP 131
38074: PPUSH
38075: LD_VAR 0 1
38079: PPUSH
38080: CALL 43998 0 2
38084: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38085: LD_ADDR_VAR 0 5
38089: PUSH
38090: DOUBLE
38091: LD_EXP 132
38095: PUSH
38096: LD_VAR 0 6
38100: ARRAY
38101: INC
38102: ST_TO_ADDR
38103: LD_INT 1
38105: PUSH
38106: FOR_DOWNTO
38107: IFFALSE 38268
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38109: LD_EXP 132
38113: PUSH
38114: LD_VAR 0 6
38118: ARRAY
38119: PUSH
38120: LD_VAR 0 5
38124: ARRAY
38125: PUSH
38126: LD_INT 1
38128: ARRAY
38129: PUSH
38130: LD_VAR 0 2
38134: EQUAL
38135: PUSH
38136: LD_EXP 132
38140: PUSH
38141: LD_VAR 0 6
38145: ARRAY
38146: PUSH
38147: LD_VAR 0 5
38151: ARRAY
38152: PUSH
38153: LD_INT 2
38155: ARRAY
38156: PUSH
38157: LD_VAR 0 3
38161: EQUAL
38162: AND
38163: IFFALSE 38266
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38165: LD_EXP 132
38169: PUSH
38170: LD_VAR 0 6
38174: ARRAY
38175: PUSH
38176: LD_VAR 0 5
38180: ARRAY
38181: PUSH
38182: LD_INT 1
38184: ARRAY
38185: PPUSH
38186: LD_EXP 132
38190: PUSH
38191: LD_VAR 0 6
38195: ARRAY
38196: PUSH
38197: LD_VAR 0 5
38201: ARRAY
38202: PUSH
38203: LD_INT 2
38205: ARRAY
38206: PPUSH
38207: LD_VAR 0 1
38211: PPUSH
38212: CALL_OW 255
38216: PPUSH
38217: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38221: LD_ADDR_EXP 132
38225: PUSH
38226: LD_EXP 132
38230: PPUSH
38231: LD_VAR 0 6
38235: PPUSH
38236: LD_EXP 132
38240: PUSH
38241: LD_VAR 0 6
38245: ARRAY
38246: PPUSH
38247: LD_VAR 0 5
38251: PPUSH
38252: CALL_OW 3
38256: PPUSH
38257: CALL_OW 1
38261: ST_TO_ADDR
// exit ;
38262: POP
38263: POP
38264: GO 38457
// end ; end ;
38266: GO 38106
38268: POP
38269: POP
// for i := minerMinesList [ index ] downto 1 do
38270: LD_ADDR_VAR 0 5
38274: PUSH
38275: DOUBLE
38276: LD_EXP 132
38280: PUSH
38281: LD_VAR 0 6
38285: ARRAY
38286: INC
38287: ST_TO_ADDR
38288: LD_INT 1
38290: PUSH
38291: FOR_DOWNTO
38292: IFFALSE 38455
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38294: LD_EXP 132
38298: PUSH
38299: LD_VAR 0 6
38303: ARRAY
38304: PUSH
38305: LD_VAR 0 5
38309: ARRAY
38310: PUSH
38311: LD_INT 1
38313: ARRAY
38314: PPUSH
38315: LD_EXP 132
38319: PUSH
38320: LD_VAR 0 6
38324: ARRAY
38325: PUSH
38326: LD_VAR 0 5
38330: ARRAY
38331: PUSH
38332: LD_INT 2
38334: ARRAY
38335: PPUSH
38336: LD_VAR 0 2
38340: PPUSH
38341: LD_VAR 0 3
38345: PPUSH
38346: CALL_OW 298
38350: PUSH
38351: LD_INT 6
38353: LESS
38354: IFFALSE 38453
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38356: LD_EXP 132
38360: PUSH
38361: LD_VAR 0 6
38365: ARRAY
38366: PUSH
38367: LD_VAR 0 5
38371: ARRAY
38372: PUSH
38373: LD_INT 1
38375: ARRAY
38376: PPUSH
38377: LD_EXP 132
38381: PUSH
38382: LD_VAR 0 6
38386: ARRAY
38387: PUSH
38388: LD_VAR 0 5
38392: ARRAY
38393: PUSH
38394: LD_INT 2
38396: ARRAY
38397: PPUSH
38398: LD_VAR 0 1
38402: PPUSH
38403: CALL_OW 255
38407: PPUSH
38408: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38412: LD_ADDR_EXP 132
38416: PUSH
38417: LD_EXP 132
38421: PPUSH
38422: LD_VAR 0 6
38426: PPUSH
38427: LD_EXP 132
38431: PUSH
38432: LD_VAR 0 6
38436: ARRAY
38437: PPUSH
38438: LD_VAR 0 5
38442: PPUSH
38443: CALL_OW 3
38447: PPUSH
38448: CALL_OW 1
38452: ST_TO_ADDR
// end ; end ;
38453: GO 38291
38455: POP
38456: POP
// end ;
38457: LD_VAR 0 4
38461: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38462: LD_INT 0
38464: PPUSH
38465: PPUSH
38466: PPUSH
38467: PPUSH
38468: PPUSH
38469: PPUSH
38470: PPUSH
38471: PPUSH
38472: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38473: LD_VAR 0 1
38477: PPUSH
38478: CALL_OW 264
38482: PUSH
38483: LD_INT 81
38485: EQUAL
38486: NOT
38487: PUSH
38488: LD_VAR 0 1
38492: PUSH
38493: LD_EXP 131
38497: IN
38498: NOT
38499: OR
38500: IFFALSE 38504
// exit ;
38502: GO 38826
// index := GetElementIndex ( minersList , unit ) ;
38504: LD_ADDR_VAR 0 6
38508: PUSH
38509: LD_EXP 131
38513: PPUSH
38514: LD_VAR 0 1
38518: PPUSH
38519: CALL 43998 0 2
38523: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38524: LD_ADDR_VAR 0 8
38528: PUSH
38529: LD_EXP 133
38533: PUSH
38534: LD_EXP 132
38538: PUSH
38539: LD_VAR 0 6
38543: ARRAY
38544: MINUS
38545: ST_TO_ADDR
// if not minesFreeAmount then
38546: LD_VAR 0 8
38550: NOT
38551: IFFALSE 38555
// exit ;
38553: GO 38826
// tmp := [ ] ;
38555: LD_ADDR_VAR 0 7
38559: PUSH
38560: EMPTY
38561: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38562: LD_ADDR_VAR 0 5
38566: PUSH
38567: DOUBLE
38568: LD_INT 1
38570: DEC
38571: ST_TO_ADDR
38572: LD_VAR 0 8
38576: PUSH
38577: FOR_TO
38578: IFFALSE 38773
// begin _d := rand ( 0 , 5 ) ;
38580: LD_ADDR_VAR 0 11
38584: PUSH
38585: LD_INT 0
38587: PPUSH
38588: LD_INT 5
38590: PPUSH
38591: CALL_OW 12
38595: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38596: LD_ADDR_VAR 0 12
38600: PUSH
38601: LD_INT 2
38603: PPUSH
38604: LD_INT 6
38606: PPUSH
38607: CALL_OW 12
38611: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38612: LD_ADDR_VAR 0 9
38616: PUSH
38617: LD_VAR 0 2
38621: PPUSH
38622: LD_VAR 0 11
38626: PPUSH
38627: LD_VAR 0 12
38631: PPUSH
38632: CALL_OW 272
38636: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38637: LD_ADDR_VAR 0 10
38641: PUSH
38642: LD_VAR 0 3
38646: PPUSH
38647: LD_VAR 0 11
38651: PPUSH
38652: LD_VAR 0 12
38656: PPUSH
38657: CALL_OW 273
38661: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38662: LD_VAR 0 9
38666: PPUSH
38667: LD_VAR 0 10
38671: PPUSH
38672: CALL_OW 488
38676: PUSH
38677: LD_VAR 0 9
38681: PUSH
38682: LD_VAR 0 10
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_VAR 0 7
38695: IN
38696: NOT
38697: AND
38698: PUSH
38699: LD_VAR 0 9
38703: PPUSH
38704: LD_VAR 0 10
38708: PPUSH
38709: CALL_OW 458
38713: NOT
38714: AND
38715: IFFALSE 38757
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38717: LD_ADDR_VAR 0 7
38721: PUSH
38722: LD_VAR 0 7
38726: PPUSH
38727: LD_VAR 0 7
38731: PUSH
38732: LD_INT 1
38734: PLUS
38735: PPUSH
38736: LD_VAR 0 9
38740: PUSH
38741: LD_VAR 0 10
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PPUSH
38750: CALL_OW 1
38754: ST_TO_ADDR
38755: GO 38771
// i := i - 1 ;
38757: LD_ADDR_VAR 0 5
38761: PUSH
38762: LD_VAR 0 5
38766: PUSH
38767: LD_INT 1
38769: MINUS
38770: ST_TO_ADDR
// end ;
38771: GO 38577
38773: POP
38774: POP
// for i in tmp do
38775: LD_ADDR_VAR 0 5
38779: PUSH
38780: LD_VAR 0 7
38784: PUSH
38785: FOR_IN
38786: IFFALSE 38824
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38788: LD_VAR 0 1
38792: PPUSH
38793: LD_VAR 0 5
38797: PUSH
38798: LD_INT 1
38800: ARRAY
38801: PPUSH
38802: LD_VAR 0 5
38806: PUSH
38807: LD_INT 2
38809: ARRAY
38810: PPUSH
38811: CALL 37770 0 3
38815: NOT
38816: IFFALSE 38822
// exit ;
38818: POP
38819: POP
38820: GO 38826
38822: GO 38785
38824: POP
38825: POP
// end ;
38826: LD_VAR 0 4
38830: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38831: LD_INT 0
38833: PPUSH
38834: PPUSH
38835: PPUSH
38836: PPUSH
38837: PPUSH
38838: PPUSH
38839: PPUSH
// if not GetClass ( unit ) = class_sniper then
38840: LD_VAR 0 1
38844: PPUSH
38845: CALL_OW 257
38849: PUSH
38850: LD_INT 5
38852: EQUAL
38853: NOT
38854: IFFALSE 38858
// exit ;
38856: GO 39246
// dist := 8 ;
38858: LD_ADDR_VAR 0 5
38862: PUSH
38863: LD_INT 8
38865: ST_TO_ADDR
// viewRange := 12 ;
38866: LD_ADDR_VAR 0 7
38870: PUSH
38871: LD_INT 12
38873: ST_TO_ADDR
// side := GetSide ( unit ) ;
38874: LD_ADDR_VAR 0 6
38878: PUSH
38879: LD_VAR 0 1
38883: PPUSH
38884: CALL_OW 255
38888: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38889: LD_INT 61
38891: PPUSH
38892: LD_VAR 0 6
38896: PPUSH
38897: CALL_OW 321
38901: PUSH
38902: LD_INT 2
38904: EQUAL
38905: IFFALSE 38915
// viewRange := 16 ;
38907: LD_ADDR_VAR 0 7
38911: PUSH
38912: LD_INT 16
38914: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38915: LD_VAR 0 1
38919: PPUSH
38920: LD_VAR 0 2
38924: PPUSH
38925: LD_VAR 0 3
38929: PPUSH
38930: CALL_OW 297
38934: PUSH
38935: LD_VAR 0 5
38939: GREATER
38940: IFFALSE 39019
// begin ComMoveXY ( unit , x , y ) ;
38942: LD_VAR 0 1
38946: PPUSH
38947: LD_VAR 0 2
38951: PPUSH
38952: LD_VAR 0 3
38956: PPUSH
38957: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38961: LD_INT 35
38963: PPUSH
38964: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38968: LD_VAR 0 1
38972: PPUSH
38973: LD_VAR 0 2
38977: PPUSH
38978: LD_VAR 0 3
38982: PPUSH
38983: CALL 75353 0 3
38987: NOT
38988: IFFALSE 38992
// exit ;
38990: GO 39246
// until GetDistUnitXY ( unit , x , y ) < dist ;
38992: LD_VAR 0 1
38996: PPUSH
38997: LD_VAR 0 2
39001: PPUSH
39002: LD_VAR 0 3
39006: PPUSH
39007: CALL_OW 297
39011: PUSH
39012: LD_VAR 0 5
39016: LESS
39017: IFFALSE 38961
// end ; ComTurnXY ( unit , x , y ) ;
39019: LD_VAR 0 1
39023: PPUSH
39024: LD_VAR 0 2
39028: PPUSH
39029: LD_VAR 0 3
39033: PPUSH
39034: CALL_OW 118
// wait ( 5 ) ;
39038: LD_INT 5
39040: PPUSH
39041: CALL_OW 67
// _d := GetDir ( unit ) ;
39045: LD_ADDR_VAR 0 10
39049: PUSH
39050: LD_VAR 0 1
39054: PPUSH
39055: CALL_OW 254
39059: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39060: LD_ADDR_VAR 0 8
39064: PUSH
39065: LD_VAR 0 1
39069: PPUSH
39070: CALL_OW 250
39074: PPUSH
39075: LD_VAR 0 10
39079: PPUSH
39080: LD_VAR 0 5
39084: PPUSH
39085: CALL_OW 272
39089: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39090: LD_ADDR_VAR 0 9
39094: PUSH
39095: LD_VAR 0 1
39099: PPUSH
39100: CALL_OW 251
39104: PPUSH
39105: LD_VAR 0 10
39109: PPUSH
39110: LD_VAR 0 5
39114: PPUSH
39115: CALL_OW 273
39119: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39120: LD_VAR 0 8
39124: PPUSH
39125: LD_VAR 0 9
39129: PPUSH
39130: CALL_OW 488
39134: NOT
39135: IFFALSE 39139
// exit ;
39137: GO 39246
// ComAnimCustom ( unit , 1 ) ;
39139: LD_VAR 0 1
39143: PPUSH
39144: LD_INT 1
39146: PPUSH
39147: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39151: LD_VAR 0 8
39155: PPUSH
39156: LD_VAR 0 9
39160: PPUSH
39161: LD_VAR 0 6
39165: PPUSH
39166: LD_VAR 0 7
39170: PPUSH
39171: CALL_OW 330
// repeat wait ( 1 ) ;
39175: LD_INT 1
39177: PPUSH
39178: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39182: LD_VAR 0 1
39186: PPUSH
39187: CALL_OW 316
39191: PUSH
39192: LD_VAR 0 1
39196: PPUSH
39197: CALL_OW 314
39201: OR
39202: PUSH
39203: LD_VAR 0 1
39207: PPUSH
39208: CALL_OW 302
39212: NOT
39213: OR
39214: PUSH
39215: LD_VAR 0 1
39219: PPUSH
39220: CALL_OW 301
39224: OR
39225: IFFALSE 39175
// RemoveSeeing ( _x , _y , side ) ;
39227: LD_VAR 0 8
39231: PPUSH
39232: LD_VAR 0 9
39236: PPUSH
39237: LD_VAR 0 6
39241: PPUSH
39242: CALL_OW 331
// end ; end_of_file
39246: LD_VAR 0 4
39250: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39251: LD_INT 0
39253: PPUSH
39254: PPUSH
// if exist_mode then
39255: LD_VAR 0 2
39259: IFFALSE 39284
// unit := CreateCharacter ( prefix & ident ) else
39261: LD_ADDR_VAR 0 5
39265: PUSH
39266: LD_VAR 0 3
39270: PUSH
39271: LD_VAR 0 1
39275: STR
39276: PPUSH
39277: CALL_OW 34
39281: ST_TO_ADDR
39282: GO 39299
// unit := NewCharacter ( ident ) ;
39284: LD_ADDR_VAR 0 5
39288: PUSH
39289: LD_VAR 0 1
39293: PPUSH
39294: CALL_OW 25
39298: ST_TO_ADDR
// result := unit ;
39299: LD_ADDR_VAR 0 4
39303: PUSH
39304: LD_VAR 0 5
39308: ST_TO_ADDR
// end ;
39309: LD_VAR 0 4
39313: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39314: LD_INT 0
39316: PPUSH
39317: PPUSH
// if not side or not nation then
39318: LD_VAR 0 1
39322: NOT
39323: PUSH
39324: LD_VAR 0 2
39328: NOT
39329: OR
39330: IFFALSE 39334
// exit ;
39332: GO 40102
// case nation of nation_american :
39334: LD_VAR 0 2
39338: PUSH
39339: LD_INT 1
39341: DOUBLE
39342: EQUAL
39343: IFTRUE 39347
39345: GO 39561
39347: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39348: LD_ADDR_VAR 0 4
39352: PUSH
39353: LD_INT 35
39355: PUSH
39356: LD_INT 45
39358: PUSH
39359: LD_INT 46
39361: PUSH
39362: LD_INT 47
39364: PUSH
39365: LD_INT 82
39367: PUSH
39368: LD_INT 83
39370: PUSH
39371: LD_INT 84
39373: PUSH
39374: LD_INT 85
39376: PUSH
39377: LD_INT 86
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: LD_INT 2
39385: PUSH
39386: LD_INT 6
39388: PUSH
39389: LD_INT 15
39391: PUSH
39392: LD_INT 16
39394: PUSH
39395: LD_INT 7
39397: PUSH
39398: LD_INT 12
39400: PUSH
39401: LD_INT 13
39403: PUSH
39404: LD_INT 10
39406: PUSH
39407: LD_INT 14
39409: PUSH
39410: LD_INT 20
39412: PUSH
39413: LD_INT 21
39415: PUSH
39416: LD_INT 22
39418: PUSH
39419: LD_INT 25
39421: PUSH
39422: LD_INT 32
39424: PUSH
39425: LD_INT 27
39427: PUSH
39428: LD_INT 36
39430: PUSH
39431: LD_INT 69
39433: PUSH
39434: LD_INT 39
39436: PUSH
39437: LD_INT 34
39439: PUSH
39440: LD_INT 40
39442: PUSH
39443: LD_INT 48
39445: PUSH
39446: LD_INT 49
39448: PUSH
39449: LD_INT 50
39451: PUSH
39452: LD_INT 51
39454: PUSH
39455: LD_INT 52
39457: PUSH
39458: LD_INT 53
39460: PUSH
39461: LD_INT 54
39463: PUSH
39464: LD_INT 55
39466: PUSH
39467: LD_INT 56
39469: PUSH
39470: LD_INT 57
39472: PUSH
39473: LD_INT 58
39475: PUSH
39476: LD_INT 59
39478: PUSH
39479: LD_INT 60
39481: PUSH
39482: LD_INT 61
39484: PUSH
39485: LD_INT 62
39487: PUSH
39488: LD_INT 80
39490: PUSH
39491: LD_INT 82
39493: PUSH
39494: LD_INT 83
39496: PUSH
39497: LD_INT 84
39499: PUSH
39500: LD_INT 85
39502: PUSH
39503: LD_INT 86
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: ST_TO_ADDR
39559: GO 40026
39561: LD_INT 2
39563: DOUBLE
39564: EQUAL
39565: IFTRUE 39569
39567: GO 39795
39569: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39570: LD_ADDR_VAR 0 4
39574: PUSH
39575: LD_INT 35
39577: PUSH
39578: LD_INT 45
39580: PUSH
39581: LD_INT 46
39583: PUSH
39584: LD_INT 47
39586: PUSH
39587: LD_INT 82
39589: PUSH
39590: LD_INT 83
39592: PUSH
39593: LD_INT 84
39595: PUSH
39596: LD_INT 85
39598: PUSH
39599: LD_INT 87
39601: PUSH
39602: LD_INT 70
39604: PUSH
39605: LD_INT 1
39607: PUSH
39608: LD_INT 11
39610: PUSH
39611: LD_INT 3
39613: PUSH
39614: LD_INT 4
39616: PUSH
39617: LD_INT 5
39619: PUSH
39620: LD_INT 6
39622: PUSH
39623: LD_INT 15
39625: PUSH
39626: LD_INT 18
39628: PUSH
39629: LD_INT 7
39631: PUSH
39632: LD_INT 17
39634: PUSH
39635: LD_INT 8
39637: PUSH
39638: LD_INT 20
39640: PUSH
39641: LD_INT 21
39643: PUSH
39644: LD_INT 22
39646: PUSH
39647: LD_INT 72
39649: PUSH
39650: LD_INT 26
39652: PUSH
39653: LD_INT 69
39655: PUSH
39656: LD_INT 39
39658: PUSH
39659: LD_INT 40
39661: PUSH
39662: LD_INT 41
39664: PUSH
39665: LD_INT 42
39667: PUSH
39668: LD_INT 43
39670: PUSH
39671: LD_INT 48
39673: PUSH
39674: LD_INT 49
39676: PUSH
39677: LD_INT 50
39679: PUSH
39680: LD_INT 51
39682: PUSH
39683: LD_INT 52
39685: PUSH
39686: LD_INT 53
39688: PUSH
39689: LD_INT 54
39691: PUSH
39692: LD_INT 55
39694: PUSH
39695: LD_INT 56
39697: PUSH
39698: LD_INT 60
39700: PUSH
39701: LD_INT 61
39703: PUSH
39704: LD_INT 62
39706: PUSH
39707: LD_INT 66
39709: PUSH
39710: LD_INT 67
39712: PUSH
39713: LD_INT 68
39715: PUSH
39716: LD_INT 81
39718: PUSH
39719: LD_INT 82
39721: PUSH
39722: LD_INT 83
39724: PUSH
39725: LD_INT 84
39727: PUSH
39728: LD_INT 85
39730: PUSH
39731: LD_INT 87
39733: PUSH
39734: LD_INT 88
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: ST_TO_ADDR
39793: GO 40026
39795: LD_INT 3
39797: DOUBLE
39798: EQUAL
39799: IFTRUE 39803
39801: GO 40025
39803: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39804: LD_ADDR_VAR 0 4
39808: PUSH
39809: LD_INT 46
39811: PUSH
39812: LD_INT 47
39814: PUSH
39815: LD_INT 1
39817: PUSH
39818: LD_INT 2
39820: PUSH
39821: LD_INT 82
39823: PUSH
39824: LD_INT 83
39826: PUSH
39827: LD_INT 84
39829: PUSH
39830: LD_INT 85
39832: PUSH
39833: LD_INT 86
39835: PUSH
39836: LD_INT 11
39838: PUSH
39839: LD_INT 9
39841: PUSH
39842: LD_INT 20
39844: PUSH
39845: LD_INT 19
39847: PUSH
39848: LD_INT 21
39850: PUSH
39851: LD_INT 24
39853: PUSH
39854: LD_INT 22
39856: PUSH
39857: LD_INT 25
39859: PUSH
39860: LD_INT 28
39862: PUSH
39863: LD_INT 29
39865: PUSH
39866: LD_INT 30
39868: PUSH
39869: LD_INT 31
39871: PUSH
39872: LD_INT 37
39874: PUSH
39875: LD_INT 38
39877: PUSH
39878: LD_INT 32
39880: PUSH
39881: LD_INT 27
39883: PUSH
39884: LD_INT 33
39886: PUSH
39887: LD_INT 69
39889: PUSH
39890: LD_INT 39
39892: PUSH
39893: LD_INT 34
39895: PUSH
39896: LD_INT 40
39898: PUSH
39899: LD_INT 71
39901: PUSH
39902: LD_INT 23
39904: PUSH
39905: LD_INT 44
39907: PUSH
39908: LD_INT 48
39910: PUSH
39911: LD_INT 49
39913: PUSH
39914: LD_INT 50
39916: PUSH
39917: LD_INT 51
39919: PUSH
39920: LD_INT 52
39922: PUSH
39923: LD_INT 53
39925: PUSH
39926: LD_INT 54
39928: PUSH
39929: LD_INT 55
39931: PUSH
39932: LD_INT 56
39934: PUSH
39935: LD_INT 57
39937: PUSH
39938: LD_INT 58
39940: PUSH
39941: LD_INT 59
39943: PUSH
39944: LD_INT 63
39946: PUSH
39947: LD_INT 64
39949: PUSH
39950: LD_INT 65
39952: PUSH
39953: LD_INT 82
39955: PUSH
39956: LD_INT 83
39958: PUSH
39959: LD_INT 84
39961: PUSH
39962: LD_INT 85
39964: PUSH
39965: LD_INT 86
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: ST_TO_ADDR
40023: GO 40026
40025: POP
// if state > - 1 and state < 3 then
40026: LD_VAR 0 3
40030: PUSH
40031: LD_INT 1
40033: NEG
40034: GREATER
40035: PUSH
40036: LD_VAR 0 3
40040: PUSH
40041: LD_INT 3
40043: LESS
40044: AND
40045: IFFALSE 40102
// for i in result do
40047: LD_ADDR_VAR 0 5
40051: PUSH
40052: LD_VAR 0 4
40056: PUSH
40057: FOR_IN
40058: IFFALSE 40100
// if GetTech ( i , side ) <> state then
40060: LD_VAR 0 5
40064: PPUSH
40065: LD_VAR 0 1
40069: PPUSH
40070: CALL_OW 321
40074: PUSH
40075: LD_VAR 0 3
40079: NONEQUAL
40080: IFFALSE 40098
// result := result diff i ;
40082: LD_ADDR_VAR 0 4
40086: PUSH
40087: LD_VAR 0 4
40091: PUSH
40092: LD_VAR 0 5
40096: DIFF
40097: ST_TO_ADDR
40098: GO 40057
40100: POP
40101: POP
// end ;
40102: LD_VAR 0 4
40106: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40107: LD_INT 0
40109: PPUSH
40110: PPUSH
40111: PPUSH
// result := true ;
40112: LD_ADDR_VAR 0 3
40116: PUSH
40117: LD_INT 1
40119: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40120: LD_ADDR_VAR 0 5
40124: PUSH
40125: LD_VAR 0 2
40129: PPUSH
40130: CALL_OW 480
40134: ST_TO_ADDR
// if not tmp then
40135: LD_VAR 0 5
40139: NOT
40140: IFFALSE 40144
// exit ;
40142: GO 40193
// for i in tmp do
40144: LD_ADDR_VAR 0 4
40148: PUSH
40149: LD_VAR 0 5
40153: PUSH
40154: FOR_IN
40155: IFFALSE 40191
// if GetTech ( i , side ) <> state_researched then
40157: LD_VAR 0 4
40161: PPUSH
40162: LD_VAR 0 1
40166: PPUSH
40167: CALL_OW 321
40171: PUSH
40172: LD_INT 2
40174: NONEQUAL
40175: IFFALSE 40189
// begin result := false ;
40177: LD_ADDR_VAR 0 3
40181: PUSH
40182: LD_INT 0
40184: ST_TO_ADDR
// exit ;
40185: POP
40186: POP
40187: GO 40193
// end ;
40189: GO 40154
40191: POP
40192: POP
// end ;
40193: LD_VAR 0 3
40197: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40198: LD_INT 0
40200: PPUSH
40201: PPUSH
40202: PPUSH
40203: PPUSH
40204: PPUSH
40205: PPUSH
40206: PPUSH
40207: PPUSH
40208: PPUSH
40209: PPUSH
40210: PPUSH
40211: PPUSH
40212: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40213: LD_VAR 0 1
40217: NOT
40218: PUSH
40219: LD_VAR 0 1
40223: PPUSH
40224: CALL_OW 257
40228: PUSH
40229: LD_INT 9
40231: NONEQUAL
40232: OR
40233: IFFALSE 40237
// exit ;
40235: GO 40810
// side := GetSide ( unit ) ;
40237: LD_ADDR_VAR 0 9
40241: PUSH
40242: LD_VAR 0 1
40246: PPUSH
40247: CALL_OW 255
40251: ST_TO_ADDR
// tech_space := tech_spacanom ;
40252: LD_ADDR_VAR 0 12
40256: PUSH
40257: LD_INT 29
40259: ST_TO_ADDR
// tech_time := tech_taurad ;
40260: LD_ADDR_VAR 0 13
40264: PUSH
40265: LD_INT 28
40267: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40268: LD_ADDR_VAR 0 11
40272: PUSH
40273: LD_VAR 0 1
40277: PPUSH
40278: CALL_OW 310
40282: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40283: LD_VAR 0 11
40287: PPUSH
40288: CALL_OW 247
40292: PUSH
40293: LD_INT 2
40295: EQUAL
40296: IFFALSE 40300
// exit ;
40298: GO 40810
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40300: LD_ADDR_VAR 0 8
40304: PUSH
40305: LD_INT 81
40307: PUSH
40308: LD_VAR 0 9
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 3
40319: PUSH
40320: LD_INT 21
40322: PUSH
40323: LD_INT 3
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PPUSH
40338: CALL_OW 69
40342: ST_TO_ADDR
// if not tmp then
40343: LD_VAR 0 8
40347: NOT
40348: IFFALSE 40352
// exit ;
40350: GO 40810
// if in_unit then
40352: LD_VAR 0 11
40356: IFFALSE 40380
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40358: LD_ADDR_VAR 0 10
40362: PUSH
40363: LD_VAR 0 8
40367: PPUSH
40368: LD_VAR 0 11
40372: PPUSH
40373: CALL_OW 74
40377: ST_TO_ADDR
40378: GO 40400
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40380: LD_ADDR_VAR 0 10
40384: PUSH
40385: LD_VAR 0 8
40389: PPUSH
40390: LD_VAR 0 1
40394: PPUSH
40395: CALL_OW 74
40399: ST_TO_ADDR
// if not enemy then
40400: LD_VAR 0 10
40404: NOT
40405: IFFALSE 40409
// exit ;
40407: GO 40810
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40409: LD_VAR 0 11
40413: PUSH
40414: LD_VAR 0 11
40418: PPUSH
40419: LD_VAR 0 10
40423: PPUSH
40424: CALL_OW 296
40428: PUSH
40429: LD_INT 13
40431: GREATER
40432: AND
40433: PUSH
40434: LD_VAR 0 1
40438: PPUSH
40439: LD_VAR 0 10
40443: PPUSH
40444: CALL_OW 296
40448: PUSH
40449: LD_INT 12
40451: GREATER
40452: OR
40453: IFFALSE 40457
// exit ;
40455: GO 40810
// missile := [ 1 ] ;
40457: LD_ADDR_VAR 0 14
40461: PUSH
40462: LD_INT 1
40464: PUSH
40465: EMPTY
40466: LIST
40467: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40468: LD_VAR 0 9
40472: PPUSH
40473: LD_VAR 0 12
40477: PPUSH
40478: CALL_OW 325
40482: IFFALSE 40511
// missile := Replace ( missile , missile + 1 , 2 ) ;
40484: LD_ADDR_VAR 0 14
40488: PUSH
40489: LD_VAR 0 14
40493: PPUSH
40494: LD_VAR 0 14
40498: PUSH
40499: LD_INT 1
40501: PLUS
40502: PPUSH
40503: LD_INT 2
40505: PPUSH
40506: CALL_OW 1
40510: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40511: LD_VAR 0 9
40515: PPUSH
40516: LD_VAR 0 13
40520: PPUSH
40521: CALL_OW 325
40525: PUSH
40526: LD_VAR 0 10
40530: PPUSH
40531: CALL_OW 255
40535: PPUSH
40536: LD_VAR 0 13
40540: PPUSH
40541: CALL_OW 325
40545: NOT
40546: AND
40547: IFFALSE 40576
// missile := Replace ( missile , missile + 1 , 3 ) ;
40549: LD_ADDR_VAR 0 14
40553: PUSH
40554: LD_VAR 0 14
40558: PPUSH
40559: LD_VAR 0 14
40563: PUSH
40564: LD_INT 1
40566: PLUS
40567: PPUSH
40568: LD_INT 3
40570: PPUSH
40571: CALL_OW 1
40575: ST_TO_ADDR
// if missile < 2 then
40576: LD_VAR 0 14
40580: PUSH
40581: LD_INT 2
40583: LESS
40584: IFFALSE 40588
// exit ;
40586: GO 40810
// x := GetX ( enemy ) ;
40588: LD_ADDR_VAR 0 4
40592: PUSH
40593: LD_VAR 0 10
40597: PPUSH
40598: CALL_OW 250
40602: ST_TO_ADDR
// y := GetY ( enemy ) ;
40603: LD_ADDR_VAR 0 5
40607: PUSH
40608: LD_VAR 0 10
40612: PPUSH
40613: CALL_OW 251
40617: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40618: LD_ADDR_VAR 0 6
40622: PUSH
40623: LD_VAR 0 4
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: PPUSH
40632: LD_INT 1
40634: PPUSH
40635: CALL_OW 12
40639: PLUS
40640: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40641: LD_ADDR_VAR 0 7
40645: PUSH
40646: LD_VAR 0 5
40650: PUSH
40651: LD_INT 1
40653: NEG
40654: PPUSH
40655: LD_INT 1
40657: PPUSH
40658: CALL_OW 12
40662: PLUS
40663: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40664: LD_VAR 0 6
40668: PPUSH
40669: LD_VAR 0 7
40673: PPUSH
40674: CALL_OW 488
40678: NOT
40679: IFFALSE 40701
// begin _x := x ;
40681: LD_ADDR_VAR 0 6
40685: PUSH
40686: LD_VAR 0 4
40690: ST_TO_ADDR
// _y := y ;
40691: LD_ADDR_VAR 0 7
40695: PUSH
40696: LD_VAR 0 5
40700: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40701: LD_ADDR_VAR 0 3
40705: PUSH
40706: LD_INT 1
40708: PPUSH
40709: LD_VAR 0 14
40713: PPUSH
40714: CALL_OW 12
40718: ST_TO_ADDR
// case i of 1 :
40719: LD_VAR 0 3
40723: PUSH
40724: LD_INT 1
40726: DOUBLE
40727: EQUAL
40728: IFTRUE 40732
40730: GO 40749
40732: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40733: LD_VAR 0 1
40737: PPUSH
40738: LD_VAR 0 10
40742: PPUSH
40743: CALL_OW 115
40747: GO 40810
40749: LD_INT 2
40751: DOUBLE
40752: EQUAL
40753: IFTRUE 40757
40755: GO 40779
40757: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40758: LD_VAR 0 1
40762: PPUSH
40763: LD_VAR 0 6
40767: PPUSH
40768: LD_VAR 0 7
40772: PPUSH
40773: CALL_OW 153
40777: GO 40810
40779: LD_INT 3
40781: DOUBLE
40782: EQUAL
40783: IFTRUE 40787
40785: GO 40809
40787: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40788: LD_VAR 0 1
40792: PPUSH
40793: LD_VAR 0 6
40797: PPUSH
40798: LD_VAR 0 7
40802: PPUSH
40803: CALL_OW 154
40807: GO 40810
40809: POP
// end ;
40810: LD_VAR 0 2
40814: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40815: LD_INT 0
40817: PPUSH
40818: PPUSH
40819: PPUSH
40820: PPUSH
40821: PPUSH
40822: PPUSH
// if not unit or not building then
40823: LD_VAR 0 1
40827: NOT
40828: PUSH
40829: LD_VAR 0 2
40833: NOT
40834: OR
40835: IFFALSE 40839
// exit ;
40837: GO 40997
// x := GetX ( building ) ;
40839: LD_ADDR_VAR 0 5
40843: PUSH
40844: LD_VAR 0 2
40848: PPUSH
40849: CALL_OW 250
40853: ST_TO_ADDR
// y := GetY ( building ) ;
40854: LD_ADDR_VAR 0 6
40858: PUSH
40859: LD_VAR 0 2
40863: PPUSH
40864: CALL_OW 251
40868: ST_TO_ADDR
// for i = 0 to 5 do
40869: LD_ADDR_VAR 0 4
40873: PUSH
40874: DOUBLE
40875: LD_INT 0
40877: DEC
40878: ST_TO_ADDR
40879: LD_INT 5
40881: PUSH
40882: FOR_TO
40883: IFFALSE 40995
// begin _x := ShiftX ( x , i , 3 ) ;
40885: LD_ADDR_VAR 0 7
40889: PUSH
40890: LD_VAR 0 5
40894: PPUSH
40895: LD_VAR 0 4
40899: PPUSH
40900: LD_INT 3
40902: PPUSH
40903: CALL_OW 272
40907: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40908: LD_ADDR_VAR 0 8
40912: PUSH
40913: LD_VAR 0 6
40917: PPUSH
40918: LD_VAR 0 4
40922: PPUSH
40923: LD_INT 3
40925: PPUSH
40926: CALL_OW 273
40930: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40931: LD_VAR 0 7
40935: PPUSH
40936: LD_VAR 0 8
40940: PPUSH
40941: CALL_OW 488
40945: NOT
40946: IFFALSE 40950
// continue ;
40948: GO 40882
// if HexInfo ( _x , _y ) = 0 then
40950: LD_VAR 0 7
40954: PPUSH
40955: LD_VAR 0 8
40959: PPUSH
40960: CALL_OW 428
40964: PUSH
40965: LD_INT 0
40967: EQUAL
40968: IFFALSE 40993
// begin ComMoveXY ( unit , _x , _y ) ;
40970: LD_VAR 0 1
40974: PPUSH
40975: LD_VAR 0 7
40979: PPUSH
40980: LD_VAR 0 8
40984: PPUSH
40985: CALL_OW 111
// exit ;
40989: POP
40990: POP
40991: GO 40997
// end ; end ;
40993: GO 40882
40995: POP
40996: POP
// end ;
40997: LD_VAR 0 3
41001: RET
// export function ScanBase ( side , base_area ) ; begin
41002: LD_INT 0
41004: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41005: LD_ADDR_VAR 0 3
41009: PUSH
41010: LD_VAR 0 2
41014: PPUSH
41015: LD_INT 81
41017: PUSH
41018: LD_VAR 0 1
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PPUSH
41027: CALL_OW 70
41031: ST_TO_ADDR
// end ;
41032: LD_VAR 0 3
41036: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41037: LD_INT 0
41039: PPUSH
41040: PPUSH
41041: PPUSH
41042: PPUSH
// result := false ;
41043: LD_ADDR_VAR 0 2
41047: PUSH
41048: LD_INT 0
41050: ST_TO_ADDR
// side := GetSide ( unit ) ;
41051: LD_ADDR_VAR 0 3
41055: PUSH
41056: LD_VAR 0 1
41060: PPUSH
41061: CALL_OW 255
41065: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41066: LD_ADDR_VAR 0 4
41070: PUSH
41071: LD_VAR 0 1
41075: PPUSH
41076: CALL_OW 248
41080: ST_TO_ADDR
// case nat of 1 :
41081: LD_VAR 0 4
41085: PUSH
41086: LD_INT 1
41088: DOUBLE
41089: EQUAL
41090: IFTRUE 41094
41092: GO 41105
41094: POP
// tech := tech_lassight ; 2 :
41095: LD_ADDR_VAR 0 5
41099: PUSH
41100: LD_INT 12
41102: ST_TO_ADDR
41103: GO 41144
41105: LD_INT 2
41107: DOUBLE
41108: EQUAL
41109: IFTRUE 41113
41111: GO 41124
41113: POP
// tech := tech_mortar ; 3 :
41114: LD_ADDR_VAR 0 5
41118: PUSH
41119: LD_INT 41
41121: ST_TO_ADDR
41122: GO 41144
41124: LD_INT 3
41126: DOUBLE
41127: EQUAL
41128: IFTRUE 41132
41130: GO 41143
41132: POP
// tech := tech_bazooka ; end ;
41133: LD_ADDR_VAR 0 5
41137: PUSH
41138: LD_INT 44
41140: ST_TO_ADDR
41141: GO 41144
41143: POP
// if Researched ( side , tech ) then
41144: LD_VAR 0 3
41148: PPUSH
41149: LD_VAR 0 5
41153: PPUSH
41154: CALL_OW 325
41158: IFFALSE 41185
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41160: LD_ADDR_VAR 0 2
41164: PUSH
41165: LD_INT 5
41167: PUSH
41168: LD_INT 8
41170: PUSH
41171: LD_INT 9
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: LIST
41178: PUSH
41179: LD_VAR 0 4
41183: ARRAY
41184: ST_TO_ADDR
// end ;
41185: LD_VAR 0 2
41189: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41190: LD_INT 0
41192: PPUSH
41193: PPUSH
41194: PPUSH
// if not mines then
41195: LD_VAR 0 2
41199: NOT
41200: IFFALSE 41204
// exit ;
41202: GO 41348
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41204: LD_ADDR_VAR 0 5
41208: PUSH
41209: LD_INT 81
41211: PUSH
41212: LD_VAR 0 1
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 3
41223: PUSH
41224: LD_INT 21
41226: PUSH
41227: LD_INT 3
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PPUSH
41242: CALL_OW 69
41246: ST_TO_ADDR
// for i in mines do
41247: LD_ADDR_VAR 0 4
41251: PUSH
41252: LD_VAR 0 2
41256: PUSH
41257: FOR_IN
41258: IFFALSE 41346
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41260: LD_VAR 0 4
41264: PUSH
41265: LD_INT 1
41267: ARRAY
41268: PPUSH
41269: LD_VAR 0 4
41273: PUSH
41274: LD_INT 2
41276: ARRAY
41277: PPUSH
41278: CALL_OW 458
41282: NOT
41283: IFFALSE 41287
// continue ;
41285: GO 41257
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41287: LD_VAR 0 4
41291: PUSH
41292: LD_INT 1
41294: ARRAY
41295: PPUSH
41296: LD_VAR 0 4
41300: PUSH
41301: LD_INT 2
41303: ARRAY
41304: PPUSH
41305: CALL_OW 428
41309: PUSH
41310: LD_VAR 0 5
41314: IN
41315: IFFALSE 41344
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41317: LD_VAR 0 4
41321: PUSH
41322: LD_INT 1
41324: ARRAY
41325: PPUSH
41326: LD_VAR 0 4
41330: PUSH
41331: LD_INT 2
41333: ARRAY
41334: PPUSH
41335: LD_VAR 0 1
41339: PPUSH
41340: CALL_OW 456
// end ;
41344: GO 41257
41346: POP
41347: POP
// end ;
41348: LD_VAR 0 3
41352: RET
// export function Count ( array ) ; begin
41353: LD_INT 0
41355: PPUSH
// result := array + 0 ;
41356: LD_ADDR_VAR 0 2
41360: PUSH
41361: LD_VAR 0 1
41365: PUSH
41366: LD_INT 0
41368: PLUS
41369: ST_TO_ADDR
// end ;
41370: LD_VAR 0 2
41374: RET
// export function IsEmpty ( building ) ; begin
41375: LD_INT 0
41377: PPUSH
// if not building then
41378: LD_VAR 0 1
41382: NOT
41383: IFFALSE 41387
// exit ;
41385: GO 41430
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41387: LD_ADDR_VAR 0 2
41391: PUSH
41392: LD_VAR 0 1
41396: PUSH
41397: LD_INT 22
41399: PUSH
41400: LD_VAR 0 1
41404: PPUSH
41405: CALL_OW 255
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 58
41416: PUSH
41417: EMPTY
41418: LIST
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PPUSH
41424: CALL_OW 69
41428: IN
41429: ST_TO_ADDR
// end ;
41430: LD_VAR 0 2
41434: RET
// export function IsNotFull ( building ) ; var places ; begin
41435: LD_INT 0
41437: PPUSH
41438: PPUSH
// if not building then
41439: LD_VAR 0 1
41443: NOT
41444: IFFALSE 41448
// exit ;
41446: GO 41476
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
41448: LD_ADDR_VAR 0 2
41452: PUSH
41453: LD_VAR 0 1
41457: PPUSH
41458: LD_INT 3
41460: PUSH
41461: LD_INT 62
41463: PUSH
41464: EMPTY
41465: LIST
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PPUSH
41471: CALL_OW 72
41475: ST_TO_ADDR
// end ;
41476: LD_VAR 0 2
41480: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41481: LD_INT 0
41483: PPUSH
41484: PPUSH
41485: PPUSH
41486: PPUSH
// tmp := [ ] ;
41487: LD_ADDR_VAR 0 3
41491: PUSH
41492: EMPTY
41493: ST_TO_ADDR
// list := [ ] ;
41494: LD_ADDR_VAR 0 5
41498: PUSH
41499: EMPTY
41500: ST_TO_ADDR
// for i = 16 to 25 do
41501: LD_ADDR_VAR 0 4
41505: PUSH
41506: DOUBLE
41507: LD_INT 16
41509: DEC
41510: ST_TO_ADDR
41511: LD_INT 25
41513: PUSH
41514: FOR_TO
41515: IFFALSE 41588
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41517: LD_ADDR_VAR 0 3
41521: PUSH
41522: LD_VAR 0 3
41526: PUSH
41527: LD_INT 22
41529: PUSH
41530: LD_VAR 0 1
41534: PPUSH
41535: CALL_OW 255
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 91
41546: PUSH
41547: LD_VAR 0 1
41551: PUSH
41552: LD_INT 6
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 30
41562: PUSH
41563: LD_VAR 0 4
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: LIST
41576: PUSH
41577: EMPTY
41578: LIST
41579: PPUSH
41580: CALL_OW 69
41584: ADD
41585: ST_TO_ADDR
41586: GO 41514
41588: POP
41589: POP
// for i = 1 to tmp do
41590: LD_ADDR_VAR 0 4
41594: PUSH
41595: DOUBLE
41596: LD_INT 1
41598: DEC
41599: ST_TO_ADDR
41600: LD_VAR 0 3
41604: PUSH
41605: FOR_TO
41606: IFFALSE 41694
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41608: LD_ADDR_VAR 0 5
41612: PUSH
41613: LD_VAR 0 5
41617: PUSH
41618: LD_VAR 0 3
41622: PUSH
41623: LD_VAR 0 4
41627: ARRAY
41628: PPUSH
41629: CALL_OW 266
41633: PUSH
41634: LD_VAR 0 3
41638: PUSH
41639: LD_VAR 0 4
41643: ARRAY
41644: PPUSH
41645: CALL_OW 250
41649: PUSH
41650: LD_VAR 0 3
41654: PUSH
41655: LD_VAR 0 4
41659: ARRAY
41660: PPUSH
41661: CALL_OW 251
41665: PUSH
41666: LD_VAR 0 3
41670: PUSH
41671: LD_VAR 0 4
41675: ARRAY
41676: PPUSH
41677: CALL_OW 254
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: PUSH
41688: EMPTY
41689: LIST
41690: ADD
41691: ST_TO_ADDR
41692: GO 41605
41694: POP
41695: POP
// result := list ;
41696: LD_ADDR_VAR 0 2
41700: PUSH
41701: LD_VAR 0 5
41705: ST_TO_ADDR
// end ;
41706: LD_VAR 0 2
41710: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41711: LD_INT 0
41713: PPUSH
41714: PPUSH
41715: PPUSH
41716: PPUSH
41717: PPUSH
41718: PPUSH
41719: PPUSH
// if not factory then
41720: LD_VAR 0 1
41724: NOT
41725: IFFALSE 41729
// exit ;
41727: GO 42322
// if control = control_apeman then
41729: LD_VAR 0 4
41733: PUSH
41734: LD_INT 5
41736: EQUAL
41737: IFFALSE 41846
// begin tmp := UnitsInside ( factory ) ;
41739: LD_ADDR_VAR 0 8
41743: PUSH
41744: LD_VAR 0 1
41748: PPUSH
41749: CALL_OW 313
41753: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41754: LD_VAR 0 8
41758: PPUSH
41759: LD_INT 25
41761: PUSH
41762: LD_INT 12
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PPUSH
41769: CALL_OW 72
41773: NOT
41774: IFFALSE 41784
// control := control_manual ;
41776: LD_ADDR_VAR 0 4
41780: PUSH
41781: LD_INT 1
41783: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41784: LD_ADDR_VAR 0 8
41788: PUSH
41789: LD_VAR 0 1
41793: PPUSH
41794: CALL 41481 0 1
41798: ST_TO_ADDR
// if tmp then
41799: LD_VAR 0 8
41803: IFFALSE 41846
// begin for i in tmp do
41805: LD_ADDR_VAR 0 7
41809: PUSH
41810: LD_VAR 0 8
41814: PUSH
41815: FOR_IN
41816: IFFALSE 41844
// if i [ 1 ] = b_ext_radio then
41818: LD_VAR 0 7
41822: PUSH
41823: LD_INT 1
41825: ARRAY
41826: PUSH
41827: LD_INT 22
41829: EQUAL
41830: IFFALSE 41842
// begin control := control_remote ;
41832: LD_ADDR_VAR 0 4
41836: PUSH
41837: LD_INT 2
41839: ST_TO_ADDR
// break ;
41840: GO 41844
// end ;
41842: GO 41815
41844: POP
41845: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41846: LD_VAR 0 1
41850: PPUSH
41851: LD_VAR 0 2
41855: PPUSH
41856: LD_VAR 0 3
41860: PPUSH
41861: LD_VAR 0 4
41865: PPUSH
41866: LD_VAR 0 5
41870: PPUSH
41871: CALL_OW 448
41875: IFFALSE 41910
// begin result := [ chassis , engine , control , weapon ] ;
41877: LD_ADDR_VAR 0 6
41881: PUSH
41882: LD_VAR 0 2
41886: PUSH
41887: LD_VAR 0 3
41891: PUSH
41892: LD_VAR 0 4
41896: PUSH
41897: LD_VAR 0 5
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: ST_TO_ADDR
// exit ;
41908: GO 42322
// end ; _chassis := AvailableChassisList ( factory ) ;
41910: LD_ADDR_VAR 0 9
41914: PUSH
41915: LD_VAR 0 1
41919: PPUSH
41920: CALL_OW 475
41924: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41925: LD_ADDR_VAR 0 11
41929: PUSH
41930: LD_VAR 0 1
41934: PPUSH
41935: CALL_OW 476
41939: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41940: LD_ADDR_VAR 0 12
41944: PUSH
41945: LD_VAR 0 1
41949: PPUSH
41950: CALL_OW 477
41954: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41955: LD_ADDR_VAR 0 10
41959: PUSH
41960: LD_VAR 0 1
41964: PPUSH
41965: CALL_OW 478
41969: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41970: LD_VAR 0 9
41974: NOT
41975: PUSH
41976: LD_VAR 0 11
41980: NOT
41981: OR
41982: PUSH
41983: LD_VAR 0 12
41987: NOT
41988: OR
41989: PUSH
41990: LD_VAR 0 10
41994: NOT
41995: OR
41996: IFFALSE 42031
// begin result := [ chassis , engine , control , weapon ] ;
41998: LD_ADDR_VAR 0 6
42002: PUSH
42003: LD_VAR 0 2
42007: PUSH
42008: LD_VAR 0 3
42012: PUSH
42013: LD_VAR 0 4
42017: PUSH
42018: LD_VAR 0 5
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: ST_TO_ADDR
// exit ;
42029: GO 42322
// end ; if not chassis in _chassis then
42031: LD_VAR 0 2
42035: PUSH
42036: LD_VAR 0 9
42040: IN
42041: NOT
42042: IFFALSE 42068
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42044: LD_ADDR_VAR 0 2
42048: PUSH
42049: LD_VAR 0 9
42053: PUSH
42054: LD_INT 1
42056: PPUSH
42057: LD_VAR 0 9
42061: PPUSH
42062: CALL_OW 12
42066: ARRAY
42067: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42068: LD_VAR 0 2
42072: PPUSH
42073: LD_VAR 0 3
42077: PPUSH
42078: CALL 42327 0 2
42082: NOT
42083: IFFALSE 42142
// repeat engine := _engine [ 1 ] ;
42085: LD_ADDR_VAR 0 3
42089: PUSH
42090: LD_VAR 0 11
42094: PUSH
42095: LD_INT 1
42097: ARRAY
42098: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42099: LD_ADDR_VAR 0 11
42103: PUSH
42104: LD_VAR 0 11
42108: PPUSH
42109: LD_INT 1
42111: PPUSH
42112: CALL_OW 3
42116: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42117: LD_VAR 0 2
42121: PPUSH
42122: LD_VAR 0 3
42126: PPUSH
42127: CALL 42327 0 2
42131: PUSH
42132: LD_VAR 0 11
42136: PUSH
42137: EMPTY
42138: EQUAL
42139: OR
42140: IFFALSE 42085
// if not control in _control then
42142: LD_VAR 0 4
42146: PUSH
42147: LD_VAR 0 12
42151: IN
42152: NOT
42153: IFFALSE 42179
// control := _control [ rand ( 1 , _control ) ] ;
42155: LD_ADDR_VAR 0 4
42159: PUSH
42160: LD_VAR 0 12
42164: PUSH
42165: LD_INT 1
42167: PPUSH
42168: LD_VAR 0 12
42172: PPUSH
42173: CALL_OW 12
42177: ARRAY
42178: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42179: LD_VAR 0 2
42183: PPUSH
42184: LD_VAR 0 5
42188: PPUSH
42189: CALL 42547 0 2
42193: NOT
42194: IFFALSE 42253
// repeat weapon := _weapon [ 1 ] ;
42196: LD_ADDR_VAR 0 5
42200: PUSH
42201: LD_VAR 0 10
42205: PUSH
42206: LD_INT 1
42208: ARRAY
42209: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42210: LD_ADDR_VAR 0 10
42214: PUSH
42215: LD_VAR 0 10
42219: PPUSH
42220: LD_INT 1
42222: PPUSH
42223: CALL_OW 3
42227: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42228: LD_VAR 0 2
42232: PPUSH
42233: LD_VAR 0 5
42237: PPUSH
42238: CALL 42547 0 2
42242: PUSH
42243: LD_VAR 0 10
42247: PUSH
42248: EMPTY
42249: EQUAL
42250: OR
42251: IFFALSE 42196
// result := [ ] ;
42253: LD_ADDR_VAR 0 6
42257: PUSH
42258: EMPTY
42259: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42260: LD_VAR 0 1
42264: PPUSH
42265: LD_VAR 0 2
42269: PPUSH
42270: LD_VAR 0 3
42274: PPUSH
42275: LD_VAR 0 4
42279: PPUSH
42280: LD_VAR 0 5
42284: PPUSH
42285: CALL_OW 448
42289: IFFALSE 42322
// result := [ chassis , engine , control , weapon ] ;
42291: LD_ADDR_VAR 0 6
42295: PUSH
42296: LD_VAR 0 2
42300: PUSH
42301: LD_VAR 0 3
42305: PUSH
42306: LD_VAR 0 4
42310: PUSH
42311: LD_VAR 0 5
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: ST_TO_ADDR
// end ;
42322: LD_VAR 0 6
42326: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42327: LD_INT 0
42329: PPUSH
// if not chassis or not engine then
42330: LD_VAR 0 1
42334: NOT
42335: PUSH
42336: LD_VAR 0 2
42340: NOT
42341: OR
42342: IFFALSE 42346
// exit ;
42344: GO 42542
// case engine of engine_solar :
42346: LD_VAR 0 2
42350: PUSH
42351: LD_INT 2
42353: DOUBLE
42354: EQUAL
42355: IFTRUE 42359
42357: GO 42397
42359: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42360: LD_ADDR_VAR 0 3
42364: PUSH
42365: LD_INT 11
42367: PUSH
42368: LD_INT 12
42370: PUSH
42371: LD_INT 13
42373: PUSH
42374: LD_INT 14
42376: PUSH
42377: LD_INT 1
42379: PUSH
42380: LD_INT 2
42382: PUSH
42383: LD_INT 3
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: ST_TO_ADDR
42395: GO 42526
42397: LD_INT 1
42399: DOUBLE
42400: EQUAL
42401: IFTRUE 42405
42403: GO 42467
42405: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42406: LD_ADDR_VAR 0 3
42410: PUSH
42411: LD_INT 11
42413: PUSH
42414: LD_INT 12
42416: PUSH
42417: LD_INT 13
42419: PUSH
42420: LD_INT 14
42422: PUSH
42423: LD_INT 1
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: LD_INT 3
42431: PUSH
42432: LD_INT 4
42434: PUSH
42435: LD_INT 5
42437: PUSH
42438: LD_INT 21
42440: PUSH
42441: LD_INT 23
42443: PUSH
42444: LD_INT 22
42446: PUSH
42447: LD_INT 24
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: ST_TO_ADDR
42465: GO 42526
42467: LD_INT 3
42469: DOUBLE
42470: EQUAL
42471: IFTRUE 42475
42473: GO 42525
42475: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42476: LD_ADDR_VAR 0 3
42480: PUSH
42481: LD_INT 13
42483: PUSH
42484: LD_INT 14
42486: PUSH
42487: LD_INT 2
42489: PUSH
42490: LD_INT 3
42492: PUSH
42493: LD_INT 4
42495: PUSH
42496: LD_INT 5
42498: PUSH
42499: LD_INT 21
42501: PUSH
42502: LD_INT 22
42504: PUSH
42505: LD_INT 23
42507: PUSH
42508: LD_INT 24
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: ST_TO_ADDR
42523: GO 42526
42525: POP
// result := ( chassis in result ) ;
42526: LD_ADDR_VAR 0 3
42530: PUSH
42531: LD_VAR 0 1
42535: PUSH
42536: LD_VAR 0 3
42540: IN
42541: ST_TO_ADDR
// end ;
42542: LD_VAR 0 3
42546: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42547: LD_INT 0
42549: PPUSH
// if not chassis or not weapon then
42550: LD_VAR 0 1
42554: NOT
42555: PUSH
42556: LD_VAR 0 2
42560: NOT
42561: OR
42562: IFFALSE 42566
// exit ;
42564: GO 43626
// case weapon of us_machine_gun :
42566: LD_VAR 0 2
42570: PUSH
42571: LD_INT 2
42573: DOUBLE
42574: EQUAL
42575: IFTRUE 42579
42577: GO 42609
42579: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42580: LD_ADDR_VAR 0 3
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: LD_INT 3
42593: PUSH
42594: LD_INT 4
42596: PUSH
42597: LD_INT 5
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: ST_TO_ADDR
42607: GO 43610
42609: LD_INT 3
42611: DOUBLE
42612: EQUAL
42613: IFTRUE 42617
42615: GO 42647
42617: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42618: LD_ADDR_VAR 0 3
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: LD_INT 3
42631: PUSH
42632: LD_INT 4
42634: PUSH
42635: LD_INT 5
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: ST_TO_ADDR
42645: GO 43610
42647: LD_INT 11
42649: DOUBLE
42650: EQUAL
42651: IFTRUE 42655
42653: GO 42685
42655: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42656: LD_ADDR_VAR 0 3
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 2
42666: PUSH
42667: LD_INT 3
42669: PUSH
42670: LD_INT 4
42672: PUSH
42673: LD_INT 5
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: ST_TO_ADDR
42683: GO 43610
42685: LD_INT 4
42687: DOUBLE
42688: EQUAL
42689: IFTRUE 42693
42691: GO 42719
42693: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42694: LD_ADDR_VAR 0 3
42698: PUSH
42699: LD_INT 2
42701: PUSH
42702: LD_INT 3
42704: PUSH
42705: LD_INT 4
42707: PUSH
42708: LD_INT 5
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: ST_TO_ADDR
42717: GO 43610
42719: LD_INT 5
42721: DOUBLE
42722: EQUAL
42723: IFTRUE 42727
42725: GO 42753
42727: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42728: LD_ADDR_VAR 0 3
42732: PUSH
42733: LD_INT 2
42735: PUSH
42736: LD_INT 3
42738: PUSH
42739: LD_INT 4
42741: PUSH
42742: LD_INT 5
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: ST_TO_ADDR
42751: GO 43610
42753: LD_INT 9
42755: DOUBLE
42756: EQUAL
42757: IFTRUE 42761
42759: GO 42787
42761: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42762: LD_ADDR_VAR 0 3
42766: PUSH
42767: LD_INT 2
42769: PUSH
42770: LD_INT 3
42772: PUSH
42773: LD_INT 4
42775: PUSH
42776: LD_INT 5
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: ST_TO_ADDR
42785: GO 43610
42787: LD_INT 7
42789: DOUBLE
42790: EQUAL
42791: IFTRUE 42795
42793: GO 42821
42795: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42796: LD_ADDR_VAR 0 3
42800: PUSH
42801: LD_INT 2
42803: PUSH
42804: LD_INT 3
42806: PUSH
42807: LD_INT 4
42809: PUSH
42810: LD_INT 5
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: ST_TO_ADDR
42819: GO 43610
42821: LD_INT 12
42823: DOUBLE
42824: EQUAL
42825: IFTRUE 42829
42827: GO 42855
42829: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42830: LD_ADDR_VAR 0 3
42834: PUSH
42835: LD_INT 2
42837: PUSH
42838: LD_INT 3
42840: PUSH
42841: LD_INT 4
42843: PUSH
42844: LD_INT 5
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: ST_TO_ADDR
42853: GO 43610
42855: LD_INT 13
42857: DOUBLE
42858: EQUAL
42859: IFTRUE 42863
42861: GO 42889
42863: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42864: LD_ADDR_VAR 0 3
42868: PUSH
42869: LD_INT 2
42871: PUSH
42872: LD_INT 3
42874: PUSH
42875: LD_INT 4
42877: PUSH
42878: LD_INT 5
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: ST_TO_ADDR
42887: GO 43610
42889: LD_INT 14
42891: DOUBLE
42892: EQUAL
42893: IFTRUE 42897
42895: GO 42915
42897: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42898: LD_ADDR_VAR 0 3
42902: PUSH
42903: LD_INT 4
42905: PUSH
42906: LD_INT 5
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: ST_TO_ADDR
42913: GO 43610
42915: LD_INT 6
42917: DOUBLE
42918: EQUAL
42919: IFTRUE 42923
42921: GO 42941
42923: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42924: LD_ADDR_VAR 0 3
42928: PUSH
42929: LD_INT 4
42931: PUSH
42932: LD_INT 5
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: ST_TO_ADDR
42939: GO 43610
42941: LD_INT 10
42943: DOUBLE
42944: EQUAL
42945: IFTRUE 42949
42947: GO 42967
42949: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42950: LD_ADDR_VAR 0 3
42954: PUSH
42955: LD_INT 4
42957: PUSH
42958: LD_INT 5
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: ST_TO_ADDR
42965: GO 43610
42967: LD_INT 22
42969: DOUBLE
42970: EQUAL
42971: IFTRUE 42975
42973: GO 43001
42975: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42976: LD_ADDR_VAR 0 3
42980: PUSH
42981: LD_INT 11
42983: PUSH
42984: LD_INT 12
42986: PUSH
42987: LD_INT 13
42989: PUSH
42990: LD_INT 14
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: ST_TO_ADDR
42999: GO 43610
43001: LD_INT 23
43003: DOUBLE
43004: EQUAL
43005: IFTRUE 43009
43007: GO 43035
43009: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43010: LD_ADDR_VAR 0 3
43014: PUSH
43015: LD_INT 11
43017: PUSH
43018: LD_INT 12
43020: PUSH
43021: LD_INT 13
43023: PUSH
43024: LD_INT 14
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: ST_TO_ADDR
43033: GO 43610
43035: LD_INT 24
43037: DOUBLE
43038: EQUAL
43039: IFTRUE 43043
43041: GO 43069
43043: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43044: LD_ADDR_VAR 0 3
43048: PUSH
43049: LD_INT 11
43051: PUSH
43052: LD_INT 12
43054: PUSH
43055: LD_INT 13
43057: PUSH
43058: LD_INT 14
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: ST_TO_ADDR
43067: GO 43610
43069: LD_INT 30
43071: DOUBLE
43072: EQUAL
43073: IFTRUE 43077
43075: GO 43103
43077: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43078: LD_ADDR_VAR 0 3
43082: PUSH
43083: LD_INT 11
43085: PUSH
43086: LD_INT 12
43088: PUSH
43089: LD_INT 13
43091: PUSH
43092: LD_INT 14
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: ST_TO_ADDR
43101: GO 43610
43103: LD_INT 25
43105: DOUBLE
43106: EQUAL
43107: IFTRUE 43111
43109: GO 43129
43111: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43112: LD_ADDR_VAR 0 3
43116: PUSH
43117: LD_INT 13
43119: PUSH
43120: LD_INT 14
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: ST_TO_ADDR
43127: GO 43610
43129: LD_INT 27
43131: DOUBLE
43132: EQUAL
43133: IFTRUE 43137
43135: GO 43155
43137: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43138: LD_ADDR_VAR 0 3
43142: PUSH
43143: LD_INT 13
43145: PUSH
43146: LD_INT 14
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: ST_TO_ADDR
43153: GO 43610
43155: LD_INT 92
43157: DOUBLE
43158: EQUAL
43159: IFTRUE 43163
43161: GO 43189
43163: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43164: LD_ADDR_VAR 0 3
43168: PUSH
43169: LD_INT 11
43171: PUSH
43172: LD_INT 12
43174: PUSH
43175: LD_INT 13
43177: PUSH
43178: LD_INT 14
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: ST_TO_ADDR
43187: GO 43610
43189: LD_INT 28
43191: DOUBLE
43192: EQUAL
43193: IFTRUE 43197
43195: GO 43215
43197: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43198: LD_ADDR_VAR 0 3
43202: PUSH
43203: LD_INT 13
43205: PUSH
43206: LD_INT 14
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: ST_TO_ADDR
43213: GO 43610
43215: LD_INT 29
43217: DOUBLE
43218: EQUAL
43219: IFTRUE 43223
43221: GO 43241
43223: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43224: LD_ADDR_VAR 0 3
43228: PUSH
43229: LD_INT 13
43231: PUSH
43232: LD_INT 14
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: ST_TO_ADDR
43239: GO 43610
43241: LD_INT 31
43243: DOUBLE
43244: EQUAL
43245: IFTRUE 43249
43247: GO 43267
43249: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43250: LD_ADDR_VAR 0 3
43254: PUSH
43255: LD_INT 13
43257: PUSH
43258: LD_INT 14
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: ST_TO_ADDR
43265: GO 43610
43267: LD_INT 26
43269: DOUBLE
43270: EQUAL
43271: IFTRUE 43275
43273: GO 43293
43275: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43276: LD_ADDR_VAR 0 3
43280: PUSH
43281: LD_INT 13
43283: PUSH
43284: LD_INT 14
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: ST_TO_ADDR
43291: GO 43610
43293: LD_INT 42
43295: DOUBLE
43296: EQUAL
43297: IFTRUE 43301
43299: GO 43327
43301: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43302: LD_ADDR_VAR 0 3
43306: PUSH
43307: LD_INT 21
43309: PUSH
43310: LD_INT 22
43312: PUSH
43313: LD_INT 23
43315: PUSH
43316: LD_INT 24
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: ST_TO_ADDR
43325: GO 43610
43327: LD_INT 43
43329: DOUBLE
43330: EQUAL
43331: IFTRUE 43335
43333: GO 43361
43335: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43336: LD_ADDR_VAR 0 3
43340: PUSH
43341: LD_INT 21
43343: PUSH
43344: LD_INT 22
43346: PUSH
43347: LD_INT 23
43349: PUSH
43350: LD_INT 24
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: ST_TO_ADDR
43359: GO 43610
43361: LD_INT 44
43363: DOUBLE
43364: EQUAL
43365: IFTRUE 43369
43367: GO 43395
43369: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43370: LD_ADDR_VAR 0 3
43374: PUSH
43375: LD_INT 21
43377: PUSH
43378: LD_INT 22
43380: PUSH
43381: LD_INT 23
43383: PUSH
43384: LD_INT 24
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: ST_TO_ADDR
43393: GO 43610
43395: LD_INT 45
43397: DOUBLE
43398: EQUAL
43399: IFTRUE 43403
43401: GO 43429
43403: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43404: LD_ADDR_VAR 0 3
43408: PUSH
43409: LD_INT 21
43411: PUSH
43412: LD_INT 22
43414: PUSH
43415: LD_INT 23
43417: PUSH
43418: LD_INT 24
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: ST_TO_ADDR
43427: GO 43610
43429: LD_INT 49
43431: DOUBLE
43432: EQUAL
43433: IFTRUE 43437
43435: GO 43463
43437: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43438: LD_ADDR_VAR 0 3
43442: PUSH
43443: LD_INT 21
43445: PUSH
43446: LD_INT 22
43448: PUSH
43449: LD_INT 23
43451: PUSH
43452: LD_INT 24
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: ST_TO_ADDR
43461: GO 43610
43463: LD_INT 51
43465: DOUBLE
43466: EQUAL
43467: IFTRUE 43471
43469: GO 43497
43471: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43472: LD_ADDR_VAR 0 3
43476: PUSH
43477: LD_INT 21
43479: PUSH
43480: LD_INT 22
43482: PUSH
43483: LD_INT 23
43485: PUSH
43486: LD_INT 24
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: ST_TO_ADDR
43495: GO 43610
43497: LD_INT 52
43499: DOUBLE
43500: EQUAL
43501: IFTRUE 43505
43503: GO 43531
43505: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43506: LD_ADDR_VAR 0 3
43510: PUSH
43511: LD_INT 21
43513: PUSH
43514: LD_INT 22
43516: PUSH
43517: LD_INT 23
43519: PUSH
43520: LD_INT 24
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: ST_TO_ADDR
43529: GO 43610
43531: LD_INT 53
43533: DOUBLE
43534: EQUAL
43535: IFTRUE 43539
43537: GO 43557
43539: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43540: LD_ADDR_VAR 0 3
43544: PUSH
43545: LD_INT 23
43547: PUSH
43548: LD_INT 24
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: ST_TO_ADDR
43555: GO 43610
43557: LD_INT 46
43559: DOUBLE
43560: EQUAL
43561: IFTRUE 43565
43563: GO 43583
43565: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43566: LD_ADDR_VAR 0 3
43570: PUSH
43571: LD_INT 23
43573: PUSH
43574: LD_INT 24
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: ST_TO_ADDR
43581: GO 43610
43583: LD_INT 47
43585: DOUBLE
43586: EQUAL
43587: IFTRUE 43591
43589: GO 43609
43591: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43592: LD_ADDR_VAR 0 3
43596: PUSH
43597: LD_INT 23
43599: PUSH
43600: LD_INT 24
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: ST_TO_ADDR
43607: GO 43610
43609: POP
// result := ( chassis in result ) ;
43610: LD_ADDR_VAR 0 3
43614: PUSH
43615: LD_VAR 0 1
43619: PUSH
43620: LD_VAR 0 3
43624: IN
43625: ST_TO_ADDR
// end ;
43626: LD_VAR 0 3
43630: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43631: LD_INT 0
43633: PPUSH
43634: PPUSH
43635: PPUSH
43636: PPUSH
43637: PPUSH
43638: PPUSH
43639: PPUSH
// result := array ;
43640: LD_ADDR_VAR 0 5
43644: PUSH
43645: LD_VAR 0 1
43649: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43650: LD_VAR 0 1
43654: NOT
43655: PUSH
43656: LD_VAR 0 2
43660: NOT
43661: OR
43662: PUSH
43663: LD_VAR 0 3
43667: NOT
43668: OR
43669: PUSH
43670: LD_VAR 0 2
43674: PUSH
43675: LD_VAR 0 1
43679: GREATER
43680: OR
43681: PUSH
43682: LD_VAR 0 3
43686: PUSH
43687: LD_VAR 0 1
43691: GREATER
43692: OR
43693: IFFALSE 43697
// exit ;
43695: GO 43993
// if direction then
43697: LD_VAR 0 4
43701: IFFALSE 43765
// begin d := 1 ;
43703: LD_ADDR_VAR 0 9
43707: PUSH
43708: LD_INT 1
43710: ST_TO_ADDR
// if i_from > i_to then
43711: LD_VAR 0 2
43715: PUSH
43716: LD_VAR 0 3
43720: GREATER
43721: IFFALSE 43747
// length := ( array - i_from ) + i_to else
43723: LD_ADDR_VAR 0 11
43727: PUSH
43728: LD_VAR 0 1
43732: PUSH
43733: LD_VAR 0 2
43737: MINUS
43738: PUSH
43739: LD_VAR 0 3
43743: PLUS
43744: ST_TO_ADDR
43745: GO 43763
// length := i_to - i_from ;
43747: LD_ADDR_VAR 0 11
43751: PUSH
43752: LD_VAR 0 3
43756: PUSH
43757: LD_VAR 0 2
43761: MINUS
43762: ST_TO_ADDR
// end else
43763: GO 43826
// begin d := - 1 ;
43765: LD_ADDR_VAR 0 9
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: ST_TO_ADDR
// if i_from > i_to then
43774: LD_VAR 0 2
43778: PUSH
43779: LD_VAR 0 3
43783: GREATER
43784: IFFALSE 43804
// length := i_from - i_to else
43786: LD_ADDR_VAR 0 11
43790: PUSH
43791: LD_VAR 0 2
43795: PUSH
43796: LD_VAR 0 3
43800: MINUS
43801: ST_TO_ADDR
43802: GO 43826
// length := ( array - i_to ) + i_from ;
43804: LD_ADDR_VAR 0 11
43808: PUSH
43809: LD_VAR 0 1
43813: PUSH
43814: LD_VAR 0 3
43818: MINUS
43819: PUSH
43820: LD_VAR 0 2
43824: PLUS
43825: ST_TO_ADDR
// end ; if not length then
43826: LD_VAR 0 11
43830: NOT
43831: IFFALSE 43835
// exit ;
43833: GO 43993
// tmp := array ;
43835: LD_ADDR_VAR 0 10
43839: PUSH
43840: LD_VAR 0 1
43844: ST_TO_ADDR
// for i = 1 to length do
43845: LD_ADDR_VAR 0 6
43849: PUSH
43850: DOUBLE
43851: LD_INT 1
43853: DEC
43854: ST_TO_ADDR
43855: LD_VAR 0 11
43859: PUSH
43860: FOR_TO
43861: IFFALSE 43981
// begin for j = 1 to array do
43863: LD_ADDR_VAR 0 7
43867: PUSH
43868: DOUBLE
43869: LD_INT 1
43871: DEC
43872: ST_TO_ADDR
43873: LD_VAR 0 1
43877: PUSH
43878: FOR_TO
43879: IFFALSE 43967
// begin k := j + d ;
43881: LD_ADDR_VAR 0 8
43885: PUSH
43886: LD_VAR 0 7
43890: PUSH
43891: LD_VAR 0 9
43895: PLUS
43896: ST_TO_ADDR
// if k > array then
43897: LD_VAR 0 8
43901: PUSH
43902: LD_VAR 0 1
43906: GREATER
43907: IFFALSE 43917
// k := 1 ;
43909: LD_ADDR_VAR 0 8
43913: PUSH
43914: LD_INT 1
43916: ST_TO_ADDR
// if not k then
43917: LD_VAR 0 8
43921: NOT
43922: IFFALSE 43934
// k := array ;
43924: LD_ADDR_VAR 0 8
43928: PUSH
43929: LD_VAR 0 1
43933: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43934: LD_ADDR_VAR 0 10
43938: PUSH
43939: LD_VAR 0 10
43943: PPUSH
43944: LD_VAR 0 8
43948: PPUSH
43949: LD_VAR 0 1
43953: PUSH
43954: LD_VAR 0 7
43958: ARRAY
43959: PPUSH
43960: CALL_OW 1
43964: ST_TO_ADDR
// end ;
43965: GO 43878
43967: POP
43968: POP
// array := tmp ;
43969: LD_ADDR_VAR 0 1
43973: PUSH
43974: LD_VAR 0 10
43978: ST_TO_ADDR
// end ;
43979: GO 43860
43981: POP
43982: POP
// result := array ;
43983: LD_ADDR_VAR 0 5
43987: PUSH
43988: LD_VAR 0 1
43992: ST_TO_ADDR
// end ;
43993: LD_VAR 0 5
43997: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43998: LD_INT 0
44000: PPUSH
44001: PPUSH
// result := 0 ;
44002: LD_ADDR_VAR 0 3
44006: PUSH
44007: LD_INT 0
44009: ST_TO_ADDR
// if not array or not value in array then
44010: LD_VAR 0 1
44014: NOT
44015: PUSH
44016: LD_VAR 0 2
44020: PUSH
44021: LD_VAR 0 1
44025: IN
44026: NOT
44027: OR
44028: IFFALSE 44032
// exit ;
44030: GO 44086
// for i = 1 to array do
44032: LD_ADDR_VAR 0 4
44036: PUSH
44037: DOUBLE
44038: LD_INT 1
44040: DEC
44041: ST_TO_ADDR
44042: LD_VAR 0 1
44046: PUSH
44047: FOR_TO
44048: IFFALSE 44084
// if value = array [ i ] then
44050: LD_VAR 0 2
44054: PUSH
44055: LD_VAR 0 1
44059: PUSH
44060: LD_VAR 0 4
44064: ARRAY
44065: EQUAL
44066: IFFALSE 44082
// begin result := i ;
44068: LD_ADDR_VAR 0 3
44072: PUSH
44073: LD_VAR 0 4
44077: ST_TO_ADDR
// exit ;
44078: POP
44079: POP
44080: GO 44086
// end ;
44082: GO 44047
44084: POP
44085: POP
// end ;
44086: LD_VAR 0 3
44090: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44091: LD_INT 0
44093: PPUSH
// vc_chassis := chassis ;
44094: LD_ADDR_OWVAR 37
44098: PUSH
44099: LD_VAR 0 1
44103: ST_TO_ADDR
// vc_engine := engine ;
44104: LD_ADDR_OWVAR 39
44108: PUSH
44109: LD_VAR 0 2
44113: ST_TO_ADDR
// vc_control := control ;
44114: LD_ADDR_OWVAR 38
44118: PUSH
44119: LD_VAR 0 3
44123: ST_TO_ADDR
// vc_weapon := weapon ;
44124: LD_ADDR_OWVAR 40
44128: PUSH
44129: LD_VAR 0 4
44133: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44134: LD_ADDR_OWVAR 41
44138: PUSH
44139: LD_VAR 0 5
44143: ST_TO_ADDR
// end ;
44144: LD_VAR 0 6
44148: RET
// export function WantPlant ( unit ) ; var task ; begin
44149: LD_INT 0
44151: PPUSH
44152: PPUSH
// result := false ;
44153: LD_ADDR_VAR 0 2
44157: PUSH
44158: LD_INT 0
44160: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44161: LD_ADDR_VAR 0 3
44165: PUSH
44166: LD_VAR 0 1
44170: PPUSH
44171: CALL_OW 437
44175: ST_TO_ADDR
// if task then
44176: LD_VAR 0 3
44180: IFFALSE 44208
// if task [ 1 ] [ 1 ] = p then
44182: LD_VAR 0 3
44186: PUSH
44187: LD_INT 1
44189: ARRAY
44190: PUSH
44191: LD_INT 1
44193: ARRAY
44194: PUSH
44195: LD_STRING p
44197: EQUAL
44198: IFFALSE 44208
// result := true ;
44200: LD_ADDR_VAR 0 2
44204: PUSH
44205: LD_INT 1
44207: ST_TO_ADDR
// end ;
44208: LD_VAR 0 2
44212: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44213: LD_INT 0
44215: PPUSH
44216: PPUSH
44217: PPUSH
44218: PPUSH
// if pos < 1 then
44219: LD_VAR 0 2
44223: PUSH
44224: LD_INT 1
44226: LESS
44227: IFFALSE 44231
// exit ;
44229: GO 44534
// if pos = 1 then
44231: LD_VAR 0 2
44235: PUSH
44236: LD_INT 1
44238: EQUAL
44239: IFFALSE 44272
// result := Replace ( arr , pos [ 1 ] , value ) else
44241: LD_ADDR_VAR 0 4
44245: PUSH
44246: LD_VAR 0 1
44250: PPUSH
44251: LD_VAR 0 2
44255: PUSH
44256: LD_INT 1
44258: ARRAY
44259: PPUSH
44260: LD_VAR 0 3
44264: PPUSH
44265: CALL_OW 1
44269: ST_TO_ADDR
44270: GO 44534
// begin tmp := arr ;
44272: LD_ADDR_VAR 0 6
44276: PUSH
44277: LD_VAR 0 1
44281: ST_TO_ADDR
// s_arr := [ tmp ] ;
44282: LD_ADDR_VAR 0 7
44286: PUSH
44287: LD_VAR 0 6
44291: PUSH
44292: EMPTY
44293: LIST
44294: ST_TO_ADDR
// for i = 1 to pos - 1 do
44295: LD_ADDR_VAR 0 5
44299: PUSH
44300: DOUBLE
44301: LD_INT 1
44303: DEC
44304: ST_TO_ADDR
44305: LD_VAR 0 2
44309: PUSH
44310: LD_INT 1
44312: MINUS
44313: PUSH
44314: FOR_TO
44315: IFFALSE 44360
// begin tmp := tmp [ pos [ i ] ] ;
44317: LD_ADDR_VAR 0 6
44321: PUSH
44322: LD_VAR 0 6
44326: PUSH
44327: LD_VAR 0 2
44331: PUSH
44332: LD_VAR 0 5
44336: ARRAY
44337: ARRAY
44338: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44339: LD_ADDR_VAR 0 7
44343: PUSH
44344: LD_VAR 0 7
44348: PUSH
44349: LD_VAR 0 6
44353: PUSH
44354: EMPTY
44355: LIST
44356: ADD
44357: ST_TO_ADDR
// end ;
44358: GO 44314
44360: POP
44361: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44362: LD_ADDR_VAR 0 6
44366: PUSH
44367: LD_VAR 0 6
44371: PPUSH
44372: LD_VAR 0 2
44376: PUSH
44377: LD_VAR 0 2
44381: ARRAY
44382: PPUSH
44383: LD_VAR 0 3
44387: PPUSH
44388: CALL_OW 1
44392: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44393: LD_ADDR_VAR 0 7
44397: PUSH
44398: LD_VAR 0 7
44402: PPUSH
44403: LD_VAR 0 7
44407: PPUSH
44408: LD_VAR 0 6
44412: PPUSH
44413: CALL_OW 1
44417: ST_TO_ADDR
// for i = s_arr downto 2 do
44418: LD_ADDR_VAR 0 5
44422: PUSH
44423: DOUBLE
44424: LD_VAR 0 7
44428: INC
44429: ST_TO_ADDR
44430: LD_INT 2
44432: PUSH
44433: FOR_DOWNTO
44434: IFFALSE 44518
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44436: LD_ADDR_VAR 0 6
44440: PUSH
44441: LD_VAR 0 7
44445: PUSH
44446: LD_VAR 0 5
44450: PUSH
44451: LD_INT 1
44453: MINUS
44454: ARRAY
44455: PPUSH
44456: LD_VAR 0 2
44460: PUSH
44461: LD_VAR 0 5
44465: PUSH
44466: LD_INT 1
44468: MINUS
44469: ARRAY
44470: PPUSH
44471: LD_VAR 0 7
44475: PUSH
44476: LD_VAR 0 5
44480: ARRAY
44481: PPUSH
44482: CALL_OW 1
44486: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44487: LD_ADDR_VAR 0 7
44491: PUSH
44492: LD_VAR 0 7
44496: PPUSH
44497: LD_VAR 0 5
44501: PUSH
44502: LD_INT 1
44504: MINUS
44505: PPUSH
44506: LD_VAR 0 6
44510: PPUSH
44511: CALL_OW 1
44515: ST_TO_ADDR
// end ;
44516: GO 44433
44518: POP
44519: POP
// result := s_arr [ 1 ] ;
44520: LD_ADDR_VAR 0 4
44524: PUSH
44525: LD_VAR 0 7
44529: PUSH
44530: LD_INT 1
44532: ARRAY
44533: ST_TO_ADDR
// end ; end ;
44534: LD_VAR 0 4
44538: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44539: LD_INT 0
44541: PPUSH
44542: PPUSH
// if not list then
44543: LD_VAR 0 1
44547: NOT
44548: IFFALSE 44552
// exit ;
44550: GO 44643
// i := list [ pos1 ] ;
44552: LD_ADDR_VAR 0 5
44556: PUSH
44557: LD_VAR 0 1
44561: PUSH
44562: LD_VAR 0 2
44566: ARRAY
44567: ST_TO_ADDR
// if not i then
44568: LD_VAR 0 5
44572: NOT
44573: IFFALSE 44577
// exit ;
44575: GO 44643
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44577: LD_ADDR_VAR 0 1
44581: PUSH
44582: LD_VAR 0 1
44586: PPUSH
44587: LD_VAR 0 2
44591: PPUSH
44592: LD_VAR 0 1
44596: PUSH
44597: LD_VAR 0 3
44601: ARRAY
44602: PPUSH
44603: CALL_OW 1
44607: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44608: LD_ADDR_VAR 0 1
44612: PUSH
44613: LD_VAR 0 1
44617: PPUSH
44618: LD_VAR 0 3
44622: PPUSH
44623: LD_VAR 0 5
44627: PPUSH
44628: CALL_OW 1
44632: ST_TO_ADDR
// result := list ;
44633: LD_ADDR_VAR 0 4
44637: PUSH
44638: LD_VAR 0 1
44642: ST_TO_ADDR
// end ;
44643: LD_VAR 0 4
44647: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44648: LD_INT 0
44650: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44651: LD_ADDR_VAR 0 5
44655: PUSH
44656: LD_VAR 0 1
44660: PPUSH
44661: CALL_OW 250
44665: PPUSH
44666: LD_VAR 0 1
44670: PPUSH
44671: CALL_OW 251
44675: PPUSH
44676: LD_VAR 0 2
44680: PPUSH
44681: LD_VAR 0 3
44685: PPUSH
44686: LD_VAR 0 4
44690: PPUSH
44691: CALL 44701 0 5
44695: ST_TO_ADDR
// end ;
44696: LD_VAR 0 5
44700: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44701: LD_INT 0
44703: PPUSH
44704: PPUSH
44705: PPUSH
44706: PPUSH
// if not list then
44707: LD_VAR 0 3
44711: NOT
44712: IFFALSE 44716
// exit ;
44714: GO 45104
// result := [ ] ;
44716: LD_ADDR_VAR 0 6
44720: PUSH
44721: EMPTY
44722: ST_TO_ADDR
// for i in list do
44723: LD_ADDR_VAR 0 7
44727: PUSH
44728: LD_VAR 0 3
44732: PUSH
44733: FOR_IN
44734: IFFALSE 44936
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44736: LD_ADDR_VAR 0 9
44740: PUSH
44741: LD_VAR 0 7
44745: PPUSH
44746: LD_VAR 0 1
44750: PPUSH
44751: LD_VAR 0 2
44755: PPUSH
44756: CALL_OW 297
44760: ST_TO_ADDR
// if not result then
44761: LD_VAR 0 6
44765: NOT
44766: IFFALSE 44792
// result := [ [ i , tmp ] ] else
44768: LD_ADDR_VAR 0 6
44772: PUSH
44773: LD_VAR 0 7
44777: PUSH
44778: LD_VAR 0 9
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: EMPTY
44788: LIST
44789: ST_TO_ADDR
44790: GO 44934
// begin if result [ result ] [ 2 ] < tmp then
44792: LD_VAR 0 6
44796: PUSH
44797: LD_VAR 0 6
44801: ARRAY
44802: PUSH
44803: LD_INT 2
44805: ARRAY
44806: PUSH
44807: LD_VAR 0 9
44811: LESS
44812: IFFALSE 44854
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44814: LD_ADDR_VAR 0 6
44818: PUSH
44819: LD_VAR 0 6
44823: PPUSH
44824: LD_VAR 0 6
44828: PUSH
44829: LD_INT 1
44831: PLUS
44832: PPUSH
44833: LD_VAR 0 7
44837: PUSH
44838: LD_VAR 0 9
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PPUSH
44847: CALL_OW 2
44851: ST_TO_ADDR
44852: GO 44934
// for j = 1 to result do
44854: LD_ADDR_VAR 0 8
44858: PUSH
44859: DOUBLE
44860: LD_INT 1
44862: DEC
44863: ST_TO_ADDR
44864: LD_VAR 0 6
44868: PUSH
44869: FOR_TO
44870: IFFALSE 44932
// begin if tmp < result [ j ] [ 2 ] then
44872: LD_VAR 0 9
44876: PUSH
44877: LD_VAR 0 6
44881: PUSH
44882: LD_VAR 0 8
44886: ARRAY
44887: PUSH
44888: LD_INT 2
44890: ARRAY
44891: LESS
44892: IFFALSE 44930
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44894: LD_ADDR_VAR 0 6
44898: PUSH
44899: LD_VAR 0 6
44903: PPUSH
44904: LD_VAR 0 8
44908: PPUSH
44909: LD_VAR 0 7
44913: PUSH
44914: LD_VAR 0 9
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PPUSH
44923: CALL_OW 2
44927: ST_TO_ADDR
// break ;
44928: GO 44932
// end ; end ;
44930: GO 44869
44932: POP
44933: POP
// end ; end ;
44934: GO 44733
44936: POP
44937: POP
// if result and not asc then
44938: LD_VAR 0 6
44942: PUSH
44943: LD_VAR 0 4
44947: NOT
44948: AND
44949: IFFALSE 45024
// begin tmp := result ;
44951: LD_ADDR_VAR 0 9
44955: PUSH
44956: LD_VAR 0 6
44960: ST_TO_ADDR
// for i = tmp downto 1 do
44961: LD_ADDR_VAR 0 7
44965: PUSH
44966: DOUBLE
44967: LD_VAR 0 9
44971: INC
44972: ST_TO_ADDR
44973: LD_INT 1
44975: PUSH
44976: FOR_DOWNTO
44977: IFFALSE 45022
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44979: LD_ADDR_VAR 0 6
44983: PUSH
44984: LD_VAR 0 6
44988: PPUSH
44989: LD_VAR 0 9
44993: PUSH
44994: LD_VAR 0 7
44998: MINUS
44999: PUSH
45000: LD_INT 1
45002: PLUS
45003: PPUSH
45004: LD_VAR 0 9
45008: PUSH
45009: LD_VAR 0 7
45013: ARRAY
45014: PPUSH
45015: CALL_OW 1
45019: ST_TO_ADDR
45020: GO 44976
45022: POP
45023: POP
// end ; tmp := [ ] ;
45024: LD_ADDR_VAR 0 9
45028: PUSH
45029: EMPTY
45030: ST_TO_ADDR
// if mode then
45031: LD_VAR 0 5
45035: IFFALSE 45104
// begin for i = 1 to result do
45037: LD_ADDR_VAR 0 7
45041: PUSH
45042: DOUBLE
45043: LD_INT 1
45045: DEC
45046: ST_TO_ADDR
45047: LD_VAR 0 6
45051: PUSH
45052: FOR_TO
45053: IFFALSE 45092
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45055: LD_ADDR_VAR 0 9
45059: PUSH
45060: LD_VAR 0 9
45064: PPUSH
45065: LD_VAR 0 7
45069: PPUSH
45070: LD_VAR 0 6
45074: PUSH
45075: LD_VAR 0 7
45079: ARRAY
45080: PUSH
45081: LD_INT 1
45083: ARRAY
45084: PPUSH
45085: CALL_OW 1
45089: ST_TO_ADDR
45090: GO 45052
45092: POP
45093: POP
// result := tmp ;
45094: LD_ADDR_VAR 0 6
45098: PUSH
45099: LD_VAR 0 9
45103: ST_TO_ADDR
// end ; end ;
45104: LD_VAR 0 6
45108: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45109: LD_INT 0
45111: PPUSH
45112: PPUSH
45113: PPUSH
45114: PPUSH
45115: PPUSH
45116: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45117: LD_ADDR_VAR 0 5
45121: PUSH
45122: LD_INT 0
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: EMPTY
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: ST_TO_ADDR
// if not x or not y then
45139: LD_VAR 0 2
45143: NOT
45144: PUSH
45145: LD_VAR 0 3
45149: NOT
45150: OR
45151: IFFALSE 45155
// exit ;
45153: GO 46805
// if not range then
45155: LD_VAR 0 4
45159: NOT
45160: IFFALSE 45170
// range := 10 ;
45162: LD_ADDR_VAR 0 4
45166: PUSH
45167: LD_INT 10
45169: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45170: LD_ADDR_VAR 0 8
45174: PUSH
45175: LD_INT 81
45177: PUSH
45178: LD_VAR 0 1
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 92
45189: PUSH
45190: LD_VAR 0 2
45194: PUSH
45195: LD_VAR 0 3
45199: PUSH
45200: LD_VAR 0 4
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 3
45213: PUSH
45214: LD_INT 21
45216: PUSH
45217: LD_INT 3
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: LIST
45232: PPUSH
45233: CALL_OW 69
45237: ST_TO_ADDR
// if not tmp then
45238: LD_VAR 0 8
45242: NOT
45243: IFFALSE 45247
// exit ;
45245: GO 46805
// for i in tmp do
45247: LD_ADDR_VAR 0 6
45251: PUSH
45252: LD_VAR 0 8
45256: PUSH
45257: FOR_IN
45258: IFFALSE 46780
// begin points := [ 0 , 0 , 0 ] ;
45260: LD_ADDR_VAR 0 9
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: LIST
45278: ST_TO_ADDR
// bpoints := 1 ;
45279: LD_ADDR_VAR 0 10
45283: PUSH
45284: LD_INT 1
45286: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45287: LD_VAR 0 6
45291: PPUSH
45292: CALL_OW 247
45296: PUSH
45297: LD_INT 1
45299: DOUBLE
45300: EQUAL
45301: IFTRUE 45305
45303: GO 45883
45305: POP
// begin if GetClass ( i ) = 1 then
45306: LD_VAR 0 6
45310: PPUSH
45311: CALL_OW 257
45315: PUSH
45316: LD_INT 1
45318: EQUAL
45319: IFFALSE 45340
// points := [ 10 , 5 , 3 ] ;
45321: LD_ADDR_VAR 0 9
45325: PUSH
45326: LD_INT 10
45328: PUSH
45329: LD_INT 5
45331: PUSH
45332: LD_INT 3
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: LIST
45339: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45340: LD_VAR 0 6
45344: PPUSH
45345: CALL_OW 257
45349: PUSH
45350: LD_INT 2
45352: PUSH
45353: LD_INT 3
45355: PUSH
45356: LD_INT 4
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: LIST
45363: IN
45364: IFFALSE 45385
// points := [ 3 , 2 , 1 ] ;
45366: LD_ADDR_VAR 0 9
45370: PUSH
45371: LD_INT 3
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: LIST
45384: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45385: LD_VAR 0 6
45389: PPUSH
45390: CALL_OW 257
45394: PUSH
45395: LD_INT 5
45397: EQUAL
45398: IFFALSE 45419
// points := [ 130 , 5 , 2 ] ;
45400: LD_ADDR_VAR 0 9
45404: PUSH
45405: LD_INT 130
45407: PUSH
45408: LD_INT 5
45410: PUSH
45411: LD_INT 2
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: LIST
45418: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45419: LD_VAR 0 6
45423: PPUSH
45424: CALL_OW 257
45428: PUSH
45429: LD_INT 8
45431: EQUAL
45432: IFFALSE 45453
// points := [ 35 , 35 , 30 ] ;
45434: LD_ADDR_VAR 0 9
45438: PUSH
45439: LD_INT 35
45441: PUSH
45442: LD_INT 35
45444: PUSH
45445: LD_INT 30
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: LIST
45452: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45453: LD_VAR 0 6
45457: PPUSH
45458: CALL_OW 257
45462: PUSH
45463: LD_INT 9
45465: EQUAL
45466: IFFALSE 45487
// points := [ 20 , 55 , 40 ] ;
45468: LD_ADDR_VAR 0 9
45472: PUSH
45473: LD_INT 20
45475: PUSH
45476: LD_INT 55
45478: PUSH
45479: LD_INT 40
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: LIST
45486: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45487: LD_VAR 0 6
45491: PPUSH
45492: CALL_OW 257
45496: PUSH
45497: LD_INT 12
45499: PUSH
45500: LD_INT 16
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: IN
45507: IFFALSE 45528
// points := [ 5 , 3 , 2 ] ;
45509: LD_ADDR_VAR 0 9
45513: PUSH
45514: LD_INT 5
45516: PUSH
45517: LD_INT 3
45519: PUSH
45520: LD_INT 2
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: LIST
45527: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45528: LD_VAR 0 6
45532: PPUSH
45533: CALL_OW 257
45537: PUSH
45538: LD_INT 17
45540: EQUAL
45541: IFFALSE 45562
// points := [ 100 , 50 , 75 ] ;
45543: LD_ADDR_VAR 0 9
45547: PUSH
45548: LD_INT 100
45550: PUSH
45551: LD_INT 50
45553: PUSH
45554: LD_INT 75
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: LIST
45561: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45562: LD_VAR 0 6
45566: PPUSH
45567: CALL_OW 257
45571: PUSH
45572: LD_INT 15
45574: EQUAL
45575: IFFALSE 45596
// points := [ 10 , 5 , 3 ] ;
45577: LD_ADDR_VAR 0 9
45581: PUSH
45582: LD_INT 10
45584: PUSH
45585: LD_INT 5
45587: PUSH
45588: LD_INT 3
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: LIST
45595: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45596: LD_VAR 0 6
45600: PPUSH
45601: CALL_OW 257
45605: PUSH
45606: LD_INT 14
45608: EQUAL
45609: IFFALSE 45630
// points := [ 10 , 0 , 0 ] ;
45611: LD_ADDR_VAR 0 9
45615: PUSH
45616: LD_INT 10
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: LIST
45629: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45630: LD_VAR 0 6
45634: PPUSH
45635: CALL_OW 257
45639: PUSH
45640: LD_INT 11
45642: EQUAL
45643: IFFALSE 45664
// points := [ 30 , 10 , 5 ] ;
45645: LD_ADDR_VAR 0 9
45649: PUSH
45650: LD_INT 30
45652: PUSH
45653: LD_INT 10
45655: PUSH
45656: LD_INT 5
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: LIST
45663: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45664: LD_VAR 0 1
45668: PPUSH
45669: LD_INT 5
45671: PPUSH
45672: CALL_OW 321
45676: PUSH
45677: LD_INT 2
45679: EQUAL
45680: IFFALSE 45697
// bpoints := bpoints * 1.8 ;
45682: LD_ADDR_VAR 0 10
45686: PUSH
45687: LD_VAR 0 10
45691: PUSH
45692: LD_REAL  1.80000000000000E+0000
45695: MUL
45696: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45697: LD_VAR 0 6
45701: PPUSH
45702: CALL_OW 257
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: LD_INT 2
45712: PUSH
45713: LD_INT 3
45715: PUSH
45716: LD_INT 4
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: IN
45725: PUSH
45726: LD_VAR 0 1
45730: PPUSH
45731: LD_INT 51
45733: PPUSH
45734: CALL_OW 321
45738: PUSH
45739: LD_INT 2
45741: EQUAL
45742: AND
45743: IFFALSE 45760
// bpoints := bpoints * 1.2 ;
45745: LD_ADDR_VAR 0 10
45749: PUSH
45750: LD_VAR 0 10
45754: PUSH
45755: LD_REAL  1.20000000000000E+0000
45758: MUL
45759: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45760: LD_VAR 0 6
45764: PPUSH
45765: CALL_OW 257
45769: PUSH
45770: LD_INT 5
45772: PUSH
45773: LD_INT 7
45775: PUSH
45776: LD_INT 9
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: LIST
45783: IN
45784: PUSH
45785: LD_VAR 0 1
45789: PPUSH
45790: LD_INT 52
45792: PPUSH
45793: CALL_OW 321
45797: PUSH
45798: LD_INT 2
45800: EQUAL
45801: AND
45802: IFFALSE 45819
// bpoints := bpoints * 1.5 ;
45804: LD_ADDR_VAR 0 10
45808: PUSH
45809: LD_VAR 0 10
45813: PUSH
45814: LD_REAL  1.50000000000000E+0000
45817: MUL
45818: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45819: LD_VAR 0 1
45823: PPUSH
45824: LD_INT 66
45826: PPUSH
45827: CALL_OW 321
45831: PUSH
45832: LD_INT 2
45834: EQUAL
45835: IFFALSE 45852
// bpoints := bpoints * 1.1 ;
45837: LD_ADDR_VAR 0 10
45841: PUSH
45842: LD_VAR 0 10
45846: PUSH
45847: LD_REAL  1.10000000000000E+0000
45850: MUL
45851: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45852: LD_ADDR_VAR 0 10
45856: PUSH
45857: LD_VAR 0 10
45861: PUSH
45862: LD_VAR 0 6
45866: PPUSH
45867: LD_INT 1
45869: PPUSH
45870: CALL_OW 259
45874: PUSH
45875: LD_REAL  1.15000000000000E+0000
45878: MUL
45879: MUL
45880: ST_TO_ADDR
// end ; unit_vehicle :
45881: GO 46709
45883: LD_INT 2
45885: DOUBLE
45886: EQUAL
45887: IFTRUE 45891
45889: GO 46697
45891: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45892: LD_VAR 0 6
45896: PPUSH
45897: CALL_OW 264
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: LD_INT 42
45907: PUSH
45908: LD_INT 24
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: LIST
45915: IN
45916: IFFALSE 45937
// points := [ 25 , 5 , 3 ] ;
45918: LD_ADDR_VAR 0 9
45922: PUSH
45923: LD_INT 25
45925: PUSH
45926: LD_INT 5
45928: PUSH
45929: LD_INT 3
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: LIST
45936: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45937: LD_VAR 0 6
45941: PPUSH
45942: CALL_OW 264
45946: PUSH
45947: LD_INT 4
45949: PUSH
45950: LD_INT 43
45952: PUSH
45953: LD_INT 25
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: LIST
45960: IN
45961: IFFALSE 45982
// points := [ 40 , 15 , 5 ] ;
45963: LD_ADDR_VAR 0 9
45967: PUSH
45968: LD_INT 40
45970: PUSH
45971: LD_INT 15
45973: PUSH
45974: LD_INT 5
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: LIST
45981: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45982: LD_VAR 0 6
45986: PPUSH
45987: CALL_OW 264
45991: PUSH
45992: LD_INT 3
45994: PUSH
45995: LD_INT 23
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: IN
46002: IFFALSE 46023
// points := [ 7 , 25 , 8 ] ;
46004: LD_ADDR_VAR 0 9
46008: PUSH
46009: LD_INT 7
46011: PUSH
46012: LD_INT 25
46014: PUSH
46015: LD_INT 8
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: LIST
46022: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46023: LD_VAR 0 6
46027: PPUSH
46028: CALL_OW 264
46032: PUSH
46033: LD_INT 5
46035: PUSH
46036: LD_INT 27
46038: PUSH
46039: LD_INT 44
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: LIST
46046: IN
46047: IFFALSE 46068
// points := [ 14 , 50 , 16 ] ;
46049: LD_ADDR_VAR 0 9
46053: PUSH
46054: LD_INT 14
46056: PUSH
46057: LD_INT 50
46059: PUSH
46060: LD_INT 16
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: LIST
46067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46068: LD_VAR 0 6
46072: PPUSH
46073: CALL_OW 264
46077: PUSH
46078: LD_INT 6
46080: PUSH
46081: LD_INT 46
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: IN
46088: IFFALSE 46109
// points := [ 32 , 120 , 70 ] ;
46090: LD_ADDR_VAR 0 9
46094: PUSH
46095: LD_INT 32
46097: PUSH
46098: LD_INT 120
46100: PUSH
46101: LD_INT 70
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: LIST
46108: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46109: LD_VAR 0 6
46113: PPUSH
46114: CALL_OW 264
46118: PUSH
46119: LD_INT 7
46121: PUSH
46122: LD_INT 28
46124: PUSH
46125: LD_INT 45
46127: PUSH
46128: LD_INT 92
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: IN
46137: IFFALSE 46158
// points := [ 35 , 20 , 45 ] ;
46139: LD_ADDR_VAR 0 9
46143: PUSH
46144: LD_INT 35
46146: PUSH
46147: LD_INT 20
46149: PUSH
46150: LD_INT 45
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: LIST
46157: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46158: LD_VAR 0 6
46162: PPUSH
46163: CALL_OW 264
46167: PUSH
46168: LD_INT 47
46170: PUSH
46171: EMPTY
46172: LIST
46173: IN
46174: IFFALSE 46195
// points := [ 67 , 45 , 75 ] ;
46176: LD_ADDR_VAR 0 9
46180: PUSH
46181: LD_INT 67
46183: PUSH
46184: LD_INT 45
46186: PUSH
46187: LD_INT 75
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: LIST
46194: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46195: LD_VAR 0 6
46199: PPUSH
46200: CALL_OW 264
46204: PUSH
46205: LD_INT 26
46207: PUSH
46208: EMPTY
46209: LIST
46210: IN
46211: IFFALSE 46232
// points := [ 120 , 30 , 80 ] ;
46213: LD_ADDR_VAR 0 9
46217: PUSH
46218: LD_INT 120
46220: PUSH
46221: LD_INT 30
46223: PUSH
46224: LD_INT 80
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: LIST
46231: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46232: LD_VAR 0 6
46236: PPUSH
46237: CALL_OW 264
46241: PUSH
46242: LD_INT 22
46244: PUSH
46245: EMPTY
46246: LIST
46247: IN
46248: IFFALSE 46269
// points := [ 40 , 1 , 1 ] ;
46250: LD_ADDR_VAR 0 9
46254: PUSH
46255: LD_INT 40
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: LIST
46268: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46269: LD_VAR 0 6
46273: PPUSH
46274: CALL_OW 264
46278: PUSH
46279: LD_INT 29
46281: PUSH
46282: EMPTY
46283: LIST
46284: IN
46285: IFFALSE 46306
// points := [ 70 , 200 , 400 ] ;
46287: LD_ADDR_VAR 0 9
46291: PUSH
46292: LD_INT 70
46294: PUSH
46295: LD_INT 200
46297: PUSH
46298: LD_INT 400
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: LIST
46305: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46306: LD_VAR 0 6
46310: PPUSH
46311: CALL_OW 264
46315: PUSH
46316: LD_INT 14
46318: PUSH
46319: LD_INT 53
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: IN
46326: IFFALSE 46347
// points := [ 40 , 10 , 20 ] ;
46328: LD_ADDR_VAR 0 9
46332: PUSH
46333: LD_INT 40
46335: PUSH
46336: LD_INT 10
46338: PUSH
46339: LD_INT 20
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: LIST
46346: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46347: LD_VAR 0 6
46351: PPUSH
46352: CALL_OW 264
46356: PUSH
46357: LD_INT 9
46359: PUSH
46360: EMPTY
46361: LIST
46362: IN
46363: IFFALSE 46384
// points := [ 5 , 70 , 20 ] ;
46365: LD_ADDR_VAR 0 9
46369: PUSH
46370: LD_INT 5
46372: PUSH
46373: LD_INT 70
46375: PUSH
46376: LD_INT 20
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: LIST
46383: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46384: LD_VAR 0 6
46388: PPUSH
46389: CALL_OW 264
46393: PUSH
46394: LD_INT 10
46396: PUSH
46397: EMPTY
46398: LIST
46399: IN
46400: IFFALSE 46421
// points := [ 35 , 110 , 70 ] ;
46402: LD_ADDR_VAR 0 9
46406: PUSH
46407: LD_INT 35
46409: PUSH
46410: LD_INT 110
46412: PUSH
46413: LD_INT 70
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: LIST
46420: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46421: LD_VAR 0 6
46425: PPUSH
46426: CALL_OW 265
46430: PUSH
46431: LD_INT 25
46433: EQUAL
46434: IFFALSE 46455
// points := [ 80 , 65 , 100 ] ;
46436: LD_ADDR_VAR 0 9
46440: PUSH
46441: LD_INT 80
46443: PUSH
46444: LD_INT 65
46446: PUSH
46447: LD_INT 100
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: LIST
46454: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46455: LD_VAR 0 6
46459: PPUSH
46460: CALL_OW 263
46464: PUSH
46465: LD_INT 1
46467: EQUAL
46468: IFFALSE 46503
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46470: LD_ADDR_VAR 0 10
46474: PUSH
46475: LD_VAR 0 10
46479: PUSH
46480: LD_VAR 0 6
46484: PPUSH
46485: CALL_OW 311
46489: PPUSH
46490: LD_INT 3
46492: PPUSH
46493: CALL_OW 259
46497: PUSH
46498: LD_INT 4
46500: MUL
46501: MUL
46502: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46503: LD_VAR 0 6
46507: PPUSH
46508: CALL_OW 263
46512: PUSH
46513: LD_INT 2
46515: EQUAL
46516: IFFALSE 46567
// begin j := IsControledBy ( i ) ;
46518: LD_ADDR_VAR 0 7
46522: PUSH
46523: LD_VAR 0 6
46527: PPUSH
46528: CALL_OW 312
46532: ST_TO_ADDR
// if j then
46533: LD_VAR 0 7
46537: IFFALSE 46567
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46539: LD_ADDR_VAR 0 10
46543: PUSH
46544: LD_VAR 0 10
46548: PUSH
46549: LD_VAR 0 7
46553: PPUSH
46554: LD_INT 3
46556: PPUSH
46557: CALL_OW 259
46561: PUSH
46562: LD_INT 3
46564: MUL
46565: MUL
46566: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46567: LD_VAR 0 6
46571: PPUSH
46572: CALL_OW 264
46576: PUSH
46577: LD_INT 5
46579: PUSH
46580: LD_INT 6
46582: PUSH
46583: LD_INT 46
46585: PUSH
46586: LD_INT 44
46588: PUSH
46589: LD_INT 47
46591: PUSH
46592: LD_INT 45
46594: PUSH
46595: LD_INT 28
46597: PUSH
46598: LD_INT 7
46600: PUSH
46601: LD_INT 27
46603: PUSH
46604: LD_INT 29
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: IN
46619: PUSH
46620: LD_VAR 0 1
46624: PPUSH
46625: LD_INT 52
46627: PPUSH
46628: CALL_OW 321
46632: PUSH
46633: LD_INT 2
46635: EQUAL
46636: AND
46637: IFFALSE 46654
// bpoints := bpoints * 1.2 ;
46639: LD_ADDR_VAR 0 10
46643: PUSH
46644: LD_VAR 0 10
46648: PUSH
46649: LD_REAL  1.20000000000000E+0000
46652: MUL
46653: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46654: LD_VAR 0 6
46658: PPUSH
46659: CALL_OW 264
46663: PUSH
46664: LD_INT 6
46666: PUSH
46667: LD_INT 46
46669: PUSH
46670: LD_INT 47
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: LIST
46677: IN
46678: IFFALSE 46695
// bpoints := bpoints * 1.2 ;
46680: LD_ADDR_VAR 0 10
46684: PUSH
46685: LD_VAR 0 10
46689: PUSH
46690: LD_REAL  1.20000000000000E+0000
46693: MUL
46694: ST_TO_ADDR
// end ; unit_building :
46695: GO 46709
46697: LD_INT 3
46699: DOUBLE
46700: EQUAL
46701: IFTRUE 46705
46703: GO 46708
46705: POP
// ; end ;
46706: GO 46709
46708: POP
// for j = 1 to 3 do
46709: LD_ADDR_VAR 0 7
46713: PUSH
46714: DOUBLE
46715: LD_INT 1
46717: DEC
46718: ST_TO_ADDR
46719: LD_INT 3
46721: PUSH
46722: FOR_TO
46723: IFFALSE 46776
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46725: LD_ADDR_VAR 0 5
46729: PUSH
46730: LD_VAR 0 5
46734: PPUSH
46735: LD_VAR 0 7
46739: PPUSH
46740: LD_VAR 0 5
46744: PUSH
46745: LD_VAR 0 7
46749: ARRAY
46750: PUSH
46751: LD_VAR 0 9
46755: PUSH
46756: LD_VAR 0 7
46760: ARRAY
46761: PUSH
46762: LD_VAR 0 10
46766: MUL
46767: PLUS
46768: PPUSH
46769: CALL_OW 1
46773: ST_TO_ADDR
46774: GO 46722
46776: POP
46777: POP
// end ;
46778: GO 45257
46780: POP
46781: POP
// result := Replace ( result , 4 , tmp ) ;
46782: LD_ADDR_VAR 0 5
46786: PUSH
46787: LD_VAR 0 5
46791: PPUSH
46792: LD_INT 4
46794: PPUSH
46795: LD_VAR 0 8
46799: PPUSH
46800: CALL_OW 1
46804: ST_TO_ADDR
// end ;
46805: LD_VAR 0 5
46809: RET
// export function DangerAtRange ( unit , range ) ; begin
46810: LD_INT 0
46812: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46813: LD_ADDR_VAR 0 3
46817: PUSH
46818: LD_VAR 0 1
46822: PPUSH
46823: CALL_OW 255
46827: PPUSH
46828: LD_VAR 0 1
46832: PPUSH
46833: CALL_OW 250
46837: PPUSH
46838: LD_VAR 0 1
46842: PPUSH
46843: CALL_OW 251
46847: PPUSH
46848: LD_VAR 0 2
46852: PPUSH
46853: CALL 45109 0 4
46857: ST_TO_ADDR
// end ;
46858: LD_VAR 0 3
46862: RET
// export function DangerInArea ( side , area ) ; begin
46863: LD_INT 0
46865: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46866: LD_ADDR_VAR 0 3
46870: PUSH
46871: LD_VAR 0 2
46875: PPUSH
46876: LD_INT 81
46878: PUSH
46879: LD_VAR 0 1
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PPUSH
46888: CALL_OW 70
46892: ST_TO_ADDR
// end ;
46893: LD_VAR 0 3
46897: RET
// export function IsExtension ( b ) ; begin
46898: LD_INT 0
46900: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46901: LD_ADDR_VAR 0 2
46905: PUSH
46906: LD_VAR 0 1
46910: PUSH
46911: LD_INT 23
46913: PUSH
46914: LD_INT 20
46916: PUSH
46917: LD_INT 22
46919: PUSH
46920: LD_INT 17
46922: PUSH
46923: LD_INT 24
46925: PUSH
46926: LD_INT 21
46928: PUSH
46929: LD_INT 19
46931: PUSH
46932: LD_INT 16
46934: PUSH
46935: LD_INT 25
46937: PUSH
46938: LD_INT 18
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: IN
46953: ST_TO_ADDR
// end ;
46954: LD_VAR 0 2
46958: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46959: LD_INT 0
46961: PPUSH
46962: PPUSH
46963: PPUSH
// result := [ ] ;
46964: LD_ADDR_VAR 0 4
46968: PUSH
46969: EMPTY
46970: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46971: LD_ADDR_VAR 0 5
46975: PUSH
46976: LD_VAR 0 2
46980: PPUSH
46981: LD_INT 21
46983: PUSH
46984: LD_INT 3
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PPUSH
46991: CALL_OW 70
46995: ST_TO_ADDR
// if not tmp then
46996: LD_VAR 0 5
47000: NOT
47001: IFFALSE 47005
// exit ;
47003: GO 47069
// if checkLink then
47005: LD_VAR 0 3
47009: IFFALSE 47059
// begin for i in tmp do
47011: LD_ADDR_VAR 0 6
47015: PUSH
47016: LD_VAR 0 5
47020: PUSH
47021: FOR_IN
47022: IFFALSE 47057
// if GetBase ( i ) <> base then
47024: LD_VAR 0 6
47028: PPUSH
47029: CALL_OW 274
47033: PUSH
47034: LD_VAR 0 1
47038: NONEQUAL
47039: IFFALSE 47055
// ComLinkToBase ( base , i ) ;
47041: LD_VAR 0 1
47045: PPUSH
47046: LD_VAR 0 6
47050: PPUSH
47051: CALL_OW 169
47055: GO 47021
47057: POP
47058: POP
// end ; result := tmp ;
47059: LD_ADDR_VAR 0 4
47063: PUSH
47064: LD_VAR 0 5
47068: ST_TO_ADDR
// end ;
47069: LD_VAR 0 4
47073: RET
// export function ComComplete ( units , b ) ; var i ; begin
47074: LD_INT 0
47076: PPUSH
47077: PPUSH
// if not units then
47078: LD_VAR 0 1
47082: NOT
47083: IFFALSE 47087
// exit ;
47085: GO 47177
// for i in units do
47087: LD_ADDR_VAR 0 4
47091: PUSH
47092: LD_VAR 0 1
47096: PUSH
47097: FOR_IN
47098: IFFALSE 47175
// if BuildingStatus ( b ) = bs_build then
47100: LD_VAR 0 2
47104: PPUSH
47105: CALL_OW 461
47109: PUSH
47110: LD_INT 1
47112: EQUAL
47113: IFFALSE 47173
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47115: LD_VAR 0 4
47119: PPUSH
47120: LD_STRING h
47122: PUSH
47123: LD_VAR 0 2
47127: PPUSH
47128: CALL_OW 250
47132: PUSH
47133: LD_VAR 0 2
47137: PPUSH
47138: CALL_OW 251
47142: PUSH
47143: LD_VAR 0 2
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: PUSH
47166: EMPTY
47167: LIST
47168: PPUSH
47169: CALL_OW 446
47173: GO 47097
47175: POP
47176: POP
// end ;
47177: LD_VAR 0 3
47181: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47182: LD_INT 0
47184: PPUSH
47185: PPUSH
47186: PPUSH
47187: PPUSH
47188: PPUSH
47189: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47190: LD_VAR 0 1
47194: NOT
47195: PUSH
47196: LD_VAR 0 1
47200: PPUSH
47201: CALL_OW 263
47205: PUSH
47206: LD_INT 2
47208: NONEQUAL
47209: OR
47210: IFFALSE 47214
// exit ;
47212: GO 47530
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47214: LD_ADDR_VAR 0 6
47218: PUSH
47219: LD_INT 22
47221: PUSH
47222: LD_VAR 0 1
47226: PPUSH
47227: CALL_OW 255
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 2
47238: PUSH
47239: LD_INT 30
47241: PUSH
47242: LD_INT 36
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 34
47251: PUSH
47252: LD_INT 31
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: LIST
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PPUSH
47268: CALL_OW 69
47272: ST_TO_ADDR
// if not tmp then
47273: LD_VAR 0 6
47277: NOT
47278: IFFALSE 47282
// exit ;
47280: GO 47530
// result := [ ] ;
47282: LD_ADDR_VAR 0 2
47286: PUSH
47287: EMPTY
47288: ST_TO_ADDR
// for i in tmp do
47289: LD_ADDR_VAR 0 3
47293: PUSH
47294: LD_VAR 0 6
47298: PUSH
47299: FOR_IN
47300: IFFALSE 47371
// begin t := UnitsInside ( i ) ;
47302: LD_ADDR_VAR 0 4
47306: PUSH
47307: LD_VAR 0 3
47311: PPUSH
47312: CALL_OW 313
47316: ST_TO_ADDR
// if t then
47317: LD_VAR 0 4
47321: IFFALSE 47369
// for j in t do
47323: LD_ADDR_VAR 0 7
47327: PUSH
47328: LD_VAR 0 4
47332: PUSH
47333: FOR_IN
47334: IFFALSE 47367
// result := Replace ( result , result + 1 , j ) ;
47336: LD_ADDR_VAR 0 2
47340: PUSH
47341: LD_VAR 0 2
47345: PPUSH
47346: LD_VAR 0 2
47350: PUSH
47351: LD_INT 1
47353: PLUS
47354: PPUSH
47355: LD_VAR 0 7
47359: PPUSH
47360: CALL_OW 1
47364: ST_TO_ADDR
47365: GO 47333
47367: POP
47368: POP
// end ;
47369: GO 47299
47371: POP
47372: POP
// if not result then
47373: LD_VAR 0 2
47377: NOT
47378: IFFALSE 47382
// exit ;
47380: GO 47530
// mech := result [ 1 ] ;
47382: LD_ADDR_VAR 0 5
47386: PUSH
47387: LD_VAR 0 2
47391: PUSH
47392: LD_INT 1
47394: ARRAY
47395: ST_TO_ADDR
// if result > 1 then
47396: LD_VAR 0 2
47400: PUSH
47401: LD_INT 1
47403: GREATER
47404: IFFALSE 47516
// begin for i = 2 to result do
47406: LD_ADDR_VAR 0 3
47410: PUSH
47411: DOUBLE
47412: LD_INT 2
47414: DEC
47415: ST_TO_ADDR
47416: LD_VAR 0 2
47420: PUSH
47421: FOR_TO
47422: IFFALSE 47514
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47424: LD_ADDR_VAR 0 4
47428: PUSH
47429: LD_VAR 0 2
47433: PUSH
47434: LD_VAR 0 3
47438: ARRAY
47439: PPUSH
47440: LD_INT 3
47442: PPUSH
47443: CALL_OW 259
47447: PUSH
47448: LD_VAR 0 2
47452: PUSH
47453: LD_VAR 0 3
47457: ARRAY
47458: PPUSH
47459: CALL_OW 432
47463: MINUS
47464: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47465: LD_VAR 0 4
47469: PUSH
47470: LD_VAR 0 5
47474: PPUSH
47475: LD_INT 3
47477: PPUSH
47478: CALL_OW 259
47482: PUSH
47483: LD_VAR 0 5
47487: PPUSH
47488: CALL_OW 432
47492: MINUS
47493: GREATEREQUAL
47494: IFFALSE 47512
// mech := result [ i ] ;
47496: LD_ADDR_VAR 0 5
47500: PUSH
47501: LD_VAR 0 2
47505: PUSH
47506: LD_VAR 0 3
47510: ARRAY
47511: ST_TO_ADDR
// end ;
47512: GO 47421
47514: POP
47515: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47516: LD_VAR 0 1
47520: PPUSH
47521: LD_VAR 0 5
47525: PPUSH
47526: CALL_OW 135
// end ;
47530: LD_VAR 0 2
47534: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47535: LD_INT 0
47537: PPUSH
47538: PPUSH
47539: PPUSH
47540: PPUSH
47541: PPUSH
47542: PPUSH
47543: PPUSH
47544: PPUSH
47545: PPUSH
47546: PPUSH
47547: PPUSH
47548: PPUSH
47549: PPUSH
// result := [ ] ;
47550: LD_ADDR_VAR 0 7
47554: PUSH
47555: EMPTY
47556: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47557: LD_VAR 0 1
47561: PPUSH
47562: CALL_OW 266
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: IN
47577: NOT
47578: IFFALSE 47582
// exit ;
47580: GO 49216
// if name then
47582: LD_VAR 0 3
47586: IFFALSE 47602
// SetBName ( base_dep , name ) ;
47588: LD_VAR 0 1
47592: PPUSH
47593: LD_VAR 0 3
47597: PPUSH
47598: CALL_OW 500
// base := GetBase ( base_dep ) ;
47602: LD_ADDR_VAR 0 15
47606: PUSH
47607: LD_VAR 0 1
47611: PPUSH
47612: CALL_OW 274
47616: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47617: LD_ADDR_VAR 0 16
47621: PUSH
47622: LD_VAR 0 1
47626: PPUSH
47627: CALL_OW 255
47631: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47632: LD_ADDR_VAR 0 17
47636: PUSH
47637: LD_VAR 0 1
47641: PPUSH
47642: CALL_OW 248
47646: ST_TO_ADDR
// if sources then
47647: LD_VAR 0 5
47651: IFFALSE 47698
// for i = 1 to 3 do
47653: LD_ADDR_VAR 0 8
47657: PUSH
47658: DOUBLE
47659: LD_INT 1
47661: DEC
47662: ST_TO_ADDR
47663: LD_INT 3
47665: PUSH
47666: FOR_TO
47667: IFFALSE 47696
// AddResourceType ( base , i , sources [ i ] ) ;
47669: LD_VAR 0 15
47673: PPUSH
47674: LD_VAR 0 8
47678: PPUSH
47679: LD_VAR 0 5
47683: PUSH
47684: LD_VAR 0 8
47688: ARRAY
47689: PPUSH
47690: CALL_OW 276
47694: GO 47666
47696: POP
47697: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47698: LD_ADDR_VAR 0 18
47702: PUSH
47703: LD_VAR 0 15
47707: PPUSH
47708: LD_VAR 0 2
47712: PPUSH
47713: LD_INT 1
47715: PPUSH
47716: CALL 46959 0 3
47720: ST_TO_ADDR
// InitHc ;
47721: CALL_OW 19
// InitUc ;
47725: CALL_OW 18
// uc_side := side ;
47729: LD_ADDR_OWVAR 20
47733: PUSH
47734: LD_VAR 0 16
47738: ST_TO_ADDR
// uc_nation := nation ;
47739: LD_ADDR_OWVAR 21
47743: PUSH
47744: LD_VAR 0 17
47748: ST_TO_ADDR
// if buildings then
47749: LD_VAR 0 18
47753: IFFALSE 49075
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47755: LD_ADDR_VAR 0 19
47759: PUSH
47760: LD_VAR 0 18
47764: PPUSH
47765: LD_INT 2
47767: PUSH
47768: LD_INT 30
47770: PUSH
47771: LD_INT 29
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 30
47780: PUSH
47781: LD_INT 30
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: LIST
47792: PPUSH
47793: CALL_OW 72
47797: ST_TO_ADDR
// if tmp then
47798: LD_VAR 0 19
47802: IFFALSE 47850
// for i in tmp do
47804: LD_ADDR_VAR 0 8
47808: PUSH
47809: LD_VAR 0 19
47813: PUSH
47814: FOR_IN
47815: IFFALSE 47848
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47817: LD_VAR 0 8
47821: PPUSH
47822: CALL_OW 250
47826: PPUSH
47827: LD_VAR 0 8
47831: PPUSH
47832: CALL_OW 251
47836: PPUSH
47837: LD_VAR 0 16
47841: PPUSH
47842: CALL_OW 441
47846: GO 47814
47848: POP
47849: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47850: LD_VAR 0 18
47854: PPUSH
47855: LD_INT 2
47857: PUSH
47858: LD_INT 30
47860: PUSH
47861: LD_INT 32
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 30
47870: PUSH
47871: LD_INT 33
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: LIST
47882: PPUSH
47883: CALL_OW 72
47887: IFFALSE 47975
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47889: LD_ADDR_VAR 0 8
47893: PUSH
47894: LD_VAR 0 18
47898: PPUSH
47899: LD_INT 2
47901: PUSH
47902: LD_INT 30
47904: PUSH
47905: LD_INT 32
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 30
47914: PUSH
47915: LD_INT 33
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: LIST
47926: PPUSH
47927: CALL_OW 72
47931: PUSH
47932: FOR_IN
47933: IFFALSE 47973
// begin if not GetBWeapon ( i ) then
47935: LD_VAR 0 8
47939: PPUSH
47940: CALL_OW 269
47944: NOT
47945: IFFALSE 47971
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47947: LD_VAR 0 8
47951: PPUSH
47952: LD_VAR 0 8
47956: PPUSH
47957: LD_VAR 0 2
47961: PPUSH
47962: CALL 49221 0 2
47966: PPUSH
47967: CALL_OW 431
// end ;
47971: GO 47932
47973: POP
47974: POP
// end ; for i = 1 to personel do
47975: LD_ADDR_VAR 0 8
47979: PUSH
47980: DOUBLE
47981: LD_INT 1
47983: DEC
47984: ST_TO_ADDR
47985: LD_VAR 0 6
47989: PUSH
47990: FOR_TO
47991: IFFALSE 49055
// begin if i > 4 then
47993: LD_VAR 0 8
47997: PUSH
47998: LD_INT 4
48000: GREATER
48001: IFFALSE 48005
// break ;
48003: GO 49055
// case i of 1 :
48005: LD_VAR 0 8
48009: PUSH
48010: LD_INT 1
48012: DOUBLE
48013: EQUAL
48014: IFTRUE 48018
48016: GO 48098
48018: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48019: LD_ADDR_VAR 0 12
48023: PUSH
48024: LD_VAR 0 18
48028: PPUSH
48029: LD_INT 22
48031: PUSH
48032: LD_VAR 0 16
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 58
48043: PUSH
48044: EMPTY
48045: LIST
48046: PUSH
48047: LD_INT 2
48049: PUSH
48050: LD_INT 30
48052: PUSH
48053: LD_INT 32
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 30
48062: PUSH
48063: LD_INT 4
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 30
48072: PUSH
48073: LD_INT 5
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: LIST
48090: PPUSH
48091: CALL_OW 72
48095: ST_TO_ADDR
48096: GO 48320
48098: LD_INT 2
48100: DOUBLE
48101: EQUAL
48102: IFTRUE 48106
48104: GO 48168
48106: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48107: LD_ADDR_VAR 0 12
48111: PUSH
48112: LD_VAR 0 18
48116: PPUSH
48117: LD_INT 22
48119: PUSH
48120: LD_VAR 0 16
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 2
48131: PUSH
48132: LD_INT 30
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 30
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: LIST
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PPUSH
48161: CALL_OW 72
48165: ST_TO_ADDR
48166: GO 48320
48168: LD_INT 3
48170: DOUBLE
48171: EQUAL
48172: IFTRUE 48176
48174: GO 48238
48176: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48177: LD_ADDR_VAR 0 12
48181: PUSH
48182: LD_VAR 0 18
48186: PPUSH
48187: LD_INT 22
48189: PUSH
48190: LD_VAR 0 16
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: LD_INT 30
48204: PUSH
48205: LD_INT 2
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 30
48214: PUSH
48215: LD_INT 3
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: LIST
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PPUSH
48231: CALL_OW 72
48235: ST_TO_ADDR
48236: GO 48320
48238: LD_INT 4
48240: DOUBLE
48241: EQUAL
48242: IFTRUE 48246
48244: GO 48319
48246: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48247: LD_ADDR_VAR 0 12
48251: PUSH
48252: LD_VAR 0 18
48256: PPUSH
48257: LD_INT 22
48259: PUSH
48260: LD_VAR 0 16
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: PUSH
48272: LD_INT 30
48274: PUSH
48275: LD_INT 6
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 30
48284: PUSH
48285: LD_INT 7
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 30
48294: PUSH
48295: LD_INT 8
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PPUSH
48312: CALL_OW 72
48316: ST_TO_ADDR
48317: GO 48320
48319: POP
// if i = 1 then
48320: LD_VAR 0 8
48324: PUSH
48325: LD_INT 1
48327: EQUAL
48328: IFFALSE 48439
// begin tmp := [ ] ;
48330: LD_ADDR_VAR 0 19
48334: PUSH
48335: EMPTY
48336: ST_TO_ADDR
// for j in f do
48337: LD_ADDR_VAR 0 9
48341: PUSH
48342: LD_VAR 0 12
48346: PUSH
48347: FOR_IN
48348: IFFALSE 48421
// if GetBType ( j ) = b_bunker then
48350: LD_VAR 0 9
48354: PPUSH
48355: CALL_OW 266
48359: PUSH
48360: LD_INT 32
48362: EQUAL
48363: IFFALSE 48390
// tmp := Insert ( tmp , 1 , j ) else
48365: LD_ADDR_VAR 0 19
48369: PUSH
48370: LD_VAR 0 19
48374: PPUSH
48375: LD_INT 1
48377: PPUSH
48378: LD_VAR 0 9
48382: PPUSH
48383: CALL_OW 2
48387: ST_TO_ADDR
48388: GO 48419
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48390: LD_ADDR_VAR 0 19
48394: PUSH
48395: LD_VAR 0 19
48399: PPUSH
48400: LD_VAR 0 19
48404: PUSH
48405: LD_INT 1
48407: PLUS
48408: PPUSH
48409: LD_VAR 0 9
48413: PPUSH
48414: CALL_OW 2
48418: ST_TO_ADDR
48419: GO 48347
48421: POP
48422: POP
// if tmp then
48423: LD_VAR 0 19
48427: IFFALSE 48439
// f := tmp ;
48429: LD_ADDR_VAR 0 12
48433: PUSH
48434: LD_VAR 0 19
48438: ST_TO_ADDR
// end ; x := personel [ i ] ;
48439: LD_ADDR_VAR 0 13
48443: PUSH
48444: LD_VAR 0 6
48448: PUSH
48449: LD_VAR 0 8
48453: ARRAY
48454: ST_TO_ADDR
// if x = - 1 then
48455: LD_VAR 0 13
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: EQUAL
48464: IFFALSE 48673
// begin for j in f do
48466: LD_ADDR_VAR 0 9
48470: PUSH
48471: LD_VAR 0 12
48475: PUSH
48476: FOR_IN
48477: IFFALSE 48669
// repeat InitHc ;
48479: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48483: LD_VAR 0 9
48487: PPUSH
48488: CALL_OW 266
48492: PUSH
48493: LD_INT 5
48495: EQUAL
48496: IFFALSE 48566
// begin if UnitsInside ( j ) < 3 then
48498: LD_VAR 0 9
48502: PPUSH
48503: CALL_OW 313
48507: PUSH
48508: LD_INT 3
48510: LESS
48511: IFFALSE 48547
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48513: LD_INT 0
48515: PPUSH
48516: LD_INT 5
48518: PUSH
48519: LD_INT 8
48521: PUSH
48522: LD_INT 9
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: LIST
48529: PUSH
48530: LD_VAR 0 17
48534: ARRAY
48535: PPUSH
48536: LD_VAR 0 4
48540: PPUSH
48541: CALL_OW 380
48545: GO 48564
// PrepareHuman ( false , i , skill ) ;
48547: LD_INT 0
48549: PPUSH
48550: LD_VAR 0 8
48554: PPUSH
48555: LD_VAR 0 4
48559: PPUSH
48560: CALL_OW 380
// end else
48564: GO 48583
// PrepareHuman ( false , i , skill ) ;
48566: LD_INT 0
48568: PPUSH
48569: LD_VAR 0 8
48573: PPUSH
48574: LD_VAR 0 4
48578: PPUSH
48579: CALL_OW 380
// un := CreateHuman ;
48583: LD_ADDR_VAR 0 14
48587: PUSH
48588: CALL_OW 44
48592: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48593: LD_ADDR_VAR 0 7
48597: PUSH
48598: LD_VAR 0 7
48602: PPUSH
48603: LD_INT 1
48605: PPUSH
48606: LD_VAR 0 14
48610: PPUSH
48611: CALL_OW 2
48615: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48616: LD_VAR 0 14
48620: PPUSH
48621: LD_VAR 0 9
48625: PPUSH
48626: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48630: LD_VAR 0 9
48634: PPUSH
48635: CALL_OW 313
48639: PUSH
48640: LD_INT 6
48642: EQUAL
48643: PUSH
48644: LD_VAR 0 9
48648: PPUSH
48649: CALL_OW 266
48653: PUSH
48654: LD_INT 32
48656: PUSH
48657: LD_INT 31
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: IN
48664: OR
48665: IFFALSE 48479
48667: GO 48476
48669: POP
48670: POP
// end else
48671: GO 49053
// for j = 1 to x do
48673: LD_ADDR_VAR 0 9
48677: PUSH
48678: DOUBLE
48679: LD_INT 1
48681: DEC
48682: ST_TO_ADDR
48683: LD_VAR 0 13
48687: PUSH
48688: FOR_TO
48689: IFFALSE 49051
// begin InitHc ;
48691: CALL_OW 19
// if not f then
48695: LD_VAR 0 12
48699: NOT
48700: IFFALSE 48789
// begin PrepareHuman ( false , i , skill ) ;
48702: LD_INT 0
48704: PPUSH
48705: LD_VAR 0 8
48709: PPUSH
48710: LD_VAR 0 4
48714: PPUSH
48715: CALL_OW 380
// un := CreateHuman ;
48719: LD_ADDR_VAR 0 14
48723: PUSH
48724: CALL_OW 44
48728: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48729: LD_ADDR_VAR 0 7
48733: PUSH
48734: LD_VAR 0 7
48738: PPUSH
48739: LD_INT 1
48741: PPUSH
48742: LD_VAR 0 14
48746: PPUSH
48747: CALL_OW 2
48751: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48752: LD_VAR 0 14
48756: PPUSH
48757: LD_VAR 0 1
48761: PPUSH
48762: CALL_OW 250
48766: PPUSH
48767: LD_VAR 0 1
48771: PPUSH
48772: CALL_OW 251
48776: PPUSH
48777: LD_INT 10
48779: PPUSH
48780: LD_INT 0
48782: PPUSH
48783: CALL_OW 50
// continue ;
48787: GO 48688
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48789: LD_VAR 0 12
48793: PUSH
48794: LD_INT 1
48796: ARRAY
48797: PPUSH
48798: CALL_OW 313
48802: PUSH
48803: LD_VAR 0 12
48807: PUSH
48808: LD_INT 1
48810: ARRAY
48811: PPUSH
48812: CALL_OW 266
48816: PUSH
48817: LD_INT 32
48819: PUSH
48820: LD_INT 31
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: IN
48827: AND
48828: PUSH
48829: LD_VAR 0 12
48833: PUSH
48834: LD_INT 1
48836: ARRAY
48837: PPUSH
48838: CALL_OW 313
48842: PUSH
48843: LD_INT 6
48845: EQUAL
48846: OR
48847: IFFALSE 48867
// f := Delete ( f , 1 ) ;
48849: LD_ADDR_VAR 0 12
48853: PUSH
48854: LD_VAR 0 12
48858: PPUSH
48859: LD_INT 1
48861: PPUSH
48862: CALL_OW 3
48866: ST_TO_ADDR
// if not f then
48867: LD_VAR 0 12
48871: NOT
48872: IFFALSE 48890
// begin x := x + 2 ;
48874: LD_ADDR_VAR 0 13
48878: PUSH
48879: LD_VAR 0 13
48883: PUSH
48884: LD_INT 2
48886: PLUS
48887: ST_TO_ADDR
// continue ;
48888: GO 48688
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48890: LD_VAR 0 12
48894: PUSH
48895: LD_INT 1
48897: ARRAY
48898: PPUSH
48899: CALL_OW 266
48903: PUSH
48904: LD_INT 5
48906: EQUAL
48907: IFFALSE 48981
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48909: LD_VAR 0 12
48913: PUSH
48914: LD_INT 1
48916: ARRAY
48917: PPUSH
48918: CALL_OW 313
48922: PUSH
48923: LD_INT 3
48925: LESS
48926: IFFALSE 48962
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48928: LD_INT 0
48930: PPUSH
48931: LD_INT 5
48933: PUSH
48934: LD_INT 8
48936: PUSH
48937: LD_INT 9
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: LIST
48944: PUSH
48945: LD_VAR 0 17
48949: ARRAY
48950: PPUSH
48951: LD_VAR 0 4
48955: PPUSH
48956: CALL_OW 380
48960: GO 48979
// PrepareHuman ( false , i , skill ) ;
48962: LD_INT 0
48964: PPUSH
48965: LD_VAR 0 8
48969: PPUSH
48970: LD_VAR 0 4
48974: PPUSH
48975: CALL_OW 380
// end else
48979: GO 48998
// PrepareHuman ( false , i , skill ) ;
48981: LD_INT 0
48983: PPUSH
48984: LD_VAR 0 8
48988: PPUSH
48989: LD_VAR 0 4
48993: PPUSH
48994: CALL_OW 380
// un := CreateHuman ;
48998: LD_ADDR_VAR 0 14
49002: PUSH
49003: CALL_OW 44
49007: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49008: LD_ADDR_VAR 0 7
49012: PUSH
49013: LD_VAR 0 7
49017: PPUSH
49018: LD_INT 1
49020: PPUSH
49021: LD_VAR 0 14
49025: PPUSH
49026: CALL_OW 2
49030: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49031: LD_VAR 0 14
49035: PPUSH
49036: LD_VAR 0 12
49040: PUSH
49041: LD_INT 1
49043: ARRAY
49044: PPUSH
49045: CALL_OW 52
// end ;
49049: GO 48688
49051: POP
49052: POP
// end ;
49053: GO 47990
49055: POP
49056: POP
// result := result ^ buildings ;
49057: LD_ADDR_VAR 0 7
49061: PUSH
49062: LD_VAR 0 7
49066: PUSH
49067: LD_VAR 0 18
49071: ADD
49072: ST_TO_ADDR
// end else
49073: GO 49216
// begin for i = 1 to personel do
49075: LD_ADDR_VAR 0 8
49079: PUSH
49080: DOUBLE
49081: LD_INT 1
49083: DEC
49084: ST_TO_ADDR
49085: LD_VAR 0 6
49089: PUSH
49090: FOR_TO
49091: IFFALSE 49214
// begin if i > 4 then
49093: LD_VAR 0 8
49097: PUSH
49098: LD_INT 4
49100: GREATER
49101: IFFALSE 49105
// break ;
49103: GO 49214
// x := personel [ i ] ;
49105: LD_ADDR_VAR 0 13
49109: PUSH
49110: LD_VAR 0 6
49114: PUSH
49115: LD_VAR 0 8
49119: ARRAY
49120: ST_TO_ADDR
// if x = - 1 then
49121: LD_VAR 0 13
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: EQUAL
49130: IFFALSE 49134
// continue ;
49132: GO 49090
// PrepareHuman ( false , i , skill ) ;
49134: LD_INT 0
49136: PPUSH
49137: LD_VAR 0 8
49141: PPUSH
49142: LD_VAR 0 4
49146: PPUSH
49147: CALL_OW 380
// un := CreateHuman ;
49151: LD_ADDR_VAR 0 14
49155: PUSH
49156: CALL_OW 44
49160: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49161: LD_VAR 0 14
49165: PPUSH
49166: LD_VAR 0 1
49170: PPUSH
49171: CALL_OW 250
49175: PPUSH
49176: LD_VAR 0 1
49180: PPUSH
49181: CALL_OW 251
49185: PPUSH
49186: LD_INT 10
49188: PPUSH
49189: LD_INT 0
49191: PPUSH
49192: CALL_OW 50
// result := result ^ un ;
49196: LD_ADDR_VAR 0 7
49200: PUSH
49201: LD_VAR 0 7
49205: PUSH
49206: LD_VAR 0 14
49210: ADD
49211: ST_TO_ADDR
// end ;
49212: GO 49090
49214: POP
49215: POP
// end ; end ;
49216: LD_VAR 0 7
49220: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49221: LD_INT 0
49223: PPUSH
49224: PPUSH
49225: PPUSH
49226: PPUSH
49227: PPUSH
49228: PPUSH
49229: PPUSH
49230: PPUSH
49231: PPUSH
49232: PPUSH
49233: PPUSH
49234: PPUSH
49235: PPUSH
49236: PPUSH
49237: PPUSH
49238: PPUSH
// result := false ;
49239: LD_ADDR_VAR 0 3
49243: PUSH
49244: LD_INT 0
49246: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49247: LD_VAR 0 1
49251: NOT
49252: PUSH
49253: LD_VAR 0 1
49257: PPUSH
49258: CALL_OW 266
49262: PUSH
49263: LD_INT 32
49265: PUSH
49266: LD_INT 33
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: IN
49273: NOT
49274: OR
49275: IFFALSE 49279
// exit ;
49277: GO 50388
// nat := GetNation ( tower ) ;
49279: LD_ADDR_VAR 0 12
49283: PUSH
49284: LD_VAR 0 1
49288: PPUSH
49289: CALL_OW 248
49293: ST_TO_ADDR
// side := GetSide ( tower ) ;
49294: LD_ADDR_VAR 0 16
49298: PUSH
49299: LD_VAR 0 1
49303: PPUSH
49304: CALL_OW 255
49308: ST_TO_ADDR
// x := GetX ( tower ) ;
49309: LD_ADDR_VAR 0 10
49313: PUSH
49314: LD_VAR 0 1
49318: PPUSH
49319: CALL_OW 250
49323: ST_TO_ADDR
// y := GetY ( tower ) ;
49324: LD_ADDR_VAR 0 11
49328: PUSH
49329: LD_VAR 0 1
49333: PPUSH
49334: CALL_OW 251
49338: ST_TO_ADDR
// if not x or not y then
49339: LD_VAR 0 10
49343: NOT
49344: PUSH
49345: LD_VAR 0 11
49349: NOT
49350: OR
49351: IFFALSE 49355
// exit ;
49353: GO 50388
// weapon := 0 ;
49355: LD_ADDR_VAR 0 18
49359: PUSH
49360: LD_INT 0
49362: ST_TO_ADDR
// fac_list := [ ] ;
49363: LD_ADDR_VAR 0 17
49367: PUSH
49368: EMPTY
49369: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49370: LD_ADDR_VAR 0 6
49374: PUSH
49375: LD_VAR 0 1
49379: PPUSH
49380: CALL_OW 274
49384: PPUSH
49385: LD_VAR 0 2
49389: PPUSH
49390: LD_INT 0
49392: PPUSH
49393: CALL 46959 0 3
49397: PPUSH
49398: LD_INT 30
49400: PUSH
49401: LD_INT 3
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PPUSH
49408: CALL_OW 72
49412: ST_TO_ADDR
// if not factories then
49413: LD_VAR 0 6
49417: NOT
49418: IFFALSE 49422
// exit ;
49420: GO 50388
// for i in factories do
49422: LD_ADDR_VAR 0 8
49426: PUSH
49427: LD_VAR 0 6
49431: PUSH
49432: FOR_IN
49433: IFFALSE 49458
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49435: LD_ADDR_VAR 0 17
49439: PUSH
49440: LD_VAR 0 17
49444: PUSH
49445: LD_VAR 0 8
49449: PPUSH
49450: CALL_OW 478
49454: UNION
49455: ST_TO_ADDR
49456: GO 49432
49458: POP
49459: POP
// if not fac_list then
49460: LD_VAR 0 17
49464: NOT
49465: IFFALSE 49469
// exit ;
49467: GO 50388
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49469: LD_ADDR_VAR 0 5
49473: PUSH
49474: LD_INT 4
49476: PUSH
49477: LD_INT 5
49479: PUSH
49480: LD_INT 9
49482: PUSH
49483: LD_INT 10
49485: PUSH
49486: LD_INT 6
49488: PUSH
49489: LD_INT 7
49491: PUSH
49492: LD_INT 11
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 27
49506: PUSH
49507: LD_INT 28
49509: PUSH
49510: LD_INT 26
49512: PUSH
49513: LD_INT 30
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 43
49524: PUSH
49525: LD_INT 44
49527: PUSH
49528: LD_INT 46
49530: PUSH
49531: LD_INT 45
49533: PUSH
49534: LD_INT 47
49536: PUSH
49537: LD_INT 49
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: LIST
49552: PUSH
49553: LD_VAR 0 12
49557: ARRAY
49558: ST_TO_ADDR
// list := list isect fac_list ;
49559: LD_ADDR_VAR 0 5
49563: PUSH
49564: LD_VAR 0 5
49568: PUSH
49569: LD_VAR 0 17
49573: ISECT
49574: ST_TO_ADDR
// if not list then
49575: LD_VAR 0 5
49579: NOT
49580: IFFALSE 49584
// exit ;
49582: GO 50388
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49584: LD_VAR 0 12
49588: PUSH
49589: LD_INT 3
49591: EQUAL
49592: PUSH
49593: LD_INT 49
49595: PUSH
49596: LD_VAR 0 5
49600: IN
49601: AND
49602: PUSH
49603: LD_INT 31
49605: PPUSH
49606: LD_VAR 0 16
49610: PPUSH
49611: CALL_OW 321
49615: PUSH
49616: LD_INT 2
49618: EQUAL
49619: AND
49620: IFFALSE 49680
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49622: LD_INT 22
49624: PUSH
49625: LD_VAR 0 16
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 35
49636: PUSH
49637: LD_INT 49
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 91
49646: PUSH
49647: LD_VAR 0 1
49651: PUSH
49652: LD_INT 10
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: LIST
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: LIST
49664: PPUSH
49665: CALL_OW 69
49669: NOT
49670: IFFALSE 49680
// weapon := ru_time_lapser ;
49672: LD_ADDR_VAR 0 18
49676: PUSH
49677: LD_INT 49
49679: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49680: LD_VAR 0 12
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: LD_INT 2
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: IN
49695: PUSH
49696: LD_INT 11
49698: PUSH
49699: LD_VAR 0 5
49703: IN
49704: PUSH
49705: LD_INT 30
49707: PUSH
49708: LD_VAR 0 5
49712: IN
49713: OR
49714: AND
49715: PUSH
49716: LD_INT 6
49718: PPUSH
49719: LD_VAR 0 16
49723: PPUSH
49724: CALL_OW 321
49728: PUSH
49729: LD_INT 2
49731: EQUAL
49732: AND
49733: IFFALSE 49898
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49735: LD_INT 22
49737: PUSH
49738: LD_VAR 0 16
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 2
49749: PUSH
49750: LD_INT 35
49752: PUSH
49753: LD_INT 11
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 35
49762: PUSH
49763: LD_INT 30
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 91
49777: PUSH
49778: LD_VAR 0 1
49782: PUSH
49783: LD_INT 18
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: LIST
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: LIST
49795: PPUSH
49796: CALL_OW 69
49800: NOT
49801: PUSH
49802: LD_INT 22
49804: PUSH
49805: LD_VAR 0 16
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 2
49816: PUSH
49817: LD_INT 30
49819: PUSH
49820: LD_INT 32
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 30
49829: PUSH
49830: LD_INT 33
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 91
49844: PUSH
49845: LD_VAR 0 1
49849: PUSH
49850: LD_INT 12
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: LIST
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: LIST
49862: PUSH
49863: EMPTY
49864: LIST
49865: PPUSH
49866: CALL_OW 69
49870: PUSH
49871: LD_INT 2
49873: GREATER
49874: AND
49875: IFFALSE 49898
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49877: LD_ADDR_VAR 0 18
49881: PUSH
49882: LD_INT 11
49884: PUSH
49885: LD_INT 30
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_VAR 0 12
49896: ARRAY
49897: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49898: LD_VAR 0 18
49902: NOT
49903: PUSH
49904: LD_INT 40
49906: PPUSH
49907: LD_VAR 0 16
49911: PPUSH
49912: CALL_OW 321
49916: PUSH
49917: LD_INT 2
49919: EQUAL
49920: AND
49921: PUSH
49922: LD_INT 7
49924: PUSH
49925: LD_VAR 0 5
49929: IN
49930: PUSH
49931: LD_INT 28
49933: PUSH
49934: LD_VAR 0 5
49938: IN
49939: OR
49940: PUSH
49941: LD_INT 45
49943: PUSH
49944: LD_VAR 0 5
49948: IN
49949: OR
49950: AND
49951: IFFALSE 50205
// begin hex := GetHexInfo ( x , y ) ;
49953: LD_ADDR_VAR 0 4
49957: PUSH
49958: LD_VAR 0 10
49962: PPUSH
49963: LD_VAR 0 11
49967: PPUSH
49968: CALL_OW 546
49972: ST_TO_ADDR
// if hex [ 1 ] then
49973: LD_VAR 0 4
49977: PUSH
49978: LD_INT 1
49980: ARRAY
49981: IFFALSE 49985
// exit ;
49983: GO 50388
// height := hex [ 2 ] ;
49985: LD_ADDR_VAR 0 15
49989: PUSH
49990: LD_VAR 0 4
49994: PUSH
49995: LD_INT 2
49997: ARRAY
49998: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49999: LD_ADDR_VAR 0 14
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: LD_INT 2
50009: PUSH
50010: LD_INT 3
50012: PUSH
50013: LD_INT 5
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: ST_TO_ADDR
// for i in tmp do
50022: LD_ADDR_VAR 0 8
50026: PUSH
50027: LD_VAR 0 14
50031: PUSH
50032: FOR_IN
50033: IFFALSE 50203
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50035: LD_ADDR_VAR 0 9
50039: PUSH
50040: LD_VAR 0 10
50044: PPUSH
50045: LD_VAR 0 8
50049: PPUSH
50050: LD_INT 5
50052: PPUSH
50053: CALL_OW 272
50057: PUSH
50058: LD_VAR 0 11
50062: PPUSH
50063: LD_VAR 0 8
50067: PPUSH
50068: LD_INT 5
50070: PPUSH
50071: CALL_OW 273
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50080: LD_VAR 0 9
50084: PUSH
50085: LD_INT 1
50087: ARRAY
50088: PPUSH
50089: LD_VAR 0 9
50093: PUSH
50094: LD_INT 2
50096: ARRAY
50097: PPUSH
50098: CALL_OW 488
50102: IFFALSE 50201
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50104: LD_ADDR_VAR 0 4
50108: PUSH
50109: LD_VAR 0 9
50113: PUSH
50114: LD_INT 1
50116: ARRAY
50117: PPUSH
50118: LD_VAR 0 9
50122: PUSH
50123: LD_INT 2
50125: ARRAY
50126: PPUSH
50127: CALL_OW 546
50131: ST_TO_ADDR
// if hex [ 1 ] then
50132: LD_VAR 0 4
50136: PUSH
50137: LD_INT 1
50139: ARRAY
50140: IFFALSE 50144
// continue ;
50142: GO 50032
// h := hex [ 2 ] ;
50144: LD_ADDR_VAR 0 13
50148: PUSH
50149: LD_VAR 0 4
50153: PUSH
50154: LD_INT 2
50156: ARRAY
50157: ST_TO_ADDR
// if h + 7 < height then
50158: LD_VAR 0 13
50162: PUSH
50163: LD_INT 7
50165: PLUS
50166: PUSH
50167: LD_VAR 0 15
50171: LESS
50172: IFFALSE 50201
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50174: LD_ADDR_VAR 0 18
50178: PUSH
50179: LD_INT 7
50181: PUSH
50182: LD_INT 28
50184: PUSH
50185: LD_INT 45
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: LIST
50192: PUSH
50193: LD_VAR 0 12
50197: ARRAY
50198: ST_TO_ADDR
// break ;
50199: GO 50203
// end ; end ; end ;
50201: GO 50032
50203: POP
50204: POP
// end ; if not weapon then
50205: LD_VAR 0 18
50209: NOT
50210: IFFALSE 50270
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50212: LD_ADDR_VAR 0 5
50216: PUSH
50217: LD_VAR 0 5
50221: PUSH
50222: LD_INT 11
50224: PUSH
50225: LD_INT 30
50227: PUSH
50228: LD_INT 49
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: LIST
50235: DIFF
50236: ST_TO_ADDR
// if not list then
50237: LD_VAR 0 5
50241: NOT
50242: IFFALSE 50246
// exit ;
50244: GO 50388
// weapon := list [ rand ( 1 , list ) ] ;
50246: LD_ADDR_VAR 0 18
50250: PUSH
50251: LD_VAR 0 5
50255: PUSH
50256: LD_INT 1
50258: PPUSH
50259: LD_VAR 0 5
50263: PPUSH
50264: CALL_OW 12
50268: ARRAY
50269: ST_TO_ADDR
// end ; if weapon then
50270: LD_VAR 0 18
50274: IFFALSE 50388
// begin tmp := CostOfWeapon ( weapon ) ;
50276: LD_ADDR_VAR 0 14
50280: PUSH
50281: LD_VAR 0 18
50285: PPUSH
50286: CALL_OW 451
50290: ST_TO_ADDR
// j := GetBase ( tower ) ;
50291: LD_ADDR_VAR 0 9
50295: PUSH
50296: LD_VAR 0 1
50300: PPUSH
50301: CALL_OW 274
50305: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50306: LD_VAR 0 9
50310: PPUSH
50311: LD_INT 1
50313: PPUSH
50314: CALL_OW 275
50318: PUSH
50319: LD_VAR 0 14
50323: PUSH
50324: LD_INT 1
50326: ARRAY
50327: GREATEREQUAL
50328: PUSH
50329: LD_VAR 0 9
50333: PPUSH
50334: LD_INT 2
50336: PPUSH
50337: CALL_OW 275
50341: PUSH
50342: LD_VAR 0 14
50346: PUSH
50347: LD_INT 2
50349: ARRAY
50350: GREATEREQUAL
50351: AND
50352: PUSH
50353: LD_VAR 0 9
50357: PPUSH
50358: LD_INT 3
50360: PPUSH
50361: CALL_OW 275
50365: PUSH
50366: LD_VAR 0 14
50370: PUSH
50371: LD_INT 3
50373: ARRAY
50374: GREATEREQUAL
50375: AND
50376: IFFALSE 50388
// result := weapon ;
50378: LD_ADDR_VAR 0 3
50382: PUSH
50383: LD_VAR 0 18
50387: ST_TO_ADDR
// end ; end ;
50388: LD_VAR 0 3
50392: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50393: LD_INT 0
50395: PPUSH
50396: PPUSH
// result := true ;
50397: LD_ADDR_VAR 0 3
50401: PUSH
50402: LD_INT 1
50404: ST_TO_ADDR
// if array1 = array2 then
50405: LD_VAR 0 1
50409: PUSH
50410: LD_VAR 0 2
50414: EQUAL
50415: IFFALSE 50475
// begin for i = 1 to array1 do
50417: LD_ADDR_VAR 0 4
50421: PUSH
50422: DOUBLE
50423: LD_INT 1
50425: DEC
50426: ST_TO_ADDR
50427: LD_VAR 0 1
50431: PUSH
50432: FOR_TO
50433: IFFALSE 50471
// if array1 [ i ] <> array2 [ i ] then
50435: LD_VAR 0 1
50439: PUSH
50440: LD_VAR 0 4
50444: ARRAY
50445: PUSH
50446: LD_VAR 0 2
50450: PUSH
50451: LD_VAR 0 4
50455: ARRAY
50456: NONEQUAL
50457: IFFALSE 50469
// begin result := false ;
50459: LD_ADDR_VAR 0 3
50463: PUSH
50464: LD_INT 0
50466: ST_TO_ADDR
// break ;
50467: GO 50471
// end ;
50469: GO 50432
50471: POP
50472: POP
// end else
50473: GO 50483
// result := false ;
50475: LD_ADDR_VAR 0 3
50479: PUSH
50480: LD_INT 0
50482: ST_TO_ADDR
// end ;
50483: LD_VAR 0 3
50487: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50488: LD_INT 0
50490: PPUSH
50491: PPUSH
// if not array1 or not array2 then
50492: LD_VAR 0 1
50496: NOT
50497: PUSH
50498: LD_VAR 0 2
50502: NOT
50503: OR
50504: IFFALSE 50508
// exit ;
50506: GO 50572
// result := true ;
50508: LD_ADDR_VAR 0 3
50512: PUSH
50513: LD_INT 1
50515: ST_TO_ADDR
// for i = 1 to array1 do
50516: LD_ADDR_VAR 0 4
50520: PUSH
50521: DOUBLE
50522: LD_INT 1
50524: DEC
50525: ST_TO_ADDR
50526: LD_VAR 0 1
50530: PUSH
50531: FOR_TO
50532: IFFALSE 50570
// if array1 [ i ] <> array2 [ i ] then
50534: LD_VAR 0 1
50538: PUSH
50539: LD_VAR 0 4
50543: ARRAY
50544: PUSH
50545: LD_VAR 0 2
50549: PUSH
50550: LD_VAR 0 4
50554: ARRAY
50555: NONEQUAL
50556: IFFALSE 50568
// begin result := false ;
50558: LD_ADDR_VAR 0 3
50562: PUSH
50563: LD_INT 0
50565: ST_TO_ADDR
// break ;
50566: GO 50570
// end ;
50568: GO 50531
50570: POP
50571: POP
// end ;
50572: LD_VAR 0 3
50576: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50577: LD_INT 0
50579: PPUSH
50580: PPUSH
50581: PPUSH
// pom := GetBase ( fac ) ;
50582: LD_ADDR_VAR 0 5
50586: PUSH
50587: LD_VAR 0 1
50591: PPUSH
50592: CALL_OW 274
50596: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50597: LD_ADDR_VAR 0 4
50601: PUSH
50602: LD_VAR 0 2
50606: PUSH
50607: LD_INT 1
50609: ARRAY
50610: PPUSH
50611: LD_VAR 0 2
50615: PUSH
50616: LD_INT 2
50618: ARRAY
50619: PPUSH
50620: LD_VAR 0 2
50624: PUSH
50625: LD_INT 3
50627: ARRAY
50628: PPUSH
50629: LD_VAR 0 2
50633: PUSH
50634: LD_INT 4
50636: ARRAY
50637: PPUSH
50638: CALL_OW 449
50642: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50643: LD_ADDR_VAR 0 3
50647: PUSH
50648: LD_VAR 0 5
50652: PPUSH
50653: LD_INT 1
50655: PPUSH
50656: CALL_OW 275
50660: PUSH
50661: LD_VAR 0 4
50665: PUSH
50666: LD_INT 1
50668: ARRAY
50669: GREATEREQUAL
50670: PUSH
50671: LD_VAR 0 5
50675: PPUSH
50676: LD_INT 2
50678: PPUSH
50679: CALL_OW 275
50683: PUSH
50684: LD_VAR 0 4
50688: PUSH
50689: LD_INT 2
50691: ARRAY
50692: GREATEREQUAL
50693: AND
50694: PUSH
50695: LD_VAR 0 5
50699: PPUSH
50700: LD_INT 3
50702: PPUSH
50703: CALL_OW 275
50707: PUSH
50708: LD_VAR 0 4
50712: PUSH
50713: LD_INT 3
50715: ARRAY
50716: GREATEREQUAL
50717: AND
50718: ST_TO_ADDR
// end ;
50719: LD_VAR 0 3
50723: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50724: LD_INT 0
50726: PPUSH
50727: PPUSH
50728: PPUSH
50729: PPUSH
// pom := GetBase ( building ) ;
50730: LD_ADDR_VAR 0 3
50734: PUSH
50735: LD_VAR 0 1
50739: PPUSH
50740: CALL_OW 274
50744: ST_TO_ADDR
// if not pom then
50745: LD_VAR 0 3
50749: NOT
50750: IFFALSE 50754
// exit ;
50752: GO 50924
// btype := GetBType ( building ) ;
50754: LD_ADDR_VAR 0 5
50758: PUSH
50759: LD_VAR 0 1
50763: PPUSH
50764: CALL_OW 266
50768: ST_TO_ADDR
// if btype = b_armoury then
50769: LD_VAR 0 5
50773: PUSH
50774: LD_INT 4
50776: EQUAL
50777: IFFALSE 50787
// btype := b_barracks ;
50779: LD_ADDR_VAR 0 5
50783: PUSH
50784: LD_INT 5
50786: ST_TO_ADDR
// if btype = b_depot then
50787: LD_VAR 0 5
50791: PUSH
50792: LD_INT 0
50794: EQUAL
50795: IFFALSE 50805
// btype := b_warehouse ;
50797: LD_ADDR_VAR 0 5
50801: PUSH
50802: LD_INT 1
50804: ST_TO_ADDR
// if btype = b_workshop then
50805: LD_VAR 0 5
50809: PUSH
50810: LD_INT 2
50812: EQUAL
50813: IFFALSE 50823
// btype := b_factory ;
50815: LD_ADDR_VAR 0 5
50819: PUSH
50820: LD_INT 3
50822: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50823: LD_ADDR_VAR 0 4
50827: PUSH
50828: LD_VAR 0 5
50832: PPUSH
50833: LD_VAR 0 1
50837: PPUSH
50838: CALL_OW 248
50842: PPUSH
50843: CALL_OW 450
50847: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50848: LD_ADDR_VAR 0 2
50852: PUSH
50853: LD_VAR 0 3
50857: PPUSH
50858: LD_INT 1
50860: PPUSH
50861: CALL_OW 275
50865: PUSH
50866: LD_VAR 0 4
50870: PUSH
50871: LD_INT 1
50873: ARRAY
50874: GREATEREQUAL
50875: PUSH
50876: LD_VAR 0 3
50880: PPUSH
50881: LD_INT 2
50883: PPUSH
50884: CALL_OW 275
50888: PUSH
50889: LD_VAR 0 4
50893: PUSH
50894: LD_INT 2
50896: ARRAY
50897: GREATEREQUAL
50898: AND
50899: PUSH
50900: LD_VAR 0 3
50904: PPUSH
50905: LD_INT 3
50907: PPUSH
50908: CALL_OW 275
50912: PUSH
50913: LD_VAR 0 4
50917: PUSH
50918: LD_INT 3
50920: ARRAY
50921: GREATEREQUAL
50922: AND
50923: ST_TO_ADDR
// end ;
50924: LD_VAR 0 2
50928: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50929: LD_INT 0
50931: PPUSH
50932: PPUSH
50933: PPUSH
// pom := GetBase ( building ) ;
50934: LD_ADDR_VAR 0 4
50938: PUSH
50939: LD_VAR 0 1
50943: PPUSH
50944: CALL_OW 274
50948: ST_TO_ADDR
// if not pom then
50949: LD_VAR 0 4
50953: NOT
50954: IFFALSE 50958
// exit ;
50956: GO 51059
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50958: LD_ADDR_VAR 0 5
50962: PUSH
50963: LD_VAR 0 2
50967: PPUSH
50968: LD_VAR 0 1
50972: PPUSH
50973: CALL_OW 248
50977: PPUSH
50978: CALL_OW 450
50982: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50983: LD_ADDR_VAR 0 3
50987: PUSH
50988: LD_VAR 0 4
50992: PPUSH
50993: LD_INT 1
50995: PPUSH
50996: CALL_OW 275
51000: PUSH
51001: LD_VAR 0 5
51005: PUSH
51006: LD_INT 1
51008: ARRAY
51009: GREATEREQUAL
51010: PUSH
51011: LD_VAR 0 4
51015: PPUSH
51016: LD_INT 2
51018: PPUSH
51019: CALL_OW 275
51023: PUSH
51024: LD_VAR 0 5
51028: PUSH
51029: LD_INT 2
51031: ARRAY
51032: GREATEREQUAL
51033: AND
51034: PUSH
51035: LD_VAR 0 4
51039: PPUSH
51040: LD_INT 3
51042: PPUSH
51043: CALL_OW 275
51047: PUSH
51048: LD_VAR 0 5
51052: PUSH
51053: LD_INT 3
51055: ARRAY
51056: GREATEREQUAL
51057: AND
51058: ST_TO_ADDR
// end ;
51059: LD_VAR 0 3
51063: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51064: LD_INT 0
51066: PPUSH
51067: PPUSH
51068: PPUSH
51069: PPUSH
51070: PPUSH
51071: PPUSH
51072: PPUSH
51073: PPUSH
51074: PPUSH
51075: PPUSH
51076: PPUSH
// result := false ;
51077: LD_ADDR_VAR 0 8
51081: PUSH
51082: LD_INT 0
51084: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51085: LD_VAR 0 5
51089: NOT
51090: PUSH
51091: LD_VAR 0 1
51095: NOT
51096: OR
51097: PUSH
51098: LD_VAR 0 2
51102: NOT
51103: OR
51104: PUSH
51105: LD_VAR 0 3
51109: NOT
51110: OR
51111: IFFALSE 51115
// exit ;
51113: GO 51929
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51115: LD_ADDR_VAR 0 14
51119: PUSH
51120: LD_VAR 0 1
51124: PPUSH
51125: LD_VAR 0 2
51129: PPUSH
51130: LD_VAR 0 3
51134: PPUSH
51135: LD_VAR 0 4
51139: PPUSH
51140: LD_VAR 0 5
51144: PUSH
51145: LD_INT 1
51147: ARRAY
51148: PPUSH
51149: CALL_OW 248
51153: PPUSH
51154: LD_INT 0
51156: PPUSH
51157: CALL 53162 0 6
51161: ST_TO_ADDR
// if not hexes then
51162: LD_VAR 0 14
51166: NOT
51167: IFFALSE 51171
// exit ;
51169: GO 51929
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51171: LD_ADDR_VAR 0 17
51175: PUSH
51176: LD_VAR 0 5
51180: PPUSH
51181: LD_INT 22
51183: PUSH
51184: LD_VAR 0 13
51188: PPUSH
51189: CALL_OW 255
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 2
51200: PUSH
51201: LD_INT 30
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 30
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: LIST
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PPUSH
51230: CALL_OW 72
51234: ST_TO_ADDR
// for i = 1 to hexes do
51235: LD_ADDR_VAR 0 9
51239: PUSH
51240: DOUBLE
51241: LD_INT 1
51243: DEC
51244: ST_TO_ADDR
51245: LD_VAR 0 14
51249: PUSH
51250: FOR_TO
51251: IFFALSE 51927
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51253: LD_ADDR_VAR 0 13
51257: PUSH
51258: LD_VAR 0 14
51262: PUSH
51263: LD_VAR 0 9
51267: ARRAY
51268: PUSH
51269: LD_INT 1
51271: ARRAY
51272: PPUSH
51273: LD_VAR 0 14
51277: PUSH
51278: LD_VAR 0 9
51282: ARRAY
51283: PUSH
51284: LD_INT 2
51286: ARRAY
51287: PPUSH
51288: CALL_OW 428
51292: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51293: LD_VAR 0 14
51297: PUSH
51298: LD_VAR 0 9
51302: ARRAY
51303: PUSH
51304: LD_INT 1
51306: ARRAY
51307: PPUSH
51308: LD_VAR 0 14
51312: PUSH
51313: LD_VAR 0 9
51317: ARRAY
51318: PUSH
51319: LD_INT 2
51321: ARRAY
51322: PPUSH
51323: CALL_OW 351
51327: PUSH
51328: LD_VAR 0 14
51332: PUSH
51333: LD_VAR 0 9
51337: ARRAY
51338: PUSH
51339: LD_INT 1
51341: ARRAY
51342: PPUSH
51343: LD_VAR 0 14
51347: PUSH
51348: LD_VAR 0 9
51352: ARRAY
51353: PUSH
51354: LD_INT 2
51356: ARRAY
51357: PPUSH
51358: CALL_OW 488
51362: NOT
51363: OR
51364: PUSH
51365: LD_VAR 0 13
51369: PPUSH
51370: CALL_OW 247
51374: PUSH
51375: LD_INT 3
51377: EQUAL
51378: OR
51379: IFFALSE 51385
// exit ;
51381: POP
51382: POP
51383: GO 51929
// if not tmp then
51385: LD_VAR 0 13
51389: NOT
51390: IFFALSE 51394
// continue ;
51392: GO 51250
// result := true ;
51394: LD_ADDR_VAR 0 8
51398: PUSH
51399: LD_INT 1
51401: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51402: LD_VAR 0 6
51406: PUSH
51407: LD_VAR 0 13
51411: PPUSH
51412: CALL_OW 247
51416: PUSH
51417: LD_INT 2
51419: EQUAL
51420: AND
51421: PUSH
51422: LD_VAR 0 13
51426: PPUSH
51427: CALL_OW 263
51431: PUSH
51432: LD_INT 1
51434: EQUAL
51435: AND
51436: IFFALSE 51600
// begin if IsDrivenBy ( tmp ) then
51438: LD_VAR 0 13
51442: PPUSH
51443: CALL_OW 311
51447: IFFALSE 51451
// continue ;
51449: GO 51250
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51451: LD_VAR 0 6
51455: PPUSH
51456: LD_INT 3
51458: PUSH
51459: LD_INT 60
51461: PUSH
51462: EMPTY
51463: LIST
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 3
51471: PUSH
51472: LD_INT 55
51474: PUSH
51475: EMPTY
51476: LIST
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PPUSH
51486: CALL_OW 72
51490: IFFALSE 51598
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51492: LD_ADDR_VAR 0 18
51496: PUSH
51497: LD_VAR 0 6
51501: PPUSH
51502: LD_INT 3
51504: PUSH
51505: LD_INT 60
51507: PUSH
51508: EMPTY
51509: LIST
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 3
51517: PUSH
51518: LD_INT 55
51520: PUSH
51521: EMPTY
51522: LIST
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PPUSH
51532: CALL_OW 72
51536: PUSH
51537: LD_INT 1
51539: ARRAY
51540: ST_TO_ADDR
// if IsInUnit ( driver ) then
51541: LD_VAR 0 18
51545: PPUSH
51546: CALL_OW 310
51550: IFFALSE 51561
// ComExit ( driver ) ;
51552: LD_VAR 0 18
51556: PPUSH
51557: CALL 76941 0 1
// AddComEnterUnit ( driver , tmp ) ;
51561: LD_VAR 0 18
51565: PPUSH
51566: LD_VAR 0 13
51570: PPUSH
51571: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51575: LD_VAR 0 18
51579: PPUSH
51580: LD_VAR 0 7
51584: PPUSH
51585: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51589: LD_VAR 0 18
51593: PPUSH
51594: CALL_OW 181
// end ; continue ;
51598: GO 51250
// end ; if not cleaners or not tmp in cleaners then
51600: LD_VAR 0 6
51604: NOT
51605: PUSH
51606: LD_VAR 0 13
51610: PUSH
51611: LD_VAR 0 6
51615: IN
51616: NOT
51617: OR
51618: IFFALSE 51925
// begin if dep then
51620: LD_VAR 0 17
51624: IFFALSE 51760
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51626: LD_ADDR_VAR 0 16
51630: PUSH
51631: LD_VAR 0 17
51635: PUSH
51636: LD_INT 1
51638: ARRAY
51639: PPUSH
51640: CALL_OW 250
51644: PPUSH
51645: LD_VAR 0 17
51649: PUSH
51650: LD_INT 1
51652: ARRAY
51653: PPUSH
51654: CALL_OW 254
51658: PPUSH
51659: LD_INT 5
51661: PPUSH
51662: CALL_OW 272
51666: PUSH
51667: LD_VAR 0 17
51671: PUSH
51672: LD_INT 1
51674: ARRAY
51675: PPUSH
51676: CALL_OW 251
51680: PPUSH
51681: LD_VAR 0 17
51685: PUSH
51686: LD_INT 1
51688: ARRAY
51689: PPUSH
51690: CALL_OW 254
51694: PPUSH
51695: LD_INT 5
51697: PPUSH
51698: CALL_OW 273
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51707: LD_VAR 0 16
51711: PUSH
51712: LD_INT 1
51714: ARRAY
51715: PPUSH
51716: LD_VAR 0 16
51720: PUSH
51721: LD_INT 2
51723: ARRAY
51724: PPUSH
51725: CALL_OW 488
51729: IFFALSE 51760
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51731: LD_VAR 0 13
51735: PPUSH
51736: LD_VAR 0 16
51740: PUSH
51741: LD_INT 1
51743: ARRAY
51744: PPUSH
51745: LD_VAR 0 16
51749: PUSH
51750: LD_INT 2
51752: ARRAY
51753: PPUSH
51754: CALL_OW 111
// continue ;
51758: GO 51250
// end ; end ; r := GetDir ( tmp ) ;
51760: LD_ADDR_VAR 0 15
51764: PUSH
51765: LD_VAR 0 13
51769: PPUSH
51770: CALL_OW 254
51774: ST_TO_ADDR
// if r = 5 then
51775: LD_VAR 0 15
51779: PUSH
51780: LD_INT 5
51782: EQUAL
51783: IFFALSE 51793
// r := 0 ;
51785: LD_ADDR_VAR 0 15
51789: PUSH
51790: LD_INT 0
51792: ST_TO_ADDR
// for j = r to 5 do
51793: LD_ADDR_VAR 0 10
51797: PUSH
51798: DOUBLE
51799: LD_VAR 0 15
51803: DEC
51804: ST_TO_ADDR
51805: LD_INT 5
51807: PUSH
51808: FOR_TO
51809: IFFALSE 51923
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51811: LD_ADDR_VAR 0 11
51815: PUSH
51816: LD_VAR 0 13
51820: PPUSH
51821: CALL_OW 250
51825: PPUSH
51826: LD_VAR 0 10
51830: PPUSH
51831: LD_INT 2
51833: PPUSH
51834: CALL_OW 272
51838: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51839: LD_ADDR_VAR 0 12
51843: PUSH
51844: LD_VAR 0 13
51848: PPUSH
51849: CALL_OW 251
51853: PPUSH
51854: LD_VAR 0 10
51858: PPUSH
51859: LD_INT 2
51861: PPUSH
51862: CALL_OW 273
51866: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51867: LD_VAR 0 11
51871: PPUSH
51872: LD_VAR 0 12
51876: PPUSH
51877: CALL_OW 488
51881: PUSH
51882: LD_VAR 0 11
51886: PPUSH
51887: LD_VAR 0 12
51891: PPUSH
51892: CALL_OW 428
51896: NOT
51897: AND
51898: IFFALSE 51921
// begin ComMoveXY ( tmp , _x , _y ) ;
51900: LD_VAR 0 13
51904: PPUSH
51905: LD_VAR 0 11
51909: PPUSH
51910: LD_VAR 0 12
51914: PPUSH
51915: CALL_OW 111
// break ;
51919: GO 51923
// end ; end ;
51921: GO 51808
51923: POP
51924: POP
// end ; end ;
51925: GO 51250
51927: POP
51928: POP
// end ;
51929: LD_VAR 0 8
51933: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51934: LD_INT 0
51936: PPUSH
// result := true ;
51937: LD_ADDR_VAR 0 3
51941: PUSH
51942: LD_INT 1
51944: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51945: LD_VAR 0 2
51949: PUSH
51950: LD_INT 24
51952: DOUBLE
51953: EQUAL
51954: IFTRUE 51964
51956: LD_INT 33
51958: DOUBLE
51959: EQUAL
51960: IFTRUE 51964
51962: GO 51989
51964: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51965: LD_ADDR_VAR 0 3
51969: PUSH
51970: LD_INT 32
51972: PPUSH
51973: LD_VAR 0 1
51977: PPUSH
51978: CALL_OW 321
51982: PUSH
51983: LD_INT 2
51985: EQUAL
51986: ST_TO_ADDR
51987: GO 52305
51989: LD_INT 20
51991: DOUBLE
51992: EQUAL
51993: IFTRUE 51997
51995: GO 52022
51997: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51998: LD_ADDR_VAR 0 3
52002: PUSH
52003: LD_INT 6
52005: PPUSH
52006: LD_VAR 0 1
52010: PPUSH
52011: CALL_OW 321
52015: PUSH
52016: LD_INT 2
52018: EQUAL
52019: ST_TO_ADDR
52020: GO 52305
52022: LD_INT 22
52024: DOUBLE
52025: EQUAL
52026: IFTRUE 52036
52028: LD_INT 36
52030: DOUBLE
52031: EQUAL
52032: IFTRUE 52036
52034: GO 52061
52036: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52037: LD_ADDR_VAR 0 3
52041: PUSH
52042: LD_INT 15
52044: PPUSH
52045: LD_VAR 0 1
52049: PPUSH
52050: CALL_OW 321
52054: PUSH
52055: LD_INT 2
52057: EQUAL
52058: ST_TO_ADDR
52059: GO 52305
52061: LD_INT 30
52063: DOUBLE
52064: EQUAL
52065: IFTRUE 52069
52067: GO 52094
52069: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52070: LD_ADDR_VAR 0 3
52074: PUSH
52075: LD_INT 20
52077: PPUSH
52078: LD_VAR 0 1
52082: PPUSH
52083: CALL_OW 321
52087: PUSH
52088: LD_INT 2
52090: EQUAL
52091: ST_TO_ADDR
52092: GO 52305
52094: LD_INT 28
52096: DOUBLE
52097: EQUAL
52098: IFTRUE 52108
52100: LD_INT 21
52102: DOUBLE
52103: EQUAL
52104: IFTRUE 52108
52106: GO 52133
52108: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52109: LD_ADDR_VAR 0 3
52113: PUSH
52114: LD_INT 21
52116: PPUSH
52117: LD_VAR 0 1
52121: PPUSH
52122: CALL_OW 321
52126: PUSH
52127: LD_INT 2
52129: EQUAL
52130: ST_TO_ADDR
52131: GO 52305
52133: LD_INT 16
52135: DOUBLE
52136: EQUAL
52137: IFTRUE 52141
52139: GO 52166
52141: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52142: LD_ADDR_VAR 0 3
52146: PUSH
52147: LD_INT 84
52149: PPUSH
52150: LD_VAR 0 1
52154: PPUSH
52155: CALL_OW 321
52159: PUSH
52160: LD_INT 2
52162: EQUAL
52163: ST_TO_ADDR
52164: GO 52305
52166: LD_INT 19
52168: DOUBLE
52169: EQUAL
52170: IFTRUE 52180
52172: LD_INT 23
52174: DOUBLE
52175: EQUAL
52176: IFTRUE 52180
52178: GO 52205
52180: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52181: LD_ADDR_VAR 0 3
52185: PUSH
52186: LD_INT 83
52188: PPUSH
52189: LD_VAR 0 1
52193: PPUSH
52194: CALL_OW 321
52198: PUSH
52199: LD_INT 2
52201: EQUAL
52202: ST_TO_ADDR
52203: GO 52305
52205: LD_INT 17
52207: DOUBLE
52208: EQUAL
52209: IFTRUE 52213
52211: GO 52238
52213: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52214: LD_ADDR_VAR 0 3
52218: PUSH
52219: LD_INT 39
52221: PPUSH
52222: LD_VAR 0 1
52226: PPUSH
52227: CALL_OW 321
52231: PUSH
52232: LD_INT 2
52234: EQUAL
52235: ST_TO_ADDR
52236: GO 52305
52238: LD_INT 18
52240: DOUBLE
52241: EQUAL
52242: IFTRUE 52246
52244: GO 52271
52246: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52247: LD_ADDR_VAR 0 3
52251: PUSH
52252: LD_INT 40
52254: PPUSH
52255: LD_VAR 0 1
52259: PPUSH
52260: CALL_OW 321
52264: PUSH
52265: LD_INT 2
52267: EQUAL
52268: ST_TO_ADDR
52269: GO 52305
52271: LD_INT 27
52273: DOUBLE
52274: EQUAL
52275: IFTRUE 52279
52277: GO 52304
52279: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52280: LD_ADDR_VAR 0 3
52284: PUSH
52285: LD_INT 35
52287: PPUSH
52288: LD_VAR 0 1
52292: PPUSH
52293: CALL_OW 321
52297: PUSH
52298: LD_INT 2
52300: EQUAL
52301: ST_TO_ADDR
52302: GO 52305
52304: POP
// end ;
52305: LD_VAR 0 3
52309: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52310: LD_INT 0
52312: PPUSH
52313: PPUSH
52314: PPUSH
52315: PPUSH
52316: PPUSH
52317: PPUSH
52318: PPUSH
52319: PPUSH
52320: PPUSH
52321: PPUSH
52322: PPUSH
// result := false ;
52323: LD_ADDR_VAR 0 6
52327: PUSH
52328: LD_INT 0
52330: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52331: LD_VAR 0 1
52335: NOT
52336: PUSH
52337: LD_VAR 0 1
52341: PPUSH
52342: CALL_OW 266
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: IN
52357: NOT
52358: OR
52359: PUSH
52360: LD_VAR 0 2
52364: NOT
52365: OR
52366: PUSH
52367: LD_VAR 0 5
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: LD_INT 3
52383: PUSH
52384: LD_INT 4
52386: PUSH
52387: LD_INT 5
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: IN
52398: NOT
52399: OR
52400: PUSH
52401: LD_VAR 0 3
52405: PPUSH
52406: LD_VAR 0 4
52410: PPUSH
52411: CALL_OW 488
52415: NOT
52416: OR
52417: IFFALSE 52421
// exit ;
52419: GO 53157
// side := GetSide ( depot ) ;
52421: LD_ADDR_VAR 0 9
52425: PUSH
52426: LD_VAR 0 1
52430: PPUSH
52431: CALL_OW 255
52435: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52436: LD_VAR 0 9
52440: PPUSH
52441: LD_VAR 0 2
52445: PPUSH
52446: CALL 51934 0 2
52450: NOT
52451: IFFALSE 52455
// exit ;
52453: GO 53157
// pom := GetBase ( depot ) ;
52455: LD_ADDR_VAR 0 10
52459: PUSH
52460: LD_VAR 0 1
52464: PPUSH
52465: CALL_OW 274
52469: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52470: LD_ADDR_VAR 0 11
52474: PUSH
52475: LD_VAR 0 2
52479: PPUSH
52480: LD_VAR 0 1
52484: PPUSH
52485: CALL_OW 248
52489: PPUSH
52490: CALL_OW 450
52494: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52495: LD_VAR 0 10
52499: PPUSH
52500: LD_INT 1
52502: PPUSH
52503: CALL_OW 275
52507: PUSH
52508: LD_VAR 0 11
52512: PUSH
52513: LD_INT 1
52515: ARRAY
52516: GREATEREQUAL
52517: PUSH
52518: LD_VAR 0 10
52522: PPUSH
52523: LD_INT 2
52525: PPUSH
52526: CALL_OW 275
52530: PUSH
52531: LD_VAR 0 11
52535: PUSH
52536: LD_INT 2
52538: ARRAY
52539: GREATEREQUAL
52540: AND
52541: PUSH
52542: LD_VAR 0 10
52546: PPUSH
52547: LD_INT 3
52549: PPUSH
52550: CALL_OW 275
52554: PUSH
52555: LD_VAR 0 11
52559: PUSH
52560: LD_INT 3
52562: ARRAY
52563: GREATEREQUAL
52564: AND
52565: NOT
52566: IFFALSE 52570
// exit ;
52568: GO 53157
// if GetBType ( depot ) = b_depot then
52570: LD_VAR 0 1
52574: PPUSH
52575: CALL_OW 266
52579: PUSH
52580: LD_INT 0
52582: EQUAL
52583: IFFALSE 52595
// dist := 28 else
52585: LD_ADDR_VAR 0 14
52589: PUSH
52590: LD_INT 28
52592: ST_TO_ADDR
52593: GO 52603
// dist := 36 ;
52595: LD_ADDR_VAR 0 14
52599: PUSH
52600: LD_INT 36
52602: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52603: LD_VAR 0 1
52607: PPUSH
52608: LD_VAR 0 3
52612: PPUSH
52613: LD_VAR 0 4
52617: PPUSH
52618: CALL_OW 297
52622: PUSH
52623: LD_VAR 0 14
52627: GREATER
52628: IFFALSE 52632
// exit ;
52630: GO 53157
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52632: LD_ADDR_VAR 0 12
52636: PUSH
52637: LD_VAR 0 2
52641: PPUSH
52642: LD_VAR 0 3
52646: PPUSH
52647: LD_VAR 0 4
52651: PPUSH
52652: LD_VAR 0 5
52656: PPUSH
52657: LD_VAR 0 1
52661: PPUSH
52662: CALL_OW 248
52666: PPUSH
52667: LD_INT 0
52669: PPUSH
52670: CALL 53162 0 6
52674: ST_TO_ADDR
// if not hexes then
52675: LD_VAR 0 12
52679: NOT
52680: IFFALSE 52684
// exit ;
52682: GO 53157
// hex := GetHexInfo ( x , y ) ;
52684: LD_ADDR_VAR 0 15
52688: PUSH
52689: LD_VAR 0 3
52693: PPUSH
52694: LD_VAR 0 4
52698: PPUSH
52699: CALL_OW 546
52703: ST_TO_ADDR
// if hex [ 1 ] then
52704: LD_VAR 0 15
52708: PUSH
52709: LD_INT 1
52711: ARRAY
52712: IFFALSE 52716
// exit ;
52714: GO 53157
// height := hex [ 2 ] ;
52716: LD_ADDR_VAR 0 13
52720: PUSH
52721: LD_VAR 0 15
52725: PUSH
52726: LD_INT 2
52728: ARRAY
52729: ST_TO_ADDR
// for i = 1 to hexes do
52730: LD_ADDR_VAR 0 7
52734: PUSH
52735: DOUBLE
52736: LD_INT 1
52738: DEC
52739: ST_TO_ADDR
52740: LD_VAR 0 12
52744: PUSH
52745: FOR_TO
52746: IFFALSE 53076
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52748: LD_VAR 0 12
52752: PUSH
52753: LD_VAR 0 7
52757: ARRAY
52758: PUSH
52759: LD_INT 1
52761: ARRAY
52762: PPUSH
52763: LD_VAR 0 12
52767: PUSH
52768: LD_VAR 0 7
52772: ARRAY
52773: PUSH
52774: LD_INT 2
52776: ARRAY
52777: PPUSH
52778: CALL_OW 488
52782: NOT
52783: PUSH
52784: LD_VAR 0 12
52788: PUSH
52789: LD_VAR 0 7
52793: ARRAY
52794: PUSH
52795: LD_INT 1
52797: ARRAY
52798: PPUSH
52799: LD_VAR 0 12
52803: PUSH
52804: LD_VAR 0 7
52808: ARRAY
52809: PUSH
52810: LD_INT 2
52812: ARRAY
52813: PPUSH
52814: CALL_OW 428
52818: PUSH
52819: LD_INT 0
52821: GREATER
52822: OR
52823: PUSH
52824: LD_VAR 0 12
52828: PUSH
52829: LD_VAR 0 7
52833: ARRAY
52834: PUSH
52835: LD_INT 1
52837: ARRAY
52838: PPUSH
52839: LD_VAR 0 12
52843: PUSH
52844: LD_VAR 0 7
52848: ARRAY
52849: PUSH
52850: LD_INT 2
52852: ARRAY
52853: PPUSH
52854: CALL_OW 351
52858: OR
52859: IFFALSE 52865
// exit ;
52861: POP
52862: POP
52863: GO 53157
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52865: LD_ADDR_VAR 0 8
52869: PUSH
52870: LD_VAR 0 12
52874: PUSH
52875: LD_VAR 0 7
52879: ARRAY
52880: PUSH
52881: LD_INT 1
52883: ARRAY
52884: PPUSH
52885: LD_VAR 0 12
52889: PUSH
52890: LD_VAR 0 7
52894: ARRAY
52895: PUSH
52896: LD_INT 2
52898: ARRAY
52899: PPUSH
52900: CALL_OW 546
52904: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52905: LD_VAR 0 8
52909: PUSH
52910: LD_INT 1
52912: ARRAY
52913: PUSH
52914: LD_VAR 0 8
52918: PUSH
52919: LD_INT 2
52921: ARRAY
52922: PUSH
52923: LD_VAR 0 13
52927: PUSH
52928: LD_INT 2
52930: PLUS
52931: GREATER
52932: OR
52933: PUSH
52934: LD_VAR 0 8
52938: PUSH
52939: LD_INT 2
52941: ARRAY
52942: PUSH
52943: LD_VAR 0 13
52947: PUSH
52948: LD_INT 2
52950: MINUS
52951: LESS
52952: OR
52953: PUSH
52954: LD_VAR 0 8
52958: PUSH
52959: LD_INT 3
52961: ARRAY
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 8
52968: PUSH
52969: LD_INT 9
52971: PUSH
52972: LD_INT 10
52974: PUSH
52975: LD_INT 11
52977: PUSH
52978: LD_INT 12
52980: PUSH
52981: LD_INT 13
52983: PUSH
52984: LD_INT 16
52986: PUSH
52987: LD_INT 17
52989: PUSH
52990: LD_INT 18
52992: PUSH
52993: LD_INT 19
52995: PUSH
52996: LD_INT 20
52998: PUSH
52999: LD_INT 21
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: IN
53017: NOT
53018: OR
53019: PUSH
53020: LD_VAR 0 8
53024: PUSH
53025: LD_INT 5
53027: ARRAY
53028: NOT
53029: OR
53030: PUSH
53031: LD_VAR 0 8
53035: PUSH
53036: LD_INT 6
53038: ARRAY
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: LD_INT 2
53045: PUSH
53046: LD_INT 7
53048: PUSH
53049: LD_INT 9
53051: PUSH
53052: LD_INT 10
53054: PUSH
53055: LD_INT 11
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: IN
53066: NOT
53067: OR
53068: IFFALSE 53074
// exit ;
53070: POP
53071: POP
53072: GO 53157
// end ;
53074: GO 52745
53076: POP
53077: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53078: LD_VAR 0 9
53082: PPUSH
53083: LD_VAR 0 3
53087: PPUSH
53088: LD_VAR 0 4
53092: PPUSH
53093: LD_INT 20
53095: PPUSH
53096: CALL 45109 0 4
53100: PUSH
53101: LD_INT 4
53103: ARRAY
53104: IFFALSE 53108
// exit ;
53106: GO 53157
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53108: LD_VAR 0 2
53112: PUSH
53113: LD_INT 29
53115: PUSH
53116: LD_INT 30
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: IN
53123: PUSH
53124: LD_VAR 0 3
53128: PPUSH
53129: LD_VAR 0 4
53133: PPUSH
53134: LD_VAR 0 9
53138: PPUSH
53139: CALL_OW 440
53143: NOT
53144: AND
53145: IFFALSE 53149
// exit ;
53147: GO 53157
// result := true ;
53149: LD_ADDR_VAR 0 6
53153: PUSH
53154: LD_INT 1
53156: ST_TO_ADDR
// end ;
53157: LD_VAR 0 6
53161: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53162: LD_INT 0
53164: PPUSH
53165: PPUSH
53166: PPUSH
53167: PPUSH
53168: PPUSH
53169: PPUSH
53170: PPUSH
53171: PPUSH
53172: PPUSH
53173: PPUSH
53174: PPUSH
53175: PPUSH
53176: PPUSH
53177: PPUSH
53178: PPUSH
53179: PPUSH
53180: PPUSH
53181: PPUSH
53182: PPUSH
53183: PPUSH
53184: PPUSH
53185: PPUSH
53186: PPUSH
53187: PPUSH
53188: PPUSH
53189: PPUSH
53190: PPUSH
53191: PPUSH
53192: PPUSH
53193: PPUSH
53194: PPUSH
53195: PPUSH
53196: PPUSH
53197: PPUSH
53198: PPUSH
53199: PPUSH
53200: PPUSH
53201: PPUSH
53202: PPUSH
53203: PPUSH
53204: PPUSH
53205: PPUSH
53206: PPUSH
53207: PPUSH
53208: PPUSH
53209: PPUSH
53210: PPUSH
53211: PPUSH
53212: PPUSH
53213: PPUSH
53214: PPUSH
53215: PPUSH
53216: PPUSH
53217: PPUSH
53218: PPUSH
53219: PPUSH
53220: PPUSH
53221: PPUSH
// result = [ ] ;
53222: LD_ADDR_VAR 0 7
53226: PUSH
53227: EMPTY
53228: ST_TO_ADDR
// temp_list = [ ] ;
53229: LD_ADDR_VAR 0 9
53233: PUSH
53234: EMPTY
53235: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53236: LD_VAR 0 4
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: LD_INT 2
53249: PUSH
53250: LD_INT 3
53252: PUSH
53253: LD_INT 4
53255: PUSH
53256: LD_INT 5
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: IN
53267: NOT
53268: PUSH
53269: LD_VAR 0 1
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: IN
53284: PUSH
53285: LD_VAR 0 5
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: LD_INT 2
53295: PUSH
53296: LD_INT 3
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: LIST
53303: IN
53304: NOT
53305: AND
53306: OR
53307: IFFALSE 53311
// exit ;
53309: GO 71702
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53311: LD_VAR 0 1
53315: PUSH
53316: LD_INT 6
53318: PUSH
53319: LD_INT 7
53321: PUSH
53322: LD_INT 8
53324: PUSH
53325: LD_INT 13
53327: PUSH
53328: LD_INT 12
53330: PUSH
53331: LD_INT 15
53333: PUSH
53334: LD_INT 11
53336: PUSH
53337: LD_INT 14
53339: PUSH
53340: LD_INT 10
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: IN
53354: IFFALSE 53364
// btype = b_lab ;
53356: LD_ADDR_VAR 0 1
53360: PUSH
53361: LD_INT 6
53363: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53364: LD_VAR 0 6
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: LD_INT 2
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: LIST
53382: IN
53383: NOT
53384: PUSH
53385: LD_VAR 0 1
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: LD_INT 2
53398: PUSH
53399: LD_INT 3
53401: PUSH
53402: LD_INT 6
53404: PUSH
53405: LD_INT 36
53407: PUSH
53408: LD_INT 4
53410: PUSH
53411: LD_INT 5
53413: PUSH
53414: LD_INT 31
53416: PUSH
53417: LD_INT 32
53419: PUSH
53420: LD_INT 33
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: IN
53436: NOT
53437: PUSH
53438: LD_VAR 0 6
53442: PUSH
53443: LD_INT 1
53445: EQUAL
53446: AND
53447: OR
53448: PUSH
53449: LD_VAR 0 1
53453: PUSH
53454: LD_INT 2
53456: PUSH
53457: LD_INT 3
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: IN
53464: NOT
53465: PUSH
53466: LD_VAR 0 6
53470: PUSH
53471: LD_INT 2
53473: EQUAL
53474: AND
53475: OR
53476: IFFALSE 53486
// mode = 0 ;
53478: LD_ADDR_VAR 0 6
53482: PUSH
53483: LD_INT 0
53485: ST_TO_ADDR
// case mode of 0 :
53486: LD_VAR 0 6
53490: PUSH
53491: LD_INT 0
53493: DOUBLE
53494: EQUAL
53495: IFTRUE 53499
53497: GO 64952
53499: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53500: LD_ADDR_VAR 0 11
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: LD_INT 2
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: LD_INT 2
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: LD_INT 2
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: LD_INT 2
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: LD_INT 3
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: LD_INT 3
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: NEG
53667: PUSH
53668: LD_INT 2
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53693: LD_ADDR_VAR 0 12
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 2
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: NEG
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 2
53827: NEG
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 2
53839: NEG
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 3
53850: NEG
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 3
53861: NEG
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53889: LD_ADDR_VAR 0 13
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: LD_INT 2
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: LD_INT 2
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 2
54012: NEG
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 2
54024: NEG
54025: PUSH
54026: LD_INT 2
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 2
54036: NEG
54037: PUSH
54038: LD_INT 3
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 3
54048: NEG
54049: PUSH
54050: LD_INT 2
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 3
54060: NEG
54061: PUSH
54062: LD_INT 3
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54088: LD_ADDR_VAR 0 14
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: LD_INT 2
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: LD_INT 2
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 2
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: LD_INT 3
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 3
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 2
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54284: LD_ADDR_VAR 0 15
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 2
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: NEG
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 2
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 3
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 3
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54477: LD_ADDR_VAR 0 16
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: LD_INT 1
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: LD_INT 2
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 2
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: LD_INT 2
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: LD_INT 2
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 2
54600: NEG
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 2
54612: NEG
54613: PUSH
54614: LD_INT 2
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 3
54624: PUSH
54625: LD_INT 2
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 3
54634: PUSH
54635: LD_INT 3
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: LD_INT 3
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54670: LD_ADDR_VAR 0 17
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: LD_INT 2
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 2
54795: PUSH
54796: LD_INT 1
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 2
54805: PUSH
54806: LD_INT 2
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: LD_INT 2
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 2
54846: NEG
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 2
54857: NEG
54858: PUSH
54859: LD_INT 1
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 2
54869: NEG
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54900: LD_ADDR_VAR 0 18
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: LD_INT 2
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: LD_INT 2
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 2
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: LD_INT 2
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: NEG
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 2
55076: NEG
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55130: LD_ADDR_VAR 0 19
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: LD_INT 2
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: LD_INT 2
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 2
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: LD_INT 2
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: LD_INT 2
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55360: LD_ADDR_VAR 0 20
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: LD_INT 2
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 2
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 2
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: LD_INT 2
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 2
55536: NEG
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: NEG
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 2
55559: NEG
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55590: LD_ADDR_VAR 0 21
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: LD_INT 2
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: LD_INT 2
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 2
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 2
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 1
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: LD_INT 2
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 2
55766: NEG
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 2
55777: NEG
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 2
55789: NEG
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55820: LD_ADDR_VAR 0 22
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: LD_INT 2
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: LD_INT 2
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: LD_INT 2
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 2
55996: NEG
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 2
56007: NEG
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 2
56019: NEG
56020: PUSH
56021: LD_INT 2
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56050: LD_ADDR_VAR 0 23
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: LD_INT 1
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 1
56119: NEG
56120: PUSH
56121: LD_INT 1
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: LD_INT 2
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: LD_INT 2
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 2
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 2
56185: PUSH
56186: LD_INT 2
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: LD_INT 2
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: LD_INT 2
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 2
56237: NEG
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: LD_INT 2
56253: NEG
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: LD_INT 3
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: LD_INT 3
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: LD_INT 2
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 2
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56330: LD_ADDR_VAR 0 24
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: LD_INT 1
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: LD_INT 2
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 2
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 2
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: LD_INT 2
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: LD_INT 2
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 2
56506: NEG
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 2
56517: NEG
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 2
56529: NEG
56530: PUSH
56531: LD_INT 2
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 3
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 3
56573: PUSH
56574: LD_INT 2
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56606: LD_ADDR_VAR 0 25
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: LD_INT 2
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 2
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 2
56741: PUSH
56742: LD_INT 2
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: LD_INT 2
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: LD_INT 2
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 2
56805: NEG
56806: PUSH
56807: LD_INT 2
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 3
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 3
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 2
56837: PUSH
56838: LD_INT 3
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: LD_INT 3
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56880: LD_ADDR_VAR 0 26
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: LD_INT 2
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: LD_INT 2
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 2
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 2
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 2
57015: PUSH
57016: LD_INT 2
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: LD_INT 2
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: LD_INT 2
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 2
57056: NEG
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 2
57067: NEG
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 2
57079: NEG
57080: PUSH
57081: LD_INT 2
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 2
57091: PUSH
57092: LD_INT 3
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: LD_INT 3
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: LD_INT 2
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 2
57122: NEG
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57156: LD_ADDR_VAR 0 27
57160: PUSH
57161: LD_INT 0
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: LD_INT 2
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: LD_INT 1
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 2
57271: PUSH
57272: LD_INT 0
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 2
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 2
57291: PUSH
57292: LD_INT 2
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: LD_INT 2
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: LD_INT 2
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: NEG
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: LD_INT 1
57347: NEG
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 2
57355: NEG
57356: PUSH
57357: LD_INT 2
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: LD_INT 2
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 2
57378: NEG
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 3
57389: NEG
57390: PUSH
57391: LD_INT 1
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 3
57401: NEG
57402: PUSH
57403: LD_INT 2
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57436: LD_ADDR_VAR 0 28
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: LD_INT 1
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 1
57494: NEG
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: LD_INT 1
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: LD_INT 2
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: LD_INT 2
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 2
57571: PUSH
57572: LD_INT 2
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: LD_INT 2
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: LD_INT 2
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: LD_INT 1
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 2
57635: NEG
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 2
57647: NEG
57648: PUSH
57649: LD_INT 3
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 1
57659: NEG
57660: PUSH
57661: LD_INT 3
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 3
57671: NEG
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 3
57683: NEG
57684: PUSH
57685: LD_INT 2
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57718: LD_ADDR_VAR 0 29
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 0
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: LD_INT 0
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: NEG
57788: PUSH
57789: LD_INT 1
57791: NEG
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: LD_INT 2
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: LD_INT 2
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 2
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 2
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 1
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: LD_INT 2
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: NEG
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 2
57884: NEG
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: LD_INT 2
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: NEG
57909: PUSH
57910: LD_INT 3
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 2
57920: PUSH
57921: LD_INT 1
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 3
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 1
57941: PUSH
57942: LD_INT 3
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: LD_INT 2
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 3
57962: NEG
57963: PUSH
57964: LD_INT 2
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57997: LD_ADDR_VAR 0 30
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 1
58055: NEG
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 1
58078: NEG
58079: PUSH
58080: LD_INT 2
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 0
58090: PUSH
58091: LD_INT 2
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 1
58101: PUSH
58102: LD_INT 1
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 2
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 2
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 2
58132: PUSH
58133: LD_INT 2
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 1
58142: PUSH
58143: LD_INT 2
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 2
58163: NEG
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: LD_INT 3
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: PUSH
58199: LD_INT 2
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 3
58209: PUSH
58210: LD_INT 2
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 2
58219: PUSH
58220: LD_INT 3
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 3
58240: NEG
58241: PUSH
58242: LD_INT 1
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58275: LD_ADDR_VAR 0 31
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: LD_INT 2
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: LD_INT 1
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 2
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 2
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: LD_INT 2
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: LD_INT 2
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: LD_INT 2
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 1
58429: NEG
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 2
58440: NEG
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: LD_INT 2
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 2
58464: NEG
58465: PUSH
58466: LD_INT 3
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 2
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 3
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: LD_INT 3
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: LD_INT 2
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 3
58518: NEG
58519: PUSH
58520: LD_INT 2
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58553: LD_ADDR_VAR 0 32
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: LD_INT 0
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 1
58634: NEG
58635: PUSH
58636: LD_INT 2
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: LD_INT 2
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 2
58668: PUSH
58669: LD_INT 1
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 2
58678: PUSH
58679: LD_INT 2
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: LD_INT 2
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 0
58698: PUSH
58699: LD_INT 2
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: LD_INT 1
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 2
58719: NEG
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 2
58730: NEG
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: LD_INT 3
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 1
58754: PUSH
58755: LD_INT 2
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 3
58765: PUSH
58766: LD_INT 2
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 2
58775: PUSH
58776: LD_INT 3
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 2
58785: NEG
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 3
58796: NEG
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58831: LD_ADDR_VAR 0 33
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 0
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 1
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: NEG
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 1
58912: NEG
58913: PUSH
58914: LD_INT 2
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 2
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 2
58945: PUSH
58946: LD_INT 1
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: LD_INT 2
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: LD_INT 2
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 2
58986: NEG
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: LD_INT 1
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 2
59009: NEG
59010: PUSH
59011: LD_INT 2
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 2
59021: NEG
59022: PUSH
59023: LD_INT 3
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 2
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 3
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: LD_INT 3
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: LD_INT 2
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 3
59075: NEG
59076: PUSH
59077: LD_INT 2
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59110: LD_ADDR_VAR 0 34
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 0
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 1
59138: PUSH
59139: LD_INT 0
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 1
59148: PUSH
59149: LD_INT 1
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: LD_INT 2
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 1
59214: PUSH
59215: LD_INT 1
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 2
59225: PUSH
59226: LD_INT 1
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: LD_INT 2
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: LD_INT 2
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 1
59255: NEG
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 2
59266: NEG
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 2
59289: NEG
59290: PUSH
59291: LD_INT 2
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: LD_INT 3
59305: NEG
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: LD_INT 2
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 3
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: PUSH
59335: LD_INT 3
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 3
59355: NEG
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59390: LD_ADDR_VAR 0 35
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 1
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 2
59471: PUSH
59472: LD_INT 1
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: NEG
59482: PUSH
59483: LD_INT 1
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59502: LD_ADDR_VAR 0 36
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 0
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: LD_INT 1
59575: NEG
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: LD_INT 2
59587: NEG
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: LD_INT 2
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59614: LD_ADDR_VAR 0 37
59618: PUSH
59619: LD_INT 0
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: LD_INT 1
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 1
59652: PUSH
59653: LD_INT 1
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: LD_INT 1
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: NEG
59673: PUSH
59674: LD_INT 0
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: NEG
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 1
59706: NEG
59707: PUSH
59708: LD_INT 1
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59726: LD_ADDR_VAR 0 38
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 1
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: LD_INT 1
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: LD_INT 1
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 1
59784: NEG
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: LD_INT 1
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 2
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 2
59817: NEG
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59838: LD_ADDR_VAR 0 39
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: NEG
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 1
59931: PUSH
59932: LD_INT 2
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59950: LD_ADDR_VAR 0 40
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: LD_INT 1
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: LD_INT 1
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 1
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: NEG
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60062: LD_ADDR_VAR 0 41
60066: PUSH
60067: LD_INT 0
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: LD_INT 1
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 1
60100: PUSH
60101: LD_INT 1
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 1
60120: NEG
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: NEG
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: LD_INT 2
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 1
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 2
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 2
60176: PUSH
60177: LD_INT 1
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 2
60186: PUSH
60187: LD_INT 2
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 1
60196: PUSH
60197: LD_INT 2
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 1
60206: NEG
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 2
60217: NEG
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 2
60228: NEG
60229: PUSH
60230: LD_INT 1
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 2
60240: NEG
60241: PUSH
60242: LD_INT 2
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 2
60252: NEG
60253: PUSH
60254: LD_INT 3
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 2
60264: PUSH
60265: LD_INT 1
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 3
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 3
60285: PUSH
60286: LD_INT 1
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 3
60295: PUSH
60296: LD_INT 2
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 3
60305: PUSH
60306: LD_INT 3
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: PUSH
60316: LD_INT 3
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 2
60325: NEG
60326: PUSH
60327: LD_INT 1
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 3
60336: NEG
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 3
60347: NEG
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 3
60359: NEG
60360: PUSH
60361: LD_INT 2
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 3
60371: NEG
60372: PUSH
60373: LD_INT 3
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60412: LD_ADDR_VAR 0 42
60416: PUSH
60417: LD_INT 0
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: PUSH
60451: LD_INT 1
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: LD_INT 1
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: LD_INT 1
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: LD_INT 2
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 1
60516: PUSH
60517: LD_INT 1
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 2
60527: PUSH
60528: LD_INT 1
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 2
60537: PUSH
60538: LD_INT 2
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: LD_INT 2
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: LD_INT 2
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: NEG
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 2
60578: NEG
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 2
60590: NEG
60591: PUSH
60592: LD_INT 2
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 2
60602: NEG
60603: PUSH
60604: LD_INT 3
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: NEG
60615: PUSH
60616: LD_INT 3
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 0
60626: PUSH
60627: LD_INT 3
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 1
60637: PUSH
60638: LD_INT 2
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 3
60648: PUSH
60649: LD_INT 2
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 3
60658: PUSH
60659: LD_INT 3
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 2
60668: PUSH
60669: LD_INT 3
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: LD_INT 3
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: LD_INT 3
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: LD_INT 2
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 3
60709: NEG
60710: PUSH
60711: LD_INT 2
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 3
60721: NEG
60722: PUSH
60723: LD_INT 3
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60762: LD_ADDR_VAR 0 43
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 1
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 1
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 1
60820: NEG
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 1
60831: NEG
60832: PUSH
60833: LD_INT 1
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 1
60843: NEG
60844: PUSH
60845: LD_INT 2
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: LD_INT 2
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 2
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 2
60887: PUSH
60888: LD_INT 1
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: PUSH
60898: LD_INT 2
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: LD_INT 2
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 1
60917: NEG
60918: PUSH
60919: LD_INT 1
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 2
60928: NEG
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 2
60939: NEG
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 1
60951: NEG
60952: PUSH
60953: LD_INT 3
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: LD_INT 3
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 1
60974: PUSH
60975: LD_INT 2
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 2
60985: PUSH
60986: LD_INT 1
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 3
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 3
61006: PUSH
61007: LD_INT 1
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 1
61016: PUSH
61017: LD_INT 3
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: LD_INT 3
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 1
61036: NEG
61037: PUSH
61038: LD_INT 2
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 2
61047: NEG
61048: PUSH
61049: LD_INT 1
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 3
61058: NEG
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 3
61069: NEG
61070: PUSH
61071: LD_INT 1
61073: NEG
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61110: LD_ADDR_VAR 0 44
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: LD_INT 0
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: LD_INT 1
61130: NEG
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 1
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 1
61148: PUSH
61149: LD_INT 1
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: LD_INT 1
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 1
61168: NEG
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 1
61179: NEG
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 1
61191: NEG
61192: PUSH
61193: LD_INT 2
61195: NEG
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 1
61203: PUSH
61204: LD_INT 1
61206: NEG
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 2
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 2
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 2
61234: PUSH
61235: LD_INT 2
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 1
61244: PUSH
61245: LD_INT 2
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 1
61254: NEG
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 2
61265: NEG
61266: PUSH
61267: LD_INT 0
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 2
61276: NEG
61277: PUSH
61278: LD_INT 1
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 2
61288: NEG
61289: PUSH
61290: LD_INT 2
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 2
61300: NEG
61301: PUSH
61302: LD_INT 3
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 2
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 3
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 3
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 3
61343: PUSH
61344: LD_INT 2
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 3
61353: PUSH
61354: LD_INT 3
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 2
61363: PUSH
61364: LD_INT 3
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 2
61373: NEG
61374: PUSH
61375: LD_INT 1
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 3
61384: NEG
61385: PUSH
61386: LD_INT 0
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 3
61395: NEG
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 3
61407: NEG
61408: PUSH
61409: LD_INT 2
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 3
61419: NEG
61420: PUSH
61421: LD_INT 3
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61460: LD_ADDR_VAR 0 45
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 0
61477: PUSH
61478: LD_INT 1
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: LD_INT 0
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 1
61498: PUSH
61499: LD_INT 1
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: LD_INT 1
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 1
61529: NEG
61530: PUSH
61531: LD_INT 1
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: LD_INT 2
61545: NEG
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: LD_INT 2
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 1
61564: PUSH
61565: LD_INT 1
61567: NEG
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 2
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 2
61585: PUSH
61586: LD_INT 2
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 1
61595: PUSH
61596: LD_INT 2
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: LD_INT 2
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 2
61626: NEG
61627: PUSH
61628: LD_INT 1
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 2
61638: NEG
61639: PUSH
61640: LD_INT 2
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 2
61650: NEG
61651: PUSH
61652: LD_INT 3
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: LD_INT 3
61666: NEG
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 0
61674: PUSH
61675: LD_INT 3
61677: NEG
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 1
61685: PUSH
61686: LD_INT 2
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 3
61696: PUSH
61697: LD_INT 2
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 3
61706: PUSH
61707: LD_INT 3
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 2
61716: PUSH
61717: LD_INT 3
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: LD_INT 3
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: LD_INT 3
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: LD_INT 2
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 3
61757: NEG
61758: PUSH
61759: LD_INT 2
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 3
61769: NEG
61770: PUSH
61771: LD_INT 3
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61810: LD_ADDR_VAR 0 46
61814: PUSH
61815: LD_INT 0
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: LD_INT 1
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 1
61879: NEG
61880: PUSH
61881: LD_INT 1
61883: NEG
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: LD_INT 2
61895: NEG
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: LD_INT 2
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 1
61914: PUSH
61915: LD_INT 1
61917: NEG
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 2
61925: PUSH
61926: LD_INT 0
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 2
61935: PUSH
61936: LD_INT 1
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 1
61945: PUSH
61946: LD_INT 2
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: LD_INT 2
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 1
61965: NEG
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 2
61976: NEG
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 2
61987: NEG
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 1
61999: NEG
62000: PUSH
62001: LD_INT 3
62003: NEG
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 0
62011: PUSH
62012: LD_INT 3
62014: NEG
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 1
62022: PUSH
62023: LD_INT 2
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 2
62033: PUSH
62034: LD_INT 1
62036: NEG
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 3
62044: PUSH
62045: LD_INT 0
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 3
62054: PUSH
62055: LD_INT 1
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: LD_INT 3
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 0
62074: PUSH
62075: LD_INT 3
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: LD_INT 2
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 2
62095: NEG
62096: PUSH
62097: LD_INT 1
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 3
62106: NEG
62107: PUSH
62108: LD_INT 0
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 3
62117: NEG
62118: PUSH
62119: LD_INT 1
62121: NEG
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62158: LD_ADDR_VAR 0 47
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 0
62175: PUSH
62176: LD_INT 1
62178: NEG
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: LD_INT 0
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: LD_INT 1
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 0
62206: PUSH
62207: LD_INT 1
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 1
62216: NEG
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 1
62239: NEG
62240: PUSH
62241: LD_INT 2
62243: NEG
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: LD_INT 2
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 1
62262: PUSH
62263: LD_INT 1
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 2
62273: NEG
62274: PUSH
62275: LD_INT 1
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 2
62285: NEG
62286: PUSH
62287: LD_INT 2
62289: NEG
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62309: LD_ADDR_VAR 0 48
62313: PUSH
62314: LD_INT 0
62316: PUSH
62317: LD_INT 0
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 0
62326: PUSH
62327: LD_INT 1
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 1
62337: PUSH
62338: LD_INT 0
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 1
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 0
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 1
62367: NEG
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 1
62378: NEG
62379: PUSH
62380: LD_INT 1
62382: NEG
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: NEG
62391: PUSH
62392: LD_INT 2
62394: NEG
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: LD_INT 2
62405: NEG
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 1
62413: PUSH
62414: LD_INT 1
62416: NEG
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 2
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 2
62434: PUSH
62435: LD_INT 1
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62456: LD_ADDR_VAR 0 49
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: LD_INT 0
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: LD_INT 1
62476: NEG
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 1
62484: PUSH
62485: LD_INT 0
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 1
62494: PUSH
62495: LD_INT 1
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 0
62504: PUSH
62505: LD_INT 1
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 1
62514: NEG
62515: PUSH
62516: LD_INT 0
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 1
62525: NEG
62526: PUSH
62527: LD_INT 1
62529: NEG
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 2
62548: PUSH
62549: LD_INT 0
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 2
62558: PUSH
62559: LD_INT 1
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 2
62568: PUSH
62569: LD_INT 2
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 1
62578: PUSH
62579: LD_INT 2
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62600: LD_ADDR_VAR 0 50
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 0
62617: PUSH
62618: LD_INT 1
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: LD_INT 1
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: LD_INT 1
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 1
62658: NEG
62659: PUSH
62660: LD_INT 0
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 1
62669: NEG
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 2
62681: PUSH
62682: LD_INT 1
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 2
62691: PUSH
62692: LD_INT 2
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: LD_INT 2
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: LD_INT 2
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 1
62721: NEG
62722: PUSH
62723: LD_INT 1
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62744: LD_ADDR_VAR 0 51
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: LD_INT 1
62764: NEG
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 1
62772: PUSH
62773: LD_INT 0
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 1
62782: PUSH
62783: LD_INT 1
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: LD_INT 1
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 1
62802: NEG
62803: PUSH
62804: LD_INT 0
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 1
62813: NEG
62814: PUSH
62815: LD_INT 1
62817: NEG
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 1
62825: PUSH
62826: LD_INT 2
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: LD_INT 2
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 1
62845: NEG
62846: PUSH
62847: LD_INT 1
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 2
62856: NEG
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 2
62867: NEG
62868: PUSH
62869: LD_INT 1
62871: NEG
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62891: LD_ADDR_VAR 0 52
62895: PUSH
62896: LD_INT 0
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: LD_INT 1
62911: NEG
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 1
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: LD_INT 1
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 0
62939: PUSH
62940: LD_INT 1
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 1
62949: NEG
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: NEG
62961: PUSH
62962: LD_INT 1
62964: NEG
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 1
62972: NEG
62973: PUSH
62974: LD_INT 2
62976: NEG
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 1
62984: NEG
62985: PUSH
62986: LD_INT 1
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 2
62995: NEG
62996: PUSH
62997: LD_INT 0
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 2
63006: NEG
63007: PUSH
63008: LD_INT 1
63010: NEG
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 2
63018: NEG
63019: PUSH
63020: LD_INT 2
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63042: LD_ADDR_VAR 0 53
63046: PUSH
63047: LD_INT 0
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 0
63059: PUSH
63060: LD_INT 1
63062: NEG
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 1
63070: PUSH
63071: LD_INT 0
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 1
63080: PUSH
63081: LD_INT 1
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: LD_INT 1
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 1
63100: NEG
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 1
63123: NEG
63124: PUSH
63125: LD_INT 2
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 0
63135: PUSH
63136: LD_INT 2
63138: NEG
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 1
63146: PUSH
63147: LD_INT 1
63149: NEG
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 2
63157: PUSH
63158: LD_INT 0
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 2
63167: PUSH
63168: LD_INT 1
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 2
63177: PUSH
63178: LD_INT 2
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 1
63187: PUSH
63188: LD_INT 2
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 0
63197: PUSH
63198: LD_INT 2
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 1
63207: NEG
63208: PUSH
63209: LD_INT 1
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 2
63218: NEG
63219: PUSH
63220: LD_INT 0
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 2
63229: NEG
63230: PUSH
63231: LD_INT 1
63233: NEG
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 2
63241: NEG
63242: PUSH
63243: LD_INT 2
63245: NEG
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63272: LD_ADDR_VAR 0 54
63276: PUSH
63277: LD_INT 0
63279: PUSH
63280: LD_INT 0
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: LD_INT 1
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: LD_INT 0
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 1
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 1
63330: NEG
63331: PUSH
63332: LD_INT 0
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: NEG
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 1
63353: NEG
63354: PUSH
63355: LD_INT 2
63357: NEG
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 0
63365: PUSH
63366: LD_INT 2
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 1
63376: PUSH
63377: LD_INT 1
63379: NEG
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 2
63387: PUSH
63388: LD_INT 0
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 2
63397: PUSH
63398: LD_INT 1
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 2
63407: PUSH
63408: LD_INT 2
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 1
63417: PUSH
63418: LD_INT 2
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 0
63427: PUSH
63428: LD_INT 2
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 1
63437: NEG
63438: PUSH
63439: LD_INT 1
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 2
63448: NEG
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 2
63459: NEG
63460: PUSH
63461: LD_INT 1
63463: NEG
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 2
63471: NEG
63472: PUSH
63473: LD_INT 2
63475: NEG
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63502: LD_ADDR_VAR 0 55
63506: PUSH
63507: LD_INT 0
63509: PUSH
63510: LD_INT 0
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 0
63519: PUSH
63520: LD_INT 1
63522: NEG
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 1
63530: PUSH
63531: LD_INT 0
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 1
63540: PUSH
63541: LD_INT 1
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: LD_INT 1
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 1
63560: NEG
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 1
63571: NEG
63572: PUSH
63573: LD_INT 1
63575: NEG
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 1
63583: NEG
63584: PUSH
63585: LD_INT 2
63587: NEG
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 0
63595: PUSH
63596: LD_INT 2
63598: NEG
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 1
63606: PUSH
63607: LD_INT 1
63609: NEG
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 2
63617: PUSH
63618: LD_INT 0
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 2
63627: PUSH
63628: LD_INT 1
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 2
63637: PUSH
63638: LD_INT 2
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: LD_INT 2
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 0
63657: PUSH
63658: LD_INT 2
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 1
63667: NEG
63668: PUSH
63669: LD_INT 1
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 2
63678: NEG
63679: PUSH
63680: LD_INT 0
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 2
63689: NEG
63690: PUSH
63691: LD_INT 1
63693: NEG
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 2
63701: NEG
63702: PUSH
63703: LD_INT 2
63705: NEG
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63732: LD_ADDR_VAR 0 56
63736: PUSH
63737: LD_INT 0
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 0
63749: PUSH
63750: LD_INT 1
63752: NEG
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 1
63760: PUSH
63761: LD_INT 0
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 1
63770: PUSH
63771: LD_INT 1
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: LD_INT 1
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 1
63801: NEG
63802: PUSH
63803: LD_INT 1
63805: NEG
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 1
63813: NEG
63814: PUSH
63815: LD_INT 2
63817: NEG
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 0
63825: PUSH
63826: LD_INT 2
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 1
63836: PUSH
63837: LD_INT 1
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 2
63847: PUSH
63848: LD_INT 0
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 2
63857: PUSH
63858: LD_INT 1
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 2
63867: PUSH
63868: LD_INT 2
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 1
63877: PUSH
63878: LD_INT 2
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 0
63887: PUSH
63888: LD_INT 2
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 1
63897: NEG
63898: PUSH
63899: LD_INT 1
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 2
63908: NEG
63909: PUSH
63910: LD_INT 0
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 2
63919: NEG
63920: PUSH
63921: LD_INT 1
63923: NEG
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 2
63931: NEG
63932: PUSH
63933: LD_INT 2
63935: NEG
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63962: LD_ADDR_VAR 0 57
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: LD_INT 0
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: LD_INT 1
63982: NEG
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 1
63990: PUSH
63991: LD_INT 0
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: LD_INT 1
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 1
64020: NEG
64021: PUSH
64022: LD_INT 0
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 1
64031: NEG
64032: PUSH
64033: LD_INT 1
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 1
64043: NEG
64044: PUSH
64045: LD_INT 2
64047: NEG
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 0
64055: PUSH
64056: LD_INT 2
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 1
64066: PUSH
64067: LD_INT 1
64069: NEG
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 2
64077: PUSH
64078: LD_INT 0
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 2
64087: PUSH
64088: LD_INT 1
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 2
64097: PUSH
64098: LD_INT 2
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 1
64107: PUSH
64108: LD_INT 2
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: LD_INT 2
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 1
64127: NEG
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 2
64138: NEG
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 2
64149: NEG
64150: PUSH
64151: LD_INT 1
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 2
64161: NEG
64162: PUSH
64163: LD_INT 2
64165: NEG
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64192: LD_ADDR_VAR 0 58
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: LD_INT 0
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 0
64209: PUSH
64210: LD_INT 1
64212: NEG
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 1
64220: PUSH
64221: LD_INT 0
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 1
64230: PUSH
64231: LD_INT 1
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 0
64240: PUSH
64241: LD_INT 1
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 1
64250: NEG
64251: PUSH
64252: LD_INT 0
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 1
64261: NEG
64262: PUSH
64263: LD_INT 1
64265: NEG
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 1
64273: NEG
64274: PUSH
64275: LD_INT 2
64277: NEG
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 0
64285: PUSH
64286: LD_INT 2
64288: NEG
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 1
64296: PUSH
64297: LD_INT 1
64299: NEG
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 2
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 2
64317: PUSH
64318: LD_INT 1
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 2
64327: PUSH
64328: LD_INT 2
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 1
64337: PUSH
64338: LD_INT 2
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 0
64347: PUSH
64348: LD_INT 2
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 1
64357: NEG
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 2
64368: NEG
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 2
64379: NEG
64380: PUSH
64381: LD_INT 1
64383: NEG
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 2
64391: NEG
64392: PUSH
64393: LD_INT 2
64395: NEG
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64422: LD_ADDR_VAR 0 59
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: LD_INT 1
64442: NEG
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 1
64460: PUSH
64461: LD_INT 1
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 0
64470: PUSH
64471: LD_INT 1
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 1
64480: NEG
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 1
64491: NEG
64492: PUSH
64493: LD_INT 1
64495: NEG
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64510: LD_ADDR_VAR 0 60
64514: PUSH
64515: LD_INT 0
64517: PUSH
64518: LD_INT 0
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 0
64527: PUSH
64528: LD_INT 1
64530: NEG
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 1
64538: PUSH
64539: LD_INT 0
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 1
64548: PUSH
64549: LD_INT 1
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 0
64558: PUSH
64559: LD_INT 1
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 1
64568: NEG
64569: PUSH
64570: LD_INT 0
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 1
64579: NEG
64580: PUSH
64581: LD_INT 1
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64598: LD_ADDR_VAR 0 61
64602: PUSH
64603: LD_INT 0
64605: PUSH
64606: LD_INT 0
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 0
64615: PUSH
64616: LD_INT 1
64618: NEG
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 1
64626: PUSH
64627: LD_INT 0
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 1
64636: PUSH
64637: LD_INT 1
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 0
64646: PUSH
64647: LD_INT 1
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 1
64656: NEG
64657: PUSH
64658: LD_INT 0
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: NEG
64668: PUSH
64669: LD_INT 1
64671: NEG
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64686: LD_ADDR_VAR 0 62
64690: PUSH
64691: LD_INT 0
64693: PUSH
64694: LD_INT 0
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 0
64703: PUSH
64704: LD_INT 1
64706: NEG
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 1
64714: PUSH
64715: LD_INT 0
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 1
64724: PUSH
64725: LD_INT 1
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 0
64734: PUSH
64735: LD_INT 1
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 1
64744: NEG
64745: PUSH
64746: LD_INT 0
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 1
64755: NEG
64756: PUSH
64757: LD_INT 1
64759: NEG
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64774: LD_ADDR_VAR 0 63
64778: PUSH
64779: LD_INT 0
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: LD_INT 1
64794: NEG
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 1
64802: PUSH
64803: LD_INT 0
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 1
64812: PUSH
64813: LD_INT 1
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 0
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 1
64843: NEG
64844: PUSH
64845: LD_INT 1
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64862: LD_ADDR_VAR 0 64
64866: PUSH
64867: LD_INT 0
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 0
64879: PUSH
64880: LD_INT 1
64882: NEG
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 1
64890: PUSH
64891: LD_INT 0
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 1
64900: PUSH
64901: LD_INT 1
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 0
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 1
64920: NEG
64921: PUSH
64922: LD_INT 0
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 1
64931: NEG
64932: PUSH
64933: LD_INT 1
64935: NEG
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: ST_TO_ADDR
// end ; 1 :
64950: GO 70847
64952: LD_INT 1
64954: DOUBLE
64955: EQUAL
64956: IFTRUE 64960
64958: GO 67583
64960: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64961: LD_ADDR_VAR 0 11
64965: PUSH
64966: LD_INT 1
64968: NEG
64969: PUSH
64970: LD_INT 3
64972: NEG
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 0
64980: PUSH
64981: LD_INT 3
64983: NEG
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 1
64991: PUSH
64992: LD_INT 2
64994: NEG
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: LIST
65004: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65005: LD_ADDR_VAR 0 12
65009: PUSH
65010: LD_INT 2
65012: PUSH
65013: LD_INT 1
65015: NEG
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 3
65023: PUSH
65024: LD_INT 0
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 3
65033: PUSH
65034: LD_INT 1
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: LIST
65045: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65046: LD_ADDR_VAR 0 13
65050: PUSH
65051: LD_INT 3
65053: PUSH
65054: LD_INT 2
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 3
65063: PUSH
65064: LD_INT 3
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 2
65073: PUSH
65074: LD_INT 3
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: LIST
65085: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65086: LD_ADDR_VAR 0 14
65090: PUSH
65091: LD_INT 1
65093: PUSH
65094: LD_INT 3
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 0
65103: PUSH
65104: LD_INT 3
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 1
65113: NEG
65114: PUSH
65115: LD_INT 2
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: LIST
65126: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65127: LD_ADDR_VAR 0 15
65131: PUSH
65132: LD_INT 2
65134: NEG
65135: PUSH
65136: LD_INT 1
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 3
65145: NEG
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 3
65156: NEG
65157: PUSH
65158: LD_INT 1
65160: NEG
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: LIST
65170: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65171: LD_ADDR_VAR 0 16
65175: PUSH
65176: LD_INT 2
65178: NEG
65179: PUSH
65180: LD_INT 3
65182: NEG
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 3
65190: NEG
65191: PUSH
65192: LD_INT 2
65194: NEG
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 3
65202: NEG
65203: PUSH
65204: LD_INT 3
65206: NEG
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: LIST
65216: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65217: LD_ADDR_VAR 0 17
65221: PUSH
65222: LD_INT 1
65224: NEG
65225: PUSH
65226: LD_INT 3
65228: NEG
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 0
65236: PUSH
65237: LD_INT 3
65239: NEG
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 1
65247: PUSH
65248: LD_INT 2
65250: NEG
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: LIST
65260: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65261: LD_ADDR_VAR 0 18
65265: PUSH
65266: LD_INT 2
65268: PUSH
65269: LD_INT 1
65271: NEG
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 3
65279: PUSH
65280: LD_INT 0
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 3
65289: PUSH
65290: LD_INT 1
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: LIST
65301: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65302: LD_ADDR_VAR 0 19
65306: PUSH
65307: LD_INT 3
65309: PUSH
65310: LD_INT 2
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 3
65319: PUSH
65320: LD_INT 3
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 2
65329: PUSH
65330: LD_INT 3
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: LIST
65341: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65342: LD_ADDR_VAR 0 20
65346: PUSH
65347: LD_INT 1
65349: PUSH
65350: LD_INT 3
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 0
65359: PUSH
65360: LD_INT 3
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 1
65369: NEG
65370: PUSH
65371: LD_INT 2
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: LIST
65382: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65383: LD_ADDR_VAR 0 21
65387: PUSH
65388: LD_INT 2
65390: NEG
65391: PUSH
65392: LD_INT 1
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 3
65401: NEG
65402: PUSH
65403: LD_INT 0
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 3
65412: NEG
65413: PUSH
65414: LD_INT 1
65416: NEG
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: LIST
65426: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65427: LD_ADDR_VAR 0 22
65431: PUSH
65432: LD_INT 2
65434: NEG
65435: PUSH
65436: LD_INT 3
65438: NEG
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 3
65446: NEG
65447: PUSH
65448: LD_INT 2
65450: NEG
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 3
65458: NEG
65459: PUSH
65460: LD_INT 3
65462: NEG
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: LIST
65472: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65473: LD_ADDR_VAR 0 23
65477: PUSH
65478: LD_INT 0
65480: PUSH
65481: LD_INT 3
65483: NEG
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 1
65491: NEG
65492: PUSH
65493: LD_INT 4
65495: NEG
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 1
65503: PUSH
65504: LD_INT 3
65506: NEG
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: LIST
65516: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65517: LD_ADDR_VAR 0 24
65521: PUSH
65522: LD_INT 3
65524: PUSH
65525: LD_INT 0
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 3
65534: PUSH
65535: LD_INT 1
65537: NEG
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 4
65545: PUSH
65546: LD_INT 1
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: LIST
65557: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65558: LD_ADDR_VAR 0 25
65562: PUSH
65563: LD_INT 3
65565: PUSH
65566: LD_INT 3
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 4
65575: PUSH
65576: LD_INT 3
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 3
65585: PUSH
65586: LD_INT 4
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: LIST
65597: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65598: LD_ADDR_VAR 0 26
65602: PUSH
65603: LD_INT 0
65605: PUSH
65606: LD_INT 3
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 1
65615: PUSH
65616: LD_INT 4
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 1
65625: NEG
65626: PUSH
65627: LD_INT 3
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: LIST
65638: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65639: LD_ADDR_VAR 0 27
65643: PUSH
65644: LD_INT 3
65646: NEG
65647: PUSH
65648: LD_INT 0
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 3
65657: NEG
65658: PUSH
65659: LD_INT 1
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 4
65668: NEG
65669: PUSH
65670: LD_INT 1
65672: NEG
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: LIST
65682: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65683: LD_ADDR_VAR 0 28
65687: PUSH
65688: LD_INT 3
65690: NEG
65691: PUSH
65692: LD_INT 3
65694: NEG
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 3
65702: NEG
65703: PUSH
65704: LD_INT 4
65706: NEG
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 4
65714: NEG
65715: PUSH
65716: LD_INT 3
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: LIST
65728: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65729: LD_ADDR_VAR 0 29
65733: PUSH
65734: LD_INT 1
65736: NEG
65737: PUSH
65738: LD_INT 3
65740: NEG
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 0
65748: PUSH
65749: LD_INT 3
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 1
65759: PUSH
65760: LD_INT 2
65762: NEG
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 1
65770: NEG
65771: PUSH
65772: LD_INT 4
65774: NEG
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 0
65782: PUSH
65783: LD_INT 4
65785: NEG
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 1
65793: PUSH
65794: LD_INT 3
65796: NEG
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 1
65804: NEG
65805: PUSH
65806: LD_INT 5
65808: NEG
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 0
65816: PUSH
65817: LD_INT 5
65819: NEG
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 1
65827: PUSH
65828: LD_INT 4
65830: NEG
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 1
65838: NEG
65839: PUSH
65840: LD_INT 6
65842: NEG
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 0
65850: PUSH
65851: LD_INT 6
65853: NEG
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 1
65861: PUSH
65862: LD_INT 5
65864: NEG
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65884: LD_ADDR_VAR 0 30
65888: PUSH
65889: LD_INT 2
65891: PUSH
65892: LD_INT 1
65894: NEG
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 3
65902: PUSH
65903: LD_INT 0
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 3
65912: PUSH
65913: LD_INT 1
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 3
65922: PUSH
65923: LD_INT 1
65925: NEG
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 4
65933: PUSH
65934: LD_INT 0
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 4
65943: PUSH
65944: LD_INT 1
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 4
65953: PUSH
65954: LD_INT 1
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 5
65964: PUSH
65965: LD_INT 0
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 5
65974: PUSH
65975: LD_INT 1
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 5
65984: PUSH
65985: LD_INT 1
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 6
65995: PUSH
65996: LD_INT 0
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 6
66005: PUSH
66006: LD_INT 1
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66027: LD_ADDR_VAR 0 31
66031: PUSH
66032: LD_INT 3
66034: PUSH
66035: LD_INT 2
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 3
66044: PUSH
66045: LD_INT 3
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 2
66054: PUSH
66055: LD_INT 3
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 4
66064: PUSH
66065: LD_INT 3
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 4
66074: PUSH
66075: LD_INT 4
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 3
66084: PUSH
66085: LD_INT 4
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 5
66094: PUSH
66095: LD_INT 4
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 5
66104: PUSH
66105: LD_INT 5
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 4
66114: PUSH
66115: LD_INT 5
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 6
66124: PUSH
66125: LD_INT 5
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 6
66134: PUSH
66135: LD_INT 6
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 5
66144: PUSH
66145: LD_INT 6
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66166: LD_ADDR_VAR 0 32
66170: PUSH
66171: LD_INT 1
66173: PUSH
66174: LD_INT 3
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 0
66183: PUSH
66184: LD_INT 3
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 1
66193: NEG
66194: PUSH
66195: LD_INT 2
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 1
66204: PUSH
66205: LD_INT 4
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 0
66214: PUSH
66215: LD_INT 4
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 1
66224: NEG
66225: PUSH
66226: LD_INT 3
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 1
66235: PUSH
66236: LD_INT 5
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 0
66245: PUSH
66246: LD_INT 5
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 1
66255: NEG
66256: PUSH
66257: LD_INT 4
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 1
66266: PUSH
66267: LD_INT 6
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 0
66276: PUSH
66277: LD_INT 6
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 1
66286: NEG
66287: PUSH
66288: LD_INT 5
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66309: LD_ADDR_VAR 0 33
66313: PUSH
66314: LD_INT 2
66316: NEG
66317: PUSH
66318: LD_INT 1
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 3
66327: NEG
66328: PUSH
66329: LD_INT 0
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 3
66338: NEG
66339: PUSH
66340: LD_INT 1
66342: NEG
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 3
66350: NEG
66351: PUSH
66352: LD_INT 1
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 4
66361: NEG
66362: PUSH
66363: LD_INT 0
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 4
66372: NEG
66373: PUSH
66374: LD_INT 1
66376: NEG
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 4
66384: NEG
66385: PUSH
66386: LD_INT 1
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 5
66395: NEG
66396: PUSH
66397: LD_INT 0
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 5
66406: NEG
66407: PUSH
66408: LD_INT 1
66410: NEG
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 5
66418: NEG
66419: PUSH
66420: LD_INT 1
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 6
66429: NEG
66430: PUSH
66431: LD_INT 0
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 6
66440: NEG
66441: PUSH
66442: LD_INT 1
66444: NEG
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66464: LD_ADDR_VAR 0 34
66468: PUSH
66469: LD_INT 2
66471: NEG
66472: PUSH
66473: LD_INT 3
66475: NEG
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 3
66483: NEG
66484: PUSH
66485: LD_INT 2
66487: NEG
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 3
66495: NEG
66496: PUSH
66497: LD_INT 3
66499: NEG
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 3
66507: NEG
66508: PUSH
66509: LD_INT 4
66511: NEG
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 4
66519: NEG
66520: PUSH
66521: LD_INT 3
66523: NEG
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 4
66531: NEG
66532: PUSH
66533: LD_INT 4
66535: NEG
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 4
66543: NEG
66544: PUSH
66545: LD_INT 5
66547: NEG
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 5
66555: NEG
66556: PUSH
66557: LD_INT 4
66559: NEG
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 5
66567: NEG
66568: PUSH
66569: LD_INT 5
66571: NEG
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 5
66579: NEG
66580: PUSH
66581: LD_INT 6
66583: NEG
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 6
66591: NEG
66592: PUSH
66593: LD_INT 5
66595: NEG
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 6
66603: NEG
66604: PUSH
66605: LD_INT 6
66607: NEG
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66627: LD_ADDR_VAR 0 41
66631: PUSH
66632: LD_INT 0
66634: PUSH
66635: LD_INT 2
66637: NEG
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 1
66645: NEG
66646: PUSH
66647: LD_INT 3
66649: NEG
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: LD_INT 1
66657: PUSH
66658: LD_INT 2
66660: NEG
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: LIST
66670: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66671: LD_ADDR_VAR 0 42
66675: PUSH
66676: LD_INT 2
66678: PUSH
66679: LD_INT 0
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 2
66688: PUSH
66689: LD_INT 1
66691: NEG
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 3
66699: PUSH
66700: LD_INT 1
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: LIST
66711: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66712: LD_ADDR_VAR 0 43
66716: PUSH
66717: LD_INT 2
66719: PUSH
66720: LD_INT 2
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 3
66729: PUSH
66730: LD_INT 2
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 2
66739: PUSH
66740: LD_INT 3
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: LIST
66751: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66752: LD_ADDR_VAR 0 44
66756: PUSH
66757: LD_INT 0
66759: PUSH
66760: LD_INT 2
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 1
66769: PUSH
66770: LD_INT 3
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 1
66779: NEG
66780: PUSH
66781: LD_INT 2
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: LIST
66792: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66793: LD_ADDR_VAR 0 45
66797: PUSH
66798: LD_INT 2
66800: NEG
66801: PUSH
66802: LD_INT 0
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 2
66811: NEG
66812: PUSH
66813: LD_INT 1
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 3
66822: NEG
66823: PUSH
66824: LD_INT 1
66826: NEG
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: LIST
66836: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66837: LD_ADDR_VAR 0 46
66841: PUSH
66842: LD_INT 2
66844: NEG
66845: PUSH
66846: LD_INT 2
66848: NEG
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 2
66856: NEG
66857: PUSH
66858: LD_INT 3
66860: NEG
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 3
66868: NEG
66869: PUSH
66870: LD_INT 2
66872: NEG
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: LIST
66882: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66883: LD_ADDR_VAR 0 47
66887: PUSH
66888: LD_INT 2
66890: NEG
66891: PUSH
66892: LD_INT 3
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 1
66902: NEG
66903: PUSH
66904: LD_INT 3
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66916: LD_ADDR_VAR 0 48
66920: PUSH
66921: LD_INT 1
66923: PUSH
66924: LD_INT 2
66926: NEG
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 2
66934: PUSH
66935: LD_INT 1
66937: NEG
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66947: LD_ADDR_VAR 0 49
66951: PUSH
66952: LD_INT 3
66954: PUSH
66955: LD_INT 1
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 3
66964: PUSH
66965: LD_INT 2
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66976: LD_ADDR_VAR 0 50
66980: PUSH
66981: LD_INT 2
66983: PUSH
66984: LD_INT 3
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 1
66993: PUSH
66994: LD_INT 3
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67005: LD_ADDR_VAR 0 51
67009: PUSH
67010: LD_INT 1
67012: NEG
67013: PUSH
67014: LD_INT 2
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 2
67023: NEG
67024: PUSH
67025: LD_INT 1
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67036: LD_ADDR_VAR 0 52
67040: PUSH
67041: LD_INT 3
67043: NEG
67044: PUSH
67045: LD_INT 1
67047: NEG
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 3
67055: NEG
67056: PUSH
67057: LD_INT 2
67059: NEG
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67069: LD_ADDR_VAR 0 53
67073: PUSH
67074: LD_INT 1
67076: NEG
67077: PUSH
67078: LD_INT 3
67080: NEG
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 0
67088: PUSH
67089: LD_INT 3
67091: NEG
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 1
67099: PUSH
67100: LD_INT 2
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: LIST
67112: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67113: LD_ADDR_VAR 0 54
67117: PUSH
67118: LD_INT 2
67120: PUSH
67121: LD_INT 1
67123: NEG
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 3
67131: PUSH
67132: LD_INT 0
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 3
67141: PUSH
67142: LD_INT 1
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: LIST
67153: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67154: LD_ADDR_VAR 0 55
67158: PUSH
67159: LD_INT 3
67161: PUSH
67162: LD_INT 2
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 3
67171: PUSH
67172: LD_INT 3
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: LD_INT 2
67181: PUSH
67182: LD_INT 3
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: LIST
67193: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67194: LD_ADDR_VAR 0 56
67198: PUSH
67199: LD_INT 1
67201: PUSH
67202: LD_INT 3
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 0
67211: PUSH
67212: LD_INT 3
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 1
67221: NEG
67222: PUSH
67223: LD_INT 2
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: LIST
67234: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67235: LD_ADDR_VAR 0 57
67239: PUSH
67240: LD_INT 2
67242: NEG
67243: PUSH
67244: LD_INT 1
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 3
67253: NEG
67254: PUSH
67255: LD_INT 0
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 3
67264: NEG
67265: PUSH
67266: LD_INT 1
67268: NEG
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: LIST
67278: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67279: LD_ADDR_VAR 0 58
67283: PUSH
67284: LD_INT 2
67286: NEG
67287: PUSH
67288: LD_INT 3
67290: NEG
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 3
67298: NEG
67299: PUSH
67300: LD_INT 2
67302: NEG
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 3
67310: NEG
67311: PUSH
67312: LD_INT 3
67314: NEG
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: LIST
67324: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67325: LD_ADDR_VAR 0 59
67329: PUSH
67330: LD_INT 1
67332: NEG
67333: PUSH
67334: LD_INT 2
67336: NEG
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 0
67344: PUSH
67345: LD_INT 2
67347: NEG
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 1
67355: PUSH
67356: LD_INT 1
67358: NEG
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: LIST
67368: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67369: LD_ADDR_VAR 0 60
67373: PUSH
67374: LD_INT 1
67376: PUSH
67377: LD_INT 1
67379: NEG
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 2
67387: PUSH
67388: LD_INT 0
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 2
67397: PUSH
67398: LD_INT 1
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: LIST
67409: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67410: LD_ADDR_VAR 0 61
67414: PUSH
67415: LD_INT 2
67417: PUSH
67418: LD_INT 1
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 2
67427: PUSH
67428: LD_INT 2
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 1
67437: PUSH
67438: LD_INT 2
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: LIST
67449: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67450: LD_ADDR_VAR 0 62
67454: PUSH
67455: LD_INT 1
67457: PUSH
67458: LD_INT 2
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 0
67467: PUSH
67468: LD_INT 2
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 1
67477: NEG
67478: PUSH
67479: LD_INT 1
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: LIST
67490: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67491: LD_ADDR_VAR 0 63
67495: PUSH
67496: LD_INT 1
67498: NEG
67499: PUSH
67500: LD_INT 1
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 2
67509: NEG
67510: PUSH
67511: LD_INT 0
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 2
67520: NEG
67521: PUSH
67522: LD_INT 1
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: LIST
67534: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67535: LD_ADDR_VAR 0 64
67539: PUSH
67540: LD_INT 1
67542: NEG
67543: PUSH
67544: LD_INT 2
67546: NEG
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 2
67554: NEG
67555: PUSH
67556: LD_INT 1
67558: NEG
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 2
67566: NEG
67567: PUSH
67568: LD_INT 2
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: LIST
67580: ST_TO_ADDR
// end ; 2 :
67581: GO 70847
67583: LD_INT 2
67585: DOUBLE
67586: EQUAL
67587: IFTRUE 67591
67589: GO 70846
67591: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67592: LD_ADDR_VAR 0 29
67596: PUSH
67597: LD_INT 4
67599: PUSH
67600: LD_INT 0
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 4
67609: PUSH
67610: LD_INT 1
67612: NEG
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 5
67620: PUSH
67621: LD_INT 0
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 5
67630: PUSH
67631: LD_INT 1
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 4
67640: PUSH
67641: LD_INT 1
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 3
67650: PUSH
67651: LD_INT 0
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 3
67660: PUSH
67661: LD_INT 1
67663: NEG
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 3
67671: PUSH
67672: LD_INT 2
67674: NEG
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 5
67682: PUSH
67683: LD_INT 2
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 3
67692: PUSH
67693: LD_INT 3
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 3
67702: PUSH
67703: LD_INT 2
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 4
67712: PUSH
67713: LD_INT 3
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 4
67722: PUSH
67723: LD_INT 4
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 3
67732: PUSH
67733: LD_INT 4
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 2
67742: PUSH
67743: LD_INT 3
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 2
67752: PUSH
67753: LD_INT 2
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 4
67762: PUSH
67763: LD_INT 2
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: PUSH
67770: LD_INT 2
67772: PUSH
67773: LD_INT 4
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 0
67782: PUSH
67783: LD_INT 4
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 0
67792: PUSH
67793: LD_INT 3
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: LD_INT 1
67802: PUSH
67803: LD_INT 4
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 1
67812: PUSH
67813: LD_INT 5
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 0
67822: PUSH
67823: LD_INT 5
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 1
67832: NEG
67833: PUSH
67834: LD_INT 4
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 1
67843: NEG
67844: PUSH
67845: LD_INT 3
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 2
67854: PUSH
67855: LD_INT 5
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 2
67864: NEG
67865: PUSH
67866: LD_INT 3
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 3
67875: NEG
67876: PUSH
67877: LD_INT 0
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 3
67886: NEG
67887: PUSH
67888: LD_INT 1
67890: NEG
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 2
67898: NEG
67899: PUSH
67900: LD_INT 0
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 2
67909: NEG
67910: PUSH
67911: LD_INT 1
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 3
67920: NEG
67921: PUSH
67922: LD_INT 1
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 4
67931: NEG
67932: PUSH
67933: LD_INT 0
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 4
67942: NEG
67943: PUSH
67944: LD_INT 1
67946: NEG
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 4
67954: NEG
67955: PUSH
67956: LD_INT 2
67958: NEG
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 2
67966: NEG
67967: PUSH
67968: LD_INT 2
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 4
67977: NEG
67978: PUSH
67979: LD_INT 4
67981: NEG
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 4
67989: NEG
67990: PUSH
67991: LD_INT 5
67993: NEG
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 3
68001: NEG
68002: PUSH
68003: LD_INT 4
68005: NEG
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 3
68013: NEG
68014: PUSH
68015: LD_INT 3
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 4
68025: NEG
68026: PUSH
68027: LD_INT 3
68029: NEG
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 5
68037: NEG
68038: PUSH
68039: LD_INT 4
68041: NEG
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 5
68049: NEG
68050: PUSH
68051: LD_INT 5
68053: NEG
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 3
68061: NEG
68062: PUSH
68063: LD_INT 5
68065: NEG
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 5
68073: NEG
68074: PUSH
68075: LD_INT 3
68077: NEG
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68130: LD_ADDR_VAR 0 30
68134: PUSH
68135: LD_INT 4
68137: PUSH
68138: LD_INT 4
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 4
68147: PUSH
68148: LD_INT 3
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 5
68157: PUSH
68158: LD_INT 4
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 5
68167: PUSH
68168: LD_INT 5
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 4
68177: PUSH
68178: LD_INT 5
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 3
68187: PUSH
68188: LD_INT 4
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 3
68197: PUSH
68198: LD_INT 3
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 5
68207: PUSH
68208: LD_INT 3
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 3
68217: PUSH
68218: LD_INT 5
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 0
68227: PUSH
68228: LD_INT 3
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 0
68237: PUSH
68238: LD_INT 2
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 1
68247: PUSH
68248: LD_INT 3
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 1
68257: PUSH
68258: LD_INT 4
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 0
68267: PUSH
68268: LD_INT 4
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 1
68277: NEG
68278: PUSH
68279: LD_INT 3
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 1
68288: NEG
68289: PUSH
68290: LD_INT 2
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 2
68299: PUSH
68300: LD_INT 4
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 2
68309: NEG
68310: PUSH
68311: LD_INT 2
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 4
68320: NEG
68321: PUSH
68322: LD_INT 0
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 4
68331: NEG
68332: PUSH
68333: LD_INT 1
68335: NEG
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 3
68343: NEG
68344: PUSH
68345: LD_INT 0
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 3
68354: NEG
68355: PUSH
68356: LD_INT 1
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 4
68365: NEG
68366: PUSH
68367: LD_INT 1
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 5
68376: NEG
68377: PUSH
68378: LD_INT 0
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 5
68387: NEG
68388: PUSH
68389: LD_INT 1
68391: NEG
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 5
68399: NEG
68400: PUSH
68401: LD_INT 2
68403: NEG
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 3
68411: NEG
68412: PUSH
68413: LD_INT 2
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 3
68422: NEG
68423: PUSH
68424: LD_INT 3
68426: NEG
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 3
68434: NEG
68435: PUSH
68436: LD_INT 4
68438: NEG
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 2
68446: NEG
68447: PUSH
68448: LD_INT 3
68450: NEG
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 2
68458: NEG
68459: PUSH
68460: LD_INT 2
68462: NEG
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 3
68470: NEG
68471: PUSH
68472: LD_INT 2
68474: NEG
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 4
68482: NEG
68483: PUSH
68484: LD_INT 3
68486: NEG
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 4
68494: NEG
68495: PUSH
68496: LD_INT 4
68498: NEG
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 2
68506: NEG
68507: PUSH
68508: LD_INT 4
68510: NEG
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 4
68518: NEG
68519: PUSH
68520: LD_INT 2
68522: NEG
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 0
68530: PUSH
68531: LD_INT 4
68533: NEG
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 0
68541: PUSH
68542: LD_INT 5
68544: NEG
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 1
68552: PUSH
68553: LD_INT 4
68555: NEG
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 1
68563: PUSH
68564: LD_INT 3
68566: NEG
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 0
68574: PUSH
68575: LD_INT 3
68577: NEG
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 1
68585: NEG
68586: PUSH
68587: LD_INT 4
68589: NEG
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 1
68597: NEG
68598: PUSH
68599: LD_INT 5
68601: NEG
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 2
68609: PUSH
68610: LD_INT 3
68612: NEG
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 2
68620: NEG
68621: PUSH
68622: LD_INT 5
68624: NEG
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: LIST
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68677: LD_ADDR_VAR 0 31
68681: PUSH
68682: LD_INT 0
68684: PUSH
68685: LD_INT 4
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 0
68694: PUSH
68695: LD_INT 3
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 1
68704: PUSH
68705: LD_INT 4
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 1
68714: PUSH
68715: LD_INT 5
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 0
68724: PUSH
68725: LD_INT 5
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 1
68734: NEG
68735: PUSH
68736: LD_INT 4
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 1
68745: NEG
68746: PUSH
68747: LD_INT 3
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 2
68756: PUSH
68757: LD_INT 5
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 2
68766: NEG
68767: PUSH
68768: LD_INT 3
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 3
68777: NEG
68778: PUSH
68779: LD_INT 0
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 3
68788: NEG
68789: PUSH
68790: LD_INT 1
68792: NEG
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 2
68800: NEG
68801: PUSH
68802: LD_INT 0
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 2
68811: NEG
68812: PUSH
68813: LD_INT 1
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 3
68822: NEG
68823: PUSH
68824: LD_INT 1
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 4
68833: NEG
68834: PUSH
68835: LD_INT 0
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 4
68844: NEG
68845: PUSH
68846: LD_INT 1
68848: NEG
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 4
68856: NEG
68857: PUSH
68858: LD_INT 2
68860: NEG
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 2
68868: NEG
68869: PUSH
68870: LD_INT 2
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 4
68879: NEG
68880: PUSH
68881: LD_INT 4
68883: NEG
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 4
68891: NEG
68892: PUSH
68893: LD_INT 5
68895: NEG
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: LD_INT 3
68903: NEG
68904: PUSH
68905: LD_INT 4
68907: NEG
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 3
68915: NEG
68916: PUSH
68917: LD_INT 3
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 4
68927: NEG
68928: PUSH
68929: LD_INT 3
68931: NEG
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 5
68939: NEG
68940: PUSH
68941: LD_INT 4
68943: NEG
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 5
68951: NEG
68952: PUSH
68953: LD_INT 5
68955: NEG
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 3
68963: NEG
68964: PUSH
68965: LD_INT 5
68967: NEG
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: LD_INT 5
68975: NEG
68976: PUSH
68977: LD_INT 3
68979: NEG
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 0
68987: PUSH
68988: LD_INT 3
68990: NEG
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 0
68998: PUSH
68999: LD_INT 4
69001: NEG
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 1
69009: PUSH
69010: LD_INT 3
69012: NEG
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 1
69020: PUSH
69021: LD_INT 2
69023: NEG
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 0
69031: PUSH
69032: LD_INT 2
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 1
69042: NEG
69043: PUSH
69044: LD_INT 3
69046: NEG
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 1
69054: NEG
69055: PUSH
69056: LD_INT 4
69058: NEG
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 2
69066: PUSH
69067: LD_INT 2
69069: NEG
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 2
69077: NEG
69078: PUSH
69079: LD_INT 4
69081: NEG
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 4
69089: PUSH
69090: LD_INT 0
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 4
69099: PUSH
69100: LD_INT 1
69102: NEG
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 5
69110: PUSH
69111: LD_INT 0
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: LD_INT 5
69120: PUSH
69121: LD_INT 1
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 4
69130: PUSH
69131: LD_INT 1
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 3
69140: PUSH
69141: LD_INT 0
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 3
69150: PUSH
69151: LD_INT 1
69153: NEG
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 3
69161: PUSH
69162: LD_INT 2
69164: NEG
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 5
69172: PUSH
69173: LD_INT 2
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69227: LD_ADDR_VAR 0 32
69231: PUSH
69232: LD_INT 4
69234: NEG
69235: PUSH
69236: LD_INT 0
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 4
69245: NEG
69246: PUSH
69247: LD_INT 1
69249: NEG
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 3
69257: NEG
69258: PUSH
69259: LD_INT 0
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 3
69268: NEG
69269: PUSH
69270: LD_INT 1
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 4
69279: NEG
69280: PUSH
69281: LD_INT 1
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 5
69290: NEG
69291: PUSH
69292: LD_INT 0
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 5
69301: NEG
69302: PUSH
69303: LD_INT 1
69305: NEG
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: LD_INT 5
69313: NEG
69314: PUSH
69315: LD_INT 2
69317: NEG
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 3
69325: NEG
69326: PUSH
69327: LD_INT 2
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 3
69336: NEG
69337: PUSH
69338: LD_INT 3
69340: NEG
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 3
69348: NEG
69349: PUSH
69350: LD_INT 4
69352: NEG
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 2
69360: NEG
69361: PUSH
69362: LD_INT 3
69364: NEG
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 2
69372: NEG
69373: PUSH
69374: LD_INT 2
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 3
69384: NEG
69385: PUSH
69386: LD_INT 2
69388: NEG
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 4
69396: NEG
69397: PUSH
69398: LD_INT 3
69400: NEG
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 4
69408: NEG
69409: PUSH
69410: LD_INT 4
69412: NEG
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 2
69420: NEG
69421: PUSH
69422: LD_INT 4
69424: NEG
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 4
69432: NEG
69433: PUSH
69434: LD_INT 2
69436: NEG
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: LD_INT 0
69444: PUSH
69445: LD_INT 4
69447: NEG
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 0
69455: PUSH
69456: LD_INT 5
69458: NEG
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 1
69466: PUSH
69467: LD_INT 4
69469: NEG
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 1
69477: PUSH
69478: LD_INT 3
69480: NEG
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 0
69488: PUSH
69489: LD_INT 3
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 1
69499: NEG
69500: PUSH
69501: LD_INT 4
69503: NEG
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 1
69511: NEG
69512: PUSH
69513: LD_INT 5
69515: NEG
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: LD_INT 2
69523: PUSH
69524: LD_INT 3
69526: NEG
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: LD_INT 2
69534: NEG
69535: PUSH
69536: LD_INT 5
69538: NEG
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 3
69546: PUSH
69547: LD_INT 0
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 3
69556: PUSH
69557: LD_INT 1
69559: NEG
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 4
69567: PUSH
69568: LD_INT 0
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 4
69577: PUSH
69578: LD_INT 1
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 3
69587: PUSH
69588: LD_INT 1
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 2
69597: PUSH
69598: LD_INT 0
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 2
69607: PUSH
69608: LD_INT 1
69610: NEG
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 2
69618: PUSH
69619: LD_INT 2
69621: NEG
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 4
69629: PUSH
69630: LD_INT 2
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 4
69639: PUSH
69640: LD_INT 4
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 4
69649: PUSH
69650: LD_INT 3
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 5
69659: PUSH
69660: LD_INT 4
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 5
69669: PUSH
69670: LD_INT 5
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 4
69679: PUSH
69680: LD_INT 5
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 3
69689: PUSH
69690: LD_INT 4
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 3
69699: PUSH
69700: LD_INT 3
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 5
69709: PUSH
69710: LD_INT 3
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 3
69719: PUSH
69720: LD_INT 5
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69774: LD_ADDR_VAR 0 33
69778: PUSH
69779: LD_INT 4
69781: NEG
69782: PUSH
69783: LD_INT 4
69785: NEG
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 4
69793: NEG
69794: PUSH
69795: LD_INT 5
69797: NEG
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 3
69805: NEG
69806: PUSH
69807: LD_INT 4
69809: NEG
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 3
69817: NEG
69818: PUSH
69819: LD_INT 3
69821: NEG
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 4
69829: NEG
69830: PUSH
69831: LD_INT 3
69833: NEG
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 5
69841: NEG
69842: PUSH
69843: LD_INT 4
69845: NEG
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 5
69853: NEG
69854: PUSH
69855: LD_INT 5
69857: NEG
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 3
69865: NEG
69866: PUSH
69867: LD_INT 5
69869: NEG
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 5
69877: NEG
69878: PUSH
69879: LD_INT 3
69881: NEG
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 0
69889: PUSH
69890: LD_INT 3
69892: NEG
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 0
69900: PUSH
69901: LD_INT 4
69903: NEG
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 1
69911: PUSH
69912: LD_INT 3
69914: NEG
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 1
69922: PUSH
69923: LD_INT 2
69925: NEG
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 0
69933: PUSH
69934: LD_INT 2
69936: NEG
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 1
69944: NEG
69945: PUSH
69946: LD_INT 3
69948: NEG
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 1
69956: NEG
69957: PUSH
69958: LD_INT 4
69960: NEG
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 2
69968: PUSH
69969: LD_INT 2
69971: NEG
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: LD_INT 2
69979: NEG
69980: PUSH
69981: LD_INT 4
69983: NEG
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: LD_INT 4
69991: PUSH
69992: LD_INT 0
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 4
70001: PUSH
70002: LD_INT 1
70004: NEG
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 5
70012: PUSH
70013: LD_INT 0
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 5
70022: PUSH
70023: LD_INT 1
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 4
70032: PUSH
70033: LD_INT 1
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 3
70042: PUSH
70043: LD_INT 0
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: LD_INT 3
70052: PUSH
70053: LD_INT 1
70055: NEG
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: LD_INT 3
70063: PUSH
70064: LD_INT 2
70066: NEG
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: LD_INT 5
70074: PUSH
70075: LD_INT 2
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 3
70084: PUSH
70085: LD_INT 3
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: LD_INT 3
70094: PUSH
70095: LD_INT 2
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 4
70104: PUSH
70105: LD_INT 3
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: LD_INT 4
70114: PUSH
70115: LD_INT 4
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 3
70124: PUSH
70125: LD_INT 4
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 2
70134: PUSH
70135: LD_INT 3
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 2
70144: PUSH
70145: LD_INT 2
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: LD_INT 4
70154: PUSH
70155: LD_INT 2
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 2
70164: PUSH
70165: LD_INT 4
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: LD_INT 0
70174: PUSH
70175: LD_INT 4
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 0
70184: PUSH
70185: LD_INT 3
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 1
70194: PUSH
70195: LD_INT 4
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 1
70204: PUSH
70205: LD_INT 5
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 0
70214: PUSH
70215: LD_INT 5
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 1
70224: NEG
70225: PUSH
70226: LD_INT 4
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 1
70235: NEG
70236: PUSH
70237: LD_INT 3
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: LD_INT 2
70246: PUSH
70247: LD_INT 5
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: PUSH
70254: LD_INT 2
70256: NEG
70257: PUSH
70258: LD_INT 3
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70312: LD_ADDR_VAR 0 34
70316: PUSH
70317: LD_INT 0
70319: PUSH
70320: LD_INT 4
70322: NEG
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 0
70330: PUSH
70331: LD_INT 5
70333: NEG
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 1
70341: PUSH
70342: LD_INT 4
70344: NEG
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 1
70352: PUSH
70353: LD_INT 3
70355: NEG
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 0
70363: PUSH
70364: LD_INT 3
70366: NEG
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 1
70374: NEG
70375: PUSH
70376: LD_INT 4
70378: NEG
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: LD_INT 1
70386: NEG
70387: PUSH
70388: LD_INT 5
70390: NEG
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: PUSH
70396: LD_INT 2
70398: PUSH
70399: LD_INT 3
70401: NEG
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 2
70409: NEG
70410: PUSH
70411: LD_INT 5
70413: NEG
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 3
70421: PUSH
70422: LD_INT 0
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: LD_INT 3
70431: PUSH
70432: LD_INT 1
70434: NEG
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 4
70442: PUSH
70443: LD_INT 0
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: LD_INT 4
70452: PUSH
70453: LD_INT 1
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PUSH
70460: LD_INT 3
70462: PUSH
70463: LD_INT 1
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 2
70472: PUSH
70473: LD_INT 0
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 2
70482: PUSH
70483: LD_INT 1
70485: NEG
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 2
70493: PUSH
70494: LD_INT 2
70496: NEG
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 4
70504: PUSH
70505: LD_INT 2
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: LD_INT 4
70514: PUSH
70515: LD_INT 4
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 4
70524: PUSH
70525: LD_INT 3
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: LD_INT 5
70534: PUSH
70535: LD_INT 4
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: PUSH
70542: LD_INT 5
70544: PUSH
70545: LD_INT 5
70547: PUSH
70548: EMPTY
70549: LIST
70550: LIST
70551: PUSH
70552: LD_INT 4
70554: PUSH
70555: LD_INT 5
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 3
70564: PUSH
70565: LD_INT 4
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: LD_INT 3
70574: PUSH
70575: LD_INT 3
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_INT 5
70584: PUSH
70585: LD_INT 3
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PUSH
70592: LD_INT 3
70594: PUSH
70595: LD_INT 5
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 0
70604: PUSH
70605: LD_INT 3
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 0
70614: PUSH
70615: LD_INT 2
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 1
70624: PUSH
70625: LD_INT 3
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 1
70634: PUSH
70635: LD_INT 4
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PUSH
70642: LD_INT 0
70644: PUSH
70645: LD_INT 4
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: LD_INT 1
70654: NEG
70655: PUSH
70656: LD_INT 3
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 1
70665: NEG
70666: PUSH
70667: LD_INT 2
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 2
70676: PUSH
70677: LD_INT 4
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PUSH
70684: LD_INT 2
70686: NEG
70687: PUSH
70688: LD_INT 2
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: PUSH
70695: LD_INT 4
70697: NEG
70698: PUSH
70699: LD_INT 0
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PUSH
70706: LD_INT 4
70708: NEG
70709: PUSH
70710: LD_INT 1
70712: NEG
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 3
70720: NEG
70721: PUSH
70722: LD_INT 0
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 3
70731: NEG
70732: PUSH
70733: LD_INT 1
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 4
70742: NEG
70743: PUSH
70744: LD_INT 1
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 5
70753: NEG
70754: PUSH
70755: LD_INT 0
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 5
70764: NEG
70765: PUSH
70766: LD_INT 1
70768: NEG
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 5
70776: NEG
70777: PUSH
70778: LD_INT 2
70780: NEG
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: LD_INT 3
70788: NEG
70789: PUSH
70790: LD_INT 2
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: ST_TO_ADDR
// end ; end ;
70844: GO 70847
70846: POP
// case btype of b_depot , b_warehouse :
70847: LD_VAR 0 1
70851: PUSH
70852: LD_INT 0
70854: DOUBLE
70855: EQUAL
70856: IFTRUE 70866
70858: LD_INT 1
70860: DOUBLE
70861: EQUAL
70862: IFTRUE 70866
70864: GO 71067
70866: POP
// case nation of nation_american :
70867: LD_VAR 0 5
70871: PUSH
70872: LD_INT 1
70874: DOUBLE
70875: EQUAL
70876: IFTRUE 70880
70878: GO 70936
70880: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70881: LD_ADDR_VAR 0 9
70885: PUSH
70886: LD_VAR 0 11
70890: PUSH
70891: LD_VAR 0 12
70895: PUSH
70896: LD_VAR 0 13
70900: PUSH
70901: LD_VAR 0 14
70905: PUSH
70906: LD_VAR 0 15
70910: PUSH
70911: LD_VAR 0 16
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: LIST
70922: LIST
70923: PUSH
70924: LD_VAR 0 4
70928: PUSH
70929: LD_INT 1
70931: PLUS
70932: ARRAY
70933: ST_TO_ADDR
70934: GO 71065
70936: LD_INT 2
70938: DOUBLE
70939: EQUAL
70940: IFTRUE 70944
70942: GO 71000
70944: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70945: LD_ADDR_VAR 0 9
70949: PUSH
70950: LD_VAR 0 17
70954: PUSH
70955: LD_VAR 0 18
70959: PUSH
70960: LD_VAR 0 19
70964: PUSH
70965: LD_VAR 0 20
70969: PUSH
70970: LD_VAR 0 21
70974: PUSH
70975: LD_VAR 0 22
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: PUSH
70988: LD_VAR 0 4
70992: PUSH
70993: LD_INT 1
70995: PLUS
70996: ARRAY
70997: ST_TO_ADDR
70998: GO 71065
71000: LD_INT 3
71002: DOUBLE
71003: EQUAL
71004: IFTRUE 71008
71006: GO 71064
71008: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71009: LD_ADDR_VAR 0 9
71013: PUSH
71014: LD_VAR 0 23
71018: PUSH
71019: LD_VAR 0 24
71023: PUSH
71024: LD_VAR 0 25
71028: PUSH
71029: LD_VAR 0 26
71033: PUSH
71034: LD_VAR 0 27
71038: PUSH
71039: LD_VAR 0 28
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: PUSH
71052: LD_VAR 0 4
71056: PUSH
71057: LD_INT 1
71059: PLUS
71060: ARRAY
71061: ST_TO_ADDR
71062: GO 71065
71064: POP
71065: GO 71620
71067: LD_INT 2
71069: DOUBLE
71070: EQUAL
71071: IFTRUE 71081
71073: LD_INT 3
71075: DOUBLE
71076: EQUAL
71077: IFTRUE 71081
71079: GO 71137
71081: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71082: LD_ADDR_VAR 0 9
71086: PUSH
71087: LD_VAR 0 29
71091: PUSH
71092: LD_VAR 0 30
71096: PUSH
71097: LD_VAR 0 31
71101: PUSH
71102: LD_VAR 0 32
71106: PUSH
71107: LD_VAR 0 33
71111: PUSH
71112: LD_VAR 0 34
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: PUSH
71125: LD_VAR 0 4
71129: PUSH
71130: LD_INT 1
71132: PLUS
71133: ARRAY
71134: ST_TO_ADDR
71135: GO 71620
71137: LD_INT 16
71139: DOUBLE
71140: EQUAL
71141: IFTRUE 71199
71143: LD_INT 17
71145: DOUBLE
71146: EQUAL
71147: IFTRUE 71199
71149: LD_INT 18
71151: DOUBLE
71152: EQUAL
71153: IFTRUE 71199
71155: LD_INT 19
71157: DOUBLE
71158: EQUAL
71159: IFTRUE 71199
71161: LD_INT 22
71163: DOUBLE
71164: EQUAL
71165: IFTRUE 71199
71167: LD_INT 20
71169: DOUBLE
71170: EQUAL
71171: IFTRUE 71199
71173: LD_INT 21
71175: DOUBLE
71176: EQUAL
71177: IFTRUE 71199
71179: LD_INT 23
71181: DOUBLE
71182: EQUAL
71183: IFTRUE 71199
71185: LD_INT 24
71187: DOUBLE
71188: EQUAL
71189: IFTRUE 71199
71191: LD_INT 25
71193: DOUBLE
71194: EQUAL
71195: IFTRUE 71199
71197: GO 71255
71199: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71200: LD_ADDR_VAR 0 9
71204: PUSH
71205: LD_VAR 0 35
71209: PUSH
71210: LD_VAR 0 36
71214: PUSH
71215: LD_VAR 0 37
71219: PUSH
71220: LD_VAR 0 38
71224: PUSH
71225: LD_VAR 0 39
71229: PUSH
71230: LD_VAR 0 40
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: LIST
71242: PUSH
71243: LD_VAR 0 4
71247: PUSH
71248: LD_INT 1
71250: PLUS
71251: ARRAY
71252: ST_TO_ADDR
71253: GO 71620
71255: LD_INT 6
71257: DOUBLE
71258: EQUAL
71259: IFTRUE 71311
71261: LD_INT 7
71263: DOUBLE
71264: EQUAL
71265: IFTRUE 71311
71267: LD_INT 8
71269: DOUBLE
71270: EQUAL
71271: IFTRUE 71311
71273: LD_INT 13
71275: DOUBLE
71276: EQUAL
71277: IFTRUE 71311
71279: LD_INT 12
71281: DOUBLE
71282: EQUAL
71283: IFTRUE 71311
71285: LD_INT 15
71287: DOUBLE
71288: EQUAL
71289: IFTRUE 71311
71291: LD_INT 11
71293: DOUBLE
71294: EQUAL
71295: IFTRUE 71311
71297: LD_INT 14
71299: DOUBLE
71300: EQUAL
71301: IFTRUE 71311
71303: LD_INT 10
71305: DOUBLE
71306: EQUAL
71307: IFTRUE 71311
71309: GO 71367
71311: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71312: LD_ADDR_VAR 0 9
71316: PUSH
71317: LD_VAR 0 41
71321: PUSH
71322: LD_VAR 0 42
71326: PUSH
71327: LD_VAR 0 43
71331: PUSH
71332: LD_VAR 0 44
71336: PUSH
71337: LD_VAR 0 45
71341: PUSH
71342: LD_VAR 0 46
71346: PUSH
71347: EMPTY
71348: LIST
71349: LIST
71350: LIST
71351: LIST
71352: LIST
71353: LIST
71354: PUSH
71355: LD_VAR 0 4
71359: PUSH
71360: LD_INT 1
71362: PLUS
71363: ARRAY
71364: ST_TO_ADDR
71365: GO 71620
71367: LD_INT 36
71369: DOUBLE
71370: EQUAL
71371: IFTRUE 71375
71373: GO 71431
71375: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71376: LD_ADDR_VAR 0 9
71380: PUSH
71381: LD_VAR 0 47
71385: PUSH
71386: LD_VAR 0 48
71390: PUSH
71391: LD_VAR 0 49
71395: PUSH
71396: LD_VAR 0 50
71400: PUSH
71401: LD_VAR 0 51
71405: PUSH
71406: LD_VAR 0 52
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: PUSH
71419: LD_VAR 0 4
71423: PUSH
71424: LD_INT 1
71426: PLUS
71427: ARRAY
71428: ST_TO_ADDR
71429: GO 71620
71431: LD_INT 4
71433: DOUBLE
71434: EQUAL
71435: IFTRUE 71457
71437: LD_INT 5
71439: DOUBLE
71440: EQUAL
71441: IFTRUE 71457
71443: LD_INT 34
71445: DOUBLE
71446: EQUAL
71447: IFTRUE 71457
71449: LD_INT 37
71451: DOUBLE
71452: EQUAL
71453: IFTRUE 71457
71455: GO 71513
71457: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71458: LD_ADDR_VAR 0 9
71462: PUSH
71463: LD_VAR 0 53
71467: PUSH
71468: LD_VAR 0 54
71472: PUSH
71473: LD_VAR 0 55
71477: PUSH
71478: LD_VAR 0 56
71482: PUSH
71483: LD_VAR 0 57
71487: PUSH
71488: LD_VAR 0 58
71492: PUSH
71493: EMPTY
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: PUSH
71501: LD_VAR 0 4
71505: PUSH
71506: LD_INT 1
71508: PLUS
71509: ARRAY
71510: ST_TO_ADDR
71511: GO 71620
71513: LD_INT 31
71515: DOUBLE
71516: EQUAL
71517: IFTRUE 71563
71519: LD_INT 32
71521: DOUBLE
71522: EQUAL
71523: IFTRUE 71563
71525: LD_INT 33
71527: DOUBLE
71528: EQUAL
71529: IFTRUE 71563
71531: LD_INT 27
71533: DOUBLE
71534: EQUAL
71535: IFTRUE 71563
71537: LD_INT 26
71539: DOUBLE
71540: EQUAL
71541: IFTRUE 71563
71543: LD_INT 28
71545: DOUBLE
71546: EQUAL
71547: IFTRUE 71563
71549: LD_INT 29
71551: DOUBLE
71552: EQUAL
71553: IFTRUE 71563
71555: LD_INT 30
71557: DOUBLE
71558: EQUAL
71559: IFTRUE 71563
71561: GO 71619
71563: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71564: LD_ADDR_VAR 0 9
71568: PUSH
71569: LD_VAR 0 59
71573: PUSH
71574: LD_VAR 0 60
71578: PUSH
71579: LD_VAR 0 61
71583: PUSH
71584: LD_VAR 0 62
71588: PUSH
71589: LD_VAR 0 63
71593: PUSH
71594: LD_VAR 0 64
71598: PUSH
71599: EMPTY
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: PUSH
71607: LD_VAR 0 4
71611: PUSH
71612: LD_INT 1
71614: PLUS
71615: ARRAY
71616: ST_TO_ADDR
71617: GO 71620
71619: POP
// temp_list2 = [ ] ;
71620: LD_ADDR_VAR 0 10
71624: PUSH
71625: EMPTY
71626: ST_TO_ADDR
// for i in temp_list do
71627: LD_ADDR_VAR 0 8
71631: PUSH
71632: LD_VAR 0 9
71636: PUSH
71637: FOR_IN
71638: IFFALSE 71690
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71640: LD_ADDR_VAR 0 10
71644: PUSH
71645: LD_VAR 0 10
71649: PUSH
71650: LD_VAR 0 8
71654: PUSH
71655: LD_INT 1
71657: ARRAY
71658: PUSH
71659: LD_VAR 0 2
71663: PLUS
71664: PUSH
71665: LD_VAR 0 8
71669: PUSH
71670: LD_INT 2
71672: ARRAY
71673: PUSH
71674: LD_VAR 0 3
71678: PLUS
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: EMPTY
71685: LIST
71686: ADD
71687: ST_TO_ADDR
71688: GO 71637
71690: POP
71691: POP
// result = temp_list2 ;
71692: LD_ADDR_VAR 0 7
71696: PUSH
71697: LD_VAR 0 10
71701: ST_TO_ADDR
// end ;
71702: LD_VAR 0 7
71706: RET
// export function EnemyInRange ( unit , dist ) ; begin
71707: LD_INT 0
71709: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71710: LD_ADDR_VAR 0 3
71714: PUSH
71715: LD_VAR 0 1
71719: PPUSH
71720: CALL_OW 255
71724: PPUSH
71725: LD_VAR 0 1
71729: PPUSH
71730: CALL_OW 250
71734: PPUSH
71735: LD_VAR 0 1
71739: PPUSH
71740: CALL_OW 251
71744: PPUSH
71745: LD_VAR 0 2
71749: PPUSH
71750: CALL 45109 0 4
71754: PUSH
71755: LD_INT 4
71757: ARRAY
71758: ST_TO_ADDR
// end ;
71759: LD_VAR 0 3
71763: RET
// export function PlayerSeeMe ( unit ) ; begin
71764: LD_INT 0
71766: PPUSH
// result := See ( your_side , unit ) ;
71767: LD_ADDR_VAR 0 2
71771: PUSH
71772: LD_OWVAR 2
71776: PPUSH
71777: LD_VAR 0 1
71781: PPUSH
71782: CALL_OW 292
71786: ST_TO_ADDR
// end ;
71787: LD_VAR 0 2
71791: RET
// export function ReverseDir ( unit ) ; begin
71792: LD_INT 0
71794: PPUSH
// if not unit then
71795: LD_VAR 0 1
71799: NOT
71800: IFFALSE 71804
// exit ;
71802: GO 71827
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71804: LD_ADDR_VAR 0 2
71808: PUSH
71809: LD_VAR 0 1
71813: PPUSH
71814: CALL_OW 254
71818: PUSH
71819: LD_INT 3
71821: PLUS
71822: PUSH
71823: LD_INT 6
71825: MOD
71826: ST_TO_ADDR
// end ;
71827: LD_VAR 0 2
71831: RET
// export function ReverseArray ( array ) ; var i ; begin
71832: LD_INT 0
71834: PPUSH
71835: PPUSH
// if not array then
71836: LD_VAR 0 1
71840: NOT
71841: IFFALSE 71845
// exit ;
71843: GO 71900
// result := [ ] ;
71845: LD_ADDR_VAR 0 2
71849: PUSH
71850: EMPTY
71851: ST_TO_ADDR
// for i := array downto 1 do
71852: LD_ADDR_VAR 0 3
71856: PUSH
71857: DOUBLE
71858: LD_VAR 0 1
71862: INC
71863: ST_TO_ADDR
71864: LD_INT 1
71866: PUSH
71867: FOR_DOWNTO
71868: IFFALSE 71898
// result := Join ( result , array [ i ] ) ;
71870: LD_ADDR_VAR 0 2
71874: PUSH
71875: LD_VAR 0 2
71879: PPUSH
71880: LD_VAR 0 1
71884: PUSH
71885: LD_VAR 0 3
71889: ARRAY
71890: PPUSH
71891: CALL 76543 0 2
71895: ST_TO_ADDR
71896: GO 71867
71898: POP
71899: POP
// end ;
71900: LD_VAR 0 2
71904: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71905: LD_INT 0
71907: PPUSH
71908: PPUSH
71909: PPUSH
71910: PPUSH
71911: PPUSH
71912: PPUSH
// if not unit or not hexes then
71913: LD_VAR 0 1
71917: NOT
71918: PUSH
71919: LD_VAR 0 2
71923: NOT
71924: OR
71925: IFFALSE 71929
// exit ;
71927: GO 72052
// dist := 9999 ;
71929: LD_ADDR_VAR 0 5
71933: PUSH
71934: LD_INT 9999
71936: ST_TO_ADDR
// for i = 1 to hexes do
71937: LD_ADDR_VAR 0 4
71941: PUSH
71942: DOUBLE
71943: LD_INT 1
71945: DEC
71946: ST_TO_ADDR
71947: LD_VAR 0 2
71951: PUSH
71952: FOR_TO
71953: IFFALSE 72040
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71955: LD_ADDR_VAR 0 6
71959: PUSH
71960: LD_VAR 0 1
71964: PPUSH
71965: LD_VAR 0 2
71969: PUSH
71970: LD_VAR 0 4
71974: ARRAY
71975: PUSH
71976: LD_INT 1
71978: ARRAY
71979: PPUSH
71980: LD_VAR 0 2
71984: PUSH
71985: LD_VAR 0 4
71989: ARRAY
71990: PUSH
71991: LD_INT 2
71993: ARRAY
71994: PPUSH
71995: CALL_OW 297
71999: ST_TO_ADDR
// if tdist < dist then
72000: LD_VAR 0 6
72004: PUSH
72005: LD_VAR 0 5
72009: LESS
72010: IFFALSE 72038
// begin hex := hexes [ i ] ;
72012: LD_ADDR_VAR 0 8
72016: PUSH
72017: LD_VAR 0 2
72021: PUSH
72022: LD_VAR 0 4
72026: ARRAY
72027: ST_TO_ADDR
// dist := tdist ;
72028: LD_ADDR_VAR 0 5
72032: PUSH
72033: LD_VAR 0 6
72037: ST_TO_ADDR
// end ; end ;
72038: GO 71952
72040: POP
72041: POP
// result := hex ;
72042: LD_ADDR_VAR 0 3
72046: PUSH
72047: LD_VAR 0 8
72051: ST_TO_ADDR
// end ;
72052: LD_VAR 0 3
72056: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72057: LD_INT 0
72059: PPUSH
72060: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72061: LD_VAR 0 1
72065: NOT
72066: PUSH
72067: LD_VAR 0 1
72071: PUSH
72072: LD_INT 21
72074: PUSH
72075: LD_INT 2
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: PUSH
72082: LD_INT 23
72084: PUSH
72085: LD_INT 2
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: PPUSH
72096: CALL_OW 69
72100: IN
72101: NOT
72102: OR
72103: IFFALSE 72107
// exit ;
72105: GO 72154
// for i = 1 to 3 do
72107: LD_ADDR_VAR 0 3
72111: PUSH
72112: DOUBLE
72113: LD_INT 1
72115: DEC
72116: ST_TO_ADDR
72117: LD_INT 3
72119: PUSH
72120: FOR_TO
72121: IFFALSE 72152
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72123: LD_VAR 0 1
72127: PPUSH
72128: CALL_OW 250
72132: PPUSH
72133: LD_VAR 0 1
72137: PPUSH
72138: CALL_OW 251
72142: PPUSH
72143: LD_INT 1
72145: PPUSH
72146: CALL_OW 453
72150: GO 72120
72152: POP
72153: POP
// end ;
72154: LD_VAR 0 2
72158: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72159: LD_INT 0
72161: PPUSH
72162: PPUSH
72163: PPUSH
72164: PPUSH
72165: PPUSH
72166: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72167: LD_VAR 0 1
72171: NOT
72172: PUSH
72173: LD_VAR 0 2
72177: NOT
72178: OR
72179: PUSH
72180: LD_VAR 0 1
72184: PPUSH
72185: CALL_OW 314
72189: OR
72190: IFFALSE 72194
// exit ;
72192: GO 72661
// if GetLives ( i ) < 250 then
72194: LD_VAR 0 4
72198: PPUSH
72199: CALL_OW 256
72203: PUSH
72204: LD_INT 250
72206: LESS
72207: IFFALSE 72220
// begin ComAutodestruct ( i ) ;
72209: LD_VAR 0 4
72213: PPUSH
72214: CALL 72057 0 1
// exit ;
72218: GO 72661
// end ; x := GetX ( enemy_unit ) ;
72220: LD_ADDR_VAR 0 7
72224: PUSH
72225: LD_VAR 0 2
72229: PPUSH
72230: CALL_OW 250
72234: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72235: LD_ADDR_VAR 0 8
72239: PUSH
72240: LD_VAR 0 2
72244: PPUSH
72245: CALL_OW 251
72249: ST_TO_ADDR
// if not x or not y then
72250: LD_VAR 0 7
72254: NOT
72255: PUSH
72256: LD_VAR 0 8
72260: NOT
72261: OR
72262: IFFALSE 72266
// exit ;
72264: GO 72661
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72266: LD_ADDR_VAR 0 6
72270: PUSH
72271: LD_VAR 0 7
72275: PPUSH
72276: LD_INT 0
72278: PPUSH
72279: LD_INT 4
72281: PPUSH
72282: CALL_OW 272
72286: PUSH
72287: LD_VAR 0 8
72291: PPUSH
72292: LD_INT 0
72294: PPUSH
72295: LD_INT 4
72297: PPUSH
72298: CALL_OW 273
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: PUSH
72307: LD_VAR 0 7
72311: PPUSH
72312: LD_INT 1
72314: PPUSH
72315: LD_INT 4
72317: PPUSH
72318: CALL_OW 272
72322: PUSH
72323: LD_VAR 0 8
72327: PPUSH
72328: LD_INT 1
72330: PPUSH
72331: LD_INT 4
72333: PPUSH
72334: CALL_OW 273
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: PUSH
72343: LD_VAR 0 7
72347: PPUSH
72348: LD_INT 2
72350: PPUSH
72351: LD_INT 4
72353: PPUSH
72354: CALL_OW 272
72358: PUSH
72359: LD_VAR 0 8
72363: PPUSH
72364: LD_INT 2
72366: PPUSH
72367: LD_INT 4
72369: PPUSH
72370: CALL_OW 273
72374: PUSH
72375: EMPTY
72376: LIST
72377: LIST
72378: PUSH
72379: LD_VAR 0 7
72383: PPUSH
72384: LD_INT 3
72386: PPUSH
72387: LD_INT 4
72389: PPUSH
72390: CALL_OW 272
72394: PUSH
72395: LD_VAR 0 8
72399: PPUSH
72400: LD_INT 3
72402: PPUSH
72403: LD_INT 4
72405: PPUSH
72406: CALL_OW 273
72410: PUSH
72411: EMPTY
72412: LIST
72413: LIST
72414: PUSH
72415: LD_VAR 0 7
72419: PPUSH
72420: LD_INT 4
72422: PPUSH
72423: LD_INT 4
72425: PPUSH
72426: CALL_OW 272
72430: PUSH
72431: LD_VAR 0 8
72435: PPUSH
72436: LD_INT 4
72438: PPUSH
72439: LD_INT 4
72441: PPUSH
72442: CALL_OW 273
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: PUSH
72451: LD_VAR 0 7
72455: PPUSH
72456: LD_INT 5
72458: PPUSH
72459: LD_INT 4
72461: PPUSH
72462: CALL_OW 272
72466: PUSH
72467: LD_VAR 0 8
72471: PPUSH
72472: LD_INT 5
72474: PPUSH
72475: LD_INT 4
72477: PPUSH
72478: CALL_OW 273
72482: PUSH
72483: EMPTY
72484: LIST
72485: LIST
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: LIST
72493: LIST
72494: ST_TO_ADDR
// for i = tmp downto 1 do
72495: LD_ADDR_VAR 0 4
72499: PUSH
72500: DOUBLE
72501: LD_VAR 0 6
72505: INC
72506: ST_TO_ADDR
72507: LD_INT 1
72509: PUSH
72510: FOR_DOWNTO
72511: IFFALSE 72612
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72513: LD_VAR 0 6
72517: PUSH
72518: LD_VAR 0 4
72522: ARRAY
72523: PUSH
72524: LD_INT 1
72526: ARRAY
72527: PPUSH
72528: LD_VAR 0 6
72532: PUSH
72533: LD_VAR 0 4
72537: ARRAY
72538: PUSH
72539: LD_INT 2
72541: ARRAY
72542: PPUSH
72543: CALL_OW 488
72547: NOT
72548: PUSH
72549: LD_VAR 0 6
72553: PUSH
72554: LD_VAR 0 4
72558: ARRAY
72559: PUSH
72560: LD_INT 1
72562: ARRAY
72563: PPUSH
72564: LD_VAR 0 6
72568: PUSH
72569: LD_VAR 0 4
72573: ARRAY
72574: PUSH
72575: LD_INT 2
72577: ARRAY
72578: PPUSH
72579: CALL_OW 428
72583: PUSH
72584: LD_INT 0
72586: NONEQUAL
72587: OR
72588: IFFALSE 72610
// tmp := Delete ( tmp , i ) ;
72590: LD_ADDR_VAR 0 6
72594: PUSH
72595: LD_VAR 0 6
72599: PPUSH
72600: LD_VAR 0 4
72604: PPUSH
72605: CALL_OW 3
72609: ST_TO_ADDR
72610: GO 72510
72612: POP
72613: POP
// j := GetClosestHex ( unit , tmp ) ;
72614: LD_ADDR_VAR 0 5
72618: PUSH
72619: LD_VAR 0 1
72623: PPUSH
72624: LD_VAR 0 6
72628: PPUSH
72629: CALL 71905 0 2
72633: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72634: LD_VAR 0 1
72638: PPUSH
72639: LD_VAR 0 5
72643: PUSH
72644: LD_INT 1
72646: ARRAY
72647: PPUSH
72648: LD_VAR 0 5
72652: PUSH
72653: LD_INT 2
72655: ARRAY
72656: PPUSH
72657: CALL_OW 111
// end ;
72661: LD_VAR 0 3
72665: RET
// export function PrepareApemanSoldier ( ) ; begin
72666: LD_INT 0
72668: PPUSH
// uc_nation := 0 ;
72669: LD_ADDR_OWVAR 21
72673: PUSH
72674: LD_INT 0
72676: ST_TO_ADDR
// hc_sex := sex_male ;
72677: LD_ADDR_OWVAR 27
72681: PUSH
72682: LD_INT 1
72684: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72685: LD_ADDR_OWVAR 28
72689: PUSH
72690: LD_INT 15
72692: ST_TO_ADDR
// hc_gallery :=  ;
72693: LD_ADDR_OWVAR 33
72697: PUSH
72698: LD_STRING 
72700: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72701: LD_ADDR_OWVAR 31
72705: PUSH
72706: LD_INT 0
72708: PPUSH
72709: LD_INT 3
72711: PPUSH
72712: CALL_OW 12
72716: PUSH
72717: LD_INT 0
72719: PPUSH
72720: LD_INT 3
72722: PPUSH
72723: CALL_OW 12
72727: PUSH
72728: LD_INT 0
72730: PUSH
72731: LD_INT 0
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: LIST
72738: LIST
72739: ST_TO_ADDR
// end ;
72740: LD_VAR 0 1
72744: RET
// export function PrepareApemanEngineer ( ) ; begin
72745: LD_INT 0
72747: PPUSH
// uc_nation := 0 ;
72748: LD_ADDR_OWVAR 21
72752: PUSH
72753: LD_INT 0
72755: ST_TO_ADDR
// hc_sex := sex_male ;
72756: LD_ADDR_OWVAR 27
72760: PUSH
72761: LD_INT 1
72763: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72764: LD_ADDR_OWVAR 28
72768: PUSH
72769: LD_INT 16
72771: ST_TO_ADDR
// hc_gallery :=  ;
72772: LD_ADDR_OWVAR 33
72776: PUSH
72777: LD_STRING 
72779: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72780: LD_ADDR_OWVAR 31
72784: PUSH
72785: LD_INT 0
72787: PPUSH
72788: LD_INT 3
72790: PPUSH
72791: CALL_OW 12
72795: PUSH
72796: LD_INT 0
72798: PPUSH
72799: LD_INT 3
72801: PPUSH
72802: CALL_OW 12
72806: PUSH
72807: LD_INT 0
72809: PUSH
72810: LD_INT 0
72812: PUSH
72813: EMPTY
72814: LIST
72815: LIST
72816: LIST
72817: LIST
72818: ST_TO_ADDR
// end ;
72819: LD_VAR 0 1
72823: RET
// export function PrepareApeman ( agressivity ) ; begin
72824: LD_INT 0
72826: PPUSH
// uc_side := 0 ;
72827: LD_ADDR_OWVAR 20
72831: PUSH
72832: LD_INT 0
72834: ST_TO_ADDR
// uc_nation := 0 ;
72835: LD_ADDR_OWVAR 21
72839: PUSH
72840: LD_INT 0
72842: ST_TO_ADDR
// hc_sex := sex_male ;
72843: LD_ADDR_OWVAR 27
72847: PUSH
72848: LD_INT 1
72850: ST_TO_ADDR
// hc_class := class_apeman ;
72851: LD_ADDR_OWVAR 28
72855: PUSH
72856: LD_INT 12
72858: ST_TO_ADDR
// hc_gallery :=  ;
72859: LD_ADDR_OWVAR 33
72863: PUSH
72864: LD_STRING 
72866: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72867: LD_ADDR_OWVAR 35
72871: PUSH
72872: LD_VAR 0 1
72876: NEG
72877: PPUSH
72878: LD_VAR 0 1
72882: PPUSH
72883: CALL_OW 12
72887: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72888: LD_ADDR_OWVAR 31
72892: PUSH
72893: LD_INT 0
72895: PPUSH
72896: LD_INT 3
72898: PPUSH
72899: CALL_OW 12
72903: PUSH
72904: LD_INT 0
72906: PPUSH
72907: LD_INT 3
72909: PPUSH
72910: CALL_OW 12
72914: PUSH
72915: LD_INT 0
72917: PUSH
72918: LD_INT 0
72920: PUSH
72921: EMPTY
72922: LIST
72923: LIST
72924: LIST
72925: LIST
72926: ST_TO_ADDR
// end ;
72927: LD_VAR 0 2
72931: RET
// export function PrepareTiger ( agressivity ) ; begin
72932: LD_INT 0
72934: PPUSH
// uc_side := 0 ;
72935: LD_ADDR_OWVAR 20
72939: PUSH
72940: LD_INT 0
72942: ST_TO_ADDR
// uc_nation := 0 ;
72943: LD_ADDR_OWVAR 21
72947: PUSH
72948: LD_INT 0
72950: ST_TO_ADDR
// hc_class := class_tiger ;
72951: LD_ADDR_OWVAR 28
72955: PUSH
72956: LD_INT 14
72958: ST_TO_ADDR
// hc_gallery :=  ;
72959: LD_ADDR_OWVAR 33
72963: PUSH
72964: LD_STRING 
72966: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72967: LD_ADDR_OWVAR 35
72971: PUSH
72972: LD_VAR 0 1
72976: NEG
72977: PPUSH
72978: LD_VAR 0 1
72982: PPUSH
72983: CALL_OW 12
72987: ST_TO_ADDR
// end ;
72988: LD_VAR 0 2
72992: RET
// export function PrepareEnchidna ( ) ; begin
72993: LD_INT 0
72995: PPUSH
// uc_side := 0 ;
72996: LD_ADDR_OWVAR 20
73000: PUSH
73001: LD_INT 0
73003: ST_TO_ADDR
// uc_nation := 0 ;
73004: LD_ADDR_OWVAR 21
73008: PUSH
73009: LD_INT 0
73011: ST_TO_ADDR
// hc_class := class_baggie ;
73012: LD_ADDR_OWVAR 28
73016: PUSH
73017: LD_INT 13
73019: ST_TO_ADDR
// hc_gallery :=  ;
73020: LD_ADDR_OWVAR 33
73024: PUSH
73025: LD_STRING 
73027: ST_TO_ADDR
// end ;
73028: LD_VAR 0 1
73032: RET
// export function PrepareFrog ( ) ; begin
73033: LD_INT 0
73035: PPUSH
// uc_side := 0 ;
73036: LD_ADDR_OWVAR 20
73040: PUSH
73041: LD_INT 0
73043: ST_TO_ADDR
// uc_nation := 0 ;
73044: LD_ADDR_OWVAR 21
73048: PUSH
73049: LD_INT 0
73051: ST_TO_ADDR
// hc_class := class_frog ;
73052: LD_ADDR_OWVAR 28
73056: PUSH
73057: LD_INT 19
73059: ST_TO_ADDR
// hc_gallery :=  ;
73060: LD_ADDR_OWVAR 33
73064: PUSH
73065: LD_STRING 
73067: ST_TO_ADDR
// end ;
73068: LD_VAR 0 1
73072: RET
// export function PrepareFish ( ) ; begin
73073: LD_INT 0
73075: PPUSH
// uc_side := 0 ;
73076: LD_ADDR_OWVAR 20
73080: PUSH
73081: LD_INT 0
73083: ST_TO_ADDR
// uc_nation := 0 ;
73084: LD_ADDR_OWVAR 21
73088: PUSH
73089: LD_INT 0
73091: ST_TO_ADDR
// hc_class := class_fish ;
73092: LD_ADDR_OWVAR 28
73096: PUSH
73097: LD_INT 20
73099: ST_TO_ADDR
// hc_gallery :=  ;
73100: LD_ADDR_OWVAR 33
73104: PUSH
73105: LD_STRING 
73107: ST_TO_ADDR
// end ;
73108: LD_VAR 0 1
73112: RET
// export function PrepareBird ( ) ; begin
73113: LD_INT 0
73115: PPUSH
// uc_side := 0 ;
73116: LD_ADDR_OWVAR 20
73120: PUSH
73121: LD_INT 0
73123: ST_TO_ADDR
// uc_nation := 0 ;
73124: LD_ADDR_OWVAR 21
73128: PUSH
73129: LD_INT 0
73131: ST_TO_ADDR
// hc_class := class_phororhacos ;
73132: LD_ADDR_OWVAR 28
73136: PUSH
73137: LD_INT 18
73139: ST_TO_ADDR
// hc_gallery :=  ;
73140: LD_ADDR_OWVAR 33
73144: PUSH
73145: LD_STRING 
73147: ST_TO_ADDR
// end ;
73148: LD_VAR 0 1
73152: RET
// export function PrepareHorse ( ) ; begin
73153: LD_INT 0
73155: PPUSH
// uc_side := 0 ;
73156: LD_ADDR_OWVAR 20
73160: PUSH
73161: LD_INT 0
73163: ST_TO_ADDR
// uc_nation := 0 ;
73164: LD_ADDR_OWVAR 21
73168: PUSH
73169: LD_INT 0
73171: ST_TO_ADDR
// hc_class := class_horse ;
73172: LD_ADDR_OWVAR 28
73176: PUSH
73177: LD_INT 21
73179: ST_TO_ADDR
// hc_gallery :=  ;
73180: LD_ADDR_OWVAR 33
73184: PUSH
73185: LD_STRING 
73187: ST_TO_ADDR
// end ;
73188: LD_VAR 0 1
73192: RET
// export function PrepareMastodont ( ) ; begin
73193: LD_INT 0
73195: PPUSH
// uc_side := 0 ;
73196: LD_ADDR_OWVAR 20
73200: PUSH
73201: LD_INT 0
73203: ST_TO_ADDR
// uc_nation := 0 ;
73204: LD_ADDR_OWVAR 21
73208: PUSH
73209: LD_INT 0
73211: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73212: LD_ADDR_OWVAR 37
73216: PUSH
73217: LD_INT 31
73219: ST_TO_ADDR
// vc_control := control_rider ;
73220: LD_ADDR_OWVAR 38
73224: PUSH
73225: LD_INT 4
73227: ST_TO_ADDR
// end ;
73228: LD_VAR 0 1
73232: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73233: LD_INT 0
73235: PPUSH
73236: PPUSH
73237: PPUSH
// uc_side = 0 ;
73238: LD_ADDR_OWVAR 20
73242: PUSH
73243: LD_INT 0
73245: ST_TO_ADDR
// uc_nation = 0 ;
73246: LD_ADDR_OWVAR 21
73250: PUSH
73251: LD_INT 0
73253: ST_TO_ADDR
// InitHc_All ( ) ;
73254: CALL_OW 584
// InitVc ;
73258: CALL_OW 20
// if mastodonts then
73262: LD_VAR 0 6
73266: IFFALSE 73333
// for i = 1 to mastodonts do
73268: LD_ADDR_VAR 0 11
73272: PUSH
73273: DOUBLE
73274: LD_INT 1
73276: DEC
73277: ST_TO_ADDR
73278: LD_VAR 0 6
73282: PUSH
73283: FOR_TO
73284: IFFALSE 73331
// begin vc_chassis := 31 ;
73286: LD_ADDR_OWVAR 37
73290: PUSH
73291: LD_INT 31
73293: ST_TO_ADDR
// vc_control := control_rider ;
73294: LD_ADDR_OWVAR 38
73298: PUSH
73299: LD_INT 4
73301: ST_TO_ADDR
// animal := CreateVehicle ;
73302: LD_ADDR_VAR 0 12
73306: PUSH
73307: CALL_OW 45
73311: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73312: LD_VAR 0 12
73316: PPUSH
73317: LD_VAR 0 8
73321: PPUSH
73322: LD_INT 0
73324: PPUSH
73325: CALL 75461 0 3
// end ;
73329: GO 73283
73331: POP
73332: POP
// if horses then
73333: LD_VAR 0 5
73337: IFFALSE 73404
// for i = 1 to horses do
73339: LD_ADDR_VAR 0 11
73343: PUSH
73344: DOUBLE
73345: LD_INT 1
73347: DEC
73348: ST_TO_ADDR
73349: LD_VAR 0 5
73353: PUSH
73354: FOR_TO
73355: IFFALSE 73402
// begin hc_class := 21 ;
73357: LD_ADDR_OWVAR 28
73361: PUSH
73362: LD_INT 21
73364: ST_TO_ADDR
// hc_gallery :=  ;
73365: LD_ADDR_OWVAR 33
73369: PUSH
73370: LD_STRING 
73372: ST_TO_ADDR
// animal := CreateHuman ;
73373: LD_ADDR_VAR 0 12
73377: PUSH
73378: CALL_OW 44
73382: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73383: LD_VAR 0 12
73387: PPUSH
73388: LD_VAR 0 8
73392: PPUSH
73393: LD_INT 0
73395: PPUSH
73396: CALL 75461 0 3
// end ;
73400: GO 73354
73402: POP
73403: POP
// if birds then
73404: LD_VAR 0 1
73408: IFFALSE 73475
// for i = 1 to birds do
73410: LD_ADDR_VAR 0 11
73414: PUSH
73415: DOUBLE
73416: LD_INT 1
73418: DEC
73419: ST_TO_ADDR
73420: LD_VAR 0 1
73424: PUSH
73425: FOR_TO
73426: IFFALSE 73473
// begin hc_class = 18 ;
73428: LD_ADDR_OWVAR 28
73432: PUSH
73433: LD_INT 18
73435: ST_TO_ADDR
// hc_gallery =  ;
73436: LD_ADDR_OWVAR 33
73440: PUSH
73441: LD_STRING 
73443: ST_TO_ADDR
// animal := CreateHuman ;
73444: LD_ADDR_VAR 0 12
73448: PUSH
73449: CALL_OW 44
73453: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73454: LD_VAR 0 12
73458: PPUSH
73459: LD_VAR 0 8
73463: PPUSH
73464: LD_INT 0
73466: PPUSH
73467: CALL 75461 0 3
// end ;
73471: GO 73425
73473: POP
73474: POP
// if tigers then
73475: LD_VAR 0 2
73479: IFFALSE 73563
// for i = 1 to tigers do
73481: LD_ADDR_VAR 0 11
73485: PUSH
73486: DOUBLE
73487: LD_INT 1
73489: DEC
73490: ST_TO_ADDR
73491: LD_VAR 0 2
73495: PUSH
73496: FOR_TO
73497: IFFALSE 73561
// begin hc_class = class_tiger ;
73499: LD_ADDR_OWVAR 28
73503: PUSH
73504: LD_INT 14
73506: ST_TO_ADDR
// hc_gallery =  ;
73507: LD_ADDR_OWVAR 33
73511: PUSH
73512: LD_STRING 
73514: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73515: LD_ADDR_OWVAR 35
73519: PUSH
73520: LD_INT 7
73522: NEG
73523: PPUSH
73524: LD_INT 7
73526: PPUSH
73527: CALL_OW 12
73531: ST_TO_ADDR
// animal := CreateHuman ;
73532: LD_ADDR_VAR 0 12
73536: PUSH
73537: CALL_OW 44
73541: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73542: LD_VAR 0 12
73546: PPUSH
73547: LD_VAR 0 8
73551: PPUSH
73552: LD_INT 0
73554: PPUSH
73555: CALL 75461 0 3
// end ;
73559: GO 73496
73561: POP
73562: POP
// if apemans then
73563: LD_VAR 0 3
73567: IFFALSE 73690
// for i = 1 to apemans do
73569: LD_ADDR_VAR 0 11
73573: PUSH
73574: DOUBLE
73575: LD_INT 1
73577: DEC
73578: ST_TO_ADDR
73579: LD_VAR 0 3
73583: PUSH
73584: FOR_TO
73585: IFFALSE 73688
// begin hc_class = class_apeman ;
73587: LD_ADDR_OWVAR 28
73591: PUSH
73592: LD_INT 12
73594: ST_TO_ADDR
// hc_gallery =  ;
73595: LD_ADDR_OWVAR 33
73599: PUSH
73600: LD_STRING 
73602: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73603: LD_ADDR_OWVAR 35
73607: PUSH
73608: LD_INT 2
73610: NEG
73611: PPUSH
73612: LD_INT 2
73614: PPUSH
73615: CALL_OW 12
73619: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73620: LD_ADDR_OWVAR 31
73624: PUSH
73625: LD_INT 1
73627: PPUSH
73628: LD_INT 3
73630: PPUSH
73631: CALL_OW 12
73635: PUSH
73636: LD_INT 1
73638: PPUSH
73639: LD_INT 3
73641: PPUSH
73642: CALL_OW 12
73646: PUSH
73647: LD_INT 0
73649: PUSH
73650: LD_INT 0
73652: PUSH
73653: EMPTY
73654: LIST
73655: LIST
73656: LIST
73657: LIST
73658: ST_TO_ADDR
// animal := CreateHuman ;
73659: LD_ADDR_VAR 0 12
73663: PUSH
73664: CALL_OW 44
73668: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73669: LD_VAR 0 12
73673: PPUSH
73674: LD_VAR 0 8
73678: PPUSH
73679: LD_INT 0
73681: PPUSH
73682: CALL 75461 0 3
// end ;
73686: GO 73584
73688: POP
73689: POP
// if enchidnas then
73690: LD_VAR 0 4
73694: IFFALSE 73761
// for i = 1 to enchidnas do
73696: LD_ADDR_VAR 0 11
73700: PUSH
73701: DOUBLE
73702: LD_INT 1
73704: DEC
73705: ST_TO_ADDR
73706: LD_VAR 0 4
73710: PUSH
73711: FOR_TO
73712: IFFALSE 73759
// begin hc_class = 13 ;
73714: LD_ADDR_OWVAR 28
73718: PUSH
73719: LD_INT 13
73721: ST_TO_ADDR
// hc_gallery =  ;
73722: LD_ADDR_OWVAR 33
73726: PUSH
73727: LD_STRING 
73729: ST_TO_ADDR
// animal := CreateHuman ;
73730: LD_ADDR_VAR 0 12
73734: PUSH
73735: CALL_OW 44
73739: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73740: LD_VAR 0 12
73744: PPUSH
73745: LD_VAR 0 8
73749: PPUSH
73750: LD_INT 0
73752: PPUSH
73753: CALL 75461 0 3
// end ;
73757: GO 73711
73759: POP
73760: POP
// if fishes then
73761: LD_VAR 0 7
73765: IFFALSE 73832
// for i = 1 to fishes do
73767: LD_ADDR_VAR 0 11
73771: PUSH
73772: DOUBLE
73773: LD_INT 1
73775: DEC
73776: ST_TO_ADDR
73777: LD_VAR 0 7
73781: PUSH
73782: FOR_TO
73783: IFFALSE 73830
// begin hc_class = 20 ;
73785: LD_ADDR_OWVAR 28
73789: PUSH
73790: LD_INT 20
73792: ST_TO_ADDR
// hc_gallery =  ;
73793: LD_ADDR_OWVAR 33
73797: PUSH
73798: LD_STRING 
73800: ST_TO_ADDR
// animal := CreateHuman ;
73801: LD_ADDR_VAR 0 12
73805: PUSH
73806: CALL_OW 44
73810: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73811: LD_VAR 0 12
73815: PPUSH
73816: LD_VAR 0 9
73820: PPUSH
73821: LD_INT 0
73823: PPUSH
73824: CALL 75461 0 3
// end ;
73828: GO 73782
73830: POP
73831: POP
// end ;
73832: LD_VAR 0 10
73836: RET
// export function WantHeal ( sci , unit ) ; begin
73837: LD_INT 0
73839: PPUSH
// if GetTaskList ( sci ) > 0 then
73840: LD_VAR 0 1
73844: PPUSH
73845: CALL_OW 437
73849: PUSH
73850: LD_INT 0
73852: GREATER
73853: IFFALSE 73923
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73855: LD_VAR 0 1
73859: PPUSH
73860: CALL_OW 437
73864: PUSH
73865: LD_INT 1
73867: ARRAY
73868: PUSH
73869: LD_INT 1
73871: ARRAY
73872: PUSH
73873: LD_STRING l
73875: EQUAL
73876: PUSH
73877: LD_VAR 0 1
73881: PPUSH
73882: CALL_OW 437
73886: PUSH
73887: LD_INT 1
73889: ARRAY
73890: PUSH
73891: LD_INT 4
73893: ARRAY
73894: PUSH
73895: LD_VAR 0 2
73899: EQUAL
73900: AND
73901: IFFALSE 73913
// result := true else
73903: LD_ADDR_VAR 0 3
73907: PUSH
73908: LD_INT 1
73910: ST_TO_ADDR
73911: GO 73921
// result := false ;
73913: LD_ADDR_VAR 0 3
73917: PUSH
73918: LD_INT 0
73920: ST_TO_ADDR
// end else
73921: GO 73931
// result := false ;
73923: LD_ADDR_VAR 0 3
73927: PUSH
73928: LD_INT 0
73930: ST_TO_ADDR
// end ;
73931: LD_VAR 0 3
73935: RET
// export function HealTarget ( sci ) ; begin
73936: LD_INT 0
73938: PPUSH
// if not sci then
73939: LD_VAR 0 1
73943: NOT
73944: IFFALSE 73948
// exit ;
73946: GO 74013
// result := 0 ;
73948: LD_ADDR_VAR 0 2
73952: PUSH
73953: LD_INT 0
73955: ST_TO_ADDR
// if GetTaskList ( sci ) then
73956: LD_VAR 0 1
73960: PPUSH
73961: CALL_OW 437
73965: IFFALSE 74013
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73967: LD_VAR 0 1
73971: PPUSH
73972: CALL_OW 437
73976: PUSH
73977: LD_INT 1
73979: ARRAY
73980: PUSH
73981: LD_INT 1
73983: ARRAY
73984: PUSH
73985: LD_STRING l
73987: EQUAL
73988: IFFALSE 74013
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73990: LD_ADDR_VAR 0 2
73994: PUSH
73995: LD_VAR 0 1
73999: PPUSH
74000: CALL_OW 437
74004: PUSH
74005: LD_INT 1
74007: ARRAY
74008: PUSH
74009: LD_INT 4
74011: ARRAY
74012: ST_TO_ADDR
// end ;
74013: LD_VAR 0 2
74017: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74018: LD_INT 0
74020: PPUSH
74021: PPUSH
74022: PPUSH
74023: PPUSH
// if not base_units then
74024: LD_VAR 0 1
74028: NOT
74029: IFFALSE 74033
// exit ;
74031: GO 74120
// result := false ;
74033: LD_ADDR_VAR 0 2
74037: PUSH
74038: LD_INT 0
74040: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74041: LD_ADDR_VAR 0 5
74045: PUSH
74046: LD_VAR 0 1
74050: PPUSH
74051: LD_INT 21
74053: PUSH
74054: LD_INT 3
74056: PUSH
74057: EMPTY
74058: LIST
74059: LIST
74060: PPUSH
74061: CALL_OW 72
74065: ST_TO_ADDR
// if not tmp then
74066: LD_VAR 0 5
74070: NOT
74071: IFFALSE 74075
// exit ;
74073: GO 74120
// for i in tmp do
74075: LD_ADDR_VAR 0 3
74079: PUSH
74080: LD_VAR 0 5
74084: PUSH
74085: FOR_IN
74086: IFFALSE 74118
// begin result := EnemyInRange ( i , 22 ) ;
74088: LD_ADDR_VAR 0 2
74092: PUSH
74093: LD_VAR 0 3
74097: PPUSH
74098: LD_INT 22
74100: PPUSH
74101: CALL 71707 0 2
74105: ST_TO_ADDR
// if result then
74106: LD_VAR 0 2
74110: IFFALSE 74116
// exit ;
74112: POP
74113: POP
74114: GO 74120
// end ;
74116: GO 74085
74118: POP
74119: POP
// end ;
74120: LD_VAR 0 2
74124: RET
// export function FilterByTag ( units , tag ) ; begin
74125: LD_INT 0
74127: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74128: LD_ADDR_VAR 0 3
74132: PUSH
74133: LD_VAR 0 1
74137: PPUSH
74138: LD_INT 120
74140: PUSH
74141: LD_VAR 0 2
74145: PUSH
74146: EMPTY
74147: LIST
74148: LIST
74149: PPUSH
74150: CALL_OW 72
74154: ST_TO_ADDR
// end ;
74155: LD_VAR 0 3
74159: RET
// export function IsDriver ( un ) ; begin
74160: LD_INT 0
74162: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74163: LD_ADDR_VAR 0 2
74167: PUSH
74168: LD_VAR 0 1
74172: PUSH
74173: LD_INT 55
74175: PUSH
74176: EMPTY
74177: LIST
74178: PPUSH
74179: CALL_OW 69
74183: IN
74184: ST_TO_ADDR
// end ;
74185: LD_VAR 0 2
74189: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74190: LD_INT 0
74192: PPUSH
74193: PPUSH
// list := [ ] ;
74194: LD_ADDR_VAR 0 5
74198: PUSH
74199: EMPTY
74200: ST_TO_ADDR
// case d of 0 :
74201: LD_VAR 0 3
74205: PUSH
74206: LD_INT 0
74208: DOUBLE
74209: EQUAL
74210: IFTRUE 74214
74212: GO 74347
74214: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74215: LD_ADDR_VAR 0 5
74219: PUSH
74220: LD_VAR 0 1
74224: PUSH
74225: LD_INT 4
74227: MINUS
74228: PUSH
74229: LD_VAR 0 2
74233: PUSH
74234: LD_INT 4
74236: MINUS
74237: PUSH
74238: LD_INT 2
74240: PUSH
74241: EMPTY
74242: LIST
74243: LIST
74244: LIST
74245: PUSH
74246: LD_VAR 0 1
74250: PUSH
74251: LD_INT 3
74253: MINUS
74254: PUSH
74255: LD_VAR 0 2
74259: PUSH
74260: LD_INT 1
74262: PUSH
74263: EMPTY
74264: LIST
74265: LIST
74266: LIST
74267: PUSH
74268: LD_VAR 0 1
74272: PUSH
74273: LD_INT 4
74275: PLUS
74276: PUSH
74277: LD_VAR 0 2
74281: PUSH
74282: LD_INT 4
74284: PUSH
74285: EMPTY
74286: LIST
74287: LIST
74288: LIST
74289: PUSH
74290: LD_VAR 0 1
74294: PUSH
74295: LD_INT 3
74297: PLUS
74298: PUSH
74299: LD_VAR 0 2
74303: PUSH
74304: LD_INT 3
74306: PLUS
74307: PUSH
74308: LD_INT 5
74310: PUSH
74311: EMPTY
74312: LIST
74313: LIST
74314: LIST
74315: PUSH
74316: LD_VAR 0 1
74320: PUSH
74321: LD_VAR 0 2
74325: PUSH
74326: LD_INT 4
74328: PLUS
74329: PUSH
74330: LD_INT 0
74332: PUSH
74333: EMPTY
74334: LIST
74335: LIST
74336: LIST
74337: PUSH
74338: EMPTY
74339: LIST
74340: LIST
74341: LIST
74342: LIST
74343: LIST
74344: ST_TO_ADDR
// end ; 1 :
74345: GO 75045
74347: LD_INT 1
74349: DOUBLE
74350: EQUAL
74351: IFTRUE 74355
74353: GO 74488
74355: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74356: LD_ADDR_VAR 0 5
74360: PUSH
74361: LD_VAR 0 1
74365: PUSH
74366: LD_VAR 0 2
74370: PUSH
74371: LD_INT 4
74373: MINUS
74374: PUSH
74375: LD_INT 3
74377: PUSH
74378: EMPTY
74379: LIST
74380: LIST
74381: LIST
74382: PUSH
74383: LD_VAR 0 1
74387: PUSH
74388: LD_INT 3
74390: MINUS
74391: PUSH
74392: LD_VAR 0 2
74396: PUSH
74397: LD_INT 3
74399: MINUS
74400: PUSH
74401: LD_INT 2
74403: PUSH
74404: EMPTY
74405: LIST
74406: LIST
74407: LIST
74408: PUSH
74409: LD_VAR 0 1
74413: PUSH
74414: LD_INT 4
74416: MINUS
74417: PUSH
74418: LD_VAR 0 2
74422: PUSH
74423: LD_INT 1
74425: PUSH
74426: EMPTY
74427: LIST
74428: LIST
74429: LIST
74430: PUSH
74431: LD_VAR 0 1
74435: PUSH
74436: LD_VAR 0 2
74440: PUSH
74441: LD_INT 3
74443: PLUS
74444: PUSH
74445: LD_INT 0
74447: PUSH
74448: EMPTY
74449: LIST
74450: LIST
74451: LIST
74452: PUSH
74453: LD_VAR 0 1
74457: PUSH
74458: LD_INT 4
74460: PLUS
74461: PUSH
74462: LD_VAR 0 2
74466: PUSH
74467: LD_INT 4
74469: PLUS
74470: PUSH
74471: LD_INT 5
74473: PUSH
74474: EMPTY
74475: LIST
74476: LIST
74477: LIST
74478: PUSH
74479: EMPTY
74480: LIST
74481: LIST
74482: LIST
74483: LIST
74484: LIST
74485: ST_TO_ADDR
// end ; 2 :
74486: GO 75045
74488: LD_INT 2
74490: DOUBLE
74491: EQUAL
74492: IFTRUE 74496
74494: GO 74625
74496: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74497: LD_ADDR_VAR 0 5
74501: PUSH
74502: LD_VAR 0 1
74506: PUSH
74507: LD_VAR 0 2
74511: PUSH
74512: LD_INT 3
74514: MINUS
74515: PUSH
74516: LD_INT 3
74518: PUSH
74519: EMPTY
74520: LIST
74521: LIST
74522: LIST
74523: PUSH
74524: LD_VAR 0 1
74528: PUSH
74529: LD_INT 4
74531: PLUS
74532: PUSH
74533: LD_VAR 0 2
74537: PUSH
74538: LD_INT 4
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: LIST
74545: PUSH
74546: LD_VAR 0 1
74550: PUSH
74551: LD_VAR 0 2
74555: PUSH
74556: LD_INT 4
74558: PLUS
74559: PUSH
74560: LD_INT 0
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: LIST
74567: PUSH
74568: LD_VAR 0 1
74572: PUSH
74573: LD_INT 3
74575: MINUS
74576: PUSH
74577: LD_VAR 0 2
74581: PUSH
74582: LD_INT 1
74584: PUSH
74585: EMPTY
74586: LIST
74587: LIST
74588: LIST
74589: PUSH
74590: LD_VAR 0 1
74594: PUSH
74595: LD_INT 4
74597: MINUS
74598: PUSH
74599: LD_VAR 0 2
74603: PUSH
74604: LD_INT 4
74606: MINUS
74607: PUSH
74608: LD_INT 2
74610: PUSH
74611: EMPTY
74612: LIST
74613: LIST
74614: LIST
74615: PUSH
74616: EMPTY
74617: LIST
74618: LIST
74619: LIST
74620: LIST
74621: LIST
74622: ST_TO_ADDR
// end ; 3 :
74623: GO 75045
74625: LD_INT 3
74627: DOUBLE
74628: EQUAL
74629: IFTRUE 74633
74631: GO 74766
74633: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74634: LD_ADDR_VAR 0 5
74638: PUSH
74639: LD_VAR 0 1
74643: PUSH
74644: LD_INT 3
74646: PLUS
74647: PUSH
74648: LD_VAR 0 2
74652: PUSH
74653: LD_INT 4
74655: PUSH
74656: EMPTY
74657: LIST
74658: LIST
74659: LIST
74660: PUSH
74661: LD_VAR 0 1
74665: PUSH
74666: LD_INT 4
74668: PLUS
74669: PUSH
74670: LD_VAR 0 2
74674: PUSH
74675: LD_INT 4
74677: PLUS
74678: PUSH
74679: LD_INT 5
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: LIST
74686: PUSH
74687: LD_VAR 0 1
74691: PUSH
74692: LD_INT 4
74694: MINUS
74695: PUSH
74696: LD_VAR 0 2
74700: PUSH
74701: LD_INT 1
74703: PUSH
74704: EMPTY
74705: LIST
74706: LIST
74707: LIST
74708: PUSH
74709: LD_VAR 0 1
74713: PUSH
74714: LD_VAR 0 2
74718: PUSH
74719: LD_INT 4
74721: MINUS
74722: PUSH
74723: LD_INT 3
74725: PUSH
74726: EMPTY
74727: LIST
74728: LIST
74729: LIST
74730: PUSH
74731: LD_VAR 0 1
74735: PUSH
74736: LD_INT 3
74738: MINUS
74739: PUSH
74740: LD_VAR 0 2
74744: PUSH
74745: LD_INT 3
74747: MINUS
74748: PUSH
74749: LD_INT 2
74751: PUSH
74752: EMPTY
74753: LIST
74754: LIST
74755: LIST
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: LIST
74761: LIST
74762: LIST
74763: ST_TO_ADDR
// end ; 4 :
74764: GO 75045
74766: LD_INT 4
74768: DOUBLE
74769: EQUAL
74770: IFTRUE 74774
74772: GO 74907
74774: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74775: LD_ADDR_VAR 0 5
74779: PUSH
74780: LD_VAR 0 1
74784: PUSH
74785: LD_VAR 0 2
74789: PUSH
74790: LD_INT 4
74792: PLUS
74793: PUSH
74794: LD_INT 0
74796: PUSH
74797: EMPTY
74798: LIST
74799: LIST
74800: LIST
74801: PUSH
74802: LD_VAR 0 1
74806: PUSH
74807: LD_INT 3
74809: PLUS
74810: PUSH
74811: LD_VAR 0 2
74815: PUSH
74816: LD_INT 3
74818: PLUS
74819: PUSH
74820: LD_INT 5
74822: PUSH
74823: EMPTY
74824: LIST
74825: LIST
74826: LIST
74827: PUSH
74828: LD_VAR 0 1
74832: PUSH
74833: LD_INT 4
74835: PLUS
74836: PUSH
74837: LD_VAR 0 2
74841: PUSH
74842: LD_INT 4
74844: PUSH
74845: EMPTY
74846: LIST
74847: LIST
74848: LIST
74849: PUSH
74850: LD_VAR 0 1
74854: PUSH
74855: LD_VAR 0 2
74859: PUSH
74860: LD_INT 3
74862: MINUS
74863: PUSH
74864: LD_INT 3
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: LIST
74871: PUSH
74872: LD_VAR 0 1
74876: PUSH
74877: LD_INT 4
74879: MINUS
74880: PUSH
74881: LD_VAR 0 2
74885: PUSH
74886: LD_INT 4
74888: MINUS
74889: PUSH
74890: LD_INT 2
74892: PUSH
74893: EMPTY
74894: LIST
74895: LIST
74896: LIST
74897: PUSH
74898: EMPTY
74899: LIST
74900: LIST
74901: LIST
74902: LIST
74903: LIST
74904: ST_TO_ADDR
// end ; 5 :
74905: GO 75045
74907: LD_INT 5
74909: DOUBLE
74910: EQUAL
74911: IFTRUE 74915
74913: GO 75044
74915: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74916: LD_ADDR_VAR 0 5
74920: PUSH
74921: LD_VAR 0 1
74925: PUSH
74926: LD_INT 4
74928: MINUS
74929: PUSH
74930: LD_VAR 0 2
74934: PUSH
74935: LD_INT 1
74937: PUSH
74938: EMPTY
74939: LIST
74940: LIST
74941: LIST
74942: PUSH
74943: LD_VAR 0 1
74947: PUSH
74948: LD_VAR 0 2
74952: PUSH
74953: LD_INT 4
74955: MINUS
74956: PUSH
74957: LD_INT 3
74959: PUSH
74960: EMPTY
74961: LIST
74962: LIST
74963: LIST
74964: PUSH
74965: LD_VAR 0 1
74969: PUSH
74970: LD_INT 4
74972: PLUS
74973: PUSH
74974: LD_VAR 0 2
74978: PUSH
74979: LD_INT 4
74981: PLUS
74982: PUSH
74983: LD_INT 5
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: LIST
74990: PUSH
74991: LD_VAR 0 1
74995: PUSH
74996: LD_INT 3
74998: PLUS
74999: PUSH
75000: LD_VAR 0 2
75004: PUSH
75005: LD_INT 4
75007: PUSH
75008: EMPTY
75009: LIST
75010: LIST
75011: LIST
75012: PUSH
75013: LD_VAR 0 1
75017: PUSH
75018: LD_VAR 0 2
75022: PUSH
75023: LD_INT 3
75025: PLUS
75026: PUSH
75027: LD_INT 0
75029: PUSH
75030: EMPTY
75031: LIST
75032: LIST
75033: LIST
75034: PUSH
75035: EMPTY
75036: LIST
75037: LIST
75038: LIST
75039: LIST
75040: LIST
75041: ST_TO_ADDR
// end ; end ;
75042: GO 75045
75044: POP
// result := list ;
75045: LD_ADDR_VAR 0 4
75049: PUSH
75050: LD_VAR 0 5
75054: ST_TO_ADDR
// end ;
75055: LD_VAR 0 4
75059: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75060: LD_INT 0
75062: PPUSH
75063: PPUSH
75064: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75065: LD_VAR 0 1
75069: NOT
75070: PUSH
75071: LD_VAR 0 2
75075: PUSH
75076: LD_INT 1
75078: PUSH
75079: LD_INT 2
75081: PUSH
75082: LD_INT 3
75084: PUSH
75085: LD_INT 4
75087: PUSH
75088: EMPTY
75089: LIST
75090: LIST
75091: LIST
75092: LIST
75093: IN
75094: NOT
75095: OR
75096: IFFALSE 75100
// exit ;
75098: GO 75183
// tmp := [ ] ;
75100: LD_ADDR_VAR 0 5
75104: PUSH
75105: EMPTY
75106: ST_TO_ADDR
// for i in units do
75107: LD_ADDR_VAR 0 4
75111: PUSH
75112: LD_VAR 0 1
75116: PUSH
75117: FOR_IN
75118: IFFALSE 75152
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75120: LD_ADDR_VAR 0 5
75124: PUSH
75125: LD_VAR 0 5
75129: PPUSH
75130: LD_VAR 0 4
75134: PPUSH
75135: LD_VAR 0 2
75139: PPUSH
75140: CALL_OW 259
75144: PPUSH
75145: CALL 76543 0 2
75149: ST_TO_ADDR
75150: GO 75117
75152: POP
75153: POP
// if not tmp then
75154: LD_VAR 0 5
75158: NOT
75159: IFFALSE 75163
// exit ;
75161: GO 75183
// result := SortListByListDesc ( units , tmp ) ;
75163: LD_ADDR_VAR 0 3
75167: PUSH
75168: LD_VAR 0 1
75172: PPUSH
75173: LD_VAR 0 5
75177: PPUSH
75178: CALL_OW 77
75182: ST_TO_ADDR
// end ;
75183: LD_VAR 0 3
75187: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75188: LD_INT 0
75190: PPUSH
75191: PPUSH
75192: PPUSH
// result := false ;
75193: LD_ADDR_VAR 0 3
75197: PUSH
75198: LD_INT 0
75200: ST_TO_ADDR
// if not building then
75201: LD_VAR 0 2
75205: NOT
75206: IFFALSE 75210
// exit ;
75208: GO 75348
// x := GetX ( building ) ;
75210: LD_ADDR_VAR 0 4
75214: PUSH
75215: LD_VAR 0 2
75219: PPUSH
75220: CALL_OW 250
75224: ST_TO_ADDR
// y := GetY ( building ) ;
75225: LD_ADDR_VAR 0 5
75229: PUSH
75230: LD_VAR 0 2
75234: PPUSH
75235: CALL_OW 251
75239: ST_TO_ADDR
// if not x or not y then
75240: LD_VAR 0 4
75244: NOT
75245: PUSH
75246: LD_VAR 0 5
75250: NOT
75251: OR
75252: IFFALSE 75256
// exit ;
75254: GO 75348
// if GetTaskList ( unit ) then
75256: LD_VAR 0 1
75260: PPUSH
75261: CALL_OW 437
75265: IFFALSE 75348
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75267: LD_STRING e
75269: PUSH
75270: LD_VAR 0 1
75274: PPUSH
75275: CALL_OW 437
75279: PUSH
75280: LD_INT 1
75282: ARRAY
75283: PUSH
75284: LD_INT 1
75286: ARRAY
75287: EQUAL
75288: PUSH
75289: LD_VAR 0 4
75293: PUSH
75294: LD_VAR 0 1
75298: PPUSH
75299: CALL_OW 437
75303: PUSH
75304: LD_INT 1
75306: ARRAY
75307: PUSH
75308: LD_INT 2
75310: ARRAY
75311: EQUAL
75312: AND
75313: PUSH
75314: LD_VAR 0 5
75318: PUSH
75319: LD_VAR 0 1
75323: PPUSH
75324: CALL_OW 437
75328: PUSH
75329: LD_INT 1
75331: ARRAY
75332: PUSH
75333: LD_INT 3
75335: ARRAY
75336: EQUAL
75337: AND
75338: IFFALSE 75348
// result := true end ;
75340: LD_ADDR_VAR 0 3
75344: PUSH
75345: LD_INT 1
75347: ST_TO_ADDR
// end ;
75348: LD_VAR 0 3
75352: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75353: LD_INT 0
75355: PPUSH
// result := false ;
75356: LD_ADDR_VAR 0 4
75360: PUSH
75361: LD_INT 0
75363: ST_TO_ADDR
// if GetTaskList ( unit ) then
75364: LD_VAR 0 1
75368: PPUSH
75369: CALL_OW 437
75373: IFFALSE 75456
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75375: LD_STRING M
75377: PUSH
75378: LD_VAR 0 1
75382: PPUSH
75383: CALL_OW 437
75387: PUSH
75388: LD_INT 1
75390: ARRAY
75391: PUSH
75392: LD_INT 1
75394: ARRAY
75395: EQUAL
75396: PUSH
75397: LD_VAR 0 2
75401: PUSH
75402: LD_VAR 0 1
75406: PPUSH
75407: CALL_OW 437
75411: PUSH
75412: LD_INT 1
75414: ARRAY
75415: PUSH
75416: LD_INT 2
75418: ARRAY
75419: EQUAL
75420: AND
75421: PUSH
75422: LD_VAR 0 3
75426: PUSH
75427: LD_VAR 0 1
75431: PPUSH
75432: CALL_OW 437
75436: PUSH
75437: LD_INT 1
75439: ARRAY
75440: PUSH
75441: LD_INT 3
75443: ARRAY
75444: EQUAL
75445: AND
75446: IFFALSE 75456
// result := true ;
75448: LD_ADDR_VAR 0 4
75452: PUSH
75453: LD_INT 1
75455: ST_TO_ADDR
// end ; end ;
75456: LD_VAR 0 4
75460: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75461: LD_INT 0
75463: PPUSH
75464: PPUSH
75465: PPUSH
75466: PPUSH
// if not unit or not area then
75467: LD_VAR 0 1
75471: NOT
75472: PUSH
75473: LD_VAR 0 2
75477: NOT
75478: OR
75479: IFFALSE 75483
// exit ;
75481: GO 75646
// tmp := AreaToList ( area , i ) ;
75483: LD_ADDR_VAR 0 6
75487: PUSH
75488: LD_VAR 0 2
75492: PPUSH
75493: LD_VAR 0 5
75497: PPUSH
75498: CALL_OW 517
75502: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75503: LD_ADDR_VAR 0 5
75507: PUSH
75508: DOUBLE
75509: LD_INT 1
75511: DEC
75512: ST_TO_ADDR
75513: LD_VAR 0 6
75517: PUSH
75518: LD_INT 1
75520: ARRAY
75521: PUSH
75522: FOR_TO
75523: IFFALSE 75644
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75525: LD_ADDR_VAR 0 7
75529: PUSH
75530: LD_VAR 0 6
75534: PUSH
75535: LD_INT 1
75537: ARRAY
75538: PUSH
75539: LD_VAR 0 5
75543: ARRAY
75544: PUSH
75545: LD_VAR 0 6
75549: PUSH
75550: LD_INT 2
75552: ARRAY
75553: PUSH
75554: LD_VAR 0 5
75558: ARRAY
75559: PUSH
75560: EMPTY
75561: LIST
75562: LIST
75563: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
75564: LD_INT 92
75566: PUSH
75567: LD_VAR 0 7
75571: PUSH
75572: LD_INT 1
75574: ARRAY
75575: PUSH
75576: LD_VAR 0 7
75580: PUSH
75581: LD_INT 2
75583: ARRAY
75584: PUSH
75585: LD_INT 3
75587: PUSH
75588: EMPTY
75589: LIST
75590: LIST
75591: LIST
75592: LIST
75593: PPUSH
75594: CALL_OW 69
75598: PUSH
75599: LD_INT 0
75601: EQUAL
75602: IFFALSE 75642
// begin PlaceUnitArea ( unit , area , mode ) ;
75604: LD_VAR 0 1
75608: PPUSH
75609: LD_VAR 0 2
75613: PPUSH
75614: LD_VAR 0 3
75618: PPUSH
75619: CALL_OW 49
// result := IsPlaced ( unit ) ;
75623: LD_ADDR_VAR 0 4
75627: PUSH
75628: LD_VAR 0 1
75632: PPUSH
75633: CALL_OW 305
75637: ST_TO_ADDR
// exit ;
75638: POP
75639: POP
75640: GO 75646
// end ; end ;
75642: GO 75522
75644: POP
75645: POP
// end ;
75646: LD_VAR 0 4
75650: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75651: LD_INT 0
75653: PPUSH
75654: PPUSH
75655: PPUSH
// if not side or side > 8 then
75656: LD_VAR 0 1
75660: NOT
75661: PUSH
75662: LD_VAR 0 1
75666: PUSH
75667: LD_INT 8
75669: GREATER
75670: OR
75671: IFFALSE 75675
// exit ;
75673: GO 75862
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75675: LD_ADDR_VAR 0 4
75679: PUSH
75680: LD_INT 22
75682: PUSH
75683: LD_VAR 0 1
75687: PUSH
75688: EMPTY
75689: LIST
75690: LIST
75691: PUSH
75692: LD_INT 21
75694: PUSH
75695: LD_INT 3
75697: PUSH
75698: EMPTY
75699: LIST
75700: LIST
75701: PUSH
75702: EMPTY
75703: LIST
75704: LIST
75705: PPUSH
75706: CALL_OW 69
75710: ST_TO_ADDR
// if not tmp then
75711: LD_VAR 0 4
75715: NOT
75716: IFFALSE 75720
// exit ;
75718: GO 75862
// enable_addtolog := true ;
75720: LD_ADDR_OWVAR 81
75724: PUSH
75725: LD_INT 1
75727: ST_TO_ADDR
// AddToLog ( [ ) ;
75728: LD_STRING [
75730: PPUSH
75731: CALL_OW 561
// for i in tmp do
75735: LD_ADDR_VAR 0 3
75739: PUSH
75740: LD_VAR 0 4
75744: PUSH
75745: FOR_IN
75746: IFFALSE 75853
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75748: LD_STRING [
75750: PUSH
75751: LD_VAR 0 3
75755: PPUSH
75756: CALL_OW 266
75760: STR
75761: PUSH
75762: LD_STRING , 
75764: STR
75765: PUSH
75766: LD_VAR 0 3
75770: PPUSH
75771: CALL_OW 250
75775: STR
75776: PUSH
75777: LD_STRING , 
75779: STR
75780: PUSH
75781: LD_VAR 0 3
75785: PPUSH
75786: CALL_OW 251
75790: STR
75791: PUSH
75792: LD_STRING , 
75794: STR
75795: PUSH
75796: LD_VAR 0 3
75800: PPUSH
75801: CALL_OW 254
75805: STR
75806: PUSH
75807: LD_STRING , 
75809: STR
75810: PUSH
75811: LD_VAR 0 3
75815: PPUSH
75816: LD_INT 1
75818: PPUSH
75819: CALL_OW 268
75823: STR
75824: PUSH
75825: LD_STRING , 
75827: STR
75828: PUSH
75829: LD_VAR 0 3
75833: PPUSH
75834: LD_INT 2
75836: PPUSH
75837: CALL_OW 268
75841: STR
75842: PUSH
75843: LD_STRING ],
75845: STR
75846: PPUSH
75847: CALL_OW 561
// end ;
75851: GO 75745
75853: POP
75854: POP
// AddToLog ( ]; ) ;
75855: LD_STRING ];
75857: PPUSH
75858: CALL_OW 561
// end ;
75862: LD_VAR 0 2
75866: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75867: LD_INT 0
75869: PPUSH
75870: PPUSH
75871: PPUSH
75872: PPUSH
75873: PPUSH
// if not area or not rate or not max then
75874: LD_VAR 0 1
75878: NOT
75879: PUSH
75880: LD_VAR 0 2
75884: NOT
75885: OR
75886: PUSH
75887: LD_VAR 0 4
75891: NOT
75892: OR
75893: IFFALSE 75897
// exit ;
75895: GO 76086
// while 1 do
75897: LD_INT 1
75899: IFFALSE 76086
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75901: LD_ADDR_VAR 0 9
75905: PUSH
75906: LD_VAR 0 1
75910: PPUSH
75911: LD_INT 1
75913: PPUSH
75914: CALL_OW 287
75918: PUSH
75919: LD_INT 10
75921: MUL
75922: ST_TO_ADDR
// r := rate / 10 ;
75923: LD_ADDR_VAR 0 7
75927: PUSH
75928: LD_VAR 0 2
75932: PUSH
75933: LD_INT 10
75935: DIVREAL
75936: ST_TO_ADDR
// time := 1 1$00 ;
75937: LD_ADDR_VAR 0 8
75941: PUSH
75942: LD_INT 2100
75944: ST_TO_ADDR
// if amount < min then
75945: LD_VAR 0 9
75949: PUSH
75950: LD_VAR 0 3
75954: LESS
75955: IFFALSE 75973
// r := r * 2 else
75957: LD_ADDR_VAR 0 7
75961: PUSH
75962: LD_VAR 0 7
75966: PUSH
75967: LD_INT 2
75969: MUL
75970: ST_TO_ADDR
75971: GO 75999
// if amount > max then
75973: LD_VAR 0 9
75977: PUSH
75978: LD_VAR 0 4
75982: GREATER
75983: IFFALSE 75999
// r := r / 2 ;
75985: LD_ADDR_VAR 0 7
75989: PUSH
75990: LD_VAR 0 7
75994: PUSH
75995: LD_INT 2
75997: DIVREAL
75998: ST_TO_ADDR
// time := time / r ;
75999: LD_ADDR_VAR 0 8
76003: PUSH
76004: LD_VAR 0 8
76008: PUSH
76009: LD_VAR 0 7
76013: DIVREAL
76014: ST_TO_ADDR
// if time < 0 then
76015: LD_VAR 0 8
76019: PUSH
76020: LD_INT 0
76022: LESS
76023: IFFALSE 76040
// time := time * - 1 ;
76025: LD_ADDR_VAR 0 8
76029: PUSH
76030: LD_VAR 0 8
76034: PUSH
76035: LD_INT 1
76037: NEG
76038: MUL
76039: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76040: LD_VAR 0 8
76044: PUSH
76045: LD_INT 35
76047: PPUSH
76048: LD_INT 875
76050: PPUSH
76051: CALL_OW 12
76055: PLUS
76056: PPUSH
76057: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76061: LD_INT 1
76063: PPUSH
76064: LD_INT 5
76066: PPUSH
76067: CALL_OW 12
76071: PPUSH
76072: LD_VAR 0 1
76076: PPUSH
76077: LD_INT 1
76079: PPUSH
76080: CALL_OW 55
// end ;
76084: GO 75897
// end ;
76086: LD_VAR 0 5
76090: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76091: LD_INT 0
76093: PPUSH
76094: PPUSH
76095: PPUSH
76096: PPUSH
76097: PPUSH
76098: PPUSH
76099: PPUSH
76100: PPUSH
// if not turrets or not factories then
76101: LD_VAR 0 1
76105: NOT
76106: PUSH
76107: LD_VAR 0 2
76111: NOT
76112: OR
76113: IFFALSE 76117
// exit ;
76115: GO 76424
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76117: LD_ADDR_VAR 0 10
76121: PUSH
76122: LD_INT 5
76124: PUSH
76125: LD_INT 6
76127: PUSH
76128: EMPTY
76129: LIST
76130: LIST
76131: PUSH
76132: LD_INT 2
76134: PUSH
76135: LD_INT 4
76137: PUSH
76138: EMPTY
76139: LIST
76140: LIST
76141: PUSH
76142: LD_INT 3
76144: PUSH
76145: LD_INT 5
76147: PUSH
76148: EMPTY
76149: LIST
76150: LIST
76151: PUSH
76152: EMPTY
76153: LIST
76154: LIST
76155: LIST
76156: PUSH
76157: LD_INT 24
76159: PUSH
76160: LD_INT 25
76162: PUSH
76163: EMPTY
76164: LIST
76165: LIST
76166: PUSH
76167: LD_INT 23
76169: PUSH
76170: LD_INT 27
76172: PUSH
76173: EMPTY
76174: LIST
76175: LIST
76176: PUSH
76177: EMPTY
76178: LIST
76179: LIST
76180: PUSH
76181: LD_INT 42
76183: PUSH
76184: LD_INT 43
76186: PUSH
76187: EMPTY
76188: LIST
76189: LIST
76190: PUSH
76191: LD_INT 44
76193: PUSH
76194: LD_INT 46
76196: PUSH
76197: EMPTY
76198: LIST
76199: LIST
76200: PUSH
76201: LD_INT 45
76203: PUSH
76204: LD_INT 47
76206: PUSH
76207: EMPTY
76208: LIST
76209: LIST
76210: PUSH
76211: EMPTY
76212: LIST
76213: LIST
76214: LIST
76215: PUSH
76216: EMPTY
76217: LIST
76218: LIST
76219: LIST
76220: ST_TO_ADDR
// result := [ ] ;
76221: LD_ADDR_VAR 0 3
76225: PUSH
76226: EMPTY
76227: ST_TO_ADDR
// for i in turrets do
76228: LD_ADDR_VAR 0 4
76232: PUSH
76233: LD_VAR 0 1
76237: PUSH
76238: FOR_IN
76239: IFFALSE 76422
// begin nat := GetNation ( i ) ;
76241: LD_ADDR_VAR 0 7
76245: PUSH
76246: LD_VAR 0 4
76250: PPUSH
76251: CALL_OW 248
76255: ST_TO_ADDR
// weapon := 0 ;
76256: LD_ADDR_VAR 0 8
76260: PUSH
76261: LD_INT 0
76263: ST_TO_ADDR
// if not nat then
76264: LD_VAR 0 7
76268: NOT
76269: IFFALSE 76273
// continue ;
76271: GO 76238
// for j in list [ nat ] do
76273: LD_ADDR_VAR 0 5
76277: PUSH
76278: LD_VAR 0 10
76282: PUSH
76283: LD_VAR 0 7
76287: ARRAY
76288: PUSH
76289: FOR_IN
76290: IFFALSE 76331
// if GetBWeapon ( i ) = j [ 1 ] then
76292: LD_VAR 0 4
76296: PPUSH
76297: CALL_OW 269
76301: PUSH
76302: LD_VAR 0 5
76306: PUSH
76307: LD_INT 1
76309: ARRAY
76310: EQUAL
76311: IFFALSE 76329
// begin weapon := j [ 2 ] ;
76313: LD_ADDR_VAR 0 8
76317: PUSH
76318: LD_VAR 0 5
76322: PUSH
76323: LD_INT 2
76325: ARRAY
76326: ST_TO_ADDR
// break ;
76327: GO 76331
// end ;
76329: GO 76289
76331: POP
76332: POP
// if not weapon then
76333: LD_VAR 0 8
76337: NOT
76338: IFFALSE 76342
// continue ;
76340: GO 76238
// for k in factories do
76342: LD_ADDR_VAR 0 6
76346: PUSH
76347: LD_VAR 0 2
76351: PUSH
76352: FOR_IN
76353: IFFALSE 76418
// begin weapons := AvailableWeaponList ( k ) ;
76355: LD_ADDR_VAR 0 9
76359: PUSH
76360: LD_VAR 0 6
76364: PPUSH
76365: CALL_OW 478
76369: ST_TO_ADDR
// if not weapons then
76370: LD_VAR 0 9
76374: NOT
76375: IFFALSE 76379
// continue ;
76377: GO 76352
// if weapon in weapons then
76379: LD_VAR 0 8
76383: PUSH
76384: LD_VAR 0 9
76388: IN
76389: IFFALSE 76416
// begin result := [ i , weapon ] ;
76391: LD_ADDR_VAR 0 3
76395: PUSH
76396: LD_VAR 0 4
76400: PUSH
76401: LD_VAR 0 8
76405: PUSH
76406: EMPTY
76407: LIST
76408: LIST
76409: ST_TO_ADDR
// exit ;
76410: POP
76411: POP
76412: POP
76413: POP
76414: GO 76424
// end ; end ;
76416: GO 76352
76418: POP
76419: POP
// end ;
76420: GO 76238
76422: POP
76423: POP
// end ;
76424: LD_VAR 0 3
76428: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76429: LD_INT 0
76431: PPUSH
// if not side or side > 8 then
76432: LD_VAR 0 3
76436: NOT
76437: PUSH
76438: LD_VAR 0 3
76442: PUSH
76443: LD_INT 8
76445: GREATER
76446: OR
76447: IFFALSE 76451
// exit ;
76449: GO 76510
// if not range then
76451: LD_VAR 0 4
76455: NOT
76456: IFFALSE 76467
// range := - 12 ;
76458: LD_ADDR_VAR 0 4
76462: PUSH
76463: LD_INT 12
76465: NEG
76466: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76467: LD_VAR 0 1
76471: PPUSH
76472: LD_VAR 0 2
76476: PPUSH
76477: LD_VAR 0 3
76481: PPUSH
76482: LD_VAR 0 4
76486: PPUSH
76487: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76491: LD_VAR 0 1
76495: PPUSH
76496: LD_VAR 0 2
76500: PPUSH
76501: LD_VAR 0 3
76505: PPUSH
76506: CALL_OW 331
// end ;
76510: LD_VAR 0 5
76514: RET
// export function Video ( mode ) ; begin
76515: LD_INT 0
76517: PPUSH
// ingame_video = mode ;
76518: LD_ADDR_OWVAR 52
76522: PUSH
76523: LD_VAR 0 1
76527: ST_TO_ADDR
// interface_hidden = mode ;
76528: LD_ADDR_OWVAR 54
76532: PUSH
76533: LD_VAR 0 1
76537: ST_TO_ADDR
// end ;
76538: LD_VAR 0 2
76542: RET
// export function Join ( array , element ) ; begin
76543: LD_INT 0
76545: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76546: LD_ADDR_VAR 0 3
76550: PUSH
76551: LD_VAR 0 1
76555: PPUSH
76556: LD_VAR 0 1
76560: PUSH
76561: LD_INT 1
76563: PLUS
76564: PPUSH
76565: LD_VAR 0 2
76569: PPUSH
76570: CALL_OW 1
76574: ST_TO_ADDR
// end ;
76575: LD_VAR 0 3
76579: RET
// export function JoinUnion ( array , element ) ; begin
76580: LD_INT 0
76582: PPUSH
// result := array union element ;
76583: LD_ADDR_VAR 0 3
76587: PUSH
76588: LD_VAR 0 1
76592: PUSH
76593: LD_VAR 0 2
76597: UNION
76598: ST_TO_ADDR
// end ;
76599: LD_VAR 0 3
76603: RET
// export function GetBehemoths ( side ) ; begin
76604: LD_INT 0
76606: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76607: LD_ADDR_VAR 0 2
76611: PUSH
76612: LD_INT 22
76614: PUSH
76615: LD_VAR 0 1
76619: PUSH
76620: EMPTY
76621: LIST
76622: LIST
76623: PUSH
76624: LD_INT 31
76626: PUSH
76627: LD_INT 25
76629: PUSH
76630: EMPTY
76631: LIST
76632: LIST
76633: PUSH
76634: EMPTY
76635: LIST
76636: LIST
76637: PPUSH
76638: CALL_OW 69
76642: ST_TO_ADDR
// end ;
76643: LD_VAR 0 2
76647: RET
// export function Shuffle ( array ) ; var i , index ; begin
76648: LD_INT 0
76650: PPUSH
76651: PPUSH
76652: PPUSH
// result := [ ] ;
76653: LD_ADDR_VAR 0 2
76657: PUSH
76658: EMPTY
76659: ST_TO_ADDR
// if not array then
76660: LD_VAR 0 1
76664: NOT
76665: IFFALSE 76669
// exit ;
76667: GO 76768
// Randomize ;
76669: CALL_OW 10
// for i = array downto 1 do
76673: LD_ADDR_VAR 0 3
76677: PUSH
76678: DOUBLE
76679: LD_VAR 0 1
76683: INC
76684: ST_TO_ADDR
76685: LD_INT 1
76687: PUSH
76688: FOR_DOWNTO
76689: IFFALSE 76766
// begin index := rand ( 1 , array ) ;
76691: LD_ADDR_VAR 0 4
76695: PUSH
76696: LD_INT 1
76698: PPUSH
76699: LD_VAR 0 1
76703: PPUSH
76704: CALL_OW 12
76708: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76709: LD_ADDR_VAR 0 2
76713: PUSH
76714: LD_VAR 0 2
76718: PPUSH
76719: LD_VAR 0 2
76723: PUSH
76724: LD_INT 1
76726: PLUS
76727: PPUSH
76728: LD_VAR 0 1
76732: PUSH
76733: LD_VAR 0 4
76737: ARRAY
76738: PPUSH
76739: CALL_OW 2
76743: ST_TO_ADDR
// array := Delete ( array , index ) ;
76744: LD_ADDR_VAR 0 1
76748: PUSH
76749: LD_VAR 0 1
76753: PPUSH
76754: LD_VAR 0 4
76758: PPUSH
76759: CALL_OW 3
76763: ST_TO_ADDR
// end ;
76764: GO 76688
76766: POP
76767: POP
// end ;
76768: LD_VAR 0 2
76772: RET
// export function GetBaseMaterials ( base ) ; begin
76773: LD_INT 0
76775: PPUSH
// result := [ 0 , 0 , 0 ] ;
76776: LD_ADDR_VAR 0 2
76780: PUSH
76781: LD_INT 0
76783: PUSH
76784: LD_INT 0
76786: PUSH
76787: LD_INT 0
76789: PUSH
76790: EMPTY
76791: LIST
76792: LIST
76793: LIST
76794: ST_TO_ADDR
// if not base then
76795: LD_VAR 0 1
76799: NOT
76800: IFFALSE 76804
// exit ;
76802: GO 76853
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76804: LD_ADDR_VAR 0 2
76808: PUSH
76809: LD_VAR 0 1
76813: PPUSH
76814: LD_INT 1
76816: PPUSH
76817: CALL_OW 275
76821: PUSH
76822: LD_VAR 0 1
76826: PPUSH
76827: LD_INT 2
76829: PPUSH
76830: CALL_OW 275
76834: PUSH
76835: LD_VAR 0 1
76839: PPUSH
76840: LD_INT 3
76842: PPUSH
76843: CALL_OW 275
76847: PUSH
76848: EMPTY
76849: LIST
76850: LIST
76851: LIST
76852: ST_TO_ADDR
// end ;
76853: LD_VAR 0 2
76857: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76858: LD_INT 0
76860: PPUSH
76861: PPUSH
// result := array ;
76862: LD_ADDR_VAR 0 3
76866: PUSH
76867: LD_VAR 0 1
76871: ST_TO_ADDR
// if size >= result then
76872: LD_VAR 0 2
76876: PUSH
76877: LD_VAR 0 3
76881: GREATEREQUAL
76882: IFFALSE 76886
// exit ;
76884: GO 76936
// if size then
76886: LD_VAR 0 2
76890: IFFALSE 76936
// for i := array downto size do
76892: LD_ADDR_VAR 0 4
76896: PUSH
76897: DOUBLE
76898: LD_VAR 0 1
76902: INC
76903: ST_TO_ADDR
76904: LD_VAR 0 2
76908: PUSH
76909: FOR_DOWNTO
76910: IFFALSE 76934
// result := Delete ( result , result ) ;
76912: LD_ADDR_VAR 0 3
76916: PUSH
76917: LD_VAR 0 3
76921: PPUSH
76922: LD_VAR 0 3
76926: PPUSH
76927: CALL_OW 3
76931: ST_TO_ADDR
76932: GO 76909
76934: POP
76935: POP
// end ;
76936: LD_VAR 0 3
76940: RET
// export function ComExit ( unit ) ; var tmp ; begin
76941: LD_INT 0
76943: PPUSH
76944: PPUSH
// if not IsInUnit ( unit ) then
76945: LD_VAR 0 1
76949: PPUSH
76950: CALL_OW 310
76954: NOT
76955: IFFALSE 76959
// exit ;
76957: GO 77019
// tmp := IsInUnit ( unit ) ;
76959: LD_ADDR_VAR 0 3
76963: PUSH
76964: LD_VAR 0 1
76968: PPUSH
76969: CALL_OW 310
76973: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76974: LD_VAR 0 3
76978: PPUSH
76979: CALL_OW 247
76983: PUSH
76984: LD_INT 2
76986: EQUAL
76987: IFFALSE 77000
// ComExitVehicle ( unit ) else
76989: LD_VAR 0 1
76993: PPUSH
76994: CALL_OW 121
76998: GO 77009
// ComExitBuilding ( unit ) ;
77000: LD_VAR 0 1
77004: PPUSH
77005: CALL_OW 122
// result := tmp ;
77009: LD_ADDR_VAR 0 2
77013: PUSH
77014: LD_VAR 0 3
77018: ST_TO_ADDR
// end ;
77019: LD_VAR 0 2
77023: RET
// export function ComExitAll ( units ) ; var i ; begin
77024: LD_INT 0
77026: PPUSH
77027: PPUSH
// if not units then
77028: LD_VAR 0 1
77032: NOT
77033: IFFALSE 77037
// exit ;
77035: GO 77063
// for i in units do
77037: LD_ADDR_VAR 0 3
77041: PUSH
77042: LD_VAR 0 1
77046: PUSH
77047: FOR_IN
77048: IFFALSE 77061
// ComExit ( i ) ;
77050: LD_VAR 0 3
77054: PPUSH
77055: CALL 76941 0 1
77059: GO 77047
77061: POP
77062: POP
// end ;
77063: LD_VAR 0 2
77067: RET
// export function ResetHc ; begin
77068: LD_INT 0
77070: PPUSH
// InitHc ;
77071: CALL_OW 19
// hc_importance := 0 ;
77075: LD_ADDR_OWVAR 32
77079: PUSH
77080: LD_INT 0
77082: ST_TO_ADDR
// end ;
77083: LD_VAR 0 1
77087: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77088: LD_INT 0
77090: PPUSH
77091: PPUSH
77092: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77093: LD_ADDR_VAR 0 6
77097: PUSH
77098: LD_VAR 0 1
77102: PUSH
77103: LD_VAR 0 3
77107: PLUS
77108: PUSH
77109: LD_INT 2
77111: DIV
77112: ST_TO_ADDR
// if _x < 0 then
77113: LD_VAR 0 6
77117: PUSH
77118: LD_INT 0
77120: LESS
77121: IFFALSE 77138
// _x := _x * - 1 ;
77123: LD_ADDR_VAR 0 6
77127: PUSH
77128: LD_VAR 0 6
77132: PUSH
77133: LD_INT 1
77135: NEG
77136: MUL
77137: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77138: LD_ADDR_VAR 0 7
77142: PUSH
77143: LD_VAR 0 2
77147: PUSH
77148: LD_VAR 0 4
77152: PLUS
77153: PUSH
77154: LD_INT 2
77156: DIV
77157: ST_TO_ADDR
// if _y < 0 then
77158: LD_VAR 0 7
77162: PUSH
77163: LD_INT 0
77165: LESS
77166: IFFALSE 77183
// _y := _y * - 1 ;
77168: LD_ADDR_VAR 0 7
77172: PUSH
77173: LD_VAR 0 7
77177: PUSH
77178: LD_INT 1
77180: NEG
77181: MUL
77182: ST_TO_ADDR
// result := [ _x , _y ] ;
77183: LD_ADDR_VAR 0 5
77187: PUSH
77188: LD_VAR 0 6
77192: PUSH
77193: LD_VAR 0 7
77197: PUSH
77198: EMPTY
77199: LIST
77200: LIST
77201: ST_TO_ADDR
// end ;
77202: LD_VAR 0 5
77206: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77207: LD_INT 0
77209: PPUSH
77210: PPUSH
77211: PPUSH
77212: PPUSH
// task := GetTaskList ( unit ) ;
77213: LD_ADDR_VAR 0 7
77217: PUSH
77218: LD_VAR 0 1
77222: PPUSH
77223: CALL_OW 437
77227: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77228: LD_VAR 0 7
77232: NOT
77233: PUSH
77234: LD_VAR 0 1
77238: PPUSH
77239: LD_VAR 0 2
77243: PPUSH
77244: CALL_OW 308
77248: NOT
77249: AND
77250: IFFALSE 77254
// exit ;
77252: GO 77372
// if IsInArea ( unit , area ) then
77254: LD_VAR 0 1
77258: PPUSH
77259: LD_VAR 0 2
77263: PPUSH
77264: CALL_OW 308
77268: IFFALSE 77286
// begin ComMoveToArea ( unit , goAway ) ;
77270: LD_VAR 0 1
77274: PPUSH
77275: LD_VAR 0 3
77279: PPUSH
77280: CALL_OW 113
// exit ;
77284: GO 77372
// end ; if task [ 1 ] [ 1 ] <> M then
77286: LD_VAR 0 7
77290: PUSH
77291: LD_INT 1
77293: ARRAY
77294: PUSH
77295: LD_INT 1
77297: ARRAY
77298: PUSH
77299: LD_STRING M
77301: NONEQUAL
77302: IFFALSE 77306
// exit ;
77304: GO 77372
// x := task [ 1 ] [ 2 ] ;
77306: LD_ADDR_VAR 0 5
77310: PUSH
77311: LD_VAR 0 7
77315: PUSH
77316: LD_INT 1
77318: ARRAY
77319: PUSH
77320: LD_INT 2
77322: ARRAY
77323: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77324: LD_ADDR_VAR 0 6
77328: PUSH
77329: LD_VAR 0 7
77333: PUSH
77334: LD_INT 1
77336: ARRAY
77337: PUSH
77338: LD_INT 3
77340: ARRAY
77341: ST_TO_ADDR
// if InArea ( x , y , area ) then
77342: LD_VAR 0 5
77346: PPUSH
77347: LD_VAR 0 6
77351: PPUSH
77352: LD_VAR 0 2
77356: PPUSH
77357: CALL_OW 309
77361: IFFALSE 77372
// ComStop ( unit ) ;
77363: LD_VAR 0 1
77367: PPUSH
77368: CALL_OW 141
// end ;
77372: LD_VAR 0 4
77376: RET
// export function Abs ( value ) ; begin
77377: LD_INT 0
77379: PPUSH
// result := value ;
77380: LD_ADDR_VAR 0 2
77384: PUSH
77385: LD_VAR 0 1
77389: ST_TO_ADDR
// if value < 0 then
77390: LD_VAR 0 1
77394: PUSH
77395: LD_INT 0
77397: LESS
77398: IFFALSE 77415
// result := value * - 1 ;
77400: LD_ADDR_VAR 0 2
77404: PUSH
77405: LD_VAR 0 1
77409: PUSH
77410: LD_INT 1
77412: NEG
77413: MUL
77414: ST_TO_ADDR
// end ;
77415: LD_VAR 0 2
77419: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77420: LD_INT 0
77422: PPUSH
77423: PPUSH
77424: PPUSH
77425: PPUSH
77426: PPUSH
77427: PPUSH
77428: PPUSH
77429: PPUSH
// if not unit or not building then
77430: LD_VAR 0 1
77434: NOT
77435: PUSH
77436: LD_VAR 0 2
77440: NOT
77441: OR
77442: IFFALSE 77446
// exit ;
77444: GO 77672
// x := GetX ( building ) ;
77446: LD_ADDR_VAR 0 4
77450: PUSH
77451: LD_VAR 0 2
77455: PPUSH
77456: CALL_OW 250
77460: ST_TO_ADDR
// y := GetY ( building ) ;
77461: LD_ADDR_VAR 0 6
77465: PUSH
77466: LD_VAR 0 2
77470: PPUSH
77471: CALL_OW 251
77475: ST_TO_ADDR
// d := GetDir ( building ) ;
77476: LD_ADDR_VAR 0 8
77480: PUSH
77481: LD_VAR 0 2
77485: PPUSH
77486: CALL_OW 254
77490: ST_TO_ADDR
// r := 4 ;
77491: LD_ADDR_VAR 0 9
77495: PUSH
77496: LD_INT 4
77498: ST_TO_ADDR
// for i := 1 to 5 do
77499: LD_ADDR_VAR 0 10
77503: PUSH
77504: DOUBLE
77505: LD_INT 1
77507: DEC
77508: ST_TO_ADDR
77509: LD_INT 5
77511: PUSH
77512: FOR_TO
77513: IFFALSE 77670
// begin _x := ShiftX ( x , d , r + i ) ;
77515: LD_ADDR_VAR 0 5
77519: PUSH
77520: LD_VAR 0 4
77524: PPUSH
77525: LD_VAR 0 8
77529: PPUSH
77530: LD_VAR 0 9
77534: PUSH
77535: LD_VAR 0 10
77539: PLUS
77540: PPUSH
77541: CALL_OW 272
77545: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77546: LD_ADDR_VAR 0 7
77550: PUSH
77551: LD_VAR 0 6
77555: PPUSH
77556: LD_VAR 0 8
77560: PPUSH
77561: LD_VAR 0 9
77565: PUSH
77566: LD_VAR 0 10
77570: PLUS
77571: PPUSH
77572: CALL_OW 273
77576: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77577: LD_VAR 0 5
77581: PPUSH
77582: LD_VAR 0 7
77586: PPUSH
77587: CALL_OW 488
77591: PUSH
77592: LD_VAR 0 5
77596: PPUSH
77597: LD_VAR 0 7
77601: PPUSH
77602: CALL_OW 428
77606: PPUSH
77607: CALL_OW 247
77611: PUSH
77612: LD_INT 3
77614: PUSH
77615: LD_INT 2
77617: PUSH
77618: EMPTY
77619: LIST
77620: LIST
77621: IN
77622: NOT
77623: AND
77624: IFFALSE 77668
// begin ComMoveXY ( unit , _x , _y ) ;
77626: LD_VAR 0 1
77630: PPUSH
77631: LD_VAR 0 5
77635: PPUSH
77636: LD_VAR 0 7
77640: PPUSH
77641: CALL_OW 111
// result := [ _x , _y ] ;
77645: LD_ADDR_VAR 0 3
77649: PUSH
77650: LD_VAR 0 5
77654: PUSH
77655: LD_VAR 0 7
77659: PUSH
77660: EMPTY
77661: LIST
77662: LIST
77663: ST_TO_ADDR
// exit ;
77664: POP
77665: POP
77666: GO 77672
// end ; end ;
77668: GO 77512
77670: POP
77671: POP
// end ;
77672: LD_VAR 0 3
77676: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77677: LD_INT 0
77679: PPUSH
77680: PPUSH
77681: PPUSH
// result := 0 ;
77682: LD_ADDR_VAR 0 3
77686: PUSH
77687: LD_INT 0
77689: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77690: LD_VAR 0 1
77694: PUSH
77695: LD_INT 0
77697: LESS
77698: PUSH
77699: LD_VAR 0 1
77703: PUSH
77704: LD_INT 8
77706: GREATER
77707: OR
77708: PUSH
77709: LD_VAR 0 2
77713: PUSH
77714: LD_INT 0
77716: LESS
77717: OR
77718: PUSH
77719: LD_VAR 0 2
77723: PUSH
77724: LD_INT 8
77726: GREATER
77727: OR
77728: IFFALSE 77732
// exit ;
77730: GO 77807
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77732: LD_ADDR_VAR 0 4
77736: PUSH
77737: LD_INT 22
77739: PUSH
77740: LD_VAR 0 2
77744: PUSH
77745: EMPTY
77746: LIST
77747: LIST
77748: PPUSH
77749: CALL_OW 69
77753: PUSH
77754: FOR_IN
77755: IFFALSE 77805
// begin un := UnitShoot ( i ) ;
77757: LD_ADDR_VAR 0 5
77761: PUSH
77762: LD_VAR 0 4
77766: PPUSH
77767: CALL_OW 504
77771: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77772: LD_VAR 0 5
77776: PPUSH
77777: CALL_OW 255
77781: PUSH
77782: LD_VAR 0 1
77786: EQUAL
77787: IFFALSE 77803
// begin result := un ;
77789: LD_ADDR_VAR 0 3
77793: PUSH
77794: LD_VAR 0 5
77798: ST_TO_ADDR
// exit ;
77799: POP
77800: POP
77801: GO 77807
// end ; end ;
77803: GO 77754
77805: POP
77806: POP
// end ;
77807: LD_VAR 0 3
77811: RET
// export function GetCargoBay ( units ) ; begin
77812: LD_INT 0
77814: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77815: LD_ADDR_VAR 0 2
77819: PUSH
77820: LD_VAR 0 1
77824: PPUSH
77825: LD_INT 2
77827: PUSH
77828: LD_INT 34
77830: PUSH
77831: LD_INT 12
77833: PUSH
77834: EMPTY
77835: LIST
77836: LIST
77837: PUSH
77838: LD_INT 34
77840: PUSH
77841: LD_INT 51
77843: PUSH
77844: EMPTY
77845: LIST
77846: LIST
77847: PUSH
77848: LD_INT 34
77850: PUSH
77851: LD_INT 32
77853: PUSH
77854: EMPTY
77855: LIST
77856: LIST
77857: PUSH
77858: LD_INT 34
77860: PUSH
77861: LD_INT 89
77863: PUSH
77864: EMPTY
77865: LIST
77866: LIST
77867: PUSH
77868: EMPTY
77869: LIST
77870: LIST
77871: LIST
77872: LIST
77873: LIST
77874: PPUSH
77875: CALL_OW 72
77879: ST_TO_ADDR
// end ;
77880: LD_VAR 0 2
77884: RET
// export function Negate ( value ) ; begin
77885: LD_INT 0
77887: PPUSH
// result := not value ;
77888: LD_ADDR_VAR 0 2
77892: PUSH
77893: LD_VAR 0 1
77897: NOT
77898: ST_TO_ADDR
// end ;
77899: LD_VAR 0 2
77903: RET
// export function Inc ( value ) ; begin
77904: LD_INT 0
77906: PPUSH
// result := value + 1 ;
77907: LD_ADDR_VAR 0 2
77911: PUSH
77912: LD_VAR 0 1
77916: PUSH
77917: LD_INT 1
77919: PLUS
77920: ST_TO_ADDR
// end ;
77921: LD_VAR 0 2
77925: RET
// export function Dec ( value ) ; begin
77926: LD_INT 0
77928: PPUSH
// result := value - 1 ;
77929: LD_ADDR_VAR 0 2
77933: PUSH
77934: LD_VAR 0 1
77938: PUSH
77939: LD_INT 1
77941: MINUS
77942: ST_TO_ADDR
// end ;
77943: LD_VAR 0 2
77947: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77948: LD_INT 0
77950: PPUSH
77951: PPUSH
77952: PPUSH
77953: PPUSH
77954: PPUSH
77955: PPUSH
77956: PPUSH
77957: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77958: LD_VAR 0 1
77962: PPUSH
77963: LD_VAR 0 2
77967: PPUSH
77968: CALL_OW 488
77972: NOT
77973: PUSH
77974: LD_VAR 0 3
77978: PPUSH
77979: LD_VAR 0 4
77983: PPUSH
77984: CALL_OW 488
77988: NOT
77989: OR
77990: IFFALSE 78003
// begin result := - 1 ;
77992: LD_ADDR_VAR 0 5
77996: PUSH
77997: LD_INT 1
77999: NEG
78000: ST_TO_ADDR
// exit ;
78001: GO 78238
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78003: LD_ADDR_VAR 0 12
78007: PUSH
78008: LD_VAR 0 1
78012: PPUSH
78013: LD_VAR 0 2
78017: PPUSH
78018: LD_VAR 0 3
78022: PPUSH
78023: LD_VAR 0 4
78027: PPUSH
78028: CALL 77088 0 4
78032: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78033: LD_ADDR_VAR 0 11
78037: PUSH
78038: LD_VAR 0 1
78042: PPUSH
78043: LD_VAR 0 2
78047: PPUSH
78048: LD_VAR 0 12
78052: PUSH
78053: LD_INT 1
78055: ARRAY
78056: PPUSH
78057: LD_VAR 0 12
78061: PUSH
78062: LD_INT 2
78064: ARRAY
78065: PPUSH
78066: CALL_OW 298
78070: ST_TO_ADDR
// distance := 9999 ;
78071: LD_ADDR_VAR 0 10
78075: PUSH
78076: LD_INT 9999
78078: ST_TO_ADDR
// for i := 0 to 5 do
78079: LD_ADDR_VAR 0 6
78083: PUSH
78084: DOUBLE
78085: LD_INT 0
78087: DEC
78088: ST_TO_ADDR
78089: LD_INT 5
78091: PUSH
78092: FOR_TO
78093: IFFALSE 78236
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78095: LD_ADDR_VAR 0 7
78099: PUSH
78100: LD_VAR 0 1
78104: PPUSH
78105: LD_VAR 0 6
78109: PPUSH
78110: LD_VAR 0 11
78114: PPUSH
78115: CALL_OW 272
78119: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78120: LD_ADDR_VAR 0 8
78124: PUSH
78125: LD_VAR 0 2
78129: PPUSH
78130: LD_VAR 0 6
78134: PPUSH
78135: LD_VAR 0 11
78139: PPUSH
78140: CALL_OW 273
78144: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78145: LD_VAR 0 7
78149: PPUSH
78150: LD_VAR 0 8
78154: PPUSH
78155: CALL_OW 488
78159: NOT
78160: IFFALSE 78164
// continue ;
78162: GO 78092
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78164: LD_ADDR_VAR 0 9
78168: PUSH
78169: LD_VAR 0 12
78173: PUSH
78174: LD_INT 1
78176: ARRAY
78177: PPUSH
78178: LD_VAR 0 12
78182: PUSH
78183: LD_INT 2
78185: ARRAY
78186: PPUSH
78187: LD_VAR 0 7
78191: PPUSH
78192: LD_VAR 0 8
78196: PPUSH
78197: CALL_OW 298
78201: ST_TO_ADDR
// if tmp < distance then
78202: LD_VAR 0 9
78206: PUSH
78207: LD_VAR 0 10
78211: LESS
78212: IFFALSE 78234
// begin result := i ;
78214: LD_ADDR_VAR 0 5
78218: PUSH
78219: LD_VAR 0 6
78223: ST_TO_ADDR
// distance := tmp ;
78224: LD_ADDR_VAR 0 10
78228: PUSH
78229: LD_VAR 0 9
78233: ST_TO_ADDR
// end ; end ;
78234: GO 78092
78236: POP
78237: POP
// end ;
78238: LD_VAR 0 5
78242: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78243: LD_INT 0
78245: PPUSH
78246: PPUSH
// if not driver or not IsInUnit ( driver ) then
78247: LD_VAR 0 1
78251: NOT
78252: PUSH
78253: LD_VAR 0 1
78257: PPUSH
78258: CALL_OW 310
78262: NOT
78263: OR
78264: IFFALSE 78268
// exit ;
78266: GO 78358
// vehicle := IsInUnit ( driver ) ;
78268: LD_ADDR_VAR 0 3
78272: PUSH
78273: LD_VAR 0 1
78277: PPUSH
78278: CALL_OW 310
78282: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78283: LD_VAR 0 1
78287: PPUSH
78288: LD_STRING \
78290: PUSH
78291: LD_INT 0
78293: PUSH
78294: LD_INT 0
78296: PUSH
78297: LD_INT 0
78299: PUSH
78300: LD_INT 0
78302: PUSH
78303: LD_INT 0
78305: PUSH
78306: LD_INT 0
78308: PUSH
78309: EMPTY
78310: LIST
78311: LIST
78312: LIST
78313: LIST
78314: LIST
78315: LIST
78316: LIST
78317: PUSH
78318: LD_STRING E
78320: PUSH
78321: LD_INT 0
78323: PUSH
78324: LD_INT 0
78326: PUSH
78327: LD_VAR 0 3
78331: PUSH
78332: LD_INT 0
78334: PUSH
78335: LD_INT 0
78337: PUSH
78338: LD_INT 0
78340: PUSH
78341: EMPTY
78342: LIST
78343: LIST
78344: LIST
78345: LIST
78346: LIST
78347: LIST
78348: LIST
78349: PUSH
78350: EMPTY
78351: LIST
78352: LIST
78353: PPUSH
78354: CALL_OW 446
// end ;
78358: LD_VAR 0 2
78362: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78363: LD_INT 0
78365: PPUSH
78366: PPUSH
// if not driver or not IsInUnit ( driver ) then
78367: LD_VAR 0 1
78371: NOT
78372: PUSH
78373: LD_VAR 0 1
78377: PPUSH
78378: CALL_OW 310
78382: NOT
78383: OR
78384: IFFALSE 78388
// exit ;
78386: GO 78478
// vehicle := IsInUnit ( driver ) ;
78388: LD_ADDR_VAR 0 3
78392: PUSH
78393: LD_VAR 0 1
78397: PPUSH
78398: CALL_OW 310
78402: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78403: LD_VAR 0 1
78407: PPUSH
78408: LD_STRING \
78410: PUSH
78411: LD_INT 0
78413: PUSH
78414: LD_INT 0
78416: PUSH
78417: LD_INT 0
78419: PUSH
78420: LD_INT 0
78422: PUSH
78423: LD_INT 0
78425: PUSH
78426: LD_INT 0
78428: PUSH
78429: EMPTY
78430: LIST
78431: LIST
78432: LIST
78433: LIST
78434: LIST
78435: LIST
78436: LIST
78437: PUSH
78438: LD_STRING E
78440: PUSH
78441: LD_INT 0
78443: PUSH
78444: LD_INT 0
78446: PUSH
78447: LD_VAR 0 3
78451: PUSH
78452: LD_INT 0
78454: PUSH
78455: LD_INT 0
78457: PUSH
78458: LD_INT 0
78460: PUSH
78461: EMPTY
78462: LIST
78463: LIST
78464: LIST
78465: LIST
78466: LIST
78467: LIST
78468: LIST
78469: PUSH
78470: EMPTY
78471: LIST
78472: LIST
78473: PPUSH
78474: CALL_OW 447
// end ;
78478: LD_VAR 0 2
78482: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78483: LD_INT 0
78485: PPUSH
78486: PPUSH
78487: PPUSH
// tmp := [ ] ;
78488: LD_ADDR_VAR 0 5
78492: PUSH
78493: EMPTY
78494: ST_TO_ADDR
// for i in units do
78495: LD_ADDR_VAR 0 4
78499: PUSH
78500: LD_VAR 0 1
78504: PUSH
78505: FOR_IN
78506: IFFALSE 78544
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78508: LD_ADDR_VAR 0 5
78512: PUSH
78513: LD_VAR 0 5
78517: PPUSH
78518: LD_VAR 0 5
78522: PUSH
78523: LD_INT 1
78525: PLUS
78526: PPUSH
78527: LD_VAR 0 4
78531: PPUSH
78532: CALL_OW 256
78536: PPUSH
78537: CALL_OW 2
78541: ST_TO_ADDR
78542: GO 78505
78544: POP
78545: POP
// if not tmp then
78546: LD_VAR 0 5
78550: NOT
78551: IFFALSE 78555
// exit ;
78553: GO 78603
// if asc then
78555: LD_VAR 0 2
78559: IFFALSE 78583
// result := SortListByListAsc ( units , tmp ) else
78561: LD_ADDR_VAR 0 3
78565: PUSH
78566: LD_VAR 0 1
78570: PPUSH
78571: LD_VAR 0 5
78575: PPUSH
78576: CALL_OW 76
78580: ST_TO_ADDR
78581: GO 78603
// result := SortListByListDesc ( units , tmp ) ;
78583: LD_ADDR_VAR 0 3
78587: PUSH
78588: LD_VAR 0 1
78592: PPUSH
78593: LD_VAR 0 5
78597: PPUSH
78598: CALL_OW 77
78602: ST_TO_ADDR
// end ;
78603: LD_VAR 0 3
78607: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78608: LD_INT 0
78610: PPUSH
78611: PPUSH
// task := GetTaskList ( mech ) ;
78612: LD_ADDR_VAR 0 4
78616: PUSH
78617: LD_VAR 0 1
78621: PPUSH
78622: CALL_OW 437
78626: ST_TO_ADDR
// if not task then
78627: LD_VAR 0 4
78631: NOT
78632: IFFALSE 78636
// exit ;
78634: GO 78678
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78636: LD_ADDR_VAR 0 3
78640: PUSH
78641: LD_VAR 0 4
78645: PUSH
78646: LD_INT 1
78648: ARRAY
78649: PUSH
78650: LD_INT 1
78652: ARRAY
78653: PUSH
78654: LD_STRING r
78656: EQUAL
78657: PUSH
78658: LD_VAR 0 4
78662: PUSH
78663: LD_INT 1
78665: ARRAY
78666: PUSH
78667: LD_INT 4
78669: ARRAY
78670: PUSH
78671: LD_VAR 0 2
78675: EQUAL
78676: AND
78677: ST_TO_ADDR
// end ;
78678: LD_VAR 0 3
78682: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78683: LD_INT 0
78685: PPUSH
// SetDir ( unit , d ) ;
78686: LD_VAR 0 1
78690: PPUSH
78691: LD_VAR 0 4
78695: PPUSH
78696: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78700: LD_VAR 0 1
78704: PPUSH
78705: LD_VAR 0 2
78709: PPUSH
78710: LD_VAR 0 3
78714: PPUSH
78715: LD_VAR 0 5
78719: PPUSH
78720: CALL_OW 48
// end ;
78724: LD_VAR 0 6
78728: RET
// export function ToNaturalNumber ( number ) ; begin
78729: LD_INT 0
78731: PPUSH
// result := number div 1 ;
78732: LD_ADDR_VAR 0 2
78736: PUSH
78737: LD_VAR 0 1
78741: PUSH
78742: LD_INT 1
78744: DIV
78745: ST_TO_ADDR
// if number < 0 then
78746: LD_VAR 0 1
78750: PUSH
78751: LD_INT 0
78753: LESS
78754: IFFALSE 78764
// result := 0 ;
78756: LD_ADDR_VAR 0 2
78760: PUSH
78761: LD_INT 0
78763: ST_TO_ADDR
// end ;
78764: LD_VAR 0 2
78768: RET
// export function SortByClass ( units , class ) ; var un ; begin
78769: LD_INT 0
78771: PPUSH
78772: PPUSH
// if not units or not class then
78773: LD_VAR 0 1
78777: NOT
78778: PUSH
78779: LD_VAR 0 2
78783: NOT
78784: OR
78785: IFFALSE 78789
// exit ;
78787: GO 78884
// result := [ ] ;
78789: LD_ADDR_VAR 0 3
78793: PUSH
78794: EMPTY
78795: ST_TO_ADDR
// for un in units do
78796: LD_ADDR_VAR 0 4
78800: PUSH
78801: LD_VAR 0 1
78805: PUSH
78806: FOR_IN
78807: IFFALSE 78882
// if GetClass ( un ) = class then
78809: LD_VAR 0 4
78813: PPUSH
78814: CALL_OW 257
78818: PUSH
78819: LD_VAR 0 2
78823: EQUAL
78824: IFFALSE 78851
// result := Insert ( result , 1 , un ) else
78826: LD_ADDR_VAR 0 3
78830: PUSH
78831: LD_VAR 0 3
78835: PPUSH
78836: LD_INT 1
78838: PPUSH
78839: LD_VAR 0 4
78843: PPUSH
78844: CALL_OW 2
78848: ST_TO_ADDR
78849: GO 78880
// result := Replace ( result , result + 1 , un ) ;
78851: LD_ADDR_VAR 0 3
78855: PUSH
78856: LD_VAR 0 3
78860: PPUSH
78861: LD_VAR 0 3
78865: PUSH
78866: LD_INT 1
78868: PLUS
78869: PPUSH
78870: LD_VAR 0 4
78874: PPUSH
78875: CALL_OW 1
78879: ST_TO_ADDR
78880: GO 78806
78882: POP
78883: POP
// end ;
78884: LD_VAR 0 3
78888: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78889: LD_INT 0
78891: PPUSH
78892: PPUSH
78893: PPUSH
78894: PPUSH
78895: PPUSH
78896: PPUSH
78897: PPUSH
// result := [ ] ;
78898: LD_ADDR_VAR 0 4
78902: PUSH
78903: EMPTY
78904: ST_TO_ADDR
// if x - r < 0 then
78905: LD_VAR 0 1
78909: PUSH
78910: LD_VAR 0 3
78914: MINUS
78915: PUSH
78916: LD_INT 0
78918: LESS
78919: IFFALSE 78931
// min_x := 0 else
78921: LD_ADDR_VAR 0 8
78925: PUSH
78926: LD_INT 0
78928: ST_TO_ADDR
78929: GO 78947
// min_x := x - r ;
78931: LD_ADDR_VAR 0 8
78935: PUSH
78936: LD_VAR 0 1
78940: PUSH
78941: LD_VAR 0 3
78945: MINUS
78946: ST_TO_ADDR
// if y - r < 0 then
78947: LD_VAR 0 2
78951: PUSH
78952: LD_VAR 0 3
78956: MINUS
78957: PUSH
78958: LD_INT 0
78960: LESS
78961: IFFALSE 78973
// min_y := 0 else
78963: LD_ADDR_VAR 0 7
78967: PUSH
78968: LD_INT 0
78970: ST_TO_ADDR
78971: GO 78989
// min_y := y - r ;
78973: LD_ADDR_VAR 0 7
78977: PUSH
78978: LD_VAR 0 2
78982: PUSH
78983: LD_VAR 0 3
78987: MINUS
78988: ST_TO_ADDR
// max_x := x + r ;
78989: LD_ADDR_VAR 0 9
78993: PUSH
78994: LD_VAR 0 1
78998: PUSH
78999: LD_VAR 0 3
79003: PLUS
79004: ST_TO_ADDR
// max_y := y + r ;
79005: LD_ADDR_VAR 0 10
79009: PUSH
79010: LD_VAR 0 2
79014: PUSH
79015: LD_VAR 0 3
79019: PLUS
79020: ST_TO_ADDR
// for _x = min_x to max_x do
79021: LD_ADDR_VAR 0 5
79025: PUSH
79026: DOUBLE
79027: LD_VAR 0 8
79031: DEC
79032: ST_TO_ADDR
79033: LD_VAR 0 9
79037: PUSH
79038: FOR_TO
79039: IFFALSE 79140
// for _y = min_y to max_y do
79041: LD_ADDR_VAR 0 6
79045: PUSH
79046: DOUBLE
79047: LD_VAR 0 7
79051: DEC
79052: ST_TO_ADDR
79053: LD_VAR 0 10
79057: PUSH
79058: FOR_TO
79059: IFFALSE 79136
// begin if not ValidHex ( _x , _y ) then
79061: LD_VAR 0 5
79065: PPUSH
79066: LD_VAR 0 6
79070: PPUSH
79071: CALL_OW 488
79075: NOT
79076: IFFALSE 79080
// continue ;
79078: GO 79058
// if GetResourceTypeXY ( _x , _y ) then
79080: LD_VAR 0 5
79084: PPUSH
79085: LD_VAR 0 6
79089: PPUSH
79090: CALL_OW 283
79094: IFFALSE 79134
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79096: LD_ADDR_VAR 0 4
79100: PUSH
79101: LD_VAR 0 4
79105: PPUSH
79106: LD_VAR 0 4
79110: PUSH
79111: LD_INT 1
79113: PLUS
79114: PPUSH
79115: LD_VAR 0 5
79119: PUSH
79120: LD_VAR 0 6
79124: PUSH
79125: EMPTY
79126: LIST
79127: LIST
79128: PPUSH
79129: CALL_OW 1
79133: ST_TO_ADDR
// end ;
79134: GO 79058
79136: POP
79137: POP
79138: GO 79038
79140: POP
79141: POP
// end ;
79142: LD_VAR 0 4
79146: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79147: LD_INT 0
79149: PPUSH
79150: PPUSH
79151: PPUSH
79152: PPUSH
79153: PPUSH
79154: PPUSH
79155: PPUSH
79156: PPUSH
// if not units then
79157: LD_VAR 0 1
79161: NOT
79162: IFFALSE 79166
// exit ;
79164: GO 79690
// result := UnitFilter ( units , [ f_ok ] ) ;
79166: LD_ADDR_VAR 0 3
79170: PUSH
79171: LD_VAR 0 1
79175: PPUSH
79176: LD_INT 50
79178: PUSH
79179: EMPTY
79180: LIST
79181: PPUSH
79182: CALL_OW 72
79186: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79187: LD_ADDR_VAR 0 8
79191: PUSH
79192: LD_VAR 0 1
79196: PUSH
79197: LD_INT 1
79199: ARRAY
79200: PPUSH
79201: CALL_OW 255
79205: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79206: LD_ADDR_VAR 0 10
79210: PUSH
79211: LD_INT 29
79213: PUSH
79214: LD_INT 91
79216: PUSH
79217: LD_INT 49
79219: PUSH
79220: EMPTY
79221: LIST
79222: LIST
79223: LIST
79224: ST_TO_ADDR
// if not result then
79225: LD_VAR 0 3
79229: NOT
79230: IFFALSE 79234
// exit ;
79232: GO 79690
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79234: LD_ADDR_VAR 0 5
79238: PUSH
79239: LD_INT 81
79241: PUSH
79242: LD_VAR 0 8
79246: PUSH
79247: EMPTY
79248: LIST
79249: LIST
79250: PPUSH
79251: CALL_OW 69
79255: ST_TO_ADDR
// for i in result do
79256: LD_ADDR_VAR 0 4
79260: PUSH
79261: LD_VAR 0 3
79265: PUSH
79266: FOR_IN
79267: IFFALSE 79688
// begin tag := GetTag ( i ) + 1 ;
79269: LD_ADDR_VAR 0 9
79273: PUSH
79274: LD_VAR 0 4
79278: PPUSH
79279: CALL_OW 110
79283: PUSH
79284: LD_INT 1
79286: PLUS
79287: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79288: LD_ADDR_VAR 0 7
79292: PUSH
79293: LD_VAR 0 4
79297: PPUSH
79298: CALL_OW 250
79302: PPUSH
79303: LD_VAR 0 4
79307: PPUSH
79308: CALL_OW 251
79312: PPUSH
79313: LD_INT 6
79315: PPUSH
79316: CALL 78889 0 3
79320: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79321: LD_VAR 0 4
79325: PPUSH
79326: CALL_OW 247
79330: PUSH
79331: LD_INT 2
79333: EQUAL
79334: PUSH
79335: LD_VAR 0 7
79339: AND
79340: PUSH
79341: LD_VAR 0 4
79345: PPUSH
79346: CALL_OW 264
79350: PUSH
79351: LD_VAR 0 10
79355: IN
79356: NOT
79357: AND
79358: IFFALSE 79397
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79360: LD_VAR 0 4
79364: PPUSH
79365: LD_VAR 0 7
79369: PUSH
79370: LD_INT 1
79372: ARRAY
79373: PUSH
79374: LD_INT 1
79376: ARRAY
79377: PPUSH
79378: LD_VAR 0 7
79382: PUSH
79383: LD_INT 1
79385: ARRAY
79386: PUSH
79387: LD_INT 2
79389: ARRAY
79390: PPUSH
79391: CALL_OW 116
79395: GO 79686
// if path > tag then
79397: LD_VAR 0 2
79401: PUSH
79402: LD_VAR 0 9
79406: GREATER
79407: IFFALSE 79615
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79409: LD_ADDR_VAR 0 6
79413: PUSH
79414: LD_VAR 0 5
79418: PPUSH
79419: LD_INT 91
79421: PUSH
79422: LD_VAR 0 4
79426: PUSH
79427: LD_INT 8
79429: PUSH
79430: EMPTY
79431: LIST
79432: LIST
79433: LIST
79434: PPUSH
79435: CALL_OW 72
79439: ST_TO_ADDR
// if nearEnemy then
79440: LD_VAR 0 6
79444: IFFALSE 79513
// begin if GetWeapon ( i ) = ru_time_lapser then
79446: LD_VAR 0 4
79450: PPUSH
79451: CALL_OW 264
79455: PUSH
79456: LD_INT 49
79458: EQUAL
79459: IFFALSE 79487
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79461: LD_VAR 0 4
79465: PPUSH
79466: LD_VAR 0 6
79470: PPUSH
79471: LD_VAR 0 4
79475: PPUSH
79476: CALL_OW 74
79480: PPUSH
79481: CALL_OW 112
79485: GO 79511
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79487: LD_VAR 0 4
79491: PPUSH
79492: LD_VAR 0 6
79496: PPUSH
79497: LD_VAR 0 4
79501: PPUSH
79502: CALL_OW 74
79506: PPUSH
79507: CALL_OW 115
// end else
79511: GO 79613
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79513: LD_VAR 0 4
79517: PPUSH
79518: LD_VAR 0 2
79522: PUSH
79523: LD_VAR 0 9
79527: ARRAY
79528: PUSH
79529: LD_INT 1
79531: ARRAY
79532: PPUSH
79533: LD_VAR 0 2
79537: PUSH
79538: LD_VAR 0 9
79542: ARRAY
79543: PUSH
79544: LD_INT 2
79546: ARRAY
79547: PPUSH
79548: CALL_OW 297
79552: PUSH
79553: LD_INT 6
79555: GREATER
79556: IFFALSE 79599
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79558: LD_VAR 0 4
79562: PPUSH
79563: LD_VAR 0 2
79567: PUSH
79568: LD_VAR 0 9
79572: ARRAY
79573: PUSH
79574: LD_INT 1
79576: ARRAY
79577: PPUSH
79578: LD_VAR 0 2
79582: PUSH
79583: LD_VAR 0 9
79587: ARRAY
79588: PUSH
79589: LD_INT 2
79591: ARRAY
79592: PPUSH
79593: CALL_OW 114
79597: GO 79613
// SetTag ( i , tag ) ;
79599: LD_VAR 0 4
79603: PPUSH
79604: LD_VAR 0 9
79608: PPUSH
79609: CALL_OW 109
// end else
79613: GO 79686
// if enemy then
79615: LD_VAR 0 5
79619: IFFALSE 79686
// begin if GetWeapon ( i ) = ru_time_lapser then
79621: LD_VAR 0 4
79625: PPUSH
79626: CALL_OW 264
79630: PUSH
79631: LD_INT 49
79633: EQUAL
79634: IFFALSE 79662
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79636: LD_VAR 0 4
79640: PPUSH
79641: LD_VAR 0 5
79645: PPUSH
79646: LD_VAR 0 4
79650: PPUSH
79651: CALL_OW 74
79655: PPUSH
79656: CALL_OW 112
79660: GO 79686
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79662: LD_VAR 0 4
79666: PPUSH
79667: LD_VAR 0 5
79671: PPUSH
79672: LD_VAR 0 4
79676: PPUSH
79677: CALL_OW 74
79681: PPUSH
79682: CALL_OW 115
// end ; end ;
79686: GO 79266
79688: POP
79689: POP
// end ;
79690: LD_VAR 0 3
79694: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79695: LD_INT 0
79697: PPUSH
79698: PPUSH
79699: PPUSH
// if not unit or IsInUnit ( unit ) then
79700: LD_VAR 0 1
79704: NOT
79705: PUSH
79706: LD_VAR 0 1
79710: PPUSH
79711: CALL_OW 310
79715: OR
79716: IFFALSE 79720
// exit ;
79718: GO 79811
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79720: LD_ADDR_VAR 0 4
79724: PUSH
79725: LD_VAR 0 1
79729: PPUSH
79730: CALL_OW 250
79734: PPUSH
79735: LD_VAR 0 2
79739: PPUSH
79740: LD_INT 1
79742: PPUSH
79743: CALL_OW 272
79747: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79748: LD_ADDR_VAR 0 5
79752: PUSH
79753: LD_VAR 0 1
79757: PPUSH
79758: CALL_OW 251
79762: PPUSH
79763: LD_VAR 0 2
79767: PPUSH
79768: LD_INT 1
79770: PPUSH
79771: CALL_OW 273
79775: ST_TO_ADDR
// if ValidHex ( x , y ) then
79776: LD_VAR 0 4
79780: PPUSH
79781: LD_VAR 0 5
79785: PPUSH
79786: CALL_OW 488
79790: IFFALSE 79811
// ComTurnXY ( unit , x , y ) ;
79792: LD_VAR 0 1
79796: PPUSH
79797: LD_VAR 0 4
79801: PPUSH
79802: LD_VAR 0 5
79806: PPUSH
79807: CALL_OW 118
// end ;
79811: LD_VAR 0 3
79815: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79816: LD_INT 0
79818: PPUSH
79819: PPUSH
// result := false ;
79820: LD_ADDR_VAR 0 3
79824: PUSH
79825: LD_INT 0
79827: ST_TO_ADDR
// if not units then
79828: LD_VAR 0 2
79832: NOT
79833: IFFALSE 79837
// exit ;
79835: GO 79882
// for i in units do
79837: LD_ADDR_VAR 0 4
79841: PUSH
79842: LD_VAR 0 2
79846: PUSH
79847: FOR_IN
79848: IFFALSE 79880
// if See ( side , i ) then
79850: LD_VAR 0 1
79854: PPUSH
79855: LD_VAR 0 4
79859: PPUSH
79860: CALL_OW 292
79864: IFFALSE 79878
// begin result := true ;
79866: LD_ADDR_VAR 0 3
79870: PUSH
79871: LD_INT 1
79873: ST_TO_ADDR
// exit ;
79874: POP
79875: POP
79876: GO 79882
// end ;
79878: GO 79847
79880: POP
79881: POP
// end ;
79882: LD_VAR 0 3
79886: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79887: LD_INT 0
79889: PPUSH
79890: PPUSH
79891: PPUSH
79892: PPUSH
// if not unit or not points then
79893: LD_VAR 0 1
79897: NOT
79898: PUSH
79899: LD_VAR 0 2
79903: NOT
79904: OR
79905: IFFALSE 79909
// exit ;
79907: GO 79999
// dist := 99999 ;
79909: LD_ADDR_VAR 0 5
79913: PUSH
79914: LD_INT 99999
79916: ST_TO_ADDR
// for i in points do
79917: LD_ADDR_VAR 0 4
79921: PUSH
79922: LD_VAR 0 2
79926: PUSH
79927: FOR_IN
79928: IFFALSE 79997
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79930: LD_ADDR_VAR 0 6
79934: PUSH
79935: LD_VAR 0 1
79939: PPUSH
79940: LD_VAR 0 4
79944: PUSH
79945: LD_INT 1
79947: ARRAY
79948: PPUSH
79949: LD_VAR 0 4
79953: PUSH
79954: LD_INT 2
79956: ARRAY
79957: PPUSH
79958: CALL_OW 297
79962: ST_TO_ADDR
// if tmpDist < dist then
79963: LD_VAR 0 6
79967: PUSH
79968: LD_VAR 0 5
79972: LESS
79973: IFFALSE 79995
// begin result := i ;
79975: LD_ADDR_VAR 0 3
79979: PUSH
79980: LD_VAR 0 4
79984: ST_TO_ADDR
// dist := tmpDist ;
79985: LD_ADDR_VAR 0 5
79989: PUSH
79990: LD_VAR 0 6
79994: ST_TO_ADDR
// end ; end ;
79995: GO 79927
79997: POP
79998: POP
// end ;
79999: LD_VAR 0 3
80003: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80004: LD_INT 0
80006: PPUSH
// uc_side := side ;
80007: LD_ADDR_OWVAR 20
80011: PUSH
80012: LD_VAR 0 1
80016: ST_TO_ADDR
// uc_nation := 3 ;
80017: LD_ADDR_OWVAR 21
80021: PUSH
80022: LD_INT 3
80024: ST_TO_ADDR
// vc_chassis := 25 ;
80025: LD_ADDR_OWVAR 37
80029: PUSH
80030: LD_INT 25
80032: ST_TO_ADDR
// vc_engine := engine_siberite ;
80033: LD_ADDR_OWVAR 39
80037: PUSH
80038: LD_INT 3
80040: ST_TO_ADDR
// vc_control := control_computer ;
80041: LD_ADDR_OWVAR 38
80045: PUSH
80046: LD_INT 3
80048: ST_TO_ADDR
// vc_weapon := 59 ;
80049: LD_ADDR_OWVAR 40
80053: PUSH
80054: LD_INT 59
80056: ST_TO_ADDR
// result := CreateVehicle ;
80057: LD_ADDR_VAR 0 5
80061: PUSH
80062: CALL_OW 45
80066: ST_TO_ADDR
// SetDir ( result , d ) ;
80067: LD_VAR 0 5
80071: PPUSH
80072: LD_VAR 0 4
80076: PPUSH
80077: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80081: LD_VAR 0 5
80085: PPUSH
80086: LD_VAR 0 2
80090: PPUSH
80091: LD_VAR 0 3
80095: PPUSH
80096: LD_INT 0
80098: PPUSH
80099: CALL_OW 48
// end ;
80103: LD_VAR 0 5
80107: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80108: LD_INT 0
80110: PPUSH
80111: PPUSH
80112: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80113: LD_ADDR_VAR 0 2
80117: PUSH
80118: LD_INT 0
80120: PUSH
80121: LD_INT 0
80123: PUSH
80124: LD_INT 0
80126: PUSH
80127: LD_INT 0
80129: PUSH
80130: EMPTY
80131: LIST
80132: LIST
80133: LIST
80134: LIST
80135: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80136: LD_VAR 0 1
80140: NOT
80141: PUSH
80142: LD_VAR 0 1
80146: PPUSH
80147: CALL_OW 264
80151: PUSH
80152: LD_INT 12
80154: PUSH
80155: LD_INT 51
80157: PUSH
80158: LD_INT 32
80160: PUSH
80161: LD_INT 89
80163: PUSH
80164: EMPTY
80165: LIST
80166: LIST
80167: LIST
80168: LIST
80169: IN
80170: NOT
80171: OR
80172: IFFALSE 80176
// exit ;
80174: GO 80274
// for i := 1 to 3 do
80176: LD_ADDR_VAR 0 3
80180: PUSH
80181: DOUBLE
80182: LD_INT 1
80184: DEC
80185: ST_TO_ADDR
80186: LD_INT 3
80188: PUSH
80189: FOR_TO
80190: IFFALSE 80272
// begin tmp := GetCargo ( cargo , i ) ;
80192: LD_ADDR_VAR 0 4
80196: PUSH
80197: LD_VAR 0 1
80201: PPUSH
80202: LD_VAR 0 3
80206: PPUSH
80207: CALL_OW 289
80211: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80212: LD_ADDR_VAR 0 2
80216: PUSH
80217: LD_VAR 0 2
80221: PPUSH
80222: LD_VAR 0 3
80226: PPUSH
80227: LD_VAR 0 4
80231: PPUSH
80232: CALL_OW 1
80236: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80237: LD_ADDR_VAR 0 2
80241: PUSH
80242: LD_VAR 0 2
80246: PPUSH
80247: LD_INT 4
80249: PPUSH
80250: LD_VAR 0 2
80254: PUSH
80255: LD_INT 4
80257: ARRAY
80258: PUSH
80259: LD_VAR 0 4
80263: PLUS
80264: PPUSH
80265: CALL_OW 1
80269: ST_TO_ADDR
// end ;
80270: GO 80189
80272: POP
80273: POP
// end ;
80274: LD_VAR 0 2
80278: RET
// export function Length ( array ) ; begin
80279: LD_INT 0
80281: PPUSH
// result := array + 0 ;
80282: LD_ADDR_VAR 0 2
80286: PUSH
80287: LD_VAR 0 1
80291: PUSH
80292: LD_INT 0
80294: PLUS
80295: ST_TO_ADDR
// end ;
80296: LD_VAR 0 2
80300: RET
// export function PrepareArray ( array ) ; begin
80301: LD_INT 0
80303: PPUSH
// result := array diff 0 ;
80304: LD_ADDR_VAR 0 2
80308: PUSH
80309: LD_VAR 0 1
80313: PUSH
80314: LD_INT 0
80316: DIFF
80317: ST_TO_ADDR
// if not result [ 1 ] then
80318: LD_VAR 0 2
80322: PUSH
80323: LD_INT 1
80325: ARRAY
80326: NOT
80327: IFFALSE 80347
// result := Delete ( result , 1 ) ;
80329: LD_ADDR_VAR 0 2
80333: PUSH
80334: LD_VAR 0 2
80338: PPUSH
80339: LD_INT 1
80341: PPUSH
80342: CALL_OW 3
80346: ST_TO_ADDR
// end ;
80347: LD_VAR 0 2
80351: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80352: LD_INT 0
80354: PPUSH
80355: PPUSH
80356: PPUSH
80357: PPUSH
// sibRocketRange := 25 ;
80358: LD_ADDR_VAR 0 6
80362: PUSH
80363: LD_INT 25
80365: ST_TO_ADDR
// result := false ;
80366: LD_ADDR_VAR 0 4
80370: PUSH
80371: LD_INT 0
80373: ST_TO_ADDR
// for i := 0 to 5 do
80374: LD_ADDR_VAR 0 5
80378: PUSH
80379: DOUBLE
80380: LD_INT 0
80382: DEC
80383: ST_TO_ADDR
80384: LD_INT 5
80386: PUSH
80387: FOR_TO
80388: IFFALSE 80455
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80390: LD_VAR 0 1
80394: PPUSH
80395: LD_VAR 0 5
80399: PPUSH
80400: LD_VAR 0 6
80404: PPUSH
80405: CALL_OW 272
80409: PPUSH
80410: LD_VAR 0 2
80414: PPUSH
80415: LD_VAR 0 5
80419: PPUSH
80420: LD_VAR 0 6
80424: PPUSH
80425: CALL_OW 273
80429: PPUSH
80430: LD_VAR 0 3
80434: PPUSH
80435: CALL_OW 309
80439: IFFALSE 80453
// begin result := true ;
80441: LD_ADDR_VAR 0 4
80445: PUSH
80446: LD_INT 1
80448: ST_TO_ADDR
// exit ;
80449: POP
80450: POP
80451: GO 80457
// end ;
80453: GO 80387
80455: POP
80456: POP
// end ;
80457: LD_VAR 0 4
80461: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80462: LD_INT 0
80464: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80465: LD_VAR 0 1
80469: PPUSH
80470: LD_VAR 0 2
80474: PPUSH
80475: LD_INT 0
80477: PPUSH
80478: LD_INT 0
80480: PPUSH
80481: LD_INT 1
80483: PPUSH
80484: LD_INT 0
80486: PPUSH
80487: CALL_OW 587
// end ;
80491: LD_VAR 0 3
80495: RET
// export function CenterOnNow ( unit ) ; begin
80496: LD_INT 0
80498: PPUSH
// result := IsInUnit ( unit ) ;
80499: LD_ADDR_VAR 0 2
80503: PUSH
80504: LD_VAR 0 1
80508: PPUSH
80509: CALL_OW 310
80513: ST_TO_ADDR
// if not result then
80514: LD_VAR 0 2
80518: NOT
80519: IFFALSE 80531
// result := unit ;
80521: LD_ADDR_VAR 0 2
80525: PUSH
80526: LD_VAR 0 1
80530: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
80531: LD_VAR 0 1
80535: PPUSH
80536: CALL_OW 87
// end ;
80540: LD_VAR 0 2
80544: RET
// export function ComMoveHex ( unit , hex ) ; begin
80545: LD_INT 0
80547: PPUSH
// if not hex then
80548: LD_VAR 0 2
80552: NOT
80553: IFFALSE 80557
// exit ;
80555: GO 80610
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
80557: LD_VAR 0 2
80561: PUSH
80562: LD_INT 1
80564: ARRAY
80565: PPUSH
80566: LD_VAR 0 2
80570: PUSH
80571: LD_INT 2
80573: ARRAY
80574: PPUSH
80575: CALL_OW 428
80579: IFFALSE 80583
// exit ;
80581: GO 80610
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
80583: LD_VAR 0 1
80587: PPUSH
80588: LD_VAR 0 2
80592: PUSH
80593: LD_INT 1
80595: ARRAY
80596: PPUSH
80597: LD_VAR 0 2
80601: PUSH
80602: LD_INT 2
80604: ARRAY
80605: PPUSH
80606: CALL_OW 111
// end ; end_of_file
80610: LD_VAR 0 3
80614: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80615: LD_VAR 0 1
80619: PUSH
80620: LD_INT 200
80622: DOUBLE
80623: GREATEREQUAL
80624: IFFALSE 80632
80626: LD_INT 299
80628: DOUBLE
80629: LESSEQUAL
80630: IFTRUE 80634
80632: GO 80666
80634: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80635: LD_VAR 0 1
80639: PPUSH
80640: LD_VAR 0 2
80644: PPUSH
80645: LD_VAR 0 3
80649: PPUSH
80650: LD_VAR 0 4
80654: PPUSH
80655: LD_VAR 0 5
80659: PPUSH
80660: CALL 35338 0 5
80664: GO 80743
80666: LD_INT 300
80668: DOUBLE
80669: GREATEREQUAL
80670: IFFALSE 80678
80672: LD_INT 399
80674: DOUBLE
80675: LESSEQUAL
80676: IFTRUE 80680
80678: GO 80742
80680: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80681: LD_VAR 0 1
80685: PPUSH
80686: LD_VAR 0 2
80690: PPUSH
80691: LD_VAR 0 3
80695: PPUSH
80696: LD_VAR 0 4
80700: PPUSH
80701: LD_VAR 0 5
80705: PPUSH
80706: LD_VAR 0 6
80710: PPUSH
80711: LD_VAR 0 7
80715: PPUSH
80716: LD_VAR 0 8
80720: PPUSH
80721: LD_VAR 0 9
80725: PPUSH
80726: LD_VAR 0 10
80730: PPUSH
80731: LD_VAR 0 11
80735: PPUSH
80736: CALL 31671 0 11
80740: GO 80743
80742: POP
// end ;
80743: PPOPN 11
80745: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80746: LD_VAR 0 1
80750: PPUSH
80751: LD_VAR 0 2
80755: PPUSH
80756: LD_VAR 0 3
80760: PPUSH
80761: LD_VAR 0 4
80765: PPUSH
80766: LD_VAR 0 5
80770: PPUSH
80771: CALL 35074 0 5
// end ; end_of_file
80775: PPOPN 5
80777: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80778: LD_VAR 0 1
80782: PPUSH
80783: LD_VAR 0 2
80787: PPUSH
80788: LD_VAR 0 3
80792: PPUSH
80793: LD_VAR 0 4
80797: PPUSH
80798: LD_VAR 0 5
80802: PPUSH
80803: LD_VAR 0 6
80807: PPUSH
80808: CALL 19323 0 6
// end ;
80812: PPOPN 6
80814: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80815: LD_INT 0
80817: PPUSH
// begin if not units then
80818: LD_VAR 0 1
80822: NOT
80823: IFFALSE 80827
// exit ;
80825: GO 80827
// end ;
80827: PPOPN 7
80829: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80830: CALL 19227 0 0
// end ;
80834: PPOPN 1
80836: END
