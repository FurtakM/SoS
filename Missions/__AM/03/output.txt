// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3454 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2668 0 0
// PrepareWesternBase ;
  41: CALL 2897 0 0
// Action ;
  45: CALL 5785 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty , vcount , tmpv ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
// uc_side := 4 ;
1157: LD_ADDR_OWVAR 20
1161: PUSH
1162: LD_INT 4
1164: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1165: LD_ADDR_EXP 46
1169: PUSH
1170: LD_STRING Powell
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: LD_STRING 
1178: PPUSH
1179: CALL 40548 0 3
1183: ST_TO_ADDR
// uc_side := 1 ;
1184: LD_ADDR_OWVAR 20
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// uc_nation := 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// if debug then
1200: LD_EXP 1
1204: IFFALSE 1550
// begin for i = 1 to 4 do
1206: LD_ADDR_VAR 0 2
1210: PUSH
1211: DOUBLE
1212: LD_INT 1
1214: DEC
1215: ST_TO_ADDR
1216: LD_INT 4
1218: PUSH
1219: FOR_TO
1220: IFFALSE 1271
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1222: LD_INT 0
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_INT 2
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL_OW 380
// un := CreateHuman ;
1243: LD_ADDR_VAR 0 3
1247: PUSH
1248: CALL_OW 44
1252: ST_TO_ADDR
// others := others ^ un ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_VAR 0 5
1262: PUSH
1263: LD_VAR 0 3
1267: ADD
1268: ST_TO_ADDR
// end ;
1269: GO 1219
1271: POP
1272: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1273: LD_ADDR_VAR 0 6
1277: PUSH
1278: LD_INT 21
1280: PUSH
1281: LD_INT 1
1283: PUSH
1284: LD_INT 1
1286: PUSH
1287: LD_INT 42
1289: PUSH
1290: LD_INT 0
1292: PUSH
1293: LD_INT 750
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 21
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 42
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 750
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: PUSH
1330: LD_INT 21
1332: PUSH
1333: LD_INT 1
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: LD_INT 42
1341: PUSH
1342: LD_INT 0
1344: PUSH
1345: LD_INT 750
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 42
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 750
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 21
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 44
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: LD_INT 750
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 21
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: LD_INT 43
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 750
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 21
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: LD_INT 43
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 750
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 21
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 43
1471: PUSH
1472: LD_INT 0
1474: PUSH
1475: LD_INT 750
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 21
1488: PUSH
1489: LD_INT 1
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: LD_INT 90
1500: PUSH
1501: LD_INT 504
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 51
1523: PUSH
1524: LD_INT 80
1526: PUSH
1527: LD_INT 750
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1550: LD_ADDR_EXP 37
1554: PUSH
1555: LD_STRING JMM
1557: PPUSH
1558: LD_EXP 1
1562: NOT
1563: PPUSH
1564: LD_EXP 3
1568: PPUSH
1569: CALL 40548 0 3
1573: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1574: LD_ADDR_EXP 38
1578: PUSH
1579: LD_STRING Bobby
1581: PPUSH
1582: LD_EXP 1
1586: NOT
1587: PPUSH
1588: LD_EXP 3
1592: PPUSH
1593: CALL 40548 0 3
1597: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1598: LD_ADDR_EXP 39
1602: PUSH
1603: LD_STRING Cyrus
1605: PPUSH
1606: LD_EXP 1
1610: NOT
1611: PPUSH
1612: LD_EXP 3
1616: PPUSH
1617: CALL 40548 0 3
1621: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1622: LD_ADDR_EXP 40
1626: PUSH
1627: LD_STRING Lisa
1629: PPUSH
1630: LD_EXP 1
1634: NOT
1635: PPUSH
1636: LD_EXP 3
1640: PPUSH
1641: CALL 40548 0 3
1645: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1646: LD_ADDR_EXP 41
1650: PUSH
1651: LD_STRING Khatam
1653: PPUSH
1654: LD_EXP 1
1658: NOT
1659: PPUSH
1660: LD_EXP 3
1664: PPUSH
1665: CALL 40548 0 3
1669: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1670: LD_ADDR_EXP 42
1674: PUSH
1675: LD_STRING Brian
1677: PPUSH
1678: LD_EXP 1
1682: NOT
1683: PPUSH
1684: LD_EXP 3
1688: PPUSH
1689: CALL 40548 0 3
1693: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1694: LD_ADDR_EXP 43
1698: PUSH
1699: LD_STRING Jerry
1701: PPUSH
1702: LD_EXP 1
1706: NOT
1707: PPUSH
1708: LD_EXP 3
1712: PPUSH
1713: CALL 40548 0 3
1717: ST_TO_ADDR
// if Bobby then
1718: LD_EXP 38
1722: IFFALSE 1753
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1724: LD_ADDR_VAR 0 4
1728: PUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: LD_VAR 0 4
1738: PUSH
1739: LD_INT 1
1741: PLUS
1742: PPUSH
1743: LD_EXP 38
1747: PPUSH
1748: CALL_OW 2
1752: ST_TO_ADDR
// if Cyrus then
1753: LD_EXP 39
1757: IFFALSE 1788
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_VAR 0 4
1773: PUSH
1774: LD_INT 1
1776: PLUS
1777: PPUSH
1778: LD_EXP 39
1782: PPUSH
1783: CALL_OW 2
1787: ST_TO_ADDR
// if Lisa then
1788: LD_EXP 40
1792: IFFALSE 1823
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: LD_VAR 0 4
1808: PUSH
1809: LD_INT 1
1811: PLUS
1812: PPUSH
1813: LD_EXP 40
1817: PPUSH
1818: CALL_OW 2
1822: ST_TO_ADDR
// if Khatam then
1823: LD_EXP 41
1827: IFFALSE 1858
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1829: LD_ADDR_VAR 0 4
1833: PUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: LD_VAR 0 4
1843: PUSH
1844: LD_INT 1
1846: PLUS
1847: PPUSH
1848: LD_EXP 41
1852: PPUSH
1853: CALL_OW 2
1857: ST_TO_ADDR
// if Brian then
1858: LD_EXP 42
1862: IFFALSE 1893
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1864: LD_ADDR_VAR 0 4
1868: PUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_VAR 0 4
1878: PUSH
1879: LD_INT 1
1881: PLUS
1882: PPUSH
1883: LD_EXP 42
1887: PPUSH
1888: CALL_OW 2
1892: ST_TO_ADDR
// if Jerry then
1893: LD_EXP 43
1897: IFFALSE 1928
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: PLUS
1917: PPUSH
1918: LD_EXP 43
1922: PPUSH
1923: CALL_OW 2
1927: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1928: LD_STRING 02_other_survivors
1930: PPUSH
1931: CALL_OW 28
1935: IFFALSE 1950
// others := CreateCharacterSet ( 02_other_survivors ) ;
1937: LD_ADDR_VAR 0 5
1941: PUSH
1942: LD_STRING 02_other_survivors
1944: PPUSH
1945: CALL_OW 31
1949: ST_TO_ADDR
// if others then
1950: LD_VAR 0 5
1954: IFFALSE 1979
// begin tmp := tmp ^ others ;
1956: LD_ADDR_VAR 0 4
1960: PUSH
1961: LD_VAR 0 4
1965: PUSH
1966: LD_VAR 0 5
1970: ADD
1971: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1972: LD_STRING 02_other_survivors
1974: PPUSH
1975: CALL_OW 40
// end ; jmm_units := tmp diff 0 ;
1979: LD_ADDR_EXP 4
1983: PUSH
1984: LD_VAR 0 4
1988: PUSH
1989: LD_INT 0
1991: DIFF
1992: ST_TO_ADDR
// if not vehicles then
1993: LD_VAR 0 6
1997: NOT
1998: IFFALSE 2015
// vehicles := LoadVariable ( 02_tanks_1 , [ ] ) ;
2000: LD_ADDR_VAR 0 6
2004: PUSH
2005: LD_STRING 02_tanks_1
2007: PPUSH
2008: EMPTY
2009: PPUSH
2010: CALL_OW 30
2014: ST_TO_ADDR
// if vehicles then
2015: LD_VAR 0 6
2019: IFFALSE 2387
// begin got_mech := false ;
2021: LD_ADDR_VAR 0 7
2025: PUSH
2026: LD_INT 0
2028: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
2029: LD_VAR 0 4
2033: PPUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 3
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 72
2048: IFFALSE 2058
// got_mech := true ;
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// vcount := Count ( vehicles ) ;
2058: LD_ADDR_VAR 0 9
2062: PUSH
2063: LD_VAR 0 6
2067: PPUSH
2068: CALL 42734 0 1
2072: ST_TO_ADDR
// if vcount > 1 then
2073: LD_VAR 0 9
2077: PUSH
2078: LD_INT 1
2080: GREATER
2081: IFFALSE 2184
// begin for i := 2 to vcount do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 2
2091: DEC
2092: ST_TO_ADDR
2093: LD_VAR 0 9
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2182
// if vehicles [ i ] [ 4 ] = ru_cargo_bay then
2101: LD_VAR 0 6
2105: PUSH
2106: LD_VAR 0 2
2110: ARRAY
2111: PUSH
2112: LD_INT 4
2114: ARRAY
2115: PUSH
2116: LD_INT 51
2118: EQUAL
2119: IFFALSE 2180
// begin tmpv := vehicles [ i ] ;
2121: LD_ADDR_VAR 0 10
2125: PUSH
2126: LD_VAR 0 6
2130: PUSH
2131: LD_VAR 0 2
2135: ARRAY
2136: ST_TO_ADDR
// vehicles := Delete ( vehicles , i ) ;
2137: LD_ADDR_VAR 0 6
2141: PUSH
2142: LD_VAR 0 6
2146: PPUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 3
2156: ST_TO_ADDR
// vehicles := Insert ( vehicles , 1 , tmpv ) ;
2157: LD_ADDR_VAR 0 6
2161: PUSH
2162: LD_VAR 0 6
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_VAR 0 10
2174: PPUSH
2175: CALL_OW 2
2179: ST_TO_ADDR
// end ;
2180: GO 2098
2182: POP
2183: POP
// end ; if vcount > 6 then
2184: LD_VAR 0 9
2188: PUSH
2189: LD_INT 6
2191: GREATER
2192: IFFALSE 2202
// vcount := 6 ;
2194: LD_ADDR_VAR 0 9
2198: PUSH
2199: LD_INT 6
2201: ST_TO_ADDR
// if jmm_units + 1 < vcount then
2202: LD_EXP 4
2206: PUSH
2207: LD_INT 1
2209: PLUS
2210: PUSH
2211: LD_VAR 0 9
2215: LESS
2216: IFFALSE 2232
// vcount := jmm_units + 1 ;
2218: LD_ADDR_VAR 0 9
2222: PUSH
2223: LD_EXP 4
2227: PUSH
2228: LD_INT 1
2230: PLUS
2231: ST_TO_ADDR
// for i := 1 to vcount do
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: DOUBLE
2238: LD_INT 1
2240: DEC
2241: ST_TO_ADDR
2242: LD_VAR 0 9
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2385
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 3
2260: PPUSH
2261: LD_VAR 0 6
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: LD_VAR 0 6
2280: PUSH
2281: LD_VAR 0 2
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_VAR 0 6
2295: PUSH
2296: LD_VAR 0 2
2300: ARRAY
2301: PUSH
2302: LD_INT 3
2304: ARRAY
2305: PPUSH
2306: LD_VAR 0 6
2310: PUSH
2311: LD_VAR 0 2
2315: ARRAY
2316: PUSH
2317: LD_INT 4
2319: ARRAY
2320: PPUSH
2321: LD_INT 40
2323: PPUSH
2324: CALL 497 0 7
2328: ST_TO_ADDR
// if not got_mech then
2329: LD_VAR 0 7
2333: NOT
2334: IFFALSE 2360
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_VAR 0 6
2345: PUSH
2346: LD_VAR 0 2
2350: ARRAY
2351: PUSH
2352: LD_INT 6
2354: ARRAY
2355: PPUSH
2356: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: LD_VAR 0 3
2377: PPUSH
2378: CALL_OW 2
2382: ST_TO_ADDR
// end ;
2383: GO 2247
2385: POP
2386: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
2387: LD_EXP 37
2391: PPUSH
2392: LD_INT 194
2394: PPUSH
2395: LD_INT 119
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 48
// if tmp then
2405: LD_VAR 0 4
2409: IFFALSE 2597
// begin for i in tmp do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_VAR 0 4
2420: PUSH
2421: FOR_IN
2422: IFFALSE 2595
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL_OW 257
2433: PUSH
2434: LD_INT 1
2436: NONEQUAL
2437: PUSH
2438: LD_VAR 0 2
2442: PUSH
2443: LD_EXP 41
2447: NONEQUAL
2448: AND
2449: IFFALSE 2463
// SetClass ( i , 1 ) ;
2451: LD_VAR 0 2
2455: PPUSH
2456: LD_INT 1
2458: PPUSH
2459: CALL_OW 336
// if i = Khatam then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_EXP 41
2472: EQUAL
2473: IFFALSE 2487
// SetClass ( i , 4 ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 4
2482: PPUSH
2483: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2487: LD_ADDR_VAR 0 8
2491: PUSH
2492: LD_INT 22
2494: PUSH
2495: LD_INT 1
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 21
2504: PUSH
2505: LD_INT 2
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 58
2514: PUSH
2515: EMPTY
2516: LIST
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2528: LD_VAR 0 2
2532: PPUSH
2533: CALL_OW 247
2537: PUSH
2538: LD_INT 1
2540: EQUAL
2541: PUSH
2542: LD_VAR 0 8
2546: AND
2547: IFFALSE 2569
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2549: LD_VAR 0 2
2553: PPUSH
2554: LD_VAR 0 8
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PPUSH
2563: CALL_OW 52
2567: GO 2584
// PlaceUnitArea ( i , startArea , false ) ;
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 0
2579: PPUSH
2580: CALL_OW 49
// ComHold ( i ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: CALL_OW 140
// end ;
2593: GO 2421
2595: POP
2596: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2597: LD_ADDR_EXP 7
2601: PUSH
2602: LD_STRING 02_mikhailStatus_1
2604: PPUSH
2605: LD_INT 0
2607: PPUSH
2608: CALL_OW 30
2612: ST_TO_ADDR
// if not bierezov_exist and not debug then
2613: LD_EXP 7
2617: NOT
2618: PUSH
2619: LD_EXP 1
2623: NOT
2624: AND
2625: IFFALSE 2629
// exit ;
2627: GO 2663
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2629: LD_ADDR_EXP 45
2633: PUSH
2634: LD_STRING Mikhail
2636: PPUSH
2637: LD_INT 0
2639: PPUSH
2640: LD_STRING 
2642: PPUSH
2643: CALL 40548 0 3
2647: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2648: LD_EXP 45
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 49
// end ;
2663: LD_VAR 0 1
2667: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
2673: PPUSH
// uc_side := 4 ;
2674: LD_ADDR_OWVAR 20
2678: PUSH
2679: LD_INT 4
2681: ST_TO_ADDR
// uc_nation := 1 ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 1
2689: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2690: LD_ADDR_EXP 44
2694: PUSH
2695: LD_STRING Cornell
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: LD_STRING 
2703: PPUSH
2704: CALL 40548 0 3
2708: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2709: LD_ADDR_EXP 6
2713: PUSH
2714: LD_INT 9
2716: PUSH
2717: LD_EXP 4
2721: MINUS
2722: ST_TO_ADDR
// tmp := [ ] ;
2723: LD_ADDR_VAR 0 2
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// if cornel_units < 4 then
2730: LD_EXP 6
2734: PUSH
2735: LD_INT 4
2737: LESS
2738: IFFALSE 2748
// cornel_units := 4 ;
2740: LD_ADDR_EXP 6
2744: PUSH
2745: LD_INT 4
2747: ST_TO_ADDR
// for i = 1 to cornel_units do
2748: LD_ADDR_VAR 0 4
2752: PUSH
2753: DOUBLE
2754: LD_INT 1
2756: DEC
2757: ST_TO_ADDR
2758: LD_EXP 6
2762: PUSH
2763: FOR_TO
2764: IFFALSE 2862
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2766: LD_INT 0
2768: PPUSH
2769: LD_INT 1
2771: PUSH
2772: LD_INT 1
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: LD_INT 4
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: PUSH
2791: LD_VAR 0 4
2795: PUSH
2796: LD_INT 5
2798: MOD
2799: PUSH
2800: LD_INT 1
2802: PLUS
2803: ARRAY
2804: PPUSH
2805: LD_INT 2
2807: PPUSH
2808: CALL_OW 380
// un := CreateHuman ;
2812: LD_ADDR_VAR 0 3
2816: PUSH
2817: CALL_OW 44
2821: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2822: LD_ADDR_VAR 0 2
2826: PUSH
2827: LD_VAR 0 2
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: LD_VAR 0 3
2839: PPUSH
2840: CALL_OW 2
2844: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2845: LD_VAR 0 3
2849: PPUSH
2850: LD_INT 2
2852: PPUSH
2853: LD_INT 0
2855: PPUSH
2856: CALL_OW 49
// end ;
2860: GO 2763
2862: POP
2863: POP
// cornel_units := tmp ;
2864: LD_ADDR_EXP 6
2868: PUSH
2869: LD_VAR 0 2
2873: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2874: LD_EXP 44
2878: PPUSH
2879: LD_INT 191
2881: PPUSH
2882: LD_INT 106
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 48
// end ;
2892: LD_VAR 0 1
2896: RET
// export function PrepareWesternBase ; var i ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
// uc_side := 8 ;
2901: LD_ADDR_OWVAR 20
2905: PUSH
2906: LD_INT 8
2908: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2909: LD_ADDR_EXP 47
2913: PUSH
2914: LD_STRING Lynch
2916: PPUSH
2917: LD_INT 0
2919: PPUSH
2920: LD_STRING 
2922: PPUSH
2923: CALL 40548 0 3
2927: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2928: LD_ADDR_EXP 48
2932: PUSH
2933: LD_STRING Walker
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: LD_STRING 
2941: PPUSH
2942: CALL 40548 0 3
2946: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2947: LD_ADDR_EXP 49
2951: PUSH
2952: LD_STRING Turner
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: LD_STRING 
2960: PPUSH
2961: CALL 40548 0 3
2965: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2966: LD_ADDR_EXP 50
2970: PUSH
2971: LD_STRING Jillian
2973: PPUSH
2974: LD_INT 0
2976: PPUSH
2977: LD_STRING 
2979: PPUSH
2980: CALL 40548 0 3
2984: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: LD_EXP 47
2994: PUSH
2995: LD_EXP 48
2999: PUSH
3000: LD_EXP 49
3004: PUSH
3005: LD_EXP 50
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: FOR_IN
3017: IFFALSE 3045
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 3
3026: PPUSH
3027: LD_INT 0
3029: PPUSH
3030: CALL_OW 49
// ComHold ( i ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: CALL_OW 140
// end ;
3043: GO 3016
3045: POP
3046: POP
// end ;
3047: LD_VAR 0 1
3051: RET
// export function SelectGroup ; var units , selected , i ; begin
3052: LD_INT 0
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
3058: LD_ADDR_VAR 0 2
3062: PUSH
3063: LD_EXP 37
3067: PUSH
3068: LD_INT -3
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: LD_EXP 4
3079: ADD
3080: PUSH
3081: LD_INT -2
3083: PUSH
3084: LD_INT -4
3086: PUSH
3087: LD_EXP 44
3091: PUSH
3092: LD_EXP 45
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: ADD
3103: PUSH
3104: LD_INT -3
3106: PUSH
3107: EMPTY
3108: LIST
3109: ADD
3110: PUSH
3111: LD_EXP 6
3115: ADD
3116: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
3117: LD_ADDR_VAR 0 3
3121: PUSH
3122: LD_EXP 37
3126: PUSH
3127: LD_STRING Select four characters to go with you
3129: PPUSH
3130: LD_INT 4
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: LD_VAR 0 2
3140: PPUSH
3141: EMPTY
3142: PPUSH
3143: CALL_OW 42
3147: ADD
3148: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
3149: LD_ADDR_EXP 6
3153: PUSH
3154: LD_EXP 4
3158: PUSH
3159: LD_EXP 6
3163: UNION
3164: PUSH
3165: LD_VAR 0 3
3169: DIFF
3170: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
3171: LD_ADDR_VAR 0 4
3175: PUSH
3176: LD_EXP 6
3180: PUSH
3181: LD_EXP 45
3185: ADD
3186: PUSH
3187: FOR_IN
3188: IFFALSE 3219
// if GetSide ( i ) = 1 then
3190: LD_VAR 0 4
3194: PPUSH
3195: CALL_OW 255
3199: PUSH
3200: LD_INT 1
3202: EQUAL
3203: IFFALSE 3217
// SetSide ( i , 4 ) ;
3205: LD_VAR 0 4
3209: PPUSH
3210: LD_INT 4
3212: PPUSH
3213: CALL_OW 235
3217: GO 3187
3219: POP
3220: POP
// for i in selected do
3221: LD_ADDR_VAR 0 4
3225: PUSH
3226: LD_VAR 0 3
3230: PUSH
3231: FOR_IN
3232: IFFALSE 3263
// if GetSide ( i ) = 4 then
3234: LD_VAR 0 4
3238: PPUSH
3239: CALL_OW 255
3243: PUSH
3244: LD_INT 4
3246: EQUAL
3247: IFFALSE 3261
// SetSide ( i , 1 ) ;
3249: LD_VAR 0 4
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: CALL_OW 235
3261: GO 3231
3263: POP
3264: POP
// jmm_units := jmm_units diff cornel_units ;
3265: LD_ADDR_EXP 4
3269: PUSH
3270: LD_EXP 4
3274: PUSH
3275: LD_EXP 6
3279: DIFF
3280: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
3281: LD_EXP 38
3285: PPUSH
3286: CALL_OW 255
3290: PUSH
3291: LD_INT 4
3293: EQUAL
3294: IFFALSE 3309
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
3296: LD_EXP 3
3300: PUSH
3301: LD_STRING Bobby
3303: STR
3304: PPUSH
3305: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
3309: LD_EXP 39
3313: PPUSH
3314: CALL_OW 255
3318: PUSH
3319: LD_INT 4
3321: EQUAL
3322: IFFALSE 3337
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
3324: LD_EXP 3
3328: PUSH
3329: LD_STRING Cyrus
3331: STR
3332: PPUSH
3333: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
3337: LD_EXP 40
3341: PPUSH
3342: CALL_OW 255
3346: PUSH
3347: LD_INT 4
3349: EQUAL
3350: IFFALSE 3365
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
3352: LD_EXP 3
3356: PUSH
3357: LD_STRING Lisa
3359: STR
3360: PPUSH
3361: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
3365: LD_EXP 41
3369: PPUSH
3370: CALL_OW 255
3374: PUSH
3375: LD_INT 4
3377: EQUAL
3378: IFFALSE 3393
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
3380: LD_EXP 3
3384: PUSH
3385: LD_STRING Khatam
3387: STR
3388: PPUSH
3389: CALL_OW 40
// if GetSide ( Brian ) = 4 then
3393: LD_EXP 42
3397: PPUSH
3398: CALL_OW 255
3402: PUSH
3403: LD_INT 4
3405: EQUAL
3406: IFFALSE 3421
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3408: LD_EXP 3
3412: PUSH
3413: LD_STRING Brian
3415: STR
3416: PPUSH
3417: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3421: LD_EXP 43
3425: PPUSH
3426: CALL_OW 255
3430: PUSH
3431: LD_INT 4
3433: EQUAL
3434: IFFALSE 3449
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3436: LD_EXP 3
3440: PUSH
3441: LD_STRING Jerry
3443: STR
3444: PPUSH
3445: CALL_OW 40
// end ; end_of_file
3449: LD_VAR 0 1
3453: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3454: LD_INT 0
3456: PPUSH
3457: PPUSH
3458: PPUSH
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
// ru_alert := false ;
3469: LD_ADDR_EXP 60
3473: PUSH
3474: LD_INT 0
3476: ST_TO_ADDR
// ru_produce_list := [ ] ;
3477: LD_ADDR_EXP 57
3481: PUSH
3482: EMPTY
3483: ST_TO_ADDR
// if Difficulty > 1 then
3484: LD_OWVAR 67
3488: PUSH
3489: LD_INT 1
3491: GREATER
3492: IFFALSE 3616
// begin uc_side := 3 ;
3494: LD_ADDR_OWVAR 20
3498: PUSH
3499: LD_INT 3
3501: ST_TO_ADDR
// uc_nation := 3 ;
3502: LD_ADDR_OWVAR 21
3506: PUSH
3507: LD_INT 3
3509: ST_TO_ADDR
// bc_type := b_breastwork ;
3510: LD_ADDR_OWVAR 42
3514: PUSH
3515: LD_INT 31
3517: ST_TO_ADDR
// bc_level := Difficulty ;
3518: LD_ADDR_OWVAR 43
3522: PUSH
3523: LD_OWVAR 67
3527: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3528: LD_INT 22
3530: PPUSH
3531: LD_INT 14
3533: PPUSH
3534: LD_INT 0
3536: PPUSH
3537: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3541: LD_INT 48
3543: PPUSH
3544: LD_INT 46
3546: PPUSH
3547: LD_INT 0
3549: PPUSH
3550: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3554: LD_INT 86
3556: PPUSH
3557: LD_INT 65
3559: PPUSH
3560: LD_INT 5
3562: PPUSH
3563: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3567: LD_INT 165
3569: PPUSH
3570: LD_INT 73
3572: PPUSH
3573: LD_INT 5
3575: PPUSH
3576: CALL_OW 47
// if Difficulty > 2 then
3580: LD_OWVAR 67
3584: PUSH
3585: LD_INT 2
3587: GREATER
3588: IFFALSE 3616
// begin CreateAndPlaceBuildingXYD ( 152 , 114 , 4 ) ;
3590: LD_INT 152
3592: PPUSH
3593: LD_INT 114
3595: PPUSH
3596: LD_INT 4
3598: PPUSH
3599: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 157 , 97 , 4 ) ;
3603: LD_INT 157
3605: PPUSH
3606: LD_INT 97
3608: PPUSH
3609: LD_INT 4
3611: PPUSH
3612: CALL_OW 47
// end ; end ; if Difficulty >= 3 then
3616: LD_OWVAR 67
3620: PUSH
3621: LD_INT 3
3623: GREATEREQUAL
3624: IFFALSE 3639
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3626: LD_INT 51
3628: PPUSH
3629: LD_INT 3
3631: PPUSH
3632: LD_INT 2
3634: PPUSH
3635: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3639: LD_ADDR_VAR 0 7
3643: PUSH
3644: LD_INT 22
3646: PUSH
3647: LD_INT 3
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 2
3656: PUSH
3657: LD_INT 30
3659: PUSH
3660: LD_INT 31
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PUSH
3667: LD_INT 30
3669: PUSH
3670: LD_INT 32
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3691: LD_ADDR_VAR 0 8
3695: PUSH
3696: LD_INT 22
3698: PUSH
3699: LD_INT 3
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: LD_INT 30
3708: PUSH
3709: LD_INT 4
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PPUSH
3720: CALL_OW 69
3724: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3725: LD_ADDR_VAR 0 10
3729: PUSH
3730: LD_INT 22
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PUSH
3740: LD_INT 30
3742: PUSH
3743: LD_INT 3
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: PPUSH
3754: CALL_OW 69
3758: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3759: LD_ADDR_VAR 0 9
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 3
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 30
3776: PUSH
3777: LD_INT 6
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PPUSH
3788: CALL_OW 69
3792: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3793: LD_ADDR_VAR 0 2
3797: PUSH
3798: LD_INT 22
3800: PUSH
3801: LD_INT 3
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: LD_INT 30
3810: PUSH
3811: LD_INT 1
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PPUSH
3822: CALL_OW 69
3826: PUSH
3827: FOR_IN
3828: IFFALSE 3872
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3830: LD_VAR 0 2
3834: PPUSH
3835: CALL_OW 274
3839: PPUSH
3840: LD_INT 1
3842: PPUSH
3843: LD_INT 1000
3845: PPUSH
3846: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3850: LD_VAR 0 2
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 2
3862: PPUSH
3863: LD_INT 300
3865: PPUSH
3866: CALL_OW 277
// end ;
3870: GO 3827
3872: POP
3873: POP
// uc_side := 3 ;
3874: LD_ADDR_OWVAR 20
3878: PUSH
3879: LD_INT 3
3881: ST_TO_ADDR
// uc_nation := 3 ;
3882: LD_ADDR_OWVAR 21
3886: PUSH
3887: LD_INT 3
3889: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3890: LD_ADDR_VAR 0 11
3894: PUSH
3895: LD_INT 2
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: LD_INT 4
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: PUSH
3913: LD_OWVAR 67
3917: ARRAY
3918: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3919: LD_ADDR_EXP 52
3923: PUSH
3924: LD_STRING Pokryshkin
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: LD_STRING 
3932: PPUSH
3933: CALL 40548 0 3
3937: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3938: LD_EXP 52
3942: PPUSH
3943: LD_INT 63
3945: PPUSH
3946: LD_INT 21
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3956: LD_EXP 52
3960: PPUSH
3961: CALL_OW 140
// InitHc ;
3965: CALL_OW 19
// for i in fac do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: LD_VAR 0 10
3978: PUSH
3979: FOR_IN
3980: IFFALSE 4033
// begin for j = 1 to 6 do
3982: LD_ADDR_VAR 0 3
3986: PUSH
3987: DOUBLE
3988: LD_INT 1
3990: DEC
3991: ST_TO_ADDR
3992: LD_INT 6
3994: PUSH
3995: FOR_TO
3996: IFFALSE 4029
// begin PrepareHuman ( false , 3 , skill ) ;
3998: LD_INT 0
4000: PPUSH
4001: LD_INT 3
4003: PPUSH
4004: LD_VAR 0 11
4008: PPUSH
4009: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4013: CALL_OW 44
4017: PPUSH
4018: LD_VAR 0 2
4022: PPUSH
4023: CALL_OW 52
// end ;
4027: GO 3995
4029: POP
4030: POP
// end ;
4031: GO 3979
4033: POP
4034: POP
// for i in lab do
4035: LD_ADDR_VAR 0 2
4039: PUSH
4040: LD_VAR 0 9
4044: PUSH
4045: FOR_IN
4046: IFFALSE 4079
// begin PrepareHuman ( false , 4 , skill ) ;
4048: LD_INT 0
4050: PPUSH
4051: LD_INT 4
4053: PPUSH
4054: LD_VAR 0 11
4058: PPUSH
4059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4063: CALL_OW 44
4067: PPUSH
4068: LD_VAR 0 2
4072: PPUSH
4073: CALL_OW 52
// end ;
4077: GO 4045
4079: POP
4080: POP
// for i in tw do
4081: LD_ADDR_VAR 0 2
4085: PUSH
4086: LD_VAR 0 7
4090: PUSH
4091: FOR_IN
4092: IFFALSE 4141
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
4094: LD_VAR 0 2
4098: PPUSH
4099: LD_INT 42
4101: PUSH
4102: LD_INT 43
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 1
4111: PPUSH
4112: LD_INT 2
4114: PPUSH
4115: CALL_OW 12
4119: ARRAY
4120: PPUSH
4121: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
4125: LD_VAR 0 11
4129: PPUSH
4130: LD_VAR 0 2
4134: PPUSH
4135: CALL 775 0 2
// end ;
4139: GO 4091
4141: POP
4142: POP
// for i in bar do
4143: LD_ADDR_VAR 0 2
4147: PUSH
4148: LD_VAR 0 8
4152: PUSH
4153: FOR_IN
4154: IFFALSE 4187
// begin PrepareHuman ( false , 1 , skill ) ;
4156: LD_INT 0
4158: PPUSH
4159: LD_INT 1
4161: PPUSH
4162: LD_VAR 0 11
4166: PPUSH
4167: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4171: CALL_OW 44
4175: PPUSH
4176: LD_VAR 0 2
4180: PPUSH
4181: CALL_OW 52
// end ;
4185: GO 4153
4187: POP
4188: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
4189: LD_ADDR_VAR 0 13
4193: PUSH
4194: LD_INT 100
4196: PUSH
4197: LD_INT 9
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 135
4206: PUSH
4207: LD_INT 60
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: LD_INT 41
4216: PUSH
4217: LD_INT 6
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: LD_INT 22
4226: PUSH
4227: LD_INT 9
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PUSH
4234: LD_INT 84
4236: PUSH
4237: LD_INT 14
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: ST_TO_ADDR
// vehicles := [ ] ;
4251: LD_ADDR_VAR 0 12
4255: PUSH
4256: EMPTY
4257: ST_TO_ADDR
// for i in spot_xy do
4258: LD_ADDR_VAR 0 2
4262: PUSH
4263: LD_VAR 0 13
4267: PUSH
4268: FOR_IN
4269: IFFALSE 4427
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
4271: LD_ADDR_VAR 0 6
4275: PUSH
4276: LD_INT 3
4278: PPUSH
4279: LD_INT 3
4281: PPUSH
4282: LD_INT 22
4284: PPUSH
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 1
4290: PPUSH
4291: LD_INT 42
4293: PUSH
4294: LD_INT 43
4296: PUSH
4297: LD_INT 44
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 3
4310: PPUSH
4311: CALL_OW 12
4315: ARRAY
4316: PPUSH
4317: LD_INT 100
4319: PPUSH
4320: CALL 497 0 7
4324: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
4325: LD_ADDR_VAR 0 12
4329: PUSH
4330: LD_VAR 0 12
4334: PPUSH
4335: LD_VAR 0 12
4339: PUSH
4340: LD_INT 1
4342: PLUS
4343: PPUSH
4344: LD_VAR 0 6
4348: PPUSH
4349: CALL_OW 2
4353: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4354: LD_VAR 0 6
4358: PPUSH
4359: LD_INT 3
4361: PPUSH
4362: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
4366: LD_VAR 0 6
4370: PPUSH
4371: LD_VAR 0 2
4375: PUSH
4376: LD_INT 1
4378: ARRAY
4379: PPUSH
4380: LD_VAR 0 2
4384: PUSH
4385: LD_INT 2
4387: ARRAY
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
4396: LD_INT 0
4398: PPUSH
4399: LD_INT 3
4401: PPUSH
4402: LD_VAR 0 11
4406: PPUSH
4407: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4411: CALL_OW 44
4415: PPUSH
4416: LD_VAR 0 6
4420: PPUSH
4421: CALL_OW 52
// end ;
4425: GO 4268
4427: POP
4428: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_INT 5
4441: PUSH
4442: LD_INT 7
4444: PUSH
4445: LD_INT 8
4447: PUSH
4448: LD_INT 9
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PUSH
4463: FOR_TO
4464: IFFALSE 4524
// begin PrepareHuman ( false , 1 , skill ) ;
4466: LD_INT 0
4468: PPUSH
4469: LD_INT 1
4471: PPUSH
4472: LD_VAR 0 11
4476: PPUSH
4477: CALL_OW 380
// un := CreateHuman ;
4481: LD_ADDR_VAR 0 5
4485: PUSH
4486: CALL_OW 44
4490: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4491: LD_VAR 0 5
4495: PPUSH
4496: LD_INT 11
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4506: LD_ADDR_EXP 55
4510: PUSH
4511: LD_EXP 55
4515: PUSH
4516: LD_VAR 0 5
4520: ADD
4521: ST_TO_ADDR
// end ;
4522: GO 4463
4524: POP
4525: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 2
4538: PUSH
4539: LD_INT 3
4541: PUSH
4542: LD_INT 4
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PUSH
4554: LD_OWVAR 67
4558: ARRAY
4559: PUSH
4560: FOR_TO
4561: IFFALSE 4621
// begin PrepareHuman ( false , 1 , skill ) ;
4563: LD_INT 0
4565: PPUSH
4566: LD_INT 1
4568: PPUSH
4569: LD_VAR 0 11
4573: PPUSH
4574: CALL_OW 380
// un := CreateHuman ;
4578: LD_ADDR_VAR 0 5
4582: PUSH
4583: CALL_OW 44
4587: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4588: LD_VAR 0 5
4592: PPUSH
4593: LD_INT 12
4595: PPUSH
4596: LD_INT 0
4598: PPUSH
4599: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4603: LD_ADDR_EXP 53
4607: PUSH
4608: LD_EXP 53
4612: PUSH
4613: LD_VAR 0 5
4617: ADD
4618: ST_TO_ADDR
// end ;
4619: GO 4560
4621: POP
4622: POP
// for i = 1 to 2 do
4623: LD_ADDR_VAR 0 2
4627: PUSH
4628: DOUBLE
4629: LD_INT 1
4631: DEC
4632: ST_TO_ADDR
4633: LD_INT 2
4635: PUSH
4636: FOR_TO
4637: IFFALSE 4730
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4639: LD_INT 1
4641: PPUSH
4642: LD_INT 1
4644: PPUSH
4645: LD_VAR 0 11
4649: PPUSH
4650: CALL_OW 380
// hc_attr := [ 8 + Difficulty , 8 + Difficulty ] ;
4654: LD_ADDR_OWVAR 29
4658: PUSH
4659: LD_INT 8
4661: PUSH
4662: LD_OWVAR 67
4666: PLUS
4667: PUSH
4668: LD_INT 8
4670: PUSH
4671: LD_OWVAR 67
4675: PLUS
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: ST_TO_ADDR
// un := CreateHuman ;
4681: LD_ADDR_VAR 0 5
4685: PUSH
4686: CALL_OW 44
4690: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4691: LD_VAR 0 5
4695: PPUSH
4696: LD_INT 39
4698: PPUSH
4699: LD_INT 12
4701: PPUSH
4702: LD_INT 3
4704: PPUSH
4705: LD_INT 0
4707: PPUSH
4708: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4712: LD_ADDR_EXP 54
4716: PUSH
4717: LD_EXP 54
4721: PUSH
4722: LD_VAR 0 5
4726: ADD
4727: ST_TO_ADDR
// end ;
4728: GO 4636
4730: POP
4731: POP
// InitHc ;
4732: CALL_OW 19
// for i = 1 to 3 do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_INT 3
4748: PUSH
4749: FOR_TO
4750: IFFALSE 4816
// begin PrepareHuman ( false , 1 , skill ) ;
4752: LD_INT 0
4754: PPUSH
4755: LD_INT 1
4757: PPUSH
4758: LD_VAR 0 11
4762: PPUSH
4763: CALL_OW 380
// un := CreateHuman ;
4767: LD_ADDR_VAR 0 5
4771: PUSH
4772: CALL_OW 44
4776: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4777: LD_VAR 0 5
4781: PPUSH
4782: LD_INT 180
4784: PPUSH
4785: LD_INT 11
4787: PPUSH
4788: LD_INT 4
4790: PPUSH
4791: LD_INT 0
4793: PPUSH
4794: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4798: LD_ADDR_EXP 58
4802: PUSH
4803: LD_EXP 58
4807: PUSH
4808: LD_VAR 0 5
4812: ADD
4813: ST_TO_ADDR
// end ;
4814: GO 4749
4816: POP
4817: POP
// ru_vehicles := vehicles ;
4818: LD_ADDR_EXP 56
4822: PUSH
4823: LD_VAR 0 12
4827: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4828: LD_ADDR_EXP 59
4832: PUSH
4833: LD_INT 131
4835: PUSH
4836: LD_INT 121
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 113
4845: PUSH
4846: LD_INT 90
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 93
4855: PUSH
4856: LD_INT 62
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 106
4870: PUSH
4871: LD_INT 54
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: LD_INT 120
4880: PUSH
4881: LD_INT 80
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 143
4890: PUSH
4891: LD_INT 120
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: PUSH
4903: LD_INT 154
4905: PUSH
4906: LD_INT 116
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PUSH
4913: LD_INT 140
4915: PUSH
4916: LD_INT 93
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PUSH
4923: LD_INT 130
4925: PUSH
4926: LD_INT 58
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: PUSH
4938: LD_INT 105
4940: PUSH
4941: LD_INT 106
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 134
4950: PUSH
4951: LD_INT 98
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 159
4960: PUSH
4961: LD_INT 113
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: ST_TO_ADDR
// if Difficulty = 1 then
4979: LD_OWVAR 67
4983: PUSH
4984: LD_INT 1
4986: EQUAL
4987: IFFALSE 4991
// exit ;
4989: GO 5046
// for i = 1 to Difficulty - 1 do
4991: LD_ADDR_VAR 0 2
4995: PUSH
4996: DOUBLE
4997: LD_INT 1
4999: DEC
5000: ST_TO_ADDR
5001: LD_OWVAR 67
5005: PUSH
5006: LD_INT 1
5008: MINUS
5009: PUSH
5010: FOR_TO
5011: IFFALSE 5044
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
5013: LD_ADDR_EXP 57
5017: PUSH
5018: LD_EXP 57
5022: PUSH
5023: LD_INT 22
5025: PUSH
5026: LD_INT 1
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: LD_INT 43
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: ADD
5041: ST_TO_ADDR
5042: GO 5010
5044: POP
5045: POP
// end ;
5046: LD_VAR 0 1
5050: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
5051: LD_INT 22
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 21
5063: PUSH
5064: LD_INT 2
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PPUSH
5075: CALL_OW 69
5079: IFFALSE 5173
5081: GO 5083
5083: DISABLE
5084: LD_INT 0
5086: PPUSH
5087: PPUSH
// begin enable ;
5088: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
5089: LD_ADDR_VAR 0 2
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_INT 3
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 2
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PPUSH
5118: CALL_OW 69
5122: ST_TO_ADDR
// if filter then
5123: LD_VAR 0 2
5127: IFFALSE 5173
// for i in filter do
5129: LD_ADDR_VAR 0 1
5133: PUSH
5134: LD_VAR 0 2
5138: PUSH
5139: FOR_IN
5140: IFFALSE 5171
// if GetFuel ( i ) < 20 then
5142: LD_VAR 0 1
5146: PPUSH
5147: CALL_OW 261
5151: PUSH
5152: LD_INT 20
5154: LESS
5155: IFFALSE 5169
// SetFuel ( i , 20 ) ;
5157: LD_VAR 0 1
5161: PPUSH
5162: LD_INT 20
5164: PPUSH
5165: CALL_OW 240
5169: GO 5139
5171: POP
5172: POP
// end ;
5173: PPOPN 2
5175: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
5176: LD_EXP 57
5180: IFFALSE 5399
5182: GO 5184
5184: DISABLE
5185: LD_INT 0
5187: PPUSH
5188: PPUSH
5189: PPUSH
// begin enable ;
5190: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
5191: LD_ADDR_VAR 0 2
5195: PUSH
5196: LD_INT 22
5198: PUSH
5199: LD_INT 3
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 30
5208: PUSH
5209: LD_INT 3
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PPUSH
5220: CALL_OW 69
5224: ST_TO_ADDR
// can_produce := [ ] ;
5225: LD_ADDR_VAR 0 3
5229: PUSH
5230: EMPTY
5231: ST_TO_ADDR
// if not fac then
5232: LD_VAR 0 2
5236: NOT
5237: IFFALSE 5242
// begin disable ;
5239: DISABLE
// exit ;
5240: GO 5399
// end ; for i in fac do
5242: LD_ADDR_VAR 0 1
5246: PUSH
5247: LD_VAR 0 2
5251: PUSH
5252: FOR_IN
5253: IFFALSE 5291
// if UnitsInside ( i ) then
5255: LD_VAR 0 1
5259: PPUSH
5260: CALL_OW 313
5264: IFFALSE 5289
// can_produce := Insert ( can_produce , 1 , i ) ;
5266: LD_ADDR_VAR 0 3
5270: PUSH
5271: LD_VAR 0 3
5275: PPUSH
5276: LD_INT 1
5278: PPUSH
5279: LD_VAR 0 1
5283: PPUSH
5284: CALL_OW 2
5288: ST_TO_ADDR
5289: GO 5252
5291: POP
5292: POP
// if not can_produce then
5293: LD_VAR 0 3
5297: NOT
5298: IFFALSE 5302
// exit ;
5300: GO 5399
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
5302: LD_VAR 0 3
5306: PUSH
5307: LD_INT 1
5309: PPUSH
5310: LD_VAR 0 3
5314: PPUSH
5315: CALL_OW 12
5319: ARRAY
5320: PPUSH
5321: LD_EXP 57
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PPUSH
5330: LD_EXP 57
5334: PUSH
5335: LD_INT 2
5337: ARRAY
5338: PPUSH
5339: LD_EXP 57
5343: PUSH
5344: LD_INT 3
5346: ARRAY
5347: PPUSH
5348: LD_EXP 57
5352: PUSH
5353: LD_INT 4
5355: ARRAY
5356: PPUSH
5357: CALL_OW 125
// for i = 1 to 4 do
5361: LD_ADDR_VAR 0 1
5365: PUSH
5366: DOUBLE
5367: LD_INT 1
5369: DEC
5370: ST_TO_ADDR
5371: LD_INT 4
5373: PUSH
5374: FOR_TO
5375: IFFALSE 5397
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
5377: LD_ADDR_EXP 57
5381: PUSH
5382: LD_EXP 57
5386: PPUSH
5387: LD_INT 1
5389: PPUSH
5390: CALL_OW 3
5394: ST_TO_ADDR
5395: GO 5374
5397: POP
5398: POP
// end ;
5399: PPOPN 3
5401: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
5402: LD_INT 0
5404: PPUSH
5405: PPUSH
5406: PPUSH
// for i = 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
5407: LD_ADDR_VAR 0 2
5411: PUSH
5412: DOUBLE
5413: LD_INT 1
5415: DEC
5416: ST_TO_ADDR
5417: LD_INT 2
5419: PUSH
5420: LD_INT 3
5422: PUSH
5423: LD_INT 3
5425: PUSH
5426: LD_INT 3
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: LD_OWVAR 67
5439: ARRAY
5440: PUSH
5441: FOR_TO
5442: IFFALSE 5591
// begin PrepareHuman ( false , 3 , 3 ) ;
5444: LD_INT 0
5446: PPUSH
5447: LD_INT 3
5449: PPUSH
5450: LD_INT 3
5452: PPUSH
5453: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
5457: LD_ADDR_VAR 0 3
5461: PUSH
5462: LD_INT 3
5464: PPUSH
5465: LD_INT 3
5467: PPUSH
5468: LD_INT 22
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: LD_INT 1
5476: PPUSH
5477: LD_INT 43
5479: PUSH
5480: LD_INT 42
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 1
5489: PPUSH
5490: LD_INT 2
5492: PPUSH
5493: CALL_OW 12
5497: ARRAY
5498: PPUSH
5499: LD_INT 70
5501: PPUSH
5502: CALL 497 0 7
5506: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5507: LD_VAR 0 3
5511: PPUSH
5512: LD_INT 4
5514: PPUSH
5515: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5519: LD_VAR 0 3
5523: PPUSH
5524: LD_INT 229
5526: PPUSH
5527: LD_INT 44
5529: PPUSH
5530: LD_INT 0
5532: PPUSH
5533: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5537: CALL_OW 44
5541: PPUSH
5542: LD_VAR 0 3
5546: PPUSH
5547: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5551: LD_ADDR_EXP 56
5555: PUSH
5556: LD_EXP 56
5560: PUSH
5561: LD_VAR 0 3
5565: ADD
5566: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5567: LD_VAR 0 3
5571: PPUSH
5572: LD_INT 191
5574: PPUSH
5575: LD_INT 32
5577: PPUSH
5578: CALL_OW 111
// Wait ( 0 0$02 ) ;
5582: LD_INT 70
5584: PPUSH
5585: CALL_OW 67
// end ;
5589: GO 5441
5591: POP
5592: POP
// end ;
5593: LD_VAR 0 1
5597: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5598: LD_EXP 31
5602: PUSH
5603: LD_EXP 56
5607: AND
5608: IFFALSE 5782
5610: GO 5612
5612: DISABLE
5613: LD_INT 0
5615: PPUSH
5616: PPUSH
5617: PPUSH
// begin wait ( 0 0$50 ) ;
5618: LD_INT 1750
5620: PPUSH
5621: CALL_OW 67
// tmp := ru_vehicles ;
5625: LD_ADDR_VAR 0 3
5629: PUSH
5630: LD_EXP 56
5634: ST_TO_ADDR
// if not tmp then
5635: LD_VAR 0 3
5639: NOT
5640: IFFALSE 5644
// exit ;
5642: GO 5782
// repeat wait ( 0 0$1 ) ;
5644: LD_INT 35
5646: PPUSH
5647: CALL_OW 67
// for i in tmp do
5651: LD_ADDR_VAR 0 1
5655: PUSH
5656: LD_VAR 0 3
5660: PUSH
5661: FOR_IN
5662: IFFALSE 5773
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5664: LD_ADDR_VAR 0 2
5668: PUSH
5669: LD_INT 22
5671: PUSH
5672: LD_INT 1
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: LD_VAR 0 1
5683: PPUSH
5684: CALL_OW 74
5688: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5689: LD_VAR 0 1
5693: PPUSH
5694: LD_VAR 0 2
5698: PPUSH
5699: CALL_OW 296
5703: PUSH
5704: LD_INT 10
5706: GREATER
5707: IFFALSE 5726
// ComAgressiveMove ( i , 69 , 101 ) else
5709: LD_VAR 0 1
5713: PPUSH
5714: LD_INT 69
5716: PPUSH
5717: LD_INT 101
5719: PPUSH
5720: CALL_OW 114
5724: GO 5740
// ComAttackUnit ( i , enemy ) ;
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: CALL_OW 115
// if GetLives ( i ) < 250 then
5740: LD_VAR 0 1
5744: PPUSH
5745: CALL_OW 256
5749: PUSH
5750: LD_INT 250
5752: LESS
5753: IFFALSE 5771
// tmp := tmp diff i ;
5755: LD_ADDR_VAR 0 3
5759: PUSH
5760: LD_VAR 0 3
5764: PUSH
5765: LD_VAR 0 1
5769: DIFF
5770: ST_TO_ADDR
// end ;
5771: GO 5661
5773: POP
5774: POP
// until not tmp ;
5775: LD_VAR 0 3
5779: NOT
5780: IFFALSE 5644
// end ; end_of_file
5782: PPOPN 3
5784: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
// InGameOn ;
5794: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5798: LD_EXP 37
5802: PPUSH
5803: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5807: LD_EXP 37
5811: PPUSH
5812: LD_EXP 44
5816: PPUSH
5817: CALL_OW 119
// if Bierezov then
5821: LD_EXP 45
5825: IFFALSE 5841
// ComTurnUnit ( Bierezov , Cornel ) ;
5827: LD_EXP 45
5831: PPUSH
5832: LD_EXP 44
5836: PPUSH
5837: CALL_OW 119
// for i in jmm_units do
5841: LD_ADDR_VAR 0 2
5845: PUSH
5846: LD_EXP 4
5850: PUSH
5851: FOR_IN
5852: IFFALSE 5870
// ComTurnUnit ( i , Cornel ) ;
5854: LD_VAR 0 2
5858: PPUSH
5859: LD_EXP 44
5863: PPUSH
5864: CALL_OW 119
5868: GO 5851
5870: POP
5871: POP
// units := cornel_units union Cornel ;
5872: LD_ADDR_VAR 0 3
5876: PUSH
5877: LD_EXP 6
5881: PUSH
5882: LD_EXP 44
5886: UNION
5887: ST_TO_ADDR
// repeat wait ( 1 ) ;
5888: LD_INT 1
5890: PPUSH
5891: CALL_OW 67
// for i in units do
5895: LD_ADDR_VAR 0 2
5899: PUSH
5900: LD_VAR 0 3
5904: PUSH
5905: FOR_IN
5906: IFFALSE 5939
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5908: LD_VAR 0 2
5912: PPUSH
5913: LD_EXP 37
5917: PPUSH
5918: CALL_OW 250
5922: PPUSH
5923: LD_EXP 37
5927: PPUSH
5928: CALL_OW 251
5932: PPUSH
5933: CALL_OW 111
5937: GO 5905
5939: POP
5940: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5941: LD_VAR 0 3
5945: PPUSH
5946: LD_INT 92
5948: PUSH
5949: LD_EXP 37
5953: PPUSH
5954: CALL_OW 250
5958: PUSH
5959: LD_EXP 37
5963: PPUSH
5964: CALL_OW 251
5968: PUSH
5969: LD_INT 10
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: PPUSH
5978: CALL_OW 72
5982: PUSH
5983: LD_VAR 0 3
5987: EQUAL
5988: IFFALSE 5888
// for i in units do
5990: LD_ADDR_VAR 0 2
5994: PUSH
5995: LD_VAR 0 3
5999: PUSH
6000: FOR_IN
6001: IFFALSE 6019
// ComTurnUnit ( i , JMM ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_EXP 37
6012: PPUSH
6013: CALL_OW 119
6017: GO 6000
6019: POP
6020: POP
// ComTurnUnit ( Cornel , JMM ) ;
6021: LD_EXP 44
6025: PPUSH
6026: LD_EXP 37
6030: PPUSH
6031: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
6035: LD_EXP 37
6039: PPUSH
6040: LD_STRING D1-JMM-1
6042: PPUSH
6043: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
6047: LD_EXP 44
6051: PPUSH
6052: LD_STRING D1-Corn-1
6054: PPUSH
6055: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
6059: LD_EXP 37
6063: PPUSH
6064: LD_EXP 44
6068: PPUSH
6069: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
6073: LD_EXP 44
6077: PPUSH
6078: LD_EXP 37
6082: PPUSH
6083: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
6087: LD_INT 35
6089: PPUSH
6090: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
6094: LD_EXP 37
6098: PPUSH
6099: LD_EXP 44
6103: PPUSH
6104: CALL_OW 296
6108: PUSH
6109: LD_INT 6
6111: LESS
6112: IFFALSE 6087
// ChangeSideFog ( 4 , 1 ) ;
6114: LD_INT 4
6116: PPUSH
6117: LD_INT 1
6119: PPUSH
6120: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
6124: LD_EXP 37
6128: PPUSH
6129: LD_EXP 44
6133: PPUSH
6134: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6138: LD_EXP 44
6142: PPUSH
6143: LD_EXP 37
6147: PPUSH
6148: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
6152: LD_EXP 37
6156: PPUSH
6157: LD_STRING D1-JMM-2
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
6164: LD_EXP 37
6168: PPUSH
6169: LD_STRING D1-JMM-2a
6171: PPUSH
6172: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
6176: LD_EXP 44
6180: PPUSH
6181: LD_STRING D1-Corn-2
6183: PPUSH
6184: CALL_OW 88
// if bierezov_exist or debug then
6188: LD_EXP 7
6192: PUSH
6193: LD_EXP 1
6197: OR
6198: IFFALSE 6439
// begin ComTurnUnit ( Cornel , Bierezov ) ;
6200: LD_EXP 44
6204: PPUSH
6205: LD_EXP 45
6209: PPUSH
6210: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
6214: LD_INT 10
6216: PPUSH
6217: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
6221: LD_EXP 44
6225: PPUSH
6226: LD_STRING D1a-Corn-1
6228: PPUSH
6229: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
6233: LD_EXP 37
6237: PPUSH
6238: LD_EXP 45
6242: PPUSH
6243: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
6247: LD_EXP 45
6251: PPUSH
6252: LD_EXP 37
6256: PPUSH
6257: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
6261: LD_EXP 37
6265: PPUSH
6266: LD_STRING D1a-JMM-1
6268: PPUSH
6269: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
6273: LD_EXP 37
6277: PPUSH
6278: LD_EXP 44
6282: PPUSH
6283: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6287: LD_EXP 44
6291: PPUSH
6292: LD_EXP 37
6296: PPUSH
6297: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
6301: LD_EXP 44
6305: PPUSH
6306: LD_STRING D1a-Corn-2
6308: PPUSH
6309: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
6313: LD_EXP 37
6317: PPUSH
6318: LD_STRING D1a-JMM-2
6320: PPUSH
6321: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
6325: LD_EXP 44
6329: PPUSH
6330: LD_STRING D1a-Corn-3
6332: PPUSH
6333: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
6337: LD_EXP 37
6341: PPUSH
6342: LD_STRING D1a-JMM-3
6344: PPUSH
6345: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
6349: LD_EXP 44
6353: PPUSH
6354: LD_STRING D1a-Corn-4
6356: PPUSH
6357: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
6361: LD_EXP 37
6365: PPUSH
6366: LD_STRING D1a-JMM-4
6368: PPUSH
6369: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
6373: LD_EXP 44
6377: PPUSH
6378: LD_STRING D1a-Corn-5
6380: PPUSH
6381: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
6385: LD_EXP 45
6389: PPUSH
6390: LD_EXP 44
6394: PPUSH
6395: CALL_OW 250
6399: PPUSH
6400: LD_EXP 44
6404: PPUSH
6405: CALL_OW 251
6409: PUSH
6410: LD_INT 2
6412: MINUS
6413: PPUSH
6414: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
6418: LD_EXP 45
6422: PPUSH
6423: LD_EXP 44
6427: PPUSH
6428: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
6432: LD_INT 10
6434: PPUSH
6435: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
6439: LD_EXP 37
6443: PPUSH
6444: LD_STRING D1b-JMM-1
6446: PPUSH
6447: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
6451: LD_EXP 44
6455: PPUSH
6456: LD_STRING D1b-Corn-1
6458: PPUSH
6459: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6463: LD_EXP 37
6467: PPUSH
6468: LD_STRING D1b-JMM-2
6470: PPUSH
6471: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6475: LD_EXP 44
6479: PPUSH
6480: LD_STRING D1b-Corn-2
6482: PPUSH
6483: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6487: LD_EXP 37
6491: PPUSH
6492: LD_STRING D1b-JMM-3
6494: PPUSH
6495: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6499: LD_INT 10
6501: PPUSH
6502: CALL_OW 67
// SayRadioNoFace ( Powell , D1b-Pow-3 ) ;
6506: LD_EXP 46
6510: PPUSH
6511: LD_STRING D1b-Pow-3
6513: PPUSH
6514: CALL_OW 586
// Say ( JMM , D1b-JMM-4 ) ;
6518: LD_EXP 37
6522: PPUSH
6523: LD_STRING D1b-JMM-4
6525: PPUSH
6526: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6530: LD_EXP 44
6534: PPUSH
6535: LD_STRING D1b-Corn-4
6537: PPUSH
6538: CALL_OW 88
// if Khatam then
6542: LD_EXP 41
6546: IFFALSE 6562
// Say ( Khatam , D1b-Khat-4 ) else
6548: LD_EXP 41
6552: PPUSH
6553: LD_STRING D1b-Khat-4
6555: PPUSH
6556: CALL_OW 88
6560: GO 6598
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6562: LD_EXP 6
6566: PPUSH
6567: LD_INT 26
6569: PUSH
6570: LD_INT 1
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PPUSH
6577: CALL_OW 72
6581: PUSH
6582: LD_EXP 44
6586: PUSH
6587: EMPTY
6588: LIST
6589: DIFF
6590: PPUSH
6591: LD_STRING D1b-Sol1-4
6593: PPUSH
6594: CALL 585 0 2
// if Cyrus then
6598: LD_EXP 39
6602: IFFALSE 6616
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6604: LD_EXP 39
6608: PPUSH
6609: LD_STRING D1b-Cyrus-4
6611: PPUSH
6612: CALL_OW 88
// if Lisa then
6616: LD_EXP 40
6620: IFFALSE 6678
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6622: LD_EXP 40
6626: PPUSH
6627: LD_STRING D1b-Lisa-4
6629: PPUSH
6630: CALL_OW 88
// if Cyrus then
6634: LD_EXP 39
6638: IFFALSE 6678
// begin if not IsInUnit ( Cyrus ) then
6640: LD_EXP 39
6644: PPUSH
6645: CALL_OW 310
6649: NOT
6650: IFFALSE 6666
// ComTurnUnit ( Cyrus , Lisa ) ;
6652: LD_EXP 39
6656: PPUSH
6657: LD_EXP 40
6661: PPUSH
6662: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6666: LD_EXP 39
6670: PPUSH
6671: LD_STRING D1b-Cyrus-5
6673: PPUSH
6674: CALL_OW 88
// end ; end ; SelectGroup ;
6678: CALL 3052 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6682: LD_EXP 37
6686: PPUSH
6687: LD_STRING D1d-JMM-1
6689: PPUSH
6690: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6694: LD_EXP 44
6698: PPUSH
6699: LD_STRING D1d-Corn-1
6701: PPUSH
6702: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6706: LD_ADDR_VAR 0 2
6710: PUSH
6711: LD_EXP 4
6715: PUSH
6716: LD_EXP 6
6720: ADD
6721: PUSH
6722: LD_EXP 37
6726: ADD
6727: PUSH
6728: FOR_IN
6729: IFFALSE 6742
// ComHold ( i ) ;
6731: LD_VAR 0 2
6735: PPUSH
6736: CALL_OW 140
6740: GO 6728
6742: POP
6743: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6744: LD_ADDR_VAR 0 4
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 1
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 21
6761: PUSH
6762: LD_INT 2
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PPUSH
6773: CALL_OW 69
6777: ST_TO_ADDR
// if vehicles then
6778: LD_VAR 0 4
6782: IFFALSE 7120
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6784: LD_EXP 6
6788: PPUSH
6789: LD_INT 55
6791: PUSH
6792: EMPTY
6793: LIST
6794: PPUSH
6795: CALL_OW 72
6799: IFFALSE 6838
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6801: LD_ADDR_VAR 0 2
6805: PUSH
6806: LD_EXP 6
6810: PPUSH
6811: LD_INT 55
6813: PUSH
6814: EMPTY
6815: LIST
6816: PPUSH
6817: CALL_OW 72
6821: PUSH
6822: FOR_IN
6823: IFFALSE 6836
// ComExitVehicle ( i ) ;
6825: LD_VAR 0 2
6829: PPUSH
6830: CALL_OW 121
6834: GO 6822
6836: POP
6837: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6838: LD_ADDR_VAR 0 5
6842: PUSH
6843: LD_VAR 0 4
6847: PPUSH
6848: LD_INT 34
6850: PUSH
6851: LD_INT 51
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 72
6862: ST_TO_ADDR
// if cargos then
6863: LD_VAR 0 5
6867: IFFALSE 7050
// begin vehicles := cargos ;
6869: LD_ADDR_VAR 0 4
6873: PUSH
6874: LD_VAR 0 5
6878: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6879: LD_ADDR_VAR 0 6
6883: PUSH
6884: LD_STRING 02_resources_4
6886: PPUSH
6887: LD_INT 0
6889: PPUSH
6890: CALL_OW 30
6894: ST_TO_ADDR
// if debug and not resources then
6895: LD_EXP 1
6899: PUSH
6900: LD_VAR 0 6
6904: NOT
6905: AND
6906: IFFALSE 6916
// resources := 160 ;
6908: LD_ADDR_VAR 0 6
6912: PUSH
6913: LD_INT 160
6915: ST_TO_ADDR
// if resources mod 10 then
6916: LD_VAR 0 6
6920: PUSH
6921: LD_INT 10
6923: MOD
6924: IFFALSE 6946
// resources := resources - resources mod 10 ;
6926: LD_ADDR_VAR 0 6
6930: PUSH
6931: LD_VAR 0 6
6935: PUSH
6936: LD_VAR 0 6
6940: PUSH
6941: LD_INT 10
6943: MOD
6944: MINUS
6945: ST_TO_ADDR
// if resources then
6946: LD_VAR 0 6
6950: IFFALSE 7050
// for i in cargos do
6952: LD_ADDR_VAR 0 2
6956: PUSH
6957: LD_VAR 0 5
6961: PUSH
6962: FOR_IN
6963: IFFALSE 7048
// begin if resources < 100 then
6965: LD_VAR 0 6
6969: PUSH
6970: LD_INT 100
6972: LESS
6973: IFFALSE 6995
// begin cargo := resources ;
6975: LD_ADDR_VAR 0 7
6979: PUSH
6980: LD_VAR 0 6
6984: ST_TO_ADDR
// resources := 0 ;
6985: LD_ADDR_VAR 0 6
6989: PUSH
6990: LD_INT 0
6992: ST_TO_ADDR
// end else
6993: GO 7017
// begin cargo := 100 ;
6995: LD_ADDR_VAR 0 7
6999: PUSH
7000: LD_INT 100
7002: ST_TO_ADDR
// resources := resources - 100 ;
7003: LD_ADDR_VAR 0 6
7007: PUSH
7008: LD_VAR 0 6
7012: PUSH
7013: LD_INT 100
7015: MINUS
7016: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
7017: LD_VAR 0 2
7021: PPUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_VAR 0 7
7029: PPUSH
7030: CALL_OW 290
// if resources = 0 then
7034: LD_VAR 0 6
7038: PUSH
7039: LD_INT 0
7041: EQUAL
7042: IFFALSE 7046
// break ;
7044: GO 7048
// end ;
7046: GO 6962
7048: POP
7049: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
7050: LD_VAR 0 4
7054: PUSH
7055: LD_INT 1
7057: ARRAY
7058: PPUSH
7059: CALL_OW 311
7063: PPUSH
7064: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
7068: LD_VAR 0 4
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: LD_INT 4
7079: PPUSH
7080: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
7084: LD_EXP 44
7088: PPUSH
7089: LD_VAR 0 4
7093: PUSH
7094: LD_INT 1
7096: ARRAY
7097: PPUSH
7098: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
7102: LD_INT 35
7104: PPUSH
7105: CALL_OW 67
// until IsInUnit ( Cornel ) ;
7109: LD_EXP 44
7113: PPUSH
7114: CALL_OW 310
7118: IFFALSE 7102
// end ; InGameOff ;
7120: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
7124: LD_STRING M1
7126: PPUSH
7127: CALL_OW 337
// SaveForQuickRestart ;
7131: CALL_OW 22
// cornel_active := true ;
7135: LD_ADDR_EXP 8
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// end ;
7143: LD_VAR 0 1
7147: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
7148: LD_EXP 37
7152: PPUSH
7153: LD_EXP 47
7157: PPUSH
7158: CALL_OW 296
7162: PUSH
7163: LD_INT 10
7165: LESS
7166: IFFALSE 8549
7168: GO 7170
7170: DISABLE
7171: LD_INT 0
7173: PPUSH
7174: PPUSH
7175: PPUSH
7176: PPUSH
7177: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
7178: LD_ADDR_VAR 0 2
7182: PUSH
7183: LD_INT 89
7185: PUSH
7186: LD_INT 34
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 138
7195: PUSH
7196: LD_INT 63
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 196
7205: PUSH
7206: LD_INT 84
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 135
7215: PUSH
7216: LD_INT 52
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 103
7225: PUSH
7226: LD_INT 39
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: LD_INT 58
7235: PUSH
7236: LD_INT 30
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 38
7245: PUSH
7246: LD_INT 51
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: ST_TO_ADDR
// Video ( true ) ;
7262: LD_INT 1
7264: PPUSH
7265: CALL 78315 0 1
// if jmm_units then
7269: LD_EXP 4
7273: IFFALSE 7349
// for i in jmm_units do
7275: LD_ADDR_VAR 0 1
7279: PUSH
7280: LD_EXP 4
7284: PUSH
7285: FOR_IN
7286: IFFALSE 7347
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_EXP 37
7297: PPUSH
7298: CALL_OW 296
7302: PUSH
7303: LD_INT 10
7305: LESS
7306: PUSH
7307: LD_VAR 0 1
7311: PPUSH
7312: CALL_OW 310
7316: NOT
7317: AND
7318: IFFALSE 7336
// ComTurnUnit ( i , JMM ) else
7320: LD_VAR 0 1
7324: PPUSH
7325: LD_EXP 37
7329: PPUSH
7330: CALL_OW 119
7334: GO 7345
// ComHold ( i ) ;
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 140
// end ;
7345: GO 7285
7347: POP
7348: POP
// if IsInUnit ( JMM ) then
7349: LD_EXP 37
7353: PPUSH
7354: CALL_OW 310
7358: IFFALSE 7383
// begin ComExitVehicle ( JMM ) ;
7360: LD_EXP 37
7364: PPUSH
7365: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
7369: LD_EXP 37
7373: PPUSH
7374: LD_EXP 47
7378: PPUSH
7379: CALL_OW 172
// end ; Wait ( 10 ) ;
7383: LD_INT 10
7385: PPUSH
7386: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
7390: LD_EXP 37
7394: PPUSH
7395: LD_EXP 47
7399: PPUSH
7400: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
7404: LD_INT 35
7406: PPUSH
7407: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
7411: LD_EXP 37
7415: PPUSH
7416: LD_EXP 47
7420: PPUSH
7421: CALL_OW 296
7425: PUSH
7426: LD_INT 6
7428: LESS
7429: IFFALSE 7404
// ComTurnUnit ( JMM , Lynch ) ;
7431: LD_EXP 37
7435: PPUSH
7436: LD_EXP 47
7440: PPUSH
7441: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
7445: LD_ADDR_VAR 0 1
7449: PUSH
7450: LD_EXP 47
7454: PUSH
7455: LD_EXP 48
7459: PUSH
7460: LD_EXP 49
7464: PUSH
7465: LD_EXP 50
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: PUSH
7476: FOR_IN
7477: IFFALSE 7495
// ComTurnUnit ( i , JMM ) ;
7479: LD_VAR 0 1
7483: PPUSH
7484: LD_EXP 37
7488: PPUSH
7489: CALL_OW 119
7493: GO 7476
7495: POP
7496: POP
// Wait ( 0 0$0.3 ) ;
7497: LD_INT 10
7499: PPUSH
7500: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7504: LD_EXP 37
7508: PPUSH
7509: LD_STRING D2-JMM-1
7511: PPUSH
7512: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7516: LD_EXP 47
7520: PPUSH
7521: LD_STRING D2-Sol1-1
7523: PPUSH
7524: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7528: LD_EXP 37
7532: PPUSH
7533: LD_STRING D2-JMM-2
7535: PPUSH
7536: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7540: LD_EXP 47
7544: PPUSH
7545: LD_STRING D2-Sol1-2
7547: PPUSH
7548: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7552: LD_EXP 37
7556: PPUSH
7557: LD_STRING D2-JMM-3
7559: PPUSH
7560: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7564: LD_EXP 47
7568: PPUSH
7569: LD_STRING D2-Sol1-3
7571: PPUSH
7572: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_INT 22
7583: PUSH
7584: LD_INT 8
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PPUSH
7591: CALL_OW 69
7595: PUSH
7596: FOR_IN
7597: IFFALSE 7613
// SetSide ( i , 1 ) ;
7599: LD_VAR 0 1
7603: PPUSH
7604: LD_INT 1
7606: PPUSH
7607: CALL_OW 235
7611: GO 7596
7613: POP
7614: POP
// Say ( JMM , D2-JMM-4 ) ;
7615: LD_EXP 37
7619: PPUSH
7620: LD_STRING D2-JMM-4
7622: PPUSH
7623: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7627: LD_INT 1
7629: PPUSH
7630: LD_INT 5
7632: PPUSH
7633: CALL_OW 332
// for i = 1 to points do
7637: LD_ADDR_VAR 0 1
7641: PUSH
7642: DOUBLE
7643: LD_INT 1
7645: DEC
7646: ST_TO_ADDR
7647: LD_VAR 0 2
7651: PUSH
7652: FOR_TO
7653: IFFALSE 7828
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7655: LD_VAR 0 2
7659: PUSH
7660: LD_VAR 0 1
7664: ARRAY
7665: PUSH
7666: LD_INT 1
7668: ARRAY
7669: PPUSH
7670: LD_VAR 0 2
7674: PUSH
7675: LD_VAR 0 1
7679: ARRAY
7680: PUSH
7681: LD_INT 2
7683: ARRAY
7684: PPUSH
7685: CALL_OW 84
// if i = 1 then
7689: LD_VAR 0 1
7693: PUSH
7694: LD_INT 1
7696: EQUAL
7697: IFFALSE 7711
// Say ( Lynch , D2-Sol1-4 ) ;
7699: LD_EXP 47
7703: PPUSH
7704: LD_STRING D2-Sol1-4
7706: PPUSH
7707: CALL_OW 88
// if i = 2 then
7711: LD_VAR 0 1
7715: PUSH
7716: LD_INT 2
7718: EQUAL
7719: IFFALSE 7733
// Say ( JMM , D2-JMM-5 ) ;
7721: LD_EXP 37
7725: PPUSH
7726: LD_STRING D2-JMM-5
7728: PPUSH
7729: CALL_OW 88
// if i = 4 then
7733: LD_VAR 0 1
7737: PUSH
7738: LD_INT 4
7740: EQUAL
7741: IFFALSE 7765
// begin RevealFogArea ( 1 , troopsArea ) ;
7743: LD_INT 1
7745: PPUSH
7746: LD_INT 6
7748: PPUSH
7749: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7753: LD_EXP 47
7757: PPUSH
7758: LD_STRING D2-Sol1-5
7760: PPUSH
7761: CALL_OW 88
// end ; if i = 5 then
7765: LD_VAR 0 1
7769: PUSH
7770: LD_INT 5
7772: EQUAL
7773: IFFALSE 7787
// Say ( JMM , D2-JMM-6 ) ;
7775: LD_EXP 37
7779: PPUSH
7780: LD_STRING D2-JMM-6
7782: PPUSH
7783: CALL_OW 88
// if i = 7 then
7787: LD_VAR 0 1
7791: PUSH
7792: LD_INT 7
7794: EQUAL
7795: IFFALSE 7819
// begin RevealFogArea ( 1 , forestArea ) ;
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 7
7802: PPUSH
7803: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7807: LD_EXP 47
7811: PPUSH
7812: LD_STRING D2-Sol1-6
7814: PPUSH
7815: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7819: LD_INT 46
7821: PPUSH
7822: CALL_OW 67
// end ;
7826: GO 7652
7828: POP
7829: POP
// CenterNowOnUnits ( JMM ) ;
7830: LD_EXP 37
7834: PPUSH
7835: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7839: LD_EXP 37
7843: PPUSH
7844: LD_STRING D2-JMM-7
7846: PPUSH
7847: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7851: LD_EXP 47
7855: PPUSH
7856: LD_STRING D2-Sol1-7
7858: PPUSH
7859: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7863: LD_EXP 37
7867: PPUSH
7868: LD_STRING D2-JMM-8
7870: PPUSH
7871: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7875: LD_ADDR_VAR 0 4
7879: PUSH
7880: LD_INT 22
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 30
7892: PUSH
7893: LD_INT 31
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 69
7908: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7909: LD_EXP 47
7913: PPUSH
7914: LD_VAR 0 4
7918: PUSH
7919: LD_INT 1
7921: ARRAY
7922: PPUSH
7923: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7927: LD_INT 65
7929: PPUSH
7930: LD_INT 101
7932: PPUSH
7933: CALL_OW 428
7937: IFFALSE 7960
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7939: LD_INT 65
7941: PPUSH
7942: LD_INT 101
7944: PPUSH
7945: CALL_OW 428
7949: PPUSH
7950: LD_INT 75
7952: PPUSH
7953: LD_INT 100
7955: PPUSH
7956: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7960: LD_INT 66
7962: PPUSH
7963: LD_INT 103
7965: PPUSH
7966: CALL_OW 428
7970: IFFALSE 7993
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7972: LD_INT 66
7974: PPUSH
7975: LD_INT 103
7977: PPUSH
7978: CALL_OW 428
7982: PPUSH
7983: LD_INT 75
7985: PPUSH
7986: LD_INT 100
7988: PPUSH
7989: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7993: LD_ADDR_VAR 0 5
7997: PUSH
7998: LD_INT 22
8000: PUSH
8001: LD_INT 1
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 21
8010: PUSH
8011: LD_INT 2
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: LD_INT 91
8020: PUSH
8021: LD_EXP 37
8025: PUSH
8026: LD_INT 7
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: PPUSH
8039: CALL_OW 69
8043: ST_TO_ADDR
// if tmp then
8044: LD_VAR 0 5
8048: IFFALSE 8065
// ComMoveXY ( tmp , 75 , 100 ) ;
8050: LD_VAR 0 5
8054: PPUSH
8055: LD_INT 75
8057: PPUSH
8058: LD_INT 100
8060: PPUSH
8061: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: LD_EXP 4
8074: PPUSH
8075: LD_INT 25
8077: PUSH
8078: LD_INT 1
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PPUSH
8085: CALL_OW 72
8089: PPUSH
8090: LD_EXP 37
8094: PPUSH
8095: CALL_OW 74
8099: ST_TO_ADDR
// if sol then
8100: LD_VAR 0 3
8104: IFFALSE 8164
// if GetDistUnits ( JMM , sol ) < 10 then
8106: LD_EXP 37
8110: PPUSH
8111: LD_VAR 0 3
8115: PPUSH
8116: CALL_OW 296
8120: PUSH
8121: LD_INT 10
8123: LESS
8124: IFFALSE 8164
// begin if IsInUnit ( sol ) then
8126: LD_VAR 0 3
8130: PPUSH
8131: CALL_OW 310
8135: IFFALSE 8146
// ComExitVehicle ( sol ) ;
8137: LD_VAR 0 3
8141: PPUSH
8142: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
8146: LD_VAR 0 3
8150: PPUSH
8151: LD_VAR 0 4
8155: PUSH
8156: LD_INT 2
8158: ARRAY
8159: PPUSH
8160: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
8164: LD_INT 10
8166: PPUSH
8167: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
8171: LD_EXP 37
8175: PPUSH
8176: LD_INT 65
8178: PPUSH
8179: LD_INT 101
8181: PPUSH
8182: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
8186: LD_EXP 37
8190: PPUSH
8191: LD_INT 63
8193: PPUSH
8194: LD_INT 100
8196: PPUSH
8197: CALL_OW 178
// tmp := 0 0$0 ;
8201: LD_ADDR_VAR 0 5
8205: PUSH
8206: LD_INT 0
8208: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8209: LD_INT 35
8211: PPUSH
8212: CALL_OW 67
// tmp := tmp + 0 0$1 ;
8216: LD_ADDR_VAR 0 5
8220: PUSH
8221: LD_VAR 0 5
8225: PUSH
8226: LD_INT 35
8228: PLUS
8229: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
8230: LD_EXP 37
8234: PPUSH
8235: LD_INT 65
8237: PPUSH
8238: LD_INT 101
8240: PPUSH
8241: CALL_OW 307
8245: PUSH
8246: LD_VAR 0 5
8250: PUSH
8251: LD_INT 175
8253: GREATER
8254: OR
8255: IFFALSE 8209
// Say ( JMM , D2a-JMM-1 ) ;
8257: LD_EXP 37
8261: PPUSH
8262: LD_STRING D2a-JMM-1
8264: PPUSH
8265: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
8269: LD_EXP 48
8273: PPUSH
8274: LD_INT 66
8276: PPUSH
8277: LD_INT 103
8279: PPUSH
8280: CALL_OW 111
// tmp := 0 0$0 ;
8284: LD_ADDR_VAR 0 5
8288: PUSH
8289: LD_INT 0
8291: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8292: LD_INT 35
8294: PPUSH
8295: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
8299: LD_EXP 48
8303: PPUSH
8304: LD_INT 66
8306: PPUSH
8307: LD_INT 103
8309: PPUSH
8310: CALL_OW 307
8314: PUSH
8315: LD_VAR 0 5
8319: PUSH
8320: LD_INT 175
8322: GREATER
8323: OR
8324: IFFALSE 8292
// ComTurnUnit ( Walker , JMM ) ;
8326: LD_EXP 48
8330: PPUSH
8331: LD_EXP 37
8335: PPUSH
8336: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
8340: LD_EXP 48
8344: PPUSH
8345: LD_STRING D2a-Sci1-1
8347: PPUSH
8348: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
8352: LD_EXP 37
8356: PPUSH
8357: LD_EXP 48
8361: PPUSH
8362: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
8366: LD_EXP 37
8370: PPUSH
8371: LD_STRING D2a-JMM-2
8373: PPUSH
8374: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
8378: LD_EXP 48
8382: PPUSH
8383: LD_STRING D2a-Sci1-2
8385: PPUSH
8386: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
8390: LD_EXP 37
8394: PPUSH
8395: LD_STRING D2a-JMM-3
8397: PPUSH
8398: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
8402: LD_EXP 48
8406: PPUSH
8407: LD_STRING D2a-Sci1-3
8409: PPUSH
8410: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
8414: LD_ADDR_EXP 4
8418: PUSH
8419: LD_EXP 4
8423: PUSH
8424: LD_EXP 47
8428: PUSH
8429: LD_EXP 48
8433: PUSH
8434: LD_EXP 49
8438: PUSH
8439: LD_EXP 50
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: ADD
8450: ST_TO_ADDR
// for i in jmm_units do
8451: LD_ADDR_VAR 0 1
8455: PUSH
8456: LD_EXP 4
8460: PUSH
8461: FOR_IN
8462: IFFALSE 8487
// if not IsInUnit ( i ) then
8464: LD_VAR 0 1
8468: PPUSH
8469: CALL_OW 310
8473: NOT
8474: IFFALSE 8485
// ComFree ( i ) ;
8476: LD_VAR 0 1
8480: PPUSH
8481: CALL_OW 139
8485: GO 8461
8487: POP
8488: POP
// Video ( false ) ;
8489: LD_INT 0
8491: PPUSH
8492: CALL 78315 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8496: LD_STRING MSolar1
8498: PPUSH
8499: CALL_OW 337
// jmm_on_west := true ;
8503: LD_ADDR_EXP 5
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8511: LD_INT 1050
8513: PPUSH
8514: CALL_OW 67
// frank_can_return := true ;
8518: LD_ADDR_EXP 12
8522: PUSH
8523: LD_INT 1
8525: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8526: LD_INT 6300
8528: PPUSH
8529: LD_INT 8400
8531: PPUSH
8532: CALL_OW 12
8536: PPUSH
8537: CALL_OW 67
// send_spec_patrol := true ;
8541: LD_ADDR_EXP 30
8545: PUSH
8546: LD_INT 1
8548: ST_TO_ADDR
// end ;
8549: PPOPN 5
8551: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8552: LD_INT 22
8554: PUSH
8555: LD_INT 1
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 34
8564: PUSH
8565: LD_INT 51
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 92
8574: PUSH
8575: LD_INT 63
8577: PUSH
8578: LD_INT 100
8580: PUSH
8581: LD_INT 5
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: PPUSH
8598: CALL_OW 69
8602: PUSH
8603: LD_EXP 5
8607: NOT
8608: AND
8609: IFFALSE 8722
8611: GO 8613
8613: DISABLE
8614: LD_INT 0
8616: PPUSH
8617: PPUSH
// begin enable ;
8618: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8619: LD_ADDR_VAR 0 2
8623: PUSH
8624: LD_INT 22
8626: PUSH
8627: LD_INT 1
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 34
8636: PUSH
8637: LD_INT 51
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 92
8646: PUSH
8647: LD_INT 63
8649: PUSH
8650: LD_INT 100
8652: PUSH
8653: LD_INT 5
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: LIST
8666: PUSH
8667: EMPTY
8668: LIST
8669: PPUSH
8670: CALL_OW 69
8674: ST_TO_ADDR
// if not filter then
8675: LD_VAR 0 2
8679: NOT
8680: IFFALSE 8684
// exit ;
8682: GO 8722
// for i in filter do
8684: LD_ADDR_VAR 0 1
8688: PUSH
8689: LD_VAR 0 2
8693: PUSH
8694: FOR_IN
8695: IFFALSE 8720
// begin SetFuel ( i , 0 ) ;
8697: LD_VAR 0 1
8701: PPUSH
8702: LD_INT 0
8704: PPUSH
8705: CALL_OW 240
// ComStop ( i ) ;
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 141
// end ;
8718: GO 8694
8720: POP
8721: POP
// end ;
8722: PPOPN 2
8724: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8725: LD_EXP 30
8729: IFFALSE 9784
8731: GO 8733
8733: DISABLE
8734: LD_INT 0
8736: PPUSH
8737: PPUSH
8738: PPUSH
8739: PPUSH
8740: PPUSH
8741: PPUSH
8742: PPUSH
// begin if not ru_spec_patrol then
8743: LD_EXP 54
8747: NOT
8748: IFFALSE 8752
// exit ;
8750: GO 9784
// dead1 := false ;
8752: LD_ADDR_VAR 0 1
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// dead2 := false ;
8760: LD_ADDR_VAR 0 2
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// inarea1 := false ;
8768: LD_ADDR_VAR 0 3
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// inarea2 := false ;
8776: LD_ADDR_VAR 0 4
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// tmp := [ ] ;
8784: LD_ADDR_VAR 0 6
8788: PUSH
8789: EMPTY
8790: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8791: LD_EXP 54
8795: PPUSH
8796: LD_INT 75
8798: PPUSH
8799: LD_INT 101
8801: PPUSH
8802: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8806: LD_INT 35
8808: PPUSH
8809: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8813: LD_INT 1
8815: PPUSH
8816: LD_EXP 54
8820: PUSH
8821: LD_INT 1
8823: ARRAY
8824: PPUSH
8825: CALL_OW 292
8829: PUSH
8830: LD_EXP 54
8834: PPUSH
8835: LD_INT 92
8837: PUSH
8838: LD_INT 75
8840: PUSH
8841: LD_INT 101
8843: PUSH
8844: LD_INT 4
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: PPUSH
8853: CALL_OW 72
8857: OR
8858: IFFALSE 8806
// ComStop ( ru_spec_patrol ) ;
8860: LD_EXP 54
8864: PPUSH
8865: CALL_OW 141
// Wait ( 0 0$02 ) ;
8869: LD_INT 70
8871: PPUSH
8872: CALL_OW 67
// DialogueOn ;
8876: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8880: LD_EXP 54
8884: PUSH
8885: LD_INT 1
8887: ARRAY
8888: PPUSH
8889: LD_STRING D8-Rus1-1
8891: PPUSH
8892: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8896: LD_EXP 37
8900: PPUSH
8901: LD_STRING D8-JMM-1
8903: PPUSH
8904: CALL_OW 88
// DialogueOff ;
8908: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8912: LD_EXP 54
8916: PPUSH
8917: LD_INT 13
8919: PPUSH
8920: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8924: LD_INT 35
8926: PPUSH
8927: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8931: LD_VAR 0 1
8935: NOT
8936: PUSH
8937: LD_EXP 54
8941: PUSH
8942: LD_INT 1
8944: ARRAY
8945: PPUSH
8946: CALL_OW 301
8950: AND
8951: IFFALSE 8961
// dead1 := true ;
8953: LD_ADDR_VAR 0 1
8957: PUSH
8958: LD_INT 1
8960: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8961: LD_VAR 0 2
8965: NOT
8966: PUSH
8967: LD_EXP 54
8971: PUSH
8972: LD_INT 2
8974: ARRAY
8975: PPUSH
8976: CALL_OW 301
8980: AND
8981: IFFALSE 8991
// dead2 := true ;
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_INT 1
8990: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8991: LD_VAR 0 3
8995: NOT
8996: PUSH
8997: LD_EXP 54
9001: PUSH
9002: LD_INT 1
9004: ARRAY
9005: PPUSH
9006: LD_INT 14
9008: PPUSH
9009: CALL_OW 308
9013: AND
9014: IFFALSE 9024
// inarea1 := true ;
9016: LD_ADDR_VAR 0 3
9020: PUSH
9021: LD_INT 1
9023: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
9024: LD_VAR 0 4
9028: NOT
9029: PUSH
9030: LD_EXP 54
9034: PUSH
9035: LD_INT 2
9037: ARRAY
9038: PPUSH
9039: LD_INT 14
9041: PPUSH
9042: CALL_OW 308
9046: AND
9047: IFFALSE 9057
// inarea2 := true ;
9049: LD_ADDR_VAR 0 4
9053: PUSH
9054: LD_INT 1
9056: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
9057: LD_VAR 0 1
9061: PUSH
9062: LD_VAR 0 2
9066: AND
9067: PUSH
9068: LD_VAR 0 1
9072: PUSH
9073: LD_VAR 0 4
9077: AND
9078: OR
9079: PUSH
9080: LD_VAR 0 2
9084: PUSH
9085: LD_VAR 0 3
9089: AND
9090: OR
9091: PUSH
9092: LD_VAR 0 3
9096: PUSH
9097: LD_VAR 0 4
9101: AND
9102: OR
9103: IFFALSE 8924
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
9105: LD_VAR 0 3
9109: PUSH
9110: LD_VAR 0 4
9114: AND
9115: PUSH
9116: LD_VAR 0 1
9120: PUSH
9121: LD_VAR 0 4
9125: AND
9126: OR
9127: PUSH
9128: LD_VAR 0 2
9132: PUSH
9133: LD_VAR 0 3
9137: AND
9138: OR
9139: IFFALSE 9764
// begin prepare_siege := true ;
9141: LD_ADDR_EXP 31
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// DialogueOn ;
9149: CALL_OW 6
// if ( inarea1 and inarea2 ) then
9153: LD_VAR 0 3
9157: PUSH
9158: LD_VAR 0 4
9162: AND
9163: IFFALSE 9179
// Say ( JMM , D8b-JMM-1a ) else
9165: LD_EXP 37
9169: PPUSH
9170: LD_STRING D8b-JMM-1a
9172: PPUSH
9173: CALL_OW 88
9177: GO 9191
// Say ( JMM , D8b-JMM-1 ) ;
9179: LD_EXP 37
9183: PPUSH
9184: LD_STRING D8b-JMM-1
9186: PPUSH
9187: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
9191: LD_EXP 4
9195: PPUSH
9196: LD_INT 26
9198: PUSH
9199: LD_INT 1
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PPUSH
9206: CALL_OW 72
9210: PUSH
9211: LD_EXP 38
9215: PUSH
9216: LD_EXP 39
9220: PUSH
9221: LD_EXP 48
9225: PUSH
9226: LD_EXP 51
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: DIFF
9237: PPUSH
9238: LD_STRING D8b-Sol1-1
9240: PPUSH
9241: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
9245: LD_EXP 39
9249: PUSH
9250: LD_EXP 39
9254: PUSH
9255: LD_EXP 4
9259: IN
9260: AND
9261: IFFALSE 9277
// Say ( Cyrus , D8b-Cyrus-1 ) else
9263: LD_EXP 39
9267: PPUSH
9268: LD_STRING D8b-Cyrus-1
9270: PPUSH
9271: CALL_OW 88
9275: GO 9289
// Say ( JMM , D8b-JMM-1a ) ;
9277: LD_EXP 37
9281: PPUSH
9282: LD_STRING D8b-JMM-1a
9284: PPUSH
9285: CALL_OW 88
// if Lisa and Lisa in jmm_units then
9289: LD_EXP 40
9293: PUSH
9294: LD_EXP 40
9298: PUSH
9299: LD_EXP 4
9303: IN
9304: AND
9305: IFFALSE 9319
// Say ( Lisa , D8b-Lisa-2 ) ;
9307: LD_EXP 40
9311: PPUSH
9312: LD_STRING D8b-Lisa-2
9314: PPUSH
9315: CALL_OW 88
// if Bobby and Bobby in jmm_units then
9319: LD_EXP 38
9323: PUSH
9324: LD_EXP 38
9328: PUSH
9329: LD_EXP 4
9333: IN
9334: AND
9335: IFFALSE 9351
// Say ( Bobby , D8b-Bobby-1 ) else
9337: LD_EXP 38
9341: PPUSH
9342: LD_STRING D8b-Bobby-1
9344: PPUSH
9345: CALL_OW 88
9349: GO 9411
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
9351: LD_ADDR_VAR 0 5
9355: PUSH
9356: LD_EXP 4
9360: PPUSH
9361: LD_INT 26
9363: PUSH
9364: LD_INT 1
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PPUSH
9371: CALL_OW 72
9375: PUSH
9376: LD_EXP 38
9380: PUSH
9381: LD_EXP 39
9385: PUSH
9386: LD_EXP 48
9390: PUSH
9391: LD_EXP 51
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: DIFF
9402: PPUSH
9403: LD_STRING D8b-Sol2-1
9405: PPUSH
9406: CALL 585 0 2
9410: ST_TO_ADDR
// DialogueOff ;
9411: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
9415: LD_EXP 39
9419: PUSH
9420: LD_EXP 39
9424: PUSH
9425: LD_EXP 4
9429: IN
9430: AND
9431: IFFALSE 9456
// tmp := Insert ( tmp , 1 , Cyrus ) ;
9433: LD_ADDR_VAR 0 6
9437: PUSH
9438: LD_VAR 0 6
9442: PPUSH
9443: LD_INT 1
9445: PPUSH
9446: LD_EXP 39
9450: PPUSH
9451: CALL_OW 2
9455: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
9456: LD_EXP 38
9460: PUSH
9461: LD_EXP 38
9465: PUSH
9466: LD_EXP 4
9470: IN
9471: AND
9472: IFFALSE 9497
// tmp := Insert ( tmp , 1 , Bobby ) ;
9474: LD_ADDR_VAR 0 6
9478: PUSH
9479: LD_VAR 0 6
9483: PPUSH
9484: LD_INT 1
9486: PPUSH
9487: LD_EXP 38
9491: PPUSH
9492: CALL_OW 2
9496: ST_TO_ADDR
// if sol then
9497: LD_VAR 0 5
9501: IFFALSE 9526
// tmp := Insert ( tmp , 1 , sol ) ;
9503: LD_ADDR_VAR 0 6
9507: PUSH
9508: LD_VAR 0 6
9512: PPUSH
9513: LD_INT 1
9515: PPUSH
9516: LD_VAR 0 5
9520: PPUSH
9521: CALL_OW 2
9525: ST_TO_ADDR
// if tmp then
9526: LD_VAR 0 6
9530: IFFALSE 9723
// begin SetSide ( tmp , 8 ) ;
9532: LD_VAR 0 6
9536: PPUSH
9537: LD_INT 8
9539: PPUSH
9540: CALL_OW 235
// for i in tmp do
9544: LD_ADDR_VAR 0 7
9548: PUSH
9549: LD_VAR 0 6
9553: PUSH
9554: FOR_IN
9555: IFFALSE 9568
// ComExit ( i ) ;
9557: LD_VAR 0 7
9561: PPUSH
9562: CALL 78741 0 1
9566: GO 9554
9568: POP
9569: POP
// wait ( 0 0$0.3 ) ;
9570: LD_INT 10
9572: PPUSH
9573: CALL_OW 67
// ComFree ( tmp ) ;
9577: LD_VAR 0 6
9581: PPUSH
9582: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9586: LD_VAR 0 6
9590: PPUSH
9591: LD_INT 15
9593: PPUSH
9594: CALL_OW 173
// AddComHold ( tmp ) ;
9598: LD_VAR 0 6
9602: PPUSH
9603: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9607: LD_INT 35
9609: PPUSH
9610: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9614: LD_VAR 0 6
9618: PUSH
9619: LD_INT 1
9621: ARRAY
9622: PPUSH
9623: CALL_OW 314
9627: NOT
9628: IFFALSE 9642
// ComMoveToArea ( tmp , cyrusEscape ) ;
9630: LD_VAR 0 6
9634: PPUSH
9635: LD_INT 15
9637: PPUSH
9638: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9642: LD_VAR 0 6
9646: PUSH
9647: LD_INT 1
9649: ARRAY
9650: PPUSH
9651: LD_INT 15
9653: PPUSH
9654: CALL_OW 308
9658: IFFALSE 9713
// begin RemoveUnit ( tmp [ 1 ] ) ;
9660: LD_VAR 0 6
9664: PUSH
9665: LD_INT 1
9667: ARRAY
9668: PPUSH
9669: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9673: LD_ADDR_EXP 4
9677: PUSH
9678: LD_EXP 4
9682: PUSH
9683: LD_VAR 0 6
9687: PUSH
9688: LD_INT 1
9690: ARRAY
9691: DIFF
9692: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9693: LD_ADDR_VAR 0 6
9697: PUSH
9698: LD_VAR 0 6
9702: PUSH
9703: LD_VAR 0 6
9707: PUSH
9708: LD_INT 1
9710: ARRAY
9711: DIFF
9712: ST_TO_ADDR
// end ; until tmp = 0 ;
9713: LD_VAR 0 6
9717: PUSH
9718: LD_INT 0
9720: EQUAL
9721: IFFALSE 9607
// end ; wait ( 0 0$30 ) ;
9723: LD_INT 1050
9725: PPUSH
9726: CALL_OW 67
// if ru_spec_patrol then
9730: LD_EXP 54
9734: IFFALSE 9762
// for i in ru_spec_patrol do
9736: LD_ADDR_VAR 0 7
9740: PUSH
9741: LD_EXP 54
9745: PUSH
9746: FOR_IN
9747: IFFALSE 9760
// RemoveUnit ( i ) ;
9749: LD_VAR 0 7
9753: PPUSH
9754: CALL_OW 64
9758: GO 9746
9760: POP
9761: POP
// end else
9762: GO 9784
// begin prepare_siege := false ;
9764: LD_ADDR_EXP 31
9768: PUSH
9769: LD_INT 0
9771: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9772: LD_EXP 37
9776: PPUSH
9777: LD_STRING D8a-JMM-1
9779: PPUSH
9780: CALL_OW 88
// end ; end ;
9784: PPOPN 7
9786: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9787: LD_EXP 12
9791: IFFALSE 11059
9793: GO 9795
9795: DISABLE
9796: LD_INT 0
9798: PPUSH
9799: PPUSH
9800: PPUSH
// begin uc_side := 8 ;
9801: LD_ADDR_OWVAR 20
9805: PUSH
9806: LD_INT 8
9808: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9809: LD_ADDR_VAR 0 3
9813: PUSH
9814: LD_INT 59
9816: PUSH
9817: LD_INT 71
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 122
9826: PUSH
9827: LD_INT 117
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9838: LD_ADDR_EXP 51
9842: PUSH
9843: LD_STRING Frank
9845: PPUSH
9846: LD_INT 0
9848: PPUSH
9849: LD_STRING 
9851: PPUSH
9852: CALL 40548 0 3
9856: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9857: LD_ADDR_VAR 0 1
9861: PUSH
9862: LD_INT 1
9864: PPUSH
9865: LD_INT 2
9867: PPUSH
9868: CALL_OW 12
9872: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9873: LD_EXP 51
9877: PPUSH
9878: LD_VAR 0 3
9882: PUSH
9883: LD_VAR 0 1
9887: ARRAY
9888: PUSH
9889: LD_INT 1
9891: ARRAY
9892: PPUSH
9893: LD_VAR 0 3
9897: PUSH
9898: LD_VAR 0 1
9902: ARRAY
9903: PUSH
9904: LD_INT 2
9906: ARRAY
9907: PPUSH
9908: LD_INT 0
9910: PPUSH
9911: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9915: LD_EXP 51
9919: PPUSH
9920: LD_INT 1
9922: PPUSH
9923: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9927: LD_INT 35
9929: PPUSH
9930: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9934: LD_EXP 51
9938: PPUSH
9939: LD_EXP 37
9943: PPUSH
9944: CALL_OW 296
9948: PUSH
9949: LD_INT 8
9951: LESS
9952: PUSH
9953: LD_EXP 51
9957: PPUSH
9958: CALL_OW 256
9962: PUSH
9963: LD_INT 250
9965: GREATER
9966: AND
9967: IFFALSE 9927
// Video ( true ) ;
9969: LD_INT 1
9971: PPUSH
9972: CALL 78315 0 1
// CenterOnUnits ( JMM ) ;
9976: LD_EXP 37
9980: PPUSH
9981: CALL_OW 85
// if IsInUnit ( JMM ) then
9985: LD_EXP 37
9989: PPUSH
9990: CALL_OW 310
9994: IFFALSE 10005
// ComFree ( JMM ) ;
9996: LD_EXP 37
10000: PPUSH
10001: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
10005: LD_EXP 37
10009: PPUSH
10010: LD_EXP 51
10014: PPUSH
10015: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
10019: LD_EXP 51
10023: PPUSH
10024: LD_EXP 37
10028: PPUSH
10029: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
10033: LD_EXP 37
10037: PPUSH
10038: LD_STRING D6-JMM-1
10040: PPUSH
10041: CALL_OW 88
// p := 0 ;
10045: LD_ADDR_VAR 0 2
10049: PUSH
10050: LD_INT 0
10052: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10053: LD_INT 35
10055: PPUSH
10056: CALL_OW 67
// p := p + 1 ;
10060: LD_ADDR_VAR 0 2
10064: PUSH
10065: LD_VAR 0 2
10069: PUSH
10070: LD_INT 1
10072: PLUS
10073: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
10074: LD_EXP 37
10078: PPUSH
10079: LD_EXP 51
10083: PPUSH
10084: CALL_OW 296
10088: PUSH
10089: LD_INT 8
10091: LESS
10092: PUSH
10093: LD_VAR 0 2
10097: PUSH
10098: LD_INT 7
10100: GREATER
10101: OR
10102: IFFALSE 10053
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
10104: LD_EXP 40
10108: PUSH
10109: LD_EXP 40
10113: PPUSH
10114: LD_EXP 51
10118: PPUSH
10119: CALL_OW 296
10123: PUSH
10124: LD_INT 20
10126: LESS
10127: AND
10128: PUSH
10129: LD_EXP 40
10133: PUSH
10134: LD_EXP 4
10138: IN
10139: AND
10140: IFFALSE 10165
// begin ComFree ( Lisa ) ;
10142: LD_EXP 40
10146: PPUSH
10147: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
10151: LD_EXP 40
10155: PPUSH
10156: LD_EXP 51
10160: PPUSH
10161: CALL_OW 172
// end ; if Lynch then
10165: LD_EXP 47
10169: IFFALSE 10194
// begin ComFree ( Lynch ) ;
10171: LD_EXP 47
10175: PPUSH
10176: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
10180: LD_EXP 47
10184: PPUSH
10185: LD_EXP 51
10189: PPUSH
10190: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
10194: LD_EXP 37
10198: PPUSH
10199: LD_EXP 51
10203: PPUSH
10204: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10208: LD_EXP 51
10212: PPUSH
10213: LD_EXP 37
10217: PPUSH
10218: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
10222: LD_EXP 51
10226: PPUSH
10227: LD_STRING D6-Frank-1
10229: PPUSH
10230: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
10234: LD_INT 69
10236: PPUSH
10237: LD_INT 20
10239: PPUSH
10240: LD_INT 1
10242: PPUSH
10243: LD_INT 20
10245: NEG
10246: PPUSH
10247: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
10251: LD_INT 69
10253: PPUSH
10254: LD_INT 20
10256: PPUSH
10257: LD_INT 1
10259: PPUSH
10260: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
10264: LD_INT 190
10266: PPUSH
10267: LD_INT 31
10269: PPUSH
10270: LD_INT 1
10272: PPUSH
10273: LD_INT 20
10275: NEG
10276: PPUSH
10277: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
10281: LD_INT 190
10283: PPUSH
10284: LD_INT 31
10286: PPUSH
10287: LD_INT 1
10289: PPUSH
10290: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
10294: LD_INT 69
10296: PPUSH
10297: LD_INT 20
10299: PPUSH
10300: CALL_OW 84
// Wait ( 0 0$02 ) ;
10304: LD_INT 70
10306: PPUSH
10307: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
10311: LD_EXP 37
10315: PPUSH
10316: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
10320: LD_EXP 40
10324: PUSH
10325: LD_EXP 40
10329: PPUSH
10330: LD_EXP 51
10334: PPUSH
10335: CALL_OW 296
10339: PUSH
10340: LD_INT 20
10342: LESS
10343: AND
10344: PUSH
10345: LD_EXP 40
10349: PPUSH
10350: CALL_OW 302
10354: AND
10355: PUSH
10356: LD_EXP 40
10360: PUSH
10361: LD_EXP 4
10365: IN
10366: AND
10367: IFFALSE 10489
// begin ComFree ( Lisa ) ;
10369: LD_EXP 40
10373: PPUSH
10374: CALL_OW 139
// p := 0 ;
10378: LD_ADDR_VAR 0 2
10382: PUSH
10383: LD_INT 0
10385: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10386: LD_INT 35
10388: PPUSH
10389: CALL_OW 67
// p := p + 1 ;
10393: LD_ADDR_VAR 0 2
10397: PUSH
10398: LD_VAR 0 2
10402: PUSH
10403: LD_INT 1
10405: PLUS
10406: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10407: LD_EXP 40
10411: PPUSH
10412: LD_EXP 51
10416: PPUSH
10417: CALL_OW 296
10421: PUSH
10422: LD_INT 7
10424: LESS
10425: PUSH
10426: LD_VAR 0 2
10430: PUSH
10431: LD_INT 7
10433: GREATER
10434: OR
10435: IFFALSE 10386
// Say ( Lisa , D6-Lisa-1 ) ;
10437: LD_EXP 40
10441: PPUSH
10442: LD_STRING D6-Lisa-1
10444: PPUSH
10445: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10449: LD_EXP 40
10453: PPUSH
10454: LD_EXP 51
10458: PPUSH
10459: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10463: LD_EXP 51
10467: PPUSH
10468: LD_EXP 40
10472: PPUSH
10473: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10477: LD_EXP 51
10481: PPUSH
10482: LD_STRING D6-Frank-2
10484: PPUSH
10485: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10489: LD_EXP 47
10493: PUSH
10494: LD_EXP 47
10498: PPUSH
10499: LD_EXP 51
10503: PPUSH
10504: CALL_OW 296
10508: PUSH
10509: LD_INT 20
10511: LESS
10512: AND
10513: PUSH
10514: LD_EXP 47
10518: PPUSH
10519: CALL_OW 302
10523: AND
10524: IFFALSE 10717
// begin ComTurnUnit ( Lynch , JMM ) ;
10526: LD_EXP 47
10530: PPUSH
10531: LD_EXP 37
10535: PPUSH
10536: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10540: LD_EXP 51
10544: PPUSH
10545: LD_EXP 37
10549: PPUSH
10550: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10554: LD_EXP 47
10558: PPUSH
10559: LD_STRING D6-Sol1-2
10561: PPUSH
10562: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10566: LD_EXP 37
10570: PPUSH
10571: LD_STRING D6-JMM-2
10573: PPUSH
10574: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10578: LD_EXP 51
10582: PPUSH
10583: LD_STRING D6-Frank-3
10585: PPUSH
10586: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10590: LD_EXP 37
10594: PPUSH
10595: LD_STRING D6-JMM-3
10597: PPUSH
10598: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10602: LD_EXP 51
10606: PPUSH
10607: LD_STRING D6-Frank-4
10609: PPUSH
10610: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10614: LD_EXP 51
10618: PPUSH
10619: LD_STRING D6-Frank-4a
10621: PPUSH
10622: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10626: LD_EXP 37
10630: PPUSH
10631: LD_STRING D6-JMM-4
10633: PPUSH
10634: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10638: LD_EXP 51
10642: PPUSH
10643: LD_STRING D6-Frank-5
10645: PPUSH
10646: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10650: LD_EXP 40
10654: PUSH
10655: LD_EXP 40
10659: PPUSH
10660: CALL_OW 302
10664: AND
10665: PUSH
10666: LD_EXP 40
10670: PUSH
10671: LD_EXP 4
10675: IN
10676: AND
10677: IFFALSE 10691
// Say ( Lisa , D6-Lisa-5 ) ;
10679: LD_EXP 40
10683: PPUSH
10684: LD_STRING D6-Lisa-5
10686: PPUSH
10687: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10691: LD_EXP 51
10695: PPUSH
10696: LD_STRING D6-Frank-6
10698: PPUSH
10699: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10703: LD_EXP 37
10707: PPUSH
10708: LD_STRING D6-JMM-6
10710: PPUSH
10711: CALL_OW 88
// end else
10715: GO 10844
// begin ComTurnUnit ( Frank , JMM ) ;
10717: LD_EXP 51
10721: PPUSH
10722: LD_EXP 37
10726: PPUSH
10727: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10731: LD_EXP 51
10735: PPUSH
10736: LD_STRING D6-Frank-4
10738: PPUSH
10739: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10743: LD_EXP 51
10747: PPUSH
10748: LD_STRING D6-Frank-4a
10750: PPUSH
10751: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10755: LD_EXP 37
10759: PPUSH
10760: LD_STRING D6-JMM-4
10762: PPUSH
10763: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10767: LD_EXP 51
10771: PPUSH
10772: LD_STRING D6-Frank-5
10774: PPUSH
10775: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10779: LD_EXP 40
10783: PUSH
10784: LD_EXP 40
10788: PPUSH
10789: CALL_OW 302
10793: AND
10794: PUSH
10795: LD_EXP 40
10799: PUSH
10800: LD_EXP 4
10804: IN
10805: AND
10806: IFFALSE 10820
// Say ( Lisa , D6-Lisa-5 ) ;
10808: LD_EXP 40
10812: PPUSH
10813: LD_STRING D6-Lisa-5
10815: PPUSH
10816: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10820: LD_EXP 51
10824: PPUSH
10825: LD_STRING D6-Frank-6
10827: PPUSH
10828: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10832: LD_EXP 37
10836: PPUSH
10837: LD_STRING D6-JMM-6
10839: PPUSH
10840: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10844: LD_STRING Q1
10846: PPUSH
10847: CALL_OW 97
10851: PUSH
10852: LD_INT 1
10854: DOUBLE
10855: EQUAL
10856: IFTRUE 10860
10858: GO 10871
10860: POP
// frank_send_to_scout := true ; 2 :
10861: LD_ADDR_EXP 15
10865: PUSH
10866: LD_INT 1
10868: ST_TO_ADDR
10869: GO 10891
10871: LD_INT 2
10873: DOUBLE
10874: EQUAL
10875: IFTRUE 10879
10877: GO 10890
10879: POP
// frank_send_to_scout := false ; end ;
10880: LD_ADDR_EXP 15
10884: PUSH
10885: LD_INT 0
10887: ST_TO_ADDR
10888: GO 10891
10890: POP
// Video ( false ) ;
10891: LD_INT 0
10893: PPUSH
10894: CALL 78315 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10898: LD_EXP 37
10902: PUSH
10903: LD_EXP 40
10907: PUSH
10908: LD_EXP 47
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: LIST
10917: PPUSH
10918: CALL_OW 139
// if frank_send_to_scout then
10922: LD_EXP 15
10926: IFFALSE 10980
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10928: LD_EXP 51
10932: PPUSH
10933: LD_INT 15
10935: PPUSH
10936: CALL_OW 113
// wait ( 0 0$01 ) ;
10940: LD_INT 35
10942: PPUSH
10943: CALL_OW 67
// until not See ( 1 , Frank ) ;
10947: LD_INT 1
10949: PPUSH
10950: LD_EXP 51
10954: PPUSH
10955: CALL_OW 292
10959: NOT
10960: IFFALSE 10928
// wait ( 0 0$02 ) ;
10962: LD_INT 70
10964: PPUSH
10965: CALL_OW 67
// RemoveUnit ( Frank ) ;
10969: LD_EXP 51
10973: PPUSH
10974: CALL_OW 64
// end else
10978: GO 10992
// SetSide ( Frank , 1 ) ;
10980: LD_EXP 51
10984: PPUSH
10985: LD_INT 1
10987: PPUSH
10988: CALL_OW 235
// send_attack_on_cornel_base := true ;
10992: LD_ADDR_EXP 26
10996: PUSH
10997: LD_INT 1
10999: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11000: LD_INT 35
11002: PPUSH
11003: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
11007: LD_ADDR_EXP 29
11011: PUSH
11012: LD_EXP 29
11016: PPUSH
11017: LD_STRING -
11019: PPUSH
11020: CALL 1077 0 2
11024: ST_TO_ADDR
// if debug then
11025: LD_EXP 1
11029: IFFALSE 11041
// debug_strings := time_to_prepare ;
11031: LD_ADDR_OWVAR 48
11035: PUSH
11036: LD_EXP 29
11040: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
11041: LD_EXP 29
11045: PUSH
11046: LD_INT 0
11048: EQUAL
11049: IFFALSE 11000
// cornel_prepared := true ;
11051: LD_ADDR_EXP 11
11055: PUSH
11056: LD_INT 1
11058: ST_TO_ADDR
// end ;
11059: PPOPN 3
11061: END
// every 0 0$01 trigger cornel_prepared do
11062: LD_EXP 11
11066: IFFALSE 11374
11068: GO 11070
11070: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
11071: LD_EXP 44
11075: PPUSH
11076: LD_STRING D3-Corn-1
11078: PPUSH
11079: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
11083: LD_STRING MOutWait
11085: PPUSH
11086: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
11090: LD_INT 35
11092: PPUSH
11093: CALL_OW 67
// until cornel_counter = 0 ;
11097: LD_EXP 10
11101: PUSH
11102: LD_INT 0
11104: EQUAL
11105: IFFALSE 11090
// SayRadio ( Cornel , D3a-Corn-1 ) ;
11107: LD_EXP 44
11111: PPUSH
11112: LD_STRING D3a-Corn-1
11114: PPUSH
11115: CALL_OW 94
// if IsOk ( Cornel ) then
11119: LD_EXP 44
11123: PPUSH
11124: CALL_OW 302
11128: IFFALSE 11142
// Say ( JMM , D3a-JMM-1 ) ;
11130: LD_EXP 37
11134: PPUSH
11135: LD_STRING D3a-JMM-1
11137: PPUSH
11138: CALL_OW 88
// end_mission_allowed := true ;
11142: LD_ADDR_EXP 21
11146: PUSH
11147: LD_INT 1
11149: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
11150: LD_STRING M2
11152: PPUSH
11153: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
11157: LD_INT 9
11159: PPUSH
11160: LD_INT 1
11162: PPUSH
11163: CALL_OW 424
// Wait ( 0 0$05 ) ;
11167: LD_INT 175
11169: PPUSH
11170: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
11174: LD_EXP 44
11178: PPUSH
11179: LD_STRING D3a-Corn-2
11181: PPUSH
11182: CALL_OW 94
// cornel_attack := true ;
11186: LD_ADDR_EXP 9
11190: PUSH
11191: LD_INT 1
11193: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
11194: LD_INT 105
11196: PPUSH
11197: CALL_OW 67
// AddMoreTanks ( ) ;
11201: CALL 5402 0 0
// if frank_send_to_scout then
11205: LD_EXP 15
11209: IFFALSE 11374
// begin InitHc ;
11211: CALL_OW 19
// InitUc ;
11215: CALL_OW 18
// uc_side := 8 ;
11219: LD_ADDR_OWVAR 20
11223: PUSH
11224: LD_INT 8
11226: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
11227: LD_ADDR_EXP 51
11231: PUSH
11232: LD_STRING Frank
11234: PPUSH
11235: LD_INT 0
11237: PPUSH
11238: LD_STRING 
11240: PPUSH
11241: CALL 40548 0 3
11245: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
11246: LD_EXP 51
11250: PPUSH
11251: LD_INT 6
11253: PPUSH
11254: LD_INT 9
11256: PPUSH
11257: LD_INT 0
11259: PPUSH
11260: CALL_OW 48
// ComCrawl ( Frank ) ;
11264: LD_EXP 51
11268: PPUSH
11269: CALL_OW 137
// repeat wait ( 10 ) ;
11273: LD_INT 10
11275: PPUSH
11276: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11280: LD_EXP 37
11284: PPUSH
11285: LD_EXP 51
11289: PPUSH
11290: CALL_OW 296
11294: PUSH
11295: LD_INT 9
11297: LESS
11298: PUSH
11299: LD_INT 9
11301: PPUSH
11302: LD_INT 22
11304: PUSH
11305: LD_INT 1
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PPUSH
11312: CALL_OW 70
11316: OR
11317: IFFALSE 11273
// if IsDead ( Frank ) then
11319: LD_EXP 51
11323: PPUSH
11324: CALL_OW 301
11328: IFFALSE 11332
// exit ;
11330: GO 11374
// CenterOnUnits ( Frank ) ;
11332: LD_EXP 51
11336: PPUSH
11337: CALL_OW 85
// SetSide ( Frank , 1 ) ;
11341: LD_EXP 51
11345: PPUSH
11346: LD_INT 1
11348: PPUSH
11349: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
11353: LD_EXP 51
11357: PPUSH
11358: LD_STRING D6a-Frank-1
11360: PPUSH
11361: CALL_OW 88
// ComWalk ( Frank ) ;
11365: LD_EXP 51
11369: PPUSH
11370: CALL_OW 138
// end ; end ;
11374: END
// every 0 0$01 trigger solar_builded do
11375: LD_EXP 14
11379: IFFALSE 11483
11381: GO 11383
11383: DISABLE
// begin Wait ( 0 0$02 ) ;
11384: LD_INT 70
11386: PPUSH
11387: CALL_OW 67
// DialogueOn ;
11391: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11395: LD_EXP 37
11399: PPUSH
11400: LD_STRING D2b-JMM-1
11402: PPUSH
11403: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11407: LD_EXP 48
11411: PUSH
11412: LD_EXP 48
11416: PPUSH
11417: CALL_OW 302
11421: AND
11422: IFFALSE 11472
// begin Say ( Walker , D2b-Sci1-1 ) ;
11424: LD_EXP 48
11428: PPUSH
11429: LD_STRING D2b-Sci1-1
11431: PPUSH
11432: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11436: LD_EXP 37
11440: PPUSH
11441: LD_STRING D2b-JMM-2
11443: PPUSH
11444: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11448: LD_EXP 48
11452: PPUSH
11453: LD_STRING D2b-Sci1-2
11455: PPUSH
11456: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11460: LD_EXP 37
11464: PPUSH
11465: LD_STRING D2b-JMM-3
11467: PPUSH
11468: CALL_OW 88
// end ; DialogueOff ;
11472: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11476: LD_STRING MOutSol
11478: PPUSH
11479: CALL_OW 337
// end ;
11483: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11484: LD_EXP 14
11488: PUSH
11489: LD_EXP 37
11493: PPUSH
11494: CALL_OW 302
11498: AND
11499: PUSH
11500: LD_EXP 37
11504: PPUSH
11505: CALL 911 0 1
11509: AND
11510: PUSH
11511: LD_EXP 16
11515: NOT
11516: AND
11517: IFFALSE 11588
11519: GO 11521
11521: DISABLE
11522: LD_INT 0
11524: PPUSH
// begin jmm_in_veh := true ;
11525: LD_ADDR_EXP 16
11529: PUSH
11530: LD_INT 1
11532: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11533: LD_ADDR_VAR 0 1
11537: PUSH
11538: LD_INT 0
11540: PPUSH
11541: LD_INT 1
11543: PPUSH
11544: CALL_OW 12
11548: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11549: LD_INT 70
11551: PPUSH
11552: CALL_OW 67
// if i then
11556: LD_VAR 0 1
11560: IFFALSE 11576
// Say ( JMM , D2c-JMM-1 ) else
11562: LD_EXP 37
11566: PPUSH
11567: LD_STRING D2c-JMM-1
11569: PPUSH
11570: CALL_OW 88
11574: GO 11588
// Say ( JMM , D2c-JMM-1a ) ;
11576: LD_EXP 37
11580: PPUSH
11581: LD_STRING D2c-JMM-1a
11583: PPUSH
11584: CALL_OW 88
// end ;
11588: PPOPN 1
11590: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11591: LD_EXP 14
11595: PUSH
11596: LD_EXP 38
11600: PPUSH
11601: CALL_OW 302
11605: AND
11606: PUSH
11607: LD_EXP 38
11611: PPUSH
11612: CALL 911 0 1
11616: AND
11617: PUSH
11618: LD_EXP 17
11622: NOT
11623: AND
11624: IFFALSE 11656
11626: GO 11628
11628: DISABLE
// begin bobby_in_veh := true ;
11629: LD_ADDR_EXP 17
11633: PUSH
11634: LD_INT 1
11636: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11637: LD_INT 70
11639: PPUSH
11640: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11644: LD_EXP 38
11648: PPUSH
11649: LD_STRING D2c-Bobby-1
11651: PPUSH
11652: CALL_OW 88
11656: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11657: LD_EXP 14
11661: PUSH
11662: LD_EXP 40
11666: PPUSH
11667: CALL_OW 302
11671: AND
11672: PUSH
11673: LD_EXP 40
11677: PPUSH
11678: CALL 911 0 1
11682: AND
11683: PUSH
11684: LD_EXP 19
11688: NOT
11689: AND
11690: IFFALSE 11722
11692: GO 11694
11694: DISABLE
// begin lisa_in_veh := true ;
11695: LD_ADDR_EXP 19
11699: PUSH
11700: LD_INT 1
11702: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11703: LD_INT 70
11705: PPUSH
11706: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11710: LD_EXP 40
11714: PPUSH
11715: LD_STRING D2c-Lisa-1
11717: PPUSH
11718: CALL_OW 88
11722: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11723: LD_EXP 14
11727: PUSH
11728: LD_EXP 39
11732: PPUSH
11733: CALL_OW 302
11737: AND
11738: PUSH
11739: LD_EXP 39
11743: PPUSH
11744: CALL 911 0 1
11748: AND
11749: PUSH
11750: LD_EXP 18
11754: NOT
11755: AND
11756: IFFALSE 11827
11758: GO 11760
11760: DISABLE
11761: LD_INT 0
11763: PPUSH
// begin cyrus_in_veh := true ;
11764: LD_ADDR_EXP 18
11768: PUSH
11769: LD_INT 1
11771: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11772: LD_ADDR_VAR 0 1
11776: PUSH
11777: LD_INT 0
11779: PPUSH
11780: LD_INT 1
11782: PPUSH
11783: CALL_OW 12
11787: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11788: LD_INT 70
11790: PPUSH
11791: CALL_OW 67
// if i then
11795: LD_VAR 0 1
11799: IFFALSE 11815
// Say ( Cyrus , D2c-Cyrus-1 ) else
11801: LD_EXP 39
11805: PPUSH
11806: LD_STRING D2c-Cyrus-1
11808: PPUSH
11809: CALL_OW 88
11813: GO 11827
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11815: LD_EXP 39
11819: PPUSH
11820: LD_STRING D2c-Cyrus-1a
11822: PPUSH
11823: CALL_OW 88
// end ;
11827: PPOPN 1
11829: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11830: LD_EXP 44
11834: PPUSH
11835: LD_INT 16
11837: PPUSH
11838: CALL_OW 308
11842: IFFALSE 12123
11844: GO 11846
11846: DISABLE
11847: LD_INT 0
11849: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11850: LD_INT 3
11852: PPUSH
11853: LD_EXP 44
11857: PPUSH
11858: CALL_OW 471
// send_attack_on_cornel := true ;
11862: LD_ADDR_EXP 32
11866: PUSH
11867: LD_INT 1
11869: ST_TO_ADDR
// if ru_vehicles then
11870: LD_EXP 56
11874: IFFALSE 11908
// for i in ru_vehicles do
11876: LD_ADDR_VAR 0 1
11880: PUSH
11881: LD_EXP 56
11885: PUSH
11886: FOR_IN
11887: IFFALSE 11906
// ComAgressiveMove ( i , 215 , 69 ) ;
11889: LD_VAR 0 1
11893: PPUSH
11894: LD_INT 215
11896: PPUSH
11897: LD_INT 69
11899: PPUSH
11900: CALL_OW 114
11904: GO 11886
11906: POP
11907: POP
// if ru_patrol then
11908: LD_EXP 53
11912: IFFALSE 11946
// for i in ru_patrol do
11914: LD_ADDR_VAR 0 1
11918: PUSH
11919: LD_EXP 53
11923: PUSH
11924: FOR_IN
11925: IFFALSE 11944
// ComAgressiveMove ( i , 215 , 69 ) ;
11927: LD_VAR 0 1
11931: PPUSH
11932: LD_INT 215
11934: PPUSH
11935: LD_INT 69
11937: PPUSH
11938: CALL_OW 114
11942: GO 11924
11944: POP
11945: POP
// if frank_send_to_scout then
11946: LD_EXP 15
11950: IFFALSE 11964
// SayRadio ( Frank , D3b-Frank-1 ) ;
11952: LD_EXP 51
11956: PPUSH
11957: LD_STRING D3b-Frank-1
11959: PPUSH
11960: CALL_OW 94
// wait ( 0 0$03 ) ;
11964: LD_INT 105
11966: PPUSH
11967: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11971: LD_EXP 44
11975: PPUSH
11976: LD_STRING D4-Corn-1
11978: PPUSH
11979: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11983: LD_INT 35
11985: PPUSH
11986: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11990: LD_INT 22
11992: PUSH
11993: LD_INT 4
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 21
12002: PUSH
12003: LD_INT 1
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 3
12012: PUSH
12013: LD_INT 24
12015: PUSH
12016: LD_INT 1000
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: PPUSH
12032: CALL_OW 69
12036: PUSH
12037: LD_INT 6
12039: LESS
12040: IFFALSE 11983
// if Cornel then
12042: LD_EXP 44
12046: IFFALSE 12086
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
12048: LD_EXP 44
12052: PPUSH
12053: LD_STRING D5-Corn-1
12055: PPUSH
12056: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
12060: LD_EXP 44
12064: PPUSH
12065: LD_EXP 2
12069: PUSH
12070: LD_STRING Cornel
12072: STR
12073: PPUSH
12074: CALL_OW 38
// cornel_saved := true ;
12078: LD_ADDR_EXP 27
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
12086: LD_INT 4
12088: PPUSH
12089: LD_INT 8
12091: PPUSH
12092: CALL_OW 343
// wait ( 0 0$01 ) ;
12096: LD_INT 35
12098: PPUSH
12099: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
12103: LD_INT 3
12105: PPUSH
12106: LD_EXP 44
12110: PPUSH
12111: CALL_OW 472
// send_attack_on_cornel := false ;
12115: LD_ADDR_EXP 32
12119: PUSH
12120: LD_INT 0
12122: ST_TO_ADDR
// end ;
12123: PPOPN 1
12125: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
12126: LD_INT 9
12128: PPUSH
12129: LD_INT 22
12131: PUSH
12132: LD_INT 1
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PPUSH
12139: CALL_OW 70
12143: PUSH
12144: LD_EXP 33
12148: OR
12149: IFFALSE 12370
12151: GO 12153
12153: DISABLE
12154: LD_INT 0
12156: PPUSH
12157: PPUSH
// begin enable ;
12158: ENABLE
// if not jmm_on_west then
12159: LD_EXP 5
12163: NOT
12164: IFFALSE 12175
// begin YouLost ( 4 ) ;
12166: LD_STRING 4
12168: PPUSH
12169: CALL_OW 104
// exit ;
12173: GO 12370
// end ; if not game_end then
12175: LD_EXP 33
12179: NOT
12180: IFFALSE 12190
// game_end := true ;
12182: LD_ADDR_EXP 33
12186: PUSH
12187: LD_INT 1
12189: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
12190: LD_ADDR_VAR 0 2
12194: PUSH
12195: LD_INT 9
12197: PPUSH
12198: LD_INT 22
12200: PUSH
12201: LD_INT 1
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PPUSH
12208: CALL_OW 70
12212: ST_TO_ADDR
// if not filter then
12213: LD_VAR 0 2
12217: NOT
12218: IFFALSE 12222
// exit ;
12220: GO 12370
// for i in filter do
12222: LD_ADDR_VAR 0 1
12226: PUSH
12227: LD_VAR 0 2
12231: PUSH
12232: FOR_IN
12233: IFFALSE 12368
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
12235: LD_VAR 0 1
12239: PPUSH
12240: CALL_OW 302
12244: PUSH
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 247
12254: PUSH
12255: LD_INT 2
12257: EQUAL
12258: AND
12259: IFFALSE 12331
// begin if i = JMM and save_group < 4 then
12261: LD_VAR 0 1
12265: PUSH
12266: LD_EXP 37
12270: EQUAL
12271: PUSH
12272: LD_EXP 23
12276: PUSH
12277: LD_INT 4
12279: LESS
12280: AND
12281: IFFALSE 12285
// continue ;
12283: GO 12232
// if GetNation ( i ) = nation_american then
12285: LD_VAR 0 1
12289: PPUSH
12290: CALL_OW 248
12294: PUSH
12295: LD_INT 1
12297: EQUAL
12298: IFFALSE 12308
// veh_on_meta := true ;
12300: LD_ADDR_EXP 28
12304: PUSH
12305: LD_INT 1
12307: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
12308: LD_VAR 0 1
12312: PPUSH
12313: CALL_OW 311
12317: PPUSH
12318: CALL 12373 0 1
// RemoveUnit ( i ) ;
12322: LD_VAR 0 1
12326: PPUSH
12327: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
12331: LD_VAR 0 1
12335: PPUSH
12336: CALL_OW 302
12340: PUSH
12341: LD_VAR 0 1
12345: PPUSH
12346: CALL_OW 247
12350: PUSH
12351: LD_INT 1
12353: EQUAL
12354: AND
12355: IFFALSE 12366
// Save ( i ) ;
12357: LD_VAR 0 1
12361: PPUSH
12362: CALL 12373 0 1
// end ;
12366: GO 12232
12368: POP
12369: POP
// end ;
12370: PPOPN 2
12372: END
// export function Save ( i ) ; begin
12373: LD_INT 0
12375: PPUSH
// if i = JMM and save_counter >= 4 then
12376: LD_VAR 0 1
12380: PUSH
12381: LD_EXP 37
12385: EQUAL
12386: PUSH
12387: LD_EXP 36
12391: PUSH
12392: LD_INT 4
12394: GREATEREQUAL
12395: AND
12396: IFFALSE 12532
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12398: LD_EXP 24
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_INT 1
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 21
12415: PUSH
12416: LD_INT 1
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 69
12431: PUSH
12432: LD_INT 1
12434: GREATER
12435: AND
12436: IFFALSE 12493
// begin show_query := false ;
12438: LD_ADDR_EXP 24
12442: PUSH
12443: LD_INT 0
12445: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12446: LD_STRING Q2
12448: PPUSH
12449: CALL_OW 97
12453: PUSH
12454: LD_INT 1
12456: DOUBLE
12457: EQUAL
12458: IFTRUE 12462
12460: GO 12473
12462: POP
// wait_for_them := true ; 2 :
12463: LD_ADDR_EXP 25
12467: PUSH
12468: LD_INT 1
12470: ST_TO_ADDR
12471: GO 12493
12473: LD_INT 2
12475: DOUBLE
12476: EQUAL
12477: IFTRUE 12481
12479: GO 12492
12481: POP
// wait_for_them := false ; end ;
12482: LD_ADDR_EXP 25
12486: PUSH
12487: LD_INT 0
12489: ST_TO_ADDR
12490: GO 12493
12492: POP
// end ; save_counter := save_counter + 1 ;
12493: LD_ADDR_EXP 36
12497: PUSH
12498: LD_EXP 36
12502: PUSH
12503: LD_INT 1
12505: PLUS
12506: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12507: LD_ADDR_EXP 23
12511: PUSH
12512: LD_EXP 23
12516: PUSH
12517: LD_EXP 37
12521: ADD
12522: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12523: LD_EXP 37
12527: PPUSH
12528: CALL_OW 64
// end ; if i = Lisa then
12532: LD_VAR 0 1
12536: PUSH
12537: LD_EXP 40
12541: EQUAL
12542: IFFALSE 12583
// begin save_counter := save_counter + 1 ;
12544: LD_ADDR_EXP 36
12548: PUSH
12549: LD_EXP 36
12553: PUSH
12554: LD_INT 1
12556: PLUS
12557: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12558: LD_ADDR_EXP 23
12562: PUSH
12563: LD_EXP 23
12567: PUSH
12568: LD_EXP 40
12572: ADD
12573: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12574: LD_EXP 40
12578: PPUSH
12579: CALL_OW 64
// end ; if i = Bobby then
12583: LD_VAR 0 1
12587: PUSH
12588: LD_EXP 38
12592: EQUAL
12593: IFFALSE 12634
// begin save_counter := save_counter + 1 ;
12595: LD_ADDR_EXP 36
12599: PUSH
12600: LD_EXP 36
12604: PUSH
12605: LD_INT 1
12607: PLUS
12608: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12609: LD_ADDR_EXP 23
12613: PUSH
12614: LD_EXP 23
12618: PUSH
12619: LD_EXP 38
12623: ADD
12624: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12625: LD_EXP 38
12629: PPUSH
12630: CALL_OW 64
// end ; if i = Cyrus then
12634: LD_VAR 0 1
12638: PUSH
12639: LD_EXP 39
12643: EQUAL
12644: IFFALSE 12685
// begin save_counter := save_counter + 1 ;
12646: LD_ADDR_EXP 36
12650: PUSH
12651: LD_EXP 36
12655: PUSH
12656: LD_INT 1
12658: PLUS
12659: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12660: LD_ADDR_EXP 23
12664: PUSH
12665: LD_EXP 23
12669: PUSH
12670: LD_EXP 39
12674: ADD
12675: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12676: LD_EXP 39
12680: PPUSH
12681: CALL_OW 64
// end ; if i = Khatam then
12685: LD_VAR 0 1
12689: PUSH
12690: LD_EXP 41
12694: EQUAL
12695: IFFALSE 12736
// begin save_counter := save_counter + 1 ;
12697: LD_ADDR_EXP 36
12701: PUSH
12702: LD_EXP 36
12706: PUSH
12707: LD_INT 1
12709: PLUS
12710: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12711: LD_ADDR_EXP 23
12715: PUSH
12716: LD_EXP 23
12720: PUSH
12721: LD_EXP 41
12725: ADD
12726: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12727: LD_EXP 41
12731: PPUSH
12732: CALL_OW 64
// end ; if i = Frank then
12736: LD_VAR 0 1
12740: PUSH
12741: LD_EXP 51
12745: EQUAL
12746: IFFALSE 12787
// begin save_counter := save_counter + 1 ;
12748: LD_ADDR_EXP 36
12752: PUSH
12753: LD_EXP 36
12757: PUSH
12758: LD_INT 1
12760: PLUS
12761: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12762: LD_ADDR_EXP 23
12766: PUSH
12767: LD_EXP 23
12771: PUSH
12772: LD_EXP 51
12776: ADD
12777: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12778: LD_EXP 51
12782: PPUSH
12783: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12787: LD_VAR 0 1
12791: PUSH
12792: LD_EXP 37
12796: NONEQUAL
12797: PUSH
12798: LD_VAR 0 1
12802: PPUSH
12803: CALL_OW 302
12807: AND
12808: PUSH
12809: LD_VAR 0 1
12813: PPUSH
12814: CALL_OW 247
12818: PUSH
12819: LD_INT 1
12821: EQUAL
12822: AND
12823: PUSH
12824: LD_VAR 0 1
12828: PUSH
12829: LD_EXP 23
12833: IN
12834: NOT
12835: AND
12836: IFFALSE 12877
// begin save_counter := save_counter + 1 ;
12838: LD_ADDR_EXP 36
12842: PUSH
12843: LD_EXP 36
12847: PUSH
12848: LD_INT 1
12850: PLUS
12851: ST_TO_ADDR
// save_others := save_others ^ i ;
12852: LD_ADDR_EXP 22
12856: PUSH
12857: LD_EXP 22
12861: PUSH
12862: LD_VAR 0 1
12866: ADD
12867: ST_TO_ADDR
// RemoveUnit ( i ) ;
12868: LD_VAR 0 1
12872: PPUSH
12873: CALL_OW 64
// end ; end ;
12877: LD_VAR 0 2
12881: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12882: LD_EXP 24
12886: NOT
12887: PUSH
12888: LD_EXP 25
12892: NOT
12893: AND
12894: PUSH
12895: LD_INT 22
12897: PUSH
12898: LD_INT 1
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 21
12907: PUSH
12908: LD_INT 1
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PPUSH
12919: CALL_OW 69
12923: PUSH
12924: LD_INT 0
12926: EQUAL
12927: OR
12928: IFFALSE 12937
12930: GO 12932
12932: DISABLE
// EndMission ;
12933: CALL 12938 0 0
12937: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12938: LD_INT 0
12940: PPUSH
12941: PPUSH
12942: PPUSH
12943: PPUSH
12944: PPUSH
// wait ( 0 0$01 ) ;
12945: LD_INT 35
12947: PPUSH
12948: CALL_OW 67
// if tick <= 12 12$00 then
12952: LD_OWVAR 1
12956: PUSH
12957: LD_INT 25200
12959: LESSEQUAL
12960: IFFALSE 12969
// SetAchievement ( ACH_ASPEED_3 ) ;
12962: LD_STRING ACH_ASPEED_3
12964: PPUSH
12965: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12969: LD_EXP 23
12973: PUSH
12974: LD_EXP 22
12978: ADD
12979: PPUSH
12980: LD_INT 25
12982: PUSH
12983: LD_INT 4
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PPUSH
12990: CALL_OW 72
12994: PUSH
12995: LD_INT 0
12997: EQUAL
12998: IFFALSE 13014
// begin wait ( 3 ) ;
13000: LD_INT 3
13002: PPUSH
13003: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
13007: LD_STRING ACH_NOSCI
13009: PPUSH
13010: CALL_OW 543
// end ; m1 := solar_builded ;
13014: LD_ADDR_VAR 0 3
13018: PUSH
13019: LD_EXP 14
13023: ST_TO_ADDR
// m2 := veh_on_meta ;
13024: LD_ADDR_VAR 0 4
13028: PUSH
13029: LD_EXP 28
13033: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
13034: LD_ADDR_VAR 0 5
13038: PUSH
13039: LD_EXP 34
13043: PUSH
13044: LD_INT 0
13046: EQUAL
13047: ST_TO_ADDR
// if solar_builded then
13048: LD_EXP 14
13052: IFFALSE 13066
// AddMedal ( Solar1 , 1 ) else
13054: LD_STRING Solar1
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 101
13064: GO 13077
// AddMedal ( Solar1 , - 1 ) ;
13066: LD_STRING Solar1
13068: PPUSH
13069: LD_INT 1
13071: NEG
13072: PPUSH
13073: CALL_OW 101
// if veh_on_meta then
13077: LD_EXP 28
13081: IFFALSE 13095
// AddMedal ( Solar2 , 1 ) else
13083: LD_STRING Solar2
13085: PPUSH
13086: LD_INT 1
13088: PPUSH
13089: CALL_OW 101
13093: GO 13125
// if solar_builded then
13095: LD_EXP 14
13099: IFFALSE 13114
// AddMedal ( Solar2 , - 1 ) else
13101: LD_STRING Solar2
13103: PPUSH
13104: LD_INT 1
13106: NEG
13107: PPUSH
13108: CALL_OW 101
13112: GO 13125
// AddMedal ( Solar2 , - 2 ) ;
13114: LD_STRING Solar2
13116: PPUSH
13117: LD_INT 2
13119: NEG
13120: PPUSH
13121: CALL_OW 101
// if lose_counter = 0 then
13125: LD_EXP 34
13129: PUSH
13130: LD_INT 0
13132: EQUAL
13133: IFFALSE 13147
// AddMedal ( No , 1 ) else
13135: LD_STRING No
13137: PPUSH
13138: LD_INT 1
13140: PPUSH
13141: CALL_OW 101
13145: GO 13191
// if lose_counter > 0 and lose_counter < 5 then
13147: LD_EXP 34
13151: PUSH
13152: LD_INT 0
13154: GREATER
13155: PUSH
13156: LD_EXP 34
13160: PUSH
13161: LD_INT 5
13163: LESS
13164: AND
13165: IFFALSE 13180
// AddMedal ( No , - 1 ) else
13167: LD_STRING No
13169: PPUSH
13170: LD_INT 1
13172: NEG
13173: PPUSH
13174: CALL_OW 101
13178: GO 13191
// AddMedal ( UpTo4 , - 1 ) ;
13180: LD_STRING UpTo4
13182: PPUSH
13183: LD_INT 1
13185: NEG
13186: PPUSH
13187: CALL_OW 101
// GiveMedals ( MAIN ) ;
13191: LD_STRING MAIN
13193: PPUSH
13194: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
13198: LD_OWVAR 67
13202: PUSH
13203: LD_INT 3
13205: GREATEREQUAL
13206: PUSH
13207: LD_VAR 0 3
13211: AND
13212: PUSH
13213: LD_VAR 0 4
13217: AND
13218: PUSH
13219: LD_VAR 0 5
13223: AND
13224: IFFALSE 13236
// SetAchievementEX ( ACH_AMER , 3 ) ;
13226: LD_STRING ACH_AMER
13228: PPUSH
13229: LD_INT 3
13231: PPUSH
13232: CALL_OW 564
// if IsDead ( Pokryshkin ) then
13236: LD_EXP 52
13240: PPUSH
13241: CALL_OW 301
13245: IFFALSE 13301
// begin stop_talking := true ;
13247: LD_ADDR_OWVAR 56
13251: PUSH
13252: LD_INT 1
13254: ST_TO_ADDR
// for i in save_group union save_others do
13255: LD_ADDR_VAR 0 2
13259: PUSH
13260: LD_EXP 23
13264: PUSH
13265: LD_EXP 22
13269: UNION
13270: PUSH
13271: FOR_IN
13272: IFFALSE 13291
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
13274: LD_VAR 0 2
13278: PPUSH
13279: LD_INT 1
13281: PPUSH
13282: LD_INT 1500
13284: PPUSH
13285: CALL_OW 591
13289: GO 13271
13291: POP
13292: POP
// stop_talking := false ;
13293: LD_ADDR_OWVAR 56
13297: PUSH
13298: LD_INT 0
13300: ST_TO_ADDR
// end ; RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_american ] ] ) ) ;
13301: LD_INT 22
13303: PUSH
13304: LD_INT 1
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PUSH
13311: LD_INT 23
13313: PUSH
13314: LD_INT 1
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: PPUSH
13325: CALL_OW 69
13329: PPUSH
13330: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
13334: LD_EXP 37
13338: PPUSH
13339: LD_EXP 2
13343: PUSH
13344: LD_STRING JMM
13346: STR
13347: PPUSH
13348: CALL_OW 38
// if Bobby in save_group then
13352: LD_EXP 38
13356: PUSH
13357: LD_EXP 23
13361: IN
13362: IFFALSE 13382
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
13364: LD_EXP 38
13368: PPUSH
13369: LD_EXP 2
13373: PUSH
13374: LD_STRING Bobby
13376: STR
13377: PPUSH
13378: CALL_OW 38
// if Cyrus in save_group then
13382: LD_EXP 39
13386: PUSH
13387: LD_EXP 23
13391: IN
13392: IFFALSE 13412
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
13394: LD_EXP 39
13398: PPUSH
13399: LD_EXP 2
13403: PUSH
13404: LD_STRING Cyrus
13406: STR
13407: PPUSH
13408: CALL_OW 38
// if Lisa in save_group then
13412: LD_EXP 40
13416: PUSH
13417: LD_EXP 23
13421: IN
13422: IFFALSE 13442
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13424: LD_EXP 40
13428: PPUSH
13429: LD_EXP 2
13433: PUSH
13434: LD_STRING Lisa
13436: STR
13437: PPUSH
13438: CALL_OW 38
// if Frank in save_group then
13442: LD_EXP 51
13446: PUSH
13447: LD_EXP 23
13451: IN
13452: IFFALSE 13479
// begin ToLua ( enableBioCharacter(BIO_FRANK) ) ;
13454: LD_STRING enableBioCharacter(BIO_FRANK)
13456: PPUSH
13457: CALL_OW 559
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13461: LD_EXP 51
13465: PPUSH
13466: LD_EXP 2
13470: PUSH
13471: LD_STRING Frank
13473: STR
13474: PPUSH
13475: CALL_OW 38
// end ; if Khatam in save_group then
13479: LD_EXP 41
13483: PUSH
13484: LD_EXP 23
13488: IN
13489: IFFALSE 13509
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13491: LD_EXP 41
13495: PPUSH
13496: LD_EXP 2
13500: PUSH
13501: LD_STRING Khatam
13503: STR
13504: PPUSH
13505: CALL_OW 38
// if save_others then
13509: LD_EXP 22
13513: IFFALSE 13527
// SaveCharacters ( save_others , 03_others ) ;
13515: LD_EXP 22
13519: PPUSH
13520: LD_STRING 03_others
13522: PPUSH
13523: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ANDY) ) ;
13527: LD_STRING enableBioCharacter(BIO_ANDY)
13529: PPUSH
13530: CALL_OW 559
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13534: LD_EXP 45
13538: PUSH
13539: LD_EXP 45
13543: PPUSH
13544: CALL_OW 302
13548: AND
13549: PUSH
13550: LD_EXP 27
13554: AND
13555: IFFALSE 13567
// begin ResetFog ;
13557: CALL_OW 335
// DisplayEndingScene ;
13561: CALL 13589 0 0
// end else
13565: GO 13580
// DeleteCharacters ( mission_prefix & Cornel ) ;
13567: LD_EXP 2
13571: PUSH
13572: LD_STRING Cornel
13574: STR
13575: PPUSH
13576: CALL_OW 40
// YouWin ;
13580: CALL_OW 103
// end ;
13584: LD_VAR 0 1
13588: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13589: LD_INT 0
13591: PPUSH
13592: PPUSH
13593: PPUSH
13594: PPUSH
13595: PPUSH
13596: PPUSH
// InGameOn ;
13597: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13601: LD_INT 208
13603: PPUSH
13604: LD_INT 62
13606: PPUSH
13607: LD_INT 1
13609: PPUSH
13610: LD_INT 10
13612: NEG
13613: PPUSH
13614: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13618: LD_INT 208
13620: PPUSH
13621: LD_INT 62
13623: PPUSH
13624: LD_INT 1
13626: PPUSH
13627: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13631: LD_ADDR_VAR 0 3
13635: PUSH
13636: LD_INT 22
13638: PUSH
13639: LD_INT 3
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: LD_INT 2
13648: PUSH
13649: LD_INT 21
13651: PUSH
13652: LD_INT 2
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PUSH
13659: LD_INT 21
13661: PUSH
13662: LD_INT 1
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PPUSH
13678: CALL_OW 69
13682: ST_TO_ADDR
// if filter then
13683: LD_VAR 0 3
13687: IFFALSE 13715
// for i in filter do
13689: LD_ADDR_VAR 0 2
13693: PUSH
13694: LD_VAR 0 3
13698: PUSH
13699: FOR_IN
13700: IFFALSE 13713
// RemoveUnit ( i ) ;
13702: LD_VAR 0 2
13706: PPUSH
13707: CALL_OW 64
13711: GO 13699
13713: POP
13714: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13715: LD_ADDR_VAR 0 3
13719: PUSH
13720: LD_INT 22
13722: PUSH
13723: LD_INT 4
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 21
13732: PUSH
13733: LD_INT 1
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PPUSH
13744: CALL_OW 69
13748: ST_TO_ADDR
// if filter then
13749: LD_VAR 0 3
13753: IFFALSE 13784
// for i in filter do
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_VAR 0 3
13764: PUSH
13765: FOR_IN
13766: IFFALSE 13782
// SetLives ( i , 0 ) ;
13768: LD_VAR 0 2
13772: PPUSH
13773: LD_INT 0
13775: PPUSH
13776: CALL_OW 234
13780: GO 13765
13782: POP
13783: POP
// uc_side := 4 ;
13784: LD_ADDR_OWVAR 20
13788: PUSH
13789: LD_INT 4
13791: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13792: LD_ADDR_VAR 0 4
13796: PUSH
13797: LD_STRING Cornell
13799: PPUSH
13800: LD_INT 0
13802: PPUSH
13803: LD_STRING 
13805: PPUSH
13806: CALL 40548 0 3
13810: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13811: LD_VAR 0 4
13815: PPUSH
13816: LD_INT 208
13818: PPUSH
13819: LD_INT 62
13821: PPUSH
13822: LD_INT 0
13824: PPUSH
13825: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13829: LD_VAR 0 4
13833: PPUSH
13834: LD_INT 100
13836: PPUSH
13837: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13841: LD_INT 3
13843: PPUSH
13844: LD_VAR 0 4
13848: PPUSH
13849: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13853: LD_INT 4
13855: PPUSH
13856: LD_INT 3
13858: PPUSH
13859: LD_INT 1
13861: PPUSH
13862: LD_INT 1
13864: PPUSH
13865: CALL_OW 80
// uc_side := 3 ;
13869: LD_ADDR_OWVAR 20
13873: PUSH
13874: LD_INT 3
13876: ST_TO_ADDR
// uc_nation := 3 ;
13877: LD_ADDR_OWVAR 21
13881: PUSH
13882: LD_INT 3
13884: ST_TO_ADDR
// InitHc ;
13885: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13889: LD_ADDR_VAR 0 5
13893: PUSH
13894: LD_STRING Mikhail
13896: PPUSH
13897: LD_INT 0
13899: PPUSH
13900: LD_STRING 
13902: PPUSH
13903: CALL 40548 0 3
13907: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13908: LD_INT 1
13910: PPUSH
13911: LD_INT 1
13913: PPUSH
13914: LD_INT 0
13916: PPUSH
13917: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13921: LD_ADDR_VAR 0 6
13925: PUSH
13926: LD_VAR 0 6
13930: PUSH
13931: CALL_OW 44
13935: ADD
13936: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13937: LD_ADDR_VAR 0 6
13941: PUSH
13942: LD_VAR 0 6
13946: PUSH
13947: CALL_OW 44
13951: ADD
13952: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13953: LD_INT 2
13955: PPUSH
13956: LD_INT 4
13958: PPUSH
13959: LD_INT 0
13961: PPUSH
13962: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13966: LD_ADDR_VAR 0 6
13970: PUSH
13971: LD_VAR 0 6
13975: PUSH
13976: CALL_OW 44
13980: ADD
13981: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13982: LD_VAR 0 5
13986: PPUSH
13987: LD_INT 17
13989: PPUSH
13990: LD_INT 0
13992: PPUSH
13993: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13997: LD_VAR 0 5
14001: PPUSH
14002: LD_INT 210
14004: PPUSH
14005: LD_INT 63
14007: PPUSH
14008: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
14012: LD_VAR 0 5
14016: PPUSH
14017: LD_INT 208
14019: PPUSH
14020: LD_INT 62
14022: PPUSH
14023: CALL_OW 178
// for i in fake_russians do
14027: LD_ADDR_VAR 0 2
14031: PUSH
14032: LD_VAR 0 6
14036: PUSH
14037: FOR_IN
14038: IFFALSE 14116
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
14040: LD_VAR 0 2
14044: PPUSH
14045: LD_INT 17
14047: PPUSH
14048: LD_INT 0
14050: PPUSH
14051: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
14055: LD_VAR 0 2
14059: PPUSH
14060: LD_INT 215
14062: PPUSH
14063: LD_INT 67
14065: PPUSH
14066: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
14070: LD_VAR 0 2
14074: PPUSH
14075: LD_INT 208
14077: PPUSH
14078: LD_INT 62
14080: PPUSH
14081: CALL_OW 178
// if GetClass ( i ) = 4 then
14085: LD_VAR 0 2
14089: PPUSH
14090: CALL_OW 257
14094: PUSH
14095: LD_INT 4
14097: EQUAL
14098: IFFALSE 14114
// ComHeal ( i , fake_cornel ) ;
14100: LD_VAR 0 2
14104: PPUSH
14105: LD_VAR 0 4
14109: PPUSH
14110: CALL_OW 128
// end ;
14114: GO 14037
14116: POP
14117: POP
// Wait ( 0 0$01 ) ;
14118: LD_INT 35
14120: PPUSH
14121: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
14125: LD_INT 208
14127: PPUSH
14128: LD_INT 62
14130: PPUSH
14131: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
14135: LD_INT 208
14137: PPUSH
14138: LD_INT 62
14140: PPUSH
14141: LD_INT 1
14143: PPUSH
14144: LD_INT 10
14146: NEG
14147: PPUSH
14148: CALL_OW 330
// Wait ( 0 0$15 ) ;
14152: LD_INT 525
14154: PPUSH
14155: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
14159: LD_INT 208
14161: PPUSH
14162: LD_INT 62
14164: PPUSH
14165: LD_INT 1
14167: PPUSH
14168: CALL_OW 331
// ResetFog ;
14172: CALL_OW 335
// InGameOff ;
14176: CALL_OW 9
// end ;
14180: LD_VAR 0 1
14184: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
14185: LD_INT 10
14187: PPUSH
14188: LD_INT 22
14190: PUSH
14191: LD_INT 1
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PPUSH
14198: CALL_OW 70
14202: PUSH
14203: LD_EXP 44
14207: PPUSH
14208: CALL_OW 302
14212: AND
14213: PUSH
14214: LD_INT 22
14216: PUSH
14217: LD_INT 1
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PPUSH
14224: CALL_OW 69
14228: PPUSH
14229: LD_EXP 44
14233: PPUSH
14234: CALL_OW 74
14238: PPUSH
14239: LD_EXP 44
14243: PPUSH
14244: CALL_OW 296
14248: PUSH
14249: LD_INT 30
14251: LESS
14252: OR
14253: IFFALSE 14304
14255: GO 14257
14257: DISABLE
// begin enable ;
14258: ENABLE
// powell_warn := powell_warn + 1 ;
14259: LD_ADDR_EXP 35
14263: PUSH
14264: LD_EXP 35
14268: PUSH
14269: LD_INT 1
14271: PLUS
14272: ST_TO_ADDR
// if powell_warn = 3 then
14273: LD_EXP 35
14277: PUSH
14278: LD_INT 3
14280: EQUAL
14281: IFFALSE 14292
// begin YouLost ( 5 ) ;
14283: LD_STRING 5
14285: PPUSH
14286: CALL_OW 104
// exit ;
14290: GO 14304
// end ; SayRadioNoFace ( Powell , DWarn-Pow-1 ) ;
14292: LD_EXP 46
14296: PPUSH
14297: LD_STRING DWarn-Pow-1
14299: PPUSH
14300: CALL_OW 586
// end ; end_of_file
14304: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
14305: LD_EXP 8
14309: IFFALSE 16146
14311: GO 14313
14313: DISABLE
14314: LD_INT 0
14316: PPUSH
14317: PPUSH
14318: PPUSH
14319: PPUSH
14320: PPUSH
14321: PPUSH
14322: PPUSH
14323: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
14324: LD_EXP 44
14328: PUSH
14329: LD_EXP 45
14333: ADD
14334: PUSH
14335: LD_EXP 6
14339: ADD
14340: PPUSH
14341: LD_INT 250
14343: PPUSH
14344: LD_INT 120
14346: PPUSH
14347: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
14351: LD_ADDR_VAR 0 2
14355: PUSH
14356: LD_EXP 6
14360: PPUSH
14361: LD_INT 25
14363: PUSH
14364: LD_INT 2
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PPUSH
14371: CALL_OW 72
14375: PUSH
14376: LD_EXP 45
14380: DIFF
14381: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
14382: LD_ADDR_VAR 0 3
14386: PUSH
14387: LD_EXP 6
14391: PPUSH
14392: LD_INT 21
14394: PUSH
14395: LD_INT 1
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PPUSH
14402: CALL_OW 72
14406: PUSH
14407: LD_VAR 0 2
14411: DIFF
14412: ST_TO_ADDR
// if not has_eng then
14413: LD_VAR 0 2
14417: NOT
14418: IFFALSE 14501
// begin uc_side := 4 ;
14420: LD_ADDR_OWVAR 20
14424: PUSH
14425: LD_INT 4
14427: ST_TO_ADDR
// uc_nation := 1 ;
14428: LD_ADDR_OWVAR 21
14432: PUSH
14433: LD_INT 1
14435: ST_TO_ADDR
// bc_type := b_depot ;
14436: LD_ADDR_OWVAR 42
14440: PUSH
14441: LD_INT 0
14443: ST_TO_ADDR
// bc_level := 2 ;
14444: LD_ADDR_OWVAR 43
14448: PUSH
14449: LD_INT 2
14451: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14452: LD_ADDR_VAR 0 4
14456: PUSH
14457: LD_INT 264
14459: PPUSH
14460: LD_INT 120
14462: PPUSH
14463: LD_INT 4
14465: PPUSH
14466: CALL_OW 47
14470: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14471: LD_INT 264
14473: PPUSH
14474: LD_INT 120
14476: PPUSH
14477: LD_INT 4
14479: PPUSH
14480: LD_INT 10
14482: NEG
14483: PPUSH
14484: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14488: LD_INT 264
14490: PPUSH
14491: LD_INT 120
14493: PPUSH
14494: LD_INT 4
14496: PPUSH
14497: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14501: LD_INT 35
14503: PPUSH
14504: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14508: LD_EXP 44
14512: PPUSH
14513: LD_INT 10
14515: PPUSH
14516: CALL_OW 308
14520: PUSH
14521: LD_EXP 44
14525: PPUSH
14526: CALL_OW 310
14530: PPUSH
14531: LD_INT 10
14533: PPUSH
14534: CALL_OW 308
14538: OR
14539: IFFALSE 14501
// if has_eng and not dep then
14541: LD_VAR 0 2
14545: PUSH
14546: LD_VAR 0 4
14550: NOT
14551: AND
14552: IFFALSE 14702
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14554: LD_VAR 0 2
14558: PPUSH
14559: LD_INT 0
14561: PPUSH
14562: LD_INT 264
14564: PPUSH
14565: LD_INT 120
14567: PPUSH
14568: LD_INT 4
14570: PPUSH
14571: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14575: LD_INT 35
14577: PPUSH
14578: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14582: LD_INT 22
14584: PUSH
14585: LD_INT 4
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: LD_INT 30
14594: PUSH
14595: LD_INT 0
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PPUSH
14606: CALL_OW 69
14610: IFFALSE 14575
// ComMoveXY ( filter , 264 , 120 ) ;
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_INT 264
14619: PPUSH
14620: LD_INT 120
14622: PPUSH
14623: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14627: LD_INT 35
14629: PPUSH
14630: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14634: LD_INT 22
14636: PUSH
14637: LD_INT 4
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PUSH
14644: LD_INT 30
14646: PUSH
14647: LD_INT 0
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 3
14656: PUSH
14657: LD_INT 57
14659: PUSH
14660: EMPTY
14661: LIST
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: LIST
14671: PPUSH
14672: CALL_OW 69
14676: IFFALSE 14627
// ComMoveXY ( filter , 247 , 113 ) ;
14678: LD_VAR 0 3
14682: PPUSH
14683: LD_INT 247
14685: PPUSH
14686: LD_INT 113
14688: PPUSH
14689: CALL_OW 111
// Wait ( 0 0$2 ) ;
14693: LD_INT 70
14695: PPUSH
14696: CALL_OW 67
// end else
14700: GO 14714
// begin SetSide ( dep , 4 ) ;
14702: LD_VAR 0 4
14706: PPUSH
14707: LD_INT 4
14709: PPUSH
14710: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14714: LD_ADDR_VAR 0 4
14718: PUSH
14719: LD_INT 22
14721: PUSH
14722: LD_INT 4
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 30
14731: PUSH
14732: LD_INT 0
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PPUSH
14743: CALL_OW 69
14747: PUSH
14748: LD_INT 1
14750: ARRAY
14751: ST_TO_ADDR
// if not has_eng then
14752: LD_VAR 0 2
14756: NOT
14757: IFFALSE 14844
// for i = 1 to 2 do
14759: LD_ADDR_VAR 0 1
14763: PUSH
14764: DOUBLE
14765: LD_INT 1
14767: DEC
14768: ST_TO_ADDR
14769: LD_INT 2
14771: PUSH
14772: FOR_TO
14773: IFFALSE 14842
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14775: LD_VAR 0 3
14779: PUSH
14780: LD_INT 1
14782: ARRAY
14783: PPUSH
14784: LD_VAR 0 4
14788: PPUSH
14789: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14793: LD_VAR 0 3
14797: PUSH
14798: LD_INT 1
14800: ARRAY
14801: PPUSH
14802: LD_INT 2
14804: PPUSH
14805: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14809: LD_VAR 0 3
14813: PUSH
14814: LD_INT 1
14816: ARRAY
14817: PPUSH
14818: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14822: LD_ADDR_VAR 0 3
14826: PUSH
14827: LD_VAR 0 3
14831: PPUSH
14832: LD_INT 1
14834: PPUSH
14835: CALL_OW 3
14839: ST_TO_ADDR
// end ;
14840: GO 14772
14842: POP
14843: POP
// if IsInUnit ( Cornel ) then
14844: LD_EXP 44
14848: PPUSH
14849: CALL_OW 310
14853: IFFALSE 14931
// begin cargo := IsInUnit ( Cornel ) ;
14855: LD_ADDR_VAR 0 7
14859: PUSH
14860: LD_EXP 44
14864: PPUSH
14865: CALL_OW 310
14869: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14870: LD_VAR 0 7
14874: PPUSH
14875: LD_INT 1
14877: PPUSH
14878: CALL_OW 289
14882: IFFALSE 14893
// ComUnload ( cargo ) ;
14884: LD_VAR 0 7
14888: PPUSH
14889: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14893: LD_EXP 44
14897: PPUSH
14898: LD_INT 235
14900: PPUSH
14901: LD_INT 122
14903: PPUSH
14904: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14908: LD_EXP 44
14912: PPUSH
14913: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14917: LD_EXP 44
14921: PPUSH
14922: LD_VAR 0 4
14926: PPUSH
14927: CALL_OW 180
// end ; if Bierezov then
14931: LD_EXP 45
14935: IFFALSE 14983
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14937: LD_EXP 45
14941: PPUSH
14942: LD_INT 260
14944: PPUSH
14945: LD_INT 120
14947: PPUSH
14948: CALL_OW 111
// if dep then
14952: LD_VAR 0 4
14956: IFFALSE 14974
// AddComEnterUnit ( Bierezov , dep ) else
14958: LD_EXP 45
14962: PPUSH
14963: LD_VAR 0 4
14967: PPUSH
14968: CALL_OW 180
14972: GO 14983
// AddComHold ( Bierezov ) ;
14974: LD_EXP 45
14978: PPUSH
14979: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14983: LD_INT 525
14985: PPUSH
14986: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14990: LD_ADDR_VAR 0 2
14994: PUSH
14995: LD_INT 22
14997: PUSH
14998: LD_INT 4
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 25
15007: PUSH
15008: LD_INT 2
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: PPUSH
15019: CALL_OW 69
15023: PUSH
15024: LD_EXP 45
15028: DIFF
15029: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15030: LD_INT 35
15032: PPUSH
15033: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
15037: LD_ADDR_VAR 0 6
15041: PUSH
15042: LD_INT 10
15044: PPUSH
15045: CALL_OW 435
15049: ST_TO_ADDR
// if crates then
15050: LD_VAR 0 6
15054: IFFALSE 15083
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
15056: LD_VAR 0 2
15060: PPUSH
15061: LD_VAR 0 6
15065: PUSH
15066: LD_INT 1
15068: ARRAY
15069: PPUSH
15070: LD_VAR 0 6
15074: PUSH
15075: LD_INT 2
15077: ARRAY
15078: PPUSH
15079: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
15083: LD_VAR 0 4
15087: PPUSH
15088: CALL_OW 274
15092: PPUSH
15093: LD_INT 1
15095: PPUSH
15096: CALL_OW 275
15100: PUSH
15101: LD_INT 40
15103: GREATEREQUAL
15104: IFFALSE 15030
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
15106: LD_ADDR_VAR 0 5
15110: PUSH
15111: LD_INT 4
15113: PUSH
15114: LD_INT 256
15116: PUSH
15117: LD_INT 111
15119: PUSH
15120: LD_INT 2
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: PUSH
15129: LD_INT 31
15131: PUSH
15132: LD_INT 243
15134: PUSH
15135: LD_INT 112
15137: PUSH
15138: LD_INT 2
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: PUSH
15147: LD_INT 31
15149: PUSH
15150: LD_INT 254
15152: PUSH
15153: LD_INT 114
15155: PUSH
15156: LD_INT 2
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: LIST
15169: ST_TO_ADDR
// for i in blist do
15170: LD_ADDR_VAR 0 1
15174: PUSH
15175: LD_VAR 0 5
15179: PUSH
15180: FOR_IN
15181: IFFALSE 15230
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
15183: LD_VAR 0 2
15187: PPUSH
15188: LD_VAR 0 1
15192: PUSH
15193: LD_INT 1
15195: ARRAY
15196: PPUSH
15197: LD_VAR 0 1
15201: PUSH
15202: LD_INT 2
15204: ARRAY
15205: PPUSH
15206: LD_VAR 0 1
15210: PUSH
15211: LD_INT 3
15213: ARRAY
15214: PPUSH
15215: LD_VAR 0 1
15219: PUSH
15220: LD_INT 4
15222: ARRAY
15223: PPUSH
15224: CALL_OW 205
15228: GO 15180
15230: POP
15231: POP
// repeat wait ( 0 0$01 ) ;
15232: LD_INT 35
15234: PPUSH
15235: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
15239: LD_INT 22
15241: PUSH
15242: LD_INT 4
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PUSH
15249: LD_INT 30
15251: PUSH
15252: LD_INT 4
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: LD_INT 3
15261: PUSH
15262: LD_INT 57
15264: PUSH
15265: EMPTY
15266: LIST
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: LIST
15276: PPUSH
15277: CALL_OW 69
15281: IFFALSE 15232
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15283: LD_VAR 0 3
15287: PPUSH
15288: LD_INT 22
15290: PUSH
15291: LD_INT 4
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 30
15300: PUSH
15301: LD_INT 4
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PPUSH
15312: CALL_OW 69
15316: PUSH
15317: LD_INT 1
15319: ARRAY
15320: PPUSH
15321: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
15325: LD_VAR 0 3
15329: PPUSH
15330: LD_INT 1
15332: PPUSH
15333: CALL_OW 183
// if has_eng > 1 then
15337: LD_VAR 0 2
15341: PUSH
15342: LD_INT 1
15344: GREATER
15345: IFFALSE 15487
// for i = has_eng downto 2 do
15347: LD_ADDR_VAR 0 1
15351: PUSH
15352: DOUBLE
15353: LD_VAR 0 2
15357: INC
15358: ST_TO_ADDR
15359: LD_INT 2
15361: PUSH
15362: FOR_DOWNTO
15363: IFFALSE 15485
// begin if IsInUnit ( has_eng [ i ] ) then
15365: LD_VAR 0 2
15369: PUSH
15370: LD_VAR 0 1
15374: ARRAY
15375: PPUSH
15376: CALL_OW 310
15380: IFFALSE 15397
// ComExitBuilding ( has_eng [ i ] ) ;
15382: LD_VAR 0 2
15386: PUSH
15387: LD_VAR 0 1
15391: ARRAY
15392: PPUSH
15393: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15397: LD_VAR 0 2
15401: PUSH
15402: LD_VAR 0 1
15406: ARRAY
15407: PPUSH
15408: LD_INT 22
15410: PUSH
15411: LD_INT 4
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 30
15420: PUSH
15421: LD_INT 4
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PPUSH
15432: CALL_OW 69
15436: PUSH
15437: LD_INT 1
15439: ARRAY
15440: PPUSH
15441: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15445: LD_VAR 0 2
15449: PUSH
15450: LD_VAR 0 1
15454: ARRAY
15455: PPUSH
15456: LD_INT 1
15458: PPUSH
15459: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15463: LD_ADDR_VAR 0 2
15467: PUSH
15468: LD_VAR 0 2
15472: PPUSH
15473: LD_VAR 0 1
15477: PPUSH
15478: CALL_OW 3
15482: ST_TO_ADDR
// end ;
15483: GO 15362
15485: POP
15486: POP
// repeat wait ( 0 0$01 ) ;
15487: LD_INT 35
15489: PPUSH
15490: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15494: LD_INT 22
15496: PUSH
15497: LD_INT 4
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: LD_INT 30
15506: PUSH
15507: LD_INT 31
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 3
15516: PUSH
15517: LD_INT 57
15519: PUSH
15520: EMPTY
15521: LIST
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: PPUSH
15532: CALL_OW 69
15536: PUSH
15537: LD_INT 1
15539: GREATER
15540: IFFALSE 15487
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15542: LD_ADDR_VAR 0 8
15546: PUSH
15547: LD_EXP 6
15551: PPUSH
15552: LD_INT 25
15554: PUSH
15555: LD_INT 1
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PPUSH
15562: CALL_OW 72
15566: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15567: LD_ADDR_VAR 0 1
15571: PUSH
15572: DOUBLE
15573: LD_INT 1
15575: DEC
15576: ST_TO_ADDR
15577: LD_INT 22
15579: PUSH
15580: LD_INT 4
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 30
15589: PUSH
15590: LD_INT 31
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 3
15599: PUSH
15600: LD_INT 57
15602: PUSH
15603: EMPTY
15604: LIST
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: LIST
15614: PPUSH
15615: CALL_OW 69
15619: PUSH
15620: FOR_TO
15621: IFFALSE 15705
// begin if not sol [ i ] then
15623: LD_VAR 0 8
15627: PUSH
15628: LD_VAR 0 1
15632: ARRAY
15633: NOT
15634: IFFALSE 15638
// break ;
15636: GO 15705
// ComExitBuilding ( sol [ i ] ) ;
15638: LD_VAR 0 8
15642: PUSH
15643: LD_VAR 0 1
15647: ARRAY
15648: PPUSH
15649: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15653: LD_VAR 0 8
15657: PUSH
15658: LD_VAR 0 1
15662: ARRAY
15663: PPUSH
15664: LD_INT 22
15666: PUSH
15667: LD_INT 4
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 30
15676: PUSH
15677: LD_INT 31
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PPUSH
15688: CALL_OW 69
15692: PUSH
15693: LD_VAR 0 1
15697: ARRAY
15698: PPUSH
15699: CALL_OW 180
// end ;
15703: GO 15620
15705: POP
15706: POP
// if sol > 3 then
15707: LD_VAR 0 8
15711: PUSH
15712: LD_INT 3
15714: GREATER
15715: IFFALSE 15832
// begin ComExitBuilding ( sol [ 3 ] ) ;
15717: LD_VAR 0 8
15721: PUSH
15722: LD_INT 3
15724: ARRAY
15725: PPUSH
15726: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15730: LD_VAR 0 8
15734: PUSH
15735: LD_INT 3
15737: ARRAY
15738: PPUSH
15739: LD_INT 246
15741: PPUSH
15742: LD_INT 94
15744: PPUSH
15745: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15749: LD_VAR 0 8
15753: PUSH
15754: LD_INT 3
15756: ARRAY
15757: PPUSH
15758: LD_INT 175
15760: PPUSH
15761: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15765: LD_VAR 0 8
15769: PUSH
15770: LD_INT 3
15772: ARRAY
15773: PPUSH
15774: LD_INT 224
15776: PPUSH
15777: LD_INT 90
15779: PPUSH
15780: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15784: LD_VAR 0 8
15788: PUSH
15789: LD_INT 3
15791: ARRAY
15792: PPUSH
15793: LD_INT 245
15795: PPUSH
15796: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15800: LD_VAR 0 8
15804: PUSH
15805: LD_INT 3
15807: ARRAY
15808: PPUSH
15809: LD_INT 223
15811: PPUSH
15812: LD_INT 110
15814: PPUSH
15815: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15819: LD_VAR 0 8
15823: PUSH
15824: LD_INT 3
15826: ARRAY
15827: PPUSH
15828: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15832: LD_VAR 0 2
15836: PPUSH
15837: LD_VAR 0 4
15841: PPUSH
15842: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15846: LD_INT 22
15848: PUSH
15849: LD_INT 4
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 30
15858: PUSH
15859: LD_INT 4
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PPUSH
15870: CALL_OW 69
15874: PUSH
15875: LD_INT 1
15877: ARRAY
15878: PPUSH
15879: CALL_OW 313
15883: PUSH
15884: LD_INT 6
15886: LESS
15887: IFFALSE 15951
// begin if IsInUnit ( Cornel ) then
15889: LD_EXP 44
15893: PPUSH
15894: CALL_OW 310
15898: IFFALSE 15909
// ComExitBuilding ( Cornel ) ;
15900: LD_EXP 44
15904: PPUSH
15905: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15909: LD_EXP 44
15913: PPUSH
15914: LD_INT 22
15916: PUSH
15917: LD_INT 4
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 30
15926: PUSH
15927: LD_INT 4
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PPUSH
15938: CALL_OW 69
15942: PUSH
15943: LD_INT 1
15945: ARRAY
15946: PPUSH
15947: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15951: LD_INT 35
15953: PPUSH
15954: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15958: LD_ADDR_VAR 0 3
15962: PUSH
15963: LD_INT 22
15965: PUSH
15966: LD_INT 4
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 21
15975: PUSH
15976: LD_INT 3
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: LD_INT 3
15985: PUSH
15986: LD_INT 24
15988: PUSH
15989: LD_INT 1000
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: LIST
16004: PPUSH
16005: CALL_OW 69
16009: ST_TO_ADDR
// if filter and has_eng then
16010: LD_VAR 0 3
16014: PUSH
16015: LD_VAR 0 2
16019: AND
16020: IFFALSE 16086
// begin for i in has_eng do
16022: LD_ADDR_VAR 0 1
16026: PUSH
16027: LD_VAR 0 2
16031: PUSH
16032: FOR_IN
16033: IFFALSE 16082
// begin if IsInUnit ( i ) then
16035: LD_VAR 0 1
16039: PPUSH
16040: CALL_OW 310
16044: IFFALSE 16055
// ComExitBuilding ( i ) ;
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL_OW 122
// Wait ( 3 ) ;
16055: LD_INT 3
16057: PPUSH
16058: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
16062: LD_VAR 0 1
16066: PPUSH
16067: LD_VAR 0 3
16071: PUSH
16072: LD_INT 1
16074: ARRAY
16075: PPUSH
16076: CALL_OW 130
// end ;
16080: GO 16032
16082: POP
16083: POP
// end else
16084: GO 16140
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
16086: LD_VAR 0 2
16090: PUSH
16091: LD_VAR 0 2
16095: PPUSH
16096: LD_INT 56
16098: PUSH
16099: EMPTY
16100: LIST
16101: PPUSH
16102: CALL_OW 72
16106: AND
16107: IFFALSE 16140
// for i in has_eng do
16109: LD_ADDR_VAR 0 1
16113: PUSH
16114: LD_VAR 0 2
16118: PUSH
16119: FOR_IN
16120: IFFALSE 16138
// ComEnterUnit ( i , dep ) ;
16122: LD_VAR 0 1
16126: PPUSH
16127: LD_VAR 0 4
16131: PPUSH
16132: CALL_OW 120
16136: GO 16119
16138: POP
16139: POP
// until cornel_prepared ;
16140: LD_EXP 11
16144: IFFALSE 15951
// end ;
16146: PPOPN 8
16148: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
16149: LD_EXP 11
16153: IFFALSE 16688
16155: GO 16157
16157: DISABLE
16158: LD_INT 0
16160: PPUSH
16161: PPUSH
16162: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
16163: LD_ADDR_VAR 0 2
16167: PUSH
16168: LD_INT 22
16170: PUSH
16171: LD_INT 4
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 30
16180: PUSH
16181: LD_INT 4
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PPUSH
16192: CALL_OW 69
16196: PUSH
16197: LD_INT 1
16199: ARRAY
16200: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
16201: LD_EXP 6
16205: PPUSH
16206: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
16210: LD_EXP 45
16214: PUSH
16215: LD_EXP 45
16219: PPUSH
16220: CALL_OW 310
16224: AND
16225: IFFALSE 16236
// ComExitBuilding ( Bierezov ) ;
16227: LD_EXP 45
16231: PPUSH
16232: CALL_OW 122
// Wait ( 0 0$03 ) ;
16236: LD_INT 105
16238: PPUSH
16239: CALL_OW 67
// for i in cornel_units do
16243: LD_ADDR_VAR 0 1
16247: PUSH
16248: LD_EXP 6
16252: PUSH
16253: FOR_IN
16254: IFFALSE 16330
// begin if GetClass ( i ) in [ 2 , 3 ] then
16256: LD_VAR 0 1
16260: PPUSH
16261: CALL_OW 257
16265: PUSH
16266: LD_INT 2
16268: PUSH
16269: LD_INT 3
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: IN
16276: IFFALSE 16313
// begin ComEnterUnit ( i , arm ) ;
16278: LD_VAR 0 1
16282: PPUSH
16283: LD_VAR 0 2
16287: PPUSH
16288: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
16292: LD_VAR 0 1
16296: PPUSH
16297: LD_INT 1
16299: PPUSH
16300: CALL_OW 183
// AddComExitBuilding ( i ) ;
16304: LD_VAR 0 1
16308: PPUSH
16309: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
16313: LD_VAR 0 1
16317: PPUSH
16318: LD_INT 257
16320: PPUSH
16321: LD_INT 121
16323: PPUSH
16324: CALL_OW 171
// end ;
16328: GO 16253
16330: POP
16331: POP
// Wait ( 1 1$00 ) ;
16332: LD_INT 2100
16334: PPUSH
16335: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
16339: LD_ADDR_VAR 0 3
16343: PUSH
16344: LD_EXP 44
16348: PUSH
16349: LD_EXP 45
16353: ADD
16354: PUSH
16355: LD_EXP 6
16359: ADD
16360: PUSH
16361: LD_EXP 6
16365: PPUSH
16366: LD_INT 21
16368: PUSH
16369: LD_INT 2
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PPUSH
16376: CALL_OW 72
16380: DIFF
16381: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
16382: LD_VAR 0 3
16386: PPUSH
16387: LD_INT 248
16389: PPUSH
16390: LD_INT 85
16392: PPUSH
16393: CALL_OW 111
// AddComHold ( filter ) ;
16397: LD_VAR 0 3
16401: PPUSH
16402: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
16406: LD_INT 35
16408: PPUSH
16409: CALL_OW 67
// until cornel_attack ;
16413: LD_EXP 9
16417: IFFALSE 16406
// ComAgressiveMove ( filter , 209 , 63 ) ;
16419: LD_VAR 0 3
16423: PPUSH
16424: LD_INT 209
16426: PPUSH
16427: LD_INT 63
16429: PPUSH
16430: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16434: LD_EXP 44
16438: PPUSH
16439: LD_INT 208
16441: PPUSH
16442: LD_INT 62
16444: PPUSH
16445: CALL_OW 114
// AddComHold ( Cornel ) ;
16449: LD_EXP 44
16453: PPUSH
16454: CALL_OW 200
// if Bierezov then
16458: LD_EXP 45
16462: IFFALSE 16552
// begin filter := filter diff Bierezov ;
16464: LD_ADDR_VAR 0 3
16468: PUSH
16469: LD_VAR 0 3
16473: PUSH
16474: LD_EXP 45
16478: DIFF
16479: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16480: LD_EXP 45
16484: PPUSH
16485: LD_INT 6
16487: PPUSH
16488: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16492: LD_EXP 45
16496: PPUSH
16497: LD_INT 235
16499: PPUSH
16500: LD_INT 60
16502: PPUSH
16503: CALL_OW 111
// AddComHold ( Bierezov ) ;
16507: LD_EXP 45
16511: PPUSH
16512: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16516: LD_EXP 45
16520: PPUSH
16521: LD_INT 350
16523: PPUSH
16524: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16528: LD_EXP 45
16532: PPUSH
16533: LD_INT 198
16535: PPUSH
16536: LD_INT 28
16538: PPUSH
16539: CALL_OW 171
// AddComHold ( Bierezov ) ;
16543: LD_EXP 45
16547: PPUSH
16548: CALL_OW 200
// end ; filter := filter diff Cornel ;
16552: LD_ADDR_VAR 0 3
16556: PUSH
16557: LD_VAR 0 3
16561: PUSH
16562: LD_EXP 44
16566: DIFF
16567: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
16568: LD_INT 70
16570: PPUSH
16571: CALL_OW 67
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16575: LD_EXP 44
16579: PPUSH
16580: LD_INT 208
16582: PPUSH
16583: LD_INT 62
16585: PPUSH
16586: CALL_OW 114
// until not IsInArea ( Cornel , cornelKappaArea ) ;
16590: LD_EXP 44
16594: PPUSH
16595: LD_INT 16
16597: PPUSH
16598: CALL_OW 308
16602: NOT
16603: IFFALSE 16568
// wait ( 0 0$2 ) ;
16605: LD_INT 70
16607: PPUSH
16608: CALL_OW 67
// ComMoveXY ( filter [ 1 ] , 195 , 57 ) ;
16612: LD_VAR 0 3
16616: PUSH
16617: LD_INT 1
16619: ARRAY
16620: PPUSH
16621: LD_INT 195
16623: PPUSH
16624: LD_INT 57
16626: PPUSH
16627: CALL_OW 111
// ComMoveXY ( filter [ 2 ] , 217 , 53 ) ;
16631: LD_VAR 0 3
16635: PUSH
16636: LD_INT 2
16638: ARRAY
16639: PPUSH
16640: LD_INT 217
16642: PPUSH
16643: LD_INT 53
16645: PPUSH
16646: CALL_OW 111
// ComMoveXY ( filter [ 3 ] , 199 , 48 ) ;
16650: LD_VAR 0 3
16654: PUSH
16655: LD_INT 3
16657: ARRAY
16658: PPUSH
16659: LD_INT 199
16661: PPUSH
16662: LD_INT 48
16664: PPUSH
16665: CALL_OW 111
// ComMoveXY ( filter [ 4 ] , 179 , 48 ) ;
16669: LD_VAR 0 3
16673: PUSH
16674: LD_INT 4
16676: ARRAY
16677: PPUSH
16678: LD_INT 179
16680: PPUSH
16681: LD_INT 48
16683: PPUSH
16684: CALL_OW 111
// end ; end_of_file
16688: PPOPN 3
16690: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16691: LD_EXP 53
16695: PUSH
16696: LD_EXP 31
16700: NOT
16701: AND
16702: PUSH
16703: LD_EXP 32
16707: NOT
16708: AND
16709: IFFALSE 17159
16711: GO 16713
16713: DISABLE
16714: LD_INT 0
16716: PPUSH
16717: PPUSH
16718: PPUSH
16719: PPUSH
// begin enable ;
16720: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16721: LD_ADDR_VAR 0 4
16725: PUSH
16726: LD_INT 81
16728: PUSH
16729: LD_INT 3
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PPUSH
16736: CALL_OW 69
16740: ST_TO_ADDR
// for i = 1 to ru_patrol do
16741: LD_ADDR_VAR 0 2
16745: PUSH
16746: DOUBLE
16747: LD_INT 1
16749: DEC
16750: ST_TO_ADDR
16751: LD_EXP 53
16755: PUSH
16756: FOR_TO
16757: IFFALSE 17157
// begin un := ru_patrol [ i ] ;
16759: LD_ADDR_VAR 0 1
16763: PUSH
16764: LD_EXP 53
16768: PUSH
16769: LD_VAR 0 2
16773: ARRAY
16774: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16775: LD_VAR 0 1
16779: PPUSH
16780: LD_INT 13
16782: PPUSH
16783: CALL_OW 308
16787: IFFALSE 16892
// begin if not ru_alert then
16789: LD_EXP 60
16793: NOT
16794: IFFALSE 16804
// ru_alert := true ;
16796: LD_ADDR_EXP 60
16800: PUSH
16801: LD_INT 1
16803: ST_TO_ADDR
// if not See ( 1 , un ) then
16804: LD_INT 1
16806: PPUSH
16807: LD_VAR 0 1
16811: PPUSH
16812: CALL_OW 292
16816: NOT
16817: IFFALSE 16831
// SetLives ( un , 1000 ) ;
16819: LD_VAR 0 1
16823: PPUSH
16824: LD_INT 1000
16826: PPUSH
16827: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16831: LD_ADDR_EXP 53
16835: PUSH
16836: LD_EXP 53
16840: PUSH
16841: LD_VAR 0 1
16845: DIFF
16846: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16847: LD_VAR 0 1
16851: PPUSH
16852: LD_INT 22
16854: PUSH
16855: LD_INT 3
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 30
16864: PUSH
16865: LD_INT 4
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PPUSH
16876: CALL_OW 69
16880: PPUSH
16881: CALL 1007 0 1
16885: PPUSH
16886: CALL_OW 120
// continue ;
16890: GO 16756
// end ; if IsOk ( un ) and not HasTask ( un ) then
16892: LD_VAR 0 1
16896: PPUSH
16897: CALL_OW 302
16901: PUSH
16902: LD_VAR 0 1
16906: PPUSH
16907: CALL_OW 314
16911: NOT
16912: AND
16913: IFFALSE 17006
// begin for j = 1 to ru_firepoints_south [ i ] do
16915: LD_ADDR_VAR 0 3
16919: PUSH
16920: DOUBLE
16921: LD_INT 1
16923: DEC
16924: ST_TO_ADDR
16925: LD_EXP 59
16929: PUSH
16930: LD_VAR 0 2
16934: ARRAY
16935: PUSH
16936: FOR_TO
16937: IFFALSE 17004
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16939: LD_VAR 0 1
16943: PPUSH
16944: LD_EXP 59
16948: PUSH
16949: LD_VAR 0 2
16953: ARRAY
16954: PUSH
16955: LD_VAR 0 3
16959: ARRAY
16960: PUSH
16961: LD_INT 1
16963: ARRAY
16964: PPUSH
16965: LD_EXP 59
16969: PUSH
16970: LD_VAR 0 2
16974: ARRAY
16975: PUSH
16976: LD_VAR 0 3
16980: ARRAY
16981: PUSH
16982: LD_INT 2
16984: ARRAY
16985: PPUSH
16986: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16990: LD_VAR 0 1
16994: PPUSH
16995: LD_INT 70
16997: PPUSH
16998: CALL_OW 202
// end ;
17002: GO 16936
17004: POP
17005: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17006: LD_VAR 0 1
17010: PPUSH
17011: CALL_OW 256
17015: PUSH
17016: LD_INT 700
17018: LESS
17019: PUSH
17020: LD_VAR 0 1
17024: PPUSH
17025: LD_INT 13
17027: PPUSH
17028: CALL_OW 308
17032: NOT
17033: AND
17034: IFFALSE 17086
// begin ComMoveToArea ( un , retreatArea ) ;
17036: LD_VAR 0 1
17040: PPUSH
17041: LD_INT 13
17043: PPUSH
17044: CALL_OW 113
// if not ru_alert_xy then
17048: LD_EXP 61
17052: NOT
17053: IFFALSE 17084
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
17055: LD_ADDR_EXP 61
17059: PUSH
17060: LD_VAR 0 1
17064: PPUSH
17065: CALL_OW 250
17069: PUSH
17070: LD_VAR 0 1
17074: PPUSH
17075: CALL_OW 251
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: ST_TO_ADDR
// end else
17084: GO 17155
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17086: LD_VAR 0 1
17090: PPUSH
17091: LD_VAR 0 4
17095: PPUSH
17096: LD_VAR 0 1
17100: PPUSH
17101: CALL_OW 74
17105: PPUSH
17106: CALL_OW 296
17110: PUSH
17111: LD_INT 9
17113: LESS
17114: PUSH
17115: LD_VAR 0 1
17119: PPUSH
17120: CALL_OW 256
17124: PUSH
17125: LD_INT 500
17127: GREATER
17128: AND
17129: IFFALSE 17155
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17131: LD_VAR 0 1
17135: PPUSH
17136: LD_VAR 0 4
17140: PPUSH
17141: LD_VAR 0 1
17145: PPUSH
17146: CALL_OW 74
17150: PPUSH
17151: CALL_OW 115
// end ;
17155: GO 16756
17157: POP
17158: POP
// end ;
17159: PPOPN 4
17161: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
17162: LD_EXP 60
17166: PUSH
17167: LD_EXP 61
17171: AND
17172: PUSH
17173: LD_EXP 31
17177: NOT
17178: AND
17179: PUSH
17180: LD_EXP 32
17184: NOT
17185: AND
17186: IFFALSE 17396
17188: GO 17190
17190: DISABLE
17191: LD_INT 0
17193: PPUSH
17194: PPUSH
// begin enable ;
17195: ENABLE
// if not ru_vehicles then
17196: LD_EXP 56
17200: NOT
17201: IFFALSE 17205
// exit ;
17203: GO 17396
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17205: LD_ADDR_VAR 0 2
17209: PUSH
17210: LD_INT 81
17212: PUSH
17213: LD_INT 3
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PPUSH
17220: CALL_OW 69
17224: ST_TO_ADDR
// if ru_vehicles then
17225: LD_EXP 56
17229: IFFALSE 17396
// begin for i in ru_vehicles do
17231: LD_ADDR_VAR 0 1
17235: PUSH
17236: LD_EXP 56
17240: PUSH
17241: FOR_IN
17242: IFFALSE 17394
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
17244: LD_VAR 0 1
17248: PPUSH
17249: CALL_OW 302
17253: PUSH
17254: LD_VAR 0 1
17258: PPUSH
17259: LD_VAR 0 2
17263: PPUSH
17264: LD_VAR 0 1
17268: PPUSH
17269: CALL_OW 74
17273: PPUSH
17274: CALL_OW 296
17278: PUSH
17279: LD_INT 9
17281: LESS
17282: AND
17283: IFFALSE 17309
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17285: LD_VAR 0 1
17289: PPUSH
17290: LD_VAR 0 2
17294: PPUSH
17295: LD_VAR 0 1
17299: PPUSH
17300: CALL_OW 74
17304: PPUSH
17305: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
17309: LD_VAR 0 1
17313: PPUSH
17314: CALL_OW 314
17318: NOT
17319: PUSH
17320: LD_VAR 0 1
17324: PPUSH
17325: CALL_OW 302
17329: AND
17330: PUSH
17331: LD_VAR 0 1
17335: PPUSH
17336: LD_EXP 61
17340: PUSH
17341: LD_INT 1
17343: ARRAY
17344: PPUSH
17345: LD_EXP 61
17349: PUSH
17350: LD_INT 2
17352: ARRAY
17353: PPUSH
17354: CALL_OW 297
17358: PUSH
17359: LD_INT 10
17361: GREATER
17362: AND
17363: IFFALSE 17392
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
17365: LD_VAR 0 1
17369: PPUSH
17370: LD_EXP 61
17374: PUSH
17375: LD_INT 1
17377: ARRAY
17378: PPUSH
17379: LD_EXP 61
17383: PUSH
17384: LD_INT 2
17386: ARRAY
17387: PPUSH
17388: CALL_OW 114
// end ;
17392: GO 17241
17394: POP
17395: POP
// end ; end ;
17396: PPOPN 2
17398: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
17399: LD_EXP 61
17403: PUSH
17404: LD_EXP 60
17408: AND
17409: PUSH
17410: LD_INT 3
17412: PPUSH
17413: CALL_OW 463
17417: NOT
17418: AND
17419: PUSH
17420: LD_EXP 31
17424: NOT
17425: AND
17426: PUSH
17427: LD_EXP 32
17431: NOT
17432: AND
17433: IFFALSE 17528
17435: GO 17437
17437: DISABLE
17438: LD_INT 0
17440: PPUSH
// begin enable ;
17441: ENABLE
// ru_alert_xy := false ;
17442: LD_ADDR_EXP 61
17446: PUSH
17447: LD_INT 0
17449: ST_TO_ADDR
// ru_alert := false ;
17450: LD_ADDR_EXP 60
17454: PUSH
17455: LD_INT 0
17457: ST_TO_ADDR
// if ru_vehicles then
17458: LD_EXP 56
17462: IFFALSE 17528
// for i in ru_vehicles do
17464: LD_ADDR_VAR 0 1
17468: PUSH
17469: LD_EXP 56
17473: PUSH
17474: FOR_IN
17475: IFFALSE 17526
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
17477: LD_VAR 0 1
17481: PPUSH
17482: CALL_OW 302
17486: PUSH
17487: LD_VAR 0 1
17491: PPUSH
17492: LD_INT 89
17494: PPUSH
17495: LD_INT 36
17497: PPUSH
17498: CALL_OW 297
17502: PUSH
17503: LD_INT 10
17505: GREATER
17506: AND
17507: IFFALSE 17524
// ComMoveXY ( i , 89 , 36 ) ;
17509: LD_VAR 0 1
17513: PPUSH
17514: LD_INT 89
17516: PPUSH
17517: LD_INT 36
17519: PPUSH
17520: CALL_OW 111
17524: GO 17474
17526: POP
17527: POP
// end ;
17528: PPOPN 1
17530: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
17531: LD_EXP 55
17535: PUSH
17536: LD_EXP 31
17540: NOT
17541: AND
17542: PUSH
17543: LD_EXP 32
17547: NOT
17548: AND
17549: IFFALSE 17833
17551: GO 17553
17553: DISABLE
17554: LD_INT 0
17556: PPUSH
17557: PPUSH
17558: PPUSH
// begin enable ;
17559: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17560: LD_ADDR_VAR 0 3
17564: PUSH
17565: LD_INT 81
17567: PUSH
17568: LD_INT 3
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PPUSH
17575: CALL_OW 69
17579: ST_TO_ADDR
// for i = 1 to ru_forest do
17580: LD_ADDR_VAR 0 1
17584: PUSH
17585: DOUBLE
17586: LD_INT 1
17588: DEC
17589: ST_TO_ADDR
17590: LD_EXP 55
17594: PUSH
17595: FOR_TO
17596: IFFALSE 17831
// begin un := ru_forest [ i ] ;
17598: LD_ADDR_VAR 0 2
17602: PUSH
17603: LD_EXP 55
17607: PUSH
17608: LD_VAR 0 1
17612: ARRAY
17613: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17614: LD_VAR 0 2
17618: PPUSH
17619: LD_INT 13
17621: PPUSH
17622: CALL_OW 308
17626: IFFALSE 17716
// begin if not See ( 1 , un ) then
17628: LD_INT 1
17630: PPUSH
17631: LD_VAR 0 2
17635: PPUSH
17636: CALL_OW 292
17640: NOT
17641: IFFALSE 17655
// SetLives ( un , 1000 ) ;
17643: LD_VAR 0 2
17647: PPUSH
17648: LD_INT 1000
17650: PPUSH
17651: CALL_OW 234
// ru_forest := ru_forest diff un ;
17655: LD_ADDR_EXP 55
17659: PUSH
17660: LD_EXP 55
17664: PUSH
17665: LD_VAR 0 2
17669: DIFF
17670: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17671: LD_VAR 0 2
17675: PPUSH
17676: LD_INT 22
17678: PUSH
17679: LD_INT 3
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: LD_INT 30
17688: PUSH
17689: LD_INT 4
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PPUSH
17700: CALL_OW 69
17704: PPUSH
17705: CALL 1007 0 1
17709: PPUSH
17710: CALL_OW 120
// continue ;
17714: GO 17595
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17716: LD_VAR 0 2
17720: PPUSH
17721: CALL_OW 256
17725: PUSH
17726: LD_INT 700
17728: LESS
17729: PUSH
17730: LD_VAR 0 2
17734: PPUSH
17735: LD_INT 13
17737: PPUSH
17738: CALL_OW 308
17742: NOT
17743: AND
17744: IFFALSE 17760
// ComMoveToArea ( un , retreatArea ) else
17746: LD_VAR 0 2
17750: PPUSH
17751: LD_INT 13
17753: PPUSH
17754: CALL_OW 113
17758: GO 17829
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17760: LD_VAR 0 2
17764: PPUSH
17765: LD_VAR 0 3
17769: PPUSH
17770: LD_VAR 0 2
17774: PPUSH
17775: CALL_OW 74
17779: PPUSH
17780: CALL_OW 296
17784: PUSH
17785: LD_INT 9
17787: LESS
17788: PUSH
17789: LD_VAR 0 2
17793: PPUSH
17794: CALL_OW 256
17798: PUSH
17799: LD_INT 500
17801: GREATER
17802: AND
17803: IFFALSE 17829
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17805: LD_VAR 0 2
17809: PPUSH
17810: LD_VAR 0 3
17814: PPUSH
17815: LD_VAR 0 2
17819: PPUSH
17820: CALL_OW 74
17824: PPUSH
17825: CALL_OW 115
// end ;
17829: GO 17595
17831: POP
17832: POP
// end ;
17833: PPOPN 3
17835: END
// every 0 0$10 trigger not send_attack_on_cornel or IsDead ( Cornel ) do var i , filter ;
17836: LD_EXP 32
17840: NOT
17841: PUSH
17842: LD_EXP 44
17846: PPUSH
17847: CALL_OW 301
17851: OR
17852: IFFALSE 18013
17854: GO 17856
17856: DISABLE
17857: LD_INT 0
17859: PPUSH
17860: PPUSH
// begin enable ;
17861: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_inarea , ignoreBuildingsArea ] ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 990 ] ] ] ) ;
17862: LD_ADDR_VAR 0 2
17866: PUSH
17867: LD_INT 22
17869: PUSH
17870: LD_INT 3
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 3
17879: PUSH
17880: LD_INT 95
17882: PUSH
17883: LD_INT 18
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 21
17896: PUSH
17897: LD_INT 3
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 3
17906: PUSH
17907: LD_INT 24
17909: PUSH
17910: LD_INT 990
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: PPUSH
17927: CALL_OW 69
17931: ST_TO_ADDR
// if filter then
17932: LD_VAR 0 2
17936: IFFALSE 18013
// for i in filter do
17938: LD_ADDR_VAR 0 1
17942: PUSH
17943: LD_VAR 0 2
17947: PUSH
17948: FOR_IN
17949: IFFALSE 18011
// if GetY ( i ) > 70 then
17951: LD_VAR 0 1
17955: PPUSH
17956: CALL_OW 251
17960: PUSH
17961: LD_INT 70
17963: GREATER
17964: IFFALSE 17970
// continue else
17966: GO 17948
17968: GO 18009
// begin ru_alert := true ;
17970: LD_ADDR_EXP 60
17974: PUSH
17975: LD_INT 1
17977: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17978: LD_ADDR_EXP 61
17982: PUSH
17983: LD_VAR 0 1
17987: PPUSH
17988: CALL_OW 250
17992: PUSH
17993: LD_VAR 0 1
17997: PPUSH
17998: CALL_OW 251
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: ST_TO_ADDR
// break ;
18007: GO 18011
// end ;
18009: GO 17948
18011: POP
18012: POP
// end ;
18013: PPOPN 2
18015: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
18016: LD_EXP 31
18020: IFFALSE 18169
18022: GO 18024
18024: DISABLE
18025: LD_INT 0
18027: PPUSH
18028: PPUSH
18029: PPUSH
18030: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
18031: LD_ADDR_VAR 0 4
18035: PUSH
18036: LD_EXP 56
18040: PUSH
18041: LD_EXP 55
18045: ADD
18046: PUSH
18047: LD_EXP 53
18051: ADD
18052: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
18053: LD_ADDR_VAR 0 3
18057: PUSH
18058: LD_INT 3
18060: PPUSH
18061: LD_INT 81
18063: PUSH
18064: LD_INT 3
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PPUSH
18071: CALL_OW 70
18075: ST_TO_ADDR
// if filter and enemy then
18076: LD_VAR 0 4
18080: PUSH
18081: LD_VAR 0 3
18085: AND
18086: IFFALSE 18169
// repeat wait ( 0 0$01 ) ;
18088: LD_INT 35
18090: PPUSH
18091: CALL_OW 67
// for i in filter do
18095: LD_ADDR_VAR 0 1
18099: PUSH
18100: LD_VAR 0 4
18104: PUSH
18105: FOR_IN
18106: IFFALSE 18134
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
18108: LD_VAR 0 1
18112: PPUSH
18113: LD_VAR 0 3
18117: PPUSH
18118: LD_VAR 0 1
18122: PPUSH
18123: CALL_OW 74
18127: PPUSH
18128: CALL_OW 115
// end ;
18132: GO 18105
18134: POP
18135: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
18136: LD_INT 3
18138: PPUSH
18139: LD_INT 81
18141: PUSH
18142: LD_INT 3
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PPUSH
18149: CALL_OW 70
18153: PUSH
18154: LD_INT 0
18156: EQUAL
18157: PUSH
18158: LD_VAR 0 4
18162: PUSH
18163: LD_INT 0
18165: EQUAL
18166: OR
18167: IFFALSE 18088
// end ;
18169: PPOPN 4
18171: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
18172: LD_EXP 26
18176: PUSH
18177: LD_INT 22
18179: PUSH
18180: LD_INT 4
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 30
18189: PUSH
18190: LD_INT 4
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 3
18199: PUSH
18200: LD_INT 57
18202: PUSH
18203: EMPTY
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: LIST
18214: PPUSH
18215: CALL_OW 69
18219: AND
18220: IFFALSE 18269
18222: GO 18224
18224: DISABLE
18225: LD_INT 0
18227: PPUSH
// begin if not ru_cornel_attack then
18228: LD_EXP 58
18232: NOT
18233: IFFALSE 18237
// exit ;
18235: GO 18269
// for i in ru_cornel_attack do
18237: LD_ADDR_VAR 0 1
18241: PUSH
18242: LD_EXP 58
18246: PUSH
18247: FOR_IN
18248: IFFALSE 18267
// ComAgressiveMove ( i , 258 , 119 ) ;
18250: LD_VAR 0 1
18254: PPUSH
18255: LD_INT 258
18257: PPUSH
18258: LD_INT 119
18260: PPUSH
18261: CALL_OW 114
18265: GO 18247
18267: POP
18268: POP
// end ; end_of_file
18269: PPOPN 1
18271: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
18272: LD_EXP 5
18276: PUSH
18277: LD_EXP 9
18281: NOT
18282: AND
18283: PUSH
18284: LD_EXP 20
18288: AND
18289: IFFALSE 18401
18291: GO 18293
18293: DISABLE
18294: LD_INT 0
18296: PPUSH
// begin enable ;
18297: ENABLE
// crates_counter := crates_counter - 50 ;
18298: LD_ADDR_EXP 20
18302: PUSH
18303: LD_EXP 20
18307: PUSH
18308: LD_INT 50
18310: MINUS
18311: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
18312: LD_INT 8
18314: PPUSH
18315: LD_INT 2
18317: PPUSH
18318: LD_INT 5
18320: PPUSH
18321: CALL_OW 12
18325: PPUSH
18326: LD_INT 1
18328: PPUSH
18329: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
18333: LD_INT 1785
18335: PPUSH
18336: LD_INT 2345
18338: PPUSH
18339: CALL_OW 12
18343: PPUSH
18344: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
18348: LD_ADDR_VAR 0 1
18352: PUSH
18353: LD_INT 1
18355: PPUSH
18356: LD_OWVAR 67
18360: PUSH
18361: LD_INT 2
18363: PLUS
18364: PPUSH
18365: CALL_OW 12
18369: ST_TO_ADDR
// if r < 3 then
18370: LD_VAR 0 1
18374: PUSH
18375: LD_INT 3
18377: LESS
18378: IFFALSE 18401
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
18380: LD_INT 4
18382: PPUSH
18383: LD_INT 1
18385: PPUSH
18386: LD_INT 5
18388: PPUSH
18389: CALL_OW 12
18393: PPUSH
18394: LD_INT 1
18396: PPUSH
18397: CALL_OW 55
// end ;
18401: PPOPN 1
18403: END
// every 0 0$01 trigger cornel_active do
18404: LD_EXP 8
18408: IFFALSE 18497
18410: GO 18412
18412: DISABLE
// begin Wait ( 0 0$03 ) ;
18413: LD_INT 105
18415: PPUSH
18416: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18420: LD_INT 2
18422: PPUSH
18423: LD_INT 5
18425: PPUSH
18426: CALL_OW 12
18430: PPUSH
18431: LD_INT 10
18433: PPUSH
18434: LD_INT 1
18436: PPUSH
18437: CALL_OW 55
// Wait ( 0 0$13 ) ;
18441: LD_INT 455
18443: PPUSH
18444: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18448: LD_INT 2
18450: PPUSH
18451: LD_INT 5
18453: PPUSH
18454: CALL_OW 12
18458: PPUSH
18459: LD_INT 10
18461: PPUSH
18462: LD_INT 1
18464: PPUSH
18465: CALL_OW 55
// Wait ( 0 0$16 ) ;
18469: LD_INT 560
18471: PPUSH
18472: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18476: LD_INT 2
18478: PPUSH
18479: LD_INT 5
18481: PPUSH
18482: CALL_OW 12
18486: PPUSH
18487: LD_INT 10
18489: PPUSH
18490: LD_INT 1
18492: PPUSH
18493: CALL_OW 55
// end ; end_of_file
18497: END
// every 0 0$01 trigger cornel_prepared do
18498: LD_EXP 11
18502: IFFALSE 18561
18504: GO 18506
18506: DISABLE
// begin enable ;
18507: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
18508: LD_ADDR_OWVAR 47
18512: PUSH
18513: LD_STRING #Am03-1
18515: PUSH
18516: LD_EXP 10
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
18525: LD_ADDR_EXP 10
18529: PUSH
18530: LD_EXP 10
18534: PPUSH
18535: LD_STRING -
18537: PPUSH
18538: CALL 1077 0 2
18542: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
18543: LD_EXP 10
18547: PUSH
18548: LD_INT 0
18550: EQUAL
18551: IFFALSE 18561
// begin Display_Strings := [ ] ;
18553: LD_ADDR_OWVAR 47
18557: PUSH
18558: EMPTY
18559: ST_TO_ADDR
// disable ;
18560: DISABLE
// end ; end ;
18561: END
// every 0 0$01 trigger debug and debug_strings do
18562: LD_EXP 1
18566: PUSH
18567: LD_OWVAR 48
18571: AND
18572: IFFALSE 18588
18574: GO 18576
18576: DISABLE
// begin enable ;
18577: ENABLE
// Display_Strings := debug_strings ;
18578: LD_ADDR_OWVAR 47
18582: PUSH
18583: LD_OWVAR 48
18587: ST_TO_ADDR
// end ; end_of_file
18588: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
18589: LD_VAR 0 1
18593: PPUSH
18594: LD_VAR 0 2
18598: PPUSH
18599: CALL 35272 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 255
18612: PUSH
18613: LD_INT 1
18615: EQUAL
18616: PUSH
18617: LD_EXP 14
18621: NOT
18622: AND
18623: IFFALSE 18633
// solar_builded := true ;
18625: LD_ADDR_EXP 14
18629: PUSH
18630: LD_INT 1
18632: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18633: LD_VAR 0 1
18637: PPUSH
18638: CALL_OW 255
18642: PUSH
18643: LD_INT 1
18645: EQUAL
18646: PUSH
18647: LD_EXP 29
18651: AND
18652: IFFALSE 18689
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
18654: LD_ADDR_EXP 29
18658: PUSH
18659: LD_EXP 29
18663: PUSH
18664: LD_INT 1750
18666: PUSH
18667: LD_INT 1400
18669: PUSH
18670: LD_INT 1225
18672: PUSH
18673: LD_INT 1050
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: PUSH
18682: LD_OWVAR 67
18686: ARRAY
18687: PLUS
18688: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18689: LD_VAR 0 1
18693: PPUSH
18694: CALL_OW 255
18698: PUSH
18699: LD_INT 3
18701: EQUAL
18702: IFFALSE 18720
// ru_vehicles := ru_vehicles ^ veh ;
18704: LD_ADDR_EXP 56
18708: PUSH
18709: LD_EXP 56
18713: PUSH
18714: LD_VAR 0 1
18718: ADD
18719: ST_TO_ADDR
// end ;
18720: PPOPN 2
18722: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18723: LD_VAR 0 1
18727: PPUSH
18728: CALL 35214 0 1
// if un in ru_patrol then
18732: LD_VAR 0 1
18736: PUSH
18737: LD_EXP 53
18741: IN
18742: IFFALSE 18760
// ru_patrol := ru_patrol diff un ;
18744: LD_ADDR_EXP 53
18748: PUSH
18749: LD_EXP 53
18753: PUSH
18754: LD_VAR 0 1
18758: DIFF
18759: ST_TO_ADDR
// if un in ru_forest then
18760: LD_VAR 0 1
18764: PUSH
18765: LD_EXP 55
18769: IN
18770: IFFALSE 18788
// ru_forest := ru_forest diff un ;
18772: LD_ADDR_EXP 55
18776: PUSH
18777: LD_EXP 55
18781: PUSH
18782: LD_VAR 0 1
18786: DIFF
18787: ST_TO_ADDR
// if un in ru_vehicles then
18788: LD_VAR 0 1
18792: PUSH
18793: LD_EXP 56
18797: IN
18798: IFFALSE 18904
// begin ru_vehicles := ru_vehicles diff un ;
18800: LD_ADDR_EXP 56
18804: PUSH
18805: LD_EXP 56
18809: PUSH
18810: LD_VAR 0 1
18814: DIFF
18815: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18816: LD_ADDR_EXP 57
18820: PUSH
18821: LD_EXP 57
18825: PUSH
18826: LD_VAR 0 1
18830: PPUSH
18831: CALL_OW 265
18835: PUSH
18836: LD_VAR 0 1
18840: PPUSH
18841: CALL_OW 262
18845: PUSH
18846: LD_VAR 0 1
18850: PPUSH
18851: CALL_OW 263
18855: PUSH
18856: LD_VAR 0 1
18860: PPUSH
18861: CALL_OW 264
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: ADD
18872: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18873: LD_ADDR_EXP 13
18877: PUSH
18878: LD_EXP 13
18882: PUSH
18883: LD_INT 1
18885: PLUS
18886: ST_TO_ADDR
// if ach_counter = 10 then
18887: LD_EXP 13
18891: PUSH
18892: LD_INT 10
18894: EQUAL
18895: IFFALSE 18904
// SetAchievement ( ACH_FAUST ) ;
18897: LD_STRING ACH_FAUST
18899: PPUSH
18900: CALL_OW 543
// end ; if un = Pokryshkin then
18904: LD_VAR 0 1
18908: PUSH
18909: LD_EXP 52
18913: EQUAL
18914: IFFALSE 18923
// SetAchievement ( ACH_POKR ) ;
18916: LD_STRING ACH_POKR
18918: PPUSH
18919: CALL_OW 543
// if un = JMM then
18923: LD_VAR 0 1
18927: PUSH
18928: LD_EXP 37
18932: EQUAL
18933: IFFALSE 18942
// YouLost ( 0 ) ;
18935: LD_STRING 0
18937: PPUSH
18938: CALL_OW 104
// if un = us_dep_west then
18942: LD_VAR 0 1
18946: PUSH
18947: LD_INT 1
18949: EQUAL
18950: IFFALSE 18959
// YouLost ( 2 ) ;
18952: LD_STRING 2
18954: PPUSH
18955: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18959: LD_VAR 0 1
18963: PPUSH
18964: CALL_OW 255
18968: PUSH
18969: LD_INT 8
18971: EQUAL
18972: PUSH
18973: LD_EXP 5
18977: NOT
18978: AND
18979: IFFALSE 18988
// YouLost ( 4 ) ;
18981: LD_STRING 4
18983: PPUSH
18984: CALL_OW 104
// if un in jmm_units then
18988: LD_VAR 0 1
18992: PUSH
18993: LD_EXP 4
18997: IN
18998: IFFALSE 19014
// lose_counter := lose_counter + 1 ;
19000: LD_ADDR_EXP 34
19004: PUSH
19005: LD_EXP 34
19009: PUSH
19010: LD_INT 1
19012: PLUS
19013: ST_TO_ADDR
// end ;
19014: PPOPN 1
19016: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
19017: LD_INT 0
19019: PPUSH
19020: PPUSH
// begin if GetSide ( driver ) = 3 then
19021: LD_VAR 0 1
19025: PPUSH
19026: CALL_OW 255
19030: PUSH
19031: LD_INT 3
19033: EQUAL
19034: IFFALSE 19112
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
19036: LD_ADDR_VAR 0 6
19040: PUSH
19041: LD_INT 22
19043: PUSH
19044: LD_INT 3
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 30
19053: PUSH
19054: LD_INT 3
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PPUSH
19065: CALL_OW 69
19069: PPUSH
19070: CALL 1007 0 1
19074: ST_TO_ADDR
// if place then
19075: LD_VAR 0 6
19079: IFFALSE 19097
// ComEnterUnit ( driver , place ) else
19081: LD_VAR 0 1
19085: PPUSH
19086: LD_VAR 0 6
19090: PPUSH
19091: CALL_OW 120
19095: GO 19112
// ComMoveXY ( driver , 70 , 22 ) ;
19097: LD_VAR 0 1
19101: PPUSH
19102: LD_INT 70
19104: PPUSH
19105: LD_INT 22
19107: PPUSH
19108: CALL_OW 111
// end ; end ;
19112: PPOPN 6
19114: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
19115: LD_VAR 0 1
19119: PUSH
19120: LD_INT 1
19122: EQUAL
19123: PUSH
19124: LD_VAR 0 2
19128: PUSH
19129: LD_INT 4
19131: EQUAL
19132: PUSH
19133: LD_VAR 0 2
19137: PUSH
19138: LD_INT 8
19140: EQUAL
19141: PUSH
19142: LD_EXP 5
19146: NOT
19147: AND
19148: OR
19149: AND
19150: IFFALSE 19159
// YouLost ( 5 ) ;
19152: LD_STRING 5
19154: PPUSH
19155: CALL_OW 104
// end ;
19159: PPOPN 2
19161: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
19162: LD_EXP 36
19166: PUSH
19167: LD_INT 22
19169: PUSH
19170: LD_INT 1
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 21
19179: PUSH
19180: LD_INT 1
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PPUSH
19191: CALL_OW 69
19195: PUSH
19196: LD_INT 22
19198: PUSH
19199: LD_INT 8
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 21
19208: PUSH
19209: LD_INT 1
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PPUSH
19220: CALL_OW 69
19224: ADD
19225: PLUS
19226: PUSH
19227: LD_INT 5
19229: LESS
19230: IFFALSE 19242
19232: GO 19234
19234: DISABLE
// YouLost ( 1 ) ;
19235: LD_STRING 1
19237: PPUSH
19238: CALL_OW 104
19242: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
19243: LD_INT 1
19245: PPUSH
19246: CALL_OW 255
19250: PUSH
19251: LD_INT 3
19253: EQUAL
19254: IFFALSE 19266
19256: GO 19258
19258: DISABLE
// YouLost ( 3 ) ; end_of_file end_of_file
19259: LD_STRING 3
19261: PPUSH
19262: CALL_OW 104
19266: END
// export globalGameSaveCounter ; every 0 0$1 do
19267: GO 19269
19269: DISABLE
// begin enable ;
19270: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19271: LD_STRING updateTimer(
19273: PUSH
19274: LD_OWVAR 1
19278: STR
19279: PUSH
19280: LD_STRING );
19282: STR
19283: PPUSH
19284: CALL_OW 559
// end ;
19288: END
// every 0 0$1 do
19289: GO 19291
19291: DISABLE
// begin globalGameSaveCounter := 0 ;
19292: LD_ADDR_EXP 62
19296: PUSH
19297: LD_INT 0
19299: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19300: LD_STRING setGameSaveCounter(0)
19302: PPUSH
19303: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19307: LD_STRING initStreamRollete();
19309: PPUSH
19310: CALL_OW 559
// InitStreamMode ;
19314: CALL 20657 0 0
// DefineStreamItems ( false ) ;
19318: LD_INT 0
19320: PPUSH
19321: CALL 21121 0 1
// end ;
19325: END
// export function SOS_MapStart ( ) ; begin
19326: LD_INT 0
19328: PPUSH
// if streamModeActive then
19329: LD_EXP 63
19333: IFFALSE 19342
// DefineStreamItems ( true ) ;
19335: LD_INT 1
19337: PPUSH
19338: CALL 21121 0 1
// UpdateLuaVariables ( ) ;
19342: CALL 19359 0 0
// UpdateFactoryWaypoints ( ) ;
19346: CALL 34123 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19350: CALL 34375 0 0
// end ;
19354: LD_VAR 0 1
19358: RET
// function UpdateLuaVariables ( ) ; begin
19359: LD_INT 0
19361: PPUSH
// if globalGameSaveCounter then
19362: LD_EXP 62
19366: IFFALSE 19400
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19368: LD_ADDR_EXP 62
19372: PUSH
19373: LD_EXP 62
19377: PPUSH
19378: CALL 79704 0 1
19382: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19383: LD_STRING setGameSaveCounter(
19385: PUSH
19386: LD_EXP 62
19390: STR
19391: PUSH
19392: LD_STRING )
19394: STR
19395: PPUSH
19396: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19400: LD_STRING setGameDifficulty(
19402: PUSH
19403: LD_OWVAR 67
19407: STR
19408: PUSH
19409: LD_STRING )
19411: STR
19412: PPUSH
19413: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19417: LD_STRING displayDifficulty(
19419: PUSH
19420: LD_OWVAR 67
19424: STR
19425: PUSH
19426: LD_STRING )
19428: STR
19429: PPUSH
19430: CALL_OW 559
// end ;
19434: LD_VAR 0 1
19438: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19439: LD_INT 0
19441: PPUSH
// if p2 = stream_mode then
19442: LD_VAR 0 2
19446: PUSH
19447: LD_INT 100
19449: EQUAL
19450: IFFALSE 20453
// begin if not StreamModeActive then
19452: LD_EXP 63
19456: NOT
19457: IFFALSE 19467
// StreamModeActive := true ;
19459: LD_ADDR_EXP 63
19463: PUSH
19464: LD_INT 1
19466: ST_TO_ADDR
// if p3 = 0 then
19467: LD_VAR 0 3
19471: PUSH
19472: LD_INT 0
19474: EQUAL
19475: IFFALSE 19481
// InitStreamMode ;
19477: CALL 20657 0 0
// if p3 = 1 then
19481: LD_VAR 0 3
19485: PUSH
19486: LD_INT 1
19488: EQUAL
19489: IFFALSE 19499
// sRocket := true ;
19491: LD_ADDR_EXP 68
19495: PUSH
19496: LD_INT 1
19498: ST_TO_ADDR
// if p3 = 2 then
19499: LD_VAR 0 3
19503: PUSH
19504: LD_INT 2
19506: EQUAL
19507: IFFALSE 19517
// sSpeed := true ;
19509: LD_ADDR_EXP 67
19513: PUSH
19514: LD_INT 1
19516: ST_TO_ADDR
// if p3 = 3 then
19517: LD_VAR 0 3
19521: PUSH
19522: LD_INT 3
19524: EQUAL
19525: IFFALSE 19535
// sEngine := true ;
19527: LD_ADDR_EXP 69
19531: PUSH
19532: LD_INT 1
19534: ST_TO_ADDR
// if p3 = 4 then
19535: LD_VAR 0 3
19539: PUSH
19540: LD_INT 4
19542: EQUAL
19543: IFFALSE 19553
// sSpec := true ;
19545: LD_ADDR_EXP 66
19549: PUSH
19550: LD_INT 1
19552: ST_TO_ADDR
// if p3 = 5 then
19553: LD_VAR 0 3
19557: PUSH
19558: LD_INT 5
19560: EQUAL
19561: IFFALSE 19571
// sLevel := true ;
19563: LD_ADDR_EXP 70
19567: PUSH
19568: LD_INT 1
19570: ST_TO_ADDR
// if p3 = 6 then
19571: LD_VAR 0 3
19575: PUSH
19576: LD_INT 6
19578: EQUAL
19579: IFFALSE 19589
// sArmoury := true ;
19581: LD_ADDR_EXP 71
19585: PUSH
19586: LD_INT 1
19588: ST_TO_ADDR
// if p3 = 7 then
19589: LD_VAR 0 3
19593: PUSH
19594: LD_INT 7
19596: EQUAL
19597: IFFALSE 19607
// sRadar := true ;
19599: LD_ADDR_EXP 72
19603: PUSH
19604: LD_INT 1
19606: ST_TO_ADDR
// if p3 = 8 then
19607: LD_VAR 0 3
19611: PUSH
19612: LD_INT 8
19614: EQUAL
19615: IFFALSE 19625
// sBunker := true ;
19617: LD_ADDR_EXP 73
19621: PUSH
19622: LD_INT 1
19624: ST_TO_ADDR
// if p3 = 9 then
19625: LD_VAR 0 3
19629: PUSH
19630: LD_INT 9
19632: EQUAL
19633: IFFALSE 19643
// sHack := true ;
19635: LD_ADDR_EXP 74
19639: PUSH
19640: LD_INT 1
19642: ST_TO_ADDR
// if p3 = 10 then
19643: LD_VAR 0 3
19647: PUSH
19648: LD_INT 10
19650: EQUAL
19651: IFFALSE 19661
// sFire := true ;
19653: LD_ADDR_EXP 75
19657: PUSH
19658: LD_INT 1
19660: ST_TO_ADDR
// if p3 = 11 then
19661: LD_VAR 0 3
19665: PUSH
19666: LD_INT 11
19668: EQUAL
19669: IFFALSE 19679
// sRefresh := true ;
19671: LD_ADDR_EXP 76
19675: PUSH
19676: LD_INT 1
19678: ST_TO_ADDR
// if p3 = 12 then
19679: LD_VAR 0 3
19683: PUSH
19684: LD_INT 12
19686: EQUAL
19687: IFFALSE 19697
// sExp := true ;
19689: LD_ADDR_EXP 77
19693: PUSH
19694: LD_INT 1
19696: ST_TO_ADDR
// if p3 = 13 then
19697: LD_VAR 0 3
19701: PUSH
19702: LD_INT 13
19704: EQUAL
19705: IFFALSE 19715
// sDepot := true ;
19707: LD_ADDR_EXP 78
19711: PUSH
19712: LD_INT 1
19714: ST_TO_ADDR
// if p3 = 14 then
19715: LD_VAR 0 3
19719: PUSH
19720: LD_INT 14
19722: EQUAL
19723: IFFALSE 19733
// sFlag := true ;
19725: LD_ADDR_EXP 79
19729: PUSH
19730: LD_INT 1
19732: ST_TO_ADDR
// if p3 = 15 then
19733: LD_VAR 0 3
19737: PUSH
19738: LD_INT 15
19740: EQUAL
19741: IFFALSE 19751
// sKamikadze := true ;
19743: LD_ADDR_EXP 87
19747: PUSH
19748: LD_INT 1
19750: ST_TO_ADDR
// if p3 = 16 then
19751: LD_VAR 0 3
19755: PUSH
19756: LD_INT 16
19758: EQUAL
19759: IFFALSE 19769
// sTroll := true ;
19761: LD_ADDR_EXP 88
19765: PUSH
19766: LD_INT 1
19768: ST_TO_ADDR
// if p3 = 17 then
19769: LD_VAR 0 3
19773: PUSH
19774: LD_INT 17
19776: EQUAL
19777: IFFALSE 19787
// sSlow := true ;
19779: LD_ADDR_EXP 89
19783: PUSH
19784: LD_INT 1
19786: ST_TO_ADDR
// if p3 = 18 then
19787: LD_VAR 0 3
19791: PUSH
19792: LD_INT 18
19794: EQUAL
19795: IFFALSE 19805
// sLack := true ;
19797: LD_ADDR_EXP 90
19801: PUSH
19802: LD_INT 1
19804: ST_TO_ADDR
// if p3 = 19 then
19805: LD_VAR 0 3
19809: PUSH
19810: LD_INT 19
19812: EQUAL
19813: IFFALSE 19823
// sTank := true ;
19815: LD_ADDR_EXP 92
19819: PUSH
19820: LD_INT 1
19822: ST_TO_ADDR
// if p3 = 20 then
19823: LD_VAR 0 3
19827: PUSH
19828: LD_INT 20
19830: EQUAL
19831: IFFALSE 19841
// sRemote := true ;
19833: LD_ADDR_EXP 93
19837: PUSH
19838: LD_INT 1
19840: ST_TO_ADDR
// if p3 = 21 then
19841: LD_VAR 0 3
19845: PUSH
19846: LD_INT 21
19848: EQUAL
19849: IFFALSE 19859
// sPowell := true ;
19851: LD_ADDR_EXP 94
19855: PUSH
19856: LD_INT 1
19858: ST_TO_ADDR
// if p3 = 22 then
19859: LD_VAR 0 3
19863: PUSH
19864: LD_INT 22
19866: EQUAL
19867: IFFALSE 19877
// sTeleport := true ;
19869: LD_ADDR_EXP 97
19873: PUSH
19874: LD_INT 1
19876: ST_TO_ADDR
// if p3 = 23 then
19877: LD_VAR 0 3
19881: PUSH
19882: LD_INT 23
19884: EQUAL
19885: IFFALSE 19895
// sOilTower := true ;
19887: LD_ADDR_EXP 99
19891: PUSH
19892: LD_INT 1
19894: ST_TO_ADDR
// if p3 = 24 then
19895: LD_VAR 0 3
19899: PUSH
19900: LD_INT 24
19902: EQUAL
19903: IFFALSE 19913
// sShovel := true ;
19905: LD_ADDR_EXP 100
19909: PUSH
19910: LD_INT 1
19912: ST_TO_ADDR
// if p3 = 25 then
19913: LD_VAR 0 3
19917: PUSH
19918: LD_INT 25
19920: EQUAL
19921: IFFALSE 19931
// sSheik := true ;
19923: LD_ADDR_EXP 101
19927: PUSH
19928: LD_INT 1
19930: ST_TO_ADDR
// if p3 = 26 then
19931: LD_VAR 0 3
19935: PUSH
19936: LD_INT 26
19938: EQUAL
19939: IFFALSE 19949
// sEarthquake := true ;
19941: LD_ADDR_EXP 103
19945: PUSH
19946: LD_INT 1
19948: ST_TO_ADDR
// if p3 = 27 then
19949: LD_VAR 0 3
19953: PUSH
19954: LD_INT 27
19956: EQUAL
19957: IFFALSE 19967
// sAI := true ;
19959: LD_ADDR_EXP 104
19963: PUSH
19964: LD_INT 1
19966: ST_TO_ADDR
// if p3 = 28 then
19967: LD_VAR 0 3
19971: PUSH
19972: LD_INT 28
19974: EQUAL
19975: IFFALSE 19985
// sCargo := true ;
19977: LD_ADDR_EXP 107
19981: PUSH
19982: LD_INT 1
19984: ST_TO_ADDR
// if p3 = 29 then
19985: LD_VAR 0 3
19989: PUSH
19990: LD_INT 29
19992: EQUAL
19993: IFFALSE 20003
// sDLaser := true ;
19995: LD_ADDR_EXP 108
19999: PUSH
20000: LD_INT 1
20002: ST_TO_ADDR
// if p3 = 30 then
20003: LD_VAR 0 3
20007: PUSH
20008: LD_INT 30
20010: EQUAL
20011: IFFALSE 20021
// sExchange := true ;
20013: LD_ADDR_EXP 109
20017: PUSH
20018: LD_INT 1
20020: ST_TO_ADDR
// if p3 = 31 then
20021: LD_VAR 0 3
20025: PUSH
20026: LD_INT 31
20028: EQUAL
20029: IFFALSE 20039
// sFac := true ;
20031: LD_ADDR_EXP 110
20035: PUSH
20036: LD_INT 1
20038: ST_TO_ADDR
// if p3 = 32 then
20039: LD_VAR 0 3
20043: PUSH
20044: LD_INT 32
20046: EQUAL
20047: IFFALSE 20057
// sPower := true ;
20049: LD_ADDR_EXP 111
20053: PUSH
20054: LD_INT 1
20056: ST_TO_ADDR
// if p3 = 33 then
20057: LD_VAR 0 3
20061: PUSH
20062: LD_INT 33
20064: EQUAL
20065: IFFALSE 20075
// sRandom := true ;
20067: LD_ADDR_EXP 112
20071: PUSH
20072: LD_INT 1
20074: ST_TO_ADDR
// if p3 = 34 then
20075: LD_VAR 0 3
20079: PUSH
20080: LD_INT 34
20082: EQUAL
20083: IFFALSE 20093
// sShield := true ;
20085: LD_ADDR_EXP 113
20089: PUSH
20090: LD_INT 1
20092: ST_TO_ADDR
// if p3 = 35 then
20093: LD_VAR 0 3
20097: PUSH
20098: LD_INT 35
20100: EQUAL
20101: IFFALSE 20111
// sTime := true ;
20103: LD_ADDR_EXP 114
20107: PUSH
20108: LD_INT 1
20110: ST_TO_ADDR
// if p3 = 36 then
20111: LD_VAR 0 3
20115: PUSH
20116: LD_INT 36
20118: EQUAL
20119: IFFALSE 20129
// sTools := true ;
20121: LD_ADDR_EXP 115
20125: PUSH
20126: LD_INT 1
20128: ST_TO_ADDR
// if p3 = 101 then
20129: LD_VAR 0 3
20133: PUSH
20134: LD_INT 101
20136: EQUAL
20137: IFFALSE 20147
// sSold := true ;
20139: LD_ADDR_EXP 80
20143: PUSH
20144: LD_INT 1
20146: ST_TO_ADDR
// if p3 = 102 then
20147: LD_VAR 0 3
20151: PUSH
20152: LD_INT 102
20154: EQUAL
20155: IFFALSE 20165
// sDiff := true ;
20157: LD_ADDR_EXP 81
20161: PUSH
20162: LD_INT 1
20164: ST_TO_ADDR
// if p3 = 103 then
20165: LD_VAR 0 3
20169: PUSH
20170: LD_INT 103
20172: EQUAL
20173: IFFALSE 20183
// sFog := true ;
20175: LD_ADDR_EXP 84
20179: PUSH
20180: LD_INT 1
20182: ST_TO_ADDR
// if p3 = 104 then
20183: LD_VAR 0 3
20187: PUSH
20188: LD_INT 104
20190: EQUAL
20191: IFFALSE 20201
// sReset := true ;
20193: LD_ADDR_EXP 85
20197: PUSH
20198: LD_INT 1
20200: ST_TO_ADDR
// if p3 = 105 then
20201: LD_VAR 0 3
20205: PUSH
20206: LD_INT 105
20208: EQUAL
20209: IFFALSE 20219
// sSun := true ;
20211: LD_ADDR_EXP 86
20215: PUSH
20216: LD_INT 1
20218: ST_TO_ADDR
// if p3 = 106 then
20219: LD_VAR 0 3
20223: PUSH
20224: LD_INT 106
20226: EQUAL
20227: IFFALSE 20237
// sTiger := true ;
20229: LD_ADDR_EXP 82
20233: PUSH
20234: LD_INT 1
20236: ST_TO_ADDR
// if p3 = 107 then
20237: LD_VAR 0 3
20241: PUSH
20242: LD_INT 107
20244: EQUAL
20245: IFFALSE 20255
// sBomb := true ;
20247: LD_ADDR_EXP 83
20251: PUSH
20252: LD_INT 1
20254: ST_TO_ADDR
// if p3 = 108 then
20255: LD_VAR 0 3
20259: PUSH
20260: LD_INT 108
20262: EQUAL
20263: IFFALSE 20273
// sWound := true ;
20265: LD_ADDR_EXP 91
20269: PUSH
20270: LD_INT 1
20272: ST_TO_ADDR
// if p3 = 109 then
20273: LD_VAR 0 3
20277: PUSH
20278: LD_INT 109
20280: EQUAL
20281: IFFALSE 20291
// sBetray := true ;
20283: LD_ADDR_EXP 95
20287: PUSH
20288: LD_INT 1
20290: ST_TO_ADDR
// if p3 = 110 then
20291: LD_VAR 0 3
20295: PUSH
20296: LD_INT 110
20298: EQUAL
20299: IFFALSE 20309
// sContamin := true ;
20301: LD_ADDR_EXP 96
20305: PUSH
20306: LD_INT 1
20308: ST_TO_ADDR
// if p3 = 111 then
20309: LD_VAR 0 3
20313: PUSH
20314: LD_INT 111
20316: EQUAL
20317: IFFALSE 20327
// sOil := true ;
20319: LD_ADDR_EXP 98
20323: PUSH
20324: LD_INT 1
20326: ST_TO_ADDR
// if p3 = 112 then
20327: LD_VAR 0 3
20331: PUSH
20332: LD_INT 112
20334: EQUAL
20335: IFFALSE 20345
// sStu := true ;
20337: LD_ADDR_EXP 102
20341: PUSH
20342: LD_INT 1
20344: ST_TO_ADDR
// if p3 = 113 then
20345: LD_VAR 0 3
20349: PUSH
20350: LD_INT 113
20352: EQUAL
20353: IFFALSE 20363
// sBazooka := true ;
20355: LD_ADDR_EXP 105
20359: PUSH
20360: LD_INT 1
20362: ST_TO_ADDR
// if p3 = 114 then
20363: LD_VAR 0 3
20367: PUSH
20368: LD_INT 114
20370: EQUAL
20371: IFFALSE 20381
// sMortar := true ;
20373: LD_ADDR_EXP 106
20377: PUSH
20378: LD_INT 1
20380: ST_TO_ADDR
// if p3 = 115 then
20381: LD_VAR 0 3
20385: PUSH
20386: LD_INT 115
20388: EQUAL
20389: IFFALSE 20399
// sRanger := true ;
20391: LD_ADDR_EXP 116
20395: PUSH
20396: LD_INT 1
20398: ST_TO_ADDR
// if p3 = 116 then
20399: LD_VAR 0 3
20403: PUSH
20404: LD_INT 116
20406: EQUAL
20407: IFFALSE 20417
// sComputer := true ;
20409: LD_ADDR_EXP 117
20413: PUSH
20414: LD_INT 1
20416: ST_TO_ADDR
// if p3 = 117 then
20417: LD_VAR 0 3
20421: PUSH
20422: LD_INT 117
20424: EQUAL
20425: IFFALSE 20435
// s30 := true ;
20427: LD_ADDR_EXP 118
20431: PUSH
20432: LD_INT 1
20434: ST_TO_ADDR
// if p3 = 118 then
20435: LD_VAR 0 3
20439: PUSH
20440: LD_INT 118
20442: EQUAL
20443: IFFALSE 20453
// s60 := true ;
20445: LD_ADDR_EXP 119
20449: PUSH
20450: LD_INT 1
20452: ST_TO_ADDR
// end ; if p2 = hack_mode then
20453: LD_VAR 0 2
20457: PUSH
20458: LD_INT 101
20460: EQUAL
20461: IFFALSE 20589
// begin case p3 of 1 :
20463: LD_VAR 0 3
20467: PUSH
20468: LD_INT 1
20470: DOUBLE
20471: EQUAL
20472: IFTRUE 20476
20474: GO 20483
20476: POP
// hHackUnlimitedResources ; 2 :
20477: CALL 32736 0 0
20481: GO 20589
20483: LD_INT 2
20485: DOUBLE
20486: EQUAL
20487: IFTRUE 20491
20489: GO 20498
20491: POP
// hHackSetLevel10 ; 3 :
20492: CALL 32869 0 0
20496: GO 20589
20498: LD_INT 3
20500: DOUBLE
20501: EQUAL
20502: IFTRUE 20506
20504: GO 20513
20506: POP
// hHackSetLevel10YourUnits ; 4 :
20507: CALL 32954 0 0
20511: GO 20589
20513: LD_INT 4
20515: DOUBLE
20516: EQUAL
20517: IFTRUE 20521
20519: GO 20528
20521: POP
// hHackInvincible ; 5 :
20522: CALL 33402 0 0
20526: GO 20589
20528: LD_INT 5
20530: DOUBLE
20531: EQUAL
20532: IFTRUE 20536
20534: GO 20543
20536: POP
// hHackInvisible ; 6 :
20537: CALL 33513 0 0
20541: GO 20589
20543: LD_INT 6
20545: DOUBLE
20546: EQUAL
20547: IFTRUE 20551
20549: GO 20558
20551: POP
// hHackChangeYourSide ; 7 :
20552: CALL 33570 0 0
20556: GO 20589
20558: LD_INT 7
20560: DOUBLE
20561: EQUAL
20562: IFTRUE 20566
20564: GO 20573
20566: POP
// hHackChangeUnitSide ; 8 :
20567: CALL 33612 0 0
20571: GO 20589
20573: LD_INT 8
20575: DOUBLE
20576: EQUAL
20577: IFTRUE 20581
20579: GO 20588
20581: POP
// hHackFog ; end ;
20582: CALL 33713 0 0
20586: GO 20589
20588: POP
// end ; if p2 = game_save_mode then
20589: LD_VAR 0 2
20593: PUSH
20594: LD_INT 102
20596: EQUAL
20597: IFFALSE 20652
// begin if p3 = 1 then
20599: LD_VAR 0 3
20603: PUSH
20604: LD_INT 1
20606: EQUAL
20607: IFFALSE 20619
// globalGameSaveCounter := p4 ;
20609: LD_ADDR_EXP 62
20613: PUSH
20614: LD_VAR 0 4
20618: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20619: LD_VAR 0 3
20623: PUSH
20624: LD_INT 2
20626: EQUAL
20627: PUSH
20628: LD_EXP 62
20632: AND
20633: IFFALSE 20652
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20635: LD_STRING setGameSaveCounter(
20637: PUSH
20638: LD_EXP 62
20642: STR
20643: PUSH
20644: LD_STRING )
20646: STR
20647: PPUSH
20648: CALL_OW 559
// end ; end ;
20652: LD_VAR 0 7
20656: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20657: LD_INT 0
20659: PPUSH
// streamModeActive := false ;
20660: LD_ADDR_EXP 63
20664: PUSH
20665: LD_INT 0
20667: ST_TO_ADDR
// normalCounter := 36 ;
20668: LD_ADDR_EXP 64
20672: PUSH
20673: LD_INT 36
20675: ST_TO_ADDR
// hardcoreCounter := 18 ;
20676: LD_ADDR_EXP 65
20680: PUSH
20681: LD_INT 18
20683: ST_TO_ADDR
// sRocket := false ;
20684: LD_ADDR_EXP 68
20688: PUSH
20689: LD_INT 0
20691: ST_TO_ADDR
// sSpeed := false ;
20692: LD_ADDR_EXP 67
20696: PUSH
20697: LD_INT 0
20699: ST_TO_ADDR
// sEngine := false ;
20700: LD_ADDR_EXP 69
20704: PUSH
20705: LD_INT 0
20707: ST_TO_ADDR
// sSpec := false ;
20708: LD_ADDR_EXP 66
20712: PUSH
20713: LD_INT 0
20715: ST_TO_ADDR
// sLevel := false ;
20716: LD_ADDR_EXP 70
20720: PUSH
20721: LD_INT 0
20723: ST_TO_ADDR
// sArmoury := false ;
20724: LD_ADDR_EXP 71
20728: PUSH
20729: LD_INT 0
20731: ST_TO_ADDR
// sRadar := false ;
20732: LD_ADDR_EXP 72
20736: PUSH
20737: LD_INT 0
20739: ST_TO_ADDR
// sBunker := false ;
20740: LD_ADDR_EXP 73
20744: PUSH
20745: LD_INT 0
20747: ST_TO_ADDR
// sHack := false ;
20748: LD_ADDR_EXP 74
20752: PUSH
20753: LD_INT 0
20755: ST_TO_ADDR
// sFire := false ;
20756: LD_ADDR_EXP 75
20760: PUSH
20761: LD_INT 0
20763: ST_TO_ADDR
// sRefresh := false ;
20764: LD_ADDR_EXP 76
20768: PUSH
20769: LD_INT 0
20771: ST_TO_ADDR
// sExp := false ;
20772: LD_ADDR_EXP 77
20776: PUSH
20777: LD_INT 0
20779: ST_TO_ADDR
// sDepot := false ;
20780: LD_ADDR_EXP 78
20784: PUSH
20785: LD_INT 0
20787: ST_TO_ADDR
// sFlag := false ;
20788: LD_ADDR_EXP 79
20792: PUSH
20793: LD_INT 0
20795: ST_TO_ADDR
// sKamikadze := false ;
20796: LD_ADDR_EXP 87
20800: PUSH
20801: LD_INT 0
20803: ST_TO_ADDR
// sTroll := false ;
20804: LD_ADDR_EXP 88
20808: PUSH
20809: LD_INT 0
20811: ST_TO_ADDR
// sSlow := false ;
20812: LD_ADDR_EXP 89
20816: PUSH
20817: LD_INT 0
20819: ST_TO_ADDR
// sLack := false ;
20820: LD_ADDR_EXP 90
20824: PUSH
20825: LD_INT 0
20827: ST_TO_ADDR
// sTank := false ;
20828: LD_ADDR_EXP 92
20832: PUSH
20833: LD_INT 0
20835: ST_TO_ADDR
// sRemote := false ;
20836: LD_ADDR_EXP 93
20840: PUSH
20841: LD_INT 0
20843: ST_TO_ADDR
// sPowell := false ;
20844: LD_ADDR_EXP 94
20848: PUSH
20849: LD_INT 0
20851: ST_TO_ADDR
// sTeleport := false ;
20852: LD_ADDR_EXP 97
20856: PUSH
20857: LD_INT 0
20859: ST_TO_ADDR
// sOilTower := false ;
20860: LD_ADDR_EXP 99
20864: PUSH
20865: LD_INT 0
20867: ST_TO_ADDR
// sShovel := false ;
20868: LD_ADDR_EXP 100
20872: PUSH
20873: LD_INT 0
20875: ST_TO_ADDR
// sSheik := false ;
20876: LD_ADDR_EXP 101
20880: PUSH
20881: LD_INT 0
20883: ST_TO_ADDR
// sEarthquake := false ;
20884: LD_ADDR_EXP 103
20888: PUSH
20889: LD_INT 0
20891: ST_TO_ADDR
// sAI := false ;
20892: LD_ADDR_EXP 104
20896: PUSH
20897: LD_INT 0
20899: ST_TO_ADDR
// sCargo := false ;
20900: LD_ADDR_EXP 107
20904: PUSH
20905: LD_INT 0
20907: ST_TO_ADDR
// sDLaser := false ;
20908: LD_ADDR_EXP 108
20912: PUSH
20913: LD_INT 0
20915: ST_TO_ADDR
// sExchange := false ;
20916: LD_ADDR_EXP 109
20920: PUSH
20921: LD_INT 0
20923: ST_TO_ADDR
// sFac := false ;
20924: LD_ADDR_EXP 110
20928: PUSH
20929: LD_INT 0
20931: ST_TO_ADDR
// sPower := false ;
20932: LD_ADDR_EXP 111
20936: PUSH
20937: LD_INT 0
20939: ST_TO_ADDR
// sRandom := false ;
20940: LD_ADDR_EXP 112
20944: PUSH
20945: LD_INT 0
20947: ST_TO_ADDR
// sShield := false ;
20948: LD_ADDR_EXP 113
20952: PUSH
20953: LD_INT 0
20955: ST_TO_ADDR
// sTime := false ;
20956: LD_ADDR_EXP 114
20960: PUSH
20961: LD_INT 0
20963: ST_TO_ADDR
// sTools := false ;
20964: LD_ADDR_EXP 115
20968: PUSH
20969: LD_INT 0
20971: ST_TO_ADDR
// sSold := false ;
20972: LD_ADDR_EXP 80
20976: PUSH
20977: LD_INT 0
20979: ST_TO_ADDR
// sDiff := false ;
20980: LD_ADDR_EXP 81
20984: PUSH
20985: LD_INT 0
20987: ST_TO_ADDR
// sFog := false ;
20988: LD_ADDR_EXP 84
20992: PUSH
20993: LD_INT 0
20995: ST_TO_ADDR
// sReset := false ;
20996: LD_ADDR_EXP 85
21000: PUSH
21001: LD_INT 0
21003: ST_TO_ADDR
// sSun := false ;
21004: LD_ADDR_EXP 86
21008: PUSH
21009: LD_INT 0
21011: ST_TO_ADDR
// sTiger := false ;
21012: LD_ADDR_EXP 82
21016: PUSH
21017: LD_INT 0
21019: ST_TO_ADDR
// sBomb := false ;
21020: LD_ADDR_EXP 83
21024: PUSH
21025: LD_INT 0
21027: ST_TO_ADDR
// sWound := false ;
21028: LD_ADDR_EXP 91
21032: PUSH
21033: LD_INT 0
21035: ST_TO_ADDR
// sBetray := false ;
21036: LD_ADDR_EXP 95
21040: PUSH
21041: LD_INT 0
21043: ST_TO_ADDR
// sContamin := false ;
21044: LD_ADDR_EXP 96
21048: PUSH
21049: LD_INT 0
21051: ST_TO_ADDR
// sOil := false ;
21052: LD_ADDR_EXP 98
21056: PUSH
21057: LD_INT 0
21059: ST_TO_ADDR
// sStu := false ;
21060: LD_ADDR_EXP 102
21064: PUSH
21065: LD_INT 0
21067: ST_TO_ADDR
// sBazooka := false ;
21068: LD_ADDR_EXP 105
21072: PUSH
21073: LD_INT 0
21075: ST_TO_ADDR
// sMortar := false ;
21076: LD_ADDR_EXP 106
21080: PUSH
21081: LD_INT 0
21083: ST_TO_ADDR
// sRanger := false ;
21084: LD_ADDR_EXP 116
21088: PUSH
21089: LD_INT 0
21091: ST_TO_ADDR
// sComputer := false ;
21092: LD_ADDR_EXP 117
21096: PUSH
21097: LD_INT 0
21099: ST_TO_ADDR
// s30 := false ;
21100: LD_ADDR_EXP 118
21104: PUSH
21105: LD_INT 0
21107: ST_TO_ADDR
// s60 := false ;
21108: LD_ADDR_EXP 119
21112: PUSH
21113: LD_INT 0
21115: ST_TO_ADDR
// end ;
21116: LD_VAR 0 1
21120: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21121: LD_INT 0
21123: PPUSH
21124: PPUSH
21125: PPUSH
21126: PPUSH
21127: PPUSH
21128: PPUSH
21129: PPUSH
// result := [ ] ;
21130: LD_ADDR_VAR 0 2
21134: PUSH
21135: EMPTY
21136: ST_TO_ADDR
// if campaign_id = 1 then
21137: LD_OWVAR 69
21141: PUSH
21142: LD_INT 1
21144: EQUAL
21145: IFFALSE 24311
// begin case mission_number of 1 :
21147: LD_OWVAR 70
21151: PUSH
21152: LD_INT 1
21154: DOUBLE
21155: EQUAL
21156: IFTRUE 21160
21158: GO 21236
21160: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21161: LD_ADDR_VAR 0 2
21165: PUSH
21166: LD_INT 2
21168: PUSH
21169: LD_INT 4
21171: PUSH
21172: LD_INT 11
21174: PUSH
21175: LD_INT 12
21177: PUSH
21178: LD_INT 15
21180: PUSH
21181: LD_INT 16
21183: PUSH
21184: LD_INT 22
21186: PUSH
21187: LD_INT 23
21189: PUSH
21190: LD_INT 26
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 101
21206: PUSH
21207: LD_INT 102
21209: PUSH
21210: LD_INT 106
21212: PUSH
21213: LD_INT 116
21215: PUSH
21216: LD_INT 117
21218: PUSH
21219: LD_INT 118
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: ST_TO_ADDR
21234: GO 24309
21236: LD_INT 2
21238: DOUBLE
21239: EQUAL
21240: IFTRUE 21244
21242: GO 21328
21244: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21245: LD_ADDR_VAR 0 2
21249: PUSH
21250: LD_INT 2
21252: PUSH
21253: LD_INT 4
21255: PUSH
21256: LD_INT 11
21258: PUSH
21259: LD_INT 12
21261: PUSH
21262: LD_INT 15
21264: PUSH
21265: LD_INT 16
21267: PUSH
21268: LD_INT 22
21270: PUSH
21271: LD_INT 23
21273: PUSH
21274: LD_INT 26
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 101
21290: PUSH
21291: LD_INT 102
21293: PUSH
21294: LD_INT 105
21296: PUSH
21297: LD_INT 106
21299: PUSH
21300: LD_INT 108
21302: PUSH
21303: LD_INT 116
21305: PUSH
21306: LD_INT 117
21308: PUSH
21309: LD_INT 118
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: ST_TO_ADDR
21326: GO 24309
21328: LD_INT 3
21330: DOUBLE
21331: EQUAL
21332: IFTRUE 21336
21334: GO 21424
21336: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21337: LD_ADDR_VAR 0 2
21341: PUSH
21342: LD_INT 2
21344: PUSH
21345: LD_INT 4
21347: PUSH
21348: LD_INT 5
21350: PUSH
21351: LD_INT 11
21353: PUSH
21354: LD_INT 12
21356: PUSH
21357: LD_INT 15
21359: PUSH
21360: LD_INT 16
21362: PUSH
21363: LD_INT 22
21365: PUSH
21366: LD_INT 26
21368: PUSH
21369: LD_INT 36
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 101
21386: PUSH
21387: LD_INT 102
21389: PUSH
21390: LD_INT 105
21392: PUSH
21393: LD_INT 106
21395: PUSH
21396: LD_INT 108
21398: PUSH
21399: LD_INT 116
21401: PUSH
21402: LD_INT 117
21404: PUSH
21405: LD_INT 118
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: ST_TO_ADDR
21422: GO 24309
21424: LD_INT 4
21426: DOUBLE
21427: EQUAL
21428: IFTRUE 21432
21430: GO 21528
21432: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21433: LD_ADDR_VAR 0 2
21437: PUSH
21438: LD_INT 2
21440: PUSH
21441: LD_INT 4
21443: PUSH
21444: LD_INT 5
21446: PUSH
21447: LD_INT 8
21449: PUSH
21450: LD_INT 11
21452: PUSH
21453: LD_INT 12
21455: PUSH
21456: LD_INT 15
21458: PUSH
21459: LD_INT 16
21461: PUSH
21462: LD_INT 22
21464: PUSH
21465: LD_INT 23
21467: PUSH
21468: LD_INT 26
21470: PUSH
21471: LD_INT 36
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 101
21490: PUSH
21491: LD_INT 102
21493: PUSH
21494: LD_INT 105
21496: PUSH
21497: LD_INT 106
21499: PUSH
21500: LD_INT 108
21502: PUSH
21503: LD_INT 116
21505: PUSH
21506: LD_INT 117
21508: PUSH
21509: LD_INT 118
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: ST_TO_ADDR
21526: GO 24309
21528: LD_INT 5
21530: DOUBLE
21531: EQUAL
21532: IFTRUE 21536
21534: GO 21648
21536: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21537: LD_ADDR_VAR 0 2
21541: PUSH
21542: LD_INT 2
21544: PUSH
21545: LD_INT 4
21547: PUSH
21548: LD_INT 5
21550: PUSH
21551: LD_INT 6
21553: PUSH
21554: LD_INT 8
21556: PUSH
21557: LD_INT 11
21559: PUSH
21560: LD_INT 12
21562: PUSH
21563: LD_INT 15
21565: PUSH
21566: LD_INT 16
21568: PUSH
21569: LD_INT 22
21571: PUSH
21572: LD_INT 23
21574: PUSH
21575: LD_INT 25
21577: PUSH
21578: LD_INT 26
21580: PUSH
21581: LD_INT 36
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 101
21602: PUSH
21603: LD_INT 102
21605: PUSH
21606: LD_INT 105
21608: PUSH
21609: LD_INT 106
21611: PUSH
21612: LD_INT 108
21614: PUSH
21615: LD_INT 109
21617: PUSH
21618: LD_INT 112
21620: PUSH
21621: LD_INT 116
21623: PUSH
21624: LD_INT 117
21626: PUSH
21627: LD_INT 118
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: ST_TO_ADDR
21646: GO 24309
21648: LD_INT 6
21650: DOUBLE
21651: EQUAL
21652: IFTRUE 21656
21654: GO 21788
21656: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21657: LD_ADDR_VAR 0 2
21661: PUSH
21662: LD_INT 2
21664: PUSH
21665: LD_INT 4
21667: PUSH
21668: LD_INT 5
21670: PUSH
21671: LD_INT 6
21673: PUSH
21674: LD_INT 8
21676: PUSH
21677: LD_INT 11
21679: PUSH
21680: LD_INT 12
21682: PUSH
21683: LD_INT 15
21685: PUSH
21686: LD_INT 16
21688: PUSH
21689: LD_INT 20
21691: PUSH
21692: LD_INT 21
21694: PUSH
21695: LD_INT 22
21697: PUSH
21698: LD_INT 23
21700: PUSH
21701: LD_INT 25
21703: PUSH
21704: LD_INT 26
21706: PUSH
21707: LD_INT 30
21709: PUSH
21710: LD_INT 31
21712: PUSH
21713: LD_INT 32
21715: PUSH
21716: LD_INT 36
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 101
21742: PUSH
21743: LD_INT 102
21745: PUSH
21746: LD_INT 105
21748: PUSH
21749: LD_INT 106
21751: PUSH
21752: LD_INT 108
21754: PUSH
21755: LD_INT 109
21757: PUSH
21758: LD_INT 112
21760: PUSH
21761: LD_INT 116
21763: PUSH
21764: LD_INT 117
21766: PUSH
21767: LD_INT 118
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: ST_TO_ADDR
21786: GO 24309
21788: LD_INT 7
21790: DOUBLE
21791: EQUAL
21792: IFTRUE 21796
21794: GO 21908
21796: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21797: LD_ADDR_VAR 0 2
21801: PUSH
21802: LD_INT 2
21804: PUSH
21805: LD_INT 4
21807: PUSH
21808: LD_INT 5
21810: PUSH
21811: LD_INT 7
21813: PUSH
21814: LD_INT 11
21816: PUSH
21817: LD_INT 12
21819: PUSH
21820: LD_INT 15
21822: PUSH
21823: LD_INT 16
21825: PUSH
21826: LD_INT 20
21828: PUSH
21829: LD_INT 21
21831: PUSH
21832: LD_INT 22
21834: PUSH
21835: LD_INT 23
21837: PUSH
21838: LD_INT 25
21840: PUSH
21841: LD_INT 26
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 101
21862: PUSH
21863: LD_INT 102
21865: PUSH
21866: LD_INT 103
21868: PUSH
21869: LD_INT 105
21871: PUSH
21872: LD_INT 106
21874: PUSH
21875: LD_INT 108
21877: PUSH
21878: LD_INT 112
21880: PUSH
21881: LD_INT 116
21883: PUSH
21884: LD_INT 117
21886: PUSH
21887: LD_INT 118
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: ST_TO_ADDR
21906: GO 24309
21908: LD_INT 8
21910: DOUBLE
21911: EQUAL
21912: IFTRUE 21916
21914: GO 22056
21916: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21917: LD_ADDR_VAR 0 2
21921: PUSH
21922: LD_INT 2
21924: PUSH
21925: LD_INT 4
21927: PUSH
21928: LD_INT 5
21930: PUSH
21931: LD_INT 6
21933: PUSH
21934: LD_INT 7
21936: PUSH
21937: LD_INT 8
21939: PUSH
21940: LD_INT 11
21942: PUSH
21943: LD_INT 12
21945: PUSH
21946: LD_INT 15
21948: PUSH
21949: LD_INT 16
21951: PUSH
21952: LD_INT 20
21954: PUSH
21955: LD_INT 21
21957: PUSH
21958: LD_INT 22
21960: PUSH
21961: LD_INT 23
21963: PUSH
21964: LD_INT 25
21966: PUSH
21967: LD_INT 26
21969: PUSH
21970: LD_INT 30
21972: PUSH
21973: LD_INT 31
21975: PUSH
21976: LD_INT 32
21978: PUSH
21979: LD_INT 36
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 101
22006: PUSH
22007: LD_INT 102
22009: PUSH
22010: LD_INT 103
22012: PUSH
22013: LD_INT 105
22015: PUSH
22016: LD_INT 106
22018: PUSH
22019: LD_INT 108
22021: PUSH
22022: LD_INT 109
22024: PUSH
22025: LD_INT 112
22027: PUSH
22028: LD_INT 116
22030: PUSH
22031: LD_INT 117
22033: PUSH
22034: LD_INT 118
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: ST_TO_ADDR
22054: GO 24309
22056: LD_INT 9
22058: DOUBLE
22059: EQUAL
22060: IFTRUE 22064
22062: GO 22212
22064: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22065: LD_ADDR_VAR 0 2
22069: PUSH
22070: LD_INT 2
22072: PUSH
22073: LD_INT 4
22075: PUSH
22076: LD_INT 5
22078: PUSH
22079: LD_INT 6
22081: PUSH
22082: LD_INT 7
22084: PUSH
22085: LD_INT 8
22087: PUSH
22088: LD_INT 11
22090: PUSH
22091: LD_INT 12
22093: PUSH
22094: LD_INT 15
22096: PUSH
22097: LD_INT 16
22099: PUSH
22100: LD_INT 20
22102: PUSH
22103: LD_INT 21
22105: PUSH
22106: LD_INT 22
22108: PUSH
22109: LD_INT 23
22111: PUSH
22112: LD_INT 25
22114: PUSH
22115: LD_INT 26
22117: PUSH
22118: LD_INT 28
22120: PUSH
22121: LD_INT 30
22123: PUSH
22124: LD_INT 31
22126: PUSH
22127: LD_INT 32
22129: PUSH
22130: LD_INT 36
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 101
22158: PUSH
22159: LD_INT 102
22161: PUSH
22162: LD_INT 103
22164: PUSH
22165: LD_INT 105
22167: PUSH
22168: LD_INT 106
22170: PUSH
22171: LD_INT 108
22173: PUSH
22174: LD_INT 109
22176: PUSH
22177: LD_INT 112
22179: PUSH
22180: LD_INT 114
22182: PUSH
22183: LD_INT 116
22185: PUSH
22186: LD_INT 117
22188: PUSH
22189: LD_INT 118
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: ST_TO_ADDR
22210: GO 24309
22212: LD_INT 10
22214: DOUBLE
22215: EQUAL
22216: IFTRUE 22220
22218: GO 22416
22220: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22221: LD_ADDR_VAR 0 2
22225: PUSH
22226: LD_INT 2
22228: PUSH
22229: LD_INT 4
22231: PUSH
22232: LD_INT 5
22234: PUSH
22235: LD_INT 6
22237: PUSH
22238: LD_INT 7
22240: PUSH
22241: LD_INT 8
22243: PUSH
22244: LD_INT 9
22246: PUSH
22247: LD_INT 10
22249: PUSH
22250: LD_INT 11
22252: PUSH
22253: LD_INT 12
22255: PUSH
22256: LD_INT 13
22258: PUSH
22259: LD_INT 14
22261: PUSH
22262: LD_INT 15
22264: PUSH
22265: LD_INT 16
22267: PUSH
22268: LD_INT 17
22270: PUSH
22271: LD_INT 18
22273: PUSH
22274: LD_INT 19
22276: PUSH
22277: LD_INT 20
22279: PUSH
22280: LD_INT 21
22282: PUSH
22283: LD_INT 22
22285: PUSH
22286: LD_INT 23
22288: PUSH
22289: LD_INT 24
22291: PUSH
22292: LD_INT 25
22294: PUSH
22295: LD_INT 26
22297: PUSH
22298: LD_INT 28
22300: PUSH
22301: LD_INT 30
22303: PUSH
22304: LD_INT 31
22306: PUSH
22307: LD_INT 32
22309: PUSH
22310: LD_INT 36
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 101
22346: PUSH
22347: LD_INT 102
22349: PUSH
22350: LD_INT 103
22352: PUSH
22353: LD_INT 104
22355: PUSH
22356: LD_INT 105
22358: PUSH
22359: LD_INT 106
22361: PUSH
22362: LD_INT 107
22364: PUSH
22365: LD_INT 108
22367: PUSH
22368: LD_INT 109
22370: PUSH
22371: LD_INT 110
22373: PUSH
22374: LD_INT 111
22376: PUSH
22377: LD_INT 112
22379: PUSH
22380: LD_INT 114
22382: PUSH
22383: LD_INT 116
22385: PUSH
22386: LD_INT 117
22388: PUSH
22389: LD_INT 118
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: ST_TO_ADDR
22414: GO 24309
22416: LD_INT 11
22418: DOUBLE
22419: EQUAL
22420: IFTRUE 22424
22422: GO 22628
22424: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22425: LD_ADDR_VAR 0 2
22429: PUSH
22430: LD_INT 2
22432: PUSH
22433: LD_INT 3
22435: PUSH
22436: LD_INT 4
22438: PUSH
22439: LD_INT 5
22441: PUSH
22442: LD_INT 6
22444: PUSH
22445: LD_INT 7
22447: PUSH
22448: LD_INT 8
22450: PUSH
22451: LD_INT 9
22453: PUSH
22454: LD_INT 10
22456: PUSH
22457: LD_INT 11
22459: PUSH
22460: LD_INT 12
22462: PUSH
22463: LD_INT 13
22465: PUSH
22466: LD_INT 14
22468: PUSH
22469: LD_INT 15
22471: PUSH
22472: LD_INT 16
22474: PUSH
22475: LD_INT 17
22477: PUSH
22478: LD_INT 18
22480: PUSH
22481: LD_INT 19
22483: PUSH
22484: LD_INT 20
22486: PUSH
22487: LD_INT 21
22489: PUSH
22490: LD_INT 22
22492: PUSH
22493: LD_INT 23
22495: PUSH
22496: LD_INT 24
22498: PUSH
22499: LD_INT 25
22501: PUSH
22502: LD_INT 26
22504: PUSH
22505: LD_INT 28
22507: PUSH
22508: LD_INT 30
22510: PUSH
22511: LD_INT 31
22513: PUSH
22514: LD_INT 32
22516: PUSH
22517: LD_INT 34
22519: PUSH
22520: LD_INT 36
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 101
22558: PUSH
22559: LD_INT 102
22561: PUSH
22562: LD_INT 103
22564: PUSH
22565: LD_INT 104
22567: PUSH
22568: LD_INT 105
22570: PUSH
22571: LD_INT 106
22573: PUSH
22574: LD_INT 107
22576: PUSH
22577: LD_INT 108
22579: PUSH
22580: LD_INT 109
22582: PUSH
22583: LD_INT 110
22585: PUSH
22586: LD_INT 111
22588: PUSH
22589: LD_INT 112
22591: PUSH
22592: LD_INT 114
22594: PUSH
22595: LD_INT 116
22597: PUSH
22598: LD_INT 117
22600: PUSH
22601: LD_INT 118
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: ST_TO_ADDR
22626: GO 24309
22628: LD_INT 12
22630: DOUBLE
22631: EQUAL
22632: IFTRUE 22636
22634: GO 22856
22636: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22637: LD_ADDR_VAR 0 2
22641: PUSH
22642: LD_INT 1
22644: PUSH
22645: LD_INT 2
22647: PUSH
22648: LD_INT 3
22650: PUSH
22651: LD_INT 4
22653: PUSH
22654: LD_INT 5
22656: PUSH
22657: LD_INT 6
22659: PUSH
22660: LD_INT 7
22662: PUSH
22663: LD_INT 8
22665: PUSH
22666: LD_INT 9
22668: PUSH
22669: LD_INT 10
22671: PUSH
22672: LD_INT 11
22674: PUSH
22675: LD_INT 12
22677: PUSH
22678: LD_INT 13
22680: PUSH
22681: LD_INT 14
22683: PUSH
22684: LD_INT 15
22686: PUSH
22687: LD_INT 16
22689: PUSH
22690: LD_INT 17
22692: PUSH
22693: LD_INT 18
22695: PUSH
22696: LD_INT 19
22698: PUSH
22699: LD_INT 20
22701: PUSH
22702: LD_INT 21
22704: PUSH
22705: LD_INT 22
22707: PUSH
22708: LD_INT 23
22710: PUSH
22711: LD_INT 24
22713: PUSH
22714: LD_INT 25
22716: PUSH
22717: LD_INT 26
22719: PUSH
22720: LD_INT 27
22722: PUSH
22723: LD_INT 28
22725: PUSH
22726: LD_INT 30
22728: PUSH
22729: LD_INT 31
22731: PUSH
22732: LD_INT 32
22734: PUSH
22735: LD_INT 33
22737: PUSH
22738: LD_INT 34
22740: PUSH
22741: LD_INT 36
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 101
22782: PUSH
22783: LD_INT 102
22785: PUSH
22786: LD_INT 103
22788: PUSH
22789: LD_INT 104
22791: PUSH
22792: LD_INT 105
22794: PUSH
22795: LD_INT 106
22797: PUSH
22798: LD_INT 107
22800: PUSH
22801: LD_INT 108
22803: PUSH
22804: LD_INT 109
22806: PUSH
22807: LD_INT 110
22809: PUSH
22810: LD_INT 111
22812: PUSH
22813: LD_INT 112
22815: PUSH
22816: LD_INT 113
22818: PUSH
22819: LD_INT 114
22821: PUSH
22822: LD_INT 116
22824: PUSH
22825: LD_INT 117
22827: PUSH
22828: LD_INT 118
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: ST_TO_ADDR
22854: GO 24309
22856: LD_INT 13
22858: DOUBLE
22859: EQUAL
22860: IFTRUE 22864
22862: GO 23072
22864: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22865: LD_ADDR_VAR 0 2
22869: PUSH
22870: LD_INT 1
22872: PUSH
22873: LD_INT 2
22875: PUSH
22876: LD_INT 3
22878: PUSH
22879: LD_INT 4
22881: PUSH
22882: LD_INT 5
22884: PUSH
22885: LD_INT 8
22887: PUSH
22888: LD_INT 9
22890: PUSH
22891: LD_INT 10
22893: PUSH
22894: LD_INT 11
22896: PUSH
22897: LD_INT 12
22899: PUSH
22900: LD_INT 14
22902: PUSH
22903: LD_INT 15
22905: PUSH
22906: LD_INT 16
22908: PUSH
22909: LD_INT 17
22911: PUSH
22912: LD_INT 18
22914: PUSH
22915: LD_INT 19
22917: PUSH
22918: LD_INT 20
22920: PUSH
22921: LD_INT 21
22923: PUSH
22924: LD_INT 22
22926: PUSH
22927: LD_INT 23
22929: PUSH
22930: LD_INT 24
22932: PUSH
22933: LD_INT 25
22935: PUSH
22936: LD_INT 26
22938: PUSH
22939: LD_INT 27
22941: PUSH
22942: LD_INT 28
22944: PUSH
22945: LD_INT 30
22947: PUSH
22948: LD_INT 31
22950: PUSH
22951: LD_INT 32
22953: PUSH
22954: LD_INT 33
22956: PUSH
22957: LD_INT 34
22959: PUSH
22960: LD_INT 36
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 101
22998: PUSH
22999: LD_INT 102
23001: PUSH
23002: LD_INT 103
23004: PUSH
23005: LD_INT 104
23007: PUSH
23008: LD_INT 105
23010: PUSH
23011: LD_INT 106
23013: PUSH
23014: LD_INT 107
23016: PUSH
23017: LD_INT 108
23019: PUSH
23020: LD_INT 109
23022: PUSH
23023: LD_INT 110
23025: PUSH
23026: LD_INT 111
23028: PUSH
23029: LD_INT 112
23031: PUSH
23032: LD_INT 113
23034: PUSH
23035: LD_INT 114
23037: PUSH
23038: LD_INT 116
23040: PUSH
23041: LD_INT 117
23043: PUSH
23044: LD_INT 118
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: ST_TO_ADDR
23070: GO 24309
23072: LD_INT 14
23074: DOUBLE
23075: EQUAL
23076: IFTRUE 23080
23078: GO 23304
23080: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23081: LD_ADDR_VAR 0 2
23085: PUSH
23086: LD_INT 1
23088: PUSH
23089: LD_INT 2
23091: PUSH
23092: LD_INT 3
23094: PUSH
23095: LD_INT 4
23097: PUSH
23098: LD_INT 5
23100: PUSH
23101: LD_INT 6
23103: PUSH
23104: LD_INT 7
23106: PUSH
23107: LD_INT 8
23109: PUSH
23110: LD_INT 9
23112: PUSH
23113: LD_INT 10
23115: PUSH
23116: LD_INT 11
23118: PUSH
23119: LD_INT 12
23121: PUSH
23122: LD_INT 13
23124: PUSH
23125: LD_INT 14
23127: PUSH
23128: LD_INT 15
23130: PUSH
23131: LD_INT 16
23133: PUSH
23134: LD_INT 17
23136: PUSH
23137: LD_INT 18
23139: PUSH
23140: LD_INT 19
23142: PUSH
23143: LD_INT 20
23145: PUSH
23146: LD_INT 21
23148: PUSH
23149: LD_INT 22
23151: PUSH
23152: LD_INT 23
23154: PUSH
23155: LD_INT 24
23157: PUSH
23158: LD_INT 25
23160: PUSH
23161: LD_INT 26
23163: PUSH
23164: LD_INT 27
23166: PUSH
23167: LD_INT 28
23169: PUSH
23170: LD_INT 29
23172: PUSH
23173: LD_INT 30
23175: PUSH
23176: LD_INT 31
23178: PUSH
23179: LD_INT 32
23181: PUSH
23182: LD_INT 33
23184: PUSH
23185: LD_INT 34
23187: PUSH
23188: LD_INT 36
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 101
23230: PUSH
23231: LD_INT 102
23233: PUSH
23234: LD_INT 103
23236: PUSH
23237: LD_INT 104
23239: PUSH
23240: LD_INT 105
23242: PUSH
23243: LD_INT 106
23245: PUSH
23246: LD_INT 107
23248: PUSH
23249: LD_INT 108
23251: PUSH
23252: LD_INT 109
23254: PUSH
23255: LD_INT 110
23257: PUSH
23258: LD_INT 111
23260: PUSH
23261: LD_INT 112
23263: PUSH
23264: LD_INT 113
23266: PUSH
23267: LD_INT 114
23269: PUSH
23270: LD_INT 116
23272: PUSH
23273: LD_INT 117
23275: PUSH
23276: LD_INT 118
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: ST_TO_ADDR
23302: GO 24309
23304: LD_INT 15
23306: DOUBLE
23307: EQUAL
23308: IFTRUE 23312
23310: GO 23536
23312: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23313: LD_ADDR_VAR 0 2
23317: PUSH
23318: LD_INT 1
23320: PUSH
23321: LD_INT 2
23323: PUSH
23324: LD_INT 3
23326: PUSH
23327: LD_INT 4
23329: PUSH
23330: LD_INT 5
23332: PUSH
23333: LD_INT 6
23335: PUSH
23336: LD_INT 7
23338: PUSH
23339: LD_INT 8
23341: PUSH
23342: LD_INT 9
23344: PUSH
23345: LD_INT 10
23347: PUSH
23348: LD_INT 11
23350: PUSH
23351: LD_INT 12
23353: PUSH
23354: LD_INT 13
23356: PUSH
23357: LD_INT 14
23359: PUSH
23360: LD_INT 15
23362: PUSH
23363: LD_INT 16
23365: PUSH
23366: LD_INT 17
23368: PUSH
23369: LD_INT 18
23371: PUSH
23372: LD_INT 19
23374: PUSH
23375: LD_INT 20
23377: PUSH
23378: LD_INT 21
23380: PUSH
23381: LD_INT 22
23383: PUSH
23384: LD_INT 23
23386: PUSH
23387: LD_INT 24
23389: PUSH
23390: LD_INT 25
23392: PUSH
23393: LD_INT 26
23395: PUSH
23396: LD_INT 27
23398: PUSH
23399: LD_INT 28
23401: PUSH
23402: LD_INT 29
23404: PUSH
23405: LD_INT 30
23407: PUSH
23408: LD_INT 31
23410: PUSH
23411: LD_INT 32
23413: PUSH
23414: LD_INT 33
23416: PUSH
23417: LD_INT 34
23419: PUSH
23420: LD_INT 36
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 101
23462: PUSH
23463: LD_INT 102
23465: PUSH
23466: LD_INT 103
23468: PUSH
23469: LD_INT 104
23471: PUSH
23472: LD_INT 105
23474: PUSH
23475: LD_INT 106
23477: PUSH
23478: LD_INT 107
23480: PUSH
23481: LD_INT 108
23483: PUSH
23484: LD_INT 109
23486: PUSH
23487: LD_INT 110
23489: PUSH
23490: LD_INT 111
23492: PUSH
23493: LD_INT 112
23495: PUSH
23496: LD_INT 113
23498: PUSH
23499: LD_INT 114
23501: PUSH
23502: LD_INT 116
23504: PUSH
23505: LD_INT 117
23507: PUSH
23508: LD_INT 118
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: ST_TO_ADDR
23534: GO 24309
23536: LD_INT 16
23538: DOUBLE
23539: EQUAL
23540: IFTRUE 23544
23542: GO 23680
23544: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23545: LD_ADDR_VAR 0 2
23549: PUSH
23550: LD_INT 2
23552: PUSH
23553: LD_INT 4
23555: PUSH
23556: LD_INT 5
23558: PUSH
23559: LD_INT 7
23561: PUSH
23562: LD_INT 11
23564: PUSH
23565: LD_INT 12
23567: PUSH
23568: LD_INT 15
23570: PUSH
23571: LD_INT 16
23573: PUSH
23574: LD_INT 20
23576: PUSH
23577: LD_INT 21
23579: PUSH
23580: LD_INT 22
23582: PUSH
23583: LD_INT 23
23585: PUSH
23586: LD_INT 25
23588: PUSH
23589: LD_INT 26
23591: PUSH
23592: LD_INT 30
23594: PUSH
23595: LD_INT 31
23597: PUSH
23598: LD_INT 32
23600: PUSH
23601: LD_INT 33
23603: PUSH
23604: LD_INT 34
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 101
23630: PUSH
23631: LD_INT 102
23633: PUSH
23634: LD_INT 103
23636: PUSH
23637: LD_INT 106
23639: PUSH
23640: LD_INT 108
23642: PUSH
23643: LD_INT 112
23645: PUSH
23646: LD_INT 113
23648: PUSH
23649: LD_INT 114
23651: PUSH
23652: LD_INT 116
23654: PUSH
23655: LD_INT 117
23657: PUSH
23658: LD_INT 118
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: ST_TO_ADDR
23678: GO 24309
23680: LD_INT 17
23682: DOUBLE
23683: EQUAL
23684: IFTRUE 23688
23686: GO 23912
23688: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23689: LD_ADDR_VAR 0 2
23693: PUSH
23694: LD_INT 1
23696: PUSH
23697: LD_INT 2
23699: PUSH
23700: LD_INT 3
23702: PUSH
23703: LD_INT 4
23705: PUSH
23706: LD_INT 5
23708: PUSH
23709: LD_INT 6
23711: PUSH
23712: LD_INT 7
23714: PUSH
23715: LD_INT 8
23717: PUSH
23718: LD_INT 9
23720: PUSH
23721: LD_INT 10
23723: PUSH
23724: LD_INT 11
23726: PUSH
23727: LD_INT 12
23729: PUSH
23730: LD_INT 13
23732: PUSH
23733: LD_INT 14
23735: PUSH
23736: LD_INT 15
23738: PUSH
23739: LD_INT 16
23741: PUSH
23742: LD_INT 17
23744: PUSH
23745: LD_INT 18
23747: PUSH
23748: LD_INT 19
23750: PUSH
23751: LD_INT 20
23753: PUSH
23754: LD_INT 21
23756: PUSH
23757: LD_INT 22
23759: PUSH
23760: LD_INT 23
23762: PUSH
23763: LD_INT 24
23765: PUSH
23766: LD_INT 25
23768: PUSH
23769: LD_INT 26
23771: PUSH
23772: LD_INT 27
23774: PUSH
23775: LD_INT 28
23777: PUSH
23778: LD_INT 29
23780: PUSH
23781: LD_INT 30
23783: PUSH
23784: LD_INT 31
23786: PUSH
23787: LD_INT 32
23789: PUSH
23790: LD_INT 33
23792: PUSH
23793: LD_INT 34
23795: PUSH
23796: LD_INT 36
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 101
23838: PUSH
23839: LD_INT 102
23841: PUSH
23842: LD_INT 103
23844: PUSH
23845: LD_INT 104
23847: PUSH
23848: LD_INT 105
23850: PUSH
23851: LD_INT 106
23853: PUSH
23854: LD_INT 107
23856: PUSH
23857: LD_INT 108
23859: PUSH
23860: LD_INT 109
23862: PUSH
23863: LD_INT 110
23865: PUSH
23866: LD_INT 111
23868: PUSH
23869: LD_INT 112
23871: PUSH
23872: LD_INT 113
23874: PUSH
23875: LD_INT 114
23877: PUSH
23878: LD_INT 116
23880: PUSH
23881: LD_INT 117
23883: PUSH
23884: LD_INT 118
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: ST_TO_ADDR
23910: GO 24309
23912: LD_INT 18
23914: DOUBLE
23915: EQUAL
23916: IFTRUE 23920
23918: GO 24068
23920: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23921: LD_ADDR_VAR 0 2
23925: PUSH
23926: LD_INT 2
23928: PUSH
23929: LD_INT 4
23931: PUSH
23932: LD_INT 5
23934: PUSH
23935: LD_INT 7
23937: PUSH
23938: LD_INT 11
23940: PUSH
23941: LD_INT 12
23943: PUSH
23944: LD_INT 15
23946: PUSH
23947: LD_INT 16
23949: PUSH
23950: LD_INT 20
23952: PUSH
23953: LD_INT 21
23955: PUSH
23956: LD_INT 22
23958: PUSH
23959: LD_INT 23
23961: PUSH
23962: LD_INT 25
23964: PUSH
23965: LD_INT 26
23967: PUSH
23968: LD_INT 30
23970: PUSH
23971: LD_INT 31
23973: PUSH
23974: LD_INT 32
23976: PUSH
23977: LD_INT 33
23979: PUSH
23980: LD_INT 34
23982: PUSH
23983: LD_INT 35
23985: PUSH
23986: LD_INT 36
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 101
24014: PUSH
24015: LD_INT 102
24017: PUSH
24018: LD_INT 103
24020: PUSH
24021: LD_INT 106
24023: PUSH
24024: LD_INT 108
24026: PUSH
24027: LD_INT 112
24029: PUSH
24030: LD_INT 113
24032: PUSH
24033: LD_INT 114
24035: PUSH
24036: LD_INT 115
24038: PUSH
24039: LD_INT 116
24041: PUSH
24042: LD_INT 117
24044: PUSH
24045: LD_INT 118
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: ST_TO_ADDR
24066: GO 24309
24068: LD_INT 19
24070: DOUBLE
24071: EQUAL
24072: IFTRUE 24076
24074: GO 24308
24076: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24077: LD_ADDR_VAR 0 2
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: LD_INT 2
24087: PUSH
24088: LD_INT 3
24090: PUSH
24091: LD_INT 4
24093: PUSH
24094: LD_INT 5
24096: PUSH
24097: LD_INT 6
24099: PUSH
24100: LD_INT 7
24102: PUSH
24103: LD_INT 8
24105: PUSH
24106: LD_INT 9
24108: PUSH
24109: LD_INT 10
24111: PUSH
24112: LD_INT 11
24114: PUSH
24115: LD_INT 12
24117: PUSH
24118: LD_INT 13
24120: PUSH
24121: LD_INT 14
24123: PUSH
24124: LD_INT 15
24126: PUSH
24127: LD_INT 16
24129: PUSH
24130: LD_INT 17
24132: PUSH
24133: LD_INT 18
24135: PUSH
24136: LD_INT 19
24138: PUSH
24139: LD_INT 20
24141: PUSH
24142: LD_INT 21
24144: PUSH
24145: LD_INT 22
24147: PUSH
24148: LD_INT 23
24150: PUSH
24151: LD_INT 24
24153: PUSH
24154: LD_INT 25
24156: PUSH
24157: LD_INT 26
24159: PUSH
24160: LD_INT 27
24162: PUSH
24163: LD_INT 28
24165: PUSH
24166: LD_INT 29
24168: PUSH
24169: LD_INT 30
24171: PUSH
24172: LD_INT 31
24174: PUSH
24175: LD_INT 32
24177: PUSH
24178: LD_INT 33
24180: PUSH
24181: LD_INT 34
24183: PUSH
24184: LD_INT 35
24186: PUSH
24187: LD_INT 36
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 101
24230: PUSH
24231: LD_INT 102
24233: PUSH
24234: LD_INT 103
24236: PUSH
24237: LD_INT 104
24239: PUSH
24240: LD_INT 105
24242: PUSH
24243: LD_INT 106
24245: PUSH
24246: LD_INT 107
24248: PUSH
24249: LD_INT 108
24251: PUSH
24252: LD_INT 109
24254: PUSH
24255: LD_INT 110
24257: PUSH
24258: LD_INT 111
24260: PUSH
24261: LD_INT 112
24263: PUSH
24264: LD_INT 113
24266: PUSH
24267: LD_INT 114
24269: PUSH
24270: LD_INT 115
24272: PUSH
24273: LD_INT 116
24275: PUSH
24276: LD_INT 117
24278: PUSH
24279: LD_INT 118
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: ST_TO_ADDR
24306: GO 24309
24308: POP
// end else
24309: GO 24540
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24311: LD_ADDR_VAR 0 2
24315: PUSH
24316: LD_INT 1
24318: PUSH
24319: LD_INT 2
24321: PUSH
24322: LD_INT 3
24324: PUSH
24325: LD_INT 4
24327: PUSH
24328: LD_INT 5
24330: PUSH
24331: LD_INT 6
24333: PUSH
24334: LD_INT 7
24336: PUSH
24337: LD_INT 8
24339: PUSH
24340: LD_INT 9
24342: PUSH
24343: LD_INT 10
24345: PUSH
24346: LD_INT 11
24348: PUSH
24349: LD_INT 12
24351: PUSH
24352: LD_INT 13
24354: PUSH
24355: LD_INT 14
24357: PUSH
24358: LD_INT 15
24360: PUSH
24361: LD_INT 16
24363: PUSH
24364: LD_INT 17
24366: PUSH
24367: LD_INT 18
24369: PUSH
24370: LD_INT 19
24372: PUSH
24373: LD_INT 20
24375: PUSH
24376: LD_INT 21
24378: PUSH
24379: LD_INT 22
24381: PUSH
24382: LD_INT 23
24384: PUSH
24385: LD_INT 24
24387: PUSH
24388: LD_INT 25
24390: PUSH
24391: LD_INT 26
24393: PUSH
24394: LD_INT 27
24396: PUSH
24397: LD_INT 28
24399: PUSH
24400: LD_INT 29
24402: PUSH
24403: LD_INT 30
24405: PUSH
24406: LD_INT 31
24408: PUSH
24409: LD_INT 32
24411: PUSH
24412: LD_INT 33
24414: PUSH
24415: LD_INT 34
24417: PUSH
24418: LD_INT 35
24420: PUSH
24421: LD_INT 36
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 101
24464: PUSH
24465: LD_INT 102
24467: PUSH
24468: LD_INT 103
24470: PUSH
24471: LD_INT 104
24473: PUSH
24474: LD_INT 105
24476: PUSH
24477: LD_INT 106
24479: PUSH
24480: LD_INT 107
24482: PUSH
24483: LD_INT 108
24485: PUSH
24486: LD_INT 109
24488: PUSH
24489: LD_INT 110
24491: PUSH
24492: LD_INT 111
24494: PUSH
24495: LD_INT 112
24497: PUSH
24498: LD_INT 113
24500: PUSH
24501: LD_INT 114
24503: PUSH
24504: LD_INT 115
24506: PUSH
24507: LD_INT 116
24509: PUSH
24510: LD_INT 117
24512: PUSH
24513: LD_INT 118
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: ST_TO_ADDR
// if result then
24540: LD_VAR 0 2
24544: IFFALSE 25330
// begin normal :=  ;
24546: LD_ADDR_VAR 0 5
24550: PUSH
24551: LD_STRING 
24553: ST_TO_ADDR
// hardcore :=  ;
24554: LD_ADDR_VAR 0 6
24558: PUSH
24559: LD_STRING 
24561: ST_TO_ADDR
// active :=  ;
24562: LD_ADDR_VAR 0 7
24566: PUSH
24567: LD_STRING 
24569: ST_TO_ADDR
// for i = 1 to normalCounter do
24570: LD_ADDR_VAR 0 8
24574: PUSH
24575: DOUBLE
24576: LD_INT 1
24578: DEC
24579: ST_TO_ADDR
24580: LD_EXP 64
24584: PUSH
24585: FOR_TO
24586: IFFALSE 24687
// begin tmp := 0 ;
24588: LD_ADDR_VAR 0 3
24592: PUSH
24593: LD_STRING 0
24595: ST_TO_ADDR
// if result [ 1 ] then
24596: LD_VAR 0 2
24600: PUSH
24601: LD_INT 1
24603: ARRAY
24604: IFFALSE 24669
// if result [ 1 ] [ 1 ] = i then
24606: LD_VAR 0 2
24610: PUSH
24611: LD_INT 1
24613: ARRAY
24614: PUSH
24615: LD_INT 1
24617: ARRAY
24618: PUSH
24619: LD_VAR 0 8
24623: EQUAL
24624: IFFALSE 24669
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24626: LD_ADDR_VAR 0 2
24630: PUSH
24631: LD_VAR 0 2
24635: PPUSH
24636: LD_INT 1
24638: PPUSH
24639: LD_VAR 0 2
24643: PUSH
24644: LD_INT 1
24646: ARRAY
24647: PPUSH
24648: LD_INT 1
24650: PPUSH
24651: CALL_OW 3
24655: PPUSH
24656: CALL_OW 1
24660: ST_TO_ADDR
// tmp := 1 ;
24661: LD_ADDR_VAR 0 3
24665: PUSH
24666: LD_STRING 1
24668: ST_TO_ADDR
// end ; normal := normal & tmp ;
24669: LD_ADDR_VAR 0 5
24673: PUSH
24674: LD_VAR 0 5
24678: PUSH
24679: LD_VAR 0 3
24683: STR
24684: ST_TO_ADDR
// end ;
24685: GO 24585
24687: POP
24688: POP
// for i = 1 to hardcoreCounter do
24689: LD_ADDR_VAR 0 8
24693: PUSH
24694: DOUBLE
24695: LD_INT 1
24697: DEC
24698: ST_TO_ADDR
24699: LD_EXP 65
24703: PUSH
24704: FOR_TO
24705: IFFALSE 24810
// begin tmp := 0 ;
24707: LD_ADDR_VAR 0 3
24711: PUSH
24712: LD_STRING 0
24714: ST_TO_ADDR
// if result [ 2 ] then
24715: LD_VAR 0 2
24719: PUSH
24720: LD_INT 2
24722: ARRAY
24723: IFFALSE 24792
// if result [ 2 ] [ 1 ] = 100 + i then
24725: LD_VAR 0 2
24729: PUSH
24730: LD_INT 2
24732: ARRAY
24733: PUSH
24734: LD_INT 1
24736: ARRAY
24737: PUSH
24738: LD_INT 100
24740: PUSH
24741: LD_VAR 0 8
24745: PLUS
24746: EQUAL
24747: IFFALSE 24792
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24749: LD_ADDR_VAR 0 2
24753: PUSH
24754: LD_VAR 0 2
24758: PPUSH
24759: LD_INT 2
24761: PPUSH
24762: LD_VAR 0 2
24766: PUSH
24767: LD_INT 2
24769: ARRAY
24770: PPUSH
24771: LD_INT 1
24773: PPUSH
24774: CALL_OW 3
24778: PPUSH
24779: CALL_OW 1
24783: ST_TO_ADDR
// tmp := 1 ;
24784: LD_ADDR_VAR 0 3
24788: PUSH
24789: LD_STRING 1
24791: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24792: LD_ADDR_VAR 0 6
24796: PUSH
24797: LD_VAR 0 6
24801: PUSH
24802: LD_VAR 0 3
24806: STR
24807: ST_TO_ADDR
// end ;
24808: GO 24704
24810: POP
24811: POP
// if isGameLoad then
24812: LD_VAR 0 1
24816: IFFALSE 25291
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24818: LD_ADDR_VAR 0 4
24822: PUSH
24823: LD_EXP 68
24827: PUSH
24828: LD_EXP 67
24832: PUSH
24833: LD_EXP 69
24837: PUSH
24838: LD_EXP 66
24842: PUSH
24843: LD_EXP 70
24847: PUSH
24848: LD_EXP 71
24852: PUSH
24853: LD_EXP 72
24857: PUSH
24858: LD_EXP 73
24862: PUSH
24863: LD_EXP 74
24867: PUSH
24868: LD_EXP 75
24872: PUSH
24873: LD_EXP 76
24877: PUSH
24878: LD_EXP 77
24882: PUSH
24883: LD_EXP 78
24887: PUSH
24888: LD_EXP 79
24892: PUSH
24893: LD_EXP 87
24897: PUSH
24898: LD_EXP 88
24902: PUSH
24903: LD_EXP 89
24907: PUSH
24908: LD_EXP 90
24912: PUSH
24913: LD_EXP 92
24917: PUSH
24918: LD_EXP 93
24922: PUSH
24923: LD_EXP 94
24927: PUSH
24928: LD_EXP 97
24932: PUSH
24933: LD_EXP 99
24937: PUSH
24938: LD_EXP 100
24942: PUSH
24943: LD_EXP 101
24947: PUSH
24948: LD_EXP 103
24952: PUSH
24953: LD_EXP 104
24957: PUSH
24958: LD_EXP 107
24962: PUSH
24963: LD_EXP 108
24967: PUSH
24968: LD_EXP 109
24972: PUSH
24973: LD_EXP 110
24977: PUSH
24978: LD_EXP 111
24982: PUSH
24983: LD_EXP 112
24987: PUSH
24988: LD_EXP 113
24992: PUSH
24993: LD_EXP 114
24997: PUSH
24998: LD_EXP 115
25002: PUSH
25003: LD_EXP 80
25007: PUSH
25008: LD_EXP 81
25012: PUSH
25013: LD_EXP 84
25017: PUSH
25018: LD_EXP 85
25022: PUSH
25023: LD_EXP 86
25027: PUSH
25028: LD_EXP 82
25032: PUSH
25033: LD_EXP 83
25037: PUSH
25038: LD_EXP 91
25042: PUSH
25043: LD_EXP 95
25047: PUSH
25048: LD_EXP 96
25052: PUSH
25053: LD_EXP 98
25057: PUSH
25058: LD_EXP 102
25062: PUSH
25063: LD_EXP 105
25067: PUSH
25068: LD_EXP 106
25072: PUSH
25073: LD_EXP 116
25077: PUSH
25078: LD_EXP 117
25082: PUSH
25083: LD_EXP 118
25087: PUSH
25088: LD_EXP 119
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: ST_TO_ADDR
// tmp :=  ;
25149: LD_ADDR_VAR 0 3
25153: PUSH
25154: LD_STRING 
25156: ST_TO_ADDR
// for i = 1 to normalCounter do
25157: LD_ADDR_VAR 0 8
25161: PUSH
25162: DOUBLE
25163: LD_INT 1
25165: DEC
25166: ST_TO_ADDR
25167: LD_EXP 64
25171: PUSH
25172: FOR_TO
25173: IFFALSE 25209
// begin if flags [ i ] then
25175: LD_VAR 0 4
25179: PUSH
25180: LD_VAR 0 8
25184: ARRAY
25185: IFFALSE 25207
// tmp := tmp & i & ; ;
25187: LD_ADDR_VAR 0 3
25191: PUSH
25192: LD_VAR 0 3
25196: PUSH
25197: LD_VAR 0 8
25201: STR
25202: PUSH
25203: LD_STRING ;
25205: STR
25206: ST_TO_ADDR
// end ;
25207: GO 25172
25209: POP
25210: POP
// for i = 1 to hardcoreCounter do
25211: LD_ADDR_VAR 0 8
25215: PUSH
25216: DOUBLE
25217: LD_INT 1
25219: DEC
25220: ST_TO_ADDR
25221: LD_EXP 65
25225: PUSH
25226: FOR_TO
25227: IFFALSE 25273
// begin if flags [ normalCounter + i ] then
25229: LD_VAR 0 4
25233: PUSH
25234: LD_EXP 64
25238: PUSH
25239: LD_VAR 0 8
25243: PLUS
25244: ARRAY
25245: IFFALSE 25271
// tmp := tmp & ( 100 + i ) & ; ;
25247: LD_ADDR_VAR 0 3
25251: PUSH
25252: LD_VAR 0 3
25256: PUSH
25257: LD_INT 100
25259: PUSH
25260: LD_VAR 0 8
25264: PLUS
25265: STR
25266: PUSH
25267: LD_STRING ;
25269: STR
25270: ST_TO_ADDR
// end ;
25271: GO 25226
25273: POP
25274: POP
// if tmp then
25275: LD_VAR 0 3
25279: IFFALSE 25291
// active := tmp ;
25281: LD_ADDR_VAR 0 7
25285: PUSH
25286: LD_VAR 0 3
25290: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25291: LD_STRING getStreamItemsFromMission("
25293: PUSH
25294: LD_VAR 0 5
25298: STR
25299: PUSH
25300: LD_STRING ","
25302: STR
25303: PUSH
25304: LD_VAR 0 6
25308: STR
25309: PUSH
25310: LD_STRING ","
25312: STR
25313: PUSH
25314: LD_VAR 0 7
25318: STR
25319: PUSH
25320: LD_STRING ")
25322: STR
25323: PPUSH
25324: CALL_OW 559
// end else
25328: GO 25337
// ToLua ( getStreamItemsFromMission("","","") ) ;
25330: LD_STRING getStreamItemsFromMission("","","")
25332: PPUSH
25333: CALL_OW 559
// end ;
25337: LD_VAR 0 2
25341: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25342: LD_EXP 63
25346: PUSH
25347: LD_EXP 68
25351: AND
25352: IFFALSE 25476
25354: GO 25356
25356: DISABLE
25357: LD_INT 0
25359: PPUSH
25360: PPUSH
// begin enable ;
25361: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25362: LD_ADDR_VAR 0 2
25366: PUSH
25367: LD_INT 22
25369: PUSH
25370: LD_OWVAR 2
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 2
25381: PUSH
25382: LD_INT 34
25384: PUSH
25385: LD_INT 7
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 34
25394: PUSH
25395: LD_INT 45
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 34
25404: PUSH
25405: LD_INT 28
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 34
25414: PUSH
25415: LD_INT 47
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PPUSH
25433: CALL_OW 69
25437: ST_TO_ADDR
// if not tmp then
25438: LD_VAR 0 2
25442: NOT
25443: IFFALSE 25447
// exit ;
25445: GO 25476
// for i in tmp do
25447: LD_ADDR_VAR 0 1
25451: PUSH
25452: LD_VAR 0 2
25456: PUSH
25457: FOR_IN
25458: IFFALSE 25474
// begin SetLives ( i , 0 ) ;
25460: LD_VAR 0 1
25464: PPUSH
25465: LD_INT 0
25467: PPUSH
25468: CALL_OW 234
// end ;
25472: GO 25457
25474: POP
25475: POP
// end ;
25476: PPOPN 2
25478: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25479: LD_EXP 63
25483: PUSH
25484: LD_EXP 69
25488: AND
25489: IFFALSE 25573
25491: GO 25493
25493: DISABLE
25494: LD_INT 0
25496: PPUSH
25497: PPUSH
// begin enable ;
25498: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25499: LD_ADDR_VAR 0 2
25503: PUSH
25504: LD_INT 22
25506: PUSH
25507: LD_OWVAR 2
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 32
25518: PUSH
25519: LD_INT 3
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PPUSH
25530: CALL_OW 69
25534: ST_TO_ADDR
// if not tmp then
25535: LD_VAR 0 2
25539: NOT
25540: IFFALSE 25544
// exit ;
25542: GO 25573
// for i in tmp do
25544: LD_ADDR_VAR 0 1
25548: PUSH
25549: LD_VAR 0 2
25553: PUSH
25554: FOR_IN
25555: IFFALSE 25571
// begin SetLives ( i , 0 ) ;
25557: LD_VAR 0 1
25561: PPUSH
25562: LD_INT 0
25564: PPUSH
25565: CALL_OW 234
// end ;
25569: GO 25554
25571: POP
25572: POP
// end ;
25573: PPOPN 2
25575: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25576: LD_EXP 63
25580: PUSH
25581: LD_EXP 66
25585: AND
25586: IFFALSE 25679
25588: GO 25590
25590: DISABLE
25591: LD_INT 0
25593: PPUSH
// begin enable ;
25594: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25595: LD_ADDR_VAR 0 1
25599: PUSH
25600: LD_INT 22
25602: PUSH
25603: LD_OWVAR 2
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 2
25614: PUSH
25615: LD_INT 25
25617: PUSH
25618: LD_INT 5
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 25
25627: PUSH
25628: LD_INT 9
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 25
25637: PUSH
25638: LD_INT 8
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PPUSH
25655: CALL_OW 69
25659: PUSH
25660: FOR_IN
25661: IFFALSE 25677
// begin SetClass ( i , 1 ) ;
25663: LD_VAR 0 1
25667: PPUSH
25668: LD_INT 1
25670: PPUSH
25671: CALL_OW 336
// end ;
25675: GO 25660
25677: POP
25678: POP
// end ;
25679: PPOPN 1
25681: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25682: LD_EXP 63
25686: PUSH
25687: LD_EXP 67
25691: AND
25692: PUSH
25693: LD_OWVAR 65
25697: PUSH
25698: LD_INT 7
25700: LESS
25701: AND
25702: IFFALSE 25716
25704: GO 25706
25706: DISABLE
// begin enable ;
25707: ENABLE
// game_speed := 7 ;
25708: LD_ADDR_OWVAR 65
25712: PUSH
25713: LD_INT 7
25715: ST_TO_ADDR
// end ;
25716: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25717: LD_EXP 63
25721: PUSH
25722: LD_EXP 70
25726: AND
25727: IFFALSE 25929
25729: GO 25731
25731: DISABLE
25732: LD_INT 0
25734: PPUSH
25735: PPUSH
25736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25737: LD_ADDR_VAR 0 3
25741: PUSH
25742: LD_INT 81
25744: PUSH
25745: LD_OWVAR 2
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 21
25756: PUSH
25757: LD_INT 1
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PPUSH
25768: CALL_OW 69
25772: ST_TO_ADDR
// if not tmp then
25773: LD_VAR 0 3
25777: NOT
25778: IFFALSE 25782
// exit ;
25780: GO 25929
// if tmp > 5 then
25782: LD_VAR 0 3
25786: PUSH
25787: LD_INT 5
25789: GREATER
25790: IFFALSE 25802
// k := 5 else
25792: LD_ADDR_VAR 0 2
25796: PUSH
25797: LD_INT 5
25799: ST_TO_ADDR
25800: GO 25812
// k := tmp ;
25802: LD_ADDR_VAR 0 2
25806: PUSH
25807: LD_VAR 0 3
25811: ST_TO_ADDR
// for i := 1 to k do
25812: LD_ADDR_VAR 0 1
25816: PUSH
25817: DOUBLE
25818: LD_INT 1
25820: DEC
25821: ST_TO_ADDR
25822: LD_VAR 0 2
25826: PUSH
25827: FOR_TO
25828: IFFALSE 25927
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25830: LD_VAR 0 3
25834: PUSH
25835: LD_VAR 0 1
25839: ARRAY
25840: PPUSH
25841: LD_VAR 0 1
25845: PUSH
25846: LD_INT 4
25848: MOD
25849: PUSH
25850: LD_INT 1
25852: PLUS
25853: PPUSH
25854: CALL_OW 259
25858: PUSH
25859: LD_INT 10
25861: LESS
25862: IFFALSE 25925
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25864: LD_VAR 0 3
25868: PUSH
25869: LD_VAR 0 1
25873: ARRAY
25874: PPUSH
25875: LD_VAR 0 1
25879: PUSH
25880: LD_INT 4
25882: MOD
25883: PUSH
25884: LD_INT 1
25886: PLUS
25887: PPUSH
25888: LD_VAR 0 3
25892: PUSH
25893: LD_VAR 0 1
25897: ARRAY
25898: PPUSH
25899: LD_VAR 0 1
25903: PUSH
25904: LD_INT 4
25906: MOD
25907: PUSH
25908: LD_INT 1
25910: PLUS
25911: PPUSH
25912: CALL_OW 259
25916: PUSH
25917: LD_INT 1
25919: PLUS
25920: PPUSH
25921: CALL_OW 237
25925: GO 25827
25927: POP
25928: POP
// end ;
25929: PPOPN 3
25931: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25932: LD_EXP 63
25936: PUSH
25937: LD_EXP 71
25941: AND
25942: IFFALSE 25962
25944: GO 25946
25946: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25947: LD_INT 4
25949: PPUSH
25950: LD_OWVAR 2
25954: PPUSH
25955: LD_INT 0
25957: PPUSH
25958: CALL_OW 324
25962: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25963: LD_EXP 63
25967: PUSH
25968: LD_EXP 100
25972: AND
25973: IFFALSE 25993
25975: GO 25977
25977: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25978: LD_INT 19
25980: PPUSH
25981: LD_OWVAR 2
25985: PPUSH
25986: LD_INT 0
25988: PPUSH
25989: CALL_OW 324
25993: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25994: LD_EXP 63
25998: PUSH
25999: LD_EXP 72
26003: AND
26004: IFFALSE 26106
26006: GO 26008
26008: DISABLE
26009: LD_INT 0
26011: PPUSH
26012: PPUSH
// begin enable ;
26013: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26014: LD_ADDR_VAR 0 2
26018: PUSH
26019: LD_INT 22
26021: PUSH
26022: LD_OWVAR 2
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: LD_INT 34
26036: PUSH
26037: LD_INT 11
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 34
26046: PUSH
26047: LD_INT 30
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: LIST
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PPUSH
26063: CALL_OW 69
26067: ST_TO_ADDR
// if not tmp then
26068: LD_VAR 0 2
26072: NOT
26073: IFFALSE 26077
// exit ;
26075: GO 26106
// for i in tmp do
26077: LD_ADDR_VAR 0 1
26081: PUSH
26082: LD_VAR 0 2
26086: PUSH
26087: FOR_IN
26088: IFFALSE 26104
// begin SetLives ( i , 0 ) ;
26090: LD_VAR 0 1
26094: PPUSH
26095: LD_INT 0
26097: PPUSH
26098: CALL_OW 234
// end ;
26102: GO 26087
26104: POP
26105: POP
// end ;
26106: PPOPN 2
26108: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26109: LD_EXP 63
26113: PUSH
26114: LD_EXP 73
26118: AND
26119: IFFALSE 26139
26121: GO 26123
26123: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26124: LD_INT 32
26126: PPUSH
26127: LD_OWVAR 2
26131: PPUSH
26132: LD_INT 0
26134: PPUSH
26135: CALL_OW 324
26139: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26140: LD_EXP 63
26144: PUSH
26145: LD_EXP 74
26149: AND
26150: IFFALSE 26331
26152: GO 26154
26154: DISABLE
26155: LD_INT 0
26157: PPUSH
26158: PPUSH
26159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26160: LD_ADDR_VAR 0 2
26164: PUSH
26165: LD_INT 22
26167: PUSH
26168: LD_OWVAR 2
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 33
26179: PUSH
26180: LD_INT 3
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PPUSH
26191: CALL_OW 69
26195: ST_TO_ADDR
// if not tmp then
26196: LD_VAR 0 2
26200: NOT
26201: IFFALSE 26205
// exit ;
26203: GO 26331
// side := 0 ;
26205: LD_ADDR_VAR 0 3
26209: PUSH
26210: LD_INT 0
26212: ST_TO_ADDR
// for i := 1 to 8 do
26213: LD_ADDR_VAR 0 1
26217: PUSH
26218: DOUBLE
26219: LD_INT 1
26221: DEC
26222: ST_TO_ADDR
26223: LD_INT 8
26225: PUSH
26226: FOR_TO
26227: IFFALSE 26275
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26229: LD_OWVAR 2
26233: PUSH
26234: LD_VAR 0 1
26238: NONEQUAL
26239: PUSH
26240: LD_OWVAR 2
26244: PPUSH
26245: LD_VAR 0 1
26249: PPUSH
26250: CALL_OW 81
26254: PUSH
26255: LD_INT 2
26257: EQUAL
26258: AND
26259: IFFALSE 26273
// begin side := i ;
26261: LD_ADDR_VAR 0 3
26265: PUSH
26266: LD_VAR 0 1
26270: ST_TO_ADDR
// break ;
26271: GO 26275
// end ;
26273: GO 26226
26275: POP
26276: POP
// if not side then
26277: LD_VAR 0 3
26281: NOT
26282: IFFALSE 26286
// exit ;
26284: GO 26331
// for i := 1 to tmp do
26286: LD_ADDR_VAR 0 1
26290: PUSH
26291: DOUBLE
26292: LD_INT 1
26294: DEC
26295: ST_TO_ADDR
26296: LD_VAR 0 2
26300: PUSH
26301: FOR_TO
26302: IFFALSE 26329
// if Prob ( 60 ) then
26304: LD_INT 60
26306: PPUSH
26307: CALL_OW 13
26311: IFFALSE 26327
// SetSide ( i , side ) ;
26313: LD_VAR 0 1
26317: PPUSH
26318: LD_VAR 0 3
26322: PPUSH
26323: CALL_OW 235
26327: GO 26301
26329: POP
26330: POP
// end ;
26331: PPOPN 3
26333: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26334: LD_EXP 63
26338: PUSH
26339: LD_EXP 76
26343: AND
26344: IFFALSE 26463
26346: GO 26348
26348: DISABLE
26349: LD_INT 0
26351: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26352: LD_ADDR_VAR 0 1
26356: PUSH
26357: LD_INT 22
26359: PUSH
26360: LD_OWVAR 2
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 21
26371: PUSH
26372: LD_INT 1
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 3
26381: PUSH
26382: LD_INT 23
26384: PUSH
26385: LD_INT 0
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: LIST
26400: PPUSH
26401: CALL_OW 69
26405: PUSH
26406: FOR_IN
26407: IFFALSE 26461
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26409: LD_VAR 0 1
26413: PPUSH
26414: CALL_OW 257
26418: PUSH
26419: LD_INT 1
26421: PUSH
26422: LD_INT 2
26424: PUSH
26425: LD_INT 3
26427: PUSH
26428: LD_INT 4
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: IN
26437: IFFALSE 26459
// SetClass ( un , rand ( 1 , 4 ) ) ;
26439: LD_VAR 0 1
26443: PPUSH
26444: LD_INT 1
26446: PPUSH
26447: LD_INT 4
26449: PPUSH
26450: CALL_OW 12
26454: PPUSH
26455: CALL_OW 336
26459: GO 26406
26461: POP
26462: POP
// end ;
26463: PPOPN 1
26465: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26466: LD_EXP 63
26470: PUSH
26471: LD_EXP 75
26475: AND
26476: IFFALSE 26555
26478: GO 26480
26480: DISABLE
26481: LD_INT 0
26483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26484: LD_ADDR_VAR 0 1
26488: PUSH
26489: LD_INT 22
26491: PUSH
26492: LD_OWVAR 2
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 21
26503: PUSH
26504: LD_INT 3
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PPUSH
26515: CALL_OW 69
26519: ST_TO_ADDR
// if not tmp then
26520: LD_VAR 0 1
26524: NOT
26525: IFFALSE 26529
// exit ;
26527: GO 26555
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26529: LD_VAR 0 1
26533: PUSH
26534: LD_INT 1
26536: PPUSH
26537: LD_VAR 0 1
26541: PPUSH
26542: CALL_OW 12
26546: ARRAY
26547: PPUSH
26548: LD_INT 100
26550: PPUSH
26551: CALL_OW 234
// end ;
26555: PPOPN 1
26557: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26558: LD_EXP 63
26562: PUSH
26563: LD_EXP 77
26567: AND
26568: IFFALSE 26666
26570: GO 26572
26572: DISABLE
26573: LD_INT 0
26575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26576: LD_ADDR_VAR 0 1
26580: PUSH
26581: LD_INT 22
26583: PUSH
26584: LD_OWVAR 2
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 21
26595: PUSH
26596: LD_INT 1
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PPUSH
26607: CALL_OW 69
26611: ST_TO_ADDR
// if not tmp then
26612: LD_VAR 0 1
26616: NOT
26617: IFFALSE 26621
// exit ;
26619: GO 26666
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26621: LD_VAR 0 1
26625: PUSH
26626: LD_INT 1
26628: PPUSH
26629: LD_VAR 0 1
26633: PPUSH
26634: CALL_OW 12
26638: ARRAY
26639: PPUSH
26640: LD_INT 1
26642: PPUSH
26643: LD_INT 4
26645: PPUSH
26646: CALL_OW 12
26650: PPUSH
26651: LD_INT 3000
26653: PPUSH
26654: LD_INT 9000
26656: PPUSH
26657: CALL_OW 12
26661: PPUSH
26662: CALL_OW 492
// end ;
26666: PPOPN 1
26668: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26669: LD_EXP 63
26673: PUSH
26674: LD_EXP 78
26678: AND
26679: IFFALSE 26699
26681: GO 26683
26683: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26684: LD_INT 1
26686: PPUSH
26687: LD_OWVAR 2
26691: PPUSH
26692: LD_INT 0
26694: PPUSH
26695: CALL_OW 324
26699: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26700: LD_EXP 63
26704: PUSH
26705: LD_EXP 79
26709: AND
26710: IFFALSE 26793
26712: GO 26714
26714: DISABLE
26715: LD_INT 0
26717: PPUSH
26718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26719: LD_ADDR_VAR 0 2
26723: PUSH
26724: LD_INT 22
26726: PUSH
26727: LD_OWVAR 2
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 21
26738: PUSH
26739: LD_INT 3
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PPUSH
26750: CALL_OW 69
26754: ST_TO_ADDR
// if not tmp then
26755: LD_VAR 0 2
26759: NOT
26760: IFFALSE 26764
// exit ;
26762: GO 26793
// for i in tmp do
26764: LD_ADDR_VAR 0 1
26768: PUSH
26769: LD_VAR 0 2
26773: PUSH
26774: FOR_IN
26775: IFFALSE 26791
// SetBLevel ( i , 10 ) ;
26777: LD_VAR 0 1
26781: PPUSH
26782: LD_INT 10
26784: PPUSH
26785: CALL_OW 241
26789: GO 26774
26791: POP
26792: POP
// end ;
26793: PPOPN 2
26795: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26796: LD_EXP 63
26800: PUSH
26801: LD_EXP 80
26805: AND
26806: IFFALSE 26917
26808: GO 26810
26810: DISABLE
26811: LD_INT 0
26813: PPUSH
26814: PPUSH
26815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26816: LD_ADDR_VAR 0 3
26820: PUSH
26821: LD_INT 22
26823: PUSH
26824: LD_OWVAR 2
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 25
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PPUSH
26847: CALL_OW 69
26851: ST_TO_ADDR
// if not tmp then
26852: LD_VAR 0 3
26856: NOT
26857: IFFALSE 26861
// exit ;
26859: GO 26917
// un := tmp [ rand ( 1 , tmp ) ] ;
26861: LD_ADDR_VAR 0 2
26865: PUSH
26866: LD_VAR 0 3
26870: PUSH
26871: LD_INT 1
26873: PPUSH
26874: LD_VAR 0 3
26878: PPUSH
26879: CALL_OW 12
26883: ARRAY
26884: ST_TO_ADDR
// if Crawls ( un ) then
26885: LD_VAR 0 2
26889: PPUSH
26890: CALL_OW 318
26894: IFFALSE 26905
// ComWalk ( un ) ;
26896: LD_VAR 0 2
26900: PPUSH
26901: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26905: LD_VAR 0 2
26909: PPUSH
26910: LD_INT 5
26912: PPUSH
26913: CALL_OW 336
// end ;
26917: PPOPN 3
26919: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26920: LD_EXP 63
26924: PUSH
26925: LD_EXP 81
26929: AND
26930: PUSH
26931: LD_OWVAR 67
26935: PUSH
26936: LD_INT 4
26938: LESS
26939: AND
26940: IFFALSE 26959
26942: GO 26944
26944: DISABLE
// begin Difficulty := Difficulty + 1 ;
26945: LD_ADDR_OWVAR 67
26949: PUSH
26950: LD_OWVAR 67
26954: PUSH
26955: LD_INT 1
26957: PLUS
26958: ST_TO_ADDR
// end ;
26959: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26960: LD_EXP 63
26964: PUSH
26965: LD_EXP 82
26969: AND
26970: IFFALSE 27073
26972: GO 26974
26974: DISABLE
26975: LD_INT 0
26977: PPUSH
// begin for i := 1 to 5 do
26978: LD_ADDR_VAR 0 1
26982: PUSH
26983: DOUBLE
26984: LD_INT 1
26986: DEC
26987: ST_TO_ADDR
26988: LD_INT 5
26990: PUSH
26991: FOR_TO
26992: IFFALSE 27071
// begin uc_nation := nation_nature ;
26994: LD_ADDR_OWVAR 21
26998: PUSH
26999: LD_INT 0
27001: ST_TO_ADDR
// uc_side := 0 ;
27002: LD_ADDR_OWVAR 20
27006: PUSH
27007: LD_INT 0
27009: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27010: LD_ADDR_OWVAR 29
27014: PUSH
27015: LD_INT 12
27017: PUSH
27018: LD_INT 12
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: ST_TO_ADDR
// hc_agressivity := 20 ;
27025: LD_ADDR_OWVAR 35
27029: PUSH
27030: LD_INT 20
27032: ST_TO_ADDR
// hc_class := class_tiger ;
27033: LD_ADDR_OWVAR 28
27037: PUSH
27038: LD_INT 14
27040: ST_TO_ADDR
// hc_gallery :=  ;
27041: LD_ADDR_OWVAR 33
27045: PUSH
27046: LD_STRING 
27048: ST_TO_ADDR
// hc_name :=  ;
27049: LD_ADDR_OWVAR 26
27053: PUSH
27054: LD_STRING 
27056: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27057: CALL_OW 44
27061: PPUSH
27062: LD_INT 0
27064: PPUSH
27065: CALL_OW 51
// end ;
27069: GO 26991
27071: POP
27072: POP
// end ;
27073: PPOPN 1
27075: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27076: LD_EXP 63
27080: PUSH
27081: LD_EXP 83
27085: AND
27086: IFFALSE 27095
27088: GO 27090
27090: DISABLE
// StreamSibBomb ;
27091: CALL 27096 0 0
27095: END
// export function StreamSibBomb ; var i , x , y ; begin
27096: LD_INT 0
27098: PPUSH
27099: PPUSH
27100: PPUSH
27101: PPUSH
// result := false ;
27102: LD_ADDR_VAR 0 1
27106: PUSH
27107: LD_INT 0
27109: ST_TO_ADDR
// for i := 1 to 16 do
27110: LD_ADDR_VAR 0 2
27114: PUSH
27115: DOUBLE
27116: LD_INT 1
27118: DEC
27119: ST_TO_ADDR
27120: LD_INT 16
27122: PUSH
27123: FOR_TO
27124: IFFALSE 27323
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27126: LD_ADDR_VAR 0 3
27130: PUSH
27131: LD_INT 10
27133: PUSH
27134: LD_INT 20
27136: PUSH
27137: LD_INT 30
27139: PUSH
27140: LD_INT 40
27142: PUSH
27143: LD_INT 50
27145: PUSH
27146: LD_INT 60
27148: PUSH
27149: LD_INT 70
27151: PUSH
27152: LD_INT 80
27154: PUSH
27155: LD_INT 90
27157: PUSH
27158: LD_INT 100
27160: PUSH
27161: LD_INT 110
27163: PUSH
27164: LD_INT 120
27166: PUSH
27167: LD_INT 130
27169: PUSH
27170: LD_INT 140
27172: PUSH
27173: LD_INT 150
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: PPUSH
27196: LD_INT 15
27198: PPUSH
27199: CALL_OW 12
27203: ARRAY
27204: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27205: LD_ADDR_VAR 0 4
27209: PUSH
27210: LD_INT 10
27212: PUSH
27213: LD_INT 20
27215: PUSH
27216: LD_INT 30
27218: PUSH
27219: LD_INT 40
27221: PUSH
27222: LD_INT 50
27224: PUSH
27225: LD_INT 60
27227: PUSH
27228: LD_INT 70
27230: PUSH
27231: LD_INT 80
27233: PUSH
27234: LD_INT 90
27236: PUSH
27237: LD_INT 100
27239: PUSH
27240: LD_INT 110
27242: PUSH
27243: LD_INT 120
27245: PUSH
27246: LD_INT 130
27248: PUSH
27249: LD_INT 140
27251: PUSH
27252: LD_INT 150
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 1
27274: PPUSH
27275: LD_INT 15
27277: PPUSH
27278: CALL_OW 12
27282: ARRAY
27283: ST_TO_ADDR
// if ValidHex ( x , y ) then
27284: LD_VAR 0 3
27288: PPUSH
27289: LD_VAR 0 4
27293: PPUSH
27294: CALL_OW 488
27298: IFFALSE 27321
// begin result := [ x , y ] ;
27300: LD_ADDR_VAR 0 1
27304: PUSH
27305: LD_VAR 0 3
27309: PUSH
27310: LD_VAR 0 4
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: ST_TO_ADDR
// break ;
27319: GO 27323
// end ; end ;
27321: GO 27123
27323: POP
27324: POP
// if result then
27325: LD_VAR 0 1
27329: IFFALSE 27389
// begin ToLua ( playSibBomb() ) ;
27331: LD_STRING playSibBomb()
27333: PPUSH
27334: CALL_OW 559
// wait ( 0 0$14 ) ;
27338: LD_INT 490
27340: PPUSH
27341: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27345: LD_VAR 0 1
27349: PUSH
27350: LD_INT 1
27352: ARRAY
27353: PPUSH
27354: LD_VAR 0 1
27358: PUSH
27359: LD_INT 2
27361: ARRAY
27362: PPUSH
27363: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27367: LD_VAR 0 1
27371: PUSH
27372: LD_INT 1
27374: ARRAY
27375: PPUSH
27376: LD_VAR 0 1
27380: PUSH
27381: LD_INT 2
27383: ARRAY
27384: PPUSH
27385: CALL_OW 429
// end ; end ;
27389: LD_VAR 0 1
27393: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27394: LD_EXP 63
27398: PUSH
27399: LD_EXP 85
27403: AND
27404: IFFALSE 27416
27406: GO 27408
27408: DISABLE
// YouLost (  ) ;
27409: LD_STRING 
27411: PPUSH
27412: CALL_OW 104
27416: END
// every 0 0$1 trigger StreamModeActive and sFog do
27417: LD_EXP 63
27421: PUSH
27422: LD_EXP 84
27426: AND
27427: IFFALSE 27441
27429: GO 27431
27431: DISABLE
// FogOff ( your_side ) ;
27432: LD_OWVAR 2
27436: PPUSH
27437: CALL_OW 344
27441: END
// every 0 0$1 trigger StreamModeActive and sSun do
27442: LD_EXP 63
27446: PUSH
27447: LD_EXP 86
27451: AND
27452: IFFALSE 27480
27454: GO 27456
27456: DISABLE
// begin solar_recharge_percent := 0 ;
27457: LD_ADDR_OWVAR 79
27461: PUSH
27462: LD_INT 0
27464: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27465: LD_INT 10500
27467: PPUSH
27468: CALL_OW 67
// solar_recharge_percent := 100 ;
27472: LD_ADDR_OWVAR 79
27476: PUSH
27477: LD_INT 100
27479: ST_TO_ADDR
// end ;
27480: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27481: LD_EXP 63
27485: PUSH
27486: LD_EXP 87
27490: AND
27491: IFFALSE 27730
27493: GO 27495
27495: DISABLE
27496: LD_INT 0
27498: PPUSH
27499: PPUSH
27500: PPUSH
// begin tmp := [ ] ;
27501: LD_ADDR_VAR 0 3
27505: PUSH
27506: EMPTY
27507: ST_TO_ADDR
// for i := 1 to 6 do
27508: LD_ADDR_VAR 0 1
27512: PUSH
27513: DOUBLE
27514: LD_INT 1
27516: DEC
27517: ST_TO_ADDR
27518: LD_INT 6
27520: PUSH
27521: FOR_TO
27522: IFFALSE 27627
// begin uc_nation := nation_nature ;
27524: LD_ADDR_OWVAR 21
27528: PUSH
27529: LD_INT 0
27531: ST_TO_ADDR
// uc_side := 0 ;
27532: LD_ADDR_OWVAR 20
27536: PUSH
27537: LD_INT 0
27539: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27540: LD_ADDR_OWVAR 29
27544: PUSH
27545: LD_INT 12
27547: PUSH
27548: LD_INT 12
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: ST_TO_ADDR
// hc_agressivity := 20 ;
27555: LD_ADDR_OWVAR 35
27559: PUSH
27560: LD_INT 20
27562: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27563: LD_ADDR_OWVAR 28
27567: PUSH
27568: LD_INT 17
27570: ST_TO_ADDR
// hc_gallery :=  ;
27571: LD_ADDR_OWVAR 33
27575: PUSH
27576: LD_STRING 
27578: ST_TO_ADDR
// hc_name :=  ;
27579: LD_ADDR_OWVAR 26
27583: PUSH
27584: LD_STRING 
27586: ST_TO_ADDR
// un := CreateHuman ;
27587: LD_ADDR_VAR 0 2
27591: PUSH
27592: CALL_OW 44
27596: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27597: LD_VAR 0 2
27601: PPUSH
27602: LD_INT 1
27604: PPUSH
27605: CALL_OW 51
// tmp := tmp ^ un ;
27609: LD_ADDR_VAR 0 3
27613: PUSH
27614: LD_VAR 0 3
27618: PUSH
27619: LD_VAR 0 2
27623: ADD
27624: ST_TO_ADDR
// end ;
27625: GO 27521
27627: POP
27628: POP
// repeat wait ( 0 0$1 ) ;
27629: LD_INT 35
27631: PPUSH
27632: CALL_OW 67
// for un in tmp do
27636: LD_ADDR_VAR 0 2
27640: PUSH
27641: LD_VAR 0 3
27645: PUSH
27646: FOR_IN
27647: IFFALSE 27721
// begin if IsDead ( un ) then
27649: LD_VAR 0 2
27653: PPUSH
27654: CALL_OW 301
27658: IFFALSE 27678
// begin tmp := tmp diff un ;
27660: LD_ADDR_VAR 0 3
27664: PUSH
27665: LD_VAR 0 3
27669: PUSH
27670: LD_VAR 0 2
27674: DIFF
27675: ST_TO_ADDR
// continue ;
27676: GO 27646
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27678: LD_VAR 0 2
27682: PPUSH
27683: LD_INT 3
27685: PUSH
27686: LD_INT 22
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PPUSH
27700: CALL_OW 69
27704: PPUSH
27705: LD_VAR 0 2
27709: PPUSH
27710: CALL_OW 74
27714: PPUSH
27715: CALL_OW 115
// end ;
27719: GO 27646
27721: POP
27722: POP
// until not tmp ;
27723: LD_VAR 0 3
27727: NOT
27728: IFFALSE 27629
// end ;
27730: PPOPN 3
27732: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27733: LD_EXP 63
27737: PUSH
27738: LD_EXP 88
27742: AND
27743: IFFALSE 27797
27745: GO 27747
27747: DISABLE
// begin ToLua ( displayTroll(); ) ;
27748: LD_STRING displayTroll();
27750: PPUSH
27751: CALL_OW 559
// wait ( 3 3$00 ) ;
27755: LD_INT 6300
27757: PPUSH
27758: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27762: LD_STRING hideTroll();
27764: PPUSH
27765: CALL_OW 559
// wait ( 1 1$00 ) ;
27769: LD_INT 2100
27771: PPUSH
27772: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27776: LD_STRING displayTroll();
27778: PPUSH
27779: CALL_OW 559
// wait ( 1 1$00 ) ;
27783: LD_INT 2100
27785: PPUSH
27786: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27790: LD_STRING hideTroll();
27792: PPUSH
27793: CALL_OW 559
// end ;
27797: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27798: LD_EXP 63
27802: PUSH
27803: LD_EXP 89
27807: AND
27808: IFFALSE 27871
27810: GO 27812
27812: DISABLE
27813: LD_INT 0
27815: PPUSH
// begin p := 0 ;
27816: LD_ADDR_VAR 0 1
27820: PUSH
27821: LD_INT 0
27823: ST_TO_ADDR
// repeat game_speed := 1 ;
27824: LD_ADDR_OWVAR 65
27828: PUSH
27829: LD_INT 1
27831: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27832: LD_INT 35
27834: PPUSH
27835: CALL_OW 67
// p := p + 1 ;
27839: LD_ADDR_VAR 0 1
27843: PUSH
27844: LD_VAR 0 1
27848: PUSH
27849: LD_INT 1
27851: PLUS
27852: ST_TO_ADDR
// until p >= 60 ;
27853: LD_VAR 0 1
27857: PUSH
27858: LD_INT 60
27860: GREATEREQUAL
27861: IFFALSE 27824
// game_speed := 4 ;
27863: LD_ADDR_OWVAR 65
27867: PUSH
27868: LD_INT 4
27870: ST_TO_ADDR
// end ;
27871: PPOPN 1
27873: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27874: LD_EXP 63
27878: PUSH
27879: LD_EXP 90
27883: AND
27884: IFFALSE 28030
27886: GO 27888
27888: DISABLE
27889: LD_INT 0
27891: PPUSH
27892: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27893: LD_ADDR_VAR 0 1
27897: PUSH
27898: LD_INT 22
27900: PUSH
27901: LD_OWVAR 2
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 2
27912: PUSH
27913: LD_INT 30
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 30
27925: PUSH
27926: LD_INT 1
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: LIST
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PPUSH
27942: CALL_OW 69
27946: ST_TO_ADDR
// if not depot then
27947: LD_VAR 0 1
27951: NOT
27952: IFFALSE 27956
// exit ;
27954: GO 28030
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27956: LD_ADDR_VAR 0 2
27960: PUSH
27961: LD_VAR 0 1
27965: PUSH
27966: LD_INT 1
27968: PPUSH
27969: LD_VAR 0 1
27973: PPUSH
27974: CALL_OW 12
27978: ARRAY
27979: PPUSH
27980: CALL_OW 274
27984: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27985: LD_VAR 0 2
27989: PPUSH
27990: LD_INT 1
27992: PPUSH
27993: LD_INT 0
27995: PPUSH
27996: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28000: LD_VAR 0 2
28004: PPUSH
28005: LD_INT 2
28007: PPUSH
28008: LD_INT 0
28010: PPUSH
28011: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28015: LD_VAR 0 2
28019: PPUSH
28020: LD_INT 3
28022: PPUSH
28023: LD_INT 0
28025: PPUSH
28026: CALL_OW 277
// end ;
28030: PPOPN 2
28032: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28033: LD_EXP 63
28037: PUSH
28038: LD_EXP 91
28042: AND
28043: IFFALSE 28140
28045: GO 28047
28047: DISABLE
28048: LD_INT 0
28050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28051: LD_ADDR_VAR 0 1
28055: PUSH
28056: LD_INT 22
28058: PUSH
28059: LD_OWVAR 2
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 21
28070: PUSH
28071: LD_INT 1
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 3
28080: PUSH
28081: LD_INT 23
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: LIST
28099: PPUSH
28100: CALL_OW 69
28104: ST_TO_ADDR
// if not tmp then
28105: LD_VAR 0 1
28109: NOT
28110: IFFALSE 28114
// exit ;
28112: GO 28140
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28114: LD_VAR 0 1
28118: PUSH
28119: LD_INT 1
28121: PPUSH
28122: LD_VAR 0 1
28126: PPUSH
28127: CALL_OW 12
28131: ARRAY
28132: PPUSH
28133: LD_INT 200
28135: PPUSH
28136: CALL_OW 234
// end ;
28140: PPOPN 1
28142: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28143: LD_EXP 63
28147: PUSH
28148: LD_EXP 92
28152: AND
28153: IFFALSE 28232
28155: GO 28157
28157: DISABLE
28158: LD_INT 0
28160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28161: LD_ADDR_VAR 0 1
28165: PUSH
28166: LD_INT 22
28168: PUSH
28169: LD_OWVAR 2
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 21
28180: PUSH
28181: LD_INT 2
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PPUSH
28192: CALL_OW 69
28196: ST_TO_ADDR
// if not tmp then
28197: LD_VAR 0 1
28201: NOT
28202: IFFALSE 28206
// exit ;
28204: GO 28232
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28206: LD_VAR 0 1
28210: PUSH
28211: LD_INT 1
28213: PPUSH
28214: LD_VAR 0 1
28218: PPUSH
28219: CALL_OW 12
28223: ARRAY
28224: PPUSH
28225: LD_INT 60
28227: PPUSH
28228: CALL_OW 234
// end ;
28232: PPOPN 1
28234: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28235: LD_EXP 63
28239: PUSH
28240: LD_EXP 93
28244: AND
28245: IFFALSE 28344
28247: GO 28249
28249: DISABLE
28250: LD_INT 0
28252: PPUSH
28253: PPUSH
// begin enable ;
28254: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28255: LD_ADDR_VAR 0 1
28259: PUSH
28260: LD_INT 22
28262: PUSH
28263: LD_OWVAR 2
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 61
28274: PUSH
28275: EMPTY
28276: LIST
28277: PUSH
28278: LD_INT 33
28280: PUSH
28281: LD_INT 2
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: LIST
28292: PPUSH
28293: CALL_OW 69
28297: ST_TO_ADDR
// if not tmp then
28298: LD_VAR 0 1
28302: NOT
28303: IFFALSE 28307
// exit ;
28305: GO 28344
// for i in tmp do
28307: LD_ADDR_VAR 0 2
28311: PUSH
28312: LD_VAR 0 1
28316: PUSH
28317: FOR_IN
28318: IFFALSE 28342
// if IsControledBy ( i ) then
28320: LD_VAR 0 2
28324: PPUSH
28325: CALL_OW 312
28329: IFFALSE 28340
// ComUnlink ( i ) ;
28331: LD_VAR 0 2
28335: PPUSH
28336: CALL_OW 136
28340: GO 28317
28342: POP
28343: POP
// end ;
28344: PPOPN 2
28346: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28347: LD_EXP 63
28351: PUSH
28352: LD_EXP 94
28356: AND
28357: IFFALSE 28497
28359: GO 28361
28361: DISABLE
28362: LD_INT 0
28364: PPUSH
28365: PPUSH
// begin ToLua ( displayPowell(); ) ;
28366: LD_STRING displayPowell();
28368: PPUSH
28369: CALL_OW 559
// uc_side := 0 ;
28373: LD_ADDR_OWVAR 20
28377: PUSH
28378: LD_INT 0
28380: ST_TO_ADDR
// uc_nation := 2 ;
28381: LD_ADDR_OWVAR 21
28385: PUSH
28386: LD_INT 2
28388: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28389: LD_ADDR_OWVAR 37
28393: PUSH
28394: LD_INT 14
28396: ST_TO_ADDR
// vc_engine := engine_siberite ;
28397: LD_ADDR_OWVAR 39
28401: PUSH
28402: LD_INT 3
28404: ST_TO_ADDR
// vc_control := control_apeman ;
28405: LD_ADDR_OWVAR 38
28409: PUSH
28410: LD_INT 5
28412: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28413: LD_ADDR_OWVAR 40
28417: PUSH
28418: LD_INT 29
28420: ST_TO_ADDR
// un := CreateVehicle ;
28421: LD_ADDR_VAR 0 2
28425: PUSH
28426: CALL_OW 45
28430: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28431: LD_VAR 0 2
28435: PPUSH
28436: LD_INT 1
28438: PPUSH
28439: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28443: LD_INT 35
28445: PPUSH
28446: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28450: LD_VAR 0 2
28454: PPUSH
28455: LD_INT 22
28457: PUSH
28458: LD_OWVAR 2
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PPUSH
28467: CALL_OW 69
28471: PPUSH
28472: LD_VAR 0 2
28476: PPUSH
28477: CALL_OW 74
28481: PPUSH
28482: CALL_OW 115
// until IsDead ( un ) ;
28486: LD_VAR 0 2
28490: PPUSH
28491: CALL_OW 301
28495: IFFALSE 28443
// end ;
28497: PPOPN 2
28499: END
// every 0 0$1 trigger StreamModeActive and sStu do
28500: LD_EXP 63
28504: PUSH
28505: LD_EXP 102
28509: AND
28510: IFFALSE 28526
28512: GO 28514
28514: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28515: LD_STRING displayStucuk();
28517: PPUSH
28518: CALL_OW 559
// ResetFog ;
28522: CALL_OW 335
// end ;
28526: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28527: LD_EXP 63
28531: PUSH
28532: LD_EXP 95
28536: AND
28537: IFFALSE 28678
28539: GO 28541
28541: DISABLE
28542: LD_INT 0
28544: PPUSH
28545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28546: LD_ADDR_VAR 0 2
28550: PUSH
28551: LD_INT 22
28553: PUSH
28554: LD_OWVAR 2
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 21
28565: PUSH
28566: LD_INT 1
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PPUSH
28577: CALL_OW 69
28581: ST_TO_ADDR
// if not tmp then
28582: LD_VAR 0 2
28586: NOT
28587: IFFALSE 28591
// exit ;
28589: GO 28678
// un := tmp [ rand ( 1 , tmp ) ] ;
28591: LD_ADDR_VAR 0 1
28595: PUSH
28596: LD_VAR 0 2
28600: PUSH
28601: LD_INT 1
28603: PPUSH
28604: LD_VAR 0 2
28608: PPUSH
28609: CALL_OW 12
28613: ARRAY
28614: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28615: LD_VAR 0 1
28619: PPUSH
28620: LD_INT 0
28622: PPUSH
28623: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28627: LD_VAR 0 1
28631: PPUSH
28632: LD_OWVAR 3
28636: PUSH
28637: LD_VAR 0 1
28641: DIFF
28642: PPUSH
28643: LD_VAR 0 1
28647: PPUSH
28648: CALL_OW 74
28652: PPUSH
28653: CALL_OW 115
// wait ( 0 0$20 ) ;
28657: LD_INT 700
28659: PPUSH
28660: CALL_OW 67
// SetSide ( un , your_side ) ;
28664: LD_VAR 0 1
28668: PPUSH
28669: LD_OWVAR 2
28673: PPUSH
28674: CALL_OW 235
// end ;
28678: PPOPN 2
28680: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28681: LD_EXP 63
28685: PUSH
28686: LD_EXP 96
28690: AND
28691: IFFALSE 28797
28693: GO 28695
28695: DISABLE
28696: LD_INT 0
28698: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28699: LD_ADDR_VAR 0 1
28703: PUSH
28704: LD_INT 22
28706: PUSH
28707: LD_OWVAR 2
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 2
28718: PUSH
28719: LD_INT 30
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 30
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: LIST
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PPUSH
28748: CALL_OW 69
28752: ST_TO_ADDR
// if not depot then
28753: LD_VAR 0 1
28757: NOT
28758: IFFALSE 28762
// exit ;
28760: GO 28797
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28762: LD_VAR 0 1
28766: PUSH
28767: LD_INT 1
28769: ARRAY
28770: PPUSH
28771: CALL_OW 250
28775: PPUSH
28776: LD_VAR 0 1
28780: PUSH
28781: LD_INT 1
28783: ARRAY
28784: PPUSH
28785: CALL_OW 251
28789: PPUSH
28790: LD_INT 70
28792: PPUSH
28793: CALL_OW 495
// end ;
28797: PPOPN 1
28799: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28800: LD_EXP 63
28804: PUSH
28805: LD_EXP 97
28809: AND
28810: IFFALSE 29021
28812: GO 28814
28814: DISABLE
28815: LD_INT 0
28817: PPUSH
28818: PPUSH
28819: PPUSH
28820: PPUSH
28821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28822: LD_ADDR_VAR 0 5
28826: PUSH
28827: LD_INT 22
28829: PUSH
28830: LD_OWVAR 2
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 21
28841: PUSH
28842: LD_INT 1
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PPUSH
28853: CALL_OW 69
28857: ST_TO_ADDR
// if not tmp then
28858: LD_VAR 0 5
28862: NOT
28863: IFFALSE 28867
// exit ;
28865: GO 29021
// for i in tmp do
28867: LD_ADDR_VAR 0 1
28871: PUSH
28872: LD_VAR 0 5
28876: PUSH
28877: FOR_IN
28878: IFFALSE 29019
// begin d := rand ( 0 , 5 ) ;
28880: LD_ADDR_VAR 0 4
28884: PUSH
28885: LD_INT 0
28887: PPUSH
28888: LD_INT 5
28890: PPUSH
28891: CALL_OW 12
28895: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28896: LD_ADDR_VAR 0 2
28900: PUSH
28901: LD_VAR 0 1
28905: PPUSH
28906: CALL_OW 250
28910: PPUSH
28911: LD_VAR 0 4
28915: PPUSH
28916: LD_INT 3
28918: PPUSH
28919: LD_INT 12
28921: PPUSH
28922: CALL_OW 12
28926: PPUSH
28927: CALL_OW 272
28931: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28932: LD_ADDR_VAR 0 3
28936: PUSH
28937: LD_VAR 0 1
28941: PPUSH
28942: CALL_OW 251
28946: PPUSH
28947: LD_VAR 0 4
28951: PPUSH
28952: LD_INT 3
28954: PPUSH
28955: LD_INT 12
28957: PPUSH
28958: CALL_OW 12
28962: PPUSH
28963: CALL_OW 273
28967: ST_TO_ADDR
// if ValidHex ( x , y ) then
28968: LD_VAR 0 2
28972: PPUSH
28973: LD_VAR 0 3
28977: PPUSH
28978: CALL_OW 488
28982: IFFALSE 29017
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28984: LD_VAR 0 1
28988: PPUSH
28989: LD_VAR 0 2
28993: PPUSH
28994: LD_VAR 0 3
28998: PPUSH
28999: LD_INT 3
29001: PPUSH
29002: LD_INT 6
29004: PPUSH
29005: CALL_OW 12
29009: PPUSH
29010: LD_INT 1
29012: PPUSH
29013: CALL_OW 483
// end ;
29017: GO 28877
29019: POP
29020: POP
// end ;
29021: PPOPN 5
29023: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29024: LD_EXP 63
29028: PUSH
29029: LD_EXP 98
29033: AND
29034: IFFALSE 29128
29036: GO 29038
29038: DISABLE
29039: LD_INT 0
29041: PPUSH
29042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29043: LD_ADDR_VAR 0 2
29047: PUSH
29048: LD_INT 22
29050: PUSH
29051: LD_OWVAR 2
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 32
29062: PUSH
29063: LD_INT 1
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 21
29072: PUSH
29073: LD_INT 2
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: LIST
29084: PPUSH
29085: CALL_OW 69
29089: ST_TO_ADDR
// if not tmp then
29090: LD_VAR 0 2
29094: NOT
29095: IFFALSE 29099
// exit ;
29097: GO 29128
// for i in tmp do
29099: LD_ADDR_VAR 0 1
29103: PUSH
29104: LD_VAR 0 2
29108: PUSH
29109: FOR_IN
29110: IFFALSE 29126
// SetFuel ( i , 0 ) ;
29112: LD_VAR 0 1
29116: PPUSH
29117: LD_INT 0
29119: PPUSH
29120: CALL_OW 240
29124: GO 29109
29126: POP
29127: POP
// end ;
29128: PPOPN 2
29130: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29131: LD_EXP 63
29135: PUSH
29136: LD_EXP 99
29140: AND
29141: IFFALSE 29207
29143: GO 29145
29145: DISABLE
29146: LD_INT 0
29148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29149: LD_ADDR_VAR 0 1
29153: PUSH
29154: LD_INT 22
29156: PUSH
29157: LD_OWVAR 2
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 30
29168: PUSH
29169: LD_INT 29
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PPUSH
29180: CALL_OW 69
29184: ST_TO_ADDR
// if not tmp then
29185: LD_VAR 0 1
29189: NOT
29190: IFFALSE 29194
// exit ;
29192: GO 29207
// DestroyUnit ( tmp [ 1 ] ) ;
29194: LD_VAR 0 1
29198: PUSH
29199: LD_INT 1
29201: ARRAY
29202: PPUSH
29203: CALL_OW 65
// end ;
29207: PPOPN 1
29209: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29210: LD_EXP 63
29214: PUSH
29215: LD_EXP 101
29219: AND
29220: IFFALSE 29349
29222: GO 29224
29224: DISABLE
29225: LD_INT 0
29227: PPUSH
// begin uc_side := 0 ;
29228: LD_ADDR_OWVAR 20
29232: PUSH
29233: LD_INT 0
29235: ST_TO_ADDR
// uc_nation := nation_arabian ;
29236: LD_ADDR_OWVAR 21
29240: PUSH
29241: LD_INT 2
29243: ST_TO_ADDR
// hc_gallery :=  ;
29244: LD_ADDR_OWVAR 33
29248: PUSH
29249: LD_STRING 
29251: ST_TO_ADDR
// hc_name :=  ;
29252: LD_ADDR_OWVAR 26
29256: PUSH
29257: LD_STRING 
29259: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29260: LD_INT 1
29262: PPUSH
29263: LD_INT 11
29265: PPUSH
29266: LD_INT 10
29268: PPUSH
29269: CALL_OW 380
// un := CreateHuman ;
29273: LD_ADDR_VAR 0 1
29277: PUSH
29278: CALL_OW 44
29282: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29283: LD_VAR 0 1
29287: PPUSH
29288: LD_INT 1
29290: PPUSH
29291: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29295: LD_INT 35
29297: PPUSH
29298: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29302: LD_VAR 0 1
29306: PPUSH
29307: LD_INT 22
29309: PUSH
29310: LD_OWVAR 2
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PPUSH
29319: CALL_OW 69
29323: PPUSH
29324: LD_VAR 0 1
29328: PPUSH
29329: CALL_OW 74
29333: PPUSH
29334: CALL_OW 115
// until IsDead ( un ) ;
29338: LD_VAR 0 1
29342: PPUSH
29343: CALL_OW 301
29347: IFFALSE 29295
// end ;
29349: PPOPN 1
29351: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29352: LD_EXP 63
29356: PUSH
29357: LD_EXP 103
29361: AND
29362: IFFALSE 29374
29364: GO 29366
29366: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29367: LD_STRING earthquake(getX(game), 0, 32)
29369: PPUSH
29370: CALL_OW 559
29374: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29375: LD_EXP 63
29379: PUSH
29380: LD_EXP 104
29384: AND
29385: IFFALSE 29476
29387: GO 29389
29389: DISABLE
29390: LD_INT 0
29392: PPUSH
// begin enable ;
29393: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29394: LD_ADDR_VAR 0 1
29398: PUSH
29399: LD_INT 22
29401: PUSH
29402: LD_OWVAR 2
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 21
29413: PUSH
29414: LD_INT 2
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 33
29423: PUSH
29424: LD_INT 3
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: LIST
29435: PPUSH
29436: CALL_OW 69
29440: ST_TO_ADDR
// if not tmp then
29441: LD_VAR 0 1
29445: NOT
29446: IFFALSE 29450
// exit ;
29448: GO 29476
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29450: LD_VAR 0 1
29454: PUSH
29455: LD_INT 1
29457: PPUSH
29458: LD_VAR 0 1
29462: PPUSH
29463: CALL_OW 12
29467: ARRAY
29468: PPUSH
29469: LD_INT 1
29471: PPUSH
29472: CALL_OW 234
// end ;
29476: PPOPN 1
29478: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29479: LD_EXP 63
29483: PUSH
29484: LD_EXP 105
29488: AND
29489: IFFALSE 29630
29491: GO 29493
29493: DISABLE
29494: LD_INT 0
29496: PPUSH
29497: PPUSH
29498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29499: LD_ADDR_VAR 0 3
29503: PUSH
29504: LD_INT 22
29506: PUSH
29507: LD_OWVAR 2
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 25
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PPUSH
29530: CALL_OW 69
29534: ST_TO_ADDR
// if not tmp then
29535: LD_VAR 0 3
29539: NOT
29540: IFFALSE 29544
// exit ;
29542: GO 29630
// un := tmp [ rand ( 1 , tmp ) ] ;
29544: LD_ADDR_VAR 0 2
29548: PUSH
29549: LD_VAR 0 3
29553: PUSH
29554: LD_INT 1
29556: PPUSH
29557: LD_VAR 0 3
29561: PPUSH
29562: CALL_OW 12
29566: ARRAY
29567: ST_TO_ADDR
// if Crawls ( un ) then
29568: LD_VAR 0 2
29572: PPUSH
29573: CALL_OW 318
29577: IFFALSE 29588
// ComWalk ( un ) ;
29579: LD_VAR 0 2
29583: PPUSH
29584: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29588: LD_VAR 0 2
29592: PPUSH
29593: LD_INT 9
29595: PPUSH
29596: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29600: LD_INT 28
29602: PPUSH
29603: LD_OWVAR 2
29607: PPUSH
29608: LD_INT 2
29610: PPUSH
29611: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29615: LD_INT 29
29617: PPUSH
29618: LD_OWVAR 2
29622: PPUSH
29623: LD_INT 2
29625: PPUSH
29626: CALL_OW 322
// end ;
29630: PPOPN 3
29632: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29633: LD_EXP 63
29637: PUSH
29638: LD_EXP 106
29642: AND
29643: IFFALSE 29754
29645: GO 29647
29647: DISABLE
29648: LD_INT 0
29650: PPUSH
29651: PPUSH
29652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29653: LD_ADDR_VAR 0 3
29657: PUSH
29658: LD_INT 22
29660: PUSH
29661: LD_OWVAR 2
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 25
29672: PUSH
29673: LD_INT 1
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PPUSH
29684: CALL_OW 69
29688: ST_TO_ADDR
// if not tmp then
29689: LD_VAR 0 3
29693: NOT
29694: IFFALSE 29698
// exit ;
29696: GO 29754
// un := tmp [ rand ( 1 , tmp ) ] ;
29698: LD_ADDR_VAR 0 2
29702: PUSH
29703: LD_VAR 0 3
29707: PUSH
29708: LD_INT 1
29710: PPUSH
29711: LD_VAR 0 3
29715: PPUSH
29716: CALL_OW 12
29720: ARRAY
29721: ST_TO_ADDR
// if Crawls ( un ) then
29722: LD_VAR 0 2
29726: PPUSH
29727: CALL_OW 318
29731: IFFALSE 29742
// ComWalk ( un ) ;
29733: LD_VAR 0 2
29737: PPUSH
29738: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29742: LD_VAR 0 2
29746: PPUSH
29747: LD_INT 8
29749: PPUSH
29750: CALL_OW 336
// end ;
29754: PPOPN 3
29756: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29757: LD_EXP 63
29761: PUSH
29762: LD_EXP 107
29766: AND
29767: IFFALSE 29911
29769: GO 29771
29771: DISABLE
29772: LD_INT 0
29774: PPUSH
29775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29776: LD_ADDR_VAR 0 2
29780: PUSH
29781: LD_INT 22
29783: PUSH
29784: LD_OWVAR 2
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 21
29795: PUSH
29796: LD_INT 2
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 2
29805: PUSH
29806: LD_INT 34
29808: PUSH
29809: LD_INT 12
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 34
29818: PUSH
29819: LD_INT 51
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 34
29828: PUSH
29829: LD_INT 32
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: LIST
29846: PPUSH
29847: CALL_OW 69
29851: ST_TO_ADDR
// if not tmp then
29852: LD_VAR 0 2
29856: NOT
29857: IFFALSE 29861
// exit ;
29859: GO 29911
// for i in tmp do
29861: LD_ADDR_VAR 0 1
29865: PUSH
29866: LD_VAR 0 2
29870: PUSH
29871: FOR_IN
29872: IFFALSE 29909
// if GetCargo ( i , mat_artifact ) = 0 then
29874: LD_VAR 0 1
29878: PPUSH
29879: LD_INT 4
29881: PPUSH
29882: CALL_OW 289
29886: PUSH
29887: LD_INT 0
29889: EQUAL
29890: IFFALSE 29907
// SetCargo ( i , mat_siberit , 100 ) ;
29892: LD_VAR 0 1
29896: PPUSH
29897: LD_INT 3
29899: PPUSH
29900: LD_INT 100
29902: PPUSH
29903: CALL_OW 290
29907: GO 29871
29909: POP
29910: POP
// end ;
29911: PPOPN 2
29913: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29914: LD_EXP 63
29918: PUSH
29919: LD_EXP 108
29923: AND
29924: IFFALSE 30107
29926: GO 29928
29928: DISABLE
29929: LD_INT 0
29931: PPUSH
29932: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29933: LD_ADDR_VAR 0 2
29937: PUSH
29938: LD_INT 22
29940: PUSH
29941: LD_OWVAR 2
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PPUSH
29950: CALL_OW 69
29954: ST_TO_ADDR
// if not tmp then
29955: LD_VAR 0 2
29959: NOT
29960: IFFALSE 29964
// exit ;
29962: GO 30107
// for i := 1 to 2 do
29964: LD_ADDR_VAR 0 1
29968: PUSH
29969: DOUBLE
29970: LD_INT 1
29972: DEC
29973: ST_TO_ADDR
29974: LD_INT 2
29976: PUSH
29977: FOR_TO
29978: IFFALSE 30105
// begin uc_side := your_side ;
29980: LD_ADDR_OWVAR 20
29984: PUSH
29985: LD_OWVAR 2
29989: ST_TO_ADDR
// uc_nation := nation_american ;
29990: LD_ADDR_OWVAR 21
29994: PUSH
29995: LD_INT 1
29997: ST_TO_ADDR
// vc_chassis := us_morphling ;
29998: LD_ADDR_OWVAR 37
30002: PUSH
30003: LD_INT 5
30005: ST_TO_ADDR
// vc_engine := engine_siberite ;
30006: LD_ADDR_OWVAR 39
30010: PUSH
30011: LD_INT 3
30013: ST_TO_ADDR
// vc_control := control_computer ;
30014: LD_ADDR_OWVAR 38
30018: PUSH
30019: LD_INT 3
30021: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30022: LD_ADDR_OWVAR 40
30026: PUSH
30027: LD_INT 10
30029: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30030: LD_VAR 0 2
30034: PUSH
30035: LD_INT 1
30037: ARRAY
30038: PPUSH
30039: CALL_OW 310
30043: NOT
30044: IFFALSE 30091
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30046: CALL_OW 45
30050: PPUSH
30051: LD_VAR 0 2
30055: PUSH
30056: LD_INT 1
30058: ARRAY
30059: PPUSH
30060: CALL_OW 250
30064: PPUSH
30065: LD_VAR 0 2
30069: PUSH
30070: LD_INT 1
30072: ARRAY
30073: PPUSH
30074: CALL_OW 251
30078: PPUSH
30079: LD_INT 12
30081: PPUSH
30082: LD_INT 1
30084: PPUSH
30085: CALL_OW 50
30089: GO 30103
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30091: CALL_OW 45
30095: PPUSH
30096: LD_INT 1
30098: PPUSH
30099: CALL_OW 51
// end ;
30103: GO 29977
30105: POP
30106: POP
// end ;
30107: PPOPN 2
30109: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30110: LD_EXP 63
30114: PUSH
30115: LD_EXP 109
30119: AND
30120: IFFALSE 30342
30122: GO 30124
30124: DISABLE
30125: LD_INT 0
30127: PPUSH
30128: PPUSH
30129: PPUSH
30130: PPUSH
30131: PPUSH
30132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30133: LD_ADDR_VAR 0 6
30137: PUSH
30138: LD_INT 22
30140: PUSH
30141: LD_OWVAR 2
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 21
30152: PUSH
30153: LD_INT 1
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 3
30162: PUSH
30163: LD_INT 23
30165: PUSH
30166: LD_INT 0
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: LIST
30181: PPUSH
30182: CALL_OW 69
30186: ST_TO_ADDR
// if not tmp then
30187: LD_VAR 0 6
30191: NOT
30192: IFFALSE 30196
// exit ;
30194: GO 30342
// s1 := rand ( 1 , 4 ) ;
30196: LD_ADDR_VAR 0 2
30200: PUSH
30201: LD_INT 1
30203: PPUSH
30204: LD_INT 4
30206: PPUSH
30207: CALL_OW 12
30211: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30212: LD_ADDR_VAR 0 4
30216: PUSH
30217: LD_VAR 0 6
30221: PUSH
30222: LD_INT 1
30224: ARRAY
30225: PPUSH
30226: LD_VAR 0 2
30230: PPUSH
30231: CALL_OW 259
30235: ST_TO_ADDR
// if s1 = 1 then
30236: LD_VAR 0 2
30240: PUSH
30241: LD_INT 1
30243: EQUAL
30244: IFFALSE 30264
// s2 := rand ( 2 , 4 ) else
30246: LD_ADDR_VAR 0 3
30250: PUSH
30251: LD_INT 2
30253: PPUSH
30254: LD_INT 4
30256: PPUSH
30257: CALL_OW 12
30261: ST_TO_ADDR
30262: GO 30272
// s2 := 1 ;
30264: LD_ADDR_VAR 0 3
30268: PUSH
30269: LD_INT 1
30271: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30272: LD_ADDR_VAR 0 5
30276: PUSH
30277: LD_VAR 0 6
30281: PUSH
30282: LD_INT 1
30284: ARRAY
30285: PPUSH
30286: LD_VAR 0 3
30290: PPUSH
30291: CALL_OW 259
30295: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30296: LD_VAR 0 6
30300: PUSH
30301: LD_INT 1
30303: ARRAY
30304: PPUSH
30305: LD_VAR 0 2
30309: PPUSH
30310: LD_VAR 0 5
30314: PPUSH
30315: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30319: LD_VAR 0 6
30323: PUSH
30324: LD_INT 1
30326: ARRAY
30327: PPUSH
30328: LD_VAR 0 3
30332: PPUSH
30333: LD_VAR 0 4
30337: PPUSH
30338: CALL_OW 237
// end ;
30342: PPOPN 6
30344: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30345: LD_EXP 63
30349: PUSH
30350: LD_EXP 110
30354: AND
30355: IFFALSE 30434
30357: GO 30359
30359: DISABLE
30360: LD_INT 0
30362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30363: LD_ADDR_VAR 0 1
30367: PUSH
30368: LD_INT 22
30370: PUSH
30371: LD_OWVAR 2
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 30
30382: PUSH
30383: LD_INT 3
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PPUSH
30394: CALL_OW 69
30398: ST_TO_ADDR
// if not tmp then
30399: LD_VAR 0 1
30403: NOT
30404: IFFALSE 30408
// exit ;
30406: GO 30434
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30408: LD_VAR 0 1
30412: PUSH
30413: LD_INT 1
30415: PPUSH
30416: LD_VAR 0 1
30420: PPUSH
30421: CALL_OW 12
30425: ARRAY
30426: PPUSH
30427: LD_INT 1
30429: PPUSH
30430: CALL_OW 234
// end ;
30434: PPOPN 1
30436: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30437: LD_EXP 63
30441: PUSH
30442: LD_EXP 111
30446: AND
30447: IFFALSE 30559
30449: GO 30451
30451: DISABLE
30452: LD_INT 0
30454: PPUSH
30455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30456: LD_ADDR_VAR 0 2
30460: PUSH
30461: LD_INT 22
30463: PUSH
30464: LD_OWVAR 2
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 2
30475: PUSH
30476: LD_INT 30
30478: PUSH
30479: LD_INT 27
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 30
30488: PUSH
30489: LD_INT 26
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 30
30498: PUSH
30499: LD_INT 28
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PPUSH
30516: CALL_OW 69
30520: ST_TO_ADDR
// if not tmp then
30521: LD_VAR 0 2
30525: NOT
30526: IFFALSE 30530
// exit ;
30528: GO 30559
// for i in tmp do
30530: LD_ADDR_VAR 0 1
30534: PUSH
30535: LD_VAR 0 2
30539: PUSH
30540: FOR_IN
30541: IFFALSE 30557
// SetLives ( i , 1 ) ;
30543: LD_VAR 0 1
30547: PPUSH
30548: LD_INT 1
30550: PPUSH
30551: CALL_OW 234
30555: GO 30540
30557: POP
30558: POP
// end ;
30559: PPOPN 2
30561: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30562: LD_EXP 63
30566: PUSH
30567: LD_EXP 112
30571: AND
30572: IFFALSE 30859
30574: GO 30576
30576: DISABLE
30577: LD_INT 0
30579: PPUSH
30580: PPUSH
30581: PPUSH
// begin i := rand ( 1 , 7 ) ;
30582: LD_ADDR_VAR 0 1
30586: PUSH
30587: LD_INT 1
30589: PPUSH
30590: LD_INT 7
30592: PPUSH
30593: CALL_OW 12
30597: ST_TO_ADDR
// case i of 1 :
30598: LD_VAR 0 1
30602: PUSH
30603: LD_INT 1
30605: DOUBLE
30606: EQUAL
30607: IFTRUE 30611
30609: GO 30621
30611: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30612: LD_STRING earthquake(getX(game), 0, 32)
30614: PPUSH
30615: CALL_OW 559
30619: GO 30859
30621: LD_INT 2
30623: DOUBLE
30624: EQUAL
30625: IFTRUE 30629
30627: GO 30643
30629: POP
// begin ToLua ( displayStucuk(); ) ;
30630: LD_STRING displayStucuk();
30632: PPUSH
30633: CALL_OW 559
// ResetFog ;
30637: CALL_OW 335
// end ; 3 :
30641: GO 30859
30643: LD_INT 3
30645: DOUBLE
30646: EQUAL
30647: IFTRUE 30651
30649: GO 30755
30651: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30652: LD_ADDR_VAR 0 2
30656: PUSH
30657: LD_INT 22
30659: PUSH
30660: LD_OWVAR 2
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 25
30671: PUSH
30672: LD_INT 1
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PPUSH
30683: CALL_OW 69
30687: ST_TO_ADDR
// if not tmp then
30688: LD_VAR 0 2
30692: NOT
30693: IFFALSE 30697
// exit ;
30695: GO 30859
// un := tmp [ rand ( 1 , tmp ) ] ;
30697: LD_ADDR_VAR 0 3
30701: PUSH
30702: LD_VAR 0 2
30706: PUSH
30707: LD_INT 1
30709: PPUSH
30710: LD_VAR 0 2
30714: PPUSH
30715: CALL_OW 12
30719: ARRAY
30720: ST_TO_ADDR
// if Crawls ( un ) then
30721: LD_VAR 0 3
30725: PPUSH
30726: CALL_OW 318
30730: IFFALSE 30741
// ComWalk ( un ) ;
30732: LD_VAR 0 3
30736: PPUSH
30737: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30741: LD_VAR 0 3
30745: PPUSH
30746: LD_INT 8
30748: PPUSH
30749: CALL_OW 336
// end ; 4 :
30753: GO 30859
30755: LD_INT 4
30757: DOUBLE
30758: EQUAL
30759: IFTRUE 30763
30761: GO 30837
30763: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30764: LD_ADDR_VAR 0 2
30768: PUSH
30769: LD_INT 22
30771: PUSH
30772: LD_OWVAR 2
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 30
30783: PUSH
30784: LD_INT 29
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PPUSH
30795: CALL_OW 69
30799: ST_TO_ADDR
// if not tmp then
30800: LD_VAR 0 2
30804: NOT
30805: IFFALSE 30809
// exit ;
30807: GO 30859
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30809: LD_VAR 0 2
30813: PUSH
30814: LD_INT 1
30816: ARRAY
30817: PPUSH
30818: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30822: LD_VAR 0 2
30826: PUSH
30827: LD_INT 1
30829: ARRAY
30830: PPUSH
30831: CALL_OW 65
// end ; 5 .. 7 :
30835: GO 30859
30837: LD_INT 5
30839: DOUBLE
30840: GREATEREQUAL
30841: IFFALSE 30849
30843: LD_INT 7
30845: DOUBLE
30846: LESSEQUAL
30847: IFTRUE 30851
30849: GO 30858
30851: POP
// StreamSibBomb ; end ;
30852: CALL 27096 0 0
30856: GO 30859
30858: POP
// end ;
30859: PPOPN 3
30861: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30862: LD_EXP 63
30866: PUSH
30867: LD_EXP 113
30871: AND
30872: IFFALSE 31028
30874: GO 30876
30876: DISABLE
30877: LD_INT 0
30879: PPUSH
30880: PPUSH
30881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30882: LD_ADDR_VAR 0 2
30886: PUSH
30887: LD_INT 81
30889: PUSH
30890: LD_OWVAR 2
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 2
30901: PUSH
30902: LD_INT 21
30904: PUSH
30905: LD_INT 1
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 21
30914: PUSH
30915: LD_INT 2
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: LIST
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PPUSH
30931: CALL_OW 69
30935: ST_TO_ADDR
// if not tmp then
30936: LD_VAR 0 2
30940: NOT
30941: IFFALSE 30945
// exit ;
30943: GO 31028
// p := 0 ;
30945: LD_ADDR_VAR 0 3
30949: PUSH
30950: LD_INT 0
30952: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30953: LD_INT 35
30955: PPUSH
30956: CALL_OW 67
// p := p + 1 ;
30960: LD_ADDR_VAR 0 3
30964: PUSH
30965: LD_VAR 0 3
30969: PUSH
30970: LD_INT 1
30972: PLUS
30973: ST_TO_ADDR
// for i in tmp do
30974: LD_ADDR_VAR 0 1
30978: PUSH
30979: LD_VAR 0 2
30983: PUSH
30984: FOR_IN
30985: IFFALSE 31016
// if GetLives ( i ) < 1000 then
30987: LD_VAR 0 1
30991: PPUSH
30992: CALL_OW 256
30996: PUSH
30997: LD_INT 1000
30999: LESS
31000: IFFALSE 31014
// SetLives ( i , 1000 ) ;
31002: LD_VAR 0 1
31006: PPUSH
31007: LD_INT 1000
31009: PPUSH
31010: CALL_OW 234
31014: GO 30984
31016: POP
31017: POP
// until p > 20 ;
31018: LD_VAR 0 3
31022: PUSH
31023: LD_INT 20
31025: GREATER
31026: IFFALSE 30953
// end ;
31028: PPOPN 3
31030: END
// every 0 0$1 trigger StreamModeActive and sTime do
31031: LD_EXP 63
31035: PUSH
31036: LD_EXP 114
31040: AND
31041: IFFALSE 31076
31043: GO 31045
31045: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31046: LD_INT 28
31048: PPUSH
31049: LD_OWVAR 2
31053: PPUSH
31054: LD_INT 2
31056: PPUSH
31057: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31061: LD_INT 30
31063: PPUSH
31064: LD_OWVAR 2
31068: PPUSH
31069: LD_INT 2
31071: PPUSH
31072: CALL_OW 322
// end ;
31076: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31077: LD_EXP 63
31081: PUSH
31082: LD_EXP 115
31086: AND
31087: IFFALSE 31208
31089: GO 31091
31091: DISABLE
31092: LD_INT 0
31094: PPUSH
31095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31096: LD_ADDR_VAR 0 2
31100: PUSH
31101: LD_INT 22
31103: PUSH
31104: LD_OWVAR 2
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 21
31115: PUSH
31116: LD_INT 1
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 3
31125: PUSH
31126: LD_INT 23
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: LIST
31144: PPUSH
31145: CALL_OW 69
31149: ST_TO_ADDR
// if not tmp then
31150: LD_VAR 0 2
31154: NOT
31155: IFFALSE 31159
// exit ;
31157: GO 31208
// for i in tmp do
31159: LD_ADDR_VAR 0 1
31163: PUSH
31164: LD_VAR 0 2
31168: PUSH
31169: FOR_IN
31170: IFFALSE 31206
// begin if Crawls ( i ) then
31172: LD_VAR 0 1
31176: PPUSH
31177: CALL_OW 318
31181: IFFALSE 31192
// ComWalk ( i ) ;
31183: LD_VAR 0 1
31187: PPUSH
31188: CALL_OW 138
// SetClass ( i , 2 ) ;
31192: LD_VAR 0 1
31196: PPUSH
31197: LD_INT 2
31199: PPUSH
31200: CALL_OW 336
// end ;
31204: GO 31169
31206: POP
31207: POP
// end ;
31208: PPOPN 2
31210: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31211: LD_EXP 63
31215: PUSH
31216: LD_EXP 116
31220: AND
31221: IFFALSE 31509
31223: GO 31225
31225: DISABLE
31226: LD_INT 0
31228: PPUSH
31229: PPUSH
31230: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31231: LD_OWVAR 2
31235: PPUSH
31236: LD_INT 9
31238: PPUSH
31239: LD_INT 1
31241: PPUSH
31242: LD_INT 1
31244: PPUSH
31245: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31249: LD_INT 9
31251: PPUSH
31252: LD_OWVAR 2
31256: PPUSH
31257: CALL_OW 343
// uc_side := 9 ;
31261: LD_ADDR_OWVAR 20
31265: PUSH
31266: LD_INT 9
31268: ST_TO_ADDR
// uc_nation := 2 ;
31269: LD_ADDR_OWVAR 21
31273: PUSH
31274: LD_INT 2
31276: ST_TO_ADDR
// hc_name := Dark Warrior ;
31277: LD_ADDR_OWVAR 26
31281: PUSH
31282: LD_STRING Dark Warrior
31284: ST_TO_ADDR
// hc_gallery :=  ;
31285: LD_ADDR_OWVAR 33
31289: PUSH
31290: LD_STRING 
31292: ST_TO_ADDR
// hc_noskilllimit := true ;
31293: LD_ADDR_OWVAR 76
31297: PUSH
31298: LD_INT 1
31300: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31301: LD_ADDR_OWVAR 31
31305: PUSH
31306: LD_INT 30
31308: PUSH
31309: LD_INT 30
31311: PUSH
31312: LD_INT 30
31314: PUSH
31315: LD_INT 30
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: ST_TO_ADDR
// un := CreateHuman ;
31324: LD_ADDR_VAR 0 3
31328: PUSH
31329: CALL_OW 44
31333: ST_TO_ADDR
// hc_noskilllimit := false ;
31334: LD_ADDR_OWVAR 76
31338: PUSH
31339: LD_INT 0
31341: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31342: LD_VAR 0 3
31346: PPUSH
31347: LD_INT 1
31349: PPUSH
31350: CALL_OW 51
// ToLua ( playRanger() ) ;
31354: LD_STRING playRanger()
31356: PPUSH
31357: CALL_OW 559
// p := 0 ;
31361: LD_ADDR_VAR 0 2
31365: PUSH
31366: LD_INT 0
31368: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31369: LD_INT 35
31371: PPUSH
31372: CALL_OW 67
// p := p + 1 ;
31376: LD_ADDR_VAR 0 2
31380: PUSH
31381: LD_VAR 0 2
31385: PUSH
31386: LD_INT 1
31388: PLUS
31389: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31390: LD_VAR 0 3
31394: PPUSH
31395: CALL_OW 256
31399: PUSH
31400: LD_INT 1000
31402: LESS
31403: IFFALSE 31417
// SetLives ( un , 1000 ) ;
31405: LD_VAR 0 3
31409: PPUSH
31410: LD_INT 1000
31412: PPUSH
31413: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31417: LD_VAR 0 3
31421: PPUSH
31422: LD_INT 81
31424: PUSH
31425: LD_OWVAR 2
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 91
31436: PUSH
31437: LD_VAR 0 3
31441: PUSH
31442: LD_INT 30
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: LIST
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PPUSH
31454: CALL_OW 69
31458: PPUSH
31459: LD_VAR 0 3
31463: PPUSH
31464: CALL_OW 74
31468: PPUSH
31469: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31473: LD_VAR 0 2
31477: PUSH
31478: LD_INT 80
31480: GREATER
31481: PUSH
31482: LD_VAR 0 3
31486: PPUSH
31487: CALL_OW 301
31491: OR
31492: IFFALSE 31369
// if un then
31494: LD_VAR 0 3
31498: IFFALSE 31509
// RemoveUnit ( un ) ;
31500: LD_VAR 0 3
31504: PPUSH
31505: CALL_OW 64
// end ;
31509: PPOPN 3
31511: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31512: LD_EXP 117
31516: IFFALSE 31632
31518: GO 31520
31520: DISABLE
31521: LD_INT 0
31523: PPUSH
31524: PPUSH
31525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31526: LD_ADDR_VAR 0 2
31530: PUSH
31531: LD_INT 81
31533: PUSH
31534: LD_OWVAR 2
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 21
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PPUSH
31557: CALL_OW 69
31561: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31562: LD_STRING playComputer()
31564: PPUSH
31565: CALL_OW 559
// if not tmp then
31569: LD_VAR 0 2
31573: NOT
31574: IFFALSE 31578
// exit ;
31576: GO 31632
// for i in tmp do
31578: LD_ADDR_VAR 0 1
31582: PUSH
31583: LD_VAR 0 2
31587: PUSH
31588: FOR_IN
31589: IFFALSE 31630
// for j := 1 to 4 do
31591: LD_ADDR_VAR 0 3
31595: PUSH
31596: DOUBLE
31597: LD_INT 1
31599: DEC
31600: ST_TO_ADDR
31601: LD_INT 4
31603: PUSH
31604: FOR_TO
31605: IFFALSE 31626
// SetSkill ( i , j , 10 ) ;
31607: LD_VAR 0 1
31611: PPUSH
31612: LD_VAR 0 3
31616: PPUSH
31617: LD_INT 10
31619: PPUSH
31620: CALL_OW 237
31624: GO 31604
31626: POP
31627: POP
31628: GO 31588
31630: POP
31631: POP
// end ;
31632: PPOPN 3
31634: END
// every 0 0$1 trigger s30 do var i , tmp ;
31635: LD_EXP 118
31639: IFFALSE 31708
31641: GO 31643
31643: DISABLE
31644: LD_INT 0
31646: PPUSH
31647: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31648: LD_ADDR_VAR 0 2
31652: PUSH
31653: LD_INT 22
31655: PUSH
31656: LD_OWVAR 2
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PPUSH
31665: CALL_OW 69
31669: ST_TO_ADDR
// if not tmp then
31670: LD_VAR 0 2
31674: NOT
31675: IFFALSE 31679
// exit ;
31677: GO 31708
// for i in tmp do
31679: LD_ADDR_VAR 0 1
31683: PUSH
31684: LD_VAR 0 2
31688: PUSH
31689: FOR_IN
31690: IFFALSE 31706
// SetLives ( i , 300 ) ;
31692: LD_VAR 0 1
31696: PPUSH
31697: LD_INT 300
31699: PPUSH
31700: CALL_OW 234
31704: GO 31689
31706: POP
31707: POP
// end ;
31708: PPOPN 2
31710: END
// every 0 0$1 trigger s60 do var i , tmp ;
31711: LD_EXP 119
31715: IFFALSE 31784
31717: GO 31719
31719: DISABLE
31720: LD_INT 0
31722: PPUSH
31723: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31724: LD_ADDR_VAR 0 2
31728: PUSH
31729: LD_INT 22
31731: PUSH
31732: LD_OWVAR 2
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PPUSH
31741: CALL_OW 69
31745: ST_TO_ADDR
// if not tmp then
31746: LD_VAR 0 2
31750: NOT
31751: IFFALSE 31755
// exit ;
31753: GO 31784
// for i in tmp do
31755: LD_ADDR_VAR 0 1
31759: PUSH
31760: LD_VAR 0 2
31764: PUSH
31765: FOR_IN
31766: IFFALSE 31782
// SetLives ( i , 600 ) ;
31768: LD_VAR 0 1
31772: PPUSH
31773: LD_INT 600
31775: PPUSH
31776: CALL_OW 234
31780: GO 31765
31782: POP
31783: POP
// end ;
31784: PPOPN 2
31786: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31787: LD_INT 0
31789: PPUSH
// case cmd of 301 :
31790: LD_VAR 0 1
31794: PUSH
31795: LD_INT 301
31797: DOUBLE
31798: EQUAL
31799: IFTRUE 31803
31801: GO 31835
31803: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31804: LD_VAR 0 6
31808: PPUSH
31809: LD_VAR 0 7
31813: PPUSH
31814: LD_VAR 0 8
31818: PPUSH
31819: LD_VAR 0 4
31823: PPUSH
31824: LD_VAR 0 5
31828: PPUSH
31829: CALL 33044 0 5
31833: GO 31956
31835: LD_INT 302
31837: DOUBLE
31838: EQUAL
31839: IFTRUE 31843
31841: GO 31880
31843: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31844: LD_VAR 0 6
31848: PPUSH
31849: LD_VAR 0 7
31853: PPUSH
31854: LD_VAR 0 8
31858: PPUSH
31859: LD_VAR 0 9
31863: PPUSH
31864: LD_VAR 0 4
31868: PPUSH
31869: LD_VAR 0 5
31873: PPUSH
31874: CALL 33135 0 6
31878: GO 31956
31880: LD_INT 303
31882: DOUBLE
31883: EQUAL
31884: IFTRUE 31888
31886: GO 31925
31888: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31889: LD_VAR 0 6
31893: PPUSH
31894: LD_VAR 0 7
31898: PPUSH
31899: LD_VAR 0 8
31903: PPUSH
31904: LD_VAR 0 9
31908: PPUSH
31909: LD_VAR 0 4
31913: PPUSH
31914: LD_VAR 0 5
31918: PPUSH
31919: CALL 31961 0 6
31923: GO 31956
31925: LD_INT 304
31927: DOUBLE
31928: EQUAL
31929: IFTRUE 31933
31931: GO 31955
31933: POP
// hHackTeleport ( unit , x , y ) ; end ;
31934: LD_VAR 0 2
31938: PPUSH
31939: LD_VAR 0 4
31943: PPUSH
31944: LD_VAR 0 5
31948: PPUSH
31949: CALL 33728 0 3
31953: GO 31956
31955: POP
// end ;
31956: LD_VAR 0 12
31960: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31961: LD_INT 0
31963: PPUSH
31964: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31965: LD_VAR 0 1
31969: PUSH
31970: LD_INT 1
31972: LESS
31973: PUSH
31974: LD_VAR 0 1
31978: PUSH
31979: LD_INT 3
31981: GREATER
31982: OR
31983: PUSH
31984: LD_VAR 0 5
31988: PPUSH
31989: LD_VAR 0 6
31993: PPUSH
31994: CALL_OW 428
31998: OR
31999: IFFALSE 32003
// exit ;
32001: GO 32731
// uc_side := your_side ;
32003: LD_ADDR_OWVAR 20
32007: PUSH
32008: LD_OWVAR 2
32012: ST_TO_ADDR
// uc_nation := nation ;
32013: LD_ADDR_OWVAR 21
32017: PUSH
32018: LD_VAR 0 1
32022: ST_TO_ADDR
// bc_level = 1 ;
32023: LD_ADDR_OWVAR 43
32027: PUSH
32028: LD_INT 1
32030: ST_TO_ADDR
// case btype of 1 :
32031: LD_VAR 0 2
32035: PUSH
32036: LD_INT 1
32038: DOUBLE
32039: EQUAL
32040: IFTRUE 32044
32042: GO 32055
32044: POP
// bc_type := b_depot ; 2 :
32045: LD_ADDR_OWVAR 42
32049: PUSH
32050: LD_INT 0
32052: ST_TO_ADDR
32053: GO 32675
32055: LD_INT 2
32057: DOUBLE
32058: EQUAL
32059: IFTRUE 32063
32061: GO 32074
32063: POP
// bc_type := b_warehouse ; 3 :
32064: LD_ADDR_OWVAR 42
32068: PUSH
32069: LD_INT 1
32071: ST_TO_ADDR
32072: GO 32675
32074: LD_INT 3
32076: DOUBLE
32077: EQUAL
32078: IFTRUE 32082
32080: GO 32093
32082: POP
// bc_type := b_lab ; 4 .. 9 :
32083: LD_ADDR_OWVAR 42
32087: PUSH
32088: LD_INT 6
32090: ST_TO_ADDR
32091: GO 32675
32093: LD_INT 4
32095: DOUBLE
32096: GREATEREQUAL
32097: IFFALSE 32105
32099: LD_INT 9
32101: DOUBLE
32102: LESSEQUAL
32103: IFTRUE 32107
32105: GO 32167
32107: POP
// begin bc_type := b_lab_half ;
32108: LD_ADDR_OWVAR 42
32112: PUSH
32113: LD_INT 7
32115: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32116: LD_ADDR_OWVAR 44
32120: PUSH
32121: LD_INT 10
32123: PUSH
32124: LD_INT 11
32126: PUSH
32127: LD_INT 12
32129: PUSH
32130: LD_INT 15
32132: PUSH
32133: LD_INT 14
32135: PUSH
32136: LD_INT 13
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: PUSH
32147: LD_VAR 0 2
32151: PUSH
32152: LD_INT 3
32154: MINUS
32155: ARRAY
32156: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32157: LD_ADDR_OWVAR 45
32161: PUSH
32162: LD_INT 9
32164: ST_TO_ADDR
// end ; 10 .. 13 :
32165: GO 32675
32167: LD_INT 10
32169: DOUBLE
32170: GREATEREQUAL
32171: IFFALSE 32179
32173: LD_INT 13
32175: DOUBLE
32176: LESSEQUAL
32177: IFTRUE 32181
32179: GO 32258
32181: POP
// begin bc_type := b_lab_full ;
32182: LD_ADDR_OWVAR 42
32186: PUSH
32187: LD_INT 8
32189: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32190: LD_ADDR_OWVAR 44
32194: PUSH
32195: LD_INT 10
32197: PUSH
32198: LD_INT 12
32200: PUSH
32201: LD_INT 14
32203: PUSH
32204: LD_INT 13
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: PUSH
32213: LD_VAR 0 2
32217: PUSH
32218: LD_INT 9
32220: MINUS
32221: ARRAY
32222: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32223: LD_ADDR_OWVAR 45
32227: PUSH
32228: LD_INT 11
32230: PUSH
32231: LD_INT 15
32233: PUSH
32234: LD_INT 12
32236: PUSH
32237: LD_INT 15
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: PUSH
32246: LD_VAR 0 2
32250: PUSH
32251: LD_INT 9
32253: MINUS
32254: ARRAY
32255: ST_TO_ADDR
// end ; 14 :
32256: GO 32675
32258: LD_INT 14
32260: DOUBLE
32261: EQUAL
32262: IFTRUE 32266
32264: GO 32277
32266: POP
// bc_type := b_workshop ; 15 :
32267: LD_ADDR_OWVAR 42
32271: PUSH
32272: LD_INT 2
32274: ST_TO_ADDR
32275: GO 32675
32277: LD_INT 15
32279: DOUBLE
32280: EQUAL
32281: IFTRUE 32285
32283: GO 32296
32285: POP
// bc_type := b_factory ; 16 :
32286: LD_ADDR_OWVAR 42
32290: PUSH
32291: LD_INT 3
32293: ST_TO_ADDR
32294: GO 32675
32296: LD_INT 16
32298: DOUBLE
32299: EQUAL
32300: IFTRUE 32304
32302: GO 32315
32304: POP
// bc_type := b_ext_gun ; 17 :
32305: LD_ADDR_OWVAR 42
32309: PUSH
32310: LD_INT 17
32312: ST_TO_ADDR
32313: GO 32675
32315: LD_INT 17
32317: DOUBLE
32318: EQUAL
32319: IFTRUE 32323
32321: GO 32351
32323: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32324: LD_ADDR_OWVAR 42
32328: PUSH
32329: LD_INT 19
32331: PUSH
32332: LD_INT 23
32334: PUSH
32335: LD_INT 19
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: LIST
32342: PUSH
32343: LD_VAR 0 1
32347: ARRAY
32348: ST_TO_ADDR
32349: GO 32675
32351: LD_INT 18
32353: DOUBLE
32354: EQUAL
32355: IFTRUE 32359
32357: GO 32370
32359: POP
// bc_type := b_ext_radar ; 19 :
32360: LD_ADDR_OWVAR 42
32364: PUSH
32365: LD_INT 20
32367: ST_TO_ADDR
32368: GO 32675
32370: LD_INT 19
32372: DOUBLE
32373: EQUAL
32374: IFTRUE 32378
32376: GO 32389
32378: POP
// bc_type := b_ext_radio ; 20 :
32379: LD_ADDR_OWVAR 42
32383: PUSH
32384: LD_INT 22
32386: ST_TO_ADDR
32387: GO 32675
32389: LD_INT 20
32391: DOUBLE
32392: EQUAL
32393: IFTRUE 32397
32395: GO 32408
32397: POP
// bc_type := b_ext_siberium ; 21 :
32398: LD_ADDR_OWVAR 42
32402: PUSH
32403: LD_INT 21
32405: ST_TO_ADDR
32406: GO 32675
32408: LD_INT 21
32410: DOUBLE
32411: EQUAL
32412: IFTRUE 32416
32414: GO 32427
32416: POP
// bc_type := b_ext_computer ; 22 :
32417: LD_ADDR_OWVAR 42
32421: PUSH
32422: LD_INT 24
32424: ST_TO_ADDR
32425: GO 32675
32427: LD_INT 22
32429: DOUBLE
32430: EQUAL
32431: IFTRUE 32435
32433: GO 32446
32435: POP
// bc_type := b_ext_track ; 23 :
32436: LD_ADDR_OWVAR 42
32440: PUSH
32441: LD_INT 16
32443: ST_TO_ADDR
32444: GO 32675
32446: LD_INT 23
32448: DOUBLE
32449: EQUAL
32450: IFTRUE 32454
32452: GO 32465
32454: POP
// bc_type := b_ext_laser ; 24 :
32455: LD_ADDR_OWVAR 42
32459: PUSH
32460: LD_INT 25
32462: ST_TO_ADDR
32463: GO 32675
32465: LD_INT 24
32467: DOUBLE
32468: EQUAL
32469: IFTRUE 32473
32471: GO 32484
32473: POP
// bc_type := b_control_tower ; 25 :
32474: LD_ADDR_OWVAR 42
32478: PUSH
32479: LD_INT 36
32481: ST_TO_ADDR
32482: GO 32675
32484: LD_INT 25
32486: DOUBLE
32487: EQUAL
32488: IFTRUE 32492
32490: GO 32503
32492: POP
// bc_type := b_breastwork ; 26 :
32493: LD_ADDR_OWVAR 42
32497: PUSH
32498: LD_INT 31
32500: ST_TO_ADDR
32501: GO 32675
32503: LD_INT 26
32505: DOUBLE
32506: EQUAL
32507: IFTRUE 32511
32509: GO 32522
32511: POP
// bc_type := b_bunker ; 27 :
32512: LD_ADDR_OWVAR 42
32516: PUSH
32517: LD_INT 32
32519: ST_TO_ADDR
32520: GO 32675
32522: LD_INT 27
32524: DOUBLE
32525: EQUAL
32526: IFTRUE 32530
32528: GO 32541
32530: POP
// bc_type := b_turret ; 28 :
32531: LD_ADDR_OWVAR 42
32535: PUSH
32536: LD_INT 33
32538: ST_TO_ADDR
32539: GO 32675
32541: LD_INT 28
32543: DOUBLE
32544: EQUAL
32545: IFTRUE 32549
32547: GO 32560
32549: POP
// bc_type := b_armoury ; 29 :
32550: LD_ADDR_OWVAR 42
32554: PUSH
32555: LD_INT 4
32557: ST_TO_ADDR
32558: GO 32675
32560: LD_INT 29
32562: DOUBLE
32563: EQUAL
32564: IFTRUE 32568
32566: GO 32579
32568: POP
// bc_type := b_barracks ; 30 :
32569: LD_ADDR_OWVAR 42
32573: PUSH
32574: LD_INT 5
32576: ST_TO_ADDR
32577: GO 32675
32579: LD_INT 30
32581: DOUBLE
32582: EQUAL
32583: IFTRUE 32587
32585: GO 32598
32587: POP
// bc_type := b_solar_power ; 31 :
32588: LD_ADDR_OWVAR 42
32592: PUSH
32593: LD_INT 27
32595: ST_TO_ADDR
32596: GO 32675
32598: LD_INT 31
32600: DOUBLE
32601: EQUAL
32602: IFTRUE 32606
32604: GO 32617
32606: POP
// bc_type := b_oil_power ; 32 :
32607: LD_ADDR_OWVAR 42
32611: PUSH
32612: LD_INT 26
32614: ST_TO_ADDR
32615: GO 32675
32617: LD_INT 32
32619: DOUBLE
32620: EQUAL
32621: IFTRUE 32625
32623: GO 32636
32625: POP
// bc_type := b_siberite_power ; 33 :
32626: LD_ADDR_OWVAR 42
32630: PUSH
32631: LD_INT 28
32633: ST_TO_ADDR
32634: GO 32675
32636: LD_INT 33
32638: DOUBLE
32639: EQUAL
32640: IFTRUE 32644
32642: GO 32655
32644: POP
// bc_type := b_oil_mine ; 34 :
32645: LD_ADDR_OWVAR 42
32649: PUSH
32650: LD_INT 29
32652: ST_TO_ADDR
32653: GO 32675
32655: LD_INT 34
32657: DOUBLE
32658: EQUAL
32659: IFTRUE 32663
32661: GO 32674
32663: POP
// bc_type := b_siberite_mine ; end ;
32664: LD_ADDR_OWVAR 42
32668: PUSH
32669: LD_INT 30
32671: ST_TO_ADDR
32672: GO 32675
32674: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32675: LD_ADDR_VAR 0 8
32679: PUSH
32680: LD_VAR 0 5
32684: PPUSH
32685: LD_VAR 0 6
32689: PPUSH
32690: LD_VAR 0 3
32694: PPUSH
32695: CALL_OW 47
32699: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32700: LD_OWVAR 42
32704: PUSH
32705: LD_INT 32
32707: PUSH
32708: LD_INT 33
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: IN
32715: IFFALSE 32731
// PlaceWeaponTurret ( b , weapon ) ;
32717: LD_VAR 0 8
32721: PPUSH
32722: LD_VAR 0 4
32726: PPUSH
32727: CALL_OW 431
// end ;
32731: LD_VAR 0 7
32735: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32736: LD_INT 0
32738: PPUSH
32739: PPUSH
32740: PPUSH
32741: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32742: LD_ADDR_VAR 0 4
32746: PUSH
32747: LD_INT 22
32749: PUSH
32750: LD_OWVAR 2
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 2
32761: PUSH
32762: LD_INT 30
32764: PUSH
32765: LD_INT 0
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 30
32774: PUSH
32775: LD_INT 1
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: LIST
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PPUSH
32791: CALL_OW 69
32795: ST_TO_ADDR
// if not tmp then
32796: LD_VAR 0 4
32800: NOT
32801: IFFALSE 32805
// exit ;
32803: GO 32864
// for i in tmp do
32805: LD_ADDR_VAR 0 2
32809: PUSH
32810: LD_VAR 0 4
32814: PUSH
32815: FOR_IN
32816: IFFALSE 32862
// for j = 1 to 3 do
32818: LD_ADDR_VAR 0 3
32822: PUSH
32823: DOUBLE
32824: LD_INT 1
32826: DEC
32827: ST_TO_ADDR
32828: LD_INT 3
32830: PUSH
32831: FOR_TO
32832: IFFALSE 32858
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32834: LD_VAR 0 2
32838: PPUSH
32839: CALL_OW 274
32843: PPUSH
32844: LD_VAR 0 3
32848: PPUSH
32849: LD_INT 99999
32851: PPUSH
32852: CALL_OW 277
32856: GO 32831
32858: POP
32859: POP
32860: GO 32815
32862: POP
32863: POP
// end ;
32864: LD_VAR 0 1
32868: RET
// export function hHackSetLevel10 ; var i , j ; begin
32869: LD_INT 0
32871: PPUSH
32872: PPUSH
32873: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32874: LD_ADDR_VAR 0 2
32878: PUSH
32879: LD_INT 21
32881: PUSH
32882: LD_INT 1
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PPUSH
32889: CALL_OW 69
32893: PUSH
32894: FOR_IN
32895: IFFALSE 32947
// if IsSelected ( i ) then
32897: LD_VAR 0 2
32901: PPUSH
32902: CALL_OW 306
32906: IFFALSE 32945
// begin for j := 1 to 4 do
32908: LD_ADDR_VAR 0 3
32912: PUSH
32913: DOUBLE
32914: LD_INT 1
32916: DEC
32917: ST_TO_ADDR
32918: LD_INT 4
32920: PUSH
32921: FOR_TO
32922: IFFALSE 32943
// SetSkill ( i , j , 10 ) ;
32924: LD_VAR 0 2
32928: PPUSH
32929: LD_VAR 0 3
32933: PPUSH
32934: LD_INT 10
32936: PPUSH
32937: CALL_OW 237
32941: GO 32921
32943: POP
32944: POP
// end ;
32945: GO 32894
32947: POP
32948: POP
// end ;
32949: LD_VAR 0 1
32953: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32954: LD_INT 0
32956: PPUSH
32957: PPUSH
32958: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32959: LD_ADDR_VAR 0 2
32963: PUSH
32964: LD_INT 22
32966: PUSH
32967: LD_OWVAR 2
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 21
32978: PUSH
32979: LD_INT 1
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PPUSH
32990: CALL_OW 69
32994: PUSH
32995: FOR_IN
32996: IFFALSE 33037
// begin for j := 1 to 4 do
32998: LD_ADDR_VAR 0 3
33002: PUSH
33003: DOUBLE
33004: LD_INT 1
33006: DEC
33007: ST_TO_ADDR
33008: LD_INT 4
33010: PUSH
33011: FOR_TO
33012: IFFALSE 33033
// SetSkill ( i , j , 10 ) ;
33014: LD_VAR 0 2
33018: PPUSH
33019: LD_VAR 0 3
33023: PPUSH
33024: LD_INT 10
33026: PPUSH
33027: CALL_OW 237
33031: GO 33011
33033: POP
33034: POP
// end ;
33035: GO 32995
33037: POP
33038: POP
// end ;
33039: LD_VAR 0 1
33043: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33044: LD_INT 0
33046: PPUSH
// uc_side := your_side ;
33047: LD_ADDR_OWVAR 20
33051: PUSH
33052: LD_OWVAR 2
33056: ST_TO_ADDR
// uc_nation := nation ;
33057: LD_ADDR_OWVAR 21
33061: PUSH
33062: LD_VAR 0 1
33066: ST_TO_ADDR
// InitHc ;
33067: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33071: LD_INT 0
33073: PPUSH
33074: LD_VAR 0 2
33078: PPUSH
33079: LD_VAR 0 3
33083: PPUSH
33084: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33088: LD_VAR 0 4
33092: PPUSH
33093: LD_VAR 0 5
33097: PPUSH
33098: CALL_OW 428
33102: PUSH
33103: LD_INT 0
33105: EQUAL
33106: IFFALSE 33130
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33108: CALL_OW 44
33112: PPUSH
33113: LD_VAR 0 4
33117: PPUSH
33118: LD_VAR 0 5
33122: PPUSH
33123: LD_INT 1
33125: PPUSH
33126: CALL_OW 48
// end ;
33130: LD_VAR 0 6
33134: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33135: LD_INT 0
33137: PPUSH
33138: PPUSH
// uc_side := your_side ;
33139: LD_ADDR_OWVAR 20
33143: PUSH
33144: LD_OWVAR 2
33148: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33149: LD_VAR 0 1
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: LD_INT 2
33159: PUSH
33160: LD_INT 3
33162: PUSH
33163: LD_INT 4
33165: PUSH
33166: LD_INT 5
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: IN
33176: IFFALSE 33188
// uc_nation := nation_american else
33178: LD_ADDR_OWVAR 21
33182: PUSH
33183: LD_INT 1
33185: ST_TO_ADDR
33186: GO 33231
// if chassis in [ 11 , 12 , 13 , 14 ] then
33188: LD_VAR 0 1
33192: PUSH
33193: LD_INT 11
33195: PUSH
33196: LD_INT 12
33198: PUSH
33199: LD_INT 13
33201: PUSH
33202: LD_INT 14
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: IN
33211: IFFALSE 33223
// uc_nation := nation_arabian else
33213: LD_ADDR_OWVAR 21
33217: PUSH
33218: LD_INT 2
33220: ST_TO_ADDR
33221: GO 33231
// uc_nation := nation_russian ;
33223: LD_ADDR_OWVAR 21
33227: PUSH
33228: LD_INT 3
33230: ST_TO_ADDR
// vc_chassis := chassis ;
33231: LD_ADDR_OWVAR 37
33235: PUSH
33236: LD_VAR 0 1
33240: ST_TO_ADDR
// vc_engine := engine ;
33241: LD_ADDR_OWVAR 39
33245: PUSH
33246: LD_VAR 0 2
33250: ST_TO_ADDR
// vc_control := control ;
33251: LD_ADDR_OWVAR 38
33255: PUSH
33256: LD_VAR 0 3
33260: ST_TO_ADDR
// vc_weapon := weapon ;
33261: LD_ADDR_OWVAR 40
33265: PUSH
33266: LD_VAR 0 4
33270: ST_TO_ADDR
// un := CreateVehicle ;
33271: LD_ADDR_VAR 0 8
33275: PUSH
33276: CALL_OW 45
33280: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33281: LD_VAR 0 8
33285: PPUSH
33286: LD_INT 0
33288: PPUSH
33289: LD_INT 5
33291: PPUSH
33292: CALL_OW 12
33296: PPUSH
33297: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33301: LD_VAR 0 8
33305: PPUSH
33306: LD_VAR 0 5
33310: PPUSH
33311: LD_VAR 0 6
33315: PPUSH
33316: LD_INT 1
33318: PPUSH
33319: CALL_OW 48
// end ;
33323: LD_VAR 0 7
33327: RET
// export hInvincible ; every 1 do
33328: GO 33330
33330: DISABLE
// hInvincible := [ ] ;
33331: LD_ADDR_EXP 120
33335: PUSH
33336: EMPTY
33337: ST_TO_ADDR
33338: END
// every 10 do var i ;
33339: GO 33341
33341: DISABLE
33342: LD_INT 0
33344: PPUSH
// begin enable ;
33345: ENABLE
// if not hInvincible then
33346: LD_EXP 120
33350: NOT
33351: IFFALSE 33355
// exit ;
33353: GO 33399
// for i in hInvincible do
33355: LD_ADDR_VAR 0 1
33359: PUSH
33360: LD_EXP 120
33364: PUSH
33365: FOR_IN
33366: IFFALSE 33397
// if GetLives ( i ) < 1000 then
33368: LD_VAR 0 1
33372: PPUSH
33373: CALL_OW 256
33377: PUSH
33378: LD_INT 1000
33380: LESS
33381: IFFALSE 33395
// SetLives ( i , 1000 ) ;
33383: LD_VAR 0 1
33387: PPUSH
33388: LD_INT 1000
33390: PPUSH
33391: CALL_OW 234
33395: GO 33365
33397: POP
33398: POP
// end ;
33399: PPOPN 1
33401: END
// export function hHackInvincible ; var i ; begin
33402: LD_INT 0
33404: PPUSH
33405: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33406: LD_ADDR_VAR 0 2
33410: PUSH
33411: LD_INT 2
33413: PUSH
33414: LD_INT 21
33416: PUSH
33417: LD_INT 1
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 21
33426: PUSH
33427: LD_INT 2
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: LIST
33438: PPUSH
33439: CALL_OW 69
33443: PUSH
33444: FOR_IN
33445: IFFALSE 33506
// if IsSelected ( i ) then
33447: LD_VAR 0 2
33451: PPUSH
33452: CALL_OW 306
33456: IFFALSE 33504
// begin if i in hInvincible then
33458: LD_VAR 0 2
33462: PUSH
33463: LD_EXP 120
33467: IN
33468: IFFALSE 33488
// hInvincible := hInvincible diff i else
33470: LD_ADDR_EXP 120
33474: PUSH
33475: LD_EXP 120
33479: PUSH
33480: LD_VAR 0 2
33484: DIFF
33485: ST_TO_ADDR
33486: GO 33504
// hInvincible := hInvincible union i ;
33488: LD_ADDR_EXP 120
33492: PUSH
33493: LD_EXP 120
33497: PUSH
33498: LD_VAR 0 2
33502: UNION
33503: ST_TO_ADDR
// end ;
33504: GO 33444
33506: POP
33507: POP
// end ;
33508: LD_VAR 0 1
33512: RET
// export function hHackInvisible ; var i , j ; begin
33513: LD_INT 0
33515: PPUSH
33516: PPUSH
33517: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33518: LD_ADDR_VAR 0 2
33522: PUSH
33523: LD_INT 21
33525: PUSH
33526: LD_INT 1
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PPUSH
33533: CALL_OW 69
33537: PUSH
33538: FOR_IN
33539: IFFALSE 33563
// if IsSelected ( i ) then
33541: LD_VAR 0 2
33545: PPUSH
33546: CALL_OW 306
33550: IFFALSE 33561
// ComForceInvisible ( i ) ;
33552: LD_VAR 0 2
33556: PPUSH
33557: CALL_OW 496
33561: GO 33538
33563: POP
33564: POP
// end ;
33565: LD_VAR 0 1
33569: RET
// export function hHackChangeYourSide ; begin
33570: LD_INT 0
33572: PPUSH
// if your_side = 8 then
33573: LD_OWVAR 2
33577: PUSH
33578: LD_INT 8
33580: EQUAL
33581: IFFALSE 33593
// your_side := 0 else
33583: LD_ADDR_OWVAR 2
33587: PUSH
33588: LD_INT 0
33590: ST_TO_ADDR
33591: GO 33607
// your_side := your_side + 1 ;
33593: LD_ADDR_OWVAR 2
33597: PUSH
33598: LD_OWVAR 2
33602: PUSH
33603: LD_INT 1
33605: PLUS
33606: ST_TO_ADDR
// end ;
33607: LD_VAR 0 1
33611: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33612: LD_INT 0
33614: PPUSH
33615: PPUSH
33616: PPUSH
// for i in all_units do
33617: LD_ADDR_VAR 0 2
33621: PUSH
33622: LD_OWVAR 3
33626: PUSH
33627: FOR_IN
33628: IFFALSE 33706
// if IsSelected ( i ) then
33630: LD_VAR 0 2
33634: PPUSH
33635: CALL_OW 306
33639: IFFALSE 33704
// begin j := GetSide ( i ) ;
33641: LD_ADDR_VAR 0 3
33645: PUSH
33646: LD_VAR 0 2
33650: PPUSH
33651: CALL_OW 255
33655: ST_TO_ADDR
// if j = 8 then
33656: LD_VAR 0 3
33660: PUSH
33661: LD_INT 8
33663: EQUAL
33664: IFFALSE 33676
// j := 0 else
33666: LD_ADDR_VAR 0 3
33670: PUSH
33671: LD_INT 0
33673: ST_TO_ADDR
33674: GO 33690
// j := j + 1 ;
33676: LD_ADDR_VAR 0 3
33680: PUSH
33681: LD_VAR 0 3
33685: PUSH
33686: LD_INT 1
33688: PLUS
33689: ST_TO_ADDR
// SetSide ( i , j ) ;
33690: LD_VAR 0 2
33694: PPUSH
33695: LD_VAR 0 3
33699: PPUSH
33700: CALL_OW 235
// end ;
33704: GO 33627
33706: POP
33707: POP
// end ;
33708: LD_VAR 0 1
33712: RET
// export function hHackFog ; begin
33713: LD_INT 0
33715: PPUSH
// FogOff ( true ) ;
33716: LD_INT 1
33718: PPUSH
33719: CALL_OW 344
// end ;
33723: LD_VAR 0 1
33727: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33728: LD_INT 0
33730: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33731: LD_VAR 0 1
33735: PPUSH
33736: LD_VAR 0 2
33740: PPUSH
33741: LD_VAR 0 3
33745: PPUSH
33746: LD_INT 1
33748: PPUSH
33749: LD_INT 1
33751: PPUSH
33752: CALL_OW 483
// CenterOnXY ( x , y ) ;
33756: LD_VAR 0 2
33760: PPUSH
33761: LD_VAR 0 3
33765: PPUSH
33766: CALL_OW 84
// end ;
33770: LD_VAR 0 4
33774: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33775: LD_INT 0
33777: PPUSH
33778: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33779: LD_VAR 0 1
33783: NOT
33784: PUSH
33785: LD_VAR 0 2
33789: PPUSH
33790: LD_VAR 0 3
33794: PPUSH
33795: CALL_OW 488
33799: NOT
33800: OR
33801: PUSH
33802: LD_VAR 0 1
33806: PPUSH
33807: CALL_OW 266
33811: PUSH
33812: LD_INT 3
33814: NONEQUAL
33815: PUSH
33816: LD_VAR 0 1
33820: PPUSH
33821: CALL_OW 247
33825: PUSH
33826: LD_INT 1
33828: EQUAL
33829: NOT
33830: AND
33831: OR
33832: IFFALSE 33836
// exit ;
33834: GO 34118
// if GetType ( factory ) = unit_human then
33836: LD_VAR 0 1
33840: PPUSH
33841: CALL_OW 247
33845: PUSH
33846: LD_INT 1
33848: EQUAL
33849: IFFALSE 33866
// factory := IsInUnit ( factory ) ;
33851: LD_ADDR_VAR 0 1
33855: PUSH
33856: LD_VAR 0 1
33860: PPUSH
33861: CALL_OW 310
33865: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33866: LD_VAR 0 1
33870: PPUSH
33871: CALL_OW 266
33875: PUSH
33876: LD_INT 3
33878: NONEQUAL
33879: IFFALSE 33883
// exit ;
33881: GO 34118
// for i := 1 to Count ( factoryWaypoints ) do
33883: LD_ADDR_VAR 0 5
33887: PUSH
33888: DOUBLE
33889: LD_INT 1
33891: DEC
33892: ST_TO_ADDR
33893: LD_EXP 121
33897: PPUSH
33898: CALL 42734 0 1
33902: PUSH
33903: FOR_TO
33904: IFFALSE 34066
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
33906: LD_VAR 0 2
33910: PPUSH
33911: LD_VAR 0 3
33915: PPUSH
33916: CALL_OW 428
33920: PUSH
33921: LD_EXP 121
33925: PUSH
33926: LD_VAR 0 5
33930: ARRAY
33931: PUSH
33932: LD_INT 2
33934: ARRAY
33935: EQUAL
33936: IFFALSE 33968
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
33938: LD_ADDR_EXP 121
33942: PUSH
33943: LD_EXP 121
33947: PPUSH
33948: LD_VAR 0 5
33952: PPUSH
33953: CALL_OW 3
33957: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33958: CALL 34123 0 0
// exit ;
33962: POP
33963: POP
33964: GO 34118
// end else
33966: GO 34064
// if factory = factoryWaypoints [ i ] [ 2 ] then
33968: LD_VAR 0 1
33972: PUSH
33973: LD_EXP 121
33977: PUSH
33978: LD_VAR 0 5
33982: ARRAY
33983: PUSH
33984: LD_INT 2
33986: ARRAY
33987: EQUAL
33988: IFFALSE 34064
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
33990: LD_ADDR_EXP 121
33994: PUSH
33995: LD_EXP 121
33999: PPUSH
34000: LD_VAR 0 5
34004: PPUSH
34005: CALL_OW 3
34009: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34010: LD_ADDR_EXP 121
34014: PUSH
34015: LD_EXP 121
34019: PPUSH
34020: LD_VAR 0 1
34024: PPUSH
34025: CALL_OW 255
34029: PUSH
34030: LD_VAR 0 1
34034: PUSH
34035: LD_VAR 0 2
34039: PUSH
34040: LD_VAR 0 3
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: PPUSH
34051: CALL 78343 0 2
34055: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34056: CALL 34123 0 0
// exit ;
34060: POP
34061: POP
34062: GO 34118
// end ; end ;
34064: GO 33903
34066: POP
34067: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34068: LD_ADDR_EXP 121
34072: PUSH
34073: LD_EXP 121
34077: PPUSH
34078: LD_VAR 0 1
34082: PPUSH
34083: CALL_OW 255
34087: PUSH
34088: LD_VAR 0 1
34092: PUSH
34093: LD_VAR 0 2
34097: PUSH
34098: LD_VAR 0 3
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: PPUSH
34109: CALL 78343 0 2
34113: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34114: CALL 34123 0 0
// end ;
34118: LD_VAR 0 4
34122: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34123: LD_INT 0
34125: PPUSH
34126: PPUSH
34127: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34128: LD_STRING resetFactoryWaypoint();
34130: PPUSH
34131: CALL_OW 559
// if factoryWaypoints then
34135: LD_EXP 121
34139: IFFALSE 34260
// begin list := factoryWaypoints ;
34141: LD_ADDR_VAR 0 3
34145: PUSH
34146: LD_EXP 121
34150: ST_TO_ADDR
// for i := 1 to list do
34151: LD_ADDR_VAR 0 2
34155: PUSH
34156: DOUBLE
34157: LD_INT 1
34159: DEC
34160: ST_TO_ADDR
34161: LD_VAR 0 3
34165: PUSH
34166: FOR_TO
34167: IFFALSE 34258
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34169: LD_STRING setFactoryWaypointXY(
34171: PUSH
34172: LD_VAR 0 3
34176: PUSH
34177: LD_VAR 0 2
34181: ARRAY
34182: PUSH
34183: LD_INT 1
34185: ARRAY
34186: STR
34187: PUSH
34188: LD_STRING ,
34190: STR
34191: PUSH
34192: LD_VAR 0 3
34196: PUSH
34197: LD_VAR 0 2
34201: ARRAY
34202: PUSH
34203: LD_INT 2
34205: ARRAY
34206: STR
34207: PUSH
34208: LD_STRING ,
34210: STR
34211: PUSH
34212: LD_VAR 0 3
34216: PUSH
34217: LD_VAR 0 2
34221: ARRAY
34222: PUSH
34223: LD_INT 3
34225: ARRAY
34226: STR
34227: PUSH
34228: LD_STRING ,
34230: STR
34231: PUSH
34232: LD_VAR 0 3
34236: PUSH
34237: LD_VAR 0 2
34241: ARRAY
34242: PUSH
34243: LD_INT 4
34245: ARRAY
34246: STR
34247: PUSH
34248: LD_STRING )
34250: STR
34251: PPUSH
34252: CALL_OW 559
34256: GO 34166
34258: POP
34259: POP
// end ; end ;
34260: LD_VAR 0 1
34264: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34265: LD_INT 0
34267: PPUSH
// if HexInfo ( x , y ) = warehouse then
34268: LD_VAR 0 2
34272: PPUSH
34273: LD_VAR 0 3
34277: PPUSH
34278: CALL_OW 428
34282: PUSH
34283: LD_VAR 0 1
34287: EQUAL
34288: IFFALSE 34315
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34290: LD_ADDR_EXP 123
34294: PUSH
34295: LD_EXP 123
34299: PPUSH
34300: LD_VAR 0 1
34304: PPUSH
34305: LD_INT 0
34307: PPUSH
34308: CALL_OW 1
34312: ST_TO_ADDR
34313: GO 34366
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34315: LD_ADDR_EXP 123
34319: PUSH
34320: LD_EXP 123
34324: PPUSH
34325: LD_VAR 0 1
34329: PPUSH
34330: LD_VAR 0 1
34334: PPUSH
34335: CALL_OW 255
34339: PUSH
34340: LD_VAR 0 1
34344: PUSH
34345: LD_VAR 0 2
34349: PUSH
34350: LD_VAR 0 3
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: PPUSH
34361: CALL_OW 1
34365: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34366: CALL 34375 0 0
// end ;
34370: LD_VAR 0 4
34374: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34375: LD_INT 0
34377: PPUSH
34378: PPUSH
34379: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34380: LD_STRING resetWarehouseGatheringPoints();
34382: PPUSH
34383: CALL_OW 559
// if warehouseGatheringPoints then
34387: LD_EXP 123
34391: IFFALSE 34517
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34393: LD_ADDR_VAR 0 3
34397: PUSH
34398: LD_EXP 123
34402: PPUSH
34403: CALL 82111 0 1
34407: ST_TO_ADDR
// for i := 1 to list do
34408: LD_ADDR_VAR 0 2
34412: PUSH
34413: DOUBLE
34414: LD_INT 1
34416: DEC
34417: ST_TO_ADDR
34418: LD_VAR 0 3
34422: PUSH
34423: FOR_TO
34424: IFFALSE 34515
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34426: LD_STRING setWarehouseGatheringPointXY(
34428: PUSH
34429: LD_VAR 0 3
34433: PUSH
34434: LD_VAR 0 2
34438: ARRAY
34439: PUSH
34440: LD_INT 1
34442: ARRAY
34443: STR
34444: PUSH
34445: LD_STRING ,
34447: STR
34448: PUSH
34449: LD_VAR 0 3
34453: PUSH
34454: LD_VAR 0 2
34458: ARRAY
34459: PUSH
34460: LD_INT 2
34462: ARRAY
34463: STR
34464: PUSH
34465: LD_STRING ,
34467: STR
34468: PUSH
34469: LD_VAR 0 3
34473: PUSH
34474: LD_VAR 0 2
34478: ARRAY
34479: PUSH
34480: LD_INT 3
34482: ARRAY
34483: STR
34484: PUSH
34485: LD_STRING ,
34487: STR
34488: PUSH
34489: LD_VAR 0 3
34493: PUSH
34494: LD_VAR 0 2
34498: ARRAY
34499: PUSH
34500: LD_INT 4
34502: ARRAY
34503: STR
34504: PUSH
34505: LD_STRING )
34507: STR
34508: PPUSH
34509: CALL_OW 559
34513: GO 34423
34515: POP
34516: POP
// end ; end ;
34517: LD_VAR 0 1
34521: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34522: LD_EXP 123
34526: IFFALSE 35211
34528: GO 34530
34530: DISABLE
34531: LD_INT 0
34533: PPUSH
34534: PPUSH
34535: PPUSH
34536: PPUSH
34537: PPUSH
34538: PPUSH
34539: PPUSH
34540: PPUSH
34541: PPUSH
// begin enable ;
34542: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34543: LD_ADDR_VAR 0 3
34547: PUSH
34548: LD_EXP 123
34552: PPUSH
34553: CALL 82111 0 1
34557: ST_TO_ADDR
// if not list then
34558: LD_VAR 0 3
34562: NOT
34563: IFFALSE 34567
// exit ;
34565: GO 35211
// for i := 1 to list do
34567: LD_ADDR_VAR 0 1
34571: PUSH
34572: DOUBLE
34573: LD_INT 1
34575: DEC
34576: ST_TO_ADDR
34577: LD_VAR 0 3
34581: PUSH
34582: FOR_TO
34583: IFFALSE 35209
// begin depot := list [ i ] [ 2 ] ;
34585: LD_ADDR_VAR 0 8
34589: PUSH
34590: LD_VAR 0 3
34594: PUSH
34595: LD_VAR 0 1
34599: ARRAY
34600: PUSH
34601: LD_INT 2
34603: ARRAY
34604: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34605: LD_ADDR_VAR 0 5
34609: PUSH
34610: LD_VAR 0 3
34614: PUSH
34615: LD_VAR 0 1
34619: ARRAY
34620: PUSH
34621: LD_INT 1
34623: ARRAY
34624: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34625: LD_VAR 0 8
34629: PPUSH
34630: CALL_OW 301
34634: PUSH
34635: LD_VAR 0 5
34639: PUSH
34640: LD_VAR 0 8
34644: PPUSH
34645: CALL_OW 255
34649: NONEQUAL
34650: OR
34651: IFFALSE 34680
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34653: LD_ADDR_EXP 123
34657: PUSH
34658: LD_EXP 123
34662: PPUSH
34663: LD_VAR 0 8
34667: PPUSH
34668: LD_INT 0
34670: PPUSH
34671: CALL_OW 1
34675: ST_TO_ADDR
// exit ;
34676: POP
34677: POP
34678: GO 35211
// end ; x := list [ i ] [ 3 ] ;
34680: LD_ADDR_VAR 0 6
34684: PUSH
34685: LD_VAR 0 3
34689: PUSH
34690: LD_VAR 0 1
34694: ARRAY
34695: PUSH
34696: LD_INT 3
34698: ARRAY
34699: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34700: LD_ADDR_VAR 0 7
34704: PUSH
34705: LD_VAR 0 3
34709: PUSH
34710: LD_VAR 0 1
34714: ARRAY
34715: PUSH
34716: LD_INT 4
34718: ARRAY
34719: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34720: LD_ADDR_VAR 0 9
34724: PUSH
34725: LD_VAR 0 6
34729: PPUSH
34730: LD_VAR 0 7
34734: PPUSH
34735: LD_INT 16
34737: PPUSH
34738: CALL 80695 0 3
34742: ST_TO_ADDR
// if not cratesNearbyPoint then
34743: LD_VAR 0 9
34747: NOT
34748: IFFALSE 34754
// exit ;
34750: POP
34751: POP
34752: GO 35211
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34754: LD_ADDR_VAR 0 4
34758: PUSH
34759: LD_INT 22
34761: PUSH
34762: LD_VAR 0 5
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 3
34773: PUSH
34774: LD_INT 60
34776: PUSH
34777: EMPTY
34778: LIST
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 91
34786: PUSH
34787: LD_VAR 0 8
34791: PUSH
34792: LD_INT 6
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 2
34802: PUSH
34803: LD_INT 25
34805: PUSH
34806: LD_INT 2
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 25
34815: PUSH
34816: LD_INT 16
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: LIST
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: PPUSH
34834: CALL_OW 69
34838: PUSH
34839: LD_VAR 0 8
34843: PPUSH
34844: CALL_OW 313
34848: PPUSH
34849: LD_INT 3
34851: PUSH
34852: LD_INT 60
34854: PUSH
34855: EMPTY
34856: LIST
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: LD_INT 25
34867: PUSH
34868: LD_INT 2
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 25
34877: PUSH
34878: LD_INT 16
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: LIST
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PPUSH
34894: CALL_OW 72
34898: UNION
34899: ST_TO_ADDR
// if tmp then
34900: LD_VAR 0 4
34904: IFFALSE 34984
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34906: LD_ADDR_VAR 0 4
34910: PUSH
34911: LD_VAR 0 4
34915: PPUSH
34916: LD_INT 3
34918: PPUSH
34919: CALL 78658 0 2
34923: ST_TO_ADDR
// for j in tmp do
34924: LD_ADDR_VAR 0 2
34928: PUSH
34929: LD_VAR 0 4
34933: PUSH
34934: FOR_IN
34935: IFFALSE 34978
// begin if IsInUnit ( j ) then
34937: LD_VAR 0 2
34941: PPUSH
34942: CALL_OW 310
34946: IFFALSE 34957
// ComExit ( j ) ;
34948: LD_VAR 0 2
34952: PPUSH
34953: CALL 78741 0 1
// AddComCollect ( j , x , y ) ;
34957: LD_VAR 0 2
34961: PPUSH
34962: LD_VAR 0 6
34966: PPUSH
34967: LD_VAR 0 7
34971: PPUSH
34972: CALL_OW 177
// end ;
34976: GO 34934
34978: POP
34979: POP
// exit ;
34980: POP
34981: POP
34982: GO 35211
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34984: LD_ADDR_VAR 0 4
34988: PUSH
34989: LD_INT 22
34991: PUSH
34992: LD_VAR 0 5
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 91
35003: PUSH
35004: LD_VAR 0 8
35008: PUSH
35009: LD_INT 8
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 2
35019: PUSH
35020: LD_INT 34
35022: PUSH
35023: LD_INT 12
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 34
35032: PUSH
35033: LD_INT 51
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 34
35042: PUSH
35043: LD_INT 32
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 34
35052: PUSH
35053: LD_INT 89
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: LIST
35071: PPUSH
35072: CALL_OW 69
35076: ST_TO_ADDR
// if tmp then
35077: LD_VAR 0 4
35081: IFFALSE 35207
// begin for j in tmp do
35083: LD_ADDR_VAR 0 2
35087: PUSH
35088: LD_VAR 0 4
35092: PUSH
35093: FOR_IN
35094: IFFALSE 35205
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35096: LD_VAR 0 2
35100: PPUSH
35101: CALL_OW 262
35105: PUSH
35106: LD_INT 3
35108: EQUAL
35109: PUSH
35110: LD_VAR 0 2
35114: PPUSH
35115: CALL_OW 261
35119: PUSH
35120: LD_INT 20
35122: GREATER
35123: OR
35124: PUSH
35125: LD_VAR 0 2
35129: PPUSH
35130: CALL_OW 314
35134: NOT
35135: AND
35136: PUSH
35137: LD_VAR 0 2
35141: PPUSH
35142: CALL_OW 263
35146: PUSH
35147: LD_INT 1
35149: NONEQUAL
35150: PUSH
35151: LD_VAR 0 2
35155: PPUSH
35156: CALL_OW 311
35160: OR
35161: AND
35162: IFFALSE 35203
// begin ComCollect ( j , x , y ) ;
35164: LD_VAR 0 2
35168: PPUSH
35169: LD_VAR 0 6
35173: PPUSH
35174: LD_VAR 0 7
35178: PPUSH
35179: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35183: LD_VAR 0 2
35187: PPUSH
35188: LD_VAR 0 8
35192: PPUSH
35193: CALL_OW 172
// exit ;
35197: POP
35198: POP
35199: POP
35200: POP
35201: GO 35211
// end ;
35203: GO 35093
35205: POP
35206: POP
// end ; end ;
35207: GO 34582
35209: POP
35210: POP
// end ; end_of_file
35211: PPOPN 9
35213: END
// export function SOS_UnitDestroyed ( un ) ; begin
35214: LD_INT 0
35216: PPUSH
// ComRadiation ( un ) ;
35217: LD_VAR 0 1
35221: PPUSH
35222: CALL 36253 0 1
// end ;
35226: LD_VAR 0 2
35230: RET
// export function SOS_UnitKamikazed ( un ) ; begin
35231: LD_INT 0
35233: PPUSH
// ComRadiation ( un ) ;
35234: LD_VAR 0 1
35238: PPUSH
35239: CALL 36253 0 1
// end ;
35243: LD_VAR 0 2
35247: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35248: LD_INT 0
35250: PPUSH
// end ;
35251: LD_VAR 0 4
35255: RET
// export function SOS_Command ( cmd ) ; begin
35256: LD_INT 0
35258: PPUSH
// end ;
35259: LD_VAR 0 2
35263: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35264: LD_INT 0
35266: PPUSH
// end ;
35267: LD_VAR 0 6
35271: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
35272: LD_INT 0
35274: PPUSH
35275: PPUSH
35276: PPUSH
35277: PPUSH
// if not vehicle or not factory then
35278: LD_VAR 0 1
35282: NOT
35283: PUSH
35284: LD_VAR 0 2
35288: NOT
35289: OR
35290: IFFALSE 35294
// exit ;
35292: GO 35844
// if not factoryWaypoints then
35294: LD_EXP 121
35298: NOT
35299: IFFALSE 35303
// exit ;
35301: GO 35844
// for i := 1 to Count ( factoryWaypoints ) do
35303: LD_ADDR_VAR 0 4
35307: PUSH
35308: DOUBLE
35309: LD_INT 1
35311: DEC
35312: ST_TO_ADDR
35313: LD_EXP 121
35317: PPUSH
35318: CALL 42734 0 1
35322: PUSH
35323: FOR_TO
35324: IFFALSE 35842
// if factoryWaypoints [ i ] [ 2 ] = factory then
35326: LD_EXP 121
35330: PUSH
35331: LD_VAR 0 4
35335: ARRAY
35336: PUSH
35337: LD_INT 2
35339: ARRAY
35340: PUSH
35341: LD_VAR 0 2
35345: EQUAL
35346: IFFALSE 35840
// begin if GetControl ( vehicle ) = control_manual then
35348: LD_VAR 0 1
35352: PPUSH
35353: CALL_OW 263
35357: PUSH
35358: LD_INT 1
35360: EQUAL
35361: IFFALSE 35723
// begin driver := IsDrivenBy ( vehicle ) ;
35363: LD_ADDR_VAR 0 5
35367: PUSH
35368: LD_VAR 0 1
35372: PPUSH
35373: CALL_OW 311
35377: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
35378: LD_VAR 0 5
35382: PUSH
35383: LD_EXP 122
35387: IN
35388: PUSH
35389: LD_VAR 0 1
35393: PUSH
35394: LD_EXP 122
35398: IN
35399: OR
35400: IFFALSE 35406
// exit ;
35402: POP
35403: POP
35404: GO 35844
// if not HasTask ( driver ) then
35406: LD_VAR 0 5
35410: PPUSH
35411: CALL_OW 314
35415: NOT
35416: IFFALSE 35721
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
35418: LD_ADDR_EXP 122
35422: PUSH
35423: LD_EXP 122
35427: PPUSH
35428: LD_VAR 0 5
35432: PPUSH
35433: CALL 78343 0 2
35437: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
35438: LD_ADDR_EXP 122
35442: PUSH
35443: LD_EXP 122
35447: PPUSH
35448: LD_VAR 0 1
35452: PPUSH
35453: CALL 78343 0 2
35457: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35458: LD_ADDR_VAR 0 6
35462: PUSH
35463: LD_EXP 121
35467: PUSH
35468: LD_VAR 0 4
35472: ARRAY
35473: PUSH
35474: LD_INT 3
35476: ARRAY
35477: PPUSH
35478: LD_EXP 121
35482: PUSH
35483: LD_VAR 0 4
35487: ARRAY
35488: PUSH
35489: LD_INT 4
35491: ARRAY
35492: PPUSH
35493: CALL_OW 428
35497: ST_TO_ADDR
// if hex then
35498: LD_VAR 0 6
35502: IFFALSE 35520
// ComMoveUnit ( driver , hex ) else
35504: LD_VAR 0 5
35508: PPUSH
35509: LD_VAR 0 6
35513: PPUSH
35514: CALL_OW 112
35518: GO 35604
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
35520: LD_VAR 0 1
35524: PPUSH
35525: LD_EXP 121
35529: PUSH
35530: LD_VAR 0 4
35534: ARRAY
35535: PUSH
35536: LD_INT 3
35538: ARRAY
35539: PPUSH
35540: LD_EXP 121
35544: PUSH
35545: LD_VAR 0 4
35549: ARRAY
35550: PUSH
35551: LD_INT 4
35553: ARRAY
35554: PPUSH
35555: CALL_OW 297
35559: PUSH
35560: LD_INT 0
35562: GREATER
35563: IFFALSE 35604
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35565: LD_VAR 0 5
35569: PPUSH
35570: LD_EXP 121
35574: PUSH
35575: LD_VAR 0 4
35579: ARRAY
35580: PUSH
35581: LD_INT 3
35583: ARRAY
35584: PPUSH
35585: LD_EXP 121
35589: PUSH
35590: LD_VAR 0 4
35594: ARRAY
35595: PUSH
35596: LD_INT 4
35598: ARRAY
35599: PPUSH
35600: CALL_OW 111
// AddComExitVehicle ( driver ) ;
35604: LD_VAR 0 5
35608: PPUSH
35609: CALL_OW 181
// if Multiplayer then
35613: LD_OWVAR 4
35617: IFFALSE 35666
// begin repeat wait ( 10 ) ;
35619: LD_INT 10
35621: PPUSH
35622: CALL_OW 67
// until not IsInUnit ( driver ) ;
35626: LD_VAR 0 5
35630: PPUSH
35631: CALL_OW 310
35635: NOT
35636: IFFALSE 35619
// if not HasTask ( driver ) then
35638: LD_VAR 0 5
35642: PPUSH
35643: CALL_OW 314
35647: NOT
35648: IFFALSE 35664
// ComEnterUnit ( driver , factory ) ;
35650: LD_VAR 0 5
35654: PPUSH
35655: LD_VAR 0 2
35659: PPUSH
35660: CALL_OW 120
// end else
35664: GO 35680
// AddComEnterUnit ( driver , factory ) ;
35666: LD_VAR 0 5
35670: PPUSH
35671: LD_VAR 0 2
35675: PPUSH
35676: CALL_OW 180
// wait ( 0 0$1 ) ;
35680: LD_INT 35
35682: PPUSH
35683: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
35687: LD_ADDR_EXP 122
35691: PUSH
35692: LD_EXP 122
35696: PUSH
35697: LD_VAR 0 5
35701: DIFF
35702: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
35703: LD_ADDR_EXP 122
35707: PUSH
35708: LD_EXP 122
35712: PUSH
35713: LD_VAR 0 1
35717: DIFF
35718: ST_TO_ADDR
// break ;
35719: GO 35842
// end ; end else
35721: GO 35840
// if GetControl ( vehicle ) = control_remote then
35723: LD_VAR 0 1
35727: PPUSH
35728: CALL_OW 263
35732: PUSH
35733: LD_INT 2
35735: EQUAL
35736: IFFALSE 35799
// begin wait ( 0 0$2 ) ;
35738: LD_INT 70
35740: PPUSH
35741: CALL_OW 67
// if Connect ( vehicle ) then
35745: LD_VAR 0 1
35749: PPUSH
35750: CALL 48940 0 1
35754: IFFALSE 35795
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35756: LD_VAR 0 1
35760: PPUSH
35761: LD_EXP 121
35765: PUSH
35766: LD_VAR 0 4
35770: ARRAY
35771: PUSH
35772: LD_INT 3
35774: ARRAY
35775: PPUSH
35776: LD_EXP 121
35780: PUSH
35781: LD_VAR 0 4
35785: ARRAY
35786: PUSH
35787: LD_INT 4
35789: ARRAY
35790: PPUSH
35791: CALL_OW 171
// break ;
35795: GO 35842
// end else
35797: GO 35840
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35799: LD_VAR 0 1
35803: PPUSH
35804: LD_EXP 121
35808: PUSH
35809: LD_VAR 0 4
35813: ARRAY
35814: PUSH
35815: LD_INT 3
35817: ARRAY
35818: PPUSH
35819: LD_EXP 121
35823: PUSH
35824: LD_VAR 0 4
35828: ARRAY
35829: PUSH
35830: LD_INT 4
35832: ARRAY
35833: PPUSH
35834: CALL_OW 171
// break ;
35838: GO 35842
// end ; end ;
35840: GO 35323
35842: POP
35843: POP
// end ;
35844: LD_VAR 0 3
35848: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35849: LD_INT 0
35851: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35852: LD_VAR 0 1
35856: PUSH
35857: LD_INT 250
35859: EQUAL
35860: PUSH
35861: LD_VAR 0 2
35865: PPUSH
35866: CALL_OW 264
35870: PUSH
35871: LD_INT 81
35873: EQUAL
35874: AND
35875: IFFALSE 35896
// MinerPlaceMine ( unit , x , y ) ;
35877: LD_VAR 0 2
35881: PPUSH
35882: LD_VAR 0 4
35886: PPUSH
35887: LD_VAR 0 5
35891: PPUSH
35892: CALL 38988 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35896: LD_VAR 0 1
35900: PUSH
35901: LD_INT 251
35903: EQUAL
35904: PUSH
35905: LD_VAR 0 2
35909: PPUSH
35910: CALL_OW 264
35914: PUSH
35915: LD_INT 81
35917: EQUAL
35918: AND
35919: IFFALSE 35940
// MinerDetonateMine ( unit , x , y ) ;
35921: LD_VAR 0 2
35925: PPUSH
35926: LD_VAR 0 4
35930: PPUSH
35931: LD_VAR 0 5
35935: PPUSH
35936: CALL 39263 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35940: LD_VAR 0 1
35944: PUSH
35945: LD_INT 252
35947: EQUAL
35948: PUSH
35949: LD_VAR 0 2
35953: PPUSH
35954: CALL_OW 264
35958: PUSH
35959: LD_INT 81
35961: EQUAL
35962: AND
35963: IFFALSE 35984
// MinerCreateMinefield ( unit , x , y ) ;
35965: LD_VAR 0 2
35969: PPUSH
35970: LD_VAR 0 4
35974: PPUSH
35975: LD_VAR 0 5
35979: PPUSH
35980: CALL 39680 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35984: LD_VAR 0 1
35988: PUSH
35989: LD_INT 253
35991: EQUAL
35992: PUSH
35993: LD_VAR 0 2
35997: PPUSH
35998: CALL_OW 257
36002: PUSH
36003: LD_INT 5
36005: EQUAL
36006: AND
36007: IFFALSE 36028
// ComBinocular ( unit , x , y ) ;
36009: LD_VAR 0 2
36013: PPUSH
36014: LD_VAR 0 4
36018: PPUSH
36019: LD_VAR 0 5
36023: PPUSH
36024: CALL 40049 0 3
// if selectedUnit then
36028: LD_VAR 0 3
36032: IFFALSE 36088
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36034: LD_VAR 0 1
36038: PUSH
36039: LD_INT 254
36041: EQUAL
36042: PUSH
36043: LD_VAR 0 2
36047: PPUSH
36048: CALL_OW 264
36052: PUSH
36053: LD_INT 99
36055: EQUAL
36056: AND
36057: PUSH
36058: LD_VAR 0 3
36062: PPUSH
36063: CALL_OW 263
36067: PUSH
36068: LD_INT 3
36070: EQUAL
36071: AND
36072: IFFALSE 36088
// HackDestroyVehicle ( unit , selectedUnit ) ;
36074: LD_VAR 0 2
36078: PPUSH
36079: LD_VAR 0 3
36083: PPUSH
36084: CALL 38352 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36088: LD_VAR 0 1
36092: PUSH
36093: LD_INT 255
36095: EQUAL
36096: PUSH
36097: LD_VAR 0 2
36101: PPUSH
36102: CALL_OW 264
36106: PUSH
36107: LD_INT 14
36109: PUSH
36110: LD_INT 53
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: IN
36117: AND
36118: PUSH
36119: LD_VAR 0 4
36123: PPUSH
36124: LD_VAR 0 5
36128: PPUSH
36129: CALL_OW 488
36133: AND
36134: IFFALSE 36158
// CutTreeXYR ( unit , x , y , 12 ) ;
36136: LD_VAR 0 2
36140: PPUSH
36141: LD_VAR 0 4
36145: PPUSH
36146: LD_VAR 0 5
36150: PPUSH
36151: LD_INT 12
36153: PPUSH
36154: CALL 36349 0 4
// if cmd = 256 then
36158: LD_VAR 0 1
36162: PUSH
36163: LD_INT 256
36165: EQUAL
36166: IFFALSE 36187
// SetFactoryWaypoint ( unit , x , y ) ;
36168: LD_VAR 0 2
36172: PPUSH
36173: LD_VAR 0 4
36177: PPUSH
36178: LD_VAR 0 5
36182: PPUSH
36183: CALL 33775 0 3
// if cmd = 257 then
36187: LD_VAR 0 1
36191: PUSH
36192: LD_INT 257
36194: EQUAL
36195: IFFALSE 36216
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36197: LD_VAR 0 2
36201: PPUSH
36202: LD_VAR 0 4
36206: PPUSH
36207: LD_VAR 0 5
36211: PPUSH
36212: CALL 34265 0 3
// if cmd = 258 then
36216: LD_VAR 0 1
36220: PUSH
36221: LD_INT 258
36223: EQUAL
36224: IFFALSE 36248
// BurnTreeXYR ( unit , x , y , 8 ) ;
36226: LD_VAR 0 2
36230: PPUSH
36231: LD_VAR 0 4
36235: PPUSH
36236: LD_VAR 0 5
36240: PPUSH
36241: LD_INT 8
36243: PPUSH
36244: CALL 36743 0 4
// end ;
36248: LD_VAR 0 6
36252: RET
// export function ComRadiation ( un ) ; var eff ; begin
36253: LD_INT 0
36255: PPUSH
36256: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
36257: LD_VAR 0 1
36261: PPUSH
36262: CALL_OW 264
36266: PUSH
36267: LD_INT 91
36269: NONEQUAL
36270: IFFALSE 36274
// exit ;
36272: GO 36344
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36274: LD_INT 68
36276: PPUSH
36277: LD_VAR 0 1
36281: PPUSH
36282: CALL_OW 255
36286: PPUSH
36287: CALL_OW 321
36291: PUSH
36292: LD_INT 2
36294: EQUAL
36295: IFFALSE 36307
// eff := 50 else
36297: LD_ADDR_VAR 0 3
36301: PUSH
36302: LD_INT 50
36304: ST_TO_ADDR
36305: GO 36315
// eff := 25 ;
36307: LD_ADDR_VAR 0 3
36311: PUSH
36312: LD_INT 25
36314: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36315: LD_VAR 0 1
36319: PPUSH
36320: CALL_OW 250
36324: PPUSH
36325: LD_VAR 0 1
36329: PPUSH
36330: CALL_OW 251
36334: PPUSH
36335: LD_VAR 0 3
36339: PPUSH
36340: CALL_OW 495
// end ;
36344: LD_VAR 0 2
36348: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36349: LD_INT 0
36351: PPUSH
36352: PPUSH
36353: PPUSH
36354: PPUSH
36355: PPUSH
36356: PPUSH
36357: PPUSH
36358: PPUSH
36359: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36360: LD_VAR 0 1
36364: PPUSH
36365: CALL_OW 302
36369: NOT
36370: PUSH
36371: LD_VAR 0 2
36375: PPUSH
36376: LD_VAR 0 3
36380: PPUSH
36381: CALL_OW 488
36385: NOT
36386: OR
36387: PUSH
36388: LD_VAR 0 4
36392: NOT
36393: OR
36394: IFFALSE 36398
// exit ;
36396: GO 36738
// list := [ ] ;
36398: LD_ADDR_VAR 0 13
36402: PUSH
36403: EMPTY
36404: ST_TO_ADDR
// if x - r < 0 then
36405: LD_VAR 0 2
36409: PUSH
36410: LD_VAR 0 4
36414: MINUS
36415: PUSH
36416: LD_INT 0
36418: LESS
36419: IFFALSE 36431
// min_x := 0 else
36421: LD_ADDR_VAR 0 7
36425: PUSH
36426: LD_INT 0
36428: ST_TO_ADDR
36429: GO 36447
// min_x := x - r ;
36431: LD_ADDR_VAR 0 7
36435: PUSH
36436: LD_VAR 0 2
36440: PUSH
36441: LD_VAR 0 4
36445: MINUS
36446: ST_TO_ADDR
// if y - r < 0 then
36447: LD_VAR 0 3
36451: PUSH
36452: LD_VAR 0 4
36456: MINUS
36457: PUSH
36458: LD_INT 0
36460: LESS
36461: IFFALSE 36473
// min_y := 0 else
36463: LD_ADDR_VAR 0 8
36467: PUSH
36468: LD_INT 0
36470: ST_TO_ADDR
36471: GO 36489
// min_y := y - r ;
36473: LD_ADDR_VAR 0 8
36477: PUSH
36478: LD_VAR 0 3
36482: PUSH
36483: LD_VAR 0 4
36487: MINUS
36488: ST_TO_ADDR
// max_x := x + r ;
36489: LD_ADDR_VAR 0 9
36493: PUSH
36494: LD_VAR 0 2
36498: PUSH
36499: LD_VAR 0 4
36503: PLUS
36504: ST_TO_ADDR
// max_y := y + r ;
36505: LD_ADDR_VAR 0 10
36509: PUSH
36510: LD_VAR 0 3
36514: PUSH
36515: LD_VAR 0 4
36519: PLUS
36520: ST_TO_ADDR
// for _x = min_x to max_x do
36521: LD_ADDR_VAR 0 11
36525: PUSH
36526: DOUBLE
36527: LD_VAR 0 7
36531: DEC
36532: ST_TO_ADDR
36533: LD_VAR 0 9
36537: PUSH
36538: FOR_TO
36539: IFFALSE 36656
// for _y = min_y to max_y do
36541: LD_ADDR_VAR 0 12
36545: PUSH
36546: DOUBLE
36547: LD_VAR 0 8
36551: DEC
36552: ST_TO_ADDR
36553: LD_VAR 0 10
36557: PUSH
36558: FOR_TO
36559: IFFALSE 36652
// begin if not ValidHex ( _x , _y ) then
36561: LD_VAR 0 11
36565: PPUSH
36566: LD_VAR 0 12
36570: PPUSH
36571: CALL_OW 488
36575: NOT
36576: IFFALSE 36580
// continue ;
36578: GO 36558
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36580: LD_VAR 0 11
36584: PPUSH
36585: LD_VAR 0 12
36589: PPUSH
36590: CALL_OW 351
36594: PUSH
36595: LD_VAR 0 11
36599: PPUSH
36600: LD_VAR 0 12
36604: PPUSH
36605: CALL_OW 554
36609: AND
36610: IFFALSE 36650
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36612: LD_ADDR_VAR 0 13
36616: PUSH
36617: LD_VAR 0 13
36621: PPUSH
36622: LD_VAR 0 13
36626: PUSH
36627: LD_INT 1
36629: PLUS
36630: PPUSH
36631: LD_VAR 0 11
36635: PUSH
36636: LD_VAR 0 12
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PPUSH
36645: CALL_OW 2
36649: ST_TO_ADDR
// end ;
36650: GO 36558
36652: POP
36653: POP
36654: GO 36538
36656: POP
36657: POP
// if not list then
36658: LD_VAR 0 13
36662: NOT
36663: IFFALSE 36667
// exit ;
36665: GO 36738
// for i in list do
36667: LD_ADDR_VAR 0 6
36671: PUSH
36672: LD_VAR 0 13
36676: PUSH
36677: FOR_IN
36678: IFFALSE 36736
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36680: LD_VAR 0 1
36684: PPUSH
36685: LD_STRING M
36687: PUSH
36688: LD_VAR 0 6
36692: PUSH
36693: LD_INT 1
36695: ARRAY
36696: PUSH
36697: LD_VAR 0 6
36701: PUSH
36702: LD_INT 2
36704: ARRAY
36705: PUSH
36706: LD_INT 0
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: LD_INT 0
36714: PUSH
36715: LD_INT 0
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: PUSH
36727: EMPTY
36728: LIST
36729: PPUSH
36730: CALL_OW 447
36734: GO 36677
36736: POP
36737: POP
// end ;
36738: LD_VAR 0 5
36742: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
36743: LD_INT 0
36745: PPUSH
36746: PPUSH
36747: PPUSH
36748: PPUSH
36749: PPUSH
36750: PPUSH
36751: PPUSH
36752: PPUSH
36753: PPUSH
36754: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36755: LD_VAR 0 1
36759: PPUSH
36760: CALL_OW 302
36764: NOT
36765: PUSH
36766: LD_VAR 0 2
36770: PPUSH
36771: LD_VAR 0 3
36775: PPUSH
36776: CALL_OW 488
36780: NOT
36781: OR
36782: PUSH
36783: LD_VAR 0 4
36787: NOT
36788: OR
36789: IFFALSE 36793
// exit ;
36791: GO 37306
// list := [ ] ;
36793: LD_ADDR_VAR 0 13
36797: PUSH
36798: EMPTY
36799: ST_TO_ADDR
// if x - r < 0 then
36800: LD_VAR 0 2
36804: PUSH
36805: LD_VAR 0 4
36809: MINUS
36810: PUSH
36811: LD_INT 0
36813: LESS
36814: IFFALSE 36826
// min_x := 0 else
36816: LD_ADDR_VAR 0 7
36820: PUSH
36821: LD_INT 0
36823: ST_TO_ADDR
36824: GO 36842
// min_x := x - r ;
36826: LD_ADDR_VAR 0 7
36830: PUSH
36831: LD_VAR 0 2
36835: PUSH
36836: LD_VAR 0 4
36840: MINUS
36841: ST_TO_ADDR
// if y - r < 0 then
36842: LD_VAR 0 3
36846: PUSH
36847: LD_VAR 0 4
36851: MINUS
36852: PUSH
36853: LD_INT 0
36855: LESS
36856: IFFALSE 36868
// min_y := 0 else
36858: LD_ADDR_VAR 0 8
36862: PUSH
36863: LD_INT 0
36865: ST_TO_ADDR
36866: GO 36884
// min_y := y - r ;
36868: LD_ADDR_VAR 0 8
36872: PUSH
36873: LD_VAR 0 3
36877: PUSH
36878: LD_VAR 0 4
36882: MINUS
36883: ST_TO_ADDR
// max_x := x + r ;
36884: LD_ADDR_VAR 0 9
36888: PUSH
36889: LD_VAR 0 2
36893: PUSH
36894: LD_VAR 0 4
36898: PLUS
36899: ST_TO_ADDR
// max_y := y + r ;
36900: LD_ADDR_VAR 0 10
36904: PUSH
36905: LD_VAR 0 3
36909: PUSH
36910: LD_VAR 0 4
36914: PLUS
36915: ST_TO_ADDR
// for _x = min_x to max_x do
36916: LD_ADDR_VAR 0 11
36920: PUSH
36921: DOUBLE
36922: LD_VAR 0 7
36926: DEC
36927: ST_TO_ADDR
36928: LD_VAR 0 9
36932: PUSH
36933: FOR_TO
36934: IFFALSE 37051
// for _y = min_y to max_y do
36936: LD_ADDR_VAR 0 12
36940: PUSH
36941: DOUBLE
36942: LD_VAR 0 8
36946: DEC
36947: ST_TO_ADDR
36948: LD_VAR 0 10
36952: PUSH
36953: FOR_TO
36954: IFFALSE 37047
// begin if not ValidHex ( _x , _y ) then
36956: LD_VAR 0 11
36960: PPUSH
36961: LD_VAR 0 12
36965: PPUSH
36966: CALL_OW 488
36970: NOT
36971: IFFALSE 36975
// continue ;
36973: GO 36953
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36975: LD_VAR 0 11
36979: PPUSH
36980: LD_VAR 0 12
36984: PPUSH
36985: CALL_OW 351
36989: PUSH
36990: LD_VAR 0 11
36994: PPUSH
36995: LD_VAR 0 12
36999: PPUSH
37000: CALL_OW 554
37004: AND
37005: IFFALSE 37045
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37007: LD_ADDR_VAR 0 13
37011: PUSH
37012: LD_VAR 0 13
37016: PPUSH
37017: LD_VAR 0 13
37021: PUSH
37022: LD_INT 1
37024: PLUS
37025: PPUSH
37026: LD_VAR 0 11
37030: PUSH
37031: LD_VAR 0 12
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PPUSH
37040: CALL_OW 2
37044: ST_TO_ADDR
// end ;
37045: GO 36953
37047: POP
37048: POP
37049: GO 36933
37051: POP
37052: POP
// if not list then
37053: LD_VAR 0 13
37057: NOT
37058: IFFALSE 37062
// exit ;
37060: GO 37306
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37062: LD_ADDR_VAR 0 13
37066: PUSH
37067: LD_VAR 0 1
37071: PPUSH
37072: LD_VAR 0 13
37076: PPUSH
37077: LD_INT 1
37079: PPUSH
37080: LD_INT 1
37082: PPUSH
37083: CALL 46082 0 4
37087: ST_TO_ADDR
// ComStop ( flame ) ;
37088: LD_VAR 0 1
37092: PPUSH
37093: CALL_OW 141
// for i in list do
37097: LD_ADDR_VAR 0 6
37101: PUSH
37102: LD_VAR 0 13
37106: PUSH
37107: FOR_IN
37108: IFFALSE 37139
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37110: LD_VAR 0 1
37114: PPUSH
37115: LD_VAR 0 6
37119: PUSH
37120: LD_INT 1
37122: ARRAY
37123: PPUSH
37124: LD_VAR 0 6
37128: PUSH
37129: LD_INT 2
37131: ARRAY
37132: PPUSH
37133: CALL_OW 176
37137: GO 37107
37139: POP
37140: POP
// repeat wait ( 0 0$1 ) ;
37141: LD_INT 35
37143: PPUSH
37144: CALL_OW 67
// task := GetTaskList ( flame ) ;
37148: LD_ADDR_VAR 0 14
37152: PUSH
37153: LD_VAR 0 1
37157: PPUSH
37158: CALL_OW 437
37162: ST_TO_ADDR
// if not task then
37163: LD_VAR 0 14
37167: NOT
37168: IFFALSE 37172
// exit ;
37170: GO 37306
// if task [ 1 ] [ 1 ] <> | then
37172: LD_VAR 0 14
37176: PUSH
37177: LD_INT 1
37179: ARRAY
37180: PUSH
37181: LD_INT 1
37183: ARRAY
37184: PUSH
37185: LD_STRING |
37187: NONEQUAL
37188: IFFALSE 37192
// exit ;
37190: GO 37306
// _x := task [ 1 ] [ 2 ] ;
37192: LD_ADDR_VAR 0 11
37196: PUSH
37197: LD_VAR 0 14
37201: PUSH
37202: LD_INT 1
37204: ARRAY
37205: PUSH
37206: LD_INT 2
37208: ARRAY
37209: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37210: LD_ADDR_VAR 0 12
37214: PUSH
37215: LD_VAR 0 14
37219: PUSH
37220: LD_INT 1
37222: ARRAY
37223: PUSH
37224: LD_INT 3
37226: ARRAY
37227: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37228: LD_VAR 0 11
37232: PPUSH
37233: LD_VAR 0 12
37237: PPUSH
37238: CALL_OW 351
37242: NOT
37243: PUSH
37244: LD_VAR 0 11
37248: PPUSH
37249: LD_VAR 0 12
37253: PPUSH
37254: CALL_OW 554
37258: NOT
37259: OR
37260: IFFALSE 37294
// begin task := Delete ( task , 1 ) ;
37262: LD_ADDR_VAR 0 14
37266: PUSH
37267: LD_VAR 0 14
37271: PPUSH
37272: LD_INT 1
37274: PPUSH
37275: CALL_OW 3
37279: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37280: LD_VAR 0 1
37284: PPUSH
37285: LD_VAR 0 14
37289: PPUSH
37290: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37294: LD_VAR 0 1
37298: PPUSH
37299: CALL_OW 314
37303: NOT
37304: IFFALSE 37141
// end ;
37306: LD_VAR 0 5
37310: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37311: LD_EXP 125
37315: NOT
37316: IFFALSE 37366
37318: GO 37320
37320: DISABLE
// begin initHack := true ;
37321: LD_ADDR_EXP 125
37325: PUSH
37326: LD_INT 1
37328: ST_TO_ADDR
// hackTanks := [ ] ;
37329: LD_ADDR_EXP 126
37333: PUSH
37334: EMPTY
37335: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37336: LD_ADDR_EXP 127
37340: PUSH
37341: EMPTY
37342: ST_TO_ADDR
// hackLimit := 3 ;
37343: LD_ADDR_EXP 128
37347: PUSH
37348: LD_INT 3
37350: ST_TO_ADDR
// hackDist := 12 ;
37351: LD_ADDR_EXP 129
37355: PUSH
37356: LD_INT 12
37358: ST_TO_ADDR
// hackCounter := [ ] ;
37359: LD_ADDR_EXP 130
37363: PUSH
37364: EMPTY
37365: ST_TO_ADDR
// end ;
37366: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37367: LD_EXP 125
37371: PUSH
37372: LD_INT 34
37374: PUSH
37375: LD_INT 99
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PPUSH
37382: CALL_OW 69
37386: AND
37387: IFFALSE 37640
37389: GO 37391
37391: DISABLE
37392: LD_INT 0
37394: PPUSH
37395: PPUSH
// begin enable ;
37396: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37397: LD_ADDR_VAR 0 1
37401: PUSH
37402: LD_INT 34
37404: PUSH
37405: LD_INT 99
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PPUSH
37412: CALL_OW 69
37416: PUSH
37417: FOR_IN
37418: IFFALSE 37638
// begin if not i in hackTanks then
37420: LD_VAR 0 1
37424: PUSH
37425: LD_EXP 126
37429: IN
37430: NOT
37431: IFFALSE 37514
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37433: LD_ADDR_EXP 126
37437: PUSH
37438: LD_EXP 126
37442: PPUSH
37443: LD_EXP 126
37447: PUSH
37448: LD_INT 1
37450: PLUS
37451: PPUSH
37452: LD_VAR 0 1
37456: PPUSH
37457: CALL_OW 1
37461: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37462: LD_ADDR_EXP 127
37466: PUSH
37467: LD_EXP 127
37471: PPUSH
37472: LD_EXP 127
37476: PUSH
37477: LD_INT 1
37479: PLUS
37480: PPUSH
37481: EMPTY
37482: PPUSH
37483: CALL_OW 1
37487: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37488: LD_ADDR_EXP 130
37492: PUSH
37493: LD_EXP 130
37497: PPUSH
37498: LD_EXP 130
37502: PUSH
37503: LD_INT 1
37505: PLUS
37506: PPUSH
37507: EMPTY
37508: PPUSH
37509: CALL_OW 1
37513: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37514: LD_VAR 0 1
37518: PPUSH
37519: CALL_OW 302
37523: NOT
37524: IFFALSE 37537
// begin HackUnlinkAll ( i ) ;
37526: LD_VAR 0 1
37530: PPUSH
37531: CALL 37643 0 1
// continue ;
37535: GO 37417
// end ; HackCheckCapturedStatus ( i ) ;
37537: LD_VAR 0 1
37541: PPUSH
37542: CALL 38086 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37546: LD_ADDR_VAR 0 2
37550: PUSH
37551: LD_INT 81
37553: PUSH
37554: LD_VAR 0 1
37558: PPUSH
37559: CALL_OW 255
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 33
37570: PUSH
37571: LD_INT 3
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 91
37580: PUSH
37581: LD_VAR 0 1
37585: PUSH
37586: LD_EXP 129
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 50
37598: PUSH
37599: EMPTY
37600: LIST
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: PPUSH
37608: CALL_OW 69
37612: ST_TO_ADDR
// if not tmp then
37613: LD_VAR 0 2
37617: NOT
37618: IFFALSE 37622
// continue ;
37620: GO 37417
// HackLink ( i , tmp ) ;
37622: LD_VAR 0 1
37626: PPUSH
37627: LD_VAR 0 2
37631: PPUSH
37632: CALL 37779 0 2
// end ;
37636: GO 37417
37638: POP
37639: POP
// end ;
37640: PPOPN 2
37642: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37643: LD_INT 0
37645: PPUSH
37646: PPUSH
37647: PPUSH
// if not hack in hackTanks then
37648: LD_VAR 0 1
37652: PUSH
37653: LD_EXP 126
37657: IN
37658: NOT
37659: IFFALSE 37663
// exit ;
37661: GO 37774
// index := GetElementIndex ( hackTanks , hack ) ;
37663: LD_ADDR_VAR 0 4
37667: PUSH
37668: LD_EXP 126
37672: PPUSH
37673: LD_VAR 0 1
37677: PPUSH
37678: CALL 45379 0 2
37682: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37683: LD_EXP 127
37687: PUSH
37688: LD_VAR 0 4
37692: ARRAY
37693: IFFALSE 37774
// begin for i in hackTanksCaptured [ index ] do
37695: LD_ADDR_VAR 0 3
37699: PUSH
37700: LD_EXP 127
37704: PUSH
37705: LD_VAR 0 4
37709: ARRAY
37710: PUSH
37711: FOR_IN
37712: IFFALSE 37738
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37714: LD_VAR 0 3
37718: PUSH
37719: LD_INT 1
37721: ARRAY
37722: PPUSH
37723: LD_VAR 0 3
37727: PUSH
37728: LD_INT 2
37730: ARRAY
37731: PPUSH
37732: CALL_OW 235
37736: GO 37711
37738: POP
37739: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37740: LD_ADDR_EXP 127
37744: PUSH
37745: LD_EXP 127
37749: PPUSH
37750: LD_VAR 0 4
37754: PPUSH
37755: EMPTY
37756: PPUSH
37757: CALL_OW 1
37761: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37762: LD_VAR 0 1
37766: PPUSH
37767: LD_INT 0
37769: PPUSH
37770: CALL_OW 505
// end ; end ;
37774: LD_VAR 0 2
37778: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37779: LD_INT 0
37781: PPUSH
37782: PPUSH
37783: PPUSH
// if not hack in hackTanks or not vehicles then
37784: LD_VAR 0 1
37788: PUSH
37789: LD_EXP 126
37793: IN
37794: NOT
37795: PUSH
37796: LD_VAR 0 2
37800: NOT
37801: OR
37802: IFFALSE 37806
// exit ;
37804: GO 38081
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37806: LD_ADDR_VAR 0 2
37810: PUSH
37811: LD_VAR 0 1
37815: PPUSH
37816: LD_VAR 0 2
37820: PPUSH
37821: LD_INT 1
37823: PPUSH
37824: LD_INT 1
37826: PPUSH
37827: CALL 46029 0 4
37831: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37832: LD_ADDR_VAR 0 5
37836: PUSH
37837: LD_EXP 126
37841: PPUSH
37842: LD_VAR 0 1
37846: PPUSH
37847: CALL 45379 0 2
37851: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37852: LD_EXP 127
37856: PUSH
37857: LD_VAR 0 5
37861: ARRAY
37862: PUSH
37863: LD_EXP 128
37867: LESS
37868: IFFALSE 38057
// begin for i := 1 to vehicles do
37870: LD_ADDR_VAR 0 4
37874: PUSH
37875: DOUBLE
37876: LD_INT 1
37878: DEC
37879: ST_TO_ADDR
37880: LD_VAR 0 2
37884: PUSH
37885: FOR_TO
37886: IFFALSE 38055
// begin if hackTanksCaptured [ index ] = hackLimit then
37888: LD_EXP 127
37892: PUSH
37893: LD_VAR 0 5
37897: ARRAY
37898: PUSH
37899: LD_EXP 128
37903: EQUAL
37904: IFFALSE 37908
// break ;
37906: GO 38055
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37908: LD_ADDR_EXP 130
37912: PUSH
37913: LD_EXP 130
37917: PPUSH
37918: LD_VAR 0 5
37922: PPUSH
37923: LD_EXP 130
37927: PUSH
37928: LD_VAR 0 5
37932: ARRAY
37933: PUSH
37934: LD_INT 1
37936: PLUS
37937: PPUSH
37938: CALL_OW 1
37942: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37943: LD_ADDR_EXP 127
37947: PUSH
37948: LD_EXP 127
37952: PPUSH
37953: LD_VAR 0 5
37957: PUSH
37958: LD_EXP 127
37962: PUSH
37963: LD_VAR 0 5
37967: ARRAY
37968: PUSH
37969: LD_INT 1
37971: PLUS
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PPUSH
37977: LD_VAR 0 2
37981: PUSH
37982: LD_VAR 0 4
37986: ARRAY
37987: PUSH
37988: LD_VAR 0 2
37992: PUSH
37993: LD_VAR 0 4
37997: ARRAY
37998: PPUSH
37999: CALL_OW 255
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PPUSH
38008: CALL 45594 0 3
38012: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38013: LD_VAR 0 2
38017: PUSH
38018: LD_VAR 0 4
38022: ARRAY
38023: PPUSH
38024: LD_VAR 0 1
38028: PPUSH
38029: CALL_OW 255
38033: PPUSH
38034: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38038: LD_VAR 0 2
38042: PUSH
38043: LD_VAR 0 4
38047: ARRAY
38048: PPUSH
38049: CALL_OW 141
// end ;
38053: GO 37885
38055: POP
38056: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38057: LD_VAR 0 1
38061: PPUSH
38062: LD_EXP 127
38066: PUSH
38067: LD_VAR 0 5
38071: ARRAY
38072: PUSH
38073: LD_INT 0
38075: PLUS
38076: PPUSH
38077: CALL_OW 505
// end ;
38081: LD_VAR 0 3
38085: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38086: LD_INT 0
38088: PPUSH
38089: PPUSH
38090: PPUSH
38091: PPUSH
// if not hack in hackTanks then
38092: LD_VAR 0 1
38096: PUSH
38097: LD_EXP 126
38101: IN
38102: NOT
38103: IFFALSE 38107
// exit ;
38105: GO 38347
// index := GetElementIndex ( hackTanks , hack ) ;
38107: LD_ADDR_VAR 0 4
38111: PUSH
38112: LD_EXP 126
38116: PPUSH
38117: LD_VAR 0 1
38121: PPUSH
38122: CALL 45379 0 2
38126: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38127: LD_ADDR_VAR 0 3
38131: PUSH
38132: DOUBLE
38133: LD_EXP 127
38137: PUSH
38138: LD_VAR 0 4
38142: ARRAY
38143: INC
38144: ST_TO_ADDR
38145: LD_INT 1
38147: PUSH
38148: FOR_DOWNTO
38149: IFFALSE 38321
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38151: LD_ADDR_VAR 0 5
38155: PUSH
38156: LD_EXP 127
38160: PUSH
38161: LD_VAR 0 4
38165: ARRAY
38166: PUSH
38167: LD_VAR 0 3
38171: ARRAY
38172: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38173: LD_VAR 0 5
38177: PUSH
38178: LD_INT 1
38180: ARRAY
38181: PPUSH
38182: CALL_OW 302
38186: NOT
38187: PUSH
38188: LD_VAR 0 5
38192: PUSH
38193: LD_INT 1
38195: ARRAY
38196: PPUSH
38197: CALL_OW 255
38201: PUSH
38202: LD_VAR 0 1
38206: PPUSH
38207: CALL_OW 255
38211: NONEQUAL
38212: OR
38213: IFFALSE 38319
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38215: LD_VAR 0 5
38219: PUSH
38220: LD_INT 1
38222: ARRAY
38223: PPUSH
38224: CALL_OW 305
38228: PUSH
38229: LD_VAR 0 5
38233: PUSH
38234: LD_INT 1
38236: ARRAY
38237: PPUSH
38238: CALL_OW 255
38242: PUSH
38243: LD_VAR 0 1
38247: PPUSH
38248: CALL_OW 255
38252: EQUAL
38253: AND
38254: IFFALSE 38278
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38256: LD_VAR 0 5
38260: PUSH
38261: LD_INT 1
38263: ARRAY
38264: PPUSH
38265: LD_VAR 0 5
38269: PUSH
38270: LD_INT 2
38272: ARRAY
38273: PPUSH
38274: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38278: LD_ADDR_EXP 127
38282: PUSH
38283: LD_EXP 127
38287: PPUSH
38288: LD_VAR 0 4
38292: PPUSH
38293: LD_EXP 127
38297: PUSH
38298: LD_VAR 0 4
38302: ARRAY
38303: PPUSH
38304: LD_VAR 0 3
38308: PPUSH
38309: CALL_OW 3
38313: PPUSH
38314: CALL_OW 1
38318: ST_TO_ADDR
// end ; end ;
38319: GO 38148
38321: POP
38322: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38323: LD_VAR 0 1
38327: PPUSH
38328: LD_EXP 127
38332: PUSH
38333: LD_VAR 0 4
38337: ARRAY
38338: PUSH
38339: LD_INT 0
38341: PLUS
38342: PPUSH
38343: CALL_OW 505
// end ;
38347: LD_VAR 0 2
38351: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38352: LD_INT 0
38354: PPUSH
38355: PPUSH
38356: PPUSH
38357: PPUSH
// if not hack in hackTanks then
38358: LD_VAR 0 1
38362: PUSH
38363: LD_EXP 126
38367: IN
38368: NOT
38369: IFFALSE 38373
// exit ;
38371: GO 38458
// index := GetElementIndex ( hackTanks , hack ) ;
38373: LD_ADDR_VAR 0 5
38377: PUSH
38378: LD_EXP 126
38382: PPUSH
38383: LD_VAR 0 1
38387: PPUSH
38388: CALL 45379 0 2
38392: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38393: LD_ADDR_VAR 0 4
38397: PUSH
38398: DOUBLE
38399: LD_INT 1
38401: DEC
38402: ST_TO_ADDR
38403: LD_EXP 127
38407: PUSH
38408: LD_VAR 0 5
38412: ARRAY
38413: PUSH
38414: FOR_TO
38415: IFFALSE 38456
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38417: LD_EXP 127
38421: PUSH
38422: LD_VAR 0 5
38426: ARRAY
38427: PUSH
38428: LD_VAR 0 4
38432: ARRAY
38433: PUSH
38434: LD_INT 1
38436: ARRAY
38437: PUSH
38438: LD_VAR 0 2
38442: EQUAL
38443: IFFALSE 38454
// KillUnit ( vehicle ) ;
38445: LD_VAR 0 2
38449: PPUSH
38450: CALL_OW 66
38454: GO 38414
38456: POP
38457: POP
// end ;
38458: LD_VAR 0 3
38462: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38463: LD_EXP 131
38467: NOT
38468: IFFALSE 38503
38470: GO 38472
38472: DISABLE
// begin initMiner := true ;
38473: LD_ADDR_EXP 131
38477: PUSH
38478: LD_INT 1
38480: ST_TO_ADDR
// minersList := [ ] ;
38481: LD_ADDR_EXP 132
38485: PUSH
38486: EMPTY
38487: ST_TO_ADDR
// minerMinesList := [ ] ;
38488: LD_ADDR_EXP 133
38492: PUSH
38493: EMPTY
38494: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38495: LD_ADDR_EXP 134
38499: PUSH
38500: LD_INT 5
38502: ST_TO_ADDR
// end ;
38503: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38504: LD_EXP 131
38508: PUSH
38509: LD_INT 34
38511: PUSH
38512: LD_INT 81
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PPUSH
38519: CALL_OW 69
38523: AND
38524: IFFALSE 38985
38526: GO 38528
38528: DISABLE
38529: LD_INT 0
38531: PPUSH
38532: PPUSH
38533: PPUSH
38534: PPUSH
// begin enable ;
38535: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38536: LD_ADDR_VAR 0 1
38540: PUSH
38541: LD_INT 34
38543: PUSH
38544: LD_INT 81
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PPUSH
38551: CALL_OW 69
38555: PUSH
38556: FOR_IN
38557: IFFALSE 38629
// begin if not i in minersList then
38559: LD_VAR 0 1
38563: PUSH
38564: LD_EXP 132
38568: IN
38569: NOT
38570: IFFALSE 38627
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38572: LD_ADDR_EXP 132
38576: PUSH
38577: LD_EXP 132
38581: PPUSH
38582: LD_EXP 132
38586: PUSH
38587: LD_INT 1
38589: PLUS
38590: PPUSH
38591: LD_VAR 0 1
38595: PPUSH
38596: CALL_OW 1
38600: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38601: LD_ADDR_EXP 133
38605: PUSH
38606: LD_EXP 133
38610: PPUSH
38611: LD_EXP 133
38615: PUSH
38616: LD_INT 1
38618: PLUS
38619: PPUSH
38620: EMPTY
38621: PPUSH
38622: CALL_OW 1
38626: ST_TO_ADDR
// end end ;
38627: GO 38556
38629: POP
38630: POP
// for i := minerMinesList downto 1 do
38631: LD_ADDR_VAR 0 1
38635: PUSH
38636: DOUBLE
38637: LD_EXP 133
38641: INC
38642: ST_TO_ADDR
38643: LD_INT 1
38645: PUSH
38646: FOR_DOWNTO
38647: IFFALSE 38983
// begin if IsLive ( minersList [ i ] ) then
38649: LD_EXP 132
38653: PUSH
38654: LD_VAR 0 1
38658: ARRAY
38659: PPUSH
38660: CALL_OW 300
38664: IFFALSE 38692
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38666: LD_EXP 132
38670: PUSH
38671: LD_VAR 0 1
38675: ARRAY
38676: PPUSH
38677: LD_EXP 133
38681: PUSH
38682: LD_VAR 0 1
38686: ARRAY
38687: PPUSH
38688: CALL_OW 505
// if not minerMinesList [ i ] then
38692: LD_EXP 133
38696: PUSH
38697: LD_VAR 0 1
38701: ARRAY
38702: NOT
38703: IFFALSE 38707
// continue ;
38705: GO 38646
// for j := minerMinesList [ i ] downto 1 do
38707: LD_ADDR_VAR 0 2
38711: PUSH
38712: DOUBLE
38713: LD_EXP 133
38717: PUSH
38718: LD_VAR 0 1
38722: ARRAY
38723: INC
38724: ST_TO_ADDR
38725: LD_INT 1
38727: PUSH
38728: FOR_DOWNTO
38729: IFFALSE 38979
// begin side := GetSide ( minersList [ i ] ) ;
38731: LD_ADDR_VAR 0 3
38735: PUSH
38736: LD_EXP 132
38740: PUSH
38741: LD_VAR 0 1
38745: ARRAY
38746: PPUSH
38747: CALL_OW 255
38751: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38752: LD_ADDR_VAR 0 4
38756: PUSH
38757: LD_EXP 133
38761: PUSH
38762: LD_VAR 0 1
38766: ARRAY
38767: PUSH
38768: LD_VAR 0 2
38772: ARRAY
38773: PUSH
38774: LD_INT 1
38776: ARRAY
38777: PPUSH
38778: LD_EXP 133
38782: PUSH
38783: LD_VAR 0 1
38787: ARRAY
38788: PUSH
38789: LD_VAR 0 2
38793: ARRAY
38794: PUSH
38795: LD_INT 2
38797: ARRAY
38798: PPUSH
38799: CALL_OW 428
38803: ST_TO_ADDR
// if not tmp then
38804: LD_VAR 0 4
38808: NOT
38809: IFFALSE 38813
// continue ;
38811: GO 38728
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38813: LD_VAR 0 4
38817: PUSH
38818: LD_INT 81
38820: PUSH
38821: LD_VAR 0 3
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PPUSH
38830: CALL_OW 69
38834: IN
38835: PUSH
38836: LD_EXP 133
38840: PUSH
38841: LD_VAR 0 1
38845: ARRAY
38846: PUSH
38847: LD_VAR 0 2
38851: ARRAY
38852: PUSH
38853: LD_INT 1
38855: ARRAY
38856: PPUSH
38857: LD_EXP 133
38861: PUSH
38862: LD_VAR 0 1
38866: ARRAY
38867: PUSH
38868: LD_VAR 0 2
38872: ARRAY
38873: PUSH
38874: LD_INT 2
38876: ARRAY
38877: PPUSH
38878: CALL_OW 458
38882: AND
38883: IFFALSE 38977
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38885: LD_EXP 133
38889: PUSH
38890: LD_VAR 0 1
38894: ARRAY
38895: PUSH
38896: LD_VAR 0 2
38900: ARRAY
38901: PUSH
38902: LD_INT 1
38904: ARRAY
38905: PPUSH
38906: LD_EXP 133
38910: PUSH
38911: LD_VAR 0 1
38915: ARRAY
38916: PUSH
38917: LD_VAR 0 2
38921: ARRAY
38922: PUSH
38923: LD_INT 2
38925: ARRAY
38926: PPUSH
38927: LD_VAR 0 3
38931: PPUSH
38932: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38936: LD_ADDR_EXP 133
38940: PUSH
38941: LD_EXP 133
38945: PPUSH
38946: LD_VAR 0 1
38950: PPUSH
38951: LD_EXP 133
38955: PUSH
38956: LD_VAR 0 1
38960: ARRAY
38961: PPUSH
38962: LD_VAR 0 2
38966: PPUSH
38967: CALL_OW 3
38971: PPUSH
38972: CALL_OW 1
38976: ST_TO_ADDR
// end ; end ;
38977: GO 38728
38979: POP
38980: POP
// end ;
38981: GO 38646
38983: POP
38984: POP
// end ;
38985: PPOPN 4
38987: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38988: LD_INT 0
38990: PPUSH
38991: PPUSH
// result := false ;
38992: LD_ADDR_VAR 0 4
38996: PUSH
38997: LD_INT 0
38999: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39000: LD_VAR 0 1
39004: PPUSH
39005: CALL_OW 264
39009: PUSH
39010: LD_INT 81
39012: EQUAL
39013: NOT
39014: IFFALSE 39018
// exit ;
39016: GO 39258
// index := GetElementIndex ( minersList , unit ) ;
39018: LD_ADDR_VAR 0 5
39022: PUSH
39023: LD_EXP 132
39027: PPUSH
39028: LD_VAR 0 1
39032: PPUSH
39033: CALL 45379 0 2
39037: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39038: LD_EXP 133
39042: PUSH
39043: LD_VAR 0 5
39047: ARRAY
39048: PUSH
39049: LD_EXP 134
39053: GREATEREQUAL
39054: IFFALSE 39058
// exit ;
39056: GO 39258
// ComMoveXY ( unit , x , y ) ;
39058: LD_VAR 0 1
39062: PPUSH
39063: LD_VAR 0 2
39067: PPUSH
39068: LD_VAR 0 3
39072: PPUSH
39073: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39077: LD_INT 35
39079: PPUSH
39080: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39084: LD_VAR 0 1
39088: PPUSH
39089: LD_VAR 0 2
39093: PPUSH
39094: LD_VAR 0 3
39098: PPUSH
39099: CALL 77140 0 3
39103: NOT
39104: PUSH
39105: LD_VAR 0 1
39109: PPUSH
39110: CALL_OW 314
39114: AND
39115: IFFALSE 39119
// exit ;
39117: GO 39258
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39119: LD_VAR 0 2
39123: PPUSH
39124: LD_VAR 0 3
39128: PPUSH
39129: CALL_OW 428
39133: PUSH
39134: LD_VAR 0 1
39138: EQUAL
39139: PUSH
39140: LD_VAR 0 1
39144: PPUSH
39145: CALL_OW 314
39149: NOT
39150: AND
39151: IFFALSE 39077
// PlaySoundXY ( x , y , PlantMine ) ;
39153: LD_VAR 0 2
39157: PPUSH
39158: LD_VAR 0 3
39162: PPUSH
39163: LD_STRING PlantMine
39165: PPUSH
39166: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39170: LD_VAR 0 2
39174: PPUSH
39175: LD_VAR 0 3
39179: PPUSH
39180: LD_VAR 0 1
39184: PPUSH
39185: CALL_OW 255
39189: PPUSH
39190: LD_INT 0
39192: PPUSH
39193: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39197: LD_ADDR_EXP 133
39201: PUSH
39202: LD_EXP 133
39206: PPUSH
39207: LD_VAR 0 5
39211: PUSH
39212: LD_EXP 133
39216: PUSH
39217: LD_VAR 0 5
39221: ARRAY
39222: PUSH
39223: LD_INT 1
39225: PLUS
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PPUSH
39231: LD_VAR 0 2
39235: PUSH
39236: LD_VAR 0 3
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PPUSH
39245: CALL 45594 0 3
39249: ST_TO_ADDR
// result := true ;
39250: LD_ADDR_VAR 0 4
39254: PUSH
39255: LD_INT 1
39257: ST_TO_ADDR
// end ;
39258: LD_VAR 0 4
39262: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39263: LD_INT 0
39265: PPUSH
39266: PPUSH
39267: PPUSH
// if not unit in minersList then
39268: LD_VAR 0 1
39272: PUSH
39273: LD_EXP 132
39277: IN
39278: NOT
39279: IFFALSE 39283
// exit ;
39281: GO 39675
// index := GetElementIndex ( minersList , unit ) ;
39283: LD_ADDR_VAR 0 6
39287: PUSH
39288: LD_EXP 132
39292: PPUSH
39293: LD_VAR 0 1
39297: PPUSH
39298: CALL 45379 0 2
39302: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39303: LD_ADDR_VAR 0 5
39307: PUSH
39308: DOUBLE
39309: LD_EXP 133
39313: PUSH
39314: LD_VAR 0 6
39318: ARRAY
39319: INC
39320: ST_TO_ADDR
39321: LD_INT 1
39323: PUSH
39324: FOR_DOWNTO
39325: IFFALSE 39486
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39327: LD_EXP 133
39331: PUSH
39332: LD_VAR 0 6
39336: ARRAY
39337: PUSH
39338: LD_VAR 0 5
39342: ARRAY
39343: PUSH
39344: LD_INT 1
39346: ARRAY
39347: PUSH
39348: LD_VAR 0 2
39352: EQUAL
39353: PUSH
39354: LD_EXP 133
39358: PUSH
39359: LD_VAR 0 6
39363: ARRAY
39364: PUSH
39365: LD_VAR 0 5
39369: ARRAY
39370: PUSH
39371: LD_INT 2
39373: ARRAY
39374: PUSH
39375: LD_VAR 0 3
39379: EQUAL
39380: AND
39381: IFFALSE 39484
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39383: LD_EXP 133
39387: PUSH
39388: LD_VAR 0 6
39392: ARRAY
39393: PUSH
39394: LD_VAR 0 5
39398: ARRAY
39399: PUSH
39400: LD_INT 1
39402: ARRAY
39403: PPUSH
39404: LD_EXP 133
39408: PUSH
39409: LD_VAR 0 6
39413: ARRAY
39414: PUSH
39415: LD_VAR 0 5
39419: ARRAY
39420: PUSH
39421: LD_INT 2
39423: ARRAY
39424: PPUSH
39425: LD_VAR 0 1
39429: PPUSH
39430: CALL_OW 255
39434: PPUSH
39435: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39439: LD_ADDR_EXP 133
39443: PUSH
39444: LD_EXP 133
39448: PPUSH
39449: LD_VAR 0 6
39453: PPUSH
39454: LD_EXP 133
39458: PUSH
39459: LD_VAR 0 6
39463: ARRAY
39464: PPUSH
39465: LD_VAR 0 5
39469: PPUSH
39470: CALL_OW 3
39474: PPUSH
39475: CALL_OW 1
39479: ST_TO_ADDR
// exit ;
39480: POP
39481: POP
39482: GO 39675
// end ; end ;
39484: GO 39324
39486: POP
39487: POP
// for i := minerMinesList [ index ] downto 1 do
39488: LD_ADDR_VAR 0 5
39492: PUSH
39493: DOUBLE
39494: LD_EXP 133
39498: PUSH
39499: LD_VAR 0 6
39503: ARRAY
39504: INC
39505: ST_TO_ADDR
39506: LD_INT 1
39508: PUSH
39509: FOR_DOWNTO
39510: IFFALSE 39673
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39512: LD_EXP 133
39516: PUSH
39517: LD_VAR 0 6
39521: ARRAY
39522: PUSH
39523: LD_VAR 0 5
39527: ARRAY
39528: PUSH
39529: LD_INT 1
39531: ARRAY
39532: PPUSH
39533: LD_EXP 133
39537: PUSH
39538: LD_VAR 0 6
39542: ARRAY
39543: PUSH
39544: LD_VAR 0 5
39548: ARRAY
39549: PUSH
39550: LD_INT 2
39552: ARRAY
39553: PPUSH
39554: LD_VAR 0 2
39558: PPUSH
39559: LD_VAR 0 3
39563: PPUSH
39564: CALL_OW 298
39568: PUSH
39569: LD_INT 6
39571: LESS
39572: IFFALSE 39671
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39574: LD_EXP 133
39578: PUSH
39579: LD_VAR 0 6
39583: ARRAY
39584: PUSH
39585: LD_VAR 0 5
39589: ARRAY
39590: PUSH
39591: LD_INT 1
39593: ARRAY
39594: PPUSH
39595: LD_EXP 133
39599: PUSH
39600: LD_VAR 0 6
39604: ARRAY
39605: PUSH
39606: LD_VAR 0 5
39610: ARRAY
39611: PUSH
39612: LD_INT 2
39614: ARRAY
39615: PPUSH
39616: LD_VAR 0 1
39620: PPUSH
39621: CALL_OW 255
39625: PPUSH
39626: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39630: LD_ADDR_EXP 133
39634: PUSH
39635: LD_EXP 133
39639: PPUSH
39640: LD_VAR 0 6
39644: PPUSH
39645: LD_EXP 133
39649: PUSH
39650: LD_VAR 0 6
39654: ARRAY
39655: PPUSH
39656: LD_VAR 0 5
39660: PPUSH
39661: CALL_OW 3
39665: PPUSH
39666: CALL_OW 1
39670: ST_TO_ADDR
// end ; end ;
39671: GO 39509
39673: POP
39674: POP
// end ;
39675: LD_VAR 0 4
39679: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39680: LD_INT 0
39682: PPUSH
39683: PPUSH
39684: PPUSH
39685: PPUSH
39686: PPUSH
39687: PPUSH
39688: PPUSH
39689: PPUSH
39690: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39691: LD_VAR 0 1
39695: PPUSH
39696: CALL_OW 264
39700: PUSH
39701: LD_INT 81
39703: EQUAL
39704: NOT
39705: PUSH
39706: LD_VAR 0 1
39710: PUSH
39711: LD_EXP 132
39715: IN
39716: NOT
39717: OR
39718: IFFALSE 39722
// exit ;
39720: GO 40044
// index := GetElementIndex ( minersList , unit ) ;
39722: LD_ADDR_VAR 0 6
39726: PUSH
39727: LD_EXP 132
39731: PPUSH
39732: LD_VAR 0 1
39736: PPUSH
39737: CALL 45379 0 2
39741: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39742: LD_ADDR_VAR 0 8
39746: PUSH
39747: LD_EXP 134
39751: PUSH
39752: LD_EXP 133
39756: PUSH
39757: LD_VAR 0 6
39761: ARRAY
39762: MINUS
39763: ST_TO_ADDR
// if not minesFreeAmount then
39764: LD_VAR 0 8
39768: NOT
39769: IFFALSE 39773
// exit ;
39771: GO 40044
// tmp := [ ] ;
39773: LD_ADDR_VAR 0 7
39777: PUSH
39778: EMPTY
39779: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39780: LD_ADDR_VAR 0 5
39784: PUSH
39785: DOUBLE
39786: LD_INT 1
39788: DEC
39789: ST_TO_ADDR
39790: LD_VAR 0 8
39794: PUSH
39795: FOR_TO
39796: IFFALSE 39991
// begin _d := rand ( 0 , 5 ) ;
39798: LD_ADDR_VAR 0 11
39802: PUSH
39803: LD_INT 0
39805: PPUSH
39806: LD_INT 5
39808: PPUSH
39809: CALL_OW 12
39813: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39814: LD_ADDR_VAR 0 12
39818: PUSH
39819: LD_INT 2
39821: PPUSH
39822: LD_INT 6
39824: PPUSH
39825: CALL_OW 12
39829: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39830: LD_ADDR_VAR 0 9
39834: PUSH
39835: LD_VAR 0 2
39839: PPUSH
39840: LD_VAR 0 11
39844: PPUSH
39845: LD_VAR 0 12
39849: PPUSH
39850: CALL_OW 272
39854: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39855: LD_ADDR_VAR 0 10
39859: PUSH
39860: LD_VAR 0 3
39864: PPUSH
39865: LD_VAR 0 11
39869: PPUSH
39870: LD_VAR 0 12
39874: PPUSH
39875: CALL_OW 273
39879: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39880: LD_VAR 0 9
39884: PPUSH
39885: LD_VAR 0 10
39889: PPUSH
39890: CALL_OW 488
39894: PUSH
39895: LD_VAR 0 9
39899: PUSH
39900: LD_VAR 0 10
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_VAR 0 7
39913: IN
39914: NOT
39915: AND
39916: PUSH
39917: LD_VAR 0 9
39921: PPUSH
39922: LD_VAR 0 10
39926: PPUSH
39927: CALL_OW 458
39931: NOT
39932: AND
39933: IFFALSE 39975
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39935: LD_ADDR_VAR 0 7
39939: PUSH
39940: LD_VAR 0 7
39944: PPUSH
39945: LD_VAR 0 7
39949: PUSH
39950: LD_INT 1
39952: PLUS
39953: PPUSH
39954: LD_VAR 0 9
39958: PUSH
39959: LD_VAR 0 10
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PPUSH
39968: CALL_OW 1
39972: ST_TO_ADDR
39973: GO 39989
// i := i - 1 ;
39975: LD_ADDR_VAR 0 5
39979: PUSH
39980: LD_VAR 0 5
39984: PUSH
39985: LD_INT 1
39987: MINUS
39988: ST_TO_ADDR
// end ;
39989: GO 39795
39991: POP
39992: POP
// for i in tmp do
39993: LD_ADDR_VAR 0 5
39997: PUSH
39998: LD_VAR 0 7
40002: PUSH
40003: FOR_IN
40004: IFFALSE 40042
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40006: LD_VAR 0 1
40010: PPUSH
40011: LD_VAR 0 5
40015: PUSH
40016: LD_INT 1
40018: ARRAY
40019: PPUSH
40020: LD_VAR 0 5
40024: PUSH
40025: LD_INT 2
40027: ARRAY
40028: PPUSH
40029: CALL 38988 0 3
40033: NOT
40034: IFFALSE 40040
// exit ;
40036: POP
40037: POP
40038: GO 40044
40040: GO 40003
40042: POP
40043: POP
// end ;
40044: LD_VAR 0 4
40048: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
40049: LD_INT 0
40051: PPUSH
40052: PPUSH
40053: PPUSH
40054: PPUSH
40055: PPUSH
40056: PPUSH
40057: PPUSH
40058: PPUSH
40059: PPUSH
// if GetClass ( unit ) <> class_sniper then
40060: LD_VAR 0 1
40064: PPUSH
40065: CALL_OW 257
40069: PUSH
40070: LD_INT 5
40072: NONEQUAL
40073: IFFALSE 40077
// exit ;
40075: GO 40543
// dist := 8 ;
40077: LD_ADDR_VAR 0 5
40081: PUSH
40082: LD_INT 8
40084: ST_TO_ADDR
// viewRange := 12 ;
40085: LD_ADDR_VAR 0 8
40089: PUSH
40090: LD_INT 12
40092: ST_TO_ADDR
// side := GetSide ( unit ) ;
40093: LD_ADDR_VAR 0 6
40097: PUSH
40098: LD_VAR 0 1
40102: PPUSH
40103: CALL_OW 255
40107: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40108: LD_INT 61
40110: PPUSH
40111: LD_VAR 0 6
40115: PPUSH
40116: CALL_OW 321
40120: PUSH
40121: LD_INT 2
40123: EQUAL
40124: IFFALSE 40134
// viewRange := 16 ;
40126: LD_ADDR_VAR 0 8
40130: PUSH
40131: LD_INT 16
40133: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40134: LD_VAR 0 1
40138: PPUSH
40139: LD_VAR 0 2
40143: PPUSH
40144: LD_VAR 0 3
40148: PPUSH
40149: CALL_OW 297
40153: PUSH
40154: LD_VAR 0 5
40158: GREATER
40159: IFFALSE 40238
// begin ComMoveXY ( unit , x , y ) ;
40161: LD_VAR 0 1
40165: PPUSH
40166: LD_VAR 0 2
40170: PPUSH
40171: LD_VAR 0 3
40175: PPUSH
40176: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40180: LD_INT 35
40182: PPUSH
40183: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40187: LD_VAR 0 1
40191: PPUSH
40192: LD_VAR 0 2
40196: PPUSH
40197: LD_VAR 0 3
40201: PPUSH
40202: CALL 77140 0 3
40206: NOT
40207: IFFALSE 40211
// exit ;
40209: GO 40543
// until GetDistUnitXY ( unit , x , y ) < dist ;
40211: LD_VAR 0 1
40215: PPUSH
40216: LD_VAR 0 2
40220: PPUSH
40221: LD_VAR 0 3
40225: PPUSH
40226: CALL_OW 297
40230: PUSH
40231: LD_VAR 0 5
40235: LESS
40236: IFFALSE 40180
// end ; ComTurnXY ( unit , x , y ) ;
40238: LD_VAR 0 1
40242: PPUSH
40243: LD_VAR 0 2
40247: PPUSH
40248: LD_VAR 0 3
40252: PPUSH
40253: CALL_OW 118
// repeat if Multiplayer then
40257: LD_OWVAR 4
40261: IFFALSE 40272
// wait ( 35 ) else
40263: LD_INT 35
40265: PPUSH
40266: CALL_OW 67
40270: GO 40279
// wait ( 5 ) ;
40272: LD_INT 5
40274: PPUSH
40275: CALL_OW 67
// _d := GetDir ( unit ) ;
40279: LD_ADDR_VAR 0 11
40283: PUSH
40284: LD_VAR 0 1
40288: PPUSH
40289: CALL_OW 254
40293: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
40294: LD_ADDR_VAR 0 7
40298: PUSH
40299: LD_VAR 0 1
40303: PPUSH
40304: CALL_OW 250
40308: PPUSH
40309: LD_VAR 0 1
40313: PPUSH
40314: CALL_OW 251
40318: PPUSH
40319: LD_VAR 0 2
40323: PPUSH
40324: LD_VAR 0 3
40328: PPUSH
40329: CALL 79748 0 4
40333: ST_TO_ADDR
// until dir = _d ;
40334: LD_VAR 0 7
40338: PUSH
40339: LD_VAR 0 11
40343: EQUAL
40344: IFFALSE 40257
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
40346: LD_ADDR_VAR 0 9
40350: PUSH
40351: LD_VAR 0 1
40355: PPUSH
40356: CALL_OW 250
40360: PPUSH
40361: LD_VAR 0 7
40365: PPUSH
40366: LD_VAR 0 5
40370: PPUSH
40371: CALL_OW 272
40375: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
40376: LD_ADDR_VAR 0 10
40380: PUSH
40381: LD_VAR 0 1
40385: PPUSH
40386: CALL_OW 251
40390: PPUSH
40391: LD_VAR 0 7
40395: PPUSH
40396: LD_VAR 0 5
40400: PPUSH
40401: CALL_OW 273
40405: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40406: LD_VAR 0 9
40410: PPUSH
40411: LD_VAR 0 10
40415: PPUSH
40416: CALL_OW 488
40420: NOT
40421: IFFALSE 40425
// exit ;
40423: GO 40543
// ComAnimCustom ( unit , 1 ) ;
40425: LD_VAR 0 1
40429: PPUSH
40430: LD_INT 1
40432: PPUSH
40433: CALL_OW 592
// p := 0 ;
40437: LD_ADDR_VAR 0 12
40441: PUSH
40442: LD_INT 0
40444: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40445: LD_VAR 0 9
40449: PPUSH
40450: LD_VAR 0 10
40454: PPUSH
40455: LD_VAR 0 6
40459: PPUSH
40460: LD_VAR 0 8
40464: PPUSH
40465: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
40469: LD_INT 35
40471: PPUSH
40472: CALL_OW 67
// p := Inc ( p ) ;
40476: LD_ADDR_VAR 0 12
40480: PUSH
40481: LD_VAR 0 12
40485: PPUSH
40486: CALL 79704 0 1
40490: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
40491: LD_VAR 0 12
40495: PUSH
40496: LD_INT 3
40498: EQUAL
40499: PUSH
40500: LD_VAR 0 1
40504: PPUSH
40505: CALL_OW 302
40509: NOT
40510: OR
40511: PUSH
40512: LD_VAR 0 1
40516: PPUSH
40517: CALL_OW 301
40521: OR
40522: IFFALSE 40469
// RemoveSeeing ( _x , _y , side ) ;
40524: LD_VAR 0 9
40528: PPUSH
40529: LD_VAR 0 10
40533: PPUSH
40534: LD_VAR 0 6
40538: PPUSH
40539: CALL_OW 331
// end ; end_of_file
40543: LD_VAR 0 4
40547: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40548: LD_INT 0
40550: PPUSH
40551: PPUSH
// if exist_mode then
40552: LD_VAR 0 2
40556: IFFALSE 40602
// begin unit := CreateCharacter ( prefix & ident ) ;
40558: LD_ADDR_VAR 0 5
40562: PUSH
40563: LD_VAR 0 3
40567: PUSH
40568: LD_VAR 0 1
40572: STR
40573: PPUSH
40574: CALL_OW 34
40578: ST_TO_ADDR
// if unit then
40579: LD_VAR 0 5
40583: IFFALSE 40600
// DeleteCharacters ( prefix & ident ) ;
40585: LD_VAR 0 3
40589: PUSH
40590: LD_VAR 0 1
40594: STR
40595: PPUSH
40596: CALL_OW 40
// end else
40600: GO 40617
// unit := NewCharacter ( ident ) ;
40602: LD_ADDR_VAR 0 5
40606: PUSH
40607: LD_VAR 0 1
40611: PPUSH
40612: CALL_OW 25
40616: ST_TO_ADDR
// result := unit ;
40617: LD_ADDR_VAR 0 4
40621: PUSH
40622: LD_VAR 0 5
40626: ST_TO_ADDR
// end ;
40627: LD_VAR 0 4
40631: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
40632: LD_INT 0
40634: PPUSH
40635: PPUSH
// if exist_mode then
40636: LD_VAR 0 2
40640: IFFALSE 40665
// unit := CreateCharacter ( prefix & ident ) else
40642: LD_ADDR_VAR 0 5
40646: PUSH
40647: LD_VAR 0 3
40651: PUSH
40652: LD_VAR 0 1
40656: STR
40657: PPUSH
40658: CALL_OW 34
40662: ST_TO_ADDR
40663: GO 40680
// unit := NewCharacter ( ident ) ;
40665: LD_ADDR_VAR 0 5
40669: PUSH
40670: LD_VAR 0 1
40674: PPUSH
40675: CALL_OW 25
40679: ST_TO_ADDR
// result := unit ;
40680: LD_ADDR_VAR 0 4
40684: PUSH
40685: LD_VAR 0 5
40689: ST_TO_ADDR
// end ;
40690: LD_VAR 0 4
40694: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40695: LD_INT 0
40697: PPUSH
40698: PPUSH
// if not side or not nation then
40699: LD_VAR 0 1
40703: NOT
40704: PUSH
40705: LD_VAR 0 2
40709: NOT
40710: OR
40711: IFFALSE 40715
// exit ;
40713: GO 41483
// case nation of nation_american :
40715: LD_VAR 0 2
40719: PUSH
40720: LD_INT 1
40722: DOUBLE
40723: EQUAL
40724: IFTRUE 40728
40726: GO 40942
40728: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40729: LD_ADDR_VAR 0 4
40733: PUSH
40734: LD_INT 35
40736: PUSH
40737: LD_INT 45
40739: PUSH
40740: LD_INT 46
40742: PUSH
40743: LD_INT 47
40745: PUSH
40746: LD_INT 82
40748: PUSH
40749: LD_INT 83
40751: PUSH
40752: LD_INT 84
40754: PUSH
40755: LD_INT 85
40757: PUSH
40758: LD_INT 86
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: LD_INT 2
40766: PUSH
40767: LD_INT 6
40769: PUSH
40770: LD_INT 15
40772: PUSH
40773: LD_INT 16
40775: PUSH
40776: LD_INT 7
40778: PUSH
40779: LD_INT 12
40781: PUSH
40782: LD_INT 13
40784: PUSH
40785: LD_INT 10
40787: PUSH
40788: LD_INT 14
40790: PUSH
40791: LD_INT 20
40793: PUSH
40794: LD_INT 21
40796: PUSH
40797: LD_INT 22
40799: PUSH
40800: LD_INT 25
40802: PUSH
40803: LD_INT 32
40805: PUSH
40806: LD_INT 27
40808: PUSH
40809: LD_INT 36
40811: PUSH
40812: LD_INT 69
40814: PUSH
40815: LD_INT 39
40817: PUSH
40818: LD_INT 34
40820: PUSH
40821: LD_INT 40
40823: PUSH
40824: LD_INT 48
40826: PUSH
40827: LD_INT 49
40829: PUSH
40830: LD_INT 50
40832: PUSH
40833: LD_INT 51
40835: PUSH
40836: LD_INT 52
40838: PUSH
40839: LD_INT 53
40841: PUSH
40842: LD_INT 54
40844: PUSH
40845: LD_INT 55
40847: PUSH
40848: LD_INT 56
40850: PUSH
40851: LD_INT 57
40853: PUSH
40854: LD_INT 58
40856: PUSH
40857: LD_INT 59
40859: PUSH
40860: LD_INT 60
40862: PUSH
40863: LD_INT 61
40865: PUSH
40866: LD_INT 62
40868: PUSH
40869: LD_INT 80
40871: PUSH
40872: LD_INT 82
40874: PUSH
40875: LD_INT 83
40877: PUSH
40878: LD_INT 84
40880: PUSH
40881: LD_INT 85
40883: PUSH
40884: LD_INT 86
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: ST_TO_ADDR
40940: GO 41407
40942: LD_INT 2
40944: DOUBLE
40945: EQUAL
40946: IFTRUE 40950
40948: GO 41176
40950: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40951: LD_ADDR_VAR 0 4
40955: PUSH
40956: LD_INT 35
40958: PUSH
40959: LD_INT 45
40961: PUSH
40962: LD_INT 46
40964: PUSH
40965: LD_INT 47
40967: PUSH
40968: LD_INT 82
40970: PUSH
40971: LD_INT 83
40973: PUSH
40974: LD_INT 84
40976: PUSH
40977: LD_INT 85
40979: PUSH
40980: LD_INT 87
40982: PUSH
40983: LD_INT 70
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: LD_INT 11
40991: PUSH
40992: LD_INT 3
40994: PUSH
40995: LD_INT 4
40997: PUSH
40998: LD_INT 5
41000: PUSH
41001: LD_INT 6
41003: PUSH
41004: LD_INT 15
41006: PUSH
41007: LD_INT 18
41009: PUSH
41010: LD_INT 7
41012: PUSH
41013: LD_INT 17
41015: PUSH
41016: LD_INT 8
41018: PUSH
41019: LD_INT 20
41021: PUSH
41022: LD_INT 21
41024: PUSH
41025: LD_INT 22
41027: PUSH
41028: LD_INT 72
41030: PUSH
41031: LD_INT 26
41033: PUSH
41034: LD_INT 69
41036: PUSH
41037: LD_INT 39
41039: PUSH
41040: LD_INT 40
41042: PUSH
41043: LD_INT 41
41045: PUSH
41046: LD_INT 42
41048: PUSH
41049: LD_INT 43
41051: PUSH
41052: LD_INT 48
41054: PUSH
41055: LD_INT 49
41057: PUSH
41058: LD_INT 50
41060: PUSH
41061: LD_INT 51
41063: PUSH
41064: LD_INT 52
41066: PUSH
41067: LD_INT 53
41069: PUSH
41070: LD_INT 54
41072: PUSH
41073: LD_INT 55
41075: PUSH
41076: LD_INT 56
41078: PUSH
41079: LD_INT 60
41081: PUSH
41082: LD_INT 61
41084: PUSH
41085: LD_INT 62
41087: PUSH
41088: LD_INT 66
41090: PUSH
41091: LD_INT 67
41093: PUSH
41094: LD_INT 68
41096: PUSH
41097: LD_INT 81
41099: PUSH
41100: LD_INT 82
41102: PUSH
41103: LD_INT 83
41105: PUSH
41106: LD_INT 84
41108: PUSH
41109: LD_INT 85
41111: PUSH
41112: LD_INT 87
41114: PUSH
41115: LD_INT 88
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: ST_TO_ADDR
41174: GO 41407
41176: LD_INT 3
41178: DOUBLE
41179: EQUAL
41180: IFTRUE 41184
41182: GO 41406
41184: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41185: LD_ADDR_VAR 0 4
41189: PUSH
41190: LD_INT 46
41192: PUSH
41193: LD_INT 47
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: LD_INT 82
41204: PUSH
41205: LD_INT 83
41207: PUSH
41208: LD_INT 84
41210: PUSH
41211: LD_INT 85
41213: PUSH
41214: LD_INT 86
41216: PUSH
41217: LD_INT 11
41219: PUSH
41220: LD_INT 9
41222: PUSH
41223: LD_INT 20
41225: PUSH
41226: LD_INT 19
41228: PUSH
41229: LD_INT 21
41231: PUSH
41232: LD_INT 24
41234: PUSH
41235: LD_INT 22
41237: PUSH
41238: LD_INT 25
41240: PUSH
41241: LD_INT 28
41243: PUSH
41244: LD_INT 29
41246: PUSH
41247: LD_INT 30
41249: PUSH
41250: LD_INT 31
41252: PUSH
41253: LD_INT 37
41255: PUSH
41256: LD_INT 38
41258: PUSH
41259: LD_INT 32
41261: PUSH
41262: LD_INT 27
41264: PUSH
41265: LD_INT 33
41267: PUSH
41268: LD_INT 69
41270: PUSH
41271: LD_INT 39
41273: PUSH
41274: LD_INT 34
41276: PUSH
41277: LD_INT 40
41279: PUSH
41280: LD_INT 71
41282: PUSH
41283: LD_INT 23
41285: PUSH
41286: LD_INT 44
41288: PUSH
41289: LD_INT 48
41291: PUSH
41292: LD_INT 49
41294: PUSH
41295: LD_INT 50
41297: PUSH
41298: LD_INT 51
41300: PUSH
41301: LD_INT 52
41303: PUSH
41304: LD_INT 53
41306: PUSH
41307: LD_INT 54
41309: PUSH
41310: LD_INT 55
41312: PUSH
41313: LD_INT 56
41315: PUSH
41316: LD_INT 57
41318: PUSH
41319: LD_INT 58
41321: PUSH
41322: LD_INT 59
41324: PUSH
41325: LD_INT 63
41327: PUSH
41328: LD_INT 64
41330: PUSH
41331: LD_INT 65
41333: PUSH
41334: LD_INT 82
41336: PUSH
41337: LD_INT 83
41339: PUSH
41340: LD_INT 84
41342: PUSH
41343: LD_INT 85
41345: PUSH
41346: LD_INT 86
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: ST_TO_ADDR
41404: GO 41407
41406: POP
// if state > - 1 and state < 3 then
41407: LD_VAR 0 3
41411: PUSH
41412: LD_INT 1
41414: NEG
41415: GREATER
41416: PUSH
41417: LD_VAR 0 3
41421: PUSH
41422: LD_INT 3
41424: LESS
41425: AND
41426: IFFALSE 41483
// for i in result do
41428: LD_ADDR_VAR 0 5
41432: PUSH
41433: LD_VAR 0 4
41437: PUSH
41438: FOR_IN
41439: IFFALSE 41481
// if GetTech ( i , side ) <> state then
41441: LD_VAR 0 5
41445: PPUSH
41446: LD_VAR 0 1
41450: PPUSH
41451: CALL_OW 321
41455: PUSH
41456: LD_VAR 0 3
41460: NONEQUAL
41461: IFFALSE 41479
// result := result diff i ;
41463: LD_ADDR_VAR 0 4
41467: PUSH
41468: LD_VAR 0 4
41472: PUSH
41473: LD_VAR 0 5
41477: DIFF
41478: ST_TO_ADDR
41479: GO 41438
41481: POP
41482: POP
// end ;
41483: LD_VAR 0 4
41487: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41488: LD_INT 0
41490: PPUSH
41491: PPUSH
41492: PPUSH
// result := true ;
41493: LD_ADDR_VAR 0 3
41497: PUSH
41498: LD_INT 1
41500: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41501: LD_ADDR_VAR 0 5
41505: PUSH
41506: LD_VAR 0 2
41510: PPUSH
41511: CALL_OW 480
41515: ST_TO_ADDR
// if not tmp then
41516: LD_VAR 0 5
41520: NOT
41521: IFFALSE 41525
// exit ;
41523: GO 41574
// for i in tmp do
41525: LD_ADDR_VAR 0 4
41529: PUSH
41530: LD_VAR 0 5
41534: PUSH
41535: FOR_IN
41536: IFFALSE 41572
// if GetTech ( i , side ) <> state_researched then
41538: LD_VAR 0 4
41542: PPUSH
41543: LD_VAR 0 1
41547: PPUSH
41548: CALL_OW 321
41552: PUSH
41553: LD_INT 2
41555: NONEQUAL
41556: IFFALSE 41570
// begin result := false ;
41558: LD_ADDR_VAR 0 3
41562: PUSH
41563: LD_INT 0
41565: ST_TO_ADDR
// exit ;
41566: POP
41567: POP
41568: GO 41574
// end ;
41570: GO 41535
41572: POP
41573: POP
// end ;
41574: LD_VAR 0 3
41578: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41579: LD_INT 0
41581: PPUSH
41582: PPUSH
41583: PPUSH
41584: PPUSH
41585: PPUSH
41586: PPUSH
41587: PPUSH
41588: PPUSH
41589: PPUSH
41590: PPUSH
41591: PPUSH
41592: PPUSH
41593: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41594: LD_VAR 0 1
41598: NOT
41599: PUSH
41600: LD_VAR 0 1
41604: PPUSH
41605: CALL_OW 257
41609: PUSH
41610: LD_INT 9
41612: NONEQUAL
41613: OR
41614: IFFALSE 41618
// exit ;
41616: GO 42191
// side := GetSide ( unit ) ;
41618: LD_ADDR_VAR 0 9
41622: PUSH
41623: LD_VAR 0 1
41627: PPUSH
41628: CALL_OW 255
41632: ST_TO_ADDR
// tech_space := tech_spacanom ;
41633: LD_ADDR_VAR 0 12
41637: PUSH
41638: LD_INT 29
41640: ST_TO_ADDR
// tech_time := tech_taurad ;
41641: LD_ADDR_VAR 0 13
41645: PUSH
41646: LD_INT 28
41648: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41649: LD_ADDR_VAR 0 11
41653: PUSH
41654: LD_VAR 0 1
41658: PPUSH
41659: CALL_OW 310
41663: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41664: LD_VAR 0 11
41668: PPUSH
41669: CALL_OW 247
41673: PUSH
41674: LD_INT 2
41676: EQUAL
41677: IFFALSE 41681
// exit ;
41679: GO 42191
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41681: LD_ADDR_VAR 0 8
41685: PUSH
41686: LD_INT 81
41688: PUSH
41689: LD_VAR 0 9
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 3
41700: PUSH
41701: LD_INT 21
41703: PUSH
41704: LD_INT 3
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PPUSH
41719: CALL_OW 69
41723: ST_TO_ADDR
// if not tmp then
41724: LD_VAR 0 8
41728: NOT
41729: IFFALSE 41733
// exit ;
41731: GO 42191
// if in_unit then
41733: LD_VAR 0 11
41737: IFFALSE 41761
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41739: LD_ADDR_VAR 0 10
41743: PUSH
41744: LD_VAR 0 8
41748: PPUSH
41749: LD_VAR 0 11
41753: PPUSH
41754: CALL_OW 74
41758: ST_TO_ADDR
41759: GO 41781
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41761: LD_ADDR_VAR 0 10
41765: PUSH
41766: LD_VAR 0 8
41770: PPUSH
41771: LD_VAR 0 1
41775: PPUSH
41776: CALL_OW 74
41780: ST_TO_ADDR
// if not enemy then
41781: LD_VAR 0 10
41785: NOT
41786: IFFALSE 41790
// exit ;
41788: GO 42191
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41790: LD_VAR 0 11
41794: PUSH
41795: LD_VAR 0 11
41799: PPUSH
41800: LD_VAR 0 10
41804: PPUSH
41805: CALL_OW 296
41809: PUSH
41810: LD_INT 13
41812: GREATER
41813: AND
41814: PUSH
41815: LD_VAR 0 1
41819: PPUSH
41820: LD_VAR 0 10
41824: PPUSH
41825: CALL_OW 296
41829: PUSH
41830: LD_INT 12
41832: GREATER
41833: OR
41834: IFFALSE 41838
// exit ;
41836: GO 42191
// missile := [ 1 ] ;
41838: LD_ADDR_VAR 0 14
41842: PUSH
41843: LD_INT 1
41845: PUSH
41846: EMPTY
41847: LIST
41848: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41849: LD_VAR 0 9
41853: PPUSH
41854: LD_VAR 0 12
41858: PPUSH
41859: CALL_OW 325
41863: IFFALSE 41892
// missile := Replace ( missile , missile + 1 , 2 ) ;
41865: LD_ADDR_VAR 0 14
41869: PUSH
41870: LD_VAR 0 14
41874: PPUSH
41875: LD_VAR 0 14
41879: PUSH
41880: LD_INT 1
41882: PLUS
41883: PPUSH
41884: LD_INT 2
41886: PPUSH
41887: CALL_OW 1
41891: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41892: LD_VAR 0 9
41896: PPUSH
41897: LD_VAR 0 13
41901: PPUSH
41902: CALL_OW 325
41906: PUSH
41907: LD_VAR 0 10
41911: PPUSH
41912: CALL_OW 255
41916: PPUSH
41917: LD_VAR 0 13
41921: PPUSH
41922: CALL_OW 325
41926: NOT
41927: AND
41928: IFFALSE 41957
// missile := Replace ( missile , missile + 1 , 3 ) ;
41930: LD_ADDR_VAR 0 14
41934: PUSH
41935: LD_VAR 0 14
41939: PPUSH
41940: LD_VAR 0 14
41944: PUSH
41945: LD_INT 1
41947: PLUS
41948: PPUSH
41949: LD_INT 3
41951: PPUSH
41952: CALL_OW 1
41956: ST_TO_ADDR
// if missile < 2 then
41957: LD_VAR 0 14
41961: PUSH
41962: LD_INT 2
41964: LESS
41965: IFFALSE 41969
// exit ;
41967: GO 42191
// x := GetX ( enemy ) ;
41969: LD_ADDR_VAR 0 4
41973: PUSH
41974: LD_VAR 0 10
41978: PPUSH
41979: CALL_OW 250
41983: ST_TO_ADDR
// y := GetY ( enemy ) ;
41984: LD_ADDR_VAR 0 5
41988: PUSH
41989: LD_VAR 0 10
41993: PPUSH
41994: CALL_OW 251
41998: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41999: LD_ADDR_VAR 0 6
42003: PUSH
42004: LD_VAR 0 4
42008: PUSH
42009: LD_INT 1
42011: NEG
42012: PPUSH
42013: LD_INT 1
42015: PPUSH
42016: CALL_OW 12
42020: PLUS
42021: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42022: LD_ADDR_VAR 0 7
42026: PUSH
42027: LD_VAR 0 5
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PPUSH
42036: LD_INT 1
42038: PPUSH
42039: CALL_OW 12
42043: PLUS
42044: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42045: LD_VAR 0 6
42049: PPUSH
42050: LD_VAR 0 7
42054: PPUSH
42055: CALL_OW 488
42059: NOT
42060: IFFALSE 42082
// begin _x := x ;
42062: LD_ADDR_VAR 0 6
42066: PUSH
42067: LD_VAR 0 4
42071: ST_TO_ADDR
// _y := y ;
42072: LD_ADDR_VAR 0 7
42076: PUSH
42077: LD_VAR 0 5
42081: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42082: LD_ADDR_VAR 0 3
42086: PUSH
42087: LD_INT 1
42089: PPUSH
42090: LD_VAR 0 14
42094: PPUSH
42095: CALL_OW 12
42099: ST_TO_ADDR
// case i of 1 :
42100: LD_VAR 0 3
42104: PUSH
42105: LD_INT 1
42107: DOUBLE
42108: EQUAL
42109: IFTRUE 42113
42111: GO 42130
42113: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42114: LD_VAR 0 1
42118: PPUSH
42119: LD_VAR 0 10
42123: PPUSH
42124: CALL_OW 115
42128: GO 42191
42130: LD_INT 2
42132: DOUBLE
42133: EQUAL
42134: IFTRUE 42138
42136: GO 42160
42138: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42139: LD_VAR 0 1
42143: PPUSH
42144: LD_VAR 0 6
42148: PPUSH
42149: LD_VAR 0 7
42153: PPUSH
42154: CALL_OW 153
42158: GO 42191
42160: LD_INT 3
42162: DOUBLE
42163: EQUAL
42164: IFTRUE 42168
42166: GO 42190
42168: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42169: LD_VAR 0 1
42173: PPUSH
42174: LD_VAR 0 6
42178: PPUSH
42179: LD_VAR 0 7
42183: PPUSH
42184: CALL_OW 154
42188: GO 42191
42190: POP
// end ;
42191: LD_VAR 0 2
42195: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42196: LD_INT 0
42198: PPUSH
42199: PPUSH
42200: PPUSH
42201: PPUSH
42202: PPUSH
42203: PPUSH
// if not unit or not building then
42204: LD_VAR 0 1
42208: NOT
42209: PUSH
42210: LD_VAR 0 2
42214: NOT
42215: OR
42216: IFFALSE 42220
// exit ;
42218: GO 42378
// x := GetX ( building ) ;
42220: LD_ADDR_VAR 0 5
42224: PUSH
42225: LD_VAR 0 2
42229: PPUSH
42230: CALL_OW 250
42234: ST_TO_ADDR
// y := GetY ( building ) ;
42235: LD_ADDR_VAR 0 6
42239: PUSH
42240: LD_VAR 0 2
42244: PPUSH
42245: CALL_OW 251
42249: ST_TO_ADDR
// for i = 0 to 5 do
42250: LD_ADDR_VAR 0 4
42254: PUSH
42255: DOUBLE
42256: LD_INT 0
42258: DEC
42259: ST_TO_ADDR
42260: LD_INT 5
42262: PUSH
42263: FOR_TO
42264: IFFALSE 42376
// begin _x := ShiftX ( x , i , 3 ) ;
42266: LD_ADDR_VAR 0 7
42270: PUSH
42271: LD_VAR 0 5
42275: PPUSH
42276: LD_VAR 0 4
42280: PPUSH
42281: LD_INT 3
42283: PPUSH
42284: CALL_OW 272
42288: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42289: LD_ADDR_VAR 0 8
42293: PUSH
42294: LD_VAR 0 6
42298: PPUSH
42299: LD_VAR 0 4
42303: PPUSH
42304: LD_INT 3
42306: PPUSH
42307: CALL_OW 273
42311: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42312: LD_VAR 0 7
42316: PPUSH
42317: LD_VAR 0 8
42321: PPUSH
42322: CALL_OW 488
42326: NOT
42327: IFFALSE 42331
// continue ;
42329: GO 42263
// if HexInfo ( _x , _y ) = 0 then
42331: LD_VAR 0 7
42335: PPUSH
42336: LD_VAR 0 8
42340: PPUSH
42341: CALL_OW 428
42345: PUSH
42346: LD_INT 0
42348: EQUAL
42349: IFFALSE 42374
// begin ComMoveXY ( unit , _x , _y ) ;
42351: LD_VAR 0 1
42355: PPUSH
42356: LD_VAR 0 7
42360: PPUSH
42361: LD_VAR 0 8
42365: PPUSH
42366: CALL_OW 111
// exit ;
42370: POP
42371: POP
42372: GO 42378
// end ; end ;
42374: GO 42263
42376: POP
42377: POP
// end ;
42378: LD_VAR 0 3
42382: RET
// export function ScanBase ( side , base_area ) ; begin
42383: LD_INT 0
42385: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42386: LD_ADDR_VAR 0 3
42390: PUSH
42391: LD_VAR 0 2
42395: PPUSH
42396: LD_INT 81
42398: PUSH
42399: LD_VAR 0 1
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PPUSH
42408: CALL_OW 70
42412: ST_TO_ADDR
// end ;
42413: LD_VAR 0 3
42417: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42418: LD_INT 0
42420: PPUSH
42421: PPUSH
42422: PPUSH
42423: PPUSH
// result := false ;
42424: LD_ADDR_VAR 0 2
42428: PUSH
42429: LD_INT 0
42431: ST_TO_ADDR
// side := GetSide ( unit ) ;
42432: LD_ADDR_VAR 0 3
42436: PUSH
42437: LD_VAR 0 1
42441: PPUSH
42442: CALL_OW 255
42446: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42447: LD_ADDR_VAR 0 4
42451: PUSH
42452: LD_VAR 0 1
42456: PPUSH
42457: CALL_OW 248
42461: ST_TO_ADDR
// case nat of 1 :
42462: LD_VAR 0 4
42466: PUSH
42467: LD_INT 1
42469: DOUBLE
42470: EQUAL
42471: IFTRUE 42475
42473: GO 42486
42475: POP
// tech := tech_lassight ; 2 :
42476: LD_ADDR_VAR 0 5
42480: PUSH
42481: LD_INT 12
42483: ST_TO_ADDR
42484: GO 42525
42486: LD_INT 2
42488: DOUBLE
42489: EQUAL
42490: IFTRUE 42494
42492: GO 42505
42494: POP
// tech := tech_mortar ; 3 :
42495: LD_ADDR_VAR 0 5
42499: PUSH
42500: LD_INT 41
42502: ST_TO_ADDR
42503: GO 42525
42505: LD_INT 3
42507: DOUBLE
42508: EQUAL
42509: IFTRUE 42513
42511: GO 42524
42513: POP
// tech := tech_bazooka ; end ;
42514: LD_ADDR_VAR 0 5
42518: PUSH
42519: LD_INT 44
42521: ST_TO_ADDR
42522: GO 42525
42524: POP
// if Researched ( side , tech ) then
42525: LD_VAR 0 3
42529: PPUSH
42530: LD_VAR 0 5
42534: PPUSH
42535: CALL_OW 325
42539: IFFALSE 42566
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42541: LD_ADDR_VAR 0 2
42545: PUSH
42546: LD_INT 5
42548: PUSH
42549: LD_INT 8
42551: PUSH
42552: LD_INT 9
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: PUSH
42560: LD_VAR 0 4
42564: ARRAY
42565: ST_TO_ADDR
// end ;
42566: LD_VAR 0 2
42570: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42571: LD_INT 0
42573: PPUSH
42574: PPUSH
42575: PPUSH
// if not mines then
42576: LD_VAR 0 2
42580: NOT
42581: IFFALSE 42585
// exit ;
42583: GO 42729
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42585: LD_ADDR_VAR 0 5
42589: PUSH
42590: LD_INT 81
42592: PUSH
42593: LD_VAR 0 1
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 3
42604: PUSH
42605: LD_INT 21
42607: PUSH
42608: LD_INT 3
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PPUSH
42623: CALL_OW 69
42627: ST_TO_ADDR
// for i in mines do
42628: LD_ADDR_VAR 0 4
42632: PUSH
42633: LD_VAR 0 2
42637: PUSH
42638: FOR_IN
42639: IFFALSE 42727
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42641: LD_VAR 0 4
42645: PUSH
42646: LD_INT 1
42648: ARRAY
42649: PPUSH
42650: LD_VAR 0 4
42654: PUSH
42655: LD_INT 2
42657: ARRAY
42658: PPUSH
42659: CALL_OW 458
42663: NOT
42664: IFFALSE 42668
// continue ;
42666: GO 42638
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42668: LD_VAR 0 4
42672: PUSH
42673: LD_INT 1
42675: ARRAY
42676: PPUSH
42677: LD_VAR 0 4
42681: PUSH
42682: LD_INT 2
42684: ARRAY
42685: PPUSH
42686: CALL_OW 428
42690: PUSH
42691: LD_VAR 0 5
42695: IN
42696: IFFALSE 42725
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42698: LD_VAR 0 4
42702: PUSH
42703: LD_INT 1
42705: ARRAY
42706: PPUSH
42707: LD_VAR 0 4
42711: PUSH
42712: LD_INT 2
42714: ARRAY
42715: PPUSH
42716: LD_VAR 0 1
42720: PPUSH
42721: CALL_OW 456
// end ;
42725: GO 42638
42727: POP
42728: POP
// end ;
42729: LD_VAR 0 3
42733: RET
// export function Count ( array ) ; begin
42734: LD_INT 0
42736: PPUSH
// result := array + 0 ;
42737: LD_ADDR_VAR 0 2
42741: PUSH
42742: LD_VAR 0 1
42746: PUSH
42747: LD_INT 0
42749: PLUS
42750: ST_TO_ADDR
// end ;
42751: LD_VAR 0 2
42755: RET
// export function IsEmpty ( building ) ; begin
42756: LD_INT 0
42758: PPUSH
// if not building then
42759: LD_VAR 0 1
42763: NOT
42764: IFFALSE 42768
// exit ;
42766: GO 42811
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42768: LD_ADDR_VAR 0 2
42772: PUSH
42773: LD_VAR 0 1
42777: PUSH
42778: LD_INT 22
42780: PUSH
42781: LD_VAR 0 1
42785: PPUSH
42786: CALL_OW 255
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 58
42797: PUSH
42798: EMPTY
42799: LIST
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PPUSH
42805: CALL_OW 69
42809: IN
42810: ST_TO_ADDR
// end ;
42811: LD_VAR 0 2
42815: RET
// export function IsNotFull ( building ) ; var places ; begin
42816: LD_INT 0
42818: PPUSH
42819: PPUSH
// if not building then
42820: LD_VAR 0 1
42824: NOT
42825: IFFALSE 42829
// exit ;
42827: GO 42857
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42829: LD_ADDR_VAR 0 2
42833: PUSH
42834: LD_VAR 0 1
42838: PPUSH
42839: LD_INT 3
42841: PUSH
42842: LD_INT 62
42844: PUSH
42845: EMPTY
42846: LIST
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PPUSH
42852: CALL_OW 72
42856: ST_TO_ADDR
// end ;
42857: LD_VAR 0 2
42861: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42862: LD_INT 0
42864: PPUSH
42865: PPUSH
42866: PPUSH
42867: PPUSH
// tmp := [ ] ;
42868: LD_ADDR_VAR 0 3
42872: PUSH
42873: EMPTY
42874: ST_TO_ADDR
// list := [ ] ;
42875: LD_ADDR_VAR 0 5
42879: PUSH
42880: EMPTY
42881: ST_TO_ADDR
// for i = 16 to 25 do
42882: LD_ADDR_VAR 0 4
42886: PUSH
42887: DOUBLE
42888: LD_INT 16
42890: DEC
42891: ST_TO_ADDR
42892: LD_INT 25
42894: PUSH
42895: FOR_TO
42896: IFFALSE 42969
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42898: LD_ADDR_VAR 0 3
42902: PUSH
42903: LD_VAR 0 3
42907: PUSH
42908: LD_INT 22
42910: PUSH
42911: LD_VAR 0 1
42915: PPUSH
42916: CALL_OW 255
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 91
42927: PUSH
42928: LD_VAR 0 1
42932: PUSH
42933: LD_INT 6
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 30
42943: PUSH
42944: LD_VAR 0 4
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: LIST
42957: PUSH
42958: EMPTY
42959: LIST
42960: PPUSH
42961: CALL_OW 69
42965: ADD
42966: ST_TO_ADDR
42967: GO 42895
42969: POP
42970: POP
// for i = 1 to tmp do
42971: LD_ADDR_VAR 0 4
42975: PUSH
42976: DOUBLE
42977: LD_INT 1
42979: DEC
42980: ST_TO_ADDR
42981: LD_VAR 0 3
42985: PUSH
42986: FOR_TO
42987: IFFALSE 43075
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42989: LD_ADDR_VAR 0 5
42993: PUSH
42994: LD_VAR 0 5
42998: PUSH
42999: LD_VAR 0 3
43003: PUSH
43004: LD_VAR 0 4
43008: ARRAY
43009: PPUSH
43010: CALL_OW 266
43014: PUSH
43015: LD_VAR 0 3
43019: PUSH
43020: LD_VAR 0 4
43024: ARRAY
43025: PPUSH
43026: CALL_OW 250
43030: PUSH
43031: LD_VAR 0 3
43035: PUSH
43036: LD_VAR 0 4
43040: ARRAY
43041: PPUSH
43042: CALL_OW 251
43046: PUSH
43047: LD_VAR 0 3
43051: PUSH
43052: LD_VAR 0 4
43056: ARRAY
43057: PPUSH
43058: CALL_OW 254
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: PUSH
43069: EMPTY
43070: LIST
43071: ADD
43072: ST_TO_ADDR
43073: GO 42986
43075: POP
43076: POP
// result := list ;
43077: LD_ADDR_VAR 0 2
43081: PUSH
43082: LD_VAR 0 5
43086: ST_TO_ADDR
// end ;
43087: LD_VAR 0 2
43091: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43092: LD_INT 0
43094: PPUSH
43095: PPUSH
43096: PPUSH
43097: PPUSH
43098: PPUSH
43099: PPUSH
43100: PPUSH
// if not factory then
43101: LD_VAR 0 1
43105: NOT
43106: IFFALSE 43110
// exit ;
43108: GO 43703
// if control = control_apeman then
43110: LD_VAR 0 4
43114: PUSH
43115: LD_INT 5
43117: EQUAL
43118: IFFALSE 43227
// begin tmp := UnitsInside ( factory ) ;
43120: LD_ADDR_VAR 0 8
43124: PUSH
43125: LD_VAR 0 1
43129: PPUSH
43130: CALL_OW 313
43134: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43135: LD_VAR 0 8
43139: PPUSH
43140: LD_INT 25
43142: PUSH
43143: LD_INT 12
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PPUSH
43150: CALL_OW 72
43154: NOT
43155: IFFALSE 43165
// control := control_manual ;
43157: LD_ADDR_VAR 0 4
43161: PUSH
43162: LD_INT 1
43164: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43165: LD_ADDR_VAR 0 8
43169: PUSH
43170: LD_VAR 0 1
43174: PPUSH
43175: CALL 42862 0 1
43179: ST_TO_ADDR
// if tmp then
43180: LD_VAR 0 8
43184: IFFALSE 43227
// begin for i in tmp do
43186: LD_ADDR_VAR 0 7
43190: PUSH
43191: LD_VAR 0 8
43195: PUSH
43196: FOR_IN
43197: IFFALSE 43225
// if i [ 1 ] = b_ext_radio then
43199: LD_VAR 0 7
43203: PUSH
43204: LD_INT 1
43206: ARRAY
43207: PUSH
43208: LD_INT 22
43210: EQUAL
43211: IFFALSE 43223
// begin control := control_remote ;
43213: LD_ADDR_VAR 0 4
43217: PUSH
43218: LD_INT 2
43220: ST_TO_ADDR
// break ;
43221: GO 43225
// end ;
43223: GO 43196
43225: POP
43226: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43227: LD_VAR 0 1
43231: PPUSH
43232: LD_VAR 0 2
43236: PPUSH
43237: LD_VAR 0 3
43241: PPUSH
43242: LD_VAR 0 4
43246: PPUSH
43247: LD_VAR 0 5
43251: PPUSH
43252: CALL_OW 448
43256: IFFALSE 43291
// begin result := [ chassis , engine , control , weapon ] ;
43258: LD_ADDR_VAR 0 6
43262: PUSH
43263: LD_VAR 0 2
43267: PUSH
43268: LD_VAR 0 3
43272: PUSH
43273: LD_VAR 0 4
43277: PUSH
43278: LD_VAR 0 5
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: ST_TO_ADDR
// exit ;
43289: GO 43703
// end ; _chassis := AvailableChassisList ( factory ) ;
43291: LD_ADDR_VAR 0 9
43295: PUSH
43296: LD_VAR 0 1
43300: PPUSH
43301: CALL_OW 475
43305: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43306: LD_ADDR_VAR 0 11
43310: PUSH
43311: LD_VAR 0 1
43315: PPUSH
43316: CALL_OW 476
43320: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43321: LD_ADDR_VAR 0 12
43325: PUSH
43326: LD_VAR 0 1
43330: PPUSH
43331: CALL_OW 477
43335: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43336: LD_ADDR_VAR 0 10
43340: PUSH
43341: LD_VAR 0 1
43345: PPUSH
43346: CALL_OW 478
43350: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43351: LD_VAR 0 9
43355: NOT
43356: PUSH
43357: LD_VAR 0 11
43361: NOT
43362: OR
43363: PUSH
43364: LD_VAR 0 12
43368: NOT
43369: OR
43370: PUSH
43371: LD_VAR 0 10
43375: NOT
43376: OR
43377: IFFALSE 43412
// begin result := [ chassis , engine , control , weapon ] ;
43379: LD_ADDR_VAR 0 6
43383: PUSH
43384: LD_VAR 0 2
43388: PUSH
43389: LD_VAR 0 3
43393: PUSH
43394: LD_VAR 0 4
43398: PUSH
43399: LD_VAR 0 5
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: ST_TO_ADDR
// exit ;
43410: GO 43703
// end ; if not chassis in _chassis then
43412: LD_VAR 0 2
43416: PUSH
43417: LD_VAR 0 9
43421: IN
43422: NOT
43423: IFFALSE 43449
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43425: LD_ADDR_VAR 0 2
43429: PUSH
43430: LD_VAR 0 9
43434: PUSH
43435: LD_INT 1
43437: PPUSH
43438: LD_VAR 0 9
43442: PPUSH
43443: CALL_OW 12
43447: ARRAY
43448: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43449: LD_VAR 0 2
43453: PPUSH
43454: LD_VAR 0 3
43458: PPUSH
43459: CALL 43708 0 2
43463: NOT
43464: IFFALSE 43523
// repeat engine := _engine [ 1 ] ;
43466: LD_ADDR_VAR 0 3
43470: PUSH
43471: LD_VAR 0 11
43475: PUSH
43476: LD_INT 1
43478: ARRAY
43479: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43480: LD_ADDR_VAR 0 11
43484: PUSH
43485: LD_VAR 0 11
43489: PPUSH
43490: LD_INT 1
43492: PPUSH
43493: CALL_OW 3
43497: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43498: LD_VAR 0 2
43502: PPUSH
43503: LD_VAR 0 3
43507: PPUSH
43508: CALL 43708 0 2
43512: PUSH
43513: LD_VAR 0 11
43517: PUSH
43518: EMPTY
43519: EQUAL
43520: OR
43521: IFFALSE 43466
// if not control in _control then
43523: LD_VAR 0 4
43527: PUSH
43528: LD_VAR 0 12
43532: IN
43533: NOT
43534: IFFALSE 43560
// control := _control [ rand ( 1 , _control ) ] ;
43536: LD_ADDR_VAR 0 4
43540: PUSH
43541: LD_VAR 0 12
43545: PUSH
43546: LD_INT 1
43548: PPUSH
43549: LD_VAR 0 12
43553: PPUSH
43554: CALL_OW 12
43558: ARRAY
43559: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43560: LD_VAR 0 2
43564: PPUSH
43565: LD_VAR 0 5
43569: PPUSH
43570: CALL 43928 0 2
43574: NOT
43575: IFFALSE 43634
// repeat weapon := _weapon [ 1 ] ;
43577: LD_ADDR_VAR 0 5
43581: PUSH
43582: LD_VAR 0 10
43586: PUSH
43587: LD_INT 1
43589: ARRAY
43590: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43591: LD_ADDR_VAR 0 10
43595: PUSH
43596: LD_VAR 0 10
43600: PPUSH
43601: LD_INT 1
43603: PPUSH
43604: CALL_OW 3
43608: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43609: LD_VAR 0 2
43613: PPUSH
43614: LD_VAR 0 5
43618: PPUSH
43619: CALL 43928 0 2
43623: PUSH
43624: LD_VAR 0 10
43628: PUSH
43629: EMPTY
43630: EQUAL
43631: OR
43632: IFFALSE 43577
// result := [ ] ;
43634: LD_ADDR_VAR 0 6
43638: PUSH
43639: EMPTY
43640: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43641: LD_VAR 0 1
43645: PPUSH
43646: LD_VAR 0 2
43650: PPUSH
43651: LD_VAR 0 3
43655: PPUSH
43656: LD_VAR 0 4
43660: PPUSH
43661: LD_VAR 0 5
43665: PPUSH
43666: CALL_OW 448
43670: IFFALSE 43703
// result := [ chassis , engine , control , weapon ] ;
43672: LD_ADDR_VAR 0 6
43676: PUSH
43677: LD_VAR 0 2
43681: PUSH
43682: LD_VAR 0 3
43686: PUSH
43687: LD_VAR 0 4
43691: PUSH
43692: LD_VAR 0 5
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: ST_TO_ADDR
// end ;
43703: LD_VAR 0 6
43707: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43708: LD_INT 0
43710: PPUSH
// if not chassis or not engine then
43711: LD_VAR 0 1
43715: NOT
43716: PUSH
43717: LD_VAR 0 2
43721: NOT
43722: OR
43723: IFFALSE 43727
// exit ;
43725: GO 43923
// case engine of engine_solar :
43727: LD_VAR 0 2
43731: PUSH
43732: LD_INT 2
43734: DOUBLE
43735: EQUAL
43736: IFTRUE 43740
43738: GO 43778
43740: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43741: LD_ADDR_VAR 0 3
43745: PUSH
43746: LD_INT 11
43748: PUSH
43749: LD_INT 12
43751: PUSH
43752: LD_INT 13
43754: PUSH
43755: LD_INT 14
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: LD_INT 2
43763: PUSH
43764: LD_INT 3
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: ST_TO_ADDR
43776: GO 43907
43778: LD_INT 1
43780: DOUBLE
43781: EQUAL
43782: IFTRUE 43786
43784: GO 43848
43786: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43787: LD_ADDR_VAR 0 3
43791: PUSH
43792: LD_INT 11
43794: PUSH
43795: LD_INT 12
43797: PUSH
43798: LD_INT 13
43800: PUSH
43801: LD_INT 14
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: LD_INT 3
43812: PUSH
43813: LD_INT 4
43815: PUSH
43816: LD_INT 5
43818: PUSH
43819: LD_INT 21
43821: PUSH
43822: LD_INT 23
43824: PUSH
43825: LD_INT 22
43827: PUSH
43828: LD_INT 24
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: ST_TO_ADDR
43846: GO 43907
43848: LD_INT 3
43850: DOUBLE
43851: EQUAL
43852: IFTRUE 43856
43854: GO 43906
43856: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43857: LD_ADDR_VAR 0 3
43861: PUSH
43862: LD_INT 13
43864: PUSH
43865: LD_INT 14
43867: PUSH
43868: LD_INT 2
43870: PUSH
43871: LD_INT 3
43873: PUSH
43874: LD_INT 4
43876: PUSH
43877: LD_INT 5
43879: PUSH
43880: LD_INT 21
43882: PUSH
43883: LD_INT 22
43885: PUSH
43886: LD_INT 23
43888: PUSH
43889: LD_INT 24
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: ST_TO_ADDR
43904: GO 43907
43906: POP
// result := ( chassis in result ) ;
43907: LD_ADDR_VAR 0 3
43911: PUSH
43912: LD_VAR 0 1
43916: PUSH
43917: LD_VAR 0 3
43921: IN
43922: ST_TO_ADDR
// end ;
43923: LD_VAR 0 3
43927: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43928: LD_INT 0
43930: PPUSH
// if not chassis or not weapon then
43931: LD_VAR 0 1
43935: NOT
43936: PUSH
43937: LD_VAR 0 2
43941: NOT
43942: OR
43943: IFFALSE 43947
// exit ;
43945: GO 45007
// case weapon of us_machine_gun :
43947: LD_VAR 0 2
43951: PUSH
43952: LD_INT 2
43954: DOUBLE
43955: EQUAL
43956: IFTRUE 43960
43958: GO 43990
43960: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43961: LD_ADDR_VAR 0 3
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: LD_INT 2
43971: PUSH
43972: LD_INT 3
43974: PUSH
43975: LD_INT 4
43977: PUSH
43978: LD_INT 5
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: ST_TO_ADDR
43988: GO 44991
43990: LD_INT 3
43992: DOUBLE
43993: EQUAL
43994: IFTRUE 43998
43996: GO 44028
43998: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43999: LD_ADDR_VAR 0 3
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: LD_INT 2
44009: PUSH
44010: LD_INT 3
44012: PUSH
44013: LD_INT 4
44015: PUSH
44016: LD_INT 5
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: ST_TO_ADDR
44026: GO 44991
44028: LD_INT 11
44030: DOUBLE
44031: EQUAL
44032: IFTRUE 44036
44034: GO 44066
44036: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44037: LD_ADDR_VAR 0 3
44041: PUSH
44042: LD_INT 1
44044: PUSH
44045: LD_INT 2
44047: PUSH
44048: LD_INT 3
44050: PUSH
44051: LD_INT 4
44053: PUSH
44054: LD_INT 5
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: ST_TO_ADDR
44064: GO 44991
44066: LD_INT 4
44068: DOUBLE
44069: EQUAL
44070: IFTRUE 44074
44072: GO 44100
44074: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44075: LD_ADDR_VAR 0 3
44079: PUSH
44080: LD_INT 2
44082: PUSH
44083: LD_INT 3
44085: PUSH
44086: LD_INT 4
44088: PUSH
44089: LD_INT 5
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: ST_TO_ADDR
44098: GO 44991
44100: LD_INT 5
44102: DOUBLE
44103: EQUAL
44104: IFTRUE 44108
44106: GO 44134
44108: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44109: LD_ADDR_VAR 0 3
44113: PUSH
44114: LD_INT 2
44116: PUSH
44117: LD_INT 3
44119: PUSH
44120: LD_INT 4
44122: PUSH
44123: LD_INT 5
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: ST_TO_ADDR
44132: GO 44991
44134: LD_INT 9
44136: DOUBLE
44137: EQUAL
44138: IFTRUE 44142
44140: GO 44168
44142: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44143: LD_ADDR_VAR 0 3
44147: PUSH
44148: LD_INT 2
44150: PUSH
44151: LD_INT 3
44153: PUSH
44154: LD_INT 4
44156: PUSH
44157: LD_INT 5
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: ST_TO_ADDR
44166: GO 44991
44168: LD_INT 7
44170: DOUBLE
44171: EQUAL
44172: IFTRUE 44176
44174: GO 44202
44176: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44177: LD_ADDR_VAR 0 3
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: LD_INT 3
44187: PUSH
44188: LD_INT 4
44190: PUSH
44191: LD_INT 5
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: ST_TO_ADDR
44200: GO 44991
44202: LD_INT 12
44204: DOUBLE
44205: EQUAL
44206: IFTRUE 44210
44208: GO 44236
44210: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44211: LD_ADDR_VAR 0 3
44215: PUSH
44216: LD_INT 2
44218: PUSH
44219: LD_INT 3
44221: PUSH
44222: LD_INT 4
44224: PUSH
44225: LD_INT 5
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: ST_TO_ADDR
44234: GO 44991
44236: LD_INT 13
44238: DOUBLE
44239: EQUAL
44240: IFTRUE 44244
44242: GO 44270
44244: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44245: LD_ADDR_VAR 0 3
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: LD_INT 3
44255: PUSH
44256: LD_INT 4
44258: PUSH
44259: LD_INT 5
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: ST_TO_ADDR
44268: GO 44991
44270: LD_INT 14
44272: DOUBLE
44273: EQUAL
44274: IFTRUE 44278
44276: GO 44296
44278: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44279: LD_ADDR_VAR 0 3
44283: PUSH
44284: LD_INT 4
44286: PUSH
44287: LD_INT 5
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: ST_TO_ADDR
44294: GO 44991
44296: LD_INT 6
44298: DOUBLE
44299: EQUAL
44300: IFTRUE 44304
44302: GO 44322
44304: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44305: LD_ADDR_VAR 0 3
44309: PUSH
44310: LD_INT 4
44312: PUSH
44313: LD_INT 5
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: ST_TO_ADDR
44320: GO 44991
44322: LD_INT 10
44324: DOUBLE
44325: EQUAL
44326: IFTRUE 44330
44328: GO 44348
44330: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44331: LD_ADDR_VAR 0 3
44335: PUSH
44336: LD_INT 4
44338: PUSH
44339: LD_INT 5
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: ST_TO_ADDR
44346: GO 44991
44348: LD_INT 22
44350: DOUBLE
44351: EQUAL
44352: IFTRUE 44356
44354: GO 44382
44356: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44357: LD_ADDR_VAR 0 3
44361: PUSH
44362: LD_INT 11
44364: PUSH
44365: LD_INT 12
44367: PUSH
44368: LD_INT 13
44370: PUSH
44371: LD_INT 14
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: ST_TO_ADDR
44380: GO 44991
44382: LD_INT 23
44384: DOUBLE
44385: EQUAL
44386: IFTRUE 44390
44388: GO 44416
44390: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44391: LD_ADDR_VAR 0 3
44395: PUSH
44396: LD_INT 11
44398: PUSH
44399: LD_INT 12
44401: PUSH
44402: LD_INT 13
44404: PUSH
44405: LD_INT 14
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: ST_TO_ADDR
44414: GO 44991
44416: LD_INT 24
44418: DOUBLE
44419: EQUAL
44420: IFTRUE 44424
44422: GO 44450
44424: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44425: LD_ADDR_VAR 0 3
44429: PUSH
44430: LD_INT 11
44432: PUSH
44433: LD_INT 12
44435: PUSH
44436: LD_INT 13
44438: PUSH
44439: LD_INT 14
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: ST_TO_ADDR
44448: GO 44991
44450: LD_INT 30
44452: DOUBLE
44453: EQUAL
44454: IFTRUE 44458
44456: GO 44484
44458: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44459: LD_ADDR_VAR 0 3
44463: PUSH
44464: LD_INT 11
44466: PUSH
44467: LD_INT 12
44469: PUSH
44470: LD_INT 13
44472: PUSH
44473: LD_INT 14
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: ST_TO_ADDR
44482: GO 44991
44484: LD_INT 25
44486: DOUBLE
44487: EQUAL
44488: IFTRUE 44492
44490: GO 44510
44492: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44493: LD_ADDR_VAR 0 3
44497: PUSH
44498: LD_INT 13
44500: PUSH
44501: LD_INT 14
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: ST_TO_ADDR
44508: GO 44991
44510: LD_INT 27
44512: DOUBLE
44513: EQUAL
44514: IFTRUE 44518
44516: GO 44536
44518: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44519: LD_ADDR_VAR 0 3
44523: PUSH
44524: LD_INT 13
44526: PUSH
44527: LD_INT 14
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: ST_TO_ADDR
44534: GO 44991
44536: LD_INT 92
44538: DOUBLE
44539: EQUAL
44540: IFTRUE 44544
44542: GO 44570
44544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44545: LD_ADDR_VAR 0 3
44549: PUSH
44550: LD_INT 11
44552: PUSH
44553: LD_INT 12
44555: PUSH
44556: LD_INT 13
44558: PUSH
44559: LD_INT 14
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: ST_TO_ADDR
44568: GO 44991
44570: LD_INT 28
44572: DOUBLE
44573: EQUAL
44574: IFTRUE 44578
44576: GO 44596
44578: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44579: LD_ADDR_VAR 0 3
44583: PUSH
44584: LD_INT 13
44586: PUSH
44587: LD_INT 14
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: ST_TO_ADDR
44594: GO 44991
44596: LD_INT 29
44598: DOUBLE
44599: EQUAL
44600: IFTRUE 44604
44602: GO 44622
44604: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44605: LD_ADDR_VAR 0 3
44609: PUSH
44610: LD_INT 13
44612: PUSH
44613: LD_INT 14
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: ST_TO_ADDR
44620: GO 44991
44622: LD_INT 31
44624: DOUBLE
44625: EQUAL
44626: IFTRUE 44630
44628: GO 44648
44630: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44631: LD_ADDR_VAR 0 3
44635: PUSH
44636: LD_INT 13
44638: PUSH
44639: LD_INT 14
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: ST_TO_ADDR
44646: GO 44991
44648: LD_INT 26
44650: DOUBLE
44651: EQUAL
44652: IFTRUE 44656
44654: GO 44674
44656: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44657: LD_ADDR_VAR 0 3
44661: PUSH
44662: LD_INT 13
44664: PUSH
44665: LD_INT 14
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: ST_TO_ADDR
44672: GO 44991
44674: LD_INT 42
44676: DOUBLE
44677: EQUAL
44678: IFTRUE 44682
44680: GO 44708
44682: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44683: LD_ADDR_VAR 0 3
44687: PUSH
44688: LD_INT 21
44690: PUSH
44691: LD_INT 22
44693: PUSH
44694: LD_INT 23
44696: PUSH
44697: LD_INT 24
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: ST_TO_ADDR
44706: GO 44991
44708: LD_INT 43
44710: DOUBLE
44711: EQUAL
44712: IFTRUE 44716
44714: GO 44742
44716: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44717: LD_ADDR_VAR 0 3
44721: PUSH
44722: LD_INT 21
44724: PUSH
44725: LD_INT 22
44727: PUSH
44728: LD_INT 23
44730: PUSH
44731: LD_INT 24
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: ST_TO_ADDR
44740: GO 44991
44742: LD_INT 44
44744: DOUBLE
44745: EQUAL
44746: IFTRUE 44750
44748: GO 44776
44750: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44751: LD_ADDR_VAR 0 3
44755: PUSH
44756: LD_INT 21
44758: PUSH
44759: LD_INT 22
44761: PUSH
44762: LD_INT 23
44764: PUSH
44765: LD_INT 24
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: ST_TO_ADDR
44774: GO 44991
44776: LD_INT 45
44778: DOUBLE
44779: EQUAL
44780: IFTRUE 44784
44782: GO 44810
44784: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44785: LD_ADDR_VAR 0 3
44789: PUSH
44790: LD_INT 21
44792: PUSH
44793: LD_INT 22
44795: PUSH
44796: LD_INT 23
44798: PUSH
44799: LD_INT 24
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: ST_TO_ADDR
44808: GO 44991
44810: LD_INT 49
44812: DOUBLE
44813: EQUAL
44814: IFTRUE 44818
44816: GO 44844
44818: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44819: LD_ADDR_VAR 0 3
44823: PUSH
44824: LD_INT 21
44826: PUSH
44827: LD_INT 22
44829: PUSH
44830: LD_INT 23
44832: PUSH
44833: LD_INT 24
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: ST_TO_ADDR
44842: GO 44991
44844: LD_INT 51
44846: DOUBLE
44847: EQUAL
44848: IFTRUE 44852
44850: GO 44878
44852: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44853: LD_ADDR_VAR 0 3
44857: PUSH
44858: LD_INT 21
44860: PUSH
44861: LD_INT 22
44863: PUSH
44864: LD_INT 23
44866: PUSH
44867: LD_INT 24
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: ST_TO_ADDR
44876: GO 44991
44878: LD_INT 52
44880: DOUBLE
44881: EQUAL
44882: IFTRUE 44886
44884: GO 44912
44886: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44887: LD_ADDR_VAR 0 3
44891: PUSH
44892: LD_INT 21
44894: PUSH
44895: LD_INT 22
44897: PUSH
44898: LD_INT 23
44900: PUSH
44901: LD_INT 24
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: ST_TO_ADDR
44910: GO 44991
44912: LD_INT 53
44914: DOUBLE
44915: EQUAL
44916: IFTRUE 44920
44918: GO 44938
44920: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44921: LD_ADDR_VAR 0 3
44925: PUSH
44926: LD_INT 23
44928: PUSH
44929: LD_INT 24
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: ST_TO_ADDR
44936: GO 44991
44938: LD_INT 46
44940: DOUBLE
44941: EQUAL
44942: IFTRUE 44946
44944: GO 44964
44946: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44947: LD_ADDR_VAR 0 3
44951: PUSH
44952: LD_INT 23
44954: PUSH
44955: LD_INT 24
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: ST_TO_ADDR
44962: GO 44991
44964: LD_INT 47
44966: DOUBLE
44967: EQUAL
44968: IFTRUE 44972
44970: GO 44990
44972: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44973: LD_ADDR_VAR 0 3
44977: PUSH
44978: LD_INT 23
44980: PUSH
44981: LD_INT 24
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: ST_TO_ADDR
44988: GO 44991
44990: POP
// result := ( chassis in result ) ;
44991: LD_ADDR_VAR 0 3
44995: PUSH
44996: LD_VAR 0 1
45000: PUSH
45001: LD_VAR 0 3
45005: IN
45006: ST_TO_ADDR
// end ;
45007: LD_VAR 0 3
45011: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45012: LD_INT 0
45014: PPUSH
45015: PPUSH
45016: PPUSH
45017: PPUSH
45018: PPUSH
45019: PPUSH
45020: PPUSH
// result := array ;
45021: LD_ADDR_VAR 0 5
45025: PUSH
45026: LD_VAR 0 1
45030: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45031: LD_VAR 0 1
45035: NOT
45036: PUSH
45037: LD_VAR 0 2
45041: NOT
45042: OR
45043: PUSH
45044: LD_VAR 0 3
45048: NOT
45049: OR
45050: PUSH
45051: LD_VAR 0 2
45055: PUSH
45056: LD_VAR 0 1
45060: GREATER
45061: OR
45062: PUSH
45063: LD_VAR 0 3
45067: PUSH
45068: LD_VAR 0 1
45072: GREATER
45073: OR
45074: IFFALSE 45078
// exit ;
45076: GO 45374
// if direction then
45078: LD_VAR 0 4
45082: IFFALSE 45146
// begin d := 1 ;
45084: LD_ADDR_VAR 0 9
45088: PUSH
45089: LD_INT 1
45091: ST_TO_ADDR
// if i_from > i_to then
45092: LD_VAR 0 2
45096: PUSH
45097: LD_VAR 0 3
45101: GREATER
45102: IFFALSE 45128
// length := ( array - i_from ) + i_to else
45104: LD_ADDR_VAR 0 11
45108: PUSH
45109: LD_VAR 0 1
45113: PUSH
45114: LD_VAR 0 2
45118: MINUS
45119: PUSH
45120: LD_VAR 0 3
45124: PLUS
45125: ST_TO_ADDR
45126: GO 45144
// length := i_to - i_from ;
45128: LD_ADDR_VAR 0 11
45132: PUSH
45133: LD_VAR 0 3
45137: PUSH
45138: LD_VAR 0 2
45142: MINUS
45143: ST_TO_ADDR
// end else
45144: GO 45207
// begin d := - 1 ;
45146: LD_ADDR_VAR 0 9
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: ST_TO_ADDR
// if i_from > i_to then
45155: LD_VAR 0 2
45159: PUSH
45160: LD_VAR 0 3
45164: GREATER
45165: IFFALSE 45185
// length := i_from - i_to else
45167: LD_ADDR_VAR 0 11
45171: PUSH
45172: LD_VAR 0 2
45176: PUSH
45177: LD_VAR 0 3
45181: MINUS
45182: ST_TO_ADDR
45183: GO 45207
// length := ( array - i_to ) + i_from ;
45185: LD_ADDR_VAR 0 11
45189: PUSH
45190: LD_VAR 0 1
45194: PUSH
45195: LD_VAR 0 3
45199: MINUS
45200: PUSH
45201: LD_VAR 0 2
45205: PLUS
45206: ST_TO_ADDR
// end ; if not length then
45207: LD_VAR 0 11
45211: NOT
45212: IFFALSE 45216
// exit ;
45214: GO 45374
// tmp := array ;
45216: LD_ADDR_VAR 0 10
45220: PUSH
45221: LD_VAR 0 1
45225: ST_TO_ADDR
// for i = 1 to length do
45226: LD_ADDR_VAR 0 6
45230: PUSH
45231: DOUBLE
45232: LD_INT 1
45234: DEC
45235: ST_TO_ADDR
45236: LD_VAR 0 11
45240: PUSH
45241: FOR_TO
45242: IFFALSE 45362
// begin for j = 1 to array do
45244: LD_ADDR_VAR 0 7
45248: PUSH
45249: DOUBLE
45250: LD_INT 1
45252: DEC
45253: ST_TO_ADDR
45254: LD_VAR 0 1
45258: PUSH
45259: FOR_TO
45260: IFFALSE 45348
// begin k := j + d ;
45262: LD_ADDR_VAR 0 8
45266: PUSH
45267: LD_VAR 0 7
45271: PUSH
45272: LD_VAR 0 9
45276: PLUS
45277: ST_TO_ADDR
// if k > array then
45278: LD_VAR 0 8
45282: PUSH
45283: LD_VAR 0 1
45287: GREATER
45288: IFFALSE 45298
// k := 1 ;
45290: LD_ADDR_VAR 0 8
45294: PUSH
45295: LD_INT 1
45297: ST_TO_ADDR
// if not k then
45298: LD_VAR 0 8
45302: NOT
45303: IFFALSE 45315
// k := array ;
45305: LD_ADDR_VAR 0 8
45309: PUSH
45310: LD_VAR 0 1
45314: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45315: LD_ADDR_VAR 0 10
45319: PUSH
45320: LD_VAR 0 10
45324: PPUSH
45325: LD_VAR 0 8
45329: PPUSH
45330: LD_VAR 0 1
45334: PUSH
45335: LD_VAR 0 7
45339: ARRAY
45340: PPUSH
45341: CALL_OW 1
45345: ST_TO_ADDR
// end ;
45346: GO 45259
45348: POP
45349: POP
// array := tmp ;
45350: LD_ADDR_VAR 0 1
45354: PUSH
45355: LD_VAR 0 10
45359: ST_TO_ADDR
// end ;
45360: GO 45241
45362: POP
45363: POP
// result := array ;
45364: LD_ADDR_VAR 0 5
45368: PUSH
45369: LD_VAR 0 1
45373: ST_TO_ADDR
// end ;
45374: LD_VAR 0 5
45378: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45379: LD_INT 0
45381: PPUSH
45382: PPUSH
// result := 0 ;
45383: LD_ADDR_VAR 0 3
45387: PUSH
45388: LD_INT 0
45390: ST_TO_ADDR
// if not array or not value in array then
45391: LD_VAR 0 1
45395: NOT
45396: PUSH
45397: LD_VAR 0 2
45401: PUSH
45402: LD_VAR 0 1
45406: IN
45407: NOT
45408: OR
45409: IFFALSE 45413
// exit ;
45411: GO 45467
// for i = 1 to array do
45413: LD_ADDR_VAR 0 4
45417: PUSH
45418: DOUBLE
45419: LD_INT 1
45421: DEC
45422: ST_TO_ADDR
45423: LD_VAR 0 1
45427: PUSH
45428: FOR_TO
45429: IFFALSE 45465
// if value = array [ i ] then
45431: LD_VAR 0 2
45435: PUSH
45436: LD_VAR 0 1
45440: PUSH
45441: LD_VAR 0 4
45445: ARRAY
45446: EQUAL
45447: IFFALSE 45463
// begin result := i ;
45449: LD_ADDR_VAR 0 3
45453: PUSH
45454: LD_VAR 0 4
45458: ST_TO_ADDR
// exit ;
45459: POP
45460: POP
45461: GO 45467
// end ;
45463: GO 45428
45465: POP
45466: POP
// end ;
45467: LD_VAR 0 3
45471: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45472: LD_INT 0
45474: PPUSH
// vc_chassis := chassis ;
45475: LD_ADDR_OWVAR 37
45479: PUSH
45480: LD_VAR 0 1
45484: ST_TO_ADDR
// vc_engine := engine ;
45485: LD_ADDR_OWVAR 39
45489: PUSH
45490: LD_VAR 0 2
45494: ST_TO_ADDR
// vc_control := control ;
45495: LD_ADDR_OWVAR 38
45499: PUSH
45500: LD_VAR 0 3
45504: ST_TO_ADDR
// vc_weapon := weapon ;
45505: LD_ADDR_OWVAR 40
45509: PUSH
45510: LD_VAR 0 4
45514: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45515: LD_ADDR_OWVAR 41
45519: PUSH
45520: LD_VAR 0 5
45524: ST_TO_ADDR
// end ;
45525: LD_VAR 0 6
45529: RET
// export function WantPlant ( unit ) ; var task ; begin
45530: LD_INT 0
45532: PPUSH
45533: PPUSH
// result := false ;
45534: LD_ADDR_VAR 0 2
45538: PUSH
45539: LD_INT 0
45541: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45542: LD_ADDR_VAR 0 3
45546: PUSH
45547: LD_VAR 0 1
45551: PPUSH
45552: CALL_OW 437
45556: ST_TO_ADDR
// if task then
45557: LD_VAR 0 3
45561: IFFALSE 45589
// if task [ 1 ] [ 1 ] = p then
45563: LD_VAR 0 3
45567: PUSH
45568: LD_INT 1
45570: ARRAY
45571: PUSH
45572: LD_INT 1
45574: ARRAY
45575: PUSH
45576: LD_STRING p
45578: EQUAL
45579: IFFALSE 45589
// result := true ;
45581: LD_ADDR_VAR 0 2
45585: PUSH
45586: LD_INT 1
45588: ST_TO_ADDR
// end ;
45589: LD_VAR 0 2
45593: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45594: LD_INT 0
45596: PPUSH
45597: PPUSH
45598: PPUSH
45599: PPUSH
// if pos < 1 then
45600: LD_VAR 0 2
45604: PUSH
45605: LD_INT 1
45607: LESS
45608: IFFALSE 45612
// exit ;
45610: GO 45915
// if pos = 1 then
45612: LD_VAR 0 2
45616: PUSH
45617: LD_INT 1
45619: EQUAL
45620: IFFALSE 45653
// result := Replace ( arr , pos [ 1 ] , value ) else
45622: LD_ADDR_VAR 0 4
45626: PUSH
45627: LD_VAR 0 1
45631: PPUSH
45632: LD_VAR 0 2
45636: PUSH
45637: LD_INT 1
45639: ARRAY
45640: PPUSH
45641: LD_VAR 0 3
45645: PPUSH
45646: CALL_OW 1
45650: ST_TO_ADDR
45651: GO 45915
// begin tmp := arr ;
45653: LD_ADDR_VAR 0 6
45657: PUSH
45658: LD_VAR 0 1
45662: ST_TO_ADDR
// s_arr := [ tmp ] ;
45663: LD_ADDR_VAR 0 7
45667: PUSH
45668: LD_VAR 0 6
45672: PUSH
45673: EMPTY
45674: LIST
45675: ST_TO_ADDR
// for i = 1 to pos - 1 do
45676: LD_ADDR_VAR 0 5
45680: PUSH
45681: DOUBLE
45682: LD_INT 1
45684: DEC
45685: ST_TO_ADDR
45686: LD_VAR 0 2
45690: PUSH
45691: LD_INT 1
45693: MINUS
45694: PUSH
45695: FOR_TO
45696: IFFALSE 45741
// begin tmp := tmp [ pos [ i ] ] ;
45698: LD_ADDR_VAR 0 6
45702: PUSH
45703: LD_VAR 0 6
45707: PUSH
45708: LD_VAR 0 2
45712: PUSH
45713: LD_VAR 0 5
45717: ARRAY
45718: ARRAY
45719: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45720: LD_ADDR_VAR 0 7
45724: PUSH
45725: LD_VAR 0 7
45729: PUSH
45730: LD_VAR 0 6
45734: PUSH
45735: EMPTY
45736: LIST
45737: ADD
45738: ST_TO_ADDR
// end ;
45739: GO 45695
45741: POP
45742: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45743: LD_ADDR_VAR 0 6
45747: PUSH
45748: LD_VAR 0 6
45752: PPUSH
45753: LD_VAR 0 2
45757: PUSH
45758: LD_VAR 0 2
45762: ARRAY
45763: PPUSH
45764: LD_VAR 0 3
45768: PPUSH
45769: CALL_OW 1
45773: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45774: LD_ADDR_VAR 0 7
45778: PUSH
45779: LD_VAR 0 7
45783: PPUSH
45784: LD_VAR 0 7
45788: PPUSH
45789: LD_VAR 0 6
45793: PPUSH
45794: CALL_OW 1
45798: ST_TO_ADDR
// for i = s_arr downto 2 do
45799: LD_ADDR_VAR 0 5
45803: PUSH
45804: DOUBLE
45805: LD_VAR 0 7
45809: INC
45810: ST_TO_ADDR
45811: LD_INT 2
45813: PUSH
45814: FOR_DOWNTO
45815: IFFALSE 45899
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45817: LD_ADDR_VAR 0 6
45821: PUSH
45822: LD_VAR 0 7
45826: PUSH
45827: LD_VAR 0 5
45831: PUSH
45832: LD_INT 1
45834: MINUS
45835: ARRAY
45836: PPUSH
45837: LD_VAR 0 2
45841: PUSH
45842: LD_VAR 0 5
45846: PUSH
45847: LD_INT 1
45849: MINUS
45850: ARRAY
45851: PPUSH
45852: LD_VAR 0 7
45856: PUSH
45857: LD_VAR 0 5
45861: ARRAY
45862: PPUSH
45863: CALL_OW 1
45867: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45868: LD_ADDR_VAR 0 7
45872: PUSH
45873: LD_VAR 0 7
45877: PPUSH
45878: LD_VAR 0 5
45882: PUSH
45883: LD_INT 1
45885: MINUS
45886: PPUSH
45887: LD_VAR 0 6
45891: PPUSH
45892: CALL_OW 1
45896: ST_TO_ADDR
// end ;
45897: GO 45814
45899: POP
45900: POP
// result := s_arr [ 1 ] ;
45901: LD_ADDR_VAR 0 4
45905: PUSH
45906: LD_VAR 0 7
45910: PUSH
45911: LD_INT 1
45913: ARRAY
45914: ST_TO_ADDR
// end ; end ;
45915: LD_VAR 0 4
45919: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45920: LD_INT 0
45922: PPUSH
45923: PPUSH
// if not list then
45924: LD_VAR 0 1
45928: NOT
45929: IFFALSE 45933
// exit ;
45931: GO 46024
// i := list [ pos1 ] ;
45933: LD_ADDR_VAR 0 5
45937: PUSH
45938: LD_VAR 0 1
45942: PUSH
45943: LD_VAR 0 2
45947: ARRAY
45948: ST_TO_ADDR
// if not i then
45949: LD_VAR 0 5
45953: NOT
45954: IFFALSE 45958
// exit ;
45956: GO 46024
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45958: LD_ADDR_VAR 0 1
45962: PUSH
45963: LD_VAR 0 1
45967: PPUSH
45968: LD_VAR 0 2
45972: PPUSH
45973: LD_VAR 0 1
45977: PUSH
45978: LD_VAR 0 3
45982: ARRAY
45983: PPUSH
45984: CALL_OW 1
45988: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45989: LD_ADDR_VAR 0 1
45993: PUSH
45994: LD_VAR 0 1
45998: PPUSH
45999: LD_VAR 0 3
46003: PPUSH
46004: LD_VAR 0 5
46008: PPUSH
46009: CALL_OW 1
46013: ST_TO_ADDR
// result := list ;
46014: LD_ADDR_VAR 0 4
46018: PUSH
46019: LD_VAR 0 1
46023: ST_TO_ADDR
// end ;
46024: LD_VAR 0 4
46028: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46029: LD_INT 0
46031: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46032: LD_ADDR_VAR 0 5
46036: PUSH
46037: LD_VAR 0 1
46041: PPUSH
46042: CALL_OW 250
46046: PPUSH
46047: LD_VAR 0 1
46051: PPUSH
46052: CALL_OW 251
46056: PPUSH
46057: LD_VAR 0 2
46061: PPUSH
46062: LD_VAR 0 3
46066: PPUSH
46067: LD_VAR 0 4
46071: PPUSH
46072: CALL 46450 0 5
46076: ST_TO_ADDR
// end ;
46077: LD_VAR 0 5
46081: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46082: LD_INT 0
46084: PPUSH
46085: PPUSH
46086: PPUSH
46087: PPUSH
// if not list or not unit then
46088: LD_VAR 0 2
46092: NOT
46093: PUSH
46094: LD_VAR 0 1
46098: NOT
46099: OR
46100: IFFALSE 46104
// exit ;
46102: GO 46445
// result := [ ] ;
46104: LD_ADDR_VAR 0 5
46108: PUSH
46109: EMPTY
46110: ST_TO_ADDR
// for i in list do
46111: LD_ADDR_VAR 0 6
46115: PUSH
46116: LD_VAR 0 2
46120: PUSH
46121: FOR_IN
46122: IFFALSE 46340
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46124: LD_ADDR_VAR 0 8
46128: PUSH
46129: LD_VAR 0 1
46133: PPUSH
46134: LD_VAR 0 6
46138: PUSH
46139: LD_INT 1
46141: ARRAY
46142: PPUSH
46143: LD_VAR 0 6
46147: PUSH
46148: LD_INT 2
46150: ARRAY
46151: PPUSH
46152: CALL_OW 297
46156: ST_TO_ADDR
// if not Count ( result ) then
46157: LD_VAR 0 5
46161: PPUSH
46162: CALL 42734 0 1
46166: NOT
46167: IFFALSE 46200
// begin result := Join ( result , [ i , tmp ] ) ;
46169: LD_ADDR_VAR 0 5
46173: PUSH
46174: LD_VAR 0 5
46178: PPUSH
46179: LD_VAR 0 6
46183: PUSH
46184: LD_VAR 0 8
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PPUSH
46193: CALL 78343 0 2
46197: ST_TO_ADDR
// continue ;
46198: GO 46121
// end ; if result [ result ] [ 2 ] <= tmp then
46200: LD_VAR 0 5
46204: PUSH
46205: LD_VAR 0 5
46209: ARRAY
46210: PUSH
46211: LD_INT 2
46213: ARRAY
46214: PUSH
46215: LD_VAR 0 8
46219: LESSEQUAL
46220: IFFALSE 46253
// result := Join ( result , [ i , tmp ] ) else
46222: LD_ADDR_VAR 0 5
46226: PUSH
46227: LD_VAR 0 5
46231: PPUSH
46232: LD_VAR 0 6
46236: PUSH
46237: LD_VAR 0 8
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PPUSH
46246: CALL 78343 0 2
46250: ST_TO_ADDR
46251: GO 46338
// begin for j := 1 to Count ( result ) do
46253: LD_ADDR_VAR 0 7
46257: PUSH
46258: DOUBLE
46259: LD_INT 1
46261: DEC
46262: ST_TO_ADDR
46263: LD_VAR 0 5
46267: PPUSH
46268: CALL 42734 0 1
46272: PUSH
46273: FOR_TO
46274: IFFALSE 46336
// begin if tmp < result [ j ] [ 2 ] then
46276: LD_VAR 0 8
46280: PUSH
46281: LD_VAR 0 5
46285: PUSH
46286: LD_VAR 0 7
46290: ARRAY
46291: PUSH
46292: LD_INT 2
46294: ARRAY
46295: LESS
46296: IFFALSE 46334
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46298: LD_ADDR_VAR 0 5
46302: PUSH
46303: LD_VAR 0 5
46307: PPUSH
46308: LD_VAR 0 7
46312: PPUSH
46313: LD_VAR 0 6
46317: PUSH
46318: LD_VAR 0 8
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PPUSH
46327: CALL_OW 2
46331: ST_TO_ADDR
// break ;
46332: GO 46336
// end ; end ;
46334: GO 46273
46336: POP
46337: POP
// end ; end ;
46338: GO 46121
46340: POP
46341: POP
// if result and not asc then
46342: LD_VAR 0 5
46346: PUSH
46347: LD_VAR 0 3
46351: NOT
46352: AND
46353: IFFALSE 46370
// result := ReverseArray ( result ) ;
46355: LD_ADDR_VAR 0 5
46359: PUSH
46360: LD_VAR 0 5
46364: PPUSH
46365: CALL 73610 0 1
46369: ST_TO_ADDR
// tmp := [ ] ;
46370: LD_ADDR_VAR 0 8
46374: PUSH
46375: EMPTY
46376: ST_TO_ADDR
// if mode then
46377: LD_VAR 0 4
46381: IFFALSE 46445
// begin for i := 1 to result do
46383: LD_ADDR_VAR 0 6
46387: PUSH
46388: DOUBLE
46389: LD_INT 1
46391: DEC
46392: ST_TO_ADDR
46393: LD_VAR 0 5
46397: PUSH
46398: FOR_TO
46399: IFFALSE 46433
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46401: LD_ADDR_VAR 0 8
46405: PUSH
46406: LD_VAR 0 8
46410: PPUSH
46411: LD_VAR 0 5
46415: PUSH
46416: LD_VAR 0 6
46420: ARRAY
46421: PUSH
46422: LD_INT 1
46424: ARRAY
46425: PPUSH
46426: CALL 78343 0 2
46430: ST_TO_ADDR
46431: GO 46398
46433: POP
46434: POP
// result := tmp ;
46435: LD_ADDR_VAR 0 5
46439: PUSH
46440: LD_VAR 0 8
46444: ST_TO_ADDR
// end ; end ;
46445: LD_VAR 0 5
46449: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46450: LD_INT 0
46452: PPUSH
46453: PPUSH
46454: PPUSH
46455: PPUSH
// if not list then
46456: LD_VAR 0 3
46460: NOT
46461: IFFALSE 46465
// exit ;
46463: GO 46853
// result := [ ] ;
46465: LD_ADDR_VAR 0 6
46469: PUSH
46470: EMPTY
46471: ST_TO_ADDR
// for i in list do
46472: LD_ADDR_VAR 0 7
46476: PUSH
46477: LD_VAR 0 3
46481: PUSH
46482: FOR_IN
46483: IFFALSE 46685
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46485: LD_ADDR_VAR 0 9
46489: PUSH
46490: LD_VAR 0 7
46494: PPUSH
46495: LD_VAR 0 1
46499: PPUSH
46500: LD_VAR 0 2
46504: PPUSH
46505: CALL_OW 297
46509: ST_TO_ADDR
// if not result then
46510: LD_VAR 0 6
46514: NOT
46515: IFFALSE 46541
// result := [ [ i , tmp ] ] else
46517: LD_ADDR_VAR 0 6
46521: PUSH
46522: LD_VAR 0 7
46526: PUSH
46527: LD_VAR 0 9
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: EMPTY
46537: LIST
46538: ST_TO_ADDR
46539: GO 46683
// begin if result [ result ] [ 2 ] <= tmp then
46541: LD_VAR 0 6
46545: PUSH
46546: LD_VAR 0 6
46550: ARRAY
46551: PUSH
46552: LD_INT 2
46554: ARRAY
46555: PUSH
46556: LD_VAR 0 9
46560: LESSEQUAL
46561: IFFALSE 46603
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46563: LD_ADDR_VAR 0 6
46567: PUSH
46568: LD_VAR 0 6
46572: PPUSH
46573: LD_VAR 0 6
46577: PUSH
46578: LD_INT 1
46580: PLUS
46581: PPUSH
46582: LD_VAR 0 7
46586: PUSH
46587: LD_VAR 0 9
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PPUSH
46596: CALL_OW 2
46600: ST_TO_ADDR
46601: GO 46683
// for j := 1 to result do
46603: LD_ADDR_VAR 0 8
46607: PUSH
46608: DOUBLE
46609: LD_INT 1
46611: DEC
46612: ST_TO_ADDR
46613: LD_VAR 0 6
46617: PUSH
46618: FOR_TO
46619: IFFALSE 46681
// begin if tmp < result [ j ] [ 2 ] then
46621: LD_VAR 0 9
46625: PUSH
46626: LD_VAR 0 6
46630: PUSH
46631: LD_VAR 0 8
46635: ARRAY
46636: PUSH
46637: LD_INT 2
46639: ARRAY
46640: LESS
46641: IFFALSE 46679
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46643: LD_ADDR_VAR 0 6
46647: PUSH
46648: LD_VAR 0 6
46652: PPUSH
46653: LD_VAR 0 8
46657: PPUSH
46658: LD_VAR 0 7
46662: PUSH
46663: LD_VAR 0 9
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PPUSH
46672: CALL_OW 2
46676: ST_TO_ADDR
// break ;
46677: GO 46681
// end ; end ;
46679: GO 46618
46681: POP
46682: POP
// end ; end ;
46683: GO 46482
46685: POP
46686: POP
// if result and not asc then
46687: LD_VAR 0 6
46691: PUSH
46692: LD_VAR 0 4
46696: NOT
46697: AND
46698: IFFALSE 46773
// begin tmp := result ;
46700: LD_ADDR_VAR 0 9
46704: PUSH
46705: LD_VAR 0 6
46709: ST_TO_ADDR
// for i = tmp downto 1 do
46710: LD_ADDR_VAR 0 7
46714: PUSH
46715: DOUBLE
46716: LD_VAR 0 9
46720: INC
46721: ST_TO_ADDR
46722: LD_INT 1
46724: PUSH
46725: FOR_DOWNTO
46726: IFFALSE 46771
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46728: LD_ADDR_VAR 0 6
46732: PUSH
46733: LD_VAR 0 6
46737: PPUSH
46738: LD_VAR 0 9
46742: PUSH
46743: LD_VAR 0 7
46747: MINUS
46748: PUSH
46749: LD_INT 1
46751: PLUS
46752: PPUSH
46753: LD_VAR 0 9
46757: PUSH
46758: LD_VAR 0 7
46762: ARRAY
46763: PPUSH
46764: CALL_OW 1
46768: ST_TO_ADDR
46769: GO 46725
46771: POP
46772: POP
// end ; tmp := [ ] ;
46773: LD_ADDR_VAR 0 9
46777: PUSH
46778: EMPTY
46779: ST_TO_ADDR
// if mode then
46780: LD_VAR 0 5
46784: IFFALSE 46853
// begin for i = 1 to result do
46786: LD_ADDR_VAR 0 7
46790: PUSH
46791: DOUBLE
46792: LD_INT 1
46794: DEC
46795: ST_TO_ADDR
46796: LD_VAR 0 6
46800: PUSH
46801: FOR_TO
46802: IFFALSE 46841
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46804: LD_ADDR_VAR 0 9
46808: PUSH
46809: LD_VAR 0 9
46813: PPUSH
46814: LD_VAR 0 7
46818: PPUSH
46819: LD_VAR 0 6
46823: PUSH
46824: LD_VAR 0 7
46828: ARRAY
46829: PUSH
46830: LD_INT 1
46832: ARRAY
46833: PPUSH
46834: CALL_OW 1
46838: ST_TO_ADDR
46839: GO 46801
46841: POP
46842: POP
// result := tmp ;
46843: LD_ADDR_VAR 0 6
46847: PUSH
46848: LD_VAR 0 9
46852: ST_TO_ADDR
// end ; end ;
46853: LD_VAR 0 6
46857: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46858: LD_INT 0
46860: PPUSH
46861: PPUSH
46862: PPUSH
46863: PPUSH
46864: PPUSH
46865: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46866: LD_ADDR_VAR 0 5
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: EMPTY
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: ST_TO_ADDR
// if not x or not y then
46888: LD_VAR 0 2
46892: NOT
46893: PUSH
46894: LD_VAR 0 3
46898: NOT
46899: OR
46900: IFFALSE 46904
// exit ;
46902: GO 48554
// if not range then
46904: LD_VAR 0 4
46908: NOT
46909: IFFALSE 46919
// range := 10 ;
46911: LD_ADDR_VAR 0 4
46915: PUSH
46916: LD_INT 10
46918: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46919: LD_ADDR_VAR 0 8
46923: PUSH
46924: LD_INT 81
46926: PUSH
46927: LD_VAR 0 1
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 92
46938: PUSH
46939: LD_VAR 0 2
46943: PUSH
46944: LD_VAR 0 3
46948: PUSH
46949: LD_VAR 0 4
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 3
46962: PUSH
46963: LD_INT 21
46965: PUSH
46966: LD_INT 3
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: LIST
46981: PPUSH
46982: CALL_OW 69
46986: ST_TO_ADDR
// if not tmp then
46987: LD_VAR 0 8
46991: NOT
46992: IFFALSE 46996
// exit ;
46994: GO 48554
// for i in tmp do
46996: LD_ADDR_VAR 0 6
47000: PUSH
47001: LD_VAR 0 8
47005: PUSH
47006: FOR_IN
47007: IFFALSE 48529
// begin points := [ 0 , 0 , 0 ] ;
47009: LD_ADDR_VAR 0 9
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: LIST
47027: ST_TO_ADDR
// bpoints := 1 ;
47028: LD_ADDR_VAR 0 10
47032: PUSH
47033: LD_INT 1
47035: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47036: LD_VAR 0 6
47040: PPUSH
47041: CALL_OW 247
47045: PUSH
47046: LD_INT 1
47048: DOUBLE
47049: EQUAL
47050: IFTRUE 47054
47052: GO 47632
47054: POP
// begin if GetClass ( i ) = 1 then
47055: LD_VAR 0 6
47059: PPUSH
47060: CALL_OW 257
47064: PUSH
47065: LD_INT 1
47067: EQUAL
47068: IFFALSE 47089
// points := [ 10 , 5 , 3 ] ;
47070: LD_ADDR_VAR 0 9
47074: PUSH
47075: LD_INT 10
47077: PUSH
47078: LD_INT 5
47080: PUSH
47081: LD_INT 3
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: LIST
47088: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47089: LD_VAR 0 6
47093: PPUSH
47094: CALL_OW 257
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: LD_INT 3
47104: PUSH
47105: LD_INT 4
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: LIST
47112: IN
47113: IFFALSE 47134
// points := [ 3 , 2 , 1 ] ;
47115: LD_ADDR_VAR 0 9
47119: PUSH
47120: LD_INT 3
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: LIST
47133: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47134: LD_VAR 0 6
47138: PPUSH
47139: CALL_OW 257
47143: PUSH
47144: LD_INT 5
47146: EQUAL
47147: IFFALSE 47168
// points := [ 130 , 5 , 2 ] ;
47149: LD_ADDR_VAR 0 9
47153: PUSH
47154: LD_INT 130
47156: PUSH
47157: LD_INT 5
47159: PUSH
47160: LD_INT 2
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: LIST
47167: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47168: LD_VAR 0 6
47172: PPUSH
47173: CALL_OW 257
47177: PUSH
47178: LD_INT 8
47180: EQUAL
47181: IFFALSE 47202
// points := [ 35 , 35 , 30 ] ;
47183: LD_ADDR_VAR 0 9
47187: PUSH
47188: LD_INT 35
47190: PUSH
47191: LD_INT 35
47193: PUSH
47194: LD_INT 30
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: LIST
47201: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47202: LD_VAR 0 6
47206: PPUSH
47207: CALL_OW 257
47211: PUSH
47212: LD_INT 9
47214: EQUAL
47215: IFFALSE 47236
// points := [ 20 , 55 , 40 ] ;
47217: LD_ADDR_VAR 0 9
47221: PUSH
47222: LD_INT 20
47224: PUSH
47225: LD_INT 55
47227: PUSH
47228: LD_INT 40
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: LIST
47235: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47236: LD_VAR 0 6
47240: PPUSH
47241: CALL_OW 257
47245: PUSH
47246: LD_INT 12
47248: PUSH
47249: LD_INT 16
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: IN
47256: IFFALSE 47277
// points := [ 5 , 3 , 2 ] ;
47258: LD_ADDR_VAR 0 9
47262: PUSH
47263: LD_INT 5
47265: PUSH
47266: LD_INT 3
47268: PUSH
47269: LD_INT 2
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47277: LD_VAR 0 6
47281: PPUSH
47282: CALL_OW 257
47286: PUSH
47287: LD_INT 17
47289: EQUAL
47290: IFFALSE 47311
// points := [ 100 , 50 , 75 ] ;
47292: LD_ADDR_VAR 0 9
47296: PUSH
47297: LD_INT 100
47299: PUSH
47300: LD_INT 50
47302: PUSH
47303: LD_INT 75
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: LIST
47310: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47311: LD_VAR 0 6
47315: PPUSH
47316: CALL_OW 257
47320: PUSH
47321: LD_INT 15
47323: EQUAL
47324: IFFALSE 47345
// points := [ 10 , 5 , 3 ] ;
47326: LD_ADDR_VAR 0 9
47330: PUSH
47331: LD_INT 10
47333: PUSH
47334: LD_INT 5
47336: PUSH
47337: LD_INT 3
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: LIST
47344: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47345: LD_VAR 0 6
47349: PPUSH
47350: CALL_OW 257
47354: PUSH
47355: LD_INT 14
47357: EQUAL
47358: IFFALSE 47379
// points := [ 10 , 0 , 0 ] ;
47360: LD_ADDR_VAR 0 9
47364: PUSH
47365: LD_INT 10
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: LIST
47378: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47379: LD_VAR 0 6
47383: PPUSH
47384: CALL_OW 257
47388: PUSH
47389: LD_INT 11
47391: EQUAL
47392: IFFALSE 47413
// points := [ 30 , 10 , 5 ] ;
47394: LD_ADDR_VAR 0 9
47398: PUSH
47399: LD_INT 30
47401: PUSH
47402: LD_INT 10
47404: PUSH
47405: LD_INT 5
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: LIST
47412: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47413: LD_VAR 0 1
47417: PPUSH
47418: LD_INT 5
47420: PPUSH
47421: CALL_OW 321
47425: PUSH
47426: LD_INT 2
47428: EQUAL
47429: IFFALSE 47446
// bpoints := bpoints * 1.8 ;
47431: LD_ADDR_VAR 0 10
47435: PUSH
47436: LD_VAR 0 10
47440: PUSH
47441: LD_REAL  1.80000000000000E+0000
47444: MUL
47445: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47446: LD_VAR 0 6
47450: PPUSH
47451: CALL_OW 257
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: LD_INT 2
47461: PUSH
47462: LD_INT 3
47464: PUSH
47465: LD_INT 4
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: IN
47474: PUSH
47475: LD_VAR 0 1
47479: PPUSH
47480: LD_INT 51
47482: PPUSH
47483: CALL_OW 321
47487: PUSH
47488: LD_INT 2
47490: EQUAL
47491: AND
47492: IFFALSE 47509
// bpoints := bpoints * 1.2 ;
47494: LD_ADDR_VAR 0 10
47498: PUSH
47499: LD_VAR 0 10
47503: PUSH
47504: LD_REAL  1.20000000000000E+0000
47507: MUL
47508: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47509: LD_VAR 0 6
47513: PPUSH
47514: CALL_OW 257
47518: PUSH
47519: LD_INT 5
47521: PUSH
47522: LD_INT 7
47524: PUSH
47525: LD_INT 9
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: LIST
47532: IN
47533: PUSH
47534: LD_VAR 0 1
47538: PPUSH
47539: LD_INT 52
47541: PPUSH
47542: CALL_OW 321
47546: PUSH
47547: LD_INT 2
47549: EQUAL
47550: AND
47551: IFFALSE 47568
// bpoints := bpoints * 1.5 ;
47553: LD_ADDR_VAR 0 10
47557: PUSH
47558: LD_VAR 0 10
47562: PUSH
47563: LD_REAL  1.50000000000000E+0000
47566: MUL
47567: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47568: LD_VAR 0 1
47572: PPUSH
47573: LD_INT 66
47575: PPUSH
47576: CALL_OW 321
47580: PUSH
47581: LD_INT 2
47583: EQUAL
47584: IFFALSE 47601
// bpoints := bpoints * 1.1 ;
47586: LD_ADDR_VAR 0 10
47590: PUSH
47591: LD_VAR 0 10
47595: PUSH
47596: LD_REAL  1.10000000000000E+0000
47599: MUL
47600: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47601: LD_ADDR_VAR 0 10
47605: PUSH
47606: LD_VAR 0 10
47610: PUSH
47611: LD_VAR 0 6
47615: PPUSH
47616: LD_INT 1
47618: PPUSH
47619: CALL_OW 259
47623: PUSH
47624: LD_REAL  1.15000000000000E+0000
47627: MUL
47628: MUL
47629: ST_TO_ADDR
// end ; unit_vehicle :
47630: GO 48458
47632: LD_INT 2
47634: DOUBLE
47635: EQUAL
47636: IFTRUE 47640
47638: GO 48446
47640: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47641: LD_VAR 0 6
47645: PPUSH
47646: CALL_OW 264
47650: PUSH
47651: LD_INT 2
47653: PUSH
47654: LD_INT 42
47656: PUSH
47657: LD_INT 24
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: LIST
47664: IN
47665: IFFALSE 47686
// points := [ 25 , 5 , 3 ] ;
47667: LD_ADDR_VAR 0 9
47671: PUSH
47672: LD_INT 25
47674: PUSH
47675: LD_INT 5
47677: PUSH
47678: LD_INT 3
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: LIST
47685: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47686: LD_VAR 0 6
47690: PPUSH
47691: CALL_OW 264
47695: PUSH
47696: LD_INT 4
47698: PUSH
47699: LD_INT 43
47701: PUSH
47702: LD_INT 25
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: LIST
47709: IN
47710: IFFALSE 47731
// points := [ 40 , 15 , 5 ] ;
47712: LD_ADDR_VAR 0 9
47716: PUSH
47717: LD_INT 40
47719: PUSH
47720: LD_INT 15
47722: PUSH
47723: LD_INT 5
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: LIST
47730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47731: LD_VAR 0 6
47735: PPUSH
47736: CALL_OW 264
47740: PUSH
47741: LD_INT 3
47743: PUSH
47744: LD_INT 23
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: IN
47751: IFFALSE 47772
// points := [ 7 , 25 , 8 ] ;
47753: LD_ADDR_VAR 0 9
47757: PUSH
47758: LD_INT 7
47760: PUSH
47761: LD_INT 25
47763: PUSH
47764: LD_INT 8
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: LIST
47771: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47772: LD_VAR 0 6
47776: PPUSH
47777: CALL_OW 264
47781: PUSH
47782: LD_INT 5
47784: PUSH
47785: LD_INT 27
47787: PUSH
47788: LD_INT 44
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: LIST
47795: IN
47796: IFFALSE 47817
// points := [ 14 , 50 , 16 ] ;
47798: LD_ADDR_VAR 0 9
47802: PUSH
47803: LD_INT 14
47805: PUSH
47806: LD_INT 50
47808: PUSH
47809: LD_INT 16
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: LIST
47816: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47817: LD_VAR 0 6
47821: PPUSH
47822: CALL_OW 264
47826: PUSH
47827: LD_INT 6
47829: PUSH
47830: LD_INT 46
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: IN
47837: IFFALSE 47858
// points := [ 32 , 120 , 70 ] ;
47839: LD_ADDR_VAR 0 9
47843: PUSH
47844: LD_INT 32
47846: PUSH
47847: LD_INT 120
47849: PUSH
47850: LD_INT 70
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: LIST
47857: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47858: LD_VAR 0 6
47862: PPUSH
47863: CALL_OW 264
47867: PUSH
47868: LD_INT 7
47870: PUSH
47871: LD_INT 28
47873: PUSH
47874: LD_INT 45
47876: PUSH
47877: LD_INT 92
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: IN
47886: IFFALSE 47907
// points := [ 35 , 20 , 45 ] ;
47888: LD_ADDR_VAR 0 9
47892: PUSH
47893: LD_INT 35
47895: PUSH
47896: LD_INT 20
47898: PUSH
47899: LD_INT 45
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: LIST
47906: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47907: LD_VAR 0 6
47911: PPUSH
47912: CALL_OW 264
47916: PUSH
47917: LD_INT 47
47919: PUSH
47920: EMPTY
47921: LIST
47922: IN
47923: IFFALSE 47944
// points := [ 67 , 45 , 75 ] ;
47925: LD_ADDR_VAR 0 9
47929: PUSH
47930: LD_INT 67
47932: PUSH
47933: LD_INT 45
47935: PUSH
47936: LD_INT 75
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: LIST
47943: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47944: LD_VAR 0 6
47948: PPUSH
47949: CALL_OW 264
47953: PUSH
47954: LD_INT 26
47956: PUSH
47957: EMPTY
47958: LIST
47959: IN
47960: IFFALSE 47981
// points := [ 120 , 30 , 80 ] ;
47962: LD_ADDR_VAR 0 9
47966: PUSH
47967: LD_INT 120
47969: PUSH
47970: LD_INT 30
47972: PUSH
47973: LD_INT 80
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: LIST
47980: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47981: LD_VAR 0 6
47985: PPUSH
47986: CALL_OW 264
47990: PUSH
47991: LD_INT 22
47993: PUSH
47994: EMPTY
47995: LIST
47996: IN
47997: IFFALSE 48018
// points := [ 40 , 1 , 1 ] ;
47999: LD_ADDR_VAR 0 9
48003: PUSH
48004: LD_INT 40
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: LIST
48017: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48018: LD_VAR 0 6
48022: PPUSH
48023: CALL_OW 264
48027: PUSH
48028: LD_INT 29
48030: PUSH
48031: EMPTY
48032: LIST
48033: IN
48034: IFFALSE 48055
// points := [ 70 , 200 , 400 ] ;
48036: LD_ADDR_VAR 0 9
48040: PUSH
48041: LD_INT 70
48043: PUSH
48044: LD_INT 200
48046: PUSH
48047: LD_INT 400
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: LIST
48054: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48055: LD_VAR 0 6
48059: PPUSH
48060: CALL_OW 264
48064: PUSH
48065: LD_INT 14
48067: PUSH
48068: LD_INT 53
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: IN
48075: IFFALSE 48096
// points := [ 40 , 10 , 20 ] ;
48077: LD_ADDR_VAR 0 9
48081: PUSH
48082: LD_INT 40
48084: PUSH
48085: LD_INT 10
48087: PUSH
48088: LD_INT 20
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: LIST
48095: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48096: LD_VAR 0 6
48100: PPUSH
48101: CALL_OW 264
48105: PUSH
48106: LD_INT 9
48108: PUSH
48109: EMPTY
48110: LIST
48111: IN
48112: IFFALSE 48133
// points := [ 5 , 70 , 20 ] ;
48114: LD_ADDR_VAR 0 9
48118: PUSH
48119: LD_INT 5
48121: PUSH
48122: LD_INT 70
48124: PUSH
48125: LD_INT 20
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: LIST
48132: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48133: LD_VAR 0 6
48137: PPUSH
48138: CALL_OW 264
48142: PUSH
48143: LD_INT 10
48145: PUSH
48146: EMPTY
48147: LIST
48148: IN
48149: IFFALSE 48170
// points := [ 35 , 110 , 70 ] ;
48151: LD_ADDR_VAR 0 9
48155: PUSH
48156: LD_INT 35
48158: PUSH
48159: LD_INT 110
48161: PUSH
48162: LD_INT 70
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: LIST
48169: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48170: LD_VAR 0 6
48174: PPUSH
48175: CALL_OW 265
48179: PUSH
48180: LD_INT 25
48182: EQUAL
48183: IFFALSE 48204
// points := [ 80 , 65 , 100 ] ;
48185: LD_ADDR_VAR 0 9
48189: PUSH
48190: LD_INT 80
48192: PUSH
48193: LD_INT 65
48195: PUSH
48196: LD_INT 100
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: LIST
48203: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48204: LD_VAR 0 6
48208: PPUSH
48209: CALL_OW 263
48213: PUSH
48214: LD_INT 1
48216: EQUAL
48217: IFFALSE 48252
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48219: LD_ADDR_VAR 0 10
48223: PUSH
48224: LD_VAR 0 10
48228: PUSH
48229: LD_VAR 0 6
48233: PPUSH
48234: CALL_OW 311
48238: PPUSH
48239: LD_INT 3
48241: PPUSH
48242: CALL_OW 259
48246: PUSH
48247: LD_INT 4
48249: MUL
48250: MUL
48251: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48252: LD_VAR 0 6
48256: PPUSH
48257: CALL_OW 263
48261: PUSH
48262: LD_INT 2
48264: EQUAL
48265: IFFALSE 48316
// begin j := IsControledBy ( i ) ;
48267: LD_ADDR_VAR 0 7
48271: PUSH
48272: LD_VAR 0 6
48276: PPUSH
48277: CALL_OW 312
48281: ST_TO_ADDR
// if j then
48282: LD_VAR 0 7
48286: IFFALSE 48316
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48288: LD_ADDR_VAR 0 10
48292: PUSH
48293: LD_VAR 0 10
48297: PUSH
48298: LD_VAR 0 7
48302: PPUSH
48303: LD_INT 3
48305: PPUSH
48306: CALL_OW 259
48310: PUSH
48311: LD_INT 3
48313: MUL
48314: MUL
48315: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48316: LD_VAR 0 6
48320: PPUSH
48321: CALL_OW 264
48325: PUSH
48326: LD_INT 5
48328: PUSH
48329: LD_INT 6
48331: PUSH
48332: LD_INT 46
48334: PUSH
48335: LD_INT 44
48337: PUSH
48338: LD_INT 47
48340: PUSH
48341: LD_INT 45
48343: PUSH
48344: LD_INT 28
48346: PUSH
48347: LD_INT 7
48349: PUSH
48350: LD_INT 27
48352: PUSH
48353: LD_INT 29
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: IN
48368: PUSH
48369: LD_VAR 0 1
48373: PPUSH
48374: LD_INT 52
48376: PPUSH
48377: CALL_OW 321
48381: PUSH
48382: LD_INT 2
48384: EQUAL
48385: AND
48386: IFFALSE 48403
// bpoints := bpoints * 1.2 ;
48388: LD_ADDR_VAR 0 10
48392: PUSH
48393: LD_VAR 0 10
48397: PUSH
48398: LD_REAL  1.20000000000000E+0000
48401: MUL
48402: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48403: LD_VAR 0 6
48407: PPUSH
48408: CALL_OW 264
48412: PUSH
48413: LD_INT 6
48415: PUSH
48416: LD_INT 46
48418: PUSH
48419: LD_INT 47
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: LIST
48426: IN
48427: IFFALSE 48444
// bpoints := bpoints * 1.2 ;
48429: LD_ADDR_VAR 0 10
48433: PUSH
48434: LD_VAR 0 10
48438: PUSH
48439: LD_REAL  1.20000000000000E+0000
48442: MUL
48443: ST_TO_ADDR
// end ; unit_building :
48444: GO 48458
48446: LD_INT 3
48448: DOUBLE
48449: EQUAL
48450: IFTRUE 48454
48452: GO 48457
48454: POP
// ; end ;
48455: GO 48458
48457: POP
// for j = 1 to 3 do
48458: LD_ADDR_VAR 0 7
48462: PUSH
48463: DOUBLE
48464: LD_INT 1
48466: DEC
48467: ST_TO_ADDR
48468: LD_INT 3
48470: PUSH
48471: FOR_TO
48472: IFFALSE 48525
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48474: LD_ADDR_VAR 0 5
48478: PUSH
48479: LD_VAR 0 5
48483: PPUSH
48484: LD_VAR 0 7
48488: PPUSH
48489: LD_VAR 0 5
48493: PUSH
48494: LD_VAR 0 7
48498: ARRAY
48499: PUSH
48500: LD_VAR 0 9
48504: PUSH
48505: LD_VAR 0 7
48509: ARRAY
48510: PUSH
48511: LD_VAR 0 10
48515: MUL
48516: PLUS
48517: PPUSH
48518: CALL_OW 1
48522: ST_TO_ADDR
48523: GO 48471
48525: POP
48526: POP
// end ;
48527: GO 47006
48529: POP
48530: POP
// result := Replace ( result , 4 , tmp ) ;
48531: LD_ADDR_VAR 0 5
48535: PUSH
48536: LD_VAR 0 5
48540: PPUSH
48541: LD_INT 4
48543: PPUSH
48544: LD_VAR 0 8
48548: PPUSH
48549: CALL_OW 1
48553: ST_TO_ADDR
// end ;
48554: LD_VAR 0 5
48558: RET
// export function DangerAtRange ( unit , range ) ; begin
48559: LD_INT 0
48561: PPUSH
// if not unit then
48562: LD_VAR 0 1
48566: NOT
48567: IFFALSE 48571
// exit ;
48569: GO 48616
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48571: LD_ADDR_VAR 0 3
48575: PUSH
48576: LD_VAR 0 1
48580: PPUSH
48581: CALL_OW 255
48585: PPUSH
48586: LD_VAR 0 1
48590: PPUSH
48591: CALL_OW 250
48595: PPUSH
48596: LD_VAR 0 1
48600: PPUSH
48601: CALL_OW 251
48605: PPUSH
48606: LD_VAR 0 2
48610: PPUSH
48611: CALL 46858 0 4
48615: ST_TO_ADDR
// end ;
48616: LD_VAR 0 3
48620: RET
// export function DangerInArea ( side , area ) ; begin
48621: LD_INT 0
48623: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48624: LD_ADDR_VAR 0 3
48628: PUSH
48629: LD_VAR 0 2
48633: PPUSH
48634: LD_INT 81
48636: PUSH
48637: LD_VAR 0 1
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PPUSH
48646: CALL_OW 70
48650: ST_TO_ADDR
// end ;
48651: LD_VAR 0 3
48655: RET
// export function IsExtension ( b ) ; begin
48656: LD_INT 0
48658: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48659: LD_ADDR_VAR 0 2
48663: PUSH
48664: LD_VAR 0 1
48668: PUSH
48669: LD_INT 23
48671: PUSH
48672: LD_INT 20
48674: PUSH
48675: LD_INT 22
48677: PUSH
48678: LD_INT 17
48680: PUSH
48681: LD_INT 24
48683: PUSH
48684: LD_INT 21
48686: PUSH
48687: LD_INT 19
48689: PUSH
48690: LD_INT 16
48692: PUSH
48693: LD_INT 25
48695: PUSH
48696: LD_INT 18
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: IN
48711: ST_TO_ADDR
// end ;
48712: LD_VAR 0 2
48716: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48717: LD_INT 0
48719: PPUSH
48720: PPUSH
48721: PPUSH
// result := [ ] ;
48722: LD_ADDR_VAR 0 4
48726: PUSH
48727: EMPTY
48728: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48729: LD_ADDR_VAR 0 5
48733: PUSH
48734: LD_VAR 0 2
48738: PPUSH
48739: LD_INT 21
48741: PUSH
48742: LD_INT 3
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PPUSH
48749: CALL_OW 70
48753: ST_TO_ADDR
// if not tmp then
48754: LD_VAR 0 5
48758: NOT
48759: IFFALSE 48763
// exit ;
48761: GO 48827
// if checkLink then
48763: LD_VAR 0 3
48767: IFFALSE 48817
// begin for i in tmp do
48769: LD_ADDR_VAR 0 6
48773: PUSH
48774: LD_VAR 0 5
48778: PUSH
48779: FOR_IN
48780: IFFALSE 48815
// if GetBase ( i ) <> base then
48782: LD_VAR 0 6
48786: PPUSH
48787: CALL_OW 274
48791: PUSH
48792: LD_VAR 0 1
48796: NONEQUAL
48797: IFFALSE 48813
// ComLinkToBase ( base , i ) ;
48799: LD_VAR 0 1
48803: PPUSH
48804: LD_VAR 0 6
48808: PPUSH
48809: CALL_OW 169
48813: GO 48779
48815: POP
48816: POP
// end ; result := tmp ;
48817: LD_ADDR_VAR 0 4
48821: PUSH
48822: LD_VAR 0 5
48826: ST_TO_ADDR
// end ;
48827: LD_VAR 0 4
48831: RET
// export function ComComplete ( units , b ) ; var i ; begin
48832: LD_INT 0
48834: PPUSH
48835: PPUSH
// if not units then
48836: LD_VAR 0 1
48840: NOT
48841: IFFALSE 48845
// exit ;
48843: GO 48935
// for i in units do
48845: LD_ADDR_VAR 0 4
48849: PUSH
48850: LD_VAR 0 1
48854: PUSH
48855: FOR_IN
48856: IFFALSE 48933
// if BuildingStatus ( b ) = bs_build then
48858: LD_VAR 0 2
48862: PPUSH
48863: CALL_OW 461
48867: PUSH
48868: LD_INT 1
48870: EQUAL
48871: IFFALSE 48931
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48873: LD_VAR 0 4
48877: PPUSH
48878: LD_STRING h
48880: PUSH
48881: LD_VAR 0 2
48885: PPUSH
48886: CALL_OW 250
48890: PUSH
48891: LD_VAR 0 2
48895: PPUSH
48896: CALL_OW 251
48900: PUSH
48901: LD_VAR 0 2
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: PUSH
48924: EMPTY
48925: LIST
48926: PPUSH
48927: CALL_OW 446
48931: GO 48855
48933: POP
48934: POP
// end ;
48935: LD_VAR 0 3
48939: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48940: LD_INT 0
48942: PPUSH
48943: PPUSH
48944: PPUSH
48945: PPUSH
48946: PPUSH
48947: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48948: LD_VAR 0 1
48952: NOT
48953: PUSH
48954: LD_VAR 0 1
48958: PPUSH
48959: CALL_OW 263
48963: PUSH
48964: LD_INT 2
48966: NONEQUAL
48967: OR
48968: IFFALSE 48972
// exit ;
48970: GO 49288
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48972: LD_ADDR_VAR 0 6
48976: PUSH
48977: LD_INT 22
48979: PUSH
48980: LD_VAR 0 1
48984: PPUSH
48985: CALL_OW 255
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 2
48996: PUSH
48997: LD_INT 30
48999: PUSH
49000: LD_INT 36
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 34
49009: PUSH
49010: LD_INT 31
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: LIST
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PPUSH
49026: CALL_OW 69
49030: ST_TO_ADDR
// if not tmp then
49031: LD_VAR 0 6
49035: NOT
49036: IFFALSE 49040
// exit ;
49038: GO 49288
// result := [ ] ;
49040: LD_ADDR_VAR 0 2
49044: PUSH
49045: EMPTY
49046: ST_TO_ADDR
// for i in tmp do
49047: LD_ADDR_VAR 0 3
49051: PUSH
49052: LD_VAR 0 6
49056: PUSH
49057: FOR_IN
49058: IFFALSE 49129
// begin t := UnitsInside ( i ) ;
49060: LD_ADDR_VAR 0 4
49064: PUSH
49065: LD_VAR 0 3
49069: PPUSH
49070: CALL_OW 313
49074: ST_TO_ADDR
// if t then
49075: LD_VAR 0 4
49079: IFFALSE 49127
// for j in t do
49081: LD_ADDR_VAR 0 7
49085: PUSH
49086: LD_VAR 0 4
49090: PUSH
49091: FOR_IN
49092: IFFALSE 49125
// result := Replace ( result , result + 1 , j ) ;
49094: LD_ADDR_VAR 0 2
49098: PUSH
49099: LD_VAR 0 2
49103: PPUSH
49104: LD_VAR 0 2
49108: PUSH
49109: LD_INT 1
49111: PLUS
49112: PPUSH
49113: LD_VAR 0 7
49117: PPUSH
49118: CALL_OW 1
49122: ST_TO_ADDR
49123: GO 49091
49125: POP
49126: POP
// end ;
49127: GO 49057
49129: POP
49130: POP
// if not result then
49131: LD_VAR 0 2
49135: NOT
49136: IFFALSE 49140
// exit ;
49138: GO 49288
// mech := result [ 1 ] ;
49140: LD_ADDR_VAR 0 5
49144: PUSH
49145: LD_VAR 0 2
49149: PUSH
49150: LD_INT 1
49152: ARRAY
49153: ST_TO_ADDR
// if result > 1 then
49154: LD_VAR 0 2
49158: PUSH
49159: LD_INT 1
49161: GREATER
49162: IFFALSE 49274
// begin for i = 2 to result do
49164: LD_ADDR_VAR 0 3
49168: PUSH
49169: DOUBLE
49170: LD_INT 2
49172: DEC
49173: ST_TO_ADDR
49174: LD_VAR 0 2
49178: PUSH
49179: FOR_TO
49180: IFFALSE 49272
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49182: LD_ADDR_VAR 0 4
49186: PUSH
49187: LD_VAR 0 2
49191: PUSH
49192: LD_VAR 0 3
49196: ARRAY
49197: PPUSH
49198: LD_INT 3
49200: PPUSH
49201: CALL_OW 259
49205: PUSH
49206: LD_VAR 0 2
49210: PUSH
49211: LD_VAR 0 3
49215: ARRAY
49216: PPUSH
49217: CALL_OW 432
49221: MINUS
49222: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49223: LD_VAR 0 4
49227: PUSH
49228: LD_VAR 0 5
49232: PPUSH
49233: LD_INT 3
49235: PPUSH
49236: CALL_OW 259
49240: PUSH
49241: LD_VAR 0 5
49245: PPUSH
49246: CALL_OW 432
49250: MINUS
49251: GREATEREQUAL
49252: IFFALSE 49270
// mech := result [ i ] ;
49254: LD_ADDR_VAR 0 5
49258: PUSH
49259: LD_VAR 0 2
49263: PUSH
49264: LD_VAR 0 3
49268: ARRAY
49269: ST_TO_ADDR
// end ;
49270: GO 49179
49272: POP
49273: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49274: LD_VAR 0 1
49278: PPUSH
49279: LD_VAR 0 5
49283: PPUSH
49284: CALL_OW 135
// end ;
49288: LD_VAR 0 2
49292: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49293: LD_INT 0
49295: PPUSH
49296: PPUSH
49297: PPUSH
49298: PPUSH
49299: PPUSH
49300: PPUSH
49301: PPUSH
49302: PPUSH
49303: PPUSH
49304: PPUSH
49305: PPUSH
49306: PPUSH
49307: PPUSH
// result := [ ] ;
49308: LD_ADDR_VAR 0 7
49312: PUSH
49313: EMPTY
49314: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49315: LD_VAR 0 1
49319: PPUSH
49320: CALL_OW 266
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: IN
49335: NOT
49336: IFFALSE 49340
// exit ;
49338: GO 50974
// if name then
49340: LD_VAR 0 3
49344: IFFALSE 49360
// SetBName ( base_dep , name ) ;
49346: LD_VAR 0 1
49350: PPUSH
49351: LD_VAR 0 3
49355: PPUSH
49356: CALL_OW 500
// base := GetBase ( base_dep ) ;
49360: LD_ADDR_VAR 0 15
49364: PUSH
49365: LD_VAR 0 1
49369: PPUSH
49370: CALL_OW 274
49374: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49375: LD_ADDR_VAR 0 16
49379: PUSH
49380: LD_VAR 0 1
49384: PPUSH
49385: CALL_OW 255
49389: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49390: LD_ADDR_VAR 0 17
49394: PUSH
49395: LD_VAR 0 1
49399: PPUSH
49400: CALL_OW 248
49404: ST_TO_ADDR
// if sources then
49405: LD_VAR 0 5
49409: IFFALSE 49456
// for i = 1 to 3 do
49411: LD_ADDR_VAR 0 8
49415: PUSH
49416: DOUBLE
49417: LD_INT 1
49419: DEC
49420: ST_TO_ADDR
49421: LD_INT 3
49423: PUSH
49424: FOR_TO
49425: IFFALSE 49454
// AddResourceType ( base , i , sources [ i ] ) ;
49427: LD_VAR 0 15
49431: PPUSH
49432: LD_VAR 0 8
49436: PPUSH
49437: LD_VAR 0 5
49441: PUSH
49442: LD_VAR 0 8
49446: ARRAY
49447: PPUSH
49448: CALL_OW 276
49452: GO 49424
49454: POP
49455: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49456: LD_ADDR_VAR 0 18
49460: PUSH
49461: LD_VAR 0 15
49465: PPUSH
49466: LD_VAR 0 2
49470: PPUSH
49471: LD_INT 1
49473: PPUSH
49474: CALL 48717 0 3
49478: ST_TO_ADDR
// InitHc ;
49479: CALL_OW 19
// InitUc ;
49483: CALL_OW 18
// uc_side := side ;
49487: LD_ADDR_OWVAR 20
49491: PUSH
49492: LD_VAR 0 16
49496: ST_TO_ADDR
// uc_nation := nation ;
49497: LD_ADDR_OWVAR 21
49501: PUSH
49502: LD_VAR 0 17
49506: ST_TO_ADDR
// if buildings then
49507: LD_VAR 0 18
49511: IFFALSE 50833
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49513: LD_ADDR_VAR 0 19
49517: PUSH
49518: LD_VAR 0 18
49522: PPUSH
49523: LD_INT 2
49525: PUSH
49526: LD_INT 30
49528: PUSH
49529: LD_INT 29
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 30
49538: PUSH
49539: LD_INT 30
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: LIST
49550: PPUSH
49551: CALL_OW 72
49555: ST_TO_ADDR
// if tmp then
49556: LD_VAR 0 19
49560: IFFALSE 49608
// for i in tmp do
49562: LD_ADDR_VAR 0 8
49566: PUSH
49567: LD_VAR 0 19
49571: PUSH
49572: FOR_IN
49573: IFFALSE 49606
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49575: LD_VAR 0 8
49579: PPUSH
49580: CALL_OW 250
49584: PPUSH
49585: LD_VAR 0 8
49589: PPUSH
49590: CALL_OW 251
49594: PPUSH
49595: LD_VAR 0 16
49599: PPUSH
49600: CALL_OW 441
49604: GO 49572
49606: POP
49607: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49608: LD_VAR 0 18
49612: PPUSH
49613: LD_INT 2
49615: PUSH
49616: LD_INT 30
49618: PUSH
49619: LD_INT 32
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 30
49628: PUSH
49629: LD_INT 33
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: LIST
49640: PPUSH
49641: CALL_OW 72
49645: IFFALSE 49733
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49647: LD_ADDR_VAR 0 8
49651: PUSH
49652: LD_VAR 0 18
49656: PPUSH
49657: LD_INT 2
49659: PUSH
49660: LD_INT 30
49662: PUSH
49663: LD_INT 32
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 30
49672: PUSH
49673: LD_INT 33
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: LIST
49684: PPUSH
49685: CALL_OW 72
49689: PUSH
49690: FOR_IN
49691: IFFALSE 49731
// begin if not GetBWeapon ( i ) then
49693: LD_VAR 0 8
49697: PPUSH
49698: CALL_OW 269
49702: NOT
49703: IFFALSE 49729
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49705: LD_VAR 0 8
49709: PPUSH
49710: LD_VAR 0 8
49714: PPUSH
49715: LD_VAR 0 2
49719: PPUSH
49720: CALL 50979 0 2
49724: PPUSH
49725: CALL_OW 431
// end ;
49729: GO 49690
49731: POP
49732: POP
// end ; for i = 1 to personel do
49733: LD_ADDR_VAR 0 8
49737: PUSH
49738: DOUBLE
49739: LD_INT 1
49741: DEC
49742: ST_TO_ADDR
49743: LD_VAR 0 6
49747: PUSH
49748: FOR_TO
49749: IFFALSE 50813
// begin if i > 4 then
49751: LD_VAR 0 8
49755: PUSH
49756: LD_INT 4
49758: GREATER
49759: IFFALSE 49763
// break ;
49761: GO 50813
// case i of 1 :
49763: LD_VAR 0 8
49767: PUSH
49768: LD_INT 1
49770: DOUBLE
49771: EQUAL
49772: IFTRUE 49776
49774: GO 49856
49776: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49777: LD_ADDR_VAR 0 12
49781: PUSH
49782: LD_VAR 0 18
49786: PPUSH
49787: LD_INT 22
49789: PUSH
49790: LD_VAR 0 16
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 58
49801: PUSH
49802: EMPTY
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: LD_INT 30
49810: PUSH
49811: LD_INT 32
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 30
49820: PUSH
49821: LD_INT 4
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 30
49830: PUSH
49831: LD_INT 5
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: LIST
49848: PPUSH
49849: CALL_OW 72
49853: ST_TO_ADDR
49854: GO 50078
49856: LD_INT 2
49858: DOUBLE
49859: EQUAL
49860: IFTRUE 49864
49862: GO 49926
49864: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49865: LD_ADDR_VAR 0 12
49869: PUSH
49870: LD_VAR 0 18
49874: PPUSH
49875: LD_INT 22
49877: PUSH
49878: LD_VAR 0 16
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 2
49889: PUSH
49890: LD_INT 30
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 30
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: LIST
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PPUSH
49919: CALL_OW 72
49923: ST_TO_ADDR
49924: GO 50078
49926: LD_INT 3
49928: DOUBLE
49929: EQUAL
49930: IFTRUE 49934
49932: GO 49996
49934: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49935: LD_ADDR_VAR 0 12
49939: PUSH
49940: LD_VAR 0 18
49944: PPUSH
49945: LD_INT 22
49947: PUSH
49948: LD_VAR 0 16
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 2
49959: PUSH
49960: LD_INT 30
49962: PUSH
49963: LD_INT 2
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 30
49972: PUSH
49973: LD_INT 3
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: LIST
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PPUSH
49989: CALL_OW 72
49993: ST_TO_ADDR
49994: GO 50078
49996: LD_INT 4
49998: DOUBLE
49999: EQUAL
50000: IFTRUE 50004
50002: GO 50077
50004: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50005: LD_ADDR_VAR 0 12
50009: PUSH
50010: LD_VAR 0 18
50014: PPUSH
50015: LD_INT 22
50017: PUSH
50018: LD_VAR 0 16
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 2
50029: PUSH
50030: LD_INT 30
50032: PUSH
50033: LD_INT 6
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 30
50042: PUSH
50043: LD_INT 7
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 30
50052: PUSH
50053: LD_INT 8
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PPUSH
50070: CALL_OW 72
50074: ST_TO_ADDR
50075: GO 50078
50077: POP
// if i = 1 then
50078: LD_VAR 0 8
50082: PUSH
50083: LD_INT 1
50085: EQUAL
50086: IFFALSE 50197
// begin tmp := [ ] ;
50088: LD_ADDR_VAR 0 19
50092: PUSH
50093: EMPTY
50094: ST_TO_ADDR
// for j in f do
50095: LD_ADDR_VAR 0 9
50099: PUSH
50100: LD_VAR 0 12
50104: PUSH
50105: FOR_IN
50106: IFFALSE 50179
// if GetBType ( j ) = b_bunker then
50108: LD_VAR 0 9
50112: PPUSH
50113: CALL_OW 266
50117: PUSH
50118: LD_INT 32
50120: EQUAL
50121: IFFALSE 50148
// tmp := Insert ( tmp , 1 , j ) else
50123: LD_ADDR_VAR 0 19
50127: PUSH
50128: LD_VAR 0 19
50132: PPUSH
50133: LD_INT 1
50135: PPUSH
50136: LD_VAR 0 9
50140: PPUSH
50141: CALL_OW 2
50145: ST_TO_ADDR
50146: GO 50177
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50148: LD_ADDR_VAR 0 19
50152: PUSH
50153: LD_VAR 0 19
50157: PPUSH
50158: LD_VAR 0 19
50162: PUSH
50163: LD_INT 1
50165: PLUS
50166: PPUSH
50167: LD_VAR 0 9
50171: PPUSH
50172: CALL_OW 2
50176: ST_TO_ADDR
50177: GO 50105
50179: POP
50180: POP
// if tmp then
50181: LD_VAR 0 19
50185: IFFALSE 50197
// f := tmp ;
50187: LD_ADDR_VAR 0 12
50191: PUSH
50192: LD_VAR 0 19
50196: ST_TO_ADDR
// end ; x := personel [ i ] ;
50197: LD_ADDR_VAR 0 13
50201: PUSH
50202: LD_VAR 0 6
50206: PUSH
50207: LD_VAR 0 8
50211: ARRAY
50212: ST_TO_ADDR
// if x = - 1 then
50213: LD_VAR 0 13
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: EQUAL
50222: IFFALSE 50431
// begin for j in f do
50224: LD_ADDR_VAR 0 9
50228: PUSH
50229: LD_VAR 0 12
50233: PUSH
50234: FOR_IN
50235: IFFALSE 50427
// repeat InitHc ;
50237: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50241: LD_VAR 0 9
50245: PPUSH
50246: CALL_OW 266
50250: PUSH
50251: LD_INT 5
50253: EQUAL
50254: IFFALSE 50324
// begin if UnitsInside ( j ) < 3 then
50256: LD_VAR 0 9
50260: PPUSH
50261: CALL_OW 313
50265: PUSH
50266: LD_INT 3
50268: LESS
50269: IFFALSE 50305
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50271: LD_INT 0
50273: PPUSH
50274: LD_INT 5
50276: PUSH
50277: LD_INT 8
50279: PUSH
50280: LD_INT 9
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: LIST
50287: PUSH
50288: LD_VAR 0 17
50292: ARRAY
50293: PPUSH
50294: LD_VAR 0 4
50298: PPUSH
50299: CALL_OW 380
50303: GO 50322
// PrepareHuman ( false , i , skill ) ;
50305: LD_INT 0
50307: PPUSH
50308: LD_VAR 0 8
50312: PPUSH
50313: LD_VAR 0 4
50317: PPUSH
50318: CALL_OW 380
// end else
50322: GO 50341
// PrepareHuman ( false , i , skill ) ;
50324: LD_INT 0
50326: PPUSH
50327: LD_VAR 0 8
50331: PPUSH
50332: LD_VAR 0 4
50336: PPUSH
50337: CALL_OW 380
// un := CreateHuman ;
50341: LD_ADDR_VAR 0 14
50345: PUSH
50346: CALL_OW 44
50350: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50351: LD_ADDR_VAR 0 7
50355: PUSH
50356: LD_VAR 0 7
50360: PPUSH
50361: LD_INT 1
50363: PPUSH
50364: LD_VAR 0 14
50368: PPUSH
50369: CALL_OW 2
50373: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50374: LD_VAR 0 14
50378: PPUSH
50379: LD_VAR 0 9
50383: PPUSH
50384: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50388: LD_VAR 0 9
50392: PPUSH
50393: CALL_OW 313
50397: PUSH
50398: LD_INT 6
50400: EQUAL
50401: PUSH
50402: LD_VAR 0 9
50406: PPUSH
50407: CALL_OW 266
50411: PUSH
50412: LD_INT 32
50414: PUSH
50415: LD_INT 31
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: IN
50422: OR
50423: IFFALSE 50237
50425: GO 50234
50427: POP
50428: POP
// end else
50429: GO 50811
// for j = 1 to x do
50431: LD_ADDR_VAR 0 9
50435: PUSH
50436: DOUBLE
50437: LD_INT 1
50439: DEC
50440: ST_TO_ADDR
50441: LD_VAR 0 13
50445: PUSH
50446: FOR_TO
50447: IFFALSE 50809
// begin InitHc ;
50449: CALL_OW 19
// if not f then
50453: LD_VAR 0 12
50457: NOT
50458: IFFALSE 50547
// begin PrepareHuman ( false , i , skill ) ;
50460: LD_INT 0
50462: PPUSH
50463: LD_VAR 0 8
50467: PPUSH
50468: LD_VAR 0 4
50472: PPUSH
50473: CALL_OW 380
// un := CreateHuman ;
50477: LD_ADDR_VAR 0 14
50481: PUSH
50482: CALL_OW 44
50486: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50487: LD_ADDR_VAR 0 7
50491: PUSH
50492: LD_VAR 0 7
50496: PPUSH
50497: LD_INT 1
50499: PPUSH
50500: LD_VAR 0 14
50504: PPUSH
50505: CALL_OW 2
50509: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50510: LD_VAR 0 14
50514: PPUSH
50515: LD_VAR 0 1
50519: PPUSH
50520: CALL_OW 250
50524: PPUSH
50525: LD_VAR 0 1
50529: PPUSH
50530: CALL_OW 251
50534: PPUSH
50535: LD_INT 10
50537: PPUSH
50538: LD_INT 0
50540: PPUSH
50541: CALL_OW 50
// continue ;
50545: GO 50446
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50547: LD_VAR 0 12
50551: PUSH
50552: LD_INT 1
50554: ARRAY
50555: PPUSH
50556: CALL_OW 313
50560: PUSH
50561: LD_VAR 0 12
50565: PUSH
50566: LD_INT 1
50568: ARRAY
50569: PPUSH
50570: CALL_OW 266
50574: PUSH
50575: LD_INT 32
50577: PUSH
50578: LD_INT 31
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: IN
50585: AND
50586: PUSH
50587: LD_VAR 0 12
50591: PUSH
50592: LD_INT 1
50594: ARRAY
50595: PPUSH
50596: CALL_OW 313
50600: PUSH
50601: LD_INT 6
50603: EQUAL
50604: OR
50605: IFFALSE 50625
// f := Delete ( f , 1 ) ;
50607: LD_ADDR_VAR 0 12
50611: PUSH
50612: LD_VAR 0 12
50616: PPUSH
50617: LD_INT 1
50619: PPUSH
50620: CALL_OW 3
50624: ST_TO_ADDR
// if not f then
50625: LD_VAR 0 12
50629: NOT
50630: IFFALSE 50648
// begin x := x + 2 ;
50632: LD_ADDR_VAR 0 13
50636: PUSH
50637: LD_VAR 0 13
50641: PUSH
50642: LD_INT 2
50644: PLUS
50645: ST_TO_ADDR
// continue ;
50646: GO 50446
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50648: LD_VAR 0 12
50652: PUSH
50653: LD_INT 1
50655: ARRAY
50656: PPUSH
50657: CALL_OW 266
50661: PUSH
50662: LD_INT 5
50664: EQUAL
50665: IFFALSE 50739
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50667: LD_VAR 0 12
50671: PUSH
50672: LD_INT 1
50674: ARRAY
50675: PPUSH
50676: CALL_OW 313
50680: PUSH
50681: LD_INT 3
50683: LESS
50684: IFFALSE 50720
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50686: LD_INT 0
50688: PPUSH
50689: LD_INT 5
50691: PUSH
50692: LD_INT 8
50694: PUSH
50695: LD_INT 9
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: LIST
50702: PUSH
50703: LD_VAR 0 17
50707: ARRAY
50708: PPUSH
50709: LD_VAR 0 4
50713: PPUSH
50714: CALL_OW 380
50718: GO 50737
// PrepareHuman ( false , i , skill ) ;
50720: LD_INT 0
50722: PPUSH
50723: LD_VAR 0 8
50727: PPUSH
50728: LD_VAR 0 4
50732: PPUSH
50733: CALL_OW 380
// end else
50737: GO 50756
// PrepareHuman ( false , i , skill ) ;
50739: LD_INT 0
50741: PPUSH
50742: LD_VAR 0 8
50746: PPUSH
50747: LD_VAR 0 4
50751: PPUSH
50752: CALL_OW 380
// un := CreateHuman ;
50756: LD_ADDR_VAR 0 14
50760: PUSH
50761: CALL_OW 44
50765: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50766: LD_ADDR_VAR 0 7
50770: PUSH
50771: LD_VAR 0 7
50775: PPUSH
50776: LD_INT 1
50778: PPUSH
50779: LD_VAR 0 14
50783: PPUSH
50784: CALL_OW 2
50788: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50789: LD_VAR 0 14
50793: PPUSH
50794: LD_VAR 0 12
50798: PUSH
50799: LD_INT 1
50801: ARRAY
50802: PPUSH
50803: CALL_OW 52
// end ;
50807: GO 50446
50809: POP
50810: POP
// end ;
50811: GO 49748
50813: POP
50814: POP
// result := result ^ buildings ;
50815: LD_ADDR_VAR 0 7
50819: PUSH
50820: LD_VAR 0 7
50824: PUSH
50825: LD_VAR 0 18
50829: ADD
50830: ST_TO_ADDR
// end else
50831: GO 50974
// begin for i = 1 to personel do
50833: LD_ADDR_VAR 0 8
50837: PUSH
50838: DOUBLE
50839: LD_INT 1
50841: DEC
50842: ST_TO_ADDR
50843: LD_VAR 0 6
50847: PUSH
50848: FOR_TO
50849: IFFALSE 50972
// begin if i > 4 then
50851: LD_VAR 0 8
50855: PUSH
50856: LD_INT 4
50858: GREATER
50859: IFFALSE 50863
// break ;
50861: GO 50972
// x := personel [ i ] ;
50863: LD_ADDR_VAR 0 13
50867: PUSH
50868: LD_VAR 0 6
50872: PUSH
50873: LD_VAR 0 8
50877: ARRAY
50878: ST_TO_ADDR
// if x = - 1 then
50879: LD_VAR 0 13
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: EQUAL
50888: IFFALSE 50892
// continue ;
50890: GO 50848
// PrepareHuman ( false , i , skill ) ;
50892: LD_INT 0
50894: PPUSH
50895: LD_VAR 0 8
50899: PPUSH
50900: LD_VAR 0 4
50904: PPUSH
50905: CALL_OW 380
// un := CreateHuman ;
50909: LD_ADDR_VAR 0 14
50913: PUSH
50914: CALL_OW 44
50918: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50919: LD_VAR 0 14
50923: PPUSH
50924: LD_VAR 0 1
50928: PPUSH
50929: CALL_OW 250
50933: PPUSH
50934: LD_VAR 0 1
50938: PPUSH
50939: CALL_OW 251
50943: PPUSH
50944: LD_INT 10
50946: PPUSH
50947: LD_INT 0
50949: PPUSH
50950: CALL_OW 50
// result := result ^ un ;
50954: LD_ADDR_VAR 0 7
50958: PUSH
50959: LD_VAR 0 7
50963: PUSH
50964: LD_VAR 0 14
50968: ADD
50969: ST_TO_ADDR
// end ;
50970: GO 50848
50972: POP
50973: POP
// end ; end ;
50974: LD_VAR 0 7
50978: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50979: LD_INT 0
50981: PPUSH
50982: PPUSH
50983: PPUSH
50984: PPUSH
50985: PPUSH
50986: PPUSH
50987: PPUSH
50988: PPUSH
50989: PPUSH
50990: PPUSH
50991: PPUSH
50992: PPUSH
50993: PPUSH
50994: PPUSH
50995: PPUSH
50996: PPUSH
// result := false ;
50997: LD_ADDR_VAR 0 3
51001: PUSH
51002: LD_INT 0
51004: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51005: LD_VAR 0 1
51009: NOT
51010: PUSH
51011: LD_VAR 0 1
51015: PPUSH
51016: CALL_OW 266
51020: PUSH
51021: LD_INT 32
51023: PUSH
51024: LD_INT 33
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: IN
51031: NOT
51032: OR
51033: IFFALSE 51037
// exit ;
51035: GO 52146
// nat := GetNation ( tower ) ;
51037: LD_ADDR_VAR 0 12
51041: PUSH
51042: LD_VAR 0 1
51046: PPUSH
51047: CALL_OW 248
51051: ST_TO_ADDR
// side := GetSide ( tower ) ;
51052: LD_ADDR_VAR 0 16
51056: PUSH
51057: LD_VAR 0 1
51061: PPUSH
51062: CALL_OW 255
51066: ST_TO_ADDR
// x := GetX ( tower ) ;
51067: LD_ADDR_VAR 0 10
51071: PUSH
51072: LD_VAR 0 1
51076: PPUSH
51077: CALL_OW 250
51081: ST_TO_ADDR
// y := GetY ( tower ) ;
51082: LD_ADDR_VAR 0 11
51086: PUSH
51087: LD_VAR 0 1
51091: PPUSH
51092: CALL_OW 251
51096: ST_TO_ADDR
// if not x or not y then
51097: LD_VAR 0 10
51101: NOT
51102: PUSH
51103: LD_VAR 0 11
51107: NOT
51108: OR
51109: IFFALSE 51113
// exit ;
51111: GO 52146
// weapon := 0 ;
51113: LD_ADDR_VAR 0 18
51117: PUSH
51118: LD_INT 0
51120: ST_TO_ADDR
// fac_list := [ ] ;
51121: LD_ADDR_VAR 0 17
51125: PUSH
51126: EMPTY
51127: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51128: LD_ADDR_VAR 0 6
51132: PUSH
51133: LD_VAR 0 1
51137: PPUSH
51138: CALL_OW 274
51142: PPUSH
51143: LD_VAR 0 2
51147: PPUSH
51148: LD_INT 0
51150: PPUSH
51151: CALL 48717 0 3
51155: PPUSH
51156: LD_INT 30
51158: PUSH
51159: LD_INT 3
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PPUSH
51166: CALL_OW 72
51170: ST_TO_ADDR
// if not factories then
51171: LD_VAR 0 6
51175: NOT
51176: IFFALSE 51180
// exit ;
51178: GO 52146
// for i in factories do
51180: LD_ADDR_VAR 0 8
51184: PUSH
51185: LD_VAR 0 6
51189: PUSH
51190: FOR_IN
51191: IFFALSE 51216
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51193: LD_ADDR_VAR 0 17
51197: PUSH
51198: LD_VAR 0 17
51202: PUSH
51203: LD_VAR 0 8
51207: PPUSH
51208: CALL_OW 478
51212: UNION
51213: ST_TO_ADDR
51214: GO 51190
51216: POP
51217: POP
// if not fac_list then
51218: LD_VAR 0 17
51222: NOT
51223: IFFALSE 51227
// exit ;
51225: GO 52146
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51227: LD_ADDR_VAR 0 5
51231: PUSH
51232: LD_INT 4
51234: PUSH
51235: LD_INT 5
51237: PUSH
51238: LD_INT 9
51240: PUSH
51241: LD_INT 10
51243: PUSH
51244: LD_INT 6
51246: PUSH
51247: LD_INT 7
51249: PUSH
51250: LD_INT 11
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 27
51264: PUSH
51265: LD_INT 28
51267: PUSH
51268: LD_INT 26
51270: PUSH
51271: LD_INT 30
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 43
51282: PUSH
51283: LD_INT 44
51285: PUSH
51286: LD_INT 46
51288: PUSH
51289: LD_INT 45
51291: PUSH
51292: LD_INT 47
51294: PUSH
51295: LD_INT 49
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: LIST
51310: PUSH
51311: LD_VAR 0 12
51315: ARRAY
51316: ST_TO_ADDR
// list := list isect fac_list ;
51317: LD_ADDR_VAR 0 5
51321: PUSH
51322: LD_VAR 0 5
51326: PUSH
51327: LD_VAR 0 17
51331: ISECT
51332: ST_TO_ADDR
// if not list then
51333: LD_VAR 0 5
51337: NOT
51338: IFFALSE 51342
// exit ;
51340: GO 52146
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51342: LD_VAR 0 12
51346: PUSH
51347: LD_INT 3
51349: EQUAL
51350: PUSH
51351: LD_INT 49
51353: PUSH
51354: LD_VAR 0 5
51358: IN
51359: AND
51360: PUSH
51361: LD_INT 31
51363: PPUSH
51364: LD_VAR 0 16
51368: PPUSH
51369: CALL_OW 321
51373: PUSH
51374: LD_INT 2
51376: EQUAL
51377: AND
51378: IFFALSE 51438
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51380: LD_INT 22
51382: PUSH
51383: LD_VAR 0 16
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 35
51394: PUSH
51395: LD_INT 49
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 91
51404: PUSH
51405: LD_VAR 0 1
51409: PUSH
51410: LD_INT 10
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: LIST
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: LIST
51422: PPUSH
51423: CALL_OW 69
51427: NOT
51428: IFFALSE 51438
// weapon := ru_time_lapser ;
51430: LD_ADDR_VAR 0 18
51434: PUSH
51435: LD_INT 49
51437: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51438: LD_VAR 0 12
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: IN
51453: PUSH
51454: LD_INT 11
51456: PUSH
51457: LD_VAR 0 5
51461: IN
51462: PUSH
51463: LD_INT 30
51465: PUSH
51466: LD_VAR 0 5
51470: IN
51471: OR
51472: AND
51473: PUSH
51474: LD_INT 6
51476: PPUSH
51477: LD_VAR 0 16
51481: PPUSH
51482: CALL_OW 321
51486: PUSH
51487: LD_INT 2
51489: EQUAL
51490: AND
51491: IFFALSE 51656
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51493: LD_INT 22
51495: PUSH
51496: LD_VAR 0 16
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: PUSH
51508: LD_INT 35
51510: PUSH
51511: LD_INT 11
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 35
51520: PUSH
51521: LD_INT 30
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 91
51535: PUSH
51536: LD_VAR 0 1
51540: PUSH
51541: LD_INT 18
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: LIST
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: LIST
51553: PPUSH
51554: CALL_OW 69
51558: NOT
51559: PUSH
51560: LD_INT 22
51562: PUSH
51563: LD_VAR 0 16
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 2
51574: PUSH
51575: LD_INT 30
51577: PUSH
51578: LD_INT 32
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 30
51587: PUSH
51588: LD_INT 33
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 91
51602: PUSH
51603: LD_VAR 0 1
51607: PUSH
51608: LD_INT 12
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: LIST
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: LIST
51620: PUSH
51621: EMPTY
51622: LIST
51623: PPUSH
51624: CALL_OW 69
51628: PUSH
51629: LD_INT 2
51631: GREATER
51632: AND
51633: IFFALSE 51656
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51635: LD_ADDR_VAR 0 18
51639: PUSH
51640: LD_INT 11
51642: PUSH
51643: LD_INT 30
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_VAR 0 12
51654: ARRAY
51655: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51656: LD_VAR 0 18
51660: NOT
51661: PUSH
51662: LD_INT 40
51664: PPUSH
51665: LD_VAR 0 16
51669: PPUSH
51670: CALL_OW 321
51674: PUSH
51675: LD_INT 2
51677: EQUAL
51678: AND
51679: PUSH
51680: LD_INT 7
51682: PUSH
51683: LD_VAR 0 5
51687: IN
51688: PUSH
51689: LD_INT 28
51691: PUSH
51692: LD_VAR 0 5
51696: IN
51697: OR
51698: PUSH
51699: LD_INT 45
51701: PUSH
51702: LD_VAR 0 5
51706: IN
51707: OR
51708: AND
51709: IFFALSE 51963
// begin hex := GetHexInfo ( x , y ) ;
51711: LD_ADDR_VAR 0 4
51715: PUSH
51716: LD_VAR 0 10
51720: PPUSH
51721: LD_VAR 0 11
51725: PPUSH
51726: CALL_OW 546
51730: ST_TO_ADDR
// if hex [ 1 ] then
51731: LD_VAR 0 4
51735: PUSH
51736: LD_INT 1
51738: ARRAY
51739: IFFALSE 51743
// exit ;
51741: GO 52146
// height := hex [ 2 ] ;
51743: LD_ADDR_VAR 0 15
51747: PUSH
51748: LD_VAR 0 4
51752: PUSH
51753: LD_INT 2
51755: ARRAY
51756: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51757: LD_ADDR_VAR 0 14
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: LD_INT 3
51770: PUSH
51771: LD_INT 5
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: ST_TO_ADDR
// for i in tmp do
51780: LD_ADDR_VAR 0 8
51784: PUSH
51785: LD_VAR 0 14
51789: PUSH
51790: FOR_IN
51791: IFFALSE 51961
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51793: LD_ADDR_VAR 0 9
51797: PUSH
51798: LD_VAR 0 10
51802: PPUSH
51803: LD_VAR 0 8
51807: PPUSH
51808: LD_INT 5
51810: PPUSH
51811: CALL_OW 272
51815: PUSH
51816: LD_VAR 0 11
51820: PPUSH
51821: LD_VAR 0 8
51825: PPUSH
51826: LD_INT 5
51828: PPUSH
51829: CALL_OW 273
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51838: LD_VAR 0 9
51842: PUSH
51843: LD_INT 1
51845: ARRAY
51846: PPUSH
51847: LD_VAR 0 9
51851: PUSH
51852: LD_INT 2
51854: ARRAY
51855: PPUSH
51856: CALL_OW 488
51860: IFFALSE 51959
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51862: LD_ADDR_VAR 0 4
51866: PUSH
51867: LD_VAR 0 9
51871: PUSH
51872: LD_INT 1
51874: ARRAY
51875: PPUSH
51876: LD_VAR 0 9
51880: PUSH
51881: LD_INT 2
51883: ARRAY
51884: PPUSH
51885: CALL_OW 546
51889: ST_TO_ADDR
// if hex [ 1 ] then
51890: LD_VAR 0 4
51894: PUSH
51895: LD_INT 1
51897: ARRAY
51898: IFFALSE 51902
// continue ;
51900: GO 51790
// h := hex [ 2 ] ;
51902: LD_ADDR_VAR 0 13
51906: PUSH
51907: LD_VAR 0 4
51911: PUSH
51912: LD_INT 2
51914: ARRAY
51915: ST_TO_ADDR
// if h + 7 < height then
51916: LD_VAR 0 13
51920: PUSH
51921: LD_INT 7
51923: PLUS
51924: PUSH
51925: LD_VAR 0 15
51929: LESS
51930: IFFALSE 51959
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51932: LD_ADDR_VAR 0 18
51936: PUSH
51937: LD_INT 7
51939: PUSH
51940: LD_INT 28
51942: PUSH
51943: LD_INT 45
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: LIST
51950: PUSH
51951: LD_VAR 0 12
51955: ARRAY
51956: ST_TO_ADDR
// break ;
51957: GO 51961
// end ; end ; end ;
51959: GO 51790
51961: POP
51962: POP
// end ; if not weapon then
51963: LD_VAR 0 18
51967: NOT
51968: IFFALSE 52028
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51970: LD_ADDR_VAR 0 5
51974: PUSH
51975: LD_VAR 0 5
51979: PUSH
51980: LD_INT 11
51982: PUSH
51983: LD_INT 30
51985: PUSH
51986: LD_INT 49
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: LIST
51993: DIFF
51994: ST_TO_ADDR
// if not list then
51995: LD_VAR 0 5
51999: NOT
52000: IFFALSE 52004
// exit ;
52002: GO 52146
// weapon := list [ rand ( 1 , list ) ] ;
52004: LD_ADDR_VAR 0 18
52008: PUSH
52009: LD_VAR 0 5
52013: PUSH
52014: LD_INT 1
52016: PPUSH
52017: LD_VAR 0 5
52021: PPUSH
52022: CALL_OW 12
52026: ARRAY
52027: ST_TO_ADDR
// end ; if weapon then
52028: LD_VAR 0 18
52032: IFFALSE 52146
// begin tmp := CostOfWeapon ( weapon ) ;
52034: LD_ADDR_VAR 0 14
52038: PUSH
52039: LD_VAR 0 18
52043: PPUSH
52044: CALL_OW 451
52048: ST_TO_ADDR
// j := GetBase ( tower ) ;
52049: LD_ADDR_VAR 0 9
52053: PUSH
52054: LD_VAR 0 1
52058: PPUSH
52059: CALL_OW 274
52063: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52064: LD_VAR 0 9
52068: PPUSH
52069: LD_INT 1
52071: PPUSH
52072: CALL_OW 275
52076: PUSH
52077: LD_VAR 0 14
52081: PUSH
52082: LD_INT 1
52084: ARRAY
52085: GREATEREQUAL
52086: PUSH
52087: LD_VAR 0 9
52091: PPUSH
52092: LD_INT 2
52094: PPUSH
52095: CALL_OW 275
52099: PUSH
52100: LD_VAR 0 14
52104: PUSH
52105: LD_INT 2
52107: ARRAY
52108: GREATEREQUAL
52109: AND
52110: PUSH
52111: LD_VAR 0 9
52115: PPUSH
52116: LD_INT 3
52118: PPUSH
52119: CALL_OW 275
52123: PUSH
52124: LD_VAR 0 14
52128: PUSH
52129: LD_INT 3
52131: ARRAY
52132: GREATEREQUAL
52133: AND
52134: IFFALSE 52146
// result := weapon ;
52136: LD_ADDR_VAR 0 3
52140: PUSH
52141: LD_VAR 0 18
52145: ST_TO_ADDR
// end ; end ;
52146: LD_VAR 0 3
52150: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52151: LD_INT 0
52153: PPUSH
52154: PPUSH
// result := true ;
52155: LD_ADDR_VAR 0 3
52159: PUSH
52160: LD_INT 1
52162: ST_TO_ADDR
// if array1 = array2 then
52163: LD_VAR 0 1
52167: PUSH
52168: LD_VAR 0 2
52172: EQUAL
52173: IFFALSE 52233
// begin for i = 1 to array1 do
52175: LD_ADDR_VAR 0 4
52179: PUSH
52180: DOUBLE
52181: LD_INT 1
52183: DEC
52184: ST_TO_ADDR
52185: LD_VAR 0 1
52189: PUSH
52190: FOR_TO
52191: IFFALSE 52229
// if array1 [ i ] <> array2 [ i ] then
52193: LD_VAR 0 1
52197: PUSH
52198: LD_VAR 0 4
52202: ARRAY
52203: PUSH
52204: LD_VAR 0 2
52208: PUSH
52209: LD_VAR 0 4
52213: ARRAY
52214: NONEQUAL
52215: IFFALSE 52227
// begin result := false ;
52217: LD_ADDR_VAR 0 3
52221: PUSH
52222: LD_INT 0
52224: ST_TO_ADDR
// break ;
52225: GO 52229
// end ;
52227: GO 52190
52229: POP
52230: POP
// end else
52231: GO 52241
// result := false ;
52233: LD_ADDR_VAR 0 3
52237: PUSH
52238: LD_INT 0
52240: ST_TO_ADDR
// end ;
52241: LD_VAR 0 3
52245: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52246: LD_INT 0
52248: PPUSH
52249: PPUSH
// if not array1 or not array2 then
52250: LD_VAR 0 1
52254: NOT
52255: PUSH
52256: LD_VAR 0 2
52260: NOT
52261: OR
52262: IFFALSE 52266
// exit ;
52264: GO 52330
// result := true ;
52266: LD_ADDR_VAR 0 3
52270: PUSH
52271: LD_INT 1
52273: ST_TO_ADDR
// for i = 1 to array1 do
52274: LD_ADDR_VAR 0 4
52278: PUSH
52279: DOUBLE
52280: LD_INT 1
52282: DEC
52283: ST_TO_ADDR
52284: LD_VAR 0 1
52288: PUSH
52289: FOR_TO
52290: IFFALSE 52328
// if array1 [ i ] <> array2 [ i ] then
52292: LD_VAR 0 1
52296: PUSH
52297: LD_VAR 0 4
52301: ARRAY
52302: PUSH
52303: LD_VAR 0 2
52307: PUSH
52308: LD_VAR 0 4
52312: ARRAY
52313: NONEQUAL
52314: IFFALSE 52326
// begin result := false ;
52316: LD_ADDR_VAR 0 3
52320: PUSH
52321: LD_INT 0
52323: ST_TO_ADDR
// break ;
52324: GO 52328
// end ;
52326: GO 52289
52328: POP
52329: POP
// end ;
52330: LD_VAR 0 3
52334: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52335: LD_INT 0
52337: PPUSH
52338: PPUSH
52339: PPUSH
// pom := GetBase ( fac ) ;
52340: LD_ADDR_VAR 0 5
52344: PUSH
52345: LD_VAR 0 1
52349: PPUSH
52350: CALL_OW 274
52354: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52355: LD_ADDR_VAR 0 4
52359: PUSH
52360: LD_VAR 0 2
52364: PUSH
52365: LD_INT 1
52367: ARRAY
52368: PPUSH
52369: LD_VAR 0 2
52373: PUSH
52374: LD_INT 2
52376: ARRAY
52377: PPUSH
52378: LD_VAR 0 2
52382: PUSH
52383: LD_INT 3
52385: ARRAY
52386: PPUSH
52387: LD_VAR 0 2
52391: PUSH
52392: LD_INT 4
52394: ARRAY
52395: PPUSH
52396: CALL_OW 449
52400: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52401: LD_ADDR_VAR 0 3
52405: PUSH
52406: LD_VAR 0 5
52410: PPUSH
52411: LD_INT 1
52413: PPUSH
52414: CALL_OW 275
52418: PUSH
52419: LD_VAR 0 4
52423: PUSH
52424: LD_INT 1
52426: ARRAY
52427: GREATEREQUAL
52428: PUSH
52429: LD_VAR 0 5
52433: PPUSH
52434: LD_INT 2
52436: PPUSH
52437: CALL_OW 275
52441: PUSH
52442: LD_VAR 0 4
52446: PUSH
52447: LD_INT 2
52449: ARRAY
52450: GREATEREQUAL
52451: AND
52452: PUSH
52453: LD_VAR 0 5
52457: PPUSH
52458: LD_INT 3
52460: PPUSH
52461: CALL_OW 275
52465: PUSH
52466: LD_VAR 0 4
52470: PUSH
52471: LD_INT 3
52473: ARRAY
52474: GREATEREQUAL
52475: AND
52476: ST_TO_ADDR
// end ;
52477: LD_VAR 0 3
52481: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52482: LD_INT 0
52484: PPUSH
52485: PPUSH
52486: PPUSH
52487: PPUSH
// pom := GetBase ( building ) ;
52488: LD_ADDR_VAR 0 3
52492: PUSH
52493: LD_VAR 0 1
52497: PPUSH
52498: CALL_OW 274
52502: ST_TO_ADDR
// if not pom then
52503: LD_VAR 0 3
52507: NOT
52508: IFFALSE 52512
// exit ;
52510: GO 52682
// btype := GetBType ( building ) ;
52512: LD_ADDR_VAR 0 5
52516: PUSH
52517: LD_VAR 0 1
52521: PPUSH
52522: CALL_OW 266
52526: ST_TO_ADDR
// if btype = b_armoury then
52527: LD_VAR 0 5
52531: PUSH
52532: LD_INT 4
52534: EQUAL
52535: IFFALSE 52545
// btype := b_barracks ;
52537: LD_ADDR_VAR 0 5
52541: PUSH
52542: LD_INT 5
52544: ST_TO_ADDR
// if btype = b_depot then
52545: LD_VAR 0 5
52549: PUSH
52550: LD_INT 0
52552: EQUAL
52553: IFFALSE 52563
// btype := b_warehouse ;
52555: LD_ADDR_VAR 0 5
52559: PUSH
52560: LD_INT 1
52562: ST_TO_ADDR
// if btype = b_workshop then
52563: LD_VAR 0 5
52567: PUSH
52568: LD_INT 2
52570: EQUAL
52571: IFFALSE 52581
// btype := b_factory ;
52573: LD_ADDR_VAR 0 5
52577: PUSH
52578: LD_INT 3
52580: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52581: LD_ADDR_VAR 0 4
52585: PUSH
52586: LD_VAR 0 5
52590: PPUSH
52591: LD_VAR 0 1
52595: PPUSH
52596: CALL_OW 248
52600: PPUSH
52601: CALL_OW 450
52605: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52606: LD_ADDR_VAR 0 2
52610: PUSH
52611: LD_VAR 0 3
52615: PPUSH
52616: LD_INT 1
52618: PPUSH
52619: CALL_OW 275
52623: PUSH
52624: LD_VAR 0 4
52628: PUSH
52629: LD_INT 1
52631: ARRAY
52632: GREATEREQUAL
52633: PUSH
52634: LD_VAR 0 3
52638: PPUSH
52639: LD_INT 2
52641: PPUSH
52642: CALL_OW 275
52646: PUSH
52647: LD_VAR 0 4
52651: PUSH
52652: LD_INT 2
52654: ARRAY
52655: GREATEREQUAL
52656: AND
52657: PUSH
52658: LD_VAR 0 3
52662: PPUSH
52663: LD_INT 3
52665: PPUSH
52666: CALL_OW 275
52670: PUSH
52671: LD_VAR 0 4
52675: PUSH
52676: LD_INT 3
52678: ARRAY
52679: GREATEREQUAL
52680: AND
52681: ST_TO_ADDR
// end ;
52682: LD_VAR 0 2
52686: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52687: LD_INT 0
52689: PPUSH
52690: PPUSH
52691: PPUSH
// pom := GetBase ( building ) ;
52692: LD_ADDR_VAR 0 4
52696: PUSH
52697: LD_VAR 0 1
52701: PPUSH
52702: CALL_OW 274
52706: ST_TO_ADDR
// if not pom then
52707: LD_VAR 0 4
52711: NOT
52712: IFFALSE 52716
// exit ;
52714: GO 52817
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52716: LD_ADDR_VAR 0 5
52720: PUSH
52721: LD_VAR 0 2
52725: PPUSH
52726: LD_VAR 0 1
52730: PPUSH
52731: CALL_OW 248
52735: PPUSH
52736: CALL_OW 450
52740: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52741: LD_ADDR_VAR 0 3
52745: PUSH
52746: LD_VAR 0 4
52750: PPUSH
52751: LD_INT 1
52753: PPUSH
52754: CALL_OW 275
52758: PUSH
52759: LD_VAR 0 5
52763: PUSH
52764: LD_INT 1
52766: ARRAY
52767: GREATEREQUAL
52768: PUSH
52769: LD_VAR 0 4
52773: PPUSH
52774: LD_INT 2
52776: PPUSH
52777: CALL_OW 275
52781: PUSH
52782: LD_VAR 0 5
52786: PUSH
52787: LD_INT 2
52789: ARRAY
52790: GREATEREQUAL
52791: AND
52792: PUSH
52793: LD_VAR 0 4
52797: PPUSH
52798: LD_INT 3
52800: PPUSH
52801: CALL_OW 275
52805: PUSH
52806: LD_VAR 0 5
52810: PUSH
52811: LD_INT 3
52813: ARRAY
52814: GREATEREQUAL
52815: AND
52816: ST_TO_ADDR
// end ;
52817: LD_VAR 0 3
52821: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52822: LD_INT 0
52824: PPUSH
52825: PPUSH
52826: PPUSH
52827: PPUSH
52828: PPUSH
52829: PPUSH
52830: PPUSH
52831: PPUSH
52832: PPUSH
52833: PPUSH
52834: PPUSH
// result := false ;
52835: LD_ADDR_VAR 0 8
52839: PUSH
52840: LD_INT 0
52842: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52843: LD_VAR 0 5
52847: NOT
52848: PUSH
52849: LD_VAR 0 1
52853: NOT
52854: OR
52855: PUSH
52856: LD_VAR 0 2
52860: NOT
52861: OR
52862: PUSH
52863: LD_VAR 0 3
52867: NOT
52868: OR
52869: IFFALSE 52873
// exit ;
52871: GO 53687
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52873: LD_ADDR_VAR 0 14
52877: PUSH
52878: LD_VAR 0 1
52882: PPUSH
52883: LD_VAR 0 2
52887: PPUSH
52888: LD_VAR 0 3
52892: PPUSH
52893: LD_VAR 0 4
52897: PPUSH
52898: LD_VAR 0 5
52902: PUSH
52903: LD_INT 1
52905: ARRAY
52906: PPUSH
52907: CALL_OW 248
52911: PPUSH
52912: LD_INT 0
52914: PPUSH
52915: CALL 54940 0 6
52919: ST_TO_ADDR
// if not hexes then
52920: LD_VAR 0 14
52924: NOT
52925: IFFALSE 52929
// exit ;
52927: GO 53687
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52929: LD_ADDR_VAR 0 17
52933: PUSH
52934: LD_VAR 0 5
52938: PPUSH
52939: LD_INT 22
52941: PUSH
52942: LD_VAR 0 13
52946: PPUSH
52947: CALL_OW 255
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 2
52958: PUSH
52959: LD_INT 30
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 30
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: LIST
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PPUSH
52988: CALL_OW 72
52992: ST_TO_ADDR
// for i = 1 to hexes do
52993: LD_ADDR_VAR 0 9
52997: PUSH
52998: DOUBLE
52999: LD_INT 1
53001: DEC
53002: ST_TO_ADDR
53003: LD_VAR 0 14
53007: PUSH
53008: FOR_TO
53009: IFFALSE 53685
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53011: LD_ADDR_VAR 0 13
53015: PUSH
53016: LD_VAR 0 14
53020: PUSH
53021: LD_VAR 0 9
53025: ARRAY
53026: PUSH
53027: LD_INT 1
53029: ARRAY
53030: PPUSH
53031: LD_VAR 0 14
53035: PUSH
53036: LD_VAR 0 9
53040: ARRAY
53041: PUSH
53042: LD_INT 2
53044: ARRAY
53045: PPUSH
53046: CALL_OW 428
53050: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53051: LD_VAR 0 14
53055: PUSH
53056: LD_VAR 0 9
53060: ARRAY
53061: PUSH
53062: LD_INT 1
53064: ARRAY
53065: PPUSH
53066: LD_VAR 0 14
53070: PUSH
53071: LD_VAR 0 9
53075: ARRAY
53076: PUSH
53077: LD_INT 2
53079: ARRAY
53080: PPUSH
53081: CALL_OW 351
53085: PUSH
53086: LD_VAR 0 14
53090: PUSH
53091: LD_VAR 0 9
53095: ARRAY
53096: PUSH
53097: LD_INT 1
53099: ARRAY
53100: PPUSH
53101: LD_VAR 0 14
53105: PUSH
53106: LD_VAR 0 9
53110: ARRAY
53111: PUSH
53112: LD_INT 2
53114: ARRAY
53115: PPUSH
53116: CALL_OW 488
53120: NOT
53121: OR
53122: PUSH
53123: LD_VAR 0 13
53127: PPUSH
53128: CALL_OW 247
53132: PUSH
53133: LD_INT 3
53135: EQUAL
53136: OR
53137: IFFALSE 53143
// exit ;
53139: POP
53140: POP
53141: GO 53687
// if not tmp then
53143: LD_VAR 0 13
53147: NOT
53148: IFFALSE 53152
// continue ;
53150: GO 53008
// result := true ;
53152: LD_ADDR_VAR 0 8
53156: PUSH
53157: LD_INT 1
53159: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53160: LD_VAR 0 6
53164: PUSH
53165: LD_VAR 0 13
53169: PPUSH
53170: CALL_OW 247
53174: PUSH
53175: LD_INT 2
53177: EQUAL
53178: AND
53179: PUSH
53180: LD_VAR 0 13
53184: PPUSH
53185: CALL_OW 263
53189: PUSH
53190: LD_INT 1
53192: EQUAL
53193: AND
53194: IFFALSE 53358
// begin if IsDrivenBy ( tmp ) then
53196: LD_VAR 0 13
53200: PPUSH
53201: CALL_OW 311
53205: IFFALSE 53209
// continue ;
53207: GO 53008
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53209: LD_VAR 0 6
53213: PPUSH
53214: LD_INT 3
53216: PUSH
53217: LD_INT 60
53219: PUSH
53220: EMPTY
53221: LIST
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 3
53229: PUSH
53230: LD_INT 55
53232: PUSH
53233: EMPTY
53234: LIST
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PPUSH
53244: CALL_OW 72
53248: IFFALSE 53356
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53250: LD_ADDR_VAR 0 18
53254: PUSH
53255: LD_VAR 0 6
53259: PPUSH
53260: LD_INT 3
53262: PUSH
53263: LD_INT 60
53265: PUSH
53266: EMPTY
53267: LIST
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 3
53275: PUSH
53276: LD_INT 55
53278: PUSH
53279: EMPTY
53280: LIST
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PPUSH
53290: CALL_OW 72
53294: PUSH
53295: LD_INT 1
53297: ARRAY
53298: ST_TO_ADDR
// if IsInUnit ( driver ) then
53299: LD_VAR 0 18
53303: PPUSH
53304: CALL_OW 310
53308: IFFALSE 53319
// ComExit ( driver ) ;
53310: LD_VAR 0 18
53314: PPUSH
53315: CALL 78741 0 1
// AddComEnterUnit ( driver , tmp ) ;
53319: LD_VAR 0 18
53323: PPUSH
53324: LD_VAR 0 13
53328: PPUSH
53329: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53333: LD_VAR 0 18
53337: PPUSH
53338: LD_VAR 0 7
53342: PPUSH
53343: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53347: LD_VAR 0 18
53351: PPUSH
53352: CALL_OW 181
// end ; continue ;
53356: GO 53008
// end ; if not cleaners or not tmp in cleaners then
53358: LD_VAR 0 6
53362: NOT
53363: PUSH
53364: LD_VAR 0 13
53368: PUSH
53369: LD_VAR 0 6
53373: IN
53374: NOT
53375: OR
53376: IFFALSE 53683
// begin if dep then
53378: LD_VAR 0 17
53382: IFFALSE 53518
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53384: LD_ADDR_VAR 0 16
53388: PUSH
53389: LD_VAR 0 17
53393: PUSH
53394: LD_INT 1
53396: ARRAY
53397: PPUSH
53398: CALL_OW 250
53402: PPUSH
53403: LD_VAR 0 17
53407: PUSH
53408: LD_INT 1
53410: ARRAY
53411: PPUSH
53412: CALL_OW 254
53416: PPUSH
53417: LD_INT 5
53419: PPUSH
53420: CALL_OW 272
53424: PUSH
53425: LD_VAR 0 17
53429: PUSH
53430: LD_INT 1
53432: ARRAY
53433: PPUSH
53434: CALL_OW 251
53438: PPUSH
53439: LD_VAR 0 17
53443: PUSH
53444: LD_INT 1
53446: ARRAY
53447: PPUSH
53448: CALL_OW 254
53452: PPUSH
53453: LD_INT 5
53455: PPUSH
53456: CALL_OW 273
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53465: LD_VAR 0 16
53469: PUSH
53470: LD_INT 1
53472: ARRAY
53473: PPUSH
53474: LD_VAR 0 16
53478: PUSH
53479: LD_INT 2
53481: ARRAY
53482: PPUSH
53483: CALL_OW 488
53487: IFFALSE 53518
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53489: LD_VAR 0 13
53493: PPUSH
53494: LD_VAR 0 16
53498: PUSH
53499: LD_INT 1
53501: ARRAY
53502: PPUSH
53503: LD_VAR 0 16
53507: PUSH
53508: LD_INT 2
53510: ARRAY
53511: PPUSH
53512: CALL_OW 111
// continue ;
53516: GO 53008
// end ; end ; r := GetDir ( tmp ) ;
53518: LD_ADDR_VAR 0 15
53522: PUSH
53523: LD_VAR 0 13
53527: PPUSH
53528: CALL_OW 254
53532: ST_TO_ADDR
// if r = 5 then
53533: LD_VAR 0 15
53537: PUSH
53538: LD_INT 5
53540: EQUAL
53541: IFFALSE 53551
// r := 0 ;
53543: LD_ADDR_VAR 0 15
53547: PUSH
53548: LD_INT 0
53550: ST_TO_ADDR
// for j = r to 5 do
53551: LD_ADDR_VAR 0 10
53555: PUSH
53556: DOUBLE
53557: LD_VAR 0 15
53561: DEC
53562: ST_TO_ADDR
53563: LD_INT 5
53565: PUSH
53566: FOR_TO
53567: IFFALSE 53681
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53569: LD_ADDR_VAR 0 11
53573: PUSH
53574: LD_VAR 0 13
53578: PPUSH
53579: CALL_OW 250
53583: PPUSH
53584: LD_VAR 0 10
53588: PPUSH
53589: LD_INT 2
53591: PPUSH
53592: CALL_OW 272
53596: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53597: LD_ADDR_VAR 0 12
53601: PUSH
53602: LD_VAR 0 13
53606: PPUSH
53607: CALL_OW 251
53611: PPUSH
53612: LD_VAR 0 10
53616: PPUSH
53617: LD_INT 2
53619: PPUSH
53620: CALL_OW 273
53624: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53625: LD_VAR 0 11
53629: PPUSH
53630: LD_VAR 0 12
53634: PPUSH
53635: CALL_OW 488
53639: PUSH
53640: LD_VAR 0 11
53644: PPUSH
53645: LD_VAR 0 12
53649: PPUSH
53650: CALL_OW 428
53654: NOT
53655: AND
53656: IFFALSE 53679
// begin ComMoveXY ( tmp , _x , _y ) ;
53658: LD_VAR 0 13
53662: PPUSH
53663: LD_VAR 0 11
53667: PPUSH
53668: LD_VAR 0 12
53672: PPUSH
53673: CALL_OW 111
// break ;
53677: GO 53681
// end ; end ;
53679: GO 53566
53681: POP
53682: POP
// end ; end ;
53683: GO 53008
53685: POP
53686: POP
// end ;
53687: LD_VAR 0 8
53691: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53692: LD_INT 0
53694: PPUSH
// result := true ;
53695: LD_ADDR_VAR 0 3
53699: PUSH
53700: LD_INT 1
53702: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53703: LD_VAR 0 2
53707: PUSH
53708: LD_INT 24
53710: DOUBLE
53711: EQUAL
53712: IFTRUE 53722
53714: LD_INT 33
53716: DOUBLE
53717: EQUAL
53718: IFTRUE 53722
53720: GO 53747
53722: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53723: LD_ADDR_VAR 0 3
53727: PUSH
53728: LD_INT 32
53730: PPUSH
53731: LD_VAR 0 1
53735: PPUSH
53736: CALL_OW 321
53740: PUSH
53741: LD_INT 2
53743: EQUAL
53744: ST_TO_ADDR
53745: GO 54063
53747: LD_INT 20
53749: DOUBLE
53750: EQUAL
53751: IFTRUE 53755
53753: GO 53780
53755: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53756: LD_ADDR_VAR 0 3
53760: PUSH
53761: LD_INT 6
53763: PPUSH
53764: LD_VAR 0 1
53768: PPUSH
53769: CALL_OW 321
53773: PUSH
53774: LD_INT 2
53776: EQUAL
53777: ST_TO_ADDR
53778: GO 54063
53780: LD_INT 22
53782: DOUBLE
53783: EQUAL
53784: IFTRUE 53794
53786: LD_INT 36
53788: DOUBLE
53789: EQUAL
53790: IFTRUE 53794
53792: GO 53819
53794: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53795: LD_ADDR_VAR 0 3
53799: PUSH
53800: LD_INT 15
53802: PPUSH
53803: LD_VAR 0 1
53807: PPUSH
53808: CALL_OW 321
53812: PUSH
53813: LD_INT 2
53815: EQUAL
53816: ST_TO_ADDR
53817: GO 54063
53819: LD_INT 30
53821: DOUBLE
53822: EQUAL
53823: IFTRUE 53827
53825: GO 53852
53827: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53828: LD_ADDR_VAR 0 3
53832: PUSH
53833: LD_INT 20
53835: PPUSH
53836: LD_VAR 0 1
53840: PPUSH
53841: CALL_OW 321
53845: PUSH
53846: LD_INT 2
53848: EQUAL
53849: ST_TO_ADDR
53850: GO 54063
53852: LD_INT 28
53854: DOUBLE
53855: EQUAL
53856: IFTRUE 53866
53858: LD_INT 21
53860: DOUBLE
53861: EQUAL
53862: IFTRUE 53866
53864: GO 53891
53866: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53867: LD_ADDR_VAR 0 3
53871: PUSH
53872: LD_INT 21
53874: PPUSH
53875: LD_VAR 0 1
53879: PPUSH
53880: CALL_OW 321
53884: PUSH
53885: LD_INT 2
53887: EQUAL
53888: ST_TO_ADDR
53889: GO 54063
53891: LD_INT 16
53893: DOUBLE
53894: EQUAL
53895: IFTRUE 53899
53897: GO 53924
53899: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53900: LD_ADDR_VAR 0 3
53904: PUSH
53905: LD_INT 84
53907: PPUSH
53908: LD_VAR 0 1
53912: PPUSH
53913: CALL_OW 321
53917: PUSH
53918: LD_INT 2
53920: EQUAL
53921: ST_TO_ADDR
53922: GO 54063
53924: LD_INT 19
53926: DOUBLE
53927: EQUAL
53928: IFTRUE 53938
53930: LD_INT 23
53932: DOUBLE
53933: EQUAL
53934: IFTRUE 53938
53936: GO 53963
53938: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53939: LD_ADDR_VAR 0 3
53943: PUSH
53944: LD_INT 83
53946: PPUSH
53947: LD_VAR 0 1
53951: PPUSH
53952: CALL_OW 321
53956: PUSH
53957: LD_INT 2
53959: EQUAL
53960: ST_TO_ADDR
53961: GO 54063
53963: LD_INT 17
53965: DOUBLE
53966: EQUAL
53967: IFTRUE 53971
53969: GO 53996
53971: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53972: LD_ADDR_VAR 0 3
53976: PUSH
53977: LD_INT 39
53979: PPUSH
53980: LD_VAR 0 1
53984: PPUSH
53985: CALL_OW 321
53989: PUSH
53990: LD_INT 2
53992: EQUAL
53993: ST_TO_ADDR
53994: GO 54063
53996: LD_INT 18
53998: DOUBLE
53999: EQUAL
54000: IFTRUE 54004
54002: GO 54029
54004: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54005: LD_ADDR_VAR 0 3
54009: PUSH
54010: LD_INT 40
54012: PPUSH
54013: LD_VAR 0 1
54017: PPUSH
54018: CALL_OW 321
54022: PUSH
54023: LD_INT 2
54025: EQUAL
54026: ST_TO_ADDR
54027: GO 54063
54029: LD_INT 27
54031: DOUBLE
54032: EQUAL
54033: IFTRUE 54037
54035: GO 54062
54037: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54038: LD_ADDR_VAR 0 3
54042: PUSH
54043: LD_INT 35
54045: PPUSH
54046: LD_VAR 0 1
54050: PPUSH
54051: CALL_OW 321
54055: PUSH
54056: LD_INT 2
54058: EQUAL
54059: ST_TO_ADDR
54060: GO 54063
54062: POP
// end ;
54063: LD_VAR 0 3
54067: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54068: LD_INT 0
54070: PPUSH
54071: PPUSH
54072: PPUSH
54073: PPUSH
54074: PPUSH
54075: PPUSH
54076: PPUSH
54077: PPUSH
54078: PPUSH
54079: PPUSH
54080: PPUSH
// result := false ;
54081: LD_ADDR_VAR 0 6
54085: PUSH
54086: LD_INT 0
54088: ST_TO_ADDR
// if btype = b_depot then
54089: LD_VAR 0 2
54093: PUSH
54094: LD_INT 0
54096: EQUAL
54097: IFFALSE 54109
// begin result := true ;
54099: LD_ADDR_VAR 0 6
54103: PUSH
54104: LD_INT 1
54106: ST_TO_ADDR
// exit ;
54107: GO 54935
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54109: LD_VAR 0 1
54113: NOT
54114: PUSH
54115: LD_VAR 0 1
54119: PPUSH
54120: CALL_OW 266
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: IN
54135: NOT
54136: OR
54137: PUSH
54138: LD_VAR 0 2
54142: NOT
54143: OR
54144: PUSH
54145: LD_VAR 0 5
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: LD_INT 2
54158: PUSH
54159: LD_INT 3
54161: PUSH
54162: LD_INT 4
54164: PUSH
54165: LD_INT 5
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: IN
54176: NOT
54177: OR
54178: PUSH
54179: LD_VAR 0 3
54183: PPUSH
54184: LD_VAR 0 4
54188: PPUSH
54189: CALL_OW 488
54193: NOT
54194: OR
54195: IFFALSE 54199
// exit ;
54197: GO 54935
// side := GetSide ( depot ) ;
54199: LD_ADDR_VAR 0 9
54203: PUSH
54204: LD_VAR 0 1
54208: PPUSH
54209: CALL_OW 255
54213: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54214: LD_VAR 0 9
54218: PPUSH
54219: LD_VAR 0 2
54223: PPUSH
54224: CALL 53692 0 2
54228: NOT
54229: IFFALSE 54233
// exit ;
54231: GO 54935
// pom := GetBase ( depot ) ;
54233: LD_ADDR_VAR 0 10
54237: PUSH
54238: LD_VAR 0 1
54242: PPUSH
54243: CALL_OW 274
54247: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54248: LD_ADDR_VAR 0 11
54252: PUSH
54253: LD_VAR 0 2
54257: PPUSH
54258: LD_VAR 0 1
54262: PPUSH
54263: CALL_OW 248
54267: PPUSH
54268: CALL_OW 450
54272: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54273: LD_VAR 0 10
54277: PPUSH
54278: LD_INT 1
54280: PPUSH
54281: CALL_OW 275
54285: PUSH
54286: LD_VAR 0 11
54290: PUSH
54291: LD_INT 1
54293: ARRAY
54294: GREATEREQUAL
54295: PUSH
54296: LD_VAR 0 10
54300: PPUSH
54301: LD_INT 2
54303: PPUSH
54304: CALL_OW 275
54308: PUSH
54309: LD_VAR 0 11
54313: PUSH
54314: LD_INT 2
54316: ARRAY
54317: GREATEREQUAL
54318: AND
54319: PUSH
54320: LD_VAR 0 10
54324: PPUSH
54325: LD_INT 3
54327: PPUSH
54328: CALL_OW 275
54332: PUSH
54333: LD_VAR 0 11
54337: PUSH
54338: LD_INT 3
54340: ARRAY
54341: GREATEREQUAL
54342: AND
54343: NOT
54344: IFFALSE 54348
// exit ;
54346: GO 54935
// if GetBType ( depot ) = b_depot then
54348: LD_VAR 0 1
54352: PPUSH
54353: CALL_OW 266
54357: PUSH
54358: LD_INT 0
54360: EQUAL
54361: IFFALSE 54373
// dist := 28 else
54363: LD_ADDR_VAR 0 14
54367: PUSH
54368: LD_INT 28
54370: ST_TO_ADDR
54371: GO 54381
// dist := 36 ;
54373: LD_ADDR_VAR 0 14
54377: PUSH
54378: LD_INT 36
54380: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54381: LD_VAR 0 1
54385: PPUSH
54386: LD_VAR 0 3
54390: PPUSH
54391: LD_VAR 0 4
54395: PPUSH
54396: CALL_OW 297
54400: PUSH
54401: LD_VAR 0 14
54405: GREATER
54406: IFFALSE 54410
// exit ;
54408: GO 54935
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54410: LD_ADDR_VAR 0 12
54414: PUSH
54415: LD_VAR 0 2
54419: PPUSH
54420: LD_VAR 0 3
54424: PPUSH
54425: LD_VAR 0 4
54429: PPUSH
54430: LD_VAR 0 5
54434: PPUSH
54435: LD_VAR 0 1
54439: PPUSH
54440: CALL_OW 248
54444: PPUSH
54445: LD_INT 0
54447: PPUSH
54448: CALL 54940 0 6
54452: ST_TO_ADDR
// if not hexes then
54453: LD_VAR 0 12
54457: NOT
54458: IFFALSE 54462
// exit ;
54460: GO 54935
// hex := GetHexInfo ( x , y ) ;
54462: LD_ADDR_VAR 0 15
54466: PUSH
54467: LD_VAR 0 3
54471: PPUSH
54472: LD_VAR 0 4
54476: PPUSH
54477: CALL_OW 546
54481: ST_TO_ADDR
// if hex [ 1 ] then
54482: LD_VAR 0 15
54486: PUSH
54487: LD_INT 1
54489: ARRAY
54490: IFFALSE 54494
// exit ;
54492: GO 54935
// height := hex [ 2 ] ;
54494: LD_ADDR_VAR 0 13
54498: PUSH
54499: LD_VAR 0 15
54503: PUSH
54504: LD_INT 2
54506: ARRAY
54507: ST_TO_ADDR
// for i = 1 to hexes do
54508: LD_ADDR_VAR 0 7
54512: PUSH
54513: DOUBLE
54514: LD_INT 1
54516: DEC
54517: ST_TO_ADDR
54518: LD_VAR 0 12
54522: PUSH
54523: FOR_TO
54524: IFFALSE 54854
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54526: LD_VAR 0 12
54530: PUSH
54531: LD_VAR 0 7
54535: ARRAY
54536: PUSH
54537: LD_INT 1
54539: ARRAY
54540: PPUSH
54541: LD_VAR 0 12
54545: PUSH
54546: LD_VAR 0 7
54550: ARRAY
54551: PUSH
54552: LD_INT 2
54554: ARRAY
54555: PPUSH
54556: CALL_OW 488
54560: NOT
54561: PUSH
54562: LD_VAR 0 12
54566: PUSH
54567: LD_VAR 0 7
54571: ARRAY
54572: PUSH
54573: LD_INT 1
54575: ARRAY
54576: PPUSH
54577: LD_VAR 0 12
54581: PUSH
54582: LD_VAR 0 7
54586: ARRAY
54587: PUSH
54588: LD_INT 2
54590: ARRAY
54591: PPUSH
54592: CALL_OW 428
54596: PUSH
54597: LD_INT 0
54599: GREATER
54600: OR
54601: PUSH
54602: LD_VAR 0 12
54606: PUSH
54607: LD_VAR 0 7
54611: ARRAY
54612: PUSH
54613: LD_INT 1
54615: ARRAY
54616: PPUSH
54617: LD_VAR 0 12
54621: PUSH
54622: LD_VAR 0 7
54626: ARRAY
54627: PUSH
54628: LD_INT 2
54630: ARRAY
54631: PPUSH
54632: CALL_OW 351
54636: OR
54637: IFFALSE 54643
// exit ;
54639: POP
54640: POP
54641: GO 54935
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54643: LD_ADDR_VAR 0 8
54647: PUSH
54648: LD_VAR 0 12
54652: PUSH
54653: LD_VAR 0 7
54657: ARRAY
54658: PUSH
54659: LD_INT 1
54661: ARRAY
54662: PPUSH
54663: LD_VAR 0 12
54667: PUSH
54668: LD_VAR 0 7
54672: ARRAY
54673: PUSH
54674: LD_INT 2
54676: ARRAY
54677: PPUSH
54678: CALL_OW 546
54682: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54683: LD_VAR 0 8
54687: PUSH
54688: LD_INT 1
54690: ARRAY
54691: PUSH
54692: LD_VAR 0 8
54696: PUSH
54697: LD_INT 2
54699: ARRAY
54700: PUSH
54701: LD_VAR 0 13
54705: PUSH
54706: LD_INT 2
54708: PLUS
54709: GREATER
54710: OR
54711: PUSH
54712: LD_VAR 0 8
54716: PUSH
54717: LD_INT 2
54719: ARRAY
54720: PUSH
54721: LD_VAR 0 13
54725: PUSH
54726: LD_INT 2
54728: MINUS
54729: LESS
54730: OR
54731: PUSH
54732: LD_VAR 0 8
54736: PUSH
54737: LD_INT 3
54739: ARRAY
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: LD_INT 8
54746: PUSH
54747: LD_INT 9
54749: PUSH
54750: LD_INT 10
54752: PUSH
54753: LD_INT 11
54755: PUSH
54756: LD_INT 12
54758: PUSH
54759: LD_INT 13
54761: PUSH
54762: LD_INT 16
54764: PUSH
54765: LD_INT 17
54767: PUSH
54768: LD_INT 18
54770: PUSH
54771: LD_INT 19
54773: PUSH
54774: LD_INT 20
54776: PUSH
54777: LD_INT 21
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: IN
54795: NOT
54796: OR
54797: PUSH
54798: LD_VAR 0 8
54802: PUSH
54803: LD_INT 5
54805: ARRAY
54806: NOT
54807: OR
54808: PUSH
54809: LD_VAR 0 8
54813: PUSH
54814: LD_INT 6
54816: ARRAY
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: LD_INT 2
54823: PUSH
54824: LD_INT 7
54826: PUSH
54827: LD_INT 9
54829: PUSH
54830: LD_INT 10
54832: PUSH
54833: LD_INT 11
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: IN
54844: NOT
54845: OR
54846: IFFALSE 54852
// exit ;
54848: POP
54849: POP
54850: GO 54935
// end ;
54852: GO 54523
54854: POP
54855: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54856: LD_VAR 0 9
54860: PPUSH
54861: LD_VAR 0 3
54865: PPUSH
54866: LD_VAR 0 4
54870: PPUSH
54871: LD_INT 20
54873: PPUSH
54874: CALL 46858 0 4
54878: PUSH
54879: LD_INT 4
54881: ARRAY
54882: IFFALSE 54886
// exit ;
54884: GO 54935
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54886: LD_VAR 0 2
54890: PUSH
54891: LD_INT 29
54893: PUSH
54894: LD_INT 30
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: IN
54901: PUSH
54902: LD_VAR 0 3
54906: PPUSH
54907: LD_VAR 0 4
54911: PPUSH
54912: LD_VAR 0 9
54916: PPUSH
54917: CALL_OW 440
54921: NOT
54922: AND
54923: IFFALSE 54927
// exit ;
54925: GO 54935
// result := true ;
54927: LD_ADDR_VAR 0 6
54931: PUSH
54932: LD_INT 1
54934: ST_TO_ADDR
// end ;
54935: LD_VAR 0 6
54939: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54940: LD_INT 0
54942: PPUSH
54943: PPUSH
54944: PPUSH
54945: PPUSH
54946: PPUSH
54947: PPUSH
54948: PPUSH
54949: PPUSH
54950: PPUSH
54951: PPUSH
54952: PPUSH
54953: PPUSH
54954: PPUSH
54955: PPUSH
54956: PPUSH
54957: PPUSH
54958: PPUSH
54959: PPUSH
54960: PPUSH
54961: PPUSH
54962: PPUSH
54963: PPUSH
54964: PPUSH
54965: PPUSH
54966: PPUSH
54967: PPUSH
54968: PPUSH
54969: PPUSH
54970: PPUSH
54971: PPUSH
54972: PPUSH
54973: PPUSH
54974: PPUSH
54975: PPUSH
54976: PPUSH
54977: PPUSH
54978: PPUSH
54979: PPUSH
54980: PPUSH
54981: PPUSH
54982: PPUSH
54983: PPUSH
54984: PPUSH
54985: PPUSH
54986: PPUSH
54987: PPUSH
54988: PPUSH
54989: PPUSH
54990: PPUSH
54991: PPUSH
54992: PPUSH
54993: PPUSH
54994: PPUSH
54995: PPUSH
54996: PPUSH
54997: PPUSH
54998: PPUSH
54999: PPUSH
// result = [ ] ;
55000: LD_ADDR_VAR 0 7
55004: PUSH
55005: EMPTY
55006: ST_TO_ADDR
// temp_list = [ ] ;
55007: LD_ADDR_VAR 0 9
55011: PUSH
55012: EMPTY
55013: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55014: LD_VAR 0 4
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: LD_INT 3
55030: PUSH
55031: LD_INT 4
55033: PUSH
55034: LD_INT 5
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: IN
55045: NOT
55046: PUSH
55047: LD_VAR 0 1
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: IN
55062: PUSH
55063: LD_VAR 0 5
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: LD_INT 3
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: LIST
55081: IN
55082: NOT
55083: AND
55084: OR
55085: IFFALSE 55089
// exit ;
55087: GO 73480
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55089: LD_VAR 0 1
55093: PUSH
55094: LD_INT 6
55096: PUSH
55097: LD_INT 7
55099: PUSH
55100: LD_INT 8
55102: PUSH
55103: LD_INT 13
55105: PUSH
55106: LD_INT 12
55108: PUSH
55109: LD_INT 15
55111: PUSH
55112: LD_INT 11
55114: PUSH
55115: LD_INT 14
55117: PUSH
55118: LD_INT 10
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: IN
55132: IFFALSE 55142
// btype = b_lab ;
55134: LD_ADDR_VAR 0 1
55138: PUSH
55139: LD_INT 6
55141: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55142: LD_VAR 0 6
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: LIST
55160: IN
55161: NOT
55162: PUSH
55163: LD_VAR 0 1
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: LD_INT 2
55176: PUSH
55177: LD_INT 3
55179: PUSH
55180: LD_INT 6
55182: PUSH
55183: LD_INT 36
55185: PUSH
55186: LD_INT 4
55188: PUSH
55189: LD_INT 5
55191: PUSH
55192: LD_INT 31
55194: PUSH
55195: LD_INT 32
55197: PUSH
55198: LD_INT 33
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: IN
55214: NOT
55215: PUSH
55216: LD_VAR 0 6
55220: PUSH
55221: LD_INT 1
55223: EQUAL
55224: AND
55225: OR
55226: PUSH
55227: LD_VAR 0 1
55231: PUSH
55232: LD_INT 2
55234: PUSH
55235: LD_INT 3
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: IN
55242: NOT
55243: PUSH
55244: LD_VAR 0 6
55248: PUSH
55249: LD_INT 2
55251: EQUAL
55252: AND
55253: OR
55254: IFFALSE 55264
// mode = 0 ;
55256: LD_ADDR_VAR 0 6
55260: PUSH
55261: LD_INT 0
55263: ST_TO_ADDR
// case mode of 0 :
55264: LD_VAR 0 6
55268: PUSH
55269: LD_INT 0
55271: DOUBLE
55272: EQUAL
55273: IFTRUE 55277
55275: GO 66730
55277: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55278: LD_ADDR_VAR 0 11
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: LD_INT 2
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: LD_INT 2
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: LD_INT 2
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: LD_INT 3
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: LD_INT 3
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: LD_INT 2
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55471: LD_ADDR_VAR 0 12
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 2
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 2
55573: PUSH
55574: LD_INT 1
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 2
55594: NEG
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 2
55605: NEG
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 2
55617: NEG
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 3
55628: NEG
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 3
55639: NEG
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55667: LD_ADDR_VAR 0 13
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: LD_INT 2
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 2
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 2
55770: PUSH
55771: LD_INT 2
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: LD_INT 2
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 2
55790: NEG
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 2
55802: NEG
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 2
55814: NEG
55815: PUSH
55816: LD_INT 3
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 3
55826: NEG
55827: PUSH
55828: LD_INT 2
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 3
55838: NEG
55839: PUSH
55840: LD_INT 3
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55866: LD_ADDR_VAR 0 14
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: LD_INT 2
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: LD_INT 2
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: LD_INT 2
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: LD_INT 2
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: NEG
56013: PUSH
56014: LD_INT 3
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: LD_INT 3
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: LD_INT 2
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56062: LD_ADDR_VAR 0 15
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 2
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 2
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 2
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 3
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 3
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56255: LD_ADDR_VAR 0 16
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: LD_INT 1
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 2
56358: PUSH
56359: LD_INT 2
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: LD_INT 2
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 2
56378: NEG
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 2
56390: NEG
56391: PUSH
56392: LD_INT 2
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 3
56402: PUSH
56403: LD_INT 2
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 3
56412: PUSH
56413: LD_INT 3
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: PUSH
56423: LD_INT 3
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56448: LD_ADDR_VAR 0 17
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: LD_INT 2
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 2
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 2
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: NEG
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 2
56635: NEG
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 2
56647: NEG
56648: PUSH
56649: LD_INT 2
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56678: LD_ADDR_VAR 0 18
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: LD_INT 2
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: LD_INT 2
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 2
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 2
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 2
56813: PUSH
56814: LD_INT 2
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: LD_INT 2
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: LD_INT 2
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 2
56854: NEG
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: LD_INT 1
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 2
56877: NEG
56878: PUSH
56879: LD_INT 2
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56908: LD_ADDR_VAR 0 19
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: NEG
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: LD_INT 2
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: LD_INT 2
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 2
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 2
57043: PUSH
57044: LD_INT 2
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: LD_INT 2
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: LD_INT 2
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: NEG
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 2
57095: NEG
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: NEG
57108: PUSH
57109: LD_INT 2
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57138: LD_ADDR_VAR 0 20
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: LD_INT 2
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 2
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 2
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: PUSH
57274: LD_INT 2
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: PUSH
57284: LD_INT 2
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: LD_INT 2
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 2
57314: NEG
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 2
57325: NEG
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: NEG
57338: PUSH
57339: LD_INT 2
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57368: LD_ADDR_VAR 0 21
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 1
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 1
57437: NEG
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: LD_INT 2
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: LD_INT 2
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 2
57483: PUSH
57484: LD_INT 0
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 2
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: PUSH
57504: LD_INT 2
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: PUSH
57514: LD_INT 2
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: LD_INT 2
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: NEG
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 2
57555: NEG
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 2
57567: NEG
57568: PUSH
57569: LD_INT 2
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57598: LD_ADDR_VAR 0 22
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 1
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: NEG
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: LD_INT 2
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: LD_INT 2
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: LD_INT 1
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 2
57713: PUSH
57714: LD_INT 0
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 2
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: LD_INT 2
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 2
57774: NEG
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 2
57785: NEG
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 2
57797: NEG
57798: PUSH
57799: LD_INT 2
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57828: LD_ADDR_VAR 0 23
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 2
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 2
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 2
57963: PUSH
57964: LD_INT 2
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: LD_INT 2
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: LD_INT 2
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: NEG
57994: PUSH
57995: LD_INT 1
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 2
58004: NEG
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 2
58015: NEG
58016: PUSH
58017: LD_INT 1
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 2
58027: NEG
58028: PUSH
58029: LD_INT 2
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 2
58039: NEG
58040: PUSH
58041: LD_INT 3
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: LD_INT 3
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: PUSH
58064: LD_INT 2
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58108: LD_ADDR_VAR 0 24
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: LD_INT 1
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 1
58177: NEG
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: LD_INT 2
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: LD_INT 2
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: LD_INT 1
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 2
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 2
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 2
58243: PUSH
58244: LD_INT 2
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: LD_INT 2
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 0
58263: PUSH
58264: LD_INT 2
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 1
58273: NEG
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 2
58284: NEG
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 2
58295: NEG
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 2
58307: NEG
58308: PUSH
58309: LD_INT 2
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: LD_INT 2
58322: NEG
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 3
58341: PUSH
58342: LD_INT 1
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 3
58351: PUSH
58352: LD_INT 2
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58384: LD_ADDR_VAR 0 25
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: LD_INT 0
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 1
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: LD_INT 1
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: LD_INT 1
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: LD_INT 2
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: LD_INT 2
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 2
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 2
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 2
58519: PUSH
58520: LD_INT 2
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: LD_INT 2
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: LD_INT 2
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 2
58560: NEG
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 2
58571: NEG
58572: PUSH
58573: LD_INT 1
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 2
58583: NEG
58584: PUSH
58585: LD_INT 2
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 3
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 3
58605: PUSH
58606: LD_INT 2
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 2
58615: PUSH
58616: LD_INT 3
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: PUSH
58626: LD_INT 3
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58658: LD_ADDR_VAR 0 26
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: LD_INT 1
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: LD_INT 1
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: LD_INT 2
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: LD_INT 2
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 1
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 2
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: LD_INT 2
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: LD_INT 2
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: LD_INT 2
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 1
58823: NEG
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 2
58834: NEG
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 2
58845: NEG
58846: PUSH
58847: LD_INT 1
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 2
58857: NEG
58858: PUSH
58859: LD_INT 2
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: PUSH
58870: LD_INT 3
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: LD_INT 3
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: LD_INT 2
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 2
58900: NEG
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58934: LD_ADDR_VAR 0 27
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: LD_INT 1
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 0
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: NEG
59004: PUSH
59005: LD_INT 1
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: LD_INT 2
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: LD_INT 2
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 2
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 2
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 2
59069: PUSH
59070: LD_INT 2
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: LD_INT 2
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 1
59099: NEG
59100: PUSH
59101: LD_INT 1
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 2
59110: NEG
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 2
59121: NEG
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 2
59133: NEG
59134: PUSH
59135: LD_INT 2
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 3
59167: NEG
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 3
59179: NEG
59180: PUSH
59181: LD_INT 2
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59214: LD_ADDR_VAR 0 28
59218: PUSH
59219: LD_INT 0
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: LD_INT 1
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 1
59272: NEG
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 1
59283: NEG
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: NEG
59296: PUSH
59297: LD_INT 2
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: LD_INT 2
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 1
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 2
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 2
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 2
59349: PUSH
59350: LD_INT 2
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: LD_INT 2
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: LD_INT 2
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 2
59390: NEG
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 2
59401: NEG
59402: PUSH
59403: LD_INT 1
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 2
59413: NEG
59414: PUSH
59415: LD_INT 2
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 2
59425: NEG
59426: PUSH
59427: LD_INT 3
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: LD_INT 3
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 3
59449: NEG
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 3
59461: NEG
59462: PUSH
59463: LD_INT 2
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59496: LD_ADDR_VAR 0 29
59500: PUSH
59501: LD_INT 0
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: LD_INT 1
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: PUSH
59535: LD_INT 1
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: LD_INT 1
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: LD_INT 1
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: LD_INT 2
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: LD_INT 2
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 1
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 2
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 2
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 1
59631: PUSH
59632: LD_INT 2
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: LD_INT 2
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: NEG
59652: PUSH
59653: LD_INT 1
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 2
59662: NEG
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 2
59674: NEG
59675: PUSH
59676: LD_INT 2
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 2
59686: NEG
59687: PUSH
59688: LD_INT 3
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 2
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 3
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: PUSH
59720: LD_INT 3
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 3
59740: NEG
59741: PUSH
59742: LD_INT 2
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59775: LD_ADDR_VAR 0 30
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: LD_INT 0
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 1
59813: PUSH
59814: LD_INT 1
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 0
59823: PUSH
59824: LD_INT 1
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: LD_INT 1
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 1
59856: NEG
59857: PUSH
59858: LD_INT 2
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: LD_INT 2
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 2
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 2
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 2
59910: PUSH
59911: LD_INT 2
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: LD_INT 2
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: NEG
59931: PUSH
59932: LD_INT 1
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 2
59941: NEG
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 2
59952: NEG
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: LD_INT 3
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: LD_INT 2
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 3
59987: PUSH
59988: LD_INT 2
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 2
59997: PUSH
59998: LD_INT 3
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 2
60007: NEG
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 3
60018: NEG
60019: PUSH
60020: LD_INT 1
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60053: LD_ADDR_VAR 0 31
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: LD_INT 1
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: LD_INT 0
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: LD_INT 1
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: PUSH
60124: LD_INT 1
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: LD_INT 2
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: LD_INT 1
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 2
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 2
60177: PUSH
60178: LD_INT 2
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: LD_INT 2
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 0
60197: PUSH
60198: LD_INT 2
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 1
60207: NEG
60208: PUSH
60209: LD_INT 1
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 2
60218: NEG
60219: PUSH
60220: LD_INT 1
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 2
60230: NEG
60231: PUSH
60232: LD_INT 2
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 2
60242: NEG
60243: PUSH
60244: LD_INT 3
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 2
60254: PUSH
60255: LD_INT 1
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 3
60265: PUSH
60266: LD_INT 1
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: LD_INT 3
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: LD_INT 2
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 3
60296: NEG
60297: PUSH
60298: LD_INT 2
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60331: LD_ADDR_VAR 0 32
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: LD_INT 1
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: LD_INT 1
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: LD_INT 1
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: LD_INT 2
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: LD_INT 2
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 2
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 2
60456: PUSH
60457: LD_INT 2
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: LD_INT 2
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: LD_INT 2
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: LD_INT 1
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 2
60497: NEG
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: NEG
60521: PUSH
60522: LD_INT 3
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 1
60532: PUSH
60533: LD_INT 2
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 3
60543: PUSH
60544: LD_INT 2
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 2
60553: PUSH
60554: LD_INT 3
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 2
60563: NEG
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 3
60574: NEG
60575: PUSH
60576: LD_INT 1
60578: NEG
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60609: LD_ADDR_VAR 0 33
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 0
60626: PUSH
60627: LD_INT 1
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 1
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 0
60657: PUSH
60658: LD_INT 1
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 1
60667: NEG
60668: PUSH
60669: LD_INT 0
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 1
60678: NEG
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 1
60690: NEG
60691: PUSH
60692: LD_INT 2
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 2
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: LD_INT 1
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 1
60733: PUSH
60734: LD_INT 2
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 1
60753: NEG
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 2
60764: NEG
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 2
60775: NEG
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 2
60787: NEG
60788: PUSH
60789: LD_INT 2
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 2
60799: NEG
60800: PUSH
60801: LD_INT 3
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 2
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 3
60822: PUSH
60823: LD_INT 1
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 1
60832: PUSH
60833: LD_INT 3
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 1
60842: NEG
60843: PUSH
60844: LD_INT 2
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 3
60853: NEG
60854: PUSH
60855: LD_INT 2
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60888: LD_ADDR_VAR 0 34
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: LD_INT 1
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 0
60936: PUSH
60937: LD_INT 1
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: LD_INT 1
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 1
60969: NEG
60970: PUSH
60971: LD_INT 2
60973: NEG
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: LD_INT 2
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 2
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 2
61013: PUSH
61014: LD_INT 2
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: LD_INT 2
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 1
61033: NEG
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 2
61044: NEG
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 2
61055: NEG
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 2
61067: NEG
61068: PUSH
61069: LD_INT 2
61071: NEG
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: LD_INT 3
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: LD_INT 2
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 3
61102: PUSH
61103: LD_INT 2
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 2
61112: PUSH
61113: LD_INT 3
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 2
61122: NEG
61123: PUSH
61124: LD_INT 1
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 3
61133: NEG
61134: PUSH
61135: LD_INT 1
61137: NEG
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61168: LD_ADDR_VAR 0 35
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 1
61196: PUSH
61197: LD_INT 0
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 1
61206: PUSH
61207: LD_INT 1
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 0
61216: PUSH
61217: LD_INT 1
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 1
61226: NEG
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: NEG
61238: PUSH
61239: LD_INT 1
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 2
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 2
61259: NEG
61260: PUSH
61261: LD_INT 1
61263: NEG
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61280: LD_ADDR_VAR 0 36
61284: PUSH
61285: LD_INT 0
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: LD_INT 1
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 1
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 1
61318: PUSH
61319: LD_INT 1
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: LD_INT 1
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 1
61338: NEG
61339: PUSH
61340: LD_INT 0
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 1
61349: NEG
61350: PUSH
61351: LD_INT 1
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 1
61361: NEG
61362: PUSH
61363: LD_INT 2
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 1
61373: PUSH
61374: LD_INT 2
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61392: LD_ADDR_VAR 0 37
61396: PUSH
61397: LD_INT 0
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: PUSH
61431: LD_INT 1
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: LD_INT 1
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: LD_INT 1
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 1
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 1
61484: NEG
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61504: LD_ADDR_VAR 0 38
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 0
61521: PUSH
61522: LD_INT 1
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: PUSH
61543: LD_INT 1
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: LD_INT 1
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: NEG
61563: PUSH
61564: LD_INT 0
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 2
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 2
61595: NEG
61596: PUSH
61597: LD_INT 1
61599: NEG
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61616: LD_ADDR_VAR 0 39
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: LD_INT 0
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 1
61654: PUSH
61655: LD_INT 1
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: LD_INT 1
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 1
61685: NEG
61686: PUSH
61687: LD_INT 1
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: LD_INT 2
61701: NEG
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 1
61709: PUSH
61710: LD_INT 2
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61728: LD_ADDR_VAR 0 40
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: LD_INT 0
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: LD_INT 1
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 1
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: LD_INT 1
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 1
61786: NEG
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: LD_INT 1
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: LD_INT 1
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: LD_INT 1
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61840: LD_ADDR_VAR 0 41
61844: PUSH
61845: LD_INT 0
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: LD_INT 1
61860: NEG
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 1
61868: PUSH
61869: LD_INT 0
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 1
61878: PUSH
61879: LD_INT 1
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 0
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: NEG
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: NEG
61910: PUSH
61911: LD_INT 1
61913: NEG
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: LD_INT 2
61925: NEG
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 1
61933: PUSH
61934: LD_INT 1
61936: NEG
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 2
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 2
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 1
61974: PUSH
61975: LD_INT 2
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 1
61984: NEG
61985: PUSH
61986: LD_INT 1
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 2
61995: NEG
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 2
62006: NEG
62007: PUSH
62008: LD_INT 1
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 2
62018: NEG
62019: PUSH
62020: LD_INT 2
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 2
62030: NEG
62031: PUSH
62032: LD_INT 3
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 2
62042: PUSH
62043: LD_INT 1
62045: NEG
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 3
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 3
62063: PUSH
62064: LD_INT 1
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 3
62073: PUSH
62074: LD_INT 2
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 3
62083: PUSH
62084: LD_INT 3
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 2
62093: PUSH
62094: LD_INT 3
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 2
62103: NEG
62104: PUSH
62105: LD_INT 1
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 3
62114: NEG
62115: PUSH
62116: LD_INT 0
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 3
62125: NEG
62126: PUSH
62127: LD_INT 1
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 3
62137: NEG
62138: PUSH
62139: LD_INT 2
62141: NEG
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 3
62149: NEG
62150: PUSH
62151: LD_INT 3
62153: NEG
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62190: LD_ADDR_VAR 0 42
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: LD_INT 1
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 1
62228: PUSH
62229: LD_INT 1
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: LD_INT 1
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: NEG
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 1
62259: NEG
62260: PUSH
62261: LD_INT 1
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: NEG
62272: PUSH
62273: LD_INT 2
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: LD_INT 2
62286: NEG
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 2
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 2
62315: PUSH
62316: LD_INT 2
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: LD_INT 2
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: LD_INT 2
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 1
62345: NEG
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 2
62356: NEG
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 2
62368: NEG
62369: PUSH
62370: LD_INT 2
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 2
62380: NEG
62381: PUSH
62382: LD_INT 3
62384: NEG
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 1
62392: NEG
62393: PUSH
62394: LD_INT 3
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 0
62404: PUSH
62405: LD_INT 3
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: PUSH
62416: LD_INT 2
62418: NEG
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 3
62426: PUSH
62427: LD_INT 2
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 3
62436: PUSH
62437: LD_INT 3
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 2
62446: PUSH
62447: LD_INT 3
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 1
62456: PUSH
62457: LD_INT 3
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 0
62466: PUSH
62467: LD_INT 3
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 1
62476: NEG
62477: PUSH
62478: LD_INT 2
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 3
62487: NEG
62488: PUSH
62489: LD_INT 2
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 3
62499: NEG
62500: PUSH
62501: LD_INT 3
62503: NEG
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62540: LD_ADDR_VAR 0 43
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: LD_INT 0
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: LD_INT 1
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 1
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 1
62578: PUSH
62579: LD_INT 1
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: LD_INT 1
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 1
62598: NEG
62599: PUSH
62600: LD_INT 0
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 1
62609: NEG
62610: PUSH
62611: LD_INT 1
62613: NEG
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 1
62621: NEG
62622: PUSH
62623: LD_INT 2
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 0
62633: PUSH
62634: LD_INT 2
62636: NEG
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 1
62644: PUSH
62645: LD_INT 1
62647: NEG
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 2
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 2
62665: PUSH
62666: LD_INT 1
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 1
62675: PUSH
62676: LD_INT 2
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 0
62685: PUSH
62686: LD_INT 2
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: NEG
62696: PUSH
62697: LD_INT 1
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 2
62706: NEG
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 2
62717: NEG
62718: PUSH
62719: LD_INT 1
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 1
62729: NEG
62730: PUSH
62731: LD_INT 3
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 0
62741: PUSH
62742: LD_INT 3
62744: NEG
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 1
62752: PUSH
62753: LD_INT 2
62755: NEG
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 2
62763: PUSH
62764: LD_INT 1
62766: NEG
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 3
62774: PUSH
62775: LD_INT 0
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 3
62784: PUSH
62785: LD_INT 1
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 1
62794: PUSH
62795: LD_INT 3
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: LD_INT 3
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 1
62814: NEG
62815: PUSH
62816: LD_INT 2
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 2
62825: NEG
62826: PUSH
62827: LD_INT 1
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 3
62836: NEG
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 3
62847: NEG
62848: PUSH
62849: LD_INT 1
62851: NEG
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62888: LD_ADDR_VAR 0 44
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: LD_INT 0
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 0
62905: PUSH
62906: LD_INT 1
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 1
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 1
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 0
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 1
62946: NEG
62947: PUSH
62948: LD_INT 0
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 1
62957: NEG
62958: PUSH
62959: LD_INT 1
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 1
62969: NEG
62970: PUSH
62971: LD_INT 2
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 1
62981: PUSH
62982: LD_INT 1
62984: NEG
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 2
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 2
63002: PUSH
63003: LD_INT 1
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 2
63012: PUSH
63013: LD_INT 2
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 1
63022: PUSH
63023: LD_INT 2
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 1
63032: NEG
63033: PUSH
63034: LD_INT 1
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 2
63043: NEG
63044: PUSH
63045: LD_INT 0
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 2
63054: NEG
63055: PUSH
63056: LD_INT 1
63058: NEG
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 2
63066: NEG
63067: PUSH
63068: LD_INT 2
63070: NEG
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 2
63078: NEG
63079: PUSH
63080: LD_INT 3
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 2
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 3
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 3
63111: PUSH
63112: LD_INT 1
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 3
63121: PUSH
63122: LD_INT 2
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 3
63131: PUSH
63132: LD_INT 3
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 2
63141: PUSH
63142: LD_INT 3
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 2
63151: NEG
63152: PUSH
63153: LD_INT 1
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 3
63162: NEG
63163: PUSH
63164: LD_INT 0
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 3
63173: NEG
63174: PUSH
63175: LD_INT 1
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 3
63185: NEG
63186: PUSH
63187: LD_INT 2
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 3
63197: NEG
63198: PUSH
63199: LD_INT 3
63201: NEG
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63238: LD_ADDR_VAR 0 45
63242: PUSH
63243: LD_INT 0
63245: PUSH
63246: LD_INT 0
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: LD_INT 1
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 1
63266: PUSH
63267: LD_INT 0
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 1
63276: PUSH
63277: LD_INT 1
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 0
63286: PUSH
63287: LD_INT 1
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 1
63296: NEG
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 1
63307: NEG
63308: PUSH
63309: LD_INT 1
63311: NEG
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 1
63319: NEG
63320: PUSH
63321: LD_INT 2
63323: NEG
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: LD_INT 2
63334: NEG
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 1
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 2
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 2
63363: PUSH
63364: LD_INT 2
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 1
63373: PUSH
63374: LD_INT 2
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 0
63383: PUSH
63384: LD_INT 2
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 1
63393: NEG
63394: PUSH
63395: LD_INT 1
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 2
63404: NEG
63405: PUSH
63406: LD_INT 1
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 2
63416: NEG
63417: PUSH
63418: LD_INT 2
63420: NEG
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 2
63428: NEG
63429: PUSH
63430: LD_INT 3
63432: NEG
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 1
63440: NEG
63441: PUSH
63442: LD_INT 3
63444: NEG
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: LD_INT 3
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 1
63463: PUSH
63464: LD_INT 2
63466: NEG
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 3
63474: PUSH
63475: LD_INT 2
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 3
63484: PUSH
63485: LD_INT 3
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 2
63494: PUSH
63495: LD_INT 3
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 1
63504: PUSH
63505: LD_INT 3
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: LD_INT 3
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 1
63524: NEG
63525: PUSH
63526: LD_INT 2
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 3
63535: NEG
63536: PUSH
63537: LD_INT 2
63539: NEG
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 3
63547: NEG
63548: PUSH
63549: LD_INT 3
63551: NEG
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63588: LD_ADDR_VAR 0 46
63592: PUSH
63593: LD_INT 0
63595: PUSH
63596: LD_INT 0
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: LD_INT 1
63608: NEG
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 1
63616: PUSH
63617: LD_INT 0
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: LD_INT 1
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: LD_INT 1
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 1
63646: NEG
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 1
63657: NEG
63658: PUSH
63659: LD_INT 1
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 1
63669: NEG
63670: PUSH
63671: LD_INT 2
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: LD_INT 2
63684: NEG
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 1
63692: PUSH
63693: LD_INT 1
63695: NEG
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 2
63703: PUSH
63704: LD_INT 0
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 2
63713: PUSH
63714: LD_INT 1
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 1
63723: PUSH
63724: LD_INT 2
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 0
63733: PUSH
63734: LD_INT 2
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 1
63743: NEG
63744: PUSH
63745: LD_INT 1
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 2
63754: NEG
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 2
63765: NEG
63766: PUSH
63767: LD_INT 1
63769: NEG
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: NEG
63778: PUSH
63779: LD_INT 3
63781: NEG
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 0
63789: PUSH
63790: LD_INT 3
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 1
63800: PUSH
63801: LD_INT 2
63803: NEG
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 2
63811: PUSH
63812: LD_INT 1
63814: NEG
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 3
63822: PUSH
63823: LD_INT 0
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 3
63832: PUSH
63833: LD_INT 1
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 1
63842: PUSH
63843: LD_INT 3
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 0
63852: PUSH
63853: LD_INT 3
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 1
63862: NEG
63863: PUSH
63864: LD_INT 2
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 2
63873: NEG
63874: PUSH
63875: LD_INT 1
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 3
63884: NEG
63885: PUSH
63886: LD_INT 0
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 3
63895: NEG
63896: PUSH
63897: LD_INT 1
63899: NEG
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63936: LD_ADDR_VAR 0 47
63940: PUSH
63941: LD_INT 0
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 0
63953: PUSH
63954: LD_INT 1
63956: NEG
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 1
63964: PUSH
63965: LD_INT 0
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 1
63974: PUSH
63975: LD_INT 1
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 0
63984: PUSH
63985: LD_INT 1
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 1
63994: NEG
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 1
64005: NEG
64006: PUSH
64007: LD_INT 1
64009: NEG
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 1
64017: NEG
64018: PUSH
64019: LD_INT 2
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: LD_INT 2
64032: NEG
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 1
64040: PUSH
64041: LD_INT 1
64043: NEG
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 2
64051: NEG
64052: PUSH
64053: LD_INT 1
64055: NEG
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 2
64063: NEG
64064: PUSH
64065: LD_INT 2
64067: NEG
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64087: LD_ADDR_VAR 0 48
64091: PUSH
64092: LD_INT 0
64094: PUSH
64095: LD_INT 0
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: LD_INT 1
64107: NEG
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 1
64115: PUSH
64116: LD_INT 0
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 1
64125: PUSH
64126: LD_INT 1
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 0
64135: PUSH
64136: LD_INT 1
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 1
64145: NEG
64146: PUSH
64147: LD_INT 0
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 1
64156: NEG
64157: PUSH
64158: LD_INT 1
64160: NEG
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 1
64168: NEG
64169: PUSH
64170: LD_INT 2
64172: NEG
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: LD_INT 2
64183: NEG
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: PUSH
64192: LD_INT 1
64194: NEG
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 2
64202: PUSH
64203: LD_INT 0
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 2
64212: PUSH
64213: LD_INT 1
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64234: LD_ADDR_VAR 0 49
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: LD_INT 0
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: LD_INT 1
64254: NEG
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 1
64262: PUSH
64263: LD_INT 0
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 1
64272: PUSH
64273: LD_INT 1
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 0
64282: PUSH
64283: LD_INT 1
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 1
64292: NEG
64293: PUSH
64294: LD_INT 0
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 1
64303: NEG
64304: PUSH
64305: LD_INT 1
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 1
64315: PUSH
64316: LD_INT 1
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 2
64326: PUSH
64327: LD_INT 0
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 2
64336: PUSH
64337: LD_INT 1
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 2
64346: PUSH
64347: LD_INT 2
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 1
64356: PUSH
64357: LD_INT 2
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64378: LD_ADDR_VAR 0 50
64382: PUSH
64383: LD_INT 0
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 0
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 1
64406: PUSH
64407: LD_INT 0
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 1
64416: PUSH
64417: LD_INT 1
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: LD_INT 1
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 1
64436: NEG
64437: PUSH
64438: LD_INT 0
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 1
64447: NEG
64448: PUSH
64449: LD_INT 1
64451: NEG
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 2
64459: PUSH
64460: LD_INT 1
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 2
64469: PUSH
64470: LD_INT 2
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 1
64479: PUSH
64480: LD_INT 2
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 0
64489: PUSH
64490: LD_INT 2
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 1
64499: NEG
64500: PUSH
64501: LD_INT 1
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64522: LD_ADDR_VAR 0 51
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: LD_INT 0
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 0
64539: PUSH
64540: LD_INT 1
64542: NEG
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 1
64550: PUSH
64551: LD_INT 0
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 1
64560: PUSH
64561: LD_INT 1
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 0
64570: PUSH
64571: LD_INT 1
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 1
64580: NEG
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 1
64591: NEG
64592: PUSH
64593: LD_INT 1
64595: NEG
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 1
64603: PUSH
64604: LD_INT 2
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 0
64613: PUSH
64614: LD_INT 2
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 1
64623: NEG
64624: PUSH
64625: LD_INT 1
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 2
64634: NEG
64635: PUSH
64636: LD_INT 0
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 2
64645: NEG
64646: PUSH
64647: LD_INT 1
64649: NEG
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64669: LD_ADDR_VAR 0 52
64673: PUSH
64674: LD_INT 0
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 0
64686: PUSH
64687: LD_INT 1
64689: NEG
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 1
64697: PUSH
64698: LD_INT 0
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 1
64707: PUSH
64708: LD_INT 1
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 0
64717: PUSH
64718: LD_INT 1
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 1
64727: NEG
64728: PUSH
64729: LD_INT 0
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 1
64738: NEG
64739: PUSH
64740: LD_INT 1
64742: NEG
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 1
64750: NEG
64751: PUSH
64752: LD_INT 2
64754: NEG
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 1
64762: NEG
64763: PUSH
64764: LD_INT 1
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 2
64773: NEG
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 2
64784: NEG
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 2
64796: NEG
64797: PUSH
64798: LD_INT 2
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64820: LD_ADDR_VAR 0 53
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: LD_INT 1
64840: NEG
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 1
64848: PUSH
64849: LD_INT 0
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 1
64858: PUSH
64859: LD_INT 1
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 0
64868: PUSH
64869: LD_INT 1
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 1
64878: NEG
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 1
64889: NEG
64890: PUSH
64891: LD_INT 1
64893: NEG
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 1
64901: NEG
64902: PUSH
64903: LD_INT 2
64905: NEG
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: LD_INT 2
64916: NEG
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 1
64924: PUSH
64925: LD_INT 1
64927: NEG
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 2
64935: PUSH
64936: LD_INT 0
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 2
64945: PUSH
64946: LD_INT 1
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 2
64955: PUSH
64956: LD_INT 2
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 1
64965: PUSH
64966: LD_INT 2
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 0
64975: PUSH
64976: LD_INT 2
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 1
64985: NEG
64986: PUSH
64987: LD_INT 1
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 2
64996: NEG
64997: PUSH
64998: LD_INT 0
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 2
65007: NEG
65008: PUSH
65009: LD_INT 1
65011: NEG
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 2
65019: NEG
65020: PUSH
65021: LD_INT 2
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65050: LD_ADDR_VAR 0 54
65054: PUSH
65055: LD_INT 0
65057: PUSH
65058: LD_INT 0
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 0
65067: PUSH
65068: LD_INT 1
65070: NEG
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 1
65078: PUSH
65079: LD_INT 0
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 1
65088: PUSH
65089: LD_INT 1
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 0
65098: PUSH
65099: LD_INT 1
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 1
65108: NEG
65109: PUSH
65110: LD_INT 0
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 1
65119: NEG
65120: PUSH
65121: LD_INT 1
65123: NEG
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 1
65131: NEG
65132: PUSH
65133: LD_INT 2
65135: NEG
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 0
65143: PUSH
65144: LD_INT 2
65146: NEG
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 1
65154: PUSH
65155: LD_INT 1
65157: NEG
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 2
65165: PUSH
65166: LD_INT 0
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 2
65175: PUSH
65176: LD_INT 1
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 2
65185: PUSH
65186: LD_INT 2
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 1
65195: PUSH
65196: LD_INT 2
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 0
65205: PUSH
65206: LD_INT 2
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 1
65215: NEG
65216: PUSH
65217: LD_INT 1
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 2
65226: NEG
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 2
65237: NEG
65238: PUSH
65239: LD_INT 1
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 2
65249: NEG
65250: PUSH
65251: LD_INT 2
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65280: LD_ADDR_VAR 0 55
65284: PUSH
65285: LD_INT 0
65287: PUSH
65288: LD_INT 0
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 0
65297: PUSH
65298: LD_INT 1
65300: NEG
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 1
65308: PUSH
65309: LD_INT 0
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 1
65318: PUSH
65319: LD_INT 1
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: LD_INT 1
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 1
65338: NEG
65339: PUSH
65340: LD_INT 0
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 1
65349: NEG
65350: PUSH
65351: LD_INT 1
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 1
65361: NEG
65362: PUSH
65363: LD_INT 2
65365: NEG
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 0
65373: PUSH
65374: LD_INT 2
65376: NEG
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 1
65384: PUSH
65385: LD_INT 1
65387: NEG
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 2
65395: PUSH
65396: LD_INT 0
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 2
65405: PUSH
65406: LD_INT 1
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 2
65415: PUSH
65416: LD_INT 2
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 1
65425: PUSH
65426: LD_INT 2
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 0
65435: PUSH
65436: LD_INT 2
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 1
65445: NEG
65446: PUSH
65447: LD_INT 1
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 2
65456: NEG
65457: PUSH
65458: LD_INT 0
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 2
65467: NEG
65468: PUSH
65469: LD_INT 1
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 2
65479: NEG
65480: PUSH
65481: LD_INT 2
65483: NEG
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65510: LD_ADDR_VAR 0 56
65514: PUSH
65515: LD_INT 0
65517: PUSH
65518: LD_INT 0
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 0
65527: PUSH
65528: LD_INT 1
65530: NEG
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 1
65538: PUSH
65539: LD_INT 0
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 1
65548: PUSH
65549: LD_INT 1
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: LD_INT 1
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 1
65568: NEG
65569: PUSH
65570: LD_INT 0
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 1
65579: NEG
65580: PUSH
65581: LD_INT 1
65583: NEG
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 1
65591: NEG
65592: PUSH
65593: LD_INT 2
65595: NEG
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 0
65603: PUSH
65604: LD_INT 2
65606: NEG
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 1
65614: PUSH
65615: LD_INT 1
65617: NEG
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 2
65625: PUSH
65626: LD_INT 0
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 2
65635: PUSH
65636: LD_INT 1
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 2
65645: PUSH
65646: LD_INT 2
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 1
65655: PUSH
65656: LD_INT 2
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 0
65665: PUSH
65666: LD_INT 2
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 1
65675: NEG
65676: PUSH
65677: LD_INT 1
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 2
65686: NEG
65687: PUSH
65688: LD_INT 0
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 2
65697: NEG
65698: PUSH
65699: LD_INT 1
65701: NEG
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 2
65709: NEG
65710: PUSH
65711: LD_INT 2
65713: NEG
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65740: LD_ADDR_VAR 0 57
65744: PUSH
65745: LD_INT 0
65747: PUSH
65748: LD_INT 0
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 0
65757: PUSH
65758: LD_INT 1
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 1
65768: PUSH
65769: LD_INT 0
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 1
65778: PUSH
65779: LD_INT 1
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 0
65788: PUSH
65789: LD_INT 1
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 1
65798: NEG
65799: PUSH
65800: LD_INT 0
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 1
65809: NEG
65810: PUSH
65811: LD_INT 1
65813: NEG
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 1
65821: NEG
65822: PUSH
65823: LD_INT 2
65825: NEG
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 0
65833: PUSH
65834: LD_INT 2
65836: NEG
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 1
65844: PUSH
65845: LD_INT 1
65847: NEG
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 2
65855: PUSH
65856: LD_INT 0
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 2
65865: PUSH
65866: LD_INT 1
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 2
65875: PUSH
65876: LD_INT 2
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 1
65885: PUSH
65886: LD_INT 2
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 0
65895: PUSH
65896: LD_INT 2
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 1
65905: NEG
65906: PUSH
65907: LD_INT 1
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 2
65916: NEG
65917: PUSH
65918: LD_INT 0
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 2
65927: NEG
65928: PUSH
65929: LD_INT 1
65931: NEG
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 2
65939: NEG
65940: PUSH
65941: LD_INT 2
65943: NEG
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65970: LD_ADDR_VAR 0 58
65974: PUSH
65975: LD_INT 0
65977: PUSH
65978: LD_INT 0
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 0
65987: PUSH
65988: LD_INT 1
65990: NEG
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 1
65998: PUSH
65999: LD_INT 0
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 1
66008: PUSH
66009: LD_INT 1
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 0
66018: PUSH
66019: LD_INT 1
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 1
66028: NEG
66029: PUSH
66030: LD_INT 0
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 1
66039: NEG
66040: PUSH
66041: LD_INT 1
66043: NEG
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 1
66051: NEG
66052: PUSH
66053: LD_INT 2
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 0
66063: PUSH
66064: LD_INT 2
66066: NEG
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 1
66074: PUSH
66075: LD_INT 1
66077: NEG
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 2
66085: PUSH
66086: LD_INT 0
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 2
66095: PUSH
66096: LD_INT 1
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 2
66105: PUSH
66106: LD_INT 2
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 1
66115: PUSH
66116: LD_INT 2
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 0
66125: PUSH
66126: LD_INT 2
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 1
66135: NEG
66136: PUSH
66137: LD_INT 1
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 2
66146: NEG
66147: PUSH
66148: LD_INT 0
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 2
66157: NEG
66158: PUSH
66159: LD_INT 1
66161: NEG
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 2
66169: NEG
66170: PUSH
66171: LD_INT 2
66173: NEG
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66200: LD_ADDR_VAR 0 59
66204: PUSH
66205: LD_INT 0
66207: PUSH
66208: LD_INT 0
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 0
66217: PUSH
66218: LD_INT 1
66220: NEG
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 1
66228: PUSH
66229: LD_INT 0
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 1
66238: PUSH
66239: LD_INT 1
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 0
66248: PUSH
66249: LD_INT 1
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 1
66258: NEG
66259: PUSH
66260: LD_INT 0
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 1
66269: NEG
66270: PUSH
66271: LD_INT 1
66273: NEG
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66288: LD_ADDR_VAR 0 60
66292: PUSH
66293: LD_INT 0
66295: PUSH
66296: LD_INT 0
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 0
66305: PUSH
66306: LD_INT 1
66308: NEG
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 1
66316: PUSH
66317: LD_INT 0
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 1
66326: PUSH
66327: LD_INT 1
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 0
66336: PUSH
66337: LD_INT 1
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 1
66346: NEG
66347: PUSH
66348: LD_INT 0
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 1
66357: NEG
66358: PUSH
66359: LD_INT 1
66361: NEG
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66376: LD_ADDR_VAR 0 61
66380: PUSH
66381: LD_INT 0
66383: PUSH
66384: LD_INT 0
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: LD_INT 0
66393: PUSH
66394: LD_INT 1
66396: NEG
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 1
66404: PUSH
66405: LD_INT 0
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 1
66414: PUSH
66415: LD_INT 1
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 0
66424: PUSH
66425: LD_INT 1
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 1
66434: NEG
66435: PUSH
66436: LD_INT 0
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 1
66445: NEG
66446: PUSH
66447: LD_INT 1
66449: NEG
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66464: LD_ADDR_VAR 0 62
66468: PUSH
66469: LD_INT 0
66471: PUSH
66472: LD_INT 0
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 0
66481: PUSH
66482: LD_INT 1
66484: NEG
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 1
66492: PUSH
66493: LD_INT 0
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 1
66502: PUSH
66503: LD_INT 1
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 0
66512: PUSH
66513: LD_INT 1
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 1
66522: NEG
66523: PUSH
66524: LD_INT 0
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 1
66533: NEG
66534: PUSH
66535: LD_INT 1
66537: NEG
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66552: LD_ADDR_VAR 0 63
66556: PUSH
66557: LD_INT 0
66559: PUSH
66560: LD_INT 0
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 0
66569: PUSH
66570: LD_INT 1
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 1
66580: PUSH
66581: LD_INT 0
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 1
66590: PUSH
66591: LD_INT 1
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 0
66600: PUSH
66601: LD_INT 1
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 1
66610: NEG
66611: PUSH
66612: LD_INT 0
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 1
66621: NEG
66622: PUSH
66623: LD_INT 1
66625: NEG
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66640: LD_ADDR_VAR 0 64
66644: PUSH
66645: LD_INT 0
66647: PUSH
66648: LD_INT 0
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: LD_INT 0
66657: PUSH
66658: LD_INT 1
66660: NEG
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 1
66668: PUSH
66669: LD_INT 0
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 1
66678: PUSH
66679: LD_INT 1
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 0
66688: PUSH
66689: LD_INT 1
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 1
66698: NEG
66699: PUSH
66700: LD_INT 0
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 1
66709: NEG
66710: PUSH
66711: LD_INT 1
66713: NEG
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: ST_TO_ADDR
// end ; 1 :
66728: GO 72625
66730: LD_INT 1
66732: DOUBLE
66733: EQUAL
66734: IFTRUE 66738
66736: GO 69361
66738: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66739: LD_ADDR_VAR 0 11
66743: PUSH
66744: LD_INT 1
66746: NEG
66747: PUSH
66748: LD_INT 3
66750: NEG
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 0
66758: PUSH
66759: LD_INT 3
66761: NEG
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 1
66769: PUSH
66770: LD_INT 2
66772: NEG
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: LIST
66782: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66783: LD_ADDR_VAR 0 12
66787: PUSH
66788: LD_INT 2
66790: PUSH
66791: LD_INT 1
66793: NEG
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 3
66801: PUSH
66802: LD_INT 0
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 3
66811: PUSH
66812: LD_INT 1
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: LIST
66823: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66824: LD_ADDR_VAR 0 13
66828: PUSH
66829: LD_INT 3
66831: PUSH
66832: LD_INT 2
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 3
66841: PUSH
66842: LD_INT 3
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 2
66851: PUSH
66852: LD_INT 3
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: LIST
66863: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66864: LD_ADDR_VAR 0 14
66868: PUSH
66869: LD_INT 1
66871: PUSH
66872: LD_INT 3
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 0
66881: PUSH
66882: LD_INT 3
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 1
66891: NEG
66892: PUSH
66893: LD_INT 2
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: LIST
66904: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66905: LD_ADDR_VAR 0 15
66909: PUSH
66910: LD_INT 2
66912: NEG
66913: PUSH
66914: LD_INT 1
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 3
66923: NEG
66924: PUSH
66925: LD_INT 0
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 3
66934: NEG
66935: PUSH
66936: LD_INT 1
66938: NEG
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: LIST
66948: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66949: LD_ADDR_VAR 0 16
66953: PUSH
66954: LD_INT 2
66956: NEG
66957: PUSH
66958: LD_INT 3
66960: NEG
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 3
66968: NEG
66969: PUSH
66970: LD_INT 2
66972: NEG
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 3
66980: NEG
66981: PUSH
66982: LD_INT 3
66984: NEG
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: LIST
66994: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66995: LD_ADDR_VAR 0 17
66999: PUSH
67000: LD_INT 1
67002: NEG
67003: PUSH
67004: LD_INT 3
67006: NEG
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 0
67014: PUSH
67015: LD_INT 3
67017: NEG
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 1
67025: PUSH
67026: LD_INT 2
67028: NEG
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: LIST
67038: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67039: LD_ADDR_VAR 0 18
67043: PUSH
67044: LD_INT 2
67046: PUSH
67047: LD_INT 1
67049: NEG
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: LD_INT 3
67057: PUSH
67058: LD_INT 0
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 3
67067: PUSH
67068: LD_INT 1
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: LIST
67079: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67080: LD_ADDR_VAR 0 19
67084: PUSH
67085: LD_INT 3
67087: PUSH
67088: LD_INT 2
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 3
67097: PUSH
67098: LD_INT 3
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 2
67107: PUSH
67108: LD_INT 3
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: LIST
67119: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67120: LD_ADDR_VAR 0 20
67124: PUSH
67125: LD_INT 1
67127: PUSH
67128: LD_INT 3
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 0
67137: PUSH
67138: LD_INT 3
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 1
67147: NEG
67148: PUSH
67149: LD_INT 2
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: LIST
67160: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67161: LD_ADDR_VAR 0 21
67165: PUSH
67166: LD_INT 2
67168: NEG
67169: PUSH
67170: LD_INT 1
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 3
67179: NEG
67180: PUSH
67181: LD_INT 0
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 3
67190: NEG
67191: PUSH
67192: LD_INT 1
67194: NEG
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: LIST
67204: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67205: LD_ADDR_VAR 0 22
67209: PUSH
67210: LD_INT 2
67212: NEG
67213: PUSH
67214: LD_INT 3
67216: NEG
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 3
67224: NEG
67225: PUSH
67226: LD_INT 2
67228: NEG
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 3
67236: NEG
67237: PUSH
67238: LD_INT 3
67240: NEG
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: LIST
67250: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67251: LD_ADDR_VAR 0 23
67255: PUSH
67256: LD_INT 0
67258: PUSH
67259: LD_INT 3
67261: NEG
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 1
67269: NEG
67270: PUSH
67271: LD_INT 4
67273: NEG
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 1
67281: PUSH
67282: LD_INT 3
67284: NEG
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: LIST
67294: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67295: LD_ADDR_VAR 0 24
67299: PUSH
67300: LD_INT 3
67302: PUSH
67303: LD_INT 0
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 3
67312: PUSH
67313: LD_INT 1
67315: NEG
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 4
67323: PUSH
67324: LD_INT 1
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: LIST
67335: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67336: LD_ADDR_VAR 0 25
67340: PUSH
67341: LD_INT 3
67343: PUSH
67344: LD_INT 3
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 4
67353: PUSH
67354: LD_INT 3
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 3
67363: PUSH
67364: LD_INT 4
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: LIST
67375: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67376: LD_ADDR_VAR 0 26
67380: PUSH
67381: LD_INT 0
67383: PUSH
67384: LD_INT 3
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 1
67393: PUSH
67394: LD_INT 4
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 1
67403: NEG
67404: PUSH
67405: LD_INT 3
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: LIST
67416: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67417: LD_ADDR_VAR 0 27
67421: PUSH
67422: LD_INT 3
67424: NEG
67425: PUSH
67426: LD_INT 0
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 3
67435: NEG
67436: PUSH
67437: LD_INT 1
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 4
67446: NEG
67447: PUSH
67448: LD_INT 1
67450: NEG
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: LIST
67460: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67461: LD_ADDR_VAR 0 28
67465: PUSH
67466: LD_INT 3
67468: NEG
67469: PUSH
67470: LD_INT 3
67472: NEG
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 3
67480: NEG
67481: PUSH
67482: LD_INT 4
67484: NEG
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 4
67492: NEG
67493: PUSH
67494: LD_INT 3
67496: NEG
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: LIST
67506: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67507: LD_ADDR_VAR 0 29
67511: PUSH
67512: LD_INT 1
67514: NEG
67515: PUSH
67516: LD_INT 3
67518: NEG
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 0
67526: PUSH
67527: LD_INT 3
67529: NEG
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 1
67537: PUSH
67538: LD_INT 2
67540: NEG
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 1
67548: NEG
67549: PUSH
67550: LD_INT 4
67552: NEG
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 0
67560: PUSH
67561: LD_INT 4
67563: NEG
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 1
67571: PUSH
67572: LD_INT 3
67574: NEG
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 1
67582: NEG
67583: PUSH
67584: LD_INT 5
67586: NEG
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 0
67594: PUSH
67595: LD_INT 5
67597: NEG
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 1
67605: PUSH
67606: LD_INT 4
67608: NEG
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 1
67616: NEG
67617: PUSH
67618: LD_INT 6
67620: NEG
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 0
67628: PUSH
67629: LD_INT 6
67631: NEG
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 1
67639: PUSH
67640: LD_INT 5
67642: NEG
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67662: LD_ADDR_VAR 0 30
67666: PUSH
67667: LD_INT 2
67669: PUSH
67670: LD_INT 1
67672: NEG
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 3
67680: PUSH
67681: LD_INT 0
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 3
67690: PUSH
67691: LD_INT 1
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 3
67700: PUSH
67701: LD_INT 1
67703: NEG
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 4
67711: PUSH
67712: LD_INT 0
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 4
67721: PUSH
67722: LD_INT 1
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 4
67731: PUSH
67732: LD_INT 1
67734: NEG
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 5
67742: PUSH
67743: LD_INT 0
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 5
67752: PUSH
67753: LD_INT 1
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 5
67762: PUSH
67763: LD_INT 1
67765: NEG
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 6
67773: PUSH
67774: LD_INT 0
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 6
67783: PUSH
67784: LD_INT 1
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67805: LD_ADDR_VAR 0 31
67809: PUSH
67810: LD_INT 3
67812: PUSH
67813: LD_INT 2
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 3
67822: PUSH
67823: LD_INT 3
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 2
67832: PUSH
67833: LD_INT 3
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 4
67842: PUSH
67843: LD_INT 3
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 4
67852: PUSH
67853: LD_INT 4
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 3
67862: PUSH
67863: LD_INT 4
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 5
67872: PUSH
67873: LD_INT 4
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 5
67882: PUSH
67883: LD_INT 5
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 4
67892: PUSH
67893: LD_INT 5
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 6
67902: PUSH
67903: LD_INT 5
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 6
67912: PUSH
67913: LD_INT 6
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 5
67922: PUSH
67923: LD_INT 6
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67944: LD_ADDR_VAR 0 32
67948: PUSH
67949: LD_INT 1
67951: PUSH
67952: LD_INT 3
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 0
67961: PUSH
67962: LD_INT 3
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 1
67971: NEG
67972: PUSH
67973: LD_INT 2
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 1
67982: PUSH
67983: LD_INT 4
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 0
67992: PUSH
67993: LD_INT 4
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 1
68002: NEG
68003: PUSH
68004: LD_INT 3
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 1
68013: PUSH
68014: LD_INT 5
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 0
68023: PUSH
68024: LD_INT 5
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 1
68033: NEG
68034: PUSH
68035: LD_INT 4
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 1
68044: PUSH
68045: LD_INT 6
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 0
68054: PUSH
68055: LD_INT 6
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 1
68064: NEG
68065: PUSH
68066: LD_INT 5
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68087: LD_ADDR_VAR 0 33
68091: PUSH
68092: LD_INT 2
68094: NEG
68095: PUSH
68096: LD_INT 1
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 3
68105: NEG
68106: PUSH
68107: LD_INT 0
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 3
68116: NEG
68117: PUSH
68118: LD_INT 1
68120: NEG
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 3
68128: NEG
68129: PUSH
68130: LD_INT 1
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 4
68139: NEG
68140: PUSH
68141: LD_INT 0
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 4
68150: NEG
68151: PUSH
68152: LD_INT 1
68154: NEG
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 4
68162: NEG
68163: PUSH
68164: LD_INT 1
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 5
68173: NEG
68174: PUSH
68175: LD_INT 0
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 5
68184: NEG
68185: PUSH
68186: LD_INT 1
68188: NEG
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 5
68196: NEG
68197: PUSH
68198: LD_INT 1
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 6
68207: NEG
68208: PUSH
68209: LD_INT 0
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 6
68218: NEG
68219: PUSH
68220: LD_INT 1
68222: NEG
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68242: LD_ADDR_VAR 0 34
68246: PUSH
68247: LD_INT 2
68249: NEG
68250: PUSH
68251: LD_INT 3
68253: NEG
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 3
68261: NEG
68262: PUSH
68263: LD_INT 2
68265: NEG
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 3
68273: NEG
68274: PUSH
68275: LD_INT 3
68277: NEG
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 3
68285: NEG
68286: PUSH
68287: LD_INT 4
68289: NEG
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 4
68297: NEG
68298: PUSH
68299: LD_INT 3
68301: NEG
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 4
68309: NEG
68310: PUSH
68311: LD_INT 4
68313: NEG
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 4
68321: NEG
68322: PUSH
68323: LD_INT 5
68325: NEG
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 5
68333: NEG
68334: PUSH
68335: LD_INT 4
68337: NEG
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 5
68345: NEG
68346: PUSH
68347: LD_INT 5
68349: NEG
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 5
68357: NEG
68358: PUSH
68359: LD_INT 6
68361: NEG
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 6
68369: NEG
68370: PUSH
68371: LD_INT 5
68373: NEG
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 6
68381: NEG
68382: PUSH
68383: LD_INT 6
68385: NEG
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68405: LD_ADDR_VAR 0 41
68409: PUSH
68410: LD_INT 0
68412: PUSH
68413: LD_INT 2
68415: NEG
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 1
68423: NEG
68424: PUSH
68425: LD_INT 3
68427: NEG
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 1
68435: PUSH
68436: LD_INT 2
68438: NEG
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: LIST
68448: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68449: LD_ADDR_VAR 0 42
68453: PUSH
68454: LD_INT 2
68456: PUSH
68457: LD_INT 0
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 2
68466: PUSH
68467: LD_INT 1
68469: NEG
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: LD_INT 3
68477: PUSH
68478: LD_INT 1
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: LIST
68489: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68490: LD_ADDR_VAR 0 43
68494: PUSH
68495: LD_INT 2
68497: PUSH
68498: LD_INT 2
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 3
68507: PUSH
68508: LD_INT 2
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 2
68517: PUSH
68518: LD_INT 3
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: LIST
68529: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68530: LD_ADDR_VAR 0 44
68534: PUSH
68535: LD_INT 0
68537: PUSH
68538: LD_INT 2
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 1
68547: PUSH
68548: LD_INT 3
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 1
68557: NEG
68558: PUSH
68559: LD_INT 2
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: LIST
68570: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68571: LD_ADDR_VAR 0 45
68575: PUSH
68576: LD_INT 2
68578: NEG
68579: PUSH
68580: LD_INT 0
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 2
68589: NEG
68590: PUSH
68591: LD_INT 1
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: LD_INT 3
68600: NEG
68601: PUSH
68602: LD_INT 1
68604: NEG
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: LIST
68614: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68615: LD_ADDR_VAR 0 46
68619: PUSH
68620: LD_INT 2
68622: NEG
68623: PUSH
68624: LD_INT 2
68626: NEG
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 2
68634: NEG
68635: PUSH
68636: LD_INT 3
68638: NEG
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 3
68646: NEG
68647: PUSH
68648: LD_INT 2
68650: NEG
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: LIST
68660: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68661: LD_ADDR_VAR 0 47
68665: PUSH
68666: LD_INT 2
68668: NEG
68669: PUSH
68670: LD_INT 3
68672: NEG
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 1
68680: NEG
68681: PUSH
68682: LD_INT 3
68684: NEG
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68694: LD_ADDR_VAR 0 48
68698: PUSH
68699: LD_INT 1
68701: PUSH
68702: LD_INT 2
68704: NEG
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 2
68712: PUSH
68713: LD_INT 1
68715: NEG
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68725: LD_ADDR_VAR 0 49
68729: PUSH
68730: LD_INT 3
68732: PUSH
68733: LD_INT 1
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 3
68742: PUSH
68743: LD_INT 2
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68754: LD_ADDR_VAR 0 50
68758: PUSH
68759: LD_INT 2
68761: PUSH
68762: LD_INT 3
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 1
68771: PUSH
68772: LD_INT 3
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68783: LD_ADDR_VAR 0 51
68787: PUSH
68788: LD_INT 1
68790: NEG
68791: PUSH
68792: LD_INT 2
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 2
68801: NEG
68802: PUSH
68803: LD_INT 1
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68814: LD_ADDR_VAR 0 52
68818: PUSH
68819: LD_INT 3
68821: NEG
68822: PUSH
68823: LD_INT 1
68825: NEG
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 3
68833: NEG
68834: PUSH
68835: LD_INT 2
68837: NEG
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68847: LD_ADDR_VAR 0 53
68851: PUSH
68852: LD_INT 1
68854: NEG
68855: PUSH
68856: LD_INT 3
68858: NEG
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 0
68866: PUSH
68867: LD_INT 3
68869: NEG
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 1
68877: PUSH
68878: LD_INT 2
68880: NEG
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: LIST
68890: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68891: LD_ADDR_VAR 0 54
68895: PUSH
68896: LD_INT 2
68898: PUSH
68899: LD_INT 1
68901: NEG
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 3
68909: PUSH
68910: LD_INT 0
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: PUSH
68917: LD_INT 3
68919: PUSH
68920: LD_INT 1
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: LIST
68931: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68932: LD_ADDR_VAR 0 55
68936: PUSH
68937: LD_INT 3
68939: PUSH
68940: LD_INT 2
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: LD_INT 3
68949: PUSH
68950: LD_INT 3
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: LD_INT 2
68959: PUSH
68960: LD_INT 3
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: LIST
68971: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68972: LD_ADDR_VAR 0 56
68976: PUSH
68977: LD_INT 1
68979: PUSH
68980: LD_INT 3
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 0
68989: PUSH
68990: LD_INT 3
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 1
68999: NEG
69000: PUSH
69001: LD_INT 2
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: LIST
69012: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69013: LD_ADDR_VAR 0 57
69017: PUSH
69018: LD_INT 2
69020: NEG
69021: PUSH
69022: LD_INT 1
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 3
69031: NEG
69032: PUSH
69033: LD_INT 0
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 3
69042: NEG
69043: PUSH
69044: LD_INT 1
69046: NEG
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: LIST
69056: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69057: LD_ADDR_VAR 0 58
69061: PUSH
69062: LD_INT 2
69064: NEG
69065: PUSH
69066: LD_INT 3
69068: NEG
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 3
69076: NEG
69077: PUSH
69078: LD_INT 2
69080: NEG
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 3
69088: NEG
69089: PUSH
69090: LD_INT 3
69092: NEG
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: LIST
69102: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69103: LD_ADDR_VAR 0 59
69107: PUSH
69108: LD_INT 1
69110: NEG
69111: PUSH
69112: LD_INT 2
69114: NEG
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 0
69122: PUSH
69123: LD_INT 2
69125: NEG
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 1
69133: PUSH
69134: LD_INT 1
69136: NEG
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: LIST
69146: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69147: LD_ADDR_VAR 0 60
69151: PUSH
69152: LD_INT 1
69154: PUSH
69155: LD_INT 1
69157: NEG
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 2
69165: PUSH
69166: LD_INT 0
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 2
69175: PUSH
69176: LD_INT 1
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: LIST
69187: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69188: LD_ADDR_VAR 0 61
69192: PUSH
69193: LD_INT 2
69195: PUSH
69196: LD_INT 1
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 2
69205: PUSH
69206: LD_INT 2
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 1
69215: PUSH
69216: LD_INT 2
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: LIST
69227: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69228: LD_ADDR_VAR 0 62
69232: PUSH
69233: LD_INT 1
69235: PUSH
69236: LD_INT 2
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 0
69245: PUSH
69246: LD_INT 2
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 1
69255: NEG
69256: PUSH
69257: LD_INT 1
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: LIST
69268: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69269: LD_ADDR_VAR 0 63
69273: PUSH
69274: LD_INT 1
69276: NEG
69277: PUSH
69278: LD_INT 1
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 2
69287: NEG
69288: PUSH
69289: LD_INT 0
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 2
69298: NEG
69299: PUSH
69300: LD_INT 1
69302: NEG
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: LIST
69312: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69313: LD_ADDR_VAR 0 64
69317: PUSH
69318: LD_INT 1
69320: NEG
69321: PUSH
69322: LD_INT 2
69324: NEG
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 2
69332: NEG
69333: PUSH
69334: LD_INT 1
69336: NEG
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 2
69344: NEG
69345: PUSH
69346: LD_INT 2
69348: NEG
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: LIST
69358: ST_TO_ADDR
// end ; 2 :
69359: GO 72625
69361: LD_INT 2
69363: DOUBLE
69364: EQUAL
69365: IFTRUE 69369
69367: GO 72624
69369: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69370: LD_ADDR_VAR 0 29
69374: PUSH
69375: LD_INT 4
69377: PUSH
69378: LD_INT 0
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: LD_INT 4
69387: PUSH
69388: LD_INT 1
69390: NEG
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 5
69398: PUSH
69399: LD_INT 0
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 5
69408: PUSH
69409: LD_INT 1
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 4
69418: PUSH
69419: LD_INT 1
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 3
69428: PUSH
69429: LD_INT 0
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 3
69438: PUSH
69439: LD_INT 1
69441: NEG
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 3
69449: PUSH
69450: LD_INT 2
69452: NEG
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 5
69460: PUSH
69461: LD_INT 2
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 3
69470: PUSH
69471: LD_INT 3
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 3
69480: PUSH
69481: LD_INT 2
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 4
69490: PUSH
69491: LD_INT 3
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 4
69500: PUSH
69501: LD_INT 4
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 3
69510: PUSH
69511: LD_INT 4
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 2
69520: PUSH
69521: LD_INT 3
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 2
69530: PUSH
69531: LD_INT 2
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 4
69540: PUSH
69541: LD_INT 2
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 2
69550: PUSH
69551: LD_INT 4
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: LD_INT 0
69560: PUSH
69561: LD_INT 4
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 0
69570: PUSH
69571: LD_INT 3
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 1
69580: PUSH
69581: LD_INT 4
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 1
69590: PUSH
69591: LD_INT 5
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 0
69600: PUSH
69601: LD_INT 5
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 1
69610: NEG
69611: PUSH
69612: LD_INT 4
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: LD_INT 1
69621: NEG
69622: PUSH
69623: LD_INT 3
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 2
69632: PUSH
69633: LD_INT 5
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 2
69642: NEG
69643: PUSH
69644: LD_INT 3
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 3
69653: NEG
69654: PUSH
69655: LD_INT 0
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 3
69664: NEG
69665: PUSH
69666: LD_INT 1
69668: NEG
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: LD_INT 2
69676: NEG
69677: PUSH
69678: LD_INT 0
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 2
69687: NEG
69688: PUSH
69689: LD_INT 1
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 3
69698: NEG
69699: PUSH
69700: LD_INT 1
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 4
69709: NEG
69710: PUSH
69711: LD_INT 0
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 4
69720: NEG
69721: PUSH
69722: LD_INT 1
69724: NEG
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 4
69732: NEG
69733: PUSH
69734: LD_INT 2
69736: NEG
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 2
69744: NEG
69745: PUSH
69746: LD_INT 2
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 4
69755: NEG
69756: PUSH
69757: LD_INT 4
69759: NEG
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 4
69767: NEG
69768: PUSH
69769: LD_INT 5
69771: NEG
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 3
69779: NEG
69780: PUSH
69781: LD_INT 4
69783: NEG
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 3
69791: NEG
69792: PUSH
69793: LD_INT 3
69795: NEG
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 4
69803: NEG
69804: PUSH
69805: LD_INT 3
69807: NEG
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 5
69815: NEG
69816: PUSH
69817: LD_INT 4
69819: NEG
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PUSH
69825: LD_INT 5
69827: NEG
69828: PUSH
69829: LD_INT 5
69831: NEG
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 3
69839: NEG
69840: PUSH
69841: LD_INT 5
69843: NEG
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 5
69851: NEG
69852: PUSH
69853: LD_INT 3
69855: NEG
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: LIST
69891: LIST
69892: LIST
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69908: LD_ADDR_VAR 0 30
69912: PUSH
69913: LD_INT 4
69915: PUSH
69916: LD_INT 4
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 4
69925: PUSH
69926: LD_INT 3
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 5
69935: PUSH
69936: LD_INT 4
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: LD_INT 5
69945: PUSH
69946: LD_INT 5
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 4
69955: PUSH
69956: LD_INT 5
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 3
69965: PUSH
69966: LD_INT 4
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 3
69975: PUSH
69976: LD_INT 3
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 5
69985: PUSH
69986: LD_INT 3
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 3
69995: PUSH
69996: LD_INT 5
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 0
70005: PUSH
70006: LD_INT 3
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 0
70015: PUSH
70016: LD_INT 2
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 1
70025: PUSH
70026: LD_INT 3
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 1
70035: PUSH
70036: LD_INT 4
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 0
70045: PUSH
70046: LD_INT 4
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 1
70055: NEG
70056: PUSH
70057: LD_INT 3
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: LD_INT 1
70066: NEG
70067: PUSH
70068: LD_INT 2
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: PUSH
70075: LD_INT 2
70077: PUSH
70078: LD_INT 4
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 2
70087: NEG
70088: PUSH
70089: LD_INT 2
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 4
70098: NEG
70099: PUSH
70100: LD_INT 0
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 4
70109: NEG
70110: PUSH
70111: LD_INT 1
70113: NEG
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: LD_INT 3
70121: NEG
70122: PUSH
70123: LD_INT 0
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 3
70132: NEG
70133: PUSH
70134: LD_INT 1
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 4
70143: NEG
70144: PUSH
70145: LD_INT 1
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: LD_INT 5
70154: NEG
70155: PUSH
70156: LD_INT 0
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 5
70165: NEG
70166: PUSH
70167: LD_INT 1
70169: NEG
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 5
70177: NEG
70178: PUSH
70179: LD_INT 2
70181: NEG
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 3
70189: NEG
70190: PUSH
70191: LD_INT 2
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 3
70200: NEG
70201: PUSH
70202: LD_INT 3
70204: NEG
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 3
70212: NEG
70213: PUSH
70214: LD_INT 4
70216: NEG
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 2
70224: NEG
70225: PUSH
70226: LD_INT 3
70228: NEG
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 2
70236: NEG
70237: PUSH
70238: LD_INT 2
70240: NEG
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 3
70248: NEG
70249: PUSH
70250: LD_INT 2
70252: NEG
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 4
70260: NEG
70261: PUSH
70262: LD_INT 3
70264: NEG
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 4
70272: NEG
70273: PUSH
70274: LD_INT 4
70276: NEG
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 2
70284: NEG
70285: PUSH
70286: LD_INT 4
70288: NEG
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 4
70296: NEG
70297: PUSH
70298: LD_INT 2
70300: NEG
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 0
70308: PUSH
70309: LD_INT 4
70311: NEG
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 0
70319: PUSH
70320: LD_INT 5
70322: NEG
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 1
70330: PUSH
70331: LD_INT 4
70333: NEG
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 1
70341: PUSH
70342: LD_INT 3
70344: NEG
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 0
70352: PUSH
70353: LD_INT 3
70355: NEG
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 1
70363: NEG
70364: PUSH
70365: LD_INT 4
70367: NEG
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 1
70375: NEG
70376: PUSH
70377: LD_INT 5
70379: NEG
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 2
70387: PUSH
70388: LD_INT 3
70390: NEG
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: PUSH
70396: LD_INT 2
70398: NEG
70399: PUSH
70400: LD_INT 5
70402: NEG
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: LIST
70454: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70455: LD_ADDR_VAR 0 31
70459: PUSH
70460: LD_INT 0
70462: PUSH
70463: LD_INT 4
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 0
70472: PUSH
70473: LD_INT 3
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 1
70482: PUSH
70483: LD_INT 4
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 1
70492: PUSH
70493: LD_INT 5
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 0
70502: PUSH
70503: LD_INT 5
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 1
70512: NEG
70513: PUSH
70514: LD_INT 4
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 1
70523: NEG
70524: PUSH
70525: LD_INT 3
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: LD_INT 2
70534: PUSH
70535: LD_INT 5
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: PUSH
70542: LD_INT 2
70544: NEG
70545: PUSH
70546: LD_INT 3
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 3
70555: NEG
70556: PUSH
70557: LD_INT 0
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 3
70566: NEG
70567: PUSH
70568: LD_INT 1
70570: NEG
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: PUSH
70576: LD_INT 2
70578: NEG
70579: PUSH
70580: LD_INT 0
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: LD_INT 2
70589: NEG
70590: PUSH
70591: LD_INT 1
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PUSH
70598: LD_INT 3
70600: NEG
70601: PUSH
70602: LD_INT 1
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 4
70611: NEG
70612: PUSH
70613: LD_INT 0
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 4
70622: NEG
70623: PUSH
70624: LD_INT 1
70626: NEG
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 4
70634: NEG
70635: PUSH
70636: LD_INT 2
70638: NEG
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 2
70646: NEG
70647: PUSH
70648: LD_INT 2
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: LD_INT 4
70657: NEG
70658: PUSH
70659: LD_INT 4
70661: NEG
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 4
70669: NEG
70670: PUSH
70671: LD_INT 5
70673: NEG
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 3
70681: NEG
70682: PUSH
70683: LD_INT 4
70685: NEG
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 3
70693: NEG
70694: PUSH
70695: LD_INT 3
70697: NEG
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 4
70705: NEG
70706: PUSH
70707: LD_INT 3
70709: NEG
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 5
70717: NEG
70718: PUSH
70719: LD_INT 4
70721: NEG
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 5
70729: NEG
70730: PUSH
70731: LD_INT 5
70733: NEG
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 3
70741: NEG
70742: PUSH
70743: LD_INT 5
70745: NEG
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 5
70753: NEG
70754: PUSH
70755: LD_INT 3
70757: NEG
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: LD_INT 0
70765: PUSH
70766: LD_INT 3
70768: NEG
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 0
70776: PUSH
70777: LD_INT 4
70779: NEG
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 1
70787: PUSH
70788: LD_INT 3
70790: NEG
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PUSH
70796: LD_INT 1
70798: PUSH
70799: LD_INT 2
70801: NEG
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: LD_INT 0
70809: PUSH
70810: LD_INT 2
70812: NEG
70813: PUSH
70814: EMPTY
70815: LIST
70816: LIST
70817: PUSH
70818: LD_INT 1
70820: NEG
70821: PUSH
70822: LD_INT 3
70824: NEG
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 1
70832: NEG
70833: PUSH
70834: LD_INT 4
70836: NEG
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 2
70844: PUSH
70845: LD_INT 2
70847: NEG
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PUSH
70853: LD_INT 2
70855: NEG
70856: PUSH
70857: LD_INT 4
70859: NEG
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 4
70867: PUSH
70868: LD_INT 0
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 4
70877: PUSH
70878: LD_INT 1
70880: NEG
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: LD_INT 5
70888: PUSH
70889: LD_INT 0
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 5
70898: PUSH
70899: LD_INT 1
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 4
70908: PUSH
70909: LD_INT 1
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 3
70918: PUSH
70919: LD_INT 0
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: LD_INT 3
70928: PUSH
70929: LD_INT 1
70931: NEG
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: PUSH
70937: LD_INT 3
70939: PUSH
70940: LD_INT 2
70942: NEG
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: PUSH
70948: LD_INT 5
70950: PUSH
70951: LD_INT 2
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71005: LD_ADDR_VAR 0 32
71009: PUSH
71010: LD_INT 4
71012: NEG
71013: PUSH
71014: LD_INT 0
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 4
71023: NEG
71024: PUSH
71025: LD_INT 1
71027: NEG
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: PUSH
71033: LD_INT 3
71035: NEG
71036: PUSH
71037: LD_INT 0
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 3
71046: NEG
71047: PUSH
71048: LD_INT 1
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: LD_INT 4
71057: NEG
71058: PUSH
71059: LD_INT 1
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 5
71068: NEG
71069: PUSH
71070: LD_INT 0
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 5
71079: NEG
71080: PUSH
71081: LD_INT 1
71083: NEG
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_INT 5
71091: NEG
71092: PUSH
71093: LD_INT 2
71095: NEG
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 3
71103: NEG
71104: PUSH
71105: LD_INT 2
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 3
71114: NEG
71115: PUSH
71116: LD_INT 3
71118: NEG
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 3
71126: NEG
71127: PUSH
71128: LD_INT 4
71130: NEG
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 2
71138: NEG
71139: PUSH
71140: LD_INT 3
71142: NEG
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 2
71150: NEG
71151: PUSH
71152: LD_INT 2
71154: NEG
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 3
71162: NEG
71163: PUSH
71164: LD_INT 2
71166: NEG
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: LD_INT 4
71174: NEG
71175: PUSH
71176: LD_INT 3
71178: NEG
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: LD_INT 4
71186: NEG
71187: PUSH
71188: LD_INT 4
71190: NEG
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: PUSH
71196: LD_INT 2
71198: NEG
71199: PUSH
71200: LD_INT 4
71202: NEG
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 4
71210: NEG
71211: PUSH
71212: LD_INT 2
71214: NEG
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: LD_INT 0
71222: PUSH
71223: LD_INT 4
71225: NEG
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: PUSH
71231: LD_INT 0
71233: PUSH
71234: LD_INT 5
71236: NEG
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: PUSH
71242: LD_INT 1
71244: PUSH
71245: LD_INT 4
71247: NEG
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: LD_INT 1
71255: PUSH
71256: LD_INT 3
71258: NEG
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_INT 0
71266: PUSH
71267: LD_INT 3
71269: NEG
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: LD_INT 1
71277: NEG
71278: PUSH
71279: LD_INT 4
71281: NEG
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 1
71289: NEG
71290: PUSH
71291: LD_INT 5
71293: NEG
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 2
71301: PUSH
71302: LD_INT 3
71304: NEG
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 2
71312: NEG
71313: PUSH
71314: LD_INT 5
71316: NEG
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 3
71324: PUSH
71325: LD_INT 0
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 3
71334: PUSH
71335: LD_INT 1
71337: NEG
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: LD_INT 4
71345: PUSH
71346: LD_INT 0
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: LD_INT 4
71355: PUSH
71356: LD_INT 1
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: PUSH
71363: LD_INT 3
71365: PUSH
71366: LD_INT 1
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: PUSH
71373: LD_INT 2
71375: PUSH
71376: LD_INT 0
71378: PUSH
71379: EMPTY
71380: LIST
71381: LIST
71382: PUSH
71383: LD_INT 2
71385: PUSH
71386: LD_INT 1
71388: NEG
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: PUSH
71394: LD_INT 2
71396: PUSH
71397: LD_INT 2
71399: NEG
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: PUSH
71405: LD_INT 4
71407: PUSH
71408: LD_INT 2
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: PUSH
71415: LD_INT 4
71417: PUSH
71418: LD_INT 4
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: PUSH
71425: LD_INT 4
71427: PUSH
71428: LD_INT 3
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: PUSH
71435: LD_INT 5
71437: PUSH
71438: LD_INT 4
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 5
71447: PUSH
71448: LD_INT 5
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 4
71457: PUSH
71458: LD_INT 5
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 3
71467: PUSH
71468: LD_INT 4
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 3
71477: PUSH
71478: LD_INT 3
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 5
71487: PUSH
71488: LD_INT 3
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PUSH
71495: LD_INT 3
71497: PUSH
71498: LD_INT 5
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: LIST
71541: LIST
71542: LIST
71543: LIST
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: LIST
71549: LIST
71550: LIST
71551: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71552: LD_ADDR_VAR 0 33
71556: PUSH
71557: LD_INT 4
71559: NEG
71560: PUSH
71561: LD_INT 4
71563: NEG
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: PUSH
71569: LD_INT 4
71571: NEG
71572: PUSH
71573: LD_INT 5
71575: NEG
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PUSH
71581: LD_INT 3
71583: NEG
71584: PUSH
71585: LD_INT 4
71587: NEG
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: LD_INT 3
71595: NEG
71596: PUSH
71597: LD_INT 3
71599: NEG
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 4
71607: NEG
71608: PUSH
71609: LD_INT 3
71611: NEG
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 5
71619: NEG
71620: PUSH
71621: LD_INT 4
71623: NEG
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PUSH
71629: LD_INT 5
71631: NEG
71632: PUSH
71633: LD_INT 5
71635: NEG
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: PUSH
71641: LD_INT 3
71643: NEG
71644: PUSH
71645: LD_INT 5
71647: NEG
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 5
71655: NEG
71656: PUSH
71657: LD_INT 3
71659: NEG
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: LD_INT 0
71667: PUSH
71668: LD_INT 3
71670: NEG
71671: PUSH
71672: EMPTY
71673: LIST
71674: LIST
71675: PUSH
71676: LD_INT 0
71678: PUSH
71679: LD_INT 4
71681: NEG
71682: PUSH
71683: EMPTY
71684: LIST
71685: LIST
71686: PUSH
71687: LD_INT 1
71689: PUSH
71690: LD_INT 3
71692: NEG
71693: PUSH
71694: EMPTY
71695: LIST
71696: LIST
71697: PUSH
71698: LD_INT 1
71700: PUSH
71701: LD_INT 2
71703: NEG
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: PUSH
71709: LD_INT 0
71711: PUSH
71712: LD_INT 2
71714: NEG
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: PUSH
71720: LD_INT 1
71722: NEG
71723: PUSH
71724: LD_INT 3
71726: NEG
71727: PUSH
71728: EMPTY
71729: LIST
71730: LIST
71731: PUSH
71732: LD_INT 1
71734: NEG
71735: PUSH
71736: LD_INT 4
71738: NEG
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 2
71746: PUSH
71747: LD_INT 2
71749: NEG
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_INT 2
71757: NEG
71758: PUSH
71759: LD_INT 4
71761: NEG
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: PUSH
71767: LD_INT 4
71769: PUSH
71770: LD_INT 0
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 4
71779: PUSH
71780: LD_INT 1
71782: NEG
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: LD_INT 5
71790: PUSH
71791: LD_INT 0
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 5
71800: PUSH
71801: LD_INT 1
71803: PUSH
71804: EMPTY
71805: LIST
71806: LIST
71807: PUSH
71808: LD_INT 4
71810: PUSH
71811: LD_INT 1
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 3
71820: PUSH
71821: LD_INT 0
71823: PUSH
71824: EMPTY
71825: LIST
71826: LIST
71827: PUSH
71828: LD_INT 3
71830: PUSH
71831: LD_INT 1
71833: NEG
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: PUSH
71839: LD_INT 3
71841: PUSH
71842: LD_INT 2
71844: NEG
71845: PUSH
71846: EMPTY
71847: LIST
71848: LIST
71849: PUSH
71850: LD_INT 5
71852: PUSH
71853: LD_INT 2
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: LD_INT 3
71862: PUSH
71863: LD_INT 3
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: PUSH
71870: LD_INT 3
71872: PUSH
71873: LD_INT 2
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PUSH
71880: LD_INT 4
71882: PUSH
71883: LD_INT 3
71885: PUSH
71886: EMPTY
71887: LIST
71888: LIST
71889: PUSH
71890: LD_INT 4
71892: PUSH
71893: LD_INT 4
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PUSH
71900: LD_INT 3
71902: PUSH
71903: LD_INT 4
71905: PUSH
71906: EMPTY
71907: LIST
71908: LIST
71909: PUSH
71910: LD_INT 2
71912: PUSH
71913: LD_INT 3
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: PUSH
71920: LD_INT 2
71922: PUSH
71923: LD_INT 2
71925: PUSH
71926: EMPTY
71927: LIST
71928: LIST
71929: PUSH
71930: LD_INT 4
71932: PUSH
71933: LD_INT 2
71935: PUSH
71936: EMPTY
71937: LIST
71938: LIST
71939: PUSH
71940: LD_INT 2
71942: PUSH
71943: LD_INT 4
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PUSH
71950: LD_INT 0
71952: PUSH
71953: LD_INT 4
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: LD_INT 0
71962: PUSH
71963: LD_INT 3
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: PUSH
71970: LD_INT 1
71972: PUSH
71973: LD_INT 4
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 1
71982: PUSH
71983: LD_INT 5
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 0
71992: PUSH
71993: LD_INT 5
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: PUSH
72000: LD_INT 1
72002: NEG
72003: PUSH
72004: LD_INT 4
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 1
72013: NEG
72014: PUSH
72015: LD_INT 3
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: PUSH
72022: LD_INT 2
72024: PUSH
72025: LD_INT 5
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: PUSH
72032: LD_INT 2
72034: NEG
72035: PUSH
72036: LD_INT 3
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: LIST
72047: LIST
72048: LIST
72049: LIST
72050: LIST
72051: LIST
72052: LIST
72053: LIST
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: LIST
72072: LIST
72073: LIST
72074: LIST
72075: LIST
72076: LIST
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72090: LD_ADDR_VAR 0 34
72094: PUSH
72095: LD_INT 0
72097: PUSH
72098: LD_INT 4
72100: NEG
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PUSH
72106: LD_INT 0
72108: PUSH
72109: LD_INT 5
72111: NEG
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: PUSH
72117: LD_INT 1
72119: PUSH
72120: LD_INT 4
72122: NEG
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: LD_INT 1
72130: PUSH
72131: LD_INT 3
72133: NEG
72134: PUSH
72135: EMPTY
72136: LIST
72137: LIST
72138: PUSH
72139: LD_INT 0
72141: PUSH
72142: LD_INT 3
72144: NEG
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: PUSH
72150: LD_INT 1
72152: NEG
72153: PUSH
72154: LD_INT 4
72156: NEG
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: LD_INT 1
72164: NEG
72165: PUSH
72166: LD_INT 5
72168: NEG
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: PUSH
72174: LD_INT 2
72176: PUSH
72177: LD_INT 3
72179: NEG
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: PUSH
72185: LD_INT 2
72187: NEG
72188: PUSH
72189: LD_INT 5
72191: NEG
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: PUSH
72197: LD_INT 3
72199: PUSH
72200: LD_INT 0
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: PUSH
72207: LD_INT 3
72209: PUSH
72210: LD_INT 1
72212: NEG
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: PUSH
72218: LD_INT 4
72220: PUSH
72221: LD_INT 0
72223: PUSH
72224: EMPTY
72225: LIST
72226: LIST
72227: PUSH
72228: LD_INT 4
72230: PUSH
72231: LD_INT 1
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PUSH
72238: LD_INT 3
72240: PUSH
72241: LD_INT 1
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: PUSH
72248: LD_INT 2
72250: PUSH
72251: LD_INT 0
72253: PUSH
72254: EMPTY
72255: LIST
72256: LIST
72257: PUSH
72258: LD_INT 2
72260: PUSH
72261: LD_INT 1
72263: NEG
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: PUSH
72269: LD_INT 2
72271: PUSH
72272: LD_INT 2
72274: NEG
72275: PUSH
72276: EMPTY
72277: LIST
72278: LIST
72279: PUSH
72280: LD_INT 4
72282: PUSH
72283: LD_INT 2
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: PUSH
72290: LD_INT 4
72292: PUSH
72293: LD_INT 4
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: PUSH
72300: LD_INT 4
72302: PUSH
72303: LD_INT 3
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: PUSH
72310: LD_INT 5
72312: PUSH
72313: LD_INT 4
72315: PUSH
72316: EMPTY
72317: LIST
72318: LIST
72319: PUSH
72320: LD_INT 5
72322: PUSH
72323: LD_INT 5
72325: PUSH
72326: EMPTY
72327: LIST
72328: LIST
72329: PUSH
72330: LD_INT 4
72332: PUSH
72333: LD_INT 5
72335: PUSH
72336: EMPTY
72337: LIST
72338: LIST
72339: PUSH
72340: LD_INT 3
72342: PUSH
72343: LD_INT 4
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PUSH
72350: LD_INT 3
72352: PUSH
72353: LD_INT 3
72355: PUSH
72356: EMPTY
72357: LIST
72358: LIST
72359: PUSH
72360: LD_INT 5
72362: PUSH
72363: LD_INT 3
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: PUSH
72370: LD_INT 3
72372: PUSH
72373: LD_INT 5
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PUSH
72380: LD_INT 0
72382: PUSH
72383: LD_INT 3
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 0
72392: PUSH
72393: LD_INT 2
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: PUSH
72400: LD_INT 1
72402: PUSH
72403: LD_INT 3
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: PUSH
72410: LD_INT 1
72412: PUSH
72413: LD_INT 4
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: LD_INT 0
72422: PUSH
72423: LD_INT 4
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: PUSH
72430: LD_INT 1
72432: NEG
72433: PUSH
72434: LD_INT 3
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PUSH
72441: LD_INT 1
72443: NEG
72444: PUSH
72445: LD_INT 2
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: PUSH
72452: LD_INT 2
72454: PUSH
72455: LD_INT 4
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: PUSH
72462: LD_INT 2
72464: NEG
72465: PUSH
72466: LD_INT 2
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: LD_INT 4
72475: NEG
72476: PUSH
72477: LD_INT 0
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: PUSH
72484: LD_INT 4
72486: NEG
72487: PUSH
72488: LD_INT 1
72490: NEG
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: PUSH
72496: LD_INT 3
72498: NEG
72499: PUSH
72500: LD_INT 0
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: PUSH
72507: LD_INT 3
72509: NEG
72510: PUSH
72511: LD_INT 1
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: LD_INT 4
72520: NEG
72521: PUSH
72522: LD_INT 1
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: LD_INT 5
72531: NEG
72532: PUSH
72533: LD_INT 0
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_INT 5
72542: NEG
72543: PUSH
72544: LD_INT 1
72546: NEG
72547: PUSH
72548: EMPTY
72549: LIST
72550: LIST
72551: PUSH
72552: LD_INT 5
72554: NEG
72555: PUSH
72556: LD_INT 2
72558: NEG
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: PUSH
72564: LD_INT 3
72566: NEG
72567: PUSH
72568: LD_INT 2
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: LIST
72579: LIST
72580: LIST
72581: LIST
72582: LIST
72583: LIST
72584: LIST
72585: LIST
72586: LIST
72587: LIST
72588: LIST
72589: LIST
72590: LIST
72591: LIST
72592: LIST
72593: LIST
72594: LIST
72595: LIST
72596: LIST
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: LIST
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: LIST
72610: LIST
72611: LIST
72612: LIST
72613: LIST
72614: LIST
72615: LIST
72616: LIST
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: ST_TO_ADDR
// end ; end ;
72622: GO 72625
72624: POP
// case btype of b_depot , b_warehouse :
72625: LD_VAR 0 1
72629: PUSH
72630: LD_INT 0
72632: DOUBLE
72633: EQUAL
72634: IFTRUE 72644
72636: LD_INT 1
72638: DOUBLE
72639: EQUAL
72640: IFTRUE 72644
72642: GO 72845
72644: POP
// case nation of nation_american :
72645: LD_VAR 0 5
72649: PUSH
72650: LD_INT 1
72652: DOUBLE
72653: EQUAL
72654: IFTRUE 72658
72656: GO 72714
72658: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72659: LD_ADDR_VAR 0 9
72663: PUSH
72664: LD_VAR 0 11
72668: PUSH
72669: LD_VAR 0 12
72673: PUSH
72674: LD_VAR 0 13
72678: PUSH
72679: LD_VAR 0 14
72683: PUSH
72684: LD_VAR 0 15
72688: PUSH
72689: LD_VAR 0 16
72693: PUSH
72694: EMPTY
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: PUSH
72702: LD_VAR 0 4
72706: PUSH
72707: LD_INT 1
72709: PLUS
72710: ARRAY
72711: ST_TO_ADDR
72712: GO 72843
72714: LD_INT 2
72716: DOUBLE
72717: EQUAL
72718: IFTRUE 72722
72720: GO 72778
72722: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72723: LD_ADDR_VAR 0 9
72727: PUSH
72728: LD_VAR 0 17
72732: PUSH
72733: LD_VAR 0 18
72737: PUSH
72738: LD_VAR 0 19
72742: PUSH
72743: LD_VAR 0 20
72747: PUSH
72748: LD_VAR 0 21
72752: PUSH
72753: LD_VAR 0 22
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: PUSH
72766: LD_VAR 0 4
72770: PUSH
72771: LD_INT 1
72773: PLUS
72774: ARRAY
72775: ST_TO_ADDR
72776: GO 72843
72778: LD_INT 3
72780: DOUBLE
72781: EQUAL
72782: IFTRUE 72786
72784: GO 72842
72786: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72787: LD_ADDR_VAR 0 9
72791: PUSH
72792: LD_VAR 0 23
72796: PUSH
72797: LD_VAR 0 24
72801: PUSH
72802: LD_VAR 0 25
72806: PUSH
72807: LD_VAR 0 26
72811: PUSH
72812: LD_VAR 0 27
72816: PUSH
72817: LD_VAR 0 28
72821: PUSH
72822: EMPTY
72823: LIST
72824: LIST
72825: LIST
72826: LIST
72827: LIST
72828: LIST
72829: PUSH
72830: LD_VAR 0 4
72834: PUSH
72835: LD_INT 1
72837: PLUS
72838: ARRAY
72839: ST_TO_ADDR
72840: GO 72843
72842: POP
72843: GO 73398
72845: LD_INT 2
72847: DOUBLE
72848: EQUAL
72849: IFTRUE 72859
72851: LD_INT 3
72853: DOUBLE
72854: EQUAL
72855: IFTRUE 72859
72857: GO 72915
72859: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72860: LD_ADDR_VAR 0 9
72864: PUSH
72865: LD_VAR 0 29
72869: PUSH
72870: LD_VAR 0 30
72874: PUSH
72875: LD_VAR 0 31
72879: PUSH
72880: LD_VAR 0 32
72884: PUSH
72885: LD_VAR 0 33
72889: PUSH
72890: LD_VAR 0 34
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: LIST
72902: PUSH
72903: LD_VAR 0 4
72907: PUSH
72908: LD_INT 1
72910: PLUS
72911: ARRAY
72912: ST_TO_ADDR
72913: GO 73398
72915: LD_INT 16
72917: DOUBLE
72918: EQUAL
72919: IFTRUE 72977
72921: LD_INT 17
72923: DOUBLE
72924: EQUAL
72925: IFTRUE 72977
72927: LD_INT 18
72929: DOUBLE
72930: EQUAL
72931: IFTRUE 72977
72933: LD_INT 19
72935: DOUBLE
72936: EQUAL
72937: IFTRUE 72977
72939: LD_INT 22
72941: DOUBLE
72942: EQUAL
72943: IFTRUE 72977
72945: LD_INT 20
72947: DOUBLE
72948: EQUAL
72949: IFTRUE 72977
72951: LD_INT 21
72953: DOUBLE
72954: EQUAL
72955: IFTRUE 72977
72957: LD_INT 23
72959: DOUBLE
72960: EQUAL
72961: IFTRUE 72977
72963: LD_INT 24
72965: DOUBLE
72966: EQUAL
72967: IFTRUE 72977
72969: LD_INT 25
72971: DOUBLE
72972: EQUAL
72973: IFTRUE 72977
72975: GO 73033
72977: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72978: LD_ADDR_VAR 0 9
72982: PUSH
72983: LD_VAR 0 35
72987: PUSH
72988: LD_VAR 0 36
72992: PUSH
72993: LD_VAR 0 37
72997: PUSH
72998: LD_VAR 0 38
73002: PUSH
73003: LD_VAR 0 39
73007: PUSH
73008: LD_VAR 0 40
73012: PUSH
73013: EMPTY
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: PUSH
73021: LD_VAR 0 4
73025: PUSH
73026: LD_INT 1
73028: PLUS
73029: ARRAY
73030: ST_TO_ADDR
73031: GO 73398
73033: LD_INT 6
73035: DOUBLE
73036: EQUAL
73037: IFTRUE 73089
73039: LD_INT 7
73041: DOUBLE
73042: EQUAL
73043: IFTRUE 73089
73045: LD_INT 8
73047: DOUBLE
73048: EQUAL
73049: IFTRUE 73089
73051: LD_INT 13
73053: DOUBLE
73054: EQUAL
73055: IFTRUE 73089
73057: LD_INT 12
73059: DOUBLE
73060: EQUAL
73061: IFTRUE 73089
73063: LD_INT 15
73065: DOUBLE
73066: EQUAL
73067: IFTRUE 73089
73069: LD_INT 11
73071: DOUBLE
73072: EQUAL
73073: IFTRUE 73089
73075: LD_INT 14
73077: DOUBLE
73078: EQUAL
73079: IFTRUE 73089
73081: LD_INT 10
73083: DOUBLE
73084: EQUAL
73085: IFTRUE 73089
73087: GO 73145
73089: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73090: LD_ADDR_VAR 0 9
73094: PUSH
73095: LD_VAR 0 41
73099: PUSH
73100: LD_VAR 0 42
73104: PUSH
73105: LD_VAR 0 43
73109: PUSH
73110: LD_VAR 0 44
73114: PUSH
73115: LD_VAR 0 45
73119: PUSH
73120: LD_VAR 0 46
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: LIST
73132: PUSH
73133: LD_VAR 0 4
73137: PUSH
73138: LD_INT 1
73140: PLUS
73141: ARRAY
73142: ST_TO_ADDR
73143: GO 73398
73145: LD_INT 36
73147: DOUBLE
73148: EQUAL
73149: IFTRUE 73153
73151: GO 73209
73153: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73154: LD_ADDR_VAR 0 9
73158: PUSH
73159: LD_VAR 0 47
73163: PUSH
73164: LD_VAR 0 48
73168: PUSH
73169: LD_VAR 0 49
73173: PUSH
73174: LD_VAR 0 50
73178: PUSH
73179: LD_VAR 0 51
73183: PUSH
73184: LD_VAR 0 52
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: PUSH
73197: LD_VAR 0 4
73201: PUSH
73202: LD_INT 1
73204: PLUS
73205: ARRAY
73206: ST_TO_ADDR
73207: GO 73398
73209: LD_INT 4
73211: DOUBLE
73212: EQUAL
73213: IFTRUE 73235
73215: LD_INT 5
73217: DOUBLE
73218: EQUAL
73219: IFTRUE 73235
73221: LD_INT 34
73223: DOUBLE
73224: EQUAL
73225: IFTRUE 73235
73227: LD_INT 37
73229: DOUBLE
73230: EQUAL
73231: IFTRUE 73235
73233: GO 73291
73235: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73236: LD_ADDR_VAR 0 9
73240: PUSH
73241: LD_VAR 0 53
73245: PUSH
73246: LD_VAR 0 54
73250: PUSH
73251: LD_VAR 0 55
73255: PUSH
73256: LD_VAR 0 56
73260: PUSH
73261: LD_VAR 0 57
73265: PUSH
73266: LD_VAR 0 58
73270: PUSH
73271: EMPTY
73272: LIST
73273: LIST
73274: LIST
73275: LIST
73276: LIST
73277: LIST
73278: PUSH
73279: LD_VAR 0 4
73283: PUSH
73284: LD_INT 1
73286: PLUS
73287: ARRAY
73288: ST_TO_ADDR
73289: GO 73398
73291: LD_INT 31
73293: DOUBLE
73294: EQUAL
73295: IFTRUE 73341
73297: LD_INT 32
73299: DOUBLE
73300: EQUAL
73301: IFTRUE 73341
73303: LD_INT 33
73305: DOUBLE
73306: EQUAL
73307: IFTRUE 73341
73309: LD_INT 27
73311: DOUBLE
73312: EQUAL
73313: IFTRUE 73341
73315: LD_INT 26
73317: DOUBLE
73318: EQUAL
73319: IFTRUE 73341
73321: LD_INT 28
73323: DOUBLE
73324: EQUAL
73325: IFTRUE 73341
73327: LD_INT 29
73329: DOUBLE
73330: EQUAL
73331: IFTRUE 73341
73333: LD_INT 30
73335: DOUBLE
73336: EQUAL
73337: IFTRUE 73341
73339: GO 73397
73341: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73342: LD_ADDR_VAR 0 9
73346: PUSH
73347: LD_VAR 0 59
73351: PUSH
73352: LD_VAR 0 60
73356: PUSH
73357: LD_VAR 0 61
73361: PUSH
73362: LD_VAR 0 62
73366: PUSH
73367: LD_VAR 0 63
73371: PUSH
73372: LD_VAR 0 64
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: LIST
73381: LIST
73382: LIST
73383: LIST
73384: PUSH
73385: LD_VAR 0 4
73389: PUSH
73390: LD_INT 1
73392: PLUS
73393: ARRAY
73394: ST_TO_ADDR
73395: GO 73398
73397: POP
// temp_list2 = [ ] ;
73398: LD_ADDR_VAR 0 10
73402: PUSH
73403: EMPTY
73404: ST_TO_ADDR
// for i in temp_list do
73405: LD_ADDR_VAR 0 8
73409: PUSH
73410: LD_VAR 0 9
73414: PUSH
73415: FOR_IN
73416: IFFALSE 73468
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73418: LD_ADDR_VAR 0 10
73422: PUSH
73423: LD_VAR 0 10
73427: PUSH
73428: LD_VAR 0 8
73432: PUSH
73433: LD_INT 1
73435: ARRAY
73436: PUSH
73437: LD_VAR 0 2
73441: PLUS
73442: PUSH
73443: LD_VAR 0 8
73447: PUSH
73448: LD_INT 2
73450: ARRAY
73451: PUSH
73452: LD_VAR 0 3
73456: PLUS
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: PUSH
73462: EMPTY
73463: LIST
73464: ADD
73465: ST_TO_ADDR
73466: GO 73415
73468: POP
73469: POP
// result = temp_list2 ;
73470: LD_ADDR_VAR 0 7
73474: PUSH
73475: LD_VAR 0 10
73479: ST_TO_ADDR
// end ;
73480: LD_VAR 0 7
73484: RET
// export function EnemyInRange ( unit , dist ) ; begin
73485: LD_INT 0
73487: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73488: LD_ADDR_VAR 0 3
73492: PUSH
73493: LD_VAR 0 1
73497: PPUSH
73498: CALL_OW 255
73502: PPUSH
73503: LD_VAR 0 1
73507: PPUSH
73508: CALL_OW 250
73512: PPUSH
73513: LD_VAR 0 1
73517: PPUSH
73518: CALL_OW 251
73522: PPUSH
73523: LD_VAR 0 2
73527: PPUSH
73528: CALL 46858 0 4
73532: PUSH
73533: LD_INT 4
73535: ARRAY
73536: ST_TO_ADDR
// end ;
73537: LD_VAR 0 3
73541: RET
// export function PlayerSeeMe ( unit ) ; begin
73542: LD_INT 0
73544: PPUSH
// result := See ( your_side , unit ) ;
73545: LD_ADDR_VAR 0 2
73549: PUSH
73550: LD_OWVAR 2
73554: PPUSH
73555: LD_VAR 0 1
73559: PPUSH
73560: CALL_OW 292
73564: ST_TO_ADDR
// end ;
73565: LD_VAR 0 2
73569: RET
// export function ReverseDir ( unit ) ; begin
73570: LD_INT 0
73572: PPUSH
// if not unit then
73573: LD_VAR 0 1
73577: NOT
73578: IFFALSE 73582
// exit ;
73580: GO 73605
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73582: LD_ADDR_VAR 0 2
73586: PUSH
73587: LD_VAR 0 1
73591: PPUSH
73592: CALL_OW 254
73596: PUSH
73597: LD_INT 3
73599: PLUS
73600: PUSH
73601: LD_INT 6
73603: MOD
73604: ST_TO_ADDR
// end ;
73605: LD_VAR 0 2
73609: RET
// export function ReverseArray ( array ) ; var i ; begin
73610: LD_INT 0
73612: PPUSH
73613: PPUSH
// if not array then
73614: LD_VAR 0 1
73618: NOT
73619: IFFALSE 73623
// exit ;
73621: GO 73678
// result := [ ] ;
73623: LD_ADDR_VAR 0 2
73627: PUSH
73628: EMPTY
73629: ST_TO_ADDR
// for i := array downto 1 do
73630: LD_ADDR_VAR 0 3
73634: PUSH
73635: DOUBLE
73636: LD_VAR 0 1
73640: INC
73641: ST_TO_ADDR
73642: LD_INT 1
73644: PUSH
73645: FOR_DOWNTO
73646: IFFALSE 73676
// result := Join ( result , array [ i ] ) ;
73648: LD_ADDR_VAR 0 2
73652: PUSH
73653: LD_VAR 0 2
73657: PPUSH
73658: LD_VAR 0 1
73662: PUSH
73663: LD_VAR 0 3
73667: ARRAY
73668: PPUSH
73669: CALL 78343 0 2
73673: ST_TO_ADDR
73674: GO 73645
73676: POP
73677: POP
// end ;
73678: LD_VAR 0 2
73682: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73683: LD_INT 0
73685: PPUSH
73686: PPUSH
73687: PPUSH
73688: PPUSH
73689: PPUSH
73690: PPUSH
// if not unit or not hexes then
73691: LD_VAR 0 1
73695: NOT
73696: PUSH
73697: LD_VAR 0 2
73701: NOT
73702: OR
73703: IFFALSE 73707
// exit ;
73705: GO 73830
// dist := 9999 ;
73707: LD_ADDR_VAR 0 5
73711: PUSH
73712: LD_INT 9999
73714: ST_TO_ADDR
// for i = 1 to hexes do
73715: LD_ADDR_VAR 0 4
73719: PUSH
73720: DOUBLE
73721: LD_INT 1
73723: DEC
73724: ST_TO_ADDR
73725: LD_VAR 0 2
73729: PUSH
73730: FOR_TO
73731: IFFALSE 73818
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73733: LD_ADDR_VAR 0 6
73737: PUSH
73738: LD_VAR 0 1
73742: PPUSH
73743: LD_VAR 0 2
73747: PUSH
73748: LD_VAR 0 4
73752: ARRAY
73753: PUSH
73754: LD_INT 1
73756: ARRAY
73757: PPUSH
73758: LD_VAR 0 2
73762: PUSH
73763: LD_VAR 0 4
73767: ARRAY
73768: PUSH
73769: LD_INT 2
73771: ARRAY
73772: PPUSH
73773: CALL_OW 297
73777: ST_TO_ADDR
// if tdist < dist then
73778: LD_VAR 0 6
73782: PUSH
73783: LD_VAR 0 5
73787: LESS
73788: IFFALSE 73816
// begin hex := hexes [ i ] ;
73790: LD_ADDR_VAR 0 8
73794: PUSH
73795: LD_VAR 0 2
73799: PUSH
73800: LD_VAR 0 4
73804: ARRAY
73805: ST_TO_ADDR
// dist := tdist ;
73806: LD_ADDR_VAR 0 5
73810: PUSH
73811: LD_VAR 0 6
73815: ST_TO_ADDR
// end ; end ;
73816: GO 73730
73818: POP
73819: POP
// result := hex ;
73820: LD_ADDR_VAR 0 3
73824: PUSH
73825: LD_VAR 0 8
73829: ST_TO_ADDR
// end ;
73830: LD_VAR 0 3
73834: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73835: LD_INT 0
73837: PPUSH
73838: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73839: LD_VAR 0 1
73843: NOT
73844: PUSH
73845: LD_VAR 0 1
73849: PUSH
73850: LD_INT 21
73852: PUSH
73853: LD_INT 2
73855: PUSH
73856: EMPTY
73857: LIST
73858: LIST
73859: PUSH
73860: LD_INT 23
73862: PUSH
73863: LD_INT 2
73865: PUSH
73866: EMPTY
73867: LIST
73868: LIST
73869: PUSH
73870: EMPTY
73871: LIST
73872: LIST
73873: PPUSH
73874: CALL_OW 69
73878: IN
73879: NOT
73880: OR
73881: IFFALSE 73885
// exit ;
73883: GO 73932
// for i = 1 to 3 do
73885: LD_ADDR_VAR 0 3
73889: PUSH
73890: DOUBLE
73891: LD_INT 1
73893: DEC
73894: ST_TO_ADDR
73895: LD_INT 3
73897: PUSH
73898: FOR_TO
73899: IFFALSE 73930
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73901: LD_VAR 0 1
73905: PPUSH
73906: CALL_OW 250
73910: PPUSH
73911: LD_VAR 0 1
73915: PPUSH
73916: CALL_OW 251
73920: PPUSH
73921: LD_INT 1
73923: PPUSH
73924: CALL_OW 453
73928: GO 73898
73930: POP
73931: POP
// end ;
73932: LD_VAR 0 2
73936: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73937: LD_INT 0
73939: PPUSH
73940: PPUSH
73941: PPUSH
73942: PPUSH
73943: PPUSH
73944: PPUSH
// if not unit or not enemy_unit then
73945: LD_VAR 0 1
73949: NOT
73950: PUSH
73951: LD_VAR 0 2
73955: NOT
73956: OR
73957: IFFALSE 73961
// exit ;
73959: GO 74428
// if GetLives ( i ) < 250 then
73961: LD_VAR 0 4
73965: PPUSH
73966: CALL_OW 256
73970: PUSH
73971: LD_INT 250
73973: LESS
73974: IFFALSE 73987
// begin ComAutodestruct ( i ) ;
73976: LD_VAR 0 4
73980: PPUSH
73981: CALL 73835 0 1
// exit ;
73985: GO 74428
// end ; x := GetX ( enemy_unit ) ;
73987: LD_ADDR_VAR 0 7
73991: PUSH
73992: LD_VAR 0 2
73996: PPUSH
73997: CALL_OW 250
74001: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74002: LD_ADDR_VAR 0 8
74006: PUSH
74007: LD_VAR 0 2
74011: PPUSH
74012: CALL_OW 251
74016: ST_TO_ADDR
// if not x or not y then
74017: LD_VAR 0 7
74021: NOT
74022: PUSH
74023: LD_VAR 0 8
74027: NOT
74028: OR
74029: IFFALSE 74033
// exit ;
74031: GO 74428
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74033: LD_ADDR_VAR 0 6
74037: PUSH
74038: LD_VAR 0 7
74042: PPUSH
74043: LD_INT 0
74045: PPUSH
74046: LD_INT 4
74048: PPUSH
74049: CALL_OW 272
74053: PUSH
74054: LD_VAR 0 8
74058: PPUSH
74059: LD_INT 0
74061: PPUSH
74062: LD_INT 4
74064: PPUSH
74065: CALL_OW 273
74069: PUSH
74070: EMPTY
74071: LIST
74072: LIST
74073: PUSH
74074: LD_VAR 0 7
74078: PPUSH
74079: LD_INT 1
74081: PPUSH
74082: LD_INT 4
74084: PPUSH
74085: CALL_OW 272
74089: PUSH
74090: LD_VAR 0 8
74094: PPUSH
74095: LD_INT 1
74097: PPUSH
74098: LD_INT 4
74100: PPUSH
74101: CALL_OW 273
74105: PUSH
74106: EMPTY
74107: LIST
74108: LIST
74109: PUSH
74110: LD_VAR 0 7
74114: PPUSH
74115: LD_INT 2
74117: PPUSH
74118: LD_INT 4
74120: PPUSH
74121: CALL_OW 272
74125: PUSH
74126: LD_VAR 0 8
74130: PPUSH
74131: LD_INT 2
74133: PPUSH
74134: LD_INT 4
74136: PPUSH
74137: CALL_OW 273
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: PUSH
74146: LD_VAR 0 7
74150: PPUSH
74151: LD_INT 3
74153: PPUSH
74154: LD_INT 4
74156: PPUSH
74157: CALL_OW 272
74161: PUSH
74162: LD_VAR 0 8
74166: PPUSH
74167: LD_INT 3
74169: PPUSH
74170: LD_INT 4
74172: PPUSH
74173: CALL_OW 273
74177: PUSH
74178: EMPTY
74179: LIST
74180: LIST
74181: PUSH
74182: LD_VAR 0 7
74186: PPUSH
74187: LD_INT 4
74189: PPUSH
74190: LD_INT 4
74192: PPUSH
74193: CALL_OW 272
74197: PUSH
74198: LD_VAR 0 8
74202: PPUSH
74203: LD_INT 4
74205: PPUSH
74206: LD_INT 4
74208: PPUSH
74209: CALL_OW 273
74213: PUSH
74214: EMPTY
74215: LIST
74216: LIST
74217: PUSH
74218: LD_VAR 0 7
74222: PPUSH
74223: LD_INT 5
74225: PPUSH
74226: LD_INT 4
74228: PPUSH
74229: CALL_OW 272
74233: PUSH
74234: LD_VAR 0 8
74238: PPUSH
74239: LD_INT 5
74241: PPUSH
74242: LD_INT 4
74244: PPUSH
74245: CALL_OW 273
74249: PUSH
74250: EMPTY
74251: LIST
74252: LIST
74253: PUSH
74254: EMPTY
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: LIST
74261: ST_TO_ADDR
// for i = tmp downto 1 do
74262: LD_ADDR_VAR 0 4
74266: PUSH
74267: DOUBLE
74268: LD_VAR 0 6
74272: INC
74273: ST_TO_ADDR
74274: LD_INT 1
74276: PUSH
74277: FOR_DOWNTO
74278: IFFALSE 74379
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74280: LD_VAR 0 6
74284: PUSH
74285: LD_VAR 0 4
74289: ARRAY
74290: PUSH
74291: LD_INT 1
74293: ARRAY
74294: PPUSH
74295: LD_VAR 0 6
74299: PUSH
74300: LD_VAR 0 4
74304: ARRAY
74305: PUSH
74306: LD_INT 2
74308: ARRAY
74309: PPUSH
74310: CALL_OW 488
74314: NOT
74315: PUSH
74316: LD_VAR 0 6
74320: PUSH
74321: LD_VAR 0 4
74325: ARRAY
74326: PUSH
74327: LD_INT 1
74329: ARRAY
74330: PPUSH
74331: LD_VAR 0 6
74335: PUSH
74336: LD_VAR 0 4
74340: ARRAY
74341: PUSH
74342: LD_INT 2
74344: ARRAY
74345: PPUSH
74346: CALL_OW 428
74350: PUSH
74351: LD_INT 0
74353: NONEQUAL
74354: OR
74355: IFFALSE 74377
// tmp := Delete ( tmp , i ) ;
74357: LD_ADDR_VAR 0 6
74361: PUSH
74362: LD_VAR 0 6
74366: PPUSH
74367: LD_VAR 0 4
74371: PPUSH
74372: CALL_OW 3
74376: ST_TO_ADDR
74377: GO 74277
74379: POP
74380: POP
// j := GetClosestHex ( unit , tmp ) ;
74381: LD_ADDR_VAR 0 5
74385: PUSH
74386: LD_VAR 0 1
74390: PPUSH
74391: LD_VAR 0 6
74395: PPUSH
74396: CALL 73683 0 2
74400: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74401: LD_VAR 0 1
74405: PPUSH
74406: LD_VAR 0 5
74410: PUSH
74411: LD_INT 1
74413: ARRAY
74414: PPUSH
74415: LD_VAR 0 5
74419: PUSH
74420: LD_INT 2
74422: ARRAY
74423: PPUSH
74424: CALL_OW 111
// end ;
74428: LD_VAR 0 3
74432: RET
// export function PrepareApemanSoldier ( ) ; begin
74433: LD_INT 0
74435: PPUSH
// uc_nation := 0 ;
74436: LD_ADDR_OWVAR 21
74440: PUSH
74441: LD_INT 0
74443: ST_TO_ADDR
// hc_sex := sex_male ;
74444: LD_ADDR_OWVAR 27
74448: PUSH
74449: LD_INT 1
74451: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74452: LD_ADDR_OWVAR 28
74456: PUSH
74457: LD_INT 15
74459: ST_TO_ADDR
// hc_gallery :=  ;
74460: LD_ADDR_OWVAR 33
74464: PUSH
74465: LD_STRING 
74467: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74468: LD_ADDR_OWVAR 31
74472: PUSH
74473: LD_INT 0
74475: PPUSH
74476: LD_INT 3
74478: PPUSH
74479: CALL_OW 12
74483: PUSH
74484: LD_INT 0
74486: PPUSH
74487: LD_INT 3
74489: PPUSH
74490: CALL_OW 12
74494: PUSH
74495: LD_INT 0
74497: PUSH
74498: LD_INT 0
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: LIST
74505: LIST
74506: ST_TO_ADDR
// end ;
74507: LD_VAR 0 1
74511: RET
// export function PrepareApemanEngineer ( ) ; begin
74512: LD_INT 0
74514: PPUSH
// uc_nation := 0 ;
74515: LD_ADDR_OWVAR 21
74519: PUSH
74520: LD_INT 0
74522: ST_TO_ADDR
// hc_sex := sex_male ;
74523: LD_ADDR_OWVAR 27
74527: PUSH
74528: LD_INT 1
74530: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74531: LD_ADDR_OWVAR 28
74535: PUSH
74536: LD_INT 16
74538: ST_TO_ADDR
// hc_gallery :=  ;
74539: LD_ADDR_OWVAR 33
74543: PUSH
74544: LD_STRING 
74546: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74547: LD_ADDR_OWVAR 31
74551: PUSH
74552: LD_INT 0
74554: PPUSH
74555: LD_INT 3
74557: PPUSH
74558: CALL_OW 12
74562: PUSH
74563: LD_INT 0
74565: PPUSH
74566: LD_INT 3
74568: PPUSH
74569: CALL_OW 12
74573: PUSH
74574: LD_INT 0
74576: PUSH
74577: LD_INT 0
74579: PUSH
74580: EMPTY
74581: LIST
74582: LIST
74583: LIST
74584: LIST
74585: ST_TO_ADDR
// end ;
74586: LD_VAR 0 1
74590: RET
// export function PrepareApeman ( agressivity ) ; begin
74591: LD_INT 0
74593: PPUSH
// uc_side := 0 ;
74594: LD_ADDR_OWVAR 20
74598: PUSH
74599: LD_INT 0
74601: ST_TO_ADDR
// uc_nation := 0 ;
74602: LD_ADDR_OWVAR 21
74606: PUSH
74607: LD_INT 0
74609: ST_TO_ADDR
// hc_sex := sex_male ;
74610: LD_ADDR_OWVAR 27
74614: PUSH
74615: LD_INT 1
74617: ST_TO_ADDR
// hc_class := class_apeman ;
74618: LD_ADDR_OWVAR 28
74622: PUSH
74623: LD_INT 12
74625: ST_TO_ADDR
// hc_gallery :=  ;
74626: LD_ADDR_OWVAR 33
74630: PUSH
74631: LD_STRING 
74633: ST_TO_ADDR
// if agressivity = 0 then
74634: LD_VAR 0 1
74638: PUSH
74639: LD_INT 0
74641: EQUAL
74642: IFFALSE 74654
// hc_agressivity := 0 else
74644: LD_ADDR_OWVAR 35
74648: PUSH
74649: LD_INT 0
74651: ST_TO_ADDR
74652: GO 74675
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74654: LD_ADDR_OWVAR 35
74658: PUSH
74659: LD_VAR 0 1
74663: NEG
74664: PPUSH
74665: LD_VAR 0 1
74669: PPUSH
74670: CALL_OW 12
74674: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74675: LD_ADDR_OWVAR 31
74679: PUSH
74680: LD_INT 0
74682: PPUSH
74683: LD_INT 3
74685: PPUSH
74686: CALL_OW 12
74690: PUSH
74691: LD_INT 0
74693: PPUSH
74694: LD_INT 3
74696: PPUSH
74697: CALL_OW 12
74701: PUSH
74702: LD_INT 0
74704: PUSH
74705: LD_INT 0
74707: PUSH
74708: EMPTY
74709: LIST
74710: LIST
74711: LIST
74712: LIST
74713: ST_TO_ADDR
// end ;
74714: LD_VAR 0 2
74718: RET
// export function PrepareTiger ( agressivity ) ; begin
74719: LD_INT 0
74721: PPUSH
// uc_side := 0 ;
74722: LD_ADDR_OWVAR 20
74726: PUSH
74727: LD_INT 0
74729: ST_TO_ADDR
// uc_nation := 0 ;
74730: LD_ADDR_OWVAR 21
74734: PUSH
74735: LD_INT 0
74737: ST_TO_ADDR
// hc_class := class_tiger ;
74738: LD_ADDR_OWVAR 28
74742: PUSH
74743: LD_INT 14
74745: ST_TO_ADDR
// hc_gallery :=  ;
74746: LD_ADDR_OWVAR 33
74750: PUSH
74751: LD_STRING 
74753: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74754: LD_ADDR_OWVAR 35
74758: PUSH
74759: LD_VAR 0 1
74763: NEG
74764: PPUSH
74765: LD_VAR 0 1
74769: PPUSH
74770: CALL_OW 12
74774: ST_TO_ADDR
// end ;
74775: LD_VAR 0 2
74779: RET
// export function PrepareEnchidna ( ) ; begin
74780: LD_INT 0
74782: PPUSH
// uc_side := 0 ;
74783: LD_ADDR_OWVAR 20
74787: PUSH
74788: LD_INT 0
74790: ST_TO_ADDR
// uc_nation := 0 ;
74791: LD_ADDR_OWVAR 21
74795: PUSH
74796: LD_INT 0
74798: ST_TO_ADDR
// hc_class := class_baggie ;
74799: LD_ADDR_OWVAR 28
74803: PUSH
74804: LD_INT 13
74806: ST_TO_ADDR
// hc_gallery :=  ;
74807: LD_ADDR_OWVAR 33
74811: PUSH
74812: LD_STRING 
74814: ST_TO_ADDR
// end ;
74815: LD_VAR 0 1
74819: RET
// export function PrepareFrog ( ) ; begin
74820: LD_INT 0
74822: PPUSH
// uc_side := 0 ;
74823: LD_ADDR_OWVAR 20
74827: PUSH
74828: LD_INT 0
74830: ST_TO_ADDR
// uc_nation := 0 ;
74831: LD_ADDR_OWVAR 21
74835: PUSH
74836: LD_INT 0
74838: ST_TO_ADDR
// hc_class := class_frog ;
74839: LD_ADDR_OWVAR 28
74843: PUSH
74844: LD_INT 19
74846: ST_TO_ADDR
// hc_gallery :=  ;
74847: LD_ADDR_OWVAR 33
74851: PUSH
74852: LD_STRING 
74854: ST_TO_ADDR
// end ;
74855: LD_VAR 0 1
74859: RET
// export function PrepareFish ( ) ; begin
74860: LD_INT 0
74862: PPUSH
// uc_side := 0 ;
74863: LD_ADDR_OWVAR 20
74867: PUSH
74868: LD_INT 0
74870: ST_TO_ADDR
// uc_nation := 0 ;
74871: LD_ADDR_OWVAR 21
74875: PUSH
74876: LD_INT 0
74878: ST_TO_ADDR
// hc_class := class_fish ;
74879: LD_ADDR_OWVAR 28
74883: PUSH
74884: LD_INT 20
74886: ST_TO_ADDR
// hc_gallery :=  ;
74887: LD_ADDR_OWVAR 33
74891: PUSH
74892: LD_STRING 
74894: ST_TO_ADDR
// end ;
74895: LD_VAR 0 1
74899: RET
// export function PrepareBird ( ) ; begin
74900: LD_INT 0
74902: PPUSH
// uc_side := 0 ;
74903: LD_ADDR_OWVAR 20
74907: PUSH
74908: LD_INT 0
74910: ST_TO_ADDR
// uc_nation := 0 ;
74911: LD_ADDR_OWVAR 21
74915: PUSH
74916: LD_INT 0
74918: ST_TO_ADDR
// hc_class := class_phororhacos ;
74919: LD_ADDR_OWVAR 28
74923: PUSH
74924: LD_INT 18
74926: ST_TO_ADDR
// hc_gallery :=  ;
74927: LD_ADDR_OWVAR 33
74931: PUSH
74932: LD_STRING 
74934: ST_TO_ADDR
// end ;
74935: LD_VAR 0 1
74939: RET
// export function PrepareHorse ( ) ; begin
74940: LD_INT 0
74942: PPUSH
// uc_side := 0 ;
74943: LD_ADDR_OWVAR 20
74947: PUSH
74948: LD_INT 0
74950: ST_TO_ADDR
// uc_nation := 0 ;
74951: LD_ADDR_OWVAR 21
74955: PUSH
74956: LD_INT 0
74958: ST_TO_ADDR
// hc_class := class_horse ;
74959: LD_ADDR_OWVAR 28
74963: PUSH
74964: LD_INT 21
74966: ST_TO_ADDR
// hc_gallery :=  ;
74967: LD_ADDR_OWVAR 33
74971: PUSH
74972: LD_STRING 
74974: ST_TO_ADDR
// end ;
74975: LD_VAR 0 1
74979: RET
// export function PrepareMastodont ( ) ; begin
74980: LD_INT 0
74982: PPUSH
// uc_side := 0 ;
74983: LD_ADDR_OWVAR 20
74987: PUSH
74988: LD_INT 0
74990: ST_TO_ADDR
// uc_nation := 0 ;
74991: LD_ADDR_OWVAR 21
74995: PUSH
74996: LD_INT 0
74998: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74999: LD_ADDR_OWVAR 37
75003: PUSH
75004: LD_INT 31
75006: ST_TO_ADDR
// vc_control := control_rider ;
75007: LD_ADDR_OWVAR 38
75011: PUSH
75012: LD_INT 4
75014: ST_TO_ADDR
// end ;
75015: LD_VAR 0 1
75019: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75020: LD_INT 0
75022: PPUSH
75023: PPUSH
75024: PPUSH
// uc_side = 0 ;
75025: LD_ADDR_OWVAR 20
75029: PUSH
75030: LD_INT 0
75032: ST_TO_ADDR
// uc_nation = 0 ;
75033: LD_ADDR_OWVAR 21
75037: PUSH
75038: LD_INT 0
75040: ST_TO_ADDR
// InitHc_All ( ) ;
75041: CALL_OW 584
// InitVc ;
75045: CALL_OW 20
// if mastodonts then
75049: LD_VAR 0 6
75053: IFFALSE 75120
// for i = 1 to mastodonts do
75055: LD_ADDR_VAR 0 11
75059: PUSH
75060: DOUBLE
75061: LD_INT 1
75063: DEC
75064: ST_TO_ADDR
75065: LD_VAR 0 6
75069: PUSH
75070: FOR_TO
75071: IFFALSE 75118
// begin vc_chassis := 31 ;
75073: LD_ADDR_OWVAR 37
75077: PUSH
75078: LD_INT 31
75080: ST_TO_ADDR
// vc_control := control_rider ;
75081: LD_ADDR_OWVAR 38
75085: PUSH
75086: LD_INT 4
75088: ST_TO_ADDR
// animal := CreateVehicle ;
75089: LD_ADDR_VAR 0 12
75093: PUSH
75094: CALL_OW 45
75098: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75099: LD_VAR 0 12
75103: PPUSH
75104: LD_VAR 0 8
75108: PPUSH
75109: LD_INT 0
75111: PPUSH
75112: CALL 77248 0 3
// end ;
75116: GO 75070
75118: POP
75119: POP
// if horses then
75120: LD_VAR 0 5
75124: IFFALSE 75191
// for i = 1 to horses do
75126: LD_ADDR_VAR 0 11
75130: PUSH
75131: DOUBLE
75132: LD_INT 1
75134: DEC
75135: ST_TO_ADDR
75136: LD_VAR 0 5
75140: PUSH
75141: FOR_TO
75142: IFFALSE 75189
// begin hc_class := 21 ;
75144: LD_ADDR_OWVAR 28
75148: PUSH
75149: LD_INT 21
75151: ST_TO_ADDR
// hc_gallery :=  ;
75152: LD_ADDR_OWVAR 33
75156: PUSH
75157: LD_STRING 
75159: ST_TO_ADDR
// animal := CreateHuman ;
75160: LD_ADDR_VAR 0 12
75164: PUSH
75165: CALL_OW 44
75169: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75170: LD_VAR 0 12
75174: PPUSH
75175: LD_VAR 0 8
75179: PPUSH
75180: LD_INT 0
75182: PPUSH
75183: CALL 77248 0 3
// end ;
75187: GO 75141
75189: POP
75190: POP
// if birds then
75191: LD_VAR 0 1
75195: IFFALSE 75262
// for i = 1 to birds do
75197: LD_ADDR_VAR 0 11
75201: PUSH
75202: DOUBLE
75203: LD_INT 1
75205: DEC
75206: ST_TO_ADDR
75207: LD_VAR 0 1
75211: PUSH
75212: FOR_TO
75213: IFFALSE 75260
// begin hc_class := 18 ;
75215: LD_ADDR_OWVAR 28
75219: PUSH
75220: LD_INT 18
75222: ST_TO_ADDR
// hc_gallery =  ;
75223: LD_ADDR_OWVAR 33
75227: PUSH
75228: LD_STRING 
75230: ST_TO_ADDR
// animal := CreateHuman ;
75231: LD_ADDR_VAR 0 12
75235: PUSH
75236: CALL_OW 44
75240: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75241: LD_VAR 0 12
75245: PPUSH
75246: LD_VAR 0 8
75250: PPUSH
75251: LD_INT 0
75253: PPUSH
75254: CALL 77248 0 3
// end ;
75258: GO 75212
75260: POP
75261: POP
// if tigers then
75262: LD_VAR 0 2
75266: IFFALSE 75350
// for i = 1 to tigers do
75268: LD_ADDR_VAR 0 11
75272: PUSH
75273: DOUBLE
75274: LD_INT 1
75276: DEC
75277: ST_TO_ADDR
75278: LD_VAR 0 2
75282: PUSH
75283: FOR_TO
75284: IFFALSE 75348
// begin hc_class = class_tiger ;
75286: LD_ADDR_OWVAR 28
75290: PUSH
75291: LD_INT 14
75293: ST_TO_ADDR
// hc_gallery =  ;
75294: LD_ADDR_OWVAR 33
75298: PUSH
75299: LD_STRING 
75301: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75302: LD_ADDR_OWVAR 35
75306: PUSH
75307: LD_INT 7
75309: NEG
75310: PPUSH
75311: LD_INT 7
75313: PPUSH
75314: CALL_OW 12
75318: ST_TO_ADDR
// animal := CreateHuman ;
75319: LD_ADDR_VAR 0 12
75323: PUSH
75324: CALL_OW 44
75328: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75329: LD_VAR 0 12
75333: PPUSH
75334: LD_VAR 0 8
75338: PPUSH
75339: LD_INT 0
75341: PPUSH
75342: CALL 77248 0 3
// end ;
75346: GO 75283
75348: POP
75349: POP
// if apemans then
75350: LD_VAR 0 3
75354: IFFALSE 75477
// for i = 1 to apemans do
75356: LD_ADDR_VAR 0 11
75360: PUSH
75361: DOUBLE
75362: LD_INT 1
75364: DEC
75365: ST_TO_ADDR
75366: LD_VAR 0 3
75370: PUSH
75371: FOR_TO
75372: IFFALSE 75475
// begin hc_class = class_apeman ;
75374: LD_ADDR_OWVAR 28
75378: PUSH
75379: LD_INT 12
75381: ST_TO_ADDR
// hc_gallery =  ;
75382: LD_ADDR_OWVAR 33
75386: PUSH
75387: LD_STRING 
75389: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75390: LD_ADDR_OWVAR 35
75394: PUSH
75395: LD_INT 2
75397: NEG
75398: PPUSH
75399: LD_INT 2
75401: PPUSH
75402: CALL_OW 12
75406: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75407: LD_ADDR_OWVAR 31
75411: PUSH
75412: LD_INT 1
75414: PPUSH
75415: LD_INT 3
75417: PPUSH
75418: CALL_OW 12
75422: PUSH
75423: LD_INT 1
75425: PPUSH
75426: LD_INT 3
75428: PPUSH
75429: CALL_OW 12
75433: PUSH
75434: LD_INT 0
75436: PUSH
75437: LD_INT 0
75439: PUSH
75440: EMPTY
75441: LIST
75442: LIST
75443: LIST
75444: LIST
75445: ST_TO_ADDR
// animal := CreateHuman ;
75446: LD_ADDR_VAR 0 12
75450: PUSH
75451: CALL_OW 44
75455: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75456: LD_VAR 0 12
75460: PPUSH
75461: LD_VAR 0 8
75465: PPUSH
75466: LD_INT 0
75468: PPUSH
75469: CALL 77248 0 3
// end ;
75473: GO 75371
75475: POP
75476: POP
// if enchidnas then
75477: LD_VAR 0 4
75481: IFFALSE 75548
// for i = 1 to enchidnas do
75483: LD_ADDR_VAR 0 11
75487: PUSH
75488: DOUBLE
75489: LD_INT 1
75491: DEC
75492: ST_TO_ADDR
75493: LD_VAR 0 4
75497: PUSH
75498: FOR_TO
75499: IFFALSE 75546
// begin hc_class = 13 ;
75501: LD_ADDR_OWVAR 28
75505: PUSH
75506: LD_INT 13
75508: ST_TO_ADDR
// hc_gallery =  ;
75509: LD_ADDR_OWVAR 33
75513: PUSH
75514: LD_STRING 
75516: ST_TO_ADDR
// animal := CreateHuman ;
75517: LD_ADDR_VAR 0 12
75521: PUSH
75522: CALL_OW 44
75526: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75527: LD_VAR 0 12
75531: PPUSH
75532: LD_VAR 0 8
75536: PPUSH
75537: LD_INT 0
75539: PPUSH
75540: CALL 77248 0 3
// end ;
75544: GO 75498
75546: POP
75547: POP
// if fishes then
75548: LD_VAR 0 7
75552: IFFALSE 75619
// for i = 1 to fishes do
75554: LD_ADDR_VAR 0 11
75558: PUSH
75559: DOUBLE
75560: LD_INT 1
75562: DEC
75563: ST_TO_ADDR
75564: LD_VAR 0 7
75568: PUSH
75569: FOR_TO
75570: IFFALSE 75617
// begin hc_class = 20 ;
75572: LD_ADDR_OWVAR 28
75576: PUSH
75577: LD_INT 20
75579: ST_TO_ADDR
// hc_gallery =  ;
75580: LD_ADDR_OWVAR 33
75584: PUSH
75585: LD_STRING 
75587: ST_TO_ADDR
// animal := CreateHuman ;
75588: LD_ADDR_VAR 0 12
75592: PUSH
75593: CALL_OW 44
75597: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75598: LD_VAR 0 12
75602: PPUSH
75603: LD_VAR 0 9
75607: PPUSH
75608: LD_INT 0
75610: PPUSH
75611: CALL 77248 0 3
// end ;
75615: GO 75569
75617: POP
75618: POP
// end ;
75619: LD_VAR 0 10
75623: RET
// export function WantHeal ( sci , unit ) ; begin
75624: LD_INT 0
75626: PPUSH
// if GetTaskList ( sci ) > 0 then
75627: LD_VAR 0 1
75631: PPUSH
75632: CALL_OW 437
75636: PUSH
75637: LD_INT 0
75639: GREATER
75640: IFFALSE 75710
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75642: LD_VAR 0 1
75646: PPUSH
75647: CALL_OW 437
75651: PUSH
75652: LD_INT 1
75654: ARRAY
75655: PUSH
75656: LD_INT 1
75658: ARRAY
75659: PUSH
75660: LD_STRING l
75662: EQUAL
75663: PUSH
75664: LD_VAR 0 1
75668: PPUSH
75669: CALL_OW 437
75673: PUSH
75674: LD_INT 1
75676: ARRAY
75677: PUSH
75678: LD_INT 4
75680: ARRAY
75681: PUSH
75682: LD_VAR 0 2
75686: EQUAL
75687: AND
75688: IFFALSE 75700
// result := true else
75690: LD_ADDR_VAR 0 3
75694: PUSH
75695: LD_INT 1
75697: ST_TO_ADDR
75698: GO 75708
// result := false ;
75700: LD_ADDR_VAR 0 3
75704: PUSH
75705: LD_INT 0
75707: ST_TO_ADDR
// end else
75708: GO 75718
// result := false ;
75710: LD_ADDR_VAR 0 3
75714: PUSH
75715: LD_INT 0
75717: ST_TO_ADDR
// end ;
75718: LD_VAR 0 3
75722: RET
// export function HealTarget ( sci ) ; begin
75723: LD_INT 0
75725: PPUSH
// if not sci then
75726: LD_VAR 0 1
75730: NOT
75731: IFFALSE 75735
// exit ;
75733: GO 75800
// result := 0 ;
75735: LD_ADDR_VAR 0 2
75739: PUSH
75740: LD_INT 0
75742: ST_TO_ADDR
// if GetTaskList ( sci ) then
75743: LD_VAR 0 1
75747: PPUSH
75748: CALL_OW 437
75752: IFFALSE 75800
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75754: LD_VAR 0 1
75758: PPUSH
75759: CALL_OW 437
75763: PUSH
75764: LD_INT 1
75766: ARRAY
75767: PUSH
75768: LD_INT 1
75770: ARRAY
75771: PUSH
75772: LD_STRING l
75774: EQUAL
75775: IFFALSE 75800
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75777: LD_ADDR_VAR 0 2
75781: PUSH
75782: LD_VAR 0 1
75786: PPUSH
75787: CALL_OW 437
75791: PUSH
75792: LD_INT 1
75794: ARRAY
75795: PUSH
75796: LD_INT 4
75798: ARRAY
75799: ST_TO_ADDR
// end ;
75800: LD_VAR 0 2
75804: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75805: LD_INT 0
75807: PPUSH
75808: PPUSH
75809: PPUSH
75810: PPUSH
// if not base_units then
75811: LD_VAR 0 1
75815: NOT
75816: IFFALSE 75820
// exit ;
75818: GO 75907
// result := false ;
75820: LD_ADDR_VAR 0 2
75824: PUSH
75825: LD_INT 0
75827: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75828: LD_ADDR_VAR 0 5
75832: PUSH
75833: LD_VAR 0 1
75837: PPUSH
75838: LD_INT 21
75840: PUSH
75841: LD_INT 3
75843: PUSH
75844: EMPTY
75845: LIST
75846: LIST
75847: PPUSH
75848: CALL_OW 72
75852: ST_TO_ADDR
// if not tmp then
75853: LD_VAR 0 5
75857: NOT
75858: IFFALSE 75862
// exit ;
75860: GO 75907
// for i in tmp do
75862: LD_ADDR_VAR 0 3
75866: PUSH
75867: LD_VAR 0 5
75871: PUSH
75872: FOR_IN
75873: IFFALSE 75905
// begin result := EnemyInRange ( i , 22 ) ;
75875: LD_ADDR_VAR 0 2
75879: PUSH
75880: LD_VAR 0 3
75884: PPUSH
75885: LD_INT 22
75887: PPUSH
75888: CALL 73485 0 2
75892: ST_TO_ADDR
// if result then
75893: LD_VAR 0 2
75897: IFFALSE 75903
// exit ;
75899: POP
75900: POP
75901: GO 75907
// end ;
75903: GO 75872
75905: POP
75906: POP
// end ;
75907: LD_VAR 0 2
75911: RET
// export function FilterByTag ( units , tag ) ; begin
75912: LD_INT 0
75914: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75915: LD_ADDR_VAR 0 3
75919: PUSH
75920: LD_VAR 0 1
75924: PPUSH
75925: LD_INT 120
75927: PUSH
75928: LD_VAR 0 2
75932: PUSH
75933: EMPTY
75934: LIST
75935: LIST
75936: PPUSH
75937: CALL_OW 72
75941: ST_TO_ADDR
// end ;
75942: LD_VAR 0 3
75946: RET
// export function IsDriver ( un ) ; begin
75947: LD_INT 0
75949: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75950: LD_ADDR_VAR 0 2
75954: PUSH
75955: LD_VAR 0 1
75959: PUSH
75960: LD_INT 55
75962: PUSH
75963: EMPTY
75964: LIST
75965: PPUSH
75966: CALL_OW 69
75970: IN
75971: ST_TO_ADDR
// end ;
75972: LD_VAR 0 2
75976: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75977: LD_INT 0
75979: PPUSH
75980: PPUSH
// list := [ ] ;
75981: LD_ADDR_VAR 0 5
75985: PUSH
75986: EMPTY
75987: ST_TO_ADDR
// case d of 0 :
75988: LD_VAR 0 3
75992: PUSH
75993: LD_INT 0
75995: DOUBLE
75996: EQUAL
75997: IFTRUE 76001
75999: GO 76134
76001: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76002: LD_ADDR_VAR 0 5
76006: PUSH
76007: LD_VAR 0 1
76011: PUSH
76012: LD_INT 4
76014: MINUS
76015: PUSH
76016: LD_VAR 0 2
76020: PUSH
76021: LD_INT 4
76023: MINUS
76024: PUSH
76025: LD_INT 2
76027: PUSH
76028: EMPTY
76029: LIST
76030: LIST
76031: LIST
76032: PUSH
76033: LD_VAR 0 1
76037: PUSH
76038: LD_INT 3
76040: MINUS
76041: PUSH
76042: LD_VAR 0 2
76046: PUSH
76047: LD_INT 1
76049: PUSH
76050: EMPTY
76051: LIST
76052: LIST
76053: LIST
76054: PUSH
76055: LD_VAR 0 1
76059: PUSH
76060: LD_INT 4
76062: PLUS
76063: PUSH
76064: LD_VAR 0 2
76068: PUSH
76069: LD_INT 4
76071: PUSH
76072: EMPTY
76073: LIST
76074: LIST
76075: LIST
76076: PUSH
76077: LD_VAR 0 1
76081: PUSH
76082: LD_INT 3
76084: PLUS
76085: PUSH
76086: LD_VAR 0 2
76090: PUSH
76091: LD_INT 3
76093: PLUS
76094: PUSH
76095: LD_INT 5
76097: PUSH
76098: EMPTY
76099: LIST
76100: LIST
76101: LIST
76102: PUSH
76103: LD_VAR 0 1
76107: PUSH
76108: LD_VAR 0 2
76112: PUSH
76113: LD_INT 4
76115: PLUS
76116: PUSH
76117: LD_INT 0
76119: PUSH
76120: EMPTY
76121: LIST
76122: LIST
76123: LIST
76124: PUSH
76125: EMPTY
76126: LIST
76127: LIST
76128: LIST
76129: LIST
76130: LIST
76131: ST_TO_ADDR
// end ; 1 :
76132: GO 76832
76134: LD_INT 1
76136: DOUBLE
76137: EQUAL
76138: IFTRUE 76142
76140: GO 76275
76142: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76143: LD_ADDR_VAR 0 5
76147: PUSH
76148: LD_VAR 0 1
76152: PUSH
76153: LD_VAR 0 2
76157: PUSH
76158: LD_INT 4
76160: MINUS
76161: PUSH
76162: LD_INT 3
76164: PUSH
76165: EMPTY
76166: LIST
76167: LIST
76168: LIST
76169: PUSH
76170: LD_VAR 0 1
76174: PUSH
76175: LD_INT 3
76177: MINUS
76178: PUSH
76179: LD_VAR 0 2
76183: PUSH
76184: LD_INT 3
76186: MINUS
76187: PUSH
76188: LD_INT 2
76190: PUSH
76191: EMPTY
76192: LIST
76193: LIST
76194: LIST
76195: PUSH
76196: LD_VAR 0 1
76200: PUSH
76201: LD_INT 4
76203: MINUS
76204: PUSH
76205: LD_VAR 0 2
76209: PUSH
76210: LD_INT 1
76212: PUSH
76213: EMPTY
76214: LIST
76215: LIST
76216: LIST
76217: PUSH
76218: LD_VAR 0 1
76222: PUSH
76223: LD_VAR 0 2
76227: PUSH
76228: LD_INT 3
76230: PLUS
76231: PUSH
76232: LD_INT 0
76234: PUSH
76235: EMPTY
76236: LIST
76237: LIST
76238: LIST
76239: PUSH
76240: LD_VAR 0 1
76244: PUSH
76245: LD_INT 4
76247: PLUS
76248: PUSH
76249: LD_VAR 0 2
76253: PUSH
76254: LD_INT 4
76256: PLUS
76257: PUSH
76258: LD_INT 5
76260: PUSH
76261: EMPTY
76262: LIST
76263: LIST
76264: LIST
76265: PUSH
76266: EMPTY
76267: LIST
76268: LIST
76269: LIST
76270: LIST
76271: LIST
76272: ST_TO_ADDR
// end ; 2 :
76273: GO 76832
76275: LD_INT 2
76277: DOUBLE
76278: EQUAL
76279: IFTRUE 76283
76281: GO 76412
76283: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76284: LD_ADDR_VAR 0 5
76288: PUSH
76289: LD_VAR 0 1
76293: PUSH
76294: LD_VAR 0 2
76298: PUSH
76299: LD_INT 3
76301: MINUS
76302: PUSH
76303: LD_INT 3
76305: PUSH
76306: EMPTY
76307: LIST
76308: LIST
76309: LIST
76310: PUSH
76311: LD_VAR 0 1
76315: PUSH
76316: LD_INT 4
76318: PLUS
76319: PUSH
76320: LD_VAR 0 2
76324: PUSH
76325: LD_INT 4
76327: PUSH
76328: EMPTY
76329: LIST
76330: LIST
76331: LIST
76332: PUSH
76333: LD_VAR 0 1
76337: PUSH
76338: LD_VAR 0 2
76342: PUSH
76343: LD_INT 4
76345: PLUS
76346: PUSH
76347: LD_INT 0
76349: PUSH
76350: EMPTY
76351: LIST
76352: LIST
76353: LIST
76354: PUSH
76355: LD_VAR 0 1
76359: PUSH
76360: LD_INT 3
76362: MINUS
76363: PUSH
76364: LD_VAR 0 2
76368: PUSH
76369: LD_INT 1
76371: PUSH
76372: EMPTY
76373: LIST
76374: LIST
76375: LIST
76376: PUSH
76377: LD_VAR 0 1
76381: PUSH
76382: LD_INT 4
76384: MINUS
76385: PUSH
76386: LD_VAR 0 2
76390: PUSH
76391: LD_INT 4
76393: MINUS
76394: PUSH
76395: LD_INT 2
76397: PUSH
76398: EMPTY
76399: LIST
76400: LIST
76401: LIST
76402: PUSH
76403: EMPTY
76404: LIST
76405: LIST
76406: LIST
76407: LIST
76408: LIST
76409: ST_TO_ADDR
// end ; 3 :
76410: GO 76832
76412: LD_INT 3
76414: DOUBLE
76415: EQUAL
76416: IFTRUE 76420
76418: GO 76553
76420: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76421: LD_ADDR_VAR 0 5
76425: PUSH
76426: LD_VAR 0 1
76430: PUSH
76431: LD_INT 3
76433: PLUS
76434: PUSH
76435: LD_VAR 0 2
76439: PUSH
76440: LD_INT 4
76442: PUSH
76443: EMPTY
76444: LIST
76445: LIST
76446: LIST
76447: PUSH
76448: LD_VAR 0 1
76452: PUSH
76453: LD_INT 4
76455: PLUS
76456: PUSH
76457: LD_VAR 0 2
76461: PUSH
76462: LD_INT 4
76464: PLUS
76465: PUSH
76466: LD_INT 5
76468: PUSH
76469: EMPTY
76470: LIST
76471: LIST
76472: LIST
76473: PUSH
76474: LD_VAR 0 1
76478: PUSH
76479: LD_INT 4
76481: MINUS
76482: PUSH
76483: LD_VAR 0 2
76487: PUSH
76488: LD_INT 1
76490: PUSH
76491: EMPTY
76492: LIST
76493: LIST
76494: LIST
76495: PUSH
76496: LD_VAR 0 1
76500: PUSH
76501: LD_VAR 0 2
76505: PUSH
76506: LD_INT 4
76508: MINUS
76509: PUSH
76510: LD_INT 3
76512: PUSH
76513: EMPTY
76514: LIST
76515: LIST
76516: LIST
76517: PUSH
76518: LD_VAR 0 1
76522: PUSH
76523: LD_INT 3
76525: MINUS
76526: PUSH
76527: LD_VAR 0 2
76531: PUSH
76532: LD_INT 3
76534: MINUS
76535: PUSH
76536: LD_INT 2
76538: PUSH
76539: EMPTY
76540: LIST
76541: LIST
76542: LIST
76543: PUSH
76544: EMPTY
76545: LIST
76546: LIST
76547: LIST
76548: LIST
76549: LIST
76550: ST_TO_ADDR
// end ; 4 :
76551: GO 76832
76553: LD_INT 4
76555: DOUBLE
76556: EQUAL
76557: IFTRUE 76561
76559: GO 76694
76561: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76562: LD_ADDR_VAR 0 5
76566: PUSH
76567: LD_VAR 0 1
76571: PUSH
76572: LD_VAR 0 2
76576: PUSH
76577: LD_INT 4
76579: PLUS
76580: PUSH
76581: LD_INT 0
76583: PUSH
76584: EMPTY
76585: LIST
76586: LIST
76587: LIST
76588: PUSH
76589: LD_VAR 0 1
76593: PUSH
76594: LD_INT 3
76596: PLUS
76597: PUSH
76598: LD_VAR 0 2
76602: PUSH
76603: LD_INT 3
76605: PLUS
76606: PUSH
76607: LD_INT 5
76609: PUSH
76610: EMPTY
76611: LIST
76612: LIST
76613: LIST
76614: PUSH
76615: LD_VAR 0 1
76619: PUSH
76620: LD_INT 4
76622: PLUS
76623: PUSH
76624: LD_VAR 0 2
76628: PUSH
76629: LD_INT 4
76631: PUSH
76632: EMPTY
76633: LIST
76634: LIST
76635: LIST
76636: PUSH
76637: LD_VAR 0 1
76641: PUSH
76642: LD_VAR 0 2
76646: PUSH
76647: LD_INT 3
76649: MINUS
76650: PUSH
76651: LD_INT 3
76653: PUSH
76654: EMPTY
76655: LIST
76656: LIST
76657: LIST
76658: PUSH
76659: LD_VAR 0 1
76663: PUSH
76664: LD_INT 4
76666: MINUS
76667: PUSH
76668: LD_VAR 0 2
76672: PUSH
76673: LD_INT 4
76675: MINUS
76676: PUSH
76677: LD_INT 2
76679: PUSH
76680: EMPTY
76681: LIST
76682: LIST
76683: LIST
76684: PUSH
76685: EMPTY
76686: LIST
76687: LIST
76688: LIST
76689: LIST
76690: LIST
76691: ST_TO_ADDR
// end ; 5 :
76692: GO 76832
76694: LD_INT 5
76696: DOUBLE
76697: EQUAL
76698: IFTRUE 76702
76700: GO 76831
76702: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76703: LD_ADDR_VAR 0 5
76707: PUSH
76708: LD_VAR 0 1
76712: PUSH
76713: LD_INT 4
76715: MINUS
76716: PUSH
76717: LD_VAR 0 2
76721: PUSH
76722: LD_INT 1
76724: PUSH
76725: EMPTY
76726: LIST
76727: LIST
76728: LIST
76729: PUSH
76730: LD_VAR 0 1
76734: PUSH
76735: LD_VAR 0 2
76739: PUSH
76740: LD_INT 4
76742: MINUS
76743: PUSH
76744: LD_INT 3
76746: PUSH
76747: EMPTY
76748: LIST
76749: LIST
76750: LIST
76751: PUSH
76752: LD_VAR 0 1
76756: PUSH
76757: LD_INT 4
76759: PLUS
76760: PUSH
76761: LD_VAR 0 2
76765: PUSH
76766: LD_INT 4
76768: PLUS
76769: PUSH
76770: LD_INT 5
76772: PUSH
76773: EMPTY
76774: LIST
76775: LIST
76776: LIST
76777: PUSH
76778: LD_VAR 0 1
76782: PUSH
76783: LD_INT 3
76785: PLUS
76786: PUSH
76787: LD_VAR 0 2
76791: PUSH
76792: LD_INT 4
76794: PUSH
76795: EMPTY
76796: LIST
76797: LIST
76798: LIST
76799: PUSH
76800: LD_VAR 0 1
76804: PUSH
76805: LD_VAR 0 2
76809: PUSH
76810: LD_INT 3
76812: PLUS
76813: PUSH
76814: LD_INT 0
76816: PUSH
76817: EMPTY
76818: LIST
76819: LIST
76820: LIST
76821: PUSH
76822: EMPTY
76823: LIST
76824: LIST
76825: LIST
76826: LIST
76827: LIST
76828: ST_TO_ADDR
// end ; end ;
76829: GO 76832
76831: POP
// result := list ;
76832: LD_ADDR_VAR 0 4
76836: PUSH
76837: LD_VAR 0 5
76841: ST_TO_ADDR
// end ;
76842: LD_VAR 0 4
76846: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76847: LD_INT 0
76849: PPUSH
76850: PPUSH
76851: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76852: LD_VAR 0 1
76856: NOT
76857: PUSH
76858: LD_VAR 0 2
76862: PUSH
76863: LD_INT 1
76865: PUSH
76866: LD_INT 2
76868: PUSH
76869: LD_INT 3
76871: PUSH
76872: LD_INT 4
76874: PUSH
76875: EMPTY
76876: LIST
76877: LIST
76878: LIST
76879: LIST
76880: IN
76881: NOT
76882: OR
76883: IFFALSE 76887
// exit ;
76885: GO 76970
// tmp := [ ] ;
76887: LD_ADDR_VAR 0 5
76891: PUSH
76892: EMPTY
76893: ST_TO_ADDR
// for i in units do
76894: LD_ADDR_VAR 0 4
76898: PUSH
76899: LD_VAR 0 1
76903: PUSH
76904: FOR_IN
76905: IFFALSE 76939
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76907: LD_ADDR_VAR 0 5
76911: PUSH
76912: LD_VAR 0 5
76916: PPUSH
76917: LD_VAR 0 4
76921: PPUSH
76922: LD_VAR 0 2
76926: PPUSH
76927: CALL_OW 259
76931: PPUSH
76932: CALL 78343 0 2
76936: ST_TO_ADDR
76937: GO 76904
76939: POP
76940: POP
// if not tmp then
76941: LD_VAR 0 5
76945: NOT
76946: IFFALSE 76950
// exit ;
76948: GO 76970
// result := SortListByListDesc ( units , tmp ) ;
76950: LD_ADDR_VAR 0 3
76954: PUSH
76955: LD_VAR 0 1
76959: PPUSH
76960: LD_VAR 0 5
76964: PPUSH
76965: CALL_OW 77
76969: ST_TO_ADDR
// end ;
76970: LD_VAR 0 3
76974: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76975: LD_INT 0
76977: PPUSH
76978: PPUSH
76979: PPUSH
// result := false ;
76980: LD_ADDR_VAR 0 3
76984: PUSH
76985: LD_INT 0
76987: ST_TO_ADDR
// if not building then
76988: LD_VAR 0 2
76992: NOT
76993: IFFALSE 76997
// exit ;
76995: GO 77135
// x := GetX ( building ) ;
76997: LD_ADDR_VAR 0 4
77001: PUSH
77002: LD_VAR 0 2
77006: PPUSH
77007: CALL_OW 250
77011: ST_TO_ADDR
// y := GetY ( building ) ;
77012: LD_ADDR_VAR 0 5
77016: PUSH
77017: LD_VAR 0 2
77021: PPUSH
77022: CALL_OW 251
77026: ST_TO_ADDR
// if not x or not y then
77027: LD_VAR 0 4
77031: NOT
77032: PUSH
77033: LD_VAR 0 5
77037: NOT
77038: OR
77039: IFFALSE 77043
// exit ;
77041: GO 77135
// if GetTaskList ( unit ) then
77043: LD_VAR 0 1
77047: PPUSH
77048: CALL_OW 437
77052: IFFALSE 77135
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77054: LD_STRING e
77056: PUSH
77057: LD_VAR 0 1
77061: PPUSH
77062: CALL_OW 437
77066: PUSH
77067: LD_INT 1
77069: ARRAY
77070: PUSH
77071: LD_INT 1
77073: ARRAY
77074: EQUAL
77075: PUSH
77076: LD_VAR 0 4
77080: PUSH
77081: LD_VAR 0 1
77085: PPUSH
77086: CALL_OW 437
77090: PUSH
77091: LD_INT 1
77093: ARRAY
77094: PUSH
77095: LD_INT 2
77097: ARRAY
77098: EQUAL
77099: AND
77100: PUSH
77101: LD_VAR 0 5
77105: PUSH
77106: LD_VAR 0 1
77110: PPUSH
77111: CALL_OW 437
77115: PUSH
77116: LD_INT 1
77118: ARRAY
77119: PUSH
77120: LD_INT 3
77122: ARRAY
77123: EQUAL
77124: AND
77125: IFFALSE 77135
// result := true end ;
77127: LD_ADDR_VAR 0 3
77131: PUSH
77132: LD_INT 1
77134: ST_TO_ADDR
// end ;
77135: LD_VAR 0 3
77139: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77140: LD_INT 0
77142: PPUSH
// result := false ;
77143: LD_ADDR_VAR 0 4
77147: PUSH
77148: LD_INT 0
77150: ST_TO_ADDR
// if GetTaskList ( unit ) then
77151: LD_VAR 0 1
77155: PPUSH
77156: CALL_OW 437
77160: IFFALSE 77243
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77162: LD_STRING M
77164: PUSH
77165: LD_VAR 0 1
77169: PPUSH
77170: CALL_OW 437
77174: PUSH
77175: LD_INT 1
77177: ARRAY
77178: PUSH
77179: LD_INT 1
77181: ARRAY
77182: EQUAL
77183: PUSH
77184: LD_VAR 0 2
77188: PUSH
77189: LD_VAR 0 1
77193: PPUSH
77194: CALL_OW 437
77198: PUSH
77199: LD_INT 1
77201: ARRAY
77202: PUSH
77203: LD_INT 2
77205: ARRAY
77206: EQUAL
77207: AND
77208: PUSH
77209: LD_VAR 0 3
77213: PUSH
77214: LD_VAR 0 1
77218: PPUSH
77219: CALL_OW 437
77223: PUSH
77224: LD_INT 1
77226: ARRAY
77227: PUSH
77228: LD_INT 3
77230: ARRAY
77231: EQUAL
77232: AND
77233: IFFALSE 77243
// result := true ;
77235: LD_ADDR_VAR 0 4
77239: PUSH
77240: LD_INT 1
77242: ST_TO_ADDR
// end ; end ;
77243: LD_VAR 0 4
77247: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77248: LD_INT 0
77250: PPUSH
77251: PPUSH
77252: PPUSH
77253: PPUSH
// if not unit or not area then
77254: LD_VAR 0 1
77258: NOT
77259: PUSH
77260: LD_VAR 0 2
77264: NOT
77265: OR
77266: IFFALSE 77270
// exit ;
77268: GO 77446
// tmp := AreaToList ( area , i ) ;
77270: LD_ADDR_VAR 0 6
77274: PUSH
77275: LD_VAR 0 2
77279: PPUSH
77280: LD_VAR 0 5
77284: PPUSH
77285: CALL_OW 517
77289: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77290: LD_ADDR_VAR 0 5
77294: PUSH
77295: DOUBLE
77296: LD_INT 1
77298: DEC
77299: ST_TO_ADDR
77300: LD_VAR 0 6
77304: PUSH
77305: LD_INT 1
77307: ARRAY
77308: PUSH
77309: FOR_TO
77310: IFFALSE 77444
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77312: LD_ADDR_VAR 0 7
77316: PUSH
77317: LD_VAR 0 6
77321: PUSH
77322: LD_INT 1
77324: ARRAY
77325: PUSH
77326: LD_VAR 0 5
77330: ARRAY
77331: PUSH
77332: LD_VAR 0 6
77336: PUSH
77337: LD_INT 2
77339: ARRAY
77340: PUSH
77341: LD_VAR 0 5
77345: ARRAY
77346: PUSH
77347: EMPTY
77348: LIST
77349: LIST
77350: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77351: LD_INT 92
77353: PUSH
77354: LD_VAR 0 7
77358: PUSH
77359: LD_INT 1
77361: ARRAY
77362: PUSH
77363: LD_VAR 0 7
77367: PUSH
77368: LD_INT 2
77370: ARRAY
77371: PUSH
77372: LD_INT 2
77374: PUSH
77375: EMPTY
77376: LIST
77377: LIST
77378: LIST
77379: LIST
77380: PPUSH
77381: CALL_OW 69
77385: PUSH
77386: LD_INT 0
77388: EQUAL
77389: IFFALSE 77442
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77391: LD_VAR 0 1
77395: PPUSH
77396: LD_VAR 0 7
77400: PUSH
77401: LD_INT 1
77403: ARRAY
77404: PPUSH
77405: LD_VAR 0 7
77409: PUSH
77410: LD_INT 2
77412: ARRAY
77413: PPUSH
77414: LD_VAR 0 3
77418: PPUSH
77419: CALL_OW 48
// result := IsPlaced ( unit ) ;
77423: LD_ADDR_VAR 0 4
77427: PUSH
77428: LD_VAR 0 1
77432: PPUSH
77433: CALL_OW 305
77437: ST_TO_ADDR
// exit ;
77438: POP
77439: POP
77440: GO 77446
// end ; end ;
77442: GO 77309
77444: POP
77445: POP
// end ;
77446: LD_VAR 0 4
77450: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77451: LD_INT 0
77453: PPUSH
77454: PPUSH
77455: PPUSH
// if not side or side > 8 then
77456: LD_VAR 0 1
77460: NOT
77461: PUSH
77462: LD_VAR 0 1
77466: PUSH
77467: LD_INT 8
77469: GREATER
77470: OR
77471: IFFALSE 77475
// exit ;
77473: GO 77662
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77475: LD_ADDR_VAR 0 4
77479: PUSH
77480: LD_INT 22
77482: PUSH
77483: LD_VAR 0 1
77487: PUSH
77488: EMPTY
77489: LIST
77490: LIST
77491: PUSH
77492: LD_INT 21
77494: PUSH
77495: LD_INT 3
77497: PUSH
77498: EMPTY
77499: LIST
77500: LIST
77501: PUSH
77502: EMPTY
77503: LIST
77504: LIST
77505: PPUSH
77506: CALL_OW 69
77510: ST_TO_ADDR
// if not tmp then
77511: LD_VAR 0 4
77515: NOT
77516: IFFALSE 77520
// exit ;
77518: GO 77662
// enable_addtolog := true ;
77520: LD_ADDR_OWVAR 81
77524: PUSH
77525: LD_INT 1
77527: ST_TO_ADDR
// AddToLog ( [ ) ;
77528: LD_STRING [
77530: PPUSH
77531: CALL_OW 561
// for i in tmp do
77535: LD_ADDR_VAR 0 3
77539: PUSH
77540: LD_VAR 0 4
77544: PUSH
77545: FOR_IN
77546: IFFALSE 77653
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77548: LD_STRING [
77550: PUSH
77551: LD_VAR 0 3
77555: PPUSH
77556: CALL_OW 266
77560: STR
77561: PUSH
77562: LD_STRING , 
77564: STR
77565: PUSH
77566: LD_VAR 0 3
77570: PPUSH
77571: CALL_OW 250
77575: STR
77576: PUSH
77577: LD_STRING , 
77579: STR
77580: PUSH
77581: LD_VAR 0 3
77585: PPUSH
77586: CALL_OW 251
77590: STR
77591: PUSH
77592: LD_STRING , 
77594: STR
77595: PUSH
77596: LD_VAR 0 3
77600: PPUSH
77601: CALL_OW 254
77605: STR
77606: PUSH
77607: LD_STRING , 
77609: STR
77610: PUSH
77611: LD_VAR 0 3
77615: PPUSH
77616: LD_INT 1
77618: PPUSH
77619: CALL_OW 268
77623: STR
77624: PUSH
77625: LD_STRING , 
77627: STR
77628: PUSH
77629: LD_VAR 0 3
77633: PPUSH
77634: LD_INT 2
77636: PPUSH
77637: CALL_OW 268
77641: STR
77642: PUSH
77643: LD_STRING ],
77645: STR
77646: PPUSH
77647: CALL_OW 561
// end ;
77651: GO 77545
77653: POP
77654: POP
// AddToLog ( ]; ) ;
77655: LD_STRING ];
77657: PPUSH
77658: CALL_OW 561
// end ;
77662: LD_VAR 0 2
77666: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77667: LD_INT 0
77669: PPUSH
77670: PPUSH
77671: PPUSH
77672: PPUSH
77673: PPUSH
// if not area or not rate or not max then
77674: LD_VAR 0 1
77678: NOT
77679: PUSH
77680: LD_VAR 0 2
77684: NOT
77685: OR
77686: PUSH
77687: LD_VAR 0 4
77691: NOT
77692: OR
77693: IFFALSE 77697
// exit ;
77695: GO 77886
// while 1 do
77697: LD_INT 1
77699: IFFALSE 77886
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77701: LD_ADDR_VAR 0 9
77705: PUSH
77706: LD_VAR 0 1
77710: PPUSH
77711: LD_INT 1
77713: PPUSH
77714: CALL_OW 287
77718: PUSH
77719: LD_INT 10
77721: MUL
77722: ST_TO_ADDR
// r := rate / 10 ;
77723: LD_ADDR_VAR 0 7
77727: PUSH
77728: LD_VAR 0 2
77732: PUSH
77733: LD_INT 10
77735: DIVREAL
77736: ST_TO_ADDR
// time := 1 1$00 ;
77737: LD_ADDR_VAR 0 8
77741: PUSH
77742: LD_INT 2100
77744: ST_TO_ADDR
// if amount < min then
77745: LD_VAR 0 9
77749: PUSH
77750: LD_VAR 0 3
77754: LESS
77755: IFFALSE 77773
// r := r * 2 else
77757: LD_ADDR_VAR 0 7
77761: PUSH
77762: LD_VAR 0 7
77766: PUSH
77767: LD_INT 2
77769: MUL
77770: ST_TO_ADDR
77771: GO 77799
// if amount > max then
77773: LD_VAR 0 9
77777: PUSH
77778: LD_VAR 0 4
77782: GREATER
77783: IFFALSE 77799
// r := r / 2 ;
77785: LD_ADDR_VAR 0 7
77789: PUSH
77790: LD_VAR 0 7
77794: PUSH
77795: LD_INT 2
77797: DIVREAL
77798: ST_TO_ADDR
// time := time / r ;
77799: LD_ADDR_VAR 0 8
77803: PUSH
77804: LD_VAR 0 8
77808: PUSH
77809: LD_VAR 0 7
77813: DIVREAL
77814: ST_TO_ADDR
// if time < 0 then
77815: LD_VAR 0 8
77819: PUSH
77820: LD_INT 0
77822: LESS
77823: IFFALSE 77840
// time := time * - 1 ;
77825: LD_ADDR_VAR 0 8
77829: PUSH
77830: LD_VAR 0 8
77834: PUSH
77835: LD_INT 1
77837: NEG
77838: MUL
77839: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77840: LD_VAR 0 8
77844: PUSH
77845: LD_INT 35
77847: PPUSH
77848: LD_INT 875
77850: PPUSH
77851: CALL_OW 12
77855: PLUS
77856: PPUSH
77857: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77861: LD_INT 1
77863: PPUSH
77864: LD_INT 5
77866: PPUSH
77867: CALL_OW 12
77871: PPUSH
77872: LD_VAR 0 1
77876: PPUSH
77877: LD_INT 1
77879: PPUSH
77880: CALL_OW 55
// end ;
77884: GO 77697
// end ;
77886: LD_VAR 0 5
77890: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77891: LD_INT 0
77893: PPUSH
77894: PPUSH
77895: PPUSH
77896: PPUSH
77897: PPUSH
77898: PPUSH
77899: PPUSH
77900: PPUSH
// if not turrets or not factories then
77901: LD_VAR 0 1
77905: NOT
77906: PUSH
77907: LD_VAR 0 2
77911: NOT
77912: OR
77913: IFFALSE 77917
// exit ;
77915: GO 78224
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77917: LD_ADDR_VAR 0 10
77921: PUSH
77922: LD_INT 5
77924: PUSH
77925: LD_INT 6
77927: PUSH
77928: EMPTY
77929: LIST
77930: LIST
77931: PUSH
77932: LD_INT 2
77934: PUSH
77935: LD_INT 4
77937: PUSH
77938: EMPTY
77939: LIST
77940: LIST
77941: PUSH
77942: LD_INT 3
77944: PUSH
77945: LD_INT 5
77947: PUSH
77948: EMPTY
77949: LIST
77950: LIST
77951: PUSH
77952: EMPTY
77953: LIST
77954: LIST
77955: LIST
77956: PUSH
77957: LD_INT 24
77959: PUSH
77960: LD_INT 25
77962: PUSH
77963: EMPTY
77964: LIST
77965: LIST
77966: PUSH
77967: LD_INT 23
77969: PUSH
77970: LD_INT 27
77972: PUSH
77973: EMPTY
77974: LIST
77975: LIST
77976: PUSH
77977: EMPTY
77978: LIST
77979: LIST
77980: PUSH
77981: LD_INT 42
77983: PUSH
77984: LD_INT 43
77986: PUSH
77987: EMPTY
77988: LIST
77989: LIST
77990: PUSH
77991: LD_INT 44
77993: PUSH
77994: LD_INT 46
77996: PUSH
77997: EMPTY
77998: LIST
77999: LIST
78000: PUSH
78001: LD_INT 45
78003: PUSH
78004: LD_INT 47
78006: PUSH
78007: EMPTY
78008: LIST
78009: LIST
78010: PUSH
78011: EMPTY
78012: LIST
78013: LIST
78014: LIST
78015: PUSH
78016: EMPTY
78017: LIST
78018: LIST
78019: LIST
78020: ST_TO_ADDR
// result := [ ] ;
78021: LD_ADDR_VAR 0 3
78025: PUSH
78026: EMPTY
78027: ST_TO_ADDR
// for i in turrets do
78028: LD_ADDR_VAR 0 4
78032: PUSH
78033: LD_VAR 0 1
78037: PUSH
78038: FOR_IN
78039: IFFALSE 78222
// begin nat := GetNation ( i ) ;
78041: LD_ADDR_VAR 0 7
78045: PUSH
78046: LD_VAR 0 4
78050: PPUSH
78051: CALL_OW 248
78055: ST_TO_ADDR
// weapon := 0 ;
78056: LD_ADDR_VAR 0 8
78060: PUSH
78061: LD_INT 0
78063: ST_TO_ADDR
// if not nat then
78064: LD_VAR 0 7
78068: NOT
78069: IFFALSE 78073
// continue ;
78071: GO 78038
// for j in list [ nat ] do
78073: LD_ADDR_VAR 0 5
78077: PUSH
78078: LD_VAR 0 10
78082: PUSH
78083: LD_VAR 0 7
78087: ARRAY
78088: PUSH
78089: FOR_IN
78090: IFFALSE 78131
// if GetBWeapon ( i ) = j [ 1 ] then
78092: LD_VAR 0 4
78096: PPUSH
78097: CALL_OW 269
78101: PUSH
78102: LD_VAR 0 5
78106: PUSH
78107: LD_INT 1
78109: ARRAY
78110: EQUAL
78111: IFFALSE 78129
// begin weapon := j [ 2 ] ;
78113: LD_ADDR_VAR 0 8
78117: PUSH
78118: LD_VAR 0 5
78122: PUSH
78123: LD_INT 2
78125: ARRAY
78126: ST_TO_ADDR
// break ;
78127: GO 78131
// end ;
78129: GO 78089
78131: POP
78132: POP
// if not weapon then
78133: LD_VAR 0 8
78137: NOT
78138: IFFALSE 78142
// continue ;
78140: GO 78038
// for k in factories do
78142: LD_ADDR_VAR 0 6
78146: PUSH
78147: LD_VAR 0 2
78151: PUSH
78152: FOR_IN
78153: IFFALSE 78218
// begin weapons := AvailableWeaponList ( k ) ;
78155: LD_ADDR_VAR 0 9
78159: PUSH
78160: LD_VAR 0 6
78164: PPUSH
78165: CALL_OW 478
78169: ST_TO_ADDR
// if not weapons then
78170: LD_VAR 0 9
78174: NOT
78175: IFFALSE 78179
// continue ;
78177: GO 78152
// if weapon in weapons then
78179: LD_VAR 0 8
78183: PUSH
78184: LD_VAR 0 9
78188: IN
78189: IFFALSE 78216
// begin result := [ i , weapon ] ;
78191: LD_ADDR_VAR 0 3
78195: PUSH
78196: LD_VAR 0 4
78200: PUSH
78201: LD_VAR 0 8
78205: PUSH
78206: EMPTY
78207: LIST
78208: LIST
78209: ST_TO_ADDR
// exit ;
78210: POP
78211: POP
78212: POP
78213: POP
78214: GO 78224
// end ; end ;
78216: GO 78152
78218: POP
78219: POP
// end ;
78220: GO 78038
78222: POP
78223: POP
// end ;
78224: LD_VAR 0 3
78228: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78229: LD_INT 0
78231: PPUSH
// if not side or side > 8 then
78232: LD_VAR 0 3
78236: NOT
78237: PUSH
78238: LD_VAR 0 3
78242: PUSH
78243: LD_INT 8
78245: GREATER
78246: OR
78247: IFFALSE 78251
// exit ;
78249: GO 78310
// if not range then
78251: LD_VAR 0 4
78255: NOT
78256: IFFALSE 78267
// range := - 12 ;
78258: LD_ADDR_VAR 0 4
78262: PUSH
78263: LD_INT 12
78265: NEG
78266: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78267: LD_VAR 0 1
78271: PPUSH
78272: LD_VAR 0 2
78276: PPUSH
78277: LD_VAR 0 3
78281: PPUSH
78282: LD_VAR 0 4
78286: PPUSH
78287: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78291: LD_VAR 0 1
78295: PPUSH
78296: LD_VAR 0 2
78300: PPUSH
78301: LD_VAR 0 3
78305: PPUSH
78306: CALL_OW 331
// end ;
78310: LD_VAR 0 5
78314: RET
// export function Video ( mode ) ; begin
78315: LD_INT 0
78317: PPUSH
// ingame_video = mode ;
78318: LD_ADDR_OWVAR 52
78322: PUSH
78323: LD_VAR 0 1
78327: ST_TO_ADDR
// interface_hidden = mode ;
78328: LD_ADDR_OWVAR 54
78332: PUSH
78333: LD_VAR 0 1
78337: ST_TO_ADDR
// end ;
78338: LD_VAR 0 2
78342: RET
// export function Join ( array , element ) ; begin
78343: LD_INT 0
78345: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78346: LD_ADDR_VAR 0 3
78350: PUSH
78351: LD_VAR 0 1
78355: PPUSH
78356: LD_VAR 0 1
78360: PUSH
78361: LD_INT 1
78363: PLUS
78364: PPUSH
78365: LD_VAR 0 2
78369: PPUSH
78370: CALL_OW 1
78374: ST_TO_ADDR
// end ;
78375: LD_VAR 0 3
78379: RET
// export function JoinUnion ( array , element ) ; begin
78380: LD_INT 0
78382: PPUSH
// result := array union element ;
78383: LD_ADDR_VAR 0 3
78387: PUSH
78388: LD_VAR 0 1
78392: PUSH
78393: LD_VAR 0 2
78397: UNION
78398: ST_TO_ADDR
// end ;
78399: LD_VAR 0 3
78403: RET
// export function GetBehemoths ( side ) ; begin
78404: LD_INT 0
78406: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78407: LD_ADDR_VAR 0 2
78411: PUSH
78412: LD_INT 22
78414: PUSH
78415: LD_VAR 0 1
78419: PUSH
78420: EMPTY
78421: LIST
78422: LIST
78423: PUSH
78424: LD_INT 31
78426: PUSH
78427: LD_INT 25
78429: PUSH
78430: EMPTY
78431: LIST
78432: LIST
78433: PUSH
78434: EMPTY
78435: LIST
78436: LIST
78437: PPUSH
78438: CALL_OW 69
78442: ST_TO_ADDR
// end ;
78443: LD_VAR 0 2
78447: RET
// export function Shuffle ( array ) ; var i , index ; begin
78448: LD_INT 0
78450: PPUSH
78451: PPUSH
78452: PPUSH
// result := [ ] ;
78453: LD_ADDR_VAR 0 2
78457: PUSH
78458: EMPTY
78459: ST_TO_ADDR
// if not array then
78460: LD_VAR 0 1
78464: NOT
78465: IFFALSE 78469
// exit ;
78467: GO 78568
// Randomize ;
78469: CALL_OW 10
// for i = array downto 1 do
78473: LD_ADDR_VAR 0 3
78477: PUSH
78478: DOUBLE
78479: LD_VAR 0 1
78483: INC
78484: ST_TO_ADDR
78485: LD_INT 1
78487: PUSH
78488: FOR_DOWNTO
78489: IFFALSE 78566
// begin index := rand ( 1 , array ) ;
78491: LD_ADDR_VAR 0 4
78495: PUSH
78496: LD_INT 1
78498: PPUSH
78499: LD_VAR 0 1
78503: PPUSH
78504: CALL_OW 12
78508: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78509: LD_ADDR_VAR 0 2
78513: PUSH
78514: LD_VAR 0 2
78518: PPUSH
78519: LD_VAR 0 2
78523: PUSH
78524: LD_INT 1
78526: PLUS
78527: PPUSH
78528: LD_VAR 0 1
78532: PUSH
78533: LD_VAR 0 4
78537: ARRAY
78538: PPUSH
78539: CALL_OW 2
78543: ST_TO_ADDR
// array := Delete ( array , index ) ;
78544: LD_ADDR_VAR 0 1
78548: PUSH
78549: LD_VAR 0 1
78553: PPUSH
78554: LD_VAR 0 4
78558: PPUSH
78559: CALL_OW 3
78563: ST_TO_ADDR
// end ;
78564: GO 78488
78566: POP
78567: POP
// end ;
78568: LD_VAR 0 2
78572: RET
// export function GetBaseMaterials ( base ) ; begin
78573: LD_INT 0
78575: PPUSH
// result := [ 0 , 0 , 0 ] ;
78576: LD_ADDR_VAR 0 2
78580: PUSH
78581: LD_INT 0
78583: PUSH
78584: LD_INT 0
78586: PUSH
78587: LD_INT 0
78589: PUSH
78590: EMPTY
78591: LIST
78592: LIST
78593: LIST
78594: ST_TO_ADDR
// if not base then
78595: LD_VAR 0 1
78599: NOT
78600: IFFALSE 78604
// exit ;
78602: GO 78653
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78604: LD_ADDR_VAR 0 2
78608: PUSH
78609: LD_VAR 0 1
78613: PPUSH
78614: LD_INT 1
78616: PPUSH
78617: CALL_OW 275
78621: PUSH
78622: LD_VAR 0 1
78626: PPUSH
78627: LD_INT 2
78629: PPUSH
78630: CALL_OW 275
78634: PUSH
78635: LD_VAR 0 1
78639: PPUSH
78640: LD_INT 3
78642: PPUSH
78643: CALL_OW 275
78647: PUSH
78648: EMPTY
78649: LIST
78650: LIST
78651: LIST
78652: ST_TO_ADDR
// end ;
78653: LD_VAR 0 2
78657: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78658: LD_INT 0
78660: PPUSH
78661: PPUSH
// result := array ;
78662: LD_ADDR_VAR 0 3
78666: PUSH
78667: LD_VAR 0 1
78671: ST_TO_ADDR
// if size >= result then
78672: LD_VAR 0 2
78676: PUSH
78677: LD_VAR 0 3
78681: GREATEREQUAL
78682: IFFALSE 78686
// exit ;
78684: GO 78736
// if size then
78686: LD_VAR 0 2
78690: IFFALSE 78736
// for i := array downto size do
78692: LD_ADDR_VAR 0 4
78696: PUSH
78697: DOUBLE
78698: LD_VAR 0 1
78702: INC
78703: ST_TO_ADDR
78704: LD_VAR 0 2
78708: PUSH
78709: FOR_DOWNTO
78710: IFFALSE 78734
// result := Delete ( result , result ) ;
78712: LD_ADDR_VAR 0 3
78716: PUSH
78717: LD_VAR 0 3
78721: PPUSH
78722: LD_VAR 0 3
78726: PPUSH
78727: CALL_OW 3
78731: ST_TO_ADDR
78732: GO 78709
78734: POP
78735: POP
// end ;
78736: LD_VAR 0 3
78740: RET
// export function ComExit ( unit ) ; var tmp ; begin
78741: LD_INT 0
78743: PPUSH
78744: PPUSH
// if not IsInUnit ( unit ) then
78745: LD_VAR 0 1
78749: PPUSH
78750: CALL_OW 310
78754: NOT
78755: IFFALSE 78759
// exit ;
78757: GO 78819
// tmp := IsInUnit ( unit ) ;
78759: LD_ADDR_VAR 0 3
78763: PUSH
78764: LD_VAR 0 1
78768: PPUSH
78769: CALL_OW 310
78773: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78774: LD_VAR 0 3
78778: PPUSH
78779: CALL_OW 247
78783: PUSH
78784: LD_INT 2
78786: EQUAL
78787: IFFALSE 78800
// ComExitVehicle ( unit ) else
78789: LD_VAR 0 1
78793: PPUSH
78794: CALL_OW 121
78798: GO 78809
// ComExitBuilding ( unit ) ;
78800: LD_VAR 0 1
78804: PPUSH
78805: CALL_OW 122
// result := tmp ;
78809: LD_ADDR_VAR 0 2
78813: PUSH
78814: LD_VAR 0 3
78818: ST_TO_ADDR
// end ;
78819: LD_VAR 0 2
78823: RET
// export function ComExitAll ( units ) ; var i ; begin
78824: LD_INT 0
78826: PPUSH
78827: PPUSH
// if not units then
78828: LD_VAR 0 1
78832: NOT
78833: IFFALSE 78837
// exit ;
78835: GO 78863
// for i in units do
78837: LD_ADDR_VAR 0 3
78841: PUSH
78842: LD_VAR 0 1
78846: PUSH
78847: FOR_IN
78848: IFFALSE 78861
// ComExit ( i ) ;
78850: LD_VAR 0 3
78854: PPUSH
78855: CALL 78741 0 1
78859: GO 78847
78861: POP
78862: POP
// end ;
78863: LD_VAR 0 2
78867: RET
// export function ResetHc ; begin
78868: LD_INT 0
78870: PPUSH
// InitHc ;
78871: CALL_OW 19
// hc_importance := 0 ;
78875: LD_ADDR_OWVAR 32
78879: PUSH
78880: LD_INT 0
78882: ST_TO_ADDR
// end ;
78883: LD_VAR 0 1
78887: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78888: LD_INT 0
78890: PPUSH
78891: PPUSH
78892: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78893: LD_ADDR_VAR 0 6
78897: PUSH
78898: LD_VAR 0 1
78902: PUSH
78903: LD_VAR 0 3
78907: PLUS
78908: PUSH
78909: LD_INT 2
78911: DIV
78912: ST_TO_ADDR
// if _x < 0 then
78913: LD_VAR 0 6
78917: PUSH
78918: LD_INT 0
78920: LESS
78921: IFFALSE 78938
// _x := _x * - 1 ;
78923: LD_ADDR_VAR 0 6
78927: PUSH
78928: LD_VAR 0 6
78932: PUSH
78933: LD_INT 1
78935: NEG
78936: MUL
78937: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78938: LD_ADDR_VAR 0 7
78942: PUSH
78943: LD_VAR 0 2
78947: PUSH
78948: LD_VAR 0 4
78952: PLUS
78953: PUSH
78954: LD_INT 2
78956: DIV
78957: ST_TO_ADDR
// if _y < 0 then
78958: LD_VAR 0 7
78962: PUSH
78963: LD_INT 0
78965: LESS
78966: IFFALSE 78983
// _y := _y * - 1 ;
78968: LD_ADDR_VAR 0 7
78972: PUSH
78973: LD_VAR 0 7
78977: PUSH
78978: LD_INT 1
78980: NEG
78981: MUL
78982: ST_TO_ADDR
// result := [ _x , _y ] ;
78983: LD_ADDR_VAR 0 5
78987: PUSH
78988: LD_VAR 0 6
78992: PUSH
78993: LD_VAR 0 7
78997: PUSH
78998: EMPTY
78999: LIST
79000: LIST
79001: ST_TO_ADDR
// end ;
79002: LD_VAR 0 5
79006: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79007: LD_INT 0
79009: PPUSH
79010: PPUSH
79011: PPUSH
79012: PPUSH
// task := GetTaskList ( unit ) ;
79013: LD_ADDR_VAR 0 7
79017: PUSH
79018: LD_VAR 0 1
79022: PPUSH
79023: CALL_OW 437
79027: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79028: LD_VAR 0 7
79032: NOT
79033: PUSH
79034: LD_VAR 0 1
79038: PPUSH
79039: LD_VAR 0 2
79043: PPUSH
79044: CALL_OW 308
79048: NOT
79049: AND
79050: IFFALSE 79054
// exit ;
79052: GO 79172
// if IsInArea ( unit , area ) then
79054: LD_VAR 0 1
79058: PPUSH
79059: LD_VAR 0 2
79063: PPUSH
79064: CALL_OW 308
79068: IFFALSE 79086
// begin ComMoveToArea ( unit , goAway ) ;
79070: LD_VAR 0 1
79074: PPUSH
79075: LD_VAR 0 3
79079: PPUSH
79080: CALL_OW 113
// exit ;
79084: GO 79172
// end ; if task [ 1 ] [ 1 ] <> M then
79086: LD_VAR 0 7
79090: PUSH
79091: LD_INT 1
79093: ARRAY
79094: PUSH
79095: LD_INT 1
79097: ARRAY
79098: PUSH
79099: LD_STRING M
79101: NONEQUAL
79102: IFFALSE 79106
// exit ;
79104: GO 79172
// x := task [ 1 ] [ 2 ] ;
79106: LD_ADDR_VAR 0 5
79110: PUSH
79111: LD_VAR 0 7
79115: PUSH
79116: LD_INT 1
79118: ARRAY
79119: PUSH
79120: LD_INT 2
79122: ARRAY
79123: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79124: LD_ADDR_VAR 0 6
79128: PUSH
79129: LD_VAR 0 7
79133: PUSH
79134: LD_INT 1
79136: ARRAY
79137: PUSH
79138: LD_INT 3
79140: ARRAY
79141: ST_TO_ADDR
// if InArea ( x , y , area ) then
79142: LD_VAR 0 5
79146: PPUSH
79147: LD_VAR 0 6
79151: PPUSH
79152: LD_VAR 0 2
79156: PPUSH
79157: CALL_OW 309
79161: IFFALSE 79172
// ComStop ( unit ) ;
79163: LD_VAR 0 1
79167: PPUSH
79168: CALL_OW 141
// end ;
79172: LD_VAR 0 4
79176: RET
// export function Abs ( value ) ; begin
79177: LD_INT 0
79179: PPUSH
// result := value ;
79180: LD_ADDR_VAR 0 2
79184: PUSH
79185: LD_VAR 0 1
79189: ST_TO_ADDR
// if value < 0 then
79190: LD_VAR 0 1
79194: PUSH
79195: LD_INT 0
79197: LESS
79198: IFFALSE 79215
// result := value * - 1 ;
79200: LD_ADDR_VAR 0 2
79204: PUSH
79205: LD_VAR 0 1
79209: PUSH
79210: LD_INT 1
79212: NEG
79213: MUL
79214: ST_TO_ADDR
// end ;
79215: LD_VAR 0 2
79219: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79220: LD_INT 0
79222: PPUSH
79223: PPUSH
79224: PPUSH
79225: PPUSH
79226: PPUSH
79227: PPUSH
79228: PPUSH
79229: PPUSH
// if not unit or not building then
79230: LD_VAR 0 1
79234: NOT
79235: PUSH
79236: LD_VAR 0 2
79240: NOT
79241: OR
79242: IFFALSE 79246
// exit ;
79244: GO 79472
// x := GetX ( building ) ;
79246: LD_ADDR_VAR 0 4
79250: PUSH
79251: LD_VAR 0 2
79255: PPUSH
79256: CALL_OW 250
79260: ST_TO_ADDR
// y := GetY ( building ) ;
79261: LD_ADDR_VAR 0 6
79265: PUSH
79266: LD_VAR 0 2
79270: PPUSH
79271: CALL_OW 251
79275: ST_TO_ADDR
// d := GetDir ( building ) ;
79276: LD_ADDR_VAR 0 8
79280: PUSH
79281: LD_VAR 0 2
79285: PPUSH
79286: CALL_OW 254
79290: ST_TO_ADDR
// r := 4 ;
79291: LD_ADDR_VAR 0 9
79295: PUSH
79296: LD_INT 4
79298: ST_TO_ADDR
// for i := 1 to 5 do
79299: LD_ADDR_VAR 0 10
79303: PUSH
79304: DOUBLE
79305: LD_INT 1
79307: DEC
79308: ST_TO_ADDR
79309: LD_INT 5
79311: PUSH
79312: FOR_TO
79313: IFFALSE 79470
// begin _x := ShiftX ( x , d , r + i ) ;
79315: LD_ADDR_VAR 0 5
79319: PUSH
79320: LD_VAR 0 4
79324: PPUSH
79325: LD_VAR 0 8
79329: PPUSH
79330: LD_VAR 0 9
79334: PUSH
79335: LD_VAR 0 10
79339: PLUS
79340: PPUSH
79341: CALL_OW 272
79345: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79346: LD_ADDR_VAR 0 7
79350: PUSH
79351: LD_VAR 0 6
79355: PPUSH
79356: LD_VAR 0 8
79360: PPUSH
79361: LD_VAR 0 9
79365: PUSH
79366: LD_VAR 0 10
79370: PLUS
79371: PPUSH
79372: CALL_OW 273
79376: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79377: LD_VAR 0 5
79381: PPUSH
79382: LD_VAR 0 7
79386: PPUSH
79387: CALL_OW 488
79391: PUSH
79392: LD_VAR 0 5
79396: PPUSH
79397: LD_VAR 0 7
79401: PPUSH
79402: CALL_OW 428
79406: PPUSH
79407: CALL_OW 247
79411: PUSH
79412: LD_INT 3
79414: PUSH
79415: LD_INT 2
79417: PUSH
79418: EMPTY
79419: LIST
79420: LIST
79421: IN
79422: NOT
79423: AND
79424: IFFALSE 79468
// begin ComMoveXY ( unit , _x , _y ) ;
79426: LD_VAR 0 1
79430: PPUSH
79431: LD_VAR 0 5
79435: PPUSH
79436: LD_VAR 0 7
79440: PPUSH
79441: CALL_OW 111
// result := [ _x , _y ] ;
79445: LD_ADDR_VAR 0 3
79449: PUSH
79450: LD_VAR 0 5
79454: PUSH
79455: LD_VAR 0 7
79459: PUSH
79460: EMPTY
79461: LIST
79462: LIST
79463: ST_TO_ADDR
// exit ;
79464: POP
79465: POP
79466: GO 79472
// end ; end ;
79468: GO 79312
79470: POP
79471: POP
// end ;
79472: LD_VAR 0 3
79476: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79477: LD_INT 0
79479: PPUSH
79480: PPUSH
79481: PPUSH
// result := 0 ;
79482: LD_ADDR_VAR 0 3
79486: PUSH
79487: LD_INT 0
79489: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79490: LD_VAR 0 1
79494: PUSH
79495: LD_INT 0
79497: LESS
79498: PUSH
79499: LD_VAR 0 1
79503: PUSH
79504: LD_INT 8
79506: GREATER
79507: OR
79508: PUSH
79509: LD_VAR 0 2
79513: PUSH
79514: LD_INT 0
79516: LESS
79517: OR
79518: PUSH
79519: LD_VAR 0 2
79523: PUSH
79524: LD_INT 8
79526: GREATER
79527: OR
79528: IFFALSE 79532
// exit ;
79530: GO 79607
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79532: LD_ADDR_VAR 0 4
79536: PUSH
79537: LD_INT 22
79539: PUSH
79540: LD_VAR 0 2
79544: PUSH
79545: EMPTY
79546: LIST
79547: LIST
79548: PPUSH
79549: CALL_OW 69
79553: PUSH
79554: FOR_IN
79555: IFFALSE 79605
// begin un := UnitShoot ( i ) ;
79557: LD_ADDR_VAR 0 5
79561: PUSH
79562: LD_VAR 0 4
79566: PPUSH
79567: CALL_OW 504
79571: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79572: LD_VAR 0 5
79576: PPUSH
79577: CALL_OW 255
79581: PUSH
79582: LD_VAR 0 1
79586: EQUAL
79587: IFFALSE 79603
// begin result := un ;
79589: LD_ADDR_VAR 0 3
79593: PUSH
79594: LD_VAR 0 5
79598: ST_TO_ADDR
// exit ;
79599: POP
79600: POP
79601: GO 79607
// end ; end ;
79603: GO 79554
79605: POP
79606: POP
// end ;
79607: LD_VAR 0 3
79611: RET
// export function GetCargoBay ( units ) ; begin
79612: LD_INT 0
79614: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79615: LD_ADDR_VAR 0 2
79619: PUSH
79620: LD_VAR 0 1
79624: PPUSH
79625: LD_INT 2
79627: PUSH
79628: LD_INT 34
79630: PUSH
79631: LD_INT 12
79633: PUSH
79634: EMPTY
79635: LIST
79636: LIST
79637: PUSH
79638: LD_INT 34
79640: PUSH
79641: LD_INT 51
79643: PUSH
79644: EMPTY
79645: LIST
79646: LIST
79647: PUSH
79648: LD_INT 34
79650: PUSH
79651: LD_INT 32
79653: PUSH
79654: EMPTY
79655: LIST
79656: LIST
79657: PUSH
79658: LD_INT 34
79660: PUSH
79661: LD_INT 89
79663: PUSH
79664: EMPTY
79665: LIST
79666: LIST
79667: PUSH
79668: EMPTY
79669: LIST
79670: LIST
79671: LIST
79672: LIST
79673: LIST
79674: PPUSH
79675: CALL_OW 72
79679: ST_TO_ADDR
// end ;
79680: LD_VAR 0 2
79684: RET
// export function Negate ( value ) ; begin
79685: LD_INT 0
79687: PPUSH
// result := not value ;
79688: LD_ADDR_VAR 0 2
79692: PUSH
79693: LD_VAR 0 1
79697: NOT
79698: ST_TO_ADDR
// end ;
79699: LD_VAR 0 2
79703: RET
// export function Inc ( value ) ; begin
79704: LD_INT 0
79706: PPUSH
// result := value + 1 ;
79707: LD_ADDR_VAR 0 2
79711: PUSH
79712: LD_VAR 0 1
79716: PUSH
79717: LD_INT 1
79719: PLUS
79720: ST_TO_ADDR
// end ;
79721: LD_VAR 0 2
79725: RET
// export function Dec ( value ) ; begin
79726: LD_INT 0
79728: PPUSH
// result := value - 1 ;
79729: LD_ADDR_VAR 0 2
79733: PUSH
79734: LD_VAR 0 1
79738: PUSH
79739: LD_INT 1
79741: MINUS
79742: ST_TO_ADDR
// end ;
79743: LD_VAR 0 2
79747: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79748: LD_INT 0
79750: PPUSH
79751: PPUSH
79752: PPUSH
79753: PPUSH
79754: PPUSH
79755: PPUSH
79756: PPUSH
79757: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79758: LD_VAR 0 1
79762: PPUSH
79763: LD_VAR 0 2
79767: PPUSH
79768: CALL_OW 488
79772: NOT
79773: PUSH
79774: LD_VAR 0 3
79778: PPUSH
79779: LD_VAR 0 4
79783: PPUSH
79784: CALL_OW 488
79788: NOT
79789: OR
79790: IFFALSE 79803
// begin result := - 1 ;
79792: LD_ADDR_VAR 0 5
79796: PUSH
79797: LD_INT 1
79799: NEG
79800: ST_TO_ADDR
// exit ;
79801: GO 80038
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79803: LD_ADDR_VAR 0 12
79807: PUSH
79808: LD_VAR 0 1
79812: PPUSH
79813: LD_VAR 0 2
79817: PPUSH
79818: LD_VAR 0 3
79822: PPUSH
79823: LD_VAR 0 4
79827: PPUSH
79828: CALL 78888 0 4
79832: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79833: LD_ADDR_VAR 0 11
79837: PUSH
79838: LD_VAR 0 1
79842: PPUSH
79843: LD_VAR 0 2
79847: PPUSH
79848: LD_VAR 0 12
79852: PUSH
79853: LD_INT 1
79855: ARRAY
79856: PPUSH
79857: LD_VAR 0 12
79861: PUSH
79862: LD_INT 2
79864: ARRAY
79865: PPUSH
79866: CALL_OW 298
79870: ST_TO_ADDR
// distance := 9999 ;
79871: LD_ADDR_VAR 0 10
79875: PUSH
79876: LD_INT 9999
79878: ST_TO_ADDR
// for i := 0 to 5 do
79879: LD_ADDR_VAR 0 6
79883: PUSH
79884: DOUBLE
79885: LD_INT 0
79887: DEC
79888: ST_TO_ADDR
79889: LD_INT 5
79891: PUSH
79892: FOR_TO
79893: IFFALSE 80036
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79895: LD_ADDR_VAR 0 7
79899: PUSH
79900: LD_VAR 0 1
79904: PPUSH
79905: LD_VAR 0 6
79909: PPUSH
79910: LD_VAR 0 11
79914: PPUSH
79915: CALL_OW 272
79919: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79920: LD_ADDR_VAR 0 8
79924: PUSH
79925: LD_VAR 0 2
79929: PPUSH
79930: LD_VAR 0 6
79934: PPUSH
79935: LD_VAR 0 11
79939: PPUSH
79940: CALL_OW 273
79944: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79945: LD_VAR 0 7
79949: PPUSH
79950: LD_VAR 0 8
79954: PPUSH
79955: CALL_OW 488
79959: NOT
79960: IFFALSE 79964
// continue ;
79962: GO 79892
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79964: LD_ADDR_VAR 0 9
79968: PUSH
79969: LD_VAR 0 12
79973: PUSH
79974: LD_INT 1
79976: ARRAY
79977: PPUSH
79978: LD_VAR 0 12
79982: PUSH
79983: LD_INT 2
79985: ARRAY
79986: PPUSH
79987: LD_VAR 0 7
79991: PPUSH
79992: LD_VAR 0 8
79996: PPUSH
79997: CALL_OW 298
80001: ST_TO_ADDR
// if tmp < distance then
80002: LD_VAR 0 9
80006: PUSH
80007: LD_VAR 0 10
80011: LESS
80012: IFFALSE 80034
// begin result := i ;
80014: LD_ADDR_VAR 0 5
80018: PUSH
80019: LD_VAR 0 6
80023: ST_TO_ADDR
// distance := tmp ;
80024: LD_ADDR_VAR 0 10
80028: PUSH
80029: LD_VAR 0 9
80033: ST_TO_ADDR
// end ; end ;
80034: GO 79892
80036: POP
80037: POP
// end ;
80038: LD_VAR 0 5
80042: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80043: LD_INT 0
80045: PPUSH
80046: PPUSH
// if not driver or not IsInUnit ( driver ) then
80047: LD_VAR 0 1
80051: NOT
80052: PUSH
80053: LD_VAR 0 1
80057: PPUSH
80058: CALL_OW 310
80062: NOT
80063: OR
80064: IFFALSE 80068
// exit ;
80066: GO 80158
// vehicle := IsInUnit ( driver ) ;
80068: LD_ADDR_VAR 0 3
80072: PUSH
80073: LD_VAR 0 1
80077: PPUSH
80078: CALL_OW 310
80082: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80083: LD_VAR 0 1
80087: PPUSH
80088: LD_STRING \
80090: PUSH
80091: LD_INT 0
80093: PUSH
80094: LD_INT 0
80096: PUSH
80097: LD_INT 0
80099: PUSH
80100: LD_INT 0
80102: PUSH
80103: LD_INT 0
80105: PUSH
80106: LD_INT 0
80108: PUSH
80109: EMPTY
80110: LIST
80111: LIST
80112: LIST
80113: LIST
80114: LIST
80115: LIST
80116: LIST
80117: PUSH
80118: LD_STRING E
80120: PUSH
80121: LD_INT 0
80123: PUSH
80124: LD_INT 0
80126: PUSH
80127: LD_VAR 0 3
80131: PUSH
80132: LD_INT 0
80134: PUSH
80135: LD_INT 0
80137: PUSH
80138: LD_INT 0
80140: PUSH
80141: EMPTY
80142: LIST
80143: LIST
80144: LIST
80145: LIST
80146: LIST
80147: LIST
80148: LIST
80149: PUSH
80150: EMPTY
80151: LIST
80152: LIST
80153: PPUSH
80154: CALL_OW 446
// end ;
80158: LD_VAR 0 2
80162: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80163: LD_INT 0
80165: PPUSH
80166: PPUSH
// if not driver or not IsInUnit ( driver ) then
80167: LD_VAR 0 1
80171: NOT
80172: PUSH
80173: LD_VAR 0 1
80177: PPUSH
80178: CALL_OW 310
80182: NOT
80183: OR
80184: IFFALSE 80188
// exit ;
80186: GO 80278
// vehicle := IsInUnit ( driver ) ;
80188: LD_ADDR_VAR 0 3
80192: PUSH
80193: LD_VAR 0 1
80197: PPUSH
80198: CALL_OW 310
80202: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80203: LD_VAR 0 1
80207: PPUSH
80208: LD_STRING \
80210: PUSH
80211: LD_INT 0
80213: PUSH
80214: LD_INT 0
80216: PUSH
80217: LD_INT 0
80219: PUSH
80220: LD_INT 0
80222: PUSH
80223: LD_INT 0
80225: PUSH
80226: LD_INT 0
80228: PUSH
80229: EMPTY
80230: LIST
80231: LIST
80232: LIST
80233: LIST
80234: LIST
80235: LIST
80236: LIST
80237: PUSH
80238: LD_STRING E
80240: PUSH
80241: LD_INT 0
80243: PUSH
80244: LD_INT 0
80246: PUSH
80247: LD_VAR 0 3
80251: PUSH
80252: LD_INT 0
80254: PUSH
80255: LD_INT 0
80257: PUSH
80258: LD_INT 0
80260: PUSH
80261: EMPTY
80262: LIST
80263: LIST
80264: LIST
80265: LIST
80266: LIST
80267: LIST
80268: LIST
80269: PUSH
80270: EMPTY
80271: LIST
80272: LIST
80273: PPUSH
80274: CALL_OW 447
// end ;
80278: LD_VAR 0 2
80282: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80283: LD_INT 0
80285: PPUSH
80286: PPUSH
80287: PPUSH
// tmp := [ ] ;
80288: LD_ADDR_VAR 0 5
80292: PUSH
80293: EMPTY
80294: ST_TO_ADDR
// for i in units do
80295: LD_ADDR_VAR 0 4
80299: PUSH
80300: LD_VAR 0 1
80304: PUSH
80305: FOR_IN
80306: IFFALSE 80344
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80308: LD_ADDR_VAR 0 5
80312: PUSH
80313: LD_VAR 0 5
80317: PPUSH
80318: LD_VAR 0 5
80322: PUSH
80323: LD_INT 1
80325: PLUS
80326: PPUSH
80327: LD_VAR 0 4
80331: PPUSH
80332: CALL_OW 256
80336: PPUSH
80337: CALL_OW 2
80341: ST_TO_ADDR
80342: GO 80305
80344: POP
80345: POP
// if not tmp then
80346: LD_VAR 0 5
80350: NOT
80351: IFFALSE 80355
// exit ;
80353: GO 80403
// if asc then
80355: LD_VAR 0 2
80359: IFFALSE 80383
// result := SortListByListAsc ( units , tmp ) else
80361: LD_ADDR_VAR 0 3
80365: PUSH
80366: LD_VAR 0 1
80370: PPUSH
80371: LD_VAR 0 5
80375: PPUSH
80376: CALL_OW 76
80380: ST_TO_ADDR
80381: GO 80403
// result := SortListByListDesc ( units , tmp ) ;
80383: LD_ADDR_VAR 0 3
80387: PUSH
80388: LD_VAR 0 1
80392: PPUSH
80393: LD_VAR 0 5
80397: PPUSH
80398: CALL_OW 77
80402: ST_TO_ADDR
// end ;
80403: LD_VAR 0 3
80407: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80408: LD_INT 0
80410: PPUSH
80411: PPUSH
// task := GetTaskList ( mech ) ;
80412: LD_ADDR_VAR 0 4
80416: PUSH
80417: LD_VAR 0 1
80421: PPUSH
80422: CALL_OW 437
80426: ST_TO_ADDR
// if not task then
80427: LD_VAR 0 4
80431: NOT
80432: IFFALSE 80436
// exit ;
80434: GO 80478
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80436: LD_ADDR_VAR 0 3
80440: PUSH
80441: LD_VAR 0 4
80445: PUSH
80446: LD_INT 1
80448: ARRAY
80449: PUSH
80450: LD_INT 1
80452: ARRAY
80453: PUSH
80454: LD_STRING r
80456: EQUAL
80457: PUSH
80458: LD_VAR 0 4
80462: PUSH
80463: LD_INT 1
80465: ARRAY
80466: PUSH
80467: LD_INT 4
80469: ARRAY
80470: PUSH
80471: LD_VAR 0 2
80475: EQUAL
80476: AND
80477: ST_TO_ADDR
// end ;
80478: LD_VAR 0 3
80482: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80483: LD_INT 0
80485: PPUSH
// SetDir ( unit , d ) ;
80486: LD_VAR 0 1
80490: PPUSH
80491: LD_VAR 0 4
80495: PPUSH
80496: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
80500: LD_ADDR_VAR 0 6
80504: PUSH
80505: LD_VAR 0 1
80509: PPUSH
80510: LD_VAR 0 2
80514: PPUSH
80515: LD_VAR 0 3
80519: PPUSH
80520: LD_VAR 0 5
80524: PPUSH
80525: CALL_OW 48
80529: ST_TO_ADDR
// end ;
80530: LD_VAR 0 6
80534: RET
// export function ToNaturalNumber ( number ) ; begin
80535: LD_INT 0
80537: PPUSH
// result := number div 1 ;
80538: LD_ADDR_VAR 0 2
80542: PUSH
80543: LD_VAR 0 1
80547: PUSH
80548: LD_INT 1
80550: DIV
80551: ST_TO_ADDR
// if number < 0 then
80552: LD_VAR 0 1
80556: PUSH
80557: LD_INT 0
80559: LESS
80560: IFFALSE 80570
// result := 0 ;
80562: LD_ADDR_VAR 0 2
80566: PUSH
80567: LD_INT 0
80569: ST_TO_ADDR
// end ;
80570: LD_VAR 0 2
80574: RET
// export function SortByClass ( units , class ) ; var un ; begin
80575: LD_INT 0
80577: PPUSH
80578: PPUSH
// if not units or not class then
80579: LD_VAR 0 1
80583: NOT
80584: PUSH
80585: LD_VAR 0 2
80589: NOT
80590: OR
80591: IFFALSE 80595
// exit ;
80593: GO 80690
// result := [ ] ;
80595: LD_ADDR_VAR 0 3
80599: PUSH
80600: EMPTY
80601: ST_TO_ADDR
// for un in units do
80602: LD_ADDR_VAR 0 4
80606: PUSH
80607: LD_VAR 0 1
80611: PUSH
80612: FOR_IN
80613: IFFALSE 80688
// if GetClass ( un ) = class then
80615: LD_VAR 0 4
80619: PPUSH
80620: CALL_OW 257
80624: PUSH
80625: LD_VAR 0 2
80629: EQUAL
80630: IFFALSE 80657
// result := Insert ( result , 1 , un ) else
80632: LD_ADDR_VAR 0 3
80636: PUSH
80637: LD_VAR 0 3
80641: PPUSH
80642: LD_INT 1
80644: PPUSH
80645: LD_VAR 0 4
80649: PPUSH
80650: CALL_OW 2
80654: ST_TO_ADDR
80655: GO 80686
// result := Replace ( result , result + 1 , un ) ;
80657: LD_ADDR_VAR 0 3
80661: PUSH
80662: LD_VAR 0 3
80666: PPUSH
80667: LD_VAR 0 3
80671: PUSH
80672: LD_INT 1
80674: PLUS
80675: PPUSH
80676: LD_VAR 0 4
80680: PPUSH
80681: CALL_OW 1
80685: ST_TO_ADDR
80686: GO 80612
80688: POP
80689: POP
// end ;
80690: LD_VAR 0 3
80694: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80695: LD_INT 0
80697: PPUSH
80698: PPUSH
80699: PPUSH
80700: PPUSH
80701: PPUSH
80702: PPUSH
80703: PPUSH
// result := [ ] ;
80704: LD_ADDR_VAR 0 4
80708: PUSH
80709: EMPTY
80710: ST_TO_ADDR
// if x - r < 0 then
80711: LD_VAR 0 1
80715: PUSH
80716: LD_VAR 0 3
80720: MINUS
80721: PUSH
80722: LD_INT 0
80724: LESS
80725: IFFALSE 80737
// min_x := 0 else
80727: LD_ADDR_VAR 0 8
80731: PUSH
80732: LD_INT 0
80734: ST_TO_ADDR
80735: GO 80753
// min_x := x - r ;
80737: LD_ADDR_VAR 0 8
80741: PUSH
80742: LD_VAR 0 1
80746: PUSH
80747: LD_VAR 0 3
80751: MINUS
80752: ST_TO_ADDR
// if y - r < 0 then
80753: LD_VAR 0 2
80757: PUSH
80758: LD_VAR 0 3
80762: MINUS
80763: PUSH
80764: LD_INT 0
80766: LESS
80767: IFFALSE 80779
// min_y := 0 else
80769: LD_ADDR_VAR 0 7
80773: PUSH
80774: LD_INT 0
80776: ST_TO_ADDR
80777: GO 80795
// min_y := y - r ;
80779: LD_ADDR_VAR 0 7
80783: PUSH
80784: LD_VAR 0 2
80788: PUSH
80789: LD_VAR 0 3
80793: MINUS
80794: ST_TO_ADDR
// max_x := x + r ;
80795: LD_ADDR_VAR 0 9
80799: PUSH
80800: LD_VAR 0 1
80804: PUSH
80805: LD_VAR 0 3
80809: PLUS
80810: ST_TO_ADDR
// max_y := y + r ;
80811: LD_ADDR_VAR 0 10
80815: PUSH
80816: LD_VAR 0 2
80820: PUSH
80821: LD_VAR 0 3
80825: PLUS
80826: ST_TO_ADDR
// for _x = min_x to max_x do
80827: LD_ADDR_VAR 0 5
80831: PUSH
80832: DOUBLE
80833: LD_VAR 0 8
80837: DEC
80838: ST_TO_ADDR
80839: LD_VAR 0 9
80843: PUSH
80844: FOR_TO
80845: IFFALSE 80946
// for _y = min_y to max_y do
80847: LD_ADDR_VAR 0 6
80851: PUSH
80852: DOUBLE
80853: LD_VAR 0 7
80857: DEC
80858: ST_TO_ADDR
80859: LD_VAR 0 10
80863: PUSH
80864: FOR_TO
80865: IFFALSE 80942
// begin if not ValidHex ( _x , _y ) then
80867: LD_VAR 0 5
80871: PPUSH
80872: LD_VAR 0 6
80876: PPUSH
80877: CALL_OW 488
80881: NOT
80882: IFFALSE 80886
// continue ;
80884: GO 80864
// if GetResourceTypeXY ( _x , _y ) then
80886: LD_VAR 0 5
80890: PPUSH
80891: LD_VAR 0 6
80895: PPUSH
80896: CALL_OW 283
80900: IFFALSE 80940
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80902: LD_ADDR_VAR 0 4
80906: PUSH
80907: LD_VAR 0 4
80911: PPUSH
80912: LD_VAR 0 4
80916: PUSH
80917: LD_INT 1
80919: PLUS
80920: PPUSH
80921: LD_VAR 0 5
80925: PUSH
80926: LD_VAR 0 6
80930: PUSH
80931: EMPTY
80932: LIST
80933: LIST
80934: PPUSH
80935: CALL_OW 1
80939: ST_TO_ADDR
// end ;
80940: GO 80864
80942: POP
80943: POP
80944: GO 80844
80946: POP
80947: POP
// end ;
80948: LD_VAR 0 4
80952: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80953: LD_INT 0
80955: PPUSH
80956: PPUSH
80957: PPUSH
80958: PPUSH
80959: PPUSH
80960: PPUSH
80961: PPUSH
80962: PPUSH
// if not units then
80963: LD_VAR 0 1
80967: NOT
80968: IFFALSE 80972
// exit ;
80970: GO 81500
// result := UnitFilter ( units , [ f_ok ] ) ;
80972: LD_ADDR_VAR 0 3
80976: PUSH
80977: LD_VAR 0 1
80981: PPUSH
80982: LD_INT 50
80984: PUSH
80985: EMPTY
80986: LIST
80987: PPUSH
80988: CALL_OW 72
80992: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80993: LD_ADDR_VAR 0 8
80997: PUSH
80998: LD_VAR 0 1
81002: PUSH
81003: LD_INT 1
81005: ARRAY
81006: PPUSH
81007: CALL_OW 255
81011: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81012: LD_ADDR_VAR 0 10
81016: PUSH
81017: LD_INT 29
81019: PUSH
81020: LD_INT 91
81022: PUSH
81023: LD_INT 49
81025: PUSH
81026: EMPTY
81027: LIST
81028: LIST
81029: LIST
81030: ST_TO_ADDR
// if not result then
81031: LD_VAR 0 3
81035: NOT
81036: IFFALSE 81040
// exit ;
81038: GO 81500
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81040: LD_ADDR_VAR 0 5
81044: PUSH
81045: LD_INT 81
81047: PUSH
81048: LD_VAR 0 8
81052: PUSH
81053: EMPTY
81054: LIST
81055: LIST
81056: PPUSH
81057: CALL_OW 69
81061: ST_TO_ADDR
// for i in result do
81062: LD_ADDR_VAR 0 4
81066: PUSH
81067: LD_VAR 0 3
81071: PUSH
81072: FOR_IN
81073: IFFALSE 81498
// begin tag := GetTag ( i ) + 1 ;
81075: LD_ADDR_VAR 0 9
81079: PUSH
81080: LD_VAR 0 4
81084: PPUSH
81085: CALL_OW 110
81089: PUSH
81090: LD_INT 1
81092: PLUS
81093: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
81094: LD_ADDR_VAR 0 7
81098: PUSH
81099: LD_VAR 0 4
81103: PPUSH
81104: CALL_OW 250
81108: PPUSH
81109: LD_VAR 0 4
81113: PPUSH
81114: CALL_OW 251
81118: PPUSH
81119: LD_INT 4
81121: PPUSH
81122: CALL 80695 0 3
81126: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
81127: LD_VAR 0 4
81131: PPUSH
81132: CALL_OW 247
81136: PUSH
81137: LD_INT 2
81139: EQUAL
81140: PUSH
81141: LD_VAR 0 7
81145: PUSH
81146: LD_INT 2
81148: GREATER
81149: AND
81150: PUSH
81151: LD_VAR 0 4
81155: PPUSH
81156: CALL_OW 264
81160: PUSH
81161: LD_VAR 0 10
81165: IN
81166: NOT
81167: AND
81168: IFFALSE 81207
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81170: LD_VAR 0 4
81174: PPUSH
81175: LD_VAR 0 7
81179: PUSH
81180: LD_INT 1
81182: ARRAY
81183: PUSH
81184: LD_INT 1
81186: ARRAY
81187: PPUSH
81188: LD_VAR 0 7
81192: PUSH
81193: LD_INT 1
81195: ARRAY
81196: PUSH
81197: LD_INT 2
81199: ARRAY
81200: PPUSH
81201: CALL_OW 116
81205: GO 81496
// if path > tag then
81207: LD_VAR 0 2
81211: PUSH
81212: LD_VAR 0 9
81216: GREATER
81217: IFFALSE 81425
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81219: LD_ADDR_VAR 0 6
81223: PUSH
81224: LD_VAR 0 5
81228: PPUSH
81229: LD_INT 91
81231: PUSH
81232: LD_VAR 0 4
81236: PUSH
81237: LD_INT 8
81239: PUSH
81240: EMPTY
81241: LIST
81242: LIST
81243: LIST
81244: PPUSH
81245: CALL_OW 72
81249: ST_TO_ADDR
// if nearEnemy then
81250: LD_VAR 0 6
81254: IFFALSE 81323
// begin if GetWeapon ( i ) = ru_time_lapser then
81256: LD_VAR 0 4
81260: PPUSH
81261: CALL_OW 264
81265: PUSH
81266: LD_INT 49
81268: EQUAL
81269: IFFALSE 81297
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81271: LD_VAR 0 4
81275: PPUSH
81276: LD_VAR 0 6
81280: PPUSH
81281: LD_VAR 0 4
81285: PPUSH
81286: CALL_OW 74
81290: PPUSH
81291: CALL_OW 112
81295: GO 81321
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81297: LD_VAR 0 4
81301: PPUSH
81302: LD_VAR 0 6
81306: PPUSH
81307: LD_VAR 0 4
81311: PPUSH
81312: CALL_OW 74
81316: PPUSH
81317: CALL 82571 0 2
// end else
81321: GO 81423
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81323: LD_VAR 0 4
81327: PPUSH
81328: LD_VAR 0 2
81332: PUSH
81333: LD_VAR 0 9
81337: ARRAY
81338: PUSH
81339: LD_INT 1
81341: ARRAY
81342: PPUSH
81343: LD_VAR 0 2
81347: PUSH
81348: LD_VAR 0 9
81352: ARRAY
81353: PUSH
81354: LD_INT 2
81356: ARRAY
81357: PPUSH
81358: CALL_OW 297
81362: PUSH
81363: LD_INT 6
81365: GREATER
81366: IFFALSE 81409
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81368: LD_VAR 0 4
81372: PPUSH
81373: LD_VAR 0 2
81377: PUSH
81378: LD_VAR 0 9
81382: ARRAY
81383: PUSH
81384: LD_INT 1
81386: ARRAY
81387: PPUSH
81388: LD_VAR 0 2
81392: PUSH
81393: LD_VAR 0 9
81397: ARRAY
81398: PUSH
81399: LD_INT 2
81401: ARRAY
81402: PPUSH
81403: CALL_OW 114
81407: GO 81423
// SetTag ( i , tag ) ;
81409: LD_VAR 0 4
81413: PPUSH
81414: LD_VAR 0 9
81418: PPUSH
81419: CALL_OW 109
// end else
81423: GO 81496
// if enemy then
81425: LD_VAR 0 5
81429: IFFALSE 81496
// begin if GetWeapon ( i ) = ru_time_lapser then
81431: LD_VAR 0 4
81435: PPUSH
81436: CALL_OW 264
81440: PUSH
81441: LD_INT 49
81443: EQUAL
81444: IFFALSE 81472
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81446: LD_VAR 0 4
81450: PPUSH
81451: LD_VAR 0 5
81455: PPUSH
81456: LD_VAR 0 4
81460: PPUSH
81461: CALL_OW 74
81465: PPUSH
81466: CALL_OW 112
81470: GO 81496
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81472: LD_VAR 0 4
81476: PPUSH
81477: LD_VAR 0 5
81481: PPUSH
81482: LD_VAR 0 4
81486: PPUSH
81487: CALL_OW 74
81491: PPUSH
81492: CALL 82571 0 2
// end ; end ;
81496: GO 81072
81498: POP
81499: POP
// end ;
81500: LD_VAR 0 3
81504: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81505: LD_INT 0
81507: PPUSH
81508: PPUSH
81509: PPUSH
// if not unit or IsInUnit ( unit ) then
81510: LD_VAR 0 1
81514: NOT
81515: PUSH
81516: LD_VAR 0 1
81520: PPUSH
81521: CALL_OW 310
81525: OR
81526: IFFALSE 81530
// exit ;
81528: GO 81621
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81530: LD_ADDR_VAR 0 4
81534: PUSH
81535: LD_VAR 0 1
81539: PPUSH
81540: CALL_OW 250
81544: PPUSH
81545: LD_VAR 0 2
81549: PPUSH
81550: LD_INT 1
81552: PPUSH
81553: CALL_OW 272
81557: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81558: LD_ADDR_VAR 0 5
81562: PUSH
81563: LD_VAR 0 1
81567: PPUSH
81568: CALL_OW 251
81572: PPUSH
81573: LD_VAR 0 2
81577: PPUSH
81578: LD_INT 1
81580: PPUSH
81581: CALL_OW 273
81585: ST_TO_ADDR
// if ValidHex ( x , y ) then
81586: LD_VAR 0 4
81590: PPUSH
81591: LD_VAR 0 5
81595: PPUSH
81596: CALL_OW 488
81600: IFFALSE 81621
// ComTurnXY ( unit , x , y ) ;
81602: LD_VAR 0 1
81606: PPUSH
81607: LD_VAR 0 4
81611: PPUSH
81612: LD_VAR 0 5
81616: PPUSH
81617: CALL_OW 118
// end ;
81621: LD_VAR 0 3
81625: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81626: LD_INT 0
81628: PPUSH
81629: PPUSH
// result := false ;
81630: LD_ADDR_VAR 0 3
81634: PUSH
81635: LD_INT 0
81637: ST_TO_ADDR
// if not units then
81638: LD_VAR 0 2
81642: NOT
81643: IFFALSE 81647
// exit ;
81645: GO 81692
// for i in units do
81647: LD_ADDR_VAR 0 4
81651: PUSH
81652: LD_VAR 0 2
81656: PUSH
81657: FOR_IN
81658: IFFALSE 81690
// if See ( side , i ) then
81660: LD_VAR 0 1
81664: PPUSH
81665: LD_VAR 0 4
81669: PPUSH
81670: CALL_OW 292
81674: IFFALSE 81688
// begin result := true ;
81676: LD_ADDR_VAR 0 3
81680: PUSH
81681: LD_INT 1
81683: ST_TO_ADDR
// exit ;
81684: POP
81685: POP
81686: GO 81692
// end ;
81688: GO 81657
81690: POP
81691: POP
// end ;
81692: LD_VAR 0 3
81696: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81697: LD_INT 0
81699: PPUSH
81700: PPUSH
81701: PPUSH
81702: PPUSH
// if not unit or not points then
81703: LD_VAR 0 1
81707: NOT
81708: PUSH
81709: LD_VAR 0 2
81713: NOT
81714: OR
81715: IFFALSE 81719
// exit ;
81717: GO 81809
// dist := 99999 ;
81719: LD_ADDR_VAR 0 5
81723: PUSH
81724: LD_INT 99999
81726: ST_TO_ADDR
// for i in points do
81727: LD_ADDR_VAR 0 4
81731: PUSH
81732: LD_VAR 0 2
81736: PUSH
81737: FOR_IN
81738: IFFALSE 81807
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81740: LD_ADDR_VAR 0 6
81744: PUSH
81745: LD_VAR 0 1
81749: PPUSH
81750: LD_VAR 0 4
81754: PUSH
81755: LD_INT 1
81757: ARRAY
81758: PPUSH
81759: LD_VAR 0 4
81763: PUSH
81764: LD_INT 2
81766: ARRAY
81767: PPUSH
81768: CALL_OW 297
81772: ST_TO_ADDR
// if tmpDist < dist then
81773: LD_VAR 0 6
81777: PUSH
81778: LD_VAR 0 5
81782: LESS
81783: IFFALSE 81805
// begin result := i ;
81785: LD_ADDR_VAR 0 3
81789: PUSH
81790: LD_VAR 0 4
81794: ST_TO_ADDR
// dist := tmpDist ;
81795: LD_ADDR_VAR 0 5
81799: PUSH
81800: LD_VAR 0 6
81804: ST_TO_ADDR
// end ; end ;
81805: GO 81737
81807: POP
81808: POP
// end ;
81809: LD_VAR 0 3
81813: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81814: LD_INT 0
81816: PPUSH
// uc_side := side ;
81817: LD_ADDR_OWVAR 20
81821: PUSH
81822: LD_VAR 0 1
81826: ST_TO_ADDR
// uc_nation := 3 ;
81827: LD_ADDR_OWVAR 21
81831: PUSH
81832: LD_INT 3
81834: ST_TO_ADDR
// vc_chassis := 25 ;
81835: LD_ADDR_OWVAR 37
81839: PUSH
81840: LD_INT 25
81842: ST_TO_ADDR
// vc_engine := engine_siberite ;
81843: LD_ADDR_OWVAR 39
81847: PUSH
81848: LD_INT 3
81850: ST_TO_ADDR
// vc_control := control_computer ;
81851: LD_ADDR_OWVAR 38
81855: PUSH
81856: LD_INT 3
81858: ST_TO_ADDR
// vc_weapon := 59 ;
81859: LD_ADDR_OWVAR 40
81863: PUSH
81864: LD_INT 59
81866: ST_TO_ADDR
// result := CreateVehicle ;
81867: LD_ADDR_VAR 0 5
81871: PUSH
81872: CALL_OW 45
81876: ST_TO_ADDR
// SetDir ( result , d ) ;
81877: LD_VAR 0 5
81881: PPUSH
81882: LD_VAR 0 4
81886: PPUSH
81887: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81891: LD_VAR 0 5
81895: PPUSH
81896: LD_VAR 0 2
81900: PPUSH
81901: LD_VAR 0 3
81905: PPUSH
81906: LD_INT 0
81908: PPUSH
81909: CALL_OW 48
// end ;
81913: LD_VAR 0 5
81917: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81918: LD_INT 0
81920: PPUSH
81921: PPUSH
81922: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81923: LD_ADDR_VAR 0 2
81927: PUSH
81928: LD_INT 0
81930: PUSH
81931: LD_INT 0
81933: PUSH
81934: LD_INT 0
81936: PUSH
81937: LD_INT 0
81939: PUSH
81940: EMPTY
81941: LIST
81942: LIST
81943: LIST
81944: LIST
81945: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81946: LD_VAR 0 1
81950: NOT
81951: PUSH
81952: LD_VAR 0 1
81956: PPUSH
81957: CALL_OW 264
81961: PUSH
81962: LD_INT 12
81964: PUSH
81965: LD_INT 51
81967: PUSH
81968: LD_INT 32
81970: PUSH
81971: LD_INT 89
81973: PUSH
81974: EMPTY
81975: LIST
81976: LIST
81977: LIST
81978: LIST
81979: IN
81980: NOT
81981: OR
81982: IFFALSE 81986
// exit ;
81984: GO 82084
// for i := 1 to 3 do
81986: LD_ADDR_VAR 0 3
81990: PUSH
81991: DOUBLE
81992: LD_INT 1
81994: DEC
81995: ST_TO_ADDR
81996: LD_INT 3
81998: PUSH
81999: FOR_TO
82000: IFFALSE 82082
// begin tmp := GetCargo ( cargo , i ) ;
82002: LD_ADDR_VAR 0 4
82006: PUSH
82007: LD_VAR 0 1
82011: PPUSH
82012: LD_VAR 0 3
82016: PPUSH
82017: CALL_OW 289
82021: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82022: LD_ADDR_VAR 0 2
82026: PUSH
82027: LD_VAR 0 2
82031: PPUSH
82032: LD_VAR 0 3
82036: PPUSH
82037: LD_VAR 0 4
82041: PPUSH
82042: CALL_OW 1
82046: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82047: LD_ADDR_VAR 0 2
82051: PUSH
82052: LD_VAR 0 2
82056: PPUSH
82057: LD_INT 4
82059: PPUSH
82060: LD_VAR 0 2
82064: PUSH
82065: LD_INT 4
82067: ARRAY
82068: PUSH
82069: LD_VAR 0 4
82073: PLUS
82074: PPUSH
82075: CALL_OW 1
82079: ST_TO_ADDR
// end ;
82080: GO 81999
82082: POP
82083: POP
// end ;
82084: LD_VAR 0 2
82088: RET
// export function Length ( array ) ; begin
82089: LD_INT 0
82091: PPUSH
// result := array + 0 ;
82092: LD_ADDR_VAR 0 2
82096: PUSH
82097: LD_VAR 0 1
82101: PUSH
82102: LD_INT 0
82104: PLUS
82105: ST_TO_ADDR
// end ;
82106: LD_VAR 0 2
82110: RET
// export function PrepareArray ( array ) ; begin
82111: LD_INT 0
82113: PPUSH
// result := array diff 0 ;
82114: LD_ADDR_VAR 0 2
82118: PUSH
82119: LD_VAR 0 1
82123: PUSH
82124: LD_INT 0
82126: DIFF
82127: ST_TO_ADDR
// if not result [ 1 ] then
82128: LD_VAR 0 2
82132: PUSH
82133: LD_INT 1
82135: ARRAY
82136: NOT
82137: IFFALSE 82157
// result := Delete ( result , 1 ) ;
82139: LD_ADDR_VAR 0 2
82143: PUSH
82144: LD_VAR 0 2
82148: PPUSH
82149: LD_INT 1
82151: PPUSH
82152: CALL_OW 3
82156: ST_TO_ADDR
// end ;
82157: LD_VAR 0 2
82161: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82162: LD_INT 0
82164: PPUSH
82165: PPUSH
82166: PPUSH
82167: PPUSH
// sibRocketRange := 25 ;
82168: LD_ADDR_VAR 0 6
82172: PUSH
82173: LD_INT 25
82175: ST_TO_ADDR
// result := false ;
82176: LD_ADDR_VAR 0 4
82180: PUSH
82181: LD_INT 0
82183: ST_TO_ADDR
// for i := 0 to 5 do
82184: LD_ADDR_VAR 0 5
82188: PUSH
82189: DOUBLE
82190: LD_INT 0
82192: DEC
82193: ST_TO_ADDR
82194: LD_INT 5
82196: PUSH
82197: FOR_TO
82198: IFFALSE 82265
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82200: LD_VAR 0 1
82204: PPUSH
82205: LD_VAR 0 5
82209: PPUSH
82210: LD_VAR 0 6
82214: PPUSH
82215: CALL_OW 272
82219: PPUSH
82220: LD_VAR 0 2
82224: PPUSH
82225: LD_VAR 0 5
82229: PPUSH
82230: LD_VAR 0 6
82234: PPUSH
82235: CALL_OW 273
82239: PPUSH
82240: LD_VAR 0 3
82244: PPUSH
82245: CALL_OW 309
82249: IFFALSE 82263
// begin result := true ;
82251: LD_ADDR_VAR 0 4
82255: PUSH
82256: LD_INT 1
82258: ST_TO_ADDR
// exit ;
82259: POP
82260: POP
82261: GO 82267
// end ;
82263: GO 82197
82265: POP
82266: POP
// end ;
82267: LD_VAR 0 4
82271: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
82272: LD_INT 0
82274: PPUSH
82275: PPUSH
82276: PPUSH
// if btype = b_depot then
82277: LD_VAR 0 2
82281: PUSH
82282: LD_INT 0
82284: EQUAL
82285: IFFALSE 82297
// begin result := true ;
82287: LD_ADDR_VAR 0 3
82291: PUSH
82292: LD_INT 1
82294: ST_TO_ADDR
// exit ;
82295: GO 82413
// end ; pom := GetBase ( depot ) ;
82297: LD_ADDR_VAR 0 4
82301: PUSH
82302: LD_VAR 0 1
82306: PPUSH
82307: CALL_OW 274
82311: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
82312: LD_ADDR_VAR 0 5
82316: PUSH
82317: LD_VAR 0 2
82321: PPUSH
82322: LD_VAR 0 1
82326: PPUSH
82327: CALL_OW 248
82331: PPUSH
82332: CALL_OW 450
82336: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
82337: LD_ADDR_VAR 0 3
82341: PUSH
82342: LD_VAR 0 4
82346: PPUSH
82347: LD_INT 1
82349: PPUSH
82350: CALL_OW 275
82354: PUSH
82355: LD_VAR 0 5
82359: PUSH
82360: LD_INT 1
82362: ARRAY
82363: GREATEREQUAL
82364: PUSH
82365: LD_VAR 0 4
82369: PPUSH
82370: LD_INT 2
82372: PPUSH
82373: CALL_OW 275
82377: PUSH
82378: LD_VAR 0 5
82382: PUSH
82383: LD_INT 2
82385: ARRAY
82386: GREATEREQUAL
82387: AND
82388: PUSH
82389: LD_VAR 0 4
82393: PPUSH
82394: LD_INT 3
82396: PPUSH
82397: CALL_OW 275
82401: PUSH
82402: LD_VAR 0 5
82406: PUSH
82407: LD_INT 3
82409: ARRAY
82410: GREATEREQUAL
82411: AND
82412: ST_TO_ADDR
// end ;
82413: LD_VAR 0 3
82417: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82418: LD_INT 0
82420: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82421: LD_VAR 0 1
82425: PPUSH
82426: LD_VAR 0 2
82430: PPUSH
82431: LD_INT 0
82433: PPUSH
82434: LD_INT 0
82436: PPUSH
82437: LD_INT 1
82439: PPUSH
82440: LD_INT 0
82442: PPUSH
82443: CALL_OW 587
// end ;
82447: LD_VAR 0 3
82451: RET
// export function CenterOnNow ( unit ) ; begin
82452: LD_INT 0
82454: PPUSH
// result := IsInUnit ( unit ) ;
82455: LD_ADDR_VAR 0 2
82459: PUSH
82460: LD_VAR 0 1
82464: PPUSH
82465: CALL_OW 310
82469: ST_TO_ADDR
// if not result then
82470: LD_VAR 0 2
82474: NOT
82475: IFFALSE 82487
// result := unit ;
82477: LD_ADDR_VAR 0 2
82481: PUSH
82482: LD_VAR 0 1
82486: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82487: LD_VAR 0 1
82491: PPUSH
82492: CALL_OW 87
// end ;
82496: LD_VAR 0 2
82500: RET
// export function ComMoveHex ( unit , hex ) ; begin
82501: LD_INT 0
82503: PPUSH
// if not hex then
82504: LD_VAR 0 2
82508: NOT
82509: IFFALSE 82513
// exit ;
82511: GO 82566
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82513: LD_VAR 0 2
82517: PUSH
82518: LD_INT 1
82520: ARRAY
82521: PPUSH
82522: LD_VAR 0 2
82526: PUSH
82527: LD_INT 2
82529: ARRAY
82530: PPUSH
82531: CALL_OW 428
82535: IFFALSE 82539
// exit ;
82537: GO 82566
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82539: LD_VAR 0 1
82543: PPUSH
82544: LD_VAR 0 2
82548: PUSH
82549: LD_INT 1
82551: ARRAY
82552: PPUSH
82553: LD_VAR 0 2
82557: PUSH
82558: LD_INT 2
82560: ARRAY
82561: PPUSH
82562: CALL_OW 111
// end ;
82566: LD_VAR 0 3
82570: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82571: LD_INT 0
82573: PPUSH
82574: PPUSH
82575: PPUSH
// if not unit or not enemy then
82576: LD_VAR 0 1
82580: NOT
82581: PUSH
82582: LD_VAR 0 2
82586: NOT
82587: OR
82588: IFFALSE 82592
// exit ;
82590: GO 82716
// x := GetX ( enemy ) ;
82592: LD_ADDR_VAR 0 4
82596: PUSH
82597: LD_VAR 0 2
82601: PPUSH
82602: CALL_OW 250
82606: ST_TO_ADDR
// y := GetY ( enemy ) ;
82607: LD_ADDR_VAR 0 5
82611: PUSH
82612: LD_VAR 0 2
82616: PPUSH
82617: CALL_OW 251
82621: ST_TO_ADDR
// if ValidHex ( x , y ) then
82622: LD_VAR 0 4
82626: PPUSH
82627: LD_VAR 0 5
82631: PPUSH
82632: CALL_OW 488
82636: IFFALSE 82716
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
82638: LD_VAR 0 2
82642: PPUSH
82643: CALL_OW 247
82647: PUSH
82648: LD_INT 3
82650: PUSH
82651: LD_INT 2
82653: PUSH
82654: EMPTY
82655: LIST
82656: LIST
82657: IN
82658: PUSH
82659: LD_VAR 0 1
82663: PPUSH
82664: CALL_OW 255
82668: PPUSH
82669: LD_VAR 0 2
82673: PPUSH
82674: CALL_OW 292
82678: OR
82679: IFFALSE 82697
// ComAttackUnit ( unit , enemy ) else
82681: LD_VAR 0 1
82685: PPUSH
82686: LD_VAR 0 2
82690: PPUSH
82691: CALL_OW 115
82695: GO 82716
// ComAgressiveMove ( unit , x , y ) ;
82697: LD_VAR 0 1
82701: PPUSH
82702: LD_VAR 0 4
82706: PPUSH
82707: LD_VAR 0 5
82711: PPUSH
82712: CALL_OW 114
// end ;
82716: LD_VAR 0 3
82720: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
82721: LD_INT 0
82723: PPUSH
82724: PPUSH
82725: PPUSH
// list := AreaToList ( area , 0 ) ;
82726: LD_ADDR_VAR 0 5
82730: PUSH
82731: LD_VAR 0 1
82735: PPUSH
82736: LD_INT 0
82738: PPUSH
82739: CALL_OW 517
82743: ST_TO_ADDR
// if not list then
82744: LD_VAR 0 5
82748: NOT
82749: IFFALSE 82753
// exit ;
82751: GO 82883
// if all then
82753: LD_VAR 0 2
82757: IFFALSE 82845
// begin for i := 1 to list [ 1 ] do
82759: LD_ADDR_VAR 0 4
82763: PUSH
82764: DOUBLE
82765: LD_INT 1
82767: DEC
82768: ST_TO_ADDR
82769: LD_VAR 0 5
82773: PUSH
82774: LD_INT 1
82776: ARRAY
82777: PUSH
82778: FOR_TO
82779: IFFALSE 82841
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
82781: LD_ADDR_VAR 0 3
82785: PUSH
82786: LD_VAR 0 3
82790: PPUSH
82791: LD_VAR 0 3
82795: PUSH
82796: LD_INT 1
82798: PLUS
82799: PPUSH
82800: LD_VAR 0 5
82804: PUSH
82805: LD_INT 1
82807: ARRAY
82808: PUSH
82809: LD_VAR 0 4
82813: ARRAY
82814: PUSH
82815: LD_VAR 0 5
82819: PUSH
82820: LD_INT 2
82822: ARRAY
82823: PUSH
82824: LD_VAR 0 4
82828: ARRAY
82829: PUSH
82830: EMPTY
82831: LIST
82832: LIST
82833: PPUSH
82834: CALL_OW 1
82838: ST_TO_ADDR
82839: GO 82778
82841: POP
82842: POP
// exit ;
82843: GO 82883
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
82845: LD_ADDR_VAR 0 3
82849: PUSH
82850: LD_VAR 0 5
82854: PUSH
82855: LD_INT 1
82857: ARRAY
82858: PUSH
82859: LD_INT 1
82861: ARRAY
82862: PUSH
82863: LD_VAR 0 5
82867: PUSH
82868: LD_INT 2
82870: ARRAY
82871: PUSH
82872: LD_INT 1
82874: ARRAY
82875: PUSH
82876: EMPTY
82877: LIST
82878: LIST
82879: PUSH
82880: EMPTY
82881: LIST
82882: ST_TO_ADDR
// end ;
82883: LD_VAR 0 3
82887: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
82888: LD_INT 0
82890: PPUSH
82891: PPUSH
// list := AreaToList ( area , 0 ) ;
82892: LD_ADDR_VAR 0 4
82896: PUSH
82897: LD_VAR 0 1
82901: PPUSH
82902: LD_INT 0
82904: PPUSH
82905: CALL_OW 517
82909: ST_TO_ADDR
// if not list then
82910: LD_VAR 0 4
82914: NOT
82915: IFFALSE 82919
// exit ;
82917: GO 82960
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
82919: LD_ADDR_VAR 0 3
82923: PUSH
82924: LD_VAR 0 4
82928: PUSH
82929: LD_INT 1
82931: ARRAY
82932: PUSH
82933: LD_INT 1
82935: ARRAY
82936: PUSH
82937: LD_VAR 0 4
82941: PUSH
82942: LD_INT 2
82944: ARRAY
82945: PUSH
82946: LD_INT 1
82948: ARRAY
82949: PUSH
82950: LD_VAR 0 2
82954: PUSH
82955: EMPTY
82956: LIST
82957: LIST
82958: LIST
82959: ST_TO_ADDR
// end ;
82960: LD_VAR 0 3
82964: RET
// export function First ( array ) ; begin
82965: LD_INT 0
82967: PPUSH
// if not array then
82968: LD_VAR 0 1
82972: NOT
82973: IFFALSE 82977
// exit ;
82975: GO 82991
// result := array [ 1 ] ;
82977: LD_ADDR_VAR 0 2
82981: PUSH
82982: LD_VAR 0 1
82986: PUSH
82987: LD_INT 1
82989: ARRAY
82990: ST_TO_ADDR
// end ;
82991: LD_VAR 0 2
82995: RET
// export function Last ( array ) ; begin
82996: LD_INT 0
82998: PPUSH
// if not array then
82999: LD_VAR 0 1
83003: NOT
83004: IFFALSE 83008
// exit ;
83006: GO 83024
// result := array [ array ] ;
83008: LD_ADDR_VAR 0 2
83012: PUSH
83013: LD_VAR 0 1
83017: PUSH
83018: LD_VAR 0 1
83022: ARRAY
83023: ST_TO_ADDR
// end ;
83024: LD_VAR 0 2
83028: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
83029: LD_INT 0
83031: PPUSH
83032: PPUSH
// result := [ ] ;
83033: LD_ADDR_VAR 0 5
83037: PUSH
83038: EMPTY
83039: ST_TO_ADDR
// if not array then
83040: LD_VAR 0 1
83044: NOT
83045: IFFALSE 83049
// exit ;
83047: GO 83161
// for i := 1 to array do
83049: LD_ADDR_VAR 0 6
83053: PUSH
83054: DOUBLE
83055: LD_INT 1
83057: DEC
83058: ST_TO_ADDR
83059: LD_VAR 0 1
83063: PUSH
83064: FOR_TO
83065: IFFALSE 83159
// if array [ i ] [ index ] = value then
83067: LD_VAR 0 1
83071: PUSH
83072: LD_VAR 0 6
83076: ARRAY
83077: PUSH
83078: LD_VAR 0 2
83082: ARRAY
83083: PUSH
83084: LD_VAR 0 3
83088: EQUAL
83089: IFFALSE 83157
// begin if indexColumn then
83091: LD_VAR 0 4
83095: IFFALSE 83131
// result := Join ( result , array [ i ] [ indexColumn ] ) else
83097: LD_ADDR_VAR 0 5
83101: PUSH
83102: LD_VAR 0 5
83106: PPUSH
83107: LD_VAR 0 1
83111: PUSH
83112: LD_VAR 0 6
83116: ARRAY
83117: PUSH
83118: LD_VAR 0 4
83122: ARRAY
83123: PPUSH
83124: CALL 78343 0 2
83128: ST_TO_ADDR
83129: GO 83157
// result := Join ( result , array [ i ] ) ;
83131: LD_ADDR_VAR 0 5
83135: PUSH
83136: LD_VAR 0 5
83140: PPUSH
83141: LD_VAR 0 1
83145: PUSH
83146: LD_VAR 0 6
83150: ARRAY
83151: PPUSH
83152: CALL 78343 0 2
83156: ST_TO_ADDR
// end ;
83157: GO 83064
83159: POP
83160: POP
// end ;
83161: LD_VAR 0 5
83165: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
83166: LD_INT 0
83168: PPUSH
// if not vehicles or not parkingPoint then
83169: LD_VAR 0 1
83173: NOT
83174: PUSH
83175: LD_VAR 0 2
83179: NOT
83180: OR
83181: IFFALSE 83185
// exit ;
83183: GO 83283
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
83185: LD_ADDR_VAR 0 1
83189: PUSH
83190: LD_VAR 0 1
83194: PPUSH
83195: LD_INT 50
83197: PUSH
83198: EMPTY
83199: LIST
83200: PUSH
83201: LD_INT 3
83203: PUSH
83204: LD_INT 92
83206: PUSH
83207: LD_VAR 0 2
83211: PUSH
83212: LD_INT 1
83214: ARRAY
83215: PUSH
83216: LD_VAR 0 2
83220: PUSH
83221: LD_INT 2
83223: ARRAY
83224: PUSH
83225: LD_INT 8
83227: PUSH
83228: EMPTY
83229: LIST
83230: LIST
83231: LIST
83232: LIST
83233: PUSH
83234: EMPTY
83235: LIST
83236: LIST
83237: PUSH
83238: EMPTY
83239: LIST
83240: LIST
83241: PPUSH
83242: CALL_OW 72
83246: ST_TO_ADDR
// if not vehicles then
83247: LD_VAR 0 1
83251: NOT
83252: IFFALSE 83256
// exit ;
83254: GO 83283
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
83256: LD_VAR 0 1
83260: PPUSH
83261: LD_VAR 0 2
83265: PUSH
83266: LD_INT 1
83268: ARRAY
83269: PPUSH
83270: LD_VAR 0 2
83274: PUSH
83275: LD_INT 2
83277: ARRAY
83278: PPUSH
83279: CALL_OW 111
// end ;
83283: LD_VAR 0 3
83287: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
83288: LD_INT 0
83290: PPUSH
83291: PPUSH
83292: PPUSH
// if not side or not area then
83293: LD_VAR 0 1
83297: NOT
83298: PUSH
83299: LD_VAR 0 2
83303: NOT
83304: OR
83305: IFFALSE 83309
// exit ;
83307: GO 83428
// tmp := AreaToList ( area , 0 ) ;
83309: LD_ADDR_VAR 0 5
83313: PUSH
83314: LD_VAR 0 2
83318: PPUSH
83319: LD_INT 0
83321: PPUSH
83322: CALL_OW 517
83326: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
83327: LD_ADDR_VAR 0 4
83331: PUSH
83332: DOUBLE
83333: LD_INT 1
83335: DEC
83336: ST_TO_ADDR
83337: LD_VAR 0 5
83341: PUSH
83342: LD_INT 1
83344: ARRAY
83345: PUSH
83346: FOR_TO
83347: IFFALSE 83426
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
83349: LD_VAR 0 5
83353: PUSH
83354: LD_INT 1
83356: ARRAY
83357: PUSH
83358: LD_VAR 0 4
83362: ARRAY
83363: PPUSH
83364: LD_VAR 0 5
83368: PUSH
83369: LD_INT 2
83371: ARRAY
83372: PUSH
83373: LD_VAR 0 4
83377: ARRAY
83378: PPUSH
83379: CALL_OW 351
83383: IFFALSE 83424
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
83385: LD_VAR 0 5
83389: PUSH
83390: LD_INT 1
83392: ARRAY
83393: PUSH
83394: LD_VAR 0 4
83398: ARRAY
83399: PPUSH
83400: LD_VAR 0 5
83404: PUSH
83405: LD_INT 2
83407: ARRAY
83408: PUSH
83409: LD_VAR 0 4
83413: ARRAY
83414: PPUSH
83415: LD_VAR 0 1
83419: PPUSH
83420: CALL_OW 244
// end ;
83424: GO 83346
83426: POP
83427: POP
// end ; end_of_file
83428: LD_VAR 0 3
83432: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83433: LD_VAR 0 1
83437: PUSH
83438: LD_INT 200
83440: DOUBLE
83441: GREATEREQUAL
83442: IFFALSE 83450
83444: LD_INT 299
83446: DOUBLE
83447: LESSEQUAL
83448: IFTRUE 83452
83450: GO 83484
83452: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83453: LD_VAR 0 1
83457: PPUSH
83458: LD_VAR 0 2
83462: PPUSH
83463: LD_VAR 0 3
83467: PPUSH
83468: LD_VAR 0 4
83472: PPUSH
83473: LD_VAR 0 5
83477: PPUSH
83478: CALL 35849 0 5
83482: GO 83561
83484: LD_INT 300
83486: DOUBLE
83487: GREATEREQUAL
83488: IFFALSE 83496
83490: LD_INT 399
83492: DOUBLE
83493: LESSEQUAL
83494: IFTRUE 83498
83496: GO 83560
83498: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83499: LD_VAR 0 1
83503: PPUSH
83504: LD_VAR 0 2
83508: PPUSH
83509: LD_VAR 0 3
83513: PPUSH
83514: LD_VAR 0 4
83518: PPUSH
83519: LD_VAR 0 5
83523: PPUSH
83524: LD_VAR 0 6
83528: PPUSH
83529: LD_VAR 0 7
83533: PPUSH
83534: LD_VAR 0 8
83538: PPUSH
83539: LD_VAR 0 9
83543: PPUSH
83544: LD_VAR 0 10
83548: PPUSH
83549: LD_VAR 0 11
83553: PPUSH
83554: CALL 31787 0 11
83558: GO 83561
83560: POP
// end ;
83561: PPOPN 11
83563: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83564: LD_VAR 0 1
83568: PPUSH
83569: LD_VAR 0 2
83573: PPUSH
83574: LD_VAR 0 3
83578: PPUSH
83579: LD_VAR 0 4
83583: PPUSH
83584: LD_VAR 0 5
83588: PPUSH
83589: CALL 35264 0 5
// end ; end_of_file
83593: PPOPN 5
83595: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83596: LD_VAR 0 1
83600: PPUSH
83601: LD_VAR 0 2
83605: PPUSH
83606: LD_VAR 0 3
83610: PPUSH
83611: LD_VAR 0 4
83615: PPUSH
83616: LD_VAR 0 5
83620: PPUSH
83621: LD_VAR 0 6
83625: PPUSH
83626: CALL 19439 0 6
// end ;
83630: PPOPN 6
83632: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83633: LD_INT 0
83635: PPUSH
// begin if not units then
83636: LD_VAR 0 1
83640: NOT
83641: IFFALSE 83645
// exit ;
83643: GO 83645
// end ;
83645: PPOPN 7
83647: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83648: CALL 19326 0 0
// end ;
83652: PPOPN 1
83654: END
